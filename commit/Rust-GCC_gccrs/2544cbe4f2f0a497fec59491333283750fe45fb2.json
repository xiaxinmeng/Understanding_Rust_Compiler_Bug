{"sha": "2544cbe4f2f0a497fec59491333283750fe45fb2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjU0NGNiZTRmMmYwYTQ5N2ZlYzU5NDkxMzMzMjgzNzUwZmU0NWZiMg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2015-11-18T10:50:40Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-11-18T10:50:40Z"}, "message": "gnat_project_manager.rst, [...]: Update doc.\n\n        * gnat_ugn/gnat_project_manager.rst,\n        gnat_ugn/building_executable_programs_with_gnat.rst,\n        gnat_ugn/gnat_and_program_execution.rst,\n        gnat_ugn/the_gnat_compilation_model.rst,\n        gnat_rm/implementation_defined_pragmas.rst,\n        gnat_rm/standard_and_implementation_defined_restrictions.rst,\n        gnat_ugn.texi, gnat_rm.texi: Update doc.\n\nFrom-SVN: r230538", "tree": {"sha": "213faed3ad9ddc3a3dc173fc59891cae437d2909", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/213faed3ad9ddc3a3dc173fc59891cae437d2909"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2544cbe4f2f0a497fec59491333283750fe45fb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2544cbe4f2f0a497fec59491333283750fe45fb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2544cbe4f2f0a497fec59491333283750fe45fb2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2544cbe4f2f0a497fec59491333283750fe45fb2/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "767cd81cc321266c1f23d738e313cd9dc46377ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/767cd81cc321266c1f23d738e313cd9dc46377ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/767cd81cc321266c1f23d738e313cd9dc46377ad"}], "stats": {"total": 457, "additions": 405, "deletions": 52}, "files": [{"sha": "8cafc9a19c2ccc798dae3c458e853926a8618c4c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2544cbe4f2f0a497fec59491333283750fe45fb2/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2544cbe4f2f0a497fec59491333283750fe45fb2/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2544cbe4f2f0a497fec59491333283750fe45fb2", "patch": "@@ -1,3 +1,13 @@\n+2015-11-18  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* gnat_ugn/gnat_project_manager.rst,\n+\tgnat_ugn/building_executable_programs_with_gnat.rst,\n+\tgnat_ugn/gnat_and_program_execution.rst,\n+\tgnat_ugn/the_gnat_compilation_model.rst,\n+\tgnat_rm/implementation_defined_pragmas.rst,\n+\tgnat_rm/standard_and_implementation_defined_restrictions.rst,\n+\tgnat_ugn.texi, gnat_rm.texi: Update doc.\n+\n 2015-11-18  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* contracts.adb (Add_Contract_Item): Chain pragmas Attach_Handler"}, {"sha": "2c7621327881426e424b675544eb2801ef1fb5dd", "filename": "gcc/ada/doc/gnat_rm/implementation_defined_pragmas.rst", "status": "modified", "additions": 281, "deletions": 43, "changes": 324, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2544cbe4f2f0a497fec59491333283750fe45fb2/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2544cbe4f2f0a497fec59491333283750fe45fb2/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst?ref=2544cbe4f2f0a497fec59491333283750fe45fb2", "patch": "@@ -40,8 +40,50 @@ sequence).\n Pragma Abstract_State\n =====================\n \n-For the description of this pragma, see SPARK 2014 Reference Manual,\n-section 7.1.4.\n+Syntax:\n+\n+.. code-block:: ada\n+\n+  pragma Abstract_State (ABSTRACT_STATE_LIST);\n+\n+  ABSTRACT_STATE_LIST ::=\n+       null\n+    |  STATE_NAME_WITH_OPTIONS\n+    | (STATE_NAME_WITH_OPTIONS {, STATE_NAME_WITH_OPTIONS} )\n+\n+  STATE_NAME_WITH_OPTIONS ::=\n+       STATE_NAME\n+    | (STATE_NAME with OPTION_LIST)\n+\n+  OPTION_LIST ::= OPTION {, OPTION}\n+\n+  OPTION ::=\n+      SIMPLE_OPTION\n+    | NAME_VALUE_OPTION\n+\n+  SIMPLE_OPTION ::= Ghost | Synchronous\n+\n+  NAME_VALUE_OPTION ::=\n+      Part_Of => ABSTRACT_STATE\n+    | External [=> EXTERNAL_PROPERTY_LIST]\n+\n+  EXTERNAL_PROPERTY_LIST ::=\n+       EXTERNAL_PROPERTY\n+    | (EXTERNAL_PROPERTY {, EXTERNAL_PROPERTY} )\n+\n+  EXTERNAL_PROPERTY ::=\n+      Async_Readers    [=> boolean_EXPRESSION]\n+    | Async_Writers    [=> boolean_EXPRESSION]\n+    | Effective_Reads  [=> boolean_EXPRESSION]\n+    | Effective_Writes [=> boolean_EXPRESSION]\n+      others            => boolean_EXPRESSION\n+\n+  STATE_NAME ::= defining_identifier\n+\n+  ABSTRACT_STATE ::= name\n+\n+For the semantics of this pragma, see the entry for aspect `Abstract_State` in\n+the SPARK 2014 Reference Manual, section 7.1.4.\n \n Pragma Ada_83\n =============\n@@ -510,14 +552,26 @@ case, and it is recommended that these two options not be used together.\n Pragma Async_Readers\n ====================\n \n-For the description of this pragma, see SPARK 2014 Reference Manual,\n-section 7.1.2.\n+Syntax:\n+\n+.. code-block:: ada\n+\n+  pragma Asynch_Readers   [ (boolean_EXPRESSION) ];\n+\n+For the semantics of this pragma, see the entry for aspect `Async_Readers` in\n+the SPARK 2014 Reference Manual, section 7.1.2.\n \n Pragma Async_Writers\n ====================\n \n-For the description of this pragma, see SPARK 2014 Reference Manual,\n-section 7.1.2.\n+Syntax:\n+\n+.. code-block:: ada\n+\n+  pragma Asynch_Writers   [ (boolean_EXPRESSION) ];\n+\n+For the semantics of this pragma, see the entry for aspect `Async_Writers` in\n+the SPARK 2014 Reference Manual, section 7.1.2.\n \n Pragma Attribute_Definition\n ===========================\n@@ -1049,23 +1103,30 @@ clause), the GNAT uses the default alignment as described previously.\n Pragma Constant_After_Elaboration\n =================================\n \n-For the description of this pragma, see SPARK 2014 Reference Manual,\n-section 3.3.1.\n+Syntax:\n+\n+.. code-block:: ada\n+\n+  pragma Constant_After_Elaboration [ (boolean_EXPRESSION) ];\n+\n+For the semantics of this pragma, see the entry for aspect\n+`Constant_After_Elaboration` in the SPARK 2014 Reference Manual, section 3.3.1.\n \n Pragma Contract_Cases\n =====================\n .. index:: Contract cases\n \n-\n Syntax:\n \n+.. code-block:: ada\n \n-::\n+  pragma Contract_Cases ((CONTRACT_CASE {, CONTRACT_CASE));\n \n-  pragma Contract_Cases (\n-     Condition => Consequence\n-   {,Condition => Consequence});\n+  CONTRACT_CASE ::= CASE_GUARD => CONSEQUENCE\n+\n+  CASE_GUARD ::= boolean_EXPRESSION | others\n \n+  CONSEQUENCE ::= boolean_EXPRESSION\n \n The `Contract_Cases` pragma allows defining fine-grain specifications\n that can complement or replace the contract given by a precondition and a\n@@ -1308,8 +1369,14 @@ See Ada 2012 Reference Manual for details.\n Pragma Default_Initial_Condition\n ================================\n \n-For the description of this pragma, see SPARK 2014 Reference Manual,\n-section 7.3.3.\n+Syntax:\n+\n+.. code-block:: ada\n+\n+  pragma Default_Initial_Condition [ (null | boolean_EXPRESSION) ];\n+\n+For the semantics of this pragma, see the entry for aspect\n+`Default_Initial_Condition` in the SPARK 2014 Reference Manual, section 7.3.3.\n \n Pragma Debug\n ============\n@@ -1449,8 +1516,33 @@ See Ada 2012 Reference Manual for details.\n Pragma Depends\n ==============\n \n-For the description of this pragma, see SPARK 2014 Reference Manual,\n-section 6.1.5.\n+Syntax:\n+\n+.. code-block:: ada\n+\n+  pragma Depends (DEPENDENCY_RELATION);\n+\n+  DEPENDENCY_RELATION ::=\n+       null\n+    | (DEPENDENCY_CLAUSE {, DEPENDENCY_CLAUSE})\n+\n+  DEPENDENCY_CLAUSE ::=\n+      OUTPUT_LIST =>[+] INPUT_LIST\n+    | NULL_DEPENDENCY_CLAUSE\n+\n+  NULL_DEPENDENCY_CLAUSE ::= null => INPUT_LIST\n+\n+  OUTPUT_LIST ::= OUTPUT | (OUTPUT {, OUTPUT})\n+\n+  INPUT_LIST ::= null | INPUT | (INPUT {, INPUT})\n+\n+  OUTPUT ::= NAME | FUNCTION_RESULT\n+  INPUT  ::= NAME\n+\n+  where FUNCTION_RESULT is a function Result attribute_reference\n+\n+For the semantics of this pragma, see the entry for aspect `Depends` in the\n+SPARK 2014 Reference Manual, section 6.1.5.\n \n Pragma Detect_Blocking\n ======================\n@@ -1512,14 +1604,26 @@ See Ada 2012 Reference Manual for details.\n Pragma Effective_Reads\n ======================\n \n-For the description of this pragma, see SPARK 2014 Reference Manual,\n-section 7.1.2.\n+Syntax:\n+\n+.. code-block:: ada\n+\n+  pragma Effective_Reads  [ (boolean_EXPRESSION) ];\n+\n+For the semantics of this pragma, see the entry for aspect `Effective_Reads` in\n+the SPARK 2014 Reference Manual, section 7.1.2.\n \n Pragma Effective_Writes\n =======================\n \n-For the description of this pragma, see SPARK 2014 Reference Manual,\n-section 7.1.2.\n+Syntax:\n+\n+.. code-block:: ada\n+\n+  pragma Effective_Writes [ (boolean_EXPRESSION) ];\n+\n+For the semantics of this pragma, see the entry for aspect `Effective_Writes`\n+in the SPARK 2014 Reference Manual, section 7.1.2.\n \n Pragma Elaboration_Checks\n =========================\n@@ -1966,8 +2070,14 @@ of GNAT specific extensions are recognized as follows:\n Pragma Extensions_Visible\n =========================\n \n-For the description of this pragma, see SPARK 2014 Reference Manual,\n-section 6.1.7.\n+Syntax:\n+\n+.. code-block:: ada\n+\n+  pragma Extensions_Visible [ (boolean_EXPRESSION) ];\n+\n+For the semantics of this pragma, see the entry for aspect `Extensions_Visible`\n+in the SPARK 2014 Reference Manual, section 6.1.7.\n \n Pragma External\n ===============\n@@ -2168,14 +2278,37 @@ be `IEEE_Float` to specify the use of IEEE format, as follows:\n Pragma Ghost\n ============\n \n-For the description of this pragma, see SPARK 2014 Reference Manual,\n-section 6.9.\n+Syntax:\n+\n+.. code-block:: ada\n+\n+  pragma Ghost [ (boolean_EXPRESSION) ];\n+\n+For the semantics of this pragma, see the entry for aspect `Ghost` in the SPARK\n+2014 Reference Manual, section 6.9.\n \n Pragma Global\n =============\n \n-For the description of this pragma, see SPARK 2014 Reference Manual,\n-section 6.1.4.\n+Syntax:\n+\n+.. code-block:: ada\n+\n+  pragma Global (GLOBAL_SPECIFICATION);\n+\n+  GLOBAL_SPECIFICATION ::=\n+       null\n+    | (GLOBAL_LIST)\n+    | (MODED_GLOBAL_LIST {, MODED_GLOBAL_LIST})\n+\n+  MODED_GLOBAL_LIST ::= MODE_SELECTOR => GLOBAL_LIST\n+\n+  MODE_SELECTOR ::= In_Out | Input | Output | Proof_In\n+  GLOBAL_LIST   ::= GLOBAL_ITEM | (GLOBAL_ITEM {, GLOBAL_ITEM})\n+  GLOBAL_ITEM   ::= NAME\n+\n+For the semantics of this pragma, see the entry for aspect `Global` in the\n+SPARK 2014 Reference Manual, section 6.1.4.\n \n Pragma Ident\n ============\n@@ -2574,8 +2707,14 @@ tight packing).\n Pragma Initial_Condition\n ========================\n \n-For the description of this pragma, see SPARK 2014 Reference Manual,\n-section 7.1.6.\n+Syntax:\n+\n+.. code-block:: ada\n+\n+  pragma Initial_Condition (boolean_EXPRESSION);\n+\n+For the semantics of this pragma, see the entry for aspect `Initial_Condition`\n+in the SPARK 2014 Reference Manual, section 7.1.6.\n \n Pragma Initialize_Scalars\n =========================\n@@ -2642,8 +2781,27 @@ User's Guide) when using this pragma.\n Pragma Initializes\n ==================\n \n-For the description of this pragma, see SPARK 2014 Reference Manual,\n-section 7.1.5.\n+Syntax:\n+\n+.. code-block:: ada\n+\n+  pragma Initializes (INITIALIZATION_LIST);\n+\n+  INITIALIZATION_LIST ::=\n+       null\n+    | (INITIALIZATION_ITEM {, INITIALIZATION_ITEM})\n+\n+  INITIALIZATION_ITEM ::= name [=> INPUT_LIST]\n+\n+  INPUT_LIST ::=\n+       null\n+    |  INPUT\n+    | (INPUT {, INPUT})\n+\n+  INPUT ::= name\n+\n+For the semantics of this pragma, see the entry for aspect `Initializes` in the\n+SPARK 2014 Reference Manual, section 7.1.5.\n \n Pragma Inline_Always\n ====================\n@@ -3988,8 +4146,16 @@ See Ada 2012 Reference Manual for details.\n Pragma Part_Of\n ==============\n \n-For the description of this pragma, see SPARK 2014 Reference Manual,\n-section 7.2.6.\n+Syntax:\n+\n+.. code-block:: ada\n+\n+  pragma Part_Of (ABSTRACT_STATE);\n+\n+  ABSTRACT_STATE ::= NAME\n+\n+For the semantics of this pragma, see the entry for aspect `Part_Of` in the\n+SPARK 2014 Reference Manual, section 7.2.6.\n \n Pragma Passive\n ==============\n@@ -4943,26 +5109,92 @@ which is the preferred method of setting the `Ravenscar` profile.\n Pragma Refined_Depends\n ======================\n \n-For the description of this pragma, see SPARK 2014 Reference Manual,\n-section 6.1.5.\n+Syntax:\n+\n+.. code-block:: ada\n+\n+  pragma Refined_Depends (DEPENDENCY_RELATION);\n+\n+  DEPENDENCY_RELATION ::=\n+       null\n+    | (DEPENDENCY_CLAUSE {, DEPENDENCY_CLAUSE})\n+\n+  DEPENDENCY_CLAUSE ::=\n+      OUTPUT_LIST =>[+] INPUT_LIST\n+    | NULL_DEPENDENCY_CLAUSE\n+\n+  NULL_DEPENDENCY_CLAUSE ::= null => INPUT_LIST\n+\n+  OUTPUT_LIST ::= OUTPUT | (OUTPUT {, OUTPUT})\n+\n+  INPUT_LIST ::= null | INPUT | (INPUT {, INPUT})\n+\n+  OUTPUT ::= NAME | FUNCTION_RESULT\n+  INPUT  ::= NAME\n+\n+  where FUNCTION_RESULT is a function Result attribute_reference\n+\n+For the semantics of this pragma, see the entry for aspect `Refined_Depends` in\n+the SPARK 2014 Reference Manual, section 6.1.5.\n \n Pragma Refined_Global\n =====================\n \n-For the description of this pragma, see SPARK 2014 Reference Manual,\n-section 6.1.4.\n+Syntax:\n+\n+.. code-block:: ada\n+\n+  pragma Refined_Global (GLOBAL_SPECIFICATION);\n+\n+  GLOBAL_SPECIFICATION ::=\n+       null\n+    | (GLOBAL_LIST)\n+    | (MODED_GLOBAL_LIST {, MODED_GLOBAL_LIST})\n+\n+  MODED_GLOBAL_LIST ::= MODE_SELECTOR => GLOBAL_LIST\n+\n+  MODE_SELECTOR ::= In_Out | Input | Output | Proof_In\n+  GLOBAL_LIST   ::= GLOBAL_ITEM | (GLOBAL_ITEM {, GLOBAL_ITEM})\n+  GLOBAL_ITEM   ::= NAME\n+\n+For the semantics of this pragma, see the entry for aspect `Refined_Global` in\n+the SPARK 2014 Reference Manual, section 6.1.4.\n \n Pragma Refined_Post\n ===================\n \n-For the description of this pragma, see SPARK 2014 Reference Manual,\n-section 7.2.7.\n+Syntax:\n+\n+.. code-block:: ada\n+\n+  pragma Refined_Post (boolean_EXPRESSION);\n+\n+For the semantics of this pragma, see the entry for aspect `Refined_Post` in\n+the SPARK 2014 Reference Manual, section 7.2.7.\n \n Pragma Refined_State\n ====================\n \n-For the description of this pragma, see SPARK 2014 Reference Manual,\n-section 7.2.2.\n+Syntax:\n+\n+.. code-block:: ada\n+\n+  pragma Refined_State (REFINEMENT_LIST);\n+\n+  REFINEMENT_LIST ::=\n+    (REFINEMENT_CLAUSE {, REFINEMENT_CLAUSE})\n+\n+  REFINEMENT_CLAUSE ::= state_NAME => CONSTITUENT_LIST\n+\n+  CONSTITUENT_LIST ::=\n+       null\n+    |  CONSTITUENT\n+    | (CONSTITUENT {, CONSTITUENT})\n+\n+  CONSTITUENT ::= object_NAME | state_NAME\n+\n+For the semantics of this pragma, see the entry for aspect `Refined_State` in\n+the SPARK 2014 Reference Manual, section 7.2.2.\n \n Pragma Relative_Deadline\n ========================\n@@ -6615,8 +6847,14 @@ It is not permissible to specify `Volatile_Full_Access` for a composite\n Pragma Volatile_Function\n ========================\n \n-For the description of this pragma, see SPARK 2014 Reference Manual,\n-section 7.1.2.\n+Syntax:\n+\n+.. code-block:: ada\n+\n+  pragma Volatile_Function [ (boolean_EXPRESSION) ];\n+\n+For the semantics of this pragma, see the entry for aspect `Volatile_Function`\n+in the SPARK 2014 Reference Manual, section 7.1.2.\n \n Pragma Warning_As_Error\n ======================="}, {"sha": "f338f0f2f4d5c01089f76d8576aaa53dc9bfc8ed", "filename": "gcc/ada/doc/gnat_rm/standard_and_implementation_defined_restrictions.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2544cbe4f2f0a497fec59491333283750fe45fb2/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fstandard_and_implementation_defined_restrictions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2544cbe4f2f0a497fec59491333283750fe45fb2/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fstandard_and_implementation_defined_restrictions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fstandard_and_implementation_defined_restrictions.rst?ref=2544cbe4f2f0a497fec59491333283750fe45fb2", "patch": "@@ -772,7 +772,7 @@ Pure_Barriers\n [GNAT] This restriction ensures at compile time that protected entry\n barriers are restricted to:\n \n-* simple boolean variables defined in the private part of the\n+* simple variables defined in the private part of the\n   protected type/object,\n * constant declarations,\n * named numbers,"}, {"sha": "c6344132ab4b43ad3cefc28f1042aed50f8181e7", "filename": "gcc/ada/doc/gnat_ugn/building_executable_programs_with_gnat.rst", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2544cbe4f2f0a497fec59491333283750fe45fb2/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2544cbe4f2f0a497fec59491333283750fe45fb2/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst?ref=2544cbe4f2f0a497fec59491333283750fe45fb2", "patch": "@@ -1306,6 +1306,17 @@ Alphabetical List of All Switches\n   :ref:`Optimization_and_Strict_Aliasing` for details.\n \n \n+.. index:: -fno-strict-overflow  (gcc)\n+\n+:samp:`-fno-strict-overflow`\n+  Causes the compiler to avoid assumptions regarding the rules of signed\n+  integer overflow. These rules specify that signed integer overflow will\n+  result in a Constraint_Error exception at run time and are enforced in\n+  default mode by the compiler, so this switch should not be necessary in\n+  normal operating mode. It might be useful in conjunction with *-gnato0*\n+  for very peculiar cases of low-level programming.\n+\n+\n .. index:: -fstack-check  (gcc)\n \n :samp:`-fstack-check`\n@@ -1548,6 +1559,17 @@ Alphabetical List of All Switches\n   `Check_Float_Overflow` in GNAT RM.\n \n \n+.. index:: -gnateg  (gcc)\n+\n+:samp:`-gnateg`\n+:samp:`-gnatceg`\n+\n+  The `-gnatc` switch must always be specified before this switch, e.g.\n+  `-gnatceg`. Generate a C header from the Ada input file. See\n+  :ref:`Generating_C_Headers_for_Ada_Specifications` for more\n+  information.\n+\n+\n .. index:: -gnateG  (gcc)\n \n :samp:`-gnateG`"}, {"sha": "c34e4d926830c6e3e80ab8c1d7448b40e3881679", "filename": "gcc/ada/doc/gnat_ugn/gnat_and_program_execution.rst", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2544cbe4f2f0a497fec59491333283750fe45fb2/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_and_program_execution.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2544cbe4f2f0a497fec59491333283750fe45fb2/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_and_program_execution.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_and_program_execution.rst?ref=2544cbe4f2f0a497fec59491333283750fe45fb2", "patch": "@@ -2999,9 +2999,9 @@ exception raised because of the intermediate overflow (and we really\n would prefer this precondition to be considered True at run time).\n \n \n-.. _Overflow_Checking_Modes_in_GNAT:\n+.. _Management_of_Overflows_in_GNAT:\n \n-Overflow Checking Modes in GNAT\n+Management of Overflows in GNAT\n -------------------------------\n \n To deal with the portability issue, and with the problem of\n@@ -3202,7 +3202,7 @@ The default mode for overflow checks is\n       General => Strict\n \n which causes all computations both inside and outside assertions to use\n-the base type. In addition overflow checks are suppressed.\n+the base type.\n \n This retains compatibility with previous versions of\n GNAT which suppressed overflow checks by default and always\n@@ -3220,8 +3220,6 @@ is equivalent to\n \n which causes overflow checking of all intermediate overflows\n both inside and outside assertions against the base type.\n-This provides compatibility\n-with this switch as implemented in previous versions of GNAT.\n \n The pragma `Suppress (Overflow_Check)` disables overflow\n checking, but it has no effect on the method used for computing"}, {"sha": "87269d8b3153769534641a0b9f8c9ba1fe54647a", "filename": "gcc/ada/doc/gnat_ugn/gnat_project_manager.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2544cbe4f2f0a497fec59491333283750fe45fb2/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_project_manager.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2544cbe4f2f0a497fec59491333283750fe45fb2/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_project_manager.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_project_manager.rst?ref=2544cbe4f2f0a497fec59491333283750fe45fb2", "patch": "@@ -2390,7 +2390,7 @@ building. The syntax looks like\n         for External (\"BUILD\") use \"PRODUCTION\";\n \n         package Builder is\n-           for Switches (\"Ada\") use (\"-q\");\n+           for Global_Compilation_Switches (\"Ada\") use (\"-g\");\n         end Builder;\n      end Agg;\n "}, {"sha": "22e4950502b8b581f5e63bed34478aa8b13e177c", "filename": "gcc/ada/doc/gnat_ugn/the_gnat_compilation_model.rst", "status": "modified", "additions": 87, "deletions": 2, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2544cbe4f2f0a497fec59491333283750fe45fb2/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fthe_gnat_compilation_model.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2544cbe4f2f0a497fec59491333283750fe45fb2/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fthe_gnat_compilation_model.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fthe_gnat_compilation_model.rst?ref=2544cbe4f2f0a497fec59491333283750fe45fb2", "patch": "@@ -4439,7 +4439,7 @@ easier to interface with other languages than previous versions of Ada.\n \n .. _Running_the_binding_generator:\n \n-Running the binding generator\n+Running the Binding Generator\n ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n The binding generator is part of the *gcc* compiler and can be\n@@ -4534,7 +4534,7 @@ and then generate Ada bindings from this file:\n \n .. _Generating_bindings_for_C++_headers:\n \n-Generating bindings for C++ headers\n+Generating Bindings for C++ Headers\n ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n Generating bindings for C++ headers is done using the same options, always\n@@ -4662,6 +4662,91 @@ Switches\n :samp:`-C`\n   Extract comments from headers and generate Ada comments in the Ada spec files.\n \n+.. _Generating_C_Headers_for_Ada_Specifications:\n+\n+Generating C Headers for Ada Specifications\n+-------------------------------------------\n+\n+.. index:: Binding generation (for Ada specs)\n+.. index:: C headers (binding generation)\n+\n+GNAT includes a C header generator for Ada specifications which supports\n+Ada types that have a direct mapping to C types. This includes in particular\n+support for:\n+\n+* Scalar types\n+* Constrained arrays\n+* Records (untagged)\n+* Composition of the above types\n+* Constant declarations\n+* Object declarations\n+* Subprogram declarations\n+\n+Running the C Header Generator\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+The C header generator is part of the GNAT compiler and can be invoked via\n+the *-gnatceg* combination of switches, which will generate a :file:`.h`\n+file corresponding to the given input file (Ada spec or body). Note that\n+only spec files are processed in any case, so giving a spec or a body file\n+as input is equivalent. For example:\n+\n+.. code-block:: sh\n+\n+   $ gcc -c -gnatceg pack1.ads\n+\n+will generate a self-contained file called :file:`pack1.h` including\n+common definitions from the Ada Standard package, followed by the\n+definitions included in :file:`pack1.ads`, as well as all the other units\n+withed by this file.\n+\n+For instance, given the following Ada files:\n+\n+.. code-block:: ada\n+\n+   package Pack2 is\n+      type Int is range 1 .. 10;\n+   end Pack2;\n+\n+.. code-block:: ada\n+\n+   with Pack2;\n+\n+   package Pack1 is\n+      type Rec is record\n+         Field1, Field2 : Pack2.Int;\n+      end record;\n+\n+      Global : Rec := (1, 2);\n+\n+      procedure Proc1 (R : Rec);\n+      procedure Proc2 (R : in out Rec);\n+   end Pack1;\n+\n+The above `gcc` command will generate the following :file:`pack1.h` file:\n+\n+.. code-block:: c\n+\n+   /* Standard definitions skipped */\n+   #ifndef PACK2_ADS\n+   #define PACK2_ADS\n+   typedef short_short_integer pack2__TintB;\n+   typedef pack2__TintB pack2__int;\n+   #endif /* PACK2_ADS */\n+\n+   #ifndef PACK1_ADS\n+   #define PACK1_ADS\n+   typedef struct _pack1__rec {\n+     pack2__int field1;\n+     pack2__int field2;\n+   } pack1__rec;\n+   extern pack1__rec pack1__global;\n+   extern void pack1__proc1(const pack1__rec r);\n+   extern void pack1__proc2(pack1__rec *r);\n+   #endif /* PACK1_ADS */\n+\n+You can then `include` :file:`pack1.h` from a C source file and use the types,\n+call subprograms, reference objects, and constants.\n \n .. _GNAT_and_Other_Compilation_Models:\n "}]}