{"sha": "603f86d7dbb9d95953ef1a179a01729a3df3ef86", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjAzZjg2ZDdkYmI5ZDk1OTUzZWYxYTE3OWEwMTcyOWEzZGYzZWY4Ng==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2002-09-02T09:19:08Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2002-09-02T09:19:08Z"}, "message": "DatagramPacket.java, [...]: re-indented documentation.\n\n2002-09-02  Michael Koch  <konqueror@gmx.de>\n\n\t* java/net/DatagramPacket.java, java/net/MulticsstSocket.java:\n\tre-indented documentation.\n\nFrom-SVN: r56739", "tree": {"sha": "b372ca95431f19027c119abfea3784685d482730", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b372ca95431f19027c119abfea3784685d482730"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/603f86d7dbb9d95953ef1a179a01729a3df3ef86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/603f86d7dbb9d95953ef1a179a01729a3df3ef86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/603f86d7dbb9d95953ef1a179a01729a3df3ef86", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/603f86d7dbb9d95953ef1a179a01729a3df3ef86/comments", "author": null, "committer": null, "parents": [{"sha": "e53fbf8a3c9d616d97cf25582583f552af5ce492", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e53fbf8a3c9d616d97cf25582583f552af5ce492", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e53fbf8a3c9d616d97cf25582583f552af5ce492"}], "stats": {"total": 522, "additions": 263, "deletions": 259}, "files": [{"sha": "0fe3d270249bd60ee661c66bc7d39f1ed7f7c5e0", "filename": "libjava/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603f86d7dbb9d95953ef1a179a01729a3df3ef86/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603f86d7dbb9d95953ef1a179a01729a3df3ef86/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=603f86d7dbb9d95953ef1a179a01729a3df3ef86", "patch": "@@ -1,3 +1,8 @@\n+2002-09-02  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/net/DatagramPacket.java, java/net/MulticsstSocket.java:\n+\tre-indented documentation.\n+\n 2002-08-30  Jesse Rosenstock  <jmr@ugcs.caltech.edu>\n \n \t* java/util/Calendar.java (getTimeInMillis, getTimeInMillis): Now"}, {"sha": "52e3ff2b3772a0a26a5d9622255b01f2180f0623", "filename": "libjava/java/net/DatagramPacket.java", "status": "modified", "additions": 149, "deletions": 150, "changes": 299, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603f86d7dbb9d95953ef1a179a01729a3df3ef86/libjava%2Fjava%2Fnet%2FDatagramPacket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603f86d7dbb9d95953ef1a179a01729a3df3ef86/libjava%2Fjava%2Fnet%2FDatagramPacket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FDatagramPacket.java?ref=603f86d7dbb9d95953ef1a179a01729a3df3ef86", "patch": "@@ -44,67 +44,66 @@\n  */\n \n /**\n-  * This class models a packet of data that is to be sent across the network\n-  * using a connectionless protocol such as UDP.  It contains the data\n-  * to be send, as well as the destination address and port.  Note that\n-  * datagram packets can arrive in any order and are not guaranteed to be\n-  * delivered at all.\n-  * <p>\n-  * This class can also be used for receiving data from the network.\n-  * <p>\n-  * Note that for all method below where the buffer length passed by the\n-  * caller cannot exceed the actually length of the byte array passed as\n-  * the buffer, if this condition is not true, then the method silently\n-  * reduces the length value to maximum allowable value.\n-  *\n-  * Written using on-line Java Platform 1.2 API Specification, as well\n-  * as \"The Java Class Libraries\", 2nd edition (Addison-Wesley, 1998).\n-  * Status:  Believed complete and correct.\n-  *\n-  * @author Warren Levy <warrenl@cygnus.com>\n-  * @author Aarom M. Renn (arenn@urbanophile.com) (Documentation comments)\n-  * @date April 28, 1999.\n-  */\n-\n+ * This class models a packet of data that is to be sent across the network\n+ * using a connectionless protocol such as UDP.  It contains the data\n+ * to be send, as well as the destination address and port.  Note that\n+ * datagram packets can arrive in any order and are not guaranteed to be\n+ * delivered at all.\n+ * <p>\n+ * This class can also be used for receiving data from the network.\n+ * <p>\n+ * Note that for all method below where the buffer length passed by the\n+ * caller cannot exceed the actually length of the byte array passed as\n+ * the buffer, if this condition is not true, then the method silently\n+ * reduces the length value to maximum allowable value.\n+ *\n+ * Written using on-line Java Platform 1.2 API Specification, as well\n+ * as \"The Java Class Libraries\", 2nd edition (Addison-Wesley, 1998).\n+ * Status:  Believed complete and correct.\n+ *\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @author Aarom M. Renn (arenn@urbanophile.com) (Documentation comments)\n+ * @date April 28, 1999.\n+ */\n public final class DatagramPacket\n {\n-/**\n-  * The data buffer to send\n-  */\n+  /**\n+   * The data buffer to send\n+   */\n   private byte[] buffer;\n \n-/**\n-  * This is the offset into the buffer to start sending from or receiving to.\n-  */\n+  /**\n+   * This is the offset into the buffer to start sending from or receiving to.\n+   */\n   private int offset;\n \n-/**\n-  * The length of the data buffer to send\n-  */\n+  /**\n+   * The length of the data buffer to send\n+   */\n   private int length;\n \n-/**\n-  * The address to which the packet should be sent or from which it\n-  * was received\n-  */\n+  /**\n+   * The address to which the packet should be sent or from which it\n+   * was received\n+   */\n   private InetAddress address;\n \n-/**\n-  * The port to which the packet should be sent or from which it was\n-  * was received.\n-  */\n+  /**\n+   * The port to which the packet should be sent or from which it was\n+   * was received.\n+   */\n   private int port;\n \n-/**\n-  * This method initializes a new instance of <code>DatagramPacket</code>\n-  * which has the specified buffer, offset, and length.\n-  *\n-  * @param buf The buffer for holding the incoming datagram.\n-  * @param offset The offset into the buffer to start writing.\n-  * @param length The maximum number of bytes to read.\n-  *\n-  * @since 1.2\n-  */\n+  /**\n+   * This method initializes a new instance of <code>DatagramPacket</code>\n+   * which has the specified buffer, offset, and length.\n+   *\n+   * @param buf The buffer for holding the incoming datagram.\n+   * @param offset The offset into the buffer to start writing.\n+   * @param length The maximum number of bytes to read.\n+   *\n+   * @since 1.2\n+   */\n   public DatagramPacket(byte[] buf, int offset, int length)\n   {\n     if (buf == null)\n@@ -124,30 +123,30 @@ public DatagramPacket(byte[] buf, int offset, int length)\n     this.port = -1;\n   }\n \n-/**\n-  * Initializes a new instance of <code>DatagramPacket</code> for\n-  * receiving packets from the network.\n-  *\n-  * @param buf A buffer for storing the returned packet data\n-  * @param length The length of the buffer (must be <= buf.length)\n-  */\n+  /**\n+   * Initializes a new instance of <code>DatagramPacket</code> for\n+   * receiving packets from the network.\n+   *\n+   * @param buf A buffer for storing the returned packet data\n+   * @param length The length of the buffer (must be <= buf.length)\n+   */\n   public DatagramPacket(byte[] buf, int length)\n   {\n     this(buf, 0, length);\n   }\n \n-/**\n-  * Initializes a new instance of <code>DatagramPacket</code> for\n-  * transmitting packets across the network.\n-  *\n-  * @param buf A buffer containing the data to send\n-  * @param offset The offset into the buffer to start writing from.\n-  * @param len The length of the buffer (must be <= buf.length)\n-  * @param addr The address to send to\n-  * @param port The port to send to\n-  *\n-  * @since 1.2\n-  */\n+  /**\n+   * Initializes a new instance of <code>DatagramPacket</code> for\n+   * transmitting packets across the network.\n+   *\n+   * @param buf A buffer containing the data to send\n+   * @param offset The offset into the buffer to start writing from.\n+   * @param len The length of the buffer (must be <= buf.length)\n+   * @param addr The address to send to\n+   * @param port The port to send to\n+   *\n+   * @since 1.2\n+   */\n   public DatagramPacket(byte[] buf, int offset, int length,\n \tInetAddress address, int port)\n   {\n@@ -172,15 +171,15 @@ public DatagramPacket(byte[] buf, int offset, int length,\n     this.port = port;\n   }\n \n-/**\n-  * Initializes a new instance of <code>DatagramPacket</code> for\n-  * transmitting packets across the network.\n-  *\n-  * @param buf A buffer containing the data to send\n-  * @param length The length of the buffer (must be <= buf.length)\n-  * @param address The address to send to\n-  * @param port The port to send to\n-  */\n+  /**\n+   * Initializes a new instance of <code>DatagramPacket</code> for\n+   * transmitting packets across the network.\n+   *\n+   * @param buf A buffer containing the data to send\n+   * @param length The length of the buffer (must be <= buf.length)\n+   * @param address The address to send to\n+   * @param port The port to send to\n+   */\n   public DatagramPacket(byte[] buf, int length, InetAddress address, int port)\n   {\n     this(buf, 0, length, address, port);\n@@ -225,74 +224,74 @@ public DatagramPacket(byte[] buf, int length, SocketAddress address)\n          ((InetSocketAddress)address).getPort());\n   }\n \n-/**\n-  * Returns the address that this packet is being sent to or, if it was used\n-  * to receive a packet, the address that is was received from.  If the\n-  * constructor that doesn not take an address was used to create this object\n-  * and no packet was actually read into this object, then this method\n-  * returns <code>null</code>.\n-  *\n-  * @return The address for this packet.\n-  */\n+  /**\n+   * Returns the address that this packet is being sent to or, if it was used\n+   * to receive a packet, the address that is was received from.  If the\n+   * constructor that doesn not take an address was used to create this object\n+   * and no packet was actually read into this object, then this method\n+   * returns <code>null</code>.\n+   *\n+   * @return The address for this packet.\n+   */\n   public synchronized InetAddress getAddress()\n   {\n     return address;\n   }\n \n-/**\n-  * Returns the port number this packet is being sent to or, if it was used\n-  * to receive a packet, the port that it was received from. If the\n-  * constructor that doesn not take an address was used to create this object\n-  * and no packet was actually read into this object, then this method\n-  * will return 0.\n-  *\n-  * @return The port number for this packet\n-  */\n+  /**\n+   * Returns the port number this packet is being sent to or, if it was used\n+   * to receive a packet, the port that it was received from. If the\n+   * constructor that doesn not take an address was used to create this object\n+   * and no packet was actually read into this object, then this method\n+   * will return 0.\n+   *\n+   * @return The port number for this packet\n+   */\n   public synchronized int getPort()\n   {\n     return port;\n   }\n \n-/**\n-  * Returns the data buffer for this packet\n-  *\n-  * @return This packet's data buffer\n-  */\n+  /**\n+   * Returns the data buffer for this packet\n+   *\n+   * @return This packet's data buffer\n+   */\n   public synchronized byte[] getData()\n   {\n     return buffer;\n   }\n \n-/**\n-  * This method returns the current offset value into the data buffer\n-  * where data will be sent from.\n-  *\n-  * @return The buffer offset.\n-  *\n-  * @since 1.2\n-  */\n+  /**\n+   * This method returns the current offset value into the data buffer\n+   * where data will be sent from.\n+   *\n+   * @return The buffer offset.\n+   *\n+   * @since 1.2\n+   */\n   public synchronized int getOffset()\n   {\n     return offset;\n   }\n \n-/**\n-  * Returns the length of the data in the buffer\n-  *\n-  * @return The length of the data\n-  */\n+  /**\n+   * Returns the length of the data in the buffer\n+   *\n+   * @return The length of the data\n+   */\n   public synchronized int getLength()\n   {\n     return length;\n   }\n \n-/**\n-  * This sets the address to which the data packet will be transmitted.\n-  *\n-  * @param addr The destination address\n-  *\n-  * @since 1.1\n-  */\n+  /**\n+   * This sets the address to which the data packet will be transmitted.\n+   *\n+   * @param addr The destination address\n+   *\n+   * @since 1.1\n+   */\n   public synchronized void setAddress(InetAddress iaddr)\n   {\n     if (iaddr == null)\n@@ -301,13 +300,13 @@ public synchronized void setAddress(InetAddress iaddr)\n     address = iaddr;\n   }\n \n-/**\n-  * This sets the port to which the data packet will be transmitted.\n-  *\n-  * @param port The destination port\n-  *\n-  * @since 1.1\n-  */\n+  /**\n+   * This sets the port to which the data packet will be transmitted.\n+   *\n+   * @param port The destination port\n+   *\n+   * @since 1.1\n+   */\n   public synchronized void setPort(int iport)\n   {\n     if (iport < 0 || iport > 65535)\n@@ -348,13 +347,13 @@ public SocketAddress getSocketAddress()\n     return new InetSocketAddress (address, port);\n   }\n \n-/**\n-  * Sets the data buffer for this packet.\n-  *\n-  * @param buf The new buffer for this packet\n-  *\n-  * @since 1.1\n-  */\n+  /**\n+   * Sets the data buffer for this packet.\n+   *\n+   * @param buf The new buffer for this packet\n+   *\n+   * @since 1.1\n+   */\n   public synchronized void setData(byte[] buf)\n   {\n     // This form of setData requires setLength to be called separately\n@@ -365,15 +364,15 @@ public synchronized void setData(byte[] buf)\n     buffer = buf;\n   }\n \n-/**\n-  * This method sets the data buffer for the packet.\n-  *\n-  * @param buf The byte array containing the data for this packet.\n-  * @param offset The offset into the buffer to start reading data from.\n-  * @param length The number of bytes of data in the buffer.\n-  *\n-  * @since 1.2\n-  */\n+  /**\n+   * This method sets the data buffer for the packet.\n+   *\n+   * @param buf The byte array containing the data for this packet.\n+   * @param offset The offset into the buffer to start reading data from.\n+   * @param length The number of bytes of data in the buffer.\n+   *\n+   * @since 1.2\n+   */\n   public synchronized void setData(byte[] buf, int offset, int length)\n   {\n     // This form of setData must be used if offset is to be changed.\n@@ -393,13 +392,13 @@ public synchronized void setData(byte[] buf, int offset, int length)\n     this.length = length;\n   }\n \n-/**\n-  * Sets the length of the data in the buffer. \n-  *\n-  * @param length The new length.  (Where len <= buf.length)\n-  *\n-  * @since 1.1\n-  */\n+  /**\n+   * Sets the length of the data in the buffer. \n+   *\n+   * @param length The new length.  (Where len <= buf.length)\n+   *\n+   * @since 1.1\n+   */\n   public synchronized void setLength(int length)\n   {\n     if (length < 0)"}, {"sha": "54ed5c1d9e32cf793bd79231c2764c78c2236ee1", "filename": "libjava/java/net/MulticastSocket.java", "status": "modified", "additions": 109, "deletions": 109, "changes": 218, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603f86d7dbb9d95953ef1a179a01729a3df3ef86/libjava%2Fjava%2Fnet%2FMulticastSocket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603f86d7dbb9d95953ef1a179a01729a3df3ef86/libjava%2Fjava%2Fnet%2FMulticastSocket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FMulticastSocket.java?ref=603f86d7dbb9d95953ef1a179a01729a3df3ef86", "patch": "@@ -39,82 +39,82 @@\n \n import java.io.IOException;\n \n-/*\n+/**\n  * Written using on-line Java Platform 1.2 API Specification, as well\n  * as \"The Java Class Libraries\", 2nd edition (Addison-Wesley, 1998).\n  * Status:  Believed complete and correct.\n  */\n \n /**\n-  * This class models a multicast UDP socket.  A multicast address is a\n-  * class D internet address (one whose most significant bits are 1110).  \n-  * A multicast group consists of a multicast address and a well known\n-  * port number.  All members of the group listening on that address and\n-  * port will receive all the broadcasts to the group.\n-  * <p>\n-  * Please note that applets are not allowed to use multicast sockets \n-  * \n-  * Written using on-line Java Platform 1.2 API Specification, as well\n-  * as \"The Java Class Libraries\", 2nd edition (Addison-Wesley, 1998).\n-  * Status:  Believed complete and correct.\n-  *\n-  * @author Warren Levy <warrenl@cygnus.com>\n-  * @author Aaron M. Renn (arenn@urbanophile.com) (Documentation comments)\n-  * @since 1.1\n-  * @date May 18, 1999.\n-  */\n+ * This class models a multicast UDP socket.  A multicast address is a\n+ * class D internet address (one whose most significant bits are 1110).  \n+ * A multicast group consists of a multicast address and a well known\n+ * port number.  All members of the group listening on that address and\n+ * port will receive all the broadcasts to the group.\n+ * <p>\n+ * Please note that applets are not allowed to use multicast sockets \n+ * \n+ * Written using on-line Java Platform 1.2 API Specification, as well\n+ * as \"The Java Class Libraries\", 2nd edition (Addison-Wesley, 1998).\n+ * Status:  Believed complete and correct.\n+ *\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ * @author Aaron M. Renn (arenn@urbanophile.com) (Documentation comments)\n+ * @since 1.1\n+ * @date May 18, 1999.\n+ */\n public class MulticastSocket extends DatagramSocket\n {\n   // FIXME: the local addr bound to the multicast socket can be reused;\n   // unlike unicast sockets.  It binds to any available network interface.\n   // See p.1159 JCL book.\n \n-/**\n-  * Create a MulticastSocket that this not bound to any address\n-  *\n-  * @exception IOException If an error occurs\n-  */\n+  /**\n+   * Create a MulticastSocket that this not bound to any address\n+   *\n+   * @exception IOException If an error occurs\n+   */\n   public MulticastSocket() throws IOException\n   {\n     super(0, null);\n   }\n \n-/**\n-  * Create a multicast socket bound to the specified port\n-  *\n-  * @param The port to bind to\n-  *\n-  * @exception IOException If an error occurs\n-  */\n+  /**\n+   * Create a multicast socket bound to the specified port\n+   *\n+   * @param port The port to bind to\n+   *\n+   * @exception IOException If an error occurs\n+   */\n   public MulticastSocket(int port) throws IOException\n   {\n     super(port, null);\n   }\n \n-/**\n-  * Returns the interface being used for multicast packets\n-  * \n-  * @return The multicast interface\n-  *\n-  * @exception SocketException If an error occurs\n-  */\n+  /**\n+   * Returns the interface being used for multicast packets\n+   * \n+   * @return The multicast interface\n+   *\n+   * @exception SocketException If an error occurs\n+   */\n   public InetAddress getInterface() throws SocketException\n   {\n     // FIXME: Is it possible that an InetAddress wasn't returned from getOption?\n     return (InetAddress) impl.getOption(SocketOptions.IP_MULTICAST_IF);\n   }\n \n-/**\n-  * Returns the current value of the \"Time to Live\" option.  This is the\n-  * number of hops a packet can make before it \"expires\".   This method id\n-  * deprecated.  Use <code>getTimeToLive</code> instead.\n-  * \n-  * @return The TTL value\n-  *\n-  * @exception IOException If an error occurs\n-  *\n-  * @deprecated Replaced by getTimeToLive() in Java 1.2\n-  */\n+  /**\n+   * Returns the current value of the \"Time to Live\" option.  This is the\n+   * number of hops a packet can make before it \"expires\".   This method id\n+   * deprecated.  Use <code>getTimeToLive</code> instead.\n+   * \n+   * @return The TTL value\n+   *\n+   * @exception IOException If an error occurs\n+   *\n+   * @deprecated 1.2 Replaced by getTimeToLive()\n+   */\n   public byte getTTL() throws IOException\n   {\n     // Use getTTL here rather than getTimeToLive in case we're using an impl\n@@ -123,43 +123,43 @@ public byte getTTL() throws IOException\n     return impl.getTTL();\n   }\n \n-/**\n-  * Returns the current value of the \"Time to Live\" option.  This is the\n-  * number of hops a packet can make before it \"expires\". \n-  * \n-  * @return The TTL value\n-  *\n-  * @exception IOException If an error occurs\n-  *\n-  * @since Java 1.2\n-  */\n+  /**\n+   * Returns the current value of the \"Time to Live\" option.  This is the\n+   * number of hops a packet can make before it \"expires\". \n+   * \n+   * @return The TTL value\n+   *\n+   * @exception IOException If an error occurs\n+   *\n+   * @since 1.2\n+   */\n   public int getTimeToLive() throws IOException\n   {\n     return impl.getTimeToLive();\n   }\n \n-/**\n-  * Sets the interface to use for multicast packets.\n-  *\n-  * @param addr The new interface to use\n-  *\n-  * @exception SocketException If an error occurs\n-  */\n+   /**\n+    * Sets the interface to use for sending multicast packets.\n+    *\n+    * @param inf The new interface to use\n+    *\n+    * @exception SocketException If an error occurs\n+    */\n   public void setInterface(InetAddress inf) throws SocketException\n   {\n     impl.setOption(SocketOptions.IP_MULTICAST_IF, inf);\n   }\n \n-/**\n-  * Sets the \"Time to Live\" value for a socket.  The value must be between\n-  * 1 and 255.\n-  *\n-  * @param ttl The new TTL value\n-  *\n-  * @exception IOException If an error occurs\n-  *\n-  * @deprecated Replaced by <code>setTimeToLive</code> in Java 1.2\n-  */\n+  /**\n+   * Sets the \"Time to Live\" value for a socket.  The value must be between\n+   * 1 and 255.\n+   *\n+   * @param ttl The new TTL value\n+   *\n+   * @exception IOException If an error occurs\n+   *\n+   * @deprecated 1.2 Replaced by <code>setTimeToLive</code>\n+   */\n   public void setTTL(byte ttl) throws IOException\n   {\n     // Use setTTL here rather than setTimeToLive in case we're using an impl\n@@ -168,16 +168,16 @@ public void setTTL(byte ttl) throws IOException\n     impl.setTTL(ttl);\n   }\n \n-/**\n-  * Sets the \"Time to Live\" value for a socket.  The value must be between\n-  * 1 and 255.  \n-  *\n-  * @param ttl The new TTL value\n-  *\n-  * @exception IOException If an error occurs\n-  * \n-  * @since Java 1.2\n-  */\n+  /**\n+   * Sets the \"Time to Live\" value for a socket.  The value must be between\n+   * 1 and 255.  \n+   *\n+   * @param ttl The new TTL value\n+   *\n+   * @exception IOException If an error occurs\n+   * \n+   * @since 1.2\n+   */\n   public void setTimeToLive(int ttl) throws IOException\n   {\n     if (ttl <= 0 || ttl > 255)\n@@ -186,13 +186,13 @@ public void setTimeToLive(int ttl) throws IOException\n     impl.setTimeToLive(ttl);\n   }\n \n-/**\n-  * Joins the specified mulitcast group.\n-  *\n-  * @param addr The address of the group to join\n-  * \n-  * @exception IOException If an error occurs\n-  */\n+  /**\n+   * Joins the specified mulitcast group.\n+   *\n+   * @param addr The address of the group to join\n+   * \n+   * @exception IOException If an error occurs\n+   */\n   public void joinGroup(InetAddress mcastaddr) throws IOException\n   {\n     if (! mcastaddr.isMulticastAddress())\n@@ -205,13 +205,13 @@ public void joinGroup(InetAddress mcastaddr) throws IOException\n     impl.join(mcastaddr);\n   }\n \n-/**\n-  * Leaves the specified multicast group\n-  *\n-  * @param addr The address of the group to leave\n-  *\n-  * @exception IOException If an error occurs\n-  */\n+  /**\n+   * Leaves the specified multicast group\n+   *\n+   * @param addr The address of the group to leave\n+   *\n+   * @exception IOException If an error occurs\n+   */\n   public void leaveGroup(InetAddress mcastaddr) throws IOException\n   {\n     if (! mcastaddr.isMulticastAddress())\n@@ -224,16 +224,16 @@ public void leaveGroup(InetAddress mcastaddr) throws IOException\n     impl.leave(mcastaddr);\n   }\n \n-/**\n-  * Sends a packet of data to a multicast address with a TTL that is\n-  * different from the default TTL on this socket.  The default TTL for\n-  * the socket is not changed.\n-  *\n-  * @param packet The packet of data to send\n-  * @param ttl The TTL for this packet\n-  *\n-  * @exception IOException If an error occurs\n-  */\n+  /**\n+   * Sends a packet of data to a multicast address with a TTL that is\n+   * different from the default TTL on this socket.  The default TTL for\n+   * the socket is not changed.\n+   *\n+   * @param packet The packet of data to send\n+   * @param ttl The TTL for this packet\n+   *\n+   * @exception IOException If an error occurs\n+   */\n   public synchronized void send(DatagramPacket p, byte ttl) throws IOException\n   {\n     SecurityManager s = System.getSecurityManager();"}]}