{"sha": "e73d6fe8285466b1eb8c6cd58277400c394d6dd6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTczZDZmZTgyODU0NjZiMWViOGM2Y2Q1ODI3NzQwMGMzOTRkNmRkNg==", "commit": {"author": {"name": "Edward Smith-Rowland", "email": "3dw4rd@verizon.net", "date": "2008-10-17T08:08:03Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-10-17T08:08:03Z"}, "message": "forward_list.h: Factor list construction to dispatch routines.\n\n2008-10-16  Edward Smith-Rowland  <3dw4rd@verizon.net>\n\n\t* include/bits/forward_list.h: Factor list construction to dispatch\n\troutines.\n\t* include/bits/forward_list.tcc: Likewise.\n\t* testsuite/23_containers/forward_list/modifiers/2.cc:\n\nFrom-SVN: r141189", "tree": {"sha": "f52401c551256734246be7b45c97348af866d35f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f52401c551256734246be7b45c97348af866d35f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e73d6fe8285466b1eb8c6cd58277400c394d6dd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e73d6fe8285466b1eb8c6cd58277400c394d6dd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e73d6fe8285466b1eb8c6cd58277400c394d6dd6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e73d6fe8285466b1eb8c6cd58277400c394d6dd6/comments", "author": {"login": "emsr", "id": 1936479, "node_id": "MDQ6VXNlcjE5MzY0Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1936479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emsr", "html_url": "https://github.com/emsr", "followers_url": "https://api.github.com/users/emsr/followers", "following_url": "https://api.github.com/users/emsr/following{/other_user}", "gists_url": "https://api.github.com/users/emsr/gists{/gist_id}", "starred_url": "https://api.github.com/users/emsr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emsr/subscriptions", "organizations_url": "https://api.github.com/users/emsr/orgs", "repos_url": "https://api.github.com/users/emsr/repos", "events_url": "https://api.github.com/users/emsr/events{/privacy}", "received_events_url": "https://api.github.com/users/emsr/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c0cccb86ffaf64715bb1bf152528c2f082baeaec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0cccb86ffaf64715bb1bf152528c2f082baeaec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0cccb86ffaf64715bb1bf152528c2f082baeaec"}], "stats": {"total": 213, "additions": 75, "deletions": 138}, "files": [{"sha": "1364419d2996846ff42bef8238cb47ea1b2f4e7f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e73d6fe8285466b1eb8c6cd58277400c394d6dd6/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e73d6fe8285466b1eb8c6cd58277400c394d6dd6/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e73d6fe8285466b1eb8c6cd58277400c394d6dd6", "patch": "@@ -1,3 +1,10 @@\n+2008-10-16  Edward Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\t* include/bits/forward_list.h: Factor list construction to dispatch\n+\troutines.\n+\t* include/bits/forward_list.tcc: Likewise.\n+\t* testsuite/23_containers/forward_list/modifiers/2.cc: \n+\n 2008-10-16  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/bits/forward_list.tcc (operator==): Use auto."}, {"sha": "cce8f3d7cc52ed2349c6a4cf8889fb877897b8d3", "filename": "libstdc++-v3/include/bits/forward_list.h", "status": "modified", "additions": 54, "deletions": 9, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e73d6fe8285466b1eb8c6cd58277400c394d6dd6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e73d6fe8285466b1eb8c6cd58277400c394d6dd6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h?ref=e73d6fe8285466b1eb8c6cd58277400c394d6dd6", "patch": "@@ -469,7 +469,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  the default value.\n        */\n       explicit\n-      forward_list(size_type __n);\n+      forward_list(size_type __n)\n+      : _Base(_Alloc())\n+      { _M_fill_initialize(__n, value_type()); }\n \n       /**\n        *  @brief  Creates a %forward_list with copies of an exemplar element.\n@@ -481,7 +483,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  value.\n        */\n       forward_list(size_type __n, const _Tp& __value,\n-                   const _Alloc& __al = _Alloc());\n+                   const _Alloc& __al = _Alloc())\n+      : _Base(__al)\n+      { _M_fill_initialize(__n, __value); }\n \n       /**\n        *  @brief  Builds a %forward_list from a range.\n@@ -495,7 +499,13 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        */\n       template<typename _InputIterator>\n         forward_list(_InputIterator __first, _InputIterator __last,\n-\t\t     const _Alloc& __al = _Alloc());\n+                     const _Alloc& __al = _Alloc())\n+        : _Base(__al)\n+        {\n+          // Check whether it's an integral type.  If so, it's not an iterator.\n+          typedef typename std::__is_integer<_InputIterator>::__type _Integral;\n+          _M_initialize_dispatch(__first, __last, _Integral());\n+        }\n \n       /**\n        *  @brief  The %forward_list copy constructor.\n@@ -505,7 +515,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  The newly-created %forward_list uses a copy of the allocation\n        *  object used by @a list.\n        */\n-      forward_list(const forward_list& __list);\n+      forward_list(const forward_list& __list)\n+      : _Base(__list.get_allocator())\n+      { _M_initialize_dispatch(__list.begin(), __list.end(),\n+                               __false_type()); }\n \n       /**\n        *  @brief  The %forward_list move constructor.\n@@ -528,7 +541,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  in the initializer_list @a il.  This is linear in il.size().\n        */\n       forward_list(std::initializer_list<_Tp> __il,\n-                   const _Alloc& __al = _Alloc());\n+                   const _Alloc& __al = _Alloc())\n+      : _Base(__al)\n+      { _M_initialize_dispatch(__il.begin(), __il.end(), __false_type()); }\n \n       /**\n        *  @brief  The forward_list dtor.\n@@ -871,7 +886,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  does not invalidate iterators and references.\n        */\n       void\n-      insert_after(const_iterator __pos, size_type __n, const _Tp& __val);\n+      insert_after(const_iterator __pos, size_type __n, const _Tp& __val)\n+      {\n+        forward_list<_Tp, _Alloc> __tmp(__n, __val, this->get_allocator());\n+        this->splice_after(__pos, std::move(__tmp));\n+      }\n \n       /**\n        *  @brief  Inserts a range into the %forward_list.\n@@ -889,7 +908,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       template<typename _InputIterator>\n         void\n         insert_after(const_iterator __pos,\n-                     _InputIterator __first, _InputIterator __last);\n+                     _InputIterator __first, _InputIterator __last)\n+        {\n+          forward_list<_Tp, _Alloc> __tmp(__first, __last, this->get_allocator());\n+          this->splice_after(__pos, std::move(__tmp));\n+        }\n \n       /**\n        *  @brief  Inserts the contents of an initializer_list into\n@@ -905,7 +928,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  does not invalidate iterators and references.\n        */\n       void\n-      insert_after(const_iterator __pos, std::initializer_list<_Tp> __il);\n+      insert_after(const_iterator __pos, std::initializer_list<_Tp> __il)\n+      {\n+        forward_list<_Tp, _Alloc> __tmp(__il, this->get_allocator());\n+        this->splice_after(__pos, std::move(__tmp));\n+      }\n \n       /**\n        *  @brief  Removes the element pointed to by the iterator following\n@@ -1106,7 +1133,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  the pointer is the user's responsibility.\n        */\n       void\n-      unique();\n+      unique()\n+      { this->unique(std::equal_to<_Tp>()); }\n \n       /**\n        *  @brief  Remove consecutive elements satisfying a predicate.\n@@ -1186,6 +1214,23 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        */\n       void\n       reverse();\n+\n+    private:\n+      template<typename _Integer>\n+\tvoid\n+\t_M_initialize_dispatch(_Integer __n, _Integer __x, __true_type)\n+\t{ _M_fill_initialize(static_cast<size_type>(__n), __x); }\n+\n+      // Called by the range constructor to implement [23.1.1]/9\n+      template<typename _InputIterator>\n+\tvoid\n+\t_M_initialize_dispatch(_InputIterator __first, _InputIterator __last,\n+\t\t\t       __false_type);\n+\n+      // Called by forward_list(n,v,a), and the range constructor when it turns out\n+      // to be the same thing.\n+      void\n+      _M_fill_initialize(size_type __n, const value_type& __value);\n     };\n \n   /**"}, {"sha": "f222f703aac969b9a4e82e011bc0b20065eb5e49", "filename": "libstdc++-v3/include/bits/forward_list.tcc", "status": "modified", "additions": 13, "deletions": 128, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e73d6fe8285466b1eb8c6cd58277400c394d6dd6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e73d6fe8285466b1eb8c6cd58277400c394d6dd6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc?ref=e73d6fe8285466b1eb8c6cd58277400c394d6dd6", "patch": "@@ -206,38 +206,13 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       return __pos;\n     }\n   \n-  template<typename _Tp, typename _Alloc>\n-    forward_list<_Tp, _Alloc>::\n-    forward_list(size_type __n)\n-    : _Base()\n-    {\n-      _Fwd_list_node_base* __to = &this->_M_impl._M_head;\n-      for (size_type __i = 0; __i < __n; ++__i)\n-\t{\n-\t  __to->_M_next = this->_M_create_node(_Tp());\n-\t  __to = __to->_M_next;\n-\t}\n-    }\n-\n-  template<typename _Tp, typename _Alloc>\n-    forward_list<_Tp, _Alloc>::\n-    forward_list(size_type __n, const _Tp& __value, const _Alloc& __al)\n-    : _Base(__al)\n-    {\n-      _Fwd_list_node_base* __to = &this->_M_impl._M_head;\n-      for (size_type __i = 0; __i < __n; ++__i)\n-\t{\n-\t  __to->_M_next = this->_M_create_node(__value);\n-\t  __to = __to->_M_next;\n-\t}\n-    }\n-\n+  // Called by the range constructor to implement [23.1.1]/9\n   template<typename _Tp, typename _Alloc>\n     template<typename _InputIterator>\n+      void\n       forward_list<_Tp, _Alloc>::\n-      forward_list(_InputIterator __first, _InputIterator __last,\n-                   const _Alloc& __al)\n-      : _Base(__al)\n+      _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,\n+                             __false_type)\n       {\n         _Fwd_list_node_base* __to = &this->_M_impl._M_head;\n         _InputIterator __curr = __first;\n@@ -249,34 +224,19 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n           }\n       }\n \n+  // Called by forward_list(n,v,a), and the range constructor\n+  // when it turns out to be the same thing.\n   template<typename _Tp, typename _Alloc>\n+    void\n     forward_list<_Tp, _Alloc>::\n-    forward_list(const forward_list& __list)\n-    : _Base(__list._M_get_Node_allocator())\n-    {\n-      const _Fwd_list_node_base* __from = &__list._M_impl._M_head;\n-      _Fwd_list_node_base* __to = &this->_M_impl._M_head;\n-      while (__from->_M_next != 0)\n-\t{\n-\t  const _Node* __temp = static_cast<_Node*>(__from->_M_next);\n-\t  __to->_M_next = this->_M_create_node(__temp->_M_value);\n-\t  __from = __from->_M_next;\n-\t  __to = __to->_M_next;\n-\t}\n-    }\n-\n-  template<typename _Tp, typename _Alloc>\n-    forward_list<_Tp, _Alloc>::\n-    forward_list(std::initializer_list<_Tp> __il, const _Alloc& __al)\n-    : _Base(__al)\n+    _M_fill_initialize(size_type __n, const value_type& __value)\n     {\n       _Fwd_list_node_base* __to = &this->_M_impl._M_head;\n-      for (const _Tp* __item = __il.begin();\n-\t   __item != __il.end(); ++__item)\n-\t{\n-\t  __to->_M_next = this->_M_create_node(*__item);\n-\t  __to = __to->_M_next;\n-\t}\n+      for (; __n > 0; --__n)\n+        {\n+          __to->_M_next = this->_M_create_node(__value);\n+          __to = __to->_M_next;\n+        }\n     }\n \n   template<typename _Tp, typename _Alloc>\n@@ -306,61 +266,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       return *this;\n     }\n \n-  template<typename _Tp, typename _Alloc>\n-    void\n-    forward_list<_Tp, _Alloc>::\n-    insert_after(const_iterator __pos,\n-\t\t size_type __n, const _Tp& __val)\n-    {\n-      _Fwd_list_node_base* __to\n-\t= const_cast<_Fwd_list_node_base*>(__pos._M_node);\n-      _Fwd_list_node_base* __keep = __to->_M_next;\n-      for (size_type __i = 0; __i < __n; ++__i)\n-\t{\n-\t  __to->_M_next = this->_M_create_node(__val);\n-\t  __to = __to->_M_next;\n-\t}\n-      __to->_M_next = __keep;\n-    }\n-\n-  template<typename _Tp, typename _Alloc>\n-    template<typename _InputIterator>\n-      void\n-      forward_list<_Tp, _Alloc>::\n-      insert_after(const_iterator __pos,\n-\t\t   _InputIterator __first, _InputIterator __last)\n-      {\n-\t_Fwd_list_node_base* __to\n-\t  = const_cast<_Fwd_list_node_base*>(__pos._M_node);\n-\t_Fwd_list_node_base* __keep = __to->_M_next;\n-\t_InputIterator __curr = __first;\n-\twhile (__curr != __last)\n-\t  {\n-\t    __to->_M_next = this->_M_create_node(*__curr);\n-\t    __to = __to->_M_next;\n-\t    ++__curr;\n-\t  }\n-\t__to->_M_next = __keep;\n-      }\n-\n-  template<typename _Tp, typename _Alloc>\n-    void\n-    forward_list<_Tp, _Alloc>::\n-    insert_after(const_iterator __pos, std::initializer_list<_Tp> __il)\n-    {\n-      _Fwd_list_node_base* __to\n-\t= const_cast<_Fwd_list_node_base*>(__pos._M_node);\n-      _Fwd_list_node_base* __keep = __to->_M_next;\n-      const _Tp* __item = __il.begin();\n-      while (__item != __il.end())\n-\t{\n-\t  __to->_M_next = this->_M_create_node(*__item);\n-\t  __to = __to->_M_next;\n-\t  ++__item;\n-\t}\n-      __to->_M_next = __keep;\n-    }\n-\n   template<typename _Tp, typename _Alloc>\n     void\n     forward_list<_Tp, _Alloc>::\n@@ -440,26 +345,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  }\n       }\n \n-  template<typename _Tp, typename _Alloc>\n-    void\n-    forward_list<_Tp, _Alloc>::\n-    unique()\n-    {\n-      iterator __first = begin();\n-      iterator __last = end();\n-      if (__first == __last)\n-\treturn;\n-      iterator __next = __first;\n-      while (++__next != __last)\n-\t{\n-\t  if (*__first == *__next)\n-\t    erase_after(__first);\n-\t  else\n-\t    __first = __next;\n-\t  __next = __first;\n-\t}\n-    }\n-\n   template<typename _Tp, typename _Alloc>\n     template<typename _BinPred>\n       void"}, {"sha": "a6283580586dd579934ab20123e970aea03bda9c", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/modifiers/2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e73d6fe8285466b1eb8c6cd58277400c394d6dd6/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fmodifiers%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e73d6fe8285466b1eb8c6cd58277400c394d6dd6/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fmodifiers%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fmodifiers%2F2.cc?ref=e73d6fe8285466b1eb8c6cd58277400c394d6dd6", "patch": "@@ -51,7 +51,7 @@ test02()\n \n   // Note: Calling l.insert_after(pos, 5, 42); without the long five\n   // gets resolved to the iterator range version and fails to compile!\n-  fl.insert_after(pos, 5L, 42);\n+  fl.insert_after(pos, 5, 42);\n   VERIFY(*pos == 1);\n \n   ++pos;"}]}