{"sha": "2895a2a8967047222a9929112b8bb71323f28529", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjg5NWEyYTg5NjcwNDcyMjJhOTkyOTExMmI4YmI3MTMyM2YyODUyOQ==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2012-12-02T00:06:30Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2012-12-02T00:06:30Z"}, "message": "reorg.c: Remove an obsolete comment.\n\n\n\t* reorg.c: Remove an obsolete comment.\n\t* config/pa/pa.md: Add back the HP-PA comment here, with details.\n\nFrom-SVN: r194039", "tree": {"sha": "f90c19b83c9a8d920178e414a27dc82ce6756fac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f90c19b83c9a8d920178e414a27dc82ce6756fac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2895a2a8967047222a9929112b8bb71323f28529", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2895a2a8967047222a9929112b8bb71323f28529", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2895a2a8967047222a9929112b8bb71323f28529", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2895a2a8967047222a9929112b8bb71323f28529/comments", "author": null, "committer": null, "parents": [{"sha": "d1b1402fc3b65efa756f746c8d20a56d99534be7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1b1402fc3b65efa756f746c8d20a56d99534be7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1b1402fc3b65efa756f746c8d20a56d99534be7"}], "stats": {"total": 67, "additions": 53, "deletions": 14}, "files": [{"sha": "08b99b7dfae07c6c94499a8b8087186c4d18d4f2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2895a2a8967047222a9929112b8bb71323f28529/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2895a2a8967047222a9929112b8bb71323f28529/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2895a2a8967047222a9929112b8bb71323f28529", "patch": "@@ -1,3 +1,8 @@\n+2012-12-02  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* reorg.c: Remove an obsolete comment.\n+\t* config/pa/pa.md: Add back the HP-PA comment here, with details.\n+\n 2012-11-30  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* stor-layout.c (bit_field_mode_iterator::bit_field_mode_iterator): Deal"}, {"sha": "b5a9e8d532caa5b4b4998a346990cbfc5cd7e468", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 47, "deletions": 4, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2895a2a8967047222a9929112b8bb71323f28529/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2895a2a8967047222a9929112b8bb71323f28529/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=2895a2a8967047222a9929112b8bb71323f28529", "patch": "@@ -1,6 +1,5 @@\n ;;- Machine description for HP PA-RISC architecture for GCC compiler\n-;;   Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001,\n-;;   2002, 2003, 2004, 2005, 2006, 2007, 2008, 2010\n+;;   Copyright (C) 1992-2012\n ;;   Free Software Foundation, Inc.\n ;;   Contributed by the Center for Software Science at the University\n ;;   of Utah.\n@@ -21,8 +20,52 @@\n ;; along with GCC; see the file COPYING3.  If not see\n ;; <http://www.gnu.org/licenses/>.\n \n-;; This gcc Version 2 machine description is inspired by sparc.md and\n-;; mips.md.\n+;; This machine description is inspired by sparc.md and to a lesser\n+;; extent mips.md.\n+\n+;; Possible improvements:\n+;;\n+;; * With PA1.1, most computational instructions can conditionally nullify\n+;;   the execution of the following instruction.  A nullified instruction\n+;;   does not cause the instruction pipeline to stall, making it a very\n+;;   efficient alternative to e.g. branching or conditional moves.\n+;;\n+;;   Nullification is performed conditionally based on the outcome of a\n+;;   test specified in the opcode.  The test result is stored in PSW[N]\n+;;   and can only be used to nullify the instruction following immediately\n+;;   after the test.  For example:\n+;;\n+;;\tldi 10,%r26\n+;;\tldi 5,%r25\n+;;\tsub,< %r26,%r25,%r28\n+;;\tsub   %r28,%r25,%r28\t; %r28 == 0\n+;;\tsub,> %r26,%r25,%r29\n+;;\tsub   %r29,%r25,%r29\t; %r29 == 5\n+;;\n+;;   This could be tricky to implement because the result of the test has\n+;;   to be propagated one instruction forward, which, in the worst case,\n+;;   would involve (1) adding a fake register for PSW[N]; (2) adding the\n+;;   variants of the computational instructions that set or consume this\n+;;   fake register.  The cond_exec infrastructure is probably not helpful\n+;;   for this.\n+;;\n+;; * PA-RISC includes a set of conventions for branch instruction usage\n+;;   to indicate whether a particular branch is more likely to be taken\n+;;   or not taken.  For example, the prediction for CMPB instructions\n+;;   (CMPB,cond,n r1,r2,target) depends on the direction of the branch\n+;;   (forward or backward) and on the order of the operands:\n+;;\n+;;     | branch    | operand  | branch     |\n+;;     | direction | compare  | prediction |\n+;;     +-----------+----------+------------+\n+;;     | backward  | r1 < r2  | taken      |\n+;;     | backward  | r1 >= r2 | not taken  |\n+;;     | forward   | r1 < r2  | not taken  |\n+;;     | forward   | r1 >= r2 | taken      |\n+;;    \n+;;   By choosing instructions and operand order carefully, the compiler\n+;;   could give the CPU branch predictor some help.\n+;;   \n \n ;;- See file \"rtl.def\" for documentation on define_insn, match_*, et. al.\n "}, {"sha": "612c9cae93b279530012df528e4495f3c2e703b8", "filename": "gcc/reorg.c", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2895a2a8967047222a9929112b8bb71323f28529/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2895a2a8967047222a9929112b8bb71323f28529/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=2895a2a8967047222a9929112b8bb71323f28529", "patch": "@@ -100,16 +100,7 @@ along with GCC; see the file COPYING3.  If not see\n    delay slot.  In that case, we point each insn at the other with REG_CC_USER\n    and REG_CC_SETTER notes.  Note that these restrictions affect very few\n    machines because most RISC machines with delay slots will not use CC0\n-   (the RT is the only known exception at this point).\n-\n-   Not yet implemented:\n-\n-   The Acorn Risc Machine can conditionally execute most insns, so\n-   it is profitable to move single insns into a position to execute\n-   based on the condition code of the previous insn.\n-\n-   The HP-PA can conditionally nullify insns, providing a similar\n-   effect to the ARM, differing mostly in which insn is \"in charge\".  */\n+   (the RT is the only known exception at this point).  */\n \n #include \"config.h\"\n #include \"system.h\""}]}