{"sha": "1a2927d261ab54c43786cf7470aa87146ff209ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWEyOTI3ZDI2MWFiNTRjNDM3ODZjZjc0NzBhYTg3MTQ2ZmYyMDllYQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-02-21T23:58:27Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-02-21T23:58:27Z"}, "message": "(chain_member_value, decl_attribute_variant): New functions.\n\n(valid_machine_attribute): Moved here from c-common.c.\n\nFrom-SVN: r9020", "tree": {"sha": "5709c8e1e0da006e2541e7cc6bc0e295281e4994", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5709c8e1e0da006e2541e7cc6bc0e295281e4994"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a2927d261ab54c43786cf7470aa87146ff209ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a2927d261ab54c43786cf7470aa87146ff209ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a2927d261ab54c43786cf7470aa87146ff209ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a2927d261ab54c43786cf7470aa87146ff209ea/comments", "author": null, "committer": null, "parents": [{"sha": "15f000972d998ae4b49dbc21f45ff4c5e7107ee1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15f000972d998ae4b49dbc21f45ff4c5e7107ee1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15f000972d998ae4b49dbc21f45ff4c5e7107ee1"}], "stats": {"total": 92, "additions": 91, "deletions": 1}, "files": [{"sha": "0133feb8221d445ad57266c28a8cd01cc4f31561", "filename": "gcc/tree.c", "status": "modified", "additions": 91, "deletions": 1, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a2927d261ab54c43786cf7470aa87146ff209ea/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a2927d261ab54c43786cf7470aa87146ff209ea/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=1a2927d261ab54c43786cf7470aa87146ff209ea", "patch": "@@ -1641,7 +1641,7 @@ binfo_member (elem, list)\n   return NULL_TREE;\n }\n \n-/* Return nonzero if ELEM is part of the chain CHAIN.  */\n+/* Return nonzero if ELEM is part of the chain CHAIN. */\n \n int\n chain_member (elem, chain)\n@@ -1657,6 +1657,23 @@ chain_member (elem, chain)\n   return 0;\n }\n \n+/* Return nonzero if ELEM is equal to TREE_VALUE (CHAIN) for any piece of\n+   chain CHAIN. */\n+\n+int\n+chain_member_value (elem, chain)\n+     tree elem, chain;\n+{\n+  while (chain)\n+    {\n+      if (elem == TREE_VALUE (chain))\n+\treturn 1;\n+      chain = TREE_CHAIN (chain);\n+    }\n+\n+  return 0;\n+}\n+\n /* Return the length of a chain of nodes chained through TREE_CHAIN.\n    We expect a null pointer to mark the end of the chain.\n    This is the Lisp primitive `length'.  */\n@@ -2766,7 +2783,19 @@ build_block (vars, tags, subblocks, supercontext, chain)\n   BLOCK_CHAIN (block) = chain;\n   return block;\n }\n+\n \f\n+/* Return a declaration like DDECL except that its DECL_MACHINE_ATTRIBUTE\n+   is ATTRIBUTE. */\n+\n+tree\n+build_decl_attribute_variant (ddecl, attribute)\n+     tree ddecl, attribute;\n+{\n+  DECL_MACHINE_ATTRIBUTES (ddecl) = attribute;\n+  return ddecl;\n+}\n+\n /* Return a type like TTYPE except that its TYPE_ATTRIBUTE\n    is ATTRIBUTE.\n \n@@ -2825,6 +2854,67 @@ build_type_attribute_variant (ttype, attribute)\n \n   return ttype;\n }\n+\n+/* Return a 1 if NEW_ATTR is valid for either declaration DECL or type TYPE \n+   and 0 otherwise.  Validity is determined the configuration macros \n+   VALID_MACHINE_DECL_ATTRIBUTE and VALID_MACHINE_TYPE_ATTRIBUTE. */\n+\n+int\n+valid_machine_attribute (new_attr, decl, type)\n+  tree new_attr;\n+  tree decl;\n+  tree type;\n+{\n+  int valid = 0;\n+  tree decl_attr_list = DECL_MACHINE_ATTRIBUTES (decl);\n+  tree type_attr_list = TYPE_ATTRIBUTES (type);\n+\n+#ifdef VALID_MACHINE_DECL_ATTRIBUTE\n+  if (VALID_MACHINE_DECL_ATTRIBUTE (decl, \n+                                    decl_attr_list, \n+                                    new_attr))\n+    {\n+      tree attr_list;\n+      int in_list = 0;\n+\n+      for (attr_list = decl_attr_list; \n+           attr_list;\n+           attr_list = TREE_CHAIN (attr_list))\n+\tif (TREE_VALUE (attr_list) == new_attr)\n+\t  in_list = 1;\n+\n+      if (! in_list)\n+        decl_attr_list = tree_cons (NULL_TREE, new_attr, decl_attr_list);\n+\n+      decl = build_decl_attribute_variant (decl, decl_attr_list);\n+      valid = 1;\n+    }\n+#endif\n+\n+#ifdef VALID_MACHINE_TYPE_ATTRIBUTE\n+  if (VALID_MACHINE_TYPE_ATTRIBUTE (type,\n+                                    type_attr_list, \n+                                    new_attr))\n+    {\n+      tree attr_list;\n+      int in_list = 0;\n+\n+      for (attr_list = type_attr_list;\n+           attr_list;\n+\t   attr_list = TREE_CHAIN (attr_list))\n+\tif (TREE_VALUE (attr_list) == new_attr)\n+\t  in_list = 1;\n+\n+      if (!in_list)\n+        type_attr_list = tree_cons (NULL_TREE, new_attr, type_attr_list);\n+\n+      decl = build_type_attribute_variant (type, type_attr_list);\n+      valid = 1;\n+    }\n+#endif\n+\n+  return valid;\n+}\n \f\n /* Return a type like TYPE except that its TYPE_READONLY is CONSTP\n    and its TYPE_VOLATILE is VOLATILEP."}]}