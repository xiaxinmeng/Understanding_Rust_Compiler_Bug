{"sha": "b4f588c48d3530ab687647ea2bc932656d2b5822", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjRmNTg4YzQ4ZDM1MzBhYjY4NzY0N2VhMmJjOTMyNjU2ZDJiNTgyMg==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-12-29T12:22:09Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-12-29T12:22:09Z"}, "message": "In gcc/c-family/: 2010-12-29 Nicola Pero <nicola@nicola.brainstorm.co.uk>\n\nIn gcc/c-family/:\n2010-12-29  Nicola Pero  <nicola@nicola.brainstorm.co.uk>\n\n\tPR objc/47075\n\t* c-objc.h (objc_finish_message_expr): Added argument to\n\tprototype.\n\nIn gcc/objc/:\n2010-12-29  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\tPR objc/47075\n\t* objc-act.h (PROPERTY_REF_DEPRECATED_GETTER): New.\n\t* objc-tree.def (PROPERTY_REF): Increased the number of operands\n\tfrom 3 to 4.\n\t* objc-act.c (objc_finish_message_expr): Added optional argument\n\tallowing to return the deprecated method prototype for deprecated\n\tmethods, instead of immediately emitting the deprecation warning.\n\t(objc_maybe_build_component_ref): Do not warn for a deprecated\n\tproperty.  When building the getter call, get the deprecated\n\tmethod prototype from objc_finish_message_expr() and put it into\n\tthe PROPERTY_REF.\n\t(objc_build_class_component_ref): Same change.\n\t(finish_class): Mark the getter and setter as deprecated if they\n\tare generated from a deprecated property.\n\t(objc_gimplify_property_ref): If the getter is deprecated, emit a\n\tdeprecation warning.\n\t(objc_build_setter_call, objc_build_message_expr,\n\tobjc_finish_foreach_loop): Updated call to\n\tobjc_finish_message_expr.\n\t\nIn gcc/objcp/:\n2010-12-29  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\t* objcp-lang.c (objcp_tsubst_copy_and_build): Update call to\n\tobjc_finish_message_expr.\n\nIn gcc/testsuite/:\n2010-12-29  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\tPR objc/47075\n\t* objc.dg/property/at-property-deprecated-1.m: Updated.\n\t* objc.dg/property/at-property-deprecated-2.m: New.\n\t* objc.dg/property/dotsyntax-deprecated-1.m: New.\n\t* obj-c++.dg/property/at-property-deprecated-1.mm: Updated.\n\t* obj-c++.dg/property/at-property-deprecated-2.mm: New.\n\t* obj-c++.dg/property/dotsyntax-deprecated-1.mm: New.\n\nFrom-SVN: r168315", "tree": {"sha": "b230ef90327ea01e66ce4b5ffb26d4bc66c4dbba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b230ef90327ea01e66ce4b5ffb26d4bc66c4dbba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4f588c48d3530ab687647ea2bc932656d2b5822", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4f588c48d3530ab687647ea2bc932656d2b5822", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4f588c48d3530ab687647ea2bc932656d2b5822", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4f588c48d3530ab687647ea2bc932656d2b5822/comments", "author": null, "committer": null, "parents": [{"sha": "51361a93c647867059dde0fcbfcd32a4193e3d12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51361a93c647867059dde0fcbfcd32a4193e3d12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51361a93c647867059dde0fcbfcd32a4193e3d12"}], "stats": {"total": 280, "additions": 246, "deletions": 34}, "files": [{"sha": "bf0bc7689f7c2d101aa2685f5d594fca5bc10eff", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4f588c48d3530ab687647ea2bc932656d2b5822/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4f588c48d3530ab687647ea2bc932656d2b5822/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=b4f588c48d3530ab687647ea2bc932656d2b5822", "patch": "@@ -1,3 +1,9 @@\n+2010-12-29  Nicola Pero  <nicola@nicola.brainstorm.co.uk>\n+\n+\tPR objc/47075\n+\t* c-objc.h (objc_finish_message_expr): Added argument to\n+\tprototype.\n+\n 2010-12-22  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* c-common.c (handle_nonnull_attribute, handle_sentinel_attribute):"}, {"sha": "e67eedebd78998a3f7804ed94b0d8aba78cc52fc", "filename": "gcc/c-family/c-objc.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4f588c48d3530ab687647ea2bc932656d2b5822/gcc%2Fc-family%2Fc-objc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4f588c48d3530ab687647ea2bc932656d2b5822/gcc%2Fc-family%2Fc-objc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-objc.h?ref=b4f588c48d3530ab687647ea2bc932656d2b5822", "patch": "@@ -54,7 +54,7 @@ extern void objc_declare_alias (tree, tree);\n extern void objc_declare_class (tree);\n extern void objc_declare_protocols (tree, tree);\n extern tree objc_build_message_expr (tree);\n-extern tree objc_finish_message_expr (tree, tree, tree);\n+extern tree objc_finish_message_expr (tree, tree, tree, tree*);\n extern tree objc_build_selector_expr (location_t, tree);\n extern tree objc_build_protocol_expr (tree);\n extern tree objc_build_encode_expr (tree);"}, {"sha": "d5da4ce20b83f7e09ed142a0182110c816f3c81e", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4f588c48d3530ab687647ea2bc932656d2b5822/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4f588c48d3530ab687647ea2bc932656d2b5822/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=b4f588c48d3530ab687647ea2bc932656d2b5822", "patch": "@@ -1,3 +1,25 @@\n+2010-12-29  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\tPR objc/47075\n+\t* objc-act.h (PROPERTY_REF_DEPRECATED_GETTER): New.\n+\t* objc-tree.def (PROPERTY_REF): Increased the number of operands\n+\tfrom 3 to 4.\n+\t* objc-act.c (objc_finish_message_expr): Added optional argument\n+\tallowing to return the deprecated method prototype for deprecated\n+\tmethods, instead of immediately emitting the deprecation warning.\n+\t(objc_maybe_build_component_ref): Do not warn for a deprecated\n+\tproperty.  When building the getter call, get the deprecated\n+\tmethod prototype from objc_finish_message_expr() and put it into\n+\tthe PROPERTY_REF.\n+\t(objc_build_class_component_ref): Same change.\n+\t(finish_class): Mark the getter and setter as deprecated if they\n+\tare generated from a deprecated property.\n+\t(objc_gimplify_property_ref): If the getter is deprecated, emit a\n+\tdeprecation warning.\n+\t(objc_build_setter_call, objc_build_message_expr,\n+\tobjc_finish_foreach_loop): Updated call to\n+\tobjc_finish_message_expr.\n+\t\n 2010-12-28  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \tPR objc/47076"}, {"sha": "57f04606b4ff0eeabae8b52686fe7a911773d626", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 53, "deletions": 25, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4f588c48d3530ab687647ea2bc932656d2b5822/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4f588c48d3530ab687647ea2bc932656d2b5822/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=b4f588c48d3530ab687647ea2bc932656d2b5822", "patch": "@@ -1468,7 +1468,7 @@ maybe_make_artificial_property_decl (tree interface, tree implementation,\n       DECL_SOURCE_LOCATION (property_decl) = input_location;\n       TREE_DEPRECATED (property_decl) = 0;\n       DECL_ARTIFICIAL (property_decl) = 1;\n-\t      \n+\n       /* Add property-specific information.  Note that one of\n \t PROPERTY_GETTER_NAME or PROPERTY_SETTER_NAME may refer to a\n \t non-existing method; this will generate an error when the\n@@ -1743,6 +1743,7 @@ objc_maybe_build_component_ref (tree object, tree property_ident)\n     {\n       tree expression;\n       tree getter_call;\n+      tree deprecated_method_prototype = NULL_TREE;\n \n       /* We have an additional nasty problem here; if this\n \t PROPERTY_REF needs to become a 'getter', then the conversion\n@@ -1770,14 +1771,16 @@ objc_maybe_build_component_ref (tree object, tree property_ident)\n       if (PROPERTY_HAS_NO_GETTER (x))\n \tgetter_call = NULL_TREE;\n       else\n-\tgetter_call = objc_finish_message_expr (object,\n-\t\t\t\t\t\tPROPERTY_GETTER_NAME (x),\n-\t\t\t\t\t\tNULL_TREE);\n-\n-      if (TREE_DEPRECATED (x))\n-\twarn_deprecated_use (x, NULL_TREE);\n-\n-      expression = build3 (PROPERTY_REF, TREE_TYPE(x), object, x, getter_call);\n+\tgetter_call = objc_finish_message_expr\n+\t  (object, PROPERTY_GETTER_NAME (x), NULL_TREE,\n+\t   /* Disable the immediate deprecation warning if the getter\n+\t      is deprecated, but record the fact that the getter is\n+\t      deprecated by setting PROPERTY_REF_DEPRECATED_GETTER to\n+\t      the method prototype.  */\n+\t   &deprecated_method_prototype);\n+\n+      expression = build4 (PROPERTY_REF, TREE_TYPE(x), object, x, getter_call,\n+\t\t\t   deprecated_method_prototype);\n       SET_EXPR_LOCATION (expression, input_location);\n       TREE_SIDE_EFFECTS (expression) = 1;\n       \n@@ -1839,17 +1842,17 @@ objc_build_class_component_ref (tree class_name, tree property_ident)\n     {\n       tree expression;\n       tree getter_call;\n+      tree deprecated_method_prototype = NULL_TREE;\n \n       if (PROPERTY_HAS_NO_GETTER (x))\n \tgetter_call = NULL_TREE;\n       else\n-\tgetter_call = objc_finish_message_expr (object,\n-\t\t\t\t\t\tPROPERTY_GETTER_NAME (x),\n-\t\t\t\t\t\tNULL_TREE);\n-      if (TREE_DEPRECATED (x))\n-\twarn_deprecated_use (x, NULL_TREE);\n+\tgetter_call = objc_finish_message_expr\n+\t  (object, PROPERTY_GETTER_NAME (x), NULL_TREE,\n+\t   &deprecated_method_prototype);\n \n-      expression = build3 (PROPERTY_REF, TREE_TYPE(x), object, x, getter_call);\n+      expression = build4 (PROPERTY_REF, TREE_TYPE(x), object, x, getter_call,\n+\t\t\t   deprecated_method_prototype);\n       SET_EXPR_LOCATION (expression, input_location);\n       TREE_SIDE_EFFECTS (expression) = 1;\n \n@@ -1906,7 +1909,7 @@ objc_build_setter_call (tree lhs, tree rhs)\n       /* TODO: Decay arguments in C.  */\n       setter = objc_finish_message_expr (object_expr, \n \t\t\t\t\t PROPERTY_SETTER_NAME (property_decl),\n-\t\t\t\t\t setter_argument);\n+\t\t\t\t\t setter_argument, NULL);\n       return setter;\n     }\n \n@@ -8029,7 +8032,7 @@ objc_build_message_expr (tree mess)\n \t\t\t method_params);\n #endif\n \n-  return objc_finish_message_expr (receiver, sel_name, method_params);\n+  return objc_finish_message_expr (receiver, sel_name, method_params, NULL);\n }\n \n /* Look up method SEL_NAME that would be suitable for receiver\n@@ -8058,10 +8061,20 @@ lookup_method_in_hash_lists (tree sel_name, int is_class)\n /* The 'objc_finish_message_expr' routine is called from within\n    'objc_build_message_expr' for non-template functions.  In the case of\n    C++ template functions, it is called from 'build_expr_from_tree'\n-   (in decl2.c) after RECEIVER and METHOD_PARAMS have been expanded.  */\n-\n+   (in decl2.c) after RECEIVER and METHOD_PARAMS have been expanded.\n+\n+   If the DEPRECATED_METHOD_PROTOTYPE argument is NULL, then we warn\n+   if the method being used is deprecated.  If it is not NULL, instead\n+   of deprecating, we set *DEPRECATED_METHOD_PROTOTYPE to the method\n+   prototype that was used and is deprecated.  This is useful for\n+   getter calls that are always generated when compiling dot-syntax\n+   expressions, even if they may not be used.  In that case, we don't\n+   want the warning immediately; we produce it (if needed) at gimplify\n+   stage when we are sure that the deprecated getter is being\n+   used.  */\n tree\n-objc_finish_message_expr (tree receiver, tree sel_name, tree method_params)\n+objc_finish_message_expr (tree receiver, tree sel_name, tree method_params,\n+\t\t\t  tree *deprecated_method_prototype)\n {\n   tree method_prototype = NULL_TREE, rprotos = NULL_TREE, rtype;\n   tree selector, retval, class_tree;\n@@ -8278,7 +8291,12 @@ objc_finish_message_expr (tree receiver, tree sel_name, tree method_params)\n \t is often used precisely to turn off warnings associated with\n \t the object being of a particular class.  */\n       if (TREE_DEPRECATED (method_prototype)  &&  rtype != NULL_TREE)\n-\twarn_deprecated_use (method_prototype, NULL_TREE);\n+\t{\n+\t  if (deprecated_method_prototype)\n+\t    *deprecated_method_prototype = method_prototype;\n+\t  else\n+\t    warn_deprecated_use (method_prototype, NULL_TREE);\n+\t}\n     }\n \n \n@@ -10743,6 +10761,7 @@ finish_class (tree klass)\n \t\t  objc_add_method (objc_interface_context, getter_decl, false, true);\n \t\telse\n \t\t  objc_add_method (objc_interface_context, getter_decl, false, false);\n+\t\tTREE_DEPRECATED (getter_decl) = TREE_DEPRECATED (x);\n \t\tMETHOD_PROPERTY_CONTEXT (getter_decl) = x;\n \t      }\n \n@@ -10786,6 +10805,7 @@ finish_class (tree klass)\n \t\t      objc_add_method (objc_interface_context, setter_decl, false, true);\n \t\t    else\n \t\t      objc_add_method (objc_interface_context, setter_decl, false, false);\n+\t\t    TREE_DEPRECATED (setter_decl) = TREE_DEPRECATED (x);\n \t\t    METHOD_PROPERTY_CONTEXT (setter_decl) = x;\n \t\t  }\t       \n \t      }\n@@ -13118,6 +13138,14 @@ objc_gimplify_property_ref (tree *expr_p)\n       return;\n     }\n \n+  if (PROPERTY_REF_DEPRECATED_GETTER (*expr_p))\n+    {\n+      /* PROPERTY_REF_DEPRECATED_GETTER contains the method prototype\n+\t that is deprecated.  */\n+      warn_deprecated_use (PROPERTY_REF_DEPRECATED_GETTER (*expr_p),\n+\t\t\t   NULL_TREE);\n+    }\n+\n   call_exp = getter;\n #ifdef OBJCPLUS\n   /* In C++, a getter which returns an aggregate value results in a\n@@ -13511,7 +13539,7 @@ objc_finish_foreach_loop (location_t location, tree object_expression, tree coll\n \t\t\t\t tree_cons   /* __objc_foreach_items  */\n \t\t\t\t (NULL_TREE, objc_foreach_items_decl,\n \t\t\t\t  tree_cons  /* 16 */\n-\t\t\t\t  (NULL_TREE, build_int_cst (NULL_TREE, 16), NULL_TREE))));\n+\t\t\t\t  (NULL_TREE, build_int_cst (NULL_TREE, 16), NULL_TREE))), NULL);\n #else\n   /* In C, we need to decay the __objc_foreach_items array that we are passing.  */\n   {\n@@ -13524,7 +13552,7 @@ objc_finish_foreach_loop (location_t location, tree object_expression, tree coll\n \t\t\t\t   tree_cons   /* __objc_foreach_items  */\n \t\t\t\t   (NULL_TREE, default_function_array_conversion (location, array).value,\n \t\t\t\t    tree_cons  /* 16 */\n-\t\t\t\t    (NULL_TREE, build_int_cst (NULL_TREE, 16), NULL_TREE))));\n+\t\t\t\t    (NULL_TREE, build_int_cst (NULL_TREE, 16), NULL_TREE))), NULL);\n   }\n #endif\n   t = build2 (MODIFY_EXPR, void_type_node, objc_foreach_batchsize_decl,\n@@ -13685,7 +13713,7 @@ objc_finish_foreach_loop (location_t location, tree object_expression, tree coll\n \t\t\t\t tree_cons   /* __objc_foreach_items  */\n \t\t\t\t (NULL_TREE, objc_foreach_items_decl,\n \t\t\t\t  tree_cons  /* 16 */\n-\t\t\t\t  (NULL_TREE, build_int_cst (NULL_TREE, 16), NULL_TREE))));\n+\t\t\t\t  (NULL_TREE, build_int_cst (NULL_TREE, 16), NULL_TREE))), NULL);\n #else\n   /* In C, we need to decay the __objc_foreach_items array that we are passing.  */\n   {\n@@ -13698,7 +13726,7 @@ objc_finish_foreach_loop (location_t location, tree object_expression, tree coll\n \t\t\t\t   tree_cons   /* __objc_foreach_items  */\n \t\t\t\t   (NULL_TREE, default_function_array_conversion (location, array).value,\n \t\t\t\t    tree_cons  /* 16 */\n-\t\t\t\t    (NULL_TREE, build_int_cst (NULL_TREE, 16), NULL_TREE))));\n+\t\t\t\t    (NULL_TREE, build_int_cst (NULL_TREE, 16), NULL_TREE))), NULL);\n   }\n #endif\n   t = build2 (MODIFY_EXPR, void_type_node, objc_foreach_batchsize_decl, "}, {"sha": "4d023e87cd3273802fb78d9167f01bca941812a9", "filename": "gcc/objc/objc-act.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4f588c48d3530ab687647ea2bc932656d2b5822/gcc%2Fobjc%2Fobjc-act.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4f588c48d3530ab687647ea2bc932656d2b5822/gcc%2Fobjc%2Fobjc-act.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.h?ref=b4f588c48d3530ab687647ea2bc932656d2b5822", "patch": "@@ -144,6 +144,11 @@ typedef enum objc_property_assign_semantics {\n    use it.  */\n #define PROPERTY_REF_GETTER_CALL(NODE) TREE_OPERAND (PROPERTY_REF_CHECK (NODE), 2)\n \n+/* PROPERTY_REF_DEPRECATED_GETTER is normally set to NULL_TREE.  If\n+   the property getter is deprecated, it is set to the method\n+   prototype for it, which is used to generate the deprecation warning\n+   when the getter is used.  */\n+#define PROPERTY_REF_DEPRECATED_GETTER(NODE) TREE_OPERAND (PROPERTY_REF_CHECK (NODE), 3)\n \n /* CLASS_INTERFACE_TYPE, CLASS_IMPLEMENTATION_TYPE,\n    CATEGORY_INTERFACE_TYPE, CATEGORY_IMPLEMENTATION_TYPE,"}, {"sha": "f72f2332dea3d39b7d2fb36f5ff67af3a88b6251", "filename": "gcc/objc/objc-tree.def", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4f588c48d3530ab687647ea2bc932656d2b5822/gcc%2Fobjc%2Fobjc-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4f588c48d3530ab687647ea2bc932656d2b5822/gcc%2Fobjc%2Fobjc-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-tree.def?ref=b4f588c48d3530ab687647ea2bc932656d2b5822", "patch": "@@ -46,7 +46,10 @@ DEFTREECODE (CLASS_REFERENCE_EXPR, \"class_reference_expr\", tcc_expression, 1)\n    representing the expression), and Operand 1 is the property (the\n    PROPERTY_DECL).  Operand 2 is the 'getter' call, ready to be used;\n    we pregenerate it because it is hard to generate it properly later\n-   on.  A PROPERTY_REF tree needs to be transformed into 'setter' and\n+   on.  Operand 3 records whether using the 'getter' call should\n+   generate a deprecation warning or not.\n+\n+   A PROPERTY_REF tree needs to be transformed into 'setter' and\n    'getter' calls at some point; at the moment this happens in two\n    places:\n \n@@ -58,13 +61,14 @@ DEFTREECODE (CLASS_REFERENCE_EXPR, \"class_reference_expr\", tcc_expression, 1)\n       gimplification; at that point, we convert each PROPERTY_REF into\n       a 'getter' call during ObjC/ObjC++ gimplify.  At that point, it\n       is quite hard to build a 'getter' call, but we have already built\n-      it and we just need to swap Operand 2 in.\n+      it and we just need to swap Operand 2 in, and emit the deprecation\n+      warnings from Operand 3 if needed.\n \n   Please note that when the Objective-C 2.0 \"dot-syntax\" 'object.component' \n   is encountered, where 'component' is not a property but there are valid\n   setter/getter methods for it, an artificial PROPERTY_DECL is generated\n   and used in the PROPERTY_REF.  */\n-DEFTREECODE (PROPERTY_REF, \"property_ref\", tcc_expression, 3)\n+DEFTREECODE (PROPERTY_REF, \"property_ref\", tcc_expression, 4)\n \n /*\n Local variables:"}, {"sha": "70c71e9686dbf06c481fb0dcba6d1e6c60236562", "filename": "gcc/objcp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4f588c48d3530ab687647ea2bc932656d2b5822/gcc%2Fobjcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4f588c48d3530ab687647ea2bc932656d2b5822/gcc%2Fobjcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjcp%2FChangeLog?ref=b4f588c48d3530ab687647ea2bc932656d2b5822", "patch": "@@ -1,3 +1,8 @@\n+2010-12-29  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* objcp-lang.c (objcp_tsubst_copy_and_build): Update call to\n+\tobjc_finish_message_expr.\n+\n 2010-12-26  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* config-lang.in (gtfiles): Added c-family/c-cppbuiltin.c."}, {"sha": "008697d7d76120a922195fea14af40b46c7c3c03", "filename": "gcc/objcp/objcp-lang.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4f588c48d3530ab687647ea2bc932656d2b5822/gcc%2Fobjcp%2Fobjcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4f588c48d3530ab687647ea2bc932656d2b5822/gcc%2Fobjcp%2Fobjcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjcp%2Fobjcp-lang.c?ref=b4f588c48d3530ab687647ea2bc932656d2b5822", "patch": "@@ -76,7 +76,7 @@ objcp_tsubst_copy_and_build (tree t, tree args, tsubst_flags_t complain,\n       return objc_finish_message_expr\n \t(RECURSE (TREE_OPERAND (t, 0)),\n \t TREE_OPERAND (t, 1),  /* No need to expand the selector.  */\n-\t RECURSE (TREE_OPERAND (t, 2)));\n+\t RECURSE (TREE_OPERAND (t, 2)), NULL);\n \n     case CLASS_REFERENCE_EXPR:\n       return objc_get_class_reference"}, {"sha": "695685cca14d1977c1edf806ab8555c51c4b2d60", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4f588c48d3530ab687647ea2bc932656d2b5822/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4f588c48d3530ab687647ea2bc932656d2b5822/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b4f588c48d3530ab687647ea2bc932656d2b5822", "patch": "@@ -1,3 +1,13 @@\n+2010-12-29  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\tPR objc/47075\n+\t* objc.dg/property/at-property-deprecated-1.m: Updated.\n+\t* objc.dg/property/at-property-deprecated-2.m: New.\n+\t* objc.dg/property/dotsyntax-deprecated-1.m: New.\n+\t* obj-c++.dg/property/at-property-deprecated-1.mm: Updated.\n+\t* obj-c++.dg/property/at-property-deprecated-2.mm: New.\n+\t* obj-c++.dg/property/dotsyntax-deprecated-1.mm: New.\n+\n 2010-12-28  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/47068"}, {"sha": "2cf4dee5e1f0993693ea2d72a02e61fec779d099", "filename": "gcc/testsuite/obj-c++.dg/property/at-property-deprecated-1.mm", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4f588c48d3530ab687647ea2bc932656d2b5822/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-deprecated-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4f588c48d3530ab687647ea2bc932656d2b5822/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-deprecated-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-deprecated-1.mm?ref=b4f588c48d3530ab687647ea2bc932656d2b5822", "patch": "@@ -29,8 +29,8 @@ int main (void)\n {\n   MyRootClass *object = [[MyRootClass alloc] init];\n \n-  object.a = 40;      /* { dg-warning \".a. is deprecated .declared at \" } */\n-  if (object.a != 40) /* { dg-warning \".a. is deprecated .declared at \" } */\n+  object.a = 40;      /* { dg-warning \"is deprecated\" } */\n+  if (object.a != 40) /* { dg-warning \"is deprecated\" } */\n     abort ();\n \n   return (0);"}, {"sha": "d2901a55b5707724d7237caa665126cf26d1e8c0", "filename": "gcc/testsuite/obj-c++.dg/property/at-property-deprecated-2.mm", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4f588c48d3530ab687647ea2bc932656d2b5822/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-deprecated-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4f588c48d3530ab687647ea2bc932656d2b5822/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-deprecated-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-deprecated-2.mm?ref=b4f588c48d3530ab687647ea2bc932656d2b5822", "patch": "@@ -0,0 +1,25 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, October 2010.  */\n+/* { dg-do compile } */\n+\n+/* Test that deprecation warnings are produced when a setter/getter of\n+   a @property is used directly.  */\n+\n+#include <objc/objc.h>\n+\n+@interface MyClass\n+{\n+  Class isa;\n+  int variable;\n+} \n+@property (assign, nonatomic) int property __attribute__ ((deprecated));\n+@end\n+\n+void foo (void)\n+{\n+  MyClass *object = nil;\n+\n+  if ([object property] > 0)  /* { dg-warning \"is deprecated\" } */\n+    {\n+      [object setProperty: 43]; /* { dg-warning \"is deprecated\" } */ \n+    }\n+}"}, {"sha": "ad627a8c10cb4b8bbebfafdd2230ca207918a040", "filename": "gcc/testsuite/obj-c++.dg/property/dotsyntax-deprecated-1.mm", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4f588c48d3530ab687647ea2bc932656d2b5822/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fdotsyntax-deprecated-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4f588c48d3530ab687647ea2bc932656d2b5822/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fdotsyntax-deprecated-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fdotsyntax-deprecated-1.mm?ref=b4f588c48d3530ab687647ea2bc932656d2b5822", "patch": "@@ -0,0 +1,41 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, October 2010.  */\n+/* { dg-do compile } */\n+\n+/* Test the 'dot syntax' with deprecated methods.  */\n+\n+#include <objc/objc.h>\n+\n+@interface MyClass\n+{\n+  Class isa;\n+} \n++ (int) classCount __attribute__ ((deprecated));\n++ (void) setClassCount: (int)value __attribute__ ((deprecated));\n+\n+- (int) count __attribute__ ((deprecated));\n+- (void) setCount: (int)value __attribute__ ((deprecated));\n+\n+- (int) classCount2;\n+- (void) setClassCount2: (int)value;\n+\n+- (int) count2;\n+- (void) setCount2: (int)value;\n+@end\n+\n+void foo (void)\n+{\n+  MyClass *object = nil;\n+\n+\n+  if (object.count > 0)  /* { dg-warning \"is deprecated\" } */\n+    object.count = 20;  /* { dg-warning \"is deprecated\" } */\n+\n+  if (MyClass.classCount < -7)   /* { dg-warning \"is deprecated\" } */\n+    MyClass.classCount = 11;  /* { dg-warning \"is deprecated\" } */\n+\n+  if (object.classCount2 > 0)\n+    object.classCount2 = 19;\n+\n+  if (object.count2 < -7)\n+    object.count2 = 74;\n+}"}, {"sha": "e520477717659de06825076e9aaa86ebeb863997", "filename": "gcc/testsuite/objc.dg/property/at-property-deprecated-1.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4f588c48d3530ab687647ea2bc932656d2b5822/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-deprecated-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4f588c48d3530ab687647ea2bc932656d2b5822/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-deprecated-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-deprecated-1.m?ref=b4f588c48d3530ab687647ea2bc932656d2b5822", "patch": "@@ -29,8 +29,8 @@ int main (void)\n {\n   MyRootClass *object = [[MyRootClass alloc] init];\n \n-  object.a = 40;      /* { dg-warning \".a. is deprecated .declared at \" } */\n-  if (object.a != 40) /* { dg-warning \".a. is deprecated .declared at \" } */\n+  object.a = 40;      /* { dg-warning \"is deprecated\" } */\n+  if (object.a != 40) /* { dg-warning \"is deprecated\" } */\n     abort ();\n \n   return 0;"}, {"sha": "d2901a55b5707724d7237caa665126cf26d1e8c0", "filename": "gcc/testsuite/objc.dg/property/at-property-deprecated-2.m", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4f588c48d3530ab687647ea2bc932656d2b5822/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-deprecated-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4f588c48d3530ab687647ea2bc932656d2b5822/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-deprecated-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-deprecated-2.m?ref=b4f588c48d3530ab687647ea2bc932656d2b5822", "patch": "@@ -0,0 +1,25 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, October 2010.  */\n+/* { dg-do compile } */\n+\n+/* Test that deprecation warnings are produced when a setter/getter of\n+   a @property is used directly.  */\n+\n+#include <objc/objc.h>\n+\n+@interface MyClass\n+{\n+  Class isa;\n+  int variable;\n+} \n+@property (assign, nonatomic) int property __attribute__ ((deprecated));\n+@end\n+\n+void foo (void)\n+{\n+  MyClass *object = nil;\n+\n+  if ([object property] > 0)  /* { dg-warning \"is deprecated\" } */\n+    {\n+      [object setProperty: 43]; /* { dg-warning \"is deprecated\" } */ \n+    }\n+}"}, {"sha": "ad627a8c10cb4b8bbebfafdd2230ca207918a040", "filename": "gcc/testsuite/objc.dg/property/dotsyntax-deprecated-1.m", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4f588c48d3530ab687647ea2bc932656d2b5822/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fdotsyntax-deprecated-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4f588c48d3530ab687647ea2bc932656d2b5822/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fdotsyntax-deprecated-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fdotsyntax-deprecated-1.m?ref=b4f588c48d3530ab687647ea2bc932656d2b5822", "patch": "@@ -0,0 +1,41 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, October 2010.  */\n+/* { dg-do compile } */\n+\n+/* Test the 'dot syntax' with deprecated methods.  */\n+\n+#include <objc/objc.h>\n+\n+@interface MyClass\n+{\n+  Class isa;\n+} \n++ (int) classCount __attribute__ ((deprecated));\n++ (void) setClassCount: (int)value __attribute__ ((deprecated));\n+\n+- (int) count __attribute__ ((deprecated));\n+- (void) setCount: (int)value __attribute__ ((deprecated));\n+\n+- (int) classCount2;\n+- (void) setClassCount2: (int)value;\n+\n+- (int) count2;\n+- (void) setCount2: (int)value;\n+@end\n+\n+void foo (void)\n+{\n+  MyClass *object = nil;\n+\n+\n+  if (object.count > 0)  /* { dg-warning \"is deprecated\" } */\n+    object.count = 20;  /* { dg-warning \"is deprecated\" } */\n+\n+  if (MyClass.classCount < -7)   /* { dg-warning \"is deprecated\" } */\n+    MyClass.classCount = 11;  /* { dg-warning \"is deprecated\" } */\n+\n+  if (object.classCount2 > 0)\n+    object.classCount2 = 19;\n+\n+  if (object.count2 < -7)\n+    object.count2 = 74;\n+}"}]}