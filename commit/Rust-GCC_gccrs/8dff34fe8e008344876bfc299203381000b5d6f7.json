{"sha": "8dff34fe8e008344876bfc299203381000b5d6f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGRmZjM0ZmU4ZTAwODM0NDg3NmJmYzI5OTIwMzM4MTAwMGI1ZDZmNw==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2014-12-22T16:00:16Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2014-12-22T16:00:16Z"}, "message": "re PR libstdc++/60271 ([DR2369] [C++1y] std::max(initializer_list<T>) cannot use std::max_element)\n\n2014-12-22  Ville Voutilainen  <ville.voutilainen@gmail.com>\n\n\tPR libstdc++/60271\n\tC++14 constexpr min, max, minmax, min_element, max_element\n\tand minmax_element. Also constexpr for 20.9.5-20.9.9,\n\taka various library functors.\n\t* include/bits/c++config: Add _GLIBCXX14_CONSTEXPR.\n\t* include/bits/algorithmfwd.h (min, max, minmax, min_element,\n\tmax_element): Use it.\n\t* include/bits/predefined_ops.h (_Iter_less_iter, __iter_less_iter,\n\t_Iter_comp_iter, __iter_comp_iter): Likewise.\n\t* include/bits/stl_algo.h (minmax, __minmax_element, minmax_element,\n\tmin, max, __min_element, min_element, __max_element, max_element)\n\tLikewise.\n\t* include/bits/stl_algobase.h (min, max): Likewise.\n\t* include/bits/stl_function.h (plus, minus, multiplies, divides,\n\tmodulus, negate, equal_to, not_equal_to, greater, less, greater_equal,\n\tless_equal, logical_and, logical_or, logical_not, bit_and, bit_or,\n\tbit_xor, bit_not, unary_negate, not1, binary_negate, not2): Likewise.\n\t* testsuite/20_util/function_objects/constexpr.cc: New.\n\t* testsuite/25_algorithms/max/constexpr.cc: Likewise.\n\t* testsuite/25_algorithms/max_element/constexpr.cc: Likewise.\n\t* testsuite/25_algorithms/min/constexpr.cc: Likewise.\n\t* testsuite/25_algorithms/min_element/constexpr.cc: Likewise.\n\t* testsuite/25_algorithms/minmax/constexpr.cc: Likewise.\n\t* testsuite/25_algorithms/minmax_element/constexpr.cc: Likewise.\n\t* testsuite/ext/profile/mutex_extensions_neg.cc: Adjust dg-error.\n\nFrom-SVN: r219015", "tree": {"sha": "b5cd8e6aea671c3f1c0fd2c4280e643555c216fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5cd8e6aea671c3f1c0fd2c4280e643555c216fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8dff34fe8e008344876bfc299203381000b5d6f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dff34fe8e008344876bfc299203381000b5d6f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8dff34fe8e008344876bfc299203381000b5d6f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dff34fe8e008344876bfc299203381000b5d6f7/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f5f101874330bf40011e95800ba4c753c631a43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f5f101874330bf40011e95800ba4c753c631a43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f5f101874330bf40011e95800ba4c753c631a43"}], "stats": {"total": 386, "additions": 382, "deletions": 4}, "files": [{"sha": "4fe8283f96b82b3a6fd7c4d08f1b9659f4a4b967", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dff34fe8e008344876bfc299203381000b5d6f7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dff34fe8e008344876bfc299203381000b5d6f7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8dff34fe8e008344876bfc299203381000b5d6f7", "patch": "@@ -1,3 +1,31 @@\n+2014-12-22  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tPR libstdc++/60271\n+\tC++14 constexpr min, max, minmax, min_element, max_element\n+\tand minmax_element. Also constexpr for 20.9.5-20.9.9,\n+\taka various library functors.\n+\t* include/bits/c++config: Add _GLIBCXX14_CONSTEXPR.\n+\t* include/bits/algorithmfwd.h (min, max, minmax, min_element,\n+\tmax_element): Use it.\n+\t* include/bits/predefined_ops.h (_Iter_less_iter, __iter_less_iter,\n+\t_Iter_comp_iter, __iter_comp_iter): Likewise.\n+\t* include/bits/stl_algo.h (minmax, __minmax_element, minmax_element,\n+\tmin, max, __min_element, min_element, __max_element, max_element)\n+\tLikewise.\n+\t* include/bits/stl_algobase.h (min, max): Likewise.\n+\t* include/bits/stl_function.h (plus, minus, multiplies, divides,\n+\tmodulus, negate, equal_to, not_equal_to, greater, less, greater_equal,\n+\tless_equal, logical_and, logical_or, logical_not, bit_and, bit_or,\n+\tbit_xor, bit_not, unary_negate, not1, binary_negate, not2): Likewise.\n+\t* testsuite/20_util/function_objects/constexpr.cc: New.\n+\t* testsuite/25_algorithms/max/constexpr.cc: Likewise.\n+\t* testsuite/25_algorithms/max_element/constexpr.cc: Likewise.\n+\t* testsuite/25_algorithms/min/constexpr.cc: Likewise.\n+\t* testsuite/25_algorithms/min_element/constexpr.cc: Likewise.\n+\t* testsuite/25_algorithms/minmax/constexpr.cc: Likewise.\n+\t* testsuite/25_algorithms/minmax_element/constexpr.cc: Likewise.\n+\t* testsuite/ext/profile/mutex_extensions_neg.cc: Adjust dg-error.\n+\n 2014-12-22  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* doc/xml/manual/status_cxx2011.xml: Update."}, {"sha": "b45828eb3d2216284f09a1174b7148bf8d8e5237", "filename": "libstdc++-v3/include/bits/algorithmfwd.h", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dff34fe8e008344876bfc299203381000b5d6f7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dff34fe8e008344876bfc299203381000b5d6f7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h?ref=8dff34fe8e008344876bfc299203381000b5d6f7", "patch": "@@ -352,64 +352,78 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     make_heap(_RAIter, _RAIter, _Compare);\n \n   template<typename _Tp> \n+    _GLIBCXX14_CONSTEXPR\n     const _Tp& \n     max(const _Tp&, const _Tp&);\n \n   template<typename _Tp, typename _Compare>\n+    _GLIBCXX14_CONSTEXPR\n     const _Tp& \n     max(const _Tp&, const _Tp&, _Compare);\n \n   // max_element\n   // merge\n \n   template<typename _Tp> \n+    _GLIBCXX14_CONSTEXPR\n     const _Tp& \n     min(const _Tp&, const _Tp&);\n \n   template<typename _Tp, typename _Compare>\n+    _GLIBCXX14_CONSTEXPR\n     const _Tp& \n     min(const _Tp&, const _Tp&, _Compare);\n \n   // min_element\n \n #if __cplusplus >= 201103L\n   template<typename _Tp>\n+    _GLIBCXX14_CONSTEXPR\n     pair<const _Tp&, const _Tp&> \n     minmax(const _Tp&, const _Tp&);\n \n   template<typename _Tp, typename _Compare>\n+    _GLIBCXX14_CONSTEXPR\n     pair<const _Tp&, const _Tp&>\n     minmax(const _Tp&, const _Tp&, _Compare);\n \n   template<typename _FIter>\n+    _GLIBCXX14_CONSTEXPR\n     pair<_FIter, _FIter>\n     minmax_element(_FIter, _FIter);\n \n   template<typename _FIter, typename _Compare>\n+    _GLIBCXX14_CONSTEXPR\n     pair<_FIter, _FIter>\n     minmax_element(_FIter, _FIter, _Compare);\n \n   template<typename _Tp>\n+    _GLIBCXX14_CONSTEXPR\n     _Tp\n     min(initializer_list<_Tp>);\n \n   template<typename _Tp, typename _Compare>\n+    _GLIBCXX14_CONSTEXPR\n     _Tp\n     min(initializer_list<_Tp>, _Compare);\n \n   template<typename _Tp>\n+    _GLIBCXX14_CONSTEXPR\n     _Tp\n     max(initializer_list<_Tp>);\n \n   template<typename _Tp, typename _Compare>\n+    _GLIBCXX14_CONSTEXPR\n     _Tp\n     max(initializer_list<_Tp>, _Compare);\n \n   template<typename _Tp>\n+    _GLIBCXX14_CONSTEXPR\n     pair<_Tp, _Tp>\n     minmax(initializer_list<_Tp>);\n \n   template<typename _Tp, typename _Compare>\n+    _GLIBCXX14_CONSTEXPR\n     pair<_Tp, _Tp>\n     minmax(initializer_list<_Tp>, _Compare);\n #endif\n@@ -655,10 +669,12 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n     lexicographical_compare(_IIter1, _IIter1, _IIter2, _IIter2, _Compare);\n \n   template<typename _FIter>\n+    _GLIBCXX14_CONSTEXPR\n     _FIter \n     max_element(_FIter, _FIter);\n \n   template<typename _FIter, typename _Compare>\n+    _GLIBCXX14_CONSTEXPR\n     _FIter \n     max_element(_FIter, _FIter, _Compare);\n \n@@ -672,10 +688,12 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n     merge(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);\n \n   template<typename _FIter>\n+    _GLIBCXX14_CONSTEXPR\n     _FIter \n     min_element(_FIter, _FIter);\n \n   template<typename _FIter, typename _Compare>\n+    _GLIBCXX14_CONSTEXPR\n     _FIter \n     min_element(_FIter, _FIter, _Compare);\n "}, {"sha": "356a526a0ba1b46dbc9511eab15a55a1df6dc4c9", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dff34fe8e008344876bfc299203381000b5d6f7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dff34fe8e008344876bfc299203381000b5d6f7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=8dff34fe8e008344876bfc299203381000b5d6f7", "patch": "@@ -103,6 +103,14 @@\n # endif\n #endif\n \n+#ifndef _GLIBCXX14_CONSTEXPR\n+# if __cplusplus >= 201402L\n+#  define _GLIBCXX14_CONSTEXPR constexpr\n+# else\n+#  define _GLIBCXX14_CONSTEXPR\n+# endif\n+#endif\n+\n // Macro for noexcept, to support in mixed 03/0x mode.\n #ifndef _GLIBCXX_NOEXCEPT\n # if __cplusplus >= 201103L"}, {"sha": "e31d8c389120d2d20b6f2915a18e6bb120866169", "filename": "libstdc++-v3/include/bits/predefined_ops.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dff34fe8e008344876bfc299203381000b5d6f7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fpredefined_ops.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dff34fe8e008344876bfc299203381000b5d6f7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fpredefined_ops.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fpredefined_ops.h?ref=8dff34fe8e008344876bfc299203381000b5d6f7", "patch": "@@ -37,11 +37,12 @@ namespace __ops\n   struct _Iter_less_iter\n   {\n     template<typename _Iterator1, typename _Iterator2>\n+      _GLIBCXX14_CONSTEXPR\n       bool\n       operator()(_Iterator1 __it1, _Iterator2 __it2) const\n       { return *__it1 < *__it2; }\n   };\n-\n+  _GLIBCXX14_CONSTEXPR\n   inline _Iter_less_iter\n   __iter_less_iter()\n   { return _Iter_less_iter(); }\n@@ -110,18 +111,20 @@ namespace __ops\n     struct _Iter_comp_iter\n     {\n       _Compare _M_comp;\n-\n+      _GLIBCXX14_CONSTEXPR\n       _Iter_comp_iter(_Compare __comp)\n \t: _M_comp(__comp)\n       { }\n \n       template<typename _Iterator1, typename _Iterator2>\n+        _GLIBCXX14_CONSTEXPR\n         bool\n         operator()(_Iterator1 __it1, _Iterator2 __it2)\n         { return bool(_M_comp(*__it1, *__it2)); }\n     };\n \n   template<typename _Compare>\n+    _GLIBCXX14_CONSTEXPR\n     inline _Iter_comp_iter<_Compare>\n     __iter_comp_iter(_Compare __comp)\n     { return _Iter_comp_iter<_Compare>(__comp); }"}, {"sha": "dfbb9faecfd39e84c1b816c7e08cc43251051100", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dff34fe8e008344876bfc299203381000b5d6f7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dff34fe8e008344876bfc299203381000b5d6f7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=8dff34fe8e008344876bfc299203381000b5d6f7", "patch": "@@ -3271,6 +3271,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  __b) otherwise.\n   */\n   template<typename _Tp>\n+    _GLIBCXX14_CONSTEXPR\n     inline pair<const _Tp&, const _Tp&>\n     minmax(const _Tp& __a, const _Tp& __b)\n     {\n@@ -3291,6 +3292,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  __b) otherwise.\n   */\n   template<typename _Tp, typename _Compare>\n+    _GLIBCXX14_CONSTEXPR\n     inline pair<const _Tp&, const _Tp&>\n     minmax(const _Tp& __a, const _Tp& __b, _Compare __comp)\n     {\n@@ -3299,6 +3301,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _ForwardIterator, typename _Compare>\n+    _GLIBCXX14_CONSTEXPR\n     pair<_ForwardIterator, _ForwardIterator>\n     __minmax_element(_ForwardIterator __first, _ForwardIterator __last,\n \t\t     _Compare __comp)\n@@ -3308,7 +3311,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  || ++__next == __last)\n \treturn std::make_pair(__first, __first);\n \n-      _ForwardIterator __min, __max;\n+      _ForwardIterator __min{}, __max{};\n       if (__comp(__next, __first))\n \t{\n \t  __min = __next;\n@@ -3369,6 +3372,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *           such that no other element in the range is larger.\n   */\n   template<typename _ForwardIterator>\n+    _GLIBCXX14_CONSTEXPR\n     inline pair<_ForwardIterator, _ForwardIterator>\n     minmax_element(_ForwardIterator __first, _ForwardIterator __last)\n     {\n@@ -3395,6 +3399,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *           such that no other element in the range is larger.\n   */\n   template<typename _ForwardIterator, typename _Compare>\n+    _GLIBCXX14_CONSTEXPR\n     inline pair<_ForwardIterator, _ForwardIterator>\n     minmax_element(_ForwardIterator __first, _ForwardIterator __last,\n \t\t   _Compare __comp)\n@@ -3412,26 +3417,31 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // N2722 + DR 915.\n   template<typename _Tp>\n+    _GLIBCXX14_CONSTEXPR\n     inline _Tp\n     min(initializer_list<_Tp> __l)\n     { return *std::min_element(__l.begin(), __l.end()); }\n \n   template<typename _Tp, typename _Compare>\n+    _GLIBCXX14_CONSTEXPR\n     inline _Tp\n     min(initializer_list<_Tp> __l, _Compare __comp)\n     { return *std::min_element(__l.begin(), __l.end(), __comp); }\n \n   template<typename _Tp>\n+    _GLIBCXX14_CONSTEXPR\n     inline _Tp\n     max(initializer_list<_Tp> __l)\n     { return *std::max_element(__l.begin(), __l.end()); }\n \n   template<typename _Tp, typename _Compare>\n+    _GLIBCXX14_CONSTEXPR\n     inline _Tp\n     max(initializer_list<_Tp> __l, _Compare __comp)\n     { return *std::max_element(__l.begin(), __l.end(), __comp); }\n \n   template<typename _Tp>\n+    _GLIBCXX14_CONSTEXPR\n     inline pair<_Tp, _Tp>\n     minmax(initializer_list<_Tp> __l)\n     {\n@@ -3441,6 +3451,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _Tp, typename _Compare>\n+    _GLIBCXX14_CONSTEXPR\n     inline pair<_Tp, _Tp>\n     minmax(initializer_list<_Tp> __l, _Compare __comp)\n     {\n@@ -5381,6 +5392,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n     }\n \n   template<typename _ForwardIterator, typename _Compare>\n+    _GLIBCXX14_CONSTEXPR\n     _ForwardIterator\n     __min_element(_ForwardIterator __first, _ForwardIterator __last,\n \t\t  _Compare __comp)\n@@ -5402,6 +5414,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  @return  Iterator referencing the first instance of the smallest value.\n   */\n   template<typename _ForwardIterator>\n+    _GLIBCXX14_CONSTEXPR\n     _ForwardIterator\n     inline min_element(_ForwardIterator __first, _ForwardIterator __last)\n     {\n@@ -5425,6 +5438,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  according to __comp.\n   */\n   template<typename _ForwardIterator, typename _Compare>\n+    _GLIBCXX14_CONSTEXPR\n     inline _ForwardIterator\n     min_element(_ForwardIterator __first, _ForwardIterator __last,\n \t\t_Compare __comp)\n@@ -5441,6 +5455,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n     }\n \n   template<typename _ForwardIterator, typename _Compare>\n+    _GLIBCXX14_CONSTEXPR\n     _ForwardIterator\n     __max_element(_ForwardIterator __first, _ForwardIterator __last,\n \t\t  _Compare __comp)\n@@ -5461,6 +5476,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  @return  Iterator referencing the first instance of the largest value.\n   */\n   template<typename _ForwardIterator>\n+    _GLIBCXX14_CONSTEXPR\n     inline _ForwardIterator\n     max_element(_ForwardIterator __first, _ForwardIterator __last)\n     {\n@@ -5484,6 +5500,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  according to __comp.\n   */\n   template<typename _ForwardIterator, typename _Compare>\n+    _GLIBCXX14_CONSTEXPR\n     inline _ForwardIterator\n     max_element(_ForwardIterator __first, _ForwardIterator __last,\n \t\t_Compare __comp)"}, {"sha": "15ee8200d2ad058c2c097e6282033e9949940461", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dff34fe8e008344876bfc299203381000b5d6f7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dff34fe8e008344876bfc299203381000b5d6f7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=8dff34fe8e008344876bfc299203381000b5d6f7", "patch": "@@ -190,6 +190,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  preprocessor macro.\n   */\n   template<typename _Tp>\n+    _GLIBCXX14_CONSTEXPR\n     inline const _Tp&\n     min(const _Tp& __a, const _Tp& __b)\n     {\n@@ -213,6 +214,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  preprocessor macro.\n   */\n   template<typename _Tp>\n+    _GLIBCXX14_CONSTEXPR\n     inline const _Tp&\n     max(const _Tp& __a, const _Tp& __b)\n     {\n@@ -236,6 +238,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  once, unlike a preprocessor macro.\n   */\n   template<typename _Tp, typename _Compare>\n+    _GLIBCXX14_CONSTEXPR\n     inline const _Tp&\n     min(const _Tp& __a, const _Tp& __b, _Compare __comp)\n     {\n@@ -257,6 +260,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  once, unlike a preprocessor macro.\n   */\n   template<typename _Tp, typename _Compare>\n+    _GLIBCXX14_CONSTEXPR\n     inline const _Tp&\n     max(const _Tp& __a, const _Tp& __b, _Compare __comp)\n     {"}, {"sha": "79f79594cc9d1e6a5b1ae483e9800eec497cce86", "filename": "libstdc++-v3/include/bits/stl_function.h", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dff34fe8e008344876bfc299203381000b5d6f7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dff34fe8e008344876bfc299203381000b5d6f7/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h?ref=8dff34fe8e008344876bfc299203381000b5d6f7", "patch": "@@ -166,6 +166,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp>\n     struct plus : public binary_function<_Tp, _Tp, _Tp>\n     {\n+      _GLIBCXX14_CONSTEXPR\n       _Tp\n       operator()(const _Tp& __x, const _Tp& __y) const\n       { return __x + __y; }\n@@ -175,6 +176,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp>\n     struct minus : public binary_function<_Tp, _Tp, _Tp>\n     {\n+      _GLIBCXX14_CONSTEXPR\n       _Tp\n       operator()(const _Tp& __x, const _Tp& __y) const\n       { return __x - __y; }\n@@ -184,6 +186,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp>\n     struct multiplies : public binary_function<_Tp, _Tp, _Tp>\n     {\n+      _GLIBCXX14_CONSTEXPR\n       _Tp\n       operator()(const _Tp& __x, const _Tp& __y) const\n       { return __x * __y; }\n@@ -193,6 +196,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp>\n     struct divides : public binary_function<_Tp, _Tp, _Tp>\n     {\n+      _GLIBCXX14_CONSTEXPR\n       _Tp\n       operator()(const _Tp& __x, const _Tp& __y) const\n       { return __x / __y; }\n@@ -202,6 +206,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp>\n     struct modulus : public binary_function<_Tp, _Tp, _Tp>\n     {\n+      _GLIBCXX14_CONSTEXPR\n       _Tp\n       operator()(const _Tp& __x, const _Tp& __y) const\n       { return __x % __y; }\n@@ -211,6 +216,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp>\n     struct negate : public unary_function<_Tp, _Tp>\n     {\n+      _GLIBCXX14_CONSTEXPR\n       _Tp\n       operator()(const _Tp& __x) const\n       { return -__x; }\n@@ -225,6 +231,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct plus<void>\n     {\n       template <typename _Tp, typename _Up>\n+\t_GLIBCXX14_CONSTEXPR\n \tauto\n \toperator()(_Tp&& __t, _Up&& __u) const\n \tnoexcept(noexcept(std::forward<_Tp>(__t) + std::forward<_Up>(__u)))\n@@ -239,6 +246,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct minus<void>\n     {\n       template <typename _Tp, typename _Up>\n+\t_GLIBCXX14_CONSTEXPR\n \tauto\n \toperator()(_Tp&& __t, _Up&& __u) const\n \tnoexcept(noexcept(std::forward<_Tp>(__t) - std::forward<_Up>(__u)))\n@@ -253,6 +261,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct multiplies<void>\n     {\n       template <typename _Tp, typename _Up>\n+\t_GLIBCXX14_CONSTEXPR\n \tauto\n \toperator()(_Tp&& __t, _Up&& __u) const\n \tnoexcept(noexcept(std::forward<_Tp>(__t) * std::forward<_Up>(__u)))\n@@ -267,6 +276,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct divides<void>\n     {\n       template <typename _Tp, typename _Up>\n+\t_GLIBCXX14_CONSTEXPR\n \tauto\n \toperator()(_Tp&& __t, _Up&& __u) const\n \tnoexcept(noexcept(std::forward<_Tp>(__t) / std::forward<_Up>(__u)))\n@@ -281,6 +291,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct modulus<void>\n     {\n       template <typename _Tp, typename _Up>\n+\t_GLIBCXX14_CONSTEXPR\n \tauto\n \toperator()(_Tp&& __t, _Up&& __u) const\n \tnoexcept(noexcept(std::forward<_Tp>(__t) % std::forward<_Up>(__u)))\n@@ -295,6 +306,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct negate<void>\n     {\n       template <typename _Tp>\n+\t_GLIBCXX14_CONSTEXPR\n \tauto\n \toperator()(_Tp&& __t) const\n \tnoexcept(noexcept(-std::forward<_Tp>(__t)))\n@@ -339,6 +351,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp>\n     struct equal_to : public binary_function<_Tp, _Tp, bool>\n     {\n+      _GLIBCXX14_CONSTEXPR\n       bool\n       operator()(const _Tp& __x, const _Tp& __y) const\n       { return __x == __y; }\n@@ -348,6 +361,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp>\n     struct not_equal_to : public binary_function<_Tp, _Tp, bool>\n     {\n+      _GLIBCXX14_CONSTEXPR\n       bool\n       operator()(const _Tp& __x, const _Tp& __y) const\n       { return __x != __y; }\n@@ -357,6 +371,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp>\n     struct greater : public binary_function<_Tp, _Tp, bool>\n     {\n+      _GLIBCXX14_CONSTEXPR\n       bool\n       operator()(const _Tp& __x, const _Tp& __y) const\n       { return __x > __y; }\n@@ -366,6 +381,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp>\n     struct less : public binary_function<_Tp, _Tp, bool>\n     {\n+      _GLIBCXX14_CONSTEXPR\n       bool\n       operator()(const _Tp& __x, const _Tp& __y) const\n       { return __x < __y; }\n@@ -375,6 +391,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp>\n     struct greater_equal : public binary_function<_Tp, _Tp, bool>\n     {\n+      _GLIBCXX14_CONSTEXPR\n       bool\n       operator()(const _Tp& __x, const _Tp& __y) const\n       { return __x >= __y; }\n@@ -384,6 +401,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp>\n     struct less_equal : public binary_function<_Tp, _Tp, bool>\n     {\n+      _GLIBCXX14_CONSTEXPR\n       bool\n       operator()(const _Tp& __x, const _Tp& __y) const\n       { return __x <= __y; }\n@@ -395,6 +413,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct equal_to<void>\n     {\n       template <typename _Tp, typename _Up>\n+\t_GLIBCXX14_CONSTEXPR\n \tauto\n \toperator()(_Tp&& __t, _Up&& __u) const\n \tnoexcept(noexcept(std::forward<_Tp>(__t) == std::forward<_Up>(__u)))\n@@ -409,6 +428,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct not_equal_to<void>\n     {\n       template <typename _Tp, typename _Up>\n+\t_GLIBCXX14_CONSTEXPR\n \tauto\n \toperator()(_Tp&& __t, _Up&& __u) const\n \tnoexcept(noexcept(std::forward<_Tp>(__t) != std::forward<_Up>(__u)))\n@@ -423,6 +443,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct greater<void>\n     {\n       template <typename _Tp, typename _Up>\n+\t_GLIBCXX14_CONSTEXPR\n \tauto\n \toperator()(_Tp&& __t, _Up&& __u) const\n \tnoexcept(noexcept(std::forward<_Tp>(__t) > std::forward<_Up>(__u)))\n@@ -437,6 +458,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct less<void>\n     {\n       template <typename _Tp, typename _Up>\n+\t_GLIBCXX14_CONSTEXPR\n \tauto\n \toperator()(_Tp&& __t, _Up&& __u) const\n \tnoexcept(noexcept(std::forward<_Tp>(__t) < std::forward<_Up>(__u)))\n@@ -451,6 +473,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct greater_equal<void>\n     {\n       template <typename _Tp, typename _Up>\n+\t_GLIBCXX14_CONSTEXPR\n \tauto\n \toperator()(_Tp&& __t, _Up&& __u) const\n \tnoexcept(noexcept(std::forward<_Tp>(__t) >= std::forward<_Up>(__u)))\n@@ -465,6 +488,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct less_equal<void>\n     {\n       template <typename _Tp, typename _Up>\n+\t_GLIBCXX14_CONSTEXPR\n \tauto\n \toperator()(_Tp&& __t, _Up&& __u) const\n \tnoexcept(noexcept(std::forward<_Tp>(__t) <= std::forward<_Up>(__u)))\n@@ -500,6 +524,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp>\n     struct logical_and : public binary_function<_Tp, _Tp, bool>\n     {\n+      _GLIBCXX14_CONSTEXPR\n       bool\n       operator()(const _Tp& __x, const _Tp& __y) const\n       { return __x && __y; }\n@@ -509,6 +534,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp>\n     struct logical_or : public binary_function<_Tp, _Tp, bool>\n     {\n+      _GLIBCXX14_CONSTEXPR\n       bool\n       operator()(const _Tp& __x, const _Tp& __y) const\n       { return __x || __y; }\n@@ -518,6 +544,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp>\n     struct logical_not : public unary_function<_Tp, bool>\n     {\n+      _GLIBCXX14_CONSTEXPR\n       bool\n       operator()(const _Tp& __x) const\n       { return !__x; }\n@@ -529,6 +556,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct logical_and<void>\n     {\n       template <typename _Tp, typename _Up>\n+\t_GLIBCXX14_CONSTEXPR\n \tauto\n \toperator()(_Tp&& __t, _Up&& __u) const\n \tnoexcept(noexcept(std::forward<_Tp>(__t) && std::forward<_Up>(__u)))\n@@ -543,6 +571,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct logical_or<void>\n     {\n       template <typename _Tp, typename _Up>\n+\t_GLIBCXX14_CONSTEXPR\n \tauto\n \toperator()(_Tp&& __t, _Up&& __u) const\n \tnoexcept(noexcept(std::forward<_Tp>(__t) || std::forward<_Up>(__u)))\n@@ -557,6 +586,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct logical_not<void>\n     {\n       template <typename _Tp>\n+\t_GLIBCXX14_CONSTEXPR\n \tauto\n \toperator()(_Tp&& __t) const\n \tnoexcept(noexcept(!std::forward<_Tp>(__t)))\n@@ -587,6 +617,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp>\n     struct bit_and : public binary_function<_Tp, _Tp, _Tp>\n     {\n+      _GLIBCXX14_CONSTEXPR\n       _Tp\n       operator()(const _Tp& __x, const _Tp& __y) const\n       { return __x & __y; }\n@@ -595,6 +626,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp>\n     struct bit_or : public binary_function<_Tp, _Tp, _Tp>\n     {\n+      _GLIBCXX14_CONSTEXPR\n       _Tp\n       operator()(const _Tp& __x, const _Tp& __y) const\n       { return __x | __y; }\n@@ -603,6 +635,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp>\n     struct bit_xor : public binary_function<_Tp, _Tp, _Tp>\n     {\n+      _GLIBCXX14_CONSTEXPR\n       _Tp\n       operator()(const _Tp& __x, const _Tp& __y) const\n       { return __x ^ __y; }\n@@ -611,6 +644,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp>\n     struct bit_not : public unary_function<_Tp, _Tp>\n     {\n+    _GLIBCXX14_CONSTEXPR\n       _Tp\n       operator()(const _Tp& __x) const\n       { return ~__x; }\n@@ -621,6 +655,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct bit_and<void>\n     {\n       template <typename _Tp, typename _Up>\n+\t_GLIBCXX14_CONSTEXPR\n \tauto\n \toperator()(_Tp&& __t, _Up&& __u) const\n \tnoexcept(noexcept(std::forward<_Tp>(__t) & std::forward<_Up>(__u)))\n@@ -634,6 +669,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct bit_or<void>\n     {\n       template <typename _Tp, typename _Up>\n+\t_GLIBCXX14_CONSTEXPR\n \tauto\n \toperator()(_Tp&& __t, _Up&& __u) const\n \tnoexcept(noexcept(std::forward<_Tp>(__t) | std::forward<_Up>(__u)))\n@@ -647,6 +683,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct bit_xor<void>\n     {\n       template <typename _Tp, typename _Up>\n+\t_GLIBCXX14_CONSTEXPR\n \tauto\n \toperator()(_Tp&& __t, _Up&& __u) const\n \tnoexcept(noexcept(std::forward<_Tp>(__t) ^ std::forward<_Up>(__u)))\n@@ -660,6 +697,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct bit_not<void>\n     {\n       template <typename _Tp>\n+\t_GLIBCXX14_CONSTEXPR\n \tauto\n \toperator()(_Tp&& __t) const\n \tnoexcept(noexcept(~std::forward<_Tp>(__t)))\n@@ -708,16 +746,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _Predicate _M_pred;\n \n     public:\n+      _GLIBCXX14_CONSTEXPR\n       explicit\n       unary_negate(const _Predicate& __x) : _M_pred(__x) { }\n \n+      _GLIBCXX14_CONSTEXPR\n       bool\n       operator()(const typename _Predicate::argument_type& __x) const\n       { return !_M_pred(__x); }\n     };\n \n   /// One of the @link negators negation functors@endlink.\n   template<typename _Predicate>\n+    _GLIBCXX14_CONSTEXPR\n     inline unary_negate<_Predicate>\n     not1(const _Predicate& __pred)\n     { return unary_negate<_Predicate>(__pred); }\n@@ -732,9 +773,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _Predicate _M_pred;\n \n     public:\n+      _GLIBCXX14_CONSTEXPR\n       explicit\n       binary_negate(const _Predicate& __x) : _M_pred(__x) { }\n \n+      _GLIBCXX14_CONSTEXPR\n       bool\n       operator()(const typename _Predicate::first_argument_type& __x,\n \t\t const typename _Predicate::second_argument_type& __y) const\n@@ -743,6 +786,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// One of the @link negators negation functors@endlink.\n   template<typename _Predicate>\n+    _GLIBCXX14_CONSTEXPR\n     inline binary_negate<_Predicate>\n     not2(const _Predicate& __pred)\n     { return binary_negate<_Predicate>(__pred); }"}, {"sha": "3ad7e0dbee4f04ed6e788f515cb09e3c61725152", "filename": "libstdc++-v3/testsuite/20_util/function_objects/constexpr.cc", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dff34fe8e008344876bfc299203381000b5d6f7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dff34fe8e008344876bfc299203381000b5d6f7/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Fconstexpr.cc?ref=8dff34fe8e008344876bfc299203381000b5d6f7", "patch": "@@ -0,0 +1,77 @@\n+// { dg-options \"-std=gnu++14\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 20.9.5-20.9.9\n+\n+#include <functional>\n+\n+static_assert(std::plus<int>()(1,2)==3, \"\");\n+static_assert(std::minus<int>()(3,2)==1, \"\");\n+static_assert(std::multiplies<int>()(3,2)==6, \"\");\n+static_assert(std::divides<int>()(6,2)==3, \"\");\n+static_assert(std::modulus<int>()(7,2)==1, \"\");\n+static_assert(std::negate<int>()(-5)==5, \"\");\n+\n+static_assert(std::plus<void>()(1,2)==3, \"\");\n+static_assert(std::minus<void>()(3,2)==1, \"\");\n+static_assert(std::multiplies<void>()(3,2)==6, \"\");\n+static_assert(std::divides<void>()(6,2)==3, \"\");\n+static_assert(std::modulus<void>()(7,2)==1, \"\");\n+static_assert(std::negate<void>()(-5)==5, \"\");\n+\n+static_assert(std::equal_to<int>()(2,2), \"\");\n+static_assert(std::not_equal_to<int>()(1,2), \"\");\n+static_assert(std::greater<int>()(2,1), \"\");\n+static_assert(std::less<int>()(1,2), \"\");\n+static_assert(std::greater_equal<int>()(2,2), \"\");\n+static_assert(std::less_equal<int>()(2,2), \"\");\n+\n+static_assert(std::equal_to<void>()(2,2), \"\");\n+static_assert(std::not_equal_to<void>()(1,2), \"\");\n+static_assert(std::greater<void>()(2,1), \"\");\n+static_assert(std::less<void>()(1,2), \"\");\n+static_assert(std::greater_equal<void>()(2,2), \"\");\n+static_assert(std::less_equal<void>()(2,2), \"\");\n+\n+static_assert(std::logical_and<int>()(1,1), \"\");\n+static_assert(std::logical_or<int>()(0,1), \"\");\n+static_assert(std::logical_not<int>()(0), \"\");\n+\n+static_assert(std::logical_and<void>()(1,1), \"\");\n+static_assert(std::logical_or<void>()(0,1), \"\");\n+static_assert(std::logical_not<void>()(0), \"\");\n+\n+static_assert(std::bit_and<int>()(3,2)==2, \"\");\n+static_assert(std::bit_or<int>()(1,2)==3, \"\");\n+static_assert(std::bit_xor<int>()(1,1)==0, \"\");\n+static_assert(std::bit_not<int>()(std::bit_not<int>()(0))==0, \"\");\n+\n+static_assert(std::bit_and<void>()(3,2)==2, \"\");\n+static_assert(std::bit_or<void>()(1,2)==3, \"\");\n+static_assert(std::bit_xor<void>()(1,1)==0, \"\");\n+static_assert(std::bit_not<void>()(std::bit_not<void>()(0))==0, \"\");\n+\n+static_assert(std::unary_negate<std::logical_not<int>>\n+\t      (std::logical_not<int>())(1), \"\");\n+static_assert(std::not1(std::logical_not<int>())(1), \"\");\n+\n+static_assert(std::binary_negate<std::logical_and<int>>\n+\t      (std::logical_and<int>())(0,0), \"\");\n+static_assert(std::not2(std::logical_and<int>())(0,0), \"\");"}, {"sha": "3db6d8f1054c3926d0c546c9255bcef1c7e8d718", "filename": "libstdc++-v3/testsuite/25_algorithms/max/constexpr.cc", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dff34fe8e008344876bfc299203381000b5d6f7/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmax%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dff34fe8e008344876bfc299203381000b5d6f7/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmax%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmax%2Fconstexpr.cc?ref=8dff34fe8e008344876bfc299203381000b5d6f7", "patch": "@@ -0,0 +1,28 @@\n+// { dg-options \"-std=gnu++14\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <algorithm>\n+#include <functional>\n+\n+static_assert(std::max(1, 2) == 2, \"\");\n+static_assert(std::max(2, 1, std::greater<int>()) == 1, \"\");\n+static_assert(std::max({1, 2}) == 2, \"\");\n+static_assert(std::max({2, 1}, std::greater<int>())==1, \"\");\n+"}, {"sha": "666dad875dd2951354c225b794cb1d2a6e332298", "filename": "libstdc++-v3/testsuite/25_algorithms/max_element/constexpr.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dff34fe8e008344876bfc299203381000b5d6f7/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmax_element%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dff34fe8e008344876bfc299203381000b5d6f7/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmax_element%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmax_element%2Fconstexpr.cc?ref=8dff34fe8e008344876bfc299203381000b5d6f7", "patch": "@@ -0,0 +1,29 @@\n+// { dg-options \"-std=gnu++14\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <algorithm>\n+#include <functional>\n+#include <utility>\n+\n+constexpr std::initializer_list<int> test{1, 2};\n+\n+static_assert(*std::max_element(test.begin(), test.end()) == 2, \"\");\n+static_assert(*std::max_element(test.begin(), test.end(),\n+\t\t\t\tstd::greater<int>()) == 1, \"\");"}, {"sha": "615b18c8b03b5d46b0817263f9a9356e039b1415", "filename": "libstdc++-v3/testsuite/25_algorithms/min/constexpr.cc", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dff34fe8e008344876bfc299203381000b5d6f7/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmin%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dff34fe8e008344876bfc299203381000b5d6f7/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmin%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmin%2Fconstexpr.cc?ref=8dff34fe8e008344876bfc299203381000b5d6f7", "patch": "@@ -0,0 +1,28 @@\n+// { dg-options \"-std=gnu++14\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <algorithm>\n+#include <functional>\n+\n+static_assert(std::min(2, 1) == 1, \"\");\n+static_assert(std::min(2, 1, std::greater<int>()) == 2, \"\");\n+static_assert(std::min({2, 1}) == 1, \"\");\n+static_assert(std::min({1, 2}, std::greater<int>())==2, \"\");\n+"}, {"sha": "376be83542d0c687066ab311266bd07a0b84b867", "filename": "libstdc++-v3/testsuite/25_algorithms/min_element/constexpr.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dff34fe8e008344876bfc299203381000b5d6f7/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmin_element%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dff34fe8e008344876bfc299203381000b5d6f7/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmin_element%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmin_element%2Fconstexpr.cc?ref=8dff34fe8e008344876bfc299203381000b5d6f7", "patch": "@@ -0,0 +1,29 @@\n+// { dg-options \"-std=gnu++14\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <algorithm>\n+#include <functional>\n+#include <utility>\n+\n+constexpr std::initializer_list<int> test{2, 1};\n+\n+static_assert(*std::min_element(test.begin(), test.end()) == 1, \"\");\n+static_assert(*std::min_element(test.begin(), test.end(),\n+\t\t\t\tstd::greater<int>()) == 2, \"\");"}, {"sha": "cd5d95ee713add22fab51c0111061ac6a844a8cc", "filename": "libstdc++-v3/testsuite/25_algorithms/minmax/constexpr.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dff34fe8e008344876bfc299203381000b5d6f7/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fminmax%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dff34fe8e008344876bfc299203381000b5d6f7/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fminmax%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fminmax%2Fconstexpr.cc?ref=8dff34fe8e008344876bfc299203381000b5d6f7", "patch": "@@ -0,0 +1,32 @@\n+// { dg-options \"-std=gnu++14\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <algorithm>\n+#include <functional>\n+#include <utility>\n+\n+static_assert(std::minmax(2, 1) ==\n+\t      std::pair<const int&, const int&>(1, 2), \"\");\n+static_assert(std::minmax(2, 1, std::greater<int>()) ==\n+\t      std::pair<const int&, const int&>(2, 1), \"\");\n+static_assert(std::minmax({2, 1}) ==\n+\t      std::pair<int, int>(1, 2), \"\");\n+static_assert(std::minmax({2, 1}, std::greater<int>())==\n+\t      std::pair<int, int>(2, 1), \"\");"}, {"sha": "9a79bc1259dfceb7f4a4faa4161f04741ebfe146", "filename": "libstdc++-v3/testsuite/25_algorithms/minmax_element/constexpr.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dff34fe8e008344876bfc299203381000b5d6f7/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fminmax_element%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dff34fe8e008344876bfc299203381000b5d6f7/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fminmax_element%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fminmax_element%2Fconstexpr.cc?ref=8dff34fe8e008344876bfc299203381000b5d6f7", "patch": "@@ -0,0 +1,33 @@\n+// { dg-options \"-std=gnu++14\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <algorithm>\n+#include <functional>\n+#include <utility>\n+\n+constexpr std::initializer_list<int> test{2, 1};\n+constexpr auto x = std::minmax_element(test.begin(), test.end());\n+constexpr auto y = std::minmax_element(test.begin(), test.end(),\n+\t\t\t\t       std::greater<int>());\n+static_assert(x.first == test.begin()+1, \"\");\n+static_assert(x.second == test.begin(), \"\");\n+static_assert(y.first == test.begin(), \"\");\n+static_assert(y.second == test.begin()+1, \"\");\n+"}, {"sha": "f89a1063f55cb8abdcf5539db16fe900eaba1009", "filename": "libstdc++-v3/testsuite/ext/profile/mutex_extensions_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dff34fe8e008344876bfc299203381000b5d6f7/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fprofile%2Fmutex_extensions_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dff34fe8e008344876bfc299203381000b5d6f7/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fprofile%2Fmutex_extensions_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fprofile%2Fmutex_extensions_neg.cc?ref=8dff34fe8e008344876bfc299203381000b5d6f7", "patch": "@@ -25,4 +25,4 @@\n \n #include <vector>\n \n-// { dg-error \"multiple inlined namespaces\" \"\" { target *-*-* } 310 }\n+// { dg-error \"multiple inlined namespaces\" \"\" { target *-*-* } 318 }"}]}