{"sha": "50856ddba4689710dd53865e96cc7da9885b7b51", "node_id": "C_kwDOANBUbNoAKDUwODU2ZGRiYTQ2ODk3MTBkZDUzODY1ZTk2Y2M3ZGE5ODg1YjdiNTE", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2023-01-27T18:28:06Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2023-02-05T00:10:48Z"}, "message": "gccrs: Refactor handle_substitutions to take a reference\n\nThis patch changes the recusive substitution code to take a reference\ninstead of a copy. This is important as the callback field is going to be\nmade non-copyable in a future patch and this pipeline is for recursive\nsubstitutions so its ok to reuse the same mappings here.\n\nSigned-off-by: Philip Herron <herron.philip@googlemail.com>\n\ngcc/rust/ChangeLog:\n\n\t* typecheck/rust-tyty-bounds.cc: refactor to take a reference\n\t* typecheck/rust-tyty-subst.cc: likewise\n\t(SubstitutionRef::get_substitution_arguments): likewise\n\t(SubstitutionRef::infer_substitions): likewise\n\t* typecheck/rust-tyty-subst.h: likewise\n\t* typecheck/rust-tyty.cc (ADTType::handle_substitions): likewise\n\t(TupleType::handle_substitions): likewise\n\t(FnType::handle_substitions): likewise\n\t(ClosureType::handle_substitions): likewise\n\t(ArrayType::handle_substitions): likewise\n\t(SliceType::handle_substitions): likewise\n\t(ReferenceType::handle_substitions): likewise\n\t(PointerType::handle_substitions): likewise\n\t(ParamType::handle_substitions): likewise\n\t(ProjectionType::handle_substitions): likewise\n\t* typecheck/rust-tyty.h: likewise", "tree": {"sha": "aa526c7db7997bd14ace13ea00d60b4875fb49e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa526c7db7997bd14ace13ea00d60b4875fb49e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50856ddba4689710dd53865e96cc7da9885b7b51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50856ddba4689710dd53865e96cc7da9885b7b51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50856ddba4689710dd53865e96cc7da9885b7b51", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50856ddba4689710dd53865e96cc7da9885b7b51/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82d0550253b5524f0e612c4b576bf5889bbd2bb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82d0550253b5524f0e612c4b576bf5889bbd2bb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82d0550253b5524f0e612c4b576bf5889bbd2bb5"}], "stats": {"total": 60, "additions": 34, "deletions": 26}, "files": [{"sha": "414111c7ba783a9775f49ea21e93cf874227b9e3", "filename": "gcc/rust/typecheck/rust-tyty-bounds.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50856ddba4689710dd53865e96cc7da9885b7b51/gcc%2Frust%2Ftypecheck%2Frust-tyty-bounds.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50856ddba4689710dd53865e96cc7da9885b7b51/gcc%2Frust%2Ftypecheck%2Frust-tyty-bounds.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-bounds.cc?ref=50856ddba4689710dd53865e96cc7da9885b7b51", "patch": "@@ -444,7 +444,7 @@ TypeBoundPredicate::is_error () const\n \n BaseType *\n TypeBoundPredicate::handle_substitions (\n-  SubstitutionArgumentMappings subst_mappings)\n+  SubstitutionArgumentMappings &subst_mappings)\n {\n   for (auto &sub : get_substs ())\n     {"}, {"sha": "a5d738744fcbf41f7c2146a8acc933841e1e60b2", "filename": "gcc/rust/typecheck/rust-tyty-subst.cc", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50856ddba4689710dd53865e96cc7da9885b7b51/gcc%2Frust%2Ftypecheck%2Frust-tyty-subst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50856ddba4689710dd53865e96cc7da9885b7b51/gcc%2Frust%2Ftypecheck%2Frust-tyty-subst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-subst.cc?ref=50856ddba4689710dd53865e96cc7da9885b7b51", "patch": "@@ -488,7 +488,13 @@ SubstitutionRef::was_substituted () const\n   return !needs_substitution ();\n }\n \n-SubstitutionArgumentMappings\n+SubstitutionArgumentMappings &\n+SubstitutionRef::get_substitution_arguments ()\n+{\n+  return used_arguments;\n+}\n+\n+const SubstitutionArgumentMappings &\n SubstitutionRef::get_substitution_arguments () const\n {\n   return used_arguments;\n@@ -697,7 +703,7 @@ SubstitutionRef::infer_substitions (Location locus)\n   SubstitutionArgumentMappings infer_arguments (std::move (args),\n \t\t\t\t\t\t{} /* binding_arguments */,\n \t\t\t\t\t\tlocus);\n-  return handle_substitions (std::move (infer_arguments));\n+  return handle_substitions (infer_arguments);\n }\n \n SubstitutionArgumentMappings"}, {"sha": "039eb36589ecbb2734456ec89de1a5eb5ab9ce77", "filename": "gcc/rust/typecheck/rust-tyty-subst.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50856ddba4689710dd53865e96cc7da9885b7b51/gcc%2Frust%2Ftypecheck%2Frust-tyty-subst.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50856ddba4689710dd53865e96cc7da9885b7b51/gcc%2Frust%2Ftypecheck%2Frust-tyty-subst.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-subst.h?ref=50856ddba4689710dd53865e96cc7da9885b7b51", "patch": "@@ -199,7 +199,8 @@ class SubstitutionRef\n \n   bool was_substituted () const;\n \n-  SubstitutionArgumentMappings get_substitution_arguments () const;\n+  SubstitutionArgumentMappings &get_substitution_arguments ();\n+  const SubstitutionArgumentMappings &get_substitution_arguments () const;\n \n   // this is the count of type params that are not substituted fuly\n   size_t num_required_substitutions () const;\n@@ -301,7 +302,7 @@ class SubstitutionRef\n   bool monomorphize ();\n \n   // TODO comment\n-  virtual BaseType *handle_substitions (SubstitutionArgumentMappings mappings)\n+  virtual BaseType *handle_substitions (SubstitutionArgumentMappings &mappings)\n     = 0;\n \n   SubstitutionArgumentMappings get_used_arguments () const;"}, {"sha": "3a642b69b473d606c6e711064a6ff17fb1a4755a", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50856ddba4689710dd53865e96cc7da9885b7b51/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50856ddba4689710dd53865e96cc7da9885b7b51/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=50856ddba4689710dd53865e96cc7da9885b7b51", "patch": "@@ -1148,7 +1148,7 @@ handle_substitions (SubstitutionArgumentMappings &subst_mappings,\n }\n \n ADTType *\n-ADTType::handle_substitions (SubstitutionArgumentMappings subst_mappings)\n+ADTType::handle_substitions (SubstitutionArgumentMappings &subst_mappings)\n {\n   ADTType *adt = static_cast<ADTType *> (clone ());\n   adt->set_ty_ref (mappings->get_next_hir_id ());\n@@ -1333,7 +1333,7 @@ TupleType::monomorphized_clone () const\n }\n \n TupleType *\n-TupleType::handle_substitions (SubstitutionArgumentMappings mappings)\n+TupleType::handle_substitions (SubstitutionArgumentMappings &mappings)\n {\n   auto mappings_table = Analysis::Mappings::get ();\n \n@@ -1474,7 +1474,7 @@ FnType::monomorphized_clone () const\n }\n \n FnType *\n-FnType::handle_substitions (SubstitutionArgumentMappings subst_mappings)\n+FnType::handle_substitions (SubstitutionArgumentMappings &subst_mappings)\n {\n   FnType *fn = static_cast<FnType *> (clone ());\n   fn->set_ty_ref (mappings->get_next_hir_id ());\n@@ -1742,7 +1742,7 @@ ClosureType::monomorphized_clone () const\n }\n \n ClosureType *\n-ClosureType::handle_substitions (SubstitutionArgumentMappings mappings)\n+ClosureType::handle_substitions (SubstitutionArgumentMappings &mappings)\n {\n   gcc_unreachable ();\n   return nullptr;\n@@ -1862,7 +1862,7 @@ ArrayType::monomorphized_clone () const\n }\n \n ArrayType *\n-ArrayType::handle_substitions (SubstitutionArgumentMappings mappings)\n+ArrayType::handle_substitions (SubstitutionArgumentMappings &mappings)\n {\n   auto mappings_table = Analysis::Mappings::get ();\n \n@@ -1945,7 +1945,7 @@ SliceType::monomorphized_clone () const\n }\n \n SliceType *\n-SliceType::handle_substitions (SubstitutionArgumentMappings mappings)\n+SliceType::handle_substitions (SubstitutionArgumentMappings &mappings)\n {\n   auto mappings_table = Analysis::Mappings::get ();\n \n@@ -2704,7 +2704,7 @@ ReferenceType::monomorphized_clone () const\n }\n \n ReferenceType *\n-ReferenceType::handle_substitions (SubstitutionArgumentMappings mappings)\n+ReferenceType::handle_substitions (SubstitutionArgumentMappings &mappings)\n {\n   auto mappings_table = Analysis::Mappings::get ();\n \n@@ -2870,7 +2870,7 @@ PointerType::monomorphized_clone () const\n }\n \n PointerType *\n-PointerType::handle_substitions (SubstitutionArgumentMappings mappings)\n+PointerType::handle_substitions (SubstitutionArgumentMappings &mappings)\n {\n   auto mappings_table = Analysis::Mappings::get ();\n \n@@ -3047,7 +3047,7 @@ ParamType::is_equal (const BaseType &other) const\n }\n \n ParamType *\n-ParamType::handle_substitions (SubstitutionArgumentMappings subst_mappings)\n+ParamType::handle_substitions (SubstitutionArgumentMappings &subst_mappings)\n {\n   SubstitutionArg arg = SubstitutionArg::error ();\n   bool ok = subst_mappings.get_argument_for_symbol (this, &arg);\n@@ -3492,7 +3492,8 @@ ProjectionType::monomorphized_clone () const\n }\n \n ProjectionType *\n-ProjectionType::handle_substitions (SubstitutionArgumentMappings subst_mappings)\n+ProjectionType::handle_substitions (\n+  SubstitutionArgumentMappings &subst_mappings)\n {\n   // // do we really need to substitute this?\n   // if (base->needs_generic_substitutions () || base->contains_type_parameters"}, {"sha": "900b64d1c4cba9857032da35419a5b5c164b6e4b", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50856ddba4689710dd53865e96cc7da9885b7b51/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50856ddba4689710dd53865e96cc7da9885b7b51/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=50856ddba4689710dd53865e96cc7da9885b7b51", "patch": "@@ -304,7 +304,7 @@ class ParamType : public BaseType\n \n   bool is_concrete () const override final;\n \n-  ParamType *handle_substitions (SubstitutionArgumentMappings mappings);\n+  ParamType *handle_substitions (SubstitutionArgumentMappings &mappings);\n \n private:\n   std::string symbol;\n@@ -379,7 +379,7 @@ class TupleType : public BaseType\n \n   std::string get_name () const override final;\n \n-  TupleType *handle_substitions (SubstitutionArgumentMappings mappings);\n+  TupleType *handle_substitions (SubstitutionArgumentMappings &mappings);\n \n private:\n   std::vector<TyVar> fields;\n@@ -427,7 +427,7 @@ class TypeBoundPredicate : public SubstitutionRef\n \n   // WARNING THIS WILL ALWAYS RETURN NULLPTR\n   BaseType *\n-  handle_substitions (SubstitutionArgumentMappings mappings) override final;\n+  handle_substitions (SubstitutionArgumentMappings &mappings) override final;\n \n   bool is_error () const;\n \n@@ -682,7 +682,7 @@ class ADTType : public BaseType, public SubstitutionRef\n   }\n \n   ADTType *\n-  handle_substitions (SubstitutionArgumentMappings mappings) override final;\n+  handle_substitions (SubstitutionArgumentMappings &mappings) override final;\n \n private:\n   std::string identifier;\n@@ -815,7 +815,7 @@ class FnType : public BaseType, public SubstitutionRef\n   }\n \n   FnType *\n-  handle_substitions (SubstitutionArgumentMappings mappings) override final;\n+  handle_substitions (SubstitutionArgumentMappings &mappings) override final;\n \n   ABI get_abi () const { return abi; }\n \n@@ -965,7 +965,7 @@ class ClosureType : public BaseType, public SubstitutionRef\n   }\n \n   ClosureType *\n-  handle_substitions (SubstitutionArgumentMappings mappings) override final;\n+  handle_substitions (SubstitutionArgumentMappings &mappings) override final;\n \n   TyTy::TupleType &get_parameters () const { return *parameters; }\n   TyTy::BaseType &get_result_type () const { return *result_type.get_tyty (); }\n@@ -1024,7 +1024,7 @@ class ArrayType : public BaseType\n \n   HIR::Expr &get_capacity_expr () const { return capacity_expr; }\n \n-  ArrayType *handle_substitions (SubstitutionArgumentMappings mappings);\n+  ArrayType *handle_substitions (SubstitutionArgumentMappings &mappings);\n \n private:\n   TyVar element_type;\n@@ -1070,7 +1070,7 @@ class SliceType : public BaseType\n     return get_element_type ()->is_concrete ();\n   }\n \n-  SliceType *handle_substitions (SubstitutionArgumentMappings mappings);\n+  SliceType *handle_substitions (SubstitutionArgumentMappings &mappings);\n \n private:\n   TyVar element_type;\n@@ -1321,7 +1321,7 @@ class ReferenceType : public BaseType\n \n   bool is_concrete () const override final;\n \n-  ReferenceType *handle_substitions (SubstitutionArgumentMappings mappings);\n+  ReferenceType *handle_substitions (SubstitutionArgumentMappings &mappings);\n \n   Mutability mutability () const;\n \n@@ -1364,7 +1364,7 @@ class PointerType : public BaseType\n \n   bool is_concrete () const override final;\n \n-  PointerType *handle_substitions (SubstitutionArgumentMappings mappings);\n+  PointerType *handle_substitions (SubstitutionArgumentMappings &mappings);\n \n   Mutability mutability () const;\n   bool is_mutable () const;\n@@ -1500,7 +1500,7 @@ class ProjectionType : public BaseType, public SubstitutionRef\n   bool is_concrete () const override final;\n \n   ProjectionType *\n-  handle_substitions (SubstitutionArgumentMappings mappings) override final;\n+  handle_substitions (SubstitutionArgumentMappings &mappings) override final;\n \n private:\n   BaseType *base;"}]}