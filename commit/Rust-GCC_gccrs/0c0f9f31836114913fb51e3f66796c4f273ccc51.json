{"sha": "0c0f9f31836114913fb51e3f66796c4f273ccc51", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGMwZjlmMzE4MzYxMTQ5MTNmYjUxZTNmNjY3OTZjNGYyNzNjY2M1MQ==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2015-03-24T02:48:05Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2015-03-24T02:48:05Z"}, "message": "extend.texi (Function Attributes): Add @cindex entries for all attributes and regularize their format.\n\n2015-03-23  Sandra Loosemore  <sandra@codesourcery.com>\n\n\tgcc/\n\t* doc/extend.texi (Function Attributes): Add @cindex entries\n\tfor all attributes and regularize their format.  Delete text\n\tabout long-obsolete 68HC11 and 68HC12 targets.  Move misplaced\n\tinformation about \"eightbit_data\", \"tiny_data\", and \"model\"\n\tvariable attributes to the Variable Attributes section.  Fix\n\tsome obvious typos and copy-editing issues.\n\t(Variable Attributes, Type Attributes): Likewise add/fix\n\t@cindex entries for all attributes.\n\nFrom-SVN: r221614", "tree": {"sha": "b3e1ce631d2f50608322c48ec1b4764783e156b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3e1ce631d2f50608322c48ec1b4764783e156b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c0f9f31836114913fb51e3f66796c4f273ccc51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c0f9f31836114913fb51e3f66796c4f273ccc51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c0f9f31836114913fb51e3f66796c4f273ccc51", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c0f9f31836114913fb51e3f66796c4f273ccc51/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "974a5e9fcc242e85b027aef2b319a535d8e1edaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/974a5e9fcc242e85b027aef2b319a535d8e1edaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/974a5e9fcc242e85b027aef2b319a535d8e1edaf"}], "stats": {"total": 564, "additions": 342, "deletions": 222}, "files": [{"sha": "fd75d24494e98a7e6ac5e7281d0e579824b432bc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c0f9f31836114913fb51e3f66796c4f273ccc51/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c0f9f31836114913fb51e3f66796c4f273ccc51/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0c0f9f31836114913fb51e3f66796c4f273ccc51", "patch": "@@ -1,3 +1,14 @@\n+2015-03-23  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* doc/extend.texi (Function Attributes): Add @cindex entries\n+\tfor all attributes and regularize their format.  Delete text\n+\tabout long-obsolete 68HC11 and 68HC12 targets.  Move misplaced\n+\tinformation about \"eightbit_data\", \"tiny_data\", and \"model\"\n+\tvariable attributes to the Variable Attributes section.  Fix\n+\tsome obvious typos and copy-editing issues.\n+\t(Variable Attributes, Type Attributes): Likewise add/fix\n+\t@cindex entries for all attributes.\n+\n 2015-03-23  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/65523"}, {"sha": "50815d1bf40196ea4b3fbc7c5e67846df164a242", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 331, "deletions": 222, "changes": 553, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c0f9f31836114913fb51e3f66796c4f273ccc51/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c0f9f31836114913fb51e3f66796c4f273ccc51/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=0c0f9f31836114913fb51e3f66796c4f273ccc51", "patch": "@@ -2208,7 +2208,7 @@ attributes.\n @c Keep this table alphabetized by attribute name.  Treat _ as space.\n \n @item alias (\"@var{target}\")\n-@cindex @code{alias} attribute\n+@cindex @code{alias} function attribute\n The @code{alias} attribute causes the declaration to be emitted as an\n alias for another symbol, which must be specified.  For instance,\n \n@@ -2225,7 +2225,7 @@ is not defined in the same translation unit.\n Not all target machines support this attribute.\n \n @item aligned (@var{alignment})\n-@cindex @code{aligned} attribute\n+@cindex @code{aligned} function attribute\n This attribute specifies a minimum alignment for the function,\n measured in bytes.\n \n@@ -2246,7 +2246,7 @@ The @code{aligned} attribute can also be used for variables and fields\n (@pxref{Variable Attributes}.)\n \n @item alloc_size\n-@cindex @code{alloc_size} attribute\n+@cindex @code{alloc_size} function attribute\n The @code{alloc_size} attribute is used to tell the compiler that the\n function return value points to memory, where the size is given by\n one or two of the functions parameters.  GCC uses this\n@@ -2271,7 +2271,7 @@ the product of parameter 1 and 2 and that @code{my_realloc} returns memory\n of the size given by parameter 2.\n \n @item alloc_align\n-@cindex @code{alloc_align} attribute\n+@cindex @code{alloc_align} function attribute\n The @code{alloc_align} attribute is used to tell the compiler that the\n function return value points to memory, where the returned pointer minimum\n alignment is given by one of the functions parameters.  GCC uses this\n@@ -2292,7 +2292,7 @@ declares that @code{my_memalign} returns memory with minimum alignment\n given by parameter 1.\n \n @item assume_aligned\n-@cindex @code{assume_aligned} attribute\n+@cindex @code{assume_aligned} function attribute\n The @code{assume_aligned} attribute is used to tell the compiler that the\n function return value points to memory, where the returned pointer minimum\n alignment is given by the first argument.\n@@ -2367,7 +2367,7 @@ or using the caller location for all instructions within the inlined\n body.\n \n @item bank_switch\n-@cindex interrupt handler functions\n+@cindex @code{bank_switch} function attribute, M32C\n When added to an interrupt handler with the M32C port, causes the\n prologue and epilogue to use bank switching to preserve the registers\n rather than saving them on the stack.\n@@ -2404,6 +2404,7 @@ is diagnosed earlier and with exact location of the call even in presence\n of inline functions or when not emitting debugging information.\n \n @item cdecl\n+@cindex @code{cdecl} function attribute, x86-32\n @cindex functions that do pop the argument stack on x86-32\n @opindex mrtd\n On the x86-32 targets, the @code{cdecl} attribute causes the compiler to\n@@ -2453,7 +2454,7 @@ These attributes are not currently implemented for Objective-C@.\n \n @item deprecated\n @itemx deprecated (@var{msg})\n-@cindex @code{deprecated} attribute.\n+@cindex @code{deprecated} function attribute\n The @code{deprecated} attribute results in a warning if the function\n is used anywhere in the source file.  This is useful when identifying\n functions that are expected to be removed in a future version of a\n@@ -2477,12 +2478,14 @@ The @code{deprecated} attribute can also be used for variables and\n types (@pxref{Variable Attributes}, @pxref{Type Attributes}.)\n \n @item disinterrupt\n-@cindex @code{disinterrupt} attribute\n+@cindex @code{disinterrupt} function attribute, Epiphany\n+@cindex @code{disinterrupt} function attribute, MeP\n On Epiphany and MeP targets, this attribute causes the compiler to emit\n instructions to disable interrupts for the duration of the given\n function.\n \n @item dllexport\n+@cindex @code{dllexport} function attribute\n @cindex @code{__declspec(dllexport)}\n On Microsoft Windows targets and Symbian OS targets the\n @code{dllexport} attribute causes the compiler to provide a global\n@@ -2518,6 +2521,7 @@ including the symbol in the DLL's export table such as using a\n the @option{--export-all} linker flag.\n \n @item dllimport\n+@cindex @code{dllimport} function attribute\n @cindex @code{__declspec(dllimport)}\n On Microsoft Windows and Symbian OS targets, the @code{dllimport}\n attribute causes the compiler to reference a function or variable via\n@@ -2570,32 +2574,23 @@ this case, the address of a stub function in the import lib is\n referenced.  On Microsoft Windows targets, the attribute can be disabled\n for functions by setting the @option{-mnop-fun-dllimport} flag.\n \n-@item eightbit_data\n-@cindex eight-bit data on the H8/300, H8/300H, and H8S\n-Use this attribute on the H8/300, H8/300H, and H8S to indicate that the specified\n-variable should be placed into the eight-bit data section.\n-The compiler generates more efficient code for certain operations\n-on data in the eight-bit data area.  Note the eight-bit data area is limited to\n-256 bytes of data.\n-\n-You must use GAS and GLD from GNU binutils version 2.7 or later for\n-this attribute to work correctly.\n-\n @item exception\n-@cindex exception handler functions\n+@cindex @code{exception} function attribute\n+@cindex exception handler functions, NDS32\n Use this attribute on the NDS32 target to indicate that the specified function\n is an exception handler.  The compiler will generate corresponding sections\n for use in an exception handler.\n \n @item exception_handler\n-@cindex exception handler functions on the Blackfin processor\n+@cindex @code{exception_handler} function attribute\n+@cindex exception handler functions, Blackfin\n Use this attribute on the Blackfin to indicate that the specified function\n is an exception handler.  The compiler generates function entry and\n exit sequences suitable for use in an exception handler when this\n attribute is present.\n \n @item externally_visible\n-@cindex @code{externally_visible} attribute.\n+@cindex @code{externally_visible} function attribute\n This attribute, attached to a global variable or function, nullifies\n the effect of the @option{-fwhole-program} command-line option, so the\n object remains visible outside the current compilation unit.\n@@ -2610,34 +2605,22 @@ For other linkers that cannot generate resolution file,\n explicit @code{externally_visible} attributes are still necessary.\n \n @item far\n-@cindex functions that handle memory bank switching\n-On 68HC11 and 68HC12 the @code{far} attribute causes the compiler to\n-use a calling convention that takes care of switching memory banks when\n-entering and leaving a function.  This calling convention is also the\n-default when using the @option{-mlong-calls} option.\n-\n-On 68HC12 the compiler uses the @code{call} and @code{rtc} instructions\n-to call and return from a function.\n-\n-On 68HC11 the compiler generates a sequence of instructions\n-to invoke a board-specific routine to switch the memory bank and call the\n-real function.  The board-specific routine simulates a @code{call}.\n-At the end of a function, it jumps to a board-specific routine\n-instead of using @code{rts}.  The board-specific return routine simulates\n-the @code{rtc}.\n+@cindex @code{far} function attribute\n \n On MeP targets this causes the compiler to use a calling convention\n that assumes the called function is too far away for the built-in\n addressing modes.\n \n @item fast_interrupt\n-@cindex interrupt handler functions\n+@cindex @code{fast_interrupt} function attribute, M32C\n+@cindex @code{fast_interrupt} function attribute, RX\n Use this attribute on the M32C and RX ports to indicate that the specified\n function is a fast interrupt handler.  This is just like the\n @code{interrupt} attribute, except that @code{freit} is used to return\n instead of @code{reit}.\n \n @item fastcall\n+@cindex @code{fastcall} function attribute, x86-32\n @cindex functions that pop the argument stack on x86-32\n On x86-32 targets, the @code{fastcall} attribute causes the compiler to\n pass the first argument (if of integral type) in the register ECX and\n@@ -2647,6 +2630,7 @@ pops the arguments off the stack.  If the number of arguments is variable all\n arguments are pushed on the stack.\n \n @item thiscall\n+@cindex @code{thiscall} function attribute, x86-32\n @cindex functions that pop the argument stack on x86-32\n On x86-32 targets, the @code{thiscall} attribute causes the compiler to\n pass the first argument (if of integral type) in the register ECX.\n@@ -2788,6 +2772,9 @@ The target may also allow additional types in @code{format-arg} attributes.\n Target Machines}.\n \n @item function_vector\n+@cindex @code{function_vector} function attribute, H8/300\n+@cindex @code{function_vector} function attribute, M16C/M32C\n+@cindex @code{function_vector} function attribute, SH\n @cindex calling functions through the function vector on H8/300, M16C, M32C and SH2A processors\n Use this attribute on the H8/300, H8/300H, and H8S to indicate that the specified\n function should be called through the function vector.  Calling a\n@@ -2849,7 +2836,7 @@ then be sure to write this declaration in both files.\n This attribute is ignored for R8C target.\n \n @item ifunc (\"@var{resolver}\")\n-@cindex @code{ifunc} attribute\n+@cindex @code{ifunc} function attribute\n The @code{ifunc} attribute is used to mark a function as an indirect\n function using the STT_GNU_IFUNC symbol type extension to the ELF\n standard.  This allows the resolution of the symbol value to be\n@@ -2896,9 +2883,24 @@ Indirect functions cannot be weak.  Binutils version 2.20.1 or higher\n and GNU C Library version 2.11.1 are required to use this feature.\n \n @item interrupt\n-@cindex interrupt handler functions\n+@cindex @code{interrupt} function attribute, ARC\n+@cindex @code{interrupt} function attribute, ARM\n+@cindex @code{interrupt} function attribute, AVR\n+@cindex @code{interrupt} function attribute, CR16\n+@cindex @code{interrupt} function attribute, Epiphany\n+@cindex @code{interrupt} function attribute, M32C\n+@cindex @code{interrupt} function attribute, M32R/D\n+@cindex @code{interrupt} function attribute, m68k\n+@cindex @code{interrupt} function attribute, MeP\n+@cindex @code{interrupt} function attribute, MIPS\n+@cindex @code{interrupt} function attribute, MSP430\n+@cindex @code{interrupt} function attribute, NDS32\n+@cindex @code{interrupt} function attribute, RL78\n+@cindex @code{interrupt} function attribute, RX\n+@cindex @code{interrupt} function attribute, Visium\n+@cindex @code{interrupt} function attribute, Xstormy16\n Use this attribute on the ARC, ARM, AVR, CR16, Epiphany, M32C, M32R/D,\n-m68k, MeP, MIPS, MSP430, RL78, RX, Visium and Xstormy16 ports to indicate\n+m68k, MeP, MIPS, MSP430, NDS32, RL78, RX, Visium and Xstormy16 ports to indicate\n that the specified function is an interrupt handler.  The compiler generates\n function entry and exit sequences suitable for use in an interrupt handler\n when this attribute is present.  With Epiphany targets it may also generate\n@@ -2953,21 +2955,21 @@ normal functions interact with interrupt functions:\n \n @table @code\n @item critical\n-@cindex @code{critical} attribute\n+@cindex @code{critical} function attribute, MSP430\n Critical functions disable interrupts upon entry and restore the\n previous interrupt state upon exit.  Critical functions cannot also\n have the @code{naked} or @code{reentrant} attributes.  They can have\n the @code{interrupt} attribute.\n \n @item reentrant\n-@cindex @code{reentrant} attribute\n+@cindex @code{reentrant} function attribute, MSP430\n Reentrant functions disable interrupts upon entry and enable them\n upon exit.  Reentrant functions cannot also have the @code{naked}\n or @code{critical} attributes.  They can have the @code{interrupt}\n attribute.\n \n @item wakeup\n-@cindex @code{wakeup} attribute\n+@cindex @code{wakeup} function attribute, MSP430\n This attribute only applies to interrupt functions.  It is silently\n ignored if applied to a non-interrupt function.  A wakeup interrupt\n function will rouse the processor from any low-power state that it\n@@ -2998,7 +3000,7 @@ On Epiphany targets, you can also use the following attribute to\n modify the behavior of an interrupt handler:\n @table @code\n @item forwarder_section\n-@cindex @code{forwarder_section} attribute\n+@cindex @code{forwarder_section} function attribute, Epiphany\n The interrupt handler may be in external memory which cannot be\n reached by a branch instruction, so generate a local memory trampoline\n to transfer control.  The single parameter identifies the section where\n@@ -3021,17 +3023,17 @@ On MIPS targets, you can use the following attributes to modify the behavior\n of an interrupt handler:\n @table @code\n @item use_shadow_register_set\n-@cindex @code{use_shadow_register_set} attribute\n+@cindex @code{use_shadow_register_set} function attribute, MIPS\n Assume that the handler uses a shadow register set, instead of\n the main general-purpose registers.\n \n @item keep_interrupts_masked\n-@cindex @code{keep_interrupts_masked} attribute\n+@cindex @code{keep_interrupts_masked} function attribute, MIPS\n Keep interrupts masked for the whole function.  Without this attribute,\n GCC tries to reenable interrupts for as much of the function as it can.\n \n @item use_debug_exception_return\n-@cindex @code{use_debug_exception_return} attribute\n+@cindex @code{use_debug_exception_return} function attribute, MIPS\n Return using the @code{deret} instruction.  Interrupt handlers that don't\n have this attribute return using @code{eret} instead.\n @end table\n@@ -3053,32 +3055,33 @@ void __attribute__ ((interrupt, use_shadow_register_set,\n                      use_debug_exception_return)) v7 ();\n @end smallexample\n \n-On NDS32 target, this attribute is to indicate that the specified function\n-is an interrupt handler.  The compiler will generate corresponding sections\n+On NDS32 target, this attribute indicates that the specified function\n+is an interrupt handler.  The compiler generates corresponding sections\n for use in an interrupt handler.  You can use the following attributes\n to modify the behavior:\n @table @code\n @item nested\n-@cindex @code{nested} attribute\n+@cindex @code{nested} function attribute, NDS32\n This interrupt service routine is interruptible.\n @item not_nested\n-@cindex @code{not_nested} attribute\n+@cindex @code{not_nested} function attribute, NDS32\n This interrupt service routine is not interruptible.\n @item nested_ready\n-@cindex @code{nested_ready} attribute\n+@cindex @code{nested_ready} function attribute, NDS32\n This interrupt service routine is interruptible after @code{PSW.GIE}\n (global interrupt enable) is set.  This allows interrupt service routine to\n finish some short critical code before enabling interrupts.\n @item save_all\n-@cindex @code{save_all} attribute\n+@cindex @code{save_all} function attribute, NDS32\n The system will help save all registers into stack before entering\n interrupt handler.\n @item partial_save\n-@cindex @code{partial_save} attribute\n+@cindex @code{partial_save} function attribute, NDS32\n The system will help save caller registers into stack before entering\n interrupt handler.\n @end table\n \n+@cindex @code{brk_interrupt} function attribute, RL78\n On RL78, use @code{brk_interrupt} instead of @code{interrupt} for\n handlers intended to be used with the @code{BRK} opcode (i.e.@: those\n that must end with @code{RETB} instead of @code{RETI}).\n@@ -3106,40 +3109,44 @@ void __attribute__ ((interrupt (RXD1_VECT,RXD2_VECT,\"dct\",\"$default\")))\n @end smallexample\n \n @item interrupt_handler\n-@cindex interrupt handler functions on the Blackfin, m68k, H8/300 and SH processors\n+@cindex @code{interrupt_handler} function attribute, Blackfin\n+@cindex @code{interrupt_handler} function attribute, m68k\n+@cindex @code{interrupt_handler} function attribute, H8/300\n+@cindex @code{interrupt_handler} function attribute, SH\n Use this attribute on the Blackfin, m68k, H8/300, H8/300H, H8S, and SH to\n indicate that the specified function is an interrupt handler.  The compiler\n generates function entry and exit sequences suitable for use in an\n interrupt handler when this attribute is present.\n \n @item interrupt_thread\n-@cindex interrupt thread functions on fido\n+@cindex @code{interrupt_thread} function attribute, fido\n Use this attribute on fido, a subarchitecture of the m68k, to indicate\n that the specified function is an interrupt handler that is designed\n to run as a thread.  The compiler omits generate prologue/epilogue\n sequences and replaces the return instruction with a @code{sleep}\n instruction.  This attribute is available only on fido.\n \n @item isr\n-@cindex interrupt service routines on ARM\n+@cindex @code{isr} function attribute, ARM\n Use this attribute on ARM to write Interrupt Service Routines. This is an\n alias to the @code{interrupt} attribute above.\n \n @item kspisusp\n+@cindex @code{kspisusp} function attribute, Blackfin\n @cindex User stack pointer in interrupts on the Blackfin\n When used together with @code{interrupt_handler}, @code{exception_handler}\n or @code{nmi_handler}, code is generated to load the stack pointer\n from the USP register in the function prologue.\n \n @item l1_text\n-@cindex @code{l1_text} function attribute\n+@cindex @code{l1_text} function attribute, Blackfin\n This attribute specifies a function to be placed into L1 Instruction\n SRAM@. The function is put into a specific section named @code{.l1.text}.\n With @option{-mfdpic}, function calls with a such function as the callee\n or caller uses inlined PLT.\n \n @item l2\n-@cindex @code{l2} function attribute\n+@cindex @code{l2} function attribute, Blackfin\n On the Blackfin, this attribute specifies a function to be placed into L2\n SRAM. The function is put into a specific section named\n @code{.l1.text}. With @option{-mfdpic}, callers of such functions use\n@@ -3170,10 +3177,19 @@ unit.  This is to allow easy merging of multiple compilation units into one,\n for example, by using the link-time optimization.  For this reason the\n attribute is not allowed on types to annotate indirect calls.\n \n-@item long_call/medium_call/short_call\n-@cindex indirect calls on ARC\n-@cindex indirect calls on ARM\n-@cindex indirect calls on Epiphany\n+@item long_call\n+@itemx medium_call\n+@itemx short_call\n+@cindex @code{long_call} function attribute, ARC\n+@cindex @code{long_call} function attribute, ARM\n+@cindex @code{long_call} function attribute, Epiphany\n+@cindex @code{medium_call} function attribute, ARC\n+@cindex @code{short_call} function attribute, ARC\n+@cindex @code{short_call} function attribute, ARM\n+@cindex @code{short_call} function attribute, Epiphany\n+@cindex indirect calls, ARC\n+@cindex indirect calls, ARM\n+@cindex indirect calls, Epiphany\n These attributes specify how a particular function is called on\n ARC, ARM and Epiphany - with @code{medium_call} being specific to ARC.\n These attributes override the\n@@ -3197,9 +3213,15 @@ attribute will always be close enough to be called with a conditional\n branch-and-link instruction, which has a 21-bit offset from\n the call site.\n \n-@item longcall/shortcall\n-@cindex functions called via pointer on the RS/6000 and PowerPC\n-On the Blackfin, RS/6000 and PowerPC, the @code{longcall} attribute\n+@item longcall\n+@itemx shortcall\n+@cindex indirect calls, Blackfin\n+@cindex indirect calls, PowerPC\n+@cindex @code{longcall} function attribute, Blackfin\n+@cindex @code{longcall} function attribute, PowerPC\n+@cindex @code{shortcall} function attribute, Blackfin\n+@cindex @code{shortcall} function attribute, PowerPC\n+On Blackfin and PowerPC, the @code{longcall} attribute\n indicates that the function might be far away from the call site and\n require a different (more expensive) calling sequence.  The\n @code{shortcall} attribute indicates that the function is always close\n@@ -3210,8 +3232,13 @@ PowerPC, the @code{#pragma longcall} setting.\n @xref{RS/6000 and PowerPC Options}, for more information on whether long\n calls are necessary.\n \n-@item long_call/near/far\n-@cindex indirect calls on MIPS\n+@item long_call\n+@itemx near\n+@itemx far\n+@cindex indirect calls, MIPS\n+@cindex @code{long_call} function attribute, MIPS\n+@cindex @code{near} function attribute, MIPS\n+@cindex @code{far} function attribute, MIPS\n These attributes specify how a particular function is called on MIPS@.\n The attributes override the @option{-mlong-calls} (@pxref{MIPS Options})\n command-line switch.  The @code{long_call} and @code{far} attributes are\n@@ -3222,7 +3249,7 @@ effect; it specifies that non-PIC calls should be made using the more\n efficient @code{jal} instruction.\n \n @item malloc\n-@cindex @code{malloc} attribute\n+@cindex @code{malloc} function attribute\n This tells the compiler that a function is @code{malloc}-like, i.e.,\n that the pointer @var{P} returned by the function cannot alias any\n other pointer valid when the function returns, and moreover no\n@@ -3234,9 +3261,10 @@ a pointer to uninitialized or zeroed-out storage.  However, functions\n like @code{realloc} do not have this property, as they can return a\n pointer to storage containing pointers.\n \n-@item mips16/nomips16\n-@cindex @code{mips16} attribute\n-@cindex @code{nomips16} attribute\n+@item mips16\n+@itemx nomips16\n+@cindex @code{mips16} function attribute, MIPS\n+@cindex @code{nomips16} function attribute, MIPS\n \n On MIPS targets, you can use the @code{mips16} and @code{nomips16}\n function attributes to locally select or turn off MIPS16 code generation.\n@@ -3252,9 +3280,10 @@ not that within individual functions.  Mixed MIPS16 and non-MIPS16 code\n may interact badly with some GCC extensions such as @code{__builtin_apply}\n (@pxref{Constructing Calls}).\n \n-@item micromips/nomicromips\n-@cindex @code{micromips} attribute\n-@cindex @code{nomicromips} attribute\n+@item micromips, MIPS\n+@itemx nomicromips, MIPS\n+@cindex @code{micromips} function attribute\n+@cindex @code{nomicromips} function attribute\n \n On MIPS targets, you can use the @code{micromips} and @code{nomicromips}\n function attributes to locally select or turn off microMIPS code generation.\n@@ -3272,8 +3301,8 @@ may interact badly with some GCC extensions such as @code{__builtin_apply}\n (@pxref{Constructing Calls}).\n \n @item model (@var{model-name})\n+@cindex @code{model} function attribute, M32R/D\n @cindex function addressability on the M32R/D\n-@cindex variable addressability on the IA-64\n \n On the M32R/D, use this attribute to set the addressability of an\n object, and of the code generated for a function.  The identifier\n@@ -3293,17 +3322,10 @@ compiler generates @code{seth/add3} instructions to load their addresses),\n and may not be reachable with the @code{bl} instruction (the compiler\n generates the much slower @code{seth/add3/jl} instruction sequence).\n \n-On IA-64, use this attribute to set the addressability of an object.\n-At present, the only supported identifier for @var{model-name} is\n-@code{small}, indicating addressability via ``small'' (22-bit)\n-addresses (so that their addresses can be loaded with the @code{addl}\n-instruction).  Caveat: such addressing is by definition not position\n-independent and hence this attribute must not be used for objects\n-defined by shared libraries.\n-\n-@item ms_abi/sysv_abi\n-@cindex @code{ms_abi} attribute\n-@cindex @code{sysv_abi} attribute\n+@item ms_abi\n+@itemx sysv_abi\n+@cindex @code{ms_abi} function attribute, x86\n+@cindex @code{sysv_abi} function attribute, x86\n \n On 32-bit and 64-bit x86 targets, you can use an ABI attribute\n to indicate which calling convention should be used for a function.  The\n@@ -3316,7 +3338,7 @@ Note, the @code{ms_abi} attribute for Microsoft Windows 64-bit targets currently\n requires the @option{-maccumulate-outgoing-args} option.\n \n @item callee_pop_aggregate_return (@var{number})\n-@cindex @code{callee_pop_aggregate_return} attribute\n+@cindex @code{callee_pop_aggregate_return} function attribute, x86\n \n On x86-32 targets, you can use this attribute to control how\n aggregates are returned in memory.  If the caller is responsible for\n@@ -3330,15 +3352,15 @@ the compiler assumes that the\n caller pops the stack for hidden pointer.\n \n @item ms_hook_prologue\n-@cindex @code{ms_hook_prologue} attribute\n+@cindex @code{ms_hook_prologue} function attribute, x86\n \n On 32-bit and 64-bit x86 targets, you can use\n this function attribute to make GCC generate the ``hot-patching'' function\n prologue used in Win32 API functions in Microsoft Windows XP Service Pack 2\n and newer.\n \n @item hotpatch (@var{halfwords-before-function-label},@var{halfwords-after-function-label})\n-@cindex @code{hotpatch} attribute\n+@cindex @code{hotpatch} function attribute, S/390\n \n On S/390 System z targets, you can use this function attribute to\n make GCC generate a ``hot-patching'' function prologue.  If the\n@@ -3352,7 +3374,15 @@ both arguments the maximum allowed value is 1000000.\n If both arguments are zero, hotpatching is disabled.\n \n @item naked\n-@cindex function without a prologue/epilogue code\n+@cindex @code{naked} function attribute, ARM\n+@cindex @code{naked} function attribute, AVR\n+@cindex @code{naked} function attribute, MCORE\n+@cindex @code{naked} function attribute, MSP430\n+@cindex @code{naked} function attribute, NDS32\n+@cindex @code{naked} function attribute, RL78\n+@cindex @code{naked} function attribute, RX\n+@cindex @code{naked} function attribute, SPU\n+@cindex function without prologue/epilogue code\n This attribute is available on the ARM, AVR, MCORE, MSP430, NDS32,\n RL78, RX and SPU ports.  It allows the compiler to construct the\n requisite function declaration, while allowing the body of the\n@@ -3364,31 +3394,29 @@ basic @code{asm} and C code may appear to work, they cannot be\n depended upon to work reliably and are not supported.\n \n @item near\n+@cindex @code{near} function attribute, MeP\n @cindex functions that do not handle memory bank switching on 68HC11/68HC12\n-On 68HC11 and 68HC12 the @code{near} attribute causes the compiler to\n-use the normal calling convention based on @code{jsr} and @code{rts}.\n-This attribute can be used to cancel the effect of the @option{-mlong-calls}\n-option.\n-\n On MeP targets this attribute causes the compiler to assume the called\n function is close enough to use the normal calling convention,\n overriding the @option{-mtf} command-line option.\n \n @item nesting\n-@cindex Allow nesting in an interrupt handler on the Blackfin processor.\n+@cindex @code{nesting} function attribute, Blackfin\n+@cindex Allow nesting in an interrupt handler on the Blackfin processor\n Use this attribute together with @code{interrupt_handler},\n @code{exception_handler} or @code{nmi_handler} to indicate that the function\n entry code should enable nested interrupts or exceptions.\n \n @item nmi_handler\n+@cindex @code{nmi_handler} function attribute, Blackfin\n @cindex NMI handler functions on the Blackfin processor\n Use this attribute on the Blackfin to indicate that the specified function\n is an NMI handler.  The compiler generates function entry and\n exit sequences suitable for use in an NMI handler when this\n attribute is present.\n \n @item nocompression\n-@cindex @code{nocompression} attribute\n+@cindex @code{nocompression} function attribute, MIPS\n On MIPS targets, you can use the @code{nocompression} function attribute\n to locally turn off MIPS16 and microMIPS code generation.  This attribute\n overrides the @option{-mips16} and @option{-mmicromips} options on the\n@@ -3475,7 +3503,7 @@ my_memcpy (void *dest, const void *src, size_t len)\n @end smallexample\n \n @item no_reorder\n-@cindex @code{no_reorder} function or variable attribute\n+@cindex @code{no_reorder} function attribute\n Do not reorder functions or variables marked @code{no_reorder}\n against each other or top level assembler statements the executable.\n The actual order in the program will depend on the linker command\n@@ -3543,7 +3571,7 @@ with the notable exceptions of @code{qsort} and @code{bsearch} that\n take function pointer arguments.\n \n @item nosave_low_regs\n-@cindex @code{nosave_low_regs} attribute\n+@cindex @code{nosave_low_regs} function attribute, SH\n Use this attribute on SH targets to indicate that an @code{interrupt_handler}\n function should not save and restore registers R0..R7.  This can be used on SH3*\n and SH4* targets that have a second R0..R7 register bank for non-reentrant\n@@ -3567,9 +3595,10 @@ compiled with more aggressive optimization options that produce faster\n and larger code, while other functions can be compiled with less\n aggressive options.\n \n-@item OS_main/OS_task\n-@cindex @code{OS_main} AVR function attribute\n-@cindex @code{OS_task} AVR function attribute\n+@item OS_main\n+@itemx OS_task\n+@cindex @code{OS_main} function attribute, AVR\n+@cindex @code{OS_task} function attribute, AVR\n On AVR, functions with the @code{OS_main} or @code{OS_task} attribute\n do not save/restore any call-saved register in their prologue/epilogue.\n \n@@ -3595,7 +3624,7 @@ as needed.\n @end itemize\n \n @item pcs\n-@cindex @code{pcs} function attribute\n+@cindex @code{pcs} function attribute, ARM\n \n The @code{pcs} attribute can be used to control the calling convention\n used for a function on ARM.  The attribute takes an argument that specifies\n@@ -3700,7 +3729,7 @@ compiler that the function should be instrumented when compiled\n with the @option{-fchkp-instrument-marked-only} option.\n \n @item regparm (@var{number})\n-@cindex @code{regparm} attribute\n+@cindex @code{regparm} function attribute, x86\n @cindex functions that are passed arguments in registers on x86-32\n On x86-32 targets, the @code{regparm} attribute causes the compiler to\n pass arguments number one to @var{number} if they are of integral type\n@@ -3720,43 +3749,44 @@ disabled with the linker or the loader if desired, to avoid the\n problem.)\n \n @item reset\n+@cindex @code{reset} function attribute, NDS32\n @cindex reset handler functions\n Use this attribute on the NDS32 target to indicate that the specified function\n is a reset handler.  The compiler will generate corresponding sections\n for use in a reset handler.  You can use the following attributes\n to provide extra exception handling:\n @table @code\n @item nmi\n-@cindex @code{nmi} attribute\n+@cindex @code{nmi} function attribute, NDS32\n Provide a user-defined function to handle NMI exception.\n @item warm\n-@cindex @code{warm} attribute\n+@cindex @code{warm} function attribute, NDS32\n Provide a user-defined function to handle warm reset exception.\n @end table\n \n @item sseregparm\n-@cindex @code{sseregparm} attribute\n+@cindex @code{sseregparm} function attribute, x86\n On x86-32 targets with SSE support, the @code{sseregparm} attribute\n causes the compiler to pass up to 3 floating-point arguments in\n SSE registers instead of on the stack.  Functions that take a\n variable number of arguments continue to pass all of their\n floating-point arguments on the stack.\n \n @item force_align_arg_pointer\n-@cindex @code{force_align_arg_pointer} attribute\n+@cindex @code{force_align_arg_pointer} function attribute, x86\n On x86 targets, the @code{force_align_arg_pointer} attribute may be\n applied to individual function definitions, generating an alternate\n prologue and epilogue that realigns the run-time stack if necessary.\n This supports mixing legacy codes that run with a 4-byte aligned stack\n with modern codes that keep a 16-byte stack for SSE compatibility.\n \n @item renesas\n-@cindex @code{renesas} attribute\n+@cindex @code{renesas} function attribute, SH\n On SH targets this attribute specifies that the function or struct follows the\n Renesas ABI.\n \n @item resbank\n-@cindex @code{resbank} attribute\n+@cindex @code{resbank} function attribute, SH\n On the SH2A target, this attribute enables the high-speed register\n saving and restoration using a register bank for @code{interrupt_handler}\n routines.  Saving to the bank is performed automatically after the CPU\n@@ -3769,7 +3799,7 @@ banks are stacked in first-in last-out (FILO) sequence.  Restoration\n from the bank is executed by issuing a RESBANK instruction.\n \n @item returns_twice\n-@cindex @code{returns_twice} attribute\n+@cindex @code{returns_twice} function attribute\n The @code{returns_twice} attribute tells the compiler that a function may\n return more than one time.  The compiler ensures that all registers\n are dead before calling such a function and emits a warning about\n@@ -3779,23 +3809,26 @@ The @code{longjmp}-like counterpart of such function, if any, might need\n to be marked with the @code{noreturn} attribute.\n \n @item saveall\n+@cindex @code{saveall} function attribute, Blackfin\n+@cindex @code{saveall} function attribute, H8/300\n @cindex save all registers on the Blackfin, H8/300, H8/300H, and H8S\n Use this attribute on the Blackfin, H8/300, H8/300H, and H8S to indicate that\n all registers except the stack pointer should be saved in the prologue\n regardless of whether they are used or not.\n \n @item save_volatiles\n-@cindex save volatile registers on the MicroBlaze\n+@cindex @code{save_volatiles} function attribute, MicroBlaze\n Use this attribute on the MicroBlaze to indicate that the function is\n an interrupt handler.  All volatile registers (in addition to non-volatile\n registers) are saved in the function prologue.  If the function is a leaf\n function, only volatiles used by the function are saved.  A normal function\n return is generated instead of a return from interrupt.\n \n @item break_handler\n+@cindex @code{break_handler} function attribute, MicroBlaze\n @cindex break handler functions\n Use this attribute on the MicroBlaze ports to indicate that\n-the specified function is an break handler.  The compiler generates function\n+the specified function is a break handler.  The compiler generates function\n entry and exit sequences suitable for use in an break handler when this\n attribute is present. The return from @code{break_handler} is done through\n the @code{rtbd} instead of @code{rtsd}.\n@@ -3852,13 +3885,13 @@ The warnings for missing or incorrect sentinels are enabled with\n @option{-Wformat}.\n \n @item short_call\n-See @code{long_call/short_call}.\n+See @code{long_call}.\n \n @item shortcall\n-See @code{longcall/shortcall}.\n+See @code{longcall}.\n \n @item signal\n-@cindex interrupt handler functions on the AVR processors\n+@cindex @code{signal} function attribute, AVR\n Use this attribute on the AVR to indicate that the specified\n function is an interrupt handler.  The compiler generates function\n entry and exit sequences suitable for use in an interrupt handler when this\n@@ -3877,7 +3910,7 @@ If both @code{signal} and @code{interrupt} are specified for the same\n function, @code{signal} is silently ignored.\n \n @item sp_switch\n-@cindex @code{sp_switch} attribute\n+@cindex @code{sp_switch} function attribute, SH\n Use this attribute on the SH to indicate an @code{interrupt_handler}\n function should switch to an alternate stack.  It expects a string\n argument that names a global variable holding the address of the\n@@ -3890,13 +3923,14 @@ void f () __attribute__ ((interrupt_handler,\n @end smallexample\n \n @item stdcall\n+@cindex @code{stdcall} function attribute, x86-32\n @cindex functions that pop the argument stack on x86-32\n On x86-32 targets, the @code{stdcall} attribute causes the compiler to\n assume that the called function pops off the stack space used to\n pass arguments, unless it takes a variable number of arguments.\n \n @item syscall_linkage\n-@cindex @code{syscall_linkage} attribute\n+@cindex @code{syscall_linkage} function attribute, IA-64\n This attribute is used to modify the IA-64 calling convention by marking\n all input registers as live at all function exits.  This makes it possible\n to restart a system call after an interrupt without having to save/restore\n@@ -3943,144 +3977,144 @@ On the x86, the following options are allowed:\n @table @samp\n @item abm\n @itemx no-abm\n-@cindex @code{target(\"abm\")} attribute\n+@cindex @code{target(\"abm\")} function attribute, x86\n Enable/disable the generation of the advanced bit instructions.\n \n @item aes\n @itemx no-aes\n-@cindex @code{target(\"aes\")} attribute\n+@cindex @code{target(\"aes\")} function attribute, x86\n Enable/disable the generation of the AES instructions.\n \n @item default\n-@cindex @code{target(\"default\")} attribute\n+@cindex @code{target(\"default\")} function attribute, x86\n @xref{Function Multiversioning}, where it is used to specify the\n default function version.\n \n @item mmx\n @itemx no-mmx\n-@cindex @code{target(\"mmx\")} attribute\n+@cindex @code{target(\"mmx\")} function attribute, x86\n Enable/disable the generation of the MMX instructions.\n \n @item pclmul\n @itemx no-pclmul\n-@cindex @code{target(\"pclmul\")} attribute\n+@cindex @code{target(\"pclmul\")} function attribute, x86\n Enable/disable the generation of the PCLMUL instructions.\n \n @item popcnt\n @itemx no-popcnt\n-@cindex @code{target(\"popcnt\")} attribute\n+@cindex @code{target(\"popcnt\")} function attribute, x86\n Enable/disable the generation of the POPCNT instruction.\n \n @item sse\n @itemx no-sse\n-@cindex @code{target(\"sse\")} attribute\n+@cindex @code{target(\"sse\")} function attribute, x86\n Enable/disable the generation of the SSE instructions.\n \n @item sse2\n @itemx no-sse2\n-@cindex @code{target(\"sse2\")} attribute\n+@cindex @code{target(\"sse2\")} function attribute, x86\n Enable/disable the generation of the SSE2 instructions.\n \n @item sse3\n @itemx no-sse3\n-@cindex @code{target(\"sse3\")} attribute\n+@cindex @code{target(\"sse3\")} function attribute, x86\n Enable/disable the generation of the SSE3 instructions.\n \n @item sse4\n @itemx no-sse4\n-@cindex @code{target(\"sse4\")} attribute\n+@cindex @code{target(\"sse4\")} function attribute, x86\n Enable/disable the generation of the SSE4 instructions (both SSE4.1\n and SSE4.2).\n \n @item sse4.1\n @itemx no-sse4.1\n-@cindex @code{target(\"sse4.1\")} attribute\n+@cindex @code{target(\"sse4.1\")} function attribute, x86\n Enable/disable the generation of the sse4.1 instructions.\n \n @item sse4.2\n @itemx no-sse4.2\n-@cindex @code{target(\"sse4.2\")} attribute\n+@cindex @code{target(\"sse4.2\")} function attribute, x86\n Enable/disable the generation of the sse4.2 instructions.\n \n @item sse4a\n @itemx no-sse4a\n-@cindex @code{target(\"sse4a\")} attribute\n+@cindex @code{target(\"sse4a\")} function attribute, x86\n Enable/disable the generation of the SSE4A instructions.\n \n @item fma4\n @itemx no-fma4\n-@cindex @code{target(\"fma4\")} attribute\n+@cindex @code{target(\"fma4\")} function attribute, x86\n Enable/disable the generation of the FMA4 instructions.\n \n @item xop\n @itemx no-xop\n-@cindex @code{target(\"xop\")} attribute\n+@cindex @code{target(\"xop\")} function attribute, x86\n Enable/disable the generation of the XOP instructions.\n \n @item lwp\n @itemx no-lwp\n-@cindex @code{target(\"lwp\")} attribute\n+@cindex @code{target(\"lwp\")} function attribute, x86\n Enable/disable the generation of the LWP instructions.\n \n @item ssse3\n @itemx no-ssse3\n-@cindex @code{target(\"ssse3\")} attribute\n+@cindex @code{target(\"ssse3\")} function attribute, x86\n Enable/disable the generation of the SSSE3 instructions.\n \n @item cld\n @itemx no-cld\n-@cindex @code{target(\"cld\")} attribute\n+@cindex @code{target(\"cld\")} function attribute, x86\n Enable/disable the generation of the CLD before string moves.\n \n @item fancy-math-387\n @itemx no-fancy-math-387\n-@cindex @code{target(\"fancy-math-387\")} attribute\n+@cindex @code{target(\"fancy-math-387\")} function attribute, x86\n Enable/disable the generation of the @code{sin}, @code{cos}, and\n @code{sqrt} instructions on the 387 floating-point unit.\n \n @item fused-madd\n @itemx no-fused-madd\n-@cindex @code{target(\"fused-madd\")} attribute\n+@cindex @code{target(\"fused-madd\")} function attribute, x86\n Enable/disable the generation of the fused multiply/add instructions.\n \n @item ieee-fp\n @itemx no-ieee-fp\n-@cindex @code{target(\"ieee-fp\")} attribute\n+@cindex @code{target(\"ieee-fp\")} function attribute, x86\n Enable/disable the generation of floating point that depends on IEEE arithmetic.\n \n @item inline-all-stringops\n @itemx no-inline-all-stringops\n-@cindex @code{target(\"inline-all-stringops\")} attribute\n+@cindex @code{target(\"inline-all-stringops\")} function attribute, x86\n Enable/disable inlining of string operations.\n \n @item inline-stringops-dynamically\n @itemx no-inline-stringops-dynamically\n-@cindex @code{target(\"inline-stringops-dynamically\")} attribute\n+@cindex @code{target(\"inline-stringops-dynamically\")} function attribute, x86\n Enable/disable the generation of the inline code to do small string\n operations and calling the library routines for large operations.\n \n @item align-stringops\n @itemx no-align-stringops\n-@cindex @code{target(\"align-stringops\")} attribute\n+@cindex @code{target(\"align-stringops\")} function attribute, x86\n Do/do not align destination of inlined string operations.\n \n @item recip\n @itemx no-recip\n-@cindex @code{target(\"recip\")} attribute\n+@cindex @code{target(\"recip\")} function attribute, x86\n Enable/disable the generation of RCPSS, RCPPS, RSQRTSS and RSQRTPS\n instructions followed an additional Newton-Raphson step instead of\n doing a floating-point division.\n \n @item arch=@var{ARCH}\n-@cindex @code{target(\"arch=@var{ARCH}\")} attribute\n+@cindex @code{target(\"arch=@var{ARCH}\")} function attribute, x86\n Specify the architecture to generate code for in compiling the function.\n \n @item tune=@var{TUNE}\n-@cindex @code{target(\"tune=@var{TUNE}\")} attribute\n+@cindex @code{target(\"tune=@var{TUNE}\")} function attribute, x86\n Specify the architecture to tune for in compiling the function.\n \n @item fpmath=@var{FPMATH}\n-@cindex @code{target(\"fpmath=@var{FPMATH}\")} attribute\n+@cindex @code{target(\"fpmath=@var{FPMATH}\")} function attribute, x86\n Specify which floating-point unit to use.  The\n @code{target(\"fpmath=sse,387\")} option must be specified as\n @code{target(\"fpmath=sse+387\")} because the comma would separate\n@@ -4092,124 +4126,124 @@ On the PowerPC, the following options are allowed:\n @table @samp\n @item altivec\n @itemx no-altivec\n-@cindex @code{target(\"altivec\")} attribute\n+@cindex @code{target(\"altivec\")} function attribute, PowerPC\n Generate code that uses (does not use) AltiVec instructions.  In\n 32-bit code, you cannot enable AltiVec instructions unless\n @option{-mabi=altivec} is used on the command line.\n \n @item cmpb\n @itemx no-cmpb\n-@cindex @code{target(\"cmpb\")} attribute\n+@cindex @code{target(\"cmpb\")} function attribute, PowerPC\n Generate code that uses (does not use) the compare bytes instruction\n implemented on the POWER6 processor and other processors that support\n the PowerPC V2.05 architecture.\n \n @item dlmzb\n @itemx no-dlmzb\n-@cindex @code{target(\"dlmzb\")} attribute\n+@cindex @code{target(\"dlmzb\")} function attribute, PowerPC\n Generate code that uses (does not use) the string-search @samp{dlmzb}\n instruction on the IBM 405, 440, 464 and 476 processors.  This instruction is\n generated by default when targeting those processors.\n \n @item fprnd\n @itemx no-fprnd\n-@cindex @code{target(\"fprnd\")} attribute\n+@cindex @code{target(\"fprnd\")} function attribute, PowerPC\n Generate code that uses (does not use) the FP round to integer\n instructions implemented on the POWER5+ processor and other processors\n that support the PowerPC V2.03 architecture.\n \n @item hard-dfp\n @itemx no-hard-dfp\n-@cindex @code{target(\"hard-dfp\")} attribute\n+@cindex @code{target(\"hard-dfp\")} function attribute, PowerPC\n Generate code that uses (does not use) the decimal floating-point\n instructions implemented on some POWER processors.\n \n @item isel\n @itemx no-isel\n-@cindex @code{target(\"isel\")} attribute\n+@cindex @code{target(\"isel\")} function attribute, PowerPC\n Generate code that uses (does not use) ISEL instruction.\n \n @item mfcrf\n @itemx no-mfcrf\n-@cindex @code{target(\"mfcrf\")} attribute\n+@cindex @code{target(\"mfcrf\")} function attribute, PowerPC\n Generate code that uses (does not use) the move from condition\n register field instruction implemented on the POWER4 processor and\n other processors that support the PowerPC V2.01 architecture.\n \n @item mfpgpr\n @itemx no-mfpgpr\n-@cindex @code{target(\"mfpgpr\")} attribute\n+@cindex @code{target(\"mfpgpr\")} function attribute, PowerPC\n Generate code that uses (does not use) the FP move to/from general\n purpose register instructions implemented on the POWER6X processor and\n other processors that support the extended PowerPC V2.05 architecture.\n \n @item mulhw\n @itemx no-mulhw\n-@cindex @code{target(\"mulhw\")} attribute\n+@cindex @code{target(\"mulhw\")} function attribute, PowerPC\n Generate code that uses (does not use) the half-word multiply and\n multiply-accumulate instructions on the IBM 405, 440, 464 and 476 processors.\n These instructions are generated by default when targeting those\n processors.\n \n @item multiple\n @itemx no-multiple\n-@cindex @code{target(\"multiple\")} attribute\n+@cindex @code{target(\"multiple\")} function attribute, PowerPC\n Generate code that uses (does not use) the load multiple word\n instructions and the store multiple word instructions.\n \n @item update\n @itemx no-update\n-@cindex @code{target(\"update\")} attribute\n+@cindex @code{target(\"update\")} function attribute, PowerPC\n Generate code that uses (does not use) the load or store instructions\n that update the base register to the address of the calculated memory\n location.\n \n @item popcntb\n @itemx no-popcntb\n-@cindex @code{target(\"popcntb\")} attribute\n+@cindex @code{target(\"popcntb\")} function attribute, PowerPC\n Generate code that uses (does not use) the popcount and double-precision\n FP reciprocal estimate instruction implemented on the POWER5\n processor and other processors that support the PowerPC V2.02\n architecture.\n \n @item popcntd\n @itemx no-popcntd\n-@cindex @code{target(\"popcntd\")} attribute\n+@cindex @code{target(\"popcntd\")} function attribute, PowerPC\n Generate code that uses (does not use) the popcount instruction\n implemented on the POWER7 processor and other processors that support\n the PowerPC V2.06 architecture.\n \n @item powerpc-gfxopt\n @itemx no-powerpc-gfxopt\n-@cindex @code{target(\"powerpc-gfxopt\")} attribute\n+@cindex @code{target(\"powerpc-gfxopt\")} function attribute, PowerPC\n Generate code that uses (does not use) the optional PowerPC\n architecture instructions in the Graphics group, including\n floating-point select.\n \n @item powerpc-gpopt\n @itemx no-powerpc-gpopt\n-@cindex @code{target(\"powerpc-gpopt\")} attribute\n+@cindex @code{target(\"powerpc-gpopt\")} function attribute, PowerPC\n Generate code that uses (does not use) the optional PowerPC\n architecture instructions in the General Purpose group, including\n floating-point square root.\n \n @item recip-precision\n @itemx no-recip-precision\n-@cindex @code{target(\"recip-precision\")} attribute\n+@cindex @code{target(\"recip-precision\")} function attribute, PowerPC\n Assume (do not assume) that the reciprocal estimate instructions\n-provide higher-precision estimates than is mandated by the powerpc\n+provide higher-precision estimates than is mandated by the PowerPC\n ABI.\n \n @item string\n @itemx no-string\n-@cindex @code{target(\"string\")} attribute\n+@cindex @code{target(\"string\")} function attribute, PowerPC\n Generate code that uses (does not use) the load string instructions\n and the store string word instructions to save multiple registers and\n do small block moves.\n \n @item vsx\n @itemx no-vsx\n-@cindex @code{target(\"vsx\")} attribute\n+@cindex @code{target(\"vsx\")} function attribute, PowerPC\n Generate code that uses (does not use) vector/scalar (VSX)\n instructions, and also enable the use of built-in functions that allow\n more direct access to the VSX instruction set.  In 32-bit code, you\n@@ -4218,7 +4252,7 @@ cannot enable VSX or AltiVec instructions unless\n \n @item friz\n @itemx no-friz\n-@cindex @code{target(\"friz\")} attribute\n+@cindex @code{target(\"friz\")} function attribute, PowerPC\n Generate (do not generate) the @code{friz} instruction when the\n @option{-funsafe-math-optimizations} option is used to optimize\n rounding a floating-point value to 64-bit integer and back to floating\n@@ -4227,31 +4261,31 @@ the floating-point number is too large to fit in an integer.\n \n @item avoid-indexed-addresses\n @itemx no-avoid-indexed-addresses\n-@cindex @code{target(\"avoid-indexed-addresses\")} attribute\n+@cindex @code{target(\"avoid-indexed-addresses\")} function attribute, PowerPC\n Generate code that tries to avoid (not avoid) the use of indexed load\n or store instructions.\n \n @item paired\n @itemx no-paired\n-@cindex @code{target(\"paired\")} attribute\n+@cindex @code{target(\"paired\")} function attribute, PowerPC\n Generate code that uses (does not use) the generation of PAIRED simd\n instructions.\n \n @item longcall\n @itemx no-longcall\n-@cindex @code{target(\"longcall\")} attribute\n+@cindex @code{target(\"longcall\")} function attribute, PowerPC\n Generate code that assumes (does not assume) that all calls are far\n away so that a longer more expensive calling sequence is required.\n \n @item cpu=@var{CPU}\n-@cindex @code{target(\"cpu=@var{CPU}\")} attribute\n+@cindex @code{target(\"cpu=@var{CPU}\")} function attribute, PowerPC\n Specify the architecture to generate code for when compiling the\n function.  If you select the @code{target(\"cpu=power7\")} attribute when\n generating 32-bit code, VSX and AltiVec instructions are not generated\n unless you use the @option{-mabi=altivec} option on the command line.\n \n @item tune=@var{TUNE}\n-@cindex @code{target(\"tune=@var{TUNE}\")} attribute\n+@cindex @code{target(\"tune=@var{TUNE}\")} function attribute, PowerPC\n Specify the architecture to tune for when compiling the function.  If\n you do not specify the @code{target(\"tune=@var{TUNE}\")} attribute and\n you do specify the @code{target(\"cpu=@var{CPU}\")} attribute,\n@@ -4264,8 +4298,8 @@ When compiling for Nios II, the following options are allowed:\n @table @samp\n @item custom-@var{insn}=@var{N}\n @itemx no-custom-@var{insn}\n-@cindex @code{target(\"custom-@var{insn}=@var{N}\")} attribute\n-@cindex @code{target(\"no-custom-@var{insn}\")} attribute\n+@cindex @code{target(\"custom-@var{insn}=@var{N}\")} function attribute, Nios II\n+@cindex @code{target(\"no-custom-@var{insn}\")} function attribute, Nios II\n Each @samp{custom-@var{insn}=@var{N}} attribute locally enables use of a\n custom instruction with encoding @var{N} when generating code that uses \n @var{insn}.  Similarly, @samp{no-custom-@var{insn}} locally inhibits use of\n@@ -4276,7 +4310,7 @@ command-line options, and support the same set of @var{insn} keywords.\n @xref{Nios II Options}, for more information.\n \n @item custom-fpu-cfg=@var{name}\n-@cindex @code{target(\"custom-fpu-cfg=@var{name}\")} attribute\n+@cindex @code{target(\"custom-fpu-cfg=@var{name}\")} function attribute, Nios II\n This attribute corresponds to the @option{-mcustom-fpu-cfg=@var{name}}\n command-line option, to select a predefined set of custom instructions\n named @var{name}.\n@@ -4289,33 +4323,25 @@ callee has a subset of the target options of the caller.  For example\n a function declared with @code{target(\"sse3\")} can inline a function\n with @code{target(\"sse2\")}, since @code{-msse3} implies @code{-msse2}.\n \n-@item tiny_data\n-@cindex tiny data section on the H8/300H and H8S\n-Use this attribute on the H8/300H and H8S to indicate that the specified\n-variable should be placed into the tiny data section.\n-The compiler generates more efficient code for loads and stores\n-on data in the tiny data section.  Note the tiny data area is limited to\n-slightly under 32KB of data.\n-\n @item trap_exit\n-@cindex @code{trap_exit} attribute\n+@cindex @code{trap_exit} function attribute, SH\n Use this attribute on the SH for an @code{interrupt_handler} to return using\n @code{trapa} instead of @code{rte}.  This attribute expects an integer\n argument specifying the trap number to be used.\n \n @item trapa_handler\n-@cindex @code{trapa_handler} attribute\n+@cindex @code{trapa_handler} function attribute, SH\n On SH targets this function attribute is similar to @code{interrupt_handler}\n but it does not save and restore all registers.\n \n @item unused\n-@cindex @code{unused} attribute.\n+@cindex @code{unused} function attribute\n This attribute, attached to a function, means that the function is meant\n to be possibly unused.  GCC does not produce a warning for this\n function.\n \n @item used\n-@cindex @code{used} attribute.\n+@cindex @code{used} function attribute\n This attribute, attached to a function, means that code must be emitted\n for the function even if it appears that the function is not referenced.\n This is useful, for example, when the function is referenced only in\n@@ -4326,14 +4352,14 @@ attribute also means that the function is instantiated if the\n class itself is instantiated.\n \n @item vector\n-@cindex @code{vector} attribute\n+@cindex @code{vector} function attribute, RX\n This RX attribute is similar to the @code{interrupt} attribute, including its\n parameters, but does not make the function an interrupt-handler type\n function (i.e. it retains the normal C function calling ABI).  See the\n @code{interrupt} attribute for a description of its arguments.\n \n @item version_id\n-@cindex @code{version_id} attribute\n+@cindex @code{version_id} function attribute, IA-64\n This IA-64 HP-UX attribute, attached to a global variable or function, renames a\n symbol to contain a version string, thus allowing for function level\n versioning.  HP-UX system header files may use function level versioning\n@@ -4347,7 +4373,7 @@ extern int foo () __attribute__((version_id (\"20040821\")));\n Calls to @var{foo} are mapped to calls to @var{foo@{20040821@}}.\n \n @item visibility (\"@var{visibility_type}\")\n-@cindex @code{visibility} attribute\n+@cindex @code{visibility} function attribute\n This attribute affects the linkage of the declaration to which it is attached.\n There are four supported @var{visibility_type} values: default,\n hidden, protected or internal visibility.\n@@ -4449,14 +4475,14 @@ If both the template and enclosing class have explicit visibility, the\n visibility from the template is used.\n \n @item vliw\n-@cindex @code{vliw} attribute\n+@cindex @code{vliw} function attribute, MeP\n On MeP, the @code{vliw} attribute tells the compiler to emit\n instructions in VLIW mode instead of core mode.  Note that this\n attribute is not allowed unless a VLIW coprocessor has been configured\n and enabled through command-line options.\n \n @item warn_unused_result\n-@cindex @code{warn_unused_result} attribute\n+@cindex @code{warn_unused_result} function attribute\n The @code{warn_unused_result} attribute causes a warning to be emitted\n if a caller of the function with this attribute does not use its\n return value.  This is useful for functions where not checking\n@@ -4477,7 +4503,7 @@ int foo ()\n results in warning on line 5.\n \n @item weak\n-@cindex @code{weak} attribute\n+@cindex @code{weak} function attribute\n The @code{weak} attribute causes the declaration to be emitted as a weak\n symbol rather than a global.  This is primarily useful in defining\n library functions that can be overridden in user code, though it can\n@@ -4487,7 +4513,7 @@ and linker.\n \n @item weakref\n @itemx weakref (\"@var{target}\")\n-@cindex @code{weakref} attribute\n+@cindex @code{weakref} function attribute\n The @code{weakref} attribute marks a declaration as a weak reference.\n Without arguments, it should be accompanied by an @code{alias} attribute\n naming the target symbol.  Optionally, the @var{target} may be given as\n@@ -4953,7 +4979,7 @@ you may use @code{__aligned__} instead of @code{aligned}.\n attributes.\n \n @table @code\n-@cindex @code{aligned} attribute\n+@cindex @code{aligned} variable attribute\n @item aligned (@var{alignment})\n This attribute specifies a minimum alignment for the variable or\n structure field, measured in bytes.  For example, the declaration:\n@@ -5023,7 +5049,7 @@ The @code{aligned} attribute can also be used for functions\n (@pxref{Function Attributes}.)\n \n @item cleanup (@var{cleanup_function})\n-@cindex @code{cleanup} attribute\n+@cindex @code{cleanup} variable attribute\n The @code{cleanup} attribute runs a function when the variable goes\n out of scope.  This attribute can only be applied to auto function\n scope variables; it may not be applied to parameters or variables\n@@ -5040,8 +5066,8 @@ return normally.\n \n @item common\n @itemx nocommon\n-@cindex @code{common} attribute\n-@cindex @code{nocommon} attribute\n+@cindex @code{common} variable attribute\n+@cindex @code{nocommon} variable attribute\n @opindex fcommon\n @opindex fno-common\n The @code{common} attribute requests GCC to place a variable in\n@@ -5053,7 +5079,7 @@ These attributes override the default chosen by the\n \n @item deprecated\n @itemx deprecated (@var{msg})\n-@cindex @code{deprecated} attribute\n+@cindex @code{deprecated} variable attribute\n The @code{deprecated} attribute results in a warning if the variable\n is used anywhere in the source file.  This is useful when identifying\n variables that are expected to be removed in a future version of a\n@@ -5077,7 +5103,7 @@ The @code{deprecated} attribute can also be used for functions and\n types (@pxref{Function Attributes}, @pxref{Type Attributes}.)\n \n @item mode (@var{mode})\n-@cindex @code{mode} attribute\n+@cindex @code{mode} variable attribute\n This attribute specifies the data type for the declaration---whichever\n type corresponds to the mode @var{mode}.  This in effect lets you\n request an integer or floating-point type according to its width.\n@@ -5088,7 +5114,7 @@ indicate the mode corresponding to a one-byte integer, @code{word} or\n or @code{__pointer__} for the mode used to represent pointers.\n \n @item packed\n-@cindex @code{packed} attribute\n+@cindex @code{packed} variable attribute\n The @code{packed} attribute specifies that a variable or structure field\n should have the smallest possible alignment---one byte for a variable,\n and one bit for a field, unless you specify a larger value with the\n@@ -5188,7 +5214,7 @@ linkers work.  See @code{section} attribute for more information.\n The @code{shared} attribute is only available on Microsoft Windows@.\n \n @item tls_model (\"@var{tls_model}\")\n-@cindex @code{tls_model} attribute\n+@cindex @code{tls_model} variable attribute\n The @code{tls_model} attribute sets thread-local storage model\n (@pxref{Thread-Local}) of a particular @code{__thread} variable,\n overriding @option{-ftls-model=} command-line switch on a per-variable\n@@ -5199,12 +5225,14 @@ The @var{tls_model} argument should be one of @code{global-dynamic},\n Not all targets support this attribute.\n \n @item unused\n+@cindex @code{unused} variable attribute\n This attribute, attached to a variable, means that the variable is meant\n to be possibly unused.  GCC does not produce a warning for this\n variable.\n \n @item used\n-This attribute, attached to a variable with the static storage, means that\n+@cindex @code{used} variable attribute\n+This attribute, attached to a variable with static storage, means that\n the variable must be emitted even if it appears that the variable is not\n referenced.\n \n@@ -5213,6 +5241,7 @@ attribute also means that the member is instantiated if the\n class itself is instantiated.\n \n @item vector_size (@var{bytes})\n+@cindex @code{vector_size} variable attribute\n This attribute specifies the vector size for the variable, measured in\n bytes.  For example, the declaration:\n \n@@ -5242,6 +5271,7 @@ is invalid even if the size of the structure is the same as the size of\n the @code{int}.\n \n @item selectany\n+@cindex @code{selectany} variable attribute\n The @code{selectany} attribute causes an initialized global variable to\n have link-once semantics.  When multiple definitions of the variable are\n encountered by the linker, the first is selected and the remainder are\n@@ -5262,12 +5292,15 @@ targets.  You can use @code{__declspec (selectany)} as a synonym for\n compilers.\n \n @item weak\n+@cindex @code{weak} variable attribute\n The @code{weak} attribute is described in @ref{Function Attributes}.\n \n @item dllimport\n+@cindex @code{dllimport} variable attribute\n The @code{dllimport} attribute is described in @ref{Function Attributes}.\n \n @item dllexport\n+@cindex @code{dllexport} variable attribute\n The @code{dllexport} attribute is described in @ref{Function Attributes}.\n \n @end table\n@@ -5277,7 +5310,7 @@ The @code{dllexport} attribute is described in @ref{Function Attributes}.\n \n @table @code\n @item progmem\n-@cindex @code{progmem} AVR variable attribute\n+@cindex @code{progmem} variable attribute, AVR\n The @code{progmem} attribute is used on the AVR to place read-only\n data in the non-volatile program memory (flash). The @code{progmem}\n attribute accomplishes this by putting respective variables into a\n@@ -5312,6 +5345,7 @@ an alternate way to locate and access data in flash memory.\n \n @item io\n @itemx io (@var{addr})\n+@cindex @code{io} variable attribute, AVR\n Variables with the @code{io} attribute are used to address\n memory-mapped peripherals in the io address range.\n If an address is specified, the variable\n@@ -5336,13 +5370,15 @@ extern volatile int porta __attribute__((io));\n \n @item io_low\n @itemx io_low (@var{addr})\n+@cindex @code{io_low} variable attribute, AVR\n This is like the @code{io} attribute, but additionally it informs the\n compiler that the object lies in the lower half of the I/O area,\n allowing the use of @code{cbi}, @code{sbi}, @code{sbic} and @code{sbis}\n instructions.\n \n @item address\n @itemx address (@var{addr})\n+@cindex @code{address} variable attribute, AVR\n Variables with the @code{address} attribute are used to address\n memory-mapped peripherals that may lie outside the io address range.\n \n@@ -5360,28 +5396,75 @@ Three attributes are currently defined for the Blackfin.\n @item l1_data\n @itemx l1_data_A\n @itemx l1_data_B\n-@cindex @code{l1_data} variable attribute\n-@cindex @code{l1_data_A} variable attribute\n-@cindex @code{l1_data_B} variable attribute\n+@cindex @code{l1_data} variable attribute, Blackfin\n+@cindex @code{l1_data_A} variable attribute, Blackfin\n+@cindex @code{l1_data_B} variable attribute, Blackfin\n Use these attributes on the Blackfin to place the variable into L1 Data SRAM.\n Variables with @code{l1_data} attribute are put into the specific section\n named @code{.l1.data}. Those with @code{l1_data_A} attribute are put into\n the specific section named @code{.l1.data.A}. Those with @code{l1_data_B}\n attribute are put into the specific section named @code{.l1.data.B}.\n \n @item l2\n-@cindex @code{l2} variable attribute\n+@cindex @code{l2} variable attribute, Blackfin\n Use this attribute on the Blackfin to place the variable into L2 SRAM.\n Variables with @code{l2} attribute are put into the specific section\n named @code{.l2.data}.\n @end table\n \n+@subsection H8/300 Variable Attributes\n+\n+These variable attributes are available for H8/300 targets:\n+\n+@table @code\n+@item eightbit_data\n+@cindex @code{eightbit_data} variable attribute, H8/300\n+@cindex eight-bit data on the H8/300, H8/300H, and H8S\n+Use this attribute on the H8/300, H8/300H, and H8S to indicate that the specified\n+variable should be placed into the eight-bit data section.\n+The compiler generates more efficient code for certain operations\n+on data in the eight-bit data area.  Note the eight-bit data area is limited to\n+256 bytes of data.\n+\n+You must use GAS and GLD from GNU binutils version 2.7 or later for\n+this attribute to work correctly.\n+\n+@item tiny_data\n+@cindex @code{tiny_data} variable attribute, H8/300\n+@cindex tiny data section on the H8/300H and H8S\n+Use this attribute on the H8/300H and H8S to indicate that the specified\n+variable should be placed into the tiny data section.\n+The compiler generates more efficient code for loads and stores\n+on data in the tiny data section.  Note the tiny data area is limited to\n+slightly under 32KB of data.\n+\n+@end table\n+\n+@subsection IA-64 Variable Attributes\n+\n+The IA-64 back end supports the following variable attribute:\n+\n+@table @code\n+@item model (@var{model-name})\n+@cindex @code{model} variable attribute, IA-64\n+\n+On IA-64, use this attribute to set the addressability of an object.\n+At present, the only supported identifier for @var{model-name} is\n+@code{small}, indicating addressability via ``small'' (22-bit)\n+addresses (so that their addresses can be loaded with the @code{addl}\n+instruction).  Caveat: such addressing is by definition not position\n+independent and hence this attribute must not be used for objects\n+defined by shared libraries.\n+\n+@end table\n+\n @subsection M32R/D Variable Attributes\n \n One attribute is currently defined for the M32R/D@.\n \n @table @code\n @item model (@var{model-name})\n+@cindex @code{model-name} variable attribute, M32R/D\n @cindex variable addressability on the M32R/D\n Use this attribute on the M32R/D to set the addressability of an object.\n The identifier @var{model-name} is one of @code{small}, @code{medium},\n@@ -5410,27 +5493,32 @@ control bus which is specified with @code{cb} attributes.\n @table @code\n \n @item based\n+@cindex @code{based} variable attribute, MeP\n Any variable with the @code{based} attribute is assigned to the\n @code{.based} section, and is accessed with relative to the\n @code{$tp} register.\n \n @item tiny\n+@cindex @code{tiny} variable attribute, MeP\n Likewise, the @code{tiny} attribute assigned variables to the\n @code{.tiny} section, relative to the @code{$gp} register.\n \n @item near\n+@cindex @code{near} variable attribute, MeP\n Variables with the @code{near} attribute are assumed to have addresses\n that fit in a 24-bit addressing mode.  This is the default for large\n variables (@code{-mtiny=4} is the default) but this attribute can\n override @code{-mtiny=} for small variables, or override @code{-ml}.\n \n @item far\n+@cindex @code{far} variable attribute, MeP\n Variables with the @code{far} attribute are addressed using a full\n 32-bit address.  Since this covers the entire memory space, this\n allows modules to make no assumptions about where variables might be\n stored.\n \n @item io\n+@cindex @code{io} variable attribute, MeP\n @itemx io (@var{addr})\n Variables with the @code{io} attribute are used to address\n memory-mapped peripherals.  If an address is specified, the variable\n@@ -5443,6 +5531,7 @@ int timer_count __attribute__((io(0x123)));\n \n @item cb\n @itemx cb (@var{addr})\n+@cindex @code{cb} variable attribute, MeP\n Variables with the @code{cb} attribute are used to access the control\n bus, using special instructions.  @code{addr} indicates the control bus\n address.  Example:\n@@ -5458,14 +5547,18 @@ int cpu_clock __attribute__((cb(0x123)));\n Three attributes currently are defined for PowerPC configurations:\n @code{altivec}, @code{ms_struct} and @code{gcc_struct}.\n \n+@cindex @code{ms_struct} variable attribute, PowerPC\n+@cindex @code{gcc_struct} variable attribute, PowerPC\n For full documentation of the struct attributes please see the\n documentation in @ref{x86 Variable Attributes}.\n \n+@cindex @code{altivec} variable attribute, PowerPC\n For documentation of @code{altivec} attribute please see the\n documentation in @ref{PowerPC Type Attributes}.\n \n @subsection SPU Variable Attributes\n \n+@cindex @code{spu_vector} variable attribute, SPU\n The SPU supports the @code{spu_vector} attribute for variables.  For\n documentation of this attribute please see the documentation in\n @ref{SPU Type Attributes}.\n@@ -5479,8 +5572,8 @@ Two attributes are currently defined for x86 configurations:\n @table @code\n @item ms_struct\n @itemx gcc_struct\n-@cindex @code{ms_struct} attribute\n-@cindex @code{gcc_struct} attribute\n+@cindex @code{ms_struct} variable attribute, x86\n+@cindex @code{gcc_struct} variable attribute, x86\n \n If @code{packed} is used on a structure, or if bit-fields are used,\n it may be that the Microsoft ABI lays out the structure differently\n@@ -5615,7 +5708,7 @@ One attribute is currently defined for xstormy16 configurations:\n \n @table @code\n @item below100\n-@cindex @code{below100} attribute\n+@cindex @code{below100} variable attribute, Xstormy16\n \n If a variable has the @code{below100} attribute (@code{BELOW100} is\n allowed also), GCC places the variable in the first 0x100 bytes of\n@@ -5659,7 +5752,7 @@ former syntax is preferred.\n attributes.\n \n @table @code\n-@cindex @code{aligned} attribute\n+@cindex @code{aligned} type attribute\n @item aligned (@var{alignment})\n This attribute specifies a minimum alignment (in bytes) for variables\n of the specified type.  For example, the declarations:\n@@ -5739,6 +5832,7 @@ in an @code{__attribute__} still only provides you with 8-byte\n alignment.  See your linker documentation for further information.\n \n @item packed\n+@cindex @code{packed} type attribute\n This attribute, attached to @code{struct} or @code{union} type\n definition, specifies that each member (other than zero-width bit-fields)\n of the structure or union is placed to minimize the memory required.  When\n@@ -5777,7 +5871,7 @@ You may only specify this attribute on the definition of an @code{enum},\n also define the enumerated type, structure or union.\n \n @item transparent_union\n-@cindex @code{transparent_union} attribute\n+@cindex @code{transparent_union} type attribute\n \n This attribute, attached to a @code{union} type definition, indicates\n that any function parameter having that union type causes calls to that\n@@ -5839,6 +5933,7 @@ pid_t wait (wait_status_ptr_t p)\n @end smallexample\n \n @item unused\n+@cindex @code{unused} type attribute\n When attached to a type (including a @code{union} or a @code{struct}),\n this attribute means that variables of that type are meant to appear\n possibly unused.  GCC does not produce a warning for any variables of\n@@ -5849,6 +5944,7 @@ nontrivial bookkeeping functions.\n \n @item deprecated\n @itemx deprecated (@var{msg})\n+@cindex @code{deprecated} type attribute\n The @code{deprecated} attribute results in a warning if the type\n is used anywhere in the source file.  This is useful when identifying\n types that are expected to be removed in a future version of a program.\n@@ -5880,6 +5976,7 @@ The @code{deprecated} attribute can also be used for functions and\n variables (@pxref{Function Attributes}, @pxref{Variable Attributes}.)\n \n @item may_alias\n+@cindex @code{may_alias} type attribute\n Accesses through pointers to types with this attribute are not subject\n to type-based alias analysis, but are instead assumed to be able to alias\n any other type of objects.\n@@ -5920,6 +6017,7 @@ declaration, the above program would abort when compiled with\n above.\n \n @item visibility\n+@cindex @code{visibility} type attribute\n In C++, attribute visibility (@pxref{Function Attributes}) can also be\n applied to class, struct, union and enum types.  Unlike other type\n attributes, the attribute must appear between the initial keyword and\n@@ -5933,6 +6031,7 @@ Otherwise the two shared objects are unable to use the same\n typeinfo node and exception handling will break.\n \n @item designated_init\n+@cindex @code{designated_init} type attribute\n This attribute may only be applied to structure types.  It indicates\n that any initialization of an object of this type must use designated\n initializers rather than positional initializers.  The intent of this\n@@ -5944,7 +6043,7 @@ GCC emits warnings based on this attribute by default; use\n @option{-Wno-designated-init} to suppress them.\n \n @item bnd_variable_size\n-@cindex @code{bnd_variable_size} attribute\n+@cindex @code{bnd_variable_size} type attribute\n @cindex Pointer Bounds Checker attributes\n When applied to a structure field, this attribute tells Pointer\n Bounds Checker that the size of this field should not be computed\n@@ -5983,6 +6082,7 @@ packed))}.\n \n @subsection ARM Type Attributes\n \n+@cindex @code{notshared} type attribute, ARM\n On those ARM targets that support @code{dllimport} (such as Symbian\n OS), you can use the @code{notshared} attribute to indicate that the\n virtual table and other similar data for a class should not be\n@@ -6008,6 +6108,10 @@ most Symbian OS code uses @code{__declspec}.)\n @anchor{MeP Type Attributes}\n @subsection MeP Type Attributes\n \n+@cindex @code{based} type attribute, MeP\n+@cindex @code{tiny} type attribute, MeP\n+@cindex @code{near} type attribute, MeP\n+@cindex @code{far} type attribute, MeP\n Many of the MeP variable attributes may be applied to types as well.\n Specifically, the @code{based}, @code{tiny}, @code{near}, and\n @code{far} attributes may be applied to either.  The @code{io} and\n@@ -6019,9 +6123,12 @@ Specifically, the @code{based}, @code{tiny}, @code{near}, and\n Three attributes currently are defined for PowerPC configurations:\n @code{altivec}, @code{ms_struct} and @code{gcc_struct}.\n \n+@cindex @code{ms_struct} type attribute, PowerPC\n+@cindex @code{gcc_struct} type attribute, PowerPC\n For full documentation of the @code{ms_struct} and @code{gcc_struct}\n attributes please see the documentation in @ref{x86 Type Attributes}.\n \n+@cindex @code{altivec} type attribute, PowerPC\n The @code{altivec} attribute allows one to declare AltiVec vector data\n types supported by the AltiVec Programming Interface Manual.  The\n attribute requires an argument to specify one of three vector types:\n@@ -6040,6 +6147,7 @@ These attributes mainly are intended to support the @code{__vector},\n @anchor{SPU Type Attributes}\n @subsection SPU Type Attributes\n \n+@cindex @code{spu_vector} type attribute, SPU\n The SPU supports the @code{spu_vector} attribute for types.  This attribute\n allows one to declare vector data types supported by the Sony/Toshiba/IBM SPU\n Language Extensions Specification.  It is intended to support the\n@@ -6055,8 +6163,8 @@ Two attributes are currently defined for x86 configurations:\n \n @item ms_struct\n @itemx gcc_struct\n-@cindex @code{ms_struct}\n-@cindex @code{gcc_struct}\n+@cindex @code{ms_struct} type attribute, x86\n+@cindex @code{gcc_struct} type attribute, x86\n \n If @code{packed} is used on a structure, or if bit-fields are used\n it may be that the Microsoft ABI packs them differently\n@@ -18731,7 +18839,9 @@ Some attributes only make sense for C++ programs.\n \n @table @code\n @item abi_tag (\"@var{tag}\", ...)\n-@cindex @code{abi_tag} attribute\n+@cindex @code{abi_tag} function attribute\n+@cindex @code{abi_tag} variable attribute\n+@cindex @code{abi_tag} type attribute\n The @code{abi_tag} attribute can be applied to a function, variable, or class\n declaration.  It modifies the mangled name of the entity to\n incorporate the tag name, in order to distinguish the function or\n@@ -18771,8 +18881,7 @@ situation; this warning can be avoided by explicitly tagging the\n variable or function or moving it into a tagged inline namespace.\n \n @item init_priority (@var{priority})\n-@cindex @code{init_priority} attribute\n-\n+@cindex @code{init_priority} variable attribute\n \n In Standard C++, objects defined at namespace scope are guaranteed to be\n initialized in an order in strict accordance with that of their definitions\n@@ -18796,15 +18905,15 @@ Note that the particular values of @var{priority} do not matter; only their\n relative ordering.\n \n @item java_interface\n-@cindex @code{java_interface} attribute\n+@cindex @code{java_interface} type attribute\n \n This type attribute informs C++ that the class is a Java interface.  It may\n only be applied to classes declared within an @code{extern \"Java\"} block.\n Calls to methods declared in this interface are dispatched using GCJ's\n interface table mechanism, instead of regular virtual table dispatch.\n \n @item warn_unused\n-@cindex @code{warn_unused} attribute\n+@cindex @code{warn_unused} type attribute\n \n For C++ types with non-trivial constructors and/or destructors it is\n impossible for the compiler to determine whether a variable of this"}]}