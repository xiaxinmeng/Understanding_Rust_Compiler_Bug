{"sha": "34a72c3348688368e2a1b2184dbd05669cacbc75", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzRhNzJjMzM0ODY4ODM2OGUyYTFiMjE4NGRiZDA1NjY5Y2FjYmM3NQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-10-05T11:37:49Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-10-05T11:37:49Z"}, "message": "Remove REAL_VALUE_FROM_CONST_DOUBLE\n\nTo maintain symmetry after the previous removal of\nCONST_DOUBLE_FROM_REAL_VALUE, this patch also gets rid of\nREAL_VALUE_FROM_CONST_DOUBLE.  All the macro did was copy the\ncontents of CONST_DOUBLE_REAL_VALUE into a temporary real_value\nstructure.  In many cases there was no need for this temporary\nand we could simply use the CONST_DOUBLE_REAL_VALUE directly.\nFor that reason this patch is less automatic than the others.\n\nBootstrapped & regression-tested on x86_64-linux-gnu.  Also tested by\nbuilding one target per CPU directory and checking that there were\nno new warnings and no changes in testsuite output at -O2.\n\ngcc/\n\t* real.h (REAL_VALUE_FROM_CONST_DOUBLE): Delete.\n\t* config/aarch64/aarch64.c (aarch64_float_const_zero_rtx_p)\n\t(aarch64_print_operand, aarch64_float_const_representable_p)\n\t(aarch64_output_simd_mov_immediate): Use CONST_DOUBLE_REAL_VALUE\n\tinstead of REAL_VALUE_FROM_CONST_DOUBLE.\n\t* config/arc/arc.c (arc_print_operand): Likewise.\n\t* config/arm/arm.c (arm_const_double_rtx, vfp3_const_double_index)\n\t(neon_valid_immediate, arm_print_operand, arm_emit_fp16_const)\n\t(vfp3_const_double_for_fract_bits, vfp3_const_double_for_bits):\n\tLikewise.\n\t* config/arm/arm.md (*arm32_movhf, consttable_4, consttable_8)\n\t(consttable_16): Likewise.\n\t* config/arm/vfp.md (*movhf_vfp_neon, *movhf_vfp): Likewise.\n\t* config/avr/avr.c (avr_print_operand): Likewise.\n\t* config/bfin/bfin.md: Likewise (in a define_split).\n\t* config/c6x/c6x.md: Likewise (in a define_split).\n\t* config/cr16/cr16.c (cr16_const_double_ok): Likewise.\n\t(cr16_print_operand): Likewise.\n\t* config/cris/cris.c (cris_print_operand): Likewise.\n\t* config/epiphany/epiphany.c (epiphany_print_operand): Likewise.\n\t* config/fr30/fr30.c (fr30_print_operand): Likewise.\n\t(fr30_const_double_is_zero): Likewise.\n\t* config/frv/frv.c (frv_print_operand, output_move_single): Likewise.\n\t* config/frv/frv.md: Likewise (in a define_split).\n\t* config/frv/predicates.md (int_2word_operand): Likewise.\n\t* config/h8300/h8300.c (h8300_print_operand): Likewise.\n\t* config/i386/i386.c (standard_80387_constant_p): Likewise.\n\t(ix86_print_operand, ix86_split_to_parts): Likewise.\n\t* config/i386/i386.md: Likewise (in a define_split).\n\t* config/ia64/ia64.c (ia64_split_tmode, ia64_print_operand): Likewise.\n\t* config/iq2000/iq2000.md (movsf_lo_sum, movsf_high): Likewise.\n\t* config/m32r/m32r.c (easy_df_const, m32r_print_operand): Likewise.\n\t* config/m68k/m68k.c (handle_move_double, standard_68881_constant_p)\n\t(print_operand): Likewise.\n\t* config/m68k/m68k.md (movsf_cf_hard, movdf_cf_hard): Likewise.\n\t* config/mep/mep.md: Likewise (in define_split).\n\t* config/microblaze/microblaze.c (microblaze_const_double_ok)\n\t(print_operand): Likewise.\n\t* config/mips/mips.md (consttable_float): Likewise.\n\t* config/mmix/mmix.c (mmix_intval): Likewise.\n\t* config/mn10300/mn10300.c (mn10300_print_operand): Likewise.\n\t* config/nvptx/nvptx.c (nvptx_print_operand): Likewise.\n\t* config/pa/pa.c (pa_singlemove_string): Likewise.\n\t* config/pdp11/pdp11.c (pdp11_expand_operands): Likewise.\n\t(pdp11_asm_print_operand, legitimate_const_double_p): Likewise.\n\t* config/rs6000/rs6000.c (num_insns_constant, rs6000_emit_cmove)\n\t(output_toc): Likewise.\n\t* config/rs6000/rs6000.md: Likewise (in define_splits).\n\t* config/rx/rx.c (rx_print_operand): Likewise.\n\t* config/s390/s390.c (s390_output_pool_entry): Likewise.\n\t* config/sh/sh.c (fp_zero_operand, fp_one_operand): Likewise.\n\t* config/sh/sh.md (consttable_sf, consttable_df): Likewise\n\t(and also in define_splits).\n\t* config/sparc/sparc.c (fp_sethi_p, fp_mov_p): Likewise.\n\t(fp_high_losum_p): Likewise.\n\t* config/sparc/sparc.md (*movsf_insn, *movsf_lo_sum): Likewise.\n\t(*movsf_high): Likewise.\n\t* config/spu/spu.c (const_double_to_hwint): Likewise.\n\t* config/v850/v850.c (const_double_split): Likewise.\n\t* config/vax/vax.c (vax_float_literal): Likewise.\n\t* config/visium/visium.c (visium_expand_copysign): Likewise.\n\t* config/visium/visium.md: Likewise (in define_split).\n\t* config/xtensa/predicates.md (const_float_1_operand): Likewise.\n\t* config/xtensa/xtensa.c (print_operand): Likewise.\n\t(xtensa_output_literal): Likewise.\n\t* cprop.c (implicit_set_cond_p): Likewise.\n\t* dwarf2out.c (insert_float): Likewise.\n\t* expmed.c (expand_mult, make_tree): Likewise.\n\t* expr.c (compress_float_constant): Likewise.\n\t* rtlanal.c (split_double): Likewise.\n\t* simplify-rtx.c (avoid_constant_pool_reference): Likewise.\n\t(simplify_const_unary_operation, simplify_binary_operation_1)\n\t(simplify_const_binary_operation): Likewise.\n\t(simplify_const_relational_operation): Likewise.\n\t* varasm.c (output_constant_pool_2): Likewise.\n\nFrom-SVN: r228478", "tree": {"sha": "485a3faa34e28a49425e690f198aba8a995f7684", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/485a3faa34e28a49425e690f198aba8a995f7684"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34a72c3348688368e2a1b2184dbd05669cacbc75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34a72c3348688368e2a1b2184dbd05669cacbc75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34a72c3348688368e2a1b2184dbd05669cacbc75", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34a72c3348688368e2a1b2184dbd05669cacbc75/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "555affd7a4f447571131895d618c42073d0dd973", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/555affd7a4f447571131895d618c42073d0dd973", "html_url": "https://github.com/Rust-GCC/gccrs/commit/555affd7a4f447571131895d618c42073d0dd973"}], "stats": {"total": 737, "additions": 294, "deletions": 443}, "files": [{"sha": "aade459a00e58da7827d2ae8e4008c001f6df2bd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=34a72c3348688368e2a1b2184dbd05669cacbc75", "patch": "@@ -1,3 +1,81 @@\n+2015-10-05  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* real.h (REAL_VALUE_FROM_CONST_DOUBLE): Delete.\n+\t* config/aarch64/aarch64.c (aarch64_float_const_zero_rtx_p)\n+\t(aarch64_print_operand, aarch64_float_const_representable_p)\n+\t(aarch64_output_simd_mov_immediate): Use CONST_DOUBLE_REAL_VALUE\n+\tinstead of REAL_VALUE_FROM_CONST_DOUBLE.\n+\t* config/arc/arc.c (arc_print_operand): Likewise.\n+\t* config/arm/arm.c (arm_const_double_rtx, vfp3_const_double_index)\n+\t(neon_valid_immediate, arm_print_operand, arm_emit_fp16_const)\n+\t(vfp3_const_double_for_fract_bits, vfp3_const_double_for_bits):\n+\tLikewise.\n+\t* config/arm/arm.md (*arm32_movhf, consttable_4, consttable_8)\n+\t(consttable_16): Likewise.\n+\t* config/arm/vfp.md (*movhf_vfp_neon, *movhf_vfp): Likewise.\n+\t* config/avr/avr.c (avr_print_operand): Likewise.\n+\t* config/bfin/bfin.md: Likewise (in a define_split).\n+\t* config/c6x/c6x.md: Likewise (in a define_split).\n+\t* config/cr16/cr16.c (cr16_const_double_ok): Likewise.\n+\t(cr16_print_operand): Likewise.\n+\t* config/cris/cris.c (cris_print_operand): Likewise.\n+\t* config/epiphany/epiphany.c (epiphany_print_operand): Likewise.\n+\t* config/fr30/fr30.c (fr30_print_operand): Likewise.\n+\t(fr30_const_double_is_zero): Likewise.\n+\t* config/frv/frv.c (frv_print_operand, output_move_single): Likewise.\n+\t* config/frv/frv.md: Likewise (in a define_split).\n+\t* config/frv/predicates.md (int_2word_operand): Likewise.\n+\t* config/h8300/h8300.c (h8300_print_operand): Likewise.\n+\t* config/i386/i386.c (standard_80387_constant_p): Likewise.\n+\t(ix86_print_operand, ix86_split_to_parts): Likewise.\n+\t* config/i386/i386.md: Likewise (in a define_split).\n+\t* config/ia64/ia64.c (ia64_split_tmode, ia64_print_operand): Likewise.\n+\t* config/iq2000/iq2000.md (movsf_lo_sum, movsf_high): Likewise.\n+\t* config/m32r/m32r.c (easy_df_const, m32r_print_operand): Likewise.\n+\t* config/m68k/m68k.c (handle_move_double, standard_68881_constant_p)\n+\t(print_operand): Likewise.\n+\t* config/m68k/m68k.md (movsf_cf_hard, movdf_cf_hard): Likewise.\n+\t* config/mep/mep.md: Likewise (in define_split).\n+\t* config/microblaze/microblaze.c (microblaze_const_double_ok)\n+\t(print_operand): Likewise.\n+\t* config/mips/mips.md (consttable_float): Likewise.\n+\t* config/mmix/mmix.c (mmix_intval): Likewise.\n+\t* config/mn10300/mn10300.c (mn10300_print_operand): Likewise.\n+\t* config/nvptx/nvptx.c (nvptx_print_operand): Likewise.\n+\t* config/pa/pa.c (pa_singlemove_string): Likewise.\n+\t* config/pdp11/pdp11.c (pdp11_expand_operands): Likewise.\n+\t(pdp11_asm_print_operand, legitimate_const_double_p): Likewise.\n+\t* config/rs6000/rs6000.c (num_insns_constant, rs6000_emit_cmove)\n+\t(output_toc): Likewise.\n+\t* config/rs6000/rs6000.md: Likewise (in define_splits).\n+\t* config/rx/rx.c (rx_print_operand): Likewise.\n+\t* config/s390/s390.c (s390_output_pool_entry): Likewise.\n+\t* config/sh/sh.c (fp_zero_operand, fp_one_operand): Likewise.\n+\t* config/sh/sh.md (consttable_sf, consttable_df): Likewise\n+\t(and also in define_splits).\n+\t* config/sparc/sparc.c (fp_sethi_p, fp_mov_p): Likewise.\n+\t(fp_high_losum_p): Likewise.\n+\t* config/sparc/sparc.md (*movsf_insn, *movsf_lo_sum): Likewise.\n+\t(*movsf_high): Likewise.\n+\t* config/spu/spu.c (const_double_to_hwint): Likewise.\n+\t* config/v850/v850.c (const_double_split): Likewise.\n+\t* config/vax/vax.c (vax_float_literal): Likewise.\n+\t* config/visium/visium.c (visium_expand_copysign): Likewise.\n+\t* config/visium/visium.md: Likewise (in define_split).\n+\t* config/xtensa/predicates.md (const_float_1_operand): Likewise.\n+\t* config/xtensa/xtensa.c (print_operand): Likewise.\n+\t(xtensa_output_literal): Likewise.\n+\t* cprop.c (implicit_set_cond_p): Likewise.\n+\t* dwarf2out.c (insert_float): Likewise.\n+\t* expmed.c (expand_mult, make_tree): Likewise.\n+\t* expr.c (compress_float_constant): Likewise.\n+\t* rtlanal.c (split_double): Likewise.\n+\t* simplify-rtx.c (avoid_constant_pool_reference): Likewise.\n+\t(simplify_const_unary_operation, simplify_binary_operation_1)\n+\t(simplify_const_binary_operation): Likewise.\n+\t(simplify_const_relational_operation): Likewise.\n+\t* varasm.c (output_constant_pool_2): Likewise.\n+\n 2015-10-05  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* real.h (CONST_DOUBLE_ATOF): Use const_double_from_real_value"}, {"sha": "c9fe368eeb7816e27d21d1346ee11b61fd36af7f", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=34a72c3348688368e2a1b2184dbd05669cacbc75", "patch": "@@ -3763,15 +3763,12 @@ aarch64_legitimate_address_p (machine_mode mode, rtx x,\n bool\n aarch64_float_const_zero_rtx_p (rtx x)\n {\n-  REAL_VALUE_TYPE r;\n-\n   if (GET_MODE (x) == VOIDmode)\n     return false;\n \n-  REAL_VALUE_FROM_CONST_DOUBLE (r, x);\n-  if (REAL_VALUE_MINUS_ZERO (r))\n+  if (REAL_VALUE_MINUS_ZERO (*CONST_DOUBLE_REAL_VALUE (x)))\n     return !HONOR_SIGNED_ZEROS (GET_MODE (x));\n-  return real_equal (&r, &dconst0);\n+  return real_equal (CONST_DOUBLE_REAL_VALUE (x), &dconst0);\n }\n \n /* Return the fixed registers used for condition codes.  */\n@@ -4401,9 +4398,8 @@ aarch64_print_operand (FILE *f, rtx x, char code)\n \t    {\n #define buf_size 20\n \t      char float_buf[buf_size] = {'\\0'};\n-\t      REAL_VALUE_TYPE r;\n-\t      REAL_VALUE_FROM_CONST_DOUBLE (r, x);\n-\t      real_to_decimal_for_mode (float_buf, &r,\n+\t      real_to_decimal_for_mode (float_buf,\n+\t\t\t\t\tCONST_DOUBLE_REAL_VALUE (x),\n \t\t\t\t\tbuf_size, buf_size,\n \t\t\t\t\t1, GET_MODE (x));\n \t      asm_fprintf (asm_out_file, \"%s\", float_buf);\n@@ -11309,7 +11305,7 @@ aarch64_float_const_representable_p (rtx x)\n   if (GET_MODE (x) == VOIDmode || GET_MODE (x) == HFmode)\n     return false;\n \n-  REAL_VALUE_FROM_CONST_DOUBLE (r, x);\n+  r = *CONST_DOUBLE_REAL_VALUE (x);\n \n   /* We cannot represent infinities, NaNs or +/-zero.  We won't\n      know if we have +zero until we analyse the mantissa, but we\n@@ -11401,10 +11397,10 @@ aarch64_output_simd_mov_immediate (rtx const_vector,\n       else\n \t{\n #define buf_size 20\n-\t  REAL_VALUE_TYPE r;\n-\t  REAL_VALUE_FROM_CONST_DOUBLE (r, info.value);\n \t  char float_buf[buf_size] = {'\\0'};\n-\t  real_to_decimal_for_mode (float_buf, &r, buf_size, buf_size, 1, mode);\n+\t  real_to_decimal_for_mode (float_buf,\n+\t\t\t\t    CONST_DOUBLE_REAL_VALUE (info.value),\n+\t\t\t\t    buf_size, buf_size, 1, mode);\n #undef buf_size\n \n \t  if (lane_count == 1)"}, {"sha": "1f4bfed5daeb65ee5b9e2b2d27bb468f5868957b", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=34a72c3348688368e2a1b2184dbd05669cacbc75", "patch": "@@ -3178,11 +3178,9 @@ arc_print_operand (FILE *file, rtx x, int code)\n       /* We handle SFmode constants here as output_addr_const doesn't.  */\n       if (GET_MODE (x) == SFmode)\n \t{\n-\t  REAL_VALUE_TYPE d;\n \t  long l;\n \n-\t  REAL_VALUE_FROM_CONST_DOUBLE (d, x);\n-\t  REAL_VALUE_TO_TARGET_SINGLE (d, l);\n+\t  REAL_VALUE_TO_TARGET_SINGLE (*CONST_DOUBLE_REAL_VALUE (x), l);\n \t  fprintf (file, \"0x%08lx\", l);\n \t  break;\n \t}"}, {"sha": "87e55e9e35082fbdb0cf1172a1b0343ba23927d5", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 17, "deletions": 28, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=34a72c3348688368e2a1b2184dbd05669cacbc75", "patch": "@@ -12098,16 +12098,16 @@ init_fp_table (void)\n int\n arm_const_double_rtx (rtx x)\n {\n-  REAL_VALUE_TYPE r;\n+  const REAL_VALUE_TYPE *r;\n \n   if (!fp_consts_inited)\n     init_fp_table ();\n \n-  REAL_VALUE_FROM_CONST_DOUBLE (r, x);\n-  if (REAL_VALUE_MINUS_ZERO (r))\n+  r = CONST_DOUBLE_REAL_VALUE (x);\n+  if (REAL_VALUE_MINUS_ZERO (*r))\n     return 0;\n \n-  if (real_equal (&r, &value_fp0))\n+  if (real_equal (r, &value_fp0))\n     return 1;\n \n   return 0;\n@@ -12144,7 +12144,7 @@ vfp3_const_double_index (rtx x)\n   if (!TARGET_VFP3 || !CONST_DOUBLE_P (x))\n     return -1;\n \n-  REAL_VALUE_FROM_CONST_DOUBLE (r, x);\n+  r = *CONST_DOUBLE_REAL_VALUE (x);\n \n   /* We can't represent these things, so detect them first.  */\n   if (REAL_VALUE_ISINF (r) || REAL_VALUE_ISNAN (r) || REAL_VALUE_MINUS_ZERO (r))\n@@ -12305,21 +12305,17 @@ neon_valid_immediate (rtx op, machine_mode mode, int inverse,\n   if (GET_MODE_CLASS (mode) == MODE_VECTOR_FLOAT)\n     {\n       rtx el0 = CONST_VECTOR_ELT (op, 0);\n-      REAL_VALUE_TYPE r0;\n+      const REAL_VALUE_TYPE *r0;\n \n       if (!vfp3_const_double_rtx (el0) && el0 != CONST0_RTX (GET_MODE (el0)))\n         return -1;\n \n-      REAL_VALUE_FROM_CONST_DOUBLE (r0, el0);\n+      r0 = CONST_DOUBLE_REAL_VALUE (el0);\n \n       for (i = 1; i < n_elts; i++)\n         {\n           rtx elt = CONST_VECTOR_ELT (op, i);\n-          REAL_VALUE_TYPE re;\n-\n-          REAL_VALUE_FROM_CONST_DOUBLE (re, elt);\n-\n-          if (!real_equal (&r0, &re))\n+          if (!real_equal (r0, CONST_DOUBLE_REAL_VALUE (elt)))\n             return -1;\n         }\n \n@@ -21843,8 +21839,7 @@ arm_print_operand (FILE *stream, rtx x, int code)\n     case 'N':\n       {\n \tREAL_VALUE_TYPE r;\n-\tREAL_VALUE_FROM_CONST_DOUBLE (r, x);\n-\tr = real_value_negate (&r);\n+\tr = real_value_negate (CONST_DOUBLE_REAL_VALUE (x));\n \tfprintf (stream, \"%s\", fp_const_from_val (&r));\n       }\n       return;\n@@ -22638,13 +22633,9 @@ arm_assemble_integer (rtx x, unsigned int size, int aligned_p)\n         for (i = 0; i < units; i++)\n           {\n             rtx elt = CONST_VECTOR_ELT (x, i);\n-            REAL_VALUE_TYPE rval;\n-\n-            REAL_VALUE_FROM_CONST_DOUBLE (rval, elt);\n-\n             assemble_real\n-              (rval, GET_MODE_INNER (mode),\n-              i == 0 ? BIGGEST_ALIGNMENT : size * BITS_PER_UNIT);\n+              (*CONST_DOUBLE_REAL_VALUE (elt), GET_MODE_INNER (mode),\n+\t       i == 0 ? BIGGEST_ALIGNMENT : size * BITS_PER_UNIT);\n           }\n \n       return true;\n@@ -26251,11 +26242,9 @@ arm_emit_vector_const (FILE *file, rtx x)\n void\n arm_emit_fp16_const (rtx c)\n {\n-  REAL_VALUE_TYPE r;\n   long bits;\n \n-  REAL_VALUE_FROM_CONST_DOUBLE (r, c);\n-  bits = real_to_target (NULL, &r, HFmode);\n+  bits = real_to_target (NULL, CONST_DOUBLE_REAL_VALUE (c), HFmode);\n   if (WORDS_BIG_ENDIAN)\n     assemble_zeros (2);\n   assemble_integer (GEN_INT (bits), 2, BITS_PER_WORD, 1);\n@@ -27729,7 +27718,7 @@ vfp3_const_double_for_fract_bits (rtx operand)\n   if (!CONST_DOUBLE_P (operand))\n     return 0;\n   \n-  REAL_VALUE_FROM_CONST_DOUBLE (r0, operand);\n+  r0 = *CONST_DOUBLE_REAL_VALUE (operand);\n   if (exact_real_inverse (DFmode, &r0)\n       && !REAL_VALUE_NEGATIVE (r0))\n     {\n@@ -27747,15 +27736,15 @@ vfp3_const_double_for_fract_bits (rtx operand)\n int\n vfp3_const_double_for_bits (rtx operand)\n {\n-  REAL_VALUE_TYPE r0;\n+  const REAL_VALUE_TYPE *r0;\n \n   if (!CONST_DOUBLE_P (operand))\n     return 0;\n \n-  REAL_VALUE_FROM_CONST_DOUBLE (r0, operand);\n-  if (exact_real_truncate (DFmode, &r0))\n+  r0 = CONST_DOUBLE_REAL_VALUE (operand);\n+  if (exact_real_truncate (DFmode, r0))\n     {\n-      HOST_WIDE_INT value = real_to_integer (&r0);\n+      HOST_WIDE_INT value = real_to_integer (r0);\n       value = value & 0xffffffff;\n       if ((value != 0) && ( (value & (value - 1)) == 0))\n \treturn int_log2 (value);"}, {"sha": "b4c555be5927e30cb2b6e369feb0415c274cb353", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 13, "deletions": 23, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=34a72c3348688368e2a1b2184dbd05669cacbc75", "patch": "@@ -6634,12 +6634,11 @@\n       return \\\"mov%?\\\\t%0, %1\\\\t%@ __fp16\\\";\n     case 3:\t/* ARM register from constant */\n       {\n-\tREAL_VALUE_TYPE r;\n \tlong bits;\n \trtx ops[4];\n \n-\tREAL_VALUE_FROM_CONST_DOUBLE (r, operands[1]);\n-\tbits = real_to_target (NULL, &r, HFmode);\n+\tbits = real_to_target (NULL, CONST_DOUBLE_REAL_VALUE (operands[1]),\n+\t\t\t       HFmode);\n \tops[0] = operands[0];\n \tops[1] = GEN_INT (bits);\n \tops[2] = GEN_INT (bits & 0xff00);\n@@ -10854,12 +10853,9 @@\n     switch (GET_MODE_CLASS (GET_MODE (x)))\n       {\n       case MODE_FLOAT:\n-\t{\n-\t  REAL_VALUE_TYPE r;\n-\t  REAL_VALUE_FROM_CONST_DOUBLE (r, x);\n-\t  assemble_real (r, GET_MODE (x), BITS_PER_WORD);\n-\t  break;\n-\t}\n+\tassemble_real (*CONST_DOUBLE_REAL_VALUE (x), GET_MODE (x),\n+\t\t       BITS_PER_WORD);\n+\tbreak;\n       default:\n \t/* XXX: Sometimes gcc does something really dumb and ends up with\n \t   a HIGH in a constant pool entry, usually because it's trying to\n@@ -10886,13 +10882,10 @@\n     making_const_table = TRUE;\n     switch (GET_MODE_CLASS (GET_MODE (operands[0])))\n       {\n-       case MODE_FLOAT:\n-        {\n-          REAL_VALUE_TYPE r;\n-          REAL_VALUE_FROM_CONST_DOUBLE (r, operands[0]);\n-          assemble_real (r, GET_MODE (operands[0]), BITS_PER_WORD);\n-          break;\n-        }\n+      case MODE_FLOAT:\n+\tassemble_real (*CONST_DOUBLE_REAL_VALUE (operands[0]),\n+\t\t       GET_MODE (operands[0]), BITS_PER_WORD);\n+\tbreak;\n       default:\n         assemble_integer (operands[0], 8, BITS_PER_WORD, 1);\n         break;\n@@ -10911,13 +10904,10 @@\n     making_const_table = TRUE;\n     switch (GET_MODE_CLASS (GET_MODE (operands[0])))\n       {\n-       case MODE_FLOAT:\n-        {\n-          REAL_VALUE_TYPE r;\n-          REAL_VALUE_FROM_CONST_DOUBLE (r, operands[0]);\n-          assemble_real (r, GET_MODE (operands[0]), BITS_PER_WORD);\n-          break;\n-        }\n+      case MODE_FLOAT:\n+\tassemble_real (*CONST_DOUBLE_REAL_VALUE (operands[0]),\n+\t\t       GET_MODE (operands[0]), BITS_PER_WORD);\n+\tbreak;\n       default:\n         assemble_integer (operands[0], 16, BITS_PER_WORD, 1);\n         break;"}, {"sha": "baeac622d2967a6b96a80f6615403812d76c5658", "filename": "gcc/config/arm/vfp.md", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Farm%2Fvfp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Farm%2Fvfp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvfp.md?ref=34a72c3348688368e2a1b2184dbd05669cacbc75", "patch": "@@ -238,12 +238,11 @@\n       return \\\"vmov\\\\t%0, %1\\\";\n     case 8:\t/* ARM register from constant */\n       {\n-        REAL_VALUE_TYPE r;\n \tlong bits;\n \trtx ops[4];\n \n-        REAL_VALUE_FROM_CONST_DOUBLE (r, operands[1]);\n-\tbits = real_to_target (NULL, &r, HFmode);\n+\tbits = real_to_target (NULL, CONST_DOUBLE_REAL_VALUE (operands[1]),\n+\t\t\t       HFmode);\n \tops[0] = operands[0];\n \tops[1] = GEN_INT (bits);\n \tops[2] = GEN_INT (bits & 0xff00);\n@@ -289,12 +288,11 @@\n       return \\\"vmov\\\\t%0, %1\\\";\n     case 6:\t/* ARM register from constant */\n       {\n-        REAL_VALUE_TYPE r;\n \tlong bits;\n \trtx ops[4];\n \n-        REAL_VALUE_FROM_CONST_DOUBLE (r, operands[1]);\n-\tbits = real_to_target (NULL, &r, HFmode);\n+\tbits = real_to_target (NULL, CONST_DOUBLE_REAL_VALUE (operands[1]),\n+\t\t\t       HFmode);\n \tops[0] = operands[0];\n \tops[1] = GEN_INT (bits);\n \tops[2] = GEN_INT (bits & 0xff00);"}, {"sha": "4963488e63556a44d48ee6285f6a69df18c9753a", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=34a72c3348688368e2a1b2184dbd05669cacbc75", "patch": "@@ -2431,11 +2431,9 @@ avr_print_operand (FILE *file, rtx x, int code)\n   else if (GET_CODE (x) == CONST_DOUBLE)\n     {\n       long val;\n-      REAL_VALUE_TYPE rv;\n       if (GET_MODE (x) != SFmode)\n         fatal_insn (\"internal compiler error.  Unknown mode:\", x);\n-      REAL_VALUE_FROM_CONST_DOUBLE (rv, x);\n-      REAL_VALUE_TO_TARGET_SINGLE (rv, val);\n+      REAL_VALUE_TO_TARGET_SINGLE (*CONST_DOUBLE_REAL_VALUE (x), val);\n       fprintf (file, \"0x%lx\", val);\n     }\n   else if (GET_CODE (x) == CONST_STRING)"}, {"sha": "18152eef1e52d10f3b60e1696b6eba2649ff4313", "filename": "gcc/config/bfin/bfin.md", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Fbfin%2Fbfin.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Fbfin%2Fbfin.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.md?ref=34a72c3348688368e2a1b2184dbd05669cacbc75", "patch": "@@ -848,12 +848,10 @@\n    (set (match_dup 2) (lo_sum:SI (match_dup 2) (match_dup 3)))]\n {\n   long values;\n-  REAL_VALUE_TYPE value;\n \n   gcc_assert (GET_CODE (operands[1]) == CONST_DOUBLE);\n \n-  REAL_VALUE_FROM_CONST_DOUBLE (value, operands[1]);\n-  REAL_VALUE_TO_TARGET_SINGLE (value, values);\n+  REAL_VALUE_TO_TARGET_SINGLE (*CONST_DOUBLE_REAL_VALUE (operands[1]), values);\n \n   operands[2] = gen_rtx_REG (SImode, true_regnum (operands[0]));\n   operands[3] = GEN_INT (trunc_int_for_mode (values, SImode));"}, {"sha": "fa8958719ef87c023b577105f318558fee2a65fe", "filename": "gcc/config/c6x/c6x.md", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Fc6x%2Fc6x.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Fc6x%2Fc6x.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x.md?ref=34a72c3348688368e2a1b2184dbd05669cacbc75", "patch": "@@ -549,12 +549,10 @@\n \t\t\t      (ashift:SI (match_dup 4) (const_int 16))))]\n {\n   long values;\n-  REAL_VALUE_TYPE value;\n \n   gcc_assert (GET_CODE (operands[1]) == CONST_DOUBLE);\n \n-  REAL_VALUE_FROM_CONST_DOUBLE (value, operands[1]);\n-  REAL_VALUE_TO_TARGET_SINGLE (value, values);\n+  REAL_VALUE_TO_TARGET_SINGLE (*CONST_DOUBLE_REAL_VALUE (operands[1]), values);\n \n   operands[2] = gen_rtx_REG (SImode, true_regnum (operands[0]));\n   operands[3] = GEN_INT (trunc_int_for_mode (values, HImode));"}, {"sha": "accb605796fb61570fe32cac476bbdb856348171", "filename": "gcc/config/cr16/cr16.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Fcr16%2Fcr16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Fcr16%2Fcr16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcr16%2Fcr16.c?ref=34a72c3348688368e2a1b2184dbd05669cacbc75", "patch": "@@ -1386,10 +1386,8 @@ cr16_const_double_ok (rtx op)\n {\n   if (GET_MODE (op) == SFmode)\n     {\n-      REAL_VALUE_TYPE r;\n       long l;\n-      REAL_VALUE_FROM_CONST_DOUBLE (r, op);\n-      REAL_VALUE_TO_TARGET_SINGLE (r, l);\n+      REAL_VALUE_TO_TARGET_SINGLE (*CONST_DOUBLE_REAL_VALUE (op), l);\n       return UNSIGNED_INT_FITS_N_BITS (l, 4) ? 1 : 0;\n     }\n \n@@ -1521,11 +1519,9 @@ cr16_print_operand (FILE * file, rtx x, int code)\n \n \tcase CONST_DOUBLE:\n \t  {\n-\t    REAL_VALUE_TYPE r;\n \t    long l;\n \n-\t    REAL_VALUE_FROM_CONST_DOUBLE (r, x);\n-\t    REAL_VALUE_TO_TARGET_SINGLE (r, l);\n+\t    REAL_VALUE_TO_TARGET_SINGLE (*CONST_DOUBLE_REAL_VALUE (x), l);\n \n \t    fprintf (file, \"$0x%lx\", l);\n \t    return;"}, {"sha": "e4ab65f6d0610c55aed8658ce7cbb928dfd05807", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=34a72c3348688368e2a1b2184dbd05669cacbc75", "patch": "@@ -1154,14 +1154,11 @@ cris_print_operand (FILE *file, rtx x, int code)\n       else\n \t{\n \t  /* Only single precision is allowed as plain operands the\n-\t     moment.  FIXME:  REAL_VALUE_FROM_CONST_DOUBLE isn't\n-\t     documented.  */\n-\t  REAL_VALUE_TYPE r;\n+\t     moment.  */\n \t  long l;\n \n \t  /* FIXME:  Perhaps check overflow of the \"single\".  */\n-\t  REAL_VALUE_FROM_CONST_DOUBLE (r, operand);\n-\t  REAL_VALUE_TO_TARGET_SINGLE (r, l);\n+\t  REAL_VALUE_TO_TARGET_SINGLE (*CONST_DOUBLE_REAL_VALUE (operand), l);\n \n \t  fprintf (file, \"0x%lx\", l);\n \t}"}, {"sha": "a87c98f5a2b304bc09f48408cc186cd51d3ded78", "filename": "gcc/config/epiphany/epiphany.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.c?ref=34a72c3348688368e2a1b2184dbd05669cacbc75", "patch": "@@ -1362,11 +1362,9 @@ epiphany_print_operand (FILE *file, rtx x, int code)\n       /* We handle SFmode constants here as output_addr_const doesn't.  */\n       if (GET_MODE (x) == SFmode)\n \t{\n-\t  REAL_VALUE_TYPE d;\n \t  long l;\n \n-\t  REAL_VALUE_FROM_CONST_DOUBLE (d, x);\n-\t  REAL_VALUE_TO_TARGET_SINGLE (d, l);\n+\t  REAL_VALUE_TO_TARGET_SINGLE (*CONST_DOUBLE_REAL_VALUE (x), l);\n \t  fprintf (file, \"%s0x%08lx\", IMMEDIATE_PREFIX, l);\n \t  break;\n \t}"}, {"sha": "6afd5d40a760cbcd62c16d8c1ba994cc1ee87e7c", "filename": "gcc/config/fr30/fr30.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Ffr30%2Ffr30.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Ffr30%2Ffr30.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.c?ref=34a72c3348688368e2a1b2184dbd05669cacbc75", "patch": "@@ -699,11 +699,9 @@ fr30_print_operand (FILE *file, rtx x, int code)\n       /* We handle SFmode constants here as output_addr_const doesn't.  */\n       if (GET_MODE (x) == SFmode)\n \t{\n-\t  REAL_VALUE_TYPE d;\n \t  long l;\n \n-\t  REAL_VALUE_FROM_CONST_DOUBLE (d, x);\n-\t  REAL_VALUE_TO_TARGET_SINGLE (d, l);\n+\t  REAL_VALUE_TO_TARGET_SINGLE (*CONST_DOUBLE_REAL_VALUE (x), l);\n \t  fprintf (file, \"0x%08lx\", l);\n \t  break;\n \t}\n@@ -888,14 +886,10 @@ fr30_check_multiple_regs (rtx *operands, int num_operands, int descending)\n int\n fr30_const_double_is_zero (rtx operand)\n {\n-  REAL_VALUE_TYPE d;\n-\n   if (operand == NULL || GET_CODE (operand) != CONST_DOUBLE)\n     return 0;\n \n-  REAL_VALUE_FROM_CONST_DOUBLE (d, operand);\n-\n-  return real_equal (&d, &dconst0);\n+  return real_equal (CONST_DOUBLE_REAL_VALUE (operand), &dconst0);\n }\n \n /*}}}*/"}, {"sha": "9e355b25168dc08bf65400215078fb3f5de38fbb", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=34a72c3348688368e2a1b2184dbd05669cacbc75", "patch": "@@ -2767,11 +2767,9 @@ frv_print_operand (FILE * file, rtx x, int code)\n     {\n       if (GET_MODE (x) == SFmode)\n \t{\n-\t  REAL_VALUE_TYPE rv;\n \t  long l;\n \n-\t  REAL_VALUE_FROM_CONST_DOUBLE (rv, x);\n-\t  REAL_VALUE_TO_TARGET_SINGLE (rv, l);\n+\t  REAL_VALUE_TO_TARGET_SINGLE (*CONST_DOUBLE_REAL_VALUE (x), l);\n \t  value = l;\n \t}\n \n@@ -4290,11 +4288,10 @@ output_move_single (rtx operands[], rtx insn)\n \n \t      else if (mode == SFmode)\n \t\t{\n-\t\t  REAL_VALUE_TYPE rv;\n \t\t  long l;\n \n-\t\t  REAL_VALUE_FROM_CONST_DOUBLE (rv, src);\n-\t\t  REAL_VALUE_TO_TARGET_SINGLE (rv, l);\n+\t\t  REAL_VALUE_TO_TARGET_SINGLE\n+\t\t    (*CONST_DOUBLE_REAL_VALUE (src), l);\n \t\t  value = l;\n \t\t}\n "}, {"sha": "0604b239080d9e356072d3c220de344795db19d0", "filename": "gcc/config/frv/frv.md", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Ffrv%2Ffrv.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Ffrv%2Ffrv.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.md?ref=34a72c3348688368e2a1b2184dbd05669cacbc75", "patch": "@@ -1870,11 +1870,9 @@\n {\n   rtx op0 = operands[0];\n   rtx op1 = operands[1];\n-  REAL_VALUE_TYPE rv;\n   long l[2];\n \n-  REAL_VALUE_FROM_CONST_DOUBLE (rv, op1);\n-  REAL_VALUE_TO_TARGET_DOUBLE (rv, l);\n+  REAL_VALUE_TO_TARGET_DOUBLE (*CONST_DOUBLE_REAL_VALUE (op1), l);\n \n   operands[2] = gen_highpart (SImode, op0);\n   operands[3] = gen_lowpart (SImode, op0);"}, {"sha": "ad834a56444caa8fb57052cc4f66d48d2a5d9295", "filename": "gcc/config/frv/predicates.md", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Ffrv%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Ffrv%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Fpredicates.md?ref=34a72c3348688368e2a1b2184dbd05669cacbc75", "patch": "@@ -504,7 +504,6 @@\n   (match_code \"const_int,const_double,symbol_ref,label_ref,const\")\n {\n   HOST_WIDE_INT value;\n-  REAL_VALUE_TYPE rv;\n   long l;\n \n   switch (GET_CODE (op))\n@@ -540,8 +539,7 @@\n     case CONST_DOUBLE:\n       if (GET_MODE (op) == SFmode)\n \t{\n-\t  REAL_VALUE_FROM_CONST_DOUBLE (rv, op);\n-\t  REAL_VALUE_TO_TARGET_SINGLE (rv, l);\n+\t  REAL_VALUE_TO_TARGET_SINGLE (*CONST_DOUBLE_REAL_VALUE (op), l);\n \t  value = l;\n \t  return ! IN_RANGE (value, -32768, 32767);\n \t}"}, {"sha": "1eef7bf796b1d9c38ec883aae5c76cb99e78cbc2", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=34a72c3348688368e2a1b2184dbd05669cacbc75", "patch": "@@ -1596,9 +1596,7 @@ h8300_print_operand (FILE *file, rtx x, int code)\n \tcase CONST_DOUBLE:\n \t  {\n \t    long val;\n-\t    REAL_VALUE_TYPE rv;\n-\t    REAL_VALUE_FROM_CONST_DOUBLE (rv, x);\n-\t    REAL_VALUE_TO_TARGET_SINGLE (rv, val);\n+\t    REAL_VALUE_TO_TARGET_SINGLE (*CONST_DOUBLE_REAL_VALUE (x), val);\n \t    fprintf (file, \"#%ld\", ((val >> 16) & 0xffff));\n \t    break;\n \t  }\n@@ -1626,9 +1624,7 @@ h8300_print_operand (FILE *file, rtx x, int code)\n \tcase CONST_DOUBLE:\n \t  {\n \t    long val;\n-\t    REAL_VALUE_TYPE rv;\n-\t    REAL_VALUE_FROM_CONST_DOUBLE (rv, x);\n-\t    REAL_VALUE_TO_TARGET_SINGLE (rv, val);\n+\t    REAL_VALUE_TO_TARGET_SINGLE (*CONST_DOUBLE_REAL_VALUE (x), val);\n \t    fprintf (file, \"#%ld\", (val & 0xffff));\n \t    break;\n \t  }\n@@ -1785,9 +1781,7 @@ h8300_print_operand (FILE *file, rtx x, int code)\n \tcase CONST_DOUBLE:\n \t  {\n \t    long val;\n-\t    REAL_VALUE_TYPE rv;\n-\t    REAL_VALUE_FROM_CONST_DOUBLE (rv, x);\n-\t    REAL_VALUE_TO_TARGET_SINGLE (rv, val);\n+\t    REAL_VALUE_TO_TARGET_SINGLE (*CONST_DOUBLE_REAL_VALUE (x), val);\n \t    fprintf (file, \"#%ld\", val);\n \t    break;\n \t  }"}, {"sha": "d59b59b1cd5bc68e30d086f7cd58c71579f18c21", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=34a72c3348688368e2a1b2184dbd05669cacbc75", "patch": "@@ -10480,7 +10480,7 @@ standard_80387_constant_p (rtx x)\n {\n   machine_mode mode = GET_MODE (x);\n \n-  REAL_VALUE_TYPE r;\n+  const REAL_VALUE_TYPE *r;\n \n   if (!(CONST_DOUBLE_P (x) && X87_FLOAT_MODE_P (mode)))\n     return -1;\n@@ -10490,7 +10490,7 @@ standard_80387_constant_p (rtx x)\n   if (x == CONST1_RTX (mode))\n     return 2;\n \n-  REAL_VALUE_FROM_CONST_DOUBLE (r, x);\n+  r = CONST_DOUBLE_REAL_VALUE (x);\n \n   /* For XFmode constants, try to find a special 80387 instruction when\n      optimizing for size or on those CPUs that benefit from them.  */\n@@ -10503,15 +10503,15 @@ standard_80387_constant_p (rtx x)\n \tinit_ext_80387_constants ();\n \n       for (i = 0; i < 5; i++)\n-        if (real_identical (&r, &ext_80387_constants_table[i]))\n+        if (real_identical (r, &ext_80387_constants_table[i]))\n \t  return i + 3;\n     }\n \n   /* Load of the constant -0.0 or -1.0 will be split as\n      fldz;fchs or fld1;fchs sequence.  */\n-  if (real_isnegzero (&r))\n+  if (real_isnegzero (r))\n     return 8;\n-  if (real_identical (&r, &dconstm1))\n+  if (real_identical (r, &dconstm1))\n     return 9;\n \n   return 0;\n@@ -17023,11 +17023,9 @@ ix86_print_operand (FILE *file, rtx x, int code)\n \n   else if (CONST_DOUBLE_P (x) && GET_MODE (x) == SFmode)\n     {\n-      REAL_VALUE_TYPE r;\n       long l;\n \n-      REAL_VALUE_FROM_CONST_DOUBLE (r, x);\n-      REAL_VALUE_TO_TARGET_SINGLE (r, l);\n+      REAL_VALUE_TO_TARGET_SINGLE (*CONST_DOUBLE_REAL_VALUE (x), l);\n \n       if (ASSEMBLER_DIALECT == ASM_ATT)\n \tputc ('$', file);\n@@ -17041,11 +17039,9 @@ ix86_print_operand (FILE *file, rtx x, int code)\n \n   else if (CONST_DOUBLE_P (x) && GET_MODE (x) == DFmode)\n     {\n-      REAL_VALUE_TYPE r;\n       long l[2];\n \n-      REAL_VALUE_FROM_CONST_DOUBLE (r, x);\n-      REAL_VALUE_TO_TARGET_DOUBLE (r, l);\n+      REAL_VALUE_TO_TARGET_DOUBLE (*CONST_DOUBLE_REAL_VALUE (x), l);\n \n       if (ASSEMBLER_DIALECT == ASM_ATT)\n \tputc ('$', file);\n@@ -23749,25 +23745,25 @@ ix86_split_to_parts (rtx operand, rtx *parts, machine_mode mode)\n \t    }\n \t  else if (CONST_DOUBLE_P (operand))\n \t    {\n-\t      REAL_VALUE_TYPE r;\n+\t      const REAL_VALUE_TYPE *r;\n \t      long l[4];\n \n-\t      REAL_VALUE_FROM_CONST_DOUBLE (r, operand);\n+\t      r = CONST_DOUBLE_REAL_VALUE (operand);\n \t      switch (mode)\n \t\t{\n \t\tcase TFmode:\n-\t\t  real_to_target (l, &r, mode);\n+\t\t  real_to_target (l, r, mode);\n \t\t  parts[3] = gen_int_mode (l[3], SImode);\n \t\t  parts[2] = gen_int_mode (l[2], SImode);\n \t\t  break;\n \t\tcase XFmode:\n \t\t  /* We can't use REAL_VALUE_TO_TARGET_LONG_DOUBLE since\n \t\t     long double may not be 80-bit.  */\n-\t\t  real_to_target (l, &r, mode);\n+\t\t  real_to_target (l, r, mode);\n \t\t  parts[2] = gen_int_mode (l[2], SImode);\n \t\t  break;\n \t\tcase DFmode:\n-\t\t  REAL_VALUE_TO_TARGET_DOUBLE (r, l);\n+\t\t  REAL_VALUE_TO_TARGET_DOUBLE (*r, l);\n \t\t  break;\n \t\tdefault:\n \t\t  gcc_unreachable ();\n@@ -23800,11 +23796,9 @@ ix86_split_to_parts (rtx operand, rtx *parts, machine_mode mode)\n \t    }\n \t  else if (CONST_DOUBLE_P (operand))\n \t    {\n-\t      REAL_VALUE_TYPE r;\n \t      long l[4];\n \n-\t      REAL_VALUE_FROM_CONST_DOUBLE (r, operand);\n-\t      real_to_target (l, &r, mode);\n+\t      real_to_target (l, CONST_DOUBLE_REAL_VALUE (operand), mode);\n \n \t      /* real_to_target puts 32-bit pieces in each long.  */\n \t      parts[0] ="}, {"sha": "5fcebb5cc6aea633d21e59b8e020def293f4980a", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=34a72c3348688368e2a1b2184dbd05669cacbc75", "patch": "@@ -3577,10 +3577,7 @@\n    (set (match_dup 0)\n \t(neg:X87MODEF (match_dup 0)))]\n {\n-  REAL_VALUE_TYPE r;\n-\n-  REAL_VALUE_FROM_CONST_DOUBLE (r, operands[1]);\n-  if (real_isnegzero (&r))\n+  if (real_isnegzero (CONST_DOUBLE_REAL_VALUE (operands[1])))\n     operands[1] = CONST0_RTX (<MODE>mode);\n   else\n     operands[1] = CONST1_RTX (<MODE>mode);"}, {"sha": "b495ac1d5a8309aa00934349b5b2cc5d6925e264", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=34a72c3348688368e2a1b2184dbd05669cacbc75", "patch": "@@ -1415,12 +1415,10 @@ ia64_split_tmode (rtx out[2], rtx in, bool reversed, bool dead)\n \t/* split_double does not understand how to split a TFmode\n \t   quantity into a pair of DImode constants.  */\n \t{\n-\t  REAL_VALUE_TYPE r;\n \t  unsigned HOST_WIDE_INT p[2];\n \t  long l[4];  /* TFmode is 128 bits */\n \n-\t  REAL_VALUE_FROM_CONST_DOUBLE (r, in);\n-\t  real_to_target (l, &r, TFmode);\n+\t  real_to_target (l, CONST_DOUBLE_REAL_VALUE (in), TFmode);\n \n \t  if (FLOAT_WORDS_BIG_ENDIAN)\n \t    {\n@@ -5362,9 +5360,7 @@ ia64_print_operand (FILE * file, rtx x, int code)\n     case 'G':\n       {\n \tlong val[4];\n-\tREAL_VALUE_TYPE rv;\n-\tREAL_VALUE_FROM_CONST_DOUBLE (rv, x);\n-\treal_to_target (val, &rv, GET_MODE (x));\n+\treal_to_target (val, CONST_DOUBLE_REAL_VALUE (x), GET_MODE (x));\n \tif (GET_MODE (x) == SFmode)\n \t  fprintf (file, \"0x%08lx\", val[0] & 0xffffffff);\n \telse if (GET_MODE (x) == DFmode)"}, {"sha": "a0306616b867a08a3667f7d02b59ae7ac8f3da18", "filename": "gcc/config/iq2000/iq2000.md", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Fiq2000%2Fiq2000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Fiq2000%2Fiq2000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.md?ref=34a72c3348688368e2a1b2184dbd05669cacbc75", "patch": "@@ -849,11 +849,9 @@\n   \"\"\n   \"*\n {\n-  REAL_VALUE_TYPE r;\n   long i;\n \n-  REAL_VALUE_FROM_CONST_DOUBLE (r, operands[2]);\n-  REAL_VALUE_TO_TARGET_SINGLE (r, i);\n+  REAL_VALUE_TO_TARGET_SINGLE (*CONST_DOUBLE_REAL_VALUE (operands[2]), i);\n   operands[2] = GEN_INT (i);\n   return \\\"addiu\\\\t%0,%1,%%lo(%2) # low\\\";\n }\"\n@@ -866,11 +864,9 @@\n   \"\"\n   \"*\n {\n-  REAL_VALUE_TYPE r;\n   long i;\n \n-  REAL_VALUE_FROM_CONST_DOUBLE (r, operands[1]);\n-  REAL_VALUE_TO_TARGET_SINGLE (r, i);\n+  REAL_VALUE_TO_TARGET_SINGLE (*CONST_DOUBLE_REAL_VALUE (operands[1]), i);\n   operands[1] = GEN_INT (i);\n   return \\\"lui\\\\t%0,%%hi(%1) # high\\\";\n }\""}, {"sha": "80fceb55f9c5dca5a984c8c5dd3f862bd6494c8d", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=34a72c3348688368e2a1b2184dbd05669cacbc75", "patch": "@@ -650,11 +650,9 @@ easy_di_const (rtx op)\n int\n easy_df_const (rtx op)\n {\n-  REAL_VALUE_TYPE r;\n   long l[2];\n \n-  REAL_VALUE_FROM_CONST_DOUBLE (r, op);\n-  REAL_VALUE_TO_TARGET_DOUBLE (r, l);\n+  REAL_VALUE_TO_TARGET_DOUBLE (*CONST_DOUBLE_REAL_VALUE (op), l);\n   if (l[0] == 0 && l[1] == 0)\n     return 1;\n   if ((l[0] & 0xffff) == 0 && l[1] == 0)\n@@ -2280,11 +2278,9 @@ m32r_print_operand (FILE * file, rtx x, int code)\n       /* We handle SFmode constants here as output_addr_const doesn't.  */\n       if (GET_MODE (x) == SFmode)\n \t{\n-\t  REAL_VALUE_TYPE d;\n \t  long l;\n \n-\t  REAL_VALUE_FROM_CONST_DOUBLE (d, x);\n-\t  REAL_VALUE_TO_TARGET_SINGLE (d, l);\n+\t  REAL_VALUE_TO_TARGET_SINGLE (*CONST_DOUBLE_REAL_VALUE (x), l);\n \t  fprintf (file, \"0x%08lx\", l);\n \t  break;\n \t}"}, {"sha": "bfc19f30eb496da156251ede36d20c1ac2c5f7a0", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 15, "deletions": 21, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=34a72c3348688368e2a1b2184dbd05669cacbc75", "patch": "@@ -3295,11 +3295,10 @@ handle_move_double (rtx operands[2],\n \t{\n \t  if (GET_CODE (operands[1]) == CONST_DOUBLE)\n \t    {\n-\t      REAL_VALUE_TYPE r;\n \t      long l[3];\n \n-\t      REAL_VALUE_FROM_CONST_DOUBLE (r, operands[1]);\n-\t      REAL_VALUE_TO_TARGET_LONG_DOUBLE (r, l);\n+\t      REAL_VALUE_TO_TARGET_LONG_DOUBLE\n+\t\t(*CONST_DOUBLE_REAL_VALUE (operands[1]), l);\n \t      operands[1] = GEN_INT (l[0]);\n \t      middlehalf[1] = GEN_INT (l[1]);\n \t      latehalf[1] = GEN_INT (l[2]);\n@@ -4323,7 +4322,7 @@ init_68881_table (void)\n int\n standard_68881_constant_p (rtx x)\n {\n-  REAL_VALUE_TYPE r;\n+  const REAL_VALUE_TYPE *r;\n   int i;\n \n   /* fmovecr must be emulated on the 68040 and 68060, so it shouldn't be\n@@ -4334,19 +4333,19 @@ standard_68881_constant_p (rtx x)\n   if (! inited_68881_table)\n     init_68881_table ();\n \n-  REAL_VALUE_FROM_CONST_DOUBLE (r, x);\n+  r = CONST_DOUBLE_REAL_VALUE (x);\n \n   /* Use real_identical instead of real_equal so that -0.0 is rejected.  */\n   for (i = 0; i < 6; i++)\n     {\n-      if (real_identical (&r, &values_68881[i]))\n+      if (real_identical (r, &values_68881[i]))\n         return (codes_68881[i]);\n     }\n   \n   if (GET_MODE (x) == SFmode)\n     return 0;\n \n-  if (real_equal (&r, &values_68881[6]))\n+  if (real_equal (r, &values_68881[6]))\n     return (codes_68881[6]);\n \n   /* larger powers of ten in the constants ram are not used\n@@ -4360,17 +4359,18 @@ standard_68881_constant_p (rtx x)\n int\n floating_exact_log2 (rtx x)\n {\n-  REAL_VALUE_TYPE r, r1;\n+  const REAL_VALUE_TYPE *r;\n+  REAL_VALUE_TYPE r1;\n   int exp;\n \n-  REAL_VALUE_FROM_CONST_DOUBLE (r, x);\n+  r = CONST_DOUBLE_REAL_VALUE (x);\n \n-  if (real_less (&r, &dconst1))\n+  if (real_less (r, &dconst1))\n     return 0;\n \n-  exp = real_exponent (&r);\n+  exp = real_exponent (r);\n   real_2expN (&r1, exp, DFmode);\n-  if (real_equal (&r1, &r))\n+  if (real_equal (&r1, r))\n     return exp;\n \n   return 0;\n@@ -4480,27 +4480,21 @@ print_operand (FILE *file, rtx op, int letter)\n     }\n   else if (GET_CODE (op) == CONST_DOUBLE && GET_MODE (op) == SFmode)\n     {\n-      REAL_VALUE_TYPE r;\n       long l;\n-      REAL_VALUE_FROM_CONST_DOUBLE (r, op);\n-      REAL_VALUE_TO_TARGET_SINGLE (r, l);\n+      REAL_VALUE_TO_TARGET_SINGLE (*CONST_DOUBLE_REAL_VALUE (op), l);\n       asm_fprintf (file, \"%I0x%lx\", l & 0xFFFFFFFF);\n     }\n   else if (GET_CODE (op) == CONST_DOUBLE && GET_MODE (op) == XFmode)\n     {\n-      REAL_VALUE_TYPE r;\n       long l[3];\n-      REAL_VALUE_FROM_CONST_DOUBLE (r, op);\n-      REAL_VALUE_TO_TARGET_LONG_DOUBLE (r, l);\n+      REAL_VALUE_TO_TARGET_LONG_DOUBLE (*CONST_DOUBLE_REAL_VALUE (op), l);\n       asm_fprintf (file, \"%I0x%lx%08lx%08lx\", l[0] & 0xFFFFFFFF,\n \t\t   l[1] & 0xFFFFFFFF, l[2] & 0xFFFFFFFF);\n     }\n   else if (GET_CODE (op) == CONST_DOUBLE && GET_MODE (op) == DFmode)\n     {\n-      REAL_VALUE_TYPE r;\n       long l[2];\n-      REAL_VALUE_FROM_CONST_DOUBLE (r, op);\n-      REAL_VALUE_TO_TARGET_DOUBLE (r, l);\n+      REAL_VALUE_TO_TARGET_DOUBLE (*CONST_DOUBLE_REAL_VALUE (op), l);\n       asm_fprintf (file, \"%I0x%lx%08lx\", l[0] & 0xFFFFFFFF, l[1] & 0xFFFFFFFF);\n     }\n   else"}, {"sha": "1eaf58fc334a4e90f6adcf26857b7bf2a40d008f", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=34a72c3348688368e2a1b2184dbd05669cacbc75", "patch": "@@ -1218,10 +1218,8 @@\n {\n   if (which_alternative == 4 || which_alternative == 5) {\n     rtx xoperands[2];\n-    REAL_VALUE_TYPE r;\n     long l;\n-    REAL_VALUE_FROM_CONST_DOUBLE (r, operands[1]);\n-    REAL_VALUE_TO_TARGET_SINGLE (r, l);\n+    REAL_VALUE_TO_TARGET_SINGLE (*CONST_DOUBLE_REAL_VALUE (operands[1]), l);\n     xoperands[0] = operands[0];\n     xoperands[1] = GEN_INT (l);\n     if (which_alternative == 5) {\n@@ -1360,7 +1358,6 @@\n   \"TARGET_COLDFIRE_FPU\"\n {\n   rtx xoperands[3];\n-  REAL_VALUE_TYPE r;\n   long l[2];\n \n   switch (which_alternative)\n@@ -1376,8 +1373,7 @@\n     case 4: case 5: case 6:\n       return output_move_double (operands);\n     case 7:\n-      REAL_VALUE_FROM_CONST_DOUBLE (r, operands[1]);\n-      REAL_VALUE_TO_TARGET_DOUBLE (r, l);\n+      REAL_VALUE_TO_TARGET_DOUBLE (*CONST_DOUBLE_REAL_VALUE (operands[1]), l);\n       xoperands[0] = operands[0];\n       xoperands[1] = GEN_INT (l[0]);\n       xoperands[2] = GEN_INT (l[1]);"}, {"sha": "bcaab563563270b834b398c7f7e5188ecc9b572a", "filename": "gcc/config/mep/mep.md", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Fmep%2Fmep.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Fmep%2Fmep.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep.md?ref=34a72c3348688368e2a1b2184dbd05669cacbc75", "patch": "@@ -760,13 +760,11 @@\n   [(const_int 0)]\n   \"\n {\n-  REAL_VALUE_TYPE rv;\n   HOST_WIDE_INT value;\n   HOST_WIDE_INT lo, hi;\n   rtx out;\n \n-  REAL_VALUE_FROM_CONST_DOUBLE (rv, operands[1]);\n-  REAL_VALUE_TO_TARGET_SINGLE (rv, value);\n+  REAL_VALUE_TO_TARGET_SINGLE (*CONST_DOUBLE_REAL_VALUE (operands[1]), value);\n \n   lo = value & 0xffff;\n   hi = trunc_int_for_mode (value & 0xffff0000, SImode);"}, {"sha": "43c01d1ccbb9a28d048c3d124a47a90d07b50623", "filename": "gcc/config/microblaze/microblaze.c", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c?ref=34a72c3348688368e2a1b2184dbd05669cacbc75", "patch": "@@ -270,7 +270,7 @@ microblaze_const_double_ok (rtx op, machine_mode mode)\n   if (op == CONST0_RTX (mode))\n     return 1;\n \n-  REAL_VALUE_FROM_CONST_DOUBLE (d, op);\n+  d = *CONST_DOUBLE_REAL_VALUE (op);\n \n   if (REAL_VALUE_ISNAN (d))\n     return FALSE;\n@@ -2354,11 +2354,7 @@ print_operand (FILE * file, rtx op, int letter)\n       if (code == CONST_DOUBLE)\n \t{\n \t  if (GET_MODE (op) == DFmode)\n-\t    {\n-\t      REAL_VALUE_TYPE value;\n-\t      REAL_VALUE_FROM_CONST_DOUBLE (value, op);\n-\t      REAL_VALUE_TO_TARGET_DOUBLE (value, val);\n-\t    }\n+\t    REAL_VALUE_TO_TARGET_DOUBLE (*CONST_DOUBLE_REAL_VALUE (op), val);\n \t  else\n \t    {\n \t      val[0] = CONST_DOUBLE_HIGH (op);\n@@ -2380,9 +2376,8 @@ print_operand (FILE * file, rtx op, int letter)\n       if (letter == 'F')\n \t{\n \t  unsigned long value_long;\n-\t  REAL_VALUE_TYPE value;\n-\t  REAL_VALUE_FROM_CONST_DOUBLE (value, op);\n-\t  REAL_VALUE_TO_TARGET_SINGLE (value, value_long);\n+\t  REAL_VALUE_TO_TARGET_SINGLE (*CONST_DOUBLE_REAL_VALUE (op),\n+\t\t\t\t       value_long);\n \t  fprintf (file, HOST_WIDE_INT_PRINT_HEX, value_long);\n \t}\n       else"}, {"sha": "d24dcfeeefe21936021bd17d9970c28cf241fcc6", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=34a72c3348688368e2a1b2184dbd05669cacbc75", "patch": "@@ -7304,11 +7304,9 @@\n \t\t    UNSPEC_CONSTTABLE_FLOAT)]\n   \"TARGET_MIPS16\"\n {\n-  REAL_VALUE_TYPE d;\n-\n   gcc_assert (GET_CODE (operands[0]) == CONST_DOUBLE);\n-  REAL_VALUE_FROM_CONST_DOUBLE (d, operands[0]);\n-  assemble_real (d, GET_MODE (operands[0]),\n+  assemble_real (*CONST_DOUBLE_REAL_VALUE (operands[0]),\n+\t\t GET_MODE (operands[0]),\n \t\t GET_MODE_BITSIZE (GET_MODE (operands[0])));\n   return \"\";\n }"}, {"sha": "a341e3a35ab939bbb854af988b1825026cde3db0", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=34a72c3348688368e2a1b2184dbd05669cacbc75", "patch": "@@ -2710,16 +2710,11 @@ mmix_intval (const_rtx x)\n \n   if (GET_CODE (x) == CONST_DOUBLE)\n     {\n-      REAL_VALUE_TYPE value;\n-\n-      /* FIXME:  This macro is not in the manual but should be.  */\n-      REAL_VALUE_FROM_CONST_DOUBLE (value, x);\n-\n       if (GET_MODE (x) == DFmode)\n \t{\n \t  long bits[2];\n \n-\t  REAL_VALUE_TO_TARGET_DOUBLE (value, bits);\n+\t  REAL_VALUE_TO_TARGET_DOUBLE (*CONST_DOUBLE_REAL_VALUE (x), bits);\n \n \t  /* The double cast is necessary to avoid getting the long\n \t     sign-extended to unsigned long long(!) when they're of\n@@ -2732,7 +2727,7 @@ mmix_intval (const_rtx x)\n       else if (GET_MODE (x) == SFmode)\n \t{\n \t  long bits;\n-\t  REAL_VALUE_TO_TARGET_SINGLE (value, bits);\n+\t  REAL_VALUE_TO_TARGET_SINGLE (*CONST_DOUBLE_REAL_VALUE (x), bits);\n \n \t  return (unsigned long) bits;\n \t}"}, {"sha": "31bf1035273576162da1c6ed02b65623cb531200", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=34a72c3348688368e2a1b2184dbd05669cacbc75", "patch": "@@ -285,18 +285,17 @@ mn10300_print_operand (FILE *file, rtx x, int code)\n \tcase CONST_DOUBLE:\n \t  {\n \t    long val[2];\n-\t    REAL_VALUE_TYPE rv;\n \n \t    switch (GET_MODE (x))\n \t      {\n \t      case DFmode:\n-\t\tREAL_VALUE_FROM_CONST_DOUBLE (rv, x);\n-\t\tREAL_VALUE_TO_TARGET_DOUBLE (rv, val);\n+\t\tREAL_VALUE_TO_TARGET_DOUBLE\n+\t\t  (*CONST_DOUBLE_REAL_VALUE (x), val);\n \t\tfprintf (file, \"0x%lx\", val[0]);\n \t\tbreak;;\n \t      case SFmode:\n-\t\tREAL_VALUE_FROM_CONST_DOUBLE (rv, x);\n-\t\tREAL_VALUE_TO_TARGET_SINGLE (rv, val[0]);\n+\t\tREAL_VALUE_TO_TARGET_SINGLE\n+\t\t  (*CONST_DOUBLE_REAL_VALUE (x), val[0]);\n \t\tfprintf (file, \"0x%lx\", val[0]);\n \t\tbreak;;\n \t      case VOIDmode:\n@@ -345,13 +344,12 @@ mn10300_print_operand (FILE *file, rtx x, int code)\n \tcase CONST_DOUBLE:\n \t  {\n \t    long val[2];\n-\t    REAL_VALUE_TYPE rv;\n \n \t    switch (GET_MODE (x))\n \t      {\n \t      case DFmode:\n-\t\tREAL_VALUE_FROM_CONST_DOUBLE (rv, x);\n-\t\tREAL_VALUE_TO_TARGET_DOUBLE (rv, val);\n+\t\tREAL_VALUE_TO_TARGET_DOUBLE\n+\t\t  (*CONST_DOUBLE_REAL_VALUE (x), val);\n \t\tfprintf (file, \"0x%lx\", val[1]);\n \t\tbreak;;\n \t      case SFmode:\n@@ -436,10 +434,8 @@ mn10300_print_operand (FILE *file, rtx x, int code)\n \tcase CONST_DOUBLE:\n \t  {\n \t    unsigned long val;\n-\t    REAL_VALUE_TYPE rv;\n \n-\t    REAL_VALUE_FROM_CONST_DOUBLE (rv, x);\n-\t    REAL_VALUE_TO_TARGET_SINGLE (rv, val);\n+\t    REAL_VALUE_TO_TARGET_SINGLE (*CONST_DOUBLE_REAL_VALUE (x), val);\n \t    fprintf (file, \"0x%lx\", val);\n \t    break;\n \t  }"}, {"sha": "e9177dcea17d6d3e86b4a228f6fb3eb3c5159e06", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=34a72c3348688368e2a1b2184dbd05669cacbc75", "patch": "@@ -1857,9 +1857,7 @@ nvptx_print_operand (FILE *file, rtx x, int code)\n \n \tcase CONST_DOUBLE:\n \t  long vals[2];\n-\t  REAL_VALUE_TYPE real;\n-\t  REAL_VALUE_FROM_CONST_DOUBLE (real, x);\n-\t  real_to_target (vals, &real, GET_MODE (x));\n+\t  real_to_target (vals, CONST_DOUBLE_REAL_VALUE (x), GET_MODE (x));\n \t  vals[0] &= 0xffffffff;\n \t  vals[1] &= 0xffffffff;\n \t  if (GET_MODE (x) == SFmode)"}, {"sha": "b995d10b8251b7d490c55534453ce9c8a59b7652", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=34a72c3348688368e2a1b2184dbd05669cacbc75", "patch": "@@ -2346,14 +2346,12 @@ pa_singlemove_string (rtx *operands)\n   if (GET_CODE (operands[1]) == CONST_DOUBLE)\n     {\n       long i;\n-      REAL_VALUE_TYPE d;\n \n       gcc_assert (GET_MODE (operands[1]) == SFmode);\n \n       /* Translate the CONST_DOUBLE to a CONST_INT with the same target\n \t bit pattern.  */\n-      REAL_VALUE_FROM_CONST_DOUBLE (d, operands[1]);\n-      REAL_VALUE_TO_TARGET_SINGLE (d, i);\n+      REAL_VALUE_TO_TARGET_SINGLE (*CONST_DOUBLE_REAL_VALUE (operands[1]), i);\n \n       operands[1] = GEN_INT (i);\n       /* Fall through to CONST_INT case.  */"}, {"sha": "7f0f06ff7bf19a6394b96dc79fdfd618c7642193", "filename": "gcc/config/pdp11/pdp11.c", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.c?ref=34a72c3348688368e2a1b2184dbd05669cacbc75", "patch": "@@ -488,7 +488,6 @@ pdp11_expand_operands (rtx *operands, rtx exops[][2], int opcount,\n   pdp11_partorder useorder;\n   bool sameoff = false;\n   enum { REGOP, OFFSOP, MEMOP, PUSHOP, POPOP, CNSTOP, RNDOP } optype;\n-  REAL_VALUE_TYPE r;\n   long sval[2];\n   \n   words = GET_MODE_BITSIZE (GET_MODE (operands[0])) / 16;\n@@ -602,10 +601,8 @@ pdp11_expand_operands (rtx *operands, rtx exops[][2], int opcount,\n \t}\n \n       if (GET_CODE (operands[op]) == CONST_DOUBLE)\n-\t{\n-\t  REAL_VALUE_FROM_CONST_DOUBLE (r, operands[op]);\n-\t  REAL_VALUE_TO_TARGET_DOUBLE (r, sval);\n-\t}\n+\tREAL_VALUE_TO_TARGET_DOUBLE\n+\t  (*CONST_DOUBLE_REAL_VALUE (operands[op]), sval);\n       \n       for (i = 0; i < words; i++)\n \t{\n@@ -729,7 +726,6 @@ pdp11_asm_output_var (FILE *file, const char *name, int size,\n static void\n pdp11_asm_print_operand (FILE *file, rtx x, int code)\n {\n-  REAL_VALUE_TYPE r;\n   long sval[2];\n  \n   if (code == '#')\n@@ -747,8 +743,7 @@ pdp11_asm_print_operand (FILE *file, rtx x, int code)\n     output_address (XEXP (x, 0));\n   else if (GET_CODE (x) == CONST_DOUBLE && GET_MODE (x) != SImode)\n     {\n-      REAL_VALUE_FROM_CONST_DOUBLE (r, x);\n-      REAL_VALUE_TO_TARGET_DOUBLE (r, sval);\n+      REAL_VALUE_TO_TARGET_DOUBLE (*CONST_DOUBLE_REAL_VALUE (x), sval);\n       fprintf (file, \"$%#lo\", sval[0] >> 16);\n     }\n   else\n@@ -1366,10 +1361,8 @@ output_block_move(rtx *operands)\n int\n legitimate_const_double_p (rtx address)\n {\n-  REAL_VALUE_TYPE r;\n   long sval[2];\n-  REAL_VALUE_FROM_CONST_DOUBLE (r, address);\n-  REAL_VALUE_TO_TARGET_DOUBLE (r, sval);\n+  REAL_VALUE_TO_TARGET_DOUBLE (*CONST_DOUBLE_REAL_VALUE (address), sval);\n   if ((sval[0] & 0xffff) == 0 && sval[1] == 0)\n     return 1;\n   return 0;"}, {"sha": "c00d73072c84e366168c7292abf170f0093a7575", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 13, "deletions": 27, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=34a72c3348688368e2a1b2184dbd05669cacbc75", "patch": "@@ -5325,24 +5325,20 @@ num_insns_constant (rtx op, machine_mode mode)\n \tif (mode == SFmode || mode == SDmode)\n \t  {\n \t    long l;\n-\t    REAL_VALUE_TYPE rv;\n \n-\t    REAL_VALUE_FROM_CONST_DOUBLE (rv, op);\n \t    if (DECIMAL_FLOAT_MODE_P (mode))\n-\t      REAL_VALUE_TO_TARGET_DECIMAL32 (rv, l);\n+\t      REAL_VALUE_TO_TARGET_DECIMAL32\n+\t\t(*CONST_DOUBLE_REAL_VALUE (op), l);\n \t    else\n-\t      REAL_VALUE_TO_TARGET_SINGLE (rv, l);\n+\t      REAL_VALUE_TO_TARGET_SINGLE (*CONST_DOUBLE_REAL_VALUE (op), l);\n \t    return num_insns_constant_wide ((HOST_WIDE_INT) l);\n \t  }\n \n \tlong l[2];\n-\tREAL_VALUE_TYPE rv;\n-\n-\tREAL_VALUE_FROM_CONST_DOUBLE (rv, op);\n \tif (DECIMAL_FLOAT_MODE_P (mode))\n-\t  REAL_VALUE_TO_TARGET_DECIMAL64 (rv, l);\n+\t  REAL_VALUE_TO_TARGET_DECIMAL64 (*CONST_DOUBLE_REAL_VALUE (op), l);\n \telse\n-\t  REAL_VALUE_TO_TARGET_DOUBLE (rv, l);\n+\t  REAL_VALUE_TO_TARGET_DOUBLE (*CONST_DOUBLE_REAL_VALUE (op), l);\n \thigh = l[WORDS_BIG_ENDIAN == 0];\n \tlow  = l[WORDS_BIG_ENDIAN != 0];\n \n@@ -20731,7 +20727,6 @@ rs6000_emit_cmove (rtx dest, rtx op, rtx true_cond, rtx false_cond)\n   enum rtx_code code = GET_CODE (op);\n   rtx op0 = XEXP (op, 0);\n   rtx op1 = XEXP (op, 1);\n-  REAL_VALUE_TYPE c1;\n   machine_mode compare_mode = GET_MODE (op0);\n   machine_mode result_mode = GET_MODE (dest);\n   rtx temp;\n@@ -20792,17 +20787,15 @@ rs6000_emit_cmove (rtx dest, rtx op, rtx true_cond, rtx false_cond)\n   if (code == UNEQ && HONOR_NANS (compare_mode))\n     return 0;\n \n-  if (GET_CODE (op1) == CONST_DOUBLE)\n-    REAL_VALUE_FROM_CONST_DOUBLE (c1, op1);\n-\n   /* We're going to try to implement comparisons by performing\n      a subtract, then comparing against zero.  Unfortunately,\n      Inf - Inf is NaN which is not zero, and so if we don't\n      know that the operand is finite and the comparison\n      would treat EQ different to UNORDERED, we can't do it.  */\n   if (HONOR_INFINITIES (compare_mode)\n       && code != GT && code != UNGE\n-      && (GET_CODE (op1) != CONST_DOUBLE || real_isinf (&c1))\n+      && (GET_CODE (op1) != CONST_DOUBLE\n+\t  || real_isinf (CONST_DOUBLE_REAL_VALUE (op1)))\n       /* Constructs of the form (a OP b ? a : b) are safe.  */\n       && ((! rtx_equal_p (op0, false_cond) && ! rtx_equal_p (op1, false_cond))\n \t  || (! rtx_equal_p (op0, true_cond)\n@@ -27103,14 +27096,12 @@ output_toc (FILE *file, rtx x, int labelno, machine_mode mode)\n       (GET_MODE (x) == TFmode || GET_MODE (x) == TDmode\n        || GET_MODE (x) == IFmode || GET_MODE (x) == KFmode))\n     {\n-      REAL_VALUE_TYPE rv;\n       long k[4];\n \n-      REAL_VALUE_FROM_CONST_DOUBLE (rv, x);\n       if (DECIMAL_FLOAT_MODE_P (GET_MODE (x)))\n-\tREAL_VALUE_TO_TARGET_DECIMAL128 (rv, k);\n+\tREAL_VALUE_TO_TARGET_DECIMAL128 (*CONST_DOUBLE_REAL_VALUE (x), k);\n       else\n-\tREAL_VALUE_TO_TARGET_LONG_DOUBLE (rv, k);\n+\tREAL_VALUE_TO_TARGET_LONG_DOUBLE (*CONST_DOUBLE_REAL_VALUE (x), k);\n \n       if (TARGET_64BIT)\n \t{\n@@ -27144,15 +27135,12 @@ output_toc (FILE *file, rtx x, int labelno, machine_mode mode)\n   else if (GET_CODE (x) == CONST_DOUBLE &&\n \t   (GET_MODE (x) == DFmode || GET_MODE (x) == DDmode))\n     {\n-      REAL_VALUE_TYPE rv;\n       long k[2];\n \n-      REAL_VALUE_FROM_CONST_DOUBLE (rv, x);\n-\n       if (DECIMAL_FLOAT_MODE_P (GET_MODE (x)))\n-\tREAL_VALUE_TO_TARGET_DECIMAL64 (rv, k);\n+\tREAL_VALUE_TO_TARGET_DECIMAL64 (*CONST_DOUBLE_REAL_VALUE (x), k);\n       else\n-\tREAL_VALUE_TO_TARGET_DOUBLE (rv, k);\n+\tREAL_VALUE_TO_TARGET_DOUBLE (*CONST_DOUBLE_REAL_VALUE (x), k);\n \n       if (TARGET_64BIT)\n \t{\n@@ -27181,14 +27169,12 @@ output_toc (FILE *file, rtx x, int labelno, machine_mode mode)\n   else if (GET_CODE (x) == CONST_DOUBLE &&\n \t   (GET_MODE (x) == SFmode || GET_MODE (x) == SDmode))\n     {\n-      REAL_VALUE_TYPE rv;\n       long l;\n \n-      REAL_VALUE_FROM_CONST_DOUBLE (rv, x);\n       if (DECIMAL_FLOAT_MODE_P (GET_MODE (x)))\n-\tREAL_VALUE_TO_TARGET_DECIMAL32 (rv, l);\n+\tREAL_VALUE_TO_TARGET_DECIMAL32 (*CONST_DOUBLE_REAL_VALUE (x), l);\n       else\n-\tREAL_VALUE_TO_TARGET_SINGLE (rv, l);\n+\tREAL_VALUE_TO_TARGET_SINGLE (*CONST_DOUBLE_REAL_VALUE (x), l);\n \n       if (TARGET_64BIT)\n \t{"}, {"sha": "cf40f10f83790532e24b54beca13787d91255c03", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=34a72c3348688368e2a1b2184dbd05669cacbc75", "patch": "@@ -6172,10 +6172,8 @@\n   \"\n {\n   long l;\n-  REAL_VALUE_TYPE rv;\n \n-  REAL_VALUE_FROM_CONST_DOUBLE (rv, operands[1]);\n-  <real_value_to_target> (rv, l);\n+  <real_value_to_target> (*CONST_DOUBLE_REAL_VALUE (operands[1]), l);\n \n   if (! TARGET_POWERPC64)\n     operands[2] = operand_subword (operands[0], 0, 0, <MODE>mode);\n@@ -6274,10 +6272,8 @@\n {\n   int endian = (WORDS_BIG_ENDIAN == 0);\n   long l[2];\n-  REAL_VALUE_TYPE rv;\n \n-  REAL_VALUE_FROM_CONST_DOUBLE (rv, operands[1]);\n-  <real_value_to_target> (rv, l);\n+  <real_value_to_target> (*CONST_DOUBLE_REAL_VALUE (operands[1]), l);\n \n   operands[2] = operand_subword (operands[0], endian, 0, <MODE>mode);\n   operands[3] = operand_subword (operands[0], 1 - endian, 0, <MODE>mode);\n@@ -6298,11 +6294,9 @@\n {\n   int endian = (WORDS_BIG_ENDIAN == 0);\n   long l[2];\n-  REAL_VALUE_TYPE rv;\n   HOST_WIDE_INT val;\n \n-  REAL_VALUE_FROM_CONST_DOUBLE (rv, operands[1]);\n-  <real_value_to_target> (rv, l);\n+  <real_value_to_target> (*CONST_DOUBLE_REAL_VALUE (operands[1]), l);\n \n   operands[2] = gen_lowpart (DImode, operands[0]);\n   /* HIGHPART is lower memory address when WORDS_BIG_ENDIAN.  */"}, {"sha": "cee8c9946efa234c6d5b1bb10e1d186d39634e65", "filename": "gcc/config/rx/rx.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Frx%2Frx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Frx%2Frx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.c?ref=34a72c3348688368e2a1b2184dbd05669cacbc75", "patch": "@@ -886,10 +886,8 @@ rx_print_operand (FILE * file, rtx op, int letter)\n \tcase CONST_DOUBLE:\n \t  {\n \t    unsigned long val;\n-\t    REAL_VALUE_TYPE rv;\n \n-\t    REAL_VALUE_FROM_CONST_DOUBLE (rv, op);\n-\t    REAL_VALUE_TO_TARGET_SINGLE (rv, val);\n+\t    REAL_VALUE_TO_TARGET_SINGLE (*CONST_DOUBLE_REAL_VALUE (op), val);\n \t    if (print_hash)\n \t      fprintf (file, \"#\");\n \t    fprintf (file, TARGET_AS100_SYNTAX ? \"0%lxH\" : \"0x%lx\", val);"}, {"sha": "5ab6ce7312606e85d1aac32d01c4f86c41125ea8", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=34a72c3348688368e2a1b2184dbd05669cacbc75", "patch": "@@ -8719,16 +8719,13 @@ s390_chunkify_cancel (struct constant_pool *pool_list)\n void\n s390_output_pool_entry (rtx exp, machine_mode mode, unsigned int align)\n {\n-  REAL_VALUE_TYPE r;\n-\n   switch (GET_MODE_CLASS (mode))\n     {\n     case MODE_FLOAT:\n     case MODE_DECIMAL_FLOAT:\n       gcc_assert (GET_CODE (exp) == CONST_DOUBLE);\n \n-      REAL_VALUE_FROM_CONST_DOUBLE (r, exp);\n-      assemble_real (r, mode, align);\n+      assemble_real (*CONST_DOUBLE_REAL_VALUE (exp), mode, align);\n       break;\n \n     case MODE_INT:"}, {"sha": "92e9f9f902c8b1e55ff8d0727eeafc5bde0c6302", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=34a72c3348688368e2a1b2184dbd05669cacbc75", "patch": "@@ -10000,26 +10000,23 @@ system_reg_operand (rtx op, machine_mode mode ATTRIBUTE_UNUSED)\n bool\n fp_zero_operand (rtx op)\n {\n-  REAL_VALUE_TYPE r;\n+  const REAL_VALUE_TYPE *r;\n \n   if (GET_MODE (op) != SFmode)\n     return false;\n \n-  REAL_VALUE_FROM_CONST_DOUBLE (r, op);\n-  return real_equal (&r, &dconst0) && ! REAL_VALUE_MINUS_ZERO (r);\n+  r = CONST_DOUBLE_REAL_VALUE (op);\n+  return real_equal (r, &dconst0) && ! REAL_VALUE_MINUS_ZERO (*r);\n }\n \n /* Returns true if OP is a floating point value with value 1.0.  */\n bool\n fp_one_operand (rtx op)\n {\n-  REAL_VALUE_TYPE r;\n-\n   if (GET_MODE (op) != SFmode)\n     return false;\n \n-  REAL_VALUE_FROM_CONST_DOUBLE (r, op);\n-  return real_equal (&r, &dconst1);\n+  return real_equal (CONST_DOUBLE_REAL_VALUE (op), &dconst1);\n }\n \n /* Return the TLS type for TLS symbols.  */"}, {"sha": "e8d3e518121574b0074e6879789ed5ea2783acca", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=34a72c3348688368e2a1b2184dbd05669cacbc75", "patch": "@@ -8011,10 +8011,8 @@ label:\n {\n   int endian = WORDS_BIG_ENDIAN ? 1 : 0;\n   long values[2];\n-  REAL_VALUE_TYPE value;\n \n-  REAL_VALUE_FROM_CONST_DOUBLE (value, operands[1]);\n-  REAL_VALUE_TO_TARGET_DOUBLE (value, values);\n+  REAL_VALUE_TO_TARGET_DOUBLE (*CONST_DOUBLE_REAL_VALUE (operands[1]), values);\n \n   if (HOST_BITS_PER_WIDE_INT >= 64)\n     operands[2] = immed_double_const ((unsigned long) values[endian]\n@@ -8718,10 +8716,8 @@ label:\n   [(set (match_dup 3) (match_dup 2))]\n {\n   long values;\n-  REAL_VALUE_TYPE value;\n \n-  REAL_VALUE_FROM_CONST_DOUBLE (value, operands[1]);\n-  REAL_VALUE_TO_TARGET_SINGLE (value, values);\n+  REAL_VALUE_TO_TARGET_SINGLE (*CONST_DOUBLE_REAL_VALUE (operands[1]), values);\n   operands[2] = GEN_INT (values);\n \n   operands[3] = gen_rtx_REG (DImode, true_regnum (operands[0]));\n@@ -12454,11 +12450,8 @@ label:\n  \"\"\n {\n   if (operands[1] != const0_rtx)\n-    {\n-      REAL_VALUE_TYPE d;\n-      REAL_VALUE_FROM_CONST_DOUBLE (d, operands[0]);\n-      assemble_real (d, SFmode, GET_MODE_ALIGNMENT (SFmode));\n-    }\n+    assemble_real (*CONST_DOUBLE_REAL_VALUE (operands[0]),\n+\t\t   SFmode, GET_MODE_ALIGNMENT (SFmode));\n   return \"\";\n }\n  [(set_attr \"length\" \"4\")\n@@ -12472,11 +12465,8 @@ label:\n  \"\"\n {\n   if (operands[1] != const0_rtx)\n-    {\n-      REAL_VALUE_TYPE d;\n-      REAL_VALUE_FROM_CONST_DOUBLE (d, operands[0]);\n-      assemble_real (d, DFmode, GET_MODE_ALIGNMENT (DFmode));\n-    }\n+    assemble_real (*CONST_DOUBLE_REAL_VALUE (operands[0]),\n+\t\t   DFmode, GET_MODE_ALIGNMENT (DFmode));\n   return \"\";\n }\n  [(set_attr \"length\" \"8\")"}, {"sha": "a0adf2295a3237cd9d6b7c673714ed9faf053a57", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=34a72c3348688368e2a1b2184dbd05669cacbc75", "patch": "@@ -1650,11 +1650,9 @@ fp_sethi_p (rtx op)\n {\n   if (GET_CODE (op) == CONST_DOUBLE)\n     {\n-      REAL_VALUE_TYPE r;\n       long i;\n \n-      REAL_VALUE_FROM_CONST_DOUBLE (r, op);\n-      REAL_VALUE_TO_TARGET_SINGLE (r, i);\n+      REAL_VALUE_TO_TARGET_SINGLE (*CONST_DOUBLE_REAL_VALUE (op), i);\n       return !SPARC_SIMM13_P (i) && SPARC_SETHI_P (i);\n     }\n \n@@ -1670,11 +1668,9 @@ fp_mov_p (rtx op)\n {\n   if (GET_CODE (op) == CONST_DOUBLE)\n     {\n-      REAL_VALUE_TYPE r;\n       long i;\n \n-      REAL_VALUE_FROM_CONST_DOUBLE (r, op);\n-      REAL_VALUE_TO_TARGET_SINGLE (r, i);\n+      REAL_VALUE_TO_TARGET_SINGLE (*CONST_DOUBLE_REAL_VALUE (op), i);\n       return SPARC_SIMM13_P (i);\n     }\n \n@@ -1693,11 +1689,9 @@ fp_high_losum_p (rtx op)\n      be moved using a single insn will do.  */\n   if (GET_CODE (op) == CONST_DOUBLE)\n     {\n-      REAL_VALUE_TYPE r;\n       long i;\n \n-      REAL_VALUE_FROM_CONST_DOUBLE (r, op);\n-      REAL_VALUE_TO_TARGET_SINGLE (r, i);\n+      REAL_VALUE_TO_TARGET_SINGLE (*CONST_DOUBLE_REAL_VALUE (op), i);\n       return !SPARC_SIMM13_P (i) && !SPARC_SETHI_P (i);\n     }\n "}, {"sha": "de65cc66692c4e2f4f61343e383e53c75e008add", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=34a72c3348688368e2a1b2184dbd05669cacbc75", "patch": "@@ -2218,11 +2218,9 @@\n           || which_alternative == 4\n           || which_alternative == 5))\n     {\n-      REAL_VALUE_TYPE r;\n       long i;\n \n-      REAL_VALUE_FROM_CONST_DOUBLE (r, operands[1]);\n-      REAL_VALUE_TO_TARGET_SINGLE (r, i);\n+      REAL_VALUE_TO_TARGET_SINGLE (*CONST_DOUBLE_REAL_VALUE (operands[1]), i);\n       operands[1] = GEN_INT (i);\n     }\n \n@@ -2265,11 +2263,9 @@\n                    (match_operand:SF 2 \"fp_const_high_losum_operand\" \"S\")))]\n   \"\"\n {\n-  REAL_VALUE_TYPE r;\n   long i;\n \n-  REAL_VALUE_FROM_CONST_DOUBLE (r, operands[2]);\n-  REAL_VALUE_TO_TARGET_SINGLE (r, i);\n+  REAL_VALUE_TO_TARGET_SINGLE (*CONST_DOUBLE_REAL_VALUE (operands[2]), i);\n   operands[2] = GEN_INT (i);\n   return \"or\\t%1, %%lo(%a2), %0\";\n })\n@@ -2279,11 +2275,9 @@\n         (high:SF (match_operand:SF 1 \"fp_const_high_losum_operand\" \"S\")))]\n   \"\"\n {\n-  REAL_VALUE_TYPE r;\n   long i;\n \n-  REAL_VALUE_FROM_CONST_DOUBLE (r, operands[1]);\n-  REAL_VALUE_TO_TARGET_SINGLE (r, i);\n+  REAL_VALUE_TO_TARGET_SINGLE (*CONST_DOUBLE_REAL_VALUE (operands[1]), i);\n   operands[1] = GEN_INT (i);\n   return \"sethi\\t%%hi(%1), %0\";\n })"}, {"sha": "0ec92091364fa935b78e04761f4b67b19750df89", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=34a72c3348688368e2a1b2184dbd05669cacbc75", "patch": "@@ -997,17 +997,12 @@ HOST_WIDE_INT\n const_double_to_hwint (rtx x)\n {\n   HOST_WIDE_INT val;\n-  REAL_VALUE_TYPE rv;\n   if (GET_MODE (x) == SFmode)\n-    {\n-      REAL_VALUE_FROM_CONST_DOUBLE (rv, x);\n-      REAL_VALUE_TO_TARGET_SINGLE (rv, val);\n-    }\n+    REAL_VALUE_TO_TARGET_SINGLE (*CONST_DOUBLE_REAL_VALUE (x), val);\n   else if (GET_MODE (x) == DFmode)\n     {\n       long l[2];\n-      REAL_VALUE_FROM_CONST_DOUBLE (rv, x);\n-      REAL_VALUE_TO_TARGET_DOUBLE (rv, l);\n+      REAL_VALUE_TO_TARGET_DOUBLE (*CONST_DOUBLE_REAL_VALUE (x), l);\n       val = l[0];\n       val = (val << 32) | (l[1] & 0xffffffff);\n     }"}, {"sha": "839e42f15bd6a5d354a51a025d6bc29b2966f799", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=34a72c3348688368e2a1b2184dbd05669cacbc75", "patch": "@@ -277,20 +277,17 @@ const_double_split (rtx x, HOST_WIDE_INT * p_high, HOST_WIDE_INT * p_low)\n   if (GET_CODE (x) == CONST_DOUBLE)\n     {\n       long t[2];\n-      REAL_VALUE_TYPE rv;\n \n       switch (GET_MODE (x))\n \t{\n \tcase DFmode:\n-\t  REAL_VALUE_FROM_CONST_DOUBLE (rv, x);\n-\t  REAL_VALUE_TO_TARGET_DOUBLE (rv, t);\n+\t  REAL_VALUE_TO_TARGET_DOUBLE (*CONST_DOUBLE_REAL_VALUE (x), t);\n \t  *p_high = t[1];\t/* since v850 is little endian */\n \t  *p_low = t[0];\t/* high is second word */\n \t  return;\n \n \tcase SFmode:\n-\t  REAL_VALUE_FROM_CONST_DOUBLE (rv, x);\n-\t  REAL_VALUE_TO_TARGET_SINGLE (rv, *p_high);\n+\t  REAL_VALUE_TO_TARGET_SINGLE (*CONST_DOUBLE_REAL_VALUE (x), *p_high);\n \t  *p_low = 0;\n \t  return;\n "}, {"sha": "5ab6ab10a4f7fd0d58e88780174424a0af0fda2f", "filename": "gcc/config/vax/vax.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Fvax%2Fvax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Fvax%2Fvax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.c?ref=34a72c3348688368e2a1b2184dbd05669cacbc75", "patch": "@@ -640,7 +640,8 @@ static bool\n vax_float_literal (rtx c)\n {\n   machine_mode mode;\n-  REAL_VALUE_TYPE r, s;\n+  const REAL_VALUE_TYPE *r;\n+  REAL_VALUE_TYPE s;\n   int i;\n \n   if (GET_CODE (c) != CONST_DOUBLE)\n@@ -653,19 +654,19 @@ vax_float_literal (rtx c)\n       || c == const_tiny_rtx[(int) mode][2])\n     return true;\n \n-  REAL_VALUE_FROM_CONST_DOUBLE (r, c);\n+  r = CONST_DOUBLE_REAL_VALUE (c);\n \n   for (i = 0; i < 7; i++)\n     {\n       int x = 1 << i;\n       bool ok;\n       real_from_integer (&s, mode, x, SIGNED);\n \n-      if (real_equal (&r, &s))\n+      if (real_equal (r, &s))\n \treturn true;\n       ok = exact_real_inverse (mode, &s);\n       gcc_assert (ok);\n-      if (real_equal (&r, &s))\n+      if (real_equal (r, &s))\n \treturn true;\n     }\n   return false;"}, {"sha": "d399a631a681c477cbb1442cc6572c444eea188b", "filename": "gcc/config/visium/visium.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Fvisium%2Fvisium.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Fvisium%2Fvisium.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvisium%2Fvisium.c?ref=34a72c3348688368e2a1b2184dbd05669cacbc75", "patch": "@@ -2039,9 +2039,7 @@ visium_expand_copysign (rtx *operands, enum machine_mode mode)\n       if (op0 != CONST0_RTX (mode))\n \t{\n \t  long l;\n-\t  REAL_VALUE_TYPE rv;\n-\t  REAL_VALUE_FROM_CONST_DOUBLE (rv, op0);\n-\t  REAL_VALUE_TO_TARGET_SINGLE (rv, l);\n+\t  REAL_VALUE_TO_TARGET_SINGLE (*CONST_DOUBLE_REAL_VALUE (op0), l);\n \t  op0 = force_reg (SImode, GEN_INT (trunc_int_for_mode (l, SImode)));\n \t}\n     }"}, {"sha": "dab265d1f31a123e6fe551e2c2e59305521240bf", "filename": "gcc/config/visium/visium.md", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Fvisium%2Fvisium.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Fvisium%2Fvisium.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvisium%2Fvisium.md?ref=34a72c3348688368e2a1b2184dbd05669cacbc75", "patch": "@@ -687,10 +687,8 @@\n   [(set (match_dup 2) (match_dup 3))]\n {\n   long l;\n-  REAL_VALUE_TYPE rv;\n \n-  REAL_VALUE_FROM_CONST_DOUBLE (rv, operands[1]);\n-  REAL_VALUE_TO_TARGET_SINGLE (rv, l);\n+  REAL_VALUE_TO_TARGET_SINGLE (*CONST_DOUBLE_REAL_VALUE (operands[1]), l);\n \n   operands[2] = operand_subword (operands[0], 0, 0, SFmode);\n   operands[3] = GEN_INT (trunc_int_for_mode (l, SImode));"}, {"sha": "00f23700d063f87722feaa8061bc9827eacc3501", "filename": "gcc/config/xtensa/predicates.md", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Fxtensa%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Fxtensa%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fpredicates.md?ref=34a72c3348688368e2a1b2184dbd05669cacbc75", "patch": "@@ -150,9 +150,7 @@\n (define_predicate \"const_float_1_operand\"\n   (match_code \"const_double\")\n {\n-  REAL_VALUE_TYPE d;\n-  REAL_VALUE_FROM_CONST_DOUBLE (d, op);\n-  return real_equal (&d, &dconst1);\n+  return real_equal (CONST_DOUBLE_REAL_VALUE (op), &dconst1);\n })\n \n (define_predicate \"fpmem_offset_operand\""}, {"sha": "1d58311c8020ffde041327e1cb157486a0ad05d9", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=34a72c3348688368e2a1b2184dbd05669cacbc75", "patch": "@@ -2397,12 +2397,10 @@ print_operand (FILE *file, rtx x, int letter)\n \t}\n       else if (GET_CODE (x) == CONST_DOUBLE)\n \t{\n-\t  REAL_VALUE_TYPE r;\n-\t  REAL_VALUE_FROM_CONST_DOUBLE (r, x);\n \t  if (GET_MODE (x) == SFmode)\n \t    {\n \t      long l;\n-\t      REAL_VALUE_TO_TARGET_SINGLE (r, l);\n+\t      REAL_VALUE_TO_TARGET_SINGLE (*CONST_DOUBLE_REAL_VALUE (x), l);\n \t      fprintf (file, \"0x%08lx@%c\", l, letter == 't' ? 'h' : 'l');\n \t    }\n \t  else\n@@ -2436,10 +2434,8 @@ print_operand (FILE *file, rtx x, int letter)\n       if (GET_CODE (x) == CONST_DOUBLE &&\n \t  GET_MODE (x) == SFmode)\n \t{\n-\t  REAL_VALUE_TYPE r;\n \t  long l;\n-\t  REAL_VALUE_FROM_CONST_DOUBLE (r, x);\n-\t  REAL_VALUE_TO_TARGET_SINGLE (r, l);\n+\t  REAL_VALUE_TO_TARGET_SINGLE (*CONST_DOUBLE_REAL_VALUE (x), l);\n \t  fprintf (file, \"0x%08lx\", l);\n \t  break;\n \t}\n@@ -2555,7 +2551,6 @@ void\n xtensa_output_literal (FILE *file, rtx x, machine_mode mode, int labelno)\n {\n   long value_long[2];\n-  REAL_VALUE_TYPE r;\n   int size;\n   rtx first, second;\n \n@@ -2566,18 +2561,19 @@ xtensa_output_literal (FILE *file, rtx x, machine_mode mode, int labelno)\n     case MODE_FLOAT:\n       gcc_assert (GET_CODE (x) == CONST_DOUBLE);\n \n-      REAL_VALUE_FROM_CONST_DOUBLE (r, x);\n       switch (mode)\n \t{\n \tcase SFmode:\n-\t  REAL_VALUE_TO_TARGET_SINGLE (r, value_long[0]);\n+\t  REAL_VALUE_TO_TARGET_SINGLE (*CONST_DOUBLE_REAL_VALUE (x),\n+\t\t\t\t       value_long[0]);\n \t  if (HOST_BITS_PER_LONG > 32)\n \t    value_long[0] &= 0xffffffff;\n \t  fprintf (file, \"0x%08lx\\n\", value_long[0]);\n \t  break;\n \n \tcase DFmode:\n-\t  REAL_VALUE_TO_TARGET_DOUBLE (r, value_long);\n+\t  REAL_VALUE_TO_TARGET_DOUBLE (*CONST_DOUBLE_REAL_VALUE (x),\n+\t\t\t\t       value_long);\n \t  if (HOST_BITS_PER_LONG > 32)\n \t    {\n \t      value_long[0] &= 0xffffffff;"}, {"sha": "4cb8586902ab2351870cb2a5be642b1021a81eed", "filename": "gcc/cprop.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fcprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fcprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcprop.c?ref=34a72c3348688368e2a1b2184dbd05669cacbc75", "patch": "@@ -1351,13 +1351,9 @@ implicit_set_cond_p (const_rtx cond)\n \t the optimization can't be performed.  */\n       /* ??? The complex and vector checks are not implemented yet.  We just\n \t always return zero for them.  */\n-      if (CONST_DOUBLE_AS_FLOAT_P (cst))\n-\t{\n-\t  REAL_VALUE_TYPE d;\n-\t  REAL_VALUE_FROM_CONST_DOUBLE (d, cst);\n-\t  if (real_equal (&d, &dconst0))\n-\t    return 0;\n-\t}\n+      if (CONST_DOUBLE_AS_FLOAT_P (cst)\n+\t  && real_equal (CONST_DOUBLE_REAL_VALUE (cst), &dconst0))\n+\treturn 0;\n       else\n \treturn 0;\n     }"}, {"sha": "c1b7c7b10e3cfadcdbc80eae08bcb39a8e7aa09a", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=34a72c3348688368e2a1b2184dbd05669cacbc75", "patch": "@@ -15575,12 +15575,10 @@ insert_wide_int (const wide_int &val, unsigned char *dest, int elt_size)\n static void\n insert_float (const_rtx rtl, unsigned char *array)\n {\n-  REAL_VALUE_TYPE rv;\n   long val[4];\n   int i;\n \n-  REAL_VALUE_FROM_CONST_DOUBLE (rv, rtl);\n-  real_to_target (val, &rv, GET_MODE (rtl));\n+  real_to_target (val, CONST_DOUBLE_REAL_VALUE (rtl), GET_MODE (rtl));\n \n   /* real_to_target puts 32-bit pieces in each long.  Pack them.  */\n   for (i = 0; i < GET_MODE_SIZE (GET_MODE (rtl)) / 4; i++)"}, {"sha": "93cf50822aeffd4983384929054f496a6d53d12d", "filename": "gcc/expmed.c", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=34a72c3348688368e2a1b2184dbd05669cacbc75", "patch": "@@ -3234,17 +3234,12 @@ expand_mult (machine_mode mode, rtx op0, rtx op1, rtx target,\n  skip_synth:\n \n   /* Expand x*2.0 as x+x.  */\n-  if (CONST_DOUBLE_AS_FLOAT_P (scalar_op1))\n+  if (CONST_DOUBLE_AS_FLOAT_P (scalar_op1)\n+      && real_equal (CONST_DOUBLE_REAL_VALUE (scalar_op1), &dconst2))\n     {\n-      REAL_VALUE_TYPE d;\n-      REAL_VALUE_FROM_CONST_DOUBLE (d, scalar_op1);\n-\n-      if (real_equal (&d, &dconst2))\n-\t{\n-\t  op0 = force_reg (GET_MODE (op0), op0);\n-\t  return expand_binop (mode, add_optab, op0, op0,\n-\t\t\t       target, unsignedp, OPTAB_LIB_WIDEN);\n-\t}\n+      op0 = force_reg (GET_MODE (op0), op0);\n+      return expand_binop (mode, add_optab, op0, op0,\n+\t\t\t   target, unsignedp, OPTAB_LIB_WIDEN);\n     }\n \n   /* This used to use umul_optab if unsigned, but for non-widening multiply\n@@ -4997,12 +4992,7 @@ make_tree (tree type, rtx x)\n \t\t\t      wide_int::from_array (&CONST_DOUBLE_LOW (x), 2,\n \t\t\t\t\t\t    HOST_BITS_PER_WIDE_INT * 2));\n       else\n-\t{\n-\t  REAL_VALUE_TYPE d;\n-\n-\t  REAL_VALUE_FROM_CONST_DOUBLE (d, x);\n-\t  t = build_real (type, d);\n-\t}\n+\tt = build_real (type, *CONST_DOUBLE_REAL_VALUE (x));\n \n       return t;\n "}, {"sha": "6498a63bc90e84fb20bd1c77a45aa6a5526daf4b", "filename": "gcc/expr.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=34a72c3348688368e2a1b2184dbd05669cacbc75", "patch": "@@ -3626,11 +3626,11 @@ compress_float_constant (rtx x, rtx y)\n   machine_mode dstmode = GET_MODE (x);\n   machine_mode orig_srcmode = GET_MODE (y);\n   machine_mode srcmode;\n-  REAL_VALUE_TYPE r;\n+  const REAL_VALUE_TYPE *r;\n   int oldcost, newcost;\n   bool speed = optimize_insn_for_speed_p ();\n \n-  REAL_VALUE_FROM_CONST_DOUBLE (r, y);\n+  r = CONST_DOUBLE_REAL_VALUE (y);\n \n   if (targetm.legitimate_constant_p (dstmode, y))\n     oldcost = set_src_cost (y, orig_srcmode, speed);\n@@ -3651,10 +3651,10 @@ compress_float_constant (rtx x, rtx y)\n \tcontinue;\n \n       /* Skip if the narrowed value isn't exact.  */\n-      if (! exact_real_truncate (srcmode, &r))\n+      if (! exact_real_truncate (srcmode, r))\n \tcontinue;\n \n-      trunc_y = const_double_from_real_value (r, srcmode);\n+      trunc_y = const_double_from_real_value (*r, srcmode);\n \n       if (targetm.legitimate_constant_p (srcmode, trunc_y))\n \t{"}, {"sha": "ecbe563abd6302bc6636418551e700acf66fa5ed", "filename": "gcc/real.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=34a72c3348688368e2a1b2184dbd05669cacbc75", "patch": "@@ -426,10 +426,6 @@ extern const REAL_VALUE_TYPE * dconst_sqrt2_ptr (void);\n    from a given integer constant.  */\n REAL_VALUE_TYPE real_value_from_int_cst (const_tree, const_tree);\n \n-/* Given a CONST_DOUBLE in FROM, store into TO the value it represents.  */\n-#define REAL_VALUE_FROM_CONST_DOUBLE(to, from) \\\n-  ((to) = *CONST_DOUBLE_REAL_VALUE (from))\n-\n /* Return a CONST_DOUBLE with value R and mode M.  */\n extern rtx const_double_from_real_value (REAL_VALUE_TYPE, machine_mode);\n "}, {"sha": "23b2c45e6cfe5c1c285d74f97516d8f870d354d7", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=34a72c3348688368e2a1b2184dbd05669cacbc75", "patch": "@@ -5785,15 +5785,13 @@ split_double (rtx value, rtx *first, rtx *second)\n     }\n   else\n     {\n-      REAL_VALUE_TYPE r;\n       long l[2];\n-      REAL_VALUE_FROM_CONST_DOUBLE (r, value);\n \n       /* Note, this converts the REAL_VALUE_TYPE to the target's\n \t format, splits up the floating point double and outputs\n \t exactly 32 bits of it into each of l[0] and l[1] --\n \t not necessarily BITS_PER_WORD bits.  */\n-      REAL_VALUE_TO_TARGET_DOUBLE (r, l);\n+      REAL_VALUE_TO_TARGET_DOUBLE (*CONST_DOUBLE_REAL_VALUE (value), l);\n \n       /* If 32 bits is an entire word for the target, but not for the host,\n \t then sign-extend on the host so that the number will look the same"}, {"sha": "1f91afc05213eb096e6cf5b768d2d3f9d7da5d8f", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 28, "deletions": 40, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=34a72c3348688368e2a1b2184dbd05669cacbc75", "patch": "@@ -224,12 +224,8 @@ avoid_constant_pool_reference (rtx x)\n       tmp = XEXP (x, 0);\n       c = avoid_constant_pool_reference (tmp);\n       if (c != tmp && CONST_DOUBLE_AS_FLOAT_P (c))\n-\t{\n-\t  REAL_VALUE_TYPE d;\n-\n-\t  REAL_VALUE_FROM_CONST_DOUBLE (d, c);\n-\t  return const_double_from_real_value (d, GET_MODE (x));\n-\t}\n+\treturn const_double_from_real_value (*CONST_DOUBLE_REAL_VALUE (c),\n+\t\t\t\t\t     GET_MODE (x));\n       return x;\n \n     default:\n@@ -1793,9 +1789,7 @@ simplify_const_unary_operation (enum rtx_code code, machine_mode mode,\n \t   && SCALAR_FLOAT_MODE_P (mode)\n \t   && SCALAR_FLOAT_MODE_P (GET_MODE (op)))\n     {\n-      REAL_VALUE_TYPE d;\n-      REAL_VALUE_FROM_CONST_DOUBLE (d, op);\n-\n+      REAL_VALUE_TYPE d = *CONST_DOUBLE_REAL_VALUE (op);\n       switch (code)\n \t{\n \tcase SQRT:\n@@ -1846,8 +1840,8 @@ simplify_const_unary_operation (enum rtx_code code, machine_mode mode,\n \n       /* This was formerly used only for non-IEEE float.\n \t eggert@twinsun.com says it is safe for IEEE also.  */\n-      REAL_VALUE_TYPE x, t;\n-      REAL_VALUE_FROM_CONST_DOUBLE (x, op);\n+      REAL_VALUE_TYPE t;\n+      const REAL_VALUE_TYPE *x = CONST_DOUBLE_REAL_VALUE (op);\n       wide_int wmax, wmin;\n       /* This is part of the abi to real_to_integer, but we check\n \t things before making this call.  */\n@@ -1856,37 +1850,36 @@ simplify_const_unary_operation (enum rtx_code code, machine_mode mode,\n       switch (code)\n \t{\n \tcase FIX:\n-\t  if (REAL_VALUE_ISNAN (x))\n+\t  if (REAL_VALUE_ISNAN (*x))\n \t    return const0_rtx;\n \n \t  /* Test against the signed upper bound.  */\n \t  wmax = wi::max_value (width, SIGNED);\n \t  real_from_integer (&t, VOIDmode, wmax, SIGNED);\n-\t  if (real_less (&t, &x))\n+\t  if (real_less (&t, x))\n \t    return immed_wide_int_const (wmax, mode);\n \n \t  /* Test against the signed lower bound.  */\n \t  wmin = wi::min_value (width, SIGNED);\n \t  real_from_integer (&t, VOIDmode, wmin, SIGNED);\n-\t  if (real_less (&x, &t))\n+\t  if (real_less (x, &t))\n \t    return immed_wide_int_const (wmin, mode);\n \n-\t  return immed_wide_int_const (real_to_integer (&x, &fail, width), mode);\n-\t  break;\n+\t  return immed_wide_int_const (real_to_integer (x, &fail, width),\n+\t\t\t\t       mode);\n \n \tcase UNSIGNED_FIX:\n-\t  if (REAL_VALUE_ISNAN (x) || REAL_VALUE_NEGATIVE (x))\n+\t  if (REAL_VALUE_ISNAN (*x) || REAL_VALUE_NEGATIVE (*x))\n \t    return const0_rtx;\n \n \t  /* Test against the unsigned upper bound.  */\n \t  wmax = wi::max_value (width, UNSIGNED);\n \t  real_from_integer (&t, VOIDmode, wmax, UNSIGNED);\n-\t  if (real_less (&t, &x))\n+\t  if (real_less (&t, x))\n \t    return immed_wide_int_const (wmax, mode);\n \n-\t  return immed_wide_int_const (real_to_integer (&x, &fail, width),\n+\t  return immed_wide_int_const (real_to_integer (x, &fail, width),\n \t\t\t\t       mode);\n-\t  break;\n \n \tdefault:\n \t  gcc_unreachable ();\n@@ -2469,14 +2462,13 @@ simplify_binary_operation_1 (enum rtx_code code, machine_mode mode,\n \t  && !DECIMAL_FLOAT_MODE_P (GET_MODE (trueop1))\n \t  && GET_MODE (op0) == mode)\n \t{\n-\t  REAL_VALUE_TYPE d;\n-\t  REAL_VALUE_FROM_CONST_DOUBLE (d, trueop1);\n+\t  const REAL_VALUE_TYPE *d1 = CONST_DOUBLE_REAL_VALUE (trueop1);\n \n-\t  if (real_equal (&d, &dconst2))\n+\t  if (real_equal (d1, &dconst2))\n \t    return simplify_gen_binary (PLUS, mode, op0, copy_rtx (op0));\n \n \t  if (!HONOR_SNANS (mode)\n-\t      && real_equal (&d, &dconstm1))\n+\t      && real_equal (d1, &dconstm1))\n \t    return simplify_gen_unary (NEG, mode, op0, mode);\n \t}\n \n@@ -3098,20 +3090,20 @@ simplify_binary_operation_1 (enum rtx_code code, machine_mode mode,\n \t  if (CONST_DOUBLE_AS_FLOAT_P (trueop1)\n \t      && trueop1 != CONST0_RTX (mode))\n \t    {\n-\t      REAL_VALUE_TYPE d;\n-\t      REAL_VALUE_FROM_CONST_DOUBLE (d, trueop1);\n+\t      const REAL_VALUE_TYPE *d1 = CONST_DOUBLE_REAL_VALUE (trueop1);\n \n \t      /* x/-1.0 is -x.  */\n-\t      if (real_equal (&d, &dconstm1)\n+\t      if (real_equal (d1, &dconstm1)\n \t\t  && !HONOR_SNANS (mode))\n \t\treturn simplify_gen_unary (NEG, mode, op0, mode);\n \n \t      /* Change FP division by a constant into multiplication.\n \t\t Only do this with -freciprocal-math.  */\n \t      if (flag_reciprocal_math\n-\t\t  && !real_equal (&d, &dconst0))\n+\t\t  && !real_equal (d1, &dconst0))\n \t\t{\n-\t\t  real_arithmetic (&d, RDIV_EXPR, &dconst1, &d);\n+\t\t  REAL_VALUE_TYPE d;\n+\t\t  real_arithmetic (&d, RDIV_EXPR, &dconst1, d1);\n \t\t  tem = const_double_from_real_value (d, mode);\n \t\t  return simplify_gen_binary (MULT, mode, op0, tem);\n \t\t}\n@@ -3862,10 +3854,8 @@ simplify_const_binary_operation (enum rtx_code code, machine_mode mode,\n \t  REAL_VALUE_TYPE f0, f1, value, result;\n \t  bool inexact;\n \n-\t  REAL_VALUE_FROM_CONST_DOUBLE (f0, op0);\n-\t  REAL_VALUE_FROM_CONST_DOUBLE (f1, op1);\n-\t  real_convert (&f0, mode, &f0);\n-\t  real_convert (&f1, mode, &f1);\n+\t  real_convert (&f0, mode, CONST_DOUBLE_REAL_VALUE (op0));\n+\t  real_convert (&f1, mode, CONST_DOUBLE_REAL_VALUE (op1));\n \n \t  if (HONOR_SNANS (mode)\n \t      && (REAL_VALUE_ISNAN (f0) || REAL_VALUE_ISNAN (f1)))\n@@ -4912,13 +4902,11 @@ simplify_const_relational_operation (enum rtx_code code,\n       && CONST_DOUBLE_AS_FLOAT_P (trueop1)\n       && SCALAR_FLOAT_MODE_P (GET_MODE (trueop0)))\n     {\n-      REAL_VALUE_TYPE d0, d1;\n-\n-      REAL_VALUE_FROM_CONST_DOUBLE (d0, trueop0);\n-      REAL_VALUE_FROM_CONST_DOUBLE (d1, trueop1);\n+      const REAL_VALUE_TYPE *d0 = CONST_DOUBLE_REAL_VALUE (trueop0);\n+      const REAL_VALUE_TYPE *d1 = CONST_DOUBLE_REAL_VALUE (trueop1);\n \n       /* Comparisons are unordered iff at least one of the values is NaN.  */\n-      if (REAL_VALUE_ISNAN (d0) || REAL_VALUE_ISNAN (d1))\n+      if (REAL_VALUE_ISNAN (*d0) || REAL_VALUE_ISNAN (*d1))\n \tswitch (code)\n \t  {\n \t  case UNEQ:\n@@ -4942,8 +4930,8 @@ simplify_const_relational_operation (enum rtx_code code,\n \t  }\n \n       return comparison_result (code,\n-\t\t\t\t(real_equal (&d0, &d1) ? CMP_EQ :\n-\t\t\t\t real_less (&d0, &d1) ? CMP_LT : CMP_GT));\n+\t\t\t\t(real_equal (d0, d1) ? CMP_EQ :\n+\t\t\t\t real_less (d0, d1) ? CMP_LT : CMP_GT));\n     }\n \n   /* Otherwise, see if the operands are both integers.  */"}, {"sha": "48c3662b0006fc3869bded43cb53f4453159eb4a", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34a72c3348688368e2a1b2184dbd05669cacbc75/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=34a72c3348688368e2a1b2184dbd05669cacbc75", "patch": "@@ -3841,11 +3841,8 @@ output_constant_pool_2 (machine_mode mode, rtx x, unsigned int align)\n     case MODE_FLOAT:\n     case MODE_DECIMAL_FLOAT:\n       {\n-\tREAL_VALUE_TYPE r;\n-\n \tgcc_assert (CONST_DOUBLE_AS_FLOAT_P (x));\n-\tREAL_VALUE_FROM_CONST_DOUBLE (r, x);\n-\tassemble_real (r, mode, align);\n+\tassemble_real (*CONST_DOUBLE_REAL_VALUE (x), mode, align);\n \tbreak;\n       }\n "}]}