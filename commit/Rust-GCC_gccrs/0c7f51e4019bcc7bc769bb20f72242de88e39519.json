{"sha": "0c7f51e4019bcc7bc769bb20f72242de88e39519", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGM3ZjUxZTQwMTliY2M3YmM3NjliYjIwZjcyMjQyZGU4OGUzOTUxOQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2019-04-12T14:35:48Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2019-04-12T14:35:48Z"}, "message": "params.def (PARAM_MAX_LTO_STREAMING_PARALLELISM): New parameter.\n\n\n\t* params.def (PARAM_MAX_LTO_STREAMING_PARALLELISM): New parameter.\n\t* lto.c (do_stream_out): rename to ...\n\t(stream_out): ... this one; move original code to ...\n\t(stream_out_partitions_1, stream_out_partitions): ... these new\n\tfunctions.\n\t(lto_wpa_write_files): Honnor lto_parallelism\n\nFrom-SVN: r270317", "tree": {"sha": "e1f0fc0cea8d4b1a8663ab180271fcacb9413943", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1f0fc0cea8d4b1a8663ab180271fcacb9413943"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c7f51e4019bcc7bc769bb20f72242de88e39519", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c7f51e4019bcc7bc769bb20f72242de88e39519", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c7f51e4019bcc7bc769bb20f72242de88e39519", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c7f51e4019bcc7bc769bb20f72242de88e39519/comments", "author": null, "committer": null, "parents": [{"sha": "22de32a1a5d9b3e0e558aa530fc98addf022182b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22de32a1a5d9b3e0e558aa530fc98addf022182b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22de32a1a5d9b3e0e558aa530fc98addf022182b"}], "stats": {"total": 71, "additions": 57, "deletions": 14}, "files": [{"sha": "98ff5f721088d7123f72478a98c657f66a1b821d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c7f51e4019bcc7bc769bb20f72242de88e39519/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c7f51e4019bcc7bc769bb20f72242de88e39519/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0c7f51e4019bcc7bc769bb20f72242de88e39519", "patch": "@@ -1,3 +1,8 @@\n+2019-04-12  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* params.def (PARAM_MAX_LTO_STREAMING_PARALLELISM): New parameter.\n+\t* doc/invoke.texi (max-lto-streaming-paralellism): New --param.\n+\n 2019-04-12  Martin Liska  <mliska@suse.cz>\n \n \tPR middle-end/89970"}, {"sha": "e288400a3126a8f4dc0658c2d544e058a4148d3e", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c7f51e4019bcc7bc769bb20f72242de88e39519/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c7f51e4019bcc7bc769bb20f72242de88e39519/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=0c7f51e4019bcc7bc769bb20f72242de88e39519", "patch": "@@ -1,3 +1,11 @@\n+2019-04-12  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* lto.c (do_stream_out): rename to ...\n+\t(stream_out): ... this one; move original code to ...\n+\t(stream_out_partitions_1, stream_out_partitions): ... these new\n+\tfunctions.\n+\t(lto_wpa_write_files): Honnor lto_parallelism\n+\n 2019-03-26  Martin Liska  <mliska@suse.cz>\n \n \t* lto-symtab.c (lto_symtab_merge_decls_2): Fix option name"}, {"sha": "4367928a5154cdf9ebf7e78fb761fe67783bc279", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 39, "deletions": 14, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c7f51e4019bcc7bc769bb20f72242de88e39519/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c7f51e4019bcc7bc769bb20f72242de88e39519/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=0c7f51e4019bcc7bc769bb20f72242de88e39519", "patch": "@@ -2304,7 +2304,7 @@ static lto_file *current_lto_file;\n /* Actually stream out ENCODER into TEMP_FILENAME.  */\n \n static void\n-do_stream_out (char *temp_filename, lto_symtab_encoder_t encoder, int part)\n+stream_out (char *temp_filename, lto_symtab_encoder_t encoder, int part)\n {\n   lto_file *file = lto_obj_file_open (temp_filename, true);\n   if (!file)\n@@ -2352,19 +2352,31 @@ wait_for_child ()\n }\n #endif\n \n+static void\n+stream_out_partitions_1 (char *temp_filename, int blen, int min, int max)\n+{\n+   /* Write all the nodes in SET.  */\n+   for (int p = min; p < max; p ++)\n+     {\n+       sprintf (temp_filename + blen, \"%u.o\", p);\n+       stream_out (temp_filename, ltrans_partitions[p]->encoder, p);\n+       ltrans_partitions[p]->encoder = NULL;\n+     }\n+}\n+\n /* Stream out ENCODER into TEMP_FILENAME\n    Fork if that seems to help.  */\n \n static void\n-stream_out (char *temp_filename, lto_symtab_encoder_t encoder,\n-\t    bool ARG_UNUSED (last), int part)\n+stream_out_partitions (char *temp_filename, int blen, int min, int max,\n+\t\t       bool ARG_UNUSED (last))\n {\n #ifdef HAVE_WORKING_FORK\n   static int nruns;\n \n   if (lto_parallelism <= 1)\n     {\n-      do_stream_out (temp_filename, encoder, part);\n+      stream_out_partitions_1 (temp_filename, blen, min, max);\n       return;\n     }\n \n@@ -2384,26 +2396,26 @@ stream_out (char *temp_filename, lto_symtab_encoder_t encoder,\n       if (!cpid)\n \t{\n \t  setproctitle (\"lto1-wpa-streaming\");\n-\t  do_stream_out (temp_filename, encoder, part);\n+          stream_out_partitions_1 (temp_filename, blen, min, max);\n \t  exit (0);\n \t}\n       /* Fork failed; lets do the job ourseleves.  */\n       else if (cpid == -1)\n-        do_stream_out (temp_filename, encoder, part);\n+        stream_out_partitions_1 (temp_filename, blen, min, max);\n       else\n \tnruns++;\n     }\n   /* Last partition; stream it and wait for all children to die.  */\n   else\n     {\n       int i;\n-      do_stream_out (temp_filename, encoder, part);\n+      stream_out_partitions_1 (temp_filename, blen, min, max);\n       for (i = 0; i < nruns; i++)\n \twait_for_child ();\n     }\n   asm_nodes_output = true;\n #else\n-  do_stream_out (temp_filename, encoder, part);\n+  stream_out_partitions_1 (temp_filename, blen, min, max);\n #endif\n }\n \n@@ -2445,6 +2457,13 @@ lto_wpa_write_files (void)\n   blen = strlen (temp_filename);\n \n   n_sets = ltrans_partitions.length ();\n+  unsigned sets_per_worker = n_sets;\n+  if (lto_parallelism > 1)\n+    {\n+      if (lto_parallelism > (int)n_sets)\n+\tlto_parallelism = n_sets;\n+      sets_per_worker = (n_sets + lto_parallelism - 1) / lto_parallelism;\n+    }\n \n   for (i = 0; i < n_sets; i++)\n     {\n@@ -2493,13 +2512,17 @@ lto_wpa_write_files (void)\n \t}\n       gcc_checking_assert (lto_symtab_encoder_size (part->encoder) || !i);\n \n-      stream_out (temp_filename, part->encoder, i == n_sets - 1, i);\n-\n-      part->encoder = NULL;\n-\n       temp_priority.safe_push (part->insns);\n       temp_filenames.safe_push (xstrdup (temp_filename));\n     }\n+\n+  for (int set = 0; set < MAX (lto_parallelism, 1); set++)\n+    {\n+      stream_out_partitions (temp_filename, blen, set * sets_per_worker,\n+\t\t\t     MIN ((set + 1) * sets_per_worker, n_sets),\n+\t\t\t     set == MAX (lto_parallelism, 1) - 1);\n+    }\n+\n   ltrans_output_list_stream = fopen (ltrans_output_list, \"w\");\n   if (ltrans_output_list_stream == NULL)\n     fatal_error (input_location,\n@@ -3113,14 +3136,16 @@ do_whole_program_analysis (void)\n \n   lto_parallelism = 1;\n \n-  /* TODO: jobserver communicatoin is not supported, yet.  */\n+  /* TODO: jobserver communication is not supported, yet.  */\n   if (!strcmp (flag_wpa, \"jobserver\"))\n-    lto_parallelism = -1;\n+    lto_parallelism = PARAM_VALUE (PARAM_MAX_LTO_STREAMING_PARALLELISM);\n   else\n     {\n       lto_parallelism = atoi (flag_wpa);\n       if (lto_parallelism <= 0)\n \tlto_parallelism = 0;\n+      if (lto_parallelism >= PARAM_VALUE (PARAM_MAX_LTO_STREAMING_PARALLELISM))\n+\tlto_parallelism = PARAM_VALUE (PARAM_MAX_LTO_STREAMING_PARALLELISM);\n     }\n \n   timevar_start (TV_PHASE_OPT_GEN);"}, {"sha": "3c9c5fc0f13d4f22b188e3ff801e817aaf1cba97", "filename": "gcc/params.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c7f51e4019bcc7bc769bb20f72242de88e39519/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c7f51e4019bcc7bc769bb20f72242de88e39519/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=0c7f51e4019bcc7bc769bb20f72242de88e39519", "patch": "@@ -1146,6 +1146,11 @@ DEFPARAM (MAX_PARTITION_SIZE,\n \t  \"Maximal size of a partition for LTO (in estimated instructions).\",\n \t  1000000, 0, INT_MAX)\n \n+DEFPARAM (PARAM_MAX_LTO_STREAMING_PARALLELISM,\n+\t  \"lto-max-streaming-parallelism\",\n+\t  \"maximal number of LTO partitions streamed in parallel.\",\n+\t  32, 1, 0)\n+\n /* Diagnostic parameters.  */\n \n DEFPARAM (CXX_MAX_NAMESPACES_FOR_DIAGNOSTIC_HELP,"}]}