{"sha": "521506258fa5b6b57a50b0570d8208894ed19f79", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTIxNTA2MjU4ZmE1YjZiNTdhNTBiMDU3MGQ4MjA4ODk0ZWQxOWY3OQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2010-03-29T15:00:43Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-03-29T15:00:43Z"}, "message": "Some raw string changes from N3077\n\n\tSome raw string changes from N3077\n\t* charset.c (cpp_interpret_string): Change inner delimiters to ().\n\t* lex.c (lex_raw_string): Likewise.  Also disallow '\\' in delimiter.\n\nFrom-SVN: r157797", "tree": {"sha": "876f46ded2898ed88f7228731ce8d1688068e6d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/876f46ded2898ed88f7228731ce8d1688068e6d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/521506258fa5b6b57a50b0570d8208894ed19f79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/521506258fa5b6b57a50b0570d8208894ed19f79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/521506258fa5b6b57a50b0570d8208894ed19f79", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/521506258fa5b6b57a50b0570d8208894ed19f79/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3b34d92c9cabd5249eacf0774980028defeffde0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b34d92c9cabd5249eacf0774980028defeffde0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b34d92c9cabd5249eacf0774980028defeffde0"}], "stats": {"total": 280, "additions": 151, "deletions": 129}, "files": [{"sha": "e2fd72efee587dd32ef9d573db376406bfcc11e9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/521506258fa5b6b57a50b0570d8208894ed19f79/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/521506258fa5b6b57a50b0570d8208894ed19f79/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=521506258fa5b6b57a50b0570d8208894ed19f79", "patch": "@@ -1,3 +1,16 @@\n+2010-03-29  Jason Merrill  <jason@redhat.com>\n+\n+\tN3077\n+\t* g++.dg/ext/raw-string-1.C: Change [] to ().\n+\t* g++.dg/ext/raw-string-2.C: Change [] to ().\n+\tDon't use \\ in delimiter.\n+\t* g++.dg/ext/raw-string-3.C: Change [] to ().\n+\t* g++.dg/ext/raw-string-4.C: Change [] to ().\n+\t* g++.dg/ext/raw-string-5.C: Change [] to ().\n+\tTest for error on \\ in delimiter.\n+\t* g++.dg/ext/raw-string-6.C: Change [] to ().\n+\t* g++.dg/ext/raw-string-7.C: Change [] to ().\n+\n 2010-03-29  Jie Zhang  <jie@codesourcery.com>\n \n \tPR 43564"}, {"sha": "c2426d5395f37e41abb27058d036107793793aae", "filename": "gcc/testsuite/g++.dg/ext/raw-string-1.C", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/521506258fa5b6b57a50b0570d8208894ed19f79/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fraw-string-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/521506258fa5b6b57a50b0570d8208894ed19f79/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fraw-string-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fraw-string-1.C?ref=521506258fa5b6b57a50b0570d8208894ed19f79", "patch": "@@ -1,60 +1,60 @@\n // { dg-do run }\n // { dg-options \"-std=c++0x\" }\n \n-const char s0[] = R\"[a\\\n+const char s0[] = R\"(a\\\n \\u010d\\U0000010D\\\\\\'\\\"\\?\\a\\b\\f\\n\\r\\t\\v\\0\\00\\000\\xa\\xabb\n-c]\";\n+c)\";\n const char s1[] = \"a\\U0000010d\\u010d\\\\\\\\\\\\'\\\\\\\"\\\\?\\\\a\\\\b\\\\f\\\\n\\\\r\\\\t\\\\v\\\\0\\\\00\\\\000\\\\xa\\\\xabb\\nc\";\n-const char s2[] = R\"*|*[a\\\n+const char s2[] = R\"*|*(a\\\n b\n-c]\"\n-c]*|\"\n-c]*|*\";\n-const char s3[] = \"ab\\nc]\\\"\\nc]*|\\\"\\nc\";\n+c)\"\n+c)*|\"\n+c)*|*\";\n+const char s3[] = \"ab\\nc)\\\"\\nc)*|\\\"\\nc\";\n \n-const char t0[] = u8R\"[a\\\n+const char t0[] = u8R\"(a\\\n \\u010d\\U0000010D\\\\\\'\\\"\\?\\a\\b\\f\\n\\r\\t\\v\\0\\00\\000\\xa\\xabb\n-c]\";\n+c)\";\n const char t1[] = u8\"a\\U0000010d\\u010d\\\\\\\\\\\\'\\\\\\\"\\\\?\\\\a\\\\b\\\\f\\\\n\\\\r\\\\t\\\\v\\\\0\\\\00\\\\000\\\\xa\\\\xabb\\nc\";\n-const char t2[] = u8R\"*|*[a\\\n+const char t2[] = u8R\"*|*(a\\\n b\n-c]\"\n-c]*|\"\n-c]*|*\";\n-const char t3[] = u8\"ab\\nc]\\\"\\nc]*|\\\"\\nc\";\n+c)\"\n+c)*|\"\n+c)*|*\";\n+const char t3[] = u8\"ab\\nc)\\\"\\nc)*|\\\"\\nc\";\n \n-const char16_t u0[] = uR\"[a\\\n+const char16_t u0[] = uR\"(a\\\n \\u010d\\U0000010D\\\\\\'\\\"\\?\\a\\b\\f\\n\\r\\t\\v\\0\\00\\000\\xa\\xabb\n-c]\";\n+c)\";\n const char16_t u1[] = u\"a\\U0000010d\\u010d\\\\\\\\\\\\'\\\\\\\"\\\\?\\\\a\\\\b\\\\f\\\\n\\\\r\\\\t\\\\v\\\\0\\\\00\\\\000\\\\xa\\\\xabb\\nc\";\n-const char16_t u2[] = uR\"*|*[a\\\n+const char16_t u2[] = uR\"*|*(a\\\n b\n-c]\"\n-c]*|\"\n-c]*|*\";\n-const char16_t u3[] = u\"ab\\nc]\\\"\\nc]*|\\\"\\nc\";\n+c)\"\n+c)*|\"\n+c)*|*\";\n+const char16_t u3[] = u\"ab\\nc)\\\"\\nc)*|\\\"\\nc\";\n \n-const char32_t U0[] = UR\"[a\\\n+const char32_t U0[] = UR\"(a\\\n \\u010d\\U0000010D\\\\\\'\\\"\\?\\a\\b\\f\\n\\r\\t\\v\\0\\00\\000\\xa\\xabb\n-c]\";\n+c)\";\n const char32_t U1[] = U\"a\\U0000010d\\u010d\\\\\\\\\\\\'\\\\\\\"\\\\?\\\\a\\\\b\\\\f\\\\n\\\\r\\\\t\\\\v\\\\0\\\\00\\\\000\\\\xa\\\\xabb\\nc\";\n-const char32_t U2[] = UR\"*|*[a\\\n+const char32_t U2[] = UR\"*|*(a\\\n b\n-c]\"\n-c]*|\"\n-c]*|*\";\n-const char32_t U3[] = U\"ab\\nc]\\\"\\nc]*|\\\"\\nc\";\n+c)\"\n+c)*|\"\n+c)*|*\";\n+const char32_t U3[] = U\"ab\\nc)\\\"\\nc)*|\\\"\\nc\";\n \n-const wchar_t L0[] = LR\"[a\\\n+const wchar_t L0[] = LR\"(a\\\n \\u010d\\U0000010D\\\\\\'\\\"\\?\\a\\b\\f\\n\\r\\t\\v\\0\\00\\000\\xa\\xabb\n-c]\";\n+c)\";\n const wchar_t L1[] = L\"a\\U0000010d\\u010d\\\\\\\\\\\\'\\\\\\\"\\\\?\\\\a\\\\b\\\\f\\\\n\\\\r\\\\t\\\\v\\\\0\\\\00\\\\000\\\\xa\\\\xabb\\nc\";\n-const wchar_t L2[] = LR\"*|*[a\\\n+const wchar_t L2[] = LR\"*|*(a\\\n b\n-c]\"\n-c]*|\"\n-c]*|*\";\n-const wchar_t L3[] = L\"ab\\nc]\\\"\\nc]*|\\\"\\nc\";\n+c)\"\n+c)*|\"\n+c)*|*\";\n+const wchar_t L3[] = L\"ab\\nc)\\\"\\nc)*|\\\"\\nc\";\n \n int\n main (void)\n@@ -89,8 +89,8 @@ main (void)\n   if (sizeof (L2) != sizeof (L3)\n       || __builtin_memcmp (L2, L3, sizeof (L2)) != 0)\n     __builtin_abort ();\n-  if (sizeof (R\"*[]*\") != 1\n-      || __builtin_memcmp (R\"*[]*\", \"\", 1) != 0)\n+  if (sizeof (R\"*()*\") != 1\n+      || __builtin_memcmp (R\"*()*\", \"\", 1) != 0)\n     __builtin_abort ();\n   return 0;\n }"}, {"sha": "d2fe9aaff42bb38988059db5273030d657007361", "filename": "gcc/testsuite/g++.dg/ext/raw-string-2.C", "status": "modified", "additions": 65, "deletions": 65, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/521506258fa5b6b57a50b0570d8208894ed19f79/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fraw-string-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/521506258fa5b6b57a50b0570d8208894ed19f79/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fraw-string-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fraw-string-2.C?ref=521506258fa5b6b57a50b0570d8208894ed19f79", "patch": "@@ -11,48 +11,48 @@\n #define L\n #define LR\n \n-const char s00[] = R\"[a]\" \"[b]\";\n-const char s01[] = \"[a]\" R\"*[b]*\";\n-const char s02[] = R\"[a]\" R\"[b]\";\n-const char s03[] = R\"-[a]-\" u8\"[b]\";\n-const char s04[] = \"[a]\" u8R\"MNOPQRSTUVWXYZ[b]MNOPQRSTUVWXYZ\";\n-const char s05[] = R\"[a]\" u8R\"wxyzABCDEFGHIJKL[b]wxyzABCDEFGHIJKL\";\n-const char s06[] = u8R\";([a];(\" \"[b]\";\n-const char s07[] = u8\"[a]\" R\"[b]\";\n-const char s08[] = u8R\"[a]\" R\"_{}#()<>%:;.?*+-[b]_{}#()<>%:;.?*+-\";\n-const char s09[] = u8R\"/^&|~!=,\"'\\[a]/^&|~!=,\"'\\\" u8\"[b]\";\n-const char s10[] = u8\"[a]\" u8R\"0123456789abcdef[b]0123456789abcdef\";\n-const char s11[] = u8R\"ghijklmnopqrstuv[a]ghijklmnopqrstuv\" u8R\"w[b]w\";\n+const char s00[] = R\"(a)\" \"(b)\";\n+const char s01[] = \"(a)\" R\"*(b)*\";\n+const char s02[] = R\"(a)\" R\"(b)\";\n+const char s03[] = R\"-(a)-\" u8\"(b)\";\n+const char s04[] = \"(a)\" u8R\"MNOPQRSTUVWXYZ(b)MNOPQRSTUVWXYZ\";\n+const char s05[] = R\"(a)\" u8R\"wxyzABCDEFGHIJKL(b)wxyzABCDEFGHIJKL\";\n+const char s06[] = u8R\";[(a);[\" \"(b)\";\n+const char s07[] = u8\"(a)\" R\"(b)\";\n+const char s08[] = u8R\"(a)\" R\"_{}#[]<>%:;.?*+-(b)_{}#[]<>%:;.?*+-\";\n+const char s09[] = u8R\"/^&|~!=,\"'(a)/^&|~!=,\"'\" u8\"(b)\";\n+const char s10[] = u8\"(a)\" u8R\"0123456789abcdef(b)0123456789abcdef\";\n+const char s11[] = u8R\"ghijklmnopqrstuv(a)ghijklmnopqrstuv\" u8R\"w(b)w\";\n \n-const char16_t u03[] = R\"-[a]-\" u\"[b]\";\n-const char16_t u04[] = \"[a]\" uR\"MNOPQRSTUVWXYZ[b]MNOPQRSTUVWXYZ\";\n-const char16_t u05[] = R\"[a]\" uR\"wxyzABCDEFGHIJKL[b]wxyzABCDEFGHIJKL\";\n-const char16_t u06[] = uR\";([a];(\" \"[b]\";\n-const char16_t u07[] = u\"[a]\" R\"[b]\";\n-const char16_t u08[] = uR\"[a]\" R\"_{}#()<>%:;.?*+-[b]_{}#()<>%:;.?*+-\";\n-const char16_t u09[] = uR\"/^&|~!=,\"'\\[a]/^&|~!=,\"'\\\" u\"[b]\";\n-const char16_t u10[] = u\"[a]\" uR\"0123456789abcdef[b]0123456789abcdef\";\n-const char16_t u11[] = uR\"ghijklmnopqrstuv[a]ghijklmnopqrstuv\" uR\"w[b]w\";\n+const char16_t u03[] = R\"-(a)-\" u\"(b)\";\n+const char16_t u04[] = \"(a)\" uR\"MNOPQRSTUVWXYZ(b)MNOPQRSTUVWXYZ\";\n+const char16_t u05[] = R\"(a)\" uR\"wxyzABCDEFGHIJKL(b)wxyzABCDEFGHIJKL\";\n+const char16_t u06[] = uR\";[(a);[\" \"(b)\";\n+const char16_t u07[] = u\"(a)\" R\"(b)\";\n+const char16_t u08[] = uR\"(a)\" R\"_{}#[]<>%:;.?*+-(b)_{}#[]<>%:;.?*+-\";\n+const char16_t u09[] = uR\"/^&|~!=,\"'(a)/^&|~!=,\"'\" u\"(b)\";\n+const char16_t u10[] = u\"(a)\" uR\"0123456789abcdef(b)0123456789abcdef\";\n+const char16_t u11[] = uR\"ghijklmnopqrstuv(a)ghijklmnopqrstuv\" uR\"w(b)w\";\n \n-const char32_t U03[] = R\"-[a]-\" U\"[b]\";\n-const char32_t U04[] = \"[a]\" UR\"MNOPQRSTUVWXYZ[b]MNOPQRSTUVWXYZ\";\n-const char32_t U05[] = R\"[a]\" UR\"wxyzABCDEFGHIJKL[b]wxyzABCDEFGHIJKL\";\n-const char32_t U06[] = UR\";([a];(\" \"[b]\";\n-const char32_t U07[] = U\"[a]\" R\"[b]\";\n-const char32_t U08[] = UR\"[a]\" R\"_{}#()<>%:;.?*+-[b]_{}#()<>%:;.?*+-\";\n-const char32_t U09[] = UR\"/^&|~!=,\"'\\[a]/^&|~!=,\"'\\\" U\"[b]\";\n-const char32_t U10[] = U\"[a]\" UR\"0123456789abcdef[b]0123456789abcdef\";\n-const char32_t U11[] = UR\"ghijklmnopqrstuv[a]ghijklmnopqrstuv\" UR\"w[b]w\";\n+const char32_t U03[] = R\"-(a)-\" U\"(b)\";\n+const char32_t U04[] = \"(a)\" UR\"MNOPQRSTUVWXYZ(b)MNOPQRSTUVWXYZ\";\n+const char32_t U05[] = R\"(a)\" UR\"wxyzABCDEFGHIJKL(b)wxyzABCDEFGHIJKL\";\n+const char32_t U06[] = UR\";[(a);[\" \"(b)\";\n+const char32_t U07[] = U\"(a)\" R\"(b)\";\n+const char32_t U08[] = UR\"(a)\" R\"_{}#[]<>%:;.?*+-(b)_{}#[]<>%:;.?*+-\";\n+const char32_t U09[] = UR\"/^&|~!=,\"'(a)/^&|~!=,\"'\" U\"(b)\";\n+const char32_t U10[] = U\"(a)\" UR\"0123456789abcdef(b)0123456789abcdef\";\n+const char32_t U11[] = UR\"ghijklmnopqrstuv(a)ghijklmnopqrstuv\" UR\"w(b)w\";\n \n-const wchar_t L03[] = R\"-[a]-\" L\"[b]\";\n-const wchar_t L04[] = \"[a]\" LR\"MNOPQRSTUVWXYZ[b]MNOPQRSTUVWXYZ\";\n-const wchar_t L05[] = R\"[a]\" LR\"wxyzABCDEFGHIJKL[b]wxyzABCDEFGHIJKL\";\n-const wchar_t L06[] = LR\";([a];(\" \"[b]\";\n-const wchar_t L07[] = L\"[a]\" R\"[b]\";\n-const wchar_t L08[] = LR\"[a]\" R\"_{}#()<>%:;.?*+-[b]_{}#()<>%:;.?*+-\";\n-const wchar_t L09[] = LR\"/^&|~!=,\"'\\[a]/^&|~!=,\"'\\\" L\"[b]\";\n-const wchar_t L10[] = L\"[a]\" LR\"0123456789abcdef[b]0123456789abcdef\";\n-const wchar_t L11[] = LR\"ghijklmnopqrstuv[a]ghijklmnopqrstuv\" LR\"w[b]w\";\n+const wchar_t L03[] = R\"-(a)-\" L\"(b)\";\n+const wchar_t L04[] = \"(a)\" LR\"MNOPQRSTUVWXYZ(b)MNOPQRSTUVWXYZ\";\n+const wchar_t L05[] = R\"(a)\" LR\"wxyzABCDEFGHIJKL(b)wxyzABCDEFGHIJKL\";\n+const wchar_t L06[] = LR\";[(a);[\" \"(b)\";\n+const wchar_t L07[] = L\"(a)\" R\"(b)\";\n+const wchar_t L08[] = LR\"(a)\" R\"_{}#[]<>%:;.?*+-(b)_{}#[]<>%:;.?*+-\";\n+const wchar_t L09[] = LR\"/^&|~!=,\"'(a)/^&|~!=,\"'\" L\"(b)\";\n+const wchar_t L10[] = L\"(a)\" LR\"0123456789abcdef(b)0123456789abcdef\";\n+const wchar_t L11[] = LR\"ghijklmnopqrstuv(a)ghijklmnopqrstuv\" LR\"w(b)w\";\n \n int\n main (void)\n@@ -61,44 +61,44 @@ main (void)\n   if (sizeof (str) != sizeof (val) \\\n       || __builtin_memcmp (str, val, sizeof (str)) != 0) \\\n     __builtin_abort ()\n-  TEST (s00, \"a[b]\");\n-  TEST (s01, \"[a]b\");\n+  TEST (s00, \"a(b)\");\n+  TEST (s01, \"(a)b\");\n   TEST (s02, \"ab\");\n-  TEST (s03, \"a[b]\");\n-  TEST (s04, \"[a]b\");\n+  TEST (s03, \"a(b)\");\n+  TEST (s04, \"(a)b\");\n   TEST (s05, \"ab\");\n-  TEST (s06, \"a[b]\");\n-  TEST (s07, \"[a]b\");\n+  TEST (s06, \"a(b)\");\n+  TEST (s07, \"(a)b\");\n   TEST (s08, \"ab\");\n-  TEST (s09, \"a[b]\");\n-  TEST (s10, \"[a]b\");\n+  TEST (s09, \"a(b)\");\n+  TEST (s10, \"(a)b\");\n   TEST (s11, \"ab\");\n-  TEST (u03, u\"a[b]\");\n-  TEST (u04, u\"[a]b\");\n+  TEST (u03, u\"a(b)\");\n+  TEST (u04, u\"(a)b\");\n   TEST (u05, u\"ab\");\n-  TEST (u06, u\"a[b]\");\n-  TEST (u07, u\"[a]b\");\n+  TEST (u06, u\"a(b)\");\n+  TEST (u07, u\"(a)b\");\n   TEST (u08, u\"ab\");\n-  TEST (u09, u\"a[b]\");\n-  TEST (u10, u\"[a]b\");\n+  TEST (u09, u\"a(b)\");\n+  TEST (u10, u\"(a)b\");\n   TEST (u11, u\"ab\");\n-  TEST (U03, U\"a[b]\");\n-  TEST (U04, U\"[a]b\");\n+  TEST (U03, U\"a(b)\");\n+  TEST (U04, U\"(a)b\");\n   TEST (U05, U\"ab\");\n-  TEST (U06, U\"a[b]\");\n-  TEST (U07, U\"[a]b\");\n+  TEST (U06, U\"a(b)\");\n+  TEST (U07, U\"(a)b\");\n   TEST (U08, U\"ab\");\n-  TEST (U09, U\"a[b]\");\n-  TEST (U10, U\"[a]b\");\n+  TEST (U09, U\"a(b)\");\n+  TEST (U10, U\"(a)b\");\n   TEST (U11, U\"ab\");\n-  TEST (L03, L\"a[b]\");\n-  TEST (L04, L\"[a]b\");\n+  TEST (L03, L\"a(b)\");\n+  TEST (L04, L\"(a)b\");\n   TEST (L05, L\"ab\");\n-  TEST (L06, L\"a[b]\");\n-  TEST (L07, L\"[a]b\");\n+  TEST (L06, L\"a(b)\");\n+  TEST (L07, L\"(a)b\");\n   TEST (L08, L\"ab\");\n-  TEST (L09, L\"a[b]\");\n-  TEST (L10, L\"[a]b\");\n+  TEST (L09, L\"a(b)\");\n+  TEST (L10, L\"(a)b\");\n   TEST (L11, L\"ab\");\n   return 0;\n }"}, {"sha": "bb2e0c71b55b1ca60a67c86c0dd9b89c2ccdc575", "filename": "gcc/testsuite/g++.dg/ext/raw-string-3.C", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/521506258fa5b6b57a50b0570d8208894ed19f79/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fraw-string-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/521506258fa5b6b57a50b0570d8208894ed19f79/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fraw-string-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fraw-string-3.C?ref=521506258fa5b6b57a50b0570d8208894ed19f79", "patch": "@@ -3,15 +3,15 @@\n // { dg-do compile }\n // { dg-options \"-std=c++98\" }\n \n-const void\t*s0\t= R\"[a]\";\t// { dg-error \"was not declared\" }\n+const void\t*s0\t= R\"(a)\";\t// { dg-error \"was not declared\" }\n \t\t// { dg-error \"expected ',' or ';'\" \"\" { target *-*-* } 6 }\n-const void\t*s1\t= uR\"[a]\";\t// { dg-error \"was not declared\" }\n+const void\t*s1\t= uR\"(a)\";\t// { dg-error \"was not declared\" }\n \t\t// { dg-error \"expected ',' or ';'\" \"\" { target *-*-* } 8 }\n-const void\t*s2\t= UR\"[a]\";\t// { dg-error \"was not declared\" }\n+const void\t*s2\t= UR\"(a)\";\t// { dg-error \"was not declared\" }\n \t\t// { dg-error \"expected ',' or ';'\" \"\" { target *-*-* } 10 }\n-const void\t*s3\t= u8R\"[a]\";\t// { dg-error \"was not declared\" }\n+const void\t*s3\t= u8R\"(a)\";\t// { dg-error \"was not declared\" }\n \t\t// { dg-error \"expected ',' or ';'\" \"\" { target *-*-* } 12 }\n-const void\t*s4\t= LR\"[a]\";\t// { dg-error \"was not declared\" }\n+const void\t*s4\t= LR\"(a)\";\t// { dg-error \"was not declared\" }\n \t\t// { dg-error \"expected ',' or ';'\" \"\" { target *-*-* } 14 }\n \n const int\ti0\t= R'a';\t// { dg-error \"was not declared\" }\n@@ -31,11 +31,11 @@ const int\ti4\t= LR'a';\t// { dg-error \"was not declared\" }\n #define u8R\t\"d\"\n #define LR\t\"e\"\n \n-const void\t*s5\t= R\"[a]\";\n-const void\t*s6\t= uR\"[a]\";\n-const void\t*s7\t= UR\"[a]\";\n-const void\t*s8\t= u8R\"[a]\";\n-const void\t*s9\t= LR\"[a]\";\n+const void\t*s5\t= R\"(a)\";\n+const void\t*s6\t= uR\"(a)\";\n+const void\t*s7\t= UR\"(a)\";\n+const void\t*s8\t= u8R\"(a)\";\n+const void\t*s9\t= LR\"(a)\";\n \n #undef R\n #undef uR"}, {"sha": "3808fcffea2c0770ff0576cf72dca7fd3bfcb99c", "filename": "gcc/testsuite/g++.dg/ext/raw-string-5.C", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/521506258fa5b6b57a50b0570d8208894ed19f79/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fraw-string-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/521506258fa5b6b57a50b0570d8208894ed19f79/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fraw-string-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fraw-string-5.C?ref=521506258fa5b6b57a50b0570d8208894ed19f79", "patch": "@@ -1,23 +1,26 @@\n // { dg-do compile }\n // { dg-options \"-std=c++0x\" }\n \n-const void *s0 = R\"0123456789abcdefg[]0123456789abcdefg\";\n+const void *s0 = R\"0123456789abcdefg()0123456789abcdefg\";\n \t// { dg-error \"raw string delimiter longer\" \"\" { target *-*-* } 4 }\n \t// { dg-error \"stray\" \"\" { target *-*-* } 4 }\n-const void *s1 = R\" [] \";\n+const void *s1 = R\" () \";\n \t// { dg-error \"invalid character\" \"\" { target *-*-* } 7 }\n \t// { dg-error \"stray\" \"\" { target *-*-* } 7 }\n-const void *s2 = R\"\t[]\t\";\n+const void *s2 = R\"\t()\t\";\n \t// { dg-error \"invalid character\" \"\" { target *-*-* } 10 }\n \t// { dg-error \"stray\" \"\" { target *-*-* } 10 }\n-const void *s3 = R\"][]]\";\n+const void *s3 = R\")())\";\n \t// { dg-error \"invalid character\" \"\" { target *-*-* } 13 }\n \t// { dg-error \"stray\" \"\" { target *-*-* } 13 }\n-const void *s4 = R\"@[]@\";\n+const void *s4 = R\"@()@\";\n \t// { dg-error \"invalid character\" \"\" { target *-*-* } 16 }\n \t// { dg-error \"stray\" \"\" { target *-*-* } 16 }\n-const void *s5 = R\"$[]$\";\n+const void *s5 = R\"$()$\";\n \t// { dg-error \"invalid character\" \"\" { target *-*-* } 19 }\n \t// { dg-error \"stray\" \"\" { target *-*-* } 19 }\n+const void *s6 = R\"\\u0010()\\u0010\";\n+\t// { dg-error \"invalid character\" \"\" { target *-*-* } 22 }\n+\t// { dg-error \"stray\" \"\" { target *-*-* } 22 }\n \n int main () {}"}, {"sha": "7906d40a1b0822557f74469ea9d3bb34915ae161", "filename": "gcc/testsuite/g++.dg/ext/raw-string-6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/521506258fa5b6b57a50b0570d8208894ed19f79/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fraw-string-6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/521506258fa5b6b57a50b0570d8208894ed19f79/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fraw-string-6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fraw-string-6.C?ref=521506258fa5b6b57a50b0570d8208894ed19f79", "patch": "@@ -1,5 +1,5 @@\n // { dg-do compile }\n // { dg-options \"-std=c++0x\" }\n \n-const void *s0 = R\"ouch[]ouCh\";\t// { dg-error \"at end of input\" }\n+const void *s0 = R\"ouch()ouCh\";\t// { dg-error \"at end of input\" }\n \t// { dg-error \"unterminated raw string\" \"\" { target *-*-* } 4 }"}, {"sha": "24737bc2865df1addb06fc862acf6b4979d5cb45", "filename": "gcc/testsuite/g++.dg/ext/raw-string-7.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/521506258fa5b6b57a50b0570d8208894ed19f79/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fraw-string-7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/521506258fa5b6b57a50b0570d8208894ed19f79/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fraw-string-7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fraw-string-7.C?ref=521506258fa5b6b57a50b0570d8208894ed19f79", "patch": "@@ -4,13 +4,13 @@\n // { dg-options \"-std=c++0x\" }\n \n // Note, there is a single space after \\ on the following line.\n-const char *s0 = R\"[\\ \n-]\";\n+const char *s0 = R\"(\\ \n+)\";\n // { dg-bogus \"backslash and newline separated by space\" \"\" { xfail *-*-* } 7 }\n \n // Note, there is a single tab after \\ on the following line.\n-const char *s1 = R\"[\\\t\n-]\";\n+const char *s1 = R\"(\\\t\n+)\";\n // { dg-bogus \"backslash and newline separated by space\" \"\" { xfail *-*-* } 12 }\n \n int"}, {"sha": "24030fb4c8a3cb67074a1c6da472b687d3c0688d", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/521506258fa5b6b57a50b0570d8208894ed19f79/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/521506258fa5b6b57a50b0570d8208894ed19f79/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=521506258fa5b6b57a50b0570d8208894ed19f79", "patch": "@@ -1,3 +1,9 @@\n+2010-03-29  Jason Merrill  <jason@redhat.com>\n+\n+\tSome raw string changes from N3077\n+\t* charset.c (cpp_interpret_string): Change inner delimiters to ().\n+\t* lex.c (lex_raw_string): Likewise.  Also disallow '\\' in delimiter.\n+\n 2010-02-11  Jakub Jelinek  <jakub@redhat.com>\n \n \t* init.c (read_original_filename): Don't call read_original_directory"}, {"sha": "282430fe9ed544082d0493689b7a70033ce4f362", "filename": "libcpp/charset.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/521506258fa5b6b57a50b0570d8208894ed19f79/libcpp%2Fcharset.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/521506258fa5b6b57a50b0570d8208894ed19f79/libcpp%2Fcharset.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fcharset.c?ref=521506258fa5b6b57a50b0570d8208894ed19f79", "patch": "@@ -1396,7 +1396,7 @@ cpp_interpret_string (cpp_reader *pfile, const cpp_string *from, size_t count,\n \t  /* Skip over 'R\"'.  */\n \t  p += 2;\n \t  prefix = p;\n-\t  while (*p != '[')\n+\t  while (*p != '(')\n \t    p++;\n \t  p++;\n \t  limit = from[i].text + from[i].len;"}, {"sha": "74deab20608ea7979a983ad45bf7a2fff778c44e", "filename": "libcpp/lex.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/521506258fa5b6b57a50b0570d8208894ed19f79/libcpp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/521506258fa5b6b57a50b0570d8208894ed19f79/libcpp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.c?ref=521506258fa5b6b57a50b0570d8208894ed19f79", "patch": "@@ -703,7 +703,7 @@ lex_raw_string (cpp_reader *pfile, cpp_token *token, const uchar *base,\n     {\n       switch (raw_prefix[raw_prefix_len])\n \t{\n-\tcase ' ': case '[': case ']': case '\\t':\n+\tcase ' ': case '(': case ')': case '\\\\': case '\\t':\n \tcase '\\v': case '\\f': case '\\n': default:\n \t  break;\n \t/* Basic source charset except the above chars.  */\n@@ -719,18 +719,18 @@ lex_raw_string (cpp_reader *pfile, cpp_token *token, const uchar *base,\n \tcase 'Y': case 'Z':\n \tcase '0': case '1': case '2': case '3': case '4': case '5':\n \tcase '6': case '7': case '8': case '9':\n-\tcase '_': case '{': case '}': case '#': case '(': case ')':\n+\tcase '_': case '{': case '}': case '#': case '[': case ']':\n \tcase '<': case '>': case '%': case ':': case ';': case '.':\n \tcase '?': case '*': case '+': case '-': case '/': case '^':\n \tcase '&': case '|': case '~': case '!': case '=': case ',':\n-\tcase '\\\\': case '\"': case '\\'':\n+\tcase '\"': case '\\'':\n \t  raw_prefix_len++;\n \t  continue;\n \t}\n       break;\n     }\n \n-  if (raw_prefix[raw_prefix_len] != '[')\n+  if (raw_prefix[raw_prefix_len] != '(')\n     {\n       int col = CPP_BUF_COLUMN (pfile->buffer, raw_prefix + raw_prefix_len)\n \t\t+ 1;\n@@ -751,7 +751,7 @@ lex_raw_string (cpp_reader *pfile, cpp_token *token, const uchar *base,\n     {\n       cppchar_t c = *cur++;\n \n-      if (c == ']'\n+      if (c == ')'\n \t  && strncmp ((const char *) cur, (const char *) raw_prefix,\n \t\t      raw_prefix_len) == 0\n \t  && cur[raw_prefix_len] == '\"')"}]}