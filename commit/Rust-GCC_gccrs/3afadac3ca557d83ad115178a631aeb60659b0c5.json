{"sha": "3afadac3ca557d83ad115178a631aeb60659b0c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2FmYWRhYzNjYTU1N2Q4M2FkMTE1MTc4YTYzMWFlYjYwNjU5YjBjNQ==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2009-04-07T07:24:37Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2009-04-07T07:24:37Z"}, "message": "re PR other/38920 (dw2 exceptions don't work.)\n\n2009-04-07  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/38920\n\t* expr.c (gfc_check_pointer_assign): Enable interface check for\n\tprocedure pointers.\n\t* gfortran.h: Add copy_formal_args_intr.\n\t* interface.c (gfc_compare_interfaces): Call gfc_compare_intr_interfaces\n\tif second argument is an intrinsic.\n\t(compare_intr_interfaces): Correctly set attr.function, attr.subroutine\n\tand ts.\n\t(compare_parameter): Call gfc_compare_interfaces also for intrinsics.\n\t* resolve.c (resolve_specific_f0,resolve_specific_s0): Don't resolve\n\tintrinsic interfaces here. Must happen earlier.\n\t(resolve_symbol): Resolution of intrinsic interfaces moved here from\n\tresolve_specific_..., and formal args are now copied from intrinsic\n\tinterfaces.\n\t* symbol.c (copy_formal_args_intr): New function to copy the formal\n\targuments from an intinsic procedure.\n\n\n2009-04-07  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/38920\n\t* gfortran.dg/proc_decl_1.f90: Modified.\n\t* gfortran.dg/proc_ptr_11.f90: Extended.\n\t* gfortran.dg/proc_ptr_13.f90: Modified.\n\nFrom-SVN: r145651", "tree": {"sha": "b6a3794c0ef4b9169b679011d0325bd1a347a4f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6a3794c0ef4b9169b679011d0325bd1a347a4f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3afadac3ca557d83ad115178a631aeb60659b0c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3afadac3ca557d83ad115178a631aeb60659b0c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3afadac3ca557d83ad115178a631aeb60659b0c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3afadac3ca557d83ad115178a631aeb60659b0c5/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "445099463a83367ddabb201e9e29e5a741cce034", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/445099463a83367ddabb201e9e29e5a741cce034", "html_url": "https://github.com/Rust-GCC/gccrs/commit/445099463a83367ddabb201e9e29e5a741cce034"}], "stats": {"total": 236, "additions": 166, "deletions": 70}, "files": [{"sha": "182e0148eabf1463dc911cbb598042019850fe99", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3afadac3ca557d83ad115178a631aeb60659b0c5/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3afadac3ca557d83ad115178a631aeb60659b0c5/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=3afadac3ca557d83ad115178a631aeb60659b0c5", "patch": "@@ -1,3 +1,22 @@\n+2009-04-07  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/38920\n+\t* expr.c (gfc_check_pointer_assign): Enable interface check for\n+\tprocedure pointers.\n+\t* gfortran.h: Add copy_formal_args_intr.\n+\t* interface.c (gfc_compare_interfaces): Call gfc_compare_intr_interfaces\n+\tif second argument is an intrinsic.\n+\t(compare_intr_interfaces): Correctly set attr.function, attr.subroutine\n+\tand ts.\n+\t(compare_parameter): Call gfc_compare_interfaces also for intrinsics.\n+\t* resolve.c (resolve_specific_f0,resolve_specific_s0): Don't resolve\n+\tintrinsic interfaces here. Must happen earlier.\n+\t(resolve_symbol): Resolution of intrinsic interfaces moved here from\n+\tresolve_specific_..., and formal args are now copied from intrinsic\n+\tinterfaces.\n+\t* symbol.c (copy_formal_args_intr): New function to copy the formal\n+\targuments from an intinsic procedure.\n+\n 2009-04-06  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/38863"}, {"sha": "94b8e0ea32a6166ee497806625d4c3d96ef840e7", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3afadac3ca557d83ad115178a631aeb60659b0c5/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3afadac3ca557d83ad115178a631aeb60659b0c5/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=3afadac3ca557d83ad115178a631aeb60659b0c5", "patch": "@@ -3142,7 +3142,6 @@ gfc_check_pointer_assign (gfc_expr *lvalue, gfc_expr *rvalue)\n \t\t     \"in procedure pointer assignment at %L\",\n \t\t     rvalue->symtree->name, &rvalue->where);\n \t}\n-      /* TODO. See PR 38290.\n       if (rvalue->expr_type == EXPR_VARIABLE\n \t  && lvalue->symtree->n.sym->attr.if_source != IFSRC_UNKNOWN\n \t  && !gfc_compare_interfaces (lvalue->symtree->n.sym,\n@@ -3151,7 +3150,7 @@ gfc_check_pointer_assign (gfc_expr *lvalue, gfc_expr *rvalue)\n \t  gfc_error (\"Interfaces don't match \"\n \t\t     \"in procedure pointer assignment at %L\", &rvalue->where);\n \t  return FAILURE;\n-\t}*/\n+\t}\n       return SUCCESS;\n     }\n "}, {"sha": "7570f8dad1d404a236d6e5a463903025b3200c00", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3afadac3ca557d83ad115178a631aeb60659b0c5/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3afadac3ca557d83ad115178a631aeb60659b0c5/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=3afadac3ca557d83ad115178a631aeb60659b0c5", "patch": "@@ -2369,7 +2369,8 @@ gfc_gsymbol *gfc_find_gsymbol (gfc_gsymbol *, const char *);\n gfc_symbol* gfc_get_derived_super_type (gfc_symbol*);\n gfc_symtree* gfc_find_typebound_proc (gfc_symbol*, gfc_try*, const char*, bool);\n \n-void copy_formal_args (gfc_symbol *dest, gfc_symbol *src);\n+void copy_formal_args (gfc_symbol *, gfc_symbol *);\n+void copy_formal_args_intr (gfc_symbol *, gfc_intrinsic_sym *);\n \n void gfc_free_finalizer (gfc_finalizer *el); /* Needed in resolve.c, too  */\n "}, {"sha": "162816cc6226873b3c97179477d49ce235d25da2", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3afadac3ca557d83ad115178a631aeb60659b0c5/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3afadac3ca557d83ad115178a631aeb60659b0c5/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=3afadac3ca557d83ad115178a631aeb60659b0c5", "patch": "@@ -967,6 +967,9 @@ gfc_compare_interfaces (gfc_symbol *s1, gfc_symbol *s2, int generic_flag)\n {\n   gfc_formal_arglist *f1, *f2;\n \n+  if (s2->attr.intrinsic)\n+    return compare_intr_interfaces (s1, s2);\n+\n   if (s1->attr.function != s2->attr.function\n       || s1->attr.subroutine != s2->attr.subroutine)\n     return 0;\t\t/* Disagreement between function/subroutine.  */\n@@ -1006,6 +1009,21 @@ compare_intr_interfaces (gfc_symbol *s1, gfc_symbol *s2)\n   gfc_intrinsic_arg *fi, *f2;\n   gfc_intrinsic_sym *isym;\n \n+  isym = gfc_find_function (s2->name);\n+  if (isym)\n+    {\n+      if (!s2->attr.function)\n+\tgfc_add_function (&s2->attr, s2->name, &gfc_current_locus);\n+      s2->ts = isym->ts;\n+    }\n+  else\n+    {\n+      isym = gfc_find_subroutine (s2->name);\n+      gcc_assert (isym);\n+      if (!s2->attr.subroutine)\n+\tgfc_add_subroutine (&s2->attr, s2->name, &gfc_current_locus);\n+    }\n+\n   if (s1->attr.function != s2->attr.function\n       || s1->attr.subroutine != s2->attr.subroutine)\n     return 0;\t\t/* Disagreement between function/subroutine.  */\n@@ -1022,12 +1040,6 @@ compare_intr_interfaces (gfc_symbol *s1, gfc_symbol *s2)\n \treturn 1;\n     }\n \n-  isym = gfc_find_function (s2->name);\n-  \n-  /* This should already have been checked in\n-     resolve.c (resolve_actual_arglist).  */\n-  gcc_assert (isym);\n-\n   f1 = s1->formal;\n   f2 = isym->formal;\n \n@@ -1463,12 +1475,7 @@ compare_parameter (gfc_symbol *formal, gfc_expr *actual,\n \t  || actual->symtree->n.sym->attr.external)\n \treturn 1;\t\t/* Assume match.  */\n \n-      if (actual->symtree->n.sym->attr.intrinsic)\n-\t{\n-\t if (!compare_intr_interfaces (formal, actual->symtree->n.sym))\n-\t   goto proc_fail;\n-\t}\n-      else if (!gfc_compare_interfaces (formal, actual->symtree->n.sym, 0))\n+      if (!gfc_compare_interfaces (formal, actual->symtree->n.sym, 0))\n \tgoto proc_fail;\n \n       return 1;"}, {"sha": "1b866d9cc491f18ccd9e14ebf203ae21da97575f", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 27, "deletions": 40, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3afadac3ca557d83ad115178a631aeb60659b0c5/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3afadac3ca557d83ad115178a631aeb60659b0c5/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=3afadac3ca557d83ad115178a631aeb60659b0c5", "patch": "@@ -1742,23 +1742,6 @@ resolve_specific_f0 (gfc_symbol *sym, gfc_expr *expr)\n {\n   match m;\n \n-  /* See if we have an intrinsic interface.  */\n-\n-  if (sym->ts.interface != NULL && sym->ts.interface->attr.intrinsic)\n-    {\n-      gfc_intrinsic_sym *isym;\n-      isym = gfc_find_function (sym->ts.interface->name);\n-\n-      /* Existence of isym should be checked already.  */\n-      gcc_assert (isym);\n-\n-      sym->ts.type = isym->ts.type;\n-      sym->ts.kind = isym->ts.kind;\n-      sym->attr.function = 1;\n-      sym->attr.proc = PROC_EXTERNAL;\n-      goto found;\n-    }\n-\n   if (sym->attr.external || sym->attr.if_source == IFSRC_IFBODY)\n     {\n       if (sym->attr.dummy)\n@@ -2795,24 +2778,6 @@ resolve_specific_s0 (gfc_code *c, gfc_symbol *sym)\n {\n   match m;\n \n-  /* See if we have an intrinsic interface.  */\n-  if (sym->ts.interface != NULL && !sym->ts.interface->attr.abstract\n-      && !sym->ts.interface->attr.subroutine\n-      && sym->ts.interface->attr.intrinsic)\n-    {\n-      gfc_intrinsic_sym *isym;\n-\n-      isym = gfc_find_function (sym->ts.interface->name);\n-\n-      /* Existence of isym should be checked already.  */\n-      gcc_assert (isym);\n-\n-      sym->ts.type = isym->ts.type;\n-      sym->ts.kind = isym->ts.kind;\n-      sym->attr.subroutine = 1;\n-      goto found;\n-    }\n-\n   if(sym->attr.is_iso_c)\n     {\n       m = gfc_iso_c_sub_interface (c,sym);\n@@ -9201,18 +9166,40 @@ resolve_symbol (gfc_symbol *sym)\n       if (sym->ts.interface->attr.if_source || sym->ts.interface->attr.intrinsic)\n \t{\n \t  gfc_symbol *ifc = sym->ts.interface;\n-\t  sym->ts = ifc->ts;\n-\t  sym->ts.interface = ifc;\n-\t  sym->attr.function = ifc->attr.function;\n-\t  sym->attr.subroutine = ifc->attr.subroutine;\n+\n+\t  if (ifc->attr.intrinsic)\n+\t    {\n+\t      gfc_intrinsic_sym *isym = gfc_find_function (sym->ts.interface->name);\n+\t      if (isym)\n+\t\t{\n+\t\t  sym->attr.function = 1;\n+\t\t  sym->ts = isym->ts;\n+\t\t  sym->ts.interface = ifc;\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  isym = gfc_find_subroutine (sym->ts.interface->name);\n+\t\t  gcc_assert (isym);\n+\t\t  sym->attr.subroutine = 1;\n+\t\t}\n+\t      copy_formal_args_intr (sym, isym);\n+\t    }\n+\t  else\n+\t    {\n+\t      sym->ts = ifc->ts;\n+\t      sym->ts.interface = ifc;\n+\t      sym->attr.function = ifc->attr.function;\n+\t      sym->attr.subroutine = ifc->attr.subroutine;\n+\t      copy_formal_args (sym, ifc);\n+\t    }\n+\n \t  sym->attr.allocatable = ifc->attr.allocatable;\n \t  sym->attr.pointer = ifc->attr.pointer;\n \t  sym->attr.pure = ifc->attr.pure;\n \t  sym->attr.elemental = ifc->attr.elemental;\n \t  sym->attr.dimension = ifc->attr.dimension;\n \t  sym->attr.recursive = ifc->attr.recursive;\n \t  sym->attr.always_explicit = ifc->attr.always_explicit;\n-\t  copy_formal_args (sym, ifc);\n \t  /* Copy array spec.  */\n \t  sym->as = gfc_copy_array_spec (ifc->as);\n \t  if (sym->as)"}, {"sha": "6ffd869a30e858594f51d9f38f6583fb0ba4981f", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3afadac3ca557d83ad115178a631aeb60659b0c5/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3afadac3ca557d83ad115178a631aeb60659b0c5/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=3afadac3ca557d83ad115178a631aeb60659b0c5", "patch": "@@ -3839,6 +3839,59 @@ copy_formal_args (gfc_symbol *dest, gfc_symbol *src)\n   gfc_current_ns = parent_ns;\n }\n \n+void\n+copy_formal_args_intr (gfc_symbol *dest, gfc_intrinsic_sym *src)\n+{\n+  gfc_formal_arglist *head = NULL;\n+  gfc_formal_arglist *tail = NULL;\n+  gfc_formal_arglist *formal_arg = NULL;\n+  gfc_intrinsic_arg *curr_arg = NULL;\n+  gfc_formal_arglist *formal_prev = NULL;\n+  /* Save current namespace so we can change it for formal args.  */\n+  gfc_namespace *parent_ns = gfc_current_ns;\n+\n+  /* Create a new namespace, which will be the formal ns (namespace\n+     of the formal args).  */\n+  gfc_current_ns = gfc_get_namespace (parent_ns, 0);\n+  gfc_current_ns->proc_name = dest;\n+\n+  for (curr_arg = src->formal; curr_arg; curr_arg = curr_arg->next)\n+    {\n+      formal_arg = gfc_get_formal_arglist ();\n+      gfc_get_symbol (curr_arg->name, gfc_current_ns, &(formal_arg->sym));\n+\n+      /* May need to copy more info for the symbol.  */\n+      formal_arg->sym->ts = curr_arg->ts;\n+      formal_arg->sym->attr.optional = curr_arg->optional;\n+      /*formal_arg->sym->attr = curr_arg->sym->attr;\n+      formal_arg->sym->as = gfc_copy_array_spec (curr_arg->sym->as);\n+      copy_formal_args (formal_arg->sym, curr_arg->sym);*/\n+\n+      /* If this isn't the first arg, set up the next ptr.  For the\n+        last arg built, the formal_arg->next will never get set to\n+        anything other than NULL.  */\n+      if (formal_prev != NULL)\n+\tformal_prev->next = formal_arg;\n+      else\n+\tformal_arg->next = NULL;\n+\n+      formal_prev = formal_arg;\n+\n+      /* Add arg to list of formal args.  */\n+      add_formal_arg (&head, &tail, formal_arg, formal_arg->sym);\n+    }\n+\n+  /* Add the interface to the symbol.  */\n+  add_proc_interface (dest, IFSRC_DECL, head);\n+\n+  /* Store the formal namespace information.  */\n+  if (dest->formal != NULL)\n+    /* The current ns should be that for the dest proc.  */\n+    dest->formal_ns = gfc_current_ns;\n+  /* Restore the current namespace to what it was on entry.  */\n+  gfc_current_ns = parent_ns;\n+}\n+\n /* Builds the parameter list for the iso_c_binding procedure\n    c_f_pointer or c_f_procpointer.  The old_sym typically refers to a\n    generic version of either the c_f_pointer or c_f_procpointer"}, {"sha": "41488df50db99ad49033076bf2e5780a44b84b5c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3afadac3ca557d83ad115178a631aeb60659b0c5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3afadac3ca557d83ad115178a631aeb60659b0c5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3afadac3ca557d83ad115178a631aeb60659b0c5", "patch": "@@ -1,3 +1,10 @@\n+2009-04-07  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/38920\n+\t* gfortran.dg/proc_decl_1.f90: Modified.\n+\t* gfortran.dg/proc_ptr_11.f90: Extended.\n+\t* gfortran.dg/proc_ptr_13.f90: Modified.\n+\n 2009-04-06  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/35146"}, {"sha": "1df8b277c3faae5425d00030afee362f3bae6712", "filename": "gcc/testsuite/gfortran.dg/proc_decl_1.f90", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3afadac3ca557d83ad115178a631aeb60659b0c5/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_decl_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3afadac3ca557d83ad115178a631aeb60659b0c5/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_decl_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_decl_1.f90?ref=3afadac3ca557d83ad115178a631aeb60659b0c5", "patch": "@@ -19,8 +19,15 @@ subroutine sub2() bind(c)\n   public:: h\n   procedure(),public:: h  ! { dg-error \"was already specified\" }\n \n-end module m\n+contains\n \n+  subroutine abc\n+    procedure() :: abc2\n+  entry abc2(x)  ! { dg-error \"PROCEDURE attribute conflicts with ENTRY attribute\" }\n+    real x\n+  end subroutine\n+\n+end module m\n \n program prog\n \n@@ -68,13 +75,3 @@ end subroutine b\n   end subroutine foo \n \n end program\n-\n-\n-subroutine abc\n-\n- procedure() :: abc2\n-\n-entry abc2(x)  ! { dg-error \"PROCEDURE attribute conflicts with ENTRY attribute\" }\n- real x\n-\n-end subroutine"}, {"sha": "5c39f995d34f264ba8229ada4389e0948bf6599a", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_11.f90", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3afadac3ca557d83ad115178a631aeb60659b0c5/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_11.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3afadac3ca557d83ad115178a631aeb60659b0c5/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_11.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_11.f90?ref=3afadac3ca557d83ad115178a631aeb60659b0c5", "patch": "@@ -16,13 +16,35 @@ end subroutine up\n   procedure( up ) , pointer :: pptr\n   procedure(isign), pointer :: q\n \n-  ! TODO. See PR 38290.\n-  !pptr => add   ! { \"Interfaces don't match\" }\n+  procedure(iabs),pointer :: p1\n+  procedure(f), pointer :: p2\n+\n+  pointer :: p3\n+  interface\n+    function p3(x)\n+      real(8) :: p3,x\n+    end function p3\n+  end interface\n+\n+  pptr => add   ! { dg-error \"Interfaces don't match\" }\n \n   q => add\n \n   print *, pptr()   ! { dg-error \"is not a function\" }\n \n+  p1 => iabs\n+  p2 => iabs\n+  p1 => f\n+  p2 => f\n+  p2 => p1\n+  p1 => p2\n+\n+  p1 => abs   ! { dg-error \"Interfaces don't match\" }\n+  p2 => abs   ! { dg-error \"Interfaces don't match\" }\n+\n+  p3 => dsin\n+  p3 => sin   ! { dg-error \"Interfaces don't match\" }\n+\n   contains\n \n     function add( a, b )\n@@ -31,4 +53,9 @@ function add( a, b )\n       add = a + b\n     end function add\n \n+    integer function f(x)\n+      integer :: x\n+      f = 317 + x\n+    end function\n+\n end program bsp "}, {"sha": "a0e69af2bb8729cc3565915db66c2312b6b549aa", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_13.f90", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3afadac3ca557d83ad115178a631aeb60659b0c5/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_13.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3afadac3ca557d83ad115178a631aeb60659b0c5/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_13.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_13.f90?ref=3afadac3ca557d83ad115178a631aeb60659b0c5", "patch": "@@ -22,8 +22,7 @@ END MODULE myfortran_binding\n \n \n use myfortran_binding\n-external foo\n-error_handler => foo\n+error_handler => error_stop\n end\n \n ! { dg-final { cleanup-modules \"myfortran_binding\" } }"}]}