{"sha": "f7eb0dcd45ddb0fbc6e33b7e09246af3af6b96d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjdlYjBkY2Q0NWRkYjBmYmM2ZTMzYjdlMDkyNDZhZjNhZjZiOTZkOQ==", "commit": {"author": {"name": "Eric Christopher", "email": "echristo@apple.com", "date": "2006-06-12T06:53:33Z"}, "committer": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2006-06-12T06:53:33Z"}, "message": "re PR middle-end/27948 (MS -bitfield struct layout test fails)\n\n2006-06-11  Eric Christopher  <echristo@apple.com>\n\n        PR middle-end/27948\n        * stor-layout.c (place_field): Remove check for\n        remaining_in_alignment when aligning at the end of a run.\n\n2006-06-11  Eric Christopher  <echristo@apple.com>\n\n\tPR middle-end/27948\n        * gcc.dg/bf-ms-layout.c: Run on darwin.\n        * gcc.dg/bf-no-ms-layout: Ditto.\n        * gcc.dg/attr-ms_struct-2.c: New.\n        * gcc.dg/bf-ms-layout-2.c: Ditto.\n\nFrom-SVN: r114562", "tree": {"sha": "c0513c3903bf29cecf7de13de3ef79ec15d809aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0513c3903bf29cecf7de13de3ef79ec15d809aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7eb0dcd45ddb0fbc6e33b7e09246af3af6b96d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7eb0dcd45ddb0fbc6e33b7e09246af3af6b96d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7eb0dcd45ddb0fbc6e33b7e09246af3af6b96d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7eb0dcd45ddb0fbc6e33b7e09246af3af6b96d9/comments", "author": {"login": "echristo", "id": 327308, "node_id": "MDQ6VXNlcjMyNzMwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/327308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/echristo", "html_url": "https://github.com/echristo", "followers_url": "https://api.github.com/users/echristo/followers", "following_url": "https://api.github.com/users/echristo/following{/other_user}", "gists_url": "https://api.github.com/users/echristo/gists{/gist_id}", "starred_url": "https://api.github.com/users/echristo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/echristo/subscriptions", "organizations_url": "https://api.github.com/users/echristo/orgs", "repos_url": "https://api.github.com/users/echristo/repos", "events_url": "https://api.github.com/users/echristo/events{/privacy}", "received_events_url": "https://api.github.com/users/echristo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6bb7beac5f921b203fa212fdf94df2381d10f0c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bb7beac5f921b203fa212fdf94df2381d10f0c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bb7beac5f921b203fa212fdf94df2381d10f0c7"}], "stats": {"total": 372, "additions": 327, "deletions": 45}, "files": [{"sha": "c95edb3b34920ccc9ffbc3b7ff1082bb28897041", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7eb0dcd45ddb0fbc6e33b7e09246af3af6b96d9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7eb0dcd45ddb0fbc6e33b7e09246af3af6b96d9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f7eb0dcd45ddb0fbc6e33b7e09246af3af6b96d9", "patch": "@@ -1,3 +1,9 @@\n+2006-06-11  Eric Christopher  <echristo@apple.com>\n+\n+\tPR middle-end/27948\n+\t* stor-layout.c (place_field): Remove check for\n+\tremaining_in_alignment when aligning at the end of a run.\n+\n 2006-06-11  Eric Christopher  <echristo@apple.com>\n \n \tPR 27542"}, {"sha": "47bc6a047a73ef357acb233d9a86788e44301e5a", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7eb0dcd45ddb0fbc6e33b7e09246af3af6b96d9/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7eb0dcd45ddb0fbc6e33b7e09246af3af6b96d9/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=f7eb0dcd45ddb0fbc6e33b7e09246af3af6b96d9", "patch": "@@ -1070,8 +1070,7 @@ place_field (record_layout_info rli, tree field)\n \t\t Note: since the beginning of the field was aligned then\n \t\t of course the end will be too.  No round needed.  */\n \n-\t      if (!integer_zerop (DECL_SIZE (rli->prev_field))\n-\t\t  && rli->remaining_in_alignment)\n+\t      if (!integer_zerop (DECL_SIZE (rli->prev_field)))\n \t\t{\n \t\t  rli->bitpos\n \t\t    = size_binop (PLUS_EXPR, rli->bitpos,\n@@ -1085,7 +1084,7 @@ place_field (record_layout_info rli, tree field)\n \t      /* Cause a new bitfield to be captured, either this time (if\n \t\t currently a bitfield) or next time we see one.  */\n \t      if (!DECL_BIT_FIELD_TYPE(field)\n-\t\t || integer_zerop (DECL_SIZE (field)))\n+\t\t  || integer_zerop (DECL_SIZE (field)))\n \t\trli->prev_field = NULL;\n \t    }\n \n@@ -1105,9 +1104,9 @@ place_field (record_layout_info rli, tree field)\n \t there wasn't.  */\n \n       if (!DECL_BIT_FIELD_TYPE (field)\n-\t  || ( prev_saved != NULL\n-\t       ? !simple_cst_equal (TYPE_SIZE (type),\n-\t\t\t\t    TYPE_SIZE (TREE_TYPE (prev_saved)))\n+\t  || (prev_saved != NULL\n+\t      ? !simple_cst_equal (TYPE_SIZE (type),\n+\t\t\t\t   TYPE_SIZE (TREE_TYPE (prev_saved)))\n \t      : !integer_zerop (DECL_SIZE (field)) ))\n \t{\n \t  /* Never smaller than a byte for compatibility.  */"}, {"sha": "a4fbcd4a7de5410611cbf3589e80e98e500ec719", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7eb0dcd45ddb0fbc6e33b7e09246af3af6b96d9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7eb0dcd45ddb0fbc6e33b7e09246af3af6b96d9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f7eb0dcd45ddb0fbc6e33b7e09246af3af6b96d9", "patch": "@@ -1,3 +1,11 @@\n+2006-06-11  Eric Christopher  <echristo@apple.com>\n+\n+\tPR middle-end/27948\n+\t* gcc.dg/bf-ms-layout.c: Run on darwin.\n+\t* gcc.dg/bf-no-ms-layout: Ditto.\n+\t* gcc.dg/attr-ms_struct-2.c: New.\n+\t* gcc.dg/bf-ms-layout-2.c: Ditto.\n+\n 2006-06-11  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \t* gcc.dg/attr-ms_struct-packed1.c: New.\n@@ -49,10 +57,10 @@\n \t* gcc/testsuite/gfortran.dg/substr_2.f: New test.\n \n 2006-06-08  Asher Langton  <langton2@llnl.gov>\n-\t\n+\n \tPR fortran/27786\n \t* cray_pointers_2.f90: Add -fbounds-check compile flag.\n-\t\n+\n 2006-06-08  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n \tPR target/27421\n@@ -125,7 +133,7 @@\n \n 2006-06-05  Dorit Nuzman  <dorit@il.ibm.com>\n             Victor Kaplansky  <victork@il.ibm.com>\n-\t    \n+\n \tPR tree-optimizations/26360\n \t* gcc.dg/vect/vect.exp: Compile tests prefixed with \"no-tree-dce\"\n \twith -fno-tree-dce.\n@@ -156,7 +164,7 @@\n \n \tPR c++/27807\n \t* g++.dg/ext/complit7.C: New test.\n-\t\n+\n \tPR c++/27806\n \t* g++.dg/parse/ptrmem5.C: New test.\n "}, {"sha": "0e8f41e45462b19fdeccc4eca3f669c4b9f79c5d", "filename": "gcc/testsuite/gcc.dg/attr-ms_struct-2.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7eb0dcd45ddb0fbc6e33b7e09246af3af6b96d9/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-ms_struct-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7eb0dcd45ddb0fbc6e33b7e09246af3af6b96d9/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-ms_struct-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-ms_struct-2.c?ref=f7eb0dcd45ddb0fbc6e33b7e09246af3af6b96d9", "patch": "@@ -0,0 +1,35 @@\n+/* Test for MS structure sizes.  */\n+/* { dg-do run { target *-*-interix* *-*-mingw* *-*-cygwin* i?86-*-darwin* } }\n+/* { dg-options \"-std=gnu99\" } */\n+\n+extern void abort ();\n+\n+#define ATTR __attribute__((__ms_struct__))\n+\n+struct _struct_0\n+{\n+  long  member_0   : 25 ;\n+  short  member_1   : 6 ;\n+  char  member_2   : 2 ;\n+  unsigned  short  member_3   : 1 ;\n+  unsigned  char  member_4   : 7 ;\n+  short  member_5   : 16 ;\n+  long  : 0 ;\n+  char  member_7  ;\n+\n+} ATTR;\n+typedef struct _struct_0 struct_0;\n+\n+#define size_struct_0 20\n+\n+struct_0 test_struct_0 = { 18557917, 17, 3, 0, 80, 6487, 93 };\n+\n+int\n+main (void)\n+{\n+\n+  if (size_struct_0 != sizeof (struct_0))\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "0bd472bc1f8cdd139ab81824f0e535e94785691c", "filename": "gcc/testsuite/gcc.dg/bf-ms-layout-2.c", "status": "added", "additions": 236, "deletions": 0, "changes": 236, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7eb0dcd45ddb0fbc6e33b7e09246af3af6b96d9/gcc%2Ftestsuite%2Fgcc.dg%2Fbf-ms-layout-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7eb0dcd45ddb0fbc6e33b7e09246af3af6b96d9/gcc%2Ftestsuite%2Fgcc.dg%2Fbf-ms-layout-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbf-ms-layout-2.c?ref=f7eb0dcd45ddb0fbc6e33b7e09246af3af6b96d9", "patch": "@@ -0,0 +1,236 @@\n+/* bf-ms-layout.c */\n+\n+/* Test for MS bitfield layout */\n+/* Adapted from Donn Terry <donnte@microsoft.com> testcase\n+   posted to GCC-patches\n+   http://gcc.gnu.org/ml/gcc-patches/2000-08/msg00577.html */\n+\n+/* { dg-do run { target *-*-interix* *-*-mingw* *-*-cygwin* i?86-*-darwin* } } */\n+/* { dg-options \"-D_TEST_MS_LAYOUT\" } */\n+/* This test uses the attribute instead of the command line option.  */\n+\n+#include <stddef.h>\n+#include <string.h>\n+\n+extern void abort();\n+\n+#pragma pack(8)\n+\n+#ifdef __GNUC__\n+#define ATTR __attribute__ ((ms_struct))\n+#endif\n+\n+struct one {\n+  int d;\n+  unsigned char a;\n+  unsigned short b:7;\n+  char c;\n+} ATTR;\n+\n+struct two {\n+  int d;\n+  unsigned char a;\n+  unsigned int b:7;\n+  char c;\n+} ATTR;\n+\n+struct three {\n+  short d;\n+  unsigned short a:3;\n+  unsigned short b:9;\n+  unsigned char c:7;\n+} ATTR;\n+\n+\n+/* Bitfields of size 0 have some truly odd behaviors. */\n+\n+struct four {\n+  unsigned short a:3;\n+  unsigned short b:9;\n+  unsigned int :0;  /* forces struct alignment to int */\n+  unsigned char c:7;\n+} ATTR;\n+\n+struct five {\n+  char a;\n+  int :0;        /* ignored; prior field is not a bitfield. */\n+  char b;\n+  char c;\n+} ATTR;\n+\n+struct six {\n+  char a :8;\n+  int :0;\t/* not ignored; prior field IS a bitfield, causes\n+\t\t   struct alignment as well. */\n+  char b;\n+  char c;\n+} ATTR;\n+\n+struct seven {\n+  char a:8;\n+  char :0;\n+  int  :0;\t/* Ignored; prior field is zero size bitfield. */\n+  char b;\n+  char c;\n+} ATTR;\n+\n+struct eight { /* ms size 4 */\n+  short b:3;\n+  char  c;\n+} ATTR;\n+\n+#ifdef _MSC_VER\n+#define LONGLONG __int64\n+#else\n+#define LONGLONG long long\n+#endif\n+\n+union nine {   /* ms size 8 */\n+  LONGLONG a:3;\n+  char  c;\n+} ATTR;\n+\n+struct ten {   /* ms size 16 */\n+  LONGLONG a:3;\n+  LONGLONG b:3;\n+  char  c;\n+} ATTR;\n+\n+\n+#define val(s,f) (s.f)\n+\n+#define check_struct(_X) \\\n+{ \\\n+  if (sizeof (struct _X) != exp_sizeof_##_X )\t\\\n+    abort();\t\t\t\t\t\\\n+  memcpy(&test_##_X, filler, sizeof(test_##_X));\\\n+  if (val(test_##_X,c) != exp_##_X##_c) \t\\\n+     abort();\t\t\t\t\t\\\n+}\n+\n+#define check_union(_X) \\\n+{ \\\n+  if (sizeof (union _X) != exp_sizeof_##_X )\t\\\n+    abort();                                    \\\n+  memcpy(&test_##_X, filler, sizeof(test_##_X));\\\n+  if (val(test_##_X,c) != exp_##_X##_c) \t\\\n+     abort();\t\t\t\t\t\\\n+}\n+\n+#define check_struct_size(_X) \\\n+{ \\\n+  if (sizeof (struct _X) != exp_sizeof_##_X )\t\\\n+    abort();                                    \\\n+}\n+\n+#define check_struct_off(_X) \\\n+{ \\\n+  memcpy(&test_##_X, filler, sizeof(test_##_X));\\\n+  if (val(test_##_X,c) != exp_##_X##_c) \t\\\n+    abort();                                    \\\n+}\n+\n+#define check_union_size(_X) \\\n+{ \\\n+  if (sizeof (union _X) != exp_sizeof_##_X )\t\\\n+    abort();                                    \\\n+}\n+\n+#define check_union_off(_X) \\\n+{ \\\n+  memcpy(&test_##_X, filler, sizeof(test_##_X));\\\n+  if (val(test_##_X,c) != exp_##_X##_c) \t\\\n+    abort();                                    \\\n+}\n+\n+int main(){\n+\n+  unsigned char filler[16];\n+  struct one test_one;\n+  struct two test_two;\n+  struct three test_three;\n+  struct four test_four;\n+  struct five test_five;\n+  struct six test_six;\n+  struct seven test_seven;\n+  struct eight test_eight;\n+  union nine test_nine;\n+  struct ten test_ten;\n+\n+#if defined (_TEST_MS_LAYOUT) || defined (_MSC_VER)\n+  size_t exp_sizeof_one = 12;\n+  size_t exp_sizeof_two = 16;\n+  size_t exp_sizeof_three =6;\n+  size_t exp_sizeof_four = 8;\n+  size_t exp_sizeof_five = 3;\n+  size_t exp_sizeof_six = 8;\n+  size_t exp_sizeof_seven = 3;\n+  size_t exp_sizeof_eight = 4;\n+  size_t exp_sizeof_nine = 8;\n+  size_t exp_sizeof_ten = 16;\n+\n+  unsigned char exp_one_c = 8;\n+  unsigned char exp_two_c  = 12;\n+  unsigned char exp_three_c = 4;\n+  unsigned char exp_four_c = 4;\n+  char exp_five_c = 2;\n+  char exp_six_c = 5;\n+  char exp_seven_c = 2;\n+  char exp_eight_c = 2;\n+  char exp_nine_c = 0;\n+  char exp_ten_c = 8;\n+\n+#else /* testing -mno-ms-bitfields */\n+\n+  size_t exp_sizeof_one = 8;\n+  size_t exp_sizeof_two = 8;\n+  size_t exp_sizeof_three = 6;\n+  size_t exp_sizeof_four = 6;\n+  size_t exp_sizeof_five = 6;\n+  size_t exp_sizeof_six = 6;\n+  size_t exp_sizeof_seven = 6;\n+  size_t exp_sizeof_eight = 2;\n+  size_t exp_sizeof_nine = 8;\n+  size_t exp_sizeof_ten = 8;\n+\n+  unsigned short exp_one_c = 6;\n+  unsigned int exp_two_c  = 6;\n+  unsigned char exp_three_c = 64;\n+  unsigned char exp_four_c = 4;\n+  char exp_five_c = 5;\n+  char exp_six_c = 5;\n+  char exp_seven_c = 5;\n+  char exp_eight_c = 1;\n+  char exp_nine_c = 0;\n+  char exp_ten_c = 1;\n+\n+#endif\n+\n+  unsigned char i;\n+  for ( i = 0; i < 16; i++ )\n+    filler[i] = i;\n+\n+  check_struct_off (one);\n+  check_struct_off (two);\n+  check_struct_off (three);\n+  check_struct_off (four);\n+  check_struct_off (five);\n+  check_struct_off (six);\n+  check_struct_off (seven);\n+  check_struct_off (eight);\n+  check_union_off (nine);\n+  check_struct_off (ten);\n+\n+  check_struct_size (one);\n+  check_struct_size (two);\n+  check_struct_size (three);\n+  check_struct_size (four);\n+  check_struct_size (five);\n+  check_struct_size (six);\n+  check_struct_size (seven);\n+  check_struct_size (eight);\n+  check_union_size (nine);\n+  check_struct_size (ten);\n+\n+  return 0;\n+};"}, {"sha": "3acd1e4a69326762b62e3a3bae88d3bb37a59ef8", "filename": "gcc/testsuite/gcc.dg/bf-ms-layout.c", "status": "modified", "additions": 21, "deletions": 22, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7eb0dcd45ddb0fbc6e33b7e09246af3af6b96d9/gcc%2Ftestsuite%2Fgcc.dg%2Fbf-ms-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7eb0dcd45ddb0fbc6e33b7e09246af3af6b96d9/gcc%2Ftestsuite%2Fgcc.dg%2Fbf-ms-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbf-ms-layout.c?ref=f7eb0dcd45ddb0fbc6e33b7e09246af3af6b96d9", "patch": "@@ -3,9 +3,9 @@\n /* Test for MS bitfield layout */\n /* Adapted from Donn Terry <donnte@microsoft.com> testcase\n    posted to GCC-patches\n-   http://gcc.gnu.org/ml/gcc-patches/2000-08/msg00577.html */ \n+   http://gcc.gnu.org/ml/gcc-patches/2000-08/msg00577.html */\n \n-/* { dg-do run { target *-*-interix* *-*-mingw* *-*-cygwin* } } */\n+/* { dg-do run { target *-*-interix* *-*-mingw* *-*-cygwin* i?86-*-darwin* } } */\n /* { dg-options \"-mms-bitfields -D_TEST_MS_LAYOUT\" } */\n \n #include <stddef.h>\n@@ -19,22 +19,22 @@ struct one {\n   int d;\n   unsigned char a;\n   unsigned short b:7;\n-  char c;\t\n-};\n+  char c;\n+} ;\n \n struct two {\n   int d;\n   unsigned char a;\n   unsigned int b:7;\n-  char c;\t    \t\n-};\n+  char c;\n+} ;\n \n struct three {\n   short d;\n   unsigned short a:3;\n   unsigned short b:9;\n   unsigned char c:7;\n-};\n+} ;\n \n \n /* Bitfields of size 0 have some truly odd behaviors. */\n@@ -44,16 +44,16 @@ struct four {\n   unsigned short b:9;\n   unsigned int :0;  /* forces struct alignment to int */\n   unsigned char c:7;\n-};\n+} ;\n \n struct five {\n-  char a;\t  \t\n+  char a;\n   int :0;        /* ignored; prior field is not a bitfield. */\n   char b;\n   char c;\n-};\n+} ;\n \n-struct six { \n+struct six {\n   char a :8;\n   int :0;\t/* not ignored; prior field IS a bitfield, causes\n \t\t   struct alignment as well. */\n@@ -67,12 +67,12 @@ struct seven {\n   int  :0;\t/* Ignored; prior field is zero size bitfield. */\n   char b;\n   char c;\n-};\n+} ;\n \n struct eight { /* ms size 4 */\n-  short b:3;  \n+  short b:3;\n   char  c;\n-};\n+} ;\n \n #ifdef _MSC_VER\n #define LONGLONG __int64\n@@ -83,13 +83,13 @@ struct eight { /* ms size 4 */\n union nine {   /* ms size 8 */\n   LONGLONG a:3;\n   char  c;\n-};\n+} ;\n \n struct ten {   /* ms size 16 */\n   LONGLONG a:3;\n   LONGLONG b:3;\n   char  c;\n-};\n+} ;\n \n \n #define val(s,f) (s.f)\n@@ -151,7 +151,7 @@ int main(){\n   struct eight test_eight;\n   union nine test_nine;\n   struct ten test_ten;\n- \n+\n #if defined (_TEST_MS_LAYOUT) || defined (_MSC_VER)\n   size_t exp_sizeof_one = 12;\n   size_t exp_sizeof_two = 16;\n@@ -180,7 +180,7 @@ int main(){\n   size_t exp_sizeof_one = 8;\n   size_t exp_sizeof_two = 8;\n   size_t exp_sizeof_three = 6;\n-  size_t exp_sizeof_four = 6;  \n+  size_t exp_sizeof_four = 6;\n   size_t exp_sizeof_five = 6;\n   size_t exp_sizeof_six = 6;\n   size_t exp_sizeof_seven = 6;\n@@ -201,12 +201,12 @@ int main(){\n \n #endif\n \n-  unsigned char i; \n+  unsigned char i;\n   for ( i = 0; i < 16; i++ )\n     filler[i] = i;\n \n   check_struct_off (one);\n-  check_struct_off (two);  \n+  check_struct_off (two);\n   check_struct_off (three);\n   check_struct_off (four);\n   check_struct_off (five);\n@@ -217,7 +217,7 @@ int main(){\n   check_struct_off (ten);\n \n   check_struct_size (one);\n-  check_struct_size (two);  \n+  check_struct_size (two);\n   check_struct_size (three);\n   check_struct_size (four);\n   check_struct_size (five);\n@@ -229,4 +229,3 @@ int main(){\n \n   return 0;\n };\n-"}, {"sha": "7e55321820c3fc2700f31c27a2e8f5f248d10cd9", "filename": "gcc/testsuite/gcc.dg/bf-no-ms-layout.c", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7eb0dcd45ddb0fbc6e33b7e09246af3af6b96d9/gcc%2Ftestsuite%2Fgcc.dg%2Fbf-no-ms-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7eb0dcd45ddb0fbc6e33b7e09246af3af6b96d9/gcc%2Ftestsuite%2Fgcc.dg%2Fbf-no-ms-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbf-no-ms-layout.c?ref=f7eb0dcd45ddb0fbc6e33b7e09246af3af6b96d9", "patch": "@@ -3,9 +3,9 @@\n /* Test for gcc bitfield layout, with -mno-ms-bitfields */\n /* Adapted from Donn Terry <donnte@microsoft.com> testcase\n    posted to GCC-patches\n-   http://gcc.gnu.org/ml/gcc-patches/2000-08/msg00577.html */ \n+   http://gcc.gnu.org/ml/gcc-patches/2000-08/msg00577.html */\n \n-/* { dg-do run { target *-*-interix* *-*-mingw* *-*-cygwin* } } */\n+/* { dg-do run { target *-*-interix* *-*-mingw* *-*-cygwin* i?86-*-darwin } } */\n /* { dg-options \"-mno-ms-bitfields\" } */\n \n #include <stddef.h>\n@@ -19,14 +19,14 @@ struct one {\n   int d;\n   unsigned char a;\n   unsigned short b:7;\n-  char c;\t\n+  char c;\n };\n \n struct two {\n   int d;\n   unsigned char a;\n   unsigned int b:7;\n-  char c;\t    \t\n+  char c;\n };\n \n struct three {\n@@ -47,13 +47,13 @@ struct four {\n };\n \n struct five {\n-  char a;\t  \t\n+  char a;\n   int :0;        /* ignored; prior field is not a bitfield. */\n   char b;\n   char c;\n };\n \n-struct six { \n+struct six {\n   char a :8;\n   int :0;\t/* not ignored; prior field IS a bitfield, causes\n \t\t   struct alignment as well. */\n@@ -70,7 +70,7 @@ struct seven {\n };\n \n struct eight { /* ms size 4 */\n-  short b:3;  \n+  short b:3;\n   char  c;\n };\n \n@@ -151,7 +151,7 @@ int main(){\n   struct eight test_eight;\n   union nine test_nine;\n   struct ten test_ten;\n- \n+\n #if defined (_TEST_MS_LAYOUT) || defined (_MSC_VER)\n   size_t exp_sizeof_one = 12;\n   size_t exp_sizeof_two = 16;\n@@ -180,7 +180,7 @@ int main(){\n   size_t exp_sizeof_one = 8;\n   size_t exp_sizeof_two = 8;\n   size_t exp_sizeof_three = 6;\n-  size_t exp_sizeof_four = 6;  \n+  size_t exp_sizeof_four = 6;\n   size_t exp_sizeof_five = 6;\n   size_t exp_sizeof_six = 6;\n   size_t exp_sizeof_seven = 6;\n@@ -201,12 +201,12 @@ int main(){\n \n #endif\n \n-  unsigned char i; \n+  unsigned char i;\n   for ( i = 0; i < 16; i++ )\n     filler[i] = i;\n \n   check_struct_off (one);\n-  check_struct_off (two);  \n+  check_struct_off (two);\n   check_struct_off (three);\n   check_struct_off (four);\n   check_struct_off (five);\n@@ -217,7 +217,7 @@ int main(){\n   check_struct_off (ten);\n \n   check_struct_size (one);\n-  check_struct_size (two);  \n+  check_struct_size (two);\n   check_struct_size (three);\n   check_struct_size (four);\n   check_struct_size (five);\n@@ -229,4 +229,3 @@ int main(){\n \n   return 0;\n };\n-"}]}