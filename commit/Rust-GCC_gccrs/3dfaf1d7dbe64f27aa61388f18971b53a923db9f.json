{"sha": "3dfaf1d7dbe64f27aa61388f18971b53a923db9f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2RmYWYxZDdkYmU2NGYyN2FhNjEzODhmMTg5NzFiNTNhOTIzZGI5Zg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2012-06-01T16:55:17Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2012-06-01T16:55:17Z"}, "message": "re PR c++/53137 (g++ segfault)\n\n\tPR c++/53137\n\t* pt.c (instantiate_class_template_1): Set LAMBDA_EXPR_THIS_CAPTURE.\n\t(instantiate_decl): Don't push_to_top_level for local class methods.\n\t(instantiate_class_template_1): Or for local classes.\n\nFrom-SVN: r188117", "tree": {"sha": "c25591e2519c383a0d34d3189f31a09fffde03f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c25591e2519c383a0d34d3189f31a09fffde03f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3dfaf1d7dbe64f27aa61388f18971b53a923db9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dfaf1d7dbe64f27aa61388f18971b53a923db9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dfaf1d7dbe64f27aa61388f18971b53a923db9f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dfaf1d7dbe64f27aa61388f18971b53a923db9f/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d37c775a73d38dd63ede24a26970d162c72fa963", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d37c775a73d38dd63ede24a26970d162c72fa963", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d37c775a73d38dd63ede24a26970d162c72fa963"}], "stats": {"total": 53, "additions": 47, "deletions": 6}, "files": [{"sha": "781f7501394be93fb9fce8dcf0048c3bc6bc07ad", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dfaf1d7dbe64f27aa61388f18971b53a923db9f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dfaf1d7dbe64f27aa61388f18971b53a923db9f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3dfaf1d7dbe64f27aa61388f18971b53a923db9f", "patch": "@@ -1,5 +1,10 @@\n 2012-06-01  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/53137\n+\t* pt.c (instantiate_class_template_1): Set LAMBDA_EXPR_THIS_CAPTURE.\n+\t(instantiate_decl): Don't push_to_top_level for local class methods.\n+\t(instantiate_class_template_1): Or for local classes.\n+\n \tPR c++/53484\n \t* pt.c (do_auto_deduction): Don't try to deduce from a\n \ttype-dependent initializer."}, {"sha": "4d4e8ada80f4b24c1674a9388d2600ab0dd6fdfd", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dfaf1d7dbe64f27aa61388f18971b53a923db9f/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dfaf1d7dbe64f27aa61388f18971b53a923db9f/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=3dfaf1d7dbe64f27aa61388f18971b53a923db9f", "patch": "@@ -8698,6 +8698,7 @@ instantiate_class_template_1 (tree type)\n   tree pbinfo;\n   tree base_list;\n   unsigned int saved_maximum_field_alignment;\n+  tree fn_context;\n \n   if (type == error_mark_node)\n     return error_mark_node;\n@@ -8756,7 +8757,9 @@ instantiate_class_template_1 (tree type)\n      it now.  */\n   push_deferring_access_checks (dk_no_deferred);\n \n-  push_to_top_level ();\n+  fn_context = decl_function_context (TYPE_MAIN_DECL (type));\n+  if (!fn_context)\n+    push_to_top_level ();\n   /* Use #pragma pack from the template context.  */\n   saved_maximum_field_alignment = maximum_field_alignment;\n   maximum_field_alignment = TYPE_PRECISION (pattern);\n@@ -9154,8 +9157,14 @@ instantiate_class_template_1 (tree type)\n       tree decl = lambda_function (type);\n       if (decl)\n \t{\n+\t  tree lam = CLASSTYPE_LAMBDA_EXPR (type);\n+\t  LAMBDA_EXPR_THIS_CAPTURE (lam)\n+\t    = lookup_field_1 (type, get_identifier (\"__this\"), false);\n+\n \t  instantiate_decl (decl, false, false);\n \t  maybe_add_lambda_conv_op (type);\n+\n+\t  LAMBDA_EXPR_THIS_CAPTURE (lam) = NULL_TREE;\n \t}\n       else\n \tgcc_assert (errorcount);\n@@ -9186,7 +9195,8 @@ instantiate_class_template_1 (tree type)\n   perform_deferred_access_checks ();\n   pop_nested_class ();\n   maximum_field_alignment = saved_maximum_field_alignment;\n-  pop_from_top_level ();\n+  if (!fn_context)\n+    pop_from_top_level ();\n   pop_deferring_access_checks ();\n   pop_tinst_level ();\n \n@@ -18435,9 +18445,10 @@ instantiate_decl (tree d, int defer_ok,\n   tree spec;\n   tree gen_tmpl;\n   bool pattern_defined;\n-  int need_push;\n   location_t saved_loc = input_location;\n   bool external_p;\n+  tree fn_context;\n+  bool nested;\n \n   /* This function should only be used to instantiate templates for\n      functions and static member variables.  */\n@@ -18672,9 +18683,12 @@ instantiate_decl (tree d, int defer_ok,\n \tgoto out;\n     }\n \n-  need_push = !cfun || !global_bindings_p ();\n-  if (need_push)\n+  fn_context = decl_function_context (d);\n+  nested = (current_function_decl != NULL_TREE);\n+  if (!fn_context)\n     push_to_top_level ();\n+  else if (nested)\n+    push_function_context ();\n \n   /* Mark D as instantiated so that recursive calls to\n      instantiate_decl do not try to instantiate it again.  */\n@@ -18784,8 +18798,10 @@ instantiate_decl (tree d, int defer_ok,\n   /* We're not deferring instantiation any more.  */\n   TI_PENDING_TEMPLATE_FLAG (DECL_TEMPLATE_INFO (d)) = 0;\n \n-  if (need_push)\n+  if (!fn_context)\n     pop_from_top_level ();\n+  else if (nested)\n+    pop_function_context ();\n \n out:\n   input_location = saved_loc;"}, {"sha": "27dbddca0d4f07668394614ea0eccf341ad568f2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dfaf1d7dbe64f27aa61388f18971b53a923db9f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dfaf1d7dbe64f27aa61388f18971b53a923db9f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3dfaf1d7dbe64f27aa61388f18971b53a923db9f", "patch": "@@ -1,5 +1,8 @@\n 2012-06-01  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/53137\n+\t* g++.dg/cpp0x/lambda/lambda-template5.C: New.\n+\n \tPR c++/53484\n \t* g++.dg/cpp0x/auto33.C: New.\n "}, {"sha": "b91b89ff36c3ea5f2f5d0774c7e585a94610047d", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-template5.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dfaf1d7dbe64f27aa61388f18971b53a923db9f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-template5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dfaf1d7dbe64f27aa61388f18971b53a923db9f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-template5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-template5.C?ref=3dfaf1d7dbe64f27aa61388f18971b53a923db9f", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/53137\n+// { dg-do compile { target c++11 } }\n+\n+struct A\n+{\n+  template <typename T> void f();\n+\n+  template <typename T> void g()\n+  {\n+    [this]{ f<T>(); }();\n+  }\n+\n+  void h()\n+  {\n+    g<int>();\n+  }\n+};"}]}