{"sha": "2c16eb3157f86ae561468c540caf8eb326106b5f", "node_id": "C_kwDOANBUbNoAKDJjMTZlYjMxNTdmODZhZTU2MTQ2OGM1NDBjYWY4ZWIzMjYxMDZiNWY", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-05-17T13:40:27Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-05-17T13:40:27Z"}, "message": "openmp: Add support for inoutset depend-kind\n\nThis patch adds support for inoutset depend-kind in depend\nclauses.  It is very similar to the in depend-kind in that\na task with a dependency with that depend-kind is dependent\non all previously created sibling tasks with matching address\nunless they have the same depend-kind.\nIn the in depend-kind case everything is dependent except\nfor in -> in dependency, for inoutset everything is\ndependent except for inoutset -> inoutset dependency.\nmutexinoutset is also similar (everything is dependent except\nfor mutexinoutset -> mutexinoutset dependency), but there is\nalso the additional restriction that only one task with\nmutexinoutset for each address can be scheduled at once (i.e.\nmutual exclusitivty).  For now we support mutexinoutset\nthe same as inout/out, but the inoutset support is full.\n\nIn order not to bump the ABI for dependencies each time\n(we've bumped it already once, the old ABI supports only\ninout/out and in depend-kind, the new ABI supports\ninout/out, mutexinoutset, in and depobj), this patch arranges\nfor inoutset to be at least for the time being always handled\nas if it was specified through depobj even when it is not.\nSo it uses the new ABI for that and inoutset are represented\nlike depobj - pointer to a pair of pointers where the first one\nwill be the actual address of the object mentioned in depend\nclause and second pointer will be (void *) GOMP_DEPEND_INOUTSET.\n\n2022-05-17  Jakub Jelinek  <jakub@redhat.com>\n\ngcc/\n\t* tree-core.h (enum omp_clause_depend_kind): Add\n\tOMP_CLAUSE_DEPEND_INOUTSET.\n\t* tree-pretty-print.cc (dump_omp_clause): Handle\n\tOMP_CLAUSE_DEPEND_INOUTSET.\n\t* gimplify.cc (gimplify_omp_depend): Likewise.\n\t* omp-low.cc (lower_depend_clauses): Likewise.\ngcc/c-family/\n\t* c-omp.cc (c_finish_omp_depobj): Handle\n\tOMP_CLAUSE_DEPEND_INOUTSET.\ngcc/c/\n\t* c-parser.cc (c_parser_omp_clause_depend): Parse\n\tinoutset depend-kind.\n\t(c_parser_omp_depobj): Likewise.\ngcc/cp/\n\t* parser.cc (cp_parser_omp_clause_depend): Parse\n\tinoutset depend-kind.\n\t(cp_parser_omp_depobj): Likewise.\n\t* cxx-pretty-print.cc (cxx_pretty_printer::statement): Handle\n\tOMP_CLAUSE_DEPEND_INOUTSET.\ngcc/testsuite/\n\t* c-c++-common/gomp/all-memory-1.c (boo): Add test with\n\tinoutset depend-kind.\n\t* c-c++-common/gomp/all-memory-2.c (boo): Likewise.\n\t* c-c++-common/gomp/depobj-1.c (f1): Likewise.\n\t(f2): Adjusted expected diagnostics.\n\t* g++.dg/gomp/depobj-1.C (f4): Adjust expected diagnostics.\ninclude/\n\t* gomp-constants.h (GOMP_DEPEND_INOUTSET): Define.\nlibgomp/\n\t* libgomp.h (struct gomp_task_depend_entry): Change is_in type\n\tfrom bool to unsigned char.\n\t* task.c (gomp_task_handle_depend): Handle GOMP_DEPEND_INOUTSET.\n\tIgnore dependencies where\n\ttask->depend[i].is_in && task->depend[i].is_in == ent->is_in\n\trather than just task->depend[i].is_in && ent->is_in.  Remember\n\twhether GOMP_DEPEND_IN loop is needed and guard the loop with that\n\tconditional.\n\t(gomp_task_maybe_wait_for_dependencies): Handle GOMP_DEPEND_INOUTSET.\n\tIgnore dependencies where elem.is_in && elem.is_in == ent->is_in\n\trather than just elem.is_in && ent->is_in.\n\t* testsuite/libgomp.c-c++-common/depend-1.c (test): Add task with\n\tinoutset depend-kind.\n\t* testsuite/libgomp.c-c++-common/depend-2.c (test): Likewise.\n\t* testsuite/libgomp.c-c++-common/depend-3.c (test): Likewise.\n\t* testsuite/libgomp.c-c++-common/depend-inoutset-1.c: New test.", "tree": {"sha": "d14eeb859d38591bdd83f3754a627ba21c4d5fae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d14eeb859d38591bdd83f3754a627ba21c4d5fae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c16eb3157f86ae561468c540caf8eb326106b5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c16eb3157f86ae561468c540caf8eb326106b5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c16eb3157f86ae561468c540caf8eb326106b5f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c16eb3157f86ae561468c540caf8eb326106b5f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1815462a6e53465c404f8a5f6116891492d4b50b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1815462a6e53465c404f8a5f6116891492d4b50b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1815462a6e53465c404f8a5f6116891492d4b50b"}], "stats": {"total": 407, "additions": 365, "deletions": 42}, "files": [{"sha": "66d17a2673dfa532383672892bc317f0945ed016", "filename": "gcc/c-family/c-omp.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c16eb3157f86ae561468c540caf8eb326106b5f/gcc%2Fc-family%2Fc-omp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c16eb3157f86ae561468c540caf8eb326106b5f/gcc%2Fc-family%2Fc-omp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-omp.cc?ref=2c16eb3157f86ae561468c540caf8eb326106b5f", "patch": "@@ -738,6 +738,7 @@ c_finish_omp_depobj (location_t loc, tree depobj,\n \tcase OMP_CLAUSE_DEPEND_OUT:\n \tcase OMP_CLAUSE_DEPEND_INOUT:\n \tcase OMP_CLAUSE_DEPEND_MUTEXINOUTSET:\n+\tcase OMP_CLAUSE_DEPEND_INOUTSET:\n \t  kind = OMP_CLAUSE_DEPEND_KIND (clause);\n \t  t = OMP_CLAUSE_DECL (clause);\n \t  gcc_assert (t);\n@@ -796,6 +797,9 @@ c_finish_omp_depobj (location_t loc, tree depobj,\n     case OMP_CLAUSE_DEPEND_MUTEXINOUTSET:\n       k = GOMP_DEPEND_MUTEXINOUTSET;\n       break;\n+    case OMP_CLAUSE_DEPEND_INOUTSET:\n+      k = GOMP_DEPEND_INOUTSET;\n+      break;\n     case OMP_CLAUSE_DEPEND_LAST:\n       k = -1;\n       break;"}, {"sha": "8df8f60ef2136289e177423522376ac0652989ab", "filename": "gcc/c/c-parser.cc", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c16eb3157f86ae561468c540caf8eb326106b5f/gcc%2Fc%2Fc-parser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c16eb3157f86ae561468c540caf8eb326106b5f/gcc%2Fc%2Fc-parser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.cc?ref=2c16eb3157f86ae561468c540caf8eb326106b5f", "patch": "@@ -16067,7 +16067,7 @@ c_parser_omp_clause_affinity (c_parser *parser, tree list)\n    depend ( depend-modifier , depend-kind: variable-list )\n \n    depend-kind:\n-     in | out | inout | mutexinoutset | depobj\n+     in | out | inout | mutexinoutset | depobj | inoutset\n \n    depend-modifier:\n      iterator ( iterators-definition )  */\n@@ -16099,6 +16099,8 @@ c_parser_omp_clause_depend (c_parser *parser, tree list)\n \tkind = OMP_CLAUSE_DEPEND_IN;\n       else if (strcmp (\"inout\", p) == 0)\n \tkind = OMP_CLAUSE_DEPEND_INOUT;\n+      else if (strcmp (\"inoutset\", p) == 0)\n+\tkind = OMP_CLAUSE_DEPEND_INOUTSET;\n       else if (strcmp (\"mutexinoutset\", p) == 0)\n \tkind = OMP_CLAUSE_DEPEND_MUTEXINOUTSET;\n       else if (strcmp (\"out\", p) == 0)\n@@ -19063,12 +19065,14 @@ c_parser_omp_depobj (c_parser *parser)\n \t\t    kind = OMP_CLAUSE_DEPEND_INOUT;\n \t\t  else if (!strcmp (\"mutexinoutset\", p2))\n \t\t    kind = OMP_CLAUSE_DEPEND_MUTEXINOUTSET;\n+\t\t  else if (!strcmp (\"inoutset\", p2))\n+\t\t    kind = OMP_CLAUSE_DEPEND_INOUTSET;\n \t\t}\n \t      if (kind == OMP_CLAUSE_DEPEND_SOURCE)\n \t\t{\n \t\t  clause = error_mark_node;\n-\t\t  error_at (c2_loc, \"expected %<in%>, %<out%>, %<inout%> or \"\n-\t\t\t\t    \"%<mutexinoutset%>\");\n+\t\t  error_at (c2_loc, \"expected %<in%>, %<out%>, %<inout%>, \"\n+\t\t\t\t    \"%<mutexinoutset%> or %<inoutset%>\");\n \t\t}\n \t      c_parens.skip_until_found_close (parser);\n \t    }"}, {"sha": "7e4db2e413b887e08b80a164a5b54c6718bd1ef1", "filename": "gcc/cp/cxx-pretty-print.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c16eb3157f86ae561468c540caf8eb326106b5f/gcc%2Fcp%2Fcxx-pretty-print.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c16eb3157f86ae561468c540caf8eb326106b5f/gcc%2Fcp%2Fcxx-pretty-print.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.cc?ref=2c16eb3157f86ae561468c540caf8eb326106b5f", "patch": "@@ -2139,6 +2139,9 @@ cxx_pretty_printer::statement (tree t)\n \t      case OMP_CLAUSE_DEPEND_MUTEXINOUTSET:\n \t\tpp_cxx_ws_string (this, \" update(mutexinoutset)\");\n \t\tbreak;\n+\t      case OMP_CLAUSE_DEPEND_INOUTSET:\n+\t\tpp_cxx_ws_string (this, \" update(inoutset)\");\n+\t\tbreak;\n \t      case OMP_CLAUSE_DEPEND_LAST:\n \t\tpp_cxx_ws_string (this, \" destroy\");\n \t\tbreak;"}, {"sha": "24585c1c013ad80dbf5972d8932cc2b0cfd2c089", "filename": "gcc/cp/parser.cc", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c16eb3157f86ae561468c540caf8eb326106b5f/gcc%2Fcp%2Fparser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c16eb3157f86ae561468c540caf8eb326106b5f/gcc%2Fcp%2Fparser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.cc?ref=2c16eb3157f86ae561468c540caf8eb326106b5f", "patch": "@@ -39446,6 +39446,8 @@ cp_parser_omp_clause_depend (cp_parser *parser, tree list, location_t loc)\n \tkind = OMP_CLAUSE_DEPEND_IN;\n       else if (strcmp (\"inout\", p) == 0)\n \tkind = OMP_CLAUSE_DEPEND_INOUT;\n+      else if (strcmp (\"inoutset\", p) == 0)\n+\tkind = OMP_CLAUSE_DEPEND_INOUTSET;\n       else if (strcmp (\"mutexinoutset\", p) == 0)\n \tkind = OMP_CLAUSE_DEPEND_MUTEXINOUTSET;\n       else if (strcmp (\"out\", p) == 0)\n@@ -41745,12 +41747,14 @@ cp_parser_omp_depobj (cp_parser *parser, cp_token *pragma_tok)\n \t\t    kind = OMP_CLAUSE_DEPEND_INOUT;\n \t\t  else if (!strcmp (\"mutexinoutset\", p2))\n \t\t    kind = OMP_CLAUSE_DEPEND_MUTEXINOUTSET;\n+\t\t  else if (!strcmp (\"inoutset\", p2))\n+\t\t    kind = OMP_CLAUSE_DEPEND_INOUTSET;\n \t\t}\n \t      if (kind == OMP_CLAUSE_DEPEND_SOURCE)\n \t\t{\n \t\t  clause = error_mark_node;\n-\t\t  error_at (c2_loc, \"expected %<in%>, %<out%>, %<inout%> or \"\n-\t\t\t\t    \"%<mutexinoutset%>\");\n+\t\t  error_at (c2_loc, \"expected %<in%>, %<out%>, %<inout%>, \"\n+\t\t\t\t    \"%<mutexinoutset%> or %<inoutset%>\");\n \t\t}\n \t      if (!c_parens.require_close (parser))\n \t\tcp_parser_skip_to_closing_parenthesis (parser,"}, {"sha": "260993be2159ca9ba6840d20e5d672501a648790", "filename": "gcc/gimplify.cc", "status": "modified", "additions": 86, "deletions": 14, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c16eb3157f86ae561468c540caf8eb326106b5f/gcc%2Fgimplify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c16eb3157f86ae561468c540caf8eb326106b5f/gcc%2Fgimplify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.cc?ref=2c16eb3157f86ae561468c540caf8eb326106b5f", "patch": "@@ -8270,9 +8270,9 @@ gimplify_omp_depend (tree *list_p, gimple_seq *pre_p)\n {\n   tree c;\n   gimple *g;\n-  size_t n[4] = { 0, 0, 0, 0 };\n-  bool unused[4];\n-  tree counts[4] = { NULL_TREE, NULL_TREE, NULL_TREE, NULL_TREE };\n+  size_t n[5] = { 0, 0, 0, 0, 0 };\n+  bool unused[5];\n+  tree counts[5] = { NULL_TREE, NULL_TREE, NULL_TREE, NULL_TREE, NULL_TREE };\n   tree last_iter = NULL_TREE, last_count = NULL_TREE;\n   size_t i, j;\n   location_t first_loc = UNKNOWN_LOCATION;\n@@ -8295,6 +8295,9 @@ gimplify_omp_depend (tree *list_p, gimple_seq *pre_p)\n \t  case OMP_CLAUSE_DEPEND_DEPOBJ:\n \t    i = 3;\n \t    break;\n+\t  case OMP_CLAUSE_DEPEND_INOUTSET:\n+\t    i = 4;\n+\t    break;\n \t  case OMP_CLAUSE_DEPEND_SOURCE:\n \t  case OMP_CLAUSE_DEPEND_SINK:\n \t    continue;\n@@ -8400,14 +8403,14 @@ gimplify_omp_depend (tree *list_p, gimple_seq *pre_p)\n \telse\n \t  n[i]++;\n       }\n-  for (i = 0; i < 4; i++)\n+  for (i = 0; i < 5; i++)\n     if (counts[i])\n       break;\n-  if (i == 4)\n+  if (i == 5)\n     return 0;\n \n   tree total = size_zero_node;\n-  for (i = 0; i < 4; i++)\n+  for (i = 0; i < 5; i++)\n     {\n       unused[i] = counts[i] == NULL_TREE && n[i] == 0;\n       if (counts[i] == NULL_TREE)\n@@ -8423,9 +8426,12 @@ gimplify_omp_depend (tree *list_p, gimple_seq *pre_p)\n   if (gimplify_expr (&total, pre_p, NULL, is_gimple_val, fb_rvalue)\n       == GS_ERROR)\n     return 2;\n-  bool is_old = unused[1] && unused[3];\n+  bool is_old = unused[1] && unused[3] && unused[4];\n   tree totalpx = size_binop (PLUS_EXPR, unshare_expr (total),\n \t\t\t     size_int (is_old ? 1 : 4));\n+  if (!unused[4])\n+    totalpx = size_binop (PLUS_EXPR, totalpx,\n+\t\t\t  size_binop (MULT_EXPR, counts[4], size_int (2)));\n   tree type = build_array_type (ptr_type_node, build_index_type (totalpx));\n   tree array = create_tmp_var_raw (type);\n   TREE_ADDRESSABLE (array) = 1;\n@@ -8471,11 +8477,11 @@ gimplify_omp_depend (tree *list_p, gimple_seq *pre_p)\n       gimplify_and_add (tem, pre_p);\n     }\n \n-  tree cnts[4];\n-  for (j = 4; j; j--)\n+  tree cnts[6];\n+  for (j = 5; j; j--)\n     if (!unused[j - 1])\n       break;\n-  for (i = 0; i < 4; i++)\n+  for (i = 0; i < 5; i++)\n     {\n       if (i && (i >= j || unused[i - 1]))\n \t{\n@@ -8499,6 +8505,15 @@ gimplify_omp_depend (tree *list_p, gimple_seq *pre_p)\n \t}\n       gimple_seq_add_stmt (pre_p, g);\n     }\n+  if (unused[4])\n+    cnts[5] = NULL_TREE;\n+  else\n+    {\n+      tree t = size_binop (PLUS_EXPR, total, size_int (5));\n+      cnts[5] = create_tmp_var (sizetype);\n+      g = gimple_build_assign (cnts[i], t);\n+      gimple_seq_add_stmt (pre_p, g);\n+    }\n \n   last_iter = NULL_TREE;\n   tree last_bind = NULL_TREE;\n@@ -8521,6 +8536,9 @@ gimplify_omp_depend (tree *list_p, gimple_seq *pre_p)\n \t  case OMP_CLAUSE_DEPEND_DEPOBJ:\n \t    i = 3;\n \t    break;\n+\t  case OMP_CLAUSE_DEPEND_INOUTSET:\n+\t    i = 4;\n+\t    break;\n \t  case OMP_CLAUSE_DEPEND_SOURCE:\n \t  case OMP_CLAUSE_DEPEND_SINK:\n \t    continue;\n@@ -8625,14 +8643,42 @@ gimplify_omp_depend (tree *list_p, gimple_seq *pre_p)\n \t      return 2;\n \t    if (TREE_VALUE (t) != null_pointer_node)\n \t      TREE_VALUE (t) = build_fold_addr_expr (TREE_VALUE (t));\n+\t    if (i == 4)\n+\t      {\n+\t\tr = build4 (ARRAY_REF, ptr_type_node, array, cnts[i],\n+\t\t\t    NULL_TREE, NULL_TREE);\n+\t\ttree r2 = build4 (ARRAY_REF, ptr_type_node, array, cnts[5],\n+\t\t\t\t  NULL_TREE, NULL_TREE);\n+\t\tr2 = build_fold_addr_expr_with_type (r2, ptr_type_node);\n+\t\ttem = build2_loc (OMP_CLAUSE_LOCATION (c), MODIFY_EXPR,\n+\t\t\t\t  void_type_node, r, r2);\n+\t\tappend_to_statement_list_force (tem, last_body);\n+\t\ttem = build2_loc (OMP_CLAUSE_LOCATION (c), MODIFY_EXPR,\n+\t\t\t\t  void_type_node, cnts[i],\n+\t\t\t\t  size_binop (PLUS_EXPR, cnts[i],\n+\t\t\t\t\t      size_int (1)));\n+\t\tappend_to_statement_list_force (tem, last_body);\n+\t\ti = 5;\n+\t      }\n \t    r = build4 (ARRAY_REF, ptr_type_node, array, cnts[i],\n \t\t\tNULL_TREE, NULL_TREE);\n \t    tem = build2_loc (OMP_CLAUSE_LOCATION (c), MODIFY_EXPR,\n \t\t\t      void_type_node, r, TREE_VALUE (t));\n \t    append_to_statement_list_force (tem, last_body);\n+\t    if (i == 5)\n+\t      {\n+\t\tr = build4 (ARRAY_REF, ptr_type_node, array,\n+\t\t\t    size_binop (PLUS_EXPR, cnts[i], size_int (1)),\n+\t\t\t    NULL_TREE, NULL_TREE);\n+\t\ttem = build_int_cst (ptr_type_node, GOMP_DEPEND_INOUTSET);\n+\t\ttem = build2_loc (OMP_CLAUSE_LOCATION (c), MODIFY_EXPR,\n+\t\t\t\t  void_type_node, r, tem);\n+\t\tappend_to_statement_list_force (tem, last_body);\n+\t      }\n \t    tem = build2_loc (OMP_CLAUSE_LOCATION (c), MODIFY_EXPR,\n \t\t\t      void_type_node, cnts[i],\n-\t\t\t      size_binop (PLUS_EXPR, cnts[i], size_int (1)));\n+\t\t\t      size_binop (PLUS_EXPR, cnts[i],\n+\t\t\t\t\t  size_int (1 + (i == 5))));\n \t    append_to_statement_list_force (tem, last_body);\n \t    TREE_VALUE (t) = null_pointer_node;\n \t  }\n@@ -8656,12 +8702,38 @@ gimplify_omp_depend (tree *list_p, gimple_seq *pre_p)\n \t    if (gimplify_expr (&OMP_CLAUSE_DECL (c), pre_p, NULL,\n \t\t\t       is_gimple_val, fb_rvalue) == GS_ERROR)\n \t      return 2;\n+\t    if (i == 4)\n+\t      {\n+\t\tr = build4 (ARRAY_REF, ptr_type_node, array, cnts[i],\n+\t\t\t    NULL_TREE, NULL_TREE);\n+\t\ttree r2 = build4 (ARRAY_REF, ptr_type_node, array, cnts[5],\n+\t\t\t\t  NULL_TREE, NULL_TREE);\n+\t\tr2 = build_fold_addr_expr_with_type (r2, ptr_type_node);\n+\t\ttem = build2 (MODIFY_EXPR, void_type_node, r, r2);\n+\t\tgimplify_and_add (tem, pre_p);\n+\t\tg = gimple_build_assign (cnts[i], size_binop (PLUS_EXPR,\n+\t\t\t\t\t\t\t      cnts[i],\n+\t\t\t\t\t\t\t      size_int (1)));\n+\t\tgimple_seq_add_stmt (pre_p, g);\n+\t\ti = 5;\n+\t      }\n \t    r = build4 (ARRAY_REF, ptr_type_node, array, cnts[i],\n \t\t\tNULL_TREE, NULL_TREE);\n \t    tem = build2 (MODIFY_EXPR, void_type_node, r, OMP_CLAUSE_DECL (c));\n \t    gimplify_and_add (tem, pre_p);\n-\t    g = gimple_build_assign (cnts[i], size_binop (PLUS_EXPR, cnts[i],\n-\t\t\t\t\t\t\t  size_int (1)));\n+\t    if (i == 5)\n+\t      {\n+\t\tr = build4 (ARRAY_REF, ptr_type_node, array,\n+\t\t\t    size_binop (PLUS_EXPR, cnts[i], size_int (1)),\n+\t\t\t    NULL_TREE, NULL_TREE);\n+\t\ttem = build_int_cst (ptr_type_node, GOMP_DEPEND_INOUTSET);\n+\t\ttem = build2 (MODIFY_EXPR, void_type_node, r, tem);\n+\t\tappend_to_statement_list_force (tem, last_body);\n+\t\tgimplify_and_add (tem, pre_p);\n+\t      }\n+\t    g = gimple_build_assign (cnts[i],\n+\t\t\t\t     size_binop (PLUS_EXPR, cnts[i],\n+\t\t\t\t\t\t size_int (1 + (i == 5))));\n \t    gimple_seq_add_stmt (pre_p, g);\n \t  }\n       }\n@@ -8685,7 +8757,7 @@ gimplify_omp_depend (tree *list_p, gimple_seq *pre_p)\n   else\n     {\n       tree prev = size_int (5);\n-      for (i = 0; i < 4; i++)\n+      for (i = 0; i < 5; i++)\n \t{\n \t  if (unused[i])\n \t    continue;"}, {"sha": "b97e0e950923c1a7d495796b01c9a7a97635c419", "filename": "gcc/omp-low.cc", "status": "modified", "additions": 39, "deletions": 5, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c16eb3157f86ae561468c540caf8eb326106b5f/gcc%2Fomp-low.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c16eb3157f86ae561468c540caf8eb326106b5f/gcc%2Fomp-low.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.cc?ref=2c16eb3157f86ae561468c540caf8eb326106b5f", "patch": "@@ -12304,7 +12304,7 @@ lower_depend_clauses (tree *pclauses, gimple_seq *iseq, gimple_seq *oseq)\n {\n   tree c, clauses;\n   gimple *g;\n-  size_t cnt[4] = { 0, 0, 0, 0 }, idx = 2, i;\n+  size_t cnt[5] = { 0, 0, 0, 0, 0 }, idx = 2, i;\n \n   clauses = omp_find_clause (*pclauses, OMP_CLAUSE_DEPEND);\n   gcc_assert (clauses);\n@@ -12328,16 +12328,20 @@ lower_depend_clauses (tree *pclauses, gimple_seq *iseq, gimple_seq *oseq)\n \tcase OMP_CLAUSE_DEPEND_DEPOBJ:\n \t  cnt[3]++;\n \t  break;\n+\tcase OMP_CLAUSE_DEPEND_INOUTSET:\n+\t  cnt[4]++;\n+\t  break;\n \tcase OMP_CLAUSE_DEPEND_SOURCE:\n \tcase OMP_CLAUSE_DEPEND_SINK:\n \t  /* FALLTHRU */\n \tdefault:\n \t  gcc_unreachable ();\n \t}\n-  if (cnt[1] || cnt[3])\n+  if (cnt[1] || cnt[3] || cnt[4])\n     idx = 5;\n-  size_t total = cnt[0] + cnt[1] + cnt[2] + cnt[3];\n-  tree type = build_array_type_nelts (ptr_type_node, total + idx);\n+  size_t total = cnt[0] + cnt[1] + cnt[2] + cnt[3] + cnt[4];\n+  size_t inoutidx = total + idx;\n+  tree type = build_array_type_nelts (ptr_type_node, total + idx + 2 * cnt[4]);\n   tree array = create_tmp_var (type);\n   TREE_ADDRESSABLE (array) = 1;\n   tree r = build4 (ARRAY_REF, ptr_type_node, array, size_int (0), NULL_TREE,\n@@ -12358,7 +12362,7 @@ lower_depend_clauses (tree *pclauses, gimple_seq *iseq, gimple_seq *oseq)\n       g = gimple_build_assign (r, build_int_cst (ptr_type_node, cnt[i]));\n       gimple_seq_add_stmt (iseq, g);\n     }\n-  for (i = 0; i < 4; i++)\n+  for (i = 0; i < 5; i++)\n     {\n       if (cnt[i] == 0)\n \tcontinue;\n@@ -12386,10 +12390,21 @@ lower_depend_clauses (tree *pclauses, gimple_seq *iseq, gimple_seq *oseq)\n \t\tif (i != 3)\n \t\t  continue;\n \t\tbreak;\n+\t      case OMP_CLAUSE_DEPEND_INOUTSET:\n+\t\tif (i != 4)\n+\t\t   continue;\n+\t\tbreak;\n \t      default:\n \t\tgcc_unreachable ();\n \t      }\n \t    tree t = OMP_CLAUSE_DECL (c);\n+\t    if (i == 4)\n+\t      {\n+\t\tt = build4 (ARRAY_REF, ptr_type_node, array,\n+\t\t\t    size_int (inoutidx), NULL_TREE, NULL_TREE);\n+\t\tt = build_fold_addr_expr (t);\n+\t\tinoutidx += 2;\n+\t      }\n \t    t = fold_convert (ptr_type_node, t);\n \t    gimplify_expr (&t, iseq, NULL, is_gimple_val, fb_rvalue);\n \t    r = build4 (ARRAY_REF, ptr_type_node, array, size_int (idx++),\n@@ -12398,6 +12413,25 @@ lower_depend_clauses (tree *pclauses, gimple_seq *iseq, gimple_seq *oseq)\n \t    gimple_seq_add_stmt (iseq, g);\n \t  }\n     }\n+  if (cnt[4])\n+    for (c = clauses; c; c = OMP_CLAUSE_CHAIN (c))\n+      if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_DEPEND\n+\t  && OMP_CLAUSE_DEPEND_KIND (c) == OMP_CLAUSE_DEPEND_INOUTSET)\n+\t{\n+\t  tree t = OMP_CLAUSE_DECL (c);\n+\t  t = fold_convert (ptr_type_node, t);\n+\t  gimplify_expr (&t, iseq, NULL, is_gimple_val, fb_rvalue);\n+\t  r = build4 (ARRAY_REF, ptr_type_node, array, size_int (idx++),\n+\t\t      NULL_TREE, NULL_TREE);\n+\t  g = gimple_build_assign (r, t);\n+\t  gimple_seq_add_stmt (iseq, g);\n+\t  t = build_int_cst (ptr_type_node, GOMP_DEPEND_INOUTSET);\n+\t  r = build4 (ARRAY_REF, ptr_type_node, array, size_int (idx++),\n+\t\t      NULL_TREE, NULL_TREE);\n+\t  g = gimple_build_assign (r, t);\n+\t  gimple_seq_add_stmt (iseq, g);\n+\t}\n+\n   c = build_omp_clause (UNKNOWN_LOCATION, OMP_CLAUSE_DEPEND);\n   OMP_CLAUSE_DEPEND_KIND (c) = OMP_CLAUSE_DEPEND_LAST;\n   OMP_CLAUSE_DECL (c) = build_fold_addr_expr (array);"}, {"sha": "0fb457057c4b208c6da216ea42ff026a50c417ed", "filename": "gcc/testsuite/c-c++-common/gomp/all-memory-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c16eb3157f86ae561468c540caf8eb326106b5f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fall-memory-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c16eb3157f86ae561468c540caf8eb326106b5f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fall-memory-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fall-memory-1.c?ref=2c16eb3157f86ae561468c540caf8eb326106b5f", "patch": "@@ -49,4 +49,6 @@ boo (void)\n   ;\n   #pragma omp task depend(mutexinoutset: omp_all_memory)\t/* { dg-error \"'omp_all_memory' used with 'depend' kind other than 'out' or 'inout'\" } */\n   ;\n+  #pragma omp task depend(inoutset: omp_all_memory)\t\t/* { dg-error \"'omp_all_memory' used with 'depend' kind other than 'out' or 'inout'\" } */\n+  ;\n }"}, {"sha": "99b5945eac51ac95555afabdcff89e2a2313ee0a", "filename": "gcc/testsuite/c-c++-common/gomp/all-memory-2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c16eb3157f86ae561468c540caf8eb326106b5f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fall-memory-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c16eb3157f86ae561468c540caf8eb326106b5f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fall-memory-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fall-memory-2.c?ref=2c16eb3157f86ae561468c540caf8eb326106b5f", "patch": "@@ -52,4 +52,6 @@ boo (void)\n   ;\n   #pragma omp task depend(mutexinoutset: omp_all_memory)\n   ;\n+  #pragma omp task depend(inoutset: omp_all_memory)\n+  ;\n }"}, {"sha": "77fd97159aa61464b9cc99b1aa6e95d3b70acc7e", "filename": "gcc/testsuite/c-c++-common/gomp/depobj-1.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c16eb3157f86ae561468c540caf8eb326106b5f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdepobj-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c16eb3157f86ae561468c540caf8eb326106b5f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdepobj-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdepobj-1.c?ref=2c16eb3157f86ae561468c540caf8eb326106b5f", "patch": "@@ -21,6 +21,9 @@ f1 (void)\n   ;\n   #pragma omp depobj(pdepobj[0]) depend(mutexinoutset:a)\n   #pragma omp depobj(*pdepobj) destroy\n+  #pragma omp depobj(depobja[0]) depend(inoutset: a)\n+  #pragma omp depobj(depobja[0]) update(mutexinoutset)\n+  #pragma omp depobj(depobja[0]) update(inoutset)\n }\n \n void\n@@ -38,7 +41,7 @@ f2 (void)\n   #pragma omp depobj (a) destroy\t\t\t/* { dg-error \"type of 'depobj' expression is not 'omp_depend_t'\" } */\n   #pragma omp depobj (depobj) depend(depobj:a)\t\t/* { dg-error \"does not have 'omp_depend_t' type in 'depend' clause with 'depobj' dependence type\" } */\n   #pragma omp depobj (depobj) depend(depobj:*depobjb)\t/* { dg-error \"'depobj' dependence type specified in 'depend' clause on 'depobj' construct\" } */\n-  #pragma omp depobj (depobj) update(foobar)\t\t/* { dg-error \"expected 'in', 'out', 'inout' or 'mutexinoutset'\" } */\n+  #pragma omp depobj (depobj) update(foobar)\t\t/* { dg-error \"expected 'in', 'out', 'inout', 'mutexinoutset' or 'inoutset'\" } */\n   #pragma omp depobj (depobj) depend(in: *depobja)\t/* { dg-error \"should not have 'omp_depend_t' type in 'depend' clause with dependence type\" } */\n   #pragma omp depobj (depobj) depend(in: a) depend(in: b)\t/* { dg-error \"expected\" } */\n   #pragma omp depobj (depobj) depend(in: a) update(out)\t/* { dg-error \"expected\" } */"}, {"sha": "cb091a1da2cb7b2129232f5ba75a69ec82d9fcd7", "filename": "gcc/testsuite/g++.dg/gomp/depobj-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c16eb3157f86ae561468c540caf8eb326106b5f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fdepobj-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c16eb3157f86ae561468c540caf8eb326106b5f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fdepobj-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fdepobj-1.C?ref=2c16eb3157f86ae561468c540caf8eb326106b5f", "patch": "@@ -83,7 +83,7 @@ f4 (void)\n   #pragma omp depobj (a) destroy\t\t\t// { dg-error \"type of 'depobj' expression is not 'omp_depend_t'\" }\n   #pragma omp depobj (depobj) depend(depobj:a)\t\t// { dg-error \"does not have 'omp_depend_t' type in 'depend' clause with 'depobj' dependence type\" }\n   #pragma omp depobj (depobj) depend(depobj:*depobjb)\t// { dg-error \"'depobj' dependence type specified in 'depend' clause on 'depobj' construct\" }\n-  #pragma omp depobj (depobj) update(foobar)\t\t// { dg-error \"expected 'in', 'out', 'inout' or 'mutexinoutset'\" }\n+  #pragma omp depobj (depobj) update(foobar)\t\t// { dg-error \"expected 'in', 'out', 'inout', 'mutexinoutset' or 'inoutset'\" }\n   #pragma omp depobj (depobj) depend(in: *depobja)\t// { dg-error \"should not have 'omp_depend_t' type in 'depend' clause with dependence type\" }\n   #pragma omp depobj (depobj) depend(in: a) depend(in: b)\t// { dg-error \"expected\" }\n   #pragma omp depobj (depobj) depend(in: a) update(out)\t// { dg-error \"expected\" }"}, {"sha": "2383b570f49f740a611fb257c000e3b02844a666", "filename": "gcc/tree-core.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c16eb3157f86ae561468c540caf8eb326106b5f/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c16eb3157f86ae561468c540caf8eb326106b5f/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=2c16eb3157f86ae561468c540caf8eb326106b5f", "patch": "@@ -1527,6 +1527,7 @@ enum omp_clause_depend_kind\n   OMP_CLAUSE_DEPEND_OUT,\n   OMP_CLAUSE_DEPEND_INOUT,\n   OMP_CLAUSE_DEPEND_MUTEXINOUTSET,\n+  OMP_CLAUSE_DEPEND_INOUTSET,\n   OMP_CLAUSE_DEPEND_SOURCE,\n   OMP_CLAUSE_DEPEND_SINK,\n   OMP_CLAUSE_DEPEND_DEPOBJ,"}, {"sha": "333ac23aeb26b9a59c37534267b4a85a8b9b5b62", "filename": "gcc/tree-pretty-print.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c16eb3157f86ae561468c540caf8eb326106b5f/gcc%2Ftree-pretty-print.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c16eb3157f86ae561468c540caf8eb326106b5f/gcc%2Ftree-pretty-print.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.cc?ref=2c16eb3157f86ae561468c540caf8eb326106b5f", "patch": "@@ -804,6 +804,9 @@ dump_omp_clause (pretty_printer *pp, tree clause, int spc, dump_flags_t flags)\n \tcase OMP_CLAUSE_DEPEND_MUTEXINOUTSET:\n \t  name = \"mutexinoutset\";\n \t  break;\n+\tcase OMP_CLAUSE_DEPEND_INOUTSET:\n+\t  name = \"inoutset\";\n+\t  break;\n \tcase OMP_CLAUSE_DEPEND_SOURCE:\n \t  pp_string (pp, \"source)\");\n \t  return;"}, {"sha": "701d33dae49fd7e3b6c234d14d605c3d559a0846", "filename": "include/gomp-constants.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c16eb3157f86ae561468c540caf8eb326106b5f/include%2Fgomp-constants.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c16eb3157f86ae561468c540caf8eb326106b5f/include%2Fgomp-constants.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fgomp-constants.h?ref=2c16eb3157f86ae561468c540caf8eb326106b5f", "patch": "@@ -328,6 +328,7 @@ enum gomp_map_kind\n #define GOMP_DEPEND_OUT\t\t\t2\n #define GOMP_DEPEND_INOUT\t\t3\n #define GOMP_DEPEND_MUTEXINOUTSET\t4\n+#define GOMP_DEPEND_INOUTSET\t\t5\n \n /* HSA specific data structures.  */\n "}, {"sha": "74487e540d371e2655ce617555f3ef62620f51ba", "filename": "libgomp/libgomp.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c16eb3157f86ae561468c540caf8eb326106b5f/libgomp%2Flibgomp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c16eb3157f86ae561468c540caf8eb326106b5f/libgomp%2Flibgomp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Flibgomp.h?ref=2c16eb3157f86ae561468c540caf8eb326106b5f", "patch": "@@ -536,8 +536,8 @@ struct gomp_task_depend_entry\n   struct gomp_task_depend_entry *prev;\n   /* Task that provides the dependency in ADDR.  */\n   struct gomp_task *task;\n-  /* Depend entry is of type \"IN\".  */\n-  bool is_in;\n+  /* Depend entry is of type \"IN\" (1) or \"INOUTSET\" (2).  */\n+  unsigned char is_in;\n   bool redundant;\n   bool redundant_out;\n };"}, {"sha": "e9a28bf71cba9c25689ab9d11937514958c92a7f", "filename": "libgomp/task.c", "status": "modified", "additions": 22, "deletions": 11, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c16eb3157f86ae561468c540caf8eb326106b5f/libgomp%2Ftask.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c16eb3157f86ae561468c540caf8eb326106b5f/libgomp%2Ftask.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftask.c?ref=2c16eb3157f86ae561468c540caf8eb326106b5f", "patch": "@@ -197,6 +197,7 @@ gomp_task_handle_depend (struct gomp_task *task, struct gomp_task *parent,\n       /* ndepend - nout - nmutexinoutset - nin is # of depobjs */\n       size_t normal = nout + nmutexinoutset + nin;\n       size_t n = 0;\n+      bool has_in = false;\n       for (i = normal; i < ndepend; i++)\n \t{\n \t  void **d = (void **) (uintptr_t) depend[5 + i];\n@@ -209,6 +210,8 @@ gomp_task_handle_depend (struct gomp_task *task, struct gomp_task *parent,\n \t    case GOMP_DEPEND_MUTEXINOUTSET:\n \t      break;\n \t    case GOMP_DEPEND_IN:\n+\t    case GOMP_DEPEND_INOUTSET:\n+\t      has_in = true;\n \t      continue;\n \t    default:\n \t      gomp_fatal (\"unknown omp_depend_t dependence type %d\",\n@@ -222,14 +225,17 @@ gomp_task_handle_depend (struct gomp_task *task, struct gomp_task *parent,\n \t  task->depend[n].addr = depend[5 + i];\n \t  task->depend[n++].is_in = i >= nout + nmutexinoutset;\n \t}\n-      for (i = normal; i < ndepend; i++)\n-\t{\n-\t  void **d = (void **) (uintptr_t) depend[5 + i];\n-\t  if ((uintptr_t) d[1] != GOMP_DEPEND_IN)\n-\t    continue;\n-\t  task->depend[n].addr = d[0];\n-\t  task->depend[n++].is_in = 1;\n-\t}\n+      if (has_in)\n+\tfor (i = normal; i < ndepend; i++)\n+\t  {\n+\t    void **d = (void **) (uintptr_t) depend[5 + i];\n+\t    if ((uintptr_t) d[1] != GOMP_DEPEND_IN\n+\t\t&& (uintptr_t) d[1] != GOMP_DEPEND_INOUTSET)\n+\t      continue;\n+\t    task->depend[n].addr = d[0];\n+\t    task->depend[n++].is_in\n+\t      = 1 + ((uintptr_t) d[1] == GOMP_DEPEND_INOUTSET);\n+\t  }\n     }\n   task->num_dependees = 0;\n   if (__builtin_expect (parent->depend_all_memory && ndepend, false))\n@@ -381,8 +387,10 @@ gomp_task_handle_depend (struct gomp_task *task, struct gomp_task *parent,\n \n \t      last = ent;\n \n-\t      /* depend(in:...) doesn't depend on earlier depend(in:...).  */\n-\t      if (task->depend[i].is_in && ent->is_in)\n+\t      /* depend(in:...) doesn't depend on earlier depend(in:...).\n+\t\t Similarly depend(inoutset:...) doesn't depend on earlier\n+\t\t depend(inoutset:...).  */\n+\t      if (task->depend[i].is_in && task->depend[i].is_in == ent->is_in)\n \t\tcontinue;\n \n \t      if (!ent->is_in)\n@@ -1890,6 +1898,9 @@ gomp_task_maybe_wait_for_dependencies (void **depend)\n \t    case GOMP_DEPEND_MUTEXINOUTSET:\n \t      elem.is_in = 0;\n \t      break;\n+\t    case GOMP_DEPEND_INOUTSET:\n+\t      elem.is_in = 2;\n+\t      break;\n \t    default:\n \t      gomp_fatal (\"unknown omp_depend_t dependence type %d\",\n \t\t\t  (int) (uintptr_t) d[1]);\n@@ -1928,7 +1939,7 @@ gomp_task_maybe_wait_for_dependencies (void **depend)\n \t}\n       ent = htab_find (task->depend_hash, &elem);\n       for (; ent; ent = ent->next)\n-\tif (elem.is_in && ent->is_in)\n+\tif (elem.is_in && elem.is_in == ent->is_in)\n \t  continue;\n \telse\n \t  {"}, {"sha": "47d7570a196314bfe2b94feb5273fd5bc86192c2", "filename": "libgomp/testsuite/libgomp.c-c++-common/depend-1.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c16eb3157f86ae561468c540caf8eb326106b5f/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fdepend-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c16eb3157f86ae561468c540caf8eb326106b5f/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fdepend-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fdepend-1.c?ref=2c16eb3157f86ae561468c540caf8eb326106b5f", "patch": "@@ -48,14 +48,19 @@ test (int ifval)\n       usleep (5000);\n       b[4] = 48;\n     }\n+    #pragma omp task shared(b) depend(inoutset: b[5])\n+    {\n+      usleep (5000);\n+      b[5] = 49;\n+    }\n     /* None of the above tasks depend on each other.\n        The following task depends on all but the a[4] = 46; one.  */\n     #pragma omp task shared(a, b) depend(out: omp_all_memory) private(i) if(ifval)\n     {\n       if (a[0] != 42 || a[1] != 43 || a[2] != 44 || a[3] != 45\n \t  || a[5] != 5 || a[6] != 6 || a[7] != 7\n \t  || b[0] != 47 || b[1] != 2 || b[2] != 4 || b[3] != 6\n-\t  || b[4] != 48 || b[5] != 10 || b[6] != 12 || b[7] != 14)\n+\t  || b[4] != 48 || b[5] != 49 || b[6] != 12 || b[7] != 14)\n \tabort ();\n       for (i = 0; i < 8; ++i)\n \tif (i != 4)"}, {"sha": "2fe867e2c83f0aa11f8435c560c1df94506f982e", "filename": "libgomp/testsuite/libgomp.c-c++-common/depend-2.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c16eb3157f86ae561468c540caf8eb326106b5f/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fdepend-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c16eb3157f86ae561468c540caf8eb326106b5f/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fdepend-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fdepend-2.c?ref=2c16eb3157f86ae561468c540caf8eb326106b5f", "patch": "@@ -52,14 +52,19 @@ test (int ifval)\n       usleep (5000);\n       b[4] = 48;\n     }\n+    #pragma omp task shared(b) depend(inoutset: b[5])\n+    {\n+      usleep (5000);\n+      b[5] = 49;\n+    }\n     /* None of the above tasks depend on each other.\n        The following task depends on all but the a[4] = 46; one.  */\n     #pragma omp task shared(a, b) depend(depobj: d1) private(i) if(ifval)\n     {\n       if (a[0] != 42 || a[1] != 43 || a[2] != 44 || a[3] != 45\n \t  || a[5] != 5 || a[6] != 6 || a[7] != 7\n \t  || b[0] != 47 || b[1] != 2 || b[2] != 4 || b[3] != 6\n-\t  || b[4] != 48 || b[5] != 10 || b[6] != 12 || b[7] != 14)\n+\t  || b[4] != 48 || b[5] != 49 || b[6] != 12 || b[7] != 14)\n \tabort ();\n       for (i = 0; i < 8; ++i)\n \tif (i != 4)"}, {"sha": "7cfda67318c22870f0e916ba20fd6824b7c664e1", "filename": "libgomp/testsuite/libgomp.c-c++-common/depend-3.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c16eb3157f86ae561468c540caf8eb326106b5f/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fdepend-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c16eb3157f86ae561468c540caf8eb326106b5f/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fdepend-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fdepend-3.c?ref=2c16eb3157f86ae561468c540caf8eb326106b5f", "patch": "@@ -48,14 +48,19 @@ main ()\n       usleep (5000);\n       b[4] = 48;\n     }\n+    #pragma omp task shared(b) depend(inoutset: b[5])\n+    {\n+      usleep (5000);\n+      b[5] = 49;\n+    }\n     /* None of the above tasks depend on each other.\n        The following task depends on all but the a[4] = 46; one.  */\n     #pragma omp task shared(a, b) depend(iterator (j=0:7), inout: omp_all_memory) private(i)\n     {\n       if (a[0] != 42 || a[1] != 43 || a[2] != 44 || a[3] != 45\n \t  || a[5] != 5 || a[6] != 6 || a[7] != 7\n \t  || b[0] != 47 || b[1] != 2 || b[2] != 4 || b[3] != 6\n-\t  || b[4] != 48 || b[5] != 10 || b[6] != 12 || b[7] != 14)\n+\t  || b[4] != 48 || b[5] != 49 || b[6] != 12 || b[7] != 14)\n \tabort ();\n       for (i = 0; i < 8; ++i)\n \tif (i != 4)"}, {"sha": "77956f262324f3f4bcce8bf57fdc69d2d52210e3", "filename": "libgomp/testsuite/libgomp.c-c++-common/depend-inoutset-1.c", "status": "added", "additions": 164, "deletions": 0, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c16eb3157f86ae561468c540caf8eb326106b5f/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fdepend-inoutset-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c16eb3157f86ae561468c540caf8eb326106b5f/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fdepend-inoutset-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fdepend-inoutset-1.c?ref=2c16eb3157f86ae561468c540caf8eb326106b5f", "patch": "@@ -0,0 +1,164 @@\n+#include <omp.h>\n+#include <stdlib.h>\n+#include <unistd.h>\n+\n+int\n+main ()\n+{\n+  int a[8] = {};\n+  omp_depend_t d1, d2;\n+  #pragma omp depobj (d1) depend(inoutset: a)\n+  #pragma omp depobj (d2) depend(inout: a)\n+  #pragma omp depobj (d2) update(inoutset)\n+  #pragma omp parallel\n+  {\n+    #pragma omp barrier\n+    #pragma omp master\n+    {\n+    #pragma omp task shared(a) depend(out: a)\n+    {\n+      usleep (5000);\n+      a[0] = 1; a[1] = 2; a[2] = 3; a[3] = 4;\n+    }\n+    /* The above task needs to finish first.  */\n+    #pragma omp task shared(a) depend(in: a)\n+    {\n+      if (a[0] != 1 || a[1] != 2 || a[2] != 3 || a[3] != 4)\n+\tabort ();\n+      usleep (5000);\n+      a[4] = 42;\n+    }\n+    #pragma omp task shared(a) depend(in: a)\n+    {\n+      if (a[0] != 1 || a[1] != 2 || a[2] != 3 || a[3] != 4)\n+\tabort ();\n+      usleep (5000);\n+      a[5] = 43;\n+    }\n+    #pragma omp task shared(a) depend(in: a)\n+    {\n+      if (a[0] != 1 || a[1] != 2 || a[2] != 3 || a[3] != 4)\n+\tabort ();\n+      usleep (5000);\n+      a[6] = 44;\n+    }\n+    #pragma omp task shared(a) depend(in: a)\n+    {\n+      if (a[0] != 1 || a[1] != 2 || a[2] != 3 || a[3] != 4)\n+\tabort ();\n+      usleep (5000);\n+      a[7] = 45;\n+    }\n+    /* The above 4 tasks can be scheduled in any order but need to wait\n+       for the depend(out: a) task.  */\n+    #pragma omp task shared(a) depend(inoutset: a)\n+    {\n+      if (a[4] != 42 || a[5] != 43 || a[6] != 44 || a[7] != 45)\n+\tabort ();\n+      usleep (5000);\n+      a[0] = 42;\n+    }\n+    #pragma omp task shared(a) depend(iterator(i=1:3:2), inoutset: a)\n+    {\n+      if (a[4] != 42 || a[5] != 43 || a[6] != 44 || a[7] != 45)\n+\tabort ();\n+      usleep (5000);\n+      a[1] = 43;\n+    }\n+    #pragma omp task shared(a) depend(depobj: d1)\n+    {\n+      if (a[4] != 42 || a[5] != 43 || a[6] != 44 || a[7] != 45)\n+\tabort ();\n+      usleep (5000);\n+      a[2] = 44;\n+    }\n+    #pragma omp task shared(a) depend(depobj: d2)\n+    {\n+      if (a[4] != 42 || a[5] != 43 || a[6] != 44 || a[7] != 45)\n+\tabort ();\n+      usleep (5000);\n+      a[3] = 45;\n+    }\n+    /* The above 4 tasks can be scheduled in any order but need to wait\n+       for all the above depend(in: a) tasks.  */\n+    #pragma omp task shared(a) depend(in: a)\n+    {\n+      if (a[0] != 42 || a[1] != 43 || a[2] != 44 || a[3] != 45)\n+\tabort ();\n+      usleep (5000);\n+      a[4] = 46;\n+    }\n+    #pragma omp task shared(a) depend(in: a)\n+    {\n+      if (a[0] != 42 || a[1] != 43 || a[2] != 44 || a[3] != 45)\n+\tabort ();\n+      usleep (5000);\n+      a[5] = 47;\n+    }\n+    #pragma omp task shared(a) depend(in: a)\n+    {\n+      if (a[0] != 42 || a[1] != 43 || a[2] != 44 || a[3] != 45)\n+\tabort ();\n+      usleep (5000);\n+      a[6] = 48;\n+    }\n+    #pragma omp task shared(a) depend(in: a)\n+    {\n+      if (a[0] != 42 || a[1] != 43 || a[2] != 44 || a[3] != 45)\n+\tabort ();\n+      usleep (5000);\n+      a[7] = 49;\n+    }\n+    /* The above 4 tasks can be scheduled in any order but need to wait\n+       for all the above depend(inoutset: a),\n+       depend(iterator(i=1:3:2), inoutset: a), depend(depobj: d1) and\n+       depend(depobj: d2) tasks.  */\n+    #pragma omp task shared(a) depend(inoutset: a)\n+    {\n+      if (a[4] != 46|| a[5] != 47 || a[6] != 48 || a[7] != 49)\n+\tabort ();\n+      usleep (5000);\n+      a[0] = 50;\n+    }\n+    /* The above task needs to wait for all the above 4 depend(in: a)\n+       tasks.  */\n+    #pragma omp task shared(a) depend(out: a)\n+    {\n+      if (a[0] != 50 || a[4] != 46|| a[5] != 47 || a[6] != 48 || a[7] != 49)\n+\tabort ();\n+      usleep (5000);\n+      a[0] = 51;\n+    }\n+    /* The above task needs to wait for the above depend(inoutset: a) task.  */\n+    #pragma omp task shared(a) depend(inoutset: a)\n+    {\n+      if (a[0] != 51 || a[4] != 46|| a[5] != 47 || a[6] != 48 || a[7] != 49)\n+\tabort ();\n+      usleep (5000);\n+      a[0] = 52;\n+    }\n+    /* The above task needs to wait for the above depend(out: a) task.  */\n+    #pragma omp task shared(a) depend(mutexinoutset: a)\n+    {\n+      if (a[0] != 52 || a[4] != 46|| a[5] != 47 || a[6] != 48 || a[7] != 49)\n+\tabort ();\n+      usleep (5000);\n+      a[0] = 53;\n+    }\n+    /* The above task needs to wait for the above depend(inoutset: a) task.  */\n+    #pragma omp task shared(a) depend(inoutset: a)\n+    {\n+      if (a[0] != 53 || a[4] != 46|| a[5] != 47 || a[6] != 48 || a[7] != 49)\n+\tabort ();\n+      usleep (5000);\n+      a[0] = 54;\n+    }\n+    /* The above task needs to wait for the above\n+       depend(mutexinoutset: a) task.  */\n+    }\n+  }\n+  if (a[0] != 54 || a[1] != 43 || a[2] != 44 || a[3] != 45\n+      || a[4] != 46|| a[5] != 47 || a[6] != 48 || a[7] != 49)\n+    abort ();\n+  return 0;\n+}"}]}