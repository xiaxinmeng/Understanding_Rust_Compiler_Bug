{"sha": "86051306a1a4da9a1fb5da12325cac62cd4ca883", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODYwNTEzMDZhMWE0ZGE5YTFmYjVkYTEyMzI1Y2FjNjJjZDRjYTg4Mw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2005-12-17T08:39:12Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2005-12-17T08:39:12Z"}, "message": "tree-flow-inline.h (set_default_def, [...]): Kill.\n\n\t* tree-flow-inline.h (set_default_def, default_def): Kill.\n\t* tree-dfa.c (default_defs): New global variable.\n\t(default_def, set_default_def): New functions.\n\t* tree-ssa.c (init_tree_ssa, delete_tree_ssa): Add default_def hash.\n\t* tree-flow.h (struct var_ann_d): Kill default_def field.\n\t(set_default_def, default_def): Update prototype.\n\t(default_defs): Declare.\n\nFrom-SVN: r108712", "tree": {"sha": "5206804d3351b2f304e2c368d857807d77d69f91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5206804d3351b2f304e2c368d857807d77d69f91"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/86051306a1a4da9a1fb5da12325cac62cd4ca883", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86051306a1a4da9a1fb5da12325cac62cd4ca883", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86051306a1a4da9a1fb5da12325cac62cd4ca883", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86051306a1a4da9a1fb5da12325cac62cd4ca883/comments", "author": null, "committer": null, "parents": [{"sha": "471eeb830d1f4a7c607c78dc9d2cd3a1d2e7c31d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/471eeb830d1f4a7c607c78dc9d2cd3a1d2e7c31d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/471eeb830d1f4a7c607c78dc9d2cd3a1d2e7c31d"}], "stats": {"total": 99, "additions": 74, "deletions": 25}, "files": [{"sha": "c310b264c6a58a62d4b95f90d1ed4b8b57229f16", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86051306a1a4da9a1fb5da12325cac62cd4ca883/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86051306a1a4da9a1fb5da12325cac62cd4ca883/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=86051306a1a4da9a1fb5da12325cac62cd4ca883", "patch": "@@ -1,3 +1,13 @@\n+2005-12-17  Jan Hubicka  <jh@suse.cz>\n+\n+\t* tree-flow-inline.h (set_default_def, default_def): Kill.\n+\t* tree-dfa.c (default_defs): New global variable.\n+\t(default_def, set_default_def): New functions.\n+\t* tree-ssa.c (init_tree_ssa, delete_tree_ssa): Add default_def hash.\n+\t* tree-flow.h (struct var_ann_d): Kill default_def field.\n+\t(set_default_def, default_def): Update prototype.\n+\t(default_defs): Declare.\n+\n 2005-12-16  Jeff Law  <law@redhat.com>\n \n \t* tree-ssa-dom.c (update_rhs_and_lookup_avail_expr): Kill."}, {"sha": "913fd5751c0c125296848aead26cc7c277602bd9", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86051306a1a4da9a1fb5da12325cac62cd4ca883/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86051306a1a4da9a1fb5da12325cac62cd4ca883/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=86051306a1a4da9a1fb5da12325cac62cd4ca883", "patch": "@@ -85,6 +85,12 @@ static void add_referenced_var (tree, struct walk_state *);\n /* Array of all variables referenced in the function.  */\n htab_t referenced_vars;\n \n+/* Default definition for this symbols.  If set for symbol, it\n+   means that the first reference to this variable in the function is a\n+   USE or a VUSE.  In those cases, the SSA renamer creates an SSA name\n+   for this variable with an empty defining statement.  */\n+htab_t default_defs;\n+\n \n /*---------------------------------------------------------------------------\n \t\t\tDataflow analysis (DFA) routines\n@@ -609,6 +615,55 @@ referenced_var_insert (unsigned int uid, tree to)\n   *(struct int_tree_map **)  loc = h;\n }\n \n+/* Lookup VAR UID in the default_defs hashtable and return the associated\n+   variable.  */\n+\n+tree \n+default_def (tree var)\n+{\n+  struct int_tree_map *h, in;\n+  gcc_assert (SSA_VAR_P (var));\n+  in.uid = DECL_UID (var);\n+  h = htab_find_with_hash (default_defs, &in, DECL_UID (var));\n+  if (h)\n+    return h->to;\n+  return NULL_TREE;\n+}\n+\n+/* Insert the pair VAR's UID, DEF into the default_defs hashtable.  */\n+\n+void\n+set_default_def (tree var, tree def)\n+{ \n+  struct int_tree_map in;\n+  struct int_tree_map *h;\n+  void **loc;\n+\n+  gcc_assert (SSA_VAR_P (var));\n+  in.uid = DECL_UID (var);\n+  if (!def && default_def (var))\n+    {\n+      loc = htab_find_slot_with_hash (default_defs, &in, DECL_UID (var), INSERT);\n+      htab_remove_elt (default_defs, *loc);\n+      return;\n+    }\n+  gcc_assert (TREE_CODE (def) == SSA_NAME);\n+  loc = htab_find_slot_with_hash (default_defs, &in, DECL_UID (var), INSERT);\n+  /* Default definition might be changed by tail call optimization.  */\n+  if (!*loc)\n+    {\n+      h = ggc_alloc (sizeof (struct int_tree_map));\n+      h->uid = DECL_UID (var);\n+      h->to = def;\n+      *(struct int_tree_map **)  loc = h;\n+    }\n+   else\n+    {\n+      h = *loc;\n+      h->to = def;\n+    }\n+}\n+\n /* Add VAR to the list of dereferenced variables.\n \n    WALK_STATE contains a hash table used to avoid adding the same"}, {"sha": "7aae23f967c81595105b4494e15629184731c761", "filename": "gcc/tree-flow-inline.h", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86051306a1a4da9a1fb5da12325cac62cd4ca883/gcc%2Ftree-flow-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86051306a1a4da9a1fb5da12325cac62cd4ca883/gcc%2Ftree-flow-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow-inline.h?ref=86051306a1a4da9a1fb5da12325cac62cd4ca883", "patch": "@@ -675,23 +675,6 @@ is_label_stmt (tree t)\n   return false;\n }\n \n-/* Set the default definition for VAR to DEF.  */\n-static inline void\n-set_default_def (tree var, tree def)\n-{\n-  var_ann_t ann = get_var_ann (var);\n-  ann->default_def = def;\n-}\n-\n-/* Return the default definition for variable VAR, or NULL if none\n-   exists.  */\n-static inline tree\n-default_def (tree var)\n-{\n-  var_ann_t ann = var_ann (var);\n-  return ann ? ann->default_def : NULL_TREE;\n-}\n-\n /* PHI nodes should contain only ssa_names and invariants.  A test\n    for ssa_name is definitely simpler; don't let invalid contents\n    slip in in the meantime.  */"}, {"sha": "ab9eab9ef7e2a8e2e4f9ec90cf4f2338b5184af7", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86051306a1a4da9a1fb5da12325cac62cd4ca883/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86051306a1a4da9a1fb5da12325cac62cd4ca883/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=86051306a1a4da9a1fb5da12325cac62cd4ca883", "patch": "@@ -205,12 +205,6 @@ struct var_ann_d GTY(())\n   /* Used by the root-var object in tree-ssa-live.[ch].  */\n   unsigned root_index;\n \n-  /* Default definition for this symbol.  If this field is not NULL, it\n-     means that the first reference to this variable in the function is a\n-     USE or a VUSE.  In those cases, the SSA renamer creates an SSA name\n-     for this variable with an empty defining statement.  */\n-  tree default_def;\n-\n   /* During into-ssa and the dominator optimizer, this field holds the\n      current version of this variable (an SSA_NAME).  */\n   tree current_def;\n@@ -327,8 +321,6 @@ static inline const char *get_filename (tree);\n static inline bool is_exec_stmt (tree);\n static inline bool is_label_stmt (tree);\n static inline bitmap addresses_taken (tree);\n-static inline void set_default_def (tree, tree);\n-static inline tree default_def (tree);\n \n /*---------------------------------------------------------------------------\n                   Structure representing predictions in tree level.\n@@ -396,6 +388,9 @@ typedef struct\n /* Array of all variables referenced in the function.  */\n extern GTY((param_is (struct int_tree_map))) htab_t referenced_vars;\n \n+/* Default defs for undefined symbols. */\n+extern GTY((param_is (struct int_tree_map))) htab_t default_defs;\n+\n extern tree referenced_var_lookup (unsigned int);\n extern tree referenced_var_lookup_if_exists (unsigned int);\n #define num_referenced_vars htab_elements (referenced_vars)\n@@ -560,6 +555,9 @@ extern void mark_new_vars_to_rename (tree);\n extern void find_new_referenced_vars (tree *);\n \n extern tree make_rename_temp (tree, const char *);\n+extern void set_default_def (tree, tree);\n+extern tree default_def (tree);\n+extern tree default_def_fn (struct function *, tree);\n \n /* In tree-phinodes.c  */\n extern void reserve_phi_args_for_new_edge (basic_block);"}, {"sha": "33ce98d7b5607729a8692cd5ff2672b531a07ccd", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86051306a1a4da9a1fb5da12325cac62cd4ca883/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86051306a1a4da9a1fb5da12325cac62cd4ca883/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=86051306a1a4da9a1fb5da12325cac62cd4ca883", "patch": "@@ -801,6 +801,7 @@ init_tree_ssa (void)\n {\n   referenced_vars = htab_create_ggc (20, int_tree_map_hash, \n \t\t\t\t     int_tree_map_eq, NULL);\n+  default_defs = htab_create_ggc (20, int_tree_map_hash, int_tree_map_eq, NULL);\n   call_clobbered_vars = BITMAP_ALLOC (NULL);\n   addressable_vars = BITMAP_ALLOC (NULL);\n   init_alias_heapvars ();\n@@ -862,6 +863,8 @@ delete_tree_ssa (void)\n   fini_phinodes ();\n \n   global_var = NULL_TREE;\n+  \n+  htab_delete (default_defs);\n   BITMAP_FREE (call_clobbered_vars);\n   call_clobbered_vars = NULL;\n   BITMAP_FREE (addressable_vars);"}]}