{"sha": "db6734819f777dbbf9eea464baa7fc60a953dc8a", "node_id": "C_kwDOANBUbNoAKGRiNjczNDgxOWY3NzdkYmJmOWVlYTQ2NGJhYTdmYzYwYTk1M2RjOGE", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-03-02T16:28:14Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-19T14:05:33Z"}, "message": "[Ada] Fix internal error on unchecked union with component clauses (2)\n\nThe issue arises when the unchecked union contains both a fixed part and\na variant part, and is subject to a full representation clause covering\nall the components in all the variants, when the component clauses do not\nalign the variant boundaries with byte boundaries consistently.\n\ngcc/ada/\n\n\t* gcc-interface/decl.cc (components_to_record): Use NULL recursively\n\tas P_GNU_REP_LIST for the innermost variant level in the unchecked\n\tunion case with a fixed part.", "tree": {"sha": "86bc2e08f6b64f3920bfbc5723b0474e93705a54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86bc2e08f6b64f3920bfbc5723b0474e93705a54"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db6734819f777dbbf9eea464baa7fc60a953dc8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db6734819f777dbbf9eea464baa7fc60a953dc8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db6734819f777dbbf9eea464baa7fc60a953dc8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db6734819f777dbbf9eea464baa7fc60a953dc8a/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b64c4968c7f3eb4c5ac0c56e6f11b10419dacd0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b64c4968c7f3eb4c5ac0c56e6f11b10419dacd0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b64c4968c7f3eb4c5ac0c56e6f11b10419dacd0c"}], "stats": {"total": 29, "additions": 23, "deletions": 6}, "files": [{"sha": "af6475e7307221f879d90aa1405f753ac0baa0f7", "filename": "gcc/ada/gcc-interface/decl.cc", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db6734819f777dbbf9eea464baa7fc60a953dc8a/gcc%2Fada%2Fgcc-interface%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db6734819f777dbbf9eea464baa7fc60a953dc8a/gcc%2Fada%2Fgcc-interface%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.cc?ref=db6734819f777dbbf9eea464baa7fc60a953dc8a", "patch": "@@ -7981,6 +7981,7 @@ components_to_record (Node_Id gnat_component_list, Entity_Id gnat_record_type,\n       tree gnu_union_type;\n       tree this_first_free_pos, gnu_variant_list = NULL_TREE;\n       bool union_field_needs_strict_alignment = false;\n+      bool innermost_variant_level = true;\n       auto_vec <vinfo_t, 16> variant_types;\n       vinfo_t *gnu_variant;\n       unsigned int variants_align = 0;\n@@ -8026,6 +8027,19 @@ components_to_record (Node_Id gnat_component_list, Entity_Id gnat_record_type,\n \t      }\n \t}\n \n+      /* For an unchecked union with a fixed part, we need to compute whether\n+\t we are at the innermost level of the variant part.  */\n+      if (unchecked_union && gnu_field_list)\n+\tfor (variant = First_Non_Pragma (Variants (gnat_variant_part));\n+\t     Present (variant);\n+\t     variant = Next_Non_Pragma (variant))\n+\t  if (Present (Component_List (variant))\n+\t      && Present (Variant_Part (Component_List (variant))))\n+\t    {\n+\t      innermost_variant_level = false;\n+\t      break;\n+\t    }\n+\n       /* We build the variants in two passes.  The bulk of the work is done in\n \t the first pass, that is to say translating the GNAT nodes, building\n \t the container types and computing the associated properties.  However\n@@ -8066,19 +8080,22 @@ components_to_record (Node_Id gnat_component_list, Entity_Id gnat_record_type,\n \n \t  /* Add the fields into the record type for the variant but note that\n \t     we aren't sure to really use it at this point, see below.  In the\n-\t     case of an unchecked union, we force the fields with a rep clause\n-\t     present in a nested variant to be moved to the outermost variant,\n-\t     so as to flatten the rep-ed layout as much as possible, the reason\n-\t     being that we cannot do any flattening when a subtype statically\n-\t     selects a variant later on, for example for an aggregate.  */\n+\t     case of an unchecked union with a fixed part, we force the fields\n+\t     with a rep clause present in the innermost variant to be moved to\n+\t     the outer variant, so as to flatten the rep-ed layout as much as\n+\t     possible, the reason being that we cannot do any flattening when\n+\t     a subtype statically selects a variant later on, for example for\n+\t     an aggregate.  */\n \t  has_rep\n \t    = components_to_record (Component_List (variant), gnat_record_type,\n \t\t\t\t    NULL_TREE, gnu_variant_type, packed,\n \t\t\t\t    definition, !all_rep_and_size, all_rep,\n \t\t\t\t    unchecked_union, true, needs_xv_encodings,\n \t\t\t\t    true, this_first_free_pos,\n \t\t\t\t    (all_rep || this_first_free_pos)\n-\t\t\t\t    && !(in_variant && unchecked_union)\n+\t\t\t\t    && !(unchecked_union\n+\t\t\t\t         && gnu_field_list\n+\t\t\t\t\t && innermost_variant_level)\n \t\t\t\t    ? NULL : &gnu_rep_list);\n \n \t  /* Translate the qualifier and annotate the GNAT node.  */"}]}