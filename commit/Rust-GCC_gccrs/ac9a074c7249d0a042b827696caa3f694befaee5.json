{"sha": "ac9a074c7249d0a042b827696caa3f694befaee5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWM5YTA3NGM3MjQ5ZDBhMDQyYjgyNzY5NmNhYTNmNjk0YmVmYWVlNQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-04-16T13:21:30Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-04-16T13:21:30Z"}, "message": "re PR c/52977 (internal compiler error: Segmentation fault with `-x c-header' or `-x cxx-header' option)\n\n2012-04-16  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/52977\n\t* tree.h (VECTOR_CST_NELTS): Adjust.\n\t(struct tree_vector): Add explicit length field.\n\t(make_vector_stat): Declare.\n\t(make_vector): Define.\n\t* tree.c (make_vector_stat): New function.\n\t(build_vector_stat): Use it.\n\t* tree-streamer-in.c (streamer_alloc_tree): Likewise.\n\nFrom-SVN: r186494", "tree": {"sha": "067d3bace4ca7e9ad5771e700d5b82b337858715", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/067d3bace4ca7e9ad5771e700d5b82b337858715"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac9a074c7249d0a042b827696caa3f694befaee5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac9a074c7249d0a042b827696caa3f694befaee5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac9a074c7249d0a042b827696caa3f694befaee5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac9a074c7249d0a042b827696caa3f694befaee5/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fba621209f542447474d7e1b5d33ba21df14f04d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fba621209f542447474d7e1b5d33ba21df14f04d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fba621209f542447474d7e1b5d33ba21df14f04d"}], "stats": {"total": 53, "additions": 37, "deletions": 16}, "files": [{"sha": "11341910cc095cb10b7d4bcb4c27d410f8fe85c4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac9a074c7249d0a042b827696caa3f694befaee5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac9a074c7249d0a042b827696caa3f694befaee5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ac9a074c7249d0a042b827696caa3f694befaee5", "patch": "@@ -1,3 +1,14 @@\n+2012-04-16  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/52977\n+\t* tree.h (VECTOR_CST_NELTS): Adjust.\n+\t(struct tree_vector): Add explicit length field.\n+\t(make_vector_stat): Declare.\n+\t(make_vector): Define.\n+\t* tree.c (make_vector_stat): New function.\n+\t(build_vector_stat): Use it.\n+\t* tree-streamer-in.c (streamer_alloc_tree): Likewise.\n+\n 2012-04-16  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \tPR tree-optimization/52976"}, {"sha": "a38fb470b1f88a4d2a70e9cc43976188e96a24b7", "filename": "gcc/tree-streamer-in.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac9a074c7249d0a042b827696caa3f694befaee5/gcc%2Ftree-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac9a074c7249d0a042b827696caa3f694befaee5/gcc%2Ftree-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-in.c?ref=ac9a074c7249d0a042b827696caa3f694befaee5", "patch": "@@ -476,10 +476,7 @@ streamer_alloc_tree (struct lto_input_block *ib, struct data_in *data_in,\n   else if (CODE_CONTAINS_STRUCT (code, TS_VECTOR))\n     {\n       HOST_WIDE_INT len = streamer_read_hwi (ib);\n-      result = ggc_alloc_zone_cleared_tree_node ((len - 1) * sizeof (tree)\n-\t\t\t\t\t\t + sizeof (struct tree_vector),\n-\t\t\t\t\t\t &tree_zone);\n-      TREE_SET_CODE (result, VECTOR_CST);\n+      result = make_vector (len);\n     }\n   else if (CODE_CONTAINS_STRUCT (code, TS_BINFO))\n     {"}, {"sha": "7a71c245480d8955cdd734c2b5d5b84e017b5331", "filename": "gcc/tree.c", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac9a074c7249d0a042b827696caa3f694befaee5/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac9a074c7249d0a042b827696caa3f694befaee5/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=ac9a074c7249d0a042b827696caa3f694befaee5", "patch": "@@ -1315,6 +1315,25 @@ cst_and_fits_in_hwi (const_tree x)\n \t  || TREE_INT_CST_HIGH (x) == -1);\n }\n \n+/* Build a newly constructed TREE_VEC node of length LEN.  */\n+\n+tree\n+make_vector_stat (unsigned len MEM_STAT_DECL)\n+{\n+  tree t;\n+  unsigned length = (len - 1) * sizeof (tree) + sizeof (struct tree_vector);\n+\n+  record_node_allocation_statistics (VECTOR_CST, length);\n+\n+  t = ggc_alloc_zone_cleared_tree_node_stat (&tree_zone, length PASS_MEM_STAT);\n+\n+  TREE_SET_CODE (t, VECTOR_CST);\n+  TREE_CONSTANT (t) = 1;\n+  VECTOR_CST_NELTS (t) = len;\n+\n+  return t;\n+}\n+\n /* Return a new VECTOR_CST node whose type is TYPE and whose values\n    are in a list pointed to by VALS.  */\n \n@@ -1323,16 +1342,7 @@ build_vector_stat (tree type, tree *vals MEM_STAT_DECL)\n {\n   int over = 0;\n   unsigned cnt = 0;\n-  tree v;\n-  int length = ((TYPE_VECTOR_SUBPARTS (type) - 1) * sizeof (tree)\n-\t\t+ sizeof (struct tree_vector));\n-\n-  record_node_allocation_statistics (VECTOR_CST, length);\n-\n-  v = ggc_alloc_zone_cleared_tree_node_stat (&tree_zone, length PASS_MEM_STAT);\n-\n-  TREE_SET_CODE (v, VECTOR_CST);\n-  TREE_CONSTANT (v) = 1;\n+  tree v = make_vector (TYPE_VECTOR_SUBPARTS (type));\n   TREE_TYPE (v) = type;\n \n   /* Iterate through elements and check for overflow.  */"}, {"sha": "e8bd8589cbb8f9d643f4125696658fca8c3a4f78", "filename": "gcc/tree.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac9a074c7249d0a042b827696caa3f694befaee5/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac9a074c7249d0a042b827696caa3f694befaee5/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=ac9a074c7249d0a042b827696caa3f694befaee5", "patch": "@@ -1534,13 +1534,14 @@ struct GTY(()) tree_complex {\n };\n \n /* In a VECTOR_CST node.  */\n-#define VECTOR_CST_NELTS(NODE) (TYPE_VECTOR_SUBPARTS (TREE_TYPE (NODE)))\n+#define VECTOR_CST_NELTS(NODE) (VECTOR_CST_CHECK (NODE)->vector.length)\n #define VECTOR_CST_ELTS(NODE) (VECTOR_CST_CHECK (NODE)->vector.elts)\n #define VECTOR_CST_ELT(NODE,IDX) (VECTOR_CST_CHECK (NODE)->vector.elts[IDX])\n \n struct GTY(()) tree_vector {\n   struct tree_typed typed;\n-  tree GTY ((length (\"TYPE_VECTOR_SUBPARTS (TREE_TYPE ((tree)&%h))\"))) elts[1];\n+  unsigned length;\n+  tree GTY ((length (\"%h.length\"))) elts[1];\n };\n \f\n #include \"symtab.h\"\n@@ -4341,6 +4342,8 @@ build_int_cstu (tree type, unsigned HOST_WIDE_INT cst)\n extern tree build_int_cst (tree, HOST_WIDE_INT);\n extern tree build_int_cst_type (tree, HOST_WIDE_INT);\n extern tree build_int_cst_wide (tree, unsigned HOST_WIDE_INT, HOST_WIDE_INT);\n+extern tree make_vector_stat (unsigned MEM_STAT_DECL);\n+#define make_vector(n) make_vector_stat (n MEM_STAT_INFO)\n extern tree build_vector_stat (tree, tree * MEM_STAT_DECL);\n #define build_vector(t,v) build_vector_stat (t, v MEM_STAT_INFO)\n extern tree build_vector_from_ctor (tree, VEC(constructor_elt,gc) *);"}]}