{"sha": "c0a465457beb663430257375ba529af74b0e4e56", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzBhNDY1NDU3YmViNjYzNDMwMjU3Mzc1YmE1MjlhZjc0YjBlNGU1Ng==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2018-01-12T14:48:53Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-01-12T14:48:53Z"}, "message": "Handle polynomial DR_INIT\n\nThe idea with the main 107-patch poly_int series (latterly 109-patch)\nwas to change the mode sizes and vector element counts to poly_int and\nthen propagate those changes as far as they needed to go to fix build\nfailures from incompatible types.  This means that DR_INIT is now\nconstructed as a poly_int64:\n\n  poly_int64 pbytepos;\n  if (!multiple_p (pbitpos, BITS_PER_UNIT, &pbytepos))\n    {\n      if (dump_file && (dump_flags & TDF_DETAILS))\n\tfprintf (dump_file, \"failed: bit offset alignment.\\n\");\n      return false;\n    }\n  [...]\n  init = ssize_int (pbytepos);\n\nThis patch adjusts other references to DR_INIT accordingly.  Unlike\nthe above, the adjustments weren't needed to avoid a build-time type\nincompatibility, but they are needed to make the producer and consumers\nof DR_INIT logically consistent.\n\n2018-01-12  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/\n\t* tree-predcom.c (aff_combination_dr_offset): Use wi::to_poly_widest\n\trather than wi::to_widest for DR_INITs.\n\t* tree-vect-data-refs.c (vect_find_same_alignment_drs): Use\n\twi::to_poly_offset rather than wi::to_offset for DR_INIT.\n\t(vect_analyze_data_ref_accesses): Require both DR_INITs to be\n\tINTEGER_CSTs.\n\t(vect_analyze_group_access_1): Note that here.\n\nFrom-SVN: r256587", "tree": {"sha": "3a74cf9aad5bf2c03e60cea943ae51f379a4cefd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a74cf9aad5bf2c03e60cea943ae51f379a4cefd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0a465457beb663430257375ba529af74b0e4e56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0a465457beb663430257375ba529af74b0e4e56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0a465457beb663430257375ba529af74b0e4e56", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0a465457beb663430257375ba529af74b0e4e56/comments", "author": null, "committer": null, "parents": [{"sha": "cf736b092afeabe90680443794eb384a9f930cd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf736b092afeabe90680443794eb384a9f930cd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf736b092afeabe90680443794eb384a9f930cd5"}], "stats": {"total": 26, "additions": 21, "deletions": 5}, "files": [{"sha": "752c77731e21abd91df22083d18f75ced3d9811b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0a465457beb663430257375ba529af74b0e4e56/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0a465457beb663430257375ba529af74b0e4e56/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c0a465457beb663430257375ba529af74b0e4e56", "patch": "@@ -1,3 +1,13 @@\n+2018-01-12  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* tree-predcom.c (aff_combination_dr_offset): Use wi::to_poly_widest\n+\trather than wi::to_widest for DR_INITs.\n+\t* tree-vect-data-refs.c (vect_find_same_alignment_drs): Use\n+\twi::to_poly_offset rather than wi::to_offset for DR_INIT.\n+\t(vect_analyze_data_ref_accesses): Require both DR_INITs to be\n+\tINTEGER_CSTs.\n+\t(vect_analyze_group_access_1): Note that here.\n+\n 2018-01-12  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* tree-vectorizer.c (get_vec_alignment_for_array_type): Handle"}, {"sha": "2bde732f8ad8dd0a142f71bfcdec214a79897c5f", "filename": "gcc/tree-predcom.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0a465457beb663430257375ba529af74b0e4e56/gcc%2Ftree-predcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0a465457beb663430257375ba529af74b0e4e56/gcc%2Ftree-predcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-predcom.c?ref=c0a465457beb663430257375ba529af74b0e4e56", "patch": "@@ -680,7 +680,7 @@ aff_combination_dr_offset (struct data_reference *dr, aff_tree *offset)\n \n   tree_to_aff_combination_expand (DR_OFFSET (dr), type, offset,\n \t\t\t\t  &name_expansions);\n-  aff_combination_const (&delta, type, wi::to_widest (DR_INIT (dr)));\n+  aff_combination_const (&delta, type, wi::to_poly_widest (DR_INIT (dr)));\n   aff_combination_add (offset, &delta);\n }\n "}, {"sha": "eb82594259807060c3f20483c3a3171c940b3533", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0a465457beb663430257375ba529af74b0e4e56/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0a465457beb663430257375ba529af74b0e4e56/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=c0a465457beb663430257375ba529af74b0e4e56", "patch": "@@ -2227,9 +2227,9 @@ vect_find_same_alignment_drs (struct data_dependence_relation *ddr)\n     return;\n \n   /* Two references with distance zero have the same alignment.  */\n-  offset_int diff = (wi::to_offset (DR_INIT (dra))\n-\t\t     - wi::to_offset (DR_INIT (drb)));\n-  if (diff != 0)\n+  poly_offset_int diff = (wi::to_poly_offset (DR_INIT (dra))\n+\t\t\t  - wi::to_poly_offset (DR_INIT (drb)));\n+  if (maybe_ne (diff, 0))\n     {\n       /* Get the wider of the two alignments.  */\n       unsigned int align_a = (vect_calculate_target_alignment (dra)\n@@ -2239,7 +2239,7 @@ vect_find_same_alignment_drs (struct data_dependence_relation *ddr)\n       unsigned int max_align = MAX (align_a, align_b);\n \n       /* Require the gap to be a multiple of the larger vector alignment.  */\n-      if (!wi::multiple_of_p (diff, max_align, SIGNED))\n+      if (!multiple_p (diff, max_align))\n \treturn;\n     }\n \n@@ -2475,6 +2475,7 @@ vect_analyze_group_access_1 (struct data_reference *dr)\n       gimple *prev = stmt;\n       HOST_WIDE_INT diff, gaps = 0;\n \n+      /* By construction, all group members have INTEGER_CST DR_INITs.  */\n       while (next)\n         {\n           /* Skip same data-refs.  In case that two or more stmts share\n@@ -2864,6 +2865,11 @@ vect_analyze_data_ref_accesses (vec_info *vinfo)\n \t\t\t\t   TREE_TYPE (DR_REF (drb))))\n \t    break;\n \n+\t  /* Check that the DR_INITs are compile-time constants.  */\n+\t  if (TREE_CODE (DR_INIT (dra)) != INTEGER_CST\n+\t      || TREE_CODE (DR_INIT (drb)) != INTEGER_CST)\n+\t    break;\n+\n \t  /* Sorting has ensured that DR_INIT (dra) <= DR_INIT (drb).  */\n \t  HOST_WIDE_INT init_a = TREE_INT_CST_LOW (DR_INIT (dra));\n \t  HOST_WIDE_INT init_b = TREE_INT_CST_LOW (DR_INIT (drb));"}]}