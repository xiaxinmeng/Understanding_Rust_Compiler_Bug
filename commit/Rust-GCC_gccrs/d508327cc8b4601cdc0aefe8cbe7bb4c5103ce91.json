{"sha": "d508327cc8b4601cdc0aefe8cbe7bb4c5103ce91", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDUwODMyN2NjOGI0NjAxY2RjMGFlZmU4Y2JlN2JiNGM1MTAzY2U5MQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-08-03T21:11:13Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-08-03T21:11:13Z"}, "message": "stl_queue.h: Trivial formatting fixes.\n\n2006-08-03  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/stl_queue.h: Trivial formatting fixes.\n\t* include/bits/stl_stack.h: Likewise.\n\nFrom-SVN: r115911", "tree": {"sha": "3f9094137d568b2e98fa92bdaeefc3ef031b3346", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f9094137d568b2e98fa92bdaeefc3ef031b3346"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d508327cc8b4601cdc0aefe8cbe7bb4c5103ce91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d508327cc8b4601cdc0aefe8cbe7bb4c5103ce91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d508327cc8b4601cdc0aefe8cbe7bb4c5103ce91", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d508327cc8b4601cdc0aefe8cbe7bb4c5103ce91/comments", "author": null, "committer": null, "parents": [{"sha": "0be79f24f8534db6eac81a35a94260d6a6f13eea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0be79f24f8534db6eac81a35a94260d6a6f13eea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0be79f24f8534db6eac81a35a94260d6a6f13eea"}], "stats": {"total": 57, "additions": 31, "deletions": 26}, "files": [{"sha": "5424e5717e4971e98341baf5e6a4515f062c194d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d508327cc8b4601cdc0aefe8cbe7bb4c5103ce91/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d508327cc8b4601cdc0aefe8cbe7bb4c5103ce91/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d508327cc8b4601cdc0aefe8cbe7bb4c5103ce91", "patch": "@@ -1,3 +1,8 @@\n+2006-08-03  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/stl_queue.h: Trivial formatting fixes.\n+\t* include/bits/stl_stack.h: Likewise.\n+\n 2006-08-01  Ed Smith-Rowland  <3dw4rd@verizon.net>\n \n \t* docs/html/ext/tr1.html: Update."}, {"sha": "e2cd0d5d20871a1f61b709dc7806223b21f79a02", "filename": "libstdc++-v3/include/bits/stl_queue.h", "status": "modified", "additions": 21, "deletions": 22, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d508327cc8b4601cdc0aefe8cbe7bb4c5103ce91/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d508327cc8b4601cdc0aefe8cbe7bb4c5103ce91/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h?ref=d508327cc8b4601cdc0aefe8cbe7bb4c5103ce91", "patch": "@@ -1,6 +1,6 @@\n // Queue implementation -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -73,11 +73,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   template<typename _Tp, typename _Seq>\n     inline bool\n-    operator==(const queue<_Tp,_Seq>&, const queue<_Tp,_Seq>&);\n+    operator==(const queue<_Tp, _Seq>&, const queue<_Tp, _Seq>&);\n \n   template<typename _Tp, typename _Seq>\n     inline bool\n-    operator<(const queue<_Tp,_Seq>&, const queue<_Tp,_Seq>&);\n+    operator<(const queue<_Tp, _Seq>&, const queue<_Tp, _Seq>&);\n \n   /**\n    *  @brief  A standard container giving FIFO behavior.\n@@ -246,10 +246,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  linear in the size of the sequences, and queues are considered equivalent\n    *  if their sequences compare equal.\n   */\n-  template<typename _Tp, typename _Sequence>\n+  template<typename _Tp, typename _Seq>\n     inline bool\n-    operator==(const queue<_Tp,_Sequence>& __x,\n-\t       const queue<_Tp,_Sequence>& __y)\n+    operator==(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)\n     { return __x.c == __y.c; }\n \n   /**\n@@ -265,36 +264,33 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  std::lexicographical_compare() is usually used to make the\n    *  determination.\n   */\n-  template<typename _Tp, typename _Sequence>\n+  template<typename _Tp, typename _Seq>\n     inline bool\n-    operator<(const queue<_Tp,_Sequence>& __x, const queue<_Tp,_Sequence>& __y)\n+    operator<(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)\n     { return __x.c < __y.c; }\n \n   /// Based on operator==\n-  template<typename _Tp, typename _Sequence>\n+  template<typename _Tp, typename _Seq>\n     inline bool\n-    operator!=(const queue<_Tp,_Sequence>& __x,\n-\t       const queue<_Tp,_Sequence>& __y)\n+    operator!=(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)\n     { return !(__x == __y); }\n \n   /// Based on operator<\n-  template<typename _Tp, typename _Sequence>\n+  template<typename _Tp, typename _Seq>\n     inline bool\n-    operator>(const queue<_Tp,_Sequence>& __x, const queue<_Tp,_Sequence>& __y)\n+    operator>(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)\n     { return __y < __x; }\n \n   /// Based on operator<\n-  template<typename _Tp, typename _Sequence>\n+  template<typename _Tp, typename _Seq>\n     inline bool\n-    operator<=(const queue<_Tp,_Sequence>& __x,\n-\t       const queue<_Tp,_Sequence>& __y)\n+    operator<=(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)\n     { return !(__y < __x); }\n \n   /// Based on operator<\n-  template<typename _Tp, typename _Sequence>\n+  template<typename _Tp, typename _Seq>\n     inline bool\n-    operator>=(const queue<_Tp,_Sequence>& __x,\n-\t       const queue<_Tp,_Sequence>& __y)\n+    operator>=(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)\n     { return !(__x < __y); }\n \n   /**\n@@ -343,7 +339,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       __glibcxx_class_requires(_Sequence, _SequenceConcept)\n       __glibcxx_class_requires(_Sequence, _RandomAccessContainerConcept)\n       __glibcxx_class_requires2(_Tp, _Sequence_value_type, _SameTypeConcept)\n-      __glibcxx_class_requires4(_Compare, bool, _Tp,_Tp,_BinaryFunctionConcept)\n+      __glibcxx_class_requires4(_Compare, bool, _Tp, _Tp,\n+\t\t\t\t_BinaryFunctionConcept)\n \n     public:\n       typedef typename _Sequence::value_type                value_type;\n@@ -397,11 +394,13 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  Returns true if the %queue is empty.\n        */\n       bool\n-      empty() const { return c.empty(); }\n+      empty() const\n+      { return c.empty(); }\n \n       /**  Returns the number of elements in the %queue.  */\n       size_type\n-      size() const { return c.size(); }\n+      size() const\n+      { return c.size(); }\n \n       /**\n        *  Returns a read-only (constant) reference to the data at the first"}, {"sha": "a6b5533f563614098b214aeccc0d282d743af8e8", "filename": "libstdc++-v3/include/bits/stl_stack.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d508327cc8b4601cdc0aefe8cbe7bb4c5103ce91/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d508327cc8b4601cdc0aefe8cbe7bb4c5103ce91/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h?ref=d508327cc8b4601cdc0aefe8cbe7bb4c5103ce91", "patch": "@@ -1,6 +1,7 @@\n // Stack implementation -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -73,11 +74,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   template<typename _Tp, typename _Seq>\n     inline bool\n-    operator==(const stack<_Tp,_Seq>& __x, const stack<_Tp,_Seq>& __y);\n+    operator==(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y);\n \n   template<typename _Tp, typename _Seq>\n     inline bool\n-    operator<(const stack<_Tp,_Seq>& __x, const stack<_Tp,_Seq>& __y);\n+    operator<(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y);\n \n   /**\n    *  @brief  A standard container giving FILO behavior.\n@@ -141,7 +142,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        */\n       explicit\n       stack(const _Sequence& __c = _Sequence())\n-      : c(__c) {}\n+      : c(__c) { }\n \n       /**\n        *  Returns true if the %stack is empty."}]}