{"sha": "fff6a306aee2145d44a8c252df82ec4891344a0f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmZmNmEzMDZhZWUyMTQ1ZDQ0YThjMjUyZGY4MmVjNDg5MTM0NGEwZg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-11-18T09:54:02Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-11-18T09:54:02Z"}, "message": "re PR tree-optimization/51118 (ICE: tree check: expected tree that contains \u2018typed\u2019 structure, have \u2018block\u2019 in fold_checksum_tree, at fold-const.c:14160)\n\n\tPR tree-optimization/51118\n\t* fold-const.c (fold_checksum_tree): Check for TS_TYPED structure\n\tbefore using TREE_TYPE accessor on expr.\n\nFrom-SVN: r181468", "tree": {"sha": "a1543a95253440faf21b7d14a33454e28da0c4c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1543a95253440faf21b7d14a33454e28da0c4c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fff6a306aee2145d44a8c252df82ec4891344a0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fff6a306aee2145d44a8c252df82ec4891344a0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fff6a306aee2145d44a8c252df82ec4891344a0f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fff6a306aee2145d44a8c252df82ec4891344a0f/comments", "author": null, "committer": null, "parents": [{"sha": "f11656db095c4245faa0b4e61c6039dbbd35e332", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f11656db095c4245faa0b4e61c6039dbbd35e332", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f11656db095c4245faa0b4e61c6039dbbd35e332"}], "stats": {"total": 39, "additions": 25, "deletions": 14}, "files": [{"sha": "157e9f4396018239f99f50bc42a309dcbb052d8b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fff6a306aee2145d44a8c252df82ec4891344a0f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fff6a306aee2145d44a8c252df82ec4891344a0f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fff6a306aee2145d44a8c252df82ec4891344a0f", "patch": "@@ -1,19 +1,29 @@\n+2011-11-18  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR tree-optimization/51118\n+\t* fold-const.c (fold_checksum_tree): Check for TS_TYPED structure\n+\tbefore using TREE_TYPE accessor on expr.\n+\n 2011-11-17  Jan Hubicka  <jh@suse.cz>\n \n \tPR bootstrap/51134\n \t* i386.c (atom_cost): Fix 32bit memset description.\n-\t(expand_set_or_movmem_via_loop_with_iter): Output proper bounds check for epilogue loops.\n-\t(expand_movmem_epilogue): Handle epilogues up to size 15 w/o producing byte loop.\n-\t(decide_alg): sse_loop is not useable wthen SSE2 is disabled; when not optimizing always\n-\tuse rep movsb or lincall; do not produce word sized loops when optimizing memset for\n-\tsize (to avoid need for large constants).\n-\t(ix86_expand_movmem): Get into sync with ix86_expand_setmem; choose unroll factors\n-\tbetter; always do 128bit moves when producing SSE loops; do not produce loopy epilogue\n-\twhen size is too small.\n-\t(promote_duplicated_reg_to_size): Do not look into desired alignments when\n-\tdoing vector expansion.\n-\t(ix86_expand_setmem): Track better when promoted value is available; choose unroll factors\n-\tmore sanely.; output loopy epilogue only when needed.\n+\t(expand_set_or_movmem_via_loop_with_iter): Output proper bounds check\n+\tfor epilogue loops.\n+\t(expand_movmem_epilogue): Handle epilogues up to size 15 w/o producing\n+\tbyte loop.\n+\t(decide_alg): sse_loop is not useable wthen SSE2 is disabled;\n+\twhen not optimizing always use rep movsb or lincall; do not produce\n+\tword sized loops when optimizing memset for size (to avoid need\n+\tfor large constants).\n+\t(ix86_expand_movmem): Get into sync with ix86_expand_setmem;\n+\tchoose unroll factors better; always do 128bit moves when producing\n+\tSSE loops; do not produce loopy epilogue when size is too small.\n+\t(promote_duplicated_reg_to_size): Do not look into desired alignments\n+\twhen doing vector expansion.\n+\t(ix86_expand_setmem): Track better when promoted value is available;\n+\tchoose unroll factors more sanely. Output loopy epilogue only\n+\twhen needed.\n \n 2011-11-17  Steve Ellcey  <sje@cup.hp.com>\n \n@@ -28,7 +38,7 @@\n \n 2011-11-17  Andrew MacLeod  <amacleod@redhat.com>\n \n-\t* builtins.c (expand_builtin): Remove 4th parameter representing \n+\t* builtins.c (expand_builtin): Remove 4th parameter representing\n \tweak/strong mode when __atomic_compare_exchange becomes a library call.\n \n 2011-11-17  Richard Henderson  <rth@redhat.com>"}, {"sha": "e590377265e4d5f3f037fc93e8ca2e1d438f735a", "filename": "gcc/fold-const.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fff6a306aee2145d44a8c252df82ec4891344a0f/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fff6a306aee2145d44a8c252df82ec4891344a0f/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=fff6a306aee2145d44a8c252df82ec4891344a0f", "patch": "@@ -14157,7 +14157,8 @@ fold_checksum_tree (const_tree expr, struct md5_ctx *ctx, htab_t ht)\n \t}\n     }\n   md5_process_bytes (expr, tree_size (expr), ctx);\n-  fold_checksum_tree (TREE_TYPE (expr), ctx, ht);\n+  if (CODE_CONTAINS_STRUCT (code, TS_TYPED))\n+    fold_checksum_tree (TREE_TYPE (expr), ctx, ht);\n   if (TREE_CODE_CLASS (code) != tcc_type\n       && TREE_CODE_CLASS (code) != tcc_declaration\n       && code != TREE_LIST"}]}