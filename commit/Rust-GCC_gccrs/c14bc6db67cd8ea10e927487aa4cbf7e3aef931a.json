{"sha": "c14bc6db67cd8ea10e927487aa4cbf7e3aef931a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE0YmM2ZGI2N2NkOGVhMTBlOTI3NDg3YWE0Y2JmN2UzYWVmOTMxYQ==", "commit": {"author": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2002-12-28T10:51:18Z"}, "committer": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2002-12-28T10:51:18Z"}, "message": "c-parse.in (yyprint): Use HOST_WIDE_INT_PRINT_DOUBLE_HEX for correct format.\n\n\t* c-parse.in (yyprint): Use HOST_WIDE_INT_PRINT_DOUBLE_HEX for\n\tcorrect format.\n\nFrom-SVN: r60570", "tree": {"sha": "ae195d26b462225c33fed6ef9994fae4cc2319dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae195d26b462225c33fed6ef9994fae4cc2319dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c14bc6db67cd8ea10e927487aa4cbf7e3aef931a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c14bc6db67cd8ea10e927487aa4cbf7e3aef931a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c14bc6db67cd8ea10e927487aa4cbf7e3aef931a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c14bc6db67cd8ea10e927487aa4cbf7e3aef931a/comments", "author": null, "committer": null, "parents": [{"sha": "53fbfb580b16fa56065e344fa8b6bf7ee5909496", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53fbfb580b16fa56065e344fa8b6bf7ee5909496", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53fbfb580b16fa56065e344fa8b6bf7ee5909496"}], "stats": {"total": 55, "additions": 23, "deletions": 32}, "files": [{"sha": "2d3e3be2c981bf28720c2a0398287452f81b847f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14bc6db67cd8ea10e927487aa4cbf7e3aef931a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14bc6db67cd8ea10e927487aa4cbf7e3aef931a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c14bc6db67cd8ea10e927487aa4cbf7e3aef931a", "patch": "@@ -1,3 +1,8 @@\n+2002-12-28  Andreas Jaeger  <aj@suse.de>\n+\n+\t* c-parse.in (yyprint): Use HOST_WIDE_INT_PRINT_DOUBLE_HEX for\n+\tcorrect format.\n+\n 2002-12-27  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/h8300/h8300.md (*iorhi_shift_8): Change the name to\n@@ -50,7 +55,7 @@\n \n 2002-12-26  Andreas Schwab  <schwab@suse.de>\n \n-\t* config.gcc (powerpc*-*-*, rs6000-*-*): Fix assignment syntax. \n+\t* config.gcc (powerpc*-*-*, rs6000-*-*): Fix assignment syntax.\n \n 2002-12-25  David Edelsohn  <edelsohn@gnu.org>\n \n@@ -314,7 +319,7 @@ Sun Dec 22 18:23:44 CET 2002  Jan Hubicka  <jh@suse.cz>\n \t* config/alpha/alpha.h (MASK_SMALL_TEXT, TARGET_SMALL_TEXT): New.\n \t(TARGET_SWITCHES): Add -msmall-text and -mlarge-text.\n \t(PREDICATE_CODES): Update.\n-\t* config/alpha/alpha.md (call patterns): Update for \n+\t* config/alpha/alpha.md (call patterns): Update for\n \tsamegp_function_operand rename; use !samegp reloc if\n \tTARGET_EXPLICIT_RELOCS.\n \t* doc/invoke.text: Document -msmall-text and -mlarge-text.\n@@ -343,12 +348,12 @@ Sun Dec 22 18:23:44 CET 2002  Jan Hubicka  <jh@suse.cz>\n         * config/ns32k/NOTES: New file.\n \n 2002-12-20  Hartmut Penner  <hpenner@de.ibm.com>\n-\t\n-       \t* doc/invoke.texi: Document -mzarch, -mesa, -mcpu= and -march=\n+\n+\t* doc/invoke.texi: Document -mzarch, -mesa, -mcpu= and -march=\n \toption for S/390 and zSeries.\n         * config/s390/s390.c (s390_cpu, s390_cpu_string, s390_arch,\n         s390_arch_string): New variables.\n-        (override_options): Checking for options and setting of \n+        (override_options): Checking for options and setting of\n \tappropriate target_flags, cpu and arch flags.\n         * config/s390/s390.h: (processor_type): New enum.\n         (TARGET_SWITCHES): New switches -mesa/zarch.\n@@ -452,7 +457,7 @@ Thu Dec 19 23:44:09 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n \n 2002-12-19  Nathanael Nerode  <neroden@gcc.gnu.org>\n \n-\t* configure.in: FORBUILD when build!=host changed from \n+\t* configure.in: FORBUILD when build!=host changed from\n \t../$build-alias to ../build-$build_alias to match change made\n \tin top directory.\n \t* configure: Regenerated.\n@@ -468,7 +473,7 @@ Thu Dec 19 23:44:09 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n \t.CPP extension as C++ source files\n \t* cp/lang-spec.h: Same\n \t* doc/invoke.texi:  Add documentation for .CPP support.\n-\t\n+\n 2002-12-19  Aldy Hernandez  <aldyh@redhat.com>\n \n \tPR 8553\n@@ -2294,7 +2299,7 @@ Wed Nov 20 19:07:17 CET 2002  Jan Hubicka  <jh@suse.cz>\n \t(ggc_realloc): Update valgrind annotations.\n \t* ggc-page.c [!ENABLE_VALGRIND_CHECKING] (VALGRIND_DISCARD):\n \tDefine as empty.\n- \t(alloc_anon, free_page, ggc_alloc, poison_pages): Add machinery to\n+\t(alloc_anon, free_page, ggc_alloc, poison_pages): Add machinery to\n \tvalgrind-annotate memory.\n \n 2002-11-20  Ulrich Weigand  <uweigand@de.ibm.com>"}, {"sha": "70dfe905dfcc99f94c062050dd6bb373ccde636b", "filename": "gcc/c-parse.in", "status": "modified", "additions": 10, "deletions": 24, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14bc6db67cd8ea10e927487aa4cbf7e3aef931a/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14bc6db67cd8ea10e927487aa4cbf7e3aef931a/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=c14bc6db67cd8ea10e927487aa4cbf7e3aef931a", "patch": "@@ -1459,7 +1459,7 @@ notype_initdcl:\n    so that the header files compile. */\n maybe_attribute:\n       /* empty */\n-  \t\t{ $$ = NULL_TREE; }\n+\t\t{ $$ = NULL_TREE; }\n \t| attributes\n \t\t{ $$ = $1; }\n \t;\n@@ -2335,7 +2335,7 @@ select_or_iter_stmt:\n \t  '(' expr ')' ';'\n                 { DO_COND ($1) = c_common_truthvalue_conversion ($3); }\n \t| do_stmt_start error\n- \t\t{ }\n+\t\t{ }\n \t| FOR\n \t\t{ $<ttype>$ = build_stmt (FOR_STMT, NULL_TREE, NULL_TREE,\n \t\t\t\t\t  NULL_TREE, NULL_TREE);\n@@ -2402,7 +2402,7 @@ stmt:\n \t\t  $$ = build_asm_stmt ($2, $4, $6, $8, NULL_TREE); }\n \t/* This is the case with clobbered registers as well.  */\n \t| ASM_KEYWORD maybe_type_qual '(' expr ':' asm_operands ':'\n-  \t  asm_operands ':' asm_clobbers ')' ';'\n+\t  asm_operands ':' asm_clobbers ')' ';'\n \t\t{ stmt_count++;\n \t\t  $$ = build_asm_stmt ($2, $4, $6, $8, $10); }\n \t| GOTO identifier ';'\n@@ -3113,7 +3113,7 @@ myparm:\n optparmlist:\n \t  /* empty */\n \t\t{\n-\t    \t  $$ = NULL_TREE;\n+\t\t  $$ = NULL_TREE;\n \t\t}\n \t| ',' ELLIPSIS\n \t\t{\n@@ -3126,7 +3126,7 @@ optparmlist:\n \t\t}\n \t  parmlist_2\n \t\t{\n-\t  \t  /* returns a tree list node generated by get_parm_info */\n+\t\t  /* returns a tree list node generated by get_parm_info */\n \t\t  $$ = $3;\n \t\t  poplevel (0, 0, 0);\n \t\t}\n@@ -3891,25 +3891,11 @@ yyprint (file, yychar, yyl)\n     case CONSTANT:\n       fprintf (file, \" %s\", GET_MODE_NAME (TYPE_MODE (TREE_TYPE (t))));\n       if (TREE_CODE (t) == INTEGER_CST)\n-\tfprintf (file,\n-#if HOST_BITS_PER_WIDE_INT == 64\n-#if HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_INT\n-\t\t \" 0x%x%016x\",\n-#else\n-#if HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_LONG\n-\t\t \" 0x%lx%016lx\",\n-#else\n-\t\t \" 0x%llx%016llx\",\n-#endif\n-#endif\n-#else\n-#if HOST_BITS_PER_WIDE_INT != HOST_BITS_PER_INT\n-\t\t \" 0x%lx%08lx\",\n-#else\n-\t\t \" 0x%x%08x\",\n-#endif\n-#endif\n-\t\t TREE_INT_CST_HIGH (t), TREE_INT_CST_LOW (t));\n+\t{\n+\t  fputs (\" \", file);\n+\t  fprintf (file, HOST_WIDE_INT_PRINT_DOUBLE_HEX,\n+\t\t   TREE_INT_CST_HIGH (t), TREE_INT_CST_LOW (t));\n+\t}\n       break;\n     }\n }"}]}