{"sha": "9c10d25f5e53a68301de1680aee9d328bcfe96dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWMxMGQyNWY1ZTUzYTY4MzAxZGUxNjgwYWVlOWQzMjhiY2ZlOTZkYw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-02-02T19:37:57Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-02-02T19:37:57Z"}, "message": "Re-order declarations for functions in c-typeck.c to agree with order\nthere; add some missing declarations.\n\nFrom-SVN: r6466", "tree": {"sha": "4989867e4456d7702e0d920641cc7e1561cc3e8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4989867e4456d7702e0d920641cc7e1561cc3e8b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c10d25f5e53a68301de1680aee9d328bcfe96dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c10d25f5e53a68301de1680aee9d328bcfe96dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c10d25f5e53a68301de1680aee9d328bcfe96dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c10d25f5e53a68301de1680aee9d328bcfe96dc/comments", "author": null, "committer": null, "parents": [{"sha": "82812e560c609820b56886de86b280f9f0fbf28b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82812e560c609820b56886de86b280f9f0fbf28b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82812e560c609820b56886de86b280f9f0fbf28b"}], "stats": {"total": 55, "additions": 38, "deletions": 17}, "files": [{"sha": "41a4c0017c91e0cb6e9352d2b02281da8033e6b2", "filename": "gcc/c-tree.h", "status": "modified", "additions": 38, "deletions": 17, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c10d25f5e53a68301de1680aee9d328bcfe96dc/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c10d25f5e53a68301de1680aee9d328bcfe96dc/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=9c10d25f5e53a68301de1680aee9d328bcfe96dc", "patch": "@@ -1,5 +1,5 @@\n /* Definitions for C parsing and type checking.\n-   Copyright (C) 1987, 1993 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 1993, 1994 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -313,27 +313,44 @@ extern void store_parm_decls                    PROTO((void));\n extern tree xref_tag                            PROTO((enum tree_code, tree));\n \n /* in c-typeck.c */\n-extern tree build_array_ref                     PROTO((tree, tree));\n-extern tree build_binary_op                     PROTO((enum tree_code, tree, tree, int));\n-extern tree build_c_cast                        PROTO((tree, tree));\n-extern tree build_component_ref                 PROTO((tree, tree));\n-extern tree build_compound_expr                 PROTO((tree));\n-extern tree build_conditional_expr              PROTO((tree, tree, tree));\n-extern tree build_function_call                 PROTO((tree, tree));\n-extern tree build_indirect_ref                  PROTO((tree, char *));\n-extern tree build_modify_expr                   PROTO((tree, enum tree_code, tree));\n-extern tree build_unary_op                      PROTO((enum tree_code, tree, int));\n-extern tree c_alignof                           PROTO((tree));\n-extern tree c_alignof_expr                      PROTO((tree));\n-extern tree c_sizeof                            PROTO((tree));\n-extern tree c_expand_start_case                 PROTO((tree));\n+extern tree require_complete_type\t\tPROTO((tree));\n+extern void incomplete_type_error\t\tPROTO((tree, tree));\n /* Given two integer or real types, return the type for their sum.\n    Given two compatible ANSI C types, returns the merged type.  */\n extern tree common_type                         PROTO((tree, tree));\n+extern int comptypes\t\t\t\tPROTO((tree, tree));\n+extern int self_promoting_args_p\t\tPROTO((tree));\n+extern tree c_sizeof                            PROTO((tree));\n+extern tree c_sizeof_nowarn                     PROTO((tree));\n+extern tree c_size_in_bytes                     PROTO((tree));\n+extern tree c_alignof\t\t\t\tPROTO((tree));\n+extern tree c_alignof_expr\t\t\tPROTO((tree));\n extern tree default_conversion                  PROTO((tree));\n-extern tree parser_build_binary_op              PROTO((enum tree_code, tree, tree));\n-extern tree require_complete_type\t\tPROTO((tree));\n+extern tree build_component_ref                 PROTO((tree, tree));\n+extern tree build_indirect_ref                  PROTO((tree, char *));\n+extern tree build_array_ref                     PROTO((tree, tree));\n+extern tree build_function_call                 PROTO((tree, tree));\n+extern tree parser_build_binary_op              PROTO((enum tree_code,\n+\t\t\t\t\t\t       tree, tree));\n+extern tree build_binary_op                     PROTO((enum tree_code,\n+\t\t\t\t\t\t       tree, tree, int));\n+extern tree build_unary_op                      PROTO((enum tree_code,\n+\t\t\t\t\t\t       tree, int));\n+extern int lvalue_p\t\t\t\tPROTO((tree));\n+extern int lvalue_or_else\t\t\tPROTO((tree, char *));\n+extern void readonly_warning\t\t\tPROTO((tree, char *));\n+extern int mark_addressable\t\t\tPROTO((tree));\n+extern tree build_conditional_expr              PROTO((tree, tree, tree));\n+extern tree build_compound_expr                 PROTO((tree));\n+extern tree build_c_cast                        PROTO((tree, tree));\n+extern tree build_modify_expr                   PROTO((tree, enum tree_code,\n+\t\t\t\t\t\t       tree));\n+extern tree initializer_constant_valid_p\tPROTO((tree, tree));\n extern void store_init_value                    PROTO((tree, tree));\n+extern void error_init\t\t\t\tPROTO((char *, char *,\n+\t\t\t\t\t\t       char *));\n+extern void pedwarn_init\t\t\tPROTO((char *, char *,\n+\t\t\t\t\t\t       char *));\n extern void start_init\t\t\t\tPROTO((tree, tree, int));\n extern void finish_init\t\t\t\tPROTO((void));\n extern void really_start_incremental_init\tPROTO((tree));\n@@ -342,6 +359,10 @@ extern tree pop_init_level\t\t\tPROTO((int));\n extern void set_init_index\t\t\tPROTO((tree, tree));\n extern void set_init_label\t\t\tPROTO((tree));\n extern void process_init_element\t\tPROTO((tree));\n+extern void c_expand_asm_operands\t\tPROTO((tree, tree, tree, tree,\n+\t\t\t\t\t\t       int, char *, int));\n+extern void c_expand_return\t\t\tPROTO((tree));\n+extern tree c_expand_start_case                 PROTO((tree));\n \n /* in c-iterate.c */\n extern void iterator_expand\t\t\tPROTO((tree));"}]}