{"sha": "19a956978fbadb2f31c47df8eb5b4bd7ced09c0e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTlhOTU2OTc4ZmJhZGIyZjMxYzQ3ZGY4ZWI1YjRiZDdjZWQwOWMwZQ==", "commit": {"author": {"name": "Roman Zippel", "email": "zippel@linux-m68k.org", "date": "2007-02-18T01:16:55Z"}, "committer": {"name": "Roman Zippel", "email": "zippel@gcc.gnu.org", "date": "2007-02-18T01:16:55Z"}, "message": "linux.h (MD_UNWIND_SUPPORT): Define.\n\n\t* config/m68k/linux.h (MD_UNWIND_SUPPORT): Define.\n\t* config/m68k/linux-unwind.h: New file.\n\nFrom-SVN: r122082", "tree": {"sha": "6dffc580819d0063cc6e72a95a90b4d5f4fbab61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6dffc580819d0063cc6e72a95a90b4d5f4fbab61"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19a956978fbadb2f31c47df8eb5b4bd7ced09c0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19a956978fbadb2f31c47df8eb5b4bd7ced09c0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19a956978fbadb2f31c47df8eb5b4bd7ced09c0e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19a956978fbadb2f31c47df8eb5b4bd7ced09c0e/comments", "author": null, "committer": null, "parents": [{"sha": "b9704fc5f68f1da3f0bd49675a9bdf89d00b4ad3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9704fc5f68f1da3f0bd49675a9bdf89d00b4ad3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9704fc5f68f1da3f0bd49675a9bdf89d00b4ad3"}], "stats": {"total": 160, "additions": 160, "deletions": 0}, "files": [{"sha": "9a6e9d58947d7388b1600c60444c6c3a4028f4ca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19a956978fbadb2f31c47df8eb5b4bd7ced09c0e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19a956978fbadb2f31c47df8eb5b4bd7ced09c0e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=19a956978fbadb2f31c47df8eb5b4bd7ced09c0e", "patch": "@@ -1,3 +1,8 @@\n+2007-02-18  Roman Zippel <zippel@linux-m68k.org>\n+\n+\t* config/m68k/linux.h (MD_UNWIND_SUPPORT): Define.\n+\t* config/m68k/linux-unwind.h: New file.\n+\n 2007-02-18  Kazu Hirata  <kazu@codesourcery.com>\n \n \t* cfgloop.c, config/alpha/alpha.c, config/bfin/bfin.c,"}, {"sha": "bd24d80359c8200c1300f159c8b5502e47ee1f23", "filename": "gcc/config/m68k/linux-unwind.h", "status": "added", "additions": 153, "deletions": 0, "changes": 153, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19a956978fbadb2f31c47df8eb5b4bd7ced09c0e/gcc%2Fconfig%2Fm68k%2Flinux-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19a956978fbadb2f31c47df8eb5b4bd7ced09c0e/gcc%2Fconfig%2Fm68k%2Flinux-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Flinux-unwind.h?ref=19a956978fbadb2f31c47df8eb5b4bd7ced09c0e", "patch": "@@ -0,0 +1,153 @@\n+/* DWARF2 EH unwinding support for Linux/m68k.\n+   Copyright (C) 2006 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+In addition to the permissions in the GNU General Public License, the\n+Free Software Foundation gives you unlimited permission to link the\n+compiled version of this file with other programs, and to distribute\n+those programs without any restriction coming from the use of this\n+file.  (The General Public License restrictions do apply in other\n+respects; for example, they cover modification of the file, and\n+distribution when not linked into another program.)\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+Boston, MA 02110-1301, USA.  */\n+\n+/* Do code reading to identify a signal frame, and set the frame\n+   state data appropriately.  See unwind-dw2.c for the structs.\n+   Don't use this at all if inhibit_libc is used.  */\n+\n+#ifndef inhibit_libc\n+\n+#include <signal.h>\n+\n+/* <sys/ucontext.h> is unfortunaly broken right now */\n+struct uw_ucontext {\n+\tunsigned long\t  uc_flags;\n+\tstruct ucontext  *uc_link;\n+\tstack_t\t\t  uc_stack;\n+\tmcontext_t\t  uc_mcontext;\n+\tunsigned long\t  uc_filler[80];\n+\t__sigset_t\t  uc_sigmask;\n+};\n+\n+#define MD_FALLBACK_FRAME_STATE_FOR m68k_fallback_frame_state\n+\n+#ifdef __mcoldfire__\n+#define M68K_FP_SIZE  8\n+#else\n+#define M68K_FP_SIZE  12\n+#endif\n+\n+static _Unwind_Reason_Code\n+m68k_fallback_frame_state (struct _Unwind_Context *context,\n+\t\t\t   _Unwind_FrameState *fs)\n+{\n+  unsigned short *pc = context->ra;\n+  long cfa;\n+\n+  /* moveq #__NR_sigreturn,%d0; trap #0  */\n+  if (pc[0] == 0x7077 && pc[1] == 0x4e40)\n+    {\n+      struct sigcontext *sc;\n+\n+      /* Context is passed as the 3rd argument.  */\n+      sc = *(struct sigcontext **) (context->cfa + 8);\n+\n+      cfa = sc->sc_usp;\n+      fs->regs.cfa_how = CFA_REG_OFFSET;\n+      fs->regs.cfa_reg = 15;\n+      fs->regs.cfa_offset = cfa - (long) context->cfa;\n+\n+      fs->regs.reg[0].how = REG_SAVED_OFFSET;\n+      fs->regs.reg[0].loc.offset = (long) &sc->sc_d0 - cfa;\n+      fs->regs.reg[1].how = REG_SAVED_OFFSET;\n+      fs->regs.reg[1].loc.offset = (long) &sc->sc_d1 - cfa;\n+      fs->regs.reg[8].how = REG_SAVED_OFFSET;\n+      fs->regs.reg[8].loc.offset = (long) &sc->sc_a0 - cfa;\n+      fs->regs.reg[9].how = REG_SAVED_OFFSET;\n+      fs->regs.reg[9].loc.offset = (long) &sc->sc_a1 - cfa;\n+\n+      fs->regs.reg[24].how = REG_SAVED_OFFSET;\n+      fs->regs.reg[24].loc.offset = (long) &sc->sc_pc - cfa;\n+\n+      if (*(int *) sc->sc_fpstate)\n+\t{\n+\t  int *fpregs = (int *) sc->sc_fpregs;\n+\n+\t  fs->regs.reg[16].how = REG_SAVED_OFFSET;\n+\t  fs->regs.reg[16].loc.offset = (long) &fpregs[0] - cfa;\n+\t  fs->regs.reg[17].how = REG_SAVED_OFFSET;\n+\t  fs->regs.reg[17].loc.offset = (long) &fpregs[M68K_FP_SIZE/4] - cfa;\n+\t}\n+    }\n+#ifdef __mcoldfire__\n+  /* move.l #__NR_rt_sigreturn,%d0; trap #0 */\n+  else if (pc[0] == 0x203c && pc[1] == 0x0000 &&\n+\t   pc[2] == 0x00ad && pc[3] == 0x4e40)\n+#else\n+  /* moveq #~__NR_rt_sigreturn,%d0; not.b %d0; trap #0 */\n+  else if (pc[0] == 0x7052 && pc[1] == 0x4600 && pc[2] == 0x4e40)\n+#endif\n+    {\n+      struct uw_ucontext *uc;\n+      greg_t *gregs;\n+      int i;\n+\n+      /* Context is passed as the 3rd argument.  */\n+      uc = *(struct uw_ucontext **) (context->cfa + 8);\n+\n+      gregs = uc->uc_mcontext.gregs;\n+      cfa = gregs[15];\n+      fs->regs.cfa_how = CFA_REG_OFFSET;\n+      fs->regs.cfa_reg = 15;\n+      fs->regs.cfa_offset = cfa - (long) context->cfa;\n+\n+      /* register %d0-%d7/%a0-%a6  */\n+      for (i = 0; i <= 14; i++)\n+\t{\n+\t  fs->regs.reg[i].how = REG_SAVED_OFFSET;\n+\t  fs->regs.reg[i].loc.offset = (long) &gregs[i] - cfa;\n+\t}\n+\n+      /* return address  */\n+      fs->regs.reg[24].how = REG_SAVED_OFFSET;\n+      fs->regs.reg[24].loc.offset = (long) &gregs[16] - cfa;\n+\n+#define uc_fpstate      uc_filler[0]\n+\n+      if (uc->uc_fpstate)\n+\t{\n+\t  long fpregs = (long) uc->uc_mcontext.fpregs.f_fpregs;\n+\n+\t  /* register %fp0-%fp7  */\n+\t  for (i = 16; i <= 23; i++)\n+\t    {\n+\t      fs->regs.reg[i].how = REG_SAVED_OFFSET;\n+\t      fs->regs.reg[i].loc.offset = fpregs - cfa;\n+\t      fpregs += M68K_FP_SIZE;\n+\t    }\n+\t}\n+    }\n+  else\n+    return _URC_END_OF_STACK;\n+\n+  fs->retaddr_column = 24;\n+  fs->signal_frame = 1;\n+\n+  return _URC_NO_REASON;\n+}\n+#endif /* ifdef inhibit_libc  */"}, {"sha": "b480b3722bcadab4d57ac8602154c056a78ec4d7", "filename": "gcc/config/m68k/linux.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19a956978fbadb2f31c47df8eb5b4bd7ced09c0e/gcc%2Fconfig%2Fm68k%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19a956978fbadb2f31c47df8eb5b4bd7ced09c0e/gcc%2Fconfig%2Fm68k%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Flinux.h?ref=19a956978fbadb2f31c47df8eb5b4bd7ced09c0e", "patch": "@@ -229,3 +229,5 @@ Boston, MA 02110-1301, USA.  */\n }\n \n #define TARGET_ASM_FILE_END file_end_indicate_exec_stack\n+\n+#define MD_UNWIND_SUPPORT \"config/m68k/linux-unwind.h\""}]}