{"sha": "2cc6d90e2d74a1bd0f97bf7106a86c1b85f70d8f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmNjNmQ5MGUyZDc0YTFiZDBmOTdiZjcxMDZhODZjMWI4NWY3MGQ4Zg==", "commit": {"author": {"name": "Andrew Sutton", "email": "andrew.n.sutton@gmail.com", "date": "2015-07-09T17:50:06Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-07-09T17:50:06Z"}, "message": "* parser.c (cp_parser_default_type_template_argument)\n\t(cp_parser_default_template_template_argument): Factor out from\n\tcp_parser_type_parameter.\n\nFrom-SVN: r225620", "tree": {"sha": "d0b287be4d0b162656a59d5be771d00766647ccf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0b287be4d0b162656a59d5be771d00766647ccf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2cc6d90e2d74a1bd0f97bf7106a86c1b85f70d8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cc6d90e2d74a1bd0f97bf7106a86c1b85f70d8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cc6d90e2d74a1bd0f97bf7106a86c1b85f70d8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cc6d90e2d74a1bd0f97bf7106a86c1b85f70d8f/comments", "author": {"login": "asutton", "id": 570796, "node_id": "MDQ6VXNlcjU3MDc5Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/570796?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asutton", "html_url": "https://github.com/asutton", "followers_url": "https://api.github.com/users/asutton/followers", "following_url": "https://api.github.com/users/asutton/following{/other_user}", "gists_url": "https://api.github.com/users/asutton/gists{/gist_id}", "starred_url": "https://api.github.com/users/asutton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asutton/subscriptions", "organizations_url": "https://api.github.com/users/asutton/orgs", "repos_url": "https://api.github.com/users/asutton/repos", "events_url": "https://api.github.com/users/asutton/events{/privacy}", "received_events_url": "https://api.github.com/users/asutton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9d86e84ec0b576bd3586cf05f6605fee316c9cd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d86e84ec0b576bd3586cf05f6605fee316c9cd4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d86e84ec0b576bd3586cf05f6605fee316c9cd4"}], "stats": {"total": 112, "additions": 72, "deletions": 40}, "files": [{"sha": "de571666acbc8c8c52c1f6f273941a6da8149aa5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc6d90e2d74a1bd0f97bf7106a86c1b85f70d8f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc6d90e2d74a1bd0f97bf7106a86c1b85f70d8f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2cc6d90e2d74a1bd0f97bf7106a86c1b85f70d8f", "patch": "@@ -1,3 +1,9 @@\n+2015-07-09  Andrew Sutton  <andrew.n.sutton@gmail.com>\n+\n+\t* parser.c (cp_parser_default_type_template_argument)\n+\t(cp_parser_default_template_template_argument): Factor out from\n+\tcp_parser_type_parameter.\n+\n 2015-07-09  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* typeck.c (warn_args_num): Rename to error_args_num."}, {"sha": "686654cd84381812ed433dcab4ad9917887c6b0d", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 66, "deletions": 40, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cc6d90e2d74a1bd0f97bf7106a86c1b85f70d8f/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cc6d90e2d74a1bd0f97bf7106a86c1b85f70d8f/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=2cc6d90e2d74a1bd0f97bf7106a86c1b85f70d8f", "patch": "@@ -13330,6 +13330,69 @@ cp_parser_template_parameter_list (cp_parser* parser)\n   return end_template_parm_list (parameter_list);\n }\n \n+/* Parse a default argument for a type template-parameter.\n+   Note that diagnostics are handled in cp_parser_template_parameter.  */\n+\n+static tree\n+cp_parser_default_type_template_argument (cp_parser *parser)\n+{\n+  gcc_assert (cp_lexer_next_token_is (parser->lexer, CPP_EQ));\n+\n+  /* Consume the `=' token.  */\n+  cp_lexer_consume_token (parser->lexer);\n+\n+  /* Parse the default-argument.  */\n+  push_deferring_access_checks (dk_no_deferred);\n+  tree default_argument = cp_parser_type_id (parser);\n+  pop_deferring_access_checks ();\n+\n+  return default_argument;\n+}\n+\n+/* Parse a default argument for a template template-parameter.  */\n+\n+static tree\n+cp_parser_default_template_template_argument (cp_parser *parser)\n+{\n+  gcc_assert (cp_lexer_next_token_is (parser->lexer, CPP_EQ));\n+\n+  bool is_template;\n+\n+  /* Consume the `='.  */\n+  cp_lexer_consume_token (parser->lexer);\n+  /* Parse the id-expression.  */\n+  push_deferring_access_checks (dk_no_deferred);\n+  /* save token before parsing the id-expression, for error\n+     reporting */\n+  const cp_token* token = cp_lexer_peek_token (parser->lexer);\n+  tree default_argument\n+    = cp_parser_id_expression (parser,\n+                               /*template_keyword_p=*/false,\n+                               /*check_dependency_p=*/true,\n+                               /*template_p=*/&is_template,\n+                               /*declarator_p=*/false,\n+                               /*optional_p=*/false);\n+  if (TREE_CODE (default_argument) == TYPE_DECL)\n+    /* If the id-expression was a template-id that refers to\n+       a template-class, we already have the declaration here,\n+       so no further lookup is needed.  */\n+    ;\n+  else\n+    /* Look up the name.  */\n+    default_argument\n+      = cp_parser_lookup_name (parser, default_argument,\n+                               none_type,\n+                               /*is_template=*/is_template,\n+                               /*is_namespace=*/false,\n+                               /*check_dependency=*/true,\n+                               /*ambiguous_decls=*/NULL,\n+                               token->location);\n+  /* See if the default argument is valid.  */\n+  default_argument = check_template_template_default_arg (default_argument);\n+  pop_deferring_access_checks ();\n+  return default_argument;\n+}\n+\n /* Parse a template-parameter.\n \n    template-parameter:\n@@ -13552,11 +13615,8 @@ cp_parser_type_parameter (cp_parser* parser, bool *is_parameter_pack)\n \t/* If the next token is an `=', we have a default argument.  */\n \tif (cp_lexer_next_token_is (parser->lexer, CPP_EQ))\n \t  {\n-\t    /* Consume the `=' token.  */\n-\t    cp_lexer_consume_token (parser->lexer);\n-\t    /* Parse the default-argument.  */\n-\t    push_deferring_access_checks (dk_no_deferred);\n-\t    default_argument = cp_parser_type_id (parser);\n+\t    default_argument\n+\t      = cp_parser_default_type_template_argument (parser);\n \n             /* Template parameter packs cannot have default\n                arguments. */\n@@ -13574,7 +13634,6 @@ cp_parser_type_parameter (cp_parser* parser, bool *is_parameter_pack)\n               }\n \t    else if (check_for_bare_parameter_packs (default_argument))\n \t      default_argument = error_mark_node;\n-\t    pop_deferring_access_checks ();\n \t  }\n \telse\n \t  default_argument = NULL_TREE;\n@@ -13632,40 +13691,8 @@ cp_parser_type_parameter (cp_parser* parser, bool *is_parameter_pack)\n \t   default-argument.  */\n \tif (cp_lexer_next_token_is (parser->lexer, CPP_EQ))\n \t  {\n-\t    bool is_template;\n-\n-\t    /* Consume the `='.  */\n-\t    cp_lexer_consume_token (parser->lexer);\n-\t    /* Parse the id-expression.  */\n-\t    push_deferring_access_checks (dk_no_deferred);\n-\t    /* save token before parsing the id-expression, for error\n-\t       reporting */\n-\t    token = cp_lexer_peek_token (parser->lexer);\n-\t    default_argument\n-\t      = cp_parser_id_expression (parser,\n-\t\t\t\t\t /*template_keyword_p=*/false,\n-\t\t\t\t\t /*check_dependency_p=*/true,\n-\t\t\t\t\t /*template_p=*/&is_template,\n-\t\t\t\t\t /*declarator_p=*/false,\n-\t\t\t\t\t /*optional_p=*/false);\n-\t    if (TREE_CODE (default_argument) == TYPE_DECL)\n-\t      /* If the id-expression was a template-id that refers to\n-\t\t a template-class, we already have the declaration here,\n-\t\t so no further lookup is needed.  */\n-\t\t ;\n-\t    else\n-\t      /* Look up the name.  */\n-\t      default_argument\n-\t\t= cp_parser_lookup_name (parser, default_argument,\n-\t\t\t\t\t none_type,\n-\t\t\t\t\t /*is_template=*/is_template,\n-\t\t\t\t\t /*is_namespace=*/false,\n-\t\t\t\t\t /*check_dependency=*/true,\n-\t\t\t\t\t /*ambiguous_decls=*/NULL,\n-\t\t\t\t\t token->location);\n-\t    /* See if the default argument is valid.  */\n \t    default_argument\n-\t      = check_template_template_default_arg (default_argument);\n+\t      = cp_parser_default_template_template_argument (parser);\n \n             /* Template parameter packs cannot have default\n                arguments. */\n@@ -13681,7 +13708,6 @@ cp_parser_type_parameter (cp_parser* parser, bool *is_parameter_pack)\n \t\t\t    \"have default arguments\");\n                 default_argument = NULL_TREE;\n               }\n-\t    pop_deferring_access_checks ();\n \t  }\n \telse\n \t  default_argument = NULL_TREE;"}]}