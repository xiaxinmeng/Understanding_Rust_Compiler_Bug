{"sha": "a1178b309a5d316fe6040380a540807495acadc5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTExNzhiMzA5YTVkMzE2ZmU2MDQwMzgwYTU0MDgwNzQ5NWFjYWRjNQ==", "commit": {"author": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2010-10-13T08:24:48Z"}, "committer": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2010-10-13T08:24:48Z"}, "message": "implement method attributes.\n\ngcc/c-family:\n\tmerge from FSF apple 'trunk' branch. \n\t2006-04-26 Fariborz Jahanian <fjahanian@apple.com>\n\n\tRadar 3803157 (method attributes)\n\t* c-common.c (handle_deprecated_attribute): Recognize\n\tobjc methods as valid declarations.\n\t* c-common.h: Declare objc_method_decl ().\n\t* stub-objc.c (objc_method_decl): New stub. \n\ngcc/objc:\n\tmerge from FSF apple 'trunk' branch. \n\n\t2006-04-26 Fariborz Jahanian <fjahanian@apple.com>\n\tRadar 3803157 (method attributes)\n\t* objc/objc-act.h (METHOD_TYPE_ATTRIBUTES): New macro.\n\t* objc/objc-act.c (objc_decl_method_attributes): New.\n\t(objc_add_method_declaration): Process method's attribute.\n\t(objc_start_method_definition): Ditto.\n\t(build_objc_method_call): Inject method attribute into\n\tbuilt function type.\n\t(objc_method_decl): New.\n\t(objc_warn_deprecated)use): New.\n\ntestsuite:\n\t* objc.dg/attributes/method-attribute-1.m: Update to respond\n\tto implemented method attributes..\n\t* objc.dg/attributes/method-attribute-2.m: Likewise.\n\t* objc.dg/attributes/method-attribute-3.m: Likewise.\n\t* obj-c++.dg/attributes/method-attribute-1.mm: Likewise.\n\t* obj-c++.dg/attributes/method-attribute-2.mm: Likewise.\n\t* obj-c++.dg/attributes/method-attribute-3.mm: Likewise.\n\nFrom-SVN: r165415", "tree": {"sha": "dd26564b609fa5c247334c65f3d8f1bb72743eea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd26564b609fa5c247334c65f3d8f1bb72743eea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1178b309a5d316fe6040380a540807495acadc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1178b309a5d316fe6040380a540807495acadc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1178b309a5d316fe6040380a540807495acadc5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1178b309a5d316fe6040380a540807495acadc5/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5254c66ba0c8f9f45c3054cc41131141ff81330c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5254c66ba0c8f9f45c3054cc41131141ff81330c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5254c66ba0c8f9f45c3054cc41131141ff81330c"}], "stats": {"total": 227, "additions": 166, "deletions": 61}, "files": [{"sha": "dde5c45eb4f20f1ae7286dc00e78a405795868d7", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1178b309a5d316fe6040380a540807495acadc5/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1178b309a5d316fe6040380a540807495acadc5/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=a1178b309a5d316fe6040380a540807495acadc5", "patch": "@@ -1,3 +1,14 @@\n+2010-10-13  Iain Sandoe  <iains@gcc.gnu.org>\n+\n+\tmerge from FSF apple 'trunk' branch. \n+\t2006-04-26 Fariborz Jahanian <fjahanian@apple.com>\n+\n+\tRadar 3803157 (method attributes)\n+\t* c-common.c (handle_deprecated_attribute): Recognize\n+\tobjc methods as valid declarations.\n+\t* c-common.h: Declare objc_method_decl ().\n+\t* stub-objc.c (objc_method_decl): New stub. \n+\n 2010-10-08  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-common.c (parse_optimize_options): Call"}, {"sha": "49eb5106f634e4c2c6bbc92f49e5642b42efa385", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1178b309a5d316fe6040380a540807495acadc5/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1178b309a5d316fe6040380a540807495acadc5/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=a1178b309a5d316fe6040380a540807495acadc5", "patch": "@@ -7189,7 +7189,8 @@ handle_deprecated_attribute (tree *node, tree name,\n \t  || TREE_CODE (decl) == PARM_DECL\n \t  || TREE_CODE (decl) == VAR_DECL\n \t  || TREE_CODE (decl) == FUNCTION_DECL\n-\t  || TREE_CODE (decl) == FIELD_DECL)\n+\t  || TREE_CODE (decl) == FIELD_DECL\n+\t  || objc_method_decl (TREE_CODE (decl)))\n \tTREE_DEPRECATED (decl) = 1;\n       else\n \twarn = 1;"}, {"sha": "71efaf955da5e341a4b325e62c69ddbbb047c59b", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1178b309a5d316fe6040380a540807495acadc5/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1178b309a5d316fe6040380a540807495acadc5/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=a1178b309a5d316fe6040380a540807495acadc5", "patch": "@@ -1009,6 +1009,7 @@ extern tree objc_generate_static_init_call (tree);\n extern tree objc_generate_write_barrier (tree, enum tree_code, tree);\n extern void objc_set_method_opt (bool);\n extern void objc_finish_foreach_loop (location_t, tree, tree, tree, tree, tree);\n+extern bool  objc_method_decl (enum tree_code);\n \n /* The following are provided by the C and C++ front-ends, and called by\n    ObjC/ObjC++.  */"}, {"sha": "6b8c33457ea7aa945772241300eb5eb7cea88a99", "filename": "gcc/c-family/stub-objc.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1178b309a5d316fe6040380a540807495acadc5/gcc%2Fc-family%2Fstub-objc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1178b309a5d316fe6040380a540807495acadc5/gcc%2Fc-family%2Fstub-objc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fstub-objc.c?ref=a1178b309a5d316fe6040380a540807495acadc5", "patch": "@@ -217,6 +217,12 @@ objc_finish_method_definition (tree ARG_UNUSED (fndecl))\n {\n }\n \n+bool \n+objc_method_decl (enum tree_code ARG_UNUSED(opcode))\n+{\n+  return false;\n+}\n+\n tree\n objc_build_keyword_decl (tree ARG_UNUSED (selector),\n \t\t\t tree ARG_UNUSED (type),"}, {"sha": "ed1bc2e5ed074669712ae37bcb5cb1561451ada9", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1178b309a5d316fe6040380a540807495acadc5/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1178b309a5d316fe6040380a540807495acadc5/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=a1178b309a5d316fe6040380a540807495acadc5", "patch": "@@ -1,3 +1,18 @@\n+2010-10-13  Iain Sandoe  <iains@gcc.gnu.org>\n+\n+\tmerge from FSF apple 'trunk' branch. \n+\n+\t2006-04-26 Fariborz Jahanian <fjahanian@apple.com>\n+\tRadar 3803157 (method attributes)\n+\t* objc/objc-act.h (METHOD_TYPE_ATTRIBUTES): New macro.\n+\t* objc/objc-act.c (objc_decl_method_attributes): New.\n+\t(objc_add_method_declaration): Process method's attribute.\n+\t(objc_start_method_definition): Ditto.\n+\t(build_objc_method_call): Inject method attribute into\n+\tbuilt function type.\n+\t(objc_method_decl): New.\n+\t(objc_warn_deprecated)use): New.\n+\n 2010-10-07  Andi Kleen  <ak@linux.intel.com>\n \n \t* Make-lang.in (cc1obj-dummy): Remove."}, {"sha": "26d490efb2bdefe09ec0fa16bd97612861c8945d", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 73, "deletions": 16, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1178b309a5d316fe6040380a540807495acadc5/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1178b309a5d316fe6040380a540807495acadc5/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=a1178b309a5d316fe6040380a540807495acadc5", "patch": "@@ -52,6 +52,9 @@ along with GCC; see the file COPYING3.  If not see\n #include \"hashtab.h\"\n #include \"langhooks-def.h\"\n \n+/* For default_tree_printer ().  */\n+#include \"tree-pretty-print.h\"\n+\n /* For enum gimplify_status */\n #include \"gimple.h\"\n \n@@ -177,6 +180,9 @@ static void build_fast_enumeration_state_template (void);\n static void objc_generate_cxx_cdtors (void);\n #endif\n \n+/* objc attribute */\n+static void objc_decl_method_attributes (tree*, tree, int); \n+static tree build_keyword_selector (tree);\n static const char *synth_id_with_class_suffix (const char *, tree);\n \n /* Hash tables to manage the global pool of method prototypes.  */\n@@ -215,6 +221,7 @@ static void really_start_method (tree, tree);\n static void really_start_method (tree, struct c_arg_info *);\n #endif\n static int comp_proto_with_proto (tree, tree, int);\n+static tree get_arg_type_list (tree, int, int);\n static tree objc_decay_parm_type (tree);\n static void objc_push_parm (tree);\n #ifdef OBJCPLUS\n@@ -511,6 +518,30 @@ generate_struct_by_value_array (void)\n   exit (0);\n }\n \n+/* FIXME: We need to intercept calls to warn_deprecated_use, since that \n+   ultimately calls warning () with a \"qD\" formatter for decls.  The 'D' \n+   formatter does not handle ObjC-specific decls (in ObjC++).  For now, we\n+   interpose a switch to the  default handler which simply prints the decl\n+   identifier.  \n+   Eventually, we should handle this within the objc{,p}/ code.  */\n+\n+static void\n+objc_warn_deprecated_use (tree depitem, tree attr)\n+{\n+  if (DECL_P (depitem))\n+    {\n+      static bool (*sav_printer) (pretty_printer *, text_info *, const char *,\n+\t\t\t\t  int, bool, bool, bool) = NULL ;\n+      if (sav_printer == NULL)\n+\tsav_printer = diagnostic_format_decoder (global_dc) ;\n+      diagnostic_format_decoder (global_dc) = &default_tree_printer;\n+      warn_deprecated_use (depitem, attr);\n+      diagnostic_format_decoder (global_dc) = sav_printer;\n+    }\n+  else\n+    warn_deprecated_use (depitem, attr);\n+}\n+\n bool\n objc_init (void)\n {\n@@ -804,11 +835,7 @@ objc_add_method_declaration (tree decl, tree attributes)\n       fatal_error (\"method declaration not in @interface context\");\n     }\n \n-  if (attributes)\n-    warning_at (input_location, OPT_Wattributes, \n-\t\t\"method attributes are not available in this version\"\n-\t\t\" of the compiler, (ignored)\");\n-\n+  objc_decl_method_attributes (&decl, attributes, 0);\n   objc_add_method (objc_interface_context,\n \t\t   decl,\n \t\t   objc_inherit_code == CLASS_METHOD_DECL,\n@@ -830,18 +857,14 @@ objc_start_method_definition (tree decl, tree attributes)\n   if (decl != NULL_TREE  && METHOD_SEL_NAME (decl) == error_mark_node)\n     return false;\n \n-  if (attributes)\n-    warning_at (input_location, OPT_Wattributes, \n-\t\t\"method attributes are not available in this version\"\n-\t\t\" of the compiler, (ignored)\");\n-\n #ifndef OBJCPLUS\n   /* Indicate no valid break/continue context by setting these variables\n      to some non-null, non-label value.  We'll notice and emit the proper\n      error message in c_finish_bc_stmt.  */\n   c_break_label = c_cont_label = size_zero_node;\n #endif\n \n+  objc_decl_method_attributes (&decl, attributes, 0);\n   objc_add_method (objc_implementation_context,\n \t\t   decl,\n \t\t   objc_inherit_code == CLASS_METHOD_DECL, \n@@ -6154,6 +6177,32 @@ build_method_decl (enum tree_code code, tree ret_type, tree selector,\n #define METHOD_DEF 0\n #define METHOD_REF 1\n \n+/* This routine processes objective-c method attributes. */\n+\n+static void\n+objc_decl_method_attributes (tree *node, tree attributes, int flags)\n+{\n+  tree sentinel_attr = lookup_attribute (\"sentinel\", attributes);\n+  if (sentinel_attr)\n+    {\n+      /* hackery to make an obj method look like a function type. */\n+      tree rettype = TREE_TYPE (*node);\n+      TREE_TYPE (*node) = build_function_type (TREE_VALUE (rettype), \n+\t\t       \t    get_arg_type_list (*node, METHOD_REF, 0));\n+      decl_attributes (node, attributes, flags);\n+      METHOD_TYPE_ATTRIBUTES (*node) = TYPE_ATTRIBUTES (TREE_TYPE (*node));\n+      TREE_TYPE (*node) = rettype;\n+    }\n+  else\n+    decl_attributes (node, attributes, flags);\n+}\n+\n+bool \n+objc_method_decl (enum tree_code opcode)\n+{\n+  return opcode == INSTANCE_METHOD_DECL || opcode == CLASS_METHOD_DECL;\n+}\n+\n /* Used by `build_objc_method_call' and `comp_proto_with_proto'.  Return\n    an argument list for method METH.  CONTEXT is either METHOD_DEF or\n    METHOD_REF, saying whether we are trying to define a method or call\n@@ -6699,14 +6748,22 @@ build_objc_method_call (location_t loc, int super_flag, tree method_prototype,\n     = (method_prototype\n        ? TREE_VALUE (TREE_TYPE (method_prototype))\n        : objc_object_type);\n-  tree sender_cast\n-    = build_pointer_type\n-      (build_function_type\n-       (ret_type,\n-\tget_arg_type_list\n-\t(method_prototype, METHOD_REF, super_flag)));\n+\n+  tree method_param_types = \n+  \t\tget_arg_type_list (method_prototype, METHOD_REF, super_flag);\n+  tree ftype = build_function_type (ret_type, method_param_types);\n+  tree sender_cast;\n   tree method, t;\n \n+  if (method_prototype && METHOD_TYPE_ATTRIBUTES (method_prototype))\n+    ftype = build_type_attribute_variant (\n+\t      ftype, METHOD_TYPE_ATTRIBUTES (method_prototype));\n+\n+  sender_cast = build_pointer_type (ftype);\n+\n+  if (method_prototype && TREE_DEPRECATED (method_prototype))\n+    objc_warn_deprecated_use (method_prototype, NULL_TREE);\n+\n   lookup_object = build_c_cast (loc, rcv_p, lookup_object);\n \n   /* Use SAVE_EXPR to avoid evaluating the receiver twice.  */"}, {"sha": "f7a075569d227db0f1c5089286a3bda32d222d0e", "filename": "gcc/objc/objc-act.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1178b309a5d316fe6040380a540807495acadc5/gcc%2Fobjc%2Fobjc-act.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1178b309a5d316fe6040380a540807495acadc5/gcc%2Fobjc%2Fobjc-act.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.h?ref=a1178b309a5d316fe6040380a540807495acadc5", "patch": "@@ -52,6 +52,7 @@ tree objc_eh_personality (void);\n #define METHOD_ADD_ARGS_ELLIPSIS_P(DECL) ((DECL)->decl_common.lang_flag_0)\n #define METHOD_DEFINITION(DECL) ((DECL)->decl_common.initial)\n #define METHOD_ENCODING(DECL) ((DECL)->decl_minimal.context)\n+#define METHOD_TYPE_ATTRIBUTES(DECL) ((DECL)->decl_common.abstract_origin)\n \n /* CLASS_INTERFACE_TYPE, CLASS_IMPLEMENTATION_TYPE,\n    CATEGORY_INTERFACE_TYPE, CATEGORY_IMPLEMENTATION_TYPE,"}, {"sha": "f5a2377116e67b3e684559512073fbc28f6cd4f4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1178b309a5d316fe6040380a540807495acadc5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1178b309a5d316fe6040380a540807495acadc5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a1178b309a5d316fe6040380a540807495acadc5", "patch": "@@ -1,3 +1,13 @@\n+2010-10-13  Iain Sandoe  <iains@gcc.gnu.org>\n+\n+\t* objc.dg/attributes/method-attribute-1.m: Update to respond\n+\tto implemented method attributes..\n+\t* objc.dg/attributes/method-attribute-2.m: Likewise.\n+\t* objc.dg/attributes/method-attribute-3.m: Likewise.\n+\t* obj-c++.dg/attributes/method-attribute-1.mm: Likewise.\n+\t* obj-c++.dg/attributes/method-attribute-2.mm: Likewise.\n+\t* obj-c++.dg/attributes/method-attribute-3.mm: Likewise.\n+\n 2010-10-13  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \tPR libobjc/23214"}, {"sha": "747deab0d2c599b95b2f658180ec7f6f2284e4d5", "filename": "gcc/testsuite/obj-c++.dg/attributes/method-attribute-1.mm", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1178b309a5d316fe6040380a540807495acadc5/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fmethod-attribute-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1178b309a5d316fe6040380a540807495acadc5/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fmethod-attribute-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fmethod-attribute-1.mm?ref=a1178b309a5d316fe6040380a540807495acadc5", "patch": "@@ -8,13 +8,12 @@ @interface obj : Object {\n   int var; \n } \n - (int) mth;\n-+ (id) dep_cls_mth __attribute__((deprecated)) ;/* { dg-warning \"method attributes are not available in this version\" } */\n-- (int) dep_ins_mth __attribute__((deprecated)) ;/* { dg-warning \"method attributes are not available in this version\" } */\n-- (int) dep_ins_mtharg: (int) i __attribute__((deprecated)) ;/* { dg-warning \"method attributes are not available in this version\" } */\n++ (id) dep_cls_mth __attribute__((deprecated)) ;\n+- (int) dep_ins_mth __attribute__((deprecated)) ;\n+- (int) dep_ins_mtharg: (int) i __attribute__((deprecated)) ;\n - (int) dep_ins_mtharg1: (int) i __attribute__((deprecated)) add: (int) j;/* { dg-error \"method attributes must be specified at the end \" } */\n - (int) nodef __attribute__((deprecated)) { return var-2; } ; /* { dg-error \"expected ';' before '\\{' token\" } */\n-\t\t/* { dg-warning \"method attributes are not available in this version\" \"\" { target *-*-* } 15 } */\n-__attribute__((deprecated)) \n+__attribute__((deprecated))\n - (int) bad_pref_mth; /* { dg-warning \"prefix attributes are ignored for methods\" } */\n @end\n \n@@ -31,11 +30,11 @@ - (int) nodef { return var-2; } ;\n int foo (void)\n {\n   obj *p = [obj new];\n-  id n = [obj dep_cls_mth];\n+  id n = [obj dep_cls_mth];\t/* { dg-warning \"is deprecated\" } */\n   \n-  [p dep_ins_mth];\n-  [p dep_ins_mtharg:2];\n+  [p dep_ins_mth];\t\t/* { dg-warning \"is deprecated\" } */\n+  [p dep_ins_mtharg:2];\t\t/* { dg-warning \"is deprecated\" } */\n   [p dep_ins_mtharg1:3 add:3];\n-\n-  return [p mth];    \n+\t\n+  return [p mth];\n }"}, {"sha": "5a7b487106052629da3d8910d1f5fb0738639a01", "filename": "gcc/testsuite/obj-c++.dg/attributes/method-attribute-2.mm", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1178b309a5d316fe6040380a540807495acadc5/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fmethod-attribute-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1178b309a5d316fe6040380a540807495acadc5/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fmethod-attribute-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fmethod-attribute-2.mm?ref=a1178b309a5d316fe6040380a540807495acadc5", "patch": "@@ -7,25 +7,27 @@ @interface obj : Object {\n @public \n   int var; \n } \n-- (int) depmtharg:(int) iarg __attribute__((deprecated)); /* { dg-warning \"method attributes are not available in this version\" } */\n-- (int) unusedarg:(int) __attribute__((unused)) uarg ; /* { dg-warning \"method parameter attributes are not available in this version\" } */\n-- (int) depunusedarg:(int) __attribute__((unused)) uarg __attribute__((deprecated)) ; /* { dg-warning \"method attributes are not available in this version\" } */\n-\t\t\t\t/* { dg-warning \"method parameter attributes are not available in this version\" \"\" { target *-*-* } 12 } */\n+- (int) depmth __attribute__((deprecated)); \n+- (int) depmtharg:(int) iarg __attribute__((deprecated)); \n+- (int) unusedarg:(int) __attribute__((unused)) uarg ;  /* { dg-warning \"method parameter attributes are not available in this version\" } */\n+- (int) depunusedarg:(int) __attribute__((unused)) uarg __attribute__((deprecated)) ; /* { dg-warning \"method parameter attributes are not available in this version\" } */\n @end\n \n @implementation obj\n-- (int) depmtharg:(int) iarg { return var + iarg ; };\n-- (int) unusedarg:(int) __attribute__((unused)) uarg { return var; } ; /* { dg-warning \"method parameter attributes are not available in this version\" } */\n-- (int) depunusedarg:(int) __attribute__((unused)) uarg { return var; }; /* { dg-warning \"method parameter attributes are not available in this version\" } */\n+- (int) depmth __attribute__((deprecated)) { return var; }  \n+- (int) depmtharg:(int) iarg { return var + iarg ; }\n+- (int) unusedarg:(int) __attribute__((unused)) uarg { return var; }  /* { dg-warning \"method parameter attributes are not available in this version\" } */\n+- (int) depunusedarg:(int) __attribute__((unused)) uarg { return var; } /* { dg-warning \"method parameter attributes are not available in this version\" } */\n @end \n \n int foo (void)\n {\n   obj *p = [obj new];\n   \n-  [p depmtharg:1];\n-  [p unusedarg:2];\n-  [p depunusedarg:3 ];\n+  [p depmth];\t\t/* { dg-warning \"is deprecated\" } */\n+  [p depmtharg:1];\t/* { dg-warning \"is deprecated\" } */\n+  [p unusedarg:2];\t/* { dg-bogus \"is deprecated\" } */\n+  [p depunusedarg:3 ];\t/* { dg-warning \"is deprecated\" } */\n \n-  return [p depmtharg:0];    \n+  return [p depmtharg:0]; /* { dg-warning \"is deprecated\" } */   \n }"}, {"sha": "bab40d342ee37d80b3135a69a4e659a9fd599204", "filename": "gcc/testsuite/obj-c++.dg/attributes/method-attribute-3.mm", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1178b309a5d316fe6040380a540807495acadc5/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fmethod-attribute-3.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1178b309a5d316fe6040380a540807495acadc5/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fmethod-attribute-3.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fmethod-attribute-3.mm?ref=a1178b309a5d316fe6040380a540807495acadc5", "patch": "@@ -6,7 +6,7 @@ @interface obj : Object {\n @public \n   int var;\n }\n-- (int) vargsn: (int) count, ... __attribute__((deprecated)); /* { dg-warning \" method attributes are not available in this version of the compiler\" } */\n+- (int) vargsn: (int) count, ... __attribute__((deprecated));\n @end\n \n @implementation obj\n@@ -20,5 +20,5 @@ int foo (void)\n {\n   obj *p = [obj new];\n   \n-  return [p vargsn:0];\n+  return [p vargsn:0];  /* { dg-warning \"'vargsn:' is deprecated .declared at\" } */\n }"}, {"sha": "ffe72e20fd79795dc07654c6ff18c6070f1c40d9", "filename": "gcc/testsuite/objc.dg/attributes/method-attribute-1.m", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1178b309a5d316fe6040380a540807495acadc5/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fmethod-attribute-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1178b309a5d316fe6040380a540807495acadc5/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fmethod-attribute-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fmethod-attribute-1.m?ref=a1178b309a5d316fe6040380a540807495acadc5", "patch": "@@ -8,9 +8,9 @@ @interface obj : Object {\n   int var; \n } \n - (int) mth;\n-+ (id) dep_cls_mth __attribute__((deprecated)) ;/* { dg-warning \"method attributes are not available in this version\" } */\n-- (int) dep_ins_mth __attribute__((deprecated)) ;/* { dg-warning \"method attributes are not available in this version\" } */\n-- (int) dep_ins_mtharg: (int) i __attribute__((deprecated)) ;/* { dg-warning \"method attributes are not available in this version\" } */\n++ (id) dep_cls_mth __attribute__((deprecated)) ;\n+- (int) dep_ins_mth __attribute__((deprecated)) ;\n+- (int) dep_ins_mtharg: (int) i __attribute__((deprecated)) ;\n - (int) dep_ins_mtharg1: (int) i __attribute__((deprecated)) add: (int) j;/* { dg-error \"expected ';' or '\\{' after method attribute definition\" } */\n - (int) nodef __attribute__((deprecated)) { return var-2; } ; /* { dg-error \"expected ';' before '\\{' token\" } */\n __attribute__((deprecated))\n@@ -30,11 +30,11 @@ - (int) nodef { return var-2; } ;\n int foo (void)\n {\n   obj *p = [obj new];\n-  id n = [obj dep_cls_mth];\n+  id n = [obj dep_cls_mth];\t/* { dg-warning \"is deprecated\" } */\n   \n-  [p dep_ins_mth];\n-  [p dep_ins_mtharg:2];\n+  [p dep_ins_mth];\t\t/* { dg-warning \"is deprecated\" } */\n+  [p dep_ins_mtharg:2];\t\t/* { dg-warning \"is deprecated\" } */\n   [p dep_ins_mtharg1:3 add:3];\n-\n-  return [p mth];    \n+\t\n+  return [p mth];\n }"}, {"sha": "5a7b487106052629da3d8910d1f5fb0738639a01", "filename": "gcc/testsuite/objc.dg/attributes/method-attribute-2.m", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1178b309a5d316fe6040380a540807495acadc5/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fmethod-attribute-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1178b309a5d316fe6040380a540807495acadc5/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fmethod-attribute-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fmethod-attribute-2.m?ref=a1178b309a5d316fe6040380a540807495acadc5", "patch": "@@ -7,25 +7,27 @@ @interface obj : Object {\n @public \n   int var; \n } \n-- (int) depmtharg:(int) iarg __attribute__((deprecated)); /* { dg-warning \"method attributes are not available in this version\" } */\n-- (int) unusedarg:(int) __attribute__((unused)) uarg ; /* { dg-warning \"method parameter attributes are not available in this version\" } */\n-- (int) depunusedarg:(int) __attribute__((unused)) uarg __attribute__((deprecated)) ; /* { dg-warning \"method attributes are not available in this version\" } */\n-\t\t\t\t/* { dg-warning \"method parameter attributes are not available in this version\" \"\" { target *-*-* } 12 } */\n+- (int) depmth __attribute__((deprecated)); \n+- (int) depmtharg:(int) iarg __attribute__((deprecated)); \n+- (int) unusedarg:(int) __attribute__((unused)) uarg ;  /* { dg-warning \"method parameter attributes are not available in this version\" } */\n+- (int) depunusedarg:(int) __attribute__((unused)) uarg __attribute__((deprecated)) ; /* { dg-warning \"method parameter attributes are not available in this version\" } */\n @end\n \n @implementation obj\n-- (int) depmtharg:(int) iarg { return var + iarg ; };\n-- (int) unusedarg:(int) __attribute__((unused)) uarg { return var; } ; /* { dg-warning \"method parameter attributes are not available in this version\" } */\n-- (int) depunusedarg:(int) __attribute__((unused)) uarg { return var; }; /* { dg-warning \"method parameter attributes are not available in this version\" } */\n+- (int) depmth __attribute__((deprecated)) { return var; }  \n+- (int) depmtharg:(int) iarg { return var + iarg ; }\n+- (int) unusedarg:(int) __attribute__((unused)) uarg { return var; }  /* { dg-warning \"method parameter attributes are not available in this version\" } */\n+- (int) depunusedarg:(int) __attribute__((unused)) uarg { return var; } /* { dg-warning \"method parameter attributes are not available in this version\" } */\n @end \n \n int foo (void)\n {\n   obj *p = [obj new];\n   \n-  [p depmtharg:1];\n-  [p unusedarg:2];\n-  [p depunusedarg:3 ];\n+  [p depmth];\t\t/* { dg-warning \"is deprecated\" } */\n+  [p depmtharg:1];\t/* { dg-warning \"is deprecated\" } */\n+  [p unusedarg:2];\t/* { dg-bogus \"is deprecated\" } */\n+  [p depunusedarg:3 ];\t/* { dg-warning \"is deprecated\" } */\n \n-  return [p depmtharg:0];    \n+  return [p depmtharg:0]; /* { dg-warning \"is deprecated\" } */   \n }"}, {"sha": "de607a3d941533ff82028aad0af4f6e536bd2742", "filename": "gcc/testsuite/objc.dg/attributes/method-attribute-3.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1178b309a5d316fe6040380a540807495acadc5/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fmethod-attribute-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1178b309a5d316fe6040380a540807495acadc5/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fmethod-attribute-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fmethod-attribute-3.m?ref=a1178b309a5d316fe6040380a540807495acadc5", "patch": "@@ -6,7 +6,7 @@ @interface obj : Object {\n @public \n   int var;\n }\n-- (int) vargsn: (int) count, ... __attribute__((deprecated)); /* { dg-warning \" method attributes are not available in this version of the compiler\" } */\n+- (int) vargsn: (int) count, ... __attribute__((deprecated));\n @end\n \n @implementation obj\n@@ -20,5 +20,5 @@ int foo (void)\n {\n   obj *p = [obj new];\n   \n-  return [p vargsn:0];\n+  return [p vargsn:0];  /* { dg-warning \"'vargsn:' is deprecated .declared at \" } */\n }"}]}