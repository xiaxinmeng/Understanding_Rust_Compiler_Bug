{"sha": "3f624a624a137860e080fc959d7467a76aab263d", "node_id": "C_kwDOANBUbNoAKDNmNjI0YTYyNGExMzc4NjBlMDgwZmM5NTlkNzQ2N2E3NmFhYjI2M2Q", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2021-12-16T11:40:03Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2021-12-16T16:45:51Z"}, "message": "Fix timezone handling near year boundaries\n\nPR libfortran/98507\n\nlibgfortran/ChangeLog:\n\n\t* intrinsics/time_1.h: Prefer clock_gettime() over\n\t  gettimeofday().\n\t* intrinsics/date_and_time.c: Fix timezone wrapping.\n\ngcc/testsuite/ChangeLog:\n\n\t* gfortran.dg/date_and_time_1.f90: New file.", "tree": {"sha": "91e123ccaeb048f8435a21df811edbff52fc615f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91e123ccaeb048f8435a21df811edbff52fc615f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f624a624a137860e080fc959d7467a76aab263d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f624a624a137860e080fc959d7467a76aab263d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f624a624a137860e080fc959d7467a76aab263d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f624a624a137860e080fc959d7467a76aab263d/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41cc28405c74a5ec59c6725274aaedefa9ca5887", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41cc28405c74a5ec59c6725274aaedefa9ca5887", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41cc28405c74a5ec59c6725274aaedefa9ca5887"}], "stats": {"total": 73, "additions": 59, "deletions": 14}, "files": [{"sha": "9424e5023dd36a6e70bd0cd91e21d397cf607e09", "filename": "gcc/testsuite/gfortran.dg/date_and_time_1.f90", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f624a624a137860e080fc959d7467a76aab263d/gcc%2Ftestsuite%2Fgfortran.dg%2Fdate_and_time_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f624a624a137860e080fc959d7467a76aab263d/gcc%2Ftestsuite%2Fgfortran.dg%2Fdate_and_time_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdate_and_time_1.f90?ref=3f624a624a137860e080fc959d7467a76aab263d", "patch": "@@ -0,0 +1,35 @@\n+! PR libfortran/98507\n+! { dg-do run }\n+\n+program demo_time_and_date\n+  implicit none\n+  character(8)  :: date\n+  character(10) :: time\n+  character(5)  :: zone\n+  integer :: val(8)\n+  integer :: h, m\n+\n+  call date_and_time(values=val)\n+\n+  if (val(1) < 2000 .or. val(1) > 2100) stop 1\n+  if (val(2) < 1 .or. val(2) > 12) stop 2\n+  if (val(3) < 1 .or. val(3) > 31) stop 3\n+\n+  ! Maximum offset is 14 hours (UTC+14)\n+  if (val(4) < -14*60 .or. val(4) > 14*60) stop 4\n+\n+  if (val(5) < 0 .or. val(5) > 23) stop 5\n+  if (val(6) < 0 .or. val(6) > 59) stop 6\n+  if (val(7) < 0 .or. val(7) > 60) stop 7\n+  if (val(8) < 0 .or. val(8) > 999) stop 8\n+\n+  call date_and_time(zone=zone)\n+  if (len(zone) /= 0) then\n+    ! If ZONE is present, it should present the same information as\n+    ! given in VALUES(4)\n+    if (len(zone) /= 5) stop 9\n+    read(zone(1:3),*) h\n+    read(zone(4:5),*) m\n+    if (val(4) /= 60*h+m) stop 10\n+  endif\n+end"}, {"sha": "de40bbc964e4b97c3f6aeb52fbdab5ec08d9aaa3", "filename": "libgfortran/intrinsics/date_and_time.c", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f624a624a137860e080fc959d7467a76aab263d/libgfortran%2Fintrinsics%2Fdate_and_time.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f624a624a137860e080fc959d7467a76aab263d/libgfortran%2Fintrinsics%2Fdate_and_time.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fdate_and_time.c?ref=3f624a624a137860e080fc959d7467a76aab263d", "patch": "@@ -113,9 +113,6 @@ gmtime_r (const time_t * timep, struct tm * result)\n    VALUES for INTEGER(kind=4) and INTEGER(kind=8).\n \n    Based on libU77's date_time_.c.\n-\n-   TODO :\n-   - Check year boundaries.\n */\n #define DATE_LEN 8\n #define TIME_LEN 10   \n@@ -131,7 +128,7 @@ date_and_time (char *__date, char *__time, char *__zone,\n \t       gfc_array_i4 *__values, GFC_INTEGER_4 __date_len,\n \t       GFC_INTEGER_4 __time_len, GFC_INTEGER_4 __zone_len)\n {\n-  int i;\n+  int i, delta_day;\n   char date[DATE_LEN + 1];\n   char timec[TIME_LEN + 1];\n   char zone[ZONE_LEN + 1];\n@@ -154,9 +151,22 @@ date_and_time (char *__date, char *__time, char *__zone,\n       values[0] = 1900 + local_time.tm_year;\n       values[1] = 1 + local_time.tm_mon;\n       values[2] = local_time.tm_mday;\n-      values[3] = (local_time.tm_min - UTC_time.tm_min +\n-\t           60 * (local_time.tm_hour - UTC_time.tm_hour +\n-\t\t     24 * (local_time.tm_yday - UTC_time.tm_yday)));\n+\n+      /* Day difference with UTC should always be -1, 0 or +1.\n+\t Near year boundaries, we may obtain a large positive (+364,\n+\t or +365 on leap years) or negative (-364, or -365 on leap years)\n+\t number, which we have to handle.\n+\t https://gcc.gnu.org/bugzilla/show_bug.cgi?id=98507\n+       */\n+      delta_day = local_time.tm_yday - UTC_time.tm_yday;\n+      if (delta_day < -1)\n+\tdelta_day = 1;\n+      else if (delta_day > 1)\n+\tdelta_day = -1;\n+\n+      values[3] = local_time.tm_min - UTC_time.tm_min\n+\t\t  + 60 * (local_time.tm_hour - UTC_time.tm_hour + 24 * delta_day);\n+\n       values[4] = local_time.tm_hour;\n       values[5] = local_time.tm_min;\n       values[6] = local_time.tm_sec;"}, {"sha": "b2adca0c5f310fdbddedc2a9471501045421df93", "filename": "libgfortran/intrinsics/time_1.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f624a624a137860e080fc959d7467a76aab263d/libgfortran%2Fintrinsics%2Ftime_1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f624a624a137860e080fc959d7467a76aab263d/libgfortran%2Fintrinsics%2Ftime_1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Ftime_1.h?ref=3f624a624a137860e080fc959d7467a76aab263d", "patch": "@@ -213,19 +213,19 @@ gf_cputime (long *user_sec, long *user_usec, long *system_sec, long *system_usec\n static inline int\n gf_gettime (time_t * secs, long * usecs)\n {\n-#ifdef HAVE_GETTIMEOFDAY\n+#ifdef HAVE_CLOCK_GETTIME\n+  struct timespec ts;\n+  int err = clock_gettime (CLOCK_REALTIME, &ts);\n+  *secs = ts.tv_sec;\n+  *usecs = ts.tv_nsec / 1000;\n+  return err;\n+#elif defined(HAVE_GETTIMEOFDAY)\n   struct timeval tv;\n   int err;\n   err = gettimeofday (&tv, NULL);\n   *secs = tv.tv_sec;\n   *usecs = tv.tv_usec;\n   return err;\n-#elif defined(HAVE_CLOCK_GETTIME)\n-  struct timespec ts;\n-  int err = clock_gettime (CLOCK_REALTIME, &ts);\n-  *secs = ts.tv_sec;\n-  *usecs = ts.tv_nsec / 1000;\n-  return err;\n #else\n   time_t t = time (NULL);\n   *secs = t;"}]}