{"sha": "99361551624427aebe7a856a4327e083aa33733a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTkzNjE1NTE2MjQ0MjdhZWJlN2E4NTZhNDMyN2UwODNhYTMzNzMzYQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-08-14T08:34:12Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-08-14T08:34:12Z"}, "message": "[AArch64] Use unspecs for SVE conversions involving floats\n\nThis patch changes the SVE FP<->FP and FP<->INT patterns so that\nthey use unspecs rather than rtx codes, continuing the series\nto make the patterns work with predicates that might not be all-true.\n\n2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/aarch64.md (UNSPEC_FLOAT_CONVERT): Delete.\n\t* config/aarch64/iterators.md (UNSPEC_COND_FCVT, UNSPEC_COND_FCVTZS)\n\t(UNSPEC_COND_FCVTZU, UNSPEC_COND_SCVTF, UNSPEC_COND_UCVTF): New\n\tunspecs.\n\t(optab, su): Handle them.\n\t(SVE_COND_FCVTI, SVE_COND_ICVTF): New int iterators.\n\t* config/aarch64/aarch64-sve.md\n\t(<fix_trunc_optab><SVE_F:mode><v_int_equiv>2): Replace with...\n\t(<SVE_COND_FCVTI:optab><SVE_F:mode><v_int_equiv>2): ...this.\n\t(*<fix_trunc_optab>v16hsf<:SVE_HSDImode>2): Replace with...\n\t(*<SVE_COND_FCVTI:optab>v16hsf<SVE_F:mode>2): ...this.\n\t(*<fix_trunc_optab>vnx4sf<SVE_SDI:mode>2): Replace with...\n\t(*<SVE_COND_FCVTI:optab>vnx4sf<SVE_SDI:mode>2): ...this.\n\t(*<fix_trunc_optab>vnx2df<SVE_SDI:mode>2): Replace with...\n\t(*<SVE_COND_FCVTI:optab>vnx2df<SVE_SDI:mode>2): ...this.\n\t(vec_pack_<su>fix_trunc_vnx2df): Use SVE_COND_FCVTI instead of\n\tFIXUORS.\n\t(<FLOATUORS:optab><v_int_equiv><SVE_F:mode>2): Replace with...\n\t(<SVE_COND_ICVTF:optab><v_int_equiv><SVE_F:mode>2): ...this.\n\t(*<FLOATUORS:optab><SVE_HSDI:mode>vnx8hf2): Replace with...\n\t(*<SVE_COND_ICVTF:optab><SVE_HSDI:mode>vnx8hf2): ...this.\n\t(*<FLOATUORS:optab><SVE_SDI:mode>vnx4sf2): Replace with...\n\t(*<SVE_COND_ICVTF:optab><SVE_SDI:mode>vnx4sf2): ...this.\n\t(aarch64_sve_<FLOATUORS:optab><SVE_SDI:mode>vnx2df2): Replace with...\n\t(aarch64_sve_<SVE_COND_ICVTF:optab><SVE_SDI:mode>vnx2df2): ...this.\n\t(vec_unpack<su_optab>_float_<perm_hilo>_vnx4si): Pass a GP strictness\n\toperand to aarch64_sve_<SVE_COND_ICVTF:optab><SVE_SDI:mode>vnx2df2.\n\t(vec_pack_trunc_<SVE_HSF:Vwide>, *trunc<Vwide><SVE_HSF:mode>2)\n\t(aarch64_sve_extend<mode><Vwide>2): Use UNSPEC_COND_FCVT instead\n\tof UNSPEC_FLOAT_CONVERT.\n\t(vec_unpacks_<perm_hilo>_<mode>): Pass a GP strictness operand to\n\taarch64_sve_extend<mode><Vwide>2.\n\nFrom-SVN: r274423", "tree": {"sha": "a44b33b8b62fe7074f4f9e25e85fca4e2b2f77a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a44b33b8b62fe7074f4f9e25e85fca4e2b2f77a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99361551624427aebe7a856a4327e083aa33733a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99361551624427aebe7a856a4327e083aa33733a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99361551624427aebe7a856a4327e083aa33733a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99361551624427aebe7a856a4327e083aa33733a/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c6521daac82b717bad7e9e90dc8dd3c4e24ba2c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6521daac82b717bad7e9e90dc8dd3c4e24ba2c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6521daac82b717bad7e9e90dc8dd3c4e24ba2c2"}], "stats": {"total": 165, "additions": 109, "deletions": 56}, "files": [{"sha": "2f2a8a44f6b5864d8009a90a9d73a4ae144f1a48", "filename": "gcc/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99361551624427aebe7a856a4327e083aa33733a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99361551624427aebe7a856a4327e083aa33733a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=99361551624427aebe7a856a4327e083aa33733a", "patch": "@@ -1,3 +1,38 @@\n+2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64.md (UNSPEC_FLOAT_CONVERT): Delete.\n+\t* config/aarch64/iterators.md (UNSPEC_COND_FCVT, UNSPEC_COND_FCVTZS)\n+\t(UNSPEC_COND_FCVTZU, UNSPEC_COND_SCVTF, UNSPEC_COND_UCVTF): New\n+\tunspecs.\n+\t(optab, su): Handle them.\n+\t(SVE_COND_FCVTI, SVE_COND_ICVTF): New int iterators.\n+\t* config/aarch64/aarch64-sve.md\n+\t(<fix_trunc_optab><SVE_F:mode><v_int_equiv>2): Replace with...\n+\t(<SVE_COND_FCVTI:optab><SVE_F:mode><v_int_equiv>2): ...this.\n+\t(*<fix_trunc_optab>v16hsf<:SVE_HSDImode>2): Replace with...\n+\t(*<SVE_COND_FCVTI:optab>v16hsf<SVE_F:mode>2): ...this.\n+\t(*<fix_trunc_optab>vnx4sf<SVE_SDI:mode>2): Replace with...\n+\t(*<SVE_COND_FCVTI:optab>vnx4sf<SVE_SDI:mode>2): ...this.\n+\t(*<fix_trunc_optab>vnx2df<SVE_SDI:mode>2): Replace with...\n+\t(*<SVE_COND_FCVTI:optab>vnx2df<SVE_SDI:mode>2): ...this.\n+\t(vec_pack_<su>fix_trunc_vnx2df): Use SVE_COND_FCVTI instead of\n+\tFIXUORS.\n+\t(<FLOATUORS:optab><v_int_equiv><SVE_F:mode>2): Replace with...\n+\t(<SVE_COND_ICVTF:optab><v_int_equiv><SVE_F:mode>2): ...this.\n+\t(*<FLOATUORS:optab><SVE_HSDI:mode>vnx8hf2): Replace with...\n+\t(*<SVE_COND_ICVTF:optab><SVE_HSDI:mode>vnx8hf2): ...this.\n+\t(*<FLOATUORS:optab><SVE_SDI:mode>vnx4sf2): Replace with...\n+\t(*<SVE_COND_ICVTF:optab><SVE_SDI:mode>vnx4sf2): ...this.\n+\t(aarch64_sve_<FLOATUORS:optab><SVE_SDI:mode>vnx2df2): Replace with...\n+\t(aarch64_sve_<SVE_COND_ICVTF:optab><SVE_SDI:mode>vnx2df2): ...this.\n+\t(vec_unpack<su_optab>_float_<perm_hilo>_vnx4si): Pass a GP strictness\n+\toperand to aarch64_sve_<SVE_COND_ICVTF:optab><SVE_SDI:mode>vnx2df2.\n+\t(vec_pack_trunc_<SVE_HSF:Vwide>, *trunc<Vwide><SVE_HSF:mode>2)\n+\t(aarch64_sve_extend<mode><Vwide>2): Use UNSPEC_COND_FCVT instead\n+\tof UNSPEC_FLOAT_CONVERT.\n+\t(vec_unpacks_<perm_hilo>_<mode>): Pass a GP strictness operand to\n+\taarch64_sve_extend<mode><Vwide>2.\n+\n 2019-08-14  Richard Biener  <rguenther@suse.de>\n \n \tPR target/91154"}, {"sha": "0c9d4c596f9ec810ae9533acb554d038b61031b4", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 55, "deletions": 53, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99361551624427aebe7a856a4327e083aa33733a/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99361551624427aebe7a856a4327e083aa33733a/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=99361551624427aebe7a856a4327e083aa33733a", "patch": "@@ -3643,51 +3643,51 @@\n \n ;; Unpredicated conversion of floats to integers of the same size (HF to HI,\n ;; SF to SI or DF to DI).\n-(define_expand \"<fix_trunc_optab><mode><v_int_equiv>2\"\n+(define_expand \"<optab><mode><v_int_equiv>2\"\n   [(set (match_operand:<V_INT_EQUIV> 0 \"register_operand\")\n \t(unspec:<V_INT_EQUIV>\n \t  [(match_dup 2)\n-\t   (FIXUORS:<V_INT_EQUIV>\n-\t     (match_operand:SVE_F 1 \"register_operand\"))]\n-\t  UNSPEC_MERGE_PTRUE))]\n+\t   (const_int SVE_RELAXED_GP)\n+\t   (match_operand:SVE_F 1 \"register_operand\")]\n+\t  SVE_COND_FCVTI))]\n   \"TARGET_SVE\"\n   {\n     operands[2] = aarch64_ptrue_reg (<VPRED>mode);\n   }\n )\n \n ;; Conversion of SF to DI, SI or HI, predicated with a PTRUE.\n-(define_insn \"*<fix_trunc_optab>v16hsf<mode>2\"\n+(define_insn \"*<optab>v16hsf<mode>2\"\n   [(set (match_operand:SVE_HSDI 0 \"register_operand\" \"=w\")\n \t(unspec:SVE_HSDI\n \t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl\")\n-\t   (FIXUORS:SVE_HSDI\n-\t     (match_operand:VNx8HF 2 \"register_operand\" \"w\"))]\n-\t  UNSPEC_MERGE_PTRUE))]\n+\t   (match_operand:SI 3 \"aarch64_sve_gp_strictness\")\n+\t   (match_operand:VNx8HF 2 \"register_operand\" \"w\")]\n+\t  SVE_COND_FCVTI))]\n   \"TARGET_SVE\"\n   \"fcvtz<su>\\t%0.<Vetype>, %1/m, %2.h\"\n )\n \n ;; Conversion of SF to DI or SI, predicated with a PTRUE.\n-(define_insn \"*<fix_trunc_optab>vnx4sf<mode>2\"\n+(define_insn \"*<optab>vnx4sf<mode>2\"\n   [(set (match_operand:SVE_SDI 0 \"register_operand\" \"=w\")\n \t(unspec:SVE_SDI\n \t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl\")\n-\t   (FIXUORS:SVE_SDI\n-\t     (match_operand:VNx4SF 2 \"register_operand\" \"w\"))]\n-\t  UNSPEC_MERGE_PTRUE))]\n+\t   (match_operand:SI 3 \"aarch64_sve_gp_strictness\")\n+\t   (match_operand:VNx4SF 2 \"register_operand\" \"w\")]\n+\t  SVE_COND_FCVTI))]\n   \"TARGET_SVE\"\n   \"fcvtz<su>\\t%0.<Vetype>, %1/m, %2.s\"\n )\n \n ;; Conversion of DF to DI or SI, predicated with a PTRUE.\n-(define_insn \"*<fix_trunc_optab>vnx2df<mode>2\"\n+(define_insn \"*<optab>vnx2df<mode>2\"\n   [(set (match_operand:SVE_SDI 0 \"register_operand\" \"=w\")\n \t(unspec:SVE_SDI\n \t  [(match_operand:VNx2BI 1 \"register_operand\" \"Upl\")\n-\t   (FIXUORS:SVE_SDI\n-\t     (match_operand:VNx2DF 2 \"register_operand\" \"w\"))]\n-\t  UNSPEC_MERGE_PTRUE))]\n+\t   (match_operand:SI 3 \"aarch64_sve_gp_strictness\")\n+\t   (match_operand:VNx2DF 2 \"register_operand\" \"w\")]\n+\t  SVE_COND_FCVTI))]\n   \"TARGET_SVE\"\n   \"fcvtz<su>\\t%0.<Vetype>, %1/m, %2.d\"\n )\n@@ -3703,13 +3703,15 @@\n   [(set (match_dup 4)\n \t(unspec:VNx4SI\n \t  [(match_dup 3)\n-\t   (FIXUORS:VNx4SI (match_operand:VNx2DF 1 \"register_operand\"))]\n-\t  UNSPEC_MERGE_PTRUE))\n+\t   (const_int SVE_RELAXED_GP)\n+\t   (match_operand:VNx2DF 1 \"register_operand\")]\n+\t  SVE_COND_FCVTI))\n    (set (match_dup 5)\n \t(unspec:VNx4SI\n \t  [(match_dup 3)\n-\t   (FIXUORS:VNx4SI (match_operand:VNx2DF 2 \"register_operand\"))]\n-\t  UNSPEC_MERGE_PTRUE))\n+\t   (const_int SVE_RELAXED_GP)\n+\t   (match_operand:VNx2DF 2 \"register_operand\")]\n+\t  SVE_COND_FCVTI))\n    (set (match_operand:VNx4SI 0 \"register_operand\")\n \t(unspec:VNx4SI [(match_dup 4) (match_dup 5)] UNSPEC_UZP1))]\n   \"TARGET_SVE\"\n@@ -3740,9 +3742,9 @@\n   [(set (match_operand:SVE_F 0 \"register_operand\")\n \t(unspec:SVE_F\n \t  [(match_dup 2)\n-\t   (FLOATUORS:SVE_F\n-\t     (match_operand:<V_INT_EQUIV> 1 \"register_operand\"))]\n-\t  UNSPEC_MERGE_PTRUE))]\n+\t   (const_int SVE_RELAXED_GP)\n+\t   (match_operand:<V_INT_EQUIV> 1 \"register_operand\")]\n+\t  SVE_COND_ICVTF))]\n   \"TARGET_SVE\"\n   {\n     operands[2] = aarch64_ptrue_reg (<VPRED>mode);\n@@ -3755,35 +3757,35 @@\n   [(set (match_operand:VNx8HF 0 \"register_operand\" \"=w\")\n \t(unspec:VNx8HF\n \t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl\")\n-\t   (FLOATUORS:VNx8HF\n-\t     (match_operand:SVE_HSDI 2 \"register_operand\" \"w\"))]\n-\t  UNSPEC_MERGE_PTRUE))]\n+\t   (match_operand:SI 3 \"aarch64_sve_gp_strictness\")\n+\t   (match_operand:SVE_HSDI 2 \"register_operand\" \"w\")]\n+\t  SVE_COND_ICVTF))]\n   \"TARGET_SVE\"\n-  \"<su_optab>cvtf\\t%0.h, %1/m, %2.<Vetype>\"\n+  \"<su>cvtf\\t%0.h, %1/m, %2.<Vetype>\"\n )\n \n ;; Conversion of DI or SI to the same number of SFs, predicated with a PTRUE.\n (define_insn \"*<optab><mode>vnx4sf2\"\n   [(set (match_operand:VNx4SF 0 \"register_operand\" \"=w\")\n \t(unspec:VNx4SF\n \t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl\")\n-\t   (FLOATUORS:VNx4SF\n-\t     (match_operand:SVE_SDI 2 \"register_operand\" \"w\"))]\n-\t  UNSPEC_MERGE_PTRUE))]\n+\t   (match_operand:SI 3 \"aarch64_sve_gp_strictness\")\n+\t   (match_operand:SVE_SDI 2 \"register_operand\" \"w\")]\n+\t  SVE_COND_ICVTF))]\n   \"TARGET_SVE\"\n-  \"<su_optab>cvtf\\t%0.s, %1/m, %2.<Vetype>\"\n+  \"<su>cvtf\\t%0.s, %1/m, %2.<Vetype>\"\n )\n \n ;; Conversion of DI or SI to DF, predicated with a PTRUE.\n (define_insn \"aarch64_sve_<optab><mode>vnx2df2\"\n   [(set (match_operand:VNx2DF 0 \"register_operand\" \"=w\")\n \t(unspec:VNx2DF\n \t  [(match_operand:VNx2BI 1 \"register_operand\" \"Upl\")\n-\t   (FLOATUORS:VNx2DF\n-\t     (match_operand:SVE_SDI 2 \"register_operand\" \"w\"))]\n-\t  UNSPEC_MERGE_PTRUE))]\n+\t   (match_operand:SI 3 \"aarch64_sve_gp_strictness\")\n+\t   (match_operand:SVE_SDI 2 \"register_operand\" \"w\")]\n+\t  SVE_COND_ICVTF))]\n   \"TARGET_SVE\"\n-  \"<su_optab>cvtf\\t%0.d, %1/m, %2.<Vetype>\"\n+  \"<su>cvtf\\t%0.d, %1/m, %2.<Vetype>\"\n )\n \n ;; -------------------------------------------------------------------------\n@@ -3818,8 +3820,9 @@\n \t\t: gen_aarch64_sve_zip1vnx4si)\n \t       (temp, operands[1], operands[1]));\n     rtx ptrue = aarch64_ptrue_reg (VNx2BImode);\n-    emit_insn (gen_aarch64_sve_<FLOATUORS:optab>vnx4sivnx2df2 (operands[0],\n-\t\t\t\t\t\t\t       ptrue, temp));\n+    rtx strictness = gen_int_mode (SVE_RELAXED_GP, SImode);\n+    emit_insn (gen_aarch64_sve_<FLOATUORS:optab>vnx4sivnx2df2\n+\t       (operands[0], ptrue, temp, strictness));\n     DONE;\n   }\n )\n@@ -3837,15 +3840,15 @@\n   [(set (match_dup 4)\n \t(unspec:SVE_HSF\n \t  [(match_dup 3)\n-\t   (unspec:SVE_HSF [(match_operand:<VWIDE> 1 \"register_operand\")]\n-\t\t\t   UNSPEC_FLOAT_CONVERT)]\n-\t  UNSPEC_MERGE_PTRUE))\n+\t   (const_int SVE_RELAXED_GP)\n+\t   (match_operand:<VWIDE> 1 \"register_operand\")]\n+\t  UNSPEC_COND_FCVT))\n    (set (match_dup 5)\n \t(unspec:SVE_HSF\n \t  [(match_dup 3)\n-\t   (unspec:SVE_HSF [(match_operand:<VWIDE> 2 \"register_operand\")]\n-\t\t\t   UNSPEC_FLOAT_CONVERT)]\n-\t  UNSPEC_MERGE_PTRUE))\n+\t   (const_int SVE_RELAXED_GP)\n+\t   (match_operand:<VWIDE> 2 \"register_operand\")]\n+\t  UNSPEC_COND_FCVT))\n    (set (match_operand:SVE_HSF 0 \"register_operand\")\n \t(unspec:SVE_HSF [(match_dup 4) (match_dup 5)] UNSPEC_UZP1))]\n   \"TARGET_SVE\"\n@@ -3862,10 +3865,9 @@\n   [(set (match_operand:SVE_HSF 0 \"register_operand\" \"=w\")\n \t(unspec:SVE_HSF\n \t  [(match_operand:<VWIDE_PRED> 1 \"register_operand\" \"Upl\")\n-\t   (unspec:SVE_HSF\n-\t     [(match_operand:<VWIDE> 2 \"register_operand\" \"w\")]\n-\t     UNSPEC_FLOAT_CONVERT)]\n-\t  UNSPEC_MERGE_PTRUE))]\n+\t   (match_operand:SI 3 \"aarch64_sve_gp_strictness\")\n+\t   (match_operand:<VWIDE> 2 \"register_operand\" \"w\")]\n+\t  UNSPEC_COND_FCVT))]\n   \"TARGET_SVE\"\n   \"fcvt\\t%0.<Vetype>, %1/m, %2.<Vewtype>\"\n )\n@@ -3896,8 +3898,9 @@\n \t\t: gen_aarch64_sve_zip1<mode>)\n \t\t(temp, operands[1], operands[1]));\n     rtx ptrue = aarch64_ptrue_reg (<VWIDE_PRED>mode);\n-    emit_insn (gen_aarch64_sve_extend<mode><Vwide>2 (operands[0],\n-\t\t\t\t\t\t     ptrue, temp));\n+    rtx strictness = gen_int_mode (SVE_RELAXED_GP, SImode);\n+    emit_insn (gen_aarch64_sve_extend<mode><Vwide>2\n+\t       (operands[0], ptrue, temp, strictness));\n     DONE;\n   }\n )\n@@ -3908,10 +3911,9 @@\n   [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n \t(unspec:<VWIDE>\n \t  [(match_operand:<VWIDE_PRED> 1 \"register_operand\" \"Upl\")\n-\t   (unspec:<VWIDE>\n-\t     [(match_operand:SVE_HSF 2 \"register_operand\" \"w\")]\n-\t     UNSPEC_FLOAT_CONVERT)]\n-\t  UNSPEC_MERGE_PTRUE))]\n+\t   (match_operand:SI 3 \"aarch64_sve_gp_strictness\")\n+\t   (match_operand:SVE_HSF 2 \"register_operand\" \"w\")]\n+\t  UNSPEC_COND_FCVT))]\n   \"TARGET_SVE\"\n   \"fcvt\\t%0.<Vewtype>, %1/m, %2.<Vetype>\"\n )"}, {"sha": "850c6ada2a5ef7b58a927281cc39202534034b57", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99361551624427aebe7a856a4327e083aa33733a/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99361551624427aebe7a856a4327e083aa33733a/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=99361551624427aebe7a856a4327e083aa33733a", "patch": "@@ -226,7 +226,6 @@\n     UNSPEC_UNPACKSLO\n     UNSPEC_UNPACKULO\n     UNSPEC_PACK\n-    UNSPEC_FLOAT_CONVERT\n     UNSPEC_WHILE_LO\n     UNSPEC_LDN\n     UNSPEC_STN"}, {"sha": "05adbba9f16433ede22ef419c36522b19b5e350e", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99361551624427aebe7a856a4327e083aa33733a/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99361551624427aebe7a856a4327e083aa33733a/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=99361551624427aebe7a856a4327e083aa33733a", "patch": "@@ -480,6 +480,9 @@\n     UNSPEC_COND_FCMLT\t; Used in aarch64-sve.md.\n     UNSPEC_COND_FCMNE\t; Used in aarch64-sve.md.\n     UNSPEC_COND_FCMUO\t; Used in aarch64-sve.md.\n+    UNSPEC_COND_FCVT\t; Used in aarch64-sve.md.\n+    UNSPEC_COND_FCVTZS\t; Used in aarch64-sve.md.\n+    UNSPEC_COND_FCVTZU\t; Used in aarch64-sve.md.\n     UNSPEC_COND_FDIV\t; Used in aarch64-sve.md.\n     UNSPEC_COND_FMAXNM\t; Used in aarch64-sve.md.\n     UNSPEC_COND_FMINNM\t; Used in aarch64-sve.md.\n@@ -498,6 +501,8 @@\n     UNSPEC_COND_FRINTZ\t; Used in aarch64-sve.md.\n     UNSPEC_COND_FSQRT\t; Used in aarch64-sve.md.\n     UNSPEC_COND_FSUB\t; Used in aarch64-sve.md.\n+    UNSPEC_COND_SCVTF\t; Used in aarch64-sve.md.\n+    UNSPEC_COND_UCVTF\t; Used in aarch64-sve.md.\n     UNSPEC_LASTB\t; Used in aarch64-sve.md.\n     UNSPEC_FCADD90\t; Used in aarch64-simd.md.\n     UNSPEC_FCADD270\t; Used in aarch64-simd.md.\n@@ -1642,6 +1647,9 @@\n \t\t\t\t\tUNSPEC_COND_FRINTZ\n \t\t\t\t\tUNSPEC_COND_FSQRT])\n \n+(define_int_iterator SVE_COND_FCVTI [UNSPEC_COND_FCVTZS UNSPEC_COND_FCVTZU])\n+(define_int_iterator SVE_COND_ICVTF [UNSPEC_COND_SCVTF UNSPEC_COND_UCVTF])\n+\n (define_int_iterator SVE_COND_FP_BINARY [UNSPEC_COND_FADD\n \t\t\t\t\t UNSPEC_COND_FDIV\n \t\t\t\t\t UNSPEC_COND_FMAXNM\n@@ -1715,6 +1723,9 @@\n \t\t\t(UNSPEC_FMINV \"smin_nan\")\n \t\t\t(UNSPEC_COND_FABS \"abs\")\n \t\t\t(UNSPEC_COND_FADD \"add\")\n+\t\t\t(UNSPEC_COND_FCVT \"fcvt\")\n+\t\t\t(UNSPEC_COND_FCVTZS \"fix_trunc\")\n+\t\t\t(UNSPEC_COND_FCVTZU \"fixuns_trunc\")\n \t\t\t(UNSPEC_COND_FDIV \"div\")\n \t\t\t(UNSPEC_COND_FMAXNM \"smax\")\n \t\t\t(UNSPEC_COND_FMINNM \"smin\")\n@@ -1732,7 +1743,9 @@\n \t\t\t(UNSPEC_COND_FRINTX \"rint\")\n \t\t\t(UNSPEC_COND_FRINTZ \"btrunc\")\n \t\t\t(UNSPEC_COND_FSQRT \"sqrt\")\n-\t\t\t(UNSPEC_COND_FSUB \"sub\")])\n+\t\t\t(UNSPEC_COND_FSUB \"sub\")\n+\t\t\t(UNSPEC_COND_SCVTF \"float\")\n+\t\t\t(UNSPEC_COND_UCVTF \"floatuns\")])\n \n (define_int_attr  maxmin_uns [(UNSPEC_UMAXV \"umax\")\n \t\t\t      (UNSPEC_UMINV \"umin\")\n@@ -1773,7 +1786,11 @@\n \t\t     (UNSPEC_UNPACKSLO \"s\")\n \t\t     (UNSPEC_UNPACKULO \"u\")\n \t\t     (UNSPEC_SMUL_HIGHPART \"s\")\n-\t\t     (UNSPEC_UMUL_HIGHPART \"u\")])\n+\t\t     (UNSPEC_UMUL_HIGHPART \"u\")\n+\t\t     (UNSPEC_COND_FCVTZS \"s\")\n+\t\t     (UNSPEC_COND_FCVTZU \"u\")\n+\t\t     (UNSPEC_COND_SCVTF \"s\")\n+\t\t     (UNSPEC_COND_UCVTF \"u\")])\n \n (define_int_attr sur [(UNSPEC_SHADD \"s\") (UNSPEC_UHADD \"u\")\n \t\t      (UNSPEC_SRHADD \"sr\") (UNSPEC_URHADD \"ur\")"}]}