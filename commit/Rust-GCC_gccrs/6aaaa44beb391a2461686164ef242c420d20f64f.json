{"sha": "6aaaa44beb391a2461686164ef242c420d20f64f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmFhYWE0NGJlYjM5MWEyNDYxNjg2MTY0ZWYyNDJjNDIwZDIwZjY0Zg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2006-05-13T18:41:38Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2006-05-13T18:41:38Z"}, "message": "sources.am, [...]: Rebuilt.\n\n\t* sources.am, Makefile.in: Rebuilt.\n\t* java/text/DateFormat.java: Removed.\n\nFrom-SVN: r113740", "tree": {"sha": "26b2cd0a0a5a12eb356b1fc281e519ab219158d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26b2cd0a0a5a12eb356b1fc281e519ab219158d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6aaaa44beb391a2461686164ef242c420d20f64f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6aaaa44beb391a2461686164ef242c420d20f64f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6aaaa44beb391a2461686164ef242c420d20f64f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6aaaa44beb391a2461686164ef242c420d20f64f/comments", "author": null, "committer": null, "parents": [{"sha": "8d288df0fecb9fb5eb85a13b31a5811cd94d7eec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d288df0fecb9fb5eb85a13b31a5811cd94d7eec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d288df0fecb9fb5eb85a13b31a5811cd94d7eec"}], "stats": {"total": 933, "additions": 7, "deletions": 926}, "files": [{"sha": "87c18c1798f6e3ae03f0917f42de48622db0fbdc", "filename": "libjava/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aaaa44beb391a2461686164ef242c420d20f64f/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aaaa44beb391a2461686164ef242c420d20f64f/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=6aaaa44beb391a2461686164ef242c420d20f64f", "patch": "@@ -1,3 +1,8 @@\n+2006-05-13  Tom Tromey  <tromey@redhat.com>\n+\n+\t* sources.am, Makefile.in: Rebuilt.\n+\t* java/text/DateFormat.java: Removed.\n+\n 2006-05-13  Tom Tromey  <tromey@redhat.com>\n \n \t* sources.am, Makefile.in: Rebuilt."}, {"sha": "dbadd612ef22471c44212033dc31516fff5ae087", "filename": "libjava/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aaaa44beb391a2461686164ef242c420d20f64f/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aaaa44beb391a2461686164ef242c420d20f64f/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=6aaaa44beb391a2461686164ef242c420d20f64f", "patch": "@@ -4137,7 +4137,7 @@ classpath/java/text/ChoiceFormat.java \\\n classpath/java/text/CollationElementIterator.java \\\n classpath/java/text/CollationKey.java \\\n java/text/Collator.java \\\n-java/text/DateFormat.java \\\n+classpath/java/text/DateFormat.java \\\n java/text/DateFormatSymbols.java \\\n classpath/java/text/DecimalFormat.java \\\n java/text/DecimalFormatSymbols.java \\"}, {"sha": "c94d9845b3004262487e9666a0a9b7b4166dfe35", "filename": "libjava/java/text/DateFormat.java", "status": "removed", "additions": 0, "deletions": 924, "changes": 924, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d288df0fecb9fb5eb85a13b31a5811cd94d7eec/libjava%2Fjava%2Ftext%2FDateFormat.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d288df0fecb9fb5eb85a13b31a5811cd94d7eec/libjava%2Fjava%2Ftext%2FDateFormat.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Ftext%2FDateFormat.java?ref=8d288df0fecb9fb5eb85a13b31a5811cd94d7eec", "patch": "@@ -1,924 +0,0 @@\n-/* DateFormat.java -- Class for formatting/parsing date/times\n-   Copyright (C) 1998, 1999, 2000, 2001, 2003, 2004, 2005\n-   Free Software Foundation, Inc.\n-\n-This file is part of GNU Classpath.\n-\n-GNU Classpath is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 2, or (at your option)\n-any later version.\n- \n-GNU Classpath is distributed in the hope that it will be useful, but\n-WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GNU Classpath; see the file COPYING.  If not, write to the\n-Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n-02110-1301 USA.\n-\n-Linking this library statically or dynamically with other modules is\n-making a combined work based on this library.  Thus, the terms and\n-conditions of the GNU General Public License cover the whole\n-combination.\n-\n-As a special exception, the copyright holders of this library give you\n-permission to link this library with independent modules to produce an\n-executable, regardless of the license terms of these independent\n-modules, and to copy and distribute the resulting executable under\n-terms of your choice, provided that you also meet, for each linked\n-independent module, the terms and conditions of the license of that\n-module.  An independent module is a module which is not derived from\n-or based on this library.  If you modify this library, you may extend\n-this exception to your version of the library, but you are not\n-obligated to do so.  If you do not wish to do so, delete this\n-exception statement from your version. */\n-\n-\n-package java.text;\n-\n-import java.io.InvalidObjectException;\n-import java.util.Calendar;\n-import java.util.Date;\n-import java.util.Locale;\n-import java.util.MissingResourceException;\n-import java.util.ResourceBundle;\n-import java.util.TimeZone;\n-\n-/**\n- * @author Per Bothner (bothner@cygnus.com)\n- * @date October 25, 1998.\n- */\n-/* Written using \"Java Class Libraries\", 2nd edition, plus online\n- * API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Mostly complete; search for FIXME to see omissions.\n- */\n-\n-public abstract class DateFormat extends Format implements Cloneable\n-{\n-  private static final long serialVersionUID = 7218322306649953788L;\n-\n-  // Names fixed by serialization spec.\n-  protected Calendar calendar;\n-  protected NumberFormat numberFormat;\n-\n-  // (Values determined using a test program.)\n-  public static final int FULL = 0;\n-  public static final int LONG = 1;\n-  public static final int MEDIUM = 2;\n-  public static final int SHORT = 3;\n-  public static final int DEFAULT = MEDIUM;\n-\n-  /* These constants need to have these exact values.  They\n-   * correspond to index positions within the localPatternChars\n-   * string for a given locale.  Each locale may specify its\n-   * own character for a particular field, but the position\n-   * of these characters must correspond to an appropriate field\n-   * number (as listed below), in order for their meaning to\n-   * be determined.  For example, the US locale uses\n-   * the string \"GyMdkHmsSEDFwWahKzYeugAZ\", where 'G' is the character\n-   * for era, 'y' for year, and so on down to 'Z' for time zone.\n-   */\n-  /**\n-   * Represents the position of the era\n-   * pattern character in the array of\n-   * localized pattern characters. \n-   * For example, 'AD' is an era used\n-   * in the Gregorian calendar system.\n-   * In the U.S. locale, this is 'G'.\n-   */  \n-  public static final int ERA_FIELD = 0;\n-  /**\n-   * Represents the position of the year\n-   * pattern character in the array of\n-   * localized pattern characters.\n-   * In the U.S. locale, this is 'y'.\n-   */\n-  public static final int YEAR_FIELD = 1;\n-  /**\n-   * Represents the position of the month\n-   * pattern character in the array of\n-   * localized pattern characters.\n-   * In the U.S. locale, this is 'M'.\n-   */\n-  public static final int MONTH_FIELD = 2;\n-  /**\n-   * Represents the position of the date\n-   * or day of the month pattern character\n-   * in the array of localized pattern\n-   * characters.  In the U.S. locale,\n-   * this is 'd'.\n-   */\n-  public static final int DATE_FIELD = 3;\n-  /**\n-   * Represents the position of the 24\n-   * hour pattern character in the array of\n-   * localized pattern characters.\n-   * In the U.S. locale, this is 'k'.\n-   * This field numbers hours from 1 to 24.\n-   */\n-  public static final int HOUR_OF_DAY1_FIELD = 4;\n-  /**\n-   * Represents the position of the 24\n-   * hour pattern character in the array of\n-   * localized pattern characters.\n-   * In the U.S. locale, this is 'H'.\n-   * This field numbers hours from 0 to 23.\n-   */\n-  public static final int HOUR_OF_DAY0_FIELD = 5;\n-  /**\n-   * Represents the position of the minute\n-   * pattern character in the array of\n-   * localized pattern characters.\n-   * In the U.S. locale, this is 'm'.\n-   */\n-  public static final int MINUTE_FIELD = 6;\n-  /**\n-   * Represents the position of the second\n-   * pattern character in the array of\n-   * localized pattern characters.\n-   * In the U.S. locale, this is 's'.\n-   */\n-  public static final int SECOND_FIELD = 7;\n-  /**\n-   * Represents the position of the millisecond\n-   * pattern character in the array of\n-   * localized pattern characters.\n-   * In the U.S. locale, this is 'S'.\n-   */\n-  public static final int MILLISECOND_FIELD = 8;\n-  /**\n-   * Represents the position of the day of the\n-   * week pattern character in the array of\n-   * localized pattern characters.\n-   * In the U.S. locale, this is 'E'.\n-   */\n-  public static final int DAY_OF_WEEK_FIELD = 9;\n-  /**\n-   * Represents the position of the day of the\n-   * year pattern character in the array of\n-   * localized pattern characters.\n-   * In the U.S. locale, this is 'D'.\n-   */\n-  public static final int DAY_OF_YEAR_FIELD = 10;\n-  /**\n-   * Represents the position of the day of the\n-   * week in the month pattern character in the\n-   * array of localized pattern characters.\n-   * In the U.S. locale, this is 'F'.\n-   */\n-  public static final int DAY_OF_WEEK_IN_MONTH_FIELD = 11;\n-  /**\n-   * Represents the position of the week of the\n-   * year pattern character in the array of\n-   * localized pattern characters.\n-   * In the U.S. locale, this is 'w'.\n-   */\n-  public static final int WEEK_OF_YEAR_FIELD = 12;\n-  /**\n-   * Represents the position of the week of the\n-   * month pattern character in the array of\n-   * localized pattern characters.\n-   * In the U.S. locale, this is 'W'.\n-   */\n-  public static final int WEEK_OF_MONTH_FIELD = 13;\n-  /**\n-   * Represents the position of the am/pm\n-   * pattern character in the array of\n-   * localized pattern characters.\n-   * In the U.S. locale, this is 'a'.\n-   */\n-  public static final int AM_PM_FIELD = 14;\n-  /**\n-   * Represents the position of the 12 \n-   * hour pattern character in the array of\n-   * localized pattern characters.\n-   * In the U.S. locale, this is 'h'.\n-   * This field numbers hours from 1 to 12.\n-   */\n-  public static final int HOUR1_FIELD = 15;\n-  /**\n-   * Represents the position of the 12 \n-   * hour pattern character in the array of\n-   * localized pattern characters.\n-   * In the U.S. locale, this is 'K'.\n-   * This field numbers hours from 0 to 11.\n-   */\n-  public static final int HOUR0_FIELD = 16;\n-  /**\n-   * Represents the position of the generic\n-   * timezone pattern character in the array of\n-   * localized pattern characters.\n-   * In the U.S. locale, this is 'z'.\n-   */\n-  public static final int TIMEZONE_FIELD = 17;\n-  /**\n-   * Represents the position of the ISO year\n-   * pattern character in the array of\n-   * localized pattern characters.\n-   * In the U.S. locale, this is 'Y'.\n-   * This is a GNU extension in accordance with\n-   * the CLDR data used.  This value may\n-   * differ from the normal year value.\n-   */\n-  public static final int ISO_YEAR_FIELD = 18;\n-  /**\n-   * Represents the position of the localized\n-   * day of the week pattern character in the\n-   * array of localized pattern characters.\n-   * In the U.S. locale, this is 'e'.\n-   * This is a GNU extension in accordance with\n-   * the CLDR data used.  This value only\n-   * differs from the day of the week with\n-   * numeric formatting, in which case the\n-   * locale's first day of the week is used.\n-   */\n-  public static final int LOCALIZED_DAY_OF_WEEK_FIELD = 19;\n-  /**\n-   * Represents the position of the extended year\n-   * pattern character in the array of\n-   * localized pattern characters.\n-   * In the U.S. locale, this is 'u'.\n-   * This is a GNU extension in accordance with\n-   * the CLDR data used.  This value modifies\n-   * the year value, so as to incorporate the era.\n-   * For example, in the Gregorian calendar system,\n-   * the extended year is negative instead of being\n-   * marked as BC.\n-   */\n-  public static final int EXTENDED_YEAR_FIELD = 20;\n-  /**\n-   * Represents the position of the modified Julian\n-   * day pattern character in the array of\n-   * localized pattern characters.\n-   * In the U.S. locale, this is 'g'.\n-   * This is a GNU extension in accordance with\n-   * the CLDR data used.  This value differs\n-   * from the standard Julian day in that days\n-   * are marked from midnight onwards rather than\n-   * noon, and the local time zone affects the value.\n-   * In simple terms, it can be thought of as all\n-   * the date fields represented as a single number.\n-   */\n-  public static final int MODIFIED_JULIAN_DAY_FIELD = 21;\n-  /**\n-   * Represents the position of the millisecond\n-   * in the day pattern character in the array of\n-   * localized pattern characters.\n-   * In the U.S. locale, this is 'A'.\n-   * This is a GNU extension in accordance with\n-   * the CLDR data used.  This value represents\n-   * all the time fields (excluding the time zone)\n-   * numerically, giving the number of milliseconds\n-   * into the day (e.g. 10 in the morning would\n-   * be 10 * 60 * 60 * 1000).  Any daylight savings\n-   * offset also affects this value.\n-   */\n-  public static final int MILLISECOND_IN_DAY_FIELD = 22;\n-  /**\n-   * Represents the position of the RFC822\n-   * timezone pattern character in the array of\n-   * localized pattern characters.\n-   * In the U.S. locale, this is 'Z'.\n-   * This is a GNU extension in accordance with\n-   * the CLDR data used.  The value is the offset\n-   * of the current time from GMT e.g. -0500 would\n-   * be five hours prior to GMT.\n-   */\n-  public static final int RFC822_TIMEZONE_FIELD = 23;\n-\n-  public static class Field extends Format.Field\n-  {\n-    static final long serialVersionUID = 7441350119349544720L;\n-    \n-    private int calendarField;\n-\n-    public static final DateFormat.Field ERA\n-\t= new Field(\"era\", Calendar.ERA);\n-    public static final DateFormat.Field YEAR\n-\t= new Field(\"year\", Calendar.YEAR);\n-    public static final DateFormat.Field MONTH\n-\t= new Field(\"month\", Calendar.MONTH);\n-    public static final DateFormat.Field DAY_OF_MONTH\n-\t= new Field(\"day of month\", Calendar.DAY_OF_MONTH);\n-    public static final DateFormat.Field HOUR_OF_DAY1\n-\t= new Field(\"hour of day 1\", Calendar.HOUR_OF_DAY);\n-    public static final DateFormat.Field HOUR_OF_DAY0\n-\t= new Field(\"hour of day 0\", Calendar.HOUR_OF_DAY);\n-    public static final DateFormat.Field MINUTE\n-\t= new Field(\"minute\", Calendar.MINUTE);\n-    public static final DateFormat.Field SECOND\n-\t= new Field(\"second\", Calendar.SECOND);\n-    public static final DateFormat.Field MILLISECOND\n-\t= new Field(\"millisecond\", Calendar.MILLISECOND);\n-    public static final DateFormat.Field DAY_OF_WEEK\n-\t= new Field(\"day of week\", Calendar.DAY_OF_WEEK);\n-    public static final DateFormat.Field DAY_OF_YEAR\n-\t= new Field(\"day of year\", Calendar.DAY_OF_YEAR);\n-    public static final DateFormat.Field DAY_OF_WEEK_IN_MONTH\n-\t= new Field(\"day of week in month\", Calendar.DAY_OF_WEEK_IN_MONTH);\n-    public static final DateFormat.Field WEEK_OF_YEAR\n-\t= new Field(\"week of year\", Calendar.WEEK_OF_YEAR);\n-    public static final DateFormat.Field WEEK_OF_MONTH\n-\t= new Field(\"week of month\", Calendar.WEEK_OF_MONTH);\n-    public static final DateFormat.Field AM_PM\n-\t= new Field(\"am/pm\", Calendar.AM_PM);\n-    public static final DateFormat.Field HOUR1\n-\t= new Field(\"hour1\", Calendar.HOUR);\n-    public static final DateFormat.Field HOUR0\n-\t= new Field(\"hour0\", Calendar.HOUR);\n-    public static final DateFormat.Field TIME_ZONE\n-\t= new Field(\"timezone\", Calendar.ZONE_OFFSET);\n-    public static final DateFormat.Field ISO_YEAR\n-\t= new Field(\"iso year\", Calendar.YEAR);\n-    public static final DateFormat.Field LOCALIZED_DAY_OF_WEEK\n-\t= new Field(\"localized day of week\", Calendar.DAY_OF_WEEK);\n-    public static final DateFormat.Field EXTENDED_YEAR\n-      = new Field(\"extended year\", Calendar.YEAR);\n-    public static final DateFormat.Field MODIFIED_JULIAN_DAY\n-\t= new Field(\"julian day\", -1);\n-    public static final DateFormat.Field MILLISECOND_IN_DAY\n-\t= new Field(\"millisecond in day\", -1);\n-    public static final DateFormat.Field RFC822_TIME_ZONE\n-\t= new Field(\"rfc822 timezone\", Calendar.ZONE_OFFSET);\n-\n-    static final DateFormat.Field[] allFields =\n-    {\n-      ERA, YEAR, MONTH, DAY_OF_MONTH, HOUR_OF_DAY1,\n-      HOUR_OF_DAY0, MINUTE, SECOND, MILLISECOND,\n-      DAY_OF_WEEK, DAY_OF_YEAR, DAY_OF_WEEK_IN_MONTH,\n-      WEEK_OF_YEAR, WEEK_OF_MONTH, AM_PM, HOUR1, HOUR0,\n-      TIME_ZONE, ISO_YEAR, LOCALIZED_DAY_OF_WEEK,\n-      EXTENDED_YEAR, MODIFIED_JULIAN_DAY, MILLISECOND_IN_DAY,\n-      RFC822_TIME_ZONE\n-    };\n-\n-    // For deserialization\n-    private Field()\n-    {\n-      super(\"\");\n-    }\n-\n-    protected Field(String name, int calendarField)\n-    {\n-      super(name);\n-      this.calendarField = calendarField;\n-    }\n-    \n-    public int getCalendarField()\n-    {\n-      return calendarField;\n-    }\n-\n-    public static Field ofCalendarField(int calendarField)\n-    {\n-      if (calendarField >= allFields.length || calendarField < 0)\n-\tthrow new IllegalArgumentException(\"no such calendar field (\"\n-\t\t\t\t\t   + calendarField + \")\");\n-      \n-      return allFields[calendarField];\n-    }\n-    \n-    protected Object readResolve() throws InvalidObjectException\n-    {\n-      String s = getName();\n-\n-      for (int i=0;i<allFields.length;i++)\n-\tif (s.equals(allFields[i].getName()))\n-\t  return allFields[i];\n-      \n-      throw new InvalidObjectException(\"no such DateFormat field called \" + s);\n-    }\n-  }\n-\n-  /**\n-   * This method initializes a new instance of <code>DateFormat</code>.\n-   */\n-  protected DateFormat ()\n-  {\n-  }\n-\n-  /**\n-   * This method tests this object for equality against the specified object.\n-   * The two objects will be considered equal if an only if the specified\n-   * object:\n-   * <P>\n-   * <ul>\n-   * <li>Is not <code>null</code>.</li>\n-   * <li>Is an instance of <code>DateFormat</code>.</li>\n-   * <li>Has equal numberFormat field as this object.</li>\n-   * <li>Has equal (Calendar) TimeZone rules as this object.</li>\n-   * <li>Has equal (Calendar) isLenient results.</li> \n-   * <li>Has equal Calendar first day of week and minimal days in week\n-   * values.</li>\n-   * </ul>\n-   * Note that not all properties of the Calendar are relevant for a\n-   * DateFormat. For formatting only the fact whether or not the\n-   * TimeZone has the same rules and whether the calendar is lenient\n-   * and has the same week rules is compared for this implementation\n-   * of equals. Other properties of the Calendar (such as the time)\n-   * are not taken into account.\n-   *\n-   * @param obj The object to test for equality against.\n-   * \n-   * @return <code>true</code> if the specified object is equal to this object,\n-   * <code>false</code> otherwise.\n-   */\n-  public boolean equals (Object obj)\n-  {\n-    if (!(obj instanceof DateFormat))\n-      return false;\n-\n-    DateFormat d = (DateFormat) obj;\n-    TimeZone tz = getTimeZone();\n-    TimeZone tzd = d.getTimeZone();\n-    if (tz.hasSameRules(tzd))\n-      if (isLenient() == d.isLenient())\n-\t{\n-\t  Calendar c = getCalendar();\n-\t  Calendar cd = d.getCalendar();\n-\t  if ((c == null && cd == null)\n-\t      ||\n-\t      (c.getFirstDayOfWeek() == cd.getFirstDayOfWeek()\n-\t       &&\n-\t       c.getMinimalDaysInFirstWeek()\n-\t       == cd.getMinimalDaysInFirstWeek()))\n-\t    return ((numberFormat == null && d.numberFormat == null)\n-\t\t    || numberFormat.equals(d.numberFormat));\n-\t}\n-\n-    return false;\n-  }\n-\n-  /**\n-   * This method returns a copy of this object.\n-   *\n-   * @return A copy of this object.\n-   */\n-  public Object clone ()\n-  {\n-    // We know the superclass just call's Object's generic cloner.\n-    return super.clone ();\n-  }\n-\n-  /**\n-   * This method formats the specified <code>Object</code> into a date string\n-   * and appends it to the specified <code>StringBuffer</code>.\n-   * The specified object must be an instance of <code>Number</code> or\n-   * <code>Date</code> or an <code>IllegalArgumentException</code> will be\n-   * thrown.\n-   *\n-   * @param obj The <code>Object</code> to format.\n-   * @param buf The <code>StringBuffer</code> to append the resultant\n-   * <code>String</code> to.\n-   * @param pos Is updated to the start and end index of the\n-   * specified field.\n-   *\n-   * @return The <code>StringBuffer</code> supplied on input, with the\n-   * formatted date/time appended.\n-   */\n-  public final StringBuffer format (Object obj,\n-\t\t\t\t    StringBuffer buf, FieldPosition pos)\n-  {\n-    if (obj instanceof Number)\n-      obj = new Date(((Number) obj).longValue());\n-    else if (! (obj instanceof Date))\n-      throw new IllegalArgumentException\n-\t(\"Cannot format given Object as a Date\");\n-\n-    return format ((Date) obj, buf, pos);\n-  }\n-\n-  /**  \n-    * Formats the date argument according to the pattern specified. \n-    *\n-    * @param date The formatted date.\n-    */\n-  public final String format (Date date)\n-  {\n-    StringBuffer sb = new StringBuffer ();\n-    format (date, sb, new FieldPosition (MONTH_FIELD));\n-    return sb.toString();\n-  }\n-\n-  /**\n-   * This method formats a <code>Date</code> into a string and appends it\n-   * to the specified <code>StringBuffer</code>.\n-   *\n-   * @param date The <code>Date</code> value to format.\n-   * @param buf The <code>StringBuffer</code> to append the resultant\n-   * <code>String</code> to.\n-   * @param pos Is updated to the start and end index of the\n-   * specified field.\n-   *\n-   * @return The <code>StringBuffer</code> supplied on input, with the\n-   * formatted date/time appended.\n-   */\n-  public abstract StringBuffer format (Date date,\n-\t\t\t\t       StringBuffer buf, FieldPosition pos);\n-\n-  /**\n-   * This method returns a list of available locales supported by this\n-   * class.\n-   */\n-  public static Locale[] getAvailableLocales()\n-  {\n-    // FIXME\n-    Locale[] l = new Locale[1];\n-    l[0] = Locale.US;\n-    return l;\n-  }\n-\n-  /**\n-    * This method returns the <code>Calendar</code> object being used by\n-    * this object to parse/format datetimes.\n-    *\n-    * @return The <code>Calendar</code> being used by this object.\n-    *\n-    * @see java.util.Calendar\n-    */\n-  public Calendar getCalendar ()\n-  {\n-    return calendar;\n-  }\n-\n-  private static DateFormat computeInstance (int style, Locale loc,\n-                                             boolean use_date, boolean use_time)\n-  {\n-    return computeInstance (style, style, loc, use_date, use_time);\n-  }\n-\n-  private static DateFormat computeInstance (int dateStyle, int timeStyle,\n-                                             Locale loc, boolean use_date,\n-                                             boolean use_time)\n-  {\n-    ResourceBundle res;\n-    try\n-      {\n-\tres = ResourceBundle.getBundle(\"gnu.java.locale.LocaleInformation\",\n-\t\t\t\t       loc, ClassLoader.getSystemClassLoader());\n-      }\n-    catch (MissingResourceException x)\n-      {\n-\tres = null;\n-      }\n-\n-    String pattern = null;\n-    if (use_date)\n-      {\n-\tString name, def;\n-\tswitch (dateStyle)\n-\t  {\n-\t  case FULL:\n-\t    name = \"fullDateFormat\";\n-\t    def = \"EEEE MMMM d, yyyy G\";\n-\t    break;\n-\t  case LONG:\n-\t    name = \"longDateFormat\";\n-\t    def = \"MMMM d, yyyy\";\n-\t    break;\n-\t  case MEDIUM:\n-\t    name = \"mediumDateFormat\";\n-\t    def = \"d-MMM-yy\";\n-\t    break;\n-\t  case SHORT:\n-\t    name = \"shortDateFormat\";\n-\t    def = \"M/d/yy\";\n-\t    break;\n-\t  default:\n-\t    throw new IllegalArgumentException ();\n-\t  }\n-\ttry\n-\t  {\n-\t    pattern = res == null ? def : res.getString(name);\n-\t  }\n-\tcatch (MissingResourceException x)\n-\t  {\n-\t    pattern = def;\n-\t  }\n-      }\n-\n-    if (use_time)\n-      {\n-\tif (pattern == null)\n-\t  pattern = \"\";\n-\telse\n-\t  pattern += \" \";\n-\n-\tString name, def;\n-\tswitch (timeStyle)\n-\t  {\n-\t  case FULL:\n-\t    name = \"fullTimeFormat\";\n-\t    def = \"h:mm:ss;S 'o''clock' a z\";\n-\t    break;\n-\t  case LONG:\n-\t    name = \"longTimeFormat\";\n-\t    def = \"h:mm:ss a z\";\n-\t    break;\n-\t  case MEDIUM:\n-\t    name = \"mediumTimeFormat\";\n-\t    def = \"h:mm:ss a\";\n-\t    break;\n-\t  case SHORT:\n-\t    name = \"shortTimeFormat\";\n-\t    def = \"h:mm a\";\n-\t    break;\n-\t  default:\n-\t    throw new IllegalArgumentException ();\n-\t  }\n-\n-\tString s;\n-\ttry\n-\t  {\n-\t    s = res == null ? def : res.getString(name);\n-\t  }\n-\tcatch (MissingResourceException x)\n-\t  {\n-\t    s = def;\n-\t  }\n-\tpattern += s;\n-      }\n-\n-    return new SimpleDateFormat (pattern, loc);\n-  }\n-\n- /**\n-   * This method returns an instance of <code>DateFormat</code> that will\n-   * format using the default formatting style for dates.\n-   *\n-   * @return A new <code>DateFormat</code> instance.\n-   */\n-  public static final DateFormat getDateInstance ()\n-  {\n-    return getDateInstance (DEFAULT, Locale.getDefault());\n-  }\n-\n-  /**\n-   * This method returns an instance of <code>DateFormat</code> that will\n-   * format using the specified formatting style for dates.\n-   *\n-   * @param style The type of formatting to perform. \n-   * \n-   * @return A new <code>DateFormat</code> instance.\n-   */\n-  public static final DateFormat getDateInstance (int style)\n-  {\n-    return getDateInstance (style, Locale.getDefault());\n-  }\n-\n-  /**\n-   * This method returns an instance of <code>DateFormat</code> that will\n-   * format using the specified formatting style for dates.  The specified\n-   * localed will be used in place of the default.\n-   *\n-   * @param style The type of formatting to perform. \n-   * @param loc The desired locale.\n-   * \n-   * @return A new <code>DateFormat</code> instance.\n-   */\n-  public static final DateFormat getDateInstance (int style, Locale loc)\n-  {\n-    return computeInstance (style, loc, true, false);\n-  }\n-\n-  /**\n-   * This method returns a new instance of <code>DateFormat</code> that\n-   * formats both dates and times using the <code>SHORT</code> style.\n-   *\n-   * @return A new <code>DateFormat</code>instance.\n-   */\n-  public static final DateFormat getDateTimeInstance ()\n-  {\n-    return getDateTimeInstance (DEFAULT, DEFAULT, Locale.getDefault());\n-  }\n-\n-  /**\n-   * This method returns a new instance of <code>DateFormat</code> that\n-   * formats both dates and times using the <code>DEFAULT</code> style.\n-   *\n-   * @return A new <code>DateFormat</code>instance.\n-   */\n-  public static final DateFormat getDateTimeInstance (int dateStyle, \n-\t\t\t\t\t\t      int timeStyle)\n-  {\n-    return getDateTimeInstance (dateStyle, timeStyle, Locale.getDefault());\n-  }\n-\n-  /**\n-   * This method returns a new instance of <code>DateFormat</code> that\n-   * formats both dates and times using the specified styles.\n-   * \n-   * @param dateStyle The desired style for date formatting.\n-   * @param timeStyle The desired style for time formatting\n-   *\n-   * @return A new <code>DateFormat</code>instance.\n-   */\n-  public static final DateFormat getDateTimeInstance (int dateStyle, \n-\t\t\t\t\t\t      int timeStyle, \n-\t\t\t\t\t\t      Locale loc)\n-  {\n-    return computeInstance (dateStyle, timeStyle, loc, true, true);\n-  }\n-\n-  /**\n-   * This method returns a new instance of <code>DateFormat</code> that\n-   * formats both dates and times using the <code>SHORT</code> style.\n-   *\n-   * @return A new <code>DateFormat</code>instance.\n-   */\n-  public static final DateFormat getInstance ()\n-  {\n-    // JCL book says SHORT.\n-    return getDateTimeInstance (SHORT, SHORT, Locale.getDefault());\n-  }\n-\n-  /**\n-   * This method returns the <code>NumberFormat</code> object being used\n-   * by this object to parse/format time values.\n-   *\n-   * @return The <code>NumberFormat</code> in use by this object.\n-   */\n-  public NumberFormat getNumberFormat ()\n-  {\n-    return numberFormat;\n-  }\n-\n- /**\n-   * This method returns an instance of <code>DateFormat</code> that will\n-   * format using the default formatting style for times.\n-   *\n-   * @return A new <code>DateFormat</code> instance.\n-   */\n-  public static final DateFormat getTimeInstance ()\n-  {\n-    return getTimeInstance (DEFAULT, Locale.getDefault());\n-  }\n-\n-  /**\n-   * This method returns an instance of <code>DateFormat</code> that will\n-   * format using the specified formatting style for times.\n-   *\n-   * @param style The type of formatting to perform. \n-   * \n-   * @return A new <code>DateFormat</code> instance.\n-   */\n-  public static final DateFormat getTimeInstance (int style)\n-  {\n-    return getTimeInstance (style, Locale.getDefault());\n-  }\n-\n-  /**\n-   * This method returns an instance of <code>DateFormat</code> that will\n-   * format using the specified formatting style for times.  The specified\n-   * localed will be used in place of the default.\n-   *\n-   * @param style The type of formatting to perform. \n-   * @param loc The desired locale.\n-   * \n-   * @return A new <code>DateFormat</code> instance.\n-   */\n-  public static final DateFormat getTimeInstance (int style, Locale loc)\n-  {\n-    return computeInstance (style, loc, false, true);\n-  }\n-\n-  /**\n-   * This method returns the <code>TimeZone</code> object being used by\n-   * this instance.\n-   *\n-   * @return The time zone in use.\n-   */\n-  public TimeZone getTimeZone ()\n-  {\n-    return calendar.getTimeZone();\n-  }\n-\n-  /**\n-   * This method returns a hash value for this object.\n-   * \n-   * @return A hash value for this object.\n-   */\n-  public int hashCode ()\n-  {\n-    if (numberFormat != null)\n-      return numberFormat.hashCode();\n-    else\n-      return 0;\n-  }\n-\n-  /**\n-   * This method indicates whether or not the parsing of date and time\n-   * values should be done in a lenient value.\n-   *\n-   * @return <code>true</code> if date/time parsing is lenient,\n-   * <code>false</code> otherwise.\n-   */\n-  public boolean isLenient ()\n-  {\n-    return calendar.isLenient();\n-  }\n-\n-  /**\n-   * This method parses the specified date/time string.\n-   *\n-   * @param source The string to parse.\n-   * @return The resultant date.\n-   *\n-   * @exception ParseException If the specified string cannot be parsed.\n-   */\n-  public Date parse (String source) throws ParseException\n-  {\n-    ParsePosition pos = new ParsePosition(0);\n-    Date result = parse (source, pos);\n-    if (result == null)\n-      {\n-\tint index = pos.getErrorIndex();\n-\tif (index < 0)\n-\t  index = pos.getIndex();\n-\tthrow new ParseException(\"invalid Date syntax in \\\"\"\n-\t\t\t\t + source + '\\\"', index);\n-      }\n-    return result;\n-  }\n-\n-  /** \n-   * This method parses the specified <code>String</code> into a \n-   * <code>Date</code>.  The <code>pos</code> argument contains the\n-   * starting parse position on method entry and the ending parse\n-   * position on method exit.\n-   *\n-   * @param source The string to parse.\n-   * @param pos The starting parse position in entry, the ending parse\n-   * position on exit.\n-   *\n-   * @return The parsed date, or <code>null</code> if the string cannot\n-   * be parsed.\n-   */\n-  public abstract Date parse (String source, ParsePosition pos);\n-\n-  /**\n-   * This method is identical to <code>parse(String, ParsePosition)</code>,\n-   * but returns its result as an <code>Object</code> instead of a\n-   * <code>Date</code>.\n-   * \n-   * @param source The string to parse.\n-   * @param pos The starting parse position in entry, the ending parse\n-   * position on exit.\n-   *\n-   * @return The parsed date, or <code>null</code> if the string cannot\n-   * be parsed.\n-   */\n-  public Object parseObject (String source, ParsePosition pos)\n-  {\n-    return parse(source, pos);\n-  }\n-\n-  /**\n-   * This method specified the <code>Calendar</code> that should be used \n-   * by this object to parse/format datetimes.\n-   *\n-   * @param calendar The new <code>Calendar</code> for this object.\n-   *\n-   * @see java.util.Calendar\n-   */\n-  public void setCalendar (Calendar calendar)\n-  {\n-    this.calendar = calendar;\n-  }\n-\n-  /**\n-   * This method specifies whether or not this object should be lenient in \n-   * the syntax it accepts while parsing date/time values.\n-   *\n-   * @param lenient <code>true</code> if parsing should be lenient,\n-   * <code>false</code> otherwise.\n-   */\n-  public void setLenient (boolean lenient)\n-  {\n-    calendar.setLenient(lenient);\n-  }\n-\n-  /**\n-   * This method specifies the <code>NumberFormat</code> object that should\n-   * be used by this object to parse/format times.\n-   *\n-   * @param numberFormat The <code>NumberFormat</code> in use by this object.\n-   */\n-  public void setNumberFormat (NumberFormat numberFormat)\n-  {\n-    this.numberFormat = numberFormat;\n-  }\n-\n-  /**\n-   * This method sets the time zone that should be used by this object.\n-   *\n-   * @param timeZone The new time zone.\n-   */\n-  public void setTimeZone (TimeZone timeZone)\n-  {\n-    calendar.setTimeZone(timeZone);\n-  }\n-}"}, {"sha": "eb2a1aa21605a08f6361e0e135e4d3e7335998f0", "filename": "libjava/sources.am", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aaaa44beb391a2461686164ef242c420d20f64f/libjava%2Fsources.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aaaa44beb391a2461686164ef242c420d20f64f/libjava%2Fsources.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fsources.am?ref=6aaaa44beb391a2461686164ef242c420d20f64f", "patch": "@@ -5015,7 +5015,7 @@ classpath/java/text/ChoiceFormat.java \\\n classpath/java/text/CollationElementIterator.java \\\n classpath/java/text/CollationKey.java \\\n java/text/Collator.java \\\n-java/text/DateFormat.java \\\n+classpath/java/text/DateFormat.java \\\n java/text/DateFormatSymbols.java \\\n classpath/java/text/DecimalFormat.java \\\n java/text/DecimalFormatSymbols.java \\"}]}