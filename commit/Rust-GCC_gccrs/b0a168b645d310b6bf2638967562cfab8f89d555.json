{"sha": "b0a168b645d310b6bf2638967562cfab8f89d555", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjBhMTY4YjY0NWQzMTBiNmJmMjYzODk2NzU2MmNmYWI4Zjg5ZDU1NQ==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "dvorakz@suse.cz", "date": "2005-02-06T18:47:12Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2005-02-06T18:47:12Z"}, "message": "re PR tree-optimization/18219 (bloats code by 31%)\n\n\tPR tree-optimization/18219\n\t* tree-ssa-loop-ivopts.c (get_computation_at): Produce computations\n\tin distributed form.\n\nFrom-SVN: r94680", "tree": {"sha": "c3b38491c272a4ee7153374630dc46936ef4c86d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3b38491c272a4ee7153374630dc46936ef4c86d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0a168b645d310b6bf2638967562cfab8f89d555", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0a168b645d310b6bf2638967562cfab8f89d555", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0a168b645d310b6bf2638967562cfab8f89d555", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0a168b645d310b6bf2638967562cfab8f89d555/comments", "author": null, "committer": null, "parents": [{"sha": "2c58f7dde2bdb003105479ffe316cb7935b711c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c58f7dde2bdb003105479ffe316cb7935b711c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c58f7dde2bdb003105479ffe316cb7935b711c3"}], "stats": {"total": 26, "additions": 14, "deletions": 12}, "files": [{"sha": "83c0ed5836e68c7254dd51ee51e7a7e0ff202ade", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0a168b645d310b6bf2638967562cfab8f89d555/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0a168b645d310b6bf2638967562cfab8f89d555/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b0a168b645d310b6bf2638967562cfab8f89d555", "patch": "@@ -1,3 +1,9 @@\n+2005-02-06  Zdenek Dvorak  <dvorakz@suse.cz>\n+\n+\tPR tree-optimization/18219\n+\t* tree-ssa-loop-ivopts.c (get_computation_at): Produce computations\n+\tin distributed form.\n+\n 2005-02-06  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* expmed.c (store_bit_field): Make the SUBREG code adjust bitnum."}, {"sha": "05f4a8da7bbdb32f5e6aeef942b6b0182f60e9e7", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0a168b645d310b6bf2638967562cfab8f89d555/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0a168b645d310b6bf2638967562cfab8f89d555/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=b0a168b645d310b6bf2638967562cfab8f89d555", "patch": "@@ -2376,10 +2376,13 @@ get_computation_at (struct loop *loop,\n   if (stmt_after_increment (loop, cand, at))\n     cbase = fold (build2 (PLUS_EXPR, uutype, cbase, cstep));\n \n-  /* use = ubase + ratio * (var - cbase).  If either cbase is a constant\n-     or |ratio| == 1, it is better to handle this like\n-     \n-     ubase - ratio * cbase + ratio * var.  */\n+  /* use = ubase - ratio * cbase + ratio * var.\n+\n+     In general case ubase + ratio * (var - cbase) could be better (one less\n+     multiplication), but often it is possible to eliminate redundant parts\n+     of computations from (ubase - ratio * cbase) term, and if it does not\n+     happen, fold is able to apply the distributive law to obtain this form\n+     anyway.  */\n \n   if (ratioi == 1)\n     {\n@@ -2391,21 +2394,14 @@ get_computation_at (struct loop *loop,\n       delta = fold (build2 (PLUS_EXPR, uutype, ubase, cbase));\n       expr = fold (build2 (MINUS_EXPR, uutype, delta, expr));\n     }\n-  else if (TREE_CODE (cbase) == INTEGER_CST)\n+  else\n     {\n       ratio = build_int_cst_type (uutype, ratioi);\n       delta = fold (build2 (MULT_EXPR, uutype, ratio, cbase));\n       delta = fold (build2 (MINUS_EXPR, uutype, ubase, delta));\n       expr = fold (build2 (MULT_EXPR, uutype, ratio, expr));\n       expr = fold (build2 (PLUS_EXPR, uutype, delta, expr));\n     }\n-  else\n-    {\n-      expr = fold (build2 (MINUS_EXPR, uutype, expr, cbase));\n-      ratio = build_int_cst_type (uutype, ratioi);\n-      expr = fold (build2 (MULT_EXPR, uutype, ratio, expr));\n-      expr = fold (build2 (PLUS_EXPR, uutype, ubase, expr));\n-    }\n \n   return fold_convert (utype, expr);\n }"}]}