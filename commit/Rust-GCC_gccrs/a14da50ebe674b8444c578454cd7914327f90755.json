{"sha": "a14da50ebe674b8444c578454cd7914327f90755", "node_id": "C_kwDOANBUbNoAKGExNGRhNTBlYmU2NzRiODQ0NGM1Nzg0NTRjZDc5MTQzMjdmOTA3NTU", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-10-17T09:33:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-17T09:33:26Z"}, "message": "Merge #1594 #1595\n\n1594: Refactor TraitResolver to not require a visitor r=philberty a=philberty\n\nWe used a visitor to dispatch the HIR::Item so that we could cast it directly to an HIR::Trait and then check for nullptr if it failed. This patch changes this to simply use our new enum item_type_kind to switch so we can directly static_cast.\r\n\n\n1595: Support outer attribute handling on trait items just like normal items r=philberty a=philberty\n\nThis patch adds a proxy class ItemWrapper to be a proxy allowing us to use the same code paths for attribute handling as we have with normal items. We need this so we can grab the fn trait associated type lang item's. Which are being missed currently.\r\n\r\nAddresses #195\r\n\r\n\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "bd2978fd7526f02da03f2127be6547e440bcf60c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd2978fd7526f02da03f2127be6547e440bcf60c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a14da50ebe674b8444c578454cd7914327f90755", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjTSFmCRBK7hj4Ov3rIwAACecIAJjyODjmJ3GiKObG/v3atfru\nu7E76mtgcKBlG1sGSjYP13oFJUhCiKAJVjmYUVZznpYmyCRPNi5AmVUoT5sxtoxt\nwCM/bQPQJHON4ZE8e3LIS+SnuL2yIXbAOpvGTBj9KJNPKr90pxlB1JC3HegCU4Jk\nHD/tIz6EuaHYEmCI2ezodzwC7cyv2FH3HqHABdgr3tSYy/Jy2MvPUzGb/BP15bIG\nOabB79I6MtBSHC9HGKEtFzW0m6gCercgiVnlyOPr1d9ZM50OB+xC/+6XitUD11DP\n52x2j4aIXVdrvHxYoCh0drwYSZ16JgL4zyLK/jCSzNwxlZ6q2UXgFKgosTS3eYs=\n=V/el\n-----END PGP SIGNATURE-----\n", "payload": "tree bd2978fd7526f02da03f2127be6547e440bcf60c\nparent 3922772f5f2e5ab245342defca6b53e1563de881\nparent e8c82076bc6aff3d8df4da228dfdb617ae7372e2\nparent 68af6007a9f44496eab9364141741b09ef75d5b0\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1665999206 +0000\ncommitter GitHub <noreply@github.com> 1665999206 +0000\n\nMerge #1594 #1595\n\n1594: Refactor TraitResolver to not require a visitor r=philberty a=philberty\n\nWe used a visitor to dispatch the HIR::Item so that we could cast it directly to an HIR::Trait and then check for nullptr if it failed. This patch changes this to simply use our new enum item_type_kind to switch so we can directly static_cast.\r\n\n\n1595: Support outer attribute handling on trait items just like normal items r=philberty a=philberty\n\nThis patch adds a proxy class ItemWrapper to be a proxy allowing us to use the same code paths for attribute handling as we have with normal items. We need this so we can grab the fn trait associated type lang item's. Which are being missed currently.\r\n\r\nAddresses #195\r\n\r\n\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a14da50ebe674b8444c578454cd7914327f90755", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a14da50ebe674b8444c578454cd7914327f90755", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a14da50ebe674b8444c578454cd7914327f90755/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3922772f5f2e5ab245342defca6b53e1563de881", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3922772f5f2e5ab245342defca6b53e1563de881", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3922772f5f2e5ab245342defca6b53e1563de881"}, {"sha": "e8c82076bc6aff3d8df4da228dfdb617ae7372e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8c82076bc6aff3d8df4da228dfdb617ae7372e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8c82076bc6aff3d8df4da228dfdb617ae7372e2"}, {"sha": "68af6007a9f44496eab9364141741b09ef75d5b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68af6007a9f44496eab9364141741b09ef75d5b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68af6007a9f44496eab9364141741b09ef75d5b0"}], "stats": {"total": 150, "additions": 98, "deletions": 52}, "files": [{"sha": "d52d1083ae38615042a871e111db335deff101de", "filename": "gcc/rust/hir/rust-ast-lower-base.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a14da50ebe674b8444c578454cd7914327f90755/gcc%2Frust%2Fhir%2Frust-ast-lower-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a14da50ebe674b8444c578454cd7914327f90755/gcc%2Frust%2Fhir%2Frust-ast-lower-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-base.cc?ref=a14da50ebe674b8444c578454cd7914327f90755", "patch": "@@ -824,7 +824,7 @@ ASTLoweringBase::lower_qualifiers (const AST::FunctionQualifiers &qualifiers)\n }\n \n void\n-ASTLoweringBase::handle_outer_attributes (const HIR::Item &item)\n+ASTLoweringBase::handle_outer_attributes (const ItemWrapper &item)\n {\n   for (const auto &attr : item.get_outer_attrs ())\n     {\n@@ -855,7 +855,7 @@ ASTLoweringBase::handle_outer_attributes (const HIR::Item &item)\n }\n \n void\n-ASTLoweringBase::handle_doc_item_attribute (const HIR::Item &item,\n+ASTLoweringBase::handle_doc_item_attribute (const ItemWrapper &item,\n \t\t\t\t\t    const AST::Attribute &attr)\n {\n   auto simple_doc_comment = attr.has_attr_input ()\n@@ -878,7 +878,7 @@ ASTLoweringBase::handle_doc_item_attribute (const HIR::Item &item,\n }\n \n void\n-ASTLoweringBase::handle_lang_item_attribute (const HIR::Item &item,\n+ASTLoweringBase::handle_lang_item_attribute (const ItemWrapper &item,\n \t\t\t\t\t     const AST::Attribute &attr)\n {\n   auto &literal = static_cast<AST::AttrInputLiteral &> (attr.get_attr_input ());"}, {"sha": "5479e639ddf421c00676d88d2a6dd7739fda19c0", "filename": "gcc/rust/hir/rust-ast-lower-base.h", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a14da50ebe674b8444c578454cd7914327f90755/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a14da50ebe674b8444c578454cd7914327f90755/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h?ref=a14da50ebe674b8444c578454cd7914327f90755", "patch": "@@ -29,6 +29,30 @@\n namespace Rust {\n namespace HIR {\n \n+// proxy class so we can do attribute checking on items and trait items\n+class ItemWrapper\n+{\n+public:\n+  ItemWrapper (const HIR::Item &item)\n+    : mappings (item.get_mappings ()), locus (item.get_locus ()),\n+      outer_attrs (item.get_outer_attrs ())\n+  {}\n+\n+  ItemWrapper (const HIR::TraitItem &item)\n+    : mappings (item.get_mappings ()), locus (item.get_trait_locus ()),\n+      outer_attrs (item.get_outer_attrs ())\n+  {}\n+\n+  const Analysis::NodeMapping &get_mappings () const { return mappings; }\n+  Location get_locus () const { return locus; }\n+  const AST::AttrVec &get_outer_attrs () const { return outer_attrs; }\n+\n+private:\n+  const Analysis::NodeMapping &mappings;\n+  Location locus;\n+  const AST::AttrVec &outer_attrs;\n+};\n+\n // base class to allow derivatives to overload as needed\n class ASTLoweringBase : public AST::ASTVisitor\n {\n@@ -264,12 +288,12 @@ class ASTLoweringBase : public AST::ASTVisitor\n   HIR::FunctionQualifiers\n   lower_qualifiers (const AST::FunctionQualifiers &qualifiers);\n \n-  void handle_outer_attributes (const HIR::Item &item);\n+  void handle_outer_attributes (const ItemWrapper &item);\n \n-  void handle_lang_item_attribute (const HIR::Item &item,\n+  void handle_lang_item_attribute (const ItemWrapper &item,\n \t\t\t\t   const AST::Attribute &attr);\n \n-  void handle_doc_item_attribute (const HIR::Item &item,\n+  void handle_doc_item_attribute (const ItemWrapper &item,\n \t\t\t\t  const AST::Attribute &attr);\n \n   bool is_known_attribute (const std::string &attribute_path) const;"}, {"sha": "4f3e81397c26509ff9949f76e1f49f7f9dd3c0d6", "filename": "gcc/rust/hir/rust-ast-lower-implitem.h", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a14da50ebe674b8444c578454cd7914327f90755/gcc%2Frust%2Fhir%2Frust-ast-lower-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a14da50ebe674b8444c578454cd7914327f90755/gcc%2Frust%2Fhir%2Frust-ast-lower-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-implitem.h?ref=a14da50ebe674b8444c578454cd7914327f90755", "patch": "@@ -305,16 +305,14 @@ class ASTLowerTraitItem : public ASTLoweringBase\n \n     if (resolver.translated != nullptr)\n       {\n-\t// FIXME\n+\tauto id = resolver.translated->get_mappings ().get_hirid ();\n+\tauto defid = resolver.translated->get_mappings ().get_defid ();\n+\tauto locus = resolver.translated->get_trait_locus ();\n \n-\t// auto id = resolver.translated->get_mappings ().get_hirid ();\n-\t// auto defid = resolver.translated->get_mappings ().get_defid ();\n-\t// auto locus = resolver.translated->get_locus ();\n-\n-\t// resolver.handle_outer_attributes (*resolver.translated);\n+\tresolver.handle_outer_attributes (*resolver.translated);\n \tresolver.mappings->insert_hir_trait_item (resolver.translated);\n-\t// resolver.mappings->insert_location (id, locus);\n-\t// resolver.mappings->insert_defid_mapping (defid, resolver.item_cast);\n+\tresolver.mappings->insert_location (id, locus);\n+\tresolver.mappings->insert_defid_mapping (defid, resolver.translated);\n       }\n \n     return resolver.translated;"}, {"sha": "d84e41e81eeb0db4d398a7dd14948b00ecdafee4", "filename": "gcc/rust/hir/tree/rust-hir-item.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a14da50ebe674b8444c578454cd7914327f90755/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a14da50ebe674b8444c578454cd7914327f90755/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h?ref=a14da50ebe674b8444c578454cd7914327f90755", "patch": "@@ -2394,6 +2394,8 @@ class TraitItemFunc : public TraitItem\n     return outer_attrs;\n   }\n \n+  Location get_trait_locus () const override { return get_locus (); }\n+\n protected:\n   // Clone function implementation as (not pure) virtual method\n   TraitItemFunc *clone_trait_item_impl () const override\n@@ -2480,6 +2482,8 @@ class TraitItemConst : public TraitItem\n     return outer_attrs;\n   }\n \n+  Location get_trait_locus () const override { return get_locus (); }\n+\n protected:\n   // Clone function implementation as (not pure) virtual method\n   TraitItemConst *clone_trait_item_impl () const override\n@@ -2567,6 +2571,8 @@ class TraitItemType : public TraitItem\n     return outer_attrs;\n   }\n \n+  Location get_trait_locus () const override { return get_locus (); }\n+\n protected:\n   // Clone function implementation as (not pure) virtual method\n   TraitItemType *clone_trait_item_impl () const override"}, {"sha": "26bf3028ac76c8e94a83d6b99003f2c9889ea038", "filename": "gcc/rust/hir/tree/rust-hir.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a14da50ebe674b8444c578454cd7914327f90755/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a14da50ebe674b8444c578454cd7914327f90755/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h?ref=a14da50ebe674b8444c578454cd7914327f90755", "patch": "@@ -796,7 +796,9 @@ class TraitItem : public Node\n \n   virtual const std::string trait_identifier () const = 0;\n \n-  const Analysis::NodeMapping get_mappings () const { return mappings; }\n+  const Analysis::NodeMapping &get_mappings () const { return mappings; }\n+\n+  virtual Location get_trait_locus () const = 0;\n \n   virtual TraitItemKind get_item_kind () const = 0;\n "}, {"sha": "cc23fe22d7f599627f0657c4be76e56d5450db81", "filename": "gcc/rust/typecheck/rust-hir-trait-resolve.cc", "status": "modified", "additions": 23, "deletions": 30, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a14da50ebe674b8444c578454cd7914327f90755/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a14da50ebe674b8444c578454cd7914327f90755/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.cc?ref=a14da50ebe674b8444c578454cd7914327f90755", "patch": "@@ -91,33 +91,42 @@ TraitResolver::Lookup (HIR::TypePath &path)\n   return resolver.lookup_path (path);\n }\n \n-TraitResolver::TraitResolver ()\n-  : TypeCheckBase (), resolved_trait_reference (nullptr)\n-{}\n+TraitResolver::TraitResolver () : TypeCheckBase () {}\n \n-TraitReference *\n-TraitResolver::resolve_path (HIR::TypePath &path)\n+bool\n+TraitResolver::resolve_path_to_trait (const HIR::TypePath &path,\n+\t\t\t\t      HIR::Trait **resolved) const\n {\n   NodeId ref;\n   if (!resolver->lookup_resolved_type (path.get_mappings ().get_nodeid (),\n \t\t\t\t       &ref))\n     {\n       rust_error_at (path.get_locus (), \"Failed to resolve path to node-id\");\n-      return &TraitReference::error_node ();\n+      return false;\n     }\n \n   HirId hir_node = UNKNOWN_HIRID;\n   if (!mappings->lookup_node_to_hir (ref, &hir_node))\n     {\n       rust_error_at (path.get_locus (), \"Failed to resolve path to hir-id\");\n-      return &TraitReference::error_node ();\n+      return false;\n     }\n \n   HIR::Item *resolved_item = mappings->lookup_hir_item (hir_node);\n-\n   rust_assert (resolved_item != nullptr);\n-  resolved_item->accept_vis (*this);\n-  rust_assert (resolved_trait_reference != nullptr);\n+  rust_assert (resolved_item->get_item_kind () == HIR::Item::ItemKind::Trait);\n+  *resolved = static_cast<HIR::Trait *> (resolved_item);\n+\n+  return true;\n+}\n+\n+TraitReference *\n+TraitResolver::resolve_path (HIR::TypePath &path)\n+{\n+  HIR::Trait *resolved_trait_reference;\n+  bool ok = resolve_path_to_trait (path, &resolved_trait_reference);\n+  if (!ok)\n+    return &TraitReference::error_node ();\n \n   return resolve_trait (resolved_trait_reference);\n }\n@@ -237,26 +246,10 @@ TraitResolver::resolve_trait (HIR::Trait *trait_reference)\n TraitReference *\n TraitResolver::lookup_path (HIR::TypePath &path)\n {\n-  NodeId ref;\n-  if (!resolver->lookup_resolved_type (path.get_mappings ().get_nodeid (),\n-\t\t\t\t       &ref))\n-    {\n-      rust_error_at (path.get_locus (), \"Failed to resolve path to node-id\");\n-      return &TraitReference::error_node ();\n-    }\n-\n-  HirId hir_node = UNKNOWN_HIRID;\n-  if (!mappings->lookup_node_to_hir (ref, &hir_node))\n-    {\n-      rust_error_at (path.get_locus (), \"Failed to resolve path to hir-id\");\n-      return &TraitReference::error_node ();\n-    }\n-\n-  HIR::Item *resolved_item = mappings->lookup_hir_item (hir_node);\n-\n-  rust_assert (resolved_item != nullptr);\n-  resolved_item->accept_vis (*this);\n-  rust_assert (resolved_trait_reference != nullptr);\n+  HIR::Trait *resolved_trait_reference;\n+  bool ok = resolve_path_to_trait (path, &resolved_trait_reference);\n+  if (!ok)\n+    return &TraitReference::error_node ();\n \n   TraitReference *tref = &TraitReference::error_node ();\n   if (context->lookup_trait_reference ("}, {"sha": "468f42985bd7964a0036dae087a2d7d814154594", "filename": "gcc/rust/typecheck/rust-hir-trait-resolve.h", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a14da50ebe674b8444c578454cd7914327f90755/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a14da50ebe674b8444c578454cd7914327f90755/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.h?ref=a14da50ebe674b8444c578454cd7914327f90755", "patch": "@@ -55,10 +55,8 @@ class ResolveTraitItemToRef : public TypeCheckBase,\n   std::vector<TyTy::SubstitutionParamMapping> substitutions;\n };\n \n-class TraitResolver : public TypeCheckBase, private HIR::HIRFullVisitorBase\n+class TraitResolver : public TypeCheckBase\n {\n-  using HIR::HIRFullVisitorBase::visit;\n-\n public:\n   static TraitReference *Resolve (HIR::TypePath &path);\n \n@@ -75,10 +73,8 @@ class TraitResolver : public TypeCheckBase, private HIR::HIRFullVisitorBase\n \n   TraitReference *lookup_path (HIR::TypePath &path);\n \n-  HIR::Trait *resolved_trait_reference;\n-\n-public:\n-  void visit (HIR::Trait &trait) override { resolved_trait_reference = &trait; }\n+  bool resolve_path_to_trait (const HIR::TypePath &path,\n+\t\t\t      HIR::Trait **resolved) const;\n };\n \n } // namespace Resolver"}, {"sha": "cb540cd05dccdb1c3ef6dc56415e8356151b466c", "filename": "gcc/rust/util/rust-hir-map.cc", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a14da50ebe674b8444c578454cd7914327f90755/gcc%2Frust%2Futil%2Frust-hir-map.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a14da50ebe674b8444c578454cd7914327f90755/gcc%2Frust%2Futil%2Frust-hir-map.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.cc?ref=a14da50ebe674b8444c578454cd7914327f90755", "patch": "@@ -316,6 +316,7 @@ Mappings::insert_defid_mapping (DefId id, HIR::Item *item)\n \n   rust_assert (lookup_defid (id) == nullptr);\n   rust_assert (lookup_local_defid (crate_num, local_def_id) == nullptr);\n+  rust_assert (lookup_trait_item_defid (id) == nullptr);\n \n   defIdMappings[id] = item;\n   insert_local_defid_mapping (crate_num, local_def_id, item);\n@@ -331,6 +332,29 @@ Mappings::lookup_defid (DefId id)\n   return it->second;\n }\n \n+void\n+Mappings::insert_defid_mapping (DefId id, HIR::TraitItem *item)\n+{\n+  CrateNum crate_num = id.crateNum;\n+  LocalDefId local_def_id = id.localDefId;\n+\n+  rust_assert (lookup_defid (id) == nullptr);\n+  rust_assert (lookup_local_defid (crate_num, local_def_id) == nullptr);\n+  rust_assert (lookup_trait_item_defid (id) == nullptr);\n+\n+  defIdTraitItemMappings[id] = item;\n+}\n+\n+HIR::TraitItem *\n+Mappings::lookup_trait_item_defid (DefId id)\n+{\n+  auto it = defIdTraitItemMappings.find (id);\n+  if (it == defIdTraitItemMappings.end ())\n+    return nullptr;\n+\n+  return it->second;\n+}\n+\n void\n Mappings::insert_hir_item (HIR::Item *item)\n {"}, {"sha": "4c7e562916f8c3a90ccced904f57c78043cee646", "filename": "gcc/rust/util/rust-hir-map.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a14da50ebe674b8444c578454cd7914327f90755/gcc%2Frust%2Futil%2Frust-hir-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a14da50ebe674b8444c578454cd7914327f90755/gcc%2Frust%2Futil%2Frust-hir-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.h?ref=a14da50ebe674b8444c578454cd7914327f90755", "patch": "@@ -104,6 +104,8 @@ class Mappings\n \n   void insert_defid_mapping (DefId id, HIR::Item *item);\n   HIR::Item *lookup_defid (DefId id);\n+  void insert_defid_mapping (DefId id, HIR::TraitItem *item);\n+  HIR::TraitItem *lookup_trait_item_defid (DefId id);\n \n   void insert_local_defid_mapping (CrateNum crateNum, LocalDefId id,\n \t\t\t\t   HIR::Item *item);\n@@ -307,6 +309,7 @@ class Mappings\n   std::map<CrateNum, AST::Crate *> ast_crate_mappings;\n   std::map<CrateNum, HIR::Crate *> hir_crate_mappings;\n   std::map<DefId, HIR::Item *> defIdMappings;\n+  std::map<DefId, HIR::TraitItem *> defIdTraitItemMappings;\n   std::map<CrateNum, std::map<LocalDefId, HIR::Item *>> localDefIdMappings;\n \n   std::map<HirId, HIR::Module *> hirModuleMappings;"}]}