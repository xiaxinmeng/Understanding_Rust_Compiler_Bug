{"sha": "128997b6a50945943c47b02ca4d743e22e4d4786", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTI4OTk3YjZhNTA5NDU5NDNjNDdiMDJjYTRkNzQzZTIyZTRkNDc4Ng==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2007-08-26T22:04:48Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2007-08-26T22:04:48Z"}, "message": "re PR libfortran/33055 (Runtime error in INQUIRE unit existance with -fdefault-integer-8)\n\n2007-08-26  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\n\tPR fortran/33055\n\t* trans-io.c (create_dummy_iostat): New function to create a unique\n\tdummy variable expression to use with IOSTAT.\n\t(gfc_trans_inquire): Use the new function to pass unit number error info\n\tto run-time library if a regular IOSTAT variable was not given.\n\n\tPR libfortran/33055\n\t* io/inquire.c (inquire_via_unit):  If inquiring by unit, check for \n\tan error condition from the IOSTAT variable and set EXIST to false if\n\tthere was a bad unit number.\n\nFrom-SVN: r127817", "tree": {"sha": "179fe2796441d99ba4d1e150090496d54cca0623", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/179fe2796441d99ba4d1e150090496d54cca0623"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/128997b6a50945943c47b02ca4d743e22e4d4786", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/128997b6a50945943c47b02ca4d743e22e4d4786", "html_url": "https://github.com/Rust-GCC/gccrs/commit/128997b6a50945943c47b02ca4d743e22e4d4786", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/128997b6a50945943c47b02ca4d743e22e4d4786/comments", "author": null, "committer": null, "parents": [{"sha": "070b797d0a7c4032bcadf58a0b29a4cc65fd5587", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/070b797d0a7c4032bcadf58a0b29a4cc65fd5587", "html_url": "https://github.com/Rust-GCC/gccrs/commit/070b797d0a7c4032bcadf58a0b29a4cc65fd5587"}], "stats": {"total": 64, "additions": 61, "deletions": 3}, "files": [{"sha": "efda5e7a3718c47b518a703252233dd842d35933", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/128997b6a50945943c47b02ca4d743e22e4d4786/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/128997b6a50945943c47b02ca4d743e22e4d4786/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=128997b6a50945943c47b02ca4d743e22e4d4786", "patch": "@@ -1,3 +1,11 @@\n+2007-08-26  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR fortran/33055\n+\t* trans-io.c (create_dummy_iostat): New function to create a unique\n+\tdummy variable expression to use with IOSTAT.\n+\t(gfc_trans_inquire): Use the new function to pass unit number error info\n+\tto run-time library if a regular IOSTAT variable was not given.\n+\n 2007-08-26  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* gfortran.h (gfc_isym_id): Add GFC_ISYM_GAMMA and"}, {"sha": "cd251086575abf4e134739af8af86d285fdfd0c2", "filename": "gcc/fortran/trans-io.c", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/128997b6a50945943c47b02ca4d743e22e4d4786/gcc%2Ffortran%2Ftrans-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/128997b6a50945943c47b02ca4d743e22e4d4786/gcc%2Ffortran%2Ftrans-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-io.c?ref=128997b6a50945943c47b02ca4d743e22e4d4786", "patch": "@@ -1094,6 +1094,30 @@ gfc_trans_flush (gfc_code * code)\n }\n \n \n+/* Create a dummy iostat variable to catch any error due to bad unit.  */\n+\n+static gfc_expr *\n+create_dummy_iostat (void)\n+{\n+  gfc_symtree *st;\n+  gfc_expr *e;\n+\n+  st = gfc_get_unique_symtree (gfc_current_ns);\n+  st->n.sym = gfc_new_symbol (st->name, gfc_current_ns);\n+  st->n.sym->ts.type = BT_INTEGER;\n+  st->n.sym->ts.kind = 4;\n+  st->n.sym->attr.referenced = 1;\n+  st->n.sym->refs = 1;\n+  e = gfc_get_expr ();\n+  e->expr_type = EXPR_VARIABLE;\n+  e->symtree = st;\n+  e->ts.type = BT_INTEGER;\n+  e->ts.kind = 4;\n+\n+  return e;\n+}\n+\n+\n /* Translate the non-IOLENGTH form of an INQUIRE statement.  */\n \n tree\n@@ -1133,8 +1157,17 @@ gfc_trans_inquire (gfc_code * code)\n \t\t\tp->file);\n \n   if (p->exist)\n-    mask |= set_parameter_ref (&block, &post_block, var, IOPARM_inquire_exist,\n-\t\t\t       p->exist);\n+    {\n+      mask |= set_parameter_ref (&block, &post_block, var, IOPARM_inquire_exist,\n+\t\t\t\t p->exist);\n+    \n+      if (p->unit && !p->iostat)\n+\t{\n+\t  p->iostat = create_dummy_iostat ();\n+\t  mask |= set_parameter_ref (&block, &post_block, var,\n+\t\t\t\t     IOPARM_common_iostat, p->iostat);\n+\t}\n+    }\n \n   if (p->opened)\n     mask |= set_parameter_ref (&block, &post_block, var, IOPARM_inquire_opened,"}, {"sha": "2659670235dddccbb2772d8b51ac8301b9ebc3d3", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/128997b6a50945943c47b02ca4d743e22e4d4786/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/128997b6a50945943c47b02ca4d743e22e4d4786/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=128997b6a50945943c47b02ca4d743e22e4d4786", "patch": "@@ -1,3 +1,10 @@\n+2007-08-26  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR libfortran/33055\n+\t* io/inquire.c (inquire_via_unit):  If inquiring by unit, check for \n+\tan error condition from the IOSTAT variable and set EXIST to false if\n+\tthere was a bad unit number.\n+\n 2007-08-24  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/32972"}, {"sha": "547b831dac47c1afd00020b75c63cdf9ac002418", "filename": "libgfortran/io/inquire.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/128997b6a50945943c47b02ca4d743e22e4d4786/libgfortran%2Fio%2Finquire.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/128997b6a50945943c47b02ca4d743e22e4d4786/libgfortran%2Fio%2Finquire.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Finquire.c?ref=128997b6a50945943c47b02ca4d743e22e4d4786", "patch": "@@ -47,7 +47,17 @@ inquire_via_unit (st_parameter_inquire *iqp, gfc_unit * u)\n   GFC_INTEGER_4 cf = iqp->common.flags;\n \n   if ((cf & IOPARM_INQUIRE_HAS_EXIST) != 0)\n-    *iqp->exist = iqp->common.unit >= 0;\n+    {\n+      *iqp->exist = (iqp->common.unit >= 0\n+\t\t     && iqp->common.unit <= GFC_INTEGER_4_HUGE);\n+\n+      if ((cf & IOPARM_INQUIRE_HAS_FILE) == 0)\n+\t{\n+\t  if (!(*iqp->exist))\n+\t    *iqp->common.iostat = ERROR_BAD_UNIT;\n+\t  *iqp->exist = *iqp->exist && (*iqp->common.iostat != ERROR_BAD_UNIT);\n+\t}\n+    }\n \n   if ((cf & IOPARM_INQUIRE_HAS_OPENED) != 0)\n     *iqp->opened = (u != NULL);"}]}