{"sha": "cb7930898721b14def216a5cf3b8bd619b1dbc52", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2I3OTMwODk4NzIxYjE0ZGVmMjE2YTVjZjNiOGJkNjE5YjFkYmM1Mg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-08-25T23:38:29Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-08-25T23:38:29Z"}, "message": "PR libstdc++/17038 (partial)\n\n2004-08-25  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/17038 (partial)\n\t* include/bits/locale_facets.tcc (time_put<>::do_put): Increase\n\t__maxlen to 128.\n\t* include/bits/locale_facets.h (class __timepunct): Add FIXME\n\tcomment about _M_put.\n\t* config/locale/generic/time_members.cc (_M_put): Always null\n\tterminate __s.\n\t* config/locale/gnu/time_members.cc (_M_put): Likewise.\n\t* testsuite/22_locale/time_put/put/char/17038.cc: New.\n\t* testsuite/22_locale/time_put/put/wchar_t/17038.cc: New.\n\nFrom-SVN: r86586", "tree": {"sha": "cd9586c361c21f24a5b329f3c983a4a4701cc9b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd9586c361c21f24a5b329f3c983a4a4701cc9b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb7930898721b14def216a5cf3b8bd619b1dbc52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb7930898721b14def216a5cf3b8bd619b1dbc52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb7930898721b14def216a5cf3b8bd619b1dbc52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb7930898721b14def216a5cf3b8bd619b1dbc52/comments", "author": null, "committer": null, "parents": [{"sha": "6d1c50cce40910b7015fefa7ce6c632c750bda22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d1c50cce40910b7015fefa7ce6c632c750bda22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d1c50cce40910b7015fefa7ce6c632c750bda22"}], "stats": {"total": 169, "additions": 162, "deletions": 7}, "files": [{"sha": "9a21c1fc76c5fb4a97a28cbba4d8f8840ccb67f1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb7930898721b14def216a5cf3b8bd619b1dbc52/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb7930898721b14def216a5cf3b8bd619b1dbc52/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=cb7930898721b14def216a5cf3b8bd619b1dbc52", "patch": "@@ -1,3 +1,16 @@\n+2004-08-25  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/17038 (partial)\n+\t* include/bits/locale_facets.tcc (time_put<>::do_put): Increase\n+\t__maxlen to 128.\n+\t* include/bits/locale_facets.h (class __timepunct): Add FIXME\n+\tcomment about _M_put.\n+\t* config/locale/generic/time_members.cc (_M_put): Always null\n+\tterminate __s.\n+\t* config/locale/gnu/time_members.cc (_M_put): Likewise.\n+\t* testsuite/22_locale/time_put/put/char/17038.cc: New.\n+\t* testsuite/22_locale/time_put/put/wchar_t/17038.cc: New.\n+\n 2004-08-24  Paolo Carlini  <pcarlini@suse.de>\n \n \t* testsuite/27_io/basic_istringstream/rdbuf/wchar_t/2832.cc: New."}, {"sha": "f27b2a09f430227f4656e1b35a4d929f5c955e3c", "filename": "libstdc++-v3/config/locale/generic/time_members.cc", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb7930898721b14def216a5cf3b8bd619b1dbc52/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Ftime_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb7930898721b14def216a5cf3b8bd619b1dbc52/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Ftime_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Ftime_members.cc?ref=cb7930898721b14def216a5cf3b8bd619b1dbc52", "patch": "@@ -46,9 +46,12 @@ namespace std\n     {\n       char* __old = strdup(setlocale(LC_ALL, NULL));\n       setlocale(LC_ALL, _M_name_timepunct);\n-      strftime(__s, __maxlen, __format, __tm);\n+      const size_t __len = strftime(__s, __maxlen, __format, __tm);\n       setlocale(LC_ALL, __old);\n       free(__old);\n+      // Make sure __s is null terminated.\n+      if (__len == 0)\n+\t__s[0] = '\\0';\n     }\n \n   template<> \n@@ -125,9 +128,12 @@ namespace std\n     {\n       char* __old = strdup(setlocale(LC_ALL, NULL));\n       setlocale(LC_ALL, _M_name_timepunct);\n-      wcsftime(__s, __maxlen, __format, __tm);\n+      const size_t __len = wcsftime(__s, __maxlen, __format, __tm);\n       setlocale(LC_ALL, __old);\n       free(__old);\n+      // Make sure __s is null terminated.\n+      if (__len == 0)\n+\t__s[0] = L'\\0';      \n     }\n \n   template<> "}, {"sha": "1d12e8069b6330d40ffe869c760f42e8c393d582", "filename": "libstdc++-v3/config/locale/gnu/time_members.cc", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb7930898721b14def216a5cf3b8bd619b1dbc52/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb7930898721b14def216a5cf3b8bd619b1dbc52/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Ftime_members.cc?ref=cb7930898721b14def216a5cf3b8bd619b1dbc52", "patch": "@@ -46,14 +46,18 @@ namespace std\n \t   const tm* __tm) const\n     {\n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n-      __strftime_l(__s, __maxlen, __format, __tm, _M_c_locale_timepunct);\n+      const size_t __len = __strftime_l(__s, __maxlen, __format, __tm,\n+\t\t\t\t\t_M_c_locale_timepunct);\n #else\n       char* __old = strdup(setlocale(LC_ALL, NULL));\n       setlocale(LC_ALL, _M_name_timepunct);\n-      strftime(__s, __maxlen, __format, __tm);\n+      const size_t __len = strftime(__s, __maxlen, __format, __tm);\n       setlocale(LC_ALL, __old);\n       free(__old);\n #endif\n+      // Make sure __s is null terminated.\n+      if (__len == 0)\n+\t__s[0] = '\\0';\n     }\n \n   template<> \n@@ -195,14 +199,18 @@ namespace std\n \t   const tm* __tm) const\n     {\n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n-      __wcsftime_l(__s, __maxlen, __format, __tm, _M_c_locale_timepunct);\n+      const size_t __len = __wcsftime_l(__s, __maxlen, __format, __tm,\n+\t\t\t\t\t_M_c_locale_timepunct);\n #else\n       char* __old = strdup(setlocale(LC_ALL, NULL));\n       setlocale(LC_ALL, _M_name_timepunct);\n-      wcsftime(__s, __maxlen, __format, __tm);\n+      const size_t __len = wcsftime(__s, __maxlen, __format, __tm);\n       setlocale(LC_ALL, __old);\n       free(__old);\n #endif\n+      // Make sure __s is null terminated.\n+      if (__len == 0)\n+\t__s[0] = L'\\0';\n     }\n \n   template<> "}, {"sha": "193733f19e8ae3e337c1d2ab216ccef1b41e88a0", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb7930898721b14def216a5cf3b8bd619b1dbc52/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb7930898721b14def216a5cf3b8bd619b1dbc52/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=cb7930898721b14def216a5cf3b8bd619b1dbc52", "patch": "@@ -2834,6 +2834,8 @@ namespace std\n       explicit\n       __timepunct(__c_locale __cloc, const char* __s, size_t __refs = 0);\n \n+      // FIXME: for error checking purposes _M_put should return the return\n+      // value of strftime/wcsftime.\n       void\n       _M_put(_CharT* __s, size_t __maxlen, const _CharT* __format,\n \t     const tm* __tm) const;"}, {"sha": "f7a9564b6eb5d068c1d0fd704fc1f9ecc01de320", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb7930898721b14def216a5cf3b8bd619b1dbc52/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb7930898721b14def216a5cf3b8bd619b1dbc52/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=cb7930898721b14def216a5cf3b8bd619b1dbc52", "patch": "@@ -2246,7 +2246,7 @@ namespace std\n \n       // NB: This size is arbitrary. Should this be a data member,\n       // initialized at construction?\n-      const size_t __maxlen = 64;\n+      const size_t __maxlen = 128;\n       char_type* __res = \n        static_cast<char_type*>(__builtin_alloca(sizeof(char_type) * __maxlen));\n "}, {"sha": "39071e6ae717ffb71cdb7018712498ff145ba11b", "filename": "libstdc++-v3/testsuite/22_locale/time_put/put/char/17038.cc", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb7930898721b14def216a5cf3b8bd619b1dbc52/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put%2Fput%2Fchar%2F17038.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb7930898721b14def216a5cf3b8bd619b1dbc52/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put%2Fput%2Fchar%2F17038.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put%2Fput%2Fchar%2F17038.cc?ref=cb7930898721b14def216a5cf3b8bd619b1dbc52", "patch": "@@ -0,0 +1,63 @@\n+// 2004-08-25  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2004 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.5.3.1 time_put members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/17038\n+void test01()\n+{\n+  using namespace std;\n+  typedef ostreambuf_iterator<char> iterator_type;\n+\n+  bool test __attribute__((unused)) = true;\n+\n+  // create \"C\" time objects\n+  tm time1 = { 0, 0, 12, 4, 3, 71, 0, 93, 0 };\n+\n+  // basic construction\n+  locale loc_c = locale::classic();\n+  locale loc_in = __gnu_test::try_named_locale(\"ta_IN\");\n+  assert( loc_in != loc_c );\n+\n+  // create an ostream-derived object, cache the time_put facet\n+  ostringstream oss;\n+  oss.imbue(loc_in);\n+  const time_put<char>& tim_put =\n+    use_facet<time_put<char> >(oss.getloc()); \n+\n+  iterator_type os_it01 = tim_put.put(oss.rdbuf(), oss, '*', &time1, 'c');\n+  string result1 = oss.str();\n+\n+  char time_buffer[128];\n+  setlocale(LC_ALL, \"ta_IN\");\n+  VERIFY( strftime(time_buffer, 128, \"%c\", &time1) );\n+  \n+  VERIFY( result1 == time_buffer );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "f903aab5d219a5a2b9ff4bfb61d4005d4ad16fc6", "filename": "libstdc++-v3/testsuite/22_locale/time_put/put/wchar_t/17038.cc", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb7930898721b14def216a5cf3b8bd619b1dbc52/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put%2Fput%2Fwchar_t%2F17038.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb7930898721b14def216a5cf3b8bd619b1dbc52/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put%2Fput%2Fwchar_t%2F17038.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put%2Fput%2Fwchar_t%2F17038.cc?ref=cb7930898721b14def216a5cf3b8bd619b1dbc52", "patch": "@@ -0,0 +1,63 @@\n+// 2004-08-25  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2004 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.5.3.1 time_put members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/17038\n+void test01()\n+{\n+  using namespace std;\n+  typedef ostreambuf_iterator<wchar_t> iterator_type;\n+\n+  bool test __attribute__((unused)) = true;\n+\n+  // create \"C\" time objects\n+  tm time1 = { 0, 0, 12, 4, 3, 71, 0, 93, 0 };\n+\n+  // basic construction\n+  locale loc_c = locale::classic();\n+  locale loc_in = __gnu_test::try_named_locale(\"ta_IN\");\n+  assert( loc_in != loc_c );\n+\n+  // create an ostream-derived object, cache the time_put facet\n+  wostringstream oss;\n+  oss.imbue(loc_in);\n+  const time_put<wchar_t>& tim_put =\n+    use_facet<time_put<wchar_t> >(oss.getloc()); \n+\n+  iterator_type os_it01 = tim_put.put(oss.rdbuf(), oss, L'*', &time1, 'c');\n+  wstring result1 = oss.str();\n+\n+  wchar_t time_buffer[128];\n+  setlocale(LC_ALL, \"ta_IN\");\n+  VERIFY( wcsftime(time_buffer, 128, L\"%c\", &time1) );\n+  \n+  VERIFY( result1 == time_buffer );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}