{"sha": "9f9f61155a4836aa57e19405a95852172670b8ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWY5ZjYxMTU1YTQ4MzZhYTU3ZTE5NDA1YTk1ODUyMTcyNjcwYjhlZg==", "commit": {"author": {"name": "Ilya Tocar", "email": "ilya.tocar@intel.com", "date": "2014-12-08T11:45:35Z"}, "committer": {"name": "Ilya Tocar", "email": "tocarip@gcc.gnu.org", "date": "2014-12-08T11:45:35Z"}, "message": "Enable const permutations for V64QImode.\n\ngcc/\n\t* config/i386/i386.c (expand_vec_perm_broadcast_1): Handle v64qi.\n\t(expand_vec_perm_vpermi2_vpshub2): New.\n\t(ix86_expand_vec_perm_const_1): Use it.\n\t(ix86_vectorize_vec_perm_const_ok): Handle v64qi.\n\t* config/i386/sse.md (VEC_PERM_CONST): Add v64qi.\n\nFrom-SVN: r218482", "tree": {"sha": "727614011060b194e8be795773a0cd86576d9c4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/727614011060b194e8be795773a0cd86576d9c4a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f9f61155a4836aa57e19405a95852172670b8ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f9f61155a4836aa57e19405a95852172670b8ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f9f61155a4836aa57e19405a95852172670b8ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f9f61155a4836aa57e19405a95852172670b8ef/comments", "author": {"login": "TocarIP", "id": 16836375, "node_id": "MDQ6VXNlcjE2ODM2Mzc1", "avatar_url": "https://avatars.githubusercontent.com/u/16836375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TocarIP", "html_url": "https://github.com/TocarIP", "followers_url": "https://api.github.com/users/TocarIP/followers", "following_url": "https://api.github.com/users/TocarIP/following{/other_user}", "gists_url": "https://api.github.com/users/TocarIP/gists{/gist_id}", "starred_url": "https://api.github.com/users/TocarIP/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TocarIP/subscriptions", "organizations_url": "https://api.github.com/users/TocarIP/orgs", "repos_url": "https://api.github.com/users/TocarIP/repos", "events_url": "https://api.github.com/users/TocarIP/events{/privacy}", "received_events_url": "https://api.github.com/users/TocarIP/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d3fb44cbf6834f43cd359b531bf5df8aad185f39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3fb44cbf6834f43cd359b531bf5df8aad185f39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3fb44cbf6834f43cd359b531bf5df8aad185f39"}], "stats": {"total": 91, "additions": 90, "deletions": 1}, "files": [{"sha": "15f5f26a52c99c4b456efb111a1a562ed9e7beea", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f9f61155a4836aa57e19405a95852172670b8ef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f9f61155a4836aa57e19405a95852172670b8ef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9f9f61155a4836aa57e19405a95852172670b8ef", "patch": "@@ -1,3 +1,11 @@\n+2014-12-08  Ilya Tocar  <ilya.tocar@intel.com>\n+\n+\t* config/i386/i386.c (expand_vec_perm_broadcast_1): Handle v64qi.\n+\t(expand_vec_perm_vpermi2_vpshub2): New.\n+\t(ix86_expand_vec_perm_const_1): Use it.\n+\t(ix86_vectorize_vec_perm_const_ok): Handle v64qi.\n+\t* config/i386/sse.md (VEC_PERM_CONST): Add v64qi.\n+\n 2014-12-08  Ilya Enkovich  <ilya.enkovich@intel.com>\n \n \t* tree-chkp.c (chkp_build_returned_bound): Don't predict"}, {"sha": "88dd9f4a9dda85c6e07784391ed91066604ddcaf", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f9f61155a4836aa57e19405a95852172670b8ef/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f9f61155a4836aa57e19405a95852172670b8ef/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=9f9f61155a4836aa57e19405a95852172670b8ef", "patch": "@@ -48882,6 +48882,7 @@ expand_vec_perm_broadcast_1 (struct expand_vec_perm_d *d)\n \temit_move_insn (d->target, gen_lowpart (d->vmode, dest));\n       return true;\n \n+    case V64QImode:\n     case V32QImode:\n     case V16HImode:\n     case V8SImode:\n@@ -48915,6 +48916,78 @@ expand_vec_perm_broadcast (struct expand_vec_perm_d *d)\n   return expand_vec_perm_broadcast_1 (d);\n }\n \n+/* Implement arbitrary permutations of two V64QImode operands\n+   will 2 vpermi2w, 2 vpshufb and one vpor instruction.  */\n+static bool\n+expand_vec_perm_vpermi2_vpshub2 (struct expand_vec_perm_d *d)\n+{\n+  if (!TARGET_AVX512BW || !(d->vmode == V64QImode))\n+    return false;\n+\n+  if (d->testing_p)\n+    return true;\n+\n+  struct expand_vec_perm_d ds[2];\n+  rtx rperm[128], vperm, target0, target1;\n+  unsigned int i, nelt;\n+  machine_mode vmode;\n+\n+  nelt = d->nelt;\n+  vmode = V64QImode;\n+\n+  for (i = 0; i < 2; i++)\n+    {\n+      ds[i] = *d;\n+      ds[i].vmode = V32HImode;\n+      ds[i].nelt = 32;\n+      ds[i].target = gen_reg_rtx (V32HImode);\n+      ds[i].op0 = gen_lowpart (V32HImode, d->op0);\n+      ds[i].op1 = gen_lowpart (V32HImode, d->op1);\n+    }\n+\n+  /* Prepare permutations such that the first one takes care of\n+     putting the even bytes into the right positions or one higher\n+     positions (ds[0]) and the second one takes care of\n+     putting the odd bytes into the right positions or one below\n+     (ds[1]).  */\n+\n+  for (i = 0; i < nelt; i++)\n+    {\n+      ds[i & 1].perm[i / 2] = d->perm[i] / 2;\n+      if (i & 1)\n+\t{\n+\t  rperm[i] = constm1_rtx;\n+\t  rperm[i + 64] = GEN_INT ((i & 14) + (d->perm[i] & 1));\n+\t}\n+      else\n+\t{\n+\t  rperm[i] = GEN_INT ((i & 14) + (d->perm[i] & 1));\n+\t  rperm[i + 64] = constm1_rtx;\n+\t}\n+    }\n+\n+  bool ok = expand_vec_perm_1 (&ds[0]);\n+  gcc_assert (ok);\n+  ds[0].target = gen_lowpart (V64QImode, ds[0].target);\n+\n+  ok = expand_vec_perm_1 (&ds[1]);\n+  gcc_assert (ok);\n+  ds[1].target = gen_lowpart (V64QImode, ds[1].target);\n+\n+  vperm = gen_rtx_CONST_VECTOR (V64QImode, gen_rtvec_v (64, rperm));\n+  vperm = force_reg (vmode, vperm);\n+  target0 = gen_reg_rtx (V64QImode);\n+  emit_insn (gen_avx512bw_pshufbv64qi3 (target0, ds[0].target, vperm));\n+\n+  vperm = gen_rtx_CONST_VECTOR (V64QImode, gen_rtvec_v (64, rperm + 64));\n+  vperm = force_reg (vmode, vperm);\n+  target1 = gen_reg_rtx (V64QImode);\n+  emit_insn (gen_avx512bw_pshufbv64qi3 (target1, ds[1].target, vperm));\n+\n+  emit_insn (gen_iorv64qi3 (d->target, target0, target1));\n+  return true;\n+}\n+\n /* Implement arbitrary permutation of two V32QImode and V16QImode operands\n    with 4 vpshufb insns, 2 vpermq and 3 vpor.  We should have already failed\n    all the shorter instruction sequences.  */\n@@ -49089,6 +49162,9 @@ ix86_expand_vec_perm_const_1 (struct expand_vec_perm_d *d)\n   if (expand_vec_perm_vpshufb2_vpermq_even_odd (d))\n     return true;\n \n+  if (expand_vec_perm_vpermi2_vpshub2 (d))\n+    return true;\n+\n   /* ??? Look for narrow permutations whose element orderings would\n      allow the promotion to a wider mode.  */\n \n@@ -49233,6 +49309,11 @@ ix86_vectorize_vec_perm_const_ok (machine_mode vmode,\n \t/* All implementable with a single vpermi2 insn.  */\n \treturn true;\n       break;\n+    case V64QImode:\n+      if (TARGET_AVX512BW)\n+\t/* Implementable with 2 vpermi2, 2 vpshufb and 1 or insn.  */\n+\treturn true;\n+      break;\n     case V8SImode:\n     case V8SFmode:\n     case V4DFmode:"}, {"sha": "734e6b46b9ac030909ae50c971dfa46c4c5e7d05", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f9f61155a4836aa57e19405a95852172670b8ef/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f9f61155a4836aa57e19405a95852172670b8ef/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=9f9f61155a4836aa57e19405a95852172670b8ef", "patch": "@@ -10713,7 +10713,7 @@\n    (V32QI \"TARGET_AVX2\") (V16HI \"TARGET_AVX2\")\n    (V16SI \"TARGET_AVX512F\") (V8DI \"TARGET_AVX512F\")\n    (V16SF \"TARGET_AVX512F\") (V8DF \"TARGET_AVX512F\")\n-   (V32HI \"TARGET_AVX512BW\")])\n+   (V32HI \"TARGET_AVX512BW\") (V64QI \"TARGET_AVX512BW\")])\n \n (define_expand \"vec_perm_const<mode>\"\n   [(match_operand:VEC_PERM_CONST 0 \"register_operand\")"}]}