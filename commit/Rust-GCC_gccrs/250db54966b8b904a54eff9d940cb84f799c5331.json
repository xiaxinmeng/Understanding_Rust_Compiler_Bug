{"sha": "250db54966b8b904a54eff9d940cb84f799c5331", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjUwZGI1NDk2NmI4YjkwNGE1NGVmZjlkOTQwY2I4NGY3OTljNTMzMQ==", "commit": {"author": {"name": "Emmanuel Briot", "email": "briot@adacore.com", "date": "2007-10-15T13:54:12Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-10-15T13:54:12Z"}, "message": "ali.ads, ali.adb (Scan_ALI): Initialize XE.Tref to a known default value.\n\n2007-10-15  Emmanuel Briot  <briot@adacore.com>\n\n\t* ali.ads, ali.adb (Scan_ALI): Initialize XE.Tref to a known default\n\tvalue.\n\t(Xref_Record): Change type for Line, since in the case of a reference to\n\ta predefined entity (as happens for array index types), the line is set\n\tto 0.\n\tAdd support for parsing multiple array index types info, or\n\tmultiple inherited interfaces info. This information cannot be stored\n\tin Xref_Entity_Record, which only supports a single instance of Tref_*,\n\tand is therefore stored in the list of references instead. It has a\n\tspecial treatement later on in tools that use this information.\n\nFrom-SVN: r129320", "tree": {"sha": "f0252da96af134155da2f1882eb63debedfb2dd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f0252da96af134155da2f1882eb63debedfb2dd7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/250db54966b8b904a54eff9d940cb84f799c5331", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/250db54966b8b904a54eff9d940cb84f799c5331", "html_url": "https://github.com/Rust-GCC/gccrs/commit/250db54966b8b904a54eff9d940cb84f799c5331", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/250db54966b8b904a54eff9d940cb84f799c5331/comments", "author": {"login": "briot", "id": 42402, "node_id": "MDQ6VXNlcjQyNDAy", "avatar_url": "https://avatars.githubusercontent.com/u/42402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/briot", "html_url": "https://github.com/briot", "followers_url": "https://api.github.com/users/briot/followers", "following_url": "https://api.github.com/users/briot/following{/other_user}", "gists_url": "https://api.github.com/users/briot/gists{/gist_id}", "starred_url": "https://api.github.com/users/briot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/briot/subscriptions", "organizations_url": "https://api.github.com/users/briot/orgs", "repos_url": "https://api.github.com/users/briot/repos", "events_url": "https://api.github.com/users/briot/events{/privacy}", "received_events_url": "https://api.github.com/users/briot/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aace458a3ebb6f55045922bbccd23926e2d16e71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aace458a3ebb6f55045922bbccd23926e2d16e71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aace458a3ebb6f55045922bbccd23926e2d16e71"}], "stats": {"total": 116, "additions": 89, "deletions": 27}, "files": [{"sha": "26053016af686878a63e3a418093692cdb3d4eb4", "filename": "gcc/ada/ali.adb", "status": "modified", "additions": 72, "deletions": 25, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/250db54966b8b904a54eff9d940cb84f799c5331/gcc%2Fada%2Fali.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/250db54966b8b904a54eff9d940cb84f799c5331/gcc%2Fada%2Fali.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fali.adb?ref=250db54966b8b904a54eff9d940cb84f799c5331", "patch": "@@ -2174,35 +2174,82 @@ package body ALI is\n \n                   Skip_Space;\n \n-                  --  See if type reference present\n-\n-                  Get_Typeref\n-                    (Current_File_Num, XE.Tref, XE.Tref_File_Num, XE.Tref_Line,\n-                     XE.Tref_Type, XE.Tref_Col, XE.Tref_Standard_Entity);\n-\n-                  --  Do we have an overriding procedure, instead ?\n-                  if XE.Tref_Type = 'p' then\n-                     XE.Oref_File_Num := XE.Tref_File_Num;\n-                     XE.Oref_Line     := XE.Tref_Line;\n-                     XE.Oref_Col      := XE.Tref_Col;\n-                     XE.Tref_File_Num := No_Sdep_Id;\n-                     XE.Tref          := Tref_None;\n-                  else\n-                     --  We might have additional information about the\n-                     --  overloaded subprograms\n+                  XE.Oref_File_Num := No_Sdep_Id;\n+                  XE.Tref_File_Num := No_Sdep_Id;\n+                  XE.Tref          := Tref_None;\n+                  XE.First_Xref    := Xref.Last + 1;\n+\n+                  --  Loop to check for additional info present\n+\n+                  loop\n                      declare\n-                        Ref : Tref_Kind;\n-                        Typ : Character;\n-                        Standard_Entity : Name_Id;\n+                        Ref  : Tref_Kind;\n+                        File : Sdep_Id;\n+                        Line : Nat;\n+                        Typ  : Character;\n+                        Col  : Nat;\n+                        Std  : Name_Id;\n+\n                      begin\n                         Get_Typeref\n-                          (Current_File_Num,\n-                           Ref, XE.Oref_File_Num,\n-                           XE.Oref_Line, Typ, XE.Oref_Col, Standard_Entity);\n-                     end;\n-                  end if;\n+                          (Current_File_Num, Ref, File, Line, Typ, Col, Std);\n+                        exit when Ref = Tref_None;\n+\n+                        --  Do we have an overriding procedure?\n+\n+                        if Ref = Tref_Derived and then Typ = 'p' then\n+                           XE.Oref_File_Num := File;\n+                           XE.Oref_Line     := Line;\n+                           XE.Oref_Col      := Col;\n+\n+                        --  Arrays never override anything, and <> points to\n+                        --  the index types instead\n+\n+                        elsif Ref = Tref_Derived and then XE.Etype = 'A' then\n+\n+                           --  Index types are stored in the list of references\n+\n+                           Xref.Increment_Last;\n+\n+                           declare\n+                              XR : Xref_Record renames Xref.Table (Xref.Last);\n+                           begin\n+                              XR.File_Num := File;\n+                              XR.Line     := Line;\n+                              XR.Rtype    := Array_Index_Reference;\n+                              XR.Col      := Col;\n+                              XR.Name     := Std;\n+                           end;\n+\n+                        --  Interfaces are stored in the list of references,\n+                        --  although the parent type itself is stored in XE\n+\n+                        elsif Ref = Tref_Derived\n+                          and then Typ = 'R'\n+                          and then XE.Tref_File_Num /= No_Sdep_Id\n+                        then\n+                           Xref.Increment_Last;\n+\n+                           declare\n+                              XR : Xref_Record renames Xref.Table (Xref.Last);\n+                           begin\n+                              XR.File_Num := File;\n+                              XR.Line     := Line;\n+                              XR.Rtype    := Interface_Reference;\n+                              XR.Col      := Col;\n+                              XR.Name     := Std;\n+                           end;\n \n-                  XE.First_Xref := Xref.Last + 1;\n+                        else\n+                           XE.Tref                 := Ref;\n+                           XE.Tref_File_Num        := File;\n+                           XE.Tref_Line            := Line;\n+                           XE.Tref_Type            := Typ;\n+                           XE.Tref_Col             := Col;\n+                           XE.Tref_Standard_Entity := Std;\n+                        end if;\n+                     end;\n+                  end loop;\n \n                   --  Loop through cross-references for this entity\n "}, {"sha": "c90954acbcbd06e1031be47217fcc90771f5dff0", "filename": "gcc/ada/ali.ads", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/250db54966b8b904a54eff9d940cb84f799c5331/gcc%2Fada%2Fali.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/250db54966b8b904a54eff9d940cb84f799c5331/gcc%2Fada%2Fali.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fali.ads?ref=250db54966b8b904a54eff9d940cb84f799c5331", "patch": "@@ -865,6 +865,13 @@ package ALI is\n      Table_Increment      => 300,\n      Table_Name           => \"Xref_Entity\");\n \n+   Array_Index_Reference : constant Character := '*';\n+   Interface_Reference   : constant Character := 'I';\n+   --  Some special types of references. In the ALI file itself, these\n+   --  are output as attributes of the entity, not as references, but\n+   --  there is no provision in Xref_Entity_Record for storing multiple\n+   --  such references.\n+\n    --  The following table records actual cross-references\n \n    type Xref_Record is record\n@@ -873,8 +880,9 @@ package ALI is\n       --  that if no file entry is present explicitly, this is just a copy\n       --  of the reference for the current cross-reference section.\n \n-      Line : Pos;\n-      --  Line number for the reference\n+      Line : Nat;\n+      --  Line number for the reference. This is zero when referencing a\n+      --  predefined entity, but in this case Name is set.\n \n       Rtype : Character;\n       --  Indicates type of reference, using code used in ALI file:\n@@ -884,11 +892,18 @@ package ALI is\n       --    c = completion of private or incomplete type\n       --    x = type extension\n       --    i = implicit reference\n+      --    Array_Index_Reference = reference to the index of an array\n+      --    Interface_Reference   = reference to an interface implemented\n+      --                            by the type\n       --  See description in lib-xref.ads for further details\n \n       Col : Nat;\n       --  Column number for the reference\n \n+      Name : Name_Id := No_Name;\n+      --  This is only used when referencing a predefined entity. Currently,\n+      --  this only occurs for array indexes.\n+\n       --  Note: for instantiation references, Rtype is set to ' ', and Col is\n       --  set to zero. One or more such entries can follow any other reference.\n       --  When there is more than one such entry, this is to be read as:"}]}