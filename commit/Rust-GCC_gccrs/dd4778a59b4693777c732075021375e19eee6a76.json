{"sha": "dd4778a59b4693777c732075021375e19eee6a76", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQ0Nzc4YTU5YjQ2OTM3NzdjNzMyMDc1MDIxMzc1ZTE5ZWVlNmE3Ng==", "commit": {"author": {"name": "Claudiu Zissulescu", "email": "claziss@synopsys.com", "date": "2021-06-09T09:12:57Z"}, "committer": {"name": "Claudiu Zissulescu", "email": "claziss@synopsys.com", "date": "2021-06-09T09:12:57Z"}, "message": "arc: Fix (u)maddhisi patterns\n\nRework the (u)maddhisi4 patterns and use VMAC2H(U) instruction instead\nof the 64bit MAC(U) instruction.\nThis fixes the next execute.exp failures:\n     arith-rand-ll.c   -O2  execution test\n     arith-rand-ll.c   -O3  execution test\n     pr78726.c   -O2  execution test\n     pr78726.c   -O3  execution test\n\ngcc/\n2021-06-09  Claudiu Zissulescu  <claziss@synopsys.com>\n\n\t* config/arc/arc.md (maddhisi4): Use VMAC2H instruction.\n\t(machi): New pattern.\n\t(umaddhisi4): Use VMAC2HU instruction.\n\t(umachi): New pattern.\n\nSigned-off-by: Claudiu Zissulescu <claziss@synopsys.com>", "tree": {"sha": "0397f505031c339f572c7c0ad1aa146340e6f52b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0397f505031c339f572c7c0ad1aa146340e6f52b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd4778a59b4693777c732075021375e19eee6a76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd4778a59b4693777c732075021375e19eee6a76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd4778a59b4693777c732075021375e19eee6a76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd4778a59b4693777c732075021375e19eee6a76/comments", "author": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0ba7a8af5366c37241f20e8be41e362f7260389", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0ba7a8af5366c37241f20e8be41e362f7260389", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0ba7a8af5366c37241f20e8be41e362f7260389"}], "stats": {"total": 66, "additions": 41, "deletions": 25}, "files": [{"sha": "aed0b40728b03e003fab755073b2330c00519abd", "filename": "gcc/config/arc/arc.md", "status": "modified", "additions": 41, "deletions": 25, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd4778a59b4693777c732075021375e19eee6a76/gcc%2Fconfig%2Farc%2Farc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd4778a59b4693777c732075021375e19eee6a76/gcc%2Fconfig%2Farc%2Farc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.md?ref=dd4778a59b4693777c732075021375e19eee6a76", "patch": "@@ -6025,48 +6025,64 @@ core_3, archs4x, archs4xd, archs4xd_slow\"\n \n ;; MAC and DMPY instructions\n \n-; Use MAC instruction to emulate 16bit mac.\n+; Use VMAC2H(U) instruction to emulate scalar 16bit mac.\n (define_expand \"maddhisi4\"\n   [(match_operand:SI 0 \"register_operand\" \"\")\n    (match_operand:HI 1 \"register_operand\" \"\")\n    (match_operand:HI 2 \"extend_operand\"   \"\")\n    (match_operand:SI 3 \"register_operand\" \"\")]\n-  \"TARGET_PLUS_DMPY\"\n+  \"TARGET_PLUS_MACD\"\n   \"{\n-   rtx acc_reg = gen_rtx_REG (DImode, ACC_REG_FIRST);\n-   rtx tmp1 = gen_reg_rtx (SImode);\n-   rtx tmp2 = gen_reg_rtx (SImode);\n-   rtx accl = gen_lowpart (SImode, acc_reg);\n-\n-   emit_move_insn (accl, operands[3]);\n-   emit_insn (gen_rtx_SET (tmp1, gen_rtx_SIGN_EXTEND (SImode, operands[1])));\n-   emit_insn (gen_rtx_SET (tmp2, gen_rtx_SIGN_EXTEND (SImode, operands[2])));\n-   emit_insn (gen_mac (tmp1, tmp2));\n-   emit_move_insn (operands[0], accl);\n+   rtx acc_reg = gen_rtx_REG (SImode, ACC_REG_FIRST);\n+\n+   emit_move_insn (acc_reg, operands[3]);\n+   emit_insn (gen_machi (operands[1], operands[2]));\n+   emit_move_insn (operands[0], acc_reg);\n    DONE;\n   }\")\n \n-; The same for the unsigned variant, but using MACU instruction.\n+(define_insn \"machi\"\n+  [(set (reg:SI ARCV2_ACC)\n+\t(plus:SI\n+\t (mult:SI (sign_extend:SI (match_operand:HI 0 \"register_operand\" \"%r\"))\n+\t\t  (sign_extend:SI (match_operand:HI 1 \"register_operand\" \"r\")))\n+\t (reg:SI ARCV2_ACC)))]\n+  \"TARGET_PLUS_MACD\"\n+  \"vmac2h\\\\t0,%0,%1\"\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"type\" \"multi\")\n+   (set_attr \"predicable\" \"no\")\n+   (set_attr \"cond\" \"nocond\")])\n+\n+; The same for the unsigned variant, but using VMAC2HU instruction.\n (define_expand \"umaddhisi4\"\n   [(match_operand:SI 0 \"register_operand\" \"\")\n    (match_operand:HI 1 \"register_operand\" \"\")\n-   (match_operand:HI 2 \"extend_operand\"   \"\")\n+   (match_operand:HI 2 \"register_operand\" \"\")\n    (match_operand:SI 3 \"register_operand\" \"\")]\n-  \"TARGET_PLUS_DMPY\"\n+  \"TARGET_PLUS_MACD\"\n   \"{\n-   rtx acc_reg = gen_rtx_REG (DImode, ACC_REG_FIRST);\n-   rtx tmp1 = gen_reg_rtx (SImode);\n-   rtx tmp2 = gen_reg_rtx (SImode);\n-   rtx accl = gen_lowpart (SImode, acc_reg);\n-\n-   emit_move_insn (accl, operands[3]);\n-   emit_insn (gen_rtx_SET (tmp1, gen_rtx_ZERO_EXTEND (SImode, operands[1])));\n-   emit_insn (gen_rtx_SET (tmp2, gen_rtx_ZERO_EXTEND (SImode, operands[2])));\n-   emit_insn (gen_macu (tmp1, tmp2));\n-   emit_move_insn (operands[0], accl);\n+   rtx acc_reg = gen_rtx_REG (SImode, ACC_REG_FIRST);\n+\n+   emit_move_insn (acc_reg, operands[3]);\n+   emit_insn (gen_umachi (operands[1], operands[2]));\n+   emit_move_insn (operands[0], acc_reg);\n    DONE;\n   }\")\n \n+(define_insn \"umachi\"\n+  [(set (reg:SI ARCV2_ACC)\n+\t(plus:SI\n+\t (mult:SI (zero_extend:SI (match_operand:HI 0 \"register_operand\" \"%r\"))\n+\t\t  (zero_extend:SI (match_operand:HI 1 \"register_operand\" \"r\")))\n+\t (reg:SI ARCV2_ACC)))]\n+  \"TARGET_PLUS_MACD\"\n+  \"vmac2hu\\\\t0,%0,%1\"\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"type\" \"multi\")\n+   (set_attr \"predicable\" \"no\")\n+   (set_attr \"cond\" \"nocond\")])\n+\n (define_expand \"maddsidi4\"\n   [(match_operand:DI 0 \"register_operand\" \"\")\n    (match_operand:SI 1 \"register_operand\" \"\")"}]}