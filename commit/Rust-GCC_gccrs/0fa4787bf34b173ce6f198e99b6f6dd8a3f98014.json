{"sha": "0fa4787bf34b173ce6f198e99b6f6dd8a3f98014", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGZhNDc4N2JmMzRiMTczY2U2ZjE5OGU5OWI2ZjZkZDhhM2Y5ODAxNA==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-12-11T11:02:43Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-08-27T00:50:49Z"}, "message": "Fold more shuffle builtins to VEC_PERM_EXPR.\n\nA follow-up to https://gcc.gnu.org/pipermail/gcc-patches/2019-May/521983.html\n\ngcc/\n\tPR target/98167\n\tPR target/43147\n\t* config/i386/i386.c (ix86_gimple_fold_builtin): Fold\n\tIX86_BUILTIN_SHUFPD512, IX86_BUILTIN_SHUFPS512,\n\tIX86_BUILTIN_SHUFPD256\uff0c IX86_BUILTIN_SHUFPS\uff0c\n\tIX86_BUILTIN_SHUFPS256.\n\t(ix86_masked_all_ones): New function.\n\ngcc/testsuite/\n\t* gcc.target/i386/avx512f-vshufpd-1.c: Adjust testcase.\n\t* gcc.target/i386/avx512f-vshufps-1.c: Adjust testcase.\n\t* gcc.target/i386/pr43147.c: New test.", "tree": {"sha": "e2732a103a590801e75ec68d2a85a7db802f881d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2732a103a590801e75ec68d2a85a7db802f881d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0fa4787bf34b173ce6f198e99b6f6dd8a3f98014", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fa4787bf34b173ce6f198e99b6f6dd8a3f98014", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fa4787bf34b173ce6f198e99b6f6dd8a3f98014", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fa4787bf34b173ce6f198e99b6f6dd8a3f98014/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ccc191454304cc64798585fc0c903f54f355d50b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccc191454304cc64798585fc0c903f54f355d50b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccc191454304cc64798585fc0c903f54f355d50b"}], "stats": {"total": 112, "additions": 88, "deletions": 24}, "files": [{"sha": "3bb2cab57a3c0429f6805994d0b41642557c81c6", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 69, "deletions": 22, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fa4787bf34b173ce6f198e99b6f6dd8a3f98014/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fa4787bf34b173ce6f198e99b6f6dd8a3f98014/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=0fa4787bf34b173ce6f198e99b6f6dd8a3f98014", "patch": "@@ -17559,6 +17559,21 @@ ix86_vector_shift_count (tree arg1)\n   return NULL_TREE;\n }\n \n+/* Return true if arg_mask is all ones, ELEMS is elements number of\n+   corresponding vector.  */\n+static bool\n+ix86_masked_all_ones (unsigned HOST_WIDE_INT elems, tree arg_mask)\n+{\n+  if (TREE_CODE (arg_mask) != INTEGER_CST)\n+    return false;\n+\n+  unsigned HOST_WIDE_INT mask = TREE_INT_CST_LOW (arg_mask);\n+  if ((mask | (HOST_WIDE_INT_M1U << elems)) != HOST_WIDE_INT_M1U)\n+    return false;\n+\n+  return true;\n+}\n+\n static tree\n ix86_fold_builtin (tree fndecl, int n_args,\n \t\t   tree *args, bool ignore ATTRIBUTE_UNUSED)\n@@ -18044,6 +18059,7 @@ ix86_gimple_fold_builtin (gimple_stmt_iterator *gsi)\n   enum tree_code tcode;\n   unsigned HOST_WIDE_INT count;\n   bool is_vshift;\n+  unsigned HOST_WIDE_INT elems;\n \n   switch (fn_code)\n     {\n@@ -18367,17 +18383,11 @@ ix86_gimple_fold_builtin (gimple_stmt_iterator *gsi)\n       gcc_assert (n_args >= 2);\n       arg0 = gimple_call_arg (stmt, 0);\n       arg1 = gimple_call_arg (stmt, 1);\n-      if (n_args > 2)\n-\t{\n-\t  /* This is masked shift.  Only optimize if the mask is all ones.  */\n-\t  tree argl = gimple_call_arg (stmt, n_args - 1);\n-\t  if (!tree_fits_uhwi_p (argl))\n-\t    break;\n-\t  unsigned HOST_WIDE_INT mask = tree_to_uhwi (argl);\n-\t  unsigned elems = TYPE_VECTOR_SUBPARTS (TREE_TYPE (arg0));\n-\t  if ((mask | (HOST_WIDE_INT_M1U << elems)) != HOST_WIDE_INT_M1U)\n-\t    break;\n-\t}\n+      elems = TYPE_VECTOR_SUBPARTS (TREE_TYPE (arg0));\n+      /* For masked shift, only optimize if the mask is all ones.  */\n+      if (n_args > 2\n+\t  && !ix86_masked_all_ones (elems, gimple_call_arg (stmt, n_args - 1)))\n+\tbreak;\n       if (is_vshift)\n \t{\n \t  if (TREE_CODE (arg1) != VECTOR_CST)\n@@ -18426,25 +18436,62 @@ ix86_gimple_fold_builtin (gimple_stmt_iterator *gsi)\n \t}\n       break;\n \n+    case IX86_BUILTIN_SHUFPD512:\n+    case IX86_BUILTIN_SHUFPS512:\n     case IX86_BUILTIN_SHUFPD:\n+    case IX86_BUILTIN_SHUFPD256:\n+    case IX86_BUILTIN_SHUFPS:\n+    case IX86_BUILTIN_SHUFPS256:\n+      arg0 = gimple_call_arg (stmt, 0);\n+      elems = TYPE_VECTOR_SUBPARTS (TREE_TYPE (arg0));\n+      /* This is masked shuffle.  Only optimize if the mask is all ones.  */\n+      if (n_args > 3\n+\t  && !ix86_masked_all_ones (elems,\n+\t\t\t\t    gimple_call_arg (stmt, n_args - 1)))\n+\tbreak;\n       arg2 = gimple_call_arg (stmt, 2);\n       if (TREE_CODE (arg2) == INTEGER_CST)\n \t{\n+\t  unsigned HOST_WIDE_INT shuffle_mask = TREE_INT_CST_LOW (arg2);\n+\t  /* Check valid imm, refer to gcc.target/i386/testimm-10.c.  */\n+\t  if (shuffle_mask > 255)\n+\t    return false;\n+\n+\t  machine_mode imode = GET_MODE_INNER (TYPE_MODE (TREE_TYPE (arg0)));\n \t  location_t loc = gimple_location (stmt);\n-\t  unsigned HOST_WIDE_INT imask = TREE_INT_CST_LOW (arg2);\n-\t  arg0 = gimple_call_arg (stmt, 0);\n+\t  tree itype = (imode == E_DFmode\n+\t\t\t? long_long_integer_type_node : integer_type_node);\n+\t  tree vtype = build_vector_type (itype, elems);\n+\t  tree_vector_builder elts (vtype, elems, 1);\n+\n+\n+\t  /* Transform integer shuffle_mask to vector perm_mask which\n+\t     is used by vec_perm_expr, refer to shuflp[sd]256/512 in sse.md.  */\n+\t  for (unsigned i = 0; i != elems; i++)\n+\t    {\n+\t      unsigned sel_idx;\n+\t      /* Imm[1:0](if VL > 128, then use Imm[3:2],Imm[5:4],Imm[7:6])\n+\t\t provide 2 select constrols for each element of the\n+\t\t destination.  */\n+\t      if (imode == E_DFmode)\n+\t\tsel_idx = (i & 1) * elems + (i & ~1)\n+\t\t\t  + ((shuffle_mask >> i) & 1);\n+\t      else\n+\t\t{\n+\t\t  /* Imm[7:0](if VL > 128, also use Imm[7:0]) provide 4 select\n+\t\t     controls for each element of the destination.  */\n+\t\t  unsigned j = i % 4;\n+\t\t  sel_idx = ((i >> 1) & 1) * elems + (i & ~3)\n+\t\t\t    + ((shuffle_mask >> 2 * j) & 3);\n+\t\t}\n+\t      elts.quick_push (build_int_cst (itype, sel_idx));\n+\t    }\n+\n+\t  tree perm_mask = elts.build ();\n \t  arg1 = gimple_call_arg (stmt, 1);\n-\t  tree itype = long_long_integer_type_node;\n-\t  tree vtype = build_vector_type (itype, 2); /* V2DI */\n-\t  tree_vector_builder elts (vtype, 2, 1);\n-\t  /* Ignore bits other than the lowest 2.  */\n-\t  elts.quick_push (build_int_cst (itype, imask & 1));\n-\t  imask >>= 1;\n-\t  elts.quick_push (build_int_cst (itype, 2 + (imask & 1)));\n-\t  tree omask = elts.build ();\n \t  gimple *g = gimple_build_assign (gimple_call_lhs (stmt),\n \t\t\t\t\t   VEC_PERM_EXPR,\n-\t\t\t\t\t   arg0, arg1, omask);\n+\t\t\t\t\t   arg0, arg1, perm_mask);\n \t  gimple_set_location (g, loc);\n \t  gsi_replace (gsi, g, false);\n \t  return true;"}, {"sha": "8df5b9d4441a8a52e24f106b7236bf2c991b1b1d", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vshufpd-1.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fa4787bf34b173ce6f198e99b6f6dd8a3f98014/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vshufpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fa4787bf34b173ce6f198e99b6f6dd8a3f98014/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vshufpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vshufpd-1.c?ref=0fa4787bf34b173ce6f198e99b6f6dd8a3f98014", "patch": "@@ -7,11 +7,12 @@\n #include <immintrin.h>\n \n __m512d x;\n+__m512d y;\n \n void extern\n avx512f_test (void)\n {\n-  x = _mm512_shuffle_pd (x, x, 56);\n+  x = _mm512_shuffle_pd (x, y, 56);\n   x = _mm512_mask_shuffle_pd (x, 2, x, x, 56);\n   x = _mm512_maskz_shuffle_pd (2, x, x, 56);\n }"}, {"sha": "378ae4b7101b5543ec2f67d25f58d1f584309c1d", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vshufps-1.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fa4787bf34b173ce6f198e99b6f6dd8a3f98014/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vshufps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fa4787bf34b173ce6f198e99b6f6dd8a3f98014/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vshufps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vshufps-1.c?ref=0fa4787bf34b173ce6f198e99b6f6dd8a3f98014", "patch": "@@ -7,11 +7,12 @@\n #include <immintrin.h>\n \n __m512 x;\n+__m512 y;\n \n void extern\n avx512f_test (void)\n {\n-  x = _mm512_shuffle_ps (x, x, 56);\n+  x = _mm512_shuffle_ps (x, y, 56);\n   x = _mm512_mask_shuffle_ps (x, 2, x, x, 56);\n   x = _mm512_maskz_shuffle_ps (2, x, x, 56);\n }"}, {"sha": "3c30f917c069ed26675f68b89b581cda58d4e2ff", "filename": "gcc/testsuite/gcc.target/i386/pr43147.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fa4787bf34b173ce6f198e99b6f6dd8a3f98014/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr43147.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fa4787bf34b173ce6f198e99b6f6dd8a3f98014/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr43147.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr43147.c?ref=0fa4787bf34b173ce6f198e99b6f6dd8a3f98014", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse2\" } */\n+/* { dg-final { scan-assembler \"movaps\" } } */\n+/* { dg-final { scan-assembler-not \"shufps\" } } */\n+\n+#include <x86intrin.h>\n+\n+__m128\n+foo (void)\n+{\n+  __m128 m = _mm_set_ps(1.0f, 2.0f, 3.0f, 4.0f);\n+  m = _mm_shuffle_ps(m, m, 0xC9);\n+  m = _mm_shuffle_ps(m, m, 0x2D);\n+  return m;\n+}"}]}