{"sha": "9707d2e5dbb92d2bc990c922461a5a16ae652319", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTcwN2QyZTVkYmI5MmQyYmM5OTBjOTIyNDYxYTVhMTZhZTY1MjMxOQ==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-08-11T20:53:53Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-08-11T20:53:53Z"}, "message": "c++: parameterized requires-expr as default argument [PR101725]\n\nHere we're rejecting the default template argument\n\n  requires (T t) { x(t); }\n\nbecause we consider the 't' in the requirement to be a local variable\n(according to local_variable_p), and we generally forbid local variables\nfrom appearing inside default arguments.  We can perhaps fix this by\ngiving special treatment to parameters introduced by requires-expressions,\nbut DR 2082 relaxed the restriction about local variables appearing within\ndefault arguments to permit them inside unevaluated operands thereof.\nSo this patch just implements DR 2082 which also fixes this PR since a\nrequires-expression is an unevaluated context.\n\n\tPR c++/101725\n\tDR 2082\n\ngcc/cp/ChangeLog:\n\n\t* cp-tree.h (unevaluated_p): Return true for REQUIRES_EXPR.\n\t* decl.c (local_variable_p_walkfn): Don't walk into unevaluated\n\toperands.\n\t* parser.c (cp_parser_primary_expression) <case CPP_NAME>: Never\n\treject uses of local variables in unevaluated contexts.\n\t* tree.c (cp_walk_subtrees) <case REQUIRES_EXPR>: Increment\n\tcp_unevaluated_operand.  Use cp_walk_tree directly instead of\n\tWALK_SUBTREE to avoid the goto.  Use REQUIRES_EXPR_REQS instead\n\tof TREE_OPERAND directly.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/DRs/dr2082.C: New test.\n\t* g++.dg/cpp2a/concepts-uneval4.C: New test.", "tree": {"sha": "0c36cbadf41c64bdcb4cc6f4bb66e1d0eb42c68d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c36cbadf41c64bdcb4cc6f4bb66e1d0eb42c68d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9707d2e5dbb92d2bc990c922461a5a16ae652319", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9707d2e5dbb92d2bc990c922461a5a16ae652319", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9707d2e5dbb92d2bc990c922461a5a16ae652319", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9707d2e5dbb92d2bc990c922461a5a16ae652319/comments", "author": null, "committer": null, "parents": [{"sha": "ee8f9ff00d79998274c967ad0c23692be9dd3ada", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee8f9ff00d79998274c967ad0c23692be9dd3ada", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee8f9ff00d79998274c967ad0c23692be9dd3ada"}], "stats": {"total": 44, "additions": 41, "deletions": 3}, "files": [{"sha": "6a8264b0c618a43fe7d74ad62ca2cea3d0c0b2cd", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9707d2e5dbb92d2bc990c922461a5a16ae652319/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9707d2e5dbb92d2bc990c922461a5a16ae652319/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=9707d2e5dbb92d2bc990c922461a5a16ae652319", "patch": "@@ -8494,7 +8494,8 @@ unevaluated_p (tree_code code)\n   return (code == DECLTYPE_TYPE\n \t  || code == ALIGNOF_EXPR\n \t  || code == SIZEOF_EXPR\n-\t  || code == NOEXCEPT_EXPR);\n+\t  || code == NOEXCEPT_EXPR\n+\t  || code == REQUIRES_EXPR);\n }\n \n /* RAII class to push/pop the access scope for T.  */"}, {"sha": "b3671ee89565820bf34c133ea6cda8592ce1eeea", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9707d2e5dbb92d2bc990c922461a5a16ae652319/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9707d2e5dbb92d2bc990c922461a5a16ae652319/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=9707d2e5dbb92d2bc990c922461a5a16ae652319", "patch": "@@ -14270,6 +14270,14 @@ static tree\n local_variable_p_walkfn (tree *tp, int *walk_subtrees,\n \t\t\t void * /*data*/)\n {\n+  if (unevaluated_p (TREE_CODE (*tp)))\n+    {\n+      /* DR 2082 permits local variables in unevaluated contexts\n+\t within a default argument.  */\n+      *walk_subtrees = 0;\n+      return NULL_TREE;\n+    }\n+\n   if (local_variable_p (*tp)\n       && (!DECL_ARTIFICIAL (*tp) || DECL_NAME (*tp) == this_identifier))\n     return *tp;"}, {"sha": "d564e3ba2fadc8bfdf8a5836765d33789e07b57f", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9707d2e5dbb92d2bc990c922461a5a16ae652319/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9707d2e5dbb92d2bc990c922461a5a16ae652319/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=9707d2e5dbb92d2bc990c922461a5a16ae652319", "patch": "@@ -5989,7 +5989,10 @@ cp_parser_primary_expression (cp_parser *parser,\n \t    /* Check to see if DECL is a local variable in a context\n \t       where that is forbidden.  */\n \t    if ((parser->local_variables_forbidden_p & LOCAL_VARS_FORBIDDEN)\n-\t\t&& local_variable_p (decl))\n+\t\t&& local_variable_p (decl)\n+\t\t/* DR 2082 permits local variables in unevaluated contexts\n+\t\t   within a default argument.  */\n+\t\t&& !cp_unevaluated_operand)\n \t      {\n \t\tconst char *msg\n \t\t  = (TREE_CODE (decl) == PARM_DECL"}, {"sha": "e8831b218022b9b027540165431744ed90e3d506", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9707d2e5dbb92d2bc990c922461a5a16ae652319/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9707d2e5dbb92d2bc990c922461a5a16ae652319/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=9707d2e5dbb92d2bc990c922461a5a16ae652319", "patch": "@@ -5386,7 +5386,9 @@ cp_walk_subtrees (tree *tp, int *walk_subtrees_p, walk_tree_fn func,\n       // walk the parameter list. Doing so causes false\n       // positives in the pack expansion checker since the\n       // requires parameters are introduced as pack expansions.\n-      WALK_SUBTREE (TREE_OPERAND (*tp, 1));\n+      ++cp_unevaluated_operand;\n+      result = cp_walk_tree (&REQUIRES_EXPR_REQS (*tp), func, data, pset);\n+      --cp_unevaluated_operand;\n       *walk_subtrees_p = 0;\n       break;\n "}, {"sha": "84bb23f63f2180dbec7abd6b51176a0e51373ee9", "filename": "gcc/testsuite/g++.dg/DRs/dr2082.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9707d2e5dbb92d2bc990c922461a5a16ae652319/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FDRs%2Fdr2082.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9707d2e5dbb92d2bc990c922461a5a16ae652319/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FDRs%2Fdr2082.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FDRs%2Fdr2082.C?ref=9707d2e5dbb92d2bc990c922461a5a16ae652319", "patch": "@@ -0,0 +1,12 @@\n+// DR 2082\n+\n+void f() {\n+  int i;\n+  extern void h(int x = sizeof(i));\n+}\n+\n+class A {\n+  void f(A* p = this) { } // { dg-error \"this\" }\n+};\n+\n+int h(int a, int b = sizeof(a));"}, {"sha": "1be27d1ab284a39cafbd1caa7e10292875215848", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-uneval4.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9707d2e5dbb92d2bc990c922461a5a16ae652319/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-uneval4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9707d2e5dbb92d2bc990c922461a5a16ae652319/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-uneval4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-uneval4.C?ref=9707d2e5dbb92d2bc990c922461a5a16ae652319", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/101725\n+// { dg-do compile { target c++20 } }\n+\n+template<class T, bool V = requires (T t) { x(t); }> void f();\n+\n+struct A {\n+  int m;\n+  void f(int a, int b = requires (int t) { a + m + t; });\n+};\n+\n+void g();\n+static_assert(noexcept(requires { g(); }));"}]}