{"sha": "d572ad49217c09ca09e382774fdc6c407db4fc20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDU3MmFkNDkyMTdjMDljYTA5ZTM4Mjc3NGZkYzZjNDA3ZGI0ZmMyMA==", "commit": {"author": {"name": "Alex Coplan", "email": "alex.coplan@arm.com", "date": "2020-05-11T14:18:46Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-05-11T14:18:46Z"}, "message": "[PATCH] aarch64: prefer using csinv, csneg in zero extend contexts\n\nGiven the C code:\n\nunsigned long long inv(unsigned a, unsigned b, unsigned c)\n{\n  return a ? b : ~c;\n}\n\nPrior to this patch, AArch64 GCC at -O2 generates:\n\ninv:\n        cmp     w0, 0\n        mvn     w2, w2\n        csel    w0, w1, w2, ne\n        ret\n\nand after applying the patch, we get:\n\ninv:\n        cmp     w0, 0\n        csinv   w0, w1, w2, ne\n        ret\n\nThe new pattern also catches the optimization for the symmetric case where the\nbody of foo reads a ? ~b : c.\n\nSimilarly, with the following code:\n\nunsigned long long neg(unsigned a, unsigned b, unsigned c)\n{\n  return a ? b : -c;\n}\n\nGCC at -O2 previously gave:\n\nneg:\n        cmp     w0, 0\n        neg     w2, w2\n        csel    w0, w1, w2, ne\n\nbut now gives:\n\nneg:\n        cmp     w0, 0\n        csneg   w0, w1, w2, ne\n        ret\n\nwith the corresponding code for the symmetric case as above.\n\n2020-05-11  Alex Coplan  <alex.coplan@arm.com>\n\ngcc/\n\t* config/aarch64/aarch64.c (aarch64_if_then_else_costs): Add case\n\tto correctly calculate cost for new pattern (*csinv3_uxtw_insn3).\n\t* config/aarch64/aarch64.md (*csinv3_utxw_insn1): New.\n\t(*csinv3_uxtw_insn2): New.\n\t(*csinv3_uxtw_insn3): New.\n\t* config/aarch64/iterators.md (neg_not_cs): New.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/csinv-neg.c: New test.", "tree": {"sha": "2ac5c7daf04199adf84fd3a406a8ead415ec738e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ac5c7daf04199adf84fd3a406a8ead415ec738e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d572ad49217c09ca09e382774fdc6c407db4fc20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d572ad49217c09ca09e382774fdc6c407db4fc20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d572ad49217c09ca09e382774fdc6c407db4fc20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d572ad49217c09ca09e382774fdc6c407db4fc20/comments", "author": {"login": "acoplan-arm", "id": 86676934, "node_id": "MDQ6VXNlcjg2Njc2OTM0", "avatar_url": "https://avatars.githubusercontent.com/u/86676934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acoplan-arm", "html_url": "https://github.com/acoplan-arm", "followers_url": "https://api.github.com/users/acoplan-arm/followers", "following_url": "https://api.github.com/users/acoplan-arm/following{/other_user}", "gists_url": "https://api.github.com/users/acoplan-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/acoplan-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acoplan-arm/subscriptions", "organizations_url": "https://api.github.com/users/acoplan-arm/orgs", "repos_url": "https://api.github.com/users/acoplan-arm/repos", "events_url": "https://api.github.com/users/acoplan-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/acoplan-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa853214b8f62d9df04e9bd956d6a8f0e28fd5a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa853214b8f62d9df04e9bd956d6a8f0e28fd5a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa853214b8f62d9df04e9bd956d6a8f0e28fd5a7"}], "stats": {"total": 165, "additions": 165, "deletions": 0}, "files": [{"sha": "c4856f422a36ef79c710c45ce20cc8c5f8b38dc7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d572ad49217c09ca09e382774fdc6c407db4fc20/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d572ad49217c09ca09e382774fdc6c407db4fc20/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d572ad49217c09ca09e382774fdc6c407db4fc20", "patch": "@@ -1,3 +1,12 @@\n+2020-05-11  Alex Coplan  <alex.coplan@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_if_then_else_costs): Add case\n+\tto correctly calculate cost for new pattern (*csinv3_uxtw_insn3).\n+\t* config/aarch64/aarch64.md (*csinv3_utxw_insn1): New.\n+\t(*csinv3_uxtw_insn2): New.\n+\t(*csinv3_uxtw_insn3): New.\n+\t* config/aarch64/iterators.md (neg_not_cs): New.\n+\n 2020-05-11  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \tPR target/95046"}, {"sha": "434e095cb66fea3856b9180d18103715342dee20", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d572ad49217c09ca09e382774fdc6c407db4fc20/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d572ad49217c09ca09e382774fdc6c407db4fc20/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=d572ad49217c09ca09e382774fdc6c407db4fc20", "patch": "@@ -11695,6 +11695,13 @@ aarch64_if_then_else_costs (rtx op0, rtx op1, rtx op2, int *cost, bool speed)\n \t  op1 = XEXP (op1, 0);\n \t  op2 = XEXP (op2, 0);\n \t}\n+      else if (GET_CODE (op1) == ZERO_EXTEND && op2 == const0_rtx)\n+\t{\n+\t  inner = XEXP (op1, 0);\n+\t  if (GET_CODE (inner) == NEG || GET_CODE (inner) == NOT)\n+\t    /* CSINV/NEG with zero extend + const 0 (*csinv3_uxtw_insn3).  */\n+\t    op1 = XEXP (inner, 0);\n+\t}\n \n       *cost += rtx_cost (op1, VOIDmode, IF_THEN_ELSE, 1, speed);\n       *cost += rtx_cost (op2, VOIDmode, IF_THEN_ELSE, 2, speed);"}, {"sha": "b2cfd015530ff257ac02586a7a67f0ef3feea2f8", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d572ad49217c09ca09e382774fdc6c407db4fc20/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d572ad49217c09ca09e382774fdc6c407db4fc20/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=d572ad49217c09ca09e382774fdc6c407db4fc20", "patch": "@@ -4391,6 +4391,44 @@\n   [(set_attr \"type\" \"csel\")]\n )\n \n+(define_insn \"*csinv3_uxtw_insn1\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(if_then_else:DI\n+\t  (match_operand 1 \"aarch64_comparison_operation\" \"\")\n+\t  (zero_extend:DI\n+\t    (match_operand:SI 2 \"register_operand\" \"r\"))\n+\t  (zero_extend:DI\n+\t    (NEG_NOT:SI (match_operand:SI 3 \"register_operand\" \"r\")))))]\n+  \"\"\n+  \"cs<neg_not_cs>\\\\t%w0, %w2, %w3, %m1\"\n+  [(set_attr \"type\" \"csel\")]\n+)\n+\n+(define_insn \"*csinv3_uxtw_insn2\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(if_then_else:DI\n+\t  (match_operand 1 \"aarch64_comparison_operation\" \"\")\n+\t  (zero_extend:DI\n+\t    (NEG_NOT:SI (match_operand:SI 2 \"register_operand\" \"r\")))\n+\t  (zero_extend:DI\n+\t    (match_operand:SI 3 \"register_operand\" \"r\"))))]\n+  \"\"\n+  \"cs<neg_not_cs>\\\\t%w0, %w3, %w2, %M1\"\n+  [(set_attr \"type\" \"csel\")]\n+)\n+\n+(define_insn \"*csinv3_uxtw_insn3\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(if_then_else:DI\n+\t  (match_operand 1 \"aarch64_comparison_operation\" \"\")\n+\t  (zero_extend:DI\n+\t    (NEG_NOT:SI (match_operand:SI 2 \"register_operand\" \"r\")))\n+\t  (const_int 0)))]\n+  \"\"\n+  \"cs<neg_not_cs>\\\\t%w0, wzr, %w2, %M1\"\n+  [(set_attr \"type\" \"csel\")]\n+)\n+\n ;; If X can be loaded by a single CNT[BHWD] instruction,\n ;;\n ;;    A = UMAX (B, X)"}, {"sha": "a568cf21b99d4b169d7e367c5f00d65c544ef790", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d572ad49217c09ca09e382774fdc6c407db4fc20/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d572ad49217c09ca09e382774fdc6c407db4fc20/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=d572ad49217c09ca09e382774fdc6c407db4fc20", "patch": "@@ -1932,6 +1932,9 @@\n ;; Operation names for negate and bitwise complement.\n (define_code_attr neg_not_op [(neg \"neg\") (not \"not\")])\n \n+;; csinv, csneg insn suffixes.\n+(define_code_attr neg_not_cs [(neg \"neg\") (not \"inv\")])\n+\n ;; Similar, but when the second operand is inverted.\n (define_code_attr nlogical [(and \"bic\") (ior \"orn\") (xor \"eon\")])\n "}, {"sha": "ac40f2ef4748bb4ac630528a49c83eecb303a54d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d572ad49217c09ca09e382774fdc6c407db4fc20/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d572ad49217c09ca09e382774fdc6c407db4fc20/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d572ad49217c09ca09e382774fdc6c407db4fc20", "patch": "@@ -1,3 +1,7 @@\n+2020-05-11  Alex Coplan  <alex.coplan@arm.com>\n+\n+\t* gcc.target/aarch64/csinv-neg.c: New test.\n+\n 2020-05-11  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n \n \t* gcc.target/powerpc/dg-future-0.c: New."}, {"sha": "cc64b4094d729208492c955c8216ffd19dcf54bf", "filename": "gcc/testsuite/gcc.target/aarch64/csinv-neg.c", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d572ad49217c09ca09e382774fdc6c407db4fc20/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcsinv-neg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d572ad49217c09ca09e382774fdc6c407db4fc20/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcsinv-neg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcsinv-neg.c?ref=d572ad49217c09ca09e382774fdc6c407db4fc20", "patch": "@@ -0,0 +1,104 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+/*\n+** inv1:\n+**\tcmp\tw0, 0\n+**\tcsinv\tw0, w1, w2, ne\n+**\tret\n+*/\n+unsigned long long\n+inv1(unsigned a, unsigned b, unsigned c)\n+{\n+  return a ? b : ~c;\n+}\n+\n+/*\n+** inv1_local:\n+**\tcmp\tw0, 0\n+**\tcsinv\tw0, w1, w2, ne\n+**\tret\n+*/\n+unsigned long long\n+inv1_local(unsigned a, unsigned b, unsigned c)\n+{\n+  unsigned d = ~c;\n+  return a ? b : d;\n+}\n+\n+/*\n+** inv_zero1:\n+**\tcmp\tw0, 0\n+**\tcsinv\tw0, wzr, w1, ne\n+**\tret\n+*/\n+unsigned long long\n+inv_zero1(unsigned a, unsigned b)\n+{\n+  return a ? 0 : ~b;\n+}\n+\n+/*\n+** inv_zero2:\n+**\tcmp\tw0, 0\n+**\tcsinv\tw0, wzr, w1, eq\n+**\tret\n+*/\n+unsigned long long\n+inv_zero2(unsigned a, unsigned b)\n+{\n+  return a ? ~b : 0;\n+}\n+\n+\n+/*\n+** inv2:\n+**\tcmp\tw0, 0\n+**\tcsinv\tw0, w2, w1, eq\n+**\tret\n+*/\n+unsigned long long\n+inv2(unsigned a, unsigned b, unsigned c)\n+{\n+  return a ? ~b : c;\n+}\n+\n+/*\n+** inv2_local:\n+**\tcmp\tw0, 0\n+**\tcsinv\tw0, w2, w1, eq\n+**\tret\n+*/\n+unsigned long long\n+inv2_local(unsigned a, unsigned b, unsigned c)\n+{\n+  unsigned d = ~b;\n+  return a ? d : c;\n+}\n+\n+/*\n+** neg1:\n+**\tcmp\tw0, 0\n+**\tcsneg\tw0, w1, w2, ne\n+**\tret\n+*/\n+unsigned long long\n+neg1(unsigned a, unsigned b, unsigned c)\n+{\n+  return a ? b : -c;\n+}\n+\n+\n+/*\n+** neg2:\n+**\tcmp\tw0, 0\n+**\tcsneg\tw0, w2, w1, eq\n+**\tret\n+*/\n+unsigned long long\n+neg2(unsigned a, unsigned b, unsigned c)\n+{\n+  return a ? -b : c;\n+}\n+\n+/* { dg-final { check-function-bodies \"**\" \"\" \"\" } } */"}]}