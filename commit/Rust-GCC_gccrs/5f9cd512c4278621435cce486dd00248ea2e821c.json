{"sha": "5f9cd512c4278621435cce486dd00248ea2e821c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWY5Y2Q1MTJjNDI3ODYyMTQzNWNjZTQ4NmRkMDAyNDhlYTJlODIxYw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-02-27T09:12:52Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-02-27T09:12:52Z"}, "message": "sccvn: Handle non-byte aligned offset or size for memset (, 123, ) [PR93945]\n\nThe following is the last spot in vn_reference_lookup_3 that didn't allow\nnon-byte aligned offsets or sizes.  To be precise, it did allow size that\nwasn't multiple of byte size and that caused a wrong-code issue on\nbig-endian, as the pr93945.c testcase shows, so for GCC 9 we should add\n&& multiple_p (ref->size, BITS_PER_UNIT) check instead.\nFor the memset with SSA_NAME middle-argument, it still requires byte-aligned\noffset, as we'd otherwise need to rotate the value at runtime.\n\n2020-02-27  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/93582\n\tPR tree-optimization/93945\n\t* tree-ssa-sccvn.c (vn_reference_lookup_3): Handle memset with\n\tnon-zero INTEGER_CST second argument and ref->offset or ref->size\n\tnot a multiple of BITS_PER_UNIT.\n\n\t* gcc.dg/tree-ssa/pr93582-9.c: New test.\n\t* gcc.c-torture/execute/pr93945.c: New test.", "tree": {"sha": "dffe17c1326c8d4b3bea8892207a7e4e8eafa587", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dffe17c1326c8d4b3bea8892207a7e4e8eafa587"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f9cd512c4278621435cce486dd00248ea2e821c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f9cd512c4278621435cce486dd00248ea2e821c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f9cd512c4278621435cce486dd00248ea2e821c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f9cd512c4278621435cce486dd00248ea2e821c/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4fd9efc8877814e8cda506563d0282a267c562c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fd9efc8877814e8cda506563d0282a267c562c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fd9efc8877814e8cda506563d0282a267c562c8"}], "stats": {"total": 125, "additions": 119, "deletions": 6}, "files": [{"sha": "38bfbb954742044b6862b5c96f5bd14b38621594", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f9cd512c4278621435cce486dd00248ea2e821c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f9cd512c4278621435cce486dd00248ea2e821c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5f9cd512c4278621435cce486dd00248ea2e821c", "patch": "@@ -1,3 +1,11 @@\n+2020-02-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/93582\n+\tPR tree-optimization/93945\n+\t* tree-ssa-sccvn.c (vn_reference_lookup_3): Handle memset with\n+\tnon-zero INTEGER_CST second argument and ref->offset or ref->size\n+\tnot a multiple of BITS_PER_UNIT.\n+\n 2020-02-27  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* doc/install.texi (Binaries): Update description of BullFreeware."}, {"sha": "70897c5f94c58077dde50d15623a8f979dd6d1a8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f9cd512c4278621435cce486dd00248ea2e821c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f9cd512c4278621435cce486dd00248ea2e821c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5f9cd512c4278621435cce486dd00248ea2e821c", "patch": "@@ -1,3 +1,10 @@\n+2020-02-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/93582\n+\tPR tree-optimization/93945\n+\t* gcc.dg/tree-ssa/pr93582-9.c: New test.\n+\t* gcc.c-torture/execute/pr93945.c: New test.\n+\n 2020-02-26  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/93789 - ICE with invalid array bounds."}, {"sha": "99e455cce52105f9595f6eb8ca87e34ec2a5c6ab", "filename": "gcc/testsuite/gcc.c-torture/execute/pr93945.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f9cd512c4278621435cce486dd00248ea2e821c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr93945.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f9cd512c4278621435cce486dd00248ea2e821c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr93945.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr93945.c?ref=5f9cd512c4278621435cce486dd00248ea2e821c", "patch": "@@ -0,0 +1,45 @@\n+/* PR tree-optimization/93945 */\n+\n+union U { char a[8]; struct S { unsigned int b : 8, c : 13, d : 11; } e; } u;\n+\n+__attribute__((noipa)) int\n+foo (void)\n+{\n+  __builtin_memset (&u.a, 0xf4, sizeof (u.a));\n+  return u.e.c;\n+}\n+\n+__attribute__((noipa)) int\n+bar (void)\n+{\n+  asm volatile (\"\" : : \"g\" (&u) : \"memory\");\n+  return u.e.c;\n+}\n+\n+__attribute__((noipa)) int\n+baz (void)\n+{\n+  __builtin_memset (&u.a, 0xf4, sizeof (u.a));\n+  return u.e.d;\n+}\n+\n+__attribute__((noipa)) int\n+qux (void)\n+{\n+  asm volatile (\"\" : : \"g\" (&u) : \"memory\");\n+  return u.e.d;\n+}\n+\n+int\n+main ()\n+{\n+  int a = foo ();\n+  int b = bar ();\n+  if (a != b)\n+    __builtin_abort ();\n+  a = baz ();\n+  b = qux ();\n+  if (a != b)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "b6ad46516fdd8d52c60d930e29e3b25ea30b5c4a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr93582-9.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f9cd512c4278621435cce486dd00248ea2e821c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr93582-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f9cd512c4278621435cce486dd00248ea2e821c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr93582-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr93582-9.c?ref=5f9cd512c4278621435cce486dd00248ea2e821c", "patch": "@@ -0,0 +1,23 @@\n+/* PR tree-optimization/93582 */\n+/* { dg-do compile { target int32 } } */\n+/* { dg-options \"-O2 -fdump-tree-fre1\" } */\n+/* { dg-final { scan-tree-dump \"return 5364;\" \"fre1\" { target le } } } */\n+/* { dg-final { scan-tree-dump \"return 7838;\" \"fre1\" { target be } } } */\n+/* { dg-final { scan-tree-dump \"return 1959;\" \"fre1\" { target le } } } */\n+/* { dg-final { scan-tree-dump \"return 1268;\" \"fre1\" { target be } } } */\n+\n+union U { char a[8]; struct S { unsigned int b : 8, c : 13, d : 11; } e; } u;\n+\n+__attribute__((noipa)) int\n+foo (void)\n+{\n+  __builtin_memset (&u.a, 0xf4, sizeof (u.a));\n+  return u.e.c;\n+}\n+\n+__attribute__((noipa)) int\n+baz (void)\n+{\n+  __builtin_memset (&u.a, 0xf4, sizeof (u.a));\n+  return u.e.d;\n+}"}, {"sha": "0487f59f13f7768414e82274f0af3bbae4c76535", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 36, "deletions": 6, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f9cd512c4278621435cce486dd00248ea2e821c/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f9cd512c4278621435cce486dd00248ea2e821c/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=5f9cd512c4278621435cce486dd00248ea2e821c", "patch": "@@ -2386,7 +2386,7 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n   vn_reference_t vr = data->vr;\n   gimple *def_stmt = SSA_NAME_DEF_STMT (vuse);\n   tree base = ao_ref_base (ref);\n-  HOST_WIDE_INT offseti, maxsizei;\n+  HOST_WIDE_INT offseti = 0, maxsizei, sizei = 0;\n   static vec<vn_reference_op_s> lhs_ops;\n   ao_ref lhs_ref;\n   bool lhs_ref_ok = false;\n@@ -2541,9 +2541,13 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n       && (integer_zerop (gimple_call_arg (def_stmt, 1))\n \t  || ((TREE_CODE (gimple_call_arg (def_stmt, 1)) == INTEGER_CST\n \t       || (INTEGRAL_TYPE_P (vr->type) && known_eq (ref->size, 8)))\n-\t      && CHAR_BIT == 8 && BITS_PER_UNIT == 8\n+\t      && CHAR_BIT == 8\n+\t      && BITS_PER_UNIT == 8\n+\t      && BYTES_BIG_ENDIAN == WORDS_BIG_ENDIAN\n \t      && offset.is_constant (&offseti)\n-\t      && offseti % BITS_PER_UNIT == 0))\n+\t      && ref->size.is_constant (&sizei)\n+\t      && (offseti % BITS_PER_UNIT == 0\n+\t\t  || TREE_CODE (gimple_call_arg (def_stmt, 1)) == INTEGER_CST)))\n       && poly_int_tree_p (gimple_call_arg (def_stmt, 2))\n       && (TREE_CODE (gimple_call_arg (def_stmt, 0)) == ADDR_EXPR\n \t  || TREE_CODE (gimple_call_arg (def_stmt, 0)) == SSA_NAME))\n@@ -2604,7 +2608,7 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n       else\n \treturn (void *)-1;\n       tree len = gimple_call_arg (def_stmt, 2);\n-      HOST_WIDE_INT leni, offset2i, offseti;\n+      HOST_WIDE_INT leni, offset2i;\n       /* Sometimes the above trickery is smarter than alias analysis.  Take\n          advantage of that.  */\n       if (!ranges_maybe_overlap_p (offset, maxsize, offset2,\n@@ -2618,7 +2622,9 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n \t  tree val;\n \t  if (integer_zerop (gimple_call_arg (def_stmt, 1)))\n \t    val = build_zero_cst (vr->type);\n-\t  else if (INTEGRAL_TYPE_P (vr->type) && known_eq (ref->size, 8))\n+\t  else if (INTEGRAL_TYPE_P (vr->type)\n+\t\t   && known_eq (ref->size, 8)\n+\t\t   && offseti % BITS_PER_UNIT == 0)\n \t    {\n \t      gimple_match_op res_op (gimple_match_cond::UNCOND, NOP_EXPR,\n \t\t\t\t      vr->type, gimple_call_arg (def_stmt, 1));\n@@ -2630,10 +2636,34 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n \t    }\n \t  else\n \t    {\n-\t      unsigned buflen = TREE_INT_CST_LOW (TYPE_SIZE_UNIT (vr->type));\n+\t      unsigned buflen = TREE_INT_CST_LOW (TYPE_SIZE_UNIT (vr->type)) + 1;\n+\t      if (INTEGRAL_TYPE_P (vr->type))\n+\t\tbuflen = GET_MODE_SIZE (SCALAR_INT_TYPE_MODE (vr->type)) + 1;\n \t      unsigned char *buf = XALLOCAVEC (unsigned char, buflen);\n \t      memset (buf, TREE_INT_CST_LOW (gimple_call_arg (def_stmt, 1)),\n \t\t      buflen);\n+\t      if (BYTES_BIG_ENDIAN)\n+\t\t{\n+\t\t  unsigned int amnt\n+\t\t    = (((unsigned HOST_WIDE_INT) offseti + sizei)\n+\t\t       % BITS_PER_UNIT);\n+\t\t  if (amnt)\n+\t\t    {\n+\t\t      shift_bytes_in_array_right (buf, buflen,\n+\t\t\t\t\t\t  BITS_PER_UNIT - amnt);\n+\t\t      buf++;\n+\t\t      buflen--;\n+\t\t    }\n+\t\t}\n+\t      else if (offseti % BITS_PER_UNIT != 0)\n+\t\t{\n+\t\t  unsigned int amnt\n+\t\t    = BITS_PER_UNIT - ((unsigned HOST_WIDE_INT) offseti\n+\t\t\t\t       % BITS_PER_UNIT);\n+\t\t  shift_bytes_in_array_left (buf, buflen, amnt);\n+\t\t  buf++;\n+\t\t  buflen--;\n+\t\t}\n \t      val = native_interpret_expr (vr->type, buf, buflen);\n \t      if (!val)\n \t\treturn (void *)-1;"}]}