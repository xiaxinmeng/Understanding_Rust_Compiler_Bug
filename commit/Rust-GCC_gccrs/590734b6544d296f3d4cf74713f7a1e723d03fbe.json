{"sha": "590734b6544d296f3d4cf74713f7a1e723d03fbe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTkwNzM0YjY1NDRkMjk2ZjNkNGNmNzQ3MTNmN2ExZTcyM2QwM2ZiZQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-02-19T12:53:32Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-02-19T12:53:32Z"}, "message": "h8300-protos.h: Update the prototype for split_adds_subs.\n\n\t* config/h8300/h8300-protos.h: Update the prototype for\n\tsplit_adds_subs.  Remove the prototypes for\n\tconst_int_le_2_operand and const_int_le_6_operand.\n\t* config/h8300/h8300.c (split_adds_sub): Don't output inc/dec.\n\t(const_int_le_2_operand): Remove.\n\t(const_int_le_6_operand): Likewise.\n\t* config/h8300/h8300.h (PREDICATE_CODES): Remove the entries\n\tfor const_int_le_2_operand and const_int_le_6_operand.\n\t* config/h8300/h8300.md: Update all uses of split_adds_subs.\n\t(a peephole2): New.\n\nFrom-SVN: r63103", "tree": {"sha": "c6a960b3c438ac4ceb2c48e35aa2b3a225924191", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6a960b3c438ac4ceb2c48e35aa2b3a225924191"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/590734b6544d296f3d4cf74713f7a1e723d03fbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/590734b6544d296f3d4cf74713f7a1e723d03fbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/590734b6544d296f3d4cf74713f7a1e723d03fbe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/590734b6544d296f3d4cf74713f7a1e723d03fbe/comments", "author": null, "committer": null, "parents": [{"sha": "681979f075ee4d1473afafb1e5cf81f1eb8d1dc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/681979f075ee4d1473afafb1e5cf81f1eb8d1dc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/681979f075ee4d1473afafb1e5cf81f1eb8d1dc3"}], "stats": {"total": 191, "additions": 104, "deletions": 87}, "files": [{"sha": "405b081e432b56740f5e5744aca71a91cca5de61", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/590734b6544d296f3d4cf74713f7a1e723d03fbe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/590734b6544d296f3d4cf74713f7a1e723d03fbe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=590734b6544d296f3d4cf74713f7a1e723d03fbe", "patch": "@@ -1,3 +1,16 @@\n+2003-02-19  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/h8300/h8300-protos.h: Update the prototype for\n+\tsplit_adds_subs.  Remove the prototypes for\n+\tconst_int_le_2_operand and const_int_le_6_operand.\n+\t* config/h8300/h8300.c (split_adds_sub): Don't output inc/dec.\n+\t(const_int_le_2_operand): Remove.\n+\t(const_int_le_6_operand): Likewise.\n+\t* config/h8300/h8300.h (PREDICATE_CODES): Remove the entries\n+\tfor const_int_le_2_operand and const_int_le_6_operand.\n+\t* config/h8300/h8300.md: Update all uses of split_adds_subs.\n+\t(a peephole2): New.\n+\n Tue Feb 18 23:50:59 CET 2003  Jan Hubicka  <jh@suse.cz>\n \n \t* cgraph.c (NPREDECESORC, SET_NPREDECESORS): Kill."}, {"sha": "6c2fe68a422b4daee95d39fca6e534ba63b7952f", "filename": "gcc/config/h8300/h8300-protos.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/590734b6544d296f3d4cf74713f7a1e723d03fbe/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/590734b6544d296f3d4cf74713f7a1e723d03fbe/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h?ref=590734b6544d296f3d4cf74713f7a1e723d03fbe", "patch": "@@ -47,7 +47,7 @@ extern int h8300_shift_needs_scratch_p PARAMS ((int, enum machine_mode));\n extern int expand_a_rotate PARAMS ((enum rtx_code, rtx[]));\n extern int fix_bit_operand PARAMS ((rtx *, int, enum rtx_code));\n extern int h8300_adjust_insn_length PARAMS ((rtx, int));\n-extern void split_adds_subs PARAMS ((enum machine_mode, rtx[], int));\n+extern void split_adds_subs PARAMS ((enum machine_mode, rtx[]));\n \n extern int general_operand_src PARAMS ((rtx, enum machine_mode));\n extern int general_operand_dst PARAMS ((rtx, enum machine_mode));\n@@ -60,8 +60,6 @@ extern int jump_address_operand PARAMS ((rtx, enum machine_mode));\n extern int bit_operand PARAMS ((rtx, enum machine_mode));\n extern int bit_memory_operand PARAMS ((rtx, enum machine_mode));\n extern int stack_pointer_operand PARAMS ((rtx, enum machine_mode));\n-extern int const_int_le_2_operand PARAMS ((rtx, enum machine_mode));\n-extern int const_int_le_6_operand PARAMS ((rtx, enum machine_mode));\n extern int const_int_gt_2_operand PARAMS ((rtx, enum machine_mode));\n extern int const_int_ge_8_operand PARAMS ((rtx, enum machine_mode));\n extern int const_int_qi_operand PARAMS ((rtx, enum machine_mode));"}, {"sha": "173946cbc725dd5fad3149d169e8224b652a7bcc", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 5, "deletions": 39, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/590734b6544d296f3d4cf74713f7a1e723d03fbe/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/590734b6544d296f3d4cf74713f7a1e723d03fbe/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=590734b6544d296f3d4cf74713f7a1e723d03fbe", "patch": "@@ -865,17 +865,15 @@ two_insn_adds_subs_operand (op, mode)\n    instead of adds/subs.  */\n \n void\n-split_adds_subs (mode, operands, use_incdec_p)\n+split_adds_subs (mode, operands)\n      enum machine_mode mode;\n      rtx *operands;\n-     int use_incdec_p;\n {\n   HOST_WIDE_INT val = INTVAL (operands[1]);\n   rtx reg = operands[0];\n   HOST_WIDE_INT sign = 1;\n   HOST_WIDE_INT amount;\n-  rtx (*gen_last) (rtx, rtx, rtx);\n-  rtx (*gen_normal) (rtx, rtx, rtx);\n+  rtx (*gen_add) (rtx, rtx, rtx);\n \n   /* Force VAL to be positive so that we do not have to consider the\n      sign.  */\n@@ -888,13 +886,11 @@ split_adds_subs (mode, operands, use_incdec_p)\n   switch (mode)\n     {\n     case HImode:\n-      gen_normal = gen_addhi3;\n-      gen_last   = gen_addhi3_incdec;\n+      gen_add = gen_addhi3;\n       break;\n \n     case SImode:\n-      gen_normal = gen_addsi3;\n-      gen_last   = gen_addsi3_incdec;\n+      gen_add = gen_addsi3;\n       break;\n \n     default:\n@@ -907,13 +903,7 @@ split_adds_subs (mode, operands, use_incdec_p)\n        amount /= 2)\n     {\n       for (; val >= amount; val -= amount)\n-\t{\n-\t  /* If requested, generate the last insn using inc/dec.  */\n-\t  if (use_incdec_p && amount <= 2 && val == amount)\n-\t    emit_insn (gen_last (reg, reg, GEN_INT (sign * amount)));\n-\t  else\n-\t    emit_insn (gen_normal (reg, reg, GEN_INT (sign * amount)));\n-\t}\n+\temit_insn (gen_add (reg, reg, GEN_INT (sign * amount)));\n     }\n \n   return;\n@@ -1835,30 +1825,6 @@ stack_pointer_operand (x, mode)\n   return x == stack_pointer_rtx;\n }\n \n-/* Return nonzero if X is a constant whose absolute value is no\n-   greater than 2.  */\n-\n-int\n-const_int_le_2_operand (x, mode)\n-     rtx x;\n-     enum machine_mode mode ATTRIBUTE_UNUSED;\n-{\n-  return (GET_CODE (x) == CONST_INT\n-\t  && abs (INTVAL (x)) <= 2);\n-}\n-\n-/* Return nonzero if X is a constant whose absolute value is no\n-   greater than 6.  */\n-\n-int\n-const_int_le_6_operand (x, mode)\n-     rtx x;\n-     enum machine_mode mode ATTRIBUTE_UNUSED;\n-{\n-  return (GET_CODE (x) == CONST_INT\n-\t  && abs (INTVAL (x)) <= 6);\n-}\n-\n /* Return nonzero if X is a constant whose absolute value is greater\n    than 2.  */\n "}, {"sha": "0c408145191fd3525bd71a4850d29fec0ce704dd", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/590734b6544d296f3d4cf74713f7a1e723d03fbe/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/590734b6544d296f3d4cf74713f7a1e723d03fbe/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=590734b6544d296f3d4cf74713f7a1e723d03fbe", "patch": "@@ -1284,8 +1284,6 @@ struct cum_arg\n   {\"bit_operand\", {REG, SUBREG, MEM}},\t\t\t\t\t\\\n   {\"bit_memory_operand\", {MEM}},\t\t\t\t\t\\\n   {\"stack_pointer_operand\", {REG}},\t\t\t\t\t\\\n-  {\"const_int_le_2_operand\", {CONST_INT}},\t\t\t\t\\\n-  {\"const_int_le_6_operand\", {CONST_INT}},\t\t\t\t\\\n   {\"const_int_gt_2_operand\", {CONST_INT}},\t\t\t\t\\\n   {\"const_int_ge_8_operand\", {CONST_INT}},\t\t\t\t\\\n   {\"const_int_qi_operand\", {CONST_INT}},\t\t\t\t\\"}, {"sha": "817b52d6f64873259318a833edd807036517c8d8", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 85, "deletions": 43, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/590734b6544d296f3d4cf74713f7a1e723d03fbe/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/590734b6544d296f3d4cf74713f7a1e723d03fbe/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=590734b6544d296f3d4cf74713f7a1e723d03fbe", "patch": "@@ -798,7 +798,7 @@\n \t\t (match_operand 1 \"const_int_gt_2_operand\" \"\")))]\n   \"TARGET_H8300 && flow2_completed\"\n   [(const_int 0)]\n-  \"split_adds_subs (HImode, operands, 0); DONE;\")\n+  \"split_adds_subs (HImode, operands); DONE;\")\n \n (define_peephole2\n   [(match_scratch:HI 2 \"r\")\n@@ -845,7 +845,7 @@\n \t\t (match_operand:HI 1 \"two_insn_adds_subs_operand\" \"\")))]\n   \"\"\n   [(const_int 0)]\n-  \"split_adds_subs (HImode, operands, 0); DONE;\")\n+  \"split_adds_subs (HImode, operands); DONE;\")\n \n (define_expand \"addsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n@@ -894,7 +894,7 @@\n \t\t (match_operand:SI 1 \"two_insn_adds_subs_operand\" \"\")))]\n   \"TARGET_H8300H || TARGET_H8300S\"\n   [(const_int 0)]\n-  \"split_adds_subs (SImode, operands, 0); DONE;\")\n+  \"split_adds_subs (SImode, operands); DONE;\")\n \n ;; ----------------------------------------------------------------------\n ;; SUBTRACT INSTRUCTIONS\n@@ -3447,79 +3447,90 @@\n   \"\")\n \n ;; (compare (reg:SI) (const_int)) takes 6 bytes, so we try to achieve\n-;; the equivalent with shorter sequences.  Here is the summary.\n+;; the equivalent with shorter sequences.  Here is the summary.  Cases\n+;; are grouped for each define_peephole2.\n ;;\n-;; reg  const_int                 use     insn\n-;; live    -2                     eq/ne   copy and inc.l\n-;; live    -1                     eq/ne   copy and inc.l\n-;; live     1                     eq/ne   copy and dec.l\n-;; live     2                     eq/ne   copy and dec.l\n-;; dead    -6                     eq/ne   adds and inc.l\n-;; dead    -5                     eq/ne   adds and inc.l\n-;; dead    -4                     eq/ne   adds and test\n-;; dead    -3                     eq/ne   adds and inc.l\n-;; dead    -2                     eq/ne   inc.l\n-;; dead    -1                     eq/ne   inc.l\n-;; dead     1                     eq/ne   dec.l\n-;; dead     2                     eq/ne   dec.l\n-;; dead 0x000000?? except 1 and 2 eq/ne   xor.b and test\n-;; dead 0x0000??00                eq/ne   xor.b and test\n-;; dead 0x0000ffff                eq/ne   not.w and test\n-;; dead 0xffff0000                eq/ne   not.w and test\n-;; dead     1                     geu/ltu and.b and test\n-;; dead     3                     geu/ltu and.b and test\n-;; dead     7                     geu/ltu and.b and test\n-;; dead    15                     geu/ltu and.b and test\n-;; dead    31                     geu/ltu and.b and test\n-;; dead    63                     geu/ltu and.b and test\n-;; dead   127                     geu/ltu and.b and test\n-;; dead   255                     geu/ltu and.b and test\n-;; dead 65535                     geu/ltu mov.w\n+;; reg  const_int                   use     insn\n+;; --------------------------------------------------------\n+;; live    -2                       eq/ne   copy and inc.l\n+;; live    -1                       eq/ne   copy and inc.l\n+;; live     1                       eq/ne   copy and dec.l\n+;; live     2                       eq/ne   copy and dec.l\n+;;\n+;; dead    -2                       eq/ne   inc.l\n+;; dead    -1                       eq/ne   inc.l\n+;; dead     1                       eq/ne   dec.l\n+;; dead     2                       eq/ne   dec.l\n+;;\n+;; dead 0x000000?? except 1 and 2   eq/ne   xor.b and test\n+;; dead 0x0000??00                  eq/ne   xor.b and test\n+;; dead 0x0000ffff                  eq/ne   not.w and test\n+;; dead 0xffff0000                  eq/ne   not.w and test\n+;;\n+;; dead 0xffffff?? except -1 and -2 eq/ne   xor.b and not.l\n+;; dead 0xffff??ff                  eq/ne   xor.b and not.l\n+;;\n+;; dead     1                       geu/ltu and.b and test\n+;; dead     3                       geu/ltu and.b and test\n+;; dead     7                       geu/ltu and.b and test\n+;; dead    15                       geu/ltu and.b and test\n+;; dead    31                       geu/ltu and.b and test\n+;; dead    63                       geu/ltu and.b and test\n+;; dead   127                       geu/ltu and.b and test\n+;; dead   255                       geu/ltu and.b and test\n+;;\n+;; dead 65535                       geu/ltu mov.w\n \n ;; For a small constant, it is cheaper to actually do the subtraction\n ;; and then test the register.\n \n (define_peephole2\n   [(set (cc0)\n \t(compare (match_operand:HI 0 \"register_operand\" \"\")\n-\t\t (match_operand:HI 1 \"const_int_le_2_operand\" \"\")))\n+\t\t (match_operand:HI 1 \"incdec_operand\" \"\")))\n    (set (pc)\n \t(if_then_else (match_operator 3 \"eqne_operator\"\n \t\t\t[(cc0) (const_int 0)])\n \t\t      (label_ref (match_operand 2 \"\" \"\"))\n \t\t      (pc)))]\n   \"(TARGET_H8300H || TARGET_H8300S)\n    && peep2_reg_dead_p (1, operands[0])\"\n-  [(set (cc0)\n+  [(set (match_dup 0)\n+\t(unspec:HI [(match_dup 0)\n+\t\t    (match_dup 4)]\n+\t\t   UNSPEC_INCDEC))\n+   (set (cc0)\n \t(match_dup 0))\n    (set (pc)\n \t(if_then_else (match_op_dup 3 [(cc0) (const_int 0)])\n \t\t      (label_ref (match_dup 2))\n \t\t      (pc)))]\n-  \"operands[1] = GEN_INT (- INTVAL (operands[1]));\n-   split_adds_subs (HImode, operands, 1);\")\n+  \"operands[4] = GEN_INT (- INTVAL (operands[1]));\")\n \n ;; The SImode version of the previous pattern.\n \n (define_peephole2\n   [(set (cc0)\n \t(compare (match_operand:SI 0 \"register_operand\" \"\")\n-\t\t (match_operand:SI 1 \"const_int_le_6_operand\" \"\")))\n+\t\t (match_operand:SI 1 \"incdec_operand\" \"\")))\n    (set (pc)\n \t(if_then_else (match_operator 3 \"eqne_operator\"\n \t\t\t[(cc0) (const_int 0)])\n \t\t      (label_ref (match_operand 2 \"\" \"\"))\n \t\t      (pc)))]\n   \"(TARGET_H8300H || TARGET_H8300S)\n    && peep2_reg_dead_p (1, operands[0])\"\n-  [(set (cc0)\n+  [(set (match_dup 0)\n+\t(unspec:SI [(match_dup 0)\n+\t\t    (match_dup 4)]\n+\t\t   UNSPEC_INCDEC))\n+   (set (cc0)\n \t(match_dup 0))\n    (set (pc)\n \t(if_then_else (match_op_dup 3 [(cc0) (const_int 0)])\n \t\t      (label_ref (match_dup 2))\n \t\t      (pc)))]\n-  \"operands[1] = GEN_INT (- INTVAL (operands[1]));\n-   split_adds_subs (SImode, operands, 1);\")\n+  \"operands[4] = GEN_INT (- INTVAL (operands[1]));\")\n \n ;; For certain (in)equaltity comparisions against a constant, we can\n ;; XOR the register with the constant, and test the register against\n@@ -3553,6 +3564,34 @@\n \t\t      (pc)))]\n   \"\")\n \n+(define_peephole2\n+  [(set (cc0)\n+\t(compare (match_operand:SI 0 \"register_operand\" \"\")\n+\t\t (match_operand:SI 1 \"const_int_operand\" \"\")))\n+   (set (pc)\n+\t(if_then_else (match_operator 3 \"eqne_operator\"\n+\t\t\t[(cc0) (const_int 0)])\n+\t\t      (label_ref (match_operand 2 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"(TARGET_H8300H || TARGET_H8300S)\n+   && peep2_reg_dead_p (1, operands[0])\n+   && ((INTVAL (operands[1]) | 0x00ff) == -1\n+\t|| (INTVAL (operands[1]) | 0xff00) == -1)\n+   && INTVAL (operands[1]) != -1\n+   && INTVAL (operands[1]) != -2\"\n+  [(set (match_dup 0)\n+\t(xor:SI (match_dup 0)\n+\t\t(match_dup 4)))\n+   (set (match_dup 0)\n+\t(not:SI (match_dup 0)))\n+   (set (cc0)\n+\t(match_dup 0))\n+   (set (pc)\n+\t(if_then_else (match_op_dup 3 [(cc0) (const_int 0)])\n+\t\t      (label_ref (match_dup 2))\n+\t\t      (pc)))]\n+  \"operands[4] = GEN_INT (INTVAL (operands[1]) ^ -1);\")\n+\n ;; Transform A <= 1 to (A & 0xfffffffe) == 0.\n \n (define_peephole2\n@@ -3653,16 +3692,19 @@\n    && !peep2_reg_dead_p (1, operands[0])\n    && !rtx_equal_p (PATTERN (insn),\n \t\t    PATTERN (next_nonnote_insn (next_nonnote_insn (insn))))\"\n-  [(set (cc0)\n+  [(set (match_dup 4)\n \t(match_dup 0))\n+   (set (match_dup 4)\n+\t(unspec:SI [(match_dup 4)\n+\t\t    (match_dup 5)]\n+\t\t   UNSPEC_INCDEC))\n+   (set (cc0)\n+\t(match_dup 4))\n    (set (pc)\n \t(if_then_else (match_op_dup 3 [(cc0) (const_int 0)])\n \t\t      (label_ref (match_dup 2))\n \t\t      (pc)))]\n-  \"emit_move_insn (operands[4], operands[0]);\n-   operands[0] = operands[4];\n-   operands[1] = GEN_INT (- INTVAL (operands[1]));\n-   split_adds_subs (SImode, operands, 1);\")\n+  \"operands[5] = GEN_INT (- INTVAL (operands[1]));\")\n \n ;; Narrow the mode of testing if possible.\n "}]}