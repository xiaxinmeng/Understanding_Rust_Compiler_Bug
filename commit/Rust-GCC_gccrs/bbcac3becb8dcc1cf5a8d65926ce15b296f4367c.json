{"sha": "bbcac3becb8dcc1cf5a8d65926ce15b296f4367c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmJjYWMzYmVjYjhkY2MxY2Y1YThkNjU5MjZjZTE1YjI5NmY0MzY3Yw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2009-02-15T16:47:57Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-02-15T16:47:57Z"}, "message": "re PR libstdc++/39168 (Incorrect interpretation of CHAR_MAX inside grouping string in monetary and numeric facets.)\n\n2009-02-15  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/39168\n\t* src/locale_facets.cc (__verify_grouping(const char*, size_t,\n\tconst string&)): Also check that the value != CHAR_MAX.\n\t* include/bits/locale_facets.tcc (__numpunct_cache<>::\n\t_M_cache(const locale&), __add_grouping(_CharT*, _CharT,\n\tconst char*, size_t, const _CharT*, const _CharT*)): Likewise.\n\t* include/bits/locale_facets_nonio.tcc (__moneypunct_cache<>::\n\t_M_cache(const locale&)): Likewise.\n\t* testsuite/22_locale/money_put/put/wchar_t/39168.cc: New.\n\t* testsuite/22_locale/money_put/put/char/39168.cc: Likewise.\n\t* testsuite/22_locale/money_get/get/wchar_t/39168.cc: Likewise.\n\t* testsuite/22_locale/money_get/get/char/39168.cc: Likewise.\n\t* testsuite/22_locale/num_get/get/wchar_t/39168.cc: Likewise.\n\t* testsuite/22_locale/num_get/get/char/39168.cc: Likewise.\n\nFrom-SVN: r144190", "tree": {"sha": "eb15a978460c1aaecb4876c6b96497177e6ac71a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb15a978460c1aaecb4876c6b96497177e6ac71a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bbcac3becb8dcc1cf5a8d65926ce15b296f4367c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbcac3becb8dcc1cf5a8d65926ce15b296f4367c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbcac3becb8dcc1cf5a8d65926ce15b296f4367c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbcac3becb8dcc1cf5a8d65926ce15b296f4367c/comments", "author": null, "committer": null, "parents": [{"sha": "68c9ab451b8163597dee5ed2f7ee23859b9b453a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68c9ab451b8163597dee5ed2f7ee23859b9b453a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68c9ab451b8163597dee5ed2f7ee23859b9b453a"}], "stats": {"total": 365, "additions": 359, "deletions": 6}, "files": [{"sha": "96c79056dcdc91034a56e03d1572dc10d710b77e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbcac3becb8dcc1cf5a8d65926ce15b296f4367c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbcac3becb8dcc1cf5a8d65926ce15b296f4367c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=bbcac3becb8dcc1cf5a8d65926ce15b296f4367c", "patch": "@@ -1,3 +1,20 @@\n+2009-02-15  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/39168\n+\t* src/locale_facets.cc (__verify_grouping(const char*, size_t,\n+\tconst string&)): Also check that the value != CHAR_MAX.\n+\t* include/bits/locale_facets.tcc (__numpunct_cache<>::\n+\t_M_cache(const locale&), __add_grouping(_CharT*, _CharT,\n+\tconst char*, size_t, const _CharT*, const _CharT*)): Likewise.\n+\t* include/bits/locale_facets_nonio.tcc (__moneypunct_cache<>::\n+\t_M_cache(const locale&)): Likewise.\n+\t* testsuite/22_locale/money_put/put/wchar_t/39168.cc: New.\n+\t* testsuite/22_locale/money_put/put/char/39168.cc: Likewise.\n+\t* testsuite/22_locale/money_get/get/wchar_t/39168.cc: Likewise.\n+\t* testsuite/22_locale/money_get/get/char/39168.cc: Likewise.\n+\t* testsuite/22_locale/num_get/get/wchar_t/39168.cc: Likewise.\n+\t* testsuite/22_locale/num_get/get/char/39168.cc: Likewise.\n+\n 2009-02-13  Chris Fairles  <cfairles@gcc.gnu.org>\n \t    Benjamin Kosnik  <bkoz@redhat.com>\n "}, {"sha": "93bc6d48366078cf47e7b63bc45e34a0dee07bef", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbcac3becb8dcc1cf5a8d65926ce15b296f4367c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbcac3becb8dcc1cf5a8d65926ce15b296f4367c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=bbcac3becb8dcc1cf5a8d65926ce15b296f4367c", "patch": "@@ -91,7 +91,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       __np.grouping().copy(__grouping, _M_grouping_size);\n       _M_grouping = __grouping;\n       _M_use_grouping = (_M_grouping_size\n-\t\t\t && static_cast<signed char>(__np.grouping()[0]) > 0);\n+\t\t\t && static_cast<signed char>(_M_grouping[0]) > 0\n+\t\t\t && (_M_grouping[0]\n+\t\t\t     != __gnu_cxx::__numeric_traits<char>::__max));\n \n       _M_truename_size = __np.truename().size();\n       _CharT* __truename = new _CharT[_M_truename_size];\n@@ -1232,7 +1234,8 @@ _GLIBCXX_END_LDBL_NAMESPACE\n       size_t __ctr = 0;\n \n       while (__last - __first > __gbeg[__idx]\n-\t     && static_cast<signed char>(__gbeg[__idx]) > 0)\n+\t     && static_cast<signed char>(__gbeg[__idx]) > 0\n+\t     && __gbeg[__idx] != __gnu_cxx::__numeric_traits<char>::__max)\n \t{\n \t  __last -= __gbeg[__idx];\n \t  __idx < __gsize - 1 ? ++__idx : ++__ctr;"}, {"sha": "f32ad7fdb1df39bbf3fff465a9b9df2ff6f901f2", "filename": "libstdc++-v3/include/bits/locale_facets_nonio.tcc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbcac3becb8dcc1cf5a8d65926ce15b296f4367c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbcac3becb8dcc1cf5a8d65926ce15b296f4367c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.tcc?ref=bbcac3becb8dcc1cf5a8d65926ce15b296f4367c", "patch": "@@ -81,8 +81,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       __mp.grouping().copy(__grouping, _M_grouping_size);\n       _M_grouping = __grouping;\n       _M_use_grouping = (_M_grouping_size\n-\t\t\t && static_cast<signed char>(__mp.grouping()[0]) > 0);\n-      \n+\t\t\t && static_cast<signed char>(_M_grouping[0]) > 0\n+\t\t\t && (_M_grouping[0]\n+\t\t\t     != __gnu_cxx::__numeric_traits<char>::__max));\n+\n       _M_decimal_point = __mp.decimal_point();\n       _M_thousands_sep = __mp.thousands_sep();\n       _M_frac_digits = __mp.frac_digits();"}, {"sha": "d62fb04fcb61c6c318bd5bc16f4eb68d166b9329", "filename": "libstdc++-v3/src/locale_facets.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbcac3becb8dcc1cf5a8d65926ce15b296f4367c/libstdc%2B%2B-v3%2Fsrc%2Flocale_facets.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbcac3becb8dcc1cf5a8d65926ce15b296f4367c/libstdc%2B%2B-v3%2Fsrc%2Flocale_facets.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale_facets.cc?ref=bbcac3becb8dcc1cf5a8d65926ce15b296f4367c", "patch": "@@ -1,5 +1,5 @@\n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007\n+// 2006, 2007, 2008, 2009\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -110,7 +110,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     // ... but the first parsed grouping can be <= numpunct\n     // grouping (only do the check if the numpunct char is > 0\n     // because <= 0 means any size is ok).\n-    if (static_cast<signed char>(__grouping[__min]) > 0)\n+    if (static_cast<signed char>(__grouping[__min]) > 0\n+\t&& __grouping[__min] != __gnu_cxx::__numeric_traits<char>::__max)\n       __test &= __grouping_tmp[0] <= __grouping[__min];\n     return __test;\n   }"}, {"sha": "45cc6925006e7f949ad1fcd4093023c1ad9448d6", "filename": "libstdc++-v3/testsuite/22_locale/money_get/get/char/39168.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbcac3becb8dcc1cf5a8d65926ce15b296f4367c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F39168.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbcac3becb8dcc1cf5a8d65926ce15b296f4367c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F39168.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F39168.cc?ref=bbcac3becb8dcc1cf5a8d65926ce15b296f4367c", "patch": "@@ -0,0 +1,57 @@\n+// Copyright (C) 2009 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 22.2.6.1.1 money_get members\n+\n+#include <sstream>\n+#include <locale>\n+#include <climits>\n+#include <testsuite_hooks.h>\n+\n+class my_moneypunct: public std::moneypunct<char>\n+{\n+protected:\n+  std::string do_grouping() const { return std::string(1, CHAR_MAX); }\n+};\n+\n+// libstdc++/39168\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+  typedef istreambuf_iterator<char> iterator_type;\n+\n+  istringstream iss;\n+  iss.imbue(locale(iss.getloc(), new my_moneypunct));\n+  const money_get<char>& mg = use_facet<money_get<char> >(iss.getloc());\n+\n+  string digits;\n+  ios_base::iostate err = ios_base::goodbit;\n+\n+  iss.str(\"123,456\");\n+  iterator_type end = mg.get(iss.rdbuf(), 0, false, iss, err, digits);\n+  VERIFY( err == ios_base::goodbit );\n+  VERIFY( digits == \"123\" );\n+  VERIFY( *end == ',' );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "44dd9616ff12b8d8106c9bbace57aae0a020bf19", "filename": "libstdc++-v3/testsuite/22_locale/money_get/get/wchar_t/39168.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbcac3becb8dcc1cf5a8d65926ce15b296f4367c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F39168.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbcac3becb8dcc1cf5a8d65926ce15b296f4367c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F39168.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F39168.cc?ref=bbcac3becb8dcc1cf5a8d65926ce15b296f4367c", "patch": "@@ -0,0 +1,57 @@\n+// Copyright (C) 2009 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 22.2.6.1.1 money_get members\n+\n+#include <sstream>\n+#include <locale>\n+#include <climits>\n+#include <testsuite_hooks.h>\n+\n+class my_moneypunct: public std::moneypunct<wchar_t>\n+{\n+protected:\n+  std::string do_grouping() const { return std::string(1, CHAR_MAX); }\n+};\n+\n+// libstdc++/39168\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+  typedef istreambuf_iterator<wchar_t> iterator_type;\n+\n+  wistringstream iss;\n+  iss.imbue(locale(iss.getloc(), new my_moneypunct));\n+  const money_get<wchar_t>& mg = use_facet<money_get<wchar_t> >(iss.getloc());\n+\n+  wstring digits;\n+  ios_base::iostate err = ios_base::goodbit;\n+\n+  iss.str(L\"123,456\");\n+  iterator_type end = mg.get(iss.rdbuf(), 0, false, iss, err, digits);\n+  VERIFY( err == ios_base::goodbit );\n+  VERIFY( digits == L\"123\" );\n+  VERIFY( *end == L',' );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "1896933fcf09147001835ebe32ead07218547b91", "filename": "libstdc++-v3/testsuite/22_locale/money_put/put/char/39168.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbcac3becb8dcc1cf5a8d65926ce15b296f4367c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fchar%2F39168.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbcac3becb8dcc1cf5a8d65926ce15b296f4367c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fchar%2F39168.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fchar%2F39168.cc?ref=bbcac3becb8dcc1cf5a8d65926ce15b296f4367c", "patch": "@@ -0,0 +1,51 @@\n+// Copyright (C) 2009 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 22.2.6.2.1 money_put members\n+\n+#include <sstream>\n+#include <locale>\n+#include <climits>\n+#include <testsuite_hooks.h>\n+\n+class my_moneypunct: public std::moneypunct<char>\n+{\n+protected:\n+  std::string do_grouping() const { return std::string(1, CHAR_MAX); }\n+};\n+\n+// libstdc++/39168\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+\n+  ostringstream oss;\n+  oss.imbue(locale(oss.getloc(), new my_moneypunct));\n+  const money_put<char>& mp = use_facet<money_put<char> >(oss.getloc());\n+\n+  string digits(300, '1');\n+  mp.put(oss.rdbuf(), false, oss, ' ', digits);\n+  VERIFY( oss.str() == digits );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "c1e195be13bc2fbb8fffd4875cc51142167dc585", "filename": "libstdc++-v3/testsuite/22_locale/money_put/put/wchar_t/39168.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbcac3becb8dcc1cf5a8d65926ce15b296f4367c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F39168.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbcac3becb8dcc1cf5a8d65926ce15b296f4367c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F39168.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F39168.cc?ref=bbcac3becb8dcc1cf5a8d65926ce15b296f4367c", "patch": "@@ -0,0 +1,51 @@\n+// Copyright (C) 2009 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 22.2.6.2.1 money_put members\n+\n+#include <sstream>\n+#include <locale>\n+#include <climits>\n+#include <testsuite_hooks.h>\n+\n+class my_moneypunct: public std::moneypunct<wchar_t>\n+{\n+protected:\n+  std::string do_grouping() const { return std::string(1, CHAR_MAX); }\n+};\n+\n+// libstdc++/39168\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+\n+  wostringstream oss;\n+  oss.imbue(locale(oss.getloc(), new my_moneypunct));\n+  const money_put<wchar_t>& mp = use_facet<money_put<wchar_t> >(oss.getloc());\n+\n+  wstring digits(300, L'1');\n+  mp.put(oss.rdbuf(), false, oss, ' ', digits);\n+  VERIFY( oss.str() == digits );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "9f83e1a43d1b289781f75243272c708c1f09fcfd", "filename": "libstdc++-v3/testsuite/22_locale/num_get/get/char/39168.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbcac3becb8dcc1cf5a8d65926ce15b296f4367c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F39168.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbcac3becb8dcc1cf5a8d65926ce15b296f4367c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F39168.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F39168.cc?ref=bbcac3becb8dcc1cf5a8d65926ce15b296f4367c", "patch": "@@ -0,0 +1,57 @@\n+// Copyright (C) 2009 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 22.2.2.1.1  num_get members\n+\n+#include <sstream>\n+#include <locale>\n+#include <climits>\n+#include <testsuite_hooks.h>\n+\n+class my_numpunct: public std::numpunct<char>\n+{\n+protected:\n+  std::string do_grouping() const { return std::string(1, CHAR_MAX); }\n+};\n+\n+// libstdc++/39168\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+  typedef istreambuf_iterator<char> iterator_type;\n+\n+  istringstream iss;\n+  iss.imbue(locale(iss.getloc(), new my_numpunct));\n+  const num_get<char>& ng = use_facet<num_get<char> >(iss.getloc());\n+\n+  long double l = -1;\n+  ios_base::iostate err = ios_base::goodbit;\n+\n+  iss.str(\"123,456\");\n+  iterator_type end = ng.get(iss.rdbuf(), 0, iss, err, l);\n+  VERIFY( err == ios_base::goodbit );\n+  VERIFY( l == 123 );\n+  VERIFY( *end == ',' );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "aa1bbf2b5038529ad33710f766e3e11922b043fb", "filename": "libstdc++-v3/testsuite/22_locale/num_get/get/wchar_t/39168.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbcac3becb8dcc1cf5a8d65926ce15b296f4367c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F39168.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbcac3becb8dcc1cf5a8d65926ce15b296f4367c/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F39168.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F39168.cc?ref=bbcac3becb8dcc1cf5a8d65926ce15b296f4367c", "patch": "@@ -0,0 +1,57 @@\n+// Copyright (C) 2009 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 22.2.2.1.1  num_get members\n+\n+#include <sstream>\n+#include <locale>\n+#include <climits>\n+#include <testsuite_hooks.h>\n+\n+class my_numpunct: public std::numpunct<wchar_t>\n+{\n+protected:\n+  std::string do_grouping() const { return std::string(1, CHAR_MAX); }\n+};\n+\n+// libstdc++/39168\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+  typedef istreambuf_iterator<wchar_t> iterator_type;\n+\n+  wistringstream iss;\n+  iss.imbue(locale(iss.getloc(), new my_numpunct));\n+  const num_get<wchar_t>& ng = use_facet<num_get<wchar_t> >(iss.getloc());\n+\n+  long double l = -1;\n+  ios_base::iostate err = ios_base::goodbit;\n+\n+  iss.str(L\"123,456\");\n+  iterator_type end = ng.get(iss.rdbuf(), 0, iss, err, l);\n+  VERIFY( err == ios_base::goodbit );\n+  VERIFY( l == 123 );\n+  VERIFY( *end == L',' );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}