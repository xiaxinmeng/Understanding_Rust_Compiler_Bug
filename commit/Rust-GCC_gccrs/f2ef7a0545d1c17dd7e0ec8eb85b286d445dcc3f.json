{"sha": "f2ef7a0545d1c17dd7e0ec8eb85b286d445dcc3f", "node_id": "C_kwDOANBUbNoAKGYyZWY3YTA1NDVkMWMxN2RkN2UwZWM4ZWI4NWIyODZkNDQ1ZGNjM2Y", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2022-03-25T14:23:08Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-17T08:25:48Z"}, "message": "[Ada] Cleanups related to front-end SJLJ\n\nThis patch cleans up some code that is left over from the front-end SJLJ\nexception handling mechanism, which has been removed.\nThis is in preparation for fixing a finalization-related bug.\n\nMost importantly:\n\n    The documentation is changed: a Handled_Sequence_Of_Statements node\n    CAN contain both Exception_Handlers and an At_End_Proc.\n\n    The assertion contradicting that is removed from\n    Expand_At_End_Handler.\n\n    The From_At_End field is removed.\n\ngcc/ada/\n\n\t* sinfo.ads: Remove From_At_End.  Update comments.\n\t* gen_il-fields.ads, gen_il-gen-gen_nodes.adb, sem_ch11.adb:\n\tRemove From_At_End.\n\t* exp_ch11.adb (Expand_At_End_Handler): Remove assertion.\n\t* fe.h (Exception_Mechanism, Exception_Mechanism_Type, Has_DIC,\n\tHas_Invariants, Is_List_Member, List_Containing): Remove\n\tdeclarations that are not used in gigi.\n\t* opt.ads (Exception_Mechanism): This is not used in gigi.\n\t* exp_util.ads: Minor comment fix.", "tree": {"sha": "fafdf0f50b48b01d8c1f1c00e3619949916282a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fafdf0f50b48b01d8c1f1c00e3619949916282a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2ef7a0545d1c17dd7e0ec8eb85b286d445dcc3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2ef7a0545d1c17dd7e0ec8eb85b286d445dcc3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2ef7a0545d1c17dd7e0ec8eb85b286d445dcc3f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2ef7a0545d1c17dd7e0ec8eb85b286d445dcc3f/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26b0b2ddf4ab777dda4e70c7cef4b16b0493509b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26b0b2ddf4ab777dda4e70c7cef4b16b0493509b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26b0b2ddf4ab777dda4e70c7cef4b16b0493509b"}], "stats": {"total": 96, "additions": 21, "deletions": 75}, "files": [{"sha": "c61f154c8039c59eed58645ed502dc6b064245c1", "filename": "gcc/ada/exp_ch11.adb", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ef7a0545d1c17dd7e0ec8eb85b286d445dcc3f/gcc%2Fada%2Fexp_ch11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ef7a0545d1c17dd7e0ec8eb85b286d445dcc3f/gcc%2Fada%2Fexp_ch11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch11.adb?ref=f2ef7a0545d1c17dd7e0ec8eb85b286d445dcc3f", "patch": "@@ -85,8 +85,6 @@ package body Exp_Ch11 is\n       pragma Unreferenced (Blk_Id);\n    begin\n       pragma Assert (Present (Entity (At_End_Proc (HSS))));\n-      pragma Assert (No (Exception_Handlers (HSS)));\n-      return;\n    end Expand_At_End_Handler;\n \n    -------------------------------"}, {"sha": "de2180983f6cc5667f819715b7cf59dd8d453b32", "filename": "gcc/ada/exp_util.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ef7a0545d1c17dd7e0ec8eb85b286d445dcc3f/gcc%2Fada%2Fexp_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ef7a0545d1c17dd7e0ec8eb85b286d445dcc3f/gcc%2Fada%2Fexp_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.ads?ref=f2ef7a0545d1c17dd7e0ec8eb85b286d445dcc3f", "patch": "@@ -1105,8 +1105,8 @@ package Exp_Util is\n    --    1) controlled objects\n    --    2) library-level tagged types\n    --\n-   --  These cases require special actions on scope exit. The flag Lib_Level\n-   --  is set True if the construct is at library level, and False otherwise.\n+   --  These cases require special actions on scope exit. Lib_Level is True if\n+   --  the construct is at library level, and False otherwise.\n \n    function Safe_Unchecked_Type_Conversion (Exp : Node_Id) return Boolean;\n    --  Given the node for an N_Unchecked_Type_Conversion, return True if this"}, {"sha": "33b48e6f3e5e92484649a623265be7dd5d2d5bbf", "filename": "gcc/ada/fe.h", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ef7a0545d1c17dd7e0ec8eb85b286d445dcc3f/gcc%2Fada%2Ffe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ef7a0545d1c17dd7e0ec8eb85b286d445dcc3f/gcc%2Fada%2Ffe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffe.h?ref=f2ef7a0545d1c17dd7e0ec8eb85b286d445dcc3f", "patch": "@@ -207,7 +207,6 @@ extern Boolean In_Extended_Main_Code_Unit\t(Entity_Id);\n #define Enable_128bit_Types\t\topt__enable_128bit_types\n #define Exception_Extra_Info\t\topt__exception_extra_info\n #define Exception_Locations_Suppressed\topt__exception_locations_suppressed\n-#define Exception_Mechanism\t\topt__exception_mechanism\n #define Generate_SCO_Instance_Table\topt__generate_sco_instance_table\n #define GNAT_Mode\t\t\topt__gnat_mode\n #define List_Representation_Info\topt__list_representation_info\n@@ -218,18 +217,13 @@ typedef enum {\n   Ada_83, Ada_95, Ada_2005, Ada_2012, Ada_2022, Ada_With_Extensions\n } Ada_Version_Type;\n \n-typedef enum {\n-  Back_End_ZCX, Back_End_SJLJ\n-} Exception_Mechanism_Type;\n-\n extern Ada_Version_Type Ada_Version;\n extern Boolean Assume_No_Invalid_Values;\n extern Boolean Back_End_Inlining;\n extern Boolean Debug_Generated_Code;\n extern Boolean Enable_128bit_Types;\n extern Boolean Exception_Extra_Info;\n extern Boolean Exception_Locations_Suppressed;\n-extern Exception_Mechanism_Type Exception_Mechanism;\n extern Boolean Generate_SCO_Instance_Table;\n extern Boolean GNAT_Mode;\n extern Int List_Representation_Info;\n@@ -645,12 +639,6 @@ B Is_Floating_Point_Type                      (E Id);\n #define Is_Record_Type einfo__utils__is_record_type\n B Is_Record_Type                      (E Id);\n \n-#define Has_DIC einfo__utils__has_dic\n-B Has_DIC (E Id);\n-\n-#define Has_Invariants einfo__utils__has_invariants\n-B Has_Invariants (E Id);\n-\n #define Is_Full_Access einfo__utils__is_full_access\n B Is_Full_Access (E Id);\n \n@@ -668,12 +656,6 @@ E Next_Stored_Discriminant (E Id);\n // fe.h is included before einfo.h.\n Entity_Kind Parameter_Mode (E Id);\n \n-#define Is_List_Member einfo__utils__is_list_member\n-B Is_List_Member (N Node);\n-\n-#define List_Containing einfo__utils__list_containing\n-S List_Containing (N Node);\n-\n // The following is needed because Convention in Sem_Util is a renaming\n // of Basic_Convention.\n "}, {"sha": "eedae64ed3384dd88ec45d7f48255594bbe22b4a", "filename": "gcc/ada/gen_il-fields.ads", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ef7a0545d1c17dd7e0ec8eb85b286d445dcc3f/gcc%2Fada%2Fgen_il-fields.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ef7a0545d1c17dd7e0ec8eb85b286d445dcc3f/gcc%2Fada%2Fgen_il-fields.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgen_il-fields.ads?ref=f2ef7a0545d1c17dd7e0ec8eb85b286d445dcc3f", "patch": "@@ -191,7 +191,6 @@ package Gen_IL.Fields is\n       Formal_Type_Definition,\n       Forwards_OK,\n       From_Aspect_Specification,\n-      From_At_End,\n       From_At_Mod,\n       From_Conditional_Expression,\n       From_Default,"}, {"sha": "7ebc02eb8d92beb72f7d902dc30b1ea906c31cc7", "filename": "gcc/ada/gen_il-gen-gen_nodes.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ef7a0545d1c17dd7e0ec8eb85b286d445dcc3f/gcc%2Fada%2Fgen_il-gen-gen_nodes.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ef7a0545d1c17dd7e0ec8eb85b286d445dcc3f/gcc%2Fada%2Fgen_il-gen-gen_nodes.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgen_il-gen-gen_nodes.adb?ref=f2ef7a0545d1c17dd7e0ec8eb85b286d445dcc3f", "patch": "@@ -1043,8 +1043,7 @@ begin -- Gen_IL.Gen.Gen_Nodes\n \n    Cc (N_Raise_Statement, N_Statement_Other_Than_Procedure_Call,\n        (Sy (Name, Node_Id, Default_Empty),\n-        Sy (Expression, Node_Id, Default_Empty),\n-        Sm (From_At_End, Flag)));\n+        Sy (Expression, Node_Id, Default_Empty)));\n \n    Cc (N_Raise_When_Statement, N_Statement_Other_Than_Procedure_Call,\n        (Sy (Name, Node_Id, Default_Empty),"}, {"sha": "9ea153aa07d6b129d2571cbe693b81c5b9080d45", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ef7a0545d1c17dd7e0ec8eb85b286d445dcc3f/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ef7a0545d1c17dd7e0ec8eb85b286d445dcc3f/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=f2ef7a0545d1c17dd7e0ec8eb85b286d445dcc3f", "patch": "@@ -585,16 +585,11 @@ package Opt is\n       --  Similar to Back_End_ZCX with respect to the front-end processing\n       --  of regular and AT-END handlers. A setjmp/longjmp scheme is used to\n       --  propagate and setup handler contexts on regular execution paths.\n-   pragma Convention (C, Exception_Mechanism_Type);\n-\n-   --  WARNING: There is a matching C declaration of this type in fe.h\n \n    Exception_Mechanism : Exception_Mechanism_Type := Back_End_SJLJ;\n    --  GNAT\n    --  Set to the appropriate value depending on the flags in system.ads\n-   --  (ZCX_By_Default). The C convention is there to allow access by gigi.\n-\n-   --  WARNING: There is a matching C declaration of this variable in fe.h\n+   --  (ZCX_By_Default).\n \n    function ZCX_Exceptions return Boolean;\n    function SJLJ_Exceptions return Boolean;"}, {"sha": "034d4cd9e927aeaa4982524e5578eacfcb648405", "filename": "gcc/ada/sem_ch11.adb", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ef7a0545d1c17dd7e0ec8eb85b286d445dcc3f/gcc%2Fada%2Fsem_ch11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ef7a0545d1c17dd7e0ec8eb85b286d445dcc3f/gcc%2Fada%2Fsem_ch11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch11.adb?ref=f2ef7a0545d1c17dd7e0ec8eb85b286d445dcc3f", "patch": "@@ -611,15 +611,7 @@ package body Sem_Ch11 is\n \n          else\n             Set_Local_Raise_Not_OK (P);\n-\n-            --  Do not check the restriction if the reraise statement is part\n-            --  of the code generated for an AT-END handler. That's because\n-            --  if the restriction is actually active, we never generate this\n-            --  raise anyway, so the apparent violation is bogus.\n-\n-            if not From_At_End (N) then\n-               Check_Restriction (No_Exception_Propagation, N);\n-            end if;\n+            Check_Restriction (No_Exception_Propagation, N);\n          end if;\n \n       --  Normal case with exception id present"}, {"sha": "ed61b1e39132fc8d06992f60aeb55e05936f602f", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 16, "deletions": 35, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ef7a0545d1c17dd7e0ec8eb85b286d445dcc3f/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ef7a0545d1c17dd7e0ec8eb85b286d445dcc3f/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=f2ef7a0545d1c17dd7e0ec8eb85b286d445dcc3f", "patch": "@@ -1354,13 +1354,6 @@ package Sinfo is\n    --    These generated nodes have the From_Aspect_Specification flag set to\n    --    indicate that they came from aspect specifications originally.\n \n-   --  From_At_End\n-   --    This flag is set on an N_Raise_Statement node if it corresponds to\n-   --    the reraise statement generated as the last statement of an AT END\n-   --    handler when SJLJ exception handling is active. It is used to stop\n-   --    a bogus violation of restriction (No_Exception_Propagation), bogus\n-   --    because if the restriction is set, the reraise is not generated.\n-\n    --  From_At_Mod\n    --    This flag is set on the attribute definition clause node that is\n    --    generated by a transformation of an at mod phrase in a record\n@@ -6811,38 +6804,24 @@ package Sinfo is\n \n       --  The AT END phrase is a GNAT extension to provide for cleanups. It is\n       --  used only internally currently, but is considered to be syntactic.\n-      --  At the moment, the only cleanup action allowed is a single call to\n-      --  a parameterless procedure, and the Identifier field of the node is\n-      --  the procedure to be called. The cleanup action occurs whenever the\n-      --  sequence of statements is left for any reason. The possible reasons\n-      --  are:\n+      --  At the moment, the only cleanup action allowed is a single call to a\n+      --  parameterless procedure; this restriction could be lifted if we make\n+      --  some changes in gigi. The At_End_Proc field is an N_Identifier node\n+      --  that denotes the procedure to be called. The cleanup action occurs\n+      --  whenever the sequence of statements is left for any reason. The\n+      --  possible reasons are:\n+      --\n       --      1. reaching the end of the sequence\n       --      2. exit, return, or goto\n       --      3. exception or abort\n-      --  For some back ends, such as gcc with ZCX, \"at end\" is implemented\n-      --  entirely in the back end. In this case, a handled sequence of\n-      --  statements with an \"at end\" cannot also have exception handlers.\n-      --  For other back ends, such as gcc with front-end SJLJ, the\n-      --  implementation is split between the front end and back end; the front\n-      --  end implements 3, and the back end implements 1 and 2. In this case,\n-      --  if there is an \"at end\", the front end inserts the appropriate\n-      --  exception handler, and this handler takes precedence over \"at end\"\n-      --  in case of exception.\n-\n-      --  The inserted exception handler is of the form:\n-\n-      --     when all others =>\n-      --        cleanup;\n-      --        raise;\n-\n-      --  where cleanup is the procedure to be called. The reason we do this is\n-      --  so that the front end can handle the necessary entries in the\n-      --  exception tables, and other exception handler actions required as\n-      --  part of the normal handling for exception handlers.\n+      --\n+      --  The cleanup action also occurs whenever the exception handlers are\n+      --  left.\n \n       --  The AT END cleanup handler protects only the sequence of statements\n-      --  (not the associated declarations of the parent), just like exception\n-      --  handlers. The big difference is that the cleanup procedure is called\n+      --  and the exception handlers (not the associated declarations of\n+      --  the parent), just like exception handlers do not protect the\n+      --  declarations. The big difference is that the cleanup actions occur\n       --  on either a normal or an abnormal exit from the statement sequence.\n \n       --  Note: the list of Exception_Handlers can contain pragmas as well\n@@ -6873,6 +6852,9 @@ package Sinfo is\n       --  At_End_Proc (set to Empty if no clean up procedure)\n       --  First_Real_Statement\n \n+      --  Note: A Handled_Sequence_Of_Statements can contain both\n+      --  Exception_Handlers and an At_End_Proc.\n+\n       --  Note: the parent always contains a Declarations field which contains\n       --  declarations associated with the handled sequence of statements. This\n       --  is true even in the case of an accept statement (see description of\n@@ -6936,7 +6918,6 @@ package Sinfo is\n       --  Sloc points to RAISE\n       --  Name (set to Empty if no exception name present)\n       --  Expression (set to Empty if no expression present)\n-      --  From_At_End\n \n       ----------------------------\n       -- 11.3  Raise Expression --"}]}