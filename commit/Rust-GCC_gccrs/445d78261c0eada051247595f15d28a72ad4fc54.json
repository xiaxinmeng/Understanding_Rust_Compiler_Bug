{"sha": "445d78261c0eada051247595f15d28a72ad4fc54", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQ1ZDc4MjYxYzBlYWRhMDUxMjQ3NTk1ZjE1ZDI4YTcyYWQ0ZmM1NA==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2014-11-18T22:45:21Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2014-11-18T22:45:21Z"}, "message": "[Patch] PR target/63937 TARGET_USE_BY_PIECES_INFRASTRUCTURE_P should take an unsigned HOST_WIDE_INT size argument\n\ngcc/\n\n\tPR target/63937\n\t* target.def (use_by_pieces_infrastructure_p): Take unsigned\n\tHOST_WIDE_INT as the size parameter.\n\t* targhooks.c (default_use_by_pieces_infrastructure_p): Likewise.\n\t* targhooks.h (default_use_by_pieces_infrastructure_p): Likewise.\n\t* config/arc/arc.c (arc_use_by_pieces_infrastructure_p)): Likewise.\n\t* config/mips/mips.c (mips_use_by_pieces_infrastructure_p)): Likewise.\n\t* config/s390/s390.c (s390_use_by_pieces_infrastructure_p)): Likewise.\n\t* config/sh/sh.c (sh_use_by_pieces_infrastructure_p)): Likewise.\n\t* config/aarch64/aarch64.c\n\t(aarch64_use_by_pieces_infrastructure_p)): Likewise.\n\t* doc/tm.texi: Regenerate.\n\ngcc/testsuite/\n\n\tPR target/63937\n\t* gcc.dg/memset-2.c: New.\n\nFrom-SVN: r217742", "tree": {"sha": "4c0a8c365b4778e59a19fe154bd45e4a651be7d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c0a8c365b4778e59a19fe154bd45e4a651be7d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/445d78261c0eada051247595f15d28a72ad4fc54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/445d78261c0eada051247595f15d28a72ad4fc54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/445d78261c0eada051247595f15d28a72ad4fc54", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/445d78261c0eada051247595f15d28a72ad4fc54/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c39a5e99829ae233bd3e8ee89a6b7d986adbb1c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c39a5e99829ae233bd3e8ee89a6b7d986adbb1c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c39a5e99829ae233bd3e8ee89a6b7d986adbb1c8"}], "stats": {"total": 53, "additions": 42, "deletions": 11}, "files": [{"sha": "5072b44f8ff3b9c4869883f9e5c847bf79def545", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d78261c0eada051247595f15d28a72ad4fc54/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d78261c0eada051247595f15d28a72ad4fc54/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=445d78261c0eada051247595f15d28a72ad4fc54", "patch": "@@ -1,3 +1,18 @@\n+2014-11-18  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\tPR target/63937\n+\t* target.def (use_by_pieces_infrastructure_p): Take unsigned\n+\tHOST_WIDE_INT as the size parameter.\n+\t* targhooks.c (default_use_by_pieces_infrastructure_p): Likewise.\n+\t* targhooks.h (default_use_by_pieces_infrastructure_p): Likewise.\n+\t* config/arc/arc.c (arc_use_by_pieces_infrastructure_p)): Likewise.\n+\t* config/mips/mips.c (mips_use_by_pieces_infrastructure_p)): Likewise.\n+\t* config/s390/s390.c (s390_use_by_pieces_infrastructure_p)): Likewise.\n+\t* config/sh/sh.c (sh_use_by_pieces_infrastructure_p)): Likewise.\n+\t* config/aarch64/aarch64.c\n+\t(aarch64_use_by_pieces_infrastructure_p)): Likewise.\n+\t* doc/tm.texi: Regenerate.\n+\n 2014-11-18  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* ipa-cp.c (ipcp_cloning_candidate_p): Use opt_for_fn."}, {"sha": "a53f942ad7f5d48f36fcb19c091a3a7299e385a0", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d78261c0eada051247595f15d28a72ad4fc54/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d78261c0eada051247595f15d28a72ad4fc54/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=445d78261c0eada051247595f15d28a72ad4fc54", "patch": "@@ -10196,7 +10196,7 @@ aarch64_asan_shadow_offset (void)\n }\n \n static bool\n-aarch64_use_by_pieces_infrastructure_p (unsigned int size,\n+aarch64_use_by_pieces_infrastructure_p (unsigned HOST_WIDE_INT size,\n \t\t\t\t\tunsigned int align,\n \t\t\t\t\tenum by_pieces_operation op,\n \t\t\t\t\tbool speed_p)"}, {"sha": "764f7366c9aa912545ddd01f1239db7d472376e9", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d78261c0eada051247595f15d28a72ad4fc54/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d78261c0eada051247595f15d28a72ad4fc54/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=445d78261c0eada051247595f15d28a72ad4fc54", "patch": "@@ -416,7 +416,7 @@ static void output_short_suffix (FILE *file);\n \n static bool arc_frame_pointer_required (void);\n \n-static bool arc_use_by_pieces_infrastructure_p (unsigned int,\n+static bool arc_use_by_pieces_infrastructure_p (unsigned HOST_WIDE_INT,\n \t\t\t\t\t\tunsigned int,\n \t\t\t\t\t\tenum by_pieces_operation op,\n \t\t\t\t\t\tbool);\n@@ -9374,7 +9374,7 @@ arc_legitimize_reload_address (rtx *p, machine_mode mode, int opnum,\n /* Implement TARGET_USE_BY_PIECES_INFRASTRUCTURE_P.  */\n \n static bool\n-arc_use_by_pieces_infrastructure_p (unsigned int size,\n+arc_use_by_pieces_infrastructure_p (unsigned HOST_WIDE_INT size,\n \t\t\t\t    unsigned int align,\n \t\t\t\t    enum by_pieces_operation op,\n \t\t\t\t    bool speed_p)"}, {"sha": "db58d076e53d902463c02fdf5f76145c3a6a89e4", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d78261c0eada051247595f15d28a72ad4fc54/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d78261c0eada051247595f15d28a72ad4fc54/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=445d78261c0eada051247595f15d28a72ad4fc54", "patch": "@@ -7235,7 +7235,7 @@ mips_function_ok_for_sibcall (tree decl, tree exp ATTRIBUTE_UNUSED)\n /* Implement TARGET_USE_MOVE_BY_PIECES_INFRASTRUCTURE_P.  */\n \n bool\n-mips_use_by_pieces_infrastructure_p (unsigned int size,\n+mips_use_by_pieces_infrastructure_p (unsigned HOST_WIDE_INT size,\n \t\t\t\t     unsigned int align,\n \t\t\t\t     enum by_pieces_operation op,\n \t\t\t\t     bool speed_p)"}, {"sha": "ae3ffd12db1e2e5222288026cfae4094333f215f", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d78261c0eada051247595f15d28a72ad4fc54/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d78261c0eada051247595f15d28a72ad4fc54/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=445d78261c0eada051247595f15d28a72ad4fc54", "patch": "@@ -12036,7 +12036,7 @@ s390_option_override (void)\n /* Implement TARGET_USE_BY_PIECES_INFRASTRUCTURE_P.  */\n \n static bool\n-s390_use_by_pieces_infrastructure_p (unsigned int size,\n+s390_use_by_pieces_infrastructure_p (unsigned HOST_WIDE_INT size,\n \t\t\t\t     unsigned int align ATTRIBUTE_UNUSED,\n \t\t\t\t     enum by_pieces_operation op ATTRIBUTE_UNUSED,\n \t\t\t\t     bool speed_p ATTRIBUTE_UNUSED)"}, {"sha": "e44912105224ebabcbbe80c2df506148dc81bbcd", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d78261c0eada051247595f15d28a72ad4fc54/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d78261c0eada051247595f15d28a72ad4fc54/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=445d78261c0eada051247595f15d28a72ad4fc54", "patch": "@@ -338,7 +338,7 @@ static void sh_conditional_register_usage (void);\n static bool sh_legitimate_constant_p (machine_mode, rtx);\n static int mov_insn_size (machine_mode, bool);\n static int mov_insn_alignment_mask (machine_mode, bool);\n-static bool sh_use_by_pieces_infrastructure_p (unsigned int,\n+static bool sh_use_by_pieces_infrastructure_p (unsigned HOST_WIDE_INT,\n \t\t\t\t\t       unsigned int,\n \t\t\t\t\t       enum by_pieces_operation,\n \t\t\t\t\t       bool);\n@@ -13680,7 +13680,7 @@ sh_mode_priority (int entity ATTRIBUTE_UNUSED, int n)\n /* Implement TARGET_USE_BY_PIECES_INFRASTRUCTURE_P.  */\n \n static bool\n-sh_use_by_pieces_infrastructure_p (unsigned int size,\n+sh_use_by_pieces_infrastructure_p (unsigned HOST_WIDE_INT size,\n \t\t\t\t   unsigned int align,\n \t\t\t\t   enum by_pieces_operation op,\n \t\t\t\t   bool speed_p)"}, {"sha": "0d3a9fd9b9a7e6b0a5f1063cc204810d977f0c40", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d78261c0eada051247595f15d28a72ad4fc54/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d78261c0eada051247595f15d28a72ad4fc54/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=445d78261c0eada051247595f15d28a72ad4fc54", "patch": "@@ -6205,7 +6205,7 @@ optimized for speed rather than size.\n If you don't define this, a reasonable default is used.\n @end defmac\n \n-@deftypefn {Target Hook} bool TARGET_USE_BY_PIECES_INFRASTRUCTURE_P (unsigned int @var{size}, unsigned int @var{alignment}, enum by_pieces_operation @var{op}, bool @var{speed_p})\n+@deftypefn {Target Hook} bool TARGET_USE_BY_PIECES_INFRASTRUCTURE_P (unsigned HOST_WIDE_INT @var{size}, unsigned int @var{alignment}, enum by_pieces_operation @var{op}, bool @var{speed_p})\n GCC will attempt several strategies when asked to copy between\n two areas of memory, or to set, clear or store to memory, for example\n when copying a @code{struct}. The @code{by_pieces} infrastructure"}, {"sha": "bc5160d1805940023e94370a8c0bf1a12636b0a5", "filename": "gcc/target.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d78261c0eada051247595f15d28a72ad4fc54/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d78261c0eada051247595f15d28a72ad4fc54/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=445d78261c0eada051247595f15d28a72ad4fc54", "patch": "@@ -3314,7 +3314,7 @@ the body of the memory operation.\\n\\\n Returning true for higher values of @code{size} may also cause an increase\\n\\\n in code size, for example where the number of insns emitted to perform a\\n\\\n move would be greater than that of a library call.\",\n- bool, (unsigned int size, unsigned int alignment,\n+ bool, (unsigned HOST_WIDE_INT size, unsigned int alignment,\n         enum by_pieces_operation op, bool speed_p),\n  default_use_by_pieces_infrastructure_p)\n "}, {"sha": "bef18872bbab9b1355862d67524e27443754d273", "filename": "gcc/targhooks.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d78261c0eada051247595f15d28a72ad4fc54/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d78261c0eada051247595f15d28a72ad4fc54/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=445d78261c0eada051247595f15d28a72ad4fc54", "patch": "@@ -1430,7 +1430,7 @@ get_move_ratio (bool speed_p ATTRIBUTE_UNUSED)\n    a call to memcpy emitted.  */\n \n bool\n-default_use_by_pieces_infrastructure_p (unsigned int size,\n+default_use_by_pieces_infrastructure_p (unsigned HOST_WIDE_INT size,\n \t\t\t\t\tunsigned int alignment,\n \t\t\t\t\tenum by_pieces_operation op,\n \t\t\t\t\tbool speed_p)"}, {"sha": "9734220dea2f998ee17e2834695b8d9b698cc14d", "filename": "gcc/targhooks.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d78261c0eada051247595f15d28a72ad4fc54/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d78261c0eada051247595f15d28a72ad4fc54/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=445d78261c0eada051247595f15d28a72ad4fc54", "patch": "@@ -181,7 +181,7 @@ extern int default_memory_move_cost (machine_mode, reg_class_t, bool);\n extern int default_register_move_cost (machine_mode, reg_class_t,\n \t\t\t\t       reg_class_t);\n \n-extern bool default_use_by_pieces_infrastructure_p (unsigned int,\n+extern bool default_use_by_pieces_infrastructure_p (unsigned HOST_WIDE_INT,\n \t\t\t\t\t\t    unsigned int,\n \t\t\t\t\t\t    enum by_pieces_operation,\n \t\t\t\t\t\t    bool);"}, {"sha": "1a56e1ac9edbdea8a188db8f647713ebe5c6d68a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d78261c0eada051247595f15d28a72ad4fc54/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d78261c0eada051247595f15d28a72ad4fc54/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=445d78261c0eada051247595f15d28a72ad4fc54", "patch": "@@ -1,3 +1,8 @@\n+2014-11-18  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\tPR target/63937\n+\t* gcc.dg/memset-2.c: New.\n+\n 2014-11-18  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR sanitizer/63813"}, {"sha": "fb4debc6d2ce7c4d559fe17b2131044ba0bbef0b", "filename": "gcc/testsuite/gcc.dg/memset-2.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d78261c0eada051247595f15d28a72ad4fc54/gcc%2Ftestsuite%2Fgcc.dg%2Fmemset-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d78261c0eada051247595f15d28a72ad4fc54/gcc%2Ftestsuite%2Fgcc.dg%2Fmemset-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fmemset-2.c?ref=445d78261c0eada051247595f15d28a72ad4fc54", "patch": "@@ -0,0 +1,11 @@\n+/* PR target/63937 */\n+/* { dg-do compile { target lp64 } } */\n+/* { dg-options \"-O2\" } */\n+\n+void\n+foo (char *p)\n+{\n+  p = __builtin_assume_aligned (p, 64);\n+  __builtin_memset (p, 0, 0x100000001ULL);\n+}\n+"}]}