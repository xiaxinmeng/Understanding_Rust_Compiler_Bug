{"sha": "394d9fe79e075b4deab317f8bcd9b15be6e37e38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzk0ZDlmZTc5ZTA3NWI0ZGVhYjMxN2Y4YmNkOWIxNWJlNmUzN2UzOA==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2007-12-15T20:19:23Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2007-12-15T20:19:23Z"}, "message": "re PR debug/7081 (DWARF enhancements for C++)\n\ngcc/ChangeLog:\nPR debug/7081\n* dwarf2out.c (dwarf_tag_name): Synchronize with dwarf2.h.\n(is_type_die): Cover interface types.\n(class_or_namespace_scope_p): Cover interface and class types.\n(record_type_tag): New.\n(gen_inlined_structure_type_die): Use it.\n(gen_struct_or_union_type_die): Likewise.\n(prune_unused_types_walk): Cover interface types.\n* langhooks.h (classify_record): New enum.\n(classify_record): New member in struct langhooks_for_types.\n* langhooks-def.h (LANG_HOOKS_CLASSIFY_RECORD): New.\n(LANGHOOKS_FOR_TYPES_INITIALIZER): Adjust.\ngcc/cp/ChangeLog:\nPR debug/7081\n* cp-lang.c (cp_classify_record): New.\n(LANG_HOOKS_CLASSIFY_RECORD): Override.\ngcc/java/ChangeLog:\nPR debug/7081\n* lang.c (java_classify_record): New.\n(LANG_HOOKS_CLASSIFY_RECORD): Override.\n\nFrom-SVN: r130960", "tree": {"sha": "3eeee76c583d6b37c1e438a4ff1bf07b0dc61918", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3eeee76c583d6b37c1e438a4ff1bf07b0dc61918"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/394d9fe79e075b4deab317f8bcd9b15be6e37e38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/394d9fe79e075b4deab317f8bcd9b15be6e37e38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/394d9fe79e075b4deab317f8bcd9b15be6e37e38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/394d9fe79e075b4deab317f8bcd9b15be6e37e38/comments", "author": null, "committer": null, "parents": [{"sha": "d2f08d98796279fe8886918e7746eb276420545c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2f08d98796279fe8886918e7746eb276420545c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2f08d98796279fe8886918e7746eb276420545c"}], "stats": {"total": 117, "additions": 113, "deletions": 4}, "files": [{"sha": "51d18107ac7b65def383f59eed5e2910b437d767", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/394d9fe79e075b4deab317f8bcd9b15be6e37e38/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/394d9fe79e075b4deab317f8bcd9b15be6e37e38/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=394d9fe79e075b4deab317f8bcd9b15be6e37e38", "patch": "@@ -1,3 +1,18 @@\n+2007-12-15  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\tPR debug/7081\n+\t* dwarf2out.c (dwarf_tag_name): Synchronize with dwarf2.h.\n+\t(is_type_die): Cover interface types.\n+\t(class_or_namespace_scope_p): Cover interface and class types.\n+\t(record_type_tag): New.\n+\t(gen_inlined_structure_type_die): Use it.\n+\t(gen_struct_or_union_type_die): Likewise.\n+\t(prune_unused_types_walk): Cover interface types.\n+\t* langhooks.h (classify_record): New enum.\n+\t(classify_record): New member in struct langhooks_for_types.\n+\t* langhooks-def.h (LANG_HOOKS_CLASSIFY_RECORD): New.\n+\t(LANGHOOKS_FOR_TYPES_INITIALIZER): Adjust.\n+\n 2007-12-15  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* dwarf2out.c (reference_to_unused): Don't emit strings in"}, {"sha": "eaa9ff21521c209650a00989a947f3bdafa34e01", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/394d9fe79e075b4deab317f8bcd9b15be6e37e38/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/394d9fe79e075b4deab317f8bcd9b15be6e37e38/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=394d9fe79e075b4deab317f8bcd9b15be6e37e38", "patch": "@@ -1,3 +1,9 @@\n+2007-12-15  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\tPR debug/7081\n+\t* cp-lang.c (cp_classify_record): New.\n+\t(LANG_HOOKS_CLASSIFY_RECORD): Override.\n+\n 2007-12-11  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/34238"}, {"sha": "70709298e9a88e2397bbf8bebc4ba10aab75d669", "filename": "gcc/cp/cp-lang.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/394d9fe79e075b4deab317f8bcd9b15be6e37e38/gcc%2Fcp%2Fcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/394d9fe79e075b4deab317f8bcd9b15be6e37e38/gcc%2Fcp%2Fcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-lang.c?ref=394d9fe79e075b4deab317f8bcd9b15be6e37e38", "patch": "@@ -36,6 +36,7 @@ along with GCC; see the file COPYING3.  If not see\n enum c_language_kind c_language = clk_cxx;\n static void cp_init_ts (void);\n static const char * cxx_dwarf_name (tree t, int verbosity);\n+static enum classify_record cp_classify_record (tree type);\n \n /* Lang hooks common to C++ and ObjC++ are declared in cp/cp-objcp-common.h;\n    consequently, there should be very few hooks below.  */\n@@ -44,6 +45,8 @@ static const char * cxx_dwarf_name (tree t, int verbosity);\n #define LANG_HOOKS_NAME \"GNU C++\"\n #undef LANG_HOOKS_INIT\n #define LANG_HOOKS_INIT cxx_init\n+#undef LANG_HOOKS_CLASSIFY_RECORD\n+#define LANG_HOOKS_CLASSIFY_RECORD cp_classify_record\n #undef LANG_HOOKS_GENERIC_TYPE_P\n #define LANG_HOOKS_GENERIC_TYPE_P class_tmpl_impl_spec_p\n #undef LANG_HOOKS_DECL_PRINTABLE_NAME\n@@ -153,6 +156,15 @@ cxx_dwarf_name (tree t, int verbosity)\n   return cxx_printable_name (t, verbosity);\n }\n \n+static enum classify_record\n+cp_classify_record (tree type)\n+{\n+  if (CLASSTYPE_DECLARED_CLASS (type))\n+    return RECORD_IS_CLASS;\n+\n+  return RECORD_IS_STRUCT;\n+}\n+\n void\n finish_file (void)\n {"}, {"sha": "6c7f75a251d109ce34041257756861855fb1f6c9", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 48, "deletions": 4, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/394d9fe79e075b4deab317f8bcd9b15be6e37e38/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/394d9fe79e075b4deab317f8bcd9b15be6e37e38/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=394d9fe79e075b4deab317f8bcd9b15be6e37e38", "patch": "@@ -4562,8 +4562,6 @@ dwarf_tag_name (unsigned int tag)\n       return \"DW_TAG_namelist\";\n     case DW_TAG_namelist_item:\n       return \"DW_TAG_namelist_item\";\n-    case DW_TAG_namespace:\n-      return \"DW_TAG_namespace\";\n     case DW_TAG_packed_type:\n       return \"DW_TAG_packed_type\";\n     case DW_TAG_subprogram:\n@@ -4582,8 +4580,26 @@ dwarf_tag_name (unsigned int tag)\n       return \"DW_TAG_variable\";\n     case DW_TAG_volatile_type:\n       return \"DW_TAG_volatile_type\";\n+    case DW_TAG_dwarf_procedure:\n+      return \"DW_TAG_dwarf_procedure\";\n+    case DW_TAG_restrict_type:\n+      return \"DW_TAG_restrict_type\";\n+    case DW_TAG_interface_type:\n+      return \"DW_TAG_interface_type\";\n+    case DW_TAG_namespace:\n+      return \"DW_TAG_namespace\";\n     case DW_TAG_imported_module:\n       return \"DW_TAG_imported_module\";\n+    case DW_TAG_unspecified_type:\n+      return \"DW_TAG_unspecified_type\";\n+    case DW_TAG_partial_unit:\n+      return \"DW_TAG_partial_unit\";\n+    case DW_TAG_imported_unit:\n+      return \"DW_TAG_imported_unit\";\n+    case DW_TAG_condition:\n+      return \"DW_TAG_condition\";\n+    case DW_TAG_shared_type:\n+      return \"DW_TAG_shared_type\";\n     case DW_TAG_MIPS_loop:\n       return \"DW_TAG_MIPS_loop\";\n     case DW_TAG_format_label:\n@@ -6301,6 +6317,7 @@ is_type_die (dw_die_ref die)\n     {\n     case DW_TAG_array_type:\n     case DW_TAG_class_type:\n+    case DW_TAG_interface_type:\n     case DW_TAG_enumeration_type:\n     case DW_TAG_pointer_type:\n     case DW_TAG_reference_type:\n@@ -11475,6 +11492,8 @@ class_or_namespace_scope_p (dw_die_ref context_die)\n {\n   return (context_die\n \t  && (context_die->die_tag == DW_TAG_structure_type\n+\t      || context_die->die_tag == DW_TAG_class_type\n+\t      || context_die->die_tag == DW_TAG_interface_type\n \t      || context_die->die_tag == DW_TAG_union_type\n \t      || context_die->die_tag == DW_TAG_namespace));\n }\n@@ -11893,12 +11912,36 @@ gen_inlined_enumeration_type_die (tree type, dw_die_ref context_die)\n   add_abstract_origin_attribute (type_die, type);\n }\n \n+/* Determine what tag to use for a record type.  */\n+\n+static enum dwarf_tag\n+record_type_tag (tree type)\n+{\n+  if (! lang_hooks.types.classify_record)\n+    return DW_TAG_structure_type;\n+\n+  switch (lang_hooks.types.classify_record (type))\n+    {\n+    case RECORD_IS_STRUCT:\n+      return DW_TAG_structure_type;\n+\n+    case RECORD_IS_CLASS:\n+      return DW_TAG_class_type;\n+\n+    case RECORD_IS_INTERFACE:\n+      return DW_TAG_interface_type;\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+\n /* Generate a DIE to represent an inlined instance of a structure type.  */\n \n static void\n gen_inlined_structure_type_die (tree type, dw_die_ref context_die)\n {\n-  dw_die_ref type_die = new_die (DW_TAG_structure_type, context_die, type);\n+  dw_die_ref type_die = new_die (record_type_tag (type), context_die, type);\n \n   /* We do not check for TREE_ASM_WRITTEN (type) being set, as the type may\n      be incomplete and such types are not marked.  */\n@@ -13099,7 +13142,7 @@ gen_struct_or_union_type_die (tree type, dw_die_ref context_die,\n       dw_die_ref old_die = type_die;\n \n       type_die = new_die (TREE_CODE (type) == RECORD_TYPE\n-\t\t\t  ? DW_TAG_structure_type : DW_TAG_union_type,\n+\t\t\t  ? record_type_tag (type) : DW_TAG_union_type,\n \t\t\t  scope_die, type);\n       equate_type_number_to_die (type, type_die);\n       if (old_die)\n@@ -14773,6 +14816,7 @@ prune_unused_types_walk (dw_die_ref die)\n     case DW_TAG_structure_type:\n     case DW_TAG_union_type:\n     case DW_TAG_class_type:\n+    case DW_TAG_interface_type:\n     case DW_TAG_friend:\n     case DW_TAG_variant_part:\n     case DW_TAG_enumeration_type:"}, {"sha": "52e9da18a964d22c1a2ef0e0e5d80005c36c0420", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/394d9fe79e075b4deab317f8bcd9b15be6e37e38/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/394d9fe79e075b4deab317f8bcd9b15be6e37e38/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=394d9fe79e075b4deab317f8bcd9b15be6e37e38", "patch": "@@ -1,3 +1,9 @@\n+2007-12-15  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\tPR debug/7081\n+\t* lang.c (java_classify_record): New.\n+\t(LANG_HOOKS_CLASSIFY_RECORD): Override.\n+\n 2007-11-26  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n \tPR 34081/C++"}, {"sha": "0b98bf55e759d328b5a4e0a983271ddee76847d9", "filename": "gcc/java/lang.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/394d9fe79e075b4deab317f8bcd9b15be6e37e38/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/394d9fe79e075b4deab317f8bcd9b15be6e37e38/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=394d9fe79e075b4deab317f8bcd9b15be6e37e38", "patch": "@@ -64,6 +64,8 @@ static bool java_decl_ok_for_sibcall (const_tree);\n static tree java_get_callee_fndecl (const_tree);\n static void java_clear_binding_stack (void);\n \n+static enum classify_record java_classify_record (tree type);\n+\n #ifndef TARGET_OBJECT_SUFFIX\n # define TARGET_OBJECT_SUFFIX \".o\"\n #endif\n@@ -180,6 +182,8 @@ struct language_function GTY(())\n #define LANG_HOOKS_TYPE_FOR_MODE java_type_for_mode\n #undef LANG_HOOKS_TYPE_FOR_SIZE\n #define LANG_HOOKS_TYPE_FOR_SIZE java_type_for_size\n+#undef LANG_HOOKS_CLASSIFY_RECORD\n+#define LANG_HOOKS_CLASSIFY_RECORD java_classify_record\n \n #undef LANG_HOOKS_TREE_DUMP_DUMP_TREE_FN\n #define LANG_HOOKS_TREE_DUMP_DUMP_TREE_FN java_dump_tree\n@@ -955,4 +959,16 @@ java_clear_binding_stack (void)\n     poplevel (0, 0, 0);\n }\n \n+static enum classify_record\n+java_classify_record (tree type)\n+{\n+  if (! CLASS_P (type))\n+    return RECORD_IS_STRUCT;\n+\n+  if (CLASS_INTERFACE (TYPE_NAME (type)))\n+    return RECORD_IS_INTERFACE;\n+\n+  return RECORD_IS_CLASS;\n+}\n+\n #include \"gt-java-lang.h\""}, {"sha": "fd5f474cc1e7d96d945247f1cbe4a32a9d2439fc", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/394d9fe79e075b4deab317f8bcd9b15be6e37e38/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/394d9fe79e075b4deab317f8bcd9b15be6e37e38/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=394d9fe79e075b4deab317f8bcd9b15be6e37e38", "patch": "@@ -172,6 +172,7 @@ extern tree lhd_make_node (enum tree_code);\n /* Types hooks.  There are no reasonable defaults for most of them,\n    so we create a compile-time error instead.  */\n #define LANG_HOOKS_MAKE_TYPE lhd_make_node\n+#define LANG_HOOKS_CLASSIFY_RECORD\tNULL\n #define LANG_HOOKS_INCOMPLETE_TYPE_ERROR lhd_incomplete_type_error\n #define LANG_HOOKS_GENERIC_TYPE_P\thook_bool_const_tree_false\n #define LANG_HOOKS_TYPE_PROMOTES_TO lhd_type_promotes_to\n@@ -185,6 +186,7 @@ extern tree lhd_make_node (enum tree_code);\n \n #define LANG_HOOKS_FOR_TYPES_INITIALIZER { \\\n   LANG_HOOKS_MAKE_TYPE, \\\n+  LANG_HOOKS_CLASSIFY_RECORD, \\\n   LANG_HOOKS_TYPE_FOR_MODE, \\\n   LANG_HOOKS_TYPE_FOR_SIZE, \\\n   LANG_HOOKS_GENERIC_TYPE_P, \\"}, {"sha": "bbbcc6808c0f05790b7ae3e30772f5f72195478f", "filename": "gcc/langhooks.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/394d9fe79e075b4deab317f8bcd9b15be6e37e38/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/394d9fe79e075b4deab317f8bcd9b15be6e37e38/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=394d9fe79e075b4deab317f8bcd9b15be6e37e38", "patch": "@@ -33,6 +33,9 @@ struct array_descr_info;\n /* A print hook for print_tree ().  */\n typedef void (*lang_print_tree_hook) (FILE *, tree, int indent);\n \n+enum classify_record\n+  { RECORD_IS_STRUCT, RECORD_IS_CLASS, RECORD_IS_INTERFACE };\n+\n /* The following hooks are documented in langhooks.c.  Must not be\n    NULL.  */\n \n@@ -91,6 +94,11 @@ struct lang_hooks_for_types\n      language-specific processing is required.  */\n   tree (*make_type) (enum tree_code);\n \n+  /* Return what kind of RECORD_TYPE this is, mainly for purposes of\n+     debug information.  If not defined, record types are assumed to\n+     be structures.  */\n+  enum classify_record (*classify_record) (tree);\n+\n   /* Given MODE and UNSIGNEDP, return a suitable type-tree with that\n      mode.  */\n   tree (*type_for_mode) (enum machine_mode, int);"}]}