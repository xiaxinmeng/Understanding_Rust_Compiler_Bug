{"sha": "5a2d2a7900124db247d16cae7a751f4b1f19bce4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWEyZDJhNzkwMDEyNGRiMjQ3ZDE2Y2FlN2E3NTFmNGIxZjE5YmNlNA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-03-21T13:53:01Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-03-21T13:53:01Z"}, "message": "re PR middle-end/39326 (Segmentation fault with -O1, out of memory with -O2)\n\n2013-03-21  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/39326\n\t* tree-ssa-loop-im.c (bb_loop_postorder): New global static.\n\t(sort_bbs_in_loop_postorder_cmp): New function.\n\t(gather_mem_refs_in_loops): Assign mem-ref IDs in loop\n\tpostorder.\n\nFrom-SVN: r196874", "tree": {"sha": "e46c2b911cdc5c3e939dcb2d7dd0b392250ee11c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e46c2b911cdc5c3e939dcb2d7dd0b392250ee11c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a2d2a7900124db247d16cae7a751f4b1f19bce4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a2d2a7900124db247d16cae7a751f4b1f19bce4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a2d2a7900124db247d16cae7a751f4b1f19bce4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a2d2a7900124db247d16cae7a751f4b1f19bce4/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5abe1e053f1b9a685aa6f5505db367f2cad790d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5abe1e053f1b9a685aa6f5505db367f2cad790d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5abe1e053f1b9a685aa6f5505db367f2cad790d0"}], "stats": {"total": 55, "additions": 49, "deletions": 6}, "files": [{"sha": "be4b87fea2ac789c3f29731b68c3ea6ab9a55955", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a2d2a7900124db247d16cae7a751f4b1f19bce4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a2d2a7900124db247d16cae7a751f4b1f19bce4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5a2d2a7900124db247d16cae7a751f4b1f19bce4", "patch": "@@ -1,3 +1,11 @@\n+2013-03-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/39326\n+\t* tree-ssa-loop-im.c (bb_loop_postorder): New global static.\n+\t(sort_bbs_in_loop_postorder_cmp): New function.\n+\t(gather_mem_refs_in_loops): Assign mem-ref IDs in loop\n+\tpostorder.\n+\n 2013-03-21  Richard Biener  <rguenther@suse.de>\n \n \t* tree-vect-data-refs.c (vect_update_interleaving_chain): Remove."}, {"sha": "0945d266c12b0330e0c501d6b87c2ddd745445fc", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 41, "deletions": 6, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a2d2a7900124db247d16cae7a751f4b1f19bce4/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a2d2a7900124db247d16cae7a751f4b1f19bce4/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=5a2d2a7900124db247d16cae7a751f4b1f19bce4", "patch": "@@ -1622,27 +1622,62 @@ gather_mem_refs_stmt (struct loop *loop, gimple stmt)\n   return;\n }\n \n+static unsigned *bb_loop_postorder;\n+\n+/* qsort sort function to sort blocks after their loop fathers postorder.  */\n+\n+static int\n+sort_bbs_in_loop_postorder_cmp (const void *bb1_, const void *bb2_)\n+{\n+  basic_block bb1 = *(basic_block *)const_cast<void *>(bb1_);\n+  basic_block bb2 = *(basic_block *)const_cast<void *>(bb2_);\n+  struct loop *loop1 = bb1->loop_father;\n+  struct loop *loop2 = bb2->loop_father;\n+  if (loop1->num == loop2->num)\n+    return 0;\n+  return bb_loop_postorder[loop1->num] < bb_loop_postorder[loop2->num] ? -1 : 1;\n+}\n+\n /* Gathers memory references in loops.  */\n \n static void\n gather_mem_refs_in_loops (void)\n {\n   gimple_stmt_iterator bsi;\n-  basic_block bb;\n+  basic_block bb, *bbs;\n   struct loop *loop;\n   loop_iterator li;\n   bitmap lrefs, alrefs, alrefso;\n+  unsigned i, n;\n \n+  /* Initialize bb_loop_postorder with a mapping from loop->num to\n+     its postorder index.  */\n+  i = 0;\n+  bb_loop_postorder = XNEWVEC (unsigned, number_of_loops ());\n+  FOR_EACH_LOOP (li, loop, LI_FROM_INNERMOST)\n+    bb_loop_postorder[loop->num] = i++;\n+  /* Collect all basic-blocks in loops and sort them after their\n+     loops postorder.  */\n+  i = 0;\n+  bbs = XNEWVEC (basic_block, n_basic_blocks - NUM_FIXED_BLOCKS);\n   FOR_EACH_BB (bb)\n+    if (bb->loop_father != current_loops->tree_root)\n+      bbs[i++] = bb;\n+  n = i;\n+  qsort (bbs, n, sizeof (basic_block), sort_bbs_in_loop_postorder_cmp);\n+  free (bb_loop_postorder);\n+\n+  /* Visit blocks in loop postorder and assign mem-ref IDs in that order.\n+     That results in better locality for all the bitmaps.  */\n+  for (i = 0; i < n; ++i)\n     {\n-      loop = bb->loop_father;\n-      if (loop == current_loops->tree_root)\n-\tcontinue;\n-\n+      basic_block bb = bbs[i];\n       for (bsi = gsi_start_bb (bb); !gsi_end_p (bsi); gsi_next (&bsi))\n-\tgather_mem_refs_stmt (loop, gsi_stmt (bsi));\n+        gather_mem_refs_stmt (bb->loop_father, gsi_stmt (bsi));\n     }\n \n+  free (bbs);\n+\n   /* Propagate the information about accessed memory references up\n      the loop hierarchy.  */\n   FOR_EACH_LOOP (li, loop, LI_FROM_INNERMOST)"}]}