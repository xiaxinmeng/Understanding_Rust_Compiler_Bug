{"sha": "271bd540d12af3d965059fb09b5311224fb3214c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjcxYmQ1NDBkMTJhZjNkOTY1MDU5ZmIwOWI1MzExMjI0ZmIzMjE0Yw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2003-02-01T13:09:41Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2003-02-01T13:09:41Z"}, "message": "flags.h (flag_volatile): Remove declaration.\n\n\t* flags.h (flag_volatile): Remove declaration.\n\t(flag_volatile_global, flag_volatile_static): Likewise.\n\t* c-typeck.c (build_indirect_ref): Don't check flag_volatile.\n\t* toplev.c (flag_volatile): Remove definition.\n\t(flag_volatile_global, flag_volatile_static): Likewise.\n\t(f_options): Remove corresponding entries here.\n\t* varasm.c (make_decl_rtl): Don't check flag_volatile_global\n\tor flag_volatile_static.\n\t* doc/invoke.texi: Remove documentation of -fvolatile,\n\t-fvolatile-global and -fvolatile-static.\n\ncp/\n\t* typeck.c (build_indirect_ref): Don't check flag_volatile.\n\nada/\n\t* utils2.c (build_unary_op): Don't check flag_volatile.\n\t* gnat_ug.texi: Remove -fvolatile from example.\n\t* gnat_ug_vxw.texi: Likewise.\n\ntestsuite/\n\t* g++.dg/init/new1.C: Remove -fvolatile dg-options line.\n\t* g++.dg/init/new2.C: Likewise.\n\t* g++.dg/other/new1.C: Likewise.\n\nFrom-SVN: r62245", "tree": {"sha": "56f3536f7ec2acc99fd65b1c8562d2b55b676989", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56f3536f7ec2acc99fd65b1c8562d2b55b676989"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/271bd540d12af3d965059fb09b5311224fb3214c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/271bd540d12af3d965059fb09b5311224fb3214c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/271bd540d12af3d965059fb09b5311224fb3214c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/271bd540d12af3d965059fb09b5311224fb3214c/comments", "author": null, "committer": null, "parents": [{"sha": "3123c967cc071b53150074d5cc27dab503244888", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3123c967cc071b53150074d5cc27dab503244888", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3123c967cc071b53150074d5cc27dab503244888"}], "stats": {"total": 110, "additions": 40, "deletions": 70}, "files": [{"sha": "da995372de1e43288001c0052cb2ec1a74eaeb70", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/271bd540d12af3d965059fb09b5311224fb3214c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/271bd540d12af3d965059fb09b5311224fb3214c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=271bd540d12af3d965059fb09b5311224fb3214c", "patch": "@@ -1,3 +1,16 @@\n+2003-02-01  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* flags.h (flag_volatile): Remove declaration.\n+\t(flag_volatile_global, flag_volatile_static): Likewise.\n+\t* c-typeck.c (build_indirect_ref): Don't check flag_volatile.\n+\t* toplev.c (flag_volatile): Remove definition.\n+\t(flag_volatile_global, flag_volatile_static): Likewise.\n+\t(f_options): Remove corresponding entries here.\n+\t* varasm.c (make_decl_rtl): Don't check flag_volatile_global\n+\tor flag_volatile_static.\n+\t* doc/invoke.texi: Remove documentation of -fvolatile,\n+\t-fvolatile-global and -fvolatile-static.\n+\n 2003-01-31  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \t* pa.c (pa_output_function_prologue, pa_output_function_epilogue): Move"}, {"sha": "d5f612dbaa550a285b364ce54576bdf3ef2e3678", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/271bd540d12af3d965059fb09b5311224fb3214c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/271bd540d12af3d965059fb09b5311224fb3214c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=271bd540d12af3d965059fb09b5311224fb3214c", "patch": "@@ -1,3 +1,9 @@\n+2003-02-01  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* utils2.c (build_unary_op): Don't check flag_volatile.\n+\t* gnat_ug.texi: Remove -fvolatile from example.\n+\t* gnat_ug_vxw.texi: Likewise.\n+\n 2003-01-29  Laurent Guerby <guerby@acm.org>\n \n         PR ada/8344"}, {"sha": "be71814bd7e98d1ccbcdf6317dfec197d6b130ab", "filename": "gcc/ada/gnat_ug.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/271bd540d12af3d965059fb09b5311224fb3214c/gcc%2Fada%2Fgnat_ug.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/271bd540d12af3d965059fb09b5311224fb3214c/gcc%2Fada%2Fgnat_ug.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ug.texi?ref=271bd540d12af3d965059fb09b5311224fb3214c", "patch": "@@ -24047,7 +24047,7 @@ For a list of all available switches, refer to the sections describing\n Here is an example that passes the option @code{-v} to the GNAT compiler :\n @smallexample\n -g -mstrict-align -prjtype $(PRJ_TYPE) -ansi -nostdinc -DRW_MULTI_THREAD -D_REENTRANT\n--fvolatile -fno-builtin -fno-for-scope -I. -I/usr/windppc-2.0/target/h -DCPU=PPC604\n+-fno-builtin -fno-for-scope -I. -I/usr/windppc-2.0/target/h -DCPU=PPC604\n -cargs -v\n @end smallexample\n \n@@ -24056,7 +24056,7 @@ Here is an example that passes the option @code{-v} to the GNAT compiler, binder\n and @code{-v} and @code{-g} to the compiler :\n @smallexample\n -g -mstrict-align -prjtype $(PRJ_TYPE) -ansi -nostdinc -DRW_MULTI_THREAD -D_REENTRANT\n--fvolatile -fno-builtin -fno-for-scope -I. -I/usr/windppc-2.0/target/h -DCPU=PPC604\n+-fno-builtin -fno-for-scope -I. -I/usr/windppc-2.0/target/h -DCPU=PPC604\n -cargs -v -g -O2 -bargs -v -largs -v\n @end smallexample\n \n@@ -24065,7 +24065,7 @@ In both examples, the following arguments have been automatically added by the P\n Facility, and will be used by the C compiler.\n @smallexample\n -g -mstrict-align -prjtype $(PRJ_TYPE) -ansi -nostdinc -DRW_MULTI_THREAD -D_REENTRANT\n--fvolatile -fno-builtin -fno-for-scope -I. -I/usr/windppc-2.0/target/h -DCPU=PPC604\n+-fno-builtin -fno-for-scope -I. -I/usr/windppc-2.0/target/h -DCPU=PPC604\n @end smallexample\n \n @noindent"}, {"sha": "0c613047668cec5588bf29d7525b7fbf3c34eedf", "filename": "gcc/ada/gnat_ug_vxw.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/271bd540d12af3d965059fb09b5311224fb3214c/gcc%2Fada%2Fgnat_ug_vxw.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/271bd540d12af3d965059fb09b5311224fb3214c/gcc%2Fada%2Fgnat_ug_vxw.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ug_vxw.texi?ref=271bd540d12af3d965059fb09b5311224fb3214c", "patch": "@@ -19279,7 +19279,7 @@ For a list of all available switches, refer to the sections describing\n Here is an example that passes the option @code{-v} to the GNAT compiler :\n @smallexample\n -g -mstrict-align -prjtype $(PRJ_TYPE) -ansi -nostdinc -DRW_MULTI_THREAD -D_REENTRANT\n--fvolatile -fno-builtin -fno-for-scope -I. -I/usr/windppc-2.0/target/h -DCPU=PPC604\n+-fno-builtin -fno-for-scope -I. -I/usr/windppc-2.0/target/h -DCPU=PPC604\n -cargs -v\n @end smallexample\n \n@@ -19288,7 +19288,7 @@ Here is an example that passes the option @code{-v} to the GNAT compiler, binder\n and @code{-v} and @code{-g} to the compiler :\n @smallexample\n -g -mstrict-align -prjtype $(PRJ_TYPE) -ansi -nostdinc -DRW_MULTI_THREAD -D_REENTRANT\n--fvolatile -fno-builtin -fno-for-scope -I. -I/usr/windppc-2.0/target/h -DCPU=PPC604\n+-fno-builtin -fno-for-scope -I. -I/usr/windppc-2.0/target/h -DCPU=PPC604\n -cargs -v -g -O2 -bargs -v -largs -v\n @end smallexample\n \n@@ -19297,7 +19297,7 @@ In both examples, the following arguments have been automatically added by the P\n Facility, and will be used by the C compiler.\n @smallexample\n -g -mstrict-align -prjtype $(PRJ_TYPE) -ansi -nostdinc -DRW_MULTI_THREAD -D_REENTRANT\n--fvolatile -fno-builtin -fno-for-scope -I. -I/usr/windppc-2.0/target/h -DCPU=PPC604\n+-fno-builtin -fno-for-scope -I. -I/usr/windppc-2.0/target/h -DCPU=PPC604\n @end smallexample\n \n @noindent"}, {"sha": "1d76d91ffd69097ddee241c68fb643028571a1c3", "filename": "gcc/ada/utils2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/271bd540d12af3d965059fb09b5311224fb3214c/gcc%2Fada%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/271bd540d12af3d965059fb09b5311224fb3214c/gcc%2Fada%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils2.c?ref=271bd540d12af3d965059fb09b5311224fb3214c", "patch": "@@ -1275,8 +1275,8 @@ build_unary_op (op_code, result_type, operand)\n \t  TREE_READONLY (result) = TREE_READONLY (TREE_TYPE (type));\n \t}\n \n-      side_effects = flag_volatile \n-\t|| (! TYPE_FAT_POINTER_P (type) && TYPE_VOLATILE (TREE_TYPE (type)));\n+      side_effects = (! TYPE_FAT_POINTER_P (type)\n+\t\t      && TYPE_VOLATILE (TREE_TYPE (type)));\n       break;\n \n     case NEGATE_EXPR:"}, {"sha": "bbd94a044fafba5b26f9bffa148d13e638f7b882", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/271bd540d12af3d965059fb09b5311224fb3214c/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/271bd540d12af3d965059fb09b5311224fb3214c/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=271bd540d12af3d965059fb09b5311224fb3214c", "patch": "@@ -1189,7 +1189,6 @@ build_indirect_ref (ptr, errorstring)\n   if (TREE_CODE (type) == POINTER_TYPE)\n     {\n       if (TREE_CODE (pointer) == ADDR_EXPR\n-\t  && !flag_volatile\n \t  && (TREE_TYPE (TREE_OPERAND (pointer, 0))\n \t      == TREE_TYPE (type)))\n \treturn TREE_OPERAND (pointer, 0);\n@@ -1215,7 +1214,7 @@ build_indirect_ref (ptr, errorstring)\n \t     to change it via some other pointer.  */\n \t  TREE_READONLY (ref) = TYPE_READONLY (t);\n \t  TREE_SIDE_EFFECTS (ref)\n-\t    = TYPE_VOLATILE (t) || TREE_SIDE_EFFECTS (pointer) || flag_volatile;\n+\t    = TYPE_VOLATILE (t) || TREE_SIDE_EFFECTS (pointer);\n \t  TREE_THIS_VOLATILE (ref) = TYPE_VOLATILE (t);\n \t  return ref;\n \t}"}, {"sha": "f3761581b7187b1253ef2a751e0e5325bed330dc", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/271bd540d12af3d965059fb09b5311224fb3214c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/271bd540d12af3d965059fb09b5311224fb3214c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=271bd540d12af3d965059fb09b5311224fb3214c", "patch": "@@ -1,3 +1,7 @@\n+2003-02-01  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* typeck.c (build_indirect_ref): Don't check flag_volatile.\n+\n 2003-01-31  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \tPR c++/8849"}, {"sha": "6d5cc65d6219b2f960f20bb6b85ce391af61d38f", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/271bd540d12af3d965059fb09b5311224fb3214c/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/271bd540d12af3d965059fb09b5311224fb3214c/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=271bd540d12af3d965059fb09b5311224fb3214c", "patch": "@@ -2352,7 +2352,6 @@ build_indirect_ref (ptr, errorstring)\n           return error_mark_node;\n         }\n       else if (TREE_CODE (pointer) == ADDR_EXPR\n-\t       && !flag_volatile\n \t       && same_type_p (t, TREE_TYPE (TREE_OPERAND (pointer, 0))))\n \t/* The POINTER was something like `&x'.  We simplify `*&x' to\n \t   `x'.  */\n@@ -2367,8 +2366,7 @@ build_indirect_ref (ptr, errorstring)\n \t  TREE_READONLY (ref) = CP_TYPE_CONST_P (t);\n \t  TREE_THIS_VOLATILE (ref) = CP_TYPE_VOLATILE_P (t);\n \t  TREE_SIDE_EFFECTS (ref)\n-\t    = (TREE_THIS_VOLATILE (ref) || TREE_SIDE_EFFECTS (pointer)\n-\t       || flag_volatile);\n+\t    = (TREE_THIS_VOLATILE (ref) || TREE_SIDE_EFFECTS (pointer));\n \t  return ref;\n \t}\n     }"}, {"sha": "0b4d1dd8d1de9ced3538afd485bb5ffbb4685814", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/271bd540d12af3d965059fb09b5311224fb3214c/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/271bd540d12af3d965059fb09b5311224fb3214c/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=271bd540d12af3d965059fb09b5311224fb3214c", "patch": "@@ -705,8 +705,7 @@ in the following sections.\n -fno-common  -fno-ident  -fno-gnu-linker @gol\n -fpcc-struct-return  -fpic  -fPIC @gol\n -freg-struct-return  -fshared-data  -fshort-enums @gol\n--fshort-double  -fshort-wchar -fvolatile @gol\n--fvolatile-global  -fvolatile-static @gol\n+-fshort-double  -fshort-wchar @gol\n -fverbose-asm  -fpack-struct  -fstack-check @gol\n -fstack-limit-register=@var{reg}  -fstack-limit-symbol=@var{sym} @gol\n -fargument-alias  -fargument-noalias @gol\n@@ -10752,20 +10751,6 @@ debugging the compiler itself).\n extra information to be omitted and is useful when comparing two assembler\n files.\n \n-@item -fvolatile\n-@opindex fvolatile\n-Consider all memory references through pointers to be volatile.\n-\n-@item -fvolatile-global\n-@opindex fvolatile-global\n-Consider all memory references to extern and global data items to\n-be volatile.  GCC does not consider static data items to be volatile\n-because of this switch.\n-\n-@item -fvolatile-static\n-@opindex fvolatile-static\n-Consider all memory references to static data to be volatile.\n-\n @item -fpic\n @opindex fpic\n @cindex global offset table"}, {"sha": "80ee6a6bbbf439015dbbd8df1aee096642ddab28", "filename": "gcc/flags.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/271bd540d12af3d965059fb09b5311224fb3214c/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/271bd540d12af3d965059fb09b5311224fb3214c/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=271bd540d12af3d965059fb09b5311224fb3214c", "patch": "@@ -337,18 +337,6 @@ extern int flag_omit_frame_pointer;\n \n extern int flag_no_peephole;\n \n-/* Nonzero means all references through pointers are volatile.  */\n-\n-extern int flag_volatile;\n-\n-/* Nonzero means treat all global and extern variables as volatile.  */\n-\n-extern int flag_volatile_global;\n-\n-/* Nonzero means treat all static variables as volatile.  */\n-\n-extern int flag_volatile_static;\n-\n /* Nonzero allows GCC to optimize sibling and tail recursive calls.  */\n \n extern int flag_optimize_sibling_calls;"}, {"sha": "61ed54b391eb2d09bc3650c7239f581382049bc5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/271bd540d12af3d965059fb09b5311224fb3214c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/271bd540d12af3d965059fb09b5311224fb3214c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=271bd540d12af3d965059fb09b5311224fb3214c", "patch": "@@ -1,3 +1,9 @@\n+2003-02-01  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* g++.dg/init/new1.C: Remove -fvolatile dg-options line.\n+\t* g++.dg/init/new2.C: Likewise.\n+\t* g++.dg/other/new1.C: Likewise.\n+\n 2003-01-31  Loren J. Rittle <ljrittle@acm.org>\n \n \t* gcc.dg/struct-ret-libc.c: New test."}, {"sha": "5015d819f7f96fbca9f049c077b258c56559bb8a", "filename": "gcc/testsuite/g++.dg/init/new1.C", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/271bd540d12af3d965059fb09b5311224fb3214c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/271bd540d12af3d965059fb09b5311224fb3214c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew1.C?ref=271bd540d12af3d965059fb09b5311224fb3214c", "patch": "@@ -1,7 +1,6 @@\n // Origin: asharji@uwaterloo.ca\n \n // { dg-do compile }\n-// { dg-options \"-fvolatile\" }\n \n typedef __SIZE_TYPE__ size_t;\n "}, {"sha": "8b207d0a0337c78701dc91cc7e896ee8daaeba15", "filename": "gcc/testsuite/g++.dg/init/new2.C", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/271bd540d12af3d965059fb09b5311224fb3214c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/271bd540d12af3d965059fb09b5311224fb3214c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew2.C?ref=271bd540d12af3d965059fb09b5311224fb3214c", "patch": "@@ -1,7 +1,6 @@\n // Origin: asharji@uwaterloo.ca\n \n // { dg-do compile }\n-// { dg-options \"-fvolatile\" }\n \n class bar {\n   public :"}, {"sha": "5015d819f7f96fbca9f049c077b258c56559bb8a", "filename": "gcc/testsuite/g++.dg/other/new1.C", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/271bd540d12af3d965059fb09b5311224fb3214c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fnew1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/271bd540d12af3d965059fb09b5311224fb3214c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fnew1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fnew1.C?ref=271bd540d12af3d965059fb09b5311224fb3214c", "patch": "@@ -1,7 +1,6 @@\n // Origin: asharji@uwaterloo.ca\n \n // { dg-do compile }\n-// { dg-options \"-fvolatile\" }\n \n typedef __SIZE_TYPE__ size_t;\n "}, {"sha": "f783ed92f738cfa264afd766f14eb5ea14ec91d4", "filename": "gcc/toplev.c", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/271bd540d12af3d965059fb09b5311224fb3214c/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/271bd540d12af3d965059fb09b5311224fb3214c/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=271bd540d12af3d965059fb09b5311224fb3214c", "patch": "@@ -606,18 +606,6 @@ int flag_signaling_nans = 0;\n \n int flag_complex_divide_method = 0;\n \n-/* Nonzero means all references through pointers are volatile.  */\n-\n-int flag_volatile;\n-\n-/* Nonzero means treat all global and extern variables as volatile.  */\n-\n-int flag_volatile_global;\n-\n-/* Nonzero means treat all static variables as volatile.  */\n-\n-int flag_volatile_static;\n-\n /* Nonzero means just do syntax checking; don't output anything.  */\n \n int flag_syntax_only = 0;\n@@ -986,12 +974,6 @@ static const lang_independent_options f_options[] =\n    N_(\"Perform DWARF2 duplicate elimination\") },\n   {\"float-store\", &flag_float_store, 1,\n    N_(\"Do not store floats in registers\") },\n-  {\"volatile\", &flag_volatile, 1,\n-   N_(\"Consider all mem refs through pointers as volatile\") },\n-  {\"volatile-global\", &flag_volatile_global, 1,\n-   N_(\"Consider all mem refs to global data to be volatile\") },\n-  {\"volatile-static\", &flag_volatile_static, 1,\n-   N_(\"Consider all mem refs to static data to be volatile\") },\n   {\"defer-pop\", &flag_defer_pop, 1,\n    N_(\"Defer popping functions args from stack until later\") },\n   {\"omit-frame-pointer\", &flag_omit_frame_pointer, 1,"}, {"sha": "fa6bf2c12b73169084fd90b54f407e645721e1aa", "filename": "gcc/varasm.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/271bd540d12af3d965059fb09b5311224fb3214c/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/271bd540d12af3d965059fb09b5311224fb3214c/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=271bd540d12af3d965059fb09b5311224fb3214c", "patch": "@@ -920,14 +920,6 @@ make_decl_rtl (decl, asmspec)\n       name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n     }\n \n-  /* If this variable is to be treated as volatile, show its\n-     tree node has side effects.  */\n-  if ((flag_volatile_global && TREE_CODE (decl) == VAR_DECL\n-       && TREE_PUBLIC (decl))\n-      || ((flag_volatile_static && TREE_CODE (decl) == VAR_DECL\n-\t   && (TREE_PUBLIC (decl) || TREE_STATIC (decl)))))\n-    TREE_SIDE_EFFECTS (decl) = 1;\n-\n   x = gen_rtx_MEM (DECL_MODE (decl), gen_rtx_SYMBOL_REF (Pmode, name));\n   SYMBOL_REF_WEAK (XEXP (x, 0)) = DECL_WEAK (decl);\n   if (TREE_CODE (decl) != FUNCTION_DECL)"}]}