{"sha": "5b47282c68f4e38146f46b66d5e6d3d90fe25a4d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWI0NzI4MmM2OGY0ZTM4MTQ2ZjQ2YjY2ZDVlNmQzZDkwZmUyNWE0ZA==", "commit": {"author": {"name": "Greg McGary", "email": "greg@mcgary.org", "date": "2000-08-24T20:09:27Z"}, "committer": {"name": "Greg McGary", "email": "gkm@gcc.gnu.org", "date": "2000-08-24T20:09:27Z"}, "message": "tree.h (enum tree_index): New member `TI_MAIN_IDENTIFIER'.\n\n\t* tree.h (enum tree_index): New member `TI_MAIN_IDENTIFIER'.\n\t(MAIN_NAME_P, main_identifier_node): New macros.\n\t* c-common.c (c_common_nodes_and_builtins): Init main_identifier_node.\n\t* c-decl.c (start_decl, grokdeclarator, start_function,\n\tstore_parm_decls, finish_function): Use MAIN_NAME_P.\n\t* config/avr/avr.c (function_prologue, function_epilogue): Likewise.\n\t* config/i386/cygwin.h (SUBTARGET_PROLOGUE): Likewise.\n\t* config/i386/win32.h (SUBTARGET_PROLOGUE): Likewise.\n\t* config/pdp11/pdp11.c (output_function_prologue): Likewise.\n\nFrom-SVN: r35945", "tree": {"sha": "71324c35deb4c607104811c9294afcf32e897922", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71324c35deb4c607104811c9294afcf32e897922"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b47282c68f4e38146f46b66d5e6d3d90fe25a4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b47282c68f4e38146f46b66d5e6d3d90fe25a4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b47282c68f4e38146f46b66d5e6d3d90fe25a4d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b47282c68f4e38146f46b66d5e6d3d90fe25a4d/comments", "author": null, "committer": null, "parents": [{"sha": "87ae0c74eb1e515d6d7c97892fdcaf11db61dea4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87ae0c74eb1e515d6d7c97892fdcaf11db61dea4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87ae0c74eb1e515d6d7c97892fdcaf11db61dea4"}], "stats": {"total": 50, "additions": 32, "deletions": 18}, "files": [{"sha": "b76a4fbb86531c46a592b0e8e4e36b4a3a98a69d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b47282c68f4e38146f46b66d5e6d3d90fe25a4d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b47282c68f4e38146f46b66d5e6d3d90fe25a4d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5b47282c68f4e38146f46b66d5e6d3d90fe25a4d", "patch": "@@ -1,3 +1,15 @@\n+2000-08-24  Greg McGary  <greg@mcgary.org>\n+\n+\t* tree.h (enum tree_index): New member `TI_MAIN_IDENTIFIER'.\n+\t(MAIN_NAME_P, main_identifier_node): New macros.\n+\t* c-common.c (c_common_nodes_and_builtins): Init main_identifier_node.\n+\t* c-decl.c (start_decl, grokdeclarator, start_function,\n+\tstore_parm_decls, finish_function): Use MAIN_NAME_P.\n+\t* config/avr/avr.c (function_prologue, function_epilogue): Likewise.\n+\t* config/i386/cygwin.h (SUBTARGET_PROLOGUE): Likewise.\n+\t* config/i386/win32.h (SUBTARGET_PROLOGUE): Likewise.\n+\t* config/pdp11/pdp11.c (output_function_prologue): Likewise.\n+\n 2000-08-24  Greg McGary  <greg@mcgary.org>\n \n \t* cppfiles.c (actual_directory): Don't write beyond `dir'"}, {"sha": "9af892a1befccdbfb7a2b48215a2b1b8143eaa2c", "filename": "gcc/c-common.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b47282c68f4e38146f46b66d5e6d3d90fe25a4d/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b47282c68f4e38146f46b66d5e6d3d90fe25a4d/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=5b47282c68f4e38146f46b66d5e6d3d90fe25a4d", "patch": "@@ -4182,6 +4182,8 @@ c_common_nodes_and_builtins (cplus_mode, no_builtins, no_nonansi_builtins)\n \t\t    BUILT_IN_NORMAL, NULL_PTR);\n #endif\n \n+  main_identifier_node = get_identifier (\"main\");\n+\n   /* ??? Perhaps there's a better place to do this.  But it is related\n      to __builtin_va_arg, so it isn't that off-the-wall.  */\n   lang_type_promotes_to = simple_type_promotes_to;"}, {"sha": "59b238b9dd32129332ba55024a83ef65f15322b8", "filename": "gcc/c-decl.c", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b47282c68f4e38146f46b66d5e6d3d90fe25a4d/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b47282c68f4e38146f46b66d5e6d3d90fe25a4d/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=5b47282c68f4e38146f46b66d5e6d3d90fe25a4d", "patch": "@@ -3430,7 +3430,7 @@ start_decl (declarator, declspecs, initialized, attributes, prefix_attributes)\n   register tree tem;\n \n   if (warn_main > 0 && TREE_CODE (decl) != FUNCTION_DECL\n-      && !strcmp (IDENTIFIER_POINTER (DECL_NAME (decl)), \"main\"))\n+      && MAIN_NAME_P (DECL_NAME (decl)))\n     warning_with_decl (decl, \"`%s' is usually a function\");\n \n   if (initialized)\n@@ -4827,7 +4827,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n \t/* Record presence of `inline', if it is reasonable.  */\n \tif (inlinep)\n \t  {\n-\t    if (! strcmp (IDENTIFIER_POINTER (declarator), \"main\"))\n+\t    if (MAIN_NAME_P (declarator))\n \t      warning (\"cannot inline function `main'\");\n \t    else\n \t      /* Assume that otherwise the function can be inlined.  */\n@@ -5892,7 +5892,7 @@ start_function (declspecs, declarator, prefix_attributes, attributes)\n   else if (warn_missing_prototypes\n \t   && TREE_PUBLIC (decl1)\n \t   && !(old_decl != 0 && TYPE_ARG_TYPES (TREE_TYPE (old_decl)) != 0)\n-\t   && strcmp (\"main\", IDENTIFIER_POINTER (DECL_NAME (decl1))))\n+\t   && ! MAIN_NAME_P (DECL_NAME (decl1)))\n     warning_with_decl (decl1, \"no previous prototype for `%s'\");\n   /* Optionally warn of any def with no previous prototype\n      if the function has already been used.  */\n@@ -5905,7 +5905,7 @@ start_function (declspecs, declarator, prefix_attributes, attributes)\n   else if (warn_missing_declarations\n \t   && TREE_PUBLIC (decl1)\n \t   && old_decl == 0\n-\t   && strcmp (\"main\", IDENTIFIER_POINTER (DECL_NAME (decl1))))\n+\t   && ! MAIN_NAME_P (DECL_NAME (decl1)))\n     warning_with_decl (decl1, \"no previous declaration for `%s'\");\n   /* Optionally warn of any def with no previous declaration\n      if the function has already been used.  */\n@@ -5934,8 +5934,7 @@ start_function (declspecs, declarator, prefix_attributes, attributes)\n     TREE_PUBLIC (decl1) = 0;\n \n   /* Warn for unlikely, improbable, or stupid declarations of `main'.  */\n-  if (warn_main > 0\n-      && strcmp (\"main\", IDENTIFIER_POINTER (DECL_NAME (decl1))) == 0)\n+  if (warn_main > 0 && MAIN_NAME_P (DECL_NAME (decl1)))\n     {\n       tree args;\n       int argct = 0;\n@@ -6461,7 +6460,7 @@ store_parm_decls ()\n   /* If this function is `main', emit a call to `__main'\n      to run global initializers, etc.  */\n   if (DECL_NAME (fndecl)\n-      && strcmp (IDENTIFIER_POINTER (DECL_NAME (fndecl)), \"main\") == 0\n+      && MAIN_NAME_P (DECL_NAME (fndecl))\n       && DECL_CONTEXT (fndecl) == NULL_TREE)\n     expand_main_function ();\n }\n@@ -6641,8 +6640,7 @@ finish_function (nested)\n       setjmp_protect_args ();\n     }\n \n-  if (! strcmp (IDENTIFIER_POINTER (DECL_NAME (fndecl)), \"main\")\n-      && flag_hosted)\n+  if (MAIN_NAME_P (DECL_NAME (fndecl)) && flag_hosted)\n     {\n       if (TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (fndecl)))\n \t  != integer_type_node)"}, {"sha": "6dec0c5ee7ec425538d2ac65386b5a4f0c045340", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b47282c68f4e38146f46b66d5e6d3d90fe25a4d/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b47282c68f4e38146f46b66d5e6d3d90fe25a4d/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=5b47282c68f4e38146f46b66d5e6d3d90fe25a4d", "patch": "@@ -469,7 +469,7 @@ function_prologue (FILE *file, int size)\n   interrupt_func_p = interrupt_function_p (current_function_decl);\n   signal_func_p = signal_function_p (current_function_decl);\n   leaf_func_p = leaf_function_p ();\n-  main_p = ! strcmp (\"main\", current_function_name);\n+  main_p = MAIN_NAME_P (DECL_NAME (current_function_decl));\n   live_seq = sequent_regs_live ();\n   minimize = (TARGET_CALL_PROLOGUES\n \t      && !interrupt_func_p && !signal_func_p && live_seq);\n@@ -604,7 +604,7 @@ function_epilogue (FILE *file, int size)\n   interrupt_func_p = interrupt_function_p (current_function_decl);\n   signal_func_p = signal_function_p (current_function_decl);\n   leaf_func_p = leaf_function_p ();\n-  main_p = ! strcmp (\"main\", current_function_name);\n+  main_p = MAIN_NAME_P (DECL_NAME (current_function_decl));\n   function_size = (INSN_ADDRESSES (INSN_UID (get_last_insn ()))\n \t\t   - INSN_ADDRESSES (INSN_UID (get_insns ())));\n   live_seq = sequent_regs_live ();\n@@ -3643,7 +3643,7 @@ order_regs_for_local_alloc (void)\n   int *order = (TARGET_ORDER_1 ? order_1 :\n \t\tTARGET_ORDER_2 ? order_2 :\n \t\torder_0);\n-  for (i=0; i < sizeof (order_0) / sizeof (order_0[0]); ++i)\n+  for (i=0; i < ARRAY_SIZE (order_0); ++i)\n       reg_alloc_order[i] = order[i];\n }\n "}, {"sha": "916753d6ef8be8a6a40bd60b729d56428c6afe65", "filename": "gcc/config/i386/cygwin.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b47282c68f4e38146f46b66d5e6d3d90fe25a4d/gcc%2Fconfig%2Fi386%2Fcygwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b47282c68f4e38146f46b66d5e6d3d90fe25a4d/gcc%2Fconfig%2Fi386%2Fcygwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygwin.h?ref=5b47282c68f4e38146f46b66d5e6d3d90fe25a4d", "patch": "@@ -489,8 +489,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #define SUBTARGET_PROLOGUE\t\t\t\t\t\t\\\n   if (profile_flag \t\t\t\t\t\t\t\\\n-      && strcmp (IDENTIFIER_POINTER (DECL_NAME (current_function_decl)),\\\n-\t\t \"main\") == 0)\t\t\t\t\t\t\\\n+      && MAIN_NAME_P (DECL_NAME (current_function_decl)))\t\t\\\n      {\t\t\t\t\t\t\t\t\t\\\n       emit_call_insn (gen_rtx (CALL, VOIDmode, \t\t\t\t\\\n         gen_rtx_MEM (FUNCTION_MODE,\t\t\t\t\t\\"}, {"sha": "bc7619fd8fd40ea30b5978f9a3e65cc2abac57f5", "filename": "gcc/config/i386/win32.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b47282c68f4e38146f46b66d5e6d3d90fe25a4d/gcc%2Fconfig%2Fi386%2Fwin32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b47282c68f4e38146f46b66d5e6d3d90fe25a4d/gcc%2Fconfig%2Fi386%2Fwin32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwin32.h?ref=5b47282c68f4e38146f46b66d5e6d3d90fe25a4d", "patch": "@@ -272,8 +272,7 @@ do {\t\t\t\t\t\t\t\t\\\n \n #define SUBTARGET_PROLOGUE\t\t\t\t\t\t\\\n   if (profile_flag \t\t\t\t\t\t\t\\\n-      && strcmp (IDENTIFIER_POINTER (DECL_NAME (current_function_decl)),\\\n-\t\t \"main\") == 0)\t\t\t\t\t\t\\\n+      && MAIN_NAME_P (DECL_NAME (current_function_decl))\t\t\\\n      {\t\t\t\t\t\t\t\t\t\\\n       rtx xops[1];\t\t\t\t\t\t\t\\\n       xops[0] = gen_rtx_MEM (FUNCTION_MODE,\t\t\t\t\\"}, {"sha": "fc98a8c86f52ea7b49bcd3233aa36f6b5647a044", "filename": "gcc/config/pdp11/pdp11.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b47282c68f4e38146f46b66d5e6d3d90fe25a4d/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b47282c68f4e38146f46b66d5e6d3d90fe25a4d/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.c?ref=5b47282c68f4e38146f46b66d5e6d3d90fe25a4d", "patch": "@@ -110,8 +110,7 @@ output_function_prologue(stream, size)\n \n     /* if we are outputting code for main, \n        the switch FPU to right mode if TARGET_FPU */\n-    if ( (strcmp (\"main\", current_function_name) == 0)\n-\t && TARGET_FPU)\n+    if (MAIN_NAME_P (DECL_NAME (current_function_decl)) && TARGET_FPU)\n     {\n \tfprintf(stream, \"\\t;/* switch cpu to double float, single integer */\\n\");\n \tfprintf(stream, \"\\tsetd\\n\");"}, {"sha": "0adf014970645d8224e4a0316354420bd701d031", "filename": "gcc/tree.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b47282c68f4e38146f46b66d5e6d3d90fe25a4d/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b47282c68f4e38146f46b66d5e6d3d90fe25a4d/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=5b47282c68f4e38146f46b66d5e6d3d90fe25a4d", "patch": "@@ -1745,6 +1745,8 @@ enum tree_index\n   TI_V4HI_TYPE,\n   TI_V2SI_TYPE,\n \n+  TI_MAIN_IDENTIFIER,\n+\n   TI_MAX\n };\n \n@@ -1791,6 +1793,9 @@ extern tree global_trees[TI_MAX];\n #define ptrdiff_type_node\t\tglobal_trees[TI_PTRDIFF_TYPE]\n #define va_list_type_node\t\tglobal_trees[TI_VA_LIST_TYPE]\n \n+#define main_identifier_node\t\tglobal_trees[TI_MAIN_IDENTIFIER]\n+#define MAIN_NAME_P(NODE) (IDENTIFIER_NODE_CHECK (NODE) == main_identifier_node)\n+\n #define V4SF_type_node\t\t\tglobal_trees[TI_V4SF_TYPE]\n #define V4SI_type_node\t\t\tglobal_trees[TI_V4SI_TYPE]\n #define V8QI_type_node\t\t\tglobal_trees[TI_V8QI_TYPE]"}]}