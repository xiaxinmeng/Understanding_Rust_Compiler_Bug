{"sha": "43997608a0887341160d50f83ad2d0159b387aae", "node_id": "C_kwDOANBUbNoAKDQzOTk3NjA4YTA4ODczNDExNjBkNTBmODNhZDJkMDE1OWIzODdhYWU", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-07-13T00:16:33Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-07-13T00:16:33Z"}, "message": "Daily bump.", "tree": {"sha": "fce93a6f0bf95aa8d1d70f6176e7eb0191dd6663", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fce93a6f0bf95aa8d1d70f6176e7eb0191dd6663"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43997608a0887341160d50f83ad2d0159b387aae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43997608a0887341160d50f83ad2d0159b387aae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43997608a0887341160d50f83ad2d0159b387aae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43997608a0887341160d50f83ad2d0159b387aae/comments", "author": null, "committer": null, "parents": [{"sha": "5ae74944af1de032d4a27fad4a2287bd3a2163fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ae74944af1de032d4a27fad4a2287bd3a2163fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ae74944af1de032d4a27fad4a2287bd3a2163fd"}], "stats": {"total": 461, "additions": 460, "deletions": 1}, "files": [{"sha": "88d98389aa00b4613e5cb1714e45f5d21072e21c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43997608a0887341160d50f83ad2d0159b387aae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43997608a0887341160d50f83ad2d0159b387aae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=43997608a0887341160d50f83ad2d0159b387aae", "patch": "@@ -1,3 +1,48 @@\n+2022-07-12  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* range-op.cc (unsigned_singleton_p): Remove.\n+\t(operator_bitwise_and::remove_impossible_ranges): Remove.\n+\t(operator_bitwise_and::fold_range): Set nonzero bits.  *\n+\t* value-range.cc (irange::get_nonzero_bits): Remove\n+\tlegacy_mode_p assert.\n+\t(irange::dump_bitmasks): Remove legacy_mode_p check.\n+\n+2022-07-12  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR target/106253\n+\t* predict.h (insn_optimization_type): Declare.\n+\t* predict.cc (insn_optimization_type): New function.\n+\t* internal-fn.def (IFN_ICEIL, IFN_IFLOOR, IFN_IRINT, IFN_IROUND)\n+\t(IFN_LCEIL, IFN_LFLOOR, IFN_LRINT, IFN_LROUND, IFN_LLCEIL)\n+\t(IFN_LLFLOOR, IFN_LLRINT, IFN_LLROUND): New internal functions.\n+\t* internal-fn.cc (unary_convert_direct): New macro.\n+\t(expand_convert_optab_fn): New function.\n+\t(expand_unary_convert_optab_fn): New macro.\n+\t(direct_unary_convert_optab_supported_p): Likewise.\n+\t* optabs.cc (expand_sfix_optab): Pass insn_optimization_type to\n+\tconvert_optab_handler.\n+\t* config/aarch64/aarch64-protos.h\n+\t(aarch64_builtin_vectorized_function): Delete.\n+\t* config/aarch64/aarch64-builtins.cc\n+\t(aarch64_builtin_vectorized_function): Delete.\n+\t* config/aarch64/aarch64.cc\n+\t(TARGET_VECTORIZE_BUILTIN_VECTORIZED_FUNCTION): Delete.\n+\t* config/i386/i386.cc (ix86_optab_supported_p): Handle lround_optab.\n+\t* config/i386/i386.md (lround<X87MODEF:mode><SWI248x:mode>2): Remove\n+\toptimize_insn_for_size_p test.\n+\n+2022-07-12  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-loop-manip.cc (create_lcssa_for_virtual_phi):\n+\tRemove.\n+\t(vect_do_peeling): Do not call it, adjust comment.\n+\n+2022-07-12  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-builtins.cc\n+\t(aarch64_builtin_vectorized_function): Remove handling of\n+\tfloor, ceil, trunc, round, nearbyint, sqrt, clz and ctz.\n+\n 2022-07-11  Andrew MacLeod  <amacleod@redhat.com>\n \n \tPR tree-optimization/106234"}, {"sha": "e8fa68bf91e6da6e7654003a0182d7f9b05900fe", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43997608a0887341160d50f83ad2d0159b387aae/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43997608a0887341160d50f83ad2d0159b387aae/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=43997608a0887341160d50f83ad2d0159b387aae", "patch": "@@ -1 +1 @@\n-20220712\n+20220713"}, {"sha": "e8ea2a7411379a2bbf82f6177875977dc1550b78", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 328, "deletions": 0, "changes": 328, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43997608a0887341160d50f83ad2d0159b387aae/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43997608a0887341160d50f83ad2d0159b387aae/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=43997608a0887341160d50f83ad2d0159b387aae", "patch": "@@ -1,3 +1,331 @@\n+2022-07-12  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch11.adb (Expand_N_Exception_Declaration): Sync comment\n+\twith declaration in System.Standard_Library.\n+\n+2022-07-12  Marc Poulhi\u00e8s  <poulhies@adacore.com>\n+\n+\t* libgnat/s-secsta.adb (Has_Enough_Free_Memory): Check for full\n+\tchunk before computing the available size.\n+\n+2022-07-12  Steve Baird  <baird@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_Nonbinary_Modular_Op.Expand_Modular_Op):\n+\tReimplement choice of which predefined type to use for the\n+\timplementation of a predefined operation of a modular type with\n+\ta non-power-of-two modulus.\n+\n+2022-07-12  Justin Squirek  <squirek@adacore.com>\n+\n+\t* einfo.ads: Modify documentation for In_Use flag to include\n+\tscope stack manipulation.\n+\t* sem_ch8.adb (Use_One_Type): Add condition to return when\n+\tattempting to detect redundant use_type_clauses in child units\n+\tin certain cases.\n+\n+2022-07-12  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* restrict.ads (type ND_Entry): Add System_Child component.\n+\t(Check_Restriction_No_Dependence_On_System): Declare.\n+\t* restrict.adb (Global_Restriction_No_Tasking): Move around.\n+\t(Violation_Of_No_Dependence): New procedure.\n+\t(Check_Restriction_No_Dependence): Call Violation_Of_No_Dependence\n+\tto report a violation.\n+\t(Check_Restriction_No_Dependence_On_System): New procedure.\n+\t(Set_Restriction_No_Dependenc): Set System_Child component if the\n+\tunit is a child of System.\n+\t* snames.ads-tmpl (Name_Arith_64): New package name.\n+\t(Name_Arith_128): Likewise.\n+\t(Name_Memory): Likewise.\n+\t(Name_Stack_Checking): Likewise.\n+\t* fe.h (Check_Restriction_No_Dependence_On_System): Declare.\n+\n+2022-07-12  Bob Duff  <duff@adacore.com>\n+\n+\t* par.adb (P_Declarative_Items): New function to parse a\n+\tsequence of declarative items.\n+\t(P_Sequence_Of_Statements): Add Handled flag, to indicate\n+\twhether to wrap the result in a block statement.\n+\t* par-ch3.adb (P_Declarative_Item): Rename P_Declarative_Items\n+\tto be P_Declarative_Item, because it really only parses a single\n+\tdeclarative item, and to avoid conflict with the new\n+\tP_Declarative_Items. Add In_Statements.  We keep the old\n+\terror-recovery mechanisms in place when In_Statements is False.\n+\tWhen True, we don't want to complain about statements, because\n+\twe are parsing a sequence of statements.\n+\t(P_Identifier_Declarations): If In_Statements, and we see what\n+\tlooks like a statement, we no longer give an error. We return to\n+\tP_Sequence_Of_Statements with Done = True, so it can parse the\n+\tstatement.\n+\t* par-ch5.adb (P_Sequence_Of_Statements): Call\n+\tP_Declarative_Items to parse declarative items that appear in\n+\tthe statement list.  Remove error handling code that complained\n+\tabout such items.  Check some errors conservatively.  Wrap the\n+\tresult in a block statement when necessary.\n+\t* par-ch11.adb (P_Handled_Sequence_Of_Statements): Pass\n+\tHandled => True to P_Sequence_Of_Statements.\n+\t* types.ads (No, Present): New functions for querying\n+\tSource_Ptrs (equal, not equal No_Location).\n+\n+2022-07-12  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_prag.adb (Process_Restrictions_Or_Restriction_Warnings):\n+\tFix range of iteration.\n+\n+2022-07-12  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_prag.adb (Process_Restrictions_Or_Restriction_Warnings):\n+\tDo not process expression of unknown restrictions.\n+\n+2022-07-12  Vasiliy Fofanov  <fofanov@adacore.com>\n+\n+\t* makeusg.adb,\n+\tdoc/gnat_ugn/building_executable_programs_with_gnat.rst: Move -P\n+\tto the top of switches list and make it clear that gnatmake\n+\tpasses the ball to gprbuild if -P is set.\n+\t* gnat_ugn.texi: Regenerate.\n+\n+2022-07-12  Bob Duff  <duff@adacore.com>\n+\n+\t* libgnat/g-socthi__vxworks.adb (C_Connect): Suppress new warning.\n+\n+2022-07-12  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_attr.adb (Set_Boolean_Result): Simplify using\n+\tBoolean_Literals.\n+\n+2022-07-12  Yannick Moy  <moy@adacore.com>\n+\n+\t* errout.adb (Record_Compilation_Errors): Remove global\n+\tvariable.\n+\t(Compilation_Errors): Simplify.\n+\t(Initialize): Inline Reset_Warnings.\n+\t(Reset_Warnings): Remove.\n+\t* errout.ads (Reset_Warnings): Remove.\n+\t(Compilation_Errors): Update comment.\n+\t* gnat1drv.adb (Adjust_Global_Switches): Ignore all frontend\n+\twarnings in GNATprove mode, except regarding elaboration and\n+\tsuspicious contracts.\n+\n+2022-07-12  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_util.adb (Caller_Known_Size_Record): Make entry assertion\n+\tmore robust and add guard for null argument.  For protected\n+\ttypes, invoke Caller_Known_Size_Record on\n+\tCorresponding_Record_Type.\n+\t(Needs_Secondary_Stack): Likewise.\n+\n+2022-07-12  Doug Rupp  <rupp@adacore.com>\n+\n+\t* libgnat/system-vxworks7-ppc-rtp.ads: Remove\n+\t* libgnat/system-vxworks7-x86-rtp.ads: Likewise.\n+\n+2022-07-12  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch12.adb (Analyze_Package_Instantiation): Remove dubious\n+\tcall to Set_Comes_From_Source.\n+\n+2022-07-12  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_ch5.adb (Check_Unreachable_Code): Refine heuristics.\n+\t* sem_util.ads, sem_util.adb (Is_Static_Constant_Name): Remove\n+\tthis; instead we have a new function Is_Simple_Case in\n+\tSem_Ch5.Check_Unreachable_Code.\n+\n+2022-07-12  Bob Duff  <duff@adacore.com>\n+\n+\t* gnatls.adb (Output_License_Information): Remove pragma\n+\tNo_Return; call sites deal with Exit_Program.\n+\t* libgnat/g-socthi.adb (C_Connect): Suppress warning about\n+\tunreachable code.\n+\t* sem_ch5.adb (Check_Unreachable_Code): Special-case if\n+\tstatements with static conditions.  If we remove unreachable\n+\tcode (including the return statement) from a function, add\n+\t\"raise Program_Error\", so we won't warn about missing returns.\n+\tRemove Original_Node in test for N_Raise_Statement; it's not\n+\tneeded.  Remove test for CodePeer_Mode; if Operating_Mode =\n+\tGenerate_Code, then CodePeer_Mode can't be True.  Misc cleanup.\n+\tDo not reuse Nxt variable for unrelated purpose (the usage in\n+\tthe Kill_Dead_Code loop is entirely local to the loop).\n+\t* sem_ch6.adb: Add check for Is_Transfer. Misc cleanup.\n+\t* sem_prag.adb: Minor.\n+\t* sem_res.adb: Minor.\n+\t* sem_util.adb: Minor cleanup.\n+\t(Is_Trivial_Boolean): Move to nonnested place, so it can be\n+\tcalled from elsewhere.\n+\t(Is_Static_Constant_Boolean): New function.\n+\t* sem_util.ads (Is_Trivial_Boolean): Export.\n+\t(Is_Static_Constant_Boolean): New function.\n+\n+2022-07-12  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* libgnat/s-stchop.ads: Use a double underscore prefix for symbols.\n+\n+2022-07-12  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* freeze.adb (Check_Expression_Function.Find_Constant): Add a\n+\tcheck that a type that is referenced as the prefix of an\n+\tattribute is fully declared.\n+\t(Freeze_And_Append): Do not freeze the profile when freezing an\n+\texpression function.\n+\t(Freeze_Entity): When a tagged type is frozen, also freeze any\n+\tprimitive operations of the type that are expression functions.\n+\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Do not prevent\n+\tfreezing associated with an expression function body if the\n+\tfunction is a dispatching op.\n+\n+2022-07-12  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch7.adb (Analyze_Package_Declaration): Check references to\n+\tunset objects.\n+\n+2022-07-12  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch13.adb (Analyze_Aspect_Yield): Look at the entity kind,\n+\tnot at the declaration kind.\n+\n+2022-07-12  Joffrey Huguet  <huguet@adacore.com>\n+\n+\t* libgnarl/a-reatim.ads, libgnat/a-cfdlli.ads,\n+\tlibgnat/a-cfhama.ads, libgnat/a-cfhase.ads,\n+\tlibgnat/a-cfinse.ads, libgnat/a-cfinve.ads,\n+\tlibgnat/a-cforma.ads, libgnat/a-cforse.ads,\n+\tlibgnat/a-chahan.ads, libgnat/a-cofove.ads,\n+\tlibgnat/a-cofuma.ads, libgnat/a-cofuse.ads,\n+\tlibgnat/a-cofuve.ads, libgnat/a-nbnbin.ads,\n+\tlibgnat/a-nbnbre.ads, libgnat/a-ngelfu.ads,\n+\tlibgnat/a-nlelfu.ads, libgnat/a-nllefu.ads,\n+\tlibgnat/a-nselfu.ads, libgnat/a-nuelfu.ads,\n+\tlibgnat/a-strbou.ads, libgnat/a-strfix.ads,\n+\tlibgnat/a-strmap.ads, libgnat/a-strunb.ads,\n+\tlibgnat/a-strunb__shared.ads,  libgnat/a-strsea.ads,\n+\tlibgnat/a-textio.ads, libgnat/a-tideio.ads,\n+\tlibgnat/a-tienio.ads, libgnat/a-tifiio.ads,\n+\tlibgnat/a-tiflio.ads, libgnat/a-tiinio.ads,\n+\tlibgnat/a-timoio.ads, libgnat/i-c.ads, libgnat/interfac.ads,\n+\tlibgnat/interfac__2020.ads, libgnat/s-atacco.ads,\n+\tlibgnat/s-stoele.ads: Annotate packages and subprograms with\n+\treturning annotations.\n+\n+2022-07-12  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* rtsfind.ads (RE_Id): Remove RE_Str_Concat_Bounds_N values.\n+\t(RE_Unit_Table): Remove RE_Str_Concat_Bounds_N entries.\n+\t* libgnat/s-conca2.ads (Str_Concat_2): Adjust head comment.\n+\t(Str_Concat_Bounds_2): Delete.\n+\t* libgnat/s-conca2.adb (Str_Concat_2): Use the length of the last\n+\tinput to size the last assignment.\n+\t(Str_Concat_Bounds_2): Delete.\n+\t* libgnat/s-conca3.ads (Str_Concat_3): Adjust head comment.\n+\t(Str_Concat_Bounds_3): Delete.\n+\t* libgnat/s-conca3.adb (Str_Concat_3): Use the length of the last\n+\tinput to size the last assignment.\n+\t(Str_Concat_Bounds_3): Delete.\n+\t* libgnat/s-conca4.ads (Str_Concat_4): Adjust head comment.\n+\t(Str_Concat_Bounds_4): Delete.\n+\t* libgnat/s-conca4.adb (Str_Concat_4): Use the length of the last\n+\tinput to size the last assignment.\n+\t(Str_Concat_Bounds_4): Delete.\n+\t* libgnat/s-conca5.ads (Str_Concat_5): Adjust head comment.\n+\t(Str_Concat_Bounds_5): Delete.\n+\t* libgnat/s-conca5.adb (Str_Concat_5): Use the length of the last\n+\tinput to size the last assignment.\n+\t(Str_Concat_Bounds_5): Delete.\n+\t* libgnat/s-conca6.ads (Str_Concat_6): Adjust head comment.\n+\t(Str_Concat_Bounds_6): Delete.\n+\t* libgnat/s-conca6.adb (Str_Concat_6): Use the length of the last\n+\tinput to size the last assignment.\n+\t(Str_Concat_Bounds_6): Delete.\n+\t* libgnat/s-conca7.ads (Str_Concat_7): Adjust head comment.\n+\t(Str_Concat_Bounds_7): Delete.\n+\t* libgnat/s-conca7.adb (Str_Concat_7): Use the length of the last\n+\tinput to size the last assignment.\n+\t(Str_Concat_Bounds_7): Delete.\n+\t* libgnat/s-conca8.ads (Str_Concat_8): Adjust head comment.\n+\t(Str_Concat_Bounds_8): Delete.\n+\t* libgnat/s-conca8.adb (Str_Concat_8): Use the length of the last\n+\tinput to size the last assignment.\n+\t(Str_Concat_Bounds_8): Delete.\n+\t* libgnat/s-conca9.ads (Str_Concat_9): Adjust head comment.\n+\t(Str_Concat_Bounds_9): Delete.\n+\t* libgnat/s-conca9.adb (Str_Concat_9): Use the length of the last\n+\tinput to size the last assignment.\n+\t(Str_Concat_Bounds_9): Delete.\n+\n+2022-07-12  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_ch5.adb (Expand_Iterator_Loop_Over_Array): Use _Next and\n+\t_Previous in the optimized expansion of \"for ... of\".  No longer\n+\tneed to check parameter profiles for these, because the\n+\tleading-underscore names are unique.\n+\t* libgnat/a-convec.ads (_Next, _Previous): Renamings of Next and\n+\tPrevious, to avoid namespace pollution.\n+\t* libgnat/a-cbdlli.ads, libgnat/a-cbhama.ads,\n+\tlibgnat/a-cbhase.ads, libgnat/a-cbmutr.ads,\n+\tlibgnat/a-cborma.ads, libgnat/a-cborse.ads,\n+\tlibgnat/a-cdlili.ads, libgnat/a-cidlli.ads,\n+\tlibgnat/a-cihama.ads, libgnat/a-cihase.ads,\n+\tlibgnat/a-cimutr.ads, libgnat/a-ciorma.ads,\n+\tlibgnat/a-ciorse.ads, libgnat/a-cobove.ads,\n+\tlibgnat/a-cohama.ads, libgnat/a-cohase.ads,\n+\tlibgnat/a-coinve.ads, libgnat/a-comutr.ads,\n+\tlibgnat/a-coorma.ads, libgnat/a-coorse.ads: Likewise.  Also,\n+\tremove duplicated comments -- refer to one comment about _Next,\n+\t_Previous, Pseudo_Reference in libgnat/a-convec.ads. DRY.\n+\t* scng.adb (Scan): Allow leading underscores in identifiers in\n+\tthe run-time library.\n+\t* snames.ads-tmpl (Name_uNext, Name_uPrevious): New names with\n+\tleading underscores.\n+\n+2022-07-12  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch5.adb (Check_Unreachable_Code): Extend suppression to\n+\tcalls with No_Return aspect, but narrow it to functions.\n+\t* sem_res.adb (Resolve_Call): Warn about unreachable code after\n+\tcalls with No_Return.\n+\n+2022-07-12  Bob Duff  <duff@adacore.com>\n+\n+\t* scans.ads: Fix obsolete comments about Tok_Special, and give\n+\tSpecial_Character a predicate assuring it is one of the two\n+\tcharacters used in preprocessing.\n+\t* scng.ads: Clean up comments.\n+\t* scng.adb: Clean up handling of Tok_Special.  Remove comment\n+\tabout '@' (target_name), which doesn't seem very helpful.\n+\tSet_Special_Character will now blow up if given anything other\n+\tthan '#' and '$', because of the predicate on Special_Character;\n+\tit's not clear why it used to say \"when others => null;\".\n+\tRemove Comment_Is_Token, which is not used.\n+\t* scn.ads: Remove commented-out use clause.  Remove redundant\n+\tcomment.\n+\t* ali-util.adb: Use \"is null\" for do-nothing procedures.\n+\t* gprep.adb (Post_Scan): Use \"is null\".\n+\n+2022-07-12  Bob Duff  <duff@adacore.com>\n+\n+\t* libgnarl/s-solita.adb (Task_Termination_Handler_T): Ignore all\n+\texceptions propagated by Specific_Handler.\n+\t* libgnarl/s-tassta.adb, libgnarl/s-taskin.ads: Minor.\n+\n+2022-07-12  Marc Poulhi\u00e8s  <poulhies@adacore.com>\n+\n+\t* sem.adb (Preanalyze): Suppress checks when not in GNATprove\n+\tmode.\n+\t* sem_res.adb (Preanalyze_And_Resolve): Add cross reference in\n+\tcomment to above procedure.\n+\t* sinfo.ads: Typo fix in comment.\n+\n+2022-07-12  Julien Bortolussi  <bortolussi@adacore.com>\n+\n+\t* libgnat/a-cfidll.adb, libgnat/a-cfidll.ads: Implementation\n+\tfiles of the formal unbounded indefinite list.\n+\t* Makefile.rtl, impunit.adb: Take into account the add of the\n+\tnew files.\n+\n+2022-07-12  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_util.adb (Is_Variable): Remove excessive guard.\n+\n 2022-07-06  Piotr Trojanek  <trojanek@adacore.com>\n \n \t* gcc-interface/Make-lang.in (ada/generated/gnatvsn.ads):"}, {"sha": "f13ce094e24d539a00d3a2ac2436b52dc38dbb6e", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43997608a0887341160d50f83ad2d0159b387aae/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43997608a0887341160d50f83ad2d0159b387aae/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=43997608a0887341160d50f83ad2d0159b387aae", "patch": "@@ -1,3 +1,10 @@\n+2022-07-12  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/106049\n+\t* simplify.cc (is_constant_array_expr): A non-zero-sized constant\n+\tarray shall have a non-empty constructor.  When the constructor is\n+\tempty or missing, treat as non-constant.\n+\n 2022-07-04  Tobias Burnus  <tobias@codesourcery.com>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "ea12f2f668da1ab6cfd6adcb7097583b410ff9a8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43997608a0887341160d50f83ad2d0159b387aae/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43997608a0887341160d50f83ad2d0159b387aae/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=43997608a0887341160d50f83ad2d0159b387aae", "patch": "@@ -1,3 +1,36 @@\n+2022-07-12  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/106049\n+\t* gfortran.dg/pack_simplify_1.f90: New test.\n+\n+2022-07-12  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR target/106253\n+\t* gcc.target/aarch64/vect_unary_1.c: Add tests for iroundf,\n+\tllround, iceilf, llceil, ifloorf, llfloor, irintf and llrint.\n+\t* gfortran.dg/vect/pr106253.f: New test.\n+\n+2022-07-12  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* gnat.dg/specs/discr5.ads: Expect new warnings.\n+\t* gnat.dg/specs/empty_variants.ads: Likewise.\n+\t* gnat.dg/specs/pack13.ads: Likewise.\n+\n+2022-07-12  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/vect_unary_1.c: New test.\n+\n+2022-07-12  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* gcc.target/i386/cet-sjlj-6a.c: Cope with --enable-default-pie.\n+\t* gcc.target/i386/cet-sjlj-6b.c: Likewise.\n+\t* gcc.target/i386/fentryname3.c: Likewise.\n+\t* gcc.target/i386/mvc7.c: Likewise.\n+\t* gcc.target/i386/pr24414.c: Likewise.\n+\t* gcc.target/i386/pr93492-3.c: Likewise.\n+\t* gcc.target/i386/pr93492-5.c: Likewise.\n+\t* gcc.target/i386/pr98482-1.c: Likewise.\n+\n 2022-07-11  Roger Sayle  <roger@nextmovesoftware.com>\n \n \t* gcc.target/i386/sse4_1-stv-2.c: New test case, pand."}, {"sha": "ee23c3031299d201116ce4d5424bfa09bb0df93e", "filename": "include/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43997608a0887341160d50f83ad2d0159b387aae/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43997608a0887341160d50f83ad2d0159b387aae/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=43997608a0887341160d50f83ad2d0159b387aae", "patch": "@@ -1,3 +1,10 @@\n+2022-07-12  Martin Liska  <mliska@suse.cz>\n+\n+\t* plugin-api.h (enum linker_api_version): New enum.\n+\t(ld_plugin_get_api_version): New.\n+\t(enum ld_plugin_tag): Add LDPT_GET_API_VERSION.\n+\t(struct ld_plugin_tv): Add tv_get_api_version.\n+\n 2022-07-06  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* gomp-constants.h (OMP_REQUIRES_[...]): Update comment."}, {"sha": "5a836a979f830098523562daf96ed4ff4c2495b4", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43997608a0887341160d50f83ad2d0159b387aae/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43997608a0887341160d50f83ad2d0159b387aae/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=43997608a0887341160d50f83ad2d0159b387aae", "patch": "@@ -1,3 +1,13 @@\n+2022-07-12  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* target.c (gomp_target_init): Added tailing '\\n' to gomp_debug.\n+\n+2022-07-12  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR middle-end/101551\n+\t* testsuite/libgomp.oacc-c-c++-common/reduction-5.c: XFAIL\n+\t'offloading_enabled' diagnostics issue.\n+\n 2022-07-11  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* testsuite/libgomp.oacc-c-c++-common/reduction-5.c: Enhance"}, {"sha": "5f0bbd72445f6029817806d82bf9838378f1a50a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43997608a0887341160d50f83ad2d0159b387aae/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43997608a0887341160d50f83ad2d0159b387aae/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=43997608a0887341160d50f83ad2d0159b387aae", "patch": "@@ -1,3 +1,25 @@\n+2022-07-12  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/106248\n+\t* include/std/istream [C++17] (operator>>(istream&, char*)):\n+\tSet eofbit if we stopped extracting at EOF.\n+\t* testsuite/27_io/basic_istream/extractors_character/char/pr106248.cc:\n+\tNew test.\n+\t* testsuite/27_io/basic_istream/extractors_character/wchar_t/pr106248.cc:\n+\tNew test.\n+\n+2022-07-12  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/stl_iterator.h (__iter_to_alloc_t): Replace\n+\tadd_const_t with const-qualifier.\n+\t* include/bits/utility.h (tuple_element<N, cv T>): Likewise for\n+\tall cv-qualifiers.\n+\t* include/std/type_traits (add_const, add_volatile): Replace\n+\ttypedef-declaration with using-declaration.\n+\t(add_cv): Replace add_const and add_volatile with cv-qualifiers.\n+\t* include/std/variant (variant_alternative<N, cv T>): Replace\n+\tadd_const_t, add_volatile_t and add_cv_t etc. with cv-qualifiers.\n+\n 2022-07-09  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \t* include/std/string: Remove obsolete comment about char_traits.h including"}, {"sha": "42760afc02d6b311c514a052a6dd2eb19ebf14e4", "filename": "lto-plugin/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43997608a0887341160d50f83ad2d0159b387aae/lto-plugin%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43997608a0887341160d50f83ad2d0159b387aae/lto-plugin%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2FChangeLog?ref=43997608a0887341160d50f83ad2d0159b387aae", "patch": "@@ -1,3 +1,10 @@\n+2022-07-12  Martin Liska  <mliska@suse.cz>\n+\n+\t* lto-plugin.c (negotiate_api_version): New.\n+\t(onload): Negotiate API version.\n+\t* Makefile.am: Add -DBASE_VERSION.\n+\t* Makefile.in: Regenerate.\n+\n 2022-07-07  Martin Liska  <mliska@suse.cz>\n \n \tPR lto/106170"}]}