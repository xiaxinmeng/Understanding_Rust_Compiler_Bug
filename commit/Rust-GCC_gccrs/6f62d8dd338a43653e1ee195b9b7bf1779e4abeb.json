{"sha": "6f62d8dd338a43653e1ee195b9b7bf1779e4abeb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmY2MmQ4ZGQzMzhhNDM2NTNlMWVlMTk1YjliN2JmMTc3OWU0YWJlYg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-10-28T14:07:02Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-10-28T15:00:34Z"}, "message": "Ignore ignored operands in vect_get_and_check_slp_defs\n\nThis passes down skip_args to vect_get_and_check_slp_defs to skip\nignored ops there, too and not fail SLP discovery.  This fixes\ngcc.target/aarch64/sve/reduc_strict_5.c\n\n2020-10-28  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vect-slp.c (vect_get_and_check_slp_defs): For skipped\n\targs just push NULLs and vect_uninitialized_def.\n\t(vect_build_slp_tree_2): Allocate skip_args for all ops\n\tand pass it down to vect_get_and_check_slp_defs.", "tree": {"sha": "e0b714ec85b7b12088a9dae5c789867118f38095", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0b714ec85b7b12088a9dae5c789867118f38095"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f62d8dd338a43653e1ee195b9b7bf1779e4abeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f62d8dd338a43653e1ee195b9b7bf1779e4abeb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f62d8dd338a43653e1ee195b9b7bf1779e4abeb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f62d8dd338a43653e1ee195b9b7bf1779e4abeb/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4b9620d56601cfaeb73476b4542a287ec861771", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4b9620d56601cfaeb73476b4542a287ec861771", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4b9620d56601cfaeb73476b4542a287ec861771"}], "stats": {"total": 36, "additions": 26, "deletions": 10}, "files": [{"sha": "c98f747d4a962baab8d8f6d5a7b276845654bfb0", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 26, "deletions": 10, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f62d8dd338a43653e1ee195b9b7bf1779e4abeb/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f62d8dd338a43653e1ee195b9b7bf1779e4abeb/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=6f62d8dd338a43653e1ee195b9b7bf1779e4abeb", "patch": "@@ -413,6 +413,7 @@ vect_def_types_match (enum vect_def_type dta, enum vect_def_type dtb)\n    ok return 0.  */\n static int\n vect_get_and_check_slp_defs (vec_info *vinfo, unsigned char swap,\n+\t\t\t     bool *skip_args,\n \t\t\t     vec<stmt_vec_info> stmts, unsigned stmt_num,\n \t\t\t     vec<slp_oprnd_info> *oprnds_info)\n {\n@@ -507,6 +508,14 @@ vect_get_and_check_slp_defs (vec_info *vinfo, unsigned char swap,\n \t  return -1;\n \t}\n \n+      if (skip_args[i])\n+\t{\n+\t  oprnd_info->def_stmts.quick_push (NULL);\n+\t  oprnd_info->ops.quick_push (NULL_TREE);\n+\t  oprnd_info->first_dt = vect_uninitialized_def;\n+\t  continue;\n+\t}\n+\n       if (def_stmt_info && is_pattern_stmt_p (def_stmt_info))\n \toprnd_info->any_pattern = true;\n \n@@ -589,6 +598,12 @@ vect_get_and_check_slp_defs (vec_info *vinfo, unsigned char swap,\n   /* Now match the operand definition types to that of the first stmt.  */\n   for (i = 0; i < number_of_oprnds;)\n     {\n+      if (skip_args[i])\n+\t{\n+\t  ++i;\n+\t  continue;\n+\t}\n+\n       oprnd_info = (*oprnds_info)[i];\n       dt = dts[i];\n       stmt_vec_info def_stmt_info = oprnd_info->def_stmts[stmt_num];\n@@ -1412,7 +1427,8 @@ vect_build_slp_tree_2 (vec_info *vinfo, slp_tree node,\n \n   /* If the SLP node is a PHI (induction or reduction), terminate\n      the recursion.  */\n-  bool skip_args[2] = { false, false };\n+  bool *skip_args = XALLOCAVEC (bool, nops);\n+  memset (skip_args, 0, nops);\n   if (loop_vec_info loop_vinfo = dyn_cast <loop_vec_info> (vinfo))\n     if (gphi *stmt = dyn_cast <gphi *> (stmt_info->stmt))\n       {\n@@ -1557,7 +1573,7 @@ vect_build_slp_tree_2 (vec_info *vinfo, slp_tree node,\n   slp_oprnd_info oprnd_info;\n   FOR_EACH_VEC_ELT (stmts, i, stmt_info)\n     {\n-      int res = vect_get_and_check_slp_defs (vinfo, swap[i],\n+      int res = vect_get_and_check_slp_defs (vinfo, swap[i], skip_args,\n \t\t\t\t\t     stmts, i, &oprnds_info);\n       if (res != 0)\n \tmatches[(res == -1) ? 0 : i] = false;\n@@ -1582,19 +1598,19 @@ vect_build_slp_tree_2 (vec_info *vinfo, slp_tree node,\n       slp_tree child;\n       unsigned int j;\n \n-      if (oprnd_info->first_dt == vect_uninitialized_def)\n+      /* We're skipping certain operands from processing, for example\n+\t outer loop reduction initial defs.  */\n+      if (skip_args[i])\n \t{\n-\t  /* COND_EXPR have one too many eventually if the condition\n-\t     is a SSA name.  */\n-\t  gcc_assert (i == 3 && nops == 4);\n+\t  children.safe_push (NULL);\n \t  continue;\n \t}\n \n-      /* We're skipping certain operands from processing, for example\n-\t outer loop reduction initial defs.  */\n-      if (i <= 1 && skip_args[i])\n+      if (oprnd_info->first_dt == vect_uninitialized_def)\n \t{\n-\t  children.safe_push (NULL);\n+\t  /* COND_EXPR have one too many eventually if the condition\n+\t     is a SSA name.  */\n+\t  gcc_assert (i == 3 && nops == 4);\n \t  continue;\n \t}\n "}]}