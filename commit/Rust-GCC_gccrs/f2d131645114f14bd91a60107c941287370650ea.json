{"sha": "f2d131645114f14bd91a60107c941287370650ea", "node_id": "C_kwDOANBUbNoAKGYyZDEzMTY0NTExNGYxNGJkOTFhNjAxMDdjOTQxMjg3MzcwNjUwZWE", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2022-02-07T12:55:12Z"}, "committer": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2022-02-07T12:56:54Z"}, "message": "AArch32: correct usdot-product RTL patterns.\n\nThere was a bug in the ACLE specication for dot product which has now\nbeen fixed[1].  This means some intrinsics were missing and are added by this\npatch.\n\nBootstrapped and regtested on arm-none-linux-gnueabihf and no issues.\n\nOk for master?\n\n[1] https://github.com/ARM-software/acle/releases/tag/r2021Q3\n\ngcc/ChangeLog:\n\n\t* config/arm/arm_neon.h (vusdotq_s32, vusdot_laneq_s32,\n\tvusdotq_laneq_s32, vsudot_laneq_s32, vsudotq_laneq_s32): New\n\t* config/arm/arm_neon_builtins.def (usdot): Add V16QI.\n\t(usdot_laneq, sudot_laneq): New.\n\t* config/arm/neon.md (neon_<sup>dot_laneq<vsi2qi>): New.\n\t(neon_<sup>dot_lane<vsi2qi>): Remote unneeded code.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/simd/vdot-2-1.c: Add new tests.\n\t* gcc.target/arm/simd/vdot-2-2.c: Likewise and fix output.", "tree": {"sha": "250804b5353a15c0789949a5f35734b51b09ed4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/250804b5353a15c0789949a5f35734b51b09ed4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2d131645114f14bd91a60107c941287370650ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2d131645114f14bd91a60107c941287370650ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2d131645114f14bd91a60107c941287370650ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2d131645114f14bd91a60107c941287370650ea/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12aae3b93aeae50f5ced1bbef57fe207ecd12930", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12aae3b93aeae50f5ced1bbef57fe207ecd12930", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12aae3b93aeae50f5ced1bbef57fe207ecd12930"}], "stats": {"total": 190, "additions": 185, "deletions": 5}, "files": [{"sha": "b30d04cab2498eba118f916e43f983b58a94db24", "filename": "gcc/config/arm/arm_neon.h", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d131645114f14bd91a60107c941287370650ea/gcc%2Fconfig%2Farm%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d131645114f14bd91a60107c941287370650ea/gcc%2Fconfig%2Farm%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_neon.h?ref=f2d131645114f14bd91a60107c941287370650ea", "patch": "@@ -18930,6 +18930,13 @@ vusdot_s32 (int32x2_t __r, uint8x8_t __a, int8x8_t __b)\n   return __builtin_neon_usdotv8qi_ssus (__r, __a, __b);\n }\n \n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vusdotq_s32 (int32x4_t __r, uint8x16_t __a, int8x16_t __b)\n+{\n+  return __builtin_neon_usdotv16qi_ssus (__r, __a, __b);\n+}\n+\n __extension__ extern __inline int32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vusdot_lane_s32 (int32x2_t __r, uint8x8_t __a,\n@@ -18962,6 +18969,38 @@ vsudotq_lane_s32 (int32x4_t __r, int8x16_t __a,\n   return __builtin_neon_sudot_lanev16qi_sssus (__r, __a, __b, __index);\n }\n \n+__extension__ extern __inline int32x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vusdot_laneq_s32 (int32x2_t __r, uint8x8_t __a,\n+\t\t  int8x16_t __b, const int __index)\n+{\n+  return __builtin_neon_usdot_laneqv8qi_ssuss (__r, __a, __b, __index);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vusdotq_laneq_s32 (int32x4_t __r, uint8x16_t __a,\n+\t\t   int8x16_t __b, const int __index)\n+{\n+  return __builtin_neon_usdot_laneqv16qi_ssuss (__r, __a, __b, __index);\n+}\n+\n+__extension__ extern __inline int32x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vsudot_laneq_s32 (int32x2_t __r, int8x8_t __a,\n+\t\t  uint8x16_t __b, const int __index)\n+{\n+  return __builtin_neon_sudot_laneqv8qi_sssus (__r, __a, __b, __index);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vsudotq_laneq_s32 (int32x4_t __r, int8x16_t __a,\n+\t\t   uint8x16_t __b, const int __index)\n+{\n+  return __builtin_neon_sudot_laneqv16qi_sssus (__r, __a, __b, __index);\n+}\n+\n #pragma GCC pop_options\n \n #pragma GCC pop_options"}, {"sha": "445b2bf0afe9a36b47de0121374b0c5524ed45d2", "filename": "gcc/config/arm/arm_neon_builtins.def", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d131645114f14bd91a60107c941287370650ea/gcc%2Fconfig%2Farm%2Farm_neon_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d131645114f14bd91a60107c941287370650ea/gcc%2Fconfig%2Farm%2Farm_neon_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_neon_builtins.def?ref=f2d131645114f14bd91a60107c941287370650ea", "patch": "@@ -345,9 +345,11 @@ VAR2 (UMAC_LANE, udot_lane, v8qi, v16qi)\n VAR2 (MAC_LANE, sdot_laneq, v8qi, v16qi)\n VAR2 (UMAC_LANE, udot_laneq, v8qi, v16qi)\n \n-VAR1 (USTERNOP, usdot, v8qi)\n+VAR2 (USTERNOP, usdot, v8qi, v16qi)\n VAR2 (USMAC_LANE_QUADTUP, usdot_lane, v8qi, v16qi)\n VAR2 (SUMAC_LANE_QUADTUP, sudot_lane, v8qi, v16qi)\n+VAR2 (USMAC_LANE_QUADTUP, usdot_laneq, v8qi, v16qi)\n+VAR2 (SUMAC_LANE_QUADTUP, sudot_laneq, v8qi, v16qi)\n \n VAR4 (BINOP, vcadd90, v4hf, v2sf, v8hf, v4sf)\n VAR4 (BINOP, vcadd270, v4hf, v2sf, v8hf, v4sf)"}, {"sha": "2b9a3de65427316c61939ba727e9209ac0ea055a", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d131645114f14bd91a60107c941287370650ea/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d131645114f14bd91a60107c941287370650ea/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=f2d131645114f14bd91a60107c941287370650ea", "patch": "@@ -2977,9 +2977,33 @@\n \t    DOTPROD_I8MM)\n \t  (match_operand:VCVTI 1 \"register_operand\" \"0\")))]\n   \"TARGET_I8MM\"\n+  \"v<sup>dot.<opsuffix>\\\\t%<V_reg>0, %<V_reg>2, %P3[%c4]\"\n+  [(set_attr \"type\" \"neon_dot<q>\")]\n+)\n+\n+;; These instructions map to the __builtins for the Dot Product\n+;; indexed operations in the v8.6 I8MM extension.\n+(define_insn \"neon_<sup>dot_laneq<vsi2qi>\"\n+  [(set (match_operand:VCVTI 0 \"register_operand\" \"=w\")\n+\t(plus:VCVTI\n+\t  (unspec:VCVTI [(match_operand:<VSI2QI> 2 \"register_operand\" \"w\")\n+\t\t\t (match_operand:V16QI 3 \"register_operand\" \"t\")\n+\t\t\t (match_operand:SI 4 \"immediate_operand\" \"i\")]\n+\t\t\t DOTPROD_I8MM)\n+\t  (match_operand:VCVTI 1 \"register_operand\" \"0\")))]\n+  \"TARGET_I8MM\"\n   {\n-    operands[4] = GEN_INT (INTVAL (operands[4]));\n-    return \"v<sup>dot.<opsuffix>\\\\t%<V_reg>0, %<V_reg>2, %P3[%c4]\";\n+    int lane = INTVAL (operands[4]);\n+    if (lane > GET_MODE_NUNITS (V2SImode) - 1)\n+      {\n+\toperands[4] = GEN_INT (lane - GET_MODE_NUNITS (V2SImode));\n+\treturn \"v<sup>dot.<opsuffix>\\\\t%<V_reg>0, %<V_reg>2, %f3[%c4]\";\n+      }\n+    else\n+      {\n+\toperands[4] = GEN_INT (lane);\n+\treturn \"v<sup>dot.<opsuffix>\\\\t%<V_reg>0, %<V_reg>2, %e3[%c4]\";\n+      }\n   }\n   [(set_attr \"type\" \"neon_dot<q>\")]\n )"}, {"sha": "35d713f6a60d3d5880ddc8b43e238b7403b4f135", "filename": "gcc/testsuite/gcc.target/arm/simd/vdot-2-1.c", "status": "modified", "additions": 58, "deletions": 1, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d131645114f14bd91a60107c941287370650ea/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fvdot-2-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d131645114f14bd91a60107c941287370650ea/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fvdot-2-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fvdot-2-1.c?ref=f2d131645114f14bd91a60107c941287370650ea", "patch": "@@ -2,7 +2,7 @@\n /* { dg-require-effective-target arm_hard_ok } */\n /* { dg-require-effective-target arm_v8_2a_i8mm_ok } */\n /* { dg-add-options arm_v8_2a_i8mm }  */\n-/* { dg-additional-options \"-O -save-temps -mfloat-abi=hard\" } */\n+/* { dg-additional-options \"-O -save-temps -mfloat-abi=hard -mfpu=auto\" } */\n /* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include <arm_neon.h>\n@@ -20,6 +20,17 @@ int32x2_t usfoo (int32x2_t r, uint8x8_t x, int8x8_t y)\n   return vusdot_s32 (r, x, y);\n }\n \n+/*\n+**usfooq:\n+**\t...\n+**\tvusdot\\.s8\tq0, q1, q2\n+**\tbx\tlr\n+*/\n+int32x4_t usfooq (int32x4_t r, uint8x16_t x, int8x16_t y)\n+{\n+  return vusdotq_s32 (r, x, y);\n+}\n+\n /*\n **usfoo_lane:\n **\t...\n@@ -66,6 +77,52 @@ int32x4_t sfooq_lane (int32x4_t r, int8x16_t x, uint8x8_t y)\n   return vsudotq_lane_s32 (r, x, y, 1);\n }\n \n+/*\n+**usfoo_laneq:\n+**\t...\n+**\tvusdot\\.s8\td0, d1, d3\\[0\\]\n+**\tbx\tlr\n+*/\n+int32x2_t usfoo_laneq (int32x2_t r, uint8x8_t x, int8x16_t y)\n+{\n+  return vusdot_laneq_s32 (r, x, y, 2);\n+}\n+\n+/*\n+**usfooq_laneq:\n+**\t...\n+**\tvusdot\\.s8\tq0, q1, d5\\[1\\]\n+**\tbx\tlr\n+*/\n+int32x4_t usfooq_laneq (int32x4_t r, uint8x16_t x, int8x16_t y)\n+{\n+  return vusdotq_laneq_s32 (r, x, y, 3);\n+}\n+\n+/* Signed-Unsigned Dot Product instructions.  */\n+\n+/*\n+**sfoo_laneq:\n+**\t...\n+**\tvsudot\\.u8\td0, d1, d3\\[0\\]\n+**\tbx\tlr\n+*/\n+int32x2_t sfoo_laneq (int32x2_t r, int8x8_t x, uint8x16_t y)\n+{\n+  return vsudot_laneq_s32 (r, x, y, 2);\n+}\n+\n+/*\n+**sfooq_laneq:\n+**\t...\n+**\tvsudot\\.u8\tq0, q1, d5\\[1\\]\n+**\tbx\tlr\n+*/\n+int32x4_t sfooq_laneq (int32x4_t r, int8x16_t x, uint8x16_t y)\n+{\n+  return vsudotq_laneq_s32 (r, x, y, 3);\n+}\n+\n /*\n **usfoo_untied:\n **\t..."}, {"sha": "c57dd423dbc45b2f9f7890ada0f081f80381b05c", "filename": "gcc/testsuite/gcc.target/arm/simd/vdot-2-2.c", "status": "modified", "additions": 59, "deletions": 1, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d131645114f14bd91a60107c941287370650ea/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fvdot-2-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d131645114f14bd91a60107c941287370650ea/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fvdot-2-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fvdot-2-2.c?ref=f2d131645114f14bd91a60107c941287370650ea", "patch": "@@ -2,7 +2,7 @@\n /* { dg-require-effective-target arm_hard_ok } */\n /* { dg-require-effective-target arm_v8_2a_i8mm_ok } */\n /* { dg-add-options arm_v8_2a_i8mm }  */\n-/* { dg-additional-options \"-O -save-temps -mbig-endian -mfloat-abi=hard\" } */\n+/* { dg-additional-options \"-O -save-temps -mfloat-abi=hard -mbig-endian -mfpu=auto\" } */\n /* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include <arm_neon.h>\n@@ -20,6 +20,17 @@ int32x2_t usfoo (int32x2_t r, uint8x8_t x, int8x8_t y)\n   return vusdot_s32 (r, x, y);\n }\n \n+/*\n+**usfooq:\n+**\t...\n+**\tvusdot\\.s8\tq0, q1, q2\n+**\tbx\tlr\n+*/\n+int32x4_t usfooq (int32x4_t r, uint8x16_t x, int8x16_t y)\n+{\n+  return vusdotq_s32 (r, x, y);\n+}\n+\n /*\n **usfoo_lane:\n **\t...\n@@ -66,6 +77,52 @@ int32x4_t sfooq_lane (int32x4_t r, int8x16_t x, uint8x8_t y)\n   return vsudotq_lane_s32 (r, x, y, 1);\n }\n \n+/*\n+**usfoo_laneq:\n+**\t...\n+**\tvusdot\\.s8\td0, d1, d3\\[0\\]\n+**\tbx\tlr\n+*/\n+int32x2_t usfoo_laneq (int32x2_t r, uint8x8_t x, int8x16_t y)\n+{\n+  return vusdot_laneq_s32 (r, x, y, 2);\n+}\n+\n+/*\n+**usfooq_laneq:\n+**\t...\n+**\tvusdot\\.s8\tq0, q1, d5\\[1\\]\n+**\tbx\tlr\n+*/\n+int32x4_t usfooq_laneq (int32x4_t r, uint8x16_t x, int8x16_t y)\n+{\n+  return vusdotq_laneq_s32 (r, x, y, 3);\n+}\n+\n+/* Signed-Unsigned Dot Product instructions.  */\n+\n+/*\n+**sfoo_laneq:\n+**\t...\n+**\tvsudot\\.u8\td0, d1, d3\\[0\\]\n+**\tbx\tlr\n+*/\n+int32x2_t sfoo_laneq (int32x2_t r, int8x8_t x, uint8x16_t y)\n+{\n+  return vsudot_laneq_s32 (r, x, y, 2);\n+}\n+\n+/*\n+**sfooq_laneq:\n+**\t...\n+**\tvsudot\\.u8\tq0, q1, d5\\[1\\]\n+**\tbx\tlr\n+*/\n+int32x4_t sfooq_laneq (int32x4_t r, int8x16_t x, uint8x16_t y)\n+{\n+  return vsudotq_laneq_s32 (r, x, y, 3);\n+}\n+\n /*\n **usfoo_untied:\n **\t...\n@@ -89,3 +146,4 @@ int32x2_t usfoo_lane_untied (int32x2_t unused, int32x2_t r, uint8x8_t x, int8x8_\n {\n   return vusdot_lane_s32 (r, x, y, 0);\n }\n+"}]}