{"sha": "73d73b480363b6809af94db86468f68b88d54e52", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzNkNzNiNDgwMzYzYjY4MDlhZjk0ZGI4NjQ2OGY2OGI4OGQ1NGU1Mg==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@redhat.com", "date": "2016-06-08T11:41:54Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2016-06-08T11:41:54Z"}, "message": "re PR debug/71432 (-fcompare-debug failure (length))\n\n\tPR debug/71432\n\tPR ada/71413\n\t* tree-ssa-strlen.c (handle_builtin_memcmp): Ignore debug insns.\n\n\t* g++.dg/debug/pr71432.C: New test.\n\nFrom-SVN: r237208", "tree": {"sha": "83332f8f99a5b020a773efc4a68e6eef9266e1a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83332f8f99a5b020a773efc4a68e6eef9266e1a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73d73b480363b6809af94db86468f68b88d54e52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73d73b480363b6809af94db86468f68b88d54e52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73d73b480363b6809af94db86468f68b88d54e52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73d73b480363b6809af94db86468f68b88d54e52/comments", "author": null, "committer": null, "parents": [{"sha": "bdd15d0c8e23904cc6feb137d54b29821a2f188d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdd15d0c8e23904cc6feb137d54b29821a2f188d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdd15d0c8e23904cc6feb137d54b29821a2f188d"}], "stats": {"total": 154, "additions": 154, "deletions": 0}, "files": [{"sha": "df5b0dffae5965c51c183032f8e3601a955a7035", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73d73b480363b6809af94db86468f68b88d54e52/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73d73b480363b6809af94db86468f68b88d54e52/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=73d73b480363b6809af94db86468f68b88d54e52", "patch": "@@ -1,3 +1,9 @@\n+2016-06-08  Bernd Schmidt  <bschmidt@redhat.com>\n+\n+\tPR debug/71432\n+\tPR ada/71413\n+\t* tree-ssa-strlen.c (handle_builtin_memcmp): Ignore debug insns.\n+\n 2016-06-08  Jiong Wang  <jiong.wang@arm.com>\n \n \t* config/aarch64/aarch64-builtins.def (faddp): New builtins for modes in"}, {"sha": "b40b6c015f9a9332164da02d526fec26bd0a5a51", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73d73b480363b6809af94db86468f68b88d54e52/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73d73b480363b6809af94db86468f68b88d54e52/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=73d73b480363b6809af94db86468f68b88d54e52", "patch": "@@ -1,3 +1,9 @@\n+2016-06-08  Bernd Schmidt  <bschmidt@redhat.com>\n+\n+\tPR debug/71432\n+\tPR ada/71413\n+\t* g++.dg/debug/pr71432.C: New test.\n+\n 2016-06-08  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n \n \t* gcc.dg/vect/section-anchors-vect-70.c: Rename to aligned-section-anchors-vect-71.c."}, {"sha": "63563310a3aec1ef6e5a912df3806c3b1baf211b", "filename": "gcc/testsuite/g++.dg/debug/pr71432.C", "status": "added", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73d73b480363b6809af94db86468f68b88d54e52/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fpr71432.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73d73b480363b6809af94db86468f68b88d54e52/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fpr71432.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fpr71432.C?ref=73d73b480363b6809af94db86468f68b88d54e52", "patch": "@@ -0,0 +1,140 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fcompare-debug\" } */\n+\n+namespace std\n+{\n+  typedef long unsigned int size_t;\n+  inline namespace __cxx11\n+  {\n+  } }\n+\n+extern \"C++\"\n+{\n+  namespace std\n+  {\n+    template < typename _Tp > struct __is_char\n+    {\n+    };\n+    template <> struct __is_char <char >\n+    {\n+      enum\n+\t{ __value = 1 };\n+    };\n+  } namespace __gnu_cxx\n+  {\n+    template < bool, typename > struct __enable_if\n+    {\n+    };\n+    template < typename _Tp > struct __enable_if <true, _Tp >\n+    {\n+      typedef _Tp __type;\n+    };\n+  }\n+}\n+\n+namespace __gnu_cxx\n+{\n+  template < typename _Tp > class new_allocator\n+  {\n+  };\n+}\n+\n+namespace std\n+{\n+  template < typename _Tp > using __allocator_base =\n+    __gnu_cxx::new_allocator < _Tp >;\n+template < typename _Tp > class allocator:public __allocator_base < _Tp >\n+  {\n+  };\n+  template < typename _Alloc > struct allocator_traits\n+  {\n+  };\n+  template < typename _Tp > struct allocator_traits <allocator < _Tp >>\n+  {\n+    using size_type = std::size_t;\n+    template < typename _Up > using rebind_alloc = allocator < _Up >;\n+  };\n+}\n+\n+namespace __gnu_cxx\n+{\n+  template < typename _Alloc > struct __alloc_traits:std::allocator_traits <_Alloc >\n+  {\n+    typedef std::allocator_traits < _Alloc > _Base_type;\n+     template < typename _Tp > struct rebind\n+    {\n+      typedef typename _Base_type::template rebind_alloc < _Tp > other;\n+     };\n+   };\n+}\n+\n+namespace std\n+{\n+  template < class _CharT > struct char_traits;\n+  namespace __cxx11\n+  {\n+    template < typename _CharT, typename _Traits =\n+      char_traits < _CharT >, typename _Alloc =\n+      allocator < _CharT > >class basic_string;\n+    typedef basic_string < char >string;\n+  }\n+}\n+\n+namespace std\n+{\n+  template <> struct char_traits <char >\n+  {\n+    typedef char char_type;\n+     static int compare (const char_type * __s1, const char_type * __s2,\n+\t\t\t  size_t __n)\n+    {\n+      return __builtin_memcmp (__s1, __s2, __n);\n+    }\n+  };\n+\n+  namespace __cxx11\n+  {\n+    template < typename _CharT, typename _Traits, typename _Alloc >\n+    class basic_string\n+    {\n+      typedef typename __gnu_cxx::__alloc_traits <_Alloc >::template rebind < _CharT >::other _Char_alloc_type;\n+      typedef __gnu_cxx::__alloc_traits < _Char_alloc_type > _Alloc_traits;\n+      typedef typename _Alloc_traits::size_type size_type;\n+\n+    public:\n+      size_type size ()const noexcept\n+      {\n+      }\n+      const _CharT *data () const noexcept\n+      {\n+      }\n+    };\n+  }\n+\n+  template < typename _CharT > inline typename __gnu_cxx::__enable_if <\n+    __is_char < _CharT >::__value,\n+    bool >::__type operator== (const basic_string < _CharT > &__lhs,\n+\t\t\t       const basic_string < _CharT > &__rhs) noexcept\n+  {\n+    return !std::char_traits < _CharT >::compare (__lhs.data (),\n+\t\t\t\t\t\t   __rhs.data (),\n+\t\t\t\t\t\t   __lhs.size ());\n+  }\n+};\n+\n+class CLIParameterType\n+{\n+  const std::string & getSwitchOption (unsigned int i) const\n+  {\n+  } unsigned int getSwitchOptionCount () const\n+  {\n+  } int checkSwitched (const std::string & value) const;\n+};\n+\n+int\n+CLIParameterType::checkSwitched (const std::string & value) const\n+{\n+  int contains = false;\n+  for (unsigned int i = 0; !contains && i < getSwitchOptionCount () ;)\n+    contains = getSwitchOption (i) == value;\n+}"}, {"sha": "700d6ce2bdbf24698b774b2df4a046019c87ea07", "filename": "gcc/tree-ssa-strlen.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73d73b480363b6809af94db86468f68b88d54e52/gcc%2Ftree-ssa-strlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73d73b480363b6809af94db86468f68b88d54e52/gcc%2Ftree-ssa-strlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.c?ref=73d73b480363b6809af94db86468f68b88d54e52", "patch": "@@ -1867,6 +1867,8 @@ handle_builtin_memcmp (gimple_stmt_iterator *gsi)\n     {\n       gimple *ustmt = USE_STMT (use_p);\n \n+      if (is_gimple_debug (ustmt))\n+\tcontinue;\n       if (gimple_code (ustmt) == GIMPLE_ASSIGN)\n \t{\n \t  gassign *asgn = as_a <gassign *> (ustmt);"}]}