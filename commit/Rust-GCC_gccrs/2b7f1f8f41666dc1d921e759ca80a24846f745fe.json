{"sha": "2b7f1f8f41666dc1d921e759ca80a24846f745fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmI3ZjFmOGY0MTY2NmRjMWQ5MjFlNzU5Y2E4MGEyNDg0NmY3NDVmZQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2003-03-17T00:45:37Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2003-03-17T00:45:37Z"}, "message": "resolve.cc (ncode): Use _Jv_platform_ffi_abi.\n\n\t* resolve.cc (ncode): Use _Jv_platform_ffi_abi.\n\tInclude platform.h.\n\t* java/lang/natRuntime.cc (insertSystemProperties): Use\n\t_Jv_platform_path_separator.\n\t(nativeGetLibname): Use _Jv_platform_file_separator.\n\t(_load): Use _Jv_platform_onload_names.\n\t(onload_names): New global.\n\t* include/win32.h (_Jv_platform_file_separator): New define.\n\t(_Jv_platform_path_separator): Likewise.\n\t(_Jv_platform_onload_names): Likewise.\n\t(_Jv_platform_ffi_abi): Likewise.\n\t* include/posix.h (_Jv_platform_file_separator): New define.\n\t(_Jv_platform_path_separator): Likewise.\n\t(_Jv_platform_onload_names): Likewise.\n\t(_Jv_platform_ffi_abi): Likewise.\n\nFrom-SVN: r64461", "tree": {"sha": "9c8375299ef6ce318b2eb397da5d0658a1f7d5e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c8375299ef6ce318b2eb397da5d0658a1f7d5e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b7f1f8f41666dc1d921e759ca80a24846f745fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b7f1f8f41666dc1d921e759ca80a24846f745fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b7f1f8f41666dc1d921e759ca80a24846f745fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b7f1f8f41666dc1d921e759ca80a24846f745fe/comments", "author": null, "committer": null, "parents": [{"sha": "01cca2d84d09910e5033d1151f4bceb0d1bb5c82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01cca2d84d09910e5033d1151f4bceb0d1bb5c82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01cca2d84d09910e5033d1151f4bceb0d1bb5c82"}], "stats": {"total": 95, "additions": 63, "deletions": 32}, "files": [{"sha": "3aadf49bdf3874e220f2e7cca7db71cf76df3371", "filename": "libjava/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b7f1f8f41666dc1d921e759ca80a24846f745fe/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b7f1f8f41666dc1d921e759ca80a24846f745fe/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=2b7f1f8f41666dc1d921e759ca80a24846f745fe", "patch": "@@ -1,3 +1,21 @@\n+2003-03-16  Tom Tromey  <tromey@redhat.com>\n+\n+\t* resolve.cc (ncode): Use _Jv_platform_ffi_abi.\n+\tInclude platform.h.\n+\t* java/lang/natRuntime.cc (insertSystemProperties): Use\n+\t_Jv_platform_path_separator.\n+\t(nativeGetLibname): Use _Jv_platform_file_separator.\n+\t(_load): Use _Jv_platform_onload_names.\n+\t(onload_names): New global.\n+\t* include/win32.h (_Jv_platform_file_separator): New define.\n+\t(_Jv_platform_path_separator): Likewise.\n+\t(_Jv_platform_onload_names): Likewise.\n+\t(_Jv_platform_ffi_abi): Likewise.\n+\t* include/posix.h (_Jv_platform_file_separator): New define.\n+\t(_Jv_platform_path_separator): Likewise.\n+\t(_Jv_platform_onload_names): Likewise.\n+\t(_Jv_platform_ffi_abi): Likewise.\n+\n 2003-03-14  Hans Boehm  <Hans.Boehm@hp.com>\n \n \t* java/lang/natObject.cc (JV_SYNC_HASH): replace signed % by &."}, {"sha": "bbec6d1737f4a9f5362c6adcfe2074555ef2582c", "filename": "libjava/include/posix.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b7f1f8f41666dc1d921e759ca80a24846f745fe/libjava%2Finclude%2Fposix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b7f1f8f41666dc1d921e759ca80a24846f745fe/libjava%2Finclude%2Fposix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fposix.h?ref=2b7f1f8f41666dc1d921e759ca80a24846f745fe", "patch": "@@ -44,6 +44,18 @@ details.  */\n #define _Jv_platform_solib_prefix \"lib\"\n #define _Jv_platform_solib_suffix \".so\"\n \n+// Separator for file name components.\n+#define _Jv_platform_file_separator ((jchar) '/')\n+// Separator for path components.\n+#define _Jv_platform_path_separator ((jchar) ':')\n+\n+// List of names for `JNI_OnLoad'.\n+#define _Jv_platform_onload_names { \"JNI_OnLoad\", NULL }\n+\n+// Type of libffi ABI used by JNICALL methods.  NOTE: This must agree\n+// with the JNICALL definition in jni.h\n+#define _Jv_platform_ffi_abi FFI_DEFAULT_ABI\n+\n #ifndef DISABLE_JAVA_NET\n #include <java/net/InetAddress.h>\n #endif"}, {"sha": "320273aa4e5d82742046fd8c3af112945106a84e", "filename": "libjava/include/win32.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b7f1f8f41666dc1d921e759ca80a24846f745fe/libjava%2Finclude%2Fwin32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b7f1f8f41666dc1d921e759ca80a24846f745fe/libjava%2Finclude%2Fwin32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fwin32.h?ref=2b7f1f8f41666dc1d921e759ca80a24846f745fe", "patch": "@@ -24,6 +24,22 @@ details.  */\n #define _Jv_platform_solib_prefix \"\"\n #define _Jv_platform_solib_suffix \".dll\"\n \n+// Separator for file name components.\n+#define _Jv_platform_file_separator ((jchar) '\\\\')\n+// Separator for path components.\n+#define _Jv_platform_path_separator ((jchar) ';')\n+\n+// List of names for `JNI_OnLoad'.  On Win32, JNI_OnLoad is an\n+// \"stdcall\" function taking two pointers (8 bytes) as arguments.  It\n+// could also have been exported as \"JNI_OnLoad@8\" (MinGW) or\n+// \"_JNI_OnLoad@8\" (MSVC).\n+#define _Jv_platform_onload_names \\\n+    { \"JNI_OnLoad\", \"JNI_OnLoad@8\", \"_JNI_OnLoad@8\", NULL }\n+\n+// Type of libffi ABI used by JNICALL methods.  NOTE: This must agree\n+// with the JNICALL definition in jni.h\n+#define _Jv_platform_ffi_abi FFI_STDCALL\n+\n #ifndef DISABLE_JAVA_NET\n \n // these errors cannot occur on Win32"}, {"sha": "b4c15106365373fa1c59ecc315547fe193bc2f86", "filename": "libjava/java/lang/natRuntime.cc", "status": "modified", "additions": 15, "deletions": 24, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b7f1f8f41666dc1d921e759ca80a24846f745fe/libjava%2Fjava%2Flang%2FnatRuntime.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b7f1f8f41666dc1d921e759ca80a24846f745fe/libjava%2Fjava%2Flang%2FnatRuntime.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatRuntime.cc?ref=2b7f1f8f41666dc1d921e759ca80a24846f745fe", "patch": "@@ -140,6 +140,11 @@ java::lang::Runtime::gc (void)\n   _Jv_RunGC ();\n }\n \n+#ifdef USE_LTDL\n+// List of names for JNI_OnLoad.\n+static const char *onload_names[] = _Jv_platform_onload_names;\n+#endif\n+\n void\n java::lang::Runtime::_load (jstring path, jboolean do_search)\n {\n@@ -221,19 +226,16 @@ java::lang::Runtime::_load (jstring path, jboolean do_search)\n       throw new UnsatisfiedLinkError (str);\n     }\n \n-  void *onload = lt_dlsym (h, \"JNI_OnLoad\");\n-\n-#ifdef WIN32\n-  // On Win32, JNI_OnLoad is an \"stdcall\" function taking two pointers\n-  // (8 bytes) as arguments.  It could also have been exported as\n-  // \"JNI_OnLoad@8\" (MinGW) or \"_JNI_OnLoad@8\" (MSVC).\n-  if (onload == NULL)\n+  // Search for JNI_OnLoad function.\n+  void *onload = NULL;\n+  const char **name = onload_names;\n+  while (*name != NULL)\n     {\n-      onload = lt_dlsym (h, \"JNI_OnLoad@8\");\n-      if (onload == NULL)\n-\tonload = lt_dlsym (h, \"_JNI_OnLoad@8\");\n+      onload = lt_dlsym (h, *name);\n+      if (onload != NULL)\n+\tbreak;\n+      ++name;\n     }\n-#endif /* WIN32 */\n \n   if (onload != NULL)\n     {\n@@ -570,11 +572,7 @@ java::lang::Runtime::insertSystemProperties (java::util::Properties *newprops)\n       if (classpath)\n \t{\n \t  sb->append (JvNewStringLatin1 (classpath));\n-#ifdef WIN32\n-\t  sb->append ((jchar) ';');\n-#else\n-\t  sb->append ((jchar) ':');\n-#endif\n+\t  sb->append (_Jv_platform_path_separator);\n \t}\n       if (cp != NULL)\n \tsb->append (cp);\n@@ -632,14 +630,7 @@ java::lang::Runtime::nativeGetLibname (jstring pathname, jstring libname)\n   java::lang::StringBuffer *sb = new java::lang::StringBuffer ();\n   sb->append(pathname);\n   if (pathname->length() > 0)\n-    {\n-      // FIXME: use platform function here.\n-#ifdef WIN32\n-      sb->append ((jchar) '\\\\');\n-#else\n-      sb->append ((jchar) '/');\n-#endif\n-    }\n+    sb->append (_Jv_platform_file_separator);\n \n   sb->append (JvNewStringLatin1 (_Jv_platform_solib_prefix));\n   sb->append(libname);"}, {"sha": "ea506452d583639172d5c439dd8c0ce59801a755", "filename": "libjava/resolve.cc", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b7f1f8f41666dc1d921e759ca80a24846f745fe/libjava%2Fresolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b7f1f8f41666dc1d921e759ca80a24846f745fe/libjava%2Fresolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fresolve.cc?ref=2b7f1f8f41666dc1d921e759ca80a24846f745fe", "patch": "@@ -11,6 +11,7 @@ details.  */\n /* Author: Kresten Krab Thorup <krab@gnu.org>  */\n \n #include <config.h>\n+#include <platform.h>\n \n #include <java-interp.h>\n \n@@ -1003,14 +1004,7 @@ _Jv_JNIMethod::ncode ()\n   memcpy (&jni_arg_types[offset], &closure->arg_types[0],\n \t  arg_count * sizeof (ffi_type *));\n \n-  // NOTE: This must agree with the JNICALL definition in jni.h\n-#ifdef WIN32\n-#define FFI_JNI_ABI FFI_STDCALL\n-#else\n-#define FFI_JNI_ABI FFI_DEFAULT_ABI\n-#endif\n-\n-  if (ffi_prep_cif (&jni_cif, FFI_JNI_ABI,\n+  if (ffi_prep_cif (&jni_cif, _Jv_platform_ffi_abi,\n \t\t    extra_args + arg_count, rtype,\n \t\t    jni_arg_types) != FFI_OK)\n     throw_internal_error (\"ffi_prep_cif failed for JNI function\");"}]}