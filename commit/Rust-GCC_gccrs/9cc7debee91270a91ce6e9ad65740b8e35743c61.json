{"sha": "9cc7debee91270a91ce6e9ad65740b8e35743c61", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWNjN2RlYmVlOTEyNzBhOTFjZTZlOWFkNjU3NDBiOGUzNTc0M2M2MQ==", "commit": {"author": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2019-07-18T00:06:41Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2019-07-18T00:06:41Z"}, "message": "pa.c (pa_som_asm_init_sections): Don't force all constant data into data section when generating PIC code.\n\n\t* config/pa/pa.c (pa_som_asm_init_sections): Don't force all constant\n\tdata into data section when generating PIC code.\n\t(pa_select_section): Use pa_reloc_rw_mask() to qualify relocs.\n\t(pa_reloc_rw_mask): Return 3 when generating PIC code and when\n\tgenerating code for SOM targets earlier than HP-UX 11.  Otherwise,\n\treturn 2 for SOM and 0 for other targets.\n\nFrom-SVN: r273557", "tree": {"sha": "15c3d64671a9aa19ab72f42c31bb87380d40228b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15c3d64671a9aa19ab72f42c31bb87380d40228b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9cc7debee91270a91ce6e9ad65740b8e35743c61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cc7debee91270a91ce6e9ad65740b8e35743c61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cc7debee91270a91ce6e9ad65740b8e35743c61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cc7debee91270a91ce6e9ad65740b8e35743c61/comments", "author": null, "committer": null, "parents": [{"sha": "caffb6e56c2914e64e65f3c336b770c178f265a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/caffb6e56c2914e64e65f3c336b770c178f265a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/caffb6e56c2914e64e65f3c336b770c178f265a3"}], "stats": {"total": 44, "additions": 28, "deletions": 16}, "files": [{"sha": "7f55623f8782ec67236dd6c213eec92f08f00b7f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cc7debee91270a91ce6e9ad65740b8e35743c61/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cc7debee91270a91ce6e9ad65740b8e35743c61/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9cc7debee91270a91ce6e9ad65740b8e35743c61", "patch": "@@ -1,3 +1,12 @@\n+2019-07-17  John David Anglin  <danglin@gcc.gnu.org>\n+\n+\t* config/pa/pa.c (pa_som_asm_init_sections): Don't force all constant\n+\tdata into data section when generating PIC code.\n+\t(pa_select_section): Use pa_reloc_rw_mask() to qualify relocs.\n+\t(pa_reloc_rw_mask): Return 3 when generating PIC code and when\n+\tgenerating code for SOM targets earlier than HP-UX 11.  Otherwise,\n+\treturn 2 for SOM and 0 for other targets.\n+\t \n 2019-07-17  Jeff Law  <law@redhat.com>\n \n \t* tree-ssa-dse.c (initialize_ao_ref_for_dse): Fix formatting."}, {"sha": "f54ca6e4abf25daf52a7483b1db37caf860f0d83", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cc7debee91270a91ce6e9ad65740b8e35743c61/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cc7debee91270a91ce6e9ad65740b8e35743c61/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=9cc7debee91270a91ce6e9ad65740b8e35743c61", "patch": "@@ -9805,19 +9805,22 @@ pa_som_asm_init_sections (void)\n       = get_unnamed_section (0, output_section_asm_op,\n \t\t\t     \"\\t.SPACE $PRIVATE$\\n\\t.SUBSPA $TM_CLONE_TABLE$\");\n \n-  /* FIXME: HPUX ld generates incorrect GOT entries for \"T\" fixups\n-     which reference data within the $TEXT$ space (for example constant\n+  /* HPUX ld generates incorrect GOT entries for \"T\" fixups which\n+     reference data within the $TEXT$ space (for example constant\n      strings in the $LIT$ subspace).\n \n      The assemblers (GAS and HP as) both have problems with handling\n-     the difference of two symbols which is the other correct way to\n+     the difference of two symbols.  This is the other correct way to\n      reference constant data during PIC code generation.\n \n-     So, there's no way to reference constant data which is in the\n-     $TEXT$ space during PIC generation.  Instead place all constant\n-     data into the $PRIVATE$ subspace (this reduces sharing, but it\n-     works correctly).  */\n-  readonly_data_section = flag_pic ? data_section : som_readonly_data_section;\n+     Thus, we can't put constant data needing relocation in the $TEXT$\n+     space during PIC generation.\n+\n+     Previously, we placed all constant data into the $DATA$ subspace\n+     when generating PIC code.  This reduces sharing, but it works\n+     correctly.  Now we rely on pa_reloc_rw_mask() for section selection.\n+     This puts constant data not needing relocation into the $TEXT$ space.  */\n+  readonly_data_section = som_readonly_data_section;\n \n   /* We must not have a reference to an external symbol defined in a\n      shared library in a readonly section, else the SOM linker will\n@@ -9850,7 +9853,7 @@ pa_select_section (tree exp, int reloc,\n       && DECL_INITIAL (exp)\n       && (DECL_INITIAL (exp) == error_mark_node\n           || TREE_CONSTANT (DECL_INITIAL (exp)))\n-      && !reloc)\n+      && !(reloc & pa_reloc_rw_mask ()))\n     {\n       if (TARGET_SOM\n \t  && DECL_ONE_ONLY (exp)\n@@ -9859,7 +9862,8 @@ pa_select_section (tree exp, int reloc,\n       else\n \treturn readonly_data_section;\n     }\n-  else if (CONSTANT_CLASS_P (exp) && !reloc)\n+  else if (CONSTANT_CLASS_P (exp)\n+\t   && !(reloc & pa_reloc_rw_mask ()))\n     return readonly_data_section;\n   else if (TARGET_SOM\n \t   && TREE_CODE (exp) == VAR_DECL\n@@ -9875,12 +9879,11 @@ pa_select_section (tree exp, int reloc,\n static int\n pa_reloc_rw_mask (void)\n {\n-  /* We force (const (plus (symbol) (const_int))) to memory when the\n-     const_int doesn't fit in a 14-bit integer.  The SOM linker can't\n-     handle this construct in read-only memory and we want to avoid\n-     this for ELF.  So, we always force an RTX needing relocation to\n-     the data section.  */\n-  return 3;\n+  if (flag_pic || (TARGET_SOM && !TARGET_HPUX_11))\n+    return 3;\n+\n+  /* HP linker does not support global relocs in readonly memory.  */\n+  return TARGET_SOM ? 2 : 0;\n }\n \n static void"}]}