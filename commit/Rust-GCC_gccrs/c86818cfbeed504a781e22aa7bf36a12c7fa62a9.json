{"sha": "c86818cfbeed504a781e22aa7bf36a12c7fa62a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzg2ODE4Y2ZiZWVkNTA0YTc4MWUyMmFhN2JmMzZhMTJjN2ZhNjJhOQ==", "commit": {"author": {"name": "Shujing Zhao", "email": "pearly.zhao@oracle.com", "date": "2009-11-20T10:05:37Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-11-20T10:05:37Z"}, "message": "re PR c++/29017 (%s substituted with different untranslated words can't be properly translated)\n\n/cp\n2009-11-20  Shujing Zhao  <pearly.zhao@oracle.com>\n\n\tPR c++/29017\n\t* cp-tree.h (composite_pointer_operation): New type.\n\t(composite_pointer_type): Adjust prototype with new argument.\n\t* typeck.c (composite_pointer_type): Accept\n\tcomposite_pointer_operation as argument and emit diagnostic to be\n\tvisible to gettext and checked at compile time.\n\t(composite_pointer_type_r): Likewise.\n\t(common_pointer_type): Update call to composite_pointer_type.\n\t(cp_build_binary_op): Likewise.\n\t* call.c (build_conditional_expr): Likewise.\n\n/testsuite\n2009-11-20  Shujing Zhao  <pearly.zhao@oracle.com>\n\n\t* g++.old-deja/g++.jason/rfg20.C: Make expected dg-error strings\n\texplicit.\n\t* g++.old-deja/g++.rfg/00321_01-.C: Likewise.\n\t* g++.old-deja/g++.rfg/00324_02-.C: Likewise.\n\t* g++.old-deja/g++.law/typeck1.C: Likewise.\n\t* g++.old-deja/g++.bugs/900324_02.C: Likewise.\n\t* g++.dg/conversion/ptrmem9.C: Likewise.\n\t* g++.dg/expr/cond2.C: Likewise.\n\nFrom-SVN: r154360", "tree": {"sha": "dd151127c85af90b70978482f92c52bdd16cacb1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd151127c85af90b70978482f92c52bdd16cacb1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c86818cfbeed504a781e22aa7bf36a12c7fa62a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c86818cfbeed504a781e22aa7bf36a12c7fa62a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c86818cfbeed504a781e22aa7bf36a12c7fa62a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c86818cfbeed504a781e22aa7bf36a12c7fa62a9/comments", "author": null, "committer": null, "parents": [{"sha": "3de8a540d8905f8820166960754bb6bb39bfbb44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3de8a540d8905f8820166960754bb6bb39bfbb44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3de8a540d8905f8820166960754bb6bb39bfbb44"}], "stats": {"total": 219, "additions": 174, "deletions": 45}, "files": [{"sha": "b5b2b04fe1d810207c735c76bedeaecc4d5c28f5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c86818cfbeed504a781e22aa7bf36a12c7fa62a9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c86818cfbeed504a781e22aa7bf36a12c7fa62a9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c86818cfbeed504a781e22aa7bf36a12c7fa62a9", "patch": "@@ -1,3 +1,16 @@\n+2009-11-20  Shujing Zhao  <pearly.zhao@oracle.com>\n+\n+\tPR c++/29017\n+\t* cp-tree.h (composite_pointer_operation): New type.\n+\t(composite_pointer_type): Adjust prototype with new argument.\n+\t* typeck.c (composite_pointer_type): Accept\n+\tcomposite_pointer_operation as argument and emit diagnostic to be\n+\tvisible to gettext and checked at compile time.\n+\t(composite_pointer_type_r): Likewise.\n+\t(common_pointer_type): Update call to composite_pointer_type.\n+\t(cp_build_binary_op): Likewise.\n+\t* call.c (build_conditional_expr): Likewise.\n+\n 2009-11-19  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/42115"}, {"sha": "b4c8176c626fa76000993233cc1fdaff7c0682a3", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c86818cfbeed504a781e22aa7bf36a12c7fa62a9/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c86818cfbeed504a781e22aa7bf36a12c7fa62a9/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=c86818cfbeed504a781e22aa7bf36a12c7fa62a9", "patch": "@@ -3977,7 +3977,7 @@ build_conditional_expr (tree arg1, tree arg2, tree arg3,\n \t   || (TYPE_PTRMEMFUNC_P (arg2_type) && TYPE_PTRMEMFUNC_P (arg3_type)))\n     {\n       result_type = composite_pointer_type (arg2_type, arg3_type, arg2,\n-\t\t\t\t\t    arg3, \"conditional expression\",\n+\t\t\t\t\t    arg3, CPO_CONDITIONAL_EXPR,\n \t\t\t\t\t    complain);\n       if (result_type == error_mark_node)\n \treturn error_mark_node;"}, {"sha": "88387705a1b1a7527f4b27bf4df5a59142e39728", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c86818cfbeed504a781e22aa7bf36a12c7fa62a9/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c86818cfbeed504a781e22aa7bf36a12c7fa62a9/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=c86818cfbeed504a781e22aa7bf36a12c7fa62a9", "patch": "@@ -403,6 +403,17 @@ typedef enum cpp0x_warn_str\n   CPP0X_DEFAULTED_DELETED\n } cpp0x_warn_str;\n   \n+/* The various kinds of operation used by composite_pointer_type. */\n+\n+typedef enum composite_pointer_operation\n+{\n+  /* comparison */\n+  CPO_COMPARISON,\n+  /* conversion */\n+  CPO_CONVERSION,\n+  /* conditional expression */\n+  CPO_CONDITIONAL_EXPR\n+} composite_pointer_operation;\n \n /* Macros for access to language-specific slots in an identifier.  */\n \n@@ -5281,7 +5292,8 @@ extern void expand_ptrmemfunc_cst\t\t(tree, tree *, tree *);\n extern tree type_after_usual_arithmetic_conversions (tree, tree);\n extern tree common_pointer_type                 (tree, tree);\n extern tree composite_pointer_type\t\t(tree, tree, tree, tree,\n-\t\t\t\t\t\t const char*, tsubst_flags_t);\n+\t\t\t\t\t\t composite_pointer_operation, \n+\t\t\t\t\t\t tsubst_flags_t);\n extern tree merge_types\t\t\t\t(tree, tree);\n extern tree check_return_expr\t\t\t(tree, bool *);\n extern tree cp_build_binary_op                  (location_t,"}, {"sha": "8685530a4ddd31b5ca422705c396305879723f9f", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 128, "deletions": 35, "changes": 163, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c86818cfbeed504a781e22aa7bf36a12c7fa62a9/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c86818cfbeed504a781e22aa7bf36a12c7fa62a9/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=c86818cfbeed504a781e22aa7bf36a12c7fa62a9", "patch": "@@ -421,10 +421,11 @@ type_after_usual_arithmetic_conversions (tree t1, tree t2)\n }\n \n /* Subroutine of composite_pointer_type to implement the recursive\n-   case.  See that function for documentation fo the parameters.  */\n+   case.  See that function for documentation of the parameters.  */\n \n static tree\n-composite_pointer_type_r (tree t1, tree t2, const char* location,\n+composite_pointer_type_r (tree t1, tree t2, \n+\t\t\t  composite_pointer_operation operation,\n \t\t\t  tsubst_flags_t complain)\n {\n   tree pointee1;\n@@ -457,14 +458,33 @@ composite_pointer_type_r (tree t1, tree t2, const char* location,\n \t    && TREE_CODE (pointee2) == POINTER_TYPE)\n \t   || (TYPE_PTR_TO_MEMBER_P (pointee1)\n \t       && TYPE_PTR_TO_MEMBER_P (pointee2)))\n-    result_type = composite_pointer_type_r (pointee1, pointee2, location,\n+    result_type = composite_pointer_type_r (pointee1, pointee2, operation,\n \t\t\t\t\t    complain);\n   else\n     {\n       if (complain & tf_error)\n-\tpermerror (input_location, \"%s between distinct pointer types %qT and %qT \"\n-\t\t   \"lacks a cast\",\n-\t\t   location, t1, t2);\n+        {\n+          switch (operation)\n+            {\n+            case CPO_COMPARISON:\n+              permerror (input_location, \"comparison between \"\n+                         \"distinct pointer types %qT and %qT lacks a cast\",\n+                         t1, t2);\n+              break;\n+            case CPO_CONVERSION:\n+              permerror (input_location, \"conversion between \"\n+                         \"distinct pointer types %qT and %qT lacks a cast\",\n+                         t1, t2);\n+              break;\n+            case CPO_CONDITIONAL_EXPR:\n+              permerror (input_location, \"conditional expression between \"\n+                         \"distinct pointer types %qT and %qT lacks a cast\",\n+                         t1, t2);\n+              break;\n+            default:\n+              gcc_unreachable ();\n+            }\n+        }\n       result_type = void_type_node;\n     }\n   result_type = cp_build_qualified_type (result_type,\n@@ -477,9 +497,28 @@ composite_pointer_type_r (tree t1, tree t2, const char* location,\n       if (!same_type_p (TYPE_PTRMEM_CLASS_TYPE (t1),\n \t\t\tTYPE_PTRMEM_CLASS_TYPE (t2))\n \t  && (complain & tf_error))\n-\tpermerror (input_location, \"%s between distinct pointer types %qT and %qT \"\n-\t\t   \"lacks a cast\",\n-\t\t   location, t1, t2);\n+        {\n+          switch (operation)\n+            {\n+            case CPO_COMPARISON:\n+              permerror (input_location, \"comparison between \"\n+                         \"distinct pointer types %qT and %qT lacks a cast\", \n+                         t1, t2);\n+              break;\n+            case CPO_CONVERSION:\n+              permerror (input_location, \"conversion between \"\n+                         \"distinct pointer types %qT and %qT lacks a cast\",\n+                         t1, t2);\n+              break;\n+            case CPO_CONDITIONAL_EXPR:\n+              permerror (input_location, \"conditional expression between \"\n+                         \"distinct pointer types %qT and %qT lacks a cast\",\n+                         t1, t2);\n+              break;\n+            default:\n+              gcc_unreachable ();\n+            }\n+        }\n       result_type = build_ptrmem_type (TYPE_PTRMEM_CLASS_TYPE (t1),\n \t\t\t\t       result_type);\n     }\n@@ -492,15 +531,17 @@ composite_pointer_type_r (tree t1, tree t2, const char* location,\n }\n \n /* Return the composite pointer type (see [expr.rel]) for T1 and T2.\n-   ARG1 and ARG2 are the values with those types.  The LOCATION is a\n-   string describing the current location, in case an error occurs.\n+   ARG1 and ARG2 are the values with those types.  The OPERATION is to\n+   describe the operation between the pointer types,\n+   in case an error occurs.\n \n    This routine also implements the computation of a common type for\n    pointers-to-members as per [expr.eq].  */\n \n tree\n composite_pointer_type (tree t1, tree t2, tree arg1, tree arg2,\n-\t\t\tconst char* location, tsubst_flags_t complain)\n+\t\t\tcomposite_pointer_operation operation, \n+\t\t\ttsubst_flags_t complain)\n {\n   tree class1;\n   tree class2;\n@@ -539,9 +580,28 @@ composite_pointer_type (tree t1, tree t2, tree arg1, tree arg2,\n       tree result_type;\n \n       if (TYPE_PTRFN_P (t2) && (complain & tf_error))\n-\tpedwarn (input_location, OPT_pedantic, \"ISO C++ forbids %s \"\n-\t\t \"between pointer of type %<void *%> and pointer-to-function\",\n-\t\t location);\n+        {\n+          switch (operation)\n+              {\n+              case CPO_COMPARISON:\n+                pedwarn (input_location, OPT_pedantic, \n+                         \"ISO C++ forbids comparison between \"\n+                         \"pointer of type %<void *%> and pointer-to-function\");\n+                break;\n+              case CPO_CONVERSION:\n+                pedwarn (input_location, OPT_pedantic,\n+                         \"ISO C++ forbids conversion between \"\n+                         \"pointer of type %<void *%> and pointer-to-function\");\n+                break;\n+              case CPO_CONDITIONAL_EXPR:\n+                pedwarn (input_location, OPT_pedantic,\n+                         \"ISO C++ forbids conditional expression between \"\n+                         \"pointer of type %<void *%> and pointer-to-function\");\n+                break;\n+              default:\n+                gcc_unreachable ();\n+              }\n+        }\n       result_type\n \t= cp_build_qualified_type (void_type_node,\n \t\t\t\t   (cp_type_quals (TREE_TYPE (t1))\n@@ -577,17 +637,32 @@ composite_pointer_type (tree t1, tree t2, tree arg1, tree arg2,\n \tt1 = (build_pointer_type\n \t      (cp_build_qualified_type (class2, TYPE_QUALS (class1))));\n       else\n-\t{\n-\t  if (complain & tf_error)\n-\t    error (\"%s between distinct pointer types %qT and %qT \"\n-\t\t   \"lacks a cast\", location, t1, t2);\n-\t  return error_mark_node;\n-\t}\n+        {\n+          if (complain & tf_error)\n+            switch (operation)\n+              {\n+              case CPO_COMPARISON:\n+                error (\"comparison between distinct \"\n+                       \"pointer types %qT and %qT lacks a cast\", t1, t2);\n+                break;\n+              case CPO_CONVERSION:\n+                error (\"conversion between distinct \"\n+                       \"pointer types %qT and %qT lacks a cast\", t1, t2);\n+                break;\n+              case CPO_CONDITIONAL_EXPR:\n+                error (\"conditional expression between distinct \"\n+                       \"pointer types %qT and %qT lacks a cast\", t1, t2);\n+                break;\n+              default:\n+                gcc_unreachable ();\n+              }\n+          return error_mark_node;\n+        }\n     }\n   /* [expr.eq] permits the application of a pointer-to-member\n      conversion to change the class type of one of the types.  */\n   else if (TYPE_PTR_TO_MEMBER_P (t1)\n-\t   && !same_type_p (TYPE_PTRMEM_CLASS_TYPE (t1),\n+           && !same_type_p (TYPE_PTRMEM_CLASS_TYPE (t1),\n \t\t\t    TYPE_PTRMEM_CLASS_TYPE (t2)))\n     {\n       class1 = TYPE_PTRMEM_CLASS_TYPE (t1);\n@@ -598,15 +673,33 @@ composite_pointer_type (tree t1, tree t2, tree arg1, tree arg2,\n       else if (DERIVED_FROM_P (class2, class1))\n \tt2 = build_ptrmem_type (class1, TYPE_PTRMEM_POINTED_TO_TYPE (t2));\n       else\n-\t{\n-\t  if (complain & tf_error)\n-\t    error (\"%s between distinct pointer-to-member types %qT and %qT \"\n-\t\t   \"lacks a cast\", location, t1, t2);\n-\t  return error_mark_node;\n-\t}\n+        {\n+          if (complain & tf_error)\n+            switch (operation)\n+              {\n+              case CPO_COMPARISON:\n+                error (\"comparison between distinct \"\n+                       \"pointer-to-member types %qT and %qT lacks a cast\",\n+                       t1, t2);\n+                break;\n+              case CPO_CONVERSION:\n+                error (\"conversion between distinct \"\n+                       \"pointer-to-member types %qT and %qT lacks a cast\",\n+                       t1, t2);\n+                break;\n+              case CPO_CONDITIONAL_EXPR:\n+                error (\"conditional expression between distinct \"\n+                       \"pointer-to-member types %qT and %qT lacks a cast\",\n+                       t1, t2);\n+                break;\n+              default:\n+                gcc_unreachable ();\n+              }\n+          return error_mark_node;\n+        }\n     }\n \n-  return composite_pointer_type_r (t1, t2, location, complain);\n+  return composite_pointer_type_r (t1, t2, operation, complain);\n }\n \n /* Return the merged type of two types.\n@@ -820,7 +913,7 @@ common_pointer_type (tree t1, tree t2)\n               || (TYPE_PTRMEMFUNC_P (t1) && TYPE_PTRMEMFUNC_P (t2)));\n \n   return composite_pointer_type (t1, t2, error_mark_node, error_mark_node,\n-                                 \"conversion\", tf_warning_or_error);\n+                                 CPO_CONVERSION, tf_warning_or_error);\n }\n \f\n /* Compare two exception specifier types for exactness or subsetness, if\n@@ -3683,7 +3776,7 @@ cp_build_binary_op (location_t location,\n       else if ((code0 == POINTER_TYPE && code1 == POINTER_TYPE)\n \t       || (TYPE_PTRMEM_P (type0) && TYPE_PTRMEM_P (type1)))\n \tresult_type = composite_pointer_type (type0, type1, op0, op1,\n-\t\t\t\t\t      \"comparison\", complain);\n+\t\t\t\t\t      CPO_COMPARISON, complain);\n       else if ((code0 == POINTER_TYPE || TYPE_PTRMEM_P (type0))\n \t       && null_ptr_cst_p (op1))\n \t{\n@@ -3772,8 +3865,8 @@ cp_build_binary_op (location_t location,\n \t  tree delta0;\n \t  tree delta1;\n \n-\t  type = composite_pointer_type (type0, type1, op0, op1, \"comparison\",\n-\t\t\t\t\t complain);\n+\t  type = composite_pointer_type (type0, type1, op0, op1, \n+\t\t\t\t\t CPO_COMPARISON, complain);\n \n \t  if (!same_type_p (TREE_TYPE (op0), type))\n \t    op0 = cp_convert_and_check (type, op0);\n@@ -3884,7 +3977,7 @@ cp_build_binary_op (location_t location,\n \tshorten = 1;\n       else if (code0 == POINTER_TYPE && code1 == POINTER_TYPE)\n \tresult_type = composite_pointer_type (type0, type1, op0, op1,\n-\t\t\t\t\t      \"comparison\", complain);\n+\t\t\t\t\t      CPO_COMPARISON, complain);\n       break;\n \n     case LE_EXPR:\n@@ -3904,7 +3997,7 @@ cp_build_binary_op (location_t location,\n \tshort_compare = 1;\n       else if (code0 == POINTER_TYPE && code1 == POINTER_TYPE)\n \tresult_type = composite_pointer_type (type0, type1, op0, op1,\n-\t\t\t\t\t      \"comparison\", complain);\n+\t\t\t\t\t      CPO_COMPARISON, complain);\n       else if (code0 == POINTER_TYPE && TREE_CODE (op1) == INTEGER_CST\n \t       && integer_zerop (op1))\n \tresult_type = type0;"}, {"sha": "56b217cbe53e7fd3191c355ee5b8fb691ddf6aff", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c86818cfbeed504a781e22aa7bf36a12c7fa62a9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c86818cfbeed504a781e22aa7bf36a12c7fa62a9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c86818cfbeed504a781e22aa7bf36a12c7fa62a9", "patch": "@@ -1,3 +1,14 @@\n+2009-11-20  Shujing Zhao  <pearly.zhao@oracle.com>\n+\n+\t* g++.old-deja/g++.jason/rfg20.C: Make expected dg-error strings\n+\texplicit.\n+\t* g++.old-deja/g++.rfg/00321_01-.C: Likewise.\n+\t* g++.old-deja/g++.rfg/00324_02-.C: Likewise.\n+\t* g++.old-deja/g++.law/typeck1.C: Likewise.\n+\t* g++.old-deja/g++.bugs/900324_02.C: Likewise.\n+\t* g++.dg/conversion/ptrmem9.C: Likewise.\n+\t* g++.dg/expr/cond2.C: Likewise.\n+\n 2009-11-20  Paul Thomas  <pault@gcc.gnu.org>\n \t    Janus Weil  <janus@gcc.gnu.org>\n "}, {"sha": "d4a260f92731ed17a1ccfc6567338a919d215e89", "filename": "gcc/testsuite/g++.dg/conversion/ptrmem9.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c86818cfbeed504a781e22aa7bf36a12c7fa62a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fptrmem9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c86818cfbeed504a781e22aa7bf36a12c7fa62a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fptrmem9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fptrmem9.C?ref=c86818cfbeed504a781e22aa7bf36a12c7fa62a9", "patch": "@@ -22,5 +22,5 @@ void f ()\n \n   pd == pb;\n   pd == pbv;  // { dg-error \"\" }\n-  pd == pc;   // { dg-error \"\" }\n+  pd == pc;   // { dg-error \"comparison between distinct pointer-to-member types\" }\n }"}, {"sha": "68a26a22f34ff0e9f1ef9be06f4dbe6d198bced0", "filename": "gcc/testsuite/g++.dg/expr/cond2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c86818cfbeed504a781e22aa7bf36a12c7fa62a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcond2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c86818cfbeed504a781e22aa7bf36a12c7fa62a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcond2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcond2.C?ref=c86818cfbeed504a781e22aa7bf36a12c7fa62a9", "patch": "@@ -8,5 +8,5 @@ struct IsZero : Term {\n Term*\n IsZero::eval()\n {\n-  return true ? new Boolean(false) : this; // { dg-error \"\" }\n+  return true ? new Boolean(false) : this; // { dg-error \"conditional expression\" }\n }"}, {"sha": "b77cc0375a87ab637869033148c43b63c2e8f255", "filename": "gcc/testsuite/g++.old-deja/g++.bugs/900324_02.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c86818cfbeed504a781e22aa7bf36a12c7fa62a9/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900324_02.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c86818cfbeed504a781e22aa7bf36a12c7fa62a9/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900324_02.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900324_02.C?ref=c86818cfbeed504a781e22aa7bf36a12c7fa62a9", "patch": "@@ -13,7 +13,7 @@ void (*fp)(void);\n \n void function_1 ()\n {\n-  fp = 1 ? function_0 : fp;\t\t// { dg-error \"\" } \n+  fp = 1 ? function_0 : fp;\t\t// { dg-error \"conditional expression|invalid conversion\" } \n }\n \n int main () { return 0; }"}, {"sha": "505f7c94968a27a3d276b9ab954b50114fbb3dff", "filename": "gcc/testsuite/g++.old-deja/g++.jason/rfg20.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c86818cfbeed504a781e22aa7bf36a12c7fa62a9/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Frfg20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c86818cfbeed504a781e22aa7bf36a12c7fa62a9/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Frfg20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Frfg20.C?ref=c86818cfbeed504a781e22aa7bf36a12c7fa62a9", "patch": "@@ -6,5 +6,5 @@ void *vp;\n \n void example ()\n {\n-    vp != fp;\t\t\t// { dg-error \"\" } no conversion from pfn to void*\n+    vp != fp;\t\t\t// { dg-error \"forbids comparison\" } no conversion from pfn to void*\n }"}, {"sha": "12a8ff6e8cf4c21646a4ce2378075306a52a8e19", "filename": "gcc/testsuite/g++.old-deja/g++.law/typeck1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c86818cfbeed504a781e22aa7bf36a12c7fa62a9/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Ftypeck1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c86818cfbeed504a781e22aa7bf36a12c7fa62a9/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Ftypeck1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Ftypeck1.C?ref=c86818cfbeed504a781e22aa7bf36a12c7fa62a9", "patch": "@@ -13,6 +13,6 @@\n \n         int test( const foo* f, const bar* b )\n                 {\n-                return f == b;// { dg-error \"\" } \n+                return f == b;// { dg-error \"comparison between distinct pointer types\" } \n                 }\n "}, {"sha": "dcc607e329aec1ac02535f196866fc4255c9e4f0", "filename": "gcc/testsuite/g++.old-deja/g++.rfg/00321_01-.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c86818cfbeed504a781e22aa7bf36a12c7fa62a9/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.rfg%2F00321_01-.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c86818cfbeed504a781e22aa7bf36a12c7fa62a9/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.rfg%2F00321_01-.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.rfg%2F00321_01-.C?ref=c86818cfbeed504a781e22aa7bf36a12c7fa62a9", "patch": "@@ -9,6 +9,6 @@ int (*p2)[5];\n void\n test ()\n {\n-  p1 == p2;\t\t// { dg-error \"\" } comparison.*\n-  p1 > p2;\t\t// { dg-error \"\" } comparison.*\n+  p1 == p2;\t\t// { dg-error \"comparison between distinct pointer types\" } comparison.*\n+  p1 > p2;\t\t// { dg-error \"comparison between distinct pointer types\" } comparison.*\n }"}, {"sha": "1e742cb0d04b8f304cc6e74b5fc67e55dc322230", "filename": "gcc/testsuite/g++.old-deja/g++.rfg/00324_02-.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c86818cfbeed504a781e22aa7bf36a12c7fa62a9/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.rfg%2F00324_02-.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c86818cfbeed504a781e22aa7bf36a12c7fa62a9/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.rfg%2F00324_02-.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.rfg%2F00324_02-.C?ref=c86818cfbeed504a781e22aa7bf36a12c7fa62a9", "patch": "@@ -12,5 +12,5 @@ int i;\n void\n test ()\n {\n-   i ? f : fp; // { dg-error \"\" } \n+   i ? f : fp; // { dg-error \"conditional expression|invalid conversion\" } \n }"}]}