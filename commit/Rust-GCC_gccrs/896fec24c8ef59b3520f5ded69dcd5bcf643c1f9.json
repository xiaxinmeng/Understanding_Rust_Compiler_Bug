{"sha": "896fec24c8ef59b3520f5ded69dcd5bcf643c1f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk2ZmVjMjRjOGVmNTliMzUyMGY1ZGVkNjlkY2Q1YmNmNjQzYzFmOQ==", "commit": {"author": {"name": "qing zhao", "email": "qing.zhao@oracle.com", "date": "2021-09-17T17:33:47Z"}, "committer": {"name": "qing zhao", "email": "qing.zhao@oracle.com", "date": "2021-09-17T17:33:47Z"}, "message": "testsuite: Fix gcc.target/i386/auto-init-* tests.\n\nThis set of tests failed on many different combination of -march, -mtune.\nsome of them failed with -fstack-protestor-all, or -mno-sse. And the\npattern matches are also different on lp64 or ia32.\n\nThe reason for these failures is that the RTL or assembly level patten\nmatches are only valid for -march=x86-64 -mtune=generic.\n\nWe restrict the testing only for -march=x86-64 and -mtune=generic. Also\nadd -fno-stack-protector or -msse for some of the testing cases.\n\ngcc/testsuite/ChangeLog:\n\n2021-09-17  qing zhao  <qing.zhao@oracle.com>\n\n\t* gcc.target/i386/auto-init-1.c: Restrict the testing only for\n\t-march=x86-64 and -mtune=generic. Add -fno-stack-protector.\n\t* gcc.target/i386/auto-init-2.c: Restrict the testing only for\n\t-march=x86-64 and -mtune=generic -msse.\n\t* gcc.target/i386/auto-init-3.c: Likewise.\n\t* gcc.target/i386/auto-init-4.c: Likewise.\n\t* gcc.target/i386/auto-init-5.c: Different pattern match for lp64 and\n\tia32.\n\t* gcc.target/i386/auto-init-6.c: Restrict the testing only for\n\t-march=x86-64 and -mtune-generic -msse. Add -fno-stack-protector.\n\t* gcc.target/i386/auto-init-7.c: Likewise.\n\t* gcc.target/i386/auto-init-8.c: Restrict the testing only for\n\t-march=x86-64 and -mtune=generic -msse..\n\t* gcc.target/i386/auto-init-padding-1.c: Likewise.\n\t* gcc.target/i386/auto-init-padding-10.c: Likewise.\n\t* gcc.target/i386/auto-init-padding-11.c: Likewise.\n\t* gcc.target/i386/auto-init-padding-12.c: Likewise.\n\t* gcc.target/i386/auto-init-padding-2.c: Likewise.\n\t* gcc.target/i386/auto-init-padding-3.c: Restrict the testing only for\n\t-march=x86-64. Different pattern match for lp64 and ia32.\n\t* gcc.target/i386/auto-init-padding-4.c: Restrict the testing only for\n\t-march=x86-64 and -mtune-generic -msse.\n\t* gcc.target/i386/auto-init-padding-5.c: Likewise.\n\t* gcc.target/i386/auto-init-padding-6.c: Likewise.\n\t* gcc.target/i386/auto-init-padding-7.c: Restrict the testing only for\n\t-march=x86-64 and -mtune-generic -msse. Add -fno-stack-protector.\n\t* gcc.target/i386/auto-init-padding-8.c: Likewise.\n\t* gcc.target/i386/auto-init-padding-9.c: Restrict the testing only for\n\t-march=x86-64. Different pattern match for lp64 and ia32.", "tree": {"sha": "4e520050705a9f1dced55eff4abdc61b0bb5c209", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e520050705a9f1dced55eff4abdc61b0bb5c209"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/896fec24c8ef59b3520f5ded69dcd5bcf643c1f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/896fec24c8ef59b3520f5ded69dcd5bcf643c1f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/896fec24c8ef59b3520f5ded69dcd5bcf643c1f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/896fec24c8ef59b3520f5ded69dcd5bcf643c1f9/comments", "author": {"login": "qingzhao69", "id": 89154636, "node_id": "MDQ6VXNlcjg5MTU0NjM2", "avatar_url": "https://avatars.githubusercontent.com/u/89154636?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qingzhao69", "html_url": "https://github.com/qingzhao69", "followers_url": "https://api.github.com/users/qingzhao69/followers", "following_url": "https://api.github.com/users/qingzhao69/following{/other_user}", "gists_url": "https://api.github.com/users/qingzhao69/gists{/gist_id}", "starred_url": "https://api.github.com/users/qingzhao69/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qingzhao69/subscriptions", "organizations_url": "https://api.github.com/users/qingzhao69/orgs", "repos_url": "https://api.github.com/users/qingzhao69/repos", "events_url": "https://api.github.com/users/qingzhao69/events{/privacy}", "received_events_url": "https://api.github.com/users/qingzhao69/received_events", "type": "User", "site_admin": false}, "committer": {"login": "qingzhao69", "id": 89154636, "node_id": "MDQ6VXNlcjg5MTU0NjM2", "avatar_url": "https://avatars.githubusercontent.com/u/89154636?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qingzhao69", "html_url": "https://github.com/qingzhao69", "followers_url": "https://api.github.com/users/qingzhao69/followers", "following_url": "https://api.github.com/users/qingzhao69/following{/other_user}", "gists_url": "https://api.github.com/users/qingzhao69/gists{/gist_id}", "starred_url": "https://api.github.com/users/qingzhao69/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qingzhao69/subscriptions", "organizations_url": "https://api.github.com/users/qingzhao69/orgs", "repos_url": "https://api.github.com/users/qingzhao69/repos", "events_url": "https://api.github.com/users/qingzhao69/events{/privacy}", "received_events_url": "https://api.github.com/users/qingzhao69/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31e924c52f430d81f030a2fa9f60b73a5a0d2126", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31e924c52f430d81f030a2fa9f60b73a5a0d2126", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31e924c52f430d81f030a2fa9f60b73a5a0d2126"}], "stats": {"total": 79, "additions": 45, "deletions": 34}, "files": [{"sha": "3391be1fba7a4b82e496fb384393183f2f62351d", "filename": "gcc/testsuite/gcc.target/i386/auto-init-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896fec24c8ef59b3520f5ded69dcd5bcf643c1f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896fec24c8ef59b3520f5ded69dcd5bcf643c1f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-1.c?ref=896fec24c8ef59b3520f5ded69dcd5bcf643c1f9", "patch": "@@ -1,6 +1,6 @@\n /* Verify zero initialization for integer and pointer type automatic variables.  */\n /* { dg-do compile } */\n-/* { dg-options \"-ftrivial-auto-var-init=zero -fdump-rtl-expand\" } */\n+/* { dg-options \"-ftrivial-auto-var-init=zero -fdump-rtl-expand -fno-stack-protector -march=x86-64 -mtune=generic\" } */\n \n #ifndef __cplusplus\n # define bool _Bool"}, {"sha": "b23f733a403798877d82e75508daf3bdd384b26e", "filename": "gcc/testsuite/gcc.target/i386/auto-init-2.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896fec24c8ef59b3520f5ded69dcd5bcf643c1f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896fec24c8ef59b3520f5ded69dcd5bcf643c1f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-2.c?ref=896fec24c8ef59b3520f5ded69dcd5bcf643c1f9", "patch": "@@ -1,6 +1,6 @@\n /* Verify pattern initialization for integer and pointer type automatic variables.  */\n /* { dg-do compile } */\n-/* { dg-options \"-ftrivial-auto-var-init=pattern -fdump-rtl-expand\" } */\n+/* { dg-options \"-ftrivial-auto-var-init=pattern -fdump-rtl-expand -march=x86-64 -mtune=generic -msse\" } */\n \n #ifndef __cplusplus\n # define bool _Bool\n@@ -31,6 +31,8 @@ void foo()\n \n /* { dg-final { scan-rtl-dump-times \"0xfffffffffffffffe\" 2 \"expand\" } } */\n /* { dg-final { scan-rtl-dump-times \"0xfffffffffffffefe\" 1 \"expand\" } } */\n-/* { dg-final { scan-rtl-dump-times \"0xfffffffffefefefe\" 2 \"expand\" } } */\n-/* { dg-final { scan-rtl-dump-times \"0xfefefefefefefefe\" 3 \"expand\" } } */\n+/* { dg-final { scan-rtl-dump-times \"0xfffffffffefefefe\" 2 \"expand\" { target lp64 } } } */\n+/* { dg-final { scan-rtl-dump-times \"0xfefefefefefefefe\" 3 \"expand\" { target lp64 } } } */\n+/* { dg-final { scan-rtl-dump-times \"0xfffffffffefefefe\" 4 \"expand\" { target ia32 } } } */\n+/* { dg-final { scan-rtl-dump-times \"0xfefefefefefefefe\" 1 \"expand\" { target ia32 } } } */\n "}, {"sha": "df317616db36a03169873649786f26d47d646cd9", "filename": "gcc/testsuite/gcc.target/i386/auto-init-3.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896fec24c8ef59b3520f5ded69dcd5bcf643c1f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896fec24c8ef59b3520f5ded69dcd5bcf643c1f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-3.c?ref=896fec24c8ef59b3520f5ded69dcd5bcf643c1f9", "patch": "@@ -1,6 +1,6 @@\n /* Verify zero initialization for floating point type automatic variables.  */\n /* { dg-do compile } */\n-/* { dg-options \"-ftrivial-auto-var-init=zero\" } */\n+/* { dg-options \"-ftrivial-auto-var-init=zero -march=x86-64 -mtune=generic\" } */\n \n long double result;\n \n@@ -14,4 +14,5 @@ long double foo()\n   return result;\n }\n \n-/* { dg-final { scan-assembler-times \"pxor\\t\\\\\\%xmm0, \\\\\\%xmm0\" 3 } } */\n+/* { dg-final { scan-assembler-times \"pxor\\t\\\\\\%xmm0, \\\\\\%xmm0\" 3  { target lp64 } } } */\n+/* { dg-final { scan-assembler-times \"fldz\" 3  { target ia32} } } */"}, {"sha": "554a2c57eb673615beb4eca1927c3453208bcabc", "filename": "gcc/testsuite/gcc.target/i386/auto-init-4.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896fec24c8ef59b3520f5ded69dcd5bcf643c1f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896fec24c8ef59b3520f5ded69dcd5bcf643c1f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-4.c?ref=896fec24c8ef59b3520f5ded69dcd5bcf643c1f9", "patch": "@@ -1,6 +1,6 @@\n /* Verify pattern initialization for floating point type automatic variables.  */\n /* { dg-do compile } */\n-/* { dg-options \"-ftrivial-auto-var-init=pattern -fdump-rtl-expand\" } */\n+/* { dg-options \"-ftrivial-auto-var-init=pattern -fdump-rtl-expand -march=x86-64 -mtune=generic -msse\" } */\n \n long double result;\n \n@@ -14,7 +14,9 @@ long double foo()\n   return result;\n }\n \n-/* { dg-final { scan-rtl-dump-times \"0xfffffffffefefefe\" 1 \"expand\" } } */\n-/* { dg-final { scan-rtl-dump-times \"\\\\\\[0xfefefefefefefefe\\\\\\]\" 1 \"expand\" } } */\n-/* { dg-final { scan-rtl-dump-times \"0xfffffffffffffffe\\\\\\]\\\\\\) repeated x16\" 1 \"expand\" } } */\n+/* { dg-final { scan-rtl-dump-times \"0xfffffffffefefefe\" 1 \"expand\" { target lp64 } } } */\n+/* { dg-final { scan-rtl-dump-times \"\\\\\\[0xfefefefefefefefe\\\\\\]\" 1 \"expand\" { target lp64 } } } */\n+/* { dg-final { scan-rtl-dump-times \"0xfffffffffffffffe\\\\\\]\\\\\\) repeated x16\" 1 \"expand\" { target lp64 } } } */\n+/* { dg-final { scan-rtl-dump-times \"0xfffffffffefefefe\" 2 \"expand\" { target ia32 } } } */\n+/* { dg-final { scan-rtl-dump-times \"\\\\\\[0xfefefefefefefefe\\\\\\]\" 2 \"expand\" { target ia32 } } } */\n "}, {"sha": "27d971f8cf1145714b5ee96cd9a9331a2b4322f5", "filename": "gcc/testsuite/gcc.target/i386/auto-init-5.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896fec24c8ef59b3520f5ded69dcd5bcf643c1f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896fec24c8ef59b3520f5ded69dcd5bcf643c1f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-5.c?ref=896fec24c8ef59b3520f5ded69dcd5bcf643c1f9", "patch": "@@ -1,6 +1,6 @@\n /* Verify zero initialization for complex type automatic variables.  */\n /* { dg-do compile } */\n-/* { dg-options \"-ftrivial-auto-var-init=zero -fdump-rtl-expand\" } */\n+/* { dg-options \"-ftrivial-auto-var-init=zero\" } */\n \n \n _Complex long double result;\n@@ -15,6 +15,7 @@ _Complex long double foo()\n   return result;\n }\n \n-/* { dg-final { scan-assembler-times \"\\\\.long\\t0\" 14 } } */\n+/* { dg-final { scan-assembler-times \"\\\\.long\\t0\" 14 { target lp64 } } } */\n+/* { dg-final { scan-assembler-times \"\\\\.long\\t0\" 12 { target ia32 } } } */\n \n "}, {"sha": "f75081edce454b50f5d31151fc1a435bc5bb737d", "filename": "gcc/testsuite/gcc.target/i386/auto-init-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896fec24c8ef59b3520f5ded69dcd5bcf643c1f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896fec24c8ef59b3520f5ded69dcd5bcf643c1f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-6.c?ref=896fec24c8ef59b3520f5ded69dcd5bcf643c1f9", "patch": "@@ -1,6 +1,6 @@\n /* Verify pattern initialization for complex type automatic variables.  */\n /* { dg-do compile } */\n-/* { dg-options \"-ftrivial-auto-var-init=pattern -fdump-rtl-expand\" } */\n+/* { dg-options \"-ftrivial-auto-var-init=pattern -fdump-rtl-expand -march=x86-64 -mtune=generic -msse\" } */\n \n \n _Complex long double result;"}, {"sha": "7e32576d5909501e15cec831449e4d84e7d8e489", "filename": "gcc/testsuite/gcc.target/i386/auto-init-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896fec24c8ef59b3520f5ded69dcd5bcf643c1f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896fec24c8ef59b3520f5ded69dcd5bcf643c1f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-7.c?ref=896fec24c8ef59b3520f5ded69dcd5bcf643c1f9", "patch": "@@ -1,6 +1,6 @@\n /* Verify zero initialization for array, union, and structure type automatic variables.  */\n /* { dg-do compile } */\n-/* { dg-options \"-ftrivial-auto-var-init=zero -fdump-rtl-expand\" } */\n+/* { dg-options \"-ftrivial-auto-var-init=zero -fdump-rtl-expand -march=x86-64 -mtune=generic -fno-stack-protector -msse\" } */\n \n struct S\n {"}, {"sha": "666ee14d2bc9f2d99ab079385ad7f596df3a7927", "filename": "gcc/testsuite/gcc.target/i386/auto-init-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896fec24c8ef59b3520f5ded69dcd5bcf643c1f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896fec24c8ef59b3520f5ded69dcd5bcf643c1f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-8.c?ref=896fec24c8ef59b3520f5ded69dcd5bcf643c1f9", "patch": "@@ -1,6 +1,6 @@\n /* Verify pattern initialization for array, union, and structure type automatic variables.  */\n /* { dg-do compile } */\n-/* { dg-options \"-ftrivial-auto-var-init=pattern -fdump-rtl-expand\" } */\n+/* { dg-options \"-ftrivial-auto-var-init=pattern -fdump-rtl-expand -march=x86-64 -mtune=generic -msse\" } */\n \n struct S\n {"}, {"sha": "149a04f5b02be23fdf3851336507ff15b8de7418", "filename": "gcc/testsuite/gcc.target/i386/auto-init-padding-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896fec24c8ef59b3520f5ded69dcd5bcf643c1f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-padding-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896fec24c8ef59b3520f5ded69dcd5bcf643c1f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-padding-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-padding-1.c?ref=896fec24c8ef59b3520f5ded69dcd5bcf643c1f9", "patch": "@@ -1,7 +1,7 @@\n /* Verify zero initialization for structure type automatic variables with\n    padding.  */\n /* { dg-do compile } */\n-/* { dg-options \"-ftrivial-auto-var-init=zero -fdump-rtl-expand\" } */\n+/* { dg-options \"-ftrivial-auto-var-init=zero -fdump-rtl-expand -march=x86-64 -mtune=generic -msse\" } */\n \n struct test_aligned {\n         int internal1;"}, {"sha": "1125bcf0df153ffc8eca3b31c37b24f0ac0ee559", "filename": "gcc/testsuite/gcc.target/i386/auto-init-padding-10.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896fec24c8ef59b3520f5ded69dcd5bcf643c1f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-padding-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896fec24c8ef59b3520f5ded69dcd5bcf643c1f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-padding-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-padding-10.c?ref=896fec24c8ef59b3520f5ded69dcd5bcf643c1f9", "patch": "@@ -1,7 +1,7 @@\n /* Verify pattern initialization for array type with structure element with\n    padding.  */ \n /* { dg-do compile } */\n-/* { dg-options \"-ftrivial-auto-var-init=pattern -fdump-rtl-expand\" } */\n+/* { dg-options \"-ftrivial-auto-var-init=pattern -fdump-rtl-expand -march=x86-64 -mtune=generic -msse\" } */\n \n struct test_trailing_hole {\n         int one;"}, {"sha": "4f90ad21ebf52261b241d777a91dcda52ec279e4", "filename": "gcc/testsuite/gcc.target/i386/auto-init-padding-11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896fec24c8ef59b3520f5ded69dcd5bcf643c1f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-padding-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896fec24c8ef59b3520f5ded69dcd5bcf643c1f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-padding-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-padding-11.c?ref=896fec24c8ef59b3520f5ded69dcd5bcf643c1f9", "patch": "@@ -1,7 +1,7 @@\n /* Verify zero initialization for union type with structure field with\n    padding.  */ \n /* { dg-do compile } */\n-/* { dg-options \"-ftrivial-auto-var-init=zero -fdump-rtl-expand\" } */\n+/* { dg-options \"-ftrivial-auto-var-init=zero -fdump-rtl-expand -march=x86-64 -mtune=generic -msse\" } */\n \n struct test_trailing_hole {\n         int one;"}, {"sha": "21a1ee2f185a0e961027fcc4f6fec03589c5c3d0", "filename": "gcc/testsuite/gcc.target/i386/auto-init-padding-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896fec24c8ef59b3520f5ded69dcd5bcf643c1f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-padding-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896fec24c8ef59b3520f5ded69dcd5bcf643c1f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-padding-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-padding-12.c?ref=896fec24c8ef59b3520f5ded69dcd5bcf643c1f9", "patch": "@@ -1,7 +1,7 @@\n /* Verify pattern initialization for union type with structure field with\n    padding.  */ \n /* { dg-do compile } */\n-/* { dg-options \"-ftrivial-auto-var-init=pattern -fdump-rtl-expand\" } */\n+/* { dg-options \"-ftrivial-auto-var-init=pattern -fdump-rtl-expand -march=x86-64 -mtune=generic -msse\" } */\n \n struct test_trailing_hole {\n         int one;"}, {"sha": "483b79ace6c8de465205725a8efc24af04314e4c", "filename": "gcc/testsuite/gcc.target/i386/auto-init-padding-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896fec24c8ef59b3520f5ded69dcd5bcf643c1f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-padding-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896fec24c8ef59b3520f5ded69dcd5bcf643c1f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-padding-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-padding-2.c?ref=896fec24c8ef59b3520f5ded69dcd5bcf643c1f9", "patch": "@@ -1,7 +1,7 @@\n /* Verify pattern initialization for structure type automatic variables with\n    padding.  */\n /* { dg-do compile } */\n-/* { dg-options \"-ftrivial-auto-var-init=pattern -fdump-rtl-expand\" } */\n+/* { dg-options \"-ftrivial-auto-var-init=pattern -fdump-rtl-expand -march=x86-64 -mtune=generic -msse\" } */\n \n struct test_aligned {\n         int internal1;"}, {"sha": "220a9f26348c329dba31dc0a6a062c919807c20c", "filename": "gcc/testsuite/gcc.target/i386/auto-init-padding-3.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896fec24c8ef59b3520f5ded69dcd5bcf643c1f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-padding-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896fec24c8ef59b3520f5ded69dcd5bcf643c1f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-padding-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-padding-3.c?ref=896fec24c8ef59b3520f5ded69dcd5bcf643c1f9", "patch": "@@ -1,7 +1,7 @@\n /* Verify zero initialization for nested structure type automatic variables with\n    padding.  */\n /* { dg-do compile } */\n-/* { dg-options \"-ftrivial-auto-var-init=zero\" } */\n+/* { dg-options \"-ftrivial-auto-var-init=zero -march=x86-64\" } */\n \n struct test_aligned {\n         unsigned internal1;\n@@ -24,7 +24,9 @@ int foo ()\n }\n \n /* { dg-final { scan-assembler \"movl\\t\\\\\\$0,\" } } */\n-/* { dg-final { scan-assembler \"movl\\t\\\\\\$16,\" } } */\n-/* { dg-final { scan-assembler \"rep stosq\" } } */\n+/* { dg-final { scan-assembler \"movl\\t\\\\\\$16,\" { target lp64 } } } */\n+/* { dg-final { scan-assembler \"rep stosq\" { target lp64 } } } */\n+/* { dg-final { scan-assembler \"movl\\t\\\\\\$32,\" { target ia32 } } } */\n+/* { dg-final { scan-assembler \"rep stosl\" { target ia32 } } } */\n \n "}, {"sha": "2908b3ff716682636b550aa103c4ab895faa8e1c", "filename": "gcc/testsuite/gcc.target/i386/auto-init-padding-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896fec24c8ef59b3520f5ded69dcd5bcf643c1f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-padding-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896fec24c8ef59b3520f5ded69dcd5bcf643c1f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-padding-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-padding-4.c?ref=896fec24c8ef59b3520f5ded69dcd5bcf643c1f9", "patch": "@@ -1,7 +1,7 @@\n /* Verify pattern initialization for nested structure type automatic variables with\n    padding.  */\n /* { dg-do compile } */\n-/* { dg-options \"-ftrivial-auto-var-init=pattern -fdump-rtl-expand\" } */\n+/* { dg-options \"-ftrivial-auto-var-init=pattern -fdump-rtl-expand -march=x86-64 -mtune=generic -msse\" } */\n \n struct test_aligned {\n         unsigned internal1;"}, {"sha": "e17a621e6f47b2869b986a03d6fb8a4bf1e319d5", "filename": "gcc/testsuite/gcc.target/i386/auto-init-padding-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896fec24c8ef59b3520f5ded69dcd5bcf643c1f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-padding-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896fec24c8ef59b3520f5ded69dcd5bcf643c1f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-padding-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-padding-5.c?ref=896fec24c8ef59b3520f5ded69dcd5bcf643c1f9", "patch": "@@ -1,7 +1,7 @@\n /* Verify zero initialization for structure type automatic variables with\n    tail padding.  */\n /* { dg-do compile } */\n-/* { dg-options \"-ftrivial-auto-var-init=zero -fdump-rtl-expand\" } */\n+/* { dg-options \"-ftrivial-auto-var-init=zero -fdump-rtl-expand -march=x86-64 -mtune=generic -msse\" } */\n \n struct test_trailing_hole {\n         char *one;"}, {"sha": "754f8afeedfdc558caebf51105d157cf5df117f7", "filename": "gcc/testsuite/gcc.target/i386/auto-init-padding-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896fec24c8ef59b3520f5ded69dcd5bcf643c1f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-padding-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896fec24c8ef59b3520f5ded69dcd5bcf643c1f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-padding-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-padding-6.c?ref=896fec24c8ef59b3520f5ded69dcd5bcf643c1f9", "patch": "@@ -1,7 +1,7 @@\n /* Verify pattern initialization for structure type automatic variables with\n    tail padding.  */\n /* { dg-do compile } */\n-/* { dg-options \"-ftrivial-auto-var-init=pattern -fdump-rtl-expand\" } */\n+/* { dg-options \"-ftrivial-auto-var-init=pattern -fdump-rtl-expand -march=x86-64 -mtune=generic -msse\" } */\n \n struct test_trailing_hole {\n         char *one;"}, {"sha": "c136e1cffc40b1b383bba1326313c639f2c87a4f", "filename": "gcc/testsuite/gcc.target/i386/auto-init-padding-7.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896fec24c8ef59b3520f5ded69dcd5bcf643c1f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-padding-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896fec24c8ef59b3520f5ded69dcd5bcf643c1f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-padding-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-padding-7.c?ref=896fec24c8ef59b3520f5ded69dcd5bcf643c1f9", "patch": "@@ -1,7 +1,7 @@\n /* Verify zero initialization for structure type automatic variables with\n    padding and has explicit initialization.  */\n /* { dg-do compile } */\n-/* { dg-options \"-ftrivial-auto-var-init=zero\" } */\n+/* { dg-options \"-ftrivial-auto-var-init=zero -fdump-rtl-expand -march=x86-64 -mtune=generic -msse -fno-stack-protector\" } */\n \n struct test_trailing_hole {\n         int one;\n@@ -17,6 +17,7 @@ int foo ()\n   return var.four;\n }\n \n-/* { dg-final { scan-assembler-times \"movq\\t\\\\\\$0,\" 2 } } */\n+/* { dg-final { scan-rtl-dump-times \"const_int 0 \\\\\\[0\\\\\\]\\\\\\) repeated x16\" 1 \"expand\" { target ia32 } } } */\n+/* { dg-final { scan-rtl-dump-times \"const_int 0 \\\\\\[0\\\\\\]\\\\\\)\" 1 \"expand\" { target lp64 } } } */\n \n "}, {"sha": "45baa3c01a3444e8ef8a39d3ac9ba1b139b0dc70", "filename": "gcc/testsuite/gcc.target/i386/auto-init-padding-8.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896fec24c8ef59b3520f5ded69dcd5bcf643c1f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-padding-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896fec24c8ef59b3520f5ded69dcd5bcf643c1f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-padding-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-padding-8.c?ref=896fec24c8ef59b3520f5ded69dcd5bcf643c1f9", "patch": "@@ -1,7 +1,7 @@\n /* Verify pattern initialization for structure type automatic variables with\n    padding and has explicit initialization.  */\n /* { dg-do compile } */\n-/* { dg-options \"-ftrivial-auto-var-init=pattern\" } */\n+/* { dg-options \"-ftrivial-auto-var-init=pattern -fdump-rtl-expand -march=x86-64 -mtune=generic -msse -fno-stack-protector\" } */\n \n struct test_trailing_hole {\n         int one;\n@@ -17,6 +17,5 @@ int foo ()\n   return var.four;\n }\n \n-/* { dg-final { scan-assembler-times \"movq\\t\\\\\\$0,\" 2 } } */\n-\n-\n+/* { dg-final { scan-rtl-dump-times \"const_int 0 \\\\\\[0\\\\\\]\\\\\\) repeated x16\" 1 \"expand\" { target ia32 } } } */\n+/* { dg-final { scan-rtl-dump-times \"const_int 0 \\\\\\[0\\\\\\]\\\\\\)\" 1 \"expand\" { target lp64 } } } */"}, {"sha": "eafa3272dab176270e428f7e414e8757a971efdb", "filename": "gcc/testsuite/gcc.target/i386/auto-init-padding-9.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896fec24c8ef59b3520f5ded69dcd5bcf643c1f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-padding-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896fec24c8ef59b3520f5ded69dcd5bcf643c1f9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-padding-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fauto-init-padding-9.c?ref=896fec24c8ef59b3520f5ded69dcd5bcf643c1f9", "patch": "@@ -1,7 +1,7 @@\n /* Verify zero initialization for array type with structure element with\n    padding.  */ \n /* { dg-do compile } */\n-/* { dg-options \"-ftrivial-auto-var-init=zero\" } */\n+/* { dg-options \"-ftrivial-auto-var-init=zero -march=x86-64\" } */\n \n struct test_trailing_hole {\n         int one;\n@@ -19,4 +19,7 @@ int foo ()\n }\n \n /* { dg-final { scan-assembler \"movl\\t\\\\\\$0,\" } } */\n-/* { dg-final { scan-assembler \"rep stosq\" } } */\n+/* { dg-final { scan-assembler \"movl\\t\\\\\\$20,\" { target lp64} } } */\n+/* { dg-final { scan-assembler \"rep stosq\" { target lp64 } } } */\n+/* { dg-final { scan-assembler \"movl\\t\\\\\\$40,\" { target ia32} } } */\n+/* { dg-final { scan-assembler \"rep stosl\" { target ia32 } } } */"}]}