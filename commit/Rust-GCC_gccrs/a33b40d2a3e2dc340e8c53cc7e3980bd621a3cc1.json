{"sha": "a33b40d2a3e2dc340e8c53cc7e3980bd621a3cc1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTMzYjQwZDJhM2UyZGMzNDBlOGM1M2NjN2UzOTgwYmQ2MjFhM2NjMQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2000-04-20T14:27:59Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2000-04-20T14:27:59Z"}, "message": "ptrflags.C: New test.\n\n\t* g++.abi/ptrflags.C: New test.\n\t* g++.eh/catchptr1.C: Test incomplete pointer chains.\n\nFrom-SVN: r33282", "tree": {"sha": "df3934d6b787811a6501aaa215efcbb246fa13d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df3934d6b787811a6501aaa215efcbb246fa13d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a33b40d2a3e2dc340e8c53cc7e3980bd621a3cc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a33b40d2a3e2dc340e8c53cc7e3980bd621a3cc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a33b40d2a3e2dc340e8c53cc7e3980bd621a3cc1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a33b40d2a3e2dc340e8c53cc7e3980bd621a3cc1/comments", "author": null, "committer": null, "parents": [{"sha": "0a2409728b6ff51520182f6583416811c7d1a0f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a2409728b6ff51520182f6583416811c7d1a0f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a2409728b6ff51520182f6583416811c7d1a0f3"}], "stats": {"total": 108, "additions": 105, "deletions": 3}, "files": [{"sha": "1cda827a6ec74fc7542eeab83d269d3bce19be77", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a33b40d2a3e2dc340e8c53cc7e3980bd621a3cc1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a33b40d2a3e2dc340e8c53cc7e3980bd621a3cc1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a33b40d2a3e2dc340e8c53cc7e3980bd621a3cc1", "patch": "@@ -1,3 +1,8 @@\n+2000-04-20  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* g++.abi/ptrflags.C: New test.\n+\t* g++.eh/catchptr1.C: Test incomplete pointer chains.\n+\n 2000-04-19  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* gcc.dg/20000419-1.c: New test."}, {"sha": "b258e08c6af44677038d73b30235cb62fdb17996", "filename": "gcc/testsuite/g++.old-deja/g++.abi/ptrflags.C", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a33b40d2a3e2dc340e8c53cc7e3980bd621a3cc1/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.abi%2Fptrflags.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a33b40d2a3e2dc340e8c53cc7e3980bd621a3cc1/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.abi%2Fptrflags.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.abi%2Fptrflags.C?ref=a33b40d2a3e2dc340e8c53cc7e3980bd621a3cc1", "patch": "@@ -0,0 +1,62 @@\n+// Test rtti pointer flags\n+// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 15 Apr 2000 <nathan@nathan@codesourcery.com>\n+\n+#include <typeinfo>\n+\n+#if defined (__GXX_ABI_VERSION) && __GXX_ABI_VERSION >= 100\n+#include <cxxabi.h>\n+\n+struct A {int m;};\n+struct B;\n+\n+using namespace abi;\n+\n+int expect (int flags, type_info const &info)\n+{\n+  __pointer_class_type_info const *ptr =\n+      dynamic_cast <__pointer_class_type_info const *> (&info);\n+  if (!ptr)\n+    return 0;\n+  if (ptr->quals != flags)\n+    return 0;\n+  return 1;\n+}\n+\n+int main ()\n+{\n+  if (! expect (0, typeid (A *)))\n+    return 1;\n+  if (! expect (1, typeid (A const *)))\n+    return 2;\n+  if (! expect (2, typeid (A volatile *)))\n+    return 3;\n+  if (! expect (4, typeid (A __restrict__ *)))\n+    return 4;\n+  if (! expect (0, typeid (void A::*))\n+    return 5;\n+  if (! expect (0, typeid (void A::**))\n+    return 6;\n+\n+  if (! expect (8 | 0, typeid (B *)))\n+    return 1;\n+  if (! expect (8 | 1, typeid (B const *)))\n+    return 2;\n+  if (! expect (8 | 2, typeid (B volatile *)))\n+    return 3;\n+  if (! expect (8 | 4, typeid (B __restrict__ *)))\n+    return 4;\n+  if (! expect (8 | 0, typeid (void B::*))\n+    return 5;\n+  if (! expect (8 | 0, typeid (void B::**))\n+    return 6;\n+  \n+  return 0;\n+}\n+\n+#else\n+int main ()\n+{\n+  return 0;\n+}\n+#endif"}, {"sha": "c88b36aa12bab6ae954c43109784f21151673b02", "filename": "gcc/testsuite/g++.old-deja/g++.eh/catchptr1.C", "status": "modified", "additions": 38, "deletions": 3, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a33b40d2a3e2dc340e8c53cc7e3980bd621a3cc1/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fcatchptr1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a33b40d2a3e2dc340e8c53cc7e3980bd621a3cc1/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fcatchptr1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fcatchptr1.C?ref=a33b40d2a3e2dc340e8c53cc7e3980bd621a3cc1", "patch": "@@ -27,6 +27,7 @@ int test0 ()\n     {\n       return 0;\n     }\n+  return -1;\n }\n \n int test1 ()\n@@ -44,6 +45,7 @@ int test1 ()\n     {\n       return 0;\n     }\n+  return -1;\n }\n \n int test2 ()\n@@ -61,6 +63,7 @@ int test2 ()\n     {\n       return 1;\n     }\n+  return -1;\n }\n \n int test3 ()\n@@ -78,6 +81,7 @@ int test3 ()\n     {\n       return 1;\n     }\n+  return -1;\n }\n \n int test4 ()\n@@ -100,6 +104,7 @@ int test4 ()\n     {\n       return 2;\n     }\n+  return -1;\n }\n \n int test5 ()\n@@ -116,6 +121,7 @@ int test5 ()\n     {\n       return 1;\n     }\n+  return -1;\n }\n \n int test6 ()\n@@ -148,6 +154,7 @@ int test6 ()\n     {\n       return 1;\n     }\n+  return -1;\n }\n \n int test7 ()\n@@ -172,11 +179,13 @@ int test7 ()\n     {\n       return 3;\n     }\n+  return -1;\n }\n \n-#if 0\n int test8 ()\n {\n+#if defined (__GXX_ABI_VERSION) && __GXX_ABI_VERSION >= 100\n+// old-abi fails this test, by segfaulting in the runtime.\n   try\n     {\n       throw (B **)0;\n@@ -193,8 +202,35 @@ int test8 ()\n     {\n       return 2;\n     }\n+  return -1;\n+#endif\n+  return 0;\n }\n+\n+int test9 ()\n+{\n+#if defined (__GXX_ABI_VERSION) && __GXX_ABI_VERSION >= 100\n+// old-abi fails this test, by segfaulting in the runtime.\n+  try\n+    {\n+      throw (B **)0;\n+    }\n+  catch (C const *const *)\n+    {\n+      return 1;\n+    }\n+  catch (B const *const *)\n+    {\n+      return 0;\n+    }\n+  catch (...)\n+    {\n+      return 2;\n+    }\n+  return -1;\n #endif\n+  return 0;\n+}\n \n static int (*tests[])() =\n {\n@@ -208,9 +244,8 @@ static int (*tests[])() =\n   test6,\n   test7,\n   \n-#if 0\n   test8,\n-#endif\n+  test9,\n   \n   NULL\n };"}]}