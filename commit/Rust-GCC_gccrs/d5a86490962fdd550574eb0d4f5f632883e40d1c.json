{"sha": "d5a86490962fdd550574eb0d4f5f632883e40d1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDVhODY0OTA5NjJmZGQ1NTA1NzRlYjBkNGY1ZjYzMjg4M2U0MGQxYw==", "commit": {"author": {"name": "Dimitar Dimitrov", "email": "dimitar@dinux.eu", "date": "2020-07-09T19:04:38Z"}, "committer": {"name": "Dimitar Dimitrov", "email": "dimitar@dinux.eu", "date": "2020-07-21T15:35:44Z"}, "message": "testsute: Add expected warning for packed attribute\n\nTargets which pack structures by default get warnings for packed structure\nattributes. This is expected, so add markers in the test cases.\n\ngcc/testsuite/ChangeLog:\n\n\t* c-c++-common/Waddress-of-packed-member-2.c: Add dg-warning for\n\tignored attribute if target is default_packed.\n\t* c-c++-common/Wattributes.c: Ditto.\n\t* c-c++-common/attr-copy.c: Ditto.\n\t* c-c++-common/builtin-has-attribute-4.c: Ditto.\n\t* c-c++-common/pr51628-29.c: Ditto.\n\t* c-c++-common/pr51628-30.c: Ditto.\n\t* c-c++-common/pr51628-32.c: Ditto.\n\t* gcc.dg/Wattributes-6.c: Ditto.\n\t* gcc.dg/attr-copy-4.c: Ditto.\n\t* gcc.dg/attr-copy-8.c: Ditto.\n\nSigned-off-by: Dimitar Dimitrov <dimitar@dinux.eu>", "tree": {"sha": "ab9924ebe78ffcfa03915d54c5408c72c3e3f191", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab9924ebe78ffcfa03915d54c5408c72c3e3f191"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d5a86490962fdd550574eb0d4f5f632883e40d1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5a86490962fdd550574eb0d4f5f632883e40d1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5a86490962fdd550574eb0d4f5f632883e40d1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5a86490962fdd550574eb0d4f5f632883e40d1c/comments", "author": null, "committer": null, "parents": [{"sha": "6741411b033a7e8eae96d5a85e24e5be214757dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6741411b033a7e8eae96d5a85e24e5be214757dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6741411b033a7e8eae96d5a85e24e5be214757dd"}], "stats": {"total": 39, "additions": 35, "deletions": 4}, "files": [{"sha": "802dd8156cbda152c6d79a8d815d96debdf967e1", "filename": "gcc/testsuite/c-c++-common/Waddress-of-packed-member-2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5a86490962fdd550574eb0d4f5f632883e40d1c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWaddress-of-packed-member-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5a86490962fdd550574eb0d4f5f632883e40d1c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWaddress-of-packed-member-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWaddress-of-packed-member-2.c?ref=d5a86490962fdd550574eb0d4f5f632883e40d1c", "patch": "@@ -15,6 +15,7 @@ struct s {\n struct t {\n   char c;\n   struct r p __attribute__((packed));\n+  /* { dg-warning \"attribute ignored\" \"\" { target default_packed } .-1 } */\n   struct r u;\n };\n "}, {"sha": "4ad90441b4de54e7ecdf8f87a27739fe38602bc5", "filename": "gcc/testsuite/c-c++-common/Wattributes.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5a86490962fdd550574eb0d4f5f632883e40d1c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWattributes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5a86490962fdd550574eb0d4f5f632883e40d1c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWattributes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWattributes.c?ref=d5a86490962fdd550574eb0d4f5f632883e40d1c", "patch": "@@ -21,7 +21,7 @@ PackedAligned { int i; };\n struct ATTR ((aligned (2)))\n AlignedMemberPacked\n {\n-  int ATTR ((packed)) i;\n+  int ATTR ((packed)) i; // { dg-warning \"attribute ignored\" \"\" { target default_packed } }\n };\n \n struct ATTR ((packed))"}, {"sha": "f0db0fd1a274f0d29ec555def7339ef083a67136", "filename": "gcc/testsuite/c-c++-common/attr-copy.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5a86490962fdd550574eb0d4f5f632883e40d1c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-copy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5a86490962fdd550574eb0d4f5f632883e40d1c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-copy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-copy.c?ref=d5a86490962fdd550574eb0d4f5f632883e40d1c", "patch": "@@ -21,6 +21,7 @@ struct C\n {\n   char c;\n   ATTR (copy ((bar (), ((struct A *)(0))[0]))) int i;\n+  /* { dg-warning \"attribute ignored\" \"\" { target default_packed } .-1 } */\n };\n \n /* Verify the attribute has been copied.  */"}, {"sha": "3a960aae2ff601e3d2fde89c927b48b44ae9b4ec", "filename": "gcc/testsuite/c-c++-common/builtin-has-attribute-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5a86490962fdd550574eb0d4f5f632883e40d1c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fbuiltin-has-attribute-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5a86490962fdd550574eb0d4f5f632883e40d1c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fbuiltin-has-attribute-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fbuiltin-has-attribute-4.c?ref=d5a86490962fdd550574eb0d4f5f632883e40d1c", "patch": "@@ -130,7 +130,7 @@ struct PackedMember\n   char c;\n   short s;\n   int i;\n-  ATTR (packed) int a[2];\n+  ATTR (packed) int a[2]; /* { dg-warning \"attribute ignored\" \"\" { target default_packed } } */\n } gpak[2];\n \n void test_packed (struct PackedMember *p)"}, {"sha": "1ad9a7d2d9f630f0f2a33365e16cfe433b1a476b", "filename": "gcc/testsuite/c-c++-common/pr51628-29.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5a86490962fdd550574eb0d4f5f632883e40d1c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-29.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5a86490962fdd550574eb0d4f5f632883e40d1c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-29.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-29.c?ref=d5a86490962fdd550574eb0d4f5f632883e40d1c", "patch": "@@ -5,6 +5,7 @@\n struct A { int i; };\n struct B { struct A a; };\n struct C { struct B b __attribute__ ((packed)); };\n+/* { dg-warning \"attribute ignored\" \"\" { target default_packed } .-1 } */\n \n extern struct C *p;\n "}, {"sha": "387fc71db13dcec155bd4548b992b5f207e01e36", "filename": "gcc/testsuite/c-c++-common/pr51628-30.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5a86490962fdd550574eb0d4f5f632883e40d1c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-30.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5a86490962fdd550574eb0d4f5f632883e40d1c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-30.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-30.c?ref=d5a86490962fdd550574eb0d4f5f632883e40d1c", "patch": "@@ -5,6 +5,7 @@\n struct A { __complex int i; };\n struct B { struct A a; };\n struct C { struct B b __attribute__ ((packed)); };\n+/* { dg-warning \"attribute ignored\" \"\" { target default_packed } .-1 } */\n \n extern struct C *p;\n "}, {"sha": "908c0b8cbf4c2086deb7a0cd649cf94c51d2ad65", "filename": "gcc/testsuite/c-c++-common/pr51628-32.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5a86490962fdd550574eb0d4f5f632883e40d1c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5a86490962fdd550574eb0d4f5f632883e40d1c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-32.c?ref=d5a86490962fdd550574eb0d4f5f632883e40d1c", "patch": "@@ -11,6 +11,7 @@ struct B\n {\n    char c;\n    __attribute ((packed)) struct A ar[4];\n+   /* { dg-warning \"attribute ignored\" \"\" { target default_packed } .-1 } */\n };\n \n struct B b;"}, {"sha": "4ba59bf2806dbe854d4aff2b68da2bc08cae3859", "filename": "gcc/testsuite/gcc.dg/Wattributes-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5a86490962fdd550574eb0d4f5f632883e40d1c/gcc%2Ftestsuite%2Fgcc.dg%2FWattributes-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5a86490962fdd550574eb0d4f5f632883e40d1c/gcc%2Ftestsuite%2Fgcc.dg%2FWattributes-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWattributes-6.c?ref=d5a86490962fdd550574eb0d4f5f632883e40d1c", "patch": "@@ -21,7 +21,7 @@ PackedAligned { int i; };\n struct ATTR ((aligned (2)))\n AlignedMemberPacked\n {\n-  int ATTR ((packed)) i;\n+  int ATTR ((packed)) i; // { dg-warning \"attribute ignored\" \"\" { target default_packed } }\n };\n \n struct ATTR ((packed))"}, {"sha": "796724bb9505d0efe79be77af8922fa3fad9c47e", "filename": "gcc/testsuite/gcc.dg/attr-copy-4.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5a86490962fdd550574eb0d4f5f632883e40d1c/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-copy-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5a86490962fdd550574eb0d4f5f632883e40d1c/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-copy-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-copy-4.c?ref=d5a86490962fdd550574eb0d4f5f632883e40d1c", "patch": "@@ -21,7 +21,8 @@ Assert (__alignof (struct PackedA) == __alignof (struct PackedB));\n struct PackedMember\n {\n   char c;\n-  ATTR ((copy ((struct PackedB*)0))) double packed_mem;\n+  ATTR ((copy ((struct PackedB*)0))) double packed_mem; \n+  /* { dg-warning \"attribute ignored\" \"\" { target default_packed } .-1 } */\n };\n \n Assert (__alignof (struct PackedMember) == 1);"}, {"sha": "7195f6b19f8728207712dfe870d7e12cdac1ebb0", "filename": "gcc/testsuite/gcc.dg/attr-copy-8.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5a86490962fdd550574eb0d4f5f632883e40d1c/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-copy-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5a86490962fdd550574eb0d4f5f632883e40d1c/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-copy-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-copy-8.c?ref=d5a86490962fdd550574eb0d4f5f632883e40d1c", "patch": "@@ -21,41 +21,66 @@ extern B *pb;\n typedef struct C\n {\n   ATTR (copy ((struct A *)0)) short m_pa_0;\n+  /* { dg-warning \"attribute ignored\" \"\" { target default_packed } .-1 } */\n   ATTR (copy ((struct A *)(1, 0))) int m_pa_1_0;\n+  /* { dg-warning \"attribute ignored\" \"\" { target default_packed } .-1 } */\n   ATTR (copy ((struct A *)(0, 1))) long m_pa_0_1;\n+  /* { dg-warning \"attribute ignored\" \"\" { target default_packed } .-1 } */\n \n   ATTR (copy (*(struct A *)0)) short m_xpa_0;\n+  /* { dg-warning \"attribute ignored\" \"\" { target default_packed } .-1 } */\n   ATTR (copy (*(struct A *)(1, 0))) int m_xpa_1_0;\n+  /* { dg-warning \"attribute ignored\" \"\" { target default_packed } .-1 } */\n   ATTR (copy (*(struct A *)(0, 1))) long m_xpa_0_1;\n+  /* { dg-warning \"attribute ignored\" \"\" { target default_packed } .-1 } */\n \n   ATTR (copy (((struct A *)0)[0])) short m_arpa_0;\n+  /* { dg-warning \"attribute ignored\" \"\" { target default_packed } .-1 } */\n   ATTR (copy (((struct A *)(1, 0))[0])) int m_arpa_1_0;\n+  /* { dg-warning \"attribute ignored\" \"\" { target default_packed } .-1 } */\n   ATTR (copy (((struct A *)(0, 1))[0])) long m_arpa_0_1;\n+  /* { dg-warning \"attribute ignored\" \"\" { target default_packed } .-1 } */\n \n   /* Also exercise COMPONENT_REF, ARRAY_REF, and INDIRECT_REF.  */\n   ATTR (copy (a)) short m_ra;\n+  /* { dg-warning \"attribute ignored\" \"\" { target default_packed } .-1 } */\n   ATTR (copy (b.a)) int m_rb_a;\n+  /* { dg-warning \"attribute ignored\" \"\" { target default_packed } .-1 } */\n   ATTR (copy (b.pa)) long m_rb_pa;\n+  /* { dg-warning \"attribute ignored\" \"\" { target default_packed } .-1 } */\n \n   ATTR (copy (&a)) short m_ara;\n+  /* { dg-warning \"attribute ignored\" \"\" { target default_packed } .-1 } */\n   ATTR (copy (&b.a)) int m_arb_a;\n+  /* { dg-warning \"attribute ignored\" \"\" { target default_packed } .-1 } */\n   ATTR (copy (*b.pa)) long m_xb_pa;\n+  /* { dg-warning \"attribute ignored\" \"\" { target default_packed } .-1 } */\n   ATTR (copy (b.pa[0])) long m_arb_pa;\n+  /* { dg-warning \"attribute ignored\" \"\" { target default_packed } .-1 } */\n \n   ATTR (copy (*pa)) short m_xpa;\n+  /* { dg-warning \"attribute ignored\" \"\" { target default_packed } .-1 } */\n   ATTR (copy (pa[0])) short m_arpa;\n+  /* { dg-warning \"attribute ignored\" \"\" { target default_packed } .-1 } */\n \n   ATTR (copy (ab[0].a)) int m_arab_a;\n+  /* { dg-warning \"attribute ignored\" \"\" { target default_packed } .-1 } */\n   ATTR (copy (ab[1].pa)) long m_arab_pa;\n+  /* { dg-warning \"attribute ignored\" \"\" { target default_packed } .-1 } */\n   ATTR (copy (*ab[2].pa)) int m_xarab_pa;\n+  /* { dg-warning \"attribute ignored\" \"\" { target default_packed } .-1 } */\n   ATTR (copy (ab[3].pa->bf)) unsigned int m_arab_pa_bf: 1;\n \n   ATTR (copy (pb->a)) int m_pb_a;\n+  /* { dg-warning \"attribute ignored\" \"\" { target default_packed } .-1 } */\n   ATTR (copy (pb->pa)) long m_pb_pa;\n+  /* { dg-warning \"attribute ignored\" \"\" { target default_packed } .-1 } */\n   ATTR (copy (*pb->pa)) int m_xpb_pa;\n+  /* { dg-warning \"attribute ignored\" \"\" { target default_packed } .-1 } */\n   ATTR (copy (pb->pa->bf)) unsigned int m_pb_pa_bf: 1;\n \n   ATTR (aligned (4), copy ((struct A *)(0))) short m_a4_pa_0;\n+  /* { dg-warning \"attribute ignored\" \"\" { target default_packed } .-1 } */\n } C;\n \n "}]}