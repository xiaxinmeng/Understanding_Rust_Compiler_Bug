{"sha": "59f2e9d83d69ae2a714b02861809fc3bec9c9e2f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTlmMmU5ZDgzZDY5YWUyYTcxNGIwMjg2MTgwOWZjM2JlYzljOWUyZg==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2014-10-20T15:30:50Z"}, "committer": {"name": "Andrew Macleod", "email": "amacleod@gcc.gnu.org", "date": "2014-10-20T15:30:50Z"}, "message": "cfgrtl.h: New.\n\n\n\n2014-10-20  Andrew MacLeod  <amacleod@redhat.com>\n\n\t* cfgrtl.h: New.  Add prototypes for cfgrtl.c.\n\t* basic-block.h: Remove prototypes for cfgrtl.c.\n\t* cfghooks.h (cfg_layout_initialize, cfg_layout_finalize): Move\n\tprototypes to cfgrtl.h.\n\t* profile.h (profile_info): Add extern export declaration.\n\t* rtl.h: Remove prototypes for cfgrtl.h.\n\t* tree-cfg.h (gt_ggc_mx, gt_pch_nx): Move prototypes to here.\n\t* ipa-inline.c: Include profile.h.\n\t* loop-unroll.c: Ditto.\n\t* modulo-sched.c: Ditto.\n\t* postreload-gcse.c: Ditto.\n\t* predict.c: Ditto.\n\t* sched-ebb.c: Ditto.\n\t* sched-rgn.c: Ditto.\n\t* tracer.c: Ditto.\n\t* tree-ssa-loop-ivcanon.c: Ditto.\n\nFrom-SVN: r216485", "tree": {"sha": "9e3afc6bbe5e7e9108701cba48e7a774ae350ad9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e3afc6bbe5e7e9108701cba48e7a774ae350ad9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59f2e9d83d69ae2a714b02861809fc3bec9c9e2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59f2e9d83d69ae2a714b02861809fc3bec9c9e2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59f2e9d83d69ae2a714b02861809fc3bec9c9e2f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59f2e9d83d69ae2a714b02861809fc3bec9c9e2f/comments", "author": null, "committer": null, "parents": [{"sha": "948cf550b44fc0cca1c2eb6688d37ca93e99cb68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/948cf550b44fc0cca1c2eb6688d37ca93e99cb68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/948cf550b44fc0cca1c2eb6688d37ca93e99cb68"}], "stats": {"total": 148, "additions": 97, "deletions": 51}, "files": [{"sha": "cbc899c2c5eb0aa8f87c779c715a30c1c381be8d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59f2e9d83d69ae2a714b02861809fc3bec9c9e2f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59f2e9d83d69ae2a714b02861809fc3bec9c9e2f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=59f2e9d83d69ae2a714b02861809fc3bec9c9e2f", "patch": "@@ -1,3 +1,22 @@\n+2014-10-20  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* cfgrtl.h: New.  Add prototypes for cfgrtl.c.\n+\t* basic-block.h: Remove prototypes for cfgrtl.c.\n+\t* cfghooks.h (cfg_layout_initialize, cfg_layout_finalize): Move\n+\tprototypes to cfgrtl.h.\n+\t* profile.h (profile_info): Add extern export declaration.\n+\t* rtl.h: Remove prototypes for cfgrtl.h.\n+\t* tree-cfg.h (gt_ggc_mx, gt_pch_nx): Move prototypes to here.\n+\t* ipa-inline.c: Include profile.h.\n+\t* loop-unroll.c: Ditto.\n+\t* modulo-sched.c: Ditto.\n+\t* postreload-gcse.c: Ditto.\n+\t* predict.c: Ditto.\n+\t* sched-ebb.c: Ditto.\n+\t* sched-rgn.c: Ditto.\n+\t* tracer.c: Ditto.\n+\t* tree-ssa-loop-ivcanon.c: Ditto.\n+\n 2014-10-20  Richard Biener  <rguenther@suse.de>\n \n \t* tree-vect-slp.c (vect_get_and_check_slp_defs): Try swapping"}, {"sha": "829d93454ca6fd28cefee10bb02b9fd1bd2a68cf", "filename": "gcc/basic-block.h", "status": "modified", "additions": 1, "deletions": 39, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59f2e9d83d69ae2a714b02861809fc3bec9c9e2f/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59f2e9d83d69ae2a714b02861809fc3bec9c9e2f/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=59f2e9d83d69ae2a714b02861809fc3bec9c9e2f", "patch": "@@ -29,6 +29,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"hard-reg-set.h\"\n #include \"input.h\"\n #include \"function.h\"\n+#include \"cfgrtl.h\"\n \n /* Use gcov_type to hold basic block counters.  Should be at least\n    64bit.  Although a counter cannot be negative, we use a signed\n@@ -64,12 +65,6 @@ struct GTY((user)) edge_def {\n \t\t\t\t   in profile.c  */\n };\n \n-\n-/* Garbage collection and PCH support for edge_def.  */\n-extern void gt_ggc_mx (edge_def *e);\n-extern void gt_pch_nx (edge_def *e);\n-extern void gt_pch_nx (edge_def *e, gt_pointer_operator, void *);\n-\n /* Masks for edge.flags.  */\n #define DEF_EDGE_FLAG(NAME,IDX) EDGE_##NAME = 1 << IDX ,\n enum cfg_edge_flags {\n@@ -87,10 +82,6 @@ enum cfg_edge_flags {\n #define EDGE_COMPLEX \\\n   (EDGE_ABNORMAL | EDGE_ABNORMAL_CALL | EDGE_EH | EDGE_PRESERVE)\n \n-/* Counter summary from the last set of coverage counts read by\n-   profile.c.  */\n-extern const struct gcov_ctr_summary *profile_info;\n-\n /* Structure to gather statistic about profile consistency, per pass.\n    An array of this structure, indexed by pass static number, is allocated\n    in passes.c.  The structure is defined here so that different CFG modes\n@@ -122,8 +113,6 @@ struct profile_record\n   bool run;\n };\n \n-/* Declared in cfgloop.h.  */\n-struct loop;\n \n struct GTY(()) rtl_bb_info {\n   /* The first insn of the block is embedded into bb->il.x.  */\n@@ -391,16 +380,9 @@ struct GTY(()) control_flow_graph {\n /* The two blocks that are always in the cfg.  */\n #define NUM_FIXED_BLOCKS (2)\n \n-extern void compute_bb_for_insn (void);\n-extern unsigned int free_bb_for_insn (void);\n-extern void update_bb_for_insn (basic_block);\n \n-extern void insert_insn_on_edge (rtx, edge);\n basic_block split_edge_and_insert (edge, rtx_insn *);\n \n-extern void commit_one_edge_insertion (edge e);\n-extern void commit_edge_insertions (void);\n-\n extern edge unchecked_make_edge (basic_block, basic_block, int);\n extern edge cached_make_edge (sbitmap, basic_block, basic_block, int);\n extern edge make_edge (basic_block, basic_block, int);\n@@ -409,8 +391,6 @@ extern void remove_edge_raw (edge);\n extern void redirect_edge_succ (edge, basic_block);\n extern edge redirect_edge_succ_nodup (edge, basic_block);\n extern void redirect_edge_pred (edge, basic_block);\n-extern basic_block create_basic_block_structure (rtx_insn *, rtx_insn *,\n-\t\t\t\t\t\t rtx_note *, basic_block);\n extern void clear_bb_flags (void);\n extern void dump_bb_info (FILE *, basic_block, int, int, bool, bool);\n extern void dump_edge_info (FILE *, edge, int, int);\n@@ -797,19 +777,6 @@ extern void compute_dominance_frontiers (struct bitmap_head *);\n extern bitmap compute_idf (bitmap, struct bitmap_head *);\n extern basic_block * single_pred_before_succ_order (void);\n \n-/* In cfgrtl.c  */\n-extern rtx block_label (basic_block);\n-extern rtx_note *bb_note (basic_block);\n-extern bool purge_all_dead_edges (void);\n-extern bool purge_dead_edges (basic_block);\n-extern bool fixup_abnormal_edges (void);\n-extern basic_block force_nonfallthru_and_redirect (edge, basic_block, rtx);\n-extern bool contains_no_active_insn_p (const_basic_block);\n-extern bool forwarder_block_p (const_basic_block);\n-extern bool can_fallthru (basic_block, basic_block);\n-extern void emit_barrier_after_bb (basic_block bb);\n-extern void fixup_partitions (void);\n-\n /* In cfgbuild.c.  */\n extern void find_many_sub_basic_blocks (sbitmap);\n extern void rtl_make_eh_edge (sbitmap, basic_block, rtx);\n@@ -825,7 +792,6 @@ extern int flow_find_head_matching_sequence (basic_block, basic_block,\n \n extern bool delete_unreachable_blocks (void);\n \n-extern void update_br_prob_note (basic_block);\n extern bool inside_basic_block_p (const rtx_insn *);\n extern bool control_flow_insn_p (const rtx_insn *);\n extern rtx_insn *get_last_bb_insn (basic_block);\n@@ -875,11 +841,7 @@ extern basic_block next_dom_son (enum cdi_direction, basic_block);\n unsigned bb_dom_dfs_in (enum cdi_direction, basic_block);\n unsigned bb_dom_dfs_out (enum cdi_direction, basic_block);\n \n-extern edge try_redirect_by_replacing_jump (edge, basic_block, bool);\n-extern void break_superblocks (void);\n-extern void relink_block_chain (bool);\n extern void update_bb_profile_for_threading (basic_block, int, gcov_type, edge);\n-extern void init_rtl_bb_info (basic_block);\n \n extern void initialize_original_copy_tables (void);\n extern void free_original_copy_tables (void);"}, {"sha": "6a91bd96c6cda24f6c6485d0ff2cc7b27cb6b5f9", "filename": "gcc/cfghooks.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59f2e9d83d69ae2a714b02861809fc3bec9c9e2f/gcc%2Fcfghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59f2e9d83d69ae2a714b02861809fc3bec9c9e2f/gcc%2Fcfghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfghooks.h?ref=59f2e9d83d69ae2a714b02861809fc3bec9c9e2f", "patch": "@@ -208,9 +208,6 @@ extern void copy_bbs (basic_block *, unsigned, basic_block *,\n \n void account_profile_record (struct profile_record *, int);\n \n-extern void cfg_layout_initialize (unsigned int);\n-extern void cfg_layout_finalize (void);\n-\n /* Hooks containers.  */\n extern struct cfg_hooks gimple_cfg_hooks;\n extern struct cfg_hooks rtl_cfg_hooks;"}, {"sha": "96668ed6872ab4b0db713ba78e3f4011c5a129a7", "filename": "gcc/cfgrtl.h", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59f2e9d83d69ae2a714b02861809fc3bec9c9e2f/gcc%2Fcfgrtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59f2e9d83d69ae2a714b02861809fc3bec9c9e2f/gcc%2Fcfgrtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.h?ref=59f2e9d83d69ae2a714b02861809fc3bec9c9e2f", "patch": "@@ -0,0 +1,58 @@\n+/* Define control flow data structures for the CFG.\n+   Copyright (C) 2014 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GCC_CFGRTL_H\n+#define GCC_CFGRTL_H\n+\n+extern void delete_insn (rtx);\n+extern void delete_insn_and_edges (rtx_insn *);\n+extern void delete_insn_chain (rtx, rtx, bool);\n+extern basic_block create_basic_block_structure (rtx_insn *, rtx_insn *,\n+\t\t\t\t\t\t rtx_note *, basic_block);\n+extern void compute_bb_for_insn (void);\n+extern unsigned int free_bb_for_insn (void);\n+extern rtx_insn *entry_of_function (void);\n+extern void update_bb_for_insn (basic_block);\n+extern bool contains_no_active_insn_p (const_basic_block);\n+extern bool forwarder_block_p (const_basic_block);\n+extern bool can_fallthru (basic_block, basic_block);\n+extern rtx_note *bb_note (basic_block);\n+extern rtx block_label (basic_block);\n+extern edge try_redirect_by_replacing_jump (edge, basic_block, bool);\n+extern void emit_barrier_after_bb (basic_block bb);\n+extern basic_block force_nonfallthru_and_redirect (edge, basic_block, rtx);\n+extern void insert_insn_on_edge (rtx, edge);\n+extern void commit_one_edge_insertion (edge e);\n+extern void commit_edge_insertions (void);\n+extern void print_rtl_with_bb (FILE *, const rtx_insn *, int);\n+extern void update_br_prob_note (basic_block);\n+extern rtx_insn *get_last_bb_insn (basic_block);\n+extern void fixup_partitions (void);\n+extern bool purge_dead_edges (basic_block);\n+extern bool purge_all_dead_edges (void);\n+extern bool fixup_abnormal_edges (void);\n+extern rtx_insn *unlink_insn_chain (rtx_insn *, rtx_insn *);\n+extern void relink_block_chain (bool);\n+extern rtx_insn *duplicate_insn_chain (rtx_insn *, rtx_insn *);\n+extern void cfg_layout_initialize (unsigned int);\n+extern void cfg_layout_finalize (void);\n+extern void break_superblocks (void);\n+extern void init_rtl_bb_info (basic_block);\n+\n+#endif /* GCC_CFGRTL_H */"}, {"sha": "e79a4dd8e2147766dc6ad85a0dc8e93a1e3722c9", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59f2e9d83d69ae2a714b02861809fc3bec9c9e2f/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59f2e9d83d69ae2a714b02861809fc3bec9c9e2f/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=59f2e9d83d69ae2a714b02861809fc3bec9c9e2f", "patch": "@@ -108,6 +108,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coverage.h\"\n #include \"rtl.h\"\n #include \"bitmap.h\"\n+#include \"profile.h\"\n #include \"basic-block.h\"\n #include \"tree-ssa-alias.h\"\n #include \"internal-fn.h\""}, {"sha": "c9a08124de510294f576fb486a0a22d5fb9357b0", "filename": "gcc/loop-unroll.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59f2e9d83d69ae2a714b02861809fc3bec9c9e2f/gcc%2Floop-unroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59f2e9d83d69ae2a714b02861809fc3bec9c9e2f/gcc%2Floop-unroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-unroll.c?ref=59f2e9d83d69ae2a714b02861809fc3bec9c9e2f", "patch": "@@ -25,6 +25,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"hard-reg-set.h\"\n #include \"obstack.h\"\n+#include \"profile.h\"\n #include \"basic-block.h\"\n #include \"cfgloop.h\"\n #include \"params.h\""}, {"sha": "52cc37628c351a84c02e2f9f1493aa4ab41b5e3a", "filename": "gcc/modulo-sched.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59f2e9d83d69ae2a714b02861809fc3bec9c9e2f/gcc%2Fmodulo-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59f2e9d83d69ae2a714b02861809fc3bec9c9e2f/gcc%2Fmodulo-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmodulo-sched.c?ref=59f2e9d83d69ae2a714b02861809fc3bec9c9e2f", "patch": "@@ -34,6 +34,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"machmode.h\"\n #include \"input.h\"\n #include \"function.h\"\n+#include \"profile.h\"\n #include \"flags.h\"\n #include \"insn-config.h\"\n #include \"insn-attr.h\""}, {"sha": "03b054a30cd03421df1212a829a8653191fb2ada", "filename": "gcc/postreload-gcse.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59f2e9d83d69ae2a714b02861809fc3bec9c9e2f/gcc%2Fpostreload-gcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59f2e9d83d69ae2a714b02861809fc3bec9c9e2f/gcc%2Fpostreload-gcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpostreload-gcse.c?ref=59f2e9d83d69ae2a714b02861809fc3bec9c9e2f", "patch": "@@ -39,6 +39,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"machmode.h\"\n #include \"input.h\"\n #include \"function.h\"\n+#include \"profile.h\"\n #include \"expr.h\"\n #include \"except.h\"\n #include \"intl.h\""}, {"sha": "5f5d4a55c9c83008e73b93a6173b7c3966f7ac3e", "filename": "gcc/predict.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59f2e9d83d69ae2a714b02861809fc3bec9c9e2f/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59f2e9d83d69ae2a714b02861809fc3bec9c9e2f/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=59f2e9d83d69ae2a714b02861809fc3bec9c9e2f", "patch": "@@ -46,6 +46,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"machmode.h\"\n #include \"input.h\"\n #include \"function.h\"\n+#include \"profile.h\"\n #include \"except.h\"\n #include \"diagnostic-core.h\"\n #include \"recog.h\"\n@@ -2527,6 +2528,7 @@ struct edge_prob_info\n };\n \n #define BLOCK_INFO(B)\t((block_info *) (B)->aux)\n+#undef EDGE_INFO\n #define EDGE_INFO(E)\t((edge_prob_info *) (E)->aux)\n \n /* Helper function for estimate_bb_frequencies."}, {"sha": "127596479122f47746b38791aa7a06b404020d51", "filename": "gcc/profile.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59f2e9d83d69ae2a714b02861809fc3bec9c9e2f/gcc%2Fprofile.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59f2e9d83d69ae2a714b02861809fc3bec9c9e2f/gcc%2Fprofile.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.h?ref=59f2e9d83d69ae2a714b02861809fc3bec9c9e2f", "patch": "@@ -48,6 +48,10 @@ extern void del_node_map (void);\n \n extern void get_working_sets (void);\n \n+/* Counter summary from the last set of coverage counts read by\n+   profile.c.  */\n+extern const struct gcov_ctr_summary *profile_info;\n+\n /* In predict.c.  */\n extern gcov_type get_hot_bb_threshold (void);\n extern void set_hot_bb_threshold (gcov_type);"}, {"sha": "496d824fb6ae56a275bd01357768ebeea6ca459e", "filename": "gcc/rtl.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59f2e9d83d69ae2a714b02861809fc3bec9c9e2f/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59f2e9d83d69ae2a714b02861809fc3bec9c9e2f/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=59f2e9d83d69ae2a714b02861809fc3bec9c9e2f", "patch": "@@ -3372,12 +3372,7 @@ extern void add_insn_before (rtx, rtx, basic_block);\n extern void add_insn_after (rtx, rtx, basic_block);\n extern void remove_insn (rtx);\n extern rtx_insn *emit (rtx);\n-extern void delete_insn (rtx);\n-extern rtx_insn *entry_of_function (void);\n extern void emit_insn_at_entry (rtx);\n-extern void delete_insn_chain (rtx, rtx, bool);\n-extern rtx_insn *unlink_insn_chain (rtx_insn *, rtx_insn *);\n-extern void delete_insn_and_edges (rtx_insn *);\n extern rtx gen_lowpart_SUBREG (enum machine_mode, rtx);\n extern rtx gen_const_mem (enum machine_mode, rtx);\n extern rtx gen_frame_mem (enum machine_mode, rtx);\n@@ -3443,10 +3438,6 @@ extern rtx move_by_pieces (rtx, rtx, unsigned HOST_WIDE_INT,\n extern HOST_WIDE_INT find_args_size_adjust (rtx_insn *);\n extern int fixup_args_size_notes (rtx_insn *, rtx_insn *, int);\n \n-/* In cfgrtl.c */\n-extern void print_rtl_with_bb (FILE *, const rtx_insn *, int);\n-extern rtx_insn *duplicate_insn_chain (rtx_insn *, rtx_insn *);\n-\n /* In expmed.c */\n extern void init_expmed (void);\n extern void expand_inc (rtx, rtx);"}, {"sha": "d30fa2e30a1644bcfd117b0e510e5eb8c51bf9f6", "filename": "gcc/sched-ebb.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59f2e9d83d69ae2a714b02861809fc3bec9c9e2f/gcc%2Fsched-ebb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59f2e9d83d69ae2a714b02861809fc3bec9c9e2f/gcc%2Fsched-ebb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-ebb.c?ref=59f2e9d83d69ae2a714b02861809fc3bec9c9e2f", "patch": "@@ -34,6 +34,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"machmode.h\"\n #include \"input.h\"\n #include \"function.h\"\n+#include \"profile.h\"\n #include \"flags.h\"\n #include \"insn-config.h\"\n #include \"insn-attr.h\""}, {"sha": "97bc360582eaca3e407fd53ae2bfba48c7e73cfb", "filename": "gcc/sched-rgn.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59f2e9d83d69ae2a714b02861809fc3bec9c9e2f/gcc%2Fsched-rgn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59f2e9d83d69ae2a714b02861809fc3bec9c9e2f/gcc%2Fsched-rgn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-rgn.c?ref=59f2e9d83d69ae2a714b02861809fc3bec9c9e2f", "patch": "@@ -58,6 +58,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"machmode.h\"\n #include \"input.h\"\n #include \"function.h\"\n+#include \"profile.h\"\n #include \"flags.h\"\n #include \"insn-config.h\"\n #include \"insn-attr.h\""}, {"sha": "b72bcb50321aab96fb64c5bb26f4a4bd758afede", "filename": "gcc/tracer.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59f2e9d83d69ae2a714b02861809fc3bec9c9e2f/gcc%2Ftracer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59f2e9d83d69ae2a714b02861809fc3bec9c9e2f/gcc%2Ftracer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftracer.c?ref=59f2e9d83d69ae2a714b02861809fc3bec9c9e2f", "patch": "@@ -40,6 +40,7 @@\n #include \"tree.h\"\n #include \"rtl.h\"\n #include \"hard-reg-set.h\"\n+#include \"profile.h\"\n #include \"basic-block.h\"\n #include \"fibheap.h\"\n #include \"flags.h\""}, {"sha": "1e23fac923d4399c63a09dcb487568fbd1230f73", "filename": "gcc/tree-cfg.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59f2e9d83d69ae2a714b02861809fc3bec9c9e2f/gcc%2Ftree-cfg.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59f2e9d83d69ae2a714b02861809fc3bec9c9e2f/gcc%2Ftree-cfg.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.h?ref=59f2e9d83d69ae2a714b02861809fc3bec9c9e2f", "patch": "@@ -24,6 +24,11 @@ along with GCC; see the file COPYING3.  If not see\n /* Location to track pending stmt for edge insertion.  */\n #define PENDING_STMT(e)\t((e)->insns.g)\n \n+/* Garbage collection and PCH support for edge_def.  */\n+extern void gt_ggc_mx (edge_def *e);\n+extern void gt_pch_nx (edge_def *e);\n+extern void gt_pch_nx (edge_def *e, gt_pointer_operator, void *);\n+\n extern void init_empty_tree_cfg_for_function (struct function *);\n extern void init_empty_tree_cfg (void);\n extern void fold_cond_expr_cond (void);"}, {"sha": "8ab4ad784f182970ca204bb1447cc11cd39b3c15", "filename": "gcc/tree-ssa-loop-ivcanon.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59f2e9d83d69ae2a714b02861809fc3bec9c9e2f/gcc%2Ftree-ssa-loop-ivcanon.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59f2e9d83d69ae2a714b02861809fc3bec9c9e2f/gcc%2Ftree-ssa-loop-ivcanon.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivcanon.c?ref=59f2e9d83d69ae2a714b02861809fc3bec9c9e2f", "patch": "@@ -41,6 +41,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm.h\"\n #include \"tree.h\"\n #include \"tm_p.h\"\n+#include \"profile.h\"\n #include \"basic-block.h\"\n #include \"gimple-pretty-print.h\"\n #include \"tree-ssa-alias.h\""}]}