{"sha": "3cebfcc5c66e5337e8551a30cd6d29edc9aae9c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2NlYmZjYzVjNjZlNTMzN2U4NTUxYTMwY2Q2ZDI5ZWRjOWFhZTljOA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2009-04-29T23:10:21Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2009-04-29T23:10:21Z"}, "message": "Revert\n\t2009-04-29  Vincent Celier  <celier@adacore.com>\n\n\t* sinput-l.adb (Load_File): When preprocessing, set temporarily the\n\tSource_File_Index_Table entries for the source, to avoid crash when\n\treporting an error.\n\n\t* gnatcmd.adb (Test_If_Relative_Path): Use\n\tMakeutl.Test_If_Relative_Path.\n\t\n\t* makeutl.adb:(Test_If_Relative_Path): Process switches --RTS= only if\n\tIncluding_RTS is True.\n\n\t* makeutl.ads (Test_If_Relative_Path): New Boolean parameter\n\tIncluding_RTS defaulted to False.\n\n\t* sinput.ads, scans.ads, err_vars.ads: Initialize some variables with\n\ta default value.\n\nFrom-SVN: r146991", "tree": {"sha": "1eb925fe9ac0daa64343cebeedf8d15f314f4a29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1eb925fe9ac0daa64343cebeedf8d15f314f4a29"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3cebfcc5c66e5337e8551a30cd6d29edc9aae9c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cebfcc5c66e5337e8551a30cd6d29edc9aae9c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cebfcc5c66e5337e8551a30cd6d29edc9aae9c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cebfcc5c66e5337e8551a30cd6d29edc9aae9c8/comments", "author": null, "committer": null, "parents": [{"sha": "9933b56afffcf56331c8818f729e97c1acf1ab59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9933b56afffcf56331c8818f729e97c1acf1ab59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9933b56afffcf56331c8818f729e97c1acf1ab59"}], "stats": {"total": 165, "additions": 97, "deletions": 68}, "files": [{"sha": "01e3ba4497ae8209050323470e65a2d6682f0c3b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cebfcc5c66e5337e8551a30cd6d29edc9aae9c8/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cebfcc5c66e5337e8551a30cd6d29edc9aae9c8/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3cebfcc5c66e5337e8551a30cd6d29edc9aae9c8", "patch": "@@ -1,3 +1,24 @@\n+2009-04-29  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tRevert\n+\t2009-04-29  Vincent Celier  <celier@adacore.com>\n+\n+\t* sinput-l.adb (Load_File): When preprocessing, set temporarily the\n+\tSource_File_Index_Table entries for the source, to avoid crash when\n+\treporting an error.\n+\n+\t* gnatcmd.adb (Test_If_Relative_Path): Use\n+\tMakeutl.Test_If_Relative_Path.\n+\t\n+\t* makeutl.adb:(Test_If_Relative_Path): Process switches --RTS= only if\n+\tIncluding_RTS is True.\n+\n+\t* makeutl.ads (Test_If_Relative_Path): New Boolean parameter\n+\tIncluding_RTS defaulted to False.\n+\n+\t* sinput.ads, scans.ads, err_vars.ads: Initialize some variables with\n+\ta default value.\n+\n 2009-04-29  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch8.adb (Analyze_Subprogram_Renaming): Improve error message on"}, {"sha": "58fca6163850c2e0c7326d9472b0fd4a10661d9f", "filename": "gcc/ada/err_vars.ads", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cebfcc5c66e5337e8551a30cd6d29edc9aae9c8/gcc%2Fada%2Ferr_vars.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cebfcc5c66e5337e8551a30cd6d29edc9aae9c8/gcc%2Fada%2Ferr_vars.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferr_vars.ads?ref=3cebfcc5c66e5337e8551a30cd6d29edc9aae9c8", "patch": "@@ -32,31 +32,24 @@ with Uintp; use Uintp;\n \n package Err_Vars is\n \n-   --  All of these variables are set when needed, so they do not need to be\n-   --  initialized. However, there is code that saves and restores existing\n-   --  values, which may malfunction in -gnatVa mode if the variable has never\n-   --  been iniitalized, so we initialize some variables to avoid exceptions\n-   --  from invalid values in such cases.\n-\n    ------------------\n    -- Error Counts --\n    ------------------\n \n-   Serious_Errors_Detected : Nat := 0;\n+   Serious_Errors_Detected : Nat;\n    --  This is a count of errors that are serious enough to stop expansion,\n    --  and hence to prevent generation of an object file even if the\n    --  switch -gnatQ is set. Initialized to zero at the start of compilation.\n-   --  Initialized for -gnatVa use, see comment above.\n \n-   Total_Errors_Detected : Nat := 0;\n+   Total_Errors_Detected : Nat;\n    --  Number of errors detected so far. Includes count of serious errors and\n    --  non-serious errors, so this value is always greater than or equal to the\n    --  Serious_Errors_Detected value. Initialized to zero at the start of\n-   --  compilation. Initialized for -gnatVa use, see comment above.\n+   --  compilation.\n \n-   Warnings_Detected : Nat := 0;\n+   Warnings_Detected : Nat;\n    --  Number of warnings detected. Initialized to zero at the start of\n-   --  compilation. Initialized for -gnatVa use, see comment above.\n+   --  compilation.\n \n    ----------------------------------\n    -- Error Message Mode Variables --\n@@ -82,7 +75,7 @@ package Err_Vars is\n    --  generated on the instantiation (referring to the template) rather\n    --  than on the template itself.\n \n-   Raise_Exception_On_Error : Nat := 0;\n+   Raise_Exception_On_Error : Nat;\n    --  If this value is non-zero, then any attempt to generate an error\n    --  message raises the exception Error_Msg_Exception, and the error\n    --  message is not output. This is used for defending against junk"}, {"sha": "81e9bc4191df892c0b25a322bac33f44dd4118e0", "filename": "gcc/ada/gnatcmd.adb", "status": "modified", "additions": 55, "deletions": 3, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cebfcc5c66e5337e8551a30cd6d29edc9aae9c8/gcc%2Fada%2Fgnatcmd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cebfcc5c66e5337e8551a30cd6d29edc9aae9c8/gcc%2Fada%2Fgnatcmd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatcmd.adb?ref=3cebfcc5c66e5337e8551a30cd6d29edc9aae9c8", "patch": "@@ -26,7 +26,6 @@\n with GNAT.Directory_Operations; use GNAT.Directory_Operations;\n \n with Csets;\n-with Makeutl;\n with MLib.Tgt; use MLib.Tgt;\n with MLib.Utl;\n with MLib.Fil;\n@@ -1266,8 +1265,61 @@ procedure GNATCmd is\n       Parent : String)\n    is\n    begin\n-      Makeutl.Test_If_Relative_Path\n-        (Switch, Parent, Including_Non_Switch => False, Including_RTS => True);\n+      if Switch /= null then\n+\n+         declare\n+            Sw : String (1 .. Switch'Length);\n+            Start : Positive := 1;\n+\n+         begin\n+            Sw := Switch.all;\n+\n+            if Sw (1) = '-' then\n+               if Sw'Length >= 3\n+                 and then (Sw (2) = 'A' or else\n+                           Sw (2) = 'I' or else\n+                           Sw (2) = 'L')\n+               then\n+                  Start := 3;\n+\n+                  if Sw = \"-I-\" then\n+                     return;\n+                  end if;\n+\n+               elsif Sw'Length >= 4\n+                 and then (Sw (2 .. 3) = \"aL\" or else\n+                           Sw (2 .. 3) = \"aO\" or else\n+                           Sw (2 .. 3) = \"aI\")\n+               then\n+                  Start := 4;\n+\n+               elsif Sw'Length >= 7\n+                 and then Sw (2 .. 6) = \"-RTS=\"\n+               then\n+                  Start := 7;\n+               else\n+                  return;\n+               end if;\n+            end if;\n+\n+            --  If the path is relative, test if it includes directory\n+            --  information. If it does, prepend Parent to the path.\n+\n+            if not Is_Absolute_Path (Sw (Start .. Sw'Last)) then\n+               for J in Start .. Sw'Last loop\n+                  if Sw (J) = Directory_Separator then\n+                     Switch :=\n+                        new String'\n+                              (Sw (1 .. Start - 1) &\n+                               Parent &\n+                               Directory_Separator &\n+                               Sw (Start .. Sw'Last));\n+                     return;\n+                  end if;\n+               end loop;\n+            end if;\n+         end;\n+      end if;\n    end Test_If_Relative_Path;\n \n    -------------------"}, {"sha": "50b9fe23b1de190e3c5f8103791dba9d628982d1", "filename": "gcc/ada/makeutl.adb", "status": "modified", "additions": 2, "deletions": 23, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cebfcc5c66e5337e8551a30cd6d29edc9aae9c8/gcc%2Fada%2Fmakeutl.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cebfcc5c66e5337e8551a30cd6d29edc9aae9c8/gcc%2Fada%2Fmakeutl.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmakeutl.adb?ref=3cebfcc5c66e5337e8551a30cd6d29edc9aae9c8", "patch": "@@ -598,8 +598,7 @@ package body Makeutl is\n      (Switch               : in out String_Access;\n       Parent               : String;\n       Including_L_Switch   : Boolean := True;\n-      Including_Non_Switch : Boolean := True;\n-      Including_RTS        : Boolean := False)\n+      Including_Non_Switch : Boolean := True)\n    is\n    begin\n       if Switch /= null then\n@@ -629,20 +628,13 @@ package body Makeutl is\n                then\n                   Start := 4;\n \n-               elsif Including_RTS\n-                 and then Sw'Length >= 7\n-                 and then Sw (2 .. 6) = \"-RTS=\"\n-               then\n-                  Start := 7;\n-\n                else\n                   return;\n                end if;\n \n                --  Because relative path arguments to --RTS= may be relative\n                --  to the search directory prefix, those relative path\n-               --  arguments are converted only when they include directory\n-               --  information.\n+               --  arguments are not converted.\n \n                if not Is_Absolute_Path (Sw (Start .. Sw'Last)) then\n                   if Parent'Length = 0 then\n@@ -651,19 +643,6 @@ package body Makeutl is\n                         & Sw\n                         & \"\"\") are not allowed\");\n \n-                  elsif Including_RTS then\n-                     for J in Start .. Sw'Last loop\n-                        if Sw (J) = Directory_Separator then\n-                           Switch :=\n-                             new String'\n-                               (Sw (1 .. Start - 1) &\n-                                Parent &\n-                                Directory_Separator &\n-                                Sw (Start .. Sw'Last));\n-                           return;\n-                        end if;\n-                     end loop;\n-\n                   else\n                      Switch :=\n                        new String'"}, {"sha": "bb8ac84d6bf1b314912ed9924dce4a8b46d3f1a2", "filename": "gcc/ada/makeutl.ads", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cebfcc5c66e5337e8551a30cd6d29edc9aae9c8/gcc%2Fada%2Fmakeutl.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cebfcc5c66e5337e8551a30cd6d29edc9aae9c8/gcc%2Fada%2Fmakeutl.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmakeutl.ads?ref=3cebfcc5c66e5337e8551a30cd6d29edc9aae9c8", "patch": "@@ -130,14 +130,12 @@ package Makeutl is\n      (Switch               : in out String_Access;\n       Parent               : String;\n       Including_L_Switch   : Boolean := True;\n-      Including_Non_Switch : Boolean := True;\n-      Including_RTS        : Boolean := False);\n+      Including_Non_Switch : Boolean := True);\n    --  Test if Switch is a relative search path switch.\n    --  If it is, fail if Parent is the empty string, otherwise prepend the path\n    --  with Parent. This subprogram is only called when using project files.\n    --  For gnatbind switches, Including_L_Switch is False, because the\n-   --  argument of the -L switch is not a path. If Including_RTS is True,\n-   --  process also switches --RTS=.\n+   --  argument of the -L switch is not a path.\n \n    function Path_Or_File_Name (Path : Path_Name_Type) return String;\n    --  Returns a file name if -df is used, otherwise return a path name"}, {"sha": "1120f067b3772227ef771a09af01c70f822d33b9", "filename": "gcc/ada/scans.ads", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cebfcc5c66e5337e8551a30cd6d29edc9aae9c8/gcc%2Fada%2Fscans.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cebfcc5c66e5337e8551a30cd6d29edc9aae9c8/gcc%2Fada%2Fscans.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscans.ads?ref=3cebfcc5c66e5337e8551a30cd6d29edc9aae9c8", "patch": "@@ -345,43 +345,36 @@ package Scans is\n    --  Note: these variables can only be referenced during the parsing of a\n    --  file. Reference to any of them from Sem or the expander is wrong.\n \n-   --  These variables are initialized as required by Scn.Initialize_Scanner,\n-   --  and should not be referenced before such a call. However, there are\n-   --  situations in which these variables are saved and restored, and this\n-   --  may happen before the first Initialize_Scanner call, resulting in the\n-   --  assignment of invalid values. To avoid this, and allow building with\n-   --  the -gnatVa switch, we initialize some variables to known valid values.\n-\n-   Scan_Ptr : Source_Ptr := No_Location; -- init for -gnatVa\n+   Scan_Ptr : Source_Ptr;\n    --  Current scan pointer location. After a call to Scan, this points\n    --  just past the end of the token just scanned.\n \n-   Token : Token_Type := No_Token; -- init for -gnatVa\n+   Token : Token_Type;\n    --  Type of current token\n \n-   Token_Ptr : Source_Ptr := No_Location; -- init for -gnatVa\n+   Token_Ptr : Source_Ptr;\n    --  Pointer to first character of current token\n \n-   Current_Line_Start : Source_Ptr := No_Location; -- init for -gnatVa\n-   --  Pointer to first character of line containing current token.\n+   Current_Line_Start : Source_Ptr;\n+   --  Pointer to first character of line containing current token\n \n-   Start_Column : Column_Number := No_Column_Number; -- init for -gnatVa\n+   Start_Column : Column_Number;\n    --  Starting column number (zero origin) of the first non-blank character\n    --  on the line containing the current token. This is used for error\n    --  recovery circuits which depend on looking at the column line up.\n \n-   Type_Token_Location : Source_Ptr := No_Location; -- init for -gnatVa\n+   Type_Token_Location : Source_Ptr;\n    --  Within a type declaration, gives the location of the TYPE keyword that\n    --  opened the type declaration. Used in checking the end column of a record\n    --  declaration, which can line up either with the TYPE keyword, or with the\n    --  start of the line containing the RECORD keyword.\n \n-   Checksum : Word := 0; -- init for -gnatVa\n+   Checksum : Word;\n    --  Used to accumulate a CRC representing the tokens in the source\n    --  file being compiled. This CRC includes only program tokens, and\n    --  excludes comments.\n \n-   First_Non_Blank_Location : Source_Ptr := No_Location; -- init for -gnatVa\n+   First_Non_Blank_Location : Source_Ptr;\n    --  Location of first non-blank character on the line containing the\n    --  current token (i.e. the location of the character whose column number\n    --  is stored in Start_Column)."}, {"sha": "3a7b84e581653c1d2161304cf3d012b5bf1c8619", "filename": "gcc/ada/sinput-l.adb", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cebfcc5c66e5337e8551a30cd6d29edc9aae9c8/gcc%2Fada%2Fsinput-l.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cebfcc5c66e5337e8551a30cd6d29edc9aae9c8/gcc%2Fada%2Fsinput-l.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinput-l.adb?ref=3cebfcc5c66e5337e8551a30cd6d29edc9aae9c8", "patch": "@@ -453,11 +453,6 @@ package body Sinput.L is\n          --  Preprocess the source if it needs to be preprocessed\n \n          if Preprocessing_Needed then\n-            --  Set temporarily the Source_File_Index_Table entries for the\n-            --  source, to avoid crash when reporting an error.\n-\n-            Set_Source_File_Index_Table (X);\n-\n             if Opt.List_Preprocessing_Symbols then\n                Get_Name_String (N);\n "}, {"sha": "e2e4ec0d67f2ee2c10c19017408762a4d78d2121", "filename": "gcc/ada/sinput.ads", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cebfcc5c66e5337e8551a30cd6d29edc9aae9c8/gcc%2Fada%2Fsinput.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cebfcc5c66e5337e8551a30cd6d29edc9aae9c8/gcc%2Fada%2Fsinput.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinput.ads?ref=3cebfcc5c66e5337e8551a30cd6d29edc9aae9c8", "patch": "@@ -423,10 +423,8 @@ package Sinput is\n    -- Global Data --\n    -----------------\n \n-   Current_Source_File : Source_File_Index := No_Source_File;\n-   --  Source_File table index of source file currently being scanned.\n-   --  Initialized so that some tools (such as gprbuild) can be built with\n-   --  -gnatVa and pragma Initialized_Scalars without problems.\n+   Current_Source_File : Source_File_Index;\n+   --  Source_File table index of source file currently being scanned\n \n    Current_Source_Unit : Unit_Number_Type;\n    --  Unit number of source file currently being scanned. The special value"}]}