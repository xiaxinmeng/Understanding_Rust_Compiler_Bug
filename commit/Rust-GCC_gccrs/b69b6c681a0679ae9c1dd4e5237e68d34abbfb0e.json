{"sha": "b69b6c681a0679ae9c1dd4e5237e68d34abbfb0e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjY5YjZjNjgxYTA2NzlhZTljMWRkNGU1MjM3ZTY4ZDM0YWJiZmIwZQ==", "commit": {"author": {"name": "Rask Ingemann Lambertsen", "email": "rask@sygehus.dk", "date": "2007-08-28T21:01:37Z"}, "committer": {"name": "Rask Ingemann Lambertsen", "email": "rask@gcc.gnu.org", "date": "2007-08-28T21:01:37Z"}, "message": "limits-blockid.c: Reduce testcase size to 10000 for targets where \"int\" can't hold at least 100000.\n\n\t* gcc.c-torture/compile/limits-blockid.c: Reduce testcase size to\n\t10000 for targets where \"int\" can't hold at least 100000.\n\t* gcc.c-torture/compile/limits-enumconst.c: Likewise.\n\t* gcc.dg/fold-eqandshift-1.c (INT_BITS): New.\n\t(test5)(test6): Use it.\n\t* gcc.dg/pr30744-1.c (r): Use pointer sized integer.\n\t* gcc.dg/tree-ssa/foldaddr-1.c (foo): Likewise.\n\t* gcc.dg/tree-ssa/loadpre6.c (main): Likewise.\n\t* gcc.dg/tls/opt-5.c (__gen_tempname): Avoid overflowing 16-bit\tint.\n\t* gcc.dg/attr-alloc_size.c (test): Likewise.\n\nFrom-SVN: r127870", "tree": {"sha": "acf0d1735a5e8d619fae81e36cb30d60ad9969bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/acf0d1735a5e8d619fae81e36cb30d60ad9969bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b69b6c681a0679ae9c1dd4e5237e68d34abbfb0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b69b6c681a0679ae9c1dd4e5237e68d34abbfb0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b69b6c681a0679ae9c1dd4e5237e68d34abbfb0e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b69b6c681a0679ae9c1dd4e5237e68d34abbfb0e/comments", "author": null, "committer": null, "parents": [{"sha": "c2acde1ee12b2e11765fb43c861c71663768eba4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2acde1ee12b2e11765fb43c861c71663768eba4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2acde1ee12b2e11765fb43c861c71663768eba4"}], "stats": {"total": 61, "additions": 47, "deletions": 14}, "files": [{"sha": "d9dc83e8b6fd8638d45664bbe12a3ab621a7e3d5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b69b6c681a0679ae9c1dd4e5237e68d34abbfb0e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b69b6c681a0679ae9c1dd4e5237e68d34abbfb0e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b69b6c681a0679ae9c1dd4e5237e68d34abbfb0e", "patch": "@@ -1,3 +1,16 @@\n+2007-08-28  Rask Ingemann Lambertsen  <rask@sygehus.dk>\n+\n+\t* gcc.c-torture/compile/limits-blockid.c: Reduce testcase size to\n+\t10000 for targets where \"int\" can't hold at least 100000.\n+\t* gcc.c-torture/compile/limits-enumconst.c: Likewise.\n+\t* gcc.dg/fold-eqandshift-1.c (INT_BITS): New.\n+\t(test5)(test6): Use it.\n+\t* gcc.dg/pr30744-1.c (r): Use pointer sized integer.\n+\t* gcc.dg/tree-ssa/foldaddr-1.c (foo): Likewise.\n+\t* gcc.dg/tree-ssa/loadpre6.c (main): Likewise.\n+\t* gcc.dg/tls/opt-5.c (__gen_tempname): Avoid overflowing 16-bit\tint.\n+\t* gcc.dg/attr-alloc_size.c (test): Likewise.\n+\n 2007-08-28  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR c++/33209"}, {"sha": "545dfe4dcb74714a213b6a5179f1e18ac720b6bd", "filename": "gcc/testsuite/gcc.c-torture/compile/limits-blockid.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b69b6c681a0679ae9c1dd4e5237e68d34abbfb0e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Flimits-blockid.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b69b6c681a0679ae9c1dd4e5237e68d34abbfb0e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Flimits-blockid.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Flimits-blockid.c?ref=b69b6c681a0679ae9c1dd4e5237e68d34abbfb0e", "patch": "@@ -14,5 +14,9 @@\n \n void q9_func(void)\n {\n+#if __INT_MAX__ >= 100000\n   LIM5(char t)\n+#else\n+  LIM4(char t)\n+#endif\n }"}, {"sha": "975cafc833e79ddc7d7065c3920d8deb63a417f9", "filename": "gcc/testsuite/gcc.c-torture/compile/limits-enumconst.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b69b6c681a0679ae9c1dd4e5237e68d34abbfb0e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Flimits-enumconst.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b69b6c681a0679ae9c1dd4e5237e68d34abbfb0e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Flimits-enumconst.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Flimits-enumconst.c?ref=b69b6c681a0679ae9c1dd4e5237e68d34abbfb0e", "patch": "@@ -14,5 +14,9 @@\n \n enum q21_enum\n {\n+#if __INT_MAX__ >= 100000\n   LIM5 (e)\n+#else\n+  LIM4 (e)\n+#endif\n };"}, {"sha": "47d7c0050853fd377d588be96db232a5a2ecfc36", "filename": "gcc/testsuite/gcc.dg/attr-alloc_size.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b69b6c681a0679ae9c1dd4e5237e68d34abbfb0e/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-alloc_size.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b69b6c681a0679ae9c1dd4e5237e68d34abbfb0e/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-alloc_size.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-alloc_size.c?ref=b69b6c681a0679ae9c1dd4e5237e68d34abbfb0e", "patch": "@@ -23,13 +23,13 @@ test (void)\n   p = malloc1 (6);\n   strcpy (p, \"Hello\");\n   strcpy (p, \"Hello World\"); /* { dg-warning \"will always overflow\" \"strcpy\" } */\n-  p = malloc2 (424242, 6);\n+  p = malloc2 (__INT_MAX__ >= 1700000 ? 424242 : __INT_MAX__ / 4, 6);\n   strcpy (p, \"World\");\n   strcpy (p, \"Hello World\"); /* { dg-warning \"will always overflow\" \"strcpy\" } */\n   p = calloc1 (2, 5);\n   strcpy (p, \"World\");\n   strcpy (p, \"Hello World\"); /* { dg-warning \"will always overflow\" \"strcpy\" } */\n-  p = calloc2 (2, 424242, 5);\n+  p = calloc2 (2, __INT_MAX__ >= 1700000 ? 424242 : __INT_MAX__ / 4, 5);\n   strcpy (p, \"World\");\n   strcpy (p, \"Hello World\"); /* { dg-warning \"will always overflow\" \"strcpy\" } */\n }"}, {"sha": "055f398af0bb697eea3c93c915c57c2a08540a87", "filename": "gcc/testsuite/gcc.dg/fold-eqandshift-1.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b69b6c681a0679ae9c1dd4e5237e68d34abbfb0e/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-eqandshift-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b69b6c681a0679ae9c1dd4e5237e68d34abbfb0e/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-eqandshift-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-eqandshift-1.c?ref=b69b6c681a0679ae9c1dd4e5237e68d34abbfb0e", "patch": "@@ -25,15 +25,25 @@ int test4(int d)\n   return (d >> 3) & 4;\n }\n \n+#if __INT_MAX__ == 32767\n+#define INT_BITS 16\n+#elif __INT_MAX__ == 2147483647\n+#define INT_BITS 32\n+#elif __INT_MAX__ == 9223372036854775807\n+#define INT_BITS 64\n+#else\n+#error Please add support for your target here.\n+#endif\n+\n void test5(int e)\n {\n-  if ((e >> 31) & 64)\n+  if ((e >> (INT_BITS - 1)) & 64)\n     foo();\n }\n \n void test6(unsigned int f)\n {\n-  if ((f >> 31) & 64)\n+  if ((f >> (INT_BITS - 1)) & 64)\n     foo();\n }\n "}, {"sha": "a35c5526aa1062a5640098ca5cf6b121de549d5b", "filename": "gcc/testsuite/gcc.dg/pr30744-1.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b69b6c681a0679ae9c1dd4e5237e68d34abbfb0e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30744-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b69b6c681a0679ae9c1dd4e5237e68d34abbfb0e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30744-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30744-1.c?ref=b69b6c681a0679ae9c1dd4e5237e68d34abbfb0e", "patch": "@@ -1,15 +1,16 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2\" } */\n+#include <stddef.h>\n \n typedef struct {\n-  unsigned long unique;\n+  ptrdiff_t unique;\n } G;\n \n void r(G* n)\n {\n-  unsigned long p;\n-  if (((G *) ((void *)((~(unsigned long)(p))))) != ((void *)0)) {\n-    ((G *) ((void *)((~(unsigned long)(p)))))->unique = n->unique;\n+  ptrdiff_t p;\n+  if (((G *) ((void *)((~(ptrdiff_t)(p))))) != ((void *)0)) {\n+    ((G *) ((void *)((~(ptrdiff_t)(p)))))->unique = n->unique;\n   }\n }\n "}, {"sha": "ee71cad3c02bf257b29df4df906019679ab29128", "filename": "gcc/testsuite/gcc.dg/tls/opt-5.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b69b6c681a0679ae9c1dd4e5237e68d34abbfb0e/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fopt-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b69b6c681a0679ae9c1dd4e5237e68d34abbfb0e/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fopt-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fopt-5.c?ref=b69b6c681a0679ae9c1dd4e5237e68d34abbfb0e", "patch": "@@ -34,12 +34,12 @@ __gen_tempname (char *tmpl, int kind)\n   char *XXXXXX;\n   static uint64_t value;\n   uint64_t random_time_bits;\n-  unsigned int count;\n+  unsigned long count;\n   int fd = -1;\n   int save_errno = __libc_errno;\n   struct stat64 st;\n-  unsigned int attempts_min = 62 * 62 * 62;\n-  unsigned int attempts = attempts_min < 238328 ? 238328 : attempts_min;\n+  unsigned long attempts_min = 62L * 62L * 62L;\n+  unsigned long attempts = attempts_min < 238328 ? 238328 : attempts_min;\n \n   len = strlen (tmpl);\n   if (len < 6 || strcmp(&tmpl[len - 6], \"XXXXXX\"))"}, {"sha": "a92498eb1f66bad755b5e51f82c267ae05ff623c", "filename": "gcc/testsuite/gcc.dg/tree-ssa/foldaddr-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b69b6c681a0679ae9c1dd4e5237e68d34abbfb0e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ffoldaddr-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b69b6c681a0679ae9c1dd4e5237e68d34abbfb0e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ffoldaddr-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ffoldaddr-1.c?ref=b69b6c681a0679ae9c1dd4e5237e68d34abbfb0e", "patch": "@@ -1,11 +1,11 @@\n /* { dg-do compile } */\n /* { dg-options \"-O1 -fdump-tree-original\" } */\n-\n+#include <stddef.h>\n \n char *a;\n int foo(char *b)\n {\n-        return a+5+(long)b == (long)b+a;\n+        return a+5+(ptrdiff_t)b == (ptrdiff_t)b+a;\n }\n \n /* Folding should have determined that the two addresses were"}, {"sha": "725f86b192f0bb457af2b8b4eed32b0698583e74", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loadpre6.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b69b6c681a0679ae9c1dd4e5237e68d34abbfb0e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floadpre6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b69b6c681a0679ae9c1dd4e5237e68d34abbfb0e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floadpre6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floadpre6.c?ref=b69b6c681a0679ae9c1dd4e5237e68d34abbfb0e", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */ \n /* { dg-options \"-O2 -fdump-tree-pre-stats\" } */\n+#include <stddef.h>\n \n union tree_node;\n typedef union tree_node *tree;\n@@ -63,7 +64,7 @@ main (void)\n   for (i = 0; i < 2; i++)\n     {\n       unexpanded_var_list = malloc (sizeof (struct tree_list));\n-      unexpanded_var_list->list.value = (tree) (long unsigned) (i & 1);\n+      unexpanded_var_list->list.value = (tree) (ptrdiff_t) (i & 1);\n       unexpanded_var_list->common.chain = last;\n       last = unexpanded_var_list;\n     }"}]}