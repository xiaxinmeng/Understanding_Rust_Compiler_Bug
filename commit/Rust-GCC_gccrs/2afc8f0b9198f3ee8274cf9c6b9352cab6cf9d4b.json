{"sha": "2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b", "node_id": "C_kwDOANBUbNoAKDJhZmM4ZjBiOTE5OGYzZWU4Mjc0Y2Y5YzZiOTM1MmNhYjZjZjlkNGI", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-11-05T17:11:23Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-11-05T17:21:27Z"}, "message": "libsanitizer: merge from master (78d3e0a4f1406b17cdecc77540e09210670fe9a9).", "tree": {"sha": "cb3f31db83c81ead0da8f8f7d2a5f74531c3b73f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb3f31db83c81ead0da8f8f7d2a5f74531c3b73f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f6dd5de33912c261a5003150212c290165ac1b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f6dd5de33912c261a5003150212c290165ac1b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f6dd5de33912c261a5003150212c290165ac1b6"}], "stats": {"total": 149, "additions": 48, "deletions": 101}, "files": [{"sha": "c3463bffbae757e92c01081baa515a15eb1e288f", "filename": "libsanitizer/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b/libsanitizer%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b/libsanitizer%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FMERGE?ref=2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b", "patch": "@@ -1,4 +1,4 @@\n-c86b4503a94c277534ce4b9a5c015a6ac151b98a\n+78d3e0a4f1406b17cdecc77540e09210670fe9a9\n \n The first line of this file holds the git revision number of the\n last merge done from the master library sources."}, {"sha": "7cd9fe911afa817ac0d4d6fbd1eb2be5c59aa808", "filename": "libsanitizer/asan/asan_errors.cpp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b/libsanitizer%2Fasan%2Fasan_errors.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b/libsanitizer%2Fasan%2Fasan_errors.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fasan%2Fasan_errors.cpp?ref=2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b", "patch": "@@ -538,7 +538,8 @@ static void PrintLegend(InternalScopedString *str) {\n static void PrintShadowBytes(InternalScopedString *str, const char *before,\n                              u8 *bytes, u8 *guilty, uptr n) {\n   Decorator d;\n-  if (before) str->append(\"%s%p:\", before, bytes);\n+  if (before)\n+    str->append(\"%s%p:\", before, (void *)bytes);\n   for (uptr i = 0; i < n; i++) {\n     u8 *p = bytes + i;\n     const char *before ="}, {"sha": "07681c10de91a067f8db68a88ecb65f68e1e22c9", "filename": "libsanitizer/asan/asan_fake_stack.cpp", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b/libsanitizer%2Fasan%2Fasan_fake_stack.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b/libsanitizer%2Fasan%2Fasan_fake_stack.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fasan%2Fasan_fake_stack.cpp?ref=2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b", "patch": "@@ -54,10 +54,11 @@ FakeStack *FakeStack::Create(uptr stack_size_log) {\n                              : MmapOrDie(size, \"FakeStack\"));\n   res->stack_size_log_ = stack_size_log;\n   u8 *p = reinterpret_cast<u8 *>(res);\n-  VReport(1, \"T%d: FakeStack created: %p -- %p stack_size_log: %zd; \"\n+  VReport(1,\n+          \"T%d: FakeStack created: %p -- %p stack_size_log: %zd; \"\n           \"mmapped %zdK, noreserve=%d \\n\",\n-          GetCurrentTidOrInvalid(), p,\n-          p + FakeStack::RequiredSize(stack_size_log), stack_size_log,\n+          GetCurrentTidOrInvalid(), (void *)p,\n+          (void *)(p + FakeStack::RequiredSize(stack_size_log)), stack_size_log,\n           size >> 10, flags()->uar_noreserve);\n   return res;\n }"}, {"sha": "5f56fe6f457d12ffd9478eb14fac199adb4fec0e", "filename": "libsanitizer/asan/asan_globals.cpp", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b/libsanitizer%2Fasan%2Fasan_globals.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b/libsanitizer%2Fasan%2Fasan_globals.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fasan%2Fasan_globals.cpp?ref=2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b", "patch": "@@ -89,8 +89,8 @@ static void ReportGlobal(const Global &g, const char *prefix) {\n       g.module_name, g.has_dynamic_init, (void *)g.odr_indicator);\n   if (g.location) {\n     Report(\"  location (%p): name=%s[%p], %d %d\\n\", (void *)g.location,\n-           g.location->filename, g.location->filename, g.location->line_no,\n-           g.location->column_no);\n+           g.location->filename, (void *)g.location->filename,\n+           g.location->line_no, g.location->column_no);\n   }\n }\n \n@@ -154,6 +154,23 @@ static void CheckODRViolationViaIndicator(const Global *g) {\n   }\n }\n \n+// Check ODR violation for given global G by checking if it's already poisoned.\n+// We use this method in case compiler doesn't use private aliases for global\n+// variables.\n+static void CheckODRViolationViaPoisoning(const Global *g) {\n+  if (__asan_region_is_poisoned(g->beg, g->size_with_redzone)) {\n+    // This check may not be enough: if the first global is much larger\n+    // the entire redzone of the second global may be within the first global.\n+    for (ListOfGlobals *l = list_of_all_globals; l; l = l->next) {\n+      if (g->beg == l->g->beg &&\n+          (flags()->detect_odr_violation >= 2 || g->size != l->g->size) &&\n+          !IsODRViolationSuppressed(g->name))\n+        ReportODRViolation(g, FindRegistrationSite(g),\n+                           l->g, FindRegistrationSite(l->g));\n+    }\n+  }\n+}\n+\n // Clang provides two different ways for global variables protection:\n // it can poison the global itself or its private alias. In former\n // case we may poison same symbol multiple times, that can help us to\n@@ -199,6 +216,8 @@ static void RegisterGlobal(const Global *g) {\n     // where two globals with the same name are defined in different modules.\n     if (UseODRIndicator(g))\n       CheckODRViolationViaIndicator(g);\n+    else\n+      CheckODRViolationViaPoisoning(g);\n   }\n   if (CanPoisonMemory())\n     PoisonRedZones(*g);"}, {"sha": "047b044c8bf47da51e74436dc088b2740fd162dc", "filename": "libsanitizer/asan/asan_interceptors.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b/libsanitizer%2Fasan%2Fasan_interceptors.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b/libsanitizer%2Fasan%2Fasan_interceptors.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fasan%2Fasan_interceptors.h?ref=2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b", "patch": "@@ -81,12 +81,7 @@ void InitializePlatformInterceptors();\n #if ASAN_HAS_EXCEPTIONS && !SANITIZER_WINDOWS && !SANITIZER_SOLARIS && \\\n     !SANITIZER_NETBSD\n # define ASAN_INTERCEPT___CXA_THROW 1\n-# if ! defined(ASAN_HAS_CXA_RETHROW_PRIMARY_EXCEPTION) \\\n-     || ASAN_HAS_CXA_RETHROW_PRIMARY_EXCEPTION\n-#   define ASAN_INTERCEPT___CXA_RETHROW_PRIMARY_EXCEPTION 1\n-# else\n-#   define ASAN_INTERCEPT___CXA_RETHROW_PRIMARY_EXCEPTION 0\n-# endif\n+# define ASAN_INTERCEPT___CXA_RETHROW_PRIMARY_EXCEPTION 1\n # if defined(_GLIBCXX_SJLJ_EXCEPTIONS) || (SANITIZER_IOS && defined(__arm__))\n #  define ASAN_INTERCEPT__UNWIND_SJLJ_RAISEEXCEPTION 1\n # else"}, {"sha": "e5a7f2007aea8b8208e929e08ee675a55cd252eb", "filename": "libsanitizer/asan/asan_mapping.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b/libsanitizer%2Fasan%2Fasan_mapping.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b/libsanitizer%2Fasan%2Fasan_mapping.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fasan%2Fasan_mapping.h?ref=2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b", "patch": "@@ -165,7 +165,7 @@ static const u64 kAArch64_ShadowOffset64 = 1ULL << 36;\n static const u64 kRiscv64_ShadowOffset64 = 0xd55550000;\n static const u64 kMIPS32_ShadowOffset32 = 0x0aaa0000;\n static const u64 kMIPS64_ShadowOffset64 = 1ULL << 37;\n-static const u64 kPPC64_ShadowOffset64 = 1ULL << 41;\n+static const u64 kPPC64_ShadowOffset64 = 1ULL << 44;\n static const u64 kSystemZ_ShadowOffset64 = 1ULL << 52;\n static const u64 kSPARC64_ShadowOffset64 = 1ULL << 43;  // 0x80000000000\n static const u64 kFreeBSD_ShadowOffset32 = 1ULL << 30;  // 0x40000000"}, {"sha": "66d3d155d409438cf6e46c59ee746fbded3fad18", "filename": "libsanitizer/hwasan/hwasan_report.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b/libsanitizer%2Fhwasan%2Fhwasan_report.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b/libsanitizer%2Fhwasan%2Fhwasan_report.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fhwasan%2Fhwasan_report.cpp?ref=2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b", "patch": "@@ -518,7 +518,7 @@ static void PrintTagInfoAroundAddr(tag_t *tag_ptr, uptr num_rows,\n   InternalScopedString s;\n   for (tag_t *row = beg_row; row < end_row; row += row_len) {\n     s.append(\"%s\", row == center_row_beg ? \"=>\" : \"  \");\n-    s.append(\"%p:\", row);\n+    s.append(\"%p:\", (void *)row);\n     for (uptr i = 0; i < row_len; i++) {\n       s.append(\"%s\", row + i == tag_ptr ? \"[\" : \" \");\n       print_tag(s, &row[i]);"}, {"sha": "5f05446ac7a3b90e49b34c0936f09441c7ca57e4", "filename": "libsanitizer/hwasan/hwasan_thread.cpp", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b/libsanitizer%2Fhwasan%2Fhwasan_thread.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b/libsanitizer%2Fhwasan%2Fhwasan_thread.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fhwasan%2Fhwasan_thread.cpp?ref=2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b", "patch": "@@ -108,10 +108,9 @@ void Thread::Destroy() {\n }\n \n void Thread::Print(const char *Prefix) {\n-  Printf(\"%sT%zd %p stack: [%p,%p) sz: %zd tls: [%p,%p)\\n\", Prefix,\n-         unique_id_, this, stack_bottom(), stack_top(),\n-         stack_top() - stack_bottom(),\n-         tls_begin(), tls_end());\n+  Printf(\"%sT%zd %p stack: [%p,%p) sz: %zd tls: [%p,%p)\\n\", Prefix, unique_id_,\n+         (void *)this, stack_bottom(), stack_top(),\n+         stack_top() - stack_bottom(), tls_begin(), tls_end());\n }\n \n static u32 xorshift(u32 state) {"}, {"sha": "7ce9e25da342d8d70312d956a68b137f29326eb8", "filename": "libsanitizer/sanitizer_common/sanitizer_linux_libcdep.cpp", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b/libsanitizer%2Fsanitizer_common%2Fsanitizer_linux_libcdep.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b/libsanitizer%2Fsanitizer_common%2Fsanitizer_linux_libcdep.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_linux_libcdep.cpp?ref=2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b", "patch": "@@ -759,13 +759,9 @@ u32 GetNumberOfCPUs() {\n #elif SANITIZER_SOLARIS\n   return sysconf(_SC_NPROCESSORS_ONLN);\n #else\n-#if defined(CPU_COUNT)\n   cpu_set_t CPUs;\n   CHECK_EQ(sched_getaffinity(0, sizeof(cpu_set_t), &CPUs), 0);\n   return CPU_COUNT(&CPUs);\n-#else\n-  return 1;\n-#endif\n #endif\n }\n "}, {"sha": "36a9d509804216f1e1175a9225340636edf55e44", "filename": "libsanitizer/sanitizer_common/sanitizer_mac.cpp", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b/libsanitizer%2Fsanitizer_common%2Fsanitizer_mac.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b/libsanitizer%2Fsanitizer_common%2Fsanitizer_mac.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_mac.cpp?ref=2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b", "patch": "@@ -37,7 +37,7 @@\n extern char **environ;\n #endif\n \n-#if defined(__has_include) && __has_include(<os/trace.h>) && defined(__BLOCKS__)\n+#if defined(__has_include) && __has_include(<os/trace.h>)\n #define SANITIZER_OS_TRACE 1\n #include <os/trace.h>\n #else\n@@ -70,15 +70,7 @@ extern \"C\" {\n #include <mach/mach_time.h>\n #include <mach/vm_statistics.h>\n #include <malloc/malloc.h>\n-#if defined(__has_builtin) && __has_builtin(__builtin_os_log_format)\n-# include <os/log.h>\n-#else\n-   /* Without support for __builtin_os_log_format, fall back to the older\n-      method.  */\n-# define OS_LOG_DEFAULT 0\n-# define os_log_error(A,B,C) \\\n-  asl_log(nullptr, nullptr, ASL_LEVEL_ERR, \"%s\", (C));\n-#endif\n+#include <os/log.h>\n #include <pthread.h>\n #include <sched.h>\n #include <signal.h>"}, {"sha": "0b6af5a3c0edc649c4d65dfd1a6ca1bce13aa9b9", "filename": "libsanitizer/sanitizer_common/sanitizer_mac.h", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b/libsanitizer%2Fsanitizer_common%2Fsanitizer_mac.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b/libsanitizer%2Fsanitizer_common%2Fsanitizer_mac.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_mac.h?ref=2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b", "patch": "@@ -14,26 +14,6 @@\n \n #include \"sanitizer_common.h\"\n #include \"sanitizer_platform.h\"\n-\n-/* TARGET_OS_OSX is not present in SDKs before Darwin16 (macOS 10.12) use\n-   TARGET_OS_MAC (we have no support for iOS in any form for these versions,\n-   so there's no ambiguity).  */\n-#if !defined(TARGET_OS_OSX) && TARGET_OS_MAC\n-# define TARGET_OS_OSX 1\n-#endif\n-\n-/* Other TARGET_OS_xxx are not present on earlier versions, define them to\n-   0 (we have no support for them; they are not valid targets anyway).  */\n-#ifndef TARGET_OS_IOS\n-#define TARGET_OS_IOS 0\n-#endif\n-#ifndef TARGET_OS_TV\n-#define TARGET_OS_TV 0\n-#endif\n-#ifndef TARGET_OS_WATCH\n-#define TARGET_OS_WATCH 0\n-#endif\n-\n #if SANITIZER_MAC\n #include \"sanitizer_posix.h\"\n "}, {"sha": "9d577570ea1e2e219b4a08c64f450794d6a145d7", "filename": "libsanitizer/sanitizer_common/sanitizer_platform_limits_linux.cpp", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b/libsanitizer%2Fsanitizer_common%2Fsanitizer_platform_limits_linux.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b/libsanitizer%2Fsanitizer_common%2Fsanitizer_platform_limits_linux.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_platform_limits_linux.cpp?ref=2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b", "patch": "@@ -26,10 +26,7 @@\n \n // With old kernels (and even new kernels on powerpc) asm/stat.h uses types that\n // are not defined anywhere in userspace headers. Fake them. This seems to work\n-// fine with newer headers, too.  Beware that with <sys/stat.h>, struct stat\n-// takes the form of struct stat64 on 32-bit platforms if _FILE_OFFSET_BITS=64.\n-// Also, for some platforms (e.g. mips) there are additional members in the\n-// <sys/stat.h> struct stat:s.\n+// fine with newer headers, too.\n #include <linux/posix_types.h>\n #  if defined(__x86_64__) || defined(__mips__) || defined(__hexagon__)\n #    include <sys/stat.h>"}, {"sha": "d69b344dd613d6e2f25c39d839cbf5a899ddf81d", "filename": "libsanitizer/sanitizer_common/sanitizer_platform_limits_posix.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b/libsanitizer%2Fsanitizer_common%2Fsanitizer_platform_limits_posix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b/libsanitizer%2Fsanitizer_common%2Fsanitizer_platform_limits_posix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_platform_limits_posix.h?ref=2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b", "patch": "@@ -83,7 +83,7 @@ const unsigned struct_kernel_stat64_sz = 104;\n #elif defined(__mips__)\n const unsigned struct_kernel_stat_sz = SANITIZER_ANDROID\n                                            ? FIRST_32_SECOND_64(104, 128)\n-                                           : FIRST_32_SECOND_64(144, 216);\n+                                           : FIRST_32_SECOND_64(160, 216);\n const unsigned struct_kernel_stat64_sz = 104;\n #elif defined(__s390__) && !defined(__s390x__)\n const unsigned struct_kernel_stat_sz = 64;"}, {"sha": "37e9e6dd08d7b2bc3eba2582536ef98cde0228a3", "filename": "libsanitizer/sanitizer_common/sanitizer_stacktrace.cpp", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b/libsanitizer%2Fsanitizer_common%2Fsanitizer_stacktrace.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b/libsanitizer%2Fsanitizer_common%2Fsanitizer_stacktrace.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_stacktrace.cpp?ref=2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b", "patch": "@@ -86,8 +86,8 @@ static inline uhwptr *GetCanonicFrame(uptr bp,\n   // Nope, this does not look right either. This means the frame after next does\n   // not have a valid frame pointer, but we can still extract the caller PC.\n   // Unfortunately, there is no way to decide between GCC and LLVM frame\n-  // layouts. Assume GCC.\n-  return bp_prev - 1;\n+  // layouts. Assume LLVM.\n+  return bp_prev;\n #else\n   return (uhwptr*)bp;\n #endif\n@@ -110,21 +110,14 @@ void BufferedStackTrace::UnwindFast(uptr pc, uptr bp, uptr stack_top,\n          IsAligned((uptr)frame, sizeof(*frame)) &&\n          size < max_depth) {\n #ifdef __powerpc__\n-    // PowerPC ABIs specify that the return address is saved on the\n-    // *caller's* stack frame.  Thus we must dereference the back chain\n-    // to find the caller frame before extracting it.\n+    // PowerPC ABIs specify that the return address is saved at offset\n+    // 16 of the *caller's* stack frame.  Thus we must dereference the\n+    // back chain to find the caller frame before extracting it.\n     uhwptr *caller_frame = (uhwptr*)frame[0];\n     if (!IsValidFrame((uptr)caller_frame, stack_top, bottom) ||\n         !IsAligned((uptr)caller_frame, sizeof(uhwptr)))\n       break;\n-    // For most ABIs the offset where the return address is saved is two\n-    // register sizes.  The exception is the SVR4 ABI, which uses an\n-    // offset of only one register size.\n-#ifdef _CALL_SYSV\n-    uhwptr pc1 = caller_frame[1];\n-#else\n     uhwptr pc1 = caller_frame[2];\n-#endif\n #elif defined(__s390__)\n     uhwptr pc1 = frame[14];\n #elif defined(__riscv)"}, {"sha": "11c6154b09ea75c2ff0856479fda917aecc484a4", "filename": "libsanitizer/sanitizer_common/sanitizer_stacktrace.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b/libsanitizer%2Fsanitizer_common%2Fsanitizer_stacktrace.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b/libsanitizer%2Fsanitizer_common%2Fsanitizer_stacktrace.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_stacktrace.h?ref=2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b", "patch": "@@ -209,11 +209,11 @@ static inline bool IsValidFrame(uptr frame, uptr stack_top, uptr stack_bottom) {\n // StackTrace::GetCurrentPc() faster.\n #if defined(__x86_64__)\n #  define GET_CURRENT_PC()                \\\n-    ({                                    \\\n+    (__extension__({                      \\\n       uptr pc;                            \\\n       asm(\"lea 0(%%rip), %0\" : \"=r\"(pc)); \\\n       pc;                                 \\\n-    })\n+    }))\n #else\n #  define GET_CURRENT_PC() StackTrace::GetCurrentPc()\n #endif"}, {"sha": "c6356dae23c13139c0376210b92e49137abe34ee", "filename": "libsanitizer/sanitizer_common/sanitizer_stacktrace_printer.cpp", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b/libsanitizer%2Fsanitizer_common%2Fsanitizer_stacktrace_printer.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b/libsanitizer%2Fsanitizer_common%2Fsanitizer_stacktrace_printer.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_stacktrace_printer.cpp?ref=2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b", "patch": "@@ -198,7 +198,8 @@ void RenderFrame(InternalScopedString *buffer, const char *format, int frame_no,\n       }\n       break;\n     default:\n-      Report(\"Unsupported specifier in stack frame format: %c (%p)!\\n\", *p, p);\n+      Report(\"Unsupported specifier in stack frame format: %c (%p)!\\n\", *p,\n+             (void *)p);\n       Die();\n     }\n   }\n@@ -250,7 +251,7 @@ void RenderData(InternalScopedString *buffer, const char *format,\n         break;\n       default:\n         Report(\"Unsupported specifier in stack frame format: %c (%p)!\\n\", *p,\n-               p);\n+               (void *)p);\n         Die();\n     }\n   }"}, {"sha": "8285e21aa1ec7a797dfcf4840ee5a7851106b497", "filename": "libsanitizer/tsan/tsan_rtl_ppc64.S", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b/libsanitizer%2Ftsan%2Ftsan_rtl_ppc64.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b/libsanitizer%2Ftsan%2Ftsan_rtl_ppc64.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Ftsan%2Ftsan_rtl_ppc64.S?ref=2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b", "patch": "@@ -1,6 +1,5 @@\n #include \"tsan_ppc_regs.h\"\n \n-        .machine altivec\n         .section .text\n         .hidden __tsan_setjmp\n         .globl _setjmp"}, {"sha": "25cefd46ce27ced7fb6092d8d04b5074c56ebe95", "filename": "libsanitizer/ubsan/ubsan_flags.cpp", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b/libsanitizer%2Fubsan%2Fubsan_flags.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b/libsanitizer%2Fubsan%2Fubsan_flags.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fubsan%2Fubsan_flags.cpp?ref=2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b", "patch": "@@ -50,7 +50,6 @@ void InitializeFlags() {\n   {\n     CommonFlags cf;\n     cf.CopyFrom(*common_flags());\n-    cf.print_summary = false;\n     cf.external_symbolizer_path = GetFlag(\"UBSAN_SYMBOLIZER_PATH\");\n     OverrideCommonFlags(cf);\n   }"}, {"sha": "e201e6bba22078e3d873aeb5792b98ecd860cdaa", "filename": "libsanitizer/ubsan/ubsan_handlers.cpp", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b/libsanitizer%2Fubsan%2Fubsan_handlers.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b/libsanitizer%2Fubsan%2Fubsan_handlers.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fubsan%2Fubsan_handlers.cpp?ref=2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b", "patch": "@@ -894,21 +894,6 @@ void __ubsan_handle_cfi_bad_type(CFICheckFailData *Data, ValueHandle Vtable,\n \n }  // namespace __ubsan\n \n-void __ubsan::__ubsan_handle_cfi_bad_icall(CFIBadIcallData *CallData,\n-                                           ValueHandle Function) {\n-  GET_REPORT_OPTIONS(false);\n-  CFICheckFailData Data = {CFITCK_ICall, CallData->Loc, CallData->Type};\n-  handleCFIBadIcall(&Data, Function, Opts);\n-}\n-\n-void __ubsan::__ubsan_handle_cfi_bad_icall_abort(CFIBadIcallData *CallData,\n-                                                 ValueHandle Function) {\n-  GET_REPORT_OPTIONS(true);\n-  CFICheckFailData Data = {CFITCK_ICall, CallData->Loc, CallData->Type};\n-  handleCFIBadIcall(&Data, Function, Opts);\n-  Die();\n-}\n-\n void __ubsan::__ubsan_handle_cfi_check_fail(CFICheckFailData *Data,\n                                             ValueHandle Value,\n                                             uptr ValidVtable) {"}, {"sha": "219fb15de55fe02a4544422095baa0d8532baaa0", "filename": "libsanitizer/ubsan/ubsan_handlers.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b/libsanitizer%2Fubsan%2Fubsan_handlers.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b/libsanitizer%2Fubsan%2Fubsan_handlers.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fubsan%2Fubsan_handlers.h?ref=2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b", "patch": "@@ -215,20 +215,12 @@ enum CFITypeCheckKind : unsigned char {\n   CFITCK_VMFCall,\n };\n \n-struct CFIBadIcallData {\n-  SourceLocation Loc;\n-  const TypeDescriptor &Type;\n-};\n-\n struct CFICheckFailData {\n   CFITypeCheckKind CheckKind;\n   SourceLocation Loc;\n   const TypeDescriptor &Type;\n };\n \n-/// \\brief Handle control flow integrity failure for indirect function calls.\n-RECOVERABLE(cfi_bad_icall, CFIBadIcallData *Data, ValueHandle Function)\n-\n /// \\brief Handle control flow integrity failures.\n RECOVERABLE(cfi_check_fail, CFICheckFailData *Data, ValueHandle Function,\n             uptr VtableIsValid)"}, {"sha": "d2cc2e10bd2f023b8d9aa1685a79a192a6d1e1e8", "filename": "libsanitizer/ubsan/ubsan_platform.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b/libsanitizer%2Fubsan%2Fubsan_platform.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b/libsanitizer%2Fubsan%2Fubsan_platform.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fubsan%2Fubsan_platform.h?ref=2afc8f0b9198f3ee8274cf9c6b9352cab6cf9d4b", "patch": "@@ -12,7 +12,6 @@\n #ifndef UBSAN_PLATFORM_H\n #define UBSAN_PLATFORM_H\n \n-#ifndef CAN_SANITIZE_UB\n // Other platforms should be easy to add, and probably work as-is.\n #if defined(__linux__) || defined(__FreeBSD__) || defined(__APPLE__) ||        \\\n     defined(__NetBSD__) || defined(__DragonFly__) ||                           \\\n@@ -22,6 +21,5 @@\n #else\n # define CAN_SANITIZE_UB 0\n #endif\n-#endif //CAN_SANITIZE_UB\n \n #endif"}]}