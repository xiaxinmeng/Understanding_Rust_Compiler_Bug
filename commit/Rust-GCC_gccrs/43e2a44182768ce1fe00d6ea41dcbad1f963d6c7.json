{"sha": "43e2a44182768ce1fe00d6ea41dcbad1f963d6c7", "node_id": "C_kwDOANBUbNoAKDQzZTJhNDQxODI3NjhjZTFmZTAwZDZlYTQxZGNiYWQxZjk2M2Q2Yzc", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-10-08T20:04:26Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-10-08T23:57:48Z"}, "message": "libstdc++: Add missing _GLIBCXX_USE_WCHAR_T checks in testsuite\n\nThese tests fail for a --disable-wchar_t build.\n\nlibstdc++-v3/ChangeLog:\n\n\t* testsuite/22_locale/conversions/buffer/1.cc: Check\n\t_GLIBCXX_USE_WCHAR_T.\n\t* testsuite/22_locale/conversions/buffer/3.cc: Likewise. Add\n\ttest using char16_t.\n\t* testsuite/22_locale/conversions/string/1.cc: Check\n\t_GLIBCXX_USE_WCHAR_T.\n\t* testsuite/27_io/filesystem/path/generic/generic_string.cc:\n\tLikewise.\n\t* testsuite/27_io/filesystem/path/modifiers/make_preferred.cc:\n\tLikewise.\n\t* testsuite/27_io/filesystem/path/native/alloc.cc: Likewise.\n\t* testsuite/27_io/filesystem/path/native/string-char8_t.cc:\n\tLikewise.\n\t* testsuite/27_io/filesystem/path/native/string.cc: Likewise.\n\t* testsuite/28_regex/algorithms/regex_match/extended/wstring_locale.cc:\n\tLikewise.\n\t* testsuite/experimental/filesystem/path/generic/generic_string.cc:\n\tLikewise.\n\t* testsuite/experimental/filesystem/path/native/alloc.cc:\n\tLikewise.\n\t* testsuite/experimental/filesystem/path/native/string-char8_t.cc:\n\tLikewise.\n\t* testsuite/experimental/filesystem/path/native/string.cc:\n\tLikewise.", "tree": {"sha": "1ceecd5207d4a15cbf657706d167ca6a8a8d1fd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ceecd5207d4a15cbf657706d167ca6a8a8d1fd8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43e2a44182768ce1fe00d6ea41dcbad1f963d6c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43e2a44182768ce1fe00d6ea41dcbad1f963d6c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43e2a44182768ce1fe00d6ea41dcbad1f963d6c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43e2a44182768ce1fe00d6ea41dcbad1f963d6c7/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29a9de9b40277af98515eabebb75be1f154e9505", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29a9de9b40277af98515eabebb75be1f154e9505", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29a9de9b40277af98515eabebb75be1f154e9505"}], "stats": {"total": 58, "additions": 53, "deletions": 5}, "files": [{"sha": "9db7fce7241db9ed266fa9c39fef1bfda41331af", "filename": "libstdc++-v3/testsuite/22_locale/conversions/buffer/1.cc", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e2a44182768ce1fe00d6ea41dcbad1f963d6c7/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fconversions%2Fbuffer%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e2a44182768ce1fe00d6ea41dcbad1f963d6c7/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fconversions%2Fbuffer%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fconversions%2Fbuffer%2F1.cc?ref=43e2a44182768ce1fe00d6ea41dcbad1f963d6c7", "patch": "@@ -31,12 +31,11 @@ template<typename Elem>\n using buf_conv = std::wbuffer_convert<cvt<Elem>, Elem>;\n \n using std::string;\n-using std::stringstream;\n using std::wstring;\n-using std::wstringstream;\n \n void test01()\n {\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   buf_conv<wchar_t> buf;\n   std::stringbuf sbuf;\n   VERIFY( buf.rdbuf() == nullptr );\n@@ -46,14 +45,15 @@ void test01()\n \n   __gnu_test::implicitly_default_constructible test;\n   test.operator()<buf_conv<wchar_t>>(); // P0935R0\n+#endif\n }\n \n void test02()\n {\n   std::stringbuf sbuf;\n   buf_conv<char> buf(&sbuf);  // noconv\n \n-  stringstream ss;\n+  std::stringstream ss;\n   ss.std::ios::rdbuf(&buf);\n   string input = \"King for a day...\";\n   ss << input << std::flush;\n@@ -63,15 +63,17 @@ void test02()\n \n void test03()\n {\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   std::stringbuf sbuf;\n   buf_conv<wchar_t> buf(&sbuf);\n \n-  wstringstream ss;\n+  std::wstringstream ss;\n   ss.std::wios::rdbuf(&buf);\n   wstring input = L\"Fool for a lifetime\";\n   ss << input << std::flush;\n   string output = sbuf.str();\n   VERIFY( output == \"Fool for a lifetime\" );\n+#endif\n }\n \n int main()"}, {"sha": "3e1d90ffe92f954f7be53fc9d299951dd5d131a3", "filename": "libstdc++-v3/testsuite/22_locale/conversions/buffer/3.cc", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e2a44182768ce1fe00d6ea41dcbad1f963d6c7/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fconversions%2Fbuffer%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e2a44182768ce1fe00d6ea41dcbad1f963d6c7/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fconversions%2Fbuffer%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fconversions%2Fbuffer%2F3.cc?ref=43e2a44182768ce1fe00d6ea41dcbad1f963d6c7", "patch": "@@ -38,21 +38,37 @@ struct streambuf : std::streambuf\n   char c = 'a';\n };\n \n-struct codecvt : std::codecvt<wchar_t, char, std::mbstate_t> { };\n \n void\n test01()\n {\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  struct codecvt : std::codecvt<wchar_t, char, std::mbstate_t> { };\n   // https://gcc.gnu.org/ml/libstdc++/2017-11/msg00022.html\n   streambuf sb;\n   std::wbuffer_convert<codecvt> conv(&sb);\n   VERIFY( sb.in_avail() == 0 );\n   wchar_t c = conv.sgetc();\n   VERIFY( c == L'a' );\n+#endif\n+}\n+\n+\n+void\n+test02()\n+{\n+  struct codecvt : std::codecvt<char16_t, char, std::mbstate_t> { };\n+  // https://gcc.gnu.org/ml/libstdc++/2017-11/msg00022.html\n+  streambuf sb;\n+  std::wbuffer_convert<codecvt, char16_t> conv(&sb);\n+  VERIFY( sb.in_avail() == 0 );\n+  char16_t c = conv.sgetc();\n+  VERIFY( c == u'a' );\n }\n \n int\n main()\n {\n   test01();\n+  test02();\n }"}, {"sha": "b5132dadce408162ad37efe394b7c215f80d2113", "filename": "libstdc++-v3/testsuite/22_locale/conversions/string/1.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e2a44182768ce1fe00d6ea41dcbad1f963d6c7/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fconversions%2Fstring%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e2a44182768ce1fe00d6ea41dcbad1f963d6c7/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fconversions%2Fstring%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fconversions%2Fstring%2F1.cc?ref=43e2a44182768ce1fe00d6ea41dcbad1f963d6c7", "patch": "@@ -51,6 +51,7 @@ void test01()\n \n void test02()\n {\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   typedef str_conv<wchar_t> wsc;\n   wsc c;\n   string input = \"Fool for a lifetime\";\n@@ -71,6 +72,7 @@ void test02()\n \n   __gnu_test::implicitly_default_constructible test;\n   test.operator()<wsc>(); // P0935R0\n+#endif\n }\n \n int main()"}, {"sha": "4a603e23067c207eced43143a333a84ed8df326b", "filename": "libstdc++-v3/testsuite/27_io/filesystem/path/generic/generic_string.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e2a44182768ce1fe00d6ea41dcbad1f963d6c7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fgeneric%2Fgeneric_string.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e2a44182768ce1fe00d6ea41dcbad1f963d6c7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fgeneric%2Fgeneric_string.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fgeneric%2Fgeneric_string.cc?ref=43e2a44182768ce1fe00d6ea41dcbad1f963d6c7", "patch": "@@ -69,7 +69,9 @@ test03()\n     // A path constructed from the generic format string should compare equal\n     // to the original, because they represent the same path.\n     VERIFY( path(p.generic_string()) == p );\n+#ifdef _GLIBCXX_USE_WCHAR_T\n     VERIFY( path(p.generic_wstring()) == p );\n+#endif\n     VERIFY( path(p.generic_u8string()) == p );\n     VERIFY( path(p.generic_u16string()) == p );\n     VERIFY( path(p.generic_u32string()) == p );\n@@ -80,7 +82,9 @@ test03()\n     // A path constructed from the generic format string should compare equal\n     // to the original, because they represent the same path.\n     VERIFY( path(p.generic_string()) == p );\n+#ifdef _GLIBCXX_USE_WCHAR_T\n     VERIFY( path(p.generic_wstring()) == p );\n+#endif\n     VERIFY( path(p.generic_u8string()) == p );\n     VERIFY( path(p.generic_u16string()) == p );\n     VERIFY( path(p.generic_u32string()) == p );"}, {"sha": "d21f17967982ce81cd9c23024b76ac67ee8dcbb3", "filename": "libstdc++-v3/testsuite/27_io/filesystem/path/modifiers/make_preferred.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e2a44182768ce1fe00d6ea41dcbad1f963d6c7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fmodifiers%2Fmake_preferred.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e2a44182768ce1fe00d6ea41dcbad1f963d6c7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fmodifiers%2Fmake_preferred.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fmodifiers%2Fmake_preferred.cc?ref=43e2a44182768ce1fe00d6ea41dcbad1f963d6c7", "patch": "@@ -45,7 +45,11 @@ struct checker<wchar_t, L'\\\\'>\n {\n   static void check()\n   {\n+#ifdef _GLIBCXX_USE_WCHAR_T\n     VERIFY( path(\"foo/bar\").make_preferred() == L\"foo\\\\bar\" );\n+#else\n+    VERIFY( ! \"filesystem::path needs --enable-wchar_t on this target\" );\n+#endif\n   }\n };\n "}, {"sha": "87a59b6735d3d6d59a5cecfebeded64e0f53ebe3", "filename": "libstdc++-v3/testsuite/27_io/filesystem/path/native/alloc.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e2a44182768ce1fe00d6ea41dcbad1f963d6c7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fnative%2Falloc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e2a44182768ce1fe00d6ea41dcbad1f963d6c7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fnative%2Falloc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fnative%2Falloc.cc?ref=43e2a44182768ce1fe00d6ea41dcbad1f963d6c7", "patch": "@@ -41,9 +41,11 @@ test01()\n   VERIFY( str8.get_allocator() == alloc<char8_t>(1) );\n #endif\n \n+#ifdef _GLIBCXX_USE_WCHAR_T\n   auto strw = p.string<wchar_t>(alloc<wchar_t>(2));\n   VERIFY( strw == L\"\" );\n   VERIFY( strw.get_allocator() == alloc<wchar_t>(2) );\n+#endif\n \n   auto str16 = p.string<char16_t>(alloc<char16_t>(3));\n   VERIFY( str16 == u\"\" );\n@@ -70,9 +72,11 @@ test02()\n   VERIFY( str8.get_allocator() == alloc<char8_t>(1) );\n #endif\n \n+#ifdef _GLIBCXX_USE_WCHAR_T\n   auto strw = p.string<wchar_t>(alloc<wchar_t>(2));\n   VERIFY( strw == L\"abcdefghijklmnopqrstuvwxyz\" );\n   VERIFY( strw.get_allocator() == alloc<wchar_t>(2) );\n+#endif\n \n   auto str16 = p.string<char16_t>(alloc<char16_t>(3));\n   VERIFY( str16 == u\"abcdefghijklmnopqrstuvwxyz\" );"}, {"sha": "94421292d27c65cd08aa06d4f9b2340ca2520b0b", "filename": "libstdc++-v3/testsuite/27_io/filesystem/path/native/string-char8_t.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e2a44182768ce1fe00d6ea41dcbad1f963d6c7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fnative%2Fstring-char8_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e2a44182768ce1fe00d6ea41dcbad1f963d6c7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fnative%2Fstring-char8_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fnative%2Fstring-char8_t.cc?ref=43e2a44182768ce1fe00d6ea41dcbad1f963d6c7", "patch": "@@ -50,9 +50,11 @@ test02()\n   VERIFY( str == \"abc\" );\n   VERIFY( str == p.string() );\n \n+#ifdef _GLIBCXX_USE_WCHAR_T\n   auto strw = p.string<wchar_t>();\n   VERIFY( strw == L\"abc\" );\n   VERIFY( strw == p.wstring() );\n+#endif\n \n #ifdef _GLIBCXX_USE_CHAR8_T\n   auto str8 = p.string<char8_t>();"}, {"sha": "a61f78ad0c4a1a49a3cb987986e71589ba45fa76", "filename": "libstdc++-v3/testsuite/27_io/filesystem/path/native/string.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e2a44182768ce1fe00d6ea41dcbad1f963d6c7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fnative%2Fstring.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e2a44182768ce1fe00d6ea41dcbad1f963d6c7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fnative%2Fstring.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fnative%2Fstring.cc?ref=43e2a44182768ce1fe00d6ea41dcbad1f963d6c7", "patch": "@@ -48,9 +48,11 @@ test02()\n   VERIFY( str == \"abc\" );\n   VERIFY( str == p.string() );\n \n+#ifdef _GLIBCXX_USE_WCHAR_T\n   auto strw = p.string<wchar_t>();\n   VERIFY( strw == L\"abc\" );\n   VERIFY( strw == p.wstring() );\n+#endif\n \n   auto str16 = p.string<char16_t>();\n   VERIFY( str16 == u\"abc\" );"}, {"sha": "a24ee630797464009220ea933d42eec5c06a3cf2", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/extended/wstring_locale.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e2a44182768ce1fe00d6ea41dcbad1f963d6c7/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fextended%2Fwstring_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e2a44182768ce1fe00d6ea41dcbad1f963d6c7/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fextended%2Fwstring_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fextended%2Fwstring_locale.cc?ref=43e2a44182768ce1fe00d6ea41dcbad1f963d6c7", "patch": "@@ -35,12 +35,14 @@ using namespace std;\n void\n test01()\n {\n+#ifdef _GLIBCXX_USE_WCHAR_T\n   std::wstring str2 = L\"\u00dcBER\";\n   std::wregex re2;\n   re2.imbue(std::locale(\"de_DE.UTF-8\"));\n   re2.assign(L\"[[:upper:]]*\", std::regex::extended);\n   std::wsmatch m2;\n   VERIFY(regex_match_debug(str2, m2, re2));\n+#endif\n }\n \n int"}, {"sha": "26d68c81b9679d43708449694db65c7185056f0a", "filename": "libstdc++-v3/testsuite/experimental/filesystem/path/generic/generic_string.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e2a44182768ce1fe00d6ea41dcbad1f963d6c7/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fpath%2Fgeneric%2Fgeneric_string.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e2a44182768ce1fe00d6ea41dcbad1f963d6c7/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fpath%2Fgeneric%2Fgeneric_string.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fpath%2Fgeneric%2Fgeneric_string.cc?ref=43e2a44182768ce1fe00d6ea41dcbad1f963d6c7", "patch": "@@ -55,7 +55,9 @@ test03()\n     // A path constructed from the generic format string should compare equal\n     // to the original, because they represent the same path.\n     VERIFY( path(p.generic_string()) == p );\n+#ifdef _GLIBCXX_USE_WCHAR_T\n     VERIFY( path(p.generic_wstring()) == p );\n+#endif\n     VERIFY( path(p.generic_u8string()) == p );\n     VERIFY( path(p.generic_u16string()) == p );\n     VERIFY( path(p.generic_u32string()) == p );"}, {"sha": "04426480311141e802b7818a71d32f7c40eab530", "filename": "libstdc++-v3/testsuite/experimental/filesystem/path/native/alloc.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e2a44182768ce1fe00d6ea41dcbad1f963d6c7/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fpath%2Fnative%2Falloc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e2a44182768ce1fe00d6ea41dcbad1f963d6c7/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fpath%2Fnative%2Falloc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fpath%2Fnative%2Falloc.cc?ref=43e2a44182768ce1fe00d6ea41dcbad1f963d6c7", "patch": "@@ -43,9 +43,11 @@ test01()\n   VERIFY( str8.get_allocator() == alloc<char8_t>(1) );\n #endif\n \n+#ifdef _GLIBCXX_USE_WCHAR_T\n   auto strw = p.string<wchar_t>(alloc<wchar_t>(2));\n   VERIFY( strw == L\"\" );\n   VERIFY( strw.get_allocator() == alloc<wchar_t>(2) );\n+#endif\n \n   auto str16 = p.string<char16_t>(alloc<char16_t>(3));\n   VERIFY( str16 == u\"\" );\n@@ -72,9 +74,11 @@ test02()\n   VERIFY( str8.get_allocator() == alloc<char8_t>(1) );\n #endif\n \n+#ifdef _GLIBCXX_USE_WCHAR_T\n   auto strw = p.string<wchar_t>(alloc<wchar_t>(2));\n   VERIFY( strw == L\"abcdefghijklmnopqrstuvwxyz\" );\n   VERIFY( strw.get_allocator() == alloc<wchar_t>(2) );\n+#endif\n \n   auto str16 = p.string<char16_t>(alloc<char16_t>(3));\n   VERIFY( str16 == u\"abcdefghijklmnopqrstuvwxyz\" );"}, {"sha": "9775fe895186b2a4bae737889dc0452229cc4d2d", "filename": "libstdc++-v3/testsuite/experimental/filesystem/path/native/string-char8_t.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e2a44182768ce1fe00d6ea41dcbad1f963d6c7/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fpath%2Fnative%2Fstring-char8_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e2a44182768ce1fe00d6ea41dcbad1f963d6c7/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fpath%2Fnative%2Fstring-char8_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fpath%2Fnative%2Fstring-char8_t.cc?ref=43e2a44182768ce1fe00d6ea41dcbad1f963d6c7", "patch": "@@ -50,9 +50,11 @@ test02()\n   VERIFY( str == u\"abc\" );\n   VERIFY( str == p.string() );\n \n+#ifdef _GLIBCXX_USE_WCHAR_T\n   auto strw = p.string<wchar_t>();\n   VERIFY( strw == L\"abc\" );\n   VERIFY( strw == p.wstring() );\n+#endif\n \n #ifdef _GLIBCXX_USE_CHAR8_T\n   auto str8 = p.string<char8_t>();"}, {"sha": "d82a539084068a2cfa440ef34265b188ead232f2", "filename": "libstdc++-v3/testsuite/experimental/filesystem/path/native/string.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43e2a44182768ce1fe00d6ea41dcbad1f963d6c7/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fpath%2Fnative%2Fstring.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43e2a44182768ce1fe00d6ea41dcbad1f963d6c7/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fpath%2Fnative%2Fstring.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fpath%2Fnative%2Fstring.cc?ref=43e2a44182768ce1fe00d6ea41dcbad1f963d6c7", "patch": "@@ -50,9 +50,11 @@ test02()\n   VERIFY( str == u\"abc\" );\n   VERIFY( str == p.string() );\n \n+#ifdef _GLIBCXX_USE_WCHAR_T\n   auto strw = p.string<wchar_t>();\n   VERIFY( strw == L\"abc\" );\n   VERIFY( strw == p.wstring() );\n+#endif\n \n   auto str16 = p.string<char16_t>();\n   VERIFY( str16 == u\"abc\" );"}]}