{"sha": "4546865e5b18963ce661d5053a6b4b7b15adfe7d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDU0Njg2NWU1YjE4OTYzY2U2NjFkNTA1M2E2YjRiN2IxNWFkZmU3ZA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-03-20T00:18:24Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-03-20T00:18:24Z"}, "message": "call.c (build_op_delete_call): Do not forget the placement arguments when iterating through mutiple delete...\n\n\t* call.c (build_op_delete_call): Do not forget the placement\n\targuments when iterating through mutiple delete operators.\n\n\t* cp-tree.h (svaed_scope): Remove last_parms.\n\t(NEW_DELETE_OPNAME_P): New macro.\n\t(last_function_parms): Remove.\n\t(do_friend): Adjust prototype.\n\t* decl.c (grokparms): Return the PARM_DECLs directly, rather than\n\tusing last_function_parms.\n\t(grokfndecl): Take the PARM_DECLs as an argument, rather than\n\tusing last_function_parms.\n\t(grokdeclarator): Adjust accordingly.  Do not form METHOD_TYPEs\n\tfor class-specific operator new and operator delete.\n\t(grok_op_properties): Do not look for allocation functions with\n\tMETHOD_TYPEs.\n\t(start_function): Use DECL_ARGUMENTS instead of\n\tlast_function_parms.\n\t* decl.h (last_function_parms): Do not declare.\n\t* decl2.c (grokclassfn): Do not use last_function_parms.\n\t* friend.c (do_friend): Remove parmdecls parameter.\n\t* name-lookup.c (push_to_top_level): Do not save last_function_parms.\n\t(pop_from_top_level): Do not restore it.\n\t* pt.c (check_explicit_specialization): Do not adjust\n\tlast_function_parms.\n\n\t* name-lookup.c (do_local_using_decl): Create a local binding for\n\ttypes brought in via using declarations.\n\n\t* name-lookup.c (lookup_arg_dependent): Handle block-scope\n\tfunction declarations correctly.\n\n\t* semantics.c (finish_id_expression): Correct handling of\n\tconversion operators to dependent types.\n\n\t* typeck.c (lookup_destructor): Allow the use of destructors from\n\tbase classes.\n\n\t* g++.dg/init/placement3.C: New test.\n\n\t* g++.dg/template/spec13.C: New test.\n\n\t* g++.dg/lookup/using11.C: New test.\n\n\t* g++.dg/lookup/koenig3.C: New test.\n\n\t* g++.dg/template/operator2.C: New test.\n\n\t* g++.dg/expr/dtor3.C: New test.\n\t* g++.old-deja/g++.brendan/crash15.C: Remove incorrect dg-error\n\tmarker.\n\t* g++.old-deja/g++.law/visibility28.C: Likewise.\n\nFrom-SVN: r79722", "tree": {"sha": "f2fd9f01f614185daf70c05007cdcde2929152b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2fd9f01f614185daf70c05007cdcde2929152b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4546865e5b18963ce661d5053a6b4b7b15adfe7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4546865e5b18963ce661d5053a6b4b7b15adfe7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4546865e5b18963ce661d5053a6b4b7b15adfe7d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4546865e5b18963ce661d5053a6b4b7b15adfe7d/comments", "author": null, "committer": null, "parents": [{"sha": "b40bc279e75da8718e7cb7cd7d7118a6adcba4cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b40bc279e75da8718e7cb7cd7d7118a6adcba4cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b40bc279e75da8718e7cb7cd7d7118a6adcba4cb"}], "stats": {"total": 310, "additions": 222, "deletions": 88}, "files": [{"sha": "654e6a37a869a8eae7235d6d27ee66edddd577f1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4546865e5b18963ce661d5053a6b4b7b15adfe7d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4546865e5b18963ce661d5053a6b4b7b15adfe7d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4546865e5b18963ce661d5053a6b4b7b15adfe7d", "patch": "@@ -1,3 +1,42 @@\n+2004-03-19  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* call.c (build_op_delete_call): Do not forget the placement\n+\targuments when iterating through mutiple delete operators.\n+\n+\t* cp-tree.h (svaed_scope): Remove last_parms.\n+\t(NEW_DELETE_OPNAME_P): New macro.\n+\t(last_function_parms): Remove.\n+\t(do_friend): Adjust prototype.\n+\t* decl.c (grokparms): Return the PARM_DECLs directly, rather than\n+\tusing last_function_parms.\n+\t(grokfndecl): Take the PARM_DECLs as an argument, rather than\n+\tusing last_function_parms.\n+\t(grokdeclarator): Adjust accordingly.  Do not form METHOD_TYPEs\n+\tfor class-specific operator new and operator delete.\n+\t(grok_op_properties): Do not look for allocation functions with\n+\tMETHOD_TYPEs.\n+\t(start_function): Use DECL_ARGUMENTS instead of\n+\tlast_function_parms.\n+\t* decl.h (last_function_parms): Do not declare.\n+\t* decl2.c (grokclassfn): Do not use last_function_parms.\n+\t* friend.c (do_friend): Remove parmdecls parameter.\n+\t* name-lookup.c (push_to_top_level): Do not save last_function_parms.\n+\t(pop_from_top_level): Do not restore it.\n+\t* pt.c (check_explicit_specialization): Do not adjust\n+\tlast_function_parms.\n+\n+\t* name-lookup.c (do_local_using_decl): Create a local binding for\n+\ttypes brought in via using declarations.\n+\n+\t* name-lookup.c (lookup_arg_dependent): Handle block-scope\n+\tfunction declarations correctly.\n+\n+\t* semantics.c (finish_id_expression): Correct handling of\n+\tconversion operators to dependent types.\n+\n+\t* typeck.c (lookup_destructor): Allow the use of destructors from\n+\tbase classes.\n+\t\n 2004-03-19  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* cxx-pretty-print.c (pp_cxx_unqualified_id): Use"}, {"sha": "06070fed130bca276f3cb9f66c4b58715c94f76b", "filename": "gcc/cp/call.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4546865e5b18963ce661d5053a6b4b7b15adfe7d/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4546865e5b18963ce661d5053a6b4b7b15adfe7d/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=4546865e5b18963ce661d5053a6b4b7b15adfe7d", "patch": "@@ -3979,15 +3979,15 @@ build_op_delete_call (enum tree_code code, tree addr, tree size,\n \t  /* On the first pass, check the rest of the arguments.  */\n \t  if (pass == 0)\n \t    {\n-\t      while (argtypes && t)\n+\t      tree a = argtypes;\n+\t      while (a && t)\n \t\t{\n-\t\t  if (!same_type_p (TREE_VALUE (argtypes),\n-\t\t\t\t    TREE_VALUE (t)))\n+\t\t  if (!same_type_p (TREE_VALUE (a), TREE_VALUE (t)))\n \t\t    break;\n-\t\t  argtypes = TREE_CHAIN (argtypes);\n+\t\t  a = TREE_CHAIN (a);\n \t\t  t = TREE_CHAIN (t);\n \t\t}\n-\t      if (!argtypes && !t)\n+\t      if (!a && !t)\n \t\tbreak;\n \t    }\n \t  /* On the second pass, the second argument must be"}, {"sha": "839445cd2b628466acc8405d61886e781643515a", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4546865e5b18963ce661d5053a6b4b7b15adfe7d/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4546865e5b18963ce661d5053a6b4b7b15adfe7d/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=4546865e5b18963ce661d5053a6b4b7b15adfe7d", "patch": "@@ -679,7 +679,6 @@ struct saved_scope GTY(())\n   tree x_previous_class_type;\n   tree x_previous_class_values;\n   tree x_saved_tree;\n-  tree last_parms;\n \n   HOST_WIDE_INT x_processing_template_decl;\n   int x_processing_specialization;\n@@ -837,6 +836,14 @@ struct language_function GTY(())\n #define current_function_return_value \\\n   (cp_function_chain->x_return_value)\n \n+/* True if NAME is the IDENTIFIER_NODE for an overloaded \"operator\n+   new\" or \"operator delete\".  */\n+#define NEW_DELETE_OPNAME_P(NAME)\t\t\\\n+  ((NAME) == ansi_opname (NEW_EXPR) \t\t\\\n+   || (NAME) == ansi_opname (VEC_NEW_EXPR) \t\\\n+   || (NAME) == ansi_opname (DELETE_EXPR) \t\\\n+   || (NAME) == ansi_opname (VEC_DELETE_EXPR))\n+\n #define ansi_opname(CODE) \\\n   (operator_name_info[(int) (CODE)].identifier)\n #define ansi_assopname(CODE) \\\n@@ -3693,7 +3700,6 @@ extern tree check_elaborated_type_specifier     (enum tag_types, tree, bool);\n extern void warn_extern_redeclared_static (tree, tree);\n \n extern bool have_extern_spec;\n-extern GTY(()) tree last_function_parms;\n \n /* in decl2.c */\n extern bool check_java_method (tree);\n@@ -3774,7 +3780,7 @@ extern tree cplus_expand_constant               (tree);\n extern int is_friend\t\t\t\t(tree, tree);\n extern void make_friend_class\t\t\t(tree, tree, bool);\n extern void add_friend                          (tree, tree, bool);\n-extern tree do_friend\t\t\t\t(tree, tree, tree, tree, tree, enum overload_flags, tree, int);\n+extern tree do_friend\t\t\t\t(tree, tree, tree, tree, enum overload_flags, tree, int);\n \n /* in init.c */\n extern tree expand_member_init\t\t\t(tree);"}, {"sha": "b8a578f9ee0fbb1745e884c52ef3a4d9c9df9044", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 31, "deletions": 46, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4546865e5b18963ce661d5053a6b4b7b15adfe7d/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4546865e5b18963ce661d5053a6b4b7b15adfe7d/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=4546865e5b18963ce661d5053a6b4b7b15adfe7d", "patch": "@@ -52,7 +52,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"debug.h\"\n #include \"timevar.h\"\n \n-static tree grokparms (tree);\n+static tree grokparms (tree, tree *);\n static const char *redeclaration_error_message (tree, tree);\n \n static int decl_jump_unsafe (tree);\n@@ -61,7 +61,7 @@ static int ambi_op_p (enum tree_code);\n static int unary_op_p (enum tree_code);\n static void push_local_name (tree);\n static tree grok_reference_init (tree, tree, tree, tree *);\n-static tree grokfndecl (tree, tree, tree, tree, int,\n+static tree grokfndecl (tree, tree, tree, tree, tree, int,\n \t\t\tenum overload_flags, tree,\n \t\t\ttree, int, int, int, int, int, int, tree);\n static tree grokvardecl (tree, tree, RID_BIT_TYPE *, int, int, tree);\n@@ -207,9 +207,6 @@ tree static_aggregates;\n \n tree integer_two_node, integer_three_node;\n \n-/* Similar, for last_function_parm_tags.  */\n-tree last_function_parms;\n-\n /* A list of all LABEL_DECLs in the function that have names.  Here so\n    we can clear out their names' definitions at the end of the\n    function, and so we can check the validity of jumps to these labels.  */\n@@ -5419,6 +5416,7 @@ bad_specifiers (tree object,\n    TYPE is type this FUNCTION_DECL should have, either FUNCTION_TYPE\n    or METHOD_TYPE.\n    DECLARATOR is the function's name.\n+   PARMS is a chain of PARM_DECLs for the function.\n    VIRTUALP is truthvalue of whether the function is virtual or not.\n    FLAGS are to be passed through to `grokclassfn'.\n    QUALS are qualifiers indicating whether the function is `const'\n@@ -5434,6 +5432,7 @@ static tree\n grokfndecl (tree ctype, \n             tree type,\n             tree declarator,\n+\t    tree parms,\n             tree orig_declarator,\n             int virtualp,\n             enum overload_flags flags,\n@@ -5456,6 +5455,7 @@ grokfndecl (tree ctype,\n     type = build_exception_variant (type, raises);\n \n   decl = build_lang_decl (FUNCTION_DECL, declarator, type);\n+  DECL_ARGUMENTS (decl) = parms;\n   /* Propagate volatile out from type to decl.  */\n   if (TYPE_VOLATILE (type))\n     TREE_THIS_VOLATILE (decl) = 1;\n@@ -5680,12 +5680,9 @@ grokfndecl (tree ctype,\n \n       if (old_decl && DECL_STATIC_FUNCTION_P (old_decl)\n \t  && TREE_CODE (TREE_TYPE (decl)) == METHOD_TYPE)\n-\t{\n-\t  /* Remove the `this' parm added by grokclassfn.\n-\t     XXX Isn't this done in start_function, too?  */\n-\t  revert_static_member_fn (decl);\n-\t  last_function_parms = TREE_CHAIN (last_function_parms);\n-\t}\n+\t/* Remove the `this' parm added by grokclassfn.\n+\t   XXX Isn't this done in start_function, too?  */\n+\trevert_static_member_fn (decl);\n       if (old_decl && DECL_ARTIFICIAL (old_decl))\n \terror (\"definition of implicitly-declared `%D'\", old_decl);\n \n@@ -6339,6 +6336,7 @@ grokdeclarator (tree declarator,\n   tree in_namespace = NULL_TREE;\n   tree returned_attrs = NULL_TREE;\n   tree scope = NULL_TREE;\n+  tree parms = NULL_TREE;\n \n   RIDBIT_RESET_ALL (specbits);\n   if (decl_context == FUNCDEF)\n@@ -7411,7 +7409,7 @@ grokdeclarator (tree declarator,\n \n \t    declarator = TREE_OPERAND (declarator, 0);\n \n-\t    arg_types = grokparms (inner_parms);\n+\t    arg_types = grokparms (inner_parms, &parms);\n \n \t    if (declarator && flags == DTOR_FLAG)\n \t      {\n@@ -7425,7 +7423,7 @@ grokdeclarator (tree declarator,\n \t\t  {\n \t\t    error (\"destructors may not have parameters\");\n \t\t    arg_types = void_list_node;\n-\t\t    last_function_parms = NULL_TREE;\n+\t\t    parms = NULL_TREE;\n \t\t  }\n \t      }\n \n@@ -7592,7 +7590,11 @@ grokdeclarator (tree declarator,\n \t\t  }\n \t\telse if (TREE_CODE (type) == FUNCTION_TYPE)\n \t\t  {\n-\t\t    if (current_class_type == NULL_TREE || friendp)\n+\t\t    if (NEW_DELETE_OPNAME_P (sname))\n+\t\t      /* Overloaded operator new and operator delete\n+\t\t\t are always static functions.  */\n+\t\t      ;\n+\t\t    else if (current_class_type == NULL_TREE || friendp)\n \t\t      type \n \t\t\t= build_method_type_directly (ctype, \n \t\t\t\t\t\t      TREE_TYPE (type),\n@@ -7851,8 +7853,7 @@ grokdeclarator (tree declarator,\n     type = build_cplus_array_type (TREE_TYPE (type), NULL_TREE);\n \n   /* Detect where we're using a typedef of function type to declare a\n-     function. last_function_parms will not be set, so we must create\n-     it now.  */\n+     function. PARMS will not be set, so we must create it now.  */\n   \n   if (type == typedef_type && TREE_CODE (type) == FUNCTION_TYPE)\n     {\n@@ -7867,7 +7868,7 @@ grokdeclarator (tree declarator,\n \t  decls = decl;\n \t}\n       \n-      last_function_parms = nreverse (decls);\n+      parms = nreverse (decls);\n     }\n \n   /* If this is a type name (such as, in a cast or sizeof),\n@@ -8061,10 +8062,7 @@ grokdeclarator (tree declarator,\n \t\t    return void_type_node;\n \t\t  }\n \n-\t\tif (declarator == ansi_opname (NEW_EXPR)\n-\t\t    || declarator == ansi_opname (VEC_NEW_EXPR)\n-\t\t    || declarator == ansi_opname (DELETE_EXPR)\n-\t\t    || declarator == ansi_opname (VEC_DELETE_EXPR))\n+\t\tif (NEW_DELETE_OPNAME_P (declarator))\n \t\t  {\n \t\t    if (virtualp)\n \t\t      {\n@@ -8087,6 +8085,7 @@ grokdeclarator (tree declarator,\n \t    decl = grokfndecl (ctype, type,\n \t\t\t       TREE_CODE (declarator) != TEMPLATE_ID_EXPR\n \t\t\t       ? declarator : dname,\n+\t\t\t       parms,\n \t\t\t       declarator,\n \t\t\t       virtualp, flags, quals, raises,\n \t\t\t       friendp ? -1 : 0, friendp, publicp, inlinep,\n@@ -8133,6 +8132,7 @@ grokdeclarator (tree declarator,\n \t    decl = grokfndecl (ctype, type,\n \t\t\t       TREE_CODE (declarator) != TEMPLATE_ID_EXPR\n \t\t\t       ? declarator : dname,\n+\t\t\t       parms,\n \t\t\t       declarator,\n \t\t\t       virtualp, flags, quals, raises,\n \t\t\t       friendp ? -1 : 0, friendp, 1, 0, funcdef_flag,\n@@ -8190,8 +8190,7 @@ grokdeclarator (tree declarator,\n \t\t  }\n \t\t\n \t\tdecl = do_friend (ctype, declarator, decl,\n-\t\t\t\t  last_function_parms, *attrlist,\n-\t\t\t\t  flags, quals, funcdef_flag);\n+\t\t\t\t  *attrlist, flags, quals, funcdef_flag);\n \t\treturn decl;\n \t      }\n \t    else\n@@ -8304,7 +8303,8 @@ grokdeclarator (tree declarator,\n \t\tvirtualp = 0;\n \t      }\n \t  }\n-\telse if (TREE_CODE (type) == FUNCTION_TYPE && staticp < 2)\n+\telse if (TREE_CODE (type) == FUNCTION_TYPE && staticp < 2\n+\t\t && !NEW_DELETE_OPNAME_P (original_name))\n \t  type = build_method_type_directly (ctype, \n \t\t\t\t\t     TREE_TYPE (type),\n \t\t\t\t\t     TYPE_ARG_TYPES (type));\n@@ -8314,7 +8314,7 @@ grokdeclarator (tree declarator,\n \t\t   || RIDBIT_SETP (RID_EXTERN, specbits)\n \t\t   || !RIDBIT_SETP (RID_STATIC, specbits));\n \n-\tdecl = grokfndecl (ctype, type, original_name, declarator,\n+\tdecl = grokfndecl (ctype, type, original_name, parms, declarator,\n \t\t\t   virtualp, flags, quals, raises,\n \t\t\t   1, friendp,\n \t\t\t   publicp, inlinep, funcdef_flag,\n@@ -8552,10 +8552,10 @@ check_default_argument (tree decl, tree arg)\n    flag. If unset, we append void_list_node. A parmlist declared\n    as `(void)' is accepted as the empty parmlist.\n \n-   Also set last_function_parms to the chain of PARM_DECLs.  */\n+   *PARMS is set to the chain of PARM_DECLs created.  */\n \n static tree\n-grokparms (tree first_parm)\n+grokparms (tree first_parm, tree *parms)\n {\n   tree result = NULL_TREE;\n   tree decls = NULL_TREE;\n@@ -8661,7 +8661,7 @@ grokparms (tree first_parm)\n   result = nreverse (result);\n   if (!ellipsis)\n     result = chainon (result, void_list_node);\n-  last_function_parms = decls;\n+  *parms = decls;\n \n   return result;\n }\n@@ -8914,21 +8914,9 @@ grok_op_properties (tree decl, int friendp, bool complain)\n     }\n \n   if (operator_code == NEW_EXPR || operator_code == VEC_NEW_EXPR)\n-    {\n-      /* When the compiler encounters the definition of A::operator new, it\n-\t doesn't look at the class declaration to find out if it's static.  */\n-      if (methodp)\n-\trevert_static_member_fn (decl);\n-\n-      TREE_TYPE (decl) = coerce_new_type (TREE_TYPE (decl));\n-    }\n+    TREE_TYPE (decl) = coerce_new_type (TREE_TYPE (decl));\n   else if (operator_code == DELETE_EXPR || operator_code == VEC_DELETE_EXPR)\n-    {\n-      if (methodp)\n-\trevert_static_member_fn (decl);\n-\n-      TREE_TYPE (decl) = coerce_delete_type (TREE_TYPE (decl));\n-    }\n+    TREE_TYPE (decl) = coerce_delete_type (TREE_TYPE (decl));\n   else\n     {\n       /* An operator function must either be a non-static member function\n@@ -10039,8 +10027,6 @@ start_function (tree declspecs, tree declarator, tree attrs, int flags)\n \t  else\n \t    doing_friend = 1;\n \t}\n-\n-      last_function_parms = DECL_ARGUMENTS (decl1);\n     }\n   else\n     {\n@@ -10091,7 +10077,6 @@ start_function (tree declspecs, tree declarator, tree attrs, int flags)\n       && TREE_CODE (TREE_TYPE (decl1)) == METHOD_TYPE)\n     {\n       revert_static_member_fn (decl1);\n-      last_function_parms = TREE_CHAIN (last_function_parms);\n       ctype = NULL_TREE;\n     }\n \n@@ -10138,7 +10123,7 @@ start_function (tree declspecs, tree declarator, tree attrs, int flags)\n \n   /* Save the parm names or decls from this function's declarator\n      where store_parm_decls will find them.  */\n-  current_function_parms = last_function_parms;\n+  current_function_parms = DECL_ARGUMENTS (decl1);\n \n   /* Make sure the parameter and return types are reasonable.  When\n      you declare a function, these types can be incomplete, but they"}, {"sha": "46a1ec806886b5d009e69e964d2c5fc3db776bb2", "filename": "gcc/cp/decl.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4546865e5b18963ce661d5053a6b4b7b15adfe7d/gcc%2Fcp%2Fdecl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4546865e5b18963ce661d5053a6b4b7b15adfe7d/gcc%2Fcp%2Fdecl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.h?ref=4546865e5b18963ce661d5053a6b4b7b15adfe7d", "patch": "@@ -33,10 +33,6 @@ enum decl_context\n /* We need this in here to get the decl_context definition.  */\n extern tree grokdeclarator (tree, tree, enum decl_context, int, tree*);\n \n-/* Parsing a function declarator leaves a list of parameter names\n-   or a chain or parameter decls here.  */\n-extern GTY(()) tree last_function_parms;\n-\n #ifdef DEBUG_CP_BINDING_LEVELS\n /* Purely for debugging purposes.  */\n extern int debug_bindings_indentation;"}, {"sha": "0a4e8e9d0d270297ddb487a6257705421dd1b05c", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4546865e5b18963ce661d5053a6b4b7b15adfe7d/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4546865e5b18963ce661d5053a6b4b7b15adfe7d/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=4546865e5b18963ce661d5053a6b4b7b15adfe7d", "patch": "@@ -336,11 +336,10 @@ grokclassfn (tree ctype, tree function, enum overload_flags flags, tree quals)\n       qual_type = cp_build_qualified_type (type, this_quals);\n       parm = build_artificial_parm (this_identifier, qual_type);\n       c_apply_type_quals_to_decl (this_quals, parm);\n-      TREE_CHAIN (parm) = last_function_parms;\n-      last_function_parms = parm;\n+      TREE_CHAIN (parm) = DECL_ARGUMENTS (function);\n+      DECL_ARGUMENTS (function) = parm;\n     }\n \n-  DECL_ARGUMENTS (function) = last_function_parms;\n   DECL_CONTEXT (function) = ctype;\n \n   if (flags == DTOR_FLAG)"}, {"sha": "297614c838148e551b1186d2dc719465c205a6aa", "filename": "gcc/cp/friend.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4546865e5b18963ce661d5053a6b4b7b15adfe7d/gcc%2Fcp%2Ffriend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4546865e5b18963ce661d5053a6b4b7b15adfe7d/gcc%2Fcp%2Ffriend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ffriend.c?ref=4546865e5b18963ce661d5053a6b4b7b15adfe7d", "patch": "@@ -314,17 +314,13 @@ make_friend_class (tree type, tree friend_type, bool complain)\n \n    DECL is the FUNCTION_DECL that the friend is.\n \n-   In case we are parsing a friend which is part of an inline\n-   definition, we will need to store PARM_DECL chain that comes\n-   with it into the DECL_ARGUMENTS slot of the FUNCTION_DECL.\n-\n    FLAGS is just used for `grokclassfn'.\n \n    QUALS say what special qualifies should apply to the object\n    pointed to by `this'.  */\n \n tree\n-do_friend (tree ctype, tree declarator, tree decl, tree parmdecls,\n+do_friend (tree ctype, tree declarator, tree decl,\n \t   tree attrlist, enum overload_flags flags, tree quals,\n \t   int funcdef_flag)\n {\n@@ -424,7 +420,6 @@ do_friend (tree ctype, tree declarator, tree decl, tree parmdecls,\n \n \t Note that because classes all wind up being top-level\n \t in their scope, their friend wind up in top-level scope as well.  */\n-      DECL_ARGUMENTS (decl) = parmdecls;\n       if (funcdef_flag)\n \tSET_DECL_FRIEND_CONTEXT (decl, current_class_type);\n "}, {"sha": "a23574248f7dabb913157f75ab24dc453f018a4f", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4546865e5b18963ce661d5053a6b4b7b15adfe7d/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4546865e5b18963ce661d5053a6b4b7b15adfe7d/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=4546865e5b18963ce661d5053a6b4b7b15adfe7d", "patch": "@@ -2272,7 +2272,10 @@ do_local_using_decl (tree decl, tree scope, tree name)\n \tpush_local_binding (name, newval, PUSH_USING);\n     }\n   if (newtype)\n-    set_identifier_type_value (name, newtype);\n+    {\n+      push_local_binding (name, newtype, PUSH_USING);\n+      set_identifier_type_value (name, newtype);\n+    }\n \n   /* Emit debug info.  */\n   if (!processing_template_decl)\n@@ -4474,11 +4477,15 @@ lookup_arg_dependent (tree name, tree fns, tree args)\n      we found were brought into the current namespace via a using\n      declaration, we have not really checked the namespace from which\n      they came.  Therefore, we check all namespaces here -- unless the\n-     function we have is from the current namespace.  */\n+     function we have is from the current namespace.  Even then, we\n+     must check all namespaces if the function is a local\n+     declaration; any other declarations present at namespace scope\n+     should be visible during argument-dependent lookup.  */\n   if (fns)\n     fn = OVL_CURRENT (fns);\n   if (fn && TREE_CODE (fn) == FUNCTION_DECL \n-      && CP_DECL_CONTEXT (fn) != current_decl_namespace ())\n+      && (CP_DECL_CONTEXT (fn) != current_decl_namespace ()\n+\t  || DECL_LOCAL_FUNCTION_P (fn)))\n     k.namespaces = NULL_TREE;\n   else\n     /* Setting NAMESPACES is purely an optimization; it prevents\n@@ -4835,7 +4842,6 @@ push_to_top_level (void)\n   s->bindings = b;\n   s->need_pop_function_context = need_pop;\n   s->function_decl = current_function_decl;\n-  s->last_parms = last_function_parms;\n \n   scope_chain = s;\n   current_function_decl = NULL_TREE;\n@@ -4873,7 +4879,6 @@ pop_from_top_level (void)\n   if (s->need_pop_function_context)\n     pop_function_context_from (NULL_TREE);\n   current_function_decl = s->function_decl;\n-  last_function_parms = s->last_parms;\n   timevar_pop (TV_NAME_LOOKUP);\n }\n "}, {"sha": "be2f2c7c405c99ef44d3bf0a75e6b6b21a64528f", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4546865e5b18963ce661d5053a6b4b7b15adfe7d/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4546865e5b18963ce661d5053a6b4b7b15adfe7d/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=4546865e5b18963ce661d5053a6b4b7b15adfe7d", "patch": "@@ -1910,15 +1910,10 @@ check_explicit_specialization (tree declarator,\n \n \t  /* If we thought that the DECL was a member function, but it\n \t     turns out to be specializing a static member function,\n-\t     make DECL a static member function as well.  We also have\n-\t     to adjust last_function_parms to avoid confusing\n-\t     start_function later.  */\n+\t     make DECL a static member function as well.  */\n \t  if (DECL_STATIC_FUNCTION_P (tmpl)\n \t      && DECL_NONSTATIC_MEMBER_FUNCTION_P (decl))\n-\t    {\n-\t      revert_static_member_fn (decl);\n-\t      last_function_parms = TREE_CHAIN (last_function_parms);\n-\t    }\n+\t    revert_static_member_fn (decl);\n \n \t  /* If this is a specialization of a member template of a\n \t     template class.  In we want to return the TEMPLATE_DECL,"}, {"sha": "78896cce386de55824166e9aefbdb072e9cc550a", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4546865e5b18963ce661d5053a6b4b7b15adfe7d/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4546865e5b18963ce661d5053a6b4b7b15adfe7d/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=4546865e5b18963ce661d5053a6b4b7b15adfe7d", "patch": "@@ -2364,11 +2364,16 @@ finish_id_expression (tree id_expression,\n       if (decl == error_mark_node)\n \t{\n \t  /* Name lookup failed.  */\n-\t  if (scope && (!TYPE_P (scope) || !dependent_type_p (scope)))\n+\t  if (scope \n+\t      && (!TYPE_P (scope) \n+\t\t  || (!dependent_type_p (scope)\n+\t\t      && !(TREE_CODE (id_expression) == IDENTIFIER_NODE\n+\t\t\t   && IDENTIFIER_TYPENAME_P (id_expression)\n+\t\t\t   && dependent_type_p (TREE_TYPE (id_expression))))))\n \t    {\n-\t      /* Qualified name lookup failed, and the qualifying name\n-      \t\t was not a dependent type.  That is always an\n-      \t\t error.  */\n+\t      /* If the qualifying type is non-dependent (and the name\n+\t\t does not name a conversion operator to a dependent\n+\t\t type), issue an error.  */\n \t      qualified_name_lookup_error (scope, id_expression);\n \t      return error_mark_node;\n \t    }\n@@ -2378,6 +2383,8 @@ finish_id_expression (tree id_expression,\n \t      *idk = CP_ID_KIND_UNQUALIFIED;\n \t      return id_expression;\n \t    }\n+\t  else\n+\t    decl = id_expression;\n \t}\n       /* If DECL is a variable that would be out of scope under\n \t ANSI/ISO rules, but in scope in the ARM, name lookup"}, {"sha": "350a1d887190810817a510925422c7e7b29b2940", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4546865e5b18963ce661d5053a6b4b7b15adfe7d/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4546865e5b18963ce661d5053a6b4b7b15adfe7d/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=4546865e5b18963ce661d5053a6b4b7b15adfe7d", "patch": "@@ -1788,24 +1788,28 @@ lookup_destructor (tree object, tree scope, tree dtor_name)\n {\n   tree object_type = TREE_TYPE (object);\n   tree dtor_type = TREE_OPERAND (dtor_name, 0);\n+  tree expr;\n \n   if (scope && !check_dtor_name (scope, dtor_name))\n     {\n       error (\"qualified type `%T' does not match destructor name `~%T'\",\n \t     scope, dtor_type);\n       return error_mark_node;\n     }\n-  if (!same_type_p (dtor_type, TYPE_MAIN_VARIANT (object_type)))\n+  if (!DERIVED_FROM_P (dtor_type, TYPE_MAIN_VARIANT (object_type)))\n     {\n       error (\"the type being destroyed is `%T', but the destructor refers to `%T'\",\n \t     TYPE_MAIN_VARIANT (object_type), dtor_type);\n       return error_mark_node;\n     }\n-  if (!TYPE_HAS_DESTRUCTOR (object_type))\n+  if (!TYPE_HAS_DESTRUCTOR (dtor_type))\n     return build (PSEUDO_DTOR_EXPR, void_type_node, object, scope,\n \t\t  dtor_type);\n-  return lookup_member (object_type, complete_dtor_identifier,\n+  expr = lookup_member (dtor_type, complete_dtor_identifier,\n \t\t\t/*protect=*/1, /*want_type=*/false);\n+  expr = (adjust_result_of_qualified_name_lookup\n+\t  (expr, dtor_type, object_type));\n+  return expr;\n }\n \n /* This function is called by the parser to process a class member"}, {"sha": "213613e51f0070f173220843f73a728262b926ff", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4546865e5b18963ce661d5053a6b4b7b15adfe7d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4546865e5b18963ce661d5053a6b4b7b15adfe7d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4546865e5b18963ce661d5053a6b4b7b15adfe7d", "patch": "@@ -1,3 +1,20 @@\n+2004-03-19  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* g++.dg/init/placement3.C: New test.\n+\n+\t* g++.dg/template/spec13.C: New test.\n+\n+\t* g++.dg/lookup/using11.C: New test.\n+\t\n+\t* g++.dg/lookup/koenig3.C: New test.\n+\n+\t* g++.dg/template/operator2.C: New test.\n+\t\n+\t* g++.dg/expr/dtor3.C: New test.\n+\t* g++.old-deja/g++.brendan/crash15.C: Remove incorrect dg-error\n+\tmarker.\n+\t* g++.old-deja/g++.law/visibility28.C: Likewise.\n+\n 2004-03-19  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* gcc.dg/altivec-6.c: Use vector_size attribute, not mode."}, {"sha": "036e9f2a0108d0842c1df5ca2322b8b2c69e3891", "filename": "gcc/testsuite/g++.dg/expr/dtor3.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4546865e5b18963ce661d5053a6b4b7b15adfe7d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fdtor3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4546865e5b18963ce661d5053a6b4b7b15adfe7d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fdtor3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fdtor3.C?ref=4546865e5b18963ce661d5053a6b4b7b15adfe7d", "patch": "@@ -0,0 +1,10 @@\n+struct B {\n+  ~B();\n+};\n+struct D : public B {\n+  ~D();\n+};\n+\n+void f(D d) {\n+  d.B::~B();\n+}"}, {"sha": "919e2a81617cbc20719828bc8c70be5326c43d91", "filename": "gcc/testsuite/g++.dg/init/placement3.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4546865e5b18963ce661d5053a6b4b7b15adfe7d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fplacement3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4546865e5b18963ce661d5053a6b4b7b15adfe7d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fplacement3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fplacement3.C?ref=4546865e5b18963ce661d5053a6b4b7b15adfe7d", "patch": "@@ -0,0 +1,30 @@\n+typedef __SIZE_TYPE__ size_t;\n+extern \"C\" void *malloc (size_t);\n+\n+int i;\n+\n+struct S {\n+  S(int) { \n+    throw 3; \n+  }\n+\n+  void *operator new(size_t s, int)  {\n+    ++i;\n+    return malloc (s);\n+  }\n+\n+  void operator delete(void *, int)  {\n+    --i;\n+  }\n+\n+  void operator delete(void *, int, int) ;\n+};\n+\n+int main () {\n+  try {\n+    new (7) S (12);\n+  } catch (int) {\n+    if (i)\n+      return 1;\n+  }\n+}"}, {"sha": "c5dedbe708e0ef77e7f19372fe0453a961dbd5c2", "filename": "gcc/testsuite/g++.dg/lookup/koenig3.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4546865e5b18963ce661d5053a6b4b7b15adfe7d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fkoenig3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4546865e5b18963ce661d5053a6b4b7b15adfe7d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fkoenig3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fkoenig3.C?ref=4546865e5b18963ce661d5053a6b4b7b15adfe7d", "patch": "@@ -0,0 +1,13 @@\n+extern \"C\" void abort ();\n+\n+struct S {\n+};\n+void f(S, int) { abort(); }\n+void f(S, double) {}\n+\n+S s;\n+\n+int main() {\n+  extern void f(S, int);\n+  f(s, 3.0);\n+}"}, {"sha": "9eb7e9fe7a1f168553e87c26ec9678eb426430db", "filename": "gcc/testsuite/g++.dg/lookup/using11.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4546865e5b18963ce661d5053a6b4b7b15adfe7d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4546865e5b18963ce661d5053a6b4b7b15adfe7d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing11.C?ref=4546865e5b18963ce661d5053a6b4b7b15adfe7d", "patch": "@@ -0,0 +1,9 @@\n+namespace N1 {\n+  enum e { a };\n+  void e(char);\n+}\n+\n+void f() {\n+  using N1::e;\n+  enum e x;\n+}"}, {"sha": "89f428d5fc50d2c0a45a5417c2e9b8c17a26983d", "filename": "gcc/testsuite/g++.dg/template/operator2.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4546865e5b18963ce661d5053a6b4b7b15adfe7d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Foperator2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4546865e5b18963ce661d5053a6b4b7b15adfe7d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Foperator2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Foperator2.C?ref=4546865e5b18963ce661d5053a6b4b7b15adfe7d", "patch": "@@ -0,0 +1,8 @@\n+template <typename T> struct A {};\n+\n+struct B {\n+  operator A<B>();\n+};\n+\n+template <typename T>\n+void f() { B::operator A<T>; }"}, {"sha": "f2a3a373ed76c57e7525c786057052c606cabb7b", "filename": "gcc/testsuite/g++.dg/template/spec13.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4546865e5b18963ce661d5053a6b4b7b15adfe7d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fspec13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4546865e5b18963ce661d5053a6b4b7b15adfe7d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fspec13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fspec13.C?ref=4546865e5b18963ce661d5053a6b4b7b15adfe7d", "patch": "@@ -0,0 +1,16 @@\n+// { dg-options \"-w\" }\n+\n+template <typename T>\n+struct S {\n+  int i;\n+  template <typename U> void f(U) {}\n+};\n+\n+template<> \n+template <typename U>\n+void S<int>::f(U) { i; }\n+\n+void f() {\n+  S<int> s;\n+  s.f<int>(3);\n+}"}, {"sha": "3c59fa64b43a7c718121152b3facdbe4f4fa8c16", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash15.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4546865e5b18963ce661d5053a6b4b7b15adfe7d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4546865e5b18963ce661d5053a6b4b7b15adfe7d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash15.C?ref=4546865e5b18963ce661d5053a6b4b7b15adfe7d", "patch": "@@ -16,7 +16,7 @@ int\n main() {\n   std::cout << \"starting\\n\";\n   B b;\n-  b.~A();// { dg-error \"\" }  destructor\n+  b.~A();\n   std::cout << \"done\\n\";\n }\n "}, {"sha": "a7141ae5ea710ac502eb25bacfe71efb921a8ad3", "filename": "gcc/testsuite/g++.old-deja/g++.law/visibility28.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4546865e5b18963ce661d5053a6b4b7b15adfe7d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fvisibility28.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4546865e5b18963ce661d5053a6b4b7b15adfe7d/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fvisibility28.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fvisibility28.C?ref=4546865e5b18963ce661d5053a6b4b7b15adfe7d", "patch": "@@ -11,7 +11,7 @@ public:\n class D : public B {\n public:\n         virtual ~D() { printf( \"D::~D\\n\"); }\n-  void operator = ( int i) { this->~B(); }// { dg-error \"\" } D has no ~B part to it\n+  void operator = ( int i) { this->~B(); }\n };\n \n int"}]}