{"sha": "ad5b68e0afd71857e219161266f5a7001bfcbd24", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQ1YjY4ZTBhZmQ3MTg1N2UyMTkxNjEyNjZmNWE3MDAxYmZjYmQyNA==", "commit": {"author": {"name": "Chris Manghane", "email": "cmang@google.com", "date": "2014-04-30T17:55:59Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-04-30T17:55:59Z"}, "message": "compiler: Remove GCC langhooks from frontend proper.\n\n\t* go-lang.c (go_langhook_type_for_size): Do it here, rather than\n\tcalling into Go frontend.\n\t(go_langhook_type_for_mode): Likewise.\n\t* go-c.h (go_type_for_size, go_type_for_mode): Don't declare.\n\nFrom-SVN: r209945", "tree": {"sha": "f519620c84074a2493b0229fc910b3fef8d2e5ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f519620c84074a2493b0229fc910b3fef8d2e5ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad5b68e0afd71857e219161266f5a7001bfcbd24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad5b68e0afd71857e219161266f5a7001bfcbd24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad5b68e0afd71857e219161266f5a7001bfcbd24", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad5b68e0afd71857e219161266f5a7001bfcbd24/comments", "author": null, "committer": null, "parents": [{"sha": "7211512a5f817ad08e333774bd186c0c5ff48533", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7211512a5f817ad08e333774bd186c0c5ff48533", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7211512a5f817ad08e333774bd186c0c5ff48533"}], "stats": {"total": 165, "additions": 73, "deletions": 92}, "files": [{"sha": "2bb10ed9b1c19ed6ccd2462c12108146b8621b15", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad5b68e0afd71857e219161266f5a7001bfcbd24/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad5b68e0afd71857e219161266f5a7001bfcbd24/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=ad5b68e0afd71857e219161266f5a7001bfcbd24", "patch": "@@ -1,3 +1,10 @@\n+2014-04-30  Chris Manghane  <cmang@google.com>\n+\n+\t* go-lang.c (go_langhook_type_for_size): Do it here, rather than\n+\tcalling into Go frontend.\n+\t(go_langhook_type_for_mode): Likewise.\n+\t* go-c.h (go_type_for_size, go_type_for_mode): Don't declare.\n+\n 2014-04-30  Chris Manghane  <cmang@google.com>\n \n \t* go-gcc.cc: #include \"langhooks.h\"."}, {"sha": "d5cf48f04e66ccba1eb49cf038ca4d2d0dcd0584", "filename": "gcc/go/go-c.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad5b68e0afd71857e219161266f5a7001bfcbd24/gcc%2Fgo%2Fgo-c.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad5b68e0afd71857e219161266f5a7001bfcbd24/gcc%2Fgo%2Fgo-c.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-c.h?ref=ad5b68e0afd71857e219161266f5a7001bfcbd24", "patch": "@@ -41,9 +41,6 @@ extern void go_parse_input_files (const char**, unsigned int,\n \t\t\t\t  bool require_return_statement);\n extern void go_write_globals (void);\n \n-extern tree go_type_for_size (unsigned int bits, int unsignedp);\n-extern tree go_type_for_mode (enum machine_mode, int unsignedp);\n-\n /* Functions defined in the GCC interface called by the Go frontend\n    proper.  */\n "}, {"sha": "3599aa85e54588a33888d69b6dc6efd89cd6dcee", "filename": "gcc/go/go-lang.c", "status": "modified", "additions": 66, "deletions": 4, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad5b68e0afd71857e219161266f5a7001bfcbd24/gcc%2Fgo%2Fgo-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad5b68e0afd71857e219161266f5a7001bfcbd24/gcc%2Fgo%2Fgo-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-lang.c?ref=ad5b68e0afd71857e219161266f5a7001bfcbd24", "patch": "@@ -288,7 +288,38 @@ go_langhook_parse_file (void)\n static tree\n go_langhook_type_for_size (unsigned int bits, int unsignedp)\n {\n-  return go_type_for_size (bits, unsignedp);\n+  tree type;\n+  if (unsignedp)\n+    {\n+      if (bits == INT_TYPE_SIZE)\n+        type = unsigned_type_node;\n+      else if (bits == CHAR_TYPE_SIZE)\n+        type = unsigned_char_type_node;\n+      else if (bits == SHORT_TYPE_SIZE)\n+        type = short_unsigned_type_node;\n+      else if (bits == LONG_TYPE_SIZE)\n+        type = long_unsigned_type_node;\n+      else if (bits == LONG_LONG_TYPE_SIZE)\n+        type = long_long_unsigned_type_node;\n+      else\n+        type = make_unsigned_type(bits);\n+    }\n+  else\n+    {\n+      if (bits == INT_TYPE_SIZE)\n+        type = integer_type_node;\n+      else if (bits == CHAR_TYPE_SIZE)\n+        type = signed_char_type_node;\n+      else if (bits == SHORT_TYPE_SIZE)\n+        type = short_integer_type_node;\n+      else if (bits == LONG_TYPE_SIZE)\n+        type = long_integer_type_node;\n+      else if (bits == LONG_LONG_TYPE_SIZE)\n+        type = long_long_integer_type_node;\n+      else\n+        type = make_signed_type(bits);\n+    }\n+  return type;\n }\n \n static tree\n@@ -309,9 +340,40 @@ go_langhook_type_for_mode (enum machine_mode mode, int unsignedp)\n       return NULL_TREE;\n     }\n \n-  type = go_type_for_mode (mode, unsignedp);\n-  if (type)\n-    return type;\n+  // FIXME: This static_cast should be in machmode.h.\n+  enum mode_class mc = static_cast<enum mode_class>(GET_MODE_CLASS(mode));\n+  if (mc == MODE_INT)\n+    return go_langhook_type_for_size(GET_MODE_BITSIZE(mode), unsignedp);\n+  else if (mc == MODE_FLOAT)\n+    {\n+      switch (GET_MODE_BITSIZE (mode))\n+\t{\n+\tcase 32:\n+\t  return float_type_node;\n+\tcase 64:\n+\t  return double_type_node;\n+\tdefault:\n+\t  // We have to check for long double in order to support\n+\t  // i386 excess precision.\n+\t  if (mode == TYPE_MODE(long_double_type_node))\n+\t    return long_double_type_node;\n+\t}\n+    }\n+  else if (mc == MODE_COMPLEX_FLOAT)\n+    {\n+      switch (GET_MODE_BITSIZE (mode))\n+\t{\n+\tcase 64:\n+\t  return complex_float_type_node;\n+\tcase 128:\n+\t  return complex_double_type_node;\n+\tdefault:\n+\t  // We have to check for long double in order to support\n+\t  // i386 excess precision.\n+\t  if (mode == TYPE_MODE(complex_long_double_type_node))\n+\t    return complex_long_double_type_node;\n+\t}\n+    }\n \n #if HOST_BITS_PER_WIDE_INT >= 64\n   /* The middle-end and some backends rely on TImode being supported"}, {"sha": "9a6ffa6a0406d7a273ed24d7ba6082910317eb1d", "filename": "gcc/go/gofrontend/gogo-tree.cc", "status": "modified", "additions": 0, "deletions": 85, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad5b68e0afd71857e219161266f5a7001bfcbd24/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad5b68e0afd71857e219161266f5a7001bfcbd24/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc?ref=ad5b68e0afd71857e219161266f5a7001bfcbd24", "patch": "@@ -35,88 +35,3 @@ saw_errors()\n {\n   return errorcount != 0 || sorrycount != 0;\n }\n-\n-// Return the integer type to use for a size.\n-\n-GO_EXTERN_C\n-tree\n-go_type_for_size(unsigned int bits, int unsignedp)\n-{\n-  const char* name;\n-  switch (bits)\n-    {\n-    case 8:\n-      name = unsignedp ? \"uint8\" : \"int8\";\n-      break;\n-    case 16:\n-      name = unsignedp ? \"uint16\" : \"int16\";\n-      break;\n-    case 32:\n-      name = unsignedp ? \"uint32\" : \"int32\";\n-      break;\n-    case 64:\n-      name = unsignedp ? \"uint64\" : \"int64\";\n-      break;\n-    default:\n-      if (bits == POINTER_SIZE && unsignedp)\n-\tname = \"uintptr\";\n-      else\n-\treturn NULL_TREE;\n-    }\n-  Type* type = Type::lookup_integer_type(name);\n-  return type_to_tree(type->get_backend(go_get_gogo()));\n-}\n-\n-// Return the type to use for a mode.\n-\n-GO_EXTERN_C\n-tree\n-go_type_for_mode(enum machine_mode mode, int unsignedp)\n-{\n-  // FIXME: This static_cast should be in machmode.h.\n-  enum mode_class mc = static_cast<enum mode_class>(GET_MODE_CLASS(mode));\n-  if (mc == MODE_INT)\n-    return go_type_for_size(GET_MODE_BITSIZE(mode), unsignedp);\n-  else if (mc == MODE_FLOAT)\n-    {\n-      Type* type;\n-      switch (GET_MODE_BITSIZE (mode))\n-\t{\n-\tcase 32:\n-\t  type = Type::lookup_float_type(\"float32\");\n-\t  break;\n-\tcase 64:\n-\t  type = Type::lookup_float_type(\"float64\");\n-\t  break;\n-\tdefault:\n-\t  // We have to check for long double in order to support\n-\t  // i386 excess precision.\n-\t  if (mode == TYPE_MODE(long_double_type_node))\n-\t    return long_double_type_node;\n-\t  return NULL_TREE;\n-\t}\n-      return type_to_tree(type->get_backend(go_get_gogo()));\n-    }\n-  else if (mc == MODE_COMPLEX_FLOAT)\n-    {\n-      Type *type;\n-      switch (GET_MODE_BITSIZE (mode))\n-\t{\n-\tcase 64:\n-\t  type = Type::lookup_complex_type(\"complex64\");\n-\t  break;\n-\tcase 128:\n-\t  type = Type::lookup_complex_type(\"complex128\");\n-\t  break;\n-\tdefault:\n-\t  // We have to check for long double in order to support\n-\t  // i386 excess precision.\n-\t  if (mode == TYPE_MODE(complex_long_double_type_node))\n-\t    return complex_long_double_type_node;\n-\t  return NULL_TREE;\n-\t}\n-      return type_to_tree(type->get_backend(go_get_gogo()));\n-    }\n-  else\n-    return NULL_TREE;\n-}"}]}