{"sha": "bd95368b59b752fab5d2a192f3506eeff6697bd7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQ5NTM2OGI1OWI3NTJmYWI1ZDJhMTkyZjM1MDZlZWZmNjY5N2JkNw==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2013-01-06T12:28:58Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2013-01-06T12:28:58Z"}, "message": "decl.c (gnat_to_gnu_field): Emit a specialized diagnostic for component size mismatch wrt volatile requirements.\n\n\t* gcc-interface/decl.c (gnat_to_gnu_field): Emit a specialized\n\tdiagnostic for component size mismatch wrt volatile requirements.\n\tAdd a gcc_unreachable() at the end of the checks for size.  Split\n\tthe check on volatile for positions into one check on atomic and\n\ta subsequent one on volatile.\n\nFrom-SVN: r194946", "tree": {"sha": "2d64b18f1ebad87954e69ec71a06bef9b16fe446", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d64b18f1ebad87954e69ec71a06bef9b16fe446"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd95368b59b752fab5d2a192f3506eeff6697bd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd95368b59b752fab5d2a192f3506eeff6697bd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd95368b59b752fab5d2a192f3506eeff6697bd7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd95368b59b752fab5d2a192f3506eeff6697bd7/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a43abae8d3f70c6bb13382a4d3793e0073842674", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a43abae8d3f70c6bb13382a4d3793e0073842674", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a43abae8d3f70c6bb13382a4d3793e0073842674"}], "stats": {"total": 123, "additions": 118, "deletions": 5}, "files": [{"sha": "a0d011b19147d496a09b42e74017995a5ca5ab75", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd95368b59b752fab5d2a192f3506eeff6697bd7/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd95368b59b752fab5d2a192f3506eeff6697bd7/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=bd95368b59b752fab5d2a192f3506eeff6697bd7", "patch": "@@ -1,3 +1,11 @@\n+2013-01-06  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_field): Emit a specialized\n+\tdiagnostic for component size mismatch wrt volatile requirements.\n+\tAdd a gcc_unreachable() at the end of the checks for size.  Split\n+\tthe check on volatile for positions into one check on atomic and\n+\ta subsequent one on volatile.\n+\n 2013-01-06  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (elaborate_entity) <E_Record_Type>: Delete."}, {"sha": "3284f84db6f4b60dec8f34e7f83bfd6d5588555e", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd95368b59b752fab5d2a192f3506eeff6697bd7/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd95368b59b752fab5d2a192f3506eeff6697bd7/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=bd95368b59b752fab5d2a192f3506eeff6697bd7", "patch": "@@ -6489,10 +6489,11 @@ gnat_to_gnu_field (Entity_Id gnat_field, tree gnu_record_type, int packed,\n \t}\n \n       /* If this field needs strict alignment, check that the record is\n-\t sufficiently aligned and that position and size are consistent\n-\t with the alignment.  But don't do it if we are just annotating\n-\t types and the field's type is tagged, since tagged types aren't\n-\t fully laid out in this mode.  */\n+\t sufficiently aligned and that position and size are consistent with\n+\t the alignment.  But don't do it if we are just annotating types and\n+\t the field's type is tagged, since tagged types aren't fully laid out\n+\t in this mode.  Also, note that atomic implies volatile so the inner\n+\t test sequences ordering is significant here.  */\n       if (needs_strict_alignment\n \t  && !(type_annotate_only && Is_Tagged_Type (gnat_field_type)))\n \t{\n@@ -6508,6 +6509,12 @@ gnat_to_gnu_field (Entity_Id gnat_field, tree gnu_record_type, int packed,\n \t\t   Last_Bit (Component_Clause (gnat_field)), gnat_field,\n \t\t   TYPE_SIZE (gnu_field_type));\n \n+\t      else if (is_volatile)\n+\t\tpost_error_ne_tree\n+\t\t  (\"volatile field& must be natural size of type{ (^)}\",\n+\t\t   Last_Bit (Component_Clause (gnat_field)), gnat_field,\n+\t\t   TYPE_SIZE (gnu_field_type));\n+\n \t      else if (Is_Aliased (gnat_field))\n \t\tpost_error_ne_tree\n \t\t  (\"size of aliased field& must be ^ bits\",\n@@ -6520,14 +6527,23 @@ gnat_to_gnu_field (Entity_Id gnat_field, tree gnu_record_type, int packed,\n \t\t   Last_Bit (Component_Clause (gnat_field)), gnat_field,\n \t\t   TYPE_SIZE (gnu_field_type));\n \n+              else\n+\t\tgcc_unreachable ();\n+\n \t      gnu_size = NULL_TREE;\n \t    }\n \n \t  if (!integer_zerop (size_binop\n \t\t\t      (TRUNC_MOD_EXPR, gnu_pos,\n \t\t\t       bitsize_int (TYPE_ALIGN (gnu_field_type)))))\n \t    {\n-\t      if (is_volatile)\n+\t      if (Is_Atomic (gnat_field) || Is_Atomic (gnat_field_type))\n+\t\tpost_error_ne_num\n+\t\t  (\"position of atomic field& must be multiple of ^ bits\",\n+\t\t   First_Bit (Component_Clause (gnat_field)), gnat_field,\n+\t\t   TYPE_ALIGN (gnu_field_type));\n+\n+              else if (is_volatile)\n \t\tpost_error_ne_num\n \t\t  (\"position of volatile field& must be multiple of ^ bits\",\n \t\t   First_Bit (Component_Clause (gnat_field)), gnat_field,"}, {"sha": "42cb2965f0457d4b7aea851a6d519fd8609d2e85", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd95368b59b752fab5d2a192f3506eeff6697bd7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd95368b59b752fab5d2a192f3506eeff6697bd7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bd95368b59b752fab5d2a192f3506eeff6697bd7", "patch": "@@ -1,3 +1,7 @@\n+2013-01-06  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* gnat.dg/specs/clause_on_volatile.ads: New test.\n+\n 2013-01-06  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/alignment10.adb: New test."}, {"sha": "4a046c15cbaf0355eb22bba8f772fe96a5a127c7", "filename": "gcc/testsuite/gnat.dg/specs/clause_on_volatile.ads", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd95368b59b752fab5d2a192f3506eeff6697bd7/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fclause_on_volatile.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd95368b59b752fab5d2a192f3506eeff6697bd7/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fclause_on_volatile.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fclause_on_volatile.ads?ref=bd95368b59b752fab5d2a192f3506eeff6697bd7", "patch": "@@ -0,0 +1,85 @@\n+-- { dg-do compile }\n+\n+package Clause_On_Volatile is\n+\n+  type U8 is mod 2 ** 8;\n+\n+  type Word is record\n+     A, B : U8;\n+  end record;\n+  For Word'Alignment use 4;\n+\n+  type Vword is new Word;\n+  For Vword'Alignment use 4;\n+  pragma Volatile (Vword);\n+\n+  type Aword is new Word;\n+  For Aword'Alignment use 4;\n+  pragma Atomic (Aword);\n+\n+  type R1 is record\n+     W : Word;\n+  end record;\n+  for R1 use record\n+     W at 0 range 0 .. 15; -- OK, packing regular\n+  end record;\n+\n+  type A1 is record\n+     AW : Aword;\n+  end record;\n+  For A1'Alignment use 4;\n+  for A1 use record\n+     AW at 0 range 0 .. 15; -- { dg-error \"must be natural size\" }\n+  end record;\n+\n+  type A2 is record\n+     B : U8;\n+     AW : Aword;\n+  end record;\n+  For A2'Alignment use 4;\n+  for A2 use record\n+     B at 0 range 0 .. 7;\n+     AW at 1 range 0 .. 31; -- { dg-error \"must be multiple\" }\n+  end record;\n+\n+  type A3 is record\n+     B : U8;\n+     AW : Aword;\n+  end record;\n+  For A3'Alignment use 4;\n+  for A3 use record\n+     B at 0 range 0 .. 7;\n+     AW at 1 range 0 .. 15; -- { dg-error \"must be (multiple|natural size)\" }\n+  end record;\n+\n+  --\n+\n+  type V1 is record\n+     VW : Vword;\n+  end record;\n+  For V1'Alignment use 4;\n+  for V1 use record\n+     VW at 0 range 0 .. 15; -- { dg-error \"must be natural size\" }\n+  end record;\n+\n+  type V2 is record\n+     B : U8;\n+     VW : Vword;\n+  end record;\n+  For V2'Alignment use 4;\n+  for V2 use record\n+     B at 0 range 0 .. 7;\n+     VW at 1 range 0 .. 31; -- { dg-error \"must be multiple\" }\n+  end record;\n+\n+  type V3 is record\n+     B : U8;\n+     VW : Vword;\n+  end record;\n+  For V3'Alignment use 4;\n+  for V3 use record\n+     B at 0 range 0 .. 7;\n+     VW at 1 range 0 .. 15; -- { dg-error \"must be (multiple|natural size)\" }\n+  end record;\n+\n+end Clause_On_Volatile;"}]}