{"sha": "432218ba764d1ffd79c1f946acdabec1af72c080", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDMyMjE4YmE3NjRkMWZmZDc5YzFmOTQ2YWNkYWJlYzFhZjcyYzA4MA==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2005-05-07T18:51:50Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2005-05-07T18:51:50Z"}, "message": "config.gcc ({powerpc,rs6000}-ibm-aix*): Remove rs6000/aix.opt from extra_options.\n\n        * config.gcc ({powerpc,rs6000}-ibm-aix*): Remove rs6000/aix.opt\n        from extra_options.\n        * config.in (HAVE_AS_POPCNTB): New.\n        * configure.ac (HAVE_AS_MFCRF): Add .machine \"pwr5\" to AIX test.\n        (HAVE_AS_POPCNTB): New.\n        * configure: Regenerated.\n        * config/rs6000/aix.h (TARGET_XL_COMPAT): Delete.\n        * config/rs6000/rs6000.c (rs6000_override_options, power5): Add\n        MASK_POPCNTB.  Uncomment rs6000_sched_restricted_insns_priority\n        and rs6000_sched_costly_dep.\n        * config/rs6000/rs6000.h (TARGET_POPCNTB): New.\n        (TARGET_XL_COMPAT): Delete.\n        * config/rs6000/rs6000.md (UNSPEC_POPCNTB): New.\n        (popcount<mode>2): New.\n        (popcntb<mode>2): New.\n        * config/rs6000/rs6000.opt (mpopcntb): New.\n\nFrom-SVN: r99356", "tree": {"sha": "c6abedb6e62186f219350abb5c2bc2b793b9e1a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6abedb6e62186f219350abb5c2bc2b793b9e1a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/432218ba764d1ffd79c1f946acdabec1af72c080", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/432218ba764d1ffd79c1f946acdabec1af72c080", "html_url": "https://github.com/Rust-GCC/gccrs/commit/432218ba764d1ffd79c1f946acdabec1af72c080", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/432218ba764d1ffd79c1f946acdabec1af72c080/comments", "author": null, "committer": null, "parents": [{"sha": "e28c73584edf0a18f5e0306d9d7b22b1e02a0efa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e28c73584edf0a18f5e0306d9d7b22b1e02a0efa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e28c73584edf0a18f5e0306d9d7b22b1e02a0efa"}], "stats": {"total": 250, "additions": 184, "deletions": 66}, "files": [{"sha": "e440de06bf412326dc5bc7030014d0650063b456", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/432218ba764d1ffd79c1f946acdabec1af72c080/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/432218ba764d1ffd79c1f946acdabec1af72c080/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=432218ba764d1ffd79c1f946acdabec1af72c080", "patch": "@@ -1,3 +1,22 @@\n+2005-05-07  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* config.gcc ({powerpc,rs6000}-ibm-aix*): Remove rs6000/aix.opt\n+\tfrom extra_options.\n+\t* config.in (HAVE_AS_POPCNTB): New.\n+\t* configure.ac (HAVE_AS_MFCRF): Add .machine \"pwr5\" to AIX test.\n+\t(HAVE_AS_POPCNTB): New.\n+\t* configure: Regenerated.\n+\t* config/rs6000/aix.h (TARGET_XL_COMPAT): Delete.\n+\t* config/rs6000/rs6000.c (rs6000_override_options, power5): Add\n+\tMASK_POPCNTB.  Uncomment rs6000_sched_restricted_insns_priority\n+\tand rs6000_sched_costly_dep.\n+\t* config/rs6000/rs6000.h (TARGET_POPCNTB): New.\n+\t(TARGET_XL_COMPAT): Delete.\n+\t* config/rs6000/rs6000.md (UNSPEC_POPCNTB): New.\n+\t(popcount<mode>2): New.\n+\t(popcntb<mode>2): New.\n+\t* config/rs6000/rs6000.opt (mpopcntb): New.\n+\n 2005-05-07  Matt Kraai  <kraai@ftbfs.org>\n \n \t* Makefile.in (c-gimplify.o): Depend on $(RTL_H) instead of rtl.h."}, {"sha": "f795fd633c824bbb12dce5c3e04009bfc61faf0c", "filename": "gcc/config.gcc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/432218ba764d1ffd79c1f946acdabec1af72c080/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/432218ba764d1ffd79c1f946acdabec1af72c080/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=432218ba764d1ffd79c1f946acdabec1af72c080", "patch": "@@ -1768,22 +1768,22 @@ powerpcle-*-kaos*)\n rs6000-ibm-aix4.[12]* | powerpc-ibm-aix4.[12]*)\n \ttm_file=\"${tm_file} rs6000/aix.h rs6000/aix41.h rs6000/xcoff.h\"\n \ttmake_file=\"rs6000/t-fprules rs6000/t-newas\"\n-\textra_options=\"${extra_options} rs6000/aix.opt rs6000/aix41.opt\"\n+\textra_options=\"${extra_options} rs6000/aix41.opt\"\n \tuse_collect2=yes\n \textra_headers=\n \tuse_fixproto=yes\n \t;;\n rs6000-ibm-aix4.[3456789]* | powerpc-ibm-aix4.[3456789]*)\n \ttm_file=\"rs6000/biarch64.h ${tm_file} rs6000/aix.h rs6000/aix43.h rs6000/xcoff.h\"\n \ttmake_file=rs6000/t-aix43\n-\textra_options=\"${extra_options} rs6000/aix.opt rs6000/aix64.opt\"\n+\textra_options=\"${extra_options} rs6000/aix64.opt\"\n \tuse_collect2=yes\n \tthread_file='aix'\n \textra_headers=\n \t;;\n rs6000-ibm-aix5.1.* | powerpc-ibm-aix5.1.*)\n \ttm_file=\"rs6000/biarch64.h ${tm_file} rs6000/aix.h rs6000/aix51.h rs6000/xcoff.h\"\n-\textra_options=\"${extra_options} rs6000/aix.opt rs6000/aix64.opt\"\n+\textra_options=\"${extra_options} rs6000/aix64.opt\"\n \ttmake_file=rs6000/t-aix43\n \tuse_collect2=yes\n \tthread_file='aix'\n@@ -1792,7 +1792,7 @@ rs6000-ibm-aix5.1.* | powerpc-ibm-aix5.1.*)\n rs6000-ibm-aix[56789].* | powerpc-ibm-aix[56789].*)\n \ttm_file=\"${tm_file} rs6000/aix.h rs6000/aix52.h rs6000/xcoff.h\"\n \ttmake_file=rs6000/t-aix52\n-\textra_options=\"${extra_options} rs6000/aix.opt rs6000/aix64.opt\"\n+\textra_options=\"${extra_options} rs6000/aix64.opt\"\n \tuse_collect2=yes\n \tthread_file='aix'\n \textra_headers="}, {"sha": "9b0603fcccd2543077f21dc919c435c272a8df12", "filename": "gcc/config.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/432218ba764d1ffd79c1f946acdabec1af72c080/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/432218ba764d1ffd79c1f946acdabec1af72c080/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=432218ba764d1ffd79c1f946acdabec1af72c080", "patch": "@@ -119,6 +119,9 @@\n /* Define if your assembler supports offsetable %lo(). */\n #undef HAVE_AS_OFFSETABLE_LO10\n \n+/* Define if your assembler supports popcntb field. */\n+#undef HAVE_AS_POPCNTB\n+\n /* Define if your assembler supports .register. */\n #undef HAVE_AS_REGISTER_PSEUDO_OP\n "}, {"sha": "1b6c16304f84ed6f4f002d33a65a7f2db48019ef", "filename": "gcc/config/rs6000/aix.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/432218ba764d1ffd79c1f946acdabec1af72c080/gcc%2Fconfig%2Frs6000%2Faix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/432218ba764d1ffd79c1f946acdabec1af72c080/gcc%2Fconfig%2Frs6000%2Faix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix.h?ref=432218ba764d1ffd79c1f946acdabec1af72c080", "patch": "@@ -194,10 +194,6 @@\n \n #define JUMP_TABLES_IN_TEXT_SECTION 1\n \n-/* Enable AIX XL compiler calling convention breakage compatibility.  */\n-#undef  TARGET_XL_COMPAT\n-#define\tTARGET_XL_COMPAT\thas_xl_compat_option\n-\n /* Define any extra SPECS that the compiler needs to generate.  */\n #undef  SUBTARGET_EXTRA_SPECS\n #define SUBTARGET_EXTRA_SPECS\t\t\t\t\t\t\\"}, {"sha": "dcf9afe0f35422d4c0e21a926c599cb37b06c643", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/432218ba764d1ffd79c1f946acdabec1af72c080/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/432218ba764d1ffd79c1f946acdabec1af72c080/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=432218ba764d1ffd79c1f946acdabec1af72c080", "patch": "@@ -1114,7 +1114,8 @@ rs6000_override_options (const char *default_cpu)\n \t {\"power4\", PROCESSOR_POWER4,\n \t  POWERPC_BASE_MASK | MASK_PPC_GFXOPT | MASK_MFCRF | MASK_POWERPC64},\n \t {\"power5\", PROCESSOR_POWER5,\n-\t  POWERPC_BASE_MASK | MASK_PPC_GFXOPT | MASK_MFCRF | MASK_POWERPC64},\n+\t  POWERPC_BASE_MASK | MASK_POWERPC64 | MASK_PPC_GFXOPT\n+\t  | MASK_MFCRF | MASK_POPCNTB},\n \t {\"powerpc\", PROCESSOR_POWERPC, POWERPC_BASE_MASK},\n \t {\"powerpc64\", PROCESSOR_POWERPC64,\n \t  POWERPC_BASE_MASK | MASK_PPC_GFXOPT | MASK_POWERPC64},\n@@ -1312,18 +1313,13 @@ rs6000_override_options (const char *default_cpu)\n   rs6000_sched_groups = (rs6000_cpu == PROCESSOR_POWER4\n \t\t\t || rs6000_cpu == PROCESSOR_POWER5);\n \n-  /* ?? I see no need for this.  This variable was always initialized to 0,\n-     except when explicitly set.  It's not set in any .h file either.\n   rs6000_sched_restricted_insns_priority\n     = (rs6000_sched_groups ? 1 : 0);\n-  */\n \n   /* Handle -msched-costly-dep option.  */\n-  /* ?? Same goes for this.  When would rs6000_sched_costly_dep ever have\n-     a nonzero value upon entry to this function.  ??\n   rs6000_sched_costly_dep\n     = (rs6000_sched_groups ? store_to_load_dep_costly : no_dep_costly);\n-  */\n+\n   if (rs6000_sched_costly_dep_str)\n     {\n       if (! strcmp (rs6000_sched_costly_dep_str, \"no\"))\n@@ -1341,6 +1337,7 @@ rs6000_override_options (const char *default_cpu)\n   /* Handle -minsert-sched-nops option.  */\n   rs6000_sched_insert_nops\n     = (rs6000_sched_groups ? sched_finish_regroup_exact : sched_finish_none);\n+\n   if (rs6000_sched_insert_nops_str)\n     {\n       if (! strcmp (rs6000_sched_insert_nops_str, \"no\"))"}, {"sha": "25e48498f2d29657120e06ffb5a5d323179d3252", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/432218ba764d1ffd79c1f946acdabec1af72c080/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/432218ba764d1ffd79c1f946acdabec1af72c080/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=432218ba764d1ffd79c1f946acdabec1af72c080", "patch": "@@ -132,10 +132,18 @@\n    optional field operand for mfcr.  */\n \n #ifndef HAVE_AS_MFCRF\n-#undef TARGET_MFCRF\n+#undef  TARGET_MFCRF\n #define TARGET_MFCRF 0\n #endif\n \n+/* Define TARGET_POPCNTB if the target assembler does not suppport the\n+   popcount byte instruction.  */\n+\n+#ifndef HAVE_AS_POPCNTB\n+#undef  TARGET_POPCNTB\n+#define TARGET_POPCNTB 0\n+#endif\n+\n #define TARGET_32BIT\t\t(! TARGET_64BIT)\n \n /* Emit a dtp-relative reference to a TLS variable.  */\n@@ -166,8 +174,6 @@\n     /* The option machinery will define this.  */\n #endif\n \n-#define TARGET_XL_COMPAT 0\n-\n #define TARGET_DEFAULT (MASK_POWER | MASK_MULTIPLE | MASK_STRING)\n \n /* Processor type.  Order must match cpu attribute in MD file.  */"}, {"sha": "55b8a943ce94f1f5dd1863cdfa7cdbe1bebb05a2", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/432218ba764d1ffd79c1f946acdabec1af72c080/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/432218ba764d1ffd79c1f946acdabec1af72c080/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=432218ba764d1ffd79c1f946acdabec1af72c080", "patch": "@@ -57,6 +57,7 @@\n    (UNSPEC_SYNC_SWAP\t\t35)\n    (UNSPEC_LWSYNC\t\t36)\n    (UNSPEC_ISYNC\t\t37)\n+   (UNSPEC_POPCNTB\t\t38)\n   ])\n \n ;;\n@@ -1716,6 +1717,31 @@\n      operands[5] = GEN_INT (GET_MODE_BITSIZE (<MODE>mode));\n   })\n \n+(define_expand \"popcount<mode>2\"\n+  [(set (match_dup 2)\n+\t(unspec:GPR [(match_operand:GPR 1 \"gpc_reg_operand\" \"r\")]\n+\t\t     UNSPEC_POPCNTB))\n+   (set (match_dup 3)\n+\t(mult:GPR (match_dup 2) (match_dup 4)))\n+   (set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r\")\n+\t(lshiftrt:GPR (match_dup 3) (match_dup 5)))]\n+  \"TARGET_POPCNTB\"\n+  {\n+    operands[2] = gen_reg_rtx (<MODE>mode);\n+    operands[3] = gen_reg_rtx (<MODE>mode);\n+    operands[4] = force_reg (<MODE>mode, <MODE>mode == SImode\n+\t\t\t\t\t ? GEN_INT (0x01010101)\n+\t\t\t\t\t : GEN_INT (0x0101010101010101LL));\n+    operands[5] = GEN_INT (GET_MODE_BITSIZE (<MODE>mode) - 8);\n+  })\n+\n+(define_insn \"popcntb<mode>2\"\n+  [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r\")\n+        (unspec:GPR [(match_operand:GPR 1 \"gpc_reg_operand\" \"r\")]\n+                     UNSPEC_POPCNTB))]\n+  \"TARGET_POPCNTB\"\n+  \"popcntb %0,%1\")\n+\n (define_expand \"mulsi3\"\n   [(use (match_operand:SI 0 \"gpc_reg_operand\" \"\"))\n    (use (match_operand:SI 1 \"gpc_reg_operand\" \"\"))"}, {"sha": "0acb3aa85beb901285aefbf11b5307550c203d42", "filename": "gcc/config/rs6000/rs6000.opt", "status": "modified", "additions": 52, "deletions": 46, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/432218ba764d1ffd79c1f946acdabec1af72c080/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/432218ba764d1ffd79c1f946acdabec1af72c080/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.opt?ref=432218ba764d1ffd79c1f946acdabec1af72c080", "patch": "@@ -44,10 +44,34 @@ mpowerpc64\n Target Report Mask(POWERPC64)\n Use PowerPC-64 instruction set\n \n+mpowerpc-gpopt\n+Target Report Mask(PPC_GPOPT)\n+Use PowerPC General Purpose group optional instructions\n+\n+mpowerpc-gfxopt\n+Target Report Mask(PPC_GFXOPT)\n+Use PowerPC Graphics group optional instructions\n+\n+mmfcrf\n+Target Report Mask(MFCRF)\n+Generate single field mfcr instruction\n+\n+mpopcntb\n+Target Report Mask(POPCNTB)\n+Use PowerPC/AS popcntb instruction\n+\n maltivec\n Target Report Mask(ALTIVEC)\n Use AltiVec instructions\n \n+mmultiple\n+Target Report Mask(MULTIPLE)\n+Generate load/store multiple instructions\n+\n+mstring\n+Target Report Mask(STRING)\n+Generate string instructions for block moves\n+\n mnew-mnemonics\n Target Report RejectNegative Mask(NEW_MNEMONICS)\n Use new mnemonics for PowerPC architecture\n@@ -56,35 +80,6 @@ mold-mnemonics\n Target Report RejectNegative InverseMask(NEW_MNEMONICS)\n Use old mnemonics for PowerPC architecture\n \n-mno-fp-in-toc\n-Target Report RejectNegative Mask(NO_FP_IN_TOC)\n-Do not place floating point constants in TOC\n-\n-mfp-in-toc\n-Target Report RejectNegative InverseMask(NO_FP_IN_TOC)\n-Place floating point constants in TOC\n-\n-mno-sum-in-toc\n-Target RejectNegative Mask(NO_SUM_IN_TOC)\n-Do not place symbol+offset constants in TOC\n-\n-msum-in-toc\n-Target RejectNegative InverseMask(NO_SUM_IN_TOC)\n-Place symbol+offset constants in TOC\n-\n-;; ?? Where should we put documentation like this ??\n-;;\n-;  Output only one TOC entry per module.  Normally linking fails if\n-;   there are more than 16K unique variables/constants in an executable.  With\n-;   this option, linking fails only if there are more than 16K modules, or\n-;   if there are more than 16K unique variables/constant in a single module.\n-;\n-;   This is at the cost of having 2 extra loads and one extra store per\n-;   function, and one less allocable register.\n-mminimal-toc\n-Target Report Mask(MINIMAL_TOC)\n-Use only one TOC entry per procedure\n-\n msoft-float\n Target Report RejectNegative Mask(SOFT_FLOAT)\n Do not use hardware floating point\n@@ -93,14 +88,6 @@ mhard-float\n Target Report RejectNegative InverseMask(SOFT_FLOAT, HARD_FLOAT)\n Use hardware floating point\n \n-mmultiple\n-Target Report Mask(MULTIPLE)\n-Generate load/store multiple instructions\n-\n-mstring\n-Target Report Mask(STRING)\n-Generate string instructions for block moves\n-\n mno-update\n Target Report RejectNegative Mask(NO_UPDATE)\n Do not generate load/store with update instructions\n@@ -132,17 +119,36 @@ msvr4-struct-return\n Target Report InverseMask(AIX_STRUCT_RET)\n Return small structures in registers (SVR4 default)\n \n-mmfcrf\n-Target Report Mask(MFCRF)\n-Generate single field mfcr instruction\n+mxl-compat\n+Target Var(TARGET_XL_COMPAT)\n+Conform more closely to IBM XLC semantics\n \n-mpowerpc-gpopt\n-Target Report Mask(PPC_GPOPT)\n-Use PowerPC General Purpose group optional instructions\n+mno-fp-in-toc\n+Target Report RejectNegative Mask(NO_FP_IN_TOC)\n+Do not place floating point constants in TOC\n \n-mpowerpc-gfxopt\n-Target Report Mask(PPC_GFXOPT)\n-Use PowerPC Graphics group optional instructions\n+mfp-in-toc\n+Target Report RejectNegative InverseMask(NO_FP_IN_TOC)\n+Place floating point constants in TOC\n+\n+mno-sum-in-toc\n+Target RejectNegative Mask(NO_SUM_IN_TOC)\n+Do not place symbol+offset constants in TOC\n+\n+msum-in-toc\n+Target RejectNegative InverseMask(NO_SUM_IN_TOC)\n+Place symbol+offset constants in TOC\n+\n+;  Output only one TOC entry per module.  Normally linking fails if\n+;   there are more than 16K unique variables/constants in an executable.  With\n+;   this option, linking fails only if there are more than 16K modules, or\n+;   if there are more than 16K unique variables/constant in a single module.\n+;\n+;   This is at the cost of having 2 extra loads and one extra store per\n+;   function, and one less allocable register.\n+mminimal-toc\n+Target Report Mask(MINIMAL_TOC)\n+Use only one TOC entry per procedure\n \n mfull-toc\n Target Report"}, {"sha": "c742fa11849f7347eba993eb89b1257c46c36807", "filename": "gcc/configure", "status": "modified", "additions": 49, "deletions": 1, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/432218ba764d1ffd79c1f946acdabec1af72c080/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/432218ba764d1ffd79c1f946acdabec1af72c080/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=432218ba764d1ffd79c1f946acdabec1af72c080", "patch": "@@ -14582,7 +14582,8 @@ fi\n \n   powerpc*-*-*)\n     case $target in\n-      *-*-aix*) conftest_s='\t.csect .text[PR]\n+      *-*-aix*) conftest_s='\t.machine \"pwr5\"\n+\t.csect .text[PR]\n \tmfcr 3,128';;\n       *-*-darwin*)\n \techo \"$as_me:$LINENO: checking assembler for .machine directive support\" >&5\n@@ -14659,6 +14660,53 @@ cat >>confdefs.h <<\\_ACEOF\n _ACEOF\n \n fi\n+\n+    case $target in\n+      *-*-aix*) conftest_s='\t.machine \"pwr5\"\n+\t.csect .text[PR]\n+\tpopcntb 3,3';;\n+      *) conftest_s='\t.machine power5\n+\t.text\n+\tpopcntb 3,3';;\n+    esac\n+\n+    echo \"$as_me:$LINENO: checking assembler for popcntb support\" >&5\n+echo $ECHO_N \"checking assembler for popcntb support... $ECHO_C\" >&6\n+if test \"${gcc_cv_as_powerpc_popcntb+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  gcc_cv_as_powerpc_popcntb=no\n+    if test $in_tree_gas = yes; then\n+    if test $gcc_cv_gas_vers -ge `expr \\( \\( 2 \\* 1000 \\) + 17 \\) \\* 1000 + 0`\n+  then gcc_cv_as_powerpc_popcntb=yes\n+fi\n+  elif test x$gcc_cv_as != x; then\n+    echo \"$conftest_s\" > conftest.s\n+    if { ac_try='$gcc_cv_as  -o conftest.o conftest.s >&5'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }\n+    then\n+\tgcc_cv_as_powerpc_popcntb=yes\n+    else\n+      echo \"configure: failed program was\" >&5\n+      cat conftest.s >&5\n+    fi\n+    rm -f conftest.o conftest.s\n+  fi\n+fi\n+echo \"$as_me:$LINENO: result: $gcc_cv_as_powerpc_popcntb\" >&5\n+echo \"${ECHO_T}$gcc_cv_as_powerpc_popcntb\" >&6\n+if test $gcc_cv_as_powerpc_popcntb = yes; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_AS_POPCNTB 1\n+_ACEOF\n+\n+fi\n+\n     ;;\n \n   mips*-*-*)"}, {"sha": "d9dcbe3c04d55bd22ef1d74dbda06203eb6308bb", "filename": "gcc/configure.ac", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/432218ba764d1ffd79c1f946acdabec1af72c080/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/432218ba764d1ffd79c1f946acdabec1af72c080/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=432218ba764d1ffd79c1f946acdabec1af72c080", "patch": "@@ -2768,7 +2768,8 @@ foo:\tnop\n \n   powerpc*-*-*)\n     case $target in\n-      *-*-aix*) conftest_s='\t.csect .text[[PR]]\n+      *-*-aix*) conftest_s='\t.machine \"pwr5\"\n+\t.csect .text[[PR]]\n \tmfcr 3,128';;\n       *-*-darwin*)\n \tgcc_GAS_CHECK_FEATURE([.machine directive support],\n@@ -2791,6 +2792,22 @@ foo:\tnop\n       [$conftest_s],,\n       [AC_DEFINE(HAVE_AS_MFCRF, 1,\n \t  [Define if your assembler supports mfcr field.])])\n+\n+    case $target in\n+      *-*-aix*) conftest_s='\t.machine \"pwr5\"\n+\t.csect .text[[PR]]\n+\tpopcntb 3,3';;\n+      *) conftest_s='\t.machine power5\n+\t.text\n+\tpopcntb 3,3';;\n+    esac\n+\n+    gcc_GAS_CHECK_FEATURE([popcntb support],\n+      gcc_cv_as_powerpc_popcntb, [2,17,0],,\n+      [$conftest_s],,\n+      [AC_DEFINE(HAVE_AS_POPCNTB, 1,\n+\t  [Define if your assembler supports popcntb field.])])\n+\n     ;;\n \n   mips*-*-*)"}]}