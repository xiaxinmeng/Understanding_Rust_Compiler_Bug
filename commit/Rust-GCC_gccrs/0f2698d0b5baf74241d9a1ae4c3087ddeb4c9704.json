{"sha": "0f2698d0b5baf74241d9a1ae4c3087ddeb4c9704", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGYyNjk4ZDBiNWJhZjc0MjQxZDlhMWFlNGMzMDg3ZGRlYjRjOTcwNA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2005-01-20T18:34:12Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-01-20T18:34:12Z"}, "message": "re PR target/19530 (MMX load intrinsic produces SSE superfluous instructions (movlps))\n\n        PR target/19530\n        * config/i386/mmintrin.h (_mm_cvtsi32_si64): Use\n        __builtin_ia32_vec_init_v2si.\n        (_mm_cvtsi64_si32): Use __builtin_ia32_vec_ext_v2si.\n        * config/i386/i386.c (IX86_BUILTIN_VEC_EXT_V2SI): New.\n        (ix86_init_mmx_sse_builtins): Create it.\n        (ix86_expand_builtin): Expand it.\n        (ix86_expand_vector_set): Handle V2SFmode and V2SImode.\n        * config/i386/mmx.md (vec_extractv2sf_0, vec_extractv2sf_1): New.\n        (vec_extractv2si_0, vec_extractv2si_1): New.\n\nFrom-SVN: r93972", "tree": {"sha": "f906d30dbcfda9c9c13794fc3198a1e3b6eee5fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f906d30dbcfda9c9c13794fc3198a1e3b6eee5fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f2698d0b5baf74241d9a1ae4c3087ddeb4c9704", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f2698d0b5baf74241d9a1ae4c3087ddeb4c9704", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f2698d0b5baf74241d9a1ae4c3087ddeb4c9704", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f2698d0b5baf74241d9a1ae4c3087ddeb4c9704/comments", "author": null, "committer": null, "parents": [{"sha": "3f38e7380efdad4245097477e4ff0ace1fa79deb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f38e7380efdad4245097477e4ff0ace1fa79deb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f38e7380efdad4245097477e4ff0ace1fa79deb"}], "stats": {"total": 133, "additions": 126, "deletions": 7}, "files": [{"sha": "514bc87e9de6b6e9b5bec414076354159bd1ca78", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f2698d0b5baf74241d9a1ae4c3087ddeb4c9704/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f2698d0b5baf74241d9a1ae4c3087ddeb4c9704/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0f2698d0b5baf74241d9a1ae4c3087ddeb4c9704", "patch": "@@ -1,3 +1,16 @@\n+2005-01-20  Richard Henderson  <rth@redhat.com>\n+\n+\tPR target/19530\n+\t* config/i386/mmintrin.h (_mm_cvtsi32_si64): Use\n+\t__builtin_ia32_vec_init_v2si.\n+\t(_mm_cvtsi64_si32): Use __builtin_ia32_vec_ext_v2si.\n+\t* config/i386/i386.c (IX86_BUILTIN_VEC_EXT_V2SI): New.\n+\t(ix86_init_mmx_sse_builtins): Create it.\n+\t(ix86_expand_builtin): Expand it.\n+\t(ix86_expand_vector_set): Handle V2SFmode and V2SImode.\n+\t* config/i386/mmx.md (vec_extractv2sf_0, vec_extractv2sf_1): New.\n+\t(vec_extractv2si_0, vec_extractv2si_1): New.\n+\n 2005-01-20  Richard Henderson  <rth@redhat.com>\n \n \t* config/i386/i386.c (ix86_expand_push): New."}, {"sha": "e0fa5107160eb359d0cced5c3ce480783b92eec9", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f2698d0b5baf74241d9a1ae4c3087ddeb4c9704/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f2698d0b5baf74241d9a1ae4c3087ddeb4c9704/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=0f2698d0b5baf74241d9a1ae4c3087ddeb4c9704", "patch": "@@ -12654,6 +12654,7 @@ enum ix86_builtins\n   IX86_BUILTIN_VEC_EXT_V4SF,\n   IX86_BUILTIN_VEC_EXT_V4SI,\n   IX86_BUILTIN_VEC_EXT_V8HI,\n+  IX86_BUILTIN_VEC_EXT_V2SI,\n   IX86_BUILTIN_VEC_EXT_V4HI,\n   IX86_BUILTIN_VEC_SET_V8HI,\n   IX86_BUILTIN_VEC_SET_V4HI,\n@@ -13663,6 +13664,11 @@ ix86_init_mmx_sse_builtins (void)\n   def_builtin (MASK_SSE | MASK_3DNOW_A, \"__builtin_ia32_vec_ext_v4hi\",\n \t       ftype, IX86_BUILTIN_VEC_EXT_V4HI);\n \n+  ftype = build_function_type_list (intSI_type_node, V2SI_type_node,\n+\t\t\t\t    integer_type_node, NULL_TREE);\n+  def_builtin (MASK_MMX, \"__builtin_ia32_vec_ext_v2si\",\n+\t       ftype, IX86_BUILTIN_VEC_EXT_V2SI);\n+\n   /* Access to the vec_set patterns.  */\n   ftype = build_function_type_list (V8HI_type_node, V8HI_type_node,\n \t\t\t\t    intHI_type_node,\n@@ -14475,6 +14481,7 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n     case IX86_BUILTIN_VEC_EXT_V4SF:\n     case IX86_BUILTIN_VEC_EXT_V4SI:\n     case IX86_BUILTIN_VEC_EXT_V8HI:\n+    case IX86_BUILTIN_VEC_EXT_V2SI:\n     case IX86_BUILTIN_VEC_EXT_V4HI:\n       return ix86_expand_vec_ext_builtin (arglist, target);\n \n@@ -16276,9 +16283,18 @@ ix86_expand_vector_set (bool mmx_ok, rtx target, rtx val, int elt)\n     {\n     case V2SFmode:\n     case V2SImode:\n-      if (!mmx_ok)\n-\tbreak;\n-      /* FALLTHRU */\n+      if (mmx_ok)\n+\t{\n+\t  tmp = gen_reg_rtx (GET_MODE_INNER (mode));\n+\t  ix86_expand_vector_extract (true, tmp, target, 1 - elt);\n+\t  if (elt == 0)\n+\t    tmp = gen_rtx_VEC_CONCAT (mode, tmp, val);\n+\t  else\n+\t    tmp = gen_rtx_VEC_CONCAT (mode, val, tmp);\n+\t  emit_insn (gen_rtx_SET (VOIDmode, target, tmp));\n+\t  return;\n+\t}\n+      break;\n \n     case V2DFmode:\n     case V2DImode:"}, {"sha": "68c8313f9aec3b0c06a1c74601add275337cc5b8", "filename": "gcc/config/i386/mmintrin.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f2698d0b5baf74241d9a1ae4c3087ddeb4c9704/gcc%2Fconfig%2Fi386%2Fmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f2698d0b5baf74241d9a1ae4c3087ddeb4c9704/gcc%2Fconfig%2Fi386%2Fmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmintrin.h?ref=0f2698d0b5baf74241d9a1ae4c3087ddeb4c9704", "patch": "@@ -58,8 +58,7 @@ _m_empty (void)\n static __inline __m64 \n _mm_cvtsi32_si64 (int __i)\n {\n-  long long __tmp = (unsigned int)__i;\n-  return (__m64) __tmp;\n+  return (__m64) __builtin_ia32_vec_init_v2si (__i, 0);\n }\n \n static __inline __m64 \n@@ -88,8 +87,7 @@ _mm_set_pi64x (long long __i)\n static __inline int\n _mm_cvtsi64_si32 (__m64 __i)\n {\n-  long long __tmp = (long long)__i;\n-  return __tmp;\n+  return __builtin_ia32_vec_ext_v2si ((__v2si)__i, 0);\n }\n \n static __inline int"}, {"sha": "9e374e44ebfae2a76dc94e58bfe01a1d8d375c2a", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f2698d0b5baf74241d9a1ae4c3087ddeb4c9704/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f2698d0b5baf74241d9a1ae4c3087ddeb4c9704/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=0f2698d0b5baf74241d9a1ae4c3087ddeb4c9704", "patch": "@@ -482,6 +482,51 @@\n   DONE;\n })\n \n+(define_insn_and_split \"*vec_extractv2sf_0\"\n+  [(set (match_operand:SF 0 \"nonimmediate_operand\"     \"=x,y,m,m,frxy\")\n+\t(vec_select:SF\n+\t  (match_operand:V2SF 1 \"nonimmediate_operand\" \" x,y,x,y,m\")\n+\t  (parallel [(const_int 0)])))]\n+  \"TARGET_MMX && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(const_int 0)]\n+{\n+  rtx op1 = operands[1];\n+  if (REG_P (op1))\n+    op1 = gen_rtx_REG (SFmode, REGNO (op1));\n+  else\n+    op1 = gen_lowpart (SFmode, op1);\n+  emit_move_insn (operands[0], op1);\n+  DONE;\n+})\n+\n+(define_insn \"*vec_extractv2sf_1\"\n+  [(set (match_operand:SF 0 \"nonimmediate_operand\"     \"=y,x,frxy\")\n+\t(vec_select:SF\n+\t  (match_operand:V2SF 1 \"nonimmediate_operand\" \" 0,0,o\")\n+\t  (parallel [(const_int 1)])))]\n+  \"TARGET_MMX && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n+  \"@\n+   punpckhdq\\t%0, %0\n+   unpckhps\\t%0, %0\n+   #\"\n+  [(set_attr \"type\" \"mmxcvt,sselog1,*\")\n+   (set_attr \"mode\" \"DI,V4SF,SI\")])\n+\n+(define_split\n+  [(set (match_operand:SF 0 \"register_operand\" \"\")\n+\t(vec_select:SF\n+\t  (match_operand:V2SF 1 \"memory_operand\" \"\")\n+\t  (parallel [(const_int 1)])))]\n+  \"TARGET_MMX && reload_completed\"\n+  [(const_int 0)]\n+{\n+  operands[1] = adjust_address (operands[1], SFmode, 4);\n+  emit_move_insn (operands[0], operands[1]);\n+  DONE;\n+})\n+\n (define_expand \"vec_extractv2sf\"\n   [(match_operand:SF 0 \"register_operand\" \"\")\n    (match_operand:V2SF 1 \"register_operand\" \"\")\n@@ -1103,6 +1148,53 @@\n   DONE;\n })\n \n+(define_insn_and_split \"*vec_extractv2si_0\"\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\"     \"=x,y,m,m,frxy\")\n+\t(vec_select:SI\n+\t  (match_operand:V2SI 1 \"nonimmediate_operand\" \" x,y,x,y,m\")\n+\t  (parallel [(const_int 0)])))]\n+  \"TARGET_MMX && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(const_int 0)]\n+{\n+  rtx op1 = operands[1];\n+  if (REG_P (op1))\n+    op1 = gen_rtx_REG (SImode, REGNO (op1));\n+  else\n+    op1 = gen_lowpart (SImode, op1);\n+  emit_move_insn (operands[0], op1);\n+  DONE;\n+})\n+\n+(define_insn \"*vec_extractv2si_1\"\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\"     \"=y,Y,Y,x,frxy\")\n+\t(vec_select:SI\n+\t  (match_operand:V2SI 1 \"nonimmediate_operand\" \" 0,0,Y,0,o\")\n+\t  (parallel [(const_int 1)])))]\n+  \"TARGET_MMX && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n+  \"@\n+   punpckhdq\\t%0, %0\n+   punpckhdq\\t%0, %0\n+   pshufd\\t{$85, %1, %0|%0, %1, 85}\n+   unpckhps\\t%0, %0\n+   #\"\n+  [(set_attr \"type\" \"mmxcvt,sselog1,sselog1,sselog1,*\")\n+   (set_attr \"mode\" \"DI,TI,TI,V4SF,SI\")])\n+\n+(define_split\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(vec_select:SI\n+\t  (match_operand:V2SI 1 \"memory_operand\" \"\")\n+\t  (parallel [(const_int 1)])))]\n+  \"TARGET_MMX && reload_completed\"\n+  [(const_int 0)]\n+{\n+  operands[1] = adjust_address (operands[1], SImode, 4);\n+  emit_move_insn (operands[0], operands[1]);\n+  DONE;\n+})\n+\n (define_expand \"vec_extractv2si\"\n   [(match_operand:SI 0 \"register_operand\" \"\")\n    (match_operand:V2SI 1 \"register_operand\" \"\")"}]}