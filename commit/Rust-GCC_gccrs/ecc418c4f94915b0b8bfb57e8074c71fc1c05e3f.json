{"sha": "ecc418c4f94915b0b8bfb57e8074c71fc1c05e3f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWNjNDE4YzRmOTQ5MTViMGI4YmZiNTdlODA3NGM3MWZjMWMwNWUzZg==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2007-03-19T01:48:34Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2007-03-19T01:48:34Z"}, "message": "pa.c (output_deferred_plabels, [...]): Cleanup formatting of targetm calls.\n\n\t* pa.c (output_deferred_plabels, output_bb, output_millicode_call,\n\tattr_length_call, output_call, output_indirect_call): Cleanup\n\tformatting of targetm calls.\n\nFrom-SVN: r123048", "tree": {"sha": "a292a2aa67b028bc943a35b5002c565bf59865f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a292a2aa67b028bc943a35b5002c565bf59865f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ecc418c4f94915b0b8bfb57e8074c71fc1c05e3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecc418c4f94915b0b8bfb57e8074c71fc1c05e3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecc418c4f94915b0b8bfb57e8074c71fc1c05e3f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecc418c4f94915b0b8bfb57e8074c71fc1c05e3f/comments", "author": null, "committer": null, "parents": [{"sha": "fa3b3d5e781f40443123de372d3dd40100b83c26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa3b3d5e781f40443123de372d3dd40100b83c26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa3b3d5e781f40443123de372d3dd40100b83c26"}], "stats": {"total": 34, "additions": 20, "deletions": 14}, "files": [{"sha": "9702ebb242e73f5af1725defce0d69e0b6390a64", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecc418c4f94915b0b8bfb57e8074c71fc1c05e3f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecc418c4f94915b0b8bfb57e8074c71fc1c05e3f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ecc418c4f94915b0b8bfb57e8074c71fc1c05e3f", "patch": "@@ -1,3 +1,9 @@\n+2007-03-18  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+\n+\t* pa.c (output_deferred_plabels, output_bb, output_millicode_call,\n+\tattr_length_call, output_call, output_indirect_call): Cleanup\n+\tformatting of targetm calls.\n+\n 2007-03-19  Hans-Peter Nilsson  <hp@axis.com>\n \n \t* config/cris/cris.h (HANDLE_PRAGMA_PACK_PUSH_POP): Define to 1."}, {"sha": "a3bf38c0b43098543d0392fb4b3c4178eeaad815", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecc418c4f94915b0b8bfb57e8074c71fc1c05e3f/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecc418c4f94915b0b8bfb57e8074c71fc1c05e3f/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=ecc418c4f94915b0b8bfb57e8074c71fc1c05e3f", "patch": "@@ -5336,7 +5336,7 @@ output_deferred_plabels (void)\n   /* Now output the deferred plabels.  */\n   for (i = 0; i < n_deferred_plabels; i++)\n     {\n-      (*targetm.asm_out.internal_label) (asm_out_file, \"L\",\n+      targetm.asm_out.internal_label (asm_out_file, \"L\",\n \t\t CODE_LABEL_NUMBER (deferred_plabels[i].internal_label));\n       assemble_integer (deferred_plabels[i].symbol,\n \t\t\tTARGET_64BIT ? 8 : 4, TARGET_64BIT ? 64 : 32, 1);\n@@ -6255,8 +6255,8 @@ output_lbranch (rtx dest, rtx insn, int xdelay)\n \t{\n \t  xoperands[1] = gen_label_rtx ();\n \t  output_asm_insn (\"addil L'%l0-%l1,%%r1\", xoperands);\n-\t  (*targetm.asm_out.internal_label) (asm_out_file, \"L\",\n-\t\t\t\t\t     CODE_LABEL_NUMBER (xoperands[1]));\n+\t  targetm.asm_out.internal_label (asm_out_file, \"L\",\n+\t\t\t\t\t  CODE_LABEL_NUMBER (xoperands[1]));\n \t  output_asm_insn (\"ldo R'%l0-%l1(%%r1),%%r1\", xoperands);\n \t}\n       else\n@@ -7115,7 +7115,7 @@ output_millicode_call (rtx insn, rtx call_dest)\n \t    {\n \t      xoperands[1] = gen_label_rtx ();\n \t      output_asm_insn (\"addil L'%0-%l1,%%r1\", xoperands);\n-\t      (*targetm.asm_out.internal_label) (asm_out_file, \"L\",\n+\t      targetm.asm_out.internal_label (asm_out_file, \"L\",\n \t\t\t\t\t CODE_LABEL_NUMBER (xoperands[1]));\n \t      output_asm_insn (\"ldo R'%0-%l1(%%r1),%%r1\", xoperands);\n \t    }\n@@ -7159,7 +7159,7 @@ output_millicode_call (rtx insn, rtx call_dest)\n \t\t millicode symbol but not an arbitrary external\n \t\t symbol when generating SOM output.  */\n \t      xoperands[1] = gen_label_rtx ();\n-\t      (*targetm.asm_out.internal_label) (asm_out_file, \"L\",\n+\t      targetm.asm_out.internal_label (asm_out_file, \"L\",\n \t\t\t\t\t CODE_LABEL_NUMBER (xoperands[1]));\n \t      output_asm_insn (\"addil L'%0-%l1,%%r1\", xoperands);\n \t      output_asm_insn (\"ldo R'%0-%l1(%%r1),%%r1\", xoperands);\n@@ -7198,8 +7198,8 @@ output_millicode_call (rtx insn, rtx call_dest)\n \t{\n \t  xoperands[1] = gen_label_rtx ();\n \t  output_asm_insn (\"ldo %0-%1(%2),%2\", xoperands);\n-\t  (*targetm.asm_out.internal_label) (asm_out_file, \"L\",\n-\t\t\t\t\t     CODE_LABEL_NUMBER (xoperands[1]));\n+\t  targetm.asm_out.internal_label (asm_out_file, \"L\",\n+\t\t\t\t\t  CODE_LABEL_NUMBER (xoperands[1]));\n \t}\n       else\n \t/* ??? This branch may not reach its target.  */\n@@ -7257,7 +7257,7 @@ attr_length_call (rtx insn, int sibcall)\n     call_dest = XEXP (XEXP (XEXP (XVECEXP (pat, 0, 0), 1), 0), 0);\n \n   call_decl = SYMBOL_REF_DECL (call_dest);\n-  local_call = call_decl && (*targetm.binds_local_p) (call_decl);\n+  local_call = call_decl && targetm.binds_local_p (call_decl);\n \n   /* pc-relative branch.  */\n   if (!TARGET_LONG_CALLS\n@@ -7321,7 +7321,7 @@ output_call (rtx insn, rtx call_dest, int sibcall)\n   int delay_slot_filled = 0;\n   int seq_length = dbr_sequence_length ();\n   tree call_decl = SYMBOL_REF_DECL (call_dest);\n-  int local_call = call_decl && (*targetm.binds_local_p) (call_decl);\n+  int local_call = call_decl && targetm.binds_local_p (call_decl);\n   rtx xoperands[2];\n \n   xoperands[0] = call_dest;\n@@ -7445,7 +7445,7 @@ output_call (rtx insn, rtx call_dest, int sibcall)\n \t\t  xoperands[1] = gen_label_rtx ();\n \t\t  output_asm_insn (\"{bl|b,l} .+8,%%r1\", xoperands);\n \t\t  output_asm_insn (\"addil L'%0-%l1,%%r1\", xoperands);\n-\t\t  (*targetm.asm_out.internal_label) (asm_out_file, \"L\",\n+\t\t  targetm.asm_out.internal_label (asm_out_file, \"L\",\n \t\t\t\t\t     CODE_LABEL_NUMBER (xoperands[1]));\n \t\t  output_asm_insn (\"ldo R'%0-%l1(%%r1),%%r1\", xoperands);\n \t\t}\n@@ -7582,8 +7582,8 @@ output_call (rtx insn, rtx call_dest, int sibcall)\n \t{\n \t  xoperands[1] = gen_label_rtx ();\n \t  output_asm_insn (\"ldo %0-%1(%%r2),%%r2\", xoperands);\n-\t  (*targetm.asm_out.internal_label) (asm_out_file, \"L\",\n-\t\t\t\t\t     CODE_LABEL_NUMBER (xoperands[1]));\n+\t  targetm.asm_out.internal_label (asm_out_file, \"L\",\n+\t\t\t\t\t  CODE_LABEL_NUMBER (xoperands[1]));\n \t}\n       else\n \toutput_asm_insn (\"nop\\n\\tb,n %0\", xoperands);\n@@ -7686,8 +7686,8 @@ output_indirect_call (rtx insn, rtx call_dest)\n     {\n       xoperands[0] = gen_label_rtx ();\n       output_asm_insn (\"addil L'$$dyncall-%0,%%r1\", xoperands);\n-      (*targetm.asm_out.internal_label) (asm_out_file, \"L\",\n-\t\t\t\t\t CODE_LABEL_NUMBER (xoperands[0]));\n+      targetm.asm_out.internal_label (asm_out_file, \"L\",\n+\t\t\t\t      CODE_LABEL_NUMBER (xoperands[0]));\n       output_asm_insn (\"ldo R'$$dyncall-%0(%%r1),%%r1\", xoperands);\n     }\n   else"}]}