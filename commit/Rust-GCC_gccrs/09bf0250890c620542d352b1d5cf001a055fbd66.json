{"sha": "09bf0250890c620542d352b1d5cf001a055fbd66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDliZjAyNTA4OTBjNjIwNTQyZDM1MmIxZDVjZjAwMWEwNTVmYmQ2Ng==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-09-25T12:22:29Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-09-25T12:22:29Z"}, "message": "(push_reload...\n\n(push_reload, find_reloads): Use new macros LOAD_EXTEND_OP and\nWORD_REGISTER_OPERATION instead of BYTE_LOADS_*_EXTEND and\nLOAD_EXTEND.\n\nFrom-SVN: r5475", "tree": {"sha": "8f8a09f1840ac3360ac919d7d7c9086f92d51c51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f8a09f1840ac3360ac919d7d7c9086f92d51c51"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/09bf0250890c620542d352b1d5cf001a055fbd66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09bf0250890c620542d352b1d5cf001a055fbd66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09bf0250890c620542d352b1d5cf001a055fbd66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09bf0250890c620542d352b1d5cf001a055fbd66/comments", "author": null, "committer": null, "parents": [{"sha": "ad92c8260e6edea166040670a1a0e2304156a116", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad92c8260e6edea166040670a1a0e2304156a116", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad92c8260e6edea166040670a1a0e2304156a116"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "a4558d6fea7d47ea8eb7282a00aa68fb1516159f", "filename": "gcc/reload.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09bf0250890c620542d352b1d5cf001a055fbd66/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09bf0250890c620542d352b1d5cf001a055fbd66/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=09bf0250890c620542d352b1d5cf001a055fbd66", "patch": "@@ -643,7 +643,7 @@ push_reload (in, out, inloc, outloc, class,\n \t  || (((GET_CODE (SUBREG_REG (in)) == REG\n \t\t&& REGNO (SUBREG_REG (in)) >= FIRST_PSEUDO_REGISTER)\n \t       || GET_CODE (SUBREG_REG (in)) == MEM)\n-#if defined(BYTE_LOADS_ZERO_EXTEND) || defined(BYTE_LOADS_SIGN_EXTEND)\n+#ifdef LOAD_EXTEND_OP\n \t      && GET_MODE_SIZE (inmode) <= UNITS_PER_WORD\n \t      && GET_MODE_SIZE (GET_MODE (SUBREG_REG (in))) <= UNITS_PER_WORD\n \t      && (GET_MODE_SIZE (inmode)\n@@ -680,7 +680,7 @@ push_reload (in, out, inloc, outloc, class,\n       in_subreg_loc = inloc;\n       inloc = &SUBREG_REG (in);\n       in = *inloc;\n-#if ! defined(BYTE_LOADS_ZERO_EXTEND) && ! defined(BYTE_LOADS_SIGN_EXTEND)\n+#ifndef LOAD_EXTEND_OP\n       if (GET_CODE (in) == MEM)\n \t/* This is supposed to happen only for paradoxical subregs made by\n \t   combine.c.  (SUBREG (MEM)) isn't supposed to occur other ways.  */\n@@ -726,7 +726,7 @@ push_reload (in, out, inloc, outloc, class,\n \t  || (((GET_CODE (SUBREG_REG (out)) == REG\n \t\t&& REGNO (SUBREG_REG (out)) >= FIRST_PSEUDO_REGISTER)\n \t       || GET_CODE (SUBREG_REG (out)) == MEM)\n-#if defined(BYTE_LOADS_ZERO_EXTEND) || defined(BYTE_LOADS_SIGN_EXTEND)\n+#ifdef LOAD_EXTEND_OP\n \t      && GET_MODE_SIZE (outmode) <= UNITS_PER_WORD\n \t      && GET_MODE_SIZE (GET_MODE (SUBREG_REG (out))) <= UNITS_PER_WORD\n \t      && (GET_MODE_SIZE (outmode)\n@@ -760,7 +760,7 @@ push_reload (in, out, inloc, outloc, class,\n       out_subreg_loc = outloc;\n       outloc = &SUBREG_REG (out);\n       out = *outloc; \n-#if ! defined(BYTE_LOADS_ZERO_EXTEND) && ! defined(BYTE_LOADS_SIGN_EXTEND)\n+#ifndef LOAD_EXTEND_OP\n      if (GET_CODE (out) == MEM\n \t  && GET_MODE_SIZE (GET_MODE (out)) > GET_MODE_SIZE (outmode))\n \tabort ();\n@@ -2599,7 +2599,7 @@ find_reloads (insn, replace, ind_levels, live_known, reload_reg_p)\n \t      /* Force reload if this is a constant or if there may may\n \t\t be a problem accessing OPERAND in the outer mode.  */\n \t      if (CONSTANT_P (operand)\n-#if defined(BYTE_LOADS_ZERO_EXTEND) || defined(BYTE_LOADS_SIGN_EXTEND)\n+#ifdef LOAD_EXTEND_OP\n \t\t  /* If we have a SUBREG where both the inner and outer\n \t\t     modes are different size but no wider than a word,\n \t\t     combine.c has made assumptions about the behavior of"}]}