{"sha": "7473b8a90490e1dcd8fd5f7a92307d79fd2a5f8e", "node_id": "C_kwDOANBUbNoAKDc0NzNiOGE5MDQ5MGUxZGNkOGZkNWY3YTkyMzA3ZDc5ZmQyYTVmOGU", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-10-27T07:08:19Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-10-27T07:08:19Z"}, "message": "c++: Reject addresses of immediate functions in constexpr vars inside of immediate functions or consteval if [PR102753]\n\nAnother thing that wasn't in the previous patch, but I'm wondering whether we don't\nhandle it incorrectly.  constexpr.c has:\n  /* Check that immediate invocation does not return an expression referencing\n     any immediate function decls.  They need to be allowed while parsing\n     immediate functions, but can't leak outside of them.  */\n  if (is_consteval\n      && t != r\n      && (current_function_decl == NULL_TREE\n          || !DECL_IMMEDIATE_FUNCTION_P (current_function_decl)))\nas condition for the discovery of embedded immediate FUNCTION_DECLs\n(or now PTRMEM_CSTs).  If I remove the && (current... ..._decl))\nthen g++.dg/cpp2a/consteval7.C's\nstruct S { int b; int (*c) (); };\nconsteval S baz () { return { 5, foo }; }\nconsteval int qux () { S s = baz (); return s.b + s.c (); }\nconsteval int quux () { constexpr S s = baz (); return s.b + s.c (); }\nquux line fails, but based on\nhttp://eel.is/c++draft/expr.const#11\nI wonder if it shouldn't fail (clang++ -std=c++20 rejects it),\nand be only accepted without the constexpr keyword before S s.\nAlso wonder about e.g.\nconsteval int foo () { return 42; }\n\nconsteval int\nbar ()\n{\n  auto fn1 = foo;  // This must be ok\n  constexpr auto fn2 = foo; // Isn't this an error?\n  return fn1 () + fn2 ();\n}\n\nconstexpr int\nbaz ()\n{\n  if consteval {\n    auto fn1 = foo; // This must be ok\n    constexpr auto fn2 = foo; // Isn't this an error?\n    return fn1 () + fn2 ();\n  }\n  return 0;\n}\n\nauto a = bar ();\n\nstatic_assert (bar () == 84);\nstatic_assert (baz () == 84);\n(again, clang++ -std=c++20 rejects the fn2 = foo; case,\nbut doesn't implement consteval if, so can't test the other one).\nFor taking address of an immediate function or method if it is taken\noutside of immediate function context we already have diagnostics\nabout it, but shouldn't the immediate FUNCTION_DECL discovery in\ncxx_eval_outermost_constant_expression be instead guarded with something\nlike\n  if (is_consteval || in_immediate_context ())\nand be done regardless of whether t != r?\n\n2021-10-27  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/102753\n\t* constexpr.c (cxx_eval_outermost_constant_expr): Perform\n\tfind_immediate_fndecl discovery if is_consteval or\n\tin_immediate_context () rather than if is_consteval, t != r\n\tand not in immediate function's body.\n\n\t* g++.dg/cpp2a/consteval7.C: Expect diagnostics on quux.\n\t* g++.dg/cpp2a/consteval24.C: New test.\n\t* g++.dg/cpp23/consteval-if12.C: New test.", "tree": {"sha": "2df8bc219d3e32884f26f5de91193259d9cf8d8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2df8bc219d3e32884f26f5de91193259d9cf8d8f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7473b8a90490e1dcd8fd5f7a92307d79fd2a5f8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7473b8a90490e1dcd8fd5f7a92307d79fd2a5f8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7473b8a90490e1dcd8fd5f7a92307d79fd2a5f8e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7473b8a90490e1dcd8fd5f7a92307d79fd2a5f8e/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b2fda8bea3fdcc9421726e5a21e537f745cad0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b2fda8bea3fdcc9421726e5a21e537f745cad0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b2fda8bea3fdcc9421726e5a21e537f745cad0b"}], "stats": {"total": 74, "additions": 67, "deletions": 7}, "files": [{"sha": "a31d12b74518eee5035fc3b0cad17ade0ee024f7", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7473b8a90490e1dcd8fd5f7a92307d79fd2a5f8e/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7473b8a90490e1dcd8fd5f7a92307d79fd2a5f8e/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=7473b8a90490e1dcd8fd5f7a92307d79fd2a5f8e", "patch": "@@ -7472,12 +7472,8 @@ cxx_eval_outermost_constant_expr (tree t, bool allow_non_constant,\n     }\n \n   /* Check that immediate invocation does not return an expression referencing\n-     any immediate function decls.  They need to be allowed while parsing\n-     immediate functions, but can't leak outside of them.  */\n-  if (is_consteval\n-      && t != r\n-      && (current_function_decl == NULL_TREE\n-\t  || !DECL_IMMEDIATE_FUNCTION_P (current_function_decl)))\n+     any immediate function decls.  */\n+  if (is_consteval || in_immediate_context ())\n     if (tree immediate_fndecl\n \t= cp_walk_tree_without_duplicates (&r, find_immediate_fndecl,\n \t\t\t\t\t   NULL))"}, {"sha": "7a47680e5d8bfb56ca516ac2340af17cf32ff6b9", "filename": "gcc/testsuite/g++.dg/cpp23/consteval-if12.C", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7473b8a90490e1dcd8fd5f7a92307d79fd2a5f8e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconsteval-if12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7473b8a90490e1dcd8fd5f7a92307d79fd2a5f8e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconsteval-if12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconsteval-if12.C?ref=7473b8a90490e1dcd8fd5f7a92307d79fd2a5f8e", "patch": "@@ -0,0 +1,34 @@\n+// PR c++/102753\n+// { dg-do compile { target c++20 } }\n+// { dg-options \"\" }\n+\n+struct S {\n+  constexpr S () : s (0) {}\n+  consteval int foo () { return 1; }\n+  virtual consteval int bar () { return 2; }\n+  int s;\n+};\n+\n+consteval int foo () { return 42; }\n+consteval auto baz () { return foo; }\n+consteval auto qux () { return &S::foo; }\n+consteval auto corge () { return &S::bar; }\n+\n+constexpr int\n+bar ()\n+{\n+  S s;\n+  if consteval {\t\t\t// { dg-warning \"'if consteval' only available with\" \"\" { target c++20_only } }\n+    constexpr auto fn1 = foo;\t\t// { dg-error \"immediate evaluation returns address of immediate function\" }\n+    constexpr auto fn2 = &foo;\t\t// { dg-error \"immediate evaluation returns address of immediate function\" }\n+    constexpr auto fn3 = &S::foo;\t// { dg-error \"immediate evaluation returns address of immediate function\" }\n+    constexpr auto fn4 = &S::bar;\t// { dg-error \"immediate evaluation returns address of immediate function\" }\n+    constexpr auto fn5 = baz ();\t// { dg-error \"immediate evaluation returns address of immediate function\" }\n+    constexpr auto fn6 = qux ();\t// { dg-error \"immediate evaluation returns address of immediate function\" }\n+    constexpr auto fn7 = corge ();\t// { dg-error \"immediate evaluation returns address of immediate function\" }\n+    return fn1 () + fn2 () + (s.*fn3) () + (s.*fn4) () + fn5 () + (s.*fn6) () + (s.*fn7) ();\n+  }\n+  return 0;\n+}\n+\n+auto a = bar ();"}, {"sha": "6d0c63c749bec63da68446bc6dfe8206dda56eec", "filename": "gcc/testsuite/g++.dg/cpp2a/consteval24.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7473b8a90490e1dcd8fd5f7a92307d79fd2a5f8e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval24.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7473b8a90490e1dcd8fd5f7a92307d79fd2a5f8e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval24.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval24.C?ref=7473b8a90490e1dcd8fd5f7a92307d79fd2a5f8e", "patch": "@@ -0,0 +1,30 @@\n+// PR c++/102753\n+// { dg-do compile { target c++20 } }\n+\n+struct S {\n+  constexpr S () : s (0) {}\n+  consteval int foo () { return 1; }\n+  virtual consteval int bar () { return 2; }\n+  int s;\n+};\n+\n+consteval int foo () { return 42; }\n+consteval auto baz () { return foo; }\n+consteval auto qux () { return &S::foo; }\n+consteval auto corge () { return &S::bar; }\n+\n+consteval int\n+bar ()\n+{\n+  S s;\n+  constexpr auto fn1 = foo;\t\t// { dg-error \"immediate evaluation returns address of immediate function\" }\n+  constexpr auto fn2 = &foo;\t\t// { dg-error \"immediate evaluation returns address of immediate function\" }\n+  constexpr auto fn3 = &S::foo;\t\t// { dg-error \"immediate evaluation returns address of immediate function\" }\n+  constexpr auto fn4 = &S::bar;\t\t// { dg-error \"immediate evaluation returns address of immediate function\" }\n+  constexpr auto fn5 = baz ();\t\t// { dg-error \"immediate evaluation returns address of immediate function\" }\n+  constexpr auto fn6 = qux ();\t\t// { dg-error \"immediate evaluation returns address of immediate function\" }\n+  constexpr auto fn7 = corge ();\t// { dg-error \"immediate evaluation returns address of immediate function\" }\n+  return fn1 () + fn2 () + (s.*fn3) () + (s.*fn4) () + fn5 () + (s.*fn6) () + (s.*fn7) ();\n+}\n+\n+auto a = bar ();"}, {"sha": "23f3d25a39e03f45980899c67e41714951459ef1", "filename": "gcc/testsuite/g++.dg/cpp2a/consteval7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7473b8a90490e1dcd8fd5f7a92307d79fd2a5f8e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7473b8a90490e1dcd8fd5f7a92307d79fd2a5f8e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval7.C?ref=7473b8a90490e1dcd8fd5f7a92307d79fd2a5f8e", "patch": "@@ -7,7 +7,7 @@ constexpr auto a = bar ();\t// { dg-error \"immediate evaluation returns address o\n struct S { int b; int (*c) (); };\n consteval S baz () { return { 5, foo }; }\n consteval int qux () { S s = baz (); return s.b + s.c (); }\n-consteval int quux () { constexpr S s = baz (); return s.b + s.c (); }\n+consteval int quux () { constexpr S s = baz (); return s.b + s.c (); }\t// { dg-error \"immediate evaluation returns address of immediate function 'consteval int foo\\\\(\\\\)'\" }\n constexpr auto d = baz ();\t// { dg-error \"immediate evaluation returns address of immediate function 'consteval int foo\\\\(\\\\)'\" }\n constexpr auto e = qux ();\n constexpr auto f = quux ();"}]}