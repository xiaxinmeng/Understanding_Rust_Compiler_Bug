{"sha": "b85aed950ddb30e359dbb0a7dfc7d3b6a51249ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjg1YWVkOTUwZGRiMzBlMzU5ZGJiMGE3ZGZjN2QzYjZhNTEyNDliYQ==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2012-10-10T12:54:06Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2012-10-10T12:54:06Z"}, "message": "Fix signed/unsigned warning; Make some mask types HOST_WIDE_INT; Add more debugging with -mdebug=reg\n\nFrom-SVN: r192310", "tree": {"sha": "574266e87213ad1f62856efd2c2d5ac9b058752c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/574266e87213ad1f62856efd2c2d5ac9b058752c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b85aed950ddb30e359dbb0a7dfc7d3b6a51249ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b85aed950ddb30e359dbb0a7dfc7d3b6a51249ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b85aed950ddb30e359dbb0a7dfc7d3b6a51249ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b85aed950ddb30e359dbb0a7dfc7d3b6a51249ba/comments", "author": null, "committer": null, "parents": [{"sha": "fe4e4e3bf407d3ec74e8c5934f28bdbc9aae55c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe4e4e3bf407d3ec74e8c5934f28bdbc9aae55c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe4e4e3bf407d3ec74e8c5934f28bdbc9aae55c4"}], "stats": {"total": 297, "additions": 231, "deletions": 66}, "files": [{"sha": "a3ae40d6821c2b7ea3964204399a3d5c5ec4d2a3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b85aed950ddb30e359dbb0a7dfc7d3b6a51249ba/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b85aed950ddb30e359dbb0a7dfc7d3b6a51249ba/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b85aed950ddb30e359dbb0a7dfc7d3b6a51249ba", "patch": "@@ -1,3 +1,64 @@\n+2012-10-10  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (altivec_expand_dst_builtin): Fix signed\n+\tvs. unsigned warnings by using enum type for function code.\n+\t(paired_expand_builtin): Likewise.\n+\t(spe_expand_builtin): Likewise.\n+\n+\t* config/rs6000/rs6000-c.c (rs6000_target_modify_macros): Change\n+\tbuiltin mask, target flags masks type to HOST_WIDE_INT in\n+\tpreparation for growing the number of ISA switches from 31 to 63.\n+\n+\t* config/rs6000/rs6000.opt (rs6000_builtin_mask): Make mask type\n+\tHOST_WIDE_INT.\n+\n+\t* config/rs6000/rs6000.c (struct builtin_description): Make\n+\tbuiltin mask field HOST_WIDE_INT.  Make target flags field\n+\tHOST_WIDE_INT in preparation for growing the # of ISA switches.\n+\t(struct rs6000_builtin_info_type): Likewise.\n+\t(struct rs6000_ptt): Likewise.\n+\t(rs6000_builtin_mask_calculate): Likewise.\n+\t(rs6000_invalid_builtin): Likewise.\n+\t(rs6000_builtin_decl): Likewise.\n+\t(rs6000_common_init_builtins): Likewise.\n+\t(rs6000_darwin_file_start): Likewise.\n+\t(rs6000_final_prescan_insn): Likewise.\n+\t(rs6000_inner_target_options): Likewise.\n+\t(build_target_option_node): Likewise.\n+\t(rs6000_function_specific_print): Likewise.\n+\t(DEBUG_FMT_W): New format for printing HOST_WIDE_INT in hex.\n+\n+\t* config/rs6000/rs6000-protos.h (rs6000_builtin_mask_calculate):\n+\tMake target flags, builtin masks arguments/return values\n+\tHOST_WIDE_INT in preparation for growing the number of ISA from 31\n+\tto 63.\n+\t(rs6000_target_modify_macros): Likewise.\n+\t(rs6000_target_modify_macros_ptr): Likewise.\n+\n+\t* config/rs6000/rs6000.c (DEBUG_FMT_ID): Move \"-32s\" to a separate\n+\tdefine and change DEBUG_FMT_<x> to use it.\n+\t(DEBUG_FMT_D): Likewise.\n+\t(DEBUG_FMT_S): Likewise.\n+\t(DEBUG_FMT_X): Delete, no longer used.\n+\t(DEBUG_FMT_W): Likewise.\n+\t(DEBUG_FMT_WX): New debug format for printing options in a\n+\tfriendly fashion.\n+\t(rs6000_debug_reg_global): If -mdebug=reg, print all of the\n+\toptions in target_flags and target_flags_explicit.  Print the\n+\tdefault options for -mcpu=<xxx>, -mtune=<xxx>, and the default\n+\toptions.  Adjust printing out the builtin options.\n+\t(rs6000_option_override_internal): Change printing the builtin\n+\toptions to use rs6000_print_builtin_options.\n+\t(rs6000_function_specific_print): Change to use\n+\trs6000_print_isa_options to print ISA flags.\n+\t(rs6000_print_options_internal): New function for expanded\n+\t-mdebug=reg option printing to print both the ISA options, and the\n+\tbuiltins that are enabled.\n+\t(rs6000_print_isa_options): New function to print the ISA\n+\toptions.\n+\t(rs6000_print_builtin_options): New function to print the builtin\n+\tfunctions enabled.\n+\n 2012-10-10  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/51109"}, {"sha": "4c265665ce0dae906c6dd323fa7aa5f08cf8e34c", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b85aed950ddb30e359dbb0a7dfc7d3b6a51249ba/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b85aed950ddb30e359dbb0a7dfc7d3b6a51249ba/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=b85aed950ddb30e359dbb0a7dfc7d3b6a51249ba", "patch": "@@ -285,12 +285,15 @@ rs6000_define_or_undefine_macro (bool define_p, const char *name)\n    have both the target flags and the builtin flags as arguments.  */\n \n void\n-rs6000_target_modify_macros (bool define_p, int flags, unsigned bu_mask)\n+rs6000_target_modify_macros (bool define_p, HOST_WIDE_INT flags,\n+\t\t\t     HOST_WIDE_INT bu_mask)\n {\n   if (TARGET_DEBUG_BUILTIN || TARGET_DEBUG_TARGET)\n-    fprintf (stderr, \"rs6000_target_modify_macros (%s, 0x%x, 0x%x)\\n\",\n+    fprintf (stderr,\n+\t     \"rs6000_target_modify_macros (%s, \" HOST_WIDE_INT_PRINT_HEX\n+\t     \", \" HOST_WIDE_INT_PRINT_HEX \")\\n\",\n \t     (define_p) ? \"define\" : \"undef\",\n-\t     (unsigned) flags, bu_mask);\n+\t     flags, bu_mask);\n \n   /* target_flags based options.  */\n   rs6000_define_or_undefine_macro (define_p, \"_ARCH_PPC\");"}, {"sha": "86c8250958cfd15cadedb24b8d691da25a89610f", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b85aed950ddb30e359dbb0a7dfc7d3b6a51249ba/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b85aed950ddb30e359dbb0a7dfc7d3b6a51249ba/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=b85aed950ddb30e359dbb0a7dfc7d3b6a51249ba", "patch": "@@ -176,7 +176,7 @@ extern void rs6000_call_indirect_aix (rtx, rtx, rtx);\n extern void rs6000_aix_asm_output_dwarf_table_ref (char *);\n extern void get_ppc476_thunk_name (char name[32]);\n extern bool rs6000_overloaded_builtin_p (enum rs6000_builtins);\n-extern unsigned rs6000_builtin_mask_calculate (void);\n+extern HOST_WIDE_INT rs6000_builtin_mask_calculate (void);\n \n /* Declare functions in rs6000-c.c */\n \n@@ -185,8 +185,9 @@ extern void rs6000_cpu_cpp_builtins (struct cpp_reader *);\n #ifdef TREE_CODE\n extern bool rs6000_pragma_target_parse (tree, tree);\n #endif\n-extern void rs6000_target_modify_macros (bool, int, unsigned);\n-extern void (*rs6000_target_modify_macros_ptr) (bool, int, unsigned);\n+extern void rs6000_target_modify_macros (bool, HOST_WIDE_INT, HOST_WIDE_INT);\n+extern void (*rs6000_target_modify_macros_ptr) (bool, HOST_WIDE_INT,\n+\t\t\t\t\t\tHOST_WIDE_INT);\n \n #if TARGET_MACHO\n char *output_call (rtx, rtx *, int, int);"}, {"sha": "ced06508e87a96fc87e4a2e68aebcbee75d90d15", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 159, "deletions": 59, "changes": 218, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b85aed950ddb30e359dbb0a7dfc7d3b6a51249ba/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b85aed950ddb30e359dbb0a7dfc7d3b6a51249ba/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=b85aed950ddb30e359dbb0a7dfc7d3b6a51249ba", "patch": "@@ -214,7 +214,7 @@ static GTY(()) section *toc_section;\n \n struct builtin_description\n {\n-  const unsigned int mask;\n+  const HOST_WIDE_INT mask;\n   const enum insn_code icode;\n   const char *const name;\n   const enum rs6000_builtins code;\n@@ -288,7 +288,7 @@ typedef rtx (*gen_2arg_fn_t) (rtx, rtx, rtx);\n /* Pointer to function (in rs6000-c.c) that can define or undefine target\n    macros that have changed.  Languages that don't support the preprocessor\n    don't link in rs6000-c.c, so we can't call it directly.  */\n-void (*rs6000_target_modify_macros_ptr) (bool, int, unsigned);\n+void (*rs6000_target_modify_macros_ptr) (bool, HOST_WIDE_INT, HOST_WIDE_INT);\n \n \f\n /* Target cpu costs.  */\n@@ -894,7 +894,7 @@ struct processor_costs ppca2_cost = {\n struct rs6000_builtin_info_type {\n   const char *name;\n   const enum insn_code icode;\n-  const unsigned mask;\n+  const HOST_WIDE_INT mask;\n   const unsigned attr;\n };\n \n@@ -1016,6 +1016,11 @@ bool (*rs6000_cannot_change_mode_class_ptr) (enum machine_mode,\n \n const int INSN_NOT_AVAILABLE = -1;\n \n+static void rs6000_print_isa_options (FILE *, int, const char *,\n+\t\t\t\t      HOST_WIDE_INT);\n+static void rs6000_print_builtin_options (FILE *, int, const char *,\n+\t\t\t\t\t  HOST_WIDE_INT);\n+\n /* Hash table stuff for keeping track of TOC entries.  */\n \n struct GTY(()) toc_hash_struct\n@@ -1505,7 +1510,7 @@ struct rs6000_ptt\n {\n   const char *const name;\t\t/* Canonical processor name.  */\n   const enum processor_type processor;\t/* Processor type enum value.  */\n-  const int target_enable;\t\t/* Target flags to enable.  */\n+  const HOST_WIDE_INT target_enable;\t/* Target flags to enable.  */\n };\n \n static struct rs6000_ptt const processor_target_table[] =\n@@ -1716,9 +1721,10 @@ rs6000_debug_reg_print (int first_regno, int last_regno, const char *reg_name)\n     }\n }\n \n-#define DEBUG_FMT_D \"%-32s= %d\\n\"\n-#define DEBUG_FMT_X \"%-32s= 0x%x\\n\"\n-#define DEBUG_FMT_S \"%-32s= %s\\n\"\n+#define DEBUG_FMT_ID \"%-32s= \"\n+#define DEBUG_FMT_D   DEBUG_FMT_ID \"%d\\n\"\n+#define DEBUG_FMT_WX  DEBUG_FMT_ID \"%#.12\" HOST_WIDE_INT_PRINT \"x: \"\n+#define DEBUG_FMT_S   DEBUG_FMT_ID \"%s\\n\"\n \n /* Print various interesting information with -mdebug=reg.  */\n static void\n@@ -1729,11 +1735,13 @@ rs6000_debug_reg_global (void)\n   int m;\n   char costly_num[20];\n   char nop_num[20];\n+  char flags_buffer[40];\n   const char *costly_str;\n   const char *nop_str;\n   const char *trace_str;\n   const char *abi_str;\n   const char *cmodel_str;\n+  struct cl_target_option cl_opts;\n \n   /* Map enum rs6000_vector to string.  */\n   static const char *rs6000_debug_vector_unit[] = {\n@@ -1813,12 +1821,42 @@ rs6000_debug_reg_global (void)\n     }\n \n   if (rs6000_cpu_index >= 0)\n-    fprintf (stderr, DEBUG_FMT_S, \"cpu\",\n-\t     processor_target_table[rs6000_cpu_index].name);\n+    {\n+      const char *name = processor_target_table[rs6000_cpu_index].name;\n+      HOST_WIDE_INT flags\n+\t= processor_target_table[rs6000_cpu_index].target_enable;\n+\n+      sprintf (flags_buffer, \"-mcpu=%s flags\", name);\n+      rs6000_print_isa_options (stderr, 0, flags_buffer, flags);\n+    }\n+  else\n+    fprintf (stderr, DEBUG_FMT_S, \"cpu\", \"<none>\");\n \n   if (rs6000_tune_index >= 0)\n-    fprintf (stderr, DEBUG_FMT_S, \"tune\",\n-\t     processor_target_table[rs6000_tune_index].name);\n+    {\n+      const char *name = processor_target_table[rs6000_tune_index].name;\n+      HOST_WIDE_INT flags\n+\t= processor_target_table[rs6000_tune_index].target_enable;\n+\n+      sprintf (flags_buffer, \"-mtune=%s flags\", name);\n+      rs6000_print_isa_options (stderr, 0, flags_buffer, flags);\n+    }\n+  else\n+    fprintf (stderr, DEBUG_FMT_S, \"tune\", \"<none>\");\n+\n+  cl_target_option_save (&cl_opts, &global_options);\n+  rs6000_print_isa_options (stderr, 0, \"target_flags\", target_flags);\n+\n+  rs6000_print_isa_options (stderr, 0, \"target_flags_explicit\",\n+\t\t\t    target_flags_explicit);\n+\n+  rs6000_print_builtin_options (stderr, 0, \"rs6000_builtin_mask\",\n+\t\t\t\trs6000_builtin_mask);\n+\n+  rs6000_print_isa_options (stderr, 0, \"TARGET_DEFAULT\", TARGET_DEFAULT);\n+\n+  fprintf (stderr, DEBUG_FMT_S, \"--with-cpu default\",\n+\t   OPTION_TARGET_CPU_DEFAULT ? OPTION_TARGET_CPU_DEFAULT : \"<none>\");\n \n   switch (rs6000_sched_costly_dep)\n     {\n@@ -1936,7 +1974,15 @@ rs6000_debug_reg_global (void)\n   if (rs6000_float_gprs)\n     fprintf (stderr, DEBUG_FMT_S, \"float_gprs\", \"true\");\n \n+  if (TARGET_LINK_STACK)\n+    fprintf (stderr, DEBUG_FMT_S, \"link_stack\", \"true\");\n+\n+  fprintf (stderr, DEBUG_FMT_S, \"plt-format\",\n+\t   TARGET_SECURE_PLT ? \"secure\" : \"bss\");\n+  fprintf (stderr, DEBUG_FMT_S, \"struct-return\",\n+\t   aix_struct_return ? \"aix\" : \"sysv\");\n   fprintf (stderr, DEBUG_FMT_S, \"always_hint\", tf[!!rs6000_always_hint]);\n+  fprintf (stderr, DEBUG_FMT_S, \"sched_groups\", tf[!!rs6000_sched_groups]);\n   fprintf (stderr, DEBUG_FMT_S, \"align_branch\",\n \t   tf[!!rs6000_align_branch_targets]);\n   fprintf (stderr, DEBUG_FMT_D, \"tls_size\", rs6000_tls_size);\n@@ -1948,7 +1994,6 @@ rs6000_debug_reg_global (void)\n \t   (int)END_BUILTINS);\n   fprintf (stderr, DEBUG_FMT_D, \"Number of rs6000 builtins\",\n \t   (int)RS6000_BUILTIN_COUNT);\n-  fprintf (stderr, DEBUG_FMT_X, \"Builtin mask\", rs6000_builtin_mask);\n }\n \n /* Initialize the various global tables that are based on register size.  */\n@@ -2354,7 +2399,7 @@ darwin_rs6000_override_options (void)\n    bits, and some options like SPE and PAIRED are no longer in\n    target_flags.  */\n \n-unsigned\n+HOST_WIDE_INT\n rs6000_builtin_mask_calculate (void)\n {\n   return (((TARGET_ALTIVEC)\t\t    ? RS6000_BTM_ALTIVEC  : 0)\n@@ -2381,7 +2426,7 @@ rs6000_option_override_internal (bool global_init_p)\n   /* The default cpu requested at configure time, if any.  */\n   const char *implicit_cpu = OPTION_TARGET_CPU_DEFAULT;\n \n-  int set_masks;\n+  HOST_WIDE_INT set_masks;\n   int cpu_index;\n   int tune_index;\n   struct cl_target_option *main_target_opt\n@@ -3176,11 +3221,12 @@ rs6000_option_override_internal (bool global_init_p)\n      target_flags.  */\n   rs6000_builtin_mask = rs6000_builtin_mask_calculate ();\n   if (TARGET_DEBUG_BUILTIN || TARGET_DEBUG_TARGET)\n-    fprintf (stderr, \"new builtin mask = 0x%x%s%s%s%s\\n\", rs6000_builtin_mask,\n-\t     (rs6000_builtin_mask & RS6000_BTM_ALTIVEC) ? \", altivec\" : \"\",\n-\t     (rs6000_builtin_mask & RS6000_BTM_VSX)     ? \", vsx\"     : \"\",\n-\t     (rs6000_builtin_mask & RS6000_BTM_PAIRED)  ? \", paired\"  : \"\",\n-\t     (rs6000_builtin_mask & RS6000_BTM_SPE)     ? \", spe\" : \"\");\n+    {\n+      fprintf (stderr,\n+\t       \"new builtin mask = \" HOST_WIDE_INT_PRINT_HEX \", \",\n+\t       rs6000_builtin_mask);\n+      rs6000_print_builtin_options (stderr, 0, NULL, rs6000_builtin_mask);\n+    }\n \n   /* Initialize all of the registers.  */\n   rs6000_init_hard_regno_mode_ok (global_init_p);\n@@ -10442,7 +10488,7 @@ altivec_expand_dst_builtin (tree exp, rtx target ATTRIBUTE_UNUSED,\n \t\t\t    bool *expandedp)\n {\n   tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n-  unsigned int fcode = DECL_FUNCTION_CODE (fndecl);\n+  enum rs6000_builtins fcode = (enum rs6000_builtins) DECL_FUNCTION_CODE (fndecl);\n   tree arg0, arg1, arg2;\n   enum machine_mode mode0, mode1;\n   rtx pat, op0, op1, op2;\n@@ -10844,7 +10890,7 @@ static rtx\n paired_expand_builtin (tree exp, rtx target, bool * expandedp)\n {\n   tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n-  unsigned int fcode = DECL_FUNCTION_CODE (fndecl);\n+  enum rs6000_builtins fcode = (enum rs6000_builtins) DECL_FUNCTION_CODE (fndecl);\n   const struct builtin_description *d;\n   size_t i;\n \n@@ -10909,7 +10955,7 @@ spe_expand_builtin (tree exp, rtx target, bool *expandedp)\n {\n   tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n   tree arg1, arg0;\n-  unsigned int fcode = DECL_FUNCTION_CODE (fndecl);\n+  enum rs6000_builtins fcode = (enum rs6000_builtins) DECL_FUNCTION_CODE (fndecl);\n   enum insn_code icode;\n   enum machine_mode tmode, mode0;\n   rtx pat, op0;\n@@ -11274,7 +11320,7 @@ rs6000_invalid_builtin (enum rs6000_builtins fncode)\n {\n   size_t uns_fncode = (size_t)fncode;\n   const char *name = rs6000_builtin_info[uns_fncode].name;\n-  unsigned fnmask = rs6000_builtin_info[uns_fncode].mask;\n+  HOST_WIDE_INT fnmask = rs6000_builtin_info[uns_fncode].mask;\n \n   gcc_assert (name != NULL);\n   if ((fnmask & RS6000_BTM_CELL) != 0)\n@@ -11311,7 +11357,7 @@ rs6000_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n   size_t i;\n   rtx ret;\n   bool success;\n-  unsigned mask = rs6000_builtin_info[uns_fcode].mask;\n+  HOST_WIDE_INT mask = rs6000_builtin_info[uns_fcode].mask;\n   bool func_valid_p = ((rs6000_builtin_mask & mask) == mask);\n \n   if (TARGET_DEBUG_BUILTIN)\n@@ -11694,7 +11740,7 @@ rs6000_init_builtins (void)\n static tree\n rs6000_builtin_decl (unsigned code, bool initialize_p ATTRIBUTE_UNUSED)\n {\n-  unsigned fnmask;\n+  HOST_WIDE_INT fnmask;\n \n   if (code >= RS6000_BUILTIN_COUNT)\n     return error_mark_node;\n@@ -12566,7 +12612,7 @@ rs6000_common_init_builtins (void)\n   tree v2si_ftype_qi = NULL_TREE;\n   tree v2si_ftype_v2si_qi = NULL_TREE;\n   tree v2si_ftype_int_qi = NULL_TREE;\n-  unsigned builtin_mask = rs6000_builtin_mask;\n+  HOST_WIDE_INT builtin_mask = rs6000_builtin_mask;\n \n   if (!TARGET_PAIRED_FLOAT)\n     {\n@@ -12588,7 +12634,7 @@ rs6000_common_init_builtins (void)\n   for (i = 0; i < ARRAY_SIZE (bdesc_3arg); i++, d++)\n     {\n       tree type;\n-      unsigned mask = d->mask;\n+      HOST_WIDE_INT mask = d->mask;\n \n       if ((mask & builtin_mask) != mask)\n \t{\n@@ -12629,7 +12675,7 @@ rs6000_common_init_builtins (void)\n     {\n       enum machine_mode mode0, mode1, mode2;\n       tree type;\n-      unsigned mask = d->mask;\n+      HOST_WIDE_INT mask = d->mask;\n \n       if ((mask & builtin_mask) != mask)\n \t{\n@@ -12692,7 +12738,7 @@ rs6000_common_init_builtins (void)\n     {\n       enum machine_mode mode0, mode1;\n       tree type;\n-      unsigned mask = d->mask;\n+      HOST_WIDE_INT mask = d->mask;\n \n       if ((mask & builtin_mask) != mask)\n \t{\n@@ -25246,7 +25292,7 @@ rs6000_darwin_file_start (void)\n   {\n     const char *arg;\n     const char *name;\n-    int if_set;\n+    HOST_WIDE_INT if_set;\n   } mapping[] = {\n     { \"ppc64\", \"ppc64\", MASK_64BIT },\n     { \"970\", \"ppc970\", MASK_PPC_GPOPT | MASK_MFCRF | MASK_POWERPC64 },\n@@ -27379,7 +27425,7 @@ rs6000_final_prescan_insn (rtx insn, rtx *operand ATTRIBUTE_UNUSED,\n \n struct rs6000_opt_mask {\n   const char *name;\t\t/* option name */\n-  int mask;\t\t\t/* mask to set */\n+  HOST_WIDE_INT mask;\t\t/* mask to set */\n   bool invert;\t\t\t/* invert sense of mask */\n   bool valid_target;\t\t/* option is a target option */\n };\n@@ -27531,7 +27577,7 @@ rs6000_inner_target_options (tree args, bool attr_p)\n \t      for (i = 0; i < ARRAY_SIZE (rs6000_opt_masks); i++)\n \t\tif (strcmp (r, rs6000_opt_masks[i].name) == 0)\n \t\t  {\n-\t\t    int mask = rs6000_opt_masks[i].mask;\n+\t\t    HOST_WIDE_INT mask = rs6000_opt_masks[i].mask;\n \n \t\t    if (!rs6000_opt_masks[i].valid_target)\n \t\t      not_valid_p = true;\n@@ -27755,8 +27801,8 @@ rs6000_pragma_target_parse (tree args, tree pop_target)\n   tree prev_tree = build_target_option_node ();\n   tree cur_tree;\n   struct cl_target_option *prev_opt, *cur_opt;\n-  unsigned prev_bumask, cur_bumask, diff_bumask;\n-  int prev_flags, cur_flags, diff_flags;\n+  HOST_WIDE_INT prev_flags, cur_flags, diff_flags;\n+  HOST_WIDE_INT prev_bumask, cur_bumask, diff_bumask;\n \n   if (TARGET_DEBUG_TARGET)\n     {\n@@ -27933,38 +27979,92 @@ rs6000_function_specific_restore (struct cl_target_option *ptr)\n static void\n rs6000_function_specific_print (FILE *file, int indent,\n \t\t\t\tstruct cl_target_option *ptr)\n+{\n+  rs6000_print_isa_options (file, indent, \"Isa options set\",\n+\t\t\t    ptr->x_target_flags);\n+\n+  rs6000_print_isa_options (file, indent, \"Isa options explicit\",\n+\t\t\t    ptr->rs6000_target_flags_explicit);\n+}\n+\n+/* Helper function to print the current isa or misc options on a line.  */\n+\n+static void\n+rs6000_print_options_internal (FILE *file,\n+\t\t\t       int indent,\n+\t\t\t       const char *string,\n+\t\t\t       HOST_WIDE_INT flags,\n+\t\t\t       const char *prefix,\n+\t\t\t       const struct rs6000_opt_mask *opts,\n+\t\t\t       size_t num_elements)\n {\n   size_t i;\n-  int flags = ptr->x_target_flags;\n-  unsigned bu_mask = ptr->x_rs6000_builtin_mask;\n+  size_t start_column = 0;\n+  size_t cur_column;\n+  size_t max_column = 76;\n+  const char *comma = \"\";\n+  const char *nl = \"\\n\";\n \n-  /* Print the various mask options.  */\n-  for (i = 0; i < ARRAY_SIZE (rs6000_opt_masks); i++)\n-    if ((flags & rs6000_opt_masks[i].mask) != 0)\n-      {\n-\tflags &= ~ rs6000_opt_masks[i].mask;\n-\tfprintf (file, \"%*s-m%s%s\\n\", indent, \"\",\n-\t\t rs6000_opt_masks[i].invert ? \"no-\" : \"\",\n-\t\t rs6000_opt_masks[i].name);\n-      }\n+  if (indent)\n+    start_column += fprintf (file, \"%*s\", indent, \"\");\n \n-  /* Print the various options that are variables.  */\n-  for (i = 0; i < ARRAY_SIZE (rs6000_opt_vars); i++)\n+  if (!flags)\n     {\n-      size_t j = rs6000_opt_vars[i].target_offset;\n-      if (((signed char *) ptr)[j])\n-\tfprintf (file, \"%*s-m%s\\n\", indent, \"\",\n-\t\t rs6000_opt_vars[i].name);\n+      fprintf (stderr, DEBUG_FMT_S, string, \"<none>\");\n+      return;\n     }\n \n-  /* Print the various builtin flags.  */\n-  fprintf (file, \"%*sbuiltin mask = 0x%x\\n\", indent, \"\", bu_mask);\n-  for (i = 0; i < ARRAY_SIZE (rs6000_builtin_mask_names); i++)\n-    if ((bu_mask & rs6000_builtin_mask_names[i].mask) != 0)\n-      {\n-\tfprintf (file, \"%*s%s builtins supported\\n\", indent, \"\",\n-\t\t rs6000_builtin_mask_names[i].name);\n-      }\n+  start_column += fprintf (stderr, DEBUG_FMT_WX, string, flags);\n+\n+  /* Print the various mask options.  */\n+  cur_column = start_column;\n+  for (i = 0; i < num_elements; i++)\n+    {\n+      if ((flags & opts[i].mask) != 0)\n+\t{\n+\t  const char *no_str = rs6000_opt_masks[i].invert ? \"no-\" : \"\";\n+\t  size_t len = (strlen (comma)\n+\t\t\t+ strlen (prefix)\n+\t\t\t+ strlen (no_str)\n+\t\t\t+ strlen (rs6000_opt_masks[i].name));\n+\n+\t  cur_column += len;\n+\t  if (cur_column > max_column)\n+\t    {\n+\t      fprintf (stderr, \", \\\\\\n%*s\", (int)start_column, \"\");\n+\t      cur_column = start_column + len;\n+\t      comma = \"\";\n+\t      nl = \"\\n\\n\";\n+\t    }\n+\n+\t  fprintf (file, \"%s%s%s%s\", comma, prefix, no_str,\n+\t\t   rs6000_opt_masks[i].name);\n+\t  flags &= ~ opts[i].mask;\n+\t  comma = \", \";\n+\t}\n+    }\n+\n+  fputs (nl, file);\n+}\n+\n+/* Helper function to print the current isa options on a line.  */\n+\n+static void\n+rs6000_print_isa_options (FILE *file, int indent, const char *string,\n+\t\t\t  HOST_WIDE_INT flags)\n+{\n+  rs6000_print_options_internal (file, indent, string, flags, \"-m\",\n+\t\t\t\t &rs6000_opt_masks[0],\n+\t\t\t\t ARRAY_SIZE (rs6000_opt_masks));\n+}\n+\n+static void\n+rs6000_print_builtin_options (FILE *file, int indent, const char *string,\n+\t\t\t      HOST_WIDE_INT flags)\n+{\n+  rs6000_print_options_internal (file, indent, string, flags, \"\",\n+\t\t\t\t &rs6000_builtin_mask_names[0],\n+\t\t\t\t ARRAY_SIZE (rs6000_builtin_mask_names));\n }\n \n \f"}, {"sha": "58b7694382c8cd073089b7e7e82fc78d1150c9e1", "filename": "gcc/config/rs6000/rs6000.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b85aed950ddb30e359dbb0a7dfc7d3b6a51249ba/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b85aed950ddb30e359dbb0a7dfc7d3b6a51249ba/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.opt?ref=b85aed950ddb30e359dbb0a7dfc7d3b6a51249ba", "patch": "@@ -80,7 +80,7 @@ unsigned int rs6000_recip_control\n \n ;; Mask of what builtin functions are allowed\n TargetVariable\n-unsigned int rs6000_builtin_mask\n+HOST_WIDE_INT rs6000_builtin_mask\n \n ;; Debug flags\n TargetVariable"}]}