{"sha": "335dde2981e5680619d25bf934527c9549959569", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzM1ZGRlMjk4MWU1NjgwNjE5ZDI1YmY5MzQ1MjdjOTU0OTk1OTU2OQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-26T15:35:49Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-26T15:35:49Z"}, "message": "[multiple changes]\n\n2015-10-26  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_ch9.adb (Analyze_Single_Protected_Declaration): The anonymous\n\tobject no longer comes from source.\n\t(Analyze_Single_Task_Declaration): The anonymous object no longer\n\tcomes from source.\n\t* sem_prag.adb (Analyze_Pragma): The analysis of pragma SPARK_Mode\n\tnow recognizes the internal anonymous object created for a single\n\tconcurren type as a valid context.\n\t(Find_Related_Context): The internal anonymous object created for a\n\tsingle concurrent type is now a valid context.\n\t(Find_Related_Declaration_Or_Body): The internal anonymous object\n\tcreated for a single concurrent type is now a valid context.\n\n2015-10-26  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_util.adb (Inherit_Rep_Item_Chain): Another another guard\n\tto prevent circularities in the rep_item_chain of the full view\n\tof a type extension in a child unit that extends a private type\n\tfrom the parent.\n\nFrom-SVN: r229374", "tree": {"sha": "18e4936eb4e3db3f0c7f204fc1c3366021022f98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18e4936eb4e3db3f0c7f204fc1c3366021022f98"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/335dde2981e5680619d25bf934527c9549959569", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/335dde2981e5680619d25bf934527c9549959569", "html_url": "https://github.com/Rust-GCC/gccrs/commit/335dde2981e5680619d25bf934527c9549959569", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/335dde2981e5680619d25bf934527c9549959569/comments", "author": null, "committer": null, "parents": [{"sha": "378dc6ca34677edf03df66aee0581fe92eb1fb06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/378dc6ca34677edf03df66aee0581fe92eb1fb06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/378dc6ca34677edf03df66aee0581fe92eb1fb06"}], "stats": {"total": 99, "additions": 73, "deletions": 26}, "files": [{"sha": "86893ba18a1d9124fe30ec59afeea8679b83b501", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/335dde2981e5680619d25bf934527c9549959569/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/335dde2981e5680619d25bf934527c9549959569/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=335dde2981e5680619d25bf934527c9549959569", "patch": "@@ -1,3 +1,24 @@\n+2015-10-26  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_ch9.adb (Analyze_Single_Protected_Declaration): The anonymous\n+\tobject no longer comes from source.\n+\t(Analyze_Single_Task_Declaration): The anonymous object no longer\n+\tcomes from source.\n+\t* sem_prag.adb (Analyze_Pragma): The analysis of pragma SPARK_Mode\n+\tnow recognizes the internal anonymous object created for a single\n+\tconcurren type as a valid context.\n+\t(Find_Related_Context): The internal anonymous object created for a\n+\tsingle concurrent type is now a valid context.\n+\t(Find_Related_Declaration_Or_Body): The internal anonymous object\n+\tcreated for a single concurrent type is now a valid context.\n+\n+2015-10-26  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_util.adb (Inherit_Rep_Item_Chain): Another another guard\n+\tto prevent circularities in the rep_item_chain of the full view\n+\tof a type extension in a child unit that extends a private type\n+\tfrom the parent.\n+\n 2015-10-26  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* atree.ads, atree.adb (Ekind_In): New 10 and 11 parameter versions."}, {"sha": "47cd3c663bb1ef9d21404b1aee267c527a0b8047", "filename": "gcc/ada/sem_ch9.adb", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/335dde2981e5680619d25bf934527c9549959569/gcc%2Fada%2Fsem_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/335dde2981e5680619d25bf934527c9549959569/gcc%2Fada%2Fsem_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch9.adb?ref=335dde2981e5680619d25bf934527c9549959569", "patch": "@@ -2665,11 +2665,6 @@ package body Sem_Ch9 is\n           Defining_Identifier => Obj_Id,\n           Object_Definition   => New_Occurrence_Of (Typ, Loc));\n \n-      --  Relocate the aspects that appear on the original single protected\n-      --  declaration to the object as the object is the visible name.\n-\n-      Set_Comes_From_Source (Obj_Decl, True);\n-\n       Insert_After (N, Obj_Decl);\n       Mark_Rewrite_Insertion (Obj_Decl);\n \n@@ -2756,11 +2751,6 @@ package body Sem_Ch9 is\n           Defining_Identifier => Obj_Id,\n           Object_Definition   => New_Occurrence_Of (Typ, Loc));\n \n-      --  Relocate the aspects that appear on the original single protected\n-      --  declaration to the object as the object is the visible name.\n-\n-      Set_Comes_From_Source (Obj_Decl, True);\n-\n       Insert_After (N, Obj_Decl);\n       Mark_Rewrite_Insertion (Obj_Decl);\n "}, {"sha": "a8998cc78cf32c478cca0e4c7e7472b72544b15f", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 33, "deletions": 16, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/335dde2981e5680619d25bf934527c9549959569/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/335dde2981e5680619d25bf934527c9549959569/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=335dde2981e5680619d25bf934527c9549959569", "patch": "@@ -20543,6 +20543,20 @@ package body Sem_Prag is\n                      Process_Overloadable (Stmt);\n                      return;\n \n+                  --  The pragma applies to the anonymous object created for a\n+                  --  single concurrent type.\n+\n+                  --    protected type Anon_Prot_Typ ...;\n+                  --    Obj : Anon_Prot_Typ;\n+                  --    pragma SPARK_Mode ...;\n+\n+                  elsif Nkind (Stmt) = N_Object_Declaration\n+                    and then Is_Single_Concurrent_Object\n+                               (Defining_Entity (Stmt))\n+                  then\n+                     Process_Overloadable (Stmt);\n+                     return;\n+\n                   --  Skip internally generated code\n \n                   elsif not Comes_From_Source (Stmt) then\n@@ -20567,20 +20581,6 @@ package body Sem_Prag is\n                      Process_Overloadable (Stmt);\n                      return;\n \n-                  --  The pragma applies to the anonymous object created for a\n-                  --  single concurrent type.\n-\n-                  --    protected type Anon_Prot_Typ ...;\n-                  --    Obj : Anon_Prot_Typ;\n-                  --    pragma SPARK_Mode ...;\n-\n-                  elsif Nkind (Stmt) = N_Object_Declaration\n-                    and then Is_Single_Concurrent_Object\n-                               (Defining_Entity (Stmt))\n-                  then\n-                     Process_Overloadable (Stmt);\n-                     return;\n-\n                   --  Otherwise the pragma does not apply to a legal construct\n                   --  or it does not appear at the top of a declarative or a\n                   --  statement list. Issue an error and stop the analysis.\n@@ -26697,7 +26697,15 @@ package body Sem_Prag is\n          --  Skip internally generated code\n \n          elsif not Comes_From_Source (Stmt) then\n-            null;\n+\n+            --  The anonymous object created for a single concurrent type is a\n+            --  suitable context.\n+\n+            if Nkind (Stmt) = N_Object_Declaration\n+              and then Is_Single_Concurrent_Object (Defining_Entity (Stmt))\n+            then\n+               return Stmt;\n+            end if;\n \n          --  Return the current source construct\n \n@@ -26800,7 +26808,16 @@ package body Sem_Prag is\n          --  Skip internally generated code\n \n          elsif not Comes_From_Source (Stmt) then\n-            if Nkind (Stmt) = N_Subprogram_Declaration then\n+\n+            --  The anonymous object created for a single concurrent type is a\n+            --  suitable context.\n+\n+            if Nkind (Stmt) = N_Object_Declaration\n+              and then Is_Single_Concurrent_Object (Defining_Entity (Stmt))\n+            then\n+               return Stmt;\n+\n+            elsif Nkind (Stmt) = N_Subprogram_Declaration then\n \n                --  The subprogram declaration is an internally generated spec\n                --  for an expression function."}, {"sha": "8e33f4c403630cd8b2a4a3e1bd4460c0a289e741", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/335dde2981e5680619d25bf934527c9549959569/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/335dde2981e5680619d25bf934527c9549959569/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=335dde2981e5680619d25bf934527c9549959569", "patch": "@@ -10320,6 +10320,25 @@ package body Sem_Util is\n          Item := Next_Rep_Item (Item);\n       end loop;\n \n+      Item := First_Rep_Item (From_Typ);\n+\n+      --  Additional check when both parent and current type have rep.\n+      --  items, to prevent circularities when the derivation completes\n+      --  a private declaration and inherits from both views of the parent.\n+      --  There may be a remaining problem with the proper ordering of\n+      --  attribute specifications and aspects on the chains of the four\n+      --  entities involved. ???\n+\n+      if Present (Item) and then Present (From_Item) then\n+         while Present (Item) loop\n+            if Item = First_Rep_Item (Typ) then\n+               return;\n+            end if;\n+\n+            Item := Next_Rep_Item (Item);\n+         end loop;\n+      end if;\n+\n       --  When the destination type has a rep item chain, the chain of the\n       --  source type is appended to it.\n "}]}