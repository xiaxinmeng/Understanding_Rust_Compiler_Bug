{"sha": "ec86c71f91c119acb6bbca1729be81bcb9ea8add", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWM4NmM3MWY5MWMxMTlhY2I2YmJjYTE3MjliZTgxYmNiOWVhOGFkZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2003-05-13T16:56:00Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2003-05-13T16:56:00Z"}, "message": "update comments\n\nFrom-SVN: r66764", "tree": {"sha": "81e3a7ef595b2272362eee034653a23ca60176ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81e3a7ef595b2272362eee034653a23ca60176ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec86c71f91c119acb6bbca1729be81bcb9ea8add", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec86c71f91c119acb6bbca1729be81bcb9ea8add", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec86c71f91c119acb6bbca1729be81bcb9ea8add", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec86c71f91c119acb6bbca1729be81bcb9ea8add/comments", "author": null, "committer": null, "parents": [{"sha": "3a0d67cf827c8c23642061ac3138b343679bf6af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a0d67cf827c8c23642061ac3138b343679bf6af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a0d67cf827c8c23642061ac3138b343679bf6af"}], "stats": {"total": 14, "additions": 3, "deletions": 11}, "files": [{"sha": "5f6ee65eaadd97d68634aa25755123d0b13330b9", "filename": "gcc/tree.def", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec86c71f91c119acb6bbca1729be81bcb9ea8add/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec86c71f91c119acb6bbca1729be81bcb9ea8add/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=ec86c71f91c119acb6bbca1729be81bcb9ea8add", "patch": "@@ -31,7 +31,8 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n    '<' for codes for comparison expressions.\n    '1' for codes for unary arithmetic expressions.\n    '2' for codes for binary arithmetic expressions.\n-   's' for codes for expressions with inherent side effects.\n+   's' for codes for \"statement\" expressions, which have side-effects,\n+       but usually no interesting value.\n    'e' for codes for other kinds of expressions.  */\n \n /* For `r', `e', `<', `1', `2', and `s' nodes, which use struct\n@@ -780,16 +781,7 @@ DEFTREECODE (TRY_CATCH_EXPR, \"try_catch_expr\", 'e', 2)\n \n /* Evaluate the first operand.\n    The second operand is a cleanup expression which is evaluated\n-   before an exit (normal, exception, or jump out) from this expression.\n-\n-   Like a CLEANUP_POINT_EXPR/WITH_CLEANUP_EXPR combination, but those\n-   always copy the cleanup expression where needed.  In contrast,\n-   TRY_FINALLY_EXPR generates a jump to a cleanup subroutine.\n-   (At least conceptually; the optimizer could inline the cleanup\n-   subroutine in the same way it could inline normal subroutines.)\n-   TRY_FINALLY_EXPR should be used when the cleanup is actual statements\n-   in the source of the current function (which people might want to\n-   set breakpoints in).  */\n+   on any exit (normal, exception, or jump out) from this expression.  */\n DEFTREECODE (TRY_FINALLY_EXPR, \"try_finally\", 'e', 2)\n \n /* Used internally for cleanups in the implementation of TRY_FINALLY_EXPR."}]}