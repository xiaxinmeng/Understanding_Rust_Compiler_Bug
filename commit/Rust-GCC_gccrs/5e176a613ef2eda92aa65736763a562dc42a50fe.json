{"sha": "5e176a613ef2eda92aa65736763a562dc42a50fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWUxNzZhNjEzZWYyZWRhOTJhYTY1NzM2NzYzYTU2MmRjNDJhNTBmZQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-08-15T08:32:07Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-08-15T08:32:07Z"}, "message": "[AArch64] Add more unpredicated MOVPRFX alternatives\n\nFABD and some immediate instructions were missing MOVPRFX alternatives.\nThis is tested by the ACLE patches but is really an independent improvement.\n\n2019-08-15  Richard Sandiford  <richard.sandiford@arm.com>\n\t    Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n\ngcc/\n\t* config/aarch64/aarch64-sve.md (add<SVE_I:mode>3, sub<SVE_I:mode>3)\n\t(<LOGICAL:optab><SVE_I:mode>3, *add<SVE_F:mode>3, *mul<SVE_F:mode>3)\n\t(*fabd<SVE_F:mode>3): Add more MOVPRFX alternatives.\n\nCo-Authored-By: Kugan Vivekanandarajah <kuganv@linaro.org>\n\nFrom-SVN: r274513", "tree": {"sha": "a1cbe89c45c0098a14eb034f52ef38f64c188409", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1cbe89c45c0098a14eb034f52ef38f64c188409"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e176a613ef2eda92aa65736763a562dc42a50fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e176a613ef2eda92aa65736763a562dc42a50fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e176a613ef2eda92aa65736763a562dc42a50fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e176a613ef2eda92aa65736763a562dc42a50fe/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7d1f24018b04c13134bc47619fb8aaa390b01754", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d1f24018b04c13134bc47619fb8aaa390b01754", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d1f24018b04c13134bc47619fb8aaa390b01754"}], "stats": {"total": 78, "additions": 51, "deletions": 27}, "files": [{"sha": "6bfbd9976df8662ae8d8d62d3c0f38ab3427aeef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e176a613ef2eda92aa65736763a562dc42a50fe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e176a613ef2eda92aa65736763a562dc42a50fe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5e176a613ef2eda92aa65736763a562dc42a50fe", "patch": "@@ -1,3 +1,10 @@\n+2019-08-15  Richard Sandiford  <richard.sandiford@arm.com>\n+\t    Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n+\n+\t* config/aarch64/aarch64-sve.md (add<SVE_I:mode>3, sub<SVE_I:mode>3)\n+\t(<LOGICAL:optab><SVE_I:mode>3, *add<SVE_F:mode>3, *mul<SVE_F:mode>3)\n+\t(*fabd<SVE_F:mode>3): Add more MOVPRFX alternatives.\n+\n 2019-08-15  Richard Sandiford  <richard.sandiford@arm.com>\n \t    Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n "}, {"sha": "c4e46025903d310947cff82b521b496d0c034f1a", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 44, "deletions": 27, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e176a613ef2eda92aa65736763a562dc42a50fe/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e176a613ef2eda92aa65736763a562dc42a50fe/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=5e176a613ef2eda92aa65736763a562dc42a50fe", "patch": "@@ -1937,16 +1937,19 @@\n ;; -------------------------------------------------------------------------\n \n (define_insn \"add<mode>3\"\n-  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, w, w, w\")\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, w, w, ?w, ?w, w\")\n \t(plus:SVE_I\n-\t  (match_operand:SVE_I 1 \"register_operand\" \"%0, 0, 0, w\")\n-\t  (match_operand:SVE_I 2 \"aarch64_sve_add_operand\" \"vsa, vsn, vsi, w\")))]\n+\t  (match_operand:SVE_I 1 \"register_operand\" \"%0, 0, 0, w, w, w\")\n+\t  (match_operand:SVE_I 2 \"aarch64_sve_add_operand\" \"vsa, vsn, vsi, vsa, vsn, w\")))]\n   \"TARGET_SVE\"\n   \"@\n    add\\t%0.<Vetype>, %0.<Vetype>, #%D2\n    sub\\t%0.<Vetype>, %0.<Vetype>, #%N2\n    * return aarch64_output_sve_inc_dec_immediate (\\\"%0.<Vetype>\\\", operands[2]);\n+   movprfx\\t%0, %1\\;add\\t%0.<Vetype>, %0.<Vetype>, #%D2\n+   movprfx\\t%0, %1\\;sub\\t%0.<Vetype>, %0.<Vetype>, #%N2\n    add\\t%0.<Vetype>, %1.<Vetype>, %2.<Vetype>\"\n+  [(set_attr \"movprfx\" \"*,*,*,yes,yes,*\")]\n )\n \n ;; Merging forms are handled through SVE_INT_BINARY.\n@@ -1960,14 +1963,16 @@\n ;; -------------------------------------------------------------------------\n \n (define_insn \"sub<mode>3\"\n-  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, w\")\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, w, ?&w\")\n \t(minus:SVE_I\n-\t  (match_operand:SVE_I 1 \"aarch64_sve_arith_operand\" \"w, vsa\")\n-\t  (match_operand:SVE_I 2 \"register_operand\" \"w, 0\")))]\n+\t  (match_operand:SVE_I 1 \"aarch64_sve_arith_operand\" \"w, vsa, vsa\")\n+\t  (match_operand:SVE_I 2 \"register_operand\" \"w, 0, w\")))]\n   \"TARGET_SVE\"\n   \"@\n    sub\\t%0.<Vetype>, %1.<Vetype>, %2.<Vetype>\n-   subr\\t%0.<Vetype>, %0.<Vetype>, #%D1\"\n+   subr\\t%0.<Vetype>, %0.<Vetype>, #%D1\n+   movprfx\\t%0, %2\\;subr\\t%0.<Vetype>, %0.<Vetype>, #%D1\"\n+  [(set_attr \"movprfx\" \"*,*,yes\")]\n )\n \n ;; Merging forms are handled through SVE_INT_BINARY.\n@@ -2320,14 +2325,16 @@\n \n ;; Unpredicated integer binary logical operations.\n (define_insn \"<optab><mode>3\"\n-  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, w\")\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, ?w, w\")\n \t(LOGICAL:SVE_I\n-\t  (match_operand:SVE_I 1 \"register_operand\" \"%0, w\")\n-\t  (match_operand:SVE_I 2 \"aarch64_sve_logical_operand\" \"vsl, w\")))]\n+\t  (match_operand:SVE_I 1 \"register_operand\" \"%0, w, w\")\n+\t  (match_operand:SVE_I 2 \"aarch64_sve_logical_operand\" \"vsl, vsl, w\")))]\n   \"TARGET_SVE\"\n   \"@\n    <logical>\\t%0.<Vetype>, %0.<Vetype>, #%C2\n+   movprfx\\t%0, %1\\;<logical>\\t%0.<Vetype>, %0.<Vetype>, #%C2\n    <logical>\\t%0.d, %1.d, %2.d\"\n+  [(set_attr \"movprfx\" \"*,yes,*\")]\n )\n \n ;; Merging forms are handled through SVE_INT_BINARY.\n@@ -2773,23 +2780,27 @@\n \n ;; Predicated floating-point addition.\n (define_insn_and_split \"*add<mode>3\"\n-  [(set (match_operand:SVE_F 0 \"register_operand\" \"=w, w, w\")\n+  [(set (match_operand:SVE_F 0 \"register_operand\" \"=w, w, w, ?&w, ?&w\")\n \t(unspec:SVE_F\n-\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl\")\n-\t   (match_operand:SI 4 \"aarch64_sve_gp_strictness\" \"i, i, Z\")\n-\t   (match_operand:SVE_F 2 \"register_operand\" \"%0, 0, w\")\n-\t   (match_operand:SVE_F 3 \"aarch64_sve_float_arith_with_sub_operand\" \"vsA, vsN, w\")]\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl, Upl, Upl\")\n+\t   (match_operand:SI 4 \"aarch64_sve_gp_strictness\" \"i, i, Z, i, i\")\n+\t   (match_operand:SVE_F 2 \"register_operand\" \"%0, 0, w, w, w\")\n+\t   (match_operand:SVE_F 3 \"aarch64_sve_float_arith_with_sub_operand\" \"vsA, vsN, w, vsA, vsN\")]\n \t  UNSPEC_COND_FADD))]\n   \"TARGET_SVE\"\n   \"@\n    fadd\\t%0.<Vetype>, %1/m, %0.<Vetype>, #%3\n    fsub\\t%0.<Vetype>, %1/m, %0.<Vetype>, #%N3\n-   #\"\n+   #\n+   movprfx\\t%0, %2\\;fadd\\t%0.<Vetype>, %1/m, %0.<Vetype>, #%3\n+   movprfx\\t%0, %2\\;fsub\\t%0.<Vetype>, %1/m, %0.<Vetype>, #%N3\"\n   ; Split the unpredicated form after reload, so that we don't have\n   ; the unnecessary PTRUE.\n   \"&& reload_completed\n    && register_operand (operands[3], <MODE>mode)\"\n   [(set (match_dup 0) (plus:SVE_F (match_dup 2) (match_dup 3)))]\n+  \"\"\n+  [(set_attr \"movprfx\" \"*,*,*,yes,yes\")]\n )\n \n ;; Predicated floating-point addition of a constant, merging with the\n@@ -2972,23 +2983,26 @@\n \n ;; Predicated floating-point absolute difference.\n (define_insn_and_rewrite \"*fabd<mode>3\"\n-  [(set (match_operand:SVE_F 0 \"register_operand\" \"=w\")\n+  [(set (match_operand:SVE_F 0 \"register_operand\" \"=w, ?&w\")\n \t(unspec:SVE_F\n-\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl\")\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n \t   (match_operand:SI 4 \"aarch64_sve_gp_strictness\")\n \t   (unspec:SVE_F\n \t     [(match_operand 5)\n \t      (match_operand:SI 6 \"aarch64_sve_gp_strictness\")\n-\t      (match_operand:SVE_F 2 \"register_operand\" \"0\")\n-\t      (match_operand:SVE_F 3 \"register_operand\" \"w\")]\n+\t      (match_operand:SVE_F 2 \"register_operand\" \"%0, w\")\n+\t      (match_operand:SVE_F 3 \"register_operand\" \"w, w\")]\n \t     UNSPEC_COND_FSUB)]\n \t  UNSPEC_COND_FABS))]\n   \"TARGET_SVE && aarch64_sve_pred_dominates_p (&operands[5], operands[1])\"\n-  \"fabd\\t%0.<Vetype>, %1/m, %2.<Vetype>, %3.<Vetype>\"\n+  \"@\n+   fabd\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\n+   movprfx\\t%0, %2\\;fabd\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\"\n   \"&& !rtx_equal_p (operands[1], operands[5])\"\n   {\n     operands[5] = copy_rtx (operands[1]);\n   }\n+  [(set_attr \"movprfx\" \"*,yes\")]\n )\n \n ;; Predicated floating-point absolute difference, merging with the first\n@@ -3117,22 +3131,25 @@\n \n ;; Predicated floating-point multiplication.\n (define_insn_and_split \"*mul<mode>3\"\n-  [(set (match_operand:SVE_F 0 \"register_operand\" \"=w, w\")\n+  [(set (match_operand:SVE_F 0 \"register_operand\" \"=w, w, ?&w\")\n \t(unspec:SVE_F\n-\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n-\t   (match_operand:SI 4 \"aarch64_sve_gp_strictness\" \"i, Z\")\n-\t   (match_operand:SVE_F 2 \"register_operand\" \"%0, w\")\n-\t   (match_operand:SVE_F 3 \"aarch64_sve_float_mul_operand\" \"vsM, w\")]\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl\")\n+\t   (match_operand:SI 4 \"aarch64_sve_gp_strictness\" \"i, Z, i\")\n+\t   (match_operand:SVE_F 2 \"register_operand\" \"%0, w, 0\")\n+\t   (match_operand:SVE_F 3 \"aarch64_sve_float_mul_operand\" \"vsM, w, vsM\")]\n \t  UNSPEC_COND_FMUL))]\n   \"TARGET_SVE\"\n   \"@\n    fmul\\t%0.<Vetype>, %1/m, %0.<Vetype>, #%3\n-   #\"\n+   #\n+   movprfx\\t%0, %2\\;fmul\\t%0.<Vetype>, %1/m, %0.<Vetype>, #%3\"\n   ; Split the unpredicated form after reload, so that we don't have\n   ; the unnecessary PTRUE.\n   \"&& reload_completed\n    && register_operand (operands[3], <MODE>mode)\"\n   [(set (match_dup 0) (mult:SVE_F (match_dup 2) (match_dup 3)))]\n+  \"\"\n+  [(set_attr \"movprfx\" \"*,*,yes\")]\n )\n \n ;; Merging forms are handled through SVE_COND_FP_BINARY and"}]}