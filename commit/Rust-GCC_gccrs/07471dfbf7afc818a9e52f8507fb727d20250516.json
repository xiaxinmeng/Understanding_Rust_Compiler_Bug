{"sha": "07471dfbf7afc818a9e52f8507fb727d20250516", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDc0NzFkZmJmN2FmYzgxOGE5ZTUyZjg1MDdmYjcyN2QyMDI1MDUxNg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2006-05-31T20:03:12Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2006-05-31T20:03:12Z"}, "message": "re PR c++/27801 (ICE in invert_truthvalue with template)\n\n\tPR c++/27801\n\t* call.c (perform_implicit_conversion): Do not actually perform\n\tconversions in templates.\n\tPR c++/26496\n\t* call.c (resolve_args): Check for invalid uses of bound\n\tnon-static member functions.\n\t* init.c (build_offset_ref): Return error_mark_node for errors.\n\tPR c++/27385\n\t* decl.c (reshape_init): Robustify.\n\t(reshape_init_array_1): Likewise.\n\tPR c++/27801\n\t* g++.dg/template/cond6.C: New test.\n\tPR c++/26496\n\t* g++.dg/template/crash51.C: New test.\n\t* g++.old-deja/g++.mike/net36.C: Tweak error markers.\n\tPR c++/27385\n\t* g++.dg/init/array20.C: New test.\n\nFrom-SVN: r114278", "tree": {"sha": "9348fbb31f346a3db6c887391af06665ca26393d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9348fbb31f346a3db6c887391af06665ca26393d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07471dfbf7afc818a9e52f8507fb727d20250516", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07471dfbf7afc818a9e52f8507fb727d20250516", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07471dfbf7afc818a9e52f8507fb727d20250516", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07471dfbf7afc818a9e52f8507fb727d20250516/comments", "author": null, "committer": null, "parents": [{"sha": "69037dd991238a58d17ee46dc7c82cae845035ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69037dd991238a58d17ee46dc7c82cae845035ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69037dd991238a58d17ee46dc7c82cae845035ff"}], "stats": {"total": 67, "additions": 65, "deletions": 2}, "files": [{"sha": "eaa96a5a7722c6e764101a6dfb4a473f3df0b253", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07471dfbf7afc818a9e52f8507fb727d20250516/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07471dfbf7afc818a9e52f8507fb727d20250516/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=07471dfbf7afc818a9e52f8507fb727d20250516", "patch": "@@ -1,3 +1,18 @@\n+2006-05-31  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/27801\n+\t* call.c (perform_implicit_conversion): Do not actually perform\n+\tconversions in templates.\n+\n+\tPR c++/26496\n+\t* call.c (resolve_args): Check for invalid uses of bound\n+\tnon-static member functions.\n+\t* init.c (build_offset_ref): Return error_mark_node for errors.\n+\n+\tPR c++/27385\n+\t* decl.c (reshape_init): Robustify.\n+\t(reshape_init_array_1): Likewise.\n+\n 2006-05-30  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/27808"}, {"sha": "2167101e2f94d12af9fcd28944cad1401f5c01f5", "filename": "gcc/cp/call.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07471dfbf7afc818a9e52f8507fb727d20250516/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07471dfbf7afc818a9e52f8507fb727d20250516/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=07471dfbf7afc818a9e52f8507fb727d20250516", "patch": "@@ -2704,6 +2704,8 @@ resolve_args (tree args)\n \t  error (\"invalid use of void expression\");\n \t  return error_mark_node;\n \t}\n+      else if (invalid_nonstatic_memfn_p (arg))\n+\treturn error_mark_node;\n     }\n   return args;\n }\n@@ -6388,6 +6390,14 @@ perform_implicit_conversion (tree type, tree expr)\n       error (\"could not convert %qE to %qT\", expr, type);\n       expr = error_mark_node;\n     }\n+  else if (processing_template_decl)\n+    {\n+      /* In a template, we are only concerned about determining the\n+\t type of non-dependent expressions, so we do not have to\n+\t perform the actual conversion.  */\n+      if (TREE_TYPE (expr) != type)\n+\texpr = build_nop (type, expr);\n+    }\n   else\n     expr = convert_like (conv, expr);\n "}, {"sha": "bccb438a29bd60cbe7ec57d26ac4d6421c8d99dd", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07471dfbf7afc818a9e52f8507fb727d20250516/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07471dfbf7afc818a9e52f8507fb727d20250516/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=07471dfbf7afc818a9e52f8507fb727d20250516", "patch": "@@ -4352,6 +4352,8 @@ reshape_init_array_1 (tree elt_type, tree max_index, reshape_iter *d)\n \t}\n \n       elt_init = reshape_init_r (elt_type, d, /*first_initializer_p=*/false);\n+      if (elt_init == error_mark_node)\n+\treturn error_mark_node;\n       CONSTRUCTOR_APPEND_ELT (CONSTRUCTOR_ELTS (new_init), NULL_TREE, elt_init);\n     }\n \n@@ -4630,6 +4632,8 @@ reshape_init (tree type, tree init)\n   d.end = d.cur + VEC_length (constructor_elt, v);\n \n   new_init = reshape_init_r (type, &d, true);\n+  if (new_init == error_mark_node)\n+    return error_mark_node;\n \n   /* Make sure all the element of the constructor were used. Otherwise,\n      issue an error about exceeding initializers.  */"}, {"sha": "99d5d99080502d736f73e6505d7b3af4b0d5dc27", "filename": "gcc/cp/init.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07471dfbf7afc818a9e52f8507fb727d20250516/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07471dfbf7afc818a9e52f8507fb727d20250516/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=07471dfbf7afc818a9e52f8507fb727d20250516", "patch": "@@ -1426,7 +1426,7 @@ build_offset_ref (tree type, tree member, bool address_p)\n \t    }\n \t  error (\"invalid use of non-static member function %qD\",\n \t\t TREE_OPERAND (member, 1));\n-\t  return member;\n+\t  return error_mark_node;\n \t}\n       else if (TREE_CODE (member) == FIELD_DECL)\n \t{"}, {"sha": "7277f60936cf9e9ddba2a97a46d30653a622fecf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07471dfbf7afc818a9e52f8507fb727d20250516/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07471dfbf7afc818a9e52f8507fb727d20250516/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=07471dfbf7afc818a9e52f8507fb727d20250516", "patch": "@@ -1,3 +1,15 @@\n+2006-05-31  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/27801\n+\t* g++.dg/template/cond6.C: New test.\n+\n+\tPR c++/26496\n+\t* g++.dg/template/crash51.C: New test.\n+\t* g++.old-deja/g++.mike/net36.C: Tweak error markers.\n+\n+\tPR c++/27385\n+\t* g++.dg/init/array20.C: New test.\n+\n 2006-05-31  Roger Sayle  <roger@eyesopen.com>\n \n \t* gcc.dg/builtins-54.c: New test case."}, {"sha": "06a167596e68ef05c820ac41a1acfc07c04691e6", "filename": "gcc/testsuite/g++.dg/init/array20.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07471dfbf7afc818a9e52f8507fb727d20250516/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07471dfbf7afc818a9e52f8507fb727d20250516/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray20.C?ref=07471dfbf7afc818a9e52f8507fb727d20250516", "patch": "@@ -0,0 +1,5 @@\n+// PR c++/27385\n+\n+struct A {};\n+A a[] = { 0 };  // { dg-error \"initializer\" }\n+"}, {"sha": "e4cede35b176cc89b15a80e2a4e3e078f43a8bfe", "filename": "gcc/testsuite/g++.dg/template/cond6.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07471dfbf7afc818a9e52f8507fb727d20250516/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcond6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07471dfbf7afc818a9e52f8507fb727d20250516/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcond6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcond6.C?ref=07471dfbf7afc818a9e52f8507fb727d20250516", "patch": "@@ -0,0 +1,6 @@\n+// PR c++/27801\n+\n+template<int> int foo(int i)\n+{\n+  return !( (1 && i) ? 0 : 1 );\n+}"}, {"sha": "8c2553d1034d0cd9b65ebcf3fbc0ad05895e3e9d", "filename": "gcc/testsuite/g++.dg/template/crash51.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07471dfbf7afc818a9e52f8507fb727d20250516/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash51.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07471dfbf7afc818a9e52f8507fb727d20250516/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash51.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash51.C?ref=07471dfbf7afc818a9e52f8507fb727d20250516", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/26496\n+\n+template< typename _Generator> int generate_n(_Generator __gen);\n+struct Distribution { };\n+typedef double (Distribution::* Pstd_mem)();\n+int main(void)\n+{\n+  Distribution* rng;\n+  Pstd_mem ptr;\n+  generate_n(rng->*ptr); // { dg-error \"non-static member\" } \n+}"}, {"sha": "3ffa60e37a28dc3da61059678208399af8fa0779", "filename": "gcc/testsuite/g++.old-deja/g++.mike/net36.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07471dfbf7afc818a9e52f8507fb727d20250516/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fnet36.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07471dfbf7afc818a9e52f8507fb727d20250516/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fnet36.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fnet36.C?ref=07471dfbf7afc818a9e52f8507fb727d20250516", "patch": "@@ -11,7 +11,7 @@ typedef void (A::*handler) (X*);\n \n class B {\n public:\n-  void setHandler(handler); // { dg-error \"candidate\" }\n+  void setHandler(handler);\n };\n \n void f(B* b) {"}]}