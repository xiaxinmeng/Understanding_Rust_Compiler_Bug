{"sha": "1107c4b3ddb1932630ca4372701cf246192cf82e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTEwN2M0YjNkZGIxOTMyNjMwY2E0MzcyNzAxY2YyNDYxOTJjZjgyZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1998-03-20T11:43:36Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-03-20T11:43:36Z"}, "message": "decl.c (make_implicit_typename): Rewrite removed code.\n\n\t* decl.c (make_implicit_typename): Rewrite removed code.\n\t(make_typename_type): Call it if the type we look up comes from\n\ta base that uses template parms.\n\nFrom-SVN: r18725", "tree": {"sha": "b566551513cd449f3641f3d99bb1b06b6f48c327", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b566551513cd449f3641f3d99bb1b06b6f48c327"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1107c4b3ddb1932630ca4372701cf246192cf82e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1107c4b3ddb1932630ca4372701cf246192cf82e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1107c4b3ddb1932630ca4372701cf246192cf82e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1107c4b3ddb1932630ca4372701cf246192cf82e/comments", "author": null, "committer": null, "parents": [{"sha": "e6f1275f861e69c54e4812870d5c05c8c72df757", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6f1275f861e69c54e4812870d5c05c8c72df757", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6f1275f861e69c54e4812870d5c05c8c72df757"}], "stats": {"total": 44, "additions": 42, "deletions": 2}, "files": [{"sha": "f8862c0644af1922c5926f13cee7f5ac25b7a52f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1107c4b3ddb1932630ca4372701cf246192cf82e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1107c4b3ddb1932630ca4372701cf246192cf82e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1107c4b3ddb1932630ca4372701cf246192cf82e", "patch": "@@ -1,5 +1,9 @@\n Fri Mar 20 10:42:07 1998  Jason Merrill  <jason@yorick.cygnus.com>\n \n+\t* decl.c (make_implicit_typename): Rewrite removed code.\n+\t(make_typename_type): Call it if the type we look up comes from\n+\ta base that uses template parms.\n+\n \t* pt.c (complete_template_args): Rewrite.\n \t(tsubst, FUNCTION_DECL): Use it.\n "}, {"sha": "434d84c3cdc65dfc352702b9d3eab8b56f011ee7", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1107c4b3ddb1932630ca4372701cf246192cf82e/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1107c4b3ddb1932630ca4372701cf246192cf82e/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=1107c4b3ddb1932630ca4372701cf246192cf82e", "patch": "@@ -179,6 +179,7 @@ static void record_builtin_type PROTO((enum rid, char *, tree));\n static int member_function_or_else PROTO((tree, tree, char *));\n static void bad_specifiers PROTO((tree, char *, int, int, int, int,\n \t\t\t\t  int));\n+static tree make_implicit_typename PROTO((tree, tree));\n \n /* a node which has tree code ERROR_MARK, and whose type is itself.\n    All erroneous expressions are replaced with this node.  All functions\n@@ -4553,6 +4554,15 @@ make_typename_type (context, name)\n \t      cp_error (\"no type named `%#T' in `%#T'\", name, context);\n \t      return error_mark_node;\n \t    }\n+\n+\t  /* If this is really from a base that uses template parms,\n+\t     push the TYPENAME_TYPE down.  */\n+\t  if (processing_template_decl\n+\t      && context == current_class_type\n+\t      && DECL_CONTEXT (t) != context\n+\t      && uses_template_parms (DECL_CONTEXT (t)))\n+\t    return make_implicit_typename (context, t);\n+\n \t  return TREE_TYPE (t);\n \t}\n     }\n@@ -4575,7 +4585,8 @@ make_typename_type (context, name)\n }\n \n /* Given a TYPE_DECL T looked up in CONTEXT, return a TYPENAME_TYPE\n-   where the scope is CONTEXT.  Also remember what type T refers to.\n+   where the scope is the first class along the inheritance chain to T\n+   that is not current_class_type.\n \n    Called from lookup_name_real to implement the implicit typename\n    extension.  */\n@@ -4584,7 +4595,32 @@ static tree\n make_implicit_typename (context, t)\n      tree context, t;\n {\n-  tree retval = make_typename_type (context, DECL_NAME (t));\n+  tree retval;\n+\n+  if (context == current_class_type)\n+    {\n+      tree binfos = TYPE_BINFO_BASETYPES (context);\n+      int n_baselinks = TREE_VEC_LENGTH (binfos);\n+      int i;\n+\n+      /* We can't use DECL_CONTEXT (t) to help us here, because it refers\n+\t to the uninstantiated template type that t comes from, which is\n+\t probably not a base of ours.  This happens because we don't\n+         actually do partial instantiation of types in\n+         instantiate_class_template.  */\n+\n+      for (i = 0; i < n_baselinks; ++i)\n+\t{\n+\t  tree basetype = BINFO_TYPE (TREE_VEC_ELT (binfos, i));\n+\t  if (lookup_field (basetype, DECL_NAME (t), 0, 1))\n+\t    {\n+\t      context = basetype;\n+\t      break;\n+\t    }\n+\t}\n+    }\n+\n+  retval = make_typename_type (context, DECL_NAME (t));\n \n   if (TREE_CODE (retval) == TYPENAME_TYPE)\n     TREE_TYPE (retval) = TREE_TYPE (t);"}]}