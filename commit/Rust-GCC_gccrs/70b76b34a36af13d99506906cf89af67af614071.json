{"sha": "70b76b34a36af13d99506906cf89af67af614071", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzBiNzZiMzRhMzZhZjEzZDk5NTA2OTA2Y2Y4OWFmNjdhZjYxNDA3MQ==", "commit": {"author": {"name": "Devang Patel", "email": "dpatel@apple.com", "date": "2002-09-19T16:19:36Z"}, "committer": {"name": "Devang Patel", "email": "dpatel@gcc.gnu.org", "date": "2002-09-19T16:19:36Z"}, "message": "cp-tree.h: New prototype for walk_vtabls().\n\n\n 2002-09-19  Devang Patel  <dpatel@apple.com>\n       * cp/cp-tree.h: New prototype for walk_vtabls().\n       * cp/decl.c (walk_vtables_r): New function.\n       (struct cp_binding_level): Add new members, namespaces,\n       names_size and vtables.\n       (add_decl_to_level): Add decl in namespaces or vtables\n       chain, if conditions match.\n       (walk_vtables): New function.\n       (walk_namespaces_r): Travers separate namespace chain\n       for namespace decls.\n       (wrapup_globals_for_namespace): Use names_size instead\n       of list_length().\n       * cp/decl2.c (finish_file): Use walk_vtables() instead of\n       walk_globals() to walk vtable decls.\n\nFrom-SVN: r57305", "tree": {"sha": "6333d5c0f5f4cb057d87889291e28c7b8dae27f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6333d5c0f5f4cb057d87889291e28c7b8dae27f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70b76b34a36af13d99506906cf89af67af614071", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70b76b34a36af13d99506906cf89af67af614071", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70b76b34a36af13d99506906cf89af67af614071", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70b76b34a36af13d99506906cf89af67af614071/comments", "author": null, "committer": null, "parents": [{"sha": "b64ddb88fe0f4211125d8afa2d7348d6a9c242cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b64ddb88fe0f4211125d8afa2d7348d6a9c242cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b64ddb88fe0f4211125d8afa2d7348d6a9c242cf"}], "stats": {"total": 150, "additions": 98, "deletions": 52}, "files": [{"sha": "9b1be50bdccd35dc4ed595e70e650ced16cf2198", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70b76b34a36af13d99506906cf89af67af614071/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70b76b34a36af13d99506906cf89af67af614071/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=70b76b34a36af13d99506906cf89af67af614071", "patch": "@@ -1,3 +1,19 @@\n+2002-09-18  Devang Patel  <dpatel@apple.com>\n+\n+\t* cp/cp-tree.h: New prototype for walk_vtabls().        \n+\t* cp/decl.c (walk_vtables_r): New function.        \n+\t(struct cp_binding_level): Add new members, namespaces,        \n+\tnames_size and vtables.        \n+\t(add_decl_to_level): Add decl in namespaces or vtables        \n+\tchain, if conditions match.        \n+\t(walk_vtables): New function.        \n+\t(walk_namespaces_r): Travers separate namespace chain        \n+\tfor namespace decls.        \n+\t(wrapup_globals_for_namespace): Use names_size instead        \n+\tof list_length().        \n+\t* cp/decl2.c (finish_file): Use walk_vtables() instead of        \n+\twalk_globals() to walk vtable decls.        \n+\t\t\n 2002-09-19  Steve Ellcey  <sje@cup.hp.com>\n \n \t* config/ia64/hpux.h (CTORS_SECTION_ASM_OP): New.\n@@ -279,7 +295,6 @@ Tue Sep 17 13:40:13 2002  Nicola Pero  <n.pero@mi.flashnet.it>\n \t* real.h (real_nan): Return bool.\n \t* doc/extend.texi: Document new builtins.\n \n->>>>>>> 1.15460\n 2002-09-16  Jason Merrill  <jason@redhat.com>\n \t    Danny Smith  <dannysmith@users.sourceforge.net>\n "}, {"sha": "53d214a7de7d0d22749bb693cee8f608e466e133", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70b76b34a36af13d99506906cf89af67af614071/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70b76b34a36af13d99506906cf89af67af614071/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=70b76b34a36af13d99506906cf89af67af614071", "patch": "@@ -3724,6 +3724,9 @@ typedef int (*walk_globals_fn)                  PARAMS ((tree *, void *));\n extern int walk_globals                         PARAMS ((walk_globals_pred,\n \t\t\t\t\t\t       walk_globals_fn,\n \t\t\t\t\t\t       void *));\n+extern int walk_vtables                         PARAMS ((walk_globals_pred, \n+                                                       walk_globals_fn, \n+\t\t\t\t\t\t       void *));\n typedef int (*walk_namespaces_fn)               PARAMS ((tree, void *));\n extern int walk_namespaces                      PARAMS ((walk_namespaces_fn,\n \t\t\t\t\t\t       void *));"}, {"sha": "4dba35adeabf3f0a3baf3587ec202c5c498c8809", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 78, "deletions": 43, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70b76b34a36af13d99506906cf89af67af614071/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70b76b34a36af13d99506906cf89af67af614071/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=70b76b34a36af13d99506906cf89af67af614071", "patch": "@@ -108,6 +108,7 @@ static struct cp_binding_level *innermost_nonclass_level PARAMS ((void));\n static void warn_about_implicit_typename_lookup PARAMS ((tree, tree));\n static int walk_namespaces_r PARAMS ((tree, walk_namespaces_fn, void *));\n static int walk_globals_r PARAMS ((tree, void *));\n+static int walk_vtables_r PARAMS ((tree, void*));\n static void add_decl_to_level PARAMS ((tree, struct cp_binding_level *));\n static tree make_label_decl PARAMS ((tree, int));\n static void use_label PARAMS ((tree));\n@@ -319,6 +320,15 @@ struct cp_binding_level GTY(())\n        are wrapped in TREE_LISTs; the TREE_VALUE is the OVERLOAD.  */\n     tree names;\n \n+    /* Count of elements in names chain.  */\n+    size_t names_size;\n+\n+    /* A chain of NAMESPACE_DECL nodes.  */\n+    tree namespaces;\n+\n+    /* A chain of VTABLE_DECL nodes.  */\n+    tree vtables; \n+\n     /* A list of structure, union and enum definitions, for looking up\n        tag names.\n        It is a chain of TREE_LIST nodes, each of whose TREE_PURPOSE is a name,\n@@ -1007,10 +1017,25 @@ add_decl_to_level (decl, b)\n      tree decl;\n      struct cp_binding_level *b;\n {\n-  /* We build up the list in reverse order, and reverse it later if\n-     necessary.  */\n-  TREE_CHAIN (decl) = b->names;\n-  b->names = decl;\n+  if (TREE_CODE (decl) == NAMESPACE_DECL \n+      && !DECL_NAMESPACE_ALIAS (decl))\n+    {\n+      TREE_CHAIN (decl) = b->namespaces;\n+      b->namespaces = decl;\n+    }\n+  else if (TREE_CODE (decl) == VAR_DECL && DECL_VIRTUAL_P (decl))\n+    {\n+      TREE_CHAIN (decl) = b->vtables;\n+      b->vtables = decl;\n+    }\n+  else       \n+    {\n+      /* We build up the list in reverse order, and reverse it later if\n+         necessary.  */\n+      TREE_CHAIN (decl) = b->names;\n+      b->names = decl;\n+      b->names_size++;\n+    }\n }\n \n /* Bind DECL to ID in the current_binding_level, assumed to be a local\n@@ -1747,6 +1772,50 @@ cp_namespace_decls (ns)\n   return NAMESPACE_LEVEL (ns)->names;\n }\n \n+struct walk_globals_data {\n+  walk_globals_pred p;\n+  walk_globals_fn f;\n+  void *data;\n+};\n+\n+/* Walk the vtable declarations in NAMESPACE.  Whenever one is found\n+   for which P returns non-zero, call F with its address.  If any call\n+   to F returns a non-zero value, return a non-zero value.  */\n+\n+static int\n+walk_vtables_r (namespace, data)\n+     tree namespace;\n+     void *data;\n+{\n+  struct walk_globals_data* wgd = (struct walk_globals_data *) data;\n+  walk_globals_fn f = wgd->f;\n+  void *d = wgd->data;\n+  tree decl = NAMESPACE_LEVEL (namespace)->vtables;\n+  int result = 0;\n+\n+  for (; decl ; decl = TREE_CHAIN (decl))\n+    result != (*f) (&decl, d);\n+\n+  return result;\n+}\n+\n+/* Walk the vtable declarations.  Whenever one is found for which P\n+   returns non-zero, call F with its address.  If any call to F\n+   returns a non-zero value, return a non-zero value.  */\n+int\n+walk_vtables (p, f, data)\n+     walk_globals_pred p;\n+     walk_globals_fn f;\n+     void *data;\n+{    \n+  struct walk_globals_data wgd;\n+  wgd.p = p;    \n+  wgd.f = f;\n+  wgd.data = data;\n+\n+  return walk_namespaces (walk_vtables_r, &wgd);\n+}\n+\n /* Walk all the namespaces contained NAMESPACE, including NAMESPACE\n    itself, calling F for each.  The DATA is passed to F as well.  */\n \n@@ -1756,22 +1825,13 @@ walk_namespaces_r (namespace, f, data)\n      walk_namespaces_fn f;\n      void *data;\n {\n-  tree current;\n   int result = 0;\n+  tree current = NAMESPACE_LEVEL (namespace)->namespaces;     \n \n   result |= (*f) (namespace, data);\n \n-  for (current = cp_namespace_decls (namespace);\n-       current;\n-       current = TREE_CHAIN (current))\n-    {\n-      if (TREE_CODE (current) != NAMESPACE_DECL\n-\t  || DECL_NAMESPACE_ALIAS (current))\n-\tcontinue;\n-\n-      /* We found a namespace.  */\n-      result |= walk_namespaces_r (current, f, data);\n-    }\n+  for (; current; current = TREE_CHAIN (current))\n+    result |= walk_namespaces_r (current, f, data);\n \n   return result;\n }\n@@ -1787,12 +1847,6 @@ walk_namespaces (f, data)\n   return walk_namespaces_r (global_namespace, f, data);\n }\n \n-struct walk_globals_data {\n-  walk_globals_pred p;\n-  walk_globals_fn f;\n-  void *data;\n-};\n-\n /* Walk the global declarations in NAMESPACE.  Whenever one is found\n    for which P returns non-zero, call F with its address.  If any call\n    to F returns a non-zero value, return a non-zero value.  */\n@@ -1855,7 +1909,7 @@ wrapup_globals_for_namespace (namespace, data)\n      void *data;\n {\n   tree globals = cp_namespace_decls (namespace);\n-  int len = list_length (globals);\n+  int len = NAMESPACE_LEVEL (namespace)->names_size;\n   tree *vec = (tree *) alloca (sizeof (tree) * len);\n   int i;\n   int result;\n@@ -1867,7 +1921,7 @@ wrapup_globals_for_namespace (namespace, data)\n     return 0;\n \n   /* Process the decls in reverse order--earliest first.\n-     Put them into VEC from back to front, then take out from front.  */\n+     Put them into VEC from back to front, then take out from front.  */       \n   for (i = 0, decl = globals; i < len; i++, decl = TREE_CHAIN (decl))\n     vec[len - i - 1] = decl;\n \n@@ -1877,28 +1931,9 @@ wrapup_globals_for_namespace (namespace, data)\n       return 0;\n     }\n \n-  /* Temporarily mark vtables as external.  That prevents\n-     wrapup_global_declarations from writing them out; we must process\n-     them ourselves in finish_vtable_vardecl.  */\n-  for (i = 0; i < len; ++i)\n-    if (vtable_decl_p (vec[i], /*data=*/0) && !DECL_EXTERNAL (vec[i]))\n-      {\n-\tDECL_NOT_REALLY_EXTERN (vec[i]) = 1;\n-\tDECL_EXTERNAL (vec[i]) = 1;\n-      }\n-\n   /* Write out any globals that need to be output.  */\n   result = wrapup_global_declarations (vec, len);\n \n-  /* Undo the hack to DECL_EXTERNAL above.  */\n-  for (i = 0; i < len; ++i)\n-    if (vtable_decl_p (vec[i], /*data=*/0)\n-\t&& DECL_NOT_REALLY_EXTERN (vec[i]))\n-      {\n-\tDECL_NOT_REALLY_EXTERN (vec[i]) = 0;\n-\tDECL_EXTERNAL (vec[i]) = 0;\n-      }\n-\n   return result;\n }\n "}, {"sha": "613c353402dda173a2c709222851e87554f8dc40", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70b76b34a36af13d99506906cf89af67af614071/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70b76b34a36af13d99506906cf89af67af614071/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=70b76b34a36af13d99506906cf89af67af614071", "patch": "@@ -2774,7 +2774,7 @@ finish_file ()\n       /* Write out virtual tables as required.  Note that writing out\n \t the virtual table for a template class may cause the\n \t instantiation of members of that class.  */\n-      if (walk_globals (vtable_decl_p,\n+      if (walk_vtables (vtable_decl_p,\n \t\t\tfinish_vtable_vardecl,\n \t\t\t/*data=*/0))\n \treconsider = 1;\n@@ -2955,13 +2955,6 @@ finish_file ()\n      linkage now.  */\n   pop_lang_context ();\n \n-  /* Now delete from the chain of variables all virtual function tables.\n-     We output them all ourselves, because each will be treated\n-     specially.  We don't do this if we're just doing semantic\n-     analysis, and not code-generation.  */\n-  if (!flag_syntax_only)\n-    walk_globals (vtable_decl_p, prune_vtable_vardecl, /*data=*/0);\n-\n   /* Now, issue warnings about static, but not defined, functions,\n      etc., and emit debugging information.  */\n   walk_namespaces (wrapup_globals_for_namespace, /*data=*/&reconsider);"}]}