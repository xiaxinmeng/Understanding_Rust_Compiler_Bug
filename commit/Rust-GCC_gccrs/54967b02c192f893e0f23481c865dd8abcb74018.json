{"sha": "54967b02c192f893e0f23481c865dd8abcb74018", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQ5NjdiMDJjMTkyZjg5M2UwZjIzNDgxYzg2NWRkOGFiY2I3NDAxOA==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-11-09T17:29:23Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-12-02T00:33:10Z"}, "message": "x86: Add -mneeded for GNU_PROPERTY_X86_ISA_1_V[234] marker\n\nGCC 11 supports -march=x86-64-v[234] to enable x86 micro-architecture ISA\nlevels:\n\nhttps://gcc.gnu.org/bugzilla/show_bug.cgi?id=97250\n\nBinutils has been updated to support GNU_PROPERTY_X86_ISA_1_V[234] marker:\n\nhttps://gitlab.com/x86-psABIs/x86-64-ABI/-/merge_requests/13\n\nwith\n\ncommit b0ab06937385e0ae25cebf1991787d64f439bf12\nAuthor: H.J. Lu <hjl.tools@gmail.com>\nDate:   Fri Oct 30 06:49:57 2020 -0700\n\n    x86: Support GNU_PROPERTY_X86_ISA_1_BASELINE marker\n\nand\n\ncommit 32930e4edbc06bc6f10c435dbcc63131715df678\nAuthor: H.J. Lu <hjl.tools@gmail.com>\nDate:   Fri Oct 9 05:05:57 2020 -0700\n\n    x86: Support GNU_PROPERTY_X86_ISA_1_V[234] marker\n\nin x86 ELF binaries.\n\nAdd -mneeded to emit GNU_PROPERTY_X86_ISA_1_NEEDED property to indicate\nthe micro-architecture ISA level required to execute the binary.\n\ngcc/\n\n\t* config.gcc: Replace cet.o with gnu-property.o.  Replace\n\ti386/t-cet with i386/t-gnu-property.\n\t* config/i386/cet.c: Renamed to ...\n\t* config/i386/gnu-property.c: This.\n\t(emit_gnu_property): New function.\n\t(file_end_indicate_exec_stack_and_cet): Renamed to ...\n\t(file_end_indicate_exec_stack_and_gnu_property): This.  Call\n\temit_gnu_property to generate GNU_PROPERTY_X86_FEATURE_1_AND and\n\tGNU_PROPERTY_X86_ISA_1_NEEDED properties.\n\t* config/i386/i386.opt (mneeded): New.\n\t* config/i386/linux-common.h (file_end_indicate_exec_stack_and_cet):\n\tRenamed to ...\n\t(file_end_indicate_exec_stack_and_gnu_property): This.\n\t(TARGET_ASM_FILE_END): Updated.\n\t* config/i386/t-cet: Renamed to ...\n\t* config/i386/t-gnu-property: This.\n\t(cet.o): Renamed to ...\n\t(gnu-property.o): This.\n\t* doc/invoke.texi: Document -mneeded.\n\ngcc/testsuite/\n\n\t* gcc.target/i386/x86-needed-1.c: New test.\n\t* gcc.target/i386/x86-needed-2.c: Likewise.\n\t* gcc.target/i386/x86-needed-3.c: Likewise.", "tree": {"sha": "1e75845ab61a36fa0800d8459e20ac5868c6bd77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e75845ab61a36fa0800d8459e20ac5868c6bd77"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54967b02c192f893e0f23481c865dd8abcb74018", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54967b02c192f893e0f23481c865dd8abcb74018", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54967b02c192f893e0f23481c865dd8abcb74018", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54967b02c192f893e0f23481c865dd8abcb74018/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0f5e7926789f2ddeabb5b0266958532a43cc155", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0f5e7926789f2ddeabb5b0266958532a43cc155", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0f5e7926789f2ddeabb5b0266958532a43cc155"}], "stats": {"total": 257, "additions": 175, "deletions": 82}, "files": [{"sha": "b8d268651d16c56d356bd4b4130bb8bab0b46d62", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54967b02c192f893e0f23481c865dd8abcb74018/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54967b02c192f893e0f23481c865dd8abcb74018/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=54967b02c192f893e0f23481c865dd8abcb74018", "patch": "@@ -5231,8 +5231,8 @@ case ${target} in\n \ti[34567]86-*-darwin* | x86_64-*-darwin*)\n \t\t;;\n \ti[34567]86-*-linux* | x86_64-*-linux*)\n-\t\textra_objs=\"${extra_objs} cet.o\"\n-\t\ttmake_file=\"$tmake_file i386/t-linux i386/t-cet\"\n+\t\textra_objs=\"${extra_objs} gnu-property.o\"\n+\t\ttmake_file=\"$tmake_file i386/t-linux i386/t-gnu-property\"\n \t\t;;\n \ti[34567]86-*-kfreebsd*-gnu | x86_64-*-kfreebsd*-gnu)\n \t\ttmake_file=\"$tmake_file i386/t-kfreebsd\""}, {"sha": "5450ac307d59b85df53d5e2a67f8625684964bf3", "filename": "gcc/config/i386/cet.c", "status": "removed", "additions": 0, "deletions": 76, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0f5e7926789f2ddeabb5b0266958532a43cc155/gcc%2Fconfig%2Fi386%2Fcet.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0f5e7926789f2ddeabb5b0266958532a43cc155/gcc%2Fconfig%2Fi386%2Fcet.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcet.c?ref=e0f5e7926789f2ddeabb5b0266958532a43cc155", "patch": "@@ -1,76 +0,0 @@\n-/* Functions for CET/x86.\n-   Copyright (C) 2017-2020 Free Software Foundation, Inc.\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 3, or (at your option)\n-any later version.\n-\n-GCC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GCC; see the file COPYING3.  If not see\n-<http://www.gnu.org/licenses/>.  */\n-\n-#include \"config.h\"\n-#include \"system.h\"\n-#include \"coretypes.h\"\n-#include \"tm.h\"\n-#include \"output.h\"\n-#include \"linux-common.h\"\n-\n-void\n-file_end_indicate_exec_stack_and_cet (void)\n-{\n-  file_end_indicate_exec_stack ();\n-\n-  if (flag_cf_protection == CF_NONE)\n-    return;\n-\n-  unsigned int feature_1 = 0;\n-\n-  if (flag_cf_protection & CF_BRANCH)\n-    /* GNU_PROPERTY_X86_FEATURE_1_IBT.  */\n-    feature_1 |= 0x1;\n-\n-  if (flag_cf_protection & CF_RETURN)\n-    /* GNU_PROPERTY_X86_FEATURE_1_SHSTK.  */\n-    feature_1 |= 0x2;\n-\n-  if (feature_1)\n-    {\n-      int p2align = ptr_mode == SImode ? 2 : 3;\n-\n-      /* Generate GNU_PROPERTY_X86_FEATURE_1_XXX.  */\n-      switch_to_section (get_section (\".note.gnu.property\",\n-\t\t\t\t      SECTION_NOTYPE, NULL));\n-\n-      ASM_OUTPUT_ALIGN (asm_out_file, p2align);\n-      /* name length.  */\n-      fprintf (asm_out_file, ASM_LONG \" 1f - 0f\\n\");\n-      /* data length.  */\n-      fprintf (asm_out_file, ASM_LONG \" 4f - 1f\\n\");\n-      /* note type: NT_GNU_PROPERTY_TYPE_0.  */\n-      fprintf (asm_out_file, ASM_LONG \" 5\\n\");\n-      fprintf (asm_out_file, \"0:\\n\");\n-      /* vendor name: \"GNU\".  */\n-      fprintf (asm_out_file, STRING_ASM_OP \" \\\"GNU\\\"\\n\");\n-      fprintf (asm_out_file, \"1:\\n\");\n-      ASM_OUTPUT_ALIGN (asm_out_file, p2align);\n-      /* pr_type: GNU_PROPERTY_X86_FEATURE_1_AND.  */\n-      fprintf (asm_out_file, ASM_LONG \" 0xc0000002\\n\");\n-      /* pr_datasz.  */\\\n-      fprintf (asm_out_file, ASM_LONG \" 3f - 2f\\n\");\n-      fprintf (asm_out_file, \"2:\\n\");\n-      /* GNU_PROPERTY_X86_FEATURE_1_XXX.  */\n-      fprintf (asm_out_file, ASM_LONG \" 0x%x\\n\", feature_1);\n-      fprintf (asm_out_file, \"3:\\n\");\n-      ASM_OUTPUT_ALIGN (asm_out_file, p2align);\n-      fprintf (asm_out_file, \"4:\\n\");\n-    }\n-}"}, {"sha": "128832561e2be08615c296c19f1888544b8c3e08", "filename": "gcc/config/i386/gnu-property.c", "status": "added", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54967b02c192f893e0f23481c865dd8abcb74018/gcc%2Fconfig%2Fi386%2Fgnu-property.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54967b02c192f893e0f23481c865dd8abcb74018/gcc%2Fconfig%2Fi386%2Fgnu-property.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fgnu-property.c?ref=54967b02c192f893e0f23481c865dd8abcb74018", "patch": "@@ -0,0 +1,124 @@\n+/* Functions for x86 GNU property.\n+   Copyright (C) 2017-2020 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"output.h\"\n+#include \"linux-common.h\"\n+\n+static void\n+emit_gnu_property (unsigned int type, unsigned int data)\n+{\n+  int p2align = ptr_mode == SImode ? 2 : 3;\n+\n+  switch_to_section (get_section (\".note.gnu.property\",\n+\t\t\t\t  SECTION_NOTYPE, NULL));\n+\n+  ASM_OUTPUT_ALIGN (asm_out_file, p2align);\n+  /* name length.  */\n+  fprintf (asm_out_file, ASM_LONG \"1f - 0f\\n\");\n+  /* data length.  */\n+  fprintf (asm_out_file, ASM_LONG \"4f - 1f\\n\");\n+  /* note type: NT_GNU_PROPERTY_TYPE_0.  */\n+  fprintf (asm_out_file, ASM_LONG \"5\\n\");\n+  fprintf (asm_out_file, \"0:\\n\");\n+  /* vendor name: \"GNU\".  */\n+  fprintf (asm_out_file, STRING_ASM_OP \"\\\"GNU\\\"\\n\");\n+  fprintf (asm_out_file, \"1:\\n\");\n+  ASM_OUTPUT_ALIGN (asm_out_file, p2align);\n+  /* pr_type.  */\n+  fprintf (asm_out_file, ASM_LONG \"0x%x\\n\", type);\n+  /* pr_datasz.  */\n+  fprintf (asm_out_file, ASM_LONG \"3f - 2f\\n\");\n+  fprintf (asm_out_file, \"2:\\n\");\n+  fprintf (asm_out_file, ASM_LONG \"0x%x\\n\", data);\n+  fprintf (asm_out_file, \"3:\\n\");\n+  ASM_OUTPUT_ALIGN (asm_out_file, p2align);\n+  fprintf (asm_out_file, \"4:\\n\");\n+}\n+\n+void\n+file_end_indicate_exec_stack_and_gnu_property (void)\n+{\n+  file_end_indicate_exec_stack ();\n+\n+  if (flag_cf_protection == CF_NONE && !ix86_needed)\n+    return;\n+\n+  unsigned int feature_1 = 0;\n+\n+  if (flag_cf_protection & CF_BRANCH)\n+    /* GNU_PROPERTY_X86_FEATURE_1_IBT.  */\n+    feature_1 |= 0x1;\n+\n+  if (flag_cf_protection & CF_RETURN)\n+    /* GNU_PROPERTY_X86_FEATURE_1_SHSTK.  */\n+    feature_1 |= 0x2;\n+\n+  /* Generate GNU_PROPERTY_X86_FEATURE_1_AND.  */\n+  if (feature_1)\n+    emit_gnu_property (0xc0000002, feature_1);\n+\n+  unsigned int isa_1 = 0;\n+  if (ix86_needed)\n+    {\n+      /* GNU_PROPERTY_X86_ISA_1_BASELINE.  */\n+      if (TARGET_64BIT\n+\t  || TARGET_FXSR\n+\t  || TARGET_80387\n+\t  || TARGET_MMX\n+\t  || TARGET_SSE\n+\t  || TARGET_SSE2)\n+\tisa_1 |= 1 << 0;\n+\n+      /* GNU_PROPERTY_X86_ISA_1_V2.  */\n+      if (TARGET_CMPXCHG16B\n+\t  || (TARGET_64BIT && TARGET_SAHF)\n+\t  || TARGET_POPCNT\n+\t  || TARGET_SSE3\n+\t  || TARGET_SSSE3\n+\t  || TARGET_SSE4_1\n+\t  || TARGET_SSE4_2)\n+\tisa_1 |= 1 << 1;\n+\n+      /* GNU_PROPERTY_X86_ISA_1_V3.  */\n+      if (TARGET_AVX\n+\t  || TARGET_AVX2\n+\t  || TARGET_F16C\n+\t  || TARGET_FMA\n+\t  || TARGET_LZCNT\n+\t  || TARGET_MOVBE\n+\t  || TARGET_XSAVE)\n+\tisa_1 |= 1 << 2;\n+\n+      /* GNU_PROPERTY_X86_ISA_1_V4.  */\n+      if (TARGET_AVX512F\n+\t  || TARGET_AVX512BW\n+\t  || TARGET_AVX512CD\n+\t  || TARGET_AVX512DQ\n+\t  || TARGET_AVX512VL)\n+\tisa_1 |= 1 << 3;\n+    }\n+\n+  /* Generate GNU_PROPERTY_X86_ISA_1_NEEDED.  */\n+  if (isa_1)\n+    emit_gnu_property (0xc0008002, isa_1);\n+}"}, {"sha": "d7e4f443883752ebca8972e354a2e48f23ff74f0", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54967b02c192f893e0f23481c865dd8abcb74018/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54967b02c192f893e0f23481c865dd8abcb74018/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=54967b02c192f893e0f23481c865dd8abcb74018", "patch": "@@ -1148,3 +1148,7 @@ mavxvnni\n Target Report Mask(ISA2_AVXVNNI) Var(ix86_isa_flags2) Save\n Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2, and\n AVXVNNI built-in functions and code generation.\n+\n+mneeded\n+Target Report Var(ix86_needed) Save\n+Emit GNU_PROPERTY_X86_ISA_1_NEEDED GNU property"}, {"sha": "da0fabbb398342c8abf4bdaa117868806dbea547", "filename": "gcc/config/i386/linux-common.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54967b02c192f893e0f23481c865dd8abcb74018/gcc%2Fconfig%2Fi386%2Flinux-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54967b02c192f893e0f23481c865dd8abcb74018/gcc%2Fconfig%2Fi386%2Flinux-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Flinux-common.h?ref=54967b02c192f893e0f23481c865dd8abcb74018", "patch": "@@ -65,7 +65,7 @@ along with GCC; see the file COPYING3.  If not see\n #define MPX_LD_AS_NEEDED_GUARD_POP \"\"\n #endif\n \n-extern void file_end_indicate_exec_stack_and_cet (void);\n+extern void file_end_indicate_exec_stack_and_gnu_property (void);\n \n #undef TARGET_ASM_FILE_END\n-#define TARGET_ASM_FILE_END file_end_indicate_exec_stack_and_cet\n+#define TARGET_ASM_FILE_END file_end_indicate_exec_stack_and_gnu_property"}, {"sha": "fd8bbce73c9151fd9b89c9e33c939be00edd68cc", "filename": "gcc/config/i386/t-gnu-property", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54967b02c192f893e0f23481c865dd8abcb74018/gcc%2Fconfig%2Fi386%2Ft-gnu-property", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54967b02c192f893e0f23481c865dd8abcb74018/gcc%2Fconfig%2Fi386%2Ft-gnu-property", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-gnu-property?ref=54967b02c192f893e0f23481c865dd8abcb74018", "patch": "@@ -16,6 +16,6 @@\n # along with GCC; see the file COPYING3.  If not see\n # <http://www.gnu.org/licenses/>.\n \n-cet.o: $(srcdir)/config/i386/cet.c\n+gnu-property.o: $(srcdir)/config/i386/gnu-property.c\n \t  $(COMPILE) $<\n \t  $(POSTCOMPILE)", "previous_filename": "gcc/config/i386/t-cet"}, {"sha": "08444080f3a990bebeb29e30ad0dce82133ec251", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54967b02c192f893e0f23481c865dd8abcb74018/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54967b02c192f893e0f23481c865dd8abcb74018/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=54967b02c192f893e0f23481c865dd8abcb74018", "patch": "@@ -1392,7 +1392,7 @@ See RS/6000 and PowerPC Options.\n -mstack-protector-guard-symbol=@var{symbol} @gol\n -mgeneral-regs-only  -mcall-ms2sysv-xlogues @gol\n -mindirect-branch=@var{choice}  -mfunction-return=@var{choice} @gol\n--mindirect-branch-register}\n+-mindirect-branch-register -mneeded}\n \n @emph{x86 Windows Options}\n @gccoptlist{-mconsole  -mcygwin  -mno-cygwin  -mdll @gol\n@@ -31377,6 +31377,12 @@ environments.\n Generate code for short address mode.  This is only supported for 32-bit\n and x32 environments.  It is the default address mode for 32-bit and\n x32 environments.\n+\n+@item -mneeded\n+@itemx -mno-needed\n+@opindex mneeded\n+Emit GNU_PROPERTY_X86_ISA_1_NEEDED GNU property for Linux target to\n+indicate the micro-architecture ISA level required to execute the binary.\n @end table\n \n @node x86 Windows Options"}, {"sha": "b4584dfaeac4ba33fd523ab4411792fc67c2430c", "filename": "gcc/testsuite/gcc.target/i386/x86-needed-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54967b02c192f893e0f23481c865dd8abcb74018/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86-needed-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54967b02c192f893e0f23481c865dd8abcb74018/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86-needed-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86-needed-1.c?ref=54967b02c192f893e0f23481c865dd8abcb74018", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target *-*-linux* } } */\n+/* { dg-options \"-fcf-protection -march=x86-64 -mneeded\" } */\n+/* { dg-final { scan-assembler-times \".note.gnu.property\" 1 } } */\n+/* { dg-final { scan-assembler-times \".long\t0xc0000002\" 1 } } */\n+/* { dg-final { scan-assembler-times \".long\t0xc0008002\" 1 } } */\n+\n+extern void foo (void);\n+\n+void\n+bar (void)\n+{\n+  foo ();\n+}"}, {"sha": "2d916562e6e6f1fdf4eff656685c4cc865dc3dda", "filename": "gcc/testsuite/gcc.target/i386/x86-needed-2.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54967b02c192f893e0f23481c865dd8abcb74018/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86-needed-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54967b02c192f893e0f23481c865dd8abcb74018/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86-needed-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86-needed-2.c?ref=54967b02c192f893e0f23481c865dd8abcb74018", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fcf-protection=none -march=x86-64 -mno-needed\" } */\n+/* { dg-final { scan-assembler-not \".note.gnu.property\" } } */\n+\n+extern void foo (void);\n+\n+void\n+bar (void)\n+{\n+  foo ();\n+}"}, {"sha": "1d93726bd32c90f81378acbc5bdb01d8dd2de45f", "filename": "gcc/testsuite/gcc.target/i386/x86-needed-3.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54967b02c192f893e0f23481c865dd8abcb74018/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86-needed-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54967b02c192f893e0f23481c865dd8abcb74018/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86-needed-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fx86-needed-3.c?ref=54967b02c192f893e0f23481c865dd8abcb74018", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile { target ia32 } } */\n+/* { dg-options \"-fcf-protection=none -march=i686 -msoft-float -mneeded\" } */\n+/* { dg-final { scan-assembler-not \".note.gnu.property\" } } */\n+\n+extern void foo (void);\n+\n+void\n+bar (void)\n+{\n+  foo ();\n+}"}]}