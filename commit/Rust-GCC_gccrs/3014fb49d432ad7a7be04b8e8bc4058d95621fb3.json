{"sha": "3014fb49d432ad7a7be04b8e8bc4058d95621fb3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzAxNGZiNDlkNDMyYWQ3YTdiZTA0YjhlOGJjNDA1OGQ5NTYyMWZiMw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-06-05T22:54:24Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-06-05T22:54:24Z"}, "message": "entered into RCS\n\nFrom-SVN: r1167", "tree": {"sha": "46cea3f38ec7982bf4a400f124792de45c424d55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46cea3f38ec7982bf4a400f124792de45c424d55"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3014fb49d432ad7a7be04b8e8bc4058d95621fb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3014fb49d432ad7a7be04b8e8bc4058d95621fb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3014fb49d432ad7a7be04b8e8bc4058d95621fb3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3014fb49d432ad7a7be04b8e8bc4058d95621fb3/comments", "author": null, "committer": null, "parents": [{"sha": "59e748dc1f864346416b5df1dfe66862ba533225", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59e748dc1f864346416b5df1dfe66862ba533225", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59e748dc1f864346416b5df1dfe66862ba533225"}], "stats": {"total": 332, "additions": 63, "deletions": 269}, "files": [{"sha": "87e287937c2ae1bf99db380fdca17c7e2448674a", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 44, "deletions": 5, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3014fb49d432ad7a7be04b8e8bc4058d95621fb3/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3014fb49d432ad7a7be04b8e8bc4058d95621fb3/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=3014fb49d432ad7a7be04b8e8bc4058d95621fb3", "patch": "@@ -125,7 +125,6 @@ extern unsigned long\tcompute_frame_size ();\n extern void\t\texpand_block_move ();\n extern int\t\tequality_op ();\n extern int\t\tfcmp_op ();\n-extern void\t\tfinal_prescan_insn ();\n extern int\t\tfpsw_register_operand ();\n extern struct rtx_def *\tfunction_arg ();\n extern void\t\tfunction_arg_advance ();\n@@ -136,7 +135,6 @@ extern void\t\tgen_conditional_branch ();\n extern struct rtx_def * gen_int_relational ();\n extern void\t\tinit_cumulative_args ();\n extern int\t\tlarge_int ();\n-extern int\t\tlui_int ();\n extern int\t\tmd_register_operand ();\n extern int\t\tmips_address_cost ();\n extern void\t\tmips_asm_file_end ();\n@@ -430,7 +428,7 @@ while (0)\n \f\n /* Print subsidiary information on the compiler version in use.  */\n \n-#define MIPS_VERSION \"[AL 1.1, MM 20]\"\n+#define MIPS_VERSION \"[AL 1.1, MM 19]\"\n \n #ifndef MACHINE_TYPE\n #define MACHINE_TYPE \"BSD Mips\"\n@@ -2444,8 +2442,8 @@ while (0)\n #define CLASS_DIVMOD_OP\t\t0x02\t/* operator is {,U}{DIV,MOD} */\n #define CLASS_UNSIGNED_OP\t0x04\t/* operator is U{DIV,MOD} */\n #define CLASS_CMP_OP\t\t0x08\t/* operator is comparison */\n-#define CLASS_FCMP_OP\t\t0x08\t/* operator is fp. compare */\n #define CLASS_EQUALITY_OP\t0x10\t/* operator is == or != */\n+#define CLASS_FCMP_OP\t\t0x08\t/* operator is fp. compare */\n \n #define CLASS_UNS_CMP_OP\t(CLASS_UNSIGNED_OP | CLASS_CMP_OP)\n \n@@ -2506,7 +2504,47 @@ while (0)\n    statistics.  */\n \n #define FINAL_PRESCAN_INSN(INSN, OPVEC, NOPERANDS)\t\t\t\\\n-  final_prescan_insn (INSN, OPVEC, NOPERANDS)\n+do\t\t\t\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    if (dslots_number_nops > 0 && mips_load_reg != (rtx)0)\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tenum machine_mode mode = GET_MODE (mips_load_reg);\t\t\\\n+\trtx pattern = PATTERN (INSN);\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\tif (reg_mentioned_p (mips_load_reg, pattern)\t\t\t\\\n+\t    || (mips_load_reg2 != (rtx)0\t\t\t\t\\\n+\t\t&& reg_mentioned_p (mips_load_reg2, pattern))\t\t\\\n+\t    || (mips_load_reg3 != (rtx)0\t\t\t\t\\\n+\t\t&& reg_mentioned_p (mips_load_reg3, pattern))\t\t\\\n+\t    || (mips_load_reg4 != (rtx)0\t\t\t\t\\\n+\t\t&& reg_mentioned_p (mips_load_reg4, pattern))\t\t\\\n+\t    || get_attr_length (INSN) == 0)\t\t\t\t\\\n+\t  {\t\t\t\t\t\t\t\t\\\n+\t    fputs ((set_noreorder) ? \"\\tnop\\n\" : \"\\t#nop\\n\", asm_out_file); \\\n+\t  }\t\t\t\t\t\t\t\t\\\n+\telse\t\t\t\t\t\t\t\t\\\n+\t  dslots_load_filled++;\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\twhile (--dslots_number_nops > 0)\t\t\t\t\\\n+\t  fputs ((set_noreorder) ? \"\\tnop\\n\" : \"\\t#nop\\n\", asm_out_file); \\\n+\t\t\t\t\t\t\t\t\t\\\n+\tmips_load_reg  = (rtx)0;\t\t\t\t\t\\\n+\tmips_load_reg2 = (rtx)0;\t\t\t\t\t\\\n+\tmips_load_reg3 = (rtx)0;\t\t\t\t\t\\\n+\tmips_load_reg4 = (rtx)0;\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\tif (set_noreorder && --set_noreorder == 0)\t\t\t\\\n+\t  fputs (\"\\t.set\\treorder\\n\", asm_out_file);\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+    if (TARGET_STATS)\t\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tenum rtx_code code = GET_CODE (INSN);\t\t\t\t\\\n+\tif (code == JUMP_INSN || code == CALL_INSN)\t\t\t\\\n+\t  dslots_jump_total++;\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+while (0)\n \n \f\n /* Tell final.c how to eliminate redundant test instructions.\n@@ -3272,3 +3310,4 @@ while (0)\n #define MIPS_IS_STAB(sym) (((sym)->index & 0xFFF00) == CODE_MASK)\n #define MIPS_MARK_STAB(code) ((code)+CODE_MASK)\n #define MIPS_UNMARK_STAB(code) ((code)-CODE_MASK)\n+"}, {"sha": "00cae6d3e9e0ca68ead40a35e62eb9793af1fed5", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 19, "deletions": 264, "changes": 283, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3014fb49d432ad7a7be04b8e8bc4058d95621fb3/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3014fb49d432ad7a7be04b8e8bc4058d95621fb3/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=3014fb49d432ad7a7be04b8e8bc4058d95621fb3", "patch": "@@ -69,14 +69,6 @@\n \t\t(const_string \"yes\")\n \t\t(const_string \"no\")))\n \n-;; Attribute to indicate if an instruction is 'safe' to fill a load\n-;; delay slot because the first real instruction geneated is something\n-;; like load of $1 or a clobbered register.  Logical operations (&, |, ^)\n-;; which have operand[2] being a large integer constant fall into\n-;; this category.\n-\n-(define_attr \"safe\" \"no,yes\" (const_string \"no\"))\n-\n ;; Attribute describing the processor.  This attribute must match exactly\n ;; with the processor_type enumeration in mips.h.\n \n@@ -1161,98 +1153,19 @@ move\\\\t%0,%z4\\\\n\\\\\n ;; the optimizer can fold things together, at the expense of not moving the\n ;; constant out of loops.\n \n-(define_expand \"andsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(and:SI (match_operand:SI 1 \"arith32_operand\" \"dKIM\")\n-\t\t(match_operand:SI 2 \"arith32_operand\" \"dKIM\")))]\n-  \"\"\n-  \"\n-{\n-  extern rtx gen_andsi3_internal2 ();\n-\n-  /* Canonlicalize */\n-  if (GET_CODE (operands[1]) == CONST_INT)\n-    {\n-      rtx temp;\n-\n-      if (GET_CODE (operands[2]) == CONST_INT)\n-\t{\n-\t  emit_move_insn (operands[0],\n-\t\t\t  gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t\t   INTVAL (operands[1]) & INTVAL (operands[2])));\n-\t  DONE;\n-\t}\n-\n-      temp = operands[1];\n-      operands[1] = operands[2];\n-      operands[2] = temp;\n-    }\n-\n-  if (GET_CODE (operands[2]) == CONST_INT && !SMALL_INT_UNSIGNED (operands[2]))\n-    {\n-      emit_insn (gen_andsi3_internal2 (operands[0],\n-\t\t\t\t       operands[1],\n-\t\t\t\t       operands[2],\n-\t\t\t\t       gen_reg_rtx (SImode)));\n-      DONE;\n-    }\n-}\")\n-\n-(define_insn \"andsi3_internal1\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n-\t(and:SI (match_operand:SI 1 \"arith32_operand\" \"%d,d\")\n-\t\t(match_operand:SI 2 \"arith32_operand\" \"d,K\")))]\n-  \"\"\n-  \"@\n-   and\\\\t%0,%1,%2\n-   andi\\\\t%0,%1,%x2\"\n-  [(set_attr \"type\"\t\"arith\")\n-   (set_attr \"mode\"\t\"SI\")\n-   (set_attr \"length\"\t\"1\")])\n-\n-(define_insn \"andsi3_internal2\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d,d,d,d\")\n+(define_insn \"andsi3\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d,d,?d,?d\")\n \t(and:SI (match_operand:SI 1 \"arith32_operand\" \"%d,d,d,d\")\n-\t\t(match_operand:SI 2 \"arith32_operand\" \"d,K,I,M\")))\n-   (clobber (match_operand:SI 3 \"register_operand\" \"=d,d,d,d\"))]\n+\t\t(match_operand:SI 2 \"arith32_operand\" \"d,K,I,M\")))]\n   \"\"\n   \"@\n    and\\\\t%0,%1,%2\n    andi\\\\t%0,%1,%x2\n-   lui\\\\t%3,(%X2)>>16\\;and\\\\t%0,%1,%3\n-   li\\\\t%3,%X2\\;and\\\\t%0,%1,%3\"\n+   %[li\\\\t%@,%X2\\;and\\\\t%0,%1,%@%]\n+   %[li\\\\t%@,%X2\\;and\\\\t%0,%1,%@%]\"\n   [(set_attr \"type\"\t\"arith,arith,multi,multi\")\n    (set_attr \"mode\"\t\"SI\")\n-   (set_attr \"length\"\t\"1,1,2,3\")\n-   (set_attr \"safe\"\t\"no,no,yes,yes\")])\n-\n-(define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(and:SI (match_operand:SI 1 \"register_operand\" \"\")\n-\t\t(match_operand:SI 2 \"lui_int\" \"\")))\n-   (clobber (match_operand:SI 3 \"register_operand\" \"\"))]\n-  \"reload_completed && !TARGET_DEBUG_D_MODE\"\n-\n-  [(set (match_dup 3) (match_dup 2))\n-   (set (match_dup 0) (and:SI (match_dup 1) (match_dup 3)))]\n-  \"\")\n-\n-(define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(and:SI (match_operand:SI 1 \"register_operand\" \"\")\n-\t\t(match_operand:SI 2 \"large_int\" \"\")))\n-   (clobber (match_operand:SI 3 \"register_operand\" \"\"))]\n-  \"reload_completed && !TARGET_DEBUG_D_MODE\"\n-\n-  [(set (match_dup 3) (match_dup 4))\n-   (set (match_dup 3) (ior:SI (match_dup 3) (match_dup 5)))\n-   (set (match_dup 0) (and:SI (match_dup 1) (match_dup 3)))]\n-  \"\n-{\n-  int val = INTVAL (operands[2]);\n-  operands[4] = gen_rtx (CONST_INT, VOIDmode, val & 0xffff0000);\n-  operands[5] = gen_rtx (CONST_INT, VOIDmode, val & 0x0000ffff);\n-}\")\n+   (set_attr \"length\"\t\"1,1,2,3\")])\n \n (define_insn \"anddi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n@@ -1277,98 +1190,19 @@ move\\\\t%0,%z4\\\\n\\\\\n    (set (subreg:SI (match_dup 0) 1) (and:SI (subreg:SI (match_dup 1) 1) (subreg:SI (match_dup 2) 1)))]\n   \"\")\n \n-(define_expand \"iorsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(ior:SI (match_operand:SI 1 \"arith32_operand\" \"dKIM\")\n-\t\t(match_operand:SI 2 \"arith32_operand\" \"dKIM\")))]\n-  \"\"\n-  \"\n-{\n-  extern rtx gen_iorsi3_internal2 ();\n-\n-  /* Canonlicalize */\n-  if (GET_CODE (operands[1]) == CONST_INT)\n-    {\n-      rtx temp;\n-\n-      if (GET_CODE (operands[2]) == CONST_INT)\n-\t{\n-\t  emit_move_insn (operands[0],\n-\t\t\t  gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t\t   INTVAL (operands[1]) | INTVAL (operands[2])));\n-\t  DONE;\n-\t}\n-\n-      temp = operands[1];\n-      operands[1] = operands[2];\n-      operands[2] = temp;\n-    }\n-\n-  if (GET_CODE (operands[2]) == CONST_INT && !SMALL_INT_UNSIGNED (operands[2]))\n-    {\n-      emit_insn (gen_iorsi3_internal2 (operands[0],\n-\t\t\t\t       operands[1],\n-\t\t\t\t       operands[2],\n-\t\t\t\t       gen_reg_rtx (SImode)));\n-      DONE;\n-    }\n-}\")\n-\n-(define_insn \"iorsi3_internal1\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n-\t(ior:SI (match_operand:SI 1 \"arith32_operand\" \"%d,d\")\n-\t\t(match_operand:SI 2 \"arith32_operand\" \"d,K\")))]\n-  \"\"\n-  \"@\n-   or\\\\t%0,%1,%2\n-   ori\\\\t%0,%1,%x2\"\n-  [(set_attr \"type\"\t\"arith\")\n-   (set_attr \"mode\"\t\"SI\")\n-   (set_attr \"length\"\t\"1\")])\n-\n-(define_insn \"iorsi3_internal2\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d,d,d,d\")\n+(define_insn \"iorsi3\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d,d,?d,?d\")\n \t(ior:SI (match_operand:SI 1 \"arith32_operand\" \"%d,d,d,d\")\n-\t\t(match_operand:SI 2 \"arith32_operand\" \"d,K,I,M\")))\n-   (clobber (match_operand:SI 3 \"register_operand\" \"=d,d,d,d\"))]\n+\t\t(match_operand:SI 2 \"arith32_operand\" \"d,K,I,M\")))]\n   \"\"\n   \"@\n    or\\\\t%0,%1,%2\n    ori\\\\t%0,%1,%x2\n-   lui\\\\t%3,(%X2)>>16\\;or\\\\t%0,%1,%3\n-   li\\\\t%3,%X2\\;or\\\\t%0,%1,%3\"\n+   %[li\\\\t%@,%X2\\;or\\\\t%0,%1,%@%]\n+   %[li\\\\t%@,%X2\\;or\\\\t%0,%1,%@%]\"\n   [(set_attr \"type\"\t\"arith,arith,multi,multi\")\n    (set_attr \"mode\"\t\"SI\")\n-   (set_attr \"length\"\t\"1,1,2,3\")\n-   (set_attr \"safe\"\t\"no,no,yes,yes\")])\n-\n-(define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(ior:SI (match_operand:SI 1 \"register_operand\" \"\")\n-\t\t(match_operand:SI 2 \"lui_int\" \"\")))\n-   (clobber (match_operand:SI 3 \"register_operand\" \"\"))]\n-  \"reload_completed && !TARGET_DEBUG_D_MODE\"\n-\n-  [(set (match_dup 3) (match_dup 2))\n-   (set (match_dup 0) (ior:SI (match_dup 1) (match_dup 3)))]\n-  \"\")\n-\n-(define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(ior:SI (match_operand:SI 1 \"register_operand\" \"\")\n-\t\t(match_operand:SI 2 \"large_int\" \"\")))\n-   (clobber (match_operand:SI 3 \"register_operand\" \"\"))]\n-  \"reload_completed && !TARGET_DEBUG_D_MODE\"\n-\n-  [(set (match_dup 3) (match_dup 4))\n-   (set (match_dup 3) (ior:SI (match_dup 3) (match_dup 5)))\n-   (set (match_dup 0) (ior:SI (match_dup 1) (match_dup 3)))]\n-  \"\n-{\n-  int val = INTVAL (operands[2]);\n-  operands[4] = gen_rtx (CONST_INT, VOIDmode, val & 0xffff0000);\n-  operands[5] = gen_rtx (CONST_INT, VOIDmode, val & 0x0000ffff);\n-}\")\n+   (set_attr \"length\"\t\"1,1,2,3\")])\n \n (define_insn \"iordi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n@@ -1393,99 +1227,19 @@ move\\\\t%0,%z4\\\\n\\\\\n    (set (subreg:SI (match_dup 0) 1) (ior:SI (subreg:SI (match_dup 1) 1) (subreg:SI (match_dup 2) 1)))]\n   \"\")\n \n-(define_expand \"xorsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(xor:SI (match_operand:SI 1 \"arith32_operand\" \"dKIM\")\n-\t\t(match_operand:SI 2 \"arith32_operand\" \"dKIM\")))]\n-  \"\"\n-  \"\n-{\n-  extern rtx gen_xorsi3_internal2 ();\n-\n-  /* Canonlicalize */\n-  if (GET_CODE (operands[1]) == CONST_INT)\n-    {\n-      rtx temp;\n-\n-      if (GET_CODE (operands[2]) == CONST_INT)\n-\t{\n-\t  emit_move_insn (operands[0],\n-\t\t\t  gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t\t   INTVAL (operands[1]) ^ INTVAL (operands[2])));\n-\t  DONE;\n-\t}\n-\n-      temp = operands[1];\n-      operands[1] = operands[2];\n-      operands[2] = temp;\n-    }\n-\n-  if (GET_CODE (operands[2]) == CONST_INT && !SMALL_INT_UNSIGNED (operands[2]))\n-    {\n-      emit_insn (gen_xorsi3_internal2 (operands[0],\n-\t\t\t\t       operands[1],\n-\t\t\t\t       operands[2],\n-\t\t\t\t       gen_reg_rtx (SImode)));\n-      DONE;\n-    }\n-}\")\n-\n-(define_insn \"xorsi3_internal1\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n-\t(xor:SI (match_operand:SI 1 \"arith32_operand\" \"%d,d\")\n-\t\t(match_operand:SI 2 \"arith32_operand\" \"d,K\")))]\n-  \"\"\n-  \"@\n-   xor\\\\t%0,%1,%2\n-   xori\\\\t%0,%1,%x2\"\n-  [(set_attr \"type\"\t\"arith\")\n-   (set_attr \"mode\"\t\"SI\")\n-   (set_attr \"length\"\t\"1\")])\n-\n-(define_insn \"xorsi3_internal2\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d,d,d,d\")\n+(define_insn \"xorsi3\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d,d,?d,?d\")\n \t(xor:SI (match_operand:SI 1 \"arith32_operand\" \"%d,d,d,d\")\n-\t\t(match_operand:SI 2 \"arith32_operand\" \"d,K,I,M\")))\n-   (clobber (match_operand:SI 3 \"register_operand\" \"=d,d,d,d\"))]\n+\t\t(match_operand:SI 2 \"arith32_operand\" \"d,K,I,M\")))]\n   \"\"\n   \"@\n    xor\\\\t%0,%1,%2\n    xori\\\\t%0,%1,%x2\n-   lui\\\\t%3,(%X2)>>16\\;xor\\\\t%0,%1,%3\n-   li\\\\t%3,%X2\\;xor\\\\t%0,%1,%3\"\n+   %[li\\\\t%@,%X2\\;xor\\\\t%0,%1,%@%]\n+   %[li\\\\t%@,%X2\\;xor\\\\t%0,%1,%@%]\"\n   [(set_attr \"type\"\t\"arith,arith,multi,multi\")\n    (set_attr \"mode\"\t\"SI\")\n-   (set_attr \"length\"\t\"1,1,2,3\")\n-   (set_attr \"safe\"\t\"no,no,yes,yes\")])\n-\n-(define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(xor:SI (match_operand:SI 1 \"register_operand\" \"\")\n-\t\t(match_operand:SI 2 \"lui_int\" \"\")))\n-   (clobber (match_operand:SI 3 \"register_operand\" \"\"))]\n-  \"reload_completed && !TARGET_DEBUG_D_MODE\"\n-\n-  [(set (match_dup 3) (match_dup 2))\n-   (set (match_dup 0) (xor:SI (match_dup 1) (match_dup 3)))]\n-  \"\")\n-\n-(define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(xor:SI (match_operand:SI 1 \"register_operand\" \"\")\n-\t\t(match_operand:SI 2 \"large_int\" \"\")))\n-   (clobber (match_operand:SI 3 \"register_operand\" \"\"))]\n-  \"reload_completed && !TARGET_DEBUG_D_MODE\"\n-\n-  [(set (match_dup 3) (match_dup 4))\n-   (set (match_dup 3) (ior:SI (match_dup 3) (match_dup 5)))\n-   (set (match_dup 0) (xor:SI (match_dup 1) (match_dup 3)))]\n-  \"\n-{\n-  int val = INTVAL (operands[2]);\n-  operands[4] = gen_rtx (CONST_INT, VOIDmode, val & 0xffff0000);\n-  operands[5] = gen_rtx (CONST_INT, VOIDmode, val & 0x0000ffff);\n-}\")\n-\n+   (set_attr \"length\"\t\"1,1,2,3\")])\n \n (define_insn \"xordi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n@@ -4239,3 +3993,4 @@ move\\\\t%0,%z4\\\\n\\\\\n ;; eval: (modify-syntax-entry ?{ \"(}\")\n ;; eval: (modify-syntax-entry ?} \"){\")\n ;; End:\n+"}]}