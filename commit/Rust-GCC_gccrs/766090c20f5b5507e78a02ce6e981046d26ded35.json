{"sha": "766090c20f5b5507e78a02ce6e981046d26ded35", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzY2MDkwYzIwZjViNTUwN2U3OGEwMmNlNmU5ODEwNDZkMjZkZWQzNQ==", "commit": {"author": {"name": "Trevor Saunders", "email": "tsaunders@mozilla.com", "date": "2014-05-17T23:07:23Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2014-05-17T23:07:23Z"}, "message": "use templates instead of gengtype for typed allocation functions\n\ngcc/ChangeLog:\n\n\t* alias.c (record_alias_subset): Adjust.\n\t* bitmap.c (bitmap_element_allocate): Likewise.\n\t(bitmap_gc_alloc_stat): Likewise.\n\t* cfg.c (init_flow): Likewise.\n\t(alloc_block): Likewise.\n\t(unchecked_make_edge): Likewise.\n\t* cfgloop.c (alloc_loop): Likewise.\n\t(flow_loops_find): Likewise.\n\t(rescan_loop_exit): Likewise.\n\t* cfgrtl.c (init_rtl_bb_info): Likewise.\n\t* cgraph.c (insert_new_cgraph_node_version): Likewise.\n\t(cgraph_allocate_node): Likewise.\n\t(cgraph_create_edge_1): Likewise.\n\t(cgraph_allocate_init_indirect_info): Likewise.\n\t* cgraphclones.c (cgraph_clone_edge): Likewise.\n\t* cgraphunit.c (add_asm_node): Likewise.\n\t(init_lowered_empty_function): Likewise.\n\t* config/aarch64/aarch64.c (aarch64_init_machine_status):\n\tLikewise.\n\t* config/alpha/alpha.c (alpha_init_machine_status): Likewise.\n\t(alpha_use_linkage): Likewise.\n\t* config/arc/arc.c (arc_init_machine_status): Likewise.\n\t* config/arm/arm.c (arm_init_machine_status): Likewise.\n\t* config/avr/avr.c (avr_init_machine_status): Likewise.\n\t* config/bfin/bfin.c (bfin_init_machine_status): Likewise.\n\t* config/c6x/c6x.c (c6x_init_machine_status): Likewise.\n\t* config/cris/cris.c (cris_init_machine_status): Likewise.\n\t* config/darwin.c (machopic_indirection_name): Likewise.\n\t(darwin_build_constant_cfstring): Likewise.\n\t(darwin_enter_string_into_cfstring_table): Likewise.\n\t* config/epiphany/epiphany.c (epiphany_init_machine_status):\n\t* Likewise.\n\t* config/frv/frv.c (frv_init_machine_status): Likewise.\n\t* config/i386/i386.c (get_dllimport_decl): Likewise.\n\t(ix86_init_machine_status): Likewise.\n\t(assign_386_stack_local): Likewise.\n\t* config/i386/winnt.c (i386_pe_record_external_function):\n\tLikewise.\n\t(i386_pe_maybe_record_exported_symbol): Likewise.\n\t(i386_pe_record_stub): Likewise.\n\t* config/ia64/ia64.c (ia64_init_machine_status): Likewise.\n\t* config/iq2000/iq2000.c (iq2000_init_machine_status): Likewise.\n\t* config/m32c/m32c.c (m32c_init_machine_status): Likewise.\n\t(m32c_note_pragma_address): Likewise.\n\t* config/mep/mep.c (mep_init_machine_status): Likewise.\n\t(mep_note_pragma_flag): Likewise.\n\t* config/mips/mips.c (mflip_mips16_use_mips16_p): Likewise.\n\t(mips16_local_alias): Likewise.\n\t(mips_init_machine_status): Likewise.\n\t* config/mmix/mmix.c (mmix_init_machine_status): Likewise.\n\t* config/moxie/moxie.c (moxie_init_machine_status): Likewise.\n\t* config/msp430/msp430.c (msp430_init_machine_status): Likewise.\n\t* config/nds32/nds32.c (nds32_init_machine_status): Likewise.\n\t* config/nios2/nios2.c (nios2_init_machine_status): Likewise.\n\t* config/pa/pa.c (pa_init_machine_status): Likewise.\n\t(pa_get_deferred_plabel): Likewise.\n\t* config/rl78/rl78.c (rl78_init_machine_status): Likewise.\n\t* config/rs6000/rs6000.c (builtin_function_type): Likewise.\n\t(rs6000_init_machine_status): Likewise.\n\t(output_toc): Likewise.\n\t* config/s390/s390.c (s390_init_machine_status): Likewise.\n\t* config/score/score.c (score_output_external): Likewise.\n\t* config/sparc/sparc.c (sparc_init_machine_status): Likewise.\n\t* config/spu/spu.c (spu_init_machine_status): Likewise.\n\t* config/tilegx/tilegx.c (tilegx_init_machine_status): Likewise.\n\t* config/tilepro/tilepro.c (tilepro_init_machine_status):\n\t* Likewise.\n\t* config/xtensa/xtensa.c (xtensa_init_machine_status): Likewise.\n\t* coverage.c (coverage_end_function): Likewise.\n\t* dbxout.c (dbxout_init): Likewise.\n\t* doc/gty.texi: Don't mention variable_size attribute.\n\t* dwarf2cfi.c (new_cfi): Adjust.\n\t(new_cfi_row): Likewise.\n\t(copy_cfi_row): Likewise.\n\t(create_cie_data): Likewise.\n\t* dwarf2out.c (dwarf2out_alloc_current_fde): Likewise.\n\t(new_loc_descr): Likewise.\n\t(find_AT_string_in_table): Likewise.\n\t(add_addr_table_entry): Likewise.\n\t(new_die): Likewise.\n\t(add_var_loc_to_decl): Likewise.\n\t(clone_die): Likewise.\n\t(clone_as_declaration): Likewise.\n\t(break_out_comdat_types): Likewise.\n\t(new_loc_list): Likewise.\n\t(add_loc_descr_to_each): Likewise.\n\t(add_location_or_const_value_attribute): Likewise.\n\t(add_linkage_name): Likewise.\n\t(lookup_filename): Likewise.\n\t(dwarf2out_var_location): Likewise.\n\t(new_line_info_table): Likewise.\n\t(dwarf2out_init): Likewise.\n\t(mem_loc_descriptor): Likewise.\n\t(loc_descriptor): Likewise.\n\t(add_const_value_attribute): Likewise.\n\t(tree_add_const_value_attribute): Likewise.\n\t(comp_dir_string): Likewise.\n\t(dwarf2out_vms_debug_main_pointer): Likewise.\n\t(string_cst_pool_decl): Likewise.\n\t* emit-rtl.c (set_mem_attrs): Likewise.\n\t(get_reg_attrs): Likewise.\n\t(start_sequence): Likewise.\n\t(init_emit): Likewise.\n\t(init_emit_regs): Likewise.\n\t* except.c (init_eh_for_function): Likewise.\n\t(gen_eh_region): Likewise.\n\t(gen_eh_region_catch): Likewise.\n\t(gen_eh_landing_pad): Likewise.\n\t(add_call_site): Likewise.\n\t* function.c (add_frame_space): Likewise.\n\t(insert_temp_slot_address): Likewise.\n\t(assign_stack_temp_for_type): Likewise.\n\t(get_hard_reg_initial_val): Likewise.\n\t(allocate_struct_function): Likewise.\n\t(prepare_function_start): Likewise.\n\t(types_used_by_var_decl_insert): Likewise.\n\t* gengtype.c (variable_size_p): Remove function.\n\t(enum alloc_quantity): Remove enum.\n\t(write_typed_alloc_def): Remove function.\n\t(write_typed_struct_alloc_def): Likewise.\n\t(write_typed_typedef_alloc_def): Likewise.\n\t(write_typed_alloc_defns): Likewise.\n\t(main): Adjust.\n\t* ggc-common.c (ggc_cleared_alloc_htab_ignore_args): Adjust.\n\t(ggc_cleared_alloc_ptr_array_two_args): Likewise.\n\t* ggc.h (ggc_alloc): new function.\n\t(ggc_cleared_alloc): Likewise.\n\t(ggc_vec_alloc): Template on type of vector element, and remove\n\telement size argument.\n\t(ggc_cleared_vec_alloc): Likewise.\n\t* gimple.c (gimple_build_omp_for): Adjust.\n\t(gimple_copy): Likewise.\n\t* ipa-cp.c (get_replacement_map): Likewise.\n\t(find_aggregate_values_for_callers_subset): Likewise.\n\t(known_aggs_to_agg_replacement_list): Likewise.\n\t* ipa-devirt.c (get_odr_type): Likewise.\n\t* ipa-prop.c (ipa_node_duplication_hook): Likewise.\n\t(read_agg_replacement_chain): Likewise.\n\t* loop-iv.c (get_simple_loop_desc): Likewise.\n\t* lto-cgraph.c (input_node_opt_summary): Likewise.\n\t* lto-section-in.c (lto_new_in_decl_state): Likewise.\n\t* lto-streamer-in.c (lto_input_eh_catch_list): Likewise.\n\t(input_eh_region): Likewise.\n\t(input_eh_lp): Likewise.\n\t(input_cfg): Likewise.\n\t* optabs.c (set_optab_libfunc): Likewise.\n\t(init_tree_optimization_optabs): Likewise.\n\t(set_conv_libfunc): Likewise.\n\t* passes.c (do_per_function_toporder): Likewise.\n\t* rtl.h: Don't use variable_size gty attribute.\n\t* sese.c (if_region_set_false_region): Adjust.\n\t* stringpool.c (gt_pch_save_stringpool): Likewise.\n\t* target-globals.c (save_target_globals): Likewise.\n\t* toplev.c (general_init): Likewise.\n\t* trans-mem.c (record_tm_replacement): Likewise.\n\t(split_bb_make_tm_edge): Likewise.\n\t* tree-cfg.c (move_sese_region_to_fn): Likewise.\n\t* tree-data-ref.h (lambda_vector_new): Likewise.\n\t* tree-eh.c (add_stmt_to_eh_lp_fn): Likewise.\n\t* tree-iterator.c (tsi_link_before): Likewise.\n\t(tsi_link_after): Likewise.\n\t* tree-scalar-evolution.c (new_scev_info_str): Likewise.\n\t* tree-ssa-loop-niter.c (record_estimate): Likewise.\n\t* tree-ssa-operands.c (ssa_operand_alloc): Likewise.\n\t* tree-ssa-operands.h: Don't use variable_size gty attribute.\n\t* tree-ssa.c (init_tree_ssa): Adjust.\n\t* tree-ssanames.c (set_range_info): Likewise.\n\t(get_ptr_info): Likewise.\n\t(duplicate_ssa_name_ptr_info): Likewise.\n\t(duplicate_ssa_name_range_info): Likewise.\n\t* tree-streamer-in.c (unpack_ts_real_cst_value_fields): Likewise.\n\t(unpack_ts_fixed_cst_value_fields): Likewise.\n\t* tree.c (build_fixed): Likewise.\n\t(build_real): Likewise.\n\t(build_string): Likewise.\n\t(decl_priority_info): Likewise.\n\t(decl_debug_expr_insert): Likewise.\n\t(decl_value_expr_insert): Likewise.\n\t(decl_debug_args_insert): Likewise.\n\t(type_hash_add): Likewise.\n\t(build_omp_clause): Likewise.\n\t* ubsan.c (decl_for_type_insert): Likewise.\n\t* varasm.c (get_unnamed_section): Likewise.\n\t(get_noswitch_section): Likewise.\n\t(get_section): Likewise.\n\t(get_block_for_section): Likewise.\n\t(create_block_symbol): Likewise.\n\t(build_constant_desc): Likewise.\n\t(create_constant_pool): Likewise.\n\t(force_const_mem): Likewise.\n\t(record_tm_clone_pair): Likewise.\n\t* varpool.c (varpool_create_empty_node): Likewise.\n\ngcc/c/ChangeLog:\n\n\t* c-decl.c (finish_struct): Adjust.\n\t(finish_enum): Likewise.\n\t(bind): Adjust.\n\t(record_inline_static): Likewise.\n\t(push_scope): Likewise.\n\t(make_label): Likewise.\n\t(lookup_label_for_goto): Likewise.\n\t(finish_struct): Likewise.\n\t(finish_enum): Likewise.\n\t(store_parm_decls): Likewise.\n\t(c_push_function_context): Likewise.\n\t* c-lang.h: Remove usage of variable_size gty attribute.\n\t* c-parser.c (c_parse_init): Adjust.\n\t(c_parse_file): Likewise.\n\ngcc/java/ChangeLog:\n\n\t* class.c (add_method_1): Adjust.\n\t(java_treetreehash_new): Likewise.\n\t* constants.c (set_constant_entry): Likewise.\n\t(cpool_for_class): Likewise.\n\t* decl.c (make_binding_level): Likewise.\n\t(java_dup_lang_specific_decl): Likewise.\n\t* expr.c (add_type_assertion): Likewise.\n\t* java-tree.h (MAYBE_CREATE_VAR_LANG_DECL_SPECIFIC): Likewise.\n\t(lang_decl): don't use variable_size gty attribute.\n\t(MAYBE_CREATE_TYPE_TYPE_LANG_SPECIFIC): Adjust.\n\t(lang_type): Don't use variable_size gty attribute.\n\t* jcf-parse.c (java_parse_file): Adjust.\n\t(process_zip_dir): Likewise.\n\t* jcf.h: Remove usage of variable_size gty attribute.\n\t* jcf-reader.c (jcf_parse_constant_pool): Adjust.\n\t(jcf_parse_bootstrap_methods): Likewise.\n\ngcc/objc/ChangeLog:\n\n\t* objc-act.c (objc_build_string_object): Adjust.\n\t(continue_class): Likewise.\n\t* objc-act.h (ALLOC_OBJC_TYPE_LANG_SPECIFIC): Likewise.\n\t* objc-map.c (objc_map_alloc_ggc): Likewise.\n\t(objc_map_private_resize): Likewise.\n\t* objc-next-runtime-abi-02.c (objc_next_runtime_abi_02_init):\n\tLikewise.\n\t(hash_name_enter): Likewise.\n\ngcc/cp/ChangeLog:\n\n\t* class.c (sorted_fields_type_new): Adjust.\n\t* cp-cilkplus.c (cilk_install_body_with_frame_cleanup): Likewise.\n\t* cp-objcp-common.c (decl_shadowed_for_var_insert): Likewise.\n\t* cp-tree.h: Remove usage of variable_size gty attribute.\n\t* decl.c (make_label_decl): Adjust.\n\t(check_goto): Likewise.\n\t(start_preparsed_function): Likewise.\n\t(save_function_data): Likewise.\n\t* lex.c (init_reswords): Likewise.\n\t(retrofit_lang_decl): Likewise.\n\t(cxx_dup_lang_specific_decl): Likewise.\n\t(copy_lang_type): Likewise.\n\t(cxx_make_type): Likewise.\n\t* name-lookup.c (binding_entry_make): Likewise.\n\t(binding_table_construct): Likewise.\n\t(binding_table_new): Likewise.\n\t(cxx_binding_make): Likewise.\n\t(pushdecl_maybe_friend_1): Likewise.\n\t(begin_scope): Likewise.\n\t(push_to_top_level): Likewise.\n\t* parser.c (cp_lexer_alloc): Likewise.\n\t(cp_lexer_new_from_tokens): Likewise.\n\t(cp_token_cache_new): Likewise.\n\t(cp_parser_context_new): Likewise.\n\t(cp_parser_new): Likewise.\n\t(cp_parser_nested_name_specifier_opt): Likewise.\n\t(cp_parser_template_id): Likewise.\n\t* pt.c (maybe_process_partial_specialization): Likewise.\n\t(register_specialization): Likewise.\n\t(add_pending_template): Likewise.\n\t(lookup_template_class_1): Likewise.\n\t(push_tinst_level): Likewise.\n\t* semantics.c (register_constexpr_fundef): Likewise.\n\t(cxx_eval_call_expression): Likewise.\n\t* typeck2.c (abstract_virtuals_error_sfinae): Likewise.\n\ngcc/fortran/ChangeLog:\n\n\t* f95-lang.c (pushlevel): Adjust.\n\t* trans-decl.c (gfc_allocate_lang_decl): Adjust.\n\t(gfc_find_module): Likewise.\n\t* trans-types.c (gfc_get_nodesc_array_type): Likewise.\n\t(gfc_get_array_type_bounds): Likewise.\n\t(gfc_nonrestricted_type): Likewise.\n\t* trans.h: Don't use variable_size gty attribute.\n\ngcc/ada/ChangeLog:\n\n\t* gcc-interface/ada-tree.h: Remove usage of variable_size gty\n\tannotation.\n\t* gcc-interface/decl.c (annotate_value): Adjust.\n\t* gcc-interface/trans.c (Attribute_to_gnu): Likewise.\n\t(push_range_check_info): Likewise.\n\t(Loop_Statement_to_gnu): Likewise.\n\t(Subprogram_Body_to_gnu): Likewise.\n\t(Compilation_Unit_to_gnu): Likewise.\n\t(start_stmt_group): Likewise.\n\t* gcc-interface/utils.c (init_gnat_utils): Likewise.\n\t(gnat_pushlevel): Likewise.\n\t(maybe_pad_type): Likewise.\n\ngcc/go/ChangeLog:\n\n\t* go-lang.c (struct GTY): Don't use variable_size gty attribute.\n\ngcc/c-family/ChangeLog:\n\n\t* c-common.h (sorted_fields_type): Remove variable_size GTY attribute.\n\t* c-pragma.c (push_alignment): Adjust.\n\t(handle_pragma_push_options): Likewise.\n\ngcc/lto/ChangeLog:\n\n\t* lto-tree.h: Don't use variable_size gty attribute.\n\t* lto.c (lto_read_in_decl_state): Adjust.\n\t(create_subid_section_table): Likewise.\n\t(lto_flatten_files): Likewise.\n\t(read_cgraph_and_symbols): Likewise.\n\ngcc/objcp/ChangeLog:\n\n\t* objcp-decl.h: Adjust.\n\nFrom-SVN: r210566", "tree": {"sha": "f657fc12a6ceba7ff463ba7da28b13db3a98589a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f657fc12a6ceba7ff463ba7da28b13db3a98589a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/766090c20f5b5507e78a02ce6e981046d26ded35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/766090c20f5b5507e78a02ce6e981046d26ded35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/766090c20f5b5507e78a02ce6e981046d26ded35", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/766090c20f5b5507e78a02ce6e981046d26ded35/comments", "author": null, "committer": null, "parents": [{"sha": "231120e5d40bc975c1acae42f2c2ea289b0425ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/231120e5d40bc975c1acae42f2c2ea289b0425ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/231120e5d40bc975c1acae42f2c2ea289b0425ae"}], "stats": {"total": 1187, "additions": 670, "deletions": 517}, "files": [{"sha": "1680aaeaf1393eabf4b418b706b9c961cfd53ad5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 195, "deletions": 0, "changes": 195, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -1,3 +1,198 @@\n+2014-05-17  Trevor Saunders  <tsaunders@mozilla.com>\n+\n+\t* alias.c (record_alias_subset): Adjust.\n+\t* bitmap.c (bitmap_element_allocate): Likewise.\n+\t(bitmap_gc_alloc_stat): Likewise.\n+\t* cfg.c (init_flow): Likewise.\n+\t(alloc_block): Likewise.\n+\t(unchecked_make_edge): Likewise.\n+\t* cfgloop.c (alloc_loop): Likewise.\n+\t(flow_loops_find): Likewise.\n+\t(rescan_loop_exit): Likewise.\n+\t* cfgrtl.c (init_rtl_bb_info): Likewise.\n+\t* cgraph.c (insert_new_cgraph_node_version): Likewise.\n+\t(cgraph_allocate_node): Likewise.\n+\t(cgraph_create_edge_1): Likewise.\n+\t(cgraph_allocate_init_indirect_info): Likewise.\n+\t* cgraphclones.c (cgraph_clone_edge): Likewise.\n+\t* cgraphunit.c (add_asm_node): Likewise.\n+\t(init_lowered_empty_function): Likewise.\n+\t* config/aarch64/aarch64.c (aarch64_init_machine_status):\n+\tLikewise.\n+\t* config/alpha/alpha.c (alpha_init_machine_status): Likewise.\n+\t(alpha_use_linkage): Likewise.\n+\t* config/arc/arc.c (arc_init_machine_status): Likewise.\n+\t* config/arm/arm.c (arm_init_machine_status): Likewise.\n+\t* config/avr/avr.c (avr_init_machine_status): Likewise.\n+\t* config/bfin/bfin.c (bfin_init_machine_status): Likewise.\n+\t* config/c6x/c6x.c (c6x_init_machine_status): Likewise.\n+\t* config/cris/cris.c (cris_init_machine_status): Likewise.\n+\t* config/darwin.c (machopic_indirection_name): Likewise.\n+\t(darwin_build_constant_cfstring): Likewise.\n+\t(darwin_enter_string_into_cfstring_table): Likewise.\n+\t* config/epiphany/epiphany.c (epiphany_init_machine_status):\n+\t* Likewise.\n+\t* config/frv/frv.c (frv_init_machine_status): Likewise.\n+\t* config/i386/i386.c (get_dllimport_decl): Likewise.\n+\t(ix86_init_machine_status): Likewise.\n+\t(assign_386_stack_local): Likewise.\n+\t* config/i386/winnt.c (i386_pe_record_external_function):\n+\tLikewise.\n+\t(i386_pe_maybe_record_exported_symbol): Likewise.\n+\t(i386_pe_record_stub): Likewise.\n+\t* config/ia64/ia64.c (ia64_init_machine_status): Likewise.\n+\t* config/iq2000/iq2000.c (iq2000_init_machine_status): Likewise.\n+\t* config/m32c/m32c.c (m32c_init_machine_status): Likewise.\n+\t(m32c_note_pragma_address): Likewise.\n+\t* config/mep/mep.c (mep_init_machine_status): Likewise.\n+\t(mep_note_pragma_flag): Likewise.\n+\t* config/mips/mips.c (mflip_mips16_use_mips16_p): Likewise.\n+\t(mips16_local_alias): Likewise.\n+\t(mips_init_machine_status): Likewise.\n+\t* config/mmix/mmix.c (mmix_init_machine_status): Likewise.\n+\t* config/moxie/moxie.c (moxie_init_machine_status): Likewise.\n+\t* config/msp430/msp430.c (msp430_init_machine_status): Likewise.\n+\t* config/nds32/nds32.c (nds32_init_machine_status): Likewise.\n+\t* config/nios2/nios2.c (nios2_init_machine_status): Likewise.\n+\t* config/pa/pa.c (pa_init_machine_status): Likewise.\n+\t(pa_get_deferred_plabel): Likewise.\n+\t* config/rl78/rl78.c (rl78_init_machine_status): Likewise.\n+\t* config/rs6000/rs6000.c (builtin_function_type): Likewise.\n+\t(rs6000_init_machine_status): Likewise.\n+\t(output_toc): Likewise.\n+\t* config/s390/s390.c (s390_init_machine_status): Likewise.\n+\t* config/score/score.c (score_output_external): Likewise.\n+\t* config/sparc/sparc.c (sparc_init_machine_status): Likewise.\n+\t* config/spu/spu.c (spu_init_machine_status): Likewise.\n+\t* config/tilegx/tilegx.c (tilegx_init_machine_status): Likewise.\n+\t* config/tilepro/tilepro.c (tilepro_init_machine_status):\n+\t* Likewise.\n+\t* config/xtensa/xtensa.c (xtensa_init_machine_status): Likewise.\n+\t* coverage.c (coverage_end_function): Likewise.\n+\t* dbxout.c (dbxout_init): Likewise.\n+\t* doc/gty.texi: Don't mention variable_size attribute.\n+\t* dwarf2cfi.c (new_cfi): Adjust.\n+\t(new_cfi_row): Likewise.\n+\t(copy_cfi_row): Likewise.\n+\t(create_cie_data): Likewise.\n+\t* dwarf2out.c (dwarf2out_alloc_current_fde): Likewise.\n+\t(new_loc_descr): Likewise.\n+\t(find_AT_string_in_table): Likewise.\n+\t(add_addr_table_entry): Likewise.\n+\t(new_die): Likewise.\n+\t(add_var_loc_to_decl): Likewise.\n+\t(clone_die): Likewise.\n+\t(clone_as_declaration): Likewise.\n+\t(break_out_comdat_types): Likewise.\n+\t(new_loc_list): Likewise.\n+\t(add_loc_descr_to_each): Likewise.\n+\t(add_location_or_const_value_attribute): Likewise.\n+\t(add_linkage_name): Likewise.\n+\t(lookup_filename): Likewise.\n+\t(dwarf2out_var_location): Likewise.\n+\t(new_line_info_table): Likewise.\n+\t(dwarf2out_init): Likewise.\n+\t(mem_loc_descriptor): Likewise.\n+\t(loc_descriptor): Likewise.\n+\t(add_const_value_attribute): Likewise.\n+\t(tree_add_const_value_attribute): Likewise.\n+\t(comp_dir_string): Likewise.\n+\t(dwarf2out_vms_debug_main_pointer): Likewise.\n+\t(string_cst_pool_decl): Likewise.\n+\t* emit-rtl.c (set_mem_attrs): Likewise.\n+\t(get_reg_attrs): Likewise.\n+\t(start_sequence): Likewise.\n+\t(init_emit): Likewise.\n+\t(init_emit_regs): Likewise.\n+\t* except.c (init_eh_for_function): Likewise.\n+\t(gen_eh_region): Likewise.\n+\t(gen_eh_region_catch): Likewise.\n+\t(gen_eh_landing_pad): Likewise.\n+\t(add_call_site): Likewise.\n+\t* function.c (add_frame_space): Likewise.\n+\t(insert_temp_slot_address): Likewise.\n+\t(assign_stack_temp_for_type): Likewise.\n+\t(get_hard_reg_initial_val): Likewise.\n+\t(allocate_struct_function): Likewise.\n+\t(prepare_function_start): Likewise.\n+\t(types_used_by_var_decl_insert): Likewise.\n+\t* gengtype.c (variable_size_p): Remove function.\n+\t(enum alloc_quantity): Remove enum.\n+\t(write_typed_alloc_def): Remove function.\n+\t(write_typed_struct_alloc_def): Likewise.\n+\t(write_typed_typedef_alloc_def): Likewise.\n+\t(write_typed_alloc_defns): Likewise.\n+\t(main): Adjust.\n+\t* ggc-common.c (ggc_cleared_alloc_htab_ignore_args): Adjust.\n+\t(ggc_cleared_alloc_ptr_array_two_args): Likewise.\n+\t* ggc.h (ggc_alloc): new function.\n+\t(ggc_cleared_alloc): Likewise.\n+\t(ggc_vec_alloc): Template on type of vector element, and remove\n+\telement size argument.\n+\t(ggc_cleared_vec_alloc): Likewise.\n+\t* gimple.c (gimple_build_omp_for): Adjust.\n+\t(gimple_copy): Likewise.\n+\t* ipa-cp.c (get_replacement_map): Likewise.\n+\t(find_aggregate_values_for_callers_subset): Likewise.\n+\t(known_aggs_to_agg_replacement_list): Likewise.\n+\t* ipa-devirt.c (get_odr_type): Likewise.\n+\t* ipa-prop.c (ipa_node_duplication_hook): Likewise.\n+\t(read_agg_replacement_chain): Likewise.\n+\t* loop-iv.c (get_simple_loop_desc): Likewise.\n+\t* lto-cgraph.c (input_node_opt_summary): Likewise.\n+\t* lto-section-in.c (lto_new_in_decl_state): Likewise.\n+\t* lto-streamer-in.c (lto_input_eh_catch_list): Likewise.\n+\t(input_eh_region): Likewise.\n+\t(input_eh_lp): Likewise.\n+\t(input_cfg): Likewise.\n+\t* optabs.c (set_optab_libfunc): Likewise.\n+\t(init_tree_optimization_optabs): Likewise.\n+\t(set_conv_libfunc): Likewise.\n+\t* passes.c (do_per_function_toporder): Likewise.\n+\t* rtl.h: Don't use variable_size gty attribute.\n+\t* sese.c (if_region_set_false_region): Adjust.\n+\t* stringpool.c (gt_pch_save_stringpool): Likewise.\n+\t* target-globals.c (save_target_globals): Likewise.\n+\t* toplev.c (general_init): Likewise.\n+\t* trans-mem.c (record_tm_replacement): Likewise.\n+\t(split_bb_make_tm_edge): Likewise.\n+\t* tree-cfg.c (move_sese_region_to_fn): Likewise.\n+\t* tree-data-ref.h (lambda_vector_new): Likewise.\n+\t* tree-eh.c (add_stmt_to_eh_lp_fn): Likewise.\n+\t* tree-iterator.c (tsi_link_before): Likewise.\n+\t(tsi_link_after): Likewise.\n+\t* tree-scalar-evolution.c (new_scev_info_str): Likewise.\n+\t* tree-ssa-loop-niter.c (record_estimate): Likewise.\n+\t* tree-ssa-operands.c (ssa_operand_alloc): Likewise.\n+\t* tree-ssa-operands.h: Don't use variable_size gty attribute.\n+\t* tree-ssa.c (init_tree_ssa): Adjust.\n+\t* tree-ssanames.c (set_range_info): Likewise.\n+\t(get_ptr_info): Likewise.\n+\t(duplicate_ssa_name_ptr_info): Likewise.\n+\t(duplicate_ssa_name_range_info): Likewise.\n+\t* tree-streamer-in.c (unpack_ts_real_cst_value_fields): Likewise.\n+\t(unpack_ts_fixed_cst_value_fields): Likewise.\n+\t* tree.c (build_fixed): Likewise.\n+\t(build_real): Likewise.\n+\t(build_string): Likewise.\n+\t(decl_priority_info): Likewise.\n+\t(decl_debug_expr_insert): Likewise.\n+\t(decl_value_expr_insert): Likewise.\n+\t(decl_debug_args_insert): Likewise.\n+\t(type_hash_add): Likewise.\n+\t(build_omp_clause): Likewise.\n+\t* ubsan.c (decl_for_type_insert): Likewise.\n+\t* varasm.c (get_unnamed_section): Likewise.\n+\t(get_noswitch_section): Likewise.\n+\t(get_section): Likewise.\n+\t(get_block_for_section): Likewise.\n+\t(create_block_symbol): Likewise.\n+\t(build_constant_desc): Likewise.\n+\t(create_constant_pool): Likewise.\n+\t(force_const_mem): Likewise.\n+\t(record_tm_clone_pair): Likewise.\n+\t* varpool.c (varpool_create_empty_node): Likewise.\n+\n 2014-05-17  Trevor Saunders  <tsaunders@mozilla.com>\n \n \t* dwarf2out.c (tree_add_const_value_attribute): Call"}, {"sha": "0102460767c69ed9c59b8cd79b286382a0ea5165", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -1,3 +1,18 @@\n+2014-05-17  Trevor Saunders  <tsaunders@mozilla.com>\n+\n+\t* gcc-interface/ada-tree.h: Remove usage of variable_size gty\n+\tannotation.\n+\t* gcc-interface/decl.c (annotate_value): Adjust.\n+\t* gcc-interface/trans.c (Attribute_to_gnu): Likewise.\n+\t(push_range_check_info): Likewise.\n+\t(Loop_Statement_to_gnu): Likewise.\n+\t(Subprogram_Body_to_gnu): Likewise.\n+\t(Compilation_Unit_to_gnu): Likewise.\n+\t(start_stmt_group): Likewise.\n+\t* gcc-interface/utils.c (init_gnat_utils): Likewise.\n+\t(gnat_pushlevel): Likewise.\n+\t(maybe_pad_type): Likewise.\n+\n 2014-05-14  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* seh_init.c: Fix copyright year."}, {"sha": "d43eefa004e57752729b03de9730220979b6d3fc", "filename": "gcc/ada/gcc-interface/ada-tree.h", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fada%2Fgcc-interface%2Fada-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fada%2Fgcc-interface%2Fada-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fada-tree.h?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -32,13 +32,9 @@ union GTY((desc (\"0\"),\n \t\t       desc (\"tree_node_structure (&%h)\"))) generic;\n };\n \n-/* Ada uses the lang_decl and lang_type fields to hold a tree.\n-\n-   FIXME: the variable_size annotation here is needed because these types are\n-   variable-sized in some other front-ends.  Due to gengtype deficiency, the\n-   GTY options of such types have to agree across all front-ends.  */\n-struct GTY((variable_size)) lang_type { tree t; };\n-struct GTY((variable_size)) lang_decl { tree t; };\n+/* Ada uses the lang_decl and lang_type fields to hold a tree.  */\n+struct GTY(()) lang_type { tree t; };\n+struct GTY(()) lang_decl { tree t; };\n \n /* Macros to get and set the tree in TYPE_LANG_SPECIFIC.  */\n #define GET_TYPE_LANG_SPECIFIC(NODE) \\\n@@ -49,7 +45,7 @@ do {\t\t\t\t\t\t\t \\\n   tree tmp = (X);\t\t\t\t\t \\\n   if (!TYPE_LANG_SPECIFIC (NODE))\t\t\t \\\n     TYPE_LANG_SPECIFIC (NODE)\t\t\t\t \\\n-      = ggc_alloc_lang_type (sizeof (struct lang_type)); \\\n+      = ggc_alloc<struct lang_type> (); \\\n   TYPE_LANG_SPECIFIC (NODE)->t = tmp;\t\t\t \\\n } while (0)\n \n@@ -62,7 +58,7 @@ do {\t\t\t\t\t\t\t \\\n   tree tmp = (X);\t\t\t\t\t \\\n   if (!DECL_LANG_SPECIFIC (NODE))\t\t\t \\\n     DECL_LANG_SPECIFIC (NODE)\t\t\t\t \\\n-      = ggc_alloc_lang_decl (sizeof (struct lang_decl)); \\\n+      = ggc_alloc<struct lang_decl> (); \\\n   DECL_LANG_SPECIFIC (NODE)->t = tmp;\t\t\t \\\n } while (0)\n "}, {"sha": "ff1210e6c87cd166df357e140eb95515b53a81d6", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -7578,7 +7578,7 @@ annotate_value (tree gnu_size)\n       h = (struct tree_int_map **)\n \t    htab_find_slot (annotate_value_cache, &in, INSERT);\n       gcc_assert (!*h);\n-      *h = ggc_alloc_tree_int_map ();\n+      *h = ggc_alloc<tree_int_map> ();\n       (*h)->base.from = gnu_size;\n       (*h)->to = ret;\n     }"}, {"sha": "c691a16b3d0a137d62212644564f88c1573b21d3", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -2000,7 +2000,7 @@ Attribute_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, int attribute)\n \n \t    if (!pa)\n \t      {\n-\t\tpa = ggc_alloc_cleared_parm_attr_d ();\n+\t\tpa = ggc_cleared_alloc<parm_attr_d> ();\n \t\tpa->id = gnat_param;\n \t\tpa->dim = Dimension;\n \t\tvec_safe_push (f_parm_attr_cache, pa);\n@@ -2522,7 +2522,7 @@ push_range_check_info (tree var)\n \n   if (iter)\n     {\n-      struct range_check_info_d *rci = ggc_alloc_range_check_info_d ();\n+      struct range_check_info_d *rci = ggc_alloc<range_check_info_d> ();\n       vec_safe_push (iter->checks, rci);\n       return rci;\n     }\n@@ -2600,7 +2600,7 @@ static tree\n Loop_Statement_to_gnu (Node_Id gnat_node)\n {\n   const Node_Id gnat_iter_scheme = Iteration_Scheme (gnat_node);\n-  struct loop_info_d *gnu_loop_info = ggc_alloc_cleared_loop_info_d ();\n+  struct loop_info_d *gnu_loop_info = ggc_cleared_alloc<loop_info_d> ();\n   tree gnu_loop_stmt = build4 (LOOP_STMT, void_type_node, NULL_TREE,\n \t\t\t       NULL_TREE, NULL_TREE, NULL_TREE);\n   tree gnu_loop_label = create_artificial_label (input_location);\n@@ -3617,7 +3617,7 @@ Subprogram_Body_to_gnu (Node_Id gnat_node)\n \n   /* Initialize the information structure for the function.  */\n   allocate_struct_function (gnu_subprog_decl, false);\n-  gnu_subprog_language = ggc_alloc_cleared_language_function ();\n+  gnu_subprog_language = ggc_cleared_alloc<language_function> ();\n   DECL_STRUCT_FUNCTION (gnu_subprog_decl)->language = gnu_subprog_language;\n   set_cfun (NULL);\n \n@@ -5140,7 +5140,7 @@ Compilation_Unit_to_gnu (Node_Id gnat_node)\n \n   /* Save away what we've made so far and record this potential elaboration\n      procedure.  */\n-  info = ggc_alloc_elab_info ();\n+  info = ggc_alloc<elab_info> ();\n   set_current_block_context (gnu_elab_proc_decl);\n   gnat_poplevel ();\n   DECL_SAVED_TREE (gnu_elab_proc_decl) = end_stmt_group ();\n@@ -7439,7 +7439,7 @@ start_stmt_group (void)\n   if (group)\n     stmt_group_free_list = group->previous;\n   else\n-    group = ggc_alloc_stmt_group ();\n+    group = ggc_alloc<stmt_group> ();\n \n   group->previous = current_stmt_group;\n   group->stmt_list = group->block = group->cleanups = NULL_TREE;"}, {"sha": "cc6f874c5fc3eb19502ae5feeba68ebffca5488e", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -245,10 +245,10 @@ void\n init_gnat_utils (void)\n {\n   /* Initialize the association of GNAT nodes to GCC trees.  */\n-  associate_gnat_to_gnu = ggc_alloc_cleared_vec_tree (max_gnat_nodes);\n+  associate_gnat_to_gnu = ggc_cleared_vec_alloc<tree> (max_gnat_nodes);\n \n   /* Initialize the association of GNAT nodes to GCC trees as dummies.  */\n-  dummy_node_table = ggc_alloc_cleared_vec_tree (max_gnat_nodes);\n+  dummy_node_table = ggc_cleared_vec_alloc<tree> (max_gnat_nodes);\n \n   /* Initialize the hash table of padded types.  */\n   pad_type_hash_table\n@@ -428,7 +428,7 @@ gnat_pushlevel (void)\n       free_binding_level = free_binding_level->chain;\n     }\n   else\n-    newlevel = ggc_alloc_gnat_binding_level ();\n+    newlevel = ggc_alloc<gnat_binding_level> ();\n \n   /* Use a free BLOCK, if any; otherwise, allocate one.  */\n   if (free_block_chain)\n@@ -1182,7 +1182,7 @@ maybe_pad_type (tree type, tree size, unsigned int align,\n \t      goto built;\n \t    }\n \n-\t  h = ggc_alloc_pad_type_hash ();\n+\t  h = ggc_alloc<pad_type_hash> ();\n \t  h->hash = hashcode;\n \t  h->type = record;\n \t  loc = htab_find_slot_with_hash (pad_type_hash_table, h, hashcode,"}, {"sha": "0246dd792f00f5afb901ee087737b5190141fc9a", "filename": "gcc/alias.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -944,7 +944,7 @@ record_alias_subset (alias_set_type superset, alias_set_type subset)\n     {\n       /* Create an entry for the SUPERSET, so that we have a place to\n \t attach the SUBSET.  */\n-      superset_entry = ggc_alloc_cleared_alias_set_entry_d ();\n+      superset_entry = ggc_cleared_alloc<alias_set_entry_d> ();\n       superset_entry->alias_set = superset;\n       superset_entry->children\n \t= splay_tree_new_ggc (splay_tree_compare_ints,"}, {"sha": "119cb66d901c60dacb586028b22c3d694b5431fb", "filename": "gcc/bitmap.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fbitmap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fbitmap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -244,7 +244,7 @@ bitmap_element_allocate (bitmap head)\n \t  /*  Inner list was just a singleton.  */\n \t  bitmap_ggc_free = element->prev;\n       else\n-\telement = ggc_alloc_bitmap_element ();\n+\telement = ggc_alloc<bitmap_element> ();\n     }\n \n   if (GATHER_STATISTICS)\n@@ -388,7 +388,7 @@ bitmap_gc_alloc_stat (ALONE_MEM_STAT_DECL)\n {\n   bitmap map;\n \n-  map = ggc_alloc_bitmap_head ();\n+  map = ggc_alloc<bitmap_head> ();\n   bitmap_initialize_stat (map, NULL PASS_MEM_STAT);\n \n   if (GATHER_STATISTICS)"}, {"sha": "c88cf59c459c1636e3c62c338f3e97ee41b0bb56", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -1,3 +1,9 @@\n+2014-05-17  Trevor Saunders  <tsaunders@mozilla.com>\n+\n+\t* c-common.h (sorted_fields_type): Remove variable_size GTY attribute.\n+\t* c-pragma.c (push_alignment): Adjust.\n+\t(handle_pragma_push_options): Likewise.\n+\n 2014-05-09  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/50459"}, {"sha": "59e809a1886c01a3d411e864ee09add946040e73", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -440,7 +440,7 @@ extern GTY(()) tree c_global_trees[CTI_MAX];\n \n /* In a RECORD_TYPE, a sorted array of the fields of the type, not a\n    tree for size reasons.  */\n-struct GTY((variable_size)) sorted_fields_type {\n+struct GTY(()) sorted_fields_type {\n   int len;\n   tree GTY((length (\"%h.len\"))) elts[1];\n };"}, {"sha": "7b016abad08a1e01e9b993ea6604d1dfe9942489", "filename": "gcc/c-family/c-pragma.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fc-family%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fc-family%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pragma.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -74,9 +74,7 @@ static void pop_alignment (tree);\n static void\n push_alignment (int alignment, tree id)\n {\n-  align_stack * entry;\n-\n-  entry = ggc_alloc_align_stack ();\n+  align_stack * entry = ggc_alloc<align_stack> ();\n \n   entry->alignment  = alignment;\n   entry->id\t    = id;\n@@ -911,7 +909,6 @@ handle_pragma_push_options (cpp_reader *ARG_UNUSED(dummy))\n {\n   enum cpp_ttype token;\n   tree x = 0;\n-  opt_stack *p;\n \n   token = pragma_lex (&x);\n   if (token != CPP_EOF)\n@@ -920,7 +917,7 @@ handle_pragma_push_options (cpp_reader *ARG_UNUSED(dummy))\n       return;\n     }\n \n-  p = ggc_alloc_opt_stack ();\n+  opt_stack *p = ggc_alloc<opt_stack> ();\n   p->prev = options_stack;\n   options_stack = p;\n "}, {"sha": "1266d4ea96997d354c1db02b6a95c529c1db4f89", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -1,3 +1,20 @@\n+2014-05-17  Trevor Saunders  <tsaunders@mozilla.com>\n+\n+\t* c-decl.c (finish_struct): Adjust.\n+\t(finish_enum): Likewise.\n+\t(bind): Adjust.\n+\t(record_inline_static): Likewise.\n+\t(push_scope): Likewise.\n+\t(make_label): Likewise.\n+\t(lookup_label_for_goto): Likewise.\n+\t(finish_struct): Likewise.\n+\t(finish_enum): Likewise.\n+\t(store_parm_decls): Likewise.\n+\t(c_push_function_context): Likewise.\n+\t* c-lang.h: Remove usage of variable_size gty attribute.\n+\t* c-parser.c (c_parse_init): Adjust.\n+\t(c_parse_file): Likewise.\n+\n 2014-05-13  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/61162"}, {"sha": "75d12205b04d1942ed3fd1dff862c4ab6826e26f", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -638,7 +638,7 @@ bind (tree name, tree decl, struct c_scope *scope, bool invisible,\n       binding_freelist = b->prev;\n     }\n   else\n-    b = ggc_alloc_c_binding ();\n+    b = ggc_alloc<c_binding> ();\n \n   b->shadowed = 0;\n   b->decl = decl;\n@@ -755,7 +755,7 @@ void\n record_inline_static (location_t loc, tree func, tree decl,\n \t\t      enum c_inline_static_type type)\n {\n-  struct c_inline_static *csi = ggc_alloc_c_inline_static ();\n+  c_inline_static *csi = ggc_alloc<c_inline_static> ();\n   csi->location = loc;\n   csi->function = func;\n   csi->static_decl = decl;\n@@ -952,7 +952,7 @@ push_scope (void)\n \t  scope_freelist = scope->outer;\n \t}\n       else\n-\tscope = ggc_alloc_cleared_c_scope ();\n+\tscope = ggc_cleared_alloc<c_scope> ();\n \n       /* The FLOAT_CONST_DECIMAL64 pragma applies to nested scopes.  */\n       if (current_scope)\n@@ -3084,12 +3084,10 @@ make_label (location_t location, tree name, bool defining,\n \t    struct c_label_vars **p_label_vars)\n {\n   tree label = build_decl (location, LABEL_DECL, name, void_type_node);\n-  struct c_label_vars *label_vars;\n-\n   DECL_CONTEXT (label) = current_function_decl;\n   DECL_MODE (label) = VOIDmode;\n \n-  label_vars = ggc_alloc_c_label_vars ();\n+  c_label_vars *label_vars = ggc_alloc<c_label_vars> ();\n   label_vars->shadowed = NULL;\n   set_spot_bindings (&label_vars->label_bindings, defining);\n   label_vars->decls_in_scope = make_tree_vector ();\n@@ -3185,9 +3183,8 @@ lookup_label_for_goto (location_t loc, tree name)\n      list for possible later warnings.  */\n   if (label_vars->label_bindings.scope == NULL)\n     {\n-      struct c_goto_bindings *g;\n+      c_goto_bindings *g = ggc_alloc<c_goto_bindings> ();\n \n-      g = ggc_alloc_c_goto_bindings ();\n       g->loc = loc;\n       set_spot_bindings (&g->goto_bindings, true);\n       vec_safe_push (label_vars->gotos, g);\n@@ -7423,8 +7420,8 @@ finish_struct (location_t loc, tree t, tree fieldlist, tree attributes,\n \t  ensure that this lives as long as the rest of the struct decl.\n \t  All decls in an inline function need to be saved.  */\n \n-\tspace = ggc_alloc_cleared_lang_type (sizeof (struct lang_type));\n-\tspace2 = ggc_alloc_sorted_fields_type\n+\tspace = ggc_cleared_alloc<struct lang_type> ();\n+\tspace2 = (sorted_fields_type *) ggc_internal_alloc\n \t  (sizeof (struct sorted_fields_type) + len * sizeof (tree));\n \n \tlen = 0;\n@@ -7705,7 +7702,7 @@ finish_enum (tree enumtype, tree values, tree attributes)\n \n   /* Record the min/max values so that we can warn about bit-field\n      enumerations that are too small for the values.  */\n-  lt = ggc_alloc_cleared_lang_type (sizeof (struct lang_type));\n+  lt = ggc_cleared_alloc<struct lang_type> ();\n   lt->enum_min = minnode;\n   lt->enum_max = maxnode;\n   TYPE_LANG_SPECIFIC (enumtype) = lt;\n@@ -8479,7 +8476,7 @@ store_parm_decls (void)\n   allocate_struct_function (fndecl, false);\n \n   if (warn_unused_local_typedefs)\n-    cfun->language = ggc_alloc_cleared_language_function ();\n+    cfun->language = ggc_cleared_alloc<language_function> ();\n \n   /* Begin the statement tree for this function.  */\n   DECL_SAVED_TREE (fndecl) = push_stmt_list ();\n@@ -8803,7 +8800,7 @@ c_push_function_context (void)\n   /* cfun->language might have been already allocated by the use of\n      -Wunused-local-typedefs.  In that case, just re-use it.  */\n   if (p == NULL)\n-    cfun->language = p = ggc_alloc_cleared_language_function ();\n+    cfun->language = p = ggc_cleared_alloc<language_function> ();\n \n   p->base.x_stmt_tree = c_stmt_tree;\n   c_stmt_tree.x_cur_stmt_list = vec_safe_copy (c_stmt_tree.x_cur_stmt_list);"}, {"sha": "e97490642e7c70b53c5c83ada448cedcf75ce0dc", "filename": "gcc/c/c-lang.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fc%2Fc-lang.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fc%2Fc-lang.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-lang.h?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -23,7 +23,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"c-family/c-common.h\"\n #include \"ggc.h\"\n \n-struct GTY((variable_size)) lang_type {\n+struct GTY(()) lang_type {\n   /* In a RECORD_TYPE, a sorted array of the fields of the type.  */\n   struct sorted_fields_type * GTY ((reorder (\"resort_sorted_fields\"))) s;\n   /* In an ENUMERAL_TYPE, the min and max values.  */\n@@ -35,7 +35,7 @@ struct GTY((variable_size)) lang_type {\n   tree objc_info;\n };\n \n-struct GTY((variable_size)) lang_decl {\n+struct GTY(()) lang_decl {\n   char dummy;\n };\n "}, {"sha": "bfc714736fd31341bb27432cdbc9103afb48d4ff", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -90,7 +90,7 @@ c_parse_init (void)\n   if (!c_dialect_objc ())\n     mask |= D_OBJC | D_CXX_OBJC;\n \n-  ridpointers = ggc_alloc_cleared_vec_tree ((int) RID_MAX);\n+  ridpointers = ggc_cleared_vec_alloc<tree> ((int) RID_MAX);\n   for (i = 0; i < num_c_common_reswords; i++)\n     {\n       /* If a keyword is disabled, do not enter it into the table\n@@ -14061,7 +14061,7 @@ c_parse_file (void)\n   if (c_parser_peek_token (&tparser)->pragma_kind == PRAGMA_GCC_PCH_PREPROCESS)\n     c_parser_pragma_pch_preprocess (&tparser);\n \n-  the_parser = ggc_alloc_c_parser ();\n+  the_parser = ggc_alloc<c_parser> ();\n   *the_parser = tparser;\n   if (tparser.tokens == &tparser.tokens_buf[0])\n     the_parser->tokens = &the_parser->tokens_buf[0];"}, {"sha": "aef11458daf13f24a66d5023f6a673768bce3efe", "filename": "gcc/cfg.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fcfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fcfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfg.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -68,13 +68,13 @@ void\n init_flow (struct function *the_fun)\n {\n   if (!the_fun->cfg)\n-    the_fun->cfg = ggc_alloc_cleared_control_flow_graph ();\n+    the_fun->cfg = ggc_cleared_alloc<control_flow_graph> ();\n   n_edges_for_fn (the_fun) = 0;\n   ENTRY_BLOCK_PTR_FOR_FN (the_fun)\n-    = ggc_alloc_cleared_basic_block_def ();\n+    = ggc_cleared_alloc<basic_block_def> ();\n   ENTRY_BLOCK_PTR_FOR_FN (the_fun)->index = ENTRY_BLOCK;\n   EXIT_BLOCK_PTR_FOR_FN (the_fun)\n-    = ggc_alloc_cleared_basic_block_def ();\n+    = ggc_cleared_alloc<basic_block_def> ();\n   EXIT_BLOCK_PTR_FOR_FN (the_fun)->index = EXIT_BLOCK;\n   ENTRY_BLOCK_PTR_FOR_FN (the_fun)->next_bb\n     = EXIT_BLOCK_PTR_FOR_FN (the_fun);\n@@ -123,7 +123,7 @@ basic_block\n alloc_block (void)\n {\n   basic_block bb;\n-  bb = ggc_alloc_cleared_basic_block_def ();\n+  bb = ggc_cleared_alloc<basic_block_def> ();\n   return bb;\n }\n \n@@ -261,7 +261,7 @@ edge\n unchecked_make_edge (basic_block src, basic_block dst, int flags)\n {\n   edge e;\n-  e = ggc_alloc_cleared_edge_def ();\n+  e = ggc_cleared_alloc<edge_def> ();\n   n_edges_for_fn (cfun)++;\n \n   e->src = src;"}, {"sha": "73f79ef368c98842786effe05621ecaf2ff57fb7", "filename": "gcc/cfgloop.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fcfgloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fcfgloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -331,9 +331,9 @@ flow_loop_tree_node_remove (struct loop *loop)\n struct loop *\n alloc_loop (void)\n {\n-  struct loop *loop = ggc_alloc_cleared_loop ();\n+  struct loop *loop = ggc_cleared_alloc<struct loop> ();\n \n-  loop->exits = ggc_alloc_cleared_loop_exit ();\n+  loop->exits = ggc_cleared_alloc<loop_exit> ();\n   loop->exits->next = loop->exits->prev = loop->exits;\n   loop->can_be_parallel = false;\n   loop->nb_iterations_upper_bound = 0;\n@@ -415,7 +415,7 @@ flow_loops_find (struct loops *loops)\n \n   if (!loops)\n     {\n-      loops = ggc_alloc_cleared_loops ();\n+      loops = ggc_cleared_alloc<struct loops> ();\n       init_loops_structure (cfun, loops, 1);\n     }\n \n@@ -1029,7 +1029,7 @@ rescan_loop_exit (edge e, bool new_edge, bool removed)\n \t   aloop != cloop;\n \t   aloop = loop_outer (aloop))\n \t{\n-\t  exit = ggc_alloc_loop_exit ();\n+\t  exit = ggc_alloc<loop_exit> ();\n \t  exit->e = e;\n \n \t  exit->next = aloop->exits->next;"}, {"sha": "51dbb9e3d22db2ff9677bbf8478f66023c15ea3b", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -4954,7 +4954,7 @@ init_rtl_bb_info (basic_block bb)\n {\n   gcc_assert (!bb->il.x.rtl);\n   bb->il.x.head_ = NULL;\n-  bb->il.x.rtl = ggc_alloc_cleared_rtl_bb_info ();\n+  bb->il.x.rtl = ggc_cleared_alloc<rtl_bb_info> ();\n }\n \n /* Returns true if it is possible to remove edge E by redirecting"}, {"sha": "e3ddc235009377500c407d790deacd73003177a3", "filename": "gcc/cgraph.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -198,7 +198,7 @@ insert_new_cgraph_node_version (struct cgraph_node *node)\n   void **slot;\n   \n   version_info_node = NULL;\n-  version_info_node = ggc_alloc_cleared_cgraph_function_version_info ();\n+  version_info_node = ggc_cleared_alloc<cgraph_function_version_info> ();\n   version_info_node->this_node = node;\n \n   if (cgraph_fnver_htab == NULL)\n@@ -507,7 +507,7 @@ cgraph_allocate_node (void)\n     }\n   else\n     {\n-      node = ggc_alloc_cleared_cgraph_node ();\n+      node = ggc_cleared_alloc<cgraph_node> ();\n       node->uid = cgraph_max_uid++;\n     }\n \n@@ -865,7 +865,7 @@ cgraph_create_edge_1 (struct cgraph_node *caller, struct cgraph_node *callee,\n     }\n   else\n     {\n-      edge = ggc_alloc_cgraph_edge ();\n+      edge = ggc_alloc<struct cgraph_edge> ();\n       edge->uid = cgraph_edge_max_uid++;\n     }\n \n@@ -937,7 +937,7 @@ cgraph_allocate_init_indirect_info (void)\n {\n   struct cgraph_indirect_call_info *ii;\n \n-  ii = ggc_alloc_cleared_cgraph_indirect_call_info ();\n+  ii = ggc_cleared_alloc<cgraph_indirect_call_info> ();\n   ii->param_index = -1;\n   return ii;\n }"}, {"sha": "d61e0f74db79f471d6b1706baeb76203282dee1a", "filename": "gcc/cgraphclones.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fcgraphclones.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fcgraphclones.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphclones.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -146,7 +146,7 @@ cgraph_clone_edge (struct cgraph_edge *e, struct cgraph_node *n,\n       if (e->indirect_info)\n \t{\n \t  new_edge->indirect_info\n-\t    = ggc_alloc_cleared_cgraph_indirect_call_info ();\n+\t    = ggc_cleared_alloc<cgraph_indirect_call_info> ();\n \t  *new_edge->indirect_info = *e->indirect_info;\n \t}\n     }"}, {"sha": "f5d95942f083148822eaab9c7d348fdd49c31c7e", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -570,7 +570,7 @@ add_asm_node (tree asm_str)\n {\n   struct asm_node *node;\n \n-  node = ggc_alloc_cleared_asm_node ();\n+  node = ggc_cleared_alloc<asm_node> ();\n   node->asm_str = asm_str;\n   node->order = symtab_order++;\n   node->next = NULL;\n@@ -1337,7 +1337,7 @@ init_lowered_empty_function (tree decl, bool in_ssa)\n   cfun->curr_properties |= (PROP_gimple_lcf | PROP_gimple_leh | PROP_gimple_any\n \t\t\t    | PROP_cfg | PROP_loops);\n \n-  set_loops_for_fn (cfun, ggc_alloc_cleared_loops ());\n+  set_loops_for_fn (cfun, ggc_cleared_alloc<loops> ());\n   init_loops_structure (cfun, loops_for_fn (cfun), 1);\n   loops_for_fn (cfun)->state |= LOOPS_MAY_HAVE_MULTIPLE_LATCHES;\n "}, {"sha": "66ab1b7a5ff905ba7f19cd636c1a9a9e1f86ded1", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -6235,7 +6235,7 @@ static struct machine_function *\n aarch64_init_machine_status (void)\n {\n   struct machine_function *machine;\n-  machine = ggc_alloc_cleared_machine_function ();\n+  machine = ggc_cleared_alloc<machine_function> ();\n   return machine;\n }\n "}, {"sha": "efef1e982d386624be43290c4093d27bc5aeba9e", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -4748,7 +4748,7 @@ struct GTY(()) machine_function\n static struct machine_function *\n alpha_init_machine_status (void)\n {\n-  return ggc_alloc_cleared_machine_function ();\n+  return ggc_cleared_alloc<machine_function> ();\n }\n \n /* Support for frame based VMS condition handlers.  */\n@@ -9576,7 +9576,7 @@ alpha_use_linkage (rtx func, bool lflag, bool rflag)\n       linksym = (char *) alloca (buf_len);\n       snprintf (linksym, buf_len, \"$%d..%s..lk\", cfun->funcdef_no, name);\n \n-      al = ggc_alloc_alpha_links ();\n+      al = ggc_alloc<alpha_links> ();\n       al->func = func;\n       al->linkage = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (linksym));\n "}, {"sha": "a9161b30a710e62334931044508d667285115bac", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -8722,7 +8722,7 @@ static struct machine_function *\n arc_init_machine_status (void)\n {\n   struct machine_function *machine;\n-  machine = ggc_alloc_cleared_machine_function ();\n+  machine = ggc_cleared_alloc<machine_function> ();\n   machine->fn_type = ARC_FUNCTION_UNKNOWN;\n   machine->force_short_suffix = -1;\n "}, {"sha": "bd86a58f2ee7fe03476d6b8a2a1f3adc771dc1e5", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -26710,7 +26710,7 @@ static struct machine_function *\n arm_init_machine_status (void)\n {\n   struct machine_function *machine;\n-  machine = ggc_alloc_cleared_machine_function ();\n+  machine = ggc_cleared_alloc<machine_function> ();\n \n #if ARM_FT_UNKNOWN != 0\n   machine->func_type = ARM_FT_UNKNOWN;"}, {"sha": "2b6b4878e3ceced7b5aba4aac718cbdb48e7ea51", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -359,7 +359,7 @@ avr_option_override (void)\n static struct machine_function *\n avr_init_machine_status (void)\n {\n-  return ggc_alloc_cleared_machine_function ();\n+  return ggc_cleared_alloc<machine_function> ();\n }\n \n "}, {"sha": "f8600998d5ea80fd2c8901867505bf5264b3956d", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -2317,7 +2317,7 @@ bfin_class_likely_spilled_p (reg_class_t rclass)\n static struct machine_function *\n bfin_init_machine_status (void)\n {\n-  return ggc_alloc_cleared_machine_function ();\n+  return ggc_cleared_alloc<machine_function> ();\n }\n \n /* Implement the TARGET_OPTION_OVERRIDE hook.  */"}, {"sha": "2da2790bf533feb7d55eb19f7db92a95ac1057c3", "filename": "gcc/config/c6x/c6x.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fconfig%2Fc6x%2Fc6x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fconfig%2Fc6x%2Fc6x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -205,7 +205,7 @@ unsigned const dbx_register_map[FIRST_PSEUDO_REGISTER] =\n static struct machine_function *\n c6x_init_machine_status (void)\n {\n-  return ggc_alloc_cleared_machine_function ();\n+  return ggc_cleared_alloc<machine_function> ();\n }\n \n /* Implement TARGET_OPTION_OVERRIDE.  */"}, {"sha": "194dd14f9bfdf2ab284b772ba7cdb8578b2e1b2f", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -2808,7 +2808,7 @@ cris_init_expanders (void)\n static struct machine_function *\n cris_init_machine_status (void)\n {\n-  return ggc_alloc_cleared_machine_function ();\n+  return ggc_cleared_alloc<machine_function> ();\n }\n \n /* Split a 2 word move (DI or presumably DF) into component parts."}, {"sha": "462c81d0a08706268e1e2cd6c7474eba14a5cced", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -561,7 +561,7 @@ machopic_indirection_name (rtx sym_ref, bool stub_p)\n     }\n   else\n     {\n-      p = ggc_alloc_machopic_indirection ();\n+      p = ggc_alloc<machopic_indirection> ();\n       p->symbol = sym_ref;\n       p->ptr_name = xstrdup (buffer);\n       p->stub_p = stub_p;\n@@ -3499,7 +3499,7 @@ darwin_build_constant_cfstring (tree str)\n \t      }\n \t}\n \n-      *loc = desc = ggc_alloc_cleared_cfstring_descriptor ();\n+      *loc = desc = ggc_cleared_alloc<cfstring_descriptor> ();\n       desc->literal = str;\n \n       /* isa *. */\n@@ -3586,7 +3586,7 @@ darwin_enter_string_into_cfstring_table (tree str)\n \n   if (!*loc)\n     {\n-      *loc = ggc_alloc_cleared_cfstring_descriptor ();\n+      *loc = ggc_cleared_alloc<cfstring_descriptor> ();\n       ((struct cfstring_descriptor *)*loc)->literal = str;\n     }\n }"}, {"sha": "598f61b4e52fc4ca85787e4cd6b67c992cae43f6", "filename": "gcc/config/epiphany/epiphany.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -982,7 +982,7 @@ epiphany_init_machine_status (void)\n   /* Reset state info for each function.  */\n   current_frame_info = zero_frame_info;\n \n-  machine = ggc_alloc_cleared_machine_function_t ();\n+  machine = ggc_cleared_alloc<machine_function_t> ();\n \n   return machine;\n }"}, {"sha": "2b0a0b233a5ce43516008944b87106f0c6ce0ac6", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -7009,7 +7009,7 @@ frv_assemble_integer (rtx value, unsigned int size, int aligned_p)\n static struct machine_function *\n frv_init_machine_status (void)\n {\n-  return ggc_alloc_cleared_machine_function ();\n+  return ggc_cleared_alloc<machine_function> ();\n }\n \f\n /* Implement TARGET_SCHED_ISSUE_RATE.  */"}, {"sha": "6ffb7884008fd64b8070e5b050e16455a51669b8", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -13673,7 +13673,7 @@ get_dllimport_decl (tree decl, bool beimport)\n   if (h)\n     return h->to;\n \n-  *loc = h = ggc_alloc_tree_map ();\n+  *loc = h = ggc_alloc<tree_map> ();\n   h->hash = in.hash;\n   h->base.from = decl;\n   h->to = to = build_decl (DECL_SOURCE_LOCATION (decl),\n@@ -25035,7 +25035,7 @@ ix86_init_machine_status (void)\n {\n   struct machine_function *f;\n \n-  f = ggc_alloc_cleared_machine_function ();\n+  f = ggc_cleared_alloc<machine_function> ();\n   f->use_fast_prologue_epilogue_nregs = -1;\n   f->call_abi = ix86_abi;\n \n@@ -25059,7 +25059,7 @@ assign_386_stack_local (enum machine_mode mode, enum ix86_stack_slot n)\n     if (s->mode == mode && s->n == n)\n       return validize_mem (copy_rtx (s->rtl));\n \n-  s = ggc_alloc_stack_local_entry ();\n+  s = ggc_alloc<stack_local_entry> ();\n   s->n = n;\n   s->mode = mode;\n   s->rtl = assign_stack_local (mode, GET_MODE_SIZE (mode), 0);"}, {"sha": "6cdc29f3ed3f6f1d4c66d04e980096de57c646ba", "filename": "gcc/config/i386/winnt.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fconfig%2Fi386%2Fwinnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fconfig%2Fi386%2Fwinnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -649,7 +649,7 @@ i386_pe_record_external_function (tree decl, const char *name)\n {\n   struct extern_list *p;\n \n-  p = ggc_alloc_extern_list ();\n+  p = ggc_alloc<extern_list> ();\n   p->next = extern_head;\n   p->decl = decl;\n   p->name = name;\n@@ -700,7 +700,7 @@ i386_pe_maybe_record_exported_symbol (tree decl, const char *name, int is_data)\n \n   gcc_assert (TREE_PUBLIC (decl));\n \n-  p = ggc_alloc_export_list ();\n+  p = ggc_alloc<export_list> ();\n   p->next = export_head;\n   p->name = name;\n   p->is_data = is_data;\n@@ -724,7 +724,7 @@ i386_pe_record_stub (const char *name)\n       p = p->next;\n     }\n \n-  p = ggc_alloc_stub_list ();\n+  p = ggc_alloc<stub_list> ();\n   p->next = stub_head;\n   p->name = name;\n   stub_head = p;"}, {"sha": "e1dd86adc0b21ffb53a2cab12e6dbacf9f737235", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -6046,7 +6046,7 @@ void ia64_init_expanders (void)\n static struct machine_function *\n ia64_init_machine_status (void)\n {\n-  return ggc_alloc_cleared_machine_function ();\n+  return ggc_cleared_alloc<machine_function> ();\n }\n \f\n static enum attr_itanium_class ia64_safe_itanium_class (rtx);"}, {"sha": "717df2e9d3842cf2e0c590f07882eed4cd1457e6", "filename": "gcc/config/iq2000/iq2000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -1424,7 +1424,7 @@ iq2000_va_start (tree valist, rtx nextarg)\n static struct machine_function *\n iq2000_init_machine_status (void)\n {\n-  return ggc_alloc_cleared_machine_function ();\n+  return ggc_cleared_alloc<machine_function> ();\n }\n \n /* Detect any conflicts in the switches.  */"}, {"sha": "75f67f741e2304d0508039278349865867582dab", "filename": "gcc/config/m32c/m32c.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fconfig%2Fm32c%2Fm32c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fconfig%2Fm32c%2Fm32c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -460,7 +460,7 @@ m32c_override_options_after_change (void)\n static struct machine_function *\n m32c_init_machine_status (void)\n {\n-  return ggc_alloc_cleared_machine_function ();\n+  return ggc_cleared_alloc<machine_function> ();\n }\n \n /* Implements INIT_EXPANDERS.  We just set up to call the above\n@@ -3075,7 +3075,7 @@ m32c_note_pragma_address (const char *varname, unsigned address)\n \n   if (!*slot)\n     {\n-      *slot = ggc_alloc_pragma_entry ();\n+      *slot = ggc_alloc<pragma_entry> ();\n       (*slot)->varname = ggc_strdup (varname);\n     }\n   (*slot)->address = address;"}, {"sha": "c780b5afdea006e8f70a7f0fd212c348841246bc", "filename": "gcc/config/mep/mep.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fconfig%2Fmep%2Fmep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fconfig%2Fmep%2Fmep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -2225,7 +2225,7 @@ mep_register_move_cost (enum machine_mode mode, enum reg_class from, enum reg_cl\n static struct machine_function *\n mep_init_machine_status (void)\n {\n-  return ggc_alloc_cleared_machine_function ();\n+  return ggc_cleared_alloc<machine_function> ();\n }\n \n static rtx\n@@ -4099,7 +4099,7 @@ mep_note_pragma_flag (const char *funcname, int flag)\n \n   if (!*slot)\n     {\n-      *slot = ggc_alloc_pragma_entry ();\n+      *slot = ggc_alloc<pragma_entry> ();\n       (*slot)->flag = 0;\n       (*slot)->used = 0;\n       (*slot)->funcname = ggc_strdup (funcname);"}, {"sha": "a754353a98b80dbc69170097dd146a3817f8579a", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -1241,7 +1241,7 @@ mflip_mips16_use_mips16_p (tree decl)\n   if (!entry)\n     {\n       mips16_flipper = !mips16_flipper;\n-      entry = ggc_alloc_mflip_mips16_entry ();\n+      entry = ggc_alloc<mflip_mips16_entry> ();\n       entry->name = name;\n       entry->mips16_p = mips16_flipper ? !base_is_mips16 : base_is_mips16;\n       *slot = entry;\n@@ -6451,7 +6451,7 @@ mips16_local_alias (rtx func)\n       SYMBOL_REF_FLAGS (local) = SYMBOL_REF_FLAGS (func) | SYMBOL_FLAG_LOCAL;\n \n       /* Create a new structure to represent the mapping.  */\n-      alias = ggc_alloc_mips16_local_alias ();\n+      alias = ggc_alloc<struct mips16_local_alias> ();\n       alias->func = func;\n       alias->local = local;\n       *slot = alias;\n@@ -16829,7 +16829,7 @@ mips_set_current_function (tree fndecl)\n static struct machine_function *\n mips_init_machine_status (void)\n {\n-  return ggc_alloc_cleared_machine_function ();\n+  return ggc_cleared_alloc<machine_function> ();\n }\n \n /* Return the processor associated with the given ISA level, or null"}, {"sha": "d40b67c7a09addfbd49b7f46980ef9610f44a912", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -313,7 +313,7 @@ mmix_init_expanders (void)\n static struct machine_function *\n mmix_init_machine_status (void)\n {\n-  return ggc_alloc_cleared_machine_function ();\n+  return ggc_cleared_alloc<machine_function> ();\n }\n \n /* DATA_ABI_ALIGNMENT."}, {"sha": "a5eaa5f59b0c7f2301fa1b0f7bd1211ff08a5471", "filename": "gcc/config/moxie/moxie.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fconfig%2Fmoxie%2Fmoxie.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fconfig%2Fmoxie%2Fmoxie.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmoxie%2Fmoxie.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -229,7 +229,7 @@ struct GTY(()) machine_function\n static struct machine_function *\n moxie_init_machine_status (void)\n {\n-  return ggc_alloc_cleared_machine_function ();\n+  return ggc_cleared_alloc<machine_function> ();\n }\n \n "}, {"sha": "e851a1440ec84c015ad4d4e5f43e5efada0b2a50", "filename": "gcc/config/msp430/msp430.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -90,7 +90,7 @@ msp430_init_machine_status (void)\n {\n   struct machine_function *m;\n \n-  m = ggc_alloc_cleared_machine_function ();\n+  m = ggc_cleared_alloc<machine_function> ();\n \n   return m;\n }"}, {"sha": "47b1318bb0ea48192e6e8a569d32dcb613537a85", "filename": "gcc/config/nds32/nds32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fconfig%2Fnds32%2Fnds32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fconfig%2Fnds32%2Fnds32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -131,7 +131,7 @@ static struct machine_function *\n nds32_init_machine_status (void)\n {\n   struct machine_function *machine;\n-  machine = ggc_alloc_cleared_machine_function ();\n+  machine = ggc_cleared_alloc<machine_function> ();\n \n   /* Initially assume this function needs prologue/epilogue.  */\n   machine->naked_p = 0;"}, {"sha": "ff3536d1c2177e5a47e39cd8cdddbe8c620a88b3", "filename": "gcc/config/nios2/nios2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fconfig%2Fnios2%2Fnios2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fconfig%2Fnios2%2Fnios2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fnios2.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -986,7 +986,7 @@ nios2_handle_custom_fpu_insn_option (int fpu_insn_index)\n static struct machine_function *\n nios2_init_machine_status (void)\n {\n-  return ggc_alloc_cleared_machine_function ();\n+  return ggc_cleared_alloc<machine_function> ();\n }\n \n /* Implement TARGET_OPTION_OVERRIDE.  */"}, {"sha": "95dcbb917cf1ed72c25bbc738d20ddc845a7977d", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -668,7 +668,7 @@ pa_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n static struct machine_function *\n pa_init_machine_status (void)\n {\n-  return ggc_alloc_cleared_machine_function ();\n+  return ggc_cleared_alloc<machine_function> ();\n }\n \n /* If FROM is a probable pointer register, mark TO as a probable\n@@ -5583,7 +5583,7 @@ pa_get_deferred_plabel (rtx symbol)\n       tree id;\n \n       if (deferred_plabels == 0)\n-\tdeferred_plabels =  ggc_alloc_deferred_plabel ();\n+\tdeferred_plabels =  ggc_alloc<deferred_plabel> ();\n       else\n         deferred_plabels = GGC_RESIZEVEC (struct deferred_plabel,\n                                           deferred_plabels,"}, {"sha": "09baa76b984b4fe2eb7015c35a0c8ba0ff4a55ab", "filename": "gcc/config/rl78/rl78.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fconfig%2Frl78%2Frl78.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fconfig%2Frl78%2Frl78.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frl78%2Frl78.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -111,7 +111,7 @@ rl78_init_machine_status (void)\n {\n   struct machine_function *m;\n \n-  m = ggc_alloc_cleared_machine_function ();\n+  m = ggc_cleared_alloc<machine_function> ();\n   m->virt_insns_ok = 1;\n \n   return m;"}, {"sha": "cd7b8c1f49d85f277c2ac548b9dc592cda159e34", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -15103,7 +15103,7 @@ builtin_function_type (enum machine_mode mode_ret, enum machine_mode mode_arg0,\n   found = htab_find_slot (builtin_hash_table, &h, INSERT);\n   if (*found == NULL)\n     {\n-      h2 = ggc_alloc_builtin_hash_struct ();\n+      h2 = ggc_alloc<builtin_hash_struct> ();\n       *h2 = h;\n       *found = (void *)h2;\n \n@@ -17635,7 +17635,7 @@ static struct machine_function *\n rs6000_init_machine_status (void)\n {\n   stack_info.reload_completed = 0;\n-  return ggc_alloc_cleared_machine_function ();\n+  return ggc_cleared_alloc<machine_function> ();\n }\n \f\n #define INT_P(X) (GET_CODE (X) == CONST_INT && GET_MODE (X) == VOIDmode)\n@@ -25459,7 +25459,7 @@ output_toc (FILE *file, rtx x, int labelno, enum machine_mode mode)\n \ttoc_hash_table = htab_create_ggc (1021, toc_hash_function,\n \t\t\t\t\t  toc_hash_eq, NULL);\n \n-      h = ggc_alloc_toc_hash_struct ();\n+      h = ggc_alloc<toc_hash_struct> ();\n       h->key = x;\n       h->key_mode = mode;\n       h->labelno = labelno;"}, {"sha": "417e2a826b708969f0c9b37ef46f7c93c725864c", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -1675,7 +1675,7 @@ s390_narrow_logical_operator (enum rtx_code code, rtx *memop, rtx *immop)\n static struct machine_function *\n s390_init_machine_status (void)\n {\n-  return ggc_alloc_cleared_machine_function ();\n+  return ggc_cleared_alloc<machine_function> ();\n }\n \n /* Map for smallest class containing reg regno.  */"}, {"sha": "e42960289c7caa96bde9c5ae859475ada052cdad", "filename": "gcc/config/score/score.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fconfig%2Fscore%2Fscore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fconfig%2Fscore%2Fscore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -1199,7 +1199,7 @@ score_output_external (FILE *file ATTRIBUTE_UNUSED,\n \n   if (score_in_small_data_p (decl))\n     {\n-      p = ggc_alloc_extern_list ();\n+      p = ggc_alloc<extern_list> ();\n       p->next = extern_head;\n       p->name = name;\n       p->size = int_size_in_bytes (TREE_TYPE (decl));"}, {"sha": "30d4159a4977cae300ab9082f7c68e21ce37b5a0", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -11478,7 +11478,7 @@ sparc_can_output_mi_thunk (const_tree thunk_fndecl ATTRIBUTE_UNUSED,\n static struct machine_function *\n sparc_init_machine_status (void)\n {\n-  return ggc_alloc_cleared_machine_function ();\n+  return ggc_cleared_alloc<machine_function> ();\n }\n \n /* Locate some local-dynamic symbol still in use by this function"}, {"sha": "41d3c2c5e0316534da0f866a49c160f23521bdf9", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -223,7 +223,7 @@ struct GTY(()) machine_function\n static struct machine_function *\n spu_init_machine_status (void)\n {\n-  return ggc_alloc_cleared_machine_function ();\n+  return ggc_cleared_alloc<machine_function> ();\n }\n \n /* Implement TARGET_OPTION_OVERRIDE.  */"}, {"sha": "70fce93bd6a407ab8349f3b778b466641966dd5f", "filename": "gcc/config/tilegx/tilegx.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fconfig%2Ftilegx%2Ftilegx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fconfig%2Ftilegx%2Ftilegx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilegx%2Ftilegx.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -735,7 +735,7 @@ create_temp_reg_if_possible (enum machine_mode mode, rtx default_reg)\n static struct machine_function *\n tilegx_init_machine_status (void)\n {\n-  return ggc_alloc_cleared_machine_function ();\n+  return ggc_cleared_alloc<machine_function> ();\n }\n \n "}, {"sha": "e89a733746b57028970145417b530a2dc2c55800", "filename": "gcc/config/tilepro/tilepro.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fconfig%2Ftilepro%2Ftilepro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fconfig%2Ftilepro%2Ftilepro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilepro%2Ftilepro.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -674,7 +674,7 @@ create_temp_reg_if_possible (enum machine_mode mode, rtx default_reg)\n static struct machine_function *\n tilepro_init_machine_status (void)\n {\n-  return ggc_alloc_cleared_machine_function ();\n+  return ggc_cleared_alloc<machine_function> ();\n }\n \n "}, {"sha": "6b6693ff3414e25d7e67ea5b2723ac74ee1a1c3b", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -1355,7 +1355,7 @@ xtensa_expand_nonlocal_goto (rtx *operands)\n static struct machine_function *\n xtensa_init_machine_status (void)\n {\n-  return ggc_alloc_cleared_machine_function ();\n+  return ggc_cleared_alloc<machine_function> ();\n }\n \n "}, {"sha": "5e9005eb1b89a49e6bc129387fa0ed64a037aad1", "filename": "gcc/coverage.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fcoverage.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fcoverage.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoverage.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -667,7 +667,7 @@ coverage_end_function (unsigned lineno_checksum, unsigned cfg_checksum)\n \t list.  */\n       if (!DECL_EXTERNAL (current_function_decl))\n \t{\n-\t  item = ggc_alloc_coverage_data ();\n+\t  item = ggc_alloc<coverage_data> ();\n \t  \n \t  item->ident = current_function_funcdef_no + 1;\n \t  item->lineno_checksum = lineno_checksum;"}, {"sha": "b5ad1af0e5f152f225cd2dce279ede6d909dd9b2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -1,3 +1,41 @@\n+2014-05-17  Trevor Saunders  <tsaunders@mozilla.com>\n+\n+\t* class.c (sorted_fields_type_new): Adjust.\n+\t* cp-cilkplus.c (cilk_install_body_with_frame_cleanup): Likewise.\n+\t* cp-objcp-common.c (decl_shadowed_for_var_insert): Likewise.\n+\t* cp-tree.h: Remove usage of variable_size gty attribute.\n+\t* decl.c (make_label_decl): Adjust.\n+\t(check_goto): Likewise.\n+\t(start_preparsed_function): Likewise.\n+\t(save_function_data): Likewise.\n+\t* lex.c (init_reswords): Likewise.\n+\t(retrofit_lang_decl): Likewise.\n+\t(cxx_dup_lang_specific_decl): Likewise.\n+\t(copy_lang_type): Likewise.\n+\t(cxx_make_type): Likewise.\n+\t* name-lookup.c (binding_entry_make): Likewise.\n+\t(binding_table_construct): Likewise.\n+\t(binding_table_new): Likewise.\n+\t(cxx_binding_make): Likewise.\n+\t(pushdecl_maybe_friend_1): Likewise.\n+\t(begin_scope): Likewise.\n+\t(push_to_top_level): Likewise.\n+\t* parser.c (cp_lexer_alloc): Likewise.\n+\t(cp_lexer_new_from_tokens): Likewise.\n+\t(cp_token_cache_new): Likewise.\n+\t(cp_parser_context_new): Likewise.\n+\t(cp_parser_new): Likewise.\n+\t(cp_parser_nested_name_specifier_opt): Likewise.\n+\t(cp_parser_template_id): Likewise.\n+\t* pt.c (maybe_process_partial_specialization): Likewise.\n+\t(register_specialization): Likewise.\n+\t(add_pending_template): Likewise.\n+\t(lookup_template_class_1): Likewise.\n+\t(push_tinst_level): Likewise.\n+\t* semantics.c (register_constexpr_fundef): Likewise.\n+\t(cxx_eval_call_expression): Likewise.\n+\t* typeck2.c (abstract_virtuals_error_sfinae): Likewise.\n+\n 2014-05-16  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/51640"}, {"sha": "05aacfa859821d642de31d4ca14d45ff4c2e03ca", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -6487,7 +6487,7 @@ static struct sorted_fields_type *\n sorted_fields_type_new (int n)\n {\n   struct sorted_fields_type *sft;\n-  sft = ggc_alloc_sorted_fields_type (sizeof (struct sorted_fields_type)\n+  sft = (sorted_fields_type *) ggc_internal_alloc (sizeof (sorted_fields_type)\n \t\t\t\t      + n * sizeof (tree));\n   sft->len = n;\n "}, {"sha": "daa9b8ebb38ea6ed06d576a6788bf0827863420d", "filename": "gcc/cp/cp-cilkplus.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fcp%2Fcp-cilkplus.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fcp%2Fcp-cilkplus.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-cilkplus.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -118,7 +118,7 @@ cilk_install_body_with_frame_cleanup (tree fndecl, tree orig_body, void *wd)\n   tree dtor = create_cilk_function_exit (frame, false, false);\n   add_local_decl (cfun, frame);\n \n-  cfun->language = ggc_alloc_cleared_language_function ();\n+  cfun->language = ggc_cleared_alloc<language_function> ();\n   \n   location_t loc = EXPR_LOCATION (orig_body);\n   tree list = alloc_stmt_list ();"}, {"sha": "78dddef70d1a617eeca7a6930d6bf24d2f1b63c3", "filename": "gcc/cp/cp-objcp-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fcp%2Fcp-objcp-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fcp%2Fcp-objcp-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -208,7 +208,7 @@ decl_shadowed_for_var_insert (tree from, tree to)\n   struct tree_decl_map *h;\n   void **loc;\n \n-  h = ggc_alloc_tree_decl_map ();\n+  h = ggc_alloc<tree_decl_map> ();\n   h->base.from = from;\n   h->to = to;\n   loc = htab_find_slot_with_hash (shadowed_var_for_decl, h, DECL_UID (from),"}, {"sha": "d13d71dcad9a1d7308a63130abedb5cf8d086c6b", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -1484,7 +1484,7 @@ struct GTY(()) lang_type_ptrmem {\n   tree record;\n };\n \n-struct GTY((variable_size)) lang_type {\n+struct GTY(()) lang_type {\n   union lang_type_u\n   {\n     struct lang_type_header GTY((skip (\"\"))) h;\n@@ -2062,7 +2062,7 @@ struct GTY(()) lang_decl_parm {\n    union rather than a struct containing a union as its only field, but\n    tree.h declares it as a struct.  */\n \n-struct GTY((variable_size)) lang_decl {\n+struct GTY(()) lang_decl {\n   union GTY((desc (\"%h.base.selector\"))) lang_decl_u {\n     struct lang_decl_base GTY ((default)) base;\n     struct lang_decl_min GTY((tag (\"0\"))) min;\n@@ -3591,7 +3591,8 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n   do {\t\t\t\t\t\t\t\t\t\\\n     if (TYPE_LANG_SPECIFIC (NODE) == NULL)\t\t\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n-\tTYPE_LANG_SPECIFIC (NODE) = ggc_alloc_cleared_lang_type\t\t\\\n+\tTYPE_LANG_SPECIFIC (NODE)                                       \\\n+\t= (struct lang_type *) ggc_internal_cleared_alloc\t\t\\\n \t (sizeof (struct lang_type_ptrmem));\t\t\t\t\\\n \tTYPE_LANG_SPECIFIC (NODE)->u.ptrmem.h.is_lang_type_class = 0;\t\\\n       }\t\t\t\t\t\t\t\t\t\\"}, {"sha": "a29e3e3b2a06a407ed114f76c78bdcc66305f39f", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -2700,7 +2700,7 @@ make_label_decl (tree id, int local_p)\n   /* Record this label on the list of labels used in this function.\n      We do this before calling make_label_decl so that we get the\n      IDENTIFIER_LABEL_VALUE before the new label is declared.  */\n-  ent = ggc_alloc_cleared_named_label_entry ();\n+  ent = ggc_cleared_alloc<named_label_entry> ();\n   ent->label_decl = decl;\n \n   slot = htab_find_slot (named_labels, ent, INSERT);\n@@ -2931,7 +2931,7 @@ check_goto (tree decl)\n \t  && ent->uses->names_in_scope == current_binding_level->names)\n \treturn;\n \n-      new_use = ggc_alloc_named_label_use_entry ();\n+      new_use = ggc_alloc<named_label_use_entry> ();\n       new_use->binding_level = current_binding_level;\n       new_use->names_in_scope = current_binding_level->names;\n       new_use->o_goto_locus = input_location;\n@@ -13303,7 +13303,7 @@ start_preparsed_function (tree decl1, tree attrs, int flags)\n \n   /* Initialize the language data structures.  Whenever we start\n      a new function, we destroy temporaries in the usual way.  */\n-  cfun->language = ggc_alloc_cleared_language_function ();\n+  cfun->language = ggc_cleared_alloc<language_function> ();\n   current_stmt_tree ()->stmts_are_full_exprs_p = 1;\n   current_binding_level = bl;\n \n@@ -13608,7 +13608,7 @@ save_function_data (tree decl)\n   gcc_assert (!DECL_PENDING_INLINE_P (decl));\n \n   /* Make a copy.  */\n-  f = ggc_alloc_language_function ();\n+  f = ggc_alloc<language_function> ();\n   memcpy (f, cp_function_chain, sizeof (struct language_function));\n   DECL_SAVED_FUNCTION_DATA (decl) = f;\n "}, {"sha": "57b779d77e18828cbe756f8117b58d514ee99935", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -182,7 +182,7 @@ init_reswords (void)\n   /* The Objective-C keywords are all context-dependent.  */\n   mask |= D_OBJC;\n \n-  ridpointers = ggc_alloc_cleared_vec_tree ((int) RID_MAX);\n+  ridpointers = ggc_cleared_vec_alloc<tree> ((int) RID_MAX);\n   for (i = 0; i < num_c_common_reswords; i++)\n     {\n       if (c_common_reswords[i].disable & D_CONLY)\n@@ -555,7 +555,7 @@ retrofit_lang_decl (tree t)\n   else\n     gcc_unreachable ();\n \n-  ld = ggc_alloc_cleared_lang_decl (size);\n+  ld = (struct lang_decl *) ggc_internal_cleared_alloc (size);\n \n   ld->u.base.selector = sel;\n \n@@ -597,7 +597,7 @@ cxx_dup_lang_specific_decl (tree node)\n   else\n     gcc_unreachable ();\n \n-  ld = ggc_alloc_lang_decl (size);\n+  ld = (struct lang_decl *) ggc_internal_alloc (size);\n   memcpy (ld, DECL_LANG_SPECIFIC (node), size);\n   DECL_LANG_SPECIFIC (node) = ld;\n \n@@ -635,7 +635,7 @@ copy_lang_type (tree node)\n     size = sizeof (struct lang_type);\n   else\n     size = sizeof (struct lang_type_ptrmem);\n-  lt = ggc_alloc_lang_type (size);\n+  lt = (struct lang_type *) ggc_internal_alloc (size);\n   memcpy (lt, TYPE_LANG_SPECIFIC (node), size);\n   TYPE_LANG_SPECIFIC (node) = lt;\n \n@@ -668,7 +668,8 @@ cxx_make_type (enum tree_code code)\n       || code == BOUND_TEMPLATE_TEMPLATE_PARM)\n     {\n       struct lang_type *pi\n-          = ggc_alloc_cleared_lang_type (sizeof (struct lang_type));\n+          = (struct lang_type *) ggc_internal_cleared_alloc\n+\t  (sizeof (struct lang_type));\n \n       TYPE_LANG_SPECIFIC (t) = pi;\n       pi->u.c.h.is_lang_type_class = 1;"}, {"sha": "2baeeb76d184ec422738acf1dd4f5078dcb34943", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -105,7 +105,7 @@ binding_entry_make (tree name, tree type)\n       free_binding_entry = entry->chain;\n     }\n   else\n-    entry = ggc_alloc_binding_entry_s ();\n+    entry = ggc_alloc<binding_entry_s> ();\n \n   entry->name = name;\n   entry->type = type;\n@@ -147,7 +147,7 @@ binding_table_construct (binding_table table, size_t chain_count)\n {\n   table->chain_count = chain_count;\n   table->entry_count = 0;\n-  table->chain = ggc_alloc_cleared_vec_binding_entry (table->chain_count);\n+  table->chain = ggc_cleared_vec_alloc<binding_entry> (table->chain_count);\n }\n \n /* Make TABLE's entries ready for reuse.  */\n@@ -181,7 +181,7 @@ binding_table_free (binding_table table)\n static inline binding_table\n binding_table_new (size_t chain_count)\n {\n-  binding_table table = ggc_alloc_binding_table_s ();\n+  binding_table table = ggc_alloc<binding_table_s> ();\n   table->chain = NULL;\n   binding_table_construct (table, chain_count);\n   return table;\n@@ -299,7 +299,7 @@ cxx_binding_make (tree value, tree type)\n       free_bindings = binding->previous;\n     }\n   else\n-    binding = ggc_alloc_cxx_binding ();\n+    binding = ggc_alloc<cxx_binding> ();\n \n   cxx_binding_init (binding, value, type);\n \n@@ -775,7 +775,7 @@ pushdecl_maybe_friend_1 (tree x, bool is_friend)\n \t\t      = htab_create_ggc (20, cxx_int_tree_map_hash,\n \t\t\t\t\t cxx_int_tree_map_eq, NULL);\n \n-\t\t  h = ggc_alloc_cxx_int_tree_map ();\n+\t\t  h = ggc_alloc<cxx_int_tree_map> ();\n \t\t  h->uid = DECL_UID (x);\n \t\t  h->to = t;\n \t\t  loc = htab_find_slot_with_hash\n@@ -1544,7 +1544,7 @@ begin_scope (scope_kind kind, tree entity)\n       free_binding_level = scope->level_chain;\n     }\n   else\n-    scope = ggc_alloc_cleared_cp_binding_level ();\n+    scope = ggc_cleared_alloc<cp_binding_level> ();\n \n   scope->this_entity = entity;\n   scope->more_cleanups_ok = true;\n@@ -6074,7 +6074,7 @@ push_to_top_level (void)\n   bool need_pop;\n \n   bool subtime = timevar_cond_start (TV_NAME_LOOKUP);\n-  s = ggc_alloc_cleared_saved_scope ();\n+  s = ggc_cleared_alloc<saved_scope> ();\n \n   b = scope_chain ? current_binding_level : 0;\n "}, {"sha": "031fa9da7a93fd0464092362d15eec42a3f1df42", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -602,7 +602,7 @@ cp_lexer_alloc (void)\n   c_common_no_more_pch ();\n \n   /* Allocate the memory.  */\n-  lexer = ggc_alloc_cleared_cp_lexer ();\n+  lexer = ggc_cleared_alloc<cp_lexer> ();\n \n   /* Initially we are not debugging.  */\n   lexer->debugging_p = false;\n@@ -665,7 +665,7 @@ cp_lexer_new_from_tokens (cp_token_cache *cache)\n {\n   cp_token *first = cache->first;\n   cp_token *last = cache->last;\n-  cp_lexer *lexer = ggc_alloc_cleared_cp_lexer ();\n+  cp_lexer *lexer = ggc_cleared_alloc<cp_lexer> ();\n \n   /* We do not own the buffer.  */\n   lexer->buffer = NULL;\n@@ -1240,7 +1240,7 @@ cp_lexer_stop_debugging (cp_lexer* lexer)\n static cp_token_cache *\n cp_token_cache_new (cp_token *first, cp_token *last)\n {\n-  cp_token_cache *cache = ggc_alloc_cp_token_cache ();\n+  cp_token_cache *cache = ggc_alloc<cp_token_cache> ();\n   cache->first = first;\n   cache->last = last;\n   return cache;\n@@ -1822,7 +1822,7 @@ cp_parser_context_new (cp_parser_context* next)\n       memset (context, 0, sizeof (*context));\n     }\n   else\n-    context = ggc_alloc_cleared_cp_parser_context ();\n+    context = ggc_cleared_alloc<cp_parser_context> ();\n \n   /* No errors have occurred yet in this context.  */\n   context->status = CP_PARSER_STATUS_KIND_NO_ERROR;\n@@ -3421,7 +3421,7 @@ cp_parser_new (void)\n   for (i = 0; i < sizeof (binops) / sizeof (binops[0]); i++)\n     binops_by_token[binops[i].token_type] = binops[i];\n \n-  parser = ggc_alloc_cleared_cp_parser ();\n+  parser = ggc_cleared_alloc<cp_parser> ();\n   parser->lexer = lexer;\n   parser->context = cp_parser_context_new (NULL);\n \n@@ -5435,7 +5435,7 @@ cp_parser_nested_name_specifier_opt (cp_parser *parser,\n       token->type = CPP_NESTED_NAME_SPECIFIER;\n       /* Retrieve any deferred checks.  Do not pop this access checks yet\n \t so the memory will not be reclaimed during token replacing below.  */\n-      token->u.tree_check_value = ggc_alloc_cleared_tree_check ();\n+      token->u.tree_check_value = ggc_cleared_alloc<struct tree_check> ();\n       token->u.tree_check_value->value = parser->scope;\n       token->u.tree_check_value->checks = get_deferred_access_checks ();\n       token->u.tree_check_value->qualifying_scope =\n@@ -13510,7 +13510,7 @@ cp_parser_template_id (cp_parser *parser,\n       token->type = CPP_TEMPLATE_ID;\n       /* Retrieve any deferred checks.  Do not pop this access checks yet\n \t so the memory will not be reclaimed during token replacing below.  */\n-      token->u.tree_check_value = ggc_alloc_cleared_tree_check ();\n+      token->u.tree_check_value = ggc_cleared_alloc<struct tree_check> ();\n       token->u.tree_check_value->value = template_id;\n       token->u.tree_check_value->checks = get_deferred_access_checks ();\n       token->keyword = RID_MAX;"}, {"sha": "c9eddb8b1c10b70f4138343332f843bc4758fb66", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -944,7 +944,7 @@ maybe_process_partial_specialization (tree type)\n \t\t  elt.args = INNERMOST_TEMPLATE_ARGS (elt.args);\n \n \t\t  slot = htab_find_slot (type_specializations, &elt, INSERT);\n-\t\t  entry = ggc_alloc_spec_entry ();\n+\t\t  entry = ggc_alloc<spec_entry> ();\n \t\t  *entry = elt;\n \t\t  *slot = entry;\n \t\t}\n@@ -1481,7 +1481,7 @@ register_specialization (tree spec, tree tmpl, tree args, bool is_friend,\n \n   if (slot != NULL /* !optimize_specialization_lookup_p (tmpl) */)\n     {\n-      spec_entry *entry = ggc_alloc_spec_entry ();\n+      spec_entry *entry = ggc_alloc<spec_entry> ();\n       gcc_assert (tmpl && args && spec);\n       *entry = elt;\n       *slot = entry;\n@@ -7207,7 +7207,7 @@ add_pending_template (tree d)\n   if (level)\n     push_tinst_level (d);\n \n-  pt = ggc_alloc_pending_template ();\n+  pt = ggc_alloc<pending_template> ();\n   pt->next = NULL;\n   pt->tinst = current_tinst_level;\n   if (last_pending_template)\n@@ -7837,7 +7837,7 @@ lookup_template_class_1 (tree d1, tree arglist, tree in_decl, tree context,\n       elt.spec = t;\n       slot = htab_find_slot_with_hash (type_specializations,\n \t\t\t\t       &elt, hash, INSERT);\n-      entry = ggc_alloc_spec_entry ();\n+      entry = ggc_alloc<spec_entry> ();\n       *entry = elt;\n       *slot = entry;\n \n@@ -8262,7 +8262,7 @@ push_tinst_level (tree d)\n   if (limit_bad_template_recursion (d))\n     return 0;\n \n-  new_level = ggc_alloc_tinst_level ();\n+  new_level = ggc_alloc<tinst_level> ();\n   new_level->decl = d;\n   new_level->locus = input_location;\n   new_level->errors = errorcount+sorrycount;"}, {"sha": "6c5bdf7391b51552789323d9e7ca6d15bf80e578", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -8024,7 +8024,7 @@ register_constexpr_fundef (tree fun, tree body)\n     htab_find_slot (constexpr_fundef_table, &entry, INSERT);\n \n   gcc_assert (*slot == NULL);\n-  *slot = ggc_alloc_constexpr_fundef ();\n+  *slot = ggc_alloc<constexpr_fundef> ();\n   **slot = entry;\n \n   return fun;\n@@ -8468,7 +8468,7 @@ cxx_eval_call_expression (const constexpr_call *old_call, tree t,\n     {\n       /* We need to keep a pointer to the entry, not just the slot, as the\n \t slot can move in the call to cxx_eval_builtin_function_call.  */\n-      *slot = entry = ggc_alloc_constexpr_call ();\n+      *slot = entry = ggc_alloc<constexpr_call> ();\n       *entry = new_call;\n     }\n   /* Calls which are in progress have their result set to NULL"}, {"sha": "a0f39b6553ecb300bb97802efdf04cf885146c93", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -294,7 +294,7 @@ abstract_virtuals_error_sfinae (tree decl, tree type, abstract_class_use use,\n       slot = htab_find_slot_with_hash (abstract_pending_vars, type,\n \t\t\t\t      (hashval_t)TYPE_UID (type), INSERT);\n \n-      pat = ggc_alloc_pending_abstract_type ();\n+      pat = ggc_alloc<pending_abstract_type> ();\n       pat->type = type;\n       pat->decl = decl;\n       pat->use = use;"}, {"sha": "6cb43411917858dbff62ece31dc4944938e27e0e", "filename": "gcc/dbxout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -976,7 +976,7 @@ dbxout_init (const char *input_file_name)\n   const char *mapped_name;\n \n   typevec_len = 100;\n-  typevec = ggc_alloc_cleared_vec_typeinfo (typevec_len);\n+  typevec = ggc_cleared_vec_alloc<typeinfo> (typevec_len);\n \n   /* stabstr_ob contains one string, which will be just fine with\n      1-byte alignment.  */"}, {"sha": "e50eef66b3e6af320fd0c416ca8ea14a2a860c99", "filename": "gcc/doc/gty.texi", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fdoc%2Fgty.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fdoc%2Fgty.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgty.texi?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -382,38 +382,6 @@ of pointers.  @code{reorder} functions can be expensive.  When\n possible, it is better to depend on properties of the data, like an ID\n number or the hash of a string instead.\n \n-@findex variable_size\n-@item variable_size\n-\n-The type machinery expects the types to be of constant size.  When this\n-is not true, for example, with structs that have array fields or unions,\n-the type machinery cannot tell how many bytes need to be allocated at\n-each allocation.  The @code{variable_size} is used to mark such types.\n-The type machinery then provides allocators that take a parameter\n-indicating an exact size of object being allocated.  Note that the size\n-must be provided in bytes whereas the @code{length} option works with\n-array lengths in number of elements.\n-\n-For example,\n-@smallexample\n-struct GTY((variable_size)) sorted_fields_type @{\n-  int len;\n-  tree GTY((length (\"%h.len\"))) elts[1];\n-@};\n-@end smallexample\n-\n-Then the objects of @code{struct sorted_fields_type} are allocated in GC\n-memory as follows:\n-@smallexample\n-  field_vec = ggc_alloc_sorted_fields_type (size);\n-@end smallexample\n-\n-If @var{field_vec->elts} stores @var{n} elements, then @var{size}\n-could be calculated as follows:\n-@smallexample\n-  size_t size = sizeof (struct sorted_fields_type) + n * sizeof (tree);\n-@end smallexample\n-\n @findex atomic\n @item atomic\n "}, {"sha": "47fd0287a67eef7b8f2f6aec93e47aa0acd43cea", "filename": "gcc/dwarf2cfi.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fdwarf2cfi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fdwarf2cfi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2cfi.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -356,7 +356,7 @@ need_data_align_sf_opcode (HOST_WIDE_INT off)\n static inline dw_cfi_ref\n new_cfi (void)\n {\n-  dw_cfi_ref cfi = ggc_alloc_dw_cfi_node ();\n+  dw_cfi_ref cfi = ggc_alloc<dw_cfi_node> ();\n \n   cfi->dw_cfi_oprnd1.dw_cfi_reg_num = 0;\n   cfi->dw_cfi_oprnd2.dw_cfi_reg_num = 0;\n@@ -369,7 +369,7 @@ new_cfi (void)\n static dw_cfi_row *\n new_cfi_row (void)\n {\n-  dw_cfi_row *row = ggc_alloc_cleared_dw_cfi_row ();\n+  dw_cfi_row *row = ggc_cleared_alloc<dw_cfi_row> ();\n \n   row->cfa.reg = INVALID_REGNUM;\n \n@@ -381,7 +381,7 @@ new_cfi_row (void)\n static dw_cfi_row *\n copy_cfi_row (dw_cfi_row *src)\n {\n-  dw_cfi_row *dst = ggc_alloc_dw_cfi_row ();\n+  dw_cfi_row *dst = ggc_alloc<dw_cfi_row> ();\n \n   *dst = *src;\n   dst->reg_save = vec_safe_copy (src->reg_save);\n@@ -2892,7 +2892,7 @@ create_cie_data (void)\n \tcase 0:\n \t  break;\n \tcase 1:\n-\t  cie_return_save = ggc_alloc_reg_saved_in_data ();\n+\t  cie_return_save = ggc_alloc<reg_saved_in_data> ();\n \t  *cie_return_save = cie_trace.regs_saved_in_regs[0];\n \t  cie_trace.regs_saved_in_regs.release ();\n \t  break;"}, {"sha": "4ea05a5b8420ac926c9000f392ce083cb3378f53", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 36, "deletions": 39, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -992,7 +992,7 @@ dwarf2out_alloc_current_fde (void)\n {\n   dw_fde_ref fde;\n \n-  fde = ggc_alloc_cleared_dw_fde_node ();\n+  fde = ggc_cleared_alloc<dw_fde_node> ();\n   fde->decl = current_function_decl;\n   fde->funcdef_number = current_function_funcdef_no;\n   fde->fde_index = vec_safe_length (fde_vec);\n@@ -1315,7 +1315,7 @@ static inline dw_loc_descr_ref\n new_loc_descr (enum dwarf_location_atom op, unsigned HOST_WIDE_INT oprnd1,\n \t       unsigned HOST_WIDE_INT oprnd2)\n {\n-  dw_loc_descr_ref descr = ggc_alloc_cleared_dw_loc_descr_node ();\n+  dw_loc_descr_ref descr = ggc_cleared_alloc<dw_loc_descr_node> ();\n \n   descr->dw_loc_opc = op;\n   descr->dw_loc_oprnd1.val_class = dw_val_class_unsigned_const;\n@@ -3814,7 +3814,7 @@ add_AT_wide (dw_die_ref die, enum dwarf_attribute attr_kind,\n \n   attr.dw_attr = attr_kind;\n   attr.dw_attr_val.val_class = dw_val_class_wide_int;\n-  attr.dw_attr_val.v.val_wide = ggc_alloc_cleared_wide_int ();\n+  attr.dw_attr_val.v.val_wide = ggc_cleared_alloc<wide_int> ();\n   *attr.dw_attr_val.v.val_wide = w;\n   add_dwarf_attr (die, &attr);\n }\n@@ -3933,7 +3933,7 @@ find_AT_string_in_table (const char *str, htab_t table)\n \t\t\t\t   htab_hash_string (str), INSERT);\n   if (*slot == NULL)\n     {\n-      node = ggc_alloc_cleared_indirect_string_node ();\n+      node = ggc_cleared_alloc<indirect_string_node> ();\n       node->str = ggc_strdup (str);\n       *slot = node;\n     }\n@@ -4264,7 +4264,7 @@ add_addr_table_entry (void *addr, enum ate_kind kind)\n \n   if (*slot == HTAB_EMPTY_ENTRY)\n     {\n-      node = ggc_alloc_cleared_addr_table_entry ();\n+      node = ggc_cleared_alloc<addr_table_entry> ();\n       init_addr_table_entry (node, kind, addr);\n       *slot = node;\n     }\n@@ -4840,7 +4840,7 @@ splice_child_die (dw_die_ref parent, dw_die_ref child)\n static inline dw_die_ref\n new_die (enum dwarf_tag tag_value, dw_die_ref parent_die, tree t)\n {\n-  dw_die_ref die = ggc_alloc_cleared_die_node ();\n+  dw_die_ref die = ggc_cleared_alloc<die_node> ();\n \n   die->die_tag = tag_value;\n \n@@ -4850,7 +4850,7 @@ new_die (enum dwarf_tag tag_value, dw_die_ref parent_die, tree t)\n     {\n       limbo_die_node *limbo_node;\n \n-      limbo_node = ggc_alloc_cleared_limbo_die_node ();\n+      limbo_node = ggc_cleared_alloc<limbo_die_node> ();\n       limbo_node->die = die;\n       limbo_node->created_for = t;\n       limbo_node->next = limbo_die_list;\n@@ -5167,7 +5167,7 @@ add_var_loc_to_decl (tree decl, rtx loc_note, const char *label)\n   slot = htab_find_slot_with_hash (decl_loc_table, decl, decl_id, INSERT);\n   if (*slot == NULL)\n     {\n-      temp = ggc_alloc_cleared_var_loc_list ();\n+      temp = ggc_cleared_alloc<var_loc_list> ();\n       temp->decl_id = decl_id;\n       *slot = temp;\n     }\n@@ -5192,7 +5192,7 @@ add_var_loc_to_decl (tree decl, rtx loc_note, const char *label)\n \t  || (NOTE_VAR_LOCATION_STATUS (temp->first->loc)\n \t      != NOTE_VAR_LOCATION_STATUS (loc_note))))\n     {\n-      loc = ggc_alloc_cleared_var_loc_node ();\n+      loc = ggc_cleared_alloc<var_loc_node> ();\n       temp->first->next = loc;\n       temp->last = loc;\n       loc->loc = construct_piece_list (loc_note, bitpos, bitsize);\n@@ -5282,7 +5282,7 @@ add_var_loc_to_decl (tree decl, rtx loc_note, const char *label)\n \t      memset (loc, '\\0', sizeof (*loc));\n \t    }\n \t  else\n-\t    loc = ggc_alloc_cleared_var_loc_node ();\n+\t    loc = ggc_cleared_alloc<var_loc_node> ();\n \t  if (bitsize == -1 || piece_loc == NULL)\n \t    loc->loc = construct_piece_list (loc_note, bitpos, bitsize);\n \t  else\n@@ -5299,7 +5299,7 @@ add_var_loc_to_decl (tree decl, rtx loc_note, const char *label)\n     }\n   else\n     {\n-      loc = ggc_alloc_cleared_var_loc_node ();\n+      loc = ggc_cleared_alloc<var_loc_node> ();\n       temp->first = loc;\n       temp->last = loc;\n       loc->loc = construct_piece_list (loc_note, bitpos, bitsize);\n@@ -6955,7 +6955,7 @@ clone_die (dw_die_ref die)\n   dw_attr_ref a;\n   unsigned ix;\n \n-  clone = ggc_alloc_cleared_die_node ();\n+  clone = ggc_cleared_alloc<die_node> ();\n   clone->die_tag = die->die_tag;\n \n   FOR_EACH_VEC_SAFE_ELT (die->die_attr, ix, a)\n@@ -7001,7 +7001,7 @@ clone_as_declaration (dw_die_ref die)\n       return clone;\n     }\n \n-  clone = ggc_alloc_cleared_die_node ();\n+  clone = ggc_cleared_alloc<die_node> ();\n   clone->die_tag = die->die_tag;\n \n   FOR_EACH_VEC_SAFE_ELT (die->die_attr, ix, a)\n@@ -7361,7 +7361,7 @@ break_out_comdat_types (dw_die_ref die)\n         unit = new_die (DW_TAG_type_unit, NULL, NULL);\n         add_AT_unsigned (unit, DW_AT_language,\n                          get_AT_unsigned (comp_unit_die (), DW_AT_language));\n-        type_node = ggc_alloc_cleared_comdat_type_node ();\n+        type_node = ggc_cleared_alloc<comdat_type_node> ();\n         type_node->root_die = unit;\n         type_node->next = comdat_type_list;\n         comdat_type_list = type_node;\n@@ -8455,7 +8455,7 @@ static inline dw_loc_list_ref\n new_loc_list (dw_loc_descr_ref expr, const char *begin, const char *end,\n \t      const char *section)\n {\n-  dw_loc_list_ref retlist = ggc_alloc_cleared_dw_loc_list_node ();\n+  dw_loc_list_ref retlist = ggc_cleared_alloc<dw_loc_list_node> ();\n \n   retlist->begin = begin;\n   retlist->begin_entry = NULL;\n@@ -12964,8 +12964,7 @@ mem_loc_descriptor (rtx rtl, enum machine_mode mode,\n #endif\n \t    {\n \t      unsigned int length = GET_MODE_SIZE (mode);\n-\t      unsigned char *array\n-\t\t  = (unsigned char*) ggc_alloc_atomic (length);\n+\t      unsigned char *array = ggc_vec_alloc<unsigned char> (length);\n \n \t      insert_float (rtl, array);\n \t      mem_loc_result->dw_loc_oprnd2.val_class = dw_val_class_vec;\n@@ -12991,7 +12990,7 @@ mem_loc_descriptor (rtx rtl, enum machine_mode mode,\n \t  mem_loc_result->dw_loc_oprnd1.v.val_die_ref.external = 0;\n \t  mem_loc_result->dw_loc_oprnd2.val_class\n \t    = dw_val_class_wide_int;\n-\t  mem_loc_result->dw_loc_oprnd2.v.val_wide = ggc_alloc_cleared_wide_int ();\n+\t  mem_loc_result->dw_loc_oprnd2.v.val_wide = ggc_cleared_alloc<wide_int> ();\n \t  *mem_loc_result->dw_loc_oprnd2.v.val_wide = std::make_pair (rtl, mode);\n \t}\n       break;\n@@ -13474,8 +13473,7 @@ loc_descriptor (rtx rtl, enum machine_mode mode,\n #endif\n \t    {\n \t      unsigned int length = GET_MODE_SIZE (mode);\n-\t      unsigned char *array\n-                  = (unsigned char*) ggc_alloc_atomic (length);\n+\t      unsigned char *array = ggc_vec_alloc<unsigned char> (length);\n \n \t      insert_float (rtl, array);\n \t      loc_result->dw_loc_oprnd2.val_class = dw_val_class_vec;\n@@ -13495,7 +13493,7 @@ loc_descriptor (rtx rtl, enum machine_mode mode,\n \t  loc_result = new_loc_descr (DW_OP_implicit_value,\n \t\t\t\t      GET_MODE_SIZE (mode), 0);\n \t  loc_result->dw_loc_oprnd2.val_class = dw_val_class_wide_int;\n-\t  loc_result->dw_loc_oprnd2.v.val_wide = ggc_alloc_cleared_wide_int ();\n+\t  loc_result->dw_loc_oprnd2.v.val_wide = ggc_cleared_alloc<wide_int> ();\n \t  *loc_result->dw_loc_oprnd2.v.val_wide = std::make_pair (rtl, mode);\n \t}\n       break;\n@@ -13508,8 +13506,8 @@ loc_descriptor (rtx rtl, enum machine_mode mode,\n \t{\n \t  unsigned int elt_size = GET_MODE_UNIT_SIZE (GET_MODE (rtl));\n \t  unsigned int length = CONST_VECTOR_NUNITS (rtl);\n-\t  unsigned char *array = (unsigned char *)\n-\t    ggc_alloc_atomic (length * elt_size);\n+\t  unsigned char *array\n+\t    = ggc_vec_alloc<unsigned char> (length * elt_size);\n \t  unsigned int i;\n \t  unsigned char *p;\n \t  enum machine_mode imode = GET_MODE_INNER (mode);\n@@ -14058,12 +14056,12 @@ add_loc_descr_to_each (dw_loc_list_ref list, dw_loc_descr_ref ref)\n   list = list->dw_loc_next;\n   while (list)\n     {\n-      copy = ggc_alloc_dw_loc_descr_node ();\n+      copy = ggc_alloc<dw_loc_descr_node> ();\n       memcpy (copy, ref, sizeof (dw_loc_descr_node));\n       add_loc_descr (&list->expr, copy);\n       while (copy->dw_loc_next)\n \t{\n-\t  dw_loc_descr_ref new_copy = ggc_alloc_dw_loc_descr_node ();\n+\t  dw_loc_descr_ref new_copy = ggc_alloc<dw_loc_descr_node> ();\n \t  memcpy (new_copy, copy->dw_loc_next, sizeof (dw_loc_descr_node));\n \t  copy->dw_loc_next = new_copy;\n \t  copy = new_copy;\n@@ -15247,7 +15245,7 @@ add_const_value_attribute (dw_die_ref die, rtx rtl)\n \telse\n \t  {\n \t    unsigned int length = GET_MODE_SIZE (mode);\n-\t    unsigned char *array = (unsigned char *) ggc_alloc_atomic (length);\n+\t    unsigned char *array = ggc_vec_alloc<unsigned char> (length);\n \n \t    insert_float (rtl, array);\n \t    add_AT_vec (die, DW_AT_const_value, length / 4, 4, array);\n@@ -15260,8 +15258,8 @@ add_const_value_attribute (dw_die_ref die, rtx rtl)\n \tenum machine_mode mode = GET_MODE (rtl);\n \tunsigned int elt_size = GET_MODE_UNIT_SIZE (mode);\n \tunsigned int length = CONST_VECTOR_NUNITS (rtl);\n-\tunsigned char *array = (unsigned char *) ggc_alloc_atomic\n-\t  (length * elt_size);\n+\tunsigned char *array\n+\t  = ggc_vec_alloc<unsigned char> (length * elt_size);\n \tunsigned int i;\n \tunsigned char *p;\n \tenum machine_mode imode = GET_MODE_INNER (mode);\n@@ -15851,7 +15849,7 @@ add_location_or_const_value_attribute (dw_die_ref die, tree decl, bool cache_p,\n \t{\n \t  slot = htab_find_slot_with_hash (cached_dw_loc_list_table, decl,\n \t\t\t\t\t   DECL_UID (decl), INSERT);\n-\t  cache = ggc_alloc_cleared_cached_dw_loc_list ();\n+\t  cache = ggc_cleared_alloc<cached_dw_loc_list> ();\n \t  cache->decl_id = DECL_UID (decl);\n \t  cache->loc_list = list;\n \t  *slot = cache;\n@@ -16047,8 +16045,7 @@ tree_add_const_value_attribute (dw_die_ref die, tree t)\n       HOST_WIDE_INT size = int_size_in_bytes (TREE_TYPE (init));\n       if (size > 0 && (int) size == size)\n \t{\n-\t  unsigned char *array = (unsigned char *)\n-\t    ggc_internal_cleared_alloc (size);\n+\t  unsigned char *array = ggc_cleared_vec_alloc<unsigned char> (size);\n \n \t  if (native_encode_initializer (init, array, size))\n \t    {\n@@ -16316,7 +16313,7 @@ comp_dir_string (void)\n       int wdlen;\n \n       wdlen = strlen (wd);\n-      wd1 = (char *) ggc_alloc_atomic (wdlen + 2);\n+      wd1 = ggc_vec_alloc<char> (wdlen + 2);\n       strcpy (wd1, wd);\n       wd1 [wdlen] = DIR_SEPARATOR;\n       wd1 [wdlen + 1] = 0;\n@@ -16811,7 +16808,7 @@ add_linkage_name (dw_die_ref die, tree decl)\n \t{\n \t  limbo_die_node *asm_name;\n \n-\t  asm_name = ggc_alloc_cleared_limbo_die_node ();\n+\t  asm_name = ggc_cleared_alloc<limbo_die_node> ();\n \t  asm_name->die = die;\n \t  asm_name->created_for = decl;\n \t  asm_name->next = deferred_asm_name;\n@@ -16864,7 +16861,7 @@ dwarf2out_vms_debug_main_pointer (void)\n   dw_die_ref die;\n \n   /* Allocate the VMS debug main subprogram die.  */\n-  die = ggc_alloc_cleared_die_node ();\n+  die = ggc_cleared_alloc<die_node> ();\n   die->die_tag = DW_TAG_subprogram;\n   add_name_attribute (die, VMS_DEBUG_MAIN_POINTER);\n   ASM_GENERATE_INTERNAL_LABEL (label, PROLOGUE_END_LABEL,\n@@ -21139,7 +21136,7 @@ lookup_filename (const char *file_name)\n   if (*slot)\n     return (struct dwarf_file_data *) *slot;\n \n-  created = ggc_alloc_dwarf_file_data ();\n+  created = ggc_alloc<dwarf_file_data> ();\n   created->filename = file_name;\n   created->emitted_number = 0;\n   *slot = created;\n@@ -21449,7 +21446,7 @@ dwarf2out_var_location (rtx loc_note)\n   if (!var_loc_p)\n     {\n       struct call_arg_loc_node *ca_loc\n-\t= ggc_alloc_cleared_call_arg_loc_node ();\n+\t= ggc_cleared_alloc<call_arg_loc_node> ();\n       rtx prev = prev_real_insn (loc_note), x;\n       ca_loc->call_arg_loc_note = loc_note;\n       ca_loc->next = NULL;\n@@ -21524,7 +21521,7 @@ new_line_info_table (void)\n {\n   dw_line_info_table *table;\n \n-  table = ggc_alloc_cleared_dw_line_info_table_struct ();\n+  table = ggc_cleared_alloc<dw_line_info_table_struct> ();\n   table->file_num = 1;\n   table->line_num = 1;\n   table->is_stmt = DWARF_LINE_DEFAULT_IS_STMT_START;\n@@ -22293,7 +22290,7 @@ dwarf2out_init (const char *filename ATTRIBUTE_UNUSED)\n   vec_alloc (decl_scope_table, 256);\n \n   /* Allocate the initial hunk of the abbrev_die_table.  */\n-  abbrev_die_table = ggc_alloc_cleared_vec_dw_die_ref\n+  abbrev_die_table = ggc_cleared_vec_alloc<dw_die_ref>\n     (ABBREV_DIE_TABLE_INCREMENT);\n   abbrev_die_table_allocated = ABBREV_DIE_TABLE_INCREMENT;\n   /* Zero-th entry is allocated, but unused.  */\n@@ -23198,7 +23195,7 @@ string_cst_pool_decl (tree t)\n       len = TREE_STRING_LENGTH (t);\n       vec_safe_push (used_rtx_array, rtl);\n       ref = new_die (DW_TAG_dwarf_procedure, comp_unit_die (), decl);\n-      array = (unsigned char *) ggc_alloc_atomic (len);\n+      array = ggc_vec_alloc<unsigned char> (len);\n       memcpy (array, TREE_STRING_POINTER (t), len);\n       l = new_loc_descr (DW_OP_implicit_value, len, 0);\n       l->dw_loc_oprnd2.val_class = dw_val_class_vec;"}, {"sha": "9282a29520b4c16ba18f9f27a90d2ab19bddc4fb", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -319,7 +319,7 @@ set_mem_attrs (rtx mem, mem_attrs *attrs)\n   if (!MEM_ATTRS (mem)\n       || !mem_attrs_eq_p (attrs, MEM_ATTRS (mem)))\n     {\n-      MEM_ATTRS (mem) = ggc_alloc_mem_attrs ();\n+      MEM_ATTRS (mem) = ggc_alloc<mem_attrs> ();\n       memcpy (MEM_ATTRS (mem), attrs, sizeof (mem_attrs));\n     }\n }\n@@ -366,7 +366,7 @@ get_reg_attrs (tree decl, int offset)\n   slot = htab_find_slot (reg_attrs_htab, &attrs, INSERT);\n   if (*slot == 0)\n     {\n-      *slot = ggc_alloc_reg_attrs ();\n+      *slot = ggc_alloc<reg_attrs> ();\n       memcpy (*slot, &attrs, sizeof (reg_attrs));\n     }\n \n@@ -5243,7 +5243,7 @@ start_sequence (void)\n       free_sequence_stack = tem->next;\n     }\n   else\n-    tem = ggc_alloc_sequence_stack ();\n+    tem = ggc_alloc<sequence_stack> ();\n \n   tem->next = seq_stack;\n   tem->first = get_insns ();\n@@ -5576,7 +5576,7 @@ init_emit (void)\n   crtl->emit.regno_pointer_align\n     = XCNEWVEC (unsigned char, crtl->emit.regno_pointer_align_length);\n \n-  regno_reg_rtx = ggc_alloc_vec_rtx (crtl->emit.regno_pointer_align_length);\n+  regno_reg_rtx = ggc_vec_alloc<rtx> (crtl->emit.regno_pointer_align_length);\n \n   /* Put copies of all the hard registers into regno_reg_rtx.  */\n   memcpy (regno_reg_rtx,\n@@ -5726,7 +5726,7 @@ init_emit_regs (void)\n   for (i = 0; i < (int) MAX_MACHINE_MODE; i++)\n     {\n       mode = (enum machine_mode) i;\n-      attrs = ggc_alloc_cleared_mem_attrs ();\n+      attrs = ggc_cleared_alloc<mem_attrs> ();\n       attrs->align = BITS_PER_UNIT;\n       attrs->addrspace = ADDR_SPACE_GENERIC;\n       if (mode != BLKmode)"}, {"sha": "49ebaae9dd6b23e5758969fef1f749cf93b3fee4", "filename": "gcc/except.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -333,7 +333,7 @@ init_eh (void)\n void\n init_eh_for_function (void)\n {\n-  cfun->eh = ggc_alloc_cleared_eh_status ();\n+  cfun->eh = ggc_cleared_alloc<eh_status> ();\n \n   /* Make sure zero'th entries are used.  */\n   vec_safe_push (cfun->eh->region_array, (eh_region)0);\n@@ -350,7 +350,7 @@ gen_eh_region (enum eh_region_type type, eh_region outer)\n   eh_region new_eh;\n \n   /* Insert a new blank region as a leaf in the tree.  */\n-  new_eh = ggc_alloc_cleared_eh_region_d ();\n+  new_eh = ggc_cleared_alloc<eh_region_d> ();\n   new_eh->type = type;\n   new_eh->outer = outer;\n   if (outer)\n@@ -407,7 +407,7 @@ gen_eh_region_catch (eh_region t, tree type_or_list)\n \tadd_type_for_runtime (TREE_VALUE (type_node));\n     }\n \n-  c = ggc_alloc_cleared_eh_catch_d ();\n+  c = ggc_cleared_alloc<eh_catch_d> ();\n   c->type_list = type_list;\n   l = t->u.eh_try.last_catch;\n   c->prev_catch = l;\n@@ -441,7 +441,7 @@ gen_eh_region_must_not_throw (eh_region outer)\n eh_landing_pad\n gen_eh_landing_pad (eh_region region)\n {\n-  eh_landing_pad lp = ggc_alloc_cleared_eh_landing_pad_d ();\n+  eh_landing_pad lp = ggc_cleared_alloc<eh_landing_pad_d> ();\n \n   lp->next_lp = region->landing_pads;\n   lp->region = region;\n@@ -2450,7 +2450,7 @@ add_call_site (rtx landing_pad, int action, int section)\n {\n   call_site_record record;\n \n-  record = ggc_alloc_call_site_record_d ();\n+  record = ggc_alloc<call_site_record_d> ();\n   record->landing_pad = landing_pad;\n   record->action = action;\n "}, {"sha": "f547e872c4ffc4bfd617a362ef45a3d4200e02df", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -1,3 +1,13 @@\n+2014-05-17  Trevor Saunders  <tsaunders@mozilla.com>\n+\n+\t* f95-lang.c (pushlevel): Adjust.\n+\t* trans-decl.c (gfc_allocate_lang_decl): Adjust.\n+\t(gfc_find_module): Likewise.\n+\t* trans-types.c (gfc_get_nodesc_array_type): Likewise.\n+\t(gfc_get_array_type_bounds): Likewise.\n+\t(gfc_nonrestricted_type): Likewise.\n+\t* trans.h: Don't use variable_size gty attribute.\n+\n 2014-05-17  Dominique d'Humieres <dominiq@lps.ens.fr>\n \n \t* check.c (gfc_check_fn_rc2008): move \"argument\" to the right"}, {"sha": "adee07cbaa552b370f9fd633949bb5f1fe4d9173", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -323,7 +323,7 @@ getdecls (void)\n void\n pushlevel (void)\n {\n-  struct binding_level *newlevel = ggc_alloc_binding_level ();\n+  struct binding_level *newlevel = ggc_alloc<binding_level> ();\n \n   *newlevel = clear_binding_level;\n "}, {"sha": "4a5ba1da3b494dd58f64a692a1733c3849dc5014", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -615,8 +615,7 @@ gfc_finish_var_decl (tree decl, gfc_symbol * sym)\n void\n gfc_allocate_lang_decl (tree decl)\n {\n-  DECL_LANG_SPECIFIC (decl) = ggc_alloc_cleared_lang_decl(sizeof\n-\t\t\t\t\t\t\t  (struct lang_decl));\n+  DECL_LANG_SPECIFIC (decl) = ggc_cleared_alloc<struct lang_decl> ();\n }\n \n /* Remember a symbol to generate initialization/cleanup code at function\n@@ -4160,7 +4159,7 @@ gfc_find_module (const char *name)\n \t\t\t\t   htab_hash_string (name), INSERT);\n   if (*slot == NULL)\n     {\n-      struct module_htab_entry *entry = ggc_alloc_cleared_module_htab_entry ();\n+      module_htab_entry *entry = ggc_cleared_alloc<module_htab_entry> ();\n \n       entry->name = gfc_get_string (name);\n       entry->decls = htab_create_ggc (10, module_htab_decls_hash,"}, {"sha": "d9aab474a7537305dc2a3ebf96507a581fa5890d", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -1513,8 +1513,7 @@ gfc_get_nodesc_array_type (tree etype, gfc_array_spec * as, gfc_packed packed,\n     type = build_variant_type_copy (etype);\n \n   GFC_ARRAY_TYPE_P (type) = 1;\n-  TYPE_LANG_SPECIFIC (type)\n-      = ggc_alloc_cleared_lang_type (sizeof (struct lang_type));\n+  TYPE_LANG_SPECIFIC (type) = ggc_cleared_alloc<struct lang_type> ();\n \n   known_stride = (packed != PACKED_NO);\n   known_offset = 1;\n@@ -1816,8 +1815,7 @@ gfc_get_array_type_bounds (tree etype, int dimen, int codimen, tree * lbound,\n   TYPE_NAMELESS (fat_type) = 1;\n \n   GFC_DESCRIPTOR_TYPE_P (fat_type) = 1;\n-  TYPE_LANG_SPECIFIC (fat_type)\n-    = ggc_alloc_cleared_lang_type (sizeof (struct lang_type));\n+  TYPE_LANG_SPECIFIC (fat_type) = ggc_cleared_alloc<struct lang_type> ();\n \n   GFC_TYPE_ARRAY_RANK (fat_type) = dimen;\n   GFC_TYPE_ARRAY_CORANK (fat_type) = codimen;\n@@ -1991,8 +1989,7 @@ gfc_nonrestricted_type (tree t)\n     return t;\n \n   if (!TYPE_LANG_SPECIFIC (t))\n-    TYPE_LANG_SPECIFIC (t)\n-      = ggc_alloc_cleared_lang_type (sizeof (struct lang_type));\n+    TYPE_LANG_SPECIFIC (t) = ggc_cleared_alloc<struct lang_type> ();\n   /* If we're dealing with this very node already further up\n      the call chain (recursion via pointers and struct members)\n      we haven't yet determined if we really need a new type node.\n@@ -2044,8 +2041,7 @@ gfc_nonrestricted_type (tree t)\n \t\t  if (dataptr_type != GFC_TYPE_ARRAY_DATAPTR_TYPE (t))\n \t\t    {\n \t\t      TYPE_LANG_SPECIFIC (ret)\n-\t\t\t= ggc_alloc_cleared_lang_type (sizeof (struct\n-\t\t\t\t\t\t\t       lang_type));\n+\t\t\t= ggc_cleared_alloc<struct lang_type> ();\n \t\t      *TYPE_LANG_SPECIFIC (ret) = *TYPE_LANG_SPECIFIC (t);\n \t\t      GFC_TYPE_ARRAY_DATAPTR_TYPE (ret) = dataptr_type;\n \t\t    }"}, {"sha": "def6b9df00c85321c89e08ed3c04627c968f5718", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -793,10 +793,7 @@ enum gfc_array_kind\n };\n \n /* Array types only.  */\n-/* FIXME: the variable_size annotation here is needed because these types are\n-   variable-sized in some other frontends.  Due to gengtype deficiency the GTY\n-   options of such types have to agree across all frontends. */\n-struct GTY((variable_size))\tlang_type\t {\n+struct GTY(())\tlang_type\t {\n   int rank, corank;\n   enum gfc_array_kind akind;\n   tree lbound[GFC_MAX_DIMENSIONS];\n@@ -813,7 +810,7 @@ struct GTY((variable_size))\tlang_type\t {\n   tree caf_offset;\n };\n \n-struct GTY((variable_size)) lang_decl {\n+struct GTY(()) lang_decl {\n   /* Dummy variables.  */\n   tree saved_descriptor;\n   /* Assigned integer nodes.  Stringlength is the IO format string's length."}, {"sha": "ec2ea26628b8d2fce34456a626c66f29bd64809b", "filename": "gcc/function.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -307,7 +307,7 @@ try_fit_stack_local (HOST_WIDE_INT start, HOST_WIDE_INT length,\n static void\n add_frame_space (HOST_WIDE_INT start, HOST_WIDE_INT end)\n {\n-  struct frame_space *space = ggc_alloc_frame_space ();\n+  struct frame_space *space = ggc_alloc<frame_space> ();\n   space->next = crtl->frame_space_list;\n   crtl->frame_space_list = space;\n   space->start = start;\n@@ -655,7 +655,7 @@ static void\n insert_temp_slot_address (rtx address, struct temp_slot *temp_slot)\n {\n   void **slot;\n-  struct temp_slot_address_entry *t = ggc_alloc_temp_slot_address_entry ();\n+  struct temp_slot_address_entry *t = ggc_alloc<temp_slot_address_entry> ();\n   t->address = address;\n   t->temp_slot = temp_slot;\n   t->hash = temp_slot_address_compute_hash (t);\n@@ -802,7 +802,7 @@ assign_stack_temp_for_type (enum machine_mode mode, HOST_WIDE_INT size,\n \n \t  if (best_p->size - rounded_size >= alignment)\n \t    {\n-\t      p = ggc_alloc_temp_slot ();\n+\t      p = ggc_alloc<temp_slot> ();\n \t      p->in_use = 0;\n \t      p->size = best_p->size - rounded_size;\n \t      p->base_offset = best_p->base_offset + rounded_size;\n@@ -826,7 +826,7 @@ assign_stack_temp_for_type (enum machine_mode mode, HOST_WIDE_INT size,\n     {\n       HOST_WIDE_INT frame_offset_old = frame_offset;\n \n-      p = ggc_alloc_temp_slot ();\n+      p = ggc_alloc<temp_slot> ();\n \n       /* We are passing an explicit alignment request to assign_stack_local.\n \t One side effect of that is assign_stack_local will not round SIZE\n@@ -1254,10 +1254,10 @@ get_hard_reg_initial_val (enum machine_mode mode, unsigned int regno)\n   ivs = crtl->hard_reg_initial_vals;\n   if (ivs == 0)\n     {\n-      ivs = ggc_alloc_initial_value_struct ();\n+      ivs = ggc_alloc<initial_value_struct> ();\n       ivs->num_entries = 0;\n       ivs->max_entries = 5;\n-      ivs->entries = ggc_alloc_vec_initial_value_pair (5);\n+      ivs->entries = ggc_vec_alloc<initial_value_pair> (5);\n       crtl->hard_reg_initial_vals = ivs;\n     }\n \n@@ -4499,7 +4499,7 @@ allocate_struct_function (tree fndecl, bool abstract_p)\n {\n   tree fntype = fndecl ? TREE_TYPE (fndecl) : NULL_TREE;\n \n-  cfun = ggc_alloc_cleared_function ();\n+  cfun = ggc_cleared_alloc<function> ();\n \n   init_eh_for_function ();\n \n@@ -4573,7 +4573,7 @@ prepare_function_start (void)\n \n   if (flag_stack_usage_info)\n     {\n-      cfun->su = ggc_alloc_cleared_stack_usage ();\n+      cfun->su = ggc_cleared_alloc<stack_usage> ();\n       cfun->su->static_stack_size = -1;\n     }\n \n@@ -6153,7 +6153,7 @@ types_used_by_var_decl_insert (tree type, tree var_decl)\n       if (*slot == NULL)\n \t{\n \t  struct types_used_by_vars_entry *entry;\n-\t  entry = ggc_alloc_types_used_by_vars_entry ();\n+\t  entry = ggc_alloc<types_used_by_vars_entry> ();\n \t  entry->type = type;\n \t  entry->var_decl = var_decl;\n \t  *slot = entry;"}, {"sha": "808ef45bdf14de36e994361ac677e790083f1fd5", "filename": "gcc/gengtype.c", "status": "modified", "additions": 0, "deletions": 125, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -4972,130 +4972,6 @@ write_roots (pair_p variables, bool emit_pch)\n \t\t     \"gt_pch_scalar_rtab\");\n }\n \n-/* TRUE if type S has the GTY variable_size annotation.  */\n-\n-static bool\n-variable_size_p (const type_p s)\n-{\n-  options_p o;\n-  for (o = s->u.s.opt; o; o = o->next)\n-    if (strcmp (o->name, \"variable_size\") == 0)\n-      return true;\n-  return false;\n-}\n-\n-enum alloc_quantity\n-{ single, vector };\n-\n-/* Writes one typed allocator definition into output F for type\n-   identifier TYPE_NAME with optional type specifier TYPE_SPECIFIER.\n-   The allocator name will contain ALLOCATOR_TYPE.  If VARIABLE_SIZE\n-   is true, the allocator will have an extra parameter specifying\n-   number of bytes to allocate.  If QUANTITY is set to VECTOR, a\n-   vector allocator will be output.  */\n-\n-static void\n-write_typed_alloc_def (outf_p f, \n-                       bool variable_size, const char *type_specifier,\n-                       const char *type_name, const char *allocator_type,\n-                       enum alloc_quantity quantity)\n-{\n-  bool two_args = variable_size && (quantity == vector);\n-  gcc_assert (f != NULL);\n-  const char *type_name_as_id = filter_type_name (type_name);\n-  oprintf (f, \"#define ggc_alloc_%s%s\", allocator_type, type_name_as_id);\n-  oprintf (f, \"(%s%s%s) \",\n-\t   (variable_size ? \"SIZE\" : \"\"),\n-\t   (two_args ? \", \" : \"\"),\n-\t   (quantity == vector) ? \"n\" : \"\");\n-  oprintf (f, \"((%s%s *)\", type_specifier, type_name);\n-  oprintf (f, \"(ggc_internal_%salloc (\", allocator_type);\n-  if (variable_size)\n-    oprintf (f, \"SIZE\");\n-  else\n-    oprintf (f, \"sizeof (%s%s)\", type_specifier, type_name);\n-  if (quantity == vector)\n-    oprintf (f, \", n\");\n-  oprintf (f, \" MEM_STAT_INFO)))\\n\");\n-  if (type_name_as_id != type_name)\n-    free (CONST_CAST (char *, type_name_as_id));\n-}\n-\n-/* Writes a typed allocator definition into output F for a struct or\n-   union S, with a given ALLOCATOR_TYPE and QUANTITY for ZONE.  */\n-\n-static void\n-write_typed_struct_alloc_def (outf_p f,\n-\t\t\t      const type_p s, const char *allocator_type,\n-\t\t\t      enum alloc_quantity quantity)\n-{\n-  gcc_assert (union_or_struct_p (s));\n-  write_typed_alloc_def (f, variable_size_p (s), get_type_specifier (s),\n-                         s->u.s.tag, allocator_type, quantity);\n-}\n-\n-/* Writes a typed allocator definition into output F for a typedef P,\n-   with a given ALLOCATOR_TYPE and QUANTITY for ZONE.  */\n-\n-static void\n-write_typed_typedef_alloc_def (outf_p f,\n-                               const pair_p p, const char *allocator_type,\n-                               enum alloc_quantity quantity)\n-{\n-  write_typed_alloc_def (f, variable_size_p (p->type), \"\", p->name,\n-                         allocator_type, quantity);\n-}\n-\n-/* Writes typed allocator definitions into output F for the types in\n-   STRUCTURES and TYPEDEFS that are used by GC.  */\n-\n-static void\n-write_typed_alloc_defns (outf_p f,\n-                         const type_p structures, const pair_p typedefs)\n-{\n-  type_p s;\n-  pair_p p;\n-\n-  gcc_assert (f != NULL);\n-  oprintf (f,\n-\t   \"\\n/* Allocators for known structs and unions.  */\\n\\n\");\n-  for (s = structures; s; s = s->next)\n-    {\n-      if (!USED_BY_TYPED_GC_P (s))\n-\tcontinue;\n-      gcc_assert (union_or_struct_p (s));\n-      /* In plugin mode onput output ggc_alloc macro definitions\n-\t relevant to plugin input files.  */\n-      if (nb_plugin_files > 0 \n-\t  && ((s->u.s.line.file == NULL) || !s->u.s.line.file->inpisplugin))\n-\tcontinue;\n-      write_typed_struct_alloc_def (f, s, \"\", single);\n-      write_typed_struct_alloc_def (f, s, \"cleared_\", single);\n-      write_typed_struct_alloc_def (f, s, \"vec_\", vector);\n-      write_typed_struct_alloc_def (f, s, \"cleared_vec_\", vector);\n-    }\n-\n-  oprintf (f, \"\\n/* Allocators for known typedefs.  */\\n\");\n-  for (p = typedefs; p; p = p->next)\n-    {\n-      s = p->type;\n-      if (!USED_BY_TYPED_GC_P (s) || (strcmp (p->name, s->u.s.tag) == 0))\n-\tcontinue;\n-      /* In plugin mode onput output ggc_alloc macro definitions\n-\t relevant to plugin input files.  */\n-      if (nb_plugin_files > 0) \n-\t{\n-\t  struct fileloc* filoc = type_fileloc (s);\n-\t  if (!filoc || !filoc->file->inpisplugin)\n-\t    continue;\n-\t};\n-      write_typed_typedef_alloc_def (f, p, \"\", single);\n-      write_typed_typedef_alloc_def (f, p, \"cleared_\", single);\n-      write_typed_typedef_alloc_def (f, p, \"vec_\", vector);\n-      write_typed_typedef_alloc_def (f, p, \"cleared_vec_\", vector);\n-    }\n-}\n-\n /* Prints not-as-ugly version of a typename of T to OF.  Trades the uniquness\n    guaranteee for somewhat increased readability.  If name conflicts do happen,\n    this funcion will have to be adjusted to be more like\n@@ -5808,7 +5684,6 @@ main (int argc, char **argv)\n   open_base_files ();\n \n   output_header = plugin_output ? plugin_output : header_file;\n-  write_typed_alloc_defns (output_header, structures, typedefs);\n   DBGPRINT_COUNT_TYPE (\"structures before write_types outputheader\",\n \t\t       structures);\n   DBGPRINT_COUNT_TYPE (\"param_structs before write_types outputheader\","}, {"sha": "e89cc64b958096195a9e030ea3bc625fa0805818", "filename": "gcc/ggc-common.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fggc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fggc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-common.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -232,7 +232,7 @@ ggc_cleared_alloc_htab_ignore_args (size_t c ATTRIBUTE_UNUSED,\n \t\t\t\t    size_t n ATTRIBUTE_UNUSED)\n {\n   gcc_assert (c * n == sizeof (struct htab));\n-  return ggc_alloc_cleared_htab ();\n+  return ggc_cleared_alloc<htab> ();\n }\n \n /* TODO: once we actually use type information in GGC, create a new tag\n@@ -241,7 +241,7 @@ void *\n ggc_cleared_alloc_ptr_array_two_args (size_t c, size_t n)\n {\n   gcc_assert (sizeof (PTR *) == n);\n-  return ggc_internal_cleared_vec_alloc (sizeof (PTR *), c);\n+  return ggc_cleared_vec_alloc<PTR *> (c);\n }\n \n /* These are for splay_tree_new_ggc.  */"}, {"sha": "2c567dee32513f90bc6c4ad92c1562c323b65ed5", "filename": "gcc/ggc.h", "status": "modified", "additions": 26, "deletions": 7, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fggc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fggc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc.h?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -156,16 +156,35 @@ extern void dump_ggc_loc_statistics (bool);\n #define GGC_RESIZEVEC(T, P, N) \\\n     ((T *) ggc_realloc ((P), (N) * sizeof (T) MEM_STAT_INFO))\n \n-static inline void *\n-ggc_internal_vec_alloc (size_t s, size_t c CXX_MEM_STAT_INFO)\n+template<typename T>\n+static inline T *\n+ggc_alloc (ALONE_CXX_MEM_STAT_INFO)\n {\n-    return ggc_internal_alloc (c * s PASS_MEM_STAT);\n+  return static_cast<T *> (ggc_internal_alloc (sizeof (T) PASS_MEM_STAT));\n }\n \n-static inline void *\n-ggc_internal_cleared_vec_alloc (size_t s, size_t c CXX_MEM_STAT_INFO)\n+template<typename T>\n+static inline T *\n+ggc_cleared_alloc (ALONE_CXX_MEM_STAT_INFO)\n+{\n+  return static_cast<T *> (ggc_internal_cleared_alloc (sizeof (T)\n+\t\t\t\t\t\t       PASS_MEM_STAT));\n+}\n+\n+template<typename T>\n+static inline T *\n+ggc_vec_alloc (size_t c CXX_MEM_STAT_INFO)\n+{\n+    return static_cast<T *> (ggc_internal_alloc (c * sizeof (T)\n+\t\t\t\t\t\t PASS_MEM_STAT));\n+}\n+\n+template<typename T>\n+static inline T *\n+ggc_cleared_vec_alloc (size_t c CXX_MEM_STAT_INFO)\n {\n-    return ggc_internal_cleared_alloc (c * s PASS_MEM_STAT);\n+    return static_cast<T *> (ggc_internal_cleared_alloc (c * sizeof (T)\n+\t\t\t\t\t\t\t PASS_MEM_STAT));\n }\n \n static inline void *\n@@ -230,7 +249,7 @@ extern void stringpool_statistics (void);\n extern void init_ggc_heuristics (void);\n \n #define ggc_alloc_rtvec_sized(NELT)\t\t\t\t\\\n-  ggc_alloc_rtvec_def (sizeof (struct rtvec_def)\t\t\\\n+  (rtvec_def *) ggc_internal_alloc (sizeof (struct rtvec_def)\t\t\\\n \t\t       + ((NELT) - 1) * sizeof (rtx))\t\t\\\n \n /* Memory statistics passing versions of some allocators.  Too few of them to"}, {"sha": "03a84fb44f6f198dea5f717a8fb5d0cbdf36e8a3", "filename": "gcc/gimple.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -835,8 +835,7 @@ gimple_build_omp_for (gimple_seq body, int kind, tree clauses, size_t collapse,\n   gimple_omp_for_set_clauses (p, clauses);\n   gimple_omp_for_set_kind (p, kind);\n   p->collapse = collapse;\n-  p->iter =  static_cast <struct gimple_omp_for_iter *> (\n-   ggc_internal_cleared_vec_alloc (sizeof (*p->iter), collapse));\n+  p->iter =  ggc_cleared_vec_alloc<gimple_omp_for_iter> (collapse);\n \n   if (pre_body)\n     gimple_omp_for_set_pre_body (p, pre_body);\n@@ -1664,10 +1663,8 @@ gimple_copy (gimple stmt)\n \t  {\n \t    gimple_statement_omp_for *omp_for_copy =\n \t      as_a <gimple_statement_omp_for *> (copy);\n-\t    omp_for_copy->iter =\n-\t      static_cast <struct gimple_omp_for_iter *> (\n-\t\t  ggc_internal_vec_alloc (sizeof (struct gimple_omp_for_iter),\n-\t\t\t\t\t  gimple_omp_for_collapse (stmt)));\n+\t    omp_for_copy->iter = ggc_vec_alloc<gimple_omp_for_iter>\n+\t      ( gimple_omp_for_collapse (stmt));\n           }\n \t  for (i = 0; i < gimple_omp_for_collapse (stmt); i++)\n \t    {"}, {"sha": "8374c7adc1b90aa819dcf4b54fbc8a642bd0a698", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -1,3 +1,7 @@\n+2014-05-17  Trevor Saunders  <tsaunders@mozilla.com>\n+\n+\t* go-lang.c (struct GTY): Don't use variable_size gty attribute.\n+\n 2014-05-06  Chris Manghane  <cmang@google.com>\n \n \t* go-gcc.cc (Gcc_backend::nil_pointer_expression): New method."}, {"sha": "24b64375469e62cdfa1cb9d04609255fbf76d1bd", "filename": "gcc/go/go-lang.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fgo%2Fgo-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fgo%2Fgo-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-lang.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -51,7 +51,7 @@ struct GTY(()) lang_type\n \n /* Language-dependent contents of a decl.  */\n \n-struct GTY((variable_size)) lang_decl\n+struct GTY(()) lang_decl\n {\n   char dummy;\n };"}, {"sha": "d1f882adebf947fa445c061039cc94f2b6f59c5b", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -2599,7 +2599,7 @@ get_replacement_map (struct ipa_node_params *info, tree value, int parm_num)\n   struct ipa_replace_map *replace_map;\n \n \n-  replace_map = ggc_alloc_ipa_replace_map ();\n+  replace_map = ggc_alloc<ipa_replace_map> ();\n   if (dump_file)\n     {\n       fprintf (dump_file, \"    replacing \");\n@@ -3182,7 +3182,7 @@ find_aggregate_values_for_callers_subset (struct cgraph_node *node,\n \t  if (!item->value)\n \t    continue;\n \n-\t  v = ggc_alloc_ipa_agg_replacement_value ();\n+\t  v = ggc_alloc<ipa_agg_replacement_value> ();\n \t  v->index = i;\n \t  v->offset = item->offset;\n \t  v->value = item->value;\n@@ -3212,7 +3212,7 @@ known_aggs_to_agg_replacement_list (vec<ipa_agg_jump_function> known_aggs)\n     FOR_EACH_VEC_SAFE_ELT (aggjf->items, j, item)\n       {\n \tstruct ipa_agg_replacement_value *v;\n-\tv = ggc_alloc_ipa_agg_replacement_value ();\n+\tv = ggc_alloc<ipa_agg_replacement_value> ();\n \tv->index = i;\n \tv->offset = item->offset;\n \tv->value = item->value;"}, {"sha": "a0e845a6b3a1a4de323591ced3e83218d8692f1b", "filename": "gcc/ipa-devirt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fipa-devirt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fipa-devirt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-devirt.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -491,7 +491,7 @@ get_odr_type (tree type, bool insert)\n       tree binfo = TYPE_BINFO (type);\n       unsigned int i;\n \n-      val = ggc_alloc_cleared_odr_type_d ();\n+      val = ggc_cleared_alloc<odr_type_d> ();\n       val->type = type;\n       val->bases = vNULL;\n       val->derived_types = vNULL;"}, {"sha": "fd57f32bad8bfcafdf3cc2e1f936cfc40851d777", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -3315,7 +3315,7 @@ ipa_node_duplication_hook (struct cgraph_node *src, struct cgraph_node *dst,\n     {\n       struct ipa_agg_replacement_value *v;\n \n-      v = ggc_alloc_ipa_agg_replacement_value ();\n+      v = ggc_alloc<ipa_agg_replacement_value> ();\n       memcpy (v, old_av, sizeof (*v));\n       v->next = new_av;\n       new_av = v;\n@@ -4674,7 +4674,7 @@ read_agg_replacement_chain (struct lto_input_block *ib,\n       struct ipa_agg_replacement_value *av;\n       struct bitpack_d bp;\n \n-      av = ggc_alloc_ipa_agg_replacement_value ();\n+      av = ggc_alloc<ipa_agg_replacement_value> ();\n       av->offset = streamer_read_uhwi (ib);\n       av->index = streamer_read_uhwi (ib);\n       av->value = stream_read_tree (ib, data_in);"}, {"sha": "70991cc46938d6649449cf48843920e2e5c11473", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -1,3 +1,22 @@\n+2014-05-17  Trevor Saunders  <tsaunders@mozilla.com>\n+\n+\t* class.c (add_method_1): Adjust.\n+\t(java_treetreehash_new): Likewise.\n+\t* constants.c (set_constant_entry): Likewise.\n+\t(cpool_for_class): Likewise.\n+\t* decl.c (make_binding_level): Likewise.\n+\t(java_dup_lang_specific_decl): Likewise.\n+\t* expr.c (add_type_assertion): Likewise.\n+\t* java-tree.h (MAYBE_CREATE_VAR_LANG_DECL_SPECIFIC): Likewise.\n+\t(lang_decl): don't use variable_size gty attribute.\n+\t(MAYBE_CREATE_TYPE_TYPE_LANG_SPECIFIC): Adjust.\n+\t(lang_type): Don't use variable_size gty attribute.\n+\t* jcf-parse.c (java_parse_file): Adjust.\n+\t(process_zip_dir): Likewise.\n+\t* jcf.h: Remove usage of variable_size gty attribute.\n+\t* jcf-reader.c (jcf_parse_constant_pool): Adjust.\n+\t(jcf_parse_bootstrap_methods): Likewise.\n+\n 2014-05-17  Trevor Saunders  <tsaunders@mozilla.com>\n \n \t* constants.c (set_constant_entry): Adjust."}, {"sha": "a1e4a86033b0f5a230b5c0d33d2c9a3b0462a844", "filename": "gcc/java/class.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -764,8 +764,7 @@ add_method_1 (tree this_class, int access_flags, tree name, tree function_type)\n   fndecl = build_decl (input_location, FUNCTION_DECL, name, method_type);\n   DECL_CONTEXT (fndecl) = this_class;\n \n-  DECL_LANG_SPECIFIC (fndecl)\n-    = ggc_alloc_cleared_lang_decl(sizeof (struct lang_decl));\n+  DECL_LANG_SPECIFIC (fndecl) = ggc_cleared_alloc<struct lang_decl> ();\n   DECL_LANG_SPECIFIC (fndecl)->desc = LANG_DECL_FUNC;\n \n   /* Initialize the static initializer test table.  */\n@@ -3194,7 +3193,7 @@ java_treetreehash_new (htab_t ht, tree t)\n   e = htab_find_slot_with_hash (ht, t, hv, INSERT);\n   if (*e == NULL)\n     {\n-      tthe = ggc_alloc_cleared_treetreehash_entry ();\n+      tthe = ggc_cleared_alloc<treetreehash_entry> ();\n       tthe->key = t;\n       *e = tthe;\n     }"}, {"sha": "2e317c91bb69b9f14a7c36ea78f9ec2e4bc3a840", "filename": "gcc/java/constants.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fjava%2Fconstants.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fjava%2Fconstants.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fconstants.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -46,11 +46,8 @@ set_constant_entry (CPool *cpool, int index, int tag, jword value)\n   if (cpool->data == NULL)\n     {\n       cpool->capacity = 100;\n-      cpool->tags = (uint8 *) ggc_internal_cleared_alloc (sizeof (uint8)\n-\t\t\t\t\t\t\t  * cpool->capacity);\n-      cpool->data = ggc_alloc_cleared_vec_cpool_entry (sizeof\n-\t\t\t\t\t\t       (union cpool_entry),\n-\t\t\t\t\t\t       cpool->capacity);\n+      cpool->tags = ggc_cleared_vec_alloc<uint8> (cpool->capacity);\n+      cpool->data = ggc_cleared_vec_alloc<cpool_entry> (cpool->capacity);\n       cpool->count = 1;\n     }\n   if (index >= cpool->capacity)\n@@ -338,7 +335,7 @@ cpool_for_class (tree klass)\n \n   if (cpool == NULL)\n     {\n-      cpool = ggc_alloc_cleared_CPool ();\n+      cpool = ggc_cleared_alloc<CPool> ();\n       TYPE_CPOOL (klass) = cpool;\n     }\n   return cpool;"}, {"sha": "841fb4cbad1712e5ad0a2df6ebc652d615b9faa7", "filename": "gcc/java/decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -1307,7 +1307,7 @@ static struct binding_level *\n make_binding_level (void)\n {\n   /* NOSTRICT */\n-  return ggc_alloc_cleared_binding_level ();\n+  return ggc_cleared_alloc<binding_level> ();\n }\n \n void\n@@ -1646,7 +1646,7 @@ java_dup_lang_specific_decl (tree node)\n     return;\n \n   lang_decl_size = sizeof (struct lang_decl);\n-  x = ggc_alloc_lang_decl (lang_decl_size);\n+  x = ggc_alloc<struct lang_decl> ();\n   memcpy (x, DECL_LANG_SPECIFIC (node), lang_decl_size);\n   DECL_LANG_SPECIFIC (node) = x;\n }"}, {"sha": "51b8f0f7c8f319569b2791cde9a05d9a218b6fb8", "filename": "gcc/java/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -471,7 +471,7 @@ add_type_assertion (tree klass, int assertion_code, tree op1, tree op2)\n   if (*as_pp)\n     return;\n \n-  *as_pp = ggc_alloc_type_assertion ();\n+  *as_pp = ggc_alloc<type_assertion> ();\n   **(type_assertion **)as_pp = as;\n }\n "}, {"sha": "e832f44fb0feb52d7a09cdb54588701d67584aba", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -699,8 +699,7 @@ union GTY((desc (\"TREE_CODE (&%h.generic) == IDENTIFIER_NODE\"),\n #define MAYBE_CREATE_VAR_LANG_DECL_SPECIFIC(T)                       \\\n   if (DECL_LANG_SPECIFIC (T) == NULL)                                \\\n     {                                                                \\\n-      DECL_LANG_SPECIFIC ((T))                                       \\\n-        = ggc_alloc_cleared_lang_decl (sizeof (struct lang_decl));   \\\n+      DECL_LANG_SPECIFIC ((T)) = ggc_cleared_alloc<struct lang_decl> (); \\\n       DECL_LANG_SPECIFIC (T)->desc = LANG_DECL_VAR;                  \\\n     }\n \n@@ -808,7 +807,7 @@ struct GTY(()) lang_decl_var {\n \n enum lang_decl_desc {LANG_DECL_FUNC, LANG_DECL_VAR};\n \n-struct GTY((variable_size)) lang_decl {\n+struct GTY(()) lang_decl {\n   enum lang_decl_desc desc;\n   union lang_decl_u\n     {\n@@ -825,8 +824,7 @@ struct GTY((variable_size)) lang_decl {\n #define TYPE_CPOOL_DATA_REF(T)\t(TYPE_LANG_SPECIFIC (T)->cpool_data_ref)\n #define MAYBE_CREATE_TYPE_TYPE_LANG_SPECIFIC(T) \\\n   if (TYPE_LANG_SPECIFIC ((T)) == NULL)\t\t\\\n-     TYPE_LANG_SPECIFIC ((T))\t\t\t\\\n-       = ggc_alloc_cleared_lang_type (sizeof (struct lang_type));\n+     TYPE_LANG_SPECIFIC ((T)) = ggc_cleared_alloc<struct lang_type> ();\n \n #define TYPE_DUMMY(T)\t\t(TYPE_LANG_SPECIFIC(T)->dummy_class)\n \n@@ -869,10 +867,7 @@ typedef struct GTY(()) method_entry_d {\n } method_entry;\n \n \n-/* FIXME: the variable_size annotation here is needed because these types are\n-   variable-sized in some other frontends.  Due to gengtype deficiency the GTY\n-   options of such types have to agree across all frontends. */\n-struct GTY((variable_size)) lang_type {\n+struct GTY(()) lang_type {\n   tree signature;\n   struct JCF *jcf;\n   struct CPool *cpool;"}, {"sha": "7425b4e05e3c2d0ad64ad3f7bb7cd6e77cc542dd", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -1905,7 +1905,7 @@ java_parse_file (void)\n       if (magic == 0xcafebabe)\n \t{\n \t  CLASS_FILE_P (node) = 1;\n-\t  current_jcf = ggc_alloc_cleared_JCF ();\n+\t  current_jcf = ggc_cleared_alloc<JCF> ();\n \t  current_jcf->read_state = finput;\n \t  current_jcf->filbuf = jcf_filbuf_from_stdio;\n \t  jcf_parse (current_jcf);\n@@ -1922,7 +1922,7 @@ java_parse_file (void)\n \t}\n       else if (magic == (JCF_u4)ZIPMAGIC)\n \t{\n-\t  main_jcf = ggc_alloc_cleared_JCF ();\n+\t  main_jcf = ggc_cleared_alloc<JCF> ();\n \t  main_jcf->read_state = finput;\n \t  main_jcf->filbuf = jcf_filbuf_from_stdio;\n \t  linemap_add (line_table, LC_ENTER, false, filename, 0);\n@@ -2178,7 +2178,7 @@ process_zip_dir (FILE *finput)\n \n       class_name = compute_class_name (zdir);\n       file_name  = XNEWVEC (char, zdir->filename_length+1);\n-      jcf = ggc_alloc_cleared_JCF ();\n+      jcf = ggc_cleared_alloc<JCF> ();\n \n       strncpy (file_name, class_name_in_zip_dir, zdir->filename_length);\n       file_name [zdir->filename_length] = '\\0';"}, {"sha": "ed175cb24c1a6966571d80f6cb32f796bf5f78b3", "filename": "gcc/java/jcf-reader.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fjava%2Fjcf-reader.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fjava%2Fjcf-reader.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-reader.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -341,7 +341,8 @@ jcf_parse_constant_pool (JCF* jcf)\n   int i, n;\n   JPOOL_SIZE (jcf) = (JCF_FILL (jcf, 2), JCF_readu2 (jcf));\n   jcf->cpool.tags = (uint8 *) ggc_alloc_atomic (JPOOL_SIZE (jcf));\n-  jcf->cpool.data = ggc_alloc_cpool_entry (sizeof (jword) * JPOOL_SIZE (jcf));\n+  jcf->cpool.data = (cpool_entry *) ggc_internal_cleared_alloc\n+    (sizeof (jword) * JPOOL_SIZE (jcf));\n   jcf->cpool.tags[0] = 0;\n #ifdef HANDLE_START_CONSTANT_POOL\n   HANDLE_START_CONSTANT_POOL (JPOOL_SIZE (jcf));\n@@ -551,9 +552,7 @@ jcf_parse_bootstrap_methods (JCF* jcf, int attribute_length ATTRIBUTE_UNUSED)\n   int i;\n   uint16 num_methods = JCF_readu2 (jcf);\n   jcf->bootstrap_methods.count = num_methods;\n-  jcf->bootstrap_methods.methods\n-    = (bootstrap_method *) ggc_alloc_atomic (num_methods\n-\t\t\t\t\t      * sizeof (bootstrap_method));\n+  jcf->bootstrap_methods.methods = ggc_vec_alloc<bootstrap_method> (num_methods);\n #ifdef HANDLE_START_BOOTSTRAP_METHODS\n   HANDLE_START_BOOTSTRAP_METHODS (jcf, num_methods);\n #endif\n@@ -564,9 +563,7 @@ jcf_parse_bootstrap_methods (JCF* jcf, int attribute_length ATTRIBUTE_UNUSED)\n       bootstrap_method *m = &jcf->bootstrap_methods.methods[i];\n       m->method_ref = JCF_readu2 (jcf);\n       m->num_arguments = JCF_readu2 (jcf);\n-      m->bootstrap_arguments\n-\t= (unsigned *) ggc_alloc_atomic (m->num_arguments\n-\t\t\t\t\t * sizeof (unsigned));\n+      m->bootstrap_arguments = ggc_vec_alloc<unsigned> (m->num_arguments);\n       for (j = 0; j < m->num_arguments; j++)\n \tm->bootstrap_arguments[j] = JCF_readu2 (jcf);\n     }"}, {"sha": "0988d658dccc2b3ddccc0028801223cefa8fc537", "filename": "gcc/java/jcf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fjava%2Fjcf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fjava%2Fjcf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf.h?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -65,7 +65,7 @@ jcf_open_exact_case (const char* filename, int oflag);\n struct JCF;\n typedef int (*jcf_filbuf_t) (struct JCF*, int needed);\n \n-union GTY((variable_size)) cpool_entry {\n+union GTY(()) cpool_entry {\n   jword GTY ((tag (\"0\"))) w;\n   tree GTY ((tag (\"1\"))) t;\n };"}, {"sha": "c81b6472de6d2c0218207dc438bcf7e32aeef4cc", "filename": "gcc/loop-iv.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Floop-iv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Floop-iv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-iv.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -3032,7 +3032,7 @@ get_simple_loop_desc (struct loop *loop)\n \n   /* At least desc->infinite is not always initialized by\n      find_simple_loop_exit.  */\n-  desc = ggc_alloc_cleared_niter_desc ();\n+  desc = ggc_cleared_alloc<niter_desc> ();\n   iv_analysis_loop_init (loop);\n   find_simple_exit (loop, desc);\n   loop->simple_loop_desc = desc;"}, {"sha": "2329d1a6be52b1aa9a54119f7cbe7a8648549b46", "filename": "gcc/lto-cgraph.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Flto-cgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Flto-cgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-cgraph.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -1756,7 +1756,7 @@ input_node_opt_summary (struct cgraph_node *node,\n   count = streamer_read_uhwi (ib_main);\n   for (i = 0; i < count; i++)\n     {\n-      struct ipa_replace_map *map = ggc_alloc_ipa_replace_map ();\n+      struct ipa_replace_map *map = ggc_alloc<ipa_replace_map> ();\n \n       vec_safe_push (node->clone.tree_map, map);\n       map->parm_num = streamer_read_uhwi (ib_main);"}, {"sha": "d88776398bac3fe3b0d848ed9af7d2d5974c99c6", "filename": "gcc/lto-section-in.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Flto-section-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Flto-section-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-section-in.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -364,7 +364,7 @@ lto_get_decl_name_mapping (struct lto_file_decl_data *decl_data,\n struct lto_in_decl_state *\n lto_new_in_decl_state (void)\n {\n-  return ggc_alloc_cleared_lto_in_decl_state ();\n+  return ggc_cleared_alloc<lto_in_decl_state> ();\n }\n \n /* Delete STATE and its components. */"}, {"sha": "a18c64e060ddd5aaff9ed0a7e7f1017f0fa533d0", "filename": "gcc/lto-streamer-in.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Flto-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Flto-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-in.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -279,7 +279,7 @@ lto_input_eh_catch_list (struct lto_input_block *ib, struct data_in *data_in,\n       lto_tag_check_range (tag, LTO_eh_catch, LTO_eh_catch);\n \n       /* Read the catch node.  */\n-      n = ggc_alloc_cleared_eh_catch_d ();\n+      n = ggc_cleared_alloc<eh_catch_d> ();\n       n->type_list = stream_read_tree (ib, data_in);\n       n->filter_list = stream_read_tree (ib, data_in);\n       n->label = stream_read_tree (ib, data_in);\n@@ -319,7 +319,7 @@ input_eh_region (struct lto_input_block *ib, struct data_in *data_in, int ix)\n   if (tag == LTO_null)\n     return NULL;\n \n-  r = ggc_alloc_cleared_eh_region_d ();\n+  r = ggc_cleared_alloc<eh_region_d> ();\n   r->index = streamer_read_hwi (ib);\n \n   gcc_assert (r->index == ix);\n@@ -396,7 +396,7 @@ input_eh_lp (struct lto_input_block *ib, struct data_in *data_in, int ix)\n \n   lto_tag_check_range (tag, LTO_eh_landing_pad, LTO_eh_landing_pad);\n \n-  lp = ggc_alloc_cleared_eh_landing_pad_d ();\n+  lp = ggc_cleared_alloc<eh_landing_pad_d> ();\n   lp->index = streamer_read_hwi (ib);\n   gcc_assert (lp->index == ix);\n   lp->next_lp = (eh_landing_pad) (intptr_t) streamer_read_hwi (ib);\n@@ -697,7 +697,7 @@ input_cfg (struct lto_input_block *ib, struct data_in *data_in,\n   if (n_loops == 0)\n     return;\n \n-  struct loops *loops = ggc_alloc_cleared_loops ();\n+  struct loops *loops = ggc_cleared_alloc<struct loops> ();\n   init_loops_structure (fn, loops, n_loops);\n   set_loops_for_fn (fn, loops);\n "}, {"sha": "7c93cb7d6a0e2ebabcf953630d99eca7b53f301d", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -1,3 +1,11 @@\n+2014-05-17  Trevor Saunders  <tsaunders@mozilla.com>\n+\n+\t* lto-tree.h: Don't use variable_size gty attribute.\n+\t* lto.c (lto_read_in_decl_state): Adjust.\n+\t(create_subid_section_table): Likewise.\n+\t(lto_flatten_files): Likewise.\n+\t(read_cgraph_and_symbols): Likewise.\n+\n 2014-05-06  Kenneth Zadeck  <zadeck@naturalbridge.com>\n \t    Mike Stump  <mikestump@comcast.net>\n \t    Richard Sandiford  <rdsandiford@googlemail.com>"}, {"sha": "4e3f5d612ebaf5632708905e42b45ef04b7b4108", "filename": "gcc/lto/lto-tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Flto%2Flto-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Flto%2Flto-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-tree.h?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -28,12 +28,12 @@ struct GTY(()) lang_identifier\n   struct tree_identifier base;\n };\n \n-struct GTY((variable_size)) lang_decl\n+struct GTY(()) lang_decl\n {\n   int dummy;  /* Added because ggc does not like empty structs.  */\n };\n \n-struct GTY((variable_size)) lang_type\n+struct GTY(()) lang_type\n {\n   int dummy;  /* Added because ggc does not like empty structs.  */\n };"}, {"sha": "8af49466152123cfbd6f68a5e3d0db61005a92d2", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -244,7 +244,7 @@ lto_read_in_decl_state (struct data_in *data_in, const uint32_t *data,\n   for (i = 0; i < LTO_N_DECL_STREAMS; i++)\n     {\n       uint32_t size = *data++;\n-      tree *decls = ggc_alloc_vec_tree (size);\n+      tree *decls = ggc_vec_alloc<tree> (size);\n \n       for (j = 0; j < size; j++)\n \tdecls[j] = streamer_tree_cache_get_tree (data_in->reader_cache, data[j]);\n@@ -2159,7 +2159,7 @@ create_subid_section_table (struct lto_section_slot *ls, splay_tree file_ids,\n     }\n   else\n     {\n-      file_data = ggc_alloc_lto_file_decl_data ();\n+      file_data = ggc_alloc<lto_file_decl_data> ();\n       memset(file_data, 0, sizeof (struct lto_file_decl_data));\n       file_data->id = id;\n       file_data->section_hash_table = lto_obj_create_section_hash_table ();;\n@@ -2860,7 +2860,7 @@ lto_flatten_files (struct lto_file_decl_data **orig, int count, int last_file_ix\n \n   lto_stats.num_input_files = count;\n   all_file_decl_data\n-    = ggc_alloc_cleared_vec_lto_file_decl_data_ptr (count + 1);\n+    = ggc_cleared_vec_alloc<lto_file_decl_data_ptr> (count + 1);\n   /* Set the hooks so that all of the ipa passes can read in their data.  */\n   lto_set_in_hooks (all_file_decl_data, get_section_data, free_section_data);\n   for (i = 0, k = 0; i < last_file_ix; i++) \n@@ -2903,7 +2903,7 @@ read_cgraph_and_symbols (unsigned nfiles, const char **fnames)\n   timevar_push (TV_IPA_LTO_DECL_IN);\n \n   real_file_decl_data\n-    = decl_data = ggc_alloc_cleared_vec_lto_file_decl_data_ptr (nfiles + 1);\n+    = decl_data = ggc_cleared_vec_alloc<lto_file_decl_data_ptr> (nfiles + 1);\n   real_file_count = nfiles;\n \n   /* Read the resolution file.  */"}, {"sha": "73a41b6bcea9d68dfa07e9e519427e834746cb05", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -1,3 +1,14 @@\n+2014-05-17  Trevor Saunders  <tsaunders@mozilla.com>\n+\n+\t* objc-act.c (objc_build_string_object): Adjust.\n+\t(continue_class): Likewise.\n+\t* objc-act.h (ALLOC_OBJC_TYPE_LANG_SPECIFIC): Likewise.\n+\t* objc-map.c (objc_map_alloc_ggc): Likewise.\n+\t(objc_map_private_resize): Likewise.\n+\t* objc-next-runtime-abi-02.c (objc_next_runtime_abi_02_init):\n+\tLikewise.\n+\t(hash_name_enter): Likewise.\n+\n 2014-05-06  Kenneth Zadeck  <zadeck@naturalbridge.com>\n \t    Mike Stump  <mikestump@comcast.net>\n \t    Richard Sandiford  <rdsandiford@googlemail.com>"}, {"sha": "03b41504c4ad4ea7cc346bc9ceba7a59b4888e6f", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -3199,7 +3199,7 @@ objc_build_string_object (tree string)\n \n   if (!desc)\n     {\n-      *loc = desc = ggc_alloc_string_descriptor ();\n+      *loc = desc = ggc_alloc<string_descriptor> ();\n       desc->literal = string;\n       desc->constructor =\n \t(*runtime.build_const_string_constructor) (input_location, string, length);\n@@ -7032,7 +7032,7 @@ continue_class (tree klass)\n \tuprivate_record = CLASS_STATIC_TEMPLATE (implementation_template);\n \tobjc_instance_type = build_pointer_type (uprivate_record);\n \n-\timp_entry = ggc_alloc_imp_entry ();\n+\timp_entry = ggc_alloc<struct imp_entry> ();\n \n \timp_entry->next = imp_list;\n \timp_entry->imp_context = klass;"}, {"sha": "7e1e265bf08948c5787e50b43950b30e18522722", "filename": "gcc/objc/objc-act.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fobjc%2Fobjc-act.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fobjc%2Fobjc-act.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.h?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -192,8 +192,7 @@ typedef enum objc_property_assign_semantics {\n #define SIZEOF_OBJC_TYPE_LANG_SPECIFIC sizeof (struct lang_type)\n #define ALLOC_OBJC_TYPE_LANG_SPECIFIC(NODE)\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n-    TYPE_LANG_SPECIFIC (NODE)\t\t\t\t\t\t\\\n-      = ggc_alloc_cleared_lang_type (sizeof (struct lang_type));\t\\\n+      TYPE_LANG_SPECIFIC (NODE) = ggc_cleared_alloc<struct lang_type> (); \\\n   } while (0)\n \n #define TYPE_HAS_OBJC_INFO(TYPE)\t\t\t\t\\"}, {"sha": "aaee7295a9f6e07948f27ab342713f4008d02377", "filename": "gcc/objc/objc-map.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fobjc%2Fobjc-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fobjc%2Fobjc-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-map.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -56,7 +56,7 @@ next_power_of_two (size_t x)\n objc_map_t\n objc_map_alloc_ggc (size_t initial_capacity)\n {\n-  objc_map_t map = (objc_map_t) ggc_internal_cleared_vec_alloc (1, sizeof (struct objc_map_private));\n+  objc_map_t map = ggc_cleared_alloc<objc_map_private> ();\n   if (map == NULL)\n     OUT_OF_MEMORY;\n   \n@@ -67,8 +67,8 @@ objc_map_alloc_ggc (size_t initial_capacity)\n   map->maximum_load_factor = 70;\n   map->max_number_of_non_empty_slots = (initial_capacity * map->maximum_load_factor) / 100;\n \n-  map->slots = (tree *)ggc_internal_cleared_vec_alloc (initial_capacity, sizeof (tree));\n-  map->values = (tree *)ggc_internal_cleared_vec_alloc (initial_capacity, sizeof (tree));\n+  map->slots = ggc_cleared_vec_alloc<tree> (initial_capacity);\n+  map->values = ggc_cleared_vec_alloc<tree> (initial_capacity);\n \n   if (map->slots == NULL)\n     OUT_OF_MEMORY;\n@@ -112,8 +112,8 @@ objc_map_private_resize (objc_map_t map, size_t new_number_of_slots)\n   map->max_number_of_non_empty_slots = (map->number_of_slots * map->maximum_load_factor) / 100;\n \n \n-  map->slots = (tree *)ggc_internal_cleared_vec_alloc (map->number_of_slots, sizeof (tree));\n-  map->values = (tree *)ggc_internal_cleared_vec_alloc (map->number_of_slots, sizeof (tree));\n+  map->slots = ggc_cleared_vec_alloc<tree> (map->number_of_slots);\n+  map->values = ggc_cleared_vec_alloc<tree> (map->number_of_slots);\n \n   if (map->slots == NULL)\n     OUT_OF_MEMORY;"}, {"sha": "85033a3074c5a042f0b684e6cdc94b40f617df8d", "filename": "gcc/objc/objc-next-runtime-abi-02.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fobjc%2Fobjc-next-runtime-abi-02.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fobjc%2Fobjc-next-runtime-abi-02.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-next-runtime-abi-02.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -238,7 +238,7 @@ static GTY ((length (\"SIZEHASHTABLE\"))) hash *extern_names;\n bool\n objc_next_runtime_abi_02_init (objc_runtime_hooks *rthooks)\n {\n-  extern_names = ggc_alloc_cleared_vec_hash (SIZEHASHTABLE);\n+  extern_names = ggc_cleared_vec_alloc<hash> (SIZEHASHTABLE);\n \n   if (flag_objc_exceptions && flag_objc_sjlj_exceptions)\n     {\n@@ -857,7 +857,7 @@ hash_name_enter (hash *hashlist, tree id)\n   hash obj;\n   int slot = IDENTIFIER_HASH_VALUE (DECL_NAME (id)) % SIZEHASHTABLE;\n \n-  obj = ggc_alloc_hashed_entry ();\n+  obj = ggc_alloc<hashed_entry> ();\n   obj->list = 0;\n   obj->next = hashlist[slot];\n   obj->key = id;"}, {"sha": "247113820840b4a3cd94c67bb05fbd521b85bd47", "filename": "gcc/objcp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fobjcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fobjcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjcp%2FChangeLog?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -1,3 +1,7 @@\n+2014-05-17  Trevor Saunders  <tsaunders@mozilla.com>\n+\n+\t* objcp-decl.h: Adjust.\n+\n 2014-04-14  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* objcp-decl.h (OBJC_TYPE_NAME, OBJC_SET_TYPE_NAME): Use"}, {"sha": "46eb4f3314c765027ac26b3f5ca98aa154dd1074", "filename": "gcc/objcp/objcp-decl.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fobjcp%2Fobjcp-decl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fobjcp%2Fobjcp-decl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjcp%2Fobjcp-decl.h?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -66,8 +66,8 @@ extern tree objcp_end_compound_stmt (tree, int);\n #undef ALLOC_OBJC_TYPE_LANG_SPECIFIC\n #define ALLOC_OBJC_TYPE_LANG_SPECIFIC(NODE)\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n-    TYPE_LANG_SPECIFIC (NODE) = ggc_alloc_cleared_lang_type\t\t\\\n-      (sizeof (struct lang_type_class));\t\t\\\n+    TYPE_LANG_SPECIFIC (NODE) = (struct lang_type *) \\\n+      ggc_internal_cleared_alloc (sizeof (struct lang_type_class));\t\\\n     TYPE_LANG_SPECIFIC (NODE)->u.c.h.is_lang_type_class = 1;\t\t\\\n   } while (0)\n "}, {"sha": "fc58b63b9ee4a328d65595ac746518760231fe0b", "filename": "gcc/optabs.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -6153,7 +6153,7 @@ set_optab_libfunc (optab op, enum machine_mode mode, const char *name)\n     val = 0;\n   slot = (struct libfunc_entry **) htab_find_slot (libfunc_hash, &e, INSERT);\n   if (*slot == NULL)\n-    *slot = ggc_alloc_libfunc_entry ();\n+    *slot = ggc_alloc<libfunc_entry> ();\n   (*slot)->op = op;\n   (*slot)->mode1 = mode;\n   (*slot)->mode2 = VOIDmode;\n@@ -6181,7 +6181,7 @@ set_conv_libfunc (convert_optab optab, enum machine_mode tmode,\n     val = 0;\n   slot = (struct libfunc_entry **) htab_find_slot (libfunc_hash, &e, INSERT);\n   if (*slot == NULL)\n-    *slot = ggc_alloc_libfunc_entry ();\n+    *slot = ggc_alloc<libfunc_entry> ();\n   (*slot)->op = optab;\n   (*slot)->mode1 = tmode;\n   (*slot)->mode2 = fmode;\n@@ -6274,8 +6274,7 @@ init_tree_optimization_optabs (tree optnode)\n   if (tmp_optabs)\n     memset (tmp_optabs, 0, sizeof (struct target_optabs));\n   else\n-    tmp_optabs = (struct target_optabs *)\n-      ggc_alloc_atomic (sizeof (struct target_optabs));\n+    tmp_optabs = ggc_alloc<target_optabs> ();\n \n   /* Generate a new set of optabs into tmp_optabs.  */\n   init_all_optabs (tmp_optabs);"}, {"sha": "43662513e9a5cf2f9f4e4da7f126b96f60d9d843", "filename": "gcc/passes.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -1532,7 +1532,7 @@ do_per_function_toporder (void (*callback) (function *, void *data), void *data)\n   else\n     {\n       gcc_assert (!order);\n-      order = ggc_alloc_vec_cgraph_node_ptr (cgraph_n_nodes);\n+      order = ggc_vec_alloc<cgraph_node_ptr> (cgraph_n_nodes);\n       nnodes = ipa_reverse_postorder (order);\n       for (i = nnodes - 1; i >= 0; i--)\n         order[i]->process = 1;"}, {"sha": "d9460a097665037d1a562c0e845504d22e4a52f8", "filename": "gcc/rtl.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -267,7 +267,7 @@ struct GTY((variable_size)) hwivec_def {\n /* RTL expression (\"rtx\").  */\n \n struct GTY((chain_next (\"RTX_NEXT (&%h)\"),\n-\t    chain_prev (\"RTX_PREV (&%h)\"), variable_size)) rtx_def {\n+\t    chain_prev (\"RTX_PREV (&%h)\"))) rtx_def {\n   /* The kind of expression this is.  */\n   ENUM_BITFIELD(rtx_code) code: 16;\n \n@@ -422,7 +422,7 @@ struct GTY((chain_next (\"RTX_NEXT (&%h)\"),\n    for a variable number of things.  The principle use is inside\n    PARALLEL expressions.  */\n \n-struct GTY((variable_size)) rtvec_def {\n+struct GTY(()) rtvec_def {\n   int num_elem;\t\t/* number of elements */\n   rtx GTY ((length (\"%h.num_elem\"))) elem[1];\n };"}, {"sha": "a0b08995513ada04cabf364ea4d072f05a479dee", "filename": "gcc/sese.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fsese.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fsese.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsese.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -698,7 +698,7 @@ if_region_set_false_region (ifsese if_region, sese region)\n \n   if (slot)\n     {\n-      struct loop_exit *loop_exit = ggc_alloc_cleared_loop_exit ();\n+      struct loop_exit *loop_exit = ggc_cleared_alloc<struct loop_exit> ();\n \n       memcpy (loop_exit, *((struct loop_exit **) slot), sizeof (struct loop_exit));\n       htab_clear_slot (current_loops->exits, slot);"}, {"sha": "c880cb1e6785b132f58392c6a75d0bc10097c6b1", "filename": "gcc/stringpool.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fstringpool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fstringpool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstringpool.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -258,10 +258,10 @@ static GTY(()) struct string_pool_data * spd;\n void\n gt_pch_save_stringpool (void)\n {\n-  spd = ggc_alloc_string_pool_data ();\n+  spd = ggc_alloc<string_pool_data> ();\n   spd->nslots = ident_hash->nslots;\n   spd->nelements = ident_hash->nelements;\n-  spd->entries = ggc_alloc_vec_ht_identifier_ptr (spd->nslots);\n+  spd->entries = ggc_vec_alloc<ht_identifier_ptr> (spd->nslots);\n   memcpy (spd->entries, ident_hash->entries,\n \t  spd->nslots * sizeof (spd->entries[0]));\n }"}, {"sha": "5f1a208f5f26c09b2465eddd1ace9ef68730102c", "filename": "gcc/target-globals.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Ftarget-globals.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Ftarget-globals.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-globals.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -83,13 +83,13 @@ save_target_globals (void)\n   g = (struct target_globals *) p;\n   g->flag_state = &p->flag_state;\n   g->regs = ggc_internal_cleared_alloc (sizeof (struct target_regs));\n-  g->rtl = ggc_alloc_cleared_target_rtl ();\n+  g->rtl = ggc_cleared_alloc<target_rtl> ();\n   g->hard_regs\n     = ggc_internal_cleared_alloc (sizeof (struct target_hard_regs));\n   g->reload = ggc_internal_cleared_alloc (sizeof (struct target_reload));\n   g->expmed =  ggc_internal_cleared_alloc (sizeof (struct target_expmed));\n   g->optabs = &p->optabs;\n-  g->libfuncs = ggc_alloc_cleared_target_libfuncs ();\n+  g->libfuncs = ggc_cleared_alloc<target_libfuncs> ();\n   g->cfgloop = &p->cfgloop;\n   g->ira = ggc_internal_cleared_alloc (sizeof (struct target_ira));\n   g->ira_int = ggc_internal_cleared_alloc (sizeof (struct target_ira_int));"}, {"sha": "a02bec0859b969c129f15d9ad4d1bd265933bced", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -1156,7 +1156,7 @@ general_init (const char *argv0)\n      table.  */\n   init_ggc ();\n   init_stringpool ();\n-  line_table = ggc_alloc_line_maps ();\n+  line_table = ggc_alloc<line_maps> ();\n   linemap_init (line_table);\n   line_table->reallocator = realloc_for_line_map;\n   line_table->round_alloc_size = ggc_round_alloc_size;"}, {"sha": "f73f454cab594fb2a923a0667b542595c6168e00", "filename": "gcc/trans-mem.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Ftrans-mem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Ftrans-mem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftrans-mem.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -479,7 +479,7 @@ record_tm_replacement (tree from, tree to)\n   if (tm_wrap_map == NULL)\n     tm_wrap_map = htab_create_ggc (32, tree_map_hash, tree_map_eq, 0);\n \n-  h = ggc_alloc_tree_map ();\n+  h = ggc_alloc<tree_map> ();\n   h->hash = htab_hash_pointer (from);\n   h->base.from = from;\n   h->to = to;\n@@ -3070,7 +3070,7 @@ split_bb_make_tm_edge (gimple stmt, basic_block dest_bb,\n   struct tm_restart_node *n = (struct tm_restart_node *) *slot;\n   if (n == NULL)\n     {\n-      n = ggc_alloc_tm_restart_node ();\n+      n = ggc_alloc<tm_restart_node> ();\n       *n = dummy;\n     }\n   else"}, {"sha": "126a1a9e9c77452300ec86dea00df856ada4c20e", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -6902,7 +6902,7 @@ move_sese_region_to_fn (struct function *dest_cfun, basic_block entry_bb,\n     }\n \n   /* Initialize an empty loop tree.  */\n-  struct loops *loops = ggc_alloc_cleared_loops ();\n+  struct loops *loops = ggc_cleared_alloc<struct loops> ();\n   init_loops_structure (dest_cfun, loops, 1);\n   loops->state = LOOPS_MAY_HAVE_MULTIPLE_LATCHES;\n   set_loops_for_fn (dest_cfun, loops);"}, {"sha": "f4075fc5bd703e585c7a8e795c75fd736c5d31c8", "filename": "gcc/tree-data-ref.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Ftree-data-ref.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Ftree-data-ref.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.h?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -565,7 +565,7 @@ lambda_vector_gcd (lambda_vector vector, int size)\n static inline lambda_vector\n lambda_vector_new (int size)\n {\n-  return (lambda_vector) ggc_internal_cleared_alloc (sizeof (int) * size);\n+  return ggc_cleared_vec_alloc<int> (size);\n }\n \n /* Clear out vector VEC1 of length SIZE.  */"}, {"sha": "db02cbdb1b577d1809df7a3313013bf8102a7223", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -82,7 +82,7 @@ add_stmt_to_eh_lp_fn (struct function *ifun, gimple t, int num)\n \n   gcc_assert (num != 0);\n \n-  n = ggc_alloc_throw_stmt_node ();\n+  n = ggc_alloc<throw_stmt_node> ();\n   n->stmt = t;\n   n->lp_nr = num;\n "}, {"sha": "c4412bad4d5127897edd24cb457a7d2609b2f4cf", "filename": "gcc/tree-iterator.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Ftree-iterator.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Ftree-iterator.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-iterator.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -131,7 +131,7 @@ tsi_link_before (tree_stmt_iterator *i, tree t, enum tsi_iterator_update mode)\n     }\n   else\n     {\n-      head = ggc_alloc_tree_statement_list_node ();\n+      head = ggc_alloc<tree_statement_list_node> ();\n       head->prev = NULL;\n       head->next = NULL;\n       head->stmt = t;\n@@ -207,7 +207,7 @@ tsi_link_after (tree_stmt_iterator *i, tree t, enum tsi_iterator_update mode)\n     }\n   else\n     {\n-      head = ggc_alloc_tree_statement_list_node ();\n+      head = ggc_alloc<tree_statement_list_node> ();\n       head->prev = NULL;\n       head->next = NULL;\n       head->stmt = t;"}, {"sha": "44758556f9bd1ebd083b758d689848ef663b1152", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -332,7 +332,7 @@ new_scev_info_str (basic_block instantiated_below, tree var)\n {\n   struct scev_info_str *res;\n \n-  res = ggc_alloc_scev_info_str ();\n+  res = ggc_alloc<scev_info_str> ();\n   res->name_version = SSA_NAME_VERSION (var);\n   res->chrec = chrec_not_analyzed_yet;\n   res->instantiated_below = instantiated_below->index;"}, {"sha": "73376bc8e75b33ff515edc6b17efb9563ddf784a", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -2674,7 +2674,7 @@ record_estimate (struct loop *loop, tree bound, const widest_int &i_bound,\n \t  || loop->nb_iterations == NULL_TREE\n \t  || TREE_CODE (loop->nb_iterations) != INTEGER_CST))\n     {\n-      struct nb_iter_bound *elt = ggc_alloc_nb_iter_bound ();\n+      struct nb_iter_bound *elt = ggc_alloc<nb_iter_bound> ();\n \n       elt->bound = i_bound;\n       elt->stmt = at_stmt;"}, {"sha": "492eee76835d6a85695a6fd614cb641abe12c61b", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -276,8 +276,8 @@ ssa_operand_alloc (struct function *fn, unsigned size)\n \t}\n \n \n-      ptr = ggc_alloc_ssa_operand_memory_d (sizeof (void *)\n-                        + gimple_ssa_operands (fn)->ssa_operand_mem_size);\n+      ptr = (ssa_operand_memory_d *) ggc_internal_alloc\n+\t(sizeof (void *) + gimple_ssa_operands (fn)->ssa_operand_mem_size);\n \n       ptr->next = gimple_ssa_operands (fn)->operand_memory;\n       gimple_ssa_operands (fn)->operand_memory = ptr;"}, {"sha": "42fe5a721e542be0a1092a044c888a3774d7175f", "filename": "gcc/tree-ssa-operands.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Ftree-ssa-operands.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Ftree-ssa-operands.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.h?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -45,7 +45,7 @@ typedef struct use_optype_d *use_optype_p;\n    operand memory manager.  Operands are suballocated out of this block.  The\n    MEM array varies in size.  */\n \n-struct GTY((chain_next(\"%h.next\"), variable_size)) ssa_operand_memory_d {\n+struct GTY((chain_next(\"%h.next\"))) ssa_operand_memory_d {\n   struct ssa_operand_memory_d *next;\n   char mem[1];\n };"}, {"sha": "f6f1effcf9cece0c0b5917d94ebd6a6527a20f78", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -1120,7 +1120,7 @@ uid_ssaname_map_hash (const void *item)\n void\n init_tree_ssa (struct function *fn)\n {\n-  fn->gimple_df = ggc_alloc_cleared_gimple_df ();\n+  fn->gimple_df = ggc_cleared_alloc<gimple_df> ();\n   fn->gimple_df->default_defs = htab_create_ggc (20, uid_ssaname_map_hash,\n \t\t\t\t                 uid_ssaname_map_eq, NULL);\n   pt_solution_reset (&fn->gimple_df->escaped);"}, {"sha": "7f6a6af9ca5937fbe71e35b6a060230049083961", "filename": "gcc/tree-ssanames.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Ftree-ssanames.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Ftree-ssanames.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssanames.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -199,7 +199,7 @@ set_range_info (tree name, enum value_range_type range_type,\n     {\n       size_t size = (sizeof (range_info_def)\n \t\t     + trailing_wide_ints <3>::extra_size (precision));\n-      ri = ggc_alloc_range_info_def (size);\n+      ri = static_cast<range_info_def *> (ggc_internal_alloc (size));\n       ri->ints.set_precision (precision);\n       SSA_NAME_RANGE_INFO (name) = ri;\n       ri->set_nonzero_bits (wi::shwi (-1, precision));\n@@ -428,7 +428,7 @@ get_ptr_info (tree t)\n   pi = SSA_NAME_PTR_INFO (t);\n   if (pi == NULL)\n     {\n-      pi = ggc_alloc_cleared_ptr_info_def ();\n+      pi = ggc_cleared_alloc<ptr_info_def> ();\n       pt_solution_reset (&pi->pt);\n       mark_ptr_info_alignment_unknown (pi);\n       SSA_NAME_PTR_INFO (t) = pi;\n@@ -472,7 +472,7 @@ duplicate_ssa_name_ptr_info (tree name, struct ptr_info_def *ptr_info)\n   if (!ptr_info)\n     return;\n \n-  new_ptr_info = ggc_alloc_ptr_info_def ();\n+  new_ptr_info = ggc_alloc<ptr_info_def> ();\n   *new_ptr_info = *ptr_info;\n \n   SSA_NAME_PTR_INFO (name) = new_ptr_info;\n@@ -496,7 +496,7 @@ duplicate_ssa_name_range_info (tree name, enum value_range_type range_type,\n   unsigned int precision = TYPE_PRECISION (TREE_TYPE (name));\n   size_t size = (sizeof (range_info_def)\n \t\t + trailing_wide_ints <3>::extra_size (precision));\n-  new_range_info = ggc_alloc_range_info_def (size);\n+  new_range_info = static_cast<range_info_def *> (ggc_internal_alloc (size));\n   memcpy (new_range_info, range_info, size);\n \n   gcc_assert (range_type == VR_RANGE || range_type == VR_ANTI_RANGE);"}, {"sha": "bead1198018dc198b52994845985fdf5e3bb08e4", "filename": "gcc/tree-streamer-in.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Ftree-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Ftree-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-in.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -177,7 +177,7 @@ unpack_ts_real_cst_value_fields (struct bitpack_d *bp, tree expr)\n   for (i = 0; i < SIGSZ; i++)\n     r.sig[i] = (unsigned long) bp_unpack_value (bp, HOST_BITS_PER_LONG);\n \n-  rp = ggc_alloc_real_value ();\n+  rp = ggc_alloc<real_value> ();\n   memcpy (rp, &r, sizeof (REAL_VALUE_TYPE));\n   TREE_REAL_CST_PTR (expr) = rp;\n }\n@@ -189,7 +189,7 @@ unpack_ts_real_cst_value_fields (struct bitpack_d *bp, tree expr)\n static void\n unpack_ts_fixed_cst_value_fields (struct bitpack_d *bp, tree expr)\n {\n-  FIXED_VALUE_TYPE *fp = ggc_alloc_fixed_value ();\n+  FIXED_VALUE_TYPE *fp = ggc_alloc<fixed_value> ();\n   fp->mode = bp_unpack_enum (bp, machine_mode, MAX_MACHINE_MODE);\n   fp->data.low = bp_unpack_var_len_int (bp);\n   fp->data.high = bp_unpack_var_len_int (bp);"}, {"sha": "4dd8e73c6cfaeda2bf90bce0f609668a6b85a7d8", "filename": "gcc/tree.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -1670,7 +1670,7 @@ build_fixed (tree type, FIXED_VALUE_TYPE f)\n   FIXED_VALUE_TYPE *fp;\n \n   v = make_node (FIXED_CST);\n-  fp = ggc_alloc_fixed_value ();\n+  fp = ggc_alloc<fixed_value> ();\n   memcpy (fp, &f, sizeof (FIXED_VALUE_TYPE));\n \n   TREE_TYPE (v) = type;\n@@ -1691,7 +1691,7 @@ build_real (tree type, REAL_VALUE_TYPE d)\n      Consider doing it via real_convert now.  */\n \n   v = make_node (REAL_CST);\n-  dp = ggc_alloc_real_value ();\n+  dp = ggc_alloc<real_value> ();\n   memcpy (dp, &d, sizeof (REAL_VALUE_TYPE));\n \n   TREE_TYPE (v) = type;\n@@ -1748,7 +1748,7 @@ build_string (int len, const char *str)\n \n   record_node_allocation_statistics (STRING_CST, length);\n \n-  s = ggc_alloc_tree_node (length);\n+  s = (tree) ggc_internal_alloc (length);\n \n   memset (s, 0, sizeof (struct tree_typed));\n   TREE_SET_CODE (s, STRING_CST);\n@@ -6407,7 +6407,7 @@ decl_priority_info (tree decl)\n   h = (struct tree_priority_map *) *loc;\n   if (!h)\n     {\n-      h = ggc_alloc_cleared_tree_priority_map ();\n+      h = ggc_cleared_alloc<tree_priority_map> ();\n       *loc = h;\n       h->base.from = decl;\n       h->init = DEFAULT_INIT_PRIORITY;\n@@ -6490,7 +6490,7 @@ decl_debug_expr_insert (tree from, tree to)\n   struct tree_decl_map *h;\n   void **loc;\n \n-  h = ggc_alloc_tree_decl_map ();\n+  h = ggc_alloc<tree_decl_map> ();\n   h->base.from = from;\n   h->to = to;\n   loc = htab_find_slot_with_hash (debug_expr_for_decl, h, DECL_UID (from),\n@@ -6521,7 +6521,7 @@ decl_value_expr_insert (tree from, tree to)\n   struct tree_decl_map *h;\n   void **loc;\n \n-  h = ggc_alloc_tree_decl_map ();\n+  h = ggc_alloc<tree_decl_map> ();\n   h->base.from = from;\n   h->to = to;\n   loc = htab_find_slot_with_hash (value_expr_for_decl, h, DECL_UID (from),\n@@ -6562,7 +6562,7 @@ decl_debug_args_insert (tree from)\n   if (debug_args_for_decl == NULL)\n     debug_args_for_decl = htab_create_ggc (64, tree_vec_map_hash,\n \t\t\t\t\t   tree_vec_map_eq, 0);\n-  h = ggc_alloc_tree_vec_map ();\n+  h = ggc_alloc<tree_vec_map> ();\n   h->base.from = from;\n   h->to = NULL;\n   loc = htab_find_slot_with_hash (debug_args_for_decl, h, DECL_UID (from),\n@@ -6747,7 +6747,7 @@ type_hash_add (hashval_t hashcode, tree type)\n   struct type_hash *h;\n   void **loc;\n \n-  h = ggc_alloc_type_hash ();\n+  h = ggc_alloc<type_hash> ();\n   h->hash = hashcode;\n   h->type = type;\n   loc = htab_find_slot_with_hash (type_hash_table, h, hashcode, INSERT);\n@@ -10314,7 +10314,7 @@ build_omp_clause (location_t loc, enum omp_clause_code code)\n \n   record_node_allocation_statistics (OMP_CLAUSE, size);\n \n-  t = ggc_alloc_tree_node (size);\n+  t = (tree) ggc_internal_alloc (size);\n   memset (t, 0, size);\n   TREE_SET_CODE (t, OMP_CLAUSE);\n   OMP_CLAUSE_SET_CODE (t, code);"}, {"sha": "11461d00abd314efd5c927f1ccf917e89deeb8c0", "filename": "gcc/ubsan.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fubsan.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -99,7 +99,7 @@ decl_for_type_insert (tree type, tree decl)\n   struct tree_type_map *h;\n   void **slot;\n \n-  h = ggc_alloc_tree_type_map ();\n+  h = ggc_alloc<tree_type_map> ();\n   h->type.from = type;\n   h->decl = decl;\n   slot = htab_find_slot_with_hash (decl_tree_for_type, h, TYPE_UID (type),"}, {"sha": "988665260cc4f40f94fa04ce8e32b5e8f7e38fd2", "filename": "gcc/varasm.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -242,7 +242,7 @@ get_unnamed_section (unsigned int flags, void (*callback) (const void *),\n {\n   section *sect;\n \n-  sect = ggc_alloc_section ();\n+  sect = ggc_alloc<section> ();\n   sect->unnamed.common.flags = flags | SECTION_UNNAMED;\n   sect->unnamed.callback = callback;\n   sect->unnamed.data = data;\n@@ -259,7 +259,7 @@ get_noswitch_section (unsigned int flags, noswitch_section_callback callback)\n {\n   section *sect;\n \n-  sect = ggc_alloc_section ();\n+  sect = ggc_alloc<section> ();\n   sect->noswitch.common.flags = flags | SECTION_NOSWITCH;\n   sect->noswitch.callback = callback;\n \n@@ -280,7 +280,7 @@ get_section (const char *name, unsigned int flags, tree decl)\n   flags |= SECTION_NAMED;\n   if (*slot == NULL)\n     {\n-      sect = ggc_alloc_section ();\n+      sect = ggc_alloc<section> ();\n       sect->named.common.flags = flags;\n       sect->named.name = ggc_strdup (name);\n       sect->named.decl = decl;\n@@ -361,7 +361,7 @@ get_block_for_section (section *sect)\n   block = (struct object_block *) *slot;\n   if (block == NULL)\n     {\n-      block = ggc_alloc_cleared_object_block ();\n+      block = ggc_cleared_alloc<object_block> ();\n       block->sect = sect;\n       *slot = block;\n     }\n@@ -381,7 +381,7 @@ create_block_symbol (const char *label, struct object_block *block,\n \n   /* Create the extended SYMBOL_REF.  */\n   size = RTX_HDR_SIZE + sizeof (struct block_symbol);\n-  symbol = ggc_alloc_rtx_def (size);\n+  symbol = (rtx) ggc_internal_alloc (size);\n \n   /* Initialize the normal SYMBOL_REF fields.  */\n   memset (symbol, 0, size);\n@@ -3203,7 +3203,7 @@ build_constant_desc (tree exp)\n   int labelno;\n   tree decl;\n \n-  desc = ggc_alloc_constant_descriptor_tree ();\n+  desc = ggc_alloc<constant_descriptor_tree> ();\n   desc->value = copy_constant (exp);\n \n   /* Create a string containing the label name, in LABEL.  */\n@@ -3616,7 +3616,7 @@ create_constant_pool (void)\n {\n   struct rtx_constant_pool *pool;\n \n-  pool = ggc_alloc_rtx_constant_pool ();\n+  pool = ggc_alloc<rtx_constant_pool> ();\n   pool->const_rtx_htab = htab_create_ggc (31, const_desc_rtx_hash,\n \t\t\t\t\t  const_desc_rtx_eq, NULL);\n   pool->first = NULL;\n@@ -3682,7 +3682,7 @@ force_const_mem (enum machine_mode mode, rtx x)\n     return copy_rtx (desc->mem);\n \n   /* Otherwise, create a new descriptor.  */\n-  desc = ggc_alloc_constant_descriptor_rtx ();\n+  desc = ggc_alloc<constant_descriptor_rtx> ();\n   *slot = desc;\n \n   /* Align the location counter as required by EXP's data type.  */\n@@ -5712,7 +5712,7 @@ record_tm_clone_pair (tree o, tree n)\n   if (tm_clone_hash == NULL)\n     tm_clone_hash = htab_create_ggc (32, tree_map_hash, tree_map_eq, 0);\n \n-  h = ggc_alloc_tree_map ();\n+  h = ggc_alloc<tree_map> ();\n   h->hash = htab_hash_pointer (o);\n   h->base.from = o;\n   h->to = n;"}, {"sha": "4525579f6916cf382002b9ac42df5ec96eee6257", "filename": "gcc/varpool.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fvarpool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/766090c20f5b5507e78a02ce6e981046d26ded35/gcc%2Fvarpool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarpool.c?ref=766090c20f5b5507e78a02ce6e981046d26ded35", "patch": "@@ -135,7 +135,7 @@ varpool_call_variable_insertion_hooks (varpool_node *node)\n varpool_node *\n varpool_create_empty_node (void)\n {   \n-  varpool_node *node = ggc_alloc_cleared_varpool_node ();\n+  varpool_node *node = ggc_cleared_alloc<varpool_node> ();\n   node->type = SYMTAB_VARIABLE;\n   return node;\n }   "}]}