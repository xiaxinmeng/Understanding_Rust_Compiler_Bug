{"sha": "59fd17e3a69e7b826e4926e44476e7ba08962aa9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTlmZDE3ZTNhNjllN2I4MjZlNDkyNmU0NDQ3NmU3YmEwODk2MmFhOQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-01-03T15:57:15Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-01-03T15:57:15Z"}, "message": "revert: [multiple changes]\n\n2013-01-03  Richard Biener  <rguenther@suse.de>\n\n        Revert\n        2013-01-03  Richard Biener  <rguenther@suse.de>\n\n        PR tree-optimization/55857\n        * tree-vect-stmts.c (vectorizable_load): Do not setup\n        re-alignment for invariant loads.\n\n        2013-01-02  Richard Biener  <rguenther@suse.de>\n\n        * tree-vect-stmts.c (vectorizable_load): When vectorizing an\n        invariant load do not generate a vector load from the scalar\n        location.\n\nFrom-SVN: r194856", "tree": {"sha": "d49135cc8623932dc4a295fc416566797efa83be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d49135cc8623932dc4a295fc416566797efa83be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59fd17e3a69e7b826e4926e44476e7ba08962aa9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59fd17e3a69e7b826e4926e44476e7ba08962aa9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59fd17e3a69e7b826e4926e44476e7ba08962aa9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59fd17e3a69e7b826e4926e44476e7ba08962aa9/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fc883b8407b8d9bf989e13f463a0a0be86507be0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc883b8407b8d9bf989e13f463a0a0be86507be0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc883b8407b8d9bf989e13f463a0a0be86507be0"}], "stats": {"total": 42, "additions": 27, "deletions": 15}, "files": [{"sha": "5e5885ee7c4a7f590a9edb54f252c4abe5edea87", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59fd17e3a69e7b826e4926e44476e7ba08962aa9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59fd17e3a69e7b826e4926e44476e7ba08962aa9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=59fd17e3a69e7b826e4926e44476e7ba08962aa9", "patch": "@@ -1,3 +1,18 @@\n+2013-01-03  Richard Biener  <rguenther@suse.de>\n+\n+\tRevert\n+\t2013-01-03  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/55857\n+\t* tree-vect-stmts.c (vectorizable_load): Do not setup\n+\tre-alignment for invariant loads.\n+\n+\t2013-01-02  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-stmts.c (vectorizable_load): When vectorizing an\n+\tinvariant load do not generate a vector load from the scalar\n+\tlocation.\n+\n 2013-01-03  Richard Biener  <rguenther@suse.de>\n \n \t* tree-vect-loop.c (vect_analyze_loop_form): Clarify reason"}, {"sha": "1e8d7ee44017a4b068be7674e3dc608e39b334cc", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59fd17e3a69e7b826e4926e44476e7ba08962aa9/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59fd17e3a69e7b826e4926e44476e7ba08962aa9/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=59fd17e3a69e7b826e4926e44476e7ba08962aa9", "patch": "@@ -4927,8 +4927,7 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \n   if ((alignment_support_scheme == dr_explicit_realign_optimized\n        || alignment_support_scheme == dr_explicit_realign)\n-      && !compute_in_loop\n-      && !integer_zerop (DR_STEP (dr)))\n+      && !compute_in_loop)\n     {\n       msq = vect_setup_realignment (first_stmt, gsi, &realignment_token,\n \t\t\t\t    alignment_support_scheme, NULL_TREE,\n@@ -4989,19 +4988,6 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \t  /* Record the mapping between SSA_NAMEs and statements.  */\n \t  vect_record_grouped_load_vectors (stmt, dr_chain);\n \t}\n-      /* Handle invariant-load.  */\n-      else if (inv_p && !bb_vinfo)\n-\t{\n-\t  gimple_stmt_iterator gsi2 = *gsi;\n-\t  gcc_assert (!grouped_load && !slp_perm);\n-\t  gsi_next (&gsi2);\n-\t  new_temp = vect_init_vector (stmt, scalar_dest,\n-\t\t\t\t       vectype, &gsi2);\n-\t  new_stmt = SSA_NAME_DEF_STMT (new_temp);\n-\t  /* Store vector loads in the corresponding SLP_NODE.  */\n-\t  if (slp)\n-\t    SLP_TREE_VEC_STMTS (slp_node).quick_push (new_stmt);\n-\t}\n       else\n \t{\n \t  for (i = 0; i < vec_num; i++)\n@@ -5149,6 +5135,17 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \t\t    }\n \t\t}\n \n+\t      /* 4. Handle invariant-load.  */\n+\t      if (inv_p && !bb_vinfo)\n+\t\t{\n+\t\t  gimple_stmt_iterator gsi2 = *gsi;\n+\t\t  gcc_assert (!grouped_load);\n+\t\t  gsi_next (&gsi2);\n+\t\t  new_temp = vect_init_vector (stmt, scalar_dest,\n+\t\t\t\t\t       vectype, &gsi2);\n+\t\t  new_stmt = SSA_NAME_DEF_STMT (new_temp);\n+\t\t}\n+\n \t      if (negative)\n \t\t{\n \t\t  tree perm_mask = perm_mask_for_reverse (vectype);"}]}