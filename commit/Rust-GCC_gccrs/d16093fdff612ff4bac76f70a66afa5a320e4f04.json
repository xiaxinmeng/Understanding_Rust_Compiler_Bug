{"sha": "d16093fdff612ff4bac76f70a66afa5a320e4f04", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDE2MDkzZmRmZjYxMmZmNGJhYzc2ZjcwYTY2YWZhNWEzMjBlNGYwNA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@kss-loka.si", "date": "2005-08-31T17:27:53Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-08-31T17:27:53Z"}, "message": "re PR target/23570 (internal compiler error: in merge_assigned_reloads, at reload1.c:6091)\n\n        PR target/23570\n        * config/i386/sse.md (*sse_concatv2sf): Change operand 2 constraint\n        to \"reg_or_0_operand\".\n        (sse2_loadld): Change operand 1 constraint to \"reg_or_0_operand\".\n\nFrom-SVN: r103690", "tree": {"sha": "90e5f5c77c06d69f7fd72de4193ff163bde2458c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90e5f5c77c06d69f7fd72de4193ff163bde2458c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d16093fdff612ff4bac76f70a66afa5a320e4f04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d16093fdff612ff4bac76f70a66afa5a320e4f04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d16093fdff612ff4bac76f70a66afa5a320e4f04", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d16093fdff612ff4bac76f70a66afa5a320e4f04/comments", "author": null, "committer": null, "parents": [{"sha": "c9eb80971df6cbbca67c1cb561b0ccbc8bb5f722", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9eb80971df6cbbca67c1cb561b0ccbc8bb5f722", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9eb80971df6cbbca67c1cb561b0ccbc8bb5f722"}], "stats": {"total": 103, "additions": 101, "deletions": 2}, "files": [{"sha": "481e4f70e295eb0a8bf2f10b1de41ecfe9bc03b7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d16093fdff612ff4bac76f70a66afa5a320e4f04/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d16093fdff612ff4bac76f70a66afa5a320e4f04/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d16093fdff612ff4bac76f70a66afa5a320e4f04", "patch": "@@ -1,3 +1,10 @@\n+2005-08-31 Uros Bizjak <uros@kss-loka.si>\n+\n+\tPR target/23570\n+\t* config/i386/sse.md (*sse_concatv2sf): Change operand 2 constraint\n+\tto \"reg_or_0_operand\".\n+\t(sse2_loadld): Change operand 1 constraint to \"reg_or_0_operand\".\n+\n 2005-08-31  Dale Johannesen  <dalej@apple.com>\n \n \t* loop-iv.c (iv_number_of_iterations):  Fix overflow check for"}, {"sha": "95cb79757e8e7821cb97391209debf8f994db368", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d16093fdff612ff4bac76f70a66afa5a320e4f04/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d16093fdff612ff4bac76f70a66afa5a320e4f04/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=d16093fdff612ff4bac76f70a66afa5a320e4f04", "patch": "@@ -1230,7 +1230,7 @@\n   [(set (match_operand:V2SF 0 \"register_operand\"     \"=x,x,*y,*y\")\n \t(vec_concat:V2SF\n \t  (match_operand:SF 1 \"nonimmediate_operand\" \" 0,m, 0, m\")\n-\t  (match_operand:SF 2 \"vector_move_operand\"  \" x,C,*y, C\")))]\n+\t  (match_operand:SF 2 \"reg_or_0_operand\"     \" x,C,*y, C\")))]\n   \"TARGET_SSE\"\n   \"@\n    unpcklps\\t{%2, %0|%0, %2}\n@@ -3374,7 +3374,7 @@\n \t(vec_merge:V4SI\n \t  (vec_duplicate:V4SI\n \t    (match_operand:SI 2 \"nonimmediate_operand\" \"mr,m,x\"))\n-\t  (match_operand:V4SI 1 \"vector_move_operand\"  \" C,C,0\")\n+\t  (match_operand:V4SI 1 \"reg_or_0_operand\"     \" C,C,0\")\n \t  (const_int 1)))]\n   \"TARGET_SSE\"\n   \"@"}, {"sha": "1542663fa22cd74ec3499b4fd332e2424c7c2892", "filename": "gcc/testsuite/gcc.target/i386/pr23570.c", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d16093fdff612ff4bac76f70a66afa5a320e4f04/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr23570.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d16093fdff612ff4bac76f70a66afa5a320e4f04/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr23570.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr23570.c?ref=d16093fdff612ff4bac76f70a66afa5a320e4f04", "patch": "@@ -0,0 +1,92 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+typedef float __v4sf __attribute__ ((__vector_size__ (16)));\n+typedef float __m128 __attribute__ ((__vector_size__ (16)));\n+typedef long long __v2di __attribute__ ((__vector_size__ (16)));\n+\n+static __inline __m128\n+_mm_cmpeq_ps (__m128 __A, __m128 __B)\n+{\n+  return (__m128) __builtin_ia32_cmpeqps ((__v4sf)__A, (__v4sf)__B);\n+}\n+\n+static __inline __m128\n+_mm_setr_ps (float __Z, float __Y, float __X, float __W)\n+{\n+  return __extension__ (__m128)(__v4sf){__Z, __Y, __X, __W };\n+}\n+\n+static __inline __m128\n+_mm_and_si128 (__m128 __A, __m128 __B)\n+{\n+  return (__m128)__builtin_ia32_pand128 ((__v2di)__A, (__v2di)__B);\n+}\n+\n+static __inline __m128\n+_mm_or_si128 (__m128 __A, __m128 __B)\n+{\n+  return (__m128)__builtin_ia32_por128 ((__v2di)__A, (__v2di)__B);\n+}\n+\n+typedef union\n+{\n+  __m128 xmmi;\n+  int si[4];\n+}\n+__attribute__ ((aligned (16))) um128;\n+\n+um128 u;\n+\n+static inline int\n+sse_max_abs_indexf (float *v, int step, int n)\n+{\n+  __m128 m1, mm;\n+  __m128 mim, mi, msk;\n+  um128 u, ui;\n+  int n4, step2, step3;\n+  mm = __builtin_ia32_andps ((__m128) (__v4sf)\n+\t\t\t     { 0.0, v[step], v[step2], v[step3] }\n+\t\t\t     , u.xmmi);\n+  if (n4)\n+    {\n+      int i;\n+      for (i = 0; i < n4; ++i);\n+      msk = (__m128) _mm_cmpeq_ps (m1, mm);\n+      mim = _mm_or_si128 (_mm_and_si128 (msk, mi), mim);\n+    }\n+  ui.xmmi = (__m128) mim;\n+  return ui.si[n];\n+}\n+\n+static void\n+sse_swap_rowf (float *r1, float *r2, int n)\n+{\n+  int n4 = (n / 4) * 4;\n+  float *r14end = r1 + n4;\n+  while (r1 < r14end)\n+    {\n+      *r1 = *r2;\n+      r1++;\n+    }\n+}\n+\n+void\n+ludcompf (float *m, int nw, int *prow, int n)\n+{\n+  int i, s = 0;\n+  float *pm;\n+  for (i = 0, pm = m; i < n - 1; ++i, pm += nw)\n+    {\n+      int vi = sse_max_abs_indexf (pm + i, nw, n - i);\n+      float *pt;\n+      int j;\n+      if (vi != 0)\n+\t{\n+\t  sse_swap_rowf (pm, pm + vi * nw, nw);\n+\t  swap_index (prow, i, i + vi);\n+\t}\n+      for (j = i + 1, pt = pm + nw; j < n; ++j, pt += nw)\n+\tsse_add_rowf (pt + i + 1, pm + i + 1, -1.0, n - i - 1);\n+    }\n+}"}]}