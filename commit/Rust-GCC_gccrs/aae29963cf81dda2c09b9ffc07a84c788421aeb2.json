{"sha": "aae29963cf81dda2c09b9ffc07a84c788421aeb2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWFlMjk5NjNjZjgxZGRhMmMwOWI5ZmZjMDdhODRjNzg4NDIxYWViMg==", "commit": {"author": {"name": "Joern Rennecke", "email": "amylaar@spamcop.net", "date": "2010-01-22T13:35:38Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2010-01-22T13:35:38Z"}, "message": "PR libstdc++/36101, PR libstdc++/42813\n\n\tPR libstdc++/36101, PR libstdc++/42813\n[toplevel]:\n\t* configure.ac (target_configdirs): Substitute.\n\t* Makefile.def: Bootstrap target module libgomp.\n\tAdd dependency of all-target-libstdc++-v3 on configure-target-libgomp.\n\t* Makefile.tpl (TARGET_CONFIGDIRS): New makefile variable.\n\t(BASE_TARGET_EXPORTS): Export TARGET_CONFIGDIRS.\n\t* configure, Makefile.in: Regenerate.\nlibstdc++-v3:\n\t* acinclude.m4: (enable_parallel): Test ${TARGET_CONFIGDIRS} instead of\n\tloking for omp.h .\n\t* configure: Regenerate.\n\nFrom-SVN: r156172", "tree": {"sha": "e8e77688f0a4c0c209ef99bb741123696ae9b58a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8e77688f0a4c0c209ef99bb741123696ae9b58a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aae29963cf81dda2c09b9ffc07a84c788421aeb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aae29963cf81dda2c09b9ffc07a84c788421aeb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aae29963cf81dda2c09b9ffc07a84c788421aeb2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aae29963cf81dda2c09b9ffc07a84c788421aeb2/comments", "author": null, "committer": null, "parents": [{"sha": "addb239cd3d7a2fa96764250dbba7fc0d27dcd6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/addb239cd3d7a2fa96764250dbba7fc0d27dcd6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/addb239cd3d7a2fa96764250dbba7fc0d27dcd6b"}], "stats": {"total": 604, "additions": 593, "deletions": 11}, "files": [{"sha": "c72501b8ae52225de82431c4b50511f7dbbb66ad", "filename": "ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aae29963cf81dda2c09b9ffc07a84c788421aeb2/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aae29963cf81dda2c09b9ffc07a84c788421aeb2/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=aae29963cf81dda2c09b9ffc07a84c788421aeb2", "patch": "@@ -1,3 +1,13 @@\n+2010-01-22  Joern Rennecke  <amylaar@spamcop.net>\n+\n+\tPR libstdc++/36101, PR libstdc++/42813\n+\t* configure.ac (target_configdirs): Substitute.\n+\t* Makefile.def: Bootstrap target module libgomp.\n+\tAdd dependency of all-target-libstdc++-v3 on configure-target-libgomp.\n+\t* Makefile.tpl (TARGET_CONFIGDIRS): New makefile variable.\n+\t(BASE_TARGET_EXPORTS): Export TARGET_CONFIGDIRS.\n+\t* configure, Makefile.in: Regenerate.\n+\n 2010-01-21  Dave Korn  <dave.korn.cygwin@gmail.com>\n \n \t* MAINTAINERS: Adjust my details."}, {"sha": "7dce69994cf260ff8fcc3571a14cde456aaa0e8d", "filename": "Makefile.def", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aae29963cf81dda2c09b9ffc07a84c788421aeb2/Makefile.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aae29963cf81dda2c09b9ffc07a84c788421aeb2/Makefile.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.def?ref=aae29963cf81dda2c09b9ffc07a84c788421aeb2", "patch": "@@ -174,7 +174,7 @@ target_modules = { module= boehm-gc; };\n target_modules = { module= qthreads; };\n target_modules = { module= rda; };\n target_modules = { module= libada; };\n-target_modules = { module= libgomp; lib_path=.libs; };\n+target_modules = { module= libgomp; bootstrap= true; lib_path=.libs; };\n \n // These are (some of) the make targets to be done in each subdirectory.\n // Not all; these are the ones which don't have special options.\n@@ -547,6 +547,10 @@ dependencies = { module=all-target-libobjc; on=all-target-libiberty; };\n dependencies = { module=all-target-libobjc; on=all-target-boehm-gc; };\n dependencies = { module=all-target-libstdc++-v3; on=all-target-libiberty; };\n dependencies = { module=configure-target-libstdc++-v3; on=configure-target-libgomp; };\n+// parallel_list.o and parallel_settings.o depend on omp.h, which is\n+// generated by the libgomp configure.  Unfortunately, due to the use of\n+//  recursive make, we can't be that specific.\n+dependencies = { module=all-target-libstdc++-v3; on=configure-target-libgomp; };\n \n // Target modules in the 'src' repository.\n lang_env_dependencies = { module=examples; };"}, {"sha": "e34d71bfa584d3c9dd125ae56ff1d4d498e6f275", "filename": "Makefile.in", "status": "modified", "additions": 560, "deletions": 4, "changes": 564, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aae29963cf81dda2c09b9ffc07a84c788421aeb2/Makefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aae29963cf81dda2c09b9ffc07a84c788421aeb2/Makefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.in?ref=aae29963cf81dda2c09b9ffc07a84c788421aeb2", "patch": "@@ -173,6 +173,7 @@ EXTRA_BUILD_FLAGS = \\\n \n # This is the list of directories to built for the host system.\n SUBDIRS = @configdirs@\n+TARGET_CONFIGDIRS = @target_configdirs@\n # This is set by the configure script to the arguments to use when configuring\n # directories built for the host system.\n HOST_CONFIGARGS = @host_configargs@\n@@ -284,7 +285,8 @@ BASE_TARGET_EXPORTS = \\\n @if gcc-bootstrap\n \t$(RPATH_ENVVAR)=`echo \"$(TARGET_LIB_PATH)$$$(RPATH_ENVVAR)\" | sed 's,::*,:,g;s,^:*,,;s,:*$$,,'`; export $(RPATH_ENVVAR); \\\n @endif gcc-bootstrap\n-\t$(RPATH_ENVVAR)=`echo \"$(HOST_LIB_PATH)$$$(RPATH_ENVVAR)\" | sed 's,::*,:,g;s,^:*,,;s,:*$$,,'`; export $(RPATH_ENVVAR);\n+\t$(RPATH_ENVVAR)=`echo \"$(HOST_LIB_PATH)$$$(RPATH_ENVVAR)\" | sed 's,::*,:,g;s,^:*,,;s,:*$$,,'`; export $(RPATH_ENVVAR); \\\n+\tTARGET_CONFIGDIRS=\"$(TARGET_CONFIGDIRS)\"; export TARGET_CONFIGDIRS;\n \n RAW_CXX_TARGET_EXPORTS = \\\n \t$(BASE_TARGET_EXPORTS) \\\n@@ -1120,7 +1122,9 @@ all-target: maybe-all-target-boehm-gc\n all-target: maybe-all-target-qthreads\n all-target: maybe-all-target-rda\n all-target: maybe-all-target-libada\n+@if target-libgomp-no-bootstrap\n all-target: maybe-all-target-libgomp\n+@endif target-libgomp-no-bootstrap\n \n # Do a target for all the subdirectories.  A ``make do-X'' will do a\n # ``make X'' in all subdirectories (because, in general, there is a\n@@ -54629,7 +54633,6 @@ configure-target-libgomp: stage_current\n @if target-libgomp\n maybe-configure-target-libgomp: configure-target-libgomp\n configure-target-libgomp: \n-\t@: $(MAKE); $(unstage)\n \t@r=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n \techo \"Checking multilib configuration for libgomp...\"; \\\n@@ -54666,6 +54669,276 @@ configure-target-libgomp:\n \n \n \n+.PHONY: configure-stage1-target-libgomp maybe-configure-stage1-target-libgomp\n+maybe-configure-stage1-target-libgomp:\n+@if target-libgomp-bootstrap\n+maybe-configure-stage1-target-libgomp: configure-stage1-target-libgomp\n+configure-stage1-target-libgomp:\n+\t@[ $(current_stage) = stage1 ] || $(MAKE) stage1-start\n+\t@$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/libgomp\n+\t@r=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\tTFLAGS=\"$(STAGE1_TFLAGS)\"; \\\n+\techo \"Checking multilib configuration for libgomp...\"; \\\n+\t$(CC_FOR_TARGET) --print-multi-lib > $(TARGET_SUBDIR)/libgomp/multilib.tmp 2> /dev/null ; \\\n+\tif test -r $(TARGET_SUBDIR)/libgomp/multilib.out; then \\\n+\t  if cmp -s $(TARGET_SUBDIR)/libgomp/multilib.tmp $(TARGET_SUBDIR)/libgomp/multilib.out; then \\\n+\t    rm -f $(TARGET_SUBDIR)/libgomp/multilib.tmp; \\\n+\t  else \\\n+\t    rm -f $(TARGET_SUBDIR)/libgomp/Makefile; \\\n+\t    mv $(TARGET_SUBDIR)/libgomp/multilib.tmp $(TARGET_SUBDIR)/libgomp/multilib.out; \\\n+\t  fi; \\\n+\telse \\\n+\t  mv $(TARGET_SUBDIR)/libgomp/multilib.tmp $(TARGET_SUBDIR)/libgomp/multilib.out; \\\n+\tfi; \\\n+\ttest ! -f $(TARGET_SUBDIR)/libgomp/Makefile || exit 0; \\\n+\t$(NORMAL_TARGET_EXPORTS) \\\n+\tCFLAGS=\"$(CFLAGS_FOR_TARGET)\"; export CFLAGS; \\\n+\tCXXFLAGS=\"$(CXXFLAGS_FOR_TARGET)\"; export CXXFLAGS; \\\n+\tLIBCFLAGS=\"$(LIBCFLAGS_FOR_TARGET)\"; export LIBCFLAGS;  \\\n+\techo Configuring stage 1 in $(TARGET_SUBDIR)/libgomp ; \\\n+\t$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/libgomp ; \\\n+\tcd $(TARGET_SUBDIR)/libgomp || exit 1; \\\n+\tcase $(srcdir) in \\\n+\t  /* | [A-Za-z]:[\\\\/]*) topdir=$(srcdir) ;; \\\n+\t  *) topdir=`echo $(TARGET_SUBDIR)/libgomp/ | \\\n+\t\tsed -e 's,\\./,,g' -e 's,[^/]*/,../,g' `$(srcdir) ;; \\\n+\tesac; \\\n+\tsrcdiroption=\"--srcdir=$${topdir}/libgomp\"; \\\n+\tlibsrcdir=\"$$s/libgomp\"; \\\n+\t$(SHELL) $${libsrcdir}/configure \\\n+\t  $(TARGET_CONFIGARGS) --build=${build_alias} --host=${target_alias} \\\n+\t  --target=${target_alias} $${srcdiroption} \\\n+\t  $(STAGE1_CONFIGURE_FLAGS)\n+@endif target-libgomp-bootstrap\n+\n+.PHONY: configure-stage2-target-libgomp maybe-configure-stage2-target-libgomp\n+maybe-configure-stage2-target-libgomp:\n+@if target-libgomp-bootstrap\n+maybe-configure-stage2-target-libgomp: configure-stage2-target-libgomp\n+configure-stage2-target-libgomp:\n+\t@[ $(current_stage) = stage2 ] || $(MAKE) stage2-start\n+\t@$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/libgomp\n+\t@r=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\tTFLAGS=\"$(STAGE2_TFLAGS)\"; \\\n+\techo \"Checking multilib configuration for libgomp...\"; \\\n+\t$(CC_FOR_TARGET) --print-multi-lib > $(TARGET_SUBDIR)/libgomp/multilib.tmp 2> /dev/null ; \\\n+\tif test -r $(TARGET_SUBDIR)/libgomp/multilib.out; then \\\n+\t  if cmp -s $(TARGET_SUBDIR)/libgomp/multilib.tmp $(TARGET_SUBDIR)/libgomp/multilib.out; then \\\n+\t    rm -f $(TARGET_SUBDIR)/libgomp/multilib.tmp; \\\n+\t  else \\\n+\t    rm -f $(TARGET_SUBDIR)/libgomp/Makefile; \\\n+\t    mv $(TARGET_SUBDIR)/libgomp/multilib.tmp $(TARGET_SUBDIR)/libgomp/multilib.out; \\\n+\t  fi; \\\n+\telse \\\n+\t  mv $(TARGET_SUBDIR)/libgomp/multilib.tmp $(TARGET_SUBDIR)/libgomp/multilib.out; \\\n+\tfi; \\\n+\ttest ! -f $(TARGET_SUBDIR)/libgomp/Makefile || exit 0; \\\n+\t$(NORMAL_TARGET_EXPORTS) \\\n+\t \\\n+\tCFLAGS=\"$(CFLAGS_FOR_TARGET)\"; export CFLAGS; \\\n+\tCXXFLAGS=\"$(CXXFLAGS_FOR_TARGET)\"; export CXXFLAGS; \\\n+\tLIBCFLAGS=\"$(LIBCFLAGS_FOR_TARGET)\"; export LIBCFLAGS;  \\\n+\techo Configuring stage 2 in $(TARGET_SUBDIR)/libgomp ; \\\n+\t$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/libgomp ; \\\n+\tcd $(TARGET_SUBDIR)/libgomp || exit 1; \\\n+\tcase $(srcdir) in \\\n+\t  /* | [A-Za-z]:[\\\\/]*) topdir=$(srcdir) ;; \\\n+\t  *) topdir=`echo $(TARGET_SUBDIR)/libgomp/ | \\\n+\t\tsed -e 's,\\./,,g' -e 's,[^/]*/,../,g' `$(srcdir) ;; \\\n+\tesac; \\\n+\tsrcdiroption=\"--srcdir=$${topdir}/libgomp\"; \\\n+\tlibsrcdir=\"$$s/libgomp\"; \\\n+\t$(SHELL) $${libsrcdir}/configure \\\n+\t  $(TARGET_CONFIGARGS) --build=${build_alias} --host=${target_alias} \\\n+\t  --target=${target_alias} $${srcdiroption} \\\n+\t  --with-build-libsubdir=$(HOST_SUBDIR) \\\n+\t  $(STAGE2_CONFIGURE_FLAGS)\n+@endif target-libgomp-bootstrap\n+\n+.PHONY: configure-stage3-target-libgomp maybe-configure-stage3-target-libgomp\n+maybe-configure-stage3-target-libgomp:\n+@if target-libgomp-bootstrap\n+maybe-configure-stage3-target-libgomp: configure-stage3-target-libgomp\n+configure-stage3-target-libgomp:\n+\t@[ $(current_stage) = stage3 ] || $(MAKE) stage3-start\n+\t@$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/libgomp\n+\t@r=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\tTFLAGS=\"$(STAGE3_TFLAGS)\"; \\\n+\techo \"Checking multilib configuration for libgomp...\"; \\\n+\t$(CC_FOR_TARGET) --print-multi-lib > $(TARGET_SUBDIR)/libgomp/multilib.tmp 2> /dev/null ; \\\n+\tif test -r $(TARGET_SUBDIR)/libgomp/multilib.out; then \\\n+\t  if cmp -s $(TARGET_SUBDIR)/libgomp/multilib.tmp $(TARGET_SUBDIR)/libgomp/multilib.out; then \\\n+\t    rm -f $(TARGET_SUBDIR)/libgomp/multilib.tmp; \\\n+\t  else \\\n+\t    rm -f $(TARGET_SUBDIR)/libgomp/Makefile; \\\n+\t    mv $(TARGET_SUBDIR)/libgomp/multilib.tmp $(TARGET_SUBDIR)/libgomp/multilib.out; \\\n+\t  fi; \\\n+\telse \\\n+\t  mv $(TARGET_SUBDIR)/libgomp/multilib.tmp $(TARGET_SUBDIR)/libgomp/multilib.out; \\\n+\tfi; \\\n+\ttest ! -f $(TARGET_SUBDIR)/libgomp/Makefile || exit 0; \\\n+\t$(NORMAL_TARGET_EXPORTS) \\\n+\t \\\n+\tCFLAGS=\"$(CFLAGS_FOR_TARGET)\"; export CFLAGS; \\\n+\tCXXFLAGS=\"$(CXXFLAGS_FOR_TARGET)\"; export CXXFLAGS; \\\n+\tLIBCFLAGS=\"$(LIBCFLAGS_FOR_TARGET)\"; export LIBCFLAGS;  \\\n+\techo Configuring stage 3 in $(TARGET_SUBDIR)/libgomp ; \\\n+\t$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/libgomp ; \\\n+\tcd $(TARGET_SUBDIR)/libgomp || exit 1; \\\n+\tcase $(srcdir) in \\\n+\t  /* | [A-Za-z]:[\\\\/]*) topdir=$(srcdir) ;; \\\n+\t  *) topdir=`echo $(TARGET_SUBDIR)/libgomp/ | \\\n+\t\tsed -e 's,\\./,,g' -e 's,[^/]*/,../,g' `$(srcdir) ;; \\\n+\tesac; \\\n+\tsrcdiroption=\"--srcdir=$${topdir}/libgomp\"; \\\n+\tlibsrcdir=\"$$s/libgomp\"; \\\n+\t$(SHELL) $${libsrcdir}/configure \\\n+\t  $(TARGET_CONFIGARGS) --build=${build_alias} --host=${target_alias} \\\n+\t  --target=${target_alias} $${srcdiroption} \\\n+\t  --with-build-libsubdir=$(HOST_SUBDIR) \\\n+\t  $(STAGE3_CONFIGURE_FLAGS)\n+@endif target-libgomp-bootstrap\n+\n+.PHONY: configure-stage4-target-libgomp maybe-configure-stage4-target-libgomp\n+maybe-configure-stage4-target-libgomp:\n+@if target-libgomp-bootstrap\n+maybe-configure-stage4-target-libgomp: configure-stage4-target-libgomp\n+configure-stage4-target-libgomp:\n+\t@[ $(current_stage) = stage4 ] || $(MAKE) stage4-start\n+\t@$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/libgomp\n+\t@r=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\tTFLAGS=\"$(STAGE4_TFLAGS)\"; \\\n+\techo \"Checking multilib configuration for libgomp...\"; \\\n+\t$(CC_FOR_TARGET) --print-multi-lib > $(TARGET_SUBDIR)/libgomp/multilib.tmp 2> /dev/null ; \\\n+\tif test -r $(TARGET_SUBDIR)/libgomp/multilib.out; then \\\n+\t  if cmp -s $(TARGET_SUBDIR)/libgomp/multilib.tmp $(TARGET_SUBDIR)/libgomp/multilib.out; then \\\n+\t    rm -f $(TARGET_SUBDIR)/libgomp/multilib.tmp; \\\n+\t  else \\\n+\t    rm -f $(TARGET_SUBDIR)/libgomp/Makefile; \\\n+\t    mv $(TARGET_SUBDIR)/libgomp/multilib.tmp $(TARGET_SUBDIR)/libgomp/multilib.out; \\\n+\t  fi; \\\n+\telse \\\n+\t  mv $(TARGET_SUBDIR)/libgomp/multilib.tmp $(TARGET_SUBDIR)/libgomp/multilib.out; \\\n+\tfi; \\\n+\ttest ! -f $(TARGET_SUBDIR)/libgomp/Makefile || exit 0; \\\n+\t$(NORMAL_TARGET_EXPORTS) \\\n+\t \\\n+\tCFLAGS=\"$(CFLAGS_FOR_TARGET)\"; export CFLAGS; \\\n+\tCXXFLAGS=\"$(CXXFLAGS_FOR_TARGET)\"; export CXXFLAGS; \\\n+\tLIBCFLAGS=\"$(LIBCFLAGS_FOR_TARGET)\"; export LIBCFLAGS;  \\\n+\techo Configuring stage 4 in $(TARGET_SUBDIR)/libgomp ; \\\n+\t$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/libgomp ; \\\n+\tcd $(TARGET_SUBDIR)/libgomp || exit 1; \\\n+\tcase $(srcdir) in \\\n+\t  /* | [A-Za-z]:[\\\\/]*) topdir=$(srcdir) ;; \\\n+\t  *) topdir=`echo $(TARGET_SUBDIR)/libgomp/ | \\\n+\t\tsed -e 's,\\./,,g' -e 's,[^/]*/,../,g' `$(srcdir) ;; \\\n+\tesac; \\\n+\tsrcdiroption=\"--srcdir=$${topdir}/libgomp\"; \\\n+\tlibsrcdir=\"$$s/libgomp\"; \\\n+\t$(SHELL) $${libsrcdir}/configure \\\n+\t  $(TARGET_CONFIGARGS) --build=${build_alias} --host=${target_alias} \\\n+\t  --target=${target_alias} $${srcdiroption} \\\n+\t  --with-build-libsubdir=$(HOST_SUBDIR) \\\n+\t  $(STAGE4_CONFIGURE_FLAGS)\n+@endif target-libgomp-bootstrap\n+\n+.PHONY: configure-stageprofile-target-libgomp maybe-configure-stageprofile-target-libgomp\n+maybe-configure-stageprofile-target-libgomp:\n+@if target-libgomp-bootstrap\n+maybe-configure-stageprofile-target-libgomp: configure-stageprofile-target-libgomp\n+configure-stageprofile-target-libgomp:\n+\t@[ $(current_stage) = stageprofile ] || $(MAKE) stageprofile-start\n+\t@$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/libgomp\n+\t@r=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\tTFLAGS=\"$(STAGEprofile_TFLAGS)\"; \\\n+\techo \"Checking multilib configuration for libgomp...\"; \\\n+\t$(CC_FOR_TARGET) --print-multi-lib > $(TARGET_SUBDIR)/libgomp/multilib.tmp 2> /dev/null ; \\\n+\tif test -r $(TARGET_SUBDIR)/libgomp/multilib.out; then \\\n+\t  if cmp -s $(TARGET_SUBDIR)/libgomp/multilib.tmp $(TARGET_SUBDIR)/libgomp/multilib.out; then \\\n+\t    rm -f $(TARGET_SUBDIR)/libgomp/multilib.tmp; \\\n+\t  else \\\n+\t    rm -f $(TARGET_SUBDIR)/libgomp/Makefile; \\\n+\t    mv $(TARGET_SUBDIR)/libgomp/multilib.tmp $(TARGET_SUBDIR)/libgomp/multilib.out; \\\n+\t  fi; \\\n+\telse \\\n+\t  mv $(TARGET_SUBDIR)/libgomp/multilib.tmp $(TARGET_SUBDIR)/libgomp/multilib.out; \\\n+\tfi; \\\n+\ttest ! -f $(TARGET_SUBDIR)/libgomp/Makefile || exit 0; \\\n+\t$(NORMAL_TARGET_EXPORTS) \\\n+\t \\\n+\tCFLAGS=\"$(CFLAGS_FOR_TARGET)\"; export CFLAGS; \\\n+\tCXXFLAGS=\"$(CXXFLAGS_FOR_TARGET)\"; export CXXFLAGS; \\\n+\tLIBCFLAGS=\"$(LIBCFLAGS_FOR_TARGET)\"; export LIBCFLAGS;  \\\n+\techo Configuring stage profile in $(TARGET_SUBDIR)/libgomp ; \\\n+\t$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/libgomp ; \\\n+\tcd $(TARGET_SUBDIR)/libgomp || exit 1; \\\n+\tcase $(srcdir) in \\\n+\t  /* | [A-Za-z]:[\\\\/]*) topdir=$(srcdir) ;; \\\n+\t  *) topdir=`echo $(TARGET_SUBDIR)/libgomp/ | \\\n+\t\tsed -e 's,\\./,,g' -e 's,[^/]*/,../,g' `$(srcdir) ;; \\\n+\tesac; \\\n+\tsrcdiroption=\"--srcdir=$${topdir}/libgomp\"; \\\n+\tlibsrcdir=\"$$s/libgomp\"; \\\n+\t$(SHELL) $${libsrcdir}/configure \\\n+\t  $(TARGET_CONFIGARGS) --build=${build_alias} --host=${target_alias} \\\n+\t  --target=${target_alias} $${srcdiroption} \\\n+\t  --with-build-libsubdir=$(HOST_SUBDIR) \\\n+\t  $(STAGEprofile_CONFIGURE_FLAGS)\n+@endif target-libgomp-bootstrap\n+\n+.PHONY: configure-stagefeedback-target-libgomp maybe-configure-stagefeedback-target-libgomp\n+maybe-configure-stagefeedback-target-libgomp:\n+@if target-libgomp-bootstrap\n+maybe-configure-stagefeedback-target-libgomp: configure-stagefeedback-target-libgomp\n+configure-stagefeedback-target-libgomp:\n+\t@[ $(current_stage) = stagefeedback ] || $(MAKE) stagefeedback-start\n+\t@$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/libgomp\n+\t@r=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\tTFLAGS=\"$(STAGEfeedback_TFLAGS)\"; \\\n+\techo \"Checking multilib configuration for libgomp...\"; \\\n+\t$(CC_FOR_TARGET) --print-multi-lib > $(TARGET_SUBDIR)/libgomp/multilib.tmp 2> /dev/null ; \\\n+\tif test -r $(TARGET_SUBDIR)/libgomp/multilib.out; then \\\n+\t  if cmp -s $(TARGET_SUBDIR)/libgomp/multilib.tmp $(TARGET_SUBDIR)/libgomp/multilib.out; then \\\n+\t    rm -f $(TARGET_SUBDIR)/libgomp/multilib.tmp; \\\n+\t  else \\\n+\t    rm -f $(TARGET_SUBDIR)/libgomp/Makefile; \\\n+\t    mv $(TARGET_SUBDIR)/libgomp/multilib.tmp $(TARGET_SUBDIR)/libgomp/multilib.out; \\\n+\t  fi; \\\n+\telse \\\n+\t  mv $(TARGET_SUBDIR)/libgomp/multilib.tmp $(TARGET_SUBDIR)/libgomp/multilib.out; \\\n+\tfi; \\\n+\ttest ! -f $(TARGET_SUBDIR)/libgomp/Makefile || exit 0; \\\n+\t$(NORMAL_TARGET_EXPORTS) \\\n+\t \\\n+\tCFLAGS=\"$(CFLAGS_FOR_TARGET)\"; export CFLAGS; \\\n+\tCXXFLAGS=\"$(CXXFLAGS_FOR_TARGET)\"; export CXXFLAGS; \\\n+\tLIBCFLAGS=\"$(LIBCFLAGS_FOR_TARGET)\"; export LIBCFLAGS;  \\\n+\techo Configuring stage feedback in $(TARGET_SUBDIR)/libgomp ; \\\n+\t$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/libgomp ; \\\n+\tcd $(TARGET_SUBDIR)/libgomp || exit 1; \\\n+\tcase $(srcdir) in \\\n+\t  /* | [A-Za-z]:[\\\\/]*) topdir=$(srcdir) ;; \\\n+\t  *) topdir=`echo $(TARGET_SUBDIR)/libgomp/ | \\\n+\t\tsed -e 's,\\./,,g' -e 's,[^/]*/,../,g' `$(srcdir) ;; \\\n+\tesac; \\\n+\tsrcdiroption=\"--srcdir=$${topdir}/libgomp\"; \\\n+\tlibsrcdir=\"$$s/libgomp\"; \\\n+\t$(SHELL) $${libsrcdir}/configure \\\n+\t  $(TARGET_CONFIGARGS) --build=${build_alias} --host=${target_alias} \\\n+\t  --target=${target_alias} $${srcdiroption} \\\n+\t  --with-build-libsubdir=$(HOST_SUBDIR) \\\n+\t  $(STAGEfeedback_CONFIGURE_FLAGS)\n+@endif target-libgomp-bootstrap\n+\n+\n+\n \n \n .PHONY: all-target-libgomp maybe-all-target-libgomp\n@@ -54677,7 +54950,6 @@ all-target-libgomp: stage_current\n TARGET-target-libgomp=all\n maybe-all-target-libgomp: all-target-libgomp\n all-target-libgomp: configure-target-libgomp\n-\t@: $(MAKE); $(unstage)\n \t@r=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n \t$(NORMAL_TARGET_EXPORTS)  \\\n@@ -54688,6 +54960,264 @@ all-target-libgomp: configure-target-libgomp\n \n \n \n+.PHONY: all-stage1-target-libgomp maybe-all-stage1-target-libgomp\n+.PHONY: clean-stage1-target-libgomp maybe-clean-stage1-target-libgomp\n+maybe-all-stage1-target-libgomp:\n+maybe-clean-stage1-target-libgomp:\n+@if target-libgomp-bootstrap\n+maybe-all-stage1-target-libgomp: all-stage1-target-libgomp\n+all-stage1: all-stage1-target-libgomp\n+TARGET-stage1-target-libgomp = $(TARGET-target-libgomp)\n+all-stage1-target-libgomp: configure-stage1-target-libgomp\n+\t@[ $(current_stage) = stage1 ] || $(MAKE) stage1-start\n+\t@r=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\tTFLAGS=\"$(STAGE1_TFLAGS)\"; \\\n+\t$(NORMAL_TARGET_EXPORTS)  \\\n+\tcd $(TARGET_SUBDIR)/libgomp && \\\n+\t$(MAKE) $(BASE_FLAGS_TO_PASS) \\\n+\t\tCFLAGS=\"$(CFLAGS_FOR_TARGET)\" \\\n+\t\tCXXFLAGS=\"$(CXXFLAGS_FOR_TARGET)\" \\\n+\t\tLIBCFLAGS=\"$(LIBCFLAGS_FOR_TARGET)\" \\\n+\t\tCFLAGS_FOR_TARGET=\"$(CFLAGS_FOR_TARGET)\" \\\n+\t\tCXXFLAGS_FOR_TARGET=\"$(CXXFLAGS_FOR_TARGET)\" \\\n+\t\tLIBCFLAGS_FOR_TARGET=\"$(LIBCFLAGS_FOR_TARGET)\" \\\n+\t\t$(EXTRA_TARGET_FLAGS)   \\\n+\t\tTFLAGS=\"$(STAGE1_TFLAGS)\" \\\n+\t\t$(TARGET-stage1-target-libgomp)\n+\n+maybe-clean-stage1-target-libgomp: clean-stage1-target-libgomp\n+clean-stage1: clean-stage1-target-libgomp\n+clean-stage1-target-libgomp:\n+\t@if [ $(current_stage) = stage1 ]; then \\\n+\t  [ -f $(TARGET_SUBDIR)/libgomp/Makefile ] || exit 0; \\\n+\telse \\\n+\t  [ -f $(TARGET_SUBDIR)/stage1-libgomp/Makefile ] || exit 0; \\\n+\t  $(MAKE) stage1-start; \\\n+\tfi; \\\n+\tcd $(TARGET_SUBDIR)/libgomp && \\\n+\t$(MAKE) $(EXTRA_TARGET_FLAGS)  \\\n+\t\t clean\n+@endif target-libgomp-bootstrap\n+\n+\n+.PHONY: all-stage2-target-libgomp maybe-all-stage2-target-libgomp\n+.PHONY: clean-stage2-target-libgomp maybe-clean-stage2-target-libgomp\n+maybe-all-stage2-target-libgomp:\n+maybe-clean-stage2-target-libgomp:\n+@if target-libgomp-bootstrap\n+maybe-all-stage2-target-libgomp: all-stage2-target-libgomp\n+all-stage2: all-stage2-target-libgomp\n+TARGET-stage2-target-libgomp = $(TARGET-target-libgomp)\n+all-stage2-target-libgomp: configure-stage2-target-libgomp\n+\t@[ $(current_stage) = stage2 ] || $(MAKE) stage2-start\n+\t@r=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\tTFLAGS=\"$(STAGE2_TFLAGS)\"; \\\n+\t$(NORMAL_TARGET_EXPORTS) \\\n+\t  \\\n+\tcd $(TARGET_SUBDIR)/libgomp && \\\n+\t$(MAKE) $(BASE_FLAGS_TO_PASS) \\\n+\t\tCFLAGS=\"$(CFLAGS_FOR_TARGET)\" \\\n+\t\tCXXFLAGS=\"$(CXXFLAGS_FOR_TARGET)\" \\\n+\t\tLIBCFLAGS=\"$(LIBCFLAGS_FOR_TARGET)\" \\\n+\t\tCFLAGS_FOR_TARGET=\"$(CFLAGS_FOR_TARGET)\" \\\n+\t\tCXXFLAGS_FOR_TARGET=\"$(CXXFLAGS_FOR_TARGET)\" \\\n+\t\tLIBCFLAGS_FOR_TARGET=\"$(LIBCFLAGS_FOR_TARGET)\" \\\n+\t\t$(EXTRA_TARGET_FLAGS)   \\\n+\t\tTFLAGS=\"$(STAGE2_TFLAGS)\" \\\n+\t\t$(TARGET-stage2-target-libgomp)\n+\n+maybe-clean-stage2-target-libgomp: clean-stage2-target-libgomp\n+clean-stage2: clean-stage2-target-libgomp\n+clean-stage2-target-libgomp:\n+\t@if [ $(current_stage) = stage2 ]; then \\\n+\t  [ -f $(TARGET_SUBDIR)/libgomp/Makefile ] || exit 0; \\\n+\telse \\\n+\t  [ -f $(TARGET_SUBDIR)/stage2-libgomp/Makefile ] || exit 0; \\\n+\t  $(MAKE) stage2-start; \\\n+\tfi; \\\n+\tcd $(TARGET_SUBDIR)/libgomp && \\\n+\t$(MAKE) $(EXTRA_TARGET_FLAGS)  \\\n+\t\t  \\\n+\t\t clean\n+@endif target-libgomp-bootstrap\n+\n+\n+.PHONY: all-stage3-target-libgomp maybe-all-stage3-target-libgomp\n+.PHONY: clean-stage3-target-libgomp maybe-clean-stage3-target-libgomp\n+maybe-all-stage3-target-libgomp:\n+maybe-clean-stage3-target-libgomp:\n+@if target-libgomp-bootstrap\n+maybe-all-stage3-target-libgomp: all-stage3-target-libgomp\n+all-stage3: all-stage3-target-libgomp\n+TARGET-stage3-target-libgomp = $(TARGET-target-libgomp)\n+all-stage3-target-libgomp: configure-stage3-target-libgomp\n+\t@[ $(current_stage) = stage3 ] || $(MAKE) stage3-start\n+\t@r=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\tTFLAGS=\"$(STAGE3_TFLAGS)\"; \\\n+\t$(NORMAL_TARGET_EXPORTS) \\\n+\t  \\\n+\tcd $(TARGET_SUBDIR)/libgomp && \\\n+\t$(MAKE) $(BASE_FLAGS_TO_PASS) \\\n+\t\tCFLAGS=\"$(CFLAGS_FOR_TARGET)\" \\\n+\t\tCXXFLAGS=\"$(CXXFLAGS_FOR_TARGET)\" \\\n+\t\tLIBCFLAGS=\"$(LIBCFLAGS_FOR_TARGET)\" \\\n+\t\tCFLAGS_FOR_TARGET=\"$(CFLAGS_FOR_TARGET)\" \\\n+\t\tCXXFLAGS_FOR_TARGET=\"$(CXXFLAGS_FOR_TARGET)\" \\\n+\t\tLIBCFLAGS_FOR_TARGET=\"$(LIBCFLAGS_FOR_TARGET)\" \\\n+\t\t$(EXTRA_TARGET_FLAGS)   \\\n+\t\tTFLAGS=\"$(STAGE3_TFLAGS)\" \\\n+\t\t$(TARGET-stage3-target-libgomp)\n+\n+maybe-clean-stage3-target-libgomp: clean-stage3-target-libgomp\n+clean-stage3: clean-stage3-target-libgomp\n+clean-stage3-target-libgomp:\n+\t@if [ $(current_stage) = stage3 ]; then \\\n+\t  [ -f $(TARGET_SUBDIR)/libgomp/Makefile ] || exit 0; \\\n+\telse \\\n+\t  [ -f $(TARGET_SUBDIR)/stage3-libgomp/Makefile ] || exit 0; \\\n+\t  $(MAKE) stage3-start; \\\n+\tfi; \\\n+\tcd $(TARGET_SUBDIR)/libgomp && \\\n+\t$(MAKE) $(EXTRA_TARGET_FLAGS)  \\\n+\t\t  \\\n+\t\t clean\n+@endif target-libgomp-bootstrap\n+\n+\n+.PHONY: all-stage4-target-libgomp maybe-all-stage4-target-libgomp\n+.PHONY: clean-stage4-target-libgomp maybe-clean-stage4-target-libgomp\n+maybe-all-stage4-target-libgomp:\n+maybe-clean-stage4-target-libgomp:\n+@if target-libgomp-bootstrap\n+maybe-all-stage4-target-libgomp: all-stage4-target-libgomp\n+all-stage4: all-stage4-target-libgomp\n+TARGET-stage4-target-libgomp = $(TARGET-target-libgomp)\n+all-stage4-target-libgomp: configure-stage4-target-libgomp\n+\t@[ $(current_stage) = stage4 ] || $(MAKE) stage4-start\n+\t@r=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\tTFLAGS=\"$(STAGE4_TFLAGS)\"; \\\n+\t$(NORMAL_TARGET_EXPORTS) \\\n+\t  \\\n+\tcd $(TARGET_SUBDIR)/libgomp && \\\n+\t$(MAKE) $(BASE_FLAGS_TO_PASS) \\\n+\t\tCFLAGS=\"$(CFLAGS_FOR_TARGET)\" \\\n+\t\tCXXFLAGS=\"$(CXXFLAGS_FOR_TARGET)\" \\\n+\t\tLIBCFLAGS=\"$(LIBCFLAGS_FOR_TARGET)\" \\\n+\t\tCFLAGS_FOR_TARGET=\"$(CFLAGS_FOR_TARGET)\" \\\n+\t\tCXXFLAGS_FOR_TARGET=\"$(CXXFLAGS_FOR_TARGET)\" \\\n+\t\tLIBCFLAGS_FOR_TARGET=\"$(LIBCFLAGS_FOR_TARGET)\" \\\n+\t\t$(EXTRA_TARGET_FLAGS)   \\\n+\t\tTFLAGS=\"$(STAGE4_TFLAGS)\" \\\n+\t\t$(TARGET-stage4-target-libgomp)\n+\n+maybe-clean-stage4-target-libgomp: clean-stage4-target-libgomp\n+clean-stage4: clean-stage4-target-libgomp\n+clean-stage4-target-libgomp:\n+\t@if [ $(current_stage) = stage4 ]; then \\\n+\t  [ -f $(TARGET_SUBDIR)/libgomp/Makefile ] || exit 0; \\\n+\telse \\\n+\t  [ -f $(TARGET_SUBDIR)/stage4-libgomp/Makefile ] || exit 0; \\\n+\t  $(MAKE) stage4-start; \\\n+\tfi; \\\n+\tcd $(TARGET_SUBDIR)/libgomp && \\\n+\t$(MAKE) $(EXTRA_TARGET_FLAGS)  \\\n+\t\t  \\\n+\t\t clean\n+@endif target-libgomp-bootstrap\n+\n+\n+.PHONY: all-stageprofile-target-libgomp maybe-all-stageprofile-target-libgomp\n+.PHONY: clean-stageprofile-target-libgomp maybe-clean-stageprofile-target-libgomp\n+maybe-all-stageprofile-target-libgomp:\n+maybe-clean-stageprofile-target-libgomp:\n+@if target-libgomp-bootstrap\n+maybe-all-stageprofile-target-libgomp: all-stageprofile-target-libgomp\n+all-stageprofile: all-stageprofile-target-libgomp\n+TARGET-stageprofile-target-libgomp = $(TARGET-target-libgomp)\n+all-stageprofile-target-libgomp: configure-stageprofile-target-libgomp\n+\t@[ $(current_stage) = stageprofile ] || $(MAKE) stageprofile-start\n+\t@r=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\tTFLAGS=\"$(STAGEprofile_TFLAGS)\"; \\\n+\t$(NORMAL_TARGET_EXPORTS) \\\n+\t  \\\n+\tcd $(TARGET_SUBDIR)/libgomp && \\\n+\t$(MAKE) $(BASE_FLAGS_TO_PASS) \\\n+\t\tCFLAGS=\"$(CFLAGS_FOR_TARGET)\" \\\n+\t\tCXXFLAGS=\"$(CXXFLAGS_FOR_TARGET)\" \\\n+\t\tLIBCFLAGS=\"$(LIBCFLAGS_FOR_TARGET)\" \\\n+\t\tCFLAGS_FOR_TARGET=\"$(CFLAGS_FOR_TARGET)\" \\\n+\t\tCXXFLAGS_FOR_TARGET=\"$(CXXFLAGS_FOR_TARGET)\" \\\n+\t\tLIBCFLAGS_FOR_TARGET=\"$(LIBCFLAGS_FOR_TARGET)\" \\\n+\t\t$(EXTRA_TARGET_FLAGS)   \\\n+\t\tTFLAGS=\"$(STAGEprofile_TFLAGS)\" \\\n+\t\t$(TARGET-stageprofile-target-libgomp)\n+\n+maybe-clean-stageprofile-target-libgomp: clean-stageprofile-target-libgomp\n+clean-stageprofile: clean-stageprofile-target-libgomp\n+clean-stageprofile-target-libgomp:\n+\t@if [ $(current_stage) = stageprofile ]; then \\\n+\t  [ -f $(TARGET_SUBDIR)/libgomp/Makefile ] || exit 0; \\\n+\telse \\\n+\t  [ -f $(TARGET_SUBDIR)/stageprofile-libgomp/Makefile ] || exit 0; \\\n+\t  $(MAKE) stageprofile-start; \\\n+\tfi; \\\n+\tcd $(TARGET_SUBDIR)/libgomp && \\\n+\t$(MAKE) $(EXTRA_TARGET_FLAGS)  \\\n+\t\t  \\\n+\t\t clean\n+@endif target-libgomp-bootstrap\n+\n+\n+.PHONY: all-stagefeedback-target-libgomp maybe-all-stagefeedback-target-libgomp\n+.PHONY: clean-stagefeedback-target-libgomp maybe-clean-stagefeedback-target-libgomp\n+maybe-all-stagefeedback-target-libgomp:\n+maybe-clean-stagefeedback-target-libgomp:\n+@if target-libgomp-bootstrap\n+maybe-all-stagefeedback-target-libgomp: all-stagefeedback-target-libgomp\n+all-stagefeedback: all-stagefeedback-target-libgomp\n+TARGET-stagefeedback-target-libgomp = $(TARGET-target-libgomp)\n+all-stagefeedback-target-libgomp: configure-stagefeedback-target-libgomp\n+\t@[ $(current_stage) = stagefeedback ] || $(MAKE) stagefeedback-start\n+\t@r=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\tTFLAGS=\"$(STAGEfeedback_TFLAGS)\"; \\\n+\t$(NORMAL_TARGET_EXPORTS) \\\n+\t  \\\n+\tcd $(TARGET_SUBDIR)/libgomp && \\\n+\t$(MAKE) $(BASE_FLAGS_TO_PASS) \\\n+\t\tCFLAGS=\"$(CFLAGS_FOR_TARGET)\" \\\n+\t\tCXXFLAGS=\"$(CXXFLAGS_FOR_TARGET)\" \\\n+\t\tLIBCFLAGS=\"$(LIBCFLAGS_FOR_TARGET)\" \\\n+\t\tCFLAGS_FOR_TARGET=\"$(CFLAGS_FOR_TARGET)\" \\\n+\t\tCXXFLAGS_FOR_TARGET=\"$(CXXFLAGS_FOR_TARGET)\" \\\n+\t\tLIBCFLAGS_FOR_TARGET=\"$(LIBCFLAGS_FOR_TARGET)\" \\\n+\t\t$(EXTRA_TARGET_FLAGS)   \\\n+\t\tTFLAGS=\"$(STAGEfeedback_TFLAGS)\" \\\n+\t\t$(TARGET-stagefeedback-target-libgomp)\n+\n+maybe-clean-stagefeedback-target-libgomp: clean-stagefeedback-target-libgomp\n+clean-stagefeedback: clean-stagefeedback-target-libgomp\n+clean-stagefeedback-target-libgomp:\n+\t@if [ $(current_stage) = stagefeedback ]; then \\\n+\t  [ -f $(TARGET_SUBDIR)/libgomp/Makefile ] || exit 0; \\\n+\telse \\\n+\t  [ -f $(TARGET_SUBDIR)/stagefeedback-libgomp/Makefile ] || exit 0; \\\n+\t  $(MAKE) stagefeedback-start; \\\n+\tfi; \\\n+\tcd $(TARGET_SUBDIR)/libgomp && \\\n+\t$(MAKE) $(EXTRA_TARGET_FLAGS)  \\\n+\t\t  \\\n+\t\t clean\n+@endif target-libgomp-bootstrap\n+\n+\n+\n+\n \n \n .PHONY: check-target-libgomp maybe-check-target-libgomp\n@@ -57133,7 +57663,12 @@ configure-target-boehm-gc: stage_last\n configure-target-qthreads: stage_last\n configure-target-rda: stage_last\n configure-target-libada: stage_last\n-configure-target-libgomp: stage_last\n+configure-stage1-target-libgomp: maybe-all-stage1-gcc\n+configure-stage2-target-libgomp: maybe-all-stage2-gcc\n+configure-stage3-target-libgomp: maybe-all-stage3-gcc\n+configure-stage4-target-libgomp: maybe-all-stage4-gcc\n+configure-stageprofile-target-libgomp: maybe-all-stageprofile-gcc\n+configure-stagefeedback-target-libgomp: maybe-all-stagefeedback-gcc\n @endif gcc-bootstrap\n \n @if gcc-no-bootstrap\n@@ -57874,6 +58409,21 @@ all-target-libobjc: maybe-all-target-libiberty\n all-target-libobjc: maybe-all-target-boehm-gc\n all-target-libstdc++-v3: maybe-all-target-libiberty\n configure-target-libstdc++-v3: maybe-configure-target-libgomp\n+\n+configure-stage1-target-libstdc++-v3: maybe-configure-stage1-target-libgomp\n+configure-stage2-target-libstdc++-v3: maybe-configure-stage2-target-libgomp\n+configure-stage3-target-libstdc++-v3: maybe-configure-stage3-target-libgomp\n+configure-stage4-target-libstdc++-v3: maybe-configure-stage4-target-libgomp\n+configure-stageprofile-target-libstdc++-v3: maybe-configure-stageprofile-target-libgomp\n+configure-stagefeedback-target-libstdc++-v3: maybe-configure-stagefeedback-target-libgomp\n+all-target-libstdc++-v3: maybe-configure-target-libgomp\n+\n+all-stage1-target-libstdc++-v3: maybe-configure-stage1-target-libgomp\n+all-stage2-target-libstdc++-v3: maybe-configure-stage2-target-libgomp\n+all-stage3-target-libstdc++-v3: maybe-configure-stage3-target-libgomp\n+all-stage4-target-libstdc++-v3: maybe-configure-stage4-target-libgomp\n+all-stageprofile-target-libstdc++-v3: maybe-configure-stageprofile-target-libgomp\n+all-stagefeedback-target-libstdc++-v3: maybe-configure-stagefeedback-target-libgomp\n all-target-libgloss: maybe-all-target-newlib\n all-target-winsup: maybe-all-target-libiberty\n all-target-winsup: maybe-all-target-libtermcap\n@@ -57895,6 +58445,12 @@ configure-stage3-target-libstdc++-v3: maybe-all-stage3-target-libgcc\n configure-stage4-target-libstdc++-v3: maybe-all-stage4-target-libgcc\n configure-stageprofile-target-libstdc++-v3: maybe-all-stageprofile-target-libgcc\n configure-stagefeedback-target-libstdc++-v3: maybe-all-stagefeedback-target-libgcc\n+configure-stage1-target-libgomp: maybe-all-stage1-target-libgcc\n+configure-stage2-target-libgomp: maybe-all-stage2-target-libgcc\n+configure-stage3-target-libgomp: maybe-all-stage3-target-libgcc\n+configure-stage4-target-libgomp: maybe-all-stage4-target-libgcc\n+configure-stageprofile-target-libgomp: maybe-all-stageprofile-target-libgcc\n+configure-stagefeedback-target-libgomp: maybe-all-stagefeedback-target-libgcc\n @endif gcc-bootstrap\n \n @if gcc-no-bootstrap"}, {"sha": "889c040c5b2c3879fe5078497884fb83a3d39bfb", "filename": "Makefile.tpl", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aae29963cf81dda2c09b9ffc07a84c788421aeb2/Makefile.tpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aae29963cf81dda2c09b9ffc07a84c788421aeb2/Makefile.tpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.tpl?ref=aae29963cf81dda2c09b9ffc07a84c788421aeb2", "patch": "@@ -176,6 +176,7 @@ EXTRA_BUILD_FLAGS = \\\n \n # This is the list of directories to built for the host system.\n SUBDIRS = @configdirs@\n+TARGET_CONFIGDIRS = @target_configdirs@\n # This is set by the configure script to the arguments to use when configuring\n # directories built for the host system.\n HOST_CONFIGARGS = @host_configargs@\n@@ -287,7 +288,8 @@ BASE_TARGET_EXPORTS = \\\n @if gcc-bootstrap\n \t$(RPATH_ENVVAR)=`echo \"$(TARGET_LIB_PATH)$$$(RPATH_ENVVAR)\" | sed 's,::*,:,g;s,^:*,,;s,:*$$,,'`; export $(RPATH_ENVVAR); \\\n @endif gcc-bootstrap\n-\t$(RPATH_ENVVAR)=`echo \"$(HOST_LIB_PATH)$$$(RPATH_ENVVAR)\" | sed 's,::*,:,g;s,^:*,,;s,:*$$,,'`; export $(RPATH_ENVVAR);\n+\t$(RPATH_ENVVAR)=`echo \"$(HOST_LIB_PATH)$$$(RPATH_ENVVAR)\" | sed 's,::*,:,g;s,^:*,,;s,:*$$,,'`; export $(RPATH_ENVVAR); \\\n+\tTARGET_CONFIGDIRS=\"$(TARGET_CONFIGDIRS)\"; export TARGET_CONFIGDIRS;\n \n RAW_CXX_TARGET_EXPORTS = \\\n \t$(BASE_TARGET_EXPORTS) \\"}, {"sha": "23c1eb753c23a93a3b772a0f6e2d2ad3457bff01", "filename": "configure", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aae29963cf81dda2c09b9ffc07a84c788421aeb2/configure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aae29963cf81dda2c09b9ffc07a84c788421aeb2/configure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure?ref=aae29963cf81dda2c09b9ffc07a84c788421aeb2", "patch": "@@ -656,6 +656,7 @@ CC_FOR_BUILD\n AS_FOR_BUILD\n AR_FOR_BUILD\n target_configargs\n+target_configdirs\n configdirs\n host_configargs\n build_configdirs\n@@ -7949,6 +7950,7 @@ done\n \n \n \n+\n # Target module lists & subconfigure args.\n \n "}, {"sha": "c99fffcd4d046e17c020c4a5579197294f123bdd", "filename": "configure.ac", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aae29963cf81dda2c09b9ffc07a84c788421aeb2/configure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aae29963cf81dda2c09b9ffc07a84c788421aeb2/configure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure.ac?ref=aae29963cf81dda2c09b9ffc07a84c788421aeb2", "patch": "@@ -3086,6 +3086,7 @@ AC_SUBST(build_configdirs)\n # Host module lists & subconfigure args.\n AC_SUBST(host_configargs)\n AC_SUBST(configdirs)\n+AC_SUBST(target_configdirs)\n \n # Target module lists & subconfigure args.\n AC_SUBST(target_configargs)"}, {"sha": "bfdf16a9a47aa4dbddb65353d6a9629659573e45", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aae29963cf81dda2c09b9ffc07a84c788421aeb2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aae29963cf81dda2c09b9ffc07a84c788421aeb2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=aae29963cf81dda2c09b9ffc07a84c788421aeb2", "patch": "@@ -1,3 +1,10 @@\n+2010-01-22  Joern Rennecke  <amylaar@spamcop.net>\n+\n+\tPR libstdc++/36101, PR libstdc++/42813\n+\t* acinclude.m4: (enable_parallel): Test ${TARGET_CONFIGDIRS} instead of\n+\tloking for omp.h .\n+\t* configure: Regenerate.\n+\n 2010-01-21  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n         PR libstdc++/42201"}, {"sha": "94b53b89e77059cb079563b96bf55f1300e0b809", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aae29963cf81dda2c09b9ffc07a84c788421aeb2/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aae29963cf81dda2c09b9ffc07a84c788421aeb2/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=aae29963cf81dda2c09b9ffc07a84c788421aeb2", "patch": "@@ -2023,10 +2023,10 @@ AC_DEFUN([GLIBCXX_ENABLE_PARALLEL], [\n \n   # See if configured libgomp/omp.h exists. (libgomp may be in\n   # noconfigdirs but not explicitly disabled.)\n-  if test -f $glibcxx_builddir/../libgomp/omp.h; then\n+  if echo \" ${TARGET_CONFIGDIRS} \" | grep \" libgomp \" > /dev/null 2>&1 ; then\n     enable_parallel=yes;\n   else\n-    AC_MSG_NOTICE([$glibcxx_builddir/../libgomp/omp.h not found])\n+    AC_MSG_NOTICE([target-libgomp not built])\n   fi\n \n   AC_MSG_CHECKING([for parallel mode support])"}, {"sha": "ed611d66d127e8d6a5c078b1d84bdd0cfb26c6c3", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aae29963cf81dda2c09b9ffc07a84c788421aeb2/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aae29963cf81dda2c09b9ffc07a84c788421aeb2/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=aae29963cf81dda2c09b9ffc07a84c788421aeb2", "patch": "@@ -17056,11 +17056,11 @@ $as_echo \"$enable_libstdcxx_debug\" >&6; }\n \n   # See if configured libgomp/omp.h exists. (libgomp may be in\n   # noconfigdirs but not explicitly disabled.)\n-  if test -f $glibcxx_builddir/../libgomp/omp.h; then\n+  if echo \" ${TARGET_CONFIGDIRS} \" | grep \" libgomp \" > /dev/null 2>&1 ; then\n     enable_parallel=yes;\n   else\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: $glibcxx_builddir/../libgomp/omp.h not found\" >&5\n-$as_echo \"$as_me: $glibcxx_builddir/../libgomp/omp.h not found\" >&6;}\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: target-libgomp not built\" >&5\n+$as_echo \"$as_me: target-libgomp not built\" >&6;}\n   fi\n \n   { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for parallel mode support\" >&5"}]}