{"sha": "e8160c9a604ed01f38060655561a8fdf8ef854c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTgxNjBjOWE2MDRlZDAxZjM4MDYwNjU1NTYxYThmZGY4ZWY4NTRjOA==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-11-03T00:49:00Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-11-03T00:49:00Z"}, "message": "builtins.c (fold_builtin_signbit): Use build_zero_cst instead of fold_convert.\n\ngcc/\n\t* builtins.c (fold_builtin_signbit): Use build_zero_cst instead of\n\tfold_convert.\n\t* c-typeck.c (build_function_call_vec): Likewise.\n\t* cfgexpand.c (expand_debug_expr): Likewise.\n\t* cgraphunit.c (assemble_thunk): Likewise.\n\t* config/sparc/sparc.c (sparc_fold_builtin): Likewise.\n\t* fold-const.c (fold_unary_loc, fold_mult_zconjz): Likewise.\n\t(fold_binary_loc, fold_ternary_loc): Likewise.\n\t* gimple-fold.c (get_symbol_constant_value): Likewise.\n\t* gimple-low.c (lower_builtin_setjmp): Likewise.\n\t* gimple.c (gimple_cond_get_ops_from_tree): Likewise.\n\t* gimplify.c (gimplify_init_constructor): Likewise.\n\t* lambda.h (build_linear_expr): Likewise.\n\t* omp-low.c (omp_reduction_init): Likewise.\n\t* tree-inline.c (remap_ssa_name): Likewise.\n\t* tree-object-size.c (compute_object_sizes): Likewise.\n\t* tree-sra.c (init_subtree_with_zero): Likewise.\n\t(sra_ipa_modify_assign): Likewise.\n\t* tree-ssa-copy.c (propagate_tree_value_into_stmt): Likewise.\n\t* tree-ssa-reassoc.c (eliminate_duplicate_pair): Likewise.\n\t(eliminate_plus_minus_pair, eliminate_not_pairs): Likewise.\n\t(undistribute_ops_list): Likewise.\n\t* tree-ssa-sccvn.c (vn_reference_lookup_3): Likewise.\n\t* tree-vect-stmts.c (vectorizable_call): Likewise.\n\t* tree.c (build_vector_from_ctor, build_one_cst): Likewise.\n\t(build_zero_cst): Handle more cases directly.  Update comment.\n\ngcc/cp/\n\t* class.c (build_base_path, add_vcall_offset): Use build_zero_cst\n\tinstead of fold_convert.\n\t* init.c (build_zero_init): Likewise.\n\t* typeck.c (cp_build_binary_op): Likewise.\n\ngcc/fortran/\n\t* trans-decl.c (add_argument_checking): Use build_zero_cst instead of\n\tfold_convert.\n\t* trans-expr.c (gfc_conv_missing_dummy, fill_with_spaces): Likewise.\n\t* trans-stmt.c (gfc_trans_do): Likewise.\n\nFrom-SVN: r166227", "tree": {"sha": "aa2d2827a0f82adc2311c64a062ea2a424f865c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa2d2827a0f82adc2311c64a062ea2a424f865c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8160c9a604ed01f38060655561a8fdf8ef854c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8160c9a604ed01f38060655561a8fdf8ef854c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8160c9a604ed01f38060655561a8fdf8ef854c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8160c9a604ed01f38060655561a8fdf8ef854c8/comments", "author": null, "committer": null, "parents": [{"sha": "7d1c5d3530bcea4099af22a346315c70e62a9b25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d1c5d3530bcea4099af22a346315c70e62a9b25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d1c5d3530bcea4099af22a346315c70e62a9b25"}], "stats": {"total": 198, "additions": 128, "deletions": 70}, "files": [{"sha": "bebc9823c23589205f28a399a5e43d1cfcb54e33", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8160c9a604ed01f38060655561a8fdf8ef854c8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8160c9a604ed01f38060655561a8fdf8ef854c8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e8160c9a604ed01f38060655561a8fdf8ef854c8", "patch": "@@ -1,3 +1,32 @@\n+2010-11-02  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* builtins.c (fold_builtin_signbit): Use build_zero_cst instead of\n+\tfold_convert.\n+\t* c-typeck.c (build_function_call_vec): Likewise.\n+\t* cfgexpand.c (expand_debug_expr): Likewise.\n+\t* cgraphunit.c (assemble_thunk): Likewise.\n+\t* config/sparc/sparc.c (sparc_fold_builtin): Likewise.\n+\t* fold-const.c (fold_unary_loc, fold_mult_zconjz): Likewise.\n+\t(fold_binary_loc, fold_ternary_loc): Likewise.\n+\t* gimple-fold.c (get_symbol_constant_value): Likewise.\n+\t* gimple-low.c (lower_builtin_setjmp): Likewise.\n+\t* gimple.c (gimple_cond_get_ops_from_tree): Likewise.\n+\t* gimplify.c (gimplify_init_constructor): Likewise.\n+\t* lambda.h (build_linear_expr): Likewise.\n+\t* omp-low.c (omp_reduction_init): Likewise.\n+\t* tree-inline.c (remap_ssa_name): Likewise.\n+\t* tree-object-size.c (compute_object_sizes): Likewise.\n+\t* tree-sra.c (init_subtree_with_zero): Likewise.\n+\t(sra_ipa_modify_assign): Likewise.\n+\t* tree-ssa-copy.c (propagate_tree_value_into_stmt): Likewise.\n+\t* tree-ssa-reassoc.c (eliminate_duplicate_pair): Likewise.\n+\t(eliminate_plus_minus_pair, eliminate_not_pairs): Likewise.\n+\t(undistribute_ops_list): Likewise.\n+\t* tree-ssa-sccvn.c (vn_reference_lookup_3): Likewise.\n+\t* tree-vect-stmts.c (vectorizable_call): Likewise.\n+\t* tree.c (build_vector_from_ctor, build_one_cst): Likewise.\n+\t(build_zero_cst): Handle more cases directly.  Update comment.\n+\n 2010-11-02  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/i386-protos.h (ix86_split_call_pop_vzeroupper):"}, {"sha": "4ff0546c6d4613801899dd4c9f446e7c28b12be3", "filename": "gcc/builtins.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8160c9a604ed01f38060655561a8fdf8ef854c8/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8160c9a604ed01f38060655561a8fdf8ef854c8/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=e8160c9a604ed01f38060655561a8fdf8ef854c8", "patch": "@@ -9101,8 +9101,6 @@ fold_builtin_strncmp (location_t loc, tree arg1, tree arg2, tree len)\n static tree\n fold_builtin_signbit (location_t loc, tree arg, tree type)\n {\n-  tree temp;\n-\n   if (!validate_arg (arg, REAL_TYPE))\n     return NULL_TREE;\n \n@@ -9113,8 +9111,9 @@ fold_builtin_signbit (location_t loc, tree arg, tree type)\n       REAL_VALUE_TYPE c;\n \n       c = TREE_REAL_CST (arg);\n-      temp = REAL_VALUE_NEGATIVE (c) ? integer_one_node : integer_zero_node;\n-      return fold_convert_loc (loc, type, temp);\n+      return (REAL_VALUE_NEGATIVE (c)\n+\t      ? build_one_cst (type)\n+\t      : build_zero_cst (type));\n     }\n \n   /* If ARG is non-negative, the result is always zero.  */"}, {"sha": "7f448ddf2ba8f9fffa709356a17ee5415d8ad346", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8160c9a604ed01f38060655561a8fdf8ef854c8/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8160c9a604ed01f38060655561a8fdf8ef854c8/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=e8160c9a604ed01f38060655561a8fdf8ef854c8", "patch": "@@ -2821,7 +2821,7 @@ build_function_call_vec (location_t loc, tree function, VEC(tree,gc) *params,\n \t\t\t\t\t  build_constructor (return_type, 0),\n \t\t\t\t\t  false);\n \t  else\n-\t    rhs = fold_convert_loc (loc, return_type, integer_zero_node);\n+\t    rhs = build_zero_cst (return_type);\n \n \t  return require_complete_type (build2 (COMPOUND_EXPR, return_type,\n \t\t\t\t\t\ttrap, rhs));"}, {"sha": "f02a8cd2ba042a1ede8bc7912e6522144c6ede5c", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8160c9a604ed01f38060655561a8fdf8ef854c8/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8160c9a604ed01f38060655561a8fdf8ef854c8/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=e8160c9a604ed01f38060655561a8fdf8ef854c8", "patch": "@@ -3073,7 +3073,7 @@ expand_debug_expr (tree exp)\n \t  if (i < TYPE_VECTOR_SUBPARTS (TREE_TYPE (exp)))\n \t    {\n \t      op1 = expand_debug_expr\n-\t\t(fold_convert (TREE_TYPE (TREE_TYPE (exp)), integer_zero_node));\n+\t\t(build_zero_cst (TREE_TYPE (TREE_TYPE (exp))));\n \n \t      if (!op1)\n \t\treturn NULL;"}, {"sha": "ed86a029690e3416da30c84bb7f1215d76c34025", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8160c9a604ed01f38060655561a8fdf8ef854c8/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8160c9a604ed01f38060655561a8fdf8ef854c8/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=e8160c9a604ed01f38060655561a8fdf8ef854c8", "patch": "@@ -1411,8 +1411,7 @@ assemble_thunk (struct cgraph_node *node)\n \t      remove_edge (single_succ_edge (bb));\n \t      true_label = gimple_block_label (then_bb);\n \t      stmt = gimple_build_cond (NE_EXPR, restmp,\n-\t      \t\t\t\tfold_convert (TREE_TYPE (restmp),\n-\t\t\t\t\t\t      integer_zero_node),\n+\t      \t\t\t\tbuild_zero_cst (TREE_TYPE (restmp)),\n \t      \t\t\t        NULL_TREE, NULL_TREE);\n \t      gsi_insert_after (&bsi, stmt, GSI_NEW_STMT);\n \t      make_edge (bb, then_bb, EDGE_TRUE_VALUE);\n@@ -1429,8 +1428,8 @@ assemble_thunk (struct cgraph_node *node)\n \t    {\n \t      gimple stmt;\n \t      bsi = gsi_last_bb (else_bb);\n-\t      stmt = gimple_build_assign (restmp, fold_convert (TREE_TYPE (restmp),\n-\t\t\t\t\t\t\t\tinteger_zero_node));\n+\t      stmt = gimple_build_assign (restmp,\n+\t\t\t\t\t  build_zero_cst (TREE_TYPE (restmp)));\n \t      gsi_insert_after (&bsi, stmt, GSI_NEW_STMT);\n \t      bsi = gsi_last_bb (return_bb);\n \t    }"}, {"sha": "4793e772bdaabd787690e7be65237e273d6746a7", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8160c9a604ed01f38060655561a8fdf8ef854c8/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8160c9a604ed01f38060655561a8fdf8ef854c8/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=e8160c9a604ed01f38060655561a8fdf8ef854c8", "patch": "@@ -8748,7 +8748,7 @@ sparc_fold_builtin (tree fndecl, int n_args ATTRIBUTE_UNUSED,\n   if (ignore\n       && icode != CODE_FOR_alignaddrsi_vis\n       && icode != CODE_FOR_alignaddrdi_vis)\n-    return fold_convert (rtype, integer_zero_node);\n+    return build_zero_cst (rtype);\n \n   switch (icode)\n     {"}, {"sha": "24783f5c4358bc9f6e1ec12a56faa845416f201a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8160c9a604ed01f38060655561a8fdf8ef854c8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8160c9a604ed01f38060655561a8fdf8ef854c8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e8160c9a604ed01f38060655561a8fdf8ef854c8", "patch": "@@ -1,3 +1,10 @@\n+2010-11-02  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* class.c (build_base_path, add_vcall_offset): Use build_zero_cst\n+\tinstead of fold_convert.\n+\t* init.c (build_zero_init): Likewise.\n+\t* typeck.c (cp_build_binary_op): Likewise.\n+\n 2010-11-02  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR c++/46170"}, {"sha": "ded0a0399726fc85365235625acca2ef19ae8145", "filename": "gcc/cp/class.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8160c9a604ed01f38060655561a8fdf8ef854c8/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8160c9a604ed01f38060655561a8fdf8ef854c8/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=e8160c9a604ed01f38060655561a8fdf8ef854c8", "patch": "@@ -431,8 +431,7 @@ build_base_path (enum tree_code code,\n  out:\n   if (null_test)\n     expr = fold_build3_loc (input_location, COND_EXPR, target_type, null_test, expr,\n-\t\t\tfold_build1_loc (input_location, NOP_EXPR, target_type,\n-\t\t\t\t     integer_zero_node));\n+\t\t\t    build_zero_cst (target_type));\n \n   return expr;\n }\n@@ -8267,8 +8266,7 @@ add_vcall_offset (tree orig_fn, tree binfo, vtbl_init_data *vid)\n       /* Find the overriding function.  */\n       fn = find_final_overrider (vid->rtti_binfo, binfo, orig_fn);\n       if (fn == error_mark_node)\n-\tvcall_offset = build1 (NOP_EXPR, vtable_entry_type,\n-\t\t\t       integer_zero_node);\n+\tvcall_offset = build_zero_cst (vtable_entry_type);\n       else\n \t{\n \t  base = TREE_VALUE (fn);"}, {"sha": "1f73d148ac1e5fa866b31c7841599a5e4e9808c9", "filename": "gcc/cp/init.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8160c9a604ed01f38060655561a8fdf8ef854c8/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8160c9a604ed01f38060655561a8fdf8ef854c8/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=e8160c9a604ed01f38060655561a8fdf8ef854c8", "patch": "@@ -254,7 +254,7 @@ build_zero_init (tree type, tree nelts, bool static_storage_p)\n       init = build_constructor (type, v);\n     }\n   else if (TREE_CODE (type) == VECTOR_TYPE)\n-    init = fold_convert (type, integer_zero_node);\n+    init = build_zero_cst (type);\n   else\n     gcc_assert (TREE_CODE (type) == REFERENCE_TYPE);\n "}, {"sha": "6a52fc47645d5f36eca4a84e79015193672802ae", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8160c9a604ed01f38060655561a8fdf8ef854c8/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8160c9a604ed01f38060655561a8fdf8ef854c8/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=e8160c9a604ed01f38060655561a8fdf8ef854c8", "patch": "@@ -4047,8 +4047,7 @@ cp_build_binary_op (location_t location,\n \t      tree e1 = cp_build_binary_op (location,\n \t\t\t\t\t    EQ_EXPR,\n \t  \t\t\t            pfn0,\t\n-\t\t\t\t      \t    fold_convert (TREE_TYPE (pfn0),\n-\t\t\t\t\t\t\t  integer_zero_node),\n+\t\t\t\t      \t    build_zero_cst (TREE_TYPE (pfn0)),\n \t\t\t\t\t    complain);\n \t      tree e2 = cp_build_binary_op (location,\n \t\t\t\t\t    BIT_AND_EXPR, \n@@ -4138,8 +4137,7 @@ cp_build_binary_op (location_t location,\n \t\t\t\t       complain);\n \t      e2 = cp_build_binary_op (location, EQ_EXPR,\n \t\t\t\t       pfn0,\n-\t\t\t\t       fold_convert (TREE_TYPE (pfn0),\n-\t\t\t\t\t\t     integer_zero_node),\n+\t\t\t\t       build_zero_cst (TREE_TYPE (pfn0)),\n \t\t\t\t       complain);\n \t      e2 = cp_build_binary_op (location,\n \t\t\t\t       TRUTH_ANDIF_EXPR, e2, e1, complain);\n@@ -4164,8 +4162,7 @@ cp_build_binary_op (location_t location,\n \t      e2 = cp_build_binary_op (location,\n \t\t\t\t       EQ_EXPR,\n \t\t      \t\t       pfn0,\n-\t\t\t   \t       fold_convert (TREE_TYPE (pfn0),\n-\t\t\t\t\t\t     integer_zero_node),\n+\t\t\t   \t       build_zero_cst (TREE_TYPE (pfn0)),\n \t\t\t\t       complain);\n \t      e1 = cp_build_binary_op (location,\n \t\t\t\t       TRUTH_ORIF_EXPR, e1, e2, complain);"}, {"sha": "da890f14c3db998d3da541a4d3a93007567f5cf5", "filename": "gcc/fold-const.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8160c9a604ed01f38060655561a8fdf8ef854c8/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8160c9a604ed01f38060655561a8fdf8ef854c8/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=e8160c9a604ed01f38060655561a8fdf8ef854c8", "patch": "@@ -8228,7 +8228,7 @@ fold_unary_loc (location_t loc, enum tree_code code, tree type, tree op0)\n \n     case IMAGPART_EXPR:\n       if (TREE_CODE (TREE_TYPE (arg0)) != COMPLEX_TYPE)\n-\treturn fold_convert_loc (loc, type, integer_zero_node);\n+\treturn build_zero_cst (type);\n       if (TREE_CODE (arg0) == COMPLEX_EXPR)\n \treturn omit_one_operand_loc (loc, type, TREE_OPERAND (arg0, 1),\n \t\t\t\t TREE_OPERAND (arg0, 0));\n@@ -9283,7 +9283,7 @@ fold_mult_zconjz (location_t loc, tree type, tree expr)\n \t\t     fold_build2_loc (loc, MULT_EXPR, itype, rpart, rpart),\n \t\t     fold_build2_loc (loc, MULT_EXPR, itype, ipart, ipart));\n   return fold_build2_loc (loc, COMPLEX_EXPR, type, tem,\n-\t\t      fold_convert_loc (loc, itype, integer_zero_node));\n+\t\t\t  build_zero_cst (itype));\n }\n \n \n@@ -10275,7 +10275,7 @@ fold_binary_loc (location_t loc,\n \n       if ((!FLOAT_TYPE_P (type) || !HONOR_NANS (TYPE_MODE (type)))\n \t  && operand_equal_p (arg0, arg1, 0))\n-\treturn fold_convert_loc (loc, type, integer_zero_node);\n+\treturn build_zero_cst (type);\n \n       /* A - B -> A + (-B) if B is easily negatable.  */\n       if (negate_expr_p (arg1)\n@@ -10662,7 +10662,7 @@ fold_binary_loc (location_t loc,\n       if (TREE_CODE (arg0) == BIT_NOT_EXPR\n \t  && operand_equal_p (TREE_OPERAND (arg0, 0), arg1, 0))\n \t{\n-\t  t1 = fold_convert_loc (loc, type, integer_zero_node);\n+\t  t1 = build_zero_cst (type);\n \t  t1 = fold_unary_loc (loc, BIT_NOT_EXPR, type, t1);\n \t  return omit_one_operand_loc (loc, type, t1, arg1);\n \t}\n@@ -10671,7 +10671,7 @@ fold_binary_loc (location_t loc,\n       if (TREE_CODE (arg1) == BIT_NOT_EXPR\n \t  && operand_equal_p (arg0, TREE_OPERAND (arg1, 0), 0))\n \t{\n-\t  t1 = fold_convert_loc (loc, type, integer_zero_node);\n+\t  t1 = build_zero_cst (type);\n \t  t1 = fold_unary_loc (loc, BIT_NOT_EXPR, type, t1);\n \t  return omit_one_operand_loc (loc, type, t1, arg0);\n \t}\n@@ -10801,7 +10801,7 @@ fold_binary_loc (location_t loc,\n       if (TREE_CODE (arg0) == BIT_NOT_EXPR\n \t  && operand_equal_p (TREE_OPERAND (arg0, 0), arg1, 0))\n \t{\n-\t  t1 = fold_convert_loc (loc, type, integer_zero_node);\n+\t  t1 = build_zero_cst (type);\n \t  t1 = fold_unary_loc (loc, BIT_NOT_EXPR, type, t1);\n \t  return omit_one_operand_loc (loc, type, t1, arg1);\n \t}\n@@ -10810,7 +10810,7 @@ fold_binary_loc (location_t loc,\n       if (TREE_CODE (arg1) == BIT_NOT_EXPR\n \t  && operand_equal_p (arg0, TREE_OPERAND (arg1, 0), 0))\n \t{\n-\t  t1 = fold_convert_loc (loc, type, integer_zero_node);\n+\t  t1 = build_zero_cst (type);\n \t  t1 = fold_unary_loc (loc, BIT_NOT_EXPR, type, t1);\n \t  return omit_one_operand_loc (loc, type, t1, arg0);\n \t}\n@@ -13598,7 +13598,7 @@ fold_ternary_loc (location_t loc, enum tree_code code, tree type,\n \t      if (elements)\n \t\treturn TREE_VALUE (elements);\n \t      else\n-\t\treturn fold_convert_loc (loc, type, integer_zero_node);\n+\t\treturn build_zero_cst (type);\n \t    }\n \t}\n "}, {"sha": "86e8d168df913f61d2ac87f3f82268d395e61d98", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8160c9a604ed01f38060655561a8fdf8ef854c8/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8160c9a604ed01f38060655561a8fdf8ef854c8/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e8160c9a604ed01f38060655561a8fdf8ef854c8", "patch": "@@ -1,3 +1,10 @@\n+2010-11-02  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* trans-decl.c (add_argument_checking): Use build_zero_cst instead of\n+\tfold_convert.\n+\t* trans-expr.c (gfc_conv_missing_dummy, fill_with_spaces): Likewise.\n+\t* trans-stmt.c (gfc_trans_do): Likewise.\n+\n 2010-11-02  Steven G. Kargl  < kargl@gcc.gnu.org>\n \t    Tobias Burnus  <burnus@net-b.de>\n "}, {"sha": "8e5c294b99f61b34d574c78b676fc9aa8cc558e6", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8160c9a604ed01f38060655561a8fdf8ef854c8/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8160c9a604ed01f38060655561a8fdf8ef854c8/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=e8160c9a604ed01f38060655561a8fdf8ef854c8", "patch": "@@ -4216,8 +4216,7 @@ add_argument_checking (stmtblock_t *block, gfc_symbol *sym)\n \t    not_0length = fold_build2_loc (input_location, NE_EXPR,\n \t\t\t\t\t   boolean_type_node,\n \t\t\t\t\t   cl->passed_length,\n-\t\t\t\t\t   fold_convert (gfc_charlen_type_node,\n-\t\t\t\t\t\t\t integer_zero_node));\n+\t\t\t\t\t   build_zero_cst (gfc_charlen_type_node));\n \t    /* The symbol needs to be referenced for gfc_get_symbol_decl.  */\n \t    fsym->attr.referenced = 1;\n \t    not_absent = gfc_conv_expr_present (fsym);"}, {"sha": "8da6cf0ef1331fa09951d7c43fa2f15b56460424", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8160c9a604ed01f38060655561a8fdf8ef854c8/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8160c9a604ed01f38060655561a8fdf8ef854c8/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=e8160c9a604ed01f38060655561a8fdf8ef854c8", "patch": "@@ -187,7 +187,7 @@ gfc_conv_missing_dummy (gfc_se * se, gfc_expr * arg, gfc_typespec ts, int kind)\n     {\n       tmp = build3_loc (input_location, COND_EXPR, TREE_TYPE (se->expr),\n \t\t\tpresent, se->expr,\n-\t\t\tfold_convert (TREE_TYPE (se->expr), integer_zero_node));\n+\t\t\tbuild_zero_cst (TREE_TYPE (se->expr)));\n       tmp = gfc_evaluate_now (tmp, &se->pre);\n       se->expr = tmp;\n     }\n@@ -3634,7 +3634,7 @@ fill_with_spaces (tree start, tree type, tree size)\n \n   /* Exit condition.  */\n   cond = fold_build2_loc (input_location, LE_EXPR, boolean_type_node, i,\n-\t\t\t  fold_convert (sizetype, integer_zero_node));\n+\t\t\t  build_zero_cst (sizetype));\n   tmp = build1_v (GOTO_EXPR, exit_label);\n   tmp = fold_build3_loc (input_location, COND_EXPR, void_type_node, cond, tmp,\n \t\t\t build_empty_stmt (input_location));"}, {"sha": "f065adbe0817bb7ae4c1f5eeafc1fdbbec225424", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8160c9a604ed01f38060655561a8fdf8ef854c8/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8160c9a604ed01f38060655561a8fdf8ef854c8/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=e8160c9a604ed01f38060655561a8fdf8ef854c8", "patch": "@@ -1126,7 +1126,7 @@ gfc_trans_do (gfc_code * code, tree exit_cond)\n   if (gfc_option.rtcheck & GFC_RTCHECK_DO)\n     {\n       tmp = fold_build2_loc (input_location, EQ_EXPR, boolean_type_node, step,\n-\t\t\t     fold_convert (type, integer_zero_node));\n+\t\t\t     build_zero_cst (type));\n       gfc_trans_runtime_check (true, false, tmp, &block, &code->loc,\n \t\t\t       \"DO step value is zero\");\n     }\n@@ -1138,7 +1138,7 @@ gfc_trans_do (gfc_code * code, tree exit_cond)\n     return gfc_trans_simple_do (code, &block, dovar, from, to, step, exit_cond);\n \n   pos_step = fold_build2_loc (loc, GT_EXPR, boolean_type_node, step,\n-\t\t\t      fold_convert (type, integer_zero_node));\n+\t\t\t      build_zero_cst (type));\n \n   if (TREE_CODE (type) == INTEGER_TYPE)\n     utype = unsigned_type_for (type);"}, {"sha": "e561a63fdb8fea63d325c30cebb12944e485e181", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8160c9a604ed01f38060655561a8fdf8ef854c8/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8160c9a604ed01f38060655561a8fdf8ef854c8/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=e8160c9a604ed01f38060655561a8fdf8ef854c8", "patch": "@@ -159,7 +159,7 @@ get_symbol_constant_value (tree sym)\n       if (!val\n           && (INTEGRAL_TYPE_P (TREE_TYPE (sym))\n \t       || SCALAR_FLOAT_TYPE_P (TREE_TYPE (sym))))\n-\treturn fold_convert (TREE_TYPE (sym), integer_zero_node);\n+\treturn build_zero_cst (TREE_TYPE (sym));\n     }\n \n   return NULL_TREE;"}, {"sha": "dcbb560cab199f5334f3313b9b40128b648b58e8", "filename": "gcc/gimple-low.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8160c9a604ed01f38060655561a8fdf8ef854c8/gcc%2Fgimple-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8160c9a604ed01f38060655561a8fdf8ef854c8/gcc%2Fgimple-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-low.c?ref=e8160c9a604ed01f38060655561a8fdf8ef854c8", "patch": "@@ -844,8 +844,7 @@ lower_builtin_setjmp (gimple_stmt_iterator *gsi)\n   /* Build 'DEST = 0' and insert.  */\n   if (dest)\n     {\n-      g = gimple_build_assign (dest, fold_convert_loc (loc, TREE_TYPE (dest),\n-\t\t\t\t\t\t       integer_zero_node));\n+      g = gimple_build_assign (dest, build_zero_cst (TREE_TYPE (dest)));\n       gimple_set_location (g, loc);\n       gimple_set_block (g, gimple_block (stmt));\n       gsi_insert_before (gsi, g, GSI_SAME_STMT);"}, {"sha": "1bb241a62b3488d2e35ceca3af7c2ad596139a7d", "filename": "gcc/gimple.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8160c9a604ed01f38060655561a8fdf8ef854c8/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8160c9a604ed01f38060655561a8fdf8ef854c8/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=e8160c9a604ed01f38060655561a8fdf8ef854c8", "patch": "@@ -449,7 +449,6 @@ void\n gimple_cond_get_ops_from_tree (tree cond, enum tree_code *code_p,\n                                tree *lhs_p, tree *rhs_p)\n {\n-  location_t loc = EXPR_LOCATION (cond);\n   gcc_assert (TREE_CODE_CLASS (TREE_CODE (cond)) == tcc_comparison\n \t      || TREE_CODE (cond) == TRUTH_NOT_EXPR\n \t      || is_gimple_min_invariant (cond)\n@@ -462,14 +461,14 @@ gimple_cond_get_ops_from_tree (tree cond, enum tree_code *code_p,\n     {\n       *code_p = EQ_EXPR;\n       gcc_assert (*lhs_p && *rhs_p == NULL_TREE);\n-      *rhs_p = fold_convert_loc (loc, TREE_TYPE (*lhs_p), integer_zero_node);\n+      *rhs_p = build_zero_cst (TREE_TYPE (*lhs_p));\n     }\n   /* Canonicalize conditionals of the form 'if (VAL)'  */\n   else if (TREE_CODE_CLASS (*code_p) != tcc_comparison)\n     {\n       *code_p = NE_EXPR;\n       gcc_assert (*lhs_p && *rhs_p == NULL_TREE);\n-      *rhs_p = fold_convert_loc (loc, TREE_TYPE (*lhs_p), integer_zero_node);\n+      *rhs_p = build_zero_cst (TREE_TYPE (*lhs_p));\n     }\n }\n "}, {"sha": "94a6689c61f9c235db5dc15459e07eb8df4876ea", "filename": "gcc/gimplify.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8160c9a604ed01f38060655561a8fdf8ef854c8/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8160c9a604ed01f38060655561a8fdf8ef854c8/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=e8160c9a604ed01f38060655561a8fdf8ef854c8", "patch": "@@ -3885,7 +3885,7 @@ gimplify_init_constructor (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \ti = VEC_index (constructor_elt, elts, 1)->value;\n \tif (r == NULL || i == NULL)\n \t  {\n-\t    tree zero = fold_convert (TREE_TYPE (type), integer_zero_node);\n+\t    tree zero = build_zero_cst (TREE_TYPE (type));\n \t    if (r == NULL)\n \t      r = zero;\n \t    if (i == NULL)"}, {"sha": "d54ed277a7e56d2e4991e2cb56ef2ed9b931270a", "filename": "gcc/lambda.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8160c9a604ed01f38060655561a8fdf8ef854c8/gcc%2Flambda.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8160c9a604ed01f38060655561a8fdf8ef854c8/gcc%2Flambda.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flambda.h?ref=e8160c9a604ed01f38060655561a8fdf8ef854c8", "patch": "@@ -486,7 +486,7 @@ build_linear_expr (tree type, lambda_vector coefs, VEC (tree, heap) *ivs)\n {\n   unsigned i;\n   tree iv;\n-  tree expr = fold_convert (type, integer_zero_node);\n+  tree expr = build_zero_cst (type);\n \n   for (i = 0; VEC_iterate (tree, ivs, i, iv); i++)\n     {"}, {"sha": "54c243c025c1f144a3660605cf59a92129e21ce9", "filename": "gcc/omp-low.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8160c9a604ed01f38060655561a8fdf8ef854c8/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8160c9a604ed01f38060655561a8fdf8ef854c8/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=e8160c9a604ed01f38060655561a8fdf8ef854c8", "patch": "@@ -2167,7 +2167,7 @@ omp_reduction_init (tree clause, tree type)\n     case TRUTH_ORIF_EXPR:\n     case TRUTH_XOR_EXPR:\n     case NE_EXPR:\n-      return fold_convert_loc (loc, type, integer_zero_node);\n+      return build_zero_cst (type);\n \n     case MULT_EXPR:\n     case TRUTH_AND_EXPR:"}, {"sha": "cf8a68e9f93c8cfd810e33bbf42e25942a8ff57f", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8160c9a604ed01f38060655561a8fdf8ef854c8/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8160c9a604ed01f38060655561a8fdf8ef854c8/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=e8160c9a604ed01f38060655561a8fdf8ef854c8", "patch": "@@ -242,10 +242,9 @@ remap_ssa_name (tree name, copy_body_data *id)\n \t    {\n \t      gimple_stmt_iterator gsi = gsi_last_bb (id->entry_bb);\n \t      gimple init_stmt;\n+\t      tree zero = build_zero_cst (TREE_TYPE (new_tree));\n \n-\t      init_stmt = gimple_build_assign (new_tree,\n-\t\t                               fold_convert (TREE_TYPE (new_tree),\n-\t\t\t\t\t       \t\t    integer_zero_node));\n+\t      init_stmt = gimple_build_assign (new_tree, zero);\n \t      gsi_insert_after (&gsi, init_stmt, GSI_NEW_STMT);\n \t      SSA_NAME_IS_DEFAULT_DEF (new_tree) = 0;\n \t    }"}, {"sha": "092348b28b4ebb7e2b296701062ed27543435947", "filename": "gcc/tree-object-size.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8160c9a604ed01f38060655561a8fdf8ef854c8/gcc%2Ftree-object-size.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8160c9a604ed01f38060655561a8fdf8ef854c8/gcc%2Ftree-object-size.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-object-size.c?ref=e8160c9a604ed01f38060655561a8fdf8ef854c8", "patch": "@@ -1231,8 +1231,7 @@ compute_object_sizes (void)\n \t\t\tresult = fold_convert (size_type_node,\n \t\t\t\t\t       integer_minus_one_node);\n \t\t      else if (object_size_type < 4)\n-\t\t\tresult = fold_convert (size_type_node,\n-\t\t\t\t\t       integer_zero_node);\n+\t\t\tresult = build_zero_cst (size_type_node);\n \t\t    }\n \t\t}\n "}, {"sha": "4f0d2e527d3451d3e2da01bfe54b396ebb17f64f", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8160c9a604ed01f38060655561a8fdf8ef854c8/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8160c9a604ed01f38060655561a8fdf8ef854c8/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=e8160c9a604ed01f38060655561a8fdf8ef854c8", "patch": "@@ -2324,8 +2324,7 @@ init_subtree_with_zero (struct access *access, gimple_stmt_iterator *gsi,\n       gimple stmt;\n \n       stmt = gimple_build_assign (get_access_replacement (access),\n-\t\t\t\t  fold_convert (access->type,\n-\t\t\t\t\t\tinteger_zero_node));\n+\t\t\t\t  build_zero_cst (access->type));\n       if (insert_after)\n \tgsi_insert_after (gsi, stmt, GSI_NEW_STMT);\n       else\n@@ -4098,7 +4097,7 @@ sra_ipa_modify_assign (gimple *stmt_ptr, gimple_stmt_iterator *gsi,\n \t    {\n \t      /* V_C_Es of constructors can cause trouble (PR 42714).  */\n \t      if (is_gimple_reg_type (TREE_TYPE (*lhs_p)))\n-\t\t*rhs_p = fold_convert (TREE_TYPE (*lhs_p), integer_zero_node);\n+\t\t*rhs_p = build_zero_cst (TREE_TYPE (*lhs_p));\n \t      else\n \t\t*rhs_p = build_constructor (TREE_TYPE (*lhs_p), 0);\n \t    }"}, {"sha": "68370336a76ce117e4014cac02d632800e93289f", "filename": "gcc/tree-ssa-copy.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8160c9a604ed01f38060655561a8fdf8ef854c8/gcc%2Ftree-ssa-copy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8160c9a604ed01f38060655561a8fdf8ef854c8/gcc%2Ftree-ssa-copy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copy.c?ref=e8160c9a604ed01f38060655561a8fdf8ef854c8", "patch": "@@ -246,7 +246,7 @@ propagate_tree_value_into_stmt (gimple_stmt_iterator *gsi, tree val)\n   else if (gimple_code (stmt) == GIMPLE_COND)\n     {\n       tree lhs = NULL_TREE;\n-      tree rhs = fold_convert (TREE_TYPE (val), integer_zero_node);\n+      tree rhs = build_zero_cst (TREE_TYPE (val));\n       propagate_tree_value (&lhs, val);\n       gimple_cond_set_code (stmt, NE_EXPR);\n       gimple_cond_set_lhs (stmt, lhs);"}, {"sha": "790635cf05bcb0ba1edc688b6ae296c546e30943", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8160c9a604ed01f38060655561a8fdf8ef854c8/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8160c9a604ed01f38060655561a8fdf8ef854c8/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=e8160c9a604ed01f38060655561a8fdf8ef854c8", "patch": "@@ -467,8 +467,7 @@ eliminate_duplicate_pair (enum tree_code opcode,\n \t    {\n \t      VEC_free (operand_entry_t, heap, *ops);\n \t      *ops = NULL;\n-\t      add_to_ops_vec (ops, fold_convert (TREE_TYPE (last->op),\n-\t\t\t\t\t\t integer_zero_node));\n+\t      add_to_ops_vec (ops, build_zero_cst (TREE_TYPE (last->op)));\n \t      *all_done = true;\n \t    }\n \t  else\n@@ -535,8 +534,7 @@ eliminate_plus_minus_pair (enum tree_code opcode,\n \t    }\n \n \t  VEC_ordered_remove (operand_entry_t, *ops, i);\n-\t  add_to_ops_vec (ops, fold_convert(TREE_TYPE (oe->op),\n-\t\t\t\t\t    integer_zero_node));\n+\t  add_to_ops_vec (ops, build_zero_cst (TREE_TYPE (oe->op)));\n \t  VEC_ordered_remove (operand_entry_t, *ops, currindex);\n \t  reassociate_stats.ops_eliminated ++;\n \n@@ -623,7 +621,7 @@ eliminate_not_pairs (enum tree_code opcode,\n \t    }\n \n \t  if (opcode == BIT_AND_EXPR)\n-\t    oe->op = fold_convert (TREE_TYPE (oe->op), integer_zero_node);\n+\t    oe->op = build_zero_cst (TREE_TYPE (oe->op));\n \t  else if (opcode == BIT_IOR_EXPR)\n \t    oe->op = build_low_bits_mask (TREE_TYPE (oe->op),\n \t\t\t\t\t  TYPE_PRECISION (TREE_TYPE (oe->op)));\n@@ -1177,7 +1175,7 @@ undistribute_ops_list (enum tree_code opcode,\n \t\t}\n \t      zero_one_operation (&oe2->op, c->oecode, c->op);\n \t      sum = build_and_add_sum (tmpvar, oe1->op, oe2->op, opcode);\n-\t      oe2->op = fold_convert (TREE_TYPE (oe2->op), integer_zero_node);\n+\t      oe2->op = build_zero_cst (TREE_TYPE (oe2->op));\n \t      oe2->rank = 0;\n \t      oe1->op = gimple_get_lhs (sum);\n \t    }"}, {"sha": "02613aabda190af315d28ce2f33bfec002652a24", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8160c9a604ed01f38060655561a8fdf8ef854c8/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8160c9a604ed01f38060655561a8fdf8ef854c8/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=e8160c9a604ed01f38060655561a8fdf8ef854c8", "patch": "@@ -1338,7 +1338,7 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_)\n \t  && offset2 <= offset\n \t  && offset2 + size2 >= offset + maxsize)\n \t{\n-\t  tree val = fold_convert (vr->type, integer_zero_node);\n+\t  tree val = build_zero_cst (vr->type);\n \t  unsigned int value_id = get_or_alloc_constant_value_id (val);\n \t  return vn_reference_insert_pieces (vuse, vr->set, vr->type,\n \t\t\t\t\t     VEC_copy (vn_reference_op_s,\n@@ -1361,7 +1361,7 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_)\n \t  && offset2 <= offset\n \t  && offset2 + size2 >= offset + maxsize)\n \t{\n-\t  tree val = fold_convert (vr->type, integer_zero_node);\n+\t  tree val = build_zero_cst (vr->type);\n \t  unsigned int value_id = get_or_alloc_constant_value_id (val);\n \t  return vn_reference_insert_pieces (vuse, vr->set, vr->type,\n \t\t\t\t\t     VEC_copy (vn_reference_op_s,"}, {"sha": "4961ccbccc7802b42f979d70677cbd4c14e63fb1", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8160c9a604ed01f38060655561a8fdf8ef854c8/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8160c9a604ed01f38060655561a8fdf8ef854c8/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=e8160c9a604ed01f38060655561a8fdf8ef854c8", "patch": "@@ -1580,7 +1580,7 @@ vectorizable_call (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt)\n \n   type = TREE_TYPE (scalar_dest);\n   new_stmt = gimple_build_assign (gimple_call_lhs (stmt),\n-\t\t\t\t  fold_convert (type, integer_zero_node));\n+\t\t\t\t  build_zero_cst (type));\n   set_vinfo_for_stmt (new_stmt, stmt_info);\n   set_vinfo_for_stmt (stmt, NULL);\n   STMT_VINFO_STMT (stmt_info) = new_stmt;"}, {"sha": "4a27fd28206517a6b588c33f134160bacf3648f3", "filename": "gcc/tree.c", "status": "modified", "additions": 37, "deletions": 7, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8160c9a604ed01f38060655561a8fdf8ef854c8/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8160c9a604ed01f38060655561a8fdf8ef854c8/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=e8160c9a604ed01f38060655561a8fdf8ef854c8", "patch": "@@ -1362,7 +1362,7 @@ build_vector_from_ctor (tree type, VEC(constructor_elt,gc) *v)\n     list = tree_cons (NULL_TREE, value, list);\n   for (; idx < TYPE_VECTOR_SUBPARTS (type); ++idx)\n     list = tree_cons (NULL_TREE,\n-\t\t      fold_convert (TREE_TYPE (type), integer_zero_node), list);\n+\t\t      build_zero_cst (TREE_TYPE (type)), list);\n   return build_vector (type, nreverse (list));\n }\n \n@@ -1599,22 +1599,52 @@ build_one_cst (tree type)\n     case COMPLEX_TYPE:\n       return build_complex (type,\n \t\t\t    build_one_cst (TREE_TYPE (type)),\n-\t\t\t    fold_convert (TREE_TYPE (type), integer_zero_node));\n+\t\t\t    build_zero_cst (TREE_TYPE (type)));\n \n     default:\n       gcc_unreachable ();\n     }\n }\n \n-/* Build 0 constant of type TYPE.  This is used by constructor folding and thus\n-   the constant should correspond zero in memory representation.  */\n+/* Build 0 constant of type TYPE.  This is used by constructor folding\n+   and thus the constant should be represented in memory by\n+   zero(es).  */\n \n tree\n build_zero_cst (tree type)\n {\n-  if (!AGGREGATE_TYPE_P (type))\n-    return fold_convert (type, integer_zero_node);\n-  return build_constructor (type, NULL);\n+  switch (TREE_CODE (type))\n+    {\n+    case INTEGER_TYPE: case ENUMERAL_TYPE: case BOOLEAN_TYPE:\n+    case POINTER_TYPE: case REFERENCE_TYPE:\n+    case OFFSET_TYPE:\n+      return build_int_cst (type, 0);\n+\n+    case REAL_TYPE:\n+      return build_real (type, dconst0);\n+\n+    case FIXED_POINT_TYPE:\n+      return build_fixed (type, FCONST0 (TYPE_MODE (type)));\n+\n+    case VECTOR_TYPE:\n+      {\n+\ttree scalar = build_zero_cst (TREE_TYPE (type));\n+\n+\treturn build_vector_from_val (type, scalar);\n+      }\n+\n+    case COMPLEX_TYPE:\n+      {\n+\ttree zero = build_zero_cst (TREE_TYPE (type));\n+\n+\treturn build_complex (type, zero, zero);\n+      }\n+\n+    default:\n+      if (!AGGREGATE_TYPE_P (type))\n+\treturn fold_convert (type, integer_zero_node);\n+      return build_constructor (type, NULL);\n+    }\n }\n \n "}]}