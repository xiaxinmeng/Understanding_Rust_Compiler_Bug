{"sha": "a04323f4cbc780f714ee126c1d7b3953b0c04e44", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTA0MzIzZjRjYmM3ODBmNzE0ZWUxMjZjMWQ3YjM5NTNiMGMwNGU0NA==", "commit": {"author": {"name": "Bryce McKinlay", "email": "mckinlay@redhat.com", "date": "2005-05-26T21:07:04Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2005-05-26T21:07:04Z"}, "message": "decl.c (GCJ_BINARYCOMPAT_ADDITION, [...]): Removed.\n\n2005-05-26  Bryce McKinlay  <mckinlay@redhat.com>\n\n\t* decl.c (GCJ_BINARYCOMPAT_ADDITION,\n\tGCJ_BOOTSTRAP_LOADER_ADDITION): Removed.\n\t(FLAG_BINARYCOMPAT_ABI, FLAG_BOOTSTRAP_LOADER,\n\tMINOR_BINARYCOMPAT_ABI_VERSION): New.\n\t(GCJ_CURRENT_BC_ABI_VERSION): Use new method to calculate version ID.\n\t(parse_version): Calculate version ID using new method. Use\n\tbit-flags for flag_indirect_dispatch and flag_bootstrap_classes.\n\n2005-05-26  Bryce McKinlay  <mckinlay@redhat.com>\n\n\t* include/jvm.h (FLAG_BINARYCOMPAT_ABI, FLAG_BOOTSTRAP_LOADER): New.\n\t(GCJ_BINARYCOMPAT_ADDITION, GCJ_BOOTSTRAP_LOADER_ADDITION): Removed.\n\t(OLD_GCJ_40_BC_ABI_VERSION): Renamed. Old-style version ID for\n\tBC-ABI classes.\n\t(GCJ_CXX_ABI_VERSION): Renamed from GCJ_ABI_VERSION.\n\t(GCJ_40_BC_ABI_VERSION): New. Calculate version\tIDs using new\n\tmethod.\n\t(_Jv_CheckABIVersion): Check for both old and new style version IDs.\n\t(_Jv_ClassForBootstrapLoader): Use FLAG_BOOTSTRAP_LOADER.\n\nFrom-SVN: r100222", "tree": {"sha": "d51ec085994c17aee5e6ebcd727af006310a695e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d51ec085994c17aee5e6ebcd727af006310a695e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a04323f4cbc780f714ee126c1d7b3953b0c04e44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a04323f4cbc780f714ee126c1d7b3953b0c04e44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a04323f4cbc780f714ee126c1d7b3953b0c04e44", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a04323f4cbc780f714ee126c1d7b3953b0c04e44/comments", "author": null, "committer": null, "parents": [{"sha": "b9fa227db9c8f21061285823768b73adb07cc395", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9fa227db9c8f21061285823768b73adb07cc395", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9fa227db9c8f21061285823768b73adb07cc395"}], "stats": {"total": 122, "additions": 88, "deletions": 34}, "files": [{"sha": "47b3ebe9bbb74e2ac503947f3ab105c7aac800db", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a04323f4cbc780f714ee126c1d7b3953b0c04e44/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a04323f4cbc780f714ee126c1d7b3953b0c04e44/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=a04323f4cbc780f714ee126c1d7b3953b0c04e44", "patch": "@@ -1,3 +1,13 @@\n+2005-05-26  Bryce McKinlay  <mckinlay@redhat.com>\n+\n+\t* decl.c (GCJ_BINARYCOMPAT_ADDITION, \n+\tGCJ_BOOTSTRAP_LOADER_ADDITION): Removed.\n+\t(FLAG_BINARYCOMPAT_ABI, FLAG_BOOTSTRAP_LOADER,\n+\tMINOR_BINARYCOMPAT_ABI_VERSION): New.\n+\t(GCJ_CURRENT_BC_ABI_VERSION): Use new method to calculate version ID.\n+\t(parse_version): Calculate version ID using new method. Use bit-flags\n+\tfor flag_indirect_dispatch and flag_bootstrap_classes.\n+\n 2005-05-25  Richard Henderson  <rth@redhat.com>\n \n \tPR libgcj/21692"}, {"sha": "891e4dbe40646e54f8635c0c8d8c94d63417870d", "filename": "gcc/java/decl.c", "status": "modified", "additions": 34, "deletions": 20, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a04323f4cbc780f714ee126c1d7b3953b0c04e44/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a04323f4cbc780f714ee126c1d7b3953b0c04e44/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=a04323f4cbc780f714ee126c1d7b3953b0c04e44", "patch": "@@ -61,19 +61,31 @@ static tree create_primitive_vtable (const char *);\n static tree check_local_unnamed_variable (tree, tree, tree);\n static void parse_version (void);\n \n-/* Used when computing the ABI version.  */\n-#define GCJ_BINARYCOMPAT_ADDITION 5\n \n-/* Used when defining a class that should be loaded by the bootstrap\n-   loader.  */\n-#define GCJ_BOOTSTRAP_LOADER_ADDITION 1\n+/* The following ABI flags are used in the high-order bits of the version\n+   ID field. The version ID number itself should never be larger than \n+   0xfffff, so it should be safe to use top 12 bits for these flags. */\n \n-/* The version of the BC ABI that we generate.  At the moment we are\n-   compatible with what shipped in GCC 4.0.  This must be kept in sync\n-   with parse_version(), libgcj, and reality (if the BC format\n-   changes, this must change.  */\n+#define FLAG_BINARYCOMPAT_ABI (1<<31)  /* Class is built with the BC-ABI. */\n+\n+#define FLAG_BOOTSTRAP_LOADER (1<<30)  /* Used when defining a class that \n+\t\t\t\t\t  should be loaded by the bootstrap\n+\t\t\t\t\t  loader.  */\n+\n+/* If an ABI change is made within a GCC release series, rendering current\n+   binaries incompatible with the old runtimes, this number can be set to\n+   enforce the compatibility rules. */\n+#define MINOR_BINARYCOMPAT_ABI_VERSION 0\n+\n+/* The runtime may recognize a variety of BC ABIs (objects generated by \n+   different version of gcj), but will probably always require strict \n+   matching for the ordinary (C++) ABI.  */\n+\n+/* The version ID of the BC ABI that we generate.  This must be kept in\n+   sync with parse_version(), libgcj, and reality (if the BC format changes, \n+   this must change).  */\n #define GCJ_CURRENT_BC_ABI_VERSION \\\n-  (4 * 10000 + 0 * 10 + GCJ_BINARYCOMPAT_ADDITION)\n+  (4 * 100000 + 0 * 1000 + MINOR_BINARYCOMPAT_ABI_VERSION)\n \n /* The ABI version number.  */\n tree gcj_abi_version;\n@@ -613,18 +625,20 @@ parse_version (void)\n       ++p;\n     }\n \n-  /* Implicit in this computation is the idea that we won't break the\n-     old-style binary ABI in a sub-minor release (e.g., from 4.0.0 to\n-     4.0.1).  */\n-  abi_version = 10000 * major + 10 * minor;\n-  /* It is helpful to distinguish BC ABI from ordinary ABI at this\n-     level, since at some point we will recognize a variety of BC ABIs\n-     (objects generated by different version of gcj), but will\n-     probably always require strict matching for ordinary ABI.  */\n   if (flag_indirect_dispatch)\n-    abi_version = GCJ_CURRENT_BC_ABI_VERSION;\n+    {\n+      abi_version = GCJ_CURRENT_BC_ABI_VERSION;\n+      abi_version |= FLAG_BINARYCOMPAT_ABI;\n+    }\n+  else /* C++ ABI */\n+    {\n+      /* Implicit in this computation is the idea that we won't break the\n+\t old-style binary ABI in a sub-minor release (e.g., from 4.0.0 to\n+\t 4.0.1).  */\n+      abi_version = 100000 * major + 1000 * minor;\n+    }\n   if (flag_bootstrap_classes)\n-    abi_version += GCJ_BOOTSTRAP_LOADER_ADDITION;\n+    abi_version |= FLAG_BOOTSTRAP_LOADER;\n \n   gcj_abi_version = build_int_cstu (ptr_type_node, abi_version);\n }"}, {"sha": "3fdf9e1c81c0fd7f4cc11c63b0e79c010084da47", "filename": "libjava/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a04323f4cbc780f714ee126c1d7b3953b0c04e44/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a04323f4cbc780f714ee126c1d7b3953b0c04e44/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=a04323f4cbc780f714ee126c1d7b3953b0c04e44", "patch": "@@ -1,3 +1,14 @@\n+2005-05-26  Bryce McKinlay  <mckinlay@redhat.com>\n+\n+\t* include/jvm.h (FLAG_BINARYCOMPAT_ABI, FLAG_BOOTSTRAP_LOADER): New.\n+\t(GCJ_BINARYCOMPAT_ADDITION, GCJ_BOOTSTRAP_LOADER_ADDITION): Removed.\n+\t(OLD_GCJ_40_BC_ABI_VERSION): Renamed. Old-style version ID for BC-ABI\n+\tclasses.\n+\t(GCJ_CXX_ABI_VERSION): Renamed from GCJ_ABI_VERSION.\n+\t(GCJ_40_BC_ABI_VERSION): New. Calculate version\tIDs using new method.\n+\t(_Jv_CheckABIVersion): Check for both old and new style version IDs.\n+\t(_Jv_ClassForBootstrapLoader): Use FLAG_BOOTSTRAP_LOADER. \n+\n 2005-05-25  Richard Henderson  <rth@redhat.com>\n \n \tPR libgcj/21692"}, {"sha": "3a2eb9b923e7d7548f534356450c5e130a0f9947", "filename": "libjava/include/jvm.h", "status": "modified", "additions": 33, "deletions": 14, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a04323f4cbc780f714ee126c1d7b3953b0c04e44/libjava%2Finclude%2Fjvm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a04323f4cbc780f714ee126c1d7b3953b0c04e44/libjava%2Finclude%2Fjvm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjvm.h?ref=a04323f4cbc780f714ee126c1d7b3953b0c04e44", "patch": "@@ -564,31 +564,50 @@ extern void (*_Jv_JVMPI_Notify_THREAD_END) (JVMPI_Event *event);\n \n extern void _Jv_RegisterBootstrapPackages ();\n \n+#define FLAG_BINARYCOMPAT_ABI (1<<31)  /* Class is built with the BC-ABI. */\n \n-// This is used to find ABI versions we recognize.\n-#define GCJ_VERSION (__GNUC__ * 10000 + __GNUC_MINOR__ * 10)\n-#define GCJ_BINARYCOMPAT_ADDITION 5\n-#define GCJ_BOOTSTRAP_LOADER_ADDITION 1\n+#define FLAG_BOOTSTRAP_LOADER (1<<30)  /* Used when defining a class that \n+\t\t\t\t\t  should be loaded by the bootstrap\n+\t\t\t\t\t  loader.  */\n \n-// At present we know we are compatible with the BC ABI as used in GCC\n-// 4.0.\n-#define GCJ_40_BC_ABI_VERSION (4 * 10000 + 0 * 10 + GCJ_BINARYCOMPAT_ADDITION)\n+// These are used to find ABI versions we recognize.\n+#define GCJ_CXX_ABI_VERSION (__GNUC__ * 100000 + __GNUC_MINOR__ * 1000)\n+\n+// This is the old-style BC version ID used by GCJ 4.0.0.\n+#define OLD_GCJ_40_BC_ABI_VERSION (4 * 10000 + 0 * 10 + 5)\n+\n+// New style version IDs used by GCJ 4.0.1 and later.\n+#define GCJ_40_BC_ABI_VERSION (4 * 100000 + 0 * 1000)\n \n inline bool\n _Jv_CheckABIVersion (unsigned long value)\n {\n-  // Recognize our defined C++ ABIs.\n-  return (value == GCJ_VERSION\n-\t  || value == (GCJ_VERSION + GCJ_BOOTSTRAP_LOADER_ADDITION)\n-\t  || value == GCJ_40_BC_ABI_VERSION\n-\t  || value == (GCJ_40_BC_ABI_VERSION + GCJ_BOOTSTRAP_LOADER_ADDITION));\n+  // We are compatible with GCJ 4.0.0 BC-ABI classes. This release used a\n+  // different format for the version ID string.\n+   if (value == OLD_GCJ_40_BC_ABI_VERSION)\n+     return true;\n+     \n+  // The 20 low-end bits are used for the version number.\n+  unsigned long version = value & 0xfffff;\n+\n+  if (value & FLAG_BINARYCOMPAT_ABI)\n+    {\n+      int abi_rev = version % 100;\n+      int abi_ver = version - abi_rev;\n+      if (abi_ver == GCJ_40_BC_ABI_VERSION && abi_rev <= 0)\n+        return true;\n+    }\n+  else\n+    // C++ ABI\n+    return version == GCJ_CXX_ABI_VERSION;\n+  \n+  return false;\n }\n \n inline bool\n _Jv_ClassForBootstrapLoader (unsigned long value)\n {\n-  return (value == (GCJ_VERSION + GCJ_BOOTSTRAP_LOADER_ADDITION)\n-\t  || value == (GCJ_40_BC_ABI_VERSION + GCJ_BOOTSTRAP_LOADER_ADDITION));\n+  return (value & FLAG_BOOTSTRAP_LOADER);\n }\n \n // It makes the source cleaner if we simply always define this"}]}