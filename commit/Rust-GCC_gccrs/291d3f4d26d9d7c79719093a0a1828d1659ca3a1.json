{"sha": "291d3f4d26d9d7c79719093a0a1828d1659ca3a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjkxZDNmNGQyNmQ5ZDdjNzk3MTkwOTNhMGExODI4ZDE2NTljYTNhMQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-06-28T10:22:38Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-06-28T10:22:38Z"}, "message": "dwarf2out.c (decl_scope_table): Remove.\n\n2018-06-28  Richard Biener  <rguenther@suse.de>\n\n\t* dwarf2out.c (decl_scope_table): Remove.\n\t(push_decl_scope): Likewise.\n\t(pop_decl_scope): Likewise.\n\t(gen_type_die_for_member): Do not call push/pop_decl_scope.\n\t(gen_struct_or_union_type_die): Likewise.\n\t(gen_tagged_type_die): Likewise.\n\t(dwarf2out_init): Do not initialize decl_scope_table.\n\t(dwarf2out_c_finalize): Do not free it.\n\nFrom-SVN: r262218", "tree": {"sha": "7001397c55284bdbb9dcdd7a6e26974af54e92a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7001397c55284bdbb9dcdd7a6e26974af54e92a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/291d3f4d26d9d7c79719093a0a1828d1659ca3a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/291d3f4d26d9d7c79719093a0a1828d1659ca3a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/291d3f4d26d9d7c79719093a0a1828d1659ca3a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/291d3f4d26d9d7c79719093a0a1828d1659ca3a1/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4ece5af359f35eaf4fd7434ca3b9570b9b63bea4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ece5af359f35eaf4fd7434ca3b9570b9b63bea4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ece5af359f35eaf4fd7434ca3b9570b9b63bea4"}], "stats": {"total": 60, "additions": 13, "deletions": 47}, "files": [{"sha": "45c45c485a5ec482b8416b831a47d85971a67554", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/291d3f4d26d9d7c79719093a0a1828d1659ca3a1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/291d3f4d26d9d7c79719093a0a1828d1659ca3a1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=291d3f4d26d9d7c79719093a0a1828d1659ca3a1", "patch": "@@ -1,3 +1,14 @@\n+2018-06-28  Richard Biener  <rguenther@suse.de>\n+\n+\t* dwarf2out.c (decl_scope_table): Remove.\n+\t(push_decl_scope): Likewise.\n+\t(pop_decl_scope): Likewise.\n+\t(gen_type_die_for_member): Do not call push/pop_decl_scope.\n+\t(gen_struct_or_union_type_die): Likewise.\n+\t(gen_tagged_type_die): Likewise.\n+\t(dwarf2out_init): Do not initialize decl_scope_table.\n+\t(dwarf2out_c_finalize): Do not free it.\n+\n 2018-06-28  Richard Biener  <rguenther@suse.de>\n \n \t* dwarf2out.c (gen_subprogram_die): Use is_unit_die when"}, {"sha": "a7c4620cfc31b143db2b1fc4a189df884276ccc2", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 2, "deletions": 47, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/291d3f4d26d9d7c79719093a0a1828d1659ca3a1/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/291d3f4d26d9d7c79719093a0a1828d1659ca3a1/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=291d3f4d26d9d7c79719093a0a1828d1659ca3a1", "patch": "@@ -150,13 +150,6 @@ static GTY(()) vec<rtx, va_gc> *used_rtx_array;\n    it.  */\n static GTY(()) vec<tree, va_gc> *incomplete_types;\n \n-/* A pointer to the base of a table of references to declaration\n-   scopes.  This table is a display which tracks the nesting\n-   of declaration scopes at the current scope and containing\n-   scopes.  This table is used to find the proper place to\n-   define type declaration DIE's.  */\n-static GTY(()) vec<tree, va_gc> *decl_scope_table;\n-\n /* Pointers to various DWARF2 sections.  */\n static GTY(()) section *debug_info_section;\n static GTY(()) section *debug_skeleton_info_section;\n@@ -3835,8 +3828,6 @@ static void add_name_and_src_coords_attributes (dw_die_ref, tree, bool = false);\n static void add_discr_value (dw_die_ref, dw_discr_value *);\n static void add_discr_list (dw_die_ref, dw_discr_list_ref);\n static inline dw_discr_list_ref AT_discr_list (dw_attr_node *);\n-static void push_decl_scope (tree);\n-static void pop_decl_scope (void);\n static dw_die_ref scope_die_for (tree, dw_die_ref);\n static inline int local_scope_p (dw_die_ref);\n static inline int class_scope_p (dw_die_ref);\n@@ -21361,22 +21352,6 @@ dwarf2out_vms_debug_main_pointer (void)\n }\n #endif /* VMS_DEBUGGING_INFO */\n \n-/* Push a new declaration scope.  */\n-\n-static void\n-push_decl_scope (tree scope)\n-{\n-  vec_safe_push (decl_scope_table, scope);\n-}\n-\n-/* Pop a declaration scope.  */\n-\n-static inline void\n-pop_decl_scope (void)\n-{\n-  decl_scope_table->pop ();\n-}\n-\n /* walk_tree helper function for uses_local_type, below.  */\n \n static tree\n@@ -22359,7 +22334,6 @@ gen_type_die_for_member (tree type, tree member, dw_die_ref context_die)\n       dw_die_ref type_die;\n       gcc_assert (!decl_ultimate_origin (member));\n \n-      push_decl_scope (type);\n       type_die = lookup_type_die_strip_naming_typedef (type);\n       if (TREE_CODE (member) == FUNCTION_DECL)\n \tgen_subprogram_die (member, type_die);\n@@ -22381,8 +22355,6 @@ gen_type_die_for_member (tree type, tree member, dw_die_ref context_die)\n \t}\n       else\n \tgen_variable_die (member, NULL_TREE, type_die);\n-\n-      pop_decl_scope ();\n     }\n }\n \f\n@@ -25153,9 +25125,7 @@ gen_struct_or_union_type_die (tree type, dw_die_ref context_die,\n       if (type_die->die_parent == NULL)\n \tadd_child_die (scope_die, type_die);\n \n-      push_decl_scope (type);\n       gen_member_die (type, type_die);\n-      pop_decl_scope ();\n \n       add_gnat_descriptive_type_attribute (type_die, type, context_die);\n       if (TYPE_ARTIFICIAL (type))\n@@ -25309,14 +25279,12 @@ gen_tagged_type_die (tree type,\n \t\t     dw_die_ref context_die,\n \t\t     enum debug_info_usage usage)\n {\n-  int need_pop;\n-\n   if (type == NULL_TREE\n       || !is_tagged_type (type))\n     return;\n \n   if (TREE_ASM_WRITTEN (type))\n-    need_pop = 0;\n+    ;\n   /* If this is a nested type whose containing class hasn't been written\n      out yet, writing it out will cover this one, too.  This does not apply\n      to instantiations of member class templates; they need to be added to\n@@ -25333,9 +25301,7 @@ gen_tagged_type_die (tree type,\n \treturn;\n \n       /* If that failed, attach ourselves to the stub.  */\n-      push_decl_scope (TYPE_CONTEXT (type));\n       context_die = lookup_type_die (TYPE_CONTEXT (type));\n-      need_pop = 1;\n     }\n   else if (TYPE_CONTEXT (type) != NULL_TREE\n \t   && (TREE_CODE (TYPE_CONTEXT (type)) == FUNCTION_DECL))\n@@ -25348,13 +25314,9 @@ gen_tagged_type_die (tree type,\n \t specification.  */\n       if (context_die && is_declaration_die (context_die))\n \tcontext_die = NULL;\n-      need_pop = 0;\n     }\n   else\n-    {\n-      context_die = declare_in_namespace (type, context_die);\n-      need_pop = 0;\n-    }\n+    context_die = declare_in_namespace (type, context_die);\n \n   if (TREE_CODE (type) == ENUMERAL_TYPE)\n     {\n@@ -25366,9 +25328,6 @@ gen_tagged_type_die (tree type,\n   else\n     gen_struct_or_union_type_die (type, context_die, usage);\n \n-  if (need_pop)\n-    pop_decl_scope ();\n-\n   /* Don't set TREE_ASM_WRITTEN on an incomplete struct; we want to fix\n      it up if it is ever completed.  gen_*_type_die will set it for us\n      when appropriate.  */\n@@ -28658,9 +28617,6 @@ dwarf2out_init (const char *filename ATTRIBUTE_UNUSED)\n   /* Allocate the cached_dw_loc_list_table.  */\n   cached_dw_loc_list_table = hash_table<dw_loc_list_hasher>::create_ggc (10);\n \n-  /* Allocate the initial hunk of the decl_scope_table.  */\n-  vec_alloc (decl_scope_table, 256);\n-\n   /* Allocate the initial hunk of the abbrev_die_table.  */\n   vec_alloc (abbrev_die_table, 256);\n   /* Zero-th entry is allocated, but unused.  */\n@@ -32102,7 +32058,6 @@ dwarf2out_c_finalize (void)\n   cached_next_real_insn = NULL;\n   used_rtx_array = NULL;\n   incomplete_types = NULL;\n-  decl_scope_table = NULL;\n   debug_info_section = NULL;\n   debug_skeleton_info_section = NULL;\n   debug_abbrev_section = NULL;"}]}