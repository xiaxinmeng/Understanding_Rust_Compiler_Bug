{"sha": "cb5599c77a0be19736dd8be35a1b136aa6ecee52", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2I1NTk5Yzc3YTBiZTE5NzM2ZGQ4YmUzNWExYjEzNmFhNmVjZWU1Mg==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-11-26T21:25:41Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-11-26T21:25:41Z"}, "message": "2003-11-26  Michael Koch  <konqueror@gmx.de>\n\n\t* java/net/URLStreamHandler.java\n\t(parseURL): Added comment in catch statement.\n\t(canonicalizeFilename): Add documentation.\n\t(sameURL): Completed documentation.\n\t(equals): Likewise.\n\t(hostsEqual): Likewise.\n\t(getDefaulPort): Likewise.\n\t(hashCode): Likewise.\n\t(toExternalForm): Likewise.\n\t(getHostName): Fix empty hostname check, completed documentation.\n\nFrom-SVN: r73962", "tree": {"sha": "e4146ba2af50f69872eff8eeb98f9648c60c7b25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4146ba2af50f69872eff8eeb98f9648c60c7b25"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb5599c77a0be19736dd8be35a1b136aa6ecee52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb5599c77a0be19736dd8be35a1b136aa6ecee52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb5599c77a0be19736dd8be35a1b136aa6ecee52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb5599c77a0be19736dd8be35a1b136aa6ecee52/comments", "author": null, "committer": null, "parents": [{"sha": "e0520fa7fb093b71bffb6cc76ec680b3b1730c69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0520fa7fb093b71bffb6cc76ec680b3b1730c69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0520fa7fb093b71bffb6cc76ec680b3b1730c69"}], "stats": {"total": 40, "additions": 39, "deletions": 1}, "files": [{"sha": "23d9adc1d4f83301f8f99011f2133e3c3b2701d5", "filename": "libjava/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb5599c77a0be19736dd8be35a1b136aa6ecee52/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb5599c77a0be19736dd8be35a1b136aa6ecee52/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=cb5599c77a0be19736dd8be35a1b136aa6ecee52", "patch": "@@ -1,3 +1,16 @@\n+2003-11-26  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/net/URLStreamHandler.java\n+\t(parseURL): Added comment in catch statement.\n+\t(canonicalizeFilename): Add documentation.\n+\t(sameURL): Completed documentation.\n+\t(equals): Likewise.\n+\t(hostsEqual): Likewise.\n+\t(getDefaulPort): Likewise.\n+\t(hashCode): Likewise.\n+\t(toExternalForm): Likewise.\n+\t(getHostName): Fix empty hostname check, completed documentation.\n+\n 2003-11-26  Tom Tromey  <tromey@redhat.com>\n \n \t* java/lang/natDouble.cc (parseDouble): Reverted patch of"}, {"sha": "ec2512974539f6c29f5f3c4f1b1b8382cbecdd04", "filename": "libjava/java/net/URLStreamHandler.java", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb5599c77a0be19736dd8be35a1b136aa6ecee52/libjava%2Fjava%2Fnet%2FURLStreamHandler.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb5599c77a0be19736dd8be35a1b136aa6ecee52/libjava%2Fjava%2Fnet%2FURLStreamHandler.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURLStreamHandler.java?ref=cb5599c77a0be19736dd8be35a1b136aa6ecee52", "patch": "@@ -218,6 +218,7 @@ else if (start < end)\n               }\n             catch (IOException e)\n               {\n+\t\t// Do nothing.\n               }\n           }\n \n@@ -243,6 +244,9 @@ else if (start < end)\n     setURL(url, url.getProtocol(), host, port, file, ref);\n   }\n   \n+  /*\n+   * Canonicalize a filename.\n+   */\n   private static String canonicalizeFilename(String file)\n   {\n     // XXX - GNU Classpath has an implementation that might be more appropriate\n@@ -275,6 +279,8 @@ private static String canonicalizeFilename(String file)\n    * @param url1 The first url\n    * @param url2 The second url to compare with the first\n    * \n+   * @return True if both URLs point to the same file, false otherwise.\n+   *\n    * @specnote Now protected\n    */\n   protected boolean sameFile(URL url1, URL url2)\n@@ -363,6 +369,8 @@ protected void setURL(URL u, String protocol, String host, int port,\n    *\n    * @param url1 An URL object\n    * @param url2 An URL object\n+   *\n+   * @return True if both given URLs are equal, false otherwise.\n    */\n   protected boolean equals (URL url1, URL url2)\n   {\n@@ -395,6 +403,11 @@ protected boolean equals (URL url1, URL url2)\n   /**\n    * Compares the host components of two URLs.\n    *\n+   * @param url1 The first URL.\n+   * @param url2 The second URL.\n+   *\n+   * @return True if both URLs contain the same host.\n+   *\n    * @exception UnknownHostException If an unknown host is found\n    */\n   protected boolean hostsEqual (URL url1, URL url2)\n@@ -417,12 +430,16 @@ protected boolean hostsEqual (URL url1, URL url2)\n   /**\n    * Get the IP address of our host. An empty host field or a DNS failure will\n    * result in a null return.\n+   *\n+   * @param url The URL to return the host address for.\n+   *\n+   * @return The address of the hostname in url.\n    */\n   protected InetAddress getHostAddress (URL url)\n   {\n     String hostname = url.getHost ();\n \n-    if (hostname == \"\")\n+    if (hostname.equals(\"\"))\n       return null;\n     \n     try\n@@ -438,6 +455,8 @@ protected InetAddress getHostAddress (URL url)\n   /**\n    * Returns the default port for a URL parsed by this handler. This method is\n    * meant to be overidden by handlers with default port numbers.\n+   *\n+   * @return The default port number.\n    */\n   protected int getDefaultPort ()\n   {\n@@ -447,6 +466,10 @@ protected int getDefaultPort ()\n   /**\n    * Provides the default hash calculation. May be overidden by handlers for\n    * other protocols that have different requirements for hashCode calculation.\n+   *\n+   * @param url The URL to calc the hashcode for.\n+   * \n+   * @return The hashcode for the given URL.\n    */\n   protected int hashCode (URL url)\n   {\n@@ -462,6 +485,8 @@ protected int hashCode (URL url)\n    * that have a different syntax should override this method\n    *\n    * @param url The URL object to convert\n+   *\n+   * @return A string representation of the url\n    */\n   protected String toExternalForm(URL u)\n   {"}]}