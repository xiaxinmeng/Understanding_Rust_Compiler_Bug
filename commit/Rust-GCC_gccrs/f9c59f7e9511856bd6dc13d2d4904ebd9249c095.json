{"sha": "f9c59f7e9511856bd6dc13d2d4904ebd9249c095", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjljNTlmN2U5NTExODU2YmQ2ZGMxM2QyZDQ5MDRlYmQ5MjQ5YzA5NQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-11-19T17:17:01Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-11-19T17:17:01Z"}, "message": "re PR c/66618 (Failure to diagnose non-constant initializer for static object with -O1)\n\n\tPR c/66618\n\tPR c/69960\nc-family/\n\t* c-common.h (c_fully_fold): Add LVAL argument defaulted to false.\nc/\n\t* c-parser.c (c_parser_omp_atomic): Pass true as LVAL to c_fully_fold\n\twhere needed.\n\t* c-typeck.c (build_unary_op, build_modify_expr, build_asm_expr,\n\thandle_omp_array_sections): Likewise.\n\t(digest_init): Don't call decl_constant_value_for_optimization.\n\t* c-tree.h (decl_constant_value_for_optimization): Removed.\n\t* c-fold.c (c_fold_array_ref): New function.\n\t(c_fully_fold_internal): Add LVAL argument, propagate it through\n\trecursive calls.  For VAR_P call decl_constant_value and\n\tunshare if not LVAL and either optimizing or IN_INIT.  Remove\n\tdecl_constant_value_for_optimization calls.  If IN_INIT and not LVAL,\n\tfold ARRAY_REF with STRING_CST and INTEGER_CST operands.\n\t(c_fully_fold): Add LVAL argument, pass it through to\n\tc_fully_fold_internal.\n\t(decl_constant_value_for_optimization): Removed.\ncp/\n\t* cp-gimplify.c (c_fully_fold): Add LVAL argument, call\n\tcp_fold_maybe_rvalue instead of cp_fold_rvalue and pass it !LVAL.\ntestsuite/\n\t* gcc.dg/pr69960.c: New test.\n\t* gcc.dg/pr66618.c: New test.\n\t* gcc.dg/pr66618-2.c: New test.\n\nFrom-SVN: r254930", "tree": {"sha": "418d66f5607f88d0a122bfdd9c9fe4038f93d9f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/418d66f5607f88d0a122bfdd9c9fe4038f93d9f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9c59f7e9511856bd6dc13d2d4904ebd9249c095", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9c59f7e9511856bd6dc13d2d4904ebd9249c095", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9c59f7e9511856bd6dc13d2d4904ebd9249c095", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9c59f7e9511856bd6dc13d2d4904ebd9249c095/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4397fc04e399e91fe53f0862fef41bb5b42a7c14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4397fc04e399e91fe53f0862fef41bb5b42a7c14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4397fc04e399e91fe53f0862fef41bb5b42a7c14"}], "stats": {"total": 290, "additions": 199, "deletions": 91}, "files": [{"sha": "7323a7d4c91e4535cb019bc48171ac1cb93db1bc", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9c59f7e9511856bd6dc13d2d4904ebd9249c095/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9c59f7e9511856bd6dc13d2d4904ebd9249c095/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=f9c59f7e9511856bd6dc13d2d4904ebd9249c095", "patch": "@@ -1,3 +1,9 @@\n+2017-11-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/66618\n+\tPR c/69960\n+\t* c-common.h (c_fully_fold): Add LVAL argument defaulted to false.\n+\n 2017-11-16  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c.opt (-std=c17, std=gnu17, -std=iso9899:2017): Refer to 2018"}, {"sha": "c86c6598c50c7ddc6094a13f8e1a9c4f339ee4a9", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9c59f7e9511856bd6dc13d2d4904ebd9249c095/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9c59f7e9511856bd6dc13d2d4904ebd9249c095/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=f9c59f7e9511856bd6dc13d2d4904ebd9249c095", "patch": "@@ -828,7 +828,7 @@ extern tree c_build_bitfield_integer_type (unsigned HOST_WIDE_INT, int);\n extern enum conversion_safety unsafe_conversion_p (location_t, tree, tree, tree,\n \t\t\t\t\t\t   bool);\n extern bool decl_with_nonnull_addr_p (const_tree);\n-extern tree c_fully_fold (tree, bool, bool *);\n+extern tree c_fully_fold (tree, bool, bool *, bool = false);\n extern tree c_wrap_maybe_const (tree, bool);\n extern tree c_common_truthvalue_conversion (location_t, tree);\n extern void c_apply_type_quals_to_decl (int, tree);"}, {"sha": "b10ebfc793a3ce31a5c3bc8d34cd309bbfbee882", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9c59f7e9511856bd6dc13d2d4904ebd9249c095/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9c59f7e9511856bd6dc13d2d4904ebd9249c095/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=f9c59f7e9511856bd6dc13d2d4904ebd9249c095", "patch": "@@ -1,3 +1,23 @@\n+2017-11-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/66618\n+\tPR c/69960\n+\t* c-parser.c (c_parser_omp_atomic): Pass true as LVAL to c_fully_fold\n+\twhere needed.\n+\t* c-typeck.c (build_unary_op, build_modify_expr, build_asm_expr,\n+\thandle_omp_array_sections): Likewise.\n+\t(digest_init): Don't call decl_constant_value_for_optimization.\n+\t* c-tree.h (decl_constant_value_for_optimization): Removed.\n+\t* c-fold.c (c_fold_array_ref): New function.\n+\t(c_fully_fold_internal): Add LVAL argument, propagate it through\n+\trecursive calls.  For VAR_P call decl_constant_value and\n+\tunshare if not LVAL and either optimizing or IN_INIT.  Remove\n+\tdecl_constant_value_for_optimization calls.  If IN_INIT and not LVAL,\n+\tfold ARRAY_REF with STRING_CST and INTEGER_CST operands.\n+\t(c_fully_fold): Add LVAL argument, pass it through to\n+\tc_fully_fold_internal.\n+\t(decl_constant_value_for_optimization): Removed.\n+\n 2017-11-15  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR c/81156"}, {"sha": "6a6c7163bbe89e295108c237b5d1cd65feb48f9d", "filename": "gcc/c/c-fold.c", "status": "modified", "additions": 100, "deletions": 65, "changes": 165, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9c59f7e9511856bd6dc13d2d4904ebd9249c095/gcc%2Fc%2Fc-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9c59f7e9511856bd6dc13d2d4904ebd9249c095/gcc%2Fc%2Fc-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-fold.c?ref=f9c59f7e9511856bd6dc13d2d4904ebd9249c095", "patch": "@@ -27,7 +27,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"intl.h\"\n #include \"gimplify.h\"\n \n-static tree c_fully_fold_internal (tree expr, bool, bool *, bool *, bool);\n+static tree c_fully_fold_internal (tree expr, bool, bool *, bool *, bool,\n+\t\t\t\t   bool);\n \n /* If DISABLE is true, stop issuing warnings.  This is used when\n    parsing code that we know will not be executed.  This function may\n@@ -55,6 +56,40 @@ c_enable_warnings (bool enable)\n     }\n }\n \n+/* Try to fold ARRAY_REF ary[index] if possible and not handled by\n+   normal fold, return NULL_TREE otherwise.  */\n+\n+static tree\n+c_fold_array_ref (tree type, tree ary, tree index)\n+{\n+  if (TREE_CODE (ary) != STRING_CST\n+      || TREE_CODE (index) != INTEGER_CST\n+      || TREE_OVERFLOW (index)\n+      || TREE_CODE (TREE_TYPE (ary)) != ARRAY_TYPE\n+      || !tree_fits_uhwi_p (index))\n+    return NULL_TREE;\n+\n+  tree elem_type = TREE_TYPE (TREE_TYPE (ary));\n+  unsigned elem_nchars = (TYPE_PRECISION (elem_type)\n+\t\t\t  / TYPE_PRECISION (char_type_node));\n+  unsigned len = (unsigned) TREE_STRING_LENGTH (ary) / elem_nchars;\n+  tree nelts = array_type_nelts (TREE_TYPE (ary));\n+  bool dummy1 = true, dummy2 = true;\n+  nelts = c_fully_fold_internal (nelts, true, &dummy1, &dummy2, false, false);\n+  unsigned HOST_WIDE_INT i = tree_to_uhwi (index);\n+  if (!tree_int_cst_le (index, nelts)\n+      || i >= len\n+      || i + elem_nchars > len)\n+    return NULL_TREE;\n+\n+  if (elem_nchars == 1)\n+    return build_int_cst (type, TREE_STRING_POINTER (ary)[i]);\n+\n+  const unsigned char *ptr\n+    = ((const unsigned char *)TREE_STRING_POINTER (ary) + i * elem_nchars);\n+  return native_interpret_expr (type, ptr, elem_nchars);\n+}\n+\n /* Fully fold EXPR, an expression that was not folded (beyond integer\n    constant expressions and null pointer constants) when being built\n    up.  If IN_INIT, this is in a static initializer and certain\n@@ -68,10 +103,11 @@ c_enable_warnings (bool enable)\n    folded expression.  Function arguments have already been folded\n    before calling this function, as have the contents of SAVE_EXPR,\n    TARGET_EXPR, BIND_EXPR, VA_ARG_EXPR, OBJ_TYPE_REF and\n-   C_MAYBE_CONST_EXPR.  */\n+   C_MAYBE_CONST_EXPR.  LVAL is true if it should be treated as an\n+   lvalue.  */\n \n tree\n-c_fully_fold (tree expr, bool in_init, bool *maybe_const)\n+c_fully_fold (tree expr, bool in_init, bool *maybe_const, bool lval)\n {\n   tree ret;\n   tree eptype = NULL_TREE;\n@@ -87,7 +123,7 @@ c_fully_fold (tree expr, bool in_init, bool *maybe_const)\n       expr = TREE_OPERAND (expr, 0);\n     }\n   ret = c_fully_fold_internal (expr, in_init, maybe_const,\n-\t\t\t       &maybe_const_itself, false);\n+\t\t\t       &maybe_const_itself, false, lval);\n   if (eptype)\n     ret = fold_convert_loc (loc, eptype, ret);\n   *maybe_const &= maybe_const_itself;\n@@ -102,11 +138,13 @@ c_fully_fold (tree expr, bool in_init, bool *maybe_const)\n    *MAYBE_CONST_ITSELF is carried from only evaluated\n    subexpressions).  FOR_INT_CONST indicates if EXPR is an expression\n    with integer constant operands, and if any of the operands doesn't\n-   get folded to an integer constant, don't fold the expression itself.  */\n+   get folded to an integer constant, don't fold the expression itself.\n+   LVAL indicates folding of lvalue, where we can't replace it with\n+   an rvalue.  */\n \n static tree\n c_fully_fold_internal (tree expr, bool in_init, bool *maybe_const_operands,\n-\t\t       bool *maybe_const_itself, bool for_int_const)\n+\t\t       bool *maybe_const_itself, bool for_int_const, bool lval)\n {\n   tree ret = expr;\n   enum tree_code code = TREE_CODE (expr);\n@@ -118,14 +156,27 @@ c_fully_fold_internal (tree expr, bool in_init, bool *maybe_const_operands,\n   bool op0_const_self = true, op1_const_self = true, op2_const_self = true;\n   bool nowarning = TREE_NO_WARNING (expr);\n   bool unused_p;\n+  bool op0_lval = false;\n   source_range old_range;\n \n   /* Constants, declarations, statements, errors, and anything else not\n      counted as an expression cannot usefully be folded further at this\n      point.  */\n-  if (!IS_EXPR_CODE_CLASS (kind)\n-      || kind == tcc_statement)\n-    return expr;\n+  if (!IS_EXPR_CODE_CLASS (kind) || kind == tcc_statement)\n+    {\n+      /* Except for variables which we can optimize to its initializer.  */\n+      if (VAR_P (expr) && !lval && (optimize || in_init))\n+\t{\n+\t  ret = decl_constant_value (expr);\n+\t  /* Avoid unwanted tree sharing between the initializer and current\n+\t     function's body where the tree can be modified e.g. by the\n+\t     gimplifier.  */\n+\t  if (ret != expr && TREE_STATIC (expr))\n+\t    ret = unshare_expr (ret);\n+\t  return ret;\n+\t}\n+      return expr;\n+    }\n \n   if (IS_EXPR_CODE_CLASS (kind))\n     old_range = EXPR_LOCATION_RANGE (expr);\n@@ -150,7 +201,7 @@ c_fully_fold_internal (tree expr, bool in_init, bool *maybe_const_operands,\n \t{\n \t  *maybe_const_itself = false;\n \t  inner = c_fully_fold_internal (inner, in_init, maybe_const_operands,\n-\t\t\t\t\t maybe_const_itself, true);\n+\t\t\t\t\t maybe_const_itself, true, lval);\n \t}\n       if (pre && !in_init)\n \tret = build2 (COMPOUND_EXPR, TREE_TYPE (expr), pre, inner);\n@@ -201,7 +252,7 @@ c_fully_fold_internal (tree expr, bool in_init, bool *maybe_const_operands,\n       op1 = TREE_OPERAND (expr, 1);\n       op2 = TREE_OPERAND (expr, 2);\n       op0 = c_fully_fold_internal (op0, in_init, maybe_const_operands,\n-\t\t\t\t   maybe_const_itself, for_int_const);\n+\t\t\t\t   maybe_const_itself, for_int_const, lval);\n       STRIP_TYPE_NOPS (op0);\n       if (op0 != orig_op0)\n \tret = build3 (COMPONENT_REF, TREE_TYPE (expr), op0, op1, op2);\n@@ -218,12 +269,19 @@ c_fully_fold_internal (tree expr, bool in_init, bool *maybe_const_operands,\n       op2 = TREE_OPERAND (expr, 2);\n       op3 = TREE_OPERAND (expr, 3);\n       op0 = c_fully_fold_internal (op0, in_init, maybe_const_operands,\n-\t\t\t\t   maybe_const_itself, for_int_const);\n+\t\t\t\t   maybe_const_itself, for_int_const, lval);\n       STRIP_TYPE_NOPS (op0);\n       op1 = c_fully_fold_internal (op1, in_init, maybe_const_operands,\n-\t\t\t\t   maybe_const_itself, for_int_const);\n+\t\t\t\t   maybe_const_itself, for_int_const, false);\n       STRIP_TYPE_NOPS (op1);\n-      op1 = decl_constant_value_for_optimization (op1);\n+      /* Fold \"foo\"[2] in initializers.  */\n+      if (!lval && in_init)\n+\t{\n+\t  ret = c_fold_array_ref (TREE_TYPE (expr), op0, op1);\n+\t  if (ret)\n+\t    goto out;\n+\t  ret = expr;\n+\t}\n       if (op0 != orig_op0 || op1 != orig_op1)\n \tret = build4 (ARRAY_REF, TREE_TYPE (expr), op0, op1, op2, op3);\n       if (ret != expr)\n@@ -232,15 +290,18 @@ c_fully_fold_internal (tree expr, bool in_init, bool *maybe_const_operands,\n \t  TREE_SIDE_EFFECTS (ret) = TREE_SIDE_EFFECTS (expr);\n \t  TREE_THIS_VOLATILE (ret) = TREE_THIS_VOLATILE (expr);\n \t}\n-      ret = fold (ret);\n+      if (!lval)\n+\tret = fold (ret);\n       goto out;\n \n-    case COMPOUND_EXPR:\n     case MODIFY_EXPR:\n     case PREDECREMENT_EXPR:\n     case PREINCREMENT_EXPR:\n     case POSTDECREMENT_EXPR:\n     case POSTINCREMENT_EXPR:\n+      op0_lval = true;\n+      /* FALLTHRU */\n+    case COMPOUND_EXPR:\n     case PLUS_EXPR:\n     case MINUS_EXPR:\n     case MULT_EXPR:\n@@ -278,21 +339,15 @@ c_fully_fold_internal (tree expr, bool in_init, bool *maybe_const_operands,\n       orig_op0 = op0 = TREE_OPERAND (expr, 0);\n       orig_op1 = op1 = TREE_OPERAND (expr, 1);\n       op0 = c_fully_fold_internal (op0, in_init, maybe_const_operands,\n-\t\t\t\t   maybe_const_itself, for_int_const);\n+\t\t\t\t   maybe_const_itself, for_int_const,\n+\t\t\t\t   op0_lval);\n       STRIP_TYPE_NOPS (op0);\n-      if (code != MODIFY_EXPR\n-\t  && code != PREDECREMENT_EXPR\n-\t  && code != PREINCREMENT_EXPR\n-\t  && code != POSTDECREMENT_EXPR\n-\t  && code != POSTINCREMENT_EXPR)\n-\top0 = decl_constant_value_for_optimization (op0);\n       /* The RHS of a MODIFY_EXPR was fully folded when building that\n \t expression for the sake of conversion warnings.  */\n       if (code != MODIFY_EXPR)\n \top1 = c_fully_fold_internal (op1, in_init, maybe_const_operands,\n-\t\t\t\t     maybe_const_itself, for_int_const);\n+\t\t\t\t     maybe_const_itself, for_int_const, false);\n       STRIP_TYPE_NOPS (op1);\n-      op1 = decl_constant_value_for_optimization (op1);\n \n       if (for_int_const && (TREE_CODE (op0) != INTEGER_CST\n \t\t\t    || TREE_CODE (op1) != INTEGER_CST))\n@@ -370,6 +425,13 @@ c_fully_fold_internal (tree expr, bool in_init, bool *maybe_const_operands,\n \twarn_for_div_by_zero (loc, op1);\n       goto out;\n \n+    case ADDR_EXPR:\n+      op0_lval = true;\n+      goto unary;\n+    case REALPART_EXPR:\n+    case IMAGPART_EXPR:\n+      op0_lval = lval;\n+      /* FALLTHRU */\n     case INDIRECT_REF:\n     case FIX_TRUNC_EXPR:\n     case FLOAT_EXPR:\n@@ -380,17 +442,14 @@ c_fully_fold_internal (tree expr, bool in_init, bool *maybe_const_operands,\n     case NEGATE_EXPR:\n     case BIT_NOT_EXPR:\n     case TRUTH_NOT_EXPR:\n-    case ADDR_EXPR:\n     case CONJ_EXPR:\n-    case REALPART_EXPR:\n-    case IMAGPART_EXPR:\n+    unary:\n       /* Unary operations.  */\n       orig_op0 = op0 = TREE_OPERAND (expr, 0);\n       op0 = c_fully_fold_internal (op0, in_init, maybe_const_operands,\n-\t\t\t\t   maybe_const_itself, for_int_const);\n+\t\t\t\t   maybe_const_itself, for_int_const,\n+\t\t\t\t   op0_lval);\n       STRIP_TYPE_NOPS (op0);\n-      if (code != ADDR_EXPR && code != REALPART_EXPR && code != IMAGPART_EXPR)\n-\top0 = decl_constant_value_for_optimization (op0);\n \n       if (for_int_const && TREE_CODE (op0) != INTEGER_CST)\n \tgoto out;\n@@ -440,15 +499,15 @@ c_fully_fold_internal (tree expr, bool in_init, bool *maybe_const_operands,\n       orig_op0 = op0 = TREE_OPERAND (expr, 0);\n       orig_op1 = op1 = TREE_OPERAND (expr, 1);\n       op0 = c_fully_fold_internal (op0, in_init, &op0_const, &op0_const_self,\n-\t\t\t\t   for_int_const);\n+\t\t\t\t   for_int_const, false);\n       STRIP_TYPE_NOPS (op0);\n \n       unused_p = (op0 == (code == TRUTH_ANDIF_EXPR\n \t\t\t  ? truthvalue_false_node\n \t\t\t  : truthvalue_true_node));\n       c_disable_warnings (unused_p);\n       op1 = c_fully_fold_internal (op1, in_init, &op1_const, &op1_const_self,\n-\t\t\t\t   for_int_const);\n+\t\t\t\t   for_int_const, false);\n       STRIP_TYPE_NOPS (op1);\n       c_enable_warnings (unused_p);\n \n@@ -486,18 +545,18 @@ c_fully_fold_internal (tree expr, bool in_init, bool *maybe_const_operands,\n       orig_op1 = op1 = TREE_OPERAND (expr, 1);\n       orig_op2 = op2 = TREE_OPERAND (expr, 2);\n       op0 = c_fully_fold_internal (op0, in_init, &op0_const, &op0_const_self,\n-\t\t\t\t   for_int_const);\n+\t\t\t\t   for_int_const, false);\n \n       STRIP_TYPE_NOPS (op0);\n       c_disable_warnings (op0 == truthvalue_false_node);\n       op1 = c_fully_fold_internal (op1, in_init, &op1_const, &op1_const_self,\n-\t\t\t\t   for_int_const);\n+\t\t\t\t   for_int_const, false);\n       STRIP_TYPE_NOPS (op1);\n       c_enable_warnings (op0 == truthvalue_false_node);\n \n       c_disable_warnings (op0 == truthvalue_true_node);\n       op2 = c_fully_fold_internal (op2, in_init, &op2_const, &op2_const_self,\n-\t\t\t\t   for_int_const);\n+\t\t\t\t   for_int_const, false);\n       STRIP_TYPE_NOPS (op2);\n       c_enable_warnings (op0 == truthvalue_true_node);\n \n@@ -540,13 +599,13 @@ c_fully_fold_internal (tree expr, bool in_init, bool *maybe_const_operands,\n       orig_op1 = op1 = TREE_OPERAND (expr, 1);\n       orig_op2 = op2 = TREE_OPERAND (expr, 2);\n       op0 = c_fully_fold_internal (op0, in_init, maybe_const_operands,\n-\t\t\t\t   maybe_const_itself, for_int_const);\n+\t\t\t\t   maybe_const_itself, for_int_const, false);\n       STRIP_TYPE_NOPS (op0);\n       op1 = c_fully_fold_internal (op1, in_init, maybe_const_operands,\n-\t\t\t\t   maybe_const_itself, for_int_const);\n+\t\t\t\t   maybe_const_itself, for_int_const, false);\n       STRIP_TYPE_NOPS (op1);\n       op2 = c_fully_fold_internal (op2, in_init, maybe_const_operands,\n-\t\t\t\t   maybe_const_itself, for_int_const);\n+\t\t\t\t   maybe_const_itself, for_int_const, false);\n       STRIP_TYPE_NOPS (op2);\n \n       if (op0 != orig_op0 || op1 != orig_op1 || op2 != orig_op2)\n@@ -570,7 +629,8 @@ c_fully_fold_internal (tree expr, bool in_init, bool *maybe_const_operands,\n       if (!SAVE_EXPR_FOLDED_P (expr))\n \t{\n \t  op0 = c_fully_fold_internal (op0, in_init, maybe_const_operands,\n-\t\t\t\t       maybe_const_itself, for_int_const);\n+\t\t\t\t       maybe_const_itself, for_int_const,\n+\t\t\t\t       false);\n \t  TREE_OPERAND (expr, 0) = op0;\n \t  SAVE_EXPR_FOLDED_P (expr) = true;\n \t}\n@@ -604,28 +664,3 @@ c_fully_fold_internal (tree expr, bool in_init, bool *maybe_const_operands,\n     }\n   return ret;\n }\n-\n-/* If not optimizing, EXP is not a VAR_DECL, or EXP has array type,\n-   return EXP.  Otherwise, return either EXP or its known constant\n-   value (if it has one), but return EXP if EXP has mode BLKmode.  ???\n-   Is the BLKmode test appropriate?  */\n-\n-tree\n-decl_constant_value_for_optimization (tree exp)\n-{\n-  tree ret;\n-\n-  if (!optimize\n-      || !VAR_P (exp)\n-      || TREE_CODE (TREE_TYPE (exp)) == ARRAY_TYPE\n-      || DECL_MODE (exp) == BLKmode)\n-    return exp;\n-\n-  ret = decl_constant_value (exp);\n-  /* Avoid unwanted tree sharing between the initializer and current\n-     function's body where the tree can be modified e.g. by the\n-     gimplifier.  */\n-  if (ret != exp && TREE_STATIC (exp))\n-    ret = unshare_expr (ret);\n-  return ret;\n-}"}, {"sha": "bd5dd5799a060c106807f7fa4f872722085a7d73", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9c59f7e9511856bd6dc13d2d4904ebd9249c095/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9c59f7e9511856bd6dc13d2d4904ebd9249c095/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=f9c59f7e9511856bd6dc13d2d4904ebd9249c095", "patch": "@@ -15312,7 +15312,7 @@ c_parser_omp_atomic (location_t loc, c_parser *parser)\n     case NOP_EXPR: /* atomic write */\n       v = c_parser_cast_expression (parser, NULL).value;\n       non_lvalue_p = !lvalue_p (v);\n-      v = c_fully_fold (v, false, NULL);\n+      v = c_fully_fold (v, false, NULL, true);\n       if (v == error_mark_node)\n \tgoto saw_error;\n       if (non_lvalue_p)\n@@ -15331,7 +15331,7 @@ c_parser_omp_atomic (location_t loc, c_parser *parser)\n \t{\n \t  lhs = c_parser_cast_expression (parser, NULL).value;\n \t  non_lvalue_p = !lvalue_p (lhs);\n-\t  lhs = c_fully_fold (lhs, false, NULL);\n+\t  lhs = c_fully_fold (lhs, false, NULL, true);\n \t  if (lhs == error_mark_node)\n \t    goto saw_error;\n \t  if (non_lvalue_p)\n@@ -15357,7 +15357,7 @@ c_parser_omp_atomic (location_t loc, c_parser *parser)\n \t{\n \t  v = c_parser_cast_expression (parser, NULL).value;\n \t  non_lvalue_p = !lvalue_p (v);\n-\t  v = c_fully_fold (v, false, NULL);\n+\t  v = c_fully_fold (v, false, NULL, true);\n \t  if (v == error_mark_node)\n \t    goto saw_error;\n \t  if (non_lvalue_p)\n@@ -15378,7 +15378,7 @@ c_parser_omp_atomic (location_t loc, c_parser *parser)\n   lhs = expr.value;\n   expr = default_function_array_conversion (eloc, expr);\n   unfolded_lhs = expr.value;\n-  lhs = c_fully_fold (lhs, false, NULL);\n+  lhs = c_fully_fold (lhs, false, NULL, true);\n   orig_lhs = lhs;\n   switch (TREE_CODE (lhs))\n     {\n@@ -15518,15 +15518,19 @@ c_parser_omp_atomic (location_t loc, c_parser *parser)\n \t      if (c_tree_equal (TREE_OPERAND (rhs1, 0), unfolded_lhs))\n \t\t{\n \t\t  opcode = TREE_CODE (rhs1);\n-\t\t  rhs = c_fully_fold (TREE_OPERAND (rhs1, 1), false, NULL);\n-\t\t  rhs1 = c_fully_fold (TREE_OPERAND (rhs1, 0), false, NULL);\n+\t\t  rhs = c_fully_fold (TREE_OPERAND (rhs1, 1), false, NULL,\n+\t\t\t\t      true);\n+\t\t  rhs1 = c_fully_fold (TREE_OPERAND (rhs1, 0), false, NULL,\n+\t\t\t\t       true);\n \t\t  goto stmt_done;\n \t\t}\n \t      if (c_tree_equal (TREE_OPERAND (rhs1, 1), unfolded_lhs))\n \t\t{\n \t\t  opcode = TREE_CODE (rhs1);\n-\t\t  rhs = c_fully_fold (TREE_OPERAND (rhs1, 0), false, NULL);\n-\t\t  rhs1 = c_fully_fold (TREE_OPERAND (rhs1, 1), false, NULL);\n+\t\t  rhs = c_fully_fold (TREE_OPERAND (rhs1, 0), false, NULL,\n+\t\t\t\t      true);\n+\t\t  rhs1 = c_fully_fold (TREE_OPERAND (rhs1, 1), false, NULL,\n+\t\t\t\t       true);\n \t\t  swapped = !commutative_tree_code (opcode);\n \t\t  goto stmt_done;\n \t\t}\n@@ -15545,7 +15549,7 @@ c_parser_omp_atomic (location_t loc, c_parser *parser)\n \t\t  lhs = NULL_TREE;\n \t\t  expr = default_function_array_read_conversion (eloc, expr);\n \t\t  unfolded_lhs1 = expr.value;\n-\t\t  lhs1 = c_fully_fold (unfolded_lhs1, false, NULL);\n+\t\t  lhs1 = c_fully_fold (unfolded_lhs1, false, NULL, true);\n \t\t  rhs1 = NULL_TREE;\n \t\t  c_parser_consume_token (parser);\n \t\t  goto restart;\n@@ -15554,7 +15558,7 @@ c_parser_omp_atomic (location_t loc, c_parser *parser)\n \t\t{\n \t\t  opcode = NOP_EXPR;\n \t\t  expr = default_function_array_read_conversion (eloc, expr);\n-\t\t  rhs = c_fully_fold (expr.value, false, NULL);\n+\t\t  rhs = c_fully_fold (expr.value, false, NULL, true);\n \t\t  rhs1 = NULL_TREE;\n \t\t  goto stmt_done;\n \t\t}\n@@ -15575,7 +15579,7 @@ c_parser_omp_atomic (location_t loc, c_parser *parser)\n       expr = c_parser_expression (parser);\n       expr = default_function_array_read_conversion (eloc, expr);\n       rhs = expr.value;\n-      rhs = c_fully_fold (rhs, false, NULL);\n+      rhs = c_fully_fold (rhs, false, NULL, true);\n       break;\n     }\n stmt_done:\n@@ -15585,7 +15589,7 @@ c_parser_omp_atomic (location_t loc, c_parser *parser)\n \tgoto saw_error;\n       v = c_parser_cast_expression (parser, NULL).value;\n       non_lvalue_p = !lvalue_p (v);\n-      v = c_fully_fold (v, false, NULL);\n+      v = c_fully_fold (v, false, NULL, true);\n       if (v == error_mark_node)\n \tgoto saw_error;\n       if (non_lvalue_p)\n@@ -15597,7 +15601,7 @@ c_parser_omp_atomic (location_t loc, c_parser *parser)\n       lhs1 = expr.value;\n       expr = default_function_array_read_conversion (eloc, expr);\n       unfolded_lhs1 = expr.value;\n-      lhs1 = c_fully_fold (lhs1, false, NULL);\n+      lhs1 = c_fully_fold (lhs1, false, NULL, true);\n       if (lhs1 == error_mark_node)\n \tgoto saw_error;\n       if (!lvalue_p (unfolded_lhs1))"}, {"sha": "5fb57f21bd19bf1e526366dc033b328248f15ebf", "filename": "gcc/c/c-tree.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9c59f7e9511856bd6dc13d2d4904ebd9249c095/gcc%2Fc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9c59f7e9511856bd6dc13d2d4904ebd9249c095/gcc%2Fc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-tree.h?ref=f9c59f7e9511856bd6dc13d2d4904ebd9249c095", "patch": "@@ -770,8 +770,6 @@ set_c_expr_source_range (c_expr *expr,\n \t\t\t source_range src_range);\n \n /* In c-fold.c */\n-extern tree decl_constant_value_for_optimization (tree);\n-\n extern vec<tree> incomplete_record_decls;\n \n #if CHECKING_P"}, {"sha": "8a09ea2ea460963a2948901950d39199138e78b7", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9c59f7e9511856bd6dc13d2d4904ebd9249c095/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9c59f7e9511856bd6dc13d2d4904ebd9249c095/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=f9c59f7e9511856bd6dc13d2d4904ebd9249c095", "patch": "@@ -4398,7 +4398,7 @@ build_unary_op (location_t location, enum tree_code code, tree xarg,\n \t}\n \n       /* Ensure the argument is fully folded inside any SAVE_EXPR.  */\n-      arg = c_fully_fold (arg, false, NULL);\n+      arg = c_fully_fold (arg, false, NULL, true);\n \n       bool atomic_op;\n       atomic_op = really_atomic_lvalue (arg);\n@@ -5822,7 +5822,7 @@ build_modify_expr (location_t location, tree lhs, tree lhs_origtype,\n \n   if (modifycode != NOP_EXPR)\n     {\n-      lhs = c_fully_fold (lhs, false, NULL);\n+      lhs = c_fully_fold (lhs, false, NULL, true);\n       lhs = stabilize_reference (lhs);\n \n       /* Construct the RHS for any non-atomic compound assignemnt. */\n@@ -7289,7 +7289,6 @@ digest_init (location_t init_loc, tree type, tree init, tree origtype,\n       inside_init = TREE_OPERAND (inside_init, 0);\n     }\n   inside_init = c_fully_fold (inside_init, require_constant, &maybe_const);\n-  inside_init = decl_constant_value_for_optimization (inside_init);\n \n   /* Initialization of an array of chars from a string constant\n      optionally enclosed in braces.  */\n@@ -9899,7 +9898,7 @@ build_asm_expr (location_t loc, tree string, tree outputs, tree inputs,\n     {\n       tree output = TREE_VALUE (tail);\n \n-      output = c_fully_fold (output, false, NULL);\n+      output = c_fully_fold (output, false, NULL, true);\n \n       /* ??? Really, this should not be here.  Users should be using a\n \t proper lvalue, dammit.  But there's a long history of using casts\n@@ -9957,7 +9956,7 @@ build_asm_expr (location_t loc, tree string, tree outputs, tree inputs,\n \t     mark it addressable.  */\n \t  if (!allows_reg && allows_mem)\n \t    {\n-\t      input = c_fully_fold (input, false, NULL);\n+\t      input = c_fully_fold (input, false, NULL, true);\n \n \t      /* Strip the nops as we allow this case.  FIXME, this really\n \t\t should be rejected or made deprecated.  */\n@@ -12723,7 +12722,7 @@ handle_omp_array_sections (tree c, enum c_omp_region_type ort)\n \t}\n       if (tem)\n \tfirst = build2 (COMPOUND_EXPR, TREE_TYPE (first), tem, first);\n-      first = c_fully_fold (first, false, NULL);\n+      first = c_fully_fold (first, false, NULL, true);\n       OMP_CLAUSE_DECL (c) = first;\n     }\n   else"}, {"sha": "410b18b42fd8599855a9c90a024789738c4ef6ee", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9c59f7e9511856bd6dc13d2d4904ebd9249c095/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9c59f7e9511856bd6dc13d2d4904ebd9249c095/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f9c59f7e9511856bd6dc13d2d4904ebd9249c095", "patch": "@@ -1,3 +1,10 @@\n+2017-11-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/66618\n+\tPR c/69960\n+\t* cp-gimplify.c (c_fully_fold): Add LVAL argument, call\n+\tcp_fold_maybe_rvalue instead of cp_fold_rvalue and pass it !LVAL.\n+\n 2017-11-16  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/79092 - non-type args of different types are different"}, {"sha": "8849f9d3735ed18d9bbf3ff47d8b311e74354b53", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9c59f7e9511856bd6dc13d2d4904ebd9249c095/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9c59f7e9511856bd6dc13d2d4904ebd9249c095/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=f9c59f7e9511856bd6dc13d2d4904ebd9249c095", "patch": "@@ -2048,11 +2048,9 @@ cp_fully_fold (tree x)\n    C_MAYBE_CONST_EXPR.  */\n \n tree\n-c_fully_fold (tree x, bool /*in_init*/, bool */*maybe_const*/)\n+c_fully_fold (tree x, bool /*in_init*/, bool */*maybe_const*/, bool lval)\n {\n-  /* c_fully_fold is only used on rvalues, and we need to fold CONST_DECL to\n-     INTEGER_CST.  */\n-  return cp_fold_rvalue (x);\n+  return cp_fold_maybe_rvalue (x, !lval);\n }\n \n static GTY((deletable)) hash_map<tree, tree> *fold_cache;"}, {"sha": "705730b57067bc22cce6fab1d8a82c358f037d63", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9c59f7e9511856bd6dc13d2d4904ebd9249c095/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9c59f7e9511856bd6dc13d2d4904ebd9249c095/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f9c59f7e9511856bd6dc13d2d4904ebd9249c095", "patch": "@@ -1,3 +1,11 @@\n+2017-11-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/66618\n+\tPR c/69960\n+\t* gcc.dg/pr69960.c: New test.\n+\t* gcc.dg/pr66618.c: New test.\n+\t* gcc.dg/pr66618-2.c: New test.\n+\n 2017-11-18  Janne Blomqvist  <jb@gcc.gnu.org>\n \n \tPR fortran/44292"}, {"sha": "3cb2e44c378c5b5ccd831ecd468af92c4c5dbaf1", "filename": "gcc/testsuite/gcc.dg/pr66618-2.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9c59f7e9511856bd6dc13d2d4904ebd9249c095/gcc%2Ftestsuite%2Fgcc.dg%2Fpr66618-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9c59f7e9511856bd6dc13d2d4904ebd9249c095/gcc%2Ftestsuite%2Fgcc.dg%2Fpr66618-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr66618-2.c?ref=f9c59f7e9511856bd6dc13d2d4904ebd9249c095", "patch": "@@ -0,0 +1,10 @@\n+/* PR c/66618 */\n+/* { dg-do compile } */\n+/* { dg-options \"-pedantic-errors\" } */\n+\n+int a = \"foo\"[2];\n+int b = 1[\"bar\"];\n+int c = \"baz\"[__INT_MAX__ * -2];\t/* { dg-error \"initializer element is not constant\" } */\n+int d = \"str\"[3];\t\t\t/* { dg-warning \"integer overflow in expression of type\" \"\" { target *-*-* } .-1 } */\n+int e = \"str\"[4];\t\t\t/* { dg-error \"initializer element is not constant\" } */\n+int f = \"str\"[-1];\t\t\t/* { dg-error \"initializer element is not constant\" } */"}, {"sha": "649d4f652dfdb6e6135dc7a3461df7df072ef65c", "filename": "gcc/testsuite/gcc.dg/pr66618.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9c59f7e9511856bd6dc13d2d4904ebd9249c095/gcc%2Ftestsuite%2Fgcc.dg%2Fpr66618.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9c59f7e9511856bd6dc13d2d4904ebd9249c095/gcc%2Ftestsuite%2Fgcc.dg%2Fpr66618.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr66618.c?ref=f9c59f7e9511856bd6dc13d2d4904ebd9249c095", "patch": "@@ -0,0 +1,11 @@\n+/* PR c/66618 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O0\" } */\n+\n+int\n+foo (void)\n+{\n+  const int a = 0;\n+  static int b = a;\t/* { dg-bogus \"initializer element is not constant\" } */\n+  return b;\n+}"}, {"sha": "e339d30b4359cd07ace082074aa2c7d2b12b40a6", "filename": "gcc/testsuite/gcc.dg/pr69960.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9c59f7e9511856bd6dc13d2d4904ebd9249c095/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69960.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9c59f7e9511856bd6dc13d2d4904ebd9249c095/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69960.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69960.c?ref=f9c59f7e9511856bd6dc13d2d4904ebd9249c095", "patch": "@@ -0,0 +1,12 @@\n+/* PR c/69960 */\n+/* { dg-do compile { target int32plus } } */\n+\n+#define TOLOWER(x) (x&~0x20)\n+#define Word(s) \\\n+  s[1] ? s[2] ? s[3] ? \\\n+    (TOLOWER(s[0]) << 24) + (TOLOWER(s[1]) << 16) + (TOLOWER(s[2]) << 8) + TOLOWER(s[3]) : \\\n+    (TOLOWER(s[0]) << 16) + (TOLOWER(s[1]) << 8) + TOLOWER(s[2]) : \\\n+    (TOLOWER(s[0]) << 8) + TOLOWER(s[1]) : \\\n+    TOLOWER(s[0])\n+\n+const unsigned int _the = Word(\"the\");"}]}