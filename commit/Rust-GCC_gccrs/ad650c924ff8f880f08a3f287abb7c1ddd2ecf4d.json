{"sha": "ad650c924ff8f880f08a3f287abb7c1ddd2ecf4d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQ2NTBjOTI0ZmY4Zjg4MGYwOGEzZjI4N2FiYjdjMWRkZDJlY2Y0ZA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-07-20T11:28:56Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-07-20T11:28:56Z"}, "message": "re PR debug/44971 (-fcompare-debug failure with uninitialized read in walk_gimple_stmt)\n\n2010-07-20  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/44971\n\tPR middle-end/44988\n\t* tree-ssa.c (maybe_optimize_var): New function split out from ...\n\t(execute_update_addresses_taken): ... here.\n\t(non_rewritable_mem_ref_base): Likewise.\n\t(execute_update_addresses_taken): Do not iterate over all referenced\n\tvars but just all local decls and parms.\n\tProperly check call and asm arguments and rewrite call arguments.\n\n\t* gcc.dg/pr44971.c: New testcase.\n\t* gcc.c-torture/compile/pr44988.c: Likewise.\n\nFrom-SVN: r162329", "tree": {"sha": "3fc6b6140895b6ed7095701ca1e68de5f8470112", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3fc6b6140895b6ed7095701ca1e68de5f8470112"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad650c924ff8f880f08a3f287abb7c1ddd2ecf4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad650c924ff8f880f08a3f287abb7c1ddd2ecf4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad650c924ff8f880f08a3f287abb7c1ddd2ecf4d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad650c924ff8f880f08a3f287abb7c1ddd2ecf4d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "93f1d8555d8bf181de1a8d302144e19770687889", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93f1d8555d8bf181de1a8d302144e19770687889", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93f1d8555d8bf181de1a8d302144e19770687889"}], "stats": {"total": 264, "additions": 198, "deletions": 66}, "files": [{"sha": "cb3b1e14b9201b9a8c1fd8175f7d4aa044de34bf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad650c924ff8f880f08a3f287abb7c1ddd2ecf4d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad650c924ff8f880f08a3f287abb7c1ddd2ecf4d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ad650c924ff8f880f08a3f287abb7c1ddd2ecf4d", "patch": "@@ -1,3 +1,14 @@\n+2010-07-20  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/44971\n+\tPR middle-end/44988\n+\t* tree-ssa.c (maybe_optimize_var): New function split out from ...\n+\t(execute_update_addresses_taken): ... here.\n+\t(non_rewritable_mem_ref_base): Likewise.\n+\t(execute_update_addresses_taken): Do not iterate over all referenced\n+\tvars but just all local decls and parms.\n+\tProperly check call and asm arguments and rewrite call arguments.\n+\n 2010-07-20  Maxim Kuvyrkov  <maxim@codesourcery.com>\n \n \t* config.gcc (LIBC_GLIBC, LIBC_UCLIBC, LIBC_BIONIC): Move constants"}, {"sha": "fdd99faa8b76fec801e679dc91e9751990efe9ee", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad650c924ff8f880f08a3f287abb7c1ddd2ecf4d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad650c924ff8f880f08a3f287abb7c1ddd2ecf4d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ad650c924ff8f880f08a3f287abb7c1ddd2ecf4d", "patch": "@@ -1,3 +1,10 @@\n+2010-07-20  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/44971\n+\tPR middle-end/44988\n+\t* gcc.dg/pr44971.c: New testcase.\n+\t* gcc.c-torture/compile/pr44988.c: Likewise.\n+\n 2010-07-19  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/44929"}, {"sha": "317eafdf7c8e2a08608ae8526ec9384c6bc816d7", "filename": "gcc/testsuite/gcc.c-torture/compile/pr44988.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad650c924ff8f880f08a3f287abb7c1ddd2ecf4d/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr44988.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad650c924ff8f880f08a3f287abb7c1ddd2ecf4d/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr44988.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr44988.c?ref=ad650c924ff8f880f08a3f287abb7c1ddd2ecf4d", "patch": "@@ -0,0 +1,13 @@\n+struct S\n+{\n+  int i;\n+};\n+\n+extern void bar (struct S);\n+\n+void\n+foo (void)\n+{\n+  int i = 0;\n+  bar (*(struct S *) &i);\n+}"}, {"sha": "a1faef51be17eca1955d256becf75a11490fb64f", "filename": "gcc/testsuite/gcc.dg/pr44971.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad650c924ff8f880f08a3f287abb7c1ddd2ecf4d/gcc%2Ftestsuite%2Fgcc.dg%2Fpr44971.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad650c924ff8f880f08a3f287abb7c1ddd2ecf4d/gcc%2Ftestsuite%2Fgcc.dg%2Fpr44971.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr44971.c?ref=ad650c924ff8f880f08a3f287abb7c1ddd2ecf4d", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fcompare-debug -w\" } */\n+\n+typedef struct\n+{\n+  int default_screen;\n+} *_XPrivint;\n+typedef int FcBool;\n+typedef struct\n+{\n+  struct _XftintInfo *next;\n+} XftintInfo;\n+int _XftintInfo;\n+\n+void _XftintInfoGet (int * dpy, FcBool createIfNecessary)\n+{\n+  int event_base;\n+  &event_base\n+   && dpy[createIfNecessary] != 0;\n+}\n+\n+void _XftCloseint (int dpy, XftintInfo * info,XftintInfo  * *prev)\n+{\n+  _XftintInfoGet (dpy, 0);\n+  for (prev = &_XftintInfo; info = *prev; prev = &(*prev)->next)\n+    ;\n+}"}, {"sha": "bba49ffeaf54de0c5fdf5a64f84600f5569189b6", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 140, "deletions": 66, "changes": 206, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad650c924ff8f880f08a3f287abb7c1ddd2ecf4d/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad650c924ff8f880f08a3f287abb7c1ddd2ecf4d/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=ad650c924ff8f880f08a3f287abb7c1ddd2ecf4d", "patch": "@@ -1835,18 +1835,103 @@ maybe_rewrite_mem_ref_base (tree *tp)\n     }\n }\n \n+/* For a tree REF return its base if it is the base of a MEM_REF\n+   that cannot be rewritten into SSA form.  Otherwise return NULL_TREE.  */\n+\n+static tree\n+non_rewritable_mem_ref_base (tree ref)\n+{\n+  tree base = ref;\n+\n+  /* A plain decl does not need it set.  */\n+  if (DECL_P (ref))\n+    return NULL_TREE;\n+\n+  while (handled_component_p (base))\n+    base = TREE_OPERAND (base, 0);\n+\n+  /* But watch out for MEM_REFs we cannot lower to a\n+     VIEW_CONVERT_EXPR.  */\n+  if (TREE_CODE (base) == MEM_REF\n+      && TREE_CODE (TREE_OPERAND (base, 0)) == ADDR_EXPR)\n+    {\n+      tree decl = TREE_OPERAND (TREE_OPERAND (base, 0), 0);\n+      if (DECL_P (decl)\n+\t  && (!integer_zerop (TREE_OPERAND (base, 1))\n+\t      || (DECL_SIZE (decl)\n+\t\t  != TYPE_SIZE (TREE_TYPE (base)))))\n+\treturn decl;\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n+/* When possible, clear ADDRESSABLE bit or set the REGISTER bit\n+   and mark the variable VAR for conversion into SSA.  Returns true\n+   when updating stmts is required.  */\n+\n+static bool\n+maybe_optimize_var (tree var, bitmap addresses_taken, bitmap not_reg_needs)\n+{\n+  bool update_vops = false;\n+\n+  /* Global Variables, result decls cannot be changed.  */\n+  if (is_global_var (var)\n+      || TREE_CODE (var) == RESULT_DECL\n+      || bitmap_bit_p (addresses_taken, DECL_UID (var)))\n+    return false;\n+\n+  if (TREE_ADDRESSABLE (var)\n+      /* Do not change TREE_ADDRESSABLE if we need to preserve var as\n+\t a non-register.  Otherwise we are confused and forget to\n+\t add virtual operands for it.  */\n+      && (!is_gimple_reg_type (TREE_TYPE (var))\n+\t  || !bitmap_bit_p (not_reg_needs, DECL_UID (var))))\n+    {\n+      TREE_ADDRESSABLE (var) = 0;\n+      if (is_gimple_reg (var))\n+\tmark_sym_for_renaming (var);\n+      update_vops = true;\n+      if (dump_file)\n+\t{\n+\t  fprintf (dump_file, \"No longer having address taken \");\n+\t  print_generic_expr (dump_file, var, 0);\n+\t  fprintf (dump_file, \"\\n\");\n+\t}\n+    }\n+  if (!DECL_GIMPLE_REG_P (var)\n+      && !bitmap_bit_p (not_reg_needs, DECL_UID (var))\n+      && (TREE_CODE (TREE_TYPE (var)) == COMPLEX_TYPE\n+\t  || TREE_CODE (TREE_TYPE (var)) == VECTOR_TYPE)\n+      && !TREE_THIS_VOLATILE (var)\n+      && (TREE_CODE (var) != VAR_DECL || !DECL_HARD_REGISTER (var)))\n+    {\n+      DECL_GIMPLE_REG_P (var) = 1;\n+      mark_sym_for_renaming (var);\n+      update_vops = true;\n+      if (dump_file)\n+\t{\n+\t  fprintf (dump_file, \"Decl is now a gimple register \");\n+\t  print_generic_expr (dump_file, var, 0);\n+\t  fprintf (dump_file, \"\\n\");\n+\t}\n+    }\n+\n+  return update_vops;\n+}\n+\n /* Compute TREE_ADDRESSABLE and DECL_GIMPLE_REG_P for local variables.  */\n \n void\n execute_update_addresses_taken (bool do_optimize)\n {\n   tree var;\n-  referenced_var_iterator rvi;\n   gimple_stmt_iterator gsi;\n   basic_block bb;\n   bitmap addresses_taken = BITMAP_ALLOC (NULL);\n   bitmap not_reg_needs = BITMAP_ALLOC (NULL);\n   bool update_vops = false;\n+  unsigned i;\n \n   /* Collect into ADDRESSES_TAKEN all variables whose address is taken within\n      the function body.  */\n@@ -1856,6 +1941,7 @@ execute_update_addresses_taken (bool do_optimize)\n \t{\n \t  gimple stmt = gsi_stmt (gsi);\n \t  enum gimple_code code = gimple_code (stmt);\n+\t  tree decl;\n \n \t  /* Note all addresses taken by the stmt.  */\n \t  gimple_ior_addresses_taken (addresses_taken, stmt);\n@@ -1877,7 +1963,7 @@ execute_update_addresses_taken (bool do_optimize)\n \t\t  else if (TREE_CODE (lhs) == MEM_REF\n \t\t\t   && TREE_CODE (TREE_OPERAND (lhs, 0)) == ADDR_EXPR)\n \t\t    {\n-\t\t      tree decl = TREE_OPERAND (TREE_OPERAND (lhs, 0), 0);\n+\t\t      decl = TREE_OPERAND (TREE_OPERAND (lhs, 0), 0);\n \t\t      if (DECL_P (decl)\n \t\t\t  && (!integer_zerop (TREE_OPERAND (lhs, 1))\n \t\t\t      || (DECL_SIZE (decl)\n@@ -1890,27 +1976,34 @@ execute_update_addresses_taken (bool do_optimize)\n \t  if (gimple_assign_single_p (stmt))\n \t    {\n \t      tree rhs = gimple_assign_rhs1 (stmt);\n+\t      if ((decl = non_rewritable_mem_ref_base (rhs)))\n+\t\tbitmap_set_bit (not_reg_needs, DECL_UID (decl));\n+\t    }\n \n-              /* A plain decl does not need it set.  */\n-              if (!DECL_P (rhs))\n+\t  else if (code == GIMPLE_CALL)\n+\t    {\n+\t      for (i = 0; i < gimple_call_num_args (stmt); ++i)\n \t\t{\n-\t\t  tree base = rhs;\n-\t\t  while (handled_component_p (base))\n-\t\t    base = TREE_OPERAND (base, 0);\n-\n-\t\t  /* But watch out for MEM_REFs we cannot lower to a\n-\t\t     VIEW_CONVERT_EXPR.  */\n-\t\t  if (TREE_CODE (base) == MEM_REF\n-\t\t      && TREE_CODE (TREE_OPERAND (base, 0)) == ADDR_EXPR)\n-\t\t    {\n-\t\t      tree decl = TREE_OPERAND (TREE_OPERAND (base, 0), 0);\n-\t\t      if (DECL_P (decl)\n-\t\t\t  && (!integer_zerop (TREE_OPERAND (base, 1))\n-\t\t\t      || (DECL_SIZE (decl)\n-\t\t\t\t  != TYPE_SIZE (TREE_TYPE (base)))))\n-\t\t\tbitmap_set_bit (not_reg_needs, DECL_UID (decl));\n-\t\t    }\n-                }\n+\t\t  tree arg = gimple_call_arg (stmt, i);\n+\t\t  if ((decl = non_rewritable_mem_ref_base (arg)))\n+\t\t    bitmap_set_bit (not_reg_needs, DECL_UID (decl));\n+\t\t}\n+\t    }\n+\n+\t  else if (code == GIMPLE_ASM)\n+\t    {\n+\t      for (i = 0; i < gimple_asm_noutputs (stmt); ++i)\n+\t\t{\n+\t\t  tree link = gimple_asm_output_op (stmt, i);\n+\t\t  if ((decl = non_rewritable_mem_ref_base (TREE_VALUE (link))))\n+\t\t    bitmap_set_bit (not_reg_needs, DECL_UID (decl));\n+\t\t}\n+\t      for (i = 0; i < gimple_asm_ninputs (stmt); ++i)\n+\t\t{\n+\t\t  tree link = gimple_asm_input_op (stmt, i);\n+\t\t  if ((decl = non_rewritable_mem_ref_base (TREE_VALUE (link))))\n+\t\t    bitmap_set_bit (not_reg_needs, DECL_UID (decl));\n+\t\t}\n \t    }\n \t}\n \n@@ -1933,50 +2026,21 @@ execute_update_addresses_taken (bool do_optimize)\n   /* When possible, clear ADDRESSABLE bit or set the REGISTER bit\n      and mark variable for conversion into SSA.  */\n   if (optimize && do_optimize)\n-    FOR_EACH_REFERENCED_VAR (var, rvi)\n-      {\n-\t/* Global Variables, result decls cannot be changed.  */\n-\tif (is_global_var (var)\n-\t    || TREE_CODE (var) == RESULT_DECL\n-\t    || bitmap_bit_p (addresses_taken, DECL_UID (var)))\n-\t  continue;\n-\n-\tif (TREE_ADDRESSABLE (var)\n-\t    /* Do not change TREE_ADDRESSABLE if we need to preserve var as\n-\t       a non-register.  Otherwise we are confused and forget to\n-\t       add virtual operands for it.  */\n-\t    && (!is_gimple_reg_type (TREE_TYPE (var))\n-\t\t|| !bitmap_bit_p (not_reg_needs, DECL_UID (var))))\n-\t  {\n-\t    TREE_ADDRESSABLE (var) = 0;\n-\t    if (is_gimple_reg (var))\n-\t      mark_sym_for_renaming (var);\n-\t    update_vops = true;\n-\t    if (dump_file)\n-\t      {\n-\t\tfprintf (dump_file, \"No longer having address taken \");\n-\t\tprint_generic_expr (dump_file, var, 0);\n-\t\tfprintf (dump_file, \"\\n\");\n-\t      }\n-\t  }\n-\tif (!DECL_GIMPLE_REG_P (var)\n-\t    && !bitmap_bit_p (not_reg_needs, DECL_UID (var))\n-\t    && (TREE_CODE (TREE_TYPE (var)) == COMPLEX_TYPE\n-\t\t|| TREE_CODE (TREE_TYPE (var)) == VECTOR_TYPE)\n-\t    && !TREE_THIS_VOLATILE (var)\n-\t    && (TREE_CODE (var) != VAR_DECL || !DECL_HARD_REGISTER (var)))\n-\t  {\n-\t    DECL_GIMPLE_REG_P (var) = 1;\n-\t    mark_sym_for_renaming (var);\n-\t    update_vops = true;\n-\t    if (dump_file)\n-\t      {\n-\t\tfprintf (dump_file, \"Decl is now a gimple register \");\n-\t\tprint_generic_expr (dump_file, var, 0);\n-\t\tfprintf (dump_file, \"\\n\");\n-\t      }\n-\t  }\n-      }\n+    {\n+      /* We cannot iterate over all referenced vars as that can contain\n+\t unused vars from BLOCK trees which cause code generation\n+\t differences for -g vs. -g0.  */\n+      for (var = DECL_ARGUMENTS (cfun->decl); var; var = DECL_CHAIN (var))\n+\t{\n+\t  /* ???  Not all arguments are in referenced vars.  */\n+\t  if (!var_ann (var))\n+\t    continue;\n+\t  update_vops\n+\t    |= maybe_optimize_var (var, addresses_taken, not_reg_needs);\n+\t}\n+      for (i = 0; VEC_iterate (tree, cfun->local_decls, i, var); ++i)\n+\tupdate_vops |= maybe_optimize_var (var, addresses_taken, not_reg_needs);\n+    }\n \n   /* Operand caches needs to be recomputed for operands referencing the updated\n      variables.  */\n@@ -2031,7 +2095,17 @@ execute_update_addresses_taken (bool do_optimize)\n \t\t  }\n \t      }\n \n-\t    if (gimple_code (stmt) == GIMPLE_ASM)\n+\t    else if (gimple_code (stmt) == GIMPLE_CALL)\n+\t      {\n+\t\tunsigned i;\n+\t\tfor (i = 0; i < gimple_call_num_args (stmt); ++i)\n+\t\t  {\n+\t\t    tree *argp = gimple_call_arg_ptr (stmt, i);\n+\t\t    maybe_rewrite_mem_ref_base (argp);\n+\t\t  }\n+\t      }\n+\n+\t    else if (gimple_code (stmt) == GIMPLE_ASM)\n \t      {\n \t\tunsigned i;\n \t\tfor (i = 0; i < gimple_asm_noutputs (stmt); ++i)"}]}