{"sha": "e3dfef44ef6b735ac7eea4202152d672ea0a91ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTNkZmVmNDRlZjZiNzM1YWM3ZWVhNDIwMjE1MmQ2NzJlYTBhOTFlZg==", "commit": {"author": {"name": "Gabriel Charette", "email": "gchare@google.com", "date": "2011-08-22T20:41:07Z"}, "committer": {"name": "Gabriel Charette", "email": "gchare@gcc.gnu.org", "date": "2011-08-22T20:41:07Z"}, "message": "Add ability to force lexed tokens' source_locations.\n\nUse it to force BUILTINS_LOCATION when declaring builtins instead of creating a <built-in> entry in the line_table which is wrong.\n\n\t* c-opts.c (c_finish_options): Force BUILTINS_LOCATION for tokens\n\tdefined in cpp_init_builtins and c_cpp_builtins.\n\n\tgcc/fortran/ChangeLog\n\t* cpp.c (gfc_cpp_init): Force BUILTINS_LOCATION for tokens\n\tdefined in cpp_define_builtins.\n\n\tlibcpp/ChangeLog\n\t* init.c (cpp_create_reader): Inititalize forced_token_location_p.\n\t* internal.h (struct cpp_reader): Add field forced_token_location_p.\n\t* lex.c (_cpp_lex_direct): Use forced_token_location_p.\n\t(cpp_force_token_locations): New.\n\t(cpp_stop_forcing_token_locations): New.\n\nFrom-SVN: r177973", "tree": {"sha": "edc710dc37d6c755bf80f2e8489e337aeb7186da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/edc710dc37d6c755bf80f2e8489e337aeb7186da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3dfef44ef6b735ac7eea4202152d672ea0a91ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3dfef44ef6b735ac7eea4202152d672ea0a91ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3dfef44ef6b735ac7eea4202152d672ea0a91ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3dfef44ef6b735ac7eea4202152d672ea0a91ef/comments", "author": null, "committer": null, "parents": [{"sha": "c4831cff11fca2cee74ea2d039070a9507f13779", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4831cff11fca2cee74ea2d039070a9507f13779", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4831cff11fca2cee74ea2d039070a9507f13779"}], "stats": {"total": 81, "additions": 72, "deletions": 9}, "files": [{"sha": "fb00ca98958eed592592c2b0717d7b69c874a969", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3dfef44ef6b735ac7eea4202152d672ea0a91ef/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3dfef44ef6b735ac7eea4202152d672ea0a91ef/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=e3dfef44ef6b735ac7eea4202152d672ea0a91ef", "patch": "@@ -1,3 +1,8 @@\n+011-08-22  Gabriel Charette  <gchare@google.com>\n+\n+\t* c-opts.c (c_finish_options): Force BUILTINS_LOCATION for tokens\n+\tdefined in cpp_init_builtins and c_cpp_builtins.\n+\n 2011-08-19  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-common.c (c_common_reswords): Add __builtin_complex."}, {"sha": "49ff80dda7e00a705a17b11e1c5d9115c85b2134", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3dfef44ef6b735ac7eea4202152d672ea0a91ef/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3dfef44ef6b735ac7eea4202152d672ea0a91ef/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=e3dfef44ef6b735ac7eea4202152d672ea0a91ef", "patch": "@@ -1306,12 +1306,17 @@ c_finish_options (void)\n     {\n       size_t i;\n \n-      cb_file_change (parse_in,\n-\t\t      linemap_add (line_table, LC_RENAME, 0,\n-\t\t\t\t   _(\"<built-in>\"), 0));\n+      {\n+\t/* Make sure all of the builtins about to be declared have\n+\t  BUILTINS_LOCATION has their source_location.  */\n+\tsource_location builtins_loc = BUILTINS_LOCATION;\n+\tcpp_force_token_locations (parse_in, &builtins_loc);\n \n-      cpp_init_builtins (parse_in, flag_hosted);\n-      c_cpp_builtins (parse_in);\n+\tcpp_init_builtins (parse_in, flag_hosted);\n+\tc_cpp_builtins (parse_in);\n+\n+\tcpp_stop_forcing_token_locations (parse_in);\n+      }\n \n       /* We're about to send user input to cpplib, so make it warn for\n \t things that we previously (when we sent it internal definitions)"}, {"sha": "075c366f0b590d218d2919a9a8229e9d7629adad", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3dfef44ef6b735ac7eea4202152d672ea0a91ef/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3dfef44ef6b735ac7eea4202152d672ea0a91ef/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e3dfef44ef6b735ac7eea4202152d672ea0a91ef", "patch": "@@ -1,3 +1,8 @@\n+2011-08-22  Gabriel Charette  <gchare@google.com>\n+\n+\t* cpp.c (gfc_cpp_init): Force BUILTINS_LOCATION for tokens\n+\tdefined in cpp_define_builtins.\n+\n 2011-08-22  Mikael Morin  <mikael.morin@gcc.gnu.org>\n \n \tPR fortran/50050"}, {"sha": "9368d890973b6edac181735f5af536decb505fb2", "filename": "gcc/fortran/cpp.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3dfef44ef6b735ac7eea4202152d672ea0a91ef/gcc%2Ffortran%2Fcpp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3dfef44ef6b735ac7eea4202152d672ea0a91ef/gcc%2Ffortran%2Fcpp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcpp.c?ref=e3dfef44ef6b735ac7eea4202152d672ea0a91ef", "patch": "@@ -565,9 +565,17 @@ gfc_cpp_init (void)\n   if (gfc_option.flag_preprocessed)\n     return;\n \n-  cpp_change_file (cpp_in, LC_RENAME, _(\"<built-in>\"));\n   if (!gfc_cpp_option.no_predefined)\n-    cpp_define_builtins (cpp_in);\n+    {\n+      /* Make sure all of the builtins about to be declared have\n+\tBUILTINS_LOCATION has their source_location.  */\n+      source_location builtins_loc = BUILTINS_LOCATION;\n+      cpp_force_token_locations (cpp_in, &builtins_loc);\n+\n+      cpp_define_builtins (cpp_in);\n+\n+      cpp_stop_forcing_token_locations (cpp_in);\n+    }\n \n   /* Handle deferred options from command-line.  */\n   cpp_change_file (cpp_in, LC_RENAME, _(\"<command-line>\"));"}, {"sha": "8a5e89921a0034487ef00a7ec21c8c4a85f9e966", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3dfef44ef6b735ac7eea4202152d672ea0a91ef/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3dfef44ef6b735ac7eea4202152d672ea0a91ef/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=e3dfef44ef6b735ac7eea4202152d672ea0a91ef", "patch": "@@ -1,3 +1,11 @@\n+2011-08-22  Gabriel Charette  <gchare@google.com>\n+\n+\t* init.c (cpp_create_reader): Inititalize forced_token_location_p.\n+\t* internal.h (struct cpp_reader): Add field forced_token_location_p.\n+\t* lex.c (_cpp_lex_direct): Use forced_token_location_p.\n+\t(cpp_force_token_locations): New.\n+\t(cpp_stop_forcing_token_locations): New.\n+\n 2011-08-18  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \tPR libstdc++/1773"}, {"sha": "0e90821072fdee5393b3b4b929ee38f48ac86265", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3dfef44ef6b735ac7eea4202152d672ea0a91ef/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3dfef44ef6b735ac7eea4202152d672ea0a91ef/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=e3dfef44ef6b735ac7eea4202152d672ea0a91ef", "patch": "@@ -989,4 +989,8 @@ extern void cpp_prepare_state (cpp_reader *, struct save_macro_data **);\n extern int cpp_read_state (cpp_reader *, const char *, FILE *,\n \t\t\t   struct save_macro_data *);\n \n+/* In lex.c */\n+extern void cpp_force_token_locations (cpp_reader *, source_location *);\n+extern void cpp_stop_forcing_token_locations (cpp_reader *);\n+\n #endif /* ! LIBCPP_CPPLIB_H */"}, {"sha": "c5c53256d35643b18890f3a81e5b2dd6213af32d", "filename": "libcpp/init.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3dfef44ef6b735ac7eea4202152d672ea0a91ef/libcpp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3dfef44ef6b735ac7eea4202152d672ea0a91ef/libcpp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.c?ref=e3dfef44ef6b735ac7eea4202152d672ea0a91ef", "patch": "@@ -223,6 +223,9 @@ cpp_create_reader (enum c_lang lang, hash_table *table,\n   /* Initialize table for push_macro/pop_macro.  */\n   pfile->pushed_macros = 0;\n \n+  /* Do not force token locations by default.  */\n+  pfile->forced_token_location_p = NULL;\n+\n   /* The expression parser stack.  */\n   _cpp_expand_op_stack (pfile);\n "}, {"sha": "6c423f056bcddf345ff3182b61384486c36a07e1", "filename": "libcpp/internal.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3dfef44ef6b735ac7eea4202152d672ea0a91ef/libcpp%2Finternal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3dfef44ef6b735ac7eea4202152d672ea0a91ef/libcpp%2Finternal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finternal.h?ref=e3dfef44ef6b735ac7eea4202152d672ea0a91ef", "patch": "@@ -499,6 +499,10 @@ struct cpp_reader\n \n   /* List of saved macros by push_macro.  */\n   struct def_pragma_macro *pushed_macros;\n+\n+  /* If non-null, the lexer will use this location for the next token\n+     instead of getting a location from the linemap.  */\n+  source_location *forced_token_location_p;\n };\n \n /* Character classes.  Based on the more primitive macros in safe-ctype.h."}, {"sha": "75b2b1dc7ff7c111703e60947f7b46d741a45054", "filename": "libcpp/lex.c", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3dfef44ef6b735ac7eea4202152d672ea0a91ef/libcpp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3dfef44ef6b735ac7eea4202152d672ea0a91ef/libcpp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.c?ref=e3dfef44ef6b735ac7eea4202152d672ea0a91ef", "patch": "@@ -1975,8 +1975,11 @@ _cpp_lex_direct (cpp_reader *pfile)\n     }\n   c = *buffer->cur++;\n \n-  result->src_loc = linemap_position_for_column (pfile->line_table,\n-\t\t\t                                    CPP_BUF_COLUMN (buffer, buffer->cur));\n+  if (pfile->forced_token_location_p)\n+    result->src_loc = *pfile->forced_token_location_p;\n+  else\n+    result->src_loc = linemap_position_for_column (pfile->line_table,\n+\t\t\t\t\t  CPP_BUF_COLUMN (buffer, buffer->cur));\n \n   switch (c)\n     {\n@@ -2839,3 +2842,21 @@ cpp_token_val_index (cpp_token *tok)\n       return CPP_TOKEN_FLD_NONE;\n     }\n }\n+\n+/* All tokens lexed in R after calling this function will be forced to have\n+   their source_location the same as the location referenced by P, until\n+   cpp_stop_forcing_token_locations is called for R.  */\n+\n+void\n+cpp_force_token_locations (cpp_reader *r, source_location *p)\n+{\n+  r->forced_token_location_p = p;\n+}\n+\n+/* Go back to assigning locations naturally for lexed tokens.  */\n+\n+void\n+cpp_stop_forcing_token_locations (cpp_reader *r)\n+{\n+  r->forced_token_location_p = NULL;\n+}"}]}