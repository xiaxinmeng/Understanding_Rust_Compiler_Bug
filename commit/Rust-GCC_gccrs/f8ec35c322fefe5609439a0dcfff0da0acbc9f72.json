{"sha": "f8ec35c322fefe5609439a0dcfff0da0acbc9f72", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjhlYzM1YzMyMmZlZmU1NjA5NDM5YTBkY2ZmZjBkYTBhY2JjOWY3Mg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2019-01-27T20:19:41Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2019-01-27T20:19:41Z"}, "message": "PR c++/88815 - narrowing conversion lost in decltype.\n\n\tPR c++/78244 - narrowing conversion in template not detected.\n\t* cp-tree.h (CONSTRUCTOR_IS_DEPENDENT): New.\n\t* pt.c (instantiation_dependent_r): Consider a CONSTRUCTOR with\n\tCONSTRUCTOR_IS_DEPENDENT instantiation-dependent.\n\t* semantics.c (finish_compound_literal): When the compound literal\n\tisn't instantiation-dependent and the type isn't type-dependent,\n\tfall back to the normal processing.  Set CONSTRUCTOR_IS_DEPENDENT.\n\n\t* g++.dg/cpp0x/Wnarrowing15.C: New test.\n\t* g++.dg/cpp0x/Wnarrowing16.C: New test.\n\t* g++.dg/cpp0x/constexpr-decltype3.C: New test.\n\t* g++.dg/cpp1y/Wnarrowing1.C: New test.\n\nFrom-SVN: r268321", "tree": {"sha": "303d78bfca602c2ab5f6769b662b99ffebfb6f37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/303d78bfca602c2ab5f6769b662b99ffebfb6f37"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8ec35c322fefe5609439a0dcfff0da0acbc9f72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8ec35c322fefe5609439a0dcfff0da0acbc9f72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8ec35c322fefe5609439a0dcfff0da0acbc9f72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8ec35c322fefe5609439a0dcfff0da0acbc9f72/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "73a54a61930af1aa355fdfb566c7a07af3a60cf8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73a54a61930af1aa355fdfb566c7a07af3a60cf8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73a54a61930af1aa355fdfb566c7a07af3a60cf8"}], "stats": {"total": 92, "additions": 91, "deletions": 1}, "files": [{"sha": "dcac8e7d1063523d2afbdac894ce547e85331582", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8ec35c322fefe5609439a0dcfff0da0acbc9f72/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8ec35c322fefe5609439a0dcfff0da0acbc9f72/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f8ec35c322fefe5609439a0dcfff0da0acbc9f72", "patch": "@@ -1,5 +1,14 @@\n 2019-01-27  Marek Polacek  <polacek@redhat.com>\n \n+\tPR c++/88815 - narrowing conversion lost in decltype.\n+\tPR c++/78244 - narrowing conversion in template not detected.\n+\t* cp-tree.h (CONSTRUCTOR_IS_DEPENDENT): New.\n+\t* pt.c (instantiation_dependent_r): Consider a CONSTRUCTOR with\n+\tCONSTRUCTOR_IS_DEPENDENT instantiation-dependent.\n+\t* semantics.c (finish_compound_literal): When the compound literal\n+\tisn't instantiation-dependent and the type isn't type-dependent,\n+\tfall back to the normal processing.  Set CONSTRUCTOR_IS_DEPENDENT.\n+\n \tPR c++/89024 - ICE with incomplete enum type.\n \t* call.c (standard_conversion): When converting an\n \tARITHMETIC_TYPE_P to an incomplete type, return NULL."}, {"sha": "77e1425b4357b7c7ab720c5b233ce381d98dd74a", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8ec35c322fefe5609439a0dcfff0da0acbc9f72/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8ec35c322fefe5609439a0dcfff0da0acbc9f72/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=f8ec35c322fefe5609439a0dcfff0da0acbc9f72", "patch": "@@ -424,6 +424,7 @@ extern GTY(()) tree cp_global_trees[CPTI_MAX];\n       DECL_FINAL_P (in FUNCTION_DECL)\n       QUALIFIED_NAME_IS_TEMPLATE (in SCOPE_REF)\n       DECLTYPE_FOR_INIT_CAPTURE (in DECLTYPE_TYPE)\n+      CONSTRUCTOR_IS_DEPENDENT (in CONSTRUCTOR)\n       TINFO_USED_TEMPLATE_ID (in TEMPLATE_INFO)\n       PACK_EXPANSION_SIZEOF_P (in *_PACK_EXPANSION)\n       OVL_USING_P (in OVERLOAD)\n@@ -4205,6 +4206,11 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n    B b{1,2}, not B b({1,2}) or B b = {1,2}.  */\n #define CONSTRUCTOR_IS_DIRECT_INIT(NODE) (TREE_LANG_FLAG_0 (CONSTRUCTOR_CHECK (NODE)))\n \n+/* True if this CONSTRUCTOR is instantiation-dependent and needs to be\n+   substituted.  */\n+#define CONSTRUCTOR_IS_DEPENDENT(NODE) \\\n+  (TREE_LANG_FLAG_1 (CONSTRUCTOR_CHECK (NODE)))\n+\n /* True if this CONSTRUCTOR should not be used as a variable initializer\n    because it was loaded from a constexpr variable with mutable fields.  */\n #define CONSTRUCTOR_MUTABLE_POISON(NODE) \\"}, {"sha": "f8b3054533e7405277c60c6fd2cbfcfa97c3dd1e", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8ec35c322fefe5609439a0dcfff0da0acbc9f72/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8ec35c322fefe5609439a0dcfff0da0acbc9f72/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=f8ec35c322fefe5609439a0dcfff0da0acbc9f72", "patch": "@@ -25815,6 +25815,11 @@ instantiation_dependent_r (tree *tp, int *walk_subtrees,\n \treturn *tp;\n       break;\n \n+    case CONSTRUCTOR:\n+      if (CONSTRUCTOR_IS_DEPENDENT (*tp))\n+\treturn *tp;\n+      break;\n+\n     default:\n       break;\n     }"}, {"sha": "786f18ab0c8b5b3d5fc4afad2b18674364a1f81a", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8ec35c322fefe5609439a0dcfff0da0acbc9f72/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8ec35c322fefe5609439a0dcfff0da0acbc9f72/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=f8ec35c322fefe5609439a0dcfff0da0acbc9f72", "patch": "@@ -2795,11 +2795,14 @@ finish_compound_literal (tree type, tree compound_literal,\n \t  return error_mark_node;\n       }\n \n-  if (processing_template_decl)\n+  if (instantiation_dependent_expression_p (compound_literal)\n+      || dependent_type_p (type))\n     {\n       TREE_TYPE (compound_literal) = type;\n       /* Mark the expression as a compound literal.  */\n       TREE_HAS_CONSTRUCTOR (compound_literal) = 1;\n+      /* And as instantiation-dependent.  */\n+      CONSTRUCTOR_IS_DEPENDENT (compound_literal) = true;\n       if (fcl_context == fcl_c99)\n \tCONSTRUCTOR_C99_COMPOUND_LITERAL (compound_literal) = 1;\n       return compound_literal;"}, {"sha": "9149664ca38895b0bbbd90804b797b551f55e1cb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8ec35c322fefe5609439a0dcfff0da0acbc9f72/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8ec35c322fefe5609439a0dcfff0da0acbc9f72/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f8ec35c322fefe5609439a0dcfff0da0acbc9f72", "patch": "@@ -1,5 +1,12 @@\n 2019-01-27  Marek Polacek  <polacek@redhat.com>\n \n+\tPR c++/88815 - narrowing conversion lost in decltype.\n+\tPR c++/78244 - narrowing conversion in template not detected.\n+\t* g++.dg/cpp0x/Wnarrowing15.C: New test.\n+\t* g++.dg/cpp0x/Wnarrowing16.C: New test.\n+\t* g++.dg/cpp0x/constexpr-decltype3.C: New test.\n+\t* g++.dg/cpp1y/Wnarrowing1.C: New test.\n+\n \tPR c++/89024 - ICE with incomplete enum type.\n \t* g++.dg/cpp0x/enum37.C: New test.\n "}, {"sha": "4e7c17dcfca7bda5de65b647009b1a920a83bcf6", "filename": "gcc/testsuite/g++.dg/cpp0x/Wnarrowing15.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8ec35c322fefe5609439a0dcfff0da0acbc9f72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWnarrowing15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8ec35c322fefe5609439a0dcfff0da0acbc9f72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWnarrowing15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWnarrowing15.C?ref=f8ec35c322fefe5609439a0dcfff0da0acbc9f72", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/78244\n+// { dg-do compile { target c++11 } }\n+\n+template <typename T>\n+auto f1() -> decltype(int{2.0}, void()) { } // { dg-error \"narrowing conversion\" }\n+\n+template <typename T>\n+auto f2() -> decltype(int{2.0}) { return 1; } // { dg-error \"narrowing conversion\" }\n+\n+template <typename T>\n+auto f3() -> decltype(void(), int{2.0}) { return 1; } // { dg-error \"narrowing conversion\" }\n+\n+template <typename T>\n+auto f4() -> decltype((int{2.0})) { return 1; } // { dg-error \"narrowing conversion\" }"}, {"sha": "21394be1b97a5b478edb29f42fd2fbe3b1fdac17", "filename": "gcc/testsuite/g++.dg/cpp0x/Wnarrowing16.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8ec35c322fefe5609439a0dcfff0da0acbc9f72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWnarrowing16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8ec35c322fefe5609439a0dcfff0da0acbc9f72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWnarrowing16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWnarrowing16.C?ref=f8ec35c322fefe5609439a0dcfff0da0acbc9f72", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/78244\n+// { dg-do compile { target c++11 } }\n+\n+struct S { int d; };\n+\n+template <typename T>\n+auto f1() -> decltype(S{2.0}, void()) { } // { dg-error \"narrowing conversion\" }\n+\n+template <typename T>\n+auto f2() -> decltype(S{2.0}, 1) { return 1; } // { dg-error \"narrowing conversion\" }\n+\n+template <typename T>\n+auto f3() -> decltype(void(), S{2.0}, 1) { return 1; } // { dg-error \"narrowing conversion\" }\n+\n+template <typename T>\n+auto f4() -> decltype((S{2.0}, 1)) { return 1; } // { dg-error \"narrowing conversion\" }"}, {"sha": "fd05366de50e8ad98c6d0e84596c36e9094f5989", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-decltype3.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8ec35c322fefe5609439a0dcfff0da0acbc9f72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-decltype3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8ec35c322fefe5609439a0dcfff0da0acbc9f72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-decltype3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-decltype3.C?ref=f8ec35c322fefe5609439a0dcfff0da0acbc9f72", "patch": "@@ -0,0 +1,25 @@\n+// PR c++/88815\n+// { dg-do compile { target c++11 } }\n+\n+struct true_type {\n+    constexpr operator bool() const { return true; }\n+};\n+\n+struct false_type {\n+    constexpr operator bool() const { return false; }\n+};\n+\n+template<int (*p)()>\n+true_type is_constexpr_impl(decltype(int{(p(), 0U)}));\n+\n+template<int (*p)()>\n+false_type is_constexpr_impl(...);\n+\n+template<int (*p)()>\n+using is_constexpr = decltype(is_constexpr_impl<p>(0));\n+\n+constexpr int f() { return 0; }\n+int g() { return 0; }\n+\n+static_assert(is_constexpr<f>(), \"\");\n+static_assert(!is_constexpr<g>(), \"\");"}, {"sha": "e1e499542f0950d7f4b79daaa1b561a922dae40e", "filename": "gcc/testsuite/g++.dg/cpp1y/Wnarrowing1.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8ec35c322fefe5609439a0dcfff0da0acbc9f72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2FWnarrowing1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8ec35c322fefe5609439a0dcfff0da0acbc9f72/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2FWnarrowing1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2FWnarrowing1.C?ref=f8ec35c322fefe5609439a0dcfff0da0acbc9f72", "patch": "@@ -0,0 +1,5 @@\n+// PR c++/78244\n+// { dg-do compile { target c++14 } }\n+\n+template<typename>\n+decltype(int{1.1}) v; // { dg-error \"narrowing conversion\" }"}]}