{"sha": "48cc2e468cca54ae930e64be01f3b183df2198fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDhjYzJlNDY4Y2NhNTRhZTkzMGU2NGJlMDFmM2IxODNkZjIxOThmYg==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-08-01T00:16:25Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-08-01T00:16:25Z"}, "message": "Daily bump.", "tree": {"sha": "ac6ca70e87db7678dc1bb164c2b955a71853e06e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac6ca70e87db7678dc1bb164c2b955a71853e06e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48cc2e468cca54ae930e64be01f3b183df2198fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48cc2e468cca54ae930e64be01f3b183df2198fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48cc2e468cca54ae930e64be01f3b183df2198fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48cc2e468cca54ae930e64be01f3b183df2198fb/comments", "author": null, "committer": null, "parents": [{"sha": "9fa4023c7aa0ab126b00fe7e640ed9858b249c77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fa4023c7aa0ab126b00fe7e640ed9858b249c77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fa4023c7aa0ab126b00fe7e640ed9858b249c77"}], "stats": {"total": 790, "additions": 789, "deletions": 1}, "files": [{"sha": "94f636f58b87618ca01cf2b83909cd978e426978", "filename": "gcc/ChangeLog", "status": "modified", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48cc2e468cca54ae930e64be01f3b183df2198fb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48cc2e468cca54ae930e64be01f3b183df2198fb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=48cc2e468cca54ae930e64be01f3b183df2198fb", "patch": "@@ -1,3 +1,91 @@\n+2020-07-31  Roger Sayle  <roger@nextmovesoftware.com>\n+\t    Tom de Vries  <tdevries@suse.de>\n+\n+\tPR target/90928\n+\t* config/nvptx/nvptx.c (nvptx_truly_noop_truncation): Implement.\n+\t(TARGET_TRULY_NOOP_TRUNCATION): Define.\n+\n+2020-07-31  Richard Biener  <rguenther@suse.de>\n+\n+\tPR debug/96383\n+\t* langhooks-def.h (lhd_finalize_early_debug): Declare.\n+\t(LANG_HOOKS_FINALIZE_EARLY_DEBUG): Define.\n+\t(LANG_HOOKS_INITIALIZER): Amend.\n+\t* langhooks.c: Include cgraph.h and debug.h.\n+\t(lhd_finalize_early_debug): Default implementation from\n+\tformer code in finalize_compilation_unit.\n+\t* langhooks.h (lang_hooks::finalize_early_debug): Add.\n+\t* cgraphunit.c (symbol_table::finalize_compilation_unit):\n+\tCall the finalize_early_debug langhook.\n+\n+2020-07-31  Richard Biener  <rguenther@suse.de>\n+\n+\t* genmatch.c (expr::force_leaf): Add and initialize.\n+\t(expr::gen_transform): Honor force_leaf by passing\n+\tNULL as sequence argument to maybe_push_res_to_seq.\n+\t(parser::parse_expr): Allow ! marker on result expression\n+\toperations.\n+\t* doc/match-and-simplify.texi: Amend.\n+\n+2020-07-31  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\t* tree-vect-loop.c (vect_get_known_peeling_cost): Don't consider branch\n+\ttaken costs for prologue and epilogue if they don't exist.\n+\t(vect_estimate_min_profitable_iters): Likewise.\n+\n+2020-07-31  Martin Liska  <mliska@suse.cz>\n+\n+\t* cgraph.h: Remove leading empty lines.\n+\t* cgraphunit.c (enum cgraph_order_sort_kind): Remove\n+\tORDER_UNDEFINED.\n+\t(struct cgraph_order_sort): Add constructors.\n+\t(cgraph_order_sort::process): New.\n+\t(cgraph_order_cmp): New.\n+\t(output_in_order): Simplify and push nodes to vector.\n+\n+2020-07-31  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/96369\n+\t* fold-const.c (fold_range_test): Special-case constant\n+\tLHS for short-circuiting operations.\n+\n+2020-07-31  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcov-io.h (GCOV_PREALLOCATED_KVP): New.\n+\n+2020-07-31  Zhiheng Xie  <xiezhiheng@huawei.com>\n+\n+\t* config/aarch64/aarch64-builtins.c (aarch64_general_add_builtin):\n+\tAdd new argument ATTRS.\n+\t(aarch64_call_properties): New function.\n+\t(aarch64_modifies_global_state_p): Likewise.\n+\t(aarch64_reads_global_state_p): Likewise.\n+\t(aarch64_could_trap_p): Likewise.\n+\t(aarch64_add_attribute): Likewise.\n+\t(aarch64_get_attributes): Likewise.\n+\t(aarch64_init_simd_builtins): Add attributes for each built-in function.\n+\n+2020-07-31  Richard Biener  <rguenther@suse.de>\n+\n+\tPR debug/78288\n+\t* var-tracking.c (vt_find_locations): Use\n+\trev_post_order_and_mark_dfs_back_seme and separately iterate\n+\tover toplevel SCCs.\n+\n+2020-07-31  Richard Biener  <rguenther@suse.de>\n+\n+\t* cfganal.h (rev_post_order_and_mark_dfs_back_seme): Adjust\n+\tprototype.\n+\t* cfganal.c (rpoamdbs_bb_data): New struct with pre BB data.\n+\t(tag_header): New helper.\n+\t(cmp_edge_dest_pre): Likewise.\n+\t(rev_post_order_and_mark_dfs_back_seme): Compute SCCs,\n+\tfind SCC exits and perform a DFS walk with extra edges to\n+\tcompute a RPO with adjacent SCC members when requesting an\n+\titeration optimized order and populate the toplevel SCC array.\n+\t* tree-ssa-sccvn.c (do_rpo_vn): Remove ad-hoc computation\n+\tof max_rpo and fill it in from SCC extent info instead.\n+\n 2020-07-30  Will Schmidt  <will_schmidt@vnet.ibm.com>\n \n \t* config/rs6000/altivec.h (vec_test_lsbb_all_ones): New define."}, {"sha": "b4bc243c22b0bc297c47538cecd33b0f395e90c0", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48cc2e468cca54ae930e64be01f3b183df2198fb/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48cc2e468cca54ae930e64be01f3b183df2198fb/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=48cc2e468cca54ae930e64be01f3b183df2198fb", "patch": "@@ -1 +1 @@\n-20200731\n+20200801"}, {"sha": "85e0c00d37a542992f0bff00e8923544db73746f", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48cc2e468cca54ae930e64be01f3b183df2198fb/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48cc2e468cca54ae930e64be01f3b183df2198fb/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=48cc2e468cca54ae930e64be01f3b183df2198fb", "patch": "@@ -1,3 +1,17 @@\n+2020-07-31  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/96003\n+\t* c-common.c (check_function_arguments_recurse): Return early when\n+\tno-warning bit is set.\n+\n+2020-07-31  Richard Biener  <rguenther@suse.de>\n+\n+\tPR debug/96383\n+\t* c-common.h (c_common_finalize_early_debug): Declare.\n+\t* c-common.c: Include debug.h.\n+\t(c_common_finalize_early_debug): finalize_early_debug langhook\n+\timplementation generating debug for extern declarations.\n+\n 2020-07-27  Nathan Sidwell  <nathan@acm.org>\n \n \t* c-common.c (try_to_locate_new_include_insertion_point): Use"}, {"sha": "18eeb1b0a17c50ab5c3894a6851f6b7010c8d705", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48cc2e468cca54ae930e64be01f3b183df2198fb/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48cc2e468cca54ae930e64be01f3b183df2198fb/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=48cc2e468cca54ae930e64be01f3b183df2198fb", "patch": "@@ -1,3 +1,9 @@\n+2020-07-31  Richard Biener  <rguenther@suse.de>\n+\n+\tPR debug/96383\n+\t* c-objc-common.h (LANG_HOOKS_FINALIZE_EARLY_DEBUG):\n+\tDefine to c_common_finalize_early_debug.\n+\n 2020-07-22  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* c-parser.c (c_parser_omp_clause_hint): Require nonnegative hint clause."}, {"sha": "31d64bdd2355a41698a82f40b6ce85e39ba1e818", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48cc2e468cca54ae930e64be01f3b183df2198fb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48cc2e468cca54ae930e64be01f3b183df2198fb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=48cc2e468cca54ae930e64be01f3b183df2198fb", "patch": "@@ -1,3 +1,43 @@\n+2020-07-31  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/96182\n+\t* decl.c (finish_function): In constexpr functions use for C++14 and\n+\tlater error instead of warning if no return statement is present and\n+\tdiagnose it regardless of warn_return_type.  Move the warn_return_type\n+\tdiagnostics earlier in the function.\n+\n+2020-07-31  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/96003\n+\t* class.c (build_base_path): Set no-warning bit on the synthesized\n+\tconditional expression in static_cast.\n+\n+2020-07-31  Richard Biener  <rguenther@suse.de>\n+\n+\tPR debug/96383\n+\t* cp-objcp-common.h (LANG_HOOKS_FINALIZE_EARLY_DEBUG):\n+\tDefine to c_common_finalize_early_debug.\n+\n+2020-07-31  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/96197\n+\t* constexpr.c (cxx_eval_constant_expression) <case CONST_DECL>:\n+\tPass false to decl_constant_value and decl_really_constant_value\n+\tso that they don't unshare their result.\n+\t* cp-tree.h (decl_constant_value): New declaration with an added\n+\tbool parameter.\n+\t(decl_really_constant_value): Add bool parameter defaulting to\n+\ttrue to existing declaration.\n+\t* init.c (constant_value_1): Add bool parameter which controls\n+\twhether to unshare the initializer before returning.  Call\n+\tunshare_expr at most once.\n+\t(scalar_constant_value): Pass true to constant_value_1's new\n+\tbool parameter.\n+\t(decl_really_constant_value): Add bool parameter and forward it\n+\tto constant_value_1.\n+\t(decl_constant_value): Likewise, but instead define a new\n+\toverload with an added bool parameter.\n+\n 2020-07-30  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/64194"}, {"sha": "931460ca9836e35389fd63205995e374bdc20f8c", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48cc2e468cca54ae930e64be01f3b183df2198fb/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48cc2e468cca54ae930e64be01f3b183df2198fb/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=48cc2e468cca54ae930e64be01f3b183df2198fb", "patch": "@@ -1,3 +1,9 @@\n+2020-07-31  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/96393\n+\t* intrinsics.cc (expand_intrinsic_bt): Don't generate BIT_NOT_EXPR for\n+\tbtr32 intrinsic.\n+\n 2020-07-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \tPR d/96152"}, {"sha": "a5dd83018f6ad4f59c7f8548dec668e539bad400", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48cc2e468cca54ae930e64be01f3b183df2198fb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48cc2e468cca54ae930e64be01f3b183df2198fb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=48cc2e468cca54ae930e64be01f3b183df2198fb", "patch": "@@ -1,3 +1,134 @@\n+2020-07-31  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/96182\n+\t* g++.dg/cpp1y/constexpr-96182.C: New test.\n+\t* g++.dg/other/error35.C (S<T>::g()): Add return statement.\n+\t* g++.dg/cpp1y/pr63996.C (foo): Likewise.\n+\t* g++.dg/cpp1y/constexpr-return2.C (f): Likewise.\n+\t* g++.dg/cpp1y/var-templ44.C (make_array): Add throw 1.\n+\n+2020-07-31  Roger Sayle  <roger@nextmovesoftware.com>\n+\t    Tom de Vries  <tdevries@suse.de>\n+\n+\t* gcc.target/nvptx/v2si-cvt.c: Simplify source.  Remove\n+\tscan-assembler directives.  Mention PR96403.\n+\n+2020-07-31  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* gdc.dg/compilable.d: Removed.\n+\t* gdc.dg/gdc108.d: New test.\n+\t* gdc.dg/gdc115.d: New test.\n+\t* gdc.dg/gdc121.d: New test.\n+\t* gdc.dg/gdc122.d: New test.\n+\t* gdc.dg/gdc127.d: New test.\n+\t* gdc.dg/gdc131.d: New test.\n+\t* gdc.dg/gdc133.d: New test.\n+\t* gdc.dg/gdc141.d: New test.\n+\t* gdc.dg/gdc142.d: New test.\n+\t* gdc.dg/gdc15.d: New test.\n+\t* gdc.dg/gdc17.d: New test.\n+\t* gdc.dg/gdc170.d: New test.\n+\t* gdc.dg/gdc171.d: New test.\n+\t* gdc.dg/gdc179.d: New test.\n+\t* gdc.dg/gdc183.d: New test.\n+\t* gdc.dg/gdc186.d: New test.\n+\t* gdc.dg/gdc187.d: New test.\n+\t* gdc.dg/gdc19.d: New test.\n+\t* gdc.dg/gdc191.d: New test.\n+\t* gdc.dg/gdc194.d: New test.\n+\t* gdc.dg/gdc196.d: New test.\n+\t* gdc.dg/gdc198.d: New test.\n+\t* gdc.dg/gdc200.d: New test.\n+\t* gdc.dg/gdc204.d: New test.\n+\t* gdc.dg/gdc210.d: New test.\n+\t* gdc.dg/gdc212.d: New test.\n+\t* gdc.dg/gdc213.d: New test.\n+\t* gdc.dg/gdc218.d: New test.\n+\t* gdc.dg/gdc223.d: New test.\n+\t* gdc.dg/gdc231.d: New test.\n+\t* gdc.dg/gdc239.d: New test.\n+\t* gdc.dg/gdc24.d: New test.\n+\t* gdc.dg/gdc240.d: New test.\n+\t* gdc.dg/gdc241.d: New test.\n+\t* gdc.dg/gdc242a.d: New test.\n+\t* gdc.dg/gdc242b.d: New test.\n+\t* gdc.dg/gdc248.d: New test.\n+\t* gdc.dg/gdc250.d: New test.\n+\t* gdc.dg/gdc251.d: New test.\n+\t* gdc.dg/gdc253a.d: New test.\n+\t* gdc.dg/gdc253b.d: New test.\n+\t* gdc.dg/gdc255.d: New test.\n+\t* gdc.dg/gdc256.d: New test.\n+\t* gdc.dg/gdc261.d: New test.\n+\t* gdc.dg/gdc27.d: New test.\n+\t* gdc.dg/gdc273.d: New test.\n+\t* gdc.dg/gdc280.d: New test.\n+\t* gdc.dg/gdc284.d: New test.\n+\t* gdc.dg/gdc285.d: New test.\n+\t* gdc.dg/gdc286.d: New test.\n+\t* gdc.dg/gdc300.d: New test.\n+\t* gdc.dg/gdc309.d: New test.\n+\t* gdc.dg/gdc31.d: New test.\n+\t* gdc.dg/gdc35.d: New test.\n+\t* gdc.dg/gdc36.d: New test.\n+\t* gdc.dg/gdc37.d: New test.\n+\t* gdc.dg/gdc4.d: New test.\n+\t* gdc.dg/gdc43.d: New test.\n+\t* gdc.dg/gdc47.d: New test.\n+\t* gdc.dg/gdc51.d: New test.\n+\t* gdc.dg/gdc57.d: New test.\n+\t* gdc.dg/gdc66.d: New test.\n+\t* gdc.dg/gdc67.d: New test.\n+\t* gdc.dg/gdc71.d: New test.\n+\t* gdc.dg/gdc77.d: New test.\n+\t* gdc.dg/imports/gdc239.d: Remove phobos dependency.\n+\t* gdc.dg/imports/gdc241a.d: Updated imports.\n+\t* gdc.dg/imports/gdc241b.d: Likewise.\n+\t* gdc.dg/imports/gdc251a.d: Likewise.\n+\t* gdc.dg/imports/gdc253.d: Rename to...\n+\t* gdc.dg/imports/gdc253a.d: ...this.\n+\t* gdc.dg/imports/gdc253b.d: New.\n+\t* gdc.dg/imports/gdc36.d: New.\n+\t* gdc.dg/imports/runnable.d: Removed.\n+\t* gdc.dg/link.d: Removed.\n+\t* gdc.dg/runnable.d: Removed.\n+\t* gdc.dg/runnable2.d: Removed.\n+\t* gdc.dg/simd.d: Remove phobos dependency.\n+\n+2020-07-31  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/96003\n+\t* g++.dg/warn/Wnonnull7.C: New test.\n+\n+2020-07-31  Richard Biener  <rguenther@suse.de>\n+\n+\tPR debug/96383\n+\t* gcc.dg/debug/dwarf2/pr96383-1.c: New testcase.\n+\t* gcc.dg/debug/dwarf2/pr96383-2.c: Likewise.\n+\n+2020-07-31  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\t* gcc.target/aarch64/sve/cost_model_2.c: Adjust due to cost model\n+\tchange.\n+\n+2020-07-31  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/96369\n+\t* c-c++-common/pr96369.c: New testcase.\n+\n+2020-07-31  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc.dg/tree-prof/indir-call-prof-malloc.c: New test.\n+\n+2020-07-31  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/torture/20200727-0.c: New testcase.\n+\n+2020-07-31  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/96197\n+\t* g++.dg/cpp1y/constexpr-array8.C: New test.\n+\n 2020-07-30  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \tPR d/96152"}, {"sha": "a33ace94e90b013549f64f5e224bf7398fad4f6b", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48cc2e468cca54ae930e64be01f3b183df2198fb/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48cc2e468cca54ae930e64be01f3b183df2198fb/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=48cc2e468cca54ae930e64be01f3b183df2198fb", "patch": "@@ -1,3 +1,17 @@\n+2020-07-31  Maciej W. Rozycki  <macro@wdc.com>\n+\n+\t* config/riscv/save-restore.S [__riscv_xlen == 64]\n+\t(__riscv_save_10, __riscv_save_8, __riscv_save_6, __riscv_save_4)\n+\t(__riscv_save_2): Replace negative immediates used for the final\n+\tstack pointer adjustment with positive ones, right-shifted by 4.\n+\n+2020-07-31  Martin Liska  <mliska@suse.cz>\n+\n+\t* libgcov-driver.c: Add __gcov_kvp_pool\n+\tand __gcov_kvp_pool_index variables.\n+\t* libgcov.h (allocate_gcov_kvp): New.\n+\t(gcov_topn_add_value): Use it.\n+\n 2020-07-24  Szabolcs Nagy  <szabolcs.nagy@arm.com>\n \n \t* config/aarch64/lse.S: Add PAC property note."}, {"sha": "e39efc924ca5f563dd3104bd0ae21fce141f6c82", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 489, "deletions": 0, "changes": 489, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48cc2e468cca54ae930e64be01f3b183df2198fb/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48cc2e468cca54ae930e64be01f3b183df2198fb/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=48cc2e468cca54ae930e64be01f3b183df2198fb", "patch": "@@ -1,3 +1,492 @@\n+2020-07-31  Gerald Pfeifer  <gerald@pfeifer.com>\n+\n+\t* doc/xml/manual/status_cxx2017.xml: ParallelSTL is now part\n+\tof oneAPI DPC++ Library on Github.\n+\t* doc/html/manual/status.html: Regenerate.\n+\n+2020-07-31  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/bits/stl_bvector.h\n+\t[_GLIBCXX_INLINE_VERSION](_Bvector_impl_data::_M_start): Define as\n+\t_Bit_type*.\n+\t(_Bvector_impl_data(const _Bvector_impl_data&)): Default.\n+\t(_Bvector_impl_data(_Bvector_impl_data&&)): Delegate to latter.\n+\t(_Bvector_impl_data::operator=(const _Bvector_impl_data&)): Default.\n+\t(_Bvector_impl_data::_M_move_data(_Bvector_impl_data&&)): Use latter.\n+\t(_Bvector_impl_data::_M_reset()): Likewise.\n+\t(_Bvector_impl_data::_M_swap_data): New.\n+\t(_Bvector_impl::_Bvector_impl(_Bvector_impl&&)): Implement explicitely.\n+\t(_Bvector_impl::_Bvector_impl(_Bit_alloc_type&&, _Bvector_impl&&)): New.\n+\t(_Bvector_base::_Bvector_base(_Bvector_base&&, const allocator_type&)):\n+\tNew, use latter.\n+\t(vector::vector(vector&&, const allocator_type&, true_type)): New, use\n+\tlatter.\n+\t(vector::vector(vector&&, const allocator_type&, false_type)): New.\n+\t(vector::vector(vector&&, const allocator_type&)): Use latters.\n+\t(vector::vector(const vector&, const allocator_type&)): Adapt.\n+\t[__cplusplus >= 201103](vector::vector(_InputIt, _InputIt,\n+\tconst allocator_type&)): Use _M_initialize_range.\n+\t(vector::operator[](size_type)): Use iterator operator[].\n+\t(vector::operator[](size_type) const): Use const_iterator operator[].\n+\t(vector::swap(vector&)): Add assertions on allocators. Use _M_swap_data.\n+\t[__cplusplus >= 201103](vector::insert(const_iterator, _InputIt,\n+\t_InputIt)): Use _M_insert_range.\n+\t(vector::_M_initialize(size_type)): Adapt.\n+\t[__cplusplus >= 201103](vector::_M_initialize_dispatch): Remove.\n+\t[__cplusplus >= 201103](vector::_M_insert_dispatch): Remove.\n+\t* python/libstdcxx/v6/printers.py (StdVectorPrinter._iterator): Stop\n+\tusing start _M_offset.\n+\t(StdVectorPrinter.to_string): Likewise.\n+\t* testsuite/23_containers/vector/bool/allocator/swap.cc: Adapt.\n+\t* testsuite/23_containers/vector/bool/cons/noexcept_move_construct.cc:\n+\tAdd check.\n+\n+2020-07-31  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/27_io/basic_istream/ignore/char/94749.cc: Use 0\n+\tinstead of nullptr.\n+\t* testsuite/27_io/basic_istream/ignore/wchar_t/94749.cc:\n+\tLikewise.\n+\n+2020-07-31  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/20_util/specialized_algorithms/uninitialized_fill_n/sizes.cc:\n+\tMove struct to namespace scope.\n+\n+2020-07-31  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/26_numerics/numbers/float128.cc: Check\n+\t__STRICT_ANSI__ before using __float128.\n+\t* testsuite/std/concepts/concepts.lang/concept.arithmetic/floating_point.cc:\n+\tLikewise.\n+\n+2020-07-31  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/18_support/set_terminate.cc: Require C++11 or\n+\thigher.\n+\t* testsuite/28_regex/simple_c++11.cc: Likewise.\n+\t* testsuite/tr1/headers/c++200x/complex.cc: Likewise.\n+\t* testsuite/24_iterators/headers/iterator/synopsis.cc:\n+\tRequire C++14 or lower.\n+\n+2020-07-31  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/23_containers/span/back_assert_neg.cc: Split c++2a\n+\teffective-target from xfail selector.\n+\t* testsuite/23_containers/span/first_2_assert_neg.cc: Likewise.\n+\t* testsuite/23_containers/span/first_assert_neg.cc: Likewise.\n+\t* testsuite/23_containers/span/front_assert_neg.cc: Likewise.\n+\t* testsuite/23_containers/span/index_op_assert_neg.cc: Likewise.\n+\t* testsuite/23_containers/span/last_2_assert_neg.cc: Likewise.\n+\t* testsuite/23_containers/span/last_assert_neg.cc: Likewise.\n+\t* testsuite/23_containers/span/subspan_2_assert_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/span/subspan_3_assert_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/span/subspan_4_assert_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/span/subspan_5_assert_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/span/subspan_6_assert_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/span/subspan_assert_neg.cc: Likewise.\n+\n+2020-07-31  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/20_util/reference_wrapper/83427.cc: Adjust\n+\teffective-target to specific language mode only.\n+\t* testsuite/24_iterators/headers/iterator/range_access_c++11.cc:\n+\tLikewise.\n+\t* testsuite/24_iterators/headers/iterator/range_access_c++14.cc:\n+\tLikewise.\n+\t* testsuite/24_iterators/headers/iterator/synopsis_c++11.cc:\n+\tLikewise.\n+\t* testsuite/24_iterators/headers/iterator/synopsis_c++14.cc:\n+\tLikewise.\n+\t* testsuite/26_numerics/valarray/69116.cc:\n+\tLikewise.\n+\t* testsuite/30_threads/headers/condition_variable/std_c++0x_neg.cc:\n+\tRemove whitespace at end of file.\n+\t* testsuite/30_threads/headers/future/std_c++0x_neg.cc:\n+\tLikewise.\n+\n+2020-07-31  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/17_intro/headers/c++2017/all_attributes.cc: Add\n+\tc++17 effective-target.\n+\t* testsuite/17_intro/headers/c++2017/all_no_exceptions.cc:\n+\tLikewise.\n+\t* testsuite/17_intro/headers/c++2017/all_no_rtti.cc: Likewise.\n+\t* testsuite/17_intro/headers/c++2017/all_pedantic_errors.cc:\n+\tLikewise.\n+\t* testsuite/17_intro/headers/c++2017/operator_names.cc:\n+\tLikewise.\n+\t* testsuite/17_intro/headers/c++2017/stdc++.cc: Likewise.\n+\t* testsuite/17_intro/headers/c++2017/stdc++_multiple_inclusion.cc:\n+\tLikewise.\n+\t* testsuite/18_support/uncaught_exceptions/uncaught_exceptions.cc:\n+\tLikewise.\n+\t* testsuite/19_diagnostics/error_code/is_error_code_v.cc:\n+\tLikewise.\n+\t* testsuite/20_util/any/assign/1.cc: Likewise.\n+\t* testsuite/20_util/any/assign/2.cc: Likewise.\n+\t* testsuite/20_util/any/assign/emplace.cc: Likewise.\n+\t* testsuite/20_util/any/assign/exception.cc: Likewise.\n+\t* testsuite/20_util/any/assign/self.cc: Likewise.\n+\t* testsuite/20_util/any/cons/1.cc: Likewise.\n+\t* testsuite/20_util/any/cons/2.cc: Likewise.\n+\t* testsuite/20_util/any/cons/aligned.cc: Likewise.\n+\t* testsuite/20_util/any/cons/explicit.cc: Likewise.\n+\t* testsuite/20_util/any/cons/in_place.cc: Likewise.\n+\t* testsuite/20_util/any/cons/nontrivial.cc: Likewise.\n+\t* testsuite/20_util/any/make_any.cc: Likewise.\n+\t* testsuite/20_util/any/misc/any_cast.cc: Likewise.\n+\t* testsuite/20_util/any/misc/any_cast_no_rtti.cc: Likewise.\n+\t* testsuite/20_util/any/misc/swap.cc: Likewise.\n+\t* testsuite/20_util/any/modifiers/1.cc: Likewise.\n+\t* testsuite/20_util/any/observers/type.cc: Likewise.\n+\t* testsuite/20_util/any/requirements.cc: Likewise.\n+\t* testsuite/20_util/any/typedefs.cc: Likewise.\n+\t* testsuite/20_util/as_const/1.cc: Likewise.\n+\t* testsuite/20_util/as_const/rvalue_neg.cc: Likewise.\n+\t* testsuite/20_util/bind/is_placeholder_v.cc: Likewise.\n+\t* testsuite/20_util/bool_constant/requirements.cc: Likewise.\n+\t* testsuite/20_util/duration/requirements/treat_as_floating_point_v.cc:\n+\tLikewise.\n+\t* testsuite/20_util/duration_cast/rounding.cc: Likewise.\n+\t* testsuite/20_util/enable_shared_from_this/members/weak_from_this.cc:\n+\tLikewise.\n+\t* testsuite/20_util/function_objects/invoke/59768.cc: Likewise.\n+\t* testsuite/20_util/function_objects/not_fn/1.cc: Likewise.\n+\t* testsuite/20_util/function_objects/searchers.cc: Likewise.\n+\t* testsuite/20_util/in_place/requirements.cc: Likewise.\n+\t* testsuite/20_util/is_invocable/requirements/explicit_instantiation.cc:\n+\tLikewise.\n+\t* testsuite/20_util/is_invocable/requirements/typedefs.cc:\n+\tLikewise.\n+\t* testsuite/20_util/is_invocable/value.cc: Likewise.\n+\t* testsuite/20_util/is_nothrow_invocable/requirements/explicit_instantiation.cc:\n+\tLikewise.\n+\t* testsuite/20_util/is_nothrow_invocable/requirements/typedefs.cc:\n+\tLikewise.\n+\t* testsuite/20_util/is_nothrow_swappable/requirements/explicit_instantiation.cc:\n+\tLikewise.\n+\t* testsuite/20_util/is_nothrow_swappable/requirements/typedefs.cc:\n+\tLikewise.\n+\t* testsuite/20_util/is_nothrow_swappable/value.cc: Likewise.\n+\t* testsuite/20_util/is_nothrow_swappable_with/requirements/explicit_instantiation.cc:\n+\tLikewise.\n+\t* testsuite/20_util/is_nothrow_swappable_with/requirements/typedefs.cc:\n+\tLikewise.\n+\t* testsuite/20_util/is_nothrow_swappable_with/value.cc:\n+\tLikewise.\n+\t* testsuite/20_util/is_swappable/requirements/explicit_instantiation.cc:\n+\tLikewise.\n+\t* testsuite/20_util/is_swappable/requirements/typedefs.cc:\n+\tLikewise.\n+\t* testsuite/20_util/is_swappable/value.cc: Likewise.\n+\t* testsuite/20_util/is_swappable_with/requirements/explicit_instantiation.cc:\n+\tLikewise.\n+\t* testsuite/20_util/is_swappable_with/requirements/typedefs.cc:\n+\tLikewise.\n+\t* testsuite/20_util/is_swappable_with/value.cc: Likewise.\n+\t* testsuite/20_util/logical_traits/requirements/explicit_instantiation.cc:\n+\tLikewise.\n+\t* testsuite/20_util/logical_traits/requirements/typedefs.cc:\n+\tLikewise.\n+\t* testsuite/20_util/logical_traits/value.cc: Likewise.\n+\t* testsuite/20_util/optional/constexpr/make_optional.cc: Likewise.\n+\t* testsuite/20_util/optional/constexpr/observers/2.cc: Likewise.\n+\t* testsuite/20_util/optional/constexpr/observers/3.cc: Likewise.\n+\t* testsuite/20_util/optional/hash.cc: Likewise.\n+\t* testsuite/20_util/pair/swap_cxx17.cc: Likewise.\n+\t* testsuite/20_util/ratio/requirements/ratio_equal_v.cc: Likewise.\n+\t* testsuite/20_util/shared_ptr/requirements/weak_type.cc:\n+\tLikewise.\n+\t* testsuite/20_util/specialized_algorithms/memory_management_tools/1.cc:\n+\tLikewise.\n+\t* testsuite/20_util/tuple/apply/1.cc: Likewise.\n+\t* testsuite/20_util/tuple/make_from_tuple/1.cc: Likewise.\n+\t* testsuite/20_util/tuple/swap_cxx17.cc: Likewise.\n+\t* testsuite/20_util/tuple/tuple_size_v.cc: Likewise.\n+\t* testsuite/20_util/unique_ptr/specialized_algorithms/swap_cxx17.cc:\n+\tLikewise.\n+\t* testsuite/20_util/uses_allocator/requirements/uses_allocator_v.cc:\n+\tLikewise.\n+\t* testsuite/20_util/variant/any.cc: Likewise.\n+\t* testsuite/20_util/variant/compile.cc: Likewise.\n+\t* testsuite/20_util/variant/hash.cc: Likewise.\n+\t* testsuite/20_util/variant/index_type.cc: Likewise.\n+\t* testsuite/20_util/variant/run.cc: Likewise.\n+\t* testsuite/20_util/void_t/1.cc: Likewise.\n+\t* testsuite/21_strings/basic_string/79162.cc: Likewise.\n+\t* testsuite/21_strings/basic_string/cons/char/7.cc: Likewise.\n+\t* testsuite/21_strings/basic_string/cons/wchar_t/7.cc: Likewise.\n+\t* testsuite/21_strings/basic_string/lwg2758.cc: Likewise.\n+\t* testsuite/21_strings/basic_string/lwg2946.cc: Likewise.\n+\t* testsuite/21_strings/basic_string/modifiers/append/char/4.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/modifiers/append/wchar_t/4.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/modifiers/assign/char/4.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/modifiers/assign/wchar_t/4.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/modifiers/insert/char/3.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/modifiers/insert/wchar_t/3.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/modifiers/replace/char/7.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/modifiers/replace/wchar_t/7.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/operations/compare/char/2.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/operations/compare/wchar_t/2.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/operations/data/char/2.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/operations/data/wchar_t/2.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/operations/find/char/5.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/operations/find/wchar_t/5.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/operators/char/5.cc: Likewise.\n+\t* testsuite/21_strings/basic_string/operators/wchar_t/5.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/capacity/1.cc: Likewise.\n+\t* testsuite/21_strings/basic_string_view/cons/char/1.cc: Likewise.\n+\t* testsuite/21_strings/basic_string_view/cons/char/2.cc: Likewise.\n+\t* testsuite/21_strings/basic_string_view/cons/char/3.cc: Likewise.\n+\t* testsuite/21_strings/basic_string_view/cons/wchar_t/1.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/cons/wchar_t/2.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/cons/wchar_t/3.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/element_access/char/1.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/element_access/char/2.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/element_access/char/empty.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/element_access/char/front_back.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/element_access/wchar_t/1.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/element_access/wchar_t/2.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/element_access/wchar_t/empty.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/element_access/wchar_t/front_back.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/include.cc: Likewise.\n+\t* testsuite/21_strings/basic_string_view/inserters/char/1.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/inserters/char/2.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/inserters/char/3.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/inserters/pod/10081-out.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/inserters/wchar_t/1.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/inserters/wchar_t/2.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/inserters/wchar_t/3.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/literals/types-char8_t.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/literals/types.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/literals/values-char8_t.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/literals/values.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/modifiers/remove_prefix/char/1.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/modifiers/remove_prefix/wchar_t/1.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/modifiers/remove_suffix/char/1.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/modifiers/remove_suffix/wchar_t/1.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/operations/compare/char/1.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/operations/compare/char/13650.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/operations/compare/wchar_t/1.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/operations/compare/wchar_t/13650.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/operations/copy/char/1.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/operations/copy/wchar_t/1.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/operations/data/char/1.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/operations/data/wchar_t/1.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/operations/find/char/1.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/operations/find/char/2.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/operations/find/char/3.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/operations/find/char/4.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/operations/find/wchar_t/1.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/operations/find/wchar_t/2.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/operations/find/wchar_t/3.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/operations/find/wchar_t/4.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/operations/rfind/char/1.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/operations/rfind/char/2.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/operations/rfind/char/3.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/operations/rfind/wchar_t/1.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/operations/rfind/wchar_t/2.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/operations/rfind/wchar_t/3.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/operations/string_conversion/1.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/operations/substr/char/1.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/operations/substr/wchar_t/1.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/range_access/char/1.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/range_access/wchar_t/1.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/requirements/explicit_instantiation/1.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/requirements/explicit_instantiation/char/1.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/requirements/explicit_instantiation/char16_t/1.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/requirements/explicit_instantiation/char32_t/1.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/requirements/explicit_instantiation/char8_t/1.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/requirements/explicit_instantiation/wchar_t/1.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/requirements/typedefs.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/typedefs.cc: Likewise.\n+\t* testsuite/21_strings/basic_string_view/types/1.cc: Likewise.\n+\t* testsuite/23_containers/array/specialized_algorithms/swap_cxx17.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/map/modifiers/extract.cc: Likewise.\n+\t* testsuite/23_containers/map/modifiers/insert_or_assign/1.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/map/modifiers/merge.cc: Likewise.\n+\t* testsuite/23_containers/map/modifiers/try_emplace/1.cc: Likewise.\n+\t* testsuite/23_containers/multimap/modifiers/extract.cc: Likewise.\n+\t* testsuite/23_containers/multimap/modifiers/merge.cc: Likewise.\n+\t* testsuite/23_containers/multiset/modifiers/extract.cc: Likewise.\n+\t* testsuite/23_containers/multiset/modifiers/merge.cc: Likewise.\n+\t* testsuite/23_containers/set/modifiers/extract.cc: Likewise.\n+\t* testsuite/23_containers/set/modifiers/merge.cc: Likewise.\n+\t* testsuite/23_containers/unordered_map/modifiers/extract.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/unordered_map/modifiers/insert_or_assign.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/unordered_map/modifiers/merge.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/unordered_map/modifiers/try_emplace.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/unordered_multimap/modifiers/extract.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/unordered_multimap/modifiers/merge.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/unordered_multiset/modifiers/extract.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/unordered_multiset/modifiers/merge.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/unordered_set/modifiers/extract.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/unordered_set/modifiers/merge.cc:\n+\tLikewise.\n+\t* testsuite/24_iterators/headers/iterator/range_access_c++17.cc:\n+\tLikewise.\n+\t* testsuite/24_iterators/headers/iterator/synopsis_c++17.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/clamp/1.cc: Likewise.\n+\t* testsuite/25_algorithms/clamp/2.cc: Likewise.\n+\t* testsuite/25_algorithms/clamp/constexpr.cc: Likewise.\n+\t* testsuite/25_algorithms/clamp/requirements/explicit_instantiation/1.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/clamp/requirements/explicit_instantiation/pod.cc:\n+\tLikewise.\n+\t* testsuite/26_numerics/headers/cmath/functions_std_c++17.cc:\n+\tLikewise.\n+\t* testsuite/26_numerics/headers/cmath/special_functions_global.cc:\n+\tLikewise.\n+\t* testsuite/27_io/basic_ostream/inserters_other/char/lwg2221.cc:\n+\tLikewise.\n+\t* testsuite/29_atomics/atomic/is_always_lock_free.cc: Likewise.\n+\t* testsuite/29_atomics/atomic_integral/is_always_lock_free.cc:\n+\tLikewise.\n+\t* testsuite/30_threads/shared_lock/70766.cc: Likewise.\n+\t* testsuite/30_threads/shared_mutex/cons/1.cc: Likewise.\n+\t* testsuite/30_threads/shared_mutex/cons/assign_neg.cc:\n+\tLikewise.\n+\t* testsuite/30_threads/shared_mutex/cons/copy_neg.cc:\n+\tLikewise.\n+\t* testsuite/30_threads/shared_mutex/requirements/standard_layout.cc:\n+\tLikewise.\n+\t* testsuite/30_threads/shared_mutex/try_lock/1.cc: Likewise.\n+\t* testsuite/30_threads/shared_mutex/try_lock/2.cc: Likewise.\n+\t* testsuite/30_threads/shared_mutex/unlock/1.cc: Likewise.\n+\n+2020-07-31  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/96382\n+\t* include/bits/stl_iterator.h (reverse_iterator): Friend\n+\tdeclaration should not depend on __cplusplus.\n+\n+2020-07-31  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/experimental/filesystem/filesystem_error/cons.cc:\n+\tRemove -std=gnu++17 option.\n+\n+2020-07-31  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/20_util/is_aggregate/value.cc: Adjust for changes to\n+\tdefinition of aggregates in C++20.\n+\t* testsuite/20_util/optional/requirements.cc: Adjust for\n+\tdefaulted comparisons in C++20.\n+\n+2020-07-31  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/20_util/tuple/78939.cc: Suppress warnings about\n+\tdeprecation of volatile-qualified structured bindings in C++20.\n+\t* testsuite/20_util/variable_templates_for_traits.cc: Likewise\n+\tfor deprecation of is_pod in C++20\n+\n+2020-07-31  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/20_util/time_point_cast/rounding.cc: Remove\n+\tduplicate dg-do directive and add c++17 effective target.\n+\n+2020-07-31  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* src/c++17/floating_from_chars.cc (from_chars_impl): Use\n+\tLC_ALL_MASK not LC_ALL.\n+\n+2020-07-31  Richard Biener  <rguenther@suse.de>\n+\n+\tPR debug/96383\n+\t* testsuite/20_util/assume_aligned/3.cc: Use -g0.\n+\n 2020-07-30  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/basic_string.h (size_type, difference_type):"}]}