{"sha": "39b0dce71c324c057e2fdc49fbc3b83159eccca1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzliMGRjZTcxYzMyNGMwNTdlMmZkYzQ5ZmJjM2I4MzE1OWVjY2NhMQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@casey.cygnus.com", "date": "2000-04-25T23:31:50Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-04-25T23:31:50Z"}, "message": "calls.c (expand_call): Use get_callee_fndecl.\n\n        * calls.c (expand_call): Use get_callee_fndecl.\n\n        * print-tree.c (print_node): Print the chain of an _EXPR.\n\nFrom-SVN: r33426", "tree": {"sha": "d58047b2f46568a534cc768e8a047a2ce53a3efd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d58047b2f46568a534cc768e8a047a2ce53a3efd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39b0dce71c324c057e2fdc49fbc3b83159eccca1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39b0dce71c324c057e2fdc49fbc3b83159eccca1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39b0dce71c324c057e2fdc49fbc3b83159eccca1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39b0dce71c324c057e2fdc49fbc3b83159eccca1/comments", "author": null, "committer": null, "parents": [{"sha": "89a75b6d831bfdf05bbf383cb6929a8bb2d2cb0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89a75b6d831bfdf05bbf383cb6929a8bb2d2cb0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89a75b6d831bfdf05bbf383cb6929a8bb2d2cb0a"}], "stats": {"total": 62, "additions": 33, "deletions": 29}, "files": [{"sha": "a428caa06eb21887b20efa453ce6ea5ef50c3254", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39b0dce71c324c057e2fdc49fbc3b83159eccca1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39b0dce71c324c057e2fdc49fbc3b83159eccca1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=39b0dce71c324c057e2fdc49fbc3b83159eccca1", "patch": "@@ -1,3 +1,9 @@\n+2000-04-26  Jason Merrill  <jason@casey.cygnus.com>\n+\n+\t* calls.c (expand_call): Use get_callee_fndecl.\n+\n+\t* print-tree.c (print_node): Print the chain of an _EXPR.\n+\n Tue Apr 25 16:16:04 2000  Andrew MacLeod  <amacleod@cygnus.com>\n \t\t\t  Jim Wilson  <wilson@cygnus.com>\n \t\t\t  Andrew Haley  <aph@cygnus.com>"}, {"sha": "c9814c7fbb5551d4b4a9de3174a70c24228e4290", "filename": "gcc/calls.c", "status": "modified", "additions": 26, "deletions": 29, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39b0dce71c324c057e2fdc49fbc3b83159eccca1/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39b0dce71c324c057e2fdc49fbc3b83159eccca1/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=39b0dce71c324c057e2fdc49fbc3b83159eccca1", "patch": "@@ -1982,44 +1982,41 @@ expand_call (exp, target, ignore)\n   /* See if we can find a DECL-node for the actual function.\n      As a result, decide whether this is a call to an integrable function.  */\n \n-  p = TREE_OPERAND (exp, 0);\n-  if (TREE_CODE (p) == ADDR_EXPR)\n+  fndecl = get_callee_fndecl (exp);\n+  if (fndecl)\n     {\n-      fndecl = TREE_OPERAND (p, 0);\n-      if (TREE_CODE (fndecl) != FUNCTION_DECL)\n-\tfndecl = 0;\n-      else\n+      if (!flag_no_inline\n+\t  && fndecl != current_function_decl\n+\t  && DECL_INLINE (fndecl)\n+\t  && DECL_SAVED_INSNS (fndecl)\n+\t  && DECL_SAVED_INSNS (fndecl)->inlinable)\n+\tis_integrable = 1;\n+      else if (! TREE_ADDRESSABLE (fndecl))\n \t{\n-\t  if (!flag_no_inline\n-\t      && fndecl != current_function_decl\n-\t      && DECL_INLINE (fndecl)\n-\t      && DECL_SAVED_INSNS (fndecl)\n-\t      && DECL_SAVED_INSNS (fndecl)->inlinable)\n-\t    is_integrable = 1;\n-\t  else if (! TREE_ADDRESSABLE (fndecl))\n-\t    {\n-\t      /* In case this function later becomes inlinable,\n-\t\t record that there was already a non-inline call to it.\n+\t  /* In case this function later becomes inlinable,\n+\t     record that there was already a non-inline call to it.\n \n-\t\t Use abstraction instead of setting TREE_ADDRESSABLE\n-\t\t directly.  */\n-\t      if (DECL_INLINE (fndecl) && warn_inline && !flag_no_inline\n-\t\t  && optimize > 0)\n-\t\t{\n-\t\t  warning_with_decl (fndecl, \"can't inline call to `%s'\");\n-\t\t  warning (\"called from here\");\n-\t\t}\n-\t      mark_addressable (fndecl);\n+\t     Use abstraction instead of setting TREE_ADDRESSABLE\n+\t     directly.  */\n+\t  if (DECL_INLINE (fndecl) && warn_inline && !flag_no_inline\n+\t      && optimize > 0)\n+\t    {\n+\t      warning_with_decl (fndecl, \"can't inline call to `%s'\");\n+\t      warning (\"called from here\");\n \t    }\n-\n-\t  flags |= flags_from_decl_or_type (fndecl);\n+\t  mark_addressable (fndecl);\n \t}\n+\n+      flags |= flags_from_decl_or_type (fndecl);\n     }\n \n   /* If we don't have specific function to call, see if we have a \n      attributes set in the type.  */\n-  if (fndecl == 0)\n-    flags |= flags_from_decl_or_type (TREE_TYPE (TREE_TYPE (p)));\n+  else\n+    {\n+      p = TREE_OPERAND (exp, 0);\n+      flags |= flags_from_decl_or_type (TREE_TYPE (TREE_TYPE (p)));\n+    }\n \n #ifdef REG_PARM_STACK_SPACE\n #ifdef MAYBE_REG_PARM_STACK_SPACE"}, {"sha": "e86a51cf9747d62aa77b9d3a7d53b27f46ade0a1", "filename": "gcc/print-tree.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39b0dce71c324c057e2fdc49fbc3b83159eccca1/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39b0dce71c324c057e2fdc49fbc3b83159eccca1/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=39b0dce71c324c057e2fdc49fbc3b83159eccca1", "patch": "@@ -613,6 +613,7 @@ print_node (file, prefix, node, indent)\n \t\t    EXPR_WFL_FILENAME (node) : \"(no file info)\"),\n \t\t   EXPR_WFL_LINENO (node), EXPR_WFL_COLNO (node));\n \t}\n+      print_node (file, \"chain\", BLOCK_CHAIN (node), indent + 4);\n       break;\n \n     case 'c':"}]}