{"sha": "337d1fec361442eb173d834e4bb8ac6811397a1a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzM3ZDFmZWMzNjE0NDJlYjE3M2Q4MzRlNGJiOGFjNjgxMTM5N2ExYQ==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2019-03-28T16:18:49Z"}, "committer": {"name": "Ville Voutilainen", "email": "ville@gcc.gnu.org", "date": "2019-03-28T16:18:49Z"}, "message": "Don't revisit a variant we are already visiting.\n\n* include/std/variant (__variant_construct_single): New.\n(__variant_construct): Use it.\n(_M_destructive_move): Likewise.\n(_M_destructive_copy): Likewise.\n(_Copy_assign_base::operator=): Adjust.\n(_Move_assign_base::operator=): Likewise.\n(swap): Likewise.\n\nFrom-SVN: r269996", "tree": {"sha": "cfc230a2f967e0929ecffa310367479e54e4f810", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cfc230a2f967e0929ecffa310367479e54e4f810"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/337d1fec361442eb173d834e4bb8ac6811397a1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/337d1fec361442eb173d834e4bb8ac6811397a1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/337d1fec361442eb173d834e4bb8ac6811397a1a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/337d1fec361442eb173d834e4bb8ac6811397a1a/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7a53bdbb164f5a216f13801c1abbaa8c08c81f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7a53bdbb164f5a216f13801c1abbaa8c08c81f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7a53bdbb164f5a216f13801c1abbaa8c08c81f1"}], "stats": {"total": 142, "additions": 86, "deletions": 56}, "files": [{"sha": "c7b47d8427f9951ad64782531a180d0e2a7bd5c6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/337d1fec361442eb173d834e4bb8ac6811397a1a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/337d1fec361442eb173d834e4bb8ac6811397a1a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=337d1fec361442eb173d834e4bb8ac6811397a1a", "patch": "@@ -1,3 +1,14 @@\n+2019-03-28  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tDon't revisit a variant we are already visiting.\n+\t* include/std/variant (__variant_construct_single): New.\n+\t(__variant_construct): Use it.\n+\t(_M_destructive_move): Likewise.\n+\t(_M_destructive_copy): Likewise.\n+\t(_Copy_assign_base::operator=): Adjust.\n+\t(_Move_assign_base::operator=): Likewise.\n+\t(swap): Likewise.\n+\n 2019-03-26  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/85965"}, {"sha": "7fd694714ad028d1aed9e5d56ed97132fe6a738f", "filename": "libstdc++-v3/include/std/variant", "status": "modified", "additions": 75, "deletions": 56, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/337d1fec361442eb173d834e4bb8ac6811397a1a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/337d1fec361442eb173d834e4bb8ac6811397a1a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant?ref=337d1fec361442eb173d834e4bb8ac6811397a1a", "patch": "@@ -428,20 +428,25 @@ namespace __variant\n     using _Variant_storage_alias =\n \t_Variant_storage<_Traits<_Types...>::_S_trivial_dtor, _Types...>;\n \n+  template<typename _Tp, typename _Up>\n+    void __variant_construct_single(_Tp&& __lhs, _Up&& __rhs_mem)\n+    {\n+      void* __storage = std::addressof(__lhs._M_u);\n+      using _Type = remove_reference_t<decltype(__rhs_mem)>;\n+      if constexpr (!is_same_v<_Type, __variant_cookie>)\n+        ::new (__storage)\n+\t  _Type(std::forward<decltype(__rhs_mem)>(__rhs_mem));\n+    }\n+\n   template<typename... _Types, typename _Tp, typename _Up>\n     void __variant_construct(_Tp&& __lhs, _Up&& __rhs)\n     {\n       __lhs._M_index = __rhs._M_index;\n-      void* __storage = std::addressof(__lhs._M_u);\n-      __do_visit([__storage](auto&& __rhs_mem) mutable\n+      __do_visit([&__lhs](auto&& __rhs_mem) mutable\n \t\t -> __detail::__variant::__variant_cookie\n         {\n-\t  using _Type = remove_reference_t<decltype(__rhs_mem)>;\n-\t  if constexpr (is_same_v<__remove_cvref_t<decltype(__rhs_mem)>,\n-\t\t\t          remove_cv_t<_Type>>\n-\t\t\t&& !is_same_v<_Type, __variant_cookie>)\n-\t    ::new (__storage)\n-\t      _Type(std::forward<decltype(__rhs_mem)>(__rhs_mem));\n+\t  __variant_construct_single(std::forward<_Tp>(__lhs),\n+\t\t\t\t     std::forward<decltype(__rhs_mem)>(__rhs_mem));\n \t  return {};\n \t}, __variant_cast<_Types...>(std::forward<decltype(__rhs)>(__rhs)));\n     }\n@@ -490,34 +495,38 @@ namespace __variant\n \t  std::forward<_Move_ctor_base>(__rhs));\n       }\n \n-      void _M_destructive_move(_Move_ctor_base&& __rhs)\n-      {\n-\tthis->_M_reset();\n-\t__try\n-\t  {\n-\t    __variant_construct<_Types...>(*this,\n-\t      std::forward<_Move_ctor_base>(__rhs));\n-\t  }\n-\t__catch (...)\n-\t  {\n-\t    this->_M_index = variant_npos;\n-\t    __throw_exception_again;\n-\t  }\n-      }\n+      template<typename _Up>\n+        void _M_destructive_move(unsigned short __rhs_index, _Up&& __rhs)\n+        {\n+\t  this->_M_reset();\n+\t  this->_M_index = __rhs_index;\n+\t  __try\n+\t    {\n+\t      __variant_construct_single(*this,\n+\t\t\t\t\t std::forward<_Up>(__rhs));\n+\t    }\n+\t  __catch (...)\n+\t    {\n+\t      this->_M_index = variant_npos;\n+\t      __throw_exception_again;\n+\t    }\n+\t}\n \n-      void _M_destructive_copy(const _Move_ctor_base& __rhs)\n-      {\n-\tthis->_M_reset();\n-\t__try\n-\t  {\n-\t    __variant_construct<_Types...>(*this, __rhs);\n-\t  }\n-\t__catch (...)\n-\t  {\n-\t    this->_M_index = variant_npos;\n-\t    __throw_exception_again;\n-\t  }\n-      }\n+      template<typename _Up>\n+        void _M_destructive_copy(unsigned short __rhs_index, const _Up& __rhs)\n+        {\n+\t  this->_M_reset();\n+\t  this->_M_index = __rhs_index;\n+\t  __try\n+\t    {\n+\t      __variant_construct_single(*this, __rhs);\n+\t    }\n+\t  __catch (...)\n+\t    {\n+\t      this->_M_index = variant_npos;\n+\t      __throw_exception_again;\n+\t    }\n+\t}\n \n       _Move_ctor_base(const _Move_ctor_base&) = default;\n       _Move_ctor_base& operator=(const _Move_ctor_base&) = default;\n@@ -530,17 +539,21 @@ namespace __variant\n       using _Base = _Copy_ctor_alias<_Types...>;\n       using _Base::_Base;\n \n-      void _M_destructive_move(_Move_ctor_base&& __rhs)\n-      {\n-\tthis->_M_reset();\n-\t__variant_construct<_Types...>(*this,\n-          std::forward<_Move_ctor_base>(__rhs));\n-      }\n-      void _M_destructive_copy(const _Move_ctor_base& __rhs)\n-      {\n-\tthis->_M_reset();\n-\t__variant_construct<_Types...>(*this, __rhs);\n-      }\n+      template<typename _Up>\n+        void _M_destructive_move(unsigned short __rhs_index, _Up&& __rhs)\n+        {\n+\t  this->_M_reset();\n+\t  this->_M_index = __rhs_index;\n+\t  __variant_construct_single(*this,\n+\t\t\t\t     std::forward<_Up>(__rhs));\n+\t}\n+      template<typename _Up>\n+        void _M_destructive_copy(unsigned short __rhs_index, const _Up& __rhs)\n+        {\n+\t  this->_M_reset();\n+\t  this->_M_index = __rhs_index;\n+\t  __variant_construct_single(*this, __rhs);\n+\t}\n     };\n \n   template<typename... _Types>\n@@ -580,12 +593,13 @@ namespace __variant\n \t\t    if constexpr (is_nothrow_copy_constructible_v<__rhs_type>\n \t\t      || !is_nothrow_move_constructible_v<__rhs_type>)\n \t\t      {\n-\t\t\tthis->_M_destructive_copy(__rhs);\n+\t\t\tthis->_M_destructive_copy(__rhs._M_index, __rhs_mem);\n \t\t      }\n \t\t    else\n \t\t      {\n-\t\t\t_Copy_assign_base __tmp(__rhs);\n-\t\t\tthis->_M_destructive_move(std::move(__tmp));\n+\t\t\tauto __tmp(__rhs_mem);\n+\t\t\tthis->_M_destructive_move(__rhs._M_index,\n+\t\t\t\t\t\t  std::move(__tmp));\n \t\t      }\n \t\t  }\n \t\telse\n@@ -641,8 +655,8 @@ namespace __variant\n \t      }\n \t    else\n \t      {\n-\t\t_Move_assign_base __tmp(std::move(__rhs));\n-\t\tthis->_M_destructive_move(std::move(__tmp));\n+\t\tauto __tmp(std::move(__rhs_mem));\n+\t\tthis->_M_destructive_move(__rhs._M_index, std::move(__tmp));\n \t      }\n \t  return {};\n \t}, __variant_cast<_Types...>(*this), __variant_cast<_Types...>(__rhs));\n@@ -1409,21 +1423,26 @@ namespace __variant\n \t\t\t        remove_reference_t<decltype(__this_mem)>,\n \t\t\t        __detail::__variant::__variant_cookie>)\n \t\t  {\n-\t\t    this->_M_destructive_move(std::move(__rhs));\n+\t\t    this->_M_destructive_move(__rhs.index(),\n+\t\t\t\t\t      std::move(__rhs_mem));\n \t\t    __rhs._M_reset();\n \t\t  }\n \t\telse if constexpr (is_same_v<\n \t\t\t             remove_reference_t<decltype(__rhs_mem)>,\n \t\t\t             __detail::__variant::__variant_cookie>)\n \t\t  {\n-\t\t    __rhs._M_destructive_move(std::move(*this));\n+\t\t    __rhs._M_destructive_move(this->index(),\n+\t\t\t\t\t      std::move(__this_mem));\n \t\t    this->_M_reset();\n \t\t  }\n \t\telse\n \t\t  {\n-\t\t    auto __tmp = std::move(__rhs);\n-\t\t    __rhs._M_destructive_move(std::move(*this));\n-\t\t    this->_M_destructive_move(std::move(__tmp));\n+\t\t    auto __tmp(std::move(__rhs_mem));\n+\t\t    auto __idx = __rhs.index();\n+\t\t    __rhs._M_destructive_move(this->index(),\n+\t\t\t\t\t      std::move(__this_mem));\n+\t\t    this->_M_destructive_move(__idx,\n+\t\t\t\t\t      std::move(__tmp));\n \t\t  }\n \t      }\n \t  return {};"}]}