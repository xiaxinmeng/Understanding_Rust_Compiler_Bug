{"sha": "ebf0bf7f49c75c98d4c51e8c451eae068a2dd647", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWJmMGJmN2Y0OWM3NWM5OGQ0YzUxZThjNDUxZWFlMDY4YTJkZDY0Nw==", "commit": {"author": {"name": "Janis Johnson", "email": "janis187@us.ibm.com", "date": "2010-01-21T05:49:35Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-01-21T05:49:35Z"}, "message": "tree.h (TYPE_TRANSPARENT_UNION): Replace with ...\n\n\t* tree.h (TYPE_TRANSPARENT_UNION): Replace with ...\n\t(TYPE_TRANSPARENT_AGGR): this, for union and record.\n\t* calls.c (initialize argument_information): Handle it.\n\t* c-common.c (handle_transparent_union_attribute): Use new name.\n\t* c-decl.c (finish_struct): Ditto.\n\t* c-typeck.c (type_lists_compatible_p): Ditto.\n\t(convert_for_assignment): Use new name and also handle record.\n\t* function.c (aggregate_value_p): Handle it.\n\t(pass_by_reference): Ditto.\n\t(assign_parm_data_types): Ditto.\n\t* print-tree.c (print_node): Ditto.\n\t* lto-streamer-in.c (unpack_ts_type_value_fields): Ditto.\n\t* lto-streamer-out.c (pack_ts_type_value_fields): Ditto.\n\t* tree.c (first_field): New fn.\n\ngcc/cp/\n\t* mangle.c (write_type): Mangle transparent record as member type.\n\t* semantics.c (begin_class_definition): Recognize decimal classes\n\tand set TYPE_TRANSPARENT_AGGR.\n\nCo-Authored-By: Jason Merrill <jason@redhat.com>\n\nFrom-SVN: r156106", "tree": {"sha": "3bec735a0f06546a748f8a6b206f44f1a8b31297", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3bec735a0f06546a748f8a6b206f44f1a8b31297"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/comments", "author": null, "committer": null, "parents": [{"sha": "907c6efdbc255042ab1ece9179511b78f426cb00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/907c6efdbc255042ab1ece9179511b78f426cb00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/907c6efdbc255042ab1ece9179511b78f426cb00"}], "stats": {"total": 1268, "additions": 1238, "deletions": 30}, "files": [{"sha": "90061ec7f5a87aa184cd559caca0c154421809eb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ebf0bf7f49c75c98d4c51e8c451eae068a2dd647", "patch": "@@ -1,3 +1,21 @@\n+2010-01-20  Janis Johnson  <janis187@us.ibm.com>\n+\t    Jason Merrill  <jason@redhat.com>\n+\n+\t* tree.h (TYPE_TRANSPARENT_UNION): Replace with ...\n+\t(TYPE_TRANSPARENT_AGGR): this, for union and record.\n+\t* calls.c (initialize argument_information): Handle it.\n+\t* c-common.c (handle_transparent_union_attribute): Use new name.\n+\t* c-decl.c (finish_struct): Ditto.\n+\t* c-typeck.c (type_lists_compatible_p): Ditto.\n+\t(convert_for_assignment): Use new name and also handle record.\n+\t* function.c (aggregate_value_p): Handle it.\n+\t(pass_by_reference): Ditto.\n+\t(assign_parm_data_types): Ditto.\n+\t* print-tree.c (print_node): Ditto.\n+\t* lto-streamer-in.c (unpack_ts_type_value_fields): Ditto.\n+\t* lto-streamer-out.c (pack_ts_type_value_fields): Ditto.\n+\t* tree.c (first_field): New fn.\n+\n 2010-01-21  Dave Korn  <dave.korn.cygwin@gmail.com>\n \n \tPR target/42818"}, {"sha": "f9bdf38f2d2be23a7f48f05de1a3ff41dac0a965", "filename": "gcc/c-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=ebf0bf7f49c75c98d4c51e8c451eae068a2dd647", "patch": "@@ -6247,7 +6247,7 @@ handle_transparent_union_attribute (tree *node, tree name,\n \t  *node = type = build_duplicate_type (type);\n \t}\n \n-      TYPE_TRANSPARENT_UNION (type) = 1;\n+      TYPE_TRANSPARENT_AGGR (type) = 1;\n       return NULL_TREE;\n     }\n "}, {"sha": "e48cdc88e4e9a68e929bedff1acb9dbce428ccb5", "filename": "gcc/c-decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=ebf0bf7f49c75c98d4c51e8c451eae068a2dd647", "patch": "@@ -6953,10 +6953,10 @@ finish_struct (location_t loc, tree t, tree fieldlist, tree attributes,\n   /* If this was supposed to be a transparent union, but we can't\n      make it one, warn and turn off the flag.  */\n   if (TREE_CODE (t) == UNION_TYPE\n-      && TYPE_TRANSPARENT_UNION (t)\n+      && TYPE_TRANSPARENT_AGGR (t)\n       && (!TYPE_FIELDS (t) || TYPE_MODE (t) != DECL_MODE (TYPE_FIELDS (t))))\n     {\n-      TYPE_TRANSPARENT_UNION (t) = 0;\n+      TYPE_TRANSPARENT_AGGR (t) = 0;\n       warning_at (loc, 0, \"union cannot be made transparent\");\n     }\n "}, {"sha": "567c2a512826cbf349b1973b139c83b06b719051", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=ebf0bf7f49c75c98d4c51e8c451eae068a2dd647", "patch": "@@ -1622,7 +1622,7 @@ type_lists_compatible_p (const_tree args1, const_tree args2,\n \t     and  wait (union wait *)  to be compatible.  */\n \t  if (TREE_CODE (a1) == UNION_TYPE\n \t      && (TYPE_NAME (a1) == 0\n-\t\t  || TYPE_TRANSPARENT_UNION (a1))\n+\t\t  || TYPE_TRANSPARENT_AGGR (a1))\n \t      && TREE_CODE (TYPE_SIZE (a1)) == INTEGER_CST\n \t      && tree_int_cst_equal (TYPE_SIZE (a1),\n \t\t\t\t     TYPE_SIZE (a2)))\n@@ -1643,7 +1643,7 @@ type_lists_compatible_p (const_tree args1, const_tree args2,\n \t    }\n \t  else if (TREE_CODE (a2) == UNION_TYPE\n \t\t   && (TYPE_NAME (a2) == 0\n-\t\t       || TYPE_TRANSPARENT_UNION (a2))\n+\t\t       || TYPE_TRANSPARENT_AGGR (a2))\n \t\t   && TREE_CODE (TYPE_SIZE (a2)) == INTEGER_CST\n \t\t   && tree_int_cst_equal (TYPE_SIZE (a2),\n \t\t\t\t\t  TYPE_SIZE (a1)))\n@@ -5014,9 +5014,10 @@ convert_for_assignment (location_t location, tree type, tree rhs,\n       && comptypes (type, rhstype))\n     return convert_and_check (type, rhs);\n \n-  /* Conversion to a transparent union from its member types.\n+  /* Conversion to a transparent union or record from its member types.\n      This applies only to function arguments.  */\n-  if (codel == UNION_TYPE && TYPE_TRANSPARENT_UNION (type)\n+  if (((codel == UNION_TYPE || codel == RECORD_TYPE)\n+      && TYPE_TRANSPARENT_AGGR (type))\n       && errtype == ic_argpass)\n     {\n       tree memb, marginal_memb = NULL_TREE;"}, {"sha": "ce54bbea84606833db26c8678881cf202fb8080e", "filename": "gcc/calls.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=ebf0bf7f49c75c98d4c51e8c451eae068a2dd647", "patch": "@@ -1010,11 +1010,12 @@ initialize_argument_information (int num_actuals ATTRIBUTE_UNUSED,\n       if (type == error_mark_node || !COMPLETE_TYPE_P (type))\n \targs[i].tree_value = integer_zero_node, type = integer_type_node;\n \n-      /* If TYPE is a transparent union, pass things the way we would\n-\t pass the first field of the union.  We have already verified that\n-\t the modes are the same.  */\n-      if (TREE_CODE (type) == UNION_TYPE && TYPE_TRANSPARENT_UNION (type))\n-\ttype = TREE_TYPE (TYPE_FIELDS (type));\n+      /* If TYPE is a transparent union or record, pass things the way\n+\t we would pass the first field of the union or record.  We have\n+\t already verified that the modes are the same.  */\n+      if ((TREE_CODE (type) == UNION_TYPE || TREE_CODE (type) == RECORD_TYPE)\n+\t   && TYPE_TRANSPARENT_AGGR (type))\n+\ttype = TREE_TYPE (first_field (type));\n \n       /* Decide where to pass this arg.\n "}, {"sha": "43da561ffd237989de711c558bbb8ba280479309", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ebf0bf7f49c75c98d4c51e8c451eae068a2dd647", "patch": "@@ -1,3 +1,10 @@\n+2010-01-20  Janis Johnson  <janis187@us.ibm.com>\n+\t    Jason Merrill  <jason@redhat.com>\n+\n+\t* mangle.c (write_type): Mangle transparent record as member type.\n+\t* semantics.c (begin_class_definition): Recognize decimal classes\n+\tand set TYPE_TRANSPARENT_AGGR.\n+\n 2010-01-20  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/42338"}, {"sha": "c14f5b7d844e66764e76585a95b5216f08574ee8", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=ebf0bf7f49c75c98d4c51e8c451eae068a2dd647", "patch": "@@ -1732,6 +1732,12 @@ write_type (tree type)\n   if (find_substitution (type))\n     return;\n \n+  /* According to the C++ ABI, some library classes are passed the\n+     same as the scalar type of their single member and use the same\n+     mangling.  */\n+  if (TREE_CODE (type) == RECORD_TYPE && TYPE_TRANSPARENT_AGGR (type))\n+    type = TREE_TYPE (first_field (type));\n+\n   if (write_CV_qualifiers_for_type (type) > 0)\n     /* If TYPE was CV-qualified, we just wrote the qualifiers; now\n        mangle the unqualified type.  The recursive call is needed here"}, {"sha": "d9ba591b3f581d445d97a337ac0365c8304b714f", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=ebf0bf7f49c75c98d4c51e8c451eae068a2dd647", "patch": "@@ -2368,6 +2368,18 @@ begin_class_definition (tree t, tree attributes)\n       error (\"definition of %q#T inside template parameter list\", t);\n       return error_mark_node;\n     }\n+\n+  /* According to the C++ ABI, decimal classes defined in ISO/IEC TR 24733\n+     are passed the same as decimal scalar types.  */\n+  if (TREE_CODE (t) == RECORD_TYPE)\n+    {\n+      const char *n = type_as_string (t, TFF_CLASS_KEY_OR_ENUM);\n+      if ((strcmp (n, \"class std::decimal::decimal32\") == 0)\n+\t  || (strcmp (n, \"class std::decimal::decimal64\") == 0)\n+\t  || (strcmp (n, \"class std::decimal::decimal128\") == 0))\n+\tTYPE_TRANSPARENT_AGGR (t) = 1;\n+    }\n+\n   /* A non-implicit typename comes from code like:\n \n        template <typename T> struct A {"}, {"sha": "f85f780e91649b422bfb6a3adcae493aed1485d8", "filename": "gcc/function.c", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=ebf0bf7f49c75c98d4c51e8c451eae068a2dd647", "patch": "@@ -1890,6 +1890,11 @@ aggregate_value_p (const_tree exp, const_tree fntype)\n   if (TREE_CODE (type) == VOID_TYPE)\n     return 0;\n \n+  /* If a record should be passed the same as its first (and only) member\n+     don't pass it as an aggregate.  */\n+  if (TREE_CODE (type) == RECORD_TYPE && TYPE_TRANSPARENT_AGGR (type))\n+    return aggregate_value_p (first_field (type), fntype);\n+\n   /* If the front end has decided that this needs to be passed by\n      reference, do so.  */\n   if ((TREE_CODE (exp) == PARM_DECL || TREE_CODE (exp) == RESULT_DECL)\n@@ -2004,6 +2009,14 @@ pass_by_reference (CUMULATIVE_ARGS *ca, enum machine_mode mode,\n       /* GCC post 3.4 passes *all* variable sized types by reference.  */\n       if (!TYPE_SIZE (type) || TREE_CODE (TYPE_SIZE (type)) != INTEGER_CST)\n \treturn true;\n+\n+      /* If a record type should be passed the same as its first (and only)\n+\t member, use the type and mode of that member.  */\n+      if (TREE_CODE (type) == RECORD_TYPE && TYPE_TRANSPARENT_AGGR (type))\n+\t{\n+\t  type = TREE_TYPE (first_field (type));\n+\t  mode = TYPE_MODE (type);\n+\t}\n     }\n \n   return targetm.calls.pass_by_reference (ca, mode, type, named_arg);\n@@ -2218,12 +2231,13 @@ assign_parm_find_data_types (struct assign_parm_data_all *all, tree parm,\n   passed_mode = TYPE_MODE (passed_type);\n   nominal_mode = TYPE_MODE (nominal_type);\n \n-  /* If the parm is to be passed as a transparent union, use the type of\n-     the first field for the tests below.  We have already verified that\n-     the modes are the same.  */\n-  if (TREE_CODE (passed_type) == UNION_TYPE\n-      && TYPE_TRANSPARENT_UNION (passed_type))\n-    passed_type = TREE_TYPE (TYPE_FIELDS (passed_type));\n+  /* If the parm is to be passed as a transparent union or record, use the\n+     type of the first field for the tests below.  We have already verified\n+     that the modes are the same.  */\n+  if ((TREE_CODE (passed_type) == UNION_TYPE\n+       || TREE_CODE (passed_type) == RECORD_TYPE)\n+      && TYPE_TRANSPARENT_AGGR (passed_type))\n+    passed_type = TREE_TYPE (first_field (passed_type));\n \n   /* See if this arg was passed by invisible reference.  */\n   if (pass_by_reference (&all->args_so_far, passed_mode,"}, {"sha": "e41917702f1c0356996a536929166c2aab342ed4", "filename": "gcc/lto-streamer-in.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Flto-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Flto-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-in.c?ref=ebf0bf7f49c75c98d4c51e8c451eae068a2dd647", "patch": "@@ -1742,8 +1742,8 @@ unpack_ts_type_value_fields (struct bitpack_d *bp, tree expr)\n   TYPE_STRING_FLAG (expr) = (unsigned) bp_unpack_value (bp, 1);\n   TYPE_NO_FORCE_BLK (expr) = (unsigned) bp_unpack_value (bp, 1);\n   TYPE_NEEDS_CONSTRUCTING(expr) = (unsigned) bp_unpack_value (bp, 1);\n-  if (TREE_CODE (expr) == UNION_TYPE)\n-    TYPE_TRANSPARENT_UNION (expr) = (unsigned) bp_unpack_value (bp, 1);\n+  if (TREE_CODE (expr) == UNION_TYPE || TREE_CODE (expr) == RECORD_TYPE)\n+    TYPE_TRANSPARENT_AGGR (expr) = (unsigned) bp_unpack_value (bp, 1);\n   TYPE_PACKED (expr) = (unsigned) bp_unpack_value (bp, 1);\n   TYPE_RESTRICT (expr) = (unsigned) bp_unpack_value (bp, 1);\n   TYPE_CONTAINS_PLACEHOLDER_INTERNAL (expr)"}, {"sha": "b5fc3e26c2079d047cb0309272d57163eeb0eeb3", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=ebf0bf7f49c75c98d4c51e8c451eae068a2dd647", "patch": "@@ -518,8 +518,8 @@ pack_ts_type_value_fields (struct bitpack_d *bp, tree expr)\n   bp_pack_value (bp, TYPE_STRING_FLAG (expr), 1);\n   bp_pack_value (bp, TYPE_NO_FORCE_BLK (expr), 1);\n   bp_pack_value (bp, TYPE_NEEDS_CONSTRUCTING(expr), 1);\n-  if (TREE_CODE (expr) == UNION_TYPE)\n-    bp_pack_value (bp, TYPE_TRANSPARENT_UNION (expr), 1);\n+  if (TREE_CODE (expr) == UNION_TYPE || TREE_CODE (expr) == RECORD_TYPE)\n+    bp_pack_value (bp, TYPE_TRANSPARENT_AGGR (expr), 1);\n   bp_pack_value (bp, TYPE_PACKED (expr), 1);\n   bp_pack_value (bp, TYPE_RESTRICT (expr), 1);\n   bp_pack_value (bp, TYPE_CONTAINS_PLACEHOLDER_INTERNAL (expr), 2);"}, {"sha": "b5656adcaa380fab96c8324233830de3a91fe77e", "filename": "gcc/print-tree.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=ebf0bf7f49c75c98d4c51e8c451eae068a2dd647", "patch": "@@ -605,8 +605,9 @@ print_node (FILE *file, const char *prefix, tree node, int indent)\n \n       /* The transparent-union flag is used for different things in\n \t different nodes.  */\n-      if (code == UNION_TYPE && TYPE_TRANSPARENT_UNION (node))\n-\tfputs (\" transparent-union\", file);\n+      if ((code == UNION_TYPE || code == RECORD_TYPE)\n+\t  && TYPE_TRANSPARENT_AGGR (node))\n+\tfputs (\" transparent-aggr\", file);\n       else if (code == ARRAY_TYPE\n \t       && TYPE_NONALIASED_COMPONENT (node))\n \tfputs (\" nonaliased-component\", file);"}, {"sha": "9c89203d503b65436858adfd7dd02546c69af290", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ebf0bf7f49c75c98d4c51e8c451eae068a2dd647", "patch": "@@ -1,3 +1,48 @@\n+2010-01-20  Janis Johnson  <janis187@us.ibm.com>\n+\n+\t* g++.dg/compat/decimal/compat-common.h: New file.\n+\t* g++.dg/compat/decimal/decimal-dummy.h: New file.\n+\t* g++.dg/compat/decimal/pass_x.h: New file.\n+\t* g++.dg/compat/decimal/pass_y.h: New file.\n+\t* g++.dg/compat/decimal/pass-1_main.C: New file.\n+\t* g++.dg/compat/decimal/pass-1_x.C: New file.\n+\t* g++.dg/compat/decimal/pass-1_y.C: New file.\n+\t* g++.dg/compat/decimal/pass-2_main.C: New file.\n+\t* g++.dg/compat/decimal/pass-2_x.C: New file.\n+\t* g++.dg/compat/decimal/pass-2_y.C: New file.\n+\t* g++.dg/compat/decimal/pass-3_main.C: New file.\n+\t* g++.dg/compat/decimal/pass-3_x.C: New file.\n+\t* g++.dg/compat/decimal/pass-3_y.C: New file.\n+\t* g++.dg/compat/decimal/pass-4_main.C: New file.\n+\t* g++.dg/compat/decimal/pass-4_x.C: New file.\n+\t* g++.dg/compat/decimal/pass-4_y.C: New file.\n+\t* g++.dg/compat/decimal/pass-5_main.C: New file.\n+\t* g++.dg/compat/decimal/pass-5_x.C: New file.\n+\t* g++.dg/compat/decimal/pass-5_y.C: New file.\n+\t* g++.dg/compat/decimal/pass-6_main.C: New file.\n+\t* g++.dg/compat/decimal/pass-6_x.C: New file.\n+\t* g++.dg/compat/decimal/pass-6_y.C: New file.\n+\t* g++.dg/compat/decimal/return_x.h: New file.\n+\t* g++.dg/compat/decimal/return_y.h: New file.\n+\t* g++.dg/compat/decimal/return-1_main.C: New file.\n+\t* g++.dg/compat/decimal/return-1_x.C: New file.\n+\t* g++.dg/compat/decimal/return-1_y.C: New file.\n+\t* g++.dg/compat/decimal/return-2_main.C: New file.\n+\t* g++.dg/compat/decimal/return-2_x.C: New file.\n+\t* g++.dg/compat/decimal/return-2_y.C: New file.\n+\t* g++.dg/compat/decimal/return-3_main.C: New file.\n+\t* g++.dg/compat/decimal/return-3_x.C: New file.\n+\t* g++.dg/compat/decimal/return-3_y.C: New file.\n+\t* g++.dg/compat/decimal/return-4_main.C: New file.\n+\t* g++.dg/compat/decimal/return-4_x.C: New file.\n+\t* g++.dg/compat/decimal/return-4_y.C: New file.\n+\t* g++.dg/compat/decimal/return-5_main.C: New file.\n+\t* g++.dg/compat/decimal/return-5_x.C: New file.\n+\t* g++.dg/compat/decimal/return-5_y.C: New file.\n+\t* g++.dg/compat/decimal/return-6_main.C: New file.\n+\t* g++.dg/compat/decimal/return-6_x.C: New file.\n+\t* g++.dg/compat/decimal/return-6_y.C: New file.\n+\n 2010-01-20  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR debug/42715"}, {"sha": "43c22d722f761dd086054cd36037f5a2fd72763a", "filename": "gcc/testsuite/g++.dg/compat/decimal/compat-common.h", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Fcompat-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Fcompat-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Fcompat-common.h?ref=ebf0bf7f49c75c98d4c51e8c451eae068a2dd647", "patch": "@@ -0,0 +1,55 @@\n+/*  Several of the binary compatibility tests use these macros to\n+    allow debugging the test or tracking down a failure by getting an\n+    indication of whether each individual check passed or failed.\n+    When DBG is defined, each check is shown by a dot (pass) or 'F'\n+    (fail) rather than aborting as soon as a failure is detected.  */\n+\n+#ifdef DBG\n+#include <stdio.h>\n+#define DEBUG_INIT setbuf (stdout, NULL);\n+#define DEBUG_FPUTS(x) fputs (x, stdout);\n+#define DEBUG_DOT putc ('.', stdout);\n+#define DEBUG_NL putc ('\\n', stdout);\n+#define DEBUG_FAIL putc ('F', stdout); fails++;\n+#define DEBUG_CHECK { DEBUG_FAIL } else { DEBUG_DOT }\n+#define DEBUG_FINI if (fails) DEBUG_FPUTS (\"failed\\n\") \\\n+\t\t   else DEBUG_FPUTS (\"passed\\n\")\n+#else\n+#define DEBUG_INIT\n+#define DEBUG_FPUTS(x)\n+#define DEBUG_DOT\n+#define DEBUG_NL\n+#define DEBUG_FAIL abort ();\n+#define DEBUG_CHECK abort ();\n+#define DEBUG_FINI\n+#endif\n+\n+#ifdef SKIP_COMPLEX\n+#ifndef SKIP_COMPLEX_INT\n+#define SKIP_COMPLEX_INT\n+#endif\n+#endif\n+\n+#ifndef SKIP_COMPLEX\n+#ifdef __GNUC__\n+#define CINT(x, y) (x + y * __extension__ 1i)\n+#define CDBL(x, y) (x + y * __extension__ 1i)\n+#else\n+#ifdef __SUNPRO_C\n+/* ??? Complex support without <complex.h>.  */\n+#else\n+#include <complex.h>\n+#endif\n+#ifndef SKIP_COMPLEX_INT\n+#define CINT(x, y) ((_Complex int) (x + y * _Complex_I))\n+#endif\n+#define CDBL(x, y) (x + y * _Complex_I)\n+#endif\n+#endif\n+\n+#ifdef __cplusplus\n+extern \"C\" void abort (void);\n+#else\n+extern void abort (void);\n+#endif\n+extern int fails;"}, {"sha": "ec347f9b7ebd617297e4e64deb41f7b3f6caef8d", "filename": "gcc/testsuite/g++.dg/compat/decimal/decimal-dummy.h", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Fdecimal-dummy.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Fdecimal-dummy.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Fdecimal-dummy.h?ref=ebf0bf7f49c75c98d4c51e8c451eae068a2dd647", "patch": "@@ -0,0 +1,67 @@\n+namespace std {\n+namespace decimal {\n+\n+  class decimal32\n+  {\n+  public:\n+    typedef float __dec32 __attribute__((mode(SD)));\n+    decimal32 () : __val(0.e-101DF) {}\n+    decimal32 (__dec32 x) : __val(x) {}\n+    __dec32 __val;\n+  };\n+\n+  class decimal64\n+  {\n+  public:\n+    typedef float __dec64 __attribute__((mode(DD)));\n+    decimal64 () : __val(0.e-398dd) {}\n+    decimal64 (__dec64 x) : __val(x) {}\n+    __dec64 __val;\n+  };\n+\n+  class decimal128\n+  {\n+  public:\n+    typedef float __dec128 __attribute__((mode(TD)));\n+    decimal128 () : __val(0.e-6176DL) {}\n+    decimal128 (__dec128 x) : __val(x) {}\n+    __dec128 __val;\n+  };\n+\n+  inline decimal32 operator+ (decimal32 lhs, decimal32 rhs)\n+  {\n+    decimal32 tmp;\n+    tmp.__val = lhs.__val + rhs.__val;\n+    return tmp;\n+  }\n+\n+  inline decimal64 operator+ (decimal64 lhs, decimal64 rhs)\n+  {\n+    decimal64 tmp;\n+    tmp.__val = lhs.__val + rhs.__val;\n+    return tmp;\n+  }\n+\n+  inline decimal128 operator+ (decimal128 lhs, decimal128 rhs)\n+  {\n+    decimal128 tmp;\n+    tmp.__val = lhs.__val + rhs.__val;\n+    return tmp;\n+  }\n+\n+  inline bool operator!= (decimal32 lhs, decimal32 rhs)\n+  {\n+    return lhs.__val != rhs.__val;\n+  }\n+\n+  inline bool operator!= (decimal64 lhs, decimal64 rhs)\n+  {\n+    return lhs.__val != rhs.__val;\n+  }\n+\n+  inline bool operator!= (decimal128 lhs, decimal128 rhs)\n+  {\n+    return lhs.__val != rhs.__val;\n+  }\n+}\n+}"}, {"sha": "963dc3bbfabf5ff83f9ebfdd26d6d116ce238bb1", "filename": "gcc/testsuite/g++.dg/compat/decimal/pass-1_main.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Fpass-1_main.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Fpass-1_main.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Fpass-1_main.C?ref=ebf0bf7f49c75c98d4c51e8c451eae068a2dd647", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target dfp } */\n+\n+/* Test passing decimal scalars by value.  */\n+\n+extern void pass_1_x (void);\n+int fails;\n+\n+int\n+main ()\n+{\n+  pass_1_x ();\n+  return 0;\n+}"}, {"sha": "265a1317b0082f6945527c089e6e531fbcc35d4d", "filename": "gcc/testsuite/g++.dg/compat/decimal/pass-1_x.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Fpass-1_x.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Fpass-1_x.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Fpass-1_x.C?ref=ebf0bf7f49c75c98d4c51e8c451eae068a2dd647", "patch": "@@ -0,0 +1,30 @@\n+typedef float dec32 __attribute__((mode(SD)));\n+typedef float dec64 __attribute__((mode(DD)));\n+typedef float dec128 __attribute__((mode(TD)));\n+\n+#include \"pass_x.h\"\n+\n+void\n+pass_1_x (void)\n+{\n+DEBUG_INIT\n+\n+#define T(NAME) testit##NAME ();\n+\n+#ifndef SKIP_DECIMAL32\n+T(d32)\n+#endif\n+#ifndef SKIP_DECIMAL64\n+T(d64)\n+#endif\n+#ifndef SKIP_DECIMAL128\n+T(d128)\n+#endif\n+\n+DEBUG_FINI\n+\n+if (fails != 0)\n+  abort ();\n+\n+#undef T\n+}"}, {"sha": "5da7f87d51e78e74c8df061e58677d80319a32a2", "filename": "gcc/testsuite/g++.dg/compat/decimal/pass-1_y.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Fpass-1_y.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Fpass-1_y.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Fpass-1_y.C?ref=ebf0bf7f49c75c98d4c51e8c451eae068a2dd647", "patch": "@@ -0,0 +1,5 @@\n+typedef float dec32 __attribute__((mode(SD)));\n+typedef float dec64 __attribute__((mode(DD)));\n+typedef float dec128 __attribute__((mode(TD)));\n+\n+#include \"pass_y.h\""}, {"sha": "533e4b276dc7963a9b4de59c222ba4c69e0998f2", "filename": "gcc/testsuite/g++.dg/compat/decimal/pass-2_main.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Fpass-2_main.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Fpass-2_main.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Fpass-2_main.C?ref=ebf0bf7f49c75c98d4c51e8c451eae068a2dd647", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target dfp } */\n+\n+/* Test passing decimal classes by value.  */\n+\n+extern void pass_2_x (void);\n+int fails;\n+\n+int\n+main ()\n+{\n+  pass_2_x ();\n+  return 0;\n+}"}, {"sha": "8a67bda0ed8a9cb88334de08dd3481ad56f79867", "filename": "gcc/testsuite/g++.dg/compat/decimal/pass-2_x.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Fpass-2_x.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Fpass-2_x.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Fpass-2_x.C?ref=ebf0bf7f49c75c98d4c51e8c451eae068a2dd647", "patch": "@@ -0,0 +1,32 @@\n+#include \"decimal-dummy.h\"\n+\n+#define dec32 std::decimal::decimal32\n+#define dec64 std::decimal::decimal64\n+#define dec128 std::decimal::decimal128\n+\n+#include \"pass_x.h\"\n+\n+void\n+pass_2_x (void)\n+{\n+DEBUG_INIT\n+\n+#define T(NAME) testit##NAME ();\n+\n+#ifndef SKIP_DECIMAL32\n+T(d32)\n+#endif\n+#ifndef SKIP_DECIMAL64\n+T(d64)\n+#endif\n+#ifndef SKIP_DECIMAL128\n+T(d128)\n+#endif\n+\n+DEBUG_FINI\n+\n+if (fails != 0)\n+  abort ();\n+\n+#undef T\n+}"}, {"sha": "97471457dbe28f4fc814cdf18d217fabdc8ad7a7", "filename": "gcc/testsuite/g++.dg/compat/decimal/pass-2_y.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Fpass-2_y.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Fpass-2_y.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Fpass-2_y.C?ref=ebf0bf7f49c75c98d4c51e8c451eae068a2dd647", "patch": "@@ -0,0 +1,7 @@\n+#include \"decimal-dummy.h\"\n+\n+#define dec32 std::decimal::decimal32\n+#define dec64 std::decimal::decimal64\n+#define dec128 std::decimal::decimal128\n+\n+#include \"pass_y.h\""}, {"sha": "de09992c2246f53595f8be1c64d4b1be566c2242", "filename": "gcc/testsuite/g++.dg/compat/decimal/pass-3_main.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Fpass-3_main.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Fpass-3_main.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Fpass-3_main.C?ref=ebf0bf7f49c75c98d4c51e8c451eae068a2dd647", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target dfp } */\n+\n+/* Test passing decimal scalars and classes by value.  */\n+\n+extern void pass_3_x (void);\n+int fails;\n+\n+int\n+main ()\n+{\n+  pass_3_x ();\n+  return 0;\n+}"}, {"sha": "17e4d1c8b5a34626e77cdf4e606edfc26902b5fc", "filename": "gcc/testsuite/g++.dg/compat/decimal/pass-3_x.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Fpass-3_x.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Fpass-3_x.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Fpass-3_x.C?ref=ebf0bf7f49c75c98d4c51e8c451eae068a2dd647", "patch": "@@ -0,0 +1,30 @@\n+typedef float dec32 __attribute__((mode(SD)));\n+typedef float dec64 __attribute__((mode(DD)));\n+typedef float dec128 __attribute__((mode(TD)));\n+\n+#include \"pass_x.h\"\n+\n+void\n+pass_3_x (void)\n+{\n+DEBUG_INIT\n+\n+#define T(NAME) testit##NAME ();\n+\n+#ifndef SKIP_DECIMAL32\n+T(d32)\n+#endif\n+#ifndef SKIP_DECIMAL64\n+T(d64)\n+#endif\n+#ifndef SKIP_DECIMAL128\n+T(d128)\n+#endif\n+\n+DEBUG_FINI\n+\n+if (fails != 0)\n+  abort ();\n+\n+#undef T\n+}"}, {"sha": "97471457dbe28f4fc814cdf18d217fabdc8ad7a7", "filename": "gcc/testsuite/g++.dg/compat/decimal/pass-3_y.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Fpass-3_y.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Fpass-3_y.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Fpass-3_y.C?ref=ebf0bf7f49c75c98d4c51e8c451eae068a2dd647", "patch": "@@ -0,0 +1,7 @@\n+#include \"decimal-dummy.h\"\n+\n+#define dec32 std::decimal::decimal32\n+#define dec64 std::decimal::decimal64\n+#define dec128 std::decimal::decimal128\n+\n+#include \"pass_y.h\""}, {"sha": "d5a0a47d478b02bebe0d8583fedb299742c9b8ea", "filename": "gcc/testsuite/g++.dg/compat/decimal/pass-4_main.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Fpass-4_main.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Fpass-4_main.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Fpass-4_main.C?ref=ebf0bf7f49c75c98d4c51e8c451eae068a2dd647", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target dfp } */\n+\n+/* Test passing decimal classes and scalars by value.  */\n+\n+extern void pass_4_x (void);\n+int fails;\n+\n+int\n+main ()\n+{\n+  pass_4_x ();\n+  return 0;\n+}"}, {"sha": "b0483ac278fc216c618ee1588de19adfdafd55ab", "filename": "gcc/testsuite/g++.dg/compat/decimal/pass-4_x.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Fpass-4_x.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Fpass-4_x.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Fpass-4_x.C?ref=ebf0bf7f49c75c98d4c51e8c451eae068a2dd647", "patch": "@@ -0,0 +1,32 @@\n+#include \"decimal-dummy.h\"\n+\n+#define dec32 std::decimal::decimal32\n+#define dec64 std::decimal::decimal64\n+#define dec128 std::decimal::decimal128\n+\n+#include \"pass_x.h\"\n+\n+void\n+pass_4_x (void)\n+{\n+DEBUG_INIT\n+\n+#define T(NAME) testit##NAME ();\n+\n+#ifndef SKIP_DECIMAL32\n+T(d32)\n+#endif\n+#ifndef SKIP_DECIMAL64\n+T(d64)\n+#endif\n+#ifndef SKIP_DECIMAL128\n+T(d128)\n+#endif\n+\n+DEBUG_FINI\n+\n+if (fails != 0)\n+  abort ();\n+\n+#undef T\n+}"}, {"sha": "5da7f87d51e78e74c8df061e58677d80319a32a2", "filename": "gcc/testsuite/g++.dg/compat/decimal/pass-4_y.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Fpass-4_y.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Fpass-4_y.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Fpass-4_y.C?ref=ebf0bf7f49c75c98d4c51e8c451eae068a2dd647", "patch": "@@ -0,0 +1,5 @@\n+typedef float dec32 __attribute__((mode(SD)));\n+typedef float dec64 __attribute__((mode(DD)));\n+typedef float dec128 __attribute__((mode(TD)));\n+\n+#include \"pass_y.h\""}, {"sha": "9b25a49c72e895ac2ff71a33b1df83bc5da86d31", "filename": "gcc/testsuite/g++.dg/compat/decimal/pass-5_main.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Fpass-5_main.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Fpass-5_main.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Fpass-5_main.C?ref=ebf0bf7f49c75c98d4c51e8c451eae068a2dd647", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target dfp } */\n+\n+/* Test passing decimal scalars and typedef'd classes by value.  */\n+\n+extern void pass_5_x (void);\n+int fails;\n+\n+int\n+main ()\n+{\n+  pass_5_x ();\n+  return 0;\n+}"}, {"sha": "11c4d96c9cd9420cfddb887ce66ca4729be1451c", "filename": "gcc/testsuite/g++.dg/compat/decimal/pass-5_x.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Fpass-5_x.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Fpass-5_x.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Fpass-5_x.C?ref=ebf0bf7f49c75c98d4c51e8c451eae068a2dd647", "patch": "@@ -0,0 +1,30 @@\n+typedef float dec32 __attribute__((mode(SD)));\n+typedef float dec64 __attribute__((mode(DD)));\n+typedef float dec128 __attribute__((mode(TD)));\n+\n+#include \"pass_x.h\"\n+\n+void\n+pass_5_x (void)\n+{\n+DEBUG_INIT\n+\n+#define T(NAME) testit##NAME ();\n+\n+#ifndef SKIP_DECIMAL32\n+T(d32)\n+#endif\n+#ifndef SKIP_DECIMAL64\n+T(d64)\n+#endif\n+#ifndef SKIP_DECIMAL128\n+T(d128)\n+#endif\n+\n+DEBUG_FINI\n+\n+if (fails != 0)\n+  abort ();\n+\n+#undef T\n+}"}, {"sha": "5a2c1fba01b010bff36adf810b8ae382206ff0c4", "filename": "gcc/testsuite/g++.dg/compat/decimal/pass-5_y.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Fpass-5_y.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Fpass-5_y.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Fpass-5_y.C?ref=ebf0bf7f49c75c98d4c51e8c451eae068a2dd647", "patch": "@@ -0,0 +1,7 @@\n+#include \"decimal-dummy.h\"\n+\n+typedef std::decimal::decimal32 dec32;\n+typedef std::decimal::decimal64 dec64;\n+typedef std::decimal::decimal128 dec128;\n+\n+#include \"pass_y.h\""}, {"sha": "1b686a21dd02824a9fac9743d4e7c198f4ec53b6", "filename": "gcc/testsuite/g++.dg/compat/decimal/pass-6_main.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Fpass-6_main.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Fpass-6_main.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Fpass-6_main.C?ref=ebf0bf7f49c75c98d4c51e8c451eae068a2dd647", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target dfp } */\n+\n+/* Test passing typedef'd decimal classes and scalars by value.  */\n+\n+extern void pass_6_x (void);\n+int fails;\n+\n+int\n+main ()\n+{\n+  pass_6_x ();\n+  return 0;\n+}"}, {"sha": "e59ca7f722d5ddfcea6773551a3914b7b4d04828", "filename": "gcc/testsuite/g++.dg/compat/decimal/pass-6_x.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Fpass-6_x.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Fpass-6_x.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Fpass-6_x.C?ref=ebf0bf7f49c75c98d4c51e8c451eae068a2dd647", "patch": "@@ -0,0 +1,32 @@\n+#include \"decimal-dummy.h\"\n+\n+typedef std::decimal::decimal32 dec32;\n+typedef std::decimal::decimal64 dec64;\n+typedef std::decimal::decimal128 dec128;\n+\n+#include \"pass_x.h\"\n+\n+void\n+pass_6_x (void)\n+{\n+DEBUG_INIT\n+\n+#define T(NAME) testit##NAME ();\n+\n+#ifndef SKIP_DECIMAL32\n+T(d32)\n+#endif\n+#ifndef SKIP_DECIMAL64\n+T(d64)\n+#endif\n+#ifndef SKIP_DECIMAL128\n+T(d128)\n+#endif\n+\n+DEBUG_FINI\n+\n+if (fails != 0)\n+  abort ();\n+\n+#undef T\n+}"}, {"sha": "5da7f87d51e78e74c8df061e58677d80319a32a2", "filename": "gcc/testsuite/g++.dg/compat/decimal/pass-6_y.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Fpass-6_y.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Fpass-6_y.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Fpass-6_y.C?ref=ebf0bf7f49c75c98d4c51e8c451eae068a2dd647", "patch": "@@ -0,0 +1,5 @@\n+typedef float dec32 __attribute__((mode(SD)));\n+typedef float dec64 __attribute__((mode(DD)));\n+typedef float dec128 __attribute__((mode(TD)));\n+\n+#include \"pass_y.h\""}, {"sha": "5b25dc9bf1a6d65023aeace618996808cb8f8109", "filename": "gcc/testsuite/g++.dg/compat/decimal/pass_x.h", "status": "added", "additions": 151, "deletions": 0, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Fpass_x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Fpass_x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Fpass_x.h?ref=ebf0bf7f49c75c98d4c51e8c451eae068a2dd647", "patch": "@@ -0,0 +1,151 @@\n+#include \"compat-common.h\"\n+\n+#define T(NAME, TYPE, INITVAL)\t\t\t\t\t\\\n+TYPE g01##NAME, g02##NAME, g03##NAME, g04##NAME;\t\t\\\n+TYPE g05##NAME, g06##NAME, g07##NAME, g08##NAME;\t\t\\\n+TYPE g09##NAME, g10##NAME, g11##NAME, g12##NAME;\t\t\\\n+TYPE g13##NAME, g14##NAME, g15##NAME, g16##NAME;\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+extern void init##NAME (TYPE *p, TYPE v);\t\t\t\\\n+extern void checkg##NAME (void);\t\t\t\t\\\n+extern void\t\t\t\t\t\t\t\\\n+test##NAME (TYPE x01, TYPE x02, TYPE x03, TYPE x04,\t\t\\\n+            TYPE x05, TYPE x06, TYPE x07, TYPE x08,\t\t\\\n+            TYPE x09, TYPE x10, TYPE x11, TYPE x12,\t\t\\\n+            TYPE x13, TYPE x14, TYPE x15, TYPE x16);\t\t\\\n+extern void testva##NAME (int n, ...);\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+extern void\t\t\t\t\t\t\t\\\n+check##NAME (TYPE x, TYPE v)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  if (x != v + INITVAL)\t\t\t\t\t\t\\\n+    DEBUG_CHECK\t\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+extern void\t\t\t\t\t\t\t\\\n+test2_##NAME (TYPE x01, TYPE x02, TYPE x03, TYPE x04,\t\t\\\n+\t      TYPE x05, TYPE x06, TYPE x07, TYPE x08)\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  test##NAME (x01, g02##NAME, x02, g04##NAME,\t\t\t\\\n+\t      x03, g06##NAME, x04, g08##NAME,\t\t\t\\\n+\t      x05, g10##NAME, x06, g12##NAME,\t\t\t\\\n+\t      x07, g14##NAME, x08, g16##NAME);\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+extern void\t\t\t\t\t\t\t\\\n+testit##NAME (void)\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (#NAME)\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (\" init: \")\t\t\t\t\t\\\n+  init##NAME (&g01##NAME,  1);\t\t\t\t\t\\\n+  init##NAME (&g02##NAME,  2);\t\t\t\t\t\\\n+  init##NAME (&g03##NAME,  3);\t\t\t\t\t\\\n+  init##NAME (&g04##NAME,  4);\t\t\t\t\t\\\n+  init##NAME (&g05##NAME,  5);\t\t\t\t\t\\\n+  init##NAME (&g06##NAME,  6);\t\t\t\t\t\\\n+  init##NAME (&g07##NAME,  7);\t\t\t\t\t\\\n+  init##NAME (&g08##NAME,  8);\t\t\t\t\t\\\n+  init##NAME (&g09##NAME,  9);\t\t\t\t\t\\\n+  init##NAME (&g10##NAME, 10);\t\t\t\t\t\\\n+  init##NAME (&g11##NAME, 11);\t\t\t\t\t\\\n+  init##NAME (&g12##NAME, 12);\t\t\t\t\t\\\n+  init##NAME (&g13##NAME, 13);\t\t\t\t\t\\\n+  init##NAME (&g14##NAME, 14);\t\t\t\t\t\\\n+  init##NAME (&g15##NAME, 15);\t\t\t\t\t\\\n+  init##NAME (&g16##NAME, 16);\t\t\t\t\t\\\n+  checkg##NAME ();\t\t\t\t\t\t\\\n+  DEBUG_NL\t\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (#NAME)\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (\" test: \")\t\t\t\t\t\\\n+  test##NAME (g01##NAME, g02##NAME, g03##NAME, g04##NAME,\t\\\n+\t      g05##NAME, g06##NAME, g07##NAME, g08##NAME,\t\\\n+\t      g09##NAME, g10##NAME, g11##NAME, g12##NAME,\t\\\n+\t      g13##NAME, g14##NAME, g15##NAME, g16##NAME);\t\\\n+  DEBUG_NL\t\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (#NAME)\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (\" testva: \")\t\t\t\t\t\\\n+  DEBUG_NL\t\t\t\t\t\t\t\\\n+  testva##NAME (1,\t\t\t\t\t\t\\\n+\t\tg01##NAME);\t\t\t\t\t\\\n+  DEBUG_NL\t\t\t\t\t\t\t\\\n+  testva##NAME (2,\t\t\t\t\t\t\\\n+\t\tg01##NAME, g02##NAME);\t\t\t\t\\\n+  DEBUG_NL\t\t\t\t\t\t\t\\\n+  testva##NAME (3,\t\t\t\t\t\t\\\n+\t\tg01##NAME, g02##NAME, g03##NAME);\t\t\\\n+  DEBUG_NL\t\t\t\t\t\t\t\\\n+  testva##NAME (4,\t\t\t\t\t\t\\\n+\t\tg01##NAME, g02##NAME, g03##NAME, g04##NAME);\t\\\n+  DEBUG_NL\t\t\t\t\t\t\t\\\n+  testva##NAME (5,\t\t\t\t\t\t\\\n+\t\tg01##NAME, g02##NAME, g03##NAME, g04##NAME,\t\\\n+\t\tg05##NAME);\t\t\t\t\t\\\n+  DEBUG_NL\t\t\t\t\t\t\t\\\n+  testva##NAME (6,\t\t\t\t\t\t\\\n+\t\tg01##NAME, g02##NAME, g03##NAME, g04##NAME,\t\\\n+\t\tg05##NAME, g06##NAME);\t\t\t\t\\\n+  DEBUG_NL\t\t\t\t\t\t\t\\\n+  testva##NAME (7,\t\t\t\t\t\t\\\n+\t\tg01##NAME, g02##NAME, g03##NAME, g04##NAME,\t\\\n+\t\tg05##NAME, g06##NAME, g07##NAME);\t\t\\\n+  DEBUG_NL\t\t\t\t\t\t\t\\\n+  testva##NAME (8,\t\t\t\t\t\t\\\n+\t\tg01##NAME, g02##NAME, g03##NAME, g04##NAME,\t\\\n+\t\tg05##NAME, g06##NAME, g07##NAME, g08##NAME);\t\\\n+  DEBUG_NL\t\t\t\t\t\t\t\\\n+  testva##NAME (9,\t\t\t\t\t\t\\\n+\t\tg01##NAME, g02##NAME, g03##NAME, g04##NAME,\t\\\n+\t\tg05##NAME, g06##NAME, g07##NAME, g08##NAME,\t\\\n+\t\tg09##NAME);\t\t\t\t\t\\\n+  DEBUG_NL\t\t\t\t\t\t\t\\\n+  testva##NAME (10,\t\t\t\t\t\t\\\n+\t\tg01##NAME, g02##NAME, g03##NAME, g04##NAME,\t\\\n+\t\tg05##NAME, g06##NAME, g07##NAME, g08##NAME,\t\\\n+\t\tg09##NAME, g10##NAME);\t\t\t\t\\\n+  DEBUG_NL\t\t\t\t\t\t\t\\\n+  testva##NAME (11,\t\t\t\t\t\t\\\n+\t\tg01##NAME, g02##NAME, g03##NAME, g04##NAME,\t\\\n+\t\tg05##NAME, g06##NAME, g07##NAME, g08##NAME,\t\\\n+\t\tg09##NAME, g10##NAME, g11##NAME);\t\t\\\n+  DEBUG_NL\t\t\t\t\t\t\t\\\n+  testva##NAME (12,\t\t\t\t\t\t\\\n+\t\tg01##NAME, g02##NAME, g03##NAME, g04##NAME,\t\\\n+\t\tg05##NAME, g06##NAME, g07##NAME, g08##NAME,\t\\\n+\t\tg09##NAME, g10##NAME, g11##NAME, g12##NAME);\t\\\n+  DEBUG_NL\t\t\t\t\t\t\t\\\n+  testva##NAME (13,\t\t\t\t\t\t\\\n+\t\tg01##NAME, g02##NAME, g03##NAME, g04##NAME,\t\\\n+\t\tg05##NAME, g06##NAME, g07##NAME, g08##NAME,\t\\\n+\t\tg09##NAME, g10##NAME, g11##NAME, g12##NAME,\t\\\n+\t\tg13##NAME);\t\t\t\t\t\\\n+  DEBUG_NL\t\t\t\t\t\t\t\\\n+  testva##NAME (14,\t\t\t\t\t\t\\\n+\t\tg01##NAME, g02##NAME, g03##NAME, g04##NAME,\t\\\n+\t\tg05##NAME, g06##NAME, g07##NAME, g08##NAME,\t\\\n+\t\tg09##NAME, g10##NAME, g11##NAME, g12##NAME,\t\\\n+\t\tg13##NAME, g14##NAME);\t\t\t\t\\\n+  DEBUG_NL\t\t\t\t\t\t\t\\\n+  testva##NAME (15,\t\t\t\t\t\t\\\n+\t\tg01##NAME, g02##NAME, g03##NAME, g04##NAME,\t\\\n+\t\tg05##NAME, g06##NAME, g07##NAME, g08##NAME,\t\\\n+\t\tg09##NAME, g10##NAME, g11##NAME, g12##NAME,\t\\\n+\t\tg13##NAME, g14##NAME, g15##NAME);\t\t\\\n+  DEBUG_NL\t\t\t\t\t\t\t\\\n+  testva##NAME (16,\t\t\t\t\t\t\\\n+\t\tg01##NAME, g02##NAME, g03##NAME, g04##NAME,\t\\\n+\t\tg05##NAME, g06##NAME, g07##NAME, g08##NAME,\t\\\n+\t\tg09##NAME, g10##NAME, g11##NAME, g12##NAME,\t\\\n+\t\tg13##NAME, g14##NAME, g15##NAME, g16##NAME);\t\\\n+  DEBUG_NL\t\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (#NAME)\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (\" test2: \")\t\t\t\t\t\\\n+  test2_##NAME (g01##NAME, g03##NAME, g05##NAME, g07##NAME,\t\\\n+\t\tg09##NAME, g11##NAME, g13##NAME, g15##NAME);\t\\\n+  DEBUG_NL\t\t\t\t\t\t\t\\\n+}\n+\n+T(d32, dec32, (dec32)1.5DF)\n+T(d64, dec64, (dec64)2.5DD)\n+T(d128, dec128, (dec128)3.5DL)\n+\n+#undef T"}, {"sha": "f835b198352312104f38921512a68b4a078aaf54", "filename": "gcc/testsuite/g++.dg/compat/decimal/pass_y.h", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Fpass_y.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Fpass_y.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Fpass_y.h?ref=ebf0bf7f49c75c98d4c51e8c451eae068a2dd647", "patch": "@@ -0,0 +1,89 @@\n+#include <stdarg.h>\n+\n+#include \"compat-common.h\"\n+\n+#ifdef SKIP_VA\n+const int test_va = 0;\n+#else\n+const int test_va = 1;\n+#endif\n+\n+#define T(NAME, TYPE, INITVAL)\t\t\t\t\t\\\n+extern TYPE g01##NAME, g02##NAME, g03##NAME, g04##NAME;\t\t\\\n+extern TYPE g05##NAME, g06##NAME, g07##NAME, g08##NAME;\t\t\\\n+extern TYPE g09##NAME, g10##NAME, g11##NAME, g12##NAME;\t\t\\\n+extern TYPE g13##NAME, g14##NAME, g15##NAME, g16##NAME;\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+extern void check##NAME (TYPE x, TYPE v);\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+extern void\t\t\t\t\t\t\t\\\n+init##NAME (TYPE *p, TYPE v)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  *p = v + INITVAL;\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+extern void\t\t\t\t\t\t\t\\\n+checkg##NAME (void)\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  check##NAME (g01##NAME,  1);\t\t\t\t\t\\\n+  check##NAME (g02##NAME,  2);\t\t\t\t\t\\\n+  check##NAME (g03##NAME,  3);\t\t\t\t\t\\\n+  check##NAME (g04##NAME,  4);\t\t\t\t\t\\\n+  check##NAME (g05##NAME,  5);\t\t\t\t\t\\\n+  check##NAME (g06##NAME,  6);\t\t\t\t\t\\\n+  check##NAME (g07##NAME,  7);\t\t\t\t\t\\\n+  check##NAME (g08##NAME,  8);\t\t\t\t\t\\\n+  check##NAME (g09##NAME,  9);\t\t\t\t\t\\\n+  check##NAME (g10##NAME, 10);\t\t\t\t\t\\\n+  check##NAME (g11##NAME, 11);\t\t\t\t\t\\\n+  check##NAME (g12##NAME, 12);\t\t\t\t\t\\\n+  check##NAME (g13##NAME, 13);\t\t\t\t\t\\\n+  check##NAME (g14##NAME, 14);\t\t\t\t\t\\\n+  check##NAME (g15##NAME, 15);\t\t\t\t\t\\\n+  check##NAME (g16##NAME, 16);\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+extern void\t\t\t\t\t\t\t\\\n+test##NAME (TYPE x01, TYPE x02, TYPE x03, TYPE x04,\t\t\\\n+            TYPE x05, TYPE x06, TYPE x07, TYPE x08,\t\t\\\n+            TYPE x09, TYPE x10, TYPE x11, TYPE x12,\t\t\\\n+            TYPE x13, TYPE x14, TYPE x15, TYPE x16)\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  check##NAME (x01,  1);\t\t\t\t\t\\\n+  check##NAME (x02,  2);\t\t\t\t\t\\\n+  check##NAME (x03,  3);\t\t\t\t\t\\\n+  check##NAME (x04,  4);\t\t\t\t\t\\\n+  check##NAME (x05,  5);\t\t\t\t\t\\\n+  check##NAME (x06,  6);\t\t\t\t\t\\\n+  check##NAME (x07,  7);\t\t\t\t\t\\\n+  check##NAME (x08,  8);\t\t\t\t\t\\\n+  check##NAME (x09,  9);\t\t\t\t\t\\\n+  check##NAME (x10, 10);\t\t\t\t\t\\\n+  check##NAME (x11, 11);\t\t\t\t\t\\\n+  check##NAME (x12, 12);\t\t\t\t\t\\\n+  check##NAME (x13, 13);\t\t\t\t\t\\\n+  check##NAME (x14, 14);\t\t\t\t\t\\\n+  check##NAME (x15, 15);\t\t\t\t\t\\\n+  check##NAME (x16, 16);\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+extern void\t\t\t\t\t\t\t\\\n+testva##NAME (int n, ...)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  int i;\t\t\t\t\t\t\t\\\n+  va_list ap;\t\t\t\t\t\t\t\\\n+  if (test_va)\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      va_start (ap, n);\t\t\t\t\t\t\\\n+      for (i = 0; i < n; i++)\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  TYPE t = va_arg (ap, TYPE);\t\t\t\t\\\n+\t  check##NAME (t, i+1);\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n+      va_end (ap);\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+}\n+\n+T(d32, dec32, (dec32)1.5DF)\n+T(d64, dec64, (dec64)2.5DD)\n+T(d128, dec128, (dec128)3.5DL)"}, {"sha": "c663bb01cf3ca856b88b4b42f51779a837af56e8", "filename": "gcc/testsuite/g++.dg/compat/decimal/return-1_main.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Freturn-1_main.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Freturn-1_main.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Freturn-1_main.C?ref=ebf0bf7f49c75c98d4c51e8c451eae068a2dd647", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target dfp } */\n+\n+/* Test function return values for decimal float scalars.  */\n+\n+extern void return_1_x (void);\n+int fails;\n+\n+int\n+main ()\n+{\n+  return_1_x ();\n+  return 0;\n+}"}, {"sha": "e391bd1f1f3b4caf6ca0e79bf75d6b896f4c27ae", "filename": "gcc/testsuite/g++.dg/compat/decimal/return-1_x.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Freturn-1_x.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Freturn-1_x.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Freturn-1_x.C?ref=ebf0bf7f49c75c98d4c51e8c451eae068a2dd647", "patch": "@@ -0,0 +1,24 @@\n+typedef float dec32 __attribute__((mode(SD)));\n+typedef float dec64 __attribute__((mode(DD)));\n+typedef float dec128 __attribute__((mode(TD)));\n+\n+#include \"return_x.h\"\n+\n+void\n+return_1_x (void)\n+{\n+DEBUG_INIT\n+\n+#define T(NAME) testit##NAME ();\n+\n+T(d32)\n+T(d64)\n+T(d128)\n+\n+DEBUG_FINI\n+\n+if (fails != 0)\n+  abort ();\n+\n+#undef T\n+}"}, {"sha": "0b4d4bf38c6f6fcbcabcbe7e74cac72185645277", "filename": "gcc/testsuite/g++.dg/compat/decimal/return-1_y.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Freturn-1_y.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Freturn-1_y.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Freturn-1_y.C?ref=ebf0bf7f49c75c98d4c51e8c451eae068a2dd647", "patch": "@@ -0,0 +1,5 @@\n+typedef float dec32 __attribute__((mode(SD)));\n+typedef float dec64 __attribute__((mode(DD)));\n+typedef float dec128 __attribute__((mode(TD)));\n+\n+#include \"return_y.h\""}, {"sha": "afa27f269dfbc28b29164ca69c73cf2dbd68084c", "filename": "gcc/testsuite/g++.dg/compat/decimal/return-2_main.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Freturn-2_main.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Freturn-2_main.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Freturn-2_main.C?ref=ebf0bf7f49c75c98d4c51e8c451eae068a2dd647", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target dfp } */\n+\n+/* Test function return values for decimal classes.  */\n+\n+extern void return_2_x (void);\n+int fails;\n+\n+int\n+main ()\n+{\n+  return_2_x ();\n+  return 0;\n+}"}, {"sha": "d96c01479c25f585d43c67dea2e49496df708094", "filename": "gcc/testsuite/g++.dg/compat/decimal/return-2_x.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Freturn-2_x.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Freturn-2_x.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Freturn-2_x.C?ref=ebf0bf7f49c75c98d4c51e8c451eae068a2dd647", "patch": "@@ -0,0 +1,26 @@\n+#include \"decimal-dummy.h\"\n+\n+#define dec32 std::decimal::decimal32\n+#define dec64 std::decimal::decimal64\n+#define dec128 std::decimal::decimal128\n+\n+#include \"return_x.h\"\n+\n+void\n+return_2_x (void)\n+{\n+DEBUG_INIT\n+\n+#define T(NAME) testit##NAME ();\n+\n+T(d32)\n+T(d64)\n+T(d128)\n+\n+DEBUG_FINI\n+\n+if (fails != 0)\n+  abort ();\n+\n+#undef T\n+}"}, {"sha": "c68088b30cf9a3958a9b1650b891ee0a81f425e7", "filename": "gcc/testsuite/g++.dg/compat/decimal/return-2_y.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Freturn-2_y.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Freturn-2_y.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Freturn-2_y.C?ref=ebf0bf7f49c75c98d4c51e8c451eae068a2dd647", "patch": "@@ -0,0 +1,7 @@\n+#include \"decimal-dummy.h\"\n+\n+#define dec32 std::decimal::decimal32\n+#define dec64 std::decimal::decimal64\n+#define dec128 std::decimal::decimal128\n+\n+#include \"return_y.h\""}, {"sha": "468f3fc0c347b9adc6e3b9980d258a06834a4fa4", "filename": "gcc/testsuite/g++.dg/compat/decimal/return-3_main.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Freturn-3_main.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Freturn-3_main.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Freturn-3_main.C?ref=ebf0bf7f49c75c98d4c51e8c451eae068a2dd647", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target dfp } */\n+\n+/* Test function return values for decimal float scalars and classes.  */\n+\n+extern void return_3_x (void);\n+int fails;\n+\n+int\n+main ()\n+{\n+  return_3_x ();\n+  return 0;\n+}"}, {"sha": "52e599c763105a5c0d396354f9c2ae3b2c64c1e4", "filename": "gcc/testsuite/g++.dg/compat/decimal/return-3_x.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Freturn-3_x.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Freturn-3_x.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Freturn-3_x.C?ref=ebf0bf7f49c75c98d4c51e8c451eae068a2dd647", "patch": "@@ -0,0 +1,24 @@\n+typedef float dec32 __attribute__((mode(SD)));\n+typedef float dec64 __attribute__((mode(DD)));\n+typedef float dec128 __attribute__((mode(TD)));\n+\n+#include \"return_x.h\"\n+\n+void\n+return_3_x (void)\n+{\n+DEBUG_INIT\n+\n+#define T(NAME) testit##NAME ();\n+\n+T(d32)\n+T(d64)\n+T(d128)\n+\n+DEBUG_FINI\n+\n+if (fails != 0)\n+  abort ();\n+\n+#undef T\n+}"}, {"sha": "c68088b30cf9a3958a9b1650b891ee0a81f425e7", "filename": "gcc/testsuite/g++.dg/compat/decimal/return-3_y.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Freturn-3_y.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Freturn-3_y.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Freturn-3_y.C?ref=ebf0bf7f49c75c98d4c51e8c451eae068a2dd647", "patch": "@@ -0,0 +1,7 @@\n+#include \"decimal-dummy.h\"\n+\n+#define dec32 std::decimal::decimal32\n+#define dec64 std::decimal::decimal64\n+#define dec128 std::decimal::decimal128\n+\n+#include \"return_y.h\""}, {"sha": "365d8becd5986a284dd2ec784300b38fe382f51b", "filename": "gcc/testsuite/g++.dg/compat/decimal/return-4_main.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Freturn-4_main.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Freturn-4_main.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Freturn-4_main.C?ref=ebf0bf7f49c75c98d4c51e8c451eae068a2dd647", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-require-effective-target dfp } */\n+\n+/* Test function return values for decimal float classes and scalars.  */\n+\n+extern void return_4_x (void);\n+int fails;\n+\n+int\n+main ()\n+{\n+  return_4_x ();\n+  return 0;\n+}"}, {"sha": "b9d28fa5b9a299b2fc4688d2c7e81344efbc33d3", "filename": "gcc/testsuite/g++.dg/compat/decimal/return-4_x.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Freturn-4_x.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Freturn-4_x.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Freturn-4_x.C?ref=ebf0bf7f49c75c98d4c51e8c451eae068a2dd647", "patch": "@@ -0,0 +1,26 @@\n+#include \"decimal-dummy.h\"\n+\n+#define dec32 std::decimal::decimal32\n+#define dec64 std::decimal::decimal64\n+#define dec128 std::decimal::decimal128\n+\n+#include \"return_x.h\"\n+\n+void\n+return_4_x (void)\n+{\n+DEBUG_INIT\n+\n+#define T(NAME) testit##NAME ();\n+\n+T(d32)\n+T(d64)\n+T(d128)\n+\n+DEBUG_FINI\n+\n+if (fails != 0)\n+  abort ();\n+\n+#undef T\n+}"}, {"sha": "0b4d4bf38c6f6fcbcabcbe7e74cac72185645277", "filename": "gcc/testsuite/g++.dg/compat/decimal/return-4_y.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Freturn-4_y.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Freturn-4_y.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Freturn-4_y.C?ref=ebf0bf7f49c75c98d4c51e8c451eae068a2dd647", "patch": "@@ -0,0 +1,5 @@\n+typedef float dec32 __attribute__((mode(SD)));\n+typedef float dec64 __attribute__((mode(DD)));\n+typedef float dec128 __attribute__((mode(TD)));\n+\n+#include \"return_y.h\""}, {"sha": "2c334832797f2178364aa810aed09dd1dc892652", "filename": "gcc/testsuite/g++.dg/compat/decimal/return-5_main.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Freturn-5_main.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Freturn-5_main.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Freturn-5_main.C?ref=ebf0bf7f49c75c98d4c51e8c451eae068a2dd647", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-require-effective-target dfp } */\n+\n+/* Test function return values for decimal float scalars and typedef'd\n+   classes.  */\n+\n+extern void return_5_x (void);\n+int fails;\n+\n+int\n+main ()\n+{\n+  return_5_x ();\n+  return 0;\n+}"}, {"sha": "a2bb6173b2f0f53cf5ebc4846c6a15f4ca132006", "filename": "gcc/testsuite/g++.dg/compat/decimal/return-5_x.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Freturn-5_x.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Freturn-5_x.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Freturn-5_x.C?ref=ebf0bf7f49c75c98d4c51e8c451eae068a2dd647", "patch": "@@ -0,0 +1,24 @@\n+typedef float dec32 __attribute__((mode(SD)));\n+typedef float dec64 __attribute__((mode(DD)));\n+typedef float dec128 __attribute__((mode(TD)));\n+\n+#include \"return_x.h\"\n+\n+void\n+return_5_x (void)\n+{\n+DEBUG_INIT\n+\n+#define T(NAME) testit##NAME ();\n+\n+T(d32)\n+T(d64)\n+T(d128)\n+\n+DEBUG_FINI\n+\n+if (fails != 0)\n+  abort ();\n+\n+#undef T\n+}"}, {"sha": "0f780167a4e42a3d3c8c2b5f5cf05a8515fa6730", "filename": "gcc/testsuite/g++.dg/compat/decimal/return-5_y.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Freturn-5_y.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Freturn-5_y.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Freturn-5_y.C?ref=ebf0bf7f49c75c98d4c51e8c451eae068a2dd647", "patch": "@@ -0,0 +1,7 @@\n+#include \"decimal-dummy.h\"\n+\n+typedef std::decimal::decimal32 dec32;\n+typedef std::decimal::decimal64 dec64;\n+typedef std::decimal::decimal128 dec128;\n+\n+#include \"return_y.h\""}, {"sha": "94526bdcb8154cd3717e91bf00f7f00e3406cd55", "filename": "gcc/testsuite/g++.dg/compat/decimal/return-6_main.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Freturn-6_main.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Freturn-6_main.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Freturn-6_main.C?ref=ebf0bf7f49c75c98d4c51e8c451eae068a2dd647", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-require-effective-target dfp } */\n+\n+/* Test function return values for typedef'd decimal float classes\n+   and scalars.  */\n+\n+extern void return_6_x (void);\n+int fails;\n+\n+int\n+main ()\n+{\n+  return_6_x ();\n+  return 0;\n+}"}, {"sha": "e0a487dbe3bdb4bb0b838b460454ac28ca39e5ce", "filename": "gcc/testsuite/g++.dg/compat/decimal/return-6_x.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Freturn-6_x.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Freturn-6_x.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Freturn-6_x.C?ref=ebf0bf7f49c75c98d4c51e8c451eae068a2dd647", "patch": "@@ -0,0 +1,26 @@\n+#include \"decimal-dummy.h\"\n+\n+typedef std::decimal::decimal32 dec32;\n+typedef std::decimal::decimal64 dec64;\n+typedef std::decimal::decimal128 dec128;\n+\n+#include \"return_x.h\"\n+\n+void\n+return_6_x (void)\n+{\n+DEBUG_INIT\n+\n+#define T(NAME) testit##NAME ();\n+\n+T(d32)\n+T(d64)\n+T(d128)\n+\n+DEBUG_FINI\n+\n+if (fails != 0)\n+  abort ();\n+\n+#undef T\n+}"}, {"sha": "0b4d4bf38c6f6fcbcabcbe7e74cac72185645277", "filename": "gcc/testsuite/g++.dg/compat/decimal/return-6_y.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Freturn-6_y.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Freturn-6_y.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Freturn-6_y.C?ref=ebf0bf7f49c75c98d4c51e8c451eae068a2dd647", "patch": "@@ -0,0 +1,5 @@\n+typedef float dec32 __attribute__((mode(SD)));\n+typedef float dec64 __attribute__((mode(DD)));\n+typedef float dec128 __attribute__((mode(TD)));\n+\n+#include \"return_y.h\""}, {"sha": "401adfb5c937a40700b1a72acf16408ede8a7556", "filename": "gcc/testsuite/g++.dg/compat/decimal/return_x.h", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Freturn_x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Freturn_x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Freturn_x.h?ref=ebf0bf7f49c75c98d4c51e8c451eae068a2dd647", "patch": "@@ -0,0 +1,90 @@\n+#include \"compat-common.h\"\n+\n+#ifdef SKIP_VA\n+const int test_va = 0;\n+#else\n+const int test_va = 1;\n+#endif\n+\n+#define T(NAME, TYPE, INITVAL) \t\t\t\t\t\\\n+TYPE g01##NAME, g02##NAME, g03##NAME, g04##NAME;\t\t\\\n+TYPE g05##NAME, g06##NAME, g07##NAME, g08##NAME;\t\t\\\n+TYPE g09##NAME, g10##NAME, g11##NAME, g12##NAME;\t\t\\\n+TYPE g13##NAME, g14##NAME, g15##NAME, g16##NAME;\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+extern void init##NAME (TYPE *p, TYPE v);\t\t\t\\\n+extern void checkg##NAME (void);\t\t\t\t\\\n+extern TYPE test0##NAME (void);\t\t\t\t\t\\\n+extern TYPE test1##NAME (TYPE);\t\t\t\t\t\\\n+extern TYPE testva##NAME (int n, ...);\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+extern void\t\t\t\t\t\t\t\\\n+check##NAME (TYPE x, TYPE v)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  if (x != v)\t\t\t\t\t\t\t\\\n+    DEBUG_CHECK\t\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+extern void\t\t\t\t\t\t\t\\\n+testit##NAME (void)\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  TYPE rslt;\t\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (#NAME)\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (\" init: \")\t\t\t\t\t\\\n+  init##NAME (&g01##NAME,  1);\t\t\t\t\t\\\n+  init##NAME (&g02##NAME,  2);\t\t\t\t\t\\\n+  init##NAME (&g03##NAME,  3);\t\t\t\t\t\\\n+  init##NAME (&g04##NAME,  4);\t\t\t\t\t\\\n+  init##NAME (&g05##NAME,  5);\t\t\t\t\t\\\n+  init##NAME (&g06##NAME,  6);\t\t\t\t\t\\\n+  init##NAME (&g07##NAME,  7);\t\t\t\t\t\\\n+  init##NAME (&g08##NAME,  8);\t\t\t\t\t\\\n+  init##NAME (&g09##NAME,  9);\t\t\t\t\t\\\n+  init##NAME (&g10##NAME, 10);\t\t\t\t\t\\\n+  init##NAME (&g11##NAME, 11);\t\t\t\t\t\\\n+  init##NAME (&g12##NAME, 12);\t\t\t\t\t\\\n+  init##NAME (&g13##NAME, 13);\t\t\t\t\t\\\n+  init##NAME (&g14##NAME, 14);\t\t\t\t\t\\\n+  init##NAME (&g15##NAME, 15);\t\t\t\t\t\\\n+  init##NAME (&g16##NAME, 16);\t\t\t\t\t\\\n+  checkg##NAME ();\t\t\t\t\t\t\\\n+  DEBUG_NL\t\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (#NAME)\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (\" test0: \")\t\t\t\t\t\\\n+  rslt = test0##NAME ();\t\t\t\t\t\\\n+  check##NAME (rslt, g01##NAME);\t\t\t\t\\\n+  DEBUG_NL\t\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (#NAME)\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (\" test1: \")\t\t\t\t\t\\\n+  rslt = test1##NAME (g01##NAME);\t\t\t\t\\\n+  check##NAME (rslt, g01##NAME);\t\t\t\t\\\n+  if (test_va)\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      DEBUG_NL\t\t\t\t\t\t\t\\\n+      DEBUG_FPUTS (#NAME)\t\t\t\t\t\\\n+      DEBUG_FPUTS (\" testva: \")\t\t\t\t\t\\\n+      rslt = testva##NAME (1, g01##NAME);\t\t\t\\\n+      check##NAME (rslt, g01##NAME);\t\t\t\t\\\n+      rslt = testva##NAME (5, g01##NAME, g02##NAME, g03##NAME,\t\\\n+\t\t\t   g04##NAME, g05##NAME);\t\t\\\n+      check##NAME (rslt, g05##NAME);\t\t\t\t\\\n+      rslt = testva##NAME (9, g01##NAME, g02##NAME, g03##NAME,\t\\\n+\t\t\t   g04##NAME, g05##NAME, g06##NAME,\t\\\n+\t\t\t   g07##NAME, g08##NAME, g09##NAME);\t\\\n+      check##NAME (rslt, g09##NAME);\t\t\t\t\\\n+      rslt = testva##NAME (16, g01##NAME, g02##NAME, g03##NAME,\t\\\n+\t\t\t   g04##NAME, g05##NAME, g06##NAME,\t\\\n+\t\t\t   g07##NAME, g08##NAME, g09##NAME,\t\\\n+\t\t\t   g10##NAME, g11##NAME, g12##NAME,\t\\\n+\t\t\t   g13##NAME, g14##NAME, g15##NAME,\t\\\n+\t\t\t   g16##NAME);\t\t\t\t\\\n+      check##NAME (rslt, g16##NAME);\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  DEBUG_NL\t\t\t\t\t\t\t\\\n+}\n+\n+T(d32, dec32, (dec32)1.5DF);\n+T(d64, dec64, (dec64)2.5DD);\n+T(d128, dec128, (dec128)3.5DL);\n+\n+#undef T"}, {"sha": "285526e2e369c37ecbbeb2d5b283ad7967e4a6f8", "filename": "gcc/testsuite/g++.dg/compat/decimal/return_y.h", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Freturn_y.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Freturn_y.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fdecimal%2Freturn_y.h?ref=ebf0bf7f49c75c98d4c51e8c451eae068a2dd647", "patch": "@@ -0,0 +1,67 @@\n+#include <stdarg.h>\n+\n+#include \"compat-common.h\"\n+\n+#define T(NAME, TYPE, INITVAL)\t\t\t\t\t\\\n+extern TYPE g01##NAME, g02##NAME, g03##NAME, g04##NAME;\t\t\\\n+extern TYPE g05##NAME, g06##NAME, g07##NAME, g08##NAME;\t\t\\\n+extern TYPE g09##NAME, g10##NAME, g11##NAME, g12##NAME;\t\t\\\n+extern TYPE g13##NAME, g14##NAME, g15##NAME, g16##NAME;\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+extern void check##NAME (TYPE x, TYPE v);\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+extern void\t\t\t\t\t\t\t\\\n+init##NAME (TYPE *p, TYPE v)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  *p = v + INITVAL;\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+extern void\t\t\t\t\t\t\t\\\n+checkg##NAME (void)\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  check##NAME (g01##NAME,  1+INITVAL);\t\t\t\t\\\n+  check##NAME (g02##NAME,  2+INITVAL);\t\t\t\t\\\n+  check##NAME (g03##NAME,  3+INITVAL);\t\t\t\t\\\n+  check##NAME (g04##NAME,  4+INITVAL);\t\t\t\t\\\n+  check##NAME (g05##NAME,  5+INITVAL);\t\t\t\t\\\n+  check##NAME (g06##NAME,  6+INITVAL);\t\t\t\t\\\n+  check##NAME (g07##NAME,  7+INITVAL);\t\t\t\t\\\n+  check##NAME (g08##NAME,  8+INITVAL);\t\t\t\t\\\n+  check##NAME (g09##NAME,  9+INITVAL);\t\t\t\t\\\n+  check##NAME (g10##NAME, 10+INITVAL);\t\t\t\t\\\n+  check##NAME (g11##NAME, 11+INITVAL);\t\t\t\t\\\n+  check##NAME (g12##NAME, 12+INITVAL);\t\t\t\t\\\n+  check##NAME (g13##NAME, 13+INITVAL);\t\t\t\t\\\n+  check##NAME (g14##NAME, 14+INITVAL);\t\t\t\t\\\n+  check##NAME (g15##NAME, 15+INITVAL);\t\t\t\t\\\n+  check##NAME (g16##NAME, 16+INITVAL);\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+extern TYPE\t\t\t\t\t\t\t\\\n+test0##NAME (void)\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  return g01##NAME;\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+extern TYPE\t\t\t\t\t\t\t\\\n+test1##NAME (TYPE x01)\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  return x01;\t\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+extern TYPE\t\t\t\t\t\t\t\\\n+testva##NAME (int n, ...)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  int i;\t\t\t\t\t\t\t\\\n+  TYPE rslt;\t\t\t\t\t\t\t\\\n+  va_list ap;\t\t\t\t\t\t\t\\\n+  va_start (ap, n);\t\t\t\t\t\t\\\n+  for (i = 0; i < n; i++)\t\t\t\t\t\\\n+    rslt = va_arg (ap, TYPE);\t\t\t\t\t\\\n+  va_end (ap);\t\t\t\t\t\t\t\\\n+  return rslt;\t\t\t\t\t\t\t\\\n+}\n+\n+T(d32, dec32, (dec32)1.5)\n+T(d64, dec64, (dec64)2.5)\n+T(d128, dec128, (dec128)3.5)"}, {"sha": "5d44841769fd10b0089de0081ba2a2486ce23bac", "filename": "gcc/tree.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=ebf0bf7f49c75c98d4c51e8c451eae068a2dd647", "patch": "@@ -1983,6 +1983,18 @@ fields_length (const_tree type)\n   return count;\n }\n \n+/* Returns the first FIELD_DECL in the TYPE_FIELDS of the RECORD_TYPE or\n+   UNION_TYPE TYPE, or NULL_TREE if none.  */\n+\n+tree\n+first_field (const_tree type)\n+{\n+  tree t = TYPE_FIELDS (type);\n+  while (t && TREE_CODE (t) != FIELD_DECL)\n+    t = TREE_CHAIN (t);\n+  return t;\n+}\n+\n /* Concatenate two chains of nodes (chained through TREE_CHAIN)\n    by modifying the last node in chain 1 to point to chain 2.\n    This is the Lisp primitive `nconc'.  */"}, {"sha": "f5827d59f893f962c3d21b53397726396ae96335", "filename": "gcc/tree.h", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebf0bf7f49c75c98d4c51e8c451eae068a2dd647/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=ebf0bf7f49c75c98d4c51e8c451eae068a2dd647", "patch": "@@ -2251,16 +2251,18 @@ extern enum machine_mode vector_type_mode (const_tree);\n #define TYPE_NEEDS_CONSTRUCTING(NODE) \\\n   (TYPE_CHECK (NODE)->type.needs_constructing_flag)\n \n-/* Indicates that objects of this type (a UNION_TYPE), should be passed\n-   the same way that the first union alternative would be passed.  */\n-#define TYPE_TRANSPARENT_UNION(NODE)  \\\n-  (UNION_TYPE_CHECK (NODE)->type.transparent_union_flag)\n+/* Indicates that a UNION_TYPE object should be passed the same way that\n+   the first union alternative would be passed, or that a RECORD_TYPE\n+   object should be passed the same way that the first (and only) member\n+   would be passed.  */\n+#define TYPE_TRANSPARENT_AGGR(NODE) \\\n+  (RECORD_OR_UNION_CHECK (NODE)->type.transparent_aggr_flag)\n \n /* For an ARRAY_TYPE, indicates that it is not permitted to take the\n    address of a component of the type.  This is the counterpart of\n    DECL_NONADDRESSABLE_P for arrays, see the definition of this flag.  */\n #define TYPE_NONALIASED_COMPONENT(NODE) \\\n-  (ARRAY_TYPE_CHECK (NODE)->type.transparent_union_flag)\n+  (ARRAY_TYPE_CHECK (NODE)->type.transparent_aggr_flag)\n \n /* Indicated that objects of this type should be laid out in as\n    compact a way as possible.  */\n@@ -2285,7 +2287,7 @@ struct GTY(()) tree_type {\n   unsigned int precision : 10;\n   unsigned no_force_blk_flag : 1;\n   unsigned needs_constructing_flag : 1;\n-  unsigned transparent_union_flag : 1;\n+  unsigned transparent_aggr_flag : 1;\n   unsigned restrict_flag : 1;\n   unsigned contains_placeholder_bits : 2;\n \n@@ -4360,6 +4362,10 @@ extern int list_length (const_tree);\n \n extern int fields_length (const_tree);\n \n+/* Returns the first FIELD_DECL in a type.  */\n+\n+extern tree first_field (const_tree);\n+\n /* Given an initializer INIT, return TRUE if INIT is zero or some\n    aggregate of zeros.  Otherwise return FALSE.  */\n "}]}