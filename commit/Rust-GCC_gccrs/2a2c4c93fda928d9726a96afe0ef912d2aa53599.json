{"sha": "2a2c4c93fda928d9726a96afe0ef912d2aa53599", "node_id": "C_kwDOANBUbNoAKDJhMmM0YzkzZmRhOTI4ZDk3MjZhOTZhZmUwZWY5MTJkMmFhNTM1OTk", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-02-24T15:19:14Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-03-05T09:16:30Z"}, "message": "RISC-V: Add testcase for VSETVL PASS\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/rvv/base/scalar_move-1.c: New test.\n\t* gcc.target/riscv/rvv/base/scalar_move-2.c: New test.\n\t* gcc.target/riscv/rvv/base/scalar_move-3.c: New test.\n\t* gcc.target/riscv/rvv/base/scalar_move-4.c: New test.\n\t* gcc.target/riscv/rvv/base/scalar_move-5.c: New test.\n\t* gcc.target/riscv/rvv/base/scalar_move-6.c: New test.\n\t* gcc.target/riscv/rvv/base/scalar_move-7.c: New test.\n\t* gcc.target/riscv/rvv/base/scalar_move-8.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-100.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-101.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-78.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-79.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-80.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-81.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-82.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-83.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-84.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-85.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-86.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-87.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-88.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-89.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-90.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-91.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-92.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-93.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-94.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-95.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-96.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-97.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-98.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-99.c: New test.", "tree": {"sha": "bb215300e4c12a05e2f5319eb43d6a56a8286670", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb215300e4c12a05e2f5319eb43d6a56a8286670"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a2c4c93fda928d9726a96afe0ef912d2aa53599", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a2c4c93fda928d9726a96afe0ef912d2aa53599", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a2c4c93fda928d9726a96afe0ef912d2aa53599", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a2c4c93fda928d9726a96afe0ef912d2aa53599/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec99ffabc3d32bbc0cce164e84942e176c13e75c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec99ffabc3d32bbc0cce164e84942e176c13e75c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec99ffabc3d32bbc0cce164e84942e176c13e75c"}], "stats": {"total": 1622, "additions": 1622, "deletions": 0}, "files": [{"sha": "18349132a887792c4878559f1c2e7fb330f7cf4d", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/scalar_move-1.c", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2c4c93fda928d9726a96afe0ef912d2aa53599/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fscalar_move-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2c4c93fda928d9726a96afe0ef912d2aa53599/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fscalar_move-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fscalar_move-1.c?ref=2a2c4c93fda928d9726a96afe0ef912d2aa53599", "patch": "@@ -0,0 +1,75 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -fno-schedule-insns -fno-schedule-insns2 -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+\n+#include \"riscv_vector.h\"\n+\n+\n+/*\n+** foo1:\n+**\tlw\\t[a-x0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+int32_t foo1 (void *base, size_t vl)\n+{\n+  vint32m1_t v = *(vint32m1_t*)base;\n+  int32_t scalar = __riscv_vmv_x_s_i32m1_i32 (v);\n+  return scalar;\n+}\n+\n+/*\n+** foo2:\n+**\tlw\\t[a-x0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+int32_t foo2 (void *base, size_t vl)\n+{\n+  vint32mf2_t v = *(vint32mf2_t*)base;\n+  int32_t scalar = __riscv_vmv_x_s_i32mf2_i32 (v);\n+  return scalar;\n+}\n+\n+/*\n+** foo3:\n+**\tlw\\t[a-x0-9]+,4\\([a-x0-9]+\\)\n+**\tret\n+*/\n+int32_t foo3 (int32_t *base, size_t vl)\n+{\n+  vint32m1_t v = *(vint32m1_t*)(base+1);\n+  int32_t scalar = __riscv_vmv_x_s_i32m1_i32 (v);\n+  return scalar;\n+}\n+\n+/*\n+** foo4:\n+** vl1re32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+** vsetvli\\tzero,[a-x0-9]+,e32,m1,t[au],m[au]\n+** vadd.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+** vsetvli\\tzero,[a-x0-9]+,e32,m2,t[au],m[au]\n+** vmv.x.s\\t[a-x0-9]+,\\s*v[0-9]+\n+** vmv.v.x\\tv[0-9]+,\\s*[a-x0-9]+\n+** vmv.x.s\\t[a-x0-9]+,\\s*v[0-9]+\n+** ret\n+*/\n+int32_t foo4 (void *base, size_t vl)\n+{\n+  vint32m1_t v = *(vint32m1_t*)base;\n+  v = __riscv_vadd_vv_i32m1 (v,v,vl);\n+  int32_t scalar = __riscv_vmv_x_s_i32m1_i32 (v);\n+  vint32m2_t new_v = __riscv_vmv_v_x_i32m2 (scalar, vl);\n+  scalar = __riscv_vmv_x_s_i32m2_i32 (new_v);\n+  return scalar;\n+}\n+\n+/*\n+** foo5:\n+**\tflw\\t[a-x0-9]+,4\\([a-x0-9]+\\)\n+**\tret\n+*/\n+float foo5 (int32_t *base, size_t vl)\n+{\n+  vint32m1_t v = *(vint32m1_t*)(base+1);\n+  int32_t scalar = __riscv_vmv_x_s_i32m1_i32 (v);\n+  return *(float*)&scalar;\n+}"}, {"sha": "39fc107c657c5e550bc82a3ae753ee9b0659c396", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/scalar_move-2.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2c4c93fda928d9726a96afe0ef912d2aa53599/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fscalar_move-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2c4c93fda928d9726a96afe0ef912d2aa53599/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fscalar_move-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fscalar_move-2.c?ref=2a2c4c93fda928d9726a96afe0ef912d2aa53599", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include <riscv_vector.h>\n+\n+/*\n+** foo1:\n+**\tld\\t[a-x0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+int64_t foo (void *base, size_t vl)\n+{\n+    vint64m1_t v = *(vint64m1_t*)base;\n+    int64_t scalar = __riscv_vmv_x_s_i64m1_i64 (v);\n+    return scalar;\n+}\n+\n+/*\n+** foo2:\n+**\tld\\t[a-x0-9]+,8\\([a-x0-9]+\\)\n+**\tret\n+*/\n+int64_t foo2 (int64_t *base, size_t vl)\n+{\n+    vint64m1_t v = *(vint64m1_t*)(base+1);\n+    int64_t scalar = __riscv_vmv_x_s_i64m1_i64 (v);\n+    return scalar;\n+}\n+\n+/*\n+** foo3:\n+** vl1re64\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+** vsetvli\\tzero,[a-x0-9]+,e64,m1,t[au],m[au]\n+** vadd.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+** vsetvli\\tzero,[a-x0-9]+,e64,m2,t[au],m[au]\n+** vmv.x.s\\t[a-x0-9]+,\\s*v[0-9]+\n+** vmv.v.x\\tv[0-9]+,[a-x0-9]+\n+** vmv.x.s\\t[a-x0-9]+,\\s*v[0-9]+\n+** ret\n+*/\n+int64_t foo3 (void *base, size_t vl)\n+{\n+    vint64m1_t v = *(vint64m1_t*)base;\n+    v = __riscv_vadd_vv_i64m1 (v,v,vl);\n+\n+    int64_t scalar = __riscv_vmv_x_s_i64m1_i64 (v);\n+    vint64m2_t new_v = __riscv_vmv_v_x_i64m2 (scalar, vl);\n+    scalar = __riscv_vmv_x_s_i64m2_i64 (new_v);\n+    return scalar;\n+}\n+\n+/*\n+** foo4:\n+**\tfld\\t[a-x0-9]+,4\\([a-x0-9]+\\)\n+**\tret\n+*/\n+double foo4 (int64_t *base, size_t vl)\n+{\n+    vint64m1_t v = *(vint64m1_t*)(base+1);\n+    int64_t scalar = __riscv_vmv_x_s_i64m1_i64 (v);\n+    return *(double*)&scalar;\n+}"}, {"sha": "0cdf49a606f3726513ad5a2ec18cc9b9ce616bf0", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/scalar_move-3.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2c4c93fda928d9726a96afe0ef912d2aa53599/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fscalar_move-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2c4c93fda928d9726a96afe0ef912d2aa53599/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fscalar_move-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fscalar_move-3.c?ref=2a2c4c93fda928d9726a96afe0ef912d2aa53599", "patch": "@@ -0,0 +1,58 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+/*\n+** foo1:\n+**\tlw\\t[a-x0-9]+,4\\([a-x0-9]+\\)\n+**\tlw\\t[a-x0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+int64_t foo (void *base, size_t vl)\n+{\n+    vint64m1_t v = *(vint64m1_t*)base;\n+    int64_t scalar = __riscv_vmv_x_s_i64m1_i64 (v);\n+    return scalar;\n+}\n+\n+/*\n+** foo2:\n+**\tlw\\t[a-x0-9]+,12\\([a-x0-9]+\\)\n+**\tlw\\t[a-x0-9]+,8\\([a-x0-9]+\\)\n+**\tret\n+*/\n+int64_t foo2 (int64_t *base, size_t vl)\n+{\n+    vint64m1_t v = *(vint64m1_t*)(base+1);\n+    int64_t scalar = __riscv_vmv_x_s_i64m1_i64 (v);\n+    return scalar;\n+}\n+\n+/*\n+** foo3:\n+** ...\n+** vsrl.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+** vmv.x.s\\t[a-x0-9]+,\\s*v[0-9]+\n+** vmv.x.s\\t[a-x0-9]+,\\s*v[0-9]+\n+** ret\n+*/\n+int64_t foo3 (void *base, size_t vl)\n+{\n+    vint64m1_t v = *(vint64m1_t*)base;\n+    v = __riscv_vadd_vv_i64m1 (v,v,vl);\n+    int64_t scalar = __riscv_vmv_x_s_i64m1_i64 (v);\n+    return scalar;\n+}\n+\n+/*\n+** foo4:\n+**\tfld\\t[a-x0-9]+,4\\([a-x0-9]+\\)\n+**\tret\n+*/\n+double foo4 (int64_t *base, size_t vl)\n+{\n+    vint64m1_t v = *(vint64m1_t*)(base+1);\n+    int64_t scalar = __riscv_vmv_x_s_i64m1_i64 (v);\n+    return *(double*)&scalar;\n+}"}, {"sha": "19544f93a4a9016799575864b422a9536ed168e9", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/scalar_move-4.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2c4c93fda928d9726a96afe0ef912d2aa53599/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fscalar_move-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2c4c93fda928d9726a96afe0ef912d2aa53599/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fscalar_move-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fscalar_move-4.c?ref=2a2c4c93fda928d9726a96afe0ef912d2aa53599", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -fno-schedule-insns -fno-schedule-insns2 -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+\n+#include \"riscv_vector.h\"\n+\n+\n+/*\n+** foo1:\n+**\tflw\\t[a-x0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+float foo1 (void *base, size_t vl)\n+{\n+  vfloat32m1_t v = *(vfloat32m1_t*)base;\n+  float scalar = __riscv_vfmv_f_s_f32m1_f32 (v);\n+  return scalar;\n+}\n+\n+/*\n+** foo2:\n+**\tflw\\t[a-x0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+float foo2 (void *base, size_t vl)\n+{\n+  vfloat32mf2_t v = *(vfloat32mf2_t*)base;\n+  float scalar = __riscv_vfmv_f_s_f32mf2_f32 (v);\n+  return scalar;\n+}\n+\n+/*\n+** foo3:\n+**\tflw\\t[a-x0-9]+,4\\([a-x0-9]+\\)\n+**\tret\n+*/\n+float foo3 (float *base, size_t vl)\n+{\n+  vfloat32m1_t v = *(vfloat32m1_t*)(base+1);\n+  float scalar = __riscv_vfmv_f_s_f32m1_f32 (v);\n+  return scalar;\n+}\n+\n+/*\n+** foo4:\n+**\tlw\\t[a-x0-9]+,4\\([a-x0-9]+\\)\n+**\tret\n+*/\n+int32_t foo4 (float *base, size_t vl)\n+{\n+  vfloat32m1_t v = *(vfloat32m1_t*)(base+1);\n+  float scalar = __riscv_vfmv_f_s_f32m1_f32 (v);\n+  return *(int32_t*)&scalar;\n+}"}, {"sha": "db6800c89781b1ac580cdd0d880ccedcea2251e9", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/scalar_move-5.c", "status": "added", "additions": 176, "deletions": 0, "changes": 176, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2c4c93fda928d9726a96afe0ef912d2aa53599/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fscalar_move-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2c4c93fda928d9726a96afe0ef912d2aa53599/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fscalar_move-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fscalar_move-5.c?ref=2a2c4c93fda928d9726a96afe0ef912d2aa53599", "patch": "@@ -0,0 +1,176 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -fno-schedule-insns -fno-schedule-insns2 -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+\n+#include \"riscv_vector.h\"\n+\n+/*\n+** foo:\n+** addi\\t[a-x0-9]+,\\s*[a-x0-9]+,100\n+** vsetvli\\tzero,a2,e64,m2,t[au],m[au]\n+** vlse64.v\\tv[0-9]+,0\\([a-x0-9]+\\),zero\n+** vs2r.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+** ret\n+*/\n+void foo (void *base, void *out, size_t vl)\n+{\n+    int64_t scalar = *(int64_t*)(base + 100);\n+    vint64m2_t v = __riscv_vmv_s_x_i64m2 (scalar, vl);\n+    *(vint64m2_t*)out = v;\n+}\n+\n+/*\n+** foo2:\n+** addi\\t[a-x0-9]+,\\s*[a-x0-9]+,100\n+** vsetvli\\tzero,a2,e64,m2,t[au],m[au]\n+** vlse64.v\\tv[0-9]+,0\\([a-x0-9]+\\),zero\n+** vs2r.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+** ret\n+*/\n+void foo2 (void *base, void *out, size_t vl)\n+{\n+    double scalar = *(double*)(base + 100);\n+    vfloat64m2_t v = __riscv_vfmv_s_f_f64m2 (scalar, vl);\n+    *(vfloat64m2_t*)out = v;\n+}\n+\n+/*\n+** foo3:\n+** ...\n+** vmv.s.x\\tv[0-9]+,\\s*[a-x0-9]+\n+** ...\n+** ret\n+*/\n+void foo3 (void *base, void *out, size_t vl)\n+{\n+    int64_t scalar = *(int64_t*)(base + 100);\n+    vint64m2_t merge = *(vint64m2_t*) (base + 200);\n+    vint64m2_t v = __riscv_vmv_s_x_i64m2_tu (merge, scalar, vl);\n+    *(vint64m2_t*)out = v;\n+}\n+\n+/*\n+** foo4:\n+** ...\n+** vfmv.s.f\\tv[0-9]+,\\s*[a-x0-9]+\n+** ...\n+** ret\n+*/\n+void foo4 (void *base, void *out, size_t vl)\n+{\n+    double scalar = *(double*)(base + 100);\n+    vfloat64m2_t merge = *(vfloat64m2_t*) (base + 200);\n+    vfloat64m2_t v = __riscv_vfmv_s_f_f64m2_tu (merge, scalar, vl);\n+    *(vfloat64m2_t*)out = v;\n+}\n+\n+/*\n+** foo5:\n+** ...\n+** vmv.s.x\\tv[0-9]+,\\s*[a-x0-9]+\n+** ...\n+** ret\n+*/\n+void foo5 (void *base, void *out, size_t vl, int64_t x)\n+{\n+    vint64m2_t v = __riscv_vmv_s_x_i64m2 (x, vl);\n+    *(vint64m2_t*)out = v;\n+}\n+\n+/*\n+** foo6:\n+** ...\n+** vfmv.s.f\\tv[0-9]+,\\s*[a-x0-9]+\n+** ...\n+** ret\n+*/\n+void foo6 (void *base, void *out, size_t vl, double x)\n+{\n+    vfloat64m2_t v = __riscv_vfmv_s_f_f64m2 (x, vl);\n+    *(vfloat64m2_t*)out = v;\n+}\n+\n+/*\n+** foo7:\n+** ...\n+** vmv.s.x\\tv[0-9]+,\\s*[a-x0-9]+\n+** ...\n+** ret\n+*/\n+void foo7 (void *base, void *out, size_t vl, int64_t x)\n+{\n+    vint64m2_t merge = *(vint64m2_t*) (base + 200);\n+    vint64m2_t v = __riscv_vmv_s_x_i64m2_tu (merge, x, vl);\n+    *(vint64m2_t*)out = v;\n+}\n+\n+/*\n+** foo8:\n+** ...\n+** vfmv.s.f\\tv[0-9]+,\\s*[a-x0-9]+\n+** ...\n+** ret\n+*/\n+void foo8 (void *base, void *out, size_t vl, double x)\n+{\n+    vfloat64m2_t merge = *(vfloat64m2_t*) (base + 200);\n+    vfloat64m2_t v = __riscv_vfmv_s_f_f64m2_tu (merge, x, vl);\n+    *(vfloat64m2_t*)out = v;\n+}\n+\n+/*\n+** foo9:\n+** ...\n+** vmv.v.i\\tv[0-9]+,\\s*-15\n+** ...\n+** ret\n+*/\n+void foo9 (void *base, void *out, size_t vl)\n+{\n+    int64_t scalar = *(int64_t*)(base + 100);\n+    vint64m2_t v = __riscv_vmv_s_x_i64m2 (-15, vl);\n+    *(vint64m2_t*)out = v;\n+}\n+\n+/*\n+** foo10:\n+** ...\n+** vmv.s.x\\tv[0-9]+,\\s*[a-x0-9]+\n+** ...\n+** ret\n+*/\n+void foo10 (void *base, void *out, size_t vl)\n+{\n+    int64_t scalar = *(int64_t*)(base + 100);\n+    vint64m2_t merge = *(vint64m2_t*) (base + 200);\n+    vint64m2_t v = __riscv_vmv_s_x_i64m2_tu (merge, -15, vl);\n+    *(vint64m2_t*)out = v;\n+}\n+\n+/*\n+** foo11:\n+** ...\n+** vmv.v.i\\tv[0-9]+,\\s*0\n+** ...\n+** ret\n+*/\n+void foo11 (void *base, void *out, size_t vl)\n+{\n+    double scalar = *(double*)(base + 100);\n+    vfloat64m2_t v = __riscv_vfmv_s_f_f64m2 (0, vl);\n+    *(vfloat64m2_t*)out = v;\n+}\n+\n+/*\n+** foo12:\n+** ...\n+** vfmv.s.f\\tv[0-9]+,\\s*[a-x0-9]+\n+** ...\n+** ret\n+*/\n+void foo12 (void *base, void *out, size_t vl)\n+{\n+    vfloat64m2_t merge = *(vfloat64m2_t*) (base + 200);\n+    vfloat64m2_t v = __riscv_vfmv_s_f_f64m2_tu (merge, 0, vl);\n+    *(vfloat64m2_t*)out = v;\n+}"}, {"sha": "268ddd7c1164f533c4f16228a5739dcb566bb224", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/scalar_move-6.c", "status": "added", "additions": 209, "deletions": 0, "changes": 209, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2c4c93fda928d9726a96afe0ef912d2aa53599/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fscalar_move-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2c4c93fda928d9726a96afe0ef912d2aa53599/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fscalar_move-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fscalar_move-6.c?ref=2a2c4c93fda928d9726a96afe0ef912d2aa53599", "patch": "@@ -0,0 +1,209 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -fno-schedule-insns -fno-schedule-insns2 -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+\n+#include \"riscv_vector.h\"\n+\n+/*\n+** foo:\n+** addi\\t[a-x0-9]+,\\s*[a-x0-9]+,100\n+** vsetvli\\tzero,a2,e64,m2,t[au],m[au]\n+** vlse64.v\\tv[0-9]+,0\\([a-x0-9]+\\),zero\n+** vs2r.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+** ret\n+*/\n+void foo (void *base, void *out, size_t vl)\n+{\n+    int64_t scalar = *(int64_t*)(base + 100);\n+    vint64m2_t v = __riscv_vmv_s_x_i64m2 (scalar, vl);\n+    *(vint64m2_t*)out = v;\n+}\n+\n+/*\n+** foo2:\n+** addi\\t[a-x0-9]+,\\s*[a-x0-9]+,100\n+** vsetvli\\tzero,a2,e64,m2,t[au],m[au]\n+** vlse64.v\\tv[0-9]+,0\\([a-x0-9]+\\),zero\n+** vs2r.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+** ret\n+*/\n+void foo2 (void *base, void *out, size_t vl)\n+{\n+    double scalar = *(double*)(base + 100);\n+    vfloat64m2_t v = __riscv_vfmv_s_f_f64m2 (scalar, vl);\n+    *(vfloat64m2_t*)out = v;\n+}\n+\n+/*\n+** foo3:\n+** ...\n+** andi\\t[a-x0-9]+,\\s*[a-x0-9]+,\\s*1\n+** ...\n+** vlse64.v\\tv[0-9]+,0\\([a-x0-9]+\\),zero\n+** ...\n+** ret\n+*/\n+void foo3 (void *base, void *out, size_t vl)\n+{\n+    int64_t scalar = *(int64_t*)(base + 100);\n+    vint64m2_t merge = *(vint64m2_t*) (base + 200);\n+    vint64m2_t v = __riscv_vmv_s_x_i64m2_tu (merge, scalar, vl);\n+    *(vint64m2_t*)out = v;\n+}\n+\n+/*\n+** foo4:\n+** ...\n+** andi\\t[a-x0-9]+,\\s*[a-x0-9]+,\\s*1\n+** ...\n+** vlse64.v\\tv[0-9]+,0\\([a-x0-9]+\\),zero\n+** ...\n+** ret\n+*/\n+void foo4 (void *base, void *out, size_t vl)\n+{\n+    double scalar = *(double*)(base + 100);\n+    vfloat64m2_t merge = *(vfloat64m2_t*) (base + 200);\n+    vfloat64m2_t v = __riscv_vfmv_s_f_f64m2_tu (merge, scalar, vl);\n+    *(vfloat64m2_t*)out = v;\n+}\n+\n+/*\n+** foo5:\n+** ...\n+** vlse64.v\\tv[0-9]+,0\\([a-x0-9]+\\),zero\n+** ...\n+*/\n+void foo5 (void *base, void *out, size_t vl, int64_t x)\n+{\n+    vint64m2_t v = __riscv_vmv_s_x_i64m2 (x, vl);\n+    *(vint64m2_t*)out = v;\n+}\n+\n+/*\n+** foo6:\n+** ...\n+** vfmv.s.f\\tv[0-9]+,\\s*[a-x0-9]+\n+** ...\n+** ret\n+*/\n+void foo6 (void *base, void *out, size_t vl, double x)\n+{\n+    vfloat64m2_t v = __riscv_vfmv_s_f_f64m2 (x, vl);\n+    *(vfloat64m2_t*)out = v;\n+}\n+\n+/*\n+** foo7:\n+** ...\n+** vlse64.v\\tv[0-9]+,0\\([a-x0-9]+\\),zero\n+** ...\n+*/\n+void foo7 (void *base, void *out, size_t vl, int64_t x)\n+{\n+    vint64m2_t merge = *(vint64m2_t*) (base + 200);\n+    vint64m2_t v = __riscv_vmv_s_x_i64m2_tu (merge, x, vl);\n+    *(vint64m2_t*)out = v;\n+}\n+\n+/*\n+** foo8:\n+** ...\n+** vfmv.s.f\\tv[0-9]+,\\s*[a-x0-9]+\n+** ...\n+** ret\n+*/\n+void foo8 (void *base, void *out, size_t vl, double x)\n+{\n+    vfloat64m2_t merge = *(vfloat64m2_t*) (base + 200);\n+    vfloat64m2_t v = __riscv_vfmv_s_f_f64m2_tu (merge, x, vl);\n+    *(vfloat64m2_t*)out = v;\n+}\n+\n+/*\n+** foo9:\n+** ...\n+** vmv.v.i\\tv[0-9]+,\\s*-15\n+** ...\n+** ret\n+*/\n+void foo9 (void *base, void *out, size_t vl)\n+{\n+    int64_t scalar = *(int64_t*)(base + 100);\n+    vint64m2_t v = __riscv_vmv_s_x_i64m2 (-15, vl);\n+    *(vint64m2_t*)out = v;\n+}\n+\n+/*\n+** foo10:\n+** ...\n+** andi\\t[a-x0-9]+,\\s*[a-x0-9]+,\\s*1\n+** ...\n+** vmv.v.i\\tv[0-9]+,\\s*-15\n+** ...\n+*/\n+void foo10 (void *base, void *out, size_t vl)\n+{\n+    int64_t scalar = *(int64_t*)(base + 100);\n+    vint64m2_t merge = *(vint64m2_t*) (base + 200);\n+    vint64m2_t v = __riscv_vmv_s_x_i64m2_tu (merge, -15, vl);\n+    *(vint64m2_t*)out = v;\n+}\n+\n+/*\n+** foo11:\n+** ...\n+** vmv.v.i\\tv[0-9]+,\\s*0\n+** ...\n+** ret\n+*/\n+void foo11 (void *base, void *out, size_t vl)\n+{\n+    double scalar = *(double*)(base + 100);\n+    vfloat64m2_t v = __riscv_vfmv_s_f_f64m2 (0, vl);\n+    *(vfloat64m2_t*)out = v;\n+}\n+\n+/*\n+** foo12:\n+** ...\n+** andi\\t[a-x0-9]+,\\s*[a-x0-9]+,\\s*1\n+** ...\n+** vmv.v.i\\tv[0-9]+,\\s*0\n+** ...\n+** ret\n+*/\n+void foo12 (void *base, void *out, size_t vl)\n+{\n+    vfloat64m2_t merge = *(vfloat64m2_t*) (base + 200);\n+    vfloat64m2_t v = __riscv_vfmv_s_f_f64m2_tu (merge, 0, vl);\n+    *(vfloat64m2_t*)out = v;\n+}\n+\n+/*\n+** foo13:\n+** ...\n+** vmv.s.x\\tv[0-9]+,\\s*[a-x0-9]+\n+** ...\n+** ret\n+*/\n+void foo13 (void *base, void *out, size_t vl)\n+{\n+    int64_t scalar = *(int64_t*)(base + 100);\n+    vint64m2_t v = __riscv_vmv_s_x_i64m2 (0xAAAAA, vl);\n+    *(vint64m2_t*)out = v;\n+}\n+\n+/*\n+** foo14:\n+** ...\n+** vmv.s.x\\tv[0-9]+,\\s*[a-x0-9]+\n+** ...\n+*/\n+void foo14 (void *base, void *out, size_t vl)\n+{\n+    int64_t scalar = *(int64_t*)(base + 100);\n+    vint64m2_t merge = *(vint64m2_t*) (base + 200);\n+    vint64m2_t v = __riscv_vmv_s_x_i64m2_tu (merge, 0xAAAAA, vl);\n+    *(vint64m2_t*)out = v;\n+}"}, {"sha": "b218f2d0ba4a3d1254c97c1a8566590c80fe1204", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/scalar_move-7.c", "status": "added", "additions": 176, "deletions": 0, "changes": 176, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2c4c93fda928d9726a96afe0ef912d2aa53599/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fscalar_move-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2c4c93fda928d9726a96afe0ef912d2aa53599/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fscalar_move-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fscalar_move-7.c?ref=2a2c4c93fda928d9726a96afe0ef912d2aa53599", "patch": "@@ -0,0 +1,176 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -fno-schedule-insns -fno-schedule-insns2 -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+\n+#include \"riscv_vector.h\"\n+\n+/*\n+** foo:\n+** addi\\t[a-x0-9]+,\\s*[a-x0-9]+,100\n+** vsetvli\\tzero,a2,e64,m2,t[au],m[au]\n+** vlse64.v\\tv[0-9]+,0\\([a-x0-9]+\\),zero\n+** vs2r.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+** ret\n+*/\n+void foo (void *base, void *out, size_t vl)\n+{\n+    int64_t scalar = *(int64_t*)(base + 100);\n+    vint64m2_t v = __riscv_vmv_v_x_i64m2 (scalar, vl);\n+    *(vint64m2_t*)out = v;\n+}\n+\n+/*\n+** foo2:\n+** addi\\t[a-x0-9]+,\\s*[a-x0-9]+,100\n+** vsetvli\\tzero,a2,e64,m2,t[au],m[au]\n+** vlse64.v\\tv[0-9]+,0\\([a-x0-9]+\\),zero\n+** vs2r.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+** ret\n+*/\n+void foo2 (void *base, void *out, size_t vl)\n+{\n+    double scalar = *(double*)(base + 100);\n+    vfloat64m2_t v = __riscv_vfmv_v_f_f64m2 (scalar, vl);\n+    *(vfloat64m2_t*)out = v;\n+}\n+\n+/*\n+** foo3:\n+** ...\n+** vlse64.v\\tv[0-9]+,0\\([a-x0-9]+\\),zero\n+** ...\n+** ret\n+*/\n+void foo3 (void *base, void *out, size_t vl)\n+{\n+    int64_t scalar = *(int64_t*)(base + 100);\n+    vint64m2_t merge = *(vint64m2_t*) (base + 200);\n+    vint64m2_t v = __riscv_vmv_v_x_i64m2_tu (merge, scalar, vl);\n+    *(vint64m2_t*)out = v;\n+}\n+\n+/*\n+** foo4:\n+** ...\n+** vlse64.v\\tv[0-9]+,0\\([a-x0-9]+\\),zero\n+** ...\n+** ret\n+*/\n+void foo4 (void *base, void *out, size_t vl)\n+{\n+    double scalar = *(double*)(base + 100);\n+    vfloat64m2_t merge = *(vfloat64m2_t*) (base + 200);\n+    vfloat64m2_t v = __riscv_vfmv_v_f_f64m2_tu (merge, scalar, vl);\n+    *(vfloat64m2_t*)out = v;\n+}\n+\n+/*\n+** foo5:\n+** ...\n+** vmv.v.x\\tv[0-9]+,\\s*[a-x0-9]+\n+** ...\n+** ret\n+*/\n+void foo5 (void *base, void *out, size_t vl, int64_t x)\n+{\n+    vint64m2_t v = __riscv_vmv_v_x_i64m2 (x, vl);\n+    *(vint64m2_t*)out = v;\n+}\n+\n+/*\n+** foo6:\n+** ...\n+** vfmv.v.f\\tv[0-9]+,\\s*[a-x0-9]+\n+** ...\n+** ret\n+*/\n+void foo6 (void *base, void *out, size_t vl, double x)\n+{\n+    vfloat64m2_t v = __riscv_vfmv_v_f_f64m2 (x, vl);\n+    *(vfloat64m2_t*)out = v;\n+}\n+\n+/*\n+** foo7:\n+** ...\n+** vmv.v.x\\tv[0-9]+,\\s*[a-x0-9]+\n+** ...\n+** ret\n+*/\n+void foo7 (void *base, void *out, size_t vl, int64_t x)\n+{\n+    vint64m2_t merge = *(vint64m2_t*) (base + 200);\n+    vint64m2_t v = __riscv_vmv_v_x_i64m2_tu (merge, x, vl);\n+    *(vint64m2_t*)out = v;\n+}\n+\n+/*\n+** foo8:\n+** ...\n+** vfmv.v.f\\tv[0-9]+,\\s*[a-x0-9]+\n+** ...\n+** ret\n+*/\n+void foo8 (void *base, void *out, size_t vl, double x)\n+{\n+    vfloat64m2_t merge = *(vfloat64m2_t*) (base + 200);\n+    vfloat64m2_t v = __riscv_vfmv_v_f_f64m2_tu (merge, x, vl);\n+    *(vfloat64m2_t*)out = v;\n+}\n+\n+/*\n+** foo9:\n+** ...\n+** vmv.v.i\\tv[0-9]+,\\s*-15\n+** ...\n+** ret\n+*/\n+void foo9 (void *base, void *out, size_t vl)\n+{\n+    int64_t scalar = *(int64_t*)(base + 100);\n+    vint64m2_t v = __riscv_vmv_v_x_i64m2 (-15, vl);\n+    *(vint64m2_t*)out = v;\n+}\n+\n+/*\n+** foo10:\n+** ...\n+** vmv.v.i\\tv[0-9]+,\\s*-15\n+** ...\n+** ret\n+*/\n+void foo10 (void *base, void *out, size_t vl)\n+{\n+    int64_t scalar = *(int64_t*)(base + 100);\n+    vint64m2_t merge = *(vint64m2_t*) (base + 200);\n+    vint64m2_t v = __riscv_vmv_v_x_i64m2_tu (merge, -15, vl);\n+    *(vint64m2_t*)out = v;\n+}\n+\n+/*\n+** foo11:\n+** ...\n+** vmv.v.i\\tv[0-9]+,\\s*0\n+** ...\n+** ret\n+*/\n+void foo11 (void *base, void *out, size_t vl)\n+{\n+    double scalar = *(double*)(base + 100);\n+    vfloat64m2_t v = __riscv_vfmv_v_f_f64m2 (0, vl);\n+    *(vfloat64m2_t*)out = v;\n+}\n+\n+/*\n+** foo12:\n+** ...\n+** vmv.v.i\\tv[0-9]+,\\s*0\n+** ...\n+** ret\n+*/\n+void foo12 (void *base, void *out, size_t vl)\n+{\n+    vfloat64m2_t merge = *(vfloat64m2_t*) (base + 200);\n+    vfloat64m2_t v = __riscv_vfmv_v_f_f64m2_tu (merge, 0, vl);\n+    *(vfloat64m2_t*)out = v;\n+}"}, {"sha": "4438e793dbc392fe36e792db9fec9d57e1255c9d", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/scalar_move-8.c", "status": "added", "additions": 201, "deletions": 0, "changes": 201, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2c4c93fda928d9726a96afe0ef912d2aa53599/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fscalar_move-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2c4c93fda928d9726a96afe0ef912d2aa53599/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fscalar_move-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fscalar_move-8.c?ref=2a2c4c93fda928d9726a96afe0ef912d2aa53599", "patch": "@@ -0,0 +1,201 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -fno-schedule-insns -fno-schedule-insns2 -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+\n+#include \"riscv_vector.h\"\n+\n+/*\n+** foo:\n+** addi\\t[a-x0-9]+,\\s*[a-x0-9]+,100\n+** vsetvli\\tzero,a2,e64,m2,t[au],m[au]\n+** vlse64.v\\tv[0-9]+,0\\([a-x0-9]+\\),zero\n+** vs2r.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+** ret\n+*/\n+void foo (void *base, void *out, size_t vl)\n+{\n+    int64_t scalar = *(int64_t*)(base + 100);\n+    vint64m2_t v = __riscv_vmv_v_x_i64m2 (scalar, vl);\n+    *(vint64m2_t*)out = v;\n+}\n+\n+/*\n+** foo2:\n+** addi\\t[a-x0-9]+,\\s*[a-x0-9]+,100\n+** vsetvli\\tzero,a2,e64,m2,t[au],m[au]\n+** vlse64.v\\tv[0-9]+,0\\([a-x0-9]+\\),zero\n+** vs2r.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+** ret\n+*/\n+void foo2 (void *base, void *out, size_t vl)\n+{\n+    double scalar = *(double*)(base + 100);\n+    vfloat64m2_t v = __riscv_vfmv_v_f_f64m2 (scalar, vl);\n+    *(vfloat64m2_t*)out = v;\n+}\n+\n+/*\n+** foo3:\n+** ...\n+** vlse64.v\\tv[0-9]+,0\\([a-x0-9]+\\),zero\n+** ...\n+** ret\n+*/\n+void foo3 (void *base, void *out, size_t vl)\n+{\n+    int64_t scalar = *(int64_t*)(base + 100);\n+    vint64m2_t merge = *(vint64m2_t*) (base + 200);\n+    vint64m2_t v = __riscv_vmv_v_x_i64m2_tu (merge, scalar, vl);\n+    *(vint64m2_t*)out = v;\n+}\n+\n+/*\n+** foo4:\n+** ...\n+** vlse64.v\\tv[0-9]+,0\\([a-x0-9]+\\),zero\n+** ...\n+** ret\n+*/\n+void foo4 (void *base, void *out, size_t vl)\n+{\n+    double scalar = *(double*)(base + 100);\n+    vfloat64m2_t merge = *(vfloat64m2_t*) (base + 200);\n+    vfloat64m2_t v = __riscv_vfmv_v_f_f64m2_tu (merge, scalar, vl);\n+    *(vfloat64m2_t*)out = v;\n+}\n+\n+/*\n+** foo5:\n+** ...\n+** vlse64.v\\tv[0-9]+,0\\([a-x0-9]+\\),zero\n+** ...\n+*/\n+void foo5 (void *base, void *out, size_t vl, int64_t x)\n+{\n+    vint64m2_t v = __riscv_vmv_v_x_i64m2 (x, vl);\n+    *(vint64m2_t*)out = v;\n+}\n+\n+/*\n+** foo6:\n+** ...\n+** vfmv.v.f\\tv[0-9]+,\\s*[a-x0-9]+\n+** ...\n+** ret\n+*/\n+void foo6 (void *base, void *out, size_t vl, double x)\n+{\n+    vfloat64m2_t v = __riscv_vfmv_v_f_f64m2 (x, vl);\n+    *(vfloat64m2_t*)out = v;\n+}\n+\n+/*\n+** foo7:\n+** ...\n+** vlse64.v\\tv[0-9]+,0\\([a-x0-9]+\\),zero\n+** ...\n+*/\n+void foo7 (void *base, void *out, size_t vl, int64_t x)\n+{\n+    vint64m2_t merge = *(vint64m2_t*) (base + 200);\n+    vint64m2_t v = __riscv_vmv_v_x_i64m2_tu (merge, x, vl);\n+    *(vint64m2_t*)out = v;\n+}\n+\n+/*\n+** foo8:\n+** ...\n+** vfmv.v.f\\tv[0-9]+,\\s*[a-x0-9]+\n+** ...\n+** ret\n+*/\n+void foo8 (void *base, void *out, size_t vl, double x)\n+{\n+    vfloat64m2_t merge = *(vfloat64m2_t*) (base + 200);\n+    vfloat64m2_t v = __riscv_vfmv_v_f_f64m2_tu (merge, x, vl);\n+    *(vfloat64m2_t*)out = v;\n+}\n+\n+/*\n+** foo9:\n+** ...\n+** vmv.v.i\\tv[0-9]+,\\s*-15\n+** ...\n+** ret\n+*/\n+void foo9 (void *base, void *out, size_t vl)\n+{\n+    int64_t scalar = *(int64_t*)(base + 100);\n+    vint64m2_t v = __riscv_vmv_v_x_i64m2 (-15, vl);\n+    *(vint64m2_t*)out = v;\n+}\n+\n+/*\n+** foo10:\n+** ...\n+** vmv.v.i\\tv[0-9]+,\\s*-15\n+** ...\n+*/\n+void foo10 (void *base, void *out, size_t vl)\n+{\n+    int64_t scalar = *(int64_t*)(base + 100);\n+    vint64m2_t merge = *(vint64m2_t*) (base + 200);\n+    vint64m2_t v = __riscv_vmv_v_x_i64m2_tu (merge, -15, vl);\n+    *(vint64m2_t*)out = v;\n+}\n+\n+/*\n+** foo11:\n+** ...\n+** vmv.v.i\\tv[0-9]+,\\s*0\n+** ...\n+** ret\n+*/\n+void foo11 (void *base, void *out, size_t vl)\n+{\n+    double scalar = *(double*)(base + 100);\n+    vfloat64m2_t v = __riscv_vfmv_v_f_f64m2 (0, vl);\n+    *(vfloat64m2_t*)out = v;\n+}\n+\n+/*\n+** foo12:\n+** ...\n+** vmv.v.i\\tv[0-9]+,\\s*0\n+** ...\n+** ret\n+*/\n+void foo12 (void *base, void *out, size_t vl)\n+{\n+    vfloat64m2_t merge = *(vfloat64m2_t*) (base + 200);\n+    vfloat64m2_t v = __riscv_vfmv_v_f_f64m2_tu (merge, 0, vl);\n+    *(vfloat64m2_t*)out = v;\n+}\n+\n+/*\n+** foo13:\n+** ...\n+** vmv.v.x\\tv[0-9]+,\\s*[a-x0-9]+\n+** ...\n+** ret\n+*/\n+void foo13 (void *base, void *out, size_t vl)\n+{\n+    int64_t scalar = *(int64_t*)(base + 100);\n+    vint64m2_t v = __riscv_vmv_v_x_i64m2 (0xAAAAA, vl);\n+    *(vint64m2_t*)out = v;\n+}\n+\n+/*\n+** foo14:\n+** ...\n+** vmv.v.x\\tv[0-9]+,\\s*[a-x0-9]+\n+** ...\n+*/\n+void foo14 (void *base, void *out, size_t vl)\n+{\n+    int64_t scalar = *(int64_t*)(base + 100);\n+    vint64m2_t merge = *(vint64m2_t*) (base + 200);\n+    vint64m2_t v = __riscv_vmv_v_x_i64m2_tu (merge, 0xAAAAA, vl);\n+    *(vint64m2_t*)out = v;\n+}"}, {"sha": "d2c5a4b498d43aa5c0763008ca9a2220a8c0ce08", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-100.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2c4c93fda928d9726a96afe0ef912d2aa53599/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-100.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2c4c93fda928d9726a96afe0ef912d2aa53599/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-100.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-100.c?ref=2a2c4c93fda928d9726a96afe0ef912d2aa53599", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2 -fno-tree-vectorize -frename-registers\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int n, int m, unsigned cond, size_t vl, double scalar)\n+{\n+  size_t new_vl = 101;\n+  \n+  vfloat64m4_t v2 = __riscv_vle64_v_f64m4 ((double *)in, new_vl);\n+  double f = __riscv_vfmv_f_s_f64m4_f64 (v2);\n+  \n+  for (size_t i = 0; i < n; i++)\n+    {\n+      vfloat64m4_t v3 = __riscv_vle64_v_f64m4 ((double *)(in + i + 500), new_vl);\n+      vfloat64m4_t v4 = __riscv_vle64_v_f64m4 ((double *)(in + i + 600), new_vl);\n+      v4 = __riscv_vfmacc_vf_f64m4 (v4, f, v3, new_vl);\n+      \n+      __riscv_vse64_v_f64m4 ((double *)(out + i + 200), v4, new_vl);\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-not {vsetivli} { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "4be7d83104c3bbd03f7e74155eaa53eeb69cf990", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-101.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2c4c93fda928d9726a96afe0ef912d2aa53599/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-101.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2c4c93fda928d9726a96afe0ef912d2aa53599/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-101.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-101.c?ref=2a2c4c93fda928d9726a96afe0ef912d2aa53599", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2 -fno-tree-vectorize -frename-registers\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int n, int m, unsigned cond, size_t vl, double scalar)\n+{\n+  size_t new_vl = 101;\n+  \n+  if  (m > n) {\n+  vfloat64m4_t v2 = __riscv_vle64_v_f64m4 ((double *)in, new_vl);\n+  double f = __riscv_vfmv_f_s_f64m4_f64 (v2);\n+  \n+  for (size_t i = 0; i < n; i++)\n+    {\n+      vfloat64m4_t v3 = __riscv_vle64_v_f64m4 ((double *)(in + i + 500), new_vl);\n+      vfloat64m4_t v4 = __riscv_vle64_v_f64m4 ((double *)(in + i + 600), new_vl);\n+      v4 = __riscv_vfmacc_vf_f64m4 (v4, f, v3, new_vl);\n+      \n+      __riscv_vse64_v_f64m4 ((double *)(out + i + 200), v4, new_vl);\n+    }\n+  } else {\n+    ;\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-not {vsetivli} { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "7df8f2461f856e474d8416223a7d4c8db9812b31", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-78.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2c4c93fda928d9726a96afe0ef912d2aa53599/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-78.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2c4c93fda928d9726a96afe0ef912d2aa53599/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-78.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-78.c?ref=2a2c4c93fda928d9726a96afe0ef912d2aa53599", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int n, int m, unsigned cond, size_t vl, float scalar)\n+{\n+  vbool64_t mask = *(vbool64_t*) (in + 1000000);\n+\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      vfloat32mf2_t v = __riscv_vle32_v_f32mf2 ((float *)(in + i + 200), 4);\n+      v = __riscv_vfmv_s_f_f32mf2_tu (v, scalar, __riscv_vsetvlmax_e32m1 ());\n+      __riscv_vse32_v_f32mf2 ((float *)(out + i + 200), v, 4);\n+      \n+      vfloat32mf2_t v2 = __riscv_vle32_v_f32mf2_tumu (mask, v, (float *)(in + i + 300), 4);\n+      __riscv_vse32_v_f32mf2_m (mask, (float *)(out + i + 300), v2, 4);\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*4,\\s*e32,\\s*mf2,\\s*tu,\\s*mu} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "344909ad3223c7f811a649eedc1ad51e2e3f677a", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-79.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2c4c93fda928d9726a96afe0ef912d2aa53599/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-79.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2c4c93fda928d9726a96afe0ef912d2aa53599/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-79.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-79.c?ref=2a2c4c93fda928d9726a96afe0ef912d2aa53599", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int n, int m, unsigned cond, size_t vl, float scalar)\n+{\n+  vbool64_t mask = *(vbool64_t*) (in + 1000000);\n+\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      vfloat32mf2_t v = __riscv_vle32_v_f32mf2 ((float *)(in + i + 200), __riscv_vsetvlmax_e32mf2 ());\n+      v = __riscv_vfmv_s_f_f32mf2_tu (v, scalar, __riscv_vsetvlmax_e32mf2 ());\n+      __riscv_vse32_v_f32mf2 ((float *)(out + i + 200), v, __riscv_vsetvlmax_e32mf2 ());\n+      \n+      vfloat32mf2_t v2 = __riscv_vle32_v_f32mf2_tumu (mask, v, (float *)(in + i + 300), __riscv_vsetvlmax_e32mf2 ());\n+      __riscv_vse32_v_f32mf2_m (mask, (float *)(out + i + 300), v2, __riscv_vsetvlmax_e32mf2 ());\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*tu,\\s*mu} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "0200d72c00aa743a44649df4fafc5da772c2a9a1", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-80.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2c4c93fda928d9726a96afe0ef912d2aa53599/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-80.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2c4c93fda928d9726a96afe0ef912d2aa53599/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-80.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-80.c?ref=2a2c4c93fda928d9726a96afe0ef912d2aa53599", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int n, int m, unsigned cond, size_t vl, float scalar)\n+{\n+  vbool64_t mask = *(vbool64_t*) (in + 1000000);\n+\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      vfloat32mf2_t v = __riscv_vle32_v_f32mf2 ((float *)(in + i + 200), __riscv_vsetvlmax_e32mf2 ());\n+      v = __riscv_vfmv_s_f_f32mf2_tu (v, scalar, 3);\n+      __riscv_vse32_v_f32mf2 ((float *)(out + i + 200), v, __riscv_vsetvlmax_e32mf2 ());\n+      \n+      vfloat32mf2_t v2 = __riscv_vle32_v_f32mf2_tumu (mask, v, (float *)(in + i + 300), __riscv_vsetvlmax_e32mf2 ());\n+      __riscv_vse32_v_f32mf2_m (mask, (float *)(out + i + 300), v2, __riscv_vsetvlmax_e32mf2 ());\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*tu,\\s*mu} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "fe67357740eca0cb2e9556fb139215ef39de6b95", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-81.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2c4c93fda928d9726a96afe0ef912d2aa53599/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-81.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2c4c93fda928d9726a96afe0ef912d2aa53599/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-81.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-81.c?ref=2a2c4c93fda928d9726a96afe0ef912d2aa53599", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int n, int m, unsigned cond, size_t vl, float scalar)\n+{\n+  vbool64_t mask = *(vbool64_t*) (in + 1000000);\n+\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      vfloat32mf2_t v = __riscv_vle32_v_f32mf2 ((float *)(in + i + 200), vl);\n+      v = __riscv_vfmv_s_f_f32mf2_tu (v, scalar, 3);\n+      __riscv_vse32_v_f32mf2 ((float *)(out + i + 200), v, vl);\n+      \n+      vfloat32mf2_t v2 = __riscv_vle32_v_f32mf2_tumu (mask, v, (float *)(in + i + 300), vl);\n+      __riscv_vse32_v_f32mf2_m (mask, (float *)(out + i + 300), v2, vl);\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*3,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "af1f08826cf69446381abf4c790e84de9a420181", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-82.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2c4c93fda928d9726a96afe0ef912d2aa53599/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-82.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2c4c93fda928d9726a96afe0ef912d2aa53599/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-82.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-82.c?ref=2a2c4c93fda928d9726a96afe0ef912d2aa53599", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+float f0 (int8_t * restrict in, int8_t * restrict out, int n, int m, unsigned cond, size_t vl, float scalar)\n+{\n+  vbool64_t mask = *(vbool64_t*) (in + 1000000);\n+\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      vfloat32mf2_t v = __riscv_vle32_v_f32mf2 ((float *)(in + i + 200), 4);\n+      __riscv_vse32_v_f32mf2 ((float *)(out + i + 200), v, 4);\n+      \n+      vfloat32mf2_t v2 = __riscv_vle32_v_f32mf2_tumu (mask, v, (float *)(in + i + 300), 4);\n+      __riscv_vse32_v_f32mf2_m (mask, (float *)(out + i + 300), v2, 4);\n+    }\n+\n+  vfloat32m1_t v = *(vfloat32m1_t*)(in + 300000);\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      v = __riscv_vfmv_s_f_f32m1_tu (v, (scalar + i), 3);\n+    }\n+  return __riscv_vfmv_f_s_f32m1_f32 (v);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*4,\\s*e32,\\s*mf2,\\s*tu,\\s*mu} 2 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "07263712cdbc490bf3f2e7213281cfefa60cd2f2", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-83.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2c4c93fda928d9726a96afe0ef912d2aa53599/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-83.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2c4c93fda928d9726a96afe0ef912d2aa53599/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-83.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-83.c?ref=2a2c4c93fda928d9726a96afe0ef912d2aa53599", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+float f0 (int8_t * restrict in, int8_t * restrict out, int n, int m, unsigned cond, size_t vl, float scalar)\n+{\n+  vbool64_t mask = *(vbool64_t*) (in + 1000000);\n+\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      vfloat32mf2_t v = __riscv_vle32_v_f32mf2 ((float *)(in + i + 200), 4);\n+      __riscv_vse32_v_f32mf2 ((float *)(out + i + 200), v, 4);\n+      \n+      vfloat32mf2_t v2 = __riscv_vle32_v_f32mf2_tumu (mask, v, (float *)(in + i + 300), 4);\n+      v2 = __riscv_vfadd_vv_f32mf2 (v,v2,4);\n+      __riscv_vse32_v_f32mf2_m (mask, (float *)(out + i + 300), v2, 4);\n+    }\n+\n+  vfloat32m1_t v = *(vfloat32m1_t*)(in + 300000);\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      v = __riscv_vfmv_s_f_f32m1_tu (v, (scalar + i), 3);\n+    }\n+  return __riscv_vfmv_f_s_f32m1_f32 (v);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*4,\\s*e32,\\s*mf2,\\s*tu,\\s*mu} 2 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "f772af81ec4fadbb270942aea89aa83b1e82e8f0", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-84.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2c4c93fda928d9726a96afe0ef912d2aa53599/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-84.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2c4c93fda928d9726a96afe0ef912d2aa53599/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-84.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-84.c?ref=2a2c4c93fda928d9726a96afe0ef912d2aa53599", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+double f0 (int8_t * restrict in, int8_t * restrict out, int n, int m, unsigned cond, size_t vl, double scalar)\n+{\n+  vbool4_t mask = *(vbool4_t*) (in + 1000000);\n+  *(vbool4_t*) (out + 1000000) = mask;\n+\n+  vfloat64m1_t v = *(vfloat64m1_t*)(in + 300000);\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      v = __riscv_vfmv_s_f_f64m1_tu (v, (scalar + i), 3);\n+    }\n+  return __riscv_vfmv_f_s_f64m1_f64 (v);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*3,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+"}, {"sha": "f071fa2548aa4edda0b6b38e1bac6029906370e8", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-85.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2c4c93fda928d9726a96afe0ef912d2aa53599/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-85.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2c4c93fda928d9726a96afe0ef912d2aa53599/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-85.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-85.c?ref=2a2c4c93fda928d9726a96afe0ef912d2aa53599", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+\n+double f0 (int8_t * restrict in, int8_t * restrict out, int n, int m, unsigned cond, size_t vl, double scalar)\n+{\n+  vbool32_t mask = *(vbool32_t*) (in + 1000000);\n+  *(vbool32_t*) (out + 1000000) = mask;\n+\n+  vfloat64m1_t v = *(vfloat64m1_t*)(in + 300000);\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      v = __riscv_vfmv_s_f_f64m1_tu (v, (scalar + i), 3);\n+    }\n+  return __riscv_vfmv_f_s_f64m1_f64 (v);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-not {vsetivli} { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "48636f562f90172345978321ff62d3fa109dcb33", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-86.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2c4c93fda928d9726a96afe0ef912d2aa53599/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-86.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2c4c93fda928d9726a96afe0ef912d2aa53599/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-86.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-86.c?ref=2a2c4c93fda928d9726a96afe0ef912d2aa53599", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2 -fno-tree-vectorize\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+float f1 (int8_t * restrict in, int8_t * restrict out, int n, int m, unsigned cond, size_t vl, float scalar)\n+{\n+  vbool64_t mask = *(vbool64_t*) (in + 1000000);\n+\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      vfloat32mf2_t v = __riscv_vle32_v_f32mf2 ((float *)(in + i + 200), __riscv_vsetvlmax_e32mf2 ());\n+      __riscv_vse32_v_f32mf2 ((float *)(out + i + 200), v, __riscv_vsetvlmax_e32mf2 ());\n+      \n+      vfloat32mf2_t v2 = __riscv_vle32_v_f32mf2_tumu (mask, v, (float *)(in + i + 300), __riscv_vsetvlmax_e32mf2 ());\n+      __riscv_vse32_v_f32mf2_m (mask, (float *)(out + i + 300), v2, __riscv_vsetvlmax_e32mf2 ());\n+    }\n+  \n+  vfloat32m1_t v = *(vfloat32m1_t*)(in + 300000);\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      v = __riscv_vfmv_s_f_f32m1_tu (v, (scalar + i), __riscv_vsetvlmax_e32mf2 ());\n+    }\n+  return __riscv_vfmv_f_s_f32m1_f32 (v);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*tu,\\s*mu} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-not {vsetivli} { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "5463cd86a31d2650c0d1b168c13a19a8ce3d2ad4", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-87.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2c4c93fda928d9726a96afe0ef912d2aa53599/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-87.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2c4c93fda928d9726a96afe0ef912d2aa53599/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-87.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-87.c?ref=2a2c4c93fda928d9726a96afe0ef912d2aa53599", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2 -fno-tree-vectorize -frename-registers\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+float f (int8_t * restrict in, int8_t * restrict out, int n, int m, unsigned cond, size_t vl, float scalar)\n+{\n+  vbool64_t mask = *(vbool64_t*) (in + 1000000);\n+\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      vfloat32mf2_t v = __riscv_vle32_v_f32mf2 ((float *)(in + i + 200), __riscv_vsetvlmax_e32mf2 ());\n+      __riscv_vse32_v_f32mf2 ((float *)(out + i + 200), v, __riscv_vsetvlmax_e32mf2 ());\n+      \n+      vfloat32mf2_t v2 = __riscv_vle32_v_f32mf2_tumu (mask, v, (float *)(in + i + 300), __riscv_vsetvlmax_e32mf2 ());\n+      __riscv_vse32_v_f32mf2_m (mask, (float *)(out + i + 300), v2, __riscv_vsetvlmax_e32mf2 ());\n+    }\n+  \n+  vfloat32m1_t v = __riscv_vle32_v_f32m1 ((float*) (in + 300000), 3);\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      v = __riscv_vfmv_s_f_f32m1_tu (v, (scalar + i), 3);\n+    }\n+  return __riscv_vfmv_f_s_f32m1_f32 (v);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*tu,\\s*mu} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*3,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "5b64cfea8d37366aa3d795596fdb1bc0c2fa603a", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-88.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2c4c93fda928d9726a96afe0ef912d2aa53599/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-88.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2c4c93fda928d9726a96afe0ef912d2aa53599/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-88.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-88.c?ref=2a2c4c93fda928d9726a96afe0ef912d2aa53599", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2 -fno-tree-vectorize -frename-registers\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+float f (int8_t * restrict in, int8_t * restrict out, int n, int m, unsigned cond, size_t vl, float scalar)\n+{\n+  vbool64_t mask = *(vbool64_t*) (in + 1000000);\n+\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      vfloat32mf2_t v = __riscv_vle32_v_f32mf2 ((float *)(in + i + 200), __riscv_vsetvlmax_e32mf2 ());\n+      __riscv_vse32_v_f32mf2 ((float *)(out + i + 200), v, __riscv_vsetvlmax_e32mf2 ());\n+      \n+      vfloat32mf2_t v2 = __riscv_vle32_v_f32mf2_tumu (mask, v, (float *)(in + i + 300), __riscv_vsetvlmax_e32mf2 ());\n+      __riscv_vse32_v_f32mf2_m (mask, (float *)(out + i + 300), v2, __riscv_vsetvlmax_e32mf2 ());\n+    }\n+  \n+  vfloat32m1_t v = *(vfloat32m1_t*)(in + 300000);\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      v = __riscv_vfmv_s_f_f32m1_tu (v, (scalar + i), 3);\n+    }\n+  return __riscv_vfmv_f_s_f32m1_f32 (v);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*tu,\\s*mu} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-not {vsetivli} { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "a4ef350afc331a20876e72ac9d36f5bb6f73212f", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-89.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2c4c93fda928d9726a96afe0ef912d2aa53599/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-89.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2c4c93fda928d9726a96afe0ef912d2aa53599/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-89.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-89.c?ref=2a2c4c93fda928d9726a96afe0ef912d2aa53599", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2 -fno-tree-vectorize -frename-registers\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+float f (int8_t * restrict in, int8_t * restrict out, int n, int m, unsigned cond, size_t vl, float scalar)\n+{\n+  vbool64_t mask = *(vbool64_t*) (in + 1000000);\n+\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      vfloat32mf2_t v = __riscv_vle32_v_f32mf2 ((float *)(in + i + 200), __riscv_vsetvlmax_e32mf2 ());\n+      __riscv_vse32_v_f32mf2 ((float *)(out + i + 200), v, __riscv_vsetvlmax_e32mf2 ());\n+      \n+      vfloat32mf2_t v2 = __riscv_vle32_v_f32mf2_tumu (mask, v, (float *)(in + i + 300), __riscv_vsetvlmax_e32mf2 ());\n+      __riscv_vse32_v_f32mf2_m (mask, (float *)(out + i + 300), v2, __riscv_vsetvlmax_e32mf2 ());\n+    }\n+  \n+  vfloat32m1_t v = *(vfloat32m1_t*)(in + 300000);\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      v = __riscv_vfmv_s_f_f32m1_tu (v, (scalar + i), 3);\n+    }\n+  v = __riscv_vfadd_vv_f32m1 (v,v, 3);\n+  return __riscv_vfmv_f_s_f32m1_f32 (v);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*3,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*tu,\\s*mu} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "92fee67c54183a8c80773205b5f1ace723a24d15", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-90.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2c4c93fda928d9726a96afe0ef912d2aa53599/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-90.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2c4c93fda928d9726a96afe0ef912d2aa53599/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-90.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-90.c?ref=2a2c4c93fda928d9726a96afe0ef912d2aa53599", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2 -fno-tree-vectorize -frename-registers\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+float f2 (int8_t * restrict in, int8_t * restrict out, int n, int m, unsigned cond, size_t vl, float scalar)\n+{\n+  vbool64_t mask = *(vbool64_t*) (in + 1000000);\n+\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      vfloat32mf2_t v = __riscv_vle32_v_f32mf2 ((float *)(in + i + 200), __riscv_vsetvlmax_e32mf2 ());\n+      v = __riscv_vfmv_s_f_f32mf2_tu (v, scalar, 3);\n+      __riscv_vse32_v_f32mf2 ((float *)(out + i + 200), v, __riscv_vsetvlmax_e32mf2 ());\n+      \n+      vfloat32mf2_t v2 = __riscv_vle32_v_f32mf2_tumu (mask, v, (float *)(in + i + 300), __riscv_vsetvlmax_e32mf2 ());\n+      __riscv_vse32_v_f32mf2_m (mask, (float *)(out + i + 300), v2, __riscv_vsetvlmax_e32mf2 ());\n+    }\n+  \n+  vfloat32m1_t v = *(vfloat32m1_t*)(in + 300000);\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      v = __riscv_vfmv_s_f_f32m1_tu (v, (scalar + i), 3);\n+    }\n+  return __riscv_vfmv_f_s_f32m1_f32 (v);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*tu,\\s*mu} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-not {vsetivli} { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "3eadab38037e135ec8c5d41aa8db43fdd7e57f6b", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-91.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2c4c93fda928d9726a96afe0ef912d2aa53599/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-91.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2c4c93fda928d9726a96afe0ef912d2aa53599/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-91.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-91.c?ref=2a2c4c93fda928d9726a96afe0ef912d2aa53599", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2 -fno-tree-vectorize -frename-registers\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+float f3 (int8_t * restrict in, int8_t * restrict out, int n, int m, unsigned cond, size_t vl, float scalar)\n+{\n+  vbool64_t mask = *(vbool64_t*) (in + 1000000);\n+\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      vfloat32mf2_t v = __riscv_vle32_v_f32mf2 ((float *)(in + i + 200), vl);\n+      v = __riscv_vfmv_s_f_f32mf2_tu (v, scalar, 3);\n+      __riscv_vse32_v_f32mf2 ((float *)(out + i + 200), v, vl);\n+      \n+      vfloat32mf2_t v2 = __riscv_vle32_v_f32mf2_tumu (mask, v, (float *)(in + i + 300), vl);\n+      __riscv_vse32_v_f32mf2_m (mask, (float *)(out + i + 300), v2, vl);\n+    }\n+  \n+  vfloat32m1_t v = *(vfloat32m1_t*)(in + 300000);\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      v = __riscv_vfmv_s_f_f32m1_tu (v, (scalar + i), 3);\n+    }\n+  return __riscv_vfmv_f_s_f32m1_f32 (v);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*3,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*3,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "ae60519cad59c2f595f57f8649b755f10fc705e8", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-92.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2c4c93fda928d9726a96afe0ef912d2aa53599/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-92.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2c4c93fda928d9726a96afe0ef912d2aa53599/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-92.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-92.c?ref=2a2c4c93fda928d9726a96afe0ef912d2aa53599", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2 -fno-tree-vectorize -frename-registers\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+float f (int8_t * restrict in, int8_t * restrict out, int n, int m, unsigned cond, size_t vl, float scalar)\n+{\n+  vbool64_t mask = *(vbool64_t*) (in + 1000000);\n+\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      vfloat64m1_t v = __riscv_vle64_v_f64m1 ((double *)(in + i + 200), 3);\n+      __riscv_vse64_v_f64m1 ((double *)(out + i + 200), v, 3);\n+      \n+      vfloat64m1_t v2 = __riscv_vle64_v_f64m1_tumu (mask, v, (double *)(in + i + 300), 3);\n+      __riscv_vse64_v_f64m1_m (mask, (double *)(out + i + 300), v2, 3);\n+    }\n+\n+    vfloat32mf2_t v = __riscv_vfmv_s_f_f32mf2 (scalar, 3);\n+    *(vfloat32mf2_t*)(out + 100000) = v;\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*3,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "592e067cfc6eb80ed4e31e3a99970069d7f57449", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-93.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2c4c93fda928d9726a96afe0ef912d2aa53599/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-93.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2c4c93fda928d9726a96afe0ef912d2aa53599/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-93.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-93.c?ref=2a2c4c93fda928d9726a96afe0ef912d2aa53599", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2 -fno-tree-vectorize -frename-registers\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+float f (int8_t * restrict in, int8_t * restrict out, int n, int m, unsigned cond, size_t vl, float scalar)\n+{\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      vfloat64m1_t v = __riscv_vle64_v_f64m1 ((double *)(in + i + 200), 3);\n+      v = __riscv_vfadd_vv_f64m1 (v,v,3);\n+      __riscv_vse64_v_f64m1 ((double *)(out + i + 200), v, 3);\n+    }\n+\n+    vfloat32m1_t v = __riscv_vfmv_s_f_f32m1 (scalar, 3);\n+    *(vfloat32m1_t*)(out + 100000) = v;\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*3,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-not {vsetvli} { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "694d591eeaed3263ce48282683b29fe254575b0f", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-94.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2c4c93fda928d9726a96afe0ef912d2aa53599/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-94.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2c4c93fda928d9726a96afe0ef912d2aa53599/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-94.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-94.c?ref=2a2c4c93fda928d9726a96afe0ef912d2aa53599", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2 -fno-tree-vectorize -frename-registers\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+float f (int8_t * restrict in, int8_t * restrict out, int n, int m, unsigned cond, size_t vl, float scalar)\n+{\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      vfloat64m2_t v = __riscv_vle64_v_f64m2 ((double *)(in + i + 200), 3);\n+      __riscv_vse64_v_f64m2 ((double *)(out + i + 200), v, 3);\n+    }\n+\n+    vfloat32m1_t v = __riscv_vfmv_s_f_f32m1 (scalar, 3);\n+    *(vfloat32m1_t*)(out + 100000) = v;\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*3,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-not {vsetvli} { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "22644e764235ec59bbaa96761b5c10ed63ef3f99", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-95.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2c4c93fda928d9726a96afe0ef912d2aa53599/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-95.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2c4c93fda928d9726a96afe0ef912d2aa53599/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-95.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-95.c?ref=2a2c4c93fda928d9726a96afe0ef912d2aa53599", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2 -fno-tree-vectorize -frename-registers\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+float f (int8_t * restrict in, int8_t * restrict out, int n, int m, unsigned cond, size_t vl, float scalar)\n+{\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      vfloat64m4_t v = __riscv_vle64_v_f64m4 ((double *)(in + i + 200), 3);\n+      __riscv_vse64_v_f64m4 ((double *)(out + i + 200), v, 3);\n+    }\n+\n+    vfloat32m1_t v = __riscv_vfmv_s_f_f32m1 (scalar, 3);\n+    *(vfloat32m1_t*)(out + 100000) = v;\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*3,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-not {vsetvli} { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "0e261d888a478e3c0e69e575caa4e91f9e19aa51", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-96.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2c4c93fda928d9726a96afe0ef912d2aa53599/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-96.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2c4c93fda928d9726a96afe0ef912d2aa53599/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-96.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-96.c?ref=2a2c4c93fda928d9726a96afe0ef912d2aa53599", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2 -fno-tree-vectorize -frename-registers\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+float f (int8_t * restrict in, int8_t * restrict out, int n, int m, unsigned cond, size_t vl, float scalar)\n+{\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      vfloat64m4_t v = __riscv_vle64_v_f64m4 ((double *)(in + i + 200), 3);\n+      __riscv_vse64_v_f64m4 ((double *)(out + i + 200), v, 3);\n+    }\n+\n+    vfloat32m1_t v = __riscv_vfmv_s_f_f32m1 (scalar, 3);\n+    *(vfloat32m1_t*)(out + 100000) = v;\n+    return __riscv_vfmv_f_s_f32m1_f32 (v);\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*3,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-not {vsetvli} { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "46437a1aa1981957340ab3dd35c6ea1f8402dc8c", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-97.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2c4c93fda928d9726a96afe0ef912d2aa53599/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-97.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2c4c93fda928d9726a96afe0ef912d2aa53599/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-97.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-97.c?ref=2a2c4c93fda928d9726a96afe0ef912d2aa53599", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2 -fno-tree-vectorize -frename-registers\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int n, int m, unsigned cond, size_t vl, double scalar)\n+{\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      vfloat64m4_t v2 = __riscv_vle64_v_f64m4 ((double *)(in + i + 200), vl);\n+      double f = __riscv_vfmv_f_s_f64m4_f64 (v2);\n+      vfloat64m4_t v3 = __riscv_vle64_v_f64m4 ((double *)(in + i + 500), vl);\n+      vfloat64m4_t v4 = __riscv_vle64_v_f64m4 ((double *)(in + i + 600), vl);\n+      v4 = __riscv_vfmacc_vf_f64m4 (v4, f, v3, vl);\n+      \n+      __riscv_vse64_v_f64m4 ((double *)(out + i + 200), v4, vl);\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-not {vsetivli} { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "96e337179d57040853e19fd1e5fe428b6805fa95", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-98.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2c4c93fda928d9726a96afe0ef912d2aa53599/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-98.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2c4c93fda928d9726a96afe0ef912d2aa53599/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-98.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-98.c?ref=2a2c4c93fda928d9726a96afe0ef912d2aa53599", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2 -fno-tree-vectorize -frename-registers\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int n, int m, unsigned cond, size_t vl, double scalar)\n+{\n+  vfloat64m4_t v2 = *(vfloat64m4_t*)in;\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      double f = __riscv_vfmv_f_s_f64m4_f64 (v2);\n+      asm volatile (\"\":::\"memory\");\n+      size_t new_vl = 101;\n+      vfloat64m4_t v3 = __riscv_vle64_v_f64m4 ((double *)(in + i + 500), new_vl);\n+      vfloat64m4_t v4 = __riscv_vle64_v_f64m4 ((double *)(in + i + 600), new_vl);\n+      v4 = __riscv_vfmacc_vf_f64m4 (v4, f, v3, new_vl);\n+      \n+      __riscv_vse64_v_f64m4 ((double *)(out + i + 200), v4, new_vl);\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*0,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "423dba78a4d123966537071227fe47a5e031fdca", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-99.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2c4c93fda928d9726a96afe0ef912d2aa53599/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-99.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2c4c93fda928d9726a96afe0ef912d2aa53599/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-99.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-99.c?ref=2a2c4c93fda928d9726a96afe0ef912d2aa53599", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2 -fno-tree-vectorize -frename-registers\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int n, int m, unsigned cond, size_t vl, double scalar)\n+{\n+  vfloat64m4_t v2 = __riscv_vle64_v_f64m4 ((double *)in, vl);\n+  double f = __riscv_vfmv_f_s_f64m4_f64 (v2);\n+  \n+  for (size_t i = 0; i < n; i++)\n+    {\n+      vfloat64m4_t v3 = __riscv_vle64_v_f64m4 ((double *)(in + i + 500), vl);\n+      vfloat64m4_t v4 = __riscv_vle64_v_f64m4 ((double *)(in + i + 600), vl);\n+      v4 = __riscv_vfmacc_vf_f64m4 (v4, f, v3, vl);\n+      \n+      __riscv_vse64_v_f64m4 ((double *)(out + i + 200), v4, vl);\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-not {vsetivli} { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-Oz\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}]}