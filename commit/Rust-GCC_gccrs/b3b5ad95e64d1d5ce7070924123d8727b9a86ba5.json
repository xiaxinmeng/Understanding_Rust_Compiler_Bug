{"sha": "b3b5ad95e64d1d5ce7070924123d8727b9a86ba5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjNiNWFkOTVlNjRkMWQ1Y2U3MDcwOTI0MTIzZDg3MjdiOWE4NmJhNQ==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1999-10-27T06:18:11Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-10-27T06:18:11Z"}, "message": "alias.c: Update comments for ADDRESS.\n\n        * alias.c: Update comments for ADDRESS.\n        (nonlocal_reference_p): Look inside the ADDRESS to determine if\n        it is a local memory reference.\n\nFrom-SVN: r30210", "tree": {"sha": "d4f608001d1f7b6c042ca422febbfb232adb8d6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4f608001d1f7b6c042ca422febbfb232adb8d6b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3b5ad95e64d1d5ce7070924123d8727b9a86ba5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3b5ad95e64d1d5ce7070924123d8727b9a86ba5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3b5ad95e64d1d5ce7070924123d8727b9a86ba5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3b5ad95e64d1d5ce7070924123d8727b9a86ba5/comments", "author": null, "committer": null, "parents": [{"sha": "c831fdea4be7d36270bfd160bd818250e5f4f7d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c831fdea4be7d36270bfd160bd818250e5f4f7d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c831fdea4be7d36270bfd160bd818250e5f4f7d6"}], "stats": {"total": 35, "additions": 27, "deletions": 8}, "files": [{"sha": "fa17678030e573d7a2bea8bf142d3381fcb0f20a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b5ad95e64d1d5ce7070924123d8727b9a86ba5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b5ad95e64d1d5ce7070924123d8727b9a86ba5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b3b5ad95e64d1d5ce7070924123d8727b9a86ba5", "patch": "@@ -4,6 +4,10 @@ Tue Oct 26 23:15:03 1999  Mark Mitchell  <mark@codesourcery.com>\n \n Tue Oct 26 23:29:18 1999  Jeffrey A Law  (law@cygnus.com)\n \n+\t* alias.c: Update comments for ADDRESS.\n+\t(nonlocal_reference_p): Look inside the ADDRESS to determine if\n+\tit is a local memory reference.\n+\n \t* c-typeck.c (build_function_call): Check that the built-in\n \tfunction is of class BUILT_IN_NORMAL before trying to recongize\n \tit as BUILT_IN_ABS."}, {"sha": "59578d7b875ea94491f531e2e42f70edc8335b03", "filename": "gcc/alias.c", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b5ad95e64d1d5ce7070924123d8727b9a86ba5/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b5ad95e64d1d5ce7070924123d8727b9a86ba5/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=b3b5ad95e64d1d5ce7070924123d8727b9a86ba5", "patch": "@@ -121,12 +121,16 @@ static int nonlocal_reference_p         PROTO((rtx));\n \n    A base address can be an ADDRESS, SYMBOL_REF, or LABEL_REF.  ADDRESS\n    expressions represent certain special values: function arguments and\n-   the stack, frame, and argument pointers.  The contents of an address\n-   expression are not used (but they are descriptive for debugging);\n-   only the address and mode matter.  Pointer equality, not rtx_equal_p,\n-   determines whether two ADDRESS expressions refer to the same base\n-   address.  The mode determines whether it is a function argument or\n-   other special value. */\n+   the stack, frame, and argument pointers.  \n+\n+   The contents of an ADDRESS is not normally used, the mode of the\n+   ADDRESS determines whether the ADDRESS is a function argument or some\n+   other special value.  Pointer equality, not rtx_equal_p, determines whether\n+   two ADDRESS expressions refer to the same base address.\n+\n+   The only use of the contents of an ADDRESS is for determining if the\n+   current function performs nonlocal memory memory references for the\n+   purposes of marking the function as a constant function.  */\n \n static rtx *reg_base_value;\n static rtx *new_reg_base_value;\n@@ -1422,8 +1426,19 @@ nonlocal_reference_p (x)\n       base = find_base_term (XEXP (x, 0));\n       if (base)\n \t{\n-\t  /* Stack references are local.  */\n-\t  if (GET_CODE (base) == ADDRESS && GET_MODE (base) == Pmode)\n+\t  /* A Pmode ADDRESS could be a reference via the structure value\n+\t     address or static chain.  Such memory references are nonlocal.\n+\n+\t     Thus, we have to examine the contents of the ADDRESS to find\n+\t     out if this is a local reference or not.  */\n+\t  if (GET_CODE (base) == ADDRESS\n+\t      && GET_MODE (base) == Pmode\n+\t      && (XEXP (base, 0) == stack_pointer_rtx\n+\t\t  || XEXP (base, 0) == arg_pointer_rtx\n+#if HARD_FRAME_POINTER_REGNUM != FRAME_POINTER_REGNUM\n+\t\t  || XEXP (base, 0) == hard_frame_pointer_rtx\n+#endif\n+\t\t  || XEXP (base, 0) == frame_pointer_rtx))\n \t    return 0;\n \t  /* Constants in the function's constant pool are constant.  */\n \t  if (GET_CODE (base) == SYMBOL_REF && CONSTANT_POOL_ADDRESS_P (base))"}]}