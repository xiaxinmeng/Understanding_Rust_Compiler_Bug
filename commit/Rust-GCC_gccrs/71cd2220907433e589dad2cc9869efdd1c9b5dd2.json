{"sha": "71cd2220907433e589dad2cc9869efdd1c9b5dd2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzFjZDIyMjA5MDc0MzNlNTg5ZGFkMmNjOTg2OWVmZGQxYzliNWRkMg==", "commit": {"author": {"name": "Douglas B Rupp", "email": "rupp@gnat.com", "date": "2009-07-30T00:15:35Z"}, "committer": {"name": "Douglas Rupp", "email": "rupp@gcc.gnu.org", "date": "2009-07-30T00:15:35Z"}, "message": "vms-cc.c: Deleted.\n\n\n\t* config/alpha/vms-cc.c: Deleted.\n\t* config/alpha/vms-ld.c: Deleted.\n\t* config/alpha/t-vms64: Moved to config/vms\n\t* config/alpha/vms-crt0-64.c: Moved to config/vms\n\t* config/alpha/vms-crt0.c: Moved to config/vms\n\t* config/alpha/vms-psxcrt0-64.c: Moved to config/vms\n\t* config/alpha/vms-psxcrt0.c: Moved to config/vms\n\t* config/alpha/xm-vms.h: Moved to config/vms\n\t* config/alpha/x-vms: Moved to config/vms\n\t* config/alpha/t-vms (vcrt0.o, pcrt0.o): Move rules to new file\n\tconfig/vms/t-vms.\n\t* config/vms/t-vms: Moved here from config/alpha. Alpha specific\n\tparts removed. (STMP_FIXPROTO, STMP_FIXINC, LIMITS_H_TEST): Set.\n\t(version): Set.\n\t* config/vms/t-vms64: Moved here from config/alpha\n\t* config/vms/vms-crt0-64.c: Moved here from config/alpha.\n\t(argc,argv,envp): Enforce 32bit malloc'ing.\n\t* config/vms/vms-psxcrt0-64.c: Likewise.\n\t* config/vms/vms-crt0.c: Moved here from config/alpha.\n\t* config/vms/vms-psxcrt0.c: Likewise.\n\t* config/vms/vms-crtl-64.h: New file.\n\t* config/vms/vms-crtl.h: New file.\n\t* config/vms/vms.opt: New file.\n\t* config/vms/xm-vms64.h: New file.\n\t* config/vms/xm-vms.h: Moved here from config/alpha.\n\t(STANARD_EXEC_PREFIX, STANDARD_STARTFILE_PREFIX, STANDARD_INCLUDE_DIR):\n\tSet.\n\t* config/vms/x-vms: Moved here from config/alpha.\n\t(version, VMS_EXTRA_PARTS): Moved to t-vms.\n\t(vms-ld.o, vms-cc.o): Removed.\n\t(LN, LN_S, USE_COLLECT2, POD2MAN): Set.\n\nFrom-SVN: r150230", "tree": {"sha": "a6efcbf8d498d4de1827d47e5e05d63da73aa6f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6efcbf8d498d4de1827d47e5e05d63da73aa6f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71cd2220907433e589dad2cc9869efdd1c9b5dd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71cd2220907433e589dad2cc9869efdd1c9b5dd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71cd2220907433e589dad2cc9869efdd1c9b5dd2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71cd2220907433e589dad2cc9869efdd1c9b5dd2/comments", "author": null, "committer": null, "parents": [{"sha": "0699748fe0e1404107faecf86a51fd2339075878", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0699748fe0e1404107faecf86a51fd2339075878", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0699748fe0e1404107faecf86a51fd2339075878"}], "stats": {"total": 1959, "additions": 671, "deletions": 1288}, "files": [{"sha": "43e94c1346120220c5efc6f91ebcd62aece53943", "filename": "gcc/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71cd2220907433e589dad2cc9869efdd1c9b5dd2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71cd2220907433e589dad2cc9869efdd1c9b5dd2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=71cd2220907433e589dad2cc9869efdd1c9b5dd2", "patch": "@@ -1,3 +1,37 @@\n+2009-07-29  Douglas B Rupp  <rupp@gnat.com>\n+\n+\t* config/alpha/vms-cc.c: Deleted.\n+\t* config/alpha/vms-ld.c: Deleted.\n+\t* config/alpha/t-vms64: Moved to config/vms\n+\t* config/alpha/vms-crt0-64.c: Moved to config/vms\n+\t* config/alpha/vms-crt0.c: Moved to config/vms\n+\t* config/alpha/vms-psxcrt0-64.c: Moved to config/vms\n+\t* config/alpha/vms-psxcrt0.c: Moved to config/vms\n+\t* config/alpha/xm-vms.h: Moved to config/vms\n+\t* config/alpha/x-vms: Moved to config/vms\n+\t* config/alpha/t-vms (vcrt0.o, pcrt0.o): Move rules to new file\n+\tconfig/vms/t-vms.\n+\t* config/vms/t-vms: Moved here from config/alpha. Alpha specific\n+\tparts removed. (STMP_FIXPROTO, STMP_FIXINC, LIMITS_H_TEST): Set.\n+\t(version): Set.\n+\t* config/vms/t-vms64: Moved here from config/alpha\n+\t* config/vms/vms-crt0-64.c: Moved here from config/alpha.\n+\t(argc,argv,envp): Enforce 32bit malloc'ing.\n+\t* config/vms/vms-psxcrt0-64.c: Likewise.\n+\t* config/vms/vms-crt0.c: Moved here from config/alpha.\n+\t* config/vms/vms-psxcrt0.c: Likewise.\n+\t* config/vms/vms-crtl-64.h: New file.\n+\t* config/vms/vms-crtl.h: New file.\n+\t* config/vms/vms.opt: New file.\n+\t* config/vms/xm-vms64.h: New file.\n+\t* config/vms/xm-vms.h: Moved here from config/alpha.\n+\t(STANARD_EXEC_PREFIX, STANDARD_STARTFILE_PREFIX, STANDARD_INCLUDE_DIR):\n+\tSet.\n+\t* config/vms/x-vms: Moved here from config/alpha.\n+\t(version, VMS_EXTRA_PARTS): Moved to t-vms.\n+\t(vms-ld.o, vms-cc.o): Removed.\n+\t(LN, LN_S, USE_COLLECT2, POD2MAN): Set.\n+\n 2009-07-29  Douglas B Rupp  <rupp@gnat.com>\n \n \t* dwarf2out.c (add_name_and_src_coords_attributes): Push on the"}, {"sha": "5e86f14e14bf3c8cac4f8e1a68f515e9c25e028b", "filename": "gcc/config/alpha/t-vms", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71cd2220907433e589dad2cc9869efdd1c9b5dd2/gcc%2Fconfig%2Falpha%2Ft-vms", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71cd2220907433e589dad2cc9869efdd1c9b5dd2/gcc%2Fconfig%2Falpha%2Ft-vms", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Ft-vms?ref=71cd2220907433e589dad2cc9869efdd1c9b5dd2", "patch": "@@ -1,5 +1,5 @@\n # Copyright (C) 1996, 1997, 1998, 2001, 2002,\n-# 2007 Free Software Foundation, Inc.\n+# 2007, 2009 Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n #\n@@ -32,13 +32,6 @@ $(T)vms-dwarf2.o : $(srcdir)/config/alpha/vms-dwarf2.asm\n $(T)vms-dwarf2eh.o : $(srcdir)/config/alpha/vms-dwarf2eh.asm\n \tgcc -c -x assembler $< -o $@\n \n-# Assemble startup files.\n-$(T)vcrt0.o: $(CRT0_S) $(GCC_PASSES)\n-\tdecc -c /names=as_is $(srcdir)/config/alpha/vms-crt0.c -o $(T)vcrt0.o\n-\n-$(T)pcrt0.o: $(CRT0_S) $(GCC_PASSES)\n-\tdecc -c /names=as_is $(srcdir)/config/alpha/vms-psxcrt0.c -o $(T)pcrt0.o\n-\n MULTILIB_OPTIONS = mcpu=ev6\n MULTILIB_DIRNAMES = ev6\n LIBGCC = stmp-multilib"}, {"sha": "38503a96429052a13e5a881044d8313a010b55d4", "filename": "gcc/config/alpha/t-vms64", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0699748fe0e1404107faecf86a51fd2339075878/gcc%2Fconfig%2Falpha%2Ft-vms64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0699748fe0e1404107faecf86a51fd2339075878/gcc%2Fconfig%2Falpha%2Ft-vms64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Ft-vms64?ref=0699748fe0e1404107faecf86a51fd2339075878", "patch": "@@ -1,8 +0,0 @@\n-# Assemble startup files.\n-$(T)vcrt0.o: $(CRT0_S) $(GCC_PASSES)\n-\tdecc -c /names=as_is /pointer_size=64  \\\n-\t     $(srcdir)/config/alpha/vms-crt0-64.c -o $(T)vcrt0.o\n-\n-$(T)pcrt0.o: $(CRT0_S) $(GCC_PASSES)\n-\tdecc -c /names=as_is /pointer_size=64 \\\n-\t     $(srcdir)/config/alpha/vms-psxcrt0-64.c -o $(T)pcrt0.o"}, {"sha": "9ba2707240f36b24dad92817798040341529d5e1", "filename": "gcc/config/alpha/vms-cc.c", "status": "removed", "additions": 0, "deletions": 355, "changes": 355, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0699748fe0e1404107faecf86a51fd2339075878/gcc%2Fconfig%2Falpha%2Fvms-cc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0699748fe0e1404107faecf86a51fd2339075878/gcc%2Fconfig%2Falpha%2Fvms-cc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvms-cc.c?ref=0699748fe0e1404107faecf86a51fd2339075878", "patch": "@@ -1,355 +0,0 @@\n-/* VMS DEC C wrapper.\n-   Copyright (C) 2001, 2003, 2007 Free Software Foundation, Inc.\n-   Contributed by Douglas B. Rupp (rupp@gnat.com).\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 3, or (at your option)\n-any later version.\n-\n-GCC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GCC; see the file COPYING3.  If not see\n-<http://www.gnu.org/licenses/>.  */\n-\n-/* This program is a wrapper around the VMS DEC C compiler.\n-   It translates Unix style command line options into corresponding\n-   VMS style qualifiers and then spawns the DEC C compiler.  */\n-\n-#include \"config.h\"\n-#include \"system.h\"\n-#include \"coretypes.h\"\n-#include \"tm.h\"\n-\n-#undef PATH_SEPARATOR\n-#undef PATH_SEPARATOR_STR\n-#define PATH_SEPARATOR ','\n-#define PATH_SEPARATOR_STR \",\"\n-\n-/* These can be set by command line arguments */\n-static int verbose = 0;\n-static int save_temps = 0;\n-\n-static int comp_arg_max = -1;\n-static const char **comp_args = 0;\n-static int comp_arg_index = -1;\n-static char *objfilename = 0;\n-\n-static char *system_search_dirs = (char *) \"\";\n-static char *search_dirs;\n-\n-static char *default_defines = (char *) \"\";\n-static char *defines;\n-\n-/* Translate a Unix syntax directory specification into VMS syntax.\n-   If indicators of VMS syntax found, return input string.  */\n-static char *to_host_dir_spec (char *);\n-\n-/* Translate a Unix syntax file specification into VMS syntax.\n-   If indicators of VMS syntax found, return input string.  */\n-static char *to_host_file_spec (char *);\n-\n-/* Add a translated arg to the list to be passed to DEC CC.  */\n-static void addarg (const char *);\n-\n-/* Preprocess the number of args in P_ARGC and contained in ARGV.\n-   Look for special flags, etc. that must be handled first.  */\n-static void preprocess_args (int *, char **);\n-\n-/* Process the number of args in P_ARGC and contained in ARGV. Look\n-   for special flags, etc. that must be handled for the VMS compiler.  */\n-static void process_args (int *, char **);\n-\n-/* Action routine called by decc$to_vms */\n-static int translate_unix (char *, int);\n-\f\n-/* Add the argument contained in STR to the list of arguments to pass to the\n-   compiler.  */\n-\n-static void\n-addarg (const char *str)\n-{\n-  int i;\n-\n-  if (++comp_arg_index >= comp_arg_max)\n-    {\n-      const char **new_comp_args\n-\t= (const char **) xcalloc (comp_arg_max + 1000, sizeof (char *));\n-\n-      for (i = 0; i <= comp_arg_max; i++)\n-\tnew_comp_args [i] = comp_args [i];\n-\n-      if (comp_args)\n-\tfree (comp_args);\n-\n-      comp_arg_max += 1000;\n-      comp_args = new_comp_args;\n-    }\n-\n-  comp_args [comp_arg_index] = str;\n-}\n-\n-static void\n-preprocess_args (int *p_argc, char *argv[])\n-{\n-  int i;\n-\n-  for (i = 1; i < *p_argc; i++)\n-    {\n-      if (strcmp (argv[i], \"-o\") == 0)\n-\t{\n-\t  char *buff, *ptr;\n-\n-\t  i++;\n-\t  ptr = to_host_file_spec (argv[i]);\n-\t  objfilename = xstrdup (ptr);\n-\t  buff = concat (\"/obj=\", ptr, NULL);\n-\t  addarg (buff);\n-\t}\n-    }\n-}\n-\n-static void\n-process_args (int *p_argc, char *argv[])\n-{\n-  int i;\n-\n-  for (i = 1; i < *p_argc; i++)\n-    {\n-      if (strlen (argv[i]) < 2)\n-\tcontinue;\n-\n-      if (strncmp (argv[i], \"-I\", 2) == 0)\n-\t{\n-\t  char *ptr;\n-\t  int new_len, search_dirs_len;\n-\n-\t  ptr = to_host_dir_spec (&argv[i][2]);\n-\t  new_len = strlen (ptr);\n-\t  search_dirs_len = strlen (search_dirs);\n-\n-\t  search_dirs = xrealloc (search_dirs, search_dirs_len + new_len + 2);\n-\t  if (search_dirs_len > 0)\n-\t    strcat (search_dirs, PATH_SEPARATOR_STR);\n-\t  strcat (search_dirs, ptr);\n-\t}\n-      else if (strncmp (argv[i], \"-D\", 2) == 0)\n-\t{\n-\t  char *ptr;\n-\t  int new_len, defines_len;\n-\n-\t  ptr = &argv[i][2];\n-\t  new_len = strlen (ptr);\n-\t  defines_len = strlen (defines);\n-\n-\t  defines = xrealloc (defines, defines_len + new_len + 4);\n-\t  if (defines_len > 0)\n-\t    strcat (defines, \",\");\n-\n-\t  strcat (defines, \"\\\"\");\n-\t  strcat (defines, ptr);\n-\t  strcat (defines, \"\\\"\");\n-\t}\n-      else if (strcmp (argv[i], \"-v\") == 0)\n-\tverbose = 1;\n-      else if (strcmp (argv[i], \"-g0\") == 0)\n-\taddarg (\"/nodebug\");\n-      else if (strcmp (argv[i], \"-O0\") == 0)\n-\taddarg (\"/noopt\");\n-      else if (strncmp (argv[i], \"-g\", 2) == 0)\n-\taddarg (\"/debug\");\n-      else if (strcmp (argv[i], \"-E\") == 0)\n-\taddarg (\"/preprocess\");\n-      else if (strcmp (argv[i], \"-save-temps\") == 0)\n-\tsave_temps = 1;\n-    }\n-}\n-\n-/* The main program.  Spawn the VMS DEC C compiler after fixing up the\n-   Unix-like flags and args to be what VMS DEC C wants.  */\n-\n-typedef struct dsc {unsigned short len, mbz; char *adr; } Descr;\n-\n-int\n-main (int argc, char **argv)\n-{\n-  int i;\n-  char cwdev [128], *devptr;\n-  int devlen;\n-  char *cwd = getcwd (0, 1024);\n-\n-  devptr = strchr (cwd, ':');\n-  devlen = (devptr - cwd) + 1;\n-  strncpy (cwdev, cwd, devlen);\n-  cwdev [devlen] = '\\0';\n-\n-  search_dirs = xstrdup (system_search_dirs);\n-  defines = xstrdup (default_defines);\n-\n-  addarg (\"cc\");\n-  preprocess_args (&argc , argv);\n-  process_args (&argc , argv);\n-\n-  if (strlen (search_dirs) > 0)\n-    {\n-      addarg (\"/include=(\");\n-      addarg (search_dirs);\n-      addarg (\")\");\n-    }\n-\n-  if (strlen (defines) > 0)\n-    {\n-      addarg (\"/define=(\");\n-      addarg (defines);\n-      addarg (\")\");\n-    }\n-\n-  for (i = 1; i < argc; i++)\n-    {\n-      int arg_len = strlen (argv[i]);\n-\n-      if (strcmp (argv[i], \"-o\") == 0)\n-\ti++;\n-      else if (strcmp (argv[i], \"-v\" ) == 0\n-\t       || strcmp (argv[i], \"-E\") == 0\n-\t       || strcmp (argv[i], \"-c\") == 0\n-\t       || strncmp (argv[i], \"-g\", 2 ) == 0\n-\t       || strncmp (argv[i], \"-O\", 2 ) == 0\n-\t       || strcmp (argv[i], \"-save-temps\") == 0\n-\t       || (arg_len > 2 && strncmp (argv[i], \"-I\", 2) == 0)\n-\t       || (arg_len > 2 && strncmp (argv[i], \"-D\", 2) == 0))\n-\t;\n-\n-      /* Unix style file specs and VMS style switches look alike, so assume\n-\t an arg consisting of one and only one slash, and that being first, is\n-\t really a switch.  */\n-      else if ((argv[i][0] == '/') && (strchr (&argv[i][1], '/') == 0))\n-\taddarg (argv[i]);\n-      else\n-\t{\n-\t  /* Assume filename arg */\n-\t  char buff [256], *ptr;\n-\n-\t  ptr = to_host_file_spec (argv[i]);\n-\t  arg_len = strlen (ptr);\n-\n-\t  if (ptr[0] == '[')\n-\t    sprintf (buff, \"%s%s\", cwdev, ptr);\n-\t  else if (strchr (ptr, ':'))\n-\t    sprintf (buff, \"%s\", ptr);\n-\t  else\n-\t    sprintf (buff, \"%s%s\", cwd, ptr);\n-\n-\t  ptr = xstrdup (buff);\n-\t  addarg (ptr);\n-\t}\n-    }\n-\n-  addarg (NULL);\n-\n-  if (verbose)\n-    {\n-      int i;\n-\n-      for (i = 0; i < comp_arg_index; i++)\n-\tprintf (\"%s \", comp_args [i]);\n-\n-      putchar ('\\n');\n-    }\n-\n-  {\n-    int i;\n-    int len = 0;\n-\n-    for (i = 0; comp_args[i]; i++)\n-      len = len + strlen (comp_args[i]) + 1;\n-\n-    {\n-      char *allargs = (char *) alloca (len + 1);\n-      Descr cmd;\n-      int status;\n-      int status1 = 1;\n-\n-      for (i = 0; i < len + 1; i++)\n-\tallargs [i] = 0;\n-\n-      for (i = 0; comp_args [i]; i++)\n-\t{\n-\t  strcat (allargs, comp_args [i]);\n-\t  strcat (allargs, \" \");\n-\t}\n-\n-      cmd.adr = allargs;\n-      cmd.len = len;\n-      cmd.mbz = 0;\n-\n-      i = LIB$SPAWN (&cmd, 0, 0, 0, 0, 0, &status);\n-\n-      if ((i & 1) != 1)\n-\t{\n-\t  LIB$SIGNAL (i);\n-\t  exit (1);\n-\t}\n-\n-      if ((status & 1) == 1 && (status1 & 1) == 1)\n-\texit (0);\n-\n-      exit (1);\n-    }\n-  }\n-}\n-\n-static char new_host_filespec [255];\n-static char new_host_dirspec [255];\n-static char filename_buff [256];\n-\n-static int\n-translate_unix (char *name, int type ATTRIBUTE_UNUSED)\n-{\n-  strcpy (filename_buff, name);\n-  return 0;\n-}\n-\n-static char *\n-to_host_dir_spec (char *dirspec)\n-{\n-  int len = strlen (dirspec);\n-\n-  strcpy (new_host_dirspec, dirspec);\n-\n-  if (strchr (new_host_dirspec, ']') || strchr (new_host_dirspec, ':'))\n-    return new_host_dirspec;\n-\n-  while (len > 1 && new_host_dirspec [len-1] == '/')\n-    {\n-      new_host_dirspec [len-1] = 0;\n-      len--;\n-    }\n-\n-  decc$to_vms (new_host_dirspec, translate_unix, 1, 2);\n-  strcpy (new_host_dirspec, filename_buff);\n-\n-  return new_host_dirspec;\n-\n-}\n-\n-static char *\n-to_host_file_spec (char *filespec)\n-{\n-  strcpy (new_host_filespec, \"\");\n-  if (strchr (filespec, ']') || strchr (filespec, ':'))\n-    strcpy (new_host_filespec, filespec);\n-  else\n-    {\n-      decc$to_vms (filespec, translate_unix, 1, 1);\n-      strcpy (new_host_filespec, filename_buff);\n-    }\n-\n-  return new_host_filespec;\n-}"}, {"sha": "affe0e8ac3e526d002e6eef6973ce368588fd148", "filename": "gcc/config/alpha/vms-crt0.c", "status": "removed", "additions": 0, "deletions": 66, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0699748fe0e1404107faecf86a51fd2339075878/gcc%2Fconfig%2Falpha%2Fvms-crt0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0699748fe0e1404107faecf86a51fd2339075878/gcc%2Fconfig%2Falpha%2Fvms-crt0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvms-crt0.c?ref=0699748fe0e1404107faecf86a51fd2339075878", "patch": "@@ -1,66 +0,0 @@\n-/* VMS crt0 returning VMS style condition codes .\n-   Copyright (C) 2001, 2009 Free Software Foundation, Inc.\n-   Contributed by Douglas B. Rupp (rupp@gnat.com).\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 3, or (at your option)\n-any later version.\n-\n-GCC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-Under Section 7 of GPL version 3, you are granted additional\n-permissions described in the GCC Runtime Library Exception, version\n-3.1, as published by the Free Software Foundation.\n-\n-You should have received a copy of the GNU General Public License and\n-a copy of the GCC Runtime Library Exception along with this program;\n-see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-<http://www.gnu.org/licenses/>.  */\n-\n-#if !defined(__DECC)\n-You Lose! This file can only be compiled with DEC C.\n-#else\n-\n-/* This file can only be compiled with DEC C, due to the call to\n-   lib$establish.  */\n-\n-#include <stdlib.h>\n-#include <string.h>\n-#include <ssdef.h>\n-\n-extern void decc$main ();\n-\n-extern int main ();\n-\n-static int\n-handler (sigargs, mechargs)\n-     void *sigargs;\n-     void *mechargs;\n-{\n-  return SS$_RESIGNAL;\n-}\n-\n-int\n-__main (arg1, arg2, arg3, image_file_desc, arg5, arg6)\n-     void *arg1, *arg2, *arg3;\n-     void *image_file_desc;\n-     void *arg5, *arg6;\n-{\n-  int argc;\n-  char **argv;\n-  char **envp;\n-\n-  lib$establish (handler);\n-\n-  decc$main(arg1, arg2, arg3, image_file_desc, arg5, arg6,\n-\t    &argc, &argv, &envp);\n-\n-  return main (argc, argv, envp);\n-}\n-#endif"}, {"sha": "d3b4af27385e26d8791ee9ffa0bb3fe28e67b93f", "filename": "gcc/config/alpha/vms-ld.c", "status": "removed", "additions": 0, "deletions": 763, "changes": 763, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0699748fe0e1404107faecf86a51fd2339075878/gcc%2Fconfig%2Falpha%2Fvms-ld.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0699748fe0e1404107faecf86a51fd2339075878/gcc%2Fconfig%2Falpha%2Fvms-ld.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvms-ld.c?ref=0699748fe0e1404107faecf86a51fd2339075878", "patch": "@@ -1,763 +0,0 @@\n-/* VMS linker wrapper.\n-   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2007\n-   Free Software Foundation, Inc.\n-   Contributed by Douglas B. Rupp (rupp@gnat.com).\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 3, or (at your option)\n-any later version.\n-\n-GCC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GCC; see the file COPYING3.  If not see\n-<http://www.gnu.org/licenses/>.  */\n-\n-/* This program is a wrapper around the VMS linker.\n-   It translates Unix style command line options into corresponding\n-   VMS style qualifiers and then spawns the VMS linker.  */\n-\n-#include \"config.h\"\n-#include \"system.h\"\n-#include \"coretypes.h\"\n-#include \"tm.h\"\n-\n-typedef struct dsc {unsigned short len, mbz; char *adr; } Descr;\n-\n-#undef PATH_SEPARATOR\n-#undef PATH_SEPARATOR_STR\n-#define PATH_SEPARATOR ','\n-#define PATH_SEPARATOR_STR \",\"\n-\n-/* Local variable declarations.  */\n-\n-/* File specification for vms-dwarf2.o.  */\n-static char *vmsdwarf2spec = 0;\n-\n-/* File specification for vms-dwarf2eh.o.  */\n-static char *vmsdwarf2ehspec = 0;\n-\n-/* verbose = 1 if -v passed.  */\n-static int verbose = 0;\n-\n-/* save_temps = 1 if -save-temps passed.  */\n-static int save_temps = 0;\n-\n-/* By default don't generate executable file if there are errors\n-   in the link. Override with --noinhibit-exec.  */\n-static int inhibit_exec = 1;\n-\n-/* debug = 1 if -g passed.  */\n-static int debug = 0;\n-\n-/* By default prefer to link with shareable image libraries.\n-   Override with -static.  */\n-static int staticp = 0;\n-\n-/* By default generate an executable, not a shareable image library.\n-   Override with -shared.  */\n-static int share = 0;\n-\n-/* Remember if IDENTIFICATION given on command line.  */\n-static int ident = 0;\n-\n-/* Keep track of arg translations.  */\n-static int link_arg_max = -1;\n-static const char **link_args = 0;\n-static int link_arg_index = -1;\n-\n-/* Keep track of filenames */\n-static char optfilefullname [267];\n-static char *sharefilename = 0;\n-static char *exefilename = 0;\n-\n-/* System search dir list. Leave blank since link handles this\n-   internally.  */\n-static char *system_search_dirs = \"\";\n-\n-/* Search dir list passed on command line (with -L).  */\n-static char *search_dirs;\n-\n-/* Local function declarations.  */\n-\n-/* Add STR to the list of arguments to pass to the linker. Expand the list as\n-   necessary to accommodate.  */\n-static void addarg (const char *);\n-\n-/* Check to see if NAME is a regular file, i.e. not a directory */\n-static int is_regular_file (char *);\n-\n-/* Translate a Unix syntax file specification FILESPEC into VMS syntax.\n-   If indicators of VMS syntax found, return input string.  */\n-static char *to_host_file_spec (char *);\n-\n-/* Locate the library named LIB_NAME in the set of paths PATH_VAL.  */\n-static char *locate_lib (char *, char *);\n-\n-/* Given a library name NAME, i.e. foo,  Look for libfoo.lib and then\n-   libfoo.a in the set of directories we are allowed to search in.  */\n-static const char *expand_lib (char *);\n-\n-/* Preprocess the number of args P_ARGC in ARGV.\n-   Look for special flags, etc. that must be handled first.  */\n-static void preprocess_args (int *, char **);\n-\n-/* Preprocess the number of args P_ARGC in ARGV.  Look for\n-   special flags, etc. that must be handled for the VMS linker.  */\n-static void process_args (int *, char **);\n-\n-/* Action routine called by decc$to_vms. NAME is a file name or\n-   directory name. TYPE is unused.  */\n-static int translate_unix (char *, int);\n-\n-int main (int, char **);\n-\f\n-static void\n-addarg (const char *str)\n-{\n-  int i;\n-\n-  if (++link_arg_index >= link_arg_max)\n-    {\n-      const char **new_link_args\n-\t= (const char **) xcalloc (link_arg_max + 1000, sizeof (char *));\n-\n-      for (i = 0; i <= link_arg_max; i++)\n-\tnew_link_args [i] = link_args [i];\n-\n-      if (link_args)\n-\tfree (link_args);\n-\n-      link_arg_max += 1000;\n-      link_args = new_link_args;\n-    }\n-\n-  link_args [link_arg_index] = str;\n-}\n-\n-static char *\n-locate_lib (char *lib_name, char *path_val)\n-{\n-  int lib_len = strlen (lib_name);\n-  char *eptr, *sptr;\n-\n-  for (sptr = path_val; *sptr; sptr = eptr)\n-    {\n-      char *buf, *ptr;\n-\n-      while (*sptr == PATH_SEPARATOR)\n-\tsptr ++;\n-\n-      eptr = strchr (sptr, PATH_SEPARATOR);\n-      if (eptr == 0)\n-\teptr = strchr (sptr, 0);\n-\n-      buf = alloca ((eptr-sptr) + lib_len + 4 + 2);\n-      strncpy (buf, sptr, eptr-sptr);\n-      buf [eptr-sptr] = 0;\n-      strcat (buf, \"/\");\n-      strcat (buf, lib_name);\n-      ptr = strchr (buf, 0);\n-\n-      if (debug || staticp)\n-\t{\n-\t  /* For debug or static links, look for shareable image libraries\n-\t     last.  */\n-\t  strcpy (ptr, \".a\");\n-\t  if (is_regular_file (buf))\n-\t    return xstrdup (to_host_file_spec (buf));\n-\n-\t  strcpy (ptr, \".olb\");\n-\t  if (is_regular_file (buf))\n-\t    return xstrdup (to_host_file_spec (buf));\n-\n-\t  strcpy (ptr, \".exe\");\n-\t  if (is_regular_file (buf))\n-\t    return xstrdup (to_host_file_spec (buf));\n-\t}\n-      else\n-\t{\n-\t  /* Otherwise look for shareable image libraries first.  */\n-\t  strcpy (ptr, \".exe\");\n-\t  if (is_regular_file (buf))\n-\t    return xstrdup (to_host_file_spec (buf));\n-\n-\t  strcpy (ptr, \".a\");\n-\t  if (is_regular_file (buf))\n-\t    return xstrdup (to_host_file_spec (buf));\n-\n-\t  strcpy (ptr, \".olb\");\n-\t  if (is_regular_file (buf))\n-\t    return xstrdup (to_host_file_spec (buf));\n-\t}\n-    }\n-\n-  return 0;\n-}\n-\n-static const char *\n-expand_lib (char *name)\n-{\n-  char *lib, *lib_path;\n-\n-  if (strcmp (name, \"c\") == 0)\n-    /* IEEE VAX C compatible library for non-prefixed (e.g. no DECC$)\n-       C RTL functions.  */\n-    return \"sys$library:vaxcrtltx.olb\";\n-\n-  else if (strcmp (name, \"m\") == 0)\n-    /* No separate library for math functions */\n-    return \"\";\n-\n-  else\n-    {\n-      lib = xmalloc (strlen (name) + 14);\n-\n-      strcpy (lib, \"lib\");\n-      strcat (lib, name);\n-      lib_path = locate_lib (lib, search_dirs);\n-\n-      if (lib_path)\n-\treturn lib_path;\n-    }\n-\n-  fprintf (stderr,\n-\t   \"Couldn't locate library: lib%s.exe, lib%s.a or lib%s.olb\\n\",\n-\t   name, name, name);\n-\n-  exit (1);\n-}\n-\n-static int\n-is_regular_file (char *name)\n-{\n-  int ret;\n-  struct stat statbuf;\n-\n-  ret = stat (name, &statbuf);\n-  return !ret && S_ISREG (statbuf.st_mode);\n-}\n-\n-static void\n-preprocess_args (int *p_argc, char **argv)\n-{\n-  int i;\n-\n-  for (i = 1; i < *p_argc; i++)\n-    if (strlen (argv[i]) >= 6 && strncmp (argv[i], \"-shared\", 7) == 0)\n-      share = 1;\n-\n-  for (i = 1; i < *p_argc; i++)\n-    if (strcmp (argv[i], \"-o\") == 0)\n-      {\n-\tchar *buff, *ptr;\n-\tint out_len;\n-\tint len;\n-\n-\ti++;\n-\tptr = to_host_file_spec (argv[i]);\n-\texefilename = xstrdup (ptr);\n-\tout_len = strlen (ptr);\n-\tbuff = xmalloc (out_len + 18);\n-\n-\tif (share)\n-\t  strcpy (buff, \"/share=\");\n-\telse\n-\t  strcpy (buff, \"/exe=\");\n-\n-\tstrcat (buff, ptr);\n-\taddarg (buff);\n-\n-\tif (share)\n-\t  {\n-\t    sharefilename = xmalloc (out_len+5);\n-\t    if (ptr == strchr (argv[i], ']'))\n-\t      strcpy (sharefilename, ++ptr);\n-\t    else if (ptr == strchr (argv[i], ':'))\n-\t      strcpy (sharefilename, ++ptr);\n-\t    else if (ptr == strrchr (argv[i], '/'))\n-\t      strcpy (sharefilename, ++ptr);\n-\t    else\n-\t      strcpy (sharefilename, argv[i]);\n-\n-\t    len = strlen (sharefilename);\n-\t    if (strncasecmp (&sharefilename[len-4], \".exe\", 4) == 0)\n-\t      sharefilename[len-4] = 0;\n-\n-\t    for (ptr = sharefilename; *ptr; ptr++)\n-\t      *ptr = TOUPPER (*ptr);\n-\t  }\n-      }\n-}\n-\n-static void\n-process_args (int *p_argc, char **argv)\n-{\n-  int i;\n-\n-  for (i = 1; i < *p_argc; i++)\n-    {\n-      if (strlen (argv[i]) < 2)\n-\tcontinue;\n-\n-      if (strncmp (argv[i], \"-L\", 2) == 0)\n-\t{\n-\t  char *nbuff, *ptr;\n-\t  int new_len, search_dirs_len;\n-\n-\t  ptr = &argv[i][2];\n-\t  new_len = strlen (ptr);\n-\t  search_dirs_len = strlen (search_dirs);\n-\n-\t  nbuff = xmalloc (new_len + 1);\n-\t  strcpy (nbuff, ptr);\n-\n-\t  /* Remove trailing slashes.  */\n-\t  while (new_len > 1 && nbuff [new_len - 1] == '/')\n-\t    {\n-\t      nbuff [new_len - 1] = 0;\n-\t      new_len--;\n-\t    }\n-\n-\t  search_dirs = xrealloc (search_dirs, search_dirs_len + new_len + 2);\n-\t  if (search_dirs_len > 0)\n-\t    strcat (search_dirs, PATH_SEPARATOR_STR);\n-\n-\t  strcat (search_dirs, nbuff);\n-\t  free (nbuff);\n-\t}\n-\n-      /* -v turns on verbose option here and is passed on to gcc.  */\n-      else if (strcmp (argv[i], \"-v\") == 0)\n-\tverbose = 1;\n-      else if (strcmp (argv[i], \"-g0\") == 0)\n-\taddarg (\"/notraceback\");\n-      else if (strncmp (argv[i], \"-g\", 2) == 0)\n-\t{\n-\t  addarg (\"/debug\");\n-\t  debug = 1;\n-\t}\n-      else if (strcmp (argv[i], \"-static\") == 0)\n-\tstaticp = 1;\n-      else if (strcmp (argv[i], \"-map\") == 0)\n-\t{\n-\t  char *buff, *ptr;\n-\n-\t  buff = xmalloc (strlen (exefilename) + 5);\n-\t  strcpy (buff, exefilename);\n-\t  ptr = strchr (buff, '.');\n-\t  if (ptr)\n-\t    *ptr = 0;\n-\n-\t  strcat (buff, \".map\");\n-\t  addarg (\"/map=\");\n-\t  addarg (buff);\n-\t  addarg (\"/full\");\n-\t}\n-      else if (strcmp (argv[i], \"-save-temps\") == 0)\n-\tsave_temps = 1;\n-      else if (strcmp (argv[i], \"--noinhibit-exec\") == 0)\n-\tinhibit_exec = 0;\n-    }\n-}\n-\n-/* The main program.  Spawn the VMS linker after fixing up the Unix-like flags\n-   and args to be what the VMS linker wants.  */\n-\n-int\n-main (int argc, char **argv)\n-{\n-  int i;\n-  char cwdev [128], *devptr;\n-  int devlen;\n-  int optfd;\n-  FILE *optfile;\n-  char *cwd = getcwd (0, 1024);\n-  char *optfilename;\n-\n-  devptr = strchr (cwd, ':');\n-  devlen = (devptr - cwd) + 1;\n-  strncpy (cwdev, cwd, devlen);\n-  cwdev [devlen] = '\\0';\n-\n-  search_dirs = xstrdup (system_search_dirs);\n-\n-  addarg (\"link\");\n-\n-  /* Pass to find args that have to be append first.  */\n-  preprocess_args (&argc , argv);\n-\n-  /* Pass to find the rest of the args.  */\n-  process_args (&argc , argv);\n-\n-  /* Create a temp file to hold args, otherwise we can easily exceed the VMS\n-     command line length limits.  */\n-  optfilename = alloca (strlen (\"LDXXXXXX\") + 1);\n-  strcpy (optfilename, \"LDXXXXXX\");\n-  optfd = mkstemp (optfilename);\n-  getcwd (optfilefullname, 256, 1); /* VMS style cwd.  */\n-  strcat (optfilefullname, optfilename);\n-  strcat (optfilefullname, \".\");\n-  optfile = fdopen (optfd, \"w\");\n-\n-  /* Write out the IDENTIFICATION argument first so that it can be overridden\n-     by an options file.  */\n-  for (i = 1; i < argc; i++)\n-    {\n-      int arg_len = strlen (argv[i]);\n-\n-      if (arg_len > 6 && strncasecmp (argv[i], \"IDENT=\", 6) == 0)\n-\t{\n-\t  /* Comes from command line. If present will always appear before\n-\t     IDENTIFICATION=... and will override.  */\n-\n-\t  if (!ident)\n-\t    ident = 1;\n-\t}\n-      else if (arg_len > 15\n-\t       && strncasecmp (argv[i], \"IDENTIFICATION=\", 15) == 0)\n-\t{\n-\t  /* Comes from pragma Ident ().  */\n-\n-\t  if (!ident)\n-\t    {\n-\t      fprintf (optfile, \"case_sensitive=yes\\n\");\n-\t      fprintf (optfile, \"IDENTIFICATION=\\\"%15.15s\\\"\\n\", &argv[i][15]);\n-\t      fprintf (optfile, \"case_sensitive=NO\\n\");\n-\t      ident = 1;\n-\t    }\n-\t}\n-    }\n-\n-  for (i = 1; i < argc; i++)\n-    {\n-      int arg_len = strlen (argv[i]);\n-\n-      if (strcmp (argv[i], \"-o\") == 0)\n-\ti++;\n-      else if (arg_len > 2 && strncmp (argv[i], \"-l\", 2) == 0)\n-\t{\n-\t  const char *libname = expand_lib (&argv[i][2]);\n-\t  const char *ext;\n-\t  int len;\n-\n-\t  if ((len = strlen (libname)) > 0)\n-\t    {\n-\t      char buff [256];\n-\n-\t      if (len > 4 && strcasecmp (&libname [len-4], \".exe\") == 0)\n-\t\text = \"/shareable\";\n-\t      else\n-\t\text = \"/library\";\n-\n-\t      if (libname[0] == '[')\n-\t\tsprintf (buff, \"%s%s\", cwdev, libname);\n-\t      else\n-\t\tsprintf (buff, \"%s\", libname);\n-\n-\t      fprintf (optfile, \"%s%s\\n\", buff, ext);\n-\t    }\n-\t}\n-\n-      else if (strcmp (argv[i], \"-v\" ) == 0\n-\t       || strncmp (argv[i], \"-g\", 2 ) == 0\n-\t       || strcmp (argv[i], \"-static\" ) == 0\n-\t       || strcmp (argv[i], \"-map\" ) == 0\n-\t       || strcmp (argv[i], \"-save-temps\") == 0\n-\t       || strcmp (argv[i], \"--noinhibit-exec\") == 0\n-\t       || (arg_len > 2 && strncmp (argv[i], \"-L\", 2) == 0)\n-\t       || (arg_len >= 6 && strncmp (argv[i], \"-share\", 6) == 0))\n-\t;\n-      else if (arg_len > 1 && argv[i][0] == '@')\n-\t{\n-\t  FILE *atfile;\n-\t  char *ptr, *ptr1;\n-\t  struct stat statbuf;\n-\t  char *buff;\n-\t  int len;\n-\n-\t  if (stat (&argv[i][1], &statbuf))\n-\t    {\n-\t      fprintf (stderr, \"Couldn't open linker response file: %s\\n\",\n-\t\t       &argv[i][1]);\n-\t      exit (1);\n-\t    }\n-\n-\t  buff = xmalloc (statbuf.st_size + 1);\n-\t  atfile = fopen (&argv[i][1], \"r\");\n-\t  fgets (buff, statbuf.st_size + 1, atfile);\n-\t  fclose (atfile);\n-\n-\t  len = strlen (buff);\n-\t  if (buff [len - 1] == '\\n')\n-\t    {\n-\t      buff [len - 1] = 0;\n-\t      len--;\n-\t    }\n-\n-\t  ptr = buff;\n-\n-\t  do\n-\t  {\n-\t     ptr1 = strchr (ptr, ' ');\n-\t     if (ptr1)\n-\t       *ptr1 = 0;\n-\t     ptr = to_host_file_spec (ptr);\n-\t     if (ptr[0] == '[')\n-\t       fprintf (optfile, \"%s%s\\n\", cwdev, ptr);\n-\t     else\n-\t       fprintf (optfile, \"%s\\n\", ptr);\n-\t     ptr = ptr1 + 1;\n-\t  } while (ptr1);\n-\t}\n-\n-      /* Unix style file specs and VMS style switches look alike, so assume an\n-\t arg consisting of one and only one slash, and that being first, is\n-\t really a switch.  */\n-      else if ((argv[i][0] == '/') && (strchr (&argv[i][1], '/') == 0))\n-\taddarg (argv[i]);\n-      else if (arg_len > 4\n-\t       && strncasecmp (&argv[i][arg_len-4], \".OPT\", 4) == 0)\n-\t{\n-\t  FILE *optfile1;\n-\t  char buff [256];\n-\n-\t  optfile1 = fopen (argv[i], \"r\");\n-\t  while (fgets (buff, 256, optfile1))\n-\t    fputs (buff, optfile);\n-\n-\t  fclose (optfile1);\n-\t}\n-      else if (arg_len > 7 && strncasecmp (argv[i], \"GSMATCH\", 7) == 0)\n-\tfprintf (optfile, \"%s\\n\", argv[i]);\n-      else if (arg_len > 6 && strncasecmp (argv[i], \"IDENT=\", 6) == 0)\n-\t{\n-\t  /* Comes from command line and will override pragma.  */\n-\t  fprintf (optfile, \"case_sensitive=yes\\n\");\n-\t  fprintf (optfile, \"IDENT=\\\"%15.15s\\\"\\n\", &argv[i][6]);\n-\t  fprintf (optfile, \"case_sensitive=NO\\n\");\n-\t  ident = 1;\n-\t}\n-      else if (arg_len > 15\n-\t       && strncasecmp (argv[i], \"IDENTIFICATION=\", 15) == 0)\n-\t;\n-      else\n-\t{\n-\t  /* Assume filename arg.  */\n-\t  const char *addswitch = \"\";\n-\t  char buff [256];\n-\t  int buff_len;\n-\t  int is_cld = 0;\n-\n-\t  argv[i] = to_host_file_spec (argv[i]);\n-\t  arg_len = strlen (argv[i]);\n-\n-\t  if (arg_len > 4 && strcasecmp (&argv[i][arg_len-4], \".exe\") == 0)\n-\t    addswitch = \"/shareable\";\n-\n-\t  if (arg_len > 4 && strcasecmp (&argv[i][arg_len-4], \".cld\") == 0)\n-\t    {\n-\t      addswitch = \"/shareable\";\n-\t      is_cld = 1;\n-\t    }\n-\n-\t  if (arg_len > 2 && strcasecmp (&argv[i][arg_len-2], \".a\") == 0)\n-\t    addswitch = \"/lib\";\n-\n-\t  if (arg_len > 4 && strcasecmp (&argv[i][arg_len-4], \".olb\") == 0)\n-\t    addswitch = \"/lib\";\n-\n-\t  if (argv[i][0] == '[')\n-\t    sprintf (buff, \"%s%s%s\\n\", cwdev, argv[i], addswitch);\n-\t  else if (strchr (argv[i], ':'))\n-\t    sprintf (buff, \"%s%s\\n\", argv[i], addswitch);\n-\t  else\n-\t    sprintf (buff, \"%s%s%s\\n\", cwd, argv[i], addswitch);\n-\n-\t  buff_len = strlen (buff);\n-\n-\t  if (buff_len >= 15\n-\t      && strcasecmp (&buff[buff_len - 15], \"vms-dwarf2eh.o\\n\") == 0)\n-\t    vmsdwarf2ehspec = xstrdup (buff);\n-\t  else if (buff_len >= 13\n-\t      && strcasecmp (&buff[buff_len - 13],\"vms-dwarf2.o\\n\") == 0)\n-\t    vmsdwarf2spec = xstrdup (buff);\n-\t  else if (is_cld)\n-\t    {\n-\t      addarg (buff);\n-\t      addarg (\",\");\n-\t    }\n-\t  else\n-\t    fprintf (optfile, buff);\n-\t}\n-    }\n-\n-#if 0\n-  if (share)\n-    fprintf (optfile, \"symbol_vector=(main=procedure)\\n\");\n-#endif\n-\n-  if (vmsdwarf2ehspec)\n-    {\n-      fprintf (optfile, \"case_sensitive=yes\\n\");\n-      fprintf (optfile, \"cluster=DWARF2eh,,,%s\", vmsdwarf2ehspec);\n-      fprintf (optfile, \"collect=DWARF2eh,eh_frame\\n\");\n-      fprintf (optfile, \"case_sensitive=NO\\n\");\n-    }\n-\n-  if (debug && vmsdwarf2spec)\n-    {\n-      fprintf (optfile, \"case_sensitive=yes\\n\");\n-      fprintf (optfile, \"cluster=DWARF2debug,,,%s\", vmsdwarf2spec);\n-      fprintf (optfile, \"collect=DWARF2debug,debug_abbrev,debug_aranges,-\\n\");\n-      fprintf (optfile, \" debug_frame,debug_info,debug_line,debug_loc,-\\n\");\n-      fprintf (optfile, \" debug_macinfo,debug_pubnames,debug_str,-\\n\");\n-      fprintf (optfile, \" debug_zzzzzz\\n\");\n-      fprintf (optfile, \"case_sensitive=NO\\n\");\n-    }\n-\n-  if (debug && share)\n-    {\n-      fprintf (optfile, \"case_sensitive=yes\\n\");\n-      fprintf (optfile, \"symbol_vector=(-\\n\");\n-      fprintf (optfile,\n-\t       \"%s$DWARF2.DEBUG_ABBREV/$dwarf2.debug_abbrev=DATA,-\\n\",\n-\t       sharefilename);\n-      fprintf (optfile,\n-\t       \"%s$DWARF2.DEBUG_ARANGES/$dwarf2.debug_aranges=DATA,-\\n\",\n-\t       sharefilename);\n-      fprintf (optfile, \"%s$DWARF2.DEBUG_FRAME/$dwarf2.debug_frame=DATA,-\\n\",\n-\t       sharefilename);\n-      fprintf (optfile, \"%s$DWARF2.DEBUG_INFO/$dwarf2.debug_info=DATA,-\\n\",\n-\t       sharefilename);\n-      fprintf (optfile, \"%s$DWARF2.DEBUG_LINE/$dwarf2.debug_line=DATA,-\\n\",\n-\t       sharefilename);\n-      fprintf (optfile, \"%s$DWARF2.DEBUG_LOC/$dwarf2.debug_loc=DATA,-\\n\",\n-\t       sharefilename);\n-      fprintf (optfile,\n-\t       \"%s$DWARF2.DEBUG_MACINFO/$dwarf2.debug_macinfo=DATA,-\\n\",\n-\t       sharefilename);\n-      fprintf (optfile,\n-\t       \"%s$DWARF2.DEBUG_PUBNAMES/$dwarf2.debug_pubnames=DATA,-\\n\",\n-\t       sharefilename);\n-      fprintf (optfile, \"%s$DWARF2.DEBUG_STR/$dwarf2.debug_str=DATA,-\\n\",\n-\t       sharefilename);\n-      fprintf (optfile, \"%s$DWARF2.DEBUG_ZZZZZZ/$dwarf2.debug_zzzzzz=DATA)\\n\",\n-\t       sharefilename);\n-      fprintf (optfile, \"case_sensitive=NO\\n\");\n-    }\n-\n-  fclose (optfile);\n-  addarg (optfilefullname);\n-  addarg (\"/opt\");\n-\n-  addarg (NULL);\n-\n-  if (verbose)\n-    {\n-      int i;\n-\n-      for (i = 0; i < link_arg_index; i++)\n-\tprintf (\"%s \", link_args [i]);\n-      putchar ('\\n');\n-    }\n-\n-  {\n-    int i;\n-    int len = 0;\n-\n-    for (i = 0; link_args[i]; i++)\n-      len = len + strlen (link_args[i]) + 1;\n-\n-    {\n-      char *allargs = (char *) alloca (len + 1);\n-      Descr cmd;\n-      int status;\n-      int status1 = 1;\n-\n-      for (i = 0; i < len + 1; i++)\n-\tallargs [i] = 0;\n-\n-      for (i = 0; link_args [i]; i++)\n-\t{\n-\t  strcat (allargs, link_args [i]);\n-\t  strcat (allargs, \" \");\n-\t}\n-\n-      cmd.adr = allargs;\n-      cmd.len = len;\n-      cmd.mbz = 0;\n-\n-      i = LIB$SPAWN (&cmd, 0, 0, 0, 0, 0, &status);\n-      if ((i & 1) != 1)\n-\t{\n-\t  LIB$SIGNAL (i);\n-\t  exit (1);\n-\t}\n-\n-      if (debug && !share)\n-\t{\n-\t  strcpy (allargs, \"@gnu:[bin]set_exe \");\n-\t  strcat (allargs, exefilename);\n-\t  strcat (allargs, \" /nodebug /silent\");\n-\t  len = strlen (allargs);\n-\t  cmd.adr = allargs;\n-\t  cmd.len = len;\n-\t  cmd.mbz = 0;\n-\n-\t  if (verbose)\n-\t    printf (allargs);\n-\n-\t  i = LIB$SPAWN (&cmd, 0, 0, 0, 0, 0, &status1);\n-\n-\t  if ((i & 1) != 1)\n-\t    {\n-\t      LIB$SIGNAL (i);\n-\t      exit (1);\n-\t    }\n-\t}\n-\n-      if (!save_temps)\n-\tremove (optfilefullname);\n-\n-      if ((status & 1) == 1 && (status1 & 1) == 1)\n-\texit (0);\n-\n-      if (exefilename && inhibit_exec == 1)\n-\tremove (exefilename);\n-\n-      exit (1);\n-    }\n-  }\n-}\n-\n-static char new_host_filespec [255];\n-static char filename_buff [256];\n-\n-static int\n-translate_unix (char *name, int type ATTRIBUTE_UNUSED)\n-{\n-  strcpy (filename_buff, name);\n-  return 0;\n-}\n-\n-static char *\n-to_host_file_spec (char *filespec)\n-{\n-  strcpy (new_host_filespec, \"\");\n-  if (strchr (filespec, ']') || strchr (filespec, ':'))\n-    strcpy (new_host_filespec, filespec);\n-  else\n-    {\n-      decc$to_vms (filespec, translate_unix, 1, 1);\n-      strcpy (new_host_filespec, filename_buff);\n-    }\n-\n-  return new_host_filespec;\n-}"}, {"sha": "132a53b205c3d50c973653750e92caac1294e350", "filename": "gcc/config/vms/t-vms", "status": "renamed", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71cd2220907433e589dad2cc9869efdd1c9b5dd2/gcc%2Fconfig%2Fvms%2Ft-vms", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71cd2220907433e589dad2cc9869efdd1c9b5dd2/gcc%2Fconfig%2Fvms%2Ft-vms", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvms%2Ft-vms?ref=71cd2220907433e589dad2cc9869efdd1c9b5dd2", "patch": "@@ -1,4 +1,5 @@\n-# Copyright (C) 2001, 2002, 2004, 2005, 2008 Free Software Foundation, Inc.\n+# Copyright (C) 2009\n+# Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n #\n@@ -15,24 +16,23 @@\n # You should have received a copy of the GNU General Public License\n # along with GCC; see the file COPYING3.  If not see\n # <http://www.gnu.org/licenses/>.\n-#\n+\n+STMP_FIXPROTO =\n+STMP_FIXINC =\n+LIMITS_H_TEST = false\n+\n # Under VMS, directory names cannot contain dots.\n version:=$(shell echo $(BASEVER_c) | sed -e 's/\\./_/g')\n \n-libsubdir=$(libdir)/gcc-lib\n+# Temporary restriction: VMS_EXTRA_PARTS must be compiled by DEC C.\n+#VMS_EXTRA_PARTS=vcrt0.o pcrt0.o\n+VMS_EXTRA_PARTS=\n \n-# Rules for linker and compiler wrappers.  These are only useful on\n-# a VMS host.\n-vms-ld.o : $(srcdir)/config/alpha/vms-ld.c\n-\t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)\n-ld.exe : vms-ld.o\n-\t$(CC) -o $@ vms-ld.o ../libiberty/libiberty.a\n+DECC=`echo $(CC) | sed -e 's/xgcc -B.*/decc$(exeext)/' -e 's/^gcc/decc/' -e 's/^decc/.\\/decc/' -e 's/\\(.*\\)-gcc/\\1-decc/'`\n \n-vms-cc.o : $(srcdir)/config/alpha/vms-cc.c\n-\t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)\n-decc.exe : vms-cc.o\n-\t$(CC) -o $@ vms-cc.o ../libiberty/libiberty.a\n+# Assemble startup files.\n+$(T)vcrt0.o: $(CRT0_S) $(GCC_PASSES)\n+\t$(DECC) -c /names=as_is $(srcdir)/config/vms/vms-crt0.c -o $(T)vcrt0.o\n \n-# These extra parts can only be compiled on a VMS host and are only needed\n-# on a VMS target.  The rules are in t-vms.\n-VMS_EXTRA_PARTS=vcrt0.o pcrt0.o\n+$(T)pcrt0.o: $(CRT0_S) $(GCC_PASSES)\n+\t$(DECC) -c /names=as_is $(srcdir)/config/vms/vms-psxcrt0.c -o $(T)pcrt0.o", "previous_filename": "gcc/config/alpha/x-vms"}, {"sha": "2fe00692fb59c1f3c1bca31dcf76fc4019962d07", "filename": "gcc/config/vms/t-vms64", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71cd2220907433e589dad2cc9869efdd1c9b5dd2/gcc%2Fconfig%2Fvms%2Ft-vms64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71cd2220907433e589dad2cc9869efdd1c9b5dd2/gcc%2Fconfig%2Fvms%2Ft-vms64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvms%2Ft-vms64?ref=71cd2220907433e589dad2cc9869efdd1c9b5dd2", "patch": "@@ -0,0 +1,27 @@\n+# Copyright (C) 2009\n+# Free Software Foundation, Inc.\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3, or (at your option)\n+# any later version.\n+#\n+# GCC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# Assemble startup files.\n+$(T)vcrt0.o: $(CRT0_S) $(GCC_PASSES)\n+\t$(DECC) -c /names=as_is /pointer_size=64  \\\n+\t     $(srcdir)/config/vms/vms-crt0-64.c -o $(T)vcrt0.o\n+\n+$(T)pcrt0.o: $(CRT0_S) $(GCC_PASSES)\n+\t$(DECC) -c /names=as_is /pointer_size=64 \\\n+\t     $(srcdir)/config/vms/vms-psxcrt0-64.c -o $(T)pcrt0.o"}, {"sha": "ec59d81d6af619392f83aae82717ac9c49945bf2", "filename": "gcc/config/vms/vms-crt0-64.c", "status": "renamed", "additions": 22, "deletions": 21, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71cd2220907433e589dad2cc9869efdd1c9b5dd2/gcc%2Fconfig%2Fvms%2Fvms-crt0-64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71cd2220907433e589dad2cc9869efdd1c9b5dd2/gcc%2Fconfig%2Fvms%2Fvms-crt0-64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvms%2Fvms-crt0-64.c?ref=71cd2220907433e589dad2cc9869efdd1c9b5dd2", "patch": "@@ -2,26 +2,26 @@\n    Copyright (C) 2001, 2009 Free Software Foundation, Inc.\n    Contributed by Douglas B. Rupp (rupp@gnat.com).\n \n-This file is part of GCC.\n+   This file is part of GCC.\n \n-GCC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 3, or (at your option)\n-any later version.\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n \n-GCC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n \n-Under Section 7 of GPL version 3, you are granted additional\n-permissions described in the GCC Runtime Library Exception, version\n-3.1, as published by the Free Software Foundation.\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n \n-You should have received a copy of the GNU General Public License and\n-a copy of the GCC Runtime Library Exception along with this program;\n-see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-<http://www.gnu.org/licenses/>.  */\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n \n #if !defined(__DECC)\n You Lose! This file can only be compiled with DEC C.\n@@ -72,18 +72,19 @@ __main (arg1, arg2, arg3, image_file_desc, arg5, arg6)\n \n #pragma __pointer_size long\n \n-  /* Reallocate argv with 64-bit pointers.  */\n-  long_argv = (char **) malloc (sizeof (char *) * (argc + 1));\n+  /* Reallocate argv with 64 bit pointers.  */\n+  long_argv = (char **) _malloc32 (sizeof (char *) * (argc + 1));\n \n   for (i = 0; i < argc; i++)\n-    long_argv[i] = strdup (argv[i]);\n+    long_argv[i] = (char *) _strdup32 (argv[i]);\n \n   long_argv[argc] = (char *) 0;\n \n-  long_envp = (char **) malloc (sizeof (char *) * 5);\n+  for (i = 0; envp[i]; i++);\n+  long_envp = (char **) _malloc32 (sizeof (char *) * (i + 1));\n \n   for (i = 0; envp[i]; i++)\n-    long_envp[i] = strdup (envp[i]);\n+    long_envp[i] = (char *) _strdup32 (envp[i]);\n \n   long_envp[i] = (char *) 0;\n ", "previous_filename": "gcc/config/alpha/vms-crt0-64.c"}, {"sha": "c0fdaaf16c6bc5c6cda6cd9264c683e8c9fc2bd5", "filename": "gcc/config/vms/vms-crt0.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71cd2220907433e589dad2cc9869efdd1c9b5dd2/gcc%2Fconfig%2Fvms%2Fvms-crt0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71cd2220907433e589dad2cc9869efdd1c9b5dd2/gcc%2Fconfig%2Fvms%2Fvms-crt0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvms%2Fvms-crt0.c?ref=71cd2220907433e589dad2cc9869efdd1c9b5dd2", "patch": "@@ -0,0 +1,66 @@\n+/* VMS crt0 returning VMS style condition codes .\n+   Copyright (C) 2001, 2009 Free Software Foundation, Inc.\n+   Contributed by Douglas B. Rupp (rupp@gnat.com).\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#if !defined(__DECC)\n+You Lose! This file can only be compiled with DEC C.\n+#else\n+\n+/* This file can only be compiled with DEC C, due to the call to\n+   lib$establish.  */\n+\n+#include <stdlib.h>\n+#include <string.h>\n+#include <ssdef.h>\n+\n+extern void decc$main ();\n+\n+extern int main ();\n+\n+static int\n+handler (sigargs, mechargs)\n+     void *sigargs;\n+     void *mechargs;\n+{\n+  return SS$_RESIGNAL;\n+}\n+\n+int\n+__main (arg1, arg2, arg3, image_file_desc, arg5, arg6)\n+     void *arg1, *arg2, *arg3;\n+     void *image_file_desc;\n+     void *arg5, *arg6;\n+{\n+  int argc;\n+  char **argv;\n+  char **envp;\n+\n+  lib$establish (handler);\n+\n+  decc$main(arg1, arg2, arg3, image_file_desc, arg5, arg6,\n+\t    &argc, &argv, &envp);\n+\n+  return main (argc, argv, envp);\n+}\n+#endif"}, {"sha": "6b91f31558ab89645c4d940f96dd78fb0c2c38cd", "filename": "gcc/config/vms/vms-crtl-64.h", "status": "added", "additions": 190, "deletions": 0, "changes": 190, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71cd2220907433e589dad2cc9869efdd1c9b5dd2/gcc%2Fconfig%2Fvms%2Fvms-crtl-64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71cd2220907433e589dad2cc9869efdd1c9b5dd2/gcc%2Fconfig%2Fvms%2Fvms-crtl-64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvms%2Fvms-crtl-64.h?ref=71cd2220907433e589dad2cc9869efdd1c9b5dd2", "patch": "@@ -0,0 +1,190 @@\n+/* Definitions of target machine GNU compiler. 64bit VMS version.\n+   Copyright (C) 2009 Free Software Foundation, Inc.\n+   Contributed by Douglas B Rupp (rupp@gnat.com).\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* \n+   Correlation array of 64bit standard CRTL names with DECCRTL\n+   function names. Currently contains only a partial list,\n+   e.g. those functions use in GNAT and GCC. Memory allocation\n+   routines are 32bit but this can be overridden by -mmalloc\n+   subtarget switch.\n+\n+   Note: Please keep in alphabetical order.\n+*/\n+\n+#undef CRTL_NAMES\n+#define CRTL_NAMES                          \\\n+{                                           \\\n+{\"_calloc32\",    \"decc$calloc\",       0},   \\\n+{\"_malloc32\",    \"decc$malloc\",       0},   \\\n+{\"_realloc32\",   \"decc$realloc\",      0},   \\\n+{\"_strdup32\",    \"decc$strdup\",       0},   \\\n+{\"abs\",          \"decc$abs\",          0},   \\\n+{\"abort\",        \"decc$abort\",        0},   \\\n+{\"access\",       \"decc$access\",       0},   \\\n+{\"accept\",       \"decc$accept\",       0},   \\\n+{\"acos\",         \"decc$tacos\",        0},   \\\n+{\"alarm\",        \"decc$alarm\",        0},   \\\n+{\"asin\",         \"decc$tasin\",        0},   \\\n+{\"atan\",         \"decc$tatan\",        0},   \\\n+{\"atan2\",        \"decc$tatan2\",       0},   \\\n+{\"atexit\",       \"decc$atexit\",       0},   \\\n+{\"atoi\",         \"decc$atoi\",         0},   \\\n+{\"atoll\",        \"decc$atoll\",        0},   \\\n+{\"atoq\",         \"decc$atoq\",         0},   \\\n+{\"basename\",     \"decc$_basename64\",  0},   \\\n+{\"bcmp\",         \"decc$bcmp\",         0},   \\\n+{\"bcopy\",        \"decc$bcopy\",        0},   \\\n+{\"bsearch\",      \"decc$_bsearch64\",   0},   \\\n+{\"bzero\",        \"decc$bzero\",        0},   \\\n+{\"calloc\",       \"decc$calloc\",       0},   \\\n+{\"ceil\",         \"decc$tceil\",        0},   \\\n+{\"chdir\",        \"decc$chdir\",        0},   \\\n+{\"chown\",        \"decc$chown\",        0},   \\\n+{\"clearerr\",     \"decc$clearerr\",     0},   \\\n+{\"clock\",        \"decc$clock\",        0},   \\\n+{\"close\",        \"decc$close\",        0},   \\\n+{\"cos\",          \"decc$tcos\",         0},   \\\n+{\"connect\",      \"decc$connect\",      0},   \\\n+{\"ctime\",        \"decc$ctime\",        0},   \\\n+{\"dup\",          \"decc$dup\",          0},   \\\n+{\"dup2\",         \"decc$dup2\",         0},   \\\n+{\"exit\",         \"decc$exit\",         0},   \\\n+{\"exp\",          \"decc$texp\",         0},   \\\n+{\"fabs\",         \"decc$tfabs\",        0},   \\\n+{\"fclose\",       \"decc$fclose\",       0},   \\\n+{\"fdopen\",       \"decc$fdopen\",       0},   \\\n+{\"fgetc\",        \"decc$fgetc\",        0},   \\\n+{\"fgets\",        \"decc$_fgets64\",     0},   \\\n+{\"fflush\",       \"decc$fflush\",       0},   \\\n+{\"ffs\",          \"decc$ffs\",          0},   \\\n+{\"floor\",        \"decc$tfloor\",       0},   \\\n+{\"fopen\",        \"decc$fopen\",        0},   \\\n+{\"fputc\",        \"decc$fputc\",        0},   \\\n+{\"fputs\",        \"decc$fputs\",        0},   \\\n+{\"free\",         \"decc$free\",         0},   \\\n+{\"fread\",        \"decc$fread\",        0},   \\\n+{\"freopen\",      \"decc$freopen\",      0},   \\\n+{\"fseek\",        \"decc$fseek\",        0},   \\\n+{\"ftell\",        \"decc$ftell\",        0},   \\\n+{\"fwrite\",       \"decc$fwrite\",       0},   \\\n+{\"getcwd\",       \"decc$_getcwd64\",    0},   \\\n+{\"getegid\",      \"decc$getegid\",      0},   \\\n+{\"getenv\",       \"decc$getenv\",       0},   \\\n+{\"geteuid\",      \"decc$geteuid\",      0},   \\\n+{\"getgid\",       \"decc$getgid\",       0},   \\\n+{\"gethostbyname\",\"decc$gethostbyname\",0},   \\\n+{\"getpagesize\",  \"decc$getpagesize\",  0},   \\\n+{\"getpid\",       \"decc$getpid\",       0},   \\\n+{\"getservbyname\",\"decc$getservbyname\",0},   \\\n+{\"gettimeofday\", \"decc$gettimeofday\", 0},   \\\n+{\"getuid\",       \"decc$getuid\",       0},   \\\n+{\"htons\",        \"decc$htons\",        0},   \\\n+{\"iconv\",        \"decc$iconv\",        0},   \\\n+{\"index\",        \"decc$_index64\",     0},   \\\n+{\"isatty\",       \"decc$isatty\",       0},   \\\n+{\"isdigit\",      \"decc$isdigit\",      0},   \\\n+{\"kill\",         \"decc$kill\",         0},   \\\n+{\"log\",          \"decc$tlog\",         0},   \\\n+{\"log10\",        \"decc$tlog10\",       0},   \\\n+{\"lseek\",        \"decc$lseek\",        0},   \\\n+{\"ioctl\",        \"decc$ioctl\",        0},   \\\n+{\"malloc\",       \"decc$malloc\",       0},   \\\n+{\"mbstowcs\",     \"decc$_mbstowcs64\",  0},   \\\n+{\"memchr\",       \"decc$_memchr64\",    0},   \\\n+{\"memcmp\",       \"decc$memcmp\",       0},   \\\n+{\"memcpy\",       \"decc$_memcpy64\",    0},   \\\n+{\"memmove\",      \"decc$_memmove64\",   0},   \\\n+{\"memset\",       \"decc$_memset64\",    0},   \\\n+{\"mkstemp\",      \"decc$mkstemp\",      0},   \\\n+{\"mktemp\",       \"decc$_mktemp64\",    0},   \\\n+{\"mmap\",         \"decc$_mmap64\",      0},   \\\n+{\"munmap\",       \"decc$munmap\",       0},   \\\n+{\"nl_langinfo\",  \"decc$nl_langinfo\",  0},   \\\n+{\"pclose\",       \"decc$pclose\",       0},   \\\n+{\"popen\",        \"decc$popen\",        0},   \\\n+{\"pow\",          \"decc$tpow\",         0},   \\\n+{\"printf\",       \"decc$txprintf\",     0},   \\\n+{\"putenv\",       \"decc$putenv\",       0},   \\\n+{\"puts\",         \"decc$puts\",         0},   \\\n+{\"random\",       \"decc$random\",       0},   \\\n+{\"read\",         \"decc$read\",         0},   \\\n+{\"realloc\",      \"decc$realloc\",      0},   \\\n+{\"recv\",         \"decc$recv\",         0},   \\\n+{\"recvfrom\",     \"decc$recvfrom\",     0},   \\\n+{\"rename\",       \"decc$rename\",       0},   \\\n+{\"rewind\",       \"decc$rewind\",       0},   \\\n+{\"rindex\",       \"decc$_rindex64\",    0},   \\\n+{\"rmdir\",        \"decc$rmdir\",        0},   \\\n+{\"send\",         \"decc$send\",         0},   \\\n+{\"sendto\",       \"decc$sendto\",       0},   \\\n+{\"setenv\",       \"decc$setenv\",       0},   \\\n+{\"setlocale\",    \"decc$setlocale\",    0},   \\\n+{\"setvbuf\",      \"decc$setvbuf\",      0},   \\\n+{\"signal\",       \"decc$signal\",       0},   \\\n+{\"sigsetmask\",   \"decc$sigsetmask\",   0},   \\\n+{\"sin\",          \"decc$tsin\",         0},   \\\n+{\"snprintf\",     \"decc$txsnprintf\",   0},   \\\n+{\"socket\",       \"decc$socket\",       0},   \\\n+{\"sqrt\",         \"decc$tsqrt\",        0},   \\\n+{\"strcasecmp\",   \"decc$strcasecmp\",   0},   \\\n+{\"strchr\",       \"decc$_strchr64\",    0},   \\\n+{\"strcpy\",       \"decc$_strcpy64\",    0},   \\\n+{\"strdup\",       \"decc$strdup\",       0},   \\\n+{\"strerror\",     \"decc$strerror\",     0},   \\\n+{\"strlen\",       \"decc$strlen\",       0},   \\\n+{\"strncasecmp\",  \"decc$strncasecmp\",  0},   \\\n+{\"strncmp\",      \"decc$strncmp\",      0},   \\\n+{\"strncpy\",      \"decc$_strncpy64\",   0},   \\\n+{\"strrchr\",      \"decc$_strrchr64\",   0},   \\\n+{\"strstr\",       \"decc$_strstr64\",    0},   \\\n+{\"strtod\",       \"decc$t_strtod64\",   0},   \\\n+{\"strtol\",       \"decc$_strtoll64\",   0},   \\\n+{\"strtoul\",      \"decc$_strtoull64\",  0},   \\\n+{\"sysconf\",      \"decc$sysconf\",      0},   \\\n+{\"system\",       \"decc$system\",       0},   \\\n+{\"tan\",          \"decc$ttan\",         0},   \\\n+{\"time\",         \"decc$time\",         0},   \\\n+{\"times\",        \"decc$times\",        0},   \\\n+{\"tmpfile\",      \"decc$tmpfile\",      0},   \\\n+{\"tmpnam\",       \"decc$_tmpnam64\",    0},   \\\n+{\"ungetc\",       \"decc$ungetc\",       0},   \\\n+{\"unlink\",       \"decc$unlink\",       0},   \\\n+{\"umask\",        \"decc$umask\",        0},   \\\n+{\"utime\",        \"decc$utime\",        0},   \\\n+{\"wait\",         \"decc$wait\",         0},   \\\n+{\"waitpid\",      \"decc$waitpid\",      0},   \\\n+{\"wcswidth\",     \"decc$wcswidth\",     0},   \\\n+{\"write\",        \"decc$write\",        0},   \\\n+{\"vfprintf\",     \"decc$txvfprintf\",   0},   \\\n+{\"vprintf\",      \"decc$txvprintf\",    0},   \\\n+{\"vsprintf\",     \"decc$txvsprintf\",   0},   \\\n+{\"vsnprintf\",    \"decc$txvsnprintf\",  0},   \\\n+{NULL, NULL, 0}                             \\\n+}\n+\n+/* Initialize of libfuncs that are 32/64 bit memory specific.  */\n+\n+#undef MEM_LIBFUNCS_INIT\n+#define MEM_LIBFUNCS_INIT                                 \\\n+do {                                                      \\\n+  memcpy_libfunc = init_one_libfunc (\"decc$_memcpy64\");   \\\n+  memmove_libfunc = init_one_libfunc (\"decc$_memmove64\"); \\\n+  memset_libfunc = init_one_libfunc (\"decc$_memset64\");   \\\n+} while (0)"}, {"sha": "39e647ac4368f48dcdeaa34597619b0d31753ef6", "filename": "gcc/config/vms/vms-crtl.h", "status": "added", "additions": 186, "deletions": 0, "changes": 186, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71cd2220907433e589dad2cc9869efdd1c9b5dd2/gcc%2Fconfig%2Fvms%2Fvms-crtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71cd2220907433e589dad2cc9869efdd1c9b5dd2/gcc%2Fconfig%2Fvms%2Fvms-crtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvms%2Fvms-crtl.h?ref=71cd2220907433e589dad2cc9869efdd1c9b5dd2", "patch": "@@ -0,0 +1,186 @@\n+/* Definitions of target machine GNU compiler. 32bit VMS version.\n+   Copyright (C) 2009 Free Software Foundation, Inc.\n+   Contributed by Douglas B Rupp (rupp@gnat.com).\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* \n+   Correlation array of standard CRTL names with DECCRTL\n+   function names. Currently contains only a partial list,\n+   e.g. those functions use in GNAT and GCC\n+\n+   Note: Please keep in alphabetical order.\n+*/\n+\n+#define CRTL_NAMES                          \\\n+{                                           \\\n+{\"_calloc32\",    \"decc$calloc\",       0},   \\\n+{\"_malloc32\",    \"decc$malloc\",       0},   \\\n+{\"_realloc32\",   \"decc$realloc\",      0},   \\\n+{\"_strdup32\",    \"decc$strdup\",       0},   \\\n+{\"abs\",          \"decc$abs\",          0},   \\\n+{\"abort\",        \"decc$abort\",        0},   \\\n+{\"access\",       \"decc$access\",       0},   \\\n+{\"accept\",       \"decc$accept\",       0},   \\\n+{\"acos\",         \"decc$tacos\",        0},   \\\n+{\"alarm\",        \"decc$alarm\",        0},   \\\n+{\"asin\",         \"decc$tasin\",        0},   \\\n+{\"atan\",         \"decc$tatan\",        0},   \\\n+{\"atan2\",        \"decc$tatan2\",       0},   \\\n+{\"atexit\",       \"decc$atexit\",       0},   \\\n+{\"atoi\",         \"decc$atoi\",         0},   \\\n+{\"atoll\",        \"decc$atoll\",        0},   \\\n+{\"atoq\",         \"decc$atoq\",         0},   \\\n+{\"basename\",     \"decc$basename\",     0},   \\\n+{\"bcmp\",         \"decc$bcmp\",         0},   \\\n+{\"bcopy\",        \"decc$bcopy\",        0},   \\\n+{\"bsearch\",      \"decc$bsearch\",      0},   \\\n+{\"bzero\",        \"decc$bzero\",        0},   \\\n+{\"calloc\",       \"decc$calloc\",       0},   \\\n+{\"ceil\",         \"decc$tceil\",        0},   \\\n+{\"chdir\",        \"decc$chdir\",        0},   \\\n+{\"chown\",        \"decc$chown\",        0},   \\\n+{\"clearerr\",     \"decc$clearerr\",     0},   \\\n+{\"clock\",        \"decc$clock\",        0},   \\\n+{\"close\",        \"decc$close\",        0},   \\\n+{\"cos\",          \"decc$tcos\",         0},   \\\n+{\"connect\",      \"decc$connect\",      0},   \\\n+{\"ctime\",        \"decc$ctime\",        0},   \\\n+{\"dup\",          \"decc$dup\",          0},   \\\n+{\"dup2\",         \"decc$dup2\",         0},   \\\n+{\"exit\",         \"decc$exit\",         0},   \\\n+{\"exp\",          \"decc$texp\",         0},   \\\n+{\"fabs\",         \"decc$tfabs\",        0},   \\\n+{\"fclose\",       \"decc$fclose\",       0},   \\\n+{\"fdopen\",       \"decc$fdopen\",       0},   \\\n+{\"fgetc\",        \"decc$fgetc\",        0},   \\\n+{\"fgets\",        \"decc$fgets\",        0},   \\\n+{\"fflush\",       \"decc$fflush\",       0},   \\\n+{\"ffs\",          \"decc$ffs\",          0},   \\\n+{\"floor\",        \"decc$tfloor\",       0},   \\\n+{\"fopen\",        \"decc$fopen\",        0},   \\\n+{\"fputc\",        \"decc$fputc\",        0},   \\\n+{\"fputs\",        \"decc$fputs\",        0},   \\\n+{\"free\",         \"decc$free\",         0},   \\\n+{\"fread\",        \"decc$fread\",        0},   \\\n+{\"freopen\",      \"decc$freopen\",      0},   \\\n+{\"fseek\",        \"decc$fseek\",        0},   \\\n+{\"ftell\",        \"decc$ftell\",        0},   \\\n+{\"fwrite\",       \"decc$fwrite\",       0},   \\\n+{\"getcwd\",       \"decc$getcwd\",       0},   \\\n+{\"getegid\",      \"decc$getegid\",      0},   \\\n+{\"getenv\",       \"decc$getenv\",       0},   \\\n+{\"geteuid\",      \"decc$geteuid\",      0},   \\\n+{\"getgid\",       \"decc$getgid\",       0},   \\\n+{\"gethostbyname\",\"decc$gethostbyname\",0},   \\\n+{\"getpagesize\",  \"decc$getpagesize\",  0},   \\\n+{\"getpid\",       \"decc$getpid\",       0},   \\\n+{\"getservbyname\",\"decc$getservbyname\",0},   \\\n+{\"gettimeofday\", \"decc$gettimeofday\", 0},   \\\n+{\"getuid\",       \"decc$getuid\",       0},   \\\n+{\"htons\",        \"decc$htons\",        0},   \\\n+{\"iconv\",        \"decc$iconv\",        0},   \\\n+{\"index\",        \"decc$index\",        0},   \\\n+{\"isatty\",       \"decc$isatty\",       0},   \\\n+{\"isdigit\",      \"decc$isdigit\",      0},   \\\n+{\"kill\",         \"decc$kill\",         0},   \\\n+{\"log\",          \"decc$tlog\",         0},   \\\n+{\"log10\",        \"decc$tlog10\",       0},   \\\n+{\"lseek\",        \"decc$lseek\",        0},   \\\n+{\"ioctl\",        \"decc$ioctl\",        0},   \\\n+{\"malloc\",       \"decc$malloc\",       0},   \\\n+{\"mbstowcs\",     \"decc$mbstowcs\",     0},   \\\n+{\"memchr\",       \"decc$memchr\",       0},   \\\n+{\"memcmp\",       \"decc$memcmp\",       0},   \\\n+{\"memcpy\",       \"decc$memcpy\",       0},   \\\n+{\"memmove\",      \"decc$memmove\",      0},   \\\n+{\"memset\",       \"decc$memset\",       0},   \\\n+{\"mkstemp\",      \"decc$mkstemp\",      0},   \\\n+{\"mktemp\",       \"decc$mktemp\",       0},   \\\n+{\"mmap\",         \"decc$mmap\",         0},   \\\n+{\"munmap\",       \"decc$munmap\",       0},   \\\n+{\"nl_langinfo\",  \"decc$nl_langinfo\",  0},   \\\n+{\"pclose\",       \"decc$pclose\",       0},   \\\n+{\"popen\",        \"decc$popen\",        0},   \\\n+{\"pow\",          \"decc$tpow\",         0},   \\\n+{\"printf\",       \"decc$txprintf\",     0},   \\\n+{\"putenv\",       \"decc$putenv\",       0},   \\\n+{\"puts\",         \"decc$puts\",         0},   \\\n+{\"random\",       \"decc$random\",       0},   \\\n+{\"read\",         \"decc$read\",         0},   \\\n+{\"realloc\",      \"decc$realloc\",      0},   \\\n+{\"recv\",         \"decc$recv\",         0},   \\\n+{\"recvfrom\",     \"decc$recvfrom\",     0},   \\\n+{\"rename\",       \"decc$rename\",       0},   \\\n+{\"rewind\",       \"decc$rewind\",       0},   \\\n+{\"rindex\",       \"decc$rindex\",       0},   \\\n+{\"rmdir\",        \"decc$rmdir\",        0},   \\\n+{\"send\",         \"decc$send\",         0},   \\\n+{\"sendto\",       \"decc$sendto\",       0},   \\\n+{\"setenv\",       \"decc$setenv\",       0},   \\\n+{\"setlocale\",    \"decc$setlocale\",    0},   \\\n+{\"setvbuf\",      \"decc$setvbuf\",      0},   \\\n+{\"signal\",       \"decc$signal\",       0},   \\\n+{\"sigsetmask\",   \"decc$sigsetmask\",   0},   \\\n+{\"sin\",          \"decc$tsin\",         0},   \\\n+{\"snprintf\",     \"decc$txsnprintf\",   0},   \\\n+{\"socket\",       \"decc$socket\",       0},   \\\n+{\"sqrt\",         \"decc$tsqrt\",        0},   \\\n+{\"strcasecmp\",   \"decc$strcasecmp\",   0},   \\\n+{\"strchr\",       \"decc$strchr\",       0},   \\\n+{\"strcpy\",       \"decc$strcpy\",       0},   \\\n+{\"strdup\",       \"decc$strdup\",       0},   \\\n+{\"strerror\",     \"decc$strerror\",     0},   \\\n+{\"strlen\",       \"decc$strlen\",       0},   \\\n+{\"strncasecmp\",  \"decc$strncasecmp\",  0},   \\\n+{\"strncmp\",      \"decc$strncmp\",      0},   \\\n+{\"strncpy\",      \"decc$strncpy\",      0},   \\\n+{\"strrchr\",      \"decc$strrchr\",      0},   \\\n+{\"strstr\",       \"decc$strstr\",       0},   \\\n+{\"strtod\",       \"decc$tstrtod\",      0},   \\\n+{\"strtol\",       \"decc$strtoll\",      0},   \\\n+{\"strtoul\",      \"decc$strtoull\",     0},   \\\n+{\"sysconf\",      \"decc$sysconf\",      0},   \\\n+{\"system\",       \"decc$system\",       0},   \\\n+{\"tan\",          \"decc$ttan\",         0},   \\\n+{\"time\",         \"decc$time\",         0},   \\\n+{\"times\",        \"decc$times\",        0},   \\\n+{\"tmpfile\",      \"decc$tmpfile\",      0},   \\\n+{\"tmpnam\",       \"decc$tmpnam\",       0},   \\\n+{\"ungetc\",       \"decc$ungetc\",       0},   \\\n+{\"unlink\",       \"decc$unlink\",       0},   \\\n+{\"umask\",        \"decc$umask\",        0},   \\\n+{\"utime\",        \"decc$utime\",        0},   \\\n+{\"wait\",         \"decc$wait\",         0},   \\\n+{\"waitpid\",      \"decc$waitpid\",      0},   \\\n+{\"wcswidth\",     \"decc$wcswidth\",     0},   \\\n+{\"write\",        \"decc$write\",        0},   \\\n+{\"vfprintf\",     \"decc$txvfprintf\",   0},   \\\n+{\"vprintf\",      \"decc$txvprintf\",    0},   \\\n+{\"vsprintf\",     \"decc$txvsprintf\",   0},   \\\n+{\"vsnprintf\",    \"decc$txvsnprintf\",  0},   \\\n+{NULL, NULL, 0}                             \\\n+}\n+\n+/* Initialize of libfuncs that are 32/64 bit memory specific.  */\n+\n+#define MEM_LIBFUNCS_INIT                              \\\n+do {                                                   \\\n+  memcpy_libfunc = init_one_libfunc (\"decc$memcpy\");   \\\n+  memmove_libfunc = init_one_libfunc (\"decc$memmove\"); \\\n+  memset_libfunc = init_one_libfunc (\"decc$memset\");   \\\n+} while (0)"}, {"sha": "45afbc9a03d3882e8e3309ff43778dae25e383fa", "filename": "gcc/config/vms/vms-psxcrt0-64.c", "status": "renamed", "additions": 23, "deletions": 22, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71cd2220907433e589dad2cc9869efdd1c9b5dd2/gcc%2Fconfig%2Fvms%2Fvms-psxcrt0-64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71cd2220907433e589dad2cc9869efdd1c9b5dd2/gcc%2Fconfig%2Fvms%2Fvms-psxcrt0-64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvms%2Fvms-psxcrt0-64.c?ref=71cd2220907433e589dad2cc9869efdd1c9b5dd2", "patch": "@@ -2,26 +2,26 @@\n    Copyright (C) 2001, 2009 Free Software Foundation, Inc.\n    Contributed by Douglas B. Rupp (rupp@gnat.com).\n \n-This file is part of GCC.\n+   This file is part of GCC.\n \n-GCC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 3, or (at your option)\n-any later version.\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n \n-GCC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n \n-Under Section 7 of GPL version 3, you are granted additional\n-permissions described in the GCC Runtime Library Exception, version\n-3.1, as published by the Free Software Foundation.\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n \n-You should have received a copy of the GNU General Public License and\n-a copy of the GCC Runtime Library Exception along with this program;\n-see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-<http://www.gnu.org/licenses/>.  */\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n \n #if !defined(__DECC)\n You Lose! This file can only be compiled with DEC C.\n@@ -53,7 +53,7 @@ int\n __main (arg1, arg2, arg3, image_file_desc, arg5, arg6)\n      void *arg1, *arg2, *arg3;\n      void *image_file_desc;\n-     void *arg5, *arg6)\n+     void *arg5, *arg6;\n {\n   int argc;\n   char **argv;\n@@ -74,18 +74,19 @@ __main (arg1, arg2, arg3, image_file_desc, arg5, arg6)\n \n #pragma __pointer_size long\n \n-  /* Reallocate argv with 64-bit pointers.  */\n-  long_argv = (char **) malloc (sizeof (char *) * (argc + 1));\n+  /* Reallocate argv with 64 bit pointers.  */\n+  long_argv = (char **) _malloc32 (sizeof (char *) * (argc + 1));\n \n   for (i = 0; i < argc; i++)\n-    long_argv[i] = strdup (argv[i]);\n+    long_argv[i] = (char *) _strdup32 (argv[i]);\n \n   long_argv[argc] = (char *) 0;\n \n-  long_envp = (char **) malloc (sizeof (char *) * 5);\n+  for (i = 0; envp[i]; i++);\n+  long_envp = (char **) _malloc32 (sizeof (char *) * (i + 1));\n \n   for (i = 0; envp[i]; i++)\n-    long_envp[i] = strdup (envp[i]);\n+    long_envp[i] = (char *) _strdup32 (envp[i]);\n \n   long_envp[i] = (char *) 0;\n ", "previous_filename": "gcc/config/alpha/vms-psxcrt0-64.c"}, {"sha": "5ad5ddb0fd832b7b370b3e8bbb84c53378104a8d", "filename": "gcc/config/vms/vms-psxcrt0.c", "status": "renamed", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71cd2220907433e589dad2cc9869efdd1c9b5dd2/gcc%2Fconfig%2Fvms%2Fvms-psxcrt0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71cd2220907433e589dad2cc9869efdd1c9b5dd2/gcc%2Fconfig%2Fvms%2Fvms-psxcrt0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvms%2Fvms-psxcrt0.c?ref=71cd2220907433e589dad2cc9869efdd1c9b5dd2", "patch": "@@ -2,26 +2,26 @@\n    Copyright (C) 2001, 2009 Free Software Foundation, Inc.\n    Contributed by Douglas B. Rupp (rupp@gnat.com).\n \n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 3, or (at your option)\n-any later version.\n-\n-GCC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-Under Section 7 of GPL version 3, you are granted additional\n-permissions described in the GCC Runtime Library Exception, version\n-3.1, as published by the Free Software Foundation.\n-\n-You should have received a copy of the GNU General Public License and\n-a copy of the GCC Runtime Library Exception along with this program;\n-see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-<http://www.gnu.org/licenses/>.  */\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n \n #if !defined(__DECC)\n You Lose! This file can only be compiled with DEC C.", "previous_filename": "gcc/config/alpha/vms-psxcrt0.c"}, {"sha": "dd4b46b333e5d0eb1c9424fc20e63fda714ebbfd", "filename": "gcc/config/vms/vms.opt", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71cd2220907433e589dad2cc9869efdd1c9b5dd2/gcc%2Fconfig%2Fvms%2Fvms.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71cd2220907433e589dad2cc9869efdd1c9b5dd2/gcc%2Fconfig%2Fvms%2Fvms.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvms%2Fvms.opt?ref=71cd2220907433e589dad2cc9869efdd1c9b5dd2", "patch": "@@ -0,0 +1,25 @@\n+; Copyright (C) 2009 Free Software Foundation, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 3, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+; for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING3.  If not see\n+; <http://www.gnu.org/licenses/>.\n+\n+mmalloc64\n+Target Report Mask(MALLOC64)\n+Malloc data into P2 space\n+\n+mdebug-main=\n+Target RejectNegative Joined Var(vms_debug_main)\n+Set name of main routine for the debugger"}, {"sha": "b232c8e6804295ce2d5ac04ab7545c894bfee4dd", "filename": "gcc/config/vms/x-vms", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71cd2220907433e589dad2cc9869efdd1c9b5dd2/gcc%2Fconfig%2Fvms%2Fx-vms", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71cd2220907433e589dad2cc9869efdd1c9b5dd2/gcc%2Fconfig%2Fvms%2Fx-vms", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvms%2Fx-vms?ref=71cd2220907433e589dad2cc9869efdd1c9b5dd2", "patch": "@@ -0,0 +1,27 @@\n+# Copyright (C) 2001, 2002, 2004, 2005, 2008, 2009\n+# Free Software Foundation, Inc.\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3, or (at your option)\n+# any later version.\n+#\n+# GCC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+LN = cp -p\n+LN_S = cp -p\n+\n+# Doesn't work on VMS\n+USE_COLLECT2=\n+\n+# There are no man pages on VMS\n+POD2MAN = false"}, {"sha": "7907f9263cfcd0f3fba7d276a00f05d47a116ecf", "filename": "gcc/config/vms/xm-vms.h", "status": "renamed", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71cd2220907433e589dad2cc9869efdd1c9b5dd2/gcc%2Fconfig%2Fvms%2Fxm-vms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71cd2220907433e589dad2cc9869efdd1c9b5dd2/gcc%2Fconfig%2Fvms%2Fxm-vms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvms%2Fxm-vms.h?ref=71cd2220907433e589dad2cc9869efdd1c9b5dd2", "patch": "@@ -1,6 +1,7 @@\n-/* Configuration for GNU C-compiler for openVMS/Alpha.\n-   Copyright (C) 1996, 1997, 2001, 2004, 2007 Free Software Foundation, Inc.\n-   Contributed by Klaus Kaempf (kkaempf@progis.de).\n+/* Configuration for GCC for hosting on VMS\n+   using a Unix style C library.\n+   Copyright (C) 1996, 1997, 2001, 2004, 2007, 2009\n+   Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -23,17 +24,14 @@ along with GCC; see the file COPYING3.  If not see\n #define VMS\n #endif\n \n-/* Define a local equivalent (sort of) for unlink */\n-#define unlink remove\n-\n /* Causes exit() to be redefined to __posix_exit() and\n-   Posix compatible failure and success codes to be used */\n+   Posix compatible failure and success codes to be used.  */\n #define _POSIX_EXIT 1\n \n-/* Open files in stream mode if not otherwise explicitly specified */\n+/* Open files in stream mode if not otherwise explicitly specified.  */\n #define __UNIX_FOPEN 1\n \n-/* Write to stdout using fputc to avoid record terminators in pipes */\n+/* Write to stdout using fputc to avoid record terminators in pipes.  */\n #define __UNIX_FWRITE 1\n \n #define STDC_HEADERS 1\n@@ -54,3 +52,7 @@ do                                                         \\\n \t  break;                                           \\\n \t}                                                  \\\n   } while (0)\n+\n+#define STANDARD_EXEC_PREFIX \"/gnu/libexec/gcc/\"\n+#define STANDARD_STARTFILE_PREFIX \"/gnu/lib/\"\n+#define STANDARD_INCLUDE_DIR \"/gnu/include\"", "previous_filename": "gcc/config/alpha/xm-vms.h"}, {"sha": "9e77f890aaa9aee2de19a3c5a03f3653c137393b", "filename": "gcc/config/vms/xm-vms64.h", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71cd2220907433e589dad2cc9869efdd1c9b5dd2/gcc%2Fconfig%2Fvms%2Fxm-vms64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71cd2220907433e589dad2cc9869efdd1c9b5dd2/gcc%2Fconfig%2Fvms%2Fxm-vms64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvms%2Fxm-vms64.h?ref=71cd2220907433e589dad2cc9869efdd1c9b5dd2", "patch": "@@ -0,0 +1,23 @@\n+/* Configuration for GCC for hosting on 64bit VMS\n+   using a Unix style C library.\n+   Copyright (C) 2009\n+   Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#define HOST_LONG_FORMAT \"ll\"\n+#define HOST_PTR_PRINTF \"%llp\""}]}