{"sha": "2e2206faab182f079bc6d6019f7872820d830bee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmUyMjA2ZmFhYjE4MmYwNzliYzZkNjAxOWY3ODcyODIwZDgzMGJlZQ==", "commit": {"author": {"name": "Alexander Ivchenko", "email": "alexander.ivchenko@intel.com", "date": "2013-10-15T13:54:52Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2013-10-15T13:54:52Z"}, "message": "predicates.md (const_8_to_15_operand): New.\n\n       * config/i386/predicates.md (const_8_to_15_operand): New.\n        (const_16_to_31_operand): Ditto.\n        * config/i386/sse.md (V8FI): New.\n        (V16FI): Ditto.\n        (reduc_splus_v8df): Ditto.\n        (reduc_splus_v16sf): Ditto.\n        (avx512f_vextract<shuffletype>32x4_1): Ditto.\n        (vec_extract_hi_<mode>): Ditto.\n        (avx512f_vinsert<shuffletype>32x4_1): Ditto.\n        (vec_set_lo_<mode>): Ditto.\n        (vec_set_hi_<mode>): Ditto.\n        (avx512f_shuf_<shuffletype>64x2_1): Ditto.\n        (avx512f_shuf_<shuffletype>32x4_1): Ditto.\n        (avx512f_pshufd_1): Ditto.\n        (avx512f_broadcast<mode>): Ditto.\n        (avx512f_broadcast<mode>): Ditto.\n        (define_split): Split vec_extract_lo into move.\n        (ssequartermode): Ditto.\n        (ssedoublemode): Extened with wider modes.\n        (vec_extract_lo_<mode>): Ditto.\n\n\nCo-Authored-By: Andrey Turetskiy <andrey.turetskiy@intel.com>\nCo-Authored-By: Anna Tikhonova <anna.tikhonova@intel.com>\nCo-Authored-By: Ilya Tocar <ilya.tocar@intel.com>\nCo-Authored-By: Ilya Verbin <ilya.verbin@intel.com>\nCo-Authored-By: Kirill Yukhin <kirill.yukhin@intel.com>\nCo-Authored-By: Maxim Kuznetsov <maxim.kuznetsov@intel.com>\nCo-Authored-By: Michael Zolotukhin <michael.v.zolotukhin@intel.com>\nCo-Authored-By: Sergey Lega <sergey.s.lega@intel.com>\n\nFrom-SVN: r203606", "tree": {"sha": "ed74d62e0f8b833f8f396b5a048d494781d4024c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed74d62e0f8b833f8f396b5a048d494781d4024c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e2206faab182f079bc6d6019f7872820d830bee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e2206faab182f079bc6d6019f7872820d830bee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e2206faab182f079bc6d6019f7872820d830bee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e2206faab182f079bc6d6019f7872820d830bee/comments", "author": null, "committer": null, "parents": [{"sha": "0fe65b75fed76e8cfc029ccfeb2b5ed4a8f1a46c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fe65b75fed76e8cfc029ccfeb2b5ed4a8f1a46c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fe65b75fed76e8cfc029ccfeb2b5ed4a8f1a46c"}], "stats": {"total": 408, "additions": 407, "deletions": 1}, "files": [{"sha": "ee591c070083ae8d81bf20324882b5fac9db92f9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e2206faab182f079bc6d6019f7872820d830bee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e2206faab182f079bc6d6019f7872820d830bee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2e2206faab182f079bc6d6019f7872820d830bee", "patch": "@@ -1,3 +1,34 @@\n+2013-10-15  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n+\t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n+\t    Sergey Lega  <sergey.s.lega@intel.com>\n+\t    Anna Tikhonova  <anna.tikhonova@intel.com>\n+\t    Ilya Tocar  <ilya.tocar@intel.com>\n+\t    Andrey Turetskiy  <andrey.turetskiy@intel.com>\n+\t    Ilya Verbin  <ilya.verbin@intel.com>\n+\t    Kirill Yukhin  <kirill.yukhin@intel.com>\n+\t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n+\n+\t* config/i386/predicates.md (const_8_to_15_operand): New.\n+\t(const_16_to_31_operand): Ditto.\n+\t* config/i386/sse.md (V8FI): New.\n+\t(V16FI): Ditto.\n+\t(reduc_splus_v8df): Ditto.\n+\t(reduc_splus_v16sf): Ditto.\n+\t(avx512f_vextract<shuffletype>32x4_1): Ditto.\n+\t(vec_extract_hi_<mode>): Ditto.\n+\t(avx512f_vinsert<shuffletype>32x4_1): Ditto.\n+\t(vec_set_lo_<mode>): Ditto.\n+\t(vec_set_hi_<mode>): Ditto.\n+\t(avx512f_shuf_<shuffletype>64x2_1): Ditto.\n+\t(avx512f_shuf_<shuffletype>32x4_1): Ditto.\n+\t(avx512f_pshufd_1): Ditto.\n+\t(avx512f_broadcast<mode>): Ditto.\n+\t(avx512f_broadcast<mode>): Ditto.\n+\t(define_split): Split vec_extract_lo into move.\n+\t(ssequartermode): Ditto.\n+\t(ssedoublemode): Extened with wider modes.\n+\t(vec_extract_lo_<mode>): Ditto.\n+\n 2013-10-15  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n \t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n \t    Sergey Lega  <sergey.s.lega@intel.com>"}, {"sha": "06b291445a959dacf8d5ed4e702569d2d3293233", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e2206faab182f079bc6d6019f7872820d830bee/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e2206faab182f079bc6d6019f7872820d830bee/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=2e2206faab182f079bc6d6019f7872820d830bee", "patch": "@@ -757,11 +757,21 @@\n   (and (match_code \"const_int\")\n        (match_test \"IN_RANGE (INTVAL (op), 8, 11)\")))\n \n+;; Match 8 to 15.\n+(define_predicate \"const_8_to_15_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (INTVAL (op), 8, 15)\")))\n+\n ;; Match 12 to 15.\n (define_predicate \"const_12_to_15_operand\"\n   (and (match_code \"const_int\")\n        (match_test \"IN_RANGE (INTVAL (op), 12, 15)\")))\n \n+;; Match 16 to 31.\n+(define_predicate \"const_16_to_31_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (INTVAL (op), 16, 31)\")))\n+\n ;; True if this is a constant appropriate for an increment or decrement.\n (define_predicate \"incdec_operand\"\n   (match_code \"const_int\")"}, {"sha": "4655e99de0400f252aac5e7e3982f4685b9b09d1", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 366, "deletions": 1, "changes": 367, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e2206faab182f079bc6d6019f7872820d830bee/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e2206faab182f079bc6d6019f7872820d830bee/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=2e2206faab182f079bc6d6019f7872820d830bee", "patch": "@@ -243,6 +243,14 @@\n (define_mode_iterator VI8_AVX2_AVX512F\n   [(V8DI \"TARGET_AVX512F\") (V4DI \"TARGET_AVX2\") V2DI])\n \n+;; All V8D* modes\n+(define_mode_iterator V8FI\n+  [V8DF V8DI])\n+\n+;; All V16S* modes\n+(define_mode_iterator V16FI\n+  [V16SF V16SI])\n+\n ;; ??? We should probably use TImode instead.\n (define_mode_iterator VIMAX_AVX2\n   [(V2TI \"TARGET_AVX2\") V1TI])\n@@ -347,8 +355,12 @@\n   (V32QI \"i\") (V16HI \"u\") (V16QI \"i\") (V8HI \"i\")\n   (V64QI \"i\") (V1TI \"i\") (V2TI \"i\")])\n \n+(define_mode_attr ssequartermode\n+  [(V16SF \"V4SF\") (V8DF \"V2DF\") (V16SI \"V4SI\") (V8DI \"V2DI\")])\n+\n (define_mode_attr ssedoublemode\n-  [(V16HI \"V16SI\") (V8HI \"V8SI\") (V4HI \"V4SI\")\n+  [(V16SF \"V32SF\") (V16SI \"V32SI\") (V8DI \"V16DI\") (V8DF \"V16DF\")\n+   (V16HI \"V16SI\") (V8HI \"V8SI\") (V4HI \"V4SI\")\n    (V32QI \"V32HI\") (V16QI \"V16HI\")])\n \n (define_mode_attr ssebytemode\n@@ -1697,6 +1709,15 @@\n    (set_attr \"prefix_rep\" \"1,*\")\n    (set_attr \"mode\" \"V4SF\")])\n \n+(define_expand \"reduc_splus_v8df\"\n+  [(match_operand:V8DF 0 \"register_operand\")\n+   (match_operand:V8DF 1 \"register_operand\")]\n+  \"TARGET_AVX512F\"\n+{\n+  ix86_expand_reduc (gen_addv8df3, operands[0], operands[1]);\n+  DONE;\n+})\n+\n (define_expand \"reduc_splus_v4df\"\n   [(match_operand:V4DF 0 \"register_operand\")\n    (match_operand:V4DF 1 \"register_operand\")]\n@@ -1719,6 +1740,15 @@\n   DONE;\n })\n \n+(define_expand \"reduc_splus_v16sf\"\n+  [(match_operand:V16SF 0 \"register_operand\")\n+   (match_operand:V16SF 1 \"register_operand\")]\n+  \"TARGET_AVX512F\"\n+{\n+  ix86_expand_reduc (gen_addv16sf3, operands[0], operands[1]);\n+  DONE;\n+})\n+\n (define_expand \"reduc_splus_v8sf\"\n   [(match_operand:V8SF 0 \"register_operand\")\n    (match_operand:V8SF 1 \"register_operand\")]\n@@ -4752,6 +4782,86 @@\n   operands[1] = adjust_address (operands[1], SFmode, INTVAL (operands[2]) * 4);\n })\n \n+(define_insn \"avx512f_vextract<shuffletype>32x4_1\"\n+  [(set (match_operand:<ssequartermode> 0 \"nonimmediate_operand\" \"=vm\")\n+\t(vec_select:<ssequartermode>\n+\t  (match_operand:V16FI 1 \"register_operand\" \"v\")\n+\t  (parallel [(match_operand 2  \"const_0_to_15_operand\")\n+            (match_operand 3  \"const_0_to_15_operand\")\n+            (match_operand 4  \"const_0_to_15_operand\")\n+            (match_operand 5  \"const_0_to_15_operand\")])))]\n+  \"TARGET_AVX512F && (INTVAL (operands[2]) = INTVAL (operands[3]) - 1)\n+  && (INTVAL (operands[3]) = INTVAL (operands[4]) - 1)\n+  && (INTVAL (operands[4]) = INTVAL (operands[5]) - 1)\"\n+{\n+  operands[2] = GEN_INT ((INTVAL (operands[2])) >> 2);\n+  return \"vextract<shuffletype>32x4\\t{%2, %1, %0|%0, %1, %2}\";\n+}\n+  [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set (attr \"memory\")\n+      (if_then_else (match_test \"MEM_P (operands[0])\")\n+\t(const_string \"store\")\n+\t(const_string \"none\")))\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n+(define_split\n+  [(set (match_operand:<ssehalfvecmode> 0 \"nonimmediate_operand\")\n+\t(vec_select:<ssehalfvecmode>\n+\t  (match_operand:V8FI 1 \"nonimmediate_operand\")\n+\t  (parallel [(const_int 0) (const_int 1)\n+            (const_int 2) (const_int 3)])))]\n+  \"TARGET_AVX512F && !(MEM_P (operands[0]) && MEM_P (operands[1]))\n+  && reload_completed\"\n+  [(const_int 0)]\n+{\n+  rtx op1 = operands[1];\n+  if (REG_P (op1))\n+    op1 = gen_rtx_REG (<ssehalfvecmode>mode, REGNO (op1));\n+  else\n+    op1 = gen_lowpart (<ssehalfvecmode>mode, op1);\n+  emit_move_insn (operands[0], op1);\n+  DONE;\n+})\n+\n+(define_insn \"vec_extract_lo_<mode>\"\n+  [(set (match_operand:<ssehalfvecmode> 0 \"nonimmediate_operand\" \"=vm\")\n+\t(vec_select:<ssehalfvecmode>\n+\t  (match_operand:V8FI 1 \"nonimmediate_operand\" \"vm\")\n+\t  (parallel [(const_int 0) (const_int 1)\n+            (const_int 2) (const_int 3)])))]\n+  \"TARGET_AVX512F && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n+  \"#\"\n+  [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set (attr \"memory\")\n+      (if_then_else (match_test \"MEM_P (operands[0])\")\n+\t(const_string \"store\")\n+\t(const_string \"none\")))\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n+(define_insn \"vec_extract_hi_<mode>\"\n+  [(set (match_operand:<ssehalfvecmode> 0 \"nonimmediate_operand\" \"=vm\")\n+\t(vec_select:<ssehalfvecmode>\n+\t  (match_operand:V8FI 1 \"register_operand\" \"v\")\n+\t  (parallel [(const_int 4) (const_int 5)\n+            (const_int 6) (const_int 7)])))]\n+  \"TARGET_AVX512F\"\n+  \"vextract<shuffletype>64x4\\t{$0x1, %1, %0|%0, %1, 0x1}\"\n+  [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set (attr \"memory\")\n+      (if_then_else (match_test \"MEM_P (operands[0])\")\n+\t(const_string \"store\")\n+\t(const_string \"none\")))\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n (define_expand \"avx_vextractf128<mode>\"\n   [(match_operand:<ssehalfvecmode> 0 \"nonimmediate_operand\")\n    (match_operand:V_256 1 \"register_operand\")\n@@ -4776,6 +4886,45 @@\n   DONE;\n })\n \n+(define_insn_and_split \"vec_extract_lo_<mode>\"\n+  [(set (match_operand:<ssehalfvecmode> 0 \"nonimmediate_operand\" \"=v,m\")\n+\t(vec_select:<ssehalfvecmode>\n+\t  (match_operand:V16FI 1 \"nonimmediate_operand\" \"vm,v\")\n+\t  (parallel [(const_int 0) (const_int 1)\n+                     (const_int 2) (const_int 3)\n+                     (const_int 4) (const_int 5)\n+                     (const_int 6) (const_int 7)])))]\n+  \"TARGET_AVX512F && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(const_int 0)]\n+{\n+  rtx op1 = operands[1];\n+  if (REG_P (op1))\n+    op1 = gen_rtx_REG (<ssehalfvecmode>mode, REGNO (op1));\n+  else\n+    op1 = gen_lowpart (<ssehalfvecmode>mode, op1);\n+  emit_move_insn (operands[0], op1);\n+  DONE;\n+})\n+\n+(define_insn \"vec_extract_hi_<mode>\"\n+  [(set (match_operand:<ssehalfvecmode> 0 \"nonimmediate_operand\" \"=v,m\")\n+\t(vec_select:<ssehalfvecmode>\n+\t  (match_operand:V16FI 1 \"nonimmediate_operand\" \"v,v\")\n+\t  (parallel [(const_int 8) (const_int 9)\n+\t\t     (const_int 10) (const_int 11)\n+\t\t     (const_int 12) (const_int 13)\n+\t\t     (const_int 14) (const_int 15)])))]\n+  \"TARGET_AVX512F\"\n+  \"vextracti64x4\\t{$0x1, %1, %0|%0, %1, 0x1}\"\n+  [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"memory\" \"none,store\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"XI\")])\n+\n (define_insn_and_split \"vec_extract_lo_<mode>\"\n   [(set (match_operand:<ssehalfvecmode> 0 \"nonimmediate_operand\" \"=x,m\")\n \t(vec_select:<ssehalfvecmode>\n@@ -7483,6 +7632,198 @@\n    (set_attr \"prefix\" \"orig,orig,vex,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n+(define_insn \"avx512f_vinsert<shuffletype>32x4_1\"\n+  [(set (match_operand:V16FI 0 \"register_operand\" \"=v\")\n+\t(vec_merge:V16FI\n+\t  (match_operand:V16FI 1 \"register_operand\" \"v\")\n+\t  (vec_duplicate:V16FI\n+\t\t(match_operand:<ssequartermode> 2 \"nonimmediate_operand\" \"vm\"))\n+\t  (match_operand:SI 3 \"const_int_operand\" \"n\")))]\n+  \"TARGET_AVX512F\"\n+{\n+  int mask;\n+  if (INTVAL (operands[3]) == 0xFFF)\n+      mask = 0;\n+  else if ( INTVAL (operands[3]) == 0xF0FF)\n+      mask = 1;\n+  else if ( INTVAL (operands[3]) == 0xFF0F)\n+      mask = 2;\n+  else if ( INTVAL (operands[3]) == 0xFFF0)\n+      mask = 3;\n+  else\n+      gcc_unreachable ();\n+\n+  operands[3] = GEN_INT (mask);\n+\n+  return \"vinsert<shuffletype>32x4\\t{%3, %2, %1, %0|%0, %1, %2, %3}\";\n+}\n+  [(set_attr \"type\" \"sselog\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n+(define_insn \"vec_set_lo_<mode>\"\n+  [(set (match_operand:V8FI 0 \"register_operand\" \"=v\")\n+\t(vec_concat:V8FI\n+\t  (match_operand:<ssehalfvecmode> 2 \"nonimmediate_operand\" \"vm\")\n+\t  (vec_select:<ssehalfvecmode>\n+\t    (match_operand:V8FI 1 \"register_operand\" \"v\")\n+\t    (parallel [(const_int 4) (const_int 5)\n+              (const_int 6) (const_int 7)]))))]\n+  \"TARGET_AVX512F\"\n+  \"vinsert<shuffletype>64x4\\t{$0x0, %2, %1, %0|%0, %1, %2, $0x0}\"\n+  [(set_attr \"type\" \"sselog\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"XI\")])\n+\n+(define_insn \"vec_set_hi_<mode>\"\n+  [(set (match_operand:V8FI 0 \"register_operand\" \"=v\")\n+\t(vec_concat:V8FI\n+\t  (match_operand:<ssehalfvecmode> 2 \"nonimmediate_operand\" \"vm\")\n+\t  (vec_select:<ssehalfvecmode>\n+\t    (match_operand:V8FI 1 \"register_operand\" \"v\")\n+\t    (parallel [(const_int 0) (const_int 1)\n+              (const_int 2) (const_int 3)]))))]\n+  \"TARGET_AVX512F\"\n+  \"vinsert<shuffletype>64x4\\t{$0x1, %2, %1, %0|%0, %1, %2, $0x1}\"\n+  [(set_attr \"type\" \"sselog\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"XI\")])\n+\n+(define_insn \"avx512f_shuf_<shuffletype>64x2_1\"\n+  [(set (match_operand:V8FI 0 \"register_operand\" \"=v\")\n+\t(vec_select:V8FI\n+\t  (vec_concat:<ssedoublemode>\n+\t    (match_operand:V8FI 1 \"register_operand\" \"v\")\n+\t    (match_operand:V8FI 2 \"nonimmediate_operand\" \"vm\"))\n+\t  (parallel [(match_operand 3  \"const_0_to_7_operand\")\n+\t\t     (match_operand 4  \"const_0_to_7_operand\")\n+\t\t     (match_operand 5  \"const_0_to_7_operand\")\n+\t\t     (match_operand 6  \"const_0_to_7_operand\")\n+\t\t     (match_operand 7  \"const_8_to_15_operand\")\n+\t\t     (match_operand 8  \"const_8_to_15_operand\")\n+\t\t     (match_operand 9  \"const_8_to_15_operand\")\n+\t\t     (match_operand 10  \"const_8_to_15_operand\")])))]\n+  \"TARGET_AVX512F\n+   && (INTVAL (operands[3]) == (INTVAL (operands[4]) - 1)\n+       && INTVAL (operands[5]) == (INTVAL (operands[6]) - 1)\n+       && INTVAL (operands[7]) == (INTVAL (operands[8]) - 1)\n+       && INTVAL (operands[9]) == (INTVAL (operands[10]) - 1))\"\n+{\n+  int mask;\n+  mask = INTVAL (operands[3]) / 2;\n+  mask |= INTVAL (operands[5]) / 2 << 2;\n+  mask |= (INTVAL (operands[7]) - 8) / 2 << 4;\n+  mask |= (INTVAL (operands[9]) - 8) / 2 << 6;\n+  operands[3] = GEN_INT (mask);\n+\n+  return \"vshuf<shuffletype>64x2\\t{%3, %2, %1, %0|%0, %1, %2, %3}\";\n+}\n+  [(set_attr \"type\" \"sselog\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n+(define_insn \"avx512f_shuf_<shuffletype>32x4_1\"\n+  [(set (match_operand:V16FI 0 \"register_operand\" \"=v\")\n+\t(vec_select:V16FI\n+\t  (vec_concat:<ssedoublemode>\n+\t    (match_operand:V16FI 1 \"register_operand\" \"v\")\n+\t    (match_operand:V16FI 2 \"nonimmediate_operand\" \"vm\"))\n+\t  (parallel [(match_operand 3  \"const_0_to_15_operand\")\n+\t\t     (match_operand 4  \"const_0_to_15_operand\")\n+\t\t     (match_operand 5  \"const_0_to_15_operand\")\n+\t\t     (match_operand 6  \"const_0_to_15_operand\")\n+\t\t     (match_operand 7  \"const_0_to_15_operand\")\n+\t\t     (match_operand 8  \"const_0_to_15_operand\")\n+\t\t     (match_operand 9  \"const_0_to_15_operand\")\n+\t\t     (match_operand 10  \"const_0_to_15_operand\")\n+\t\t     (match_operand 11  \"const_16_to_31_operand\")\n+\t\t     (match_operand 12  \"const_16_to_31_operand\")\n+\t\t     (match_operand 13  \"const_16_to_31_operand\")\n+\t\t     (match_operand 14  \"const_16_to_31_operand\")\n+\t\t     (match_operand 15  \"const_16_to_31_operand\")\n+\t\t     (match_operand 16  \"const_16_to_31_operand\")\n+\t\t     (match_operand 17  \"const_16_to_31_operand\")\n+\t\t     (match_operand 18  \"const_16_to_31_operand\")])))]\n+  \"TARGET_AVX512F\n+   && (INTVAL (operands[3]) == (INTVAL (operands[4]) - 1)\n+       && INTVAL (operands[3]) == (INTVAL (operands[5]) - 2)\n+       && INTVAL (operands[3]) == (INTVAL (operands[6]) - 3)\n+       && INTVAL (operands[7]) == (INTVAL (operands[8]) - 1)\n+       && INTVAL (operands[7]) == (INTVAL (operands[9]) - 2)\n+       && INTVAL (operands[7]) == (INTVAL (operands[10]) - 3)\n+       && INTVAL (operands[11]) == (INTVAL (operands[12]) - 1)\n+       && INTVAL (operands[11]) == (INTVAL (operands[13]) - 2)\n+       && INTVAL (operands[11]) == (INTVAL (operands[14]) - 3)\n+       && INTVAL (operands[15]) == (INTVAL (operands[16]) - 1)\n+       && INTVAL (operands[15]) == (INTVAL (operands[17]) - 2)\n+       && INTVAL (operands[15]) == (INTVAL (operands[18]) - 3))\"\n+{\n+  int mask;\n+  mask = INTVAL (operands[3]) / 4;\n+  mask |= INTVAL (operands[7]) / 4 << 2;\n+  mask |= (INTVAL (operands[11]) - 16) / 4 << 4;\n+  mask |= (INTVAL (operands[15]) - 16) / 4 << 6;\n+  operands[3] = GEN_INT (mask);\n+\n+  return \"vshuf<shuffletype>32x4\\t{%3, %2, %1, %0|%0, %1, %2, %3}\";\n+}\n+  [(set_attr \"type\" \"sselog\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n+(define_insn \"avx512f_pshufd_1\"\n+  [(set (match_operand:V16SI 0 \"register_operand\" \"=v\")\n+\t(vec_select:V16SI\n+\t  (match_operand:V16SI 1 \"nonimmediate_operand\" \"vm\")\n+\t  (parallel [(match_operand 2 \"const_0_to_3_operand\")\n+\t\t     (match_operand 3 \"const_0_to_3_operand\")\n+\t\t     (match_operand 4 \"const_0_to_3_operand\")\n+\t\t     (match_operand 5 \"const_0_to_3_operand\")\n+\t\t     (match_operand 6 \"const_4_to_7_operand\")\n+\t\t     (match_operand 7 \"const_4_to_7_operand\")\n+\t\t     (match_operand 8 \"const_4_to_7_operand\")\n+\t\t     (match_operand 9 \"const_4_to_7_operand\")\n+\t\t     (match_operand 10 \"const_8_to_11_operand\")\n+\t\t     (match_operand 11 \"const_8_to_11_operand\")\n+\t\t     (match_operand 12 \"const_8_to_11_operand\")\n+\t\t     (match_operand 13 \"const_8_to_11_operand\")\n+\t\t     (match_operand 14 \"const_12_to_15_operand\")\n+\t\t     (match_operand 15 \"const_12_to_15_operand\")\n+\t\t     (match_operand 16 \"const_12_to_15_operand\")\n+\t\t     (match_operand 17 \"const_12_to_15_operand\")])))]\n+  \"TARGET_AVX512F\n+   && INTVAL (operands[2]) + 4 == INTVAL (operands[6])\n+   && INTVAL (operands[3]) + 4 == INTVAL (operands[7])\n+   && INTVAL (operands[4]) + 4 == INTVAL (operands[8])\n+   && INTVAL (operands[5]) + 4 == INTVAL (operands[9])\n+   && INTVAL (operands[2]) + 8 == INTVAL (operands[10])\n+   && INTVAL (operands[3]) + 8 == INTVAL (operands[11])\n+   && INTVAL (operands[4]) + 8 == INTVAL (operands[12])\n+   && INTVAL (operands[5]) + 8 == INTVAL (operands[13])\n+   && INTVAL (operands[2]) + 12 == INTVAL (operands[14])\n+   && INTVAL (operands[3]) + 12 == INTVAL (operands[15])\n+   && INTVAL (operands[4]) + 12 == INTVAL (operands[16])\n+   && INTVAL (operands[5]) + 12 == INTVAL (operands[17])\"\n+{\n+  int mask = 0;\n+  mask |= INTVAL (operands[2]) << 0;\n+  mask |= INTVAL (operands[3]) << 2;\n+  mask |= INTVAL (operands[4]) << 4;\n+  mask |= INTVAL (operands[5]) << 6;\n+  operands[2] = GEN_INT (mask);\n+\n+  return \"vpshufd\\t{%2, %1, %0|%0, %1, %2}\";\n+}\n+  [(set_attr \"type\" \"sselog1\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"mode\" \"XI\")])\n+\n (define_expand \"avx2_pshufdv3\"\n   [(match_operand:V8SI 0 \"register_operand\")\n    (match_operand:V8SI 1 \"nonimmediate_operand\")\n@@ -11305,6 +11646,30 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_insn \"avx512f_broadcast<mode>\"\n+  [(set (match_operand:V16FI 0 \"register_operand\" \"=v,v\")\n+\t(vec_duplicate:V16FI\n+\t  (match_operand:<ssexmmmode> 1 \"nonimmediate_operand\" \"v,m\")))]\n+  \"TARGET_AVX512F\"\n+  \"@\n+   vshuf<shuffletype>32x4\\t{$0x0, %g1, %g1, %0|%0, %g1, %g1, 0x0}\n+   vbroadcast<shuffletype>32x4\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n+(define_insn \"avx512f_broadcast<mode>\"\n+  [(set (match_operand:V8FI 0 \"register_operand\" \"=v,v\")\n+\t(vec_duplicate:V8FI\n+\t  (match_operand:<ssehalfvecmode> 1 \"nonimmediate_operand\" \"v,m\")))]\n+  \"TARGET_AVX512F\"\n+  \"@\n+   vshuf<shuffletype>64x2\\t{$0x44, %g1, %g1, %0|%0, %g1, %g1, 0x44}\n+   vbroadcast<shuffletype>64x4\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"ssemov\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n (define_insn \"avx512f_vec_dup_gpr<mode>\"\n   [(set (match_operand:VI48_512 0 \"register_operand\" \"=v\")\n \t(vec_duplicate:VI48_512"}]}