{"sha": "dded9d2ca8e7e0d87b8fc1b9fc37703f7f2cc9c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGRlZDlkMmNhOGU3ZTBkODdiOGZjMWI5ZmMzNzcwM2Y3ZjJjYzljNQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-04-13T22:22:56Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-04-13T22:22:56Z"}, "message": "re PR libstdc++/31556 (find_if uses operator! instead of conversion to bool)\n\n2007-04-13  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/31556\n\t* include/bits/stl_algobase.h (equal(_InputIterator1, _InputIterator1,\n\t_InputIterator2, _BinaryPredicate), mismatch(_InputIterator1,\n\t_InputIterator1, _InputIterator2, _BinaryPredicate)): Convert\n\tpredicate return to bool.\n\t* include/bits/stl_algo.h (__find_if(_InputIterator, _InputIterator,\n\t_Predicate, input_iterator_tag), search(_ForwardIterator1,\n\t_ForwardIterator1, _ForwardIterator2, _ForwardIterator2,\n\t_BinaryPredicate), __search_n(_ForwardIterator, _ForwardIterator,\n\t_Integer, const _Tp&, _BinaryPredicate, std::forward_iterator_tag),\n\t__search_n(_RandomAccessIter, _RandomAccessIter, _Integer, const _Tp&,\n\t_BinaryPredicate, std::random_access_iterator_tag),\n\tsearch_n(_ForwardIterator, _ForwardIterator, _Integer, const _Tp&,\n\t_BinaryPredicate), remove_copy_if(_InputIterator, _InputIterator,\n\t_OutputIterator, _Predicate), __unique_copy(_ForwardIterator,\n\t_ForwardIterator, _OutputIterator, _BinaryPredicate,\n\tforward_iterator_tag, output_iterator_tag),\n\t__unique_copy(_InputIterator, _InputIterator, _OutputIterator,\n\t_BinaryPredicate, input_iterator_tag, output_iterator_tag),\n\t__unique_copy(_InputIterator, _InputIterator, _OutputIterator,\n\t_BinaryPredicate, input_iterator_tag, output_iterator_tag),\n\t__unique_copy(_InputIterator, _InputIterator, _ForwardIterator,\n\t_BinaryPredicate, input_iterator_tag, forward_iterator_tag),\n\tunique(_ForwardIterator, _ForwardIterator, _BinaryPredicate),\n\t__partition(_BidirectionalIterator, _BidirectionalIterator, _Predicate,\n\tbidirectional_iterator_tag), binary_search(_ForwardIterator,\n\t_ForwardIterator, const _Tp&, _Compare),\n\tnext_permutation(_BidirectionalIterator, _BidirectionalIterator,\n\t_Compare), prev_permutation(_BidirectionalIterator,\n\t_BidirectionalIterator, _Compare)): Likewise.\n\nFrom-SVN: r123800", "tree": {"sha": "40dea2492b7e83b6e8327274b1904deb57144476", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40dea2492b7e83b6e8327274b1904deb57144476"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dded9d2ca8e7e0d87b8fc1b9fc37703f7f2cc9c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dded9d2ca8e7e0d87b8fc1b9fc37703f7f2cc9c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dded9d2ca8e7e0d87b8fc1b9fc37703f7f2cc9c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dded9d2ca8e7e0d87b8fc1b9fc37703f7f2cc9c5/comments", "author": null, "committer": null, "parents": [{"sha": "601589dbeca1f2561dc2591d38ce4bd1f887f547", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/601589dbeca1f2561dc2591d38ce4bd1f887f547", "html_url": "https://github.com/Rust-GCC/gccrs/commit/601589dbeca1f2561dc2591d38ce4bd1f887f547"}], "stats": {"total": 77, "additions": 57, "deletions": 20}, "files": [{"sha": "eb04511cf8539b43811a30f41411087b4d61e470", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dded9d2ca8e7e0d87b8fc1b9fc37703f7f2cc9c5/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dded9d2ca8e7e0d87b8fc1b9fc37703f7f2cc9c5/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=dded9d2ca8e7e0d87b8fc1b9fc37703f7f2cc9c5", "patch": "@@ -1,3 +1,36 @@\n+2007-04-13  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/31556\n+\t* include/bits/stl_algobase.h (equal(_InputIterator1, _InputIterator1,\n+\t_InputIterator2, _BinaryPredicate), mismatch(_InputIterator1,\n+\t_InputIterator1, _InputIterator2, _BinaryPredicate)): Convert\n+\tpredicate return to bool.\n+\t* include/bits/stl_algo.h (__find_if(_InputIterator, _InputIterator,\n+\t_Predicate, input_iterator_tag), search(_ForwardIterator1,\n+\t_ForwardIterator1, _ForwardIterator2, _ForwardIterator2,\n+\t_BinaryPredicate), __search_n(_ForwardIterator, _ForwardIterator,\n+\t_Integer, const _Tp&, _BinaryPredicate, std::forward_iterator_tag),\n+\t__search_n(_RandomAccessIter, _RandomAccessIter, _Integer, const _Tp&,\n+\t_BinaryPredicate, std::random_access_iterator_tag),\n+\tsearch_n(_ForwardIterator, _ForwardIterator, _Integer, const _Tp&,\n+\t_BinaryPredicate), remove_copy_if(_InputIterator, _InputIterator,\n+\t_OutputIterator, _Predicate), __unique_copy(_ForwardIterator,\n+\t_ForwardIterator, _OutputIterator, _BinaryPredicate,\n+\tforward_iterator_tag, output_iterator_tag),\n+\t__unique_copy(_InputIterator, _InputIterator, _OutputIterator,\n+\t_BinaryPredicate, input_iterator_tag, output_iterator_tag),\n+\t__unique_copy(_InputIterator, _InputIterator, _OutputIterator,\n+\t_BinaryPredicate, input_iterator_tag, output_iterator_tag),\n+\t__unique_copy(_InputIterator, _InputIterator, _ForwardIterator,\n+\t_BinaryPredicate, input_iterator_tag, forward_iterator_tag),\n+\tunique(_ForwardIterator, _ForwardIterator, _BinaryPredicate),\n+\t__partition(_BidirectionalIterator, _BidirectionalIterator, _Predicate,\n+\tbidirectional_iterator_tag), binary_search(_ForwardIterator,\n+\t_ForwardIterator, const _Tp&, _Compare),\n+\tnext_permutation(_BidirectionalIterator, _BidirectionalIterator,\n+\t_Compare), prev_permutation(_BidirectionalIterator,\n+\t_BidirectionalIterator, _Compare)): Likewise.\n+\n 2007-04-13  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/31554"}, {"sha": "0621261e827c8ab9ec3f77242490b059dafeeaa7", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dded9d2ca8e7e0d87b8fc1b9fc37703f7f2cc9c5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dded9d2ca8e7e0d87b8fc1b9fc37703f7f2cc9c5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=dded9d2ca8e7e0d87b8fc1b9fc37703f7f2cc9c5", "patch": "@@ -186,7 +186,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     __find_if(_InputIterator __first, _InputIterator __last,\n \t      _Predicate __pred, input_iterator_tag)\n     {\n-      while (__first != __last && !__pred(*__first))\n+      while (__first != __last && !bool(__pred(*__first)))\n \t++__first;\n       return __first;\n     }\n@@ -568,7 +568,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       ++__tmp;\n       if (__tmp == __last2)\n \t{\n-\t  while (__first1 != __last1 && !__predicate(*__first1, *__first2))\n+\t  while (__first1 != __last1\n+\t\t && !bool(__predicate(*__first1, *__first2)))\n \t    ++__first1;\n \t  return __first1;\n \t}\n@@ -586,7 +587,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\tbreak;\n \t      ++__first1;\n \t    }\n-\t  while (__first1 != __last1 && !__predicate(*__first1, *__first2))\n+\t  while (__first1 != __last1 &&\n+\t\t !bool(__predicate(*__first1, *__first2)))\n \t    ++__first1;\n \t  if (__first1 == __last1)\n \t    return __last1;\n@@ -741,7 +743,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t       _Integer __count, const _Tp& __val,\n \t       _BinaryPredicate __binary_pred, std::forward_iterator_tag)\n     {\n-      while (__first != __last && !__binary_pred(*__first, __val))\n+      while (__first != __last && !bool(__binary_pred(*__first, __val)))\n         ++__first;\n \n       while (__first != __last)\n@@ -750,7 +752,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t    __n = __count;\n \t  _ForwardIterator __i = __first;\n \t  ++__i;\n-\t  while (__i != __last && __n != 1 && __binary_pred(*__i, __val))\n+\t  while (__i != __last && __n != 1 && bool(__binary_pred(*__i, __val)))\n \t    {\n \t      ++__i;\n \t      --__n;\n@@ -760,7 +762,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  if (__i == __last)\n \t    return __last;\n \t  __first = ++__i;\n-\t  while (__first != __last && !__binary_pred(*__first, __val))\n+\t  while (__first != __last\n+\t\t && !bool(__binary_pred(*__first, __val)))\n \t    ++__first;\n \t}\n       return __last;\n@@ -799,7 +802,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t{\n \t  // __lookAhead here is always pointing to the last element of next \n \t  // possible match.\n-\t  while (!__binary_pred(*__lookAhead, __val)) // the skip loop...\n+\t  while (!bool(__binary_pred(*__lookAhead, __val))) // the skip loop...\n \t    {\n \t      if (__tailSize < __pattSize)\n \t\treturn __last;  // Failure\n@@ -852,7 +855,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \treturn __first;\n       if (__count == 1)\n \t{\n-\t  while (__first != __last && !__binary_pred(*__first, __val))\n+\t  while (__first != __last && !bool(__binary_pred(*__first, __val)))\n \t    ++__first;\n \t  return __first;\n \t}\n@@ -1180,7 +1183,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       __glibcxx_requires_valid_range(__first, __last);\n \n       for ( ; __first != __last; ++__first)\n-\tif (!__pred(*__first))\n+\tif (!bool(__pred(*__first)))\n \t  {\n \t    *__result = *__first;\n \t    ++__result;\n@@ -1352,7 +1355,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       _ForwardIterator __next = __first;\n       *__result = *__first;\n       while (++__next != __last)\n-\tif (!__binary_pred(*__first, *__next))\n+\tif (!bool(__binary_pred(*__first, *__next)))\n \t  {\n \t    __first = __next;\n \t    *++__result = *__first;\n@@ -1383,7 +1386,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       typename iterator_traits<_InputIterator>::value_type __value = *__first;\n       *__result = __value;\n       while (++__first != __last)\n-\tif (!__binary_pred(__value, *__first))\n+\tif (!bool(__binary_pred(__value, *__first)))\n \t  {\n \t    __value = *__first;\n \t    *++__result = __value;\n@@ -1413,7 +1416,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n       *__result = *__first;\n       while (++__first != __last)\n-\tif (!__binary_pred(*__result, *__first))\n+\tif (!bool(__binary_pred(*__result, *__first)))\n \t  *++__result = *__first;\n       return ++__result;\n     }\n@@ -1574,7 +1577,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       _ForwardIterator __dest = __first;\n       ++__first;\n       while (++__first != __last)\n-\tif (!__binary_pred(*__dest, *__first))\n+\tif (!bool(__binary_pred(*__dest, *__first)))\n \t  *++__dest = *__first;\n       return ++__dest;\n     }\n@@ -2025,7 +2028,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  while (true)\n \t    if (__first == __last)\n \t      return __first;\n-\t    else if (!__pred(*__last))\n+\t    else if (!bool(__pred(*__last)))\n \t      --__last;\n \t    else\n \t      break;\n@@ -4227,7 +4230,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       __glibcxx_requires_partitioned_pred(__first, __last, __val, __comp);\n \n       _ForwardIterator __i = std::lower_bound(__first, __last, __val, __comp);\n-      return __i != __last && !__comp(__val, *__i);\n+      return __i != __last && !bool(__comp(__val, *__i));\n     }\n \n   // Set algorithms: includes, set_union, set_intersection, set_difference,\n@@ -4875,7 +4878,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       if (__first == __last) return __first;\n       _ForwardIterator __result = __first;\n       while (++__first != __last)\n-\tif (__comp(*__result, *__first)) __result = __first;\n+\tif (__comp(*__result, *__first))\n+\t  __result = __first;\n       return __result;\n     }\n \n@@ -5032,7 +5036,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  if (__comp(*__i, *__ii))\n \t    {\n \t      _BidirectionalIterator __j = __last;\n-\t      while (!__comp(*__i, *--__j))\n+\t      while (!bool(__comp(*__i, *--__j)))\n \t\t{}\n \t      std::iter_swap(__i, __j);\n \t      std::reverse(__ii, __last);\n@@ -5143,7 +5147,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  if (__comp(*__ii, *__i))\n \t    {\n \t      _BidirectionalIterator __j = __last;\n-\t      while (!__comp(*--__j, *__i))\n+\t      while (!bool(__comp(*--__j, *__i)))\n \t\t{}\n \t      std::iter_swap(__i, __j);\n \t      std::reverse(__ii, __last);"}, {"sha": "52d09883699520b66c152cb893a445e8d7f1cab1", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dded9d2ca8e7e0d87b8fc1b9fc37703f7f2cc9c5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dded9d2ca8e7e0d87b8fc1b9fc37703f7f2cc9c5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=dded9d2ca8e7e0d87b8fc1b9fc37703f7f2cc9c5", "patch": "@@ -848,7 +848,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)\n       __glibcxx_requires_valid_range(__first1, __last1);\n \n-      while (__first1 != __last1 && __binary_pred(*__first1, *__first2))\n+      while (__first1 != __last1 && bool(__binary_pred(*__first1, *__first2)))\n         {\n \t  ++__first1;\n \t  ++__first2;\n@@ -912,7 +912,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       __glibcxx_requires_valid_range(__first1, __last1);\n \n       for (; __first1 != __last1; ++__first1, ++__first2)\n-\tif (!__binary_pred(*__first1, *__first2))\n+\tif (!bool(__binary_pred(*__first1, *__first2)))\n \t  return false;\n       return true;\n     }"}]}