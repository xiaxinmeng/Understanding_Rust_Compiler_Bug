{"sha": "13901e4b28c4618bbb8cdde78896dee6a4940fa1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTM5MDFlNGIyOGM0NjE4YmJiOGNkZGU3ODg5NmRlZTZhNDk0MGZhMQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2011-12-04T16:53:17Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2011-12-04T16:53:17Z"}, "message": "type_traits: Doxygen improvements.\n\n\t* include/std/type_traits: Doxygen improvements.\n\t* include/bits/move.h: Likewise.\n\t* include/tr1/type_traits:  Likewise.\n\t* include/tr2/type_traits:  Likewise.\n\t* testsuite/20_util/declval/requirements/1_neg.cc: Adjust dg-error\n\tline numbers\n\t* testsuite/20_util/forward/c_neg.cc: Likewise.\n\t* testsuite/20_util/forward/f_neg.cc: Likewise.\n\t* testsuite/20_util/make_signed/requirements/typedefs_neg.cc:\n\tLikewise.\n\t* testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc:\n\tLikewise.\n\nFrom-SVN: r181993", "tree": {"sha": "4e54624132069aa4798540ba174cb3ff9600d6c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e54624132069aa4798540ba174cb3ff9600d6c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13901e4b28c4618bbb8cdde78896dee6a4940fa1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13901e4b28c4618bbb8cdde78896dee6a4940fa1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13901e4b28c4618bbb8cdde78896dee6a4940fa1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13901e4b28c4618bbb8cdde78896dee6a4940fa1/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "021396710f334405addcabe1b09c274bc123c262", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/021396710f334405addcabe1b09c274bc123c262", "html_url": "https://github.com/Rust-GCC/gccrs/commit/021396710f334405addcabe1b09c274bc123c262"}], "stats": {"total": 129, "additions": 89, "deletions": 40}, "files": [{"sha": "7b66e6a178de8d34acb3e747af6cfccdf80f477a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13901e4b28c4618bbb8cdde78896dee6a4940fa1/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13901e4b28c4618bbb8cdde78896dee6a4940fa1/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=13901e4b28c4618bbb8cdde78896dee6a4940fa1", "patch": "@@ -1,3 +1,18 @@\n+2011-12-04  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\t* include/std/type_traits: Doxygen improvements.\n+\t* include/bits/move.h: Likewise.\n+\t* include/tr1/type_traits:  Likewise.\n+\t* include/tr2/type_traits:  Likewise.\n+\t* testsuite/20_util/declval/requirements/1_neg.cc: Adjust dg-error\n+\tline numbers\n+\t* testsuite/20_util/forward/c_neg.cc: Likewise.\n+\t* testsuite/20_util/forward/f_neg.cc: Likewise.\n+\t* testsuite/20_util/make_signed/requirements/typedefs_neg.cc:\n+\tLikewise.\n+\t* testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc:\n+\tLikewise.\n+\n 2011-12-04  Markus Trippelsdorf <markus@trippelsdorf.de>\n             Jonathan Wakely  <jwakely.gcc@gmail.com>\n "}, {"sha": "353c466d8fce366ef75ed33cb35c6ce2b7e8cce9", "filename": "libstdc++-v3/include/bits/move.h", "status": "modified", "additions": 39, "deletions": 11, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13901e4b28c4618bbb8cdde78896dee6a4940fa1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13901e4b28c4618bbb8cdde78896dee6a4940fa1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h?ref=13901e4b28c4618bbb8cdde78896dee6a4940fa1", "patch": "@@ -38,6 +38,10 @@ namespace std _GLIBCXX_VISIBILITY(default)\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // Used, in C++03 mode too, by allocators, etc.\n+  /**\n+   *  @brief Same as C++11 std::addressof\n+   *  @ingroup utilities\n+   */\n   template<typename _Tp>\n     inline _Tp*\n     __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT\n@@ -55,13 +59,30 @@ _GLIBCXX_END_NAMESPACE_VERSION\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n-  \n-  /// forward (as per N3143)\n+\n+  /**\n+   *  @addtogroup utilities\n+   *  @{\n+   */\n+\n+  // forward (as per N3143)\n+  /**\n+   *  @brief  Forward an lvalue.\n+   *  @return The parameter cast to the specified type.\n+   *\n+   *  This function is used to implement \"perfect forwarding\".\n+   */\n   template<typename _Tp>\n     constexpr _Tp&&\n     forward(typename std::remove_reference<_Tp>::type& __t) noexcept\n     { return static_cast<_Tp&&>(__t); }\n \n+  /**\n+   *  @brief  Forward an rvalue.\n+   *  @return The parameter cast to the specified type.\n+   *\n+   *  This function is used to implement \"perfect forwarding\".\n+   */\n   template<typename _Tp>\n     constexpr _Tp&&\n     forward(typename std::remove_reference<_Tp>::type&& __t) noexcept\n@@ -72,10 +93,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   /**\n-   *  @brief Move a value.\n-   *  @ingroup utilities\n+   *  @brief  Convert a value to an rvalue.\n    *  @param  __t  A thing of arbitrary type.\n-   *  @return Same, moved.\n+   *  @return The parameter cast to an rvalue-reference to allow moving it.\n   */\n   template<typename _Tp>\n     constexpr typename std::remove_reference<_Tp>::type&&\n@@ -89,24 +109,25 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n                     is_copy_constructible<_Tp>>::type { };\n \n   /**\n-   *  @brief Move unless it could throw and the type is copyable.\n-   *  @ingroup utilities\n+   *  @brief  Conditionally convert a value to an rvalue.\n    *  @param  __x  A thing of arbitrary type.\n-   *  @return Same, possibly moved.\n+   *  @return The parameter, possibly cast to an rvalue-reference.\n+   *\n+   *  Same as std::move unless the type's move constructor could throw and the\n+   *  type is copyable, in which case an lvalue-reference is returned instead.\n    */\n   template<typename _Tp>\n     inline typename\n     conditional<__move_if_noexcept_cond<_Tp>::value, const _Tp&, _Tp&&>::type\n     move_if_noexcept(_Tp& __x) noexcept\n     { return std::move(__x); }\n \n-  /// declval, from type_traits.\n+  // declval, from type_traits.\n \n   /**\n    *  @brief Returns the actual address of the object or function\n    *         referenced by r, even in the presence of an overloaded\n    *         operator&.\n-   *  @ingroup utilities\n    *  @param  __r  Reference to an object or function.\n    *  @return   The actual address.\n   */\n@@ -115,6 +136,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     addressof(_Tp& __r) noexcept\n     { return std::__addressof(__r); }\n \n+  /// @} group utilities\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n \n@@ -129,9 +151,13 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+  /**\n+   *  @addtogroup utilities\n+   *  @{\n+   */\n+\n   /**\n    *  @brief Swaps two values.\n-   *  @ingroup utilities\n    *  @param  __a  A thing of arbitrary type.\n    *  @param  __b  Another thing of arbitrary type.\n    *  @return   Nothing.\n@@ -154,6 +180,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // _GLIBCXX_RESOLVE_LIB_DEFECTS\n   // DR 809. std::swap should be overloaded for array types.\n+  /// Swap the contents of two arrays.\n   template<typename _Tp, size_t _Nm>\n     inline void\n     swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])\n@@ -165,6 +192,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tswap(__a[__n], __b[__n]);\n     }\n \n+  /// @} group utilities\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n "}, {"sha": "e3ec7ad5de5e2a9d95e228bca9d43e74ddc52c96", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13901e4b28c4618bbb8cdde78896dee6a4940fa1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13901e4b28c4618bbb8cdde78896dee6a4940fa1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=13901e4b28c4618bbb8cdde78896dee6a4940fa1", "patch": "@@ -1,4 +1,4 @@\n-// C++0x type_traits -*- C++ -*-\n+// C++11 type_traits -*- C++ -*-\n \n // Copyright (C) 2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n@@ -42,7 +42,13 @@ namespace std _GLIBCXX_VISIBILITY(default)\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /**\n-   * @addtogroup metaprogramming\n+   * @defgroup metaprogramming Metaprogramming and type traits\n+   * @ingroup utilities\n+   *\n+   * Template utilities for compile-time introspection and modification,\n+   * including type classification traits, type property inspection traits\n+   * and type transformation traits.\n+   *\n    * @{\n    */\n \n@@ -56,10 +62,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       constexpr operator value_type() { return value; }\n     };\n   \n-  /// typedef for true_type\n+  /// The type used as a compile-time boolean with true value.\n   typedef integral_constant<bool, true>     true_type;\n \n-  /// typedef for false_type\n+  /// The type used as a compile-time boolean with false value.\n   typedef integral_constant<bool, false>    false_type;\n \n   template<typename _Tp, _Tp __v>\n@@ -451,7 +457,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct is_compound\n     : public integral_constant<bool, !is_fundamental<_Tp>::value> { };\n \n-  /// is_member_pointer\n   template<typename _Tp>\n     struct __is_member_pointer_helper\n     : public false_type { };\n@@ -460,6 +465,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __is_member_pointer_helper<_Tp _Cp::*>\n     : public true_type { };\n \n+  /// is_member_pointer\n   template<typename _Tp>\n     struct is_member_pointer\n     : public integral_constant<bool, (__is_member_pointer_helper<\n@@ -492,7 +498,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : public integral_constant<bool, __is_trivial(_Tp)>\n     { };\n \n-  /// is_trivially_copyable (still unimplemented)\n+  // is_trivially_copyable (still unimplemented)\n \n   /// is_standard_layout\n   template<typename _Tp>\n@@ -564,6 +570,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename>\n     struct add_rvalue_reference;\n \n+  /**\n+   *  @brief  Utility to simplify expressions used in unevaluated operands\n+   *  @ingroup utilities\n+   */\n   template<typename _Tp>\n     typename add_rvalue_reference<_Tp>::type declval() noexcept;\n \n@@ -1702,9 +1712,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     };\n \n \n-  // Define a nested type if some predicate holds.\n   // Primary template.\n-  /// enable_if\n+  /// Define a member typedef @c type only if a boolean constant is true.\n   template<bool, typename _Tp = void>\n     struct enable_if \n     { };\n@@ -1715,9 +1724,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { typedef _Tp type; };\n \n \n-  // A conditional expression, but for types. If true, first, if false, second.\n   // Primary template.\n-  /// conditional\n+  /// Define a member typedef @c type to one of two argument types.\n   template<bool _Cond, typename _Iftrue, typename _Iffalse>\n     struct conditional\n     { typedef _Iftrue type; };\n@@ -1747,14 +1755,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         common_type<typename common_type<_Tp, _Up>::type, _Vp...>::type type;\n     };\n \n-  /// underlying_type\n+  /// The underlying type of an enum.\n   template<typename _Tp>\n     struct underlying_type\n     {\n       typedef __underlying_type(_Tp) type;\n     };\n \n-  /// declval\n   template<typename _Tp>\n     struct __declval_protector\n     {\n@@ -1892,7 +1899,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t<typename remove_cv<_Tp>::type>::value>  \\\n     { };\n \n-  // @} group metaprogramming\n+  /// @} group metaprogramming\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n "}, {"sha": "f15123ace5bd3be1c9bc8aac6855af0bc3ed8063", "filename": "libstdc++-v3/include/tr1/type_traits", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13901e4b28c4618bbb8cdde78896dee6a4940fa1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13901e4b28c4618bbb8cdde78896dee6a4940fa1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits?ref=13901e4b28c4618bbb8cdde78896dee6a4940fa1", "patch": "@@ -1,6 +1,6 @@\n // TR1 type_traits -*- C++ -*-\n \n-// Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+// Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -41,10 +41,7 @@ namespace tr1\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /**\n-   * @defgroup metaprogramming Type Traits\n-   * @ingroup utilities\n-   *\n-   * Compile time type transformation and information.\n+   * @addtogroup metaprogramming\n    * @{\n    */\n \n@@ -682,6 +679,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #undef _DEFINE_SPEC_2_HELPER\n #undef _DEFINE_SPEC\n \n+  /// @} group metaprogramming\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n }\n }"}, {"sha": "9c301b30a01eddfe2fcb6debd5df312668906bc3", "filename": "libstdc++-v3/include/tr2/type_traits", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13901e4b28c4618bbb8cdde78896dee6a4940fa1/libstdc%2B%2B-v3%2Finclude%2Ftr2%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13901e4b28c4618bbb8cdde78896dee6a4940fa1/libstdc%2B%2B-v3%2Finclude%2Ftr2%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr2%2Ftype_traits?ref=13901e4b28c4618bbb8cdde78896dee6a4940fa1", "patch": "@@ -40,9 +40,7 @@ namespace tr2\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /**\n-   * @defgroup metaprogramming Type Traits\n-   * @ingroup utilities\n-   *\n+   * @addtogroup metaprogramming\n    * @{\n    */\n \n@@ -111,6 +109,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef typelist<__direct_bases(_Tp)...> \ttype;\n     };\n \n+  /// @} group metaprogramming\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n }\n }"}, {"sha": "298e93e23d9203c8b040a52e18cc6540f87c7c75", "filename": "libstdc++-v3/testsuite/20_util/declval/requirements/1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13901e4b28c4618bbb8cdde78896dee6a4940fa1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13901e4b28c4618bbb8cdde78896dee6a4940fa1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc?ref=13901e4b28c4618bbb8cdde78896dee6a4940fa1", "patch": "@@ -19,7 +19,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 1769 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 1776 }\n \n #include <utility>\n "}, {"sha": "01128245d7e7c9fbccaa96039c9d6eae699d85f4", "filename": "libstdc++-v3/testsuite/20_util/forward/c_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13901e4b28c4618bbb8cdde78896dee6a4940fa1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fforward%2Fc_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13901e4b28c4618bbb8cdde78896dee6a4940fa1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fforward%2Fc_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fforward%2Fc_neg.cc?ref=13901e4b28c4618bbb8cdde78896dee6a4940fa1", "patch": "@@ -18,7 +18,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 69 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 90 }\n \n #include <list>\n "}, {"sha": "9e5b78a04db3e8dcd41c7ba6222e9a316ed6f451", "filename": "libstdc++-v3/testsuite/20_util/forward/f_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13901e4b28c4618bbb8cdde78896dee6a4940fa1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fforward%2Ff_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13901e4b28c4618bbb8cdde78896dee6a4940fa1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fforward%2Ff_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fforward%2Ff_neg.cc?ref=13901e4b28c4618bbb8cdde78896dee6a4940fa1", "patch": "@@ -1,7 +1,7 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n \n-// Copyright (C) 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -18,7 +18,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 69 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 90 }\n \n #include <utility>\n "}, {"sha": "d2ebf1653193256e367e1c70fbc0f6207a671635", "filename": "libstdc++-v3/testsuite/20_util/make_signed/requirements/typedefs_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13901e4b28c4618bbb8cdde78896dee6a4940fa1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13901e4b28c4618bbb8cdde78896dee6a4940fa1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc?ref=13901e4b28c4618bbb8cdde78896dee6a4940fa1", "patch": "@@ -48,5 +48,5 @@ void test01()\n // { dg-error \"required from here\" \"\" { target *-*-* } 40 }\n // { dg-error \"required from here\" \"\" { target *-*-* } 42 }\n \n-// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1555 }\n-// { dg-error \"declaration of\" \"\" { target *-*-* } 1519 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1565 }\n+// { dg-error \"declaration of\" \"\" { target *-*-* } 1529 }"}, {"sha": "c0ef55bd25fd63917030e47965b8e45ee5c43b2a", "filename": "libstdc++-v3/testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13901e4b28c4618bbb8cdde78896dee6a4940fa1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13901e4b28c4618bbb8cdde78896dee6a4940fa1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc?ref=13901e4b28c4618bbb8cdde78896dee6a4940fa1", "patch": "@@ -48,5 +48,5 @@ void test01()\n // { dg-error \"required from here\" \"\" { target *-*-* } 40 }\n // { dg-error \"required from here\" \"\" { target *-*-* } 42 }\n \n-// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1473 }\n-// { dg-error \"declaration of\" \"\" { target *-*-* } 1437 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1483 }\n+// { dg-error \"declaration of\" \"\" { target *-*-* } 1447 }"}]}