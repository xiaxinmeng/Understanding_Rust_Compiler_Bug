{"sha": "e944354ec05891474b0d204c6c239c04ee7b527b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTk0NDM1NGVjMDU4OTE0NzRiMGQyMDRjNmMyMzljMDRlZTdiNTI3Yg==", "commit": {"author": {"name": "Robin Dapp", "email": "rdapp@linux.ibm.com", "date": "2019-08-26T10:18:24Z"}, "committer": {"name": "Robin Dapp", "email": "rdapp@gcc.gnu.org", "date": "2019-08-26T10:18:24Z"}, "message": "[PATCH 1/2] Allow folding all statements.\n\nThis patch allows users of the substitute_and_fold_engine to\nenable folding all statements.  It is now enabled for VRP which\nis needed for the match.pd pattern in patch 2/2.\n\nThe loop versioning pass was missing one case when\ndeconstructing addresses that would only be triggered after\nthis patch for me:\nIt could handle addition and subsequent convert/nop but not\na convert/nop directly.  This would cause the hash to be\ncalculated differently and, in turn, cause the pass to miss\na versioning opportunity.  Fixed this by adding the missing\ncase.\n\n--\n\ngcc/ChangeLog:\n\n2019-08-26  Robin Dapp  <rdapp@linux.ibm.com>\n\n        * gimple-loop-versioning.cc (loop_versioning::record_address_fragment):\n        Add nop_convert case.\n        * tree-ssa-propagate.c (substitute_and_fold_dom_walker::before_dom_children):\n        Fold all statements if requested.\n        * tree-ssa-propagate.h (class substitute_and_fold_engine):\n        Allow to fold all statements.\n        * tree-vrp.c (class vrp_folder):\n        Let substitute_and_fold_engine fold all statements.\n\nFrom-SVN: r274923", "tree": {"sha": "7d6c6f10d0b328443395adfe609be168ff339997", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d6c6f10d0b328443395adfe609be168ff339997"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e944354ec05891474b0d204c6c239c04ee7b527b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e944354ec05891474b0d204c6c239c04ee7b527b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e944354ec05891474b0d204c6c239c04ee7b527b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e944354ec05891474b0d204c6c239c04ee7b527b/comments", "author": {"login": "rdapp-ibm", "id": 80318053, "node_id": "MDQ6VXNlcjgwMzE4MDUz", "avatar_url": "https://avatars.githubusercontent.com/u/80318053?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rdapp-ibm", "html_url": "https://github.com/rdapp-ibm", "followers_url": "https://api.github.com/users/rdapp-ibm/followers", "following_url": "https://api.github.com/users/rdapp-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/rdapp-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rdapp-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rdapp-ibm/subscriptions", "organizations_url": "https://api.github.com/users/rdapp-ibm/orgs", "repos_url": "https://api.github.com/users/rdapp-ibm/repos", "events_url": "https://api.github.com/users/rdapp-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/rdapp-ibm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bf05a3bbb58b355899ccabe861a06e85b7abe6e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf05a3bbb58b355899ccabe861a06e85b7abe6e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf05a3bbb58b355899ccabe861a06e85b7abe6e4"}], "stats": {"total": 33, "additions": 32, "deletions": 1}, "files": [{"sha": "f5acb32756baf47ac9f37f3e50eb22fca6973aad", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e944354ec05891474b0d204c6c239c04ee7b527b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e944354ec05891474b0d204c6c239c04ee7b527b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e944354ec05891474b0d204c6c239c04ee7b527b", "patch": "@@ -1,3 +1,14 @@\n+2019-08-26  Robin Dapp  <rdapp@linux.ibm.com>\n+\n+\t* gimple-loop-versioning.cc (loop_versioning::record_address_fragment):\n+\tAdd nop_convert case.\n+\t* tree-ssa-propagate.c (substitute_and_fold_dom_walker::before_dom_children):\n+\tFold all statements if requested.\n+\t* tree-ssa-propagate.h (class substitute_and_fold_engine):\n+\tAllow to fold all statements.\n+\t* tree-vrp.c (class vrp_folder):\n+\tLet substitute_and_fold_engine fold all statements.\n+\n 2019-08-26  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/91526"}, {"sha": "35344b7b44827bf6eca7a4a5c9c946ff58046958", "filename": "gcc/gimple-loop-versioning.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e944354ec05891474b0d204c6c239c04ee7b527b/gcc%2Fgimple-loop-versioning.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e944354ec05891474b0d204c6c239c04ee7b527b/gcc%2Fgimple-loop-versioning.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-loop-versioning.cc?ref=e944354ec05891474b0d204c6c239c04ee7b527b", "patch": "@@ -1266,6 +1266,12 @@ loop_versioning::record_address_fragment (gimple *stmt,\n \t\t  continue;\n \t\t}\n \t    }\n+\t  if (CONVERT_EXPR_CODE_P (code))\n+\t    {\n+\t      tree op1 = gimple_assign_rhs1 (assign);\n+\t      address->terms[i].expr = strip_casts (op1);\n+\t      continue;\n+\t    }\n \t}\n       i += 1;\n     }"}, {"sha": "7172ef8b4e68ad06cf7799bcd1d7cba3830acf83", "filename": "gcc/tree-ssa-propagate.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e944354ec05891474b0d204c6c239c04ee7b527b/gcc%2Ftree-ssa-propagate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e944354ec05891474b0d204c6c239c04ee7b527b/gcc%2Ftree-ssa-propagate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-propagate.c?ref=e944354ec05891474b0d204c6c239c04ee7b527b", "patch": "@@ -814,7 +814,6 @@ ssa_propagation_engine::ssa_propagate (void)\n   ssa_prop_fini ();\n }\n \n-\n /* Return true if STMT is of the form 'mem_ref = RHS', where 'mem_ref'\n    is a non-volatile pointer dereference, a structure reference or a\n    reference to a single _DECL.  Ignore volatile memory references\n@@ -1071,6 +1070,14 @@ substitute_and_fold_dom_walker::before_dom_children (basic_block bb)\n \t  stmt = gsi_stmt (i);\n \t  gimple_set_modified (stmt, true);\n \t}\n+      /* Also fold if we want to fold all statements.  */\n+      else if (substitute_and_fold_engine->fold_all_stmts\n+\t  && fold_stmt (&i, follow_single_use_edges))\n+\t{\n+\t  did_replace = true;\n+\t  stmt = gsi_stmt (i);\n+\t  gimple_set_modified (stmt, true);\n+\t}\n \n       /* Some statements may be simplified using propagator\n \t specific information.  Do this before propagating"}, {"sha": "f79c2ffadf3ca65f29d88fff6cb2d62c5ca69774", "filename": "gcc/tree-ssa-propagate.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e944354ec05891474b0d204c6c239c04ee7b527b/gcc%2Ftree-ssa-propagate.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e944354ec05891474b0d204c6c239c04ee7b527b/gcc%2Ftree-ssa-propagate.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-propagate.h?ref=e944354ec05891474b0d204c6c239c04ee7b527b", "patch": "@@ -100,13 +100,19 @@ class ssa_propagation_engine\n class substitute_and_fold_engine\n {\n  public:\n+  substitute_and_fold_engine (bool fold_all_stmts = false)\n+    : fold_all_stmts (fold_all_stmts) { }\n   virtual ~substitute_and_fold_engine (void) { }\n   virtual bool fold_stmt (gimple_stmt_iterator *) { return false; }\n   virtual tree get_value (tree) { return NULL_TREE; }\n \n   bool substitute_and_fold (basic_block = NULL);\n   bool replace_uses_in (gimple *);\n   bool replace_phi_args_in (gphi *);\n+\n+  /* Users like VRP can set this when they want to perform\n+     folding for every propagation.  */\n+  bool fold_all_stmts;\n };\n \n #endif /* _TREE_SSA_PROPAGATE_H  */"}, {"sha": "4145bcc83a9da4ff7ecd90db480427cd017a8739", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e944354ec05891474b0d204c6c239c04ee7b527b/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e944354ec05891474b0d204c6c239c04ee7b527b/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=e944354ec05891474b0d204c6c239c04ee7b527b", "patch": "@@ -6415,6 +6415,7 @@ vrp_prop::visit_phi (gphi *phi)\n class vrp_folder : public substitute_and_fold_engine\n {\n  public:\n+  vrp_folder () : substitute_and_fold_engine (/* Fold all stmts.  */ true) {  }\n   tree get_value (tree) FINAL OVERRIDE;\n   bool fold_stmt (gimple_stmt_iterator *) FINAL OVERRIDE;\n   bool fold_predicate_in (gimple_stmt_iterator *);"}]}