{"sha": "bfabddb6c0307307e963bf1388fcad0b8a00ba5c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmZhYmRkYjZjMDMwNzMwN2U5NjNiZjEzODhmY2FkMGI4YTAwYmE1Yw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2006-07-07T16:30:36Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2006-07-07T16:30:36Z"}, "message": "re PR middle-end/28268 (ICE with simple vector operations)\n\n2006-07-07   Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/28268\n\t* tree.h (build_one_cst): Declare.\n\t* tree.c (build_one_cst): New function.\n\t* tree-ssa-math-opts.c (get_constant_one): Remove.\n\t(insert_reciprocals): Use build_one_cst.\n\t* fold-const.c (fold_plusminus_mult): Likewise.\n\n\t* gcc.dg/torture/pr28268.c: New testcase.\n\nFrom-SVN: r115263", "tree": {"sha": "6a1baa8ebb8584cddfcf0a2c3567372718ab3933", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a1baa8ebb8584cddfcf0a2c3567372718ab3933"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bfabddb6c0307307e963bf1388fcad0b8a00ba5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfabddb6c0307307e963bf1388fcad0b8a00ba5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfabddb6c0307307e963bf1388fcad0b8a00ba5c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfabddb6c0307307e963bf1388fcad0b8a00ba5c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c6d0959c4b87ca27e45d827baf9b53071513a00b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6d0959c4b87ca27e45d827baf9b53071513a00b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6d0959c4b87ca27e45d827baf9b53071513a00b"}], "stats": {"total": 99, "additions": 67, "deletions": 32}, "files": [{"sha": "df98b7b7ccdd29b67f0a8e1a030920b1ebc2235c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfabddb6c0307307e963bf1388fcad0b8a00ba5c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfabddb6c0307307e963bf1388fcad0b8a00ba5c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bfabddb6c0307307e963bf1388fcad0b8a00ba5c", "patch": "@@ -1,3 +1,12 @@\n+2006-07-07   Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/28268\n+\t* tree.h (build_one_cst): Declare.\n+\t* tree.c (build_one_cst): New function.\n+\t* tree-ssa-math-opts.c (get_constant_one): Remove.\n+\t(insert_reciprocals): Use build_one_cst.\n+\t* fold-const.c (fold_plusminus_mult): Likewise.\n+\n 2006-07-07  Roger Sayle  <roger@eyesopen.com>\n \n \t* pointer-set.c (pointer_set_destroy): Correct whitespace."}, {"sha": "277bd324d8d56c5382803b09e90fdca0fa189c9d", "filename": "gcc/fold-const.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfabddb6c0307307e963bf1388fcad0b8a00ba5c/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfabddb6c0307307e963bf1388fcad0b8a00ba5c/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=bfabddb6c0307307e963bf1388fcad0b8a00ba5c", "patch": "@@ -6727,7 +6727,7 @@ fold_plusminus_mult_expr (enum tree_code code, tree type, tree arg0, tree arg1)\n   else\n     {\n       arg00 = arg0;\n-      arg01 = fold_convert (type, integer_one_node);\n+      arg01 = build_one_cst (type);\n     }\n   if (TREE_CODE (arg1) == MULT_EXPR)\n     {\n@@ -6737,7 +6737,7 @@ fold_plusminus_mult_expr (enum tree_code code, tree type, tree arg0, tree arg1)\n   else\n     {\n       arg10 = arg1;\n-      arg11 = fold_convert (type, integer_one_node);\n+      arg11 = build_one_cst (type);\n     }\n   same = NULL_TREE;\n "}, {"sha": "6ce58b2447280125a8d37c1e318a4f9f9bb6cd55", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfabddb6c0307307e963bf1388fcad0b8a00ba5c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfabddb6c0307307e963bf1388fcad0b8a00ba5c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bfabddb6c0307307e963bf1388fcad0b8a00ba5c", "patch": "@@ -1,3 +1,8 @@\n+2006-07-07   Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/28268\n+\t* gcc.dg/torture/pr28268.c: New testcase.\n+\n 2006-07-07  Steve Ellcey  <sje@cup.hp.com>\n \n \tPR c++/27019"}, {"sha": "f143c0804e2c45d8741c4a5253e1e344d8efd4e3", "filename": "gcc/testsuite/gcc.dg/torture/pr28268.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfabddb6c0307307e963bf1388fcad0b8a00ba5c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr28268.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfabddb6c0307307e963bf1388fcad0b8a00ba5c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr28268.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr28268.c?ref=bfabddb6c0307307e963bf1388fcad0b8a00ba5c", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+\n+int __attribute__((vector_size(8))) a;\n+\n+void foo()\n+{\n+    a += a*a;\n+}"}, {"sha": "1ff06285de873d73d9a8746a7601d6033638cdab", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 1, "deletions": 30, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfabddb6c0307307e963bf1388fcad0b8a00ba5c/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfabddb6c0307307e963bf1388fcad0b8a00ba5c/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=bfabddb6c0307307e963bf1388fcad0b8a00ba5c", "patch": "@@ -279,35 +279,6 @@ is_division_by (tree use_stmt, tree def)\n \t && TREE_OPERAND (TREE_OPERAND (use_stmt, 1), 1) == def;\n }\n \n-/* Return the LHS of a RDIV_EXPR that computes a reciprocal in type TYPE.  */\n-static tree\n-get_constant_one (tree type)\n-{\n-  tree scalar, cst;\n-  int i;\n-\n-  gcc_assert (FLOAT_TYPE_P (type));\n-  switch (TREE_CODE (type))\n-    {\n-    case REAL_TYPE:\n-      return build_real (type, dconst1);\n-\n-    case VECTOR_TYPE:\n-      scalar = build_real (TREE_TYPE (type), dconst1);\n-\n-      /* Create 'vect_cst_ = {cst,cst,...,cst}'  */\n-      cst = NULL_TREE;\n-      for (i = TYPE_VECTOR_SUBPARTS (type); --i >= 0; )\n-        cst = tree_cons (NULL_TREE, scalar, cst);\n-\n-      return build_vector (type, cst);\n-\n-    default:\n-      /* Complex operations have been split already.  */\n-      gcc_unreachable ();\n-    }\n-}\n-\n /* Walk the subset of the dominator tree rooted at OCC, setting the\n    RECIP_DEF field to a definition of 1.0 / DEF that can be used in\n    the given basic block.  The field may be left NULL, of course,\n@@ -333,7 +304,7 @@ insert_reciprocals (block_stmt_iterator *def_bsi, struct occurrence *occ,\n       type = TREE_TYPE (def);\n       recip_def = make_rename_temp (type, \"reciptmp\");\n       new_stmt = build2 (MODIFY_EXPR, void_type_node, recip_def,\n-\t\t         fold_build2 (RDIV_EXPR, type, get_constant_one (type),\n+\t\t         fold_build2 (RDIV_EXPR, type, build_one_cst (type),\n \t\t\t\t      def));\n   \n   "}, {"sha": "1c2a33d19308ceac1f42dbd134f83eaaf6ef68b0", "filename": "gcc/tree.c", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfabddb6c0307307e963bf1388fcad0b8a00ba5c/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfabddb6c0307307e963bf1388fcad0b8a00ba5c/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=bfabddb6c0307307e963bf1388fcad0b8a00ba5c", "patch": "@@ -1161,6 +1161,47 @@ build_complex (tree type, tree real, tree imag)\n   return t;\n }\n \n+/* Return a constant of arithmetic type TYPE which is the\n+   multiplcative identity of the set TYPE.  */\n+\n+tree\n+build_one_cst (tree type)\n+{\n+  switch (TREE_CODE (type))\n+    {\n+    case INTEGER_TYPE: case ENUMERAL_TYPE: case BOOLEAN_TYPE:\n+    case POINTER_TYPE: case REFERENCE_TYPE:\n+    case OFFSET_TYPE:\n+      return build_int_cst (type, 1);\n+\n+    case REAL_TYPE:\n+      return build_real (type, dconst1);\n+\n+    case VECTOR_TYPE:\n+      {\n+\ttree scalar, cst;\n+\tint i;\n+\n+\tscalar = build_one_cst (TREE_TYPE (type));\n+\n+\t/* Create 'vect_cst_ = {cst,cst,...,cst}'  */\n+\tcst = NULL_TREE;\n+\tfor (i = TYPE_VECTOR_SUBPARTS (type); --i >= 0; )\n+\t  cst = tree_cons (NULL_TREE, scalar, cst);\n+\n+\treturn build_vector (type, cst);\n+      }\n+\n+    case COMPLEX_TYPE:\n+      return build_complex (type,\n+\t\t\t    build_one_cst (TREE_TYPE (type)),\n+\t\t\t    fold_convert (TREE_TYPE (type), integer_zero_node));\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+\n /* Build a BINFO with LEN language slots.  */\n \n tree"}, {"sha": "49b5be2dbf77ada023751aaaabf3016808e3068b", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfabddb6c0307307e963bf1388fcad0b8a00ba5c/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfabddb6c0307307e963bf1388fcad0b8a00ba5c/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=bfabddb6c0307307e963bf1388fcad0b8a00ba5c", "patch": "@@ -3534,6 +3534,7 @@ extern tree build_constructor_single (tree, tree, tree);\n extern tree build_constructor_from_list (tree, tree);\n extern tree build_real_from_int_cst (tree, tree);\n extern tree build_complex (tree, tree, tree);\n+extern tree build_one_cst (tree);\n extern tree build_string (int, const char *);\n extern tree build_tree_list_stat (tree, tree MEM_STAT_DECL);\n #define build_tree_list(t,q) build_tree_list_stat(t,q MEM_STAT_INFO)"}]}