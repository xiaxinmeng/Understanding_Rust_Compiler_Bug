{"sha": "713f2fd923442b1be620a44240ddf786ae0ab476", "node_id": "C_kwDOANBUbNoAKDcxM2YyZmQ5MjM0NDJiMWJlNjIwYTQ0MjQwZGRmNzg2YWUwYWI0NzY", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-06-20T11:40:50Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-06-20T13:01:57Z"}, "message": "middle-end/106027 - fix types in needle folding\n\nThe fold_to_nonsharp_ineq_using_bound folding ends up creating invalid\ntyped IL which confuses later foldings.  The following fixes that.\n\n2022-06-20  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/106027\n\t* fold-const.cc (fold_to_nonsharp_ineq_using_bound): Use the\n\ttype of the prevailing comparison for the new comparison type.\n\t(fold_binary_loc): Use proper types for the A < X && A + 1 > Y\n\tto A < X && A >= Y folding.\n\n\t* gcc.dg/pr106027.c: New testcase.", "tree": {"sha": "f2b59bec9334fd4af01d51744f815282cfd353b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2b59bec9334fd4af01d51744f815282cfd353b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/713f2fd923442b1be620a44240ddf786ae0ab476", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/713f2fd923442b1be620a44240ddf786ae0ab476", "html_url": "https://github.com/Rust-GCC/gccrs/commit/713f2fd923442b1be620a44240ddf786ae0ab476", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/713f2fd923442b1be620a44240ddf786ae0ab476/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86882d9feb6a534325d7162216696266898e36d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86882d9feb6a534325d7162216696266898e36d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86882d9feb6a534325d7162216696266898e36d0"}], "stats": {"total": 18, "additions": 15, "deletions": 3}, "files": [{"sha": "99021a82df4977b179b45db04e3083012c63067a", "filename": "gcc/fold-const.cc", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/713f2fd923442b1be620a44240ddf786ae0ab476/gcc%2Ffold-const.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/713f2fd923442b1be620a44240ddf786ae0ab476/gcc%2Ffold-const.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.cc?ref=713f2fd923442b1be620a44240ddf786ae0ab476", "patch": "@@ -7530,7 +7530,7 @@ tree_swap_operands_p (const_tree arg0, const_tree arg1)\n static tree\n fold_to_nonsharp_ineq_using_bound (location_t loc, tree ineq, tree bound)\n {\n-  tree a, typea, type = TREE_TYPE (ineq), a1, diff, y;\n+  tree a, typea, type = TREE_TYPE (bound), a1, diff, y;\n \n   if (TREE_CODE (bound) == LT_EXPR)\n     a = TREE_OPERAND (bound, 0);\n@@ -12037,11 +12037,15 @@ fold_binary_loc (location_t loc, enum tree_code code, tree type,\n \t{\n \t  tem = fold_to_nonsharp_ineq_using_bound (loc, arg0, arg1);\n \t  if (tem && !operand_equal_p (tem, arg0, 0))\n-\t    return fold_build2_loc (loc, code, type, tem, arg1);\n+\t    return fold_convert (type,\n+\t\t\t\t fold_build2_loc (loc, code, TREE_TYPE (arg1),\n+\t\t\t\t\t\t  tem, arg1));\n \n \t  tem = fold_to_nonsharp_ineq_using_bound (loc, arg1, arg0);\n \t  if (tem && !operand_equal_p (tem, arg1, 0))\n-\t    return fold_build2_loc (loc, code, type, arg0, tem);\n+\t    return fold_convert (type,\n+\t\t\t\t fold_build2_loc (loc, code, TREE_TYPE (arg0),\n+\t\t\t\t\t\t  arg0, tem));\n \t}\n \n       if ((tem = fold_truth_andor (loc, code, type, arg0, arg1, op0, op1))"}, {"sha": "735205fb25247106869603939303c2ab7eb536f2", "filename": "gcc/testsuite/gcc.dg/pr106027.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/713f2fd923442b1be620a44240ddf786ae0ab476/gcc%2Ftestsuite%2Fgcc.dg%2Fpr106027.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/713f2fd923442b1be620a44240ddf786ae0ab476/gcc%2Ftestsuite%2Fgcc.dg%2Fpr106027.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr106027.c?ref=713f2fd923442b1be620a44240ddf786ae0ab476", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+\n+int\n+foo (unsigned int x, int y)\n+{\n+  return x <= (((y != y) < 0) ? y < 1 : 0);\n+}"}]}