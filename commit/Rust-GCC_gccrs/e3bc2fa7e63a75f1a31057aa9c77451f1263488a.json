{"sha": "e3bc2fa7e63a75f1a31057aa9c77451f1263488a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTNiYzJmYTdlNjNhNzVmMWEzMTA1N2FhOWM3NzQ1MWYxMjYzNDg4YQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2008-10-15T06:42:00Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2008-10-15T06:42:00Z"}, "message": "Revert unintended commit.\n\nFrom-SVN: r141128", "tree": {"sha": "e54ba6d87418a5c238d9d857a44d841e06733cc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e54ba6d87418a5c238d9d857a44d841e06733cc1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3bc2fa7e63a75f1a31057aa9c77451f1263488a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3bc2fa7e63a75f1a31057aa9c77451f1263488a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3bc2fa7e63a75f1a31057aa9c77451f1263488a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3bc2fa7e63a75f1a31057aa9c77451f1263488a/comments", "author": null, "committer": null, "parents": [{"sha": "cb6064f5059e2261cec180ffd17ac973715a638d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb6064f5059e2261cec180ffd17ac973715a638d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb6064f5059e2261cec180ffd17ac973715a638d"}], "stats": {"total": 27, "additions": 5, "deletions": 22}, "files": [{"sha": "e9757454f21923c1197d5098b2e9d841949c396c", "filename": "gcc/tree-switch-conversion.c", "status": "modified", "additions": 5, "deletions": 22, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3bc2fa7e63a75f1a31057aa9c77451f1263488a/gcc%2Ftree-switch-conversion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3bc2fa7e63a75f1a31057aa9c77451f1263488a/gcc%2Ftree-switch-conversion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-switch-conversion.c?ref=e3bc2fa7e63a75f1a31057aa9c77451f1263488a", "patch": "@@ -296,29 +296,12 @@ check_final_bb (void)\n \t{\n \t  basic_block bb = gimple_phi_arg_edge (phi, i)->src;\n \n-\t  if (bb == info.switch_bb\n-\t      || (single_pred_p (bb) && single_pred (bb) == info.switch_bb))\n+\t  if ((bb == info.switch_bb\n+\t       || (single_pred_p (bb) && single_pred (bb) == info.switch_bb))\n+\t      && !is_gimple_ip_invariant (gimple_phi_arg_def (phi, i)))\n \t    {\n-\t      tree reloc, val;\n-\n-\t      val = gimple_phi_arg_def (phi, i);\n-\t      if (!is_gimple_ip_invariant (val))\n-\t\t{\n-\t\t  info.reason = \"   Non-invariant value from a case\\n\";\n-\t\t  return false; /* Non-invariant argument.  */\n-\t\t}\n-\t      reloc = initializer_constant_valid_p (val, TREE_TYPE (val));\n-\t      if ((flag_pic && reloc != null_pointer_node)\n-\t\t  || (!flag_pic && reloc == NULL_TREE))\n-\t\t{\n-\t\t  if (reloc)\n-\t\t    info.reason\n-\t\t      = \"   Value from a case would need runtime relocations\\n\";\n-\t\t  else\n-\t\t    info.reason\n-\t\t      = \"   Value from a case is not a valid initializer\\n\";\n-\t\t  return false;\n-\t\t}\n+\t      info.reason = \"   Non-invariant value from a case\\n\";\n+\t      return false; /* Non-invariant argument.  */\n \t    }\n \t}\n     }"}]}