{"sha": "4c81f958b3f1b2a41e94d505c34b6d911502bb15", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGM4MWY5NThiM2YxYjJhNDFlOTRkNTA1YzM0YjZkOTExNTAyYmIxNQ==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2015-12-09T13:47:19Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2015-12-09T13:47:19Z"}, "message": "[Patch AArch64] Reinstate CANNOT_CHANGE_MODE_CLASS to fix pr67609\n\ngcc/\n\n\tPR rtl-optimization/67609\n\t* config/aarch64/aarch64-protos.h\n\t(aarch64_cannot_change_mode_class): Bring back.\n\t* config/aarch64/aarch64.c\n\t(aarch64_cannot_change_mode_class): Likewise.\n\t* config/aarch64/aarch64.h (CANNOT_CHANGE_MODE_CLASS): Likewise.\n\t* config/aarch64/aarch64.md (aarch64_movdi_<mode>low): Use\n\tzero_extract rather than truncate.\n\t(aarch64_movdi_<mode>high): Likewise.\n\ngcc/testsuite/\n\n\tPR rtl-optimization/67609\n\t* gcc.dg/torture/pr67609.c: New.\n\nFrom-SVN: r231455", "tree": {"sha": "9d5c6037c38f9e1aad1f3b3a94c7657a04e32f77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d5c6037c38f9e1aad1f3b3a94c7657a04e32f77"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c81f958b3f1b2a41e94d505c34b6d911502bb15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c81f958b3f1b2a41e94d505c34b6d911502bb15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c81f958b3f1b2a41e94d505c34b6d911502bb15", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c81f958b3f1b2a41e94d505c34b6d911502bb15/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "08554c26c4541be7d6ec0fec4d8810e97f56caab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08554c26c4541be7d6ec0fec4d8810e97f56caab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08554c26c4541be7d6ec0fec4d8810e97f56caab"}], "stats": {"total": 81, "additions": 77, "deletions": 4}, "files": [{"sha": "56864aec60a3b17d45ff478dfcad37f0380a5f28", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c81f958b3f1b2a41e94d505c34b6d911502bb15/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c81f958b3f1b2a41e94d505c34b6d911502bb15/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4c81f958b3f1b2a41e94d505c34b6d911502bb15", "patch": "@@ -1,3 +1,14 @@\n+2015-12-09  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* config/aarch64/aarch64-protos.h\n+\t(aarch64_cannot_change_mode_class): Bring back.\n+\t* config/aarch64/aarch64.c\n+\t(aarch64_cannot_change_mode_class): Likewise.\n+\t* config/aarch64/aarch64.h (CANNOT_CHANGE_MODE_CLASS): Likewise.\n+\t* config/aarch64/aarch64.md (aarch64_movdi_<mode>low): Use\n+\tzero_extract rather than truncate.\n+\t(aarch64_movdi_<mode>high): Likewise.\n+\n 2015-12-09  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/68786"}, {"sha": "549a89d1f691b32efbc74359f045b5df74765f0e", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c81f958b3f1b2a41e94d505c34b6d911502bb15/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c81f958b3f1b2a41e94d505c34b6d911502bb15/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=4c81f958b3f1b2a41e94d505c34b6d911502bb15", "patch": "@@ -269,6 +269,9 @@ int aarch64_get_condition_code (rtx);\n bool aarch64_bitmask_imm (HOST_WIDE_INT val, machine_mode);\n int aarch64_branch_cost (bool, bool);\n enum aarch64_symbol_type aarch64_classify_symbolic_expression (rtx);\n+bool aarch64_cannot_change_mode_class (machine_mode,\n+\t\t\t\t       machine_mode,\n+\t\t\t\t       enum reg_class);\n bool aarch64_const_vec_all_same_int_p (rtx, HOST_WIDE_INT);\n bool aarch64_constant_address_p (rtx);\n bool aarch64_expand_movmem (rtx *);"}, {"sha": "1e1b864d86573a1f024b333be82327fa69afec16", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c81f958b3f1b2a41e94d505c34b6d911502bb15/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c81f958b3f1b2a41e94d505c34b6d911502bb15/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=4c81f958b3f1b2a41e94d505c34b6d911502bb15", "patch": "@@ -12712,6 +12712,24 @@ aarch64_vectorize_vec_perm_const_ok (machine_mode vmode,\n   return ret;\n }\n \n+/* Implement target hook CANNOT_CHANGE_MODE_CLASS.  */\n+bool\n+aarch64_cannot_change_mode_class (machine_mode from,\n+\t\t\t\t  machine_mode to,\n+\t\t\t\t  enum reg_class rclass)\n+{\n+  /* We cannot allow word_mode subregs of full vector modes.\n+     Otherwise the middle-end will assume it's ok to store to\n+     (subreg:DI (reg:TI 100) 0) in order to modify only the low 64 bits\n+     of the 128-bit register.  However, after reload the subreg will\n+     be dropped leaving a plain DImode store.  See PR67609 for a more\n+     detailed dicussion.  In all other cases, we want to be permissive\n+     and return false.  */\n+  return (reg_classes_intersect_p (FP_REGS, rclass)\n+\t  && GET_MODE_SIZE (to) == UNITS_PER_WORD\n+\t  && GET_MODE_SIZE (from) > UNITS_PER_WORD);\n+}\n+\n rtx\n aarch64_reverse_mask (enum machine_mode mode)\n {"}, {"sha": "e2ead511076a2192eb79b79ec0a72777f82af35c", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c81f958b3f1b2a41e94d505c34b6d911502bb15/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c81f958b3f1b2a41e94d505c34b6d911502bb15/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=4c81f958b3f1b2a41e94d505c34b6d911502bb15", "patch": "@@ -828,6 +828,9 @@ do {\t\t\t\t\t\t\t\t\t     \\\n   extern void  __aarch64_sync_cache_range (void *, void *);\t\\\n   __aarch64_sync_cache_range (beg, end)\n \n+#define CANNOT_CHANGE_MODE_CLASS(FROM, TO, CLASS)\t\\\n+  aarch64_cannot_change_mode_class (FROM, TO, CLASS)\n+\n #define SHIFT_COUNT_TRUNCATED !TARGET_SIMD\n \n /* Choose appropriate mode for caller saves, so we do the minimum"}, {"sha": "dd93012039d466714082e9e445d6ddb09d52ea11", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c81f958b3f1b2a41e94d505c34b6d911502bb15/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c81f958b3f1b2a41e94d505c34b6d911502bb15/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=4c81f958b3f1b2a41e94d505c34b6d911502bb15", "patch": "@@ -4681,7 +4681,8 @@\n \n (define_insn \"aarch64_movdi_<mode>low\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-        (truncate:DI (match_operand:TX 1 \"register_operand\" \"w\")))]\n+\t(zero_extract:DI (match_operand:TX 1 \"register_operand\" \"w\")\n+\t\t\t (const_int 64) (const_int 0)))]\n   \"TARGET_FLOAT && (reload_completed || reload_in_progress)\"\n   \"fmov\\\\t%x0, %d1\"\n   [(set_attr \"type\" \"f_mrc\")\n@@ -4690,9 +4691,8 @@\n \n (define_insn \"aarch64_movdi_<mode>high\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-        (truncate:DI\n-\t  (lshiftrt:TX (match_operand:TX 1 \"register_operand\" \"w\")\n-\t\t       (const_int 64))))]\n+\t(zero_extract:DI (match_operand:TX 1 \"register_operand\" \"w\")\n+\t\t\t (const_int 64) (const_int 64)))]\n   \"TARGET_FLOAT && (reload_completed || reload_in_progress)\"\n   \"fmov\\\\t%x0, %1.d[1]\"\n   [(set_attr \"type\" \"f_mrc\")"}, {"sha": "a99f32079e22185a58efcd6a6dfc2c92e802004f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c81f958b3f1b2a41e94d505c34b6d911502bb15/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c81f958b3f1b2a41e94d505c34b6d911502bb15/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4c81f958b3f1b2a41e94d505c34b6d911502bb15", "patch": "@@ -1,3 +1,8 @@\n+2015-12-09  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\tPR rtl-optimization/67609\n+\t* gcc.dg/torture/pr67609.c: New.\n+\n 2015-12-09  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/68583"}, {"sha": "817857dc52d581c748670e91d7a62175c461f4ea", "filename": "gcc/testsuite/gcc.dg/torture/pr67609.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c81f958b3f1b2a41e94d505c34b6d911502bb15/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr67609.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c81f958b3f1b2a41e94d505c34b6d911502bb15/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr67609.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr67609.c?ref=4c81f958b3f1b2a41e94d505c34b6d911502bb15", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run } */\n+\n+typedef union\n+{\n+  double v[2];\n+  double s __attribute__ ((vector_size (16)));\n+} data;\n+\n+data reg;\n+\n+void __attribute__ ((noinline))\n+set_lower (double b)\n+{\n+  data stack_var;\n+  double __attribute__ ((vector_size (16))) one = { 1.0, 1.0 };\n+  stack_var.s = reg.s;\n+  stack_var.s += one;\n+  stack_var.v[0] += b;\n+  reg.s = stack_var.s;\n+}\n+\n+int\n+main (int argc, char ** argv)\n+{\n+  reg.v[0] = 1.0;\n+  reg.v[1] = 1.0;\n+  /* reg should contain { 1.0, 1.0 }.  */\n+  set_lower (2.0);\n+  /* reg should contain { 4.0, 2.0 }.  */\n+  if ((int) reg.v[0] != 4 || (int) reg.v[1] != 2)\n+    __builtin_abort ();\n+  return 0;\n+}"}]}