{"sha": "5b57aeabb63dd3546d8f98cdd6f6984558168ba6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWI1N2FlYWJiNjNkZDM1NDZkOGY5OGNkZDZmNjk4NDU1ODE2OGJhNg==", "commit": {"author": {"name": "Ovidiu Predescu", "email": "ovidiu@gcc.gnu.org", "date": "2001-03-12T06:24:50Z"}, "committer": {"name": "Ovidiu Predescu", "email": "ovidiu@gcc.gnu.org", "date": "2001-03-12T06:24:50Z"}, "message": "Added.\n\nFrom-SVN: r40397", "tree": {"sha": "eec4988cc5bbb2fe0a264d8205241c8999fd8ffa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eec4988cc5bbb2fe0a264d8205241c8999fd8ffa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b57aeabb63dd3546d8f98cdd6f6984558168ba6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b57aeabb63dd3546d8f98cdd6f6984558168ba6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b57aeabb63dd3546d8f98cdd6f6984558168ba6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/comments", "author": null, "committer": null, "parents": [{"sha": "d5ae21aace3605eacb04951287177aa13bc12daf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5ae21aace3605eacb04951287177aa13bc12daf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5ae21aace3605eacb04951287177aa13bc12daf"}], "stats": {"total": 1961, "additions": 1961, "deletions": 0}, "files": [{"sha": "979aebb0158ff3d2b463dc4672d6548b55c7addf", "filename": "gcc/testsuite/objc/execute/IMP.m", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2FIMP.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2FIMP.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2FIMP.m?ref=5b57aeabb63dd3546d8f98cdd6f6984558168ba6", "patch": "@@ -0,0 +1,39 @@\n+/* Contributed by Nicola Pero - Fri Mar  9 19:39:15 CET 2001 */\n+#include <objc/objc.h>\n+#include <objc/objc-api.h>\n+\n+/* Test getting and calling the IMP of a method */\n+\n+@interface TestClass\n+{\n+  Class isa;\n+}\n+- (int) next: (int)a;\n+@end\n+\n+@implementation TestClass\n+- (int) next: (int)a\n+{\n+  return a + 1;\n+}\n+@end\n+\n+\n+int main (void)\n+{\n+  Class class;\n+  SEL selector;\n+  int (* imp) (id, SEL, int);\n+  \n+  class = objc_get_class (\"TestClass\");\n+  selector = @selector (next:);\n+  imp = (int (*)(id, SEL, int))method_get_imp \n+    (class_get_class_method (class, selector));\n+  \n+  if (imp (class, selector, 5) != 6)\n+    {\n+      abort ();\n+    }\n+\n+  return 0;\n+}"}, {"sha": "20203b51711195aa865969c225deb472a4124237", "filename": "gcc/testsuite/objc/execute/_cmd.m", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2F_cmd.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2F_cmd.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2F_cmd.m?ref=5b57aeabb63dd3546d8f98cdd6f6984558168ba6", "patch": "@@ -0,0 +1,30 @@\n+/* Contributed by Nicola Pero - Fri Mar  9 19:39:15 CET 2001 */\n+#include <objc/objc.h>\n+#include <objc/objc-api.h>\n+\n+/* Test the hidden argument _cmd to method calls */\n+\n+@interface TestClass \n+{\n+  Class isa;\n+}\n++ (const char*) method;\n+@end\n+\n+@implementation TestClass\n++ (const char*) method;\n+{\n+  return sel_get_name (_cmd);\n+}\n+@end\n+\n+\n+int main (void)\n+{\n+  if (strcmp ([TestClass method], \"method\"))\n+    {\n+      abort ();\n+    }\n+\n+  return 0;\n+}"}, {"sha": "2c024f5ba7e6b7b087c6be2a62155dcddee3f7f3", "filename": "gcc/testsuite/objc/execute/accessing_ivars.m", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Faccessing_ivars.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Faccessing_ivars.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Faccessing_ivars.m?ref=5b57aeabb63dd3546d8f98cdd6f6984558168ba6", "patch": "@@ -0,0 +1,55 @@\n+/* Contributed by Nicola Pero - Thu Mar  8 16:27:46 CET 2001 */\n+#include <objc/objc.h>\n+#include <objc/objc-api.h>\n+#include <objc/Object.h>\n+\n+/* Test that by using -> we can access ivars of other objects of the same \n+   class */\n+\n+@interface TestClass : Object\n+{\n+  int value;\n+}\n+- (int) value;\n+- (int) setValue: (int)number;\n+- (void) takeValueFrom: (TestClass *)object;\n+@end\n+\n+@implementation TestClass : Object\n+{\n+  int value;\n+}\n+- (int) value\n+{ \n+  return value;\n+}\n+- (int) setValue: (int)number\n+{\n+  value = number; \n+}\n+- (void) takeValueFrom: (TestClass *)object\n+{\n+  value = object->value;\n+}\n+@end\n+\n+int main (void)\n+{\n+  TestClass *a;\n+  TestClass *b;\n+\n+  a = [TestClass new];\n+  [a setValue: 10];\n+  \n+  b = [TestClass new];\n+  [b setValue: -10];\n+\n+  [b takeValueFrom: a];\n+\n+  if ([b value] != [a value])\n+    {\n+      abort ();\n+    }\n+\n+  return 0;\n+}"}, {"sha": "a28cfc3abb86fba3b85437c9868dbb90c647cccf", "filename": "gcc/testsuite/objc/execute/class-1.m", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-1.m?ref=5b57aeabb63dd3546d8f98cdd6f6984558168ba6", "patch": "@@ -0,0 +1,23 @@\n+/* Contributed by Nicola Pero - Tue Mar  6 23:05:53 CET 2001 */\n+#include <objc/objc.h>\n+#include <objc/objc-api.h>\n+\n+/* Tests creating a RootClass */\n+\n+@interface RootClass\n+{\n+  Class isa;\n+}\n+@end\n+\n+@implementation RootClass\n+@end\n+\n+#include \"class-tests-1.h\"\n+\n+int main (void)\n+{\n+  test_class_with_superclass (\"RootClass\", \"\");\n+\n+  return 0;\n+}"}, {"sha": "3d9697c0d86f3d2399297e3aaf7d5226f4c0196e", "filename": "gcc/testsuite/objc/execute/class-10.m", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-10.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-10.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-10.m?ref=5b57aeabb63dd3546d8f98cdd6f6984558168ba6", "patch": "@@ -0,0 +1,77 @@\n+/* Contributed by Nicola Pero - Tue Mar  6 23:05:53 CET 2001 */\n+#include <objc/objc.h>\n+#include <objc/objc-api.h>\n+\n+/* Tests creating a root class and a subclass with an ivar and\n+   accessor methods and a subclass overriding the superclass'\n+   implementation, and using self to call another method of itself */\n+\n+@interface RootClass\n+{\n+  Class isa;\n+}\n+@end\n+\n+@implementation RootClass\n+@end\n+\n+@interface SubClass : RootClass\n+{\n+  int state;\n+}\n+- (void) setState: (int)number;\n+- (int) state;\n+@end\n+\n+@implementation SubClass\n+- (void) setState: (int)number\n+{\n+  state = number;\n+}\n+- (int) state\n+{\n+  return state;\n+}\n+@end\n+\n+@interface SubSubClass : SubClass\n+- (int) shift;\n+@end\n+\n+@implementation SubSubClass\n+- (int) state\n+{\n+  return state + [self shift];\n+}\n+- (int) shift\n+{\n+  return 1;\n+}\n+@end\n+\n+#include \"class-tests-1.h\"\n+#define TYPE_OF_OBJECT_WITH_ACCESSOR_METHOD SubClass *\n+#include \"class-tests-2.h\"\n+\n+int main (void)\n+{\n+  SubClass *object;\n+  SubSubClass *sub_object;\n+\n+  test_class_with_superclass (\"SubClass\", \"RootClass\");\n+  test_that_class_has_instance_method (\"SubClass\", @selector (setState:));\n+  test_that_class_has_instance_method (\"SubClass\", @selector (state));\n+\n+  test_class_with_superclass (\"SubSubClass\", \"SubClass\");\n+  test_that_class_has_instance_method (\"SubSubClass\", @selector (setState:));\n+  test_that_class_has_instance_method (\"SubSubClass\", @selector (state));\n+  test_that_class_has_instance_method (\"SubSubClass\", @selector (shift));\n+  \n+  object = class_create_instance (objc_lookup_class (\"SubClass\"));\n+  test_accessor_method (object, 0, -1, -1, 1, 1);\n+\n+  sub_object = class_create_instance (objc_lookup_class (\"SubSubClass\"));\n+  test_accessor_method (sub_object, 1, -1, 0, 1, 2);\n+\n+  return 0;\n+}"}, {"sha": "902db2b9a33d9ab48c65ddc4061f1bb253a125b1", "filename": "gcc/testsuite/objc/execute/class-11.m", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-11.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-11.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-11.m?ref=5b57aeabb63dd3546d8f98cdd6f6984558168ba6", "patch": "@@ -0,0 +1,81 @@\n+/* Contributed by Nicola Pero - Tue Mar  6 23:05:53 CET 2001 */\n+#include <objc/objc.h>\n+#include <objc/objc-api.h>\n+\n+/* Tests creating a root class and a subclass with an ivar and\n+   accessor methods and a subclass overriding the superclass'\n+   implementation and using self to call another method of itself - in\n+   a category */\n+\n+@interface RootClass\n+{\n+  Class isa;\n+}\n+@end\n+\n+@implementation RootClass\n+@end\n+\n+@interface SubClass : RootClass\n+{\n+  int state;\n+}\n+- (void) setState: (int)number;\n+- (int) state;\n+@end\n+\n+@implementation SubClass\n+- (void) setState: (int)number\n+{\n+  state = number;\n+}\n+- (int) state\n+{\n+  return state;\n+}\n+@end\n+\n+@interface SubSubClass : SubClass\n+- (int) shift;\n+@end\n+\n+@implementation SubSubClass\n+- (int) shift\n+{\n+  return 1;\n+}\n+@end\n+\n+@implementation SubSubClass (Additions)\n+- (int) state\n+{\n+  return state + [self shift];\n+}\n+@end\n+\n+#include \"class-tests-1.h\"\n+#define TYPE_OF_OBJECT_WITH_ACCESSOR_METHOD SubClass *\n+#include \"class-tests-2.h\"\n+\n+int main (void)\n+{\n+  SubClass *object;\n+  SubSubClass *sub_object;\n+\n+  test_class_with_superclass (\"SubClass\", \"RootClass\");\n+  test_that_class_has_instance_method (\"SubClass\", @selector (setState:));\n+  test_that_class_has_instance_method (\"SubClass\", @selector (state));\n+\n+  test_class_with_superclass (\"SubSubClass\", \"SubClass\");\n+  test_that_class_has_instance_method (\"SubSubClass\", @selector (setState:));\n+  test_that_class_has_instance_method (\"SubSubClass\", @selector (state));\n+  test_that_class_has_instance_method (\"SubSubClass\", @selector (shift));\n+  \n+  object = class_create_instance (objc_lookup_class (\"SubClass\"));\n+  test_accessor_method (object, 0, -1, -1, 1, 1);\n+\n+  sub_object = class_create_instance (objc_lookup_class (\"SubSubClass\"));\n+  test_accessor_method (sub_object, 1, -1, 0, 1, 2);\n+\n+  return 0;\n+}"}, {"sha": "e65611df06b5cdb598afdebf6139f12744ffaee1", "filename": "gcc/testsuite/objc/execute/class-12.m", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-12.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-12.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-12.m?ref=5b57aeabb63dd3546d8f98cdd6f6984558168ba6", "patch": "@@ -0,0 +1,50 @@\n+/* Contributed by Nicola Pero - Tue Mar  6 23:05:53 CET 2001 */\n+#include <objc/objc.h>\n+#include <objc/objc-api.h>\n+\n+/* Tests creating a root class and a subclass with a class methods */\n+\n+@interface RootClass\n+{\n+  Class isa;\n+}\n+@end\n+\n+@implementation RootClass\n+@end\n+\n+static int class_variable = 0;\n+\n+@interface SubClass : RootClass\n++ (void) setState: (int)number;\n++ (int) state;\n+@end\n+\n+@implementation SubClass\n++ (void) setState: (int)number\n+{\n+  class_variable = number;\n+}\n++ (int) state\n+{\n+  return class_variable;\n+}\n+@end\n+\n+#include \"class-tests-1.h\"\n+#define TYPE_OF_OBJECT_WITH_ACCESSOR_METHOD Class\n+#include \"class-tests-2.h\"\n+\n+int main (void)\n+{\n+  Class class;\n+\n+  test_class_with_superclass (\"SubClass\", \"RootClass\");\n+  test_that_class_has_class_method (\"SubClass\", @selector (setState:));\n+  test_that_class_has_class_method (\"SubClass\", @selector (state));\n+\n+  class = objc_lookup_class (\"SubClass\");\n+  test_accessor_method (class, 0, -1, -1, 1, 1);\n+\n+  return 0;\n+}"}, {"sha": "0d87afd95087a875d8dd85b99d248c0ccbdd366a", "filename": "gcc/testsuite/objc/execute/class-13.m", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-13.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-13.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-13.m?ref=5b57aeabb63dd3546d8f98cdd6f6984558168ba6", "patch": "@@ -0,0 +1,71 @@\n+/* Contributed by Nicola Pero - Tue Mar  6 23:05:53 CET 2001 */\n+#include <objc/objc.h>\n+#include <objc/objc-api.h>\n+\n+/* Tests creating a root class and a subclass with a class accessor\n+   methods and a subclass overriding the superclass' implementation\n+   but reusing it with super */\n+\n+@interface RootClass\n+{\n+  Class isa;\n+}\n+@end\n+\n+@implementation RootClass\n+@end\n+\n+static int class_variable = 0;\n+\n+@interface SubClass : RootClass\n++ (void) setState: (int)number;\n++ (int) state;\n+@end\n+\n+@implementation SubClass\n++ (void) setState: (int)number\n+{\n+  class_variable = number;\n+}\n++ (int) state\n+{\n+  return class_variable;\n+}\n+@end\n+\n+@interface SubSubClass : SubClass\n+@end\n+\n+@implementation SubSubClass\n++ (int) state\n+{\n+  return [super state] + 1;\n+}\n+@end\n+\n+#include \"class-tests-1.h\"\n+#define TYPE_OF_OBJECT_WITH_ACCESSOR_METHOD Class\n+#include \"class-tests-2.h\"\n+\n+int main (void)\n+{\n+  Class class;\n+  Class sub_class;\n+\n+  test_class_with_superclass (\"SubClass\", \"RootClass\");\n+  test_that_class_has_class_method (\"SubClass\", @selector (setState:));\n+  test_that_class_has_class_method (\"SubClass\", @selector (state));\n+\n+  test_class_with_superclass (\"SubSubClass\", \"SubClass\");\n+  test_that_class_has_class_method (\"SubSubClass\", @selector (setState:));\n+  test_that_class_has_class_method (\"SubSubClass\", @selector (state));\n+  \n+  class = objc_lookup_class (\"SubClass\");\n+  test_accessor_method (class, 0, -1, -1, 1, 1);\n+\n+  sub_class = objc_lookup_class (\"SubSubClass\");\n+  class_variable = 0;\n+  test_accessor_method (sub_class, 1, -1, 0, 1, 2);\n+\n+  return 0;\n+}"}, {"sha": "2827031358cb65941b305e52bafbf32b540a33f7", "filename": "gcc/testsuite/objc/execute/class-14.m", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-14.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-14.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-14.m?ref=5b57aeabb63dd3546d8f98cdd6f6984558168ba6", "patch": "@@ -0,0 +1,76 @@\n+/* Contributed by Nicola Pero - Tue Mar  6 23:05:53 CET 2001 */\n+#include <objc/objc.h>\n+#include <objc/objc-api.h>\n+\n+/* Tests creating a root class and a subclass with a class accessor\n+   methods and a subclass overriding the superclass' implementation,\n+   and using self to call another method of itself */\n+\n+@interface RootClass\n+{\n+  Class isa;\n+}\n+@end\n+\n+@implementation RootClass\n+@end\n+\n+static int class_variable = 0;\n+\n+@interface SubClass : RootClass\n++ (void) setState: (int)number;\n++ (int) state;\n+@end\n+\n+@implementation SubClass\n++ (void) setState: (int)number\n+{\n+  class_variable = number;\n+}\n++ (int) state\n+{\n+  return class_variable;\n+}\n+@end\n+\n+@interface SubSubClass : SubClass\n++ (int) shift;\n+@end\n+\n+@implementation SubSubClass\n++ (int) state\n+{\n+  return class_variable + [self shift];\n+}\n++ (int) shift\n+{\n+  return 1;\n+}\n+@end\n+\n+#include \"class-tests-1.h\"\n+#define TYPE_OF_OBJECT_WITH_ACCESSOR_METHOD Class\n+#include \"class-tests-2.h\"\n+\n+int main (void)\n+{\n+  Class class, sub_class;\n+\n+  test_class_with_superclass (\"SubClass\", \"RootClass\");\n+  test_that_class_has_class_method (\"SubClass\", @selector (setState:));\n+  test_that_class_has_class_method (\"SubClass\", @selector (state));\n+\n+  test_class_with_superclass (\"SubSubClass\", \"SubClass\");\n+  test_that_class_has_class_method (\"SubSubClass\", @selector (setState:));\n+  test_that_class_has_class_method (\"SubSubClass\", @selector (state));\n+  test_that_class_has_class_method (\"SubSubClass\", @selector (shift));\n+  \n+  class = objc_lookup_class (\"SubClass\");\n+  test_accessor_method (class, 0, -1, -1, 1, 1);\n+\n+  sub_class = objc_lookup_class (\"SubSubClass\");\n+  class_variable = 0;\n+  test_accessor_method (sub_class, 1, -1, 0, 1, 2);\n+\n+  return 0;\n+}"}, {"sha": "cb8b47fa1a3e7b42f2251ccd2a91bca389dc9b88", "filename": "gcc/testsuite/objc/execute/class-2.m", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-2.m?ref=5b57aeabb63dd3546d8f98cdd6f6984558168ba6", "patch": "@@ -0,0 +1,29 @@\n+/* Contributed by Nicola Pero - Tue Mar  6 23:05:53 CET 2001 */\n+#include <objc/objc.h>\n+#include <objc/objc-api.h>\n+\n+/* Tests creating a root class and a subclass */\n+\n+@interface RootClass\n+{\n+  Class isa;\n+}\n+@end\n+\n+@implementation RootClass\n+@end\n+\n+@interface SubClass : RootClass\n+@end\n+\n+@implementation SubClass\n+@end\n+\n+#include \"class-tests-1.h\"\n+\n+int main (void)\n+{\n+  test_class_with_superclass (\"SubClass\", \"RootClass\");\n+\n+  return 0;\n+}"}, {"sha": "dbe68bf903708557168fe7cbe9ac893d2e487e28", "filename": "gcc/testsuite/objc/execute/class-3.m", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-3.m?ref=5b57aeabb63dd3546d8f98cdd6f6984558168ba6", "patch": "@@ -0,0 +1,43 @@\n+/* Contributed by Nicola Pero - Tue Mar  6 23:05:53 CET 2001 */\n+#include <objc/objc.h>\n+#include <objc/objc-api.h>\n+\n+/* Tests creating a root class and a minimal subclass tree */\n+\n+@interface RootClass\n+{\n+  Class isa;\n+}\n+@end\n+\n+@implementation RootClass\n+@end\n+\n+@interface SubClassA : RootClass\n+@end\n+\n+@implementation SubClassA\n+@end\n+\n+@interface SubClassB : RootClass\n+@end\n+\n+@implementation SubClassB\n+@end\n+\n+@interface SubSubClass : SubClassA\n+@end\n+\n+@implementation SubSubClass\n+@end\n+\n+#include \"class-tests-1.h\"\n+\n+int main (void)\n+{\n+  test_class_with_superclass (\"SubClassA\", \"RootClass\");\n+  test_class_with_superclass (\"SubClassB\", \"RootClass\");\n+  test_class_with_superclass (\"SubSubClass\", \"SubClassA\");\n+\n+  return 0;\n+}"}, {"sha": "0ae723c035b13d9cbe908848241a6d6857ac40cb", "filename": "gcc/testsuite/objc/execute/class-4.m", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-4.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-4.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-4.m?ref=5b57aeabb63dd3546d8f98cdd6f6984558168ba6", "patch": "@@ -0,0 +1,52 @@\n+/* Contributed by Nicola Pero - Tue Mar  6 23:05:53 CET 2001 */\n+#include <objc/objc.h>\n+#include <objc/objc-api.h>\n+\n+/* Tests creating a root class and a subclass with an ivar and\n+   accessor methods */\n+\n+@interface RootClass\n+{\n+  Class isa;\n+}\n+@end\n+\n+@implementation RootClass\n+@end\n+\n+@interface SubClass : RootClass\n+{\n+  int state;\n+}\n+- (void) setState: (int)number;\n+- (int) state;\n+@end\n+\n+@implementation SubClass\n+- (void) setState: (int)number\n+{\n+  state = number;\n+}\n+- (int) state\n+{\n+  return state;\n+}\n+@end\n+\n+#include \"class-tests-1.h\"\n+#define TYPE_OF_OBJECT_WITH_ACCESSOR_METHOD SubClass *\n+#include \"class-tests-2.h\"\n+\n+int main (void)\n+{\n+  SubClass *object;\n+\n+  test_class_with_superclass (\"SubClass\", \"RootClass\");\n+  test_that_class_has_instance_method (\"SubClass\", @selector (setState:));\n+  test_that_class_has_instance_method (\"SubClass\", @selector (state));\n+\n+  object = class_create_instance (objc_lookup_class (\"SubClass\"));\n+  test_accessor_method (object, 0, 1, 1, -3, -3);\n+\n+  return 0;\n+}"}, {"sha": "5d5297f62477c9828c7cdd882e0c8e68c1ba2040", "filename": "gcc/testsuite/objc/execute/class-5.m", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-5.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-5.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-5.m?ref=5b57aeabb63dd3546d8f98cdd6f6984558168ba6", "patch": "@@ -0,0 +1,71 @@\n+/* Contributed by Nicola Pero - Tue Mar  6 23:05:53 CET 2001 */\n+#include <objc/objc.h>\n+#include <objc/objc-api.h>\n+\n+/* Tests creating a root class and a subclass with an ivar and\n+   accessor methods and a subclass overriding the superclass'\n+   implementation */\n+\n+@interface RootClass\n+{\n+  Class isa;\n+}\n+@end\n+\n+@implementation RootClass\n+@end\n+\n+@interface SubClass : RootClass\n+{\n+  int state;\n+}\n+- (void) setState: (int)number;\n+- (int) state;\n+@end\n+\n+@implementation SubClass\n+- (void) setState: (int)number\n+{\n+  state = number;\n+}\n+- (int) state\n+{\n+  return state;\n+}\n+@end\n+\n+@interface SubSubClass : SubClass\n+@end\n+\n+@implementation SubSubClass\n+- (int) state\n+{\n+  return state + 1;\n+}\n+@end\n+\n+#include \"class-tests-1.h\"\n+#define TYPE_OF_OBJECT_WITH_ACCESSOR_METHOD SubClass *\n+#include \"class-tests-2.h\"\n+\n+int main (void)\n+{\n+  SubClass *object;\n+  SubSubClass *sub_object;\n+\n+  test_class_with_superclass (\"SubClass\", \"RootClass\");\n+  test_that_class_has_instance_method (\"SubClass\", @selector (setState:));\n+  test_that_class_has_instance_method (\"SubClass\", @selector (state));\n+\n+  test_class_with_superclass (\"SubSubClass\", \"SubClass\");\n+  test_that_class_has_instance_method (\"SubSubClass\", @selector (setState:));\n+  test_that_class_has_instance_method (\"SubSubClass\", @selector (state));\n+  \n+  object = class_create_instance (objc_lookup_class (\"SubClass\"));\n+  test_accessor_method (object, 0, -1, -1, 1, 1);\n+\n+  sub_object = class_create_instance (objc_lookup_class (\"SubSubClass\"));\n+  test_accessor_method (sub_object, 1, -1, 0, 1, 2);\n+\n+  return 0;\n+}"}, {"sha": "f60912aa608b73edc8af837ed002ebb7acd00c33", "filename": "gcc/testsuite/objc/execute/class-6.m", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-6.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-6.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-6.m?ref=5b57aeabb63dd3546d8f98cdd6f6984558168ba6", "patch": "@@ -0,0 +1,71 @@\n+/* Contributed by Nicola Pero - Tue Mar  6 23:05:53 CET 2001 */\n+#include <objc/objc.h>\n+#include <objc/objc-api.h>\n+\n+/* Tests creating a root class and a subclass with an ivar and\n+   accessor methods and a subclass overriding the superclass'\n+   implementation but reusing it with super */\n+\n+@interface RootClass\n+{\n+  Class isa;\n+}\n+@end\n+\n+@implementation RootClass\n+@end\n+\n+@interface SubClass : RootClass\n+{\n+  int state;\n+}\n+- (void) setState: (int)number;\n+- (int) state;\n+@end\n+\n+@implementation SubClass\n+- (void) setState: (int)number\n+{\n+  state = number;\n+}\n+- (int) state\n+{\n+  return state;\n+}\n+@end\n+\n+@interface SubSubClass : SubClass\n+@end\n+\n+@implementation SubSubClass\n+- (int) state\n+{\n+  return [super state] + 1;\n+}\n+@end\n+\n+#include \"class-tests-1.h\"\n+#define TYPE_OF_OBJECT_WITH_ACCESSOR_METHOD SubClass *\n+#include \"class-tests-2.h\"\n+\n+int main (void)\n+{\n+  SubClass *object;\n+  SubSubClass *sub_object;\n+\n+  test_class_with_superclass (\"SubClass\", \"RootClass\");\n+  test_that_class_has_instance_method (\"SubClass\", @selector (setState:));\n+  test_that_class_has_instance_method (\"SubClass\", @selector (state));\n+\n+  test_class_with_superclass (\"SubSubClass\", \"SubClass\");\n+  test_that_class_has_instance_method (\"SubSubClass\", @selector (setState:));\n+  test_that_class_has_instance_method (\"SubSubClass\", @selector (state));\n+  \n+  object = class_create_instance (objc_lookup_class (\"SubClass\"));\n+  test_accessor_method (object, 0, -1, -1, 1, 1);\n+\n+  sub_object = class_create_instance (objc_lookup_class (\"SubSubClass\"));\n+  test_accessor_method (sub_object, 1, -1, 0, 1, 2);\n+\n+  return 0;\n+}"}, {"sha": "9a2fe0cff4191a33e625ebcf1657d3b6173d4356", "filename": "gcc/testsuite/objc/execute/class-7.m", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-7.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-7.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-7.m?ref=5b57aeabb63dd3546d8f98cdd6f6984558168ba6", "patch": "@@ -0,0 +1,59 @@\n+/* Contributed by Nicola Pero - Tue Mar  6 23:05:53 CET 2001 */\n+#include <objc/objc.h>\n+#include <objc/objc-api.h>\n+\n+/* Tests creating a root class and a subclass with an ivar and\n+   accessor methods; accessor methods implemented in a separate\n+   category */\n+\n+@interface RootClass\n+{\n+  Class isa;\n+}\n+@end\n+\n+@implementation RootClass\n+@end\n+\n+@interface SubClass : RootClass\n+{\n+  int state;\n+}\n+@end\n+\n+@implementation SubClass\n+@end\n+\n+@interface SubClass (Additions)\n+- (void) setState: (int)number;\n+- (int) state;\n+@end\n+\n+@implementation SubClass (Additions)\n+- (void) setState: (int)number\n+{\n+  state = number;\n+}\n+- (int) state\n+{\n+  return state;\n+}\n+@end\n+\n+#include \"class-tests-1.h\"\n+#define TYPE_OF_OBJECT_WITH_ACCESSOR_METHOD SubClass *\n+#include \"class-tests-2.h\"\n+\n+int main (void)\n+{\n+  SubClass *object;\n+\n+  test_class_with_superclass (\"SubClass\", \"RootClass\");\n+  test_that_class_has_instance_method (\"SubClass\", @selector (setState:));\n+  test_that_class_has_instance_method (\"SubClass\", @selector (state));\n+\n+  object = class_create_instance (objc_lookup_class (\"SubClass\"));\n+  test_accessor_method (object, 0, 1, 1, -3, -3);\n+\n+  return 0;\n+}"}, {"sha": "fa1118502135d46b34b5af85d69cf57fd0c6443e", "filename": "gcc/testsuite/objc/execute/class-8.m", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-8.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-8.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-8.m?ref=5b57aeabb63dd3546d8f98cdd6f6984558168ba6", "patch": "@@ -0,0 +1,74 @@\n+/* Contributed by Nicola Pero - Tue Mar  6 23:05:53 CET 2001 */\n+#include <objc/objc.h>\n+#include <objc/objc-api.h>\n+\n+/* Tests creating a root class and a subclass with an ivar and\n+   accessor methods and a subclass overriding the superclass'\n+   implementation - in a category */\n+\n+@interface RootClass\n+{\n+  Class isa;\n+}\n+@end\n+\n+@implementation RootClass\n+@end\n+\n+@interface SubClass : RootClass\n+{\n+  int state;\n+}\n+- (void) setState: (int)number;\n+- (int) state;\n+@end\n+\n+@implementation SubClass\n+- (void) setState: (int)number\n+{\n+  state = number;\n+}\n+- (int) state\n+{\n+  return state;\n+}\n+@end\n+\n+@interface SubSubClass : SubClass\n+@end\n+\n+@implementation SubSubClass\n+@end\n+\n+@implementation SubSubClass (Additions)\n+- (int) state\n+{\n+  return state + 1;\n+}\n+@end\n+\n+#include \"class-tests-1.h\"\n+#define TYPE_OF_OBJECT_WITH_ACCESSOR_METHOD SubClass *\n+#include \"class-tests-2.h\"\n+\n+int main (void)\n+{\n+  SubClass *object;\n+  SubSubClass *sub_object;\n+\n+  test_class_with_superclass (\"SubClass\", \"RootClass\");\n+  test_that_class_has_instance_method (\"SubClass\", @selector (setState:));\n+  test_that_class_has_instance_method (\"SubClass\", @selector (state));\n+\n+  test_class_with_superclass (\"SubSubClass\", \"SubClass\");\n+  test_that_class_has_instance_method (\"SubSubClass\", @selector (setState:));\n+  test_that_class_has_instance_method (\"SubSubClass\", @selector (state));\n+  \n+  object = class_create_instance (objc_lookup_class (\"SubClass\"));\n+  test_accessor_method (object, 0, -1, -1, 1, 1);\n+\n+  sub_object = class_create_instance (objc_lookup_class (\"SubSubClass\"));\n+  test_accessor_method (sub_object, 1, -1, 0, 1, 2);\n+\n+  return 0;\n+}"}, {"sha": "bb405fbc982e50da312372c421529f9e9e8be1f8", "filename": "gcc/testsuite/objc/execute/class-9.m", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-9.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-9.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-9.m?ref=5b57aeabb63dd3546d8f98cdd6f6984558168ba6", "patch": "@@ -0,0 +1,74 @@\n+/* Contributed by Nicola Pero - Tue Mar  6 23:05:53 CET 2001 */\n+#include <objc/objc.h>\n+#include <objc/objc-api.h>\n+\n+/* Tests creating a root class and a subclass with an ivar and\n+   accessor methods and a subclass overriding the superclass'\n+   implementation but reusing it with super - in a category */\n+\n+@interface RootClass\n+{\n+  Class isa;\n+}\n+@end\n+\n+@implementation RootClass\n+@end\n+\n+@interface SubClass : RootClass\n+{\n+  int state;\n+}\n+- (void) setState: (int)number;\n+- (int) state;\n+@end\n+\n+@implementation SubClass\n+- (void) setState: (int)number\n+{\n+  state = number;\n+}\n+- (int) state\n+{\n+  return state;\n+}\n+@end\n+\n+@interface SubSubClass : SubClass\n+@end\n+\n+@implementation SubSubClass\n+@end\n+\n+@implementation SubSubClass (Additions)\n+- (int) state\n+{\n+  return [super state] + 1;\n+}\n+@end\n+\n+#include \"class-tests-1.h\"\n+#define TYPE_OF_OBJECT_WITH_ACCESSOR_METHOD SubClass *\n+#include \"class-tests-2.h\"\n+\n+int main (void)\n+{\n+  SubClass *object;\n+  SubSubClass *sub_object;\n+\n+  test_class_with_superclass (\"SubClass\", \"RootClass\");\n+  test_that_class_has_instance_method (\"SubClass\", @selector (setState:));\n+  test_that_class_has_instance_method (\"SubClass\", @selector (state));\n+\n+  test_class_with_superclass (\"SubSubClass\", \"SubClass\");\n+  test_that_class_has_instance_method (\"SubSubClass\", @selector (setState:));\n+  test_that_class_has_instance_method (\"SubSubClass\", @selector (state));\n+  \n+  object = class_create_instance (objc_lookup_class (\"SubClass\"));\n+  test_accessor_method (object, 0, -1, -1, 1, 1);\n+\n+  sub_object = class_create_instance (objc_lookup_class (\"SubSubClass\"));\n+  test_accessor_method (sub_object, 1, -1, 0, 1, 2);\n+\n+  return 0;\n+}"}, {"sha": "f321df4f33573c6ccb71141e0a5ce2dfbcf07d43", "filename": "gcc/testsuite/objc/execute/class-tests-1.h", "status": "added", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-tests-1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-tests-1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-tests-1.h?ref=5b57aeabb63dd3546d8f98cdd6f6984558168ba6", "patch": "@@ -0,0 +1,137 @@\n+/* Contributed by Nicola Pero on Tue Mar  6 23:05:53 CET 2001 */\n+#include <objc/objc.h>\n+#include <objc/objc-api.h>\n+#include <objc/Object.h>\n+#include <stdlib.h>\n+\n+/*\n+ * Standard Tests For Classes and Objects - abort upon failing; return\n+ * normally if all is well.\n+ */\n+\n+/* Test that `class' is a Class */\n+static void test_is_class (Class class)\n+{\n+  if (object_is_class (class) == NO)\n+    {\n+      printf (\"test_is_class failed\\n\");\n+      abort ();\n+    }\n+\n+  if (class_is_class (class) == NO)\n+    {\n+      printf (\"test_is_class failed\\n\");\n+      abort ();\n+    }\n+}\n+\n+/* Test that the superclass of `class' is `superclass' */\n+static void test_superclass (Class class, Class superclass)\n+{\n+  if (class_get_super_class (class) != superclass) \n+    {\n+      printf (\"test_superclass failed\\n\");\n+      abort ();\n+    }\n+}\n+\n+/* Test that the classname of `class' is `classname' */\n+static void test_class_name (Class class, const char *classname)\n+{\n+  if (strcmp (class_get_class_name (class), classname))\n+    {\n+      printf (\"test_class_name failed\\n\");\n+      abort ();\n+    }\n+}\n+\n+/* Test that we can allocate instances of `class' */\n+static void test_allocate (Class class)\n+{\n+  /* The object we create is leaked but who cares, this is only a test */\n+  id object = class_create_instance (class);\n+\n+  if (object == nil)\n+    {\n+      printf (\"test_allocate failed\\n\");\n+      abort ();\n+    }\n+}\n+\n+/* Test that instances of `class' are instances and not classes */\n+static void test_instances (Class class)\n+{\n+  id object = class_create_instance (class);\n+\n+  if (object_is_class (object) == YES)\n+    {\n+      printf (\"test_instances failed\\n\");\n+      abort ();\n+    }\n+}\n+\n+/* Test that we can deallocate instances of `class' */\n+static void test_deallocate (Class class)\n+{\n+  id object = class_create_instance (class);\n+\n+  object_dispose (object);\n+}\n+\n+/* Test that the object and the class agree on what the class is */\n+static void test_object_class (Class class)\n+{\n+  id object = class_create_instance (class);\n+\n+  if (object_get_class (object) != class)\n+    {\n+      printf (\"test_object_class failed\\n\");\n+      abort ();\n+    }\n+}\n+\n+/* Test that the object and the class agree on what the superclass is */\n+static void test_object_super_class (Class class)\n+{\n+  id object = class_create_instance (class);\n+\n+  if (object_get_super_class (object) != class_get_super_class (class))\n+    {\n+      printf (\"test_object_super_class failed\\n\");\n+      abort ();\n+    }\n+}\n+\n+/* \n+ *  Runs all the tests in this file for the specified class \n+ */\n+void test_class_with_superclass (const char *class_name, \n+\t\t\t\t const char *superclass_name)\n+{\n+  Class class; \n+  Class superclass; \n+\n+  /* We need at least a method call before playing with the internals, \n+     so that the runtime will call __objc_resolve_class_links () */\n+  [Object initialize];\n+\n+  /* class_name must be an existing class */\n+  class = objc_lookup_class (class_name);\n+  test_is_class (class);\n+\n+  /* But superclass_name can be \"\", which means `Nil' */\n+  superclass = objc_lookup_class (superclass_name);  \n+  if (superclass != Nil)\n+    {\n+      test_is_class (superclass);\n+    }\n+\n+  /* Now the tests */\n+  test_superclass (class, superclass);\n+  test_class_name (class, class_name);\n+  test_allocate (class);\n+  test_instances (class);\n+  test_deallocate (class);\n+  test_object_class (class);\n+  test_object_super_class (class);\n+}"}, {"sha": "6df91df2b6ea1048e118a168cce708b6569a1c83", "filename": "gcc/testsuite/objc/execute/class-tests-2.h", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-tests-2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-tests-2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fclass-tests-2.h?ref=5b57aeabb63dd3546d8f98cdd6f6984558168ba6", "patch": "@@ -0,0 +1,67 @@\n+/* Contributed by Nicola Pero on Tue Mar  6 23:05:53 CET 2001 */\n+#include <objc/objc.h>\n+#include <objc/objc-api.h>\n+#include <stdlib.h>\n+\n+/*\n+ * Standard Tests For Methods of Classes and Objects - abort upon\n+ * failing; return normally if all is well.  \n+ */\n+\n+/* Test that `class' has an instance method for the selector `selector' */\n+void test_that_class_has_instance_method (const char *class_name, \n+\t\t\t\t\t  SEL selector)\n+{\n+  Class class = objc_lookup_class (class_name);\n+\n+  if (class_get_instance_method (class, selector) == NULL)\n+    {\n+      printf (\"test_class_has_instance_method failed\\n\");\n+      abort ();\n+    }\n+}\n+\n+/* Test that `class' has a class method for the selector `selector' */\n+void test_that_class_has_class_method (const char *class_name, \n+\t\t\t\t       SEL selector)\n+{\n+  Class meta_class = objc_get_meta_class (class_name);\n+\n+  if (class_get_class_method (meta_class, selector) == NULL)\n+    {\n+      printf (\"test_class_has_class_method failed\\n\");\n+      abort ();\n+    }\n+}\n+\n+/* Test the accessor methods (called -state and -setState:) on the\n+   object `object'. */\n+#ifdef TYPE_OF_OBJECT_WITH_ACCESSOR_METHOD\n+void test_accessor_method (TYPE_OF_OBJECT_WITH_ACCESSOR_METHOD object, \n+\t\t\t   int initial_state,\n+\t\t\t   int new_state_0, int expected_result_0,\n+\t\t\t   int new_state_1, int expected_result_1)\n+{\n+  if ([object state] != initial_state)\n+    {\n+      printf (\"test_accessor_method (initial state) failed\\n\");\n+      abort ();\n+    }\n+  \n+  [object setState: new_state_0];\n+  if ([object state] != expected_result_0)\n+    {\n+      printf (\"test_accessor_method (new_state_0) failed\\n\");\n+      abort ();\n+    }  \n+  \n+  [object setState: new_state_1];\n+  if ([object state] != expected_result_1)\n+    {\n+      printf (\"test_accessor_method (new_state_1) failed\\n\");\n+      abort ();\n+    }  \n+}\n+#endif CLASS_WITH_ACCESSOR_METHOD\n+\n+"}, {"sha": "24f47712eecd4d446c0408f752f807f2d4fce761", "filename": "gcc/testsuite/objc/execute/compatibility_alias.m", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fcompatibility_alias.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fcompatibility_alias.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fcompatibility_alias.m?ref=5b57aeabb63dd3546d8f98cdd6f6984558168ba6", "patch": "@@ -0,0 +1,12 @@\n+/* Contributed by Nicola Pero - Thu Mar  8 17:23:59 CET 2001 */\n+#include <objc/objc.h>\n+#include <objc/Object.h>\n+\n+@compatibility_alias MyObject Object;\n+\n+int main (void)\n+{\n+  MyObject *object = [MyObject alloc];\n+\n+  return 0;\n+}"}, {"sha": "3f232c9cdd295d5e090b11eae9c8ec07223f0e95", "filename": "gcc/testsuite/objc/execute/encode-1.m", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fencode-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fencode-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fencode-1.m?ref=5b57aeabb63dd3546d8f98cdd6f6984558168ba6", "patch": "@@ -0,0 +1,31 @@\n+/* Contributed by Nicola Pero - Thu Mar  8 16:27:46 CET 2001 */\n+#include <objc/objc.h>\n+#include <objc/objc-api.h>\n+#include <objc/Object.h>\n+\n+/* Test very simple @encode */\n+\n+int main (void)\n+{\n+  if (strcmp (\"i\", @encode (int)))\n+    {\n+      abort ();\n+    }\n+\n+  if (strcmp (\"@\", @encode (id)))\n+    {\n+      abort ();\n+    }\n+\n+  if (strcmp (\"@\", @encode (Object *)))\n+    {\n+      abort ();\n+    }\n+\n+  if (strcmp (\":\", @encode (SEL)))\n+    {\n+      abort ();\n+    }\n+\n+  return 0;\n+}"}, {"sha": "1fde38b794d657b4a936ec794c459c46083d83b0", "filename": "gcc/testsuite/objc/execute/formal_protocol-1.m", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fformal_protocol-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fformal_protocol-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fformal_protocol-1.m?ref=5b57aeabb63dd3546d8f98cdd6f6984558168ba6", "patch": "@@ -0,0 +1,44 @@\n+/* Contributed by Nicola Pero - Fri Mar  9 21:35:47 CET 2001 */\n+#include <objc/objc.h>\n+#include <objc/Object.h>\n+\n+/* Tests defining a protocol and a class adopting it */\n+\n+@protocol Enabling\n+- (BOOL) isEnabled;\n+- (void) setEnabled: (BOOL)flag;\n+@end\n+\n+@interface Feature : Object <Enabling>\n+{\n+  const char *name;\n+  BOOL isEnabled;\n+}\n+@end\n+\n+@implementation Feature\n+- (BOOL) isEnabled\n+{\n+  return isEnabled;\n+}\n+- (void) setEnabled: (BOOL)flag\n+{\n+  isEnabled = flag;\n+}\n+@end\n+\n+int main (void)\n+{\n+  Feature *object;\n+\n+  object = [Feature new];\n+\n+  [object setEnabled: YES];\n+  if (![object isEnabled])\n+    {\n+      abort ();\n+    }\n+\n+  return 0;\n+}\n+"}, {"sha": "f399555ed1432e4a6fd1f692689c00df99e6c7d1", "filename": "gcc/testsuite/objc/execute/formal_protocol-2.m", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fformal_protocol-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fformal_protocol-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fformal_protocol-2.m?ref=5b57aeabb63dd3546d8f98cdd6f6984558168ba6", "patch": "@@ -0,0 +1,45 @@\n+/* Contributed by Nicola Pero - Fri Mar  9 21:35:47 CET 2001 */\n+#include <objc/objc.h>\n+#include <objc/Object.h>\n+\n+/* Test defining a protocol, a class adopting it, and using an object\n+   of type `id <protocol>'. */\n+\n+@protocol Enabling\n+- (BOOL) isEnabled;\n+- (void) setEnabled: (BOOL)flag;\n+@end\n+\n+@interface Feature : Object <Enabling>\n+{\n+  const char *name;\n+  BOOL isEnabled;\n+}\n+@end\n+\n+@implementation Feature\n+- (BOOL) isEnabled\n+{\n+  return isEnabled;\n+}\n+- (void) setEnabled: (BOOL)flag\n+{\n+  isEnabled = flag;\n+}\n+@end\n+\n+int main (void)\n+{\n+  id <Enabling> object;\n+\n+  object = [Feature new];\n+\n+  [object setEnabled: YES];\n+  if (![object isEnabled])\n+    {\n+      abort ();\n+    }\n+\n+  return 0;\n+}\n+"}, {"sha": "9fc2a768ded1738b512094bbfab9f99f81bde154", "filename": "gcc/testsuite/objc/execute/formal_protocol-3.m", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fformal_protocol-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fformal_protocol-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fformal_protocol-3.m?ref=5b57aeabb63dd3546d8f98cdd6f6984558168ba6", "patch": "@@ -0,0 +1,58 @@\n+/* Contributed by Nicola Pero - Fri Mar  9 21:35:47 CET 2001 */\n+#include <objc/objc.h>\n+#include <objc/Object.h>\n+\n+/* Test defining two protocol, a class adopting both of them, \n+   and using an object of type `id <Protocol1, Protocol2>' */ \n+\n+@protocol Enabling\n+- (BOOL) isEnabled;\n+- (void) setEnabled: (BOOL)flag;\n+@end\n+\n+@protocol Evaluating\n+- (int) importance;\n+@end\n+\n+@interface Feature : Object <Enabling, Evaluating>\n+{\n+  const char *name;\n+  BOOL isEnabled;\n+}\n+@end\n+\n+@implementation Feature\n+- (BOOL) isEnabled\n+{\n+  return isEnabled;\n+}\n+- (void) setEnabled: (BOOL)flag\n+{\n+  isEnabled = flag;\n+}\n+- (int) importance\n+{\n+  return 1000;\n+}\n+@end\n+\n+int main (void)\n+{\n+  id <Enabling, Evaluating> object;\n+\n+  object = [Feature new];\n+\n+  [object setEnabled: YES];\n+  if (![object isEnabled])\n+    {\n+      abort ();\n+    }\n+\n+  if ([object importance] != 1000)\n+    {\n+      abort ();\n+    }\n+\n+  return 0;\n+}\n+"}, {"sha": "af79606c065233808b9606fb088e411b1a8d3526", "filename": "gcc/testsuite/objc/execute/formal_protocol-4.m", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fformal_protocol-4.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fformal_protocol-4.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fformal_protocol-4.m?ref=5b57aeabb63dd3546d8f98cdd6f6984558168ba6", "patch": "@@ -0,0 +1,40 @@\n+/* Contributed by Nicola Pero - Fri Mar  9 21:35:47 CET 2001 */\n+#include <objc/objc.h>\n+#include <objc/Object.h>\n+\n+/* Test defining a protocol, a class adopting it in a category */\n+\n+@protocol Evaluating\n+- (int) importance;\n+@end\n+\n+@interface Feature : Object\n+@end\n+\n+@implementation Feature\n+@end\n+\n+@interface Feature (EvaluatingProtocol) <Evaluating>\n+@end\n+\n+@implementation Feature (EvaluatingProtocol)\n+- (int) importance\n+{\n+  return 1000;\n+}\n+@end\n+\n+int main (void)\n+{\n+  id <Evaluating> object;\n+\n+  object = [Feature new];\n+\n+  if ([object importance] != 1000)\n+    {\n+      abort ();\n+    }\n+\n+  return 0;\n+}\n+"}, {"sha": "3d9f778fe63a684e9588e997b9294b516d16ed85", "filename": "gcc/testsuite/objc/execute/formal_protocol-5.m", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fformal_protocol-5.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fformal_protocol-5.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fformal_protocol-5.m?ref=5b57aeabb63dd3546d8f98cdd6f6984558168ba6", "patch": "@@ -0,0 +1,33 @@\n+/* Contributed by Nicola Pero - Fri Mar  9 21:35:47 CET 2001 */\n+#include <objc/objc.h>\n+#include <objc/Protocol.h>\n+\n+/* Test defining a protocol, and accessing it using @protocol */\n+\n+@protocol Evaluating\n+- (int) importance;\n+@end\n+\n+/* A class adopting the protocol */\n+@interface Test <Evaluating>\n+@end\n+\n+@implementation Test\n+- (int) importance\n+{\n+  return 1000;\n+}\n+@end\n+\n+int main (void)\n+{\n+  Protocol *protocol = @protocol (Evaluating);\n+\n+  if (strcmp ([protocol name], \"Evaluating\"))\n+    {\n+      abort ();\n+    }\n+\n+  return 0;\n+}\n+"}, {"sha": "7873fdcdf393e59dd9220932312f839a9842f020", "filename": "gcc/testsuite/objc/execute/formal_protocol-6.m", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fformal_protocol-6.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fformal_protocol-6.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fformal_protocol-6.m?ref=5b57aeabb63dd3546d8f98cdd6f6984558168ba6", "patch": "@@ -0,0 +1,25 @@\n+/* Contributed by Nicola Pero - Fri Mar  9 21:35:47 CET 2001 */\n+#include <objc/objc.h>\n+#include <objc/Protocol.h>\n+\n+/* Test defining a protocol, and accessing it using @protocol */\n+\n+@protocol Evaluating\n+- (int) importance;\n+@end\n+\n+/* Without a class adopting the protocol - this doesn't work \n+   with gcc-2.95.2 as well */\n+\n+int main (void)\n+{\n+  Protocol *protocol = @protocol (Evaluating);\n+\n+  if (strcmp ([protocol name], \"Evaluating\"))\n+    {\n+      abort ();\n+    }\n+\n+  return 0;\n+}\n+"}, {"sha": "14d7594e163933fc8ebc6ccbdbad2d27fefb9637", "filename": "gcc/testsuite/objc/execute/formal_protocol-7.m", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fformal_protocol-7.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fformal_protocol-7.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fformal_protocol-7.m?ref=5b57aeabb63dd3546d8f98cdd6f6984558168ba6", "patch": "@@ -0,0 +1,44 @@\n+/* Contributed by Nicola Pero - Fri Mar  9 21:35:47 CET 2001 */\n+#include <objc/objc.h>\n+#include <objc/Object.h>\n+#include <objc/Protocol.h>\n+\n+/* Test defining two protocols, one incorporating the other one. */\n+\n+@protocol Configuring\n+- (void) configure;\n+@end\n+\n+@protocol Processing <Configuring>\n+- (void) process;\n+@end\n+\n+/* A class adopting the protocol */\n+@interface Test : Object <Processing>\n+{\n+  BOOL didConfigure;\n+  BOOL didProcess;\n+}\n+@end\n+\n+@implementation Test\n+- (void) configure\n+{\n+  didConfigure = YES;\n+}\n+- (void) process\n+{\n+  didProcess = YES;\n+}\n+@end\n+\n+int main (void)\n+{\n+  id <Processing> object = [Test new];\n+\n+  [object configure];\n+  [object process];\n+\n+  return 0;\n+}\n+"}, {"sha": "9815053a2e9840515e4d296575d14d28a1b0b42f", "filename": "gcc/testsuite/objc/execute/informal_protocol.m", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Finformal_protocol.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Finformal_protocol.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Finformal_protocol.m?ref=5b57aeabb63dd3546d8f98cdd6f6984558168ba6", "patch": "@@ -0,0 +1,13 @@\n+/* Contributed by Nicola Pero - Fri Mar  9 21:35:47 CET 2001 */\n+#include <objc/objc.h>\n+#include <objc/Object.h>\n+\n+@interface Object (StopProtocol)\n+- (void) stop;\n+@end\n+\n+int main (void)\n+{\n+  return 0;\n+}\n+"}, {"sha": "53783982970b3c96f8cec1f4266461aa978e6708", "filename": "gcc/testsuite/objc/execute/initialize.m", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Finitialize.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Finitialize.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Finitialize.m?ref=5b57aeabb63dd3546d8f98cdd6f6984558168ba6", "patch": "@@ -0,0 +1,36 @@\n+/* Contributed by Nicola Pero - Wed Mar  7 17:55:04 CET 2001 */\n+#include <objc/objc.h>\n+\n+/* Test that +initialize is automatically called before the class is\n+   accessed */\n+\n+static int class_variable = 0;\n+\n+@interface TestClass\n+{\n+  Class isa;\n+}\n++ (void) initialize;\n++ (int) classVariable;\n+@end\n+\n+@implementation TestClass\n++ (void) initialize\n+{\n+  class_variable = 1;\n+}\n++ (int) classVariable\n+{\n+  return class_variable;\n+}\n+@end\n+\n+int main (void)\n+{\n+  if ([TestClass classVariable] != 1)\n+    {\n+      abort ();\n+    }\n+\n+  return 0;\n+}"}, {"sha": "fad662384d6cb1a71e9104a7ce7e7e7b1b2a921b", "filename": "gcc/testsuite/objc/execute/load.m", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fload.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fload.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fload.m?ref=5b57aeabb63dd3546d8f98cdd6f6984558168ba6", "patch": "@@ -0,0 +1,30 @@\n+/* Contributed by Nicola Pero - Wed Mar  7 17:55:04 CET 2001 */\n+#include <objc/objc.h>\n+\n+/* Test that +load is automatically called before main is run */\n+\n+static int static_variable = 0;\n+\n+@interface TestClass\n+{\n+  Class isa;\n+}\n++ (void) load;\n+@end\n+\n+@implementation TestClass\n++ (void) load\n+{\n+  static_variable = 1;\n+}\n+@end\n+\n+int main (void)\n+{\n+  if (static_variable != 1)\n+    {\n+      abort ();\n+    }\n+\n+  return 0;\n+}"}, {"sha": "d811082cb86d2a8a0e9078d2e15ae6add24e9d5b", "filename": "gcc/testsuite/objc/execute/many_args_method.m", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fmany_args_method.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fmany_args_method.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fmany_args_method.m?ref=5b57aeabb63dd3546d8f98cdd6f6984558168ba6", "patch": "@@ -0,0 +1,56 @@\n+/* Contributed by Nicola Pero - Fri Mar  9 19:39:15 CET 2001 */\n+#include <objc/objc.h>\n+\n+/* Test the syntax of methods with many arguments */\n+\n+@interface TestClass\n+{\n+  Class isa;\n+}\n++ (int) sumInteger: (int)a   withInteger: (int)b;\n++ (int) sum: (int)a   : (int)b;\n++ (int) sumInteger: (int)a   withInteger: (int)b  withInteger: (int)c;\n++ (int) sum: (int)a   : (int)b  : (int)c;\n+@end\n+\n+@implementation TestClass\n++ (int) sumInteger: (int)a  withInteger: (int)b\n+{\n+  return a + b;\n+}\n++ (int) sum: (int)a   : (int)b\n+{\n+  return [self sumInteger: a  withInteger: b];\n+}\n++ (int) sumInteger: (int)a   withInteger: (int)b  withInteger: (int)c\n+{\n+  return a + b + c;\n+}\n++ (int) sum: (int)a   : (int)b  : (int)c\n+{\n+  return [self sumInteger: a  withInteger: b  withInteger: c];\n+}\n+@end\n+\n+\n+int main (void)\n+{\n+  if ([TestClass sumInteger: 1  withInteger: 1] != 2)\n+    {\n+      abort ();\n+    }\n+  if ([TestClass sum: 1  : 1] != 2)\n+    {\n+      abort ();\n+    }\n+  if ([TestClass sumInteger: 1  withInteger: 1  withInteger: 1] != 3)\n+    {\n+      abort ();\n+    }\n+  if ([TestClass sum: 1  : 1  : 1] != 3)\n+    {\n+      abort ();\n+    }\n+\n+  return 0;\n+}"}, {"sha": "94271c4e4c0eb320dcda4f71abfb82e991b6fbbc", "filename": "gcc/testsuite/objc/execute/nested-3.m", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fnested-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fnested-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fnested-3.m?ref=5b57aeabb63dd3546d8f98cdd6f6984558168ba6", "patch": "@@ -0,0 +1,37 @@\n+/* Contributed by Nicola Pero - Fri Mar  9 19:39:15 CET 2001 */\n+#include <objc/objc.h>\n+\n+/* Test defining a nested function inside a method */\n+\n+@interface Test\n+{\n+  Class isa;\n+}\n++ (int) test;\n+@end\n+\n+@implementation\tTest\n+\n++ (int) test\n+{\n+  int test (void)\n+    {\n+      return 1;\n+    }\n+  \n+  return test ();\n+}\n+\n+@end\n+\n+int main (void)\n+{\n+  if ([Test test] != 1)\n+    {\n+      abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+"}, {"sha": "7eaa5130727977ac74eff9d471a453dd5b2ea2de", "filename": "gcc/testsuite/objc/execute/no_clash.m", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fno_clash.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fno_clash.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fno_clash.m?ref=5b57aeabb63dd3546d8f98cdd6f6984558168ba6", "patch": "@@ -0,0 +1,41 @@\n+/* Contributed by Nicola Pero - Fri Mar  9 19:39:15 CET 2001 */\n+#include <objc/objc.h>\n+#include <objc/Object.h>\n+\n+/* Test that using the same name for different things makes no \n+   problem */\n+\n+@interface TestClass : Object\n+{\n+  int test;\n+}\n++ (int) test;\n+- (int) test;\n+@end\n+\n+@implementation TestClass\n++ (int) test\n+{\n+  return 1;\n+}\n+- (int) test\n+{\n+  /* 0 + 2 as `test' is implicitly initialized to zero */\n+  return test + 2; \n+}\n+@end\n+\n+\n+int main (void)\n+{\n+  if ([TestClass test] != 1)\n+    {\n+      abort ();\n+    }\n+  if ([[[TestClass alloc] init] test] != 2)\n+    {\n+      abort ();\n+    }\n+\n+  return 0;\n+}"}, {"sha": "02cc23498bd0e1c3bbb381c3728751b460856cf0", "filename": "gcc/testsuite/objc/execute/private.m", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fprivate.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fprivate.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fprivate.m?ref=5b57aeabb63dd3546d8f98cdd6f6984558168ba6", "patch": "@@ -0,0 +1,32 @@\n+/* Contributed by Nicola Pero - Fri Mar  9 19:39:15 CET 2001 */\n+#include <objc/objc.h>\n+#include <objc/Object.h>\n+\n+/* Test the @private, @protected, @public keyworks for ivars.  We only\n+   check syntax. */\n+\n+@interface TestClass : Object\n+{\n+  int a;\n+\n+@private\n+  int ivarOne, ivarTwo;\n+  id ivarThree;\n+\n+@protected\n+  int ivarFour;\n+\n+@public\n+  id ivarFive;\n+}\n+@end\n+\n+@implementation TestClass\n+@end\n+\n+\n+int main (void)\n+{\n+  /* Only test compilation */\n+  return 0;\n+}"}, {"sha": "93659dbac8dcc2048abb578744734441687008c2", "filename": "gcc/testsuite/objc/execute/redefining_self.m", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fredefining_self.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fredefining_self.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fredefining_self.m?ref=5b57aeabb63dd3546d8f98cdd6f6984558168ba6", "patch": "@@ -0,0 +1,31 @@\n+/* Contributed by Nicola Pero - Fri Mar  9 19:39:15 CET 2001 */\n+#include <objc/objc.h>\n+\n+/* Test redefining self */\n+\n+@interface TestClass \n+{\n+  Class isa;\n+}\n++ (Class) class;\n+@end\n+\n+@implementation TestClass\n++ (Class) class\n+{\n+  self = Nil;\n+\n+  return self;\n+}\n+@end\n+\n+\n+int main (void)\n+{\n+  if ([TestClass class] != Nil)\n+    {\n+      abort ();\n+    }\n+\n+  return 0;\n+}"}, {"sha": "4f2c2fa0ee481d7751467ec9b6d71e6d026ec404", "filename": "gcc/testsuite/objc/execute/root_methods.m", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Froot_methods.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Froot_methods.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Froot_methods.m?ref=5b57aeabb63dd3546d8f98cdd6f6984558168ba6", "patch": "@@ -0,0 +1,42 @@\n+/* Contributed by Nicola Pero - Thu Mar  8 16:27:46 CET 2001 */\n+#include <objc/objc.h>\n+\n+/* Test that instance methods of root classes are available as class \n+   methods to other classes as well */\n+\n+@interface RootClass\n+{\n+  Class isa;\n+}\n+- (id) self;\n+@end\n+\n+@implementation RootClass\n+- (id) self\n+{\n+  return self;\n+}\n+@end\n+\n+@interface NormalClass : RootClass\n+@end\n+\n+@implementation NormalClass : RootClass\n+@end\n+\n+int main (void)\n+{\n+  Class normal = objc_get_class (\"NormalClass\");\n+\n+  if (normal == Nil)\n+    {\n+      abort ();\n+    }\n+\n+  if ([NormalClass self] != normal)\n+    {\n+      abort ();\n+    }\n+\n+  return 0;\n+}"}, {"sha": "7e21da52a5edd3d5f200bf4d8b57a6b3e78689fe", "filename": "gcc/testsuite/objc/execute/selector-1.m", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fselector-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fselector-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fselector-1.m?ref=5b57aeabb63dd3546d8f98cdd6f6984558168ba6", "patch": "@@ -0,0 +1,17 @@\n+/* Contributed by Nicola Pero - Thu Mar  8 16:27:46 CET 2001 */\n+#include <objc/objc.h>\n+#include <objc/objc-api.h>\n+#include <objc/Object.h>\n+\n+int main (void)\n+{\n+  SEL selector;\n+\n+  selector = @selector (alloc);\n+  if (strcmp (sel_get_name (selector), \"alloc\"))\n+    {\n+      abort ();\n+    }\n+\n+  return 0;\n+}"}, {"sha": "761e7070271b59a71bd23a81461a0834fd2e3080", "filename": "gcc/testsuite/objc/execute/static-1.m", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fstatic-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fstatic-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fstatic-1.m?ref=5b57aeabb63dd3546d8f98cdd6f6984558168ba6", "patch": "@@ -0,0 +1,34 @@\n+/* Contributed by Nicola Pero - Fri Mar  9 19:39:15 CET 2001 */\n+#include <objc/objc.h>\n+\n+/* Test defining a static variable *inside* a class implementation */\n+\n+@interface Test\n+{\n+  Class isa;\n+}\n++ (int) test;\n+@end\n+\n+@implementation\tTest\n+\n+static int test = 1;\n+\n++ (int) test\n+{\n+  return test;\n+}\n+\n+@end\n+\n+int main (void)\n+{\n+  if ([Test test] != 1)\n+    {\n+      abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+"}, {"sha": "52a03a8fbd4dd1f2633010c36940a24a27417aef", "filename": "gcc/testsuite/objc/execute/static-2.m", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fstatic-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fstatic-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fstatic-2.m?ref=5b57aeabb63dd3546d8f98cdd6f6984558168ba6", "patch": "@@ -0,0 +1,37 @@\n+/* Contributed by Nicola Pero - Fri Mar  9 19:39:15 CET 2001 */\n+#include <objc/objc.h>\n+\n+/* Test defining a static function *inside* a class implementation */\n+\n+@interface Test\n+{\n+  Class isa;\n+}\n++ (int) test;\n+@end\n+\n+@implementation\tTest\n+\n+static int test (void)\n+{\n+  return 1;\n+}\n+\n++ (int) test\n+{\n+  return test ();\n+}\n+\n+@end\n+\n+int main (void)\n+{\n+  if ([Test test] != 1)\n+    {\n+      abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+"}, {"sha": "bcf43d272a27687d34ec5f0bed846c5d267a221b", "filename": "gcc/testsuite/objc/execute/va_method.m", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fva_method.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b57aeabb63dd3546d8f98cdd6f6984558168ba6/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fva_method.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fva_method.m?ref=5b57aeabb63dd3546d8f98cdd6f6984558168ba6", "patch": "@@ -0,0 +1,44 @@\n+/* Contributed by Nicola Pero - Thu Mar  8 16:27:46 CET 2001 */\n+#include <objc/objc.h>\n+#include <objc/objc-api.h>\n+\n+/* Test method with variable number of arguments */\n+\n+@interface MathClass\n+{\n+  Class isa;\n+}\n+/* sum positive numbers; -1 ends the list */\n++ (int) sum: (int)firstNumber, ...;\n+@end\n+\n+@implementation MathClass\n++ (int) sum: (int)firstNumber, ...\n+{\n+  va_list ap;\n+  int sum = 0, number = 0;\n+\n+  va_start (ap, firstNumber);\n+  number = firstNumber;\n+\n+  while (number >= 0)\n+    {\n+      sum += number;\n+      number = va_arg (ap, int);\n+    }\n+  \n+  va_end (ap);\n+\n+  return sum;\n+}\n+@end\n+\n+int main (void)\n+{\n+  if ([MathClass sum: 1, 2, 3, 4, 5, -1] != 15)\n+    {\n+      abort ();\n+    }\n+  \n+  return 0;\n+}"}]}