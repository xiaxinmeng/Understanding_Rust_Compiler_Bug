{"sha": "0e193637243a877226db68773c0735f88e4d9aab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGUxOTM2MzcyNDNhODc3MjI2ZGI2ODc3M2MwNzM1Zjg4ZTRkOWFhYg==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2012-03-03T16:09:18Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2012-03-03T16:09:18Z"}, "message": "lang.opt (Wc-binding-type): New flag.\n\n2012-03-03  Tobias Burnus  <burnus@net-b.de>\n\n        * lang.opt (Wc-binding-type): New flag.\n        * options.c (gfc_init_options, gfc_handle_option): Handle it.\n        * invoke.texi (Wc-binding-type): Document it.\n        * gfortran.h (gfc_option_t): Add warn_c_binding_type.\n        * decl.c (verify_bind_c_sym): Handle -Wc-binding-type.\n        * symbol.c (gfc_set_default_type, verify_bind_c_derived_type):\n        Ditto.\n\n2012-03-03  Tobias Burnus  <burnus@net-b.de>\n\n        * gfortran.dg/bind_c_dts_4.f03: Add dg-options -Wc-binding-type.\n        * gfortran.dg/bind_c_implicit_vars.f03: Ditto.\n        * gfortran.dg/bind_c_usage_8.f03: Ditto.\n        * gfortran.dg/c_kind_tests_2.f03: Ditto.\n        * gfortran.dg/class_30.f90: Remove dg-warning line.\n        * gfortran.dg/bind_c_usage_25.f90: New.\n\nFrom-SVN: r184858", "tree": {"sha": "f7bb4780535beeba6d8a2220460dda826bff025e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f7bb4780535beeba6d8a2220460dda826bff025e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e193637243a877226db68773c0735f88e4d9aab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e193637243a877226db68773c0735f88e4d9aab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e193637243a877226db68773c0735f88e4d9aab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e193637243a877226db68773c0735f88e4d9aab/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "905f067ca0ead2bffc682701b3b10203a5c911c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/905f067ca0ead2bffc682701b3b10203a5c911c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/905f067ca0ead2bffc682701b3b10203a5c911c2"}], "stats": {"total": 124, "additions": 115, "deletions": 9}, "files": [{"sha": "f488afc37bb7725a848f802c77c5f9dc4faebaa7", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e193637243a877226db68773c0735f88e4d9aab/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e193637243a877226db68773c0735f88e4d9aab/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=0e193637243a877226db68773c0735f88e4d9aab", "patch": "@@ -1,3 +1,13 @@\n+2012-03-03  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* lang.opt (Wc-binding-type): New flag.\n+\t* options.c (gfc_init_options, gfc_handle_option): Handle it.\n+\t* invoke.texi (Wc-binding-type): Document it.\n+\t* gfortran.h (gfc_option_t): Add warn_c_binding_type.\n+\t* decl.c (verify_bind_c_sym): Handle -Wc-binding-type.\n+\t* symbol.c (gfc_set_default_type, verify_bind_c_derived_type):\n+\tDitto.\n+\n 2012-03-03  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/48820"}, {"sha": "75b8a899c5e298f4ede0aae717854b3a03ee2163", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e193637243a877226db68773c0735f88e4d9aab/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e193637243a877226db68773c0735f88e4d9aab/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=0e193637243a877226db68773c0735f88e4d9aab", "patch": "@@ -3930,7 +3930,7 @@ verify_bind_c_sym (gfc_symbol *tmp_sym, gfc_typespec *ts,\n     {\n       tmp_sym = tmp_sym->result;\n       /* Make sure it wasn't an implicitly typed result.  */\n-      if (tmp_sym->attr.implicit_type)\n+      if (tmp_sym->attr.implicit_type && gfc_option.warn_c_binding_type)\n \t{\n \t  gfc_warning (\"Implicitly declared BIND(C) function '%s' at \"\n                        \"%L may not be C interoperable\", tmp_sym->name,\n@@ -3951,7 +3951,7 @@ verify_bind_c_sym (gfc_symbol *tmp_sym, gfc_typespec *ts,\n       if (gfc_verify_c_interop (&(tmp_sym->ts)) != SUCCESS)\n \t{\n \t  /* See if we're dealing with a sym in a common block or not.\t*/\n-\t  if (is_in_common == 1)\n+\t  if (is_in_common == 1 && gfc_option.warn_c_binding_type)\n \t    {\n \t      gfc_warning (\"Variable '%s' in common block '%s' at %L \"\n                            \"may not be a C interoperable \"\n@@ -3965,7 +3965,7 @@ verify_bind_c_sym (gfc_symbol *tmp_sym, gfc_typespec *ts,\n                 gfc_error (\"Type declaration '%s' at %L is not C \"\n                            \"interoperable but it is BIND(C)\",\n                            tmp_sym->name, &(tmp_sym->declared_at));\n-              else\n+              else if (gfc_option.warn_c_binding_type)\n                 gfc_warning (\"Variable '%s' at %L \"\n                              \"may not be a C interoperable \"\n                              \"kind but it is bind(c)\","}, {"sha": "a36e1068466b19b5eb7d6e37910d9336a7bff279", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e193637243a877226db68773c0735f88e4d9aab/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e193637243a877226db68773c0735f88e4d9aab/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=0e193637243a877226db68773c0735f88e4d9aab", "patch": "@@ -2200,6 +2200,7 @@ typedef struct\n   int warn_aliasing;\n   int warn_ampersand;\n   int gfc_warn_conversion;\n+  int warn_c_binding_type;\n   int warn_conversion_extra;\n   int warn_function_elimination;\n   int warn_implicit_interface;"}, {"sha": "38ebfe991b28f2ccce9822f23e8a965d621a5255", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e193637243a877226db68773c0735f88e4d9aab/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e193637243a877226db68773c0735f88e4d9aab/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=0e193637243a877226db68773c0735f88e4d9aab", "patch": "@@ -142,7 +142,7 @@ by type.  Explanations are in the following sections.\n @xref{Error and Warning Options,,Options to request or suppress errors\n and warnings}.\n @gccoptlist{-Waliasing -Wall -Wampersand -Warray-bounds\n--Wcharacter-truncation @gol\n+-Wc-binding-type -Wcharacter-truncation @gol\n -Wconversion -Wfunction-elimination -Wimplicit-interface @gol\n -Wimplicit-procedure -Wintrinsic-shadow -Wintrinsics-std @gol\n -Wline-truncation -Wno-align-commons -Wno-tabs -Wreal-q-constant @gol\n@@ -773,6 +773,14 @@ Warn about array temporaries generated by the compiler.  The information\n generated by this warning is sometimes useful in optimization, in order to\n avoid such temporaries.\n \n+@item -Wc-binding-type\n+@opindex @code{Wc-binding-type}\n+@cindex warning, C binding type\n+Warn if the a variable might not be C interoperable.  In particular, warn if \n+the variable has been declared using an intrinsic type with default kind\n+instead of using a kind parameter defined for C interoperability in the\n+intrinsic @code{ISO_C_Binding} module.\n+\n @item -Wcharacter-truncation\n @opindex @code{Wcharacter-truncation}\n @cindex warnings, character truncation"}, {"sha": "7e160a0c456286099b5353f6b86c346973b3fd0a", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e193637243a877226db68773c0735f88e4d9aab/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e193637243a877226db68773c0735f88e4d9aab/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=0e193637243a877226db68773c0735f88e4d9aab", "patch": "@@ -210,6 +210,10 @@ Warray-temporaries\n Fortran Warning\n Warn about creation of array temporaries\n \n+Wc-binding-type\n+Fortran Warning\n+Warn if the type of a variable might be not interoperable with C\n+\n Wcharacter-truncation\n Fortran Warning\n Warn about truncated character expressions"}, {"sha": "1010a93844cf605ba9a85aa5147eee140a13d108", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e193637243a877226db68773c0735f88e4d9aab/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e193637243a877226db68773c0735f88e4d9aab/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=0e193637243a877226db68773c0735f88e4d9aab", "patch": "@@ -97,6 +97,7 @@ gfc_init_options (unsigned int decoded_options_count,\n   gfc_option.warn_ampersand = 0;\n   gfc_option.warn_character_truncation = 0;\n   gfc_option.warn_array_temp = 0;\n+  gfc_option.warn_c_binding_type = 0;\n   gfc_option.gfc_warn_conversion = 0;\n   gfc_option.warn_conversion_extra = 0;\n   gfc_option.warn_function_elimination = 0;\n@@ -456,6 +457,7 @@ set_Wall (int setting)\n {\n   gfc_option.warn_aliasing = setting;\n   gfc_option.warn_ampersand = setting;\n+  gfc_option.warn_c_binding_type = setting;\n   gfc_option.gfc_warn_conversion = setting;\n   gfc_option.warn_line_truncation = setting;\n   gfc_option.warn_surprising = setting;\n@@ -620,6 +622,10 @@ gfc_handle_option (size_t scode, const char *arg, int value,\n       gfc_option.warn_array_temp = value;\n       break;\n \n+    case OPT_Wc_binding_type:\n+      gfc_option.warn_c_binding_type = value;\n+      break;\n+\n     case OPT_Wcharacter_truncation:\n       gfc_option.warn_character_truncation = value;\n       break;"}, {"sha": "46e5f56feee9f41731ec289e5aecba3bacff2fe3", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e193637243a877226db68773c0735f88e4d9aab/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e193637243a877226db68773c0735f88e4d9aab/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=0e193637243a877226db68773c0735f88e4d9aab", "patch": "@@ -274,7 +274,7 @@ gfc_set_default_type (gfc_symbol *sym, int error_flag, gfc_namespace *ns)\n   if (ts->type == BT_CHARACTER && ts->u.cl)\n     sym->ts.u.cl = gfc_new_charlen (sym->ns, ts->u.cl);\n \n-  if (sym->attr.is_bind_c == 1)\n+  if (sym->attr.is_bind_c == 1 && gfc_option.warn_c_binding_type)\n     {\n       /* BIND(C) variables should not be implicitly declared.  */\n       gfc_warning_now (\"Implicitly declared BIND(C) variable '%s' at %L may \"\n@@ -287,7 +287,8 @@ gfc_set_default_type (gfc_symbol *sym, int error_flag, gfc_namespace *ns)\n       if (sym->ns->proc_name != NULL\n \t  && (sym->ns->proc_name->attr.subroutine != 0\n \t      || sym->ns->proc_name->attr.function != 0)\n-\t  && sym->ns->proc_name->attr.is_bind_c != 0)\n+\t  && sym->ns->proc_name->attr.is_bind_c != 0\n+\t  && gfc_option.warn_c_binding_type)\n         {\n           /* Dummy args to a BIND(C) routine may not be interoperable if\n              they are implicitly typed.  */\n@@ -3694,15 +3695,16 @@ verify_bind_c_derived_type (gfc_symbol *derived_sym)\n \t\t recompiles with different flags (e.g., -m32 and -m64 on\n \t\t x86_64 and using integer(4) to claim interop with a\n \t\t C_LONG).  */\n-\t      if (derived_sym->attr.is_bind_c == 1)\n+\t      if (derived_sym->attr.is_bind_c == 1\n+\t\t  && gfc_option.warn_c_binding_type)\n \t\t/* If the derived type is bind(c), all fields must be\n \t\t   interop.  */\n \t\tgfc_warning (\"Component '%s' in derived type '%s' at %L \"\n                              \"may not be C interoperable, even though \"\n                              \"derived type '%s' is BIND(C)\",\n                              curr_comp->name, derived_sym->name,\n                              &(curr_comp->loc), derived_sym->name);\n-\t      else\n+\t      else if (gfc_option.warn_c_binding_type)\n \t\t/* If derived type is param to bind(c) routine, or to one\n \t\t   of the iso_c_binding procs, it must be interoperable, so\n \t\t   all fields must interop too.\t */"}, {"sha": "a4275d9d8674757f8a0e1a3badecc383cebf89c6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e193637243a877226db68773c0735f88e4d9aab/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e193637243a877226db68773c0735f88e4d9aab/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0e193637243a877226db68773c0735f88e4d9aab", "patch": "@@ -1,3 +1,12 @@\n+2012-03-03  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* gfortran.dg/bind_c_dts_4.f03: Add dg-options -Wc-binding-type.\n+\t* gfortran.dg/bind_c_implicit_vars.f03: Ditto.\n+\t* gfortran.dg/bind_c_usage_8.f03: Ditto.\n+\t* gfortran.dg/c_kind_tests_2.f03: Ditto.\n+\t* gfortran.dg/class_30.f90: Remove dg-warning line.\n+\t* gfortran.dg/bind_c_usage_25.f90: New.\n+\n 2012-03-03  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/48820"}, {"sha": "c6fc40244439288416cf418a59c2e9ee128f5e17", "filename": "gcc/testsuite/gfortran.dg/bind_c_dts_4.f03", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e193637243a877226db68773c0735f88e4d9aab/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_dts_4.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e193637243a877226db68773c0735f88e4d9aab/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_dts_4.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_dts_4.f03?ref=0e193637243a877226db68773c0735f88e4d9aab", "patch": "@@ -1,4 +1,5 @@\n ! { dg-do compile }\n+! { dg-options \"-Wc-binding-type\" }\n module test\n use iso_c_binding, only: c_int\n     type, bind(c) ::  foo"}, {"sha": "bac7d4d5815951e7f8d128fdf88104dc47bf9435", "filename": "gcc/testsuite/gfortran.dg/bind_c_implicit_vars.f03", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e193637243a877226db68773c0735f88e4d9aab/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_implicit_vars.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e193637243a877226db68773c0735f88e4d9aab/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_implicit_vars.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_implicit_vars.f03?ref=0e193637243a877226db68773c0735f88e4d9aab", "patch": "@@ -1,4 +1,5 @@\n ! { dg-do compile }\n+! { dg-options \"-Wc-binding-type\" }\n module bind_c_implicit_vars\n \n bind(c) :: j ! { dg-warning \"may not be C interoperable\" }"}, {"sha": "087a9e05ac97aefae8c0f4efa277aaef536d04de", "filename": "gcc/testsuite/gfortran.dg/bind_c_usage_25.f90", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e193637243a877226db68773c0735f88e4d9aab/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_usage_25.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e193637243a877226db68773c0735f88e4d9aab/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_usage_25.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_usage_25.f90?ref=0e193637243a877226db68773c0735f88e4d9aab", "patch": "@@ -0,0 +1,63 @@\n+! { dg-do compile }\n+! { dg-options \"-Wno-c-binding-type\" }\n+!\n+! That's a copy of \"bind_c_usage_8.f03\", \"bind_c_dts_4.f03\",\n+! \"bind_c_implicit_vars.f03\" and \"c_kind_tests_2.f03\"\n+! to check that with -Wno-c-binding-type no warning is printed.\n+!\n+\n+MODULE ISO_C_UTILITIES\n+   USE ISO_C_BINDING\n+   implicit none\n+   CHARACTER(C_CHAR), DIMENSION(1), SAVE, TARGET, PRIVATE :: dummy_string=\"?\"\n+CONTAINS\n+   FUNCTION C_F_STRING(CPTR) RESULT(FPTR)\n+     use, intrinsic :: iso_c_binding\n+      TYPE(C_PTR), INTENT(IN) :: CPTR ! The C address\n+      CHARACTER(KIND=C_CHAR), DIMENSION(:), POINTER :: FPTR\n+      INTERFACE\n+         FUNCTION strlen(string) RESULT(len) BIND(C,NAME=\"strlen\")\n+            USE ISO_C_BINDING\n+            TYPE(C_PTR), VALUE :: string ! A C pointer\n+         END FUNCTION\n+      END INTERFACE\n+      CALL C_F_POINTER(FPTR=FPTR, CPTR=CPTR, SHAPE=[strlen(CPTR)])\n+   END FUNCTION\n+END MODULE ISO_C_UTILITIES\n+\n+module test\n+use iso_c_binding, only: c_int\n+    type, bind(c) ::  foo\n+      integer :: p\n+    end type\n+    type(foo), bind(c) :: cp\n+end module test\n+\n+module bind_c_implicit_vars\n+\n+bind(c) :: j\n+\n+contains\n+  subroutine sub0(i) bind(c)\n+    i = 0\n+  end subroutine sub0\n+end module bind_c_implicit_vars\n+\n+module c_kind_tests_2\n+  use, intrinsic :: iso_c_binding\n+\n+  integer, parameter :: myF = c_float\n+  real(myF), bind(c) :: myCFloat\n+  integer(myF), bind(c) :: myCInt       ! { dg-warning \"is for type REAL\" }\n+  integer(c_double), bind(c) :: myCInt2 ! { dg-warning \"is for type REAL\" }\n+\n+  integer, parameter :: myI = c_int\n+  real(myI) :: myReal             ! { dg-warning \"is for type INTEGER\" }\n+  real(myI), bind(c) :: myCFloat2 ! { dg-warning \"is for type INTEGER\" }\n+  real(4), bind(c) :: myFloat\n+end module c_kind_tests_2\n+\n+! { dg-final { cleanup-modules \"c_kind_tests_2\" } }\n+! { dg-final { cleanup-modules \"bind_c_implicit_vars\" } }\n+! { dg-final { cleanup-modules \"test\" } }\n+! { dg-final { cleanup-modules \"iso_c_utilities\" } }"}, {"sha": "e31af86bffd0b2eda417b0b44d31d320ed91ff72", "filename": "gcc/testsuite/gfortran.dg/bind_c_usage_8.f03", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e193637243a877226db68773c0735f88e4d9aab/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_usage_8.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e193637243a877226db68773c0735f88e4d9aab/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_usage_8.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_usage_8.f03?ref=0e193637243a877226db68773c0735f88e4d9aab", "patch": "@@ -1,4 +1,5 @@\n ! { dg-do compile }\n+! { dg-options \"-Wc-binding-type\" }\n ! This should compile, though there is a warning about the type of len\n ! (return variable of strlen()) for being implicit.\n ! PR fortran/32797"}, {"sha": "5bc99f55387cada0cbb3bd441c6ba1d7c47ceac2", "filename": "gcc/testsuite/gfortran.dg/c_kind_tests_2.f03", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e193637243a877226db68773c0735f88e4d9aab/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_kind_tests_2.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e193637243a877226db68773c0735f88e4d9aab/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_kind_tests_2.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_kind_tests_2.f03?ref=0e193637243a877226db68773c0735f88e4d9aab", "patch": "@@ -1,4 +1,5 @@\n ! { dg-do compile }\n+! { dg-options \"-Wc-binding-type\" }\n module c_kind_tests_2\n   use, intrinsic :: iso_c_binding\n "}, {"sha": "343c0d6139a93c96f3e50635fd607a5964394acd", "filename": "gcc/testsuite/gfortran.dg/class_30.f90", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e193637243a877226db68773c0735f88e4d9aab/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_30.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e193637243a877226db68773c0735f88e4d9aab/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_30.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_30.f90?ref=0e193637243a877226db68773c0735f88e4d9aab", "patch": "@@ -15,7 +15,6 @@\n \n type, bind(C):: t3\n   class(t), pointer :: y\n-  ! { dg-warning \"may not be C interoperable\" \"\" { target *-*-* } 17 }\n   ! { dg-error \"Polymorphic component y at .1. in SEQUENCE or BIND\" \"\" { target *-*-* } 17 }\n end type t3\n end"}]}