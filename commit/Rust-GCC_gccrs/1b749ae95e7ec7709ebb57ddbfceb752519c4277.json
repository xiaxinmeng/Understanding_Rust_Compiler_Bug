{"sha": "1b749ae95e7ec7709ebb57ddbfceb752519c4277", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWI3NDlhZTk1ZTdlYzc3MDllYmI1N2RkYmZjZWI3NTI1MTljNDI3Nw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-05-02T16:41:46Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-05-02T16:41:46Z"}, "message": "PR libstdc++/83860 avoid dangling references in valarray closure types\n\nStore nested closures by value not by reference, to prevent holding\ninvalid references to temporaries that have been destroyed. This\nchanges the layout of the closure types, so change their linkage names,\nbut moving them to a different namespace.\n\n\tPR libstdc++/57997\n\tPR libstdc++/83860\n\t* include/bits/gslice_array.h (gslice_array): Define default\n\tconstructor as deleted, as per C++11 standard.\n\t* include/bits/mask_array.h (mask_array): Likewise.\n\t* include/bits/slice_array.h (slice_array): Likewise.\n\t* include/bits/valarray_after.h (_GBase, _GClos, _IBase, _IClos): Move\n\tto namespace __detail.\n\t(_GBase::_M_expr, _IBase::_M_expr): Use _ValArrayRef for type of data\n\tmembers.\n\t* include/bits/valarray_before.h (_ValArrayRef): New helper for type\n\tof data members in closure objects.\n\t(_FunBase, _ValFunClos, _RefFunClos, _UnBase, _UnClos, _BinBase)\n\t(_BinBase2, _BinBase1, _BinClos, _SBase, _SClos): Move to namespace\n\t__detail.\n\t(_FunBase::_M_expr, _UnBase::_M_expr, _BinBase::_M_expr1)\n\t(_BinBase::_M_expr2, _BinBase2::_M_expr1, _BinBase1::_M_expr2)\n\t(_SBase::_M_expr): Use _ValArrayRef for type of data members.\n\t* include/std/valarray (_UnClos, _BinClos, _SClos, _GClos, _IClos)\n\t(_ValFunClos, _RefFunClos): Move to namespace __detail and add\n\tusing-declarations to namespace std.\n\t* testsuite/26_numerics/valarray/83860.cc: New.\n\nFrom-SVN: r259844", "tree": {"sha": "bc2c411d73c7fd287e111fff052dbb75e7723208", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc2c411d73c7fd287e111fff052dbb75e7723208"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b749ae95e7ec7709ebb57ddbfceb752519c4277", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b749ae95e7ec7709ebb57ddbfceb752519c4277", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b749ae95e7ec7709ebb57ddbfceb752519c4277", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b749ae95e7ec7709ebb57ddbfceb752519c4277/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59bcf90013d286b73e886ef403c4db9d12862ee2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59bcf90013d286b73e886ef403c4db9d12862ee2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59bcf90013d286b73e886ef403c4db9d12862ee2"}], "stats": {"total": 213, "additions": 195, "deletions": 18}, "files": [{"sha": "7b17bd2f8b43782c62744791d75b99b634209f55", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b749ae95e7ec7709ebb57ddbfceb752519c4277/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b749ae95e7ec7709ebb57ddbfceb752519c4277/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1b749ae95e7ec7709ebb57ddbfceb752519c4277", "patch": "@@ -1,5 +1,28 @@\n 2018-05-02  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/57997\n+\tPR libstdc++/83860\n+\t* include/bits/gslice_array.h (gslice_array): Define default\n+\tconstructor as deleted, as per C++11 standard.\n+\t* include/bits/mask_array.h (mask_array): Likewise.\n+\t* include/bits/slice_array.h (slice_array): Likewise.\n+\t* include/bits/valarray_after.h (_GBase, _GClos, _IBase, _IClos): Move\n+\tto namespace __detail.\n+\t(_GBase::_M_expr, _IBase::_M_expr): Use _ValArrayRef for type of data\n+\tmembers.\n+\t* include/bits/valarray_before.h (_ValArrayRef): New helper for type\n+\tof data members in closure objects.\n+\t(_FunBase, _ValFunClos, _RefFunClos, _UnBase, _UnClos, _BinBase)\n+\t(_BinBase2, _BinBase1, _BinClos, _SBase, _SClos): Move to namespace\n+\t__detail.\n+\t(_FunBase::_M_expr, _UnBase::_M_expr, _BinBase::_M_expr1)\n+\t(_BinBase::_M_expr2, _BinBase2::_M_expr1, _BinBase1::_M_expr2)\n+\t(_SBase::_M_expr): Use _ValArrayRef for type of data members.\n+\t* include/std/valarray (_UnClos, _BinClos, _SClos, _GClos, _IClos)\n+\t(_ValFunClos, _RefFunClos): Move to namespace __detail and add\n+\tusing-declarations to namespace std.\n+\t* testsuite/26_numerics/valarray/83860.cc: New.\n+\n \t* testsuite/backward/strstream_move.cc: Remove duplicate function\n \tcall.\n "}, {"sha": "715c53bd616aa9f399e87b0d2044525f8701dff5", "filename": "libstdc++-v3/include/bits/gslice_array.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b749ae95e7ec7709ebb57ddbfceb752519c4277/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fgslice_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b749ae95e7ec7709ebb57ddbfceb752519c4277/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fgslice_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fgslice_array.h?ref=1b749ae95e7ec7709ebb57ddbfceb752519c4277", "patch": "@@ -128,8 +128,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       gslice_array(_Array<_Tp>, const valarray<size_t>&);\n \n+#if __cplusplus < 201103L\n       // not implemented\n       gslice_array();\n+#else\n+    public:\n+      gslice_array() = delete;\n+#endif\n     };\n \n   template<typename _Tp>"}, {"sha": "c11691a243aaa8cc235b576e744c39a874ab5b28", "filename": "libstdc++-v3/include/bits/mask_array.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b749ae95e7ec7709ebb57ddbfceb752519c4277/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmask_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b749ae95e7ec7709ebb57ddbfceb752519c4277/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmask_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmask_array.h?ref=1b749ae95e7ec7709ebb57ddbfceb752519c4277", "patch": "@@ -131,8 +131,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       const _Array<bool> _M_mask;\n       const _Array<_Tp>  _M_array;\n \n+#if __cplusplus < 201103L\n       // not implemented\n       mask_array();\n+#else\n+    public:\n+      mask_array() = delete;\n+#endif\n     };\n \n   template<typename _Tp>"}, {"sha": "b025373180f5c6f957f822fb041f9278ca2a49a3", "filename": "libstdc++-v3/include/bits/slice_array.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b749ae95e7ec7709ebb57ddbfceb752519c4277/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fslice_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b749ae95e7ec7709ebb57ddbfceb752519c4277/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fslice_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fslice_array.h?ref=1b749ae95e7ec7709ebb57ddbfceb752519c4277", "patch": "@@ -192,8 +192,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       const size_t      _M_stride;\n       const _Array<_Tp> _M_array;\n \n+#if __cplusplus < 201103L\n       // not implemented\n       slice_array();\n+#else\n+    public:\n+      slice_array() = delete;\n+#endif\n     };\n \n   template<typename _Tp>"}, {"sha": "bb1a3c9b513547953fa029d4eaa1219080f4cb0a", "filename": "libstdc++-v3/include/bits/valarray_after.h", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b749ae95e7ec7709ebb57ddbfceb752519c4277/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_after.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b749ae95e7ec7709ebb57ddbfceb752519c4277/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_after.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_after.h?ref=1b749ae95e7ec7709ebb57ddbfceb752519c4277", "patch": "@@ -38,6 +38,8 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+namespace __detail\n+{\n   //\n   // gslice_array closure.\n   //\n@@ -59,8 +61,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return _M_index.size(); }\n \n     private:\n-      const _Dom&\t      _M_expr;\n-      const valarray<size_t>& _M_index;\n+      typename _ValArrayRef<_Dom>::__type\t_M_expr;\n+      const valarray<size_t>&\t\t\t_M_index;\n     };\n \n   template<typename _Tp>\n@@ -128,8 +130,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return _M_index.size(); }\n \n     private:\n-      const _Dom&\t      _M_expr;\n-      const valarray<size_t>& _M_index;\n+      typename _ValArrayRef<_Dom>::__type\t_M_expr;\n+      const valarray<size_t>&\t\t\t_M_index;\n     };\n \n   template<class _Dom>\n@@ -153,6 +155,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _IClos (const valarray<_Tp>& __a, const valarray<size_t>& __i)\n       : _Base (__a, __i) {}\n     };\n+} // namespace __detail\n   \n   //\n   // class _Expr"}, {"sha": "fe41787c19f7c4720307fa98a8caf36e90b267fb", "filename": "libstdc++-v3/include/bits/valarray_before.h", "status": "modified", "additions": 29, "deletions": 14, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b749ae95e7ec7709ebb57ddbfceb752519c4277/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_before.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b749ae95e7ec7709ebb57ddbfceb752519c4277/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_before.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_before.h?ref=1b749ae95e7ec7709ebb57ddbfceb752519c4277", "patch": "@@ -406,6 +406,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef bool result_type;\n     };\n \n+namespace __detail\n+{\n+  // Closure types already have reference semantics and are often short-lived,\n+  // so store them by value to avoid (some cases of) dangling references to\n+  // out-of-scope temporaries.\n+  template<typename _Tp>\n+    struct _ValArrayRef\n+    { typedef const _Tp __type; };\n+\n+  // Use real references for std::valarray objects.\n+  template<typename _Tp>\n+    struct _ValArrayRef< valarray<_Tp> >\n+    { typedef const valarray<_Tp>& __type; };\n+\n   //\n   // Apply function taking a value/const reference closure\n   //\n@@ -425,7 +439,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       size_t size() const { return _M_expr.size ();}\n \n     private:\n-      const _Dom& _M_expr;\n+      typename _ValArrayRef<_Dom>::__type _M_expr;\n       value_type (*_M_func)(_Arg);\n     };\n \n@@ -490,7 +504,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       size_t size() const { return _M_expr.size(); }\n       \n     private:\n-      const _Arg& _M_expr;\n+      typename _ValArrayRef<_Arg>::__type _M_expr;\n     };\n \n   template<class _Oper, class _Dom>\n@@ -536,8 +550,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       size_t size() const { return _M_expr1.size(); }\n \n     private:\n-      const _FirstArg& _M_expr1;\n-      const _SecondArg& _M_expr2;\n+      typename _ValArrayRef<_FirstArg>::__type _M_expr1;\n+      typename _ValArrayRef<_SecondArg>::__type _M_expr2;\n     };\n \n \n@@ -557,8 +571,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       size_t size() const { return _M_expr1.size(); }\n \n     private:\n-      const _Clos& _M_expr1;\n-      const _Vt& _M_expr2;\n+      typename _ValArrayRef<_Clos>::__type _M_expr1;\n+      _Vt _M_expr2;\n     };\n \n   template<class _Oper, class _Clos>\n@@ -577,8 +591,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       size_t size() const { return _M_expr2.size(); }\n \n     private:\n-      const _Vt& _M_expr1;\n-      const _Clos& _M_expr2;\n+      _Vt _M_expr1;\n+      typename _ValArrayRef<_Clos>::__type _M_expr2;\n     };\n \n   template<class _Oper, class _Dom1, class _Dom2>\n@@ -592,7 +606,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     };\n \n   template<class _Oper, typename _Tp>\n-    struct _BinClos<_Oper,_ValArray, _ValArray, _Tp, _Tp>\n+    struct _BinClos<_Oper, _ValArray, _ValArray, _Tp, _Tp>\n     : _BinBase<_Oper, valarray<_Tp>, valarray<_Tp> >\n     {\n       typedef _BinBase<_Oper, valarray<_Tp>, valarray<_Tp> > _Base;\n@@ -668,10 +682,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _BinClos(const _Tp& __t, const valarray<_Tp>& __v) : _Base(__t, __v) {}\n     };\n \n-    //\n-    // slice_array closure.\n-    //\n-  template<typename _Dom> \n+  //\n+  // slice_array closure.\n+  //\n+  template<typename _Dom>\n     class _SBase\n     {\n     public:\n@@ -689,7 +703,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return _M_slice.size (); }\n \n     private:\n-      const _Dom& _M_expr;\n+      typename _ValArrayRef<_Dom>::__type _M_expr;\n       const slice& _M_slice;\n     };\n \n@@ -736,6 +750,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       \n       _SClos (_Array<_Tp> __a, const slice& __s) : _Base (__a, __s) {}\n     };\n+} // namespace __detail\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace"}, {"sha": "03e0badfc53d299aff44ce01146b1532d5968c03", "filename": "libstdc++-v3/include/std/valarray", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b749ae95e7ec7709ebb57ddbfceb752519c4277/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvalarray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b749ae95e7ec7709ebb57ddbfceb752519c4277/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvalarray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvalarray?ref=1b749ae95e7ec7709ebb57ddbfceb752519c4277", "patch": "@@ -51,6 +51,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp1, typename _Tp2>\n     class _ValArray;\n \n+namespace __detail\n+{\n   template<class _Oper, template<class, class> class _Meta, class _Dom>\n     struct _UnClos;\n \n@@ -74,6 +76,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<template<class, class> class _Meta, class _Dom>\n     class _RefFunClos;\n+} // namespace __detail\n+\n+  using __detail::_UnClos;\n+  using __detail::_BinClos;\n+  using __detail::_SClos;\n+  using __detail::_GClos;\n+  using __detail::_IClos;\n+  using __detail::_ValFunClos;\n+  using __detail::_RefFunClos;\n \n   template<class _Tp> class valarray;   // An array of type _Tp\n   class slice;                          // BLAS-like slice out of an array"}, {"sha": "6d82ef5583f095dad659dc2a655c1f28617b363a", "filename": "libstdc++-v3/testsuite/26_numerics/valarray/83860.cc", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b749ae95e7ec7709ebb57ddbfceb752519c4277/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2F83860.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b749ae95e7ec7709ebb57ddbfceb752519c4277/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2F83860.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray%2F83860.cc?ref=1b749ae95e7ec7709ebb57ddbfceb752519c4277", "patch": "@@ -0,0 +1,110 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+\n+#include <valarray>\n+#include <testsuite_hooks.h>\n+\n+const std::valarray<int> v{\n+  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15\n+};\n+\n+bool\n+all_of(const std::valarray<bool>& vals)\n+{\n+  for (bool b : vals)\n+    if (!b)\n+      return false;\n+  return true;\n+}\n+\n+void\n+test01()\n+{\n+  // PR libstdc++/83860\n+  const std::valarray<int> va(v), vb(v), vc(v);\n+  auto sum = va + vb + vc;\n+  std::valarray<int> vsum = sum;\n+  VERIFY( all_of( vsum == (3 * v) ) );\n+}\n+\n+void\n+test02()\n+{\n+  auto neg = -(-v);\n+  std::valarray<int> vneg = neg;\n+  VERIFY( all_of( vneg == v ) );\n+}\n+\n+void\n+test03()\n+{\n+  const std::valarray<int> va(v), vb(v);\n+  auto diff = va + -vb;\n+  std::valarray<int> vdiff = diff;\n+  VERIFY( all_of( vdiff == (va - vb) ) );\n+}\n+\n+void\n+test04()\n+{\n+  const std::valarray<int> va(v), vb(v);\n+  auto sum = -va + -vb;\n+  std::valarray<int> vsum = sum;\n+  VERIFY( all_of( vsum == (-2 * v) ) );\n+}\n+\n+void\n+test05()\n+{\n+  const std::valarray<int> va(v), vb(v);\n+  auto sum = -(-va + -vb);\n+  std::valarray<int> vsum = sum;\n+  VERIFY( all_of( vsum == (2 * v) ) );\n+}\n+\n+void\n+test06()\n+{\n+  auto prod = 3 * +v * 2;\n+  std::valarray<int> vprod = prod;\n+  VERIFY( all_of( vprod == (6 * v) ) );\n+}\n+\n+void\n+test07()\n+{\n+  const std::valarray<int> va(v), vb(v);\n+  auto valfun = [](int i) { return i; };\n+  auto reffun = [](const int& i) { return i; };\n+  auto sum = (va.apply(valfun) + vb.apply(reffun));\n+  std::valarray<int> vsum = sum;\n+  VERIFY( all_of( vsum == (va + vb) ) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  test04();\n+  test05();\n+  test06();\n+  test07();\n+}"}]}