{"sha": "2f96b75442ec3b2c211d1b4d37d3de16cd12d4f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmY5NmI3NTQ0MmVjM2IyYzIxMWQxYjRkMzdkM2RlMTZjZDEyZDRmMQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2006-03-14T07:13:42Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2006-03-14T07:13:42Z"}, "message": "Move around a couple of hunks and add a missing one for commit 111866\n\nFrom-SVN: r112046", "tree": {"sha": "147df3f58114981a38450f7042123425f31aa25d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/147df3f58114981a38450f7042123425f31aa25d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f96b75442ec3b2c211d1b4d37d3de16cd12d4f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f96b75442ec3b2c211d1b4d37d3de16cd12d4f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f96b75442ec3b2c211d1b4d37d3de16cd12d4f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f96b75442ec3b2c211d1b4d37d3de16cd12d4f1/comments", "author": null, "committer": null, "parents": [{"sha": "17237f6b0eb18d95a307bb81a8c5360fdf01391a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17237f6b0eb18d95a307bb81a8c5360fdf01391a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17237f6b0eb18d95a307bb81a8c5360fdf01391a"}], "stats": {"total": 58, "additions": 28, "deletions": 30}, "files": [{"sha": "4e05368fe2b7605623fcdc065fa892813aa2b1ff", "filename": "gcc/fold-const.c", "status": "modified", "additions": 28, "deletions": 30, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f96b75442ec3b2c211d1b4d37d3de16cd12d4f1/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f96b75442ec3b2c211d1b4d37d3de16cd12d4f1/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=2f96b75442ec3b2c211d1b4d37d3de16cd12d4f1", "patch": "@@ -3724,32 +3724,6 @@ range_binop (enum tree_code code, tree type, tree arg0, int upper0_p,\n   return constant_boolean_node (result, type);\n }\n \f\n-/* Return the predecessor of VAL in its type, handling the infinite case.  */\n-\n-static tree\n-range_predecessor (tree val)\n-{\n-  tree type = TREE_TYPE (val);\n-\n-  if (INTEGRAL_TYPE_P (type) && val == TYPE_MIN_VALUE (type))\n-    return 0;\n-  else\n-    return range_binop (MINUS_EXPR, NULL_TREE, val, 0, integer_one_node, 0);\n-}\n-\n-/* Return the successor of VAL in its type, handling the infinite case.  */\n-\n-static tree\n-range_successor (tree val)\n-{\n-  tree type = TREE_TYPE (val);\n-\n-  if (INTEGRAL_TYPE_P (type) && val == TYPE_MAX_VALUE (type))\n-    return 0;\n-  else\n-    return range_binop (PLUS_EXPR, NULL_TREE, val, 0, integer_one_node, 0);\n-}\n-\n /* Given EXP, a logical expression, set the range it is testing into\n    variables denoted by PIN_P, PLOW, and PHIGH.  Return the expression\n    actually being tested.  *PLOW and *PHIGH will be made of the same type\n@@ -4174,6 +4148,32 @@ build_range_check (tree type, tree exp, int in_p, tree low, tree high)\n   return 0;\n }\n \f\n+/* Return the predecessor of VAL in its type, handling the infinite case.  */\n+\n+static tree\n+range_predecessor (tree val)\n+{\n+  tree type = TREE_TYPE (val);\n+\n+  if (INTEGRAL_TYPE_P (type) && val == TYPE_MIN_VALUE (type))\n+    return 0;\n+  else\n+    return range_binop (MINUS_EXPR, NULL_TREE, val, 0, integer_one_node, 0);\n+}\n+\n+/* Return the successor of VAL in its type, handling the infinite case.  */\n+\n+static tree\n+range_successor (tree val)\n+{\n+  tree type = TREE_TYPE (val);\n+\n+  if (INTEGRAL_TYPE_P (type) && val == TYPE_MAX_VALUE (type))\n+    return 0;\n+  else\n+    return range_binop (PLUS_EXPR, NULL_TREE, val, 0, integer_one_node, 0);\n+}\n+\n /* Given two ranges, see if we can merge them into one.  Return 1 if we\n    can, 0 if we can't.  Set the output range into the specified parameters.  */\n \n@@ -4348,10 +4348,8 @@ merge_ranges (int *pin_p, tree *plow, tree *phigh, int in0_p, tree low0,\n \t         return + [x + 1, y - 1].  */\n \t      if (low0 == 0 && high1 == 0)\n \t        {\n-\t\t  low = range_binop (PLUS_EXPR, NULL_TREE, high0, 1,\n-\t\t\t\t     integer_one_node, 1);\n-\t\t  high = range_binop (MINUS_EXPR, NULL_TREE, low1, 0,\n-\t\t\t\t      integer_one_node, 0);\n+\t\t  low = range_successor (high0);\n+\t\t  high = range_predecessor (low1);\n \t\t  if (low == 0 || high == 0)\n \t\t    return 0;\n "}]}