{"sha": "1536ef88f1106ebcc3b2b2f39c2099bf70151738", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTUzNmVmODhmMTEwNmViY2MzYjJiMmYzOWMyMDk5YmY3MDE1MTczOA==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2002-01-13T11:59:37Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2002-01-13T11:59:37Z"}, "message": "DatagramSocket.java (getReceiveBufferSize): new 1.2 method.\n\n\t* java/net/DatagramSocket.java (getReceiveBufferSize): new 1.2 method.\n\t* java/net/DatagramSocket.java (getSendBufferSize): Likewise.\n\t* java/net/DatagramSocket.java (setReceiveBufferSize): Likewise.\n\t* java/net/DatagramSocket.java (setSendBufferSize): Likewise.\n\nFrom-SVN: r48814", "tree": {"sha": "c23b592b9c29cfed7b7310112577ff00144aaacc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c23b592b9c29cfed7b7310112577ff00144aaacc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1536ef88f1106ebcc3b2b2f39c2099bf70151738", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1536ef88f1106ebcc3b2b2f39c2099bf70151738", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1536ef88f1106ebcc3b2b2f39c2099bf70151738", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1536ef88f1106ebcc3b2b2f39c2099bf70151738/comments", "author": null, "committer": null, "parents": [{"sha": "ec5bda0283e7abf2f995565e4c584660da8b1d29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec5bda0283e7abf2f995565e4c584660da8b1d29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec5bda0283e7abf2f995565e4c584660da8b1d29"}], "stats": {"total": 99, "additions": 83, "deletions": 16}, "files": [{"sha": "04df52c4b5ea1f271368aa010150b99ed3535b9d", "filename": "libjava/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1536ef88f1106ebcc3b2b2f39c2099bf70151738/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1536ef88f1106ebcc3b2b2f39c2099bf70151738/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=1536ef88f1106ebcc3b2b2f39c2099bf70151738", "patch": "@@ -1,3 +1,10 @@\n+2002-01-13  Mark Wielaard  <mark@klomp.org>\n+\n+\t* java/net/DatagramSocket.java (getReceiveBufferSize): new 1.2 method.\n+\t* java/net/DatagramSocket.java (getSendBufferSize): Likewise.\n+\t* java/net/DatagramSocket.java (setReceiveBufferSize): Likewise.\n+\t* java/net/DatagramSocket.java (setSendBufferSize): Likewise.\n+\n 2002-01-11  Mark Wielaard  <mark@klomp.org>\n \n \t* java/net/InetAddress.java (ANY_IF): moved from ServerSocket."}, {"sha": "064e8e78983a3662869b0942875da1c42eecc8d6", "filename": "libjava/java/net/DatagramSocket.java", "status": "modified", "additions": 76, "deletions": 16, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1536ef88f1106ebcc3b2b2f39c2099bf70151738/libjava%2Fjava%2Fnet%2FDatagramSocket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1536ef88f1106ebcc3b2b2f39c2099bf70151738/libjava%2Fjava%2Fnet%2FDatagramSocket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FDatagramSocket.java?ref=1536ef88f1106ebcc3b2b2f39c2099bf70151738", "patch": "@@ -180,23 +180,83 @@ public synchronized void setSoTimeout(int timeout) throws SocketException\n   // {\n   // }\n \n-  // JDK1.2\n-  // public int getReceiveBufferSize() throws SocketException\n-  // {\n-  // }\n+  /**\n+   * This method returns the value of the system level socket option\n+   * SO_RCVBUF, which is used by the operating system to tune buffer\n+   * sizes for data transfers.\n+   *\n+   * @return The receive buffer size.\n+   *\n+   * @exception SocketException If an error occurs.\n+   *\n+   * @since 1.2\n+   */\n+  public int getReceiveBufferSize() throws SocketException\n+  {\n+    Object obj = impl.getOption(SocketOptions.SO_RCVBUF);\n+  \n+    if (obj instanceof Integer)\n+      return(((Integer)obj).intValue());\n+    else \n+      throw new SocketException(\"Unexpected type\");\n+  }\n \n-  // JDK1.2\n-  // public int getSendBufferSize() throws SocketException\n-  // {\n-  // }\n+  /**\n+   * This method returns the value of the system level socket option\n+   * SO_SNDBUF, which is used by the operating system to tune buffer\n+   * sizes for data transfers.\n+   *\n+   * @return The send buffer size.\n+   *\n+   * @exception SocketException If an error occurs.\n+   *\n+   * @since 1.2\n+   */\n+  public int getSendBufferSize() throws SocketException\n+  {\n+    Object obj = impl.getOption(SocketOptions.SO_SNDBUF);\n \n-  // JDK1.2\n-  // public void setReceiveBufferSize(int size) throws SocketException\n-  // {\n-  // }\n+    if (obj instanceof Integer)\n+      return(((Integer)obj).intValue());\n+    else\n+      throw new SocketException(\"Unexpected type\");\n+  }\n \n-  // JDK1.2\n-  // public void setSendBufferSize(int size) throws SocketException\n-  // {\n-  // }\n+  /**\n+   * This method sets the value for the system level socket option\n+   * SO_RCVBUF to the specified value.  Note that valid values for this\n+   * option are specific to a given operating system.\n+   *\n+   * @param size The new receive buffer size.\n+   *\n+   * @exception SocketException If an error occurs.\n+   *  \n+   * @since 1.2\n+   */\n+  public void setReceiveBufferSize(int size) throws SocketException\n+  {\n+    if (size < 0)\n+      throw new IllegalArgumentException(\"Buffer size is less than 0\");\n+\n+    impl.setOption(SocketOptions.SO_RCVBUF, new Integer(size));\n+  }\n+\n+  /**\n+   * This method sets the value for the system level socket option\n+   * SO_SNDBUF to the specified value.  Note that valid values for this\n+   * option are specific to a given operating system.\n+   *\n+   * @param size The new send buffer size.\n+   *\n+   * @exception SocketException If an error occurs.\n+   *\n+   * @since 1.2\n+   */\n+  public void setSendBufferSize(int size) throws SocketException\n+  {\n+    if (size < 0)\n+      throw new IllegalArgumentException(\"Buffer size is less than 0\");\n+  \n+    impl.setOption(SocketOptions.SO_SNDBUF, new Integer(size));\n+  }\n }"}]}