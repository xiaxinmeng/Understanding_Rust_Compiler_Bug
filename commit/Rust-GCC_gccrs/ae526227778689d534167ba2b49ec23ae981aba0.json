{"sha": "ae526227778689d534167ba2b49ec23ae981aba0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWU1MjYyMjc3Nzg2ODlkNTM0MTY3YmEyYjQ5ZWMyM2FlOTgxYWJhMA==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1994-04-28T22:59:27Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1994-04-28T22:59:27Z"}, "message": "(adddi3, subdi3, anddi3, iordi3, xordi3): Corresponding changes.\n\n(one_cmpldi3): Don't allow constants for operand 1.\n\nFrom-SVN: r7173", "tree": {"sha": "4ecfcf8c980346e8c779e5e5a8a61cbbf1221035", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ecfcf8c980346e8c779e5e5a8a61cbbf1221035"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae526227778689d534167ba2b49ec23ae981aba0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae526227778689d534167ba2b49ec23ae981aba0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae526227778689d534167ba2b49ec23ae981aba0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae526227778689d534167ba2b49ec23ae981aba0/comments", "author": null, "committer": null, "parents": [{"sha": "23b8a89f2f966d75111f507c9ff7d8897f0b3763", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23b8a89f2f966d75111f507c9ff7d8897f0b3763", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23b8a89f2f966d75111f507c9ff7d8897f0b3763"}], "stats": {"total": 106, "additions": 51, "deletions": 55}, "files": [{"sha": "460e398cbb9a06e037e4905f33087aa53e4f1221", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 51, "deletions": 55, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae526227778689d534167ba2b49ec23ae981aba0/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae526227778689d534167ba2b49ec23ae981aba0/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=ae526227778689d534167ba2b49ec23ae981aba0", "patch": "@@ -1789,12 +1789,16 @@\n     }\n   else if (GET_CODE (op2) == CONST_DOUBLE)\n     {\n-      int sign = CONST_DOUBLE_HIGH (op2);\n-      operands[2] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t     CONST_DOUBLE_LOW (operands[1]));\n-      if (sign < 0)\n-        return \\\"addcc %R1,%2,%R0\\;addx %1,-1,%0\\\";\n-      return \\\"addcc %R1,%2,%R0\\;addx %1,0,%0\\\";\n+      rtx xoperands[4];\n+      xoperands[0] = operands[0];\n+      xoperands[1] = operands[1];\n+      xoperands[2] = GEN_INT (CONST_DOUBLE_LOW (op2));\n+      xoperands[3] = GEN_INT (CONST_DOUBLE_HIGH (op2));\n+      if (xoperands[2] == const0_rtx && xoperands[0] == xoperands[1])\n+\toutput_asm_insn (\\\"add %1,%3,%0\\\", xoperands);\n+      else\n+\toutput_asm_insn (\\\"addcc %R1,%2,%R0\\;addx %1,%3,%0\\\", xoperands);\n+      return \\\"\\\";\n     }\n   return \\\"addcc %R1,%R2,%R0\\;addx %1,%2,%0\\\";\n }\"\n@@ -1847,12 +1851,16 @@\n     }\n   else if (GET_CODE (op2) == CONST_DOUBLE)\n     {\n-      int sign = CONST_DOUBLE_HIGH (op2);\n-      operands[2] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t     CONST_DOUBLE_LOW (operands[1]));\n-      if (sign < 0)\n-        return \\\"subcc %R1,%2,%R0\\;subx %1,-1,%0\\\";\n-      return \\\"subcc %R1,%2,%R0\\;subx %1,0,%0\\\";\n+      rtx xoperands[4];\n+      xoperands[0] = operands[0];\n+      xoperands[1] = operands[1];\n+      xoperands[2] = GEN_INT (CONST_DOUBLE_LOW (op2));\n+      xoperands[3] = GEN_INT (CONST_DOUBLE_HIGH (op2));\n+      if (xoperands[2] == const0_rtx && xoperands[0] == xoperands[1])\n+\toutput_asm_insn (\\\"sub %1,%3,%0\\\", xoperands);\n+      else\n+\toutput_asm_insn (\\\"subcc %R1,%2,%R0\\;subx %1,%3,%0\\\", xoperands);\n+      return \\\"\\\";\n     }\n   return \\\"subcc %R1,%R2,%R0\\;subx %1,%2,%0\\\";\n }\"\n@@ -2117,12 +2125,15 @@\n     }\n   else if (GET_CODE (op2) == CONST_DOUBLE)\n     {\n-      int sign = CONST_DOUBLE_HIGH (op2);\n-      operands[2] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t     CONST_DOUBLE_LOW (operands[1]));\n-      if (sign < 0)\n-\treturn \\\"mov %1,%0\\;and %R1,%2,%R0\\\";\n-      return \\\"mov 0,%0\\;and %R1,%2,%R0\\\";\n+      rtx xoperands[4];\n+      xoperands[0] = operands[0];\n+      xoperands[1] = operands[1];\n+      xoperands[2] = GEN_INT (CONST_DOUBLE_LOW (op2));\n+      xoperands[3] = GEN_INT (CONST_DOUBLE_HIGH (op2));\n+      /* We could optimize then operands[1] == operands[0]\n+\t and either half of the constant is -1.  */\n+      output_asm_insn (\\\"and %R1,%2,%R0\\;and %1,%3,%0\\\", xoperands);\n+      return \\\"\\\";\n     }\n   return \\\"and %1,%2,%0\\;and %R1,%R2,%R0\\\";\n }\"\n@@ -2192,12 +2203,15 @@\n     }\n   else if (GET_CODE (op2) == CONST_DOUBLE)\n     {\n-      int sign = CONST_DOUBLE_HIGH (op2);\n-      operands[2] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t     CONST_DOUBLE_LOW (operands[1]));\n-      if (sign < 0)\n-\treturn \\\"mov -1,%0\\;or %R1,%2,%R0\\\";\n-      return \\\"mov %1,%0\\;or %R1,%2,%R0\\\";\n+      rtx xoperands[4];\n+      xoperands[0] = operands[0];\n+      xoperands[1] = operands[1];\n+      xoperands[2] = GEN_INT (CONST_DOUBLE_LOW (op2));\n+      xoperands[3] = GEN_INT (CONST_DOUBLE_HIGH (op2));\n+      /* We could optimize then operands[1] == operands[0]\n+\t and either half of the constant is 0.  */\n+      output_asm_insn (\\\"or %R1,%2,%R0\\;or %1,%3,%0\\\", xoperands);\n+      return \\\"\\\";\n     }\n   return \\\"or %1,%2,%0\\;or %R1,%R2,%R0\\\";\n }\"\n@@ -2267,12 +2281,15 @@\n     }\n   else if (GET_CODE (op2) == CONST_DOUBLE)\n     {\n-      int sign = CONST_DOUBLE_HIGH (op2);\n-      operands[2] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t     CONST_DOUBLE_LOW (operands[1]));\n-      if (sign < 0)\n-\treturn \\\"xor %1,-1,%0\\;xor %R1,%2,%R0\\\";\n-      return \\\"mov %1,%0\\;xor %R1,%2,%R0\\\";\n+      rtx xoperands[4];\n+      xoperands[0] = operands[0];\n+      xoperands[1] = operands[1];\n+      xoperands[2] = GEN_INT (CONST_DOUBLE_LOW (op2));\n+      xoperands[3] = GEN_INT (CONST_DOUBLE_HIGH (op2));\n+      /* We could optimize then operands[1] == operands[0]\n+\t and either half of the constant is 0.  */\n+      output_asm_insn (\\\"xor %R1,%2,%R0\\;xor %1,%3,%0\\\", xoperands);\n+      return \\\"\\\";\n     }\n   return \\\"xor %1,%2,%0\\;xor %R1,%R2,%R0\\\";\n }\"\n@@ -2442,37 +2459,16 @@\n ;; We cannot use the \"not\" pseudo insn because the Sun assembler\n ;; does not know how to make it work for constants.\n (define_expand \"one_cmpldi2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(not:DI (match_operand:DI 1 \"arith_double_operand\" \"rHI\")))]\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(not:DI (match_operand:DI 1 \"register_operand\" \"\")))]\n   \"\"\n   \"\")\n \n (define_insn \"\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(not:DI (match_operand:DI 1 \"arith_double_operand\" \"rHI\")))]\n+\t(not:DI (match_operand:DI 1 \"register_operand\" \"r\")))]\n   \"\"\n-  \"*\n-{\n-  rtx op1 = operands[1];\n-\n-  if (GET_CODE (op1) == CONST_INT)\n-    {\n-      int sign = INTVAL (op1);\n-      if (sign < 0)\n-\treturn \\\"xnor %%g0,%1,%R0\\;xnor %%g0,-1,%0\\\";\n-      return \\\"xnor %%g0,%1,%R0\\;xnor %%g0,0,%0\\\";\n-    }\n-  else if (GET_CODE (op1) == CONST_DOUBLE)\n-    {\n-      int sign = CONST_DOUBLE_HIGH (op1);\n-      operands[1] = gen_rtx (CONST_INT, VOIDmode,\n-\t\t\t     CONST_DOUBLE_LOW (operands[1]));\n-      if (sign < 0)\n-\treturn \\\"xnor %%g0,%1,%R0\\;xnor %%g0,-1,%0\\\";\n-      return \\\"xnor %%g0,%1,%R0\\;xnor %%g0,0,%0\\\";\n-    }\n-  return \\\"xnor %%g0,%1,%0\\;xnor %%g0,%R1,%R0\\\";\n-}\"\n+  \"xnor %%g0,%1,%0\\;xnor %%g0,%R1,%R0\"\n   [(set_attr \"type\" \"unary\")\n    (set_attr \"length\" \"2\")])\n "}]}