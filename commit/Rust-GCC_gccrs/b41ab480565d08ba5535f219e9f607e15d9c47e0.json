{"sha": "b41ab480565d08ba5535f219e9f607e15d9c47e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQxYWI0ODA1NjVkMDhiYTU1MzVmMjE5ZTlmNjA3ZTE1ZDljNDdlMA==", "commit": {"author": {"name": "Pascal Obry", "email": "obry@adacore.com", "date": "2007-12-13T10:18:44Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-12-13T10:18:44Z"}, "message": "adaint.c (__gnat_pthread_setaffinity_np): New routine.\n\n2007-12-06  Pascal Obry  <obry@adacore.com>\n\n\t* adaint.c (__gnat_pthread_setaffinity_np): New routine. A dummy\n\t version is provided for older GNU/Linux distribution not\n\t supporting thread affinity sets.\n\t\n\t* s-osinte-linux.ads (SC_NPROCESSORS_ONLN): New constant for sysconf\n\tcall.\n\t(bit_field): New packed boolean type used by cpu_set_t.\n\t(cpu_set_t): New type corresponding to the C type with\n\tthe same name. Note that on the Ada side we use a bit\n\tfield array for the affinity mask. There is not need\n\tfor the C macro for setting individual bit.\n\t(pthread_setaffinity_np): New imported routine.\n\t\n\t* s-taprop-linux.adb (Enter_Task): Check that the CPU affinity mask is\n\tno null.\n\t(Create_Task): Set the processor affinity mask if information\n\tis present.\n\t\n\t* s-tasinf-linux.ads, s-tasinf-linux.adb: New files.\n\nFrom-SVN: r130812", "tree": {"sha": "aab7a215c62fc85b658d90381374889f961afcaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aab7a215c62fc85b658d90381374889f961afcaa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b41ab480565d08ba5535f219e9f607e15d9c47e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b41ab480565d08ba5535f219e9f607e15d9c47e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b41ab480565d08ba5535f219e9f607e15d9c47e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b41ab480565d08ba5535f219e9f607e15d9c47e0/comments", "author": {"login": "TurboGit", "id": 467069, "node_id": "MDQ6VXNlcjQ2NzA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/467069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TurboGit", "html_url": "https://github.com/TurboGit", "followers_url": "https://api.github.com/users/TurboGit/followers", "following_url": "https://api.github.com/users/TurboGit/following{/other_user}", "gists_url": "https://api.github.com/users/TurboGit/gists{/gist_id}", "starred_url": "https://api.github.com/users/TurboGit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TurboGit/subscriptions", "organizations_url": "https://api.github.com/users/TurboGit/orgs", "repos_url": "https://api.github.com/users/TurboGit/repos", "events_url": "https://api.github.com/users/TurboGit/events{/privacy}", "received_events_url": "https://api.github.com/users/TurboGit/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aa4095c911de99a3f5bec44da96299ec8945f88a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa4095c911de99a3f5bec44da96299ec8945f88a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa4095c911de99a3f5bec44da96299ec8945f88a"}], "stats": {"total": 315, "additions": 290, "deletions": 25}, "files": [{"sha": "6c5d440a568619666f3f77bc066e3a2a4ecda64f", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 83, "deletions": 23, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b41ab480565d08ba5535f219e9f607e15d9c47e0/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b41ab480565d08ba5535f219e9f607e15d9c47e0/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=b41ab480565d08ba5535f219e9f607e15d9c47e0", "patch": "@@ -76,7 +76,12 @@\n #include \"version.h\"\n #endif\n \n-#if defined (__MINGW32__)\n+#if defined (RTX)\n+#include <windows.h>\n+#include <Rtapi.h>\n+#include <sys/utime.h>\n+\n+#elif defined (__MINGW32__)\n \n #include \"mingw32.h\"\n #include <sys/utime.h>\n@@ -995,7 +1000,12 @@ __gnat_tmp_name (char *tmp_filename)\n \n DIR* __gnat_opendir (char *name)\n {\n-#ifdef __MINGW32__\n+#if defined (RTX)\n+  /* Not supported in RTX */\n+\n+  return NULL;\n+\n+#elif defined (__MINGW32__)\n   TCHAR wname[GNAT_MAX_PATH_LEN];\n \n   S2WSU (wname, name, GNAT_MAX_PATH_LEN);\n@@ -1012,7 +1022,11 @@ DIR* __gnat_opendir (char *name)\n char *\n __gnat_readdir (DIR *dirp, char *buffer, int *len)\n {\n-#if defined (__MINGW32__)\n+#if defined (RTX)\n+  /* Not supported in RTX */\n+\n+  return NULL;\n+#elif defined (__MINGW32__)\n   struct _tdirent *dirent = _treaddir ((_TDIR*)dirp);\n \n   if (dirent != NULL)\n@@ -1054,7 +1068,12 @@ __gnat_readdir (DIR *dirp, char *buffer, int *len)\n \n int __gnat_closedir (DIR *dirp)\n {\n-#ifdef __MINGW32__\n+#if defined (RTX)\n+  /* Not supported in RTX */\n+\n+  return 0;\n+\n+#elif defined (__MINGW32__)\n   return _tclosedir ((_TDIR*)dirp);\n \n #else\n@@ -1074,7 +1093,7 @@ __gnat_readdir_is_thread_safe (void)\n #endif\n }\n \n-#ifdef _WIN32\n+#if defined (_WIN32) && !defined (RTX)\n /* Number of seconds between <Jan 1st 1601> and <Jan 1st 1970>.  */\n static const unsigned long long w32_epoch_offset = 11644473600ULL;\n \n@@ -1114,7 +1133,7 @@ __gnat_file_time_name (char *name)\n   close (fd);\n   return (OS_Time)ret;\n \n-#elif defined (_WIN32)\n+#elif defined (_WIN32) && !defined (RTX)\n   time_t ret = -1;\n   TCHAR wname[GNAT_MAX_PATH_LEN];\n \n@@ -1217,7 +1236,7 @@ __gnat_file_time_fd (int fd)\n   tot_secs += file_tsec * 2;\n   return (OS_Time) tot_secs;\n \n-#elif defined (_WIN32)\n+#elif defined (_WIN32) && !defined (RTX)\n   HANDLE h = (HANDLE) _get_osfhandle (fd);\n   time_t ret = win32_filetime (h);\n   return (OS_Time) ret;\n@@ -1247,7 +1266,7 @@ __gnat_set_file_time_name (char *name, time_t time_stamp)\n \n /* Code to implement __gnat_set_file_time_name for these systems.  */\n \n-#elif defined (_WIN32)\n+#elif defined (_WIN32) && !defined (RTX)\n   union\n   {\n     FILETIME ft_time;\n@@ -1462,7 +1481,7 @@ __gnat_get_libraries_from_registry (void)\n {\n   char *result = (char *) \"\";\n \n-#if defined (_WIN32) && ! defined (__vxworks) && ! defined (CROSS_DIRECTORY_STRUCTURE)\n+#if defined (_WIN32) && ! defined (__vxworks) && ! defined (CROSS_DIRECTORY_STRUCTURE) && ! defined (RTX)\n \n   HKEY reg_key;\n   DWORD name_size, value_size;\n@@ -1552,7 +1571,7 @@ __gnat_stat (char *name, struct stat *statbuf)\n int\n __gnat_file_exists (char *name)\n {\n-#ifdef __MINGW32__\n+#if defined (__MINGW32__) && !defined (RTX)\n   /*  On Windows do not use __gnat_stat() because a bug in Microsoft\n   _stat() routine. When the system time-zone is set with a negative\n   offset the _stat() routine fails on specific files like CON:  */\n@@ -1720,7 +1739,10 @@ __gnat_portable_spawn (char *args[])\n   int finished ATTRIBUTE_UNUSED;\n   int pid ATTRIBUTE_UNUSED;\n \n-#if defined (MSDOS) || defined (_WIN32)\n+#if defined (__vxworks) || defined(__nucleus__) || defined(RTX)\n+  return -1;\n+\n+#elif defined (MSDOS) || defined (_WIN32)\n   /* args[0] must be quotes as it could contain a full pathname with spaces */\n   char *args_0 = args[0];\n   args[0] = (char *)xmalloc (strlen (args_0) + 3);\n@@ -1739,8 +1761,6 @@ __gnat_portable_spawn (char *args[])\n   else\n     return status;\n \n-#elif defined (__vxworks) || defined(__nucleus__)\n-  return -1;\n #else\n \n #ifdef __EMX__\n@@ -1809,7 +1829,7 @@ __gnat_dup2 (int oldfd, int newfd)\n \n /* WIN32 code to implement a wait call that wait for any child process.  */\n \n-#ifdef _WIN32\n+#if defined (_WIN32) && !defined (RTX)\n \n /* Synchronization code, to be thread safe.  */\n \n@@ -2021,7 +2041,10 @@ __gnat_portable_no_block_spawn (char *args[])\n {\n   int pid = 0;\n \n-#if defined (__EMX__) || defined (MSDOS)\n+#if defined (__vxworks) || defined (__nucleus__) || defined (RTX)\n+  return -1;\n+\n+#elif defined (__EMX__) || defined (MSDOS)\n \n   /* ??? For PC machines I (Franco) don't know the system calls to implement\n      this routine. So I'll fake it as follows. This routine will behave\n@@ -2039,9 +2062,6 @@ __gnat_portable_no_block_spawn (char *args[])\n   pid = win32_no_block_spawn (args[0], args);\n   return pid;\n \n-#elif defined (__vxworks) || defined (__nucleus__)\n-  return -1;\n-\n #else\n   pid = fork ();\n \n@@ -2067,16 +2087,17 @@ __gnat_portable_wait (int *process_status)\n   int status = 0;\n   int pid = 0;\n \n-#if defined (_WIN32)\n+#if defined (__vxworks) || defined (__nucleus__) || defined (RTX)\n+  /* Not sure what to do here, so do same as __EMX__ case, i.e., nothing but\n+     return zero.  */\n+\n+#elif defined (_WIN32)\n \n   pid = win32_wait (&status);\n \n #elif defined (__EMX__) || defined (MSDOS)\n   /* ??? See corresponding comment in portable_no_block_spawn.  */\n \n-#elif defined (__vxworks) || defined (__nucleus__)\n-  /* Not sure what to do here, so do same as __EMX__ case, i.e., nothing but\n-     return zero.  */\n #else\n \n   pid = waitpid (-1, &status, 0);\n@@ -2218,7 +2239,7 @@ __gnat_locate_exec_on_path (char *exec_name)\n {\n   char *apath_val;\n \n-#ifdef _WIN32\n+#if defined (_WIN32) && !defined (RTX)\n   TCHAR *wpath_val = _tgetenv (_T(\"PATH\"));\n   TCHAR *wapath_val;\n   /* In Win32 systems we expand the PATH as for XP environment\n@@ -2990,3 +3011,42 @@ __gnat_sals_init_using_constructors ()\n    return 1;\n #endif\n }\n+\n+/* In RTX mode, the procedure to get the time (as file time) is different\n+   in RTSS mode and Win32 mode. In order to avoid duplicating an Ada file,\n+   we introduce an intermediate procedure to link against the corresponding\n+   one in each situation. */\n+#ifdef RTX\n+\n+void GetTimeAsFileTime(LPFILETIME pTime)\n+{\n+#ifdef RTSS\n+  RtGetRtssTimeAsFileTime (pTime); /* RTSS interface */\n+#else\n+  GetSystemTimeAsFileTime (pTime); /* w32 interface */\n+#endif\n+}\n+#endif\n+\n+#if defined (linux)\n+/* pthread affinity support */\n+\n+#ifdef CPU_SETSIZE\n+#include <pthread.h>\n+int\n+__gnat_pthread_setaffinity_np (pthread_t th,\n+\t\t\t       size_t cpusetsize,\n+\t\t\t       const cpu_set_t *cpuset)\n+{\n+  return pthread_setaffinity_np (th, cpusetsize, cpuset);\n+}\n+#else\n+int\n+__gnat_pthread_setaffinity_np (pthread_t th,\n+\t\t\t       size_t cpusetsize,\n+\t\t\t       const void *cpuset)\n+{\n+  return 0;\n+}\n+#endif\n+#endif"}, {"sha": "7299123deb72a6e1aefec7619fe90d2241ea5323", "filename": "gcc/ada/s-osinte-linux.ads", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b41ab480565d08ba5535f219e9f607e15d9c47e0/gcc%2Fada%2Fs-osinte-linux.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b41ab480565d08ba5535f219e9f607e15d9c47e0/gcc%2Fada%2Fs-osinte-linux.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-linux.ads?ref=b41ab480565d08ba5535f219e9f607e15d9c47e0", "patch": "@@ -241,7 +241,8 @@ package System.OS_Interface is\n    function sysconf (name : int) return long;\n    pragma Import (C, sysconf);\n \n-   SC_CLK_TCK : constant := 2;\n+   SC_CLK_TCK          : constant := 2;\n+   SC_NPROCESSORS_ONLN : constant := 84;\n \n    -------------------------\n    -- Priority Scheduling --\n@@ -253,7 +254,7 @@ package System.OS_Interface is\n \n    function To_Target_Priority\n      (Prio : System.Any_Priority) return Interfaces.C.int;\n-   --  Maps System.Any_Priority to a POSIX priority.\n+   --  Maps System.Any_Priority to a POSIX priority\n \n    -------------\n    -- Process --\n@@ -273,6 +274,7 @@ package System.OS_Interface is\n \n    type Thread_Body is access\n      function (arg : System.Address) return System.Address;\n+   pragma Convention (C, Thread_Body);\n \n    function Thread_Body_Access is new\n      Ada.Unchecked_Conversion (System.Address, Thread_Body);\n@@ -453,12 +455,31 @@ package System.OS_Interface is\n    pragma Import (C, pthread_getspecific, \"pthread_getspecific\");\n \n    type destructor_pointer is access procedure (arg : System.Address);\n+   pragma Convention (C, destructor_pointer);\n \n    function pthread_key_create\n      (key        : access pthread_key_t;\n       destructor : destructor_pointer) return int;\n    pragma Import (C, pthread_key_create, \"pthread_key_create\");\n \n+   CPU_SETSIZE : constant := 1_024;\n+\n+   type bit_field is array (1 .. CPU_SETSIZE) of Boolean;\n+   for bit_field'Size use CPU_SETSIZE;\n+   pragma Pack (bit_field);\n+   pragma Convention (C, bit_field);\n+\n+   type cpu_set_t is record\n+      bits : bit_field;\n+   end record;\n+   pragma Convention (C, cpu_set_t);\n+\n+   function pthread_setaffinity_np\n+     (thread     : pthread_t;\n+      cpusetsize : size_t;\n+      cpuset     : access cpu_set_t) return int;\n+   pragma Import (C, pthread_setaffinity_np, \"__gnat_pthread_setaffinity_np\");\n+\n private\n \n    type sigset_t is array (0 .. 127) of unsigned_char;"}, {"sha": "21e2a6589c670333209928d9991222ad7b8520b8", "filename": "gcc/ada/s-taprop-linux.adb", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b41ab480565d08ba5535f219e9f607e15d9c47e0/gcc%2Fada%2Fs-taprop-linux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b41ab480565d08ba5535f219e9f607e15d9c47e0/gcc%2Fada%2Fs-taprop-linux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-linux.adb?ref=b41ab480565d08ba5535f219e9f607e15d9c47e0", "patch": "@@ -44,6 +44,9 @@ with Interfaces.C;\n --  used for int\n --           size_t\n \n+with System.Task_Info;\n+--  used for Unspecified_Task_Info\n+\n with System.Tasking.Debug;\n --  used for Known_Tasks\n \n@@ -87,6 +90,7 @@ package body System.Task_Primitives.Operations is\n    use System.Parameters;\n    use System.OS_Primitives;\n    use System.Storage_Elements;\n+   use System.Task_Info;\n \n    ----------------\n    -- Local Data --\n@@ -764,6 +768,13 @@ package body System.Task_Primitives.Operations is\n \n    procedure Enter_Task (Self_ID : Task_Id) is\n    begin\n+      if Self_ID.Common.Task_Info /= null\n+        and then\n+          Self_ID.Common.Task_Info.CPU_Affinity = No_CPU\n+      then\n+         raise Invalid_CPU_Number;\n+      end if;\n+\n       Self_ID.Common.LL.Thread := pthread_self;\n \n       Specific.Set (Self_ID);\n@@ -911,6 +922,19 @@ package body System.Task_Primitives.Operations is\n \n       Succeeded := Result = 0;\n \n+      --  Handle Task_Info\n+\n+      if T.Common.Task_Info /= null then\n+         if T.Common.Task_Info.CPU_Affinity /= Task_Info.Any_CPU then\n+            Result :=\n+              pthread_setaffinity_np\n+                (T.Common.LL.Thread,\n+                 CPU_SETSIZE / 8,\n+                 T.Common.Task_Info.CPU_Affinity'Access);\n+            pragma Assert (Result = 0);\n+         end if;\n+      end if;\n+\n       Result := pthread_attr_destroy (Attributes'Access);\n       pragma Assert (Result = 0);\n "}, {"sha": "0510a630824551c455a4afc0830db3c626d6ff2a", "filename": "gcc/ada/s-tasinf-linux.adb", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b41ab480565d08ba5535f219e9f607e15d9c47e0/gcc%2Fada%2Fs-tasinf-linux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b41ab480565d08ba5535f219e9f607e15d9c47e0/gcc%2Fada%2Fs-tasinf-linux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasinf-linux.adb?ref=b41ab480565d08ba5535f219e9f607e15d9c47e0", "patch": "@@ -0,0 +1,57 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                     S Y S T E M . T A S K _ I N F O                      --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--            Copyright (C) 2007, Free Software Foundation, Inc.            --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the  Free Software Foundation,  51  Franklin  Street,  Fifth  Floor, --\n+-- Boston, MA 02110-1301, USA.                                              --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This is the GNU/Linux version of this module\n+\n+package body System.Task_Info is\n+\n+   N_CPU : Natural := 0;\n+   pragma Atomic (N_CPU);\n+   --  Cache CPU number. Use pragma Atomic to avoid a race condition when\n+   --  setting N_CPU in Number_Of_Processors below.\n+\n+   --------------------------\n+   -- Number_Of_Processors --\n+   --------------------------\n+\n+   function Number_Of_Processors return Positive is\n+   begin\n+      if N_CPU = 0 then\n+         N_CPU := Natural\n+           (OS_Interface.sysconf (OS_Interface.SC_NPROCESSORS_ONLN));\n+      end if;\n+\n+      return N_CPU;\n+   end Number_Of_Processors;\n+\n+end System.Task_Info;"}, {"sha": "603a1189b6b9998e79b782be6ec732541d01b1ea", "filename": "gcc/ada/s-tasinf-linux.ads", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b41ab480565d08ba5535f219e9f607e15d9c47e0/gcc%2Fada%2Fs-tasinf-linux.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b41ab480565d08ba5535f219e9f607e15d9c47e0/gcc%2Fada%2Fs-tasinf-linux.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasinf-linux.ads?ref=b41ab480565d08ba5535f219e9f607e15d9c47e0", "patch": "@@ -0,0 +1,103 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                     S Y S T E M . T A S K _ I N F O                      --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--            Copyright (C) 2007, Free Software Foundation, Inc.            --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the  Free Software Foundation,  51  Franklin  Street,  Fifth  Floor, --\n+-- Boston, MA 02110-1301, USA.                                              --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package contains the definitions and routines associated with the\n+--  implementation and use of the Task_Info pragma. It is specialized\n+--  appropriately for targets that make use of this pragma.\n+\n+--  Note: the compiler generates direct calls to this interface, via Rtsfind.\n+--  Any changes to this interface may require corresponding compiler changes.\n+\n+--  This unit may be used directly from an application program by providing\n+--  an appropriate WITH, and the interface can be expected to remain stable.\n+\n+--  This is the GNU/Linux version of this module.\n+\n+with System.OS_Interface;\n+\n+package System.Task_Info is\n+   pragma Preelaborate;\n+   pragma Elaborate_Body;\n+   --  To ensure that a body is allowed\n+\n+   --  Windows provides a way to define the ideal processor to use for a given\n+   --  thread. The ideal processor is not necessarily the one that will be used\n+   --  by the OS but the OS will always try to schedule this thread to the\n+   --  specified processor if it is available.\n+\n+   --  The Task_Info pragma:\n+\n+   --    pragma Task_Info (EXPRESSION);\n+\n+   --  allows the specification on a task by task basis of a value of type\n+   --  System.Task_Info.Task_Info_Type to be passed to a task when it is\n+   --  created. The specification of this type, and the effect on the task\n+   --  that is created is target dependent.\n+\n+   --  The Task_Info pragma appears within a task definition (compare the\n+   --  definition and implementation of pragma Priority). If no such pragma\n+   --  appears, then the value Unspecified_Task_Info is passed. If a pragma\n+   --  is present, then it supplies an alternative value. If the argument of\n+   --  the pragma is a discriminant reference, then the value can be set on\n+   --  a task by task basis by supplying the appropriate discriminant value.\n+\n+   --  Note that this means that the type used for Task_Info_Type must be\n+   --  suitable for use as a discriminant (i.e. a scalar or access type).\n+\n+   -----------------------\n+   -- Thread Attributes --\n+   -----------------------\n+\n+   subtype CPU_Set is System.OS_Interface.cpu_set_t;\n+\n+   Any_CPU : constant CPU_Set := (bits => (others => True));\n+   No_CPU  : constant CPU_Set := (bits => (others => False));\n+\n+   Invalid_CPU_Number : exception;\n+   --  Raised when an invalid CPU mask has been specified\n+   --  i.e. An empty CPU set\n+\n+   type Thread_Attributes is record\n+      CPU_Affinity : aliased CPU_Set := Any_CPU;\n+   end record;\n+\n+   Default_Thread_Attributes : constant Thread_Attributes := (others => <>);\n+\n+   type Task_Info_Type is access all Thread_Attributes;\n+\n+   Unspecified_Task_Info : constant Task_Info_Type := null;\n+\n+   function Number_Of_Processors return Positive;\n+   --  Returns the number of processors on the running host\n+\n+end System.Task_Info;"}]}