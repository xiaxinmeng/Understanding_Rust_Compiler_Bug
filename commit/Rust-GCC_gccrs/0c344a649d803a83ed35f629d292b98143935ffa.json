{"sha": "0c344a649d803a83ed35f629d292b98143935ffa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGMzNDRhNjQ5ZDgwM2E4M2VkMzVmNjI5ZDI5MmI5ODE0MzkzNWZmYQ==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-09-01T22:02:19Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-09-01T22:03:25Z"}, "message": "Use the determined lower bound of the range of offsets in a PLUS_EXPR.\n\ngcc/ChangeLog:\n\n\t* builtins.c (compute_objsize):  Only replace the upper bound\n\tof a POINTER_PLUS offset when it's less than the lower bound.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/Wstringop-overflow.c: Remove xfails.\n\t* gcc.dg/Wstringop-overflow-42.c: New test.\n\t* gcc.dg/Wstringop-overread-4.c: New test.", "tree": {"sha": "069c12b4eb9f1263b68f13d0a2027908cb58204f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/069c12b4eb9f1263b68f13d0a2027908cb58204f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c344a649d803a83ed35f629d292b98143935ffa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c344a649d803a83ed35f629d292b98143935ffa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c344a649d803a83ed35f629d292b98143935ffa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c344a649d803a83ed35f629d292b98143935ffa/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1c59b31ef7adc832405209e9e2a77212284abd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1c59b31ef7adc832405209e9e2a77212284abd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1c59b31ef7adc832405209e9e2a77212284abd7"}], "stats": {"total": 137, "additions": 129, "deletions": 8}, "files": [{"sha": "97f1a184dc61b01e4e3d6c004be059662d04754b", "filename": "gcc/builtins.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c344a649d803a83ed35f629d292b98143935ffa/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c344a649d803a83ed35f629d292b98143935ffa/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=0c344a649d803a83ed35f629d292b98143935ffa", "patch": "@@ -4367,12 +4367,17 @@ compute_objsize (tree ptr, int ostype, access_ref *pref,\n \t     offset to the maximum.  */\n \t  offset_int orng[2];\n \t  tree off = gimple_assign_rhs2 (stmt);\n-\t  if (!get_range (off, SIGNED, orng, rvals)\n-\t      || !wi::les_p (orng[0], orng[1]))\n+\t  if (!get_range (off, SIGNED, orng, rvals))\n \t    {\n \t      orng[0] = wi::to_offset (TYPE_MIN_VALUE (ptrdiff_type_node));\n \t      orng[1] = wi::to_offset (TYPE_MAX_VALUE (ptrdiff_type_node));\n \t    }\n+\t  else if (wi::lts_p (orng[1], orng[0]))\n+\t    /* The upper bound is less than the lower bound when the integer\n+\t       operand is the result of signed integer conversion to sizetype,\n+\t       as in P + OFF + CST where OFF > 0.\n+\t       Correct just the upper bound.  */\n+\t    orng[1] = wi::to_offset (TYPE_MAX_VALUE (ptrdiff_type_node));\n \n \t  pref->offrng[0] += orng[0];\n \t  pref->offrng[1] += orng[1];"}, {"sha": "21a675ab7c72880893aff6549c3d64923f26b854", "filename": "gcc/testsuite/gcc.dg/Wstringop-overflow-42.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c344a649d803a83ed35f629d292b98143935ffa/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-42.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c344a649d803a83ed35f629d292b98143935ffa/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-42.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-42.c?ref=0c344a649d803a83ed35f629d292b98143935ffa", "patch": "@@ -0,0 +1,58 @@\n+/* Verify -Wstringop-overflow a with destination pointer pointing either\n+   before the beginning or past the end of an object.\n+  { dg-do compile }\n+  { dg-options \"-O -Wall -Wno-array-bounds -Wno-restrict\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+char* strcpy (char *, const char *);\n+\n+\n+extern char a[1];\n+\n+volatile char *d;\n+\n+void cpy_si_1_max (int i, const char *s)\n+{\n+  if (i < 1) i = 1;\n+  d = strcpy (a + i, s);      // { dg-warning \"writing 1 or more bytes into a region of size 0\" }\n+  d = strcpy (a + i + 1, s);  // { dg-warning \"writing 1 or more bytes into a region of size 0\" }\n+}\n+\n+void cpy_ui_1_max (unsigned i, const char *s)\n+{\n+  if (i < 1) i = 1;\n+  d = strcpy (a + i, s);      // { dg-warning \"writing 1 or more bytes into a region of size 0\" }\n+  d = strcpy (a + i + 1, s);  // { dg-warning \"writing 1 or more bytes into a region of size 0\" \"\" { xfail ilp32 } }\n+}\n+\n+void cpy_sl_1_max (long i, const char *s)\n+{\n+  if (i < 1) i = 1;\n+  d = strcpy (a + i, s);      // { dg-warning \"writing 1 or more bytes into a region of size 0\" }\n+  d = strcpy (a + i + 1, s);  // { dg-warning \"writing 1 or more bytes into a region of size 0\" }\n+}\n+\n+void cpy_ul_1_max (unsigned long i, const char *s)\n+{\n+  if (i < 1) i = 1;\n+  d = strcpy (a + i, s);      // { dg-warning \"writing 1 or more bytes into a region of size 0\" }\n+  d = strcpy (a + i + 1, s);  // { dg-warning \"writing 1 or more bytes into a region of size 0\" \"\" { xfail *-*-* } }\n+}\n+\n+\n+void cpy_si_min_m1 (int i, const char *s)\n+{\n+  if (i > -1) i = -1;\n+  d = strcpy (a + i - 1, s);  // { dg-warning \"writing 1 or more bytes into a region of size 0\" }\n+  d = strcpy (a + i, s);      // { dg-warning \"writing 1 or more bytes into a region of size 0\" }\n+  d = strcpy (a + i + 2, s);\n+}\n+\n+void cpy_sl_min_m1 (long i, const char *s)\n+{\n+  if (i > -1) i = -1;\n+  d = strcpy (a + i - 1, s);  // { dg-warning \"writing 1 or more bytes into a region of size 0\" }\n+  d = strcpy (a + i, s);      // { dg-warning \"writing 1 or more bytes into a region of size 0\" }\n+  d = strcpy (a + i + 2, s);\n+}"}, {"sha": "c615dae03fc31ce3e000c6cdf56775e7b9bcb2a2", "filename": "gcc/testsuite/gcc.dg/Wstringop-overflow.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c344a649d803a83ed35f629d292b98143935ffa/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c344a649d803a83ed35f629d292b98143935ffa/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow.c?ref=0c344a649d803a83ed35f629d292b98143935ffa", "patch": "@@ -51,8 +51,8 @@ void test_memcpy_array (const void *s)\n   T (a7 + UR (8, 9), s, 7);   /* { dg-warning \"writing 7 bytes into a region of size 0\" } */\n \n   T (a7 + UR (9, 10), s, 7);  /* { dg-warning \"writing 7 bytes into a region of size 0\" } */\n-  T (a7 + UR (DIFF_MAX, DIFF_MAX + (size_t)1), s, 7);  /* { dg-warning \"writing 7 bytes into a region of size 0\" \"pr85350\" { xfail *-*-* } } */\n-  T (a7 + UR (DIFF_MAX, SIZE_MAX), s, 7);  /* { dg-warning \"writing 7 bytes into a region of size 0\" \"pr85350\" { xfail *-*-*} } */\n+  T (a7 + UR (DIFF_MAX, DIFF_MAX + (size_t)1), s, 7);  /* { dg-warning \"writing 7 bytes into a region of size 0\" } */\n+  T (a7 + UR (DIFF_MAX, SIZE_MAX), s, 7);  /* { dg-warning \"writing 7 bytes into a region of size 0\" } */\n \n   /* This is valid.  */\n   char *d = a7 + 7;\n@@ -102,8 +102,8 @@ void test_strcpy_array (void)\n   T (a7 + UR (8, 9), \"012345\");   /* { dg-warning \"writing 7 bytes into a region of size 0\" } */\n \n   T (a7 + UR (9, 10), \"012345\");  /* { dg-warning \"writing 7 bytes into a region of size 0\" } */\n-  T (a7 + UR (DIFF_MAX, DIFF_MAX + (size_t)1), \"012345\");  /* { dg-warning \"writing 7 bytes into a region of size 0\" \"pr85350\" { xfail *-*-* } } */\n-  T (a7 + UR (DIFF_MAX, SIZE_MAX), \"012345\");  /* { dg-warning \"writing 7 bytes into a region of size 0\" \"pr85350\" { xfail *-*-* } } */\n+  T (a7 + UR (DIFF_MAX, DIFF_MAX + (size_t)1), \"012345\");  /* { dg-warning \"writing 7 bytes into a region of size 0\" } */\n+  T (a7 + UR (DIFF_MAX, SIZE_MAX), \"012345\");  /* { dg-warning \"writing 7 bytes into a region of size 0\" } */\n \n   char *d = a7 + 7;\n \n@@ -127,6 +127,6 @@ void test_strncpy_memarray (struct MemArray *p, const void *s)\n   T (p->a9 + UR (9, 10), s, 9);   /* { dg-warning \"writing 9 bytes into a region of size 0\" } */\n   T (p->a9 + UR (10, 11), s, 9);  /* { dg-warning \"writing 9 bytes into a region of size 0\" } */\n \n-  T (p->a9 + UR (DIFF_MAX, DIFF_MAX + (size_t)1), s, 1);  /* { dg-warning \"writing 1 byte into a region of size 0\" \"pr85350\" { xfail *-*-* } } */\n-  T (p->a9 + UR (DIFF_MAX, SIZE_MAX), s, 3);  /* { dg-warning \"writing 3 bytes into a region of size 0\" \"pr85350\" { xfail *-*-* } } */\n+  T (p->a9 + UR (DIFF_MAX, DIFF_MAX + (size_t)1), s, 1);  /* { dg-warning \"writing 1 byte into a region of size 0\" } */\n+  T (p->a9 + UR (DIFF_MAX, SIZE_MAX), s, 3);  /* { dg-warning \"writing 3 bytes into a region of size 0\" } */\n }"}, {"sha": "8248dad213b466cc663532a998a3649e05550fda", "filename": "gcc/testsuite/gcc.dg/Wstringop-overread-4.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c344a649d803a83ed35f629d292b98143935ffa/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overread-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c344a649d803a83ed35f629d292b98143935ffa/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overread-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overread-4.c?ref=0c344a649d803a83ed35f629d292b98143935ffa", "patch": "@@ -0,0 +1,58 @@\n+/* Verify -Wstringop-overread with a source pointer pointing either\n+   before the beginning or past the end of an object.\n+   { dg-do compile }\n+   { dg-options \"-O -Wall\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+size_t strlen (const char *);\n+\n+\n+extern char a[1];\n+\n+volatile size_t n;\n+\n+void len_si_1_max (int i)\n+{\n+  if (i < 1) i = 1;\n+  n = strlen (a + i);         // { dg-warning \"reading 1 or more bytes from a region of size 0\" }\n+  n = strlen (a + i + 1);     // { dg-warning \"reading 1 or more bytes from a region of size 0\" }\n+}\n+\n+void len_ui_1_max (unsigned i)\n+{\n+  if (i < 1) i = 1;\n+  n = strlen (a + i);         // { dg-warning \"reading 1 or more bytes from a region of size 0\" }\n+  n = strlen (a + i + 1);     // { dg-warning \"reading 1 or more bytes from a region of size 0\" \"\" { xfail ilp32 } }\n+}\n+\n+void len_sl_1_max (long i)\n+{\n+  if (i < 1) i = 1;\n+  n = strlen (a + i);         // { dg-warning \"reading 1 or more bytes from a region of size 0\" }\n+  n = strlen (a + i + 1);     // { dg-warning \"reading 1 or more bytes from a region of size 0\" }\n+}\n+\n+void len_ul_1_max (unsigned long i)\n+{\n+  if (i < 1) i = 1;\n+  n = strlen (a + i);         // { dg-warning \"reading 1 or more bytes from a region of size 0\" }\n+  n = strlen (a + i + 1);     // { dg-warning \"reading 1 or more bytes from a region of size 0\" \"\" { xfail *-*-* } }\n+}\n+\n+\n+void len_si_min_m1 (int i)\n+{\n+  if (i > -1) i = -1;\n+  n = strlen (a + i - 1);     // { dg-warning \"reading 1 or more bytes from a region of size 0\" \"\" { xfail lp64 } }\n+  n = strlen (a + i);         // { dg-warning \"reading 1 or more bytes from a region of size 0\" \"\" { xfail *-*-* } }\n+  n = strlen (a + i + 2);\n+}\n+\n+void len_sl_min_m1 (long i)\n+{\n+  if (i > -1) i = -1;\n+  n = strlen (a + i - 1);     // { dg-warning \"reading 1 or more bytes from a region of size 0\" }\n+  n = strlen (a + i);         // { dg-warning \"reading 1 or more bytes from a region of size 0\" \"\" { xfail *-*-* } }\n+  n = strlen (a + i + 2);\n+}"}]}