{"sha": "d0b042c68a4d689a3dbc865b2588469b2efaabfa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDBiMDQyYzY4YTRkNjg5YTNkYmM4NjViMjU4ODQ2OWIyZWZhYWJmYQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-01-22T10:20:00Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2019-01-22T10:20:00Z"}, "message": "sparc.c (parc_delegitimize_address): Recognize the GOT register and decoded HIGH/LO_SUM combinations for labels in...\n\n\t* config/sparc/sparc.c (parc_delegitimize_address): Recognize the GOT\n\tregister and decoded HIGH/LO_SUM combinations for labels in PIC mode.\n\nFrom-SVN: r268145", "tree": {"sha": "a1d91798c2d570d07003a22b8765dec9bd3dba5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1d91798c2d570d07003a22b8765dec9bd3dba5b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0b042c68a4d689a3dbc865b2588469b2efaabfa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0b042c68a4d689a3dbc865b2588469b2efaabfa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0b042c68a4d689a3dbc865b2588469b2efaabfa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0b042c68a4d689a3dbc865b2588469b2efaabfa/comments", "author": null, "committer": null, "parents": [{"sha": "a14e30837f2e90ea075a850609c7076d9615b83a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a14e30837f2e90ea075a850609c7076d9615b83a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a14e30837f2e90ea075a850609c7076d9615b83a"}], "stats": {"total": 33, "additions": 22, "deletions": 11}, "files": [{"sha": "e45075c7e62a1a5c2d0209f3aea59500c876a93f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b042c68a4d689a3dbc865b2588469b2efaabfa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b042c68a4d689a3dbc865b2588469b2efaabfa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d0b042c68a4d689a3dbc865b2588469b2efaabfa", "patch": "@@ -1,3 +1,8 @@\n+2019-01-22  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* config/sparc/sparc.c (parc_delegitimize_address): Recognize the GOT\n+\tregister and decoded HIGH/LO_SUM combinations for labels in PIC mode.\n+\n 2019-01-22  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/88044"}, {"sha": "da909c0c6e7c42e8cb5015c09299f57578c12017", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0b042c68a4d689a3dbc865b2588469b2efaabfa/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0b042c68a4d689a3dbc865b2588469b2efaabfa/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=d0b042c68a4d689a3dbc865b2588469b2efaabfa", "patch": "@@ -4995,17 +4995,23 @@ sparc_delegitimize_address (rtx x)\n \n   /* This is generated by mov{si,di}_pic_label_ref in PIC mode.  */\n   if (GET_CODE (x) == MINUS\n-      && sparc_pic_register_p (XEXP (x, 0))\n-      && GET_CODE (XEXP (x, 1)) == LO_SUM\n-      && GET_CODE (XEXP (XEXP (x, 1), 1)) == UNSPEC\n-      && XINT (XEXP (XEXP (x, 1), 1), 1) == UNSPEC_MOVE_PIC_LABEL)\n-    {\n-      x = XVECEXP (XEXP (XEXP (x, 1), 1), 0, 0);\n-      gcc_assert (GET_CODE (x) == LABEL_REF\n-\t\t  || (GET_CODE (x) == CONST\n-\t\t      && GET_CODE (XEXP (x, 0)) == PLUS\n-\t\t      && GET_CODE (XEXP (XEXP (x, 0), 0)) == LABEL_REF\n-\t\t      && GET_CODE (XEXP (XEXP (x, 0), 1)) == CONST_INT));\n+      && (XEXP (x, 0) == global_offset_table_rtx\n+\t  || sparc_pic_register_p (XEXP (x, 0))))\n+    {\n+      rtx y = XEXP (x, 1);\n+\n+      if (GET_CODE (y) == LO_SUM)\n+\ty = XEXP (y, 1);\n+\n+      if (GET_CODE (y) == UNSPEC && XINT (y, 1) == UNSPEC_MOVE_PIC_LABEL)\n+\t{\n+\t  x = XVECEXP (y, 0, 0);\n+\t  gcc_assert (GET_CODE (x) == LABEL_REF\n+\t\t      || (GET_CODE (x) == CONST\n+\t\t\t  && GET_CODE (XEXP (x, 0)) == PLUS\n+\t\t\t  && GET_CODE (XEXP (XEXP (x, 0), 0)) == LABEL_REF\n+\t\t\t  && GET_CODE (XEXP (XEXP (x, 0), 1)) == CONST_INT));\n+\t}\n     }\n \n   return x;"}]}