{"sha": "132235c30fbb2f660e93d72578e95aeb3c7a932f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTMyMjM1YzMwZmJiMmY2NjBlOTNkNzI1NzhlOTVhZWIzYzdhOTMyZg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2019-10-07T15:37:52Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2019-10-07T15:37:52Z"}, "message": "call.c (resolve_args): Use cp_expr_loc_or_input_loc in one place.\n\n/cp\n2019-10-07  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* call.c (resolve_args): Use cp_expr_loc_or_input_loc in one place.\n\t* decl.c (grokdeclarator): Use id_loc in one place.\n\t* decl2.c (build_anon_union_vars): Use DECL_SOURCE_LOCATION.\n\t* parser.c (cp_parser_delete_expression): Fix the location of the\n\treturned expression.\n\t(cp_parser_throw_expression): Likewise.\n\t* pt.c (determine_specialization): Use DECL_SOURCE_LOCATION.\n\n/testsuite\n2019-10-07  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* g++.dg/diagnostic/not-a-function-template-1.C: New.\n\t* g++.dg/template/crash107.C: Adjust expected location.\n\t* g++.dg/template/dependent-expr1.C: Check locations.\n\t* g++.dg/template/error17.C: Check location.\n\nFrom-SVN: r276661", "tree": {"sha": "05dde3d801b7de601074260a0bb131024753a7bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05dde3d801b7de601074260a0bb131024753a7bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/132235c30fbb2f660e93d72578e95aeb3c7a932f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/132235c30fbb2f660e93d72578e95aeb3c7a932f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/132235c30fbb2f660e93d72578e95aeb3c7a932f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/132235c30fbb2f660e93d72578e95aeb3c7a932f/comments", "author": null, "committer": null, "parents": [{"sha": "dcd2ca63ec5c467decb70db983fc19a8329f67dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcd2ca63ec5c467decb70db983fc19a8329f67dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcd2ca63ec5c467decb70db983fc19a8329f67dc"}], "stats": {"total": 84, "additions": 68, "deletions": 16}, "files": [{"sha": "90cab94e88ea5ffa6536b68486ab1e0868f76fb2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/132235c30fbb2f660e93d72578e95aeb3c7a932f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/132235c30fbb2f660e93d72578e95aeb3c7a932f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=132235c30fbb2f660e93d72578e95aeb3c7a932f", "patch": "@@ -1,3 +1,13 @@\n+2019-10-07  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* call.c (resolve_args): Use cp_expr_loc_or_input_loc in one place.\n+\t* decl.c (grokdeclarator): Use id_loc in one place.\n+\t* decl2.c (build_anon_union_vars): Use DECL_SOURCE_LOCATION.\n+\t* parser.c (cp_parser_delete_expression): Fix the location of the\n+\treturned expression.\n+\t(cp_parser_throw_expression): Likewise.\n+\t* pt.c (determine_specialization): Use DECL_SOURCE_LOCATION.\n+\n 2019-10-05  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/91369 - Implement P0784R7: constexpr new"}, {"sha": "6c9acac4614d27fec215be22d3a09dc921815518", "filename": "gcc/cp/call.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/132235c30fbb2f660e93d72578e95aeb3c7a932f/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/132235c30fbb2f660e93d72578e95aeb3c7a932f/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=132235c30fbb2f660e93d72578e95aeb3c7a932f", "patch": "@@ -4381,7 +4381,8 @@ resolve_args (vec<tree, va_gc> *args, tsubst_flags_t complain)\n       else if (VOID_TYPE_P (TREE_TYPE (arg)))\n \t{\n \t  if (complain & tf_error)\n-\t    error (\"invalid use of void expression\");\n+\t    error_at (cp_expr_loc_or_input_loc (arg),\n+\t\t      \"invalid use of void expression\");\n \t  return NULL;\n \t}\n       else if (invalid_nonstatic_memfn_p (EXPR_LOCATION (arg), arg, complain))"}, {"sha": "e4053679362af84302d1dfb557a3241ac120fa54", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/132235c30fbb2f660e93d72578e95aeb3c7a932f/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/132235c30fbb2f660e93d72578e95aeb3c7a932f/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=132235c30fbb2f660e93d72578e95aeb3c7a932f", "patch": "@@ -12754,8 +12754,8 @@ grokdeclarator (const cp_declarator *declarator,\n \t\ttree tmpl = TREE_OPERAND (unqualified_id, 0);\n \t\tif (variable_template_p (tmpl))\n \t\t  {\n-\t\t    error (\"specialization of variable template %qD \"\n-\t\t\t   \"declared as function\", tmpl);\n+\t\t    error_at (id_loc, \"specialization of variable template \"\n+\t\t\t      \"%qD declared as function\", tmpl);\n \t\t    inform (DECL_SOURCE_LOCATION (tmpl),\n \t\t\t    \"variable template declared here\");\n \t\t    return error_mark_node;"}, {"sha": "a28e7762a34cbc1a7330b455512fa5ba20aa66bf", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/132235c30fbb2f660e93d72578e95aeb3c7a932f/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/132235c30fbb2f660e93d72578e95aeb3c7a932f/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=132235c30fbb2f660e93d72578e95aeb3c7a932f", "patch": "@@ -1608,7 +1608,8 @@ build_anon_union_vars (tree type, tree object)\n      just give an error.  */\n   if (TREE_CODE (type) != UNION_TYPE)\n     {\n-      error (\"anonymous struct not inside named type\");\n+      error_at (DECL_SOURCE_LOCATION (TYPE_MAIN_DECL (type)),\n+\t\t\"anonymous struct not inside named type\");\n       return error_mark_node;\n     }\n "}, {"sha": "c61e0b2cb9d0cbee372610f45041ba5f68beb284", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/132235c30fbb2f660e93d72578e95aeb3c7a932f/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/132235c30fbb2f660e93d72578e95aeb3c7a932f/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=132235c30fbb2f660e93d72578e95aeb3c7a932f", "patch": "@@ -9014,6 +9014,7 @@ cp_parser_delete_expression (cp_parser* parser)\n   bool global_scope_p;\n   bool array_p;\n   tree expression;\n+  location_t start_loc = cp_lexer_peek_token (parser->lexer)->location;\n \n   /* Look for the optional `::' operator.  */\n   global_scope_p\n@@ -9043,8 +9044,18 @@ cp_parser_delete_expression (cp_parser* parser)\n   if (cp_parser_non_integral_constant_expression (parser, NIC_DEL))\n     return error_mark_node;\n \n-  return delete_sanity (expression, NULL_TREE, array_p, global_scope_p,\n-\t\t\ttf_warning_or_error);\n+  /* Construct a location e.g.:\n+       delete [ ] ptr\n+       ^~~~~~~~~~~~~~\n+     with caret == start at the start of the \"delete\" token, and\n+     the end at the end of the final token we consumed.  */\n+  location_t combined_loc = make_location (start_loc, start_loc,\n+\t\t\t\t\t   parser->lexer);\n+  expression = delete_sanity (expression, NULL_TREE, array_p,\n+\t\t\t      global_scope_p, tf_warning_or_error);\n+  protected_set_expr_location (expression, combined_loc);\n+\n+  return expression;\n }\n \n /* Returns 1 if TOKEN may start a cast-expression and isn't '++', '--',\n@@ -25827,6 +25838,7 @@ cp_parser_throw_expression (cp_parser* parser)\n {\n   tree expression;\n   cp_token* token;\n+  location_t start_loc = cp_lexer_peek_token (parser->lexer)->location;\n \n   cp_parser_require_keyword (parser, RID_THROW, RT_THROW);\n   token = cp_lexer_peek_token (parser->lexer);\n@@ -25842,7 +25854,17 @@ cp_parser_throw_expression (cp_parser* parser)\n   else\n     expression = cp_parser_assignment_expression (parser);\n \n-  return build_throw (expression);\n+  /* Construct a location e.g.:\n+       throw x\n+       ^~~~~~~\n+     with caret == start at the start of the \"throw\" token, and\n+     the end at the end of the final token we consumed.  */\n+  location_t combined_loc = make_location (start_loc, start_loc,\n+\t\t\t\t\t   parser->lexer);\n+  expression = build_throw (expression);\n+  protected_set_expr_location (expression, combined_loc);\n+\n+  return expression;\n }\n \n /* GNU Extensions */"}, {"sha": "6310e7b399beb5abda2daae854e6cd8cee6597dd", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/132235c30fbb2f660e93d72578e95aeb3c7a932f/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/132235c30fbb2f660e93d72578e95aeb3c7a932f/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=132235c30fbb2f660e93d72578e95aeb3c7a932f", "patch": "@@ -2137,7 +2137,8 @@ determine_specialization (tree template_id,\n \n   if (TREE_CODE (decl) == FUNCTION_DECL && !is_overloaded_fn (fns))\n     {\n-      error (\"%qD is not a function template\", fns);\n+      error_at (DECL_SOURCE_LOCATION (decl),\n+\t\t\"%qD is not a function template\", fns);\n       return error_mark_node;\n     }\n   else if (VAR_P (decl) && !variable_template_p (fns))\n@@ -2416,7 +2417,8 @@ determine_specialization (tree template_id,\n       error (\"template-id %qD for %q+D does not match any template \"\n \t     \"declaration\", template_id, decl);\n       if (header_count && header_count != template_count + 1)\n-\tinform (input_location, \"saw %d %<template<>%>, need %d for \"\n+\tinform (DECL_SOURCE_LOCATION (decl),\n+\t\t\"saw %d %<template<>%>, need %d for \"\n \t\t\"specializing a member function template\",\n \t\theader_count, template_count + 1);\n       else"}, {"sha": "e851acdd47f003ac9dc94e3f71460b19f237b3a0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/132235c30fbb2f660e93d72578e95aeb3c7a932f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/132235c30fbb2f660e93d72578e95aeb3c7a932f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=132235c30fbb2f660e93d72578e95aeb3c7a932f", "patch": "@@ -1,3 +1,10 @@\n+2019-10-07  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* g++.dg/diagnostic/not-a-function-template-1.C: New.\n+\t* g++.dg/template/crash107.C: Adjust expected location.\n+\t* g++.dg/template/dependent-expr1.C: Check locations.\n+\t* g++.dg/template/error17.C: Check location.\n+\n 2019-10-07  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR target/91994"}, {"sha": "caf8afa26970290f75b7be91f34eb5321d274619", "filename": "gcc/testsuite/g++.dg/diagnostic/not-a-function-template-1.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/132235c30fbb2f660e93d72578e95aeb3c7a932f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fnot-a-function-template-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/132235c30fbb2f660e93d72578e95aeb3c7a932f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fnot-a-function-template-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fnot-a-function-template-1.C?ref=132235c30fbb2f660e93d72578e95aeb3c7a932f", "patch": "@@ -0,0 +1,9 @@\n+// { dg-do compile { target c++14 } }\n+\n+template<typename> int A;  // { dg-message \"24:variable template\" }\n+\n+template int A<>();  // { dg-error \"14:template<class>\" }\n+\n+struct B {\n+  friend int A<>();  // { dg-error \"14:specialization\" }\n+};"}, {"sha": "3b0b4e8211f30798b9f0b0c64abaf9979a40ec0c", "filename": "gcc/testsuite/g++.dg/template/crash107.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/132235c30fbb2f660e93d72578e95aeb3c7a932f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash107.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/132235c30fbb2f660e93d72578e95aeb3c7a932f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash107.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash107.C?ref=132235c30fbb2f660e93d72578e95aeb3c7a932f", "patch": "@@ -6,8 +6,8 @@\n template<typename FP_> struct Vec { // { dg-message \"note\" }\n     Vec& operator^=(Vec& rhs)     {\n         union {\n-            struct {FP_ x,y,z;};\n-        }; // { dg-error \"anonymous struct\" }\n+            struct {FP_ x,y,z;}; // { dg-error \"20:anonymous struct\" }\n+        };\n         X = y*rhs.z() - z*rhs.y(); // { dg-error \"not declared|no member\" }\n     }\n     Vec& operator^(Vec& rhs) {"}, {"sha": "eda7526e1b12a506aa60733917afb723a49bc446", "filename": "gcc/testsuite/g++.dg/template/dependent-expr1.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/132235c30fbb2f660e93d72578e95aeb3c7a932f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-expr1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/132235c30fbb2f660e93d72578e95aeb3c7a932f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-expr1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-expr1.C?ref=132235c30fbb2f660e93d72578e95aeb3c7a932f", "patch": "@@ -19,11 +19,11 @@ namespace std\n     Foo (sizeof (x));\n     Foo (__alignof__ (I));\n     Foo (__alignof__ (x));\n-    Foo (x->~I ()); // { dg-error \"\" }\n+    Foo (x->~I ()); // { dg-error \"16:invalid\" }\n     //    Foo (typeid (I));\n-    Foo (delete x); // { dg-error \"\" }\n-    Foo (delete[] x); // { dg-error \"\" }\n-    Foo (throw x); // { dg-error \"\" }\n+    Foo (delete x); // { dg-error \"10:invalid\" }\n+    Foo (delete[] x); // { dg-error \"10:invalid\" }\n+    Foo (throw x); // { dg-error \"10:invalid\" }\n   }\n \n }"}, {"sha": "5b3281a1779c388a245a8bdfd39b78c2ad61104d", "filename": "gcc/testsuite/g++.dg/template/error17.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/132235c30fbb2f660e93d72578e95aeb3c7a932f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/132235c30fbb2f660e93d72578e95aeb3c7a932f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror17.C?ref=132235c30fbb2f660e93d72578e95aeb3c7a932f", "patch": "@@ -5,5 +5,5 @@ void\n foo()\n {\n   union { struct { }; }; // { dg-error \"prohibits anonymous struct\" \"anon\" }\n-  // { dg-error \"not inside\" \"not inside\" { target *-*-* } .-1 }\n+  // { dg-error \"18:anonymous struct not inside\" \"not inside\" { target *-*-* } .-1 }\n }"}]}