{"sha": "ff8690791147193647ab88f2ad2af37be41e24cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmY4NjkwNzkxMTQ3MTkzNjQ3YWI4OGYyYWQyYWYzN2JlNDFlMjRjYg==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1993-02-25T19:34:16Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1993-02-25T19:34:16Z"}, "message": "(convert_to_integer): Delete Feb 19 change.\n\nFrom-SVN: r3531", "tree": {"sha": "6544d5980d99c931a34717ef50f75396ac08b908", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6544d5980d99c931a34717ef50f75396ac08b908"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff8690791147193647ab88f2ad2af37be41e24cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff8690791147193647ab88f2ad2af37be41e24cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff8690791147193647ab88f2ad2af37be41e24cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff8690791147193647ab88f2ad2af37be41e24cb/comments", "author": null, "committer": null, "parents": [{"sha": "ab314f6a6bd0e91ca40bf2ad8c3ae16baa9bff3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab314f6a6bd0e91ca40bf2ad8c3ae16baa9bff3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab314f6a6bd0e91ca40bf2ad8c3ae16baa9bff3f"}], "stats": {"total": 26, "additions": 0, "deletions": 26}, "files": [{"sha": "c67f510188c201d7c4770dc6727d59cd018e5285", "filename": "gcc/convert.c", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff8690791147193647ab88f2ad2af37be41e24cb/gcc%2Fconvert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff8690791147193647ab88f2ad2af37be41e24cb/gcc%2Fconvert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconvert.c?ref=ff8690791147193647ab88f2ad2af37be41e24cb", "patch": "@@ -172,32 +172,6 @@ convert_to_integer (type, expr)\n \n       switch (ex_form)\n \t{\n-#if 0\n-        case INTEGER_CST:\n-\t  if (TREE_UNSIGNED (type))\n-\t    {\n-\t      if (TREE_INT_CST_LOW (expr) >> outprec)\n-\t\twarning (\"integer constant truncated\");\n-\t    }\n-\t  else\n-\t    {\n-\t      /* if the sign bit of the low-order part isn't replicated\n-\t\t through the entire high part, we have overflow */\n-\t      int sign  = TREE_INT_CST_LOW (expr) & (1 << (outprec - 1));\n-\t      if (!sign)                       /* lower part positive */\n-\t\t{\n-\t\t  if (TREE_INT_CST_LOW (expr) >> outprec)\n-\t\t    warning (\"integer constant truncated\");\n-\t\t}\n-\t      else \n-\t\t{\n-\t\t  if ((TREE_INT_CST_LOW (expr) >> outprec) + 1)\n-\t\t    warning (\"integer constant truncated\");\n-\t\t}\n-\t    }\n-\t  break;\n-#endif /* 0 */\n-\n \tcase RSHIFT_EXPR:\n \t  /* We can pass truncation down through right shifting\n \t     when the shift count is a nonpositive constant.  */"}]}