{"sha": "88b4335f8a21d7f6e9c3f1bb8b39788170123a1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODhiNDMzNWY4YTIxZDdmNmU5YzNmMWJiOGIzOTc4ODE3MDEyM2ExYw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "1999-11-22T16:08:14Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "1999-11-22T16:08:14Z"}, "message": "semantics.c (finish_unary_op_expr): Only set TREE_NEGATED_INT when actually negative.\n\n\t* semantics.c (finish_unary_op_expr): Only set TREE_NEGATED_INT\n\twhen actually negative.\n\n\t* typeck.c (convert_for_assignment): Expand comment about\n\tstrange NULL check, moved from ...\n\t(convert_for_initialization): ... here. Remove unneeded\n\tcode.\n\nFrom-SVN: r30616", "tree": {"sha": "c67803277cb59f65eeb8f454e32b4955ff881bdc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c67803277cb59f65eeb8f454e32b4955ff881bdc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88b4335f8a21d7f6e9c3f1bb8b39788170123a1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88b4335f8a21d7f6e9c3f1bb8b39788170123a1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88b4335f8a21d7f6e9c3f1bb8b39788170123a1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88b4335f8a21d7f6e9c3f1bb8b39788170123a1c/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7cffd12d38191aa05ef9049d80d4714d6e52711a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cffd12d38191aa05ef9049d80d4714d6e52711a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cffd12d38191aa05ef9049d80d4714d6e52711a"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "c2f9d741492cf640df7f8bb9567a091504749a53", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b4335f8a21d7f6e9c3f1bb8b39788170123a1c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b4335f8a21d7f6e9c3f1bb8b39788170123a1c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=88b4335f8a21d7f6e9c3f1bb8b39788170123a1c", "patch": "@@ -1,3 +1,13 @@\n+1999-11-22  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* semantics.c (finish_unary_op_expr): Only set TREE_NEGATED_INT\n+\twhen actually negative.\n+\n+\t* typeck.c (convert_for_assignment): Expand comment about\n+\tstrange NULL check, moved from ...\n+\t(convert_for_initialization): ... here. Remove unneeded\n+\tcode.\n+\n 1999-11-21  Alexandre Oliva  <oliva@lsd.ic.unicamp.br>\n \n \t* cp-tree.h (build_vec_delete): Remove `auto_delete' argument."}, {"sha": "741f710800a677c7fa41fbbc0a26e3cc60158a0d", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b4335f8a21d7f6e9c3f1bb8b39788170123a1c/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b4335f8a21d7f6e9c3f1bb8b39788170123a1c/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=88b4335f8a21d7f6e9c3f1bb8b39788170123a1c", "patch": "@@ -1598,7 +1598,9 @@ finish_unary_op_expr (code, expr)\n      expression. So check whether the result is folded before\n      setting TREE_NEGATED_INT.  */\n   if (code == NEGATE_EXPR && TREE_CODE (expr) == INTEGER_CST\n-      && TREE_CODE (result) == INTEGER_CST)\n+      && TREE_CODE (result) == INTEGER_CST\n+      && !TREE_UNSIGNED (TREE_TYPE (result))\n+      && INT_CST_LT (result, integer_zero_node))\n     TREE_NEGATED_INT (result) = 1;\n   overflow_warning (result);\n   return result;"}, {"sha": "ec2f6065b6fdbc496b5052b0a89dd03d115dca14", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b4335f8a21d7f6e9c3f1bb8b39788170123a1c/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b4335f8a21d7f6e9c3f1bb8b39788170123a1c/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=88b4335f8a21d7f6e9c3f1bb8b39788170123a1c", "patch": "@@ -6390,7 +6390,10 @@ convert_for_assignment (type, rhs, errtype, fndecl, parmnum)\n   if (TREE_CODE (rhs) == TREE_LIST && TREE_VALUE (rhs) == error_mark_node)\n     return error_mark_node;\n \n-  /* Issue warnings about peculiar, but legal, uses of NULL.  */\n+  /* Issue warnings about peculiar, but legal, uses of NULL.  We\n+     do this *before* the call to decl_constant_value so as to\n+     avoid duplicate warnings on code like `const int I = NULL;\n+     f(I);'.  */\n   if (ARITHMETIC_TYPE_P (type) && rhs == null_node)\n     cp_warning (\"converting NULL to non-pointer type\");\n \n@@ -6567,21 +6570,6 @@ convert_for_initialization (exp, type, rhs, flags, errtype, fndecl, parmnum)\n   if (IS_AGGR_TYPE (type))\n     return ocp_convert (type, rhs, CONV_IMPLICIT|CONV_FORCE_TEMP, flags);\n \n-  if (type == TREE_TYPE (rhs))\n-    {\n-      /* Issue warnings about peculiar, but legal, uses of NULL.  We\n-\t do this *before* the call to decl_constant_value so as to\n-\t avoid duplicate warnings on code like `const int I = NULL;\n-\t f(I);'.  */\n-      if (ARITHMETIC_TYPE_P (type) && rhs == null_node)\n-\tcp_warning (\"converting NULL to non-pointer type\");\n-\n-      if (TREE_READONLY_DECL_P (rhs))\n-\trhs = decl_constant_value (rhs);\n-\n-      return rhs;\n-    }\n-\n   return convert_for_assignment (type, rhs, errtype, fndecl, parmnum);\n }\n \f"}]}