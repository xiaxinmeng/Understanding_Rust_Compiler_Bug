{"sha": "0fc6469d2491bb588d02c5416b5be0131aa4c3b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGZjNjQ2OWQyNDkxYmI1ODhkMDJjNTQxNmI1YmUwMTMxYWE0YzNiMA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-12-02T15:40:49Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-12-02T15:40:49Z"}, "message": "c++: Add lang_decl, type_decl API\n\nWe need to call the lang_decl and type_decl creators from the module\nloading machinery.  This makes them reachable.\n\n\tgcc/cp/\n\t* cp-tree.h (maybe_add_lang_decl_raw, maybe_add_lang_type_raw):\n\tDeclare.\n\t* lex.c (maybe_add_lang_decl_raw, maybe_add_lang_type_raw):\n\tExternalize, reformat.", "tree": {"sha": "a823063a1d4f0de501ab38a024b0821d29bb4739", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a823063a1d4f0de501ab38a024b0821d29bb4739"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0fc6469d2491bb588d02c5416b5be0131aa4c3b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fc6469d2491bb588d02c5416b5be0131aa4c3b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fc6469d2491bb588d02c5416b5be0131aa4c3b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fc6469d2491bb588d02c5416b5be0131aa4c3b0/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "329ae1d7751346ba166d34e77a43e8cc33daa1c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/329ae1d7751346ba166d34e77a43e8cc33daa1c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/329ae1d7751346ba166d34e77a43e8cc33daa1c9"}], "stats": {"total": 15, "additions": 8, "deletions": 7}, "files": [{"sha": "4eaa10bc7fd6ee6114b52bd9576843646100a352", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fc6469d2491bb588d02c5416b5be0131aa4c3b0/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fc6469d2491bb588d02c5416b5be0131aa4c3b0/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=0fc6469d2491bb588d02c5416b5be0131aa4c3b0", "patch": "@@ -6759,6 +6759,8 @@ extern tree unqualified_fn_lookup_error\t\t(cp_expr);\n extern tree make_conv_op_name\t\t\t(tree);\n extern tree build_lang_decl\t\t\t(enum tree_code, tree, tree);\n extern tree build_lang_decl_loc\t\t\t(location_t, enum tree_code, tree, tree);\n+extern bool maybe_add_lang_decl_raw\t\t(tree, bool decomp_p);\n+extern bool maybe_add_lang_type_raw\t\t(tree);\n extern void retrofit_lang_decl\t\t\t(tree);\n extern void fit_decomposition_lang_decl\t\t(tree, tree);\n extern tree copy_decl\t\t\t\t(tree CXX_MEM_STAT_INFO);"}, {"sha": "795f5718198c63b00d248975c82fd8f70e36367f", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fc6469d2491bb588d02c5416b5be0131aa4c3b0/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fc6469d2491bb588d02c5416b5be0131aa4c3b0/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=0fc6469d2491bb588d02c5416b5be0131aa4c3b0", "patch": "@@ -680,7 +680,7 @@ build_lang_decl_loc (location_t loc, enum tree_code code, tree name, tree type)\n /* Maybe add a raw lang_decl to T, a decl.  Return true if it needed\n    one.  */\n \n-static bool\n+bool\n maybe_add_lang_decl_raw (tree t, bool decomp_p)\n {\n   size_t size;\n@@ -833,8 +833,7 @@ copy_lang_type (tree node)\n   if (! TYPE_LANG_SPECIFIC (node))\n     return;\n \n-  struct lang_type *lt\n-    = (struct lang_type *) ggc_internal_alloc (sizeof (struct lang_type));\n+  auto *lt = (struct lang_type *) ggc_internal_alloc (sizeof (struct lang_type));\n \n   memcpy (lt, TYPE_LANG_SPECIFIC (node), (sizeof (struct lang_type)));\n   TYPE_LANG_SPECIFIC (node) = lt;\n@@ -860,15 +859,15 @@ copy_type (tree type MEM_STAT_DECL)\n \n /* Add a raw lang_type to T, a type, should it need one.  */\n \n-static bool\n+bool\n maybe_add_lang_type_raw (tree t)\n {\n   if (!RECORD_OR_UNION_CODE_P (TREE_CODE (t)))\n     return false;\n   \n-  TYPE_LANG_SPECIFIC (t)\n-    = (struct lang_type *) (ggc_internal_cleared_alloc\n-\t\t\t    (sizeof (struct lang_type)));\n+  auto *lt = (struct lang_type *) (ggc_internal_cleared_alloc\n+\t\t\t\t   (sizeof (struct lang_type)));\n+  TYPE_LANG_SPECIFIC (t) = lt;\n \n   if (GATHER_STATISTICS)\n     {"}]}