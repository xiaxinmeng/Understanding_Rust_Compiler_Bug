{"sha": "990a1e466c9390b4d94fbfb129f7fd121e006df9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTkwYTFlNDY2YzkzOTBiNGQ5NGZiZmIxMjlmN2ZkMTIxZTAwNmRmOQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-03-31T20:41:33Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-03-31T20:41:33Z"}, "message": "(check_float_value): New function.\n\nFrom-SVN: r3959", "tree": {"sha": "08ebb8df336130432053ca1aa5beb8ab85e9d2d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08ebb8df336130432053ca1aa5beb8ab85e9d2d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/990a1e466c9390b4d94fbfb129f7fd121e006df9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/990a1e466c9390b4d94fbfb129f7fd121e006df9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/990a1e466c9390b4d94fbfb129f7fd121e006df9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/990a1e466c9390b4d94fbfb129f7fd121e006df9/comments", "author": null, "committer": null, "parents": [{"sha": "969e811dc6ed792f1c6386e5b7141e444294f4d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/969e811dc6ed792f1c6386e5b7141e444294f4d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/969e811dc6ed792f1c6386e5b7141e444294f4d6"}], "stats": {"total": 60, "additions": 60, "deletions": 0}, "files": [{"sha": "d5d9c34bb4cecdeb20efa1469b23f0fd45ca4279", "filename": "gcc/config/vax/vax.c", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/990a1e466c9390b4d94fbfb129f7fd121e006df9/gcc%2Fconfig%2Fvax%2Fvax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/990a1e466c9390b4d94fbfb129f7fd121e006df9/gcc%2Fconfig%2Fvax%2Fvax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.c?ref=990a1e466c9390b4d94fbfb129f7fd121e006df9", "patch": "@@ -577,6 +577,66 @@ vax_rtx_cost (x)\n     }\n   return c;\n }\n+\n+/* Check a `double' value for validity for a particular machine mode.  */\n+\n+static char *float_strings[] =\n+{\n+   \"1.70141173319264430e+38\", /* 2^127 (2^24 - 1) / 2^24 */\n+  \"-1.70141173319264430e+38\",\n+   \"2.93873587705571877e-39\", /* 2^-128 */\n+  \"-2.93873587705571877e-39\"\n+};\n+\n+static REAL_VALUE_TYPE float_values[4];\n+\n+static int inited_float_values = 0;\n+\n+\n+void\n+check_float_value (mode, d)\n+     enum machine_mode mode;\n+     REAL_VALUE_TYPE *d;\n+{\n+\n+  if (inited_float_values == 0)\n+    {\n+      int i;\n+      for (i = 0; i < 4; i++)\n+\t{\n+\t  float_values[i] = REAL_VALUE_ATOF (float_strings[i], DFmode);\n+\t}\n+    inited_float_values = 1;\n+    }\n+\n+  if ((mode) == SFmode)\n+    {\n+      REAL_VALUE_TYPE r;\n+      bcopy (d, &r, sizeof (REAL_VALUE_TYPE));\n+      if (REAL_VALUES_LESS (float_values[0], r))\n+\t{\n+\t  error (\"magnitude of constant too large for `float'\");\n+\t  bcopy (&float_values[0], d, sizeof (REAL_VALUE_TYPE));\n+\t}\n+      else if (REAL_VALUES_LESS (r, float_values[1]))\n+\t{\n+\t  error (\"magnitude of constant too large for `float'\");\n+\t  bcopy (&float_values[1], d, sizeof (REAL_VALUE_TYPE));\n+\t}\n+      else if (REAL_VALUES_LESS (dconst0, r)\n+\t\t&& REAL_VALUES_LESS (r, float_values[2]))\n+\t{\n+\t  warning (\"`float' constant truncated to zero\");\n+\t  bcopy (&dconst0, d, sizeof (REAL_VALUE_TYPE));\n+\t}\n+      else if (REAL_VALUES_LESS (r, dconst0)\n+\t\t&& REAL_VALUES_LESS (float_values[3], r))\n+\t{\n+\t  warning (\"`float' constant truncated to zero\");\n+\t  bcopy (&dconst0, d, sizeof (REAL_VALUE_TYPE));\n+\t}\n+    }\n+}\n \f\n /* Linked list of all externals that are to be emitted when optimizing\n    for the global pointer if they haven't been declared by the end of"}]}