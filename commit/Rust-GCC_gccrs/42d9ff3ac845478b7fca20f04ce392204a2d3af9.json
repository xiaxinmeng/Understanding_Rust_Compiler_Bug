{"sha": "42d9ff3ac845478b7fca20f04ce392204a2d3af9", "node_id": "C_kwDOANBUbNoAKDQyZDlmZjNhYzg0NTQ3OGI3ZmNhMjBmMDRjZTM5MjIwNGEyZDNhZjk", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2022-03-11T22:19:14Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2022-03-11T22:34:59Z"}, "message": "d: Cache generated import declarations in a hash_map\n\nOriginally, these were cached in the front-end AST node field `isym'.\nHowever, this field is due to be removed in the future.\n\ngcc/d/ChangeLog:\n\n\t* imports.cc (imported_decls): Define.\n\t(class ImportVisitor): Add result_ field.\n\t(ImportVisitor::result): New method.\n\t(ImportVisitor::visit (Module *)): Store decl to result_.\n\t(ImportVisitor::visit (Import *)): Likewise.\n\t(ImportVisitor::visit (AliasDeclaration *)): Don't cache decl in\n\tfront-end AST node.\n\t(ImportVisitor::visit (OverDeclaration *)): Likewise.\n\t(ImportVisitor::visit (FuncDeclaration *)): Likewise.\n\t(ImportVisitor::visit (Declaration *)): Likewise.\n\t(build_import_decl): Use imported_decls to cache and lookup built\n\tdeclarations.", "tree": {"sha": "1ac9324cf30c4fad77cb8e77ebb78bf5afcfa6ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ac9324cf30c4fad77cb8e77ebb78bf5afcfa6ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/42d9ff3ac845478b7fca20f04ce392204a2d3af9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42d9ff3ac845478b7fca20f04ce392204a2d3af9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42d9ff3ac845478b7fca20f04ce392204a2d3af9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42d9ff3ac845478b7fca20f04ce392204a2d3af9/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a6ba7c7cb6ff5ac9bbcc747bd5fad957b78fa0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a6ba7c7cb6ff5ac9bbcc747bd5fad957b78fa0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a6ba7c7cb6ff5ac9bbcc747bd5fad957b78fa0a"}], "stats": {"total": 77, "additions": 41, "deletions": 36}, "files": [{"sha": "29c0fbfe6d2238813c5758e7d9ec50b1f63b5268", "filename": "gcc/d/imports.cc", "status": "modified", "additions": 41, "deletions": 36, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42d9ff3ac845478b7fca20f04ce392204a2d3af9/gcc%2Fd%2Fimports.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42d9ff3ac845478b7fca20f04ce392204a2d3af9/gcc%2Fd%2Fimports.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fimports.cc?ref=42d9ff3ac845478b7fca20f04ce392204a2d3af9", "patch": "@@ -31,14 +31,17 @@ along with GCC; see the file COPYING3.  If not see\n \n #include \"d-tree.h\"\n \n+static hash_map<Dsymbol *, tree> *imported_decls;\n \n /* Implements the visitor interface to build debug trees for all\n-   module and import declarations, where ISYM holds the cached\n-   back-end representation to be returned.  */\n+   module and import declarations, where RESULT_ holds the back-end\n+   representation to be cached and returned from the caller.  */\n class ImportVisitor : public Visitor\n {\n   using Visitor::visit;\n \n+  tree result_;\n+\n   /* Build the declaration DECL as an imported symbol.  */\n   tree make_import (tree decl)\n   {\n@@ -55,6 +58,12 @@ class ImportVisitor : public Visitor\n public:\n   ImportVisitor (void)\n   {\n+    this->result_ = NULL_TREE;\n+  }\n+\n+  tree result (void)\n+  {\n+    return this->result_;\n   }\n \n   /* This should be overridden by each symbol class.  */\n@@ -70,24 +79,24 @@ class ImportVisitor : public Visitor\n     Loc loc = (m->md != NULL) ? m->md->loc\n       : Loc (m->srcfile.toChars (), 1, 0);\n \n-    m->isym = build_decl (make_location_t (loc), NAMESPACE_DECL,\n-\t\t\t  get_identifier (m->toPrettyChars ()),\n-\t\t\t  void_type_node);\n-    d_keep (m->isym);\n+    this->result_ = build_decl (make_location_t (loc), NAMESPACE_DECL,\n+\t\t\t\tget_identifier (m->toPrettyChars ()),\n+\t\t\t\tvoid_type_node);\n+    d_keep (this->result_);\n \n     if (!m->isRoot ())\n-      DECL_EXTERNAL (m->isym) = 1;\n+      DECL_EXTERNAL (this->result_) = 1;\n \n-    TREE_PUBLIC (m->isym) = 1;\n-    DECL_CONTEXT (m->isym) = NULL_TREE;\n+    TREE_PUBLIC (this->result_) = 1;\n+    DECL_CONTEXT (this->result_) = NULL_TREE;\n   }\n \n   /* Build an import of another module symbol.  */\n \n   void visit (Import *m)\n   {\n     tree module = build_import_decl (m->mod);\n-    m->isym = this->make_import (module);\n+    this->result_ = this->make_import (module);\n   }\n \n   /* Build an import for any kind of user defined type.\n@@ -141,20 +150,14 @@ class ImportVisitor : public Visitor\n \n     /* This symbol is really an alias for another, visit the other.  */\n     if (dsym != d)\n-      {\n-\tdsym->accept (this);\n-\td->isym = dsym->isym;\n-      }\n+      dsym->accept (this);\n   }\n \n   /* Visit the underlying alias symbol of overloadable aliases.  */\n   void visit (OverDeclaration *d)\n   {\n     if (d->aliassym != NULL)\n-      {\n-\td->aliassym->accept (this);\n-\td->isym = d->aliassym->isym;\n-      }\n+      d->aliassym->accept (this);\n   }\n \n   /* Function aliases are the same as alias symbols.  */\n@@ -163,10 +166,7 @@ class ImportVisitor : public Visitor\n     FuncDeclaration *fd = d->toAliasFunc ();\n \n     if (fd != NULL)\n-      {\n-\tfd->accept (this);\n-\td->isym = fd->isym;\n-      }\n+      fd->accept (this);\n   }\n \n   /* Skip over importing templates and tuples.  */\n@@ -182,7 +182,7 @@ class ImportVisitor : public Visitor\n      symbol generation routines, the compiler will throw an error.  */\n   void visit (Declaration *d)\n   {\n-    d->isym = this->make_import (get_symbol_decl (d));\n+    this->result_ = this->make_import (get_symbol_decl (d));\n   }\n };\n \n@@ -192,17 +192,22 @@ class ImportVisitor : public Visitor\n tree\n build_import_decl (Dsymbol *d)\n {\n-  if (!d->isym)\n-    {\n-      location_t saved_location = input_location;\n-      ImportVisitor v;\n-\n-      input_location = make_location_t (d->loc);\n-      d->accept (&v);\n-      input_location = saved_location;\n-    }\n-\n-  /* Not all visitors set `isym'.  */\n-  return d->isym ? d->isym : NULL_TREE;\n-}\n+  hash_map_maybe_create<hm_ggc> (imported_decls);\n+\n+  if (tree *decl = imported_decls->get (d))\n+    return *decl;\n \n+  location_t saved_location = input_location;\n+  ImportVisitor v = ImportVisitor ();\n+\n+  input_location = make_location_t (d->loc);\n+  d->accept (&v);\n+  input_location = saved_location;\n+\n+  /* Not all visitors set `result'.  */\n+  tree isym = v.result ();\n+  if (isym != NULL_TREE)\n+    imported_decls->put (d, isym);\n+\n+  return isym;\n+}"}]}