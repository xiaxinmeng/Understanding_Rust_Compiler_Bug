{"sha": "3882207695588de867178df85b1e2511ccd7fb26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzg4MjIwNzY5NTU4OGRlODY3MTc4ZGY4NWIxZTI1MTFjY2Q3ZmIyNg==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2015-03-03T11:03:16Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2015-03-03T11:03:16Z"}, "message": "Fix various problems with specs file generation.\n\ngcc/\n\tFix various problems with specs file generation.\n\tPR target/65296\n\t* config.gcc (extra_gcc_objs) [avr]: Remove.\n\t* config/avr/driver-avr.c: Remove file.\n\t* config/avr/t-avr (driver-avr.o): Remove rule.\n\t(gen-avr-mmcu-specs): Use CXX_FOR_BUILD, CXXFLAGS_FOR_BUILD and\n\tINCLUDES to build.  Depend on TM_H.\n\t* config/avr/gen-avr-mmcu-specs.c: Tidy up code.  Fix various\n\tbuild warnings.  Fix non-matching types and non-existing %-codes.\n\t(tm.h): Include.\n\t(*lib) [!WITH_AVRLIBC]: Don't link libdev.a.\n\t(*libgcc) [WITH_AVRLIBC]: Add \"-lm\".\n\t* config/avr/avrlibc.h (LIBGCC_SPEC): Remove definition.\n\t* config/avr/avr.h (DRIVER_SELF_SPECS): Fix handling of -march=.\n\t(CPP_SPEC, CC1PLUS_SPEC, ASM_SPEC, LINK_SPEC, LIB_SPEC)\n\t(LIBGCC_SPEC): Remove definitions.\n\nFrom-SVN: r221141", "tree": {"sha": "7c455fd99b4713b39076bcbdf55f3ba6156db71d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c455fd99b4713b39076bcbdf55f3ba6156db71d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3882207695588de867178df85b1e2511ccd7fb26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3882207695588de867178df85b1e2511ccd7fb26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3882207695588de867178df85b1e2511ccd7fb26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3882207695588de867178df85b1e2511ccd7fb26/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4b78e2db461fe40680ebba3bf73e3a3ed8546ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4b78e2db461fe40680ebba3bf73e3a3ed8546ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4b78e2db461fe40680ebba3bf73e3a3ed8546ed"}], "stats": {"total": 247, "additions": 126, "deletions": 121}, "files": [{"sha": "aeeda83fd07cf2597f87bb451e05003f76839654", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3882207695588de867178df85b1e2511ccd7fb26/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3882207695588de867178df85b1e2511ccd7fb26/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3882207695588de867178df85b1e2511ccd7fb26", "patch": "@@ -1,3 +1,23 @@\n+2015-03-03  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tFix various problems with specs file generation.\n+\n+\tPR target/65296\n+\t* config.gcc (extra_gcc_objs) [avr]: Remove.\n+\t* config/avr/driver-avr.c: Remove file.\n+\t* config/avr/t-avr (driver-avr.o): Remove rule.\n+\t(gen-avr-mmcu-specs): Use CXX_FOR_BUILD, CXXFLAGS_FOR_BUILD and\n+\tINCLUDES to build.  Depend on TM_H.\n+\t* config/avr/gen-avr-mmcu-specs.c: Tidy up code.  Fix various\n+\tbuild warnings.  Fix non-matching types and non-existing %-codes.\n+\t(tm.h): Include.\n+\t(*lib) [!WITH_AVRLIBC]: Don't link libdev.a.\n+\t(*libgcc) [WITH_AVRLIBC]: Add \"-lm\".\n+\t* config/avr/avrlibc.h (LIBGCC_SPEC): Remove definition.\n+\t* config/avr/avr.h (DRIVER_SELF_SPECS): Fix handling of -march=.\n+\t(CPP_SPEC, CC1PLUS_SPEC, ASM_SPEC, LINK_SPEC, LIB_SPEC)\n+\t(LIBGCC_SPEC): Remove definitions.\n+\n 2015-03-03  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* config/ia64/ia64.c (expand_vec_perm_interleave_2): Use gen_raw_REG"}, {"sha": "7ee5f891fddec13881d475eecfb0e4a87ba4fccc", "filename": "gcc/config.gcc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3882207695588de867178df85b1e2511ccd7fb26/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3882207695588de867178df85b1e2511ccd7fb26/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=3882207695588de867178df85b1e2511ccd7fb26", "patch": "@@ -1103,7 +1103,6 @@ avr-*-*)\n \tfi\n \ttmake_file=\"${tmake_file} avr/t-avr avr/t-multilib\"\n \tuse_gcc_stdint=wrap\n-\textra_gcc_objs=\"driver-avr.o avr-devices.o\"\n \textra_objs=\"avr-devices.o avr-log.o\"\n \t;;\n bfin*-elf*)"}, {"sha": "1f2f3da906ddb41ee103ad9a0b23fb22ba11da0c", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 4, "deletions": 28, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3882207695588de867178df85b1e2511ccd7fb26/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3882207695588de867178df85b1e2511ccd7fb26/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=3882207695588de867178df85b1e2511ccd7fb26", "patch": "@@ -492,42 +492,18 @@ typedef struct avr_args\n #define ADJUST_INSN_LENGTH(INSN, LENGTH)                \\\n     (LENGTH = avr_adjust_insn_length (INSN, LENGTH))\n \n-#define DRIVER_SELF_SPECS \" %{mmcu=*:-specs=device-specs/specs-%*%s %<mmcu=*} \"\n-#define CPP_SPEC \"\"\n+#define DRIVER_SELF_SPECS                                       \\\n+  \" %{!mmcu=*:%{!march=*:-specs=device-specs/specs-avr2%s} \"    \\\n+  \"           %{march=*:-specs=device-specs/specs-%*%s}} \"      \\\n+  \" %{mmcu=*:-specs=device-specs/specs-%*%s %<mmcu=*} \"\n \n /* We want cc1plus used as a preprocessor to pick up the cpp spec from the\n    per-device spec files  */\n #define CPLUSPLUS_CPP_SPEC \"%(cpp)\"\n \n-#define CC1_SPEC \"\"\n-\n-#define CC1PLUS_SPEC \"%{!frtti:-fno-rtti} \\\n-    %{!fenforce-eh-specs:-fno-enforce-eh-specs} \\\n-    %{!fexceptions:-fno-exceptions}\"\n-\n-#define ASM_SPEC \"%{march=*:-mmcu=%*}%{mrelax: --mlink-relax}\"\n-  \n-#define LINK_SPEC \"\\\n-%{mrelax:--relax\\\n-         %{mpmem-wrap-around:%{mmcu=at90usb8*:--pmem-wrap-around=8k}\\\n-                             %{mmcu=atmega16*:--pmem-wrap-around=16k}\\\n-                             %{mmcu=atmega32*|\\\n-                               mmcu=at90can32*:--pmem-wrap-around=32k}\\\n-                             %{mmcu=atmega64*|\\\n-                               mmcu=at90can64*|\\\n-                               mmcu=at90usb64*:--pmem-wrap-around=64k}}}\\\n-%{march=*:-m%*}\\\n-%{shared:%eshared is not supported}\"\n-\n-#define LIB_SPEC \\\n-  \"%{!mmcu=at90s1*:%{!mmcu=attiny11:%{!mmcu=attiny12:%{!mmcu=attiny15:%{!mmcu=attiny28: -lc }}}}}\"\n-\n #define LIBSTDCXX \"gcc\"\n /* No libstdc++ for now.  Empty string doesn't work.  */\n \n-#define LIBGCC_SPEC \\\n-  \"%{!mmcu=at90s1*:%{!mmcu=attiny11:%{!mmcu=attiny12:%{!mmcu=attiny15:%{!mmcu=attiny28: -lgcc }}}}}\"\n-\n /* The actual definition will come from the device-specific spec file.  */\n #define STARTFILE_SPEC \"\"\n "}, {"sha": "b8801a7449eabb64923c145524d34836d4463d65", "filename": "gcc/config/avr/avrlibc.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3882207695588de867178df85b1e2511ccd7fb26/gcc%2Fconfig%2Favr%2Favrlibc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3882207695588de867178df85b1e2511ccd7fb26/gcc%2Fconfig%2Favr%2Favrlibc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favrlibc.h?ref=3882207695588de867178df85b1e2511ccd7fb26", "patch": "@@ -19,11 +19,13 @@ You should have received a copy of the GNU General Public License\n along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n-/* AVR-Libc implements functions from libgcc.a in libm.a, see PR54461.  */\n+/* AVR-Libc implements functions from libgcc.a in libm.a, see PR54461.\n+   More AVR-Libc specific specs originate from gen-avr-mmcu-specs.c:\n \n-#undef  LIBGCC_SPEC\n-#define LIBGCC_SPEC                                                     \\\n-  \"%{!mmcu=at90s1*:%{!mmcu=attiny11:%{!mmcu=attiny12:%{!mmcu=attiny15:%{!mmcu=attiny28: -lgcc -lm }}}}}\"\n+   - LIBGCC_SPEC (*libgcc)\n+   - LIB_SPEC (*lib)\n+   \n+*/\n \n #undef  LINK_GCC_C_SEQUENCE_SPEC\n #define LINK_GCC_C_SEQUENCE_SPEC \\"}, {"sha": "f81974be7576f423893e95f5f1c4eea3daf6597b", "filename": "gcc/config/avr/driver-avr.c", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4b78e2db461fe40680ebba3bf73e3a3ed8546ed/gcc%2Fconfig%2Favr%2Fdriver-avr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4b78e2db461fe40680ebba3bf73e3a3ed8546ed/gcc%2Fconfig%2Favr%2Fdriver-avr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Fdriver-avr.c?ref=b4b78e2db461fe40680ebba3bf73e3a3ed8546ed", "patch": "@@ -1,30 +0,0 @@\n-/* Subroutines for the gcc driver.\n-   Copyright (C) 2009-2015 Free Software Foundation, Inc.\n-   Contributed by Anatoly Sokolov <aesok@post.ru>\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 3, or (at your option)\n-any later version.\n-\n-GCC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GCC; see the file COPYING3.  If not see\n-<http://www.gnu.org/licenses/>.  */\n-\n-#include \"config.h\"\n-#include \"system.h\"\n-#include \"coretypes.h\"\n-#include \"tm.h\"\n-\n-/* Current architecture.  */\n-const avr_arch_t *avr_current_arch = NULL;\n-\n-/* Current device.  */\n-const avr_mcu_t *avr_current_device = NULL;"}, {"sha": "9dcd4a0c87f7bf9830b4520d38b0aad03cd90ee6", "filename": "gcc/config/avr/gen-avr-mmcu-specs.c", "status": "modified", "additions": 94, "deletions": 52, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3882207695588de867178df85b1e2511ccd7fb26/gcc%2Fconfig%2Favr%2Fgen-avr-mmcu-specs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3882207695588de867178df85b1e2511ccd7fb26/gcc%2Fconfig%2Favr%2Fgen-avr-mmcu-specs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Fgen-avr-mmcu-specs.c?ref=3882207695588de867178df85b1e2511ccd7fb26", "patch": "@@ -26,9 +26,30 @@\n #include \"avr-arch.h\"\n #include \"avr-devices.c\"\n \n+#define GCC_DEFAULTS_H\n+\n+#include \"tm.h\"\n+\n+#if defined (WITH_AVRLIBC)\n+static const bool with_avrlibc = true;\n+#else\n+static const bool with_avrlibc = false;\n+#endif /* WITH_AVRLIBC */\n+\n+\n+/* Return true iff STR starts with PREFIX.  */\n+\n+static bool\n+str_prefix_p (const char *str, const char *prefix)\n+{\n+  return 0 == strncmp (str, prefix, strlen (prefix));\n+}\n+\n+\n static void\n print_mcu (const avr_mcu_t *mcu)\n {\n+  const char *sp8_spec;\n   const avr_mcu_t *arch_mcu;\n \n   for (arch_mcu = mcu; arch_mcu->macro; )\n@@ -37,100 +58,121 @@ print_mcu (const avr_mcu_t *mcu)\n     exit (EXIT_FAILURE);\n \n   char name[100];\n-  if (snprintf (name, sizeof name, \"specs-%s\", mcu->name) >= sizeof name)\n+  if (snprintf (name, sizeof name, \"specs-%s\", mcu->name) >= (int) sizeof name)\n    exit (EXIT_FAILURE);\n \n   FILE *f = fopen (name ,\"w\");\n \n-  const char *sp8, *errata_skip, *rmw;\n-  /* Leave \"avr2\" and \"avr25\" alone.  These two architectures are\n-     the only ones that mix devices with 8-bit SP and 16-bit SP.  */\n+  bool errata_skip = 0 != (mcu->dev_attribute & AVR_ERRATA_SKIP);\n+  bool rmw = 0 != (mcu->dev_attribute & AVR_ISA_RMW);\n+  bool sp8 = 0 != (mcu->dev_attribute & AVR_SHORT_SP);\n+\n   if (mcu->macro == NULL\n       && (mcu->arch == ARCH_AVR2 || mcu->arch == ARCH_AVR25))\n-    sp8 = \"\";\n+    {\n+      // Leave \"avr2\" and \"avr25\" alone.  These two architectures are\n+      // the only ones that mix devices with 8-bit SP and 16-bit SP.\n+      sp8_spec = \"\";\n+    }\n+  else\n+    {\n+      sp8_spec = sp8\n+        ? \" -msp8\"\n+        : \" %<msp8\";\n+    }\n \n-  sp8 = ((mcu->dev_attribute & AVR_SHORT_SP)\n-\t ? \" -msp8\" : \" %<msp8\");\n+  const char *errata_skip_spec = errata_skip\n+    ? \" %{!mno-skip-bug:-mskip-bug}\"\n+    : \" %{!mskip-bug:-mno-skip-bug}\";\n \n-  errata_skip = (mcu->dev_attribute & AVR_ERRATA_SKIP) ? \" -mskip-bug\" : \"\";\n-  rmw = (mcu->dev_attribute & AVR_ISA_RMW) ? \"%{!mno-rmw: -mrmw}\" : \"\";\n+  const char *rmw_spec = rmw\n+    ? \" %{!mno-rmw: -mrmw}\"\n+    : \" %{mrmw}\";\n \n   const char *arch_name = avr_arch_types[mcu->arch].arch_name;\n \n-  fprintf (f, \"*self_spec:\\n%%{!march=*:-march=%s}%s\\n\\n\", arch_name, sp8);\n+  fprintf (f, \"*self_spec:\\n\"\n+           \" %%{!march=*:-march=%s}\"\n+           \" %s\\n\\n\", arch_name, sp8_spec);\n \n   if (mcu->macro)\n     fprintf (f, \"*cpp:\\n-D__AVR_DEV_LIB_NAME__=%s -D%s \"\n \t     \"-D__AVR_DEVICE_NAME__=%s\\n\\n\",\n \t     mcu->library_name, mcu->macro, mcu->name);\n \n-  fprintf (f, \"*cc1:\\n%s%s\", errata_skip, rmw);\n+  fprintf (f, \"*cc1:\\n%s%s\", errata_skip_spec, rmw_spec);\n   if (mcu->n_flash != arch_mcu->n_flash)\n     fprintf (f, \" %%{!mn-flash:-mn-flash=%d}\", mcu->n_flash);\n   fprintf (f, \"\\n\\n\");\n-  fprintf (f, \"*cc1plus:\\n%s%s \", errata_skip, rmw);\n+\n+  fprintf (f, \"*cc1plus:\\n%s%s \", errata_skip_spec, rmw_spec);\n   if (mcu->n_flash != arch_mcu->n_flash)\n-    fprintf (f, \"%%{!mn-flash:-mn-flash=%d}\", mcu->n_flash);\n-  fprintf (f, \"%%{!frtti: -fno-rtti}\"\n-\t   \"%%{!fenforce-eh-specs: -fno-enforce-eh-specs}\"\n-\t   \"%%{!fexceptions: -fno-exceptions}\\n\\n\");\n-\n-  fprintf (f, \"*asm:\\n%%{march=*:-mmcu=%%*}%{mrelax: --mlink-relax}%s\\n\\n\",\n-\t   *errata_skip ? \"\" : \" -mno-skip-bug\");\n-\n-  fprintf (f, \"*link:\\n%%{mrelax:--relax\");\n-  if (strncmp (mcu->name, \"at90usb8\", strlen (\"at90usb8\")) == 0)\n-    fprintf (f, \"%%{mpmem-wrap-around: --pmem-wrap-around=8k}\");\n-  if (strncmp (mcu->name, \"atmega16\", strlen (\"atmega16\")) == 0)\n-    fprintf (f, \"%%{mpmem-wrap-around: --pmem-wrap-around=16k}\");\n-  if (strncmp (mcu->name, \"atmega32\", strlen (\"atmega32\")) == 0\n-      || strncmp (mcu->name, \"at90can32\", strlen (\"at90can32\")) == 0)\n-    fprintf (f, \"%%{mpmem-wrap-around: --pmem-wrap-around=32k}\");\n-  if (strncmp (mcu->name, \"atmega64\", strlen (\"atmega64\")) == 0\n-      || strncmp (mcu->name, \"at90can64\", strlen (\"at90can64\")) == 0\n-      || strncmp (mcu->name, \"at90usb64\", strlen (\"at90usb64\")) == 0)\n-    fprintf (f, \"%%{mpmem-wrap-around: --pmem-wrap-around=64k}\");\n-  fprintf (f, \"} %%{march=*:-m%%*}\");\n+    fprintf (f, \" %%{!mn-flash:-mn-flash=%d}\", mcu->n_flash);\n+  fprintf (f, (\" %%{!frtti: -fno-rtti}\"\n+               \" %%{!fenforce-eh-specs: -fno-enforce-eh-specs}\"\n+               \" %%{!fexceptions: -fno-exceptions}\\n\\n\"));\n+\n+  fprintf (f, \"*asm:\\n\"\n+           \" %%{march=*:-mmcu=%%*}\"\n+           \" %%{mrelax: --mlink-relax}\"\n+           \" %s%s\\n\\n\", rmw_spec, (errata_skip\n+                                  ? \" %{mno-skip-bug}\"\n+                                  : \" %{!mskip-bug:-mno-skip-bug}\"));\n+  fprintf (f, \"*link:\\n\"\n+           \" %%{mrelax:--relax\");\n+  {\n+    int wrap_k =\n+      str_prefix_p (mcu->name, \"at90usb8\") ? 8\n+      : str_prefix_p (mcu->name, \"atmega16\") ? 16\n+      : (str_prefix_p (mcu->name, \"atmega32\")\n+         || str_prefix_p (mcu->name, \"at90can32\")) ? 32\n+      : (str_prefix_p (mcu->name, \"atmega64\")\n+        || str_prefix_p (mcu->name, \"at90can64\")\n+        || str_prefix_p (mcu->name, \"at90usb64\")) ? 64\n+      : 0;\n+\n+    if (wrap_k)\n+      fprintf (f, \" %%{mpmem-wrap-around: --pmem-wrap-around=%dk}\", wrap_k);\n+  }\n+  fprintf (f, \"}\"\n+           \" %%{march=*:-m%%*}\");\n+\n   if (mcu->data_section_start\n       != avr_arch_types[mcu->arch].default_data_section_start)\n     fprintf (f, \" -Tdata 0x%lX\", 0x800000UL + mcu->data_section_start);\n+\n   if (mcu->text_section_start != 0x0)\n-    fprintf (f, \" -Ttext 0x%lX\", mcu->text_section_start);\n+    fprintf (f, \" -Ttext 0x%lX\", 0UL + mcu->text_section_start);\n \n   fprintf (f, \" %%{shared:%%eshared is not supported}\\n\\n\");\n \n+  bool has_libs = mcu->arch != ARCH_AVR1;\n+\n   fprintf (f, \"*lib:\\n\");\n-  if (strncmp (mcu->name, \"mmcu=at90s1\", strlen (\"mmcu=at90s1\")) != 0\n-      && strncmp (mcu->name, \"mmcu=attiny11\", strlen (\"mmcu=attiny11\")) != 0\n-      && strncmp (mcu->name, \"mmcu=attiny12\", strlen (\"mmcu=attiny12\")) != 0\n-      && strncmp (mcu->name, \"mmcu=attiny15\", strlen (\"mmcu=attiny15\")) != 0\n-      && strncmp (mcu->name, \"mmcu=attiny28\", strlen (\"mmcu=attiny28\")) != 0)\n+  if (has_libs)\n     {\n       fprintf (f, \"-lc\");\n-      if (mcu->macro)\n+      if (with_avrlibc\n+          && mcu->macro)\n \tfprintf (f, \" dev/%s/libdev.a%%s\", mcu->name);\n     }\n   fprintf (f, \"\\n\\n\");\n \n   fprintf (f, \"*libgcc:\\n\");\n-  if (strncmp (mcu->name, \"mmcu=at90s1\", strlen (\"mmcu=at90s1\")) != 0\n-      && strncmp (mcu->name, \"mmcu=attiny11\", strlen (\"mmcu=attiny11\")) != 0\n-      && strncmp (mcu->name, \"mmcu=attiny12\", strlen (\"mmcu=attiny12\")) != 0\n-      && strncmp (mcu->name, \"mmcu=attiny15\", strlen (\"mmcu=attiny15\")) != 0\n-      && strncmp (mcu->name, \"mmcu=attiny28\", strlen (\"mmcu=attiny28\")) != 0)\n-    fprintf (f, \"-lgcc\");\n+  if (has_libs)\n+    fprintf (f, with_avrlibc\n+             ? \"-lgcc -lm\"\n+             : \"-lgcc\");\n   fprintf (f, \"\\n\\n\");\n \n-  fprintf (f, \"*startfile:\\ndev/%s/crt1.o%%s\\n\\n\", mcu->name);\n+  fprintf (f, \"*startfile:\\n\"\n+           \"dev/%s/crt1.o%%s\\n\\n\", mcu->name);\n }\n \n+\n int main (void)\n {\n-  enum avr_arch arch = ARCH_UNKNOWN;\n-  size_t i, n_mcus = 0;\n-  const avr_mcu_t *mcu;\n-\n-  for (mcu = avr_mcu_types; mcu->name; mcu++)\n+  for (const avr_mcu_t *mcu = avr_mcu_types; mcu->name; mcu++)\n     print_mcu (mcu);\n \n   return EXIT_SUCCESS;"}, {"sha": "4c5e23b9685a4dda0e0ed410ca4d7247b466ffdf", "filename": "gcc/config/avr/t-avr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3882207695588de867178df85b1e2511ccd7fb26/gcc%2Fconfig%2Favr%2Ft-avr", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3882207695588de867178df85b1e2511ccd7fb26/gcc%2Fconfig%2Favr%2Ft-avr", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Ft-avr?ref=3882207695588de867178df85b1e2511ccd7fb26", "patch": "@@ -16,10 +16,6 @@\n # along with GCC; see the file COPYING3.  If not see\n # <http://www.gnu.org/licenses/>.\n \n-driver-avr.o: $(srcdir)/config/avr/driver-avr.c \\\n-  $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H)\n-\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<\n-\n avr-devices.o: $(srcdir)/config/avr/avr-devices.c \\\n   $(srcdir)/config/avr/avr-mcus.def \\\n   $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H)\n@@ -69,8 +65,8 @@ gen-avr-mmcu-texi$(build_exeext): $(srcdir)/config/avr/gen-avr-mmcu-texi.c \\\n \n gen-avr-mmcu-specs$(build_exeext): $(srcdir)/config/avr/gen-avr-mmcu-specs.c \\\n   $(AVR_MCUS) $(srcdir)/config/avr/avr-devices.c \\\n-  $(srcdir)/config/avr/avr-arch.h\n-\t$(CC_FOR_BUILD) $(CFLAGS_FOR_BUILD) $< -o $@\n+  $(srcdir)/config/avr/avr-arch.h $(TM_H)\n+\t$(CXX_FOR_BUILD) $(CXXFLAGS_FOR_BUILD) $< -o $@ $(INCLUDES)\n \n $(srcdir)/doc/avr-mmcu.texi: gen-avr-mmcu-texi$(build_exeext)\n \t$(RUN_GEN) ./$< > $@"}]}