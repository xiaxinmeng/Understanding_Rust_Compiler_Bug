{"sha": "9c69dcea0d67714ca0ce52317725ccf1644ce93e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM2OWRjZWEwZDY3NzE0Y2EwY2U1MjMxNzcyNWNjZjE2NDRjZTkzZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-05-02T22:00:16Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-05-02T22:00:16Z"}, "message": "tree.c (build_vec_init_expr): Take complain parm.\n\n\t* tree.c (build_vec_init_expr): Take complain parm.\n\t(build_vec_init_elt): Likewise.  Free arg vector.\n\t(diagnose_non_constexpr_vec_init, build_array_copy): Adjust.\n\t* cp-tree.h (VEC_INIT_EXPR_SLOT): Use VEC_INIT_EXPR_CHECK.\n\t(VEC_INIT_EXPR_INIT): Likewise.\n\tAdjust build_vec_init_expr declaration.\n\t* init.c (perform_member_init): Adjust.\n\nFrom-SVN: r173275", "tree": {"sha": "f338955c0b3529289670686e025251dc71b8089e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f338955c0b3529289670686e025251dc71b8089e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c69dcea0d67714ca0ce52317725ccf1644ce93e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c69dcea0d67714ca0ce52317725ccf1644ce93e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c69dcea0d67714ca0ce52317725ccf1644ce93e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c69dcea0d67714ca0ce52317725ccf1644ce93e/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b73a47045560ac7b2b808736383e8b5f8a97f55a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b73a47045560ac7b2b808736383e8b5f8a97f55a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b73a47045560ac7b2b808736383e8b5f8a97f55a"}], "stats": {"total": 37, "additions": 24, "deletions": 13}, "files": [{"sha": "6cf07220a75189fc2ef8cc88ff7b4b0417289038", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c69dcea0d67714ca0ce52317725ccf1644ce93e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c69dcea0d67714ca0ce52317725ccf1644ce93e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9c69dcea0d67714ca0ce52317725ccf1644ce93e", "patch": "@@ -1,5 +1,13 @@\n 2011-05-02  Jason Merrill  <jason@redhat.com>\n \n+\t* tree.c (build_vec_init_expr): Take complain parm.\n+\t(build_vec_init_elt): Likewise.  Free arg vector.\n+\t(diagnose_non_constexpr_vec_init, build_array_copy): Adjust.\n+\t* cp-tree.h (VEC_INIT_EXPR_SLOT): Use VEC_INIT_EXPR_CHECK.\n+\t(VEC_INIT_EXPR_INIT): Likewise.\n+\tAdjust build_vec_init_expr declaration.\n+\t* init.c (perform_member_init): Adjust.\n+\n \tRevert:\n \tPR c++/40975\n \t* cp-tree.def (VEC_INIT_EXPR): Add third operand."}, {"sha": "961581e50c2a4dc06d878449640a574ab89b9463", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c69dcea0d67714ca0ce52317725ccf1644ce93e/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c69dcea0d67714ca0ce52317725ccf1644ce93e/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=9c69dcea0d67714ca0ce52317725ccf1644ce93e", "patch": "@@ -2896,8 +2896,8 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n        (arg) = next_aggr_init_expr_arg (&(iter)))\n \n /* VEC_INIT_EXPR accessors.  */\n-#define VEC_INIT_EXPR_SLOT(NODE) TREE_OPERAND (NODE, 0)\n-#define VEC_INIT_EXPR_INIT(NODE) TREE_OPERAND (NODE, 1)\n+#define VEC_INIT_EXPR_SLOT(NODE) TREE_OPERAND (VEC_INIT_EXPR_CHECK (NODE), 0)\n+#define VEC_INIT_EXPR_INIT(NODE) TREE_OPERAND (VEC_INIT_EXPR_CHECK (NODE), 1)\n \n /* Indicates that a VEC_INIT_EXPR is a potential constant expression.\n    Only set when the current function is constexpr.  */\n@@ -5420,7 +5420,7 @@ extern tree get_target_expr_sfinae\t\t(tree, tsubst_flags_t);\n extern tree build_cplus_array_type\t\t(tree, tree);\n extern tree build_array_of_n_type\t\t(tree, int);\n extern tree build_array_copy\t\t\t(tree);\n-extern tree build_vec_init_expr\t\t\t(tree, tree);\n+extern tree build_vec_init_expr\t\t\t(tree, tree, tsubst_flags_t);\n extern void diagnose_non_constexpr_vec_init\t(tree);\n extern tree hash_tree_cons\t\t\t(tree, tree, tree);\n extern tree hash_tree_chain\t\t\t(tree, tree);"}, {"sha": "7a7379eca7e3e353c1ae89f95b5db81225805af4", "filename": "gcc/cp/init.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c69dcea0d67714ca0ce52317725ccf1644ce93e/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c69dcea0d67714ca0ce52317725ccf1644ce93e/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=9c69dcea0d67714ca0ce52317725ccf1644ce93e", "patch": "@@ -506,7 +506,7 @@ perform_member_init (tree member, tree init)\n       /* mem() means value-initialization.  */\n       if (TREE_CODE (type) == ARRAY_TYPE)\n \t{\n-\t  init = build_vec_init_expr (type, init);\n+\t  init = build_vec_init_expr (type, init, tf_warning_or_error);\n \t  init = build2 (INIT_EXPR, type, decl, init);\n \t  finish_expr_stmt (init);\n \t}\n@@ -543,7 +543,7 @@ perform_member_init (tree member, tree init)\n \t      || same_type_ignoring_top_level_qualifiers_p (type,\n \t\t\t\t\t\t\t    TREE_TYPE (init)))\n \t    {\n-\t      init = build_vec_init_expr (type, init);\n+\t      init = build_vec_init_expr (type, init, tf_warning_or_error);\n \t      init = build2 (INIT_EXPR, type, decl, init);\n \t      finish_expr_stmt (init);\n \t    }"}, {"sha": "0f2f86cd4b4efb8d3f07179ad3f6276e6c1c524f", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c69dcea0d67714ca0ce52317725ccf1644ce93e/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c69dcea0d67714ca0ce52317725ccf1644ce93e/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=9c69dcea0d67714ca0ce52317725ccf1644ce93e", "patch": "@@ -475,7 +475,7 @@ build_cplus_new (tree type, tree init, tsubst_flags_t complain)\n    another array to copy.  */\n \n static tree\n-build_vec_init_elt (tree type, tree init)\n+build_vec_init_elt (tree type, tree init, tsubst_flags_t complain)\n {\n   tree inner_type = strip_array_types (type);\n   VEC(tree,gc) *argvec;\n@@ -485,7 +485,7 @@ build_vec_init_elt (tree type, tree init)\n     /* No interesting initialization to do.  */\n     return integer_zero_node;\n   else if (init == void_type_node)\n-    return build_value_init (inner_type, tf_warning_or_error);\n+    return build_value_init (inner_type, complain);\n \n   gcc_assert (init == NULL_TREE\n \t      || (same_type_ignoring_top_level_qualifiers_p\n@@ -499,21 +499,24 @@ build_vec_init_elt (tree type, tree init)\n \tdummy = move (dummy);\n       VEC_quick_push (tree, argvec, dummy);\n     }\n-  return build_special_member_call (NULL_TREE, complete_ctor_identifier,\n+  init = build_special_member_call (NULL_TREE, complete_ctor_identifier,\n \t\t\t\t    &argvec, inner_type, LOOKUP_NORMAL,\n-\t\t\t\t    tf_warning_or_error);\n+\t\t\t\t    complain);\n+  release_tree_vector (argvec);\n+\n+  return init;\n }\n \n /* Return a TARGET_EXPR which expresses the initialization of an array to\n    be named later, either default-initialization or copy-initialization\n    from another array of the same type.  */\n \n tree\n-build_vec_init_expr (tree type, tree init)\n+build_vec_init_expr (tree type, tree init, tsubst_flags_t complain)\n {\n   tree slot;\n   bool value_init = false;\n-  tree elt_init = build_vec_init_elt (type, init);\n+  tree elt_init = build_vec_init_elt (type, init, complain);\n \n   if (init == void_type_node)\n     {\n@@ -550,14 +553,14 @@ diagnose_non_constexpr_vec_init (tree expr)\n   else\n     init = VEC_INIT_EXPR_INIT (expr);\n \n-  elt_init = build_vec_init_elt (type, init);\n+  elt_init = build_vec_init_elt (type, init, tf_warning_or_error);\n   require_potential_constant_expression (elt_init);\n }\n \n tree\n build_array_copy (tree init)\n {\n-  return build_vec_init_expr (TREE_TYPE (init), init);\n+  return build_vec_init_expr (TREE_TYPE (init), init, tf_warning_or_error);\n }\n \n /* Build a TARGET_EXPR using INIT to initialize a new temporary of the"}]}