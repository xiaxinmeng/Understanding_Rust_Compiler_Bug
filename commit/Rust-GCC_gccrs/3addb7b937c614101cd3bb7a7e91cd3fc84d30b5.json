{"sha": "3addb7b937c614101cd3bb7a7e91cd3fc84d30b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2FkZGI3YjkzN2M2MTQxMDFjZDNiYjdhN2U5MWNkM2ZjODRkMzBiNQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-04-26T13:15:54Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-04-26T13:15:54Z"}, "message": "Tweak C++2a uses-allocator construction utilities\n\nThe 20_util/scoped_allocator/69293_neg.cc test was failing in C++2a mode\nbecause the expected static_assert text wasn't matched. The code is\nstill ill-formed in C++2a, but uses the new __uses_alloc_args function\nand so fails a different static_assert. This patch adds the same string\nto the new static_assert, so the test passes.\n\nNow that G++ allows concepts to be declared without 'bool' we can use\nthe correct C++2a syntax for the _Std_pair concept used to constrain the\nuses-allocator construction utilities.\n\nAlso add a new test to verify that pmr::polymorphic_allocator correctly\nperforms recursive uses-allocator construction for nested pairs in\nC++2a.\n\n\t* include/std/memory (__uses_alloc_args): Add string-literal to\n\tstatic_assert, to match the one in __uses_alloc.\n\t[__cpp_concepts] (_Std_pair): Use C++2a syntax for concept.\n\t* testsuite/20_util/polymorphic_allocator/construct_c++2a.cc: Check\n\tfor recursive uses-allocator construction of nested pairs.\n\t* testsuite/20_util/scoped_allocator/construct_pair_c++2a.cc:: Add\n\tcomment.\n\nFrom-SVN: r270600", "tree": {"sha": "1799a03d53278642703aea816f537ed458d7b13a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1799a03d53278642703aea816f537ed458d7b13a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3addb7b937c614101cd3bb7a7e91cd3fc84d30b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3addb7b937c614101cd3bb7a7e91cd3fc84d30b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3addb7b937c614101cd3bb7a7e91cd3fc84d30b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3addb7b937c614101cd3bb7a7e91cd3fc84d30b5/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8790a498e2edb064634b41853e74be84aaf86aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8790a498e2edb064634b41853e74be84aaf86aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8790a498e2edb064634b41853e74be84aaf86aa"}], "stats": {"total": 69, "additions": 67, "deletions": 2}, "files": [{"sha": "d2f8ed4f1aa81a67a36d21afe2556260a192fe59", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3addb7b937c614101cd3bb7a7e91cd3fc84d30b5/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3addb7b937c614101cd3bb7a7e91cd3fc84d30b5/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3addb7b937c614101cd3bb7a7e91cd3fc84d30b5", "patch": "@@ -1,3 +1,13 @@\n+2019-04-26  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/memory (__uses_alloc_args): Add string-literal to\n+\tstatic_assert, to match the one in __uses_alloc.\n+\t[__cpp_concepts] (_Std_pair): Use C++2a syntax for concept.\n+\t* testsuite/20_util/polymorphic_allocator/construct_c++2a.cc: Check\n+\tfor recursive uses-allocator construction of nested pairs.\n+\t* testsuite/20_util/scoped_allocator/construct_pair_c++2a.cc:: Add\n+\tcomment.\n+\n 2019-04-26  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/abi/post/s390x-linux-gnu/32/baseline_symbols.txt: Update."}, {"sha": "6677fe782dea311411571019577a036a79dbcad0", "filename": "libstdc++-v3/include/std/memory", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3addb7b937c614101cd3bb7a7e91cd3fc84d30b5/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3addb7b937c614101cd3bb7a7e91cd3fc84d30b5/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory?ref=3addb7b937c614101cd3bb7a7e91cd3fc84d30b5", "patch": "@@ -191,7 +191,9 @@ get_pointer_safety() noexcept { return pointer_safety::relaxed; }\n \t    }\n \t  else\n \t    {\n-\t      static_assert(is_constructible_v<_Tp, _Args..., const _Alloc&>);\n+\t      static_assert(is_constructible_v<_Tp, _Args..., const _Alloc&>,\n+\t\t  \"construction with an allocator must be possible\"\n+\t\t  \" if uses_allocator is true\");\n \n \t      return tuple<_Args&&..., const _Alloc&>(\n \t\t  std::forward<_Args>(__args)..., __a);\n@@ -207,7 +209,7 @@ get_pointer_safety() noexcept { return pointer_safety::relaxed; }\n \n #if __cpp_concepts\n   template<typename _Tp>\n-    concept bool _Std_pair = __is_pair<_Tp>::value;\n+    concept _Std_pair = __is_pair<_Tp>::value;\n #endif\n \n // This is a temporary workaround until -fconcepts is implied by -std=gnu++2a"}, {"sha": "df01dccafe1bca9666df22495376469134420a6a", "filename": "libstdc++-v3/testsuite/20_util/polymorphic_allocator/construct_c++2a.cc", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3addb7b937c614101cd3bb7a7e91cd3fc84d30b5/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpolymorphic_allocator%2Fconstruct_c%2B%2B2a.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3addb7b937c614101cd3bb7a7e91cd3fc84d30b5/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpolymorphic_allocator%2Fconstruct_c%2B%2B2a.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpolymorphic_allocator%2Fconstruct_c%2B%2B2a.cc?ref=3addb7b937c614101cd3bb7a7e91cd3fc84d30b5", "patch": "@@ -21,6 +21,8 @@\n #include <memory_resource>\n #include <utility>\n #include <tuple>\n+#include <testsuite_hooks.h>\n+#include <testsuite_allocator.h>\n \n struct do_not_copy {\n   do_not_copy() = default;\n@@ -115,11 +117,60 @@ test05()\n   a.deallocate(ptr, 1);\n }\n \n+// P0591R4 makes uses-allocator construction apply recursively for nested pairs\n+void\n+test06()\n+{\n+  struct X\n+  {\n+    using allocator_type = std::pmr::polymorphic_allocator<int>;\n+    X() = default;\n+    X(const X&) { throw 1; }\n+    X(const X&, const allocator_type& a) : mr(a.resource()) { }\n+\n+    std::pmr::memory_resource* mr = nullptr;\n+  };\n+\n+  struct Y\n+  {\n+    using allocator_type = std::pmr::polymorphic_allocator<int>;\n+    Y() = default;\n+    Y(const Y&) = delete;\n+    Y(std::allocator_arg_t, const allocator_type& a, const Y&)\n+    : mr(a.resource()) { }\n+\n+    std::pmr::memory_resource* mr = nullptr;\n+  };\n+\n+  using value_type = std::pair<std::pair<X, int>, std::pair<int, Y>>;\n+  __gnu_test::memory_resource mr;\n+  std::pmr::polymorphic_allocator<int> a(&mr);\n+  std::pmr::vector<value_type> v(a);\n+  VERIFY( v.get_allocator().resource() == &mr );\n+\n+  value_type val;\n+  val.first.second = 2;\n+  val.second.first = 3;\n+  v.push_back(val);\n+  X& x = v.back().first.first;\n+  VERIFY( x.mr != val.first.first.mr );\n+  VERIFY( x.mr == &mr );\n+\n+  Y& y = v.back().second.second;\n+  VERIFY( y.mr != val.second.second.mr );\n+  VERIFY( y.mr == &mr );\n+\n+  // Check other members of the pairs are correctly initialized too:\n+  VERIFY( v.back().first.second == val.first.second );\n+  VERIFY( v.back().second.first == val.second.first );\n+}\n+\n int main()\n {\n   test01();\n   test02();\n   test03();\n   test04();\n   test05();\n+  test06();\n }"}, {"sha": "09050b2bc08b5d919996f6c7a00fee6193b74c9a", "filename": "libstdc++-v3/testsuite/20_util/scoped_allocator/construct_pair_c++2a.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3addb7b937c614101cd3bb7a7e91cd3fc84d30b5/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fscoped_allocator%2Fconstruct_pair_c%2B%2B2a.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3addb7b937c614101cd3bb7a7e91cd3fc84d30b5/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fscoped_allocator%2Fconstruct_pair_c%2B%2B2a.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fscoped_allocator%2Fconstruct_pair_c%2B%2B2a.cc?ref=3addb7b937c614101cd3bb7a7e91cd3fc84d30b5", "patch": "@@ -18,6 +18,8 @@\n // { dg-options \"-std=gnu++2a\" }\n // { dg-do run { target c++2a } }\n \n+// P0591R4 makes uses-allocator construction apply recursively for nested pairs\n+\n #include <scoped_allocator>\n #include <vector>\n #include <testsuite_hooks.h>"}]}