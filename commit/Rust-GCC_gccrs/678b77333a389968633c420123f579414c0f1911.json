{"sha": "678b77333a389968633c420123f579414c0f1911", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njc4Yjc3MzMzYTM4OTk2ODYzM2M0MjAxMjNmNTc5NDE0YzBmMTkxMQ==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@bigpond.net.au", "date": "2002-09-18T23:27:29Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2002-09-18T23:27:29Z"}, "message": "rs6000.md: (floatdisf2): Rename to floatdisf2_internal1.\n\n\t* config/rs6000/rs6000.md: (floatdisf2): Rename to\n\tfloatdisf2_internal1.\n\t(floatdisf2): New define_expand.\n\t(floatdisf2_internal2): Likewise.\n\nFrom-SVN: r57288", "tree": {"sha": "fb8b6f627c043a74d86eb9f7b254aaabcfe12012", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb8b6f627c043a74d86eb9f7b254aaabcfe12012"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/678b77333a389968633c420123f579414c0f1911", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/678b77333a389968633c420123f579414c0f1911", "html_url": "https://github.com/Rust-GCC/gccrs/commit/678b77333a389968633c420123f579414c0f1911", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/678b77333a389968633c420123f579414c0f1911/comments", "author": null, "committer": null, "parents": [{"sha": "c402b6bfbdeb1e95750bff205e441e597f1c47a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c402b6bfbdeb1e95750bff205e441e597f1c47a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c402b6bfbdeb1e95750bff205e441e597f1c47a6"}], "stats": {"total": 59, "additions": 55, "deletions": 4}, "files": [{"sha": "80846d701075247e2c2e8ee7bcb8d8c6dcc28210", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/678b77333a389968633c420123f579414c0f1911/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/678b77333a389968633c420123f579414c0f1911/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=678b77333a389968633c420123f579414c0f1911", "patch": "@@ -1,3 +1,10 @@\n+2002-09-19  Alan Modra  <amodra@bigpond.net.au>\n+\n+\t* config/rs6000/rs6000.md: (floatdisf2): Rename to\n+\tfloatdisf2_internal1.\n+\t(floatdisf2): New define_expand.\n+\t(floatdisf2_internal2): Likewise.\n+\n 2002-09-18  Richard Henderson  <rth@redhat.com>\n \n \t* real.c (sticky_rshift_significand): Collect sticky as "}, {"sha": "8bfec08c4d5ff5df397539fa24b3e2c59c7649b0", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 48, "deletions": 4, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/678b77333a389968633c420123f579414c0f1911/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/678b77333a389968633c420123f579414c0f1911/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=678b77333a389968633c420123f579414c0f1911", "patch": "@@ -5890,20 +5890,64 @@\n   \"fctidz %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n-;; This only is safe if rounding mode set appropriately.\n-(define_insn_and_split \"floatdisf2\"\n+(define_expand \"floatdisf2\"\n+  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n+        (float:SF (match_operand:DI 1 \"gpc_reg_operand\" \"\")))]\n+  \"TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"\n+{\n+  if (!flag_unsafe_math_optimizations)\n+    {\n+      rtx label = gen_label_rtx ();\n+      emit_insn (gen_floatdisf2_internal2 (operands[1], label));\n+      emit_label (label);\n+    }\n+  emit_insn (gen_floatdisf2_internal1 (operands[0], operands[1]));\n+  DONE;\n+}\")\n+\n+;; This is not IEEE compliant if rounding mode is \"round to nearest\".\n+;; If the DI->DF conversion is inexact, then it's possible to suffer\n+;; from double rounding.\n+(define_insn_and_split \"floatdisf2_internal1\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n         (float:SF (match_operand:DI 1 \"gpc_reg_operand\" \"*f\")))\n    (clobber (match_scratch:DF 2 \"=f\"))]\n-  \"TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS\n-   && flag_unsafe_math_optimizations\"\n+  \"TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 2)\n         (float:DF (match_dup 1)))\n    (set (match_dup 0)\n         (float_truncate:SF (match_dup 2)))]\n   \"\")\n+\n+;; Twiddles bits to avoid double rounding.\n+;; Bits that might be trucated when converting to DFmode are replaced\n+;; by a bit that won't be lost at that stage, but is below the SFmode\n+;; rounding position.\n+(define_expand \"floatdisf2_internal2\"\n+  [(set (match_dup 2) (and:DI (match_operand:DI 0 \"\" \"\") (const_int 2047)))\n+   (set (match_dup 4) (compare:CC (match_dup 2) (const_int 0)))\n+   (set (match_dup 3) (ashiftrt:DI (match_dup 0) (const_int 53)))\n+   (set (match_dup 3) (plus:DI (match_dup 3) (const_int 1)))\n+   (set (pc) (if_then_else (eq (match_dup 4) (const_int 0))\n+\t\t\t   (label_ref (match_operand:DI 1 \"\" \"\"))\n+\t\t\t   (pc)))\n+   (set (match_dup 5) (compare:CCUNS (match_dup 3) (const_int 2)))\n+   (set (pc) (if_then_else (ltu (match_dup 5) (const_int 0))\n+\t\t\t   (label_ref (match_dup 1))\n+\t\t\t   (pc)))\n+   (set (match_dup 0) (xor:DI (match_dup 0) (match_dup 2)))\n+   (set (match_dup 0) (ior:DI (match_dup 0) (const_int 2048)))]\n+  \"TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"\n+{\n+  operands[2] = gen_reg_rtx (DImode);\n+  operands[3] = gen_reg_rtx (DImode);\n+  operands[4] = gen_reg_rtx (CCmode);\n+  operands[5] = gen_reg_rtx (CCUNSmode);\n+}\")\n \f\n ;; Define the DImode operations that can be done in a small number\n ;; of instructions.  The & constraints are to prevent the register"}]}