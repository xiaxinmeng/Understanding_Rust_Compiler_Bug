{"sha": "f474835bb9beb8e2a5cbc680760aff00a73e5bfb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQ3NDgzNWJiOWJlYjhlMmE1Y2JjNjgwNzYwYWZmMDBhNzNlNWJmYg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2005-01-18T16:44:51Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2005-01-18T16:44:51Z"}, "message": "testsuite_performance.h (time_counter::start): Clear.\n\n\n2005-01-18  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* testsuite/testsuite_performance.h (time_counter::start):\n\tClear. Tweaks.\n\t(clear_counters): Inline.\n\t(start_counters): Inline.\n\t(stop_counters): Inline.\n\t* testsuite/performance/20_util/allocator/map_thread.cc: Return.\n\t* testsuite/performance/20_util/allocator/insert.cc: Remove bogus\n\treturn, add return.\n\t* testsuite/performance/20_util/allocator/map_thread.cc: Same.\n\nFrom-SVN: r93834", "tree": {"sha": "044179cbc38bf1f7853151b450ad36c71245377b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/044179cbc38bf1f7853151b450ad36c71245377b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f474835bb9beb8e2a5cbc680760aff00a73e5bfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f474835bb9beb8e2a5cbc680760aff00a73e5bfb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f474835bb9beb8e2a5cbc680760aff00a73e5bfb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f474835bb9beb8e2a5cbc680760aff00a73e5bfb/comments", "author": null, "committer": null, "parents": [{"sha": "de004e6db52c426658b4b936500dd524332f7e50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de004e6db52c426658b4b936500dd524332f7e50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de004e6db52c426658b4b936500dd524332f7e50"}], "stats": {"total": 161, "additions": 91, "deletions": 70}, "files": [{"sha": "a8ff690cc3ad02966566f39946b71ad895e1a103", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f474835bb9beb8e2a5cbc680760aff00a73e5bfb/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f474835bb9beb8e2a5cbc680760aff00a73e5bfb/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f474835bb9beb8e2a5cbc680760aff00a73e5bfb", "patch": "@@ -1,3 +1,15 @@\n+2005-01-18  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* testsuite/testsuite_performance.h (time_counter::start):\n+\tClear. Tweaks.\n+\t(clear_counters): Inline.\n+\t(start_counters): Inline.\n+\t(stop_counters): Inline.\n+\t* testsuite/performance/20_util/allocator/map_thread.cc: Return.\n+\t* testsuite/performance/20_util/allocator/insert.cc: Remove bogus\n+\treturn, add return.\n+\t* testsuite/performance/20_util/allocator/map_thread.cc: Same.\n+\t\n 2005-01-17  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/19433"}, {"sha": "ab53afcac6339eeb24f7a6ee192177ac86916fd9", "filename": "libstdc++-v3/testsuite/performance/20_util/allocator/insert.cc", "status": "modified", "additions": 33, "deletions": 35, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f474835bb9beb8e2a5cbc680760aff00a73e5bfb/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F20_util%2Fallocator%2Finsert.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f474835bb9beb8e2a5cbc680760aff00a73e5bfb/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F20_util%2Fallocator%2Finsert.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F20_util%2Fallocator%2Finsert.cc?ref=f474835bb9beb8e2a5cbc680760aff00a73e5bfb", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2003, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -92,6 +92,7 @@ template<typename Container>\n   do_test(void* p = NULL)\n   {\n     do_loop<Container>();\n+    return p;\n   }\n \n template<typename Container>\n@@ -103,42 +104,39 @@ template<typename Container>\n \n     time_counter time;\n     resource_counter resource;\n-    clear_counters(time, resource);\n-    start_counters(time, resource);\n-\n-    if (! run_threaded)\n-      {\n-\tdo_loop<Container>();\n-      }\n-    else\n-      {\n+    {\n+      start_counters(time, resource);\n+      if (!run_threaded)\n+\t{\n+\t  do_loop<Container>();\n+\t}\n+      else\n+\t{\n #if defined (_GLIBCXX_GCC_GTHR_POSIX_H) && !defined (NOTHREAD)\n-\tpthread_t  t1, t2, t3, t4;\n-\tpthread_create(&t1, 0, &do_test<Container>, 0);\n-\tpthread_create(&t2, 0, &do_test<Container>, 0);\n-\tpthread_create(&t3, 0, &do_test<Container>, 0);\n-\tpthread_create(&t4, 0, &do_test<Container>, 0);\n-\n-\tpthread_join(t1, NULL);\n-\tpthread_join(t2, NULL);\n-\tpthread_join(t3, NULL);\n-\tpthread_join(t4, NULL);\n-#else\n-\treturn;\n-#endif\n-      }\n+\t  pthread_t  t1, t2, t3, t4;\n+\t  pthread_create(&t1, 0, &do_test<Container>, 0);\n+\t  pthread_create(&t2, 0, &do_test<Container>, 0);\n+\t  pthread_create(&t3, 0, &do_test<Container>, 0);\n+\t  pthread_create(&t4, 0, &do_test<Container>, 0);\n+\t  \n+\t  pthread_join(t1, NULL);\n+\t  pthread_join(t2, NULL);\n+\t  pthread_join(t3, NULL);\n+\t  pthread_join(t4, NULL);\n+#endif\n+\t}\n+      stop_counters(time, resource);\n \n-    stop_counters(time, resource);\n- \n-    std::ostringstream comment;\n-    if (run_threaded)\n-      comment << \"4-way threaded iterations: \" << iterations*4 << '\\t';\n-    else\n-      comment << \"iterations: \" << iterations << '\\t';\n-    comment << \"type: \" << abi::__cxa_demangle(typeid(obj).name(),\n-\t\t\t\t\t       0, 0, &status);\n-    report_header(__FILE__, comment.str());\n-    report_performance(__FILE__, string(), time, resource);\n+      std::ostringstream comment;\n+      if (run_threaded)\n+\tcomment << \"4-way threaded iterations: \" << iterations*4 << '\\t';\n+      else\n+\tcomment << \"iterations: \" << iterations << '\\t';\n+      comment << \"type: \" << abi::__cxa_demangle(typeid(obj).name(),\n+\t\t\t\t\t\t 0, 0, &status);\n+      report_header(__FILE__, comment.str());\n+      report_performance(__FILE__, string(), time, resource);\n+    }\n   }\n \n // http://gcc.gnu.org/ml/libstdc++/2001-05/msg00105.html"}, {"sha": "f0a3e7596a8ae90e9d0fad109011456e6993d060", "filename": "libstdc++-v3/testsuite/performance/20_util/allocator/insert_insert.cc", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f474835bb9beb8e2a5cbc680760aff00a73e5bfb/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F20_util%2Fallocator%2Finsert_insert.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f474835bb9beb8e2a5cbc680760aff00a73e5bfb/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F20_util%2Fallocator%2Finsert_insert.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F20_util%2Fallocator%2Finsert_insert.cc?ref=f474835bb9beb8e2a5cbc680760aff00a73e5bfb", "patch": "@@ -96,20 +96,19 @@ template<typename Container>\n \n     time_counter time;\n     resource_counter resource;\n-    clear_counters(time, resource);\n-    start_counters(time, resource);\n-\n-    do_loop<Container>();\n-    do_loop<Container>();\n-\n-    stop_counters(time, resource);\n- \n-    std::ostringstream comment;\n-    comment << \"repeated iterations: \" << iterations*2 << '\\t';\n-    comment << \"type: \" << abi::__cxa_demangle(typeid(obj).name(),\n-\t\t\t\t\t       0, 0, &status);\n-    report_header(__FILE__, comment.str());\n-    report_performance(__FILE__, string(), time, resource);\n+    {\n+      start_counters(time, resource);\n+      do_loop<Container>();\n+      do_loop<Container>();\n+      stop_counters(time, resource);\n+      \n+      std::ostringstream comment;\n+      comment << \"repeated iterations: \" << iterations*2 << '\\t';\n+      comment << \"type: \" << abi::__cxa_demangle(typeid(obj).name(),\n+\t\t\t\t\t\t 0, 0, &status);\n+      report_header(__FILE__, comment.str());\n+      report_performance(__FILE__, string(), time, resource);\n+    }\n   }\n \n // http://gcc.gnu.org/ml/libstdc++/2001-05/msg00105.html"}, {"sha": "7335254746f249355952e47d5ded94760c0413ee", "filename": "libstdc++-v3/testsuite/performance/20_util/allocator/map_thread.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f474835bb9beb8e2a5cbc680760aff00a73e5bfb/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F20_util%2Fallocator%2Fmap_thread.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f474835bb9beb8e2a5cbc680760aff00a73e5bfb/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F20_util%2Fallocator%2Fmap_thread.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F20_util%2Fallocator%2Fmap_thread.cc?ref=f474835bb9beb8e2a5cbc680760aff00a73e5bfb", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -64,7 +64,6 @@ template<typename Container>\n \tfor (int c = 0; c < 10; c++)\n \t  {\n \t    Container m;\n-\n \t    for (unsigned i = 0; i < iterations; ++i) \n \t      m[i] = i;\n \t  }\n@@ -73,6 +72,7 @@ template<typename Container>\n       {\n \t// No point allocating all available memory, repeatedly.\t\n       }\n+    return p;\n   }\n \n template<typename Container>\n@@ -85,7 +85,6 @@ template<typename Container>\n     time_counter time;\n     resource_counter resource;\n \n-    clear_counters(time, resource);\n     start_counters(time, resource);\n     \n     pthread_t  t1, t2, t3, t4;"}, {"sha": "5240358844b6e890ba0c2e06b5ee430d4115bbc5", "filename": "libstdc++-v3/testsuite/testsuite_performance.h", "status": "modified", "additions": 31, "deletions": 18, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f474835bb9beb8e2a5cbc680760aff00a73e5bfb/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_performance.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f474835bb9beb8e2a5cbc680760aff00a73e5bfb/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_performance.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_performance.h?ref=f474835bb9beb8e2a5cbc680760aff00a73e5bfb", "patch": "@@ -1,7 +1,7 @@\n // -*- C++ -*-\n // Testing performance utilities for the C++ library testsuite.\n //\n-// Copyright (C) 2003, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -77,31 +77,44 @@ namespace __gnu_test\n {\n   class time_counter\n   {\n+  private:\n     clock_t\telapsed_begin;\n     clock_t\telapsed_end;\n     tms\t\ttms_begin;\n     tms\t\ttms_end;\n-    \n+\n   public:\n-    time_counter() \n-    { this->clear(); }\n+    explicit\n+    time_counter() : elapsed_begin(), elapsed_end(), tms_begin(), tms_end()\n+    { }\n \n     void \n-    clear()\n+    clear() throw()\n     {\n-      elapsed_begin = 0;\n-      elapsed_end = 0;\n-      memset(&tms_begin, 0, sizeof(tms));\n-      memset(&tms_end, 0, sizeof(tms));\n+      elapsed_begin = clock_t();\n+      elapsed_end = clock_t();\n+      tms_begin = tms();\n+      tms_end = tms();\n     }\n \n     void\n     start()\n-    { elapsed_begin = times(&tms_begin); }\n+    { \n+      this->clear();\n+      elapsed_begin = times(&tms_begin); \n+      const clock_t err = clock_t(-1);\n+      if (elapsed_begin == err)\n+\tstd::__throw_runtime_error(\"time_counter::start\");\n+    }\n     \n     void\n     stop()\n-    { elapsed_end = times(&tms_end); }\n+    { \n+      elapsed_end = times(&tms_end); \n+      const clock_t err = clock_t(-1);\n+      if (elapsed_end == err)\n+\tstd::__throw_runtime_error(\"time_counter::stop\");\n+    }\n \n     size_t\n     real_time() const\n@@ -129,7 +142,7 @@ namespace __gnu_test\n     { this->clear(); }\n     \n     void \n-    clear()\n+    clear() throw()\n     { \n       memset(&rusage_begin, 0, sizeof(rusage_begin)); \n       memset(&rusage_end, 0, sizeof(rusage_end)); \n@@ -168,21 +181,21 @@ namespace __gnu_test\n     { return rusage_end.ru_nswap - rusage_begin.ru_nswap; }\n   };\n \n-  void\n+  inline void\n   start_counters(time_counter& t, resource_counter& r)\n   {\n     t.start();\n     r.start();\n   }\n \n-  void\n+  inline void\n   stop_counters(time_counter& t, resource_counter& r)\n   {\n     t.stop();\n     r.stop();\n   }\n \n-  void\n+  inline void\n   clear_counters(time_counter& t, resource_counter& r)\n   {\n     t.clear();\n@@ -202,8 +215,8 @@ namespace __gnu_test\n     std::ofstream out(name, std::ios_base::app);\n \n #ifdef __GTHREADS\n-    if (__gthread_active_p ())\n-      testname.append (\"-thread\");\n+    if (__gthread_active_p())\n+      testname.append(\"-thread\");\n #endif\n \n     out.setf(std::ios_base::left);\n@@ -234,7 +247,7 @@ namespace __gnu_test\n \n #ifdef __GTHREADS\n     if (__gthread_active_p ())\n-      testname.append (\"-thread\");\n+      testname.append(\"-thread\");\n #endif\n \n     out.setf(std::ios_base::left);"}]}