{"sha": "f6d1b868c179eb6ad51dcab054a59d1fa1f6fa9f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjZkMWI4NjhjMTc5ZWI2YWQ1MWRjYWIwNTRhNTlkMWZhMWY2ZmE5Zg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-06-23T16:58:54Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-06-23T16:58:54Z"}, "message": "re PR tree-optimization/71488 (Wrong code for vector comparisons with ivybridge and westmere targets)\n\n\tPR tree-optimization/71488\n\t* gcc.target/i386/i386.exp (check_effective_target_sse4): Move to ...\n\t* lib/target-supports.exp: ... here.\n\t(check_sse4_hw_available): New procedure.\n\t(check_effective_target_sse4_runtime): Ditto.\n\t* g++.dg/pr71488.C (dg-additional-options): Use -msse4 instead of\n\t-march=westmere for sse4_runtime targets.\n\t* gcc.dg/vect/vect-bool-cmp.c: Include \"tree-vect.h\".\n\t(dg-additional-options): Use for sse4_runtime targets.\n\t(main): Call check_vect ().\n\t(dg-final): Perform scan only for sse4_runtime targets.\n\nFrom-SVN: r237738", "tree": {"sha": "8d3330a153a530c0b2644a6eb355e2c1fe9cd65c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d3330a153a530c0b2644a6eb355e2c1fe9cd65c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6d1b868c179eb6ad51dcab054a59d1fa1f6fa9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6d1b868c179eb6ad51dcab054a59d1fa1f6fa9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6d1b868c179eb6ad51dcab054a59d1fa1f6fa9f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6d1b868c179eb6ad51dcab054a59d1fa1f6fa9f/comments", "author": null, "committer": null, "parents": [{"sha": "49677530089e2a5016b3e0d11df4b2e1f1f59b65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49677530089e2a5016b3e0d11df4b2e1f1f59b65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49677530089e2a5016b3e0d11df4b2e1f1f59b65"}], "stats": {"total": 97, "additions": 74, "deletions": 23}, "files": [{"sha": "d70dc48cbd8caafebcfd8d169cb04a4da6ff93d8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6d1b868c179eb6ad51dcab054a59d1fa1f6fa9f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6d1b868c179eb6ad51dcab054a59d1fa1f6fa9f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f6d1b868c179eb6ad51dcab054a59d1fa1f6fa9f", "patch": "@@ -126,7 +126,7 @@\n \n 2016-06-22  Ilya Enkovich  <ilya.enkovich@intel.com>\n \n-\tPR middle-end/71488\n+\tPR tree-optimization/71488\n \t* tree-vect-patterns.c (vect_recog_mask_conversion_pattern): Support\n \tcomparison of boolean vectors.\n \t* tree-vect-stmts.c (vectorizable_comparison): Vectorize comparison"}, {"sha": "3fb01671bb0aac5be64735b1ab03a64e4e6d993f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6d1b868c179eb6ad51dcab054a59d1fa1f6fa9f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6d1b868c179eb6ad51dcab054a59d1fa1f6fa9f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f6d1b868c179eb6ad51dcab054a59d1fa1f6fa9f", "patch": "@@ -1,3 +1,17 @@\n+2016-06-23  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR tree-optimization/71488\n+\t* gcc.target/i386/i386.exp (check_effective_target_sse4): Move to ...\n+\t* lib/target-supports.exp: ... here.\n+\t(check_sse4_hw_available): New procedure.\n+\t(check_effective_target_sse4_runtime): Ditto.\n+\t* g++.dg/pr71488.C (dg-additional-options): Use -msse4 instead of\n+\t-march=westmere for sse4_runtime targets.\n+\t* gcc.dg/vect/vect-bool-cmp.c: Include \"tree-vect.h\".\n+\t(dg-additional-options): Use for sse4_runtime targets.\n+\t(main): Call check_vect ().\n+\t(dg-final): Perform scan only for sse4_runtime targets.\n+\n 2016-06-23  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/66232\n@@ -13,8 +27,7 @@\n \t* gcc.target/i386/pr67400-4.c: Likewise.\n \t* gcc.target/i386/pr67400-6.c: Likewise.\n \t* gcc.target/i386/pr67400-7.c: Likewise.\n-\t* lib/target-supports.exp (check_effective_target_got32x_reloc):\n-\tNew.\n+\t* lib/target-supports.exp (check_effective_target_got32x_reloc): New.\n \n 2016-06-23  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n@@ -83,7 +96,7 @@\n \n 2016-06-22  Ilya Enkovich  <ilya.enkovich@intel.com>\n \n-\tPR middle-end/71488\n+\tPR tree-optimization/71488\n \t* g++.dg/pr71488.C: New test.\n \t* gcc.dg/vect/vect-bool-cmp.c: New test.\n "}, {"sha": "ffe30f1afeb1ac576c38f11af9f4462e6cbf65a2", "filename": "gcc/testsuite/g++.dg/pr71488.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6d1b868c179eb6ad51dcab054a59d1fa1f6fa9f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr71488.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6d1b868c179eb6ad51dcab054a59d1fa1f6fa9f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr71488.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr71488.C?ref=f6d1b868c179eb6ad51dcab054a59d1fa1f6fa9f", "patch": "@@ -1,7 +1,7 @@\n-// PR middle-end/71488\n+// PR tree-optimization/71488\n // { dg-do run }\n // { dg-options \"-O3 -std=c++11\" }\n-// { dg-additional-options \"-march=westmere\" { target i?86-*-* x86_64-*-* } }\n+// { dg-additional-options \"-msse4\" { target sse4_runtime } }\n // { dg-require-effective-target c++11 }\n \n #include <valarray>"}, {"sha": "35d2a3ca02e948cba9c83467cd0e34e44dbe0b09", "filename": "gcc/testsuite/gcc.dg/vect/vect-bool-cmp.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6d1b868c179eb6ad51dcab054a59d1fa1f6fa9f/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bool-cmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6d1b868c179eb6ad51dcab054a59d1fa1f6fa9f/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bool-cmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bool-cmp.c?ref=f6d1b868c179eb6ad51dcab054a59d1fa1f6fa9f", "patch": "@@ -1,7 +1,9 @@\n-/* PR71488 */\n+/* PR tree-optimization/71488 */\n /* { dg-require-effective-target vect_int } */\n /* { dg-require-effective-target vect_pack_trunc } */\n-/* { dg-additional-options \"-msse4\" { target { i?86-*-* x86_64-*-* } } } */\n+/* { dg-additional-options \"-msse4\" { target sse4_runtime } } */\n+\n+#include \"tree-vect.h\"\n \n int i1, i2;\n \n@@ -199,6 +201,8 @@ main (int argc, char **argv)\n   long long l2[32];\n   int i;\n \n+  check_vect ();\n+\n   for (i = 0; i < 32; i++)\n     {\n       l2[i] = i2[i] = s2[i] = i % 2;\n@@ -249,4 +253,4 @@ main (int argc, char **argv)\n   check (res, ne);\n }\n \n-/* { dg-final { scan-tree-dump-times \"VECTORIZED\" 18 \"vect\" { target { i?86-*-* x86_64-*-* } } } } */\n+/* { dg-final { scan-tree-dump-times \"VECTORIZED\" 18 \"vect\" { target sse4_runtime } } } */"}, {"sha": "877d2248493fd72e4aad3ebba48667b902dd122a", "filename": "gcc/testsuite/gcc.target/i386/i386.exp", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6d1b868c179eb6ad51dcab054a59d1fa1f6fa9f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6d1b868c179eb6ad51dcab054a59d1fa1f6fa9f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp?ref=f6d1b868c179eb6ad51dcab054a59d1fa1f6fa9f", "patch": "@@ -76,20 +76,6 @@ proc check_effective_target_ssse3 { } {\n     } \"-O2 -mssse3\" ]\n }\n \n-# Return 1 if sse4 instructions can be compiled.\n-proc check_effective_target_sse4 { } {\n-    return [check_no_compiler_messages sse4.1 object {\n-\ttypedef long long __m128i __attribute__ ((__vector_size__ (16)));\n-\ttypedef int __v4si __attribute__ ((__vector_size__ (16)));\n-\n-\t__m128i _mm_mullo_epi32 (__m128i __X, __m128i __Y)\n-\t{\n-\t    return (__m128i) __builtin_ia32_pmulld128 ((__v4si)__X,\n-\t\t\t\t\t\t       (__v4si)__Y);\n-\t}\n-    } \"-O2 -msse4.1\" ]\n-}\n-\n # Return 1 if aes instructions can be compiled.\n proc check_effective_target_aes { } {\n     return [check_no_compiler_messages aes object {"}, {"sha": "2b80f6eeb07bd701f9f78408c212550b941127d5", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6d1b868c179eb6ad51dcab054a59d1fa1f6fa9f/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6d1b868c179eb6ad51dcab054a59d1fa1f6fa9f/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=f6d1b868c179eb6ad51dcab054a59d1fa1f6fa9f", "patch": "@@ -1608,6 +1608,29 @@ proc check_sse2_hw_available { } {\n     }]\n }\n \n+# Return 1 if the target supports executing SSE4 instructions, 0\n+# otherwise.  Cache the result.\n+\n+proc check_sse4_hw_available { } {\n+    return [check_cached_effective_target sse4_hw_available {\n+\t# If this is not the right target then we can skip the test.\n+\tif { !([istarget x86_64-*-*] || [istarget i?86-*-*]) } {\n+\t    expr 0\n+\t} else {\n+\t    check_runtime_nocache sse4_hw_available {\n+\t\t#include \"cpuid.h\"\n+\t\tint main ()\n+\t\t{\n+\t\t  unsigned int eax, ebx, ecx, edx;\n+\t\t  if (__get_cpuid (1, &eax, &ebx, &ecx, &edx))\n+\t\t    return !(ecx & bit_SSE4_2);\n+\t\t  return 1;\n+\t\t}\n+\t    } \"\"\n+\t}\n+    }]\n+}\n+\n # Return 1 if the target supports executing AVX instructions, 0\n # otherwise.  Cache the result.\n \n@@ -1654,6 +1677,17 @@ proc check_effective_target_sse2_runtime { } {\n     return 0\n }\n \n+# Return 1 if the target supports running SSE4 executables, 0 otherwise.\n+\n+proc check_effective_target_sse4_runtime { } {\n+    if { [check_effective_target_sse4]\n+\t && [check_sse4_hw_available]\n+\t && [check_sse_os_support_available] } {\n+\treturn 1\n+    }\n+    return 0\n+}\n+\n # Return 1 if the target supports running AVX executables, 0 otherwise.\n \n proc check_effective_target_avx_runtime { } {\n@@ -6390,6 +6424,20 @@ proc check_effective_target_sse2 { } {\n     } \"-O2 -msse2\" ]\n }\n \n+# Return 1 if sse4.1 instructions can be compiled.\n+proc check_effective_target_sse4 { } {\n+    return [check_no_compiler_messages sse4.1 object {\n+\ttypedef long long __m128i __attribute__ ((__vector_size__ (16)));\n+\ttypedef int __v4si __attribute__ ((__vector_size__ (16)));\n+\n+\t__m128i _mm_mullo_epi32 (__m128i __X, __m128i __Y)\n+\t{\n+\t    return (__m128i) __builtin_ia32_pmulld128 ((__v4si)__X,\n+\t\t\t\t\t\t       (__v4si)__Y);\n+\t}\n+    } \"-O2 -msse4.1\" ]\n+}\n+\n # Return 1 if F16C instructions can be compiled.\n \n proc check_effective_target_f16c { } {"}]}