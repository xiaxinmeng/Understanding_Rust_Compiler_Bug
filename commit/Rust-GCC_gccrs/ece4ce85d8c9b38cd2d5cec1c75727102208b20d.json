{"sha": "ece4ce85d8c9b38cd2d5cec1c75727102208b20d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWNlNGNlODVkOGM5YjM4Y2QyZDVjZWMxYzc1NzI3MTAyMjA4YjIwZA==", "commit": {"author": {"name": "Nicola Pero", "email": "n.pero@mi.flashnet.it", "date": "2002-08-27T21:57:47Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2002-08-27T21:57:47Z"}, "message": "Added -Wundeclared-selector ObjC command line option\n\nFrom-SVN: r56615", "tree": {"sha": "1efb184e0cd44cf2aac37370cf4d5a447a672355", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1efb184e0cd44cf2aac37370cf4d5a447a672355"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ece4ce85d8c9b38cd2d5cec1c75727102208b20d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ece4ce85d8c9b38cd2d5cec1c75727102208b20d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ece4ce85d8c9b38cd2d5cec1c75727102208b20d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ece4ce85d8c9b38cd2d5cec1c75727102208b20d/comments", "author": null, "committer": null, "parents": [{"sha": "ac2a2d6f2f7017e24ed27845af4d48bfc3ba1e4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac2a2d6f2f7017e24ed27845af4d48bfc3ba1e4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac2a2d6f2f7017e24ed27845af4d48bfc3ba1e4f"}], "stats": {"total": 66, "additions": 64, "deletions": 2}, "files": [{"sha": "e1d35dd39dc900df71a8d6437d5166363db57585", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ece4ce85d8c9b38cd2d5cec1c75727102208b20d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ece4ce85d8c9b38cd2d5cec1c75727102208b20d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ece4ce85d8c9b38cd2d5cec1c75727102208b20d", "patch": "@@ -1,3 +1,14 @@\n+Tue Aug 27 23:03:52 2002  Nicola Pero  <n.pero@mi.flashnet.it>\n+\n+\t* c-common.c (warn_undeclared_selector): New variable.\n+\t* c-common.h (warn_undeclared_selector): Idem.\n+\t* c-opts.c (c_common_decode_option): Set warn_undeclared_selector\n+\tto on when -Wundeclared-selector is found.\n+\t(COMMAND_LINE_OPTIONS): Added -Wundeclared-selector.\n+\t* objc/objc-act.c (build_selector_expr): If\n+\twarn_undeclared_selector is set, check that the selector has\n+\talready been defined, and emit a warning if not.\n+\n 2002-08-27  Nick Clifton  <nickc@redhat.com>\n             Catherine Moore  <clm@redhat.com>\n             Jim Wilson  <wilson@cygnus.com>"}, {"sha": "875cabcdc558579c63939b46d18271c432b1d8ae", "filename": "gcc/c-common.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ece4ce85d8c9b38cd2d5cec1c75727102208b20d/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ece4ce85d8c9b38cd2d5cec1c75727102208b20d/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=ece4ce85d8c9b38cd2d5cec1c75727102208b20d", "patch": "@@ -438,10 +438,18 @@ int print_struct_values;\n const char *constant_string_class_name;\n \n /* Warn if multiple methods are seen for the same selector, but with\n-   different argument types.  */\n+   different argument types.  Performs the check on the whole selector\n+   table at the end of compilation.  */\n \n int warn_selector;\n \n+/* Warn if a @selector() is found, and no method with that selector\n+   has been previously declared.  The check is done on each\n+   @selector() as soon as it is found - so it warns about forward\n+   declarations.  */\n+\n+int warn_undeclared_selector;\n+\n /* Warn if methods required by a protocol are not implemented in the \n    class adopting it.  When turned off, methods inherited to that\n    class are also considered implemented.  */"}, {"sha": "e3e4bb06cbb84a574c047431a2dfa6cb609b175a", "filename": "gcc/c-common.h", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ece4ce85d8c9b38cd2d5cec1c75727102208b20d/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ece4ce85d8c9b38cd2d5cec1c75727102208b20d/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=ece4ce85d8c9b38cd2d5cec1c75727102208b20d", "patch": "@@ -609,10 +609,18 @@ extern int print_struct_values;\n extern const char *constant_string_class_name;\n \n /* Warn if multiple methods are seen for the same selector, but with\n-   different argument types.  */\n+   different argument types.  Performs the check on the whole selector\n+   table at the end of compilation.  */\n \n extern int warn_selector;\n \n+/* Warn if a @selector() is found, and no method with that selector\n+   has been previously declared.  The check is done on each\n+   @selector() as soon as it is found - so it warns about forward\n+   declarations.  */\n+\n+extern int warn_undeclared_selector;\n+\n /* Warn if methods required by a protocol are not implemented in the \n    class adopting it.  When turned off, methods inherited to that\n    class are also considered implemented.  */"}, {"sha": "bc3ae46a6d7d571c3122fc345a84bc57c6af674a", "filename": "gcc/c-opts.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ece4ce85d8c9b38cd2d5cec1c75727102208b20d/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ece4ce85d8c9b38cd2d5cec1c75727102208b20d/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=ece4ce85d8c9b38cd2d5cec1c75727102208b20d", "patch": "@@ -180,6 +180,7 @@ static void sanitize_cpp_opts PARAMS ((void));\n   OPT(\"Wsystem-headers\",\tCL_ALL,   OPT_Wsystem_headers)\t\t     \\\n   OPT(\"Wtraditional\",\t\tCL_C,     OPT_Wtraditional)\t\t     \\\n   OPT(\"Wtrigraphs\",\t\tCL_ALL,   OPT_Wtrigraphs)\t\t     \\\n+  OPT(\"Wundeclared-selector\",\tCL_OBJC,  OPT_Wundeclared_selector)\t     \\\n   OPT(\"Wundef\",\t\t\tCL_ALL,   OPT_Wundef)\t\t\t     \\\n   OPT(\"Wunknown-pragmas\",\tCL_ALL,   OPT_Wunknown_pragmas)\t\t     \\\n   OPT(\"Wunused-macros\",\t\tCL_ALL,   OPT_Wunused_macros)\t\t     \\\n@@ -947,6 +948,10 @@ c_common_decode_option (argc, argv)\n       cpp_opts->warn_trigraphs = on;\n       break;\n \n+    case OPT_Wundeclared_selector:\n+      warn_undeclared_selector = on;\n+      break;\n+\n     case OPT_Wundef:\n       cpp_opts->warn_undef = on;\n       break;"}, {"sha": "7a1f82b39d0606ccbf0f537c43c68a3abf1f33fa", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ece4ce85d8c9b38cd2d5cec1c75727102208b20d/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ece4ce85d8c9b38cd2d5cec1c75727102208b20d/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=ece4ce85d8c9b38cd2d5cec1c75727102208b20d", "patch": "@@ -5105,6 +5105,9 @@ build_protocol_expr (protoname)\n   return expr;\n }\n \n+/* This function is called by the parser when a @selector() expression\n+   is found, in order to compile it.  It is only called by the parser\n+   and only to compile a @selector().  */\n tree\n build_selector_expr (selnamelist)\n      tree selnamelist;\n@@ -5120,6 +5123,32 @@ build_selector_expr (selnamelist)\n   else\n     abort ();\n \n+  /* If we are required to check @selector() expressions as they\n+     are found, check that the selector has been declared.  */\n+  if (warn_undeclared_selector)\n+    {\n+      /* Look the selector up in the list of all known class and\n+         instance methods (up to this line) to check that the selector\n+         exists.  */\n+      hash hsh;\n+\n+      /* First try with instance methods.  */\n+      hsh = hash_lookup (nst_method_hash_list, selname);\n+      \n+      /* If not found, try with class methods.  */\n+      if (!hsh)\n+\t{\n+\t  hsh = hash_lookup (cls_method_hash_list, selname);\n+\t}\n+      \n+      /* If still not found, print out a warning.  */\n+      if (!hsh)\n+\t{\n+\t  warning (\"undeclared selector `%s'\", IDENTIFIER_POINTER (selname));\n+\t}\n+    }\n+  \n+\n   if (flag_typed_selectors)\n     return build_typed_selector_reference (selname, 0);\n   else\n@@ -5259,6 +5288,7 @@ lookup_method (mchain, method)\n     {\n       if (METHOD_SEL_NAME (mchain) == key)\n \treturn mchain;\n+\n       mchain = TREE_CHAIN (mchain);\n     }\n   return NULL_TREE;"}]}