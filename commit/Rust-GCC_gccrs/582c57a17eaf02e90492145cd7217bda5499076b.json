{"sha": "582c57a17eaf02e90492145cd7217bda5499076b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTgyYzU3YTE3ZWFmMDJlOTA0OTIxNDVjZDcyMTdiZGE1NDk5MDc2Yg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-09-30T11:52:08Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-09-30T11:52:08Z"}, "message": "Implement LWG 3255 for std::span constructors\n\nAlso fix the constraints on span(Container&) and span(const Container&)\nconstructors so that they aren't used for const spans or const arrays.\n\n\t* include/std/span (span(element_type(&)[N]))\n\t(span(array<value_type, N>&), span(const array<value_type, N>&)):\n\tDeduce array element type to allow safe const conversions (LWG 3255).\n\t[!_GLIBCXX_P1394] (span(Container&), span(const Container&)): Use\n\tremove_cv_t on arguments to __is_std_span and __is_std_array.\n\t* testsuite/23_containers/span/lwg3255.cc: New test.\n\nFrom-SVN: r276298", "tree": {"sha": "2c75c44849d88b4261c0cf454cf0118a4534976e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c75c44849d88b4261c0cf454cf0118a4534976e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/582c57a17eaf02e90492145cd7217bda5499076b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/582c57a17eaf02e90492145cd7217bda5499076b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/582c57a17eaf02e90492145cd7217bda5499076b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/582c57a17eaf02e90492145cd7217bda5499076b/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6438d29fb1a31c95b9d652117a79dde2f9e4ad6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6438d29fb1a31c95b9d652117a79dde2f9e4ad6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6438d29fb1a31c95b9d652117a79dde2f9e4ad6f"}], "stats": {"total": 121, "additions": 100, "deletions": 21}, "files": [{"sha": "06b4d007bf0a23d6496de3dd1e43c000be648aab", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/582c57a17eaf02e90492145cd7217bda5499076b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/582c57a17eaf02e90492145cd7217bda5499076b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=582c57a17eaf02e90492145cd7217bda5499076b", "patch": "@@ -1,5 +1,12 @@\n 2019-09-30  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/std/span (span(element_type(&)[N]))\n+\t(span(array<value_type, N>&), span(const array<value_type, N>&)):\n+\tDeduce array element type to allow safe const conversions (LWG 3255).\n+\t[!_GLIBCXX_P1394] (span(Container&), span(const Container&)): Use\n+\tremove_cv_t on arguments to __is_std_span and __is_std_array.\n+\t* testsuite/23_containers/span/lwg3255.cc: New test.\n+\n \tPR libstdc++/77936\n \t* include/parallel/checkers.h (__is_sorted): Remove unused variable.\n "}, {"sha": "fcec22a6c571aa838c7eb53be6725add8a323156", "filename": "libstdc++-v3/include/std/span", "status": "modified", "additions": 24, "deletions": 21, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/582c57a17eaf02e90492145cd7217bda5499076b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fspan", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/582c57a17eaf02e90492145cd7217bda5499076b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fspan", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fspan?ref=582c57a17eaf02e90492145cd7217bda5499076b", "patch": "@@ -125,6 +125,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _Tp>\n \tusing __is_compatible = is_convertible<_Tp(*)[], _Type(*)[]>;\n \n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 3255. span's array constructor is too strict\n+      template<typename _Tp, size_t _ArrayExtent,\n+\t       typename = enable_if_t<_Extent == dynamic_extent\n+\t\t\t\t      || _ArrayExtent == _Extent>>\n+\tusing __is_compatible_array  = __is_compatible<_Tp>;\n+\n     public:\n       // member types\n       using value_type             = remove_cv_t<_Type>;\n@@ -149,38 +156,34 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       // constructors\n \n-      template <typename _Dummy = _Type,\n-\t\tenable_if_t<is_same_v<_Dummy, _Type>\n-\t\t  && (_Extent == dynamic_extent || _Extent == 0)>* = nullptr>\n+      template<bool _DefaultConstructible = (_Extent + 1u) <= 1u,\n+\t       enable_if_t<_DefaultConstructible>* = nullptr>\n \tconstexpr\n \tspan() noexcept : _M_extent(0), _M_ptr(nullptr)\n \t{ }\n \n       constexpr\n       span(const span&) noexcept = default;\n \n-      template<size_t _ArrayExtent,\n-\tenable_if_t<_Extent == dynamic_extent || _ArrayExtent == _Extent>*\n-\t  = nullptr>\n+      template<typename _Tp, size_t _ArrayExtent,\n+\t       typename = _Require<__is_compatible_array<_Tp, _ArrayExtent>>>\n \tconstexpr\n-\tspan(element_type (&__arr)[_ArrayExtent]) noexcept\n+\tspan(_Tp (&__arr)[_ArrayExtent]) noexcept\n \t: span(static_cast<pointer>(__arr), _ArrayExtent)\n \t{ }\n \n-      template<size_t _ArrayExtent,\n-\tenable_if_t<_Extent == dynamic_extent || _ArrayExtent == _Extent>*\n-\t  = nullptr>\n+      template<typename _Tp, size_t _ArrayExtent,\n+\t       typename = _Require<__is_compatible_array<_Tp, _ArrayExtent>>>\n \tconstexpr\n-\tspan(array<value_type, _ArrayExtent>& __arr) noexcept\n-\t: span(__arr.data(), _ArrayExtent)\n+\tspan(array<_Tp, _ArrayExtent>& __arr) noexcept\n+\t: span(static_cast<pointer>(__arr.data()), _ArrayExtent)\n \t{ }\n \n-      template<size_t _ArrayExtent,\n-\tenable_if_t<_Extent == dynamic_extent || _ArrayExtent == _Extent>*\n-\t  = nullptr>\n+      template<typename _Tp, size_t _ArrayExtent,\n+\t       typename = _Require<__is_compatible_array<_Tp, _ArrayExtent>>>\n \tconstexpr\n-\tspan(const array<value_type, _ArrayExtent>& __arr) noexcept\n-\t: span(__arr.data(), _ArrayExtent)\n+\tspan(const array<_Tp, _ArrayExtent>& __arr) noexcept\n+\t: span(static_cast<pointer>(__arr.data()), _ArrayExtent)\n \t{ }\n \n       // NOTE: when the time comes, and P1394 -\n@@ -271,8 +274,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     public:\n       template<typename _Container, typename = _Require<\n \t\tbool_constant<_Extent == dynamic_extent>,\n-\t\t__not_<__detail::__is_std_span<_Container>>,\n-\t\t__not_<__detail::__is_std_array<_Container>>,\n+\t\t__not_<__detail::__is_std_span<remove_cv_t<_Container>>>,\n+\t\t__not_<__detail::__is_std_array<remove_cv_t<_Container>>>,\n \t\t__not_<is_array<_Container>>,\n \t\t__is_compatible_container<_Container>>>\n \tconstexpr\n@@ -283,8 +286,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       template<typename _Container, typename = _Require<\n \t\tbool_constant<_Extent == dynamic_extent>,\n-\t\t__not_<__detail::__is_std_span<_Container>>,\n-\t\t__not_<__detail::__is_std_array<_Container>>,\n+\t\t__not_<__detail::__is_std_span<remove_cv_t<_Container>>>,\n+\t\t__not_<__detail::__is_std_array<remove_cv_t<_Container>>>,\n \t\t__not_<is_array<_Container>>,\n \t\t__is_compatible_container<const _Container>>>\n \tconstexpr"}, {"sha": "638c88101f91f8659febbbcff12ecb4507d2e6be", "filename": "libstdc++-v3/testsuite/23_containers/span/lwg3255.cc", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/582c57a17eaf02e90492145cd7217bda5499076b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Flwg3255.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/582c57a17eaf02e90492145cd7217bda5499076b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Flwg3255.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Flwg3255.cc?ref=582c57a17eaf02e90492145cd7217bda5499076b", "patch": "@@ -0,0 +1,69 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <span>\n+#include <array>\n+\n+using std::span;\n+using std::dynamic_extent;\n+using std::array;\n+using std::is_constructible_v;\n+\n+// LWG 3255 span's array constructor is too strict\n+\n+// FIXME: remove '!' from next line when P0388R4 is implemented:\n+static_assert( ! is_constructible_v<span<const int* const>, array<int*, 2>> );\n+static_assert( is_constructible_v<span<const int>, array<const int, 4>> );\n+\n+static_assert( is_constructible_v<span<int, 1>, int(&)[1]> );\n+static_assert( is_constructible_v<span<const int, 1>, int(&)[1]> );\n+static_assert( is_constructible_v<span<const int, 1>, const int(&)[1]> );\n+\n+static_assert( is_constructible_v<span<int, 1>, array<int, 1>&> );\n+static_assert( is_constructible_v<span<const int, 1>, array<int, 1>&> );\n+static_assert( is_constructible_v<span<const int, 1>, array<const int, 1>&> );\n+\n+static_assert( is_constructible_v<span<int, 1>, const array<int, 1>&> );\n+static_assert( is_constructible_v<span<const int, 1>, const array<int, 1>&> );\n+static_assert( is_constructible_v<span<const int, 1>, const array<const int, 1>&> );\n+\n+static_assert( !is_constructible_v<span<int, 1>, int(&)[2]> );\n+static_assert( !is_constructible_v<span<const int, 1>, int(&)[2]> );\n+static_assert( !is_constructible_v<span<const int, 1>, const int(&)[2]> );\n+\n+static_assert( !is_constructible_v<span<int, 1>, array<int, 2>&> );\n+static_assert( !is_constructible_v<span<const int, 1>, array<int, 2>&> );\n+static_assert( !is_constructible_v<span<const int, 1>, array<const int, 2>&> );\n+\n+static_assert( !is_constructible_v<span<int, 1>, const array<int, 2>&> );\n+static_assert( !is_constructible_v<span<const int, 1>, const array<int, 2>&> );\n+static_assert( !is_constructible_v<span<const int, 1>, const array<const int, 2>&> );\n+\n+static_assert( is_constructible_v<span<int>, int(&)[2]> );\n+static_assert( is_constructible_v<span<const int>, int(&)[2]> );\n+static_assert( is_constructible_v<span<const int>, const int(&)[2]> );\n+\n+static_assert( is_constructible_v<span<int>, array<int, 2>&> );\n+static_assert( is_constructible_v<span<const int>, array<int, 2>&> );\n+static_assert( is_constructible_v<span<const int>, array<const int, 2>&> );\n+\n+static_assert( is_constructible_v<span<int>, const array<int, 2>&> );\n+static_assert( is_constructible_v<span<const int>, const array<int, 2>&> );\n+static_assert( is_constructible_v<span<const int>, const array<const int, 2>&> );"}]}