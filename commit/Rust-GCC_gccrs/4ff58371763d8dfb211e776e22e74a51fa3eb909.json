{"sha": "4ff58371763d8dfb211e776e22e74a51fa3eb909", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGZmNTgzNzE3NjNkOGRmYjIxMWU3NzZlMjJlNzRhNTFmYTNlYjkwOQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2003-06-16T21:29:20Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2003-06-16T21:29:20Z"}, "message": "gengtype.c: Don't use UNION_INIT_ZERO.\n\n\t* gengtype.c: Don't use UNION_INIT_ZERO.\n\t* system.h (UNION_INIT_ZERO): Delete.\n\nFrom-SVN: r68042", "tree": {"sha": "093664381aa2657f9bb52e756e7bcd612227c6d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/093664381aa2657f9bb52e756e7bcd612227c6d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ff58371763d8dfb211e776e22e74a51fa3eb909", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ff58371763d8dfb211e776e22e74a51fa3eb909", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ff58371763d8dfb211e776e22e74a51fa3eb909", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ff58371763d8dfb211e776e22e74a51fa3eb909/comments", "author": null, "committer": null, "parents": [{"sha": "8363b7738f923bff7a4ff0a58f2699fb3b40435d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8363b7738f923bff7a4ff0a58f2699fb3b40435d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8363b7738f923bff7a4ff0a58f2699fb3b40435d"}], "stats": {"total": 18, "additions": 6, "deletions": 12}, "files": [{"sha": "d9e4b37e205da2b582f52c317512de33b147e8d8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ff58371763d8dfb211e776e22e74a51fa3eb909/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ff58371763d8dfb211e776e22e74a51fa3eb909/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4ff58371763d8dfb211e776e22e74a51fa3eb909", "patch": "@@ -1,3 +1,8 @@\n+2003-06-16  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gengtype.c: Don't use UNION_INIT_ZERO.\n+\t* system.h (UNION_INIT_ZERO): Delete.\n+\n 2003-06-16  Richard Henderson  <rth@redhat.com>\n \n \t* simplify-rtx.c (simplify_subreg): Use GET_MODE_SIZE instead of"}, {"sha": "12608875b87403251eb6333fbfd2b4fdfd806d0b", "filename": "gcc/gengtype.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ff58371763d8dfb211e776e22e74a51fa3eb909/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ff58371763d8dfb211e776e22e74a51fa3eb909/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=4ff58371763d8dfb211e776e22e74a51fa3eb909", "patch": "@@ -83,8 +83,7 @@ xasprintf (const char *format, ...)\n /* The one and only TYPE_STRING.  */\n \n struct type string_type = {\n-  TYPE_STRING, NULL, NULL, GC_USED\n-  UNION_INIT_ZERO\n+  TYPE_STRING, NULL, NULL, GC_USED, {0}\n };\n \n /* Lists of various things.  */"}, {"sha": "3229d5cb2245f586ecf644407054a428bea7e6aa", "filename": "gcc/system.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ff58371763d8dfb211e776e22e74a51fa3eb909/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ff58371763d8dfb211e776e22e74a51fa3eb909/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=4ff58371763d8dfb211e776e22e74a51fa3eb909", "patch": "@@ -515,16 +515,6 @@ extern void abort (void);\n #define offsetof(TYPE, MEMBER)\t((size_t) &((TYPE *) 0)->MEMBER)\n #endif\n \n-/* Traditional C cannot initialize union members of structs.  Provide\n-   a macro which expands appropriately to handle it.  This only works\n-   if you intend to initialize the union member to zero since it relies\n-   on default initialization to zero in the traditional C case.  */\n-#ifdef __STDC__\n-#define UNION_INIT_ZERO , {0}\n-#else\n-#define UNION_INIT_ZERO\n-#endif\n-\n /* Various error reporting routines want to use __FUNCTION__.  */\n #if (GCC_VERSION < 2007)\n #ifndef __FUNCTION__"}]}