{"sha": "8f8c44cb4fe52e7eb0440abcbc052e0f80cf8037", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGY4YzQ0Y2I0ZmU1MmU3ZWIwNDQwYWJjYmMwNTJlMGY4MGNmODAzNw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2002-06-15T17:50:14Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2002-06-15T17:50:14Z"}, "message": "Object.m: Fix signed/unsigned warning.\n\n\t* Object.m: Fix signed/unsigned warning.\n\t* Protocol.m: Likewise.\n\t* archive.c: Always include stdlib.h.\n\t(objc_read_short, objc_read_unsigned_short, objc_read_int,\n\tobjc_read_long, __objc_read_nbyte_uint, __objc_read_nbyte_ulong):\n\tFix signed/unsigned warning.\n\t(objc_write_type, objc_read_type, objc_write_types,\n\tobjc_read_types): Ensure ctype 8-bit safety.\n\t(__objc_no_write, __objc_no_read): Mark unused parameters.\n\t* class.c (class_table_setup): Specify void arg.\n\t* encoding.c (atoi, objc_sizeof_type, objc_alignof_type,\n\tobjc_skip_typespec, objc_skip_offset,\n\tobjc_layout_structure_next_member): Ensure ctype 8-bit safety.\n\t(objc_layout_structure_next_member): Ensure variables are\n\tinitialized.\n\t* gc.c (__objc_generate_gc_type_description,\n\tclass_ivar_set_gcinvisible): Mark unused parameters.\n\t* init.c (__objc_send_load, __objc_destroy_class_tree_node): Mark\n\tunused parameters.\n\t(__objc_init_protocols) Fix signed/unsigned warning.\n\t* nil_method.c (nil_method): Mark unused parameters.\n\t* thr.h (objc_thread_callback): Specify void arg.\n\t* sarray.c (sarray_new, sarray_realloc, sarray_free): Fix\n\tsigned/unsigned warning.\n\t(sarray_free): Fix formatting.\n\t* selector.c (sel_types_match): Ensure ctype 8-bit safety.\n\t* sendmsg.c (__objc_init_install_dtable) Mark unused parameters.\n\nFrom-SVN: r54649", "tree": {"sha": "cd175472b2e9e3cb8c294184c253b7e74efaff38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd175472b2e9e3cb8c294184c253b7e74efaff38"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f8c44cb4fe52e7eb0440abcbc052e0f80cf8037", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f8c44cb4fe52e7eb0440abcbc052e0f80cf8037", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f8c44cb4fe52e7eb0440abcbc052e0f80cf8037", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f8c44cb4fe52e7eb0440abcbc052e0f80cf8037/comments", "author": null, "committer": null, "parents": [{"sha": "d5355cb2c6e1748f221a88b36902a798fa9a0cd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5355cb2c6e1748f221a88b36902a798fa9a0cd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5355cb2c6e1748f221a88b36902a798fa9a0cd2"}], "stats": {"total": 139, "additions": 88, "deletions": 51}, "files": [{"sha": "9e9e7b913168a80dfcee98be7f2706cf1dacdaf3", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f8c44cb4fe52e7eb0440abcbc052e0f80cf8037/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f8c44cb4fe52e7eb0440abcbc052e0f80cf8037/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=8f8c44cb4fe52e7eb0440abcbc052e0f80cf8037", "patch": "@@ -1,3 +1,33 @@\n+2002-06-15  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* Object.m: Fix signed/unsigned warning.\n+\t* Protocol.m: Likewise.\n+\t* archive.c: Always include stdlib.h.\n+\t(objc_read_short, objc_read_unsigned_short, objc_read_int,\n+\tobjc_read_long, __objc_read_nbyte_uint, __objc_read_nbyte_ulong):\n+\tFix signed/unsigned warning.\n+\t(objc_write_type, objc_read_type, objc_write_types,\n+\tobjc_read_types): Ensure ctype 8-bit safety.\n+\t(__objc_no_write, __objc_no_read): Mark unused parameters.\n+\t* class.c (class_table_setup): Specify void arg.\n+\t* encoding.c (atoi, objc_sizeof_type, objc_alignof_type,\n+\tobjc_skip_typespec, objc_skip_offset,\n+\tobjc_layout_structure_next_member): Ensure ctype 8-bit safety.\n+\t(objc_layout_structure_next_member): Ensure variables are\n+\tinitialized.\n+\t* gc.c (__objc_generate_gc_type_description,\n+\tclass_ivar_set_gcinvisible): Mark unused parameters.\n+\t* init.c (__objc_send_load, __objc_destroy_class_tree_node): Mark\n+\tunused parameters.\n+\t(__objc_init_protocols) Fix signed/unsigned warning.\n+\t* nil_method.c (nil_method): Mark unused parameters.\n+\t* thr.h (objc_thread_callback): Specify void arg.\n+\t* sarray.c (sarray_new, sarray_realloc, sarray_free): Fix\n+\tsigned/unsigned warning.\n+\t(sarray_free): Fix formatting.\n+\t* selector.c (sel_types_match): Ensure ctype 8-bit safety.\n+\t* sendmsg.c (__objc_init_install_dtable) Mark unused parameters.\n+\n 2002-06-09  Andreas Jaeger  <aj@suse.de>\n \n \t* encoding.c (objc_layout_structure_next_member): Remove unused"}, {"sha": "fd14cb95b6ac9a1fb5f3ff45a8dac005fcd0aae0", "filename": "libobjc/Object.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f8c44cb4fe52e7eb0440abcbc052e0f80cf8037/libobjc%2FObject.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f8c44cb4fe52e7eb0440abcbc052e0f80cf8037/libobjc%2FObject.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FObject.m?ref=8f8c44cb4fe52e7eb0440abcbc052e0f80cf8037", "patch": "@@ -199,7 +199,7 @@ + (IMP)instanceMethodFor:(SEL)aSel\n \n + (BOOL) conformsTo: (Protocol*)aProtocol\n {\n-  int i;\n+  size_t i;\n   struct objc_protocol_list* proto_list;\n   id parent;\n "}, {"sha": "3c18a02ce977b446822ba604602fa3d71b209b9a", "filename": "libobjc/Protocol.m", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f8c44cb4fe52e7eb0440abcbc052e0f80cf8037/libobjc%2FProtocol.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f8c44cb4fe52e7eb0440abcbc052e0f80cf8037/libobjc%2FProtocol.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FProtocol.m?ref=8f8c44cb4fe52e7eb0440abcbc052e0f80cf8037", "patch": "@@ -53,7 +53,7 @@ - (const char *)name\n \n - (BOOL) conformsTo: (Protocol *)aProtocolObject\n {\n-  int i;\n+  size_t i;\n   struct objc_protocol_list* proto_list;\n \n   if (!strcmp(aProtocolObject->protocol_name, self->protocol_name))\n@@ -88,9 +88,10 @@ - (struct objc_method_description *) descriptionForInstanceMethod:(SEL)aSel\n \n   for (proto_list = protocol_list; proto_list; proto_list = proto_list->next)\n     {\n-      for (i=0; i < proto_list->count; i++)\n+      size_t j;\n+      for (j=0; j < proto_list->count; j++)\n \t{\n-\t  if ((result = [proto_list->list[i]\n+\t  if ((result = [proto_list->list[j]\n \t\t\t descriptionForInstanceMethod: aSel]))\n \t    return result;\n \t}\n@@ -114,9 +115,10 @@ - (struct objc_method_description *) descriptionForClassMethod:(SEL)aSel;\n \n   for (proto_list = protocol_list; proto_list; proto_list = proto_list->next)\n     {\n-      for (i=0; i < proto_list->count; i++)\n+      size_t j;\n+      for (j=0; j < proto_list->count; j++)\n \t{\n-\t  if ((result = [proto_list->list[i]\n+\t  if ((result = [proto_list->list[j]\n \t\t\t descriptionForClassMethod: aSel]))\n \t    return result;\n \t}"}, {"sha": "e6b6d2f946d0634723164b35b53d169f4b3057af", "filename": "libobjc/archive.c", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f8c44cb4fe52e7eb0440abcbc052e0f80cf8037/libobjc%2Farchive.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f8c44cb4fe52e7eb0440abcbc052e0f80cf8037/libobjc%2Farchive.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Farchive.c?ref=8f8c44cb4fe52e7eb0440abcbc052e0f80cf8037", "patch": "@@ -28,10 +28,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"runtime.h\"\n #include \"typedstream.h\"\n #include \"encoding.h\"\n-\n-#ifdef HAVE_STDLIB_H\n #include <stdlib.h>\n-#endif\n \n extern int fflush(FILE*);\n \n@@ -566,7 +563,7 @@ objc_read_short (struct objc_typed_stream* stream, short* value)\n \t{\n \t  int pos = 1;\n \t  int nbytes = buf[0] & _B_NUMBER;\n-\t  if (nbytes > sizeof (short))\n+\t  if (nbytes > (int) sizeof (short))\n \t    objc_error(nil, OBJC_ERR_BAD_DATA,\n \t\t       \"expected short, got bigger (%dbits)\", nbytes*8);\n \t  len = (*stream->read)(stream->physical, buf+1, nbytes);\n@@ -595,7 +592,7 @@ objc_read_unsigned_short (struct objc_typed_stream* stream,\n \t{\n \t  int pos = 1;\n \t  int nbytes = buf[0] & _B_NUMBER;\n-\t  if (nbytes > sizeof (short))\n+\t  if (nbytes > (int) sizeof (short))\n \t    objc_error(nil, OBJC_ERR_BAD_DATA,\n \t\t       \"expected short, got int or bigger\");\n \t  len = (*stream->read)(stream->physical, buf+1, nbytes);\n@@ -622,7 +619,7 @@ objc_read_int (struct objc_typed_stream* stream, int* value)\n \t{\n \t  int pos = 1;\n \t  int nbytes = buf[0] & _B_NUMBER;\n-\t  if (nbytes > sizeof (int))\n+\t  if (nbytes > (int) sizeof (int))\n \t    objc_error(nil, OBJC_ERR_BAD_DATA, \"expected int, got bigger\");\n \t  len = (*stream->read)(stream->physical, buf+1, nbytes);\n \t  (*value) = 0;\n@@ -649,7 +646,7 @@ objc_read_long (struct objc_typed_stream* stream, long* value)\n \t{\n \t  int pos = 1;\n \t  int nbytes = buf[0] & _B_NUMBER;\n-\t  if (nbytes > sizeof (long))\n+\t  if (nbytes > (int) sizeof (long))\n \t    objc_error(nil, OBJC_ERR_BAD_DATA, \"expected long, got bigger\");\n \t  len = (*stream->read)(stream->physical, buf+1, nbytes);\n \t  (*value) = 0;\n@@ -666,7 +663,8 @@ __inline__ int\n __objc_read_nbyte_uint (struct objc_typed_stream* stream,\n \t\t       unsigned int nbytes, unsigned int* val)\n {\n-  int len, pos = 0;\n+  int len;\n+  unsigned int pos = 0;\n   unsigned char buf[sizeof(unsigned int)+1];\n \n   if (nbytes > sizeof (int))\n@@ -702,7 +700,8 @@ int\n __objc_read_nbyte_ulong (struct objc_typed_stream* stream,\n \t\t       unsigned int nbytes, unsigned long* val)\n {\n-  int len, pos = 0;\n+  int len;\n+  unsigned int pos = 0;\n   unsigned char buf[sizeof(unsigned long)+1];\n \n   if (nbytes > sizeof (long))\n@@ -1043,7 +1042,7 @@ objc_write_type(TypedStream* stream, const char* type, const void* data)\n   case _C_ARY_B:\n     {\n       int len = atoi(type+1);\n-      while (isdigit(*++type))\n+      while (isdigit((unsigned char)*++type))\n \t;\n       return objc_write_array (stream, type, len, data);\n     }\n@@ -1139,7 +1138,7 @@ objc_read_type(TypedStream* stream, const char* type, void* data)\n   case _C_ARY_B:\n     {\n       int len = atoi(type+1);\n-      while (isdigit(*++type))\n+      while (isdigit((unsigned char)*++type))\n \t;\n       return objc_read_array (stream, type, len, data);\n     }\n@@ -1257,7 +1256,7 @@ objc_write_types (TypedStream* stream, const char* type, ...)\n \t{\n \t  int len = atoi(c+1);\n \t  const char* t = c;\n-\t  while (isdigit(*++t))\n+\t  while (isdigit((unsigned char)*++t))\n \t    ;\n \t  res = objc_write_array (stream, t, len, va_arg(args, void*));\n \t  t = objc_skip_typespec (t);\n@@ -1349,7 +1348,7 @@ objc_read_types(TypedStream* stream, const char* type, ...)\n \t{\n \t  int len = atoi(c+1);\n \t  const char* t = c;\n-\t  while (isdigit(*++t))\n+\t  while (isdigit((unsigned char)*++t))\n \t    ;\n \t  res = objc_read_array (stream, t, len, va_arg(args, void*));\n \t  t = objc_skip_typespec (t);\n@@ -1428,14 +1427,18 @@ __objc_feof(FILE* file)\n }\n \n static int \n-__objc_no_write(FILE* file, char* data, int len)\n+__objc_no_write(FILE* file __attribute__ ((__unused__)),\n+\t\tconst char *data __attribute__ ((__unused__)),\n+\t\tint len __attribute__ ((__unused__)))\n {\n   objc_error (nil, OBJC_ERR_NO_WRITE, \"TypedStream not open for writing\");\n   return 0;\n }\n \n static int \n-__objc_no_read(FILE* file, char* data, int len)\n+__objc_no_read(FILE* file __attribute__ ((__unused__)),\n+\t       const char *data __attribute__ ((__unused__)),\n+\t       int len __attribute__ ((__unused__)))\n {\n   objc_error (nil, OBJC_ERR_NO_READ, \"TypedStream not open for reading\");\n   return 0;"}, {"sha": "89ef6413199e06440f8d6074bfb519e4a298dce3", "filename": "libobjc/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f8c44cb4fe52e7eb0440abcbc052e0f80cf8037/libobjc%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f8c44cb4fe52e7eb0440abcbc052e0f80cf8037/libobjc%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fclass.c?ref=8f8c44cb4fe52e7eb0440abcbc052e0f80cf8037", "patch": "@@ -163,7 +163,7 @@ static objc_mutex_t __class_table_lock = NULL;\n \n /* Setup the table.  */\n static void\n-class_table_setup ()\n+class_table_setup (void)\n {\n   /* Start - nothing in the table.  */\n   memset (class_table_array, 0, sizeof(class_node_ptr) * CLASS_TABLE_SIZE);"}, {"sha": "956ca16e76dd088a5fc84ce19c11bd1c32d2c058", "filename": "libobjc/encoding.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f8c44cb4fe52e7eb0440abcbc052e0f80cf8037/libobjc%2Fencoding.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f8c44cb4fe52e7eb0440abcbc052e0f80cf8037/libobjc%2Fencoding.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fencoding.c?ref=8f8c44cb4fe52e7eb0440abcbc052e0f80cf8037", "patch": "@@ -87,7 +87,7 @@ atoi (const char* str)\n {\n   int res = 0;\n \n-  while (isdigit (*str))\n+  while (isdigit ((unsigned char)*str))\n     res *= 10, res += (*str++ - '0');\n \n   return res;\n@@ -180,7 +180,7 @@ objc_sizeof_type (const char* type)\n   case _C_ARY_B:\n     {\n       int len = atoi(type+1);\n-      while (isdigit(*++type));\n+      while (isdigit((unsigned char)*++type));\n       return len*objc_aligned_size (type);\n     }\n     break;\n@@ -192,7 +192,7 @@ objc_sizeof_type (const char* type)\n       int startByte, endByte;\n \n       position = atoi (type + 1);\n-      while (isdigit (*++type));\n+      while (isdigit ((unsigned char)*++type));\n       size = atoi (type + 1);\n \n       startByte = position / BITS_PER_UNIT;\n@@ -321,7 +321,7 @@ objc_alignof_type(const char* type)\n     break;\n \n   case _C_ARY_B:\n-    while (isdigit(*++type)) /* do nothing */;\n+    while (isdigit((unsigned char)*++type)) /* do nothing */;\n     return objc_alignof_type (type);\n \n   case _C_STRUCT_B:\n@@ -487,7 +487,7 @@ objc_skip_typespec (const char* type)\n   case _C_ARY_B:\n     /* skip digits, typespec and closing ']' */\n \n-    while(isdigit(*++type));\n+    while(isdigit((unsigned char)*++type));\n     type = objc_skip_typespec(type);\n     if (*type == _C_ARY_E)\n       return ++type;\n@@ -499,8 +499,8 @@ objc_skip_typespec (const char* type)\n \n   case _C_BFLD:\n     /* The new encoding of bitfields is: b 'position' 'type' 'size' */\n-    while (isdigit (*++type));\t/* skip position */\n-    while (isdigit (*++type));\t/* skip type and size */\n+    while (isdigit ((unsigned char)*++type));\t/* skip position */\n+    while (isdigit ((unsigned char)*++type));\t/* skip type and size */\n     return type;\n \n   case _C_STRUCT_B:\n@@ -538,7 +538,7 @@ inline const char*\n objc_skip_offset (const char* type)\n {\n   if (*type == '+') type++;\n-  while(isdigit(*++type));\n+  while(isdigit((unsigned char)*++type));\n   return type;\n }\n \n@@ -753,8 +753,8 @@ objc_layout_structure_next_member (struct objc_struct_layout *layout)\n   register int desired_align = 0;\n \n   /* The following are used only if the field is a bitfield */\n-  register const char *bfld_type;\n-  register int bfld_type_size, bfld_type_align, bfld_field_size;\n+  register const char *bfld_type = 0;\n+  register int bfld_type_size, bfld_type_align = 0, bfld_field_size = 0;\n \n   /* The current type without the type qualifiers */\n   const char *type;\n@@ -769,7 +769,7 @@ objc_layout_structure_next_member (struct objc_struct_layout *layout)\n       else {\n         /* Get the bitfield's type */\n         for (bfld_type = type + 1;\n-             isdigit(*bfld_type);\n+             isdigit((unsigned char)*bfld_type);\n              bfld_type++)\n           /* do nothing */;\n \n@@ -798,7 +798,7 @@ objc_layout_structure_next_member (struct objc_struct_layout *layout)\n     {\n       desired_align = 1;\n       /* Skip the bitfield's offset */\n-      for (bfld_type = type + 1; isdigit(*bfld_type); bfld_type++)\n+      for (bfld_type = type + 1; isdigit((unsigned char)*bfld_type); bfld_type++)\n         /* do nothing */;\n \n       bfld_type_size = objc_sizeof_type (bfld_type) * BITS_PER_UNIT;"}, {"sha": "761905cafab595ee0a010700f03e4b9b4af72d37", "filename": "libobjc/gc.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f8c44cb4fe52e7eb0440abcbc052e0f80cf8037/libobjc%2Fgc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f8c44cb4fe52e7eb0440abcbc052e0f80cf8037/libobjc%2Fgc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fgc.c?ref=8f8c44cb4fe52e7eb0440abcbc052e0f80cf8037", "patch": "@@ -446,13 +446,13 @@ class_ivar_set_gcinvisible (Class class, const char* ivarname,\n #else /* !OBJC_WITH_GC */\n \n void\n-__objc_generate_gc_type_description (Class class)\n+__objc_generate_gc_type_description (Class class __attribute__ ((__unused__)))\n {\n }\n \n-void class_ivar_set_gcinvisible (Class class,\n-\t\t\t\t const char* ivarname,\n-\t\t\t\t BOOL gc_invisible)\n+void class_ivar_set_gcinvisible (Class class __attribute__ ((__unused__)),\n+\t\t\t\t const char* ivarname __attribute__ ((__unused__)),\n+\t\t\t\t BOOL gc_invisible __attribute__ ((__unused__)))\n {\n }\n "}, {"sha": "e257aee35462f15063a8ecdaae808e53fce46c22", "filename": "libobjc/init.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f8c44cb4fe52e7eb0440abcbc052e0f80cf8037/libobjc%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f8c44cb4fe52e7eb0440abcbc052e0f80cf8037/libobjc%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Finit.c?ref=8f8c44cb4fe52e7eb0440abcbc052e0f80cf8037", "patch": "@@ -329,7 +329,8 @@ __objc_send_message_in_list (MethodList_t method_list, Class class, SEL op)\n }\n \n static void\n-__objc_send_load (objc_class_tree *tree, int level)\n+__objc_send_load (objc_class_tree *tree,\n+\t\t  int level __attribute__ ((__unused__)))\n {\n   static SEL load_sel = 0;\n   Class class = tree->class;\n@@ -342,7 +343,8 @@ __objc_send_load (objc_class_tree *tree, int level)\n }\n \n static void\n-__objc_destroy_class_tree_node (objc_class_tree *tree, int level)\n+__objc_destroy_class_tree_node (objc_class_tree *tree,\n+\t\t\t\tint level __attribute__ ((__unused__)))\n {\n   objc_free (tree);\n }\n@@ -776,7 +778,7 @@ static void init_check_module_version(Module_t module)\n static void\n __objc_init_protocols (struct objc_protocol_list* protos)\n {\n-  int i;\n+  size_t i;\n   static Class proto_class = 0;\n \n   if (! protos)"}, {"sha": "214235bd83ae730e1757c45f82fbcdacb7ed4950", "filename": "libobjc/nil_method.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f8c44cb4fe52e7eb0440abcbc052e0f80cf8037/libobjc%2Fnil_method.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f8c44cb4fe52e7eb0440abcbc052e0f80cf8037/libobjc%2Fnil_method.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fnil_method.c?ref=8f8c44cb4fe52e7eb0440abcbc052e0f80cf8037", "patch": "@@ -30,7 +30,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"runtime.h\"\n \n id\n-nil_method(id receiver, SEL op, ...)\n+nil_method(id receiver, SEL op __attribute__ ((__unused__)), ...)\n {\n   return receiver;\n }"}, {"sha": "42403f60dc7b20cde6cbe621bc81166c9e9c951a", "filename": "libobjc/objc/thr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f8c44cb4fe52e7eb0440abcbc052e0f80cf8037/libobjc%2Fobjc%2Fthr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f8c44cb4fe52e7eb0440abcbc052e0f80cf8037/libobjc%2Fobjc%2Fthr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fthr.h?ref=8f8c44cb4fe52e7eb0440abcbc052e0f80cf8037", "patch": "@@ -111,7 +111,7 @@ void objc_thread_remove(void);\n   it can be informed; for example, the GNUstep Base Library sets it \n   so it can implement the NSBecomingMultiThreaded notification.\n   */\n-typedef void (*objc_thread_callback)();\n+typedef void (*objc_thread_callback)(void);\n objc_thread_callback objc_set_thread_callback(objc_thread_callback func);\n \n /* Backend initialization functions */"}, {"sha": "14135af8004307a787ee6dd2f54f5c8630152742", "filename": "libobjc/sarray.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f8c44cb4fe52e7eb0440abcbc052e0f80cf8037/libobjc%2Fsarray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f8c44cb4fe52e7eb0440abcbc052e0f80cf8037/libobjc%2Fsarray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fsarray.c?ref=8f8c44cb4fe52e7eb0440abcbc052e0f80cf8037", "patch": "@@ -211,7 +211,7 @@ sarray_new (int size, void* default_element)\n   size_t num_indices = ((size-1)/BUCKET_SIZE)+1;\n   struct sbucket ** new_buckets;\n #endif\n-  int counter;\n+  size_t counter;\n \n   assert(size > 0);\n \n@@ -302,7 +302,7 @@ sarray_realloc(struct sarray* array, int newsize)\n   \n #endif\n \n-  int counter;\n+  size_t counter;\n \n   assert(newsize > 0);\n \n@@ -382,16 +382,16 @@ sarray_realloc(struct sarray* array, int newsize)\n /* Free a sparse array allocated with sarray_new */\n \n void \n-sarray_free(struct sarray* array) {\n-\n+sarray_free(struct sarray* array)\n+{\n #ifdef OBJC_SPARSE3\n   size_t old_max_index = (array->capacity-1)/INDEX_CAPACITY;\n   struct sindex ** old_indices;\n #else\n   size_t old_max_index = (array->capacity-1)/BUCKET_SIZE;\n   struct sbucket ** old_buckets;\n #endif\n-  int counter = 0;\n+  size_t counter = 0;\n \n   assert(array->ref_count != 0);\t/* Freed multiple times!!! */\n "}, {"sha": "7211f9028b9fdc4a305a9f16a6ce26ff87e253ee", "filename": "libobjc/selector.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f8c44cb4fe52e7eb0440abcbc052e0f80cf8037/libobjc%2Fselector.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f8c44cb4fe52e7eb0440abcbc052e0f80cf8037/libobjc%2Fselector.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fselector.c?ref=8f8c44cb4fe52e7eb0440abcbc052e0f80cf8037", "patch": "@@ -164,8 +164,8 @@ sel_types_match (const char* t1, const char* t2)\n     {\n       if (*t1 == '+') t1++;\n       if (*t2 == '+') t2++;\n-      while (isdigit(*t1)) t1++;\n-      while (isdigit(*t2)) t2++;\n+      while (isdigit((unsigned char)*t1)) t1++;\n+      while (isdigit((unsigned char)*t2)) t2++;\n       /* xxx Remove these next two lines when qualifiers are put in\n \t all selectors, not just Protocol selectors. */\n       t1 = objc_skip_type_qualifiers(t1);"}, {"sha": "b447884b3d175dbe2486e9077353ac4ef508fee2", "filename": "libobjc/sendmsg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f8c44cb4fe52e7eb0440abcbc052e0f80cf8037/libobjc%2Fsendmsg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f8c44cb4fe52e7eb0440abcbc052e0f80cf8037/libobjc%2Fsendmsg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fsendmsg.c?ref=8f8c44cb4fe52e7eb0440abcbc052e0f80cf8037", "patch": "@@ -230,7 +230,7 @@ __objc_init_dispatch_tables()\n    dispatch table needs to be installed; thus it is called once\n    for each class, namely when the very first message is sent to it. */\n static void\n-__objc_init_install_dtable(id receiver, SEL op)\n+__objc_init_install_dtable(id receiver, SEL op __attribute__ ((__unused__)))\n {\n   /* This may happen, if the programmer has taken the address of a \n      method before the dtable was initialized... too bad for him! */"}]}