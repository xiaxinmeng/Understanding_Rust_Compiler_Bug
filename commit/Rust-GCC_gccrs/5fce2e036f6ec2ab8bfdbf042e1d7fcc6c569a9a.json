{"sha": "5fce2e036f6ec2ab8bfdbf042e1d7fcc6c569a9a", "node_id": "C_kwDOANBUbNoAKDVmY2UyZTAzNmY2ZWMyYWI4YmZkYmYwNDJlMWQ3ZmNjNmM1NjlhOWE", "commit": {"author": {"name": "Paul A. Clarke", "email": "pc@us.ibm.com", "date": "2021-07-12T14:38:22Z"}, "committer": {"name": "Paul A. Clarke", "email": "pc@us.ibm.com", "date": "2022-01-13T15:24:06Z"}, "message": "rs6000: Support SSE4.1 \"round\" intrinsics\n\nSuppress exceptions (when specified), by saving, manipulating, and\nrestoring the FPSCR.  Similarly, save, set, and restore the floating-point\nrounding mode when required.\n\nNo attempt is made to optimize writing the FPSCR (by checking if the new\nvalue would be the same), other than using lighter weight instructions\nwhen possible. Note that explicit instruction scheduling \"barriers\" are\nadded to prevent floating-point computations from being moved before or\nafter the explicit FPSCR manipulations.  (That these are required has\nbeen reported as an issue in GCC: PR102783.)\n\nThe scalar versions naively use the parallel versions to compute the\nsingle scalar result and then construct the remainder of the result.\n\nOf minor note, the values of _MM_FROUND_TO_NEG_INF and _MM_FROUND_TO_ZERO\nare swapped from the corresponding values on x86 so as to match the\ncorresponding rounding mode values in the Power ISA.\n\nMove implementations of _mm_ceil* and _mm_floor* into _mm_round*, and\nconvert _mm_ceil* and _mm_floor* into macros. This matches the current\nanalogous implementations in config/i386/smmintrin.h.\n\nFunction signatures match the analogous functions in config/i386/smmintrin.h.\n\nAdd tests for _mm_round_pd, _mm_round_ps, _mm_round_sd, _mm_round_ss,\nmodeled after the very similar \"floor\" and \"ceil\" tests.\n\nInclude basic tests, plus tests at the boundaries for floating-point\nrepresentation, positive and negative, test all of the parameterized\nrounding modes as well as the C99 rounding modes and interactions\nbetween the two.\n\nExceptions are not explicitly tested.\n\n2022-01-13  Paul A. Clarke  <pc@us.ibm.com>\n\ngcc\n\t* config/rs6000/smmintrin.h (_mm_round_pd, _mm_round_ps,\n\t_mm_round_sd, _mm_round_ss, _MM_FROUND_TO_NEAREST_INT,\n\t_MM_FROUND_TO_ZERO, _MM_FROUND_TO_POS_INF, _MM_FROUND_TO_NEG_INF,\n\t_MM_FROUND_CUR_DIRECTION, _MM_FROUND_RAISE_EXC, _MM_FROUND_NO_EXC,\n\t_MM_FROUND_NINT, _MM_FROUND_FLOOR, _MM_FROUND_CEIL, _MM_FROUND_TRUNC,\n\t_MM_FROUND_RINT, _MM_FROUND_NEARBYINT): New.\n\t(_mm_ceil_pd, _mm_ceil_ps, _mm_ceil_sd, _mm_ceil_ss, _mm_floor_pd,\n\t_mm_floor_ps, _mm_floor_sd, _mm_floor_ss): Convert from function to\n\tmacro.\n\ngcc/testsuite\n\t* gcc.target/powerpc/sse4_1-round3.h: New.\n\t* gcc.target/powerpc/sse4_1-roundpd.c: New.\n\t* gcc.target/powerpc/sse4_1-roundps.c: New.\n\t* gcc.target/powerpc/sse4_1-roundsd.c: New.\n\t* gcc.target/powerpc/sse4_1-roundss.c: New.", "tree": {"sha": "6868733761c1797513f406170fd30f06badcf59b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6868733761c1797513f406170fd30f06badcf59b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5fce2e036f6ec2ab8bfdbf042e1d7fcc6c569a9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fce2e036f6ec2ab8bfdbf042e1d7fcc6c569a9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fce2e036f6ec2ab8bfdbf042e1d7fcc6c569a9a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fce2e036f6ec2ab8bfdbf042e1d7fcc6c569a9a/comments", "author": {"login": "ThinkOpenly", "id": 12301795, "node_id": "MDQ6VXNlcjEyMzAxNzk1", "avatar_url": "https://avatars.githubusercontent.com/u/12301795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThinkOpenly", "html_url": "https://github.com/ThinkOpenly", "followers_url": "https://api.github.com/users/ThinkOpenly/followers", "following_url": "https://api.github.com/users/ThinkOpenly/following{/other_user}", "gists_url": "https://api.github.com/users/ThinkOpenly/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThinkOpenly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThinkOpenly/subscriptions", "organizations_url": "https://api.github.com/users/ThinkOpenly/orgs", "repos_url": "https://api.github.com/users/ThinkOpenly/repos", "events_url": "https://api.github.com/users/ThinkOpenly/events{/privacy}", "received_events_url": "https://api.github.com/users/ThinkOpenly/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThinkOpenly", "id": 12301795, "node_id": "MDQ6VXNlcjEyMzAxNzk1", "avatar_url": "https://avatars.githubusercontent.com/u/12301795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThinkOpenly", "html_url": "https://github.com/ThinkOpenly", "followers_url": "https://api.github.com/users/ThinkOpenly/followers", "following_url": "https://api.github.com/users/ThinkOpenly/following{/other_user}", "gists_url": "https://api.github.com/users/ThinkOpenly/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThinkOpenly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThinkOpenly/subscriptions", "organizations_url": "https://api.github.com/users/ThinkOpenly/orgs", "repos_url": "https://api.github.com/users/ThinkOpenly/repos", "events_url": "https://api.github.com/users/ThinkOpenly/events{/privacy}", "received_events_url": "https://api.github.com/users/ThinkOpenly/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f45a2232bc8d6b88f52859cac502611395f3caf5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f45a2232bc8d6b88f52859cac502611395f3caf5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f45a2232bc8d6b88f52859cac502611395f3caf5"}], "stats": {"total": 1078, "additions": 1014, "deletions": 64}, "files": [{"sha": "4f90c2e7a19c7294139b5949f9e20cce6af67ff9", "filename": "gcc/config/rs6000/smmintrin.h", "status": "modified", "additions": 228, "deletions": 64, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fce2e036f6ec2ab8bfdbf042e1d7fcc6c569a9a/gcc%2Fconfig%2Frs6000%2Fsmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fce2e036f6ec2ab8bfdbf042e1d7fcc6c569a9a/gcc%2Fconfig%2Frs6000%2Fsmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsmmintrin.h?ref=5fce2e036f6ec2ab8bfdbf042e1d7fcc6c569a9a", "patch": "@@ -42,6 +42,234 @@\n #include <altivec.h>\n #include <tmmintrin.h>\n \n+/* Rounding mode macros. */\n+#define _MM_FROUND_TO_NEAREST_INT       0x00\n+#define _MM_FROUND_TO_ZERO              0x01\n+#define _MM_FROUND_TO_POS_INF           0x02\n+#define _MM_FROUND_TO_NEG_INF           0x03\n+#define _MM_FROUND_CUR_DIRECTION        0x04\n+\n+#define _MM_FROUND_NINT\t\t\\\n+  (_MM_FROUND_TO_NEAREST_INT | _MM_FROUND_RAISE_EXC)\n+#define _MM_FROUND_FLOOR\t\\\n+  (_MM_FROUND_TO_NEG_INF | _MM_FROUND_RAISE_EXC)\n+#define _MM_FROUND_CEIL\t\t\\\n+  (_MM_FROUND_TO_POS_INF | _MM_FROUND_RAISE_EXC)\n+#define _MM_FROUND_TRUNC\t\\\n+  (_MM_FROUND_TO_ZERO | _MM_FROUND_RAISE_EXC)\n+#define _MM_FROUND_RINT\t\t\\\n+  (_MM_FROUND_CUR_DIRECTION | _MM_FROUND_RAISE_EXC)\n+#define _MM_FROUND_NEARBYINT\t\\\n+  (_MM_FROUND_CUR_DIRECTION | _MM_FROUND_NO_EXC)\n+\n+#define _MM_FROUND_RAISE_EXC            0x00\n+#define _MM_FROUND_NO_EXC               0x08\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_round_pd (__m128d __A, int __rounding)\n+{\n+  __v2df __r;\n+  union {\n+    double __fr;\n+    long long __fpscr;\n+  } __enables_save, __fpscr_save;\n+\n+  if (__rounding & _MM_FROUND_NO_EXC)\n+    {\n+      /* Save enabled exceptions, disable all exceptions,\n+\t and preserve the rounding mode.  */\n+#ifdef _ARCH_PWR9\n+      __asm__ (\"mffsce %0\" : \"=f\" (__fpscr_save.__fr));\n+      __enables_save.__fpscr = __fpscr_save.__fpscr & 0xf8;\n+#else\n+      __fpscr_save.__fr = __builtin_mffs ();\n+      __enables_save.__fpscr = __fpscr_save.__fpscr & 0xf8;\n+      __fpscr_save.__fpscr &= ~0xf8;\n+      __builtin_mtfsf (0b00000011, __fpscr_save.__fr);\n+#endif\n+      /* Insert an artificial \"read/write\" reference to the variable\n+\t read below, to ensure the compiler does not schedule\n+\t a read/use of the variable before the FPSCR is modified, above.\n+\t This can be removed if and when GCC PR102783 is fixed.\n+       */\n+      __asm__ (\"\" : \"+wa\" (__A));\n+    }\n+\n+  switch (__rounding)\n+    {\n+      case _MM_FROUND_TO_NEAREST_INT:\n+\t__fpscr_save.__fr = __builtin_mffsl ();\n+\t__attribute__ ((fallthrough));\n+      case _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC:\n+\t__builtin_set_fpscr_rn (0b00);\n+\t/* Insert an artificial \"read/write\" reference to the variable\n+\t   read below, to ensure the compiler does not schedule\n+\t   a read/use of the variable before the FPSCR is modified, above.\n+\t   This can be removed if and when GCC PR102783 is fixed.\n+\t */\n+\t__asm__ (\"\" : \"+wa\" (__A));\n+\n+\t__r = vec_rint ((__v2df) __A);\n+\n+\t/* Insert an artificial \"read\" reference to the variable written\n+\t   above, to ensure the compiler does not schedule the computation\n+\t   of the value after the manipulation of the FPSCR, below.\n+\t   This can be removed if and when GCC PR102783 is fixed.\n+\t */\n+\t__asm__ (\"\" : : \"wa\" (__r));\n+\t__builtin_set_fpscr_rn (__fpscr_save.__fpscr);\n+\tbreak;\n+      case _MM_FROUND_TO_NEG_INF:\n+      case _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC:\n+\t__r = vec_floor ((__v2df) __A);\n+\tbreak;\n+      case _MM_FROUND_TO_POS_INF:\n+      case _MM_FROUND_TO_POS_INF | _MM_FROUND_NO_EXC:\n+\t__r = vec_ceil ((__v2df) __A);\n+\tbreak;\n+      case _MM_FROUND_TO_ZERO:\n+      case _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC:\n+\t__r = vec_trunc ((__v2df) __A);\n+\tbreak;\n+      case _MM_FROUND_CUR_DIRECTION:\n+\t__r = vec_rint ((__v2df) __A);\n+\tbreak;\n+    }\n+  if (__rounding & _MM_FROUND_NO_EXC)\n+    {\n+      /* Insert an artificial \"read\" reference to the variable written\n+\t above, to ensure the compiler does not schedule the computation\n+\t of the value after the manipulation of the FPSCR, below.\n+\t This can be removed if and when GCC PR102783 is fixed.\n+       */\n+      __asm__ (\"\" : : \"wa\" (__r));\n+      /* Restore enabled exceptions.  */\n+      __fpscr_save.__fr = __builtin_mffsl ();\n+      __fpscr_save.__fpscr |= __enables_save.__fpscr;\n+      __builtin_mtfsf (0b00000011, __fpscr_save.__fr);\n+    }\n+  return (__m128d) __r;\n+}\n+\n+extern __inline __m128d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_round_sd (__m128d __A, __m128d __B, int __rounding)\n+{\n+  __B = _mm_round_pd (__B, __rounding);\n+  __v2df __r = { ((__v2df) __B)[0], ((__v2df) __A)[1] };\n+  return (__m128d) __r;\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_round_ps (__m128 __A, int __rounding)\n+{\n+  __v4sf __r;\n+  union {\n+    double __fr;\n+    long long __fpscr;\n+  } __enables_save, __fpscr_save;\n+\n+  if (__rounding & _MM_FROUND_NO_EXC)\n+    {\n+      /* Save enabled exceptions, disable all exceptions,\n+\t and preserve the rounding mode.  */\n+#ifdef _ARCH_PWR9\n+      __asm__ (\"mffsce %0\" : \"=f\" (__fpscr_save.__fr));\n+      __enables_save.__fpscr = __fpscr_save.__fpscr & 0xf8;\n+#else\n+      __fpscr_save.__fr = __builtin_mffs ();\n+      __enables_save.__fpscr = __fpscr_save.__fpscr & 0xf8;\n+      __fpscr_save.__fpscr &= ~0xf8;\n+      __builtin_mtfsf (0b00000011, __fpscr_save.__fr);\n+#endif\n+      /* Insert an artificial \"read/write\" reference to the variable\n+\t read below, to ensure the compiler does not schedule\n+\t a read/use of the variable before the FPSCR is modified, above.\n+\t This can be removed if and when GCC PR102783 is fixed.\n+       */\n+      __asm__ (\"\" : \"+wa\" (__A));\n+    }\n+\n+  switch (__rounding)\n+    {\n+      case _MM_FROUND_TO_NEAREST_INT:\n+\t__fpscr_save.__fr = __builtin_mffsl ();\n+\t__attribute__ ((fallthrough));\n+      case _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC:\n+\t__builtin_set_fpscr_rn (0b00);\n+\t/* Insert an artificial \"read/write\" reference to the variable\n+\t   read below, to ensure the compiler does not schedule\n+\t   a read/use of the variable before the FPSCR is modified, above.\n+\t   This can be removed if and when GCC PR102783 is fixed.\n+\t */\n+\t__asm__ (\"\" : \"+wa\" (__A));\n+\n+\t__r = vec_rint ((__v4sf) __A);\n+\n+\t/* Insert an artificial \"read\" reference to the variable written\n+\t   above, to ensure the compiler does not schedule the computation\n+\t   of the value after the manipulation of the FPSCR, below.\n+\t   This can be removed if and when GCC PR102783 is fixed.\n+\t */\n+\t__asm__ (\"\" : : \"wa\" (__r));\n+\t__builtin_set_fpscr_rn (__fpscr_save.__fpscr);\n+\tbreak;\n+      case _MM_FROUND_TO_NEG_INF:\n+      case _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC:\n+\t__r = vec_floor ((__v4sf) __A);\n+\tbreak;\n+      case _MM_FROUND_TO_POS_INF:\n+      case _MM_FROUND_TO_POS_INF | _MM_FROUND_NO_EXC:\n+\t__r = vec_ceil ((__v4sf) __A);\n+\tbreak;\n+      case _MM_FROUND_TO_ZERO:\n+      case _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC:\n+\t__r = vec_trunc ((__v4sf) __A);\n+\tbreak;\n+      case _MM_FROUND_CUR_DIRECTION:\n+\t__r = vec_rint ((__v4sf) __A);\n+\tbreak;\n+    }\n+  if (__rounding & _MM_FROUND_NO_EXC)\n+    {\n+      /* Insert an artificial \"read\" reference to the variable written\n+\t above, to ensure the compiler does not schedule the computation\n+\t of the value after the manipulation of the FPSCR, below.\n+\t This can be removed if and when GCC PR102783 is fixed.\n+       */\n+      __asm__ (\"\" : : \"wa\" (__r));\n+      /* Restore enabled exceptions.  */\n+      __fpscr_save.__fr = __builtin_mffsl ();\n+      __fpscr_save.__fpscr |= __enables_save.__fpscr;\n+      __builtin_mtfsf (0b00000011, __fpscr_save.__fr);\n+    }\n+  return (__m128) __r;\n+}\n+\n+extern __inline __m128\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_round_ss (__m128 __A, __m128 __B, int __rounding)\n+{\n+  __B = _mm_round_ps (__B, __rounding);\n+  __v4sf __r = (__v4sf) __A;\n+  __r[0] = ((__v4sf) __B)[0];\n+  return (__m128) __r;\n+}\n+\n+#define _mm_ceil_pd(V)\t   _mm_round_pd ((V), _MM_FROUND_CEIL)\n+#define _mm_ceil_sd(D, V)  _mm_round_sd ((D), (V), _MM_FROUND_CEIL)\n+\n+#define _mm_floor_pd(V)\t   _mm_round_pd((V), _MM_FROUND_FLOOR)\n+#define _mm_floor_sd(D, V) _mm_round_sd ((D), (V), _MM_FROUND_FLOOR)\n+\n+#define _mm_ceil_ps(V)\t   _mm_round_ps ((V), _MM_FROUND_CEIL)\n+#define _mm_ceil_ss(D, V)  _mm_round_ss ((D), (V), _MM_FROUND_CEIL)\n+\n+#define _mm_floor_ps(V)\t   _mm_round_ps ((V), _MM_FROUND_FLOOR)\n+#define _mm_floor_ss(D, V) _mm_round_ss ((D), (V), _MM_FROUND_FLOOR)\n+\n extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_insert_epi8 (__m128i const __A, int const __D, int const __N)\n {\n@@ -226,70 +454,6 @@ _mm_testnzc_si128 (__m128i __A, __m128i __B)\n \n #define _mm_test_mix_ones_zeros(M, V) _mm_testnzc_si128 ((M), (V))\n \n-extern __inline __m128d\n-__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_ceil_pd (__m128d __A)\n-{\n-  return (__m128d) vec_ceil ((__v2df) __A);\n-}\n-\n-extern __inline __m128d\n-__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_ceil_sd (__m128d __A, __m128d __B)\n-{\n-  __v2df __r = vec_ceil ((__v2df) __B);\n-  __r[1] = ((__v2df) __A)[1];\n-  return (__m128d) __r;\n-}\n-\n-extern __inline __m128d\n-__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_floor_pd (__m128d __A)\n-{\n-  return (__m128d) vec_floor ((__v2df) __A);\n-}\n-\n-extern __inline __m128d\n-__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_floor_sd (__m128d __A, __m128d __B)\n-{\n-  __v2df __r = vec_floor ((__v2df) __B);\n-  __r[1] = ((__v2df) __A)[1];\n-  return (__m128d) __r;\n-}\n-\n-extern __inline __m128\n-__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_ceil_ps (__m128 __A)\n-{\n-  return (__m128) vec_ceil ((__v4sf) __A);\n-}\n-\n-extern __inline __m128\n-__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_ceil_ss (__m128 __A, __m128 __B)\n-{\n-  __v4sf __r = (__v4sf) __A;\n-  __r[0] = __builtin_ceil (((__v4sf) __B)[0]);\n-  return __r;\n-}\n-\n-extern __inline __m128\n-__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_floor_ps (__m128 __A)\n-{\n-  return (__m128) vec_floor ((__v4sf) __A);\n-}\n-\n-extern __inline __m128\n-__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_floor_ss (__m128 __A, __m128 __B)\n-{\n-  __v4sf __r = (__v4sf) __A;\n-  __r[0] = __builtin_floor (((__v4sf) __B)[0]);\n-  return __r;\n-}\n-\n #ifdef _ARCH_PWR8\n extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))"}, {"sha": "de6cbf7be438c4bcbd0a1b661b8dc233624cb6d4", "filename": "gcc/testsuite/gcc.target/powerpc/sse4_1-round3.h", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fce2e036f6ec2ab8bfdbf042e1d7fcc6c569a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-round3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fce2e036f6ec2ab8bfdbf042e1d7fcc6c569a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-round3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-round3.h?ref=5fce2e036f6ec2ab8bfdbf042e1d7fcc6c569a9a", "patch": "@@ -0,0 +1,81 @@\n+#include <smmintrin.h>\n+#include <fenv.h>\n+#include \"sse4_1-check.h\"\n+\n+#define DIM(a) (sizeof (a) / sizeof (a)[0])\n+\n+static int roundings[] =\n+  {\n+    _MM_FROUND_TO_NEAREST_INT,\n+    _MM_FROUND_TO_NEG_INF,\n+    _MM_FROUND_TO_POS_INF,\n+    _MM_FROUND_TO_ZERO,\n+    _MM_FROUND_CUR_DIRECTION\n+  };\n+\n+static int modes[] =\n+  {\n+    FE_TONEAREST,\n+    FE_UPWARD,\n+    FE_DOWNWARD,\n+    FE_TOWARDZERO\n+  };\n+\n+static void\n+TEST (void)\n+{\n+  int i, j, ri, mi, round_save;\n+\n+  round_save = fegetround ();\n+  for (mi = 0; mi < DIM (modes); mi++) {\n+    fesetround (modes[mi]);\n+    for (i = 0; i < DIM (data); i++) {\n+      for (ri = 0; ri < DIM (roundings); ri++) {\n+\tunion value guess;\n+\tunion value *current_answers = answers[ri];\n+\tswitch ( roundings[ri] ) {\n+\t  case _MM_FROUND_TO_NEAREST_INT:\n+\t    guess.x = ROUND_INTRIN (data[i].value1.x, data[i].value2.x,\n+\t\t\t\t    _MM_FROUND_TO_NEAREST_INT);\n+\t    break;\n+\t  case _MM_FROUND_TO_NEG_INF:\n+\t    guess.x = ROUND_INTRIN (data[i].value1.x, data[i].value2.x,\n+\t\t\t\t    _MM_FROUND_TO_NEG_INF);\n+\t    break;\n+\t  case _MM_FROUND_TO_POS_INF:\n+\t    guess.x = ROUND_INTRIN (data[i].value1.x, data[i].value2.x,\n+\t\t\t\t    _MM_FROUND_TO_POS_INF);\n+\t    break;\n+\t  case _MM_FROUND_TO_ZERO:\n+\t    guess.x = ROUND_INTRIN (data[i].value1.x, data[i].value2.x,\n+\t\t\t\t    _MM_FROUND_TO_ZERO);\n+\t    break;\n+\t  case _MM_FROUND_CUR_DIRECTION:\n+\t    guess.x = ROUND_INTRIN (data[i].value1.x, data[i].value2.x,\n+\t\t\t\t    _MM_FROUND_CUR_DIRECTION);\n+\t    switch ( modes[mi] ) {\n+\t      case FE_TONEAREST:\n+\t\tcurrent_answers = answers_NEAREST_INT;\n+\t\tbreak;\n+\t      case FE_UPWARD:\n+\t\tcurrent_answers = answers_POS_INF;\n+\t\tbreak;\n+\t      case FE_DOWNWARD:\n+\t\tcurrent_answers = answers_NEG_INF;\n+\t\tbreak;\n+\t      case FE_TOWARDZERO:\n+\t\tcurrent_answers = answers_ZERO;\n+\t\tbreak;\n+\t    }\n+\t    break;\n+\t  default:\n+\t    abort ();\n+\t}\n+\tfor (j = 0; j < DIM (guess.f); j++)\n+\t  if (guess.f[j] != current_answers[i].f[j])\n+\t    abort ();\n+      }\n+    }\n+  }\n+  fesetround (round_save);\n+}"}, {"sha": "58d9cc5241679ff13f7375da86c68b7271293f3b", "filename": "gcc/testsuite/gcc.target/powerpc/sse4_1-roundpd.c", "status": "added", "additions": 143, "deletions": 0, "changes": 143, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fce2e036f6ec2ab8bfdbf042e1d7fcc6c569a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-roundpd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fce2e036f6ec2ab8bfdbf042e1d7fcc6c569a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-roundpd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-roundpd.c?ref=5fce2e036f6ec2ab8bfdbf042e1d7fcc6c569a9a", "patch": "@@ -0,0 +1,143 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target vsx_hw } */\n+/* { dg-options \"-O2 -mvsx\" } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#include <smmintrin.h>\n+\n+#define VEC_T __m128d\n+#define FP_T double\n+\n+#define ROUND_INTRIN(x, ignored, mode) _mm_round_pd (x, mode)\n+\n+#include \"sse4_1-round-data.h\"\n+\n+struct data2 data[] = {\n+  { .value1 = { .f = {  0.00,  0.25 } } },\n+  { .value1 = { .f = {  0.50,  0.75 } } },\n+\n+  { .value1 = { .f = {  0x1.ffffffffffffcp+50,  0x1.ffffffffffffdp+50 } } },\n+  { .value1 = { .f = {  0x1.ffffffffffffep+50,  0x1.fffffffffffffp+50 } } },\n+  { .value1 = { .f = {  0x1.0000000000000p+51,  0x1.0000000000001p+51 } } },\n+  { .value1 = { .f = {  0x1.0000000000002p+51,  0x1.0000000000003p+51 } } },\n+\n+  { .value1 = { .f = {  0x1.ffffffffffffep+51,  0x1.fffffffffffffp+51 } } },\n+  { .value1 = { .f = {  0x1.0000000000000p+52,  0x1.0000000000001p+52 } } },\n+\n+  { .value1 = { .f = { -0x1.0000000000001p+52, -0x1.0000000000000p+52 } } },\n+  { .value1 = { .f = { -0x1.fffffffffffffp+51, -0x1.ffffffffffffep+51 } } },\n+\n+  { .value1 = { .f = { -0x1.0000000000004p+51, -0x1.0000000000002p+51 } } },\n+  { .value1 = { .f = { -0x1.0000000000001p+51, -0x1.0000000000000p+51 } } },\n+  { .value1 = { .f = { -0x1.ffffffffffffcp+50, -0x1.ffffffffffffep+50 } } },\n+  { .value1 = { .f = { -0x1.ffffffffffffdp+50, -0x1.ffffffffffffcp+50 } } },\n+\n+  { .value1 = { .f = { -1.00, -0.75 } } },\n+  { .value1 = { .f = { -0.50, -0.25 } } }\n+};\n+\n+union value answers_NEAREST_INT[] = {\n+  { .f = {  0.00,  0.00 } },\n+  { .f = {  0.00,  1.00 } },\n+\n+  { .f = {  0x1.ffffffffffffcp+50,  0x1.ffffffffffffcp+50 } },\n+  { .f = {  0x1.0000000000000p+51,  0x1.0000000000000p+51 } },\n+  { .f = {  0x1.0000000000000p+51,  0x1.0000000000000p+51 } },\n+  { .f = {  0x1.0000000000002p+51,  0x1.0000000000004p+51 } },\n+\n+  { .f = {  0x1.ffffffffffffep+51,  0x1.0000000000000p+52 } },\n+  { .f = {  0x1.0000000000000p+52,  0x1.0000000000001p+52 } },\n+\n+  { .f = { -0x1.0000000000001p+52, -0x1.0000000000000p+52 } },\n+  { .f = { -0x1.0000000000000p+52, -0x1.ffffffffffffep+51 } },\n+\n+  { .f = { -0x1.0000000000004p+51, -0x1.0000000000002p+51 } },\n+  { .f = { -0x1.0000000000000p+51, -0x1.0000000000000p+51 } },\n+  { .f = { -0x1.ffffffffffffcp+50, -0x1.0000000000000p+51 } },\n+  { .f = { -0x1.ffffffffffffcp+50, -0x1.ffffffffffffcp+50 } },\n+\n+  { .f = { -1.00, -1.00 } },\n+  { .f = {  0.00,  0.00 } }\n+};\n+\n+union value answers_NEG_INF[] = {\n+  { .f = {  0.00,  0.00 } },\n+  { .f = {  0.00,  0.00 } },\n+\n+  { .f = {  0x1.ffffffffffffcp+50,  0x1.ffffffffffffcp+50 } },\n+  { .f = {  0x1.ffffffffffffcp+50,  0x1.ffffffffffffcp+50 } },\n+  { .f = {  0x1.0000000000000p+51,  0x1.0000000000000p+51 } },\n+  { .f = {  0x1.0000000000002p+51,  0x1.0000000000002p+51 } },\n+\n+  { .f = {  0x1.ffffffffffffep+51,  0x1.ffffffffffffep+51 } },\n+  { .f = {  0x1.0000000000000p+52,  0x1.0000000000001p+52 } },\n+\n+  { .f = { -0x1.0000000000001p+52, -0x1.0000000000000p+52 } },\n+  { .f = { -0x1.0000000000000p+52, -0x1.ffffffffffffep+51 } },\n+\n+  { .f = { -0x1.0000000000004p+51, -0x1.0000000000002p+51 } },\n+  { .f = { -0x1.0000000000002p+51, -0x1.0000000000000p+51 } },\n+  { .f = { -0x1.ffffffffffffcp+50, -0x1.0000000000000p+51 } },\n+  { .f = { -0x1.0000000000000p+51, -0x1.ffffffffffffcp+50 } },\n+\n+  { .f = { -1.00, -1.00 } },\n+  { .f = { -1.00, -1.00 } }\n+};\n+\n+union value answers_POS_INF[] = {\n+  { .f = {  0.00,  1.00 } },\n+  { .f = {  1.00,  1.00 } },\n+\n+  { .f = {  0x1.ffffffffffffcp+50,  0x1.0000000000000p+51 } },\n+  { .f = {  0x1.0000000000000p+51,  0x1.0000000000000p+51 } },\n+  { .f = {  0x1.0000000000000p+51,  0x1.0000000000002p+51 } },\n+  { .f = {  0x1.0000000000002p+51,  0x1.0000000000004p+51 } },\n+\n+  { .f = {  0x1.ffffffffffffep+51,  0x1.0000000000000p+52 } },\n+  { .f = {  0x1.0000000000000p+52,  0x1.0000000000001p+52 } },\n+\n+  { .f = { -0x1.0000000000001p+52, -0x1.0000000000000p+52 } },\n+  { .f = { -0x1.ffffffffffffep+51, -0x1.ffffffffffffep+51 } },\n+\n+  { .f = { -0x1.0000000000004p+51, -0x1.0000000000002p+51 } },\n+  { .f = { -0x1.0000000000000p+51, -0x1.0000000000000p+51 } },\n+  { .f = { -0x1.ffffffffffffcp+50, -0x1.ffffffffffffcp+50 } },\n+  { .f = { -0x1.ffffffffffffcp+50, -0x1.ffffffffffffcp+50 } },\n+\n+  { .f = { -1.00,  0.00 } },\n+  { .f = {  0.00,  0.00 } }\n+};\n+\n+union value answers_ZERO[] = {\n+  { .f = {  0.00,  0.00 } },\n+  { .f = {  0.00,  0.00 } },\n+\n+  { .f = {  0x1.ffffffffffffcp+50,  0x1.ffffffffffffcp+50 } },\n+  { .f = {  0x1.ffffffffffffcp+50,  0x1.ffffffffffffcp+50 } },\n+  { .f = {  0x1.0000000000000p+51,  0x1.0000000000000p+51 } },\n+  { .f = {  0x1.0000000000002p+51,  0x1.0000000000002p+51 } },\n+\n+  { .f = {  0x1.ffffffffffffep+51,  0x1.ffffffffffffep+51 } },\n+  { .f = {  0x1.0000000000000p+52,  0x1.0000000000001p+52 } },\n+\n+  { .f = { -0x1.0000000000001p+52, -0x1.0000000000000p+52 } },\n+  { .f = { -0x1.ffffffffffffep+51, -0x1.ffffffffffffep+51 } },\n+\n+  { .f = { -0x1.0000000000004p+51, -0x1.0000000000002p+51 } },\n+  { .f = { -0x1.0000000000000p+51, -0x1.0000000000000p+51 } },\n+  { .f = { -0x1.ffffffffffffcp+50, -0x1.ffffffffffffcp+50 } },\n+  { .f = { -0x1.ffffffffffffcp+50, -0x1.ffffffffffffcp+50 } },\n+\n+  { .f = { -1.00,  0.00 } },\n+  { .f = {  0.00,  0.00 } }\n+};\n+\n+union value *answers[] = {\n+  answers_NEAREST_INT,\n+  answers_NEG_INF,\n+  answers_POS_INF,\n+  answers_ZERO,\n+  0 /* CUR_DIRECTION answers depend on current rounding mode.  */\n+};\n+\n+#include \"sse4_1-round3.h\""}, {"sha": "4b0366dfddf3d2a2e9966fb178b655782a3daef9", "filename": "gcc/testsuite/gcc.target/powerpc/sse4_1-roundps.c", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fce2e036f6ec2ab8bfdbf042e1d7fcc6c569a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-roundps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fce2e036f6ec2ab8bfdbf042e1d7fcc6c569a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-roundps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-roundps.c?ref=5fce2e036f6ec2ab8bfdbf042e1d7fcc6c569a9a", "patch": "@@ -0,0 +1,98 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target vsx_hw } */\n+/* { dg-options \"-O2 -mvsx\" } */\n+\n+#define NO_WARN_X86_INTRINSICS 1\n+#include <smmintrin.h>\n+\n+#define VEC_T __m128\n+#define FP_T float\n+\n+#define ROUND_INTRIN(x, ignored, mode) _mm_round_ps (x, mode)\n+\n+#include \"sse4_1-round-data.h\"\n+\n+struct data2 data[] = {\n+  { .value1 = { .f = {  0.00,  0.25,  0.50,  0.75 } } },\n+\n+  { .value1 = { .f = {  0x1.fffff8p+21,  0x1.fffffap+21,\n+\t\t\t0x1.fffffcp+21,  0x1.fffffep+21 } } },\n+  { .value1 = { .f = {  0x1.fffffap+22,  0x1.fffffcp+22,\n+\t\t\t0x1.fffffep+22,  0x1.fffffep+23 } } },\n+  { .value1 = { .f = { -0x1.fffffep+23, -0x1.fffffep+22,\n+\t\t       -0x1.fffffcp+22, -0x1.fffffap+22 } } },\n+  { .value1 = { .f = { -0x1.fffffep+21, -0x1.fffffcp+21,\n+\t\t       -0x1.fffffap+21, -0x1.fffff8p+21 } } },\n+\n+  { .value1 = { .f = { -1.00, -0.75, -0.50, -0.25 } } }\n+};\n+\n+union value answers_NEAREST_INT[] = {\n+  { .f = {  0.00,  0.00,  0.00,  1.00 } },\n+\n+  { .f = {  0x1.fffff8p+21,  0x1.fffff8p+21,\n+            0x1.000000p+22,  0x1.000000p+22 } },\n+  { .f = {  0x1.fffff8p+22,  0x1.fffffcp+22,\n+            0x1.000000p+23,  0x1.fffffep+23 } },\n+  { .f = { -0x1.fffffep+23, -0x1.000000p+23,\n+           -0x1.fffffcp+22, -0x1.fffff8p+22 } },\n+  { .f = { -0x1.000000p+22, -0x1.000000p+22,\n+           -0x1.fffff8p+21, -0x1.fffff8p+21 } },\n+\n+  { .f = { -1.00, -1.00,  0.00,  0.00 } }\n+};\n+\n+union value answers_NEG_INF[] = {\n+  { .f = {  0.00,  0.00,  0.00,  0.00 } },\n+\n+  { .f = {  0x1.fffff8p+21,  0x1.fffff8p+21,\n+            0x1.fffff8p+21,  0x1.fffff8p+21 } },\n+  { .f = {  0x1.fffff8p+22,  0x1.fffffcp+22,\n+            0x1.fffffcp+22,  0x1.fffffep+23 } },\n+  { .f = { -0x1.fffffep+23, -0x1.000000p+23,\n+           -0x1.fffffcp+22, -0x1.fffffcp+22 } },\n+  { .f = { -0x1.000000p+22, -0x1.000000p+22,\n+           -0x1.000000p+22, -0x1.fffff8p+21 } },\n+\n+  { .f = { -1.00, -1.00, -1.00, -1.00 } }\n+};\n+\n+union value answers_POS_INF[] = {\n+  { .f = {  0.00,  1.00,  1.00,  1.00 } },\n+\n+  { .f = {  0x1.fffff8p+21,  0x1.000000p+22,\n+            0x1.000000p+22,  0x1.000000p+22 } },\n+  { .f = {  0x1.fffffcp+22,  0x1.fffffcp+22,\n+            0x1.000000p+23,  0x1.fffffep+23 } },\n+  { .f = { -0x1.fffffep+23, -0x1.fffffcp+22,\n+           -0x1.fffffcp+22, -0x1.fffff8p+22 } },\n+  { .f = { -0x1.fffff8p+21, -0x1.fffff8p+21,\n+           -0x1.fffff8p+21, -0x1.fffff8p+21 } },\n+\n+  { .f = { -1.00,  0.00,  0.00,  0.00 } }\n+};\n+\n+union value answers_ZERO[] = {\n+  { .f = {  0.00,  0.00,  0.00,  0.00 } },\n+\n+  { .f = {  0x1.fffff8p+21,  0x1.fffff8p+21,\n+            0x1.fffff8p+21,  0x1.fffff8p+21 } },\n+  { .f = {  0x1.fffff8p+22,  0x1.fffffcp+22,\n+            0x1.fffffcp+22,  0x1.fffffep+23 } },\n+  { .f = { -0x1.fffffep+23, -0x1.fffffcp+22,\n+           -0x1.fffffcp+22, -0x1.fffff8p+22 } },\n+  { .f = { -0x1.fffff8p+21, -0x1.fffff8p+21,\n+           -0x1.fffff8p+21, -0x1.fffff8p+21 } },\n+\n+  { .f = { -1.00,  0.00,  0.00,  0.00 } }\n+};\n+\n+union value *answers[] = {\n+  answers_NEAREST_INT,\n+  answers_NEG_INF,\n+  answers_POS_INF,\n+  answers_ZERO,\n+  0 /* CUR_DIRECTION answers depend on current rounding mode.  */\n+};\n+\n+#include \"sse4_1-round3.h\""}, {"sha": "4f8d9e08c93d5e870a28d00a9b21b059e5df2f33", "filename": "gcc/testsuite/gcc.target/powerpc/sse4_1-roundsd.c", "status": "added", "additions": 256, "deletions": 0, "changes": 256, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fce2e036f6ec2ab8bfdbf042e1d7fcc6c569a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-roundsd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fce2e036f6ec2ab8bfdbf042e1d7fcc6c569a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-roundsd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-roundsd.c?ref=5fce2e036f6ec2ab8bfdbf042e1d7fcc6c569a9a", "patch": "@@ -0,0 +1,256 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target vsx_hw } */\n+/* { dg-options \"-O2 -mvsx\" } */\n+\n+#include <stdio.h>\n+#define NO_WARN_X86_INTRINSICS 1\n+#include <smmintrin.h>\n+\n+#define VEC_T __m128d\n+#define FP_T double\n+\n+#define ROUND_INTRIN(x, y, mode) _mm_round_sd (x, y, mode)\n+\n+#include \"sse4_1-round-data.h\"\n+\n+static struct data2 data[] = {\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = {  0.00, IGNORED } } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = {  0.25, IGNORED } } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = {  0.50, IGNORED } } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = {  0.75, IGNORED } } },\n+\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = {  0x1.ffffffffffffcp+50, IGNORED } } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = {  0x1.ffffffffffffdp+50, IGNORED } } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = {  0x1.ffffffffffffep+50, IGNORED } } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = {  0x1.fffffffffffffp+50, IGNORED } } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = {  0x1.0000000000000p+51, IGNORED } } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = {  0x1.0000000000001p+51, IGNORED } } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = {  0x1.0000000000002p+51, IGNORED } } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = {  0x1.0000000000003p+51, IGNORED } } },\n+\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = {  0x1.ffffffffffffep+51, IGNORED } } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = {  0x1.fffffffffffffp+51, IGNORED } } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = {  0x1.0000000000000p+52, IGNORED } } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = {  0x1.0000000000001p+52, IGNORED } } },\n+\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = { -0x1.0000000000001p+52, IGNORED } } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = { -0x1.0000000000000p+52, IGNORED } } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = { -0x1.fffffffffffffp+51, IGNORED } } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = { -0x1.ffffffffffffep+51, IGNORED } } },\n+\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = { -0x1.0000000000004p+51, IGNORED } } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = { -0x1.0000000000002p+51, IGNORED } } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = { -0x1.0000000000001p+51, IGNORED } } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = { -0x1.0000000000000p+51, IGNORED } } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = { -0x1.ffffffffffffcp+50, IGNORED } } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = { -0x1.ffffffffffffep+50, IGNORED } } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = { -0x1.ffffffffffffdp+50, IGNORED } } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = { -0x1.ffffffffffffcp+50, IGNORED } } },\n+\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = { -1.00, IGNORED } } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = { -0.75, IGNORED } } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = { -0.50, IGNORED } } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH } },\n+    .value2 = { .f = { -0.25, IGNORED } } }\n+};\n+\n+static union value answers_NEAREST_INT[] = {\n+  { .f = {  0.00, PASSTHROUGH } },\n+  { .f = {  0.00, PASSTHROUGH } },\n+  { .f = {  0.00, PASSTHROUGH } },\n+  { .f = {  1.00, PASSTHROUGH } },\n+\n+  { .f = {  0x1.ffffffffffffcp+50, PASSTHROUGH } },\n+  { .f = {  0x1.ffffffffffffcp+50, PASSTHROUGH } },\n+  { .f = {  0x1.0000000000000p+51, PASSTHROUGH } },\n+  { .f = {  0x1.0000000000000p+51, PASSTHROUGH } },\n+  { .f = {  0x1.0000000000000p+51, PASSTHROUGH } },\n+  { .f = {  0x1.0000000000000p+51, PASSTHROUGH } },\n+  { .f = {  0x1.0000000000002p+51, PASSTHROUGH } },\n+  { .f = {  0x1.0000000000004p+51, PASSTHROUGH } },\n+\n+  { .f = {  0x1.ffffffffffffep+51, PASSTHROUGH } },\n+  { .f = {  0x1.0000000000000p+52, PASSTHROUGH } },\n+  { .f = {  0x1.0000000000000p+52, PASSTHROUGH } },\n+  { .f = {  0x1.0000000000001p+52, PASSTHROUGH } },\n+\n+  { .f = { -0x1.0000000000001p+52, PASSTHROUGH } },\n+  { .f = { -0x1.0000000000000p+52, PASSTHROUGH } },\n+  { .f = { -0x1.0000000000000p+52, PASSTHROUGH } },\n+  { .f = { -0x1.ffffffffffffep+51, PASSTHROUGH } },\n+\n+  { .f = { -0x1.0000000000004p+51, PASSTHROUGH } },\n+  { .f = { -0x1.0000000000002p+51, PASSTHROUGH } },\n+  { .f = { -0x1.0000000000000p+51, PASSTHROUGH } },\n+  { .f = { -0x1.0000000000000p+51, PASSTHROUGH } },\n+  { .f = { -0x1.ffffffffffffcp+50, PASSTHROUGH } },\n+  { .f = { -0x1.0000000000000p+51, PASSTHROUGH } },\n+  { .f = { -0x1.ffffffffffffcp+50, PASSTHROUGH } },\n+  { .f = { -0x1.ffffffffffffcp+50, PASSTHROUGH } },\n+\n+  { .f = { -1.00, PASSTHROUGH } },\n+  { .f = { -1.00, PASSTHROUGH } },\n+  { .f = { -0.00, PASSTHROUGH } },\n+  { .f = { -0.00, PASSTHROUGH } }\n+};\n+\n+static union value answers_NEG_INF[] = {\n+  { .f = {  0.00, PASSTHROUGH } },\n+  { .f = {  0.00, PASSTHROUGH } },\n+  { .f = {  0.00, PASSTHROUGH } },\n+  { .f = {  0.00, PASSTHROUGH } },\n+\n+  { .f = {  0x1.ffffffffffffcp+50, PASSTHROUGH } },\n+  { .f = {  0x1.ffffffffffffcp+50, PASSTHROUGH } },\n+  { .f = {  0x1.ffffffffffffcp+50, PASSTHROUGH } },\n+  { .f = {  0x1.ffffffffffffcp+50, PASSTHROUGH } },\n+  { .f = {  0x1.0000000000000p+51, PASSTHROUGH } },\n+  { .f = {  0x1.0000000000000p+51, PASSTHROUGH } },\n+  { .f = {  0x1.0000000000002p+51, PASSTHROUGH } },\n+  { .f = {  0x1.0000000000002p+51, PASSTHROUGH } },\n+\n+  { .f = {  0x1.ffffffffffffep+51, PASSTHROUGH } },\n+  { .f = {  0x1.ffffffffffffep+51, PASSTHROUGH } },\n+  { .f = {  0x1.0000000000000p+52, PASSTHROUGH } },\n+  { .f = {  0x1.0000000000001p+52, PASSTHROUGH } },\n+\n+  { .f = { -0x1.0000000000001p+52, PASSTHROUGH } },\n+  { .f = { -0x1.0000000000000p+52, PASSTHROUGH } },\n+  { .f = { -0x1.0000000000000p+52, PASSTHROUGH } },\n+  { .f = { -0x1.ffffffffffffep+51, PASSTHROUGH } },\n+\n+  { .f = { -0x1.0000000000004p+51, PASSTHROUGH } },\n+  { .f = { -0x1.0000000000002p+51, PASSTHROUGH } },\n+  { .f = { -0x1.0000000000002p+51, PASSTHROUGH } },\n+  { .f = { -0x1.0000000000000p+51, PASSTHROUGH } },\n+  { .f = { -0x1.ffffffffffffcp+50, PASSTHROUGH } },\n+  { .f = { -0x1.0000000000000p+51, PASSTHROUGH } },\n+  { .f = { -0x1.0000000000000p+51, PASSTHROUGH } },\n+  { .f = { -0x1.ffffffffffffcp+50, PASSTHROUGH } },\n+\n+  { .f = { -1.00, PASSTHROUGH } },\n+  { .f = { -1.00, PASSTHROUGH } },\n+  { .f = { -1.00, PASSTHROUGH } },\n+  { .f = { -1.00, PASSTHROUGH } }\n+};\n+\n+static union value answers_POS_INF[] = {\n+  { .f = {  0.00, PASSTHROUGH } },\n+  { .f = {  1.00, PASSTHROUGH } },\n+  { .f = {  1.00, PASSTHROUGH } },\n+  { .f = {  1.00, PASSTHROUGH } },\n+\n+  { .f = {  0x1.ffffffffffffcp+50, PASSTHROUGH } },\n+  { .f = {  0x1.0000000000000p+51, PASSTHROUGH } },\n+  { .f = {  0x1.0000000000000p+51, PASSTHROUGH } },\n+  { .f = {  0x1.0000000000000p+51, PASSTHROUGH } },\n+  { .f = {  0x1.0000000000000p+51, PASSTHROUGH } },\n+  { .f = {  0x1.0000000000002p+51, PASSTHROUGH } },\n+  { .f = {  0x1.0000000000002p+51, PASSTHROUGH } },\n+  { .f = {  0x1.0000000000004p+51, PASSTHROUGH } },\n+\n+  { .f = {  0x1.ffffffffffffep+51, PASSTHROUGH } },\n+  { .f = {  0x1.0000000000000p+52, PASSTHROUGH } },\n+  { .f = {  0x1.0000000000000p+52, PASSTHROUGH } },\n+  { .f = {  0x1.0000000000001p+52, PASSTHROUGH } },\n+\n+  { .f = { -0x1.0000000000001p+52, PASSTHROUGH } },\n+  { .f = { -0x1.0000000000000p+52, PASSTHROUGH } },\n+  { .f = { -0x1.ffffffffffffep+51, PASSTHROUGH } },\n+  { .f = { -0x1.ffffffffffffep+51, PASSTHROUGH } },\n+\n+  { .f = { -0x1.0000000000004p+51, PASSTHROUGH } },\n+  { .f = { -0x1.0000000000002p+51, PASSTHROUGH } },\n+  { .f = { -0x1.0000000000000p+51, PASSTHROUGH } },\n+  { .f = { -0x1.0000000000000p+51, PASSTHROUGH } },\n+  { .f = { -0x1.ffffffffffffcp+50, PASSTHROUGH } },\n+  { .f = { -0x1.ffffffffffffcp+50, PASSTHROUGH } },\n+  { .f = { -0x1.ffffffffffffcp+50, PASSTHROUGH } },\n+  { .f = { -0x1.ffffffffffffcp+50, PASSTHROUGH } },\n+\n+  { .f = { -1.00, PASSTHROUGH } },\n+  { .f = {  0.00, PASSTHROUGH } },\n+  { .f = {  0.00, PASSTHROUGH } },\n+  { .f = {  0.00, PASSTHROUGH } }\n+};\n+\n+static union value answers_ZERO[] = {\n+  { .f = {  0.00, PASSTHROUGH } },\n+  { .f = {  0.00, PASSTHROUGH } },\n+  { .f = {  0.00, PASSTHROUGH } },\n+  { .f = {  0.00, PASSTHROUGH } },\n+\n+  { .f = {  0x1.ffffffffffffcp+50, PASSTHROUGH } },\n+  { .f = {  0x1.ffffffffffffcp+50, PASSTHROUGH } },\n+  { .f = {  0x1.ffffffffffffcp+50, PASSTHROUGH } },\n+  { .f = {  0x1.ffffffffffffcp+50, PASSTHROUGH } },\n+  { .f = {  0x1.0000000000000p+51, PASSTHROUGH } },\n+  { .f = {  0x1.0000000000000p+51, PASSTHROUGH } },\n+  { .f = {  0x1.0000000000002p+51, PASSTHROUGH } },\n+  { .f = {  0x1.0000000000002p+51, PASSTHROUGH } },\n+\n+  { .f = {  0x1.ffffffffffffep+51, PASSTHROUGH } },\n+  { .f = {  0x1.ffffffffffffep+51, PASSTHROUGH } },\n+  { .f = {  0x1.0000000000000p+52, PASSTHROUGH } },\n+  { .f = {  0x1.0000000000001p+52, PASSTHROUGH } },\n+\n+  { .f = { -0x1.0000000000001p+52, PASSTHROUGH } },\n+  { .f = { -0x1.0000000000000p+52, PASSTHROUGH } },\n+  { .f = { -0x1.ffffffffffffep+51, PASSTHROUGH } },\n+  { .f = { -0x1.ffffffffffffep+51, PASSTHROUGH } },\n+\n+  { .f = { -0x1.0000000000004p+51, PASSTHROUGH } },\n+  { .f = { -0x1.0000000000002p+51, PASSTHROUGH } },\n+  { .f = { -0x1.0000000000000p+51, PASSTHROUGH } },\n+  { .f = { -0x1.0000000000000p+51, PASSTHROUGH } },\n+  { .f = { -0x1.ffffffffffffcp+50, PASSTHROUGH } },\n+  { .f = { -0x1.ffffffffffffcp+50, PASSTHROUGH } },\n+  { .f = { -0x1.ffffffffffffcp+50, PASSTHROUGH } },\n+  { .f = { -0x1.ffffffffffffcp+50, PASSTHROUGH } },\n+\n+  { .f = { -1.00, PASSTHROUGH } },\n+  { .f = {  0.00, PASSTHROUGH } },\n+  { .f = {  0.00, PASSTHROUGH } },\n+  { .f = {  0.00, PASSTHROUGH } }\n+};\n+\n+union value *answers[] = {\n+  answers_NEAREST_INT,\n+  answers_NEG_INF,\n+  answers_POS_INF,\n+  answers_ZERO,\n+  0 /* CUR_DIRECTION answers depend on current rounding mode.  */\n+};\n+\n+#include \"sse4_1-round3.h\""}, {"sha": "d788ebda64dd391cb12ffef068ca25e5229694dd", "filename": "gcc/testsuite/gcc.target/powerpc/sse4_1-roundss.c", "status": "added", "additions": 208, "deletions": 0, "changes": 208, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fce2e036f6ec2ab8bfdbf042e1d7fcc6c569a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-roundss.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fce2e036f6ec2ab8bfdbf042e1d7fcc6c569a9a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-roundss.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-roundss.c?ref=5fce2e036f6ec2ab8bfdbf042e1d7fcc6c569a9a", "patch": "@@ -0,0 +1,208 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target vsx_hw } */\n+/* { dg-options \"-O2 -mvsx\" } */\n+\n+#include <stdio.h>\n+#define NO_WARN_X86_INTRINSICS 1\n+#include <smmintrin.h>\n+\n+#define VEC_T __m128\n+#define FP_T float\n+\n+#define ROUND_INTRIN(x, y, mode) _mm_round_ss (x, y, mode)\n+\n+#include \"sse4_1-round-data.h\"\n+\n+static struct data2 data[] = {\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = {  0.00, IGNORED, IGNORED, IGNORED } } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = {  0.25, IGNORED, IGNORED, IGNORED } } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = {  0.50, IGNORED, IGNORED, IGNORED } } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = {  0.75, IGNORED, IGNORED, IGNORED } } },\n+\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = {  0x1.fffff8p+21, IGNORED, IGNORED, IGNORED } } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = {  0x1.fffffap+21, IGNORED, IGNORED, IGNORED } } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = {  0x1.fffffcp+21, IGNORED, IGNORED, IGNORED } } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = {  0x1.fffffep+21, IGNORED, IGNORED, IGNORED } } },\n+\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = {  0x1.fffffap+22, IGNORED, IGNORED, IGNORED } } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = {  0x1.fffffcp+22, IGNORED, IGNORED, IGNORED } } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = {  0x1.fffffep+22, IGNORED, IGNORED, IGNORED } } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = {  0x1.fffffep+23, IGNORED, IGNORED, IGNORED } } },\n+\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = { -0x1.fffffep+23, IGNORED, IGNORED, IGNORED } } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = { -0x1.fffffep+22, IGNORED, IGNORED, IGNORED } } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = { -0x1.fffffcp+22, IGNORED, IGNORED, IGNORED } } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = { -0x1.fffffap+22, IGNORED, IGNORED, IGNORED } } },\n+\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = { -0x1.fffffep+21, IGNORED, IGNORED, IGNORED } } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = { -0x1.fffffcp+21, IGNORED, IGNORED, IGNORED } } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = { -0x1.fffffap+21, IGNORED, IGNORED, IGNORED } } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = { -0x1.fffff8p+21, IGNORED, IGNORED, IGNORED } } },\n+\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = { -1.00, IGNORED, IGNORED, IGNORED } } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = { -0.75, IGNORED, IGNORED, IGNORED } } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = { -0.50, IGNORED, IGNORED, IGNORED } } },\n+  { .value1 = { .f = { IGNORED, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+    .value2 = { .f = { -0.25, IGNORED, IGNORED, IGNORED } } }\n+};\n+\n+static union value answers_NEAREST_INT[] = {\n+  { .f = {  0.00, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = {  0.00, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = {  0.00, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = {  1.00, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+\n+  { .f = {  0x1.fffff8p+21, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = {  0x1.fffff8p+21, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = {  0x1.000000p+22, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = {  0x1.000000p+22, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+\n+  { .f = {  0x1.fffff8p+22, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = {  0x1.fffffcp+22, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = {  0x1.000000p+23, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = {  0x1.fffffep+23, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+\n+  { .f = { -0x1.fffffep+23, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = { -0x1.000000p+23, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = { -0x1.fffffcp+22, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = { -0x1.fffff8p+22, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+\n+  { .f = { -0x1.000000p+22, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = { -0x1.000000p+22, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = { -0x1.fffff8p+21, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = { -0x1.fffff8p+21, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+\n+  { .f = { -1.00, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = { -1.00, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = { -0.00, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = { -0.00, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } }\n+};\n+\n+static union value answers_NEG_INF[] = {\n+  { .f = {  0.00, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = {  0.00, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = {  0.00, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = {  0.00, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+\n+  { .f = {  0x1.fffff8p+21, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = {  0x1.fffff8p+21, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = {  0x1.fffff8p+21, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = {  0x1.fffff8p+21, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+\n+  { .f = {  0x1.fffff8p+22, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = {  0x1.fffffcp+22, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = {  0x1.fffffcp+22, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = {  0x1.fffffep+23, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+\n+  { .f = { -0x1.fffffep+23, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = { -0x1.000000p+23, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = { -0x1.fffffcp+22, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = { -0x1.fffffcp+22, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+\n+  { .f = { -0x1.000000p+22, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = { -0x1.000000p+22, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = { -0x1.000000p+22, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = { -0x1.fffff8p+21, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+\n+  { .f = { -1.00, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = { -1.00, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = { -1.00, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = { -1.00, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } }\n+};\n+\n+static union value answers_POS_INF[] = {\n+  { .f = {  0.00, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = {  1.00, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = {  1.00, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = {  1.00, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+\n+  { .f = {  0x1.fffff8p+21, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = {  0x1.000000p+22, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = {  0x1.000000p+22, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = {  0x1.000000p+22, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+\n+  { .f = {  0x1.fffffcp+22, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = {  0x1.fffffcp+22, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = {  0x1.000000p+23, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = {  0x1.fffffep+23, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+\n+  { .f = { -0x1.fffffep+23, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = { -0x1.fffffcp+22, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = { -0x1.fffffcp+22, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = { -0x1.fffff8p+22, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+\n+  { .f = { -0x1.fffff8p+21, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = { -0x1.fffff8p+21, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = { -0x1.fffff8p+21, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = { -0x1.fffff8p+21, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+\n+  { .f = { -1.00, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = {  0.00, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = {  0.00, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = {  0.00, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } }\n+};\n+\n+static union value answers_ZERO[] = {\n+  { .f = {  0.00, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = {  0.00, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = {  0.00, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = {  0.00, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+\n+  { .f = {  0x1.fffff8p+21, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = {  0x1.fffff8p+21, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = {  0x1.fffff8p+21, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = {  0x1.fffff8p+21, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+\n+  { .f = {  0x1.fffff8p+22, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = {  0x1.fffffcp+22, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = {  0x1.fffffcp+22, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = {  0x1.fffffep+23, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+\n+  { .f = { -0x1.fffffep+23, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = { -0x1.fffffcp+22, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = { -0x1.fffffcp+22, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = { -0x1.fffff8p+22, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+\n+  { .f = { -0x1.fffff8p+21, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = { -0x1.fffff8p+21, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = { -0x1.fffff8p+21, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = { -0x1.fffff8p+21, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+\n+  { .f = { -1.00, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = {  0.00, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = {  0.00, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } },\n+  { .f = {  0.00, PASSTHROUGH, PASSTHROUGH, PASSTHROUGH } }\n+};\n+\n+union value *answers[] = {\n+  answers_NEAREST_INT,\n+  answers_NEG_INF,\n+  answers_POS_INF,\n+  answers_ZERO,\n+  0 /* CUR_DIRECTION answers depend on current rounding mode.  */\n+};\n+\n+#include \"sse4_1-round3.h\""}]}