{"sha": "f70c18524221dcefa6cd26cee7b55503181bd912", "node_id": "C_kwDOANBUbNoAKGY3MGMxODUyNDIyMWRjZWZhNmNkMjZjZWU3YjU1NTAzMTgxYmQ5MTI", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-07-13T18:02:08Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-07-13T18:02:08Z"}, "message": "c++: non-dependent call to consteval operator [PR105912]\n\nHere we're crashing when substituting a non-dependent call to a\nconsteval operator, whose CALL_EXPR_OPERATOR_SYNTAX flag we try to\npropagate to the result, but the result isn't a CALL_EXPR since the\nselected function is consteval.  This patch fixes this by checking the\nresult of extract_call_expr accordingly.  (Note that we can't check\nDECL_IMMEDIATE_FUNCTION_P here because we don't know which function was\nselected by overload resolution from here.)\n\n\tPR c++/105912\n\ngcc/cp/ChangeLog:\n\n\t* pt.cc (tsubst_copy_and_build) <case CALL_EXPR>: Guard against\n\tNULL_TREE extract_call_expr result.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/consteval31.C: New test.", "tree": {"sha": "1690ad6b63b5c02a45054a0b423cdd42aed0c404", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1690ad6b63b5c02a45054a0b423cdd42aed0c404"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f70c18524221dcefa6cd26cee7b55503181bd912", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f70c18524221dcefa6cd26cee7b55503181bd912", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f70c18524221dcefa6cd26cee7b55503181bd912", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f70c18524221dcefa6cd26cee7b55503181bd912/comments", "author": null, "committer": null, "parents": [{"sha": "f07778f6f92111aa0abfd0f669b148a0bda537a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f07778f6f92111aa0abfd0f669b148a0bda537a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f07778f6f92111aa0abfd0f669b148a0bda537a9"}], "stats": {"total": 38, "additions": 32, "deletions": 6}, "files": [{"sha": "718dfa5bfa86e5e22a8482b95c2cab33e21e5ef4", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f70c18524221dcefa6cd26cee7b55503181bd912/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f70c18524221dcefa6cd26cee7b55503181bd912/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=f70c18524221dcefa6cd26cee7b55503181bd912", "patch": "@@ -21206,12 +21206,12 @@ tsubst_copy_and_build (tree t,\n \t    bool ord = CALL_EXPR_ORDERED_ARGS (t);\n \t    bool rev = CALL_EXPR_REVERSE_ARGS (t);\n \t    if (op || ord || rev)\n-\t      {\n-\t\tfunction = extract_call_expr (ret);\n-\t\tCALL_EXPR_OPERATOR_SYNTAX (function) = op;\n-\t\tCALL_EXPR_ORDERED_ARGS (function) = ord;\n-\t\tCALL_EXPR_REVERSE_ARGS (function) = rev;\n-\t      }\n+\t      if (tree call = extract_call_expr (ret))\n+\t\t{\n+\t\t  CALL_EXPR_OPERATOR_SYNTAX (call) = op;\n+\t\t  CALL_EXPR_ORDERED_ARGS (call) = ord;\n+\t\t  CALL_EXPR_REVERSE_ARGS (call) = rev;\n+\t\t}\n \t  }\n \n \tRETURN (ret);"}, {"sha": "85a4d1794e511fc83e8e663d35f2445c3d868969", "filename": "gcc/testsuite/g++.dg/cpp2a/consteval31.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f70c18524221dcefa6cd26cee7b55503181bd912/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval31.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f70c18524221dcefa6cd26cee7b55503181bd912/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval31.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval31.C?ref=f70c18524221dcefa6cd26cee7b55503181bd912", "patch": "@@ -0,0 +1,26 @@\n+// PR c++/105912\n+// { dg-do compile { target c++20 } }\n+\n+struct A {\n+  consteval A operator+() {\n+    return {};\n+  }\n+};\n+\n+consteval A operator~(A) {\n+  return {};\n+}\n+\n+consteval A operator+(A, A) {\n+  return {};\n+}\n+\n+template<class>\n+void f() {\n+  A a;\n+  ~a;\n+  a + a;\n+  +a;\n+}\n+\n+template void f<int>();"}]}