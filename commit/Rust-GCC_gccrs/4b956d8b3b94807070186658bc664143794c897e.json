{"sha": "4b956d8b3b94807070186658bc664143794c897e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGI5NTZkOGIzYjk0ODA3MDcwMTg2NjU4YmM2NjQxNDM3OTRjODk3ZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-23T10:20:25Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-23T10:20:25Z"}, "message": "[multiple changes]\n\n2009-07-23  Olivier Hainque  <hainque@adacore.com>\n\n\t* g-ssinty.ads: New unit. GNAT.SSE.Internal_Types. Factorize\n\tlow level internal type definitions for distinct higher level\n\tbinding development activities (user type definitions and\n\toperations).\n\t* gnat_rm.texi: Document it.\n\t* g-ssvety.ads: Use it.\n\t* gcc-interface/Makefile.in: (x86 32/64 linux, cygwin32 sections): Add\n\tg-ssinty.o to EXTRA_GNATRTL_NONTASKING_OBJS.\n\t* gcc-interface/utils.c (gnat_internal_attribute_table): Add entry\n\tfor the \"may_alias\" attribute.\n\n2009-07-23  Thomas Quinot  <quinot@adacore.com>\n\n\t* scos.ads: Minor typo fix\n\t* gcc-interface/decl.c (validate_alignment): For the case of an\n\timplicit array base type, look for alignment clause on first subtype.\n\tCode clean up.\n\n2009-07-23  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem.adb (Walk_Library_Units): Handle properly the case where a unit\n\tin the context depends on the spec of the main unit, by delaying\n\tprocessing of the main unit body until all other units have been\n\tprocessed.\n\nFrom-SVN: r149993", "tree": {"sha": "91328debdc2d744bf70f90dce39357bb331672a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91328debdc2d744bf70f90dce39357bb331672a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b956d8b3b94807070186658bc664143794c897e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b956d8b3b94807070186658bc664143794c897e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b956d8b3b94807070186658bc664143794c897e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b956d8b3b94807070186658bc664143794c897e/comments", "author": null, "committer": null, "parents": [{"sha": "f8c6086ba8474e5997bec4d1f9c44e1ee6a7d601", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8c6086ba8474e5997bec4d1f9c44e1ee6a7d601", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8c6086ba8474e5997bec4d1f9c44e1ee6a7d601"}], "stats": {"total": 262, "additions": 200, "deletions": 62}, "files": [{"sha": "dc4d8a5d1bb0349e2ae1d6ba0a5a1c195ba143e3", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b956d8b3b94807070186658bc664143794c897e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b956d8b3b94807070186658bc664143794c897e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4b956d8b3b94807070186658bc664143794c897e", "patch": "@@ -1,3 +1,30 @@\n+2009-07-23  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* g-ssinty.ads: New unit. GNAT.SSE.Internal_Types. Factorize\n+\tlow level internal type definitions for distinct higher level\n+\tbinding development activities (user type definitions and\n+\toperations).\n+\t* gnat_rm.texi: Document it.\n+\t* g-ssvety.ads: Use it.\n+\t* gcc-interface/Makefile.in: (x86 32/64 linux, cygwin32 sections): Add\n+\tg-ssinty.o to EXTRA_GNATRTL_NONTASKING_OBJS.\n+\t* gcc-interface/utils.c (gnat_internal_attribute_table): Add entry\n+\tfor the \"may_alias\" attribute.\n+\n+2009-07-23  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* scos.ads: Minor typo fix\n+\t* gcc-interface/decl.c (validate_alignment): For the case of an\n+\timplicit array base type, look for alignment clause on first subtype.\n+\tCode clean up.\n+\n+2009-07-23  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem.adb (Walk_Library_Units): Handle properly the case where a unit\n+\tin the context depends on the spec of the main unit, by delaying\n+\tprocessing of the main unit body until all other units have been\n+\tprocessed.\n+\n 2009-07-23  Arnaud Charlet  <charlet@adacore.com>\n \n \t* a-convec.adb: Add comments about suspicious/subtle code."}, {"sha": "becdc7661d6012ed291e33b9266e8959aafb3d1c", "filename": "gcc/ada/g-ssinty.ads", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b956d8b3b94807070186658bc664143794c897e/gcc%2Fada%2Fg-ssinty.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b956d8b3b94807070186658bc664143794c897e/gcc%2Fada%2Fg-ssinty.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-ssinty.ads?ref=4b956d8b3b94807070186658bc664143794c897e", "patch": "@@ -0,0 +1,77 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--               G N A T . S S E . I N T E R N A L _ T Y P E S              --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--             Copyright (C) 2009, Free Software Foundation, Inc.           --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This unit exposes low level types to interface with the GCC vector\n+--  builtins directly. These are useful for the development of higher level\n+--  bindings to the reference Intel intrinsic operations.\n+\n+--  See GNAT.SSE for the list of targets where this facility is supported.\n+\n+package GNAT.SSE.Internal_Types is\n+\n+   type v4sf is private;\n+   type v2df is private;\n+   type v2di is private;\n+\n+private\n+\n+   --  GCC'wise, vector operations operate on objects of vector modes,\n+   --  conveyed through vector types obtained in C by setting an attribute on\n+   --  what looks like a component typedef.  For example, in xmmintrin.h:\n+   --\n+   --    typedef float __v4sf __attribute__ ((__vector_size__ (16)));\n+\n+   --  Applying a 'vector_size' machine attribute in Ada, as in\n+   --\n+   --    type Vf is new Float;\n+   --    pragma Machine_Attribute (Vf,  \"vector_size\", 16);\n+   --\n+   --  makes Vf a 16bytes long V4SFmode GCC type but the effect on the type\n+   --  layout is not conveyed to the front-end.  The latter still sees \"Vf\"\n+   --  as a 4bytes long single float, with numerous potential pitfalls.\n+\n+   --  We devised a 'vector_type' alternate machine attribute, which applies\n+   --  to array types of the proper size and alignment from the front-end\n+   --  perspective:\n+\n+   type v4sf is array (1 .. 4) of GNAT.SSE.Float32;\n+   for v4sf'Alignment use GNAT.SSE.VECTOR_ALIGN;\n+   pragma Machine_Attribute (v4sf, \"vector_type\");\n+\n+   type v2di is array (1 .. 2) of GNAT.SSE.Integer64;\n+   for v2di'Alignment use GNAT.SSE.VECTOR_ALIGN;\n+   pragma Machine_Attribute (v2di, \"vector_type\");\n+\n+   type v2df is array (1 .. 2) of GNAT.SSE.Float64;\n+   for v2df'Alignment use GNAT.SSE.VECTOR_ALIGN;\n+   pragma Machine_Attribute (v2df, \"vector_type\");\n+\n+end GNAT.SSE.Internal_Types;"}, {"sha": "42cd24bc6ee152c8aaaf4925264913e8d6ba49c4", "filename": "gcc/ada/g-ssvety.ads", "status": "modified", "additions": 29, "deletions": 48, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b956d8b3b94807070186658bc664143794c897e/gcc%2Fada%2Fg-ssvety.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b956d8b3b94807070186658bc664143794c897e/gcc%2Fada%2Fg-ssvety.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-ssvety.ads?ref=4b956d8b3b94807070186658bc664143794c897e", "patch": "@@ -30,7 +30,9 @@\n ------------------------------------------------------------------------------\n \n --  This unit exposes the Ada __m128 like data types to represent the contents\n---  of SSE registers, for use by the SSE intrinsics.\n+--  of SSE registers, for use by bindings to the SSE intrinsic operations.\n+\n+--  See GNAT.SSE for the list of targets where this facility is supported.\n \n package GNAT.SSE.Vector_Types is\n \n@@ -49,77 +51,56 @@ package GNAT.SSE.Vector_Types is\n    --     * Use new data types only with the respective intrinsics described\n    --       in this documentation. >>\n \n-   type M128 is private;   --  SSE >= 1\n-   type M128d is private;  --  SSE >= 2\n-   type M128i is private;  --  SSE >= 2\n+   type m128 is private;   --  SSE >= 1\n+   type m128d is private;  --  SSE >= 2\n+   type m128i is private;  --  SSE >= 2\n \n private\n-   --  GCC'wise, vector operations operate on objects of vector modes,\n-   --  conveyed through vector types obtained by setting an attribute on what\n-   --  looks like a component typedef.  For example, in C (xmmintrin.h):\n-   --\n-   --    typedef float __v4sf __attribute__ ((__vector_size__ (16)));\n \n-   --  We can obtain the same low level GCC effect in Ada with\n-   --  Machine_Attribute pragmas, as in\n+   --  Each of the m128 types maps to a specific vector_type with\n+   --  an extra \"may_alias\" attribute as in GCC's definitions for C,\n+   --  for instance in xmmintrin.h:\n    --\n-   --    type Vf is new Float;\n-   --    pragma Machine_Attribute (Vf,  \"vector_size\", 16);\n+   --  /* The Intel API is flexible enough that we must allow aliasing\n+   --     with other vector types, and their scalar components.  */\n+   --  typedef float __m128\n+   --    __attribute__ ((__vector_size__ (16), __may_alias__));\n    --\n-   --  which makes Vf a 16bytes long V4SFmode type for GCC. The effect on the\n-   --  type layout is not conveyed to the front-end, however, so the latter\n-   --  still sees \"Vf\" as a 4bytes long single float. This leads to numerous\n-   --  potential pitfalls if this type is directly exposed user land, so we\n-   --  add wrapper records with rep clauses to compensate.\n-\n-   --  The wrapper records all have a single component of the twisted low\n-   --  level type, so they inherit the mode while the rep clauses convey the\n-   --  size and alignment information to the front-end.\n+   --  /* Internal data types for implementing the intrinsics.  */\n+   --  typedef float __v4sf __attribute__ ((__vector_size__ (16)));\n \n    ------------\n    --  M128  --\n    ------------\n \n    --  << The __m128 data type can hold four 32-bit floating-point values. >>\n \n-   type V4sf is new Float32;\n-   pragma Machine_Attribute (V4sf, \"vector_size\", VECTOR_BYTES);\n-\n-   type M128 is record\n-      Value : V4sf;\n-   end record;\n-   for M128'Size use VECTOR_BYTES * 8;\n-   for M128'Alignment use VECTOR_ALIGN;\n+   type m128 is array (1 .. 4) of Float32;\n+   for m128'Alignment use VECTOR_ALIGN;\n+   pragma Machine_Attribute (m128, \"vector_type\");\n+   pragma Machine_Attribute (m128, \"may_alias\");\n \n    -------------\n-   --  M128d  --\n+   --  m128d  --\n    -------------\n \n    --  << The __m128d data type can hold two 64-bit floating-point values. >>\n \n-   type V2df is new Float64;\n-   pragma Machine_Attribute (V2df, \"vector_size\", VECTOR_BYTES);\n-\n-   type M128d is record\n-      Value : V2df;\n-   end record;\n-   for M128d'Size use VECTOR_BYTES * 8;\n-   for M128d'Alignment use VECTOR_ALIGN;\n+   type m128d is array (1 .. 2) of Float64;\n+   for m128d'Alignment use VECTOR_ALIGN;\n+   pragma Machine_Attribute (m128d, \"vector_type\");\n+   pragma Machine_Attribute (m128d, \"may_alias\");\n \n    -------------\n-   --  M128i  --\n+   --  m128i  --\n    -------------\n \n    --  << The __m128i data type can hold sixteen 8-bit, eight 16-bit, four\n    --     32-bit, or two 64-bit integer values. >>\n \n-   type V2di is new Integer64;\n-   pragma Machine_Attribute (V2di, \"vector_size\", VECTOR_BYTES);\n-\n-   type M128i is record\n-      Value : V2di;\n-   end record;\n-   for M128i'Size use VECTOR_BYTES * 8;\n-   for M128i'Alignment use VECTOR_ALIGN;\n+   type m128i is array (1 .. 2) of Integer64;\n+   for m128i'Alignment use VECTOR_ALIGN;\n+   pragma Machine_Attribute (m128i, \"vector_type\");\n+   pragma Machine_Attribute (m128i, \"may_alias\");\n \n end GNAT.SSE.Vector_Types;"}, {"sha": "0e8080853fab838771805d1819052e21a2449903", "filename": "gcc/ada/gcc-interface/Makefile.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b956d8b3b94807070186658bc664143794c897e/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b956d8b3b94807070186658bc664143794c897e/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMakefile.in?ref=4b956d8b3b94807070186658bc664143794c897e", "patch": "@@ -1052,7 +1052,7 @@ ifeq ($(strip $(filter-out %86 linux%,$(arch) $(osys))),)\n     endif\n \n     THREADSLIB = -lpthread\n-    EXTRA_GNATRTL_NONTASKING_OBJS=g-sse.o g-ssvety.o\n+    EXTRA_GNATRTL_NONTASKING_OBJS=g-sse.o g-ssvety.o g-ssinty.o\n     EXTRA_GNATRTL_TASKING_OBJS=s-linux.o\n   endif\n \n@@ -1593,7 +1593,7 @@ ifeq ($(strip $(filter-out cygwin32% mingw32% pe,$(osys))),)\n     endif\n \n     EXTRA_GNATRTL_NONTASKING_OBJS = \\\n-\ts-win32.o s-winext.o g-regist.o g-sse.o g-ssvety.o\n+\ts-win32.o s-winext.o g-regist.o g-sse.o g-ssvety.o g-ssinty.o\n     EXTRA_GNATRTL_TASKING_OBJS = a-exetim.o\n \n     MISCLIB = -lws2_32\n@@ -2003,7 +2003,7 @@ ifeq ($(strip $(filter-out %x86_64 linux%,$(arch) $(osys))),)\n     mlib-tgt-specific.adb<mlib-tgt-specific-linux.adb \\\n     indepsw.adb<indepsw-gnu.adb\n \n-  EXTRA_GNATRTL_NONTASKING_OBJS=g-sse.o g-ssvety.o\n+  EXTRA_GNATRTL_NONTASKING_OBJS=g-sse.o g-ssvety.o g-ssinty.o\n   EXTRA_GNATRTL_TASKING_OBJS=s-linux.o\n   EH_MECHANISM=-gcc\n   THREADSLIB=-lpthread"}, {"sha": "1548f6de8bd68ca692db0a2a67fa5fedfd0c33f7", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b956d8b3b94807070186658bc664143794c897e/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b956d8b3b94807070186658bc664143794c897e/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=4b956d8b3b94807070186658bc664143794c897e", "patch": "@@ -122,6 +122,7 @@ const struct attribute_spec gnat_internal_attribute_table[] =\n   { \"type generic\", 0, 0,  false, true, true, handle_type_generic_attribute },\n \n   { \"vector_size\",  1, 1,  false, true, false,  handle_vector_size_attribute },\n+  { \"may_alias\",    0, 0, false, true, false, NULL },\n \n   /* ??? format and format_arg are heavy and not supported, which actually\n      prevents support for stdio builtins, which we however declare as part"}, {"sha": "14a7a8f733f0f280d14ed040f096eb7111eae748", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b956d8b3b94807070186658bc664143794c897e/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b956d8b3b94807070186658bc664143794c897e/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=4b956d8b3b94807070186658bc664143794c897e", "patch": "@@ -382,6 +382,7 @@ The GNAT Library\n * GNAT.Spitbol.Table_Integer (g-sptain.ads)::\n * GNAT.Spitbol.Table_VString (g-sptavs.ads)::\n * GNAT.SSE (g-sse.ads)::\n+* GNAT.SSE.Internal_Types (g-ssinty.ads)::\n * GNAT.SSE.Vector_Types (g-ssvety.ads)::\n * GNAT.Strings (g-string.ads)::\n * GNAT.String_Split (g-strspl.ads)::\n@@ -13571,6 +13572,7 @@ of GNAT, and will generate a warning message.\n * GNAT.Spitbol.Table_Integer (g-sptain.ads)::\n * GNAT.Spitbol.Table_VString (g-sptavs.ads)::\n * GNAT.SSE (g-sse.ads)::\n+* GNAT.SSE.Internal_Types (g-ssinty.ads)::\n * GNAT.SSE.Vector_Types (g-ssvety.ads)::\n * GNAT.Strings (g-string.ads)::\n * GNAT.String_Split (g-strspl.ads)::\n@@ -14641,6 +14643,15 @@ the Intel(r) Streaming SIMD Extensions with GNAT on the x86 family of\n targets.  It exposes vector component types together with a general\n introduction to the binding contents and use.\n \n+@node GNAT.SSE.Internal_Types (g-ssinty.ads)\n+@section @code{GNAT.SSE.Internal_Types} (@file{g-ssinty.ads})\n+@cindex @code{GNAT.SSE.Internal_Types} (@file{g-ssinty.ads})\n+\n+@noindent\n+Low level GCC vector types for direct use of the vector related\n+builtins, required for the development of higher level bindings to SSE\n+intrinsic operations.\n+\n @node GNAT.SSE.Vector_Types (g-ssvety.ads)\n @section @code{GNAT.SSE.Vector_Types} (@file{g-ssvety.ads})\n @cindex @code{GNAT.SSE.Vector_Types} (@file{g-ssvety.ads})"}, {"sha": "15c20538e81fb04ec17d16bba8108fc458d2249e", "filename": "gcc/ada/scos.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b956d8b3b94807070186658bc664143794c897e/gcc%2Fada%2Fscos.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b956d8b3b94807070186658bc664143794c897e/gcc%2Fada%2Fscos.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscos.ads?ref=4b956d8b3b94807070186658bc664143794c897e", "patch": "@@ -103,7 +103,7 @@ package SCOs is\n    --  Statement lines\n \n    --    These lines correspond to a sequence of one or more statements which\n-   --    are always exeecuted in sequence, The first statement may be an entry\n+   --    are always executed in sequence, The first statement may be an entry\n    --    point (e.g. statement after a label), and the last statement may be\n    --    an exit point (e.g. an exit statement), but no other entry or exit\n    --    points may occur within the sequence of statements. The idea is that"}, {"sha": "f60c14385de87eb5b7227712c416c48ca4f950d8", "filename": "gcc/ada/sem.adb", "status": "modified", "additions": 51, "deletions": 10, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b956d8b3b94807070186658bc664143794c897e/gcc%2Fada%2Fsem.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b956d8b3b94807070186658bc664143794c897e/gcc%2Fada%2Fsem.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.adb?ref=4b956d8b3b94807070186658bc664143794c897e", "patch": "@@ -107,7 +107,6 @@ package body Sem is\n    procedure Analyze (N : Node_Id) is\n    begin\n       Debug_A_Entry (\"analyzing  \", N);\n-\n       --  Immediate return if already analyzed\n \n       if Analyzed (N) then\n@@ -1510,6 +1509,12 @@ package body Sem is\n       --  after we have fully processed X, and is used only for debugging\n       --  printouts and assertions.\n \n+      Do_Main : Boolean := False;\n+      --  Flag to delay processing the main body until after all other units.\n+      --  This is needed because the spec of the main unit may appear in the\n+      --  context of some other unit. We do not want this to force processing\n+      --  of the main body before all other units have been processed.\n+\n       procedure Do_Action (CU : Node_Id; Item : Node_Id);\n       --  Calls Action, with some validity checks\n \n@@ -1712,7 +1717,8 @@ package body Sem is\n \n          if not Nkind_In (Item, N_Package_Body, N_Subprogram_Body)\n            or else Acts_As_Spec (CU)\n-           or else CU = Cunit (Main_Unit)\n+           or else (CU = Cunit (Main_Unit) and then Do_Main)\n+\n          then\n \n             Do_Action (CU, Item);\n@@ -1733,14 +1739,47 @@ package body Sem is\n          --  be possible to restrict the list to those bodies that are used\n          --  in the main unit. Possible optimization ???\n \n+         --  Such bodies can also appear in a circular dependency list, where\n+         --  spec A depends on spec B and the body of B depends on spec A.\n+         --  This is not an elaboration issue, but body B must be excluded\n+         --  from the processing.\n+\n          if Nkind (Item) = N_Package_Declaration then\n             declare\n                Body_Unit : constant Node_Id := Library_Unit (CU);\n \n+               function Circular_Dependence (B : Node_Id) return Boolean;\n+               --  Check whether this body depends on a spec that is pending,\n+               --  that is to say has been seen but not processed yet.\n+\n+               function Circular_Dependence (B : Node_Id) return Boolean is\n+                  Item : Node_Id;\n+                  UN   : Unit_Number_Type;\n+\n+               begin\n+                  Item := First (Context_Items (B));\n+                  while Present (Item) loop\n+                     if Nkind (Item) = N_With_Clause then\n+                        UN := Get_Cunit_Unit_Number (Library_Unit (Item));\n+\n+                        if Seen (UN)\n+                          and then not Done (UN)\n+                        then\n+                           return True;\n+                        end if;\n+                     end if;\n+\n+                     Next (Item);\n+                  end loop;\n+\n+                  return False;\n+               end Circular_Dependence;\n+\n             begin\n                if Present (Body_Unit)\n                  and then Body_Unit /= Cunit (Main_Unit)\n                  and then Unit_Num /= Get_Source_Unit (System_Aux_Id)\n+                 and then not Circular_Dependence (Body_Unit)\n                then\n                   Do_Unit_And_Dependents (Body_Unit, Unit (Body_Unit));\n                   Do_Action (Body_Unit, Unit (Body_Unit));\n@@ -1801,16 +1840,13 @@ package body Sem is\n \n             case Nkind (N) is\n \n-               --  If it's a body, then ignore it, unless it's the main unit\n-               --  Otherwise bodies appear in the list because of inlining or\n-               --  instantiations, and they are processed immediately after\n-               --  the corresponding specs.\n+               --  If it's a body, ignore it. Bodies appear in the list only\n+               --  because of inlining/instantiations, and they are processed\n+               --  immediately after the corresponding specs.\n+               --  The main unit is processed separately after all other units.\n \n                when N_Package_Body | N_Subprogram_Body =>\n-\n-                  if CU = Cunit (Main_Unit) then\n-                     Do_Unit_And_Dependents (CU, N);\n-                  end if;\n+                  null;\n \n                --  It's a spec, so just do it\n \n@@ -1822,6 +1858,11 @@ package body Sem is\n          Next_Elmt (Cur);\n       end loop;\n \n+      if not Done (Main_Unit) then\n+         Do_Main := True;\n+         Do_Unit_And_Dependents (Cunit (Main_Unit), Unit (Cunit (Main_Unit)));\n+      end if;\n+\n       if Debug_Unit_Walk then\n          if Done /= (Done'Range => True) then\n             Write_Eol;"}]}