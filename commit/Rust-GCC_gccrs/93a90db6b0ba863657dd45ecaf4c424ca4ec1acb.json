{"sha": "93a90db6b0ba863657dd45ecaf4c424ca4ec1acb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTNhOTBkYjZiMGJhODYzNjU3ZGQ0NWVjYWY0YzQyNGNhNGVjMWFjYg==", "commit": {"author": {"name": "Andreas Krebbel", "email": "Andreas.Krebbel@de.ibm.com", "date": "2011-10-24T20:14:35Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2011-10-24T20:14:35Z"}, "message": "tree-ssa-strlen.c (get_string_length): Change assertion to STPCPY.\n\n2011-10-24  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n\n\t* tree-ssa-strlen.c (get_string_length): Change assertion to STPCPY.\n\t(zero_length_string): Change assertion to accept strinfo without\n\tlength but with stmt instead.\n\tSet the endptr pointer also if starting a new chain.\n\t(adjust_related_strinfos): Ignore strinfos marked for delayed\n\tlength computation.\n\t(handle_builtin_strcpy): Mark earlier strinfo elements also for\n\tdelayed length computation.\n\n2011-10-24  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n\n\t* gcc.dg/strlenopt-22.c: New testcase.\n\t* gcc.dg/strlenopt-4.c: Change scan value for s390(x).\n\nFrom-SVN: r180402", "tree": {"sha": "bf9957eca52822e3a25fbdd6aed21bf26bfc9eea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf9957eca52822e3a25fbdd6aed21bf26bfc9eea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93a90db6b0ba863657dd45ecaf4c424ca4ec1acb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93a90db6b0ba863657dd45ecaf4c424ca4ec1acb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93a90db6b0ba863657dd45ecaf4c424ca4ec1acb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93a90db6b0ba863657dd45ecaf4c424ca4ec1acb/comments", "author": null, "committer": null, "parents": [{"sha": "980889d81482ecc88280262cdd101471f8e3c511", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/980889d81482ecc88280262cdd101471f8e3c511", "html_url": "https://github.com/Rust-GCC/gccrs/commit/980889d81482ecc88280262cdd101471f8e3c511"}], "stats": {"total": 115, "additions": 104, "deletions": 11}, "files": [{"sha": "bd04d776c1873bcfc2b268e76690bd3cea2d300d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93a90db6b0ba863657dd45ecaf4c424ca4ec1acb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93a90db6b0ba863657dd45ecaf4c424ca4ec1acb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=93a90db6b0ba863657dd45ecaf4c424ca4ec1acb", "patch": "@@ -1,3 +1,14 @@\n+2011-10-24  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n+\n+\t* tree-ssa-strlen.c (get_string_length): Change assertion to STPCPY.\n+\t(zero_length_string): Change assertion to accept strinfo without\n+\tlength but with stmt instead.\n+\tSet the endptr pointer also if starting a new chain.\n+\t(adjust_related_strinfos): Ignore strinfos marked for delayed\n+\tlength computation.\n+\t(handle_builtin_strcpy): Mark earlier strinfo elements also for\n+\tdelayed length computation.\n+\n 2011-10-24  Georg-Johann Lay  <avr@gjlay.de>\n \n \tPR target/50820"}, {"sha": "0e7ee4c98e2d5037f30d8f00587e05c4c9d30113", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93a90db6b0ba863657dd45ecaf4c424ca4ec1acb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93a90db6b0ba863657dd45ecaf4c424ca4ec1acb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=93a90db6b0ba863657dd45ecaf4c424ca4ec1acb", "patch": "@@ -1,3 +1,8 @@\n+2011-10-24  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n+\n+\t* gcc.dg/strlenopt-22.c: New testcase.\n+\t* gcc.dg/strlenopt-4.c: Change scan value for s390(x).\n+\n 2011-10-24  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.target/i386/sse-5.c (dg-options): Add -mno-sse."}, {"sha": "541bfdce467f8f617b1f8311c705dfad014b961c", "filename": "gcc/testsuite/gcc.dg/strlenopt-22.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93a90db6b0ba863657dd45ecaf4c424ca4ec1acb/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93a90db6b0ba863657dd45ecaf4c424ca4ec1acb/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-22.c?ref=93a90db6b0ba863657dd45ecaf4c424ca4ec1acb", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fdump-tree-strlen\" } */\n+\n+#define USE_GNU\n+#include \"strlenopt.h\"\n+\n+__attribute__((noinline, noclone)) size_t\n+bar (char *p, char *q)\n+{\n+  size_t l1, l2, l3;\n+  char *r = strchr (p, '\\0');\n+  strcpy (r, \"abcde\");\n+  char *s = strchr (r, '\\0');\n+  strcpy (s, q);\n+  l1 = strlen (p);\n+  l2 = strlen (r);\n+  l3 = strlen (s);\n+  return l1 + l2 + l3;\n+}\n+\n+int\n+main ()\n+{\n+  char buf[16] = \"01234\";\n+\n+  if (bar (buf, \"56789\") != 30)\n+    abort ();\n+\n+  if (memcmp (buf, \"01234abcde56789\", 16) != 0)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"strlen \\\\(\" 0 \"strlen\" } } */\n+/* { dg-final { scan-tree-dump-times \"memcpy \\\\(\" 1 \"strlen\" } } */\n+/* { dg-final { scan-tree-dump-times \"strcpy \\\\(\" 0 \"strlen\" } } */\n+/* { dg-final { scan-tree-dump-times \"strcat \\\\(\" 0 \"strlen\" } } */\n+/* { dg-final { scan-tree-dump-times \"strchr \\\\(\" 1 \"strlen\" } } */\n+/* { dg-final { scan-tree-dump-times \"stpcpy \\\\(\" 1 \"strlen\" } } */\n+/* { dg-final { cleanup-tree-dump \"strlen\" } } */"}, {"sha": "5997d31985fab3cd7865c555af6e6034b2cb4051", "filename": "gcc/testsuite/gcc.dg/strlenopt-4.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93a90db6b0ba863657dd45ecaf4c424ca4ec1acb/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93a90db6b0ba863657dd45ecaf4c424ca4ec1acb/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-4.c?ref=93a90db6b0ba863657dd45ecaf4c424ca4ec1acb", "patch": "@@ -66,10 +66,16 @@ main ()\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"strlen \\\\(\" 3 \"strlen\" } } */\n+/* For targets providing a movstr pattern strcat is already decomposed\n+   into strlen + strcpy by fold_builtin_strcat.  */\n+\n+/* { dg-final { scan-tree-dump-times \"strlen \\\\(\" 3 \"strlen\" { target { ! s390*-*-* } } } } */\n+/* { dg-final { scan-tree-dump-times \"strlen \\\\(\" 6 \"strlen\" { target s390*-*-* } } } */\n /* { dg-final { scan-tree-dump-times \"memcpy \\\\(\" 4 \"strlen\" } } */\n-/* { dg-final { scan-tree-dump-times \"strcpy \\\\(\" 3 \"strlen\" } } */\n-/* { dg-final { scan-tree-dump-times \"strcat \\\\(\" 3 \"strlen\" } } */\n+/* { dg-final { scan-tree-dump-times \"strcpy \\\\(\" 3 \"strlen\" { target { ! s390*-*-* } } } } */\n+/* { dg-final { scan-tree-dump-times \"strcpy \\\\(\" 6 \"strlen\" { target s390*-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"strcat \\\\(\" 3 \"strlen\" { target { ! s390*-*-* } } } } */\n+/* { dg-final { scan-tree-dump-times \"strcat \\\\(\" 0 \"strlen\" { target s390*-*-* } } } */\n /* { dg-final { scan-tree-dump-times \"strchr \\\\(\" 0 \"strlen\" } } */\n /* { dg-final { scan-tree-dump-times \"stpcpy \\\\(\" 0 \"strlen\" } } */\n /* { dg-final { cleanup-tree-dump \"strlen\" } } */"}, {"sha": "72da15e9893e53960bda14de7fc7c505b7bdcbc8", "filename": "gcc/tree-ssa-strlen.c", "status": "modified", "additions": 38, "deletions": 8, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93a90db6b0ba863657dd45ecaf4c424ca4ec1acb/gcc%2Ftree-ssa-strlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93a90db6b0ba863657dd45ecaf4c424ca4ec1acb/gcc%2Ftree-ssa-strlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.c?ref=93a90db6b0ba863657dd45ecaf4c424ca4ec1acb", "patch": "@@ -397,7 +397,7 @@ get_string_length (strinfo si)\n       callee = gimple_call_fndecl (stmt);\n       gcc_assert (callee && DECL_BUILT_IN_CLASS (callee) == BUILT_IN_NORMAL);\n       lhs = gimple_call_lhs (stmt);\n-      gcc_assert (builtin_decl_implicit_p (BUILT_IN_STRCPY));\n+      gcc_assert (builtin_decl_implicit_p (BUILT_IN_STPCPY));\n       /* unshare_strinfo is intentionally not called here.  The (delayed)\n \t transformation of strcpy or strcat into stpcpy is done at the place\n \t of the former strcpy/strcat call and so can affect all the strinfos\n@@ -588,13 +588,13 @@ zero_length_string (tree ptr, strinfo chainsi)\n \t\t  || si->prev != chainsi->idx)\n \t\tbreak;\n \t    }\n-\t  gcc_assert (chainsi->length);\n+\t  gcc_assert (chainsi->length || chainsi->stmt);\n \t  if (chainsi->endptr == NULL_TREE)\n \t    {\n \t      chainsi = unshare_strinfo (chainsi);\n \t      chainsi->endptr = ptr;\n \t    }\n-\t  if (integer_zerop (chainsi->length))\n+\t  if (chainsi->length && integer_zerop (chainsi->length))\n \t    {\n \t      if (chainsi->next)\n \t\t{\n@@ -626,6 +626,8 @@ zero_length_string (tree ptr, strinfo chainsi)\n       if (chainsi->first == 0)\n \tchainsi->first = chainsi->idx;\n       chainsi->next = idx;\n+      if (chainsi->endptr == NULL_TREE)\n+\tchainsi->endptr = ptr;\n       si->prev = chainsi->idx;\n       si->first = chainsi->first;\n       si->writable = chainsi->writable;\n@@ -654,11 +656,19 @@ adjust_related_strinfos (location_t loc, strinfo origsi, tree adj)\n \t  tree tem;\n \n \t  si = unshare_strinfo (si);\n-\t  gcc_assert (si->length);\n-\t  tem = fold_convert_loc (loc, TREE_TYPE (si->length), adj);\n-\t  si->length = fold_build2_loc (loc, PLUS_EXPR,\n-\t\t\t\t\tTREE_TYPE (si->length), si->length,\n-\t\t\t\t\ttem);\n+\t  if (si->length)\n+\t    {\n+\t      tem = fold_convert_loc (loc, TREE_TYPE (si->length), adj);\n+\t      si->length = fold_build2_loc (loc, PLUS_EXPR,\n+\t\t\t\t\t    TREE_TYPE (si->length), si->length,\n+\t\t\t\t\t    tem);\n+\t    }\n+\t  else if (si->stmt != NULL)\n+\t    /* Delayed length computation is unaffected.  */\n+\t    ;\n+\t  else\n+\t    gcc_unreachable ();\n+\n \t  si->endptr = NULL_TREE;\n \t  si->dont_invalidate = true;\n \t}\n@@ -1117,10 +1127,30 @@ handle_builtin_strcpy (enum built_in_function bcode, gimple_stmt_iterator *gsi)\n \n   if (dsi->length == NULL_TREE)\n     {\n+      strinfo chainsi;\n+\n       /* If string length of src is unknown, use delayed length\n \t computation.  If string lenth of dst will be needed, it\n \t can be computed by transforming this strcpy call into\n \t stpcpy and subtracting dst from the return value.  */\n+\n+      /* Look for earlier strings whose length could be determined if\n+\t this strcpy is turned into an stpcpy.  */\n+\n+      if (dsi->prev != 0 && (chainsi = verify_related_strinfos (dsi)) != NULL)\n+\t{\n+\t  for (; chainsi && chainsi != dsi; chainsi = get_strinfo (chainsi->next))\n+\t    {\n+\t      /* When setting a stmt for delayed length computation\n+\t\t prevent all strinfos through dsi from being\n+\t\t invalidated.  */\n+\t      chainsi = unshare_strinfo (chainsi);\n+\t      chainsi->stmt = stmt;\n+\t      chainsi->length = NULL_TREE;\n+\t      chainsi->endptr = NULL_TREE;\n+\t      chainsi->dont_invalidate = true;\n+\t    }\n+\t}\n       dsi->stmt = stmt;\n       return;\n     }"}]}