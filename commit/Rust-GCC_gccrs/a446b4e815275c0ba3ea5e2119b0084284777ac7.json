{"sha": "a446b4e815275c0ba3ea5e2119b0084284777ac7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQ0NmI0ZTgxNTI3NWMwYmEzZWE1ZTIxMTliMDA4NDI4NDc3N2FjNw==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2007-01-02T00:38:21Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2007-01-02T00:38:21Z"}, "message": "re PR middle-end/30311 (revision 120211 failed to compile perlbench)\n\ngcc:\n\tPR middle-end/30311\n\t* caller-save.c (add_stored_regs): Only handle SUBREGs if inner\n\tREG is a hard register.  Do not modify REG before calling\n\tsubreg_nregs.\n\t* rtlanal.c (subreg_get_info): Don't assert size of XMODE is a\n\tmultiple of the size of YMODE for certain lowpart cases.\n\ngcc/testsuite:\n\t* gcc.c-torture/compile/pr30311.c: New test.\n\nFrom-SVN: r120329", "tree": {"sha": "3a591d5196a5a6c1c2ecdc330d7d323242f600da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a591d5196a5a6c1c2ecdc330d7d323242f600da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a446b4e815275c0ba3ea5e2119b0084284777ac7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a446b4e815275c0ba3ea5e2119b0084284777ac7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a446b4e815275c0ba3ea5e2119b0084284777ac7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a446b4e815275c0ba3ea5e2119b0084284777ac7/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27c293ef97537edd7745e096ebf92c8e8b20d85b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27c293ef97537edd7745e096ebf92c8e8b20d85b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27c293ef97537edd7745e096ebf92c8e8b20d85b"}], "stats": {"total": 50, "additions": 44, "deletions": 6}, "files": [{"sha": "fad6cfb746c56e3ddc221f59ae7c01853bce0c7e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a446b4e815275c0ba3ea5e2119b0084284777ac7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a446b4e815275c0ba3ea5e2119b0084284777ac7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a446b4e815275c0ba3ea5e2119b0084284777ac7", "patch": "@@ -1,3 +1,12 @@\n+2007-01-02  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR middle-end/30311\n+\t* caller-save.c (add_stored_regs): Only handle SUBREGs if inner\n+\tREG is a hard register.  Do not modify REG before calling\n+\tsubreg_nregs.\n+\t* rtlanal.c (subreg_get_info): Don't assert size of XMODE is a\n+\tmultiple of the size of YMODE for certain lowpart cases.\n+\n 2007-01-01  Andrew Pinski  <pinskia@gmail.com>\n \n \tPR middle-end/30253"}, {"sha": "54f88a14d401f0bea7cb963a6f39dd3dcb70bf91", "filename": "gcc/caller-save.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a446b4e815275c0ba3ea5e2119b0084284777ac7/gcc%2Fcaller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a446b4e815275c0ba3ea5e2119b0084284777ac7/gcc%2Fcaller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcaller-save.c?ref=a446b4e815275c0ba3ea5e2119b0084284777ac7", "patch": "@@ -1,6 +1,6 @@\n /* Save and restore call-clobbered registers which are live across a call.\n-   Copyright (C) 1989, 1992, 1994, 1995, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+   Copyright (C) 1989, 1992, 1994, 1995, 1997, 1998, 1999, 2000,\n+   2001, 2002, 2003, 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -537,14 +537,15 @@ add_stored_regs (rtx reg, rtx setter, void *data)\n   if (GET_CODE (setter) == CLOBBER)\n     return;\n \n-  if (GET_CODE (reg) == SUBREG && REG_P (SUBREG_REG (reg)))\n+  if (GET_CODE (reg) == SUBREG\n+      && REG_P (SUBREG_REG (reg))\n+      && REGNO (SUBREG_REG (reg)) < FIRST_PSEUDO_REGISTER)\n     {\n       offset = subreg_regno_offset (REGNO (SUBREG_REG (reg)),\n \t\t\t\t    GET_MODE (SUBREG_REG (reg)),\n \t\t\t\t    SUBREG_BYTE (reg),\n \t\t\t\t    GET_MODE (reg));\n-      reg = SUBREG_REG (reg);\n-      regno = REGNO (reg) + offset;\n+      regno = REGNO (SUBREG_REG (reg)) + offset;\n       endregno = regno + subreg_nregs (reg);\n     }\n   else"}, {"sha": "2d156638b6d7212e7e27976e108722b946314a70", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a446b4e815275c0ba3ea5e2119b0084284777ac7/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a446b4e815275c0ba3ea5e2119b0084284777ac7/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=a446b4e815275c0ba3ea5e2119b0084284777ac7", "patch": "@@ -1,6 +1,6 @@\n /* Analyze RTL for GNU compiler.\n    Copyright (C) 1987, 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006 Free Software\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007 Free Software\n    Foundation, Inc.\n \n This file is part of GCC.\n@@ -3057,6 +3057,13 @@ subreg_get_info (unsigned int xregno, enum machine_mode xmode,\n     {\n       info->representable_p = true;\n       rknown = true;\n+\n+      if (offset == 0 || nregs_xmode == nregs_ymode)\n+\t{\n+\t  info->offset = 0;\n+\t  info->nregs = nregs_ymode;\n+\t  return;\n+\t}\n     }\n \n   /* This should always pass, otherwise we don't know how to verify"}, {"sha": "b636d4802a207d04bf789e861adf809a539a26fc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a446b4e815275c0ba3ea5e2119b0084284777ac7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a446b4e815275c0ba3ea5e2119b0084284777ac7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a446b4e815275c0ba3ea5e2119b0084284777ac7", "patch": "@@ -1,3 +1,8 @@\n+2007-01-02  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR middle-end/30311\n+\t* gcc.c-torture/compile/pr30311.c: New test.\n+\n 2007-01-01  Andrew Pinski  <pinskia@gmail.com>\n \n \tPR middle-end/30253"}, {"sha": "85ce75099cfa8dfc5403e32d6a5ffa19ce0ac2d1", "filename": "gcc/testsuite/gcc.c-torture/compile/pr30311.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a446b4e815275c0ba3ea5e2119b0084284777ac7/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr30311.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a446b4e815275c0ba3ea5e2119b0084284777ac7/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr30311.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr30311.c?ref=a446b4e815275c0ba3ea5e2119b0084284777ac7", "patch": "@@ -0,0 +1,16 @@\n+/* ICE in subreg_get_info: bug 30311.  */\n+/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+inline double bar(double x)\n+{\n+  long double d;\n+  __asm__ (\"\" : \"=t\" (d) : \"0\" (x));\n+  return d;\n+}\n+\n+double foo(double x)\n+{\n+  if (x)\n+    return bar(x);\n+  else\n+    return bar(x);\n+}"}]}