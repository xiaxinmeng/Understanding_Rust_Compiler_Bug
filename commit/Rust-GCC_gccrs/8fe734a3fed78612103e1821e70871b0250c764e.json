{"sha": "8fe734a3fed78612103e1821e70871b0250c764e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGZlNzM0YTNmZWQ3ODYxMjEwM2UxODIxZTcwODcxYjAyNTBjNzY0ZQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2002-10-22T08:56:49Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2002-10-22T08:56:49Z"}, "message": "re PR c++/7209 (Faulty array dereferencing)\n\n\tPR c++/7209\n\t* fold_const.c (fold_binary_op_with_conditional_arg): Always\n\tbuild compound_expr if we used save_expr.\ntestsuite:\n\t* g++.dg/expr/cond1.C: New test.\n\nFrom-SVN: r58405", "tree": {"sha": "5e13f69e6f6f8ad205d8b0dc140b72e03198749e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e13f69e6f6f8ad205d8b0dc140b72e03198749e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8fe734a3fed78612103e1821e70871b0250c764e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fe734a3fed78612103e1821e70871b0250c764e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fe734a3fed78612103e1821e70871b0250c764e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fe734a3fed78612103e1821e70871b0250c764e/comments", "author": null, "committer": null, "parents": [{"sha": "6a0a6ac4c168206195185ec63130685ce7d7d61a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a0a6ac4c168206195185ec63130685ce7d7d61a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a0a6ac4c168206195185ec63130685ce7d7d61a"}], "stats": {"total": 58, "additions": 51, "deletions": 7}, "files": [{"sha": "2d85ff97c8719bc43ba5512624082b3f11c7efeb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fe734a3fed78612103e1821e70871b0250c764e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fe734a3fed78612103e1821e70871b0250c764e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8fe734a3fed78612103e1821e70871b0250c764e", "patch": "@@ -1,3 +1,9 @@\n+2002-10-22  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/7209\n+\t* fold_const.c (fold_binary_op_with_conditional_arg): Always\n+\tbuild compound_expr if we used save_expr.\n+\n 2002-10-22  Alan Modra  <amodra@bigpond.net.au>\n \n \t* output.h (SECTION_NOTYPE): Define."}, {"sha": "5f5e25ff3e91d1633c6bb599b731e6a13cb79874", "filename": "gcc/fold-const.c", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fe734a3fed78612103e1821e70871b0250c764e/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fe734a3fed78612103e1821e70871b0250c764e/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=8fe734a3fed78612103e1821e70871b0250c764e", "patch": "@@ -4430,6 +4430,7 @@ fold_binary_op_with_conditional_arg (code, type, cond, arg, cond_first_p)\n   /* And these are the types of the expressions.  */\n   tree lhs_type = type;\n   tree rhs_type = type;\n+  int save = 0;\n \n   if (cond_first_p)\n     {\n@@ -4488,11 +4489,12 @@ fold_binary_op_with_conditional_arg (code, type, cond, arg, cond_first_p)\n      if an arm is a COND_EXPR since we get exponential behavior\n      in that case.  */\n \n-  if (TREE_CODE (arg) != SAVE_EXPR && ! TREE_CONSTANT (arg)\n-      && (*lang_hooks.decls.global_bindings_p) () == 0\n-      && ((TREE_CODE (arg) != VAR_DECL\n-\t   && TREE_CODE (arg) != PARM_DECL)\n-\t  || TREE_SIDE_EFFECTS (arg)))\n+  if (TREE_CODE (arg) == SAVE_EXPR)\n+    save = 1;\n+  else if (!TREE_CONSTANT (arg)\n+\t   && (*lang_hooks.decls.global_bindings_p) () == 0\n+\t   && ((TREE_CODE (arg) != VAR_DECL && TREE_CODE (arg) != PARM_DECL)\n+\t       || TREE_SIDE_EFFECTS (arg)))\n     {\n       if (TREE_CODE (true_value) != COND_EXPR)\n \tlhs = fold (build (lhs_code, lhs_type, *true_lhs, *true_rhs));\n@@ -4502,7 +4504,11 @@ fold_binary_op_with_conditional_arg (code, type, cond, arg, cond_first_p)\n \n       if ((lhs == 0 || ! TREE_CONSTANT (lhs))\n \t  && (rhs == 0 || !TREE_CONSTANT (rhs)))\n-\targ = save_expr (arg), lhs = rhs = 0;\n+\t{\n+\t  arg = save_expr (arg);\n+\t  lhs = rhs = 0;\n+\t  save = 1;\n+\t}\n     }\n \n   if (lhs == 0)\n@@ -4512,7 +4518,7 @@ fold_binary_op_with_conditional_arg (code, type, cond, arg, cond_first_p)\n \n   test = fold (build (COND_EXPR, type, test, lhs, rhs));\n \n-  if (TREE_CODE (arg) == SAVE_EXPR)\n+  if (save)\n     return build (COMPOUND_EXPR, type,\n \t\t  convert (void_type_node, arg),\n \t\t  strip_compound_expr (test, arg));"}, {"sha": "78e741793b397353b1c1f649536a96062f34e26e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fe734a3fed78612103e1821e70871b0250c764e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fe734a3fed78612103e1821e70871b0250c764e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8fe734a3fed78612103e1821e70871b0250c764e", "patch": "@@ -1,3 +1,7 @@\n+2002-10-22  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* g++.dg/expr/cond1.C: New test.\n+\n 2002-10-21  Mark Mitchell  <mark@codesourcery.com>\n \n \t* g++.dg/abi/vbase13.C: New test."}, {"sha": "8fb3c0f4f34b4fcfee3f28d32484878ba10ef7a1", "filename": "gcc/testsuite/g++.dg/expr/cond1.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fe734a3fed78612103e1821e70871b0250c764e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcond1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fe734a3fed78612103e1821e70871b0250c764e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcond1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcond1.C?ref=8fe734a3fed78612103e1821e70871b0250c764e", "patch": "@@ -0,0 +1,28 @@\n+// { dg-do run }\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 17 Oct 2002 <nathan@codesourcery.com>\n+\n+// PR 7209. We didn't SAVE_EXPR in the right place\n+\n+char a[2][1][16]={\n+  {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}},\n+  {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}}};\n+\n+int f() {return 0;}\n+\n+char * Foo (int d)\n+{\n+  char *c1;\n+\n+  c1=a[d==0 ? 0 : 1][f()];\n+\n+  return c1;\n+}\n+\n+int main ()\n+{\n+  if (Foo (0) != (void *)a)\n+    return 1;\n+  return 0;\n+}"}]}