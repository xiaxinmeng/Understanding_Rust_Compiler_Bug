{"sha": "9d80ef7c827fd5b4bc4ccfd772a10c36869aa4fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQ4MGVmN2M4MjdmZDViNGJjNGNjZmQ3NzJhMTBjMzY4NjlhYTRmZA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-10-28T16:26:25Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-10-28T16:26:25Z"}, "message": "cse.c (memory_extend_rtx): Remove.\n\n        * cse.c (memory_extend_rtx): Remove.\n        (cse_main): Don't set it.\n        (cse_insn): Use a local buffer instead.\n\nFrom-SVN: r89765", "tree": {"sha": "06b58d61337f5b3e05ca35e21974ddc88d12f300", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06b58d61337f5b3e05ca35e21974ddc88d12f300"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d80ef7c827fd5b4bc4ccfd772a10c36869aa4fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d80ef7c827fd5b4bc4ccfd772a10c36869aa4fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d80ef7c827fd5b4bc4ccfd772a10c36869aa4fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d80ef7c827fd5b4bc4ccfd772a10c36869aa4fd/comments", "author": null, "committer": null, "parents": [{"sha": "f3df9541367d65608af843d2a56f4519343e769e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3df9541367d65608af843d2a56f4519343e769e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3df9541367d65608af843d2a56f4519343e769e"}], "stats": {"total": 22, "additions": 9, "deletions": 13}, "files": [{"sha": "5277f53e2882fc53c69b0528c420b6cd6b451f51", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d80ef7c827fd5b4bc4ccfd772a10c36869aa4fd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d80ef7c827fd5b4bc4ccfd772a10c36869aa4fd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9d80ef7c827fd5b4bc4ccfd772a10c36869aa4fd", "patch": "@@ -1,3 +1,9 @@\n+2004-10-28  Richard Henderson  <rth@redhat.com>\n+\n+\t* cse.c (memory_extend_rtx): Remove.\n+\t(cse_main): Don't set it.\n+\t(cse_insn): Use a local buffer instead.\n+\n 2004-10-28  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n \t* profile.c (branch_prob): Call to init_edge_profiler added."}, {"sha": "2b21852544b7d6bf356d7aa100f0516a7bf4f339", "filename": "gcc/cse.c", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d80ef7c827fd5b4bc4ccfd772a10c36869aa4fd/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d80ef7c827fd5b4bc4ccfd772a10c36869aa4fd/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=9d80ef7c827fd5b4bc4ccfd772a10c36869aa4fd", "patch": "@@ -400,12 +400,6 @@ static int recorded_label_ref;\n \n static int do_not_record;\n \n-#ifdef LOAD_EXTEND_OP\n-\n-/* Scratch rtl used when looking for load-extended copy of a MEM.  */\n-static rtx memory_extend_rtx;\n-#endif\n-\n /* canon_hash stores 1 in hash_arg_in_memory\n    if it notices a reference to memory within the expression being hashed.  */\n \n@@ -5154,10 +5148,13 @@ cse_insn (rtx insn, rtx libcall_insn)\n \t  && MEM_P (src) && ! do_not_record\n \t  && LOAD_EXTEND_OP (mode) != UNKNOWN)\n \t{\n+\t  struct rtx_def memory_extend_buf;\n+\t  rtx memory_extend_rtx = &memory_extend_buf;\n \t  enum machine_mode tmode;\n \n \t  /* Set what we are trying to extend and the operation it might\n \t     have been extended with.  */\n+\t  memset (memory_extend_rtx, 0, sizeof(*memory_extend_rtx));\n \t  PUT_CODE (memory_extend_rtx, LOAD_EXTEND_OP (mode));\n \t  XEXP (memory_extend_rtx, 0) = src;\n \n@@ -6675,13 +6672,6 @@ cse_main (rtx f, int nregs, FILE *file)\n \n   reg_eqv_table = xmalloc (nregs * sizeof (struct reg_eqv_elem));\n \n-#ifdef LOAD_EXTEND_OP\n-\n-  /* Allocate scratch rtl here.  cse_insn will fill in the memory reference\n-     and change the code and mode as appropriate.  */\n-  memory_extend_rtx = gen_rtx_ZERO_EXTEND (VOIDmode, NULL_RTX);\n-#endif\n-\n   /* Reset the counter indicating how many elements have been made\n      thus far.  */\n   n_elements_made = 0;"}]}