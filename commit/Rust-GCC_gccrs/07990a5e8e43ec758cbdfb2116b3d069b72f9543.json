{"sha": "07990a5e8e43ec758cbdfb2116b3d069b72f9543", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDc5OTBhNWU4ZTQzZWM3NThjYmRmYjIxMTZiM2QwNjliNzJmOTU0Mw==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2014-05-25T05:52:49Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2014-05-25T05:52:49Z"}, "message": "ipa-visibility.c (can_replace_by_local_alias_in_vtable): New function.\n\n\n\t* ipa-visibility.c (can_replace_by_local_alias_in_vtable): New function.\n\t(update_vtable_references): New function.\n\t(function_and_variable_visibility): Rewrite also vtable initializers.\n\t* varpool.c (cgraph_variable_initializer_availability): Remove assert.\n\nFrom-SVN: r210910", "tree": {"sha": "41d085d6d68e68b01c59e827077157d76a679599", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/41d085d6d68e68b01c59e827077157d76a679599"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07990a5e8e43ec758cbdfb2116b3d069b72f9543", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07990a5e8e43ec758cbdfb2116b3d069b72f9543", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07990a5e8e43ec758cbdfb2116b3d069b72f9543", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07990a5e8e43ec758cbdfb2116b3d069b72f9543/comments", "author": null, "committer": null, "parents": [{"sha": "05fc16dde913ed47ab4352a34b15f71d24d58934", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05fc16dde913ed47ab4352a34b15f71d24d58934", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05fc16dde913ed47ab4352a34b15f71d24d58934"}], "stats": {"total": 66, "additions": 65, "deletions": 1}, "files": [{"sha": "8a5ff8f51d8a17cd1d4a7a404b1c9cf8bba6aa2e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07990a5e8e43ec758cbdfb2116b3d069b72f9543/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07990a5e8e43ec758cbdfb2116b3d069b72f9543/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=07990a5e8e43ec758cbdfb2116b3d069b72f9543", "patch": "@@ -1,3 +1,10 @@\n+2014-05-23  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-visibility.c (can_replace_by_local_alias_in_vtable): New function.\n+\t(update_vtable_references): New function.\n+\t(function_and_variable_visibility): Rewrite also vtable initializers.\n+\t* varpool.c (cgraph_variable_initializer_availability): Remove assert.\n+\n 2014-05-23  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* ggc.h (ggc_grow): New function."}, {"sha": "dc22b2e981e61c19a04e53bca1b6dac4ab9c6dd8", "filename": "gcc/ipa-visibility.c", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07990a5e8e43ec758cbdfb2116b3d069b72f9543/gcc%2Fipa-visibility.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07990a5e8e43ec758cbdfb2116b3d069b72f9543/gcc%2Fipa-visibility.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-visibility.c?ref=07990a5e8e43ec758cbdfb2116b3d069b72f9543", "patch": "@@ -343,6 +343,36 @@ can_replace_by_local_alias (symtab_node *node)\n \t  && !symtab_can_be_discarded (node));\n }\n \n+/* Return true if we can replace refernece to NODE by local alias\n+   within a virtual table.  Generally we can replace function pointers\n+   and virtual table pointers.  */\n+\n+bool\n+can_replace_by_local_alias_in_vtable (symtab_node *node)\n+{\n+  if (is_a <varpool_node *> (node)\n+      && !DECL_VIRTUAL_P (node->decl))\n+    return false;\n+  return can_replace_by_local_alias (node);\n+}\n+\n+/* walk_tree callback that rewrites initializer references.   */\n+\n+static tree\n+update_vtable_references (tree *tp, int *walk_subtrees, void *data ATTRIBUTE_UNUSED)\n+{\n+  if (TREE_CODE (*tp) == VAR_DECL\n+      || TREE_CODE (*tp) == FUNCTION_DECL)\n+    {\n+      if (can_replace_by_local_alias_in_vtable (symtab_get_node (*tp)))\n+\t*tp = symtab_nonoverwritable_alias (symtab_get_node (*tp))->decl;\n+      *walk_subtrees = 0;\n+    }\n+  else if (IS_TYPE_OR_DECL_P (*tp))\n+    *walk_subtrees = 0;\n+  return NULL;\n+}\n+\n /* In LTO we can remove COMDAT groups and weak symbols.\n    Either turn them into normal symbols or external symbol depending on \n    resolution info.  */\n@@ -625,6 +655,34 @@ function_and_variable_visibility (bool whole_program)\n \t  vnode->resolution = LDPR_PREVAILING_DEF_IRONLY;\n \t}\n       update_visibility_by_resolution_info (vnode);\n+\n+      /* Update virutal tables to point to local aliases where possible.  */\n+      if (DECL_VIRTUAL_P (vnode->decl)\n+\t  && !DECL_EXTERNAL (vnode->decl))\n+\t{\n+\t  int i;\n+\t  struct ipa_ref *ref;\n+\t  bool found = false;\n+\n+\t  /* See if there is something to update.  */\n+\t  for (i = 0; ipa_ref_list_referring_iterate (&vnode->ref_list,\n+\t\t\t\t\t\t      i, ref); i++)\n+\t    if (ref->use == IPA_REF_ADDR\n+\t\t&& can_replace_by_local_alias_in_vtable (ref->referred))\n+\t      {\n+\t        found = true;\n+\t\tbreak;\n+\t      }\n+\t  if (found)\n+\t    {\n+\t      struct pointer_set_t *visited_nodes = pointer_set_create ();\n+\t      walk_tree (&DECL_INITIAL (vnode->decl),\n+\t\t\t update_vtable_references, NULL, visited_nodes);\n+\t      pointer_set_destroy (visited_nodes);\n+\t      ipa_remove_all_references (&vnode->ref_list);\n+\t      record_references_in_initializer (vnode->decl, false);\n+\t    }\n+\t}\n     }\n \n   if (dump_file)"}, {"sha": "1697bb401a333d0e716fd192e632ec2edbf9f178", "filename": "gcc/varpool.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07990a5e8e43ec758cbdfb2116b3d069b72f9543/gcc%2Fvarpool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07990a5e8e43ec758cbdfb2116b3d069b72f9543/gcc%2Fvarpool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarpool.c?ref=07990a5e8e43ec758cbdfb2116b3d069b72f9543", "patch": "@@ -355,7 +355,6 @@ varpool_add_new_variable (tree decl)\n enum availability\n cgraph_variable_initializer_availability (varpool_node *node)\n {\n-  gcc_assert (cgraph_function_flags_ready);\n   if (!node->definition)\n     return AVAIL_NOT_AVAILABLE;\n   if (!TREE_PUBLIC (node->decl))"}]}