{"sha": "7049e4eb334cfdd6c13897caa1559e8e8211954c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzA0OWU0ZWIzMzRjZmRkNmMxMzg5N2NhYTE1NTllOGU4MjExOTU0Yw==", "commit": {"author": {"name": "Christian Bruel", "email": "christian.bruel@st.com", "date": "2015-05-26T14:03:10Z"}, "committer": {"name": "Christian Bruel", "email": "chrbr@gcc.gnu.org", "date": "2015-05-26T14:03:10Z"}, "message": "2015-05-26  Christian Bruel  <christian.bruel@st.com>\n\n\t* c-common.h (builtin_define_with_int_value)\n\t(builtin_define_type_sizeof): Declare.\n\t* c-cppbuiltin.c (builtin_define_with_int_value)\n\t(builtin_define_type_sizeof): Externalize.\n\t(builtin_define_std): Cleanup declaration.\n\t* config/arm/arm-protos.h (arm_cpu_cpp_builtins): Declare.\n\t* config/arm/arm.h (TARGET_CPU_CPP_BUILTINS): Move macro defines into...\n\t* config/arm/arm-c.c (arm_cpu_cpp_builtins): New function.\n\t(builtin_define, builtin_assert): New macros.\n\nFrom-SVN: r223698", "tree": {"sha": "59acce64b14482279311f15341f9568a641e7226", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59acce64b14482279311f15341f9568a641e7226"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7049e4eb334cfdd6c13897caa1559e8e8211954c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7049e4eb334cfdd6c13897caa1559e8e8211954c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7049e4eb334cfdd6c13897caa1559e8e8211954c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7049e4eb334cfdd6c13897caa1559e8e8211954c/comments", "author": null, "committer": null, "parents": [{"sha": "ea3eac3ab76f1928a34b8e62fd4cd24cfef07e9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea3eac3ab76f1928a34b8e62fd4cd24cfef07e9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea3eac3ab76f1928a34b8e62fd4cd24cfef07e9f"}], "stats": {"total": 277, "additions": 144, "deletions": 133}, "files": [{"sha": "70a8f0ef96dcfdfde1fea7ca8e3d5088d705368a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7049e4eb334cfdd6c13897caa1559e8e8211954c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7049e4eb334cfdd6c13897caa1559e8e8211954c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7049e4eb334cfdd6c13897caa1559e8e8211954c", "patch": "@@ -1,3 +1,15 @@\n+2015-05-26  Christian Bruel  <christian.bruel@st.com>\n+\n+\t* c-common.h (builtin_define_with_int_value)\n+\t(builtin_define_type_sizeof): Declare.\n+\t* c-cppbuiltin.c (builtin_define_with_int_value)\n+\t(builtin_define_type_sizeof): Externalize.\n+\t(builtin_define_std): Cleanup declaration.\n+\t* config/arm/arm-protos.h (arm_cpu_cpp_builtins): Declare.\n+\t* config/arm/arm.h (TARGET_CPU_CPP_BUILTINS): Move macro defines into...\n+\t* config/arm/arm-c.c (arm_cpu_cpp_builtins): New function.\n+\t(builtin_define, builtin_assert): New macros.\n+\n 2015-05-26  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/66142"}, {"sha": "61900db490fe903d33caeb5a64de251750fb0b32", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7049e4eb334cfdd6c13897caa1559e8e8211954c/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7049e4eb334cfdd6c13897caa1559e8e8211954c/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=7049e4eb334cfdd6c13897caa1559e8e8211954c", "patch": "@@ -1092,6 +1092,8 @@ extern const unsigned char executable_checksum[16];\n /* In c-cppbuiltin.c  */\n extern void builtin_define_std (const char *macro);\n extern void builtin_define_with_value (const char *, const char *, int);\n+extern void builtin_define_with_int_value (const char *, HOST_WIDE_INT);\n+extern void builtin_define_type_sizeof (const char *, tree);\n extern void c_stddef_cpp_builtins (void);\n extern void fe_file_change (const line_map_ordinary *);\n extern void c_parse_error (const char *, enum cpp_ttype, tree, unsigned char);"}, {"sha": "a8e6310efbdb9cbe8fb40e40ce8263494b2f6e48", "filename": "gcc/c-family/c-cppbuiltin.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7049e4eb334cfdd6c13897caa1559e8e8211954c/gcc%2Fc-family%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7049e4eb334cfdd6c13897caa1559e8e8211954c/gcc%2Fc-family%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.c?ref=7049e4eb334cfdd6c13897caa1559e8e8211954c", "patch": "@@ -58,8 +58,6 @@ along with GCC; see the file COPYING3.  If not see\n #endif\n \n /* Non-static as some targets don't use it.  */\n-void builtin_define_std (const char *) ATTRIBUTE_UNUSED;\n-static void builtin_define_with_int_value (const char *, HOST_WIDE_INT);\n static void builtin_define_with_hex_fp_value (const char *, tree,\n \t\t\t\t\t      int, const char *,\n \t\t\t\t\t      const char *,\n@@ -68,7 +66,6 @@ static void builtin_define_stdint_macros (void);\n static void builtin_define_constants (const char *, tree);\n static void builtin_define_type_max (const char *, tree);\n static void builtin_define_type_minmax (const char *, const char *, tree);\n-static void builtin_define_type_sizeof (const char *, tree);\n static void builtin_define_float_constants (const char *,\n \t\t\t\t\t    const char *,\n \t\t\t\t\t    const char *,\n@@ -113,7 +110,7 @@ mode_has_fma (machine_mode mode)\n }\n \n /* Define NAME with value TYPE size_unit.  */\n-static void\n+void\n builtin_define_type_sizeof (const char *name, tree type)\n {\n   builtin_define_with_int_value (name,\n@@ -1371,7 +1368,7 @@ builtin_define_with_value (const char *macro, const char *expansion, int is_str)\n \n \n /* Pass an object-like macro and an integer value to define it to.  */\n-static void\n+void\n builtin_define_with_int_value (const char *macro, HOST_WIDE_INT value)\n {\n   char *buf;"}, {"sha": "8dfbd78f46c9e8f8a4b7646dbbe2bb4fb68b29a7", "filename": "gcc/config/arm/arm-c.c", "status": "modified", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7049e4eb334cfdd6c13897caa1559e8e8211954c/gcc%2Fconfig%2Farm%2Farm-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7049e4eb334cfdd6c13897caa1559e8e8211954c/gcc%2Fconfig%2Farm%2Farm-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-c.c?ref=7049e4eb334cfdd6c13897caa1559e8e8211954c", "patch": "@@ -51,3 +51,126 @@ arm_lang_object_attributes_init (void)\n {\n   arm_lang_output_object_attributes_hook = arm_output_c_attributes;\n }\n+\n+#define builtin_define(TXT) cpp_define (pfile, TXT)\n+#define builtin_assert(TXT) cpp_assert (pfile, TXT)\n+\n+void\n+arm_cpu_cpp_builtins (struct cpp_reader * pfile)\n+{\n+  if (TARGET_DSP_MULTIPLY)\n+    builtin_define (\"__ARM_FEATURE_DSP\");\n+  if (TARGET_ARM_QBIT)\n+    builtin_define (\"__ARM_FEATURE_QBIT\");\n+  if (TARGET_ARM_SAT)\n+    builtin_define (\"__ARM_FEATURE_SAT\");\n+  if (TARGET_CRYPTO)\n+    builtin_define (\"__ARM_FEATURE_CRYPTO\");\n+  if (unaligned_access)\n+    builtin_define (\"__ARM_FEATURE_UNALIGNED\");\n+  if (TARGET_CRC32)\n+    builtin_define (\"__ARM_FEATURE_CRC32\");\n+  if (TARGET_32BIT)\n+    builtin_define (\"__ARM_32BIT_STATE\");\n+  if (TARGET_ARM_FEATURE_LDREX)\n+    builtin_define_with_int_value (\"__ARM_FEATURE_LDREX\", \n+\t\t\t\t   TARGET_ARM_FEATURE_LDREX);\n+  if ((TARGET_ARM_ARCH >= 5 && !TARGET_THUMB)\n+      || TARGET_ARM_ARCH_ISA_THUMB >=2)\n+    builtin_define (\"__ARM_FEATURE_CLZ\");\n+  if (TARGET_INT_SIMD)\n+    builtin_define (\"__ARM_FEATURE_SIMD32\");\n+\n+  builtin_define_with_int_value (\"__ARM_SIZEOF_MINIMAL_ENUM\",\n+\t\t\t\t flag_short_enums ? 1 : 4);\n+  builtin_define_type_sizeof (\"__ARM_SIZEOF_WCHAR_T\", wchar_type_node);\n+  if (TARGET_ARM_ARCH_PROFILE)\n+    builtin_define_with_int_value (\"__ARM_ARCH_PROFILE\",\n+\t\t\t\t   TARGET_ARM_ARCH_PROFILE);\n+\n+  /* Define __arm__ even when in thumb mode, for\n+     consistency with armcc.  */\n+  builtin_define (\"__arm__\");\n+  if (TARGET_ARM_ARCH)\n+    builtin_define_with_int_value (\"__ARM_ARCH\", TARGET_ARM_ARCH);\n+  if (arm_arch_notm)\n+    builtin_define (\"__ARM_ARCH_ISA_ARM\");\n+  builtin_define (\"__APCS_32__\");\n+  if (TARGET_THUMB)\n+    builtin_define (\"__thumb__\");\n+  if (TARGET_THUMB2)\n+    builtin_define (\"__thumb2__\");\n+  if (TARGET_ARM_ARCH_ISA_THUMB)\n+    builtin_define_with_int_value (\"__ARM_ARCH_ISA_THUMB\",\n+\t\t\t\t   TARGET_ARM_ARCH_ISA_THUMB);\n+\n+  if (TARGET_BIG_END)\n+    {\n+      builtin_define (\"__ARMEB__\");\n+      builtin_define (\"__ARM_BIG_ENDIAN\");\n+      if (TARGET_THUMB)\n+\tbuiltin_define (\"__THUMBEB__\");\n+    }\n+  else\n+    {\n+      builtin_define (\"__ARMEL__\");\n+      if (TARGET_THUMB)\n+\tbuiltin_define (\"__THUMBEL__\");\n+    }\n+\n+  if (TARGET_SOFT_FLOAT)\n+    builtin_define (\"__SOFTFP__\");\n+\n+  if (TARGET_VFP)\n+    builtin_define (\"__VFP_FP__\");\n+\t\n+  if (TARGET_ARM_FP)\n+    builtin_define_with_int_value (\"__ARM_FP\", TARGET_ARM_FP);\n+  if (arm_fp16_format == ARM_FP16_FORMAT_IEEE)\n+    builtin_define (\"__ARM_FP16_FORMAT_IEEE\");\n+  if (arm_fp16_format == ARM_FP16_FORMAT_ALTERNATIVE)\n+    builtin_define (\"__ARM_FP16_FORMAT_ALTERNATIVE\");\n+  if (TARGET_FMA)\n+    builtin_define (\"__ARM_FEATURE_FMA\");\n+\n+  if (TARGET_NEON)\n+    {\n+      builtin_define (\"__ARM_NEON__\");\n+      builtin_define (\"__ARM_NEON\");\n+    }\n+  if (TARGET_NEON_FP)\n+    builtin_define_with_int_value (\"__ARM_NEON_FP\", TARGET_NEON_FP);\n+  \n+  /* Add a define for interworking. Needed when building libgcc.a.  */\n+  if (arm_cpp_interwork)\n+    builtin_define (\"__THUMB_INTERWORK__\");\n+\n+  builtin_assert (\"cpu=arm\");\n+  builtin_assert (\"machine=arm\");\n+\n+  builtin_define (arm_arch_name);\n+  if (arm_arch_xscale)\n+    builtin_define (\"__XSCALE__\");\n+  if (arm_arch_iwmmxt)\n+    {\n+      builtin_define (\"__IWMMXT__\");\n+      builtin_define (\"__ARM_WMMX\");\n+    }\n+  if (arm_arch_iwmmxt2)\n+    builtin_define (\"__IWMMXT2__\");\n+  if (TARGET_AAPCS_BASED)\n+    {\n+      if (arm_pcs_default == ARM_PCS_AAPCS_VFP)\n+\tbuiltin_define (\"__ARM_PCS_VFP\");\n+      else if (arm_pcs_default == ARM_PCS_AAPCS)\n+\tbuiltin_define (\"__ARM_PCS\");\n+      builtin_define (\"__ARM_EABI__\");\n+    }\n+  if (TARGET_IDIV)\n+    {\n+      builtin_define (\"__ARM_ARCH_EXT_IDIV__\");\n+      builtin_define (\"__ARM_FEATURE_IDIV\");\n+    }\n+  if (inline_asm_unified)\n+    builtin_define (\"__ARM_ASM_SYNTAX_UNIFIED__\");\n+}"}, {"sha": "91907b82e48f91fb2fea0547614dfbcd1a7207fb", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7049e4eb334cfdd6c13897caa1559e8e8211954c/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7049e4eb334cfdd6c13897caa1559e8e8211954c/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=7049e4eb334cfdd6c13897caa1559e8e8211954c", "patch": "@@ -216,8 +216,6 @@ extern void arm_pr_long_calls (struct cpp_reader *);\n extern void arm_pr_no_long_calls (struct cpp_reader *);\n extern void arm_pr_long_calls_off (struct cpp_reader *);\n \n-extern void arm_lang_object_attributes_init(void);\n-\n extern const char *arm_mangle_type (const_tree);\n extern const char *arm_mangle_builtin_type (const_tree);\n \n@@ -331,6 +329,10 @@ extern void arm_emit_eabi_attribute (const char *, int, int);\n /* Defined in gcc/common/config/arm-common.c.  */\n extern const char *arm_rewrite_selected_cpu (const char *name);\n \n+/* Defined in gcc/common/config/arm-c.c.  */\n+extern void arm_lang_object_attributes_init (void);\n+extern void arm_cpu_cpp_builtins (struct cpp_reader *);\n+\n extern bool arm_is_constant_pool_ref (rtx);\n \n /* Flags used to identify the presence of processor capabilities.  */"}, {"sha": "4cdd60d69b46e0396afd73eee681e08b5eb0ea0a", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 1, "deletions": 126, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7049e4eb334cfdd6c13897caa1559e8e8211954c/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7049e4eb334cfdd6c13897caa1559e8e8211954c/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=7049e4eb334cfdd6c13897caa1559e8e8211954c", "patch": "@@ -45,132 +45,7 @@\n extern char arm_arch_name[];\n \n /* Target CPU builtins.  */\n-#define TARGET_CPU_CPP_BUILTINS()\t\t\t\\\n-  do\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\\\n-\tif (TARGET_DSP_MULTIPLY)\t\t\t\\\n-\t   builtin_define (\"__ARM_FEATURE_DSP\");\t\\\n-        if (TARGET_ARM_QBIT)\t\t\t\t\\\n-           builtin_define (\"__ARM_FEATURE_QBIT\");\t\\\n-        if (TARGET_ARM_SAT)\t\t\t\t\\\n-           builtin_define (\"__ARM_FEATURE_SAT\");\t\\\n-        if (TARGET_CRYPTO)\t\t\t\t\\\n-\t   builtin_define (\"__ARM_FEATURE_CRYPTO\");\t\\\n-\tif (unaligned_access)\t\t\t\t\\\n-\t  builtin_define (\"__ARM_FEATURE_UNALIGNED\");\t\\\n-\tif (TARGET_CRC32)\t\t\t\t\\\n-\t  builtin_define (\"__ARM_FEATURE_CRC32\");\t\\\n-\tif (TARGET_32BIT)\t\t\t\t\\\n-\t  builtin_define (\"__ARM_32BIT_STATE\");\t\t\\\n-\tif (TARGET_ARM_FEATURE_LDREX)\t\t\t\t\\\n-\t  builtin_define_with_int_value (\t\t\t\\\n-\t    \"__ARM_FEATURE_LDREX\", TARGET_ARM_FEATURE_LDREX);\t\\\n-\tif ((TARGET_ARM_ARCH >= 5 && !TARGET_THUMB)\t\t\\\n-\t     || TARGET_ARM_ARCH_ISA_THUMB >=2)\t\t\t\\\n-\t  builtin_define (\"__ARM_FEATURE_CLZ\");\t\t\t\\\n-\tif (TARGET_INT_SIMD)\t\t\t\t\t\\\n-\t  builtin_define (\"__ARM_FEATURE_SIMD32\");\t\t\\\n-\t\t\t\t\t\t\t\t\\\n-\tbuiltin_define_with_int_value (\t\t\t\t\\\n-\t  \"__ARM_SIZEOF_MINIMAL_ENUM\",\t\t\t\t\\\n-\t  flag_short_enums ? 1 : 4);\t\t\t\t\\\n-\tbuiltin_define_type_sizeof (\"__ARM_SIZEOF_WCHAR_T\",\t\\\n-\t\t\t\t    wchar_type_node);\t\t\\\n-\tif (TARGET_ARM_ARCH_PROFILE)\t\t\t\t\\\n-\t  builtin_define_with_int_value (\t\t\t\\\n-\t    \"__ARM_ARCH_PROFILE\", TARGET_ARM_ARCH_PROFILE);\t\\\n-\t\t\t\t\t\t\t\t\\\n-\t/* Define __arm__ even when in thumb mode, for\t\\\n-\t   consistency with armcc.  */\t\t\t\\\n-\tbuiltin_define (\"__arm__\");\t\t\t\\\n-\tif (TARGET_ARM_ARCH)\t\t\t\t\\\n-\t  builtin_define_with_int_value (\t\t\\\n-\t    \"__ARM_ARCH\", TARGET_ARM_ARCH);\t\t\\\n-\tif (arm_arch_notm)\t\t\t\t\\\n-\t  builtin_define (\"__ARM_ARCH_ISA_ARM\");\t\\\n-\tbuiltin_define (\"__APCS_32__\");\t\t\t\\\n-\tif (TARGET_THUMB)\t\t\t\t\\\n-\t  builtin_define (\"__thumb__\");\t\t\t\\\n-\tif (TARGET_THUMB2)\t\t\t\t\\\n-\t  builtin_define (\"__thumb2__\");\t\t\\\n-\tif (TARGET_ARM_ARCH_ISA_THUMB)\t\t\t\\\n-\t  builtin_define_with_int_value (\t\t\\\n-\t    \"__ARM_ARCH_ISA_THUMB\",\t\t\t\\\n-\t    TARGET_ARM_ARCH_ISA_THUMB);\t\t\t\\\n-\t\t\t\t\t\t\t\\\n-\tif (TARGET_BIG_END)\t\t\t\t\\\n-\t  {\t\t\t\t\t\t\\\n-\t    builtin_define (\"__ARMEB__\");\t\t\\\n-\t    builtin_define (\"__ARM_BIG_ENDIAN\");\t\\\n-\t    if (TARGET_THUMB)\t\t\t\t\\\n-\t      builtin_define (\"__THUMBEB__\");\t\t\\\n-\t  }\t\t\t\t\t\t\\\n-        else\t\t\t\t\t\t\\\n-\t  {\t\t\t\t\t\t\\\n-\t    builtin_define (\"__ARMEL__\");\t\t\\\n-\t    if (TARGET_THUMB)\t\t\t\t\\\n-\t      builtin_define (\"__THUMBEL__\");\t\t\\\n-\t  }\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\\\n-\tif (TARGET_SOFT_FLOAT)\t\t\t\t\\\n-\t  builtin_define (\"__SOFTFP__\");\t\t\\\n-\t\t\t\t\t\t\t\\\n-\tif (TARGET_VFP)\t\t\t\t\t\\\n-\t  builtin_define (\"__VFP_FP__\");\t\t\\\n-\t\t\t\t\t\t\t\\\n-\tif (TARGET_ARM_FP)\t\t\t\t\\\n-\t  builtin_define_with_int_value (\t\t\\\n-\t    \"__ARM_FP\", TARGET_ARM_FP);\t\t\t\\\n-\tif (arm_fp16_format == ARM_FP16_FORMAT_IEEE)\t\t\\\n-\t  builtin_define (\"__ARM_FP16_FORMAT_IEEE\");\t\t\\\n-\tif (arm_fp16_format == ARM_FP16_FORMAT_ALTERNATIVE)\t\\\n-\t  builtin_define (\"__ARM_FP16_FORMAT_ALTERNATIVE\");\t\\\n-        if (TARGET_FMA)\t\t\t\t\t\\\n-          builtin_define (\"__ARM_FEATURE_FMA\");\t\t\\\n-\t\t\t\t\t\t\t\\\n-\tif (TARGET_NEON)\t\t\t\t\\\n-\t  {\t\t\t\t\t\t\\\n-\t    builtin_define (\"__ARM_NEON__\");\t\t\\\n-\t    builtin_define (\"__ARM_NEON\");\t\t\\\n-\t  }\t\t\t\t\t\t\\\n-\tif (TARGET_NEON_FP)\t\t\t\t\\\n-\t  builtin_define_with_int_value (\t\t\\\n-\t    \"__ARM_NEON_FP\", TARGET_NEON_FP);\t\t\\\n-\t\t\t\t\t\t\t\\\n-\t/* Add a define for interworking.\t\t\\\n-\t   Needed when building libgcc.a.  */\t\t\\\n-\tif (arm_cpp_interwork)\t\t\t\t\\\n-\t  builtin_define (\"__THUMB_INTERWORK__\");\t\\\n-\t\t\t\t\t\t\t\\\n-\tbuiltin_assert (\"cpu=arm\");\t\t\t\\\n-\tbuiltin_assert (\"machine=arm\");\t\t\t\\\n-\t\t\t\t\t\t\t\\\n-\tbuiltin_define (arm_arch_name);\t\t\t\\\n-\tif (arm_arch_xscale)\t\t\t\t\\\n-\t  builtin_define (\"__XSCALE__\");\t\t\\\n-\tif (arm_arch_iwmmxt)\t\t\t\t\\\n-          {\t\t\t\t\t\t\\\n-\t    builtin_define (\"__IWMMXT__\");\t\t\\\n-\t    builtin_define (\"__ARM_WMMX\");\t\t\\\n-\t  }\t\t\t\t\t\t\\\n-\tif (arm_arch_iwmmxt2)\t\t\t\t\\\n-\t  builtin_define (\"__IWMMXT2__\");\t\t\\\n-\tif (TARGET_AAPCS_BASED)\t\t\t\t\\\n-\t  {\t\t\t\t\t\t\\\n-\t    if (arm_pcs_default == ARM_PCS_AAPCS_VFP)\t\\\n-\t      builtin_define (\"__ARM_PCS_VFP\");\t\t\\\n-\t    else if (arm_pcs_default == ARM_PCS_AAPCS)\t\\\n-\t      builtin_define (\"__ARM_PCS\");\t\t\\\n-\t    builtin_define (\"__ARM_EABI__\");\t\t\\\n-\t  }\t\t\t\t\t\t\\\n-\tif (TARGET_IDIV)\t\t\t\t\\\n-         {\t\t\t\t\t\t\\\n-            builtin_define (\"__ARM_ARCH_EXT_IDIV__\");\t\\\n-            builtin_define (\"__ARM_FEATURE_IDIV\");\t\\\n-         }\t\t\t\t\t\t\\\n-\tif (inline_asm_unified)\t\t\t\t\\\n-\t  builtin_define (\"__ARM_ASM_SYNTAX_UNIFIED__\");\\\n-    } while (0)\n+#define TARGET_CPU_CPP_BUILTINS() arm_cpu_cpp_builtins (pfile)\n \n #include \"config/arm/arm-opts.h\"\n "}]}