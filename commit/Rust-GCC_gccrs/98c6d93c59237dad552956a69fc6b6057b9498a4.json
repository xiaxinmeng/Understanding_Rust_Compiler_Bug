{"sha": "98c6d93c59237dad552956a69fc6b6057b9498a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OThjNmQ5M2M1OTIzN2RhZDU1Mjk1NmE2OWZjNmI2MDU3Yjk0OThhNA==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2011-01-17T12:47:21Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2011-01-17T12:47:21Z"}, "message": "Correct mask operand for AVX mask load/store.\n\ngcc/\n\n2011-01-17  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR target/47318\n\t* config/i386/avxintrin.h (_mm_maskload_pd): Change mask to\n\t__m128i.\n\t(_mm_maskstore_pd): Likewise.\n\t(_mm_maskload_ps): Likewise.\n\t(_mm_maskstore_ps): Likewise.\n\t(_mm256_maskload_pd): Change mask to __m256i.\n\t(_mm256_maskstore_pd): Likewise.\n\t(_mm256_maskload_ps): Likewise.\n\t(_mm256_maskstore_ps): Likewise.\n\n\t* config/i386/i386-builtin-types.def: Updated.\n\t(ix86_expand_special_args_builtin): Likewise.\n\n\t* config/i386/i386.c (bdesc_special_args): Update\n\t__builtin_ia32_maskloadpd, __builtin_ia32_maskloadps,\n\t__builtin_ia32_maskloadpd256, __builtin_ia32_maskloadps256,\n\t__builtin_ia32_maskstorepd, __builtin_ia32_maskstoreps,\n\t__builtin_ia32_maskstorepd256 and __builtin_ia32_maskstoreps256.\n\n\t* config/i386/sse.md (avx_maskload<ssemodesuffix><avxmodesuffix>):\n\tUse <avxpermvecmode> on mask register.\n\t(avx_maskstore<ssemodesuffix><avxmodesuffix>): Likewise.\n\ngcc/testsuite/\n\n2011-01-17  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR target/47318\n\t* gcc.target/i386/avx-vmaskmovpd-1.c: New.\n\t* gcc.target/i386/avx-vmaskmovpd-2.c: Likewise.\n\t* gcc.target/i386/avx-vmaskmovps-1.c: Likewise.\n\t* gcc.target/i386/avx-vmaskmovps-1.c: Likewise.\n\n\t* gcc.target/i386/avx-vmaskmovpd-256-1.c (avx_test): Load mask\n\tas __m256i.\n\t* gcc.target/i386/avx-vmaskmovpd-256-2.c (avx_test): Likewise.\n\t* gcc.target/i386/avx-vmaskmovps-256-1.c (avx_test): Likewise.\n\t* gcc.target/i386/avx-vmaskmovps-256-2.c (avx_test): Likewise.\n\nFrom-SVN: r168899", "tree": {"sha": "f456eba75e1fca79369b48f11bee765672fe7bff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f456eba75e1fca79369b48f11bee765672fe7bff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98c6d93c59237dad552956a69fc6b6057b9498a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98c6d93c59237dad552956a69fc6b6057b9498a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98c6d93c59237dad552956a69fc6b6057b9498a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98c6d93c59237dad552956a69fc6b6057b9498a4/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b9361af2c3392d6a73453af69dcc5919b6c25db3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9361af2c3392d6a73453af69dcc5919b6c25db3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9361af2c3392d6a73453af69dcc5919b6c25db3"}], "stats": {"total": 274, "additions": 223, "deletions": 51}, "files": [{"sha": "93837b4a60356bed2181f69b9e9aa2702696b977", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98c6d93c59237dad552956a69fc6b6057b9498a4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98c6d93c59237dad552956a69fc6b6057b9498a4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=98c6d93c59237dad552956a69fc6b6057b9498a4", "patch": "@@ -1,3 +1,29 @@\n+2011-01-17  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/47318\n+\t* config/i386/avxintrin.h (_mm_maskload_pd): Change mask to\n+\t__m128i.\n+\t(_mm_maskstore_pd): Likewise.\n+\t(_mm_maskload_ps): Likewise.\n+\t(_mm_maskstore_ps): Likewise.\n+\t(_mm256_maskload_pd): Change mask to __m256i.\n+\t(_mm256_maskstore_pd): Likewise.\n+\t(_mm256_maskload_ps): Likewise.\n+\t(_mm256_maskstore_ps): Likewise.\n+\n+\t* config/i386/i386-builtin-types.def: Updated.\n+\t(ix86_expand_special_args_builtin): Likewise.\n+\n+\t* config/i386/i386.c (bdesc_special_args): Update\n+\t__builtin_ia32_maskloadpd, __builtin_ia32_maskloadps,\n+\t__builtin_ia32_maskloadpd256, __builtin_ia32_maskloadps256,\n+\t__builtin_ia32_maskstorepd, __builtin_ia32_maskstoreps,\n+\t__builtin_ia32_maskstorepd256 and __builtin_ia32_maskstoreps256.\n+\n+\t* config/i386/sse.md (avx_maskload<ssemodesuffix><avxmodesuffix>):\n+\tUse <avxpermvecmode> on mask register.\n+\t(avx_maskstore<ssemodesuffix><avxmodesuffix>): Likewise.\n+\n 2011-01-17  Olivier Hainque  <hainque@adacore.com>\n             Michael Haubenwallner  <michael.haubenwallner@salomon.at>\n             Eric Botcazou  <ebotcazou@adacore.com>"}, {"sha": "70bfce1a27462287ebddb038e9117050c1522da1", "filename": "gcc/config/i386/avxintrin.h", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98c6d93c59237dad552956a69fc6b6057b9498a4/gcc%2Fconfig%2Fi386%2Favxintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98c6d93c59237dad552956a69fc6b6057b9498a4/gcc%2Fconfig%2Fi386%2Favxintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favxintrin.h?ref=98c6d93c59237dad552956a69fc6b6057b9498a4", "patch": "@@ -890,55 +890,55 @@ _mm256_storeu_si256 (__m256i *__P, __m256i __A)\n }\n \n extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_maskload_pd (double const *__P, __m128d __M)\n+_mm_maskload_pd (double const *__P, __m128i __M)\n {\n   return (__m128d) __builtin_ia32_maskloadpd ((const __v2df *)__P,\n-\t\t\t\t\t      (__v2df)__M);\n+\t\t\t\t\t      (__v2di)__M);\n }\n \n extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_maskstore_pd (double *__P, __m128d __M, __m128d __A)\n+_mm_maskstore_pd (double *__P, __m128i __M, __m128d __A)\n {\n-  __builtin_ia32_maskstorepd ((__v2df *)__P, (__v2df)__M, (__v2df)__A);\n+  __builtin_ia32_maskstorepd ((__v2df *)__P, (__v2di)__M, (__v2df)__A);\n }\n \n extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_maskload_pd (double const *__P, __m256d __M)\n+_mm256_maskload_pd (double const *__P, __m256i __M)\n {\n   return (__m256d) __builtin_ia32_maskloadpd256 ((const __v4df *)__P,\n-\t\t\t\t\t\t (__v4df)__M);\n+\t\t\t\t\t\t (__v4di)__M);\n }\n \n extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_maskstore_pd (double *__P, __m256d __M, __m256d __A)\n+_mm256_maskstore_pd (double *__P, __m256i __M, __m256d __A)\n {\n-  __builtin_ia32_maskstorepd256 ((__v4df *)__P, (__v4df)__M, (__v4df)__A);\n+  __builtin_ia32_maskstorepd256 ((__v4df *)__P, (__v4di)__M, (__v4df)__A);\n }\n \n extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_maskload_ps (float const *__P, __m128 __M)\n+_mm_maskload_ps (float const *__P, __m128i __M)\n {\n   return (__m128) __builtin_ia32_maskloadps ((const __v4sf *)__P,\n-\t\t\t\t\t     (__v4sf)__M);\n+\t\t\t\t\t     (__v4si)__M);\n }\n \n extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_maskstore_ps (float *__P, __m128 __M, __m128 __A)\n+_mm_maskstore_ps (float *__P, __m128i __M, __m128 __A)\n {\n-  __builtin_ia32_maskstoreps ((__v4sf *)__P, (__v4sf)__M, (__v4sf)__A);\n+  __builtin_ia32_maskstoreps ((__v4sf *)__P, (__v4si)__M, (__v4sf)__A);\n }\n \n extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_maskload_ps (float const *__P, __m256 __M)\n+_mm256_maskload_ps (float const *__P, __m256i __M)\n {\n   return (__m256) __builtin_ia32_maskloadps256 ((const __v8sf *)__P,\n-\t\t\t\t\t\t(__v8sf)__M);\n+\t\t\t\t\t\t(__v8si)__M);\n }\n \n extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm256_maskstore_ps (float *__P, __m256 __M, __m256 __A)\n+_mm256_maskstore_ps (float *__P, __m256i __M, __m256 __A)\n {\n-  __builtin_ia32_maskstoreps256 ((__v8sf *)__P, (__v8sf)__M, (__v8sf)__A);\n+  __builtin_ia32_maskstoreps256 ((__v8sf *)__P, (__v8si)__M, (__v8sf)__A);\n }\n \n extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__, __artificial__))"}, {"sha": "05a7f546803be23d5c41f1fb5f4d3b5b220bf82b", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98c6d93c59237dad552956a69fc6b6057b9498a4/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98c6d93c59237dad552956a69fc6b6057b9498a4/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=98c6d93c59237dad552956a69fc6b6057b9498a4", "patch": "@@ -236,7 +236,7 @@ DEF_FUNCTION_TYPE (V1DI, V1DI, SI)\n DEF_FUNCTION_TYPE (V1DI, V1DI, V1DI)\n DEF_FUNCTION_TYPE (V1DI, V2SI, V2SI)\n DEF_FUNCTION_TYPE (V1DI, V8QI, V8QI)\n-DEF_FUNCTION_TYPE (V2DF, PCV2DF, V2DF)\n+DEF_FUNCTION_TYPE (V2DF, PCV2DF, V2DI)\n DEF_FUNCTION_TYPE (V2DF, V2DF, DI)\n DEF_FUNCTION_TYPE (V2DF, V2DF, INT)\n DEF_FUNCTION_TYPE (V2DF, V2DF, PCDOUBLE)\n@@ -258,7 +258,7 @@ DEF_FUNCTION_TYPE (V2SI, V2SF, V2SF)\n DEF_FUNCTION_TYPE (V2SI, V2SI, SI)\n DEF_FUNCTION_TYPE (V2SI, V2SI, V2SI)\n DEF_FUNCTION_TYPE (V2SI, V4HI, V4HI)\n-DEF_FUNCTION_TYPE (V4DF, PCV4DF, V4DF)\n+DEF_FUNCTION_TYPE (V4DF, PCV4DF, V4DI)\n DEF_FUNCTION_TYPE (V4DF, V4DF, INT)\n DEF_FUNCTION_TYPE (V4DF, V4DF, V4DF)\n DEF_FUNCTION_TYPE (V4DF, V4DF, V4DI)\n@@ -267,7 +267,7 @@ DEF_FUNCTION_TYPE (V4HI, V4HI, INT)\n DEF_FUNCTION_TYPE (V4HI, V4HI, SI)\n DEF_FUNCTION_TYPE (V4HI, V4HI, V4HI)\n DEF_FUNCTION_TYPE (V4HI, V8QI, V8QI)\n-DEF_FUNCTION_TYPE (V4SF, PCV4SF, V4SF)\n+DEF_FUNCTION_TYPE (V4SF, PCV4SF, V4SI)\n DEF_FUNCTION_TYPE (V4SF, V4SF, DI)\n DEF_FUNCTION_TYPE (V4SF, V4SF, INT)\n DEF_FUNCTION_TYPE (V4SF, V4SF, PCV2SF)\n@@ -293,7 +293,7 @@ DEF_FUNCTION_TYPE (V8HI, V8SF, INT)\n DEF_FUNCTION_TYPE (V8HI, V4SF, INT)\n DEF_FUNCTION_TYPE (V8QI, V4HI, V4HI)\n DEF_FUNCTION_TYPE (V8QI, V8QI, V8QI)\n-DEF_FUNCTION_TYPE (V8SF, PCV8SF, V8SF)\n+DEF_FUNCTION_TYPE (V8SF, PCV8SF, V8SI)\n DEF_FUNCTION_TYPE (V8SF, V8SF, INT)\n DEF_FUNCTION_TYPE (V8SF, V8SF, V8SF)\n DEF_FUNCTION_TYPE (V8SF, V8SF, V8SI)\n@@ -352,10 +352,10 @@ DEF_FUNCTION_TYPE (V8SI, V8SI, V4SI, INT)\n DEF_FUNCTION_TYPE (V8SI, V8SI, V8SI, INT)\n DEF_FUNCTION_TYPE (V8SI, V8SI, V8SI, V8SI)\n DEF_FUNCTION_TYPE (VOID, PCVOID, UNSIGNED, UNSIGNED)\n-DEF_FUNCTION_TYPE (VOID, PV2DF, V2DF, V2DF)\n-DEF_FUNCTION_TYPE (VOID, PV4DF, V4DF, V4DF)\n-DEF_FUNCTION_TYPE (VOID, PV4SF, V4SF, V4SF)\n-DEF_FUNCTION_TYPE (VOID, PV8SF, V8SF, V8SF)\n+DEF_FUNCTION_TYPE (VOID, PV2DF, V2DI, V2DF)\n+DEF_FUNCTION_TYPE (VOID, PV4DF, V4DI, V4DF)\n+DEF_FUNCTION_TYPE (VOID, PV4SF, V4SI, V4SF)\n+DEF_FUNCTION_TYPE (VOID, PV8SF, V8SI, V8SF)\n DEF_FUNCTION_TYPE (VOID, UINT, UINT, UINT)\n DEF_FUNCTION_TYPE (VOID, UINT64, UINT, UINT)\n DEF_FUNCTION_TYPE (VOID, V16QI, V16QI, PCHAR)"}, {"sha": "f5843dea9e4f00a93c815732bcba7d14bcee29c9", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98c6d93c59237dad552956a69fc6b6057b9498a4/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98c6d93c59237dad552956a69fc6b6057b9498a4/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=98c6d93c59237dad552956a69fc6b6057b9498a4", "patch": "@@ -24483,14 +24483,14 @@ static const struct builtin_description bdesc_special_args[] =\n   { OPTION_MASK_ISA_AVX, CODE_FOR_avx_movntv4df, \"__builtin_ia32_movntpd256\", IX86_BUILTIN_MOVNTPD256, UNKNOWN, (int) VOID_FTYPE_PDOUBLE_V4DF },\n   { OPTION_MASK_ISA_AVX, CODE_FOR_avx_movntv8sf, \"__builtin_ia32_movntps256\", IX86_BUILTIN_MOVNTPS256, UNKNOWN, (int) VOID_FTYPE_PFLOAT_V8SF },\n \n-  { OPTION_MASK_ISA_AVX, CODE_FOR_avx_maskloadpd, \"__builtin_ia32_maskloadpd\", IX86_BUILTIN_MASKLOADPD, UNKNOWN, (int) V2DF_FTYPE_PCV2DF_V2DF },\n-  { OPTION_MASK_ISA_AVX, CODE_FOR_avx_maskloadps, \"__builtin_ia32_maskloadps\", IX86_BUILTIN_MASKLOADPS, UNKNOWN, (int) V4SF_FTYPE_PCV4SF_V4SF },\n-  { OPTION_MASK_ISA_AVX, CODE_FOR_avx_maskloadpd256, \"__builtin_ia32_maskloadpd256\", IX86_BUILTIN_MASKLOADPD256, UNKNOWN, (int) V4DF_FTYPE_PCV4DF_V4DF },\n-  { OPTION_MASK_ISA_AVX, CODE_FOR_avx_maskloadps256, \"__builtin_ia32_maskloadps256\", IX86_BUILTIN_MASKLOADPS256, UNKNOWN, (int) V8SF_FTYPE_PCV8SF_V8SF },\n-  { OPTION_MASK_ISA_AVX, CODE_FOR_avx_maskstorepd, \"__builtin_ia32_maskstorepd\", IX86_BUILTIN_MASKSTOREPD, UNKNOWN, (int) VOID_FTYPE_PV2DF_V2DF_V2DF },\n-  { OPTION_MASK_ISA_AVX, CODE_FOR_avx_maskstoreps, \"__builtin_ia32_maskstoreps\", IX86_BUILTIN_MASKSTOREPS, UNKNOWN, (int) VOID_FTYPE_PV4SF_V4SF_V4SF },\n-  { OPTION_MASK_ISA_AVX, CODE_FOR_avx_maskstorepd256, \"__builtin_ia32_maskstorepd256\", IX86_BUILTIN_MASKSTOREPD256, UNKNOWN, (int) VOID_FTYPE_PV4DF_V4DF_V4DF },\n-  { OPTION_MASK_ISA_AVX, CODE_FOR_avx_maskstoreps256, \"__builtin_ia32_maskstoreps256\", IX86_BUILTIN_MASKSTOREPS256, UNKNOWN, (int) VOID_FTYPE_PV8SF_V8SF_V8SF },\n+  { OPTION_MASK_ISA_AVX, CODE_FOR_avx_maskloadpd, \"__builtin_ia32_maskloadpd\", IX86_BUILTIN_MASKLOADPD, UNKNOWN, (int) V2DF_FTYPE_PCV2DF_V2DI },\n+  { OPTION_MASK_ISA_AVX, CODE_FOR_avx_maskloadps, \"__builtin_ia32_maskloadps\", IX86_BUILTIN_MASKLOADPS, UNKNOWN, (int) V4SF_FTYPE_PCV4SF_V4SI },\n+  { OPTION_MASK_ISA_AVX, CODE_FOR_avx_maskloadpd256, \"__builtin_ia32_maskloadpd256\", IX86_BUILTIN_MASKLOADPD256, UNKNOWN, (int) V4DF_FTYPE_PCV4DF_V4DI },\n+  { OPTION_MASK_ISA_AVX, CODE_FOR_avx_maskloadps256, \"__builtin_ia32_maskloadps256\", IX86_BUILTIN_MASKLOADPS256, UNKNOWN, (int) V8SF_FTYPE_PCV8SF_V8SI },\n+  { OPTION_MASK_ISA_AVX, CODE_FOR_avx_maskstorepd, \"__builtin_ia32_maskstorepd\", IX86_BUILTIN_MASKSTOREPD, UNKNOWN, (int) VOID_FTYPE_PV2DF_V2DI_V2DF },\n+  { OPTION_MASK_ISA_AVX, CODE_FOR_avx_maskstoreps, \"__builtin_ia32_maskstoreps\", IX86_BUILTIN_MASKSTOREPS, UNKNOWN, (int) VOID_FTYPE_PV4SF_V4SI_V4SF },\n+  { OPTION_MASK_ISA_AVX, CODE_FOR_avx_maskstorepd256, \"__builtin_ia32_maskstorepd256\", IX86_BUILTIN_MASKSTOREPD256, UNKNOWN, (int) VOID_FTYPE_PV4DF_V4DI_V4DF },\n+  { OPTION_MASK_ISA_AVX, CODE_FOR_avx_maskstoreps256, \"__builtin_ia32_maskstoreps256\", IX86_BUILTIN_MASKSTOREPS256, UNKNOWN, (int) VOID_FTYPE_PV8SF_V8SI_V8SF },\n \n   { OPTION_MASK_ISA_LWP, CODE_FOR_lwp_llwpcb, \"__builtin_ia32_llwpcb\", IX86_BUILTIN_LLWPCB, UNKNOWN, (int) VOID_FTYPE_PVOID },\n   { OPTION_MASK_ISA_LWP, CODE_FOR_lwp_slwpcb, \"__builtin_ia32_slwpcb\", IX86_BUILTIN_SLWPCB, UNKNOWN, (int) PVOID_FTYPE_VOID },\n@@ -26821,18 +26821,18 @@ ix86_expand_special_args_builtin (const struct builtin_description *d,\n       klass = load;\n       memory = 1;\n       break;\n-    case V8SF_FTYPE_PCV8SF_V8SF:\n-    case V4DF_FTYPE_PCV4DF_V4DF:\n-    case V4SF_FTYPE_PCV4SF_V4SF:\n-    case V2DF_FTYPE_PCV2DF_V2DF:\n+    case V8SF_FTYPE_PCV8SF_V8SI:\n+    case V4DF_FTYPE_PCV4DF_V4DI:\n+    case V4SF_FTYPE_PCV4SF_V4SI:\n+    case V2DF_FTYPE_PCV2DF_V2DI:\n       nargs = 2;\n       klass = load;\n       memory = 0;\n       break;\n-    case VOID_FTYPE_PV8SF_V8SF_V8SF:\n-    case VOID_FTYPE_PV4DF_V4DF_V4DF:\n-    case VOID_FTYPE_PV4SF_V4SF_V4SF:\n-    case VOID_FTYPE_PV2DF_V2DF_V2DF:\n+    case VOID_FTYPE_PV8SF_V8SI_V8SF:\n+    case VOID_FTYPE_PV4DF_V4DI_V4DF:\n+    case VOID_FTYPE_PV4SF_V4SI_V4SF:\n+    case VOID_FTYPE_PV2DF_V2DI_V2DF:\n       nargs = 2;\n       klass = store;\n       /* Reserve memory operand for target.  */"}, {"sha": "c6636a6d01ee2703ef26a6e49878770d268dc83c", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98c6d93c59237dad552956a69fc6b6057b9498a4/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98c6d93c59237dad552956a69fc6b6057b9498a4/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=98c6d93c59237dad552956a69fc6b6057b9498a4", "patch": "@@ -11938,7 +11938,7 @@\n   [(set (match_operand:AVXMODEF2P 0 \"register_operand\" \"=x\")\n \t(unspec:AVXMODEF2P\n \t  [(match_operand:AVXMODEF2P 1 \"memory_operand\" \"m\")\n-\t   (match_operand:AVXMODEF2P 2 \"register_operand\" \"x\")\n+\t   (match_operand:<avxpermvecmode> 2 \"register_operand\" \"x\")\n \t   (match_dup 0)]\n \t  UNSPEC_MASKLOAD))]\n   \"TARGET_AVX\"\n@@ -11951,7 +11951,7 @@\n (define_insn \"avx_maskstore<ssemodesuffix><avxmodesuffix>\"\n   [(set (match_operand:AVXMODEF2P 0 \"memory_operand\" \"=m\")\n \t(unspec:AVXMODEF2P\n-\t  [(match_operand:AVXMODEF2P 1 \"register_operand\" \"x\")\n+\t  [(match_operand:<avxpermvecmode> 1 \"register_operand\" \"x\")\n \t   (match_operand:AVXMODEF2P 2 \"register_operand\" \"x\")\n \t   (match_dup 0)]\n \t  UNSPEC_MASKSTORE))]"}, {"sha": "8db0111b9a8098592b01a743a6f901b8838ebdc9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98c6d93c59237dad552956a69fc6b6057b9498a4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98c6d93c59237dad552956a69fc6b6057b9498a4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=98c6d93c59237dad552956a69fc6b6057b9498a4", "patch": "@@ -1,3 +1,17 @@\n+2011-01-17  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/47318\n+\t* gcc.target/i386/avx-vmaskmovpd-1.c: New.\n+\t* gcc.target/i386/avx-vmaskmovpd-2.c: Likewise.\n+\t* gcc.target/i386/avx-vmaskmovps-1.c: Likewise.\n+\t* gcc.target/i386/avx-vmaskmovps-1.c: Likewise.\n+\n+\t* gcc.target/i386/avx-vmaskmovpd-256-1.c (avx_test): Load mask\n+\tas __m256i.\n+\t* gcc.target/i386/avx-vmaskmovpd-256-2.c (avx_test): Likewise.\n+\t* gcc.target/i386/avx-vmaskmovps-256-1.c (avx_test): Likewise.\n+\t* gcc.target/i386/avx-vmaskmovps-256-2.c (avx_test): Likewise.\n+\n 2011-01-17  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/45967"}, {"sha": "6204ebd287206880388ee5c72f493732d73de3c8", "filename": "gcc/testsuite/gcc.target/i386/avx-vmaskmovpd-1.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98c6d93c59237dad552956a69fc6b6057b9498a4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmaskmovpd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98c6d93c59237dad552956a69fc6b6057b9498a4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmaskmovpd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmaskmovpd-1.c?ref=98c6d93c59237dad552956a69fc6b6057b9498a4", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+#ifndef MASK\n+#define MASK 7\n+#endif\n+\n+#define mask_v(pos) (((MASK & (0x1ULL << (pos))) >> (pos)) << 63)\n+\n+void static\n+avx_test (void)\n+{\n+  int i;\n+  long long m[2] = {mask_v(0), mask_v(1)};\n+  double s[2] = {1.1, 2.2};\n+  union128d u;\n+  union128i_q mask;\n+  double e[2] = {0.0};\n+\n+  mask.x = _mm_loadu_si128 ((__m128i *)m);\n+  u.x = _mm_maskload_pd (s, mask.x);\n+\n+  for (i = 0 ; i < 2; i++) \n+    e[i] = m[i] ? s[i] : 0;\n+   \n+  if (check_union128d (u, e))\n+    abort ();\n+}"}, {"sha": "6bc620755f9af9f0218bec3f189d3b46b58a6e0b", "filename": "gcc/testsuite/gcc.target/i386/avx-vmaskmovpd-2.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98c6d93c59237dad552956a69fc6b6057b9498a4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmaskmovpd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98c6d93c59237dad552956a69fc6b6057b9498a4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmaskmovpd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmaskmovpd-2.c?ref=98c6d93c59237dad552956a69fc6b6057b9498a4", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+#ifndef MASK\n+#define MASK 6\n+#endif\n+\n+#define mask_v(pos) (((MASK & (0x1ULL << (pos))) >> (pos)) << 63)\n+\n+void static\n+avx_test (void)\n+{\n+  int i;\n+  long long m[2] = {mask_v(0), mask_v(1)};\n+  double s[2] = {1.1, 2.2};\n+  double e[2] = {0.0};\n+  double d[2] = {0.0};\n+  union128d src;\n+  union128i_q mask;\n+  \n+  src.x = _mm_loadu_pd (s);\n+  mask.x = _mm_loadu_si128 ((__m128i *)m);\n+  _mm_maskstore_pd (d, mask.x, src.x);\n+\n+  for (i = 0 ; i < 2; i++) \n+    e[i] = m[i] ? s[i] : 0;\n+   \n+  if (checkVd (d, e, 2))\n+    abort ();\n+}"}, {"sha": "e591c05c8e87b2949126b6ac9fb8ce0881f2be82", "filename": "gcc/testsuite/gcc.target/i386/avx-vmaskmovpd-256-1.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98c6d93c59237dad552956a69fc6b6057b9498a4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmaskmovpd-256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98c6d93c59237dad552956a69fc6b6057b9498a4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmaskmovpd-256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmaskmovpd-256-1.c?ref=98c6d93c59237dad552956a69fc6b6057b9498a4", "patch": "@@ -14,12 +14,13 @@ void static\n avx_test (void)\n {\n   int i;\n-  long long m[8] = {mask_v(0), mask_v(1), mask_v(2), mask_v(3)};\n+  long long m[4] = {mask_v(0), mask_v(1), mask_v(2), mask_v(3)};\n   double s[4] = {1.1, 2.2, 3.3, 4.4};\n-  union256d u, mask;\n+  union256d u;\n+  union256i_q mask;\n   double e [4] = {0.0};\n \n-  mask.x = _mm256_loadu_pd ((double*)m);\n+  mask.x = _mm256_loadu_si256 ((__m256i *)m);\n   u.x = _mm256_maskload_pd (s, mask.x);\n \n   for (i = 0 ; i < 4; i++) "}, {"sha": "5df2f94ee5f9d67b13c1f50996c96af1eef56062", "filename": "gcc/testsuite/gcc.target/i386/avx-vmaskmovpd-256-2.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98c6d93c59237dad552956a69fc6b6057b9498a4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmaskmovpd-256-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98c6d93c59237dad552956a69fc6b6057b9498a4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmaskmovpd-256-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmaskmovpd-256-2.c?ref=98c6d93c59237dad552956a69fc6b6057b9498a4", "patch": "@@ -18,10 +18,11 @@ avx_test (void)\n   double s[4] = {1.1, 2.2, 3.3, 4.4};\n   double e [4] = {0.0};\n   double d [4] = {0.0};\n-  union256d src, mask;\n+  union256d src;\n+  union256i_q mask;\n   \n   src.x = _mm256_loadu_pd (s);\n-  mask.x = _mm256_loadu_pd ((double*)m);\n+  mask.x = _mm256_loadu_si256 ((__m256i *)m);\n   _mm256_maskstore_pd (d, mask.x, src.x);\n \n   for (i = 0 ; i < 4; i++) "}, {"sha": "360a04dbaaa7785cb7de64ca6d03cebaf74f0522", "filename": "gcc/testsuite/gcc.target/i386/avx-vmaskmovps-1.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98c6d93c59237dad552956a69fc6b6057b9498a4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmaskmovps-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98c6d93c59237dad552956a69fc6b6057b9498a4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmaskmovps-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmaskmovps-1.c?ref=98c6d93c59237dad552956a69fc6b6057b9498a4", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+#ifndef MASK\n+#define MASK 134\n+#endif\n+\n+#define mask_v(pos) (((MASK & (0x1 << (pos))) >> (pos)) << 31)\n+\n+void static\n+avx_test (void)\n+{\n+  int i;\n+  int m[4] = {mask_v(0), mask_v(1), mask_v(2), mask_v(3)};\n+  float s[4] = {1,2,3,4};\n+  union128 u;\n+  union128i_d mask;\n+  float e[4] = {0.0};\n+\n+  mask.x = _mm_loadu_si128 ((__m128i *)m);\n+  u.x = _mm_maskload_ps (s, mask.x);\n+\n+  for (i = 0 ; i < 4; i++) \n+    e[i] = m[i] ? s[i] : 0;\n+   \n+  if (check_union128 (u, e))\n+    abort ();\n+}"}, {"sha": "3dde96557c038bb5584f55abe4cc478a5fd6030d", "filename": "gcc/testsuite/gcc.target/i386/avx-vmaskmovps-2.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98c6d93c59237dad552956a69fc6b6057b9498a4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmaskmovps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98c6d93c59237dad552956a69fc6b6057b9498a4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmaskmovps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmaskmovps-2.c?ref=98c6d93c59237dad552956a69fc6b6057b9498a4", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+\n+#ifndef MASK\n+#define MASK 214\n+#endif\n+\n+#define mask_v(pos) (((MASK & (0x1 << (pos))) >> (pos)) << 31)\n+\n+void static\n+avx_test (void)\n+{\n+  int i;\n+  int m[4] = {mask_v(0), mask_v(1), mask_v(2), mask_v(3)};\n+  float s[4] = {1,2,3,4};\n+  union128 src;\n+  union128i_d mask;\n+  float e[4] = {0.0};\n+  float d[4] = {0.0};\n+\n+  src.x = _mm_loadu_ps (s);\n+  mask.x = _mm_loadu_si128 ((__m128i *)m);\n+  _mm_maskstore_ps (d, mask.x, src.x);\n+\n+  for (i = 0 ; i < 4; i++) \n+    e[i] = m[i] ? s[i] : 0;\n+   \n+  if (checkVf (d, e, 4))\n+    abort ();\n+}"}, {"sha": "647ce3f6e61b42a04cfc007f8a03005f65bac209", "filename": "gcc/testsuite/gcc.target/i386/avx-vmaskmovps-256-1.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98c6d93c59237dad552956a69fc6b6057b9498a4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmaskmovps-256-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98c6d93c59237dad552956a69fc6b6057b9498a4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmaskmovps-256-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmaskmovps-256-1.c?ref=98c6d93c59237dad552956a69fc6b6057b9498a4", "patch": "@@ -16,10 +16,11 @@ avx_test (void)\n   int i;\n   int m[8] = {mask_v(0), mask_v(1), mask_v(2), mask_v(3), mask_v(4), mask_v(5), mask_v(6), mask_v(7)};\n   float s[8] = {1,2,3,4,5,6,7,8};\n-  union256 u, mask;\n+  union256 u;\n+  union256i_d mask;\n   float e [8] = {0.0};\n \n-  mask.x = _mm256_loadu_ps ((float*)m);\n+  mask.x = _mm256_loadu_si256 ((__m256i *)m);\n   u.x = _mm256_maskload_ps (s, mask.x);\n \n   for (i = 0 ; i < 8; i++) "}, {"sha": "016904d4638892e2bff605a564a1ac28b5c33687", "filename": "gcc/testsuite/gcc.target/i386/avx-vmaskmovps-256-2.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98c6d93c59237dad552956a69fc6b6057b9498a4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmaskmovps-256-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98c6d93c59237dad552956a69fc6b6057b9498a4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmaskmovps-256-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmaskmovps-256-2.c?ref=98c6d93c59237dad552956a69fc6b6057b9498a4", "patch": "@@ -16,12 +16,13 @@ avx_test (void)\n   int i;\n   int m[8] = {mask_v(0), mask_v(1), mask_v(2), mask_v(3), mask_v(4), mask_v(5), mask_v(6), mask_v(7)};\n   float s[8] = {1,2,3,4,5,6,7,8};\n-  union256 src, mask;\n+  union256 src;\n+  union256i_d mask;\n   float e [8] = {0.0};\n   float d [8] = {0.0};\n \n   src.x = _mm256_loadu_ps (s);\n-  mask.x = _mm256_loadu_ps ((float *)m);\n+  mask.x = _mm256_loadu_si256 ((__m256i *)m);\n   _mm256_maskstore_ps (d, mask.x, src.x);\n \n   for (i = 0 ; i < 8; i++) "}]}