{"sha": "b8a669d0a92615211bfa8e3556816e5bb38870e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjhhNjY5ZDBhOTI2MTUyMTFiZmE4ZTM1NTY4MTZlNWJiMzg4NzBlNQ==", "commit": {"author": {"name": "DJ Delorie", "email": "dj@redhat.com", "date": "2008-01-10T19:59:57Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2008-01-10T19:59:57Z"}, "message": "m32c.c (m32c_hard_regno_nregs_1): Renamed from...\n\n* config/m32c/m32c.c (m32c_hard_regno_nregs_1): Renamed from...\n(m32c_hard_regno_nregs): ...this, which is now a wrapper.\n(m32c_hard_regno_ok): Call the underlying function.\n\nFrom-SVN: r131449", "tree": {"sha": "cd5f157175fb62aa21848b5c419f701a84972ae4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd5f157175fb62aa21848b5c419f701a84972ae4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8a669d0a92615211bfa8e3556816e5bb38870e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8a669d0a92615211bfa8e3556816e5bb38870e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8a669d0a92615211bfa8e3556816e5bb38870e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8a669d0a92615211bfa8e3556816e5bb38870e5/comments", "author": null, "committer": null, "parents": [{"sha": "32be9f94bfc4c7246f9091764afc55ffca2db9c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32be9f94bfc4c7246f9091764afc55ffca2db9c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32be9f94bfc4c7246f9091764afc55ffca2db9c9"}], "stats": {"total": 19, "additions": 16, "deletions": 3}, "files": [{"sha": "5a47a8c611c1fd79d3c90c1f35ce0d5fda80d3e0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8a669d0a92615211bfa8e3556816e5bb38870e5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8a669d0a92615211bfa8e3556816e5bb38870e5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b8a669d0a92615211bfa8e3556816e5bb38870e5", "patch": "@@ -1,3 +1,9 @@\n+2008-01-10  DJ Delorie  <dj@redhat.com>\n+\n+\t* config/m32c/m32c.c (m32c_hard_regno_nregs_1): Renamed from...\n+\t(m32c_hard_regno_nregs): ...this, which is now a wrapper.\n+\t(m32c_hard_regno_ok): Call the underlying function.\n+\n 2008-01-10  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/34683"}, {"sha": "2b3bab54ffcd830bbeeea6ab5273f5029eecfa21", "filename": "gcc/config/m32c/m32c.c", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8a669d0a92615211bfa8e3556816e5bb38870e5/gcc%2Fconfig%2Fm32c%2Fm32c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8a669d0a92615211bfa8e3556816e5bb38870e5/gcc%2Fconfig%2Fm32c%2Fm32c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.c?ref=b8a669d0a92615211bfa8e3556816e5bb38870e5", "patch": "@@ -523,8 +523,8 @@ m32c_conditional_register_usage (void)\n /* Implements HARD_REGNO_NREGS.  This is complicated by the fact that\n    different registers are different sizes from each other, *and* may\n    be different sizes in different chip families.  */\n-int\n-m32c_hard_regno_nregs (int regno, enum machine_mode mode)\n+static int\n+m32c_hard_regno_nregs_1 (int regno, enum machine_mode mode)\n {\n   if (regno == FLG_REGNO && mode == CCmode)\n     return 1;\n@@ -549,12 +549,19 @@ m32c_hard_regno_nregs (int regno, enum machine_mode mode)\n   return 0;\n }\n \n+int\n+m32c_hard_regno_nregs (int regno, enum machine_mode mode)\n+{\n+  int rv = m32c_hard_regno_nregs_1 (regno, mode);\n+  return rv ? rv : 1;\n+}\n+\n /* Implements HARD_REGNO_MODE_OK.  The above function does the work\n    already; just test its return value.  */\n int\n m32c_hard_regno_ok (int regno, enum machine_mode mode)\n {\n-  return m32c_hard_regno_nregs (regno, mode) != 0;\n+  return m32c_hard_regno_nregs_1 (regno, mode) != 0;\n }\n \n /* Implements MODES_TIEABLE_P.  In general, modes aren't tieable since"}]}