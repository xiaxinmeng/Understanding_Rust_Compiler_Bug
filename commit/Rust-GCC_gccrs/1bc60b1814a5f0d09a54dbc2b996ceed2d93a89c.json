{"sha": "1bc60b1814a5f0d09a54dbc2b996ceed2d93a89c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWJjNjBiMTgxNGE1ZjBkMDlhNTRkYmMyYjk5NmNlZWQyZDkzYTg5Yw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2012-11-05T18:12:37Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2012-11-05T18:12:37Z"}, "message": "const-1.c: Update.\n\n\n\t* gcc.dg/const-1.c: Update.\n\t* gcc.dg/pure-1.c: Update.\n\t* tree-ssa-loop-niter.c (finite_loop_p): Revamp to be just wrapper of\n\tmax_loop_iterations.\n\nFrom-SVN: r193175", "tree": {"sha": "91ffd52466854d214f0dd5ccd4348d2921b8c811", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91ffd52466854d214f0dd5ccd4348d2921b8c811"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1bc60b1814a5f0d09a54dbc2b996ceed2d93a89c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bc60b1814a5f0d09a54dbc2b996ceed2d93a89c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bc60b1814a5f0d09a54dbc2b996ceed2d93a89c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bc60b1814a5f0d09a54dbc2b996ceed2d93a89c/comments", "author": null, "committer": null, "parents": [{"sha": "6d0ae0359c02628fa469d393739d564a630874b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d0ae0359c02628fa469d393739d564a630874b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d0ae0359c02628fa469d393739d564a630874b1"}], "stats": {"total": 49, "additions": 22, "deletions": 27}, "files": [{"sha": "026d62f07f1784eba570b378c42789141e4e9235", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc60b1814a5f0d09a54dbc2b996ceed2d93a89c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc60b1814a5f0d09a54dbc2b996ceed2d93a89c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1bc60b1814a5f0d09a54dbc2b996ceed2d93a89c", "patch": "@@ -1,3 +1,8 @@\n+2012-11-05  Jan Hubicka  <jh@suse.cz>\n+\n+\t* tree-ssa-loop-niter.c (finite_loop_p): Revamp to be just wrapper of\n+\tmax_loop_iterations.\n+\n 2012-11-05  Joern Rennecke  <joern.rennecke@embecosm.com>\n \n \t* reorg.c (fill_simple_delay_slots): Avoid calling optimize_skip"}, {"sha": "4d6a7dcc42c76f5dc077a99bb9b0ad5d77005a7d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc60b1814a5f0d09a54dbc2b996ceed2d93a89c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc60b1814a5f0d09a54dbc2b996ceed2d93a89c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1bc60b1814a5f0d09a54dbc2b996ceed2d93a89c", "patch": "@@ -1,3 +1,8 @@\n+2012-11-05  Jan Hubicka  <jh@suse.cz>\n+\n+\t* gcc.dg/const-1.c: Update.\n+\t* gcc.dg/pure-1.c: Update.\n+\n 2012-11-05  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/55151"}, {"sha": "2a532f8969e2b5e927045d04765e6b67effd4a99", "filename": "gcc/testsuite/gcc.dg/const-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc60b1814a5f0d09a54dbc2b996ceed2d93a89c/gcc%2Ftestsuite%2Fgcc.dg%2Fconst-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc60b1814a5f0d09a54dbc2b996ceed2d93a89c/gcc%2Ftestsuite%2Fgcc.dg%2Fconst-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fconst-1.c?ref=1bc60b1814a5f0d09a54dbc2b996ceed2d93a89c", "patch": "@@ -35,10 +35,10 @@ foo2b(int n)\n \n /* Unbounded loops are not safe.  */\n static int __attribute__ ((noinline))\n-foo3(int n)  /* { dg-warning \"const\\[^\\n\\]* normally\" \"detect const candidate\" } */\n+foo3(unsigned int n)  /* { dg-warning \"const\\[^\\n\\]* normally\" \"detect const candidate\" } */\n {\n   int ret = 0;\n-  int i;\n+  unsigned int i;\n   for (i=0; extern_const (i+n); n++)\n     ret+=extern_const (i);\n   return ret;"}, {"sha": "8c2ba56cd51ab79ff366b097b874d5d93f29df23", "filename": "gcc/testsuite/gcc.dg/pure-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc60b1814a5f0d09a54dbc2b996ceed2d93a89c/gcc%2Ftestsuite%2Fgcc.dg%2Fpure-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc60b1814a5f0d09a54dbc2b996ceed2d93a89c/gcc%2Ftestsuite%2Fgcc.dg%2Fpure-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpure-2.c?ref=1bc60b1814a5f0d09a54dbc2b996ceed2d93a89c", "patch": "@@ -35,10 +35,10 @@ foo2b(int n)\n \n /* Unbounded loops are not safe.  */\n static int __attribute__ ((noinline))\n-foo3(int n) /* { dg-warning \"pure\\[^\\n\\]* normally\" \"detect pure candidate\" } */\n+foo3(unsigned int n) /* { dg-warning \"pure\\[^\\n\\]* normally\" \"detect pure candidate\" } */\n {\n   int ret = 0;\n-  int i;\n+  unsigned int i;\n   for (i=0; extern_const (i+n); n++)\n     ret+=extern_const (i);\n   return ret;"}, {"sha": "3936e60ac635cec1c57394f2fa2184c969747162", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 8, "deletions": 23, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc60b1814a5f0d09a54dbc2b996ceed2d93a89c/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc60b1814a5f0d09a54dbc2b996ceed2d93a89c/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=1bc60b1814a5f0d09a54dbc2b996ceed2d93a89c", "patch": "@@ -1994,11 +1994,7 @@ find_loop_niter (struct loop *loop, edge *exit)\n bool\n finite_loop_p (struct loop *loop)\n {\n-  unsigned i;\n-  VEC (edge, heap) *exits;\n-  edge ex;\n-  struct tree_niter_desc desc;\n-  bool finite = false;\n+  double_int nit;\n   int flags;\n \n   if (flag_unsafe_loop_optimizations)\n@@ -2012,26 +2008,15 @@ finite_loop_p (struct loop *loop)\n       return true;\n     }\n \n-  exits = get_loop_exit_edges (loop);\n-  FOR_EACH_VEC_ELT (edge, exits, i, ex)\n+  if (loop->any_upper_bound\n+      || max_loop_iterations (loop, &nit))\n     {\n-      if (!just_once_each_iteration_p (loop, ex->src))\n-\tcontinue;\n-\n-      if (number_of_iterations_exit (loop, ex, &desc, false))\n-        {\n-\t  if (dump_file && (dump_flags & TDF_DETAILS))\n-\t    {\n-\t      fprintf (dump_file, \"Found loop %i to be finite: iterating \", loop->num);\n-\t      print_generic_expr (dump_file, desc.niter, TDF_SLIM);\n-\t      fprintf (dump_file, \" times\\n\");\n-\t    }\n-\t  finite = true;\n-\t  break;\n-\t}\n+      if (dump_file && (dump_flags & TDF_DETAILS))\n+\tfprintf (dump_file, \"Found loop %i to be finite: upper bound found.\\n\",\n+\t\t loop->num);\n+      return true;\n     }\n-  VEC_free (edge, heap, exits);\n-  return finite;\n+  return false;\n }\n \n /*"}]}