{"sha": "fbea267fef82191f9f195cfc99c28f656c6ab712", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmJlYTI2N2ZlZjgyMTkxZjlmMTk1Y2ZjOTljMjhmNjU2YzZhYjcxMg==", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@redhat.com", "date": "2004-01-08T03:52:52Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@gcc.gnu.org", "date": "2004-01-08T03:52:52Z"}, "message": "Container.java (LightweightDispatcher): Implement.\n\n2004-01-07  Graydon Hoare  <graydon@redhat.com>\n\n\t* java/awt/Container.java (LightweightDispatcher): Implement.\n\t(visitChild): Reuse graphics object.\n\t(dispatchEventImpl): Optionally dispatch to lightweight.\n\t(addNotifyContainerChildren): Build LightweightDispatcher.\n\nFrom-SVN: r75531", "tree": {"sha": "631fa94ca98b6e3575cb1905482ed449915df382", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/631fa94ca98b6e3575cb1905482ed449915df382"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fbea267fef82191f9f195cfc99c28f656c6ab712", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbea267fef82191f9f195cfc99c28f656c6ab712", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbea267fef82191f9f195cfc99c28f656c6ab712", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbea267fef82191f9f195cfc99c28f656c6ab712/comments", "author": null, "committer": null, "parents": [{"sha": "72827ed7fca83bc09c52813ff8f9de0f89151bad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72827ed7fca83bc09c52813ff8f9de0f89151bad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72827ed7fca83bc09c52813ff8f9de0f89151bad"}], "stats": {"total": 155, "additions": 128, "deletions": 27}, "files": [{"sha": "4193d342a38f3e136b8060a698577e22ea844487", "filename": "libjava/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbea267fef82191f9f195cfc99c28f656c6ab712/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbea267fef82191f9f195cfc99c28f656c6ab712/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=fbea267fef82191f9f195cfc99c28f656c6ab712", "patch": "@@ -1,3 +1,10 @@\n+2004-01-07  Graydon Hoare  <graydon@redhat.com>\n+\n+\t* java/awt/Container.java (LightweightDispatcher): Implement.\n+\t(visitChild): Reuse graphics object.\n+\t(dispatchEventImpl): Optionally dispatch to lightweight.\n+\t(addNotifyContainerChildren): Build LightweightDispatcher.\n+\n 2004-01-07  David Jee  <djee@redhat.com>\n \n \t* java/awt/Container.java"}, {"sha": "a42d293924ae8a24ae38c7519f8f7e153c24174c", "filename": "libjava/java/awt/Container.java", "status": "modified", "additions": 121, "deletions": 27, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbea267fef82191f9f195cfc99c28f656c6ab712/libjava%2Fjava%2Fawt%2FContainer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbea267fef82191f9f195cfc99c28f656c6ab712/libjava%2Fjava%2Fawt%2FContainer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FContainer.java?ref=fbea267fef82191f9f195cfc99c28f656c6ab712", "patch": "@@ -41,6 +41,7 @@\n import java.awt.event.ContainerEvent;\n import java.awt.event.ContainerListener;\n import java.awt.event.MouseEvent;\n+import java.awt.event.KeyEvent;\n import java.awt.peer.ContainerPeer;\n import java.awt.peer.LightweightPeer;\n import java.beans.PropertyChangeListener;\n@@ -1229,26 +1230,39 @@ private void visitChild(Graphics gfx, GfxVisitor visitor,\n                           Component comp)\n   {\n     Rectangle bounds = comp.getBounds();\n-    Rectangle clip = gfx.getClipBounds().intersection(bounds);\n+    Rectangle oldClip = gfx.getClipBounds();\n+    if (oldClip == null)\n+      oldClip = bounds;\n+    Rectangle clip = oldClip.intersection(bounds);\n \n     if (clip.isEmpty()) return;\n \n-    Graphics gfx2 = gfx.create();\n+    boolean clipped = false;\n+    boolean translated = false;\n     try\n       {\n-\tgfx2.setClip(clip.x, clip.y, clip.width, clip.height);\n-\tgfx2.translate(bounds.x, bounds.y);\n-\n-\tvisitor.visit(comp, gfx2);\n+        gfx.setClip(clip.x, clip.y, clip.width, clip.height);\n+        clipped = true;\n+        gfx.translate(bounds.x, bounds.y);\n+        translated = true;\n+        visitor.visit(comp, gfx);\n       }\n     finally\n       {\n-\tgfx2.dispose ();\n+        if (translated)\n+          gfx.translate (-bounds.x, -bounds.y);\n+        if (clipped)\n+          gfx.setClip (oldClip.x, oldClip.y, oldClip.width, oldClip.height);\n       }\n   }\n \n   void dispatchEventImpl(AWTEvent e)\n   {\n+    // Give lightweight dispatcher a chance to handle it.\n+    if (dispatcher != null \n+        && dispatcher.handleEvent (e))\n+      return;\n+\n     if ((e.id <= ContainerEvent.CONTAINER_LAST\n              && e.id >= ContainerEvent.CONTAINER_FIRST)\n         && (containerListener != null\n@@ -1319,6 +1333,17 @@ private void addNotifyContainerChildren()\n             component[i].addNotify();\n             if (component[i].isLightweight ())\n \t      {\n+\n+                // If we're not lightweight, and we just got a lightweight\n+                // child, we need a lightweight dispatcher to feed it events.\n+                if (! this.isLightweight() \n+                    && dispatcher == null)\n+                  {\n+                    dispatcher = new LightweightDispatcher (this);\n+                    dispatcher.enableEvents (component[i].eventMask);\n+                  }\t\n+\t  \n+\n \t\tenableEvents(component[i].eventMask);\n \t\tif (peer != null && !isLightweight ())\n \t\t  enableEvents (AWTEvent.PAINT_EVENT_MASK);\n@@ -1495,22 +1520,25 @@ public void componentRemoved(ContainerEvent e)\n } // class Container\n \n /**\n- * Undocumented helper class.\n- * STUBBED\n+ * There is a helper class implied from stack traces called\n+ * LightweightDispatcher, but since it is not part of the public API,\n+ * rather than mimic it exactly we write something which does \"roughly\n+ * the same thing\".\n  */\n-class LightweightDispatcher implements Serializable, AWTEventListener\n+\n+class LightweightDispatcher implements Serializable\n {\n   private static final long serialVersionUID = 5184291520170872969L;\n   private Container nativeContainer;\n   private Component focus;\n-  private transient Component mouseEventTarget;\n-  private transient Component targetLastEntered;\n-  private transient boolean isMouseInNativeContainer;\n   private Cursor nativeCursor;\n   private long eventMask;\n   \n+  private transient Component mouseEventTarget;\n+  \n   LightweightDispatcher(Container c)\n   {\n+    nativeContainer = c;\n   }\n \n   void dispose()\n@@ -1519,40 +1547,106 @@ void dispose()\n \n   void enableEvents(long l)\n   {\n+    eventMask |= l;\n   }\n \n-  boolean dispatchEvent(AWTEvent e)\n+  void mouseExit (MouseEvent me, int x, int y)\n   {\n-    return true;\n   }\n \n-  boolean isMouseGrab(MouseEvent e)\n+  void acquireComponentForMouseEvent (MouseEvent me)\n   {\n-    return true;\n-  }\n+    int x = me.getX ();\n+    int y = me.getY ();\n \n-  boolean processMouseEvent(MouseEvent e)\n+    Component candidate = mouseEventTarget;\n+\n+    boolean candidate_is_container_with_children = \n+\t    ((candidate != null)\n+\t     && (candidate instanceof Container)\n+\t     && (((Container)candidate).getComponentCount () > 0));\n+\n+    boolean candidate_does_not_contain_point =\n+\t    ((candidate != null)\n+\t     && (! candidate.contains (x - candidate.getX (),\n+                                 y - candidate.getY ())));\n+\n+    if (candidate == null\n+        || candidate_is_container_with_children\n+        || candidate_does_not_contain_point)\n   {\n-    return true;\n+        // Try to reacquire.\n+        candidate = nativeContainer.findComponentAt (x, y);\n   }\n \n-  void trackMouseEnterExit(Component c, MouseEvent e)\n+    if (mouseEventTarget != null\n+        && mouseEventTarget != candidate)\n   {\n+        int nx = x - mouseEventTarget.getX ();\n+        int ny = y - mouseEventTarget.getY ();\n+        MouseEvent exited = new MouseEvent (mouseEventTarget, \n+                                            MouseEvent.MOUSE_EXITED,\n+                                            me.getWhen (), \n+                                            me.getModifiers (), \n+                                            nx, ny,\n+                                            me.getClickCount (),\n+                                            me.isPopupTrigger (),\n+                                            me.getButton ());\n+        mouseEventTarget.dispatchEvent (exited); \n+        mouseEventTarget = null;\n   }\n \n-  void startListeningForOtherDrags()\n+    if (candidate != null)\n+\t    {\n+        // Possibly set new state.\n+        if (candidate.isLightweight() \n+            && candidate != nativeContainer\n+            && candidate != mouseEventTarget)\n   {\n+\t\t\t\n+            mouseEventTarget = candidate;\n+\t\t\t\n+            int nx = x - mouseEventTarget.getX ();\n+            int ny = y - mouseEventTarget.getY ();\n+\t\t\t\n+            // If acquired, enter it.\n+            MouseEvent entered = new MouseEvent (mouseEventTarget, \n+                                                 MouseEvent.MOUSE_ENTERED,\n+                                                 me.getWhen (), \n+                                                 me.getModifiers (), \n+                                                 nx, ny,\n+                                                 me.getClickCount (),\n+                                                 me.isPopupTrigger (),\n+                                                 me.getButton ());\n+            mouseEventTarget.dispatchEvent (entered);\n+          }\n+\t    }\n   }\n \n-  void stopListeningForOtherDrags()\n+  boolean handleEvent (AWTEvent e)\n   {\n-  }\n+    if ((eventMask & e.getID ()) == 0)\n+\t    return false;\n \n-  public void eventDispatched(AWTEvent e)\n+    if (e instanceof MouseEvent)\n   {\n-  }\n+        MouseEvent me = (MouseEvent) e;\n+        acquireComponentForMouseEvent (me);\n \n-  void retargetMouseEvent(Component c, int i, MouseEvent e)\n+        if (mouseEventTarget != null)\n+          {\n+            Component oldSource = (Component) me.getSource ();\n+            me.setSource (mouseEventTarget);\n+            mouseEventTarget.dispatchEvent (me);\n+            me.setSource (oldSource);\n+          }\n+\t    }\n+    else if (e instanceof KeyEvent && focus != null)\n   {\n+        focus.processKeyEvent ((KeyEvent) e);\n+\t    }\n+      \n+    return e.isConsumed();\n   }\n+\n } // class LightweightDispatcher"}]}