{"sha": "dd75498db79675a1a0b73c25e5f110969ee72d9d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQ3NTQ5OGRiNzk2NzVhMWEwYjczYzI1ZTVmMTEwOTY5ZWU3MmQ5ZA==", "commit": {"author": {"name": "Peter Bergner", "email": "bergner@linux.ibm.com", "date": "2020-04-17T04:26:41Z"}, "committer": {"name": "Peter Bergner", "email": "bergner@linux.ibm.com", "date": "2020-04-17T04:26:41Z"}, "message": "rs6000: Fix ICE in decompose_normal_address. [PR93974]\n\nFix an ICE in decompose_normal_address(), which cannot handle Altivec AND:\naddresses, by disallowing them via implementing the target hook\nrs6000_cannot_substitute_mem_equiv_p.\n\ngcc/\n\tPR rtl-optimization/93974\n\t* config/rs6000/rs6000.c (TARGET_CANNOT_SUBSTITUTE_MEM_EQUIV_P): Define.\n\t(rs6000_cannot_substitute_mem_equiv_p): New function.\n\ngcc/testsuite/\n\tPR rtl-optimization/93974\n\t* g++.dg/pr93974.C: New test.", "tree": {"sha": "2a922265561c7abda125081907967a1ef97345cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a922265561c7abda125081907967a1ef97345cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd75498db79675a1a0b73c25e5f110969ee72d9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd75498db79675a1a0b73c25e5f110969ee72d9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd75498db79675a1a0b73c25e5f110969ee72d9d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd75498db79675a1a0b73c25e5f110969ee72d9d/comments", "author": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fb9a619eee6632f89d9d8df1515addb9a4a6404", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fb9a619eee6632f89d9d8df1515addb9a4a6404", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fb9a619eee6632f89d9d8df1515addb9a4a6404"}], "stats": {"total": 58, "additions": 58, "deletions": 0}, "files": [{"sha": "53413e7b9437dd9eeac83ab7272d2a7436ae81a5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd75498db79675a1a0b73c25e5f110969ee72d9d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd75498db79675a1a0b73c25e5f110969ee72d9d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dd75498db79675a1a0b73c25e5f110969ee72d9d", "patch": "@@ -1,3 +1,9 @@\n+2020-04-16  Peter Bergner  <bergner@linux.ibm.com>\n+\n+\tPR rtl-optimization/93974\n+\t* config/rs6000/rs6000.c (TARGET_CANNOT_SUBSTITUTE_MEM_EQUIV_P): Define.\n+\t(rs6000_cannot_substitute_mem_equiv_p): New function.\n+\n 2020-04-16  Martin Jambor  <mjambor@suse.cz>\n \n \tPR ipa/93621"}, {"sha": "a2992e682c8f35a3c7e9c1a266bcd3735e7d5e09", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd75498db79675a1a0b73c25e5f110969ee72d9d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd75498db79675a1a0b73c25e5f110969ee72d9d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=dd75498db79675a1a0b73c25e5f110969ee72d9d", "patch": "@@ -1734,6 +1734,10 @@ static const struct attribute_spec rs6000_attribute_table[] =\n \n #undef TARGET_MANGLE_DECL_ASSEMBLER_NAME\n #define TARGET_MANGLE_DECL_ASSEMBLER_NAME rs6000_mangle_decl_assembler_name\n+\n+#undef TARGET_CANNOT_SUBSTITUTE_MEM_EQUIV_P\n+#define TARGET_CANNOT_SUBSTITUTE_MEM_EQUIV_P \\\n+  rs6000_cannot_substitute_mem_equiv_p\n \f\n \n /* Processor table.  */\n@@ -26375,6 +26379,22 @@ rs6000_predict_doloop_p (struct loop *loop)\n   return true;\n }\n \n+/* Implement TARGET_CANNOT_SUBSTITUTE_MEM_EQUIV_P.  */\n+\n+static bool\n+rs6000_cannot_substitute_mem_equiv_p (rtx mem)\n+{\n+  gcc_assert (MEM_P (mem));\n+\n+  /* curr_insn_transform()'s handling of subregs cannot handle altivec AND:\n+     type addresses, so don't allow MEMs with those address types to be\n+     substituted as an equivalent expression.  See PR93974 for details.  */\n+  if (GET_CODE (XEXP (mem, 0)) == AND)\n+    return true;\n+\n+  return false;\n+}\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-rs6000.h\""}, {"sha": "e10dc694e412d71afe95bd5435f9ddd7e0955608", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd75498db79675a1a0b73c25e5f110969ee72d9d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd75498db79675a1a0b73c25e5f110969ee72d9d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dd75498db79675a1a0b73c25e5f110969ee72d9d", "patch": "@@ -1,3 +1,8 @@\n+2020-04-16  Peter Bergner  <bergner@linux.ibm.com>\n+\n+\tPR rtl-optimization/93974\n+\t* g++.dg/pr93974.C: New test.\n+\n 2020-04-16  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* g++.dg/cpp0x/lambda/pr94426-2.C: Adjust scan-asms to test"}, {"sha": "562de0a60172cf3d0f2d63c5f006e8db06ffa06d", "filename": "gcc/testsuite/g++.dg/pr93974.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd75498db79675a1a0b73c25e5f110969ee72d9d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr93974.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd75498db79675a1a0b73c25e5f110969ee72d9d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr93974.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr93974.C?ref=dd75498db79675a1a0b73c25e5f110969ee72d9d", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-options \"-mdejagnu-cpu=power8 -O3 -fstack-protector-strong\" } */\n+\n+class a {\n+  double b[2];\n+public:\n+  a();\n+};\n+\n+class c {\n+public:\n+  typedef a d;\n+  d m_fn1() {\n+    a e;\n+    return e;\n+  }\n+};\n+template <typename f> void operator+(f, typename f::d);\n+void g() {\n+  c connector;\n+  for (;;) {\n+    c cut;\n+    a h = cut.m_fn1();\n+    connector + h;\n+  }\n+}"}]}