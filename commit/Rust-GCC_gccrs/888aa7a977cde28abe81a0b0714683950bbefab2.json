{"sha": "888aa7a977cde28abe81a0b0714683950bbefab2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODg4YWE3YTk3N2NkZTI4YWJlODFhMGIwNzE0NjgzOTUwYmJlZmFiMg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-10-07T18:38:02Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-10-07T18:38:02Z"}, "message": "(emit_library_call, emit_library_call_value):\n\nAllocate a temp slot if arg must be passed by reference.\n\nFrom-SVN: r5657", "tree": {"sha": "1de62f41e8b8212a1e892054888772bb7481fc0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1de62f41e8b8212a1e892054888772bb7481fc0e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/888aa7a977cde28abe81a0b0714683950bbefab2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/888aa7a977cde28abe81a0b0714683950bbefab2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/888aa7a977cde28abe81a0b0714683950bbefab2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/888aa7a977cde28abe81a0b0714683950bbefab2/comments", "author": null, "committer": null, "parents": [{"sha": "cbc580f02bff05c3ff0df52e91a7b330f6d166cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbc580f02bff05c3ff0df52e91a7b330f6d166cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbc580f02bff05c3ff0df52e91a7b330f6d166cb"}], "stats": {"total": 34, "additions": 26, "deletions": 8}, "files": [{"sha": "da23a6f4cebec7567de25f811a0dfc3dce92806a", "filename": "gcc/calls.c", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/888aa7a977cde28abe81a0b0714683950bbefab2/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/888aa7a977cde28abe81a0b0714683950bbefab2/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=888aa7a977cde28abe81a0b0714683950bbefab2", "patch": "@@ -2104,6 +2104,8 @@ emit_library_call (va_alist)\n   args_size.constant = 0;\n   args_size.var = 0;\n \n+  push_temp_slots ();\n+\n   for (count = 0; count < nargs; count++)\n     {\n       rtx val = va_arg (p, rtx);\n@@ -2130,14 +2132,19 @@ emit_library_call (va_alist)\n \t  && ! (CONSTANT_P (val) && LEGITIMATE_CONSTANT_P (val)))\n \tval = force_operand (val, NULL_RTX);\n \n-      argvec[count].value = val;\n-      argvec[count].mode = mode;\n-\n #ifdef FUNCTION_ARG_PASS_BY_REFERENCE\n       if (FUNCTION_ARG_PASS_BY_REFERENCE (args_so_far, mode, NULL_TREE, 1))\n-\tabort ();\n+\t{\n+\t  rtx slot = assign_stack_temp (mode, GET_MODE_SIZE (mode), 0);\n+\t  emit_move_insn (slot, val);\n+\t  val = XEXP (slot, 0);\n+\t  mode = SImode;\n+\t}\n #endif\n \n+      argvec[count].value = val;\n+      argvec[count].mode = mode;\n+\n       argvec[count].reg = FUNCTION_ARG (args_so_far, mode, NULL_TREE, 1);\n       if (argvec[count].reg && GET_CODE (argvec[count].reg) == EXPR_LIST)\n \tabort ();\n@@ -2303,6 +2310,8 @@ emit_library_call (va_alist)\n \t       outmode != VOIDmode ? hard_libcall_value (outmode) : NULL_RTX,\n \t       old_inhibit_defer_pop + 1, use_insns, no_queue);\n \n+  pop_temp_slots ();\n+\n   /* Now restore inhibit_defer_pop to its actual original value.  */\n   OK_DEFER_POP;\n }\n@@ -2390,6 +2399,8 @@ emit_library_call_value (va_alist)\n \n   count = 0;\n \n+  push_temp_slots ();\n+\n   /* If there's a structure value address to be passed,\n      either pass it in the special place, or pass it as an extra argument.  */\n   if (mem_value && struct_value_rtx == 0 && ! pcc_struct_value)\n@@ -2456,14 +2467,19 @@ emit_library_call_value (va_alist)\n \t  && ! (CONSTANT_P (val) && LEGITIMATE_CONSTANT_P (val)))\n \tval = force_operand (val, NULL_RTX);\n \n-      argvec[count].value = val;\n-      argvec[count].mode = mode;\n-\n #ifdef FUNCTION_ARG_PASS_BY_REFERENCE\n       if (FUNCTION_ARG_PASS_BY_REFERENCE (args_so_far, mode, NULL_TREE, 1))\n-\tabort ();\n+\t{\n+\t  rtx slot = assign_stack_temp (mode, GET_MODE_SIZE (mode), 0);\n+\t  emit_move_insn (slot, val);\n+\t  val = XEXP (slot, 0);\n+\t  mode = Pmode;\n+\t}\n #endif\n \n+      argvec[count].value = val;\n+      argvec[count].mode = mode;\n+\n       argvec[count].reg = FUNCTION_ARG (args_so_far, mode, NULL_TREE, 1);\n       if (argvec[count].reg && GET_CODE (argvec[count].reg) == EXPR_LIST)\n \tabort ();\n@@ -2651,6 +2667,8 @@ emit_library_call_value (va_alist)\n   /* Now restore inhibit_defer_pop to its actual original value.  */\n   OK_DEFER_POP;\n \n+  pop_temp_slots ();\n+\n   /* Copy the value to the right place.  */\n   if (outmode != VOIDmode)\n     {"}]}