{"sha": "052c96b1b05f5b170c38a927cf92c38e07d29791", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDUyYzk2YjFiMDVmNWIxNzBjMzhhOTI3Y2Y5MmMzOGUwN2QyOTc5MQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2002-07-16T10:24:11Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2002-07-16T10:24:11Z"}, "message": "i386.md (prefetch): Fix for 64bit mode.\n\n\t* i386.md (prefetch): Fix for 64bit mode.\n\t(prefetch_sse_rex, prefetch_3dnow_rex): New patterns.\n\n\t* i386.md (movss, movsd): Use xorps/xorpd for Athlon.\n\nFrom-SVN: r55481", "tree": {"sha": "2e614db8dbb5b2700f4abc72c0cd536902b3b20f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e614db8dbb5b2700f4abc72c0cd536902b3b20f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/052c96b1b05f5b170c38a927cf92c38e07d29791", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/052c96b1b05f5b170c38a927cf92c38e07d29791", "html_url": "https://github.com/Rust-GCC/gccrs/commit/052c96b1b05f5b170c38a927cf92c38e07d29791", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/052c96b1b05f5b170c38a927cf92c38e07d29791/comments", "author": null, "committer": null, "parents": [{"sha": "984812cd39f6597d95ccda84ea9d5e40dae9dbf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/984812cd39f6597d95ccda84ea9d5e40dae9dbf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/984812cd39f6597d95ccda84ea9d5e40dae9dbf6"}], "stats": {"total": 60, "additions": 54, "deletions": 6}, "files": [{"sha": "e326efc5f30ee291ea63d68f9f675809d32aaaca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/052c96b1b05f5b170c38a927cf92c38e07d29791/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/052c96b1b05f5b170c38a927cf92c38e07d29791/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=052c96b1b05f5b170c38a927cf92c38e07d29791", "patch": "@@ -1,3 +1,10 @@\n+Tue Jul 16 12:22:44 CEST 2002  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386.md (prefetch): Fix for 64bit mode.\n+\t(prefetch_sse_rex, prefetch_3dnow_rex): New patterns.\n+\n+\t* i386.md (movss, movsd): Use xorps/xorpd for Athlon.\n+\n 2002-07-16  Marek Michalkiewicz  <marekm@amelek.gda.pl>\n \n \t* hard-reg-set.h (TEST_HARD_REG_BIT): Return 1 if the bit is set."}, {"sha": "ccfa57bd59d05dd176e7e3c4323b0e443e6ab08c", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 47, "deletions": 6, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/052c96b1b05f5b170c38a927cf92c38e07d29791/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/052c96b1b05f5b170c38a927cf92c38e07d29791/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=052c96b1b05f5b170c38a927cf92c38e07d29791", "patch": "@@ -2129,7 +2129,7 @@\n     case 4:\n       return \"mov{l}\\t{%1, %0|%0, %1}\";\n     case 5:\n-      if (TARGET_SSE2)\n+      if (TARGET_SSE2 && !TARGET_ATHLON)\n \treturn \"pxor\\t%0, %0\";\n       else\n \treturn \"xorps\\t%0, %0\";\n@@ -2315,7 +2315,10 @@\n     case 4:\n       return \"#\";\n     case 5:\n-      return \"pxor\\t%0, %0\";\n+      if (TARGET_ATHLON)\n+        return \"xorpd\\t%0, %0\";\n+      else\n+        return \"pxor\\t%0, %0\";\n     case 6:\n       if (TARGET_PARTIAL_REG_DEPENDENCY)\n \treturn \"movapd\\t{%1, %0|%0, %1}\";\n@@ -2374,7 +2377,10 @@\n       return \"#\";\n \n     case 5:\n-      return \"pxor\\t%0, %0\";\n+      if (TARGET_ATHLON)\n+        return \"xorpd\\t%0, %0\";\n+      else\n+        return \"pxor\\t%0, %0\";\n     case 6:\n       if (TARGET_PARTIAL_REG_DEPENDENCY)\n \treturn \"movapd\\t{%1, %0|%0, %1}\";\n@@ -20015,7 +20021,7 @@\n    (set_attr \"mode\" \"TI\")])\n \n (define_expand \"prefetch\"\n-  [(prefetch (match_operand:SI 0 \"address_operand\" \"\")\n+  [(prefetch (match_operand 0 \"address_operand\" \"\")\n \t     (match_operand:SI 1 \"const_int_operand\" \"\")\n \t     (match_operand:SI 2 \"const_int_operand\" \"\"))]\n   \"TARGET_PREFETCH_SSE || TARGET_3DNOW\"\n@@ -20027,6 +20033,8 @@\n     abort ();\n   if (locality < 0 || locality > 3)\n     abort ();\n+  if (GET_MODE (operands[0]) != Pmode && GET_MODE (operands[0]) != VOIDmode)\n+    abort ();\n \n   /* Use 3dNOW prefetch in case we are asking for write prefetch not\n      suported by SSE counterpart or the SSE prefetch is not available\n@@ -20042,7 +20050,26 @@\n   [(prefetch (match_operand:SI 0 \"address_operand\" \"p\")\n \t     (const_int 0)\n \t     (match_operand:SI 1 \"const_int_operand\" \"\"))]\n-  \"TARGET_PREFETCH_SSE\"\n+  \"TARGET_PREFETCH_SSE && !TARGET_64BIT\"\n+{\n+  static const char * const patterns[4] = {\n+   \"prefetchnta\\t%a0\", \"prefetcht2\\t%a0\", \"prefetcht1\\t%a0\", \"prefetcht0\\t%a0\"\n+  };\n+\n+  int locality = INTVAL (operands[1]);\n+  if (locality < 0 || locality > 3)\n+    abort ();\n+\n+  return patterns[locality];  \n+}\n+  [(set_attr \"type\" \"sse\")\n+   (set_attr \"memory\" \"none\")])\n+\n+(define_insn \"*prefetch_sse_rex\"\n+  [(prefetch (match_operand:DI 0 \"address_operand\" \"p\")\n+\t     (const_int 0)\n+\t     (match_operand:SI 1 \"const_int_operand\" \"\"))]\n+  \"TARGET_PREFETCH_SSE && TARGET_64BIT\"\n {\n   static const char * const patterns[4] = {\n    \"prefetchnta\\t%a0\", \"prefetcht2\\t%a0\", \"prefetcht1\\t%a0\", \"prefetcht0\\t%a0\"\n@@ -20061,7 +20088,21 @@\n   [(prefetch (match_operand:SI 0 \"address_operand\" \"p\")\n \t     (match_operand:SI 1 \"const_int_operand\" \"n\")\n \t     (const_int 3))]\n-  \"TARGET_3DNOW\"\n+  \"TARGET_3DNOW && !TARGET_64BIT\"\n+{\n+  if (INTVAL (operands[1]) == 0)\n+    return \"prefetch\\t%a0\";\n+  else\n+    return \"prefetchw\\t%a0\";\n+}\n+  [(set_attr \"type\" \"mmx\")\n+   (set_attr \"memory\" \"none\")])\n+\n+(define_insn \"*prefetch_3dnow_rex\"\n+  [(prefetch (match_operand:DI 0 \"address_operand\" \"p\")\n+\t     (match_operand:SI 1 \"const_int_operand\" \"n\")\n+\t     (const_int 3))]\n+  \"TARGET_3DNOW && TARGET_64BIT\"\n {\n   if (INTVAL (operands[1]) == 0)\n     return \"prefetch\\t%a0\";"}]}