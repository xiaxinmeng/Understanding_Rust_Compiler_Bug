{"sha": "1ffbfc2659e7e8fa5c5d633869870af8fca5e8ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWZmYmZjMjY1OWU3ZThmYTVjNWQ2MzM4Njk4NzBhZjhmY2E1ZThlZQ==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-05-27T15:19:10Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-06-01T00:49:39Z"}, "message": "Range invariant global values are also always current.\n\nwhen a range evolves to the point where it becomes a constant, it is\nmarked as invariant.  Rather than marking it as always_current in the\ntimestamp, give it the correct timestamp and just never flag it as stale.\nThis will allow other names which use this value to become stale and be\nrecomputed using the newly invariant value.\n\n\tgcc/\n\tPR tree-optimization/100774\n\t* gimple-range-cache.cc (ranger_cache::get_non_stale_global_range):\n\tConstant values are also not stale.\n\t(ranger_cache::set_global_range): Range invariant values should also\n\thave the correct timestamp.\n\n\tgcc/testsuite\n\tPR tree-optimization/100774\n\t* g++.dg/pr100774.C: New.", "tree": {"sha": "85009b343a69deb4f32ec1b1dd4b634050a2a0f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85009b343a69deb4f32ec1b1dd4b634050a2a0f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ffbfc2659e7e8fa5c5d633869870af8fca5e8ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ffbfc2659e7e8fa5c5d633869870af8fca5e8ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ffbfc2659e7e8fa5c5d633869870af8fca5e8ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ffbfc2659e7e8fa5c5d633869870af8fca5e8ee/comments", "author": null, "committer": null, "parents": [{"sha": "ee682192755bb88af0ee10852e7c873b844d449f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee682192755bb88af0ee10852e7c873b844d449f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee682192755bb88af0ee10852e7c873b844d449f"}], "stats": {"total": 40, "additions": 32, "deletions": 8}, "files": [{"sha": "ef3bc04489114fc761ee576e01ed3bc2279b195a", "filename": "gcc/gimple-range-cache.cc", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ffbfc2659e7e8fa5c5d633869870af8fca5e8ee/gcc%2Fgimple-range-cache.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ffbfc2659e7e8fa5c5d633869870af8fca5e8ee/gcc%2Fgimple-range-cache.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-cache.cc?ref=1ffbfc2659e7e8fa5c5d633869870af8fca5e8ee", "patch": "@@ -639,7 +639,9 @@ ranger_cache::get_non_stale_global_range (irange &r, tree name)\n {\n   if (m_globals.get_global_range (r, name))\n     {\n-      if (m_temporal->current_p (name, depend1 (name), depend2 (name)))\n+      // Use this value if the range is constant or current.\n+      if (r.singleton_p ()\n+\t  || m_temporal->current_p (name, depend1 (name), depend2 (name)))\n \treturn true;\n     }\n   else\n@@ -674,15 +676,13 @@ ranger_cache::set_global_range (tree name, const irange &r)\n   // undefined. Propagation works better with constants. PR 100512.\n   // Pointers which resolve to non-zero also do not need\n   // tracking in the cache as they will never change.  See PR 98866.\n-  // Otherwise mark the value as up-to-date.\n+  // Timestamp must always be updated, or dependent calculations may\n+  // not include this latest value. PR 100774.\n+\n   if (r.singleton_p ()\n       || (POINTER_TYPE_P (TREE_TYPE (name)) && r.nonzero_p ()))\n-    {\n-      set_range_invariant (name);\n-      m_temporal->set_always_current (name);\n-    }\n-  else\n-    m_temporal->set_timestamp (name);\n+    set_range_invariant (name);\n+  m_temporal->set_timestamp (name);\n }\n \n // Push a request for a new lookup in block BB of name.  Return true if"}, {"sha": "345fcfa0d014ff44e8b653a1f6f82ed2f53e4cc3", "filename": "gcc/testsuite/g++.dg/pr100774.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ffbfc2659e7e8fa5c5d633869870af8fca5e8ee/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr100774.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ffbfc2659e7e8fa5c5d633869870af8fca5e8ee/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr100774.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr100774.C?ref=1ffbfc2659e7e8fa5c5d633869870af8fca5e8ee", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-tree-forwprop --param=evrp-mode=ranger -fcompare-debug  \" } */\n+\n+extern void __attribute__((noreturn)) error();\n+\n+int x;\n+\n+static inline int bar(void) {\n+  char n = 1;\n+  int i = x & 1U << n - 1;\n+  return i;\n+}\n+\n+void foo()\n+{\n+  int a = bar();\n+  for (;;) {\n+    bool b;\n+    int d = a;\n+    b = a < 2;\n+    if (!b)\n+      error();\n+  }\n+}"}]}