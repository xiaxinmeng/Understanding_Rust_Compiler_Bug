{"sha": "239020213ad9d057dd1e482d921df7c13016a755", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjM5MDIwMjEzYWQ5ZDA1N2RkMWU0ODJkOTIxZGY3YzEzMDE2YTc1NQ==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.vnet.ibm.com", "date": "2016-02-19T10:27:12Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2016-02-19T10:27:12Z"}, "message": "S/390: Add IBM z13 pipeline description\n\nThis patch adds proper support for the -mtune=z13 option by adding a\nz13 pipeline description.  As started with zEC12 we mostly make use of\nthe sched reorder hooks to implement a grouping strategy.  However,\nthis time we also keep an eye at the instruction mix provided in the\nout of order window to allow the hardware to exploit the different\nunits.\n\ngcc/ChangeLog:\n\n\t* config/s390/2827.md: Rename ooo_* insn attributes to zEC12_*.\n\t* config/s390/2964.md: New file.\n\t* config/s390/s390.c (s390_get_sched_attrmask): Use the right set\n\tof insn grouping attributes depending on the CPU level.\n\t(s390_get_unit_mask): New function.\n\t(s390_sched_score): Remove the OOO from the scheduling macros.\n\tAdd loop to calculate a score for the instruction mix.\n\t(s390_sched_reorder): Likewise plus improve debug output.\n\t(s390_sched_variable_issue): Rename macros as above.  Calculate\n\tthe unit distances after actually scheduling an insn.  Improve\n\tdebug output.\n\t(s390_sched_init): Clear last_scheduled_unit_distance array.\n\t* config/s390/s390.md: Include 2964.md.\n\nFrom-SVN: r233548", "tree": {"sha": "2e4e4460e2ae8872b23a513dcd3e20433c76ac35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e4e4460e2ae8872b23a513dcd3e20433c76ac35"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/239020213ad9d057dd1e482d921df7c13016a755", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/239020213ad9d057dd1e482d921df7c13016a755", "html_url": "https://github.com/Rust-GCC/gccrs/commit/239020213ad9d057dd1e482d921df7c13016a755", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/239020213ad9d057dd1e482d921df7c13016a755/comments", "author": null, "committer": null, "parents": [{"sha": "efc2340b5fc7a471ce895f0c6b655464a128f8a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efc2340b5fc7a471ce895f0c6b655464a128f8a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efc2340b5fc7a471ce895f0c6b655464a128f8a2"}], "stats": {"total": 519, "additions": 451, "deletions": 68}, "files": [{"sha": "e9a0ee3409121056175a4c62658e9de1fa31500f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/239020213ad9d057dd1e482d921df7c13016a755/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/239020213ad9d057dd1e482d921df7c13016a755/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=239020213ad9d057dd1e482d921df7c13016a755", "patch": "@@ -1,3 +1,19 @@\n+2016-02-19  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* config/s390/2827.md: Rename ooo_* insn attributes to zEC12_*.\n+\t* config/s390/2964.md: New file.\n+\t* config/s390/s390.c (s390_get_sched_attrmask): Use the right set\n+\tof insn grouping attributes depending on the CPU level.\n+\t(s390_get_unit_mask): New function.\n+\t(s390_sched_score): Remove the OOO from the scheduling macros.\n+\tAdd loop to calculate a score for the instruction mix.\n+\t(s390_sched_reorder): Likewise plus improve debug output.\n+\t(s390_sched_variable_issue): Rename macros as above.  Calculate\n+\tthe unit distances after actually scheduling an insn.  Improve\n+\tdebug output.\n+\t(s390_sched_init): Clear last_scheduled_unit_distance array.\n+\t* config/s390/s390.md: Include 2964.md.\n+\n 2016-02-18  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/69671"}, {"sha": "21a5ee9307b405b2949fc9c707070c5750c91907", "filename": "gcc/config/s390/2827.md", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/239020213ad9d057dd1e482d921df7c13016a755/gcc%2Fconfig%2Fs390%2F2827.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/239020213ad9d057dd1e482d921df7c13016a755/gcc%2Fconfig%2Fs390%2F2827.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2F2827.md?ref=239020213ad9d057dd1e482d921df7c13016a755", "patch": "@@ -18,20 +18,19 @@\n ;; along with GCC; see the file COPYING3.  If not see\n ;; <http://www.gnu.org/licenses/>.\n \n-\n-(define_attr \"ooo_cracked\" \"\"\n+(define_attr \"zEC12_cracked\" \"\"\n   (cond [(eq_attr \"mnemonic\" \"cgdbr,clfxtr,cdgtr,celfbr,cxgtr,clfebr,clc,lngfr,cs,cfxbr,xc,clfdbr,basr,ex,cxlgtr,clfdtr,srdl,lpgfr,cdlgbr,cgxtr,cxlftr,nc,cxftr,cdfbr,clfxbr,cdftr,clgxbr,cgdtr,cxlgbr,mvc,clgdtr,cegbr,cfebr,cdlftr,sldl,cdlgtr,csg,chhsi,clgebr,cxgbr,cxfbr,cdlfbr,cgebr,lzxr,oc,cdgbr,brasl,cgxbr,cxlfbr,clgxtr,exrl,cfdbr,celgbr,clgdbr,lxr,cpsdr,lcgfr,bras,srda,cefbr\") (const_int 1)]\n         (const_int 0)))\n \n-(define_attr \"ooo_expanded\" \"\"\n+(define_attr \"zEC12_expanded\" \"\"\n   (cond [(eq_attr \"mnemonic\" \"dlr,dsgr,d,dsgf,stam,dsgfr,dlgr,dsg,cds,dr,stm,mvc,dl,cdsg,stmy,dlg,stmg,lam\") (const_int 1)]\n         (const_int 0)))\n \n-(define_attr \"ooo_endgroup\" \"\"\n+(define_attr \"zEC12_endgroup\" \"\"\n   (cond [(eq_attr \"mnemonic\" \"ipm\") (const_int 1)]\n         (const_int 0)))\n \n-(define_attr \"ooo_groupalone\" \"\"\n+(define_attr \"zEC12_groupalone\" \"\"\n   (cond [(eq_attr \"mnemonic\" \"lnxbr,madb,ltxtr,clc,axtr,msebr,slbgr,xc,alcr,lpxbr,slbr,maebr,mlg,mfy,lxdtr,maeb,lxeb,nc,mxtr,sxtr,dxbr,alc,msdbr,ltxbr,lxdb,madbr,lxdbr,lxebr,mvc,m,mseb,mlr,mlgr,slb,tcxb,msdb,sqxbr,alcgr,oc,flogr,alcg,mxbr,dxtr,axbr,mr,sxbr,slbg,ml,lcxbr,bcr_flush\") (const_int 1)]\n         (const_int 0)))\n "}, {"sha": "d2211e1b96d15f30879095efb67a6aa0840a5db7", "filename": "gcc/config/s390/2964.md", "status": "added", "additions": 232, "deletions": 0, "changes": 232, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/239020213ad9d057dd1e482d921df7c13016a755/gcc%2Fconfig%2Fs390%2F2964.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/239020213ad9d057dd1e482d921df7c13016a755/gcc%2Fconfig%2Fs390%2F2964.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2F2964.md?ref=239020213ad9d057dd1e482d921df7c13016a755", "patch": "@@ -0,0 +1,232 @@\n+;; Scheduling description for z13.\n+;;   Copyright (C) 2016 Free Software Foundation, Inc.\n+;;   Contributed by Andreas Krebbel (Andreas.Krebbel@de.ibm.com)\n+\n+;; This file is part of GCC.\n+\n+;; GCC is free software; you can redistribute it and/or modify it under\n+;; the terms of the GNU General Public License as published by the Free\n+;; Software Foundation; either version 3, or (at your option) any later\n+;; version.\n+\n+;; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+;; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+;; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+;; for more details.\n+\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+\n+; generator options: vector_ecycs=12 cracked_ecycs=6 scale_ecycs=5\n+\n+(define_attr \"z13_cracked\" \"\"\n+  (cond [(eq_attr \"mnemonic\" \"celgbr,vscef,vsceg,exrl,clfebr,cefbr,chhsi,\\\n+vgef,vgeg,cdlftr,lcgfr,cfdbr,cgdbr,lzxr,cfxbr,rnsbg,cgdtr,cegbr,rxsbg,ex,\\\n+cgxtr,clfxtr,cdlgtr,brasl,efpc,cfebr,tbeginc,celfbr,clgxbr,vsteb,vsteh,\\\n+clfdtr,cdfbr,lngfr,clgebr,stpq,cs,lpgfr,cdlgbr,lpq,cdgtr,d,cgxbr,cdftr,\\\n+rosbg,clgdbr,cdgbr,bras,tbegin,clfdbr,cdlfbr,cgebr,clfxbr,lxr,csy,csg,clgdtr,\\\n+clgxtr\") (const_int 1)]\n+        (const_int 0)))\n+\n+(define_attr \"z13_expanded\" \"\"\n+  (cond [(eq_attr \"mnemonic\" \"cxlftr,cdsg,cdsy,stam,lam,dsgf,lmg,cxlgtr,\\\n+dl,cxftr,sldl,dsg,cxlfbr,cxgtr,stmg,stmy,stm,lm,cds,lmy,cxfbr,cxlgbr,srda,\\\n+srdl,cxgbr,dlg\") (const_int 1)]\n+        (const_int 0)))\n+\n+(define_attr \"z13_groupalone\" \"\"\n+  (cond [(eq_attr \"mnemonic\" \"mvc,dxbr,lxebr,axtr,cxtr,alcr,lxdb,lxeb,mxtr,\\\n+mfy,cxbr,dsgr,lcxbr,slb,mr,dr,alc,slbr,maebr,mlgr,dsgfr,sxtr,tdcxt,tabort,\\\n+msebr,lxdtr,ltxtr,slbg,ml,mxbr,maeb,oc,dxtr,msdb,sqxbr,mseb,xc,m,clc,mlg,\\\n+mlr,fixbra,alcgr,nc,sfpc,dlgr,fixbr,slbgr,fixtr,lpxbr,axbr,lxdbr,ltxbr,\\\n+tcxb,dlr,lnxbr,sxbr,flogr,alcg,tend,madb,bcr_flush\") (const_int 1)]\n+        (const_int 0)))\n+\n+(define_attr \"z13_endgroup\" \"\"\n+  (cond [(eq_attr \"mnemonic\" \"ipm\") (const_int 1)]\n+        (const_int 0)))\n+\n+(define_attr \"z13_unit_lsu\" \"\"\n+  (cond [(eq_attr \"mnemonic\" \"vlbb,mvc,llgc,llc,llhrl,vl,llghrl,vlrepf,\\\n+vlrepg,vlreph,lde,ldy,tabort,l,llh,ld,lg,ly,vlrepb,vllezb,vllezf,vllezg,\\\n+vllezh,oc,xc,clc,lrl,ear,nc,lgrl,sfpc,llgf,llgfrl,llgh,llgt,lcbb,vll,sar\") (const_int 1)]\n+        (const_int 0)))\n+\n+(define_attr \"z13_unit_fxu\" \"\"\n+  (cond [(eq_attr \"mnemonic\" \"s,lcgr,x,nop,oiy,ppa,ng,msy,sgrk,vstl,aghik,\\\n+msgf,ipm,mvi,stocg,rll,srlg,cghsi,clgit,srlk,alrk,sg,sh,sl,st,sy,vst,ark,\\\n+xgr,agsi,tm,nrk,shy,llhr,agf,alcr,slgfr,sr,clgrt,laa,lder,sgf,lan,llilf,\\\n+llilh,ag,llill,lay,al,n,laxg,ar,ahi,sgr,ntstg,ay,stcy,nopr,mfy,ngrk,lbr,\\\n+br,dsgr,stdy,ork,ldgr,lcr,cg,ch,lgfrl,cl,stoc,cr,agfr,stgrl,cy,alfi,xg,\\\n+cgfi,xi,clfhsi,cgfr,xr,slb,mghi,clfi,slg,clhhsi,agfi,clfit,sly,mr,ldr,nihf,\\\n+nihh,algfi,dr,nihl,algf,algfr,algr,clgf,clgr,clgt,aghi,alc,alg,locg,alr,\\\n+locr,cghi,aly,alghsik,slbr,clgfrl,mhy,cit,nr,ny,xiy,mlgr,sthy,cly,dsgfr,\\\n+rllg,cgit,lgb,lgf,clgrl,lgh,lrvgr,cliy,cgrl,lgr,slrk,clrt,icy,laog,og,agr,\\\n+mvhi,lhrl,or,lhr,vlvgp,lhy,nilf,oy,nilh,nill,lcdfr,mviy,tmhh,tmhl,sthrl,\\\n+ltgf,ltgr,srk,clghrl,ahy,vstef,vsteg,ah,vlgvb,llgcr,tmh,tml,clmy,slr,cfi,\\\n+stc,std,ste,stg,sth,locgr,slbg,sty,tmlh,la,lb,mvghi,lh,risbgn,lrvg,lr,asi,\\\n+lt,ahik,lrvr,cgf,cgh,cgr,clhrl,lzdr,tmll,mh,ml,vlvgb,ms,lrv,vlvgf,xgrk,\\\n+vlvgg,llgfr,vlvgh,slfi,chi,chy,mhi,lzer,alhsik,ni,ltgfr,loc,icm,oi,cgfrl,\\\n+agrk,lgat,oilh,llghr,lghrl,oill,xihf,lpgr,cgrt,clrl,sgfr,lpr,lgbr,strl,\\\n+algrk,alsi,srak,slgf,a,b,c,slgr,m,o,algsi,icmh,srag,iilf,ogrk,clg,icmy,\\\n+cli,clm,clr,clt,slgrk,mlg,lao,mlr,risbg,mvhhi,lat,etnd,lax,iihf,sra,alcgr,\\\n+msgr,clghsi,stey,ngr,xilf,laag,oihf,oihh,oihl,ltg,ltr,niy,lgfi,dlgr,lgfr,\\\n+slgfi,llcr,slbgr,chrl,lgdr,pfpo,lang,basr,sllg,sllk,lghi,lghr,vlgvf,vlgvg,\\\n+vlgvh,vlr,chsi,lngr,cghrl,srl,lhi,oilf,crl,crt,afi,xrk,llgtr,llihf,llihh,\\\n+llihl,dlr,msgfi,msgfr,msg,flogr,xy,msr,clgfi,clgfr,ogr,popcnt,alcg,lndfr,\\\n+larl,sll,tmy,msfi,ic,lpdfr,tend,lnr\") (const_int 1)]\n+        (const_int 0)))\n+\n+(define_attr \"z13_unit_vfu\" \"\"\n+  (cond [(eq_attr \"mnemonic\" \"seb,vcksm,vfadb,vleib,vchgs,vleif,vleig,vleih,\\\n+vgbm,verimb,vone,verimf,verimg,verimh,dxbr,verllvb,lpebr,verllvf,verllvg,\\\n+verllvh,vfeneb,wcdgb,vfenef,vfeneh,vchhs,vctzb,vctzf,vctzg,vctzh,vlcb,aeb,\\\n+vlcf,vlcg,vlch,vfmsdb,vgfmab,ltebr,vgfmaf,vgfmag,vgfmah,vmaeh,vsb,vsf,vsg,\\\n+vsh,vsl,vsq,lxebr,cdtr,fiebr,vupllb,vupllf,vupllh,vmrhb,madbr,vtm,vmrhf,\\\n+vmrhg,vmrhh,axtr,fiebra,vleb,cxtr,vlef,vleg,vleh,vpkf,vpkg,vpkh,vmlob,vmlof,\\\n+vmloh,lxdb,ldeb,mdtr,vceqfs,adb,wflndb,lxeb,vn,vo,vchlb,vx,mxtr,vchlf,vchlg,\\\n+vchlh,vfcedbs,vfcedb,vceqgs,cxbr,msdbr,vcdgb,debr,vceqhs,meeb,lcxbr,vavglb,\\\n+vavglf,vavglg,vavglh,wfcedbs,vmrlb,vmrlf,vmrlg,vmrlh,wfchedbs,vmxb,tcdb,\\\n+vmahh,vsrlb,wcgdb,lcdbr,vistrbs,vrepb,wfmdb,vrepf,vrepg,vreph,ler,wcdlgb,\\\n+ley,vistrb,vistrf,vistrh,tceb,wfsqdb,sqeb,vsumqf,vsumqg,vesrlb,vfeezbs,\\\n+maebr,vesrlf,vesrlg,vesrlh,vmeb,vmef,vmeh,meebr,vflcdb,wfmadb,vperm,sxtr,\\\n+vclzf,vgm,vgmb,vgmf,vgmg,vgmh,tdcxt,vzero,msebr,veslb,veslf,veslg,vfenezb,\\\n+vfenezf,vfenezh,vistrfs,vchf,vchg,vchh,vmhb,vmhf,vmhh,cdb,veslvb,ledbr,\\\n+veslvf,veslvg,veslvh,wclgdb,vfmdb,vmnlb,vmnlf,vmnlg,vmnlh,vclzb,vfeezfs,\\\n+vclzg,vclzh,mdb,vmxlb,vmxlf,vmxlg,vmxlh,ltdtr,vsbcbiq,ceb,wfddb,sebr,vistrhs,\\\n+lxdtr,lcebr,vab,vaf,vag,vah,ltxtr,vlpf,vlpg,vsegb,vaq,vsegf,vsegh,wfchdbs,\\\n+sdtr,cdbr,vfeezhs,le,wldeb,vfmadb,vchlbs,vacccq,vmaleb,vsel,vmalef,vmaleh,\\\n+vflndb,mdbr,vmlb,wflpdb,ldetr,vpksfs,vpksf,vpksg,vpksh,sqdb,mxbr,sqdbr,\\\n+vmaeb,veslh,vmaef,vpklsf,vpklsg,vpklsh,verllb,vchb,ddtr,verllf,verllg,verllh,\\\n+wfsdb,maeb,vclgdb,vftcidb,vpksgs,vmxf,vmxg,vmxh,fidbra,vmnb,vmnf,vmng,vfchedbs,\\\n+lnebr,vfidb,dxtr,ddb,msdb,vmalhb,vfddb,vmalhf,vmalhh,vpkshs,vfsdb,sqxbr,\\\n+vmalhw,ltdbr,vmob,vmof,vmoh,deb,vchlfs,mseb,vcdlgb,vlpb,wfmsdb,vlph,vmahb,\\\n+vldeb,vmahf,vgfmb,fidbr,vfsqdb,aebr,wledb,vchlgs,vesravb,vfchdbs,cebr,vesravf,\\\n+vesravg,vesravh,vcgdb,fixbra,vrepib,vrepif,vrepig,vrepih,tdcdt,vchlhs,vceqb,\\\n+vscbib,vceqf,vceqg,vscbif,vscbig,vscbih,vmlhw,vscbiq,vuphb,vuphf,vuphh,\\\n+vfchedb,tdcet,vslb,vpklsfs,adbr,sqebr,vfchdb,fixbr,vpklsgs,vsldb,vmleb,\\\n+vmlef,vmleh,cpsdr,vmalb,vmalf,vavgb,vmlf,vavgf,vavgg,vavgh,vgfmf,vgfmg,\\\n+vgfmh,fidtr,vpklshs,lndbr,vno,lpdbr,vacq,vledb,vchbs,vfeeb,vfeef,vfeeh,\\\n+fixtr,vaccb,wfadb,vaccf,vaccg,vacch,vnot,vmalob,vaccq,vmalof,vmaloh,lpxbr,\\\n+ledtr,vuplb,vuplf,axbr,lxdbr,ltxbr,vpopct,vpdi,vmlhb,vmlhf,vmlhh,sdbr,vnc,\\\n+vsumb,vsrab,vsumh,vmaob,vmaof,vmaoh,vesrlvb,vesrlvf,vesrlvg,vesrlvh,tcxb,\\\n+vceqbs,vceqh,lnxbr,sxbr,vesrab,wflcdb,vesraf,vesrag,vesrah,vflpdb,vmnh,\\\n+vsbiq,adtr,vsra,vsrl,vuplhb,sdb,vuplhf,vuplhh,vsumgf,vsumgh,ldebr,vuplhw,\\\n+vchfs,madb,ddbr\") (const_int 1)]\n+        (const_int 0)))\n+\n+(define_insn_reservation \"z13_0\" 0\n+  (and (eq_attr \"cpu\" \"z13\")\n+       (eq_attr \"mnemonic\" \"s,lcgr,x,nop,oiy,vlbb,ppa,ng,sgrk,vstl,aghik,\\\n+mvc,ipm,llgc,mvi,stocg,rll,jg,srlg,cghsi,clgit,srlk,alrk,sg,sh,sl,st,sy,\\\n+vst,ark,xgr,agsi,tm,nrk,shy,llhr,agf,alcr,slgfr,sr,clgrt,llc,laa,lder,sgf,\\\n+lan,llhrl,llilf,llilh,ag,llill,lay,al,n,laxg,ar,ahi,sgr,ntstg,ay,stcy,vl,\\\n+nopr,ngrk,lbr,br,stdy,ork,ldgr,lcr,cg,ch,llghrl,lgfrl,cl,stoc,cr,agfr,stgrl,\\\n+cy,alfi,xg,cgfi,xi,vlrepf,vlrepg,vlreph,clfhsi,cgfr,xr,slb,mghi,clfi,slg,\\\n+lde,clhhsi,agfi,clfit,sly,ldr,ldy,nihf,nihh,algfi,nihl,algf,algfr,algr,\\\n+clgf,clgr,clgt,aghi,alc,alg,locg,alr,locr,cghi,aly,alghsik,slbr,clgfrl,\\\n+mhy,cit,nr,ny,xiy,sthy,cly,rllg,cgit,lgb,lgf,clgrl,lgh,lrvgr,cliy,cgrl,\\\n+lgr,slrk,clrt,icy,laog,og,agr,mvhi,lhrl,or,lhr,vlvgp,lhy,nilf,oy,nilh,tabort,\\\n+nill,lcdfr,mviy,tmhh,tmhl,sthrl,ltgf,ltgr,srk,clghrl,ahy,vstef,vsteg,ah,\\\n+vlgvb,llgcr,tmh,tml,clmy,slr,cfi,stc,std,ste,stg,sth,l,locgr,llh,slbg,sty,\\\n+tmlh,la,lb,ld,mvghi,lg,lh,risbgn,lrvg,lr,asi,lt,ahik,ly,lrvr,vlrepb,vllezb,\\\n+cgf,cgh,vllezf,vllezg,vllezh,cgr,clhrl,lzdr,tmll,mh,vlvgb,lrv,vlvgf,xgrk,\\\n+vlvgg,llgfr,vlvgh,slfi,chi,chy,mhi,lzer,alhsik,ni,ltgfr,loc,icm,oc,oi,cgfrl,\\\n+agrk,lgat,oilh,llghr,lghrl,oill,xihf,lpgr,cgrt,clrl,sgfr,lpr,lgbr,strl,\\\n+algrk,alsi,srak,brcl,slgf,xc,a,b,c,slgr,j,o,algsi,icmh,srag,iilf,ogrk,clc,\\\n+clg,icmy,cli,clm,clr,clt,slgrk,lrl,lao,risbg,mvhhi,lat,etnd,lax,iihf,sra,\\\n+alcgr,clghsi,ear,nc,lgrl,stey,ngr,xilf,laag,oihf,oihh,oihl,ltg,ltr,niy,\\\n+lgfi,sfpc,lgfr,slgfi,llcr,llgf,llgfrl,llgh,slbgr,llgt,chrl,lgdr,pfpo,lang,\\\n+basr,lcbb,sllg,sllk,lghi,vll,lghr,vlgvf,vlgvg,vlgvh,vlr,chsi,lngr,cghrl,\\\n+srl,sar,lhi,oilf,crl,crt,afi,xrk,llgtr,llihf,llihh,llihl,xy,clgfi,clgfr,\\\n+ogr,popcnt,alcg,lndfr,larl,sll,tmy,ic,lpdfr,tend,lnr,bcr_flush\")) \"nothing\")\n+\n+(define_insn_reservation \"z13_1\" 1\n+  (and (eq_attr \"cpu\" \"z13\")\n+       (eq_attr \"mnemonic\" \"celgbr,vscef,vsceg,msy,msgf,cxlftr,cdsg,cdsy,\\\n+exrl,clfebr,cefbr,chhsi,stam,vgef,vgeg,cdlftr,lam,mfy,lcgfr,cfdbr,dsgf,\\\n+cgdbr,lzxr,lmg,cfxbr,rnsbg,cxlgtr,mr,dl,cxftr,sldl,cgdtr,cegbr,rxsbg,ex,\\\n+cgxtr,clfxtr,mlgr,cdlgtr,brasl,dsg,efpc,cfebr,tbeginc,celfbr,clgxbr,vsteb,\\\n+vsteh,cxlfbr,clfdtr,cxgtr,stmg,stmy,stm,lm,cds,cdfbr,ml,ms,lngfr,clgebr,\\\n+stpq,lmy,cs,lpgfr,cdlgbr,lpq,cxfbr,cxlgbr,cdgtr,d,m,mlg,mlr,cgxbr,cdftr,\\\n+msgr,rosbg,clgdbr,cdgbr,srda,bras,srdl,tbegin,clfdbr,cdlfbr,cxgbr,cgebr,\\\n+dlg,clfxbr,lxr,csy,msgfi,msgfr,msg,flogr,msr,csg,msfi,clgdtr,clgxtr\")) \"nothing\")\n+\n+(define_insn_reservation \"z13_2\" 2\n+  (and (eq_attr \"cpu\" \"z13\")\n+       (eq_attr \"mnemonic\" \"seb,vcksm,vfadb,vleib,vchgs,vleif,vleig,vleih,\\\n+vgbm,verimb,vone,verimf,verimg,verimh,verllvb,lpebr,verllvf,verllvg,verllvh,\\\n+vfeneb,wcdgb,vfenef,vfeneh,vchhs,vctzb,vctzf,vctzg,vctzh,vlcb,aeb,vlcf,\\\n+vlcg,vlch,vfmsdb,vgfmab,ltebr,vgfmaf,vgfmag,vgfmah,vmaeh,vsb,vsf,vsg,vsh,\\\n+vsl,vsq,lxebr,cdtr,fiebr,vupllb,vupllf,vupllh,vmrhb,madbr,vtm,vmrhf,vmrhg,\\\n+vmrhh,axtr,fiebra,vleb,cxtr,vlef,vleg,vleh,vpkf,vpkg,vpkh,vmlob,vmlof,vmloh,\\\n+lxdb,ldeb,vceqfs,adb,wflndb,lxeb,vn,vo,vchlb,vx,vchlf,vchlg,vchlh,vfcedbs,\\\n+vfcedb,vceqgs,cxbr,msdbr,vcdgb,vceqhs,meeb,lcxbr,vavglb,vavglf,vavglg,vavglh,\\\n+wfcedbs,vmrlb,vmrlf,vmrlg,vmrlh,wfchedbs,vmxb,tcdb,vmahh,vsrlb,wcgdb,lcdbr,\\\n+vistrbs,vrepb,wfmdb,vrepf,vrepg,vreph,ler,wcdlgb,ley,vistrb,vistrf,vistrh,\\\n+tceb,vsumqf,vsumqg,vesrlb,vfeezbs,maebr,vesrlf,vesrlg,vesrlh,vmeb,vmef,\\\n+vmeh,meebr,vflcdb,wfmadb,vperm,sxtr,vclzf,vgm,vgmb,vgmf,vgmg,vgmh,tdcxt,\\\n+vzero,msebr,veslb,veslf,veslg,vfenezb,vfenezf,vfenezh,vistrfs,vchf,vchg,\\\n+vchh,vmhb,vmhf,vmhh,cdb,veslvb,ledbr,veslvf,veslvg,veslvh,wclgdb,vfmdb,\\\n+vmnlb,vmnlf,vmnlg,vmnlh,vclzb,vfeezfs,vclzg,vclzh,mdb,vmxlb,vmxlf,vmxlg,\\\n+vmxlh,ltdtr,vsbcbiq,ceb,sebr,vistrhs,lxdtr,lcebr,vab,vaf,vag,vah,ltxtr,\\\n+vlpf,vlpg,vsegb,vaq,vsegf,vsegh,wfchdbs,sdtr,cdbr,vfeezhs,le,wldeb,vfmadb,\\\n+vchlbs,vacccq,vmaleb,vsel,vmalef,vmaleh,vflndb,mdbr,vmlb,wflpdb,ldetr,vpksfs,\\\n+vpksf,vpksg,vpksh,vmaeb,veslh,vmaef,vpklsf,vpklsg,vpklsh,verllb,vchb,verllf,\\\n+verllg,verllh,wfsdb,maeb,vclgdb,vftcidb,vpksgs,vmxf,vmxg,vmxh,fidbra,vmnb,\\\n+vmnf,vmng,vfchedbs,lnebr,vfidb,msdb,vmalhb,vmalhf,vmalhh,vpkshs,vfsdb,vmalhw,\\\n+ltdbr,vmob,vmof,vmoh,vchlfs,mseb,vcdlgb,vlpb,wfmsdb,vlph,vmahb,vldeb,vmahf,\\\n+vgfmb,fidbr,aebr,wledb,vchlgs,vesravb,vfchdbs,cebr,vesravf,vesravg,vesravh,\\\n+vcgdb,fixbra,vrepib,vrepif,vrepig,vrepih,tdcdt,vchlhs,vceqb,vscbib,vceqf,\\\n+vceqg,vscbif,vscbig,vscbih,vmlhw,vscbiq,vuphb,vuphf,vuphh,vfchedb,tdcet,\\\n+vslb,vpklsfs,adbr,vfchdb,fixbr,vpklsgs,vsldb,vmleb,vmlef,vmleh,cpsdr,vmalb,\\\n+vmalf,vavgb,vmlf,vavgf,vavgg,vavgh,vgfmf,vgfmg,vgfmh,fidtr,vpklshs,lndbr,\\\n+vno,lpdbr,vacq,vledb,vchbs,vfeeb,vfeef,vfeeh,fixtr,vaccb,wfadb,vaccf,vaccg,\\\n+vacch,vnot,vmalob,vaccq,vmalof,vmaloh,lpxbr,vuplb,vuplf,axbr,lxdbr,ltxbr,\\\n+vpopct,vpdi,vmlhb,vmlhf,vmlhh,sdbr,vnc,vsumb,vsrab,vsumh,vmaob,vmaof,vmaoh,\\\n+vesrlvb,vesrlvf,vesrlvg,vesrlvh,tcxb,vceqbs,vceqh,lnxbr,sxbr,vesrab,wflcdb,\\\n+vesraf,vesrag,vesrah,vflpdb,vmnh,vsbiq,adtr,vsra,vsrl,vuplhb,sdb,vuplhf,\\\n+vuplhh,vsumgf,vsumgh,ldebr,vuplhw,vchfs,madb\")) \"nothing\")\n+\n+(define_insn_reservation \"z13_3\" 3\n+  (and (eq_attr \"cpu\" \"z13\")\n+       (eq_attr \"mnemonic\" \"ledtr\")) \"nothing\")\n+\n+(define_insn_reservation \"z13_4\" 4\n+  (and (eq_attr \"cpu\" \"z13\")\n+       (eq_attr \"mnemonic\" \"dr,mxbr,dlr\")) \"nothing\")\n+\n+(define_insn_reservation \"z13_6\" 6\n+  (and (eq_attr \"cpu\" \"z13\")\n+       (eq_attr \"mnemonic\" \"debr,sqeb,deb,sqebr\")) \"nothing\")\n+\n+(define_insn_reservation \"z13_7\" 7\n+  (and (eq_attr \"cpu\" \"z13\")\n+       (eq_attr \"mnemonic\" \"mdtr\")) \"nothing\")\n+\n+(define_insn_reservation \"z13_8\" 8\n+  (and (eq_attr \"cpu\" \"z13\")\n+       (eq_attr \"mnemonic\" \"wfddb,ddb,vfddb,ddbr\")) \"nothing\")\n+\n+(define_insn_reservation \"z13_9\" 9\n+  (and (eq_attr \"cpu\" \"z13\")\n+       (eq_attr \"mnemonic\" \"dsgr,wfsqdb,dsgfr,sqdb,sqdbr,vfsqdb\")) \"nothing\")\n+\n+(define_insn_reservation \"z13_13\" 13\n+  (and (eq_attr \"cpu\" \"z13\")\n+       (eq_attr \"mnemonic\" \"mxtr,ddtr\")) \"nothing\")\n+\n+(define_insn_reservation \"z13_16\" 16\n+  (and (eq_attr \"cpu\" \"z13\")\n+       (eq_attr \"mnemonic\" \"sqxbr\")) \"nothing\")\n+\n+(define_insn_reservation \"z13_17\" 17\n+  (and (eq_attr \"cpu\" \"z13\")\n+       (eq_attr \"mnemonic\" \"dxtr\")) \"nothing\")\n+\n+(define_insn_reservation \"z13_20\" 20\n+  (and (eq_attr \"cpu\" \"z13\")\n+       (eq_attr \"mnemonic\" \"dxbr,dlgr\")) \"nothing\")\n+"}, {"sha": "c2e59f56613a5b2b9641da1ca7a3c719c6717b23", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 196, "deletions": 63, "changes": 259, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/239020213ad9d057dd1e482d921df7c13016a755/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/239020213ad9d057dd1e482d921df7c13016a755/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=239020213ad9d057dd1e482d921df7c13016a755", "patch": "@@ -340,6 +340,19 @@ extern int reload_completed;\n \n /* Kept up to date using the SCHED_VARIABLE_ISSUE hook.  */\n static rtx_insn *last_scheduled_insn;\n+#define MAX_SCHED_UNITS 3\n+static int last_scheduled_unit_distance[MAX_SCHED_UNITS];\n+\n+/* The maximum score added for an instruction whose unit hasn't been\n+   in use for MAX_SCHED_MIX_DISTANCE steps.  Increase this value to\n+   give instruction mix scheduling more priority over instruction\n+   grouping.  */\n+#define MAX_SCHED_MIX_SCORE      8\n+\n+/* The maximum distance up to which individual scores will be\n+   calculated.  Everything beyond this gives MAX_SCHED_MIX_SCORE.\n+   Increase this with the OOO windows size of the machine.  */\n+#define MAX_SCHED_MIX_DISTANCE 100\n \n /* Structure used to hold the components of a S/390 memory\n    address.  A legitimate address on S/390 is of the general\n@@ -13560,27 +13573,66 @@ s390_z10_prevent_earlyload_conflicts (rtx_insn **ready, int *nready_p)\n \n static int s390_sched_state;\n \n-#define S390_OOO_SCHED_STATE_NORMAL  3\n-#define S390_OOO_SCHED_STATE_CRACKED 4\n+#define S390_SCHED_STATE_NORMAL  3\n+#define S390_SCHED_STATE_CRACKED 4\n \n-#define S390_OOO_SCHED_ATTR_MASK_CRACKED    0x1\n-#define S390_OOO_SCHED_ATTR_MASK_EXPANDED   0x2\n-#define S390_OOO_SCHED_ATTR_MASK_ENDGROUP   0x4\n-#define S390_OOO_SCHED_ATTR_MASK_GROUPALONE 0x8\n+#define S390_SCHED_ATTR_MASK_CRACKED    0x1\n+#define S390_SCHED_ATTR_MASK_EXPANDED   0x2\n+#define S390_SCHED_ATTR_MASK_ENDGROUP   0x4\n+#define S390_SCHED_ATTR_MASK_GROUPALONE 0x8\n \n static unsigned int\n s390_get_sched_attrmask (rtx_insn *insn)\n {\n   unsigned int mask = 0;\n \n-  if (get_attr_ooo_cracked (insn))\n-    mask |= S390_OOO_SCHED_ATTR_MASK_CRACKED;\n-  if (get_attr_ooo_expanded (insn))\n-    mask |= S390_OOO_SCHED_ATTR_MASK_EXPANDED;\n-  if (get_attr_ooo_endgroup (insn))\n-    mask |= S390_OOO_SCHED_ATTR_MASK_ENDGROUP;\n-  if (get_attr_ooo_groupalone (insn))\n-    mask |= S390_OOO_SCHED_ATTR_MASK_GROUPALONE;\n+  switch (s390_tune)\n+    {\n+    case PROCESSOR_2827_ZEC12:\n+      if (get_attr_zEC12_cracked (insn))\n+\tmask |= S390_SCHED_ATTR_MASK_CRACKED;\n+      if (get_attr_zEC12_expanded (insn))\n+\tmask |= S390_SCHED_ATTR_MASK_EXPANDED;\n+      if (get_attr_zEC12_endgroup (insn))\n+\tmask |= S390_SCHED_ATTR_MASK_ENDGROUP;\n+      if (get_attr_zEC12_groupalone (insn))\n+\tmask |= S390_SCHED_ATTR_MASK_GROUPALONE;\n+      break;\n+    case PROCESSOR_2964_Z13:\n+      if (get_attr_z13_cracked (insn))\n+\tmask |= S390_SCHED_ATTR_MASK_CRACKED;\n+      if (get_attr_z13_expanded (insn))\n+\tmask |= S390_SCHED_ATTR_MASK_EXPANDED;\n+      if (get_attr_z13_endgroup (insn))\n+\tmask |= S390_SCHED_ATTR_MASK_ENDGROUP;\n+      if (get_attr_z13_groupalone (insn))\n+\tmask |= S390_SCHED_ATTR_MASK_GROUPALONE;\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n+  return mask;\n+}\n+\n+static unsigned int\n+s390_get_unit_mask (rtx_insn *insn, int *units)\n+{\n+  unsigned int mask = 0;\n+\n+  switch (s390_tune)\n+    {\n+    case PROCESSOR_2964_Z13:\n+      *units = 3;\n+      if (get_attr_z13_unit_lsu (insn))\n+\tmask |= 1 << 0;\n+      if (get_attr_z13_unit_fxu (insn))\n+\tmask |= 1 << 1;\n+      if (get_attr_z13_unit_vfu (insn))\n+\tmask |= 1 << 2;\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n   return mask;\n }\n \n@@ -13598,48 +13650,66 @@ s390_sched_score (rtx_insn *insn)\n     case 0:\n       /* Try to put insns into the first slot which would otherwise\n \t break a group.  */\n-      if ((mask & S390_OOO_SCHED_ATTR_MASK_CRACKED) != 0\n-\t  || (mask & S390_OOO_SCHED_ATTR_MASK_EXPANDED) != 0)\n+      if ((mask & S390_SCHED_ATTR_MASK_CRACKED) != 0\n+\t  || (mask & S390_SCHED_ATTR_MASK_EXPANDED) != 0)\n \tscore += 5;\n-      if ((mask & S390_OOO_SCHED_ATTR_MASK_GROUPALONE) != 0)\n+      if ((mask & S390_SCHED_ATTR_MASK_GROUPALONE) != 0)\n \tscore += 10;\n     case 1:\n       /* Prefer not cracked insns while trying to put together a\n \t group.  */\n-      if ((mask & S390_OOO_SCHED_ATTR_MASK_CRACKED) == 0\n-\t  && (mask & S390_OOO_SCHED_ATTR_MASK_EXPANDED) == 0\n-\t  && (mask & S390_OOO_SCHED_ATTR_MASK_GROUPALONE) == 0)\n+      if ((mask & S390_SCHED_ATTR_MASK_CRACKED) == 0\n+\t  && (mask & S390_SCHED_ATTR_MASK_EXPANDED) == 0\n+\t  && (mask & S390_SCHED_ATTR_MASK_GROUPALONE) == 0)\n \tscore += 10;\n-      if ((mask & S390_OOO_SCHED_ATTR_MASK_ENDGROUP) == 0)\n+      if ((mask & S390_SCHED_ATTR_MASK_ENDGROUP) == 0)\n \tscore += 5;\n       break;\n     case 2:\n       /* Prefer not cracked insns while trying to put together a\n \t group.  */\n-      if ((mask & S390_OOO_SCHED_ATTR_MASK_CRACKED) == 0\n-\t  && (mask & S390_OOO_SCHED_ATTR_MASK_EXPANDED) == 0\n-\t  && (mask & S390_OOO_SCHED_ATTR_MASK_GROUPALONE) == 0)\n+      if ((mask & S390_SCHED_ATTR_MASK_CRACKED) == 0\n+\t  && (mask & S390_SCHED_ATTR_MASK_EXPANDED) == 0\n+\t  && (mask & S390_SCHED_ATTR_MASK_GROUPALONE) == 0)\n \tscore += 10;\n       /* Prefer endgroup insns in the last slot.  */\n-      if ((mask & S390_OOO_SCHED_ATTR_MASK_ENDGROUP) != 0)\n+      if ((mask & S390_SCHED_ATTR_MASK_ENDGROUP) != 0)\n \tscore += 10;\n       break;\n-    case S390_OOO_SCHED_STATE_NORMAL:\n+    case S390_SCHED_STATE_NORMAL:\n       /* Prefer not cracked insns if the last was not cracked.  */\n-      if ((mask & S390_OOO_SCHED_ATTR_MASK_CRACKED) == 0\n-\t  && (mask & S390_OOO_SCHED_ATTR_MASK_EXPANDED) == 0)\n+      if ((mask & S390_SCHED_ATTR_MASK_CRACKED) == 0\n+\t  && (mask & S390_SCHED_ATTR_MASK_EXPANDED) == 0)\n \tscore += 5;\n-      if ((mask & S390_OOO_SCHED_ATTR_MASK_GROUPALONE) != 0)\n+      if ((mask & S390_SCHED_ATTR_MASK_GROUPALONE) != 0)\n \tscore += 10;\n       break;\n-    case S390_OOO_SCHED_STATE_CRACKED:\n+    case S390_SCHED_STATE_CRACKED:\n       /* Try to keep cracked insns together to prevent them from\n \t interrupting groups.  */\n-      if ((mask & S390_OOO_SCHED_ATTR_MASK_CRACKED) != 0\n-\t  || (mask & S390_OOO_SCHED_ATTR_MASK_EXPANDED) != 0)\n+      if ((mask & S390_SCHED_ATTR_MASK_CRACKED) != 0\n+\t  || (mask & S390_SCHED_ATTR_MASK_EXPANDED) != 0)\n \tscore += 5;\n       break;\n     }\n+\n+  if (s390_tune == PROCESSOR_2964_Z13)\n+    {\n+      int units, i;\n+      unsigned unit_mask, m = 1;\n+\n+      unit_mask = s390_get_unit_mask (insn, &units);\n+      gcc_assert (units <= MAX_SCHED_UNITS);\n+\n+      /* Add a score in range 0..MAX_SCHED_MIX_SCORE depending on how long\n+\t ago the last insn of this unit type got scheduled.  This is\n+\t supposed to help providing a proper instruction mix to the\n+\t CPU.  */\n+      for (i = 0; i < units; i++, m <<= 1)\n+\tif (m & unit_mask)\n+\t  score += (last_scheduled_unit_distance[i] * MAX_SCHED_MIX_SCORE /\n+\t\t    MAX_SCHED_MIX_DISTANCE);\n+    }\n   return score;\n }\n \n@@ -13695,12 +13765,12 @@ s390_sched_reorder (FILE *file, int verbose,\n \n \t      if (verbose > 5)\n \t\tfprintf (file,\n-\t\t\t \"move insn %d to the top of list\\n\",\n+\t\t\t \";;\\t\\tBACKEND: move insn %d to the top of list\\n\",\n \t\t\t INSN_UID (ready[last_index]));\n \t    }\n \t  else if (verbose > 5)\n \t    fprintf (file,\n-\t\t     \"best insn %d already on top\\n\",\n+\t\t     \";;\\t\\tBACKEND: best insn %d already on top\\n\",\n \t\t     INSN_UID (ready[last_index]));\n \t}\n \n@@ -13711,16 +13781,35 @@ s390_sched_reorder (FILE *file, int verbose,\n \n \t  for (i = last_index; i >= 0; i--)\n \t    {\n-\t      if (recog_memoized (ready[i]) < 0)\n+\t      unsigned int sched_mask;\n+\t      rtx_insn *insn = ready[i];\n+\n+\t      if (recog_memoized (insn) < 0)\n \t\tcontinue;\n-\t      fprintf (file, \"insn %d score: %d: \", INSN_UID (ready[i]),\n-\t\t       s390_sched_score (ready[i]));\n-#define PRINT_OOO_ATTR(ATTR) fprintf (file, \"%s \", get_attr_##ATTR (ready[i]) ? #ATTR : \"!\" #ATTR);\n-\t      PRINT_OOO_ATTR (ooo_cracked);\n-\t      PRINT_OOO_ATTR (ooo_expanded);\n-\t      PRINT_OOO_ATTR (ooo_endgroup);\n-\t      PRINT_OOO_ATTR (ooo_groupalone);\n-#undef PRINT_OOO_ATTR\n+\n+\t      sched_mask = s390_get_sched_attrmask (insn);\n+\t      fprintf (file, \";;\\t\\tBACKEND: insn %d score: %d: \",\n+\t\t       INSN_UID (insn),\n+\t\t       s390_sched_score (insn));\n+#define PRINT_SCHED_ATTR(M, ATTR) fprintf (file, \"%s \",\\\n+\t\t\t\t\t   ((M) & sched_mask) ? #ATTR : \"\");\n+\t      PRINT_SCHED_ATTR (S390_SCHED_ATTR_MASK_CRACKED, cracked);\n+\t      PRINT_SCHED_ATTR (S390_SCHED_ATTR_MASK_EXPANDED, expanded);\n+\t      PRINT_SCHED_ATTR (S390_SCHED_ATTR_MASK_ENDGROUP, endgroup);\n+\t      PRINT_SCHED_ATTR (S390_SCHED_ATTR_MASK_GROUPALONE, groupalone);\n+#undef PRINT_SCHED_ATTR\n+\t      if (s390_tune == PROCESSOR_2964_Z13)\n+\t\t{\n+\t\t  unsigned int unit_mask, m = 1;\n+\t\t  int units, j;\n+\n+\t\t  unit_mask  = s390_get_unit_mask (insn, &units);\n+\t\t  fprintf (file, \"(units:\");\n+\t\t  for (j = 0; j < units; j++, m <<= 1)\n+\t\t    if (m & unit_mask)\n+\t\t      fprintf (file, \" u%d\", j);\n+\t\t  fprintf (file, \")\");\n+\t\t}\n \t      fprintf (file, \"\\n\");\n \t    }\n \t}\n@@ -13745,12 +13834,12 @@ s390_sched_variable_issue (FILE *file, int verbose, rtx_insn *insn, int more)\n     {\n       unsigned int mask = s390_get_sched_attrmask (insn);\n \n-      if ((mask & S390_OOO_SCHED_ATTR_MASK_CRACKED) != 0\n-\t  || (mask & S390_OOO_SCHED_ATTR_MASK_EXPANDED) != 0)\n-\ts390_sched_state = S390_OOO_SCHED_STATE_CRACKED;\n-      else if ((mask & S390_OOO_SCHED_ATTR_MASK_ENDGROUP) != 0\n-\t       || (mask & S390_OOO_SCHED_ATTR_MASK_GROUPALONE) != 0)\n-\ts390_sched_state = S390_OOO_SCHED_STATE_NORMAL;\n+      if ((mask & S390_SCHED_ATTR_MASK_CRACKED) != 0\n+\t  || (mask & S390_SCHED_ATTR_MASK_EXPANDED) != 0)\n+\ts390_sched_state = S390_SCHED_STATE_CRACKED;\n+      else if ((mask & S390_SCHED_ATTR_MASK_ENDGROUP) != 0\n+\t       || (mask & S390_SCHED_ATTR_MASK_GROUPALONE) != 0)\n+\ts390_sched_state = S390_SCHED_STATE_NORMAL;\n       else\n \t{\n \t  /* Only normal insns are left (mask == 0).  */\n@@ -13759,30 +13848,73 @@ s390_sched_variable_issue (FILE *file, int verbose, rtx_insn *insn, int more)\n \t    case 0:\n \t    case 1:\n \t    case 2:\n-\t    case S390_OOO_SCHED_STATE_NORMAL:\n-\t      if (s390_sched_state == S390_OOO_SCHED_STATE_NORMAL)\n+\t    case S390_SCHED_STATE_NORMAL:\n+\t      if (s390_sched_state == S390_SCHED_STATE_NORMAL)\n \t\ts390_sched_state = 1;\n \t      else\n \t\ts390_sched_state++;\n \n \t      break;\n-\t    case S390_OOO_SCHED_STATE_CRACKED:\n-\t      s390_sched_state = S390_OOO_SCHED_STATE_NORMAL;\n+\t    case S390_SCHED_STATE_CRACKED:\n+\t      s390_sched_state = S390_SCHED_STATE_NORMAL;\n \t      break;\n \t    }\n \t}\n+\n+      if (s390_tune == PROCESSOR_2964_Z13)\n+\t{\n+\t  int units, i;\n+\t  unsigned unit_mask, m = 1;\n+\n+\t  unit_mask = s390_get_unit_mask (insn, &units);\n+\t  gcc_assert (units <= MAX_SCHED_UNITS);\n+\n+\t  for (i = 0; i < units; i++, m <<= 1)\n+\t    if (m & unit_mask)\n+\t      last_scheduled_unit_distance[i] = 0;\n+\t    else if (last_scheduled_unit_distance[i] < MAX_SCHED_MIX_DISTANCE)\n+\t      last_scheduled_unit_distance[i]++;\n+\t}\n+\n       if (verbose > 5)\n \t{\n-\t  fprintf (file, \"insn %d: \", INSN_UID (insn));\n-#define PRINT_OOO_ATTR(ATTR)\t\t\t\t\t\t\\\n-\t  fprintf (file, \"%s \", get_attr_##ATTR (insn) ? #ATTR : \"\");\n-\t  PRINT_OOO_ATTR (ooo_cracked);\n-\t  PRINT_OOO_ATTR (ooo_expanded);\n-\t  PRINT_OOO_ATTR (ooo_endgroup);\n-\t  PRINT_OOO_ATTR (ooo_groupalone);\n-#undef PRINT_OOO_ATTR\n-\t  fprintf (file, \"\\n\");\n-\t  fprintf (file, \"sched state: %d\\n\", s390_sched_state);\n+\t  unsigned int sched_mask;\n+\n+\t  sched_mask = s390_get_sched_attrmask (insn);\n+\n+\t  fprintf (file, \";;\\t\\tBACKEND: insn %d: \", INSN_UID (insn));\n+#define PRINT_SCHED_ATTR(M, ATTR) fprintf (file, \"%s \", ((M) & sched_mask) ? #ATTR : \"\");\n+\t  PRINT_SCHED_ATTR (S390_SCHED_ATTR_MASK_CRACKED, cracked);\n+\t  PRINT_SCHED_ATTR (S390_SCHED_ATTR_MASK_EXPANDED, expanded);\n+\t  PRINT_SCHED_ATTR (S390_SCHED_ATTR_MASK_ENDGROUP, endgroup);\n+\t  PRINT_SCHED_ATTR (S390_SCHED_ATTR_MASK_GROUPALONE, groupalone);\n+#undef PRINT_SCHED_ATTR\n+\n+\t  if (s390_tune == PROCESSOR_2964_Z13)\n+\t    {\n+\t      unsigned int unit_mask, m = 1;\n+\t      int units, j;\n+\n+\t      unit_mask  = s390_get_unit_mask (insn, &units);\n+\t      fprintf (file, \"(units:\");\n+\t      for (j = 0; j < units; j++, m <<= 1)\n+\t\tif (m & unit_mask)\n+\t\t  fprintf (file, \" %d\", j);\n+\t      fprintf (file, \")\");\n+\t    }\n+\t  fprintf (file, \" sched state: %d\\n\", s390_sched_state);\n+\n+\t  if (s390_tune == PROCESSOR_2964_Z13)\n+\t    {\n+\t      int units, j;\n+\n+\t      s390_get_unit_mask (insn, &units);\n+\n+\t      fprintf (file, \";;\\t\\tBACKEND: units unused for: \");\n+\t      for (j = 0; j < units; j++)\n+\t\tfprintf (file, \"%d:%d \", j, last_scheduled_unit_distance[j]);\n+\t      fprintf (file, \"\\n\");\n+\t    }\n \t}\n     }\n \n@@ -13799,6 +13931,7 @@ s390_sched_init (FILE *file ATTRIBUTE_UNUSED,\n \t\t int max_ready ATTRIBUTE_UNUSED)\n {\n   last_scheduled_insn = NULL;\n+  memset (last_scheduled_unit_distance, 0, MAX_SCHED_UNITS * sizeof (int));\n   s390_sched_state = 0;\n }\n "}, {"sha": "9d76e61a8bfcaa09eaa2ef84a08382855d247e0f", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/239020213ad9d057dd1e482d921df7c13016a755/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/239020213ad9d057dd1e482d921df7c13016a755/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=239020213ad9d057dd1e482d921df7c13016a755", "patch": "@@ -512,6 +512,9 @@\n ;; Pipeline description for zEC12\n (include \"2827.md\")\n \n+;; Pipeline description for z13\n+(include \"2964.md\")\n+\n ;; Predicates\n (include \"predicates.md\")\n "}]}