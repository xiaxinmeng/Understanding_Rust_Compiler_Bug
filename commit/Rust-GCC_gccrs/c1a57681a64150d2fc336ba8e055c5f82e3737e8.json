{"sha": "c1a57681a64150d2fc336ba8e055c5f82e3737e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzFhNTc2ODFhNjQxNTBkMmZjMzM2YmE4ZTA1NWM1ZjgyZTM3MzdlOA==", "commit": {"author": {"name": "Will Schmidt", "email": "will_schmidt@vnet.ibm.com", "date": "2020-06-18T20:14:00Z"}, "committer": {"name": "Will Schmidt", "email": "will_schmidt@vnet.ibm.com", "date": "2020-07-08T15:33:09Z"}, "message": "[PATCH, rs6000]Add support to enable vmsumudm behind vec_msum builtin.\n\ngcc/ChangeLog:\n\n2020-07-08  Will Schmidt  <will_schmidt@vnet.ibm.com>\n\n\t* config/rs6000/altivec.h (vec_vmsumudm): New define.\n\t* config/rs6000/altivec.md (UNSPEC_VMSUMUDM): New unspec.\n\t  (altivec_vmsumudm): New define_insn.\n\t* config/rs6000/rs6000-builtin.def (altivec_vmsumudm): New BU_ALTIVEC_3\n\t  entry. (vmsumudm): New BU_ALTIVEC_OVERLOAD_3 entry.\n\t* config/rs6000/rs6000-call.c (altivec_overloaded_builtins): Add entries for\n\t  ALTIVEC_BUILTIN_VMSUMUDM variants of vec_msum.\n\t* doc/extend.texi: Add document for vmsumudm behind vmsum.\n\ngcc/testsuite/ChangeLog:\n\n2020-07-08  Will Schmidt  <will_schmidt@vnet.ibm.com>\n\n\t* gcc.target/powerpc/builtins-msum-runnable.c: New test.\n\t* gcc.target/powerpc/vsx-builtin-msum.c: New test.", "tree": {"sha": "95f68d09b3961d534a4573d744698203861a2556", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95f68d09b3961d534a4573d744698203861a2556"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1a57681a64150d2fc336ba8e055c5f82e3737e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1a57681a64150d2fc336ba8e055c5f82e3737e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1a57681a64150d2fc336ba8e055c5f82e3737e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1a57681a64150d2fc336ba8e055c5f82e3737e8/comments", "author": {"login": "willschm", "id": 44359, "node_id": "MDQ6VXNlcjQ0MzU5", "avatar_url": "https://avatars.githubusercontent.com/u/44359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willschm", "html_url": "https://github.com/willschm", "followers_url": "https://api.github.com/users/willschm/followers", "following_url": "https://api.github.com/users/willschm/following{/other_user}", "gists_url": "https://api.github.com/users/willschm/gists{/gist_id}", "starred_url": "https://api.github.com/users/willschm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willschm/subscriptions", "organizations_url": "https://api.github.com/users/willschm/orgs", "repos_url": "https://api.github.com/users/willschm/repos", "events_url": "https://api.github.com/users/willschm/events{/privacy}", "received_events_url": "https://api.github.com/users/willschm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "willschm", "id": 44359, "node_id": "MDQ6VXNlcjQ0MzU5", "avatar_url": "https://avatars.githubusercontent.com/u/44359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willschm", "html_url": "https://github.com/willschm", "followers_url": "https://api.github.com/users/willschm/followers", "following_url": "https://api.github.com/users/willschm/following{/other_user}", "gists_url": "https://api.github.com/users/willschm/gists{/gist_id}", "starred_url": "https://api.github.com/users/willschm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willschm/subscriptions", "organizations_url": "https://api.github.com/users/willschm/orgs", "repos_url": "https://api.github.com/users/willschm/repos", "events_url": "https://api.github.com/users/willschm/events{/privacy}", "received_events_url": "https://api.github.com/users/willschm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30fdaead5b7880c4e9f140618e26ad1c545642d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30fdaead5b7880c4e9f140618e26ad1c545642d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30fdaead5b7880c4e9f140618e26ad1c545642d5"}], "stats": {"total": 130, "additions": 130, "deletions": 0}, "files": [{"sha": "0d199393556df7f3e61b6f0784592a33217b842e", "filename": "gcc/config/rs6000/altivec.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1a57681a64150d2fc336ba8e055c5f82e3737e8/gcc%2Fconfig%2Frs6000%2Faltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1a57681a64150d2fc336ba8e055c5f82e3737e8/gcc%2Fconfig%2Frs6000%2Faltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.h?ref=c1a57681a64150d2fc336ba8e055c5f82e3737e8", "patch": "@@ -161,6 +161,7 @@\n #define vec_vmsumubm __builtin_vec_vmsumubm\n #define vec_vmsumshs __builtin_vec_vmsumshs\n #define vec_vmsumuhs __builtin_vec_vmsumuhs\n+#define vec_vmsumudm __builtin_vec_vmsumudm\n #define vec_vmulesb __builtin_vec_vmulesb\n #define vec_vmulesh __builtin_vec_vmulesh\n #define vec_vmuleuh __builtin_vec_vmuleuh"}, {"sha": "0481642fd95ca3405a796f34bb9e26648422b9b5", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1a57681a64150d2fc336ba8e055c5f82e3737e8/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1a57681a64150d2fc336ba8e055c5f82e3737e8/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=c1a57681a64150d2fc336ba8e055c5f82e3737e8", "patch": "@@ -21,6 +21,7 @@\n (define_c_enum \"unspec\"\n   [UNSPEC_VCMPBFP\n    UNSPEC_VMSUMU\n+   UNSPEC_VMSUMUDM\n    UNSPEC_VMSUMM\n    UNSPEC_VMSUMSHM\n    UNSPEC_VMSUMUHS\n@@ -972,6 +973,16 @@\n   \"vmsumu<VI_char>m %0,%1,%2,%3\"\n   [(set_attr \"type\" \"veccomplex\")])\n \n+(define_insn \"altivec_vmsumudm\"\n+  [(set (match_operand:V1TI 0 \"register_operand\" \"=v\")\n+\t(unspec:V1TI [(match_operand:V2DI 1 \"register_operand\" \"v\")\n+\t\t      (match_operand:V2DI 2 \"register_operand\" \"v\")\n+\t\t      (match_operand:V1TI 3 \"register_operand\" \"v\")]\n+\t\t     UNSPEC_VMSUMUDM))]\n+  \"TARGET_P8_VECTOR\"\n+  \"vmsumudm %0,%1,%2,%3\"\n+  [(set_attr \"type\" \"veccomplex\")])\n+\n (define_insn \"altivec_vmsumm<VI_char>m\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n         (unspec:V4SI [(match_operand:VIshort 1 \"register_operand\" \"v\")"}, {"sha": "ee0d787cfa2258e42dc7d483ec1ca969fcc8a039", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1a57681a64150d2fc336ba8e055c5f82e3737e8/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1a57681a64150d2fc336ba8e055c5f82e3737e8/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=c1a57681a64150d2fc336ba8e055c5f82e3737e8", "patch": "@@ -1142,6 +1142,7 @@ BU_ALTIVEC_3 (VMLADDUHM,      \"vmladduhm\",      CONST, \tfmav8hi4)\n BU_ALTIVEC_3 (VMSUMUBM,       \"vmsumubm\",       CONST, \taltivec_vmsumubm)\n BU_ALTIVEC_3 (VMSUMMBM,       \"vmsummbm\",       CONST, \taltivec_vmsummbm)\n BU_ALTIVEC_3 (VMSUMUHM,       \"vmsumuhm\",       CONST, \taltivec_vmsumuhm)\n+BU_ALTIVEC_3 (VMSUMUDM,       \"vmsumudm\",       CONST, \taltivec_vmsumudm)\n BU_ALTIVEC_3 (VMSUMSHM,       \"vmsumshm\",       CONST, \taltivec_vmsumshm)\n BU_ALTIVEC_3 (VMSUMUHS,       \"vmsumuhs\",       SAT,   \taltivec_vmsumuhs)\n BU_ALTIVEC_3 (VMSUMSHS,       \"vmsumshs\",       SAT,   \taltivec_vmsumshs)\n@@ -1499,6 +1500,7 @@ BU_ALTIVEC_OVERLOAD_3 (VMSUMSHM,   \"vmsumshm\")\n BU_ALTIVEC_OVERLOAD_3 (VMSUMSHS,   \"vmsumshs\")\n BU_ALTIVEC_OVERLOAD_3 (VMSUMUBM,   \"vmsumubm\")\n BU_ALTIVEC_OVERLOAD_3 (VMSUMUHM,   \"vmsumuhm\")\n+BU_ALTIVEC_OVERLOAD_3 (VMSUMUDM,   \"vmsumudm\")\n BU_ALTIVEC_OVERLOAD_3 (VMSUMUHS,   \"vmsumuhs\")\n \n /* Altivec DST overloaded builtins.  */"}, {"sha": "8e7bb54c73d16f87c18ce2993bd19c14a71c385c", "filename": "gcc/config/rs6000/rs6000-call.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1a57681a64150d2fc336ba8e055c5f82e3737e8/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1a57681a64150d2fc336ba8e055c5f82e3737e8/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.c?ref=c1a57681a64150d2fc336ba8e055c5f82e3737e8", "patch": "@@ -3089,6 +3089,12 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V8HI, RS6000_BTI_unsigned_V8HI, RS6000_BTI_unsigned_V4SI },\n   { ALTIVEC_BUILTIN_VEC_MSUM, ALTIVEC_BUILTIN_VMSUMSHM,\n     RS6000_BTI_V4SI, RS6000_BTI_V8HI, RS6000_BTI_V8HI, RS6000_BTI_V4SI },\n+\n+  { ALTIVEC_BUILTIN_VEC_MSUM, ALTIVEC_BUILTIN_VMSUMUDM,\n+    RS6000_BTI_V1TI, RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_V1TI },\n+  { ALTIVEC_BUILTIN_VEC_MSUM, ALTIVEC_BUILTIN_VMSUMUDM,\n+    RS6000_BTI_unsigned_V1TI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V1TI },\n+\n   { ALTIVEC_BUILTIN_VEC_VMSUMSHM, ALTIVEC_BUILTIN_VMSUMSHM,\n     RS6000_BTI_V4SI, RS6000_BTI_V8HI, RS6000_BTI_V8HI, RS6000_BTI_V4SI },\n   { ALTIVEC_BUILTIN_VEC_VMSUMUHM, ALTIVEC_BUILTIN_VMSUMUHM,"}, {"sha": "3f92171a3b1fb956521e52a0b758fef37f79611f", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1a57681a64150d2fc336ba8e055c5f82e3737e8/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1a57681a64150d2fc336ba8e055c5f82e3737e8/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=c1a57681a64150d2fc336ba8e055c5f82e3737e8", "patch": "@@ -20218,6 +20218,13 @@ bool scalar_test_data_class (__ieee128 source, const int condition);\n bool scalar_test_neg (float source);\n bool scalar_test_neg (double source);\n bool scalar_test_neg (__ieee128 source);\n+\n+vector _uint128_t vec_msum (vector unsigned long long,\n+\t\t\t    vector unsigned long long,\n+\t\t\t    vector _uint128_t);\n+vector _int128_t vec_msum (vector signed long long,\n+\t\t\t   vector signed long long,\n+\t\t\t   vector _int128_t);\n @end smallexample\n \n The @code{scalar_extract_exp} and @code{scalar_extract_sig}\n@@ -20237,6 +20244,9 @@ Note that the sign of the significand is not represented in the result\n returned from the @code{scalar_extract_sig} function.  Use the\n @code{scalar_test_neg} function to test the sign of its @code{double}\n argument.\n+The @code{vec_msum} functions perform a vector multiply-sum, returning\n+the result of arg1*arg2+arg3.  ISA 3.0 adds support for vec_msum returning\n+a vector int128 result.\n \n The @code{scalar_insert_exp}\n functions require a 64-bit environment supporting ISA 3.0 or later."}, {"sha": "0fa5c319b6debedd093a1d83055f15100e22579f", "filename": "gcc/testsuite/gcc.target/powerpc/builtins-msum-runnable.c", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1a57681a64150d2fc336ba8e055c5f82e3737e8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-msum-runnable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1a57681a64150d2fc336ba8e055c5f82e3737e8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-msum-runnable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-msum-runnable.c?ref=c1a57681a64150d2fc336ba8e055c5f82e3737e8", "patch": "@@ -0,0 +1,74 @@\n+/* { dg-do run { target { p9vector_hw } } } */\n+/* { dg-options \"-mdejagnu-cpu=power9 -O2\" } */\n+\n+#include <altivec.h>\n+\n+#ifdef DEBUG\n+#include <stdio.h>\n+#endif\n+\n+void abort (void);\n+\n+int\n+main()\n+{\n+  vector __uint128_t arg_uint128, result_uint128, expected_uint128;\n+  vector __int128_t arg_int128, result_int128, expected_int128;\n+\n+  arg_uint128[0] = 0x1627384950617243;\n+  arg_uint128[0] = arg_uint128[0] << 64;\n+  arg_uint128[0] |= 0x9405182930415263;\n+  expected_uint128[0] = 0x1627384950617243;\n+  expected_uint128[0] = expected_uint128[0] << 64;\n+  expected_uint128[0] |= 0xb6b07e42a570e5fe;\n+  vector unsigned long long arg_vull2 = {0x12345678,0x44445555};\n+  vector unsigned long long arg_vull3 = {0x6789abcd,0x66667777};\n+  result_uint128 = vec_msum (arg_vull2, arg_vull3, arg_uint128);\n+\n+  if (result_uint128[0] != expected_uint128[0])\n+    {\n+#ifdef DEBUG\n+       printf(\"result_uint128[0] doesn't match expected_u128[0]\\n\");\n+       printf(\"arg_vull2  %llx %llx \\n\",  arg_vull2[0], arg_vull2[1]);\n+       printf(\"arg_vull3  %llx %llx \\n\",  arg_vull3[0], arg_vull3[1]);\n+       printf(\"arg_uint128[0] =  %llx \", arg_uint128[0] >> 64);\n+       printf(\" %llx\\n\",\t arg_uint128[0] & 0xFFFFFFFFFFFFFFFF);\n+\n+       printf(\"result_uint128[0] =  %llx \", result_uint128[0] >> 64);\n+       printf(\" %llx\\n\", result_uint128[0] & 0xFFFFFFFFFFFFFFFF);\n+\n+       printf(\"expected_uint128[0] =  %llx \", expected_uint128[0] >> 64);\n+       printf(\" %llx\\n\", expected_uint128[0] & 0xFFFFFFFFFFFFFFFF);\n+#else\n+       abort();\n+#endif\n+    }\n+\n+  arg_int128[0] = 0x1627384950617283;\n+  arg_int128[0] = arg_int128[0] << 64;\n+  arg_int128[0] |= 0x9405182930415263;\n+  expected_int128[0] = 0x1627384950617283;\n+  expected_int128[0] = expected_int128[0] << 64;\n+  expected_int128[0] |= 0xd99f35969c11cbfa;\n+  vector signed long long arg_vll2 = { 0x567890ab, 0x1233456 };\n+  vector signed long long arg_vll3 = { 0xcdef0123, 0x9873451 };\n+  result_int128 = vec_msum (arg_vll2, arg_vll3, arg_int128);\n+\n+  if (result_int128[0] != expected_int128[0])\n+    {\n+#ifdef DEBUG\n+       printf(\"result_int128[0] doesn't match expected128[0]\\n\");\n+       printf(\"arg_int128[0] =  %llx \", arg_int128[0] >> 64);\n+       printf(\" %llx\\n\",\t arg_int128[0] & 0xFFFFFFFFFFFFFFFF);\n+\n+       printf(\"result_int128[0] =  %llx \", result_int128[0] >> 64);\n+       printf(\" %llx\\n\", result_int128[0] & 0xFFFFFFFFFFFFFFFF);\n+\n+       printf(\"expected_int128[0] =  %llx \", expected_int128[0] >> 64);\n+       printf(\" %llx\\n\", expected_int128[0] & 0xFFFFFFFFFFFFFFFF);\n+#else\n+       abort();\n+#endif\n+    }\n+}\n+"}, {"sha": "058ca0b0fe434d550df3665c84ed66b4c2902708", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-builtin-msum.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1a57681a64150d2fc336ba8e055c5f82e3737e8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-builtin-msum.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1a57681a64150d2fc336ba8e055c5f82e3737e8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-builtin-msum.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-builtin-msum.c?ref=c1a57681a64150d2fc336ba8e055c5f82e3737e8", "patch": "@@ -0,0 +1,26 @@\n+/* Verify that overloaded built-ins for vec_msum with __int128\n+   inputs generate the proper code.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-require-effective-target int128 } */\n+/* { dg-options \"-mdejagnu-cpu=power9  -O3\" } */\n+\n+#include <altivec.h>\n+\n+vector signed __int128\n+test_msum_si (vector signed long long vsll_1, vector signed long long vsll_2,\n+\t   vector signed __int128 vsi128)\n+{\n+  return vec_msum (vsll_1, vsll_2, vsi128);\n+}\n+\n+vector unsigned __int128\n+test_msum_ui (vector unsigned long long vull_1, vector unsigned long long vull_2,\n+\t   vector unsigned __int128 vui128)\n+{\n+  return vec_msum (vull_1, vull_2, vui128);\n+}\n+\n+/* { dg_final { scan_assembler_times \"vmsumudm\" 2 } } */\n+"}]}