{"sha": "5035cd662459b09605370f2ba41b2238119c69b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTAzNWNkNjYyNDU5YjA5NjA1MzcwZjJiYTQxYjIyMzgxMTljNjliMQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-01-26T05:37:24Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-01-27T02:26:17Z"}, "message": "c++: Fix -Wnoexcept handling of system headers (PR90992).\n\nThe immediate issue here was that the second warning didn't depend on the\nfirst one, so if the first location was in a system header, we'd\nmysteriously give the second by itself.\n\nIt's also the case that the thing we care about being in a system header is\nthe function that we want to suggest adding 'noexcept' to, not the\nnoexcept-expression; it's useful to suggest adding noexcept to a user\nfunction to satisfy a noexcept-expression in a system header.\n\n\tPR c++/90992\n\t* except.c (maybe_noexcept_warning): Check DECL_IN_SYSTEM_HEADER and\n\ttemporarily enable -Wsystem-headers.  Change second warning to\n\tconditional inform.", "tree": {"sha": "92714a88784da28de205aa1159b73407cf1601cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92714a88784da28de205aa1159b73407cf1601cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5035cd662459b09605370f2ba41b2238119c69b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5035cd662459b09605370f2ba41b2238119c69b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5035cd662459b09605370f2ba41b2238119c69b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5035cd662459b09605370f2ba41b2238119c69b1/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf17dcc6fc1f9f69d592952c2dd5796a5665bd5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf17dcc6fc1f9f69d592952c2dd5796a5665bd5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf17dcc6fc1f9f69d592952c2dd5796a5665bd5a"}], "stats": {"total": 92, "additions": 86, "deletions": 6}, "files": [{"sha": "b51d67fad2ee6cc17fd97d2b5cba2c1237b0b446", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5035cd662459b09605370f2ba41b2238119c69b1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5035cd662459b09605370f2ba41b2238119c69b1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5035cd662459b09605370f2ba41b2238119c69b1", "patch": "@@ -1,5 +1,10 @@\n 2020-01-26  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/90992\n+\t* except.c (maybe_noexcept_warning): Check DECL_IN_SYSTEM_HEADER and\n+\ttemporarily enable -Wsystem-headers.  Change second warning to\n+\tconditional inform.\n+\n \tPR c++/90997\n \t* semantics.c (finish_call_expr): Don't call\n \tinstantiate_non_dependent_expr before warn_for_memset."}, {"sha": "788b96de243e0dc7796283ab49f13eb04d27f283", "filename": "gcc/cp/except.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5035cd662459b09605370f2ba41b2238119c69b1/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5035cd662459b09605370f2ba41b2238119c69b1/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=5035cd662459b09605370f2ba41b2238119c69b1", "patch": "@@ -1165,13 +1165,17 @@ static GTY(()) vec<pending_noexcept, va_gc> *pending_noexcept_checks;\n static void\n maybe_noexcept_warning (tree fn)\n {\n-  if (TREE_NOTHROW (fn))\n+  if (TREE_NOTHROW (fn)\n+      && (!DECL_IN_SYSTEM_HEADER (fn)\n+\t  || global_dc->dc_warn_system_headers))\n     {\n-      warning (OPT_Wnoexcept, \"noexcept-expression evaluates to %<false%> \"\n-\t       \"because of a call to %qD\", fn);\n-      warning_at (DECL_SOURCE_LOCATION (fn), OPT_Wnoexcept,\n-\t\t  \"but %qD does not throw; perhaps \"\n-\t\t  \"it should be declared %<noexcept%>\", fn);\n+      temp_override<bool> s (global_dc->dc_warn_system_headers, true);\n+      auto_diagnostic_group d;\n+      if (warning (OPT_Wnoexcept, \"noexcept-expression evaluates to %<false%> \"\n+\t\t   \"because of a call to %qD\", fn))\n+\tinform (DECL_SOURCE_LOCATION (fn),\n+\t\t\"but %qD does not throw; perhaps \"\n+\t\t\"it should be declared %<noexcept%>\", fn);\n     }\n }\n "}, {"sha": "e3a5df64459b43745b73594ce68db96845674498", "filename": "gcc/testsuite/g++.dg/warn/Wnoexcept1.C", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5035cd662459b09605370f2ba41b2238119c69b1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnoexcept1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5035cd662459b09605370f2ba41b2238119c69b1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnoexcept1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnoexcept1.C?ref=5035cd662459b09605370f2ba41b2238119c69b1", "patch": "@@ -0,0 +1,34 @@\n+// PR c++/90992\n+// { dg-do compile { target c++11 } }\n+// { dg-additional-options -Wnoexcept }\n+\n+#include \"Wnoexcept1.h\"\n+\n+// We expect a warning at the declaration of construct2, since Automatic2 is\n+// defined below; we don't expect one for construct1, because Automatic1 is\n+// defined in the fake system header.\n+// { dg-warning \"noexcept-expression\" \"\" { target *-*-* } 26 }\n+\n+class Automatic2 {\n+public:\n+  Automatic2(size_t bla) : Bla(bla) {}; // { dg-message \"noexcept\" }\n+\n+private:\n+  size_t Bla;\n+  NotNoexcept Dummy;\n+};\n+\n+union U\n+{\n+  unsigned char buf[sizeof(Automatic1)];\n+  Automatic1 a1;\n+  Automatic2 a2;\n+  U(): buf{} {}\n+  ~U() {}\n+};\n+\n+int main() {\n+  U u;\n+  construct1(&u.a1, 42);\n+  construct2(&u.a2, 42);\n+}"}, {"sha": "f59733e705fee7f134e0f46632ed4e467a4f1550", "filename": "gcc/testsuite/g++.dg/warn/Wnoexcept1.h", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5035cd662459b09605370f2ba41b2238119c69b1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnoexcept1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5035cd662459b09605370f2ba41b2238119c69b1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnoexcept1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnoexcept1.h?ref=5035cd662459b09605370f2ba41b2238119c69b1", "patch": "@@ -0,0 +1,37 @@\n+// -*- C++ -*-\n+#pragma GCC system_header\n+\n+using size_t = decltype(sizeof(42));\n+inline void * operator new (size_t, void *p) noexcept { return p; }\n+\n+class NotNoexcept {\n+public:\n+  NotNoexcept() noexcept(false) {}\n+  NotNoexcept(const NotNoexcept&) noexcept(false) {}\n+  NotNoexcept(NotNoexcept &&) noexcept(false) {}\n+  ~NotNoexcept() noexcept(false) {}\n+\n+  NotNoexcept&operator=(const NotNoexcept&) noexcept(false) { return *this;}\n+  NotNoexcept&operator=(NotNoexcept &&) noexcept(false) {return *this;}\n+};\n+\n+template<typename _Up, typename... _Args>\n+void\n+construct1(_Up* __p, _Args... __args)\n+  noexcept(noexcept(::new((void *)__p) _Up(__args...)))\n+{ ::new((void *)__p) _Up(__args...); }\n+\n+template<typename _Up, typename... _Args>\n+void\n+construct2(_Up* __p, _Args... __args)\n+  noexcept(noexcept(::new((void *)__p) _Up(__args...)))\n+{ ::new((void *)__p) _Up(__args...); }\n+\n+class Automatic1 {\n+public:\n+  Automatic1(size_t bla) : Bla(bla) {};\n+\n+private:\n+  size_t Bla;\n+  NotNoexcept Dummy;\n+};"}]}