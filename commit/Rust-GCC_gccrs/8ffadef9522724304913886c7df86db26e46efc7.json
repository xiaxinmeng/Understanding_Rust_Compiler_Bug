{"sha": "8ffadef9522724304913886c7df86db26e46efc7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGZmYWRlZjk1MjI3MjQzMDQ5MTM4ODZjN2RmODZkYjI2ZTQ2ZWZjNw==", "commit": {"author": {"name": "Magnus Granberg", "email": "zorry@gentoo.org", "date": "2010-07-15T05:46:36Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2010-07-15T05:46:36Z"}, "message": "builtins.c (expand_builtin_init_trampoline): If -Wtrampolines make a warning.\n\n2010-07-15  Magnus Granberg  <zorry@gentoo.org>\n\t    Kevin F. Quinn  <kevquinn@gentoo.org>\n\n        * builtins.c (expand_builtin_init_trampoline): If\n\t-Wtrampolines make a warning.\n\t* common.opt:   Add -Wtrampolines.\n        * doc/invoke.texi:      Add -Wtrampolines.\ntestsuite/\n        * gcc.dg/Wtrampolines.c: New.\n\nCo-Authored-By: Kevin F. Quinn <kevquinn@gentoo.org>\n\nFrom-SVN: r162205", "tree": {"sha": "a01412ef395a7d90aeb4d60dc1ddd5779ac1fb35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a01412ef395a7d90aeb4d60dc1ddd5779ac1fb35"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ffadef9522724304913886c7df86db26e46efc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ffadef9522724304913886c7df86db26e46efc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ffadef9522724304913886c7df86db26e46efc7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ffadef9522724304913886c7df86db26e46efc7/comments", "author": {"login": "zorry", "id": 8334094, "node_id": "MDQ6VXNlcjgzMzQwOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8334094?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zorry", "html_url": "https://github.com/zorry", "followers_url": "https://api.github.com/users/zorry/followers", "following_url": "https://api.github.com/users/zorry/following{/other_user}", "gists_url": "https://api.github.com/users/zorry/gists{/gist_id}", "starred_url": "https://api.github.com/users/zorry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zorry/subscriptions", "organizations_url": "https://api.github.com/users/zorry/orgs", "repos_url": "https://api.github.com/users/zorry/repos", "events_url": "https://api.github.com/users/zorry/events{/privacy}", "received_events_url": "https://api.github.com/users/zorry/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6b58c62f292ef249236bf6cb5f0adce974ea6d07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b58c62f292ef249236bf6cb5f0adce974ea6d07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b58c62f292ef249236bf6cb5f0adce974ea6d07"}], "stats": {"total": 94, "additions": 92, "deletions": 2}, "files": [{"sha": "2c1518d6ab4af93f990fff3e917ca7c71282311c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffadef9522724304913886c7df86db26e46efc7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffadef9522724304913886c7df86db26e46efc7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8ffadef9522724304913886c7df86db26e46efc7", "patch": "@@ -1,3 +1,11 @@\n+2010-07-15  Magnus Granberg  <zorry@gentoo.org>\n+\t    Kevin F. Quinn  <kevquinn@gentoo.org>\n+\n+        * builtins.c (expand_builtin_init_trampoline): If\n+\t-Wtrampolines make a warning.\n+\t* common.opt:   Add -Wtrampolines.\n+        * doc/invoke.texi:      Add -Wtrampolines.\n+\n 2010-07-15  Jie Zhang  <jie@codesourcery.com>\n \n \t* config/arm/cortex-a8.md (cortex_a8_load_store_2): Reserve"}, {"sha": "2bcf656776a5453b16655dcee643b5025bd126e6", "filename": "gcc/builtins.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffadef9522724304913886c7df86db26e46efc7/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffadef9522724304913886c7df86db26e46efc7/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=8ffadef9522724304913886c7df86db26e46efc7", "patch": "@@ -5250,6 +5250,10 @@ expand_builtin_init_trampoline (tree exp)\n   targetm.calls.trampoline_init (m_tramp, t_func, r_chain);\n \n   trampolines_created = 1;\n+\n+  warning_at (DECL_SOURCE_LOCATION (t_func), OPT_Wtrampolines,\n+              \"trampoline generated for nested function %qD\", t_func);\n+\n   return const0_rtx;\n }\n "}, {"sha": "41a9838f481eeb599f25a291c1fbd5c49c9d1d24", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffadef9522724304913886c7df86db26e46efc7/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffadef9522724304913886c7df86db26e46efc7/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=8ffadef9522724304913886c7df86db26e46efc7", "patch": "@@ -212,6 +212,10 @@ Wsystem-headers\n Common Var(warn_system_headers) Warning\n Do not suppress warnings from system headers\n \n+Wtrampolines\n+Common Var(warn_trampolines) Warning\n+Warn whenever a trampoline is generated\n+\n Wtype-limits\n Common Var(warn_type_limits) Init(-1) Warning\n Warn if a comparison is always true or always false due to the limited range of the data type"}, {"sha": "12855a4f0d5be170ccc53ad46416ae0447cbef6e", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffadef9522724304913886c7df86db26e46efc7/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffadef9522724304913886c7df86db26e46efc7/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=8ffadef9522724304913886c7df86db26e46efc7", "patch": "@@ -260,8 +260,8 @@ Objective-C and Objective-C++ Dialects}.\n -Wstrict-overflow -Wstrict-overflow=@var{n} @gol\n -Wsuggest-attribute=@r{[}pure@r{|}const@r{|}noreturn@r{]} @gol\n -Wswitch  -Wswitch-default  -Wswitch-enum -Wsync-nand @gol\n--Wsystem-headers  -Wtrigraphs  -Wtype-limits  -Wundef  -Wuninitialized @gol\n--Wunknown-pragmas  -Wno-pragmas @gol\n+-Wsystem-headers  -Wtrampolines  -Wtrigraphs  -Wtype-limits  -Wundef @gol\n+-Wuninitialized  -Wunknown-pragmas  -Wno-pragmas @gol\n -Wunsuffixed-float-constants  -Wunused  -Wunused-function @gol\n -Wunused-label  -Wunused-parameter -Wno-unused-result -Wunused-value  -Wunused-variable @gol\n -Wunused-but-set-parameter -Wunused-but-set-variable -Wvariadic-macros -Wvla @gol\n@@ -3724,6 +3724,18 @@ code.  However, note that using @option{-Wall} in conjunction with this\n option will @emph{not} warn about unknown pragmas in system\n headers---for that, @option{-Wunknown-pragmas} must also be used.\n \n+@item -Wtrampolines\n+@opindex Wtrampolines\n+@opindex Wno-trampolines\n+ Warn about trampolines generated for pointers to nested functions.\n+ \n+ A trampoline is a small piece of data or code that is created at run\n+ time on the stack when the address of a nested function is taken, and\n+ is used to call the nested function indirectly.  For some targets, it\n+ is made up of data only and thus requires no special treatment.  But,\n+ for most targets, it is made up of code and thus requires the stack\n+ to be made executable in order for the program to work properly.\n+\n @item -Wfloat-equal\n @opindex Wfloat-equal\n @opindex Wno-float-equal"}, {"sha": "3e04816dda3a76ae273a227bec871fe8a33a8dcb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffadef9522724304913886c7df86db26e46efc7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffadef9522724304913886c7df86db26e46efc7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8ffadef9522724304913886c7df86db26e46efc7", "patch": "@@ -1,3 +1,8 @@\n+2010-07-15  Magnus Granberg  <zorry@gentoo.org>\n+\t    Kevin F. Quinn  <kevquinn@gentoo.org>\n+\n+        * gcc.dg/Wtrampolines.c: New.\n+\n 2010-07-14  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libfortran/44934"}, {"sha": "dcb368147749a8947b85fa4986deaad0f78f8295", "filename": "gcc/testsuite/gcc.dg/Wtrampolines.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ffadef9522724304913886c7df86db26e46efc7/gcc%2Ftestsuite%2Fgcc.dg%2FWtrampolines.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ffadef9522724304913886c7df86db26e46efc7/gcc%2Ftestsuite%2Fgcc.dg%2FWtrampolines.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWtrampolines.c?ref=8ffadef9522724304913886c7df86db26e46efc7", "patch": "@@ -0,0 +1,57 @@\n+/* Origin: trampoline-1.c Waldek Hebisch <hebisch@math.uni.wroc.pl> */\n+/* Ported to test -Wtrampolines Magnus Granberg <zorry@gentoo.org> */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target trampolines } */\n+/* { dg-options \"-O2 -Wtrampolines\" } */\n+\n+#ifndef NO_TRAMPOLINES\n+\n+/* This used to fail on various versions of Solaris 2 because the\n+   trampoline couldn't be made executable.  */\n+\n+extern void abort(void);\n+extern double fabs(double);\n+\n+void foo (void)\n+{\n+  const int correct[1100] = {1, 0, -2, 0, 1, 0, 1, -1, -10, -30, -67};\n+  int i;\n+\n+  double x1 (void) {return 1; }\n+  double x2 (void) {return -1;}\n+  double x3 (void) {return -1;}\n+  double x4 (void) {return 1; }\n+  double x5 (void) {return 0; }\n+\n+  typedef double pfun(void);\n+\n+  double a (int k, pfun x1, pfun x2, pfun x3, pfun x4, pfun x5)\n+  {\n+    double b (void)  /* { dg-warning \"trampoline generated for nested function 'b'\" } */\n+    { \n+      k = k - 1;\n+      return a (k, b, x1, x2, x3, x4 );\n+    }\n+\n+    if (k <= 0)\n+      return x4 () + x5 ();\n+    else\n+      return b ();\n+  }\n+\n+  for (i=0; i<=10; i++)\n+  {\n+    if (fabs(a( i, x1, x2, x3, x4, x5 ) - correct [i]) > 0.1)\n+      abort();\n+  }\n+}\n+#endif\n+\n+int main (void)\n+{\n+#ifndef NO_TRAMPOLINES\n+  foo ();\n+#endif\n+  return 0;\n+}"}]}