{"sha": "65d3284bfe05bd65415f9caf9f535e8bb745bdd1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjVkMzI4NGJmZTA1YmQ2NTQxNWY5Y2FmOWY1MzVlOGJiNzQ1YmRkMQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2013-09-30T20:35:40Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2013-09-30T20:35:40Z"}, "message": "basic-block.h (edge_list): Prefix member names with \"m_\".\n\ngcc/\n\t* basic-block.h (edge_list): Prefix member names with \"m_\".\n\t* context.h (context): Likewise.\n\t* domwalk.h (dom_walker): Likewise.\n\t* gengtype-state.c (s_expr_writer, state_writer): Likewise.\n\t* graphite-sese-to-poly.c (sese_dom_walker): Likewise.\n\t* hash-table.h (hash_table): Likewise.\n\t* machmode.h (bit_field_mode_iterator): Likewise.\n\t* pass_manager.h (pass_list): Likewise.\n\t* tree-into-ssa.c (mark_def_dom_walker): Likewise.\n\t* tree-pass.h (pass_data): Likewise.\n\t* tree-ssa-dom.c (dom_opt_dom_walker): Likewise.\n\t* tree-ssa-phiopt.c (nontrapping_dom_walker): Likewise,\n\t* tree-ssa-uncprop.c (uncprop_dom_walker): Likewise.\n\t* asan.c (pass_data_asan): Update accordingly.\n\t* cfganal.c (control_dependences::find_control_dependence): Likewise.\n\t(control_dependences::control_dependences): Likewise.\n\t(control_dependences::~control_dependences): Likewise.\n\t(control_dependences::~control_dependences): Likewise.\n\t(control_dependences::get_edges_dependent_on): Likewise.\n\t* cgraphbuild.c (pass_data_rebuild_cgraph_edges::clone): Likewise.\n\t(pass_data_remove_cgraph_callee_edges::clone): Likewise.\n\t* context.c (gcc::context::context): Likewise.\n\t* cprop.c (pass_rtl_cprop::clone): Likewise.\n\t* domwalk.c (dom_walker::walk): Likewise.\n\t* ipa-inline-analysis.c (pass_inline_parameters::clone): Likewise.\n\t* ipa-pure-const.c (pass_local_pure_const::clone): Likewise.\n\t* mode-switching.c (pass_mode_switching::clone): Likewise.\n\t* passes.c (opt_pass::opt_pass): Likewise.\n\t(pass_manager::pass_manager): Likewise.\n\t* predict.c (pass_strip_predict_hints::clone): Likewise.\n\t* recog.c (pass_data pass_data_peephole2::clone): Likewise.\n\t(pass_split_all_insns::clone): Likewise.\n\t* stor-layout.c (bit_field_mode_iterator::bit_field_mode_iterator):\n\tLikewise.\n\t(bit_field_mode_iterator::next_mode): Likewise.\n\t(bit_field_mode_iterator::prefer_smaller_modes): Likewise.\n\t* tree-cfg.c (pass_split_crit_edges::clone): Likewise.\n\t* tree-cfgcleanup.c (pass_merge_phi::clone): Likewise.\n\t* tree-complex.c (pass_lower_complex::clone): Likewise.\n\t* tree-eh.c (pass_cleanup_eh::clone): Likewise.\n\t* tree-object-size.c (pass_object_sizes::clone): Likewise.\n\t* tree-optimize.c (pass_fixup_cfg::clone): Likewise.\n\t* tree-ssa-ccp.c (pass_data_ccp::clone): Likewise.\n\t(pass_fold_builtins::clone): Likewise.\n\t* tree-ssa-copy.c (pass_data_copy_prop::clone): Likewise.\n\t* tree-ssa-copyrename.c (pass_rename_ssa_copies::clone): Likewise.\n\t* tree-ssa-dce.c (pass_dce::clone, pass_dce_loop::clone): Likewise.\n\t(pass_cd_dce::clone): Likewise.\n\t* tree-ssa-dom.c (pass_dominator::clone): Likewise.\n\t(pass_phi_only_cprop::clone): Likewise.\n\t* tree-ssa-dse.c (pass_dse::clone): Likewise.\n\t* tree-ssa-forwprop.c (pass_forwprop::clone): Likewise.\n\t* tree-ssa-loop.c (pass_lim::clone): Likewise.\n\t* tree-ssa-phiopt.c (pass_phiopt::clone): Likewise.\n\t* tree-ssa-pre.c (pass_fre::clone): Likewise.\n\t* tree-ssa-reassoc.c (pass_reassoc::clone): Likewise.\n\t* tree-ssa-uninit.c (pass_late_warn_uninitialized::clone): Likewise.\n\t* tree-tailcall.c (pass_tail_recursion::clone): Likewise.\n\t* tree-vect-generic.c (pass_lower_vector_ssa::clone): Likewise.\n\t* tree-vrp.c (pass_vrp::clone): Likewise.\n\t* tsan.c (pass_tsan::clone): Likewise.\n\nFrom-SVN: r203046", "tree": {"sha": "f155fc95904ff02df392f455d75a151454b72a86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f155fc95904ff02df392f455d75a151454b72a86"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65d3284bfe05bd65415f9caf9f535e8bb745bdd1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65d3284bfe05bd65415f9caf9f535e8bb745bdd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65d3284bfe05bd65415f9caf9f535e8bb745bdd1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d2a365a843021a55899050ed48e914998a7d2205", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2a365a843021a55899050ed48e914998a7d2205", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2a365a843021a55899050ed48e914998a7d2205"}], "stats": {"total": 384, "additions": 224, "deletions": 160}, "files": [{"sha": "e3a5c820e0a8d47b30709c2f54e6d89791427509", "filename": "gcc/ChangeLog", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=65d3284bfe05bd65415f9caf9f535e8bb745bdd1", "patch": "@@ -1,3 +1,67 @@\n+2013-09-30  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* basic-block.h (edge_list): Prefix member names with \"m_\".\n+\t* context.h (context): Likewise.\n+\t* domwalk.h (dom_walker): Likewise.\n+\t* gengtype-state.c (s_expr_writer, state_writer): Likewise.\n+\t* graphite-sese-to-poly.c (sese_dom_walker): Likewise.\n+\t* hash-table.h (hash_table): Likewise.\n+\t* machmode.h (bit_field_mode_iterator): Likewise.\n+\t* pass_manager.h (pass_list): Likewise.\n+\t* tree-into-ssa.c (mark_def_dom_walker): Likewise.\n+\t* tree-pass.h (pass_data): Likewise.\n+\t* tree-ssa-dom.c (dom_opt_dom_walker): Likewise.\n+\t* tree-ssa-phiopt.c (nontrapping_dom_walker): Likewise,\n+\t* tree-ssa-uncprop.c (uncprop_dom_walker): Likewise.\n+\t* asan.c (pass_data_asan): Update accordingly.\n+\t* cfganal.c (control_dependences::find_control_dependence): Likewise.\n+\t(control_dependences::control_dependences): Likewise.\n+\t(control_dependences::~control_dependences): Likewise.\n+\t(control_dependences::~control_dependences): Likewise.\n+\t(control_dependences::get_edges_dependent_on): Likewise.\n+\t* cgraphbuild.c (pass_data_rebuild_cgraph_edges::clone): Likewise.\n+\t(pass_data_remove_cgraph_callee_edges::clone): Likewise.\n+\t* context.c (gcc::context::context): Likewise.\n+\t* cprop.c (pass_rtl_cprop::clone): Likewise.\n+\t* domwalk.c (dom_walker::walk): Likewise.\n+\t* ipa-inline-analysis.c (pass_inline_parameters::clone): Likewise.\n+\t* ipa-pure-const.c (pass_local_pure_const::clone): Likewise.\n+\t* mode-switching.c (pass_mode_switching::clone): Likewise.\n+\t* passes.c (opt_pass::opt_pass): Likewise.\n+\t(pass_manager::pass_manager): Likewise.\n+\t* predict.c (pass_strip_predict_hints::clone): Likewise.\n+\t* recog.c (pass_data pass_data_peephole2::clone): Likewise.\n+\t(pass_split_all_insns::clone): Likewise.\n+\t* stor-layout.c (bit_field_mode_iterator::bit_field_mode_iterator):\n+\tLikewise.\n+\t(bit_field_mode_iterator::next_mode): Likewise.\n+\t(bit_field_mode_iterator::prefer_smaller_modes): Likewise.\n+\t* tree-cfg.c (pass_split_crit_edges::clone): Likewise.\n+\t* tree-cfgcleanup.c (pass_merge_phi::clone): Likewise.\n+\t* tree-complex.c (pass_lower_complex::clone): Likewise.\n+\t* tree-eh.c (pass_cleanup_eh::clone): Likewise.\n+\t* tree-object-size.c (pass_object_sizes::clone): Likewise.\n+\t* tree-optimize.c (pass_fixup_cfg::clone): Likewise.\n+\t* tree-ssa-ccp.c (pass_data_ccp::clone): Likewise.\n+\t(pass_fold_builtins::clone): Likewise.\n+\t* tree-ssa-copy.c (pass_data_copy_prop::clone): Likewise.\n+\t* tree-ssa-copyrename.c (pass_rename_ssa_copies::clone): Likewise.\n+\t* tree-ssa-dce.c (pass_dce::clone, pass_dce_loop::clone): Likewise.\n+\t(pass_cd_dce::clone): Likewise.\n+\t* tree-ssa-dom.c (pass_dominator::clone): Likewise.\n+\t(pass_phi_only_cprop::clone): Likewise.\n+\t* tree-ssa-dse.c (pass_dse::clone): Likewise.\n+\t* tree-ssa-forwprop.c (pass_forwprop::clone): Likewise.\n+\t* tree-ssa-loop.c (pass_lim::clone): Likewise.\n+\t* tree-ssa-phiopt.c (pass_phiopt::clone): Likewise.\n+\t* tree-ssa-pre.c (pass_fre::clone): Likewise.\n+\t* tree-ssa-reassoc.c (pass_reassoc::clone): Likewise.\n+\t* tree-ssa-uninit.c (pass_late_warn_uninitialized::clone): Likewise.\n+\t* tree-tailcall.c (pass_tail_recursion::clone): Likewise.\n+\t* tree-vect-generic.c (pass_lower_vector_ssa::clone): Likewise.\n+\t* tree-vrp.c (pass_vrp::clone): Likewise.\n+\t* tsan.c (pass_tsan::clone): Likewise.\n+\n 2013-09-30  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/58564"}, {"sha": "c037ebfd62fa0dc1729666ad408dd52320d9aa55", "filename": "gcc/asan.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=65d3284bfe05bd65415f9caf9f535e8bb745bdd1", "patch": "@@ -2273,7 +2273,7 @@ class pass_asan : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_asan (ctxt_); }\n+  opt_pass * clone () { return new pass_asan (m_ctxt); }\n   bool gate () { return gate_asan (); }\n   unsigned int execute () { return asan_instrument (); }\n "}, {"sha": "acb5ea8d54a0eae780ce2ea003408c327154ed80", "filename": "gcc/basic-block.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=65d3284bfe05bd65415f9caf9f535e8bb745bdd1", "patch": "@@ -479,7 +479,7 @@ class control_dependences\n   void clear_control_dependence_bitmap (basic_block);\n   void find_control_dependence (int);\n   vec<bitmap> control_dependence_map;\n-  edge_list *el;\n+  edge_list *m_el;\n };\n \n /* The base value for branch probability notes and edge probabilities.  */"}, {"sha": "56853b9be13e6a98b817db83563700b3cecee531", "filename": "gcc/cfganal.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Fcfganal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Fcfganal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfganal.c?ref=65d3284bfe05bd65415f9caf9f535e8bb745bdd1", "patch": "@@ -389,18 +389,18 @@ control_dependences::find_control_dependence (int edge_index)\n   basic_block current_block;\n   basic_block ending_block;\n \n-  gcc_assert (INDEX_EDGE_PRED_BB (el, edge_index) != EXIT_BLOCK_PTR);\n+  gcc_assert (INDEX_EDGE_PRED_BB (m_el, edge_index) != EXIT_BLOCK_PTR);\n \n-  if (INDEX_EDGE_PRED_BB (el, edge_index) == ENTRY_BLOCK_PTR)\n+  if (INDEX_EDGE_PRED_BB (m_el, edge_index) == ENTRY_BLOCK_PTR)\n     ending_block = single_succ (ENTRY_BLOCK_PTR);\n   else\n-    ending_block = find_pdom (INDEX_EDGE_PRED_BB (el, edge_index));\n+    ending_block = find_pdom (INDEX_EDGE_PRED_BB (m_el, edge_index));\n \n-  for (current_block = INDEX_EDGE_SUCC_BB (el, edge_index);\n+  for (current_block = INDEX_EDGE_SUCC_BB (m_el, edge_index);\n        current_block != ending_block && current_block != EXIT_BLOCK_PTR;\n        current_block = find_pdom (current_block))\n     {\n-      edge e = INDEX_EDGE (el, edge_index);\n+      edge e = INDEX_EDGE (m_el, edge_index);\n \n       /* For abnormal edges, we don't make current_block control\n \t dependent because instructions that throw are always necessary\n@@ -416,13 +416,13 @@ control_dependences::find_control_dependence (int edge_index)\n    list EL, ala Morgan, Section 3.6.  */\n \n control_dependences::control_dependences (struct edge_list *edges)\n-  : el (edges)\n+  : m_el (edges)\n {\n   timevar_push (TV_CONTROL_DEPENDENCES);\n   control_dependence_map.create (last_basic_block);\n   for (int i = 0; i < last_basic_block; ++i)\n     control_dependence_map.quick_push (BITMAP_ALLOC (NULL));\n-  for (int i = 0; i < NUM_EDGES (el); ++i)\n+  for (int i = 0; i < NUM_EDGES (m_el); ++i)\n     find_control_dependence (i);\n   timevar_pop (TV_CONTROL_DEPENDENCES);\n }\n@@ -434,7 +434,7 @@ control_dependences::~control_dependences ()\n   for (unsigned i = 0; i < control_dependence_map.length (); ++i)\n     BITMAP_FREE (control_dependence_map[i]);\n   control_dependence_map.release ();\n-  free_edge_list (el);\n+  free_edge_list (m_el);\n }\n \n /* Returns the bitmap of edges the basic-block I is dependent on.  */\n@@ -450,7 +450,7 @@ control_dependences::get_edges_dependent_on (int i)\n edge\n control_dependences::get_edge (int i)\n {\n-  return INDEX_EDGE (el, i);\n+  return INDEX_EDGE (m_el, i);\n }\n \n "}, {"sha": "1b73a144f08237c696573ad32c3325ea1ff9f838", "filename": "gcc/cgraphbuild.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Fcgraphbuild.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Fcgraphbuild.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphbuild.c?ref=65d3284bfe05bd65415f9caf9f535e8bb745bdd1", "patch": "@@ -530,7 +530,7 @@ class pass_rebuild_cgraph_edges : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_rebuild_cgraph_edges (ctxt_); }\n+  opt_pass * clone () { return new pass_rebuild_cgraph_edges (m_ctxt); }\n   unsigned int execute () { return rebuild_cgraph_edges (); }\n \n }; // class pass_rebuild_cgraph_edges\n@@ -579,7 +579,7 @@ class pass_remove_cgraph_callee_edges : public gimple_opt_pass\n \n   /* opt_pass methods: */\n   opt_pass * clone () {\n-    return new pass_remove_cgraph_callee_edges (ctxt_);\n+    return new pass_remove_cgraph_callee_edges (m_ctxt);\n   }\n   unsigned int execute () { return remove_cgraph_callee_edges (); }\n "}, {"sha": "09e1f898f7a65800c5a23aad0e39887554a9eed6", "filename": "gcc/context.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Fcontext.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Fcontext.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcontext.c?ref=65d3284bfe05bd65415f9caf9f535e8bb745bdd1", "patch": "@@ -29,5 +29,5 @@ gcc::context *g;\n \n gcc::context::context ()\n {\n-  passes_ = new gcc::pass_manager (this);\n+  m_passes = new gcc::pass_manager (this);\n }"}, {"sha": "4aab6de9a9a3990e454c1de40bfddafe2708278b", "filename": "gcc/context.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Fcontext.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Fcontext.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcontext.h?ref=65d3284bfe05bd65415f9caf9f535e8bb745bdd1", "patch": "@@ -34,11 +34,11 @@ class context\n \n   /* Pass-management.  */\n \n-  pass_manager *get_passes () { gcc_assert (passes_); return passes_; }\n+  pass_manager *get_passes () { gcc_assert (m_passes); return m_passes; }\n \n private:\n   /* Pass-management.  */\n-  pass_manager *passes_;\n+  pass_manager *m_passes;\n \n }; // class context\n "}, {"sha": "358fca9171a6ac51c3c39e9ebc939b37b8afbcb3", "filename": "gcc/cprop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Fcprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Fcprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcprop.c?ref=65d3284bfe05bd65415f9caf9f535e8bb745bdd1", "patch": "@@ -1940,7 +1940,7 @@ class pass_rtl_cprop : public rtl_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_rtl_cprop (ctxt_); }\n+  opt_pass * clone () { return new pass_rtl_cprop (m_ctxt); }\n   bool gate () { return gate_rtl_cprop (); }\n   unsigned int execute () { return execute_rtl_cprop (); }\n "}, {"sha": "4816b4c8d85f0204df4c96e3e433a771f5639de5", "filename": "gcc/domwalk.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Fdomwalk.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Fdomwalk.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdomwalk.c?ref=65d3284bfe05bd65415f9caf9f535e8bb745bdd1", "patch": "@@ -154,7 +154,7 @@ dom_walker::walk (basic_block bb)\n   int sp = 0;\n   int *postorder, postorder_num;\n \n-  if (dom_direction_ == CDI_DOMINATORS)\n+  if (m_dom_direction == CDI_DOMINATORS)\n     {\n       postorder = XNEWVEC (int, n_basic_blocks);\n       postorder_num = inverted_post_order_compute (postorder);\n@@ -181,10 +181,10 @@ dom_walker::walk (basic_block bb)\n \t  worklist[sp++] = NULL;\n \n \t  int saved_sp = sp;\n-\t  for (dest = first_dom_son (dom_direction_, bb);\n-\t       dest; dest = next_dom_son (dom_direction_, dest))\n+\t  for (dest = first_dom_son (m_dom_direction, bb);\n+\t       dest; dest = next_dom_son (m_dom_direction, dest))\n \t    worklist[sp++] = dest;\n-\t  if (dom_direction_ == CDI_DOMINATORS)\n+\t  if (m_dom_direction == CDI_DOMINATORS)\n \t    switch (sp - saved_sp)\n \t      {\n \t      case 0:\n@@ -210,7 +210,7 @@ dom_walker::walk (basic_block bb)\n       else\n \tbreak;\n     }\n-  if (dom_direction_ == CDI_DOMINATORS)\n+  if (m_dom_direction == CDI_DOMINATORS)\n     {\n       free (bb_postorder);\n       bb_postorder = NULL;"}, {"sha": "43c15740f7a3d43ac5ee41052a57ddd5edd45d4e", "filename": "gcc/domwalk.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Fdomwalk.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Fdomwalk.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdomwalk.h?ref=65d3284bfe05bd65415f9caf9f535e8bb745bdd1", "patch": "@@ -30,7 +30,7 @@ along with GCC; see the file COPYING3.  If not see\n class dom_walker\n {\n public:\n-  dom_walker (cdi_direction direction) : dom_direction_ (direction) {}\n+  dom_walker (cdi_direction direction) : m_dom_direction (direction) {}\n \n   /* Walk the dominator tree.  */\n   void walk (basic_block);\n@@ -46,7 +46,7 @@ class dom_walker\n      if it is set to CDI_DOMINATORS, then we walk the dominator tree,\n      if it is set to CDI_POST_DOMINATORS, then we walk the post\n      dominator tree.  */\n-  const ENUM_BITFIELD (cdi_direction) dom_direction_ : 2;\n+  const ENUM_BITFIELD (cdi_direction) m_dom_direction : 2;\n };\n \n #endif"}, {"sha": "96ecc7cdaf87f2397fcfee12393a744e4c87df41", "filename": "gcc/gengtype-state.c", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Fgengtype-state.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Fgengtype-state.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype-state.c?ref=65d3284bfe05bd65415f9caf9f535e8bb745bdd1", "patch": "@@ -151,8 +151,8 @@ class s_expr_writer\n   void end_s_expr ();\n \n private:\n-  int indent_amount_;\n-  int had_recent_newline_;\n+  int m_indent_amount;\n+  int m_had_recent_newline;\n }; // class s_expr_writer\n \n /* A class for writing out \"gtype.state\".  */\n@@ -200,14 +200,14 @@ class state_writer : public s_expr_writer\n \n private:\n   /* Counter of written types.  */\n-  int state_written_type_count;\n+  int m_state_written_type_count;\n }; // class state_writer\n \n \n /* class s_expr_writer's trivial constructor.  */\n s_expr_writer::s_expr_writer ()\n-  : indent_amount_(0),\n-    had_recent_newline_(0)\n+  : m_indent_amount (0),\n+    m_had_recent_newline (0)\n {\n }\n \n@@ -216,10 +216,10 @@ void\n s_expr_writer::write_new_line (void)\n {\n   /* Don't add a newline if we've just had one.  */\n-  if (!had_recent_newline_)\n+  if (!m_had_recent_newline)\n     {\n       fprintf (state_file, \"\\n\");\n-      had_recent_newline_ = 1;\n+      m_had_recent_newline = 1;\n     }\n }\n \n@@ -236,11 +236,11 @@ void\n s_expr_writer::write_any_indent (int leading_spaces)\n {\n   int i;\n-  int amount = indent_amount_ - leading_spaces;\n-  if (had_recent_newline_)\n+  int amount = m_indent_amount - leading_spaces;\n+  if (m_had_recent_newline)\n     for (i = 0; i < amount; i++)\n       fprintf (state_file, \" \");\n-  had_recent_newline_ = 0;\n+  m_had_recent_newline = 0;\n }\n \n /* Write the beginning of a new s-expresion e.g. \"(!foo \"\n@@ -253,15 +253,15 @@ s_expr_writer::begin_s_expr (const char *tag)\n   write_new_line ();\n   write_any_indent (0);\n   fprintf (state_file, \"(!%s \", tag);\n-  indent_amount_++;\n+  m_indent_amount++;\n }\n \n /* Write out the end of an s-expression: any necssessary indentation,\n    a closing parenthesis, and a new line.  */\n void\n s_expr_writer::end_s_expr (void)\n {\n-  indent_amount_--;\n+  m_indent_amount--;\n   write_any_indent (0);\n   fprintf (state_file, \")\");\n   write_new_line ();\n@@ -271,7 +271,7 @@ s_expr_writer::end_s_expr (void)\n /* class state_writer's trivial constructor.  */\n state_writer::state_writer ()\n   : s_expr_writer (),\n-    state_written_type_count (0)\n+    m_state_written_type_count (0)\n {\n }\n \n@@ -1136,10 +1136,10 @@ state_writer::write_state_type (type_p current)\n     }\n   else\n     {\n-      state_written_type_count++;\n-      DBGPRINTF (\"writing type #%d @%p old number %d\", state_written_type_count,\n+      m_state_written_type_count++;\n+      DBGPRINTF (\"writing type #%d @%p old number %d\", m_state_written_type_count,\n \t\t (void *) current, current->state_number);\n-      current->state_number = state_written_type_count;\n+      current->state_number = m_state_written_type_count;\n       switch (current->kind)\n \t{\n \tcase TYPE_NONE:\n@@ -1441,7 +1441,7 @@ write_state (const char *state_path)\n \n   if (verbosity_level >= 1)\n     printf (\"%s wrote state file %s of %ld bytes with %d GTY-ed types\\n\",\n-\t    progname, state_path, statelen, sw.state_written_type_count);\n+\t    progname, state_path, statelen, sw.m_state_written_type_count);\n \n }\n \f"}, {"sha": "2d882060ab5d8475ee98b6bf16a18a81da0d9a3a", "filename": "gcc/graphite-sese-to-poly.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Fgraphite-sese-to-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Fgraphite-sese-to-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-sese-to-poly.c?ref=65d3284bfe05bd65415f9caf9f535e8bb745bdd1", "patch": "@@ -1226,21 +1226,21 @@ class sese_dom_walker : public dom_walker\n   virtual void after_dom_children (basic_block);\n \n private:\n-  vec<gimple> conditions_, cases_;\n-  sese region_;\n+  vec<gimple> m_conditions, m_cases;\n+  sese m_region;\n };\n \n sese_dom_walker::sese_dom_walker (cdi_direction direction, sese region)\n-  : dom_walker (direction), region_ (region)\n+  : dom_walker (direction), m_region (region)\n {\n-  conditions_.create (3);\n-  cases_.create (3);\n+  m_conditions.create (3);\n+  m_cases.create (3);\n }\n \n sese_dom_walker::~sese_dom_walker ()\n {\n-  conditions_.release ();\n-  cases_.release ();\n+  m_conditions.release ();\n+  m_cases.release ();\n }\n \n /* Call-back for dom_walk executed before visiting the dominated\n@@ -1252,7 +1252,7 @@ sese_dom_walker::before_dom_children (basic_block bb)\n   gimple_bb_p gbb;\n   gimple stmt;\n \n-  if (!bb_in_sese_p (bb, region_))\n+  if (!bb_in_sese_p (bb, m_region))\n     return;\n \n   stmt = single_pred_cond_non_loop_exit (bb);\n@@ -1261,20 +1261,20 @@ sese_dom_walker::before_dom_children (basic_block bb)\n     {\n       edge e = single_pred_edge (bb);\n \n-      conditions_.safe_push (stmt);\n+      m_conditions.safe_push (stmt);\n \n       if (e->flags & EDGE_TRUE_VALUE)\n-\tcases_.safe_push (stmt);\n+\tm_cases.safe_push (stmt);\n       else\n-\tcases_.safe_push (NULL);\n+\tm_cases.safe_push (NULL);\n     }\n \n   gbb = gbb_from_bb (bb);\n \n   if (gbb)\n     {\n-      GBB_CONDITIONS (gbb) = conditions_.copy ();\n-      GBB_CONDITION_CASES (gbb) = cases_.copy ();\n+      GBB_CONDITIONS (gbb) = m_conditions.copy ();\n+      GBB_CONDITION_CASES (gbb) = m_cases.copy ();\n     }\n }\n \n@@ -1284,13 +1284,13 @@ sese_dom_walker::before_dom_children (basic_block bb)\n void\n sese_dom_walker::after_dom_children (basic_block bb)\n {\n-  if (!bb_in_sese_p (bb, region_))\n+  if (!bb_in_sese_p (bb, m_region))\n     return;\n \n   if (single_pred_cond_non_loop_exit (bb))\n     {\n-      conditions_.pop ();\n-      cases_.pop ();\n+      m_conditions.pop ();\n+      m_cases.pop ();\n     }\n }\n "}, {"sha": "5f80efb6bf4236e3c26f8886925d8c0ad9b9e9dd", "filename": "gcc/hash-table.h", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Fhash-table.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Fhash-table.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-table.h?ref=65d3284bfe05bd65415f9caf9f535e8bb745bdd1", "patch": "@@ -419,8 +419,8 @@ class hash_table\n     inline iterator &operator ++ ();\n     inline bool operator != (const iterator &) const;\n   private:\n-    value_type **slot_;\n-    value_type **limit_;\n+    value_type **m_slot;\n+    value_type **m_limit;\n   };\n \n private:\n@@ -959,7 +959,7 @@ template <typename Descriptor,\n \t  template <typename Type> class Allocator>\n inline\n hash_table <Descriptor, Allocator>::iterator::iterator ()\n-: slot_ (NULL), limit_ (NULL)\n+: m_slot (NULL), m_limit (NULL)\n {\n }\n \n@@ -970,7 +970,7 @@ template <typename Descriptor,\n inline\n hash_table <Descriptor, Allocator>::iterator::iterator\n    (value_type **slot, value_type **limit)\n-: slot_ (slot), limit_ (limit)\n+: m_slot (slot), m_limit (limit)\n {\n }\n \n@@ -981,7 +981,7 @@ template <typename Descriptor,\n inline typename hash_table <Descriptor, Allocator>::value_type &\n hash_table <Descriptor, Allocator>::iterator::operator * ()\n {\n-  return **slot_;\n+  return **m_slot;\n }\n \n /* Slide down the iterator slots until an active entry is found.  */\n@@ -991,14 +991,14 @@ template <typename Descriptor,\n void\n hash_table <Descriptor, Allocator>::iterator::slide ()\n {\n-  for ( ; slot_ < limit_; ++slot_ )\n+  for ( ; m_slot < m_limit; ++m_slot )\n     {\n-      value_type *x = *slot_;\n+      value_type *x = *m_slot;\n       if (x != HTAB_EMPTY_ENTRY && x != HTAB_DELETED_ENTRY)\n         return;\n     }\n-  slot_ = NULL;\n-  limit_ = NULL;\n+  m_slot = NULL;\n+  m_limit = NULL;\n }\n \n /* Bump the iterator.  */\n@@ -1008,7 +1008,7 @@ template <typename Descriptor,\n inline typename hash_table <Descriptor, Allocator>::iterator &\n hash_table <Descriptor, Allocator>::iterator::operator ++ ()\n {\n-  ++slot_;\n+  ++m_slot;\n   slide ();\n   return *this;\n }\n@@ -1021,7 +1021,7 @@ inline bool\n hash_table <Descriptor, Allocator>::iterator::\n   operator != (const iterator &other) const\n {\n-  return slot_ != other.slot_ || limit_ != other.limit_;\n+  return m_slot != other.m_slot || m_limit != other.m_limit;\n }\n \n /* Hash table iterator producers.  */"}, {"sha": "7ca09ad0b916043a9fab0d297d64d96ff82067ec", "filename": "gcc/ipa-inline-analysis.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Fipa-inline-analysis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Fipa-inline-analysis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-analysis.c?ref=65d3284bfe05bd65415f9caf9f535e8bb745bdd1", "patch": "@@ -2744,7 +2744,7 @@ class pass_inline_parameters : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_inline_parameters (ctxt_); }\n+  opt_pass * clone () { return new pass_inline_parameters (m_ctxt); }\n   unsigned int execute () {\n     return compute_inline_parameters_for_current ();\n   }"}, {"sha": "7e44d51ca59b40a2cc2593e314b3a69bad8c80c2", "filename": "gcc/ipa-pure-const.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Fipa-pure-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Fipa-pure-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-pure-const.c?ref=65d3284bfe05bd65415f9caf9f535e8bb745bdd1", "patch": "@@ -1709,7 +1709,7 @@ class pass_local_pure_const : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_local_pure_const (ctxt_); }\n+  opt_pass * clone () { return new pass_local_pure_const (m_ctxt); }\n   bool gate () { return gate_pure_const (); }\n   unsigned int execute () { return local_pure_const (); }\n "}, {"sha": "da0923a81a20fb72cb171eb0f2bcb8178b79ce2e", "filename": "gcc/machmode.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Fmachmode.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Fmachmode.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmachmode.h?ref=65d3284bfe05bd65415f9caf9f535e8bb745bdd1", "patch": "@@ -269,16 +269,16 @@ class bit_field_mode_iterator\n   bool prefer_smaller_modes ();\n \n private:\n-  enum machine_mode mode_;\n+  enum machine_mode m_mode;\n   /* We use signed values here because the bit position can be negative\n      for invalid input such as gcc.dg/pr48335-8.c.  */\n-  HOST_WIDE_INT bitsize_;\n-  HOST_WIDE_INT bitpos_;\n-  HOST_WIDE_INT bitregion_start_;\n-  HOST_WIDE_INT bitregion_end_;\n-  unsigned int align_;\n-  bool volatilep_;\n-  int count_;\n+  HOST_WIDE_INT m_bitsize;\n+  HOST_WIDE_INT m_bitpos;\n+  HOST_WIDE_INT m_bitregion_start;\n+  HOST_WIDE_INT m_bitregion_end;\n+  unsigned int m_align;\n+  bool m_volatilep;\n+  int m_count;\n };\n \n /* Find the best mode to use to access a bit field.  */"}, {"sha": "483566b25f6fa42e39210a4c0f4616f6a86cd9f5", "filename": "gcc/mode-switching.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Fmode-switching.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Fmode-switching.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmode-switching.c?ref=65d3284bfe05bd65415f9caf9f535e8bb745bdd1", "patch": "@@ -811,7 +811,7 @@ class pass_mode_switching : public rtl_opt_pass\n   /* opt_pass methods: */\n   /* The epiphany backend creates a second instance of this pass, so we need\n      a clone method.  */\n-  opt_pass * clone () { return new pass_mode_switching (ctxt_); }\n+  opt_pass * clone () { return new pass_mode_switching (m_ctxt); }\n   bool gate () { return gate_mode_switching (); }\n   unsigned int execute () { return rest_of_handle_mode_switching (); }\n "}, {"sha": "77d78eb11f5531c6f9201e051a01a6bc0aa28f44", "filename": "gcc/pass_manager.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Fpass_manager.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Fpass_manager.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpass_manager.h?ref=65d3284bfe05bd65415f9caf9f535e8bb745bdd1", "patch": "@@ -97,7 +97,7 @@ class pass_manager\n   void register_dump_files (struct opt_pass *pass, int properties);\n \n private:\n-  context *ctxt_;\n+  context *m_ctxt;\n \n   /* References to all of the individual passes.\n      These fields are generated via macro expansion."}, {"sha": "e7b7b9a992f1381677e1f62d565840ce37ff406f", "filename": "gcc/passes.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=65d3284bfe05bd65415f9caf9f535e8bb745bdd1", "patch": "@@ -112,7 +112,7 @@ opt_pass::opt_pass (const pass_data &data, context *ctxt)\n     sub (NULL),\n     next (NULL),\n     static_pass_number (0),\n-    ctxt_ (ctxt)\n+    m_ctxt (ctxt)\n {\n }\n \n@@ -1488,7 +1488,7 @@ pass_manager::pass_manager (context *ctxt)\n : all_passes (NULL), all_small_ipa_passes (NULL), all_lowering_passes (NULL),\n   all_regular_ipa_passes (NULL), all_lto_gen_passes (NULL),\n   all_late_ipa_passes (NULL), passes_by_id (NULL), passes_by_id_size (0),\n-  ctxt_ (ctxt)\n+  m_ctxt (ctxt)\n {\n   struct opt_pass **p;\n \n@@ -1513,7 +1513,7 @@ pass_manager::pass_manager (context *ctxt)\n   do { \\\n     gcc_assert (NULL == PASS ## _ ## NUM); \\\n     if ((NUM) == 1)                              \\\n-      PASS ## _1 = make_##PASS (ctxt_);          \\\n+      PASS ## _1 = make_##PASS (m_ctxt);          \\\n     else                                         \\\n       {                                          \\\n         gcc_assert (PASS ## _1);                 \\"}, {"sha": "4815e75248e2b866c283ba7580a328b767109d0a", "filename": "gcc/predict.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=65d3284bfe05bd65415f9caf9f535e8bb745bdd1", "patch": "@@ -3000,7 +3000,7 @@ class pass_strip_predict_hints : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_strip_predict_hints (ctxt_); }\n+  opt_pass * clone () { return new pass_strip_predict_hints (m_ctxt); }\n   unsigned int execute () { return strip_predict_hints (); }\n \n }; // class pass_strip_predict_hints"}, {"sha": "a3ca98c62fd7d952262c0d92ee1fde1b2aea2fd6", "filename": "gcc/recog.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=65d3284bfe05bd65415f9caf9f535e8bb745bdd1", "patch": "@@ -3808,7 +3808,7 @@ class pass_peephole2 : public rtl_opt_pass\n   /* opt_pass methods: */\n   /* The epiphany backend creates a second instance of this pass, so we need\n      a clone method.  */\n-  opt_pass * clone () { return new pass_peephole2 (ctxt_); }\n+  opt_pass * clone () { return new pass_peephole2 (m_ctxt); }\n   bool gate () { return gate_handle_peephole2 (); }\n   unsigned int execute () { return rest_of_handle_peephole2 (); }\n \n@@ -3856,7 +3856,7 @@ class pass_split_all_insns : public rtl_opt_pass\n   /* opt_pass methods: */\n   /* The epiphany backend creates a second instance of this pass, so\n      we need a clone method.  */\n-  opt_pass * clone () { return new pass_split_all_insns (ctxt_); }\n+  opt_pass * clone () { return new pass_split_all_insns (m_ctxt); }\n   unsigned int execute () { return rest_of_handle_split_all_insns (); }\n \n }; // class pass_split_all_insns"}, {"sha": "6584b575e0f5b21614b0ab5c265cc9cf9ec572c9", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=65d3284bfe05bd65415f9caf9f535e8bb745bdd1", "patch": "@@ -2627,12 +2627,12 @@ ::bit_field_mode_iterator (HOST_WIDE_INT bitsize, HOST_WIDE_INT bitpos,\n \t\t\t   HOST_WIDE_INT bitregion_start,\n \t\t\t   HOST_WIDE_INT bitregion_end,\n \t\t\t   unsigned int align, bool volatilep)\n-: mode_ (GET_CLASS_NARROWEST_MODE (MODE_INT)), bitsize_ (bitsize),\n-  bitpos_ (bitpos), bitregion_start_ (bitregion_start),\n-  bitregion_end_ (bitregion_end), align_ (align),\n-  volatilep_ (volatilep), count_ (0)\n+: m_mode (GET_CLASS_NARROWEST_MODE (MODE_INT)), m_bitsize (bitsize),\n+  m_bitpos (bitpos), m_bitregion_start (bitregion_start),\n+  m_bitregion_end (bitregion_end), m_align (align),\n+  m_volatilep (volatilep), m_count (0)\n {\n-  if (!bitregion_end_)\n+  if (!m_bitregion_end)\n     {\n       /* We can assume that any aligned chunk of ALIGN bits that overlaps\n \t the bitfield is mapped and won't trap, provided that ALIGN isn't\n@@ -2642,8 +2642,8 @@ ::bit_field_mode_iterator (HOST_WIDE_INT bitsize, HOST_WIDE_INT bitpos,\n \t= MIN (align, MAX (BIGGEST_ALIGNMENT, BITS_PER_WORD));\n       if (bitsize <= 0)\n \tbitsize = 1;\n-      bitregion_end_ = bitpos + bitsize + units - 1;\n-      bitregion_end_ -= bitregion_end_ % units + 1;\n+      m_bitregion_end = bitpos + bitsize + units - 1;\n+      m_bitregion_end -= m_bitregion_end % units + 1;\n     }\n }\n \n@@ -2654,12 +2654,12 @@ ::bit_field_mode_iterator (HOST_WIDE_INT bitsize, HOST_WIDE_INT bitpos,\n bool\n bit_field_mode_iterator::next_mode (enum machine_mode *out_mode)\n {\n-  for (; mode_ != VOIDmode; mode_ = GET_MODE_WIDER_MODE (mode_))\n+  for (; m_mode != VOIDmode; m_mode = GET_MODE_WIDER_MODE (m_mode))\n     {\n-      unsigned int unit = GET_MODE_BITSIZE (mode_);\n+      unsigned int unit = GET_MODE_BITSIZE (m_mode);\n \n       /* Skip modes that don't have full precision.  */\n-      if (unit != GET_MODE_PRECISION (mode_))\n+      if (unit != GET_MODE_PRECISION (m_mode))\n \tcontinue;\n \n       /* Stop if the mode is too wide to handle efficiently.  */\n@@ -2668,31 +2668,31 @@ bit_field_mode_iterator::next_mode (enum machine_mode *out_mode)\n \n       /* Don't deliver more than one multiword mode; the smallest one\n \t should be used.  */\n-      if (count_ > 0 && unit > BITS_PER_WORD)\n+      if (m_count > 0 && unit > BITS_PER_WORD)\n \tbreak;\n \n       /* Skip modes that are too small.  */\n-      unsigned HOST_WIDE_INT substart = (unsigned HOST_WIDE_INT) bitpos_ % unit;\n-      unsigned HOST_WIDE_INT subend = substart + bitsize_;\n+      unsigned HOST_WIDE_INT substart = (unsigned HOST_WIDE_INT) m_bitpos % unit;\n+      unsigned HOST_WIDE_INT subend = substart + m_bitsize;\n       if (subend > unit)\n \tcontinue;\n \n       /* Stop if the mode goes outside the bitregion.  */\n-      HOST_WIDE_INT start = bitpos_ - substart;\n-      if (bitregion_start_ && start < bitregion_start_)\n+      HOST_WIDE_INT start = m_bitpos - substart;\n+      if (m_bitregion_start && start < m_bitregion_start)\n \tbreak;\n       HOST_WIDE_INT end = start + unit;\n-      if (end > bitregion_end_ + 1)\n+      if (end > m_bitregion_end + 1)\n \tbreak;\n \n       /* Stop if the mode requires too much alignment.  */\n-      if (GET_MODE_ALIGNMENT (mode_) > align_\n-\t  && SLOW_UNALIGNED_ACCESS (mode_, align_))\n+      if (GET_MODE_ALIGNMENT (m_mode) > m_align\n+\t  && SLOW_UNALIGNED_ACCESS (m_mode, m_align))\n \tbreak;\n \n-      *out_mode = mode_;\n-      mode_ = GET_MODE_WIDER_MODE (mode_);\n-      count_++;\n+      *out_mode = m_mode;\n+      m_mode = GET_MODE_WIDER_MODE (m_mode);\n+      m_count++;\n       return true;\n     }\n   return false;\n@@ -2704,7 +2704,7 @@ bit_field_mode_iterator::next_mode (enum machine_mode *out_mode)\n bool\n bit_field_mode_iterator::prefer_smaller_modes ()\n {\n-  return (volatilep_\n+  return (m_volatilep\n \t  ? targetm.narrow_volatile_bitfield ()\n \t  : !SLOW_BYTE_ACCESS);\n }"}, {"sha": "b72ac61373cf4a19e315ca7b3619fd3b2dfc8da9", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=65d3284bfe05bd65415f9caf9f535e8bb745bdd1", "patch": "@@ -7967,7 +7967,7 @@ class pass_split_crit_edges : public gimple_opt_pass\n   /* opt_pass methods: */\n   unsigned int execute () { return split_critical_edges (); }\n \n-  opt_pass * clone () { return new pass_split_crit_edges (ctxt_); }\n+  opt_pass * clone () { return new pass_split_crit_edges (m_ctxt); }\n }; // class pass_split_crit_edges\n \n } // anon namespace"}, {"sha": "cd4307ec9b8bcfc8e3b7f49af8866debd99fad64", "filename": "gcc/tree-cfgcleanup.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Ftree-cfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Ftree-cfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfgcleanup.c?ref=65d3284bfe05bd65415f9caf9f535e8bb745bdd1", "patch": "@@ -1014,7 +1014,7 @@ class pass_merge_phi : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_merge_phi (ctxt_); }\n+  opt_pass * clone () { return new pass_merge_phi (m_ctxt); }\n   bool gate () { return gate_merge_phi (); }\n   unsigned int execute () { return merge_phi_nodes (); }\n "}, {"sha": "7d9b696d9a880caa1a6a3a0a3ea85bb81073141c", "filename": "gcc/tree-complex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Ftree-complex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Ftree-complex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-complex.c?ref=65d3284bfe05bd65415f9caf9f535e8bb745bdd1", "patch": "@@ -1662,7 +1662,7 @@ class pass_lower_complex : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_lower_complex (ctxt_); }\n+  opt_pass * clone () { return new pass_lower_complex (m_ctxt); }\n   unsigned int execute () { return tree_lower_complex (); }\n \n }; // class pass_lower_complex"}, {"sha": "1ad5baf58282bd27d1f2331ee07b3dedb25d33d3", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=65d3284bfe05bd65415f9caf9f535e8bb745bdd1", "patch": "@@ -4541,7 +4541,7 @@ class pass_cleanup_eh : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_cleanup_eh (ctxt_); }\n+  opt_pass * clone () { return new pass_cleanup_eh (m_ctxt); }\n   bool gate () { return gate_cleanup_eh (); }\n   unsigned int execute () { return execute_cleanup_eh (); }\n "}, {"sha": "18b00a888ea496ceb5c7dd2ef3b6713f4ffa3f00", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=65d3284bfe05bd65415f9caf9f535e8bb745bdd1", "patch": "@@ -2235,17 +2235,17 @@ class mark_def_dom_walker : public dom_walker\n   /* Notice that this bitmap is indexed using variable UIDs, so it must be\n      large enough to accommodate all the variables referenced in the\n      function, not just the ones we are renaming.  */\n-  bitmap kills_;\n+  bitmap m_kills;\n };\n \n mark_def_dom_walker::mark_def_dom_walker (cdi_direction direction)\n-  : dom_walker (direction), kills_ (BITMAP_ALLOC (NULL))\n+  : dom_walker (direction), m_kills (BITMAP_ALLOC (NULL))\n {\n }\n \n mark_def_dom_walker::~mark_def_dom_walker ()\n {\n-  BITMAP_FREE (kills_);\n+  BITMAP_FREE (m_kills);\n }\n \n /* Block processing routine for mark_def_sites.  Clear the KILLS bitmap\n@@ -2256,9 +2256,9 @@ mark_def_dom_walker::before_dom_children (basic_block bb)\n {\n   gimple_stmt_iterator gsi;\n \n-  bitmap_clear (kills_);\n+  bitmap_clear (m_kills);\n   for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n-    mark_def_sites (bb, gsi_stmt (gsi), kills_);\n+    mark_def_sites (bb, gsi_stmt (gsi), m_kills);\n }\n \n /* Initialize internal data needed during renaming.  */"}, {"sha": "0bdbc489f8ca1408716b6dd6e64b43030f50c960", "filename": "gcc/tree-object-size.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Ftree-object-size.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Ftree-object-size.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-object-size.c?ref=65d3284bfe05bd65415f9caf9f535e8bb745bdd1", "patch": "@@ -1288,7 +1288,7 @@ class pass_object_sizes : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_object_sizes (ctxt_); }\n+  opt_pass * clone () { return new pass_object_sizes (m_ctxt); }\n   unsigned int execute () { return compute_object_sizes (); }\n \n }; // class pass_object_sizes"}, {"sha": "445bd7c7a91a6957bbbbc84c3860fc56ff7da28e", "filename": "gcc/tree-optimize.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Ftree-optimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Ftree-optimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-optimize.c?ref=65d3284bfe05bd65415f9caf9f535e8bb745bdd1", "patch": "@@ -255,7 +255,7 @@ class pass_fixup_cfg : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_fixup_cfg (ctxt_); }\n+  opt_pass * clone () { return new pass_fixup_cfg (m_ctxt); }\n   unsigned int execute () { return execute_fixup_cfg (); }\n \n }; // class pass_fixup_cfg"}, {"sha": "e72fe9aeee4d4de4b7cfef166f6528ba761feca6", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=65d3284bfe05bd65415f9caf9f535e8bb745bdd1", "patch": "@@ -115,7 +115,7 @@ class opt_pass : public pass_data\n   int static_pass_number;\n \n protected:\n-  gcc::context *ctxt_;\n+  gcc::context *m_ctxt;\n };\n \n /* Description of GIMPLE pass.  */"}, {"sha": "fe21c0727a1a99439c3829ae3c4a93beee36c9c1", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=65d3284bfe05bd65415f9caf9f535e8bb745bdd1", "patch": "@@ -2171,7 +2171,7 @@ class pass_ccp : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_ccp (ctxt_); }\n+  opt_pass * clone () { return new pass_ccp (m_ctxt); }\n   bool gate () { return gate_ccp (); }\n   unsigned int execute () { return do_ssa_ccp (); }\n \n@@ -2588,7 +2588,7 @@ class pass_fold_builtins : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_fold_builtins (ctxt_); }\n+  opt_pass * clone () { return new pass_fold_builtins (m_ctxt); }\n   unsigned int execute () { return execute_fold_all_builtins (); }\n \n }; // class pass_fold_builtins"}, {"sha": "5ab5389a7fab331d3d8513663451259e1827deb9", "filename": "gcc/tree-ssa-copy.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Ftree-ssa-copy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Ftree-ssa-copy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copy.c?ref=65d3284bfe05bd65415f9caf9f535e8bb745bdd1", "patch": "@@ -863,7 +863,7 @@ class pass_copy_prop : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_copy_prop (ctxt_); }\n+  opt_pass * clone () { return new pass_copy_prop (m_ctxt); }\n   bool gate () { return gate_copy_prop (); }\n   unsigned int execute () { return execute_copy_prop (); }\n "}, {"sha": "d8660c56e620a2bf13a78f41dc3606d61332fbe3", "filename": "gcc/tree-ssa-copyrename.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Ftree-ssa-copyrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Ftree-ssa-copyrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copyrename.c?ref=65d3284bfe05bd65415f9caf9f535e8bb745bdd1", "patch": "@@ -460,7 +460,7 @@ class pass_rename_ssa_copies : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_rename_ssa_copies (ctxt_); }\n+  opt_pass * clone () { return new pass_rename_ssa_copies (m_ctxt); }\n   bool gate () { return gate_copyrename (); }\n   unsigned int execute () { return rename_ssa_copies (); }\n "}, {"sha": "c20a13a04c8e77c2eaafad10469ddc8c515166df", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=65d3284bfe05bd65415f9caf9f535e8bb745bdd1", "patch": "@@ -1565,7 +1565,7 @@ class pass_dce : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_dce (ctxt_); }\n+  opt_pass * clone () { return new pass_dce (m_ctxt); }\n   bool gate () { return gate_dce (); }\n   unsigned int execute () { return tree_ssa_dce (); }\n \n@@ -1604,7 +1604,7 @@ class pass_dce_loop : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_dce_loop (ctxt_); }\n+  opt_pass * clone () { return new pass_dce_loop (m_ctxt); }\n   bool gate () { return gate_dce (); }\n   unsigned int execute () { return tree_ssa_dce_loop (); }\n \n@@ -1643,7 +1643,7 @@ class pass_cd_dce : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_cd_dce (ctxt_); }\n+  opt_pass * clone () { return new pass_cd_dce (m_ctxt); }\n   bool gate () { return gate_dce (); }\n   unsigned int execute () { return tree_ssa_cd_dce (); }\n "}, {"sha": "7013f43e6a61d3e8a679cb5f689b836534eb0f0a", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=65d3284bfe05bd65415f9caf9f535e8bb745bdd1", "patch": "@@ -775,15 +775,15 @@ class dom_opt_dom_walker : public dom_walker\n {\n public:\n   dom_opt_dom_walker (cdi_direction direction)\n-    : dom_walker (direction), dummy_cond_ (NULL) {}\n+    : dom_walker (direction), m_dummy_cond (NULL) {}\n \n   virtual void before_dom_children (basic_block);\n   virtual void after_dom_children (basic_block);\n \n private:\n   void thread_across_edge (edge);\n \n-  gimple dummy_cond_;\n+  gimple m_dummy_cond;\n };\n \n /* Jump threading, redundancy elimination and const/copy propagation.\n@@ -940,7 +940,7 @@ class pass_dominator : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_dominator (ctxt_); }\n+  opt_pass * clone () { return new pass_dominator (m_ctxt); }\n   bool gate () { return gate_dominator (); }\n   unsigned int execute () { return tree_ssa_dominator_optimize (); }\n \n@@ -1107,8 +1107,8 @@ record_temporary_equivalences (edge e)\n void\n dom_opt_dom_walker::thread_across_edge (edge e)\n {\n-  if (! dummy_cond_)\n-    dummy_cond_ =\n+  if (! m_dummy_cond)\n+    m_dummy_cond =\n         gimple_build_cond (NE_EXPR,\n                            integer_zero_node, integer_zero_node,\n                            NULL, NULL);\n@@ -1123,7 +1123,7 @@ dom_opt_dom_walker::thread_across_edge (edge e)\n \n   /* With all the edge equivalences in the tables, go ahead and attempt\n      to thread through E->dest.  */\n-  ::thread_across_edge (dummy_cond_, e, false,\n+  ::thread_across_edge (m_dummy_cond, e, false,\n \t\t        &const_and_copies_stack,\n \t\t        simplify_stmt_for_jump_threading);\n \n@@ -3133,7 +3133,7 @@ class pass_phi_only_cprop : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_phi_only_cprop (ctxt_); }\n+  opt_pass * clone () { return new pass_phi_only_cprop (m_ctxt); }\n   bool gate () { return gate_dominator (); }\n   unsigned int execute () { return eliminate_degenerate_phis (); }\n "}, {"sha": "700824cade89e26fccd27782c0ea07bbe94daca5", "filename": "gcc/tree-ssa-dse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Ftree-ssa-dse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Ftree-ssa-dse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dse.c?ref=65d3284bfe05bd65415f9caf9f535e8bb745bdd1", "patch": "@@ -380,7 +380,7 @@ class pass_dse : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_dse (ctxt_); }\n+  opt_pass * clone () { return new pass_dse (m_ctxt); }\n   bool gate () { return gate_dse (); }\n   unsigned int execute () { return tree_ssa_dse (); }\n "}, {"sha": "8807db16a1b51554ce2ac171ad1d468951bc9100", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=65d3284bfe05bd65415f9caf9f535e8bb745bdd1", "patch": "@@ -3565,7 +3565,7 @@ class pass_forwprop : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_forwprop (ctxt_); }\n+  opt_pass * clone () { return new pass_forwprop (m_ctxt); }\n   bool gate () { return gate_forwprop (); }\n   unsigned int execute () { return ssa_forward_propagate_and_combine (); }\n "}, {"sha": "3952029d0ea8c28d870fc943191db5979cd02aa1", "filename": "gcc/tree-ssa-loop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Ftree-ssa-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Ftree-ssa-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop.c?ref=65d3284bfe05bd65415f9caf9f535e8bb745bdd1", "patch": "@@ -176,7 +176,7 @@ class pass_lim : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_lim (ctxt_); }\n+  opt_pass * clone () { return new pass_lim (m_ctxt); }\n   bool gate () { return gate_tree_ssa_loop_im (); }\n   unsigned int execute () { return tree_ssa_loop_im (); }\n "}, {"sha": "c39419f071692194cda49861c9757afecedb2ec3", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=65d3284bfe05bd65415f9caf9f535e8bb745bdd1", "patch": "@@ -1379,13 +1379,13 @@ class nontrapping_dom_walker : public dom_walker\n {\n public:\n   nontrapping_dom_walker (cdi_direction direction, pointer_set_t *ps)\n-    : dom_walker (direction), nontrapping_ (ps) {}\n+    : dom_walker (direction), m_nontrapping (ps) {}\n \n   virtual void before_dom_children (basic_block);\n   virtual void after_dom_children (basic_block);\n \n private:\n-  pointer_set_t *nontrapping_;\n+  pointer_set_t *m_nontrapping;\n };\n \n /* Called by walk_dominator_tree, when entering the block BB.  */\n@@ -1416,8 +1416,8 @@ nontrapping_dom_walker::before_dom_children (basic_block bb)\n \tnt_call_phase++;\n       else if (gimple_assign_single_p (stmt) && !gimple_has_volatile_ops (stmt))\n \t{\n-\t  add_or_mark_expr (bb, gimple_assign_lhs (stmt), nontrapping_, true);\n-\t  add_or_mark_expr (bb, gimple_assign_rhs1 (stmt), nontrapping_, false);\n+\t  add_or_mark_expr (bb, gimple_assign_lhs (stmt), m_nontrapping, true);\n+\t  add_or_mark_expr (bb, gimple_assign_rhs1 (stmt), m_nontrapping, false);\n \t}\n     }\n }\n@@ -2039,7 +2039,7 @@ class pass_phiopt : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_phiopt (ctxt_); }\n+  opt_pass * clone () { return new pass_phiopt (m_ctxt); }\n   bool gate () { return gate_phiopt (); }\n   unsigned int execute () { return tree_ssa_phiopt (); }\n "}, {"sha": "bd13476d31d9a276814e85e9218769d6062c1095", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=65d3284bfe05bd65415f9caf9f535e8bb745bdd1", "patch": "@@ -4865,7 +4865,7 @@ class pass_fre : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_fre (ctxt_); }\n+  opt_pass * clone () { return new pass_fre (m_ctxt); }\n   bool gate () { return gate_fre (); }\n   unsigned int execute () { return execute_fre (); }\n "}, {"sha": "cbf3a2d337e74e59c91d5ee89db1a8ecb6f0b10a", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=65d3284bfe05bd65415f9caf9f535e8bb745bdd1", "patch": "@@ -4485,7 +4485,7 @@ class pass_reassoc : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_reassoc (ctxt_); }\n+  opt_pass * clone () { return new pass_reassoc (m_ctxt); }\n   bool gate () { return gate_tree_ssa_reassoc (); }\n   unsigned int execute () { return execute_reassoc (); }\n "}, {"sha": "28ff546c6274abcc3f71528c4351c4f09c5a085a", "filename": "gcc/tree-ssa-uncprop.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Ftree-ssa-uncprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Ftree-ssa-uncprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-uncprop.c?ref=65d3284bfe05bd65415f9caf9f535e8bb745bdd1", "patch": "@@ -360,23 +360,23 @@ class uncprop_dom_walker : public dom_walker\n   uncprop_dom_walker (cdi_direction direction)\n     : dom_walker (direction)\n   {\n-    equiv_stack_.create (2);\n+    m_equiv_stack.create (2);\n   }\n   ~uncprop_dom_walker ()\n   {\n-    equiv_stack_.release ();\n+    m_equiv_stack.release ();\n   }\n \n   virtual void before_dom_children (basic_block);\n   virtual void after_dom_children (basic_block);\n \n private:\n \n-/* As we enter each block we record the value for any edge equivalency\n-   leading to this block.  If no such edge equivalency exists, then we\n-   record NULL.  These equivalences are live until we leave the dominator\n-   subtree rooted at the block where we record the equivalency.  */\n-  vec<tree> equiv_stack_;\n+  /* As we enter each block we record the value for any edge equivalency\n+     leading to this block.  If no such edge equivalency exists, then we\n+     record NULL.  These equivalences are live until we leave the dominator\n+     subtree rooted at the block where we record the equivalency.  */\n+  vec<tree> m_equiv_stack;\n };\n \n /* Main driver for un-cprop.  */\n@@ -428,7 +428,7 @@ void\n uncprop_dom_walker::after_dom_children (basic_block bb ATTRIBUTE_UNUSED)\n {\n   /* Pop the topmost value off the equiv stack.  */\n-  tree value = equiv_stack_.pop ();\n+  tree value = m_equiv_stack.pop ();\n \n   /* If that value was non-null, then pop the topmost equivalency off\n      its equivalency stack.  */\n@@ -566,13 +566,13 @@ uncprop_dom_walker::before_dom_children (basic_block bb)\n \t  struct edge_equivalency *equiv = (struct edge_equivalency *) e->aux;\n \n \t  record_equiv (equiv->rhs, equiv->lhs);\n-\t  equiv_stack_.safe_push (equiv->rhs);\n+\t  m_equiv_stack.safe_push (equiv->rhs);\n \t  recorded = true;\n \t}\n     }\n \n   if (!recorded)\n-    equiv_stack_.safe_push (NULL_TREE);\n+    m_equiv_stack.safe_push (NULL_TREE);\n \n   uncprop_into_successor_phis (bb);\n }\n@@ -608,7 +608,7 @@ class pass_uncprop : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_uncprop (ctxt_); }\n+  opt_pass * clone () { return new pass_uncprop (m_ctxt); }\n   bool gate () { return gate_uncprop (); }\n   unsigned int execute () { return tree_ssa_uncprop (); }\n "}, {"sha": "0174ee1748a4a4efd029a9001e4294a7d48ac847", "filename": "gcc/tree-ssa-uninit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Ftree-ssa-uninit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Ftree-ssa-uninit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-uninit.c?ref=65d3284bfe05bd65415f9caf9f535e8bb745bdd1", "patch": "@@ -2198,7 +2198,7 @@ class pass_late_warn_uninitialized : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_late_warn_uninitialized (ctxt_); }\n+  opt_pass * clone () { return new pass_late_warn_uninitialized (m_ctxt); }\n   bool gate () { return gate_warn_uninitialized (); }\n   unsigned int execute () { return execute_late_warn_uninitialized (); }\n "}, {"sha": "721c8314b4a44da74ad3b945730cd01f9afb8caf", "filename": "gcc/tree-tailcall.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Ftree-tailcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Ftree-tailcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-tailcall.c?ref=65d3284bfe05bd65415f9caf9f535e8bb745bdd1", "patch": "@@ -1088,7 +1088,7 @@ class pass_tail_recursion : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_tail_recursion (ctxt_); }\n+  opt_pass * clone () { return new pass_tail_recursion (m_ctxt); }\n   bool gate () { return gate_tail_calls (); }\n   unsigned int execute () { return execute_tail_recursion (); }\n "}, {"sha": "df2f894e0f442837f30d78f691c5e05780ddd24d", "filename": "gcc/tree-vect-generic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Ftree-vect-generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Ftree-vect-generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-generic.c?ref=65d3284bfe05bd65415f9caf9f535e8bb745bdd1", "patch": "@@ -1523,7 +1523,7 @@ class pass_lower_vector_ssa : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_lower_vector_ssa (ctxt_); }\n+  opt_pass * clone () { return new pass_lower_vector_ssa (m_ctxt); }\n   unsigned int execute () { return expand_vector_operations (); }\n \n }; // class pass_lower_vector_ssa"}, {"sha": "52d90080c1962c5ec3708c8d29f44dbfa3ea17f8", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=65d3284bfe05bd65415f9caf9f535e8bb745bdd1", "patch": "@@ -9670,7 +9670,7 @@ class pass_vrp : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_vrp (ctxt_); }\n+  opt_pass * clone () { return new pass_vrp (m_ctxt); }\n   bool gate () { return gate_vrp (); }\n   unsigned int execute () { return execute_vrp (); }\n "}, {"sha": "3619f25045d435f0471e68f0640846cf7573a648", "filename": "gcc/tsan.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Ftsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d3284bfe05bd65415f9caf9f535e8bb745bdd1/gcc%2Ftsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftsan.c?ref=65d3284bfe05bd65415f9caf9f535e8bb745bdd1", "patch": "@@ -758,7 +758,7 @@ class pass_tsan : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  opt_pass * clone () { return new pass_tsan (ctxt_); }\n+  opt_pass * clone () { return new pass_tsan (m_ctxt); }\n   bool gate () { return tsan_gate (); }\n   unsigned int execute () { return tsan_pass (); }\n "}]}