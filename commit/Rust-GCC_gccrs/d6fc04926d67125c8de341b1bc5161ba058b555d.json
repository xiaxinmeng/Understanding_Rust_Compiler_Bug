{"sha": "d6fc04926d67125c8de341b1bc5161ba058b555d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDZmYzA0OTI2ZDY3MTI1YzhkZTM0MWIxYmM1MTYxYmEwNThiNTU1ZA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2003-06-12T18:01:26Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-06-12T18:01:26Z"}, "message": "re PR inline-asm/4823 (gcc reports internal compiler error on legal code)\n\n        PR inline-asm/4823\n        * reg-stack.c (any_malformed_asm): New.\n        (check_asm_stack_operands): Set it.\n        (convert_regs_1): Check it before aborting.\n\nFrom-SVN: r67845", "tree": {"sha": "a58f94157b4eb2934df8ba2261b7e46ba75ed2dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a58f94157b4eb2934df8ba2261b7e46ba75ed2dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6fc04926d67125c8de341b1bc5161ba058b555d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6fc04926d67125c8de341b1bc5161ba058b555d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6fc04926d67125c8de341b1bc5161ba058b555d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6fc04926d67125c8de341b1bc5161ba058b555d/comments", "author": null, "committer": null, "parents": [{"sha": "79b59cc3d3896f109992cee1bbba17ee255c334d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79b59cc3d3896f109992cee1bbba17ee255c334d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79b59cc3d3896f109992cee1bbba17ee255c334d"}], "stats": {"total": 19, "additions": 17, "deletions": 2}, "files": [{"sha": "d5f538614ef78099e846149410481762d16f389a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6fc04926d67125c8de341b1bc5161ba058b555d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6fc04926d67125c8de341b1bc5161ba058b555d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d6fc04926d67125c8de341b1bc5161ba058b555d", "patch": "@@ -1,3 +1,10 @@\n+2003-06-10  Richard Henderson  <rth@redhat.com>\n+\n+        PR inline-asm/4823\n+        * reg-stack.c (any_malformed_asm): New.\n+        (check_asm_stack_operands): Set it.\n+        (convert_regs_1): Check it before aborting.\n+\n 2003-06-12  Aldy Hernandez  <aldyh@redhat.com>\n \n         * config/rs6000/spe.md: Change all clobbers of the accumulator to sets."}, {"sha": "6efea36d6dc9fbb53bcdde63c1048c53289c6b60", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6fc04926d67125c8de341b1bc5161ba058b555d/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6fc04926d67125c8de341b1bc5161ba058b555d/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=d6fc04926d67125c8de341b1bc5161ba058b555d", "patch": "@@ -591,6 +591,9 @@ get_true_reg (pat)\n       }\n }\n \f\n+/* Set if we find any malformed asms in a block.  */\n+static bool any_malformed_asm;\n+\n /* There are many rules that an asm statement for stack-like regs must\n    follow.  Those rules are explained at the top of this file: the rule\n    numbers below refer to that explanation.  */\n@@ -772,6 +775,7 @@ check_asm_stack_operands (insn)\n     {\n       /* Avoid further trouble with this insn.  */\n       PATTERN (insn) = gen_rtx_USE (VOIDmode, const0_rtx);\n+      any_malformed_asm = true;\n       return 0;\n     }\n \n@@ -2692,6 +2696,7 @@ convert_regs_1 (file, block)\n   edge e, beste = NULL;\n \n   inserted = 0;\n+  any_malformed_asm = false;\n \n   /* Find the edge we will copy stack from.  It should be the most frequent\n      one as it will get cheapest after compensation code is generated,\n@@ -2805,9 +2810,12 @@ convert_regs_1 (file, block)\n \t}\n     }\n \n-  /* Something failed if the stack lives don't match.  */\n+  /* Something failed if the stack lives don't match.  If we had malformed\n+     asms, we zapped the instruction itself, but that didn't produce the\n+     same pattern of register kills as before.  */\n   GO_IF_HARD_REG_EQUAL (regstack.reg_set, bi->out_reg_set, win);\n-  abort ();\n+  if (!any_malformed_asm)\n+    abort ();\n  win:\n   bi->stack_out = regstack;\n "}]}