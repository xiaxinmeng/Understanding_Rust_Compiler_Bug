{"sha": "e23381dfb4a651cd26e4143fcbae06381371da3c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTIzMzgxZGZiNGE2NTFjZDI2ZTQxNDNmY2JhZTA2MzgxMzcxZGEzYw==", "commit": {"author": {"name": "Geert Bosch", "email": "bosch@gcc.gnu.org", "date": "2001-10-24T22:31:17Z"}, "committer": {"name": "Geert Bosch", "email": "bosch@gcc.gnu.org", "date": "2001-10-24T22:31:17Z"}, "message": "gcc.texi (G++ and GCC): Mention Ada front end.\n\n\t* doc/gcc.texi (G++ and GCC): Mention Ada front end.\n\t(Standards): Refer to GNAT Reference Manual.\n\n\t* doc/install.texi (Configuration): Mention Ada front end.\n\t(Building): Add build instructions for the Ada front end.\n\n\t* doc/invoke.texi (Overall Options): Document Ada file types.\n\tAdd \"ada\" to \"-x LANGUAGE\" option parameters.\n\nFrom-SVN: r46479", "tree": {"sha": "2c77421c6b00d8c986e8445ee037b885589f97d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c77421c6b00d8c986e8445ee037b885589f97d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e23381dfb4a651cd26e4143fcbae06381371da3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e23381dfb4a651cd26e4143fcbae06381371da3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e23381dfb4a651cd26e4143fcbae06381371da3c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e23381dfb4a651cd26e4143fcbae06381371da3c/comments", "author": null, "committer": null, "parents": [{"sha": "1ff37128ae7fd03586750ae1269dd3ef179f3832", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ff37128ae7fd03586750ae1269dd3ef179f3832", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ff37128ae7fd03586750ae1269dd3ef179f3832"}], "stats": {"total": 103, "additions": 87, "deletions": 16}, "files": [{"sha": "c6d1c8697393552151f97a40a4108532c1807b0f", "filename": "gcc/doc/gcc.texi", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23381dfb4a651cd26e4143fcbae06381371da3c/gcc%2Fdoc%2Fgcc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23381dfb4a651cd26e4143fcbae06381371da3c/gcc%2Fdoc%2Fgcc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc.texi?ref=e23381dfb4a651cd26e4143fcbae06381371da3c", "patch": "@@ -296,16 +296,17 @@ bugs.  It corresponds to GCC version 3.1.\n \n @ifset USING\n @node G++ and GCC\n-@chapter Compile C, C++, Objective-C, Fortran, Java or CHILL\n+@chapter Compile C, C++, Objective-C, Ada, CHILL, Fortran, or Java\n \n @cindex Objective-C\n @cindex Fortran\n @cindex Java\n @cindex CHILL\n-Several versions of the compiler (C, C++, Objective-C, Fortran, Java\n-and CHILL) are integrated; this is why we use the name\n+@cindex Ada\n+Several versions of the compiler (C, C++, Objective-C, Ada, CHILL,\n+Fortran, and Java) are integrated; this is why we use the name\n ``GNU Compiler Collection''.  GCC can compile programs written in any of these\n-languages.  The Fortran, CHILL, and Java compilers are described in\n+languages.  The Ada, CHILL, Fortran, and Java compilers are described in\n separate manuals.\n \n @cindex GCC\n@@ -321,12 +322,17 @@ When referring to C++ compilation, it is usual to call the compiler\n it ``GCC'' no matter what the language context; however, the term\n ``G++'' is more useful when the emphasis is on compiling C++ programs.\n \n+@cindex Ada\n+@cindex GNAT\n+Similarly, when we talk about Ada compilation, we usually call the\n+compiler ``GNAT'', for the same reasons.\n+\n We use the name ``GCC'' to refer to the compilation system as a\n whole, and more specifically to the language-independent part of the\n compiler.  For example, we refer to the optimization options as\n affecting the behavior of ``GCC'' or sometimes just ``the compiler''.\n \n-Front ends for other languages, such as Ada 95 and Pascal exist but\n+Front ends for other languages, such as Mercury and Pascal exist but\n have not yet been integrated into GCC@.  These front ends, like that for C++,\n are built in subdirectories of GCC and link to it.  The result is an\n integrated compiler that can compile programs written in C, C++,\n@@ -513,15 +519,19 @@ recent version, while @uref{http://www.toodarkpark.org/computers/objc/}\n is an older example.  @uref{http://www.gnustep.org} includes useful\n information as well.\n \n+@xref{Top, GNAT Reference Manual, About This Guide, gnat_rm, \n+GNAT Reference Manual}, for information on standard\n+conformance and compatibility of the Ada compiler.\n+\n+@xref{References,,Language Definition References, chill, GNU Chill},\n+for details of the CHILL standard.\n+\n @xref{Language,,The GNU Fortran Language, g77, Using and Porting GNU\n Fortran}, for details of the Fortran language supported by GCC@.\n \n @xref{Compatibility,,Compatibility with the Java Platform, gcj, GNU gcj},\n for details of compatibility between @code{gcj} and the Java Platform.\n \n-@xref{References,,Language Definition References, chill, GNU Chill},\n-for details of the CHILL standard.\n-\n @include invoke.texi\n \n @include install-old.texi"}, {"sha": "d260a0dc956e8b9b37177f416276c2c7302e6799", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 55, "deletions": 3, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23381dfb4a651cd26e4143fcbae06381371da3c/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23381dfb4a651cd26e4143fcbae06381371da3c/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=e23381dfb4a651cd26e4143fcbae06381371da3c", "patch": "@@ -632,9 +632,10 @@ their runtime libraries should be built.  For a list of valid values for\n grep language= */config-lang.in\n @end example\n Currently, you can use any of the following:\n-@code{c}, @code{c++}, @code{f77}, @code{java} and @code{objc}.\n+@code{ada}, @code{c}, @code{c++}, @code{f77}, @code{java}, @code{objc}.\n @code{CHILL} is not currently maintained, and will almost\n-certainly fail to compile.@*\n+certainly fail to compile.  Building the Ada compiler has special\n+requirements, see below.@*\n If you do not pass this flag, all languages available in the @file{gcc}\n sub-tree will be configured.  Re-defining @code{LANGUAGES} when calling\n @samp{make bootstrap} @strong{does not} work anymore, as those\n@@ -764,7 +765,8 @@ Now that GCC is configured, you are ready to build the compiler and\n runtime libraries.\n \n We @strong{highly} recommend that GCC be built using GNU make;\n-other versions may work, then again they might not.\n+other versions may work, then again they might not.  \n+GNU make is required for compiling GNAT, the Ada compiler.\n \n (For example, many broken versions of make will fail if you use the\n recommended setup where @var{objdir} is different from @var{srcdir}.\n@@ -921,6 +923,56 @@ when building GCC@.  You can use a bigger number instead of two if\n you like.  In most cases, it won't help to use a number bigger than\n the number of processors in your machine.\n \n+@section Building the Ada compiler\n+\n+In order to build GNAT, the Ada compiler, you need a working GNAT\n+compiler, since the Ada front end is written in Ada (with some\n+GNAT-specific extensions), and GNU make.\n+\n+However, you do not need a full installation of GNAT, just the GNAT\n+binary @file{gnat1}, a copy of @file{gnatbind}, and a compiler driver\n+which can deal with Ada input (by invoking the @file{gnat1} binary).\n+You can specify this compiler driver by setting the @env{ADAC}\n+environment variable at the configure step.  @command{configure} can\n+detect the driver automatically if it has got a common name such as\n+@command{gcc} or @command{gnatgcc}.  Of course, you still need a working\n+C compiler (the compiler driver can be different or not).\n+\n+Additional build tools (such as @command{gnatmake}) or a working GNAT\n+run-time library installation are usually @emph{not} required.  However,\n+if you want to boostrap the compiler using a minimal version of GNAT,\n+you have to issue the following commands before invoking @samp{make\n+boostrap} (this assumes that you start with an unmodified and consistent\n+source distribution):\n+\n+@example\n+    cd @var{srcdir}/gcc/ada\n+    touch treeprs.ads [es]info.h nmake.ad[bs]\n+@end example\n+\n+At the moment, the GNAT library and several tools for GNAT are not built\n+by @samp{make bootstrap}.  You have to invoke \n+@samp{make gnatlib_and_tools} in the @file{@var{objdir}/gcc}\n+subdirectory before proceeding with the next steps.\n+\n+For example, you can build a native Ada compiler by issuing the\n+following commands (assuming @command{make} is GNU make):\n+\n+@example\n+    cd @var{objdir}\n+    @var{srcdir}/configure --enable-languages=c,ada \n+    cd @var{srcdir}/gcc/ada\n+    touch treeprs.ads [es]info.h nmake.ad[bs]\n+    cd @var{objdir}    \n+    make bootstrap\n+    cd gcc\n+    make gnatlib_and_tools\n+    cd ..\n+@end example\n+\n+Currently, when compiling the Ada front end, you cannot use the parallel\n+build feature described in the previous section.\n+\n @html\n <hr>\n <p>"}, {"sha": "a897188c5c57533e3c962aa3a002b7a0b6d54f3a", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e23381dfb4a651cd26e4143fcbae06381371da3c/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e23381dfb4a651cd26e4143fcbae06381371da3c/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=e23381dfb4a651cd26e4143fcbae06381371da3c", "patch": "@@ -706,11 +706,18 @@ Fortran input files.\n @c @var{file}.zip\n @c @var{file}.jar\n \n+@item @var{file}.ads\n+Ada source code file which contains a library unit declaration (a\n+declaration of a package, subprogram, or generic, or a generic\n+instantiation), or a library unit renaming declaration (a package,\n+generic, or subprogram renaming declaration).  Such files are also\n+called @dfn{specs}.\n+\n+@itemx @var{file}.adb\n+Ada source code file containing a library unit body (a subprogram or\n+package body).  Such files are also called @dfn{bodies}.\n+\n @c GCC also knows about some suffixes for languages not yet included:\n-@c Ada:\n-@c @var{file}.ads\n-@c @var{file}.adb\n-@c @var{file}.ada\n @c Pascal:\n @c @var{file}.p\n @c @var{file}.pas\n@@ -744,8 +751,10 @@ c  c-header  cpp-output\n c++  c++-cpp-output\n objective-c  objc-cpp-output\n assembler  assembler-with-cpp\n+ada\n+chill\n f77  f77-cpp-input  ratfor\n-java  chill\n+java\n @end example\n @c Also f77-version, for internal use only.\n "}]}