{"sha": "8861bdd59a95b32ad6000157418c808317421bfe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODg2MWJkZDU5YTk1YjMyYWQ2MDAwMTU3NDE4YzgwODMxNzQyMWJmZQ==", "commit": {"author": {"name": "Steve Baird", "email": "baird@adacore.com", "date": "2020-06-23T23:12:36Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-10-15T09:39:13Z"}, "message": "[Ada] Get finalization right when a function returns a function call\n\ngcc/ada/\n\n\t* checks.adb (Apply_Predicate_Check): Generate \"infinite\n\trecursion\" warning message even if run-time predicate checking\n\tis disabled.\n\t* exp_ch6.adb (Expand_Simple_Function_Return): In testing\n\twhether the returned expression is a function call, look for the\n\tcase where the call has been transformed into a dereference of\n\tan access value that designates the result of a function call.\n\t* sem_ch3.adb (Analyze_Object_Declaration): Legality checking\n\tfor a static expression is unaffected by assertion policy (and,\n\tin particular, enabling/disabling of subtype predicates.  To get\n\tthe right legality checking, we need to call\n\tCheck_Expression_Against_Static_Predicate for a static\n\texpression even if predicate checking is disabled for the given\n\tpredicate-bearing subtype.  On the other hand, we don't want to\n\tcall Make_Predicate_Check unless predicate checking is enabled.\n\t* sem_ch7.adb (Uninstall_Declarations.Preserve_Full_Attributes):\n\tPreserve the Predicates_Ignored attribute.\n\t* sem_eval.adb (Check_Expression_Against_Static_Predicate):\n\tPreviously callers ensured that this procedure was only called\n\tif predicate checking was enabled; that is no longer the case,\n\tso predicates-disabled case must be handled.\n\t* sem_prag.adb (Analyze_Pragma): Fix bug in setting\n\tPredicates_Ignored attribute in Predicate pragma case.", "tree": {"sha": "de485687f008f292939534831d75462525f4e158", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de485687f008f292939534831d75462525f4e158"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8861bdd59a95b32ad6000157418c808317421bfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8861bdd59a95b32ad6000157418c808317421bfe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8861bdd59a95b32ad6000157418c808317421bfe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8861bdd59a95b32ad6000157418c808317421bfe/comments", "author": {"login": "swbaird", "id": 50751052, "node_id": "MDQ6VXNlcjUwNzUxMDUy", "avatar_url": "https://avatars.githubusercontent.com/u/50751052?v=4", "gravatar_id": "", "url": "https://api.github.com/users/swbaird", "html_url": "https://github.com/swbaird", "followers_url": "https://api.github.com/users/swbaird/followers", "following_url": "https://api.github.com/users/swbaird/following{/other_user}", "gists_url": "https://api.github.com/users/swbaird/gists{/gist_id}", "starred_url": "https://api.github.com/users/swbaird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/swbaird/subscriptions", "organizations_url": "https://api.github.com/users/swbaird/orgs", "repos_url": "https://api.github.com/users/swbaird/repos", "events_url": "https://api.github.com/users/swbaird/events{/privacy}", "received_events_url": "https://api.github.com/users/swbaird/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e37c1a522eca7dbe88ec58d22a88362df572758", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e37c1a522eca7dbe88ec58d22a88362df572758", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e37c1a522eca7dbe88ec58d22a88362df572758"}], "stats": {"total": 60, "additions": 40, "deletions": 20}, "files": [{"sha": "539cc043894c65a1d52dd31ec1f6102b0c2cf120", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8861bdd59a95b32ad6000157418c808317421bfe/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8861bdd59a95b32ad6000157418c808317421bfe/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=8861bdd59a95b32ad6000157418c808317421bfe", "patch": "@@ -2744,13 +2744,9 @@ package body Checks is\n       Par : Node_Id;\n       S   : Entity_Id;\n \n+      Check_Disabled : constant Boolean := (not Predicate_Enabled (Typ))\n+        or else not Predicate_Check_In_Scope (N);\n    begin\n-      if not Predicate_Enabled (Typ)\n-        or else not Predicate_Check_In_Scope (N)\n-      then\n-         return;\n-      end if;\n-\n       S := Current_Scope;\n       while Present (S) and then not Is_Subprogram (S) loop\n          S := Scope (S);\n@@ -2759,7 +2755,9 @@ package body Checks is\n       --  If the check appears within the predicate function itself, it means\n       --  that the user specified a check whose formal is the predicated\n       --  subtype itself, rather than some covering type. This is likely to be\n-      --  a common error, and thus deserves a warning.\n+      --  a common error, and thus deserves a warning. We want to emit this\n+      --  warning even if predicate checking is disabled (in which case the\n+      --  warning is still useful even if it is not strictly accurate).\n \n       if Present (S) and then S = Predicate_Function (Typ) then\n          Error_Msg_NE\n@@ -2774,9 +2772,15 @@ package body Checks is\n                Parent (N), Typ);\n          end if;\n \n-         Insert_Action (N,\n-           Make_Raise_Storage_Error (Sloc (N),\n-             Reason => SE_Infinite_Recursion));\n+         if not Check_Disabled then\n+            Insert_Action (N,\n+              Make_Raise_Storage_Error (Sloc (N),\n+                Reason => SE_Infinite_Recursion));\n+            return;\n+         end if;\n+      end if;\n+\n+      if Check_Disabled then\n          return;\n       end if;\n "}, {"sha": "26fb58fdf525a5ba0fd488e2b223fee422cc0b0f", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8861bdd59a95b32ad6000157418c808317421bfe/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8861bdd59a95b32ad6000157418c808317421bfe/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=8861bdd59a95b32ad6000157418c808317421bfe", "patch": "@@ -7318,6 +7318,13 @@ package body Exp_Ch6 is\n       Exp : Node_Id := Expression (N);\n       pragma Assert (Present (Exp));\n \n+      Exp_Is_Function_Call : constant Boolean :=\n+        Nkind (Exp) = N_Function_Call\n+          or else (Nkind (Exp) = N_Explicit_Dereference\n+                   and then Is_Entity_Name (Prefix (Exp))\n+                   and then Ekind (Entity (Prefix (Exp))) = E_Constant\n+                   and then Is_Related_To_Func_Return (Entity (Prefix (Exp))));\n+\n       Exp_Typ : constant Entity_Id := Etype (Exp);\n       --  The type of the expression (not necessarily the same as R_Type)\n \n@@ -7533,7 +7540,7 @@ package body Exp_Ch6 is\n             Decl : Node_Id;\n             Ent  : Entity_Id;\n          begin\n-            if Nkind (Exp) /= N_Function_Call\n+            if not Exp_Is_Function_Call\n               and then Has_Discriminants (Ubt)\n               and then not Is_Constrained (Ubt)\n               and then not Has_Unchecked_Union (Ubt)\n@@ -7570,7 +7577,7 @@ package body Exp_Ch6 is\n               (not Is_Array_Type (Exp_Typ)\n                 or else Is_Constrained (Exp_Typ) = Is_Constrained (R_Type)\n                 or else CW_Or_Has_Controlled_Part (Utyp))\n-           and then Nkind (Exp) = N_Function_Call\n+           and then Exp_Is_Function_Call\n          then\n             Set_By_Ref (N);\n "}, {"sha": "f7a85c8d8169e55fe5d596fc710707bd58435b4c", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8861bdd59a95b32ad6000157418c808317421bfe/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8861bdd59a95b32ad6000157418c808317421bfe/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=8861bdd59a95b32ad6000157418c808317421bfe", "patch": "@@ -4423,7 +4423,7 @@ package body Sem_Ch3 is\n       --  the predicate still applies.\n \n       if not Suppress_Assignment_Checks (N)\n-        and then Predicate_Enabled (T)\n+        and then (Predicate_Enabled (T) or else Has_Static_Predicate (T))\n         and then\n           (not No_Initialization (N)\n             or else (Present (E) and then Nkind (E) = N_Aggregate))\n@@ -4434,15 +4434,23 @@ package body Sem_Ch3 is\n       then\n          --  If the type has a static predicate and the expression is known at\n          --  compile time, see if the expression satisfies the predicate.\n+         --  In the case of a static expression, this must be done even if\n+         --  the predicate is not enabled (as per static expression rules).\n \n          if Present (E) then\n             Check_Expression_Against_Static_Predicate (E, T);\n          end if;\n \n+         --  Do not perform further predicate-related checks unless\n+         --  predicates are enabled for the subtype.\n+\n+         if not Predicate_Enabled (T) then\n+            null;\n+\n          --  If the type is a null record and there is no explicit initial\n          --  expression, no predicate check applies.\n \n-         if No (E) and then Is_Null_Record_Type (T) then\n+         elsif No (E) and then Is_Null_Record_Type (T) then\n             null;\n \n          --  Do not generate a predicate check if the initialization expression"}, {"sha": "b389464ceefd11bfba2910bcbb1ce8e10d7000e9", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8861bdd59a95b32ad6000157418c808317421bfe/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8861bdd59a95b32ad6000157418c808317421bfe/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=8861bdd59a95b32ad6000157418c808317421bfe", "patch": "@@ -2725,6 +2725,7 @@ package body Sem_Ch7 is\n          Set_Has_Pragma_Unreferenced_Objects\n                                      (Priv, Has_Pragma_Unreferenced_Objects\n                                                                        (Full));\n+         Set_Predicates_Ignored      (Priv, Predicates_Ignored         (Full));\n          if Is_Unchecked_Union (Full) then\n             Set_Is_Unchecked_Union (Base_Type (Priv));\n          end if;"}, {"sha": "68b4c40bb3b8fa09dff702bd48b003642bf978f8", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8861bdd59a95b32ad6000157418c808317421bfe/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8861bdd59a95b32ad6000157418c808317421bfe/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=8861bdd59a95b32ad6000157418c808317421bfe", "patch": "@@ -445,9 +445,11 @@ package body Sem_Eval is\n          --  is folded, and since this is definitely a failure, extra checks\n          --  are OK.\n \n-         Insert_Action (Expr,\n-           Make_Predicate_Check\n-             (Typ, Duplicate_Subexpr (Expr)), Suppress => All_Checks);\n+         if Predicate_Enabled (Typ) then\n+            Insert_Action (Expr,\n+              Make_Predicate_Check\n+                (Typ, Duplicate_Subexpr (Expr)), Suppress => All_Checks);\n+         end if;\n       end if;\n    end Check_Expression_Against_Static_Predicate;\n "}, {"sha": "d10d00de38e39dfeaad3293d0cbc8abaedbde64b", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8861bdd59a95b32ad6000157418c808317421bfe/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8861bdd59a95b32ad6000157418c808317421bfe/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=8861bdd59a95b32ad6000157418c808317421bfe", "patch": "@@ -21201,9 +21201,7 @@ package body Sem_Prag is\n             Set_Has_Delayed_Freeze (Typ);\n \n             Set_Predicates_Ignored (Typ,\n-              Present (Check_Policy_List)\n-                and then\n-                  Policy_In_Effect (Name_Dynamic_Predicate) = Name_Ignore);\n+              Policy_In_Effect (Name_Dynamic_Predicate) = Name_Ignore);\n             Discard := Rep_Item_Too_Late (Typ, N, FOnly => True);\n          end Predicate;\n "}]}