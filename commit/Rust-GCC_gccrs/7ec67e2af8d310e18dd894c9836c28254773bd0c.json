{"sha": "7ec67e2af8d310e18dd894c9836c28254773bd0c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2VjNjdlMmFmOGQzMTBlMThkZDg5NGM5ODM2YzI4MjU0NzczYmQwYw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-05-21T08:11:23Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-05-21T08:11:23Z"}, "message": "re PR tree-optimization/57303 (struct miscompiled at -O1 and above)\n\n2013-05-21  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/57303\n\t* tree-ssa-sink.c (statement_sink_location): Improve killing\n\tstmt detection and properly handle self-assignments.\n\n\t* gcc.dg/torture/pr57303.c: New testcase.\n\nFrom-SVN: r199135", "tree": {"sha": "d339da3c2c6b46c735d16b9256dc8f32814dc8fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d339da3c2c6b46c735d16b9256dc8f32814dc8fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ec67e2af8d310e18dd894c9836c28254773bd0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ec67e2af8d310e18dd894c9836c28254773bd0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ec67e2af8d310e18dd894c9836c28254773bd0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ec67e2af8d310e18dd894c9836c28254773bd0c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0e39213cbbfee526d6bae8675ebb454227edc44d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e39213cbbfee526d6bae8675ebb454227edc44d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e39213cbbfee526d6bae8675ebb454227edc44d"}], "stats": {"total": 62, "additions": 57, "deletions": 5}, "files": [{"sha": "0a7c1e701c3d52102de00cacbd4ebb424464252b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ec67e2af8d310e18dd894c9836c28254773bd0c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ec67e2af8d310e18dd894c9836c28254773bd0c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7ec67e2af8d310e18dd894c9836c28254773bd0c", "patch": "@@ -1,3 +1,9 @@\n+2013-05-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/57303\n+\t* tree-ssa-sink.c (statement_sink_location): Improve killing\n+\tstmt detection and properly handle self-assignments.\n+\n 2013-05-21  Christian Bruel  <christian.bruel@st.com>\n \n         * dwarf2out.c (multiple_reg_loc_descriptor): Use dbx_reg_number for"}, {"sha": "0783914af15fbf8c37ad5847240ffab9f7dda9ec", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ec67e2af8d310e18dd894c9836c28254773bd0c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ec67e2af8d310e18dd894c9836c28254773bd0c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7ec67e2af8d310e18dd894c9836c28254773bd0c", "patch": "@@ -1,3 +1,8 @@\n+2013-05-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/57303\n+\t* gcc.dg/torture/pr57303.c: New testcase.\n+\n 2013-05-21  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/57321"}, {"sha": "1ddb5a8aab34634137d03babae41af219b7ea4dc", "filename": "gcc/testsuite/gcc.dg/torture/pr57303.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ec67e2af8d310e18dd894c9836c28254773bd0c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr57303.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ec67e2af8d310e18dd894c9836c28254773bd0c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr57303.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr57303.c?ref=7ec67e2af8d310e18dd894c9836c28254773bd0c", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run } */\n+\n+void abort (void);\n+\n+struct S0\n+{\n+  int f0;\n+};\n+struct S1\n+{\n+  struct S0 f0;\n+};\n+\n+struct S1 x = { {0} };\n+struct S1 y = { {1} };\n+\n+static void\n+foo (struct S0 p)\n+{\n+  struct S0 *l = &y.f0;\n+  *l = x.f0;\n+  if (p.f0)\n+    *l = *l;\n+}\n+\n+int\n+main ()\n+{\n+  foo(y.f0);\n+  if (y.f0.f0 != 0)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "87a0a599110e0c0de795ec7aec0901fd42a48f49", "filename": "gcc/tree-ssa-sink.c", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ec67e2af8d310e18dd894c9836c28254773bd0c/gcc%2Ftree-ssa-sink.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ec67e2af8d310e18dd894c9836c28254773bd0c/gcc%2Ftree-ssa-sink.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sink.c?ref=7ec67e2af8d310e18dd894c9836c28254773bd0c", "patch": "@@ -331,11 +331,19 @@ statement_sink_location (gimple stmt, basic_block frombb,\n \t  gimple use_stmt = USE_STMT (use_p);\n \n \t  /* A killing definition is not a use.  */\n-\t  if (gimple_assign_single_p (use_stmt)\n-\t      && gimple_vdef (use_stmt)\n-\t      && operand_equal_p (gimple_assign_lhs (stmt),\n-\t\t\t\t  gimple_assign_lhs (use_stmt), 0))\n-\t    continue;\n+\t  if ((gimple_has_lhs (use_stmt)\n+\t       && operand_equal_p (gimple_assign_lhs (stmt),\n+\t\t\t\t   gimple_get_lhs (use_stmt), 0))\n+\t      || stmt_kills_ref_p (use_stmt, gimple_assign_lhs (stmt)))\n+\t    {\n+\t      /* If use_stmt is or might be a nop assignment then USE_STMT\n+\t         acts as a use as well as definition.  */\n+\t      if (stmt != use_stmt\n+\t\t  && ref_maybe_used_by_stmt_p (use_stmt,\n+\t\t\t\t\t       gimple_assign_lhs (stmt)))\n+\t\treturn false;\n+\t      continue;\n+\t    }\n \n \t  if (gimple_code (use_stmt) != GIMPLE_PHI)\n \t    return false;"}]}