{"sha": "aeef5c57f161ad0258c5ab066ade2274bef3271a", "node_id": "C_kwDOANBUbNoAKGFlZWY1YzU3ZjE2MWFkMDI1OGM1YWIwNjZhZGUyMjc0YmVmMzI3MWE", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-02-09T16:57:04Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-02-09T16:57:04Z"}, "message": "aarch64: Remove redundant vec_concat patterns\n\nmove_lo_quad_internal_<mode> and move_lo_quad_internal_be_<mode>\npartially duplicate the later aarch64_combinez{,_be}<mode> patterns.\nThe duplication itself is a regression.\n\nThe only substantive differences between the two are:\n\n* combinez uses vector MOV (ORR) instead of element MOV (DUP).\n  The former seems more likely to be handled via renaming.\n\n* combinez disparages the GPR->FPR alternative whereas move_lo_quad\n  gave it equal cost.  The new test gives a token example of when\n  the combinez behaviour helps.\n\ngcc/\n\t* config/aarch64/aarch64-simd.md (move_lo_quad_internal_<mode>)\n\t(move_lo_quad_internal_be_<mode>): Delete.\n\t(move_lo_quad_<mode>): Use aarch64_combine<Vhalf> instead of the above.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/vec-init-8.c: New test.", "tree": {"sha": "c8375c5e3c778b37c8857cb7e78f92ee19f747aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8375c5e3c778b37c8857cb7e78f92ee19f747aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aeef5c57f161ad0258c5ab066ade2274bef3271a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aeef5c57f161ad0258c5ab066ade2274bef3271a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aeef5c57f161ad0258c5ab066ade2274bef3271a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aeef5c57f161ad0258c5ab066ade2274bef3271a/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "958448a9441ee54e012c67cfc3cf88083f3d0e4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/958448a9441ee54e012c67cfc3cf88083f3d0e4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/958448a9441ee54e012c67cfc3cf88083f3d0e4a"}], "stats": {"total": 52, "additions": 17, "deletions": 35}, "files": [{"sha": "d6cd4c70fe7714aa1d17698ae01384b4f92c3453", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 2, "deletions": 35, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeef5c57f161ad0258c5ab066ade2274bef3271a/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeef5c57f161ad0258c5ab066ade2274bef3271a/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=aeef5c57f161ad0258c5ab066ade2274bef3271a", "patch": "@@ -1584,46 +1584,13 @@\n ;; On little-endian this is { operand, zeroes }\n ;; On big-endian this is { zeroes, operand }\n \n-(define_insn \"move_lo_quad_internal_<mode>\"\n-  [(set (match_operand:VQMOV 0 \"register_operand\" \"=w,w,w\")\n-\t(vec_concat:VQMOV\n-\t  (match_operand:<VHALF> 1 \"register_operand\" \"w,r,r\")\n-\t  (match_operand:<VHALF> 2 \"aarch64_simd_or_scalar_imm_zero\")))]\n-  \"TARGET_SIMD && !BYTES_BIG_ENDIAN\"\n-  \"@\n-   dup\\\\t%d0, %1.d[0]\n-   fmov\\\\t%d0, %1\n-   dup\\\\t%d0, %1\"\n-  [(set_attr \"type\" \"neon_dup<q>,f_mcr,neon_dup<q>\")\n-   (set_attr \"length\" \"4\")\n-   (set_attr \"arch\" \"simd,fp,simd\")]\n-)\n-\n-(define_insn \"move_lo_quad_internal_be_<mode>\"\n-  [(set (match_operand:VQMOV 0 \"register_operand\" \"=w,w,w\")\n-\t(vec_concat:VQMOV\n-\t  (match_operand:<VHALF> 2 \"aarch64_simd_or_scalar_imm_zero\")\n-\t  (match_operand:<VHALF> 1 \"register_operand\" \"w,r,r\")))]\n-  \"TARGET_SIMD && BYTES_BIG_ENDIAN\"\n-  \"@\n-   dup\\\\t%d0, %1.d[0]\n-   fmov\\\\t%d0, %1\n-   dup\\\\t%d0, %1\"\n-  [(set_attr \"type\" \"neon_dup<q>,f_mcr,neon_dup<q>\")\n-   (set_attr \"length\" \"4\")\n-   (set_attr \"arch\" \"simd,fp,simd\")]\n-)\n-\n (define_expand \"move_lo_quad_<mode>\"\n   [(match_operand:VQMOV 0 \"register_operand\")\n    (match_operand:<VHALF> 1 \"register_operand\")]\n   \"TARGET_SIMD\"\n {\n-  rtx zs = CONST0_RTX (<VHALF>mode);\n-  if (BYTES_BIG_ENDIAN)\n-    emit_insn (gen_move_lo_quad_internal_be_<mode> (operands[0], operands[1], zs));\n-  else\n-    emit_insn (gen_move_lo_quad_internal_<mode> (operands[0], operands[1], zs));\n+  emit_insn (gen_aarch64_combine<Vhalf> (operands[0], operands[1],\n+\t\t\t\t\t CONST0_RTX (<VHALF>mode)));\n   DONE;\n }\n )"}, {"sha": "18f8afe10f52b67381e46a56e0be43aee398e7f9", "filename": "gcc/testsuite/gcc.target/aarch64/vec-init-8.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeef5c57f161ad0258c5ab066ade2274bef3271a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvec-init-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeef5c57f161ad0258c5ab066ade2274bef3271a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvec-init-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvec-init-8.c?ref=aeef5c57f161ad0258c5ab066ade2274bef3271a", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+\n+#include <arm_neon.h>\n+\n+int64x2_t f1(int64_t *ptr) {\n+  int64_t x = *ptr;\n+  asm volatile (\"\" ::: \"memory\");\n+  if (__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__)\n+    return (int64x2_t) { 0, x };\n+  else\n+    return (int64x2_t) { x, 0 };\n+}\n+\n+/* { dg-final { scan-assembler {\\tldr\\td0, \\[x0\\]\\n} } } */"}]}