{"sha": "34c77d0b2fb7325c1b318b2de755b588cb7179ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzRjNzdkMGIyZmI3MzI1YzFiMzE4YjJkZTc1NWI1ODhjYjcxNzljZQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2018-10-02T15:12:30Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2018-10-02T15:12:30Z"}, "message": "i386.c (ix86_emit_i387_round): Extend op1 to XFmode before emitting fxam.\n\n\t* config/i386/i386.c (ix86_emit_i387_round): Extend op1 to XFmode\n\tbefore emitting fxam.  Perform calculations in XFmode.\n\nFrom-SVN: r264794", "tree": {"sha": "289b5c49a7e8c982b92ff1a39fa760d583c53807", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/289b5c49a7e8c982b92ff1a39fa760d583c53807"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34c77d0b2fb7325c1b318b2de755b588cb7179ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34c77d0b2fb7325c1b318b2de755b588cb7179ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34c77d0b2fb7325c1b318b2de755b588cb7179ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34c77d0b2fb7325c1b318b2de755b588cb7179ce/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4913fc07e0b3f1d574dc20f83ec819a26ab4346e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4913fc07e0b3f1d574dc20f83ec819a26ab4346e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4913fc07e0b3f1d574dc20f83ec819a26ab4346e"}], "stats": {"total": 91, "additions": 38, "deletions": 53}, "files": [{"sha": "fce5984c41fc51b97f0d06d702e4aae0d1d330f4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34c77d0b2fb7325c1b318b2de755b588cb7179ce/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34c77d0b2fb7325c1b318b2de755b588cb7179ce/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=34c77d0b2fb7325c1b318b2de755b588cb7179ce", "patch": "@@ -1,3 +1,8 @@\n+2018-10-02  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (ix86_emit_i387_round): Extend op1 to XFmode\n+\tbefore emitting fxam.  Perform calculations in XFmode.\n+\n 2018-10-02  Marc Glisse  <marc.glisse@inria.fr>\n \n \t* match.pd (((X /[ex] A) +- B) * A): New transformation."}, {"sha": "d35ad91b55c0073e511034c356b20148adbcc200", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 33, "deletions": 53, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34c77d0b2fb7325c1b318b2de755b588cb7179ce/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34c77d0b2fb7325c1b318b2de755b588cb7179ce/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=34c77d0b2fb7325c1b318b2de755b588cb7179ce", "patch": "@@ -43951,24 +43951,27 @@ void ix86_emit_i387_round (rtx op0, rtx op1)\n {\n   machine_mode inmode = GET_MODE (op1);\n   machine_mode outmode = GET_MODE (op0);\n-  rtx e1, e2, res, tmp, tmp1, half;\n+  rtx e1 = gen_reg_rtx (XFmode);\n+  rtx e2 = gen_reg_rtx (XFmode);\n   rtx scratch = gen_reg_rtx (HImode);\n   rtx flags = gen_rtx_REG (CCNOmode, FLAGS_REG);\n+  rtx half = const_double_from_real_value (dconsthalf, XFmode);\n+  rtx res = gen_reg_rtx (outmode);\n   rtx_code_label *jump_label = gen_label_rtx ();\n-  rtx insn;\n-  rtx (*gen_abs) (rtx, rtx);\n-  rtx (*gen_neg) (rtx, rtx);\n+  rtx (*floor_insn) (rtx, rtx);\n+  rtx (*neg_insn) (rtx, rtx);\n+  rtx insn, tmp;\n \n   switch (inmode)\n     {\n     case E_SFmode:\n-      gen_abs = gen_abssf2;\n-      break;\n     case E_DFmode:\n-      gen_abs = gen_absdf2;\n+      tmp = gen_reg_rtx (XFmode);\n+\n+      emit_insn (gen_rtx_SET (tmp, gen_rtx_FLOAT_EXTEND (XFmode, op1)));\n+      op1 = tmp;\n       break;\n     case E_XFmode:\n-      gen_abs = gen_absxf2;\n       break;\n     default:\n       gcc_unreachable ();\n@@ -43977,84 +43980,61 @@ void ix86_emit_i387_round (rtx op0, rtx op1)\n   switch (outmode)\n     {\n     case E_SFmode:\n-      gen_neg = gen_negsf2;\n+      floor_insn = gen_frndintxf2_floor;\n+      neg_insn = gen_negsf2;\n       break;\n     case E_DFmode:\n-      gen_neg = gen_negdf2;\n+      floor_insn = gen_frndintxf2_floor;\n+      neg_insn = gen_negdf2;\n       break;\n     case E_XFmode:\n-      gen_neg = gen_negxf2;\n+      floor_insn = gen_frndintxf2_floor;\n+      neg_insn = gen_negxf2;\n       break;\n     case E_HImode:\n-      gen_neg = gen_neghi2;\n+      floor_insn = gen_lfloorxfhi2;\n+      neg_insn = gen_neghi2;\n       break;\n     case E_SImode:\n-      gen_neg = gen_negsi2;\n+      floor_insn = gen_lfloorxfsi2;\n+      neg_insn = gen_negsi2;\n       break;\n     case E_DImode:\n-      gen_neg = gen_negdi2;\n+      floor_insn = gen_lfloorxfdi2;\n+      neg_insn = gen_negdi2;\n       break;\n     default:\n       gcc_unreachable ();\n     }\n \n-  e1 = gen_reg_rtx (inmode);\n-  e2 = gen_reg_rtx (inmode);\n-  res = gen_reg_rtx (outmode);\n-\n-  half = const_double_from_real_value (dconsthalf, inmode);\n-\n   /* round(a) = sgn(a) * floor(fabs(a) + 0.5) */\n \n   /* scratch = fxam(op1) */\n-  emit_insn (gen_rtx_SET (scratch,\n-\t\t\t  gen_rtx_UNSPEC (HImode, gen_rtvec (1, op1),\n-\t\t\t\t\t  UNSPEC_FXAM)));\n+  emit_insn (gen_fxamxf2_i387 (scratch, op1));\n+\n   /* e1 = fabs(op1) */\n-  emit_insn (gen_abs (e1, op1));\n+  emit_insn (gen_absxf2 (e1, op1));\n \n   /* e2 = e1 + 0.5 */\n-  half = force_reg (inmode, half);\n-  emit_insn (gen_rtx_SET (e2, gen_rtx_PLUS (inmode, e1, half)));\n+  half = force_reg (XFmode, half);\n+  emit_insn (gen_rtx_SET (e2, gen_rtx_PLUS (XFmode, e1, half)));\n \n   /* res = floor(e2) */\n-  if (inmode != XFmode)\n-    {\n-      tmp1 = gen_reg_rtx (XFmode);\n-\n-      emit_insn (gen_rtx_SET (tmp1, gen_rtx_FLOAT_EXTEND (XFmode, e2)));\n-    }\n-  else\n-    tmp1 = e2;\n-\n   switch (outmode)\n     {\n     case E_SFmode:\n     case E_DFmode:\n       {\n-\trtx tmp0 = gen_reg_rtx (XFmode);\n-\n-\temit_insn (gen_frndintxf2_floor (tmp0, tmp1));\n+\ttmp = gen_reg_rtx (XFmode);\n \n+\temit_insn (floor_insn (tmp, e2));\n \temit_insn (gen_rtx_SET (res,\n-\t\t\t\tgen_rtx_UNSPEC (outmode, gen_rtvec (1, tmp0),\n+\t\t\t\tgen_rtx_UNSPEC (outmode, gen_rtvec (1, tmp),\n \t\t\t\t\t\tUNSPEC_TRUNC_NOOP)));\n       }\n       break;\n-    case E_XFmode:\n-      emit_insn (gen_frndintxf2_floor (res, tmp1));\n-      break;\n-    case E_HImode:\n-      emit_insn (gen_lfloorxfhi2 (res, tmp1));\n-      break;\n-    case E_SImode:\n-      emit_insn (gen_lfloorxfsi2 (res, tmp1));\n-      break;\n-    case E_DImode:\n-      emit_insn (gen_lfloorxfdi2 (res, tmp1));\n-\tbreak;\n     default:\n-      gcc_unreachable ();\n+      emit_insn (floor_insn (res, e2));\n     }\n \n   /* flags = signbit(a) */\n@@ -44069,7 +44049,7 @@ void ix86_emit_i387_round (rtx op0, rtx op1)\n   predict_jump (REG_BR_PROB_BASE * 50 / 100);\n   JUMP_LABEL (insn) = jump_label;\n \n-  emit_insn (gen_neg (res, res));\n+  emit_insn (neg_insn (res, res));\n \n   emit_label (jump_label);\n   LABEL_NUSES (jump_label) = 1;"}]}