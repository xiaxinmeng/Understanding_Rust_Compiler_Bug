{"sha": "e8d42d280e1be1670d0ef09eb7bd78574082b5f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZThkNDJkMjgwZTFiZTE2NzBkMGVmMDllYjdiZDc4NTc0MDgyYjVmMA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-01-16T16:40:05Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-01-16T16:40:05Z"}, "message": "re PR fortran/46402 (libquadmath: Add fmalq)\n\n\tPR fortran/46402\n\t* quadmath.map (QUADMATH_1.0): Add fmaq.\n\t* configure.ac: Check for fenv.h, feholdexcept, fesetround,\n\tfeupdateenv, fesetenv and fetestexcept.\n\t* configure: Regenerated.\n\t* config.h.in: Regenerated.\n\t* quadmath.h (fmaq): New prototype.\n\t* quadmath_weak.h (fmaq): Add.\n\t* Makefile.am (libquadmath_la_SOURCES): Add math/fmaq.c.\n\t* Makefile.in: Regenerated.\n\t* quadmath-imp.h: Include config.h.\n\t* math/expq.c: Include fenv.h.\n\t(USE_FENV_H): Define if libm support for fe* is there.\n\t(expq): Add fesetround etc. support if USE_FENV_H is defined.\n\t* math/fmaq.c: New file.\n\t* libquadmath.texi (fmaq): Add.\n\nFrom-SVN: r168852", "tree": {"sha": "47caa0844b550a6a644474e56c878200e48d276a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47caa0844b550a6a644474e56c878200e48d276a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8d42d280e1be1670d0ef09eb7bd78574082b5f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8d42d280e1be1670d0ef09eb7bd78574082b5f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8d42d280e1be1670d0ef09eb7bd78574082b5f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8d42d280e1be1670d0ef09eb7bd78574082b5f0/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5b8901caa0c57c993149b2b150f09abeef7ed679", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b8901caa0c57c993149b2b150f09abeef7ed679", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b8901caa0c57c993149b2b150f09abeef7ed679"}], "stats": {"total": 710, "additions": 699, "deletions": 11}, "files": [{"sha": "1cb4aa0a38377dc994dd6c88ff881b21656698a7", "filename": "libquadmath/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8d42d280e1be1670d0ef09eb7bd78574082b5f0/libquadmath%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8d42d280e1be1670d0ef09eb7bd78574082b5f0/libquadmath%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2FChangeLog?ref=e8d42d280e1be1670d0ef09eb7bd78574082b5f0", "patch": "@@ -1,3 +1,22 @@\n+2011-01-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR fortran/46402\n+\t* quadmath.map (QUADMATH_1.0): Add fmaq.\n+\t* configure.ac: Check for fenv.h, feholdexcept, fesetround,\n+\tfeupdateenv, fesetenv and fetestexcept.\n+\t* configure: Regenerated.\n+\t* config.h.in: Regenerated.\n+\t* quadmath.h (fmaq): New prototype.\n+\t* quadmath_weak.h (fmaq): Add.\n+\t* Makefile.am (libquadmath_la_SOURCES): Add math/fmaq.c.\n+\t* Makefile.in: Regenerated.\n+\t* quadmath-imp.h: Include config.h.\n+\t* math/expq.c: Include fenv.h.\n+\t(USE_FENV_H): Define if libm support for fe* is there.\n+\t(expq): Add fesetround etc. support if USE_FENV_H is defined.\n+\t* math/fmaq.c: New file.\n+\t* libquadmath.texi (fmaq): Add.\n+\n 2011-01-14  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/47182"}, {"sha": "c4bd0e43baee4fdd572faf411fb5d7abfc9dbc46", "filename": "libquadmath/Makefile.am", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8d42d280e1be1670d0ef09eb7bd78574082b5f0/libquadmath%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8d42d280e1be1670d0ef09eb7bd78574082b5f0/libquadmath%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2FMakefile.am?ref=e8d42d280e1be1670d0ef09eb7bd78574082b5f0", "patch": "@@ -61,7 +61,7 @@ libquadmath_la_SOURCES = \\\n   math/erfq.c math/logq.c math/sqrtq.c math/expm1q.c math/lroundq.c \\\n   math/tanhq.c math/expq.c math/modfq.c math/tanq.c math/fabsq.c \\\n   math/nanq.c math/tgammaq.c math/finiteq.c math/nextafterq.c \\\n-  math/truncq.c math/floorq.c math/powq.c\n+  math/truncq.c math/floorq.c math/powq.c math/fmaq.c\n \n # Work around what appears to be a GNU make bug handling MAKEFLAGS\n # values defined in terms of make variables, as is the case for CC and"}, {"sha": "a241b131da38a034f6807ada81b872456ba0a486", "filename": "libquadmath/Makefile.in", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8d42d280e1be1670d0ef09eb7bd78574082b5f0/libquadmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8d42d280e1be1670d0ef09eb7bd78574082b5f0/libquadmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2FMakefile.in?ref=e8d42d280e1be1670d0ef09eb7bd78574082b5f0", "patch": "@@ -43,17 +43,16 @@ DIST_COMMON = ChangeLog $(srcdir)/Makefile.in $(srcdir)/Makefile.am \\\n \t$(srcdir)/config.h.in $(srcdir)/../mkinstalldirs \\\n \t$(srcdir)/../depcomp $(libquadmath_TEXINFOS)\n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n-am__aclocal_m4_deps = $(top_srcdir)/../config/acx.m4 \\\n+am__aclocal_m4_deps = $(top_srcdir)/../ltoptions.m4 \\\n+\t$(top_srcdir)/../ltsugar.m4 $(top_srcdir)/../ltversion.m4 \\\n+\t$(top_srcdir)/../lt~obsolete.m4 $(top_srcdir)/../config/acx.m4 \\\n \t$(top_srcdir)/../config/depstand.m4 \\\n \t$(top_srcdir)/../config/lead-dot.m4 \\\n \t$(top_srcdir)/../config/lthostflags.m4 \\\n \t$(top_srcdir)/../config/multi.m4 \\\n \t$(top_srcdir)/../config/no-executables.m4 \\\n-\t$(top_srcdir)/../config/override.m4 \\\n-\t$(top_srcdir)/../ltoptions.m4 $(top_srcdir)/../ltsugar.m4 \\\n-\t$(top_srcdir)/../ltversion.m4 $(top_srcdir)/../lt~obsolete.m4 \\\n-\t$(top_srcdir)/acinclude.m4 $(top_srcdir)/../libtool.m4 \\\n-\t$(top_srcdir)/configure.ac\n+\t$(top_srcdir)/../config/override.m4 $(top_srcdir)/acinclude.m4 \\\n+\t$(top_srcdir)/../libtool.m4 $(top_srcdir)/configure.ac\n am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\\n \t$(ACLOCAL_M4)\n am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \\\n@@ -123,7 +122,7 @@ am__dirstamp = $(am__leading_dot)dirstamp\n @BUILD_LIBQUADMATH_TRUE@\tmath/nanq.lo math/tgammaq.lo \\\n @BUILD_LIBQUADMATH_TRUE@\tmath/finiteq.lo math/nextafterq.lo \\\n @BUILD_LIBQUADMATH_TRUE@\tmath/truncq.lo math/floorq.lo \\\n-@BUILD_LIBQUADMATH_TRUE@\tmath/powq.lo\n+@BUILD_LIBQUADMATH_TRUE@\tmath/powq.lo math/fmaq.lo\n libquadmath_la_OBJECTS = $(am_libquadmath_la_OBJECTS)\n libquadmath_la_LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) \\\n \t$(LIBTOOLFLAGS) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \\\n@@ -325,7 +324,7 @@ AUTOMAKE_OPTIONS = 1.8 foreign\n @BUILD_LIBQUADMATH_TRUE@  math/erfq.c math/logq.c math/sqrtq.c math/expm1q.c math/lroundq.c \\\n @BUILD_LIBQUADMATH_TRUE@  math/tanhq.c math/expq.c math/modfq.c math/tanq.c math/fabsq.c \\\n @BUILD_LIBQUADMATH_TRUE@  math/nanq.c math/tgammaq.c math/finiteq.c math/nextafterq.c \\\n-@BUILD_LIBQUADMATH_TRUE@  math/truncq.c math/floorq.c math/powq.c\n+@BUILD_LIBQUADMATH_TRUE@  math/truncq.c math/floorq.c math/powq.c math/fmaq.c\n \n \n # Work around what appears to be a GNU make bug handling MAKEFLAGS\n@@ -570,6 +569,7 @@ math/nextafterq.lo: math/$(am__dirstamp) \\\n math/truncq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n math/floorq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n math/powq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n+math/fmaq.lo: math/$(am__dirstamp) math/$(DEPDIR)/$(am__dirstamp)\n libquadmath.la: $(libquadmath_la_OBJECTS) $(libquadmath_la_DEPENDENCIES) \n \t$(libquadmath_la_LINK) $(am_libquadmath_la_rpath) $(libquadmath_la_OBJECTS) $(libquadmath_la_LIBADD) $(LIBS)\n \n@@ -643,6 +643,8 @@ mostlyclean-compile:\n \t-rm -f math/finiteq.lo\n \t-rm -f math/floorq.$(OBJEXT)\n \t-rm -f math/floorq.lo\n+\t-rm -f math/fmaq.$(OBJEXT)\n+\t-rm -f math/fmaq.lo\n \t-rm -f math/fmodq.$(OBJEXT)\n \t-rm -f math/fmodq.lo\n \t-rm -f math/frexpq.$(OBJEXT)\n@@ -756,6 +758,7 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/fabsq.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/finiteq.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/floorq.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/fmaq.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/fmodq.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/frexpq.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@math/$(DEPDIR)/hypotq.Plo@am__quote@"}, {"sha": "5dd10184f0d8ae90f5cb84f148996241f2d4828b", "filename": "libquadmath/config.h.in", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8d42d280e1be1670d0ef09eb7bd78574082b5f0/libquadmath%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8d42d280e1be1670d0ef09eb7bd78574082b5f0/libquadmath%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fconfig.h.in?ref=e8d42d280e1be1670d0ef09eb7bd78574082b5f0", "patch": "@@ -6,6 +6,24 @@\n /* Define to 1 if you have the <dlfcn.h> header file. */\n #undef HAVE_DLFCN_H\n \n+/* libm includes feholdexcept */\n+#undef HAVE_FEHOLDEXCEPT\n+\n+/* Define to 1 if you have the <fenv.h> header file. */\n+#undef HAVE_FENV_H\n+\n+/* libm includes fesetenv */\n+#undef HAVE_FESETENV\n+\n+/* libm includes fesetround */\n+#undef HAVE_FESETROUND\n+\n+/* libm includes fetestexcept */\n+#undef HAVE_FETESTEXCEPT\n+\n+/* libm includes feupdateenv */\n+#undef HAVE_FEUPDATEENV\n+\n /* Define to 1 if you have the <inttypes.h> header file. */\n #undef HAVE_INTTYPES_H\n "}, {"sha": "9844d9a3f9e0d231156e6d7c698bccb37e3e5989", "filename": "libquadmath/configure", "status": "modified", "additions": 352, "deletions": 2, "changes": 354, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8d42d280e1be1670d0ef09eb7bd78574082b5f0/libquadmath%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8d42d280e1be1670d0ef09eb7bd78574082b5f0/libquadmath%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fconfigure?ref=e8d42d280e1be1670d0ef09eb7bd78574082b5f0", "patch": "@@ -1757,6 +1757,93 @@ $as_echo \"$ac_res\" >&6; }\n   eval $as_lineno_stack; test \"x$as_lineno_stack\" = x && { as_lineno=; unset as_lineno;}\n \n } # ac_fn_c_check_func\n+\n+# ac_fn_c_check_header_mongrel LINENO HEADER VAR INCLUDES\n+# -------------------------------------------------------\n+# Tests whether HEADER exists, giving a warning if it cannot be compiled using\n+# the include files in INCLUDES and setting the cache variable VAR\n+# accordingly.\n+ac_fn_c_check_header_mongrel ()\n+{\n+  as_lineno=${as_lineno-\"$1\"} as_lineno_stack=as_lineno_stack=$as_lineno_stack\n+  if { as_var=$3; eval \"test \\\"\\${$as_var+set}\\\" = set\"; }; then :\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for $2\" >&5\n+$as_echo_n \"checking for $2... \" >&6; }\n+if { as_var=$3; eval \"test \\\"\\${$as_var+set}\\\" = set\"; }; then :\n+  $as_echo_n \"(cached) \" >&6\n+fi\n+eval ac_res=\\$$3\n+\t       { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_res\" >&5\n+$as_echo \"$ac_res\" >&6; }\n+else\n+  # Is the header compilable?\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking $2 usability\" >&5\n+$as_echo_n \"checking $2 usability... \" >&6; }\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+$4\n+#include <$2>\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  ac_header_compiler=yes\n+else\n+  ac_header_compiler=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_header_compiler\" >&5\n+$as_echo \"$ac_header_compiler\" >&6; }\n+\n+# Is the header present?\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking $2 presence\" >&5\n+$as_echo_n \"checking $2 presence... \" >&6; }\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <$2>\n+_ACEOF\n+if ac_fn_c_try_cpp \"$LINENO\"; then :\n+  ac_header_preproc=yes\n+else\n+  ac_header_preproc=no\n+fi\n+rm -f conftest.err conftest.$ac_ext\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_header_preproc\" >&5\n+$as_echo \"$ac_header_preproc\" >&6; }\n+\n+# So?  What about this header?\n+case $ac_header_compiler:$ac_header_preproc:$ac_c_preproc_warn_flag in #((\n+  yes:no: )\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: $2: accepted by the compiler, rejected by the preprocessor!\" >&5\n+$as_echo \"$as_me: WARNING: $2: accepted by the compiler, rejected by the preprocessor!\" >&2;}\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: $2: proceeding with the compiler's result\" >&5\n+$as_echo \"$as_me: WARNING: $2: proceeding with the compiler's result\" >&2;}\n+    ;;\n+  no:yes:* )\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: $2: present but cannot be compiled\" >&5\n+$as_echo \"$as_me: WARNING: $2: present but cannot be compiled\" >&2;}\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: $2:     check for missing prerequisite headers?\" >&5\n+$as_echo \"$as_me: WARNING: $2:     check for missing prerequisite headers?\" >&2;}\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: $2: see the Autoconf documentation\" >&5\n+$as_echo \"$as_me: WARNING: $2: see the Autoconf documentation\" >&2;}\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: $2:     section \\\"Present But Cannot Be Compiled\\\"\" >&5\n+$as_echo \"$as_me: WARNING: $2:     section \\\"Present But Cannot Be Compiled\\\"\" >&2;}\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: $2: proceeding with the compiler's result\" >&5\n+$as_echo \"$as_me: WARNING: $2: proceeding with the compiler's result\" >&2;}\n+    ;;\n+esac\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for $2\" >&5\n+$as_echo_n \"checking for $2... \" >&6; }\n+if { as_var=$3; eval \"test \\\"\\${$as_var+set}\\\" = set\"; }; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  eval \"$3=\\$ac_header_compiler\"\n+fi\n+eval ac_res=\\$$3\n+\t       { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_res\" >&5\n+$as_echo \"$ac_res\" >&6; }\n+fi\n+  eval $as_lineno_stack; test \"x$as_lineno_stack\" = x && { as_lineno=; unset as_lineno;}\n+\n+} # ac_fn_c_check_header_mongrel\n cat >config.log <<_ACEOF\n This file contains any messages produced by compilers while\n running configure, to aid debugging if configure makes a mistake.\n@@ -10370,7 +10457,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 10373 \"configure\"\n+#line 10460 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -10476,7 +10563,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 10479 \"configure\"\n+#line 10566 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11781,6 +11868,19 @@ esac\n \n \n \n+for ac_header in fenv.h\n+do :\n+  ac_fn_c_check_header_mongrel \"$LINENO\" \"fenv.h\" \"ac_cv_header_fenv_h\" \"$ac_includes_default\"\n+if test \"x$ac_cv_header_fenv_h\" = x\"\"yes; then :\n+  cat >>confdefs.h <<_ACEOF\n+#define HAVE_FENV_H 1\n+_ACEOF\n+\n+fi\n+\n+done\n+\n+\n # If available, sqrtl and cbrtl speed up the calculation -\n # but they are not required\n if test x$gcc_no_link != xyes; then\n@@ -11872,6 +11972,231 @@ if test \"x$ac_cv_lib_m_cbrtl\" = x\"\"yes; then :\n \n $as_echo \"#define HAVE_CBRTL 1\" >>confdefs.h\n \n+fi\n+\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for feholdexcept in -lm\" >&5\n+$as_echo_n \"checking for feholdexcept in -lm... \" >&6; }\n+if test \"${ac_cv_lib_m_feholdexcept+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  ac_check_lib_save_LIBS=$LIBS\n+LIBS=\"-lm  $LIBS\"\n+if test x$gcc_no_link = xyes; then\n+  as_fn_error \"Link tests are not allowed after GCC_NO_EXECUTABLES.\" \"$LINENO\" 5\n+fi\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+/* Override any GCC internal prototype to avoid an error.\n+   Use char because int might match the return type of a GCC\n+   builtin and then its argument prototype would still apply.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+char feholdexcept ();\n+int\n+main ()\n+{\n+return feholdexcept ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_link \"$LINENO\"; then :\n+  ac_cv_lib_m_feholdexcept=yes\n+else\n+  ac_cv_lib_m_feholdexcept=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+LIBS=$ac_check_lib_save_LIBS\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_m_feholdexcept\" >&5\n+$as_echo \"$ac_cv_lib_m_feholdexcept\" >&6; }\n+if test \"x$ac_cv_lib_m_feholdexcept\" = x\"\"yes; then :\n+\n+$as_echo \"#define HAVE_FEHOLDEXCEPT 1\" >>confdefs.h\n+\n+fi\n+\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for fesetround in -lm\" >&5\n+$as_echo_n \"checking for fesetround in -lm... \" >&6; }\n+if test \"${ac_cv_lib_m_fesetround+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  ac_check_lib_save_LIBS=$LIBS\n+LIBS=\"-lm  $LIBS\"\n+if test x$gcc_no_link = xyes; then\n+  as_fn_error \"Link tests are not allowed after GCC_NO_EXECUTABLES.\" \"$LINENO\" 5\n+fi\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+/* Override any GCC internal prototype to avoid an error.\n+   Use char because int might match the return type of a GCC\n+   builtin and then its argument prototype would still apply.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+char fesetround ();\n+int\n+main ()\n+{\n+return fesetround ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_link \"$LINENO\"; then :\n+  ac_cv_lib_m_fesetround=yes\n+else\n+  ac_cv_lib_m_fesetround=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+LIBS=$ac_check_lib_save_LIBS\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_m_fesetround\" >&5\n+$as_echo \"$ac_cv_lib_m_fesetround\" >&6; }\n+if test \"x$ac_cv_lib_m_fesetround\" = x\"\"yes; then :\n+\n+$as_echo \"#define HAVE_FESETROUND 1\" >>confdefs.h\n+\n+fi\n+\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for feupdateenv in -lm\" >&5\n+$as_echo_n \"checking for feupdateenv in -lm... \" >&6; }\n+if test \"${ac_cv_lib_m_feupdateenv+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  ac_check_lib_save_LIBS=$LIBS\n+LIBS=\"-lm  $LIBS\"\n+if test x$gcc_no_link = xyes; then\n+  as_fn_error \"Link tests are not allowed after GCC_NO_EXECUTABLES.\" \"$LINENO\" 5\n+fi\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+/* Override any GCC internal prototype to avoid an error.\n+   Use char because int might match the return type of a GCC\n+   builtin and then its argument prototype would still apply.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+char feupdateenv ();\n+int\n+main ()\n+{\n+return feupdateenv ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_link \"$LINENO\"; then :\n+  ac_cv_lib_m_feupdateenv=yes\n+else\n+  ac_cv_lib_m_feupdateenv=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+LIBS=$ac_check_lib_save_LIBS\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_m_feupdateenv\" >&5\n+$as_echo \"$ac_cv_lib_m_feupdateenv\" >&6; }\n+if test \"x$ac_cv_lib_m_feupdateenv\" = x\"\"yes; then :\n+\n+$as_echo \"#define HAVE_FEUPDATEENV 1\" >>confdefs.h\n+\n+fi\n+\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for fesetenv in -lm\" >&5\n+$as_echo_n \"checking for fesetenv in -lm... \" >&6; }\n+if test \"${ac_cv_lib_m_fesetenv+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  ac_check_lib_save_LIBS=$LIBS\n+LIBS=\"-lm  $LIBS\"\n+if test x$gcc_no_link = xyes; then\n+  as_fn_error \"Link tests are not allowed after GCC_NO_EXECUTABLES.\" \"$LINENO\" 5\n+fi\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+/* Override any GCC internal prototype to avoid an error.\n+   Use char because int might match the return type of a GCC\n+   builtin and then its argument prototype would still apply.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+char fesetenv ();\n+int\n+main ()\n+{\n+return fesetenv ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_link \"$LINENO\"; then :\n+  ac_cv_lib_m_fesetenv=yes\n+else\n+  ac_cv_lib_m_fesetenv=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+LIBS=$ac_check_lib_save_LIBS\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_m_fesetenv\" >&5\n+$as_echo \"$ac_cv_lib_m_fesetenv\" >&6; }\n+if test \"x$ac_cv_lib_m_fesetenv\" = x\"\"yes; then :\n+\n+$as_echo \"#define HAVE_FESETENV 1\" >>confdefs.h\n+\n+fi\n+\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for fetestexcept in -lm\" >&5\n+$as_echo_n \"checking for fetestexcept in -lm... \" >&6; }\n+if test \"${ac_cv_lib_m_fetestexcept+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  ac_check_lib_save_LIBS=$LIBS\n+LIBS=\"-lm  $LIBS\"\n+if test x$gcc_no_link = xyes; then\n+  as_fn_error \"Link tests are not allowed after GCC_NO_EXECUTABLES.\" \"$LINENO\" 5\n+fi\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+/* Override any GCC internal prototype to avoid an error.\n+   Use char because int might match the return type of a GCC\n+   builtin and then its argument prototype would still apply.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+char fetestexcept ();\n+int\n+main ()\n+{\n+return fetestexcept ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_link \"$LINENO\"; then :\n+  ac_cv_lib_m_fetestexcept=yes\n+else\n+  ac_cv_lib_m_fetestexcept=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+LIBS=$ac_check_lib_save_LIBS\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_m_fetestexcept\" >&5\n+$as_echo \"$ac_cv_lib_m_fetestexcept\" >&6; }\n+if test \"x$ac_cv_lib_m_fetestexcept\" = x\"\"yes; then :\n+\n+$as_echo \"#define HAVE_FETESTEXCEPT 1\" >>confdefs.h\n+\n fi\n \n else\n@@ -11884,6 +12209,31 @@ $as_echo \"#define HAVE_SQRTL 1\" >>confdefs.h\n \n $as_echo \"#define HAVE_CBRTL 1\" >>confdefs.h\n \n+  fi\n+  if test \"x$ac_cv_lib_m_feholdexcept\" = x\"\"yes; then\n+\n+$as_echo \"#define HAVE_FEHOLDEXCEPT 1\" >>confdefs.h\n+\n+  fi\n+  if test \"x$ac_cv_lib_m_fesetround\" = x\"\"yes; then\n+\n+$as_echo \"#define HAVE_FESETROUND 1\" >>confdefs.h\n+\n+  fi\n+  if test \"x$ac_cv_lib_m_feupdateenv\" = x\"\"yes; then\n+\n+$as_echo \"#define HAVE_FEUPDATEENV 1\" >>confdefs.h\n+\n+  fi\n+  if test \"x$ac_cv_lib_m_fesetenv\" = x\"\"yes; then\n+\n+$as_echo \"#define HAVE_FESETENV 1\" >>confdefs.h\n+\n+  fi\n+  if test \"x$ac_cv_lib_m_fetestexcept\" = x\"\"yes; then\n+\n+$as_echo \"#define HAVE_FETESTEXCEPT 1\" >>confdefs.h\n+\n   fi\n fi\n "}, {"sha": "0bc2315a6b2fdc0ce809e616334c6b8f6732cd14", "filename": "libquadmath/configure.ac", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8d42d280e1be1670d0ef09eb7bd78574082b5f0/libquadmath%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8d42d280e1be1670d0ef09eb7bd78574082b5f0/libquadmath%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fconfigure.ac?ref=e8d42d280e1be1670d0ef09eb7bd78574082b5f0", "patch": "@@ -110,18 +110,40 @@ esac\n AC_SUBST(toolexecdir)\n AC_SUBST(toolexeclibdir)\n \n+AC_CHECK_HEADERS(fenv.h)\n+\n # If available, sqrtl and cbrtl speed up the calculation -\n # but they are not required\n if test x$gcc_no_link != xyes; then\n   AC_CHECK_LIB([m],[sqrtl],[AC_DEFINE([HAVE_SQRTL],[1],[libm includes sqrtl])])\n   AC_CHECK_LIB([m],[cbrtl],[AC_DEFINE([HAVE_CBRTL],[1],[libm includes cbrtl])])\n+  AC_CHECK_LIB([m],[feholdexcept],[AC_DEFINE([HAVE_FEHOLDEXCEPT],[1],[libm includes feholdexcept])])\n+  AC_CHECK_LIB([m],[fesetround],[AC_DEFINE([HAVE_FESETROUND],[1],[libm includes fesetround])])\n+  AC_CHECK_LIB([m],[feupdateenv],[AC_DEFINE([HAVE_FEUPDATEENV],[1],[libm includes feupdateenv])])\n+  AC_CHECK_LIB([m],[fesetenv],[AC_DEFINE([HAVE_FESETENV],[1],[libm includes fesetenv])])\n+  AC_CHECK_LIB([m],[fetestexcept],[AC_DEFINE([HAVE_FETESTEXCEPT],[1],[libm includes fetestexcept])])\n else\n   if test \"x$ac_cv_lib_m_sqrtl\" = x\"\"yes; then\n     AC_DEFINE([HAVE_SQRTL],[1],[libm includes sqrtl])  \n   fi\n   if test \"x$ac_cv_lib_m_cbrtl\" = x\"\"yes; then\n     AC_DEFINE([HAVE_CBRTL],[1],[libm includes cbrtl])  \n   fi\n+  if test \"x$ac_cv_lib_m_feholdexcept\" = x\"\"yes; then\n+    AC_DEFINE([HAVE_FEHOLDEXCEPT],[1],[libm includes feholdexcept])\n+  fi\n+  if test \"x$ac_cv_lib_m_fesetround\" = x\"\"yes; then\n+    AC_DEFINE([HAVE_FESETROUND],[1],[libm includes fesetround])\n+  fi\n+  if test \"x$ac_cv_lib_m_feupdateenv\" = x\"\"yes; then\n+    AC_DEFINE([HAVE_FEUPDATEENV],[1],[libm includes feupdateenv])\n+  fi\n+  if test \"x$ac_cv_lib_m_fesetenv\" = x\"\"yes; then\n+    AC_DEFINE([HAVE_FESETENV],[1],[libm includes fesetenv])\n+  fi\n+  if test \"x$ac_cv_lib_m_fetestexcept\" = x\"\"yes; then\n+    AC_DEFINE([HAVE_FETESTEXCEPT],[1],[libm includes fetestexcept])\n+  fi\n fi\n \n # Check for symbol versioning (copied from libssp)."}, {"sha": "aba777b4fcd8e6cc36a25bbbaf1f6ad0254cfd48", "filename": "libquadmath/libquadmath.texi", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8d42d280e1be1670d0ef09eb7bd78574082b5f0/libquadmath%2Flibquadmath.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8d42d280e1be1670d0ef09eb7bd78574082b5f0/libquadmath%2Flibquadmath.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Flibquadmath.texi?ref=e8d42d280e1be1670d0ef09eb7bd78574082b5f0", "patch": "@@ -113,6 +113,7 @@ The following mathematical functions are available:\n @item @code{fabsq}: absolute value function\n @item @code{finiteq}: check finiteness of value\n @item @code{floorq}: floor value function\n+@item @code{fmaq}: fused multiply and add\n @item @code{fmodq}: remainder value function\n @item @code{frexpq}: extract mantissa and exponent\n @item @code{hypotq}: Eucledian distance function"}, {"sha": "2740b4e2cc9a2fc928cabfa29528deb3dd85bc4e", "filename": "libquadmath/math/expq.c", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8d42d280e1be1670d0ef09eb7bd78574082b5f0/libquadmath%2Fmath%2Fexpq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8d42d280e1be1670d0ef09eb7bd78574082b5f0/libquadmath%2Fmath%2Fexpq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fexpq.c?ref=e8d42d280e1be1670d0ef09eb7bd78574082b5f0", "patch": "@@ -21,6 +21,13 @@\n    02111-1307 USA.  */\n \n #include \"quadmath-imp.h\"\n+#ifdef HAVE_FENV_H\n+# include <fenv.h>\n+# if defined HAVE_FEHOLDEXCEPT && defined HAVE_FESETROUND \\\n+     && defined HAVE_FESETENV && defined FE_TONEAREST\n+#  define USE_FENV_H\n+# endif\n+#endif\n \n \n /* __expl_table basically consists of four tables, T_EXPL_ARG{1,2} and\n@@ -1093,6 +1100,14 @@ expq (__float128 x)\n       int tval1, tval2, unsafe, n_i;\n       __float128 x22, n, t, result, xl;\n       ieee854_float128 ex2_u, scale_u;\n+#ifdef USE_FENV_H\n+      fenv_t oldenv;\n+\n+      feholdexcept (&oldenv);\n+# ifdef FE_TONEAREST\n+      fesetround (FE_TONEAREST);\n+# endif\n+#endif\n \n       /* Calculate n.  */\n       n = x * M_1_LN2 + THREEp111;\n@@ -1140,6 +1155,9 @@ expq (__float128 x)\n       x22 = x + x*x*(P1+x*(P2+x*(P3+x*(P4+x*(P5+x*P6)))));\n \n       /* Return result.  */\n+#ifdef USE_FENV_H\n+      fesetenv (&oldenv);\n+#endif\n       result = x22 * ex2_u.value + ex2_u.value;\n \n       /* Now we can test whether the result is ultimate or if we are unsure.\n@@ -1153,12 +1171,24 @@ expq (__float128 x)\n \n \t  union ieee854_long_double ex3_u;\n \n+#ifdef USE_FENV_H\n+\t  #ifdef FE_TONEAREST\n+\t    fesetround (FE_TONEAREST);\n+\t  #endif\n+#endif\n \t  ex3_u.d = (result - ex2_u.d) - x22 * ex2_u.d;\n \t  ex2_u.d = result;\n \t  ex3_u.ieee.exponent += LDBL_MANT_DIG + 15 + IEEE854_LONG_DOUBLE_BIAS\n \t  \t\t\t - ex2_u.ieee.exponent;\n \t  n_i = abs (ex3_u.d);\n \t  n_i = (n_i + 1) / 2;\n+#ifdef USE_FENV_H\n+\t  fesetenv (&oldenv);\n+\t  #ifdef FE_TONEAREST\n+\t  if (fegetround () == FE_TONEAREST)\n+\t    n_i -= 0x4000;\n+\t  #endif\n+#endif\n \t  if (!n_i) {\n \t    return __ieee754_expl_proc2 (origx);\n \t  }"}, {"sha": "126b0a2d26b47cabdee8cd7a293e309e62ac888b", "filename": "libquadmath/math/fmaq.c", "status": "added", "additions": 241, "deletions": 0, "changes": 241, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8d42d280e1be1670d0ef09eb7bd78574082b5f0/libquadmath%2Fmath%2Ffmaq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8d42d280e1be1670d0ef09eb7bd78574082b5f0/libquadmath%2Fmath%2Ffmaq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Ffmaq.c?ref=e8d42d280e1be1670d0ef09eb7bd78574082b5f0", "patch": "@@ -0,0 +1,241 @@\n+/* Compute x * y + z as ternary operation.\n+   Copyright (C) 2010 Free Software Foundation, Inc.\n+   This file is part of the GNU C Library.\n+   Contributed by Jakub Jelinek <jakub@redhat.com>, 2010.\n+\n+   The GNU C Library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   The GNU C Library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with the GNU C Library; if not, write to the Free\n+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+   02111-1307 USA.  */\n+\n+#include \"quadmath-imp.h\"\n+#include <math.h>\n+#include <float.h>\n+#ifdef HAVE_FENV_H\n+# include <fenv.h>\n+# if defined HAVE_FEHOLDEXCEPT && defined HAVE_FESETROUND \\\n+     && defined HAVE_FEUPDATEENV && defined HAVE_FETESTEXCEPT \\\n+     && defined FE_TOWARDZERO && defined FE_INEXACT\n+#  define USE_FENV_H\n+# endif\n+#endif\n+\n+/* This implementation uses rounding to odd to avoid problems with\n+   double rounding.  See a paper by Boldo and Melquiond:\n+   http://www.lri.fr/~melquion/doc/08-tc.pdf  */\n+\n+__float128\n+fmaq (__float128 x, __float128 y, __float128 z)\n+{\n+  ieee854_float128 u, v, w;\n+  int adjust = 0;\n+  u.value = x;\n+  v.value = y;\n+  w.value = z;\n+  if (__builtin_expect (u.ieee.exponent + v.ieee.exponent\n+\t\t\t>= 0x7fff + IEEE854_FLOAT128_BIAS\n+\t\t\t   - FLT128_MANT_DIG, 0)\n+      || __builtin_expect (u.ieee.exponent >= 0x7fff - FLT128_MANT_DIG, 0)\n+      || __builtin_expect (v.ieee.exponent >= 0x7fff - FLT128_MANT_DIG, 0)\n+      || __builtin_expect (w.ieee.exponent >= 0x7fff - FLT128_MANT_DIG, 0)\n+      || __builtin_expect (u.ieee.exponent + v.ieee.exponent\n+\t\t\t   <= IEEE854_FLOAT128_BIAS + FLT128_MANT_DIG, 0))\n+    {\n+      /* If z is Inf, but x and y are finite, the result should be\n+\t z rather than NaN.  */\n+      if (w.ieee.exponent == 0x7fff\n+\t  && u.ieee.exponent != 0x7fff\n+          && v.ieee.exponent != 0x7fff)\n+\treturn (z + x) + y;\n+      /* If x or y or z is Inf/NaN, or if fma will certainly overflow,\n+\t or if x * y is less than half of FLT128_DENORM_MIN,\n+\t compute as x * y + z.  */\n+      if (u.ieee.exponent == 0x7fff\n+\t  || v.ieee.exponent == 0x7fff\n+\t  || w.ieee.exponent == 0x7fff\n+\t  || u.ieee.exponent + v.ieee.exponent\n+\t     > 0x7fff + IEEE854_FLOAT128_BIAS\n+\t  || u.ieee.exponent + v.ieee.exponent\n+\t     < IEEE854_FLOAT128_BIAS - FLT128_MANT_DIG - 2)\n+\treturn x * y + z;\n+      if (u.ieee.exponent + v.ieee.exponent\n+\t  >= 0x7fff + IEEE854_FLOAT128_BIAS - FLT128_MANT_DIG)\n+\t{\n+\t  /* Compute 1p-113 times smaller result and multiply\n+\t     at the end.  */\n+\t  if (u.ieee.exponent > v.ieee.exponent)\n+\t    u.ieee.exponent -= FLT128_MANT_DIG;\n+\t  else\n+\t    v.ieee.exponent -= FLT128_MANT_DIG;\n+\t  /* If x + y exponent is very large and z exponent is very small,\n+\t     it doesn't matter if we don't adjust it.  */\n+\t  if (w.ieee.exponent > FLT128_MANT_DIG)\n+\t    w.ieee.exponent -= FLT128_MANT_DIG;\n+\t  adjust = 1;\n+\t}\n+      else if (w.ieee.exponent >= 0x7fff - FLT128_MANT_DIG)\n+\t{\n+\t  /* Similarly.\n+\t     If z exponent is very large and x and y exponents are\n+\t     very small, it doesn't matter if we don't adjust it.  */\n+\t  if (u.ieee.exponent > v.ieee.exponent)\n+\t    {\n+\t      if (u.ieee.exponent > FLT128_MANT_DIG)\n+\t\tu.ieee.exponent -= FLT128_MANT_DIG;\n+\t    }\n+\t  else if (v.ieee.exponent > FLT128_MANT_DIG)\n+\t    v.ieee.exponent -= FLT128_MANT_DIG;\n+\t  w.ieee.exponent -= FLT128_MANT_DIG;\n+\t  adjust = 1;\n+\t}\n+      else if (u.ieee.exponent >= 0x7fff - FLT128_MANT_DIG)\n+\t{\n+\t  u.ieee.exponent -= FLT128_MANT_DIG;\n+\t  if (v.ieee.exponent)\n+\t    v.ieee.exponent += FLT128_MANT_DIG;\n+\t  else\n+\t    v.value *= 0x1p113Q;\n+\t}\n+      else if (v.ieee.exponent >= 0x7fff - FLT128_MANT_DIG)\n+\t{\n+\t  v.ieee.exponent -= FLT128_MANT_DIG;\n+\t  if (u.ieee.exponent)\n+\t    u.ieee.exponent += FLT128_MANT_DIG;\n+\t  else\n+\t    u.value *= 0x1p113Q;\n+\t}\n+      else /* if (u.ieee.exponent + v.ieee.exponent\n+\t\t  <= IEEE854_FLOAT128_BIAS + FLT128_MANT_DIG) */\n+\t{\n+\t  if (u.ieee.exponent > v.ieee.exponent)\n+\t    u.ieee.exponent += 2 * FLT128_MANT_DIG;\n+\t  else\n+\t    v.ieee.exponent += 2 * FLT128_MANT_DIG;\n+\t  if (w.ieee.exponent <= 4 * FLT128_MANT_DIG + 4)\n+\t    {\n+\t      if (w.ieee.exponent)\n+\t\tw.ieee.exponent += 2 * FLT128_MANT_DIG;\n+\t      else\n+\t\tw.value *= 0x1p226Q;\n+\t      adjust = -1;\n+\t    }\n+\t  /* Otherwise x * y should just affect inexact\n+\t     and nothing else.  */\n+\t}\n+      x = u.value;\n+      y = v.value;\n+      z = w.value;\n+    }\n+  /* Multiplication m1 + m2 = x * y using Dekker's algorithm.  */\n+#define C ((1LL << (FLT128_MANT_DIG + 1) / 2) + 1)\n+  __float128 x1 = x * C;\n+  __float128 y1 = y * C;\n+  __float128 m1 = x * y;\n+  x1 = (x - x1) + x1;\n+  y1 = (y - y1) + y1;\n+  __float128 x2 = x - x1;\n+  __float128 y2 = y - y1;\n+  __float128 m2 = (((x1 * y1 - m1) + x1 * y2) + x2 * y1) + x2 * y2;\n+\n+  /* Addition a1 + a2 = z + m1 using Knuth's algorithm.  */\n+  __float128 a1 = z + m1;\n+  __float128 t1 = a1 - z;\n+  __float128 t2 = a1 - t1;\n+  t1 = m1 - t1;\n+  t2 = z - t2;\n+  __float128 a2 = t1 + t2;\n+\n+#ifdef USE_FENV_H\n+  fenv_t env;\n+  feholdexcept (&env);\n+  fesetround (FE_TOWARDZERO);\n+#endif\n+  /* Perform m2 + a2 addition with round to odd.  */\n+  u.value = a2 + m2;\n+\n+  if (__builtin_expect (adjust == 0, 1))\n+    {\n+#ifdef USE_FENV_H\n+      if ((u.ieee.mant_low & 1) == 0 && u.ieee.exponent != 0x7fff)\n+\tu.ieee.mant_low |= fetestexcept (FE_INEXACT) != 0;\n+      feupdateenv (&env);\n+#endif\n+      /* Result is a1 + u.value.  */\n+      return a1 + u.value;\n+    }\n+  else if (__builtin_expect (adjust > 0, 1))\n+    {\n+#ifdef USE_FENV_H\n+      if ((u.ieee.mant_low & 1) == 0 && u.ieee.exponent != 0x7fff)\n+\tu.ieee.mant_low |= fetestexcept (FE_INEXACT) != 0;\n+      feupdateenv (&env);\n+#endif\n+      /* Result is a1 + u.value, scaled up.  */\n+      return (a1 + u.value) * 0x1p113Q;\n+    }\n+  else\n+    {\n+#ifdef USE_FENV_H\n+      if ((u.ieee.mant_low & 1) == 0)\n+\tu.ieee.mant_low |= fetestexcept (FE_INEXACT) != 0;\n+#endif\n+      v.value = a1 + u.value;\n+      /* Ensure the addition is not scheduled after fetestexcept call.  */\n+      asm volatile (\"\" : : \"m\" (v));\n+#ifdef USE_FENV_H\n+      int j = fetestexcept (FE_INEXACT) != 0;\n+      feupdateenv (&env);\n+#else\n+      int j = 0;\n+#endif\n+      /* Ensure the following computations are performed in default rounding\n+\t mode instead of just reusing the round to zero computation.  */\n+      asm volatile (\"\" : \"=m\" (u) : \"m\" (u));\n+      /* If a1 + u.value is exact, the only rounding happens during\n+\t scaling down.  */\n+      if (j == 0)\n+\treturn v.value * 0x1p-226Q;\n+      /* If result rounded to zero is not subnormal, no double\n+\t rounding will occur.  */\n+      if (v.ieee.exponent > 226)\n+\treturn (a1 + u.value) * 0x1p-226Q;\n+      /* If v.value * 0x1p-226Q with round to zero is a subnormal above\n+\t or equal to FLT128_MIN / 2, then v.value * 0x1p-226Q shifts mantissa\n+\t down just by 1 bit, which means v.ieee.mant_low |= j would\n+\t change the round bit, not sticky or guard bit.\n+\t v.value * 0x1p-226Q never normalizes by shifting up,\n+\t so round bit plus sticky bit should be already enough\n+\t for proper rounding.  */\n+      if (v.ieee.exponent == 226)\n+\t{\n+\t  /* v.ieee.mant_low & 2 is LSB bit of the result before rounding,\n+\t     v.ieee.mant_low & 1 is the round bit and j is our sticky\n+\t     bit.  In round-to-nearest 001 rounds down like 00,\n+\t     011 rounds up, even though 01 rounds down (thus we need\n+\t     to adjust), 101 rounds down like 10 and 111 rounds up\n+\t     like 11.  */\n+\t  if ((v.ieee.mant_low & 3) == 1)\n+\t    {\n+\t      v.value *= 0x1p-226Q;\n+\t      if (v.ieee.negative)\n+\t\treturn v.value - 0x1p-16494Q /* __FLT128_DENORM_MIN__ */;\n+\t      else\n+\t\treturn v.value + 0x1p-16494Q /* __FLT128_DENORM_MIN__ */;\n+\t    }\n+\t  else\n+\t    return v.value * 0x1p-226Q;\n+\t}\n+      v.ieee.mant_low |= j;\n+      return v.value * 0x1p-226Q;\n+    }\n+}"}, {"sha": "ac9359b662678b296f1d70a036062d844826737b", "filename": "libquadmath/quadmath-imp.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8d42d280e1be1670d0ef09eb7bd78574082b5f0/libquadmath%2Fquadmath-imp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8d42d280e1be1670d0ef09eb7bd78574082b5f0/libquadmath%2Fquadmath-imp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fquadmath-imp.h?ref=e8d42d280e1be1670d0ef09eb7bd78574082b5f0", "patch": "@@ -24,6 +24,7 @@ Boston, MA 02110-1301, USA.  */\n #include <stdint.h>\n #include <stdlib.h>\n #include \"quadmath.h\"\n+#include \"config.h\"\n \n \n // Prototypes for internal functions"}, {"sha": "5fe9549d3767fbcfb116e70fba836b32057cf6b3", "filename": "libquadmath/quadmath.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8d42d280e1be1670d0ef09eb7bd78574082b5f0/libquadmath%2Fquadmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8d42d280e1be1670d0ef09eb7bd78574082b5f0/libquadmath%2Fquadmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fquadmath.h?ref=e8d42d280e1be1670d0ef09eb7bd78574082b5f0", "patch": "@@ -48,6 +48,7 @@ extern __float128 expm1q (__float128);\n extern __float128 fabsq (__float128);\n extern int finiteq (const __float128);\n extern __float128 floorq (__float128);\n+extern __float128 fmaq (__float128, __float128, __float128);\n extern __float128 fmodq (__float128, __float128);\n extern __float128 frexpq (__float128, int *);\n extern __float128 hypotq (__float128, __float128);"}, {"sha": "f70cda120af124dc097c32c71c8d7c576e9ae61a", "filename": "libquadmath/quadmath.map", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8d42d280e1be1670d0ef09eb7bd78574082b5f0/libquadmath%2Fquadmath.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8d42d280e1be1670d0ef09eb7bd78574082b5f0/libquadmath%2Fquadmath.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fquadmath.map?ref=e8d42d280e1be1670d0ef09eb7bd78574082b5f0", "patch": "@@ -19,6 +19,7 @@ QUADMATH_1.0 {\n     fabsq;\n     finiteq;\n     floorq;\n+    fmaq;\n     fmodq;\n     frexpq;\n     hypotq;"}, {"sha": "05b04389376746776cceea3e4d8f87232557227d", "filename": "libquadmath/quadmath_weak.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8d42d280e1be1670d0ef09eb7bd78574082b5f0/libquadmath%2Fquadmath_weak.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8d42d280e1be1670d0ef09eb7bd78574082b5f0/libquadmath%2Fquadmath_weak.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fquadmath_weak.h?ref=e8d42d280e1be1670d0ef09eb7bd78574082b5f0", "patch": "@@ -55,6 +55,7 @@ __qmath3 (expm1q)\n __qmath3 (fabsq)\n __qmath3 (finiteq)\n __qmath3 (floorq)\n+__qmath3 (fmaq)\n __qmath3 (fmodq)\n __qmath3 (frexpq)\n __qmath3 (hypotq)"}]}