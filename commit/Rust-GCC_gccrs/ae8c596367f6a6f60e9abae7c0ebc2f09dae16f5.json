{"sha": "ae8c596367f6a6f60e9abae7c0ebc2f09dae16f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWU4YzU5NjM2N2Y2YTZmNjBlOWFiYWU3YzBlYmMyZjA5ZGFlMTZmNQ==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@cygnus.com", "date": "1998-03-24T10:49:50Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "1998-03-24T10:49:50Z"}, "message": "Support win32 style absolute paths.\n\nAdd more debugging.\n\nFrom-SVN: r18797", "tree": {"sha": "f2311b5a5d3e70a95c57e6a124211f494e599ba9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2311b5a5d3e70a95c57e6a124211f494e599ba9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae8c596367f6a6f60e9abae7c0ebc2f09dae16f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae8c596367f6a6f60e9abae7c0ebc2f09dae16f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae8c596367f6a6f60e9abae7c0ebc2f09dae16f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae8c596367f6a6f60e9abae7c0ebc2f09dae16f5/comments", "author": null, "committer": null, "parents": [{"sha": "ff29fd003bf23a076adb8212ebc64404723882b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff29fd003bf23a076adb8212ebc64404723882b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff29fd003bf23a076adb8212ebc64404723882b8"}], "stats": {"total": 86, "additions": 75, "deletions": 11}, "files": [{"sha": "6bf7238f44778d8711c10144bf0f8a1090996fa6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae8c596367f6a6f60e9abae7c0ebc2f09dae16f5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae8c596367f6a6f60e9abae7c0ebc2f09dae16f5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ae8c596367f6a6f60e9abae7c0ebc2f09dae16f5", "patch": "@@ -1,3 +1,13 @@\n+Tue Mar 24 10:44:11 1998  Nick Clifton  <nickc@cygnus.com>\n+\n+\t* collect2.c (find_a_file): Add debugging.\n+\t(find_a_file): Test for win32 style absolute paths if\n+\tDIR_SERPARATOR is defined.\n+\t(prefix_from_string): Add debugging.\n+\t(main): Test for debug command line switch at start of program\n+\texecution. \n+\t(main): Use GET_ENVIRONMENT rather than getenv().\n+\t\n 1998-03-24  Mark Mitchell  <mmitchell@usa.net>\n \n \t* cplus-dem.c (optable): Add sizeof."}, {"sha": "36641c25ae59c3f534b1ad6518b5fa5462d21457", "filename": "gcc/collect2.c", "status": "modified", "additions": 65, "deletions": 11, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae8c596367f6a6f60e9abae7c0ebc2f09dae16f5/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae8c596367f6a6f60e9abae7c0ebc2f09dae16f5/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=ae8c596367f6a6f60e9abae7c0ebc2f09dae16f5", "patch": "@@ -784,6 +784,9 @@ find_a_file (pprefix, name)\n   struct prefix_list *pl;\n   int len = pprefix->max_len + strlen (name) + 1;\n \n+  if (debug)\n+    fprintf (stderr, \"Looking for '%s'\\n\", name);\n+  \n #ifdef EXECUTABLE_SUFFIX\n   len += strlen (EXECUTABLE_SUFFIX);\n #endif\n@@ -792,35 +795,70 @@ find_a_file (pprefix, name)\n \n   /* Determine the filename to execute (special case for absolute paths).  */\n \n-  if (*name == '/')\n+  if (*name == '/'\n+#ifdef DIR_SEPARATOR\n+      DIR_SEPARATOR == '\\\\' && name[1] == ':'\n+      && (name[2] == DIR_SEPARATOR || name[2] == '/')\n+#endif\n+      )\n     {\n       if (access (name, X_OK) == 0)\n \t{\n \t  strcpy (temp, name);\n+\n+\t  if (debug)\n+\t    fprintf (stderr, \"  - found: absolute path\\n\");\n+\t  \n \t  return temp;\n \t}\n+\n+      if (debug)\n+\tfprintf (stderr, \"  - failed to locate using absolute path\\n\");\n     }\n   else\n     for (pl = pprefix->plist; pl; pl = pl->next)\n       {\n \tstrcpy (temp, pl->prefix);\n \tstrcat (temp, name);\n+\n+\tif (debug)\n+\t  fprintf (stderr, \"  - try: %s\\n\", temp);\n+\t\n \tif (! is_in_prefix_list (&our_file_names, temp, 1)\n \t    /* This is a kludge, but there seems no way around it.  */\n \t    && strcmp (temp, \"./ld\") != 0\n \t    && access (temp, X_OK) == 0)\n-\t  return temp;\n+\t  {\n+\t    if (debug)\n+\t      fprintf (stderr, \"  - found!\\n\");\n+\t    \n+\t    return temp;\n+\t  }\n \n #ifdef EXECUTABLE_SUFFIX\n \t/* Some systems have a suffix for executable files.\n \t   So try appending that.  */\n \tstrcat (temp, EXECUTABLE_SUFFIX);\n+\t\n+\tif (debug)\n+\t  fprintf (stderr, \"  - try: %s\\n\", temp);\n+\t\n \tif (! is_in_prefix_list (&our_file_names, temp, 1)\n \t    && access (temp, X_OK) == 0)\n-\t  return temp;\n-#endif\n+\t  {\n+\t    if (debug)\n+\t      fprintf (stderr, \"  - found!  (Uses executable suffix)\\n\");\n+\t    \n+\t    return temp;\n+\t  }\n+#endif\n+\tif (debug && pl->next == NULL)\n+\t  fprintf (stderr, \"  - failed to locate using relative paths\\n\");\n       }\n \n+  if (debug && pprefix->plist == NULL)\n+    fprintf (stderr, \"  - failed: no entries in prefix list\\n\");\n+\n   free (temp);\n   return 0;\n }\n@@ -882,6 +920,9 @@ prefix_from_string (p, pprefix)\n   char *startp, *endp;\n   char *nstore = (char *) xmalloc (strlen (p) + 3);\n \n+  if (debug)\n+    fprintf (stderr, \"Convert string '%s' into prefixes, separator = '%c'\\n\", p, PATH_SEPARATOR);\n+  \n   startp = endp = p;\n   while (1)\n     {\n@@ -900,6 +941,9 @@ prefix_from_string (p, pprefix)\n \t  else\n \t    nstore[endp-startp] = 0;\n \n+\t  if (debug)\n+\t    fprintf (stderr, \"  - add prefix: %s\\n\", nstore);\n+\t  \n \t  add_prefix (pprefix, nstore);\n \t  if (*endp == 0)\n \t    break;\n@@ -956,9 +1000,20 @@ main (argc, argv)\n \n #ifdef DEBUG\n   debug = 1;\n-  vflag = 1;\n #endif\n \n+  /* Parse command line early for instances of -debug.  This allows\n+     the debug flag to be set before functions like find_a_file()\n+     are called.  */\n+  {\n+    int i;\n+    \n+    for (i = 1; argv[i] != NULL; i ++)\n+      if (! strcmp (argv[i], \"-debug\"))\n+\tdebug = 1;\n+    vflag = debug;\n+  }\n+\n #ifndef DEFAULT_A_OUT_NAME\n   output_file = \"a.out\";\n #else\n@@ -986,8 +1041,8 @@ main (argc, argv)\n      and a new one is installed (rare, but we should handle it).\n      ??? Hopefully references to COLLECT_NAME can be removed at some point.  */\n \n-  collect_name = getenv (\"COLLECT_NAME\");\n-  collect_names = getenv (\"COLLECT_NAMES\");\n+  GET_ENVIRONMENT (collect_name,  \"COLLECT_NAME\");\n+  GET_ENVIRONMENT (collect_names, \"COLLECT_NAMES\");\n \n   p = (char *) xmalloc (strlen (\"COLLECT_NAMES=\")\n \t\t\t+ (collect_name ? strlen (collect_name) + 1 : 0)\n@@ -1056,7 +1111,7 @@ main (argc, argv)\n #ifdef CROSS_COMPILE\n   /* If we look for a program in the compiler directories, we just use\n      the short name, since these directories are already system-specific.\n-     But it we look for a took in the system directories, we need to\n+     But it we look for a program in the system directories, we need to\n      qualify the program name with the target machine.  */\n \n   full_ld_suffix\n@@ -1136,7 +1191,7 @@ main (argc, argv)\n \t  argv[0] = ld_file_name;\n \t  execvp (argv[0], argv);\n \t}\n-      fatal (\"cannot find `ld'\");\n+      fatal (\"cannot find `ld' (%s)\", ld_file_name);\n     }\n \n #ifdef REAL_NM_FILE_NAME\n@@ -1273,8 +1328,7 @@ main (argc, argv)\n \t    case 'd':\n \t      if (!strcmp (arg, \"-debug\"))\n \t\t{\n-\t\t  debug = 1;\n-\t\t  vflag = 1;\n+\t\t  /* Already parsed.  */\n \t\t  ld1--;\n \t\t  ld2--;\n \t\t}"}]}