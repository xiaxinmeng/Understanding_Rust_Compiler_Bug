{"sha": "e898243c23c82247ec01b32f551402ca52f32927", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTg5ODI0M2MyM2M4MjI0N2VjMDFiMzJmNTUxNDAyY2E1MmYzMjkyNw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-06-10T21:34:12Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-06-10T21:34:12Z"}, "message": "compiler: support inlining functions that use index expressions\n    \n    Also move the determine_types pass on an inlined function body to one\n    place, rather than doing it ad hoc as needed.\n    \n    This adds 79 new inlinable functions in the standard library, such as\n    bytes.HasPrefix and bytes.LastIndexByte.\n    \n    Reviewed-on: https://go-review.googlesource.com/c/gofrontend/+/181261\n\nFrom-SVN: r272133", "tree": {"sha": "b0d9c35dc562318a0568ad5a47888711864bc4c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0d9c35dc562318a0568ad5a47888711864bc4c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e898243c23c82247ec01b32f551402ca52f32927", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e898243c23c82247ec01b32f551402ca52f32927", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e898243c23c82247ec01b32f551402ca52f32927", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e898243c23c82247ec01b32f551402ca52f32927/comments", "author": null, "committer": null, "parents": [{"sha": "35c19de69645b18eeef7dbecfcd98b19f9948c84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35c19de69645b18eeef7dbecfcd98b19f9948c84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35c19de69645b18eeef7dbecfcd98b19f9948c84"}], "stats": {"total": 140, "additions": 129, "deletions": 11}, "files": [{"sha": "d89e8e3e2884a11c23529cb9da6ca6aa37ee3d0a", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e898243c23c82247ec01b32f551402ca52f32927/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e898243c23c82247ec01b32f551402ca52f32927/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=e898243c23c82247ec01b32f551402ca52f32927", "patch": "@@ -1,4 +1,4 @@\n-764fe6702f2bb8650622d4102de31058e484ecb5\n+b1ae35965cadac235d7d218e689944286cccdd90\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "740daec5f2178e92ae80ea131d517854e6a71e1e", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e898243c23c82247ec01b32f551402ca52f32927/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e898243c23c82247ec01b32f551402ca52f32927/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=e898243c23c82247ec01b32f551402ca52f32927", "patch": "@@ -7110,6 +7110,12 @@ Binary_expression::do_import(Import_expression* imp, Location loc)\n       op = OPERATOR_BITCLEAR;\n       imp->advance(4);\n     }\n+  else if (imp->match_c_string(\")\"))\n+    {\n+      // Not a binary operator after all.\n+      imp->advance(1);\n+      return left;\n+    }\n   else\n     {\n       go_error_at(imp->location(), \"unrecognized binary operator\");\n@@ -12808,6 +12814,38 @@ Array_index_expression::do_get_backend(Translate_context* context)\n   return ret;\n }\n \n+// Export an array index expression.\n+\n+void\n+Array_index_expression::do_export(Export_function_body* efb) const\n+{\n+  efb->write_c_string(\"(\");\n+  this->array_->export_expression(efb);\n+  efb->write_c_string(\")[\");\n+\n+  Type* old_context = efb->type_context();\n+  efb->set_type_context(Type::lookup_integer_type(\"int\"));\n+\n+  this->start_->export_expression(efb);\n+  if (this->end_ == NULL)\n+    go_assert(this->cap_ == NULL);\n+  else\n+    {\n+      efb->write_c_string(\":\");\n+      if (!this->end_->is_nil_expression())\n+\tthis->end_->export_expression(efb);\n+      if (this->cap_ != NULL)\n+\t{\n+\t  efb->write_c_string(\":\");\n+\t  this->cap_->export_expression(efb);\n+\t}\n+    }\n+\n+  efb->set_type_context(old_context);\n+\n+  efb->write_c_string(\"]\");\n+}\n+\n // Dump ast representation for an array index expression.\n \n void\n@@ -13068,6 +13106,31 @@ String_index_expression::do_get_backend(Translate_context* context)\n \t\t\t\t\t\t crash, bstrslice, loc);\n }\n \n+// Export a string index expression.\n+\n+void\n+String_index_expression::do_export(Export_function_body* efb) const\n+{\n+  efb->write_c_string(\"(\");\n+  this->string_->export_expression(efb);\n+  efb->write_c_string(\")[\");\n+\n+  Type* old_context = efb->type_context();\n+  efb->set_type_context(Type::lookup_integer_type(\"int\"));\n+\n+  this->start_->export_expression(efb);\n+  if (this->end_ != NULL)\n+    {\n+      efb->write_c_string(\":\");\n+      if (!this->end_->is_nil_expression())\n+\tthis->end_->export_expression(efb);\n+    }\n+\n+  efb->set_type_context(old_context);\n+\n+  efb->write_c_string(\"]\");\n+}\n+\n // Dump ast representation for a string index expression.\n \n void\n@@ -13338,6 +13401,25 @@ Map_index_expression::get_value_pointer(Gogo* gogo)\n   return this->value_pointer_;\n }\n \n+// Export a map index expression.\n+\n+void\n+Map_index_expression::do_export(Export_function_body* efb) const\n+{\n+  efb->write_c_string(\"(\");\n+  this->map_->export_expression(efb);\n+  efb->write_c_string(\")[\");\n+\n+  Type* old_context = efb->type_context();\n+  efb->set_type_context(this->get_map_type()->key_type());\n+\n+  this->index_->export_expression(efb);\n+\n+  efb->set_type_context(old_context);\n+\n+  efb->write_c_string(\"]\");\n+}\n+\n // Dump ast representation for a map index expression\n \n void\n@@ -17974,6 +18056,29 @@ Expression::import_expression(Import_expression* imp, Location loc)\n \t  imp->require_c_string(\")\");\n \t  expr = Expression::make_call(expr, args, is_varargs, loc);\n \t}\n+      else if (imp->match_c_string(\"[\"))\n+\t{\n+\t  imp->advance(1);\n+\t  Expression* start = Expression::import_expression(imp, loc);\n+\t  Expression* end = NULL;\n+\t  Expression* cap = NULL;\n+\t  if (imp->match_c_string(\":\"))\n+\t    {\n+\t      imp->advance(1);\n+\t      int c = imp->peek_char();\n+\t      if (c == ':' || c == ']')\n+\t\tend = Expression::make_nil(loc);\n+\t      else\n+\t\tend = Expression::import_expression(imp, loc);\n+\t      if (imp->match_c_string(\":\"))\n+\t\t{\n+\t\t  imp->advance(1);\n+\t\t  cap = Expression::import_expression(imp, loc);\n+\t\t}\n+\t    }\n+\t  imp->require_c_string(\"]\");\n+\t  expr = Expression::make_index(expr, start, end, cap, loc);\n+\t}\n       else\n \tbreak;\n     }"}, {"sha": "1595eb152266871db4596c3a1e7ec64f180592e5", "filename": "gcc/go/gofrontend/expressions.h", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e898243c23c82247ec01b32f551402ca52f32927/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e898243c23c82247ec01b32f551402ca52f32927/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.h?ref=e898243c23c82247ec01b32f551402ca52f32927", "patch": "@@ -3089,6 +3089,13 @@ class Array_index_expression : public Expression\n   Bexpression*\n   do_get_backend(Translate_context*);\n \n+  int\n+  do_inlining_cost() const\n+  { return this->end_ != NULL ? 2 : 1; }\n+\n+  void\n+  do_export(Export_function_body*) const;\n+\n   void\n   do_dump_expression(Ast_dump_context*) const;\n \n@@ -3161,6 +3168,13 @@ class String_index_expression : public Expression\n   Bexpression*\n   do_get_backend(Translate_context*);\n \n+  int\n+  do_inlining_cost() const\n+  { return this->end_ != NULL ? 2 : 1; }\n+\n+  void\n+  do_export(Export_function_body*) const;\n+\n   void\n   do_dump_expression(Ast_dump_context*) const;\n \n@@ -3247,6 +3261,13 @@ class Map_index_expression : public Expression\n   Bexpression*\n   do_get_backend(Translate_context*);\n \n+  int\n+  do_inlining_cost() const\n+  { return 5; }\n+\n+  void\n+  do_export(Export_function_body*) const;\n+\n   void\n   do_dump_expression(Ast_dump_context*) const;\n "}, {"sha": "42a76745925aa6034d86225cc0fdbf40f9696023", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e898243c23c82247ec01b32f551402ca52f32927/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e898243c23c82247ec01b32f551402ca52f32927/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=e898243c23c82247ec01b32f551402ca52f32927", "patch": "@@ -7282,6 +7282,7 @@ Function_declaration::import_function_body(Gogo* gogo, Named_object* no)\n     return;\n \n   gogo->lower_block(no, outer);\n+  outer->determine_types();\n \n   gogo->add_imported_inline_function(no);\n }"}, {"sha": "2d76f75a3de23c7d721b5b4ad0698f1a314bf224", "filename": "gcc/go/gofrontend/import.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e898243c23c82247ec01b32f551402ca52f32927/gcc%2Fgo%2Fgofrontend%2Fimport.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e898243c23c82247ec01b32f551402ca52f32927/gcc%2Fgo%2Fgofrontend%2Fimport.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fimport.cc?ref=e898243c23c82247ec01b32f551402ca52f32927", "patch": "@@ -1238,7 +1238,7 @@ Import::register_builtin_type(Gogo* gogo, const char* name, Builtin_code code)\n // characters that stop an identifier, without worrying about\n // characters that are permitted in an identifier.  That lets us skip\n // UTF-8 parsing.\n-static const char * const identifier_stop = \" \\n;,()[]\";\n+static const char * const identifier_stop = \" \\n;:,()[]\";\n \n // Read an identifier from the stream.\n "}, {"sha": "7f424fd7b7af1447f3a012ef813e5ebb0ea38ecc", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e898243c23c82247ec01b32f551402ca52f32927/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e898243c23c82247ec01b32f551402ca52f32927/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=e898243c23c82247ec01b32f551402ca52f32927", "patch": "@@ -465,8 +465,6 @@ Variable_declaration_statement::do_import(Import_function_body* ifb,\n     {\n       ifb->advance(3);\n       init = Expression::import_expression(ifb, loc);\n-      Type_context context(type, false);\n-      init->determine_type(&context);\n     }\n   Variable* var = new Variable(type, init, false, false, false, loc);\n   var->set_is_used();\n@@ -753,11 +751,6 @@ Temporary_statement::do_import(Import_function_body* ifb, Location loc)\n     {\n       ifb->advance(3);\n       init = Expression::import_expression(ifb, loc);\n-      if (type != NULL)\n-\t{\n-\t  Type_context context(type, false);\n-\t  init->determine_type(&context);\n-\t}\n     }\n   if (type == NULL && init == NULL)\n     {\n@@ -3730,8 +3723,6 @@ If_statement::do_import(Import_function_body* ifb, Location loc)\n   ifb->require_c_string(\"if \");\n \n   Expression* cond = Expression::import_expression(ifb, loc);\n-  Type_context context(Type::lookup_bool_type(), false);\n-  cond->determine_type(&context);\n   ifb->require_c_string(\" \");\n \n   if (!ifb->match_c_string(\"{\"))"}]}