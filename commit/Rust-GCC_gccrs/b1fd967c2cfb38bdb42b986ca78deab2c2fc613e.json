{"sha": "b1fd967c2cfb38bdb42b986ca78deab2c2fc613e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjFmZDk2N2MyY2ZiMzhiZGI0MmI5ODZjYTc4ZGVhYjJjMmZjNjEzZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-04-04T10:45:55Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-04-04T10:45:55Z"}, "message": "re PR target/80286 (AVX2 _mm_cvtsi128_si32 doesn't return a proper 32bits int)\n\n\tPR target/80286\n\t* config/i386/i386.c (ix86_expand_args_builtin): If op has scalar\n\tint mode, convert_modes it to mode as unsigned, otherwise use\n\tlowpart_subreg to mode rather than SImode.\n\t* config/i386/sse.md (<mask_codefor>ashr<mode>3<mask_name>,\n\tashr<mode>3, ashr<mode>3<mask_name>, <shift_insn><mode>3<mask_name>):\n\tUse DImode instead of SImode for the shift count operand.\n\t* config/i386/mmx.md (mmx_ashr<mode>3, mmx_<shift_insn><mode>3):\n\tLikewise.\ntestsuite/\n\t* gcc.target/i386/avx-pr80286.c: New test.\n\t* gcc.dg/pr80286.c: New test.\n\nFrom-SVN: r246676", "tree": {"sha": "51d717db4f65195f7d22e20b362c896df55b040d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51d717db4f65195f7d22e20b362c896df55b040d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1fd967c2cfb38bdb42b986ca78deab2c2fc613e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1fd967c2cfb38bdb42b986ca78deab2c2fc613e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1fd967c2cfb38bdb42b986ca78deab2c2fc613e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1fd967c2cfb38bdb42b986ca78deab2c2fc613e/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c4060df4b1ae72421aa0da0fbb0acdc7af3b7c68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4060df4b1ae72421aa0da0fbb0acdc7af3b7c68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4060df4b1ae72421aa0da0fbb0acdc7af3b7c68"}], "stats": {"total": 94, "additions": 84, "deletions": 10}, "files": [{"sha": "66d6cb719b30ba82975a2f085a7a12e93fb2d4c0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1fd967c2cfb38bdb42b986ca78deab2c2fc613e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1fd967c2cfb38bdb42b986ca78deab2c2fc613e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b1fd967c2cfb38bdb42b986ca78deab2c2fc613e", "patch": "@@ -1,3 +1,15 @@\n+2017-04-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/80286\n+\t* config/i386/i386.c (ix86_expand_args_builtin): If op has scalar\n+\tint mode, convert_modes it to mode as unsigned, otherwise use\n+\tlowpart_subreg to mode rather than SImode.\n+\t* config/i386/sse.md (<mask_codefor>ashr<mode>3<mask_name>,\n+\tashr<mode>3, ashr<mode>3<mask_name>, <shift_insn><mode>3<mask_name>):\n+\tUse DImode instead of SImode for the shift count operand.\n+\t* config/i386/mmx.md (mmx_ashr<mode>3, mmx_<shift_insn><mode>3):\n+\tLikewise.\n+\n 2017-04-04  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/80281"}, {"sha": "118ab50b6bb29afdf9a220d0b78d6cb2b5d2ede4", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1fd967c2cfb38bdb42b986ca78deab2c2fc613e/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1fd967c2cfb38bdb42b986ca78deab2c2fc613e/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=b1fd967c2cfb38bdb42b986ca78deab2c2fc613e", "patch": "@@ -35582,10 +35582,17 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n \t{\n \t  /* SIMD shift insns take either an 8-bit immediate or\n \t     register as count.  But builtin functions take int as\n-\t     count.  If count doesn't match, we put it in register.  */\n+\t     count.  If count doesn't match, we put it in register.\n+\t     The instructions are using 64-bit count, if op is just\n+\t     32-bit, zero-extend it, as negative shift counts\n+\t     are undefined behavior and zero-extension is more\n+\t     efficient.  */\n \t  if (!match)\n \t    {\n-\t      op = lowpart_subreg (SImode, op, GET_MODE (op));\n+\t      if (SCALAR_INT_MODE_P (GET_MODE (op)))\n+\t\top = convert_modes (mode, GET_MODE (op), op, 1);\n+\t      else\n+\t\top = lowpart_subreg (mode, op, GET_MODE (op));\n \t      if (!insn_p->operand[i + 1].predicate (op, mode))\n \t\top = copy_to_reg (op);\n \t    }"}, {"sha": "68972bb45c90506ec0d208ef6b414e257ba51d2f", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1fd967c2cfb38bdb42b986ca78deab2c2fc613e/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1fd967c2cfb38bdb42b986ca78deab2c2fc613e/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=b1fd967c2cfb38bdb42b986ca78deab2c2fc613e", "patch": "@@ -930,7 +930,7 @@\n   [(set (match_operand:MMXMODE24 0 \"register_operand\" \"=y\")\n         (ashiftrt:MMXMODE24\n \t  (match_operand:MMXMODE24 1 \"register_operand\" \"0\")\n-\t  (match_operand:SI 2 \"nonmemory_operand\" \"yN\")))]\n+\t  (match_operand:DI 2 \"nonmemory_operand\" \"yN\")))]\n   \"TARGET_MMX\"\n   \"psra<mmxvecsize>\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"mmxshft\")\n@@ -944,7 +944,7 @@\n   [(set (match_operand:MMXMODE248 0 \"register_operand\" \"=y\")\n         (any_lshift:MMXMODE248\n \t  (match_operand:MMXMODE248 1 \"register_operand\" \"0\")\n-\t  (match_operand:SI 2 \"nonmemory_operand\" \"yN\")))]\n+\t  (match_operand:DI 2 \"nonmemory_operand\" \"yN\")))]\n   \"TARGET_MMX\"\n   \"p<vshift><mmxvecsize>\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"mmxshft\")"}, {"sha": "15ced880504b5fce94e6d8b17eec8b0e68332211", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1fd967c2cfb38bdb42b986ca78deab2c2fc613e/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1fd967c2cfb38bdb42b986ca78deab2c2fc613e/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=b1fd967c2cfb38bdb42b986ca78deab2c2fc613e", "patch": "@@ -10620,7 +10620,7 @@\n   [(set (match_operand:VI24_AVX512BW_1 0 \"register_operand\" \"=v,v\")\n \t(ashiftrt:VI24_AVX512BW_1\n \t  (match_operand:VI24_AVX512BW_1 1 \"nonimmediate_operand\" \"v,vm\")\n-\t  (match_operand:SI 2 \"nonmemory_operand\" \"v,N\")))]\n+\t  (match_operand:DI 2 \"nonmemory_operand\" \"v,N\")))]\n   \"TARGET_AVX512VL\"\n   \"vpsra<ssemodesuffix>\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n   [(set_attr \"type\" \"sseishft\")\n@@ -10634,7 +10634,7 @@\n   [(set (match_operand:VI24_AVX2 0 \"register_operand\" \"=x,x\")\n \t(ashiftrt:VI24_AVX2\n \t  (match_operand:VI24_AVX2 1 \"register_operand\" \"0,x\")\n-\t  (match_operand:SI 2 \"nonmemory_operand\" \"xN,xN\")))]\n+\t  (match_operand:DI 2 \"nonmemory_operand\" \"xN,xN\")))]\n   \"TARGET_SSE2\"\n   \"@\n    psra<ssemodesuffix>\\t{%2, %0|%0, %2}\n@@ -10667,7 +10667,7 @@\n   [(set (match_operand:VI248_AVX512BW_AVX512VL 0 \"register_operand\" \"=v,v\")\n \t(ashiftrt:VI248_AVX512BW_AVX512VL\n \t  (match_operand:VI248_AVX512BW_AVX512VL 1 \"nonimmediate_operand\" \"v,vm\")\n-\t  (match_operand:SI 2 \"nonmemory_operand\" \"v,N\")))]\n+\t  (match_operand:DI 2 \"nonmemory_operand\" \"v,N\")))]\n   \"TARGET_AVX512F\"\n   \"vpsra<ssemodesuffix>\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n   [(set_attr \"type\" \"sseishft\")\n@@ -10681,7 +10681,7 @@\n   [(set (match_operand:VI2_AVX2_AVX512BW 0 \"register_operand\" \"=x,v\")\n \t(any_lshift:VI2_AVX2_AVX512BW\n \t  (match_operand:VI2_AVX2_AVX512BW 1 \"register_operand\" \"0,v\")\n-\t  (match_operand:SI 2 \"nonmemory_operand\" \"xN,vN\")))]\n+\t  (match_operand:DI 2 \"nonmemory_operand\" \"xN,vN\")))]\n   \"TARGET_SSE2 && <mask_mode512bit_condition> && <mask_avx512bw_condition>\"\n   \"@\n    p<vshift><ssemodesuffix>\\t{%2, %0|%0, %2}\n@@ -10700,7 +10700,7 @@\n   [(set (match_operand:VI48_AVX2 0 \"register_operand\" \"=x,x,v\")\n \t(any_lshift:VI48_AVX2\n \t  (match_operand:VI48_AVX2 1 \"register_operand\" \"0,x,v\")\n-\t  (match_operand:SI 2 \"nonmemory_operand\" \"xN,xN,vN\")))]\n+\t  (match_operand:DI 2 \"nonmemory_operand\" \"xN,xN,vN\")))]\n   \"TARGET_SSE2 && <mask_mode512bit_condition>\"\n   \"@\n    p<vshift><ssemodesuffix>\\t{%2, %0|%0, %2}\n@@ -10720,7 +10720,7 @@\n   [(set (match_operand:VI48_512 0 \"register_operand\" \"=v,v\")\n \t(any_lshift:VI48_512\n \t  (match_operand:VI48_512 1 \"nonimmediate_operand\" \"v,m\")\n-\t  (match_operand:SI 2 \"nonmemory_operand\" \"vN,N\")))]\n+\t  (match_operand:DI 2 \"nonmemory_operand\" \"vN,N\")))]\n   \"TARGET_AVX512F && <mask_mode512bit_condition>\"\n   \"vp<vshift><ssemodesuffix>\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n   [(set_attr \"isa\" \"avx512f\")"}, {"sha": "e14af29e2b94fb40c3dcbba19d54a9c680c814d6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1fd967c2cfb38bdb42b986ca78deab2c2fc613e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1fd967c2cfb38bdb42b986ca78deab2c2fc613e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b1fd967c2cfb38bdb42b986ca78deab2c2fc613e", "patch": "@@ -1,3 +1,9 @@\n+2017-04-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/80286\n+\t* gcc.target/i386/avx-pr80286.c: New test.\n+\t* gcc.dg/pr80286.c: New test.\n+\n 2017-04-04  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/80281"}, {"sha": "82f35b5009985e171d8559379a4ea4e84ea8dfca", "filename": "gcc/testsuite/gcc.dg/pr80286.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1fd967c2cfb38bdb42b986ca78deab2c2fc613e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr80286.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1fd967c2cfb38bdb42b986ca78deab2c2fc613e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr80286.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr80286.c?ref=b1fd967c2cfb38bdb42b986ca78deab2c2fc613e", "patch": "@@ -0,0 +1,23 @@\n+/* PR target/80286 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -Wno-psabi\" } */\n+\n+typedef int V __attribute__((vector_size (4 * sizeof (int))));\n+\n+__attribute__((noinline, noclone)) V\n+foo (V x, V y)\n+{\n+  return x << y[0];\n+}\n+\n+int\n+main ()\n+{\n+  V x = { 1, 2, 3, 4 };\n+  V y = { 5, 6, 7, 8 };\n+  V z = foo (x, y);\n+  V e = { 1 << 5, 2 << 5, 3 << 5, 4 << 5 };\n+  if (__builtin_memcmp (&z, &e, sizeof (V)))\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "2e1881d218f5d288a89303ed785d67fd3649170b", "filename": "gcc/testsuite/gcc.target/i386/avx-pr80286.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1fd967c2cfb38bdb42b986ca78deab2c2fc613e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-pr80286.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1fd967c2cfb38bdb42b986ca78deab2c2fc613e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-pr80286.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-pr80286.c?ref=b1fd967c2cfb38bdb42b986ca78deab2c2fc613e", "patch": "@@ -0,0 +1,26 @@\n+/* PR target/80286 */\n+/* { dg-do run { target avx } } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#include \"avx-check.h\"\n+#include <immintrin.h>\n+\n+__m256i m;\n+\n+__attribute__((noinline, noclone)) __m128i\n+foo (__m128i x)\n+{\n+  int s = _mm_cvtsi128_si32 (_mm256_castsi256_si128 (m));\n+  return _mm_srli_epi16 (x, s);\n+}\n+\n+static void\n+avx_test (void)\n+{\n+  __m128i a = (__m128i) (__v8hi) { 1 << 7, 2 << 8, 3 << 9, 4 << 10, 5 << 11, 6 << 12, 7 << 13, 8 << 12 };\n+  m = (__m256i) (__v8si) { 7, 8, 9, 10, 11, 12, 13, 14 };\n+  __m128i c = foo (a);\n+  __m128i b = (__m128i) (__v8hi) { 1, 2 << 1, 3 << 2, 4 << 3, 5 << 4, 6 << 5, 7 << 6, 8 << 5 };\n+  if (__builtin_memcmp (&c, &b, sizeof (__m128i)))\n+    __builtin_abort ();\n+}"}]}