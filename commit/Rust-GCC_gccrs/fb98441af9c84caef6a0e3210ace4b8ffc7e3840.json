{"sha": "fb98441af9c84caef6a0e3210ace4b8ffc7e3840", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmI5ODQ0MWFmOWM4NGNhZWY2YTBlMzIxMGFjZTRiOGZmYzdlMzg0MA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-10-13T09:41:39Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-10-13T09:41:39Z"}, "message": "Make more use of GET_MODE_UNIT_SIZE\n\nThis patch uses GET_MODE_UNIT_SIZE instead of GET_MODE_SIZE in\ncases where, for compound modes, the mode of the scalar elements\nis what matters.  E.g. the choice between truncation and extension\nis really based on the modes of the consistuent scalars rather\nthan the mode as a whole.\n\nNone of the existing code was wrong.  The patch simply makes\nthings easier when converting to variable-sized modes.\n\n2017-10-13  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* optabs.c (add_equal_note): Use GET_MODE_UNIT_SIZE.\n\t(widened_mode): Likewise.\n\t(expand_unop): Likewise.\n\t* ree.c (transform_ifelse): Likewise.\n\t(merge_def_and_ext): Likewise.\n\t(combine_reaching_defs): Likewise.\n\t* simplify-rtx.c (simplify_unary_operation_1): Likewise.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r253715", "tree": {"sha": "34cd9d3afa018eb2d3ab1f7ee4b142e66c6cda7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34cd9d3afa018eb2d3ab1f7ee4b142e66c6cda7f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb98441af9c84caef6a0e3210ace4b8ffc7e3840", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb98441af9c84caef6a0e3210ace4b8ffc7e3840", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb98441af9c84caef6a0e3210ace4b8ffc7e3840", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb98441af9c84caef6a0e3210ace4b8ffc7e3840/comments", "author": null, "committer": null, "parents": [{"sha": "90f2b7e220df8ce298b2cd8f853a02aaecdbff0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90f2b7e220df8ce298b2cd8f853a02aaecdbff0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90f2b7e220df8ce298b2cd8f853a02aaecdbff0b"}], "stats": {"total": 41, "additions": 27, "deletions": 14}, "files": [{"sha": "8add08c4b23aa83329008f3dfe64fefd8150cd3e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb98441af9c84caef6a0e3210ace4b8ffc7e3840/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb98441af9c84caef6a0e3210ace4b8ffc7e3840/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fb98441af9c84caef6a0e3210ace4b8ffc7e3840", "patch": "@@ -1,3 +1,15 @@\n+2017-10-13  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* optabs.c (add_equal_note): Use GET_MODE_UNIT_SIZE.\n+\t(widened_mode): Likewise.\n+\t(expand_unop): Likewise.\n+\t* ree.c (transform_ifelse): Likewise.\n+\t(merge_def_and_ext): Likewise.\n+\t(combine_reaching_defs): Likewise.\n+\t* simplify-rtx.c (simplify_unary_operation_1): Likewise.\n+\n 2017-10-13  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "75e320022cb681767298e3970053d17a4bc49a74", "filename": "gcc/optabs.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb98441af9c84caef6a0e3210ace4b8ffc7e3840/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb98441af9c84caef6a0e3210ace4b8ffc7e3840/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=fb98441af9c84caef6a0e3210ace4b8ffc7e3840", "patch": "@@ -138,8 +138,8 @@ add_equal_note (rtx_insn *insns, rtx target, enum rtx_code code, rtx op0, rtx op\n \tif (GET_MODE (op0) != VOIDmode && GET_MODE (target) != GET_MODE (op0))\n \t  {\n \t    note = gen_rtx_fmt_e (code, GET_MODE (op0), copy_rtx (op0));\n-\t    if (GET_MODE_SIZE (GET_MODE (op0))\n-\t\t> GET_MODE_SIZE (GET_MODE (target)))\n+\t    if (GET_MODE_UNIT_SIZE (GET_MODE (op0))\n+\t\t> GET_MODE_UNIT_SIZE (GET_MODE (target)))\n \t      note = simplify_gen_unary (TRUNCATE, GET_MODE (target),\n \t\t\t\t\t note, GET_MODE (op0));\n \t    else\n@@ -173,12 +173,12 @@ widened_mode (machine_mode to_mode, rtx op0, rtx op1)\n \n   if (m0 == VOIDmode && m1 == VOIDmode)\n     return to_mode;\n-  else if (m0 == VOIDmode || GET_MODE_SIZE (m0) < GET_MODE_SIZE (m1))\n+  else if (m0 == VOIDmode || GET_MODE_UNIT_SIZE (m0) < GET_MODE_UNIT_SIZE (m1))\n     result = m1;\n   else\n     result = m0;\n \n-  if (GET_MODE_SIZE (result) > GET_MODE_SIZE (to_mode))\n+  if (GET_MODE_UNIT_SIZE (result) > GET_MODE_UNIT_SIZE (to_mode))\n     return to_mode;\n \n   return result;\n@@ -2977,9 +2977,9 @@ expand_unop (machine_mode mode, optab unoptab, rtx op0, rtx target,\n       else\n \t{\n \t  eq_value = gen_rtx_fmt_e (optab_to_code (unoptab), mode, op0);\n-\t  if (GET_MODE_SIZE (outmode) < GET_MODE_SIZE (mode))\n+\t  if (GET_MODE_UNIT_SIZE (outmode) < GET_MODE_UNIT_SIZE (mode))\n \t    eq_value = simplify_gen_unary (TRUNCATE, outmode, eq_value, mode);\n-\t  else if (GET_MODE_SIZE (outmode) > GET_MODE_SIZE (mode))\n+\t  else if (GET_MODE_UNIT_SIZE (outmode) > GET_MODE_UNIT_SIZE (mode))\n \t    eq_value = simplify_gen_unary (ZERO_EXTEND,\n \t\t\t\t\t   outmode, eq_value, mode);\n \t}"}, {"sha": "8915cbe0d6fdbfcb99a288bad69fea52f6aedcda", "filename": "gcc/ree.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb98441af9c84caef6a0e3210ace4b8ffc7e3840/gcc%2Free.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb98441af9c84caef6a0e3210ace4b8ffc7e3840/gcc%2Free.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Free.c?ref=fb98441af9c84caef6a0e3210ace4b8ffc7e3840", "patch": "@@ -428,7 +428,8 @@ transform_ifelse (ext_cand *cand, rtx_insn *def_insn)\n   srcreg2 = XEXP (SET_SRC (set_insn), 2);\n   /* If the conditional move already has the right or wider mode,\n      there is nothing to do.  */\n-  if (GET_MODE_SIZE (GET_MODE (dstreg)) >= GET_MODE_SIZE (cand->mode))\n+  if (GET_MODE_UNIT_SIZE (GET_MODE (dstreg))\n+      >= GET_MODE_UNIT_SIZE (cand->mode))\n     return true;\n \n   map_srcreg = gen_rtx_REG (cand->mode, REGNO (srcreg));\n@@ -718,8 +719,8 @@ merge_def_and_ext (ext_cand *cand, rtx_insn *def_insn, ext_state *state)\n \t      && state->modified[INSN_UID (def_insn)].mode\n \t\t == ext_src_mode)))\n     {\n-      if (GET_MODE_SIZE (GET_MODE (SET_DEST (*sub_rtx)))\n-\t  >= GET_MODE_SIZE (cand->mode))\n+      if (GET_MODE_UNIT_SIZE (GET_MODE (SET_DEST (*sub_rtx)))\n+\t  >= GET_MODE_UNIT_SIZE (cand->mode))\n \treturn true;\n       /* If def_insn is already scheduled to be deleted, don't attempt\n \t to modify it.  */\n@@ -926,7 +927,8 @@ combine_reaching_defs (ext_cand *cand, const_rtx set_pat, ext_state *state)\n \t  || (set = single_set (cand->insn)) == NULL_RTX)\n \treturn false;\n       mode = GET_MODE (SET_DEST (set));\n-      gcc_assert (GET_MODE_SIZE (mode) >= GET_MODE_SIZE (cand->mode));\n+      gcc_assert (GET_MODE_UNIT_SIZE (mode)\n+\t\t  >= GET_MODE_UNIT_SIZE (cand->mode));\n       cand->mode = mode;\n     }\n "}, {"sha": "c4d6ce7586cef4ffc712e6ad3f2e5c13fb00b9de", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb98441af9c84caef6a0e3210ace4b8ffc7e3840/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb98441af9c84caef6a0e3210ace4b8ffc7e3840/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=fb98441af9c84caef6a0e3210ace4b8ffc7e3840", "patch": "@@ -1272,10 +1272,9 @@ simplify_unary_operation_1 (enum rtx_code code, machine_mode mode, rtx op)\n       if ((GET_CODE (op) == FLOAT_TRUNCATE\n \t   && flag_unsafe_math_optimizations)\n \t  || GET_CODE (op) == FLOAT_EXTEND)\n-\treturn simplify_gen_unary (GET_MODE_SIZE (GET_MODE (XEXP (op,\n-\t\t\t\t\t\t\t    0)))\n-\t\t\t\t   > GET_MODE_SIZE (mode)\n-\t\t\t\t   ? FLOAT_TRUNCATE : FLOAT_EXTEND,\n+\treturn simplify_gen_unary (GET_MODE_UNIT_SIZE (GET_MODE (XEXP (op, 0)))\n+\t  \t\t\t   > GET_MODE_UNIT_SIZE (mode)\n+\t  \t\t\t   ? FLOAT_TRUNCATE : FLOAT_EXTEND,\n \t\t\t\t   mode,\n \t\t\t\t   XEXP (op, 0), mode);\n "}]}