{"sha": "01bb8ae21712d3bab740fdbaf509499bec801594", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDFiYjhhZTIxNzEyZDNiYWI3NDBmZGJhZjUwOTQ5OWJlYzgwMTU5NA==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2011-08-25T14:29:47Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2011-08-25T14:29:47Z"}, "message": "simple.cc: New file.\n\n\t* testsuite/libstdc++-prettyprinters/simple.cc: New file.\n\t* testsuite/lib/gdb-test.exp: New file.\n\t* testsuite/libstdc++-prettyprinters/prettyprinters.exp: New\n\tfile.\n\nFrom-SVN: r178066", "tree": {"sha": "4a55923772db7350db76a9d148666d82c1030b2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a55923772db7350db76a9d148666d82c1030b2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01bb8ae21712d3bab740fdbaf509499bec801594", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01bb8ae21712d3bab740fdbaf509499bec801594", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01bb8ae21712d3bab740fdbaf509499bec801594", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01bb8ae21712d3bab740fdbaf509499bec801594/comments", "author": null, "committer": null, "parents": [{"sha": "f24acbefa1bba0669fc02ec4df0e27c97d578e82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f24acbefa1bba0669fc02ec4df0e27c97d578e82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f24acbefa1bba0669fc02ec4df0e27c97d578e82"}], "stats": {"total": 343, "additions": 343, "deletions": 0}, "files": [{"sha": "d0bd7d993d3fcd480d5c779d841f1d92123f684c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01bb8ae21712d3bab740fdbaf509499bec801594/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01bb8ae21712d3bab740fdbaf509499bec801594/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=01bb8ae21712d3bab740fdbaf509499bec801594", "patch": "@@ -1,3 +1,10 @@\n+2011-08-25  Tom Tromey  <tromey@redhat.com>\n+\n+\t* testsuite/libstdc++-prettyprinters/simple.cc: New file.\n+\t* testsuite/lib/gdb-test.exp: New file.\n+\t* testsuite/libstdc++-prettyprinters/prettyprinters.exp: New\n+\tfile.\n+\n 2011-08-18  Marc Glisse  <marc.glisse@normalesup.org>\n \n \t* include/tr1/cmath: Extend/update comment."}, {"sha": "032b66c7d2a97e6fc919eb81cfb940eda50533db", "filename": "libstdc++-v3/testsuite/lib/gdb-test.exp", "status": "added", "additions": 198, "deletions": 0, "changes": 198, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01bb8ae21712d3bab740fdbaf509499bec801594/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fgdb-test.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01bb8ae21712d3bab740fdbaf509499bec801594/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fgdb-test.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fgdb-test.exp?ref=01bb8ae21712d3bab740fdbaf509499bec801594", "patch": "@@ -0,0 +1,198 @@\n+#   Copyright (C) 2009, 2011 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+global gdb_tests\n+set gdb_tests {}\n+\n+# Scan a file for markers and fill in the gdb_marker array for that\n+# file.  Any error in this script is simply thrown; errors here are\n+# programming errors in the test suite itself and should not be\n+# caught.\n+proc scan_gdb_markers {filename} {\n+    global gdb_markers\n+\n+    if {[info exists gdb_markers($filename,-)]} {\n+\treturn\n+    }\n+\n+    set fd [open $filename]\n+    set lineno 1\n+    while {! [eof $fd]} {\n+\tset line [gets $fd]\n+\tif {[regexp -- \"Mark (\\[a-zA-Z0-9\\]+)\" $line ignore marker]} {\n+\t    set gdb_markers($filename,$marker) $lineno\n+\t}\n+\tincr lineno\n+    }\n+    close $fd\n+\n+    set gdb_markers($filename,-) {}\n+}\n+\n+# Find a marker in a source file, and return the marker's line number.\n+proc get_line_number {filename marker} {\n+    global gdb_markers\n+\n+    scan_gdb_markers $filename\n+    return $gdb_markers($filename,$marker)\n+}\n+\n+# Make note of a gdb test.  A test consists of a variable name and an\n+# expected result.\n+proc note-test {var result} {\n+    global gdb_tests\n+\n+    lappend gdb_tests $var $result\n+}\n+\n+# Utility for testing variable values using gdb, invoked via dg-final.\n+# Tests all tests indicated by note-test.\n+#\n+# Argument 0 is the marker on which to put a breakpoint\n+# Argument 2 handles expected failures and the like\n+proc gdb-test { marker {selector {}} } {\n+    if { ![isnative] || [is_remote target] } { return }\n+\n+    if {[string length $selector] > 0} {\n+\tswitch [dg-process-target $selector] {\n+\t    \"S\" { }\n+\t    \"N\" { return }\n+\t    \"F\" { setup_xfail \"*-*-*\" }\n+\t    \"P\" { }\n+\t}\n+    }\n+\n+    # This assumes that we are three frames down from dg-test, and that\n+    # it still stores the filename of the testcase in a local variable \"name\".\n+    # A cleaner solution would require a new DejaGnu release.\n+    upvar 2 name testcase\n+    upvar 2 prog prog\n+\n+    set line [get_line_number $prog $marker]\n+\n+    set gdb_name $::env(GUALITY_GDB_NAME)\n+    set testname \"$testcase\"\n+    set output_file \"[file rootname [file tail $prog]].exe\"\n+    set cmd_file \"[file rootname [file tail $prog]].gdb\"\n+\n+    global srcdir\n+    set pycode [file join $srcdir .. python libstdcxx v6 printers.py]\n+\n+    global gdb_tests\n+\n+    set fd [open $cmd_file \"w\"]\n+    puts $fd \"source $pycode\"\n+    puts $fd \"python register_libstdcxx_printers(None)\"\n+    puts $fd \"break $line\"\n+    puts $fd \"run\"\n+\n+    set count 0\n+    foreach {var result} $gdb_tests {\n+\tputs $fd \"print $var\"\n+\tincr count\n+\tset gdb_var($count) $var\n+\tset gdb_expected($count) $result\n+    }\n+    set gdb_tests {}\n+\n+    puts $fd \"quit\"\n+    close $fd\n+\n+    send_log \"Spawning: $gdb_name -nx -nw -quiet -batch -x $cmd_file ./$output_file\\n\"\n+    set res [remote_spawn target \"$gdb_name -nx -nw -quiet -batch -x $cmd_file ./$output_file\"]\n+    if { $res < 0 || $res == \"\" } {\n+\tunsupported \"$testname\"\n+\treturn\n+    }\n+\n+    remote_expect target [timeout_value] {\n+\t-re {^\\$([0-9]+) = ([^\\n\\r]*)[\\n\\r]+} {\n+\t    set num $expect_out(1,string)\n+\t    set first $expect_out(2,string)\n+\t    if { ![string compare $first $gdb_expected($num)] } {\n+\t\tpass \"$testname print $gdb_var($num)\"\n+\t    } else {\n+\t\tfail \"$testname print $gdb_var($num)\"\n+\t\tverbose \"     got =>$first<=\"\n+\t\tverbose \"expected =>$gdb_expected($num)<=\"\n+\t    }\n+\n+\t    if {$num == $count} {\n+\t\tremote_close target\n+\t\treturn\n+\t    } else {\n+\t\texp_continue\n+\t    }\n+\t}\n+\n+\t-re {Python scripting is not supported in this copy of GDB.[\\n\\r]+} {\n+\t    unsupported \"$testname\"\n+\t    remote_close target\n+\t    return\n+\t}\n+\n+\t-re {^[^$][^\\n\\r]*[\\n\\r]+} {\n+\t    verbose \"skipping: $expect_out(buffer)\"\n+\t    exp_continue\n+\t}\n+\n+\ttimeout {\n+\t    unsupported \"$testname\"\n+\t    remote_close target\n+\t    return\n+\t}\n+    }\n+\n+    remote_close target\n+    unsupported \"$testname\"\n+    return\n+}\n+\n+# Check for a new-enough version of gdb.  The pretty-printer tests\n+# require gdb 7.3, but we don't want to test versions, so instead we\n+# check for the python \"lookup_global_symbol\" method, which is in 7.3\n+# but not earlier versions.\n+# Return 1 if the version is ok, 0 otherwise.\n+proc gdb_version_check {} {\n+    global gdb_version\n+\n+    set gdb_name $::env(GUALITY_GDB_NAME)\n+    set cmd \"$gdb_name -nw -nx -quiet -batch -ex \\\"python print gdb.lookup_global_symbol\\\"\"\n+    send_log \"Spawning: $cmd\\n\"\n+    set res [remote_spawn target \"$cmd\"]\n+    if { $res < 0 || $res == \"\" } {\n+\treturn 0\n+    }\n+\n+    remote_expect target [timeout_value] {\n+\t-re \"<built-in function lookup_global_symbol>\" {\n+\t    return 1\n+\t}\n+\n+\t-re {^[^\\n\\r]*[\\n\\r]+} {\n+\t    verbose \"skipping: $expect_out(buffer)\"\n+\t    exp_continue\n+\t}\n+\n+\ttimeout {\n+\t    remote_close target\n+\t    return 0\n+\t}\n+    }\n+\n+    remote_close target\n+    return 0\n+}"}, {"sha": "4098dab70f76cfd709ed7faa594309d52242018c", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/prettyprinters.exp", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01bb8ae21712d3bab740fdbaf509499bec801594/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fprettyprinters.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01bb8ae21712d3bab740fdbaf509499bec801594/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fprettyprinters.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fprettyprinters.exp?ref=01bb8ae21712d3bab740fdbaf509499bec801594", "patch": "@@ -0,0 +1,51 @@\n+#   Copyright (C) 2011 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with this program; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+load_lib gdb-test.exp\n+\n+dg-init\n+v3-build_support\n+\n+global GDB\n+if ![info exists ::env(GUALITY_GDB_NAME)] {\n+    if [info exists GDB] {\n+\tset guality_gdb_name \"$GDB\"\n+    } else {\n+\tset guality_gdb_name \"[transform gdb]\"\n+    }\n+    setenv GUALITY_GDB_NAME \"$guality_gdb_name\"\n+}\n+\n+if {! [gdb_version_check]} {\n+    unsupported \"prettyprinters.exp\"\n+    return\n+}\n+\n+# This can be used to keep the .exe around.  dg-test has an option for\n+# this but there is no way to pass it through dg-runtest.\n+global dg-interpreter-batch-mode\n+set dg-interpreter-batch-mode 1\n+\n+global DEFAULT_CXXFLAGS\n+global PCH_CXXFLAGS\n+dg-runtest [lsort [glob $srcdir/$subdir/*.cc]] \\\n+  \"\" \"$DEFAULT_CXXFLAGS $PCH_CXXFLAGS\"\n+\n+if [info exists guality_gdb_name] {\n+    unsetenv GUALITY_GDB_NAME\n+}\n+\n+dg-finish"}, {"sha": "2cccb622355a43a4805e795ef80214546bf7dae9", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/simple.cc", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01bb8ae21712d3bab740fdbaf509499bec801594/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fsimple.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01bb8ae21712d3bab740fdbaf509499bec801594/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fsimple.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fsimple.cc?ref=01bb8ae21712d3bab740fdbaf509499bec801594", "patch": "@@ -0,0 +1,87 @@\n+// { dg-do run }\n+// { dg-options \"-g\" }\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <string>\n+#include <deque>\n+#include <bitset>\n+#include <iostream>\n+#include <list>\n+#include <map>\n+\n+template<class T>\n+void\n+placeholder(const T &s)\n+{\n+  std::cout << s;\n+}\n+\n+template<class T, class S>\n+void\n+placeholder(const std::pair<T,S> &s)\n+{\n+  std::cout << s.first;\n+}\n+\n+template<class T>\n+void\n+use(const T &container)\n+{\n+  for (typename T::const_iterator i = container.begin();\n+       i != container.end();\n+       ++i)\n+    placeholder(*i);\n+}\n+\n+int\n+main()\n+{\n+  std::string str = \"zardoz\";\n+// { dg-final { note-test str \"\\\"zardoz\\\"\" } }\n+\n+  std::bitset<10> bs;\n+  bs[0] = 1;\n+  bs[5] = 1;\n+  bs[7] = 1;\n+// { dg-final { note-test bs {std::bitset = {[0] = 1, [5] = 1, [7] = 1}} } }\n+\n+  std::deque<std::string> deq;\n+  deq.push_back(\"one\");\n+  deq.push_back(\"two\");\n+// { dg-final { note-test deq {std::deque with 2 elements = {\"one\", \"two\"}} } }\n+\n+  std::list<std::string> lst;\n+  lst.push_back(\"one\");\n+  lst.push_back(\"two\");\n+// { dg-final { note-test lst {std::list = {[0] = \"one\", [1] = \"two\"}} } }\n+\n+  std::map<std::string, int> mp;\n+  mp[\"zardoz\"] = 23;\n+// { dg-final { note-test mp {std::map with 1 elements = {[\"zardoz\"] = 23}} } }\n+\n+  placeholder(str); // Mark SPOT\n+  std::cout << bs;\n+  use(deq);\n+  use(lst);\n+  use(mp);\n+\n+  return 0;\n+}\n+\n+// { dg-final { gdb-test SPOT } }"}]}