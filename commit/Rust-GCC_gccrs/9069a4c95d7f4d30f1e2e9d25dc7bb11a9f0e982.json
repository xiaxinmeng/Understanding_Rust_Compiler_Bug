{"sha": "9069a4c95d7f4d30f1e2e9d25dc7bb11a9f0e982", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTA2OWE0Yzk1ZDdmNGQzMGYxZTJlOWQyNWRjN2JiMTFhOWYwZTk4Mg==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2019-01-04T22:48:45Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2019-01-04T22:48:45Z"}, "message": "PR c/88363 - alloc_align attribute doesn't accept enumerated arguments\n\ngcc/c-family/ChangeLog:\n\n\tPR c/88363\n\t* c-attribs.c (positional_argument): Also accept enumerated types.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c/88363\n\t* c-c++-common/attributes-4.c: New test.\n\ngcc/ChangeLog:\n\n\tPR c/88363\n\t* doc/extend.texi (attribute alloc_align, alloc_size): Update.\n\nFrom-SVN: r267583", "tree": {"sha": "7f1228fc1a3e2747d8fa02ee659b66eb9665968e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f1228fc1a3e2747d8fa02ee659b66eb9665968e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9069a4c95d7f4d30f1e2e9d25dc7bb11a9f0e982", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9069a4c95d7f4d30f1e2e9d25dc7bb11a9f0e982", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9069a4c95d7f4d30f1e2e9d25dc7bb11a9f0e982", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9069a4c95d7f4d30f1e2e9d25dc7bb11a9f0e982/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6908c1dc6fc8d377ba80f12b7889e7872505cbb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6908c1dc6fc8d377ba80f12b7889e7872505cbb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6908c1dc6fc8d377ba80f12b7889e7872505cbb0"}], "stats": {"total": 86, "additions": 78, "deletions": 8}, "files": [{"sha": "8a8dd4a0b1b8e4a410b9145e967c122703d6b90b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9069a4c95d7f4d30f1e2e9d25dc7bb11a9f0e982/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9069a4c95d7f4d30f1e2e9d25dc7bb11a9f0e982/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9069a4c95d7f4d30f1e2e9d25dc7bb11a9f0e982", "patch": "@@ -1,3 +1,8 @@\n+2019-01-04  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/88363\n+\t* doc/extend.texi (attribute alloc_align, alloc_size): Update.\n+\n 2019-01-04  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gdbinit.in: Turn off pagination for the skip commands, restore"}, {"sha": "55e6ee869b1f88906e1f9c622ce3c4829dd1daec", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9069a4c95d7f4d30f1e2e9d25dc7bb11a9f0e982/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9069a4c95d7f4d30f1e2e9d25dc7bb11a9f0e982/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=9069a4c95d7f4d30f1e2e9d25dc7bb11a9f0e982", "patch": "@@ -1,3 +1,8 @@\n+2019-01-04  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/88363\n+\t* c-attribs.c (positional_argument): Also accept enumerated types.\n+\n 2019-01-01  Jakub Jelinek  <jakub@redhat.com>\n \n \tUpdate copyright years."}, {"sha": "03978dd1d0322adef8baacecfd743f72320fd587", "filename": "gcc/c-family/c-attribs.c", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9069a4c95d7f4d30f1e2e9d25dc7bb11a9f0e982/gcc%2Fc-family%2Fc-attribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9069a4c95d7f4d30f1e2e9d25dc7bb11a9f0e982/gcc%2Fc-family%2Fc-attribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-attribs.c?ref=9069a4c95d7f4d30f1e2e9d25dc7bb11a9f0e982", "patch": "@@ -498,10 +498,11 @@ attribute_takes_identifier_p (const_tree attr_id)\n \n /* Verify that argument value POS at position ARGNO to attribute NAME\n    applied to function TYPE refers to a function parameter at position\n-   POS and the expected type CODE.  If so, return POS after default\n-   conversions, if any.  Otherwise, issue appropriate warnings and\n-   return null.  A non-zero 1-based ARGNO should be passed ib by\n-   callers only for attributes with more than one argument.  */\n+   POS and the expected type CODE.  Treat CODE == INTEGER_TYPE as\n+   matching all C integral types except bool.  If successful, return\n+   POS after default conversions, if any.  Otherwise, issue appropriate\n+   warnings and return null.  A non-zero 1-based ARGNO should be passed\n+   in by callers only for attributes with more than one argument.  */\n \n tree\n positional_argument (const_tree fntype, const_tree atname, tree pos,\n@@ -630,17 +631,22 @@ positional_argument (const_tree fntype, const_tree atname, tree pos,\n \t  return NULL_TREE;\n \t}\n \n-      /* Where the expected code is STRING_CST accept any pointer\n-\t to a narrow character type, qualified or otherwise.  */\n       bool type_match;\n       if (code == STRING_CST && POINTER_TYPE_P (argtype))\n \t{\n+\t  /* Where the expected code is STRING_CST accept any pointer\n+\t     to a narrow character type, qualified or otherwise.  */\n \t  tree type = TREE_TYPE (argtype);\n \t  type = TYPE_MAIN_VARIANT (type);\n \t  type_match = (type == char_type_node\n \t\t\t|| type == signed_char_type_node\n \t\t\t|| type == unsigned_char_type_node);\n \t}\n+      else if (code == INTEGER_TYPE)\n+\t/* For integers, accept enums, wide characters and other types\n+\t   that match INTEGRAL_TYPE_P except for bool.  */\n+\ttype_match = (INTEGRAL_TYPE_P (argtype)\n+\t\t      && TREE_CODE (argtype) != BOOLEAN_TYPE);\n       else\n \ttype_match = TREE_CODE (argtype) == code;\n "}, {"sha": "19ef6a6760d11215a8cf28382e980c3d5375659a", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9069a4c95d7f4d30f1e2e9d25dc7bb11a9f0e982/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9069a4c95d7f4d30f1e2e9d25dc7bb11a9f0e982/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=9069a4c95d7f4d30f1e2e9d25dc7bb11a9f0e982", "patch": "@@ -2487,7 +2487,8 @@ The @code{aligned} attribute can also be used for variables and fields\n @item alloc_align (@var{position})\n @cindex @code{alloc_align} function attribute\n The @code{alloc_align} attribute may be applied to a function that\n-returns a pointer and takes at least one argument of an integer type.\n+returns a pointer and takes at least one argument of an integer or\n+enumerated type.\n It indicates that the returned pointer is aligned on a boundary given\n by the function argument at @var{position}.  Meaningful alignments are\n powers of 2 greater than one.  GCC uses this information to improve\n@@ -2511,7 +2512,8 @@ given by parameter 1.\n @itemx alloc_size (@var{position-1}, @var{position-2})\n @cindex @code{alloc_size} function attribute\n The @code{alloc_size} attribute may be applied to a function that\n-returns a pointer and takes at least one argument of an integer type.\n+returns a pointer and takes at least one argument of an integer or\n+enumerated type.\n It indicates that the returned pointer points to memory whose size is\n given by the function argument at @var{position-1}, or by the product\n of the arguments at @var{position-1} and @var{position-2}.  Meaningful"}, {"sha": "d0add03b609b151e54bfdab00dc8dda0f8ee67c9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9069a4c95d7f4d30f1e2e9d25dc7bb11a9f0e982/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9069a4c95d7f4d30f1e2e9d25dc7bb11a9f0e982/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9069a4c95d7f4d30f1e2e9d25dc7bb11a9f0e982", "patch": "@@ -1,3 +1,8 @@\n+2019-01-04  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/88363\n+\t* c-c++-common/attributes-4.c: New test.\n+\n 2019-01-04  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/48543"}, {"sha": "d829a569f13be097f8d5515128a1a4204afd1f67", "filename": "gcc/testsuite/c-c++-common/attributes-4.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9069a4c95d7f4d30f1e2e9d25dc7bb11a9f0e982/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattributes-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9069a4c95d7f4d30f1e2e9d25dc7bb11a9f0e982/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattributes-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattributes-4.c?ref=9069a4c95d7f4d30f1e2e9d25dc7bb11a9f0e982", "patch": "@@ -0,0 +1,47 @@\n+/* PR c/88363 - alloc_align attribute doesn't accept enumerated arguments\n+   Verify that attribute positional arguments can refer to all C integer\n+   types except _Bool in both C and C++.\n+   { dg-do compile }\n+   { dg-options \"-Wall\" }\n+   { dg-options \"-Wall -Wno-c++-compat\" { target c } } */\n+\n+#define ATTR(...) __attribute__ ((__VA_ARGS__))\n+\n+#if __cplusplus == 199711L\n+typedef __CHAR16_TYPE__ char16_t;\n+typedef __CHAR32_TYPE__ char32_t;\n+#elif !__cplusplus\n+typedef _Bool           bool;\n+typedef __CHAR16_TYPE__ char16_t;\n+typedef __CHAR32_TYPE__ char32_t;\n+typedef __WCHAR_TYPE__  wchar_t;\n+#endif\n+\n+enum A { A0 };\n+\n+ATTR (alloc_align (1)) void* falloc_align_char (char);\n+ATTR (alloc_align (1)) void* falloc_align_char16 (char16_t);\n+ATTR (alloc_align (1)) void* falloc_align_char32 (char32_t);\n+ATTR (alloc_align (1)) void* falloc_align_wchar (wchar_t);\n+/* Using an enum might make sense in an API that limits the alignments\n+   it accepts to just the set of the defined enumerators.   */\n+ATTR (alloc_align (1)) void* falloc_align_enum (enum A);\n+ATTR (alloc_align (1)) void* falloc_align_int128 (__int128_t);\n+\n+\n+ATTR (alloc_align (1)) void* falloc_size_char (char);\n+ATTR (alloc_size (1)) void* falloc_size_char16 (char16_t);\n+ATTR (alloc_size (1)) void* falloc_size_char32 (char32_t);\n+ATTR (alloc_size (1)) void* falloc_size_wchar (wchar_t);\n+ATTR (alloc_size (1)) void* falloc_size_enum (enum A);\n+ATTR (alloc_align (1)) void* falloc_size_int128 (__int128_t);\n+\n+\n+typedef struct { int i; } S;\n+\n+/* Using bool is most likely a bug and so diagnosed even though\n+   it could be accepted.  None of the other types makes sense.  */\n+ATTR (alloc_align (1)) void* falloc_align_bool (bool);      /* { dg-warning \"attribute argument value .1. refers to parameter type .\\(_Bool|bool\\)\" } */\n+ATTR (alloc_align (1)) void* falloc_align_float (float);    /* { dg-warning \"attribute argument value .1. refers to parameter type .float\" } */\n+ATTR (alloc_align (1)) void* falloc_align_voidp (void*);    /* { dg-warning \"attribute argument value .1. refers to parameter type .void ?\\\\\\*\" } */\n+ATTR (alloc_align (1)) void* falloc_align_struct (S);       /* { dg-warning \"attribute argument value .1. refers to parameter type .S\" } */"}]}