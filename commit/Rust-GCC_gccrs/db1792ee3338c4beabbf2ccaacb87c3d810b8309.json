{"sha": "db1792ee3338c4beabbf2ccaacb87c3d810b8309", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGIxNzkyZWUzMzM4YzRiZWFiYmYyY2NhYWNiODdjM2Q4MTBiODMwOQ==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2010-12-15T17:43:01Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-12-15T17:43:01Z"}, "message": "In libobjc/: 2010-12-15 Nicola Pero <nicola.pero@meta-innovation.com>\n\nIn libobjc/:\n2010-12-15  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\t* objc/message.h: Update comments, reindented code and moved\n\tdeprecated types and functions at the end of the file.  No code\n\tchanges.\n\nFrom-SVN: r167864", "tree": {"sha": "f6cb2bb53be1b817b0fcea5e057648398e37c145", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6cb2bb53be1b817b0fcea5e057648398e37c145"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db1792ee3338c4beabbf2ccaacb87c3d810b8309", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db1792ee3338c4beabbf2ccaacb87c3d810b8309", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db1792ee3338c4beabbf2ccaacb87c3d810b8309", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db1792ee3338c4beabbf2ccaacb87c3d810b8309/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bd085c2093d2edb2224e7129d516860c0c26954d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd085c2093d2edb2224e7129d516860c0c26954d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd085c2093d2edb2224e7129d516860c0c26954d"}], "stats": {"total": 125, "additions": 91, "deletions": 34}, "files": [{"sha": "bfcda715e76ffbb13cd695571cbbec081d29f182", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db1792ee3338c4beabbf2ccaacb87c3d810b8309/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db1792ee3338c4beabbf2ccaacb87c3d810b8309/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=db1792ee3338c4beabbf2ccaacb87c3d810b8309", "patch": "@@ -1,3 +1,9 @@\n+2010-12-15  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* objc/message.h: Update comments, reindented code and moved\n+\tdeprecated types and functions at the end of the file.  No code\n+\tchanges.\n+\n 2010-12-15  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* ivars.c (class_addIvar): Use the 'size' argument instead of"}, {"sha": "3eda27e1d2abe96ec245d4d04239acdf8d008d2a", "filename": "libobjc/objc/message.h", "status": "modified", "additions": 85, "deletions": 34, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db1792ee3338c4beabbf2ccaacb87c3d810b8309/libobjc%2Fobjc%2Fmessage.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db1792ee3338c4beabbf2ccaacb87c3d810b8309/libobjc%2Fobjc%2Fmessage.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fmessage.h?ref=db1792ee3338c4beabbf2ccaacb87c3d810b8309", "patch": "@@ -34,57 +34,108 @@ extern \"C\" {\n #endif\n \n /* This file includes declarations of the messaging functions and\n-   types.\n-*/\n+   types.  */\n \n /* Compatibility note: the messaging function is one area where the\n    GNU runtime and the Apple/NeXT runtime differ significantly.  If\n    you can, it is recommended that you use higher-level facilities\n    (provided by a Foundation library such as GNUstep Base) to perform\n-   forwarding or other advanced messaging tricks.\n-*/\n-\n-typedef void* retval_t;\t\t/* return value */\n-typedef void(*apply_t)(void);\t/* function pointer */\n-typedef union arglist {\n-  char *arg_ptr;\n-  char arg_regs[sizeof (char*)];\n-} *arglist_t;\t\t\t/* argument frame */\n-\n-objc_EXPORT IMP objc_msg_lookup(id receiver, SEL op);\n-\n-/*\n- * Structure used when a message is send to a class's super class.\n- * The compiler generates one of these structures and passes it to\n- * objc_msg_lookup_super.\n- */\n-typedef struct objc_super {\n-  id      self;       /* Id of the object sending the message. */\n+   forwarding or other advanced messaging tricks.  */\n+\n+/* This function returns the IMP (C function implementing a method) to\n+   use to invoke the method with selector 'op' of receiver 'receiver'.\n+\n+   This is the function used by the compiler when compiling method\n+   invocations with the GNU runtime.  For example, the method call\n+\n+     result = [receiver method];\n+\n+   is compiled by the compiler (with the GNU runtime) into the\n+   equivalent of:\n+\n+   {\n+     IMP function = objc_msg_lookup (receiver, @selector (method));\n+     result = function (receiver, @selector (method));\n+   }\n+\n+   so, a call to objc_msg_lookup() determines the IMP (the C function\n+   implementing the method) to call.  Then, the function is called.\n+   If the method takes or returns different arguments, the compiler\n+   will cast 'function' to the right type before invoking it, making\n+   sure arguments and return value are handled correctly.\n+\n+   objc_msg_lookup() must always return a valid function that can be\n+   called with the required method signature (otherwise the\n+   compiler-generated code shown above could segfault).  If 'receiver'\n+   is NULL, objc_msg_lookup() returns a C function that does nothing,\n+   ignores all its arguments, and returns NULL (see nil_method.c).  If\n+   'receiver' does not respond to the selector 'op', objc_msg_lookup()\n+   will try to call +resolveClassMethod: or resolveInstanceMethod: as\n+   appropriate, and if they return YES, it will try the lookup again\n+   (+resolveClassMethod: and +resolveInstanceMethod: can thus install\n+   dynamically methods as they are requested).  If\n+   +resolveClassMethod: or +resolveInstanceMethod: are either not\n+   available, or return NO, or return YES but 'receiver' still doesn't\n+   implement the 'selector' after calling them, the runtime returns a\n+   generic \"forwarding\" function that can be called with the required\n+   method signature and which can process the method invocation\n+   according to the forwarding API.  There are two runtime hooks that\n+   allow Foundation libraries (such as GNUstep-Base) to return their\n+   own forwarding function in preference to the runtime ones.  When\n+   that happens, the Foundation library effectively takes complete\n+   control of the forwarding process; any method invocation where the\n+   selector is not implemented by the receiver will end up calling a\n+   forwarding function chosen by the Foundation library.  */\n+objc_EXPORT IMP objc_msg_lookup (id receiver, SEL op);\n+\n+/* Structure used when a message is send to a class's super class.\n+   The compiler generates one of these structures and passes it to\n+   objc_msg_lookup_super() when a [super method] call is compiled.  */\n+typedef struct objc_super\n+{\n+  id    self;       /* Id of the object sending the message. */\n+\n+  /* The new version of the API will always use 'super_class'.  TODO:\n+     Use class only if objc-api.h is included, otherwise always use\n+     super_class.  */\n #ifdef __cplusplus\n-  /* The new version of the API will always use 'super_class'.  */\n   Class super_class;\n #else\n   Class class;        /* Object's super class. */\n #endif\n } Super, *Super_t;\n \n-objc_EXPORT IMP objc_msg_lookup_super(Super_t super, SEL sel);\n+/* This is used by the compiler instead of objc_msg_lookup () when\n+   compiling a call to 'super', such as [super method].  This requires\n+   sending a message to super->self, but looking up the method as if\n+   super->self was in class super->super_class.  */\n+objc_EXPORT IMP objc_msg_lookup_super (Super_t super, SEL sel);\n \n-objc_EXPORT retval_t objc_msg_sendv(id, SEL, arglist_t);\n+/* Hooks for method forwarding.  They make it easy to substitute the\n+   built-in forwarding with one based on a library, such as ffi, that\n+   implement closures, thereby avoiding gcc's __builtin_apply\n+   problems.  __objc_msg_forward2's result will be preferred over that\n+   of __objc_msg_forward if both are set and return non-NULL.\n \n-/*\n- * Hooks for method forwarding. This makes it easy to substitute a\n- * library, such as ffcall, that implements closures, thereby avoiding\n- * gcc's __builtin_apply problems.  __objc_msg_forward2's result will\n- * be preferred over that of __objc_msg_forward if both are set and\n- * return non-NULL.\n- *\n- * TODO: The API should define objc_set_msg_forward_handler () or\n- * similar instead of these hooks.\n- */\n+   TODO: The API should define objc_set_msg_forward_handler () or\n+   similar instead of these hooks.  */\n objc_EXPORT IMP (*__objc_msg_forward)(SEL);\n objc_EXPORT IMP (*__objc_msg_forward2)(id, SEL);\n \n+\n+/* The following types and functions are provided only for\n+   backwards-compatibility and should not be used in new code.  They\n+   were deprecated in GCC 4.6 and will be removed in the next\n+   release.  */\n+typedef void* retval_t;\t\t/* return value */\n+typedef void(*apply_t)(void);\t/* function pointer */\n+typedef union arglist {\n+  char *arg_ptr;\n+  char arg_regs[sizeof (char*)];\n+} *arglist_t;\t\t        /* argument frame */\n+\n+objc_EXPORT retval_t objc_msg_sendv(id, SEL, arglist_t);\n+\n #ifdef __cplusplus\n }\n #endif"}]}