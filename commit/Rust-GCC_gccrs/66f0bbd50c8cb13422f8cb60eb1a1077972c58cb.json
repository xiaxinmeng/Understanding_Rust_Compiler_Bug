{"sha": "66f0bbd50c8cb13422f8cb60eb1a1077972c58cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjZmMGJiZDUwYzhjYjEzNDIyZjhjYjYwZWIxYTEwNzc5NzJjNThjYg==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2015-05-24T04:22:35Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2015-05-24T04:22:35Z"}, "message": "tree.c (prototype_p, [...]): Constify.\n\n\n\t* tree.c (prototype_p, virtual_method_call_p, obj_type_ref_class,\n\tis_typedef_decl, typedef_variant_p): Constify.\n\t* tree.h (prototype_p, virtual_method_call_p, obj_type_ref_class,\n\tis_typedef_decl, typedef_variant_p): Constify.\n\nFrom-SVN: r223628", "tree": {"sha": "2219295672a4ad959f01c9099b49dad6fa53d9c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2219295672a4ad959f01c9099b49dad6fa53d9c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66f0bbd50c8cb13422f8cb60eb1a1077972c58cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66f0bbd50c8cb13422f8cb60eb1a1077972c58cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66f0bbd50c8cb13422f8cb60eb1a1077972c58cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66f0bbd50c8cb13422f8cb60eb1a1077972c58cb/comments", "author": null, "committer": null, "parents": [{"sha": "0e5f14d42027a66519fc8129c7632608783eeaeb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e5f14d42027a66519fc8129c7632608783eeaeb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e5f14d42027a66519fc8129c7632608783eeaeb"}], "stats": {"total": 27, "additions": 17, "deletions": 10}, "files": [{"sha": "ef9b0f6ff4734aa9d2ccfe13f8852183571d4ba7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66f0bbd50c8cb13422f8cb60eb1a1077972c58cb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66f0bbd50c8cb13422f8cb60eb1a1077972c58cb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=66f0bbd50c8cb13422f8cb60eb1a1077972c58cb", "patch": "@@ -1,3 +1,10 @@\n+2015-05-22  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* tree.c (prototype_p, virtual_method_call_p, obj_type_ref_class,\n+\tis_typedef_decl, typedef_variant_p): Constify.\n+\t* tree.h (prototype_p, virtual_method_call_p, obj_type_ref_class,\n+\tis_typedef_decl, typedef_variant_p): Constify.\n+\n 2015-05-23  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n \t* defaults.h (gen_tablejump): New function."}, {"sha": "320a343da0d13963d58d35eb7fbe7acaa13aaf7b", "filename": "gcc/tree.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66f0bbd50c8cb13422f8cb60eb1a1077972c58cb/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66f0bbd50c8cb13422f8cb60eb1a1077972c58cb/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=66f0bbd50c8cb13422f8cb60eb1a1077972c58cb", "patch": "@@ -11579,7 +11579,7 @@ stdarg_p (const_tree fntype)\n /* Return true if TYPE has a prototype.  */\n \n bool\n-prototype_p (tree fntype)\n+prototype_p (const_tree fntype)\n {\n   tree t;\n \n@@ -12005,7 +12005,7 @@ lhd_gcc_personality (void)\n    can't apply.) */\n \n bool\n-virtual_method_call_p (tree target)\n+virtual_method_call_p (const_tree target)\n {\n   if (TREE_CODE (target) != OBJ_TYPE_REF)\n     return false;\n@@ -12026,7 +12026,7 @@ virtual_method_call_p (tree target)\n /* REF is OBJ_TYPE_REF, return the class the ref corresponds to.  */\n \n tree\n-obj_type_ref_class (tree ref)\n+obj_type_ref_class (const_tree ref)\n {\n   gcc_checking_assert (TREE_CODE (ref) == OBJ_TYPE_REF);\n   ref = TREE_TYPE (ref);\n@@ -12124,7 +12124,7 @@ get_binfo_at_offset (tree binfo, HOST_WIDE_INT offset, tree expected_type)\n /* Returns true if X is a typedef decl.  */\n \n bool\n-is_typedef_decl (tree x)\n+is_typedef_decl (const_tree x)\n {\n   return (x && TREE_CODE (x) == TYPE_DECL\n           && DECL_ORIGINAL_TYPE (x) != NULL_TREE);\n@@ -12133,7 +12133,7 @@ is_typedef_decl (tree x)\n /* Returns true iff TYPE is a type variant created for a typedef. */\n \n bool\n-typedef_variant_p (tree type)\n+typedef_variant_p (const_tree type)\n {\n   return is_typedef_decl (TYPE_NAME (type));\n }"}, {"sha": "1957dc5645ee895f3e64801834dc7ee9f3529278", "filename": "gcc/tree.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66f0bbd50c8cb13422f8cb60eb1a1077972c58cb/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66f0bbd50c8cb13422f8cb60eb1a1077972c58cb/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=66f0bbd50c8cb13422f8cb60eb1a1077972c58cb", "patch": "@@ -4375,9 +4375,9 @@ extern int operand_equal_for_phi_arg_p (const_tree, const_tree);\n extern tree create_artificial_label (location_t);\n extern const char *get_name (tree);\n extern bool stdarg_p (const_tree);\n-extern bool prototype_p (tree);\n-extern bool is_typedef_decl (tree x);\n-extern bool typedef_variant_p (tree);\n+extern bool prototype_p (const_tree);\n+extern bool is_typedef_decl (const_tree x);\n+extern bool typedef_variant_p (const_tree);\n extern bool auto_var_in_fn_p (const_tree, const_tree);\n extern tree build_low_bits_mask (tree, unsigned);\n extern bool tree_nop_conversion_p (const_tree, const_tree);\n@@ -4544,8 +4544,8 @@ extern location_t *block_nonartificial_location (tree);\n extern location_t tree_nonartificial_location (tree);\n extern tree block_ultimate_origin (const_tree);\n extern tree get_binfo_at_offset (tree, HOST_WIDE_INT, tree);\n-extern bool virtual_method_call_p (tree);\n-extern tree obj_type_ref_class (tree ref);\n+extern bool virtual_method_call_p (const_tree);\n+extern tree obj_type_ref_class (const_tree ref);\n extern bool types_same_for_odr (const_tree type1, const_tree type2,\n \t\t\t\tbool strict=false);\n extern bool contains_bitfld_component_ref_p (const_tree);"}]}