{"sha": "8b5f6dd83d7887c725337c83f302279946767212", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGI1ZjZkZDgzZDc4ODdjNzI1MzM3YzgzZjMwMjI3OTk0Njc2NzIxMg==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2009-12-29T19:29:54Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2009-12-29T19:29:54Z"}, "message": "re PR fortran/42517 (-fcheck=recursion does not work with -fopenmp)\n\ngcc/fortran/\n2009-12-29  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/42517\n\t* invoke.texi: Document the interference of\n\t-fcheck=recursion and -fopenmp.\n\t* trans-decl.c (gfc_generate_function_code): Disable -fcheck=recursion\n\twhen used with -fopenmp.\n\ngcc/testsuite/\n2009-12-29  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/42517\n\t* gfortran.dg/gomp/recursion1.f90: New test.\n\nFrom-SVN: r155506", "tree": {"sha": "b8a7ce2370b53aced3f62718aa0e0488a351fd11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8a7ce2370b53aced3f62718aa0e0488a351fd11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b5f6dd83d7887c725337c83f302279946767212", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b5f6dd83d7887c725337c83f302279946767212", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b5f6dd83d7887c725337c83f302279946767212", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b5f6dd83d7887c725337c83f302279946767212/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af6ffd394adde39a33d4f652bf4e53d4a2f2baea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af6ffd394adde39a33d4f652bf4e53d4a2f2baea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af6ffd394adde39a33d4f652bf4e53d4a2f2baea"}], "stats": {"total": 59, "additions": 52, "deletions": 7}, "files": [{"sha": "43d206a14b7b5d0363f04904e1243c090d8e6ecd", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5f6dd83d7887c725337c83f302279946767212/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5f6dd83d7887c725337c83f302279946767212/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=8b5f6dd83d7887c725337c83f302279946767212", "patch": "@@ -1,4 +1,12 @@\n-2009-12-28 Janus Weil  <janus@gcc.gnu.org>\n+2009-12-29  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/42517\n+\t* invoke.texi: Document the interference of\n+\t-fcheck=recursion and -fopenmp.\n+\t* trans-decl.c (gfc_generate_function_code): Disable -fcheck=recursion\n+\twhen used with -fopenmp.\n+\n+2009-12-28  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/42353\n \t* symbol.c (gfc_find_derived_vtab): Make vtabs and vtypes private.\n@@ -14,7 +22,7 @@\n \texplicitly declared if requested by the new flag.\n \t* invoke.texi: Document new flag -Wimplicit-procedure.\n \n-2009-12-17 Janus Weil  <janus@gcc.gnu.org>\n+2009-12-17  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/42144\n \t* trans-expr.c (select_class_proc): Skip abstract base types.\n@@ -39,7 +47,7 @@\n \tPR fortran/42354\n \t* expr.c (check_init_expr): Do not check for specification functions.\n \n-2009-12-11 Janus Weil  <janus@gcc.gnu.org>\n+2009-12-11  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/42257\n \t* module.c (write_dt_extensions): Check for accessibility.\n@@ -54,7 +62,7 @@\n \tconversion.\n \t* gfortran.h gfc_type_convert_binary): Adjusted prototype.\n \n-2009-12-11 Janus Weil  <janus@gcc.gnu.org>\n+2009-12-11  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/42335\n \t* symbol.c (select_type_insert_tmp): Add an extra check for"}, {"sha": "b9ad170e0cf563392a3a274ad83f0a468935f461", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5f6dd83d7887c725337c83f302279946767212/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5f6dd83d7887c725337c83f302279946767212/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=8b5f6dd83d7887c725337c83f302279946767212", "patch": "@@ -1257,6 +1257,8 @@ Enable generation of run-time checks for pointers and allocatables.\n @item @samp{recursion}\n Enable generation of run-time checks for recursively called subroutines and\n functions which are not marked as recursive. See also @option{-frecursive}.\n+Note: This check does not work for OpenMP programs and is disabled if used\n+together with @option{-fopenmp}.\n @end table\n \n "}, {"sha": "9a01dbab32cf50c2ae3cfffe1dd4e8d8b8a73809", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5f6dd83d7887c725337c83f302279946767212/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5f6dd83d7887c725337c83f302279946767212/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=8b5f6dd83d7887c725337c83f302279946767212", "patch": "@@ -4318,7 +4318,8 @@ gfc_generate_function_code (gfc_namespace * ns)\n    is_recursive = sym->attr.recursive\n \t\t  || (sym->attr.entry_master\n \t\t      && sym->ns->entries->sym->attr.recursive);\n-   if ((gfc_option.rtcheck & GFC_RTCHECK_RECURSION) && !is_recursive)\n+   if ((gfc_option.rtcheck & GFC_RTCHECK_RECURSION) && !is_recursive\n+       && !gfc_option.flag_openmp)\n      {\n        char * msg;\n \n@@ -4395,7 +4396,8 @@ gfc_generate_function_code (gfc_namespace * ns)\n       gfc_add_expr_to_block (&block, tmp);\n \n       /* Reset recursion-check variable.  */\n-      if ((gfc_option.rtcheck & GFC_RTCHECK_RECURSION) && !is_recursive)\n+      if ((gfc_option.rtcheck & GFC_RTCHECK_RECURSION) && !is_recursive\n+\t  && !gfc_option.flag_openmp)\n \t{\n \t  gfc_add_modify (&block, recurcheckvar, boolean_false_node);\n \t  recurcheckvar = NULL;\n@@ -4426,7 +4428,8 @@ gfc_generate_function_code (gfc_namespace * ns)\n     {\n       gfc_add_expr_to_block (&block, tmp);\n       /* Reset recursion-check variable.  */\n-      if ((gfc_option.rtcheck & GFC_RTCHECK_RECURSION) && !is_recursive)\n+      if ((gfc_option.rtcheck & GFC_RTCHECK_RECURSION) && !is_recursive\n+\t  && !gfc_option.flag_openmp)\n       {\n \tgfc_add_modify (&block, recurcheckvar, boolean_false_node);\n \trecurcheckvar = NULL;"}, {"sha": "8be8a062c451ad2c56bf47d9c3fa43211e1200c9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5f6dd83d7887c725337c83f302279946767212/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5f6dd83d7887c725337c83f302279946767212/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8b5f6dd83d7887c725337c83f302279946767212", "patch": "@@ -1,3 +1,8 @@\n+2009-12-29  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/42517\n+\t* gfortran.dg/gomp/recursion1.f90: New test.\n+\n 2009-12-29  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/test_raise_from_pure.adb: XFAIL for the ARM."}, {"sha": "0b7b2715fdd1b1e74456d48ec221970010ca0fb0", "filename": "gcc/testsuite/gfortran.dg/gomp/recursion1.f90", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b5f6dd83d7887c725337c83f302279946767212/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Frecursion1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b5f6dd83d7887c725337c83f302279946767212/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Frecursion1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Frecursion1.f90?ref=8b5f6dd83d7887c725337c83f302279946767212", "patch": "@@ -0,0 +1,27 @@\n+! { dg-do run }\n+! { dg-options \"-fopenmp -fcheck=recursion\" }\n+!\n+! PR 42517: Bogus runtime error with -fopenmp -fcheck=recursion\n+!\n+! Contributed by Janus Weil <janus@gcc.gnu.org>\n+\n+implicit none\n+integer :: i,s\n+\n+s=0\n+!$omp parallel do private(i) shared(s)\n+do i=1,10\n+  call sub(i)\n+end do\n+!$omp end parallel do\n+if (s/=55) call abort()\n+\n+contains\n+\n+  subroutine sub (n)\n+    integer :: n\n+    s = s + n\n+    print '(A,i3)',\"loop =\",n\n+  end subroutine\n+\n+end"}]}