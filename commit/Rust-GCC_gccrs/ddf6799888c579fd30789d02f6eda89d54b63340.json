{"sha": "ddf6799888c579fd30789d02f6eda89d54b63340", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGRmNjc5OTg4OGM1NzlmZDMwNzg5ZDAyZjZlZGE4OWQ1NGI2MzM0MA==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2009-07-26T17:25:56Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2009-07-26T17:25:56Z"}, "message": "re PR fortran/33197 (Fortran 2008: math functions)\n\n2009-07-26  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/33197\n        * intrinsic.c (make_generic): Remove assert as \"atan\" can be\n        both ISYM_ATAN and ISYM_ATAN2.\n        (add_functions): Add two-argument variant of ATAN.\n        * intrinsic.h (gfc_check_atan_2): Add check for it.\n        * intrinsic.texi (ATAN2): Correct and enhance description.\n        (ATAN): Describe two-argument variant of ATAN.\n\n2009-07-26  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/33197\n        * gfortran.dg/atan2_1.f90: New test\n        * gfortran.dg/atan2_2.f90: New test\n\nFrom-SVN: r150100", "tree": {"sha": "b259f058789db8ed3708b7eb713e618b6c81dc13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b259f058789db8ed3708b7eb713e618b6c81dc13"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ddf6799888c579fd30789d02f6eda89d54b63340", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddf6799888c579fd30789d02f6eda89d54b63340", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddf6799888c579fd30789d02f6eda89d54b63340", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddf6799888c579fd30789d02f6eda89d54b63340/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f6c7fcc0d57109c145195175cad0c7d433b1f39a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6c7fcc0d57109c145195175cad0c7d433b1f39a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6c7fcc0d57109c145195175cad0c7d433b1f39a"}], "stats": {"total": 121, "additions": 114, "deletions": 7}, "files": [{"sha": "ca320ca8e71470ea9038b81df27e70660d44643f", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddf6799888c579fd30789d02f6eda89d54b63340/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddf6799888c579fd30789d02f6eda89d54b63340/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ddf6799888c579fd30789d02f6eda89d54b63340", "patch": "@@ -1,3 +1,13 @@\n+2009-07-26  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/33197\n+\t* intrinsic.c (make_generic): Remove assert as \"atan\" can be\n+\tboth ISYM_ATAN and ISYM_ATAN2.\n+\t(add_functions): Add two-argument variant of ATAN.\n+\t* intrinsic.h (gfc_check_atan_2): Add check for it.\n+\t* intrinsic.texi (ATAN2): Correct and enhance description.\n+\t(ATAN): Describe two-argument variant of ATAN.\n+\n 2009-07-25  Tobias Burnus  <burnus@net-b.de>\n \t    Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n "}, {"sha": "779af2038e9cba8159de7c7c63ac4243627c5488", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddf6799888c579fd30789d02f6eda89d54b63340/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddf6799888c579fd30789d02f6eda89d54b63340/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=ddf6799888c579fd30789d02f6eda89d54b63340", "patch": "@@ -675,6 +675,19 @@ gfc_check_associated (gfc_expr *pointer, gfc_expr *target)\n }\n \n \n+gfc_try\n+gfc_check_atan_2 (gfc_expr *y, gfc_expr *x)\n+{\n+  /* gfc_notify_std would be a wast of time as the return value\n+     is seemingly used only for the generic resolution.  The error\n+     will be: Too many arguments.  */\n+  if ((gfc_option.allow_std & GFC_STD_F2008) == 0)\n+    return FAILURE;\n+\n+  return gfc_check_atan2 (y, x);\n+}\n+\n+\n gfc_try\n gfc_check_atan2 (gfc_expr *y, gfc_expr *x)\n {"}, {"sha": "d2cdb591888ca9c8d4ae55d29e7438b3bada11f8", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddf6799888c579fd30789d02f6eda89d54b63340/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddf6799888c579fd30789d02f6eda89d54b63340/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=ddf6799888c579fd30789d02f6eda89d54b63340", "patch": "@@ -1008,8 +1008,6 @@ make_generic (const char *name, gfc_isym_id id, int standard ATTRIBUTE_UNUSED)\n \n   while (g->name != NULL)\n     {\n-      gcc_assert (g->id == id);\n-\n       g->next = g + 1;\n       g->specific = 1;\n       g++;\n@@ -1250,6 +1248,11 @@ add_functions (void)\n \t     gfc_check_fn_d, gfc_simplify_atan, gfc_resolve_atan,\n \t     x, BT_REAL, dd, REQUIRED);\n \n+  /* Two-argument version of atan, equivalent to atan2.  */\n+  add_sym_2 (\"atan\", GFC_ISYM_ATAN2, CLASS_ELEMENTAL, ACTUAL_YES, BT_REAL, dr, GFC_STD_F2008,\n+\t     gfc_check_atan_2, gfc_simplify_atan2, gfc_resolve_atan2,\n+\t     y, BT_REAL, dr, REQUIRED, x, BT_REAL, dr, REQUIRED);\n+\n   make_generic (\"atan\", GFC_ISYM_ATAN, GFC_STD_F77);\n   \n   add_sym_1 (\"atanh\", GFC_ISYM_ATANH, CLASS_ELEMENTAL, ACTUAL_YES, BT_REAL, dr,"}, {"sha": "a239ad6d35b1820fdcdbba6c06f37250e51b63e4", "filename": "gcc/fortran/intrinsic.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddf6799888c579fd30789d02f6eda89d54b63340/gcc%2Ffortran%2Fintrinsic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddf6799888c579fd30789d02f6eda89d54b63340/gcc%2Ffortran%2Fintrinsic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.h?ref=ddf6799888c579fd30789d02f6eda89d54b63340", "patch": "@@ -37,6 +37,7 @@ gfc_try gfc_check_achar (gfc_expr *, gfc_expr *);\n gfc_try gfc_check_all_any (gfc_expr *, gfc_expr *);\n gfc_try gfc_check_allocated (gfc_expr *);\n gfc_try gfc_check_associated (gfc_expr *, gfc_expr *);\n+gfc_try gfc_check_atan_2 (gfc_expr *, gfc_expr *);\n gfc_try gfc_check_atan2 (gfc_expr *, gfc_expr *);\n gfc_try gfc_check_besn (gfc_expr *, gfc_expr *);\n gfc_try gfc_check_btest (gfc_expr *, gfc_expr *);"}, {"sha": "2c993b9048a90ce37ac9f0e831a27da52d3d6a65", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddf6799888c579fd30789d02f6eda89d54b63340/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddf6799888c579fd30789d02f6eda89d54b63340/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=ddf6799888c579fd30789d02f6eda89d54b63340", "patch": "@@ -1353,22 +1353,28 @@ end program test_associated\n @code{ATAN(X)} computes the arctangent of @var{X}.\n \n @item @emph{Standard}:\n-Fortran 77 and later, for a complex argument Fortran 2008 or later\n+Fortran 77 and later, for a complex argument and for two arguments\n+Fortran 2008 or later\n \n @item @emph{Class}:\n Elemental function\n \n @item @emph{Syntax}:\n @code{RESULT = ATAN(X)}\n+@code{RESULT = ATAN(Y, X)}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n-@item @var{X} @tab The type shall be @code{REAL} or @code{COMPLEX}.\n+@item @var{X} @tab The type shall be @code{REAL} or @code{COMPLEX};\n+if @var{Y} is present, @var{X} shall be REAL.\n+@item @var{Y} shall be of the same type and kind as @var{X}.\n @end multitable\n \n @item @emph{Return value}:\n The return value is of the same type and kind as @var{X}.\n-The real part of the result is in radians and lies in the range\n+If @var{Y} is present, the result is identical to @code{ATAN2(Y,X)}.\n+Otherwise, it the arcus tangent of @var{X}, where the real part of\n+the result is in radians and lies in the range\n @math{-\\pi/2 \\leq \\Re \\atan(x) \\leq \\pi/2}.\n \n @item @emph{Example}:\n@@ -1401,8 +1407,10 @@ Inverse function: @ref{TAN}\n \n @table @asis\n @item @emph{Description}:\n-@code{ATAN2(Y, X)} computes the arctangent of the complex number\n-@math{X + i Y}.\n+@code{ATAN2(Y, X)} computes the principal value of the argument\n+function of the complex number @math{X + i Y}. This function can\n+be used to transform from carthesian into polar coordinates and\n+allows to determine the angle in the correct quadrant.\n \n @item @emph{Standard}:\n Fortran 77 and later"}, {"sha": "f9bbf626f92613c1638d753d4775ee7f937dfdca", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddf6799888c579fd30789d02f6eda89d54b63340/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddf6799888c579fd30789d02f6eda89d54b63340/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ddf6799888c579fd30789d02f6eda89d54b63340", "patch": "@@ -1,3 +1,9 @@\n+2009-07-26  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/33197\n+\t* gfortran.dg/atan2_1.f90: New test\n+\t* gfortran.dg/atan2_2.f90: New test\n+\n 2007-07-26  Simon Martin  <simartin@users.sourceforge.net>\n \n \tPR c++/40749"}, {"sha": "1f998a1ccdecf1c11b646ee4c095670b629dcdce", "filename": "gcc/testsuite/gfortran.dg/atan2_1.f90", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddf6799888c579fd30789d02f6eda89d54b63340/gcc%2Ftestsuite%2Fgfortran.dg%2Fatan2_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddf6799888c579fd30789d02f6eda89d54b63340/gcc%2Ftestsuite%2Fgfortran.dg%2Fatan2_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fatan2_1.f90?ref=ddf6799888c579fd30789d02f6eda89d54b63340", "patch": "@@ -0,0 +1,36 @@\n+! { dg-do run }\n+!\n+! PR fortran/33197\n+!\n+! Check for Fortran 2008's ATAN(Y,X) - which is equivalent\n+! to Fortran 77's ATAN2(Y,X).\n+!\n+integer :: i\n+real, parameter :: pi4 = 2*acos(0.0)\n+real, parameter :: pi8 = 2*acos(0.0d0)\n+do i = 1, 10\n+  if(atan(1.0,  i/10.0)  -atan2(1.0,  i/10.)    /= 0.0)   call abort()\n+  if(atan(1.0d0,i/10.0d0)-atan2(1.0d0,i/10.0d0) /= 0.0d0) call abort()\n+end do\n+\n+! Atan(1,1) = Pi/4\n+if (abs(atan(1.0,1.0)    -pi4/4.0)   > epsilon(pi4)) call abort()\n+if (abs(atan(1.0d0,1.0d0)-pi8/4.0d0) > epsilon(pi8)) call abort()\n+\n+! Atan(-1,1) = -Pi/4\n+if (abs(atan(-1.0,1.0)    +pi4/4.0)   > epsilon(pi4)) call abort()\n+if (abs(atan(-1.0d0,1.0d0)+pi8/4.0d0) > epsilon(pi8)) call abort()\n+\n+! Atan(1,-1) = 3/4*Pi\n+if (abs(atan(1.0,-1.0)    -3.0*pi4/4.0)     > epsilon(pi4)) call abort()\n+if (abs(atan(1.0d0,-1.0d0)-3.0d0*pi8/4.0d0) > epsilon(pi8)) call abort()\n+\n+! Atan(-1,-1) = -3/4*Pi\n+if (abs(atan(-1.0,-1.0)    +3.0*pi4/4.0)     > epsilon(pi4)) call abort()\n+if (abs(atan(-1.0d0,-1.0d0)+3.0d0*pi8/4.0d0) > epsilon(pi8)) call abort()\n+\n+! Atan(3,-5) = 2.60117315331920908301906501867... = Pi - 3/2 atan(3/5)\n+if (abs(atan(3.0,-5.0)    -2.60117315331920908301906501867) > epsilon(pi4)) call abort()\n+if (abs(atan(3.0d0,-5.0d0)-2.60117315331920908301906501867d0) > epsilon(pi8)) call abort()\n+\n+end"}, {"sha": "407e83a701d227a3b667024e2645e9fa0b09a6a9", "filename": "gcc/testsuite/gfortran.dg/atan2_2.f90", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddf6799888c579fd30789d02f6eda89d54b63340/gcc%2Ftestsuite%2Fgfortran.dg%2Fatan2_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddf6799888c579fd30789d02f6eda89d54b63340/gcc%2Ftestsuite%2Fgfortran.dg%2Fatan2_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fatan2_2.f90?ref=ddf6799888c579fd30789d02f6eda89d54b63340", "patch": "@@ -0,0 +1,30 @@\n+! { dg-do compile }\n+! { dg-options \"-std=f2003\" }\n+!\n+! PR fortran/33197\n+!\n+! Check for Fortran 2008's ATAN(Y,X) - which is equivalent\n+! to Fortran 77's ATAN2(Y,X).\n+!\n+real(4)    :: r4\n+real(8)    :: r8\n+complex(4) :: c4\n+complex(8) :: c8\n+\n+r4 = atan2(r4,r4)\n+r8 = atan2(r8,r8)\n+\n+r4 = atan(r4,r4) ! { dg-error \"Too many arguments in call to 'atan'\" }\n+r8 = atan(r8,r8) ! { dg-error \"Too many arguments in call to 'atan'\" }\n+\n+r4 = atan2(r4,r8) ! { dg-error \"same type and kind\" }\n+r4 = atan2(r8,r4) ! { dg-error \"same type and kind\" }\n+\n+r4 = atan2(c4,r8) ! { dg-error \"must be REAL\" }\n+r4 = atan2(c8,r4) ! { dg-error \"must be REAL\" }\n+r4 = atan2(r4,c8) ! { dg-error \"same type and kind\" }\n+r4 = atan2(r8,c4) ! { dg-error \"same type and kind\" }\n+\n+r4 = atan2(c4,c8) ! { dg-error \"must be REAL\" }\n+r4 = atan2(c8,c4) ! { dg-error \"must be REAL\" }\n+end"}]}