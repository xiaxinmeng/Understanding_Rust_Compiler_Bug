{"sha": "8963a5172c0a91b190f361ef3b400518ee347a00", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk2M2E1MTcyYzBhOTFiMTkwZjM2MWVmM2I0MDA1MThlZTM0N2EwMA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2004-07-05T14:22:28Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2004-07-05T14:22:28Z"}, "message": "function.c, [...]: Move max_size hook to type hooks; remove bogus PARAMS.\n\n\t* function.c, langhooks-def.h, langhooks.h: Move max_size hook\n\tto type hooks; remove bogus PARAMS.\n\nFrom-SVN: r84113", "tree": {"sha": "29e664ed85b8be0c9ed83af0463ffda6d2e183de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29e664ed85b8be0c9ed83af0463ffda6d2e183de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8963a5172c0a91b190f361ef3b400518ee347a00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8963a5172c0a91b190f361ef3b400518ee347a00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8963a5172c0a91b190f361ef3b400518ee347a00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8963a5172c0a91b190f361ef3b400518ee347a00/comments", "author": null, "committer": null, "parents": [{"sha": "879dc459defa46da95fe01bb60a4be9688e520d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/879dc459defa46da95fe01bb60a4be9688e520d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/879dc459defa46da95fe01bb60a4be9688e520d3"}], "stats": {"total": 19, "additions": 12, "deletions": 7}, "files": [{"sha": "c2dd100ed31869fde9f8e9ab5fbee5219dbb5f86", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8963a5172c0a91b190f361ef3b400518ee347a00/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8963a5172c0a91b190f361ef3b400518ee347a00/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8963a5172c0a91b190f361ef3b400518ee347a00", "patch": "@@ -1,3 +1,8 @@\n+2004-07-05  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* function.c, langhooks-def.h, langhooks.h: Move max_size hook\n+\tto type hooks; remove bogus PARAMS.\n+\n 2004-07-05  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* c-tree.h (TYPE_ACTUAL_ARG_TYPES): Use TYPE_LANG_SLOT_1."}, {"sha": "71003c2d61b6f0f650322e1cd94cc2483a3be891", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8963a5172c0a91b190f361ef3b400518ee347a00/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8963a5172c0a91b190f361ef3b400518ee347a00/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=8963a5172c0a91b190f361ef3b400518ee347a00", "patch": "@@ -852,7 +852,7 @@ assign_temp (tree type_or_decl, int keep, int memory_required,\n       /* If we still haven't been able to get a size, see if the language\n \t can compute a maximum size.  */\n       if (size == -1\n-\t  && (size_tree = lang_hooks.type_max_size (type)) != 0\n+\t  && (size_tree = lang_hooks.types.max_size (type)) != 0\n \t  && host_integerp (size_tree, 1))\n \tsize = tree_low_cst (size_tree, 1);\n "}, {"sha": "da8b6081e548ae77531e4b265d2dc89207ca4b92", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8963a5172c0a91b190f361ef3b400518ee347a00/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8963a5172c0a91b190f361ef3b400518ee347a00/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=8963a5172c0a91b190f361ef3b400518ee347a00", "patch": "@@ -127,7 +127,6 @@ extern int lhd_gimplify_expr (tree *, tree *, tree *);\n #define LANG_HOOKS_DECL_PRINTABLE_NAME\tlhd_decl_printable_name\n #define LANG_HOOKS_GET_CALLEE_FNDECL\tlhd_return_null_tree\n #define LANG_HOOKS_EXPR_SIZE\t\tlhd_expr_size\n-#define LANG_HOOKS_TYPE_MAX_SIZE\tlhd_return_null_tree\n #define LANG_HOOKS_TREE_SIZE\t\tlhd_tree_size\n #define LANG_HOOKS_TYPES_COMPATIBLE_P\tlhd_types_compatible_p\n #define LANG_HOOKS_UPDATE_DECL_AFTER_SAVING NULL\n@@ -223,6 +222,7 @@ extern tree lhd_make_node (enum tree_code);\n #define LANG_HOOKS_INCOMPLETE_TYPE_ERROR lhd_incomplete_type_error\n #define LANG_HOOKS_TYPE_PROMOTES_TO lhd_type_promotes_to\n #define LANG_HOOKS_REGISTER_BUILTIN_TYPE lhd_register_builtin_type\n+#define LANG_HOOKS_TYPE_MAX_SIZE\tlhd_return_null_tree\n #define LANG_HOOKS_HASH_TYPES\t\ttrue\n \n #define LANG_HOOKS_FOR_TYPES_INITIALIZER { \\\n@@ -235,6 +235,7 @@ extern tree lhd_make_node (enum tree_code);\n   LANG_HOOKS_TYPE_PROMOTES_TO, \\\n   LANG_HOOKS_REGISTER_BUILTIN_TYPE, \\\n   LANG_HOOKS_INCOMPLETE_TYPE_ERROR, \\\n+  LANG_HOOKS_TYPE_MAX_SIZE, \\\n   LANG_HOOKS_HASH_TYPES \\\n }\n \n@@ -306,7 +307,6 @@ extern tree lhd_make_node (enum tree_code);\n   LANG_HOOKS_GET_CALLEE_FNDECL, \\\n   LANG_HOOKS_PRINT_ERROR_FUNCTION, \\\n   LANG_HOOKS_EXPR_SIZE, \\\n-  LANG_HOOKS_TYPE_MAX_SIZE, \\\n   LANG_HOOKS_UPDATE_DECL_AFTER_SAVING, \\\n   LANG_HOOKS_ATTRIBUTE_TABLE, \\\n   LANG_HOOKS_COMMON_ATTRIBUTE_TABLE, \\"}, {"sha": "895d94b16d804cafbc973c675fa23364afe789b9", "filename": "gcc/langhooks.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8963a5172c0a91b190f361ef3b400518ee347a00/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8963a5172c0a91b190f361ef3b400518ee347a00/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=8963a5172c0a91b190f361ef3b400518ee347a00", "patch": "@@ -141,6 +141,10 @@ struct lang_hooks_for_types\n      invalid.  */\n   void (*incomplete_type_error) (tree value, tree type);\n \n+  /* Called from assign_temp to return the maximum size, if there is one,\n+     for a type.  */\n+  tree (*max_size) (tree);\n+\n   /* Nonzero if types that are identical are to be hashed so that only\n      one copy is kept.  If a language requires unique types for each\n      user-specified type, such as Ada, this should be set to TRUE.  */\n@@ -390,10 +394,6 @@ struct lang_hooks\n      semantics in cases that it doesn't want to handle specially.  */\n   tree (*expr_size) (tree);\n \n-  /* Called from assign_temp to return the maximum size, if there is one,\n-     for a type.  */\n-  tree (*type_max_size) PARAMS ((tree));\n-\n   /* Update lang specific fields after duplicating function body.  */\n   void (*update_decl_after_saving) (tree, void *);\n "}]}