{"sha": "2b85879e637df70ff99b3d7bbea2dd0997cc907f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmI4NTg3OWU2MzdkZjcwZmY5OWIzZDdiYmVhMmRkMDk5N2NjOTA3Zg==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2001-07-19T06:22:04Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-07-19T06:22:04Z"}, "message": "Makefile.in (toplev.o, [...]): Don't depend on dwarfout.h.\n\n\t* Makefile.in (toplev.o, dwarfout.o, final.o): Don't depend on\n\tdwarfout.h.\n\t* dbxout.c (dbxout_function): Rename dbxout_funciton_decl, move\n\tto conditionally compiled block.\n\t(dbx_debug_hooks, xcoff_debug_hooks): Update.\n\t* dbxout.h (dbxout_function): Remove.\n\t* debug.c (do_nothing_debug_hooks): Update.\n\t* debug.h (struct gcc_debug_hooks): New hooks function_decl,\n\tglobal_decl, deferred_inline_function.\n\t* dwarf2out.c (dwarf2_debug_hooks): Update.\n\t(dwarf2out_global_decl): New.\n\t* dwarfout.c: Don't include dwarfout.h.\n\t(dwarfout_global_decl, dwarfout_function_decl,\n\tdwarfout_deferred_inline_function): New.\n\t(dwarf_debug_hooks): Update.\n\t* dwarfout.h: Remove.\n\t* final.c: Don't include dwarfout.h.\n\t* sdbout.c (sdbout_global_decl): New.\n\t(sdbout_debug_hooks): Update.\n\t* toplev.c: Don't include dwarfout.h.\n\t(check_global_declarations, rest_of_compilation): Use new debug hooks.\n\t(note_deferral_of_defined_inline_function): Remove.\n\t* toplev.h (note_deferral_of_defined_inline_function): Remove.\n\t* ch/Makefile.in (lex.o): No dependence on dwarfout.h.\n\t* ch/lex.c: Don't include dwarfout.h.\n\t* cp/Make-lang.in (decl2.o): No dependence on dwarfout.h, dwarf2out.h.\n\t(semantics.o, optimize.o): Depend on debug.h not dwarfout.h.\n\t* cp/decl2.c: Don't include dwarfout.h and dwarf2out.h.\n\t* cp/optimize.c: Include debug.h.\n\t(maybe_clone_body): Use debug hook.\n\t* cp/semantics.c: Include debug.h.\n\t(expand_body): Use debug hook.\n\t* po/POTFILES.in: Remove dwarfout.h.\n\nFrom-SVN: r44145", "tree": {"sha": "b1d514bcbcb3022999013a3add1442cb71310221", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1d514bcbcb3022999013a3add1442cb71310221"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b85879e637df70ff99b3d7bbea2dd0997cc907f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b85879e637df70ff99b3d7bbea2dd0997cc907f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b85879e637df70ff99b3d7bbea2dd0997cc907f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b85879e637df70ff99b3d7bbea2dd0997cc907f/comments", "author": null, "committer": null, "parents": [{"sha": "c60e94a70efc44dd419ec5119dad3aa7813949d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c60e94a70efc44dd419ec5119dad3aa7813949d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c60e94a70efc44dd419ec5119dad3aa7813949d3"}], "stats": {"total": 412, "additions": 233, "deletions": 179}, "files": [{"sha": "c24d83eac13b1ea93dca5f45cd95546829986dd0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b85879e637df70ff99b3d7bbea2dd0997cc907f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b85879e637df70ff99b3d7bbea2dd0997cc907f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2b85879e637df70ff99b3d7bbea2dd0997cc907f", "patch": "@@ -1,3 +1,39 @@\n+2001-07-19  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* Makefile.in (toplev.o, dwarfout.o, final.o): Don't depend on\n+\tdwarfout.h.\n+\t* dbxout.c (dbxout_function): Rename dbxout_funciton_decl, move\n+\tto conditionally compiled block.\n+\t(dbx_debug_hooks, xcoff_debug_hooks): Update.\n+\t* dbxout.h (dbxout_function): Remove.\n+\t* debug.c (do_nothing_debug_hooks): Update.\n+\t* debug.h (struct gcc_debug_hooks): New hooks function_decl,\n+\tglobal_decl, deferred_inline_function.\n+\t* dwarf2out.c (dwarf2_debug_hooks): Update.\n+\t(dwarf2out_global_decl): New.\n+\t* dwarfout.c: Don't include dwarfout.h.\n+\t(dwarfout_global_decl, dwarfout_function_decl,\n+\tdwarfout_deferred_inline_function): New.\n+\t(dwarf_debug_hooks): Update.\n+\t* dwarfout.h: Remove.\n+\t* final.c: Don't include dwarfout.h.\n+\t* sdbout.c (sdbout_global_decl): New.\n+\t(sdbout_debug_hooks): Update.\n+\t* toplev.c: Don't include dwarfout.h.\n+\t(check_global_declarations, rest_of_compilation): Use new debug hooks.\n+\t(note_deferral_of_defined_inline_function): Remove.\n+\t* toplev.h (note_deferral_of_defined_inline_function): Remove.\n+\t* ch/Makefile.in (lex.o): No dependence on dwarfout.h.\n+\t* ch/lex.c: Don't include dwarfout.h.\n+\t* cp/Make-lang.in (decl2.o): No dependence on dwarfout.h, dwarf2out.h.\n+\t(semantics.o, optimize.o): Depend on debug.h not dwarfout.h.\n+\t* cp/decl2.c: Don't include dwarfout.h and dwarf2out.h.\n+\t* cp/optimize.c: Include debug.h.\n+\t(maybe_clone_body): Use debug hook.\n+\t* cp/semantics.c: Include debug.h.\n+\t(expand_body): Use debug hook.\n+\t* po/POTFILES.in: Remove dwarfout.h.\n+\n 2001-07-19  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* c-lex.c (c_lex): Remove CPP_INT, CPP_FLOAT cases."}, {"sha": "5b90382a58254554eee2f6076ba6bda37d7786c0", "filename": "gcc/Makefile.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b85879e637df70ff99b3d7bbea2dd0997cc907f/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b85879e637df70ff99b3d7bbea2dd0997cc907f/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=2b85879e637df70ff99b3d7bbea2dd0997cc907f", "patch": "@@ -1340,7 +1340,7 @@ diagnostic.o : diagnostic.c diagnostic.h diagnostic.def \\\n    $(GGC_H) input.h $(INSN_ATTR_H) insn-config.h toplev.h intl.h\n toplev.o : toplev.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) function.h \\\n    flags.h input.h $(INSN_ATTR_H) xcoffout.h output.h diagnostic.h \\\n-   debug.h insn-config.h intl.h $(RECOG_H) Makefile toplev.h dwarfout.h \\\n+   debug.h insn-config.h intl.h $(RECOG_H) Makefile toplev.h \\\n    dwarf2out.h sdbout.h dbxout.h $(EXPR_H) hard-reg-set.h $(BASIC_BLOCK_H) \\\n    graph.h $(LOOP_H) except.h $(REGS_H) $(TIMEVAR_H) $(lang_options_files) \\\n    ssa.h $(PARAMS_H) $(TM_P_H) reload.h dwarf2asm.h\n@@ -1401,7 +1401,7 @@ sdbout.o : sdbout.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) flags.h \\\n    insn-config.h $(OBSTACK_H) xcoffout.h c-pragma.h ggc.h \\\n    sdbout.h toplev.h $(TM_P_H) except.h debug.h\n dwarfout.o : dwarfout.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) dwarf.h \\\n-   flags.h insn-config.h reload.h output.h toplev.h dwarfout.h $(TM_P_H) \\\n+   flags.h insn-config.h reload.h output.h toplev.h $(TM_P_H) \\\n    debug.h\n dwarf2out.o : dwarf2out.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) dwarf2.h \\\n    debug.h flags.h insn-config.h reload.h output.h diagnostic.h \\\n@@ -1524,7 +1524,7 @@ sched-vis.o : sched-vis.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) sched-int.h \\\n final.o : final.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TREE_H) flags.h intl.h \\\n    $(REGS_H) $(RECOG_H) conditions.h insn-config.h $(INSN_ATTR_H) function.h \\\n    real.h output.h hard-reg-set.h except.h debug.h \\\n-   xcoffout.h toplev.h reload.h dwarfout.h dwarf2out.h sdbout.h \\\n+   xcoffout.h toplev.h reload.h dwarf2out.h sdbout.h \\\n    dbxout.h $(BASIC_BLOCK_H) $(TM_P_H) $(TARGET_H)\n recog.o : recog.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) function.h $(BASIC_BLOCK_H) \\\n    $(REGS_H) $(RECOG_H) $(EXPR_H) hard-reg-set.h flags.h insn-config.h \\"}, {"sha": "d2421059f411cb4c6712ccb75f5f2d1fbf3a2724", "filename": "gcc/ch/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b85879e637df70ff99b3d7bbea2dd0997cc907f/gcc%2Fch%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b85879e637df70ff99b3d7bbea2dd0997cc907f/gcc%2Fch%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2FChangeLog?ref=2b85879e637df70ff99b3d7bbea2dd0997cc907f", "patch": "@@ -1,3 +1,8 @@\n+2001-07-19  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* Makefile.in (lex.o): No dependence on dwarfout.h.\n+\t* lex.c: Don't include dwarfout.h.\n+\n 2001-07-10  Jan van Male  <jan.vanmale@fenk.wau.nl>\n \n \t* ch-tree.h: Remove prototype for combine_parm_decls, unused"}, {"sha": "05925f60cc2236cc8a42c4c7429a6d010940446c", "filename": "gcc/ch/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b85879e637df70ff99b3d7bbea2dd0997cc907f/gcc%2Fch%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b85879e637df70ff99b3d7bbea2dd0997cc907f/gcc%2Fch%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2FMakefile.in?ref=2b85879e637df70ff99b3d7bbea2dd0997cc907f", "patch": "@@ -290,7 +290,7 @@ lang.o : lang.c $(CONFIG_H) $(CHILL_TREE_H) $(srcdir)/../input.h lex.h \\\n \t$(srcdir)/../diagnostic.h\n lex.o : lex.c $(CONFIG_H) $(CHILL_TREE_H) $(RTL_H) $(srcdir)/../flags.h \\\n \t$(srcdir)/../input.h $(srcdir)/parse.h $(srcdir)/../system.h\t\\\n-\t$(srcdir)/../toplev.h lex.h $(srcdir)/../dwarfout.h hash.h\n+\t$(srcdir)/../toplev.h lex.h hash.h\n loop.o : loop.c $(CONFIG_H) $(RTL_H) $(CHILL_TREE_H) lex.h \\\n \t$(srcdir)/../flags.h $(srcdir)/../input.h \\\n \t$(srcdir)/../tree.h $(srcdir)/../system.h $(srcdir)/../toplev.h"}, {"sha": "4eae0a5df3dbad48b7d4bea6ae5b9be246c10579", "filename": "gcc/ch/lex.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b85879e637df70ff99b3d7bbea2dd0997cc907f/gcc%2Fch%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b85879e637df70ff99b3d7bbea2dd0997cc907f/gcc%2Fch%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Flex.c?ref=2b85879e637df70ff99b3d7bbea2dd0997cc907f", "patch": "@@ -35,10 +35,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"toplev.h\"\n #include \"tm_p.h\"\n \n-#ifdef DWARF_DEBUGGING_INFO\n-#include \"dwarfout.h\"\n-#endif\n-\n #ifdef MULTIBYTE_CHARS\n #include <locale.h>\n #endif"}, {"sha": "0fa3fdb4bc8943315ac51ebaf07d15fdea7f182a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b85879e637df70ff99b3d7bbea2dd0997cc907f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b85879e637df70ff99b3d7bbea2dd0997cc907f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2b85879e637df70ff99b3d7bbea2dd0997cc907f", "patch": "@@ -1,3 +1,11 @@\n+2001-07-19  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* decl2.c: Don't include dwarfout.h and dwarf2out.h.\n+\t* optimize.c: Include debug.h.\n+\t(maybe_clone_body): Use debug hook.\n+\t* semantics.c: Include debug.h.\n+\t(expand_body): Use debug hook.\n+\n 2001-07-19  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* spew.c (read_token, yyerror): Remove CPP_INT, CPP_FLOAT cases."}, {"sha": "c3070b9c0fa6778906aa95e876fe6bede2bdb848", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b85879e637df70ff99b3d7bbea2dd0997cc907f/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b85879e637df70ff99b3d7bbea2dd0997cc907f/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=2b85879e637df70ff99b3d7bbea2dd0997cc907f", "patch": "@@ -244,7 +244,7 @@ cp/decl.o: cp/decl.c $(CXX_TREE_H) flags.h cp/lex.h cp/decl.h stack.h \\\n   output.h $(EXPR_H) except.h toplev.h hash.h $(GGC_H) $(RTL_H) \\\n   cp/operators.def $(TM_P_H)\n cp/decl2.o: cp/decl2.c $(CXX_TREE_H) flags.h cp/lex.h cp/decl.h $(EXPR_H) \\\n-  output.h except.h toplev.h dwarf2out.h dwarfout.h $(GGC_H) $(RTL_H)\n+  output.h except.h toplev.h $(GGC_H) $(RTL_H)\n cp/typeck2.o: cp/typeck2.c $(CXX_TREE_H) flags.h toplev.h output.h $(TM_P_H) \\\n    diagnostic.h\n cp/typeck.o: cp/typeck.c $(CXX_TREE_H) flags.h $(RTL_H) $(EXPR_H) toplev.h \\\n@@ -274,10 +274,10 @@ cp/error.o: cp/error.c $(CXX_TREE_H) toplev.h diagnostic.h\n cp/errfn.o: cp/errfn.c $(CXX_TREE_H) toplev.h\n cp/repo.o: cp/repo.c $(CXX_TREE_H) toplev.h $(GGC_H) diagnostic.h\n cp/semantics.o: cp/semantics.c $(CXX_TREE_H) cp/lex.h except.h toplev.h \\\n-  flags.h $(GGC_H) output.h $(RTL_H) $(TIMEVAR_H) $(EXPR_H)\n+  flags.h $(GGC_H) debug.h output.h $(RTL_H) $(TIMEVAR_H) $(EXPR_H)\n cp/dump.o: cp/dump.c $(CXX_TREE_H) c-dump.h\n cp/optimize.o: cp/optimize.c $(CXX_TREE_H) rtl.h integrate.h insn-config.h \\\n-  input.h params.h\n+  input.h params.h debug.h\n cp/mangle.o: cp/mangle.c $(CXX_TREE_H) toplev.h\n \n cp/parse.o: cp/parse.c $(CXX_TREE_H) flags.h cp/lex.h except.h output.h \\"}, {"sha": "5723f00479ddc38df2f7a2d41453fe05d1697b52", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b85879e637df70ff99b3d7bbea2dd0997cc907f/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b85879e637df70ff99b3d7bbea2dd0997cc907f/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=2b85879e637df70ff99b3d7bbea2dd0997cc907f", "patch": "@@ -40,8 +40,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"output.h\"\n #include \"except.h\"\n #include \"toplev.h\"\n-#include \"dwarf2out.h\"\n-#include \"dwarfout.h\"\n #include \"ggc.h\"\n #include \"timevar.h\"\n #include \"cpplib.h\""}, {"sha": "22e1eec527970f191d550730a0264c1270a36683", "filename": "gcc/cp/optimize.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b85879e637df70ff99b3d7bbea2dd0997cc907f/gcc%2Fcp%2Foptimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b85879e637df70ff99b3d7bbea2dd0997cc907f/gcc%2Fcp%2Foptimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foptimize.c?ref=2b85879e637df70ff99b3d7bbea2dd0997cc907f", "patch": "@@ -32,6 +32,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"ggc.h\"\n #include \"params.h\"\n #include \"hashtab.h\"\n+#include \"debug.h\"\n \n /* To Do:\n \n@@ -1104,7 +1105,7 @@ maybe_clone_body (fn)\n     return 0;\n \n   /* Emit the DWARF1 abstract instance.  */\n-  note_deferral_of_defined_inline_function (fn);\n+  (*debug_hooks->deferred_inline_function) (fn);\n \n   /* We know that any clones immediately follow FN in the TYPE_METHODS\n      list.  */"}, {"sha": "94a31fb92b99419285d98fd57842c167e626d709", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b85879e637df70ff99b3d7bbea2dd0997cc907f/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b85879e637df70ff99b3d7bbea2dd0997cc907f/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=2b85879e637df70ff99b3d7bbea2dd0997cc907f", "patch": "@@ -37,6 +37,7 @@\n #include \"expr.h\"\n #include \"output.h\"\n #include \"timevar.h\"\n+#include \"debug.h\"\n \n /* There routines provide a modular interface to perform many parsing\n    operations.  They may therefore be used during actual parsing, or\n@@ -2440,7 +2441,7 @@ expand_body (fn)\n \t we actually need to write this function out.  */\n       defer_fn (fn);\n       /* Let the back-end know that this funtion exists.  */\n-      note_deferral_of_defined_inline_function (fn);\n+      (*debug_hooks->deferred_inline_function) (fn);\n       return;\n     }\n "}, {"sha": "ea05106fb02caec213a26ef0fb7ac92d9792e6bc", "filename": "gcc/dbxout.c", "status": "modified", "additions": 36, "deletions": 28, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b85879e637df70ff99b3d7bbea2dd0997cc907f/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b85879e637df70ff99b3d7bbea2dd0997cc907f/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=2b85879e637df70ff99b3d7bbea2dd0997cc907f", "patch": "@@ -317,6 +317,7 @@ static void dbxout_begin_function\tPARAMS ((tree));\n \n static void dbxout_begin_block\t\tPARAMS ((unsigned, unsigned));\n static void dbxout_end_block\t\tPARAMS ((unsigned, unsigned));\n+static void dbxout_function_decl\tPARAMS ((tree));\n \n struct gcc_debug_hooks dbx_debug_hooks =\n {\n@@ -337,7 +338,10 @@ struct gcc_debug_hooks dbx_debug_hooks =\n #else\n   debug_nothing_tree,\t\t/* begin_function */\n #endif\n-  debug_nothing_int\t\t/* end_function */\n+  debug_nothing_int,\t\t/* end_function */\n+  dbxout_function_decl,\n+  debug_nothing_tree,\t\t/* global_decl */\n+  debug_nothing_tree\t\t/* deferred_inline_function */\n };\n #endif /* DBX_DEBUGGING_INFO  */\n \n@@ -357,7 +361,10 @@ struct gcc_debug_hooks xcoff_debug_hooks =\n   debug_nothing_int,\t\t/* end_prologue */\n   xcoffout_end_epilogue,\n   debug_nothing_tree,\t\t/* begin_function */\n-  xcoffout_end_function\n+  xcoffout_end_function,\n+  debug_nothing_tree,\t\t/* function_decl */\n+  debug_nothing_tree,\t\t/* global_decl */\n+  debug_nothing_tree\t\t/* deferred_inline_function */\n };\n #endif /* XCOFF_DEBUGGING_INFO  */\n \f\n@@ -608,6 +615,33 @@ dbxout_end_block (line, n)\n   ASM_OUTPUT_INTERNAL_LABEL (asmfile, \"LBE\", n);\n }\n \n+/* Output dbx data for a function definition.\n+   This includes a definition of the function name itself (a symbol),\n+   definitions of the parameters (locating them in the parameter list)\n+   and then output the block that makes up the function's body\n+   (including all the auto variables of the function).  */\n+\n+static void\n+dbxout_function_decl (decl)\n+     tree decl;\n+{\n+#ifndef DBX_FUNCTION_FIRST\n+  dbxout_begin_function (decl);\n+#endif\n+  dbxout_block (DECL_INITIAL (decl), 0, DECL_ARGUMENTS (decl));\n+#ifdef DBX_OUTPUT_FUNCTION_END\n+  DBX_OUTPUT_FUNCTION_END (asmfile, decl);\n+#endif\n+#if defined(ASM_OUTPUT_SECTION_NAME)\n+  if (use_gnu_debug_info_extensions\n+#if defined(NO_DBX_FUNCTION_END)\n+      && ! NO_DBX_FUNCTION_END\n+#endif\n+      )\n+    dbxout_function_end ();\n+#endif\n+}\n+\n #endif /* DBX_DEBUGGING_INFO  */\n \n /* At the end of compilation, finish writing the symbol table.\n@@ -2733,30 +2767,4 @@ dbxout_begin_function (decl)\n     dbxout_symbol (DECL_RESULT (decl), 1);\n }\n \n-/* Output dbx data for a function definition.\n-   This includes a definition of the function name itself (a symbol),\n-   definitions of the parameters (locating them in the parameter list)\n-   and then output the block that makes up the function's body\n-   (including all the auto variables of the function).  */\n-\n-void\n-dbxout_function (decl)\n-     tree decl;\n-{\n-#ifndef DBX_FUNCTION_FIRST\n-  dbxout_begin_function (decl);\n-#endif\n-  dbxout_block (DECL_INITIAL (decl), 0, DECL_ARGUMENTS (decl));\n-#ifdef DBX_OUTPUT_FUNCTION_END\n-  DBX_OUTPUT_FUNCTION_END (asmfile, decl);\n-#endif\n-#if defined(ASM_OUTPUT_SECTION_NAME)\n-  if (use_gnu_debug_info_extensions\n-#if defined(NO_DBX_FUNCTION_END)\n-      && ! NO_DBX_FUNCTION_END\n-#endif\n-      )\n-    dbxout_function_end ();\n-#endif\n-}\n #endif /* DBX_DEBUGGING_INFO || XCOFF_DEBUGGING_INFO */"}, {"sha": "988962dc54e41fc252ff77e8011528ba9399cdf5", "filename": "gcc/dbxout.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b85879e637df70ff99b3d7bbea2dd0997cc907f/gcc%2Fdbxout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b85879e637df70ff99b3d7bbea2dd0997cc907f/gcc%2Fdbxout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.h?ref=2b85879e637df70ff99b3d7bbea2dd0997cc907f", "patch": "@@ -25,4 +25,3 @@ extern int dbxout_symbol\t\tPARAMS ((tree, int));\n extern void dbxout_parms\t\tPARAMS ((tree));\n extern void dbxout_reg_parms\t\tPARAMS ((tree));\n extern int dbxout_syms\t\t\tPARAMS ((tree));\n-extern void dbxout_function\t\tPARAMS ((tree));"}, {"sha": "4e525d5c4497e0a7c0d27e440e6090c25b4082d0", "filename": "gcc/debug.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b85879e637df70ff99b3d7bbea2dd0997cc907f/gcc%2Fdebug.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b85879e637df70ff99b3d7bbea2dd0997cc907f/gcc%2Fdebug.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdebug.c?ref=2b85879e637df70ff99b3d7bbea2dd0997cc907f", "patch": "@@ -35,7 +35,10 @@ struct gcc_debug_hooks do_nothing_debug_hooks =\n   debug_nothing_int,\t\t/* end_prologue */\n   debug_nothing_void,\t\t/* end_epilogue */\n   debug_nothing_tree,\t\t/* begin_function */\n-  debug_nothing_int\t\t/* end_function */\n+  debug_nothing_int,\t\t/* end_function */\n+  debug_nothing_tree,\t\t/* function_decl */\n+  debug_nothing_tree,\t\t/* global_decl */\n+  debug_nothing_tree\t\t/* deferred_inline_function */\n };\n \n /* This file contains implementations of each debug hook that do"}, {"sha": "4a74bee83be982f667d2979eb6c36bef6962e93d", "filename": "gcc/debug.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b85879e637df70ff99b3d7bbea2dd0997cc907f/gcc%2Fdebug.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b85879e637df70ff99b3d7bbea2dd0997cc907f/gcc%2Fdebug.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdebug.h?ref=2b85879e637df70ff99b3d7bbea2dd0997cc907f", "patch": "@@ -73,6 +73,20 @@ struct gcc_debug_hooks\n \n   /* Record end of function.  LINE is highest line number in function.  */\n   void (* end_function) PARAMS ((unsigned int line));\n+\n+  /* Debug information for a function DECL.  This might include the\n+     function name (a symbol), its parameters, and the block that\n+     makes up the function's body, and the local variables of the\n+     function.  */\n+  void (* function_decl) PARAMS ((union tree_node *decl));\n+\n+  /* Debug information for a global DECL.  Called from toplev.c after\n+     compilation proper has finished.  */\n+  void (* global_decl) PARAMS ((union tree_node *decl));\n+\n+  /* DECL is an inline function, whose body is present, but which is\n+     not being output at this point.  */\n+  void (* deferred_inline_function) PARAMS ((union tree_node *decl));\n };\n \n extern struct gcc_debug_hooks *debug_hooks;"}, {"sha": "99fa2208f69a83345036b8b3d8aa41046427f98b", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b85879e637df70ff99b3d7bbea2dd0997cc907f/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b85879e637df70ff99b3d7bbea2dd0997cc907f/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=2b85879e637df70ff99b3d7bbea2dd0997cc907f", "patch": "@@ -3022,6 +3022,7 @@ static void dwarf2out_start_source_file\tPARAMS ((unsigned, const char *));\n static void dwarf2out_end_source_file\tPARAMS ((unsigned));\n static void dwarf2out_begin_block\tPARAMS ((unsigned, unsigned));\n static void dwarf2out_end_block\t\tPARAMS ((unsigned, unsigned));\n+static void dwarf2out_global_decl\tPARAMS ((tree));\n \n /* The debug hooks structure.  */\n \n@@ -3040,7 +3041,10 @@ struct gcc_debug_hooks dwarf2_debug_hooks =\n   debug_nothing_int,\t\t/* end_prologue */\n   dwarf2out_end_epilogue,\n   debug_nothing_tree,\t\t/* begin_function */\n-  debug_nothing_int\t\t/* end_function */\n+  debug_nothing_int,\t\t/* end_function */\n+  dwarf2out_decl,\t\t/* function_decl */\n+  dwarf2out_global_decl,\n+  debug_nothing_tree\t\t/* deferred_inline_function */\n };\n \f\n /* NOTE: In the comments in this file, many references are made to\n@@ -11011,6 +11015,21 @@ dwarf2out_add_library_unit_info (filename, context_list)\n     }\n }\n \n+/* Debug information for a global DECL.  Called from toplev.c after\n+   compilation proper has finished.  */\n+static void\n+dwarf2out_global_decl (decl)\n+     tree decl;\n+{\n+  /* Output DWARF2 information for file-scope tentative data object\n+     declarations, file-scope (extern) function declarations (which\n+     had no corresponding body) and file-scope tagged type\n+     declarations and definitions which have not yet been forced out.  */\n+\n+  if (TREE_CODE (decl) != FUNCTION_DECL || !DECL_INITIAL (decl))\n+    dwarf2out_decl (decl);\n+}\n+\n /* Write the debugging output for DECL.  */\n \n void"}, {"sha": "1d3644d3b1c988cacf56d925819684bfe0d80088", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 65, "deletions": 4, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b85879e637df70ff99b3d7bbea2dd0997cc907f/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b85879e637df70ff99b3d7bbea2dd0997cc907f/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=2b85879e637df70ff99b3d7bbea2dd0997cc907f", "patch": "@@ -574,7 +574,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"insn-config.h\"\n #include \"reload.h\"\n #include \"output.h\"\n-#include \"dwarfout.h\"\n #include \"toplev.h\"\n #include \"tm_p.h\"\n #include \"debug.h\"\n@@ -801,6 +800,10 @@ static void dwarfout_end_epilogue\tPARAMS ((void));\n static void dwarfout_source_line\tPARAMS ((unsigned int, const char *));\n static void dwarfout_end_prologue\tPARAMS ((unsigned int));\n static void dwarfout_end_function\tPARAMS ((unsigned int));\n+static void dwarfout_function_decl\tPARAMS ((tree));\n+static void dwarfout_global_decl\tPARAMS ((tree));\n+static void dwarfout_deferred_inline_function\tPARAMS ((tree));\n+static void dwarfout_file_scope_decl \tPARAMS ((tree , int));\n static const char *dwarf_tag_name\tPARAMS ((unsigned));\n static const char *dwarf_attr_name\tPARAMS ((unsigned));\n static const char *dwarf_stack_op_name\tPARAMS ((unsigned));\n@@ -1389,7 +1392,10 @@ struct gcc_debug_hooks dwarf_debug_hooks =\n   dwarfout_end_prologue,\n   dwarfout_end_epilogue,\n   debug_nothing_tree,\t\t/* begin_function */\n-  dwarfout_end_function\n+  dwarfout_end_function,\n+  dwarfout_function_decl,\n+  dwarfout_global_decl,\n+  dwarfout_deferred_inline_function\n };\n \f\n /************************ general utility functions **************************/\n@@ -5324,7 +5330,7 @@ output_decl (decl, containing_scope)\n \n       /* If we're emitting an out-of-line copy of an inline function,\n \t set up to refer to the abstract instance emitted from\n-\t note_deferral_of_defined_inline_function.  */\n+\t dwarfout_deferred_inline_function.  */\n       if (DECL_INLINE (decl) && ! DECL_ABSTRACT (decl)\n \t  && ! (containing_scope && TYPE_P (containing_scope)))\n \tset_decl_origin_self (decl);\n@@ -5631,7 +5637,62 @@ output_decl (decl, containing_scope)\n     }\n }\n \f\n-void\n+/* Output debug information for a function.  */\n+static void\n+dwarfout_function_decl (decl)\n+     tree decl;\n+{\n+  dwarfout_file_scope_decl (decl, 0);\n+}\n+\n+/* Debug information for a global DECL.  Called from toplev.c after\n+   compilation proper has finished.  */\n+static void\n+dwarfout_global_decl (decl)\n+     tree decl;\n+{\n+  /* Output DWARF information for file-scope tentative data object\n+     declarations, file-scope (extern) function declarations (which\n+     had no corresponding body) and file-scope tagged type\n+     declarations and definitions which have not yet been forced out.  */\n+\n+  if (TREE_CODE (decl) != FUNCTION_DECL || !DECL_INITIAL (decl))\n+    dwarfout_file_scope_decl (decl, 1);\n+}\n+\n+/* DECL is an inline function, whose body is present, but which is not\n+   being output at this point.  (We're putting that off until we need\n+   to do it.)  */\n+static void\n+dwarfout_deferred_inline_function (decl)\n+     tree decl;\n+{\n+  /* Generate the DWARF info for the \"abstract\" instance of a function\n+     which we may later generate inlined and/or out-of-line instances\n+     of.  */\n+  if ((DECL_INLINE (decl) || DECL_ABSTRACT (decl))\n+      && ! DECL_ABSTRACT_ORIGIN (decl))\n+    {\n+      /* The front-end may not have set CURRENT_FUNCTION_DECL, but the\n+\t DWARF code expects it to be set in this case.  Intuitively,\n+\t DECL is the function we just finished defining, so setting\n+\t CURRENT_FUNCTION_DECL is sensible.  */\n+      tree saved_cfd = current_function_decl;\n+      int was_abstract = DECL_ABSTRACT (decl);\n+      current_function_decl = decl;\n+\n+      /* Let the DWARF code do its work.  */\n+      set_decl_abstract_flags (decl, 1);\n+      dwarfout_file_scope_decl (decl, 0);\n+      if (! was_abstract)\n+\tset_decl_abstract_flags (decl, 0);\n+\n+      /* Reset CURRENT_FUNCTION_DECL.  */\n+      current_function_decl = saved_cfd;\n+    }\n+}\n+\n+static void\n dwarfout_file_scope_decl (decl, set_finalizing)\n      register tree decl;\n      register int set_finalizing;"}, {"sha": "973c07e143244f7b85d18db52b31265f456b076e", "filename": "gcc/dwarfout.h", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c60e94a70efc44dd419ec5119dad3aa7813949d3/gcc%2Fdwarfout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c60e94a70efc44dd419ec5119dad3aa7813949d3/gcc%2Fdwarfout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.h?ref=c60e94a70efc44dd419ec5119dad3aa7813949d3", "patch": "@@ -1,21 +0,0 @@\n-/* dwarfout.h - Various declarations for functions found in dwarfout.c\n-   Copyright (C) 1998, 1999, 2000 Free Software Foundation, Inc.\n-\n-This file is part of GNU CC.\n-\n-GNU CC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 2, or (at your option)\n-any later version.\n-\n-GNU CC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GNU CC; see the file COPYING.  If not, write to\n-the Free Software Foundation, 59 Temple Place - Suite 330,\n-Boston, MA 02111-1307, USA.  */\n-\n-extern void dwarfout_file_scope_decl \tPARAMS ((tree , int));"}, {"sha": "b4d25f268c19f0b650df161d5deb3c994747776e", "filename": "gcc/final.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b85879e637df70ff99b3d7bbea2dd0997cc907f/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b85879e637df70ff99b3d7bbea2dd0997cc907f/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=2b85879e637df70ff99b3d7bbea2dd0997cc907f", "patch": "@@ -76,10 +76,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"xcoffout.h\"\n #endif\n \n-#ifdef DWARF_DEBUGGING_INFO\n-#include \"dwarfout.h\"\n-#endif\n-\n #if defined (DWARF2_UNWIND_INFO) || defined (DWARF2_DEBUGGING_INFO)\n #include \"dwarf2out.h\"\n #endif"}, {"sha": "b19395e8e0db1faae1630d383b5f457f1b57cbd9", "filename": "gcc/po/POTFILES.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b85879e637df70ff99b3d7bbea2dd0997cc907f/gcc%2Fpo%2FPOTFILES.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b85879e637df70ff99b3d7bbea2dd0997cc907f/gcc%2Fpo%2FPOTFILES.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2FPOTFILES.in?ref=2b85879e637df70ff99b3d7bbea2dd0997cc907f", "patch": "@@ -731,7 +731,6 @@ dwarf2asm.h\n dwarf2out.c\n dwarf2out.h\n dwarfout.c\n-dwarfout.h\n emit-rtl.c\n #enquire.c is used only by GCC maintainers and installers\n errors.c"}, {"sha": "4dc4a65c08d911e04d39f1fd18bbc1b4c4335d22", "filename": "gcc/sdbout.c", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b85879e637df70ff99b3d7bbea2dd0997cc907f/gcc%2Fsdbout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b85879e637df70ff99b3d7bbea2dd0997cc907f/gcc%2Fsdbout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsdbout.c?ref=2b85879e637df70ff99b3d7bbea2dd0997cc907f", "patch": "@@ -99,6 +99,7 @@ static void sdbout_begin_block\t\tPARAMS ((unsigned, unsigned));\n static void sdbout_end_block\t\tPARAMS ((unsigned, unsigned));\n static void sdbout_source_line\t\tPARAMS ((unsigned int, const char *));\n static void sdbout_end_epilogue\t\tPARAMS ((void));\n+static void sdbout_global_decl\t\tPARAMS ((tree));\n #ifndef MIPS_DEBUGGING_INFO\n static void sdbout_begin_prologue\tPARAMS ((unsigned int, const char *));\n #endif\n@@ -315,7 +316,10 @@ struct gcc_debug_hooks sdb_debug_hooks =\n #endif\n   sdbout_end_epilogue,\n   sdbout_begin_function,\n-  sdbout_end_function\n+  sdbout_end_function,\n+  debug_nothing_tree,\t\t/* function_decl */\n+  sdbout_global_decl,\n+  debug_nothing_tree\t\t/* deferred_inline_function */\n };\n \f\n #if 0\n@@ -1472,6 +1476,32 @@ sdbout_reg_parms (parms)\n       }\n }\n \f\n+/* Output debug information for a global DECL.  Called from toplev.c\n+   after compilation proper has finished.  */\n+\n+static void\n+sdbout_global_decl (decl)\n+     tree decl;\n+{\n+  if (TREE_CODE (decl) == VAR_DECL\n+      && DECL_INITIAL (decl)\n+      && ! DECL_EXTERNAL (decl)\n+      && DECL_RTL (decl) != 0)\n+    {\n+      /* The COFF linker can move initialized global vars to the end.\n+\t And that can screw up the symbol ordering.  By putting the\n+\t symbols in that order to begin with, we avoid a problem.\n+\t mcsun!unido!fauern!tumuc!pes@uunet.uu.net.  */\n+      if (TREE_PUBLIC (decl))\n+\tsdbout_symbol (decl, 0);\n+\n+      /* Output COFF information for non-global file-scope initialized\n+\t variables.  */\n+      if (GET_CODE (DECL_RTL (decl)) == MEM)\n+\tsdbout_toplevel_data (decl);\n+    }\n+}\n+\f\n /* Describe the beginning of an internal block within a function.\n    Also output descriptions of variables defined in this block.\n "}, {"sha": "0e510b94f50371bc5e6cd918b74a6f236b331ac0", "filename": "gcc/toplev.c", "status": "modified", "additions": 3, "deletions": 100, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b85879e637df70ff99b3d7bbea2dd0997cc907f/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b85879e637df70ff99b3d7bbea2dd0997cc907f/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=2b85879e637df70ff99b3d7bbea2dd0997cc907f", "patch": "@@ -68,10 +68,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"integrate.h\"\n #include \"debug.h\"\n \n-#ifdef DWARF_DEBUGGING_INFO\n-#include \"dwarfout.h\"\n-#endif\n-\n #if defined (DWARF2_UNWIND_INFO) || defined (DWARF2_DEBUGGING_INFO)\n #include \"dwarf2out.h\"\n #endif\n@@ -2059,47 +2055,7 @@ check_global_declarations (vec, len)\n \twarning_with_decl (decl, \"`%s' defined but not used\");\n \n       timevar_push (TV_SYMOUT);\n-#ifdef SDB_DEBUGGING_INFO\n-      /* The COFF linker can move initialized global vars to the end.\n-\t And that can screw up the symbol ordering.\n-\t By putting the symbols in that order to begin with,\n-\t we avoid a problem.  mcsun!unido!fauern!tumuc!pes@uunet.uu.net.  */\n-      if (write_symbols == SDB_DEBUG && TREE_CODE (decl) == VAR_DECL\n-\t  && TREE_PUBLIC (decl) && DECL_INITIAL (decl)\n-\t  && ! DECL_EXTERNAL (decl)\n-\t  && DECL_RTL (decl) != 0)\n-\tsdbout_symbol (decl, 0);\n-\n-      /* Output COFF information for non-global\n-\t file-scope initialized variables.  */\n-      if (write_symbols == SDB_DEBUG\n-\t  && TREE_CODE (decl) == VAR_DECL\n-\t  && DECL_INITIAL (decl)\n-\t  && ! DECL_EXTERNAL (decl)\n-\t  && DECL_RTL (decl) != 0\n-\t  && GET_CODE (DECL_RTL (decl)) == MEM)\n-\tsdbout_toplevel_data (decl);\n-#endif /* SDB_DEBUGGING_INFO  */\n-#ifdef DWARF_DEBUGGING_INFO\n-      /* Output DWARF information for file-scope tentative data object\n-\t declarations, file-scope (extern) function declarations (which\n-\t had no corresponding body) and file-scope tagged type declarations\n-\t and definitions which have not yet been forced out.  */\n-\n-      if (write_symbols == DWARF_DEBUG\n-\t  && (TREE_CODE (decl) != FUNCTION_DECL || !DECL_INITIAL (decl)))\n-\tdwarfout_file_scope_decl (decl, 1);\n-#endif\n-#ifdef DWARF2_DEBUGGING_INFO\n-      /* Output DWARF2 information for file-scope tentative data object\n-\t declarations, file-scope (extern) function declarations (which\n-\t had no corresponding body) and file-scope tagged type declarations\n-\t and definitions which have not yet been forced out.  */\n-\n-      if (write_symbols == DWARF2_DEBUG\n-\t  && (TREE_CODE (decl) != FUNCTION_DECL || !DECL_INITIAL (decl)))\n-\tdwarf2out_decl (decl);\n-#endif\n+      (*debug_hooks->global_decl) (decl);\n       timevar_pop (TV_SYMOUT);\n     }\n }\n@@ -2634,46 +2590,6 @@ rest_of_type_compilation (type, toplev)\n   timevar_pop (TV_SYMOUT);\n }\n \n-/* DECL is an inline function, whose body is present, but which is not\n-   being output at this point.  (We're putting that off until we need\n-   to do it.)  If there are any actions that need to take place,\n-   including the emission of debugging information for the function,\n-   this is where they should go.  This function may be called by\n-   language-dependent code for front-ends that do not even generate\n-   RTL for functions that don't need to be put out.  */\n-\n-void\n-note_deferral_of_defined_inline_function (decl)\n-     tree decl ATTRIBUTE_UNUSED;\n-{\n-#ifdef DWARF_DEBUGGING_INFO\n-  /* Generate the DWARF info for the \"abstract\" instance of a function\n-     which we may later generate inlined and/or out-of-line instances\n-     of.  */\n-  if (write_symbols == DWARF_DEBUG\n-      && (DECL_INLINE (decl) || DECL_ABSTRACT (decl))\n-      && ! DECL_ABSTRACT_ORIGIN (decl))\n-    {\n-      /* The front-end may not have set CURRENT_FUNCTION_DECL, but the\n-\t DWARF code expects it to be set in this case.  Intuitively,\n-\t DECL is the function we just finished defining, so setting\n-\t CURRENT_FUNCTION_DECL is sensible.  */\n-      tree saved_cfd = current_function_decl;\n-      int was_abstract = DECL_ABSTRACT (decl);\n-      current_function_decl = decl;\n-\n-      /* Let the DWARF code do its work.  */\n-      set_decl_abstract_flags (decl, 1);\n-      dwarfout_file_scope_decl (decl, 0);\n-      if (! was_abstract)\n-\tset_decl_abstract_flags (decl, 0);\n-\n-      /* Reset CURRENT_FUNCTION_DECL.  */\n-      current_function_decl = saved_cfd;\n-    }\n-#endif\n-}\n-\n /* FNDECL is an inline function which is about to be emitted out of line.\n    Do any preparation, such as emitting abstract debug info for the inline\n    before it gets mangled by optimization.  */\n@@ -2822,7 +2738,7 @@ rest_of_compilation (decl)\n \t   declared inline but not inlined, and those inlined even\n \t   though they weren't declared inline.  Conveniently, that's\n \t   what DECL_INLINE means at this point.  */\n-\tnote_deferral_of_defined_inline_function (decl);\n+\t(*debug_hooks->deferred_inline_function) (decl);\n \n       if (DECL_DEFER_OUTPUT (decl))\n \t{\n@@ -3802,20 +3718,7 @@ rest_of_compilation (decl)\n      generated.  During that call, we *will* be routed past here.  */\n \n   timevar_push (TV_SYMOUT);\n-#ifdef DBX_DEBUGGING_INFO\n-  if (write_symbols == DBX_DEBUG)\n-    dbxout_function (decl);\n-#endif\n-\n-#ifdef DWARF_DEBUGGING_INFO\n-  if (write_symbols == DWARF_DEBUG)\n-    dwarfout_file_scope_decl (decl, 0);\n-#endif\n-\n-#ifdef DWARF2_DEBUGGING_INFO\n-  if (write_symbols == DWARF2_DEBUG)\n-    dwarf2out_decl (decl);\n-#endif\n+  (*debug_hooks->function_decl) (decl);\n   timevar_pop (TV_SYMOUT);\n \n  exit_rest_of_compilation:"}, {"sha": "99af4b1eac6113f6deb7e860e4ba851ca5b28613", "filename": "gcc/toplev.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b85879e637df70ff99b3d7bbea2dd0997cc907f/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b85879e637df70ff99b3d7bbea2dd0997cc907f/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=2b85879e637df70ff99b3d7bbea2dd0997cc907f", "patch": "@@ -123,8 +123,6 @@ extern void fnotice\t\t\tPARAMS ((FILE *, const char *, ...))\n \n extern int wrapup_global_declarations   PARAMS ((union tree_node **, int));\n extern void check_global_declarations   PARAMS ((union tree_node **, int));\n-extern void note_deferral_of_defined_inline_function\n-\t\t\t\t\tPARAMS ((union tree_node *));\n extern void note_outlining_of_inline_function\n \t\t\t\t\tPARAMS ((union tree_node *));\n "}]}