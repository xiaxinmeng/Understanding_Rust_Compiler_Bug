{"sha": "2252a8025df20cb5c58659cde04ac0ee0eee3ee1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjI1MmE4MDI1ZGYyMGNiNWM1ODY1OWNkZTA0YWMwZWUwZWVlM2VlMQ==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2017-01-13T12:09:13Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2017-01-13T12:09:13Z"}, "message": "Only declare gets for C++ < 2014 on Solaris (PR libstdc++/78979)\n\n\tPR libstdc++/78979\n\t* inclhack.def (solaris_gets_c11, solaris_gets_cxx14)\n\t(solaris_std_gets_cxx14, solaris_stdlib_noreturn): New fixes.\n\t* fixincl.x: Regenerate.\n\t* tests/base/iso/stdio_iso.h [SOLARIS_GETS_C11_CHECK,\n\tSOLARIS_GETS_CXX14_CHECK, SOLARIS_STD_GETS_CXX14_CHECK,\n\tSOLARIS_STDLIB_NORETURN_CHECK]: New tests.\n\nFrom-SVN: r244428", "tree": {"sha": "7409cd5362bbab1784a96fbdfb5284ad35c4d7b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7409cd5362bbab1784a96fbdfb5284ad35c4d7b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2252a8025df20cb5c58659cde04ac0ee0eee3ee1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2252a8025df20cb5c58659cde04ac0ee0eee3ee1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2252a8025df20cb5c58659cde04ac0ee0eee3ee1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2252a8025df20cb5c58659cde04ac0ee0eee3ee1/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a181b2bcd7d3d8e7af0f4503b5425ea0b5738c82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a181b2bcd7d3d8e7af0f4503b5425ea0b5738c82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a181b2bcd7d3d8e7af0f4503b5425ea0b5738c82"}], "stats": {"total": 299, "additions": 294, "deletions": 5}, "files": [{"sha": "2e6dd11ba9b9c119a60aa6b909c733da1a68aabd", "filename": "fixincludes/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2252a8025df20cb5c58659cde04ac0ee0eee3ee1/fixincludes%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2252a8025df20cb5c58659cde04ac0ee0eee3ee1/fixincludes%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2FChangeLog?ref=2252a8025df20cb5c58659cde04ac0ee0eee3ee1", "patch": "@@ -1,3 +1,13 @@\n+2017-01-13  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\tPR libstdc++/78979\n+\t* inclhack.def (solaris_gets_c11, solaris_gets_cxx14)\n+\t(solaris_std_gets_cxx14, solaris_stdlib_noreturn): New fixes.\n+\t* fixincl.x: Regenerate.\n+\t* tests/base/iso/stdio_iso.h [SOLARIS_GETS_C11_CHECK,\n+\tSOLARIS_GETS_CXX14_CHECK, SOLARIS_STD_GETS_CXX14_CHECK,\n+\tSOLARIS_STDLIB_NORETURN_CHECK]: New tests.\n+\n 2016-11-21  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* inclhack.def (solaris_math_12): New fix."}, {"sha": "6a010d6b70654db310e1c2a7dfb882218405bb1c", "filename": "fixincludes/fixincl.x", "status": "modified", "additions": 183, "deletions": 5, "changes": 188, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2252a8025df20cb5c58659cde04ac0ee0eee3ee1/fixincludes%2Ffixincl.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2252a8025df20cb5c58659cde04ac0ee0eee3ee1/fixincludes%2Ffixincl.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixincl.x?ref=2252a8025df20cb5c58659cde04ac0ee0eee3ee1", "patch": "@@ -2,11 +2,11 @@\n  * \n  * DO NOT EDIT THIS FILE   (fixincl.x)\n  * \n- * It has been AutoGen-ed  November 20, 2016 at 12:02:46 PM by AutoGen 5.16.2\n+ * It has been AutoGen-ed  January 12, 2017 at 11:46:34 AM by AutoGen 5.16.2\n  * From the definitions    inclhack.def\n  * and the template file   fixincl\n  */\n-/* DO NOT SVN-MERGE THIS FILE, EITHER Sun Nov 20 12:02:47 MET 2016\n+/* DO NOT SVN-MERGE THIS FILE, EITHER Thu Jan 12 11:46:34  2017\n  *\n  * You must regenerate it.  Use the ./genfixes script.\n  *\n@@ -15,7 +15,7 @@\n  * certain ANSI-incompatible system header files which are fixed to work\n  * correctly with ANSI C and placed in a directory that GNU C will search.\n  *\n- * This file contains 242 fixup descriptions.\n+ * This file contains 246 fixup descriptions.\n  *\n  * See README for more information.\n  *\n@@ -7066,6 +7066,84 @@ static const char* apzSolaris_Getc_Strict_StdcPatch[] = {\n     \"%1(!defined(_STRICT_STDC) || (__cplusplus >= 199711L))%2\",\n     (char*)NULL };\n \n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Solaris_Gets_C11 fix\n+ */\n+tSCC zSolaris_Gets_C11Name[] =\n+     \"solaris_gets_c11\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zSolaris_Gets_C11List[] =\n+  \"iso/stdio_iso.h\\0\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+tSCC* apzSolaris_Gets_C11Machs[] = {\n+        \"*-*-solaris2*\",\n+        (const char*)NULL };\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zSolaris_Gets_C11Select0[] =\n+       \"(extern char[ \\t]*\\\\*gets\\\\(char \\\\*\\\\));\";\n+\n+#define    SOLARIS_GETS_C11_TEST_CT  1\n+static tTestDesc aSolaris_Gets_C11Tests[] = {\n+  { TT_EGREP,    zSolaris_Gets_C11Select0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Solaris_Gets_C11\n+ */\n+static const char* apzSolaris_Gets_C11Patch[] = {\n+    \"format\",\n+    \"#if __STDC_VERSION__ < 201112L && __cplusplus < 201402L\\n\\\n+%1 __attribute__((__deprecated__));\\n\\\n+#endif\",\n+    (char*)NULL };\n+\n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Solaris_Gets_Cxx14 fix\n+ */\n+tSCC zSolaris_Gets_Cxx14Name[] =\n+     \"solaris_gets_cxx14\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zSolaris_Gets_Cxx14List[] =\n+  \"iso/stdio_iso.h\\0\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+tSCC* apzSolaris_Gets_Cxx14Machs[] = {\n+        \"*-*-solaris2*\",\n+        (const char*)NULL };\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zSolaris_Gets_Cxx14Select0[] =\n+       \"(#if __STDC_VERSION__ < 201112L)\\n\\\n+(extern char\\t\\\\*gets\\\\(char \\\\*\\\\) __ATTR_DEPRECATED;)\";\n+\n+#define    SOLARIS_GETS_CXX14_TEST_CT  1\n+static tTestDesc aSolaris_Gets_Cxx14Tests[] = {\n+  { TT_EGREP,    zSolaris_Gets_Cxx14Select0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Solaris_Gets_Cxx14\n+ */\n+static const char* apzSolaris_Gets_Cxx14Patch[] = {\n+    \"format\",\n+    \"%1 && __cplusplus < 201402L\\n\\\n+%2\",\n+    (char*)NULL };\n+\n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n  *\n  *  Description of Solaris_Int_Const fix\n@@ -7818,6 +7896,45 @@ using std::__flsbuf;\\n\\\n %2\",\n     (char*)NULL };\n \n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Solaris_Std_Gets_Cxx14 fix\n+ */\n+tSCC zSolaris_Std_Gets_Cxx14Name[] =\n+     \"solaris_std_gets_cxx14\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zSolaris_Std_Gets_Cxx14List[] =\n+  \"stdio.h\\0\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+tSCC* apzSolaris_Std_Gets_Cxx14Machs[] = {\n+        \"*-*-solaris2*\",\n+        (const char*)NULL };\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zSolaris_Std_Gets_Cxx14Select0[] =\n+       \"using std::gets;\";\n+\n+#define    SOLARIS_STD_GETS_CXX14_TEST_CT  1\n+static tTestDesc aSolaris_Std_Gets_Cxx14Tests[] = {\n+  { TT_EGREP,    zSolaris_Std_Gets_Cxx14Select0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Solaris_Std_Gets_Cxx14\n+ */\n+static const char* apzSolaris_Std_Gets_Cxx14Patch[] = {\n+    \"format\",\n+    \"#if __cplusplus < 201402L\\n\\\n+%0\\n\\\n+#endif\",\n+    (char*)NULL };\n+\n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n  *\n  *  Description of Solaris_Stdio_Tag fix\n@@ -7859,6 +7976,43 @@ static const char* apzSolaris_Stdio_TagPatch[] = { sed_cmd_z,\n     \"-e\", \"s/defined(__cplusplus) && (__cplusplus < 54321L)/0/\",\n     (char*)NULL };\n \n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Solaris_Stdlib_Noreturn fix\n+ */\n+tSCC zSolaris_Stdlib_NoreturnName[] =\n+     \"solaris_stdlib_noreturn\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zSolaris_Stdlib_NoreturnList[] =\n+  \"iso/stdlib_c99.h\\0\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+tSCC* apzSolaris_Stdlib_NoreturnMachs[] = {\n+        \"*-*-solaris2*\",\n+        (const char*)NULL };\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zSolaris_Stdlib_NoreturnSelect0[] =\n+       \"(extern) _Noreturn (void quick_exit\\\\(int\\\\));\";\n+\n+#define    SOLARIS_STDLIB_NORETURN_TEST_CT  1\n+static tTestDesc aSolaris_Stdlib_NoreturnTests[] = {\n+  { TT_EGREP,    zSolaris_Stdlib_NoreturnSelect0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Solaris_Stdlib_Noreturn\n+ */\n+static const char* apzSolaris_Stdlib_NoreturnPatch[] = {\n+    \"format\",\n+    \"%1 %2 __attribute__((__noreturn__));\",\n+    (char*)NULL };\n+\n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n  *\n  *  Description of Statsswtch fix\n@@ -9908,9 +10062,9 @@ static const char* apzX11_SprintfPatch[] = {\n  *\n  *  List of all fixes\n  */\n-#define REGEX_COUNT          279\n+#define REGEX_COUNT          283\n #define MACH_LIST_SIZE_LIMIT 187\n-#define FIX_COUNT            242\n+#define FIX_COUNT            246\n \n /*\n  *  Enumerate the fixes\n@@ -10087,6 +10241,8 @@ typedef enum {\n     SOLARIS_COMPLEX_CXX_FIXIDX,\n     SOLARIS_CXX_LINKAGE_FIXIDX,\n     SOLARIS_GETC_STRICT_STDC_FIXIDX,\n+    SOLARIS_GETS_C11_FIXIDX,\n+    SOLARIS_GETS_CXX14_FIXIDX,\n     SOLARIS_INT_CONST_FIXIDX,\n     SOLARIS_INT_LIMITS_1_FIXIDX,\n     SOLARIS_INT_LIMITS_2_FIXIDX,\n@@ -10105,7 +10261,9 @@ typedef enum {\n     SOLARIS_POW_INT_OVERLOAD_FIXIDX,\n     SOLARIS_RWLOCK_INIT_1_FIXIDX,\n     SOLARIS_STD___FILBUF_FIXIDX,\n+    SOLARIS_STD_GETS_CXX14_FIXIDX,\n     SOLARIS_STDIO_TAG_FIXIDX,\n+    SOLARIS_STDLIB_NORETURN_FIXIDX,\n     STATSSWTCH_FIXIDX,\n     STDIO_STDARG_H_FIXIDX,\n     STDIO_VA_LIST_FIXIDX,\n@@ -11016,6 +11174,16 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n      SOLARIS_GETC_STRICT_STDC_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n      aSolaris_Getc_Strict_StdcTests,   apzSolaris_Getc_Strict_StdcPatch, 0 },\n \n+  {  zSolaris_Gets_C11Name,    zSolaris_Gets_C11List,\n+     apzSolaris_Gets_C11Machs,\n+     SOLARIS_GETS_C11_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aSolaris_Gets_C11Tests,   apzSolaris_Gets_C11Patch, 0 },\n+\n+  {  zSolaris_Gets_Cxx14Name,    zSolaris_Gets_Cxx14List,\n+     apzSolaris_Gets_Cxx14Machs,\n+     SOLARIS_GETS_CXX14_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aSolaris_Gets_Cxx14Tests,   apzSolaris_Gets_Cxx14Patch, 0 },\n+\n   {  zSolaris_Int_ConstName,    zSolaris_Int_ConstList,\n      apzSolaris_Int_ConstMachs,\n      SOLARIS_INT_CONST_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n@@ -11106,11 +11274,21 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n      SOLARIS_STD___FILBUF_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n      aSolaris_Std___FilbufTests,   apzSolaris_Std___FilbufPatch, 0 },\n \n+  {  zSolaris_Std_Gets_Cxx14Name,    zSolaris_Std_Gets_Cxx14List,\n+     apzSolaris_Std_Gets_Cxx14Machs,\n+     SOLARIS_STD_GETS_CXX14_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aSolaris_Std_Gets_Cxx14Tests,   apzSolaris_Std_Gets_Cxx14Patch, 0 },\n+\n   {  zSolaris_Stdio_TagName,    zSolaris_Stdio_TagList,\n      apzSolaris_Stdio_TagMachs,\n      SOLARIS_STDIO_TAG_TEST_CT, FD_MACH_ONLY,\n      aSolaris_Stdio_TagTests,   apzSolaris_Stdio_TagPatch, 0 },\n \n+  {  zSolaris_Stdlib_NoreturnName,    zSolaris_Stdlib_NoreturnList,\n+     apzSolaris_Stdlib_NoreturnMachs,\n+     SOLARIS_STDLIB_NORETURN_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aSolaris_Stdlib_NoreturnTests,   apzSolaris_Stdlib_NoreturnPatch, 0 },\n+\n   {  zStatsswtchName,    zStatsswtchList,\n      apzStatsswtchMachs,\n      STATSSWTCH_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,"}, {"sha": "03a267bd375623c521f49da25983c396506a94bd", "filename": "fixincludes/inclhack.def", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2252a8025df20cb5c58659cde04ac0ee0eee3ee1/fixincludes%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2252a8025df20cb5c58659cde04ac0ee0eee3ee1/fixincludes%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Finclhack.def?ref=2252a8025df20cb5c58659cde04ac0ee0eee3ee1", "patch": "@@ -3592,6 +3592,43 @@ fix = {\n     \"#if\t!defined(_REENTRANT) && !defined(_LP64) && !defined(_STRICT_STDC)\";\n };\n \n+/*\n+ *  Solaris <iso/stdio_iso.h> should deprecate gets before C11.\n+ */\n+fix = {\n+    hackname  = solaris_gets_c11;\n+    mach      = \"*-*-solaris2*\";\n+    files     = \"iso/stdio_iso.h\";\n+    select    = \"(extern char[ \\t]*\\\\*gets\\\\(char \\\\*\\\\));\";\n+\n+    c_fix     = format;\n+    c_fix_arg = \"#if __STDC_VERSION__ < 201112L && __cplusplus < 201402L\\n\"\n+    \t\t\"%1 __attribute__((__deprecated__));\\n\"\n+\t\t\"#endif\";\n+\n+    test_text = \"extern char\t*gets(char *);\";\n+};\n+\n+/*\n+ *  Solaris <iso/stdio_iso.h> shouldn't declare gets for C++14.\n+ */\n+fix = {\n+    hackname  = solaris_gets_cxx14;\n+    mach      = \"*-*-solaris2*\";\n+    files     = \"iso/stdio_iso.h\";\n+    select    = <<- _EOSelect_\n+(#if __STDC_VERSION__ < 201112L)\n+(extern char\t\\*gets\\(char \\*\\) __ATTR_DEPRECATED;)\n+_EOSelect_;\n+    c_fix     = format;\n+    c_fix_arg = \"%1 && __cplusplus < 201402L\\n%2\";\n+\n+    test_text = <<- _EOText_\n+#if __STDC_VERSION__ < 201112L\n+extern char\t*gets(char *) __ATTR_DEPRECATED;\n+_EOText_;\n+};\n+\n /*\n  * Sun Solaris 2 has a version of sys/int_const.h that defines\n  * UINT8_C and UINT16_C to unsigned constants.\n@@ -3981,6 +4018,21 @@ fix = {\n \t\t\"#endif\";\n };\n \n+/*\n+ *  Solaris <stdio.h> shouldn't use std::gets for C++14.\n+ */\n+fix = {\n+    hackname  = solaris_std_gets_cxx14;\n+    mach      = \"*-*-solaris2*\";\n+    files     = \"stdio.h\";\n+    select    = \"using std::gets;\";\n+\n+    c_fix     = format;\n+    c_fix_arg = \"#if __cplusplus < 201402L\\n%0\\n#endif\";\n+\n+    test_text = \"using std::gets;\";\n+};\n+\n /*\n  * Sun Solaris 8 has what appears to be some gross workaround for\n  * some old version of their c++ compiler.  G++ doesn't want it\n@@ -3999,6 +4051,21 @@ fix = {\n     test_text = \"#if\\tdefined(__cplusplus) && (__cplusplus < 54321L)\";\n };\n \n+/*\n+ *  Solaris <stdlib.h> shouldn't use _Noreturn, breaks with C++.\n+ */\n+fix = {\n+    hackname  = solaris_stdlib_noreturn;\n+    mach      = \"*-*-solaris2*\";\n+    files     = \"iso/stdlib_c99.h\";\n+    select    = \"(extern) _Noreturn (void quick_exit\\\\(int\\\\));\";\n+\n+    c_fix     = format;\n+    c_fix_arg = \"%1 %2 __attribute__((__noreturn__));\";\n+\n+    test_text = \"extern _Noreturn void quick_exit(int);\";\n+};\n+\n /*\n  *  a missing semi-colon at the end of the statsswtch structure definition.\n  */"}, {"sha": "e2d70b4c62ea64b1258905f8325df9dfa40da455", "filename": "fixincludes/tests/base/iso/stdio_iso.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2252a8025df20cb5c58659cde04ac0ee0eee3ee1/fixincludes%2Ftests%2Fbase%2Fiso%2Fstdio_iso.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2252a8025df20cb5c58659cde04ac0ee0eee3ee1/fixincludes%2Ftests%2Fbase%2Fiso%2Fstdio_iso.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fiso%2Fstdio_iso.h?ref=2252a8025df20cb5c58659cde04ac0ee0eee3ee1", "patch": "@@ -12,3 +12,16 @@\n #if defined( SOLARIS_GETC_STRICT_STDC_CHECK )\n #if\t!defined(_REENTRANT) && !defined(_LP64) && (!defined(_STRICT_STDC) || (__cplusplus >= 199711L))\n #endif  /* SOLARIS_GETC_STRICT_STDC_CHECK */\n+\n+\n+#if defined( SOLARIS_GETS_C11_CHECK )\n+#if __STDC_VERSION__ < 201112L && __cplusplus < 201402L\n+extern char\t*gets(char *) __attribute__((__deprecated__));\n+#endif\n+#endif  /* SOLARIS_GETS_C11_CHECK */\n+\n+\n+#if defined( SOLARIS_GETS_CXX14_CHECK )\n+#if __STDC_VERSION__ < 201112L && __cplusplus < 201402L\n+extern char\t*gets(char *) __ATTR_DEPRECATED;\n+#endif  /* SOLARIS_GETS_CXX14_CHECK */"}, {"sha": "0c500dea0861ab0938711005eac784ef4a7929a7", "filename": "fixincludes/tests/base/iso/stdlib_c99.h", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2252a8025df20cb5c58659cde04ac0ee0eee3ee1/fixincludes%2Ftests%2Fbase%2Fiso%2Fstdlib_c99.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2252a8025df20cb5c58659cde04ac0ee0eee3ee1/fixincludes%2Ftests%2Fbase%2Fiso%2Fstdlib_c99.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fiso%2Fstdlib_c99.h?ref=2252a8025df20cb5c58659cde04ac0ee0eee3ee1", "patch": "@@ -0,0 +1,14 @@\n+/*  DO NOT EDIT THIS FILE.\n+\n+    It has been auto-edited by fixincludes from:\n+\n+\t\"fixinc/tests/inc/iso/stdlib_c99.h\"\n+\n+    This had to be done to correct non-standard usages in the\n+    original, manufacturer supplied header file.  */\n+\n+\n+\n+#if defined( SOLARIS_STDLIB_NORETURN_CHECK )\n+extern void quick_exit(int) __attribute__((__noreturn__));\n+#endif  /* SOLARIS_STDLIB_NORETURN_CHECK */"}, {"sha": "491c75da6e5540b713942c7674f92e1dac4fc1da", "filename": "fixincludes/tests/base/stdio.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2252a8025df20cb5c58659cde04ac0ee0eee3ee1/fixincludes%2Ftests%2Fbase%2Fstdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2252a8025df20cb5c58659cde04ac0ee0eee3ee1/fixincludes%2Ftests%2Fbase%2Fstdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fstdio.h?ref=2252a8025df20cb5c58659cde04ac0ee0eee3ee1", "patch": "@@ -90,6 +90,13 @@ using std::__flsbuf;\n #endif  /* SOLARIS_STD___FILBUF_CHECK */\n \n \n+#if defined( SOLARIS_STD_GETS_CXX14_CHECK )\n+#if __cplusplus < 201402L\n+using std::gets;\n+#endif\n+#endif  /* SOLARIS_STD_GETS_CXX14_CHECK */\n+\n+\n #if defined( STDIO_STDARG_H_CHECK )\n \n #endif  /* STDIO_STDARG_H_CHECK */"}]}