{"sha": "15ac4ccfb45f27788e027d00316475d6c79f77ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTVhYzRjY2ZiNDVmMjc3ODhlMDI3ZDAwMzE2NDc1ZDZjNzlmNzdlZA==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2004-08-23T07:09:47Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2004-08-23T07:09:47Z"}, "message": "mips.md (any_extend): New code macro.\n\n\t* config/mips/mips.md (any_extend): New code macro.\n\t(u, su): New code attributes.\n\t({,u}mulsidi3, {,u}mulsidi3_32bit_internal, {,u}mulsidi3_32bit_r4000)\n\t({u,s}mulsi3_highpart, {u,s}mulsi3_highpart_internal)\n\t({u,s}mulsi3_highpart_mulhi_internal, {s,u}muldi3_highpart)\n\t(*{s,u}mul_acc_di): Redefine using any_extend.\n\t(*{,u}muls_di, *{s,u}msac_di): Likewise.  Change names of patterns\n\tto reflect real insn names.\n\t(*mulsidi3_64bit, *mulsidi3_64bit_parts): Replace use of match_operator\n\twith an any_extend template.\n\t({u,s}mulsi3_highpart_neg_mulhi_internal): Redefine using any_extend.\n\tAdd '*' to name.\n\nFrom-SVN: r86407", "tree": {"sha": "1560c4e96f945f0c87370eae32e6b922d3c4296c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1560c4e96f945f0c87370eae32e6b922d3c4296c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15ac4ccfb45f27788e027d00316475d6c79f77ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15ac4ccfb45f27788e027d00316475d6c79f77ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15ac4ccfb45f27788e027d00316475d6c79f77ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15ac4ccfb45f27788e027d00316475d6c79f77ed/comments", "author": null, "committer": null, "parents": [{"sha": "d46c971dbaf5b57bb3c811a40192b728627a767e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d46c971dbaf5b57bb3c811a40192b728627a767e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d46c971dbaf5b57bb3c811a40192b728627a767e"}], "stats": {"total": 439, "additions": 138, "deletions": 301}, "files": [{"sha": "dfcf820acdc90bfd34d7e20f53c5161783df82f0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15ac4ccfb45f27788e027d00316475d6c79f77ed/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15ac4ccfb45f27788e027d00316475d6c79f77ed/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=15ac4ccfb45f27788e027d00316475d6c79f77ed", "patch": "@@ -1,3 +1,18 @@\n+2004-08-23  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config/mips/mips.md (any_extend): New code macro.\n+\t(u, su): New code attributes.\n+\t({,u}mulsidi3, {,u}mulsidi3_32bit_internal, {,u}mulsidi3_32bit_r4000)\n+\t({u,s}mulsi3_highpart, {u,s}mulsi3_highpart_internal)\n+\t({u,s}mulsi3_highpart_mulhi_internal, {s,u}muldi3_highpart)\n+\t(*{s,u}mul_acc_di): Redefine using any_extend.\n+\t(*{,u}muls_di, *{s,u}msac_di): Likewise.  Change names of patterns\n+\tto reflect real insn names.\n+\t(*mulsidi3_64bit, *mulsidi3_64bit_parts): Replace use of match_operator\n+\twith an any_extend template.\n+\t({u,s}mulsi3_highpart_neg_mulhi_internal): Redefine using any_extend.\n+\tAdd '*' to name.\n+\n 2004-08-23  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/mips/mips.h (GENERATE_MULT3_SI): Check TARGET_MAD."}, {"sha": "cecd282f7b7f315d0fb87564a4d3ce1cea1b96db", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 123, "deletions": 301, "changes": 424, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15ac4ccfb45f27788e027d00316475d6c79f77ed/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15ac4ccfb45f27788e027d00316475d6c79f77ed/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=15ac4ccfb45f27788e027d00316475d6c79f77ed", "patch": "@@ -306,6 +306,17 @@\n ;; a single define_expand template.\n (define_code_macro any_cond [unordered ordered unlt unge uneq ltgt unle ungt\n \t\t\t     eq ne gt ge lt le gtu geu ltu leu])\n+\n+;; This code macro allows signed and unsigned widening multiplications\n+;; to use the same template.\n+(define_code_macro any_extend [sign_extend zero_extend])\n+\n+;; <u> expands to an empty string when doing a signed operation and\n+;; \"u\" when doing an unsigned operation.\n+(define_code_attr u [(sign_extend \"\") (zero_extend \"u\")])\n+\n+;; <su> is like <u>, but the signed form expands to \"s\" rather than \"\".\n+(define_code_attr su [(sign_extend \"s\") (zero_extend \"u\")])\n \f\n ;; .........................\n ;;\n@@ -1297,12 +1308,11 @@\n \n ;; ??? We could define a mulditi3 pattern when TARGET_64BIT.\n \n-(define_expand \"mulsidi3\"\n+(define_expand \"<u>mulsidi3\"\n   [(parallel\n       [(set (match_operand:DI 0 \"register_operand\")\n-\t    (mult:DI\n-\t       (sign_extend:DI (match_operand:SI 1 \"register_operand\"))\n-\t       (sign_extend:DI (match_operand:SI 2 \"register_operand\"))))\n+\t    (mult:DI (any_extend:DI (match_operand:SI 1 \"register_operand\"))\n+\t\t     (any_extend:DI (match_operand:SI 2 \"register_operand\"))))\n        (clobber (scratch:DI))\n        (clobber (scratch:DI))\n        (clobber (scratch:DI))])]\n@@ -1311,71 +1321,66 @@\n   if (!TARGET_64BIT)\n     {\n       if (!TARGET_FIX_R4000)\n-\temit_insn (gen_mulsidi3_32bit_internal (operands[0], operands[1],\n-\t\t\t\t\t\toperands[2]));\n+\temit_insn (gen_<u>mulsidi3_32bit_internal (operands[0], operands[1],\n+\t\t\t\t\t\t   operands[2]));\n       else\n-\temit_insn (gen_mulsidi3_32bit_r4000 (operands[0], operands[1],\n-\t\t\t\t\t     operands[2]));\n+\temit_insn (gen_<u>mulsidi3_32bit_r4000 (operands[0], operands[1],\n+\t\t\t\t\t        operands[2]));\n       DONE;\n     }\n })\n \n-(define_insn \"mulsidi3_32bit_internal\"\n+(define_insn \"<u>mulsidi3_32bit_internal\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=x\")\n-\t(mult:DI\n-\t   (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"d\"))\n-\t   (sign_extend:DI (match_operand:SI 2 \"register_operand\" \"d\"))))]\n+\t(mult:DI (any_extend:DI (match_operand:SI 1 \"register_operand\" \"d\"))\n+\t\t (any_extend:DI (match_operand:SI 2 \"register_operand\" \"d\"))))]\n   \"!TARGET_64BIT && !TARGET_FIX_R4000\"\n-  \"mult\\t%1,%2\"\n-  [(set_attr \"type\"\t\"imul\")\n-   (set_attr \"mode\"\t\"SI\")])\n+  \"mult<u>\\t%1,%2\"\n+  [(set_attr \"type\" \"imul\")\n+   (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"mulsidi3_32bit_r4000\"\n+(define_insn \"<u>mulsidi3_32bit_r4000\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(mult:DI\n-\t   (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"d\"))\n-\t   (sign_extend:DI (match_operand:SI 2 \"register_operand\" \"d\"))))\n+\t(mult:DI (any_extend:DI (match_operand:SI 1 \"register_operand\" \"d\"))\n+\t\t (any_extend:DI (match_operand:SI 2 \"register_operand\" \"d\"))))\n    (clobber (match_scratch:DI 3 \"=x\"))]\n   \"!TARGET_64BIT && TARGET_FIX_R4000\"\n   \"mult\\t%1,%2\\;mflo\\t%L0;mfhi\\t%M0\"\n-  [(set_attr \"type\"\t\"imul\")\n-   (set_attr \"mode\"\t\"SI\")\n-   (set_attr \"length\"\t\"12\")])\n+  [(set_attr \"type\" \"imul\")\n+   (set_attr \"mode\" \"SI\")\n+   (set_attr \"length\" \"12\")])\n \n-(define_insn_and_split \"*mulsidi3_64bit\"\n+(define_insn_and_split \"*<u>mulsidi3_64bit\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(mult:DI (match_operator:DI 1 \"extend_operator\"\n-\t\t    [(match_operand:SI 3 \"register_operand\" \"d\")])\n-\t\t (match_operator:DI 2 \"extend_operator\"\n-\t\t    [(match_operand:SI 4 \"register_operand\" \"d\")])))\n-   (clobber (match_scratch:DI 5 \"=l\"))\n-   (clobber (match_scratch:DI 6 \"=h\"))\n-   (clobber (match_scratch:DI 7 \"=d\"))]\n-  \"TARGET_64BIT && !TARGET_FIX_R4000\n-   && GET_CODE (operands[1]) == GET_CODE (operands[2])\"\n+\t(mult:DI (any_extend:DI (match_operand:SI 1 \"register_operand\" \"d\"))\n+\t\t (any_extend:DI (match_operand:SI 2 \"register_operand\" \"d\"))))\n+   (clobber (match_scratch:DI 3 \"=l\"))\n+   (clobber (match_scratch:DI 4 \"=h\"))\n+   (clobber (match_scratch:DI 5 \"=d\"))]\n+  \"TARGET_64BIT && !TARGET_FIX_R4000\"\n   \"#\"\n   \"&& reload_completed\"\n   [(parallel\n-       [(set (match_dup 5)\n+       [(set (match_dup 3)\n \t     (sign_extend:DI\n-\t\t(mult:SI (match_dup 3)\n-\t\t         (match_dup 4))))\n-\t(set (match_dup 6)\n+\t\t(mult:SI (match_dup 1)\n+\t\t\t (match_dup 2))))\n+\t(set (match_dup 4)\n \t     (ashiftrt:DI\n-\t\t(mult:DI (match_dup 1)\n-\t\t\t (match_dup 2))\n+\t\t(mult:DI (any_extend:DI (match_dup 1))\n+\t\t\t (any_extend:DI (match_dup 2)))\n \t\t(const_int 32)))])\n \n-   ;; OP7 <- LO, OP0 <- HI\n-   (set (match_dup 7) (unspec:DI [(match_dup 5) (match_dup 6)] UNSPEC_MFHILO))\n-   (set (match_dup 0) (unspec:DI [(match_dup 6) (match_dup 5)] UNSPEC_MFHILO))\n+   ;; OP5 <- LO, OP0 <- HI\n+   (set (match_dup 5) (unspec:DI [(match_dup 3) (match_dup 4)] UNSPEC_MFHILO))\n+   (set (match_dup 0) (unspec:DI [(match_dup 4) (match_dup 3)] UNSPEC_MFHILO))\n \n-   ;; Zero-extend OP7.\n-   (set (match_dup 7)\n-\t(ashift:DI (match_dup 7)\n+   ;; Zero-extend OP5.\n+   (set (match_dup 5)\n+\t(ashift:DI (match_dup 5)\n \t\t   (const_int 32)))\n-   (set (match_dup 7)\n-\t(lshiftrt:DI (match_dup 7)\n+   (set (match_dup 5)\n+\t(lshiftrt:DI (match_dup 5)\n \t\t     (const_int 32)))\n \n    ;; Shift OP0 into place.\n@@ -1386,304 +1391,142 @@\n    ;; OR the two halves together\n    (set (match_dup 0)\n \t(ior:DI (match_dup 0)\n-\t\t(match_dup 7)))]\n+\t\t(match_dup 5)))]\n   \"\"\n-  [(set_attr \"type\"\t\"imul\")\n-   (set_attr \"mode\"\t\"SI\")\n-   (set_attr \"length\"\t\"24\")])\n+  [(set_attr \"type\" \"imul\")\n+   (set_attr \"mode\" \"SI\")\n+   (set_attr \"length\" \"24\")])\n \n-(define_insn \"*mulsidi3_64bit_parts\"\n+(define_insn \"*<u>mulsidi3_64bit_parts\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=l\")\n \t(sign_extend:DI\n \t   (mult:SI (match_operand:SI 2 \"register_operand\" \"d\")\n \t\t    (match_operand:SI 3 \"register_operand\" \"d\"))))\n    (set (match_operand:DI 1 \"register_operand\" \"=h\")\n \t(ashiftrt:DI\n-\t   (mult:DI\n-\t      (match_operator:DI 4 \"extend_operator\" [(match_dup 2)])\n-\t      (match_operator:DI 5 \"extend_operator\" [(match_dup 3)]))\n+\t   (mult:DI (any_extend:DI (match_dup 2))\n+\t\t    (any_extend:DI (match_dup 3)))\n \t   (const_int 32)))]\n-  \"TARGET_64BIT && !TARGET_FIX_R4000\n-   && GET_CODE (operands[4]) == GET_CODE (operands[5])\"\n-{\n-  if (GET_CODE (operands[4]) == SIGN_EXTEND)\n-    return \"mult\\t%2,%3\";\n-  else\n-    return \"multu\\t%2,%3\";\n-}\n+  \"TARGET_64BIT && !TARGET_FIX_R4000\"\n+  \"mult<u>\\t%2,%3\"\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"mode\" \"SI\")])\n \n-(define_expand \"umulsidi3\"\n-  [(parallel\n-      [(set (match_operand:DI 0 \"register_operand\")\n-\t    (mult:DI\n-\t       (zero_extend:DI (match_operand:SI 1 \"register_operand\"))\n-\t       (zero_extend:DI (match_operand:SI 2 \"register_operand\"))))\n-       (clobber (scratch:DI))\n-       (clobber (scratch:DI))\n-       (clobber (scratch:DI))])]\n-  \"!TARGET_64BIT || !TARGET_FIX_R4000\"\n-{\n-  if (!TARGET_64BIT)\n-    {\n-      if (!TARGET_FIX_R4000)\n-\temit_insn (gen_umulsidi3_32bit_internal (operands[0], operands[1],\n-\t\t\t\t\t\t operands[2]));\n-      else\n-\temit_insn (gen_umulsidi3_32bit_r4000 (operands[0], operands[1],\n-\t\t\t\t\t      operands[2]));\n-      DONE;\n-    }\n-})\n-\n-(define_insn \"umulsidi3_32bit_internal\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=x\")\n-\t(mult:DI\n-\t   (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"d\"))\n-\t   (zero_extend:DI (match_operand:SI 2 \"register_operand\" \"d\"))))]\n-  \"!TARGET_64BIT && !TARGET_FIX_R4000\"\n-  \"multu\\t%1,%2\"\n-  [(set_attr \"type\"\t\"imul\")\n-   (set_attr \"mode\"\t\"SI\")])\n-\n-(define_insn \"umulsidi3_32bit_r4000\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(mult:DI\n-\t   (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"d\"))\n-\t   (zero_extend:DI (match_operand:SI 2 \"register_operand\" \"d\"))))\n-   (clobber (match_scratch:DI 3 \"=x\"))]\n-  \"!TARGET_64BIT && TARGET_FIX_R4000\"\n-  \"multu\\t%1,%2\\;mflo\\t%L0;mfhi\\t%M0\"\n-  [(set_attr \"type\"\t\"imul\")\n-   (set_attr \"mode\"\t\"SI\")\n-   (set_attr \"length\"\t\"12\")])\n-\n ;; Widening multiply with negation.\n-(define_insn \"*muls_di\"\n+(define_insn \"*muls<u>_di\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=x\")\n         (neg:DI\n \t (mult:DI\n-\t  (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"d\"))\n-\t  (sign_extend:DI (match_operand:SI 2 \"register_operand\" \"d\")))))]\n-  \"!TARGET_64BIT && ISA_HAS_MULS\"\n-  \"muls\\t$0,%1,%2\"\n-  [(set_attr \"type\"     \"imul\")\n-   (set_attr \"length\"   \"4\")\n-   (set_attr \"mode\"     \"SI\")])\n-\n-(define_insn \"*umuls_di\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=x\")\n-\t(neg:DI\n-\t (mult:DI\n-\t  (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"d\"))\n-\t  (zero_extend:DI (match_operand:SI 2 \"register_operand\" \"d\")))))]\n+\t  (any_extend:DI (match_operand:SI 1 \"register_operand\" \"d\"))\n+\t  (any_extend:DI (match_operand:SI 2 \"register_operand\" \"d\")))))]\n   \"!TARGET_64BIT && ISA_HAS_MULS\"\n-  \"mulsu\\t$0,%1,%2\"\n-  [(set_attr \"type\"     \"imul\")\n-   (set_attr \"length\"   \"4\")\n-   (set_attr \"mode\"     \"SI\")])\n+  \"muls<u>\\t$0,%1,%2\"\n+  [(set_attr \"type\" \"imul\")\n+   (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"*smsac_di\"\n+(define_insn \"*msac<u>_di\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=x\")\n         (minus:DI\n \t   (match_operand:DI 3 \"register_operand\" \"0\")\n \t   (mult:DI\n-\t      (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"d\"))\n-\t      (sign_extend:DI (match_operand:SI 2 \"register_operand\" \"d\")))))]\n+\t      (any_extend:DI (match_operand:SI 1 \"register_operand\" \"d\"))\n+\t      (any_extend:DI (match_operand:SI 2 \"register_operand\" \"d\")))))]\n   \"!TARGET_64BIT && ISA_HAS_MSAC\"\n {\n   if (TARGET_MIPS5500)\n-    return \"msub\\t%1,%2\";\n+    return \"msub<u>\\t%1,%2\";\n   else\n-    return \"msac\\t$0,%1,%2\";\n+    return \"msac<u>\\t$0,%1,%2\";\n }\n-  [(set_attr \"type\"     \"imadd\")\n-   (set_attr \"length\"   \"4\")\n-   (set_attr \"mode\"     \"SI\")])\n-\n-(define_insn \"*umsac_di\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=x\")\n-\t(minus:DI\n-\t   (match_operand:DI 3 \"register_operand\" \"0\")\n-\t   (mult:DI\n-\t      (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"d\"))\n-\t      (zero_extend:DI (match_operand:SI 2 \"register_operand\" \"d\")))))]\n-  \"!TARGET_64BIT && ISA_HAS_MSAC\"\n-{\n-  if (TARGET_MIPS5500)\n-    return \"msubu\\t%1,%2\";\n-  else\n-    return \"msacu\\t$0,%1,%2\";\n-}\n-  [(set_attr \"type\"     \"imadd\")\n-   (set_attr \"length\"   \"4\")\n-   (set_attr \"mode\"     \"SI\")])\n+  [(set_attr \"type\" \"imadd\")\n+   (set_attr \"mode\" \"SI\")])\n \n ;; _highpart patterns\n-(define_expand \"umulsi3_highpart\"\n-  [(set (match_operand:SI 0 \"register_operand\")\n-\t(truncate:SI\n-\t (lshiftrt:DI\n-\t  (mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\"))\n-\t\t   (zero_extend:DI (match_operand:SI 2 \"register_operand\")))\n-\t  (const_int 32))))]\n-  \"ISA_HAS_MULHI || !TARGET_FIX_R4000\"\n-{\n-  if (ISA_HAS_MULHI)\n-    emit_insn (gen_umulsi3_highpart_mulhi_internal (operands[0], operands[1],\n-\t\t\t\t\t\t    operands[2]));\n-  else\n-    emit_insn (gen_umulsi3_highpart_internal (operands[0], operands[1],\n-\t\t\t\t\t      operands[2]));\n-  DONE;\n-})\n-\n-(define_insn \"umulsi3_highpart_internal\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=h\")\n-\t(truncate:SI\n-\t (lshiftrt:DI\n-\t  (mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"d\"))\n-\t\t   (zero_extend:DI (match_operand:SI 2 \"register_operand\" \"d\")))\n-\t  (const_int 32))))\n-   (clobber (match_scratch:SI 3 \"=l\"))]\n-  \"!ISA_HAS_MULHI && !TARGET_FIX_R4000\"\n-  \"multu\\t%1,%2\"\n-  [(set_attr \"type\"   \"imul\")\n-   (set_attr \"mode\"   \"SI\")\n-   (set_attr \"length\" \"4\")])\n \n-(define_insn \"umulsi3_highpart_mulhi_internal\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=h,d\")\n-        (truncate:SI\n-\t (lshiftrt:DI\n-\t  (mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"d,d\"))\n-\t\t   (zero_extend:DI (match_operand:SI 2 \"register_operand\" \"d,d\")))\n-\t  (const_int 32))))\n-   (clobber (match_scratch:SI 3 \"=l,l\"))\n-   (clobber (match_scratch:SI 4 \"=X,h\"))]\n-  \"ISA_HAS_MULHI\"\n-  \"@\n-   multu\\t%1,%2\n-   mulhiu\\t%0,%1,%2\"\n-  [(set_attr \"type\"   \"imul\")\n-   (set_attr \"mode\"   \"SI\")\n-   (set_attr \"length\" \"4\")])\n-\n-(define_insn \"umulsi3_highpart_neg_mulhi_internal\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=h,d\")\n-        (truncate:SI\n-\t (lshiftrt:DI\n-\t  (neg:DI\n-\t   (mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"d,d\"))\n-\t\t    (zero_extend:DI (match_operand:SI 2 \"register_operand\" \"d,d\"))))\n-\t  (const_int 32))))\n-   (clobber (match_scratch:SI 3 \"=l,l\"))\n-   (clobber (match_scratch:SI 4 \"=X,h\"))]\n-  \"ISA_HAS_MULHI\"\n-  \"@\n-   mulshiu\\t%.,%1,%2\n-   mulshiu\\t%0,%1,%2\"\n-  [(set_attr \"type\"   \"imul\")\n-   (set_attr \"mode\"   \"SI\")\n-   (set_attr \"length\" \"4\")])\n-\n-(define_expand \"smulsi3_highpart\"\n+(define_expand \"<su>mulsi3_highpart\"\n   [(set (match_operand:SI 0 \"register_operand\")\n \t(truncate:SI\n \t (lshiftrt:DI\n-\t  (mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\"))\n-\t\t   (sign_extend:DI (match_operand:SI 2 \"register_operand\")))\n-         (const_int 32))))]\n+\t  (mult:DI (any_extend:DI (match_operand:SI 1 \"register_operand\"))\n+\t\t   (any_extend:DI (match_operand:SI 2 \"register_operand\")))\n+\t  (const_int 32))))]\n   \"ISA_HAS_MULHI || !TARGET_FIX_R4000\"\n {\n   if (ISA_HAS_MULHI)\n-    emit_insn (gen_smulsi3_highpart_mulhi_internal (operands[0], operands[1],\n-\t\t\t\t\t\t    operands[2]));\n+    emit_insn (gen_<su>mulsi3_highpart_mulhi_internal (operands[0],\n+\t\t\t\t\t\t       operands[1],\n+\t\t\t\t\t\t       operands[2]));\n   else\n-    emit_insn (gen_smulsi3_highpart_internal (operands[0], operands[1],\n-\t\t\t\t\t      operands[2]));\n+    emit_insn (gen_<su>mulsi3_highpart_internal (operands[0], operands[1],\n+\t\t\t\t\t         operands[2]));\n   DONE;\n })\n \n-(define_insn \"smulsi3_highpart_internal\"\n+(define_insn \"<su>mulsi3_highpart_internal\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=h\")\n \t(truncate:SI\n \t (lshiftrt:DI\n-\t  (mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"d\"))\n-\t\t   (sign_extend:DI (match_operand:SI 2 \"register_operand\" \"d\")))\n+\t  (mult:DI (any_extend:DI (match_operand:SI 1 \"register_operand\" \"d\"))\n+\t\t   (any_extend:DI (match_operand:SI 2 \"register_operand\" \"d\")))\n \t  (const_int 32))))\n    (clobber (match_scratch:SI 3 \"=l\"))]\n   \"!ISA_HAS_MULHI && !TARGET_FIX_R4000\"\n-  \"mult\\t%1,%2\"\n-  [(set_attr \"type\"\t\"imul\")\n-   (set_attr \"mode\"\t\"SI\")\n-   (set_attr \"length\"   \"4\")])\n+  \"mult<u>\\t%1,%2\"\n+  [(set_attr \"type\" \"imul\")\n+   (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"smulsi3_highpart_mulhi_internal\"\n+(define_insn \"<su>mulsi3_highpart_mulhi_internal\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=h,d\")\n         (truncate:SI\n \t (lshiftrt:DI\n-\t  (mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"d,d\"))\n-\t\t   (sign_extend:DI (match_operand:SI 2 \"register_operand\" \"d,d\")))\n+\t  (mult:DI\n+\t   (any_extend:DI (match_operand:SI 1 \"register_operand\" \"d,d\"))\n+\t   (any_extend:DI (match_operand:SI 2 \"register_operand\" \"d,d\")))\n \t  (const_int 32))))\n    (clobber (match_scratch:SI 3 \"=l,l\"))\n    (clobber (match_scratch:SI 4 \"=X,h\"))]\n   \"ISA_HAS_MULHI\"\n   \"@\n-   mult\\t%1,%2\n-   mulhi\\t%0,%1,%2\"\n-  [(set_attr \"type\"   \"imul\")\n-   (set_attr \"mode\"   \"SI\")\n-   (set_attr \"length\" \"4\")])\n+   mult<u>\\t%1,%2\n+   mulhi<u>\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"imul\")\n+   (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"smulsi3_highpart_neg_mulhi_internal\"\n+(define_insn \"*<su>mulsi3_highpart_neg_mulhi_internal\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=h,d\")\n         (truncate:SI\n \t (lshiftrt:DI\n \t  (neg:DI\n-\t   (mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"d,d\"))\n-\t\t    (sign_extend:DI (match_operand:SI 2 \"register_operand\" \"d,d\"))))\n+\t   (mult:DI\n+\t    (any_extend:DI (match_operand:SI 1 \"register_operand\" \"d,d\"))\n+\t    (any_extend:DI (match_operand:SI 2 \"register_operand\" \"d,d\"))))\n \t  (const_int 32))))\n    (clobber (match_scratch:SI 3 \"=l,l\"))\n    (clobber (match_scratch:SI 4 \"=X,h\"))]\n   \"ISA_HAS_MULHI\"\n   \"@\n-   mulshi\\t%.,%1,%2\n-   mulshi\\t%0,%1,%2\"\n-  [(set_attr \"type\"   \"imul\")\n-   (set_attr \"mode\"   \"SI\")])\n-\n-(define_insn \"smuldi3_highpart\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=h\")\n-\t(truncate:DI\n-\t (lshiftrt:TI\n-\t  (mult:TI\n-\t   (sign_extend:TI (match_operand:DI 1 \"register_operand\" \"d\"))\n-\t   (sign_extend:TI (match_operand:DI 2 \"register_operand\" \"d\")))\n-         (const_int 64))))\n-   (clobber (match_scratch:DI 3 \"=l\"))]\n-  \"TARGET_64BIT && !TARGET_FIX_R4000\"\n-  \"dmult\\t%1,%2\"\n-  [(set_attr \"type\"\t\"imul\")\n-   (set_attr \"mode\"\t\"DI\")])\n+   mulshi<u>\\t%.,%1,%2\n+   mulshi<u>\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"imul\")\n+   (set_attr \"mode\" \"SI\")])\n \n-;; Disable this pattern for -mfix-vr4120.  This is for VR4120 errata MD(0),\n-;; which says that dmultu does not always produce the correct result.\n-(define_insn \"umuldi3_highpart\"\n+;; Disable unsigned multiplication for -mfix-vr4120.  This is for VR4120\n+;; errata MD(0), which says that dmultu does not always produce the\n+;; correct result.\n+(define_insn \"<su>muldi3_highpart\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=h\")\n \t(truncate:DI\n \t (lshiftrt:TI\n \t  (mult:TI\n-\t   (zero_extend:TI (match_operand:DI 1 \"register_operand\" \"d\"))\n-\t   (zero_extend:TI (match_operand:DI 2 \"register_operand\" \"d\")))\n+\t   (any_extend:TI (match_operand:DI 1 \"register_operand\" \"d\"))\n+\t   (any_extend:TI (match_operand:DI 2 \"register_operand\" \"d\")))\n \t  (const_int 64))))\n    (clobber (match_scratch:DI 3 \"=l\"))]\n-  \"TARGET_64BIT && !TARGET_FIX_R4000 && !TARGET_FIX_VR4120\"\n-  \"dmultu\\t%1,%2\"\n-  [(set_attr \"type\"\t\"imul\")\n-   (set_attr \"mode\"\t\"DI\")])\n-\n+  \"TARGET_64BIT && !TARGET_FIX_R4000\n+   && !(<CODE> == ZERO_EXTEND && TARGET_FIX_VR4120)\"\n+  \"dmult<u>\\t%1,%2\"\n+  [(set_attr \"type\" \"imul\")\n+   (set_attr \"mode\" \"DI\")])\n \n ;; The R4650 supports a 32 bit multiply/ 64 bit accumulate\n ;; instruction.  The HI/LO registers are used as a 64 bit accumulator.\n@@ -1699,46 +1542,25 @@\n   [(set_attr \"type\"\t\"imadd\")\n    (set_attr \"mode\"\t\"SI\")])\n \n-(define_insn \"*umul_acc_di\"\n+(define_insn \"*<su>mul_acc_di\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=x\")\n \t(plus:DI\n-\t (mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"d\"))\n-\t\t  (zero_extend:DI (match_operand:SI 2 \"register_operand\" \"d\")))\n+\t (mult:DI (any_extend:DI (match_operand:SI 1 \"register_operand\" \"d\"))\n+\t\t  (any_extend:DI (match_operand:SI 2 \"register_operand\" \"d\")))\n \t (match_operand:DI 3 \"register_operand\" \"0\")))]\n   \"(TARGET_MAD || ISA_HAS_MACC)\n    && !TARGET_64BIT\"\n {\n   if (TARGET_MAD)\n-    return \"madu\\t%1,%2\";\n+    return \"mad<u>\\t%1,%2\";\n   else if (TARGET_MIPS5500)\n-    return \"maddu\\t%1,%2\";\n+    return \"madd<u>\\t%1,%2\";\n   else\n     /* See comment in *macc.  */\n-    return \"%[maccu\\t%@,%1,%2%]\";\n+    return \"%[macc<u>\\t%@,%1,%2%]\";\n }\n-  [(set_attr \"type\"   \"imadd\")\n-   (set_attr \"mode\"   \"SI\")])\n-\n-\n-(define_insn \"*smul_acc_di\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=x\")\n-\t(plus:DI\n-\t (mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"d\"))\n-\t\t  (sign_extend:DI (match_operand:SI 2 \"register_operand\" \"d\")))\n-\t (match_operand:DI 3 \"register_operand\" \"0\")))]\n-  \"(TARGET_MAD || ISA_HAS_MACC)\n-   && !TARGET_64BIT\"\n-{\n-  if (TARGET_MAD)\n-    return \"mad\\t%1,%2\";\n-  else if (TARGET_MIPS5500)\n-    return \"madd\\t%1,%2\";\n-  else\n-    /* See comment in *macc.  */\n-    return \"%[macc\\t%@,%1,%2%]\";\n-}\n-  [(set_attr \"type\"   \"imadd\")\n-   (set_attr \"mode\"   \"SI\")])\n+  [(set_attr \"type\" \"imadd\")\n+   (set_attr \"mode\" \"SI\")])\n \n ;; Floating point multiply accumulate instructions.\n "}]}