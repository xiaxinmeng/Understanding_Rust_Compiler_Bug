{"sha": "a2ef38b1f94dd108046e702ad46dcd8e9b34625e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTJlZjM4YjFmOTRkZDEwODA0NmU3MDJhZDQ2ZGNkOGU5YjM0NjI1ZQ==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2021-02-16T21:27:53Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2021-02-18T12:19:08Z"}, "message": "match.pd: Restrict clz cmp 0 replacement by single_use, PR99142\n\nIf we're not going to eliminate the clz, it's better for the\ncomparison to use that result than its input, so we don't\nextend the lifetime of the input.  Also, an additional use\nof the result is more likely cheaper than a compare of the\ninput, in particular considering that the clz may have made\navailable a non-zero condition matching the original use.\nThe \"s\" modifier doesn't stop this situation, as the\ntransformation wouldn't result in \"an expression with more\nthan one operator\"; a gating single_use condition on the\nresult is necessary.\n\ngcc:\n\tPR tree-optimization/99142\n\t* match.pd (clz cmp 0): Gate replacement on single_use of clz result.\n\ngcc/testsuite:\n\tPR tree-optimization/99142\n\t* gcc.dg/tree-ssa/pr99142.c: New test.", "tree": {"sha": "420219e9af3ec6e6a11346524ba24eec8678f761", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/420219e9af3ec6e6a11346524ba24eec8678f761"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2ef38b1f94dd108046e702ad46dcd8e9b34625e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2ef38b1f94dd108046e702ad46dcd8e9b34625e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2ef38b1f94dd108046e702ad46dcd8e9b34625e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2ef38b1f94dd108046e702ad46dcd8e9b34625e/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1541628df83eb690954f426d56d268fb57f1af6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1541628df83eb690954f426d56d268fb57f1af6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1541628df83eb690954f426d56d268fb57f1af6"}], "stats": {"total": 18, "additions": 16, "deletions": 2}, "files": [{"sha": "760f773cf1b13794094d11543ffa07c55769936d", "filename": "gcc/match.pd", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ef38b1f94dd108046e702ad46dcd8e9b34625e/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ef38b1f94dd108046e702ad46dcd8e9b34625e/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=a2ef38b1f94dd108046e702ad46dcd8e9b34625e", "patch": "@@ -6315,8 +6315,8 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n  (for op (eq ne)\n       cmp (lt ge)\n   (simplify\n-   (op (clz:s @0) INTEGER_CST@1)\n-   (if (integer_zerop (@1))\n+   (op (clz:s@2 @0) INTEGER_CST@1)\n+   (if (integer_zerop (@1) && single_use (@2))\n     /* clz(X) == 0 is (int)X < 0 and clz(X) != 0 is (int)X >= 0.  */\n     (with { tree stype = signed_type_for (TREE_TYPE (@0));\n \t    HOST_WIDE_INT val = 0;"}, {"sha": "1781a89de32a73bdfdeae9e6898c230932442798", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr99142.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ef38b1f94dd108046e702ad46dcd8e9b34625e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr99142.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ef38b1f94dd108046e702ad46dcd8e9b34625e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr99142.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr99142.c?ref=a2ef38b1f94dd108046e702ad46dcd8e9b34625e", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-not \" >= 0\\\\)\" \"optimized\" } } */\n+int f(int a, int *b, int *d)\n+{\n+  int c = __builtin_clz(a);\n+\n+  *b = c;\n+\n+  if (c != 0)\n+    *d = c;\n+\n+  return c;\n+}"}]}