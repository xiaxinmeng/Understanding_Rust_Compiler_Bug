{"sha": "46d0749798b85a9f8707d6fef1e744dc07c1e3fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDZkMDc0OTc5OGI4NWE5Zjg3MDdkNmZlZjFlNzQ0ZGMwN2MxZTNmYg==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@wolery.cumb.org", "date": "2000-04-01T22:02:31Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-04-01T22:02:31Z"}, "message": "cpplex.c: Copy ISTABLE macros from cppinit.c...\n\n\t* cpplex.c: Copy ISTABLE macros from cppinit.c, and adapt them\n\tto initialize speccase[] and trigraph_map[].  Delete all\n\treferences to pfile->input_speccase.  Always treat '?' as a\n\tspecial character.  Remove table-initialization code from\n\t_cpp_init_input_buffer.\n\n\t* cpplib.h (struct cpp_reader): Remove input_speccase field.\n\t* cppinit.c (cpp_cleanup): Don't free input_speccase.\n\nFrom-SVN: r32858", "tree": {"sha": "8bffafc0a20134bd168e2f6e43a7347d01bde972", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8bffafc0a20134bd168e2f6e43a7347d01bde972"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46d0749798b85a9f8707d6fef1e744dc07c1e3fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46d0749798b85a9f8707d6fef1e744dc07c1e3fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46d0749798b85a9f8707d6fef1e744dc07c1e3fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46d0749798b85a9f8707d6fef1e744dc07c1e3fb/comments", "author": null, "committer": null, "parents": [{"sha": "61098249b51d7c483274d72796401720079e55a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61098249b51d7c483274d72796401720079e55a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61098249b51d7c483274d72796401720079e55a9"}], "stats": {"total": 122, "additions": 76, "deletions": 46}, "files": [{"sha": "8b6746a7ac7e423e3f784d67a260c15b6cf52b70", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46d0749798b85a9f8707d6fef1e744dc07c1e3fb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46d0749798b85a9f8707d6fef1e744dc07c1e3fb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=46d0749798b85a9f8707d6fef1e744dc07c1e3fb", "patch": "@@ -1,3 +1,14 @@\n+2000-04-01  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* cpplex.c: Copy ISTABLE macros from cppinit.c, and adapt them\n+\tto initialize speccase[] and trigraph_map[].  Delete all\n+\treferences to pfile->input_speccase.  Always treat '?' as a\n+\tspecial character.  Remove table-initialization code from\n+\t_cpp_init_input_buffer.\n+\n+\t* cpplib.h (struct cpp_reader): Remove input_speccase field.\n+\t* cppinit.c (cpp_cleanup): Don't free input_speccase.\n+\n 2000-04-01  Richard Henderson  <rth@cygnus.com>\n \n \t* Makefile.in (STAGESTUFF): Wildcard all debugging dumps at once."}, {"sha": "63f5ea80d5ca5cf0fa7317b4af0acbc6dc4b44d5", "filename": "gcc/cppinit.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46d0749798b85a9f8707d6fef1e744dc07c1e3fb/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46d0749798b85a9f8707d6fef1e744dc07c1e3fb/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=46d0749798b85a9f8707d6fef1e744dc07c1e3fb", "patch": "@@ -572,8 +572,7 @@ cpp_cleanup (pfile)\n   if (pfile->input_buffer)\n     {\n       free (pfile->input_buffer);\n-      free (pfile->input_speccase);\n-      pfile->input_buffer = pfile->input_speccase = NULL;\n+      pfile->input_buffer = NULL;\n       pfile->input_buffer_len = 0;\n     }\n "}, {"sha": "68f034c60ffaae1efab224be1bef8d324ec3454b", "filename": "gcc/cpplex.c", "status": "modified", "additions": 62, "deletions": 40, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46d0749798b85a9f8707d6fef1e744dc07c1e3fb/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46d0749798b85a9f8707d6fef1e744dc07c1e3fb/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=46d0749798b85a9f8707d6fef1e744dc07c1e3fb", "patch": "@@ -1268,6 +1268,62 @@ find_position (start, limit, linep)\n   return lbase;\n }\n \n+/* These are tables used by _cpp_read_and_prescan.  If we have\n+   designated initializers, they can be constant data; otherwise, they\n+   are set up at runtime by _cpp_init_input_buffer.  */\n+\n+#ifndef UCHAR_MAX\n+#define UCHAR_MAX 255\t/* assume 8-bit bytes */\n+#endif\n+\n+#if (GCC_VERSION >= 2007) || (__STDC_VERSION__ >= 199901L)\n+#define CHARTAB(name) static const unsigned char name[UCHAR_MAX + 1]\n+#define init_speccase()  /* nothing */\n+#define init_trigraph_map() /* nothing */\n+#define SPECCASE CHARTAB(speccase) = {\n+#define TRIGRAPH_MAP CHARTAB(trigraph_map) = {\n+#define END };\n+#define s(p, v) [p] = v,\n+#else\n+#define CHARTAB(name) static unsigned char name[UCHAR_MAX + 1]\n+#define SPECCASE CHARTAB(speccase) = { 0 }; \\\n+ static void init_speccase PARAMS ((void)) { \\\n+ unsigned char *x = speccase;\n+#define TRIGRAPH_MAP CHARTAB(trigraph_map) = { 0 }; \\\n+ static void init_trigraph_map PARAMS ((void)) { \\\n+ unsigned char *x = trigraph_map;\n+#define END }\n+#define s(p, v) x[p] = v;\n+#endif\n+\n+/* Table of characters that can't be handled in the inner loop.\n+   Keep these contiguous to optimize the performance of the code generated\n+   for the switch that uses them.  */\n+#define SPECCASE_EMPTY     0\n+#define SPECCASE_CR        1\n+#define SPECCASE_BACKSLASH 2\n+#define SPECCASE_QUESTION  3\n+ \n+SPECCASE\n+  s('\\r', SPECCASE_CR)\n+  s('\\\\', SPECCASE_BACKSLASH)\n+  s('?',  SPECCASE_QUESTION)\n+END\n+\n+/* Map of trigraph third characters to their replacements.  */\n+  \n+TRIGRAPH_MAP\n+  s('=', '#')\ts(')', ']')\ts('!', '|')\n+  s('(', '[')\ts('\\'', '^')\ts('>', '}')\n+  s('/', '\\\\')\ts('<', '{')\ts('-', '~')\n+END\n+\n+#undef CHARTAB\n+#undef SPECCASE\n+#undef TRIGRAPH_MAP\n+#undef END\n+#undef s\n+\n /* Read the entire contents of file DESC into buffer BUF.  LEN is how\n    much memory to allocate initially; more will be allocated if\n    necessary.  Convert end-of-line markers (\\n, \\r, \\r\\n, \\n\\r) to\n@@ -1303,18 +1359,7 @@ find_position (start, limit, linep)\n    The end of the buffer is marked by a '\\\\', which, being a special\n    character, guarantees we will exit the fast-scan loops and perform\n    a refill. */\n-\n-/* Table of characters that can't be handled in the inner loop.\n-   Keep these contiguous to optimize the performance of the code generated\n-   for the switch that uses them.  */\n-#define SPECCASE_EMPTY     0\n-#define SPECCASE_CR        1\n-#define SPECCASE_BACKSLASH 2\n-#define SPECCASE_QUESTION  3\n-\n-/* Maps trigraph characters to their replacements */\n-static unsigned int trigraph_map   [1 << CHAR_BIT] = {0};\n-\n+ \n long\n _cpp_read_and_prescan (pfile, fp, desc, len)\n      cpp_reader *pfile;\n@@ -1325,7 +1370,6 @@ _cpp_read_and_prescan (pfile, fp, desc, len)\n   U_CHAR *buf = (U_CHAR *) xmalloc (len);\n   U_CHAR *ip, *op, *line_base;\n   U_CHAR *ibase;\n-  U_CHAR *speccase = pfile->input_speccase;\n   unsigned long line;\n   unsigned int deferred_newlines;\n   size_t offset;\n@@ -1534,39 +1578,17 @@ _cpp_read_and_prescan (pfile, fp, desc, len)\n   return -1;\n }\n \n-/* Initialize the `input_buffer' 'trigraph_map' and `input_speccase'\n-   tables.  These are only used by read_and_prescan, but they're large\n-   and somewhat expensive to set up, so we want them allocated once\n-   for the duration of the cpp run.  */\n-\n+/* Allocate pfile->input_buffer, and initialize speccase[] and\n+   trigraph_map[] if it hasn't happened already.  */\n+ \n void\n _cpp_init_input_buffer (pfile)\n      cpp_reader *pfile;\n {\n   U_CHAR *tmp;\n \n-  /* Table of characters that cannot be handled by the\n-     read_and_prescan inner loop.  The number of non-EMPTY entries\n-     should be as small as humanly possible.  */\n-\n-  tmp = (U_CHAR *) xmalloc (1 << CHAR_BIT);\n-  memset (tmp, SPECCASE_EMPTY, 1 << CHAR_BIT);\n-  tmp['\\r'] = SPECCASE_CR;\n-  tmp['\\\\'] = SPECCASE_BACKSLASH;\n-  if (CPP_OPTION (pfile, trigraphs) || CPP_OPTION (pfile, warn_trigraphs))\n-    tmp['?'] = SPECCASE_QUESTION;\n-  pfile->input_speccase = tmp;\n-\n-  /* Trigraph mappings */\n-  trigraph_map['='] = '#';\n-  trigraph_map[')'] = ']';\n-  trigraph_map['!'] = '|';\n-  trigraph_map['('] = '[';\n-  trigraph_map['\\''] = '^';\n-  trigraph_map['>'] = '}';\n-  trigraph_map['/'] = '\\\\';\n-  trigraph_map['<'] = '{';\n-  trigraph_map['-'] = '~';\n+  init_speccase ();\n+  init_trigraph_map ();\n \n   /* Determine the appropriate size for the input buffer.  Normal C\n      source files are smaller than eight K.  */"}, {"sha": "b16206bd9538422d56ac791c7288e4c683a2a6e8", "filename": "gcc/cpplib.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46d0749798b85a9f8707d6fef1e744dc07c1e3fb/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46d0749798b85a9f8707d6fef1e744dc07c1e3fb/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=46d0749798b85a9f8707d6fef1e744dc07c1e3fb", "patch": "@@ -354,11 +354,9 @@ struct cpp_reader\n   /* Buffer of -M output.  */\n   struct deps *deps;\n \n-  /* A buffer and a table, used only by read_and_prescan (in cppfiles.c)\n-     which are allocated once per cpp_reader object to keep them off the\n-     stack and avoid setup costs.  */\n+  /* A buffer used only by read_and_prescan (in cppfiles.c), which is\n+     allocated once per cpp_reader object to keep it off the stack.  */\n   unsigned char *input_buffer;\n-  unsigned char *input_speccase;\n   size_t input_buffer_len;\n \n   /* User visible options.  */"}]}