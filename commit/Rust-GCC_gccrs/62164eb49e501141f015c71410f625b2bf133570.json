{"sha": "62164eb49e501141f015c71410f625b2bf133570", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjIxNjRlYjQ5ZTUwMTE0MWYwMTVjNzE0MTBmNjI1YjJiZjEzMzU3MA==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@superh.com", "date": "2004-08-18T17:44:28Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2004-08-18T17:44:28Z"}, "message": "sh.h (CONDITIONAL_REGISTER_USAGE): Don't exclude fixed registers from call_used_regs.\n\n\t* sh.h (CONDITIONAL_REGISTER_USAGE): Don't exclude fixed registers\n\tfrom call_used_regs.  Update call_really_used_regs.\n\t(CALL_REALLY_USED_REGISTERS): Define.\n\t* sh.c (output_stack_adjust, shmedia_target_regs_stack_space):\n\tReplace call_used_regs with call_really_used_regs.\n\t(calc_live_regs, sh_media_register_for_return): Likewise.\n\t(sh5_schedule_saves, sh_expand_prologue, reg_unused_after): Likewise.\n\t* sh.md (return_media): Likewise.\n\nFrom-SVN: r86195", "tree": {"sha": "52a646d126d64501d30d23f50f984ab170a04963", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52a646d126d64501d30d23f50f984ab170a04963"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62164eb49e501141f015c71410f625b2bf133570", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62164eb49e501141f015c71410f625b2bf133570", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62164eb49e501141f015c71410f625b2bf133570", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62164eb49e501141f015c71410f625b2bf133570/comments", "author": null, "committer": null, "parents": [{"sha": "f9b0ac3bed683d922ba67a403c4b9b714e4f5a54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9b0ac3bed683d922ba67a403c4b9b714e4f5a54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9b0ac3bed683d922ba67a403c4b9b714e4f5a54"}], "stats": {"total": 62, "additions": 43, "deletions": 19}, "files": [{"sha": "6dc33062d4a32d0e30fea1c3aa405ebd2264a26d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62164eb49e501141f015c71410f625b2bf133570/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62164eb49e501141f015c71410f625b2bf133570/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=62164eb49e501141f015c71410f625b2bf133570", "patch": "@@ -1,3 +1,14 @@\n+2004-08-18  J\"orn Rennecke <joern.rennecke@superh.com>\n+\n+\t* sh.h (CONDITIONAL_REGISTER_USAGE): Don't exclude fixed registers\n+\tfrom call_used_regs.  Update call_really_used_regs.\n+\t(CALL_REALLY_USED_REGISTERS): Define.\n+\t* sh.c (output_stack_adjust, shmedia_target_regs_stack_space):\n+\tReplace call_used_regs with call_really_used_regs.\n+\t(calc_live_regs, sh_media_register_for_return): Likewise.\n+\t(sh5_schedule_saves, sh_expand_prologue, reg_unused_after): Likewise.\n+\t* sh.md (return_media): Likewise.\n+\n 2004-08-18  Andrew Pinski  <apinski@apple.com>\n \n \t* config/darwin.c (machopic_legitimize_pic_address): Only set MEM_READONLY_P"}, {"sha": "6cfcdf94e172cc45dd65dbbdf77b1bc9f735393f", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62164eb49e501141f015c71410f625b2bf133570/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62164eb49e501141f015c71410f625b2bf133570/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=62164eb49e501141f015c71410f625b2bf133570", "patch": "@@ -4821,7 +4821,7 @@ output_stack_adjust (int size, rtx reg, int epilogue_p,\n \t     to handle this case, so just abort when we see it.  */\n \t  if (epilogue_p < 0\n \t      || current_function_interrupt\n-\t      || ! call_used_regs[temp] || fixed_regs[temp])\n+\t      || ! call_really_used_regs[temp] || fixed_regs[temp])\n \t    temp = -1;\n \t  if (temp < 0 && ! current_function_interrupt\n \t      && (TARGET_SHMEDIA || epilogue_p >= 0))\n@@ -5051,7 +5051,7 @@ shmedia_target_regs_stack_space (HARD_REG_SET *live_regs_mask)\n   int interrupt_handler = sh_cfun_interrupt_handler_p ();\n \n   for (reg = LAST_TARGET_REG; reg >= FIRST_TARGET_REG; reg--)\n-    if ((! call_used_regs[reg] || interrupt_handler)\n+    if ((! call_really_used_regs[reg] || interrupt_handler)\n         && ! TEST_HARD_REG_BIT (*live_regs_mask, reg))\n       /* Leave space to save this target register on the stack,\n \t in case target register allocation wants to use it.  */\n@@ -5111,7 +5111,8 @@ calc_live_regs (HARD_REG_SET *live_regs_mask)\n   else if ((TARGET_SH4 || TARGET_SH2A_DOUBLE) && TARGET_FMOVD && TARGET_FPU_SINGLE)\n     for (count = 0, reg = FIRST_FP_REG; reg <= LAST_FP_REG; reg += 2)\n       if (regs_ever_live[reg] && regs_ever_live[reg+1]\n-\t  && (! call_used_regs[reg] || (interrupt_handler && ! pragma_trapa))\n+\t  && (! call_really_used_regs[reg]\n+\t      || (interrupt_handler && ! pragma_trapa))\n \t  && ++count > 2)\n \t{\n \t  target_flags &= ~FPU_SINGLE_BIT;\n@@ -5152,8 +5153,9 @@ calc_live_regs (HARD_REG_SET *live_regs_mask)\n \t  : (interrupt_handler && ! pragma_trapa)\n \t  ? (/* Need to save all the regs ever live.  */\n \t     (regs_ever_live[reg]\n-\t      || (call_used_regs[reg]\n-\t\t  && (! fixed_regs[reg] || reg == MACH_REG || reg == MACL_REG)\n+\t      || (call_really_used_regs[reg]\n+\t\t  && (! fixed_regs[reg] || reg == MACH_REG || reg == MACL_REG\n+\t\t      || reg == PIC_OFFSET_TABLE_REGNUM)\n \t\t  && has_call)\n \t      || (has_call && REGISTER_NATURAL_MODE (reg) == SImode\n \t\t  && (GENERAL_REGISTER_P (reg) || TARGET_REGISTER_P (reg))))\n@@ -5167,7 +5169,7 @@ calc_live_regs (HARD_REG_SET *live_regs_mask)\n \t      && flag_pic\n \t      && current_function_args_info.call_cookie\n \t      && reg == (int) PIC_OFFSET_TABLE_REGNUM)\n-\t     || (regs_ever_live[reg] && ! call_used_regs[reg])\n+\t     || (regs_ever_live[reg] && ! call_really_used_regs[reg])\n \t     || (current_function_calls_eh_return\n \t\t && (reg == (int) EH_RETURN_DATA_REGNO (0)\n \t\t     || reg == (int) EH_RETURN_DATA_REGNO (1)\n@@ -5207,7 +5209,7 @@ calc_live_regs (HARD_REG_SET *live_regs_mask)\n       && TARGET_SAVE_ALL_TARGET_REGS\n       && shmedia_space_reserved_for_target_registers)\n     for (reg = LAST_TARGET_REG; reg >= FIRST_TARGET_REG; reg--)\n-      if ((! call_used_regs[reg] || interrupt_handler)\n+      if ((! call_really_used_regs[reg] || interrupt_handler)\n \t  && ! TEST_HARD_REG_BIT (*live_regs_mask, reg))\n \t{\n \t  SET_HARD_REG_BIT (*live_regs_mask, reg);\n@@ -5262,7 +5264,7 @@ sh_media_register_for_return (void)\n   tr0_used = flag_pic && regs_ever_live[PIC_OFFSET_TABLE_REGNUM];\n \n   for (regno = FIRST_TARGET_REG + tr0_used; regno <= LAST_TARGET_REG; regno++)\n-    if (call_used_regs[regno] && ! regs_ever_live[regno])\n+    if (call_really_used_regs[regno] && ! regs_ever_live[regno])\n       return regno;\n \n   return -1;\n@@ -5310,7 +5312,7 @@ sh5_schedule_saves (HARD_REG_SET *live_regs_mask, save_schedule *schedule,\n \n   if (! current_function_interrupt)\n     for (i = FIRST_GENERAL_REG; tmpx < MAX_TEMPS && i <= LAST_GENERAL_REG; i++)\n-      if (call_used_regs[i] && ! fixed_regs[i] && i != PR_MEDIA_REG\n+      if (call_really_used_regs[i] && ! fixed_regs[i] && i != PR_MEDIA_REG\n \t  && ! FUNCTION_ARG_REGNO_P (i)\n \t  && i != FIRST_RET_REG\n \t  && ! (cfun->static_chain_decl != NULL && i == STATIC_CHAIN_REGNUM)\n@@ -5510,7 +5512,7 @@ sh_expand_prologue (void)\n       save_entry *entry;\n       int *tmp_pnt;\n \n-      if (call_used_regs[R0_REG] && ! fixed_regs[R0_REG]\n+      if (call_really_used_regs[R0_REG] && ! fixed_regs[R0_REG]\n \t  && ! current_function_interrupt)\n \tr0 = gen_rtx_REG (Pmode, R0_REG);\n \n@@ -8005,7 +8007,7 @@ reg_unused_after (rtx reg, rtx insn)\n       if (set == 0 && reg_overlap_mentioned_p (reg, PATTERN (insn)))\n \treturn 0;\n \n-      if (code == CALL_INSN && call_used_regs[REGNO (reg)])\n+      if (code == CALL_INSN && call_really_used_regs[REGNO (reg)])\n \treturn 1;\n     }\n   return 1;"}, {"sha": "259efb06b25ecdcd1a2adb17bd4ac3517383fbcc", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62164eb49e501141f015c71410f625b2bf133570/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62164eb49e501141f015c71410f625b2bf133570/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=62164eb49e501141f015c71410f625b2bf133570", "patch": "@@ -106,34 +106,41 @@ do { \\\n       fixed_regs[regno] = call_used_regs[regno] = 1;\t\t\t\\\n   /* R8 and R9 are call-clobbered on SH5, but not on earlier SH ABIs.  */ \\\n   if (TARGET_SH5)\t\t\t\t\t\t\t\\\n-    call_used_regs[FIRST_GENERAL_REG + 8]\t\t\t\t\\\n-      = call_used_regs[FIRST_GENERAL_REG + 9] = 1;\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      call_used_regs[FIRST_GENERAL_REG + 8]\t\t\t\t\\\n+\t= call_used_regs[FIRST_GENERAL_REG + 9] = 1;\t\t\t\\\n+      call_really_used_regs[FIRST_GENERAL_REG + 8]\t\t\t\\\n+\t= call_really_used_regs[FIRST_GENERAL_REG + 9] = 1;\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_SHMEDIA)\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       regno_reg_class[FIRST_GENERAL_REG] = GENERAL_REGS;\t\t\\\n       CLEAR_HARD_REG_SET (reg_class_contents[FP0_REGS]);\t\t\\\n       regno_reg_class[FIRST_FP_REG] = FP_REGS;\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   if (flag_pic)\t\t\t\t\t\t\t\t\\\n-    fixed_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      fixed_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\t\t\t\t\\\n+      call_used_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n   /* Renesas saves and restores mac registers on call.  */\t\t\\\n   if (TARGET_HITACHI && ! TARGET_NOMACSAVE)\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      call_used_regs[MACH_REG] = 0;\t\t\t\t\t\\\n-      call_used_regs[MACL_REG] = 0;\t\t\t\t\t\\\n+      call_really_used_regs[MACH_REG] = 0;\t\t\t\t\\\n+      call_really_used_regs[MACL_REG] = 0;\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   for (regno = FIRST_FP_REG + (TARGET_LITTLE_ENDIAN != 0);\t\t\\\n        regno <= LAST_FP_REG; regno += 2)\t\t\t\t\\\n     SET_HARD_REG_BIT (reg_class_contents[DF_HI_REGS], regno);\t\t\\\n   if (TARGET_SHMEDIA)\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       for (regno = FIRST_TARGET_REG; regno <= LAST_TARGET_REG; regno ++)\\\n-\tif (! fixed_regs[regno] && call_used_regs[regno])\t\t\\\n+\tif (! fixed_regs[regno] && call_really_used_regs[regno])\t\\\n \t  SET_HARD_REG_BIT (reg_class_contents[SIBCALL_REGS], regno);\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   else\t\t\t\t\t\t\t\t\t\\\n     for (regno = FIRST_GENERAL_REG; regno <= LAST_GENERAL_REG; regno++)\t\\\n-      if (! fixed_regs[regno] && call_used_regs[regno])\t\t\t\\\n+      if (! fixed_regs[regno] && call_really_used_regs[regno])\t\t\\\n \tSET_HARD_REG_BIT (reg_class_contents[SIBCALL_REGS], regno);\t\\\n } while (0)\n \f\n@@ -1221,6 +1228,10 @@ extern char sh_additional_register_names[ADDREGNAMES_SIZE] \\\n   1,\t\t\t\t\t\t\t\t\t\\\n }\n \n+/* CONDITIONAL_REGISTER_USAGE might want to make a register call-used, yet\n+   fixed, like PIC_OFFSET_TABLE_REGNUM.  */\n+#define CALL_REALLY_USED_REGISTERS CALL_USED_REGISTERS\n+\n /* Only the lower 32-bits of R10-R14 are guaranteed to be preserved\n    across SHcompact function calls.  We can't tell whether a called\n    function is SHmedia or SHcompact, so we assume it may be when"}, {"sha": "9354167d851954d3fbd73e8b3bdf95794441a9de", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62164eb49e501141f015c71410f625b2bf133570/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62164eb49e501141f015c71410f625b2bf133570/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=62164eb49e501141f015c71410f625b2bf133570", "patch": "@@ -7311,7 +7311,7 @@ mov.l\\\\t1f,r0\\\\n\\\\\n     {\n       rtx r18 = gen_rtx_REG (DImode, PR_MEDIA_REG);\n \n-      if (! call_used_regs[TR0_REG] || fixed_regs[TR0_REG])\n+      if (! call_really_used_regs[TR0_REG] || fixed_regs[TR0_REG])\n \tabort ();\n       tr_regno = TR0_REG;\n       tr = gen_rtx_REG (DImode, tr_regno);"}]}