{"sha": "5dfcd8e17efb3bd1e640307ef3cdaba211cf6051", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWRmY2Q4ZTE3ZWZiM2JkMWU2NDAzMDdlZjNjZGFiYTIxMWNmNjA1MQ==", "commit": {"author": {"name": "Alan Modra", "email": "alan@linuxcare.com.au", "date": "2001-01-17T05:23:22Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2001-01-17T05:23:22Z"}, "message": "pa.h (PIC_OFFSET_TABLE_REGNUM_SAVED): Remove.\n\n\t* config/pa/pa.h (PIC_OFFSET_TABLE_REGNUM_SAVED): Remove.\n\t(machine_function): Define.\n\t(PIC_OFFSET_TABLE_SAVE_RTX) : Define.\n\t* config/pa/pa.c (pa_init_machine_status, pa_mark_machine_status,\n\tpa_free_machine_status): New functions.\n\t(override_options): Set {init,mark,free}_machine_status to above.\n\t(hppa_expand_prologue): Use PIC_OFFSET_TABLE_SAVE_RTX instead of\n\tPIC_OFFSET_TABLE_REGNUM_SAVED.\n\t* config/pa/pa.md: Use PIC_OFFSET_TABLE_SAVE_RTX instead of\n\tPIC_OFFSET_TABLE_REGNUM_SAVED throughout.\n\t* config/pa/pa32-regs.h (CONDITIONAL_REGISTER_USAGE): Remove\n\treferences to PIC_OFFSET_TABLE_REGNUM_SAVED.\n\t* config/pa/pa64-regs.h (CONDITIONAL_REGISTER_USAGE): Likewise.\n\nFrom-SVN: r39083", "tree": {"sha": "8de88c0c6c9fd946ce50dc9e8efb289e6e067505", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8de88c0c6c9fd946ce50dc9e8efb289e6e067505"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5dfcd8e17efb3bd1e640307ef3cdaba211cf6051", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dfcd8e17efb3bd1e640307ef3cdaba211cf6051", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5dfcd8e17efb3bd1e640307ef3cdaba211cf6051", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dfcd8e17efb3bd1e640307ef3cdaba211cf6051/comments", "author": null, "committer": null, "parents": [{"sha": "19c976393d40464af27c8e9c74072a4ab7770afe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19c976393d40464af27c8e9c74072a4ab7770afe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19c976393d40464af27c8e9c74072a4ab7770afe"}], "stats": {"total": 144, "additions": 87, "deletions": 57}, "files": [{"sha": "9188081be19fae58068e493e425d004b4a13942d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dfcd8e17efb3bd1e640307ef3cdaba211cf6051/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dfcd8e17efb3bd1e640307ef3cdaba211cf6051/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5dfcd8e17efb3bd1e640307ef3cdaba211cf6051", "patch": "@@ -1,3 +1,19 @@\n+Tue Jan 16 22:23:04 2001  Alan Modra (alan@linuxcare.com.au)\n+\n+\t* config/pa/pa.h (PIC_OFFSET_TABLE_REGNUM_SAVED): Remove.\n+\t(machine_function): Define.\n+\t(PIC_OFFSET_TABLE_SAVE_RTX) : Define.\n+\t* config/pa/pa.c (pa_init_machine_status, pa_mark_machine_status,\n+\tpa_free_machine_status): New functions.\n+\t(override_options): Set {init,mark,free}_machine_status to above.\n+\t(hppa_expand_prologue): Use PIC_OFFSET_TABLE_SAVE_RTX instead of\n+\tPIC_OFFSET_TABLE_REGNUM_SAVED.\n+\t* config/pa/pa.md: Use PIC_OFFSET_TABLE_SAVE_RTX instead of\n+\tPIC_OFFSET_TABLE_REGNUM_SAVED throughout.\n+\t* config/pa/pa32-regs.h (CONDITIONAL_REGISTER_USAGE): Remove\n+\treferences to PIC_OFFSET_TABLE_REGNUM_SAVED.\n+\t* config/pa/pa64-regs.h (CONDITIONAL_REGISTER_USAGE): Likewise.\n+\n 2001-01-15  DJ Delorie  <dj@redhat.com>\n \n \t* Makefile.in (gcov.1): Protect against texi2pod/pod2man failing."}, {"sha": "06e96654d89109db297d764972213bf5f605e428", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 51, "deletions": 13, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dfcd8e17efb3bd1e640307ef3cdaba211cf6051/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dfcd8e17efb3bd1e640307ef3cdaba211cf6051/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=5dfcd8e17efb3bd1e640307ef3cdaba211cf6051", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines for insn-output.c for HPPA.\n-   Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000\n+   Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001\n    Free Software Foundation, Inc.\n    Contributed by Tim Moore (moore@cs.utah.edu), based on sparc.c\n \n@@ -43,6 +43,9 @@ Boston, MA 02111-1307, USA.  */\n #include \"recog.h\"\n #include \"tm_p.h\"\n \n+static void pa_init_machine_status PARAMS ((struct function *));\n+static void pa_mark_machine_status PARAMS ((struct function *));\n+static void pa_free_machine_status PARAMS ((struct function *));\n static void pa_combine_instructions\t\t\tPARAMS ((rtx));\n static int pa_can_combine_p\tPARAMS ((rtx, rtx, rtx, int, rtx, rtx, rtx));\n static int forward_branch_p\t\t\t\tPARAMS ((rtx));\n@@ -186,6 +189,43 @@ override_options ()\n \n   /* Register global variables with the garbage collector.  */\n   pa_add_gc_roots ();\n+\n+  /* Arrange to save and restore machine status around nested functions.  */\n+  init_machine_status = pa_init_machine_status;\n+  mark_machine_status = pa_mark_machine_status;\n+  free_machine_status = pa_free_machine_status;\n+}\n+\n+/* Functions to initialize pic_offset_table_save_rtx.\n+   These will be called, via pointer variables,\n+   from push_function_context and pop_function_context.  */\n+\n+static void\n+pa_init_machine_status (p)\n+     struct function *p;\n+{\n+  p->machine = (machine_function *) xmalloc (sizeof (machine_function));\n+\n+  p->machine->pic_offset_table_save_rtx = gen_reg_rtx (Pmode);\n+}\n+\n+static void\n+pa_mark_machine_status (p)\n+     struct function *p;\n+{\n+  if (p->machine)\n+    ggc_mark_rtx (p->machine->pic_offset_table_save_rtx);\n+}\n+\n+static void\n+pa_free_machine_status (p)\n+     struct function *p;\n+{\n+  if (p->machine == NULL)\n+    return;\n+\n+  free (p->machine);\n+  p->machine = NULL;\n }\n \n \n@@ -2653,7 +2693,7 @@ remove_useless_addtr_insns (insns, check_notes)\n \n }\n \f\n-/* You may have trouble believing this, but this is the HP-PA stack\n+/* You may have trouble believing this, but this is the 32 bit HP-PA stack\n    layout.  Wow.\n \n    Offset\t\tContents\n@@ -3153,19 +3193,17 @@ hppa_expand_prologue()\n      made incorrect assumptions about using global variables to hold\n      per-function rtl code generated in the backend.\n \n-     So instead, we copy the PIC register into a reserved callee saved\n-     register in the prologue.  Then after each call we reload the PIC\n-     register from the callee saved register.  We also reload the PIC\n-     register from the callee saved register in the epilogue ensure the\n-     PIC register is valid at function exit.\n+     So instead, we copy the PIC register into a callee saved register\n+     in the prologue.  Then after each call we reload the PIC register\n+     from the callee saved register.\n \n-     This may (depending on the exact characteristics of the function)\n-     even be more efficient. \n+     Avoid doing this if the register isn't used (eg. leaf functions)\n+     as it's an error to delete an instruction from the prologue.  */\n \n-     Avoid this if the callee saved register wasn't used (these are\n-     leaf functions).  */\n-  if (flag_pic && regs_ever_live[PIC_OFFSET_TABLE_REGNUM_SAVED])\n-    emit_move_insn (gen_rtx_REG (word_mode, PIC_OFFSET_TABLE_REGNUM_SAVED),\n+  if (flag_pic\n+      && (GET_CODE (PIC_OFFSET_TABLE_SAVE_RTX) != REG\n+\t  || HARD_REGISTER_P (PIC_OFFSET_TABLE_SAVE_RTX)))\n+    emit_move_insn (PIC_OFFSET_TABLE_SAVE_RTX,\n \t\t    gen_rtx_REG (word_mode, PIC_OFFSET_TABLE_REGNUM));\n }\n "}, {"sha": "bbd3f7ae9d5b610156ab35cad06bcafe5a705bc2", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dfcd8e17efb3bd1e640307ef3cdaba211cf6051/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dfcd8e17efb3bd1e640307ef3cdaba211cf6051/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=5dfcd8e17efb3bd1e640307ef3cdaba211cf6051", "patch": "@@ -70,6 +70,14 @@ enum architecture_type\n   ARCHITECTURE_20\n };\n \n+struct rtx_def;\n+/* A C structure for machine-specific, per-function data.\n+   This is added to the cfun structure.  */\n+typedef struct machine_function\n+{\n+  struct rtx_def *pic_offset_table_save_rtx;\n+} machine_function;\n+\n /* For -march= option.  */\n extern const char *pa_arch_string;\n extern enum architecture_type pa_arch;\n@@ -493,8 +501,8 @@ extern int target_flags;\n #define PIC_OFFSET_TABLE_REG_CALL_CLOBBERED 1\n \n /* Register into which we save the PIC_OFFEST_TABLE_REGNUM so that it\n-   can be restore across function calls.  */\n-#define PIC_OFFSET_TABLE_REGNUM_SAVED 4\n+   can be restored across function calls.  */\n+#define PIC_OFFSET_TABLE_SAVE_RTX (cfun->machine->pic_offset_table_save_rtx)\n \n #define DEFAULT_PCC_STRUCT_RETURN 0\n "}, {"sha": "7179c01a1e412974fa13c8ffa19b2559a37248f3", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 8, "deletions": 32, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dfcd8e17efb3bd1e640307ef3cdaba211cf6051/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dfcd8e17efb3bd1e640307ef3cdaba211cf6051/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=5dfcd8e17efb3bd1e640307ef3cdaba211cf6051", "patch": "@@ -5735,18 +5735,12 @@\n   if (flag_pic)\n     {\n       use_reg (&CALL_INSN_FUNCTION_USAGE (call_insn), pic_offset_table_rtx);\n-      use_reg (&CALL_INSN_FUNCTION_USAGE (call_insn),\n-\t       gen_rtx_REG (word_mode, PIC_OFFSET_TABLE_REGNUM_SAVED));\n       if (TARGET_64BIT)\n \tuse_reg (&CALL_INSN_FUNCTION_USAGE (call_insn), arg_pointer_rtx);\n \n       /* After each call we must restore the PIC register, even if it\n-\t doesn't appear to be used.\n-\n-         This will set regs_ever_live for the callee saved register we\n-\t stored the PIC register in.  */\n-      emit_move_insn (pic_offset_table_rtx,\n-\t\t      gen_rtx_REG (word_mode, PIC_OFFSET_TABLE_REGNUM_SAVED));\n+\t doesn't appear to be used.  */\n+      emit_move_insn (pic_offset_table_rtx, PIC_OFFSET_TABLE_SAVE_RTX);\n     }\n   DONE;\n }\")\n@@ -5915,18 +5909,12 @@\n   if (flag_pic)\n     {\n       use_reg (&CALL_INSN_FUNCTION_USAGE (call_insn), pic_offset_table_rtx);\n-      use_reg (&CALL_INSN_FUNCTION_USAGE (call_insn),\n-\t       gen_rtx_REG (word_mode, PIC_OFFSET_TABLE_REGNUM_SAVED));\n       if (TARGET_64BIT)\n \tuse_reg (&CALL_INSN_FUNCTION_USAGE (call_insn), arg_pointer_rtx);\n \n       /* After each call we must restore the PIC register, even if it\n-\t doesn't appear to be used.\n-\n-         This will set regs_ever_live for the callee saved register we\n-\t stored the PIC register in.  */\n-      emit_move_insn (pic_offset_table_rtx,\n-\t\t      gen_rtx_REG (word_mode, PIC_OFFSET_TABLE_REGNUM_SAVED));\n+\t doesn't appear to be used.  */\n+      emit_move_insn (pic_offset_table_rtx, PIC_OFFSET_TABLE_SAVE_RTX);\n     }\n   DONE;\n }\")\n@@ -6096,16 +6084,10 @@\n   if (flag_pic)\n     {\n       use_reg (&CALL_INSN_FUNCTION_USAGE (call_insn), pic_offset_table_rtx);\n-      use_reg (&CALL_INSN_FUNCTION_USAGE (call_insn),\n-\t       gen_rtx_REG (word_mode, PIC_OFFSET_TABLE_REGNUM_SAVED));\n \n       /* After each call we must restore the PIC register, even if it\n-\t doesn't appear to be used.\n-\n-         This will set regs_ever_live for the callee saved register we\n-\t stored the PIC register in.  */\n-      emit_move_insn (pic_offset_table_rtx,\n-\t\t      gen_rtx_REG (word_mode, PIC_OFFSET_TABLE_REGNUM_SAVED));\n+\t doesn't appear to be used.  */\n+      emit_move_insn (pic_offset_table_rtx, PIC_OFFSET_TABLE_SAVE_RTX);\n     }\n   DONE;\n }\")\n@@ -6158,16 +6140,10 @@\n   if (flag_pic)\n     {\n       use_reg (&CALL_INSN_FUNCTION_USAGE (call_insn), pic_offset_table_rtx);\n-      use_reg (&CALL_INSN_FUNCTION_USAGE (call_insn),\n-\t       gen_rtx_REG (word_mode, PIC_OFFSET_TABLE_REGNUM_SAVED));\n \n       /* After each call we must restore the PIC register, even if it\n-\t doesn't appear to be used.\n-\n-         This will set regs_ever_live for the callee saved register we\n-\t stored the PIC register in.  */\n-      emit_move_insn (pic_offset_table_rtx,\n-\t\t      gen_rtx_REG (word_mode, PIC_OFFSET_TABLE_REGNUM_SAVED));\n+\t doesn't appear to be used.  */\n+      emit_move_insn (pic_offset_table_rtx, PIC_OFFSET_TABLE_SAVE_RTX);\n     }\n   DONE;\n }\")"}, {"sha": "145a90e42a19e939aede039dacced673395a4851", "filename": "gcc/config/pa/pa32-regs.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dfcd8e17efb3bd1e640307ef3cdaba211cf6051/gcc%2Fconfig%2Fpa%2Fpa32-regs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dfcd8e17efb3bd1e640307ef3cdaba211cf6051/gcc%2Fconfig%2Fpa%2Fpa32-regs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa32-regs.h?ref=5dfcd8e17efb3bd1e640307ef3cdaba211cf6051", "patch": "@@ -110,11 +110,7 @@\n \tfixed_regs[i] = call_used_regs[i] = 1; \t\\\n     }\t\t\t\t\t\t\\\n   if (flag_pic)\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\\\n-      fixed_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\t\\\n-      fixed_regs[PIC_OFFSET_TABLE_REGNUM_SAVED] = 1;\\\n-      call_used_regs[PIC_OFFSET_TABLE_REGNUM_SAVED] = 1;\\\n-    }\t\t\t\t\t\t\\\n+    fixed_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\t\\\n }\n \n /* Allocate the call used registers first.  This should minimize"}, {"sha": "937f9c4a68e422efd788f6ab570b027a3058d2fd", "filename": "gcc/config/pa/pa64-regs.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dfcd8e17efb3bd1e640307ef3cdaba211cf6051/gcc%2Fconfig%2Fpa%2Fpa64-regs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dfcd8e17efb3bd1e640307ef3cdaba211cf6051/gcc%2Fconfig%2Fpa%2Fpa64-regs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa64-regs.h?ref=5dfcd8e17efb3bd1e640307ef3cdaba211cf6051", "patch": "@@ -109,11 +109,7 @@ Boston, MA 02111-1307, USA.  */\n \tfixed_regs[i] = call_used_regs[i] = 1; \t\\\n     }\t\t\t\t\t\t\\\n   if (flag_pic)\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\\\n-      fixed_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\t\\\n-      fixed_regs[PIC_OFFSET_TABLE_REGNUM_SAVED] = 1;\\\n-      call_used_regs[PIC_OFFSET_TABLE_REGNUM_SAVED] = 1;\\\n-    }\t\t\t\t\t\t\\\n+    fixed_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\t\\\n }\n \n /* Allocate the call used registers first.  This should minimize"}]}