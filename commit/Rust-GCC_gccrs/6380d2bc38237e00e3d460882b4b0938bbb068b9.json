{"sha": "6380d2bc38237e00e3d460882b4b0938bbb068b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjM4MGQyYmMzODIzN2UwMGUzZDQ2MDg4MmI0YjA5MzhiYmIwNjhiOQ==", "commit": {"author": {"name": "Matthew Wahab", "email": "matthew.wahab@arm.com", "date": "2015-09-22T09:30:51Z"}, "committer": {"name": "Matthew Wahab", "email": "mwahab@gcc.gnu.org", "date": "2015-09-22T09:30:51Z"}, "message": "[AArch64] Add atomic load-operate instructions.\n\n2015-09-22  Matthew Wahab  <matthew.wahab@arm.com>\n\n\t* config/aarch64/aarch64/atomics.md (UNSPECV_ATOMIC_LDOP): New.\n\t(UNSPECV_ATOMIC_LDOP_OR): New.\n\t(UNSPECV_ATOMIC_LDOP_BIC): New.\n\t(UNSPECV_ATOMIC_LDOP_XOR): New.\n\t(UNSPECV_ATOMIC_LDOP_PLUS): New.\n\t(ATOMIC_LDOP): New.\n\t(atomic_ldop): New.\n\t(aarch64_atomic_load<atomic_ldop><mode>): New.\n\nFrom-SVN: r228000", "tree": {"sha": "d0305b2f9a791ff2b65e8b1048998c498ad3e3ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0305b2f9a791ff2b65e8b1048998c498ad3e3ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6380d2bc38237e00e3d460882b4b0938bbb068b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6380d2bc38237e00e3d460882b4b0938bbb068b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6380d2bc38237e00e3d460882b4b0938bbb068b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6380d2bc38237e00e3d460882b4b0938bbb068b9/comments", "author": null, "committer": null, "parents": [{"sha": "cc05c2c3e0d90c1a116a1a8cbdbc4d25f8062ea7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc05c2c3e0d90c1a116a1a8cbdbc4d25f8062ea7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc05c2c3e0d90c1a116a1a8cbdbc4d25f8062ea7"}], "stats": {"total": 52, "additions": 52, "deletions": 0}, "files": [{"sha": "27e773b5e989d4727d2c01c913e84e85359ebca1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6380d2bc38237e00e3d460882b4b0938bbb068b9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6380d2bc38237e00e3d460882b4b0938bbb068b9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6380d2bc38237e00e3d460882b4b0938bbb068b9", "patch": "@@ -1,3 +1,14 @@\n+2015-09-22  Matthew Wahab  <matthew.wahab@arm.com>\n+\n+\t* config/aarch64/aarch64/atomics.md (UNSPECV_ATOMIC_LDOP): New.\n+\t(UNSPECV_ATOMIC_LDOP_OR): New.\n+\t(UNSPECV_ATOMIC_LDOP_BIC): New.\n+\t(UNSPECV_ATOMIC_LDOP_XOR): New.\n+\t(UNSPECV_ATOMIC_LDOP_PLUS): New.\n+\t(ATOMIC_LDOP): New.\n+\t(atomic_ldop): New.\n+\t(aarch64_atomic_load<atomic_ldop><mode>): New.\n+\n 2015-09-22  Matthew Wahab  <matthew.wahab@arm.com>\n \n \t* config/aarch64/aarch64.md"}, {"sha": "11a9d1374c8c0d4308cdbc58122daf5bb6895832", "filename": "gcc/config/aarch64/atomics.md", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6380d2bc38237e00e3d460882b4b0938bbb068b9/gcc%2Fconfig%2Faarch64%2Fatomics.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6380d2bc38237e00e3d460882b4b0938bbb068b9/gcc%2Fconfig%2Faarch64%2Fatomics.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fatomics.md?ref=6380d2bc38237e00e3d460882b4b0938bbb068b9", "patch": "@@ -29,8 +29,25 @@\n     UNSPECV_ATOMIC_CAS\t\t\t; Represent an atomic CAS.\n     UNSPECV_ATOMIC_SWP\t\t\t; Represent an atomic SWP.\n     UNSPECV_ATOMIC_OP\t\t\t; Represent an atomic operation.\n+    UNSPECV_ATOMIC_LDOP\t\t\t; Represent an atomic load-operation\n+    UNSPECV_ATOMIC_LDOP_OR\t\t; Represent an atomic load-or\n+    UNSPECV_ATOMIC_LDOP_BIC\t\t; Represent an atomic load-bic\n+    UNSPECV_ATOMIC_LDOP_XOR\t\t; Represent an atomic load-xor\n+    UNSPECV_ATOMIC_LDOP_PLUS\t\t; Represent an atomic load-add\n ])\n \n+;; Iterators for load-operate instructions.\n+\n+(define_int_iterator ATOMIC_LDOP\n+ [UNSPECV_ATOMIC_LDOP_OR UNSPECV_ATOMIC_LDOP_BIC\n+  UNSPECV_ATOMIC_LDOP_XOR UNSPECV_ATOMIC_LDOP_PLUS])\n+\n+(define_int_attr atomic_ldop\n+ [(UNSPECV_ATOMIC_LDOP_OR \"set\") (UNSPECV_ATOMIC_LDOP_BIC \"clr\")\n+  (UNSPECV_ATOMIC_LDOP_XOR \"eor\") (UNSPECV_ATOMIC_LDOP_PLUS \"add\")])\n+\n+;; Instruction patterns.\n+\n (define_expand \"atomic_compare_and_swap<mode>\"\n   [(match_operand:SI 0 \"register_operand\" \"\")\t\t\t;; bool out\n    (match_operand:ALLI 1 \"register_operand\" \"\")\t\t\t;; val out\n@@ -536,3 +553,27 @@\n     else\n       return \"casal<atomic_sfx>\\t%<w>0, %<w>2, %1\";\n })\n+\n+;; Atomic load-op: Load data, operate, store result, keep data.\n+\n+(define_insn \"aarch64_atomic_load<atomic_ldop><mode>\"\n+ [(set (match_operand:ALLI 0 \"register_operand\" \"=r\")\n+   (match_operand:ALLI 1 \"aarch64_sync_memory_operand\" \"+Q\"))\n+  (set (match_dup 1)\n+   (unspec_volatile:ALLI\n+    [(match_dup 1)\n+     (match_operand:ALLI 2 \"register_operand\")\n+     (match_operand:SI 3 \"const_int_operand\")]\n+    ATOMIC_LDOP))]\n+ \"TARGET_LSE && reload_completed\"\n+ {\n+   enum memmodel model = memmodel_from_int (INTVAL (operands[3]));\n+   if (is_mm_relaxed (model))\n+     return \"ld<atomic_ldop><atomic_sfx>\\t%<w>2, %<w>0, %1\";\n+   else if (is_mm_acquire (model) || is_mm_consume (model))\n+     return \"ld<atomic_ldop>a<atomic_sfx>\\t%<w>2, %<w>0, %1\";\n+   else if (is_mm_release (model))\n+     return \"ld<atomic_ldop>l<atomic_sfx>\\t%<w>2, %<w>0, %1\";\n+   else\n+     return \"ld<atomic_ldop>al<atomic_sfx>\\t%<w>2, %<w>0, %1\";\n+ })"}]}