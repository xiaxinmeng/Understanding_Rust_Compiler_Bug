{"sha": "3a54dfa801a1cfb387c8c43e7610b11905db505c", "node_id": "C_kwDOANBUbNoAKDNhNTRkZmE4MDFhMWNmYjM4N2M4YzQzZTc2MTBiMTE5MDVkYjUwNWM", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2021-11-24T16:20:59Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-12-02T16:26:28Z"}, "message": "[Ada] Proof of support units for 'Width on signed integers\n\ngcc/ada/\n\n\t* libgnat/s-widint.ads: Mark in SPARK.\n\t* libgnat/s-widlli.ads: Likewise.\n\t* libgnat/s-widllli.ads: Likewise.\n\t* libgnat/s-widlllu.ads: Likewise.\n\t* libgnat/s-widllu.ads: Disable ghost/contract.\n\t* libgnat/s-widthi.adb: Replicate and adapt the proof from\n\ts-widthu.adb.\n\t* libgnat/s-widthi.ads: Add minimal postcondition.\n\t* libgnat/s-widthu.adb: Fix comments in the modular case.\n\t* libgnat/s-widthu.ads: Add minimal postcondition.\n\t* libgnat/s-widuns.ads: Disable ghost/contract.", "tree": {"sha": "40a736016981b85ec70ac272c3f4d98f71dc58f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40a736016981b85ec70ac272c3f4d98f71dc58f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a54dfa801a1cfb387c8c43e7610b11905db505c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a54dfa801a1cfb387c8c43e7610b11905db505c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a54dfa801a1cfb387c8c43e7610b11905db505c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a54dfa801a1cfb387c8c43e7610b11905db505c/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "167be0845e555cf98a59d768002c7f48bf85fe11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/167be0845e555cf98a59d768002c7f48bf85fe11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/167be0845e555cf98a59d768002c7f48bf85fe11"}], "stats": {"total": 276, "additions": 253, "deletions": 23}, "files": [{"sha": "fb716183f11f717f6bae7d81c50aa5ca3e3ad766", "filename": "gcc/ada/libgnat/s-widint.ads", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a54dfa801a1cfb387c8c43e7610b11905db505c/gcc%2Fada%2Flibgnat%2Fs-widint.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a54dfa801a1cfb387c8c43e7610b11905db505c/gcc%2Fada%2Flibgnat%2Fs-widint.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-widint.ads?ref=3a54dfa801a1cfb387c8c43e7610b11905db505c", "patch": "@@ -31,9 +31,22 @@\n \n --  Width attribute for signed integers up to Integer\n \n+--  Preconditions in this unit are meant for analysis only, not for run-time\n+--  checking, so that the expected exceptions are raised. This is enforced by\n+--  setting the corresponding assertion policy to Ignore. Postconditions and\n+--  contract cases should not be executed at runtime as well, in order not to\n+--  slow down the execution of these functions.\n+\n+pragma Assertion_Policy (Pre            => Ignore,\n+                         Post           => Ignore,\n+                         Contract_Cases => Ignore,\n+                         Ghost          => Ignore);\n+\n with System.Width_I;\n \n-package System.Wid_Int is\n+package System.Wid_Int\n+  with SPARK_Mode\n+is\n \n    function Width_Integer is new Width_I (Integer);\n    pragma Pure_Function (Width_Integer);"}, {"sha": "07ff8bf53541f4359f481b0abf3e8522edbb410d", "filename": "gcc/ada/libgnat/s-widlli.ads", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a54dfa801a1cfb387c8c43e7610b11905db505c/gcc%2Fada%2Flibgnat%2Fs-widlli.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a54dfa801a1cfb387c8c43e7610b11905db505c/gcc%2Fada%2Flibgnat%2Fs-widlli.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-widlli.ads?ref=3a54dfa801a1cfb387c8c43e7610b11905db505c", "patch": "@@ -31,9 +31,22 @@\n \n --  Width attribute for signed integers larger than Integer\n \n+--  Preconditions in this unit are meant for analysis only, not for run-time\n+--  checking, so that the expected exceptions are raised. This is enforced by\n+--  setting the corresponding assertion policy to Ignore. Postconditions and\n+--  contract cases should not be executed at runtime as well, in order not to\n+--  slow down the execution of these functions.\n+\n+pragma Assertion_Policy (Pre            => Ignore,\n+                         Post           => Ignore,\n+                         Contract_Cases => Ignore,\n+                         Ghost          => Ignore);\n+\n with System.Width_I;\n \n-package System.Wid_LLI is\n+package System.Wid_LLI\n+  with SPARK_Mode\n+is\n \n    function Width_Long_Long_Integer is new Width_I (Long_Long_Integer);\n    pragma Pure_Function (Width_Long_Long_Integer);"}, {"sha": "af3561622ea86e3c38029e902f4a7862efce4db0", "filename": "gcc/ada/libgnat/s-widllli.ads", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a54dfa801a1cfb387c8c43e7610b11905db505c/gcc%2Fada%2Flibgnat%2Fs-widllli.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a54dfa801a1cfb387c8c43e7610b11905db505c/gcc%2Fada%2Flibgnat%2Fs-widllli.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-widllli.ads?ref=3a54dfa801a1cfb387c8c43e7610b11905db505c", "patch": "@@ -31,9 +31,22 @@\n \n --  Width attribute for signed integers larger than Long_Long_Integer\n \n+--  Preconditions in this unit are meant for analysis only, not for run-time\n+--  checking, so that the expected exceptions are raised. This is enforced by\n+--  setting the corresponding assertion policy to Ignore. Postconditions and\n+--  contract cases should not be executed at runtime as well, in order not to\n+--  slow down the execution of these functions.\n+\n+pragma Assertion_Policy (Pre            => Ignore,\n+                         Post           => Ignore,\n+                         Contract_Cases => Ignore,\n+                         Ghost          => Ignore);\n+\n with System.Width_I;\n \n-package System.Wid_LLLI is\n+package System.Wid_LLLI\n+  with SPARK_Mode\n+is\n \n    function Width_Long_Long_Long_Integer is\n      new Width_I (Long_Long_Long_Integer);"}, {"sha": "fd6534f92e38aaf264d346ef02b521543bbc7259", "filename": "gcc/ada/libgnat/s-widlllu.ads", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a54dfa801a1cfb387c8c43e7610b11905db505c/gcc%2Fada%2Flibgnat%2Fs-widlllu.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a54dfa801a1cfb387c8c43e7610b11905db505c/gcc%2Fada%2Flibgnat%2Fs-widlllu.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-widlllu.ads?ref=3a54dfa801a1cfb387c8c43e7610b11905db505c", "patch": "@@ -31,6 +31,17 @@\n \n --  Width attribute for modular integers larger than Long_Long_Integer\n \n+--  Preconditions in this unit are meant for analysis only, not for run-time\n+--  checking, so that the expected exceptions are raised. This is enforced by\n+--  setting the corresponding assertion policy to Ignore. Postconditions and\n+--  contract cases should not be executed at runtime as well, in order not to\n+--  slow down the execution of these functions.\n+\n+pragma Assertion_Policy (Pre            => Ignore,\n+                         Post           => Ignore,\n+                         Contract_Cases => Ignore,\n+                         Ghost          => Ignore);\n+\n with System.Width_U;\n with System.Unsigned_Types;\n "}, {"sha": "ce01285c3a0070f27cc3ed1d295cf05e23dc41f1", "filename": "gcc/ada/libgnat/s-widllu.ads", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a54dfa801a1cfb387c8c43e7610b11905db505c/gcc%2Fada%2Flibgnat%2Fs-widllu.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a54dfa801a1cfb387c8c43e7610b11905db505c/gcc%2Fada%2Flibgnat%2Fs-widllu.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-widllu.ads?ref=3a54dfa801a1cfb387c8c43e7610b11905db505c", "patch": "@@ -31,6 +31,17 @@\n \n --  Width attribute for modular integers larger than Integer\n \n+--  Preconditions in this unit are meant for analysis only, not for run-time\n+--  checking, so that the expected exceptions are raised. This is enforced by\n+--  setting the corresponding assertion policy to Ignore. Postconditions and\n+--  contract cases should not be executed at runtime as well, in order not to\n+--  slow down the execution of these functions.\n+\n+pragma Assertion_Policy (Pre            => Ignore,\n+                         Post           => Ignore,\n+                         Contract_Cases => Ignore,\n+                         Ghost          => Ignore);\n+\n with System.Width_U;\n with System.Unsigned_Types;\n "}, {"sha": "55a94ecfc10c1403e9deaa7057e38eb899fbd10a", "filename": "gcc/ada/libgnat/s-widthi.adb", "status": "modified", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a54dfa801a1cfb387c8c43e7610b11905db505c/gcc%2Fada%2Flibgnat%2Fs-widthi.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a54dfa801a1cfb387c8c43e7610b11905db505c/gcc%2Fada%2Flibgnat%2Fs-widthi.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-widthi.adb?ref=3a54dfa801a1cfb387c8c43e7610b11905db505c", "patch": "@@ -29,10 +29,109 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n+with Ada.Numerics.Big_Numbers.Big_Integers_Ghost;\n+use Ada.Numerics.Big_Numbers.Big_Integers_Ghost;\n+\n function System.Width_I (Lo, Hi : Int) return Natural is\n+\n+   --  Ghost code, loop invariants and assertions in this unit are meant for\n+   --  analysis only, not for run-time checking, as it would be too costly\n+   --  otherwise. This is enforced by setting the assertion policy to Ignore.\n+\n+   pragma Assertion_Policy (Ghost          => Ignore,\n+                            Loop_Invariant => Ignore,\n+                            Assert         => Ignore);\n+\n+   -----------------------\n+   -- Local Subprograms --\n+   -----------------------\n+\n+   package Signed_Conversion is new Signed_Conversions (Int => Int);\n+\n+   function Big (Arg : Int) return Big_Integer renames\n+     Signed_Conversion.To_Big_Integer;\n+\n+   --  Maximum value of exponent for 10 that fits in Uns'Base\n+   function Max_Log10 return Natural is\n+     (case Int'Base'Size is\n+        when 8   => 2,\n+        when 16  => 4,\n+        when 32  => 9,\n+        when 64  => 19,\n+        when 128 => 38,\n+        when others => raise Program_Error)\n+   with Ghost;\n+\n+   ------------------\n+   -- Local Lemmas --\n+   ------------------\n+\n+   procedure Lemma_Lower_Mult (A, B, C : Big_Natural)\n+   with\n+     Ghost,\n+     Pre  => A <= B,\n+     Post => A * C <= B * C;\n+\n+   procedure Lemma_Div_Commutation (X, Y : Int)\n+   with\n+     Ghost,\n+     Pre  => X >= 0 and Y > 0,\n+     Post => Big (X) / Big (Y) = Big (X / Y);\n+\n+   procedure Lemma_Div_Twice (X : Big_Natural; Y, Z : Big_Positive)\n+   with\n+     Ghost,\n+     Post => X / Y / Z = X / (Y * Z);\n+\n+   ----------------------\n+   -- Lemma_Lower_Mult --\n+   ----------------------\n+\n+   procedure Lemma_Lower_Mult (A, B, C : Big_Natural) is null;\n+\n+   ---------------------------\n+   -- Lemma_Div_Commutation --\n+   ---------------------------\n+\n+   procedure Lemma_Div_Commutation (X, Y : Int) is null;\n+\n+   ---------------------\n+   -- Lemma_Div_Twice --\n+   ---------------------\n+\n+   procedure Lemma_Div_Twice (X : Big_Natural; Y, Z : Big_Positive) is\n+      XY  : constant Big_Natural := X / Y;\n+      YZ  : constant Big_Natural := Y * Z;\n+      XYZ : constant Big_Natural := X / Y / Z;\n+      R   : constant Big_Natural := (XY rem Z) * Y + (X rem Y);\n+   begin\n+      pragma Assert (X = XY * Y + (X rem Y));\n+      pragma Assert (XY = XY / Z * Z + (XY rem Z));\n+      pragma Assert (X = XYZ * YZ + R);\n+      pragma Assert ((XY rem Z) * Y <= (Z - 1) * Y);\n+      pragma Assert (R <= YZ - 1);\n+      pragma Assert (X / YZ = (XYZ * YZ + R) / YZ);\n+      pragma Assert (X / YZ = XYZ + R / YZ);\n+   end Lemma_Div_Twice;\n+\n+   --  Local variables\n+\n    W : Natural;\n    T : Int;\n \n+   --  Local ghost variables\n+\n+   Max_W  : constant Natural := Max_Log10 with Ghost;\n+   Big_10 : constant Big_Integer := Big (10) with Ghost;\n+\n+   Pow    : Big_Integer := 1 with Ghost;\n+   T_Init : constant Int :=\n+     Int'Max (abs (Int'Max (Lo, Int'First + 1)),\n+              abs (Int'Max (Hi, Int'First + 1)))\n+     with Ghost;\n+\n+--  Start of processing for System.Width_I\n+\n begin\n    if Lo > Hi then\n       return 0;\n@@ -52,10 +151,41 @@ begin\n       --  Increase value if more digits required\n \n       while T >= 10 loop\n+         Lemma_Div_Commutation (T, 10);\n+         Lemma_Div_Twice (Big (T_Init), Big_10 ** (W - 2), Big_10);\n+\n          T := T / 10;\n          W := W + 1;\n+         Pow := Pow * 10;\n+\n+         pragma Loop_Invariant (T >= 0);\n+         pragma Loop_Invariant (W in 3 .. Max_W + 3);\n+         pragma Loop_Invariant (Pow = Big_10 ** (W - 2));\n+         pragma Loop_Invariant (Big (T) = Big (T_Init) / Pow);\n+         pragma Loop_Variant (Decreases => T);\n       end loop;\n \n+      declare\n+         F : constant Big_Integer := Big_10 ** (W - 2) with Ghost;\n+         Q : constant Big_Integer := Big (T_Init) / F with Ghost;\n+         R : constant Big_Integer := Big (T_Init) rem F with Ghost;\n+      begin\n+         pragma Assert (Q < Big_10);\n+         pragma Assert (Big (T_Init) = Q * F + R);\n+         Lemma_Lower_Mult (Q, Big (9), F);\n+         pragma Assert (Big (T_Init) <= Big (9) * F + F - 1);\n+         pragma Assert (Big (T_Init) < Big_10 * F);\n+         pragma Assert (Big_10 * F = Big_10 ** (W - 1));\n+      end;\n+\n+      --  This is an expression of the functional postcondition for Width_I,\n+      --  which cannot be expressed readily as a postcondition as this would\n+      --  require making the instantiation Signed_Conversion and function Big\n+      --  available from the spec.\n+\n+      pragma Assert (Big (Int'Max (Lo, Int'First + 1)) < Big_10 ** (W - 1));\n+      pragma Assert (Big (Int'Max (Hi, Int'First + 1)) < Big_10 ** (W - 1));\n+\n       return W;\n    end if;\n "}, {"sha": "44e448dfb28e7d238b42a74d0f2f7c8a300deee7", "filename": "gcc/ada/libgnat/s-widthi.ads", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a54dfa801a1cfb387c8c43e7610b11905db505c/gcc%2Fada%2Flibgnat%2Fs-widthi.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a54dfa801a1cfb387c8c43e7610b11905db505c/gcc%2Fada%2Flibgnat%2Fs-widthi.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-widthi.ads?ref=3a54dfa801a1cfb387c8c43e7610b11905db505c", "patch": "@@ -36,4 +36,9 @@ generic\n \n    type Int is range <>;\n \n-function System.Width_I (Lo, Hi : Int) return Natural;\n+function System.Width_I (Lo, Hi : Int) return Natural\n+with\n+  Post => (if Lo > Hi then\n+             System.Width_I'Result = 0\n+           else\n+             System.Width_I'Result > 0);"}, {"sha": "0be44ffe6b9a8bfb2fba1a7c54f54bb917706864", "filename": "gcc/ada/libgnat/s-widthu.adb", "status": "modified", "additions": 36, "deletions": 18, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a54dfa801a1cfb387c8c43e7610b11905db505c/gcc%2Fada%2Flibgnat%2Fs-widthu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a54dfa801a1cfb387c8c43e7610b11905db505c/gcc%2Fada%2Flibgnat%2Fs-widthu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-widthu.adb?ref=3a54dfa801a1cfb387c8c43e7610b11905db505c", "patch": "@@ -42,14 +42,14 @@ function System.Width_U (Lo, Hi : Uns) return Natural is\n                             Loop_Invariant => Ignore,\n                             Assert         => Ignore);\n \n-   W : Natural;\n-   T : Uns;\n+   -----------------------\n+   -- Local Subprograms --\n+   -----------------------\n \n    package Unsigned_Conversion is new Unsigned_Conversions (Int => Uns);\n \n-   function Big (Arg : Uns) return Big_Integer is\n-     (Unsigned_Conversion.To_Big_Integer (Arg))\n-   with Ghost;\n+   function Big (Arg : Uns) return Big_Integer renames\n+     Unsigned_Conversion.To_Big_Integer;\n \n    --  Maximum value of exponent for 10 that fits in Uns'Base\n    function Max_Log10 return Natural is\n@@ -62,8 +62,9 @@ function System.Width_U (Lo, Hi : Uns) return Natural is\n         when others => raise Program_Error)\n    with Ghost;\n \n-   Max_W  : constant Natural := Max_Log10 with Ghost;\n-   Big_10 : constant Big_Integer := Big (10) with Ghost;\n+   ------------------\n+   -- Local Lemmas --\n+   ------------------\n \n    procedure Lemma_Lower_Mult (A, B, C : Big_Natural)\n    with\n@@ -82,15 +83,21 @@ function System.Width_U (Lo, Hi : Uns) return Natural is\n      Ghost,\n      Post => X / Y / Z = X / (Y * Z);\n \n-   procedure Lemma_Lower_Mult (A, B, C : Big_Natural) is\n-   begin\n-      null;\n-   end Lemma_Lower_Mult;\n+   ----------------------\n+   -- Lemma_Lower_Mult --\n+   ----------------------\n \n-   procedure Lemma_Div_Commutation (X, Y : Uns) is\n-   begin\n-      null;\n-   end Lemma_Div_Commutation;\n+   procedure Lemma_Lower_Mult (A, B, C : Big_Natural) is null;\n+\n+   ---------------------------\n+   -- Lemma_Div_Commutation --\n+   ---------------------------\n+\n+   procedure Lemma_Div_Commutation (X, Y : Uns) is null;\n+\n+   ---------------------\n+   -- Lemma_Div_Twice --\n+   ---------------------\n \n    procedure Lemma_Div_Twice (X : Big_Natural; Y, Z : Big_Positive) is\n       XY  : constant Big_Natural := X / Y;\n@@ -107,20 +114,31 @@ function System.Width_U (Lo, Hi : Uns) return Natural is\n       pragma Assert (X / YZ = XYZ + R / YZ);\n    end Lemma_Div_Twice;\n \n+   --  Local variables\n+\n+   W : Natural;\n+   T : Uns;\n+\n+   --  Local ghost variables\n+\n+   Max_W  : constant Natural := Max_Log10 with Ghost;\n+   Big_10 : constant Big_Integer := Big (10) with Ghost;\n+\n    Pow    : Big_Integer := 1 with Ghost;\n    T_Init : constant Uns := Uns'Max (Lo, Hi) with Ghost;\n \n+--  Start of processing for System.Width_U\n+\n begin\n    if Lo > Hi then\n       return 0;\n \n    else\n-      --  Minimum value is 2, one for sign, one for digit\n+      --  Minimum value is 2, one for space, one for digit\n \n       W := 2;\n \n-      --  Get max of absolute values, but avoid bomb if we have the maximum\n-      --  negative number (note that First + 1 has same digits as First)\n+      --  Get max of absolute values\n \n       T := Uns'Max (Lo, Hi);\n "}, {"sha": "c70d7ae25e2b9446fe943bb0663393c7583662e5", "filename": "gcc/ada/libgnat/s-widthu.ads", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a54dfa801a1cfb387c8c43e7610b11905db505c/gcc%2Fada%2Flibgnat%2Fs-widthu.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a54dfa801a1cfb387c8c43e7610b11905db505c/gcc%2Fada%2Flibgnat%2Fs-widthu.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-widthu.ads?ref=3a54dfa801a1cfb387c8c43e7610b11905db505c", "patch": "@@ -36,4 +36,9 @@ generic\n \n    type Uns is mod <>;\n \n-function System.Width_U (Lo, Hi : Uns) return Natural;\n+function System.Width_U (Lo, Hi : Uns) return Natural\n+with\n+  Post => (if Lo > Hi then\n+             System.Width_U'Result = 0\n+           else\n+             System.Width_U'Result > 0);"}, {"sha": "f694470f396d0fb0c84aae16c8fcf5f4cef6218c", "filename": "gcc/ada/libgnat/s-widuns.ads", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a54dfa801a1cfb387c8c43e7610b11905db505c/gcc%2Fada%2Flibgnat%2Fs-widuns.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a54dfa801a1cfb387c8c43e7610b11905db505c/gcc%2Fada%2Flibgnat%2Fs-widuns.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-widuns.ads?ref=3a54dfa801a1cfb387c8c43e7610b11905db505c", "patch": "@@ -31,6 +31,17 @@\n \n --  Width attribute for modular integers up to Integer\n \n+--  Preconditions in this unit are meant for analysis only, not for run-time\n+--  checking, so that the expected exceptions are raised. This is enforced by\n+--  setting the corresponding assertion policy to Ignore. Postconditions and\n+--  contract cases should not be executed at runtime as well, in order not to\n+--  slow down the execution of these functions.\n+\n+pragma Assertion_Policy (Pre            => Ignore,\n+                         Post           => Ignore,\n+                         Contract_Cases => Ignore,\n+                         Ghost          => Ignore);\n+\n with System.Width_U;\n with System.Unsigned_Types;\n "}]}