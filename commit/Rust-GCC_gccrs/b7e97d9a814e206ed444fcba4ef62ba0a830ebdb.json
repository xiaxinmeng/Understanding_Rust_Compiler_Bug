{"sha": "b7e97d9a814e206ed444fcba4ef62ba0a830ebdb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjdlOTdkOWE4MTRlMjA2ZWQ0NDRmY2JhNGVmNjJiYTBhODMwZWJkYg==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2019-05-15T15:12:47Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2019-05-15T15:12:47Z"}, "message": "i386: Emulate MMX sse_cvtpi2ps with SSE\n\nEmulate MMX sse_cvtpi2ps with SSE2 cvtdq2ps, preserving upper 64 bits of\ndestination XMM register.  Only SSE register source operand is allowed.\n\n\tPR target/89021\n\t* config/i386/sse.md (sse_cvtpi2ps): Changed to\n\tdefine_insn_and_split.  Also allow TARGET_MMX_WITH_SSE.  Add\n\tSSE emulation.\n\nFrom-SVN: r271228", "tree": {"sha": "4259eb62776fa2b48498285965edfbd7eab889b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4259eb62776fa2b48498285965edfbd7eab889b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b7e97d9a814e206ed444fcba4ef62ba0a830ebdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7e97d9a814e206ed444fcba4ef62ba0a830ebdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7e97d9a814e206ed444fcba4ef62ba0a830ebdb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7e97d9a814e206ed444fcba4ef62ba0a830ebdb/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f3d6634ba3d2b6f7ba14a6189ca2452264064d14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3d6634ba3d2b6f7ba14a6189ca2452264064d14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3d6634ba3d2b6f7ba14a6189ca2452264064d14"}], "stats": {"total": 71, "additions": 63, "deletions": 8}, "files": [{"sha": "24b36d89b98f1b351479cd85af26a3f581331fb7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7e97d9a814e206ed444fcba4ef62ba0a830ebdb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7e97d9a814e206ed444fcba4ef62ba0a830ebdb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b7e97d9a814e206ed444fcba4ef62ba0a830ebdb", "patch": "@@ -1,3 +1,10 @@\n+2019-05-15  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/89021\n+\t* config/i386/sse.md (sse_cvtpi2ps): Changed to\n+\tdefine_insn_and_split.  Also allow TARGET_MMX_WITH_SSE.  Add\n+\tSSE emulation.\n+\n 2019-05-15  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/89021"}, {"sha": "ae328b797e6aaf011db08427c6264a1de68e5a0a", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 56, "deletions": 8, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7e97d9a814e206ed444fcba4ef62ba0a830ebdb/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7e97d9a814e206ed444fcba4ef62ba0a830ebdb/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=b7e97d9a814e206ed444fcba4ef62ba0a830ebdb", "patch": "@@ -4992,16 +4992,64 @@\n ;;\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n \n-(define_insn \"sse_cvtpi2ps\"\n-  [(set (match_operand:V4SF 0 \"register_operand\" \"=x\")\n+(define_insn_and_split \"sse_cvtpi2ps\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=x,x,Yv\")\n \t(vec_merge:V4SF\n \t  (vec_duplicate:V4SF\n-\t    (float:V2SF (match_operand:V2SI 2 \"nonimmediate_operand\" \"ym\")))\n-\t  (match_operand:V4SF 1 \"register_operand\" \"0\")\n-\t  (const_int 3)))]\n-  \"TARGET_SSE\"\n-  \"cvtpi2ps\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"ssecvt\")\n+\t    (float:V2SF (match_operand:V2SI 2 \"register_mmxmem_operand\" \"ym,x,Yv\")))\n+\t  (match_operand:V4SF 1 \"register_operand\" \"0,0,Yv\")\n+\t  (const_int 3)))\n+   (clobber (match_scratch:V4SF 3 \"=X,x,Yv\"))]\n+  \"TARGET_SSE || TARGET_MMX_WITH_SSE\"\n+  \"@\n+   cvtpi2ps\\t{%2, %0|%0, %2}\n+   #\n+   #\"\n+  \"TARGET_MMX_WITH_SSE && reload_completed\"\n+  [(const_int 0)]\n+{\n+  rtx op2 = lowpart_subreg (V4SImode, operands[2],\n+\t\t\t    GET_MODE (operands[2]));\n+  /* Generate SSE2 cvtdq2ps.  */\n+  rtx insn = gen_floatv4siv4sf2 (operands[3], op2);\n+  emit_insn (insn);\n+\n+  /* Merge operands[3] with operands[0].  */\n+  rtx mask, op1;\n+  if (TARGET_AVX)\n+    {\n+      mask = gen_rtx_PARALLEL (VOIDmode,\n+\t\t\t       gen_rtvec (4, GEN_INT (0), GEN_INT (1),\n+\t\t\t\t\t  GEN_INT (6), GEN_INT (7)));\n+      op1 = gen_rtx_VEC_CONCAT (V8SFmode, operands[3], operands[1]);\n+      op2 = gen_rtx_VEC_SELECT (V4SFmode, op1, mask);\n+      insn = gen_rtx_SET (operands[0], op2);\n+    }\n+  else\n+    {\n+      /* NB: SSE can only concatenate OP0 and OP3 to OP0.  */\n+      mask = gen_rtx_PARALLEL (VOIDmode,\n+\t\t\t       gen_rtvec (4, GEN_INT (2), GEN_INT (3),\n+\t\t\t\t\t  GEN_INT (4), GEN_INT (5)));\n+      op1 = gen_rtx_VEC_CONCAT (V8SFmode, operands[0], operands[3]);\n+      op2 = gen_rtx_VEC_SELECT (V4SFmode, op1, mask);\n+      insn = gen_rtx_SET (operands[0], op2);\n+      emit_insn (insn);\n+\n+      /* Swap bits 0:63 with bits 64:127.  */\n+      mask = gen_rtx_PARALLEL (VOIDmode,\n+\t\t\t       gen_rtvec (4, GEN_INT (2), GEN_INT (3),\n+\t\t\t\t\t  GEN_INT (0), GEN_INT (1)));\n+      rtx dest = lowpart_subreg (V4SImode, operands[0],\n+\t\t\t\t GET_MODE (operands[0]));\n+      op1 = gen_rtx_VEC_SELECT (V4SImode, dest, mask);\n+      insn = gen_rtx_SET (dest, op1);\n+    }\n+  emit_insn (insn);\n+  DONE;\n+}\n+  [(set_attr \"mmx_isa\" \"native,x64_noavx,x64_avx\")\n+   (set_attr \"type\" \"ssecvt\")\n    (set_attr \"mode\" \"V4SF\")])\n \n (define_insn \"sse_cvtps2pi\""}]}