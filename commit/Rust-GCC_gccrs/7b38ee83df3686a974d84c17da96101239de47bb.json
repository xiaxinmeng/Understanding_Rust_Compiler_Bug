{"sha": "7b38ee83df3686a974d84c17da96101239de47bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2IzOGVlODNkZjM2ODZhOTc0ZDg0YzE3ZGE5NjEwMTIzOWRlNDdiYg==", "commit": {"author": {"name": "Teresa Johnson", "email": "tejohnson@google.com", "date": "2012-04-06T05:03:49Z"}, "committer": {"name": "Teresa Johnson", "email": "tejohnson@gcc.gnu.org", "date": "2012-04-06T05:03:49Z"}, "message": "Avoid instructions that incur expensive length-changing prefix (LCP) stalls on some x86-64 implementations...\n\nAvoid instructions that incur expensive length-changing prefix (LCP) stalls\non some x86-64 implementations, notably Core2 and Corei7. Specifically, a move of\na 16-bit constant into memory requires a length-changing prefix and can incur significant\npenalties. Modified an old patch written by H.J to split such instructions\nduring peephole2.\n\n2012-04-05  Teresa Johnson  <tejohnson@google.com>\n\t    H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* config/i386/i386.h (ix86_tune_indices): Add\n\tX86_TUNE_LCP_STALL.\n\t* config/i386/i386.md (move immediate to memory peephole2):\n\tAdd cases for HImode move when LCP stall avoidance is needed.\n\t* config/i386/i386.c (initial_ix86_tune_features): Initialize\n\tX86_TUNE_LCP_STALL entry.\n\nCo-Authored-By: H.J. Lu <hongjiu.lu@intel.com>\n\nFrom-SVN: r186176", "tree": {"sha": "a12fd9a169d4afde5d4da2344818e26d9caa4a08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a12fd9a169d4afde5d4da2344818e26d9caa4a08"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b38ee83df3686a974d84c17da96101239de47bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b38ee83df3686a974d84c17da96101239de47bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b38ee83df3686a974d84c17da96101239de47bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b38ee83df3686a974d84c17da96101239de47bb/comments", "author": {"login": "teresajohnson", "id": 20446403, "node_id": "MDQ6VXNlcjIwNDQ2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/20446403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/teresajohnson", "html_url": "https://github.com/teresajohnson", "followers_url": "https://api.github.com/users/teresajohnson/followers", "following_url": "https://api.github.com/users/teresajohnson/following{/other_user}", "gists_url": "https://api.github.com/users/teresajohnson/gists{/gist_id}", "starred_url": "https://api.github.com/users/teresajohnson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/teresajohnson/subscriptions", "organizations_url": "https://api.github.com/users/teresajohnson/orgs", "repos_url": "https://api.github.com/users/teresajohnson/repos", "events_url": "https://api.github.com/users/teresajohnson/events{/privacy}", "received_events_url": "https://api.github.com/users/teresajohnson/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "939c8f05b8ebcb9d34f2b58055899c3f71912a2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/939c8f05b8ebcb9d34f2b58055899c3f71912a2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/939c8f05b8ebcb9d34f2b58055899c3f71912a2c"}], "stats": {"total": 33, "additions": 27, "deletions": 6}, "files": [{"sha": "8118ed59ad7b039a55163966694be261cb804ca1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b38ee83df3686a974d84c17da96101239de47bb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b38ee83df3686a974d84c17da96101239de47bb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7b38ee83df3686a974d84c17da96101239de47bb", "patch": "@@ -1,3 +1,13 @@\n+2012-04-05  Teresa Johnson  <tejohnson@google.com>\n+\t    H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* config/i386/i386.h (ix86_tune_indices): Add\n+\tX86_TUNE_LCP_STALL.\n+\t* config/i386/i386.md (move immediate to memory peephole2):\n+\tAdd cases for HImode move when LCP stall avoidance is needed.\n+\t* config/i386/i386.c (initial_ix86_tune_features): Initialize\n+\tX86_TUNE_LCP_STALL entry.\n+\n 2012-04-05  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/52882"}, {"sha": "8974ddc9a020bc38835634de3fe1f3ec2cdda1e4", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b38ee83df3686a974d84c17da96101239de47bb/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b38ee83df3686a974d84c17da96101239de47bb/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=7b38ee83df3686a974d84c17da96101239de47bb", "patch": "@@ -1964,6 +1964,10 @@ static unsigned int initial_ix86_tune_features[X86_TUNE_LAST] = {\n   /* X86_TUNE_PARTIAL_FLAG_REG_STALL */\n   m_CORE2I7 | m_GENERIC,\n \n+  /* X86_TUNE_LCP_STALL: Avoid an expensive length-changing prefix stall\n+   * on 16-bit immediate moves into memory on Core2 and Corei7.  */\n+  m_CORE2I7 | m_GENERIC,\n+\n   /* X86_TUNE_USE_HIMODE_FIOP */\n   m_386 | m_486 | m_K6_GEODE,\n "}, {"sha": "8942ea86edf638f11cc4a901385e751eea85fddf", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b38ee83df3686a974d84c17da96101239de47bb/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b38ee83df3686a974d84c17da96101239de47bb/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=7b38ee83df3686a974d84c17da96101239de47bb", "patch": "@@ -262,6 +262,7 @@ enum ix86_tune_indices {\n   X86_TUNE_MOVX,\n   X86_TUNE_PARTIAL_REG_STALL,\n   X86_TUNE_PARTIAL_FLAG_REG_STALL,\n+  X86_TUNE_LCP_STALL,\n   X86_TUNE_USE_HIMODE_FIOP,\n   X86_TUNE_USE_SIMODE_FIOP,\n   X86_TUNE_USE_MOV0,\n@@ -340,6 +341,8 @@ extern unsigned char ix86_tune_features[X86_TUNE_LAST];\n #define TARGET_PARTIAL_REG_STALL ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL]\n #define TARGET_PARTIAL_FLAG_REG_STALL \\\n \tix86_tune_features[X86_TUNE_PARTIAL_FLAG_REG_STALL]\n+#define TARGET_LCP_STALL \\\n+\tix86_tune_features[X86_TUNE_LCP_STALL]\n #define TARGET_USE_HIMODE_FIOP\tix86_tune_features[X86_TUNE_USE_HIMODE_FIOP]\n #define TARGET_USE_SIMODE_FIOP\tix86_tune_features[X86_TUNE_USE_SIMODE_FIOP]\n #define TARGET_USE_MOV0\t\tix86_tune_features[X86_TUNE_USE_MOV0]"}, {"sha": "dd1f9be16c289bf8cc85021582b514d3657ae406", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b38ee83df3686a974d84c17da96101239de47bb/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b38ee83df3686a974d84c17da96101239de47bb/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=7b38ee83df3686a974d84c17da96101239de47bb", "patch": "@@ -16971,15 +16971,17 @@\n    (set (match_dup 0) (match_dup 2))])\n \n ;; Don't move an immediate directly to memory when the instruction\n-;; gets too big.\n+;; gets too big, or if LCP stalls are a problem for 16-bit moves.\n (define_peephole2\n   [(match_scratch:SWI124 1 \"<r>\")\n    (set (match_operand:SWI124 0 \"memory_operand\")\n         (const_int 0))]\n   \"optimize_insn_for_speed_p ()\n-   && !TARGET_USE_MOV0\n-   && TARGET_SPLIT_LONG_MOVES\n-   && get_attr_length (insn) >= ix86_cur_cost ()->large_insn\n+   && ((<MODE>mode == HImode\n+       && TARGET_LCP_STALL)\n+       || (!TARGET_USE_MOV0\n+          && TARGET_SPLIT_LONG_MOVES\n+          && get_attr_length (insn) >= ix86_cur_cost ()->large_insn))\n    && peep2_regno_dead_p (0, FLAGS_REG)\"\n   [(parallel [(set (match_dup 2) (const_int 0))\n \t      (clobber (reg:CC FLAGS_REG))])\n@@ -16991,8 +16993,10 @@\n    (set (match_operand:SWI124 0 \"memory_operand\")\n         (match_operand:SWI124 1 \"immediate_operand\"))]\n   \"optimize_insn_for_speed_p ()\n-   && TARGET_SPLIT_LONG_MOVES\n-   && get_attr_length (insn) >= ix86_cur_cost ()->large_insn\"\n+   && ((<MODE>mode == HImode\n+       && TARGET_LCP_STALL)\n+       || (TARGET_SPLIT_LONG_MOVES\n+          && get_attr_length (insn) >= ix86_cur_cost ()->large_insn))\"\n   [(set (match_dup 2) (match_dup 1))\n    (set (match_dup 0) (match_dup 2))])\n "}]}