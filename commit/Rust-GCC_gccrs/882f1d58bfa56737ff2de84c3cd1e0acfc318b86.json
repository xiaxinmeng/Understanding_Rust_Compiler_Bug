{"sha": "882f1d58bfa56737ff2de84c3cd1e0acfc318b86", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODgyZjFkNThiZmE1NjczN2ZmMmRlODRjM2NkMWUwYWNmYzMxOGI4Ng==", "commit": {"author": {"name": "Jeff Law", "email": "jlaw@localhost.localdomain", "date": "2021-08-15T04:13:23Z"}, "committer": {"name": "Jeff Law", "email": "jlaw@localhost.localdomain", "date": "2021-08-15T04:15:32Z"}, "message": "Improve many SImode shifts on the H8/300H\n\nAs I've mentioned before, the H8/300H can only shift a single bit position at a time.  Naturally this means many shifts are implemented as loops.  There's a variety of special cases that we can do without loops by using rotates, sub-word moves, etc.  The general guidance for the port has been to only use inline or special sequences if they're shorter or just one instruction longer than the loop.\n\nThis was pretty reasonable guidance for QI/HI mode.  It was relaxed a bit about 10 years ago for HImode in particular where the kpit team realized they could save 50-100 cycles for some shifts by allowing 2 instructions of code growth over the loop implementation.\n\nBut they only re-tuned HImode shifts.  There's even bigger benefits for re-tuning SImode shifts.  There's cases where we can save close to 200 cycles by allowing 2 additional instructions.\n\nThis patch re-tunes SImode shifts on the H8/300H primarily by inlining more often or using a special sequence + inlining for residuals.  Both cases were already supported and this just uses those existing capabilities more often, so it was trivial to implement.  I think there's some cases were entirely new special sequences could be used, but I haven't tried those yet.\n\ngcc/\n\n\t* config/h8300/h8300.c (shift_alg_si): Retune H8/300H shifts\n\tto allow a bit more code growth, saving many dozens of cycles.\n\t(h8300_option_override): Adjus shift_alg_si if optimizing for\n\tcode size.\n\t(get_shift_alg): Use special + inline shifts for residuals\n\tin more cases.", "tree": {"sha": "53e5b9a5e8befa1037ebf41d9616656715f7c433", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53e5b9a5e8befa1037ebf41d9616656715f7c433"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/882f1d58bfa56737ff2de84c3cd1e0acfc318b86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/882f1d58bfa56737ff2de84c3cd1e0acfc318b86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/882f1d58bfa56737ff2de84c3cd1e0acfc318b86", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/882f1d58bfa56737ff2de84c3cd1e0acfc318b86/comments", "author": null, "committer": null, "parents": [{"sha": "829931ec93ab7d5ab73f31be9da504abb6ae459e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/829931ec93ab7d5ab73f31be9da504abb6ae459e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/829931ec93ab7d5ab73f31be9da504abb6ae459e"}], "stats": {"total": 52, "additions": 41, "deletions": 11}, "files": [{"sha": "7959ad1e276006257206735e2f41b23a34d8ed9d", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 41, "deletions": 11, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/882f1d58bfa56737ff2de84c3cd1e0acfc318b86/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/882f1d58bfa56737ff2de84c3cd1e0acfc318b86/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=882f1d58bfa56737ff2de84c3cd1e0acfc318b86", "patch": "@@ -228,18 +228,18 @@ static enum shift_alg shift_alg_si[2][3][32] = {\n     /*  8    9   10   11   12   13   14   15  */\n     /* 16   17   18   19   20   21   22   23  */\n     /* 24   25   26   27   28   29   30   31  */\n-    { INL, INL, INL, INL, INL, LOP, LOP, LOP,\n+    { INL, INL, INL, INL, INL, INL, INL, LOP,\n       SPC, LOP, LOP, LOP, LOP, LOP, LOP, SPC,\n-      SPC, SPC, SPC, SPC, LOP, LOP, LOP, LOP,\n-      SPC, LOP, LOP, LOP, SPC, SPC, SPC, SPC }, /* SHIFT_ASHIFT   */\n-    { INL, INL, INL, INL, INL, LOP, LOP, LOP,\n+      SPC, SPC, SPC, SPC, SPC, SPC, SPC, SPC,\n+      SPC, SPC, SPC, SPC, SPC, SPC, SPC, SPC }, /* SHIFT_ASHIFT   */\n+    { INL, INL, INL, INL, INL, INL, INL, LOP,\n       SPC, LOP, LOP, LOP, LOP, LOP, LOP, SPC,\n-      SPC, SPC, SPC, SPC, LOP, LOP, LOP, LOP,\n-      SPC, LOP, LOP, LOP, SPC, SPC, SPC, SPC }, /* SHIFT_LSHIFTRT */\n-    { INL, INL, INL, INL, INL, LOP, LOP, LOP,\n+      SPC, SPC, SPC, SPC, SPC, SPC, SPC, SPC,\n+      SPC, SPC, SPC, SPC, SPC, SPC, SPC, SPC }, /* SHIFT_LSHIFTRT */\n+    { INL, INL, INL, INL, INL, INL, INL, LOP,\n       SPC, LOP, LOP, LOP, LOP, LOP, LOP, LOP,\n-      SPC, SPC, SPC, SPC, LOP, LOP, LOP, LOP,\n-      SPC, LOP, LOP, LOP, LOP, LOP, LOP, SPC }, /* SHIFT_ASHIFTRT */\n+      SPC, SPC, SPC, SPC, SPC, SPC, SPC, SPC,\n+      SPC, SPC, SPC, SPC, LOP, LOP, LOP, SPC }, /* SHIFT_ASHIFTRT */\n   },\n   {\n     /* TARGET_H8300S  */\n@@ -343,6 +343,36 @@ h8300_option_override (void)\n       shift_alg_hi[H8_300H][SHIFT_ASHIFTRT][13] = SHIFT_LOOP;\n       shift_alg_hi[H8_300H][SHIFT_ASHIFTRT][14] = SHIFT_LOOP;\n \n+      shift_alg_si[H8_300H][SHIFT_ASHIFT][5] = SHIFT_LOOP;\n+      shift_alg_si[H8_300H][SHIFT_ASHIFT][6] = SHIFT_LOOP;\n+      shift_alg_si[H8_300H][SHIFT_ASHIFT][20] = SHIFT_LOOP;\n+      shift_alg_si[H8_300H][SHIFT_ASHIFT][21] = SHIFT_LOOP;\n+      shift_alg_si[H8_300H][SHIFT_ASHIFT][22] = SHIFT_LOOP;\n+      shift_alg_si[H8_300H][SHIFT_ASHIFT][23] = SHIFT_LOOP;\n+      shift_alg_si[H8_300H][SHIFT_ASHIFT][25] = SHIFT_LOOP;\n+      shift_alg_si[H8_300H][SHIFT_ASHIFT][26] = SHIFT_LOOP;\n+      shift_alg_si[H8_300H][SHIFT_ASHIFT][27] = SHIFT_LOOP;\n+\n+      shift_alg_si[H8_300H][SHIFT_LSHIFTRT][5] = SHIFT_LOOP;\n+      shift_alg_si[H8_300H][SHIFT_LSHIFTRT][6] = SHIFT_LOOP;\n+      shift_alg_si[H8_300H][SHIFT_LSHIFTRT][20] = SHIFT_LOOP;\n+      shift_alg_si[H8_300H][SHIFT_LSHIFTRT][21] = SHIFT_LOOP;\n+      shift_alg_si[H8_300H][SHIFT_LSHIFTRT][22] = SHIFT_LOOP;\n+      shift_alg_si[H8_300H][SHIFT_LSHIFTRT][23] = SHIFT_LOOP;\n+      shift_alg_si[H8_300H][SHIFT_LSHIFTRT][25] = SHIFT_LOOP;\n+      shift_alg_si[H8_300H][SHIFT_LSHIFTRT][26] = SHIFT_LOOP;\n+      shift_alg_si[H8_300H][SHIFT_LSHIFTRT][27] = SHIFT_LOOP;\n+\n+      shift_alg_si[H8_300H][SHIFT_ASHIFTRT][5] = SHIFT_LOOP;\n+      shift_alg_si[H8_300H][SHIFT_ASHIFTRT][6] = SHIFT_LOOP;\n+      shift_alg_si[H8_300H][SHIFT_ASHIFTRT][20] = SHIFT_LOOP;\n+      shift_alg_si[H8_300H][SHIFT_ASHIFTRT][21] = SHIFT_LOOP;\n+      shift_alg_si[H8_300H][SHIFT_ASHIFTRT][22] = SHIFT_LOOP;\n+      shift_alg_si[H8_300H][SHIFT_ASHIFTRT][23] = SHIFT_LOOP;\n+      shift_alg_si[H8_300H][SHIFT_ASHIFTRT][25] = SHIFT_LOOP;\n+      shift_alg_si[H8_300H][SHIFT_ASHIFTRT][26] = SHIFT_LOOP;\n+      shift_alg_si[H8_300H][SHIFT_ASHIFTRT][27] = SHIFT_LOOP;\n+\n       /* H8S */\n       shift_alg_hi[H8_S][SHIFT_ASHIFTRT][14] = SHIFT_LOOP;\n     }\n@@ -3784,7 +3814,7 @@ get_shift_alg (enum shift_type shift_type, enum shift_mode shift_mode,\n \t      gcc_unreachable ();\n \t    }\n \t}\n-      else if ((TARGET_H8300H && count >= 16 && count <= 19)\n+      else if ((TARGET_H8300H && count >= 16 && count <= 23)\n \t       || (TARGET_H8300S && count >= 16 && count <= 21))\n \t{\n \t  info->remainder = count - 16;\n@@ -3804,7 +3834,7 @@ get_shift_alg (enum shift_type shift_type, enum shift_mode shift_mode,\n \t      goto end;\n \t    }\n \t}\n-      else if ((TARGET_H8300H && count == 24)\n+      else if ((TARGET_H8300H && count >= 24 || count <= 27)\n \t       || (TARGET_H8300S && count >= 24 && count <= 25))\n \t{\n \t  info->remainder = count - 24;"}]}