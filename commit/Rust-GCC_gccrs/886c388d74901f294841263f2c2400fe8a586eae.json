{"sha": "886c388d74901f294841263f2c2400fe8a586eae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODg2YzM4OGQ3NDkwMWYyOTQ4NDEyNjNmMmMyNDAwZmU4YTU4NmVhZQ==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2015-11-17T21:42:09Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2015-11-17T21:42:09Z"}, "message": "Add in_oacc_kernels_region in struct loop\n\n2015-11-17  Tom de Vries  <tom@codesourcery.com>\n\n\t* cfgloop.h (struct loop): Add in_oacc_kernels_region field.\n\t* omp-low.c (mark_loops_in_oacc_kernels_region): New function.\n\t(expand_omp_target): Call mark_loops_in_oacc_kernels_region.\n\nFrom-SVN: r230502", "tree": {"sha": "6af2fa8536739693ee356033f1818403b79d8687", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6af2fa8536739693ee356033f1818403b79d8687"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/886c388d74901f294841263f2c2400fe8a586eae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/886c388d74901f294841263f2c2400fe8a586eae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/886c388d74901f294841263f2c2400fe8a586eae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/886c388d74901f294841263f2c2400fe8a586eae/comments", "author": null, "committer": null, "parents": [{"sha": "211c93053a337e65ef245d933f4804a492ba5c6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/211c93053a337e65ef245d933f4804a492ba5c6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/211c93053a337e65ef245d933f4804a492ba5c6e"}], "stats": {"total": 53, "additions": 53, "deletions": 0}, "files": [{"sha": "b208b470c0b62fd2e629bd00928a38113e1903b3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/886c388d74901f294841263f2c2400fe8a586eae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/886c388d74901f294841263f2c2400fe8a586eae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=886c388d74901f294841263f2c2400fe8a586eae", "patch": "@@ -1,3 +1,9 @@\n+2015-11-17  Tom de Vries  <tom@codesourcery.com>\n+\n+\t* cfgloop.h (struct loop): Add in_oacc_kernels_region field.\n+\t* omp-low.c (mark_loops_in_oacc_kernels_region): New function.\n+\t(expand_omp_target): Call mark_loops_in_oacc_kernels_region.\n+\n 2015-11-17  Bernd Schmidt  <bschmidt@redhat.com>\n \n \t* regrename.c (regrename_find_superclass): New function, code moved"}, {"sha": "ee73bf994c18fc037e0de94b7b5c879182109893", "filename": "gcc/cfgloop.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/886c388d74901f294841263f2c2400fe8a586eae/gcc%2Fcfgloop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/886c388d74901f294841263f2c2400fe8a586eae/gcc%2Fcfgloop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.h?ref=886c388d74901f294841263f2c2400fe8a586eae", "patch": "@@ -191,6 +191,9 @@ struct GTY ((chain_next (\"%h.next\"))) loop {\n   /* True if we should try harder to vectorize this loop.  */\n   bool force_vectorize;\n \n+  /* True if the loop is part of an oacc kernels region.  */\n+  bool in_oacc_kernels_region;\n+\n   /* For SIMD loops, this is a unique identifier of the loop, referenced\n      by IFN_GOMP_SIMD_VF, IFN_GOMP_SIMD_LANE and IFN_GOMP_SIMD_LAST_LANE\n      builtins.  */"}, {"sha": "b327abd490d56c75dbd3d6f625c00c2b3419a739", "filename": "gcc/cfgloopmanip.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/886c388d74901f294841263f2c2400fe8a586eae/gcc%2Fcfgloopmanip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/886c388d74901f294841263f2c2400fe8a586eae/gcc%2Fcfgloopmanip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloopmanip.c?ref=886c388d74901f294841263f2c2400fe8a586eae", "patch": "@@ -1021,6 +1021,7 @@ copy_loop_info (struct loop *loop, struct loop *target)\n   target->estimate_state = loop->estimate_state;\n   target->warned_aggressive_loop_optimizations\n     |= loop->warned_aggressive_loop_optimizations;\n+  target->in_oacc_kernels_region = loop->in_oacc_kernels_region;\n }\n \n /* Copies copy of LOOP as subloop of TARGET loop, placing newly"}, {"sha": "830db75a0e672176ca4dd0c109cd8ac1e53eb04c", "filename": "gcc/omp-low.c", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/886c388d74901f294841263f2c2400fe8a586eae/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/886c388d74901f294841263f2c2400fe8a586eae/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=886c388d74901f294841263f2c2400fe8a586eae", "patch": "@@ -12426,6 +12426,46 @@ get_oacc_ifn_dim_arg (const gimple *stmt)\n   return (int) axis;\n }\n \n+/* Mark the loops inside the kernels region starting at REGION_ENTRY and ending\n+   at REGION_EXIT.  */\n+\n+static void\n+mark_loops_in_oacc_kernels_region (basic_block region_entry,\n+\t\t\t\t   basic_block region_exit)\n+{\n+  struct loop *outer = region_entry->loop_father;\n+  gcc_assert (region_exit == NULL || outer == region_exit->loop_father);\n+\n+  /* Don't parallelize the kernels region if it contains more than one outer\n+     loop.  */\n+  unsigned int nr_outer_loops = 0;\n+  struct loop *single_outer;\n+  for (struct loop *loop = outer->inner; loop != NULL; loop = loop->next)\n+    {\n+      gcc_assert (loop_outer (loop) == outer);\n+\n+      if (!dominated_by_p (CDI_DOMINATORS, loop->header, region_entry))\n+\tcontinue;\n+\n+      if (region_exit != NULL\n+\t  && dominated_by_p (CDI_DOMINATORS, loop->header, region_exit))\n+\tcontinue;\n+\n+      nr_outer_loops++;\n+      single_outer = loop;\n+    }\n+  if (nr_outer_loops != 1)\n+    return;\n+\n+  for (struct loop *loop = single_outer->inner; loop != NULL; loop = loop->inner)\n+    if (loop->next)\n+      return;\n+\n+  /* Mark the loops in the region.  */\n+  for (struct loop *loop = single_outer; loop != NULL; loop = loop->inner)\n+    loop->in_oacc_kernels_region = true;\n+}\n+\n /* Expand the GIMPLE_OMP_TARGET starting at REGION.  */\n \n static void\n@@ -12481,6 +12521,9 @@ expand_omp_target (struct omp_region *region)\n   entry_bb = region->entry;\n   exit_bb = region->exit;\n \n+  if (gimple_omp_target_kind (entry_stmt) == GF_OMP_TARGET_KIND_OACC_KERNELS)\n+    mark_loops_in_oacc_kernels_region (region->entry, region->exit);\n+\n   if (offloaded)\n     {\n       unsigned srcidx, dstidx, num;"}]}