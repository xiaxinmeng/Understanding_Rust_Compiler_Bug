{"sha": "bb393514d5be4d683a72fa4bfda938943368505a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmIzOTM1MTRkNWJlNGQ2ODNhNzJmYTRiZmRhOTM4OTQzMzY4NTA1YQ==", "commit": {"author": {"name": "Ed Smith-Rowland", "email": "3dw4rd@verizon.net", "date": "2014-01-24T20:15:00Z"}, "committer": {"name": "Edward Smith-Rowland", "email": "emsr@gcc.gnu.org", "date": "2014-01-24T20:15:00Z"}, "message": "re PR libstdc++/59531 (string_view overrun in copy operation)\n\n2014-01-24  Ed Smith-Rowland  <3dw4rd@verizon.net>\n\n\tPR libstdc++/59531\n\t* testsuite/experimental/string_view/operations/copy/char/1.cc: New.\n\t* testsuite/experimental/string_view/operations/copy/wchar_t/1.cc: New.\n\n2014-01-24  Ed Smith-Rowland  <3dw4rd@verizon.net>\n\t    Peter A. Bigot <pab@pabigot.com>\n\n\tPR libstdc++/59531\n\t* include/experimental/string_view\n\t(copy(_CharT*, size_type, size_type) const): Correct throw string.\n\tCorrect copy start location.\n\n2014-01-24  Ed Smith-Rowland  <3dw4rd@verizon.net>\n\t    Peter A. Bigot <pab@pabigot.com>\n\n\tPR libstdc++/59530\n\t* include/experimental/string_view (operator[](size_type) const):\n\tFix one-off index error in debug check.\n\t* testsuite/experimental/string_view/element_access/char/1.cc: Don't\n\ttest basic_string_view at size().\n\t* testsuite/experimental/string_view/element_access/wchar_t/1.cc: Ditto.\n\n2014-01-24  Ed Smith-Rowland  <3dw4rd@verizon.net>\n\t    Peter A. Bigot <pab@pabigot.com>\n\n\tPR libstdc++/59529\n\t* include/experimental/string_view\n\t(basic_string_view(const _CharT*, size_type)): Don't care if len == 0.\n\t* testsuite/experimental/string_view/operations/substr/char/1.cc:\n\tComment out catch of out_of_range; No terminating null\n\tin basic_string_view.  Check begin == end.\n\t* testsuite/experimental/string_view/operations/substr/wchar_t/1.cc:\n\tDitto.\n\n\nCo-Authored-By: Peter A. Bigot <pab@pabigot.com>\n\nFrom-SVN: r207060", "tree": {"sha": "2ead9d19b22d7de9c759bd3b41bbead84fff79f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ead9d19b22d7de9c759bd3b41bbead84fff79f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb393514d5be4d683a72fa4bfda938943368505a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb393514d5be4d683a72fa4bfda938943368505a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb393514d5be4d683a72fa4bfda938943368505a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb393514d5be4d683a72fa4bfda938943368505a/comments", "author": {"login": "emsr", "id": 1936479, "node_id": "MDQ6VXNlcjE5MzY0Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1936479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emsr", "html_url": "https://github.com/emsr", "followers_url": "https://api.github.com/users/emsr/followers", "following_url": "https://api.github.com/users/emsr/following{/other_user}", "gists_url": "https://api.github.com/users/emsr/gists{/gist_id}", "starred_url": "https://api.github.com/users/emsr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emsr/subscriptions", "organizations_url": "https://api.github.com/users/emsr/orgs", "repos_url": "https://api.github.com/users/emsr/repos", "events_url": "https://api.github.com/users/emsr/events{/privacy}", "received_events_url": "https://api.github.com/users/emsr/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f74912779b6c45d42c0a09821ad7bad0ae99e8c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f74912779b6c45d42c0a09821ad7bad0ae99e8c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f74912779b6c45d42c0a09821ad7bad0ae99e8c4"}], "stats": {"total": 177, "additions": 156, "deletions": 21}, "files": [{"sha": "b575a92f5c4baa3a1e34022c4027323e4e60757c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb393514d5be4d683a72fa4bfda938943368505a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb393514d5be4d683a72fa4bfda938943368505a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=bb393514d5be4d683a72fa4bfda938943368505a", "patch": "@@ -1,3 +1,39 @@\n+2014-01-24  Ed Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\tPR libstdc++/59531\n+\t* testsuite/experimental/string_view/operations/copy/char/1.cc: New.\n+\t* testsuite/experimental/string_view/operations/copy/wchar_t/1.cc: New.\n+\n+2014-01-24  Ed Smith-Rowland  <3dw4rd@verizon.net>\n+\t    Peter A. Bigot <pab@pabigot.com>\n+\n+\tPR libstdc++/59531\n+\t* include/experimental/string_view\n+\t(copy(_CharT*, size_type, size_type) const): Correct throw string.\n+\tCorrect copy start location.\n+\n+2014-01-24  Ed Smith-Rowland  <3dw4rd@verizon.net>\n+\t    Peter A. Bigot <pab@pabigot.com>\n+\n+\tPR libstdc++/59530\n+\t* include/experimental/string_view (operator[](size_type) const):\n+\tFix one-off index error in debug check.\n+\t* testsuite/experimental/string_view/element_access/char/1.cc: Don't\n+\ttest basic_string_view at size().\n+\t* testsuite/experimental/string_view/element_access/wchar_t/1.cc: Ditto.\n+\n+2014-01-24  Ed Smith-Rowland  <3dw4rd@verizon.net>\n+\t    Peter A. Bigot <pab@pabigot.com>\n+\n+\tPR libstdc++/59529\n+\t* include/experimental/string_view\n+\t(basic_string_view(const _CharT*, size_type)): Don't care if len == 0.\n+\t* testsuite/experimental/string_view/operations/substr/char/1.cc:\n+\tComment out catch of out_of_range; No terminating null\n+\tin basic_string_view.  Check begin == end.\n+\t* testsuite/experimental/string_view/operations/substr/wchar_t/1.cc:\n+\tDitto.\n+\n 2014-01-24  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/59548"}, {"sha": "bebeb6b62ea2f356fcf91d98d351694838703af7", "filename": "libstdc++-v3/include/experimental/string_view", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb393514d5be4d683a72fa4bfda938943368505a/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb393514d5be4d683a72fa4bfda938943368505a/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view?ref=bb393514d5be4d683a72fa4bfda938943368505a", "patch": "@@ -117,7 +117,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       constexpr basic_string_view(const _CharT* __str, size_type __len)\n       : _M_len{__str == nullptr ? 0 :__len},\n-        _M_str{__str == nullptr || __len == 0 ? _S_empty_str : __str}\n+        _M_str{__str == nullptr ? _S_empty_str : __str}\n       { }\n \n       basic_string_view&\n@@ -182,7 +182,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       operator[](size_type __pos) const\n       {\n \t// TODO: Assert to restore in a way compatible with the constexpr.\n-\t// _GLIBCXX_DEBUG_ASSERT(__pos <= this->_M_len);\n+\t// _GLIBCXX_DEBUG_ASSERT(__pos < this->_M_len);\n \treturn *(this->_M_str + __pos);\n       }\n \n@@ -259,14 +259,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       copy(_CharT* __str, size_type __n, size_type __pos = 0) const\n       {\n \t__glibcxx_requires_string_len(__str, __n);\n-\tif (__pos >= this->_M_len)\n-\t  __throw_out_of_range_fmt(__N(\"basic_string_view::at: __pos \"\n-\t\t\t\t       \"(which is %zu) >= this->size() \"\n+\tif (__pos > this->_M_len)\n+\t  __throw_out_of_range_fmt(__N(\"basic_string_view::copy: __pos \"\n+\t\t\t\t       \"(which is %zu) > this->size() \"\n \t\t\t\t       \"(which is %zu)\"),\n \t\t\t\t   __pos, this->size());\n \tsize_type __rlen{std::min(__n, size_type{this->_M_len  - __pos})};\n \tfor (auto __begin = this->_M_str + __pos,\n-\t     __end = this->_M_str + __rlen; __begin != __end;)\n+\t     __end = __begin + __rlen; __begin != __end;)\n \t  *__str++ = *__begin++;\n \treturn __rlen;\n       }\n@@ -277,11 +277,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       constexpr basic_string_view\n       substr(size_type __pos, size_type __n=npos) const\n       {\n-\treturn __pos < this->_M_len\n+\treturn __pos <= this->_M_len\n \t     ? basic_string_view{this->_M_str + __pos,\n \t\t\t\tstd::min(__n, size_type{this->_M_len  - __pos})}\n-\t     : (__throw_out_of_range_fmt(__N(\"basic_string_view::at: __pos \"\n-\t\t\t\t\t     \"(which is %zu) >= this->size() \"\n+\t     : (__throw_out_of_range_fmt(__N(\"basic_string_view::substr: __pos \"\n+\t\t\t\t\t     \"(which is %zu) > this->size() \"\n \t\t\t\t\t     \"(which is %zu)\"),\n \t\t\t\t     __pos, this->size()), basic_string_view{});\n       }"}, {"sha": "0a0b19f60be99d8c556d1bc77dbeba30b9d16645", "filename": "libstdc++-v3/testsuite/experimental/string_view/element_access/char/1.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb393514d5be4d683a72fa4bfda938943368505a/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Felement_access%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb393514d5be4d683a72fa4bfda938943368505a/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Felement_access%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Felement_access%2Fchar%2F1.cc?ref=bb393514d5be4d683a72fa4bfda938943368505a", "patch": "@@ -41,8 +41,9 @@ test01()\n   csz01 = str01.size();\n   cref cref1 = str01[csz01 - 1];\n   VERIFY( cref1 == 'a' );\n-  cref cref2 = str01[csz01];\n-  VERIFY( cref2 == char() );\n+  // Undefined behavior at size().\n+  //cref cref2 = str01[csz01];\n+  //VERIFY( cref2 == char() );\n \n   // const_reference at(size_type pos) const;\n   csz01 = str01.size();"}, {"sha": "e3df84d41f083c2318197017cc26b804197f1547", "filename": "libstdc++-v3/testsuite/experimental/string_view/element_access/wchar_t/1.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb393514d5be4d683a72fa4bfda938943368505a/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Felement_access%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb393514d5be4d683a72fa4bfda938943368505a/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Felement_access%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Felement_access%2Fwchar_t%2F1.cc?ref=bb393514d5be4d683a72fa4bfda938943368505a", "patch": "@@ -41,8 +41,9 @@ test01()\n   csz01 = str01.size();\n   cref cref1 = str01[csz01 - 1];\n   VERIFY( cref1 == L'a' );\n-  cref cref2 = str01[csz01];\n-  VERIFY( cref2 == wchar_t() );\n+  // Undefined behavior at size().\n+  //cref cref2 = str01[csz01];\n+  //VERIFY( cref2 == wchar_t() );\n \n   // const_reference at(size_type pos) const;\n   csz01 = str01.size();"}, {"sha": "25b2af133d3032e982857c2c1f9ba84c4e3c883b", "filename": "libstdc++-v3/testsuite/experimental/string_view/operations/copy/char/1.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb393514d5be4d683a72fa4bfda938943368505a/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Fcopy%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb393514d5be4d683a72fa4bfda938943368505a/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Fcopy%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Fcopy%2Fchar%2F1.cc?ref=bb393514d5be4d683a72fa4bfda938943368505a", "patch": "@@ -0,0 +1,50 @@\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// basic_string_view::copy\n+\n+#include <experimental/string_view>\n+#include <stdexcept>\n+#include <testsuite_hooks.h>\n+\n+bool\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  typedef std::experimental::string_view::size_type csize_type;\n+\n+  const char str_lit01[] = \"123456789A\";\n+  const std::experimental::string_view str01(str_lit01);\n+  char buffer[4] = { 0 };\n+\n+  csize_type len = str01.copy(buffer, sizeof(buffer), 8);\n+  VERIFY( 2 == len );\n+  VERIFY( '9' == buffer[0] );\n+\n+  return test;\n+}\n+\n+int\n+main()\n+{ \n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "0348e1f98fc83e387fcf6b09443e1591c71a9afe", "filename": "libstdc++-v3/testsuite/experimental/string_view/operations/copy/wchar_t/1.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb393514d5be4d683a72fa4bfda938943368505a/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Fcopy%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb393514d5be4d683a72fa4bfda938943368505a/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Fcopy%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Fcopy%2Fwchar_t%2F1.cc?ref=bb393514d5be4d683a72fa4bfda938943368505a", "patch": "@@ -0,0 +1,51 @@\n+// { dg-options \"-std=gnu++1y\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// basic_string_view::copy\n+\n+#include <experimental/string_view>\n+#include <stdexcept>\n+#include <testsuite_hooks.h>\n+\n+bool\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  typedef std::experimental::wstring_view::size_type csize_type;\n+  csize_type csz01;\n+\n+  const wchar_t str_lit01[] = L\"123456789A\";\n+  const std::experimental::wstring_view str01(str_lit01);\n+  wchar_t buffer[4] = { 0 };\n+\n+  csize_type len = str01.copy(buffer, sizeof(buffer), 8);\n+  VERIFY( 2 == len );\n+  VERIFY( L'9' == buffer[0] );\n+\n+  return test;\n+}\n+\n+int\n+main()\n+{ \n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "2f430ba165247d6e0611de2b32af06509a89f74a", "filename": "libstdc++-v3/testsuite/experimental/string_view/operations/substr/char/1.cc", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb393514d5be4d683a72fa4bfda938943368505a/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Fsubstr%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb393514d5be4d683a72fa4bfda938943368505a/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Fsubstr%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Fsubstr%2Fchar%2F1.cc?ref=bb393514d5be4d683a72fa4bfda938943368505a", "patch": "@@ -63,10 +63,8 @@ test01()\n   {\n     str02 = str01.substr(csz01);\n     VERIFY( str02.size() == 0 );\n-  }\n-  catch(std::out_of_range& fail)\n-  {\n-    VERIFY( true ); // No terminating null in basic_string_view\n+    VERIFY( str02.begin() == str01.end() );\n+    VERIFY( true );\n   }\n   catch(...)\n   {"}, {"sha": "6be8838e0d2a649c8b007a0d77bea43bfde6dac1", "filename": "libstdc++-v3/testsuite/experimental/string_view/operations/substr/wchar_t/1.cc", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb393514d5be4d683a72fa4bfda938943368505a/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Fsubstr%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb393514d5be4d683a72fa4bfda938943368505a/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Fsubstr%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Foperations%2Fsubstr%2Fwchar_t%2F1.cc?ref=bb393514d5be4d683a72fa4bfda938943368505a", "patch": "@@ -63,10 +63,8 @@ test01()\n   {\n     str02 = str01.substr(csz01);\n     VERIFY( str02.size() == 0 );\n-  }\n-  catch(std::out_of_range& fail)\n-  {\n-    VERIFY( true ); // No terminating null in basic_string_view\n+    VERIFY( str02.begin() == str01.end() );\n+    VERIFY( true );\n   }\n   catch(...)\n   {"}]}