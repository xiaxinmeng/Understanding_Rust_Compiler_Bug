{"sha": "31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzFkYjBmZTA0NGNjOWQ0YmE0M2RkNDUzNTU3NWFlYWMzYWEzOTUyYg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2018-06-08T07:53:31Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2018-06-08T07:53:31Z"}, "message": "Remove MPX\n\n2018-06-08  Martin Liska  <mliska@suse.cz>\n\n\t* MAINTAINERS: Remove MPX-related entries.\n\t* Makefile.def: Remove libmpx support.\n\t* Makefile.in: Likewise.\n\t* configure: Remove removed files.\n\t* configure.ac: Likewise.\n\t* libmpx/ChangeLog: Remove.\n\t* libmpx/Makefile.am: Remove.\n\t* libmpx/Makefile.in: Remove.\n\t* libmpx/acinclude.m4: Remove.\n\t* libmpx/aclocal.m4: Remove.\n\t* libmpx/config.h.in: Remove.\n\t* libmpx/configure: Remove.\n\t* libmpx/configure.ac: Remove.\n\t* libmpx/configure.tgt: Remove.\n\t* libmpx/libmpx.spec.in: Remove.\n\t* libmpx/mpxrt/Makefile.am: Remove.\n\t* libmpx/mpxrt/Makefile.in: Remove.\n\t* libmpx/mpxrt/libmpx.map: Remove.\n\t* libmpx/mpxrt/libtool-version: Remove.\n\t* libmpx/mpxrt/mpxrt-utils.c: Remove.\n\t* libmpx/mpxrt/mpxrt-utils.h: Remove.\n\t* libmpx/mpxrt/mpxrt.c: Remove.\n\t* libmpx/mpxrt/mpxrt.h: Remove.\n\t* libmpx/mpxwrap/Makefile.am: Remove.\n\t* libmpx/mpxwrap/Makefile.in: Remove.\n\t* libmpx/mpxwrap/libmpxwrappers.map: Remove.\n\t* libmpx/mpxwrap/libtool-version: Remove.\n\t* libmpx/mpxwrap/mpx_wrappers.c: Remove.\n2018-06-08  Martin Liska  <mliska@suse.cz>\n\n\t* bootstrap-mpx.mk: Remove.\n2018-06-08  Martin Liska  <mliska@suse.cz>\n\n\t* Makefile.in: Remove support for MPX (macros, related functions,\n\tfields in cgraph_node, ...).\n\t* builtin-types.def (BT_BND): Likewise.\n\t(BT_FN_BND_CONST_PTR): Likewise.\n\t(BT_FN_CONST_PTR_BND): Likewise.\n\t(BT_FN_VOID_PTR_BND): Likewise.\n\t(BT_FN_BND_CONST_PTR_SIZE): Likewise.\n\t(BT_FN_VOID_CONST_PTR_BND_CONST_PTR): Likewise.\n\t* builtins.c (expand_builtin_memcpy_with_bounds): Likewise.\n\t(expand_builtin_mempcpy_with_bounds): Likewise.\n\t(expand_builtin_memset_with_bounds): Likewise.\n\t(expand_builtin_memset_args): Likewise.\n\t(std_expand_builtin_va_start): Likewise.\n\t(expand_builtin): Likewise.\n\t(expand_builtin_with_bounds): Likewise.\n\t* builtins.def (DEF_BUILTIN_CHKP): Likewise.\n\t(DEF_LIB_BUILTIN_CHKP): Likewise.\n\t(DEF_EXT_LIB_BUILTIN_CHKP): Likewise.\n\t(DEF_CHKP_BUILTIN): Likewise.\n\t(BUILT_IN_MEMCPY): Likewise.\n\t(BUILT_IN_MEMMOVE): Likewise.\n\t(BUILT_IN_MEMPCPY): Likewise.\n\t(BUILT_IN_MEMSET): Likewise.\n\t(BUILT_IN_STPCPY): Likewise.\n\t(BUILT_IN_STRCAT): Likewise.\n\t(BUILT_IN_STRCHR): Likewise.\n\t(BUILT_IN_STRCPY): Likewise.\n\t(BUILT_IN_STRLEN): Likewise.\n\t(BUILT_IN_MEMCPY_CHK): Likewise.\n\t(BUILT_IN_MEMMOVE_CHK): Likewise.\n\t(BUILT_IN_MEMPCPY_CHK): Likewise.\n\t(BUILT_IN_MEMSET_CHK): Likewise.\n\t(BUILT_IN_STPCPY_CHK): Likewise.\n\t(BUILT_IN_STRCAT_CHK): Likewise.\n\t(BUILT_IN_STRCPY_CHK): Likewise.\n\t* calls.c (store_bounds): Likewise.\n\t(emit_call_1): Likewise.\n\t(special_function_p): Likewise.\n\t(maybe_warn_nonstring_arg): Likewise.\n\t(initialize_argument_information): Likewise.\n\t(finalize_must_preallocate): Likewise.\n\t(compute_argument_addresses): Likewise.\n\t(expand_call): Likewise.\n\t* cfgexpand.c (expand_call_stmt): Likewise.\n\t(expand_return): Likewise.\n\t(expand_gimple_stmt_1): Likewise.\n\t(pass_expand::execute): Likewise.\n\t* cgraph.c (cgraph_edge::redirect_call_stmt_to_callee): Likewise.\n\t(cgraph_node::remove): Likewise.\n\t(cgraph_node::dump): Likewise.\n\t(cgraph_node::verify_node): Likewise.\n\t* cgraph.h (chkp_function_instrumented_p): Likewise.\n\t(symtab_node::get_alias_target): Likewise.\n\t(cgraph_node::can_remove_if_no_direct_calls_and_refs_p): Likewise.\n\t(cgraph_local_p): Likewise.\n\t* cgraphbuild.c (cgraph_edge::rebuild_edges): Likewise.\n\t(cgraph_edge::rebuild_references): Likewise.\n\t* cgraphunit.c (varpool_node::finalize_decl): Likewise.\n\t(walk_polymorphic_call_targets): Likewise.\n\t(cgraph_node::expand_thunk): Likewise.\n\t(symbol_table::output_weakrefs): Likewise.\n\t* common/config/i386/i386-common.c (OPTION_MASK_ISA2_GENERAL_REGS_ONLY_UNSET): Likewise.\n\t(ix86_handle_option): Likewise.\n\t* config/i386/constraints.md: Likewise.\n\t* config/i386/i386-builtin-types.def (BND): Likewise.\n\t(VOID): Likewise.\n\t(PVOID): Likewise.\n\t(ULONG): Likewise.\n\t* config/i386/i386-builtin.def (BDESC_END): Likewise.\n\t(BDESC_FIRST): Likewise.\n\t(BDESC): Likewise.\n\t* config/i386/i386-c.c (ix86_target_macros_internal): Likewise.\n\t* config/i386/i386-protos.h (ix86_bnd_prefixed_insn_p): Likewise.\n\t* config/i386/i386.c (enum reg_class): Likewise.\n\t(ix86_target_string): Likewise.\n\t(ix86_option_override_internal): Likewise.\n\t(ix86_conditional_register_usage): Likewise.\n\t(ix86_valid_target_attribute_inner_p): Likewise.\n\t(ix86_set_indirect_branch_type): Likewise.\n\t(ix86_set_current_function): Likewise.\n\t(ix86_function_arg_regno_p): Likewise.\n\t(init_cumulative_args): Likewise.\n\t(ix86_function_arg_advance): Likewise.\n\t(ix86_function_arg): Likewise.\n\t(ix86_pass_by_reference): Likewise.\n\t(ix86_function_value_regno_p): Likewise.\n\t(ix86_function_value_1): Likewise.\n\t(ix86_function_value_bounds): Likewise.\n\t(ix86_return_in_memory): Likewise.\n\t(ix86_setup_incoming_vararg_bounds): Likewise.\n\t(ix86_va_start): Likewise.\n\t(indirect_thunk_need_prefix): Likewise.\n\t(print_reg): Likewise.\n\t(ix86_print_operand): Likewise.\n\t(ix86_expand_call): Likewise.\n\t(ix86_output_function_return): Likewise.\n\t(reg_encoded_number): Likewise.\n\t(BDESC_VERIFYS): Likewise.\n\t(ix86_init_mpx_builtins): Likewise.\n\t(ix86_init_builtins): Likewise.\n\t(ix86_emit_cmove): Likewise.\n\t(ix86_emit_move_max): Likewise.\n\t(ix86_expand_builtin): Likewise.\n\t(ix86_builtin_mpx_function): Likewise.\n\t(ix86_get_arg_address_for_bt): Likewise.\n\t(ix86_load_bounds): Likewise.\n\t(ix86_store_bounds): Likewise.\n\t(ix86_load_returned_bounds): Likewise.\n\t(ix86_store_returned_bounds): Likewise.\n\t(ix86_class_likely_spilled_p): Likewise.\n\t(ix86_hard_regno_mode_ok): Likewise.\n\t(x86_order_regs_for_local_alloc): Likewise.\n\t(ix86_mitigate_rop): Likewise.\n\t(ix86_bnd_prefixed_insn_p): Likewise.\n\t(ix86_mpx_bound_mode): Likewise.\n\t(ix86_make_bounds_constant): Likewise.\n\t(ix86_initialize_bounds): Likewise.\n\t(TARGET_LOAD_BOUNDS_FOR_ARG): Likewise.\n\t(TARGET_STORE_BOUNDS_FOR_ARG): Likewise.\n\t(TARGET_LOAD_RETURNED_BOUNDS): Likewise.\n\t(TARGET_STORE_RETURNED_BOUNDS): Likewise.\n\t(TARGET_CHKP_BOUND_MODE): Likewise.\n\t(TARGET_BUILTIN_CHKP_FUNCTION): Likewise.\n\t(TARGET_CHKP_FUNCTION_VALUE_BOUNDS): Likewise.\n\t(TARGET_CHKP_MAKE_BOUNDS_CONSTANT): Likewise.\n\t(TARGET_CHKP_INITIALIZE_BOUNDS): Likewise.\n\t* config/i386/i386.h (TARGET_MPX): Likewise.\n\t(TARGET_MPX_P): Likewise.\n\t(VALID_BND_REG_MODE): Likewise.\n\t(FIRST_BND_REG): Likewise.\n\t(LAST_BND_REG): Likewise.\n\t(enum reg_class): Likewise.\n\t(BND_REG_P): Likewise.\n\t(BND_REGNO_P): Likewise.\n\t(BNDmode): Likewise.\n\t(ADJUST_INSN_LENGTH): Likewise.\n\t* config/i386/i386.md: Likewise.\n\t* config/i386/i386.opt: Likewise.\n\t* config/i386/linux-common.h (LIBMPX_LIBS): Likewise.\n\t(defined): Likewise.\n\t(LINK_MPX): Likewise.\n\t(MPX_SPEC): Likewise.\n\t(LIBMPX_SPEC): Likewise.\n\t(LIBMPXWRAPPERS_SPEC): Likewise.\n\t(CHKP_SPEC): Likewise.\n\t* config/i386/predicates.md: Likewise.\n\t* dbxout.c (dbxout_type): Likewise.\n\t* doc/extend.texi: Likewise.\n\t* doc/invoke.texi: Likewise.\n\t* doc/md.texi: Likewise.\n\t* doc/tm.texi: Likewise.\n\t* doc/tm.texi.in: Likewise.\n\t* dwarf2out.c (is_base_type): Likewise.\n\t(gen_formal_types_die): Likewise.\n\t(gen_subprogram_die): Likewise.\n\t(gen_type_die_with_usage): Likewise.\n\t(gen_decl_die): Likewise.\n\t(dwarf2out_late_global_decl): Likewise.\n\t* expr.c (expand_assignment): Likewise.\n\t(emit_storent_insn): Likewise.\n\t(store_expr_with_bounds): Likewise.\n\t(store_expr): Likewise.\n\t(expand_expr_real_1): Likewise.\n\t* expr.h (store_expr_with_bounds): Likewise.\n\t* function.c (use_register_for_decl): Likewise.\n\t(struct bounds_parm_data): Likewise.\n\t(assign_parms_augmented_arg_list): Likewise.\n\t(assign_parm_find_entry_rtl): Likewise.\n\t(assign_parm_is_stack_parm): Likewise.\n\t(assign_parm_load_bounds): Likewise.\n\t(assign_bounds): Likewise.\n\t(assign_parms): Likewise.\n\t(expand_function_start): Likewise.\n\t* gcc.c (CHKP_SPEC): Likewise.\n\t* gimple-fold.c (gimple_fold_builtin_memory_op): Likewise.\n\t* gimple-ssa-warn-restrict.c (builtin_access::builtin_access): Likewise.\n\t(wrestrict_dom_walker::check_call): Likewise.\n\t* gimple.c (gimple_build_call_from_tree): Likewise.\n\t* gimple.h (enum gf_mask): Likewise.\n\t(gimple_call_with_bounds_p): Likewise.\n\t(gimple_call_set_with_bounds): Likewise.\n\t* gimplify.c (gimplify_init_constructor): Likewise.\n\t* ipa-cp.c (initialize_node_lattices): Likewise.\n\t(propagate_constants_across_call): Likewise.\n\t(find_more_scalar_values_for_callers_subset): Likewise.\n\t* ipa-hsa.c (process_hsa_functions): Likewise.\n\t* ipa-icf-gimple.c (func_checker::compare_gimple_call): Likewise.\n\t* ipa-icf.c (sem_function::merge): Likewise.\n\t* ipa-inline.c (early_inliner): Likewise.\n\t* ipa-pure-const.c (warn_function_noreturn): Likewise.\n\t(warn_function_cold): Likewise.\n\t(propagate_pure_const): Likewise.\n\t* ipa-ref.h (enum GTY): Likewise.\n\t* ipa-split.c (find_retbnd): Likewise.\n\t(consider_split): Likewise.\n\t(split_function): Likewise.\n\t* ipa-visibility.c (cgraph_externally_visible_p): Likewise.\n\t* ipa.c (walk_polymorphic_call_targets): Likewise.\n\t(symbol_table::remove_unreachable_nodes): Likewise.\n\t(process_references): Likewise.\n\t(cgraph_build_static_cdtor_1): Likewise.\n\t* lto-cgraph.c (lto_output_node): Likewise.\n\t(output_refs): Likewise.\n\t(compute_ltrans_boundary): Likewise.\n\t(input_overwrite_node): Likewise.\n\t(input_node): Likewise.\n\t(input_cgraph_1): Likewise.\n\t* params.def (PARAM_CHKP_MAX_CTOR_SIZE): Likewise.\n\t* passes.c (pass_manager::execute_early_local_passes): Likewise.\n\t(class pass_chkp_instrumentation_passes): Likewise.\n\t(make_pass_chkp_instrumentation_passes): Likewise.\n\t* passes.def: Likewise.\n\t* rtl.h (struct GTY): Likewise.\n\t(CALL_EXPR_WITH_BOUNDS_P): Likewise.\n\t* stor-layout.c (layout_type): Likewise.\n\t* symtab.c: Likewise.\n\t* target.def: Likewise.\n\t* targhooks.c (default_chkp_bound_type): Likewise.\n\t(default_chkp_bound_mode): Likewise.\n\t(default_builtin_chkp_function): Likewise.\n\t(default_chkp_function_value_bounds): Likewise.\n\t(default_chkp_make_bounds_constant): Likewise.\n\t(default_chkp_initialize_bounds): Likewise.\n\t* targhooks.h (default_chkp_bound_type): Likewise.\n\t(default_chkp_bound_mode): Likewise.\n\t(default_builtin_chkp_function): Likewise.\n\t(default_chkp_function_value_bounds): Likewise.\n\t(default_chkp_make_bounds_constant): Likewise.\n\t(default_chkp_initialize_bounds): Likewise.\n\t* toplev.c (compile_file): Likewise.\n\t(process_options): Likewise.\n\t* tree-core.h (DEF_BUILTIN): Likewise.\n\t(DEF_BUILTIN_CHKP): Likewise.\n\t* tree-inline.c (declare_return_variable): Likewise.\n\t(remap_gimple_stmt): Likewise.\n\t(copy_bb): Likewise.\n\t(initialize_inlined_parameters): Likewise.\n\t(expand_call_inline): Likewise.\n\t* tree-pass.h (make_pass_ipa_chkp_versioning): Likewise.\n\t(make_pass_ipa_chkp_early_produce_thunks): Likewise.\n\t(make_pass_ipa_chkp_produce_thunks): Likewise.\n\t(make_pass_chkp): Likewise.\n\t(make_pass_chkp_opt): Likewise.\n\t(make_pass_chkp_instrumentation_passes): Likewise.\n\t* tree-pretty-print.c (dump_generic_node): Likewise.\n\t* tree-ssa-ccp.c (insert_clobber_before_stack_restore): Likewise.\n\t* tree-ssa-dce.c (propagate_necessity): Likewise.\n\t(eliminate_unnecessary_stmts): Likewise.\n\t* tree-ssa-pre.c (create_expression_by_pieces): Likewise.\n\t* tree-ssa-sccvn.c (copy_reference_ops_from_call): Likewise.\n\t* tree-ssa-sccvn.h: Likewise.\n\t* tree-ssa-strlen.c (get_string_length): Likewise.\n\t(valid_builtin_call): Likewise.\n\t(adjust_last_stmt): Likewise.\n\t(handle_builtin_strchr): Likewise.\n\t(handle_builtin_strcpy): Likewise.\n\t(handle_builtin_stxncpy): Likewise.\n\t(handle_builtin_memcpy): Likewise.\n\t(handle_builtin_strcat): Likewise.\n\t(strlen_check_and_optimize_stmt): Likewise.\n\t* tree-stdarg.c (expand_ifn_va_arg_1): Likewise.\n\t* tree-streamer-in.c: Likewise.\n\t* tree-streamer.c (record_common_node): Likewise.\n\t* tree.c (tree_code_size): Likewise.\n\t(wide_int_to_tree_1): Likewise.\n\t(type_contains_placeholder_1): Likewise.\n\t(build_common_tree_nodes): Likewise.\n\t* tree.def (POINTER_BOUNDS_TYPE): Likewise.\n\t* tree.h (POINTER_BOUNDS_TYPE_P): Likewise.\n\t(POINTER_BOUNDS_P): Likewise.\n\t(BOUNDED_TYPE_P): Likewise.\n\t(BOUNDED_P): Likewise.\n\t(CALL_WITH_BOUNDS_P): Likewise.\n\t(pointer_bounds_type_node): Likewise.\n\t* value-prof.c (gimple_ic): Likewise.\n\t* var-tracking.c (vt_add_function_parameters): Likewise.\n\t* varasm.c (make_decl_rtl): Likewise.\n\t(assemble_start_function): Likewise.\n\t(output_constant): Likewise.\n\t(maybe_assemble_visibility): Likewise.\n\t* varpool.c (ctor_for_folding): Likewise.\n\t* chkp-builtins.def: Remove.\n\t* ipa-chkp.c: Remove.\n\t* ipa-chkp.h: Remove.\n\t* rtl-chkp.c: Remove.\n\t* rtl-chkp.h: Remove.\n\t* tree-chkp-opt.c: Remove.\n\t* tree-chkp.c: Remove.\n\t* tree-chkp.h: Remove.\n2018-06-08  Martin Liska  <mliska@suse.cz>\n\n\t* c-attribs.c (handle_bnd_variable_size_attribute): Remove support\n\tfor MPX (macros, related functions, fields in cgraph_node, ...).\n\t(handle_bnd_legacy): Likewise.\n\t(handle_bnd_instrument): Likewise.\n\t* c.opt: Likewise.\n2018-06-08  Martin Liska  <mliska@suse.cz>\n\n\t* lto-partition.c (add_references_to_partition): Remove support\n\tfor MPX (macros, related functions, fields in cgraph_node, ...).\n\t(add_symbol_to_partition_1): Likewise.\n\t(privatize_symbol_name): Likewise.\n\t* lto-symtab.c (lto_cgraph_replace_node): Likewise.\n2018-06-08  Martin Liska  <mliska@suse.cz>\n\n\t* g++.dg/dg.exp: Do not use mpx.exp.\n\t* g++.dg/lto/lto.exp: Likewise.\n\t* g++.dg/lto/pr69729_0.C: Remove.\n\t* g++.dg/opt/pr71529.C: Remove.\n\t* g++.dg/pr63995-1.C: Remove.\n\t* g++.dg/pr68270.C: Remove.\n\t* g++.dg/pr71624.C: Remove.\n\t* g++.dg/pr71633.C: Remove.\n\t* g++.dg/pr79761.C: Remove.\n\t* g++.dg/pr79764.C: Remove.\n\t* g++.dg/pr79769.C: Remove.\n\t* gcc.dg/lto/chkp-privatize-1_0.c: Remove.\n\t* gcc.dg/lto/chkp-privatize-2_0.c: Remove.\n\t* gcc.dg/lto/chkp-privatize_0.c: Remove.\n\t* gcc.dg/lto/chkp-removed-alias_0.c: Remove.\n\t* gcc.dg/lto/chkp-static-bounds_0.c: Remove.\n\t* gcc.dg/lto/chkp-wrap-asm-name_0.c: Remove.\n\t* gcc.dg/lto/lto.exp: Do not use mpx.exp.\n\t* gcc.dg/lto/pr66221_0.c: Remove.\n\t* gcc.target/i386/chkp-always_inline.c: Remove.\n\t* gcc.target/i386/chkp-bndret.c: Remove.\n\t* gcc.target/i386/chkp-builtins-1.c: Remove.\n\t* gcc.target/i386/chkp-builtins-2.c: Remove.\n\t* gcc.target/i386/chkp-builtins-3.c: Remove.\n\t* gcc.target/i386/chkp-builtins-4.c: Remove.\n\t* gcc.target/i386/chkp-const-check-1.c: Remove.\n\t* gcc.target/i386/chkp-const-check-2.c: Remove.\n\t* gcc.target/i386/chkp-hidden-def.c: Remove.\n\t* gcc.target/i386/chkp-label-address.c: Remove.\n\t* gcc.target/i386/chkp-lifetime-1.c: Remove.\n\t* gcc.target/i386/chkp-narrow-bounds.c: Remove.\n\t* gcc.target/i386/chkp-pr69044.c: Remove.\n\t* gcc.target/i386/chkp-remove-bndint-1.c: Remove.\n\t* gcc.target/i386/chkp-remove-bndint-2.c: Remove.\n\t* gcc.target/i386/chkp-strchr.c: Remove.\n\t* gcc.target/i386/chkp-strlen-1.c: Remove.\n\t* gcc.target/i386/chkp-strlen-2.c: Remove.\n\t* gcc.target/i386/chkp-strlen-3.c: Remove.\n\t* gcc.target/i386/chkp-strlen-4.c: Remove.\n\t* gcc.target/i386/chkp-strlen-5.c: Remove.\n\t* gcc.target/i386/chkp-stropt-1.c: Remove.\n\t* gcc.target/i386/chkp-stropt-10.c: Remove.\n\t* gcc.target/i386/chkp-stropt-11.c: Remove.\n\t* gcc.target/i386/chkp-stropt-12.c: Remove.\n\t* gcc.target/i386/chkp-stropt-13.c: Remove.\n\t* gcc.target/i386/chkp-stropt-14.c: Remove.\n\t* gcc.target/i386/chkp-stropt-15.c: Remove.\n\t* gcc.target/i386/chkp-stropt-16.c: Remove.\n\t* gcc.target/i386/chkp-stropt-17.c: Remove.\n\t* gcc.target/i386/chkp-stropt-2.c: Remove.\n\t* gcc.target/i386/chkp-stropt-3.c: Remove.\n\t* gcc.target/i386/chkp-stropt-4.c: Remove.\n\t* gcc.target/i386/chkp-stropt-5.c: Remove.\n\t* gcc.target/i386/chkp-stropt-6.c: Remove.\n\t* gcc.target/i386/chkp-stropt-7.c: Remove.\n\t* gcc.target/i386/chkp-stropt-8.c: Remove.\n\t* gcc.target/i386/chkp-stropt-9.c: Remove.\n\t* gcc.target/i386/i386.exp: Do not use mpx.exp.\n\t* gcc.target/i386/indirect-thunk-11.c: Remove.\n\t* gcc.target/i386/indirect-thunk-12.c: Remove.\n\t* gcc.target/i386/indirect-thunk-attr-12.c: Remove.\n\t* gcc.target/i386/indirect-thunk-attr-13.c: Remove.\n\t* gcc.target/i386/indirect-thunk-bnd-1.c: Remove.\n\t* gcc.target/i386/indirect-thunk-bnd-2.c: Remove.\n\t* gcc.target/i386/indirect-thunk-bnd-3.c: Remove.\n\t* gcc.target/i386/indirect-thunk-bnd-4.c: Remove.\n\t* gcc.target/i386/interrupt-bnd-err-1.c: Remove.\n\t* gcc.target/i386/interrupt-bnd-err-2.c: Remove.\n\t* gcc.target/i386/mpx/alloca-1-lbv.c: Remove.\n\t* gcc.target/i386/mpx/alloca-1-nov.c: Remove.\n\t* gcc.target/i386/mpx/alloca-1-ubv.c: Remove.\n\t* gcc.target/i386/mpx/arg-addr-1-lbv.c: Remove.\n\t* gcc.target/i386/mpx/arg-addr-1-nov.c: Remove.\n\t* gcc.target/i386/mpx/arg-addr-1-ubv.c: Remove.\n\t* gcc.target/i386/mpx/bitfields-1-lbv.c: Remove.\n\t* gcc.target/i386/mpx/bitfields-1-nov.c: Remove.\n\t* gcc.target/i386/mpx/bitfields-1-ubv.c: Remove.\n\t* gcc.target/i386/mpx/builtin-bnd-chk-ptr-bounds-1-lbv.c: Remove.\n\t* gcc.target/i386/mpx/builtin-bnd-chk-ptr-bounds-1-nov.c: Remove.\n\t* gcc.target/i386/mpx/builtin-bnd-chk-ptr-bounds-1-ubv.c: Remove.\n\t* gcc.target/i386/mpx/builtin-bnd-chk-ptr-bounds-2.c: Remove.\n\t* gcc.target/i386/mpx/builtin-bnd-chk-ptr-lbounds-1-lbv.c: Remove.\n\t* gcc.target/i386/mpx/builtin-bnd-chk-ptr-lbounds-1-nov.c: Remove.\n\t* gcc.target/i386/mpx/builtin-bnd-chk-ptr-lbounds-2.c: Remove.\n\t* gcc.target/i386/mpx/builtin-bnd-chk-ptr-ubounds-1-nov.c: Remove.\n\t* gcc.target/i386/mpx/builtin-bnd-chk-ptr-ubounds-1-ubv.c: Remove.\n\t* gcc.target/i386/mpx/builtin-bnd-chk-ptr-ubounds-2.c: Remove.\n\t* gcc.target/i386/mpx/builtin-bnd-copy-ptr-bounds-1.c: Remove.\n\t* gcc.target/i386/mpx/builtin-bnd-copy-ptr-bounds-2-lbv.c: Remove.\n\t* gcc.target/i386/mpx/builtin-bnd-copy-ptr-bounds-2-nov.c: Remove.\n\t* gcc.target/i386/mpx/builtin-bnd-copy-ptr-bounds-2-ubv.c: Remove.\n\t* gcc.target/i386/mpx/builtin-bnd-copy-ptr-bounds-3.c: Remove.\n\t* gcc.target/i386/mpx/builtin-bnd-get-ptr-lbound-1.c: Remove.\n\t* gcc.target/i386/mpx/builtin-bnd-get-ptr-lbound-2.c: Remove.\n\t* gcc.target/i386/mpx/builtin-bnd-get-ptr-ubound-1.c: Remove.\n\t* gcc.target/i386/mpx/builtin-bnd-get-ptr-ubound-2.c: Remove.\n\t* gcc.target/i386/mpx/builtin-bnd-init-ptr-bounds-1.c: Remove.\n\t* gcc.target/i386/mpx/builtin-bnd-init-ptr-bounds-2-nov.c: Remove.\n\t* gcc.target/i386/mpx/builtin-bnd-init-ptr-bounds-3.c: Remove.\n\t* gcc.target/i386/mpx/builtin-bnd-narrow-ptr-bounds-1.c: Remove.\n\t* gcc.target/i386/mpx/builtin-bnd-narrow-ptr-bounds-2-lbv.c: Remove.\n\t* gcc.target/i386/mpx/builtin-bnd-narrow-ptr-bounds-2-nov.c: Remove.\n\t* gcc.target/i386/mpx/builtin-bnd-narrow-ptr-bounds-2-ubv.c: Remove.\n\t* gcc.target/i386/mpx/builtin-bnd-narrow-ptr-bounds-3-lbv.c: Remove.\n\t* gcc.target/i386/mpx/builtin-bnd-narrow-ptr-bounds-3-nov.c: Remove.\n\t* gcc.target/i386/mpx/builtin-bnd-narrow-ptr-bounds-3-ubv.c: Remove.\n\t* gcc.target/i386/mpx/builtin-bnd-narrow-ptr-bounds-4.c: Remove.\n\t* gcc.target/i386/mpx/builtin-bnd-null-ptr-bounds-1-bbv.c: Remove.\n\t* gcc.target/i386/mpx/builtin-bnd-set-ptr-bounds-1.c: Remove.\n\t* gcc.target/i386/mpx/builtin-bnd-set-ptr-bounds-2-lbv.c: Remove.\n\t* gcc.target/i386/mpx/builtin-bnd-set-ptr-bounds-2-nov.c: Remove.\n\t* gcc.target/i386/mpx/builtin-bnd-set-ptr-bounds-2-ubv.c: Remove.\n\t* gcc.target/i386/mpx/builtin-bnd-set-ptr-bounds-3.c: Remove.\n\t* gcc.target/i386/mpx/builtin-bnd-store-ptr-bounds-1-lbv.c: Remove.\n\t* gcc.target/i386/mpx/builtin-bnd-store-ptr-bounds-1-nov.c: Remove.\n\t* gcc.target/i386/mpx/builtin-bnd-store-ptr-bounds-1-ubv.c: Remove.\n\t* gcc.target/i386/mpx/builtin-bnd-store-ptr-bounds-2.c: Remove.\n\t* gcc.target/i386/mpx/calloc-1-lbv.c: Remove.\n\t* gcc.target/i386/mpx/calloc-1-nov.c: Remove.\n\t* gcc.target/i386/mpx/calloc-1-ubv.c: Remove.\n\t* gcc.target/i386/mpx/chkp-fix-calls-1.c: Remove.\n\t* gcc.target/i386/mpx/chkp-fix-calls-2.c: Remove.\n\t* gcc.target/i386/mpx/chkp-fix-calls-3.c: Remove.\n\t* gcc.target/i386/mpx/chkp-fix-calls-4.c: Remove.\n\t* gcc.target/i386/mpx/chkp-thunk-comdat-1.cc: Remove.\n\t* gcc.target/i386/mpx/chkp-thunk-comdat-2.cc: Remove.\n\t* gcc.target/i386/mpx/chkp-thunk-comdat-3.c: Remove.\n\t* gcc.target/i386/mpx/fastcall-1-lbv.c: Remove.\n\t* gcc.target/i386/mpx/fastcall-1-nov.c: Remove.\n\t* gcc.target/i386/mpx/fastcall-1-ubv.c: Remove.\n\t* gcc.target/i386/mpx/fastcall-2-lbv.c: Remove.\n\t* gcc.target/i386/mpx/fastcall-2-nov.c: Remove.\n\t* gcc.target/i386/mpx/fastcall-2-ubv.c: Remove.\n\t* gcc.target/i386/mpx/field-addr-1-lbv.c: Remove.\n\t* gcc.target/i386/mpx/field-addr-1-nov.c: Remove.\n\t* gcc.target/i386/mpx/field-addr-1-ubv.c: Remove.\n\t* gcc.target/i386/mpx/field-addr-10-lbv.c: Remove.\n\t* gcc.target/i386/mpx/field-addr-10-nov.c: Remove.\n\t* gcc.target/i386/mpx/field-addr-10-ubv.c: Remove.\n\t* gcc.target/i386/mpx/field-addr-2-lbv.c: Remove.\n\t* gcc.target/i386/mpx/field-addr-2-nov.c: Remove.\n\t* gcc.target/i386/mpx/field-addr-2-ubv.c: Remove.\n\t* gcc.target/i386/mpx/field-addr-3-lbv.c: Remove.\n\t* gcc.target/i386/mpx/field-addr-3-nov.c: Remove.\n\t* gcc.target/i386/mpx/field-addr-3-ubv.c: Remove.\n\t* gcc.target/i386/mpx/field-addr-4-lbv.c: Remove.\n\t* gcc.target/i386/mpx/field-addr-4-nov.c: Remove.\n\t* gcc.target/i386/mpx/field-addr-4-ubv.c: Remove.\n\t* gcc.target/i386/mpx/field-addr-5-lbv.c: Remove.\n\t* gcc.target/i386/mpx/field-addr-5-nov.c: Remove.\n\t* gcc.target/i386/mpx/field-addr-5-ubv.c: Remove.\n\t* gcc.target/i386/mpx/field-addr-6-lbv.c: Remove.\n\t* gcc.target/i386/mpx/field-addr-6-nov.c: Remove.\n\t* gcc.target/i386/mpx/field-addr-6-ubv.c: Remove.\n\t* gcc.target/i386/mpx/field-addr-7-lbv.c: Remove.\n\t* gcc.target/i386/mpx/field-addr-7-nov.c: Remove.\n\t* gcc.target/i386/mpx/field-addr-7-ubv.c: Remove.\n\t* gcc.target/i386/mpx/field-addr-8-lbv.c: Remove.\n\t* gcc.target/i386/mpx/field-addr-8-nov.c: Remove.\n\t* gcc.target/i386/mpx/field-addr-8-ubv.c: Remove.\n\t* gcc.target/i386/mpx/field-addr-9-lbv.c: Remove.\n\t* gcc.target/i386/mpx/field-addr-9-nov.c: Remove.\n\t* gcc.target/i386/mpx/field-addr-9-ubv.c: Remove.\n\t* gcc.target/i386/mpx/frame-address-1-nov.c: Remove.\n\t* gcc.target/i386/mpx/hard-reg-1-nov.c: Remove.\n\t* gcc.target/i386/mpx/hard-reg-2-lbv.c: Remove.\n\t* gcc.target/i386/mpx/hard-reg-2-nov.c: Remove.\n\t* gcc.target/i386/mpx/hard-reg-2-ubv.c: Remove.\n\t* gcc.target/i386/mpx/if-stmt-1-lbv.c: Remove.\n\t* gcc.target/i386/mpx/if-stmt-1-nov.c: Remove.\n\t* gcc.target/i386/mpx/if-stmt-1-ubv.c: Remove.\n\t* gcc.target/i386/mpx/if-stmt-2-lbv.c: Remove.\n\t* gcc.target/i386/mpx/if-stmt-2-nov.c: Remove.\n\t* gcc.target/i386/mpx/if-stmt-2-ubv.c: Remove.\n\t* gcc.target/i386/mpx/label-address-1.c: Remove.\n\t* gcc.target/i386/mpx/legacy-1-nov.c: Remove.\n\t* gcc.target/i386/mpx/macro.c: Remove.\n\t* gcc.target/i386/mpx/malloc-1-lbv.c: Remove.\n\t* gcc.target/i386/mpx/malloc-1-nov.c: Remove.\n\t* gcc.target/i386/mpx/malloc-1-ubv.c: Remove.\n\t* gcc.target/i386/mpx/memcpy-1.c: Remove.\n\t* gcc.target/i386/mpx/memmove-1.c: Remove.\n\t* gcc.target/i386/mpx/memmove-2.c: Remove.\n\t* gcc.target/i386/mpx/memmove-zero-length.c: Remove.\n\t* gcc.target/i386/mpx/mpx-check.h: Remove.\n\t* gcc.target/i386/mpx/mpx-os-support.h: Remove.\n\t* gcc.target/i386/mpx/mpx.exp: Remove.\n\t* gcc.target/i386/mpx/nested-function-1-lbv.c: Remove.\n\t* gcc.target/i386/mpx/nested-function-1-nov.c: Remove.\n\t* gcc.target/i386/mpx/nested-function-1-ubv.c: Remove.\n\t* gcc.target/i386/mpx/pointer-arg-1-lbv.c: Remove.\n\t* gcc.target/i386/mpx/pointer-arg-1-nov.c: Remove.\n\t* gcc.target/i386/mpx/pointer-arg-1-ubv.c: Remove.\n\t* gcc.target/i386/mpx/pointer-arg-2-lbv.c: Remove.\n\t* gcc.target/i386/mpx/pointer-arg-2-nov.c: Remove.\n\t* gcc.target/i386/mpx/pointer-arg-2-ubv.c: Remove.\n\t* gcc.target/i386/mpx/pointer-arg-3-lbv.c: Remove.\n\t* gcc.target/i386/mpx/pointer-arg-3-nov.c: Remove.\n\t* gcc.target/i386/mpx/pointer-arg-3-ubv.c: Remove.\n\t* gcc.target/i386/mpx/pointer-arg-4-lbv.c: Remove.\n\t* gcc.target/i386/mpx/pointer-arg-4-nov.c: Remove.\n\t* gcc.target/i386/mpx/pointer-arg-4-ubv.c: Remove.\n\t* gcc.target/i386/mpx/pointer-arg-5-lbv.c: Remove.\n\t* gcc.target/i386/mpx/pointer-arg-5-nov.c: Remove.\n\t* gcc.target/i386/mpx/pointer-arg-5-ubv.c: Remove.\n\t* gcc.target/i386/mpx/pointer-diff-1.c: Remove.\n\t* gcc.target/i386/mpx/pointer-store-1-lbv.c: Remove.\n\t* gcc.target/i386/mpx/pointer-store-1-nov.c: Remove.\n\t* gcc.target/i386/mpx/pointer-store-1-ubv.c: Remove.\n\t* gcc.target/i386/mpx/pr65508.c: Remove.\n\t* gcc.target/i386/mpx/pr65531.cc: Remove.\n\t* gcc.target/i386/mpx/pr66048.cc: Remove.\n\t* gcc.target/i386/mpx/pr66134.c: Remove.\n\t* gcc.target/i386/mpx/pr66566.c: Remove.\n\t* gcc.target/i386/mpx/pr66567.c: Remove.\n\t* gcc.target/i386/mpx/pr66568.c: Remove.\n\t* gcc.target/i386/mpx/pr66569.c: Remove.\n\t* gcc.target/i386/mpx/pr66581.c: Remove.\n\t* gcc.target/i386/mpx/pr68337-1.c: Remove.\n\t* gcc.target/i386/mpx/pr68337-2.c: Remove.\n\t* gcc.target/i386/mpx/pr68416.c: Remove.\n\t* gcc.target/i386/mpx/pr78339.c: Remove.\n\t* gcc.target/i386/mpx/pr79631.c: Remove.\n\t* gcc.target/i386/mpx/pr79633.c: Remove.\n\t* gcc.target/i386/mpx/pr79753.c: Remove.\n\t* gcc.target/i386/mpx/pr79770.c: Remove.\n\t* gcc.target/i386/mpx/pr79987.c: Remove.\n\t* gcc.target/i386/mpx/pr79988.c: Remove.\n\t* gcc.target/i386/mpx/realloc-1-lbv.c: Remove.\n\t* gcc.target/i386/mpx/realloc-1-nov.c: Remove.\n\t* gcc.target/i386/mpx/realloc-1-ubv.c: Remove.\n\t* gcc.target/i386/mpx/realloc-2-lbv.c: Remove.\n\t* gcc.target/i386/mpx/realloc-2-nov.c: Remove.\n\t* gcc.target/i386/mpx/realloc-2-ubv.c: Remove.\n\t* gcc.target/i386/mpx/reference-1-lbv.cpp: Remove.\n\t* gcc.target/i386/mpx/reference-1-nov.cpp: Remove.\n\t* gcc.target/i386/mpx/reference-1-ubv.cpp: Remove.\n\t* gcc.target/i386/mpx/reference-2-lbv.cpp: Remove.\n\t* gcc.target/i386/mpx/reference-2-nov.cpp: Remove.\n\t* gcc.target/i386/mpx/reference-2-ubv.cpp: Remove.\n\t* gcc.target/i386/mpx/reference-3-lbv.cpp: Remove.\n\t* gcc.target/i386/mpx/reference-3-nov.cpp: Remove.\n\t* gcc.target/i386/mpx/reference-3-ubv.cpp: Remove.\n\t* gcc.target/i386/mpx/reference-4-lbv.cpp: Remove.\n\t* gcc.target/i386/mpx/reference-4-nov.cpp: Remove.\n\t* gcc.target/i386/mpx/reference-4-ubv.cpp: Remove.\n\t* gcc.target/i386/mpx/return-pointer-1-lbv.c: Remove.\n\t* gcc.target/i386/mpx/return-pointer-1-nov.c: Remove.\n\t* gcc.target/i386/mpx/return-pointer-1-ubv.c: Remove.\n\t* gcc.target/i386/mpx/return-struct-1-lbv.c: Remove.\n\t* gcc.target/i386/mpx/return-struct-1-nov.c: Remove.\n\t* gcc.target/i386/mpx/return-struct-1-ubv.c: Remove.\n\t* gcc.target/i386/mpx/return-struct-2-lbv.c: Remove.\n\t* gcc.target/i386/mpx/return-struct-2-nov.c: Remove.\n\t* gcc.target/i386/mpx/return-struct-2-ubv.c: Remove.\n\t* gcc.target/i386/mpx/return-struct-3-lbv.c: Remove.\n\t* gcc.target/i386/mpx/return-struct-3-nov.c: Remove.\n\t* gcc.target/i386/mpx/return-struct-3-ubv.c: Remove.\n\t* gcc.target/i386/mpx/return-struct-4-lbv.c: Remove.\n\t* gcc.target/i386/mpx/return-struct-4-nov.c: Remove.\n\t* gcc.target/i386/mpx/return-struct-4-ubv.c: Remove.\n\t* gcc.target/i386/mpx/return-struct-5-lbv.c: Remove.\n\t* gcc.target/i386/mpx/return-struct-5-nov.c: Remove.\n\t* gcc.target/i386/mpx/return-struct-5-ubv.c: Remove.\n\t* gcc.target/i386/mpx/return-struct-6-lbv.c: Remove.\n\t* gcc.target/i386/mpx/return-struct-6-nov.c: Remove.\n\t* gcc.target/i386/mpx/return-struct-6-ubv.c: Remove.\n\t* gcc.target/i386/mpx/sincos-1-nov.c: Remove.\n\t* gcc.target/i386/mpx/static-array-1-lbv.c: Remove.\n\t* gcc.target/i386/mpx/static-array-1-nov.c: Remove.\n\t* gcc.target/i386/mpx/static-array-1-ubv.c: Remove.\n\t* gcc.target/i386/mpx/static-init-1-lbv.c: Remove.\n\t* gcc.target/i386/mpx/static-init-1-nov.c: Remove.\n\t* gcc.target/i386/mpx/static-init-1-ubv.c: Remove.\n\t* gcc.target/i386/mpx/static-init-2-lbv.c: Remove.\n\t* gcc.target/i386/mpx/static-init-2-nov.c: Remove.\n\t* gcc.target/i386/mpx/static-init-2-ubv.c: Remove.\n\t* gcc.target/i386/mpx/static-init-3-lbv.c: Remove.\n\t* gcc.target/i386/mpx/static-init-3-nov.c: Remove.\n\t* gcc.target/i386/mpx/static-init-3-ubv.c: Remove.\n\t* gcc.target/i386/mpx/static-init-4-lbv.c: Remove.\n\t* gcc.target/i386/mpx/static-init-4-nov.c: Remove.\n\t* gcc.target/i386/mpx/static-init-4-ubv.c: Remove.\n\t* gcc.target/i386/mpx/static-init-5-lbv.c: Remove.\n\t* gcc.target/i386/mpx/static-init-5-nov.c: Remove.\n\t* gcc.target/i386/mpx/static-init-5-ubv.c: Remove.\n\t* gcc.target/i386/mpx/static-init-6-lbv.c: Remove.\n\t* gcc.target/i386/mpx/static-init-6-nov.c: Remove.\n\t* gcc.target/i386/mpx/static-init-6-ubv.c: Remove.\n\t* gcc.target/i386/mpx/static-string-1-lbv.c: Remove.\n\t* gcc.target/i386/mpx/static-string-1-nov.c: Remove.\n\t* gcc.target/i386/mpx/static-string-1-ubv.c: Remove.\n\t* gcc.target/i386/mpx/struct-arg-1-lbv.c: Remove.\n\t* gcc.target/i386/mpx/struct-arg-1-nov.c: Remove.\n\t* gcc.target/i386/mpx/struct-arg-1-ubv.c: Remove.\n\t* gcc.target/i386/mpx/struct-arg-10-lbv.c: Remove.\n\t* gcc.target/i386/mpx/struct-arg-10-nov.c: Remove.\n\t* gcc.target/i386/mpx/struct-arg-10-ubv.c: Remove.\n\t* gcc.target/i386/mpx/struct-arg-2-lbv.c: Remove.\n\t* gcc.target/i386/mpx/struct-arg-2-nov.c: Remove.\n\t* gcc.target/i386/mpx/struct-arg-2-ubv.c: Remove.\n\t* gcc.target/i386/mpx/struct-arg-3-lbv.c: Remove.\n\t* gcc.target/i386/mpx/struct-arg-3-nov.c: Remove.\n\t* gcc.target/i386/mpx/struct-arg-3-ubv.c: Remove.\n\t* gcc.target/i386/mpx/struct-arg-4-lbv.c: Remove.\n\t* gcc.target/i386/mpx/struct-arg-4-nov.c: Remove.\n\t* gcc.target/i386/mpx/struct-arg-4-ubv.c: Remove.\n\t* gcc.target/i386/mpx/struct-arg-5-lbv.c: Remove.\n\t* gcc.target/i386/mpx/struct-arg-5-nov.c: Remove.\n\t* gcc.target/i386/mpx/struct-arg-5-ubv.c: Remove.\n\t* gcc.target/i386/mpx/struct-arg-6-lbv.c: Remove.\n\t* gcc.target/i386/mpx/struct-arg-6-nov.c: Remove.\n\t* gcc.target/i386/mpx/struct-arg-6-ubv.c: Remove.\n\t* gcc.target/i386/mpx/struct-arg-7-lbv.c: Remove.\n\t* gcc.target/i386/mpx/struct-arg-7-nov.c: Remove.\n\t* gcc.target/i386/mpx/struct-arg-7-ubv.c: Remove.\n\t* gcc.target/i386/mpx/struct-arg-8-lbv.c: Remove.\n\t* gcc.target/i386/mpx/struct-arg-8-nov.c: Remove.\n\t* gcc.target/i386/mpx/struct-arg-8-ubv.c: Remove.\n\t* gcc.target/i386/mpx/struct-arg-9-lbv.c: Remove.\n\t* gcc.target/i386/mpx/struct-arg-9-nov.c: Remove.\n\t* gcc.target/i386/mpx/struct-arg-9-ubv.c: Remove.\n\t* gcc.target/i386/mpx/struct-copy-1-lbv.c: Remove.\n\t* gcc.target/i386/mpx/struct-copy-1-nov.c: Remove.\n\t* gcc.target/i386/mpx/struct-copy-1-ubv.c: Remove.\n\t* gcc.target/i386/mpx/struct-copy-2-lbv.c: Remove.\n\t* gcc.target/i386/mpx/struct-copy-2-nov.c: Remove.\n\t* gcc.target/i386/mpx/struct-copy-2-ubv.c: Remove.\n\t* gcc.target/i386/mpx/thread-local-var-1-lbv.c: Remove.\n\t* gcc.target/i386/mpx/thread-local-var-1-nov.c: Remove.\n\t* gcc.target/i386/mpx/thread-local-var-1-ubv.c: Remove.\n\t* gcc.target/i386/mpx/union-arg-1-lbv.c: Remove.\n\t* gcc.target/i386/mpx/union-arg-1-nov.c: Remove.\n\t* gcc.target/i386/mpx/union-arg-1-ubv.c: Remove.\n\t* gcc.target/i386/mpx/va-arg-pack-1-lbv.c: Remove.\n\t* gcc.target/i386/mpx/va-arg-pack-1-nov.c: Remove.\n\t* gcc.target/i386/mpx/va-arg-pack-1-ubv.c: Remove.\n\t* gcc.target/i386/mpx/va-arg-pack-2-lbv.c: Remove.\n\t* gcc.target/i386/mpx/va-arg-pack-2-nov.c: Remove.\n\t* gcc.target/i386/mpx/va-arg-pack-2-ubv.c: Remove.\n\t* gcc.target/i386/mpx/vararg-1-lbv.c: Remove.\n\t* gcc.target/i386/mpx/vararg-1-nov.c: Remove.\n\t* gcc.target/i386/mpx/vararg-1-ubv.c: Remove.\n\t* gcc.target/i386/mpx/vararg-2-lbv.c: Remove.\n\t* gcc.target/i386/mpx/vararg-2-nov.c: Remove.\n\t* gcc.target/i386/mpx/vararg-2-ubv.c: Remove.\n\t* gcc.target/i386/mpx/vararg-3-lbv.c: Remove.\n\t* gcc.target/i386/mpx/vararg-3-nov.c: Remove.\n\t* gcc.target/i386/mpx/vararg-3-ubv.c: Remove.\n\t* gcc.target/i386/mpx/vararg-4-lbv.c: Remove.\n\t* gcc.target/i386/mpx/vararg-4-nov.c: Remove.\n\t* gcc.target/i386/mpx/vararg-4-ubv.c: Remove.\n\t* gcc.target/i386/mpx/vararg-5-lbv.c: Remove.\n\t* gcc.target/i386/mpx/vararg-5-nov.c: Remove.\n\t* gcc.target/i386/mpx/vararg-5-ubv.c: Remove.\n\t* gcc.target/i386/mpx/vararg-6-lbv.c: Remove.\n\t* gcc.target/i386/mpx/vararg-6-nov.c: Remove.\n\t* gcc.target/i386/mpx/vararg-6-ubv.c: Remove.\n\t* gcc.target/i386/mpx/vararg-7-lbv.c: Remove.\n\t* gcc.target/i386/mpx/vararg-7-nov.c: Remove.\n\t* gcc.target/i386/mpx/vararg-7-ubv.c: Remove.\n\t* gcc.target/i386/mpx/vararg-8-lbv.c: Remove.\n\t* gcc.target/i386/mpx/vararg-8-nov.c: Remove.\n\t* gcc.target/i386/mpx/vararg-8-ubv.c: Remove.\n\t* gcc.target/i386/mpx/vla-1-lbv.c: Remove.\n\t* gcc.target/i386/mpx/vla-1-nov.c: Remove.\n\t* gcc.target/i386/mpx/vla-1-ubv.c: Remove.\n\t* gcc.target/i386/mpx/vla-2-lbv.c: Remove.\n\t* gcc.target/i386/mpx/vla-2-nov.c: Remove.\n\t* gcc.target/i386/mpx/vla-2-ubv.c: Remove.\n\t* gcc.target/i386/mpx/vla-trailing-1-lbv.c: Remove.\n\t* gcc.target/i386/mpx/vla-trailing-1-nov.c: Remove.\n\t* gcc.target/i386/mpx/vla-trailing-1-ubv.c: Remove.\n\t* gcc.target/i386/pr63995-2.c: Remove.\n\t* gcc.target/i386/pr64805.c: Remove.\n\t* gcc.target/i386/pr65044.c: Remove.\n\t* gcc.target/i386/pr65167.c: Remove.\n\t* gcc.target/i386/pr65183.c: Remove.\n\t* gcc.target/i386/pr65184.c: Remove.\n\t* gcc.target/i386/pr65523.c: Remove.\n\t* gcc.target/i386/pr70876.c: Remove.\n\t* gcc.target/i386/pr70877.c: Remove.\n\t* gcc.target/i386/pr71458.c: Remove.\n\t* gcc.target/i386/pr80880.c: Remove.\n\t* gcc.target/i386/ret-thunk-25.c: Remove.\n\t* gcc.target/i386/thunk-retbnd.c: Remove.\n\t* lib/mpx-dg.exp: Remove.\n\t* gcc.target/i386/funcspec-56.inc: Adjust test case.\n\nFrom-SVN: r261304", "tree": {"sha": "9bc543166dccf1ba541d41e05b67efd097cc795d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9bc543166dccf1ba541d41e05b67efd097cc795d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12"}], "stats": {"total": 42937, "additions": 923, "deletions": 42014}, "files": [{"sha": "7b0524fa602dd29e13a5592ef4cd7a4412a97a4e", "filename": "ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -1,3 +1,34 @@\n+2018-06-08  Martin Liska  <mliska@suse.cz>\n+\n+\t* MAINTAINERS: Remove MPX-related entries.\n+\t* Makefile.def: Remove libmpx support.\n+\t* Makefile.in: Likewise.\n+\t* configure: Remove removed files.\n+\t* configure.ac: Likewise.\n+\t* libmpx/ChangeLog: Remove.\n+\t* libmpx/Makefile.am: Remove.\n+\t* libmpx/Makefile.in: Remove.\n+\t* libmpx/acinclude.m4: Remove.\n+\t* libmpx/aclocal.m4: Remove.\n+\t* libmpx/config.h.in: Remove.\n+\t* libmpx/configure: Remove.\n+\t* libmpx/configure.ac: Remove.\n+\t* libmpx/configure.tgt: Remove.\n+\t* libmpx/libmpx.spec.in: Remove.\n+\t* libmpx/mpxrt/Makefile.am: Remove.\n+\t* libmpx/mpxrt/Makefile.in: Remove.\n+\t* libmpx/mpxrt/libmpx.map: Remove.\n+\t* libmpx/mpxrt/libtool-version: Remove.\n+\t* libmpx/mpxrt/mpxrt-utils.c: Remove.\n+\t* libmpx/mpxrt/mpxrt-utils.h: Remove.\n+\t* libmpx/mpxrt/mpxrt.c: Remove.\n+\t* libmpx/mpxrt/mpxrt.h: Remove.\n+\t* libmpx/mpxwrap/Makefile.am: Remove.\n+\t* libmpx/mpxwrap/Makefile.in: Remove.\n+\t* libmpx/mpxwrap/libmpxwrappers.map: Remove.\n+\t* libmpx/mpxwrap/libtool-version: Remove.\n+\t* libmpx/mpxwrap/mpx_wrappers.c: Remove.\n+\n 2018-06-04  Martin Liska  <mliska@suse.cz>\n \n \t* MAINTAINERS: Add myself as gcov maintainer."}, {"sha": "62f74a8d74efe2458ad0cbb3d877aa64bf24c44f", "filename": "MAINTAINERS", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/MAINTAINERS", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/MAINTAINERS", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/MAINTAINERS?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -168,7 +168,6 @@ libgomp\t\t\tJakub Jelinek\t\t<jakub@redhat.com>\n libiberty\t\tDJ Delorie\t\t<dj@redhat.com>\n libiberty\t\tIan Lance Taylor\t<ian@airs.com>\n libitm\t\t\tTorvald Riegel\t\t<triegel@redhat.com>\n-libmpx\t\t\tIlya Enkovich\t\t<enkovich.gnu@gmail.com>\n libobjc\t\t\tNicola Pero\t\t<nicola.pero@meta-innovation.com>\n libobjc\t\t\tAndrew Pinski\t\t<pinskia@gmail.com>\n libquadmath\t\tTobias Burnus\t\t<burnus@net-b.de>\n@@ -247,8 +246,6 @@ register allocation\tVladimir Makarov\t<vmakarov@redhat.com>\n gdbhooks.py\t\tDavid Malcolm\t\t<dmalcolm@redhat.com>\n SLSR\t\t\tBill Schmidt\t\t<wschmidt@linux.ibm.com>\n jit\t\t\tDavid Malcolm\t\t<dmalcolm@redhat.com>\n-pointer bounds checker\tIlya Enkovich\t\t<enkovich.gnu@gmail.com>\n-i386 MPX\t\tIlya Enkovich\t\t<enkovich.gnu@gmail.com>\n gen* on machine desc\tRichard Sandiford\t<rdsandiford@googlemail.com>\n \n Note that individuals who maintain parts of the compiler need approval to"}, {"sha": "062d2fb3e752629d05dce28a9793420a56cc633d", "filename": "Makefile.def", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/Makefile.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/Makefile.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.def?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -137,9 +137,6 @@ target_modules = { module= libsanitizer;\n \t\t   bootstrap=true;\n \t\t   lib_path=.libs;\n \t\t   raw_cxx=true; };\n-target_modules = { module= libmpx;\n-\t\t   bootstrap=true;\n-\t\t   lib_path=.libs; };\n target_modules = { module= libvtv;\n \t\t   bootstrap=true;\n \t\t   lib_path=.libs;"}, {"sha": "be6b7757cd65430d4e77a59630e73f5728feaa73", "filename": "Makefile.in", "status": "modified", "additions": 1, "deletions": 1290, "changes": 1291, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/Makefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/Makefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.in?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -622,7 +622,7 @@ all:\n \n # This is the list of directories that may be needed in RPATH_ENVVAR\n # so that programs built for the target machine work.\n-TARGET_LIB_PATH = $(TARGET_LIB_PATH_libstdc++-v3)$(TARGET_LIB_PATH_libsanitizer)$(TARGET_LIB_PATH_libmpx)$(TARGET_LIB_PATH_libvtv)$(TARGET_LIB_PATH_liboffloadmic)$(TARGET_LIB_PATH_libssp)$(TARGET_LIB_PATH_libgomp)$(TARGET_LIB_PATH_libitm)$(TARGET_LIB_PATH_libatomic)$(HOST_LIB_PATH_gcc)\n+TARGET_LIB_PATH = $(TARGET_LIB_PATH_libstdc++-v3)$(TARGET_LIB_PATH_libsanitizer)$(TARGET_LIB_PATH_libvtv)$(TARGET_LIB_PATH_liboffloadmic)$(TARGET_LIB_PATH_libssp)$(TARGET_LIB_PATH_libgomp)$(TARGET_LIB_PATH_libitm)$(TARGET_LIB_PATH_libatomic)$(HOST_LIB_PATH_gcc)\n \n @if target-libstdc++-v3\n TARGET_LIB_PATH_libstdc++-v3 = $$r/$(TARGET_SUBDIR)/libstdc++-v3/src/.libs:\n@@ -632,10 +632,6 @@ TARGET_LIB_PATH_libstdc++-v3 = $$r/$(TARGET_SUBDIR)/libstdc++-v3/src/.libs:\n TARGET_LIB_PATH_libsanitizer = $$r/$(TARGET_SUBDIR)/libsanitizer/.libs:\n @endif target-libsanitizer\n \n-@if target-libmpx\n-TARGET_LIB_PATH_libmpx = $$r/$(TARGET_SUBDIR)/libmpx/.libs:\n-@endif target-libmpx\n-\n @if target-libvtv\n TARGET_LIB_PATH_libvtv = $$r/$(TARGET_SUBDIR)/libvtv/.libs:\n @endif target-libvtv\n@@ -1001,7 +997,6 @@ configure-host:  \\\n configure-target:  \\\n     maybe-configure-target-libstdc++-v3 \\\n     maybe-configure-target-libsanitizer \\\n-    maybe-configure-target-libmpx \\\n     maybe-configure-target-libvtv \\\n     maybe-configure-target-liboffloadmic \\\n     maybe-configure-target-libssp \\\n@@ -1160,9 +1155,6 @@ all-target: maybe-all-target-libstdc++-v3\n @if target-libsanitizer-no-bootstrap\n all-target: maybe-all-target-libsanitizer\n @endif target-libsanitizer-no-bootstrap\n-@if target-libmpx-no-bootstrap\n-all-target: maybe-all-target-libmpx\n-@endif target-libmpx-no-bootstrap\n @if target-libvtv-no-bootstrap\n all-target: maybe-all-target-libvtv\n @endif target-libvtv-no-bootstrap\n@@ -1258,7 +1250,6 @@ info-host: maybe-info-gotools\n \n info-target: maybe-info-target-libstdc++-v3\n info-target: maybe-info-target-libsanitizer\n-info-target: maybe-info-target-libmpx\n info-target: maybe-info-target-libvtv\n info-target: maybe-info-target-liboffloadmic\n info-target: maybe-info-target-libssp\n@@ -1343,7 +1334,6 @@ dvi-host: maybe-dvi-gotools\n \n dvi-target: maybe-dvi-target-libstdc++-v3\n dvi-target: maybe-dvi-target-libsanitizer\n-dvi-target: maybe-dvi-target-libmpx\n dvi-target: maybe-dvi-target-libvtv\n dvi-target: maybe-dvi-target-liboffloadmic\n dvi-target: maybe-dvi-target-libssp\n@@ -1428,7 +1418,6 @@ pdf-host: maybe-pdf-gotools\n \n pdf-target: maybe-pdf-target-libstdc++-v3\n pdf-target: maybe-pdf-target-libsanitizer\n-pdf-target: maybe-pdf-target-libmpx\n pdf-target: maybe-pdf-target-libvtv\n pdf-target: maybe-pdf-target-liboffloadmic\n pdf-target: maybe-pdf-target-libssp\n@@ -1513,7 +1502,6 @@ html-host: maybe-html-gotools\n \n html-target: maybe-html-target-libstdc++-v3\n html-target: maybe-html-target-libsanitizer\n-html-target: maybe-html-target-libmpx\n html-target: maybe-html-target-libvtv\n html-target: maybe-html-target-liboffloadmic\n html-target: maybe-html-target-libssp\n@@ -1598,7 +1586,6 @@ TAGS-host: maybe-TAGS-gotools\n \n TAGS-target: maybe-TAGS-target-libstdc++-v3\n TAGS-target: maybe-TAGS-target-libsanitizer\n-TAGS-target: maybe-TAGS-target-libmpx\n TAGS-target: maybe-TAGS-target-libvtv\n TAGS-target: maybe-TAGS-target-liboffloadmic\n TAGS-target: maybe-TAGS-target-libssp\n@@ -1683,7 +1670,6 @@ install-info-host: maybe-install-info-gotools\n \n install-info-target: maybe-install-info-target-libstdc++-v3\n install-info-target: maybe-install-info-target-libsanitizer\n-install-info-target: maybe-install-info-target-libmpx\n install-info-target: maybe-install-info-target-libvtv\n install-info-target: maybe-install-info-target-liboffloadmic\n install-info-target: maybe-install-info-target-libssp\n@@ -1768,7 +1754,6 @@ install-pdf-host: maybe-install-pdf-gotools\n \n install-pdf-target: maybe-install-pdf-target-libstdc++-v3\n install-pdf-target: maybe-install-pdf-target-libsanitizer\n-install-pdf-target: maybe-install-pdf-target-libmpx\n install-pdf-target: maybe-install-pdf-target-libvtv\n install-pdf-target: maybe-install-pdf-target-liboffloadmic\n install-pdf-target: maybe-install-pdf-target-libssp\n@@ -1853,7 +1838,6 @@ install-html-host: maybe-install-html-gotools\n \n install-html-target: maybe-install-html-target-libstdc++-v3\n install-html-target: maybe-install-html-target-libsanitizer\n-install-html-target: maybe-install-html-target-libmpx\n install-html-target: maybe-install-html-target-libvtv\n install-html-target: maybe-install-html-target-liboffloadmic\n install-html-target: maybe-install-html-target-libssp\n@@ -1938,7 +1922,6 @@ installcheck-host: maybe-installcheck-gotools\n \n installcheck-target: maybe-installcheck-target-libstdc++-v3\n installcheck-target: maybe-installcheck-target-libsanitizer\n-installcheck-target: maybe-installcheck-target-libmpx\n installcheck-target: maybe-installcheck-target-libvtv\n installcheck-target: maybe-installcheck-target-liboffloadmic\n installcheck-target: maybe-installcheck-target-libssp\n@@ -2023,7 +2006,6 @@ mostlyclean-host: maybe-mostlyclean-gotools\n \n mostlyclean-target: maybe-mostlyclean-target-libstdc++-v3\n mostlyclean-target: maybe-mostlyclean-target-libsanitizer\n-mostlyclean-target: maybe-mostlyclean-target-libmpx\n mostlyclean-target: maybe-mostlyclean-target-libvtv\n mostlyclean-target: maybe-mostlyclean-target-liboffloadmic\n mostlyclean-target: maybe-mostlyclean-target-libssp\n@@ -2108,7 +2090,6 @@ clean-host: maybe-clean-gotools\n \n clean-target: maybe-clean-target-libstdc++-v3\n clean-target: maybe-clean-target-libsanitizer\n-clean-target: maybe-clean-target-libmpx\n clean-target: maybe-clean-target-libvtv\n clean-target: maybe-clean-target-liboffloadmic\n clean-target: maybe-clean-target-libssp\n@@ -2193,7 +2174,6 @@ distclean-host: maybe-distclean-gotools\n \n distclean-target: maybe-distclean-target-libstdc++-v3\n distclean-target: maybe-distclean-target-libsanitizer\n-distclean-target: maybe-distclean-target-libmpx\n distclean-target: maybe-distclean-target-libvtv\n distclean-target: maybe-distclean-target-liboffloadmic\n distclean-target: maybe-distclean-target-libssp\n@@ -2278,7 +2258,6 @@ maintainer-clean-host: maybe-maintainer-clean-gotools\n \n maintainer-clean-target: maybe-maintainer-clean-target-libstdc++-v3\n maintainer-clean-target: maybe-maintainer-clean-target-libsanitizer\n-maintainer-clean-target: maybe-maintainer-clean-target-libmpx\n maintainer-clean-target: maybe-maintainer-clean-target-libvtv\n maintainer-clean-target: maybe-maintainer-clean-target-liboffloadmic\n maintainer-clean-target: maybe-maintainer-clean-target-libssp\n@@ -2419,7 +2398,6 @@ check-host:  \\\n check-target:  \\\n     maybe-check-target-libstdc++-v3 \\\n     maybe-check-target-libsanitizer \\\n-    maybe-check-target-libmpx \\\n     maybe-check-target-libvtv \\\n     maybe-check-target-liboffloadmic \\\n     maybe-check-target-libssp \\\n@@ -2600,7 +2578,6 @@ install-host:  \\\n install-target:  \\\n     maybe-install-target-libstdc++-v3 \\\n     maybe-install-target-libsanitizer \\\n-    maybe-install-target-libmpx \\\n     maybe-install-target-libvtv \\\n     maybe-install-target-liboffloadmic \\\n     maybe-install-target-libssp \\\n@@ -2705,7 +2682,6 @@ install-strip-host:  \\\n install-strip-target:  \\\n     maybe-install-strip-target-libstdc++-v3 \\\n     maybe-install-strip-target-libsanitizer \\\n-    maybe-install-strip-target-libmpx \\\n     maybe-install-strip-target-libvtv \\\n     maybe-install-strip-target-liboffloadmic \\\n     maybe-install-strip-target-libssp \\\n@@ -40365,1249 +40341,6 @@ maintainer-clean-target-libsanitizer:\n \n \n \n-.PHONY: configure-target-libmpx maybe-configure-target-libmpx\n-maybe-configure-target-libmpx:\n-@if gcc-bootstrap\n-configure-target-libmpx: stage_current\n-@endif gcc-bootstrap\n-@if target-libmpx\n-maybe-configure-target-libmpx: configure-target-libmpx\n-configure-target-libmpx: \n-\t@r=`${PWD_COMMAND}`; export r; \\\n-\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\techo \"Checking multilib configuration for libmpx...\"; \\\n-\t$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/libmpx; \\\n-\t$(CC_FOR_TARGET) --print-multi-lib > $(TARGET_SUBDIR)/libmpx/multilib.tmp 2> /dev/null; \\\n-\tif test -r $(TARGET_SUBDIR)/libmpx/multilib.out; then \\\n-\t  if cmp -s $(TARGET_SUBDIR)/libmpx/multilib.tmp $(TARGET_SUBDIR)/libmpx/multilib.out; then \\\n-\t    rm -f $(TARGET_SUBDIR)/libmpx/multilib.tmp; \\\n-\t  else \\\n-\t    rm -f $(TARGET_SUBDIR)/libmpx/Makefile; \\\n-\t    mv $(TARGET_SUBDIR)/libmpx/multilib.tmp $(TARGET_SUBDIR)/libmpx/multilib.out; \\\n-\t  fi; \\\n-\telse \\\n-\t  mv $(TARGET_SUBDIR)/libmpx/multilib.tmp $(TARGET_SUBDIR)/libmpx/multilib.out; \\\n-\tfi; \\\n-\ttest ! -f $(TARGET_SUBDIR)/libmpx/Makefile || exit 0; \\\n-\t$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/libmpx; \\\n-\t$(NORMAL_TARGET_EXPORTS)  \\\n-\techo Configuring in $(TARGET_SUBDIR)/libmpx; \\\n-\tcd \"$(TARGET_SUBDIR)/libmpx\" || exit 1; \\\n-\tcase $(srcdir) in \\\n-\t  /* | [A-Za-z]:[\\\\/]*) topdir=$(srcdir) ;; \\\n-\t  *) topdir=`echo $(TARGET_SUBDIR)/libmpx/ | \\\n-\t\tsed -e 's,\\./,,g' -e 's,[^/]*/,../,g' `$(srcdir) ;; \\\n-\tesac; \\\n-\tmodule_srcdir=libmpx; \\\n-\trm -f no-such-file || : ; \\\n-\tCONFIG_SITE=no-such-file $(SHELL) \\\n-\t  $$s/$$module_srcdir/configure \\\n-\t  --srcdir=$${topdir}/$$module_srcdir \\\n-\t  $(TARGET_CONFIGARGS) --build=${build_alias} --host=${target_alias} \\\n-\t  --target=${target_alias}  \\\n-\t  || exit 1\n-@endif target-libmpx\n-\n-\n-\n-.PHONY: configure-stage1-target-libmpx maybe-configure-stage1-target-libmpx\n-maybe-configure-stage1-target-libmpx:\n-@if target-libmpx-bootstrap\n-maybe-configure-stage1-target-libmpx: configure-stage1-target-libmpx\n-configure-stage1-target-libmpx:\n-\t@[ $(current_stage) = stage1 ] || $(MAKE) stage1-start\n-\t@$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/libmpx\n-\t@r=`${PWD_COMMAND}`; export r; \\\n-\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\tTFLAGS=\"$(STAGE1_TFLAGS)\"; \\\n-\techo \"Checking multilib configuration for libmpx...\"; \\\n-\t$(CC_FOR_TARGET) --print-multi-lib > $(TARGET_SUBDIR)/libmpx/multilib.tmp 2> /dev/null; \\\n-\tif test -r $(TARGET_SUBDIR)/libmpx/multilib.out; then \\\n-\t  if cmp -s $(TARGET_SUBDIR)/libmpx/multilib.tmp $(TARGET_SUBDIR)/libmpx/multilib.out; then \\\n-\t    rm -f $(TARGET_SUBDIR)/libmpx/multilib.tmp; \\\n-\t  else \\\n-\t    rm -f $(TARGET_SUBDIR)/libmpx/Makefile; \\\n-\t    mv $(TARGET_SUBDIR)/libmpx/multilib.tmp $(TARGET_SUBDIR)/libmpx/multilib.out; \\\n-\t  fi; \\\n-\telse \\\n-\t  mv $(TARGET_SUBDIR)/libmpx/multilib.tmp $(TARGET_SUBDIR)/libmpx/multilib.out; \\\n-\tfi; \\\n-\ttest ! -f $(TARGET_SUBDIR)/libmpx/Makefile || exit 0; \\\n-\t$(NORMAL_TARGET_EXPORTS) \\\n-\tCFLAGS=\"$(CFLAGS_FOR_TARGET)\"; export CFLAGS; \\\n-\tCXXFLAGS=\"$(CXXFLAGS_FOR_TARGET)\"; export CXXFLAGS; \\\n-\tLIBCFLAGS=\"$(LIBCFLAGS_FOR_TARGET)\"; export LIBCFLAGS;  \\\n-\techo Configuring stage 1 in $(TARGET_SUBDIR)/libmpx; \\\n-\t$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/libmpx; \\\n-\tcd $(TARGET_SUBDIR)/libmpx || exit 1; \\\n-\tcase $(srcdir) in \\\n-\t  /* | [A-Za-z]:[\\\\/]*) topdir=$(srcdir) ;; \\\n-\t  *) topdir=`echo $(TARGET_SUBDIR)/libmpx/ | \\\n-\t\tsed -e 's,\\./,,g' -e 's,[^/]*/,../,g' `$(srcdir) ;; \\\n-\tesac; \\\n-\tmodule_srcdir=libmpx; \\\n-\t$(SHELL) $$s/$$module_srcdir/configure \\\n-\t  --srcdir=$${topdir}/$$module_srcdir \\\n-\t  $(TARGET_CONFIGARGS) --build=${build_alias} --host=${target_alias} \\\n-\t  --target=${target_alias} \\\n-\t   \\\n-\t  $(STAGE1_CONFIGURE_FLAGS)\n-@endif target-libmpx-bootstrap\n-\n-.PHONY: configure-stage2-target-libmpx maybe-configure-stage2-target-libmpx\n-maybe-configure-stage2-target-libmpx:\n-@if target-libmpx-bootstrap\n-maybe-configure-stage2-target-libmpx: configure-stage2-target-libmpx\n-configure-stage2-target-libmpx:\n-\t@[ $(current_stage) = stage2 ] || $(MAKE) stage2-start\n-\t@$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/libmpx\n-\t@r=`${PWD_COMMAND}`; export r; \\\n-\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\tTFLAGS=\"$(STAGE2_TFLAGS)\"; \\\n-\techo \"Checking multilib configuration for libmpx...\"; \\\n-\t$(CC_FOR_TARGET) --print-multi-lib > $(TARGET_SUBDIR)/libmpx/multilib.tmp 2> /dev/null; \\\n-\tif test -r $(TARGET_SUBDIR)/libmpx/multilib.out; then \\\n-\t  if cmp -s $(TARGET_SUBDIR)/libmpx/multilib.tmp $(TARGET_SUBDIR)/libmpx/multilib.out; then \\\n-\t    rm -f $(TARGET_SUBDIR)/libmpx/multilib.tmp; \\\n-\t  else \\\n-\t    rm -f $(TARGET_SUBDIR)/libmpx/Makefile; \\\n-\t    mv $(TARGET_SUBDIR)/libmpx/multilib.tmp $(TARGET_SUBDIR)/libmpx/multilib.out; \\\n-\t  fi; \\\n-\telse \\\n-\t  mv $(TARGET_SUBDIR)/libmpx/multilib.tmp $(TARGET_SUBDIR)/libmpx/multilib.out; \\\n-\tfi; \\\n-\ttest ! -f $(TARGET_SUBDIR)/libmpx/Makefile || exit 0; \\\n-\t$(NORMAL_TARGET_EXPORTS) \\\n-\t \\\n-\tCFLAGS=\"$(CFLAGS_FOR_TARGET)\"; export CFLAGS; \\\n-\tCXXFLAGS=\"$(CXXFLAGS_FOR_TARGET)\"; export CXXFLAGS; \\\n-\tLIBCFLAGS=\"$(LIBCFLAGS_FOR_TARGET)\"; export LIBCFLAGS;  \\\n-\techo Configuring stage 2 in $(TARGET_SUBDIR)/libmpx; \\\n-\t$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/libmpx; \\\n-\tcd $(TARGET_SUBDIR)/libmpx || exit 1; \\\n-\tcase $(srcdir) in \\\n-\t  /* | [A-Za-z]:[\\\\/]*) topdir=$(srcdir) ;; \\\n-\t  *) topdir=`echo $(TARGET_SUBDIR)/libmpx/ | \\\n-\t\tsed -e 's,\\./,,g' -e 's,[^/]*/,../,g' `$(srcdir) ;; \\\n-\tesac; \\\n-\tmodule_srcdir=libmpx; \\\n-\t$(SHELL) $$s/$$module_srcdir/configure \\\n-\t  --srcdir=$${topdir}/$$module_srcdir \\\n-\t  $(TARGET_CONFIGARGS) --build=${build_alias} --host=${target_alias} \\\n-\t  --target=${target_alias} \\\n-\t  --with-build-libsubdir=$(HOST_SUBDIR) \\\n-\t  $(STAGE2_CONFIGURE_FLAGS)\n-@endif target-libmpx-bootstrap\n-\n-.PHONY: configure-stage3-target-libmpx maybe-configure-stage3-target-libmpx\n-maybe-configure-stage3-target-libmpx:\n-@if target-libmpx-bootstrap\n-maybe-configure-stage3-target-libmpx: configure-stage3-target-libmpx\n-configure-stage3-target-libmpx:\n-\t@[ $(current_stage) = stage3 ] || $(MAKE) stage3-start\n-\t@$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/libmpx\n-\t@r=`${PWD_COMMAND}`; export r; \\\n-\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\tTFLAGS=\"$(STAGE3_TFLAGS)\"; \\\n-\techo \"Checking multilib configuration for libmpx...\"; \\\n-\t$(CC_FOR_TARGET) --print-multi-lib > $(TARGET_SUBDIR)/libmpx/multilib.tmp 2> /dev/null; \\\n-\tif test -r $(TARGET_SUBDIR)/libmpx/multilib.out; then \\\n-\t  if cmp -s $(TARGET_SUBDIR)/libmpx/multilib.tmp $(TARGET_SUBDIR)/libmpx/multilib.out; then \\\n-\t    rm -f $(TARGET_SUBDIR)/libmpx/multilib.tmp; \\\n-\t  else \\\n-\t    rm -f $(TARGET_SUBDIR)/libmpx/Makefile; \\\n-\t    mv $(TARGET_SUBDIR)/libmpx/multilib.tmp $(TARGET_SUBDIR)/libmpx/multilib.out; \\\n-\t  fi; \\\n-\telse \\\n-\t  mv $(TARGET_SUBDIR)/libmpx/multilib.tmp $(TARGET_SUBDIR)/libmpx/multilib.out; \\\n-\tfi; \\\n-\ttest ! -f $(TARGET_SUBDIR)/libmpx/Makefile || exit 0; \\\n-\t$(NORMAL_TARGET_EXPORTS) \\\n-\t \\\n-\tCFLAGS=\"$(CFLAGS_FOR_TARGET)\"; export CFLAGS; \\\n-\tCXXFLAGS=\"$(CXXFLAGS_FOR_TARGET)\"; export CXXFLAGS; \\\n-\tLIBCFLAGS=\"$(LIBCFLAGS_FOR_TARGET)\"; export LIBCFLAGS;  \\\n-\techo Configuring stage 3 in $(TARGET_SUBDIR)/libmpx; \\\n-\t$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/libmpx; \\\n-\tcd $(TARGET_SUBDIR)/libmpx || exit 1; \\\n-\tcase $(srcdir) in \\\n-\t  /* | [A-Za-z]:[\\\\/]*) topdir=$(srcdir) ;; \\\n-\t  *) topdir=`echo $(TARGET_SUBDIR)/libmpx/ | \\\n-\t\tsed -e 's,\\./,,g' -e 's,[^/]*/,../,g' `$(srcdir) ;; \\\n-\tesac; \\\n-\tmodule_srcdir=libmpx; \\\n-\t$(SHELL) $$s/$$module_srcdir/configure \\\n-\t  --srcdir=$${topdir}/$$module_srcdir \\\n-\t  $(TARGET_CONFIGARGS) --build=${build_alias} --host=${target_alias} \\\n-\t  --target=${target_alias} \\\n-\t  --with-build-libsubdir=$(HOST_SUBDIR) \\\n-\t  $(STAGE3_CONFIGURE_FLAGS)\n-@endif target-libmpx-bootstrap\n-\n-.PHONY: configure-stage4-target-libmpx maybe-configure-stage4-target-libmpx\n-maybe-configure-stage4-target-libmpx:\n-@if target-libmpx-bootstrap\n-maybe-configure-stage4-target-libmpx: configure-stage4-target-libmpx\n-configure-stage4-target-libmpx:\n-\t@[ $(current_stage) = stage4 ] || $(MAKE) stage4-start\n-\t@$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/libmpx\n-\t@r=`${PWD_COMMAND}`; export r; \\\n-\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\tTFLAGS=\"$(STAGE4_TFLAGS)\"; \\\n-\techo \"Checking multilib configuration for libmpx...\"; \\\n-\t$(CC_FOR_TARGET) --print-multi-lib > $(TARGET_SUBDIR)/libmpx/multilib.tmp 2> /dev/null; \\\n-\tif test -r $(TARGET_SUBDIR)/libmpx/multilib.out; then \\\n-\t  if cmp -s $(TARGET_SUBDIR)/libmpx/multilib.tmp $(TARGET_SUBDIR)/libmpx/multilib.out; then \\\n-\t    rm -f $(TARGET_SUBDIR)/libmpx/multilib.tmp; \\\n-\t  else \\\n-\t    rm -f $(TARGET_SUBDIR)/libmpx/Makefile; \\\n-\t    mv $(TARGET_SUBDIR)/libmpx/multilib.tmp $(TARGET_SUBDIR)/libmpx/multilib.out; \\\n-\t  fi; \\\n-\telse \\\n-\t  mv $(TARGET_SUBDIR)/libmpx/multilib.tmp $(TARGET_SUBDIR)/libmpx/multilib.out; \\\n-\tfi; \\\n-\ttest ! -f $(TARGET_SUBDIR)/libmpx/Makefile || exit 0; \\\n-\t$(NORMAL_TARGET_EXPORTS) \\\n-\t \\\n-\tCFLAGS=\"$(CFLAGS_FOR_TARGET)\"; export CFLAGS; \\\n-\tCXXFLAGS=\"$(CXXFLAGS_FOR_TARGET)\"; export CXXFLAGS; \\\n-\tLIBCFLAGS=\"$(LIBCFLAGS_FOR_TARGET)\"; export LIBCFLAGS;  \\\n-\techo Configuring stage 4 in $(TARGET_SUBDIR)/libmpx; \\\n-\t$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/libmpx; \\\n-\tcd $(TARGET_SUBDIR)/libmpx || exit 1; \\\n-\tcase $(srcdir) in \\\n-\t  /* | [A-Za-z]:[\\\\/]*) topdir=$(srcdir) ;; \\\n-\t  *) topdir=`echo $(TARGET_SUBDIR)/libmpx/ | \\\n-\t\tsed -e 's,\\./,,g' -e 's,[^/]*/,../,g' `$(srcdir) ;; \\\n-\tesac; \\\n-\tmodule_srcdir=libmpx; \\\n-\t$(SHELL) $$s/$$module_srcdir/configure \\\n-\t  --srcdir=$${topdir}/$$module_srcdir \\\n-\t  $(TARGET_CONFIGARGS) --build=${build_alias} --host=${target_alias} \\\n-\t  --target=${target_alias} \\\n-\t  --with-build-libsubdir=$(HOST_SUBDIR) \\\n-\t  $(STAGE4_CONFIGURE_FLAGS)\n-@endif target-libmpx-bootstrap\n-\n-.PHONY: configure-stageprofile-target-libmpx maybe-configure-stageprofile-target-libmpx\n-maybe-configure-stageprofile-target-libmpx:\n-@if target-libmpx-bootstrap\n-maybe-configure-stageprofile-target-libmpx: configure-stageprofile-target-libmpx\n-configure-stageprofile-target-libmpx:\n-\t@[ $(current_stage) = stageprofile ] || $(MAKE) stageprofile-start\n-\t@$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/libmpx\n-\t@r=`${PWD_COMMAND}`; export r; \\\n-\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\tTFLAGS=\"$(STAGEprofile_TFLAGS)\"; \\\n-\techo \"Checking multilib configuration for libmpx...\"; \\\n-\t$(CC_FOR_TARGET) --print-multi-lib > $(TARGET_SUBDIR)/libmpx/multilib.tmp 2> /dev/null; \\\n-\tif test -r $(TARGET_SUBDIR)/libmpx/multilib.out; then \\\n-\t  if cmp -s $(TARGET_SUBDIR)/libmpx/multilib.tmp $(TARGET_SUBDIR)/libmpx/multilib.out; then \\\n-\t    rm -f $(TARGET_SUBDIR)/libmpx/multilib.tmp; \\\n-\t  else \\\n-\t    rm -f $(TARGET_SUBDIR)/libmpx/Makefile; \\\n-\t    mv $(TARGET_SUBDIR)/libmpx/multilib.tmp $(TARGET_SUBDIR)/libmpx/multilib.out; \\\n-\t  fi; \\\n-\telse \\\n-\t  mv $(TARGET_SUBDIR)/libmpx/multilib.tmp $(TARGET_SUBDIR)/libmpx/multilib.out; \\\n-\tfi; \\\n-\ttest ! -f $(TARGET_SUBDIR)/libmpx/Makefile || exit 0; \\\n-\t$(NORMAL_TARGET_EXPORTS) \\\n-\t \\\n-\tCFLAGS=\"$(CFLAGS_FOR_TARGET)\"; export CFLAGS; \\\n-\tCXXFLAGS=\"$(CXXFLAGS_FOR_TARGET)\"; export CXXFLAGS; \\\n-\tLIBCFLAGS=\"$(LIBCFLAGS_FOR_TARGET)\"; export LIBCFLAGS;  \\\n-\techo Configuring stage profile in $(TARGET_SUBDIR)/libmpx; \\\n-\t$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/libmpx; \\\n-\tcd $(TARGET_SUBDIR)/libmpx || exit 1; \\\n-\tcase $(srcdir) in \\\n-\t  /* | [A-Za-z]:[\\\\/]*) topdir=$(srcdir) ;; \\\n-\t  *) topdir=`echo $(TARGET_SUBDIR)/libmpx/ | \\\n-\t\tsed -e 's,\\./,,g' -e 's,[^/]*/,../,g' `$(srcdir) ;; \\\n-\tesac; \\\n-\tmodule_srcdir=libmpx; \\\n-\t$(SHELL) $$s/$$module_srcdir/configure \\\n-\t  --srcdir=$${topdir}/$$module_srcdir \\\n-\t  $(TARGET_CONFIGARGS) --build=${build_alias} --host=${target_alias} \\\n-\t  --target=${target_alias} \\\n-\t  --with-build-libsubdir=$(HOST_SUBDIR) \\\n-\t  $(STAGEprofile_CONFIGURE_FLAGS)\n-@endif target-libmpx-bootstrap\n-\n-.PHONY: configure-stagetrain-target-libmpx maybe-configure-stagetrain-target-libmpx\n-maybe-configure-stagetrain-target-libmpx:\n-@if target-libmpx-bootstrap\n-maybe-configure-stagetrain-target-libmpx: configure-stagetrain-target-libmpx\n-configure-stagetrain-target-libmpx:\n-\t@[ $(current_stage) = stagetrain ] || $(MAKE) stagetrain-start\n-\t@$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/libmpx\n-\t@r=`${PWD_COMMAND}`; export r; \\\n-\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\tTFLAGS=\"$(STAGEtrain_TFLAGS)\"; \\\n-\techo \"Checking multilib configuration for libmpx...\"; \\\n-\t$(CC_FOR_TARGET) --print-multi-lib > $(TARGET_SUBDIR)/libmpx/multilib.tmp 2> /dev/null; \\\n-\tif test -r $(TARGET_SUBDIR)/libmpx/multilib.out; then \\\n-\t  if cmp -s $(TARGET_SUBDIR)/libmpx/multilib.tmp $(TARGET_SUBDIR)/libmpx/multilib.out; then \\\n-\t    rm -f $(TARGET_SUBDIR)/libmpx/multilib.tmp; \\\n-\t  else \\\n-\t    rm -f $(TARGET_SUBDIR)/libmpx/Makefile; \\\n-\t    mv $(TARGET_SUBDIR)/libmpx/multilib.tmp $(TARGET_SUBDIR)/libmpx/multilib.out; \\\n-\t  fi; \\\n-\telse \\\n-\t  mv $(TARGET_SUBDIR)/libmpx/multilib.tmp $(TARGET_SUBDIR)/libmpx/multilib.out; \\\n-\tfi; \\\n-\ttest ! -f $(TARGET_SUBDIR)/libmpx/Makefile || exit 0; \\\n-\t$(NORMAL_TARGET_EXPORTS) \\\n-\t \\\n-\tCFLAGS=\"$(CFLAGS_FOR_TARGET)\"; export CFLAGS; \\\n-\tCXXFLAGS=\"$(CXXFLAGS_FOR_TARGET)\"; export CXXFLAGS; \\\n-\tLIBCFLAGS=\"$(LIBCFLAGS_FOR_TARGET)\"; export LIBCFLAGS;  \\\n-\techo Configuring stage train in $(TARGET_SUBDIR)/libmpx; \\\n-\t$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/libmpx; \\\n-\tcd $(TARGET_SUBDIR)/libmpx || exit 1; \\\n-\tcase $(srcdir) in \\\n-\t  /* | [A-Za-z]:[\\\\/]*) topdir=$(srcdir) ;; \\\n-\t  *) topdir=`echo $(TARGET_SUBDIR)/libmpx/ | \\\n-\t\tsed -e 's,\\./,,g' -e 's,[^/]*/,../,g' `$(srcdir) ;; \\\n-\tesac; \\\n-\tmodule_srcdir=libmpx; \\\n-\t$(SHELL) $$s/$$module_srcdir/configure \\\n-\t  --srcdir=$${topdir}/$$module_srcdir \\\n-\t  $(TARGET_CONFIGARGS) --build=${build_alias} --host=${target_alias} \\\n-\t  --target=${target_alias} \\\n-\t  --with-build-libsubdir=$(HOST_SUBDIR) \\\n-\t  $(STAGEtrain_CONFIGURE_FLAGS)\n-@endif target-libmpx-bootstrap\n-\n-.PHONY: configure-stagefeedback-target-libmpx maybe-configure-stagefeedback-target-libmpx\n-maybe-configure-stagefeedback-target-libmpx:\n-@if target-libmpx-bootstrap\n-maybe-configure-stagefeedback-target-libmpx: configure-stagefeedback-target-libmpx\n-configure-stagefeedback-target-libmpx:\n-\t@[ $(current_stage) = stagefeedback ] || $(MAKE) stagefeedback-start\n-\t@$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/libmpx\n-\t@r=`${PWD_COMMAND}`; export r; \\\n-\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\tTFLAGS=\"$(STAGEfeedback_TFLAGS)\"; \\\n-\techo \"Checking multilib configuration for libmpx...\"; \\\n-\t$(CC_FOR_TARGET) --print-multi-lib > $(TARGET_SUBDIR)/libmpx/multilib.tmp 2> /dev/null; \\\n-\tif test -r $(TARGET_SUBDIR)/libmpx/multilib.out; then \\\n-\t  if cmp -s $(TARGET_SUBDIR)/libmpx/multilib.tmp $(TARGET_SUBDIR)/libmpx/multilib.out; then \\\n-\t    rm -f $(TARGET_SUBDIR)/libmpx/multilib.tmp; \\\n-\t  else \\\n-\t    rm -f $(TARGET_SUBDIR)/libmpx/Makefile; \\\n-\t    mv $(TARGET_SUBDIR)/libmpx/multilib.tmp $(TARGET_SUBDIR)/libmpx/multilib.out; \\\n-\t  fi; \\\n-\telse \\\n-\t  mv $(TARGET_SUBDIR)/libmpx/multilib.tmp $(TARGET_SUBDIR)/libmpx/multilib.out; \\\n-\tfi; \\\n-\ttest ! -f $(TARGET_SUBDIR)/libmpx/Makefile || exit 0; \\\n-\t$(NORMAL_TARGET_EXPORTS) \\\n-\t \\\n-\tCFLAGS=\"$(CFLAGS_FOR_TARGET)\"; export CFLAGS; \\\n-\tCXXFLAGS=\"$(CXXFLAGS_FOR_TARGET)\"; export CXXFLAGS; \\\n-\tLIBCFLAGS=\"$(LIBCFLAGS_FOR_TARGET)\"; export LIBCFLAGS;  \\\n-\techo Configuring stage feedback in $(TARGET_SUBDIR)/libmpx; \\\n-\t$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/libmpx; \\\n-\tcd $(TARGET_SUBDIR)/libmpx || exit 1; \\\n-\tcase $(srcdir) in \\\n-\t  /* | [A-Za-z]:[\\\\/]*) topdir=$(srcdir) ;; \\\n-\t  *) topdir=`echo $(TARGET_SUBDIR)/libmpx/ | \\\n-\t\tsed -e 's,\\./,,g' -e 's,[^/]*/,../,g' `$(srcdir) ;; \\\n-\tesac; \\\n-\tmodule_srcdir=libmpx; \\\n-\t$(SHELL) $$s/$$module_srcdir/configure \\\n-\t  --srcdir=$${topdir}/$$module_srcdir \\\n-\t  $(TARGET_CONFIGARGS) --build=${build_alias} --host=${target_alias} \\\n-\t  --target=${target_alias} \\\n-\t  --with-build-libsubdir=$(HOST_SUBDIR) \\\n-\t  $(STAGEfeedback_CONFIGURE_FLAGS)\n-@endif target-libmpx-bootstrap\n-\n-.PHONY: configure-stageautoprofile-target-libmpx maybe-configure-stageautoprofile-target-libmpx\n-maybe-configure-stageautoprofile-target-libmpx:\n-@if target-libmpx-bootstrap\n-maybe-configure-stageautoprofile-target-libmpx: configure-stageautoprofile-target-libmpx\n-configure-stageautoprofile-target-libmpx:\n-\t@[ $(current_stage) = stageautoprofile ] || $(MAKE) stageautoprofile-start\n-\t@$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/libmpx\n-\t@r=`${PWD_COMMAND}`; export r; \\\n-\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\tTFLAGS=\"$(STAGEautoprofile_TFLAGS)\"; \\\n-\techo \"Checking multilib configuration for libmpx...\"; \\\n-\t$(CC_FOR_TARGET) --print-multi-lib > $(TARGET_SUBDIR)/libmpx/multilib.tmp 2> /dev/null; \\\n-\tif test -r $(TARGET_SUBDIR)/libmpx/multilib.out; then \\\n-\t  if cmp -s $(TARGET_SUBDIR)/libmpx/multilib.tmp $(TARGET_SUBDIR)/libmpx/multilib.out; then \\\n-\t    rm -f $(TARGET_SUBDIR)/libmpx/multilib.tmp; \\\n-\t  else \\\n-\t    rm -f $(TARGET_SUBDIR)/libmpx/Makefile; \\\n-\t    mv $(TARGET_SUBDIR)/libmpx/multilib.tmp $(TARGET_SUBDIR)/libmpx/multilib.out; \\\n-\t  fi; \\\n-\telse \\\n-\t  mv $(TARGET_SUBDIR)/libmpx/multilib.tmp $(TARGET_SUBDIR)/libmpx/multilib.out; \\\n-\tfi; \\\n-\ttest ! -f $(TARGET_SUBDIR)/libmpx/Makefile || exit 0; \\\n-\t$(NORMAL_TARGET_EXPORTS) \\\n-\t \\\n-\tCFLAGS=\"$(CFLAGS_FOR_TARGET)\"; export CFLAGS; \\\n-\tCXXFLAGS=\"$(CXXFLAGS_FOR_TARGET)\"; export CXXFLAGS; \\\n-\tLIBCFLAGS=\"$(LIBCFLAGS_FOR_TARGET)\"; export LIBCFLAGS;  \\\n-\techo Configuring stage autoprofile in $(TARGET_SUBDIR)/libmpx; \\\n-\t$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/libmpx; \\\n-\tcd $(TARGET_SUBDIR)/libmpx || exit 1; \\\n-\tcase $(srcdir) in \\\n-\t  /* | [A-Za-z]:[\\\\/]*) topdir=$(srcdir) ;; \\\n-\t  *) topdir=`echo $(TARGET_SUBDIR)/libmpx/ | \\\n-\t\tsed -e 's,\\./,,g' -e 's,[^/]*/,../,g' `$(srcdir) ;; \\\n-\tesac; \\\n-\tmodule_srcdir=libmpx; \\\n-\t$(SHELL) $$s/$$module_srcdir/configure \\\n-\t  --srcdir=$${topdir}/$$module_srcdir \\\n-\t  $(TARGET_CONFIGARGS) --build=${build_alias} --host=${target_alias} \\\n-\t  --target=${target_alias} \\\n-\t  --with-build-libsubdir=$(HOST_SUBDIR) \\\n-\t  $(STAGEautoprofile_CONFIGURE_FLAGS)\n-@endif target-libmpx-bootstrap\n-\n-.PHONY: configure-stageautofeedback-target-libmpx maybe-configure-stageautofeedback-target-libmpx\n-maybe-configure-stageautofeedback-target-libmpx:\n-@if target-libmpx-bootstrap\n-maybe-configure-stageautofeedback-target-libmpx: configure-stageautofeedback-target-libmpx\n-configure-stageautofeedback-target-libmpx:\n-\t@[ $(current_stage) = stageautofeedback ] || $(MAKE) stageautofeedback-start\n-\t@$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/libmpx\n-\t@r=`${PWD_COMMAND}`; export r; \\\n-\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\tTFLAGS=\"$(STAGEautofeedback_TFLAGS)\"; \\\n-\techo \"Checking multilib configuration for libmpx...\"; \\\n-\t$(CC_FOR_TARGET) --print-multi-lib > $(TARGET_SUBDIR)/libmpx/multilib.tmp 2> /dev/null; \\\n-\tif test -r $(TARGET_SUBDIR)/libmpx/multilib.out; then \\\n-\t  if cmp -s $(TARGET_SUBDIR)/libmpx/multilib.tmp $(TARGET_SUBDIR)/libmpx/multilib.out; then \\\n-\t    rm -f $(TARGET_SUBDIR)/libmpx/multilib.tmp; \\\n-\t  else \\\n-\t    rm -f $(TARGET_SUBDIR)/libmpx/Makefile; \\\n-\t    mv $(TARGET_SUBDIR)/libmpx/multilib.tmp $(TARGET_SUBDIR)/libmpx/multilib.out; \\\n-\t  fi; \\\n-\telse \\\n-\t  mv $(TARGET_SUBDIR)/libmpx/multilib.tmp $(TARGET_SUBDIR)/libmpx/multilib.out; \\\n-\tfi; \\\n-\ttest ! -f $(TARGET_SUBDIR)/libmpx/Makefile || exit 0; \\\n-\t$(NORMAL_TARGET_EXPORTS) \\\n-\t \\\n-\tCFLAGS=\"$(CFLAGS_FOR_TARGET)\"; export CFLAGS; \\\n-\tCXXFLAGS=\"$(CXXFLAGS_FOR_TARGET)\"; export CXXFLAGS; \\\n-\tLIBCFLAGS=\"$(LIBCFLAGS_FOR_TARGET)\"; export LIBCFLAGS;  \\\n-\techo Configuring stage autofeedback in $(TARGET_SUBDIR)/libmpx; \\\n-\t$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/libmpx; \\\n-\tcd $(TARGET_SUBDIR)/libmpx || exit 1; \\\n-\tcase $(srcdir) in \\\n-\t  /* | [A-Za-z]:[\\\\/]*) topdir=$(srcdir) ;; \\\n-\t  *) topdir=`echo $(TARGET_SUBDIR)/libmpx/ | \\\n-\t\tsed -e 's,\\./,,g' -e 's,[^/]*/,../,g' `$(srcdir) ;; \\\n-\tesac; \\\n-\tmodule_srcdir=libmpx; \\\n-\t$(SHELL) $$s/$$module_srcdir/configure \\\n-\t  --srcdir=$${topdir}/$$module_srcdir \\\n-\t  $(TARGET_CONFIGARGS) --build=${build_alias} --host=${target_alias} \\\n-\t  --target=${target_alias} \\\n-\t  --with-build-libsubdir=$(HOST_SUBDIR) \\\n-\t  $(STAGEautofeedback_CONFIGURE_FLAGS)\n-@endif target-libmpx-bootstrap\n-\n-\n-\n-\n-\n-.PHONY: all-target-libmpx maybe-all-target-libmpx\n-maybe-all-target-libmpx:\n-@if gcc-bootstrap\n-all-target-libmpx: stage_current\n-@endif gcc-bootstrap\n-@if target-libmpx\n-TARGET-target-libmpx=all\n-maybe-all-target-libmpx: all-target-libmpx\n-all-target-libmpx: configure-target-libmpx\n-\t@r=`${PWD_COMMAND}`; export r; \\\n-\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\t$(NORMAL_TARGET_EXPORTS)  \\\n-\t(cd $(TARGET_SUBDIR)/libmpx && \\\n-\t  $(MAKE) $(BASE_FLAGS_TO_PASS) $(EXTRA_TARGET_FLAGS)   \\\n-\t\t$(TARGET-target-libmpx))\n-@endif target-libmpx\n-\n-\n-\n-.PHONY: all-stage1-target-libmpx maybe-all-stage1-target-libmpx\n-.PHONY: clean-stage1-target-libmpx maybe-clean-stage1-target-libmpx\n-maybe-all-stage1-target-libmpx:\n-maybe-clean-stage1-target-libmpx:\n-@if target-libmpx-bootstrap\n-maybe-all-stage1-target-libmpx: all-stage1-target-libmpx\n-all-stage1: all-stage1-target-libmpx\n-TARGET-stage1-target-libmpx = $(TARGET-target-libmpx)\n-all-stage1-target-libmpx: configure-stage1-target-libmpx\n-\t@[ $(current_stage) = stage1 ] || $(MAKE) stage1-start\n-\t@r=`${PWD_COMMAND}`; export r; \\\n-\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\tTFLAGS=\"$(STAGE1_TFLAGS)\"; \\\n-\t$(NORMAL_TARGET_EXPORTS)  \\\n-\tcd $(TARGET_SUBDIR)/libmpx && \\\n-\t \\\n-\t$(MAKE) $(BASE_FLAGS_TO_PASS) \\\n-\t\tCFLAGS=\"$(CFLAGS_FOR_TARGET)\" \\\n-\t\tCXXFLAGS=\"$(CXXFLAGS_FOR_TARGET)\" \\\n-\t\tLIBCFLAGS=\"$(LIBCFLAGS_FOR_TARGET)\" \\\n-\t\tCFLAGS_FOR_TARGET=\"$(CFLAGS_FOR_TARGET)\" \\\n-\t\tCXXFLAGS_FOR_TARGET=\"$(CXXFLAGS_FOR_TARGET)\" \\\n-\t\tLIBCFLAGS_FOR_TARGET=\"$(LIBCFLAGS_FOR_TARGET)\" \\\n-\t\t$(EXTRA_TARGET_FLAGS)  \\\n-\t\t  \\\n-\t\tTFLAGS=\"$(STAGE1_TFLAGS)\"  \\\n-\t\t$(TARGET-stage1-target-libmpx)\n-\n-maybe-clean-stage1-target-libmpx: clean-stage1-target-libmpx\n-clean-stage1: clean-stage1-target-libmpx\n-clean-stage1-target-libmpx:\n-\t@if [ $(current_stage) = stage1 ]; then \\\n-\t  [ -f $(TARGET_SUBDIR)/libmpx/Makefile ] || exit 0; \\\n-\telse \\\n-\t  [ -f $(TARGET_SUBDIR)/stage1-libmpx/Makefile ] || exit 0; \\\n-\t  $(MAKE) stage1-start; \\\n-\tfi; \\\n-\tcd $(TARGET_SUBDIR)/libmpx && \\\n-\t$(MAKE) $(EXTRA_TARGET_FLAGS)  \\\n-\t  clean\n-@endif target-libmpx-bootstrap\n-\n-\n-.PHONY: all-stage2-target-libmpx maybe-all-stage2-target-libmpx\n-.PHONY: clean-stage2-target-libmpx maybe-clean-stage2-target-libmpx\n-maybe-all-stage2-target-libmpx:\n-maybe-clean-stage2-target-libmpx:\n-@if target-libmpx-bootstrap\n-maybe-all-stage2-target-libmpx: all-stage2-target-libmpx\n-all-stage2: all-stage2-target-libmpx\n-TARGET-stage2-target-libmpx = $(TARGET-target-libmpx)\n-all-stage2-target-libmpx: configure-stage2-target-libmpx\n-\t@[ $(current_stage) = stage2 ] || $(MAKE) stage2-start\n-\t@r=`${PWD_COMMAND}`; export r; \\\n-\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\tTFLAGS=\"$(STAGE2_TFLAGS)\"; \\\n-\t$(NORMAL_TARGET_EXPORTS) \\\n-\t  \\\n-\tcd $(TARGET_SUBDIR)/libmpx && \\\n-\t \\\n-\t$(MAKE) $(BASE_FLAGS_TO_PASS) \\\n-\t\tCFLAGS=\"$(CFLAGS_FOR_TARGET)\" \\\n-\t\tCXXFLAGS=\"$(CXXFLAGS_FOR_TARGET)\" \\\n-\t\tLIBCFLAGS=\"$(LIBCFLAGS_FOR_TARGET)\" \\\n-\t\tCFLAGS_FOR_TARGET=\"$(CFLAGS_FOR_TARGET)\" \\\n-\t\tCXXFLAGS_FOR_TARGET=\"$(CXXFLAGS_FOR_TARGET)\" \\\n-\t\tLIBCFLAGS_FOR_TARGET=\"$(LIBCFLAGS_FOR_TARGET)\" \\\n-\t\t$(EXTRA_TARGET_FLAGS)   \\\n-\t\tTFLAGS=\"$(STAGE2_TFLAGS)\"  \\\n-\t\t$(TARGET-stage2-target-libmpx)\n-\n-maybe-clean-stage2-target-libmpx: clean-stage2-target-libmpx\n-clean-stage2: clean-stage2-target-libmpx\n-clean-stage2-target-libmpx:\n-\t@if [ $(current_stage) = stage2 ]; then \\\n-\t  [ -f $(TARGET_SUBDIR)/libmpx/Makefile ] || exit 0; \\\n-\telse \\\n-\t  [ -f $(TARGET_SUBDIR)/stage2-libmpx/Makefile ] || exit 0; \\\n-\t  $(MAKE) stage2-start; \\\n-\tfi; \\\n-\tcd $(TARGET_SUBDIR)/libmpx && \\\n-\t$(MAKE) $(EXTRA_TARGET_FLAGS)   clean\n-@endif target-libmpx-bootstrap\n-\n-\n-.PHONY: all-stage3-target-libmpx maybe-all-stage3-target-libmpx\n-.PHONY: clean-stage3-target-libmpx maybe-clean-stage3-target-libmpx\n-maybe-all-stage3-target-libmpx:\n-maybe-clean-stage3-target-libmpx:\n-@if target-libmpx-bootstrap\n-maybe-all-stage3-target-libmpx: all-stage3-target-libmpx\n-all-stage3: all-stage3-target-libmpx\n-TARGET-stage3-target-libmpx = $(TARGET-target-libmpx)\n-all-stage3-target-libmpx: configure-stage3-target-libmpx\n-\t@[ $(current_stage) = stage3 ] || $(MAKE) stage3-start\n-\t@r=`${PWD_COMMAND}`; export r; \\\n-\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\tTFLAGS=\"$(STAGE3_TFLAGS)\"; \\\n-\t$(NORMAL_TARGET_EXPORTS) \\\n-\t  \\\n-\tcd $(TARGET_SUBDIR)/libmpx && \\\n-\t \\\n-\t$(MAKE) $(BASE_FLAGS_TO_PASS) \\\n-\t\tCFLAGS=\"$(CFLAGS_FOR_TARGET)\" \\\n-\t\tCXXFLAGS=\"$(CXXFLAGS_FOR_TARGET)\" \\\n-\t\tLIBCFLAGS=\"$(LIBCFLAGS_FOR_TARGET)\" \\\n-\t\tCFLAGS_FOR_TARGET=\"$(CFLAGS_FOR_TARGET)\" \\\n-\t\tCXXFLAGS_FOR_TARGET=\"$(CXXFLAGS_FOR_TARGET)\" \\\n-\t\tLIBCFLAGS_FOR_TARGET=\"$(LIBCFLAGS_FOR_TARGET)\" \\\n-\t\t$(EXTRA_TARGET_FLAGS)   \\\n-\t\tTFLAGS=\"$(STAGE3_TFLAGS)\"  \\\n-\t\t$(TARGET-stage3-target-libmpx)\n-\n-maybe-clean-stage3-target-libmpx: clean-stage3-target-libmpx\n-clean-stage3: clean-stage3-target-libmpx\n-clean-stage3-target-libmpx:\n-\t@if [ $(current_stage) = stage3 ]; then \\\n-\t  [ -f $(TARGET_SUBDIR)/libmpx/Makefile ] || exit 0; \\\n-\telse \\\n-\t  [ -f $(TARGET_SUBDIR)/stage3-libmpx/Makefile ] || exit 0; \\\n-\t  $(MAKE) stage3-start; \\\n-\tfi; \\\n-\tcd $(TARGET_SUBDIR)/libmpx && \\\n-\t$(MAKE) $(EXTRA_TARGET_FLAGS)   clean\n-@endif target-libmpx-bootstrap\n-\n-\n-.PHONY: all-stage4-target-libmpx maybe-all-stage4-target-libmpx\n-.PHONY: clean-stage4-target-libmpx maybe-clean-stage4-target-libmpx\n-maybe-all-stage4-target-libmpx:\n-maybe-clean-stage4-target-libmpx:\n-@if target-libmpx-bootstrap\n-maybe-all-stage4-target-libmpx: all-stage4-target-libmpx\n-all-stage4: all-stage4-target-libmpx\n-TARGET-stage4-target-libmpx = $(TARGET-target-libmpx)\n-all-stage4-target-libmpx: configure-stage4-target-libmpx\n-\t@[ $(current_stage) = stage4 ] || $(MAKE) stage4-start\n-\t@r=`${PWD_COMMAND}`; export r; \\\n-\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\tTFLAGS=\"$(STAGE4_TFLAGS)\"; \\\n-\t$(NORMAL_TARGET_EXPORTS) \\\n-\t  \\\n-\tcd $(TARGET_SUBDIR)/libmpx && \\\n-\t \\\n-\t$(MAKE) $(BASE_FLAGS_TO_PASS) \\\n-\t\tCFLAGS=\"$(CFLAGS_FOR_TARGET)\" \\\n-\t\tCXXFLAGS=\"$(CXXFLAGS_FOR_TARGET)\" \\\n-\t\tLIBCFLAGS=\"$(LIBCFLAGS_FOR_TARGET)\" \\\n-\t\tCFLAGS_FOR_TARGET=\"$(CFLAGS_FOR_TARGET)\" \\\n-\t\tCXXFLAGS_FOR_TARGET=\"$(CXXFLAGS_FOR_TARGET)\" \\\n-\t\tLIBCFLAGS_FOR_TARGET=\"$(LIBCFLAGS_FOR_TARGET)\" \\\n-\t\t$(EXTRA_TARGET_FLAGS)   \\\n-\t\tTFLAGS=\"$(STAGE4_TFLAGS)\"  \\\n-\t\t$(TARGET-stage4-target-libmpx)\n-\n-maybe-clean-stage4-target-libmpx: clean-stage4-target-libmpx\n-clean-stage4: clean-stage4-target-libmpx\n-clean-stage4-target-libmpx:\n-\t@if [ $(current_stage) = stage4 ]; then \\\n-\t  [ -f $(TARGET_SUBDIR)/libmpx/Makefile ] || exit 0; \\\n-\telse \\\n-\t  [ -f $(TARGET_SUBDIR)/stage4-libmpx/Makefile ] || exit 0; \\\n-\t  $(MAKE) stage4-start; \\\n-\tfi; \\\n-\tcd $(TARGET_SUBDIR)/libmpx && \\\n-\t$(MAKE) $(EXTRA_TARGET_FLAGS)   clean\n-@endif target-libmpx-bootstrap\n-\n-\n-.PHONY: all-stageprofile-target-libmpx maybe-all-stageprofile-target-libmpx\n-.PHONY: clean-stageprofile-target-libmpx maybe-clean-stageprofile-target-libmpx\n-maybe-all-stageprofile-target-libmpx:\n-maybe-clean-stageprofile-target-libmpx:\n-@if target-libmpx-bootstrap\n-maybe-all-stageprofile-target-libmpx: all-stageprofile-target-libmpx\n-all-stageprofile: all-stageprofile-target-libmpx\n-TARGET-stageprofile-target-libmpx = $(TARGET-target-libmpx)\n-all-stageprofile-target-libmpx: configure-stageprofile-target-libmpx\n-\t@[ $(current_stage) = stageprofile ] || $(MAKE) stageprofile-start\n-\t@r=`${PWD_COMMAND}`; export r; \\\n-\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\tTFLAGS=\"$(STAGEprofile_TFLAGS)\"; \\\n-\t$(NORMAL_TARGET_EXPORTS) \\\n-\t  \\\n-\tcd $(TARGET_SUBDIR)/libmpx && \\\n-\t \\\n-\t$(MAKE) $(BASE_FLAGS_TO_PASS) \\\n-\t\tCFLAGS=\"$(CFLAGS_FOR_TARGET)\" \\\n-\t\tCXXFLAGS=\"$(CXXFLAGS_FOR_TARGET)\" \\\n-\t\tLIBCFLAGS=\"$(LIBCFLAGS_FOR_TARGET)\" \\\n-\t\tCFLAGS_FOR_TARGET=\"$(CFLAGS_FOR_TARGET)\" \\\n-\t\tCXXFLAGS_FOR_TARGET=\"$(CXXFLAGS_FOR_TARGET)\" \\\n-\t\tLIBCFLAGS_FOR_TARGET=\"$(LIBCFLAGS_FOR_TARGET)\" \\\n-\t\t$(EXTRA_TARGET_FLAGS)   \\\n-\t\tTFLAGS=\"$(STAGEprofile_TFLAGS)\"  \\\n-\t\t$(TARGET-stageprofile-target-libmpx)\n-\n-maybe-clean-stageprofile-target-libmpx: clean-stageprofile-target-libmpx\n-clean-stageprofile: clean-stageprofile-target-libmpx\n-clean-stageprofile-target-libmpx:\n-\t@if [ $(current_stage) = stageprofile ]; then \\\n-\t  [ -f $(TARGET_SUBDIR)/libmpx/Makefile ] || exit 0; \\\n-\telse \\\n-\t  [ -f $(TARGET_SUBDIR)/stageprofile-libmpx/Makefile ] || exit 0; \\\n-\t  $(MAKE) stageprofile-start; \\\n-\tfi; \\\n-\tcd $(TARGET_SUBDIR)/libmpx && \\\n-\t$(MAKE) $(EXTRA_TARGET_FLAGS)   clean\n-@endif target-libmpx-bootstrap\n-\n-\n-.PHONY: all-stagetrain-target-libmpx maybe-all-stagetrain-target-libmpx\n-.PHONY: clean-stagetrain-target-libmpx maybe-clean-stagetrain-target-libmpx\n-maybe-all-stagetrain-target-libmpx:\n-maybe-clean-stagetrain-target-libmpx:\n-@if target-libmpx-bootstrap\n-maybe-all-stagetrain-target-libmpx: all-stagetrain-target-libmpx\n-all-stagetrain: all-stagetrain-target-libmpx\n-TARGET-stagetrain-target-libmpx = $(TARGET-target-libmpx)\n-all-stagetrain-target-libmpx: configure-stagetrain-target-libmpx\n-\t@[ $(current_stage) = stagetrain ] || $(MAKE) stagetrain-start\n-\t@r=`${PWD_COMMAND}`; export r; \\\n-\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\tTFLAGS=\"$(STAGEtrain_TFLAGS)\"; \\\n-\t$(NORMAL_TARGET_EXPORTS) \\\n-\t  \\\n-\tcd $(TARGET_SUBDIR)/libmpx && \\\n-\t \\\n-\t$(MAKE) $(BASE_FLAGS_TO_PASS) \\\n-\t\tCFLAGS=\"$(CFLAGS_FOR_TARGET)\" \\\n-\t\tCXXFLAGS=\"$(CXXFLAGS_FOR_TARGET)\" \\\n-\t\tLIBCFLAGS=\"$(LIBCFLAGS_FOR_TARGET)\" \\\n-\t\tCFLAGS_FOR_TARGET=\"$(CFLAGS_FOR_TARGET)\" \\\n-\t\tCXXFLAGS_FOR_TARGET=\"$(CXXFLAGS_FOR_TARGET)\" \\\n-\t\tLIBCFLAGS_FOR_TARGET=\"$(LIBCFLAGS_FOR_TARGET)\" \\\n-\t\t$(EXTRA_TARGET_FLAGS)   \\\n-\t\tTFLAGS=\"$(STAGEtrain_TFLAGS)\"  \\\n-\t\t$(TARGET-stagetrain-target-libmpx)\n-\n-maybe-clean-stagetrain-target-libmpx: clean-stagetrain-target-libmpx\n-clean-stagetrain: clean-stagetrain-target-libmpx\n-clean-stagetrain-target-libmpx:\n-\t@if [ $(current_stage) = stagetrain ]; then \\\n-\t  [ -f $(TARGET_SUBDIR)/libmpx/Makefile ] || exit 0; \\\n-\telse \\\n-\t  [ -f $(TARGET_SUBDIR)/stagetrain-libmpx/Makefile ] || exit 0; \\\n-\t  $(MAKE) stagetrain-start; \\\n-\tfi; \\\n-\tcd $(TARGET_SUBDIR)/libmpx && \\\n-\t$(MAKE) $(EXTRA_TARGET_FLAGS)   clean\n-@endif target-libmpx-bootstrap\n-\n-\n-.PHONY: all-stagefeedback-target-libmpx maybe-all-stagefeedback-target-libmpx\n-.PHONY: clean-stagefeedback-target-libmpx maybe-clean-stagefeedback-target-libmpx\n-maybe-all-stagefeedback-target-libmpx:\n-maybe-clean-stagefeedback-target-libmpx:\n-@if target-libmpx-bootstrap\n-maybe-all-stagefeedback-target-libmpx: all-stagefeedback-target-libmpx\n-all-stagefeedback: all-stagefeedback-target-libmpx\n-TARGET-stagefeedback-target-libmpx = $(TARGET-target-libmpx)\n-all-stagefeedback-target-libmpx: configure-stagefeedback-target-libmpx\n-\t@[ $(current_stage) = stagefeedback ] || $(MAKE) stagefeedback-start\n-\t@r=`${PWD_COMMAND}`; export r; \\\n-\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\tTFLAGS=\"$(STAGEfeedback_TFLAGS)\"; \\\n-\t$(NORMAL_TARGET_EXPORTS) \\\n-\t  \\\n-\tcd $(TARGET_SUBDIR)/libmpx && \\\n-\t \\\n-\t$(MAKE) $(BASE_FLAGS_TO_PASS) \\\n-\t\tCFLAGS=\"$(CFLAGS_FOR_TARGET)\" \\\n-\t\tCXXFLAGS=\"$(CXXFLAGS_FOR_TARGET)\" \\\n-\t\tLIBCFLAGS=\"$(LIBCFLAGS_FOR_TARGET)\" \\\n-\t\tCFLAGS_FOR_TARGET=\"$(CFLAGS_FOR_TARGET)\" \\\n-\t\tCXXFLAGS_FOR_TARGET=\"$(CXXFLAGS_FOR_TARGET)\" \\\n-\t\tLIBCFLAGS_FOR_TARGET=\"$(LIBCFLAGS_FOR_TARGET)\" \\\n-\t\t$(EXTRA_TARGET_FLAGS)   \\\n-\t\tTFLAGS=\"$(STAGEfeedback_TFLAGS)\"  \\\n-\t\t$(TARGET-stagefeedback-target-libmpx)\n-\n-maybe-clean-stagefeedback-target-libmpx: clean-stagefeedback-target-libmpx\n-clean-stagefeedback: clean-stagefeedback-target-libmpx\n-clean-stagefeedback-target-libmpx:\n-\t@if [ $(current_stage) = stagefeedback ]; then \\\n-\t  [ -f $(TARGET_SUBDIR)/libmpx/Makefile ] || exit 0; \\\n-\telse \\\n-\t  [ -f $(TARGET_SUBDIR)/stagefeedback-libmpx/Makefile ] || exit 0; \\\n-\t  $(MAKE) stagefeedback-start; \\\n-\tfi; \\\n-\tcd $(TARGET_SUBDIR)/libmpx && \\\n-\t$(MAKE) $(EXTRA_TARGET_FLAGS)   clean\n-@endif target-libmpx-bootstrap\n-\n-\n-.PHONY: all-stageautoprofile-target-libmpx maybe-all-stageautoprofile-target-libmpx\n-.PHONY: clean-stageautoprofile-target-libmpx maybe-clean-stageautoprofile-target-libmpx\n-maybe-all-stageautoprofile-target-libmpx:\n-maybe-clean-stageautoprofile-target-libmpx:\n-@if target-libmpx-bootstrap\n-maybe-all-stageautoprofile-target-libmpx: all-stageautoprofile-target-libmpx\n-all-stageautoprofile: all-stageautoprofile-target-libmpx\n-TARGET-stageautoprofile-target-libmpx = $(TARGET-target-libmpx)\n-all-stageautoprofile-target-libmpx: configure-stageautoprofile-target-libmpx\n-\t@[ $(current_stage) = stageautoprofile ] || $(MAKE) stageautoprofile-start\n-\t@r=`${PWD_COMMAND}`; export r; \\\n-\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\tTFLAGS=\"$(STAGEautoprofile_TFLAGS)\"; \\\n-\t$(NORMAL_TARGET_EXPORTS) \\\n-\t  \\\n-\tcd $(TARGET_SUBDIR)/libmpx && \\\n-\t$$s/gcc/config/i386/$(AUTO_PROFILE) \\\n-\t$(MAKE) $(BASE_FLAGS_TO_PASS) \\\n-\t\tCFLAGS=\"$(CFLAGS_FOR_TARGET)\" \\\n-\t\tCXXFLAGS=\"$(CXXFLAGS_FOR_TARGET)\" \\\n-\t\tLIBCFLAGS=\"$(LIBCFLAGS_FOR_TARGET)\" \\\n-\t\tCFLAGS_FOR_TARGET=\"$(CFLAGS_FOR_TARGET)\" \\\n-\t\tCXXFLAGS_FOR_TARGET=\"$(CXXFLAGS_FOR_TARGET)\" \\\n-\t\tLIBCFLAGS_FOR_TARGET=\"$(LIBCFLAGS_FOR_TARGET)\" \\\n-\t\t$(EXTRA_TARGET_FLAGS)   \\\n-\t\tTFLAGS=\"$(STAGEautoprofile_TFLAGS)\"  \\\n-\t\t$(TARGET-stageautoprofile-target-libmpx)\n-\n-maybe-clean-stageautoprofile-target-libmpx: clean-stageautoprofile-target-libmpx\n-clean-stageautoprofile: clean-stageautoprofile-target-libmpx\n-clean-stageautoprofile-target-libmpx:\n-\t@if [ $(current_stage) = stageautoprofile ]; then \\\n-\t  [ -f $(TARGET_SUBDIR)/libmpx/Makefile ] || exit 0; \\\n-\telse \\\n-\t  [ -f $(TARGET_SUBDIR)/stageautoprofile-libmpx/Makefile ] || exit 0; \\\n-\t  $(MAKE) stageautoprofile-start; \\\n-\tfi; \\\n-\tcd $(TARGET_SUBDIR)/libmpx && \\\n-\t$(MAKE) $(EXTRA_TARGET_FLAGS)   clean\n-@endif target-libmpx-bootstrap\n-\n-\n-.PHONY: all-stageautofeedback-target-libmpx maybe-all-stageautofeedback-target-libmpx\n-.PHONY: clean-stageautofeedback-target-libmpx maybe-clean-stageautofeedback-target-libmpx\n-maybe-all-stageautofeedback-target-libmpx:\n-maybe-clean-stageautofeedback-target-libmpx:\n-@if target-libmpx-bootstrap\n-maybe-all-stageautofeedback-target-libmpx: all-stageautofeedback-target-libmpx\n-all-stageautofeedback: all-stageautofeedback-target-libmpx\n-TARGET-stageautofeedback-target-libmpx = $(TARGET-target-libmpx)\n-all-stageautofeedback-target-libmpx: configure-stageautofeedback-target-libmpx\n-\t@[ $(current_stage) = stageautofeedback ] || $(MAKE) stageautofeedback-start\n-\t@r=`${PWD_COMMAND}`; export r; \\\n-\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\tTFLAGS=\"$(STAGEautofeedback_TFLAGS)\"; \\\n-\t$(NORMAL_TARGET_EXPORTS) \\\n-\t  \\\n-\tcd $(TARGET_SUBDIR)/libmpx && \\\n-\t \\\n-\t$(MAKE) $(BASE_FLAGS_TO_PASS) \\\n-\t\tCFLAGS=\"$(CFLAGS_FOR_TARGET)\" \\\n-\t\tCXXFLAGS=\"$(CXXFLAGS_FOR_TARGET)\" \\\n-\t\tLIBCFLAGS=\"$(LIBCFLAGS_FOR_TARGET)\" \\\n-\t\tCFLAGS_FOR_TARGET=\"$(CFLAGS_FOR_TARGET)\" \\\n-\t\tCXXFLAGS_FOR_TARGET=\"$(CXXFLAGS_FOR_TARGET)\" \\\n-\t\tLIBCFLAGS_FOR_TARGET=\"$(LIBCFLAGS_FOR_TARGET)\" \\\n-\t\t$(EXTRA_TARGET_FLAGS)   \\\n-\t\tTFLAGS=\"$(STAGEautofeedback_TFLAGS)\" PERF_DATA=perf.data \\\n-\t\t$(TARGET-stageautofeedback-target-libmpx)\n-\n-maybe-clean-stageautofeedback-target-libmpx: clean-stageautofeedback-target-libmpx\n-clean-stageautofeedback: clean-stageautofeedback-target-libmpx\n-clean-stageautofeedback-target-libmpx:\n-\t@if [ $(current_stage) = stageautofeedback ]; then \\\n-\t  [ -f $(TARGET_SUBDIR)/libmpx/Makefile ] || exit 0; \\\n-\telse \\\n-\t  [ -f $(TARGET_SUBDIR)/stageautofeedback-libmpx/Makefile ] || exit 0; \\\n-\t  $(MAKE) stageautofeedback-start; \\\n-\tfi; \\\n-\tcd $(TARGET_SUBDIR)/libmpx && \\\n-\t$(MAKE) $(EXTRA_TARGET_FLAGS)   clean\n-@endif target-libmpx-bootstrap\n-\n-\n-\n-\n-\n-\n-.PHONY: check-target-libmpx maybe-check-target-libmpx\n-maybe-check-target-libmpx:\n-@if target-libmpx\n-maybe-check-target-libmpx: check-target-libmpx\n-\n-check-target-libmpx:\n-\t@: $(MAKE); $(unstage)\n-\t@r=`${PWD_COMMAND}`; export r; \\\n-\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\t$(NORMAL_TARGET_EXPORTS) \\\n-\t(cd $(TARGET_SUBDIR)/libmpx && \\\n-\t  $(MAKE) $(TARGET_FLAGS_TO_PASS)   check)\n-\n-@endif target-libmpx\n-\n-.PHONY: install-target-libmpx maybe-install-target-libmpx\n-maybe-install-target-libmpx:\n-@if target-libmpx\n-maybe-install-target-libmpx: install-target-libmpx\n-\n-install-target-libmpx: installdirs\n-\t@: $(MAKE); $(unstage)\n-\t@r=`${PWD_COMMAND}`; export r; \\\n-\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\t$(NORMAL_TARGET_EXPORTS) \\\n-\t(cd $(TARGET_SUBDIR)/libmpx && \\\n-\t  $(MAKE) $(TARGET_FLAGS_TO_PASS)  install)\n-\n-@endif target-libmpx\n-\n-.PHONY: install-strip-target-libmpx maybe-install-strip-target-libmpx\n-maybe-install-strip-target-libmpx:\n-@if target-libmpx\n-maybe-install-strip-target-libmpx: install-strip-target-libmpx\n-\n-install-strip-target-libmpx: installdirs\n-\t@: $(MAKE); $(unstage)\n-\t@r=`${PWD_COMMAND}`; export r; \\\n-\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\t$(NORMAL_TARGET_EXPORTS) \\\n-\t(cd $(TARGET_SUBDIR)/libmpx && \\\n-\t  $(MAKE) $(TARGET_FLAGS_TO_PASS)  install-strip)\n-\n-@endif target-libmpx\n-\n-# Other targets (info, dvi, pdf, etc.)\n-\n-.PHONY: maybe-info-target-libmpx info-target-libmpx\n-maybe-info-target-libmpx:\n-@if target-libmpx\n-maybe-info-target-libmpx: info-target-libmpx\n-\n-info-target-libmpx: \\\n-    configure-target-libmpx \n-\t@: $(MAKE); $(unstage)\n-\t@[ -f $(TARGET_SUBDIR)/libmpx/Makefile ] || exit 0; \\\n-\tr=`${PWD_COMMAND}`; export r; \\\n-\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\t$(NORMAL_TARGET_EXPORTS) \\\n-\techo \"Doing info in $(TARGET_SUBDIR)/libmpx\"; \\\n-\tfor flag in $(EXTRA_TARGET_FLAGS); do \\\n-\t  eval `echo \"$$flag\" | sed -e \"s|^\\([^=]*\\)=\\(.*\\)|\\1='\\2'; export \\1|\"`; \\\n-\tdone; \\\n-\t(cd $(TARGET_SUBDIR)/libmpx && \\\n-\t  $(MAKE) $(BASE_FLAGS_TO_PASS) \"AR=$${AR}\" \"AS=$${AS}\" \\\n-\t          \"CC=$${CC}\" \"CXX=$${CXX}\" \"LD=$${LD}\" \"NM=$${NM}\" \\\n-\t          \"RANLIB=$${RANLIB}\" \\\n-\t          \"DLLTOOL=$${DLLTOOL}\" \"WINDRES=$${WINDRES}\" \"WINDMC=$${WINDMC}\" \\\n-\t           info) \\\n-\t  || exit 1\n-\n-@endif target-libmpx\n-\n-.PHONY: maybe-dvi-target-libmpx dvi-target-libmpx\n-maybe-dvi-target-libmpx:\n-@if target-libmpx\n-maybe-dvi-target-libmpx: dvi-target-libmpx\n-\n-dvi-target-libmpx: \\\n-    configure-target-libmpx \n-\t@: $(MAKE); $(unstage)\n-\t@[ -f $(TARGET_SUBDIR)/libmpx/Makefile ] || exit 0; \\\n-\tr=`${PWD_COMMAND}`; export r; \\\n-\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\t$(NORMAL_TARGET_EXPORTS) \\\n-\techo \"Doing dvi in $(TARGET_SUBDIR)/libmpx\"; \\\n-\tfor flag in $(EXTRA_TARGET_FLAGS); do \\\n-\t  eval `echo \"$$flag\" | sed -e \"s|^\\([^=]*\\)=\\(.*\\)|\\1='\\2'; export \\1|\"`; \\\n-\tdone; \\\n-\t(cd $(TARGET_SUBDIR)/libmpx && \\\n-\t  $(MAKE) $(BASE_FLAGS_TO_PASS) \"AR=$${AR}\" \"AS=$${AS}\" \\\n-\t          \"CC=$${CC}\" \"CXX=$${CXX}\" \"LD=$${LD}\" \"NM=$${NM}\" \\\n-\t          \"RANLIB=$${RANLIB}\" \\\n-\t          \"DLLTOOL=$${DLLTOOL}\" \"WINDRES=$${WINDRES}\" \"WINDMC=$${WINDMC}\" \\\n-\t           dvi) \\\n-\t  || exit 1\n-\n-@endif target-libmpx\n-\n-.PHONY: maybe-pdf-target-libmpx pdf-target-libmpx\n-maybe-pdf-target-libmpx:\n-@if target-libmpx\n-maybe-pdf-target-libmpx: pdf-target-libmpx\n-\n-pdf-target-libmpx: \\\n-    configure-target-libmpx \n-\t@: $(MAKE); $(unstage)\n-\t@[ -f $(TARGET_SUBDIR)/libmpx/Makefile ] || exit 0; \\\n-\tr=`${PWD_COMMAND}`; export r; \\\n-\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\t$(NORMAL_TARGET_EXPORTS) \\\n-\techo \"Doing pdf in $(TARGET_SUBDIR)/libmpx\"; \\\n-\tfor flag in $(EXTRA_TARGET_FLAGS); do \\\n-\t  eval `echo \"$$flag\" | sed -e \"s|^\\([^=]*\\)=\\(.*\\)|\\1='\\2'; export \\1|\"`; \\\n-\tdone; \\\n-\t(cd $(TARGET_SUBDIR)/libmpx && \\\n-\t  $(MAKE) $(BASE_FLAGS_TO_PASS) \"AR=$${AR}\" \"AS=$${AS}\" \\\n-\t          \"CC=$${CC}\" \"CXX=$${CXX}\" \"LD=$${LD}\" \"NM=$${NM}\" \\\n-\t          \"RANLIB=$${RANLIB}\" \\\n-\t          \"DLLTOOL=$${DLLTOOL}\" \"WINDRES=$${WINDRES}\" \"WINDMC=$${WINDMC}\" \\\n-\t           pdf) \\\n-\t  || exit 1\n-\n-@endif target-libmpx\n-\n-.PHONY: maybe-html-target-libmpx html-target-libmpx\n-maybe-html-target-libmpx:\n-@if target-libmpx\n-maybe-html-target-libmpx: html-target-libmpx\n-\n-html-target-libmpx: \\\n-    configure-target-libmpx \n-\t@: $(MAKE); $(unstage)\n-\t@[ -f $(TARGET_SUBDIR)/libmpx/Makefile ] || exit 0; \\\n-\tr=`${PWD_COMMAND}`; export r; \\\n-\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\t$(NORMAL_TARGET_EXPORTS) \\\n-\techo \"Doing html in $(TARGET_SUBDIR)/libmpx\"; \\\n-\tfor flag in $(EXTRA_TARGET_FLAGS); do \\\n-\t  eval `echo \"$$flag\" | sed -e \"s|^\\([^=]*\\)=\\(.*\\)|\\1='\\2'; export \\1|\"`; \\\n-\tdone; \\\n-\t(cd $(TARGET_SUBDIR)/libmpx && \\\n-\t  $(MAKE) $(BASE_FLAGS_TO_PASS) \"AR=$${AR}\" \"AS=$${AS}\" \\\n-\t          \"CC=$${CC}\" \"CXX=$${CXX}\" \"LD=$${LD}\" \"NM=$${NM}\" \\\n-\t          \"RANLIB=$${RANLIB}\" \\\n-\t          \"DLLTOOL=$${DLLTOOL}\" \"WINDRES=$${WINDRES}\" \"WINDMC=$${WINDMC}\" \\\n-\t           html) \\\n-\t  || exit 1\n-\n-@endif target-libmpx\n-\n-.PHONY: maybe-TAGS-target-libmpx TAGS-target-libmpx\n-maybe-TAGS-target-libmpx:\n-@if target-libmpx\n-maybe-TAGS-target-libmpx: TAGS-target-libmpx\n-\n-TAGS-target-libmpx: \\\n-    configure-target-libmpx \n-\t@: $(MAKE); $(unstage)\n-\t@[ -f $(TARGET_SUBDIR)/libmpx/Makefile ] || exit 0; \\\n-\tr=`${PWD_COMMAND}`; export r; \\\n-\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\t$(NORMAL_TARGET_EXPORTS) \\\n-\techo \"Doing TAGS in $(TARGET_SUBDIR)/libmpx\"; \\\n-\tfor flag in $(EXTRA_TARGET_FLAGS); do \\\n-\t  eval `echo \"$$flag\" | sed -e \"s|^\\([^=]*\\)=\\(.*\\)|\\1='\\2'; export \\1|\"`; \\\n-\tdone; \\\n-\t(cd $(TARGET_SUBDIR)/libmpx && \\\n-\t  $(MAKE) $(BASE_FLAGS_TO_PASS) \"AR=$${AR}\" \"AS=$${AS}\" \\\n-\t          \"CC=$${CC}\" \"CXX=$${CXX}\" \"LD=$${LD}\" \"NM=$${NM}\" \\\n-\t          \"RANLIB=$${RANLIB}\" \\\n-\t          \"DLLTOOL=$${DLLTOOL}\" \"WINDRES=$${WINDRES}\" \"WINDMC=$${WINDMC}\" \\\n-\t           TAGS) \\\n-\t  || exit 1\n-\n-@endif target-libmpx\n-\n-.PHONY: maybe-install-info-target-libmpx install-info-target-libmpx\n-maybe-install-info-target-libmpx:\n-@if target-libmpx\n-maybe-install-info-target-libmpx: install-info-target-libmpx\n-\n-install-info-target-libmpx: \\\n-    configure-target-libmpx \\\n-    info-target-libmpx \n-\t@: $(MAKE); $(unstage)\n-\t@[ -f $(TARGET_SUBDIR)/libmpx/Makefile ] || exit 0; \\\n-\tr=`${PWD_COMMAND}`; export r; \\\n-\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\t$(NORMAL_TARGET_EXPORTS) \\\n-\techo \"Doing install-info in $(TARGET_SUBDIR)/libmpx\"; \\\n-\tfor flag in $(EXTRA_TARGET_FLAGS); do \\\n-\t  eval `echo \"$$flag\" | sed -e \"s|^\\([^=]*\\)=\\(.*\\)|\\1='\\2'; export \\1|\"`; \\\n-\tdone; \\\n-\t(cd $(TARGET_SUBDIR)/libmpx && \\\n-\t  $(MAKE) $(BASE_FLAGS_TO_PASS) \"AR=$${AR}\" \"AS=$${AS}\" \\\n-\t          \"CC=$${CC}\" \"CXX=$${CXX}\" \"LD=$${LD}\" \"NM=$${NM}\" \\\n-\t          \"RANLIB=$${RANLIB}\" \\\n-\t          \"DLLTOOL=$${DLLTOOL}\" \"WINDRES=$${WINDRES}\" \"WINDMC=$${WINDMC}\" \\\n-\t           install-info) \\\n-\t  || exit 1\n-\n-@endif target-libmpx\n-\n-.PHONY: maybe-install-pdf-target-libmpx install-pdf-target-libmpx\n-maybe-install-pdf-target-libmpx:\n-@if target-libmpx\n-maybe-install-pdf-target-libmpx: install-pdf-target-libmpx\n-\n-install-pdf-target-libmpx: \\\n-    configure-target-libmpx \\\n-    pdf-target-libmpx \n-\t@: $(MAKE); $(unstage)\n-\t@[ -f $(TARGET_SUBDIR)/libmpx/Makefile ] || exit 0; \\\n-\tr=`${PWD_COMMAND}`; export r; \\\n-\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\t$(NORMAL_TARGET_EXPORTS) \\\n-\techo \"Doing install-pdf in $(TARGET_SUBDIR)/libmpx\"; \\\n-\tfor flag in $(EXTRA_TARGET_FLAGS); do \\\n-\t  eval `echo \"$$flag\" | sed -e \"s|^\\([^=]*\\)=\\(.*\\)|\\1='\\2'; export \\1|\"`; \\\n-\tdone; \\\n-\t(cd $(TARGET_SUBDIR)/libmpx && \\\n-\t  $(MAKE) $(BASE_FLAGS_TO_PASS) \"AR=$${AR}\" \"AS=$${AS}\" \\\n-\t          \"CC=$${CC}\" \"CXX=$${CXX}\" \"LD=$${LD}\" \"NM=$${NM}\" \\\n-\t          \"RANLIB=$${RANLIB}\" \\\n-\t          \"DLLTOOL=$${DLLTOOL}\" \"WINDRES=$${WINDRES}\" \"WINDMC=$${WINDMC}\" \\\n-\t           install-pdf) \\\n-\t  || exit 1\n-\n-@endif target-libmpx\n-\n-.PHONY: maybe-install-html-target-libmpx install-html-target-libmpx\n-maybe-install-html-target-libmpx:\n-@if target-libmpx\n-maybe-install-html-target-libmpx: install-html-target-libmpx\n-\n-install-html-target-libmpx: \\\n-    configure-target-libmpx \\\n-    html-target-libmpx \n-\t@: $(MAKE); $(unstage)\n-\t@[ -f $(TARGET_SUBDIR)/libmpx/Makefile ] || exit 0; \\\n-\tr=`${PWD_COMMAND}`; export r; \\\n-\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\t$(NORMAL_TARGET_EXPORTS) \\\n-\techo \"Doing install-html in $(TARGET_SUBDIR)/libmpx\"; \\\n-\tfor flag in $(EXTRA_TARGET_FLAGS); do \\\n-\t  eval `echo \"$$flag\" | sed -e \"s|^\\([^=]*\\)=\\(.*\\)|\\1='\\2'; export \\1|\"`; \\\n-\tdone; \\\n-\t(cd $(TARGET_SUBDIR)/libmpx && \\\n-\t  $(MAKE) $(BASE_FLAGS_TO_PASS) \"AR=$${AR}\" \"AS=$${AS}\" \\\n-\t          \"CC=$${CC}\" \"CXX=$${CXX}\" \"LD=$${LD}\" \"NM=$${NM}\" \\\n-\t          \"RANLIB=$${RANLIB}\" \\\n-\t          \"DLLTOOL=$${DLLTOOL}\" \"WINDRES=$${WINDRES}\" \"WINDMC=$${WINDMC}\" \\\n-\t           install-html) \\\n-\t  || exit 1\n-\n-@endif target-libmpx\n-\n-.PHONY: maybe-installcheck-target-libmpx installcheck-target-libmpx\n-maybe-installcheck-target-libmpx:\n-@if target-libmpx\n-maybe-installcheck-target-libmpx: installcheck-target-libmpx\n-\n-installcheck-target-libmpx: \\\n-    configure-target-libmpx \n-\t@: $(MAKE); $(unstage)\n-\t@[ -f $(TARGET_SUBDIR)/libmpx/Makefile ] || exit 0; \\\n-\tr=`${PWD_COMMAND}`; export r; \\\n-\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\t$(NORMAL_TARGET_EXPORTS) \\\n-\techo \"Doing installcheck in $(TARGET_SUBDIR)/libmpx\"; \\\n-\tfor flag in $(EXTRA_TARGET_FLAGS); do \\\n-\t  eval `echo \"$$flag\" | sed -e \"s|^\\([^=]*\\)=\\(.*\\)|\\1='\\2'; export \\1|\"`; \\\n-\tdone; \\\n-\t(cd $(TARGET_SUBDIR)/libmpx && \\\n-\t  $(MAKE) $(BASE_FLAGS_TO_PASS) \"AR=$${AR}\" \"AS=$${AS}\" \\\n-\t          \"CC=$${CC}\" \"CXX=$${CXX}\" \"LD=$${LD}\" \"NM=$${NM}\" \\\n-\t          \"RANLIB=$${RANLIB}\" \\\n-\t          \"DLLTOOL=$${DLLTOOL}\" \"WINDRES=$${WINDRES}\" \"WINDMC=$${WINDMC}\" \\\n-\t           installcheck) \\\n-\t  || exit 1\n-\n-@endif target-libmpx\n-\n-.PHONY: maybe-mostlyclean-target-libmpx mostlyclean-target-libmpx\n-maybe-mostlyclean-target-libmpx:\n-@if target-libmpx\n-maybe-mostlyclean-target-libmpx: mostlyclean-target-libmpx\n-\n-mostlyclean-target-libmpx: \n-\t@: $(MAKE); $(unstage)\n-\t@[ -f $(TARGET_SUBDIR)/libmpx/Makefile ] || exit 0; \\\n-\tr=`${PWD_COMMAND}`; export r; \\\n-\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\t$(NORMAL_TARGET_EXPORTS) \\\n-\techo \"Doing mostlyclean in $(TARGET_SUBDIR)/libmpx\"; \\\n-\tfor flag in $(EXTRA_TARGET_FLAGS); do \\\n-\t  eval `echo \"$$flag\" | sed -e \"s|^\\([^=]*\\)=\\(.*\\)|\\1='\\2'; export \\1|\"`; \\\n-\tdone; \\\n-\t(cd $(TARGET_SUBDIR)/libmpx && \\\n-\t  $(MAKE) $(BASE_FLAGS_TO_PASS) \"AR=$${AR}\" \"AS=$${AS}\" \\\n-\t          \"CC=$${CC}\" \"CXX=$${CXX}\" \"LD=$${LD}\" \"NM=$${NM}\" \\\n-\t          \"RANLIB=$${RANLIB}\" \\\n-\t          \"DLLTOOL=$${DLLTOOL}\" \"WINDRES=$${WINDRES}\" \"WINDMC=$${WINDMC}\" \\\n-\t           mostlyclean) \\\n-\t  || exit 1\n-\n-@endif target-libmpx\n-\n-.PHONY: maybe-clean-target-libmpx clean-target-libmpx\n-maybe-clean-target-libmpx:\n-@if target-libmpx\n-maybe-clean-target-libmpx: clean-target-libmpx\n-\n-clean-target-libmpx: \n-\t@: $(MAKE); $(unstage)\n-\t@[ -f $(TARGET_SUBDIR)/libmpx/Makefile ] || exit 0; \\\n-\tr=`${PWD_COMMAND}`; export r; \\\n-\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\t$(NORMAL_TARGET_EXPORTS) \\\n-\techo \"Doing clean in $(TARGET_SUBDIR)/libmpx\"; \\\n-\tfor flag in $(EXTRA_TARGET_FLAGS); do \\\n-\t  eval `echo \"$$flag\" | sed -e \"s|^\\([^=]*\\)=\\(.*\\)|\\1='\\2'; export \\1|\"`; \\\n-\tdone; \\\n-\t(cd $(TARGET_SUBDIR)/libmpx && \\\n-\t  $(MAKE) $(BASE_FLAGS_TO_PASS) \"AR=$${AR}\" \"AS=$${AS}\" \\\n-\t          \"CC=$${CC}\" \"CXX=$${CXX}\" \"LD=$${LD}\" \"NM=$${NM}\" \\\n-\t          \"RANLIB=$${RANLIB}\" \\\n-\t          \"DLLTOOL=$${DLLTOOL}\" \"WINDRES=$${WINDRES}\" \"WINDMC=$${WINDMC}\" \\\n-\t           clean) \\\n-\t  || exit 1\n-\n-@endif target-libmpx\n-\n-.PHONY: maybe-distclean-target-libmpx distclean-target-libmpx\n-maybe-distclean-target-libmpx:\n-@if target-libmpx\n-maybe-distclean-target-libmpx: distclean-target-libmpx\n-\n-distclean-target-libmpx: \n-\t@: $(MAKE); $(unstage)\n-\t@[ -f $(TARGET_SUBDIR)/libmpx/Makefile ] || exit 0; \\\n-\tr=`${PWD_COMMAND}`; export r; \\\n-\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\t$(NORMAL_TARGET_EXPORTS) \\\n-\techo \"Doing distclean in $(TARGET_SUBDIR)/libmpx\"; \\\n-\tfor flag in $(EXTRA_TARGET_FLAGS); do \\\n-\t  eval `echo \"$$flag\" | sed -e \"s|^\\([^=]*\\)=\\(.*\\)|\\1='\\2'; export \\1|\"`; \\\n-\tdone; \\\n-\t(cd $(TARGET_SUBDIR)/libmpx && \\\n-\t  $(MAKE) $(BASE_FLAGS_TO_PASS) \"AR=$${AR}\" \"AS=$${AS}\" \\\n-\t          \"CC=$${CC}\" \"CXX=$${CXX}\" \"LD=$${LD}\" \"NM=$${NM}\" \\\n-\t          \"RANLIB=$${RANLIB}\" \\\n-\t          \"DLLTOOL=$${DLLTOOL}\" \"WINDRES=$${WINDRES}\" \"WINDMC=$${WINDMC}\" \\\n-\t           distclean) \\\n-\t  || exit 1\n-\n-@endif target-libmpx\n-\n-.PHONY: maybe-maintainer-clean-target-libmpx maintainer-clean-target-libmpx\n-maybe-maintainer-clean-target-libmpx:\n-@if target-libmpx\n-maybe-maintainer-clean-target-libmpx: maintainer-clean-target-libmpx\n-\n-maintainer-clean-target-libmpx: \n-\t@: $(MAKE); $(unstage)\n-\t@[ -f $(TARGET_SUBDIR)/libmpx/Makefile ] || exit 0; \\\n-\tr=`${PWD_COMMAND}`; export r; \\\n-\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\t$(NORMAL_TARGET_EXPORTS) \\\n-\techo \"Doing maintainer-clean in $(TARGET_SUBDIR)/libmpx\"; \\\n-\tfor flag in $(EXTRA_TARGET_FLAGS); do \\\n-\t  eval `echo \"$$flag\" | sed -e \"s|^\\([^=]*\\)=\\(.*\\)|\\1='\\2'; export \\1|\"`; \\\n-\tdone; \\\n-\t(cd $(TARGET_SUBDIR)/libmpx && \\\n-\t  $(MAKE) $(BASE_FLAGS_TO_PASS) \"AR=$${AR}\" \"AS=$${AS}\" \\\n-\t          \"CC=$${CC}\" \"CXX=$${CXX}\" \"LD=$${LD}\" \"NM=$${NM}\" \\\n-\t          \"RANLIB=$${RANLIB}\" \\\n-\t          \"DLLTOOL=$${DLLTOOL}\" \"WINDRES=$${WINDRES}\" \"WINDMC=$${WINDMC}\" \\\n-\t           maintainer-clean) \\\n-\t  || exit 1\n-\n-@endif target-libmpx\n-\n-\n-\n-\n-\n .PHONY: configure-target-libvtv maybe-configure-target-libvtv\n maybe-configure-target-libvtv:\n @if gcc-bootstrap\n@@ -56757,15 +55490,6 @@ configure-stagetrain-target-libsanitizer: maybe-all-stagetrain-gcc\n configure-stagefeedback-target-libsanitizer: maybe-all-stagefeedback-gcc\n configure-stageautoprofile-target-libsanitizer: maybe-all-stageautoprofile-gcc\n configure-stageautofeedback-target-libsanitizer: maybe-all-stageautofeedback-gcc\n-configure-stage1-target-libmpx: maybe-all-stage1-gcc\n-configure-stage2-target-libmpx: maybe-all-stage2-gcc\n-configure-stage3-target-libmpx: maybe-all-stage3-gcc\n-configure-stage4-target-libmpx: maybe-all-stage4-gcc\n-configure-stageprofile-target-libmpx: maybe-all-stageprofile-gcc\n-configure-stagetrain-target-libmpx: maybe-all-stagetrain-gcc\n-configure-stagefeedback-target-libmpx: maybe-all-stagefeedback-gcc\n-configure-stageautoprofile-target-libmpx: maybe-all-stageautoprofile-gcc\n-configure-stageautofeedback-target-libmpx: maybe-all-stageautofeedback-gcc\n configure-stage1-target-libvtv: maybe-all-stage1-gcc\n configure-stage2-target-libvtv: maybe-all-stage2-gcc\n configure-stage3-target-libvtv: maybe-all-stage3-gcc\n@@ -56816,7 +55540,6 @@ configure-target-libatomic: stage_last\n @if gcc-no-bootstrap\n configure-target-libstdc++-v3: maybe-all-gcc\n configure-target-libsanitizer: maybe-all-gcc\n-configure-target-libmpx: maybe-all-gcc\n configure-target-libvtv: maybe-all-gcc\n configure-target-liboffloadmic: maybe-all-gcc\n configure-target-libssp: maybe-all-gcc\n@@ -58034,15 +56757,6 @@ configure-stagetrain-target-libsanitizer: maybe-all-stagetrain-target-libgcc\n configure-stagefeedback-target-libsanitizer: maybe-all-stagefeedback-target-libgcc\n configure-stageautoprofile-target-libsanitizer: maybe-all-stageautoprofile-target-libgcc\n configure-stageautofeedback-target-libsanitizer: maybe-all-stageautofeedback-target-libgcc\n-configure-stage1-target-libmpx: maybe-all-stage1-target-libgcc\n-configure-stage2-target-libmpx: maybe-all-stage2-target-libgcc\n-configure-stage3-target-libmpx: maybe-all-stage3-target-libgcc\n-configure-stage4-target-libmpx: maybe-all-stage4-target-libgcc\n-configure-stageprofile-target-libmpx: maybe-all-stageprofile-target-libgcc\n-configure-stagetrain-target-libmpx: maybe-all-stagetrain-target-libgcc\n-configure-stagefeedback-target-libmpx: maybe-all-stagefeedback-target-libgcc\n-configure-stageautoprofile-target-libmpx: maybe-all-stageautoprofile-target-libgcc\n-configure-stageautofeedback-target-libmpx: maybe-all-stageautofeedback-target-libgcc\n configure-stage1-target-libvtv: maybe-all-stage1-target-libgcc\n configure-stage2-target-libvtv: maybe-all-stage2-target-libgcc\n configure-stage3-target-libvtv: maybe-all-stage3-target-libgcc\n@@ -58066,7 +56780,6 @@ configure-stageautofeedback-target-libgomp: maybe-all-stageautofeedback-target-l\n @if gcc-no-bootstrap\n configure-target-libstdc++-v3: maybe-all-target-libgcc\n configure-target-libsanitizer: maybe-all-target-libgcc\n-configure-target-libmpx: maybe-all-target-libgcc\n configure-target-libvtv: maybe-all-target-libgcc\n configure-target-liboffloadmic: maybe-all-target-libgcc\n configure-target-libssp: maybe-all-target-libgcc\n@@ -58094,8 +56807,6 @@ configure-target-libstdc++-v3: maybe-all-target-newlib maybe-all-target-libgloss\n \n configure-target-libsanitizer: maybe-all-target-newlib maybe-all-target-libgloss\n \n-configure-target-libmpx: maybe-all-target-newlib maybe-all-target-libgloss\n-\n configure-target-libvtv: maybe-all-target-newlib maybe-all-target-libgloss\n \n configure-target-liboffloadmic: maybe-all-target-newlib maybe-all-target-libgloss"}, {"sha": "8a7ee130aad8dfb89e9fe96b0c1704c506423acc", "filename": "config/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/config%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/config%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2FChangeLog?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -1,3 +1,7 @@\n+2018-06-08  Martin Liska  <mliska@suse.cz>\n+\n+\t* bootstrap-mpx.mk: Remove.\n+\n 2018-05-10  Martin Liska  <mliska@suse.cz>\n \n \tPR bootstrap/64914"}, {"sha": "acc2a2e7a9c353e7dd958c12c5572065f22bef7e", "filename": "config/bootstrap-mpx.mk", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/config%2Fbootstrap-mpx.mk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/config%2Fbootstrap-mpx.mk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fbootstrap-mpx.mk?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,9 +0,0 @@\n-# This option enables -fcheck-pointer-bounds -mmpx for stage2 and stage3.\n-\n-STAGE2_CFLAGS += -fcheck-pointer-bounds -mmpx -frandom-seed=1\n-STAGE3_CFLAGS += -fcheck-pointer-bounds -mmpx -frandom-seed=1\n-POSTSTAGE1_LDFLAGS += -fcheck-pointer-bounds -mmpx -frandom-seed=1 \\\n-\t\t      -static-libmpx -static-libmpxwrappers \\\n-\t\t      -B$$r/prev-$(TARGET_SUBDIR)/libmpx \\\n-\t\t      -B$$r/prev-$(TARGET_SUBDIR)/libmpx/mpxrt/.libs \\\n-\t\t      -B$$r/prev-$(TARGET_SUBDIR)/libmpx/mpxwrap/.libs"}, {"sha": "fe8e0f63410cfaa8d7055f0cbefa5af3c5c6194f", "filename": "configure", "status": "modified", "additions": 1, "deletions": 31, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/configure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/configure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -2758,7 +2758,6 @@ target_libraries=\"target-libgcc \\\n \t\ttarget-libstdc++-v3 \\\n \t\ttarget-libsanitizer \\\n \t\ttarget-libvtv \\\n-\t\ttarget-libmpx \\\n \t\ttarget-libssp \\\n \t\ttarget-libquadmath \\\n \t\ttarget-libgfortran \\\n@@ -3264,25 +3263,6 @@ $as_echo \"yes\" >&6; }\n fi\n \n \n-# Enable libmpx on supported systems by request.\n-if test -d ${srcdir}/libmpx; then\n-    if test x$enable_libmpx = x; then\n-       { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for libmpx support\" >&5\n-$as_echo_n \"checking for libmpx support... \" >&6; }\n-       if (srcdir=${srcdir}/libmpx; \\\n-               . ${srcdir}/configure.tgt; \\\n-               test \"$LIBMPX_SUPPORTED\" != \"yes\")\n-       then\n-           { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n-$as_echo \"no\" >&6; }\n-           noconfigdirs=\"$noconfigdirs target-libmpx\"\n-       else\n-           { $as_echo \"$as_me:${as_lineno-$LINENO}: result: yes\" >&5\n-$as_echo \"yes\" >&6; }\n-       fi\n-    fi\n-fi\n-\n # Disable libhsail-rt on unsupported systems.\n if test -d ${srcdir}/libhsail-rt; then\n     if test x$enable_libhsail_rt = x; then\n@@ -6656,7 +6636,7 @@ fi\n # Check whether --with-gcc-major-version-only was given.\n if test \"${with_gcc_major_version_only+set}\" = set; then :\n   withval=$with_gcc_major_version_only; if test x$with_gcc_major_version_only = xyes ; then\n-        get_gcc_base_ver=\"sed -e 's/^\\([0-9]*\\).*\\$\\$/\\1/'\"\n+        get_gcc_base_ver=\"sed -e 's/^\\([0-9]*\\).*/\\1/'\"\n       fi\n \n fi\n@@ -7110,16 +7090,6 @@ if echo \" ${target_configdirs} \" | grep \" libvtv \" > /dev/null 2>&1 &&\n   bootstrap_target_libs=${bootstrap_target_libs}target-libvtv,\n fi\n \n-# If we are building libmpx and $BUILD_CONFIG contains bootstrap-mpx,\n-# bootstrap it.\n-if echo \" ${target_configdirs} \" | grep \" libmpx \" > /dev/null 2>&1; then\n-  case \"$BUILD_CONFIG\" in\n-    *bootstrap-mpx* )\n-      bootstrap_target_libs=${bootstrap_target_libs}target-libmpx,\n-      ;;\n-  esac\n-fi\n-\n # Determine whether gdb needs tk/tcl or not.\n # Use 'maybe' since enable_gdbtk might be true even if tk isn't available\n # and in that case we want gdb to be built without tk.  Ugh!"}, {"sha": "28155a0e593841be057cba149faece8996fab2a5", "filename": "configure.ac", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/configure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/configure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure.ac?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -157,7 +157,6 @@ target_libraries=\"target-libgcc \\\n \t\ttarget-libstdc++-v3 \\\n \t\ttarget-libsanitizer \\\n \t\ttarget-libvtv \\\n-\t\ttarget-libmpx \\\n \t\ttarget-libssp \\\n \t\ttarget-libquadmath \\\n \t\ttarget-libgfortran \\\n@@ -601,22 +600,6 @@ if test -d ${srcdir}/libvtv; then\n fi\n \n \n-# Enable libmpx on supported systems by request.\n-if test -d ${srcdir}/libmpx; then\n-    if test x$enable_libmpx = x; then\n-       AC_MSG_CHECKING([for libmpx support])\n-       if (srcdir=${srcdir}/libmpx; \\\n-               . ${srcdir}/configure.tgt; \\\n-               test \"$LIBMPX_SUPPORTED\" != \"yes\")\n-       then\n-           AC_MSG_RESULT([no])\n-           noconfigdirs=\"$noconfigdirs target-libmpx\"\n-       else\n-           AC_MSG_RESULT([yes])\n-       fi\n-    fi\n-fi\n-\n # Disable libhsail-rt on unsupported systems.\n if test -d ${srcdir}/libhsail-rt; then\n     if test x$enable_libhsail_rt = x; then\n@@ -2696,16 +2679,6 @@ if echo \" ${target_configdirs} \" | grep \" libvtv \" > /dev/null 2>&1 &&\n   bootstrap_target_libs=${bootstrap_target_libs}target-libvtv,\n fi\n \n-# If we are building libmpx and $BUILD_CONFIG contains bootstrap-mpx,\n-# bootstrap it.\n-if echo \" ${target_configdirs} \" | grep \" libmpx \" > /dev/null 2>&1; then\n-  case \"$BUILD_CONFIG\" in\n-    *bootstrap-mpx* )\n-      bootstrap_target_libs=${bootstrap_target_libs}target-libmpx,\n-      ;;\n-  esac\n-fi\n-\n # Determine whether gdb needs tk/tcl or not.\n # Use 'maybe' since enable_gdbtk might be true even if tk isn't available\n # and in that case we want gdb to be built without tk.  Ugh!"}, {"sha": "7e7efe5f3f3d22ec8b6e676c4118b5d592bd9939", "filename": "gcc/ChangeLog", "status": "modified", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -1,3 +1,295 @@\n+2018-06-08  Martin Liska  <mliska@suse.cz>\n+\n+\t* Makefile.in: Remove support for MPX (macros, related functions,\n+\tfields in cgraph_node, ...).\n+\t* builtin-types.def (BT_BND): Likewise.\n+\t(BT_FN_BND_CONST_PTR): Likewise.\n+\t(BT_FN_CONST_PTR_BND): Likewise.\n+\t(BT_FN_VOID_PTR_BND): Likewise.\n+\t(BT_FN_BND_CONST_PTR_SIZE): Likewise.\n+\t(BT_FN_VOID_CONST_PTR_BND_CONST_PTR): Likewise.\n+\t* builtins.c (expand_builtin_memcpy_with_bounds): Likewise.\n+\t(expand_builtin_mempcpy_with_bounds): Likewise.\n+\t(expand_builtin_memset_with_bounds): Likewise.\n+\t(expand_builtin_memset_args): Likewise.\n+\t(std_expand_builtin_va_start): Likewise.\n+\t(expand_builtin): Likewise.\n+\t(expand_builtin_with_bounds): Likewise.\n+\t* builtins.def (DEF_BUILTIN_CHKP): Likewise.\n+\t(DEF_LIB_BUILTIN_CHKP): Likewise.\n+\t(DEF_EXT_LIB_BUILTIN_CHKP): Likewise.\n+\t(DEF_CHKP_BUILTIN): Likewise.\n+\t(BUILT_IN_MEMCPY): Likewise.\n+\t(BUILT_IN_MEMMOVE): Likewise.\n+\t(BUILT_IN_MEMPCPY): Likewise.\n+\t(BUILT_IN_MEMSET): Likewise.\n+\t(BUILT_IN_STPCPY): Likewise.\n+\t(BUILT_IN_STRCAT): Likewise.\n+\t(BUILT_IN_STRCHR): Likewise.\n+\t(BUILT_IN_STRCPY): Likewise.\n+\t(BUILT_IN_STRLEN): Likewise.\n+\t(BUILT_IN_MEMCPY_CHK): Likewise.\n+\t(BUILT_IN_MEMMOVE_CHK): Likewise.\n+\t(BUILT_IN_MEMPCPY_CHK): Likewise.\n+\t(BUILT_IN_MEMSET_CHK): Likewise.\n+\t(BUILT_IN_STPCPY_CHK): Likewise.\n+\t(BUILT_IN_STRCAT_CHK): Likewise.\n+\t(BUILT_IN_STRCPY_CHK): Likewise.\n+\t* calls.c (store_bounds): Likewise.\n+\t(emit_call_1): Likewise.\n+\t(special_function_p): Likewise.\n+\t(maybe_warn_nonstring_arg): Likewise.\n+\t(initialize_argument_information): Likewise.\n+\t(finalize_must_preallocate): Likewise.\n+\t(compute_argument_addresses): Likewise.\n+\t(expand_call): Likewise.\n+\t* cfgexpand.c (expand_call_stmt): Likewise.\n+\t(expand_return): Likewise.\n+\t(expand_gimple_stmt_1): Likewise.\n+\t(pass_expand::execute): Likewise.\n+\t* cgraph.c (cgraph_edge::redirect_call_stmt_to_callee): Likewise.\n+\t(cgraph_node::remove): Likewise.\n+\t(cgraph_node::dump): Likewise.\n+\t(cgraph_node::verify_node): Likewise.\n+\t* cgraph.h (chkp_function_instrumented_p): Likewise.\n+\t(symtab_node::get_alias_target): Likewise.\n+\t(cgraph_node::can_remove_if_no_direct_calls_and_refs_p): Likewise.\n+\t(cgraph_local_p): Likewise.\n+\t* cgraphbuild.c (cgraph_edge::rebuild_edges): Likewise.\n+\t(cgraph_edge::rebuild_references): Likewise.\n+\t* cgraphunit.c (varpool_node::finalize_decl): Likewise.\n+\t(walk_polymorphic_call_targets): Likewise.\n+\t(cgraph_node::expand_thunk): Likewise.\n+\t(symbol_table::output_weakrefs): Likewise.\n+\t* common/config/i386/i386-common.c (OPTION_MASK_ISA2_GENERAL_REGS_ONLY_UNSET): Likewise.\n+\t(ix86_handle_option): Likewise.\n+\t* config/i386/constraints.md: Likewise.\n+\t* config/i386/i386-builtin-types.def (BND): Likewise.\n+\t(VOID): Likewise.\n+\t(PVOID): Likewise.\n+\t(ULONG): Likewise.\n+\t* config/i386/i386-builtin.def (BDESC_END): Likewise.\n+\t(BDESC_FIRST): Likewise.\n+\t(BDESC): Likewise.\n+\t* config/i386/i386-c.c (ix86_target_macros_internal): Likewise.\n+\t* config/i386/i386-protos.h (ix86_bnd_prefixed_insn_p): Likewise.\n+\t* config/i386/i386.c (enum reg_class): Likewise.\n+\t(ix86_target_string): Likewise.\n+\t(ix86_option_override_internal): Likewise.\n+\t(ix86_conditional_register_usage): Likewise.\n+\t(ix86_valid_target_attribute_inner_p): Likewise.\n+\t(ix86_set_indirect_branch_type): Likewise.\n+\t(ix86_set_current_function): Likewise.\n+\t(ix86_function_arg_regno_p): Likewise.\n+\t(init_cumulative_args): Likewise.\n+\t(ix86_function_arg_advance): Likewise.\n+\t(ix86_function_arg): Likewise.\n+\t(ix86_pass_by_reference): Likewise.\n+\t(ix86_function_value_regno_p): Likewise.\n+\t(ix86_function_value_1): Likewise.\n+\t(ix86_function_value_bounds): Likewise.\n+\t(ix86_return_in_memory): Likewise.\n+\t(ix86_setup_incoming_vararg_bounds): Likewise.\n+\t(ix86_va_start): Likewise.\n+\t(indirect_thunk_need_prefix): Likewise.\n+\t(print_reg): Likewise.\n+\t(ix86_print_operand): Likewise.\n+\t(ix86_expand_call): Likewise.\n+\t(ix86_output_function_return): Likewise.\n+\t(reg_encoded_number): Likewise.\n+\t(BDESC_VERIFYS): Likewise.\n+\t(ix86_init_mpx_builtins): Likewise.\n+\t(ix86_init_builtins): Likewise.\n+\t(ix86_emit_cmove): Likewise.\n+\t(ix86_emit_move_max): Likewise.\n+\t(ix86_expand_builtin): Likewise.\n+\t(ix86_builtin_mpx_function): Likewise.\n+\t(ix86_get_arg_address_for_bt): Likewise.\n+\t(ix86_load_bounds): Likewise.\n+\t(ix86_store_bounds): Likewise.\n+\t(ix86_load_returned_bounds): Likewise.\n+\t(ix86_store_returned_bounds): Likewise.\n+\t(ix86_class_likely_spilled_p): Likewise.\n+\t(ix86_hard_regno_mode_ok): Likewise.\n+\t(x86_order_regs_for_local_alloc): Likewise.\n+\t(ix86_mitigate_rop): Likewise.\n+\t(ix86_bnd_prefixed_insn_p): Likewise.\n+\t(ix86_mpx_bound_mode): Likewise.\n+\t(ix86_make_bounds_constant): Likewise.\n+\t(ix86_initialize_bounds): Likewise.\n+\t(TARGET_LOAD_BOUNDS_FOR_ARG): Likewise.\n+\t(TARGET_STORE_BOUNDS_FOR_ARG): Likewise.\n+\t(TARGET_LOAD_RETURNED_BOUNDS): Likewise.\n+\t(TARGET_STORE_RETURNED_BOUNDS): Likewise.\n+\t(TARGET_CHKP_BOUND_MODE): Likewise.\n+\t(TARGET_BUILTIN_CHKP_FUNCTION): Likewise.\n+\t(TARGET_CHKP_FUNCTION_VALUE_BOUNDS): Likewise.\n+\t(TARGET_CHKP_MAKE_BOUNDS_CONSTANT): Likewise.\n+\t(TARGET_CHKP_INITIALIZE_BOUNDS): Likewise.\n+\t* config/i386/i386.h (TARGET_MPX): Likewise.\n+\t(TARGET_MPX_P): Likewise.\n+\t(VALID_BND_REG_MODE): Likewise.\n+\t(FIRST_BND_REG): Likewise.\n+\t(LAST_BND_REG): Likewise.\n+\t(enum reg_class): Likewise.\n+\t(BND_REG_P): Likewise.\n+\t(BND_REGNO_P): Likewise.\n+\t(BNDmode): Likewise.\n+\t(ADJUST_INSN_LENGTH): Likewise.\n+\t* config/i386/i386.md: Likewise.\n+\t* config/i386/i386.opt: Likewise.\n+\t* config/i386/linux-common.h (LIBMPX_LIBS): Likewise.\n+\t(defined): Likewise.\n+\t(LINK_MPX): Likewise.\n+\t(MPX_SPEC): Likewise.\n+\t(LIBMPX_SPEC): Likewise.\n+\t(LIBMPXWRAPPERS_SPEC): Likewise.\n+\t(CHKP_SPEC): Likewise.\n+\t* config/i386/predicates.md: Likewise.\n+\t* dbxout.c (dbxout_type): Likewise.\n+\t* doc/extend.texi: Likewise.\n+\t* doc/invoke.texi: Likewise.\n+\t* doc/md.texi: Likewise.\n+\t* doc/tm.texi: Likewise.\n+\t* doc/tm.texi.in: Likewise.\n+\t* dwarf2out.c (is_base_type): Likewise.\n+\t(gen_formal_types_die): Likewise.\n+\t(gen_subprogram_die): Likewise.\n+\t(gen_type_die_with_usage): Likewise.\n+\t(gen_decl_die): Likewise.\n+\t(dwarf2out_late_global_decl): Likewise.\n+\t* expr.c (expand_assignment): Likewise.\n+\t(emit_storent_insn): Likewise.\n+\t(store_expr_with_bounds): Likewise.\n+\t(store_expr): Likewise.\n+\t(expand_expr_real_1): Likewise.\n+\t* expr.h (store_expr_with_bounds): Likewise.\n+\t* function.c (use_register_for_decl): Likewise.\n+\t(struct bounds_parm_data): Likewise.\n+\t(assign_parms_augmented_arg_list): Likewise.\n+\t(assign_parm_find_entry_rtl): Likewise.\n+\t(assign_parm_is_stack_parm): Likewise.\n+\t(assign_parm_load_bounds): Likewise.\n+\t(assign_bounds): Likewise.\n+\t(assign_parms): Likewise.\n+\t(expand_function_start): Likewise.\n+\t* gcc.c (CHKP_SPEC): Likewise.\n+\t* gimple-fold.c (gimple_fold_builtin_memory_op): Likewise.\n+\t* gimple-ssa-warn-restrict.c (builtin_access::builtin_access): Likewise.\n+\t(wrestrict_dom_walker::check_call): Likewise.\n+\t* gimple.c (gimple_build_call_from_tree): Likewise.\n+\t* gimple.h (enum gf_mask): Likewise.\n+\t(gimple_call_with_bounds_p): Likewise.\n+\t(gimple_call_set_with_bounds): Likewise.\n+\t* gimplify.c (gimplify_init_constructor): Likewise.\n+\t* ipa-cp.c (initialize_node_lattices): Likewise.\n+\t(propagate_constants_across_call): Likewise.\n+\t(find_more_scalar_values_for_callers_subset): Likewise.\n+\t* ipa-hsa.c (process_hsa_functions): Likewise.\n+\t* ipa-icf-gimple.c (func_checker::compare_gimple_call): Likewise.\n+\t* ipa-icf.c (sem_function::merge): Likewise.\n+\t* ipa-inline.c (early_inliner): Likewise.\n+\t* ipa-pure-const.c (warn_function_noreturn): Likewise.\n+\t(warn_function_cold): Likewise.\n+\t(propagate_pure_const): Likewise.\n+\t* ipa-ref.h (enum GTY): Likewise.\n+\t* ipa-split.c (find_retbnd): Likewise.\n+\t(consider_split): Likewise.\n+\t(split_function): Likewise.\n+\t* ipa-visibility.c (cgraph_externally_visible_p): Likewise.\n+\t* ipa.c (walk_polymorphic_call_targets): Likewise.\n+\t(symbol_table::remove_unreachable_nodes): Likewise.\n+\t(process_references): Likewise.\n+\t(cgraph_build_static_cdtor_1): Likewise.\n+\t* lto-cgraph.c (lto_output_node): Likewise.\n+\t(output_refs): Likewise.\n+\t(compute_ltrans_boundary): Likewise.\n+\t(input_overwrite_node): Likewise.\n+\t(input_node): Likewise.\n+\t(input_cgraph_1): Likewise.\n+\t* params.def (PARAM_CHKP_MAX_CTOR_SIZE): Likewise.\n+\t* passes.c (pass_manager::execute_early_local_passes): Likewise.\n+\t(class pass_chkp_instrumentation_passes): Likewise.\n+\t(make_pass_chkp_instrumentation_passes): Likewise.\n+\t* passes.def: Likewise.\n+\t* rtl.h (struct GTY): Likewise.\n+\t(CALL_EXPR_WITH_BOUNDS_P): Likewise.\n+\t* stor-layout.c (layout_type): Likewise.\n+\t* symtab.c: Likewise.\n+\t* target.def: Likewise.\n+\t* targhooks.c (default_chkp_bound_type): Likewise.\n+\t(default_chkp_bound_mode): Likewise.\n+\t(default_builtin_chkp_function): Likewise.\n+\t(default_chkp_function_value_bounds): Likewise.\n+\t(default_chkp_make_bounds_constant): Likewise.\n+\t(default_chkp_initialize_bounds): Likewise.\n+\t* targhooks.h (default_chkp_bound_type): Likewise.\n+\t(default_chkp_bound_mode): Likewise.\n+\t(default_builtin_chkp_function): Likewise.\n+\t(default_chkp_function_value_bounds): Likewise.\n+\t(default_chkp_make_bounds_constant): Likewise.\n+\t(default_chkp_initialize_bounds): Likewise.\n+\t* toplev.c (compile_file): Likewise.\n+\t(process_options): Likewise.\n+\t* tree-core.h (DEF_BUILTIN): Likewise.\n+\t(DEF_BUILTIN_CHKP): Likewise.\n+\t* tree-inline.c (declare_return_variable): Likewise.\n+\t(remap_gimple_stmt): Likewise.\n+\t(copy_bb): Likewise.\n+\t(initialize_inlined_parameters): Likewise.\n+\t(expand_call_inline): Likewise.\n+\t* tree-pass.h (make_pass_ipa_chkp_versioning): Likewise.\n+\t(make_pass_ipa_chkp_early_produce_thunks): Likewise.\n+\t(make_pass_ipa_chkp_produce_thunks): Likewise.\n+\t(make_pass_chkp): Likewise.\n+\t(make_pass_chkp_opt): Likewise.\n+\t(make_pass_chkp_instrumentation_passes): Likewise.\n+\t* tree-pretty-print.c (dump_generic_node): Likewise.\n+\t* tree-ssa-ccp.c (insert_clobber_before_stack_restore): Likewise.\n+\t* tree-ssa-dce.c (propagate_necessity): Likewise.\n+\t(eliminate_unnecessary_stmts): Likewise.\n+\t* tree-ssa-pre.c (create_expression_by_pieces): Likewise.\n+\t* tree-ssa-sccvn.c (copy_reference_ops_from_call): Likewise.\n+\t* tree-ssa-sccvn.h: Likewise.\n+\t* tree-ssa-strlen.c (get_string_length): Likewise.\n+\t(valid_builtin_call): Likewise.\n+\t(adjust_last_stmt): Likewise.\n+\t(handle_builtin_strchr): Likewise.\n+\t(handle_builtin_strcpy): Likewise.\n+\t(handle_builtin_stxncpy): Likewise.\n+\t(handle_builtin_memcpy): Likewise.\n+\t(handle_builtin_strcat): Likewise.\n+\t(strlen_check_and_optimize_stmt): Likewise.\n+\t* tree-stdarg.c (expand_ifn_va_arg_1): Likewise.\n+\t* tree-streamer-in.c: Likewise.\n+\t* tree-streamer.c (record_common_node): Likewise.\n+\t* tree.c (tree_code_size): Likewise.\n+\t(wide_int_to_tree_1): Likewise.\n+\t(type_contains_placeholder_1): Likewise.\n+\t(build_common_tree_nodes): Likewise.\n+\t* tree.def (POINTER_BOUNDS_TYPE): Likewise.\n+\t* tree.h (POINTER_BOUNDS_TYPE_P): Likewise.\n+\t(POINTER_BOUNDS_P): Likewise.\n+\t(BOUNDED_TYPE_P): Likewise.\n+\t(BOUNDED_P): Likewise.\n+\t(CALL_WITH_BOUNDS_P): Likewise.\n+\t(pointer_bounds_type_node): Likewise.\n+\t* value-prof.c (gimple_ic): Likewise.\n+\t* var-tracking.c (vt_add_function_parameters): Likewise.\n+\t* varasm.c (make_decl_rtl): Likewise.\n+\t(assemble_start_function): Likewise.\n+\t(output_constant): Likewise.\n+\t(maybe_assemble_visibility): Likewise.\n+\t* varpool.c (ctor_for_folding): Likewise.\n+\t* chkp-builtins.def: Remove.\n+\t* ipa-chkp.c: Remove.\n+\t* ipa-chkp.h: Remove.\n+\t* rtl-chkp.c: Remove.\n+\t* rtl-chkp.h: Remove.\n+\t* tree-chkp-opt.c: Remove.\n+\t* tree-chkp.c: Remove.\n+\t* tree-chkp.h: Remove.\n+\n 2018-06-07  Carl Love  <cel@us.ibm.com>\n \n \t* gcc/config/rs6000/vsx.md (vextract_fp_from_shorth,"}, {"sha": "d8f3e8861189604035b248b69bc484443f334c1c", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -1355,7 +1355,6 @@ OBJS = \\\n \tincpath.o \\\n \tinit-regs.o \\\n \tinternal-fn.o \\\n-\tipa-chkp.o \\\n \tipa-cp.o \\\n \tipa-devirt.o \\\n \tipa-fnsummary.o \\\n@@ -1452,7 +1451,6 @@ OBJS = \\\n \treload1.o \\\n \treorg.o \\\n \tresource.o \\\n-\trtl-chkp.o \\\n \trtl-error.o \\\n \trtl-tests.o \\\n \trtl.o \\\n@@ -1518,8 +1516,6 @@ OBJS = \\\n \ttree-outof-ssa.o \\\n \ttree-parloops.o \\\n \ttree-phinodes.o \\\n-\ttree-chkp.o \\\n-\ttree-chkp-opt.o \\\n \ttree-predcom.o \\\n \ttree-pretty-print.o \\\n \ttree-profile.o \\\n@@ -2552,7 +2548,6 @@ GTFILES = $(CPP_ID_DATA_H) $(srcdir)/input.h $(srcdir)/coretypes.h \\\n   $(srcdir)/stringpool.c $(srcdir)/tree.c $(srcdir)/varasm.c \\\n   $(srcdir)/gimple.h \\\n   $(srcdir)/gimple-ssa.h \\\n-  $(srcdir)/tree-chkp.c \\\n   $(srcdir)/tree-ssanames.c $(srcdir)/tree-eh.c $(srcdir)/tree-ssa-address.c \\\n   $(srcdir)/tree-cfg.c $(srcdir)/tree-ssa-loop-ivopts.c \\\n   $(srcdir)/tree-dfa.c \\\n@@ -3512,7 +3507,7 @@ PLUGIN_HEADERS = $(TREE_H) $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n   tree-ssa-loop-niter.h tree-ssa-ter.h tree-ssa-threadedge.h \\\n   tree-ssa-threadupdate.h inchash.h wide-int.h signop.h hash-map.h \\\n   hash-set.h dominance.h cfg.h cfgrtl.h cfganal.h cfgbuild.h cfgcleanup.h \\\n-  lcm.h cfgloopmanip.h file-prefix-map.h builtins.def chkp-builtins.def \\\n+  lcm.h cfgloopmanip.h file-prefix-map.h builtins.def \\\n   pass-instances.def params.list\n \n # generate the 'build fragment' b-header-vars"}, {"sha": "845810c3736b00a0b8b9437299d57e06e30727eb", "filename": "gcc/builtin-types.def", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fbuiltin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fbuiltin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltin-types.def?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -152,8 +152,6 @@ DEF_PRIMITIVE_TYPE (BT_I4, builtin_type_for_size (BITS_PER_UNIT*4, 1))\n DEF_PRIMITIVE_TYPE (BT_I8, builtin_type_for_size (BITS_PER_UNIT*8, 1))\n DEF_PRIMITIVE_TYPE (BT_I16, builtin_type_for_size (BITS_PER_UNIT*16, 1))\n \n-DEF_PRIMITIVE_TYPE (BT_BND, pointer_bounds_type_node)\n-\n /* The C type `char * const *'.  */\n DEF_PRIMITIVE_TYPE (BT_PTR_CONST_STRING,\n \t\t    build_pointer_type\n@@ -300,8 +298,6 @@ DEF_FUNCTION_TYPE_1 (BT_FN_UINT64_FLOAT, BT_UINT64, BT_FLOAT)\n DEF_FUNCTION_TYPE_1 (BT_FN_BOOL_INT, BT_BOOL, BT_INT)\n DEF_FUNCTION_TYPE_1 (BT_FN_PTR_CONST_PTR, BT_PTR, BT_CONST_PTR)\n DEF_FUNCTION_TYPE_1 (BT_FN_CONST_PTR_CONST_PTR, BT_CONST_PTR, BT_CONST_PTR)\n-DEF_FUNCTION_TYPE_1 (BT_FN_BND_CONST_PTR, BT_BND, BT_CONST_PTR)\n-DEF_FUNCTION_TYPE_1 (BT_FN_CONST_PTR_BND, BT_CONST_PTR, BT_BND)\n DEF_FUNCTION_TYPE_1 (BT_FN_UINT16_UINT32, BT_UINT16, BT_UINT32)\n DEF_FUNCTION_TYPE_1 (BT_FN_UINT32_UINT16, BT_UINT32, BT_UINT16)\n DEF_FUNCTION_TYPE_1 (BT_FN_INT_FENV_T_PTR, BT_INT, BT_FENV_T_PTR)\n@@ -487,9 +483,7 @@ DEF_FUNCTION_TYPE_2 (BT_FN_PTR_CONST_PTR_SIZE, BT_PTR, BT_CONST_PTR, BT_SIZE)\n DEF_FUNCTION_TYPE_2 (BT_FN_PTR_CONST_PTR_CONST_PTR, BT_PTR, BT_CONST_PTR, BT_CONST_PTR)\n DEF_FUNCTION_TYPE_2 (BT_FN_VOID_PTRPTR_CONST_PTR, BT_VOID, BT_PTR_PTR, BT_CONST_PTR)\n DEF_FUNCTION_TYPE_2 (BT_FN_VOID_CONST_PTR_SIZE, BT_VOID, BT_CONST_PTR, BT_SIZE)\n-DEF_FUNCTION_TYPE_2 (BT_FN_VOID_PTR_BND, BT_VOID, BT_PTR, BT_BND)\n DEF_FUNCTION_TYPE_2 (BT_FN_CONST_PTR_CONST_PTR_CONST_PTR, BT_CONST_PTR, BT_CONST_PTR, BT_CONST_PTR)\n-DEF_FUNCTION_TYPE_2 (BT_FN_BND_CONST_PTR_SIZE, BT_BND, BT_CONST_PTR, BT_SIZE)\n DEF_FUNCTION_TYPE_2 (BT_FN_UINT32_UINT64_PTR,\n \t\t     BT_UINT32, BT_UINT64, BT_PTR)\n DEF_FUNCTION_TYPE_2 (BT_FN_INT_FEXCEPT_T_PTR_INT, BT_INT, BT_FEXCEPT_T_PTR,\n@@ -607,7 +601,6 @@ DEF_FUNCTION_TYPE_3 (BT_FN_VOID_VPTR_I8_INT, BT_VOID, BT_VOLATILE_PTR, BT_I8, BT\n DEF_FUNCTION_TYPE_3 (BT_FN_VOID_VPTR_I16_INT, BT_VOID, BT_VOLATILE_PTR, BT_I16, BT_INT)\n DEF_FUNCTION_TYPE_3 (BT_FN_INT_PTRPTR_SIZE_SIZE, BT_INT, BT_PTR_PTR, BT_SIZE, BT_SIZE)\n DEF_FUNCTION_TYPE_3 (BT_FN_PTR_CONST_PTR_CONST_PTR_SIZE, BT_PTR, BT_CONST_PTR, BT_CONST_PTR, BT_SIZE)\n-DEF_FUNCTION_TYPE_3 (BT_FN_VOID_CONST_PTR_BND_CONST_PTR, BT_VOID, BT_CONST_PTR, BT_BND, BT_CONST_PTR)\n DEF_FUNCTION_TYPE_3 (BT_FN_BOOL_INT_INT_INTPTR, BT_BOOL, BT_INT, BT_INT,\n \t\t     BT_INT_PTR)\n DEF_FUNCTION_TYPE_3 (BT_FN_BOOL_LONG_LONG_LONGPTR, BT_BOOL, BT_LONG, BT_LONG,"}, {"sha": "8707e0cfbc31aba24ee0803ba3d0fae428711ed3", "filename": "gcc/builtins.c", "status": "modified", "additions": 2, "deletions": 234, "changes": 236, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -64,8 +64,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"stringpool.h\"\n #include \"attribs.h\"\n #include \"asan.h\"\n-#include \"tree-chkp.h\"\n-#include \"rtl-chkp.h\"\n #include \"internal-fn.h\"\n #include \"case-cfn-macros.h\"\n #include \"gimple-fold.h\"\n@@ -125,12 +123,10 @@ static rtx expand_builtin_strncmp (tree, rtx, machine_mode);\n static rtx builtin_memcpy_read_str (void *, HOST_WIDE_INT, scalar_int_mode);\n static rtx expand_builtin_memchr (tree, rtx);\n static rtx expand_builtin_memcpy (tree, rtx);\n-static rtx expand_builtin_memcpy_with_bounds (tree, rtx);\n static rtx expand_builtin_memory_copy_args (tree dest, tree src, tree len,\n \t\t\t\t\t    rtx target, tree exp, int endp);\n static rtx expand_builtin_memmove (tree, rtx);\n static rtx expand_builtin_mempcpy (tree, rtx);\n-static rtx expand_builtin_mempcpy_with_bounds (tree, rtx);\n static rtx expand_builtin_mempcpy_args (tree, tree, tree, rtx, tree, int);\n static rtx expand_builtin_strcat (tree, rtx);\n static rtx expand_builtin_strcpy (tree, rtx);\n@@ -141,7 +137,6 @@ static rtx expand_builtin_strncat (tree, rtx);\n static rtx expand_builtin_strncpy (tree, rtx);\n static rtx builtin_memset_gen_str (void *, HOST_WIDE_INT, scalar_int_mode);\n static rtx expand_builtin_memset (tree, rtx, machine_mode);\n-static rtx expand_builtin_memset_with_bounds (tree, rtx, machine_mode);\n static rtx expand_builtin_memset_args (tree, tree, tree, rtx, machine_mode, tree);\n static rtx expand_builtin_bzero (tree);\n static rtx expand_builtin_strlen (tree, rtx, machine_mode);\n@@ -3479,38 +3474,6 @@ expand_builtin_memmove (tree exp, rtx)\n   return NULL_RTX;\n }\n \n-/* Expand an instrumented call EXP to the memcpy builtin.\n-   Return NULL_RTX if we failed, the caller should emit a normal call,\n-   otherwise try to get the result in TARGET, if convenient (and in\n-   mode MODE if that's convenient).  */\n-\n-static rtx\n-expand_builtin_memcpy_with_bounds (tree exp, rtx target)\n-{\n-  if (!validate_arglist (exp,\n-\t\t\t POINTER_TYPE, POINTER_BOUNDS_TYPE,\n-\t\t\t POINTER_TYPE, POINTER_BOUNDS_TYPE,\n-\t\t\t INTEGER_TYPE, VOID_TYPE))\n-    return NULL_RTX;\n-  else\n-    {\n-      tree dest = CALL_EXPR_ARG (exp, 0);\n-      tree src = CALL_EXPR_ARG (exp, 2);\n-      tree len = CALL_EXPR_ARG (exp, 4);\n-      rtx res = expand_builtin_memory_copy_args (dest, src, len, target, exp,\n-\t\t\t\t\t\t /*end_p=*/ 0);\n-\n-      /* Return src bounds with the result.  */\n-      if (res)\n-\t{\n-\t  rtx bnd = force_reg (targetm.chkp_bound_mode (),\n-\t\t\t       expand_normal (CALL_EXPR_ARG (exp, 1)));\n-\t  res = chkp_join_splitted_slot (res, bnd);\n-\t}\n-      return res;\n-    }\n-}\n-\n /* Expand a call EXP to the mempcpy builtin.\n    Return NULL_RTX if we failed; the caller should emit a normal call,\n    otherwise try to get the result in TARGET, if convenient (and in\n@@ -3553,38 +3516,6 @@ expand_builtin_mempcpy (tree exp, rtx target)\n \t\t\t\t      target, exp, /*endp=*/ 1);\n }\n \n-/* Expand an instrumented call EXP to the mempcpy builtin.\n-   Return NULL_RTX if we failed, the caller should emit a normal call,\n-   otherwise try to get the result in TARGET, if convenient (and in\n-   mode MODE if that's convenient).  */\n-\n-static rtx\n-expand_builtin_mempcpy_with_bounds (tree exp, rtx target)\n-{\n-  if (!validate_arglist (exp,\n-\t\t\t POINTER_TYPE, POINTER_BOUNDS_TYPE,\n-\t\t\t POINTER_TYPE, POINTER_BOUNDS_TYPE,\n-\t\t\t INTEGER_TYPE, VOID_TYPE))\n-    return NULL_RTX;\n-  else\n-    {\n-      tree dest = CALL_EXPR_ARG (exp, 0);\n-      tree src = CALL_EXPR_ARG (exp, 2);\n-      tree len = CALL_EXPR_ARG (exp, 4);\n-      rtx res = expand_builtin_mempcpy_args (dest, src, len, target,\n-\t\t\t\t\t     exp, 1);\n-\n-      /* Return src bounds with the result.  */\n-      if (res)\n-\t{\n-\t  rtx bnd = force_reg (targetm.chkp_bound_mode (),\n-\t\t\t       expand_normal (CALL_EXPR_ARG (exp, 1)));\n-\t  res = chkp_join_splitted_slot (res, bnd);\n-\t}\n-      return res;\n-    }\n-}\n-\n /* Helper function to do the actual work for expand of memory copy family\n    functions (memcpy, mempcpy, stpcpy).  Expansing should assign LEN bytes\n    of memory from SRC to DEST and assign to TARGET if convenient.\n@@ -4205,36 +4136,6 @@ expand_builtin_memset (tree exp, rtx target, machine_mode mode)\n   return expand_builtin_memset_args (dest, val, len, target, mode, exp);\n }\n \n-/* Expand expression EXP, which is an instrumented call to the memset builtin.\n-   Return NULL_RTX if we failed the caller should emit a normal call, otherwise\n-   try to get the result in TARGET, if convenient (and in mode MODE if that's\n-   convenient).  */\n-\n-static rtx\n-expand_builtin_memset_with_bounds (tree exp, rtx target, machine_mode mode)\n-{\n-  if (!validate_arglist (exp,\n-\t\t\t POINTER_TYPE, POINTER_BOUNDS_TYPE,\n-\t\t\t INTEGER_TYPE, INTEGER_TYPE, VOID_TYPE))\n-    return NULL_RTX;\n-  else\n-    {\n-      tree dest = CALL_EXPR_ARG (exp, 0);\n-      tree val = CALL_EXPR_ARG (exp, 2);\n-      tree len = CALL_EXPR_ARG (exp, 3);\n-      rtx res = expand_builtin_memset_args (dest, val, len, target, mode, exp);\n-\n-      /* Return src bounds with the result.  */\n-      if (res)\n-\t{\n-\t  rtx bnd = force_reg (targetm.chkp_bound_mode (),\n-\t\t\t       expand_normal (CALL_EXPR_ARG (exp, 1)));\n-\t  res = chkp_join_splitted_slot (res, bnd);\n-\t}\n-      return res;\n-    }\n-}\n-\n /* Helper function to do the actual work for expand_builtin_memset.  The\n    arguments to the builtin_memset call DEST, VAL, and LEN are broken out\n    so that this can also be called without constructing an actual CALL_EXPR.\n@@ -4363,8 +4264,7 @@ expand_builtin_memset_args (tree dest, tree val, tree len,\n  do_libcall:\n   fndecl = get_callee_fndecl (orig_exp);\n   fcode = DECL_FUNCTION_CODE (fndecl);\n-  if (fcode == BUILT_IN_MEMSET\n-      || fcode == BUILT_IN_CHKP_MEMSET_NOBND_NOCHK_CHKP)\n+  if (fcode == BUILT_IN_MEMSET)\n     fn = build_call_nofold_loc (EXPR_LOCATION (orig_exp), fndecl, 3,\n \t\t\t\tdest, val, len);\n   else if (fcode == BUILT_IN_BZERO)\n@@ -4889,13 +4789,6 @@ std_expand_builtin_va_start (tree valist, rtx nextarg)\n {\n   rtx va_r = expand_expr (valist, NULL_RTX, VOIDmode, EXPAND_WRITE);\n   convert_move (va_r, nextarg, 0);\n-\n-  /* We do not have any valid bounds for the pointer, so\n-     just store zero bounds for it.  */\n-  if (chkp_function_instrumented_p (current_function_decl))\n-    chkp_expand_bounds_reset_for_mem (valist,\n-\t\t\t\t      make_tree (TREE_TYPE (valist),\n-\t\t\t\t\t\t nextarg));\n }\n \n /* Expand EXP, a call to __builtin_va_start.  */\n@@ -6766,19 +6659,7 @@ expand_builtin (tree exp, rtx target, rtx subtarget, machine_mode mode,\n       && fcode != BUILT_IN_EXECVP\n       && fcode != BUILT_IN_EXECVE\n       && !ALLOCA_FUNCTION_CODE_P (fcode)\n-      && fcode != BUILT_IN_FREE\n-      && fcode != BUILT_IN_CHKP_SET_PTR_BOUNDS\n-      && fcode != BUILT_IN_CHKP_INIT_PTR_BOUNDS\n-      && fcode != BUILT_IN_CHKP_NULL_PTR_BOUNDS\n-      && fcode != BUILT_IN_CHKP_COPY_PTR_BOUNDS\n-      && fcode != BUILT_IN_CHKP_NARROW_PTR_BOUNDS\n-      && fcode != BUILT_IN_CHKP_STORE_PTR_BOUNDS\n-      && fcode != BUILT_IN_CHKP_CHECK_PTR_LBOUNDS\n-      && fcode != BUILT_IN_CHKP_CHECK_PTR_UBOUNDS\n-      && fcode != BUILT_IN_CHKP_CHECK_PTR_BOUNDS\n-      && fcode != BUILT_IN_CHKP_GET_PTR_LBOUND\n-      && fcode != BUILT_IN_CHKP_GET_PTR_UBOUND\n-      && fcode != BUILT_IN_CHKP_BNDRET)\n+      && fcode != BUILT_IN_FREE)\n     return expand_call (exp, target, ignore);\n \n   /* The built-in function expanders test for target == const0_rtx\n@@ -6812,10 +6693,6 @@ expand_builtin (tree exp, rtx target, rtx subtarget, machine_mode mode,\n \t}\n     }\n \n-  /* expand_builtin_with_bounds is supposed to be used for\n-     instrumented builtin calls.  */\n-  gcc_assert (!CALL_WITH_BOUNDS_P (exp));\n-\n   switch (fcode)\n     {\n     CASE_FLT_FN (BUILT_IN_FABS):\n@@ -7840,51 +7717,6 @@ expand_builtin (tree exp, rtx target, rtx subtarget, machine_mode mode,\n       expand_builtin_set_thread_pointer (exp);\n       return const0_rtx;\n \n-    case BUILT_IN_CHKP_INIT_PTR_BOUNDS:\n-    case BUILT_IN_CHKP_NULL_PTR_BOUNDS:\n-    case BUILT_IN_CHKP_COPY_PTR_BOUNDS:\n-    case BUILT_IN_CHKP_CHECK_PTR_LBOUNDS:\n-    case BUILT_IN_CHKP_CHECK_PTR_UBOUNDS:\n-    case BUILT_IN_CHKP_CHECK_PTR_BOUNDS:\n-    case BUILT_IN_CHKP_SET_PTR_BOUNDS:\n-    case BUILT_IN_CHKP_NARROW_PTR_BOUNDS:\n-    case BUILT_IN_CHKP_STORE_PTR_BOUNDS:\n-    case BUILT_IN_CHKP_GET_PTR_LBOUND:\n-    case BUILT_IN_CHKP_GET_PTR_UBOUND:\n-      /* We allow user CHKP builtins if Pointer Bounds\n-\t Checker is off.  */\n-      if (!chkp_function_instrumented_p (current_function_decl))\n-\t{\n-\t  if (fcode == BUILT_IN_CHKP_SET_PTR_BOUNDS\n-\t      || fcode == BUILT_IN_CHKP_NARROW_PTR_BOUNDS\n-\t      || fcode == BUILT_IN_CHKP_INIT_PTR_BOUNDS\n-\t      || fcode == BUILT_IN_CHKP_NULL_PTR_BOUNDS\n-\t      || fcode == BUILT_IN_CHKP_COPY_PTR_BOUNDS)\n-\t    return expand_normal (CALL_EXPR_ARG (exp, 0));\n-\t  else if (fcode == BUILT_IN_CHKP_GET_PTR_LBOUND)\n-\t    return expand_normal (size_zero_node);\n-\t  else if (fcode == BUILT_IN_CHKP_GET_PTR_UBOUND)\n-\t    return expand_normal (size_int (-1));\n-\t  else\n-\t    return const0_rtx;\n-\t}\n-      /* FALLTHROUGH */\n-\n-    case BUILT_IN_CHKP_BNDMK:\n-    case BUILT_IN_CHKP_BNDSTX:\n-    case BUILT_IN_CHKP_BNDCL:\n-    case BUILT_IN_CHKP_BNDCU:\n-    case BUILT_IN_CHKP_BNDLDX:\n-    case BUILT_IN_CHKP_BNDRET:\n-    case BUILT_IN_CHKP_INTERSECT:\n-    case BUILT_IN_CHKP_NARROW:\n-    case BUILT_IN_CHKP_EXTRACT_LOWER:\n-    case BUILT_IN_CHKP_EXTRACT_UPPER:\n-      /* Software implementation of Pointer Bounds Checker is NYI.\n-\t Target support is required.  */\n-      error (\"Your target platform does not support -fcheck-pointer-bounds\");\n-      break;\n-\n     case BUILT_IN_ACC_ON_DEVICE:\n       /* Do library call, if we failed to expand the builtin when\n \t folding.  */\n@@ -7903,70 +7735,6 @@ expand_builtin (tree exp, rtx target, rtx subtarget, machine_mode mode,\n   return expand_call (exp, target, ignore);\n }\n \n-/* Similar to expand_builtin but is used for instrumented calls.  */\n-\n-rtx\n-expand_builtin_with_bounds (tree exp, rtx target,\n-\t\t\t    rtx subtarget ATTRIBUTE_UNUSED,\n-\t\t\t    machine_mode mode, int ignore)\n-{\n-  tree fndecl = get_callee_fndecl (exp);\n-  enum built_in_function fcode = DECL_FUNCTION_CODE (fndecl);\n-\n-  gcc_assert (CALL_WITH_BOUNDS_P (exp));\n-\n-  if (DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_MD)\n-    return targetm.expand_builtin (exp, target, subtarget, mode, ignore);\n-\n-  gcc_assert (fcode > BEGIN_CHKP_BUILTINS\n-\t      && fcode < END_CHKP_BUILTINS);\n-\n-  switch (fcode)\n-    {\n-    case BUILT_IN_CHKP_MEMCPY_NOBND_NOCHK_CHKP:\n-      target = expand_builtin_memcpy_with_bounds (exp, target);\n-      if (target)\n-\treturn target;\n-      break;\n-\n-    case BUILT_IN_CHKP_MEMPCPY_NOBND_NOCHK_CHKP:\n-      target = expand_builtin_mempcpy_with_bounds (exp, target);\n-      if (target)\n-\treturn target;\n-      break;\n-\n-    case BUILT_IN_CHKP_MEMSET_NOBND_NOCHK_CHKP:\n-      target = expand_builtin_memset_with_bounds (exp, target, mode);\n-      if (target)\n-\treturn target;\n-      break;\n-\n-    case BUILT_IN_MEMCPY_CHKP:\n-    case BUILT_IN_MEMMOVE_CHKP:\n-    case BUILT_IN_MEMPCPY_CHKP:\n-      if (call_expr_nargs (exp) > 3)\n-\t{\n-\t  /* memcpy_chkp (void *dst, size_t dstbnd,\n-\t                  const void *src, size_t srcbnd, size_t n)\n-  \t     and others take a pointer bound argument just after each\n-\t     pointer argument.  */\n-\t  tree dest = CALL_EXPR_ARG (exp, 0);\n-\t  tree src = CALL_EXPR_ARG (exp, 2);\n-\t  tree len = CALL_EXPR_ARG (exp, 4);\n-\n-\t  check_memop_access (exp, dest, src, len);\n-\t  break;\n-\t}\n-\n-    default:\n-      break;\n-    }\n-\n-  /* The switch statement above can drop through to cause the function\n-     to be called normally.  */\n-  return expand_call (exp, target, ignore);\n- }\n-\n /* Determine whether a tree node represents a call to a built-in\n    function.  If the tree T is a call to a built-in function with\n    the right number of arguments of the appropriate types, return"}, {"sha": "9776dfabddf9cb101a0ff2405ff762e75bc02732", "filename": "gcc/builtins.def", "status": "modified", "additions": 16, "deletions": 44, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -63,16 +63,6 @@ along with GCC; see the file COPYING3.  If not see\n \n    The builtins is registered only if COND is true.  */\n \n-/* A macro for builtins where the\n-   BUILT_IN_*_CHKP = BUILT_IN_* + BEGIN_CHKP_BUILTINS + 1\n-   enums should be defined too.  */\n-#ifndef DEF_BUILTIN_CHKP\n-#define DEF_BUILTIN_CHKP(ENUM, NAME, CLASS, TYPE, LIBTYPE, BOTH_P,\t\\\n-\t\t\t FALLBACK_P, NONANSI_P, ATTRS, IMPLICIT, COND)\t\\\n-  DEF_BUILTIN(ENUM, NAME, CLASS, TYPE, LIBTYPE, BOTH_P, FALLBACK_P,\t\\\n-\t      NONANSI_P, ATTRS, IMPLICIT, COND)\n-#endif\n-\n /* A GCC builtin (like __builtin_saveregs) is provided by the\n    compiler, but does not correspond to a function in the standard\n    library.  */\n@@ -110,10 +100,6 @@ along with GCC; see the file COPYING3.  If not see\n #define DEF_LIB_BUILTIN(ENUM, NAME, TYPE, ATTRS)\t\\\n   DEF_BUILTIN (ENUM, \"__builtin_\" NAME, BUILT_IN_NORMAL, TYPE, TYPE,\t\\\n \t       true, true, false, ATTRS, true, true)\n-#undef DEF_LIB_BUILTIN_CHKP\n-#define DEF_LIB_BUILTIN_CHKP(ENUM, NAME, TYPE, ATTRS)\t\\\n-  DEF_BUILTIN_CHKP (ENUM, \"__builtin_\" NAME, BUILT_IN_NORMAL, TYPE,\t\\\n-\t\t    TYPE, true, true, false, ATTRS, true, true)\n \n /* Like DEF_LIB_BUILTIN, except that the function is not one that is\n    specified by ANSI/ISO C.  So, when we're being fully conformant we\n@@ -123,10 +109,6 @@ along with GCC; see the file COPYING3.  If not see\n #define DEF_EXT_LIB_BUILTIN(ENUM, NAME, TYPE, ATTRS)\t\\\n   DEF_BUILTIN (ENUM, \"__builtin_\" NAME, BUILT_IN_NORMAL, TYPE, TYPE,\t\\\n \t       true, true, true, ATTRS, false, true)\n-#undef DEF_EXT_LIB_BUILTIN_CHKP\n-#define DEF_EXT_LIB_BUILTIN_CHKP(ENUM, NAME, TYPE, ATTRS)\t\\\n-  DEF_BUILTIN_CHKP (ENUM, \"__builtin_\" NAME, BUILT_IN_NORMAL, TYPE,\t\\\n-\t\t    TYPE, true, true, true, ATTRS, false, true)\n \n /* A set of GCC builtins for _FloatN and _FloatNx types.  TYPE_MACRO is called\n    with an argument such as FLOAT32 to produce the enum value for the type.  If\n@@ -259,12 +241,6 @@ along with GCC; see the file COPYING3.  If not see\n \t\t\t\t| SANITIZE_UNDEFINED_NONDEFAULT) \\\n \t       || flag_sanitize_coverage))\n \n-/* Builtin used by the implementation of Pointer Bounds Checker.  */\n-#undef DEF_CHKP_BUILTIN\n-#define DEF_CHKP_BUILTIN(ENUM, NAME, TYPE, ATTRS) \\\n-  DEF_BUILTIN_CHKP (ENUM, \"__builtin_\" NAME, BUILT_IN_NORMAL, TYPE,\t\\\n-\t\t    TYPE, true, true, false, ATTRS, true, true)\n-\n /* Define an attribute list for math functions that are normally\n    \"impure\" because some of them may write into global memory for\n    `errno'.  If !flag_errno_math they are instead \"const\".  */\n@@ -713,22 +689,22 @@ DEF_EXT_LIB_BUILTIN    (BUILT_IN_BZERO, \"bzero\", BT_FN_VOID_PTR_SIZE, ATTR_NOTHR\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_INDEX, \"index\", BT_FN_STRING_CONST_STRING_INT, ATTR_PURE_NOTHROW_NONNULL_LEAF)\n DEF_LIB_BUILTIN        (BUILT_IN_MEMCHR, \"memchr\", BT_FN_PTR_CONST_PTR_INT_SIZE, ATTR_PURE_NOTHROW_NONNULL_LEAF)\n DEF_LIB_BUILTIN        (BUILT_IN_MEMCMP, \"memcmp\", BT_FN_INT_CONST_PTR_CONST_PTR_SIZE, ATTR_PURE_NOTHROW_NONNULL_LEAF)\n-DEF_LIB_BUILTIN_CHKP   (BUILT_IN_MEMCPY, \"memcpy\", BT_FN_PTR_PTR_CONST_PTR_SIZE, ATTR_RET1_NOTHROW_NONNULL_LEAF)\n-DEF_LIB_BUILTIN_CHKP   (BUILT_IN_MEMMOVE, \"memmove\", BT_FN_PTR_PTR_CONST_PTR_SIZE, ATTR_RET1_NOTHROW_NONNULL_LEAF)\n-DEF_EXT_LIB_BUILTIN_CHKP (BUILT_IN_MEMPCPY, \"mempcpy\", BT_FN_PTR_PTR_CONST_PTR_SIZE, ATTR_RETNONNULL_NOTHROW_LEAF)\n-DEF_LIB_BUILTIN_CHKP   (BUILT_IN_MEMSET, \"memset\", BT_FN_PTR_PTR_INT_SIZE, ATTR_RET1_NOTHROW_NONNULL_LEAF)\n+DEF_LIB_BUILTIN\t       (BUILT_IN_MEMCPY, \"memcpy\", BT_FN_PTR_PTR_CONST_PTR_SIZE, ATTR_RET1_NOTHROW_NONNULL_LEAF)\n+DEF_LIB_BUILTIN\t       (BUILT_IN_MEMMOVE, \"memmove\", BT_FN_PTR_PTR_CONST_PTR_SIZE, ATTR_RET1_NOTHROW_NONNULL_LEAF)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_MEMPCPY, \"mempcpy\", BT_FN_PTR_PTR_CONST_PTR_SIZE, ATTR_RETNONNULL_NOTHROW_LEAF)\n+DEF_LIB_BUILTIN\t       (BUILT_IN_MEMSET, \"memset\", BT_FN_PTR_PTR_INT_SIZE, ATTR_RET1_NOTHROW_NONNULL_LEAF)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_RINDEX, \"rindex\", BT_FN_STRING_CONST_STRING_INT, ATTR_PURE_NOTHROW_NONNULL_LEAF)\n-DEF_EXT_LIB_BUILTIN_CHKP (BUILT_IN_STPCPY, \"stpcpy\", BT_FN_STRING_STRING_CONST_STRING, ATTR_RETNONNULL_NOTHROW_LEAF)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_STPCPY, \"stpcpy\", BT_FN_STRING_STRING_CONST_STRING, ATTR_RETNONNULL_NOTHROW_LEAF)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_STPNCPY, \"stpncpy\", BT_FN_STRING_STRING_CONST_STRING_SIZE, ATTR_RETNONNULL_NOTHROW_LEAF)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_STRCASECMP, \"strcasecmp\", BT_FN_INT_CONST_STRING_CONST_STRING, ATTR_PURE_NOTHROW_NONNULL_LEAF)\n-DEF_LIB_BUILTIN_CHKP   (BUILT_IN_STRCAT, \"strcat\", BT_FN_STRING_STRING_CONST_STRING, ATTR_RET1_NOTHROW_NONNULL_LEAF)\n-DEF_LIB_BUILTIN_CHKP   (BUILT_IN_STRCHR, \"strchr\", BT_FN_STRING_CONST_STRING_INT, ATTR_PURE_NOTHROW_NONNULL_LEAF)\n+DEF_LIB_BUILTIN        (BUILT_IN_STRCAT, \"strcat\", BT_FN_STRING_STRING_CONST_STRING, ATTR_RET1_NOTHROW_NONNULL_LEAF)\n+DEF_LIB_BUILTIN        (BUILT_IN_STRCHR, \"strchr\", BT_FN_STRING_CONST_STRING_INT, ATTR_PURE_NOTHROW_NONNULL_LEAF)\n DEF_LIB_BUILTIN        (BUILT_IN_STRCMP, \"strcmp\", BT_FN_INT_CONST_STRING_CONST_STRING, ATTR_PURE_NOTHROW_NONNULL_LEAF)\n-DEF_LIB_BUILTIN_CHKP   (BUILT_IN_STRCPY, \"strcpy\", BT_FN_STRING_STRING_CONST_STRING, ATTR_RET1_NOTHROW_NONNULL_LEAF)\n+DEF_LIB_BUILTIN        (BUILT_IN_STRCPY, \"strcpy\", BT_FN_STRING_STRING_CONST_STRING, ATTR_RET1_NOTHROW_NONNULL_LEAF)\n DEF_LIB_BUILTIN        (BUILT_IN_STRCSPN, \"strcspn\", BT_FN_SIZE_CONST_STRING_CONST_STRING, ATTR_PURE_NOTHROW_NONNULL_LEAF)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_STRDUP, \"strdup\", BT_FN_STRING_CONST_STRING, ATTR_MALLOC_NOTHROW_NONNULL_LEAF)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_STRNDUP, \"strndup\", BT_FN_STRING_CONST_STRING_SIZE, ATTR_MALLOC_NOTHROW_NONNULL_LEAF)\n-DEF_LIB_BUILTIN_CHKP   (BUILT_IN_STRLEN, \"strlen\", BT_FN_SIZE_CONST_STRING, ATTR_PURE_NOTHROW_NONNULL_LEAF)\n+DEF_LIB_BUILTIN        (BUILT_IN_STRLEN, \"strlen\", BT_FN_SIZE_CONST_STRING, ATTR_PURE_NOTHROW_NONNULL_LEAF)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_STRNCASECMP, \"strncasecmp\", BT_FN_INT_CONST_STRING_CONST_STRING_SIZE, ATTR_PURE_NOTHROW_NONNULL_LEAF)\n DEF_LIB_BUILTIN        (BUILT_IN_STRNCAT, \"strncat\", BT_FN_STRING_STRING_CONST_STRING_SIZE, ATTR_RET1_NOTHROW_NONNULL_LEAF)\n DEF_LIB_BUILTIN        (BUILT_IN_STRNCMP, \"strncmp\", BT_FN_INT_CONST_STRING_CONST_STRING_SIZE, ATTR_PURE_NOTHROW_NONNULL_LEAF)\n@@ -978,14 +954,14 @@ DEF_BUILTIN_STUB (BUILT_IN_STRNCMP_EQ, \"__builtin_strncmp_eq\")\n \n /* Object size checking builtins.  */\n DEF_GCC_BUILTIN\t       (BUILT_IN_OBJECT_SIZE, \"object_size\", BT_FN_SIZE_CONST_PTR_INT, ATTR_PURE_NOTHROW_LEAF_LIST)\n-DEF_EXT_LIB_BUILTIN_CHKP (BUILT_IN_MEMCPY_CHK, \"__memcpy_chk\", BT_FN_PTR_PTR_CONST_PTR_SIZE_SIZE, ATTR_RET1_NOTHROW_NONNULL_LEAF)\n-DEF_EXT_LIB_BUILTIN_CHKP (BUILT_IN_MEMMOVE_CHK, \"__memmove_chk\", BT_FN_PTR_PTR_CONST_PTR_SIZE_SIZE, ATTR_RET1_NOTHROW_NONNULL_LEAF)\n-DEF_EXT_LIB_BUILTIN_CHKP (BUILT_IN_MEMPCPY_CHK, \"__mempcpy_chk\", BT_FN_PTR_PTR_CONST_PTR_SIZE_SIZE, ATTR_RETNONNULL_NOTHROW_LEAF)\n-DEF_EXT_LIB_BUILTIN_CHKP (BUILT_IN_MEMSET_CHK, \"__memset_chk\", BT_FN_PTR_PTR_INT_SIZE_SIZE, ATTR_RET1_NOTHROW_NONNULL_LEAF)\n-DEF_EXT_LIB_BUILTIN_CHKP (BUILT_IN_STPCPY_CHK, \"__stpcpy_chk\", BT_FN_STRING_STRING_CONST_STRING_SIZE, ATTR_RETNONNULL_NOTHROW_LEAF)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_MEMCPY_CHK, \"__memcpy_chk\", BT_FN_PTR_PTR_CONST_PTR_SIZE_SIZE, ATTR_RET1_NOTHROW_NONNULL_LEAF)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_MEMMOVE_CHK, \"__memmove_chk\", BT_FN_PTR_PTR_CONST_PTR_SIZE_SIZE, ATTR_RET1_NOTHROW_NONNULL_LEAF)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_MEMPCPY_CHK, \"__mempcpy_chk\", BT_FN_PTR_PTR_CONST_PTR_SIZE_SIZE, ATTR_RETNONNULL_NOTHROW_LEAF)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_MEMSET_CHK, \"__memset_chk\", BT_FN_PTR_PTR_INT_SIZE_SIZE, ATTR_RET1_NOTHROW_NONNULL_LEAF)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_STPCPY_CHK, \"__stpcpy_chk\", BT_FN_STRING_STRING_CONST_STRING_SIZE, ATTR_RETNONNULL_NOTHROW_LEAF)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_STPNCPY_CHK, \"__stpncpy_chk\", BT_FN_STRING_STRING_CONST_STRING_SIZE_SIZE, ATTR_RETNONNULL_NOTHROW_LEAF)\n-DEF_EXT_LIB_BUILTIN_CHKP (BUILT_IN_STRCAT_CHK, \"__strcat_chk\", BT_FN_STRING_STRING_CONST_STRING_SIZE, ATTR_RET1_NOTHROW_NONNULL_LEAF)\n-DEF_EXT_LIB_BUILTIN_CHKP (BUILT_IN_STRCPY_CHK, \"__strcpy_chk\", BT_FN_STRING_STRING_CONST_STRING_SIZE, ATTR_RET1_NOTHROW_NONNULL_LEAF)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_STRCAT_CHK, \"__strcat_chk\", BT_FN_STRING_STRING_CONST_STRING_SIZE, ATTR_RET1_NOTHROW_NONNULL_LEAF)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_STRCPY_CHK, \"__strcpy_chk\", BT_FN_STRING_STRING_CONST_STRING_SIZE, ATTR_RET1_NOTHROW_NONNULL_LEAF)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_STRNCAT_CHK, \"__strncat_chk\", BT_FN_STRING_STRING_CONST_STRING_SIZE_SIZE, ATTR_RET1_NOTHROW_NONNULL_LEAF)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_STRNCPY_CHK, \"__strncpy_chk\", BT_FN_STRING_STRING_CONST_STRING_SIZE_SIZE, ATTR_RET1_NOTHROW_NONNULL_LEAF)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_SNPRINTF_CHK, \"__snprintf_chk\", BT_FN_INT_STRING_SIZE_INT_SIZE_CONST_STRING_VAR, ATTR_FORMAT_PRINTF_NOTHROW_5_6)\n@@ -1053,9 +1029,6 @@ DEF_GCC_BUILTIN (BUILT_IN_LINE, \"LINE\", BT_FN_INT, ATTR_NOTHROW_LEAF_LIST)\n /* Sanitizer builtins. */\n #include \"sanitizer.def\"\n \n-/* Pointer Bounds Checker builtins.  */\n-#include \"chkp-builtins.def\"\n-\n /* Do not expose the BRIG builtins by default gcc-wide, but only privately in\n    the BRIG FE as long as there are no references for them in the middle end\n    or any of the upstream backends.  */\n@@ -1099,5 +1072,4 @@ DEF_GCC_BUILTIN (BUILT_IN_LINE, \"LINE\", BT_FN_INT, ATTR_NOTHROW_LEAF_LIST)\n /* HSAIL/BRIG frontend builtins.  */\n #include \"brig-builtins.def\"\n \n-#undef DEF_BUILTIN_CHKP\n #undef DEF_BUILTIN"}, {"sha": "28ff01ae241705087a7fa426c6b55977aa8057ed", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -1,3 +1,11 @@\n+2018-06-08  Martin Liska  <mliska@suse.cz>\n+\n+\t* c-attribs.c (handle_bnd_variable_size_attribute): Remove support\n+\tfor MPX (macros, related functions, fields in cgraph_node, ...).\n+\t(handle_bnd_legacy): Likewise.\n+\t(handle_bnd_instrument): Likewise.\n+\t* c.opt: Likewise.\n+\n 2018-06-06  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/86068"}, {"sha": "73901bdf47c1c21f056ddf40bc413a2b98fc605e", "filename": "gcc/c-family/c-attribs.c", "status": "modified", "additions": 0, "deletions": 63, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fc-family%2Fc-attribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fc-family%2Fc-attribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-attribs.c?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -143,9 +143,6 @@ static tree handle_simd_attribute (tree *, tree, tree, int, bool *);\n static tree handle_omp_declare_target_attribute (tree *, tree, tree, int,\n \t\t\t\t\t\t bool *);\n static tree handle_designated_init_attribute (tree *, tree, tree, int, bool *);\n-static tree handle_bnd_variable_size_attribute (tree *, tree, tree, int, bool *);\n-static tree handle_bnd_legacy (tree *, tree, tree, int, bool *);\n-static tree handle_bnd_instrument (tree *, tree, tree, int, bool *);\n static tree handle_fallthrough_attribute (tree *, tree, tree, int, bool *);\n static tree handle_patchable_function_entry_attribute (tree *, tree, tree,\n \t\t\t\t\t\t       int, bool *);\n@@ -239,9 +236,6 @@ static const struct attribute_spec::exclusions attr_const_pure_exclusions[] =\n \n /* Table of machine-independent attributes common to all C-like languages.\n \n-   All attributes referencing arguments should be additionally processed\n-   in chkp_copy_function_type_adding_bounds for correct instrumentation\n-   by Pointer Bounds Checker.\n    Current list of processed common attributes: nonnull.  */\n const struct attribute_spec c_common_attribute_table[] =\n {\n@@ -452,12 +446,6 @@ const struct attribute_spec c_common_attribute_table[] =\n \t\t\t      handle_assume_aligned_attribute, NULL },\n   { \"designated_init\",        0, 0, false, true, false, false,\n \t\t\t      handle_designated_init_attribute, NULL },\n-  { \"bnd_variable_size\",      0, 0, true,  false, false, false,\n-\t\t\t      handle_bnd_variable_size_attribute, NULL },\n-  { \"bnd_legacy\",             0, 0, true, false, false, false,\n-\t\t\t      handle_bnd_legacy, NULL },\n-  { \"bnd_instrument\",         0, 0, true, false, false, false,\n-\t\t\t      handle_bnd_instrument, NULL },\n   { \"fallthrough\",\t      0, 0, false, false, false, false,\n \t\t\t      handle_fallthrough_attribute, NULL },\n   { \"patchable_function_entry\",\t1, 2, true, false, false, false,\n@@ -471,9 +459,6 @@ const struct attribute_spec c_common_attribute_table[] =\n /* Give the specifications for the format attributes, used by C and all\n    descendants.\n \n-   All attributes referencing arguments should be additionally processed\n-   in chkp_copy_function_type_adding_bounds for correct instrumentation\n-   by Pointer Bounds Checker.\n    Current list of processed format attributes: format, format_arg.  */\n const struct attribute_spec c_common_format_attribute_table[] =\n {\n@@ -2489,54 +2474,6 @@ handle_fnspec_attribute (tree *node ATTRIBUTE_UNUSED, tree ARG_UNUSED (name),\n   return NULL_TREE;\n }\n \n-/* Handle a \"bnd_variable_size\" attribute; arguments as in\n-   struct attribute_spec.handler.  */\n-\n-static tree\n-handle_bnd_variable_size_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n-\t\t\t\t    int ARG_UNUSED (flags), bool *no_add_attrs)\n-{\n-  if (TREE_CODE (*node) != FIELD_DECL)\n-    {\n-      warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n-      *no_add_attrs = true;\n-    }\n-\n-  return NULL_TREE;\n-}\n-\n-/* Handle a \"bnd_legacy\" attribute; arguments as in\n-   struct attribute_spec.handler.  */\n-\n-static tree\n-handle_bnd_legacy (tree *node, tree name, tree ARG_UNUSED (args),\n-\t\t   int ARG_UNUSED (flags), bool *no_add_attrs)\n-{\n-  if (TREE_CODE (*node) != FUNCTION_DECL)\n-    {\n-      warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n-      *no_add_attrs = true;\n-    }\n-\n-  return NULL_TREE;\n-}\n-\n-/* Handle a \"bnd_instrument\" attribute; arguments as in\n-   struct attribute_spec.handler.  */\n-\n-static tree\n-handle_bnd_instrument (tree *node, tree name, tree ARG_UNUSED (args),\n-\t\t       int ARG_UNUSED (flags), bool *no_add_attrs)\n-{\n-  if (TREE_CODE (*node) != FUNCTION_DECL)\n-    {\n-      warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n-      *no_add_attrs = true;\n-    }\n-\n-  return NULL_TREE;\n-}\n-\n /* Handle a \"warn_unused\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n "}, {"sha": "1d7eafff1f770571265de2e221be0c8fd9dae108", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 21, "deletions": 32, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -410,7 +410,7 @@ Warn about subscripts whose type is \\\"char\\\".\n \n Wchkp\n C ObjC C++ ObjC++ Var(warn_chkp) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)\n-Warn about memory access errors found by Pointer Bounds Checker.\n+Deprecated in GCC 9.  This switch has no effect.\n \n Wclobbered\n C ObjC C++ ObjC++ Var(warn_clobbered) Warning EnabledBy(Wextra)\n@@ -1260,97 +1260,86 @@ Where shorter, use canonicalized paths to systems headers.\n \n fcheck-pointer-bounds\n C ObjC C++ ObjC++ LTO Report Var(flag_check_pointer_bounds)\n-Add Pointer Bounds Checker instrumentation.  fchkp-* flags are used to\n-control instrumentation.  Currently available for C, C++ and ObjC.\n+Deprecated in GCC 9.  This switch has no effect.\n \n fchkp-check-incomplete-type\n C ObjC C++ ObjC++ LTO Report Var(flag_chkp_incomplete_type) Init(1)\n-Generate pointer bounds checks for variables with incomplete type.\n+Deprecated in GCC 9.  This switch has no effect.\n \n fchkp-zero-input-bounds-for-main\n C ObjC C++ ObjC++ LTO Report Var(flag_chkp_zero_input_bounds_for_main) Init(0)\n-Use zero bounds for all incoming arguments in 'main' function.  It helps when\n-instrumented binaries are used with legacy libs.\n+Deprecated in GCC 9.  This switch has no effect.\n \n fchkp-first-field-has-own-bounds\n C ObjC C++ ObjC++ LTO RejectNegative Report Var(flag_chkp_first_field_has_own_bounds)\n-Forces Pointer Bounds Checker to use narrowed bounds for address of the first\n-field in the structure.  By default pointer to the first field has the same\n-bounds as pointer to the whole structure.\n+Deprecated in GCC 9.  This switch has no effect.\n \n fchkp-narrow-bounds\n C ObjC C++ ObjC++ LTO Report Var(flag_chkp_narrow_bounds) Init(1)\n-Control how Pointer Bounds Checker handle pointers to object fields.  When\n-narrowing is on, field bounds are used.  Otherwise full object bounds are used.\n+Deprecated in GCC 9.  This switch has no effect.\n \n fchkp-narrow-to-innermost-array\n C ObjC C++ ObjC++ LTO RejectNegative Report Var(flag_chkp_narrow_to_innermost_arrray)\n-Forces Pointer Bounds Checker to use bounds of the innermost arrays in case of\n-nested static arrays access.  By default outermost array is used.\n+Deprecated in GCC 9.  This switch has no effect.\n \n fchkp-flexible-struct-trailing-arrays\n C ObjC C++ ObjC++ LTO Report Var(flag_chkp_flexible_struct_trailing_arrays)\n-Forces Pointer Bounds Checker to treat all trailing arrays in structures as\n-possibly flexible.  By default only arrays fields with zero length or that are\n-marked with attribute bnd_variable_size are treated as flexible.\n+Deprecated in GCC 9.  This switch has no effect.\n \n fchkp-optimize\n C ObjC C++ ObjC++ LTO Report Var(flag_chkp_optimize) Init(-1)\n-Allow Pointer Bounds Checker optimizations.  By default allowed\n-on optimization levels >0.\n \n fchkp-use-fast-string-functions\n C ObjC C++ ObjC++ LTO Report Var(flag_chkp_use_fast_string_functions) Init(0)\n-Allow to use *_nobnd versions of string functions by Pointer Bounds Checker.\n+Deprecated in GCC 9.  This switch has no effect.\n \n fchkp-use-nochk-string-functions\n C ObjC C++ ObjC++ LTO Report Var(flag_chkp_use_nochk_string_functions) Init(0)\n-Allow to use *_nochk versions of string functions by Pointer Bounds Checker.\n+Deprecated in GCC 9.  This switch has no effect.\n \n fchkp-use-static-bounds\n C ObjC C++ ObjC++ LTO Report Var(flag_chkp_use_static_bounds) Init(1)\n-Use statically initialized variable for vars bounds instead of\n-generating them each time it is required.\n+Deprecated in GCC 9.  This switch has no effect.\n \n fchkp-use-static-const-bounds\n C ObjC C++ ObjC++ LTO Report Var(flag_chkp_use_static_const_bounds) Init(-1)\n-Use statically initialized variable for constant bounds instead of\n-generating them each time it is required.\n+Deprecated in GCC 9.  This switch has no effect.\n \n fchkp-treat-zero-dynamic-size-as-infinite\n C ObjC C++ ObjC++ LTO Report Var(flag_chkp_zero_dynamic_size_as_infinite) Init(0)\n-With this option zero size obtained dynamically for objects with\n-incomplete type will be treated as infinite.\n+Deprecated in GCC 9.  This switch has no effect.\n \n fchkp-check-read\n C ObjC C++ ObjC++ LTO Report Var(flag_chkp_check_read) Init(1)\n-Generate checks for all read accesses to memory.\n+Deprecated in GCC 9.  This switch has no effect.\n \n fchkp-check-write\n C ObjC C++ ObjC++ LTO Report Var(flag_chkp_check_write) Init(1)\n-Generate checks for all write accesses to memory.\n+Deprecated in GCC 9.  This switch has no effect.\n \n fchkp-store-bounds\n C ObjC C++ ObjC++ LTO Report Var(flag_chkp_store_bounds) Init(1)\n-Generate bounds stores for pointer writes.\n+Deprecated in GCC 9.  This switch has no effect.\n \n fchkp-instrument-calls\n C ObjC C++ ObjC++ LTO Report Var(flag_chkp_instrument_calls) Init(1)\n-Generate bounds passing for calls.\n+Deprecated in GCC 9.  This switch has no effect.\n \n fchkp-instrument-marked-only\n C ObjC C++ ObjC++ LTO Report Var(flag_chkp_instrument_marked_only) Init(0)\n-Instrument only functions marked with bnd_instrument attribute.\n+Deprecated in GCC 9.  This switch has no effect.\n \n fchkp-use-wrappers\n C ObjC C++ ObjC++ LTO Report Var(flag_chkp_use_wrappers) Init(1)\n-Transform instrumented builtin calls into calls to wrappers.\n+Deprecated in GCC 9.  This switch has no effect.\n \n static-libmpx\n Driver\n+Deprecated in GCC 9.  This switch has no effect.\n \n static-libmpxwrappers\n Driver\n+Deprecated in GCC 9.  This switch has no effect.\n \n fcilkplus Undocumented\n C ObjC C++ ObjC++ LTO Report Var(flag_cilkplus) Init(0)"}, {"sha": "a5bba8195af3b48941c7b3abe83c335fcd6fc835", "filename": "gcc/calls.c", "status": "modified", "additions": 11, "deletions": 203, "changes": 214, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -47,10 +47,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"except.h\"\n #include \"dbgcnt.h\"\n #include \"rtl-iter.h\"\n-#include \"tree-chkp.h\"\n #include \"tree-vrp.h\"\n #include \"tree-ssanames.h\"\n-#include \"rtl-chkp.h\"\n #include \"intl.h\"\n #include \"stringpool.h\"\n #include \"attribs.h\"\n@@ -154,7 +152,6 @@ static unsigned HOST_WIDE_INT stored_args_watermark;\n static int stack_arg_under_construction;\n \n static void precompute_register_parameters (int, struct arg_data *, int *);\n-static void store_bounds (struct arg_data *, struct arg_data *);\n static int store_one_arg (struct arg_data *, rtx, int, int, int);\n static void store_unaligned_arguments_into_pseudos (struct arg_data *, int);\n static int finalize_must_preallocate (int, int, struct arg_data *,\n@@ -488,10 +485,6 @@ emit_call_1 (rtx funexp, tree fntree ATTRIBUTE_UNUSED, tree fndecl ATTRIBUTE_UNU\n       && MEM_EXPR (funmem) != NULL_TREE)\n     set_mem_expr (XEXP (call, 0), MEM_EXPR (funmem));\n \n-  /* Mark instrumented calls.  */\n-  if (call && fntree)\n-    CALL_EXPR_WITH_BOUNDS_P (call) = CALL_WITH_BOUNDS_P (fntree);\n-\n   /* Put the register usage information there.  */\n   add_function_usage_to (call_insn, call_fusage);\n \n@@ -598,12 +591,6 @@ special_function_p (const_tree fndecl, int flags)\n {\n   tree name_decl = DECL_NAME (fndecl);\n \n-  /* For instrumentation clones we want to derive flags\n-     from the original name.  */\n-  if (cgraph_node::get (fndecl)\n-      && cgraph_node::get (fndecl)->instrumentation_clone)\n-    name_decl = DECL_NAME (cgraph_node::get (fndecl)->orig_decl);\n-\n   if (fndecl && name_decl\n       && IDENTIFIER_LENGTH (name_decl) <= 11\n       /* Exclude functions not at the file scope, or not `extern',\n@@ -1626,8 +1613,6 @@ maybe_warn_nonstring_arg (tree fndecl, tree exp)\n   if (!fndecl || DECL_BUILT_IN_CLASS (fndecl) != BUILT_IN_NORMAL)\n     return;\n \n-  bool with_bounds = CALL_WITH_BOUNDS_P (exp);\n-\n   unsigned nargs = call_expr_nargs (exp);\n \n   /* The bound argument to a bounded string function like strncpy.  */\n@@ -1651,8 +1636,7 @@ maybe_warn_nonstring_arg (tree fndecl, tree exp)\n \t   the range of their known or possible lengths and use it\n \t   conservatively as the bound for the unbounded function,\n \t   and to adjust the range of the bound of the bounded ones.  */\n-\tunsigned stride = with_bounds ? 2 : 1;\n-\tfor (unsigned argno = 0; argno < nargs && !*lenrng; argno += stride)\n+\tfor (unsigned argno = 0; argno < nargs && !*lenrng; argno ++)\n \t  {\n \t    tree arg = CALL_EXPR_ARG (exp, argno);\n \t    if (!get_attr_nonstring_decl (arg))\n@@ -1662,19 +1646,17 @@ maybe_warn_nonstring_arg (tree fndecl, tree exp)\n       /* Fall through.  */\n \n     case BUILT_IN_STPNCPY:\n-    case BUILT_IN_STPNCPY_CHK:\n     case BUILT_IN_STRNCPY:\n-    case BUILT_IN_STRNCPY_CHK:\n       {\n-\tunsigned argno = with_bounds ? 4 : 2;\n+\tunsigned argno = 2;\n \tif (argno < nargs)\n \t  bound = CALL_EXPR_ARG (exp, argno);\n \tbreak;\n       }\n \n     case BUILT_IN_STRNDUP:\n       {\n-\tunsigned argno = with_bounds ? 2 : 1;\n+\tunsigned argno = 1;\n \tif (argno < nargs)\n \t  bound = CALL_EXPR_ARG (exp, argno);\n \tbreak;\n@@ -1879,7 +1861,7 @@ initialize_argument_information (int num_actuals ATTRIBUTE_UNUSED,\n \n   i = num_actuals - 1;\n   {\n-    int j = i, ptr_arg = -1;\n+    int j = i;\n     call_expr_arg_iterator iter;\n     tree arg;\n     bitmap slots = NULL;\n@@ -1888,79 +1870,12 @@ initialize_argument_information (int num_actuals ATTRIBUTE_UNUSED,\n       {\n \targs[j].tree_value = struct_value_addr_value;\n \tj--;\n-\n-\t/* If we pass structure address then we need to\n-\t   create bounds for it.  Since created bounds is\n-\t   a call statement, we expand it right here to avoid\n-\t   fixing all other places where it may be expanded.  */\n-\tif (CALL_WITH_BOUNDS_P (exp))\n-\t  {\n-\t    args[j].value = gen_reg_rtx (targetm.chkp_bound_mode ());\n-\t    args[j].tree_value\n-\t      = chkp_make_bounds_for_struct_addr (struct_value_addr_value);\n-\t    expand_expr_real (args[j].tree_value, args[j].value, VOIDmode,\n-\t\t\t      EXPAND_NORMAL, 0, false);\n-\t    args[j].pointer_arg = j + 1;\n-\t    j--;\n-\t  }\n       }\n     argpos = 0;\n     FOR_EACH_CALL_EXPR_ARG (arg, iter, exp)\n       {\n \ttree argtype = TREE_TYPE (arg);\n \n-\t/* Remember last param with pointer and associate it\n-\t   with following pointer bounds.  */\n-\tif (CALL_WITH_BOUNDS_P (exp)\n-\t    && chkp_type_has_pointer (argtype))\n-\t  {\n-\t    if (slots)\n-\t      BITMAP_FREE (slots);\n-\t    ptr_arg = j;\n-\t    if (!BOUNDED_TYPE_P (argtype))\n-\t      {\n-\t\tslots = BITMAP_ALLOC (NULL);\n-\t\tchkp_find_bound_slots (argtype, slots);\n-\t      }\n-\t  }\n-\telse if (CALL_WITH_BOUNDS_P (exp)\n-\t\t && pass_by_reference (NULL, TYPE_MODE (argtype), argtype,\n-\t\t\t\t       argpos < n_named_args))\n-\t  {\n-\t    if (slots)\n-\t      BITMAP_FREE (slots);\n-\t    ptr_arg = j;\n-\t  }\n-\telse if (POINTER_BOUNDS_TYPE_P (argtype))\n-\t  {\n-\t    /* We expect bounds in instrumented calls only.\n-\t       Otherwise it is a sign we lost flag due to some optimization\n-\t       and may emit call args incorrectly.  */\n-\t    gcc_assert (CALL_WITH_BOUNDS_P (exp));\n-\n-\t    /* For structures look for the next available pointer.  */\n-\t    if (ptr_arg != -1 && slots)\n-\t      {\n-\t\tunsigned bnd_no = bitmap_first_set_bit (slots);\n-\t\targs[j].pointer_offset =\n-\t\t  bnd_no * POINTER_SIZE / BITS_PER_UNIT;\n-\n-\t\tbitmap_clear_bit (slots, bnd_no);\n-\n-\t\t/* Check we have no more pointers in the structure.  */\n-\t\tif (bitmap_empty_p (slots))\n-\t\t  BITMAP_FREE (slots);\n-\t      }\n-\t    args[j].pointer_arg = ptr_arg;\n-\n-\t    /* Check we covered all pointers in the previous\n-\t       non bounds arg.  */\n-\t    if (!slots)\n-\t      ptr_arg = -1;\n-\t  }\n-\telse\n-\t  ptr_arg = -1;\n-\n \tif (targetm.calls.split_complex_arg\n \t    && argtype\n \t    && TREE_CODE (argtype) == COMPLEX_TYPE\n@@ -2205,11 +2120,8 @@ initialize_argument_information (int num_actuals ATTRIBUTE_UNUSED,\n \t  || (args[i].pass_on_stack && args[i].reg != 0))\n \t*must_preallocate = 1;\n \n-      /* No stack allocation and padding for bounds.  */\n-      if (POINTER_BOUNDS_P (args[i].tree_value))\n-\t;\n       /* Compute the stack-size of this argument.  */\n-      else if (args[i].reg == 0 || args[i].partial != 0\n+      if (args[i].reg == 0 || args[i].partial != 0\n \t       || reg_parm_stack_space > 0\n \t       || args[i].pass_on_stack)\n \tlocate_and_pad_parm (mode, type,\n@@ -2442,12 +2354,6 @@ finalize_must_preallocate (int must_preallocate, int num_actuals,\n \t    partial_seen = 1;\n \t  else if (partial_seen && args[i].reg == 0)\n \t    must_preallocate = 1;\n-\t  /* We preallocate in case there are bounds passed\n-\t     in the bounds table to have precomputed address\n-\t     for bounds association.  */\n-\t  else if (POINTER_BOUNDS_P (args[i].tree_value)\n-\t\t   && !args[i].reg)\n-\t    must_preallocate = 1;\n \n \t  if (TYPE_MODE (TREE_TYPE (args[i].tree_value)) == BLKmode\n \t      && (TREE_CODE (args[i].tree_value) == CALL_EXPR\n@@ -2506,10 +2412,6 @@ compute_argument_addresses (struct arg_data *args, rtx argblock, int num_actuals\n \t  if (TYPE_EMPTY_P (TREE_TYPE (args[i].tree_value)))\n \t    continue;\n \n-\t  /* Pointer Bounds are never passed on the stack.  */\n-\t  if (POINTER_BOUNDS_P (args[i].tree_value))\n-\t    continue;\n-\n \t  addr = simplify_gen_binary (PLUS, Pmode, arg_reg, offset);\n \t  addr = plus_constant (Pmode, addr, arg_offset);\n \n@@ -3320,8 +3222,6 @@ expand_call (tree exp, rtx target, int ignore)\n   /* Register in which non-BLKmode value will be returned,\n      or 0 if no value or if value is BLKmode.  */\n   rtx valreg;\n-  /* Register(s) in which bounds are returned.  */\n-  rtx valbnd = NULL;\n   /* Address where we should return a BLKmode value;\n      0 if value not BLKmode.  */\n   rtx structure_value_addr = 0;\n@@ -3589,7 +3489,7 @@ expand_call (tree exp, rtx target, int ignore)\n \n       structure_value_addr_value =\n \tmake_tree (build_pointer_type (TREE_TYPE (funtype)), temp);\n-      structure_value_addr_parm = CALL_WITH_BOUNDS_P (exp) ? 2 : 1;\n+      structure_value_addr_parm = 1;\n     }\n \n   /* Count the arguments and set NUM_ACTUALS.  */\n@@ -4126,10 +4026,7 @@ expand_call (tree exp, rtx target, int ignore)\n \n       for (i = 0; i < num_actuals; i++)\n \t{\n-\t  /* Delay bounds until all other args are stored.  */\n-\t  if (POINTER_BOUNDS_P (args[i].tree_value))\n-\t    continue;\n-\t  else if (args[i].reg == 0 || args[i].pass_on_stack)\n+\t  if (args[i].reg == 0 || args[i].pass_on_stack)\n \t    {\n \t      rtx_insn *before_arg = get_last_insn ();\n \n@@ -4203,28 +4100,15 @@ expand_call (tree exp, rtx target, int ignore)\n \n       /* Figure out the register where the value, if any, will come back.  */\n       valreg = 0;\n-      valbnd = 0;\n       if (TYPE_MODE (rettype) != VOIDmode\n \t  && ! structure_value_addr)\n \t{\n \t  if (pcc_struct_value)\n-\t    {\n-\t      valreg = hard_function_value (build_pointer_type (rettype),\n-\t\t\t\t\t    fndecl, NULL, (pass == 0));\n-\t      if (CALL_WITH_BOUNDS_P (exp))\n-\t\tvalbnd = targetm.calls.\n-\t\t  chkp_function_value_bounds (build_pointer_type (rettype),\n-\t\t\t\t\t      fndecl, (pass == 0));\n-\t    }\n+\t    valreg = hard_function_value (build_pointer_type (rettype),\n+\t\t\t\t\t  fndecl, NULL, (pass == 0));\n \t  else\n-\t    {\n-\t      valreg = hard_function_value (rettype, fndecl, fntype,\n-\t\t\t\t\t    (pass == 0));\n-\t      if (CALL_WITH_BOUNDS_P (exp))\n-\t\tvalbnd = targetm.calls.chkp_function_value_bounds (rettype,\n-\t\t\t\t\t\t\t\t   fndecl,\n-\t\t\t\t\t\t\t\t   (pass == 0));\n-\t    }\n+\t    valreg = hard_function_value (rettype, fndecl, fntype,\n+\t\t\t\t\t  (pass == 0));\n \n \t  /* If VALREG is a PARALLEL whose first member has a zero\n \t     offset, use that.  This is for targets such as m68k that\n@@ -4240,17 +4124,6 @@ expand_call (tree exp, rtx target, int ignore)\n \t    }\n \t}\n \n-      /* Store all bounds not passed in registers.  */\n-      for (i = 0; i < num_actuals; i++)\n-\t{\n-\t  if (POINTER_BOUNDS_P (args[i].tree_value)\n-\t      && !args[i].reg)\n-\t    store_bounds (&args[i],\n-\t\t\t  args[i].pointer_arg == -1\n-\t\t\t  ? NULL\n-\t\t\t  : &args[args[i].pointer_arg]);\n-\t}\n-\n       /* If register arguments require space on the stack and stack space\n \t was not preallocated, allocate stack space here for arguments\n \t passed in registers.  */\n@@ -4655,10 +4528,6 @@ expand_call (tree exp, rtx target, int ignore)\n \n   free (stack_usage_map_buf);\n   free (args);\n-\n-  /* Join result with returned bounds so caller may use them if needed.  */\n-  target = chkp_join_splitted_slot (target, valbnd);\n-\n   return target;\n }\n \n@@ -5513,67 +5382,6 @@ emit_library_call_value_1 (int retval, rtx orgfun, rtx value,\n }\n \f\n \n-/* Store pointer bounds argument ARG  into Bounds Table entry\n-   associated with PARM.  */\n-static void\n-store_bounds (struct arg_data *arg, struct arg_data *parm)\n-{\n-  rtx slot = NULL, ptr = NULL, addr = NULL;\n-\n-  /* We may pass bounds not associated with any pointer.  */\n-  if (!parm)\n-    {\n-      gcc_assert (arg->special_slot);\n-      slot = arg->special_slot;\n-      ptr = const0_rtx;\n-    }\n-  /* Find pointer associated with bounds and where it is\n-     passed.  */\n-  else\n-    {\n-      if (!parm->reg)\n-\t{\n-\t  gcc_assert (!arg->special_slot);\n-\n-\t  addr = adjust_address (parm->stack, Pmode, arg->pointer_offset);\n-\t}\n-      else if (REG_P (parm->reg))\n-\t{\n-\t  gcc_assert (arg->special_slot);\n-\t  slot = arg->special_slot;\n-\n-\t  if (MEM_P (parm->value))\n-\t    addr = adjust_address (parm->value, Pmode, arg->pointer_offset);\n-\t  else if (REG_P (parm->value))\n-\t    ptr = gen_rtx_SUBREG (Pmode, parm->value, arg->pointer_offset);\n-\t  else\n-\t    {\n-\t      gcc_assert (!arg->pointer_offset);\n-\t      ptr = parm->value;\n-\t    }\n-\t}\n-      else\n-\t{\n-\t  gcc_assert (GET_CODE (parm->reg) == PARALLEL);\n-\n-\t  gcc_assert (arg->special_slot);\n-\t  slot = arg->special_slot;\n-\n-\t  if (parm->parallel_value)\n-\t    ptr = chkp_get_value_with_offs (parm->parallel_value,\n-\t\t\t\t\t    GEN_INT (arg->pointer_offset));\n-\t  else\n-\t    gcc_unreachable ();\n-\t}\n-    }\n-\n-  /* Expand bounds.  */\n-  if (!arg->value)\n-    arg->value = expand_normal (arg->tree_value);\n-\n-  targetm.calls.store_bounds_for_arg (ptr, addr, arg->value, slot);\n-}\n-\n /* Store a single argument for a function call\n    into the register or memory area where it must be passed.\n    *ARG describes the argument value and where to pass it."}, {"sha": "bf8c54bf87327fb882783503be4d281a1d1263ab", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 2, "deletions": 81, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -74,8 +74,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-ssa-address.h\"\n #include \"output.h\"\n #include \"builtins.h\"\n-#include \"tree-chkp.h\"\n-#include \"rtl-chkp.h\"\n \n /* Some systems use __main in a way incompatible with its use in gcc, in these\n    cases use the macros NAME__MAIN to give a quoted symbol and SYMBOL__MAIN to\n@@ -2665,7 +2663,6 @@ expand_call_stmt (gcall *stmt)\n   CALL_EXPR_VA_ARG_PACK (exp) = gimple_call_va_arg_pack_p (stmt);\n   CALL_EXPR_BY_DESCRIPTOR (exp) = gimple_call_by_descriptor_p (stmt);\n   SET_EXPR_LOCATION (exp, gimple_location (stmt));\n-  CALL_WITH_BOUNDS_P (exp) = gimple_call_with_bounds_p (stmt);\n \n   /* Ensure RTL is created for debug args.  */\n   if (decl && DECL_HAS_DEBUG_ARGS_P (decl))\n@@ -3444,12 +3441,11 @@ expand_value_return (rtx val)\n    from the current function.  */\n \n static void\n-expand_return (tree retval, tree bounds)\n+expand_return (tree retval)\n {\n   rtx result_rtl;\n   rtx val = 0;\n   tree retval_rhs;\n-  rtx bounds_rtl;\n \n   /* If function wants no value, give it none.  */\n   if (TREE_CODE (TREE_TYPE (TREE_TYPE (current_function_decl))) == VOID_TYPE)\n@@ -3475,71 +3471,6 @@ expand_return (tree retval, tree bounds)\n \n   result_rtl = DECL_RTL (DECL_RESULT (current_function_decl));\n \n-  /* Put returned bounds to the right place.  */\n-  bounds_rtl = DECL_BOUNDS_RTL (DECL_RESULT (current_function_decl));\n-  if (bounds_rtl)\n-    {\n-      rtx addr = NULL;\n-      rtx bnd = NULL;\n-\n-      if (bounds && bounds != error_mark_node)\n-\t{\n-\t  bnd = expand_normal (bounds);\n-\t  targetm.calls.store_returned_bounds (bounds_rtl, bnd);\n-\t}\n-      else if (REG_P (bounds_rtl))\n-\t{\n-\t  if (bounds)\n-\t    bnd = chkp_expand_zero_bounds ();\n-\t  else\n-\t    {\n-\t      addr = expand_normal (build_fold_addr_expr (retval_rhs));\n-\t      addr = gen_rtx_MEM (Pmode, addr);\n-\t      bnd = targetm.calls.load_bounds_for_arg (addr, NULL, NULL);\n-\t    }\n-\n-\t  targetm.calls.store_returned_bounds (bounds_rtl, bnd);\n-\t}\n-      else\n-\t{\n-\t  int n;\n-\n-\t  gcc_assert (GET_CODE (bounds_rtl) == PARALLEL);\n-\n-\t  if (bounds)\n-\t    bnd = chkp_expand_zero_bounds ();\n-\t  else\n-\t    {\n-\t      addr = expand_normal (build_fold_addr_expr (retval_rhs));\n-\t      addr = gen_rtx_MEM (Pmode, addr);\n-\t    }\n-\n-\t  for (n = 0; n < XVECLEN (bounds_rtl, 0); n++)\n-\t    {\n-\t      rtx slot = XEXP (XVECEXP (bounds_rtl, 0, n), 0);\n-\t      if (!bounds)\n-\t\t{\n-\t\t  rtx offs = XEXP (XVECEXP (bounds_rtl, 0, n), 1);\n-\t\t  rtx from = adjust_address (addr, Pmode, INTVAL (offs));\n-\t\t  bnd = targetm.calls.load_bounds_for_arg (from, NULL, NULL);\n-\t\t}\n-\t      targetm.calls.store_returned_bounds (slot, bnd);\n-\t    }\n-\t}\n-    }\n-  else if (chkp_function_instrumented_p (current_function_decl)\n-\t   && !BOUNDED_P (retval_rhs)\n-\t   && chkp_type_has_pointer (TREE_TYPE (retval_rhs))\n-\t   && TREE_CODE (retval_rhs) != RESULT_DECL)\n-    {\n-      rtx addr = expand_normal (build_fold_addr_expr (retval_rhs));\n-      addr = gen_rtx_MEM (Pmode, addr);\n-\n-      gcc_assert (MEM_P (result_rtl));\n-\n-      chkp_copy_bounds_for_stack_parm (result_rtl, addr, TREE_TYPE (retval_rhs));\n-    }\n-\n   /* If we are returning the RESULT_DECL, then the value has already\n      been stored into it, so we don't have to do anything special.  */\n   if (TREE_CODE (retval_rhs) == RESULT_DECL)\n@@ -3646,19 +3577,12 @@ expand_gimple_stmt_1 (gimple *stmt)\n \n     case GIMPLE_RETURN:\n       {\n-\ttree bnd = gimple_return_retbnd (as_a <greturn *> (stmt));\n \top0 = gimple_return_retval (as_a <greturn *> (stmt));\n \n \tif (op0 && op0 != error_mark_node)\n \t  {\n \t    tree result = DECL_RESULT (current_function_decl);\n \n-\t    /* Mark we have return statement with missing bounds.  */\n-\t    if (!bnd\n-\t\t&& chkp_function_instrumented_p (cfun->decl)\n-\t\t&& !DECL_P (op0))\n-\t      bnd = error_mark_node;\n-\n \t    /* If we are not returning the current function's RESULT_DECL,\n \t       build an assignment to it.  */\n \t    if (op0 != result)\n@@ -3680,7 +3604,7 @@ expand_gimple_stmt_1 (gimple *stmt)\n \tif (!op0)\n \t  expand_null_return ();\n \telse\n-\t  expand_return (op0, bnd);\n+\t  expand_return (op0);\n       }\n       break;\n \n@@ -6267,9 +6191,6 @@ pass_expand::execute (function *fun)\n \n   rtl_profile_for_bb (ENTRY_BLOCK_PTR_FOR_FN (fun));\n \n-  if (chkp_function_instrumented_p (current_function_decl))\n-    chkp_reset_rtl_bounds ();\n-\n   insn_locations_init ();\n   if (!DECL_IS_BUILTIN (current_function_decl))\n     {"}, {"sha": "f922b70a430e7c73db6732a7dfcdaa9d17a4cef0", "filename": "gcc/cgraph.c", "status": "modified", "additions": 3, "deletions": 124, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -58,7 +58,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-dfa.h\"\n #include \"profile.h\"\n #include \"params.h\"\n-#include \"tree-chkp.h\"\n #include \"context.h\"\n #include \"gimplify.h\"\n #include \"stringpool.h\"\n@@ -1275,7 +1274,6 @@ cgraph_edge::redirect_call_stmt_to_callee (void)\n   tree decl = gimple_call_fndecl (e->call_stmt);\n   gcall *new_stmt;\n   gimple_stmt_iterator gsi;\n-  bool skip_bounds = false;\n \n   if (e->speculative)\n     {\n@@ -1333,24 +1331,6 @@ cgraph_edge::redirect_call_stmt_to_callee (void)\n \t  e->caller->set_call_stmt_including_clones (e->call_stmt, new_stmt,\n \t\t\t\t\t\t     false);\n \t  e->count = gimple_bb (e->call_stmt)->count;\n-\n-\t  /* Fix edges for BUILT_IN_CHKP_BNDRET calls attached to the\n-\t     processed call stmt.  */\n-\t  if (gimple_call_with_bounds_p (new_stmt)\n-\t      && gimple_call_lhs (new_stmt)\n-\t      && chkp_retbnd_call_by_val (gimple_call_lhs (e2->call_stmt)))\n-\t    {\n-\t      tree dresult = gimple_call_lhs (new_stmt);\n-\t      tree iresult = gimple_call_lhs (e2->call_stmt);\n-\t      gcall *dbndret = chkp_retbnd_call_by_val (dresult);\n-\t      gcall *ibndret = chkp_retbnd_call_by_val (iresult);\n-\t      struct cgraph_edge *iedge\n-\t\t= e2->caller->cgraph_node::get_edge (ibndret);\n-\n-\t      if (dbndret)\n-\t\tiedge->caller->create_edge (iedge->callee, dbndret, e->count);\n-\t    }\n-\n \t  e2->speculative = false;\n \t  e2->count = gimple_bb (e2->call_stmt)->count;\n \t  ref->speculative = false;\n@@ -1364,16 +1344,9 @@ cgraph_edge::redirect_call_stmt_to_callee (void)\n \t}\n     }\n \n-  /* We might propagate instrumented function pointer into\n-     not instrumented function and vice versa.  In such a\n-     case we need to either fix function declaration or\n-     remove bounds from call statement.  */\n-  if (flag_check_pointer_bounds && e->callee)\n-    skip_bounds = chkp_redirect_edge (e);\n \n   if (e->indirect_unknown_callee\n-      || (decl == e->callee->decl\n-\t  && !skip_bounds))\n+      || decl == e->callee->decl)\n     return e->call_stmt;\n \n   if (flag_checking && decl)\n@@ -1395,8 +1368,7 @@ cgraph_edge::redirect_call_stmt_to_callee (void)\n \t}\n     }\n \n-  if (e->callee->clone.combined_args_to_skip\n-      || skip_bounds)\n+  if (e->callee->clone.combined_args_to_skip)\n     {\n       int lp_nr;\n \n@@ -1405,9 +1377,6 @@ cgraph_edge::redirect_call_stmt_to_callee (void)\n \tnew_stmt\n \t  = gimple_call_copy_skip_args (new_stmt,\n \t\t\t\t\te->callee->clone.combined_args_to_skip);\n-      if (skip_bounds)\n-\tnew_stmt = chkp_copy_call_skip_bounds (new_stmt);\n-\n       tree old_fntype = gimple_call_fntype (e->call_stmt);\n       gimple_call_set_fndecl (new_stmt, e->callee->decl);\n       cgraph_node *origin = e->callee;\n@@ -1906,12 +1875,6 @@ cgraph_node::remove (void)\n       call_site_hash = NULL;\n     }\n \n-  if (instrumented_version)\n-    {\n-      instrumented_version->instrumented_version = NULL;\n-      instrumented_version = NULL;\n-    }\n-\n   symtab->release_symbol (this, uid);\n }\n \n@@ -2234,11 +2197,6 @@ cgraph_node::dump (FILE *f)\n       if (edge->indirect_info->polymorphic)\n \tedge->indirect_info->context.dump (f);\n     }\n-\n-  if (instrumentation_clone)\n-    fprintf (f, \"  Is instrumented version.\\n\");\n-  else if (instrumented_version)\n-    fprintf (f, \"  Has instrumented version.\\n\");\n }\n \n /* Dump call graph node NODE to stderr.  */\n@@ -3335,9 +3293,7 @@ cgraph_node::verify_node (void)\n           error_found = true;\n \t}\n       for (i = 0; iterate_reference (i, ref); i++)\n-\tif (ref->use == IPA_REF_CHKP)\n-\t  ;\n-\telse if (ref->use != IPA_REF_ALIAS)\n+\tif (ref->use != IPA_REF_ALIAS)\n \t  {\n \t    error (\"Alias has non-alias reference\");\n \t    error_found = true;\n@@ -3356,77 +3312,6 @@ cgraph_node::verify_node (void)\n \t}\n     }\n \n-  /* Check instrumented version reference.  */\n-  if (instrumented_version\n-      && instrumented_version->instrumented_version != this)\n-    {\n-      error (\"Instrumentation clone does not reference original node\");\n-      error_found = true;\n-    }\n-\n-  /* Cannot have orig_decl for not instrumented nodes.  */\n-  if (!instrumentation_clone && orig_decl)\n-    {\n-      error (\"Not instrumented node has non-NULL original declaration\");\n-      error_found = true;\n-    }\n-\n-  /* If original not instrumented node still exists then we may check\n-     original declaration is set properly.  */\n-  if (instrumented_version\n-      && orig_decl\n-      && orig_decl != instrumented_version->decl)\n-    {\n-      error (\"Instrumented node has wrong original declaration\");\n-      error_found = true;\n-    }\n-\n-  /* Check all nodes have chkp reference to their instrumented versions.  */\n-  if (analyzed\n-      && instrumented_version\n-      && !instrumentation_clone)\n-    {\n-      bool ref_found = false;\n-      int i;\n-      struct ipa_ref *ref;\n-\n-      for (i = 0; iterate_reference (i, ref); i++)\n-\tif (ref->use == IPA_REF_CHKP)\n-\t  {\n-\t    if (ref_found)\n-\t      {\n-\t\terror (\"Node has more than one chkp reference\");\n-\t\terror_found = true;\n-\t      }\n-\t    if (ref->referred != instrumented_version)\n-\t      {\n-\t\terror (\"Wrong node is referenced with chkp reference\");\n-\t\terror_found = true;\n-\t      }\n-\t    ref_found = true;\n-\t  }\n-\n-      if (!ref_found)\n-\t{\n-\t  error (\"Analyzed node has no reference to instrumented version\");\n-\t  error_found = true;\n-\t}\n-    }\n-\n-  if (instrumentation_clone\n-      && DECL_BUILT_IN_CLASS (decl) == NOT_BUILT_IN)\n-    {\n-      tree name = DECL_ASSEMBLER_NAME (decl);\n-      tree orig_name = DECL_ASSEMBLER_NAME (orig_decl);\n-\n-      if (!IDENTIFIER_TRANSPARENT_ALIAS (name)\n-\t  || TREE_CHAIN (name) != orig_name)\n-\t{\n-\t  error (\"Alias chain for instrumented node is broken\");\n-\t  error_found = true;\n-\t}\n-    }\n-\n   if (analyzed && thunk.thunk_p)\n     {\n       if (!callees)\n@@ -3444,12 +3329,6 @@ cgraph_node::verify_node (void)\n \t  error (\"Thunk is not supposed to have body\");\n           error_found = true;\n         }\n-      if (thunk.add_pointer_bounds_args\n-\t  && !instrumented_version->semantically_equivalent_p (callees->callee))\n-\t{\n-\t  error (\"Instrumentation thunk has wrong edge callee\");\n-          error_found = true;\n-\t}\n     }\n   else if (analyzed && gimple_has_body_p (decl)\n \t   && !TREE_ASM_WRITTEN (decl)"}, {"sha": "f0f9961b1b5be1f16bf2897b79dbedbddf103a81", "filename": "gcc/cgraph.h", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -1362,13 +1362,6 @@ struct GTY((tag (\"SYMTAB_FUNCTION\"))) cgraph_node : public symtab_node {\n   cgraph_node *prev_sibling_clone;\n   cgraph_node *clones;\n   cgraph_node *clone_of;\n-  /* If instrumentation_clone is 1 then instrumented_version points\n-     to the original function used to make instrumented version.\n-     Otherwise points to instrumented version of the function.  */\n-  cgraph_node *instrumented_version;\n-  /* If instrumentation_clone is 1 then orig_decl is the original\n-     function declaration.  */\n-  tree orig_decl;\n   /* For functions with many calls sites it holds map from call expression\n      to the edge to speed up cgraph_edge function.  */\n   hash_table<cgraph_edge_hasher> *GTY(()) call_site_hash;\n@@ -1433,9 +1426,6 @@ struct GTY((tag (\"SYMTAB_FUNCTION\"))) cgraph_node : public symtab_node {\n   unsigned calls_comdat_local : 1;\n   /* True if node has been created by merge operation in IPA-ICF.  */\n   unsigned icf_merged: 1;\n-  /* True when function is clone created for Pointer Bounds Checker\n-     instrumentation.  */\n-  unsigned instrumentation_clone : 1;\n   /* True if call to node can't result in a call to free, munmap or\n      other operation that could make previously non-trapping memory\n      accesses trapping.  */\n@@ -2386,9 +2376,6 @@ bool ipa_discover_readonly_nonaddressable_vars (void);\n /* In varpool.c  */\n tree ctor_for_folding (tree);\n \n-/* In tree-chkp.c  */\n-extern bool chkp_function_instrumented_p (tree fndecl);\n-\n /* In ipa-inline-analysis.c  */\n void initialize_inline_failed (struct cgraph_edge *);\n bool speculation_useful_p (struct cgraph_edge *e, bool anticipate_inlining);\n@@ -2449,8 +2436,6 @@ symtab_node::get_alias_target (void)\n {\n   ipa_ref *ref = NULL;\n   iterate_reference (0, ref);\n-  if (ref->use == IPA_REF_CHKP)\n-    iterate_reference (1, ref);\n   gcc_checking_assert (ref->use == IPA_REF_ALIAS);\n   return ref->referred;\n }\n@@ -2905,12 +2890,6 @@ inline bool\n cgraph_node::can_remove_if_no_direct_calls_and_refs_p (void)\n {\n   gcc_checking_assert (!global.inlined_to);\n-  /* Instrumentation clones should not be removed before\n-     instrumentation happens.  New callers may appear after\n-     instrumentation.  */\n-  if (instrumentation_clone\n-      && !chkp_function_instrumented_p (decl))\n-    return false;\n   /* Extern inlines can always go, we will use the external definition.  */\n   if (DECL_EXTERNAL (decl))\n     return true;\n@@ -3318,18 +3297,6 @@ ipa_polymorphic_call_context::useless_p () const\n   return (!outer_type && !speculative_outer_type);\n }\n \n-/* Return true if NODE is local.  Instrumentation clones are counted as local\n-   only when original function is local.  */\n-\n-static inline bool\n-cgraph_local_p (cgraph_node *node)\n-{\n-  if (!node->instrumentation_clone || !node->instrumented_version)\n-    return node->local.local;\n-\n-  return node->local.local && node->instrumented_version->local.local;\n-}\n-\n /* When using fprintf (or similar), problems can arise with\n    transient generated strings.  Many string-generation APIs\n    only support one result being alive at once (e.g. by"}, {"sha": "c2ad5cf2ef71f1a80b0135c4d1158942125add4a", "filename": "gcc/cgraphbuild.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fcgraphbuild.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fcgraphbuild.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphbuild.c?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -429,11 +429,6 @@ cgraph_edge::rebuild_edges (void)\n     }\n   record_eh_tables (node, cfun);\n   gcc_assert (!node->global.inlined_to);\n-\n-  if (node->instrumented_version\n-      && !node->instrumentation_clone)\n-    node->create_reference (node->instrumented_version, IPA_REF_CHKP, NULL);\n-\n   return 0;\n }\n \n@@ -464,10 +459,6 @@ cgraph_edge::rebuild_references (void)\n \tnode->record_stmt_references (gsi_stmt (gsi));\n     }\n   record_eh_tables (node, cfun);\n-\n-  if (node->instrumented_version\n-      && !node->instrumentation_clone)\n-    node->create_reference (node->instrumented_version, IPA_REF_CHKP, NULL);\n }\n \n namespace {"}, {"sha": "04b6919be48b8fa9fd709fb126e3653910f3ff23", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -202,7 +202,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"pass_manager.h\"\n #include \"tree-nested.h\"\n #include \"dbgcnt.h\"\n-#include \"tree-chkp.h\"\n #include \"lto-section-names.h\"\n #include \"stringpool.h\"\n #include \"attribs.h\"\n@@ -865,9 +864,6 @@ varpool_node::finalize_decl (tree decl)\n       || (node->no_reorder\n \t  && symtab->state == EXPANSION))\n     node->assemble_decl ();\n-\n-  if (DECL_INITIAL (decl))\n-    chkp_register_var_initializer (decl);\n }\n \n /* EDGE is an polymorphic call.  Mark all possible targets as reachable\n@@ -941,10 +937,6 @@ walk_polymorphic_call_targets (hash_set<void *> *reachable_call_targets,\n \t  edge->make_direct (target);\n \t  edge->redirect_call_stmt_to_callee ();\n \n-\t  /* Call to __builtin_unreachable shouldn't be instrumented.  */\n-\t  if (!targets.length ())\n-\t    gimple_call_set_with_bounds (edge->call_stmt, false);\n-\n \t  if (symtab->dump_file)\n \t    {\n \t      fprintf (symtab->dump_file,\n@@ -1924,7 +1916,6 @@ cgraph_node::expand_thunk (bool output_asm_thunks, bool force_gimple_thunk)\n       call = gimple_build_call_vec (build_fold_addr_expr_loc (0, alias), vargs);\n       callees->call_stmt = call;\n       gimple_call_set_from_thunk (call, true);\n-      gimple_call_set_with_bounds (call, instrumentation_clone);\n \n       /* Return slot optimization is always possible and in fact requred to\n          return values with DECL_BY_REFERENCE.  */\n@@ -1942,17 +1933,6 @@ cgraph_node::expand_thunk (bool output_asm_thunks, bool force_gimple_thunk)\n       gsi_insert_after (&bsi, call, GSI_NEW_STMT);\n       if (!alias_is_noreturn)\n \t{\n-\t  if (instrumentation_clone\n-\t      && !DECL_BY_REFERENCE (resdecl)\n-\t      && restmp\n-\t      && BOUNDED_P (restmp))\n-\t    {\n-\t      resbnd = chkp_insert_retbnd_call (NULL, restmp, &bsi);\n-\t      create_edge (get_create (gimple_call_fndecl (gsi_stmt (bsi))),\n-\t\t\t   as_a <gcall *> (gsi_stmt (bsi)),\n-\t\t\t   callees->count);\n-\t    }\n-\n \t  if (restmp && !this_adjusting\n \t      && (fixed_offset || virtual_offset))\n \t    {\n@@ -2503,13 +2483,9 @@ void\n symbol_table::output_weakrefs (void)\n {\n   symtab_node *node;\n-  cgraph_node *cnode;\n   FOR_EACH_SYMBOL (node)\n     if (node->alias\n         && !TREE_ASM_WRITTEN (node->decl)\n-\t&& (!(cnode = dyn_cast <cgraph_node *> (node))\n-\t    || !cnode->instrumented_version\n-\t    || !TREE_ASM_WRITTEN (cnode->instrumented_version->decl))\n \t&& node->weakref)\n       {\n \ttree target;"}, {"sha": "559391446bbeb55e4afccc3648162812381d391f", "filename": "gcc/chkp-builtins.def", "status": "removed", "additions": 0, "deletions": 71, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Fchkp-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Fchkp-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fchkp-builtins.def?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,71 +0,0 @@\n-/* This file contains the definitions and documentation for the\n-   builtins used in the GNU compiler.\n-   Copyright (C) 2013-2018 Free Software Foundation, Inc.\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify it under\n-the terms of the GNU General Public License as published by the Free\n-Software Foundation; either version 3, or (at your option) any later\n-version.\n-\n-GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GCC; see the file COPYING3.  If not see\n-<http://www.gnu.org/licenses/>.  */\n-\n-/* Before including this file, you should define macros:\n-\n-      DEF_BUILTIN_STUB(ENUM, NAME)\n-      DEF_CHKP_BUILTIN(ENUM, NAME, TYPE, ATTRS)\n-\n-   See builtins.def for details.  */\n-\n-/* Following builtins are used by compiler for Pointer Bounds Checker\n-   instrumentation.  Currently these generic builtins are not\n-   implemented and target has to provide his own version.  See\n-   builtin_chkp_function target hook documentation for more details.  */\n-DEF_BUILTIN_STUB (BUILT_IN_CHKP_INTERSECT, \"__chkp_intersect\")\n-DEF_BUILTIN_STUB (BUILT_IN_CHKP_SIZEOF, \"__chkp_sizeof\")\n-DEF_BUILTIN_STUB (BUILT_IN_CHKP_NARROW, \"__chkp_narrow\")\n-DEF_CHKP_BUILTIN (BUILT_IN_CHKP_BNDCL, \"__chkp_bndcl\", BT_FN_VOID_PTR_BND, ATTR_NOTHROW_LEAF_LIST)\n-DEF_CHKP_BUILTIN (BUILT_IN_CHKP_BNDCU, \"__chkp_bndcu\", BT_FN_VOID_PTR_BND, ATTR_NOTHROW_LEAF_LIST)\n-DEF_CHKP_BUILTIN (BUILT_IN_CHKP_BNDSTX, \"__chkp_bndstx\", BT_FN_VOID_CONST_PTR_BND_CONST_PTR, ATTR_NOTHROW_LEAF_LIST)\n-DEF_CHKP_BUILTIN (BUILT_IN_CHKP_BNDLDX, \"__chkp_bndldx\", BT_FN_CONST_PTR_CONST_PTR_CONST_PTR, ATTR_NOTHROW_LEAF_LIST)\n-DEF_CHKP_BUILTIN (BUILT_IN_CHKP_BNDRET, \"__chkp_bndret\", BT_FN_BND_CONST_PTR, ATTR_CONST_NOTHROW_LEAF_LIST)\n-DEF_CHKP_BUILTIN (BUILT_IN_CHKP_BNDMK, \"__chkp_bndmk\", BT_FN_BND_CONST_PTR_SIZE, ATTR_CONST_NOTHROW_LEAF_LIST)\n-DEF_CHKP_BUILTIN (BUILT_IN_CHKP_EXTRACT_LOWER, \"__chkp_extract_lower\", BT_FN_CONST_PTR_BND, ATTR_CONST_NOTHROW_LEAF_LIST)\n-DEF_CHKP_BUILTIN (BUILT_IN_CHKP_EXTRACT_UPPER, \"__chkp_extract_upper\", BT_FN_CONST_PTR_BND, ATTR_CONST_NOTHROW_LEAF_LIST)\n-\n-/* Pointer Bounds Checker builtins for users.\n-   All builtins calls are expanded in the\n-   Pointer Bounds Checker pass.  */\n-DEF_CHKP_BUILTIN (BUILT_IN_CHKP_SET_PTR_BOUNDS, \"__bnd_set_ptr_bounds\", BT_FN_PTR_CONST_PTR_SIZE, ATTR_CONST_NOTHROW_LEAF_LIST)\n-DEF_CHKP_BUILTIN (BUILT_IN_CHKP_INIT_PTR_BOUNDS, \"__bnd_init_ptr_bounds\", BT_FN_PTR_CONST_PTR, ATTR_CONST_NOTHROW_LEAF_LIST)\n-DEF_CHKP_BUILTIN (BUILT_IN_CHKP_NULL_PTR_BOUNDS, \"__bnd_null_ptr_bounds\", BT_FN_PTR_CONST_PTR, ATTR_CONST_NOTHROW_LEAF_LIST)\n-DEF_CHKP_BUILTIN (BUILT_IN_CHKP_COPY_PTR_BOUNDS, \"__bnd_copy_ptr_bounds\", BT_FN_PTR_CONST_PTR_CONST_PTR, ATTR_CONST_NOTHROW_LEAF_LIST)\n-DEF_CHKP_BUILTIN (BUILT_IN_CHKP_NARROW_PTR_BOUNDS, \"__bnd_narrow_ptr_bounds\", BT_FN_PTR_CONST_PTR_CONST_PTR_SIZE, ATTR_CONST_NOTHROW_LEAF_LIST)\n-DEF_CHKP_BUILTIN (BUILT_IN_CHKP_STORE_PTR_BOUNDS, \"__bnd_store_ptr_bounds\", BT_FN_VOID_PTRPTR_CONST_PTR, ATTR_NOTHROW_LEAF_LIST)\n-DEF_CHKP_BUILTIN (BUILT_IN_CHKP_CHECK_PTR_LBOUNDS, \"__bnd_chk_ptr_lbounds\", BT_FN_VOID_CONST_PTR, ATTR_NOTHROW_LEAF_LIST)\n-DEF_CHKP_BUILTIN (BUILT_IN_CHKP_CHECK_PTR_UBOUNDS, \"__bnd_chk_ptr_ubounds\", BT_FN_VOID_CONST_PTR, ATTR_NOTHROW_LEAF_LIST)\n-DEF_CHKP_BUILTIN (BUILT_IN_CHKP_CHECK_PTR_BOUNDS, \"__bnd_chk_ptr_bounds\", BT_FN_VOID_CONST_PTR_SIZE, ATTR_NOTHROW_LEAF_LIST)\n-DEF_CHKP_BUILTIN (BUILT_IN_CHKP_GET_PTR_LBOUND, \"__bnd_get_ptr_lbound\", BT_FN_CONST_PTR_CONST_PTR, ATTR_CONST_NOTHROW_LEAF_LIST)\n-DEF_CHKP_BUILTIN (BUILT_IN_CHKP_GET_PTR_UBOUND, \"__bnd_get_ptr_ubound\", BT_FN_CONST_PTR_CONST_PTR, ATTR_CONST_NOTHROW_LEAF_LIST)\n-\n-/* Pointer Bounds Checker specific versions of string functions.  */\n-DEF_CHKP_BUILTIN (BUILT_IN_CHKP_MEMCPY_NOBND, \"chkp_memcpy_nobnd\", BT_FN_PTR_PTR_CONST_PTR_SIZE, ATTR_RET1_NOTHROW_NONNULL_LEAF)\n-DEF_CHKP_BUILTIN (BUILT_IN_CHKP_MEMCPY_NOCHK, \"chkp_memcpy_nochk\", BT_FN_PTR_PTR_CONST_PTR_SIZE, ATTR_RET1_NOTHROW_NONNULL_LEAF)\n-DEF_CHKP_BUILTIN (BUILT_IN_CHKP_MEMCPY_NOBND_NOCHK, \"chkp_memcpy_nobnd_nochk\", BT_FN_PTR_PTR_CONST_PTR_SIZE, ATTR_RET1_NOTHROW_NONNULL_LEAF)\n-DEF_CHKP_BUILTIN (BUILT_IN_CHKP_MEMMOVE_NOBND, \"chkp_memmove_nobnd\", BT_FN_PTR_PTR_CONST_PTR_SIZE, ATTR_RET1_NOTHROW_NONNULL_LEAF)\n-DEF_CHKP_BUILTIN (BUILT_IN_CHKP_MEMMOVE_NOCHK, \"chkp_memmove_nochk\", BT_FN_PTR_PTR_CONST_PTR_SIZE, ATTR_RET1_NOTHROW_NONNULL_LEAF)\n-DEF_CHKP_BUILTIN (BUILT_IN_CHKP_MEMMOVE_NOBND_NOCHK, \"chkp_memmove_nobnd_nochk\", BT_FN_PTR_PTR_CONST_PTR_SIZE, ATTR_RET1_NOTHROW_NONNULL_LEAF)\n-DEF_CHKP_BUILTIN (BUILT_IN_CHKP_MEMPCPY_NOBND, \"chkp_mempcpy_nobnd\", BT_FN_PTR_PTR_CONST_PTR_SIZE, ATTR_NOTHROW_NONNULL_LEAF)\n-DEF_CHKP_BUILTIN (BUILT_IN_CHKP_MEMPCPY_NOCHK, \"chkp_mempcpy_nochk\", BT_FN_PTR_PTR_CONST_PTR_SIZE, ATTR_NOTHROW_NONNULL_LEAF)\n-DEF_CHKP_BUILTIN (BUILT_IN_CHKP_MEMPCPY_NOBND_NOCHK, \"chkp_mempcpy_nobnd_nochk\", BT_FN_PTR_PTR_CONST_PTR_SIZE, ATTR_NOTHROW_NONNULL_LEAF)\n-DEF_CHKP_BUILTIN (BUILT_IN_CHKP_MEMSET_NOBND, \"chkp_memset_nobnd\", BT_FN_PTR_PTR_INT_SIZE, ATTR_RET1_NOTHROW_NONNULL_LEAF)\n-DEF_CHKP_BUILTIN (BUILT_IN_CHKP_MEMSET_NOCHK, \"chkp_memset_nochk\", BT_FN_PTR_PTR_INT_SIZE, ATTR_RET1_NOTHROW_NONNULL_LEAF)\n-DEF_CHKP_BUILTIN (BUILT_IN_CHKP_MEMSET_NOBND_NOCHK, \"chkp_memset_nobnd_nochk\", BT_FN_PTR_PTR_INT_SIZE, ATTR_RET1_NOTHROW_NONNULL_LEAF)"}, {"sha": "664240e7e8dd0c8c099917c25e5d279b21afa565", "filename": "gcc/common/config/i386/i386-common.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -273,7 +273,7 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA2_AVX512F_UNSET \\\n   (OPTION_MASK_ISA_AVX5124FMAPS_UNSET | OPTION_MASK_ISA_AVX5124VNNIW_UNSET)\n #define OPTION_MASK_ISA2_GENERAL_REGS_ONLY_UNSET \\\n-  (OPTION_MASK_ISA2_AVX512F_UNSET | OPTION_MASK_ISA_MPX)\n+  (OPTION_MASK_ISA2_AVX512F_UNSET)\n \n /* Implement TARGET_HANDLE_OPTION.  */\n \n@@ -291,7 +291,7 @@ ix86_handle_option (struct gcc_options *opts,\n     case OPT_mgeneral_regs_only:\n       if (value)\n \t{\n-\t  /* Disable MPX, MMX, SSE and x87 instructions if only\n+\t  /* Disable MMX, SSE and x87 instructions if only\n \t     general registers are allowed.  */\n \t  opts->x_ix86_isa_flags\n \t    &= ~OPTION_MASK_ISA_GENERAL_REGS_ONLY_UNSET;"}, {"sha": "132365743e132b24b693e8fa0c5ae26245de742f", "filename": "gcc/config/i386/constraints.md", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fconfig%2Fi386%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fconfig%2Fi386%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fconstraints.md?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -94,9 +94,6 @@\n (define_register_constraint \"v\" \"TARGET_SSE ? ALL_SSE_REGS : NO_REGS\"\n  \"Any EVEX encodable SSE register (@code{%xmm0-%xmm31}).\")\n \n-(define_register_constraint \"w\" \"TARGET_MPX ? BND_REGS : NO_REGS\"\n- \"@internal Any bound register.\")\n-\n ;; We use the Y prefix to denote any number of conditional register sets:\n ;;  z\tFirst SSE register.\n ;;  d\tany EVEX encodable SSE register for AVX512BW target or\n@@ -319,11 +316,3 @@\n (define_address_constraint \"Ts\"\n   \"Address operand without segment register\"\n   (match_operand 0 \"address_no_seg_operand\"))\n-\n-(define_address_constraint \"Ti\"\n-  \"MPX address operand without index\"\n-  (match_operand 0 \"address_mpx_no_index_operand\"))\n-\n-(define_address_constraint \"Tb\"\n-  \"MPX address operand without base\"\n-  (match_operand 0 \"address_mpx_no_base_operand\"))"}, {"sha": "886cf1b6ecc73357bfb99b6d8af2c0cc34bee6ee", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -47,7 +47,6 @@ DEF_PRIMITIVE_TYPE (UCHAR, unsigned_char_type_node)\n DEF_PRIMITIVE_TYPE (QI, char_type_node)\n DEF_PRIMITIVE_TYPE (HI, intHI_type_node)\n DEF_PRIMITIVE_TYPE (SI, intSI_type_node)\n-DEF_PRIMITIVE_TYPE (BND, pointer_bounds_type_node)\n # ??? Logically this should be intDI_type_node, but that maps to \"long\"\n # with 64-bit, and that's not how the emmintrin.h is written.  Again, \n # changing this would change name mangling.\n@@ -1208,17 +1207,6 @@ DEF_FUNCTION_TYPE_ALIAS (V4SF_FTYPE_V4SF_V4SF, TF)\n DEF_FUNCTION_TYPE_ALIAS (V4SI_FTYPE_V4SI_V4SI, TF)\n DEF_FUNCTION_TYPE_ALIAS (V8HI_FTYPE_V8HI_V8HI, TF)\n \n-# MPX builtins\n-DEF_FUNCTION_TYPE (BND, PCVOID, ULONG)\n-DEF_FUNCTION_TYPE (VOID, PCVOID, BND)\n-DEF_FUNCTION_TYPE (VOID, PCVOID, BND, PCVOID)\n-DEF_FUNCTION_TYPE (BND, PCVOID, PCVOID)\n-DEF_FUNCTION_TYPE (BND, PCVOID)\n-DEF_FUNCTION_TYPE (BND, BND, BND)\n-DEF_FUNCTION_TYPE (PVOID, PCVOID, BND, ULONG)\n-DEF_FUNCTION_TYPE (ULONG, VOID)\n-DEF_FUNCTION_TYPE (PVOID, BND)\n-\n #GFNI builtins\n DEF_FUNCTION_TYPE (V64QI, V64QI, V64QI, INT)\n DEF_FUNCTION_TYPE (V64QI, V64QI, V64QI, INT, V64QI, UDI)"}, {"sha": "383f9cc890c67648756f9b2dea5d2c72658edb6b", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 1, "deletions": 23, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -2847,29 +2847,7 @@ BDESC_FIRST (special_args2, SPECIAL_ARGS2,\n \tOPTION_MASK_ISA_WBNOINVD, CODE_FOR_wbnoinvd, \"__builtin_ia32_wbnoinvd\", IX86_BUILTIN_WBNOINVD, UNKNOWN, (int) VOID_FTYPE_VOID)\n BDESC (OPTION_MASK_ISA_MOVDIR64B, CODE_FOR_nothing, \"__builtin_ia32_movdir64b\", IX86_BUILTIN_MOVDIR64B, UNKNOWN, (int) VOID_FTYPE_PVOID_PCVOID)\n \n-BDESC_END (SPECIAL_ARGS2, MPX)\n-\n-\n-/* Builtins for MPX.  */\n-BDESC_FIRST (mpx, MPX,\n-       OPTION_MASK_ISA_MPX, (enum insn_code)0, \"__builtin_ia32_bndstx\", IX86_BUILTIN_BNDSTX, UNKNOWN, (int) VOID_FTYPE_PCVOID_BND_PCVOID)\n-BDESC (OPTION_MASK_ISA_MPX, (enum insn_code)0, \"__builtin_ia32_bndcl\", IX86_BUILTIN_BNDCL, UNKNOWN, (int) VOID_FTYPE_PCVOID_BND)\n-BDESC (OPTION_MASK_ISA_MPX, (enum insn_code)0, \"__builtin_ia32_bndcu\", IX86_BUILTIN_BNDCU, UNKNOWN, (int) VOID_FTYPE_PCVOID_BND)\n-\n-BDESC_END (MPX, MPX_CONST)\n-\n-/* Const builtins for MPX.  */\n-BDESC_FIRST (mpx_const, MPX_CONST,\n-       OPTION_MASK_ISA_MPX, (enum insn_code)0, \"__builtin_ia32_bndmk\", IX86_BUILTIN_BNDMK, UNKNOWN, (int) BND_FTYPE_PCVOID_ULONG)\n-BDESC (OPTION_MASK_ISA_MPX, (enum insn_code)0, \"__builtin_ia32_bndldx\", IX86_BUILTIN_BNDLDX, UNKNOWN, (int) BND_FTYPE_PCVOID_PCVOID)\n-BDESC (OPTION_MASK_ISA_MPX, (enum insn_code)0, \"__builtin_ia32_narrow_bounds\", IX86_BUILTIN_BNDNARROW, UNKNOWN, (int) PVOID_FTYPE_PCVOID_BND_ULONG)\n-BDESC (OPTION_MASK_ISA_MPX, (enum insn_code)0, \"__builtin_ia32_bndint\", IX86_BUILTIN_BNDINT, UNKNOWN, (int) BND_FTYPE_BND_BND)\n-BDESC (OPTION_MASK_ISA_MPX, (enum insn_code)0, \"__builtin_ia32_sizeof\", IX86_BUILTIN_SIZEOF, UNKNOWN, (int) ULONG_FTYPE_VOID)\n-BDESC (OPTION_MASK_ISA_MPX, (enum insn_code)0, \"__builtin_ia32_bndlower\", IX86_BUILTIN_BNDLOWER, UNKNOWN, (int) PVOID_FTYPE_BND)\n-BDESC (OPTION_MASK_ISA_MPX, (enum insn_code)0, \"__builtin_ia32_bndupper\", IX86_BUILTIN_BNDUPPER, UNKNOWN, (int) PVOID_FTYPE_BND)\n-BDESC (OPTION_MASK_ISA_MPX, (enum insn_code)0, \"__builtin_ia32_bndret\", IX86_BUILTIN_BNDRET, UNKNOWN, (int) BND_FTYPE_PCVOID)\n-\n-BDESC_END (MPX_CONST, MULTI_ARG)\n+BDESC_END (SPECIAL_ARGS2, MULTI_ARG)\n \n /* FMA4 and XOP.  */\n BDESC_FIRST (multi_arg, MULTI_ARG,"}, {"sha": "005e1a5b3089e1ad91ea0a626acf7872cd23b106", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -508,8 +508,6 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n     def_or_undef (parse_in, \"__XSAVEC__\");\n   if (isa_flag & OPTION_MASK_ISA_XSAVES)\n     def_or_undef (parse_in, \"__XSAVES__\");\n-  if (isa_flag2 & OPTION_MASK_ISA_MPX)\n-    def_or_undef (parse_in, \"__MPX__\");\n   if (isa_flag & OPTION_MASK_ISA_CLWB)\n     def_or_undef (parse_in, \"__CLWB__\");\n   if (isa_flag2 & OPTION_MASK_ISA_MWAITX)"}, {"sha": "d1d59633dc0b25bfbd2170deec5efd965c841e1a", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -232,8 +232,6 @@ extern void ix86_expand_sse2_mulv4si3 (rtx, rtx, rtx);\n extern void ix86_expand_sse2_mulvxdi3 (rtx, rtx, rtx);\n extern void ix86_expand_sse2_abs (rtx, rtx);\n \n-extern bool ix86_bnd_prefixed_insn_p (rtx);\n-\n /* In i386-c.c  */\n extern void ix86_target_macros (void);\n extern void ix86_register_pragmas (void);"}, {"sha": "de32377efb3db31baf98d5ab98943c4bb429acc5", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 10, "deletions": 998, "changes": 1008, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -73,8 +73,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"builtins.h\"\n #include \"rtl-iter.h\"\n #include \"tree-iterator.h\"\n-#include \"tree-chkp.h\"\n-#include \"rtl-chkp.h\"\n #include \"dbgcnt.h\"\n #include \"case-cfn-macros.h\"\n #include \"regrename.h\"\n@@ -263,8 +261,6 @@ enum reg_class const regclass_map[FIRST_PSEUDO_REGISTER] =\n   /* Mask registers.  */\n   MASK_REGS, MASK_EVEX_REGS, MASK_EVEX_REGS, MASK_EVEX_REGS,\n   MASK_EVEX_REGS, MASK_EVEX_REGS, MASK_EVEX_REGS, MASK_EVEX_REGS,\n-  /* MPX bound registers */\n-  BND_REGS, BND_REGS, BND_REGS, BND_REGS,\n };\n \n /* The \"default\" register map used in 32bit mode.  */\n@@ -2765,7 +2761,6 @@ ix86_target_string (HOST_WIDE_INT isa, HOST_WIDE_INT isa2,\n   static struct ix86_target_opts isa2_opts[] =\n   {\n     { \"-mcx16\",\t\tOPTION_MASK_ISA_CX16 },\n-    { \"-mmpx\",\t\tOPTION_MASK_ISA_MPX },\n     { \"-mvaes\",\t\tOPTION_MASK_ISA_VAES },\n     { \"-mrdpid\",\tOPTION_MASK_ISA_RDPID },\n     { \"-mpconfig\",\tOPTION_MASK_ISA_PCONFIG },\n@@ -3433,7 +3428,7 @@ ix86_option_override_internal (bool main_args_p,\n   const wide_int_bitmask PTA_AVX512ER (HOST_WIDE_INT_1U << 41);\n   const wide_int_bitmask PTA_AVX512PF (HOST_WIDE_INT_1U << 42);\n   const wide_int_bitmask PTA_AVX512CD (HOST_WIDE_INT_1U << 43);\n-  const wide_int_bitmask PTA_MPX (HOST_WIDE_INT_1U << 44);\n+  /* Hole after PTA_MPX was removed.  */\n   const wide_int_bitmask PTA_SHA (HOST_WIDE_INT_1U << 45);\n   const wide_int_bitmask PTA_PREFETCHWT1 (HOST_WIDE_INT_1U << 46);\n   const wide_int_bitmask PTA_CLFLUSHOPT (HOST_WIDE_INT_1U << 47);\n@@ -4135,9 +4130,6 @@ ix86_option_override_internal (bool main_args_p,\n \tif (((processor_alias_table[i].flags & PTA_AVX512VL) != 0)\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_AVX512VL))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_AVX512VL;\n-\tif (((processor_alias_table[i].flags & PTA_MPX) != 0)\n-            && !(opts->x_ix86_isa_flags2_explicit & OPTION_MASK_ISA_MPX))\n-          opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA_MPX;\n \tif (((processor_alias_table[i].flags & PTA_AVX512VBMI) != 0)\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_AVX512VBMI))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_AVX512VBMI;\n@@ -4213,12 +4205,6 @@ ix86_option_override_internal (bool main_args_p,\n \tbreak;\n       }\n \n-  if (TARGET_X32 && (opts->x_ix86_isa_flags2 & OPTION_MASK_ISA_MPX))\n-    error (\"Intel MPX does not support x32\");\n-\n-  if (TARGET_X32 && (ix86_isa_flags2 & OPTION_MASK_ISA_MPX))\n-    error (\"Intel MPX does not support x32\");\n-\n   if (i == pta_size)\n     {\n       error (main_args_p\n@@ -5054,11 +5040,6 @@ ix86_conditional_register_usage (void)\n       for (i = FIRST_MASK_REG; i <= LAST_MASK_REG; i++)\n \tfixed_regs[i] = call_used_regs[i] = 1, reg_names[i] = \"\";\n     }\n-\n-  /* If MPX is disabled, squash the registers.  */\n-  if (! TARGET_MPX)\n-    for (i = FIRST_BND_REG; i <= LAST_BND_REG; i++)\n-      fixed_regs[i] = call_used_regs[i] = 1, reg_names[i] = \"\";\n }\n \n /* Canonicalize a comparison from one we don't have to one we do have.  */\n@@ -5392,7 +5373,6 @@ ix86_valid_target_attribute_inner_p (tree args, char *p_strings[],\n     IX86_ATTR_ISA (\"lwp\",\tOPT_mlwp),\n     IX86_ATTR_ISA (\"hle\",\tOPT_mhle),\n     IX86_ATTR_ISA (\"fxsr\",\tOPT_mfxsr),\n-    IX86_ATTR_ISA (\"mpx\",\tOPT_mmpx),\n     IX86_ATTR_ISA (\"clwb\",\tOPT_mclwb),\n     IX86_ATTR_ISA (\"rdpid\",\tOPT_mrdpid),\n     IX86_ATTR_ISA (\"gfni\",\tOPT_mgfni),\n@@ -5925,16 +5905,6 @@ ix86_set_indirect_branch_type (tree fndecl)\n \t       ((cfun->machine->indirect_branch_type\n \t\t == indirect_branch_thunk_extern)\n \t\t? \"thunk-extern\" : \"thunk\"));\n-\n-      /* -mindirect-branch=thunk-extern, -fcf-protection=branch and\n-\t -fcheck-pointer-bounds are not compatible.  */\n-      if ((cfun->machine->indirect_branch_type\n-\t   == indirect_branch_thunk_extern)\n-\t  && flag_check_pointer_bounds\n-\t  && (flag_cf_protection & CF_BRANCH) != 0)\n-\terror (\"%<-mindirect-branch=thunk-extern%>, \"\n-\t       \"%<-fcf-protection=branch%> and \"\n-\t       \"%<-fcheck-pointer-bounds%> are not compatible\");\n     }\n \n   if (cfun->machine->function_return_type == indirect_branch_unset)\n@@ -6050,12 +6020,10 @@ ix86_set_current_function (tree fndecl)\n   if (cfun->machine->func_type != TYPE_NORMAL\n       || cfun->machine->no_caller_saved_registers)\n     {\n-      /* Don't allow MPX, SSE, MMX nor x87 instructions since they\n+      /* Don't allow SSE, MMX nor x87 instructions since they\n \t may change processor state.  */\n       const char *isa;\n-      if (TARGET_MPX)\n-\tisa = \"MPX\";\n-      else if (TARGET_SSE)\n+      if (TARGET_SSE)\n \tisa = \"SSE\";\n       else if (TARGET_MMX)\n \tisa = \"MMX/3Dnow\";\n@@ -7049,9 +7017,6 @@ ix86_function_arg_regno_p (int regno)\n   enum calling_abi call_abi;\n   const int *parm_regs;\n \n-  if (TARGET_MPX && BND_REGNO_P (regno))\n-    return true;\n-\n   if (!TARGET_64BIT)\n     {\n       if (TARGET_MACHO)\n@@ -7396,9 +7361,6 @@ init_cumulative_args (CUMULATIVE_ARGS *cum,  /* Argument info to initialize */\n \t\t      ? (!prototype_p (fntype) || stdarg_p (fntype))\n \t\t      : !libname);\n \n-  cum->bnd_regno = FIRST_BND_REG;\n-  cum->bnds_in_bt = 0;\n-  cum->force_bnd_pass = 0;\n   cum->decl = fndecl;\n \n   cum->warn_empty = !warn_abi || cum->stdarg;\n@@ -8571,36 +8533,6 @@ ix86_function_arg_advance (cumulative_args_t cum_v, machine_mode mode,\n   if (type)\n     mode = type_natural_mode (type, NULL, false);\n \n-  if ((type && POINTER_BOUNDS_TYPE_P (type))\n-      || POINTER_BOUNDS_MODE_P (mode))\n-    {\n-      /* If we pass bounds in BT then just update remained bounds count.  */\n-      if (cum->bnds_in_bt)\n-\t{\n-\t  cum->bnds_in_bt--;\n-\t  return;\n-\t}\n-\n-      /* Update remained number of bounds to force.  */\n-      if (cum->force_bnd_pass)\n-\tcum->force_bnd_pass--;\n-\n-      cum->bnd_regno++;\n-\n-      return;\n-    }\n-\n-  /* The first arg not going to Bounds Tables resets this counter.  */\n-  cum->bnds_in_bt = 0;\n-  /* For unnamed args we always pass bounds to avoid bounds mess when\n-     passed and received types do not match.  If bounds do not follow\n-     unnamed arg, still pretend required number of bounds were passed.  */\n-  if (cum->force_bnd_pass)\n-    {\n-      cum->bnd_regno += cum->force_bnd_pass;\n-      cum->force_bnd_pass = 0;\n-    }\n-\n   if (TARGET_64BIT)\n     {\n       enum calling_abi call_abi = cum ? cum->call_abi : ix86_abi;\n@@ -8613,20 +8545,13 @@ ix86_function_arg_advance (cumulative_args_t cum_v, machine_mode mode,\n   else\n     nregs = function_arg_advance_32 (cum, mode, type, bytes, words);\n \n-  /* For stdarg we expect bounds to be passed for each value passed\n-     in register.  */\n-  if (cum->stdarg)\n-    cum->force_bnd_pass = nregs;\n   /* For pointers passed in memory we expect bounds passed in Bounds\n      Table.  */\n   if (!nregs)\n     {\n       /* Track if there are outgoing arguments on stack.  */\n       if (cum->caller)\n \tcfun->machine->outgoing_args_on_stack = true;\n-\n-      if (flag_check_pointer_bounds)\n-\tcum->bnds_in_bt = chkp_type_bounds_count (type);\n     }\n }\n \n@@ -8914,23 +8839,6 @@ ix86_function_arg (cumulative_args_t cum_v, machine_mode omode,\n       return arg;\n     }\n \n-  /* All pointer bounds arguments are handled separately here.  */\n-  if ((type && POINTER_BOUNDS_TYPE_P (type))\n-      || POINTER_BOUNDS_MODE_P (mode))\n-    {\n-      /* Return NULL if bounds are forced to go in Bounds Table.  */\n-      if (cum->bnds_in_bt)\n-\targ = NULL;\n-      /* Return the next available bound reg if any.  */\n-      else if (cum->bnd_regno <= LAST_BND_REG)\n-\targ = gen_rtx_REG (BNDmode, cum->bnd_regno);\n-      /* Return the next special slot number otherwise.  */\n-      else\n-\targ = GEN_INT (cum->bnd_regno - LAST_BND_REG - 1);\n-\n-      return arg;\n-    }\n-\n   if (mode == BLKmode)\n     bytes = int_size_in_bytes (type);\n   else\n@@ -8973,11 +8881,6 @@ ix86_pass_by_reference (cumulative_args_t cum_v, machine_mode mode,\n {\n   CUMULATIVE_ARGS *cum = get_cumulative_args (cum_v);\n \n-  /* Bounds are never passed by reference.  */\n-  if ((type && POINTER_BOUNDS_TYPE_P (type))\n-      || POINTER_BOUNDS_MODE_P (mode))\n-    return false;\n-\n   if (TARGET_64BIT)\n     {\n       enum calling_abi call_abi = cum ? cum->call_abi : ix86_abi;\n@@ -9221,10 +9124,6 @@ ix86_function_value_regno_p (const unsigned int regno)\n     case SI_REG:\n       return TARGET_64BIT && ix86_cfun_abi () != MS_ABI;\n \n-    case BND0_REG:\n-    case BND1_REG:\n-      return chkp_function_instrumented_p (current_function_decl);\n-\n       /* Complex values are returned in %st(0)/%st(1) pair.  */\n     case ST0_REG:\n     case ST1_REG:\n@@ -9408,10 +9307,7 @@ ix86_function_value_1 (const_tree valtype, const_tree fntype_or_decl,\n     fn = fntype_or_decl;\n   fntype = fn ? TREE_TYPE (fn) : fntype_or_decl;\n \n-  if ((valtype && POINTER_BOUNDS_TYPE_P (valtype))\n-      || POINTER_BOUNDS_MODE_P (mode))\n-    return gen_rtx_REG (BNDmode, FIRST_BND_REG);\n-  else if (TARGET_64BIT && ix86_function_type_abi (fntype) == MS_ABI)\n+  if (TARGET_64BIT && ix86_function_type_abi (fntype) == MS_ABI)\n     return function_value_ms_64 (orig_mode, mode, valtype);\n   else if (TARGET_64BIT)\n     return function_value_64 (orig_mode, mode, valtype);\n@@ -9429,57 +9325,6 @@ ix86_function_value (const_tree valtype, const_tree fntype_or_decl, bool)\n   return ix86_function_value_1 (valtype, fntype_or_decl, orig_mode, mode);\n }\n \n-/*  Return an RTX representing a place where a function returns\n-    or recieves pointer bounds or NULL if no bounds are returned.\n-\n-    VALTYPE is a data type of a value returned by the function.\n-\n-    FN_DECL_OR_TYPE is a tree node representing FUNCTION_DECL\n-    or FUNCTION_TYPE of the function.\n-\n-    If OUTGOING is false, return a place in which the caller will\n-    see the return value.  Otherwise, return a place where a\n-    function returns a value.  */\n-\n-static rtx\n-ix86_function_value_bounds (const_tree valtype,\n-\t\t\t    const_tree fntype_or_decl ATTRIBUTE_UNUSED,\n-\t\t\t    bool outgoing ATTRIBUTE_UNUSED)\n-{\n-  rtx res = NULL_RTX;\n-\n-  if (BOUNDED_TYPE_P (valtype))\n-    res = gen_rtx_REG (BNDmode, FIRST_BND_REG);\n-  else if (chkp_type_has_pointer (valtype))\n-    {\n-      bitmap slots;\n-      rtx bounds[2];\n-      bitmap_iterator bi;\n-      unsigned i, bnd_no = 0;\n-\n-      bitmap_obstack_initialize (NULL);\n-      slots = BITMAP_ALLOC (NULL);\n-      chkp_find_bound_slots (valtype, slots);\n-\n-      EXECUTE_IF_SET_IN_BITMAP (slots, 0, i, bi)\n-\t{\n-\t  rtx reg = gen_rtx_REG (BNDmode, FIRST_BND_REG + bnd_no);\n-\t  rtx offs = GEN_INT (i * POINTER_SIZE / BITS_PER_UNIT);\n-\t  gcc_assert (bnd_no < 2);\n-\t  bounds[bnd_no++] = gen_rtx_EXPR_LIST (VOIDmode, reg, offs);\n-\t}\n-\n-      res = gen_rtx_PARALLEL (VOIDmode, gen_rtvec_v (bnd_no, bounds));\n-\n-      BITMAP_FREE (slots);\n-      bitmap_obstack_release (NULL);\n-    }\n-  else\n-    res = NULL_RTX;\n-\n-  return res;\n-}\n-\n /* Pointer function arguments and return values are promoted to\n    word_mode for normal functions.  */\n \n@@ -9528,9 +9373,6 @@ ix86_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED)\n   const machine_mode mode = type_natural_mode (type, NULL, true);\n   HOST_WIDE_INT size;\n \n-  if (POINTER_BOUNDS_TYPE_P (type))\n-    return false;\n-\n   if (TARGET_64BIT)\n     {\n       if (ix86_function_type_abi (fntype) == MS_ABI)\n@@ -9858,8 +9700,7 @@ ix86_setup_incoming_vararg_bounds (cumulative_args_t cum_v,\n   CUMULATIVE_ARGS *cum = get_cumulative_args (cum_v);\n   CUMULATIVE_ARGS next_cum;\n   tree fntype;\n-  rtx save_area;\n-  int bnd_reg, i, max;\n+  int max;\n \n   gcc_assert (!no_rtl);\n \n@@ -9875,40 +9716,10 @@ ix86_setup_incoming_vararg_bounds (cumulative_args_t cum_v,\n   if (stdarg_p (fntype))\n     ix86_function_arg_advance (pack_cumulative_args (&next_cum), mode, type,\n \t\t\t       true);\n-  save_area = frame_pointer_rtx;\n \n   max = cum->regno + cfun->va_list_gpr_size / UNITS_PER_WORD;\n   if (max > X86_64_REGPARM_MAX)\n     max = X86_64_REGPARM_MAX;\n-\n-  bnd_reg = cum->bnd_regno + cum->force_bnd_pass;\n-  if (chkp_function_instrumented_p (current_function_decl))\n-    for (i = cum->regno; i < max; i++)\n-      {\n-\trtx addr = plus_constant (Pmode, save_area, i * UNITS_PER_WORD);\n-\trtx ptr = gen_rtx_REG (Pmode,\n-\t\t\t       x86_64_int_parameter_registers[i]);\n-\trtx bounds;\n-\n-\tif (bnd_reg <= LAST_BND_REG)\n-\t  bounds = gen_rtx_REG (BNDmode, bnd_reg);\n-\telse\n-\t  {\n-\t    rtx ldx_addr =\n-\t      plus_constant (Pmode, arg_pointer_rtx,\n-\t\t\t     (LAST_BND_REG - bnd_reg) * GET_MODE_SIZE (Pmode));\n-\t    bounds = gen_reg_rtx (BNDmode);\n-\t    emit_insn (BNDmode == BND64mode\n-\t\t       ? gen_bnd64_ldx (bounds, ldx_addr, ptr)\n-\t\t       : gen_bnd32_ldx (bounds, ldx_addr, ptr));\n-\t  }\n-\n-\temit_insn (BNDmode == BND64mode\n-\t\t   ? gen_bnd64_stx (addr, ptr, bounds)\n-\t\t   : gen_bnd32_stx (addr, ptr, bounds));\n-\n-\tbnd_reg++;\n-      }\n }\n \n \n@@ -9986,13 +9797,6 @@ ix86_va_start (tree valist, rtx nextarg)\n \t\t\t       crtl->args.arg_offset_rtx,\n \t\t\t       NULL_RTX, 0, OPTAB_LIB_WIDEN);\n \t  convert_move (va_r, next, 0);\n-\n-\t  /* Store zero bounds for va_list.  */\n-\t  if (chkp_function_instrumented_p (current_function_decl))\n-\t    chkp_expand_bounds_reset_for_mem (valist,\n-\t\t\t\t\t      make_tree (TREE_TYPE (valist),\n-\t\t\t\t\t\t\t next));\n-\n \t}\n       return;\n     }\n@@ -10047,10 +9851,6 @@ ix86_va_start (tree valist, rtx nextarg)\n   if (words != 0)\n     t = fold_build_pointer_plus_hwi (t, words * UNITS_PER_WORD);\n \n-  /* Store zero bounds for overflow area pointer.  */\n-  if (chkp_function_instrumented_p (current_function_decl))\n-    chkp_expand_bounds_reset_for_mem (ovf, t);\n-\n   t = build2 (MODIFY_EXPR, type, ovf, t);\n   TREE_SIDE_EFFECTS (t) = 1;\n   expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n@@ -10064,10 +9864,6 @@ ix86_va_start (tree valist, rtx nextarg)\n       if (!ix86_varargs_gpr_size)\n \tt = fold_build_pointer_plus_hwi (t, -8 * X86_64_REGPARM_MAX);\n \n-      /* Store zero bounds for save area pointer.  */\n-      if (chkp_function_instrumented_p (current_function_decl))\n-\tchkp_expand_bounds_reset_for_mem (sav, t);\n-\n       t = build2 (MODIFY_EXPR, type, sav, t);\n       TREE_SIDE_EFFECTS (t) = 1;\n       expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n@@ -10869,9 +10665,7 @@ enum indirect_thunk_prefix\n indirect_thunk_need_prefix (rtx_insn *insn)\n {\n   enum indirect_thunk_prefix need_prefix;\n-  if (ix86_bnd_prefixed_insn_p (insn))\n-    need_prefix = indirect_thunk_prefix_bnd;\n-  else if ((cfun->machine->indirect_branch_type\n+  if ((cfun->machine->indirect_branch_type\n \t    == indirect_branch_thunk_extern)\n \t   && ix86_notrack_prefixed_insn_p (insn))\n     {\n@@ -18086,7 +17880,7 @@ print_reg (rtx x, int code, FILE *file)\n    ; -- print a semicolon (after prefixes due to bug in older gas).\n    ~ -- print \"i\" if TARGET_AVX2, \"f\" otherwise.\n    ^ -- print addr32 prefix if TARGET_64BIT and Pmode != word_mode\n-   ! -- print MPX prefix for jxx/call/ret instructions if required.\n+   ! -- print NOTRACK prefix for jxx/call/ret instructions if required.\n  */\n \n void\n@@ -18639,8 +18433,6 @@ ix86_print_operand (FILE *file, rtx x, int code)\n \t  return;\n \n \tcase '!':\n-\t  if (ix86_bnd_prefixed_insn_p (current_output_insn))\n-\t    fputs (\"bnd \", file);\n \t  if (ix86_notrack_prefixed_insn_p (current_output_insn))\n \t    fputs (\"notrack \", file);\n \t  return;\n@@ -28595,30 +28387,7 @@ ix86_expand_call (rtx retval, rtx fnaddr, rtx callarg1,\n   call = gen_rtx_CALL (VOIDmode, fnaddr, callarg1);\n \n   if (retval)\n-    {\n-      /* We should add bounds as destination register in case\n-\t pointer with bounds may be returned.  */\n-      if (TARGET_MPX && SCALAR_INT_MODE_P (GET_MODE (retval)))\n-\t{\n-\t  rtx b0 = gen_rtx_REG (BND64mode, FIRST_BND_REG);\n-\t  rtx b1 = gen_rtx_REG (BND64mode, FIRST_BND_REG + 1);\n-\t  if (GET_CODE (retval) == PARALLEL)\n-\t    {\n-\t      b0 = gen_rtx_EXPR_LIST (VOIDmode, b0, const0_rtx);\n-\t      b1 = gen_rtx_EXPR_LIST (VOIDmode, b1, const0_rtx);\n-\t      rtx par = gen_rtx_PARALLEL (VOIDmode, gen_rtvec (2, b0, b1));\n-\t      retval = chkp_join_splitted_slot (retval, par);\n-\t    }\n-\t  else\n-\t    {\n-\t      retval = gen_rtx_PARALLEL (VOIDmode,\n-\t\t\t\t\t gen_rtvec (3, retval, b0, b1));\n-\t      chkp_put_regs_to_expr_list (retval);\n-\t    }\n-\t}\n-\n-      call = gen_rtx_SET (retval, call);\n-    }\n+    call = gen_rtx_SET (retval, call);\n   vec[vec_len++] = call;\n \n   if (pop)\n@@ -29034,7 +28803,7 @@ ix86_output_function_return (bool long_p)\n       return \"\";\n     }\n \n-  if (!long_p || ix86_bnd_prefixed_insn_p (current_output_insn))\n+  if (!long_p)\n     return \"%!ret\";\n \n   return \"rep%; ret\";\n@@ -29348,8 +29117,6 @@ reg_encoded_number (rtx reg)\n     return regno - FIRST_REX_INT_REG;\n   if (IN_RANGE (regno, FIRST_MASK_REG, LAST_MASK_REG))\n     return regno - FIRST_MASK_REG;\n-  if (IN_RANGE (regno, FIRST_BND_REG, LAST_BND_REG))\n-    return regno - FIRST_BND_REG;\n   return -1;\n }\n \n@@ -31297,12 +31064,8 @@ BDESC_VERIFYS (IX86_BUILTIN__BDESC_ARGS2_FIRST,\n \t       IX86_BUILTIN__BDESC_ROUND_ARGS_LAST, 1);\n BDESC_VERIFYS (IX86_BUILTIN__BDESC_SPECIAL_ARGS2_FIRST,\n \t       IX86_BUILTIN__BDESC_ARGS2_LAST, 1);\n-BDESC_VERIFYS (IX86_BUILTIN__BDESC_MPX_FIRST,\n-\t       IX86_BUILTIN__BDESC_SPECIAL_ARGS2_LAST, 1);\n-BDESC_VERIFYS (IX86_BUILTIN__BDESC_MPX_CONST_FIRST,\n-\t       IX86_BUILTIN__BDESC_MPX_LAST, 1);\n BDESC_VERIFYS (IX86_BUILTIN__BDESC_MULTI_ARG_FIRST,\n-\t       IX86_BUILTIN__BDESC_MPX_CONST_LAST, 1);\n+\t       IX86_BUILTIN__BDESC_SPECIAL_ARGS2_LAST, 1);\n BDESC_VERIFYS (IX86_BUILTIN__BDESC_CET_FIRST,\n \t       IX86_BUILTIN__BDESC_MULTI_ARG_LAST, 1);\n BDESC_VERIFYS (IX86_BUILTIN__BDESC_CET_NORMAL_FIRST,\n@@ -32051,74 +31814,6 @@ ix86_init_mmx_sse_builtins (void)\n \t\t ARRAY_SIZE (bdesc_cet_rdssp) - 1);\n }\n \n-static void\n-ix86_init_mpx_builtins ()\n-{\n-  const struct builtin_description * d;\n-  enum ix86_builtin_func_type ftype;\n-  tree decl;\n-  size_t i;\n-\n-  for (i = 0, d = bdesc_mpx;\n-       i < ARRAY_SIZE (bdesc_mpx);\n-       i++, d++)\n-    {\n-      BDESC_VERIFY (d->code, IX86_BUILTIN__BDESC_MPX_FIRST, i);\n-      if (d->name == 0)\n-\tcontinue;\n-\n-      ftype = (enum ix86_builtin_func_type) d->flag;\n-      decl = def_builtin2 (d->mask, d->name, ftype, d->code);\n-\n-      /* With no leaf and nothrow flags for MPX builtins\n-\t abnormal edges may follow its call when setjmp\n-\t presents in the function.  Since we may have a lot\n-\t of MPX builtins calls it causes lots of useless\n-\t edges and enormous PHI nodes.  To avoid this we mark\n-\t MPX builtins as leaf and nothrow.  */\n-      if (decl)\n-\t{\n-\t  DECL_ATTRIBUTES (decl) = build_tree_list (get_identifier (\"leaf\"),\n-\t\t\t\t\t\t    NULL_TREE);\n-\t  TREE_NOTHROW (decl) = 1;\n-\t}\n-      else\n-\t{\n-\t  ix86_builtins_isa[(int)d->code].leaf_p = true;\n-\t  ix86_builtins_isa[(int)d->code].nothrow_p = true;\n-\t}\n-    }\n-  BDESC_VERIFYS (IX86_BUILTIN__BDESC_MPX_LAST,\n-\t\t IX86_BUILTIN__BDESC_MPX_FIRST,\n-\t\t ARRAY_SIZE (bdesc_mpx) - 1);\n-\n-  for (i = 0, d = bdesc_mpx_const;\n-       i < ARRAY_SIZE (bdesc_mpx_const);\n-       i++, d++)\n-    {\n-      BDESC_VERIFY (d->code, IX86_BUILTIN__BDESC_MPX_CONST_FIRST, i);\n-      if (d->name == 0)\n-\tcontinue;\n-\n-      ftype = (enum ix86_builtin_func_type) d->flag;\n-      decl = def_builtin_const2 (d->mask, d->name, ftype, d->code);\n-\n-      if (decl)\n-\t{\n-\t  DECL_ATTRIBUTES (decl) = build_tree_list (get_identifier (\"leaf\"),\n-\t\t\t\t\t\t    NULL_TREE);\n-\t  TREE_NOTHROW (decl) = 1;\n-\t}\n-      else\n-\t{\n-\t  ix86_builtins_isa[(int)d->code].leaf_p = true;\n-\t  ix86_builtins_isa[(int)d->code].nothrow_p = true;\n-\t}\n-    }\n-  BDESC_VERIFYS (IX86_BUILTIN__BDESC_MPX_CONST_LAST,\n-\t\t IX86_BUILTIN__BDESC_MPX_CONST_FIRST,\n-\t\t ARRAY_SIZE (bdesc_mpx_const) - 1);\n-}\n #undef BDESC_VERIFY\n #undef BDESC_VERIFYS\n \n@@ -34350,7 +34045,6 @@ ix86_init_builtins (void)\n \n   ix86_init_tm_builtins ();\n   ix86_init_mmx_sse_builtins ();\n-  ix86_init_mpx_builtins ();\n \n   if (TARGET_LP64)\n     ix86_init_builtins_va_builtins_abi ();\n@@ -37032,36 +36726,6 @@ ix86_expand_vec_set_builtin (tree exp)\n   return target;\n }\n \n-/* Emit conditional move of SRC to DST with condition\n-   OP1 CODE OP2.  */\n-static void\n-ix86_emit_cmove (rtx dst, rtx src, enum rtx_code code, rtx op1, rtx op2)\n-{\n-  rtx t;\n-\n-  if (TARGET_CMOVE)\n-    {\n-      t = ix86_expand_compare (code, op1, op2);\n-      emit_insn (gen_rtx_SET (dst, gen_rtx_IF_THEN_ELSE (GET_MODE (dst), t,\n-\t\t\t\t\t\t\t src, dst)));\n-    }\n-  else\n-    {\n-      rtx_code_label *nomove = gen_label_rtx ();\n-      emit_cmp_and_jump_insns (op1, op2, reverse_condition (code),\n-\t\t\t       const0_rtx, GET_MODE (op1), 1, nomove);\n-      emit_move_insn (dst, src);\n-      emit_label (nomove);\n-    }\n-}\n-\n-/* Choose max of DST and SRC and put it to DST.  */\n-static void\n-ix86_emit_move_max (rtx dst, rtx src)\n-{\n-  ix86_emit_cmove (dst, src, LTU, dst, src);\n-}\n-\n /* Expand an expression EXP that calls a built-in function,\n    with result going to TARGET if that's convenient\n    (and in mode MODE if that's convenient).\n@@ -37143,342 +36807,6 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n \n   switch (fcode)\n     {\n-    case IX86_BUILTIN_BNDMK:\n-      if (!target\n-\t  || GET_MODE (target) != BNDmode\n-\t  || !register_operand (target, BNDmode))\n-\ttarget = gen_reg_rtx (BNDmode);\n-\n-      arg0 = CALL_EXPR_ARG (exp, 0);\n-      arg1 = CALL_EXPR_ARG (exp, 1);\n-\n-      op0 = expand_normal (arg0);\n-      op1 = expand_normal (arg1);\n-\n-      if (!register_operand (op0, Pmode))\n-\top0 = ix86_zero_extend_to_Pmode (op0);\n-      if (!register_operand (op1, Pmode))\n-\top1 = ix86_zero_extend_to_Pmode (op1);\n-\n-      /* Builtin arg1 is size of block but instruction op1 should\n-\t be (size - 1).  */\n-      op1 = expand_simple_binop (Pmode, PLUS, op1, constm1_rtx,\n-\t\t\t\t NULL_RTX, 1, OPTAB_DIRECT);\n-\n-      emit_insn (BNDmode == BND64mode\n-                 ? gen_bnd64_mk (target, op0, op1)\n-                 : gen_bnd32_mk (target, op0, op1));\n-      return target;\n-\n-    case IX86_BUILTIN_BNDSTX:\n-      arg0 = CALL_EXPR_ARG (exp, 0);\n-      arg1 = CALL_EXPR_ARG (exp, 1);\n-      arg2 = CALL_EXPR_ARG (exp, 2);\n-\n-      op0 = expand_normal (arg0);\n-      op1 = expand_normal (arg1);\n-      op2 = expand_normal (arg2);\n-\n-      if (!register_operand (op0, Pmode))\n-\top0 = ix86_zero_extend_to_Pmode (op0);\n-      if (!register_operand (op1, BNDmode))\n-\top1 = copy_to_mode_reg (BNDmode, op1);\n-      if (!register_operand (op2, Pmode))\n-\top2 = ix86_zero_extend_to_Pmode (op2);\n-\n-      emit_insn (BNDmode == BND64mode\n-                 ? gen_bnd64_stx (op2, op0, op1)\n-                 : gen_bnd32_stx (op2, op0, op1));\n-      return 0;\n-\n-    case IX86_BUILTIN_BNDLDX:\n-      if (!target\n-\t  || GET_MODE (target) != BNDmode\n-\t  || !register_operand (target, BNDmode))\n-\ttarget = gen_reg_rtx (BNDmode);\n-\n-      arg0 = CALL_EXPR_ARG (exp, 0);\n-      arg1 = CALL_EXPR_ARG (exp, 1);\n-\n-      op0 = expand_normal (arg0);\n-      op1 = expand_normal (arg1);\n-\n-      if (!register_operand (op0, Pmode))\n-\top0 = ix86_zero_extend_to_Pmode (op0);\n-      if (!register_operand (op1, Pmode))\n-\top1 = ix86_zero_extend_to_Pmode (op1);\n-\n-      emit_insn (BNDmode == BND64mode\n-\t\t ? gen_bnd64_ldx (target, op0, op1)\n-\t\t : gen_bnd32_ldx (target, op0, op1));\n-      return target;\n-\n-    case IX86_BUILTIN_BNDCL:\n-      arg0 = CALL_EXPR_ARG (exp, 0);\n-      arg1 = CALL_EXPR_ARG (exp, 1);\n-\n-      op0 = expand_normal (arg0);\n-      op1 = expand_normal (arg1);\n-\n-      if (!register_operand (op0, Pmode))\n-\top0 = ix86_zero_extend_to_Pmode (op0);\n-      if (!register_operand (op1, BNDmode))\n-\top1 = copy_to_mode_reg (BNDmode, op1);\n-\n-      emit_insn (BNDmode == BND64mode\n-                 ? gen_bnd64_cl (op1, op0)\n-                 : gen_bnd32_cl (op1, op0));\n-      return 0;\n-\n-    case IX86_BUILTIN_BNDCU:\n-      arg0 = CALL_EXPR_ARG (exp, 0);\n-      arg1 = CALL_EXPR_ARG (exp, 1);\n-\n-      op0 = expand_normal (arg0);\n-      op1 = expand_normal (arg1);\n-\n-      if (!register_operand (op0, Pmode))\n-\top0 = ix86_zero_extend_to_Pmode (op0);\n-      if (!register_operand (op1, BNDmode))\n-\top1 = copy_to_mode_reg (BNDmode, op1);\n-\n-      emit_insn (BNDmode == BND64mode\n-                 ? gen_bnd64_cu (op1, op0)\n-                 : gen_bnd32_cu (op1, op0));\n-      return 0;\n-\n-    case IX86_BUILTIN_BNDRET:\n-      arg0 = CALL_EXPR_ARG (exp, 0);\n-      target = chkp_get_rtl_bounds (arg0);\n-\n-      /* If no bounds were specified for returned value,\n-\t then use INIT bounds.  It usually happens when\n-\t some built-in function is expanded.  */\n-      if (!target)\n-\t{\n-\t  rtx t1 = gen_reg_rtx (Pmode);\n-\t  rtx t2 = gen_reg_rtx (Pmode);\n-\t  target = gen_reg_rtx (BNDmode);\n-\t  emit_move_insn (t1, const0_rtx);\n-\t  emit_move_insn (t2, constm1_rtx);\n-\t  emit_insn (BNDmode == BND64mode\n-\t\t     ? gen_bnd64_mk (target, t1, t2)\n-\t\t     : gen_bnd32_mk (target, t1, t2));\n-\t}\n-\n-      gcc_assert (target && REG_P (target));\n-      return target;\n-\n-    case IX86_BUILTIN_BNDNARROW:\n-      {\n-\trtx m1, m1h1, m1h2, lb, ub, t1;\n-\n-\t/* Return value and lb.  */\n-\targ0 = CALL_EXPR_ARG (exp, 0);\n-\t/* Bounds.  */\n-\targ1 = CALL_EXPR_ARG (exp, 1);\n-\t/* Size.  */\n-\targ2 = CALL_EXPR_ARG (exp, 2);\n-\n-\tlb = expand_normal (arg0);\n-\top1 = expand_normal (arg1);\n-\top2 = expand_normal (arg2);\n-\n-\t/* Size was passed but we need to use (size - 1) as for bndmk.  */\n-\top2 = expand_simple_binop (Pmode, PLUS, op2, constm1_rtx,\n-\t\t\t\t   NULL_RTX, 1, OPTAB_DIRECT);\n-\n-\t/* Add LB to size and inverse to get UB.  */\n-\top2 = expand_simple_binop (Pmode, PLUS, op2, lb,\n-\t\t\t\t   op2, 1, OPTAB_DIRECT);\n-\tub = expand_simple_unop (Pmode, NOT, op2, op2, 1);\n-\n-\tif (!register_operand (lb, Pmode))\n-\t  lb = ix86_zero_extend_to_Pmode (lb);\n-\tif (!register_operand (ub, Pmode))\n-\t  ub = ix86_zero_extend_to_Pmode (ub);\n-\n-\t/* We need to move bounds to memory before any computations.  */\n-\tif (MEM_P (op1))\n-\t  m1 = op1;\n-\telse\n-\t  {\n-\t    m1 = assign_386_stack_local (BNDmode, SLOT_TEMP);\n-\t    emit_move_insn (m1, op1);\n-\t  }\n-\n-\t/* Generate mem expression to be used for access to LB and UB.  */\n-\tm1h1 = adjust_address (m1, Pmode, 0);\n-\tm1h2 = adjust_address (m1, Pmode, GET_MODE_SIZE (Pmode));\n-\n-\tt1 = gen_reg_rtx (Pmode);\n-\n-\t/* Compute LB.  */\n-\temit_move_insn (t1, m1h1);\n-\tix86_emit_move_max (t1, lb);\n-\temit_move_insn (m1h1, t1);\n-\n-\t/* Compute UB.  UB is stored in 1's complement form.  Therefore\n-\t   we also use max here.  */\n-\temit_move_insn (t1, m1h2);\n-\tix86_emit_move_max (t1, ub);\n-\temit_move_insn (m1h2, t1);\n-\n-\top2 = gen_reg_rtx (BNDmode);\n-\temit_move_insn (op2, m1);\n-\n-\treturn chkp_join_splitted_slot (lb, op2);\n-      }\n-\n-    case IX86_BUILTIN_BNDINT:\n-      {\n-\trtx res, rh1, rh2, lb1, lb2, ub1, ub2;\n-\n-\tif (!target\n-\t    || GET_MODE (target) != BNDmode\n-\t    || !register_operand (target, BNDmode))\n-\t  target = gen_reg_rtx (BNDmode);\n-\n-\targ0 = CALL_EXPR_ARG (exp, 0);\n-\targ1 = CALL_EXPR_ARG (exp, 1);\n-\n-\top0 = expand_normal (arg0);\n-\top1 = expand_normal (arg1);\n-\n-\tres = assign_386_stack_local (BNDmode, SLOT_TEMP);\n-\trh1 = adjust_address (res, Pmode, 0);\n-\trh2 = adjust_address (res, Pmode, GET_MODE_SIZE (Pmode));\n-\n-\t/* Put first bounds to temporaries.  */\n-\tlb1 = gen_reg_rtx (Pmode);\n-\tub1 = gen_reg_rtx (Pmode);\n-\tif (MEM_P (op0))\n-\t  {\n-\t    emit_move_insn (lb1, adjust_address (op0, Pmode, 0));\n-\t    emit_move_insn (ub1, adjust_address (op0, Pmode,\n-\t\t\t\t\t\t GET_MODE_SIZE (Pmode)));\n-\t  }\n-\telse\n-\t  {\n-\t    emit_move_insn (res, op0);\n-\t    emit_move_insn (lb1, rh1);\n-\t    emit_move_insn (ub1, rh2);\n-\t  }\n-\n-\t/* Put second bounds to temporaries.  */\n-\tlb2 = gen_reg_rtx (Pmode);\n-\tub2 = gen_reg_rtx (Pmode);\n-\tif (MEM_P (op1))\n-\t  {\n-\t    emit_move_insn (lb2, adjust_address (op1, Pmode, 0));\n-\t    emit_move_insn (ub2, adjust_address (op1, Pmode,\n-\t\t\t\t\t\t GET_MODE_SIZE (Pmode)));\n-\t  }\n-\telse\n-\t  {\n-\t    emit_move_insn (res, op1);\n-\t    emit_move_insn (lb2, rh1);\n-\t    emit_move_insn (ub2, rh2);\n-\t  }\n-\n-\t/* Compute LB.  */\n-\tix86_emit_move_max (lb1, lb2);\n-\temit_move_insn (rh1, lb1);\n-\n-\t/* Compute UB.  UB is stored in 1's complement form.  Therefore\n-\t   we also use max here.  */\n-\tix86_emit_move_max (ub1, ub2);\n-\temit_move_insn (rh2, ub1);\n-\n-\temit_move_insn (target, res);\n-\n-\treturn target;\n-      }\n-\n-    case IX86_BUILTIN_SIZEOF:\n-      {\n-\ttree name;\n-\trtx symbol;\n-\n-\tif (!target\n-\t    || GET_MODE (target) != Pmode\n-\t    || !register_operand (target, Pmode))\n-\t  target = gen_reg_rtx (Pmode);\n-\n-\targ0 = CALL_EXPR_ARG (exp, 0);\n-\tgcc_assert (VAR_P (arg0));\n-\n-\tname = DECL_ASSEMBLER_NAME (arg0);\n-\tsymbol = gen_rtx_SYMBOL_REF (Pmode, IDENTIFIER_POINTER (name));\n-\n-\temit_insn (Pmode == SImode\n-\t\t   ? gen_move_size_reloc_si (target, symbol)\n-\t\t   : gen_move_size_reloc_di (target, symbol));\n-\n-\treturn target;\n-      }\n-\n-    case IX86_BUILTIN_BNDLOWER:\n-      {\n-\trtx mem, hmem;\n-\n-\tif (!target\n-\t    || GET_MODE (target) != Pmode\n-\t    || !register_operand (target, Pmode))\n-\t  target = gen_reg_rtx (Pmode);\n-\n-\targ0 = CALL_EXPR_ARG (exp, 0);\n-\top0 = expand_normal (arg0);\n-\n-\t/* We need to move bounds to memory first.  */\n-\tif (MEM_P (op0))\n-\t  mem = op0;\n-\telse\n-\t  {\n-\t    mem = assign_386_stack_local (BNDmode, SLOT_TEMP);\n-\t    emit_move_insn (mem, op0);\n-\t  }\n-\n-\t/* Generate mem expression to access LB and load it.  */\n-\thmem = adjust_address (mem, Pmode, 0);\n-\temit_move_insn (target, hmem);\n-\n-\treturn target;\n-      }\n-\n-    case IX86_BUILTIN_BNDUPPER:\n-      {\n-\trtx mem, hmem, res;\n-\n-\tif (!target\n-\t    || GET_MODE (target) != Pmode\n-\t    || !register_operand (target, Pmode))\n-\t  target = gen_reg_rtx (Pmode);\n-\n-\targ0 = CALL_EXPR_ARG (exp, 0);\n-\top0 = expand_normal (arg0);\n-\n-\t/* We need to move bounds to memory first.  */\n-\tif (MEM_P (op0))\n-\t  mem = op0;\n-\telse\n-\t  {\n-\t    mem = assign_386_stack_local (BNDmode, SLOT_TEMP);\n-\t    emit_move_insn (mem, op0);\n-\t  }\n-\n-\t/* Generate mem expression to access UB.  */\n-\thmem = adjust_address (mem, Pmode, GET_MODE_SIZE (Pmode));\n-\n-\t/* We need to inverse all bits of UB.  */\n-\tres = expand_simple_unop (Pmode, NOT, hmem, target, 1);\n-\n-\tif (res != target)\n-\t  emit_move_insn (target, res);\n-\n-\treturn target;\n-      }\n-\n     case IX86_BUILTIN_MASKMOVQ:\n     case IX86_BUILTIN_MASKMOVDQU:\n       icode = (fcode == IX86_BUILTIN_MASKMOVQ\n@@ -39449,199 +38777,6 @@ static tree ix86_get_builtin (enum ix86_builtins code)\n     return NULL_TREE;\n }\n \n-/* Return function decl for target specific builtin\n-   for given MPX builtin passed i FCODE.  */\n-static tree\n-ix86_builtin_mpx_function (unsigned fcode)\n-{\n-  switch (fcode)\n-    {\n-    case BUILT_IN_CHKP_BNDMK:\n-      return ix86_builtins[IX86_BUILTIN_BNDMK];\n-\n-    case BUILT_IN_CHKP_BNDSTX:\n-      return ix86_builtins[IX86_BUILTIN_BNDSTX];\n-\n-    case BUILT_IN_CHKP_BNDLDX:\n-      return ix86_builtins[IX86_BUILTIN_BNDLDX];\n-\n-    case BUILT_IN_CHKP_BNDCL:\n-      return ix86_builtins[IX86_BUILTIN_BNDCL];\n-\n-    case BUILT_IN_CHKP_BNDCU:\n-      return ix86_builtins[IX86_BUILTIN_BNDCU];\n-\n-    case BUILT_IN_CHKP_BNDRET:\n-      return ix86_builtins[IX86_BUILTIN_BNDRET];\n-\n-    case BUILT_IN_CHKP_INTERSECT:\n-      return ix86_builtins[IX86_BUILTIN_BNDINT];\n-\n-    case BUILT_IN_CHKP_NARROW:\n-      return ix86_builtins[IX86_BUILTIN_BNDNARROW];\n-\n-    case BUILT_IN_CHKP_SIZEOF:\n-      return ix86_builtins[IX86_BUILTIN_SIZEOF];\n-\n-    case BUILT_IN_CHKP_EXTRACT_LOWER:\n-      return ix86_builtins[IX86_BUILTIN_BNDLOWER];\n-\n-    case BUILT_IN_CHKP_EXTRACT_UPPER:\n-      return ix86_builtins[IX86_BUILTIN_BNDUPPER];\n-\n-    default:\n-      return NULL_TREE;\n-    }\n-\n-  gcc_unreachable ();\n-}\n-\n-/* Helper function for ix86_load_bounds and ix86_store_bounds.\n-\n-   Return an address to be used to load/store bounds for pointer\n-   passed in SLOT.\n-\n-   SLOT_NO is an integer constant holding number of a target\n-   dependent special slot to be used in case SLOT is not a memory.\n-\n-   SPECIAL_BASE is a pointer to be used as a base of fake address\n-   to access special slots in Bounds Table.  SPECIAL_BASE[-1],\n-   SPECIAL_BASE[-2] etc. will be used as fake pointer locations.  */\n-\n-static rtx\n-ix86_get_arg_address_for_bt (rtx slot, rtx slot_no, rtx special_base)\n-{\n-  rtx addr = NULL;\n-\n-  /* NULL slot means we pass bounds for pointer not passed to the\n-     function at all.  Register slot means we pass pointer in a\n-     register.  In both these cases bounds are passed via Bounds\n-     Table.  Since we do not have actual pointer stored in memory,\n-     we have to use fake addresses to access Bounds Table.  We\n-     start with (special_base - sizeof (void*)) and decrease this\n-     address by pointer size to get addresses for other slots.  */\n-  if (!slot || REG_P (slot))\n-    {\n-      gcc_assert (CONST_INT_P (slot_no));\n-      addr = plus_constant (Pmode, special_base,\n-\t\t\t    -(INTVAL (slot_no) + 1) * GET_MODE_SIZE (Pmode));\n-    }\n-  /* If pointer is passed in a memory then its address is used to\n-     access Bounds Table.  */\n-  else if (MEM_P (slot))\n-    {\n-      addr = XEXP (slot, 0);\n-      if (!register_operand (addr, Pmode))\n-\taddr = copy_addr_to_reg (addr);\n-    }\n-  else\n-    gcc_unreachable ();\n-\n-  return addr;\n-}\n-\n-/* Expand pass uses this hook to load bounds for function parameter\n-   PTR passed in SLOT in case its bounds are not passed in a register.\n-\n-   If SLOT is a memory, then bounds are loaded as for regular pointer\n-   loaded from memory.  PTR may be NULL in case SLOT is a memory.\n-   In such case value of PTR (if required) may be loaded from SLOT.\n-\n-   If SLOT is NULL or a register then SLOT_NO is an integer constant\n-   holding number of the target dependent special slot which should be\n-   used to obtain bounds.\n-\n-   Return loaded bounds.  */\n-\n-static rtx\n-ix86_load_bounds (rtx slot, rtx ptr, rtx slot_no)\n-{\n-  rtx reg = gen_reg_rtx (BNDmode);\n-  rtx addr;\n-\n-  /* Get address to be used to access Bounds Table.  Special slots start\n-     at the location of return address of the current function.  */\n-  addr = ix86_get_arg_address_for_bt (slot, slot_no, arg_pointer_rtx);\n-\n-  /* Load pointer value from a memory if we don't have it.  */\n-  if (!ptr)\n-    {\n-      gcc_assert (MEM_P (slot));\n-      ptr = copy_addr_to_reg (slot);\n-    }\n-\n-  if (!register_operand (ptr, Pmode))\n-    ptr = ix86_zero_extend_to_Pmode (ptr);\n-\n-  emit_insn (BNDmode == BND64mode\n-\t     ? gen_bnd64_ldx (reg, addr, ptr)\n-\t     : gen_bnd32_ldx (reg, addr, ptr));\n-\n-  return reg;\n-}\n-\n-/* Expand pass uses this hook to store BOUNDS for call argument PTR\n-   passed in SLOT in case BOUNDS are not passed in a register.\n-\n-   If SLOT is a memory, then BOUNDS are stored as for regular pointer\n-   stored in memory.  PTR may be NULL in case SLOT is a memory.\n-   In such case value of PTR (if required) may be loaded from SLOT.\n-\n-   If SLOT is NULL or a register then SLOT_NO is an integer constant\n-   holding number of the target dependent special slot which should be\n-   used to store BOUNDS.  */\n-\n-static void\n-ix86_store_bounds (rtx ptr, rtx slot, rtx bounds, rtx slot_no)\n-{\n-  rtx addr;\n-\n-  /* Get address to be used to access Bounds Table.  Special slots start\n-     at the location of return address of a called function.  */\n-  addr = ix86_get_arg_address_for_bt (slot, slot_no, stack_pointer_rtx);\n-\n-  /* Load pointer value from a memory if we don't have it.  */\n-  if (!ptr)\n-    {\n-      gcc_assert (MEM_P (slot));\n-      ptr = copy_addr_to_reg (slot);\n-    }\n-\n-  if (!register_operand (ptr, Pmode))\n-    ptr = ix86_zero_extend_to_Pmode (ptr);\n-\n-  gcc_assert (POINTER_BOUNDS_MODE_P (GET_MODE (bounds)));\n-  if (!register_operand (bounds, BNDmode))\n-    bounds = copy_to_mode_reg (BNDmode, bounds);\n-\n-  emit_insn (BNDmode == BND64mode\n-\t     ? gen_bnd64_stx (addr, ptr, bounds)\n-\t     : gen_bnd32_stx (addr, ptr, bounds));\n-}\n-\n-/* Load and return bounds returned by function in SLOT.  */\n-\n-static rtx\n-ix86_load_returned_bounds (rtx slot)\n-{\n-  rtx res;\n-\n-  gcc_assert (REG_P (slot));\n-  res = gen_reg_rtx (BNDmode);\n-  emit_move_insn (res, slot);\n-\n-  return res;\n-}\n-\n-/* Store BOUNDS returned by function into SLOT.  */\n-\n-static void\n-ix86_store_returned_bounds (rtx slot, rtx bounds)\n-{\n-  gcc_assert (REG_P (slot));\n-  emit_move_insn (slot, bounds);\n-}\n-\n /* Returns a function decl for a vectorized version of the combined function\n    with combined_fn code FN and the result vector type TYPE, or NULL_TREE\n    if it is not available.  */\n@@ -40656,7 +39791,6 @@ ix86_class_likely_spilled_p (reg_class_t rclass)\n       case SSE_FIRST_REG:\n       case FP_TOP_REG:\n       case FP_SECOND_REG:\n-      case BND_REGS:\n \treturn true;\n \n       default:\n@@ -41066,8 +40200,6 @@ ix86_hard_regno_mode_ok (unsigned int regno, machine_mode mode)\n     return (VALID_MASK_REG_MODE (mode)\n \t    || (TARGET_AVX512BW\n \t\t&& VALID_MASK_AVX512BW_MODE (mode)));\n-  if (BND_REGNO_P (regno))\n-    return VALID_BND_REG_MODE (mode);\n   if (SSE_REGNO_P (regno))\n     {\n       /* We implement the move patterns for all vector modes into and\n@@ -42064,10 +41196,6 @@ x86_order_regs_for_local_alloc (void)\n    for (i = FIRST_MASK_REG; i <= LAST_MASK_REG; i++)\n      reg_alloc_order [pos++] = i;\n \n-   /* MPX bound registers.  */\n-   for (i = FIRST_BND_REG; i <= LAST_BND_REG; i++)\n-     reg_alloc_order [pos++] = i;\n-\n    /* x87 registers.  */\n    if (TARGET_SSE_MATH)\n      for (i = FIRST_STACK_REG; i <= LAST_STACK_REG; i++)\n@@ -43088,7 +42216,6 @@ ix86_mitigate_rop (void)\n   set_rop_modrm_reg_bits (FIRST_REX_SSE_REG, input_risky, output_risky);\n   set_rop_modrm_reg_bits (FIRST_EXT_REX_SSE_REG, input_risky, output_risky);\n   set_rop_modrm_reg_bits (FIRST_MASK_REG, input_risky, output_risky);\n-  set_rop_modrm_reg_bits (FIRST_BND_REG, input_risky, output_risky);\n   COPY_HARD_REG_SET (inout_risky, input_risky);\n   IOR_HARD_REG_SET (inout_risky, output_risky);\n \n@@ -50416,27 +49543,6 @@ ix86_expand_sse2_mulvxdi3 (rtx op0, rtx op1, rtx op2)\n \t\t       gen_rtx_MULT (mode, op1, op2));\n }\n \n-/* Return 1 if control tansfer instruction INSN\n-   should be encoded with bnd prefix.\n-   If insn is NULL then return 1 when control\n-   transfer instructions should be prefixed with\n-   bnd by default for current function.  */\n-\n-bool\n-ix86_bnd_prefixed_insn_p (rtx insn)\n-{\n-  /* For call insns check special flag.  */\n-  if (insn && CALL_P (insn))\n-    {\n-      rtx call = get_call_rtx_from (insn);\n-      if (call)\n-\treturn CALL_EXPR_WITH_BOUNDS_P (call);\n-    }\n-\n-  /* All other insns are prefixed only if function is instrumented.  */\n-  return chkp_function_instrumented_p (current_function_decl);\n-}\n-\n /* Return 1 if control tansfer instruction INSN\n    should be encoded with notrack prefix.  */\n \n@@ -51744,73 +50850,6 @@ ix86_atomic_assign_expand_fenv (tree *hold, tree *clear, tree *update)\n \t\t    atomic_feraiseexcept_call);\n }\n \n-/* Return mode to be used for bounds or VOIDmode\n-   if bounds are not supported.  */\n-\n-static machine_mode\n-ix86_mpx_bound_mode ()\n-{\n-  /* Do not support pointer checker if MPX\n-     is not enabled.  */\n-  if (!TARGET_MPX)\n-    {\n-      if (flag_check_pointer_bounds)\n-\twarning (0, \"Pointer Checker requires MPX support on this target.\"\n-\t\t \" Use -mmpx options to enable MPX.\");\n-      return VOIDmode;\n-    }\n-\n-  return BNDmode;\n-}\n-\n-/*  Return constant used to statically initialize constant bounds.\n-\n-    This function is used to create special bound values.  For now\n-    only INIT bounds and NONE bounds are expected.  More special\n-    values may be added later.  */\n-\n-static tree\n-ix86_make_bounds_constant (HOST_WIDE_INT lb, HOST_WIDE_INT ub)\n-{\n-  tree low = lb ? build_minus_one_cst (pointer_sized_int_node)\n-    : build_zero_cst (pointer_sized_int_node);\n-  tree high = ub ? build_zero_cst (pointer_sized_int_node)\n-    : build_minus_one_cst (pointer_sized_int_node);\n-\n-  /* This function is supposed to be used to create INIT and\n-     NONE bounds only.  */\n-  gcc_assert ((lb == 0 && ub == -1)\n-\t      || (lb == -1 && ub == 0));\n-\n-  return build_complex (NULL, low, high);\n-}\n-\n-/* Generate a list of statements STMTS to initialize pointer bounds\n-   variable VAR with bounds LB and UB.  Return the number of generated\n-   statements.  */\n-\n-static int\n-ix86_initialize_bounds (tree var, tree lb, tree ub, tree *stmts)\n-{\n-  tree bnd_ptr = build_pointer_type (pointer_sized_int_node);\n-  tree lhs, modify, var_p;\n-\n-  ub = build1 (BIT_NOT_EXPR, pointer_sized_int_node, ub);\n-  var_p = fold_convert (bnd_ptr, build_fold_addr_expr (var));\n-\n-  lhs = build1 (INDIRECT_REF, pointer_sized_int_node, var_p);\n-  modify = build2 (MODIFY_EXPR, TREE_TYPE (lhs), lhs, lb);\n-  append_to_statement_list (modify, stmts);\n-\n-  lhs = build1 (INDIRECT_REF, pointer_sized_int_node,\n-\t\tbuild2 (POINTER_PLUS_EXPR, bnd_ptr, var_p,\n-\t\t\tTYPE_SIZE_UNIT (pointer_sized_int_node)));\n-  modify = build2 (MODIFY_EXPR, TREE_TYPE (lhs), lhs, ub);\n-  append_to_statement_list (modify, stmts);\n-\n-  return 2;\n-}\n-\n #if !TARGET_MACHO && !TARGET_DLLIMPORT_DECL_ATTRIBUTES\n /* For i386, common symbol is local only for non-PIE binaries.  For\n    x86-64, common symbol is local only for non-PIE binaries or linker\n@@ -52790,33 +51829,6 @@ ix86_run_selftests (void)\n #undef TARGET_CALL_FUSAGE_CONTAINS_NON_CALLEE_CLOBBERS\n #define TARGET_CALL_FUSAGE_CONTAINS_NON_CALLEE_CLOBBERS true\n \n-#undef TARGET_LOAD_BOUNDS_FOR_ARG\n-#define TARGET_LOAD_BOUNDS_FOR_ARG ix86_load_bounds\n-\n-#undef TARGET_STORE_BOUNDS_FOR_ARG\n-#define TARGET_STORE_BOUNDS_FOR_ARG ix86_store_bounds\n-\n-#undef TARGET_LOAD_RETURNED_BOUNDS\n-#define TARGET_LOAD_RETURNED_BOUNDS ix86_load_returned_bounds\n-\n-#undef TARGET_STORE_RETURNED_BOUNDS\n-#define TARGET_STORE_RETURNED_BOUNDS ix86_store_returned_bounds\n-\n-#undef TARGET_CHKP_BOUND_MODE\n-#define TARGET_CHKP_BOUND_MODE ix86_mpx_bound_mode\n-\n-#undef TARGET_BUILTIN_CHKP_FUNCTION\n-#define TARGET_BUILTIN_CHKP_FUNCTION ix86_builtin_mpx_function\n-\n-#undef TARGET_CHKP_FUNCTION_VALUE_BOUNDS\n-#define TARGET_CHKP_FUNCTION_VALUE_BOUNDS ix86_function_value_bounds\n-\n-#undef TARGET_CHKP_MAKE_BOUNDS_CONSTANT\n-#define TARGET_CHKP_MAKE_BOUNDS_CONSTANT ix86_make_bounds_constant\n-\n-#undef TARGET_CHKP_INITIALIZE_BOUNDS\n-#define TARGET_CHKP_INITIALIZE_BOUNDS ix86_initialize_bounds\n-\n #undef TARGET_SETUP_INCOMING_VARARG_BOUNDS\n #define TARGET_SETUP_INCOMING_VARARG_BOUNDS ix86_setup_incoming_vararg_bounds\n "}, {"sha": "049760efe349524f815db60013f257bd8611a032", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -175,8 +175,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define TARGET_XSAVEOPT_P(x)\tTARGET_ISA_XSAVEOPT_P(x)\n #define TARGET_PREFETCHWT1\tTARGET_ISA_PREFETCHWT1\n #define TARGET_PREFETCHWT1_P(x)\tTARGET_ISA_PREFETCHWT1_P(x)\n-#define TARGET_MPX\tTARGET_ISA_MPX\n-#define TARGET_MPX_P(x)\tTARGET_ISA_MPX_P(x)\n #define TARGET_CLWB\tTARGET_ISA_CLWB\n #define TARGET_CLWB_P(x)\tTARGET_ISA_CLWB_P(x)\n #define TARGET_MWAITX\tTARGET_ISA_MWAITX\n@@ -1157,9 +1155,6 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n \n #define VALID_MASK_AVX512BW_MODE(MODE) ((MODE) == SImode || (MODE) == DImode)\n \n-#define VALID_BND_REG_MODE(MODE) \\\n-  (TARGET_64BIT ? (MODE) == BND64mode : (MODE) == BND32mode)\n-\n #define VALID_DFP_MODE_P(MODE) \\\n   ((MODE) == SDmode || (MODE) == DDmode || (MODE) == TDmode)\n \n@@ -1261,9 +1256,6 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n #define FIRST_MASK_REG  MASK0_REG\n #define LAST_MASK_REG   MASK7_REG\n \n-#define FIRST_BND_REG  BND0_REG\n-#define LAST_BND_REG   BND3_REG\n-\n /* Override this in other tm.h files to cope with various OS lossage\n    requiring a frame pointer.  */\n #ifndef SUBTARGET_FRAME_POINTER_REQUIRED\n@@ -1345,7 +1337,6 @@ enum reg_class\n   NO_REX_SSE_REGS,\n   SSE_REGS,\n   EVEX_SSE_REGS,\n-  BND_REGS,\n   ALL_SSE_REGS,\n   MMX_REGS,\n   FP_TOP_SSE_REGS,\n@@ -1408,7 +1399,6 @@ enum reg_class\n    \"NO_REX_SSE_REGS\",\t\t\t\\\n    \"SSE_REGS\",\t\t\t\t\\\n    \"EVEX_SSE_REGS\",\t\t\t\\\n-   \"BND_REGS\",\t\t\t\t\\\n    \"ALL_SSE_REGS\",\t\t\t\\\n    \"MMX_REGS\",\t\t\t\t\\\n    \"FP_TOP_SSE_REGS\",\t\t\t\\\n@@ -1451,7 +1441,6 @@ enum reg_class\n { 0x1fe00000,  0x000000,    0x0 },       /* NO_REX_SSE_REGS */           \\\n { 0x1fe00000,  0x1fe000,    0x0 },       /* SSE_REGS */                  \\\n        { 0x0,0xffe00000,   0x1f },       /* EVEX_SSE_REGS */             \\\n-       { 0x0,       0x0,0x1e000 },       /* BND_REGS */\t\t\t \\\n { 0x1fe00000,0xffffe000,   0x1f },       /* ALL_SSE_REGS */              \\\n { 0xe0000000,      0x1f,    0x0 },       /* MMX_REGS */                  \\\n { 0x1fe00100,0xffffe000,   0x1f },       /* FP_TOP_SSE_REG */            \\\n@@ -1526,9 +1515,6 @@ enum reg_class\n #define CC_REG_P(X) (REG_P (X) && CC_REGNO_P (REGNO (X)))\n #define CC_REGNO_P(X) ((X) == FLAGS_REG || (X) == FPSR_REG)\n \n-#define BND_REG_P(X) (REG_P (X) && BND_REGNO_P (REGNO (X)))\n-#define BND_REGNO_P(N) IN_RANGE ((N), FIRST_BND_REG, LAST_BND_REG)\n-\n #define MOD4_SSE_REG_P(X) (REG_P (X) && MOD4_SSE_REGNO_P (REGNO (X)))\n #define MOD4_SSE_REGNO_P(N) ((N) == XMM0_REG  \\\n \t\t\t     || (N) == XMM4_REG  \\\n@@ -1670,9 +1656,6 @@ typedef struct ix86_args {\n   int float_in_sse;\t\t/* Set to 1 or 2 for 32bit targets if\n \t\t\t\t   SFmode/DFmode arguments should be passed\n \t\t\t\t   in SSE registers.  Otherwise 0.  */\n-  int bnd_regno;                /* next available bnd register number */\n-  int bnds_in_bt;               /* number of bounds expected in BT.  */\n-  int force_bnd_pass;           /* number of bounds expected for stdarg arg.  */\n   int stdarg;                   /* Set to 1 if function is stdarg.  */\n   enum calling_abi call_abi;\t/* Set to SYSV_ABI for sysv abi. Otherwise\n  \t\t\t\t   MS_ABI for ms abi.  */\n@@ -1964,9 +1947,6 @@ do {\t\t\t\t\t\t\t\\\n #define STACK_SAVEAREA_MODE(LEVEL)\t\t\t\\\n   ((LEVEL) == SAVE_NONLOCAL ? (TARGET_64BIT ? TImode : DImode) : Pmode)\n \n-/* Specify the machine mode that bounds have.  */\n-#define BNDmode (ix86_pmode == PMODE_DI ? BND64mode : BND32mode)\n-\n /* A C expression whose value is zero if pointers that need to be extended\n    from being `POINTER_SIZE' bits wide to `Pmode' are sign-extended and\n    greater then zero if they are zero-extended and less then zero if the\n@@ -2257,15 +2237,6 @@ extern int const svr4_dbx_register_map[FIRST_PSEUDO_REGISTER];\n /* Default threshold for putting data in large sections\n    with x86-64 medium memory model */\n #define DEFAULT_LARGE_SECTION_THRESHOLD 65536\n-\n-/* Adjust the length of the insn with the length of BND prefix.  */\n-\n-#define ADJUST_INSN_LENGTH(INSN, LENGTH)\t\t\\\n-do {\t\t\t\t\t\t\t\\\n-  if (NONDEBUG_INSN_P (INSN) && INSN_CODE (INSN) >= 0\t\\\n-      && get_attr_maybe_prefix_bnd (INSN))\t\t\\\n-    LENGTH += ix86_bnd_prefixed_insn_p (INSN);\t\t\\\n-} while (0)\n \f\n /* Which processor to tune code generation for.  These must be in sync\n    with processor_target_table in i386.c.  */ "}, {"sha": "eb77ef3c08fb9bdd8d57de8f9420b6de1e564c96", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 8, "deletions": 187, "changes": 195, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -62,7 +62,7 @@\n ;; ; -- print a semicolon (after prefixes due to bug in older gas).\n ;; ~ -- print \"i\" if TARGET_AVX2, \"f\" otherwise.\n ;; ^ -- print addr32 prefix if TARGET_64BIT and Pmode != word_mode\n-;; ! -- print MPX or NOTRACK prefix for jxx/call/ret instructions if required.\n+;; ! -- print NOTRACK prefix for jxx/call/ret instructions if required.\n \n (define_c_enum \"unspec\" [\n   ;; Relocation specifiers\n@@ -550,9 +550,6 @@\n \t   (const_int 0)\n \t (and (eq_attr \"unit\" \"sse\") (eq_attr \"mode\" \"SF,DF\"))\n \t   (const_int 1)\n-\t (and (eq_attr \"type\" \"ibr,call,callv\")\n-\t      (match_test \"ix86_bnd_prefixed_insn_p (insn)\"))\n-\t   (const_int 1)\n \t]\n \t(const_int 0)))\n \n@@ -596,9 +593,6 @@\n \t]\n \t(const_int 0)))\n \n-;; Set when BND opcode prefix may be used.\n-(define_attr \"maybe_prefix_bnd\" \"\" (const_int 0))\n-\n ;; Prefix used: original, VEX or maybe VEX.\n (define_attr \"prefix\" \"orig,vex,maybe_vex,evex,maybe_evex\"\n   (cond [(eq_attr \"mode\" \"OI,V8SF,V4DF\")\n@@ -1074,17 +1068,6 @@\n (define_mode_iterator BND [(BND32 \"!TARGET_LP64\")\n \t\t\t   (BND64 \"TARGET_LP64\")])\n \n-;; Pointer mode corresponding to bound mode.\n-(define_mode_attr bnd_ptr [(BND32 \"SI\") (BND64 \"DI\")])\n-\n-;; MPX check types\n-(define_int_iterator BNDCHECK [UNSPEC_BNDCL UNSPEC_BNDCU UNSPEC_BNDCN])\n-\n-;; Check name\n-(define_int_attr bndcheck [(UNSPEC_BNDCL \"cl\")\n-\t\t\t   (UNSPEC_BNDCU \"cu\")\n-\t\t\t   (UNSPEC_BNDCN \"cn\")])\n-\n ;; Instruction suffix for integer modes.\n (define_mode_attr imodesuffix [(QI \"b\") (HI \"w\") (SI \"l\") (DI \"q\")])\n \n@@ -12601,8 +12584,7 @@\n \t       (lt (minus (match_dup 0) (pc))\n \t\t   (const_int 128)))\n \t  (const_int 2)\n-\t  (const_int 6)))\n-   (set_attr \"maybe_prefix_bnd\" \"1\")])\n+\t  (const_int 6)))])\n \n ;; In general it is not safe to assume too much about CCmode registers,\n ;; so simplify-rtx stops when it sees a second one.  Under certain\n@@ -12670,8 +12652,7 @@\n \t       (lt (minus (match_dup 0) (pc))\n \t\t   (const_int 128)))\n \t  (const_int 2)\n-\t  (const_int 5)))\n-   (set_attr \"maybe_prefix_bnd\" \"1\")])\n+\t  (const_int 5)))])\n \n (define_expand \"indirect_jump\"\n   [(set (pc) (match_operand 0 \"indirect_branch_operand\"))]\n@@ -12691,8 +12672,7 @@\n \t\t\t\t != indirect_branch_keep)\")\n \t(const_string \"multi\")\n \t(const_string \"ibr\")))\n-   (set_attr \"length_immediate\" \"0\")\n-   (set_attr \"maybe_prefix_bnd\" \"1\")])\n+   (set_attr \"length_immediate\" \"0\")])\n \n (define_expand \"tablejump\"\n   [(parallel [(set (pc) (match_operand 0 \"indirect_branch_operand\"))\n@@ -12746,8 +12726,7 @@\n \t\t\t\t != indirect_branch_keep)\")\n \t(const_string \"multi\")\n \t(const_string \"ibr\")))\n-   (set_attr \"length_immediate\" \"0\")\n-   (set_attr \"maybe_prefix_bnd\" \"1\")])\n+   (set_attr \"length_immediate\" \"0\")])\n \f\n ;; Convert setcc + movzbl to xor + setcc if operands don't overlap.\n \n@@ -13444,8 +13423,7 @@\n   [(set_attr \"length\" \"1\")\n    (set_attr \"atom_unit\" \"jeu\")\n    (set_attr \"length_immediate\" \"0\")\n-   (set_attr \"modrm\" \"0\")\n-   (set_attr \"maybe_prefix_bnd\" \"1\")])\n+   (set_attr \"modrm\" \"0\")])\n \n (define_insn \"interrupt_return\"\n   [(simple_return)\n@@ -13480,8 +13458,7 @@\n   [(set_attr \"length\" \"3\")\n    (set_attr \"atom_unit\" \"jeu\")\n    (set_attr \"length_immediate\" \"2\")\n-   (set_attr \"modrm\" \"0\")\n-   (set_attr \"maybe_prefix_bnd\" \"1\")])\n+   (set_attr \"modrm\" \"0\")])\n \n (define_expand \"simple_return_indirect_internal\"\n   [(parallel\n@@ -13498,8 +13475,7 @@\n \t\t\t\t != indirect_branch_keep)\")\n \t(const_string \"multi\")\n \t(const_string \"ibr\")))\n-   (set_attr \"length_immediate\" \"0\")\n-   (set_attr \"maybe_prefix_bnd\" \"1\")])\n+   (set_attr \"length_immediate\" \"0\")])\n \n (define_insn \"nop\"\n   [(const_int 0)]\n@@ -20844,161 +20820,6 @@\n   [(set_attr \"length\" \"3\")\n   (set_attr \"memory\" \"unknown\")])\n \n-;; MPX instructions\n-\n-(define_expand \"<mode>_mk\"\n-  [(set (match_operand:BND 0 \"register_operand\")\n-\t(unspec:BND\n-\t  [(mem:<bnd_ptr>\n-\t   (match_par_dup 3\n-\t     [(match_operand:<bnd_ptr> 1 \"register_operand\")\n-\t      (match_operand:<bnd_ptr> 2 \"address_mpx_no_base_operand\")]))]\n-\t  UNSPEC_BNDMK))]\n-  \"TARGET_MPX\"\n-{\n-  operands[3] = gen_rtx_UNSPEC (Pmode, gen_rtvec (2, operands[1],\n-\t\t\t\t\t\t  operands[2]),\n-\t\t\t\tUNSPEC_BNDMK_ADDR);\n-})\n-\n-(define_insn \"*<mode>_mk\"\n-  [(set (match_operand:BND 0 \"register_operand\" \"=w\")\n-\t(unspec:BND\n-\t  [(match_operator:<bnd_ptr> 3 \"bnd_mem_operator\"\n-\t     [(unspec:<bnd_ptr>\n-\t\t[(match_operand:<bnd_ptr> 1 \"register_operand\" \"r\")\n-\t\t (match_operand:<bnd_ptr> 2 \"address_mpx_no_base_operand\" \"Tb\")]\n-\t        UNSPEC_BNDMK_ADDR)])]\n-\t  UNSPEC_BNDMK))]\n-  \"TARGET_MPX\"\n-  \"bndmk\\t{%3, %0|%0, %3}\"\n-  [(set_attr \"type\" \"mpxmk\")])\n-\n-(define_expand \"mov<mode>\"\n-  [(set (match_operand:BND 0 \"general_operand\")\n-\t(match_operand:BND 1 \"general_operand\"))]\n-  \"TARGET_MPX\"\n-  \"ix86_expand_move (<MODE>mode, operands); DONE;\")\n-\n-(define_insn \"*mov<mode>_internal_mpx\"\n-  [(set (match_operand:BND 0 \"nonimmediate_operand\" \"=w,m\")\n-\t(match_operand:BND 1 \"general_operand\" \"wm,w\"))]\n-  \"TARGET_MPX\"\n-  \"bndmov\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"mpxmov\")])\n-\n-(define_expand \"<mode>_<bndcheck>\"\n-  [(parallel\n-     [(unspec\n-\t[(match_operand:BND 0 \"register_operand\")\n-\t (match_operand:<bnd_ptr> 1 \"address_no_seg_operand\")] BNDCHECK)\n-      (set (match_dup 2)\n-\t   (unspec:BLK [(match_dup 2)] UNSPEC_MPX_FENCE))])]\n-  \"TARGET_MPX\"\n-{\n-  operands[2] = gen_rtx_MEM (BLKmode, operands[1]);\n-  MEM_VOLATILE_P (operands[2]) = 1;\n-})\n-\n-(define_insn \"*<mode>_<bndcheck>\"\n-  [(unspec\n-     [(match_operand:BND 0 \"register_operand\" \"w\")\n-      (match_operand:<bnd_ptr> 1 \"address_no_seg_operand\" \"Ts\")] BNDCHECK)\n-   (set (match_operand:BLK 2 \"bnd_mem_operator\")\n-\t(unspec:BLK [(match_dup 2)] UNSPEC_MPX_FENCE))]\n-  \"TARGET_MPX\"\n-  \"bnd<bndcheck>\\t{%a1, %0|%0, %a1}\"\n-  [(set_attr \"type\" \"mpxchk\")])\n-\n-(define_expand \"<mode>_ldx\"\n-  [(parallel\n-     [(set (match_operand:BND 0 \"register_operand\")\n-\t   (unspec:BND\n-\t     [(mem:<bnd_ptr>\n-\t\t(match_par_dup 3\n-\t\t  [(match_operand:<bnd_ptr> 1 \"address_mpx_no_index_operand\")\n-\t\t   (match_operand:<bnd_ptr> 2 \"register_operand\")]))]\n-\t     UNSPEC_BNDLDX))\n-      (use (mem:BLK (match_dup 1)))])]\n-  \"TARGET_MPX\"\n-{\n-  /* Avoid registers which cannot be used as index.  */\n-  if (!index_register_operand (operands[2], Pmode))\n-    operands[2] = copy_addr_to_reg (operands[2]);\n-\n-  operands[3] = gen_rtx_UNSPEC (Pmode, gen_rtvec (2, operands[1],\n-\t\t\t\t\t\t  operands[2]),\n-\t\t\t\tUNSPEC_BNDLDX_ADDR);\n-})\n-\n-(define_insn \"*<mode>_ldx\"\n-  [(set (match_operand:BND 0 \"register_operand\" \"=w\")\n-\t(unspec:BND\n-\t  [(match_operator:<bnd_ptr> 3 \"bnd_mem_operator\"\n-\t     [(unspec:<bnd_ptr>\n-\t\t[(match_operand:<bnd_ptr> 1 \"address_mpx_no_index_operand\" \"Ti\")\n-\t\t (match_operand:<bnd_ptr> 2 \"register_operand\" \"l\")]\n-\t\tUNSPEC_BNDLDX_ADDR)])]\n-\t  UNSPEC_BNDLDX))\n-   (use (mem:BLK (match_dup 1)))]\n-  \"TARGET_MPX\"\n-  \"bndldx\\t{%3, %0|%0, %3}\"\n-  [(set_attr \"type\" \"mpxld\")])\n-\n-(define_expand \"<mode>_stx\"\n-  [(parallel\n-     [(unspec\n-\t[(mem:<bnd_ptr>\n-\t   (match_par_dup 3\n-\t     [(match_operand:<bnd_ptr> 0 \"address_mpx_no_index_operand\")\n-\t      (match_operand:<bnd_ptr> 1 \"register_operand\")]))\n-\t (match_operand:BND 2 \"register_operand\")]\n-\tUNSPEC_BNDSTX)\n-      (set (match_dup 4)\n-\t   (unspec:BLK [(match_dup 4)] UNSPEC_MPX_FENCE))])]\n-  \"TARGET_MPX\"\n-{\n-  /* Avoid registers which cannot be used as index.  */\n-  if (!index_register_operand (operands[1], Pmode))\n-    operands[1] = copy_addr_to_reg (operands[1]);\n-\n-  operands[3] = gen_rtx_UNSPEC (Pmode, gen_rtvec (2, operands[0],\n-\t\t\t\t\t\t  operands[1]),\n-\t\t\t\tUNSPEC_BNDLDX_ADDR);\n-  operands[4] = gen_rtx_MEM (BLKmode, operands[0]);\n-  MEM_VOLATILE_P (operands[4]) = 1;\n-})\n-\n-(define_insn \"*<mode>_stx\"\n-  [(unspec\n-     [(match_operator:<bnd_ptr> 3 \"bnd_mem_operator\"\n-\t[(unspec:<bnd_ptr>\n-\t   [(match_operand:<bnd_ptr> 0 \"address_mpx_no_index_operand\" \"Ti\")\n-\t    (match_operand:<bnd_ptr> 1 \"register_operand\" \"l\")]\n-\t   UNSPEC_BNDLDX_ADDR)])\n-\t (match_operand:BND 2 \"register_operand\" \"w\")]\n-\tUNSPEC_BNDSTX)\n-   (set (match_operand:BLK 4 \"bnd_mem_operator\")\n-\t(unspec:BLK [(match_dup 4)] UNSPEC_MPX_FENCE))]\n-  \"TARGET_MPX\"\n-  \"bndstx\\t{%2, %3|%3, %2}\"\n-  [(set_attr \"type\" \"mpxst\")])\n-\n-(define_insn \"move_size_reloc_<mode>\"\n-  [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n-\t(unspec:SWI48\n-\t  [(match_operand:SWI48 1 \"symbol_operand\")]\n-\tUNSPEC_SIZEOF))]\n-  \"TARGET_MPX\"\n-{\n-  if (x86_64_immediate_size_operand (operands[1], VOIDmode))\n-    return \"mov{l}\\t{%1@SIZE, %k0|%k0, %1@SIZE}\";\n-  else\n-    return \"movabs{q}\\t{%1@SIZE, %0|%0, %1@SIZE}\";\n-}\n-  [(set_attr \"type\" \"imov\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n ;; RDPKRU and WRPKRU\n \n (define_expand \"rdpkru\""}, {"sha": "01a0385dfa403eaa230ba0d9642e7e86fd60c204", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -951,8 +951,8 @@ Target Report Mask(ISA_RTM) Var(ix86_isa_flags) Save\n Support RTM built-in functions and code generation.\n \n mmpx\n-Target Report Mask(ISA_MPX) Var(ix86_isa_flags2) Save\n-Support MPX code generation.\n+Target Report\n+Deprecated in GCC 9.  This switch has no effect.\n \n mmwaitx\n Target Report Mask(ISA_MWAITX) Var(ix86_isa_flags2) Save"}, {"sha": "3eeb66c1618c06896ba21b72278477d2ebcefa05", "filename": "gcc/config/i386/linux-common.h", "status": "modified", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fconfig%2Fi386%2Flinux-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fconfig%2Fi386%2Flinux-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Flinux-common.h?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -54,31 +54,6 @@ along with GCC; see the file COPYING3.  If not see\n \t\t       GNU_USER_TARGET_MATHFILE_SPEC \" \" \\\n \t\t       ANDROID_ENDFILE_SPEC)\n \n-#ifndef LIBMPX_LIBS\n-#define LIBMPX_LIBS \"\\\n- %:include(libmpx.spec)%(link_libmpx)\"\n-#endif\n-\n-#ifndef LINK_MPX\n-#if defined (HAVE_LD_BNDPLT_SUPPORT)\n-#define LINK_MPX \"-z bndplt \"\n-#else\n-#define LINK_MPX \\\n-  \"%nGCC was configured with a linker with no '-z bndplt' support. \" \\\n-  \"It significantly reduces MPX coverage for dynamic codes. \" \\\n-  \"It is strongly recommended to use GCC properly configured for MPX.\"\n-#endif\n-#endif\n-\n-#ifndef MPX_SPEC\n-#ifdef SPEC_64\n-#define MPX_SPEC \"\\\n- %{mmpx:%{fcheck-pointer-bounds:%{!static:%{\" SPEC_64 \":\" LINK_MPX \"}}}}\"\n-#else\n-#define MPX_SPEC \"\"\n-#endif\n-#endif\n-\n #ifdef HAVE_LD_PUSHPOPSTATE_SUPPORT\n #define MPX_LD_AS_NEEDED_GUARD_PUSH \"--push-state --no-as-needed\"\n #define MPX_LD_AS_NEEDED_GUARD_POP \"--pop-state\"\n@@ -87,41 +62,6 @@ along with GCC; see the file COPYING3.  If not see\n #define MPX_LD_AS_NEEDED_GUARD_POP \"\"\n #endif\n \n-#ifndef LIBMPX_SPEC\n-#if defined(HAVE_LD_STATIC_DYNAMIC)\n-#define LIBMPX_SPEC \"\\\n-%{mmpx:%{fcheck-pointer-bounds:\\\n-    %{static:--whole-archive -lmpx --no-whole-archive\" LIBMPX_LIBS \"}\\\n-    %{!static:%{static-libmpx:\" LD_STATIC_OPTION \" --whole-archive}\\\n-    %{!static-libmpx:\" MPX_LD_AS_NEEDED_GUARD_PUSH \"} -lmpx \\\n-    %{!static-libmpx:\" MPX_LD_AS_NEEDED_GUARD_POP \"} \\\n-    %{static-libmpx:--no-whole-archive \" LD_DYNAMIC_OPTION \\\n-    LIBMPX_LIBS \"}}}}\"\n-#else\n-#define LIBMPX_SPEC \"\\\n-%{mmpx:%{fcheck-pointer-bounds:-lmpx\" LIBMPX_LIBS \"}}\"\n-#endif\n-#endif\n-\n-#ifndef LIBMPXWRAPPERS_SPEC\n-#if defined(HAVE_LD_STATIC_DYNAMIC)\n-#define LIBMPXWRAPPERS_SPEC \"\\\n-%{mmpx:%{fcheck-pointer-bounds:%{!fno-chkp-use-wrappers:\\\n-    %{static:-lmpxwrappers}\\\n-    %{!static:%{static-libmpxwrappers:\" LD_STATIC_OPTION \"}\\\n-    -lmpxwrappers %{static-libmpxwrappers: \"\\\n-    LD_DYNAMIC_OPTION \"}}}}}\"\n-#else\n-#define LIBMPXWRAPPERS_SPEC \"\\\n-%{mmpx:%{fcheck-pointer-bounds:{!fno-chkp-use-wrappers:-lmpxwrappers}}}\"\n-#endif\n-#endif\n-\n-#ifndef CHKP_SPEC\n-#define CHKP_SPEC \"\\\n-%{!nostdlib:%{!nodefaultlibs:\" LIBMPX_SPEC LIBMPXWRAPPERS_SPEC \"}}\" MPX_SPEC\n-#endif\n-\n extern void file_end_indicate_exec_stack_and_cet (void);\n \n #undef TARGET_ASM_FILE_END"}, {"sha": "babaf1d9433710194edd5da65afcf6a41e72831b", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 0, "deletions": 62, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -1132,68 +1132,6 @@\n   return true;\n })\n \n-;; Return true if op is valid MPX address operand without base\n-(define_predicate \"address_mpx_no_base_operand\"\n-  (match_test \"address_operand (op, VOIDmode)\")\n-{\n-  struct ix86_address parts;\n-  int ok;\n-\n-  ok = ix86_decompose_address (op, &parts);\n-  gcc_assert (ok);\n-\n-  if (parts.index && parts.base)\n-    return false;\n-\n-  if (parts.seg != ADDR_SPACE_GENERIC)\n-    return false;\n-\n-  /* Do not support (%rip).  */\n-  if (parts.disp && flag_pic && TARGET_64BIT\n-      && SYMBOLIC_CONST (parts.disp))\n-    {\n-      if (GET_CODE (parts.disp) != CONST\n-\t  || GET_CODE (XEXP (parts.disp, 0)) != PLUS\n-\t  || GET_CODE (XEXP (XEXP (parts.disp, 0), 0)) != UNSPEC\n-\t  || !CONST_INT_P (XEXP (XEXP (parts.disp, 0), 1))\n-\t  || (XINT (XEXP (XEXP (parts.disp, 0), 0), 1) != UNSPEC_DTPOFF\n-\t      && XINT (XEXP (XEXP (parts.disp, 0), 0), 1) != UNSPEC_NTPOFF))\n-\treturn false;\n-    }\n-\n-  return true;\n-})\n-\n-;; Return true if op is valid MPX address operand without index\n-(define_predicate \"address_mpx_no_index_operand\"\n-  (match_test \"address_operand (op, VOIDmode)\")\n-{\n-  struct ix86_address parts;\n-  int ok;\n-\n-  ok = ix86_decompose_address (op, &parts);\n-  gcc_assert (ok);\n-\n-  if (parts.index)\n-    return false;\n-\n-  if (parts.seg != ADDR_SPACE_GENERIC)\n-    return false;\n-\n-  /* Do not support (%rip).  */\n-  if (parts.disp && flag_pic && TARGET_64BIT\n-      && SYMBOLIC_CONST (parts.disp)\n-      && (GET_CODE (parts.disp) != CONST\n-\t  || GET_CODE (XEXP (parts.disp, 0)) != PLUS\n-\t  || GET_CODE (XEXP (XEXP (parts.disp, 0), 0)) != UNSPEC\n-\t  || !CONST_INT_P (XEXP (XEXP (parts.disp, 0), 1))\n-\t  || (XINT (XEXP (XEXP (parts.disp, 0), 0), 1) != UNSPEC_DTPOFF\n-\t      && XINT (XEXP (XEXP (parts.disp, 0), 0), 1) != UNSPEC_NTPOFF)))\n-    return false;\n-\n-  return true;\n-})\n-\n (define_predicate \"vsib_mem_operator\"\n   (match_code \"mem\"))\n "}, {"sha": "459b7c2806f5c52db59b0b8c2b4c0136eb3d8868", "filename": "gcc/dbxout.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -2379,10 +2379,6 @@ dbxout_type (tree type, int full)\n       dbxout_type (TREE_TYPE (type), 0);\n       break;\n \n-    case POINTER_BOUNDS_TYPE:\n-      /* No debug info for pointer bounds type supported yet.  */\n-      break;\n-\n     default:\n       /* A C++ function with deduced return type can have a TEMPLATE_TYPE_PARM\n \t named 'auto' in its type."}, {"sha": "e0a84b8b3c5cb1cce84f7dbcc4fc880886264ca5", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 2, "deletions": 224, "changes": 226, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -84,7 +84,6 @@ extensions, accepted by GCC in C90 mode and in C++.\n * x86 specific memory model extensions for transactional memory:: x86 memory models.\n * Object Size Checking:: Built-in functions for limited buffer overflow\n                         checking.\n-* Pointer Bounds Checker builtins:: Built-in functions for Pointer Bounds Checker.\n * Other Builtins::      Other built-in functions.\n * Target Builtins::     Built-in functions specific to particular targets.\n * Target Format Checks:: Format checks specific to particular targets.\n@@ -2465,19 +2464,6 @@ declares that @code{my_alloc1} returns 16-byte aligned pointer and\n that @code{my_alloc2} returns a pointer whose value modulo 32 is equal\n to 8.\n \n-@item bnd_instrument\n-@cindex @code{bnd_instrument} function attribute\n-The @code{bnd_instrument} attribute on functions is used to inform the\n-compiler that the function should be instrumented when compiled\n-with the @option{-fchkp-instrument-marked-only} option.\n-\n-@item bnd_legacy\n-@cindex @code{bnd_legacy} function attribute\n-@cindex Pointer Bounds Checker attributes\n-The @code{bnd_legacy} attribute on functions is used to inform the\n-compiler that the function should not be instrumented when compiled\n-with the @option{-fcheck-pointer-bounds} option.\n-\n @item cold\n @cindex @code{cold} function attribute\n The @code{cold} attribute on functions is used to inform the compiler that\n@@ -5589,7 +5575,7 @@ caller-saved registers. That is, all registers are callee-saved. For\n example, this attribute can be used for a function called from an\n interrupt handler. The compiler generates proper function entry and\n exit sequences to save and restore any modified registers, except for\n-the EFLAGS register.  Since GCC doesn't preserve MPX, SSE, MMX nor x87\n+the EFLAGS register.  Since GCC doesn't preserve SSE, MMX nor x87\n states, the GCC option @option{-mgeneral-regs-only} should be used to\n compile functions with @code{no_caller_saved_registers} attribute.\n \n@@ -5603,7 +5589,7 @@ this attribute is present.  The @code{IRET} instruction, instead of the\n @code{RET} instruction, is used to return from interrupt handlers.  All\n registers, except for the EFLAGS register which is restored by the\n @code{IRET} instruction, are preserved by the compiler.  Since GCC\n-doesn't preserve MPX, SSE, MMX nor x87 states, the GCC option\n+doesn't preserve SSE, MMX nor x87 states, the GCC option\n @option{-mgeneral-regs-only} should be used to compile interrupt and\n exception handlers.\n \n@@ -7004,38 +6990,6 @@ struct foo\n \n This warning can be disabled by @option{-Wno-if-not-aligned}.\n \n-@item bnd_variable_size\n-@cindex @code{bnd_variable_size} type attribute\n-@cindex Pointer Bounds Checker attributes\n-When applied to a structure field, this attribute tells Pointer\n-Bounds Checker that the size of this field should not be computed\n-using static type information.  It may be used to mark variably-sized\n-static array fields placed at the end of a structure.\n-\n-@smallexample\n-struct S\n-@{\n-  int size;\n-  char data[1];\n-@}\n-S *p = (S *)malloc (sizeof(S) + 100);\n-p->data[10] = 0; //Bounds violation\n-@end smallexample\n-\n-@noindent\n-By using an attribute for the field we may avoid unwanted bound\n-violation checks:\n-\n-@smallexample\n-struct S\n-@{\n-  int size;\n-  char data[1] __attribute__((bnd_variable_size));\n-@}\n-S *p = (S *)malloc (sizeof(S) + 100);\n-p->data[10] = 0; //OK\n-@end smallexample\n-\n @item deprecated\n @itemx deprecated (@var{msg})\n @cindex @code{deprecated} type attribute\n@@ -10924,182 +10878,6 @@ format string @var{fmt}.  If the compiler is able to optimize them to\n @code{fputc} etc.@: functions, it does, otherwise the checking function\n is called and the @var{flag} argument passed to it.\n \n-@node Pointer Bounds Checker builtins\n-@section Pointer Bounds Checker Built-in Functions\n-@cindex Pointer Bounds Checker builtins\n-@findex __builtin___bnd_set_ptr_bounds\n-@findex __builtin___bnd_narrow_ptr_bounds\n-@findex __builtin___bnd_copy_ptr_bounds\n-@findex __builtin___bnd_init_ptr_bounds\n-@findex __builtin___bnd_null_ptr_bounds\n-@findex __builtin___bnd_store_ptr_bounds\n-@findex __builtin___bnd_chk_ptr_lbounds\n-@findex __builtin___bnd_chk_ptr_ubounds\n-@findex __builtin___bnd_chk_ptr_bounds\n-@findex __builtin___bnd_get_ptr_lbound\n-@findex __builtin___bnd_get_ptr_ubound\n-\n-GCC provides a set of built-in functions to control Pointer Bounds Checker\n-instrumentation.  Note that all Pointer Bounds Checker builtins can be used\n-even if you compile with Pointer Bounds Checker off\n-(@option{-fno-check-pointer-bounds}).\n-The behavior may differ in such case as documented below.\n-\n-@deftypefn {Built-in Function} {void *} __builtin___bnd_set_ptr_bounds (const void *@var{q}, size_t @var{size})\n-\n-This built-in function returns a new pointer with the value of @var{q}, and\n-associate it with the bounds [@var{q}, @var{q}+@var{size}-1].  With Pointer\n-Bounds Checker off, the built-in function just returns the first argument.\n-\n-@smallexample\n-extern void *__wrap_malloc (size_t n)\n-@{\n-  void *p = (void *)__real_malloc (n);\n-  if (!p) return __builtin___bnd_null_ptr_bounds (p);\n-  return __builtin___bnd_set_ptr_bounds (p, n);\n-@}\n-@end smallexample\n-\n-@end deftypefn\n-\n-@deftypefn {Built-in Function} {void *} __builtin___bnd_narrow_ptr_bounds (const void *@var{p}, const void *@var{q}, size_t  @var{size})\n-\n-This built-in function returns a new pointer with the value of @var{p}\n-and associates it with the narrowed bounds formed by the intersection\n-of bounds associated with @var{q} and the bounds\n-[@var{p}, @var{p} + @var{size} - 1].\n-With Pointer Bounds Checker off, the built-in function just returns the first\n-argument.\n-\n-@smallexample\n-void init_objects (object *objs, size_t size)\n-@{\n-  size_t i;\n-  /* Initialize objects one-by-one passing pointers with bounds of \n-     an object, not the full array of objects.  */\n-  for (i = 0; i < size; i++)\n-    init_object (__builtin___bnd_narrow_ptr_bounds (objs + i, objs,\n-                                                    sizeof(object)));\n-@}\n-@end smallexample\n-\n-@end deftypefn\n-\n-@deftypefn {Built-in Function} {void *} __builtin___bnd_copy_ptr_bounds (const void *@var{q}, const void *@var{r})\n-\n-This built-in function returns a new pointer with the value of @var{q},\n-and associates it with the bounds already associated with pointer @var{r}.\n-With Pointer Bounds Checker off, the built-in function just returns the first\n-argument.\n-\n-@smallexample\n-/* Here is a way to get pointer to object's field but\n-   still with the full object's bounds.  */\n-int *field_ptr = __builtin___bnd_copy_ptr_bounds (&objptr->int_field, \n-                                                  objptr);\n-@end smallexample\n-\n-@end deftypefn\n-\n-@deftypefn {Built-in Function} {void *} __builtin___bnd_init_ptr_bounds (const void *@var{q})\n-\n-This built-in function returns a new pointer with the value of @var{q}, and\n-associates it with INIT (allowing full memory access) bounds. With Pointer\n-Bounds Checker off, the built-in function just returns the first argument.\n-\n-@end deftypefn\n-\n-@deftypefn {Built-in Function} {void *} __builtin___bnd_null_ptr_bounds (const void *@var{q})\n-\n-This built-in function returns a new pointer with the value of @var{q}, and\n-associates it with NULL (allowing no memory access) bounds. With Pointer\n-Bounds Checker off, the built-in function just returns the first argument.\n-\n-@end deftypefn\n-\n-@deftypefn {Built-in Function} void __builtin___bnd_store_ptr_bounds (const void **@var{ptr_addr}, const void *@var{ptr_val})\n-\n-This built-in function stores the bounds associated with pointer @var{ptr_val}\n-and location @var{ptr_addr} into Bounds Table.  This can be useful to propagate\n-bounds from legacy code without touching the associated pointer's memory when\n-pointers are copied as integers.  With Pointer Bounds Checker off, the built-in\n-function call is ignored.\n-\n-@end deftypefn\n-\n-@deftypefn {Built-in Function} void __builtin___bnd_chk_ptr_lbounds (const void *@var{q})\n-\n-This built-in function checks if the pointer @var{q} is within the lower\n-bound of its associated bounds.  With Pointer Bounds Checker off, the built-in\n-function call is ignored.\n-\n-@smallexample\n-extern void *__wrap_memset (void *dst, int c, size_t len)\n-@{\n-  if (len > 0)\n-    @{\n-      __builtin___bnd_chk_ptr_lbounds (dst);\n-      __builtin___bnd_chk_ptr_ubounds ((char *)dst + len - 1);\n-      __real_memset (dst, c, len);\n-    @}\n-  return dst;\n-@}\n-@end smallexample\n-\n-@end deftypefn\n-\n-@deftypefn {Built-in Function} void __builtin___bnd_chk_ptr_ubounds (const void *@var{q})\n-\n-This built-in function checks if the pointer @var{q} is within the upper\n-bound of its associated bounds.  With Pointer Bounds Checker off, the built-in\n-function call is ignored.\n-\n-@end deftypefn\n-\n-@deftypefn {Built-in Function} void __builtin___bnd_chk_ptr_bounds (const void *@var{q}, size_t @var{size})\n-\n-This built-in function checks if [@var{q}, @var{q} + @var{size} - 1] is within\n-the lower and upper bounds associated with @var{q}.  With Pointer Bounds Checker\n-off, the built-in function call is ignored.\n-\n-@smallexample\n-extern void *__wrap_memcpy (void *dst, const void *src, size_t n)\n-@{\n-  if (n > 0)\n-    @{\n-      __bnd_chk_ptr_bounds (dst, n);\n-      __bnd_chk_ptr_bounds (src, n);\n-      __real_memcpy (dst, src, n);\n-    @}\n-  return dst;\n-@}\n-@end smallexample\n-\n-@end deftypefn\n-\n-@deftypefn {Built-in Function} {const void *} __builtin___bnd_get_ptr_lbound (const void *@var{q})\n-\n-This built-in function returns the lower bound associated\n-with the pointer @var{q}, as a pointer value.  \n-This is useful for debugging using @code{printf}.\n-With Pointer Bounds Checker off, the built-in function returns 0.\n-\n-@smallexample\n-void *lb = __builtin___bnd_get_ptr_lbound (q);\n-void *ub = __builtin___bnd_get_ptr_ubound (q);\n-printf (\"q = %p  lb(q) = %p  ub(q) = %p\", q, lb, ub);\n-@end smallexample\n-\n-@end deftypefn\n-\n-@deftypefn {Built-in Function} {const void *} __builtin___bnd_get_ptr_ubound (const void *@var{q})\n-\n-This built-in function returns the upper bound (which is a pointer) associated\n-with the pointer @var{q}.  With Pointer Bounds Checker off,\n-the built-in function returns -1.\n-\n-@end deftypefn\n-\n @node Other Builtins\n @section Other Built-in Functions Provided by GCC\n @cindex built-in functions"}, {"sha": "79c47f4bb514a6183fe744c1d88ba4396ed06714", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 10, "deletions": 227, "changes": 237, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -269,7 +269,7 @@ Objective-C and Objective-C++ Dialects}.\n -Wno-builtin-macro-redefined  -Wc90-c99-compat  -Wc99-c11-compat @gol\n -Wc++-compat  -Wc++11-compat  -Wc++14-compat  @gol\n -Wcast-align  -Wcast-align=strict  -Wcast-function-type  -Wcast-qual  @gol\n--Wchar-subscripts  -Wchkp  -Wcatch-value  -Wcatch-value=@var{n} @gol\n+-Wchar-subscripts  -Wcatch-value  -Wcatch-value=@var{n} @gol\n -Wclobbered  -Wcomment  -Wconditionally-supported @gol\n -Wconversion  -Wcoverage-mismatch  -Wno-cpp  -Wdangling-else  -Wdate-time @gol\n -Wdelete-incomplete @gol\n@@ -459,15 +459,6 @@ Objective-C and Objective-C++ Dialects}.\n -fsanitize=@var{style}  -fsanitize-recover  -fsanitize-recover=@var{style} @gol\n -fasan-shadow-offset=@var{number}  -fsanitize-sections=@var{s1},@var{s2},... @gol\n -fsanitize-undefined-trap-on-error  -fbounds-check @gol\n--fcheck-pointer-bounds  -fchkp-check-incomplete-type @gol\n--fchkp-first-field-has-own-bounds  -fchkp-narrow-bounds @gol\n--fchkp-narrow-to-innermost-array  -fchkp-optimize @gol\n--fchkp-use-fast-string-functions  -fchkp-use-nochk-string-functions @gol\n--fchkp-use-static-bounds  -fchkp-use-static-const-bounds @gol\n--fchkp-treat-zero-dynamic-size-as-infinite  -fchkp-check-read @gol\n--fchkp-check-read  -fchkp-check-write  -fchkp-store-bounds @gol\n--fchkp-instrument-calls  -fchkp-instrument-marked-only @gol\n--fchkp-use-wrappers  -fchkp-flexible-struct-trailing-arrays@gol\n -fcf-protection=@r{[}full@r{|}branch@r{|}return@r{|}none@r{]} @gol\n -fstack-protector  -fstack-protector-all  -fstack-protector-strong @gol\n -fstack-protector-explicit  -fstack-check @gol\n@@ -508,7 +499,6 @@ Objective-C and Objective-C++ Dialects}.\n -nostartfiles  -nodefaultlibs  -nostdlib  -pie  -pthread  -rdynamic @gol\n -s  -static -static-pie -static-libgcc  -static-libstdc++ @gol\n -static-libasan  -static-libtsan  -static-liblsan  -static-libubsan @gol\n--static-libmpx  -static-libmpxwrappers @gol\n -shared  -shared-libgcc  -symbolic @gol\n -T @var{script}  -Wl,@var{option}  -Xlinker @var{option} @gol\n -u @var{symbol}  -z @var{keyword}}\n@@ -1258,7 +1248,7 @@ See RS/6000 and PowerPC Options.\n -mpclmul  -mfsgsbase  -mrdrnd  -mf16c  -mfma -mpconfig -mwbnoinvd @gol\n -mprefetchwt1  -mclflushopt  -mxsavec  -mxsaves @gol\n -msse4a  -m3dnow  -m3dnowa  -mpopcnt  -mabm  -mbmi  -mtbm  -mfma4  -mxop @gol\n--mlzcnt  -mbmi2  -mfxsr  -mxsave  -mxsaveopt  -mrtm  -mlwp  -mmpx  @gol\n+-mlzcnt  -mbmi2  -mfxsr  -mxsave  -mxsaveopt  -mrtm  -mlwp @gol\n -mmwaitx  -mclzero  -mpku  -mthreads -mgfni  -mvaes  -mwaitpkg @gol\n -mshstk -mforce-indirect-call -mavx512vbmi2 @gol\n -mvpclmulqdq -mavx512bitalg -mmovdiri -mmovdir64b -mavx512vpopcntdq\n@@ -4061,11 +4051,6 @@ of error, as programmers often forget that this type is signed on some\n machines.\n This warning is enabled by @option{-Wall}.\n \n-@item -Wchkp\n-@opindex Wchkp\n-Warn about an invalid memory access that is found by Pointer Bounds Checker\n-(@option{-fcheck-pointer-bounds}).\n-\n @item -Wno-coverage-mismatch\n @opindex Wno-coverage-mismatch\n Warn if feedback profiles do not match when using the\n@@ -11135,12 +11120,6 @@ If the size of a local variable in bytes is smaller or equal to this\n number, directly poison (or unpoison) shadow memory instead of using\n run-time callbacks.  The default value is 256.\n \n-@item chkp-max-ctor-size\n-Static constructors generated by Pointer Bounds Checker may become very\n-large and significantly increase compile time at optimization level\n-@option{-O1} and higher.  This parameter is a maximum number of statements\n-in a single generated constructor.  Default value is 5000.\n-\n @item max-fsm-thread-path-insns\n Maximum number of instructions to copy when duplicating blocks on a\n finite state automaton jump thread path.  The default is 100.\n@@ -11403,22 +11382,19 @@ more details.  The run-time behavior can be influenced using the\n the available options are shown at startup of the instrumented program.  See\n @url{https://github.com/google/sanitizers/wiki/AddressSanitizerFlags#run-time-flags}\n for a list of supported options.\n-The option cannot be combined with @option{-fsanitize=thread}\n-and/or @option{-fcheck-pointer-bounds}.\n+The option cannot be combined with @option{-fsanitize=thread}.\n \n @item -fsanitize=kernel-address\n @opindex fsanitize=kernel-address\n Enable AddressSanitizer for Linux kernel.\n See @uref{https://github.com/google/kasan/wiki} for more details.\n-The option cannot be combined with @option{-fcheck-pointer-bounds}.\n \n @item -fsanitize=pointer-compare\n @opindex fsanitize=pointer-compare\n Instrument comparison operation (<, <=, >, >=) with pointer operands.\n The option must be combined with either @option{-fsanitize=kernel-address} or\n @option{-fsanitize=address}\n-The option cannot be combined with @option{-fsanitize=thread}\n-and/or @option{-fcheck-pointer-bounds}.\n+The option cannot be combined with @option{-fsanitize=thread}.\n Note: By default the check is disabled at run time.  To enable it,\n add @code{detect_invalid_pointer_pairs=2} to the environment variable\n @env{ASAN_OPTIONS}. Using @code{detect_invalid_pointer_pairs=1} detects\n@@ -11429,8 +11405,7 @@ invalid operation only when both pointers are non-null.\n Instrument subtraction with pointer operands.\n The option must be combined with either @option{-fsanitize=kernel-address} or\n @option{-fsanitize=address}\n-The option cannot be combined with @option{-fsanitize=thread}\n-and/or @option{-fcheck-pointer-bounds}.\n+The option cannot be combined with @option{-fsanitize=thread}.\n Note: By default the check is disabled at run time.  To enable it,\n add @code{detect_invalid_pointer_pairs=2} to the environment variable\n @env{ASAN_OPTIONS}. Using @code{detect_invalid_pointer_pairs=1} detects\n@@ -11446,7 +11421,7 @@ environment variable; see\n @url{https://github.com/google/sanitizers/wiki/ThreadSanitizerFlags} for a list of\n supported options.\n The option cannot be combined with @option{-fsanitize=address},\n-@option{-fsanitize=leak} and/or @option{-fcheck-pointer-bounds}.\n+@option{-fsanitize=leak}.\n \n Note that sanitized atomic builtins cannot throw exceptions when\n operating on invalid memory addresses with non-call exceptions\n@@ -11539,15 +11514,13 @@ a++;\n This option enables instrumentation of array bounds.  Various out of bounds\n accesses are detected.  Flexible array members, flexible array member-like\n arrays, and initializers of variables with static storage are not instrumented.\n-The option cannot be combined with @option{-fcheck-pointer-bounds}.\n \n @item -fsanitize=bounds-strict\n @opindex fsanitize=bounds-strict\n This option enables strict instrumentation of array bounds.  Most out of bounds\n accesses are detected, including flexible array members and flexible array\n member-like arrays.  Initializers of variables with static storage are not\n-instrumented.  The option cannot be combined\n-with @option{-fcheck-pointer-bounds}.\n+instrumented.\n \n @item -fsanitize=alignment\n @opindex fsanitize=alignment\n@@ -11721,171 +11694,6 @@ operand constant, @code{__sanitizer_cov_trace_cmpf} or\n @code{__sanitizer_cov_trace_cmpd} for float or double comparisons and\n @code{__sanitizer_cov_trace_switch} for switch statements.\n \n-@item -fbounds-check\n-@opindex fbounds-check\n-For front ends that support it, generate additional code to check that\n-indices used to access arrays are within the declared range.  This is\n-currently only supported by the Fortran front end, where this option\n-defaults to false.\n-\n-@item -fcheck-pointer-bounds\n-@opindex fcheck-pointer-bounds\n-@opindex fno-check-pointer-bounds\n-@cindex Pointer Bounds Checker options\n-Enable Pointer Bounds Checker instrumentation.  Each memory reference\n-is instrumented with checks of the pointer used for memory access against\n-bounds associated with that pointer.  \n-\n-Currently there\n-is only an implementation for Intel MPX available, thus x86 GNU/Linux target\n-and @option{-mmpx} are required to enable this feature.  \n-MPX-based instrumentation requires\n-a runtime library to enable MPX in hardware and handle bounds\n-violation signals.  By default when @option{-fcheck-pointer-bounds}\n-and @option{-mmpx} options are used to link a program, the GCC driver\n-links against the @file{libmpx} and @file{libmpxwrappers} libraries.\n-Bounds checking on calls to dynamic libraries requires a linker\n-with @option{-z bndplt} support; if GCC was configured with a linker\n-without support for this option (including the Gold linker and older\n-versions of ld), a warning is given if you link with @option{-mmpx}\n-without also specifying @option{-static}, since the overall effectiveness\n-of the bounds checking protection is reduced.\n-See also @option{-static-libmpxwrappers}.\n-\n-MPX-based instrumentation\n-may be used for debugging and also may be included in production code\n-to increase program security.  Depending on usage, you may\n-have different requirements for the runtime library.  The current version\n-of the MPX runtime library is more oriented for use as a debugging\n-tool.  MPX runtime library usage implies @option{-lpthread}.  See\n-also @option{-static-libmpx}.  The runtime library  behavior can be\n-influenced using various @env{CHKP_RT_*} environment variables.  See\n-@uref{https://gcc.gnu.org/wiki/Intel%20MPX%20support%20in%20the%20GCC%20compiler}\n-for more details.\n-\n-Generated instrumentation may be controlled by various\n-@option{-fchkp-*} options and by the @code{bnd_variable_size}\n-structure field attribute (@pxref{Type Attributes}) and\n-@code{bnd_legacy}, and @code{bnd_instrument} function attributes\n-(@pxref{Function Attributes}).  GCC also provides a number of built-in\n-functions for controlling the Pointer Bounds Checker.  @xref{Pointer\n-Bounds Checker builtins}, for more information.\n-\n-@item -fchkp-check-incomplete-type\n-@opindex fchkp-check-incomplete-type\n-@opindex fno-chkp-check-incomplete-type\n-Generate pointer bounds checks for variables with incomplete type.\n-Enabled by default.\n-\n-@item -fchkp-narrow-bounds\n-@opindex fchkp-narrow-bounds\n-@opindex fno-chkp-narrow-bounds\n-Controls bounds used by Pointer Bounds Checker for pointers to object\n-fields.  If narrowing is enabled then field bounds are used.  Otherwise\n-object bounds are used.  See also @option{-fchkp-narrow-to-innermost-array}\n-and @option{-fchkp-first-field-has-own-bounds}.  Enabled by default.\n-\n-@item -fchkp-first-field-has-own-bounds\n-@opindex fchkp-first-field-has-own-bounds\n-@opindex fno-chkp-first-field-has-own-bounds\n-Forces Pointer Bounds Checker to use narrowed bounds for the address of the\n-first field in the structure.  By default a pointer to the first field has\n-the same bounds as a pointer to the whole structure.\n-\n-@item -fchkp-flexible-struct-trailing-arrays\n-@opindex fchkp-flexible-struct-trailing-arrays\n-@opindex fno-chkp-flexible-struct-trailing-arrays\n-Forces Pointer Bounds Checker to treat all trailing arrays in structures as\n-possibly flexible.  By default only array fields with zero length or that are\n-marked with attribute bnd_variable_size are treated as flexible.\n-\n-@item -fchkp-narrow-to-innermost-array\n-@opindex fchkp-narrow-to-innermost-array\n-@opindex fno-chkp-narrow-to-innermost-array\n-Forces Pointer Bounds Checker to use bounds of the innermost arrays in\n-case of nested static array access.  By default this option is disabled and\n-bounds of the outermost array are used.\n-\n-@item -fchkp-optimize\n-@opindex fchkp-optimize\n-@opindex fno-chkp-optimize\n-Enables Pointer Bounds Checker optimizations.  Enabled by default at\n-optimization levels @option{-O}, @option{-O2}, @option{-O3}.\n-\n-@item -fchkp-use-fast-string-functions\n-@opindex fchkp-use-fast-string-functions\n-@opindex fno-chkp-use-fast-string-functions\n-Enables use of @code{*_nobnd} versions of string functions (not copying bounds)\n-by Pointer Bounds Checker.  Disabled by default.\n-\n-@item -fchkp-use-nochk-string-functions\n-@opindex fchkp-use-nochk-string-functions\n-@opindex fno-chkp-use-nochk-string-functions\n-Enables use of @code{*_nochk} versions of string functions (not checking bounds)\n-by Pointer Bounds Checker.  Disabled by default.\n-\n-@item -fchkp-use-static-bounds\n-@opindex fchkp-use-static-bounds\n-@opindex fno-chkp-use-static-bounds\n-Allow Pointer Bounds Checker to generate static bounds holding\n-bounds of static variables.  Enabled by default.\n-\n-@item -fchkp-use-static-const-bounds\n-@opindex fchkp-use-static-const-bounds\n-@opindex fno-chkp-use-static-const-bounds\n-Use statically-initialized bounds for constant bounds instead of\n-generating them each time they are required.  By default enabled when\n-@option{-fchkp-use-static-bounds} is enabled.\n-\n-@item -fchkp-treat-zero-dynamic-size-as-infinite\n-@opindex fchkp-treat-zero-dynamic-size-as-infinite\n-@opindex fno-chkp-treat-zero-dynamic-size-as-infinite\n-With this option, objects with incomplete type whose\n-dynamically-obtained size is zero are treated as having infinite size\n-instead by Pointer Bounds\n-Checker.  This option may be helpful if a program is linked with a library\n-missing size information for some symbols.  Disabled by default.\n-\n-@item -fchkp-check-read\n-@opindex fchkp-check-read\n-@opindex fno-chkp-check-read\n-Instructs Pointer Bounds Checker to generate checks for all read\n-accesses to memory.  Enabled by default.\n-\n-@item -fchkp-check-write\n-@opindex fchkp-check-write\n-@opindex fno-chkp-check-write\n-Instructs Pointer Bounds Checker to generate checks for all write\n-accesses to memory.  Enabled by default.\n-\n-@item -fchkp-store-bounds\n-@opindex fchkp-store-bounds\n-@opindex fno-chkp-store-bounds\n-Instructs Pointer Bounds Checker to generate bounds stores for\n-pointer writes.  Enabled by default.\n-\n-@item -fchkp-instrument-calls\n-@opindex fchkp-instrument-calls\n-@opindex fno-chkp-instrument-calls\n-Instructs Pointer Bounds Checker to pass pointer bounds to calls.\n-Enabled by default.\n-\n-@item -fchkp-instrument-marked-only\n-@opindex fchkp-instrument-marked-only\n-@opindex fno-chkp-instrument-marked-only\n-Instructs Pointer Bounds Checker to instrument only functions\n-marked with the @code{bnd_instrument} attribute\n-(@pxref{Function Attributes}).  Disabled by default.\n-\n-@item -fchkp-use-wrappers\n-@opindex fchkp-use-wrappers\n-@opindex fno-chkp-use-wrappers\n-Allows Pointer Bounds Checker to replace calls to built-in functions\n-with calls to wrapper functions.  When @option{-fchkp-use-wrappers}\n-is used to link a program, the GCC driver automatically links\n-against @file{libmpxwrappers}.  See also @option{-static-libmpxwrappers}.\n-Enabled by default.\n-\n @item -fcf-protection=@r{[}full@r{|}branch@r{|}return@r{|}none@r{]}\n @opindex fcf-protection\n Enable code instrumentation of control-flow transfers to increase\n@@ -12590,27 +12398,6 @@ option is not used, then this links against the shared version of\n driver to link @file{libubsan} statically, without necessarily linking\n other libraries statically.\n \n-@item -static-libmpx\n-@opindex static-libmpx\n-When the @option{-fcheck-pointer bounds} and @option{-mmpx} options are\n-used to link a program, the GCC driver automatically links against\n-@file{libmpx}.  If @file{libmpx} is available as a shared library,\n-and the @option{-static} option is not used, then this links against\n-the shared version of @file{libmpx}.  The @option{-static-libmpx}\n-option directs the GCC driver to link @file{libmpx} statically,\n-without necessarily linking other libraries statically.\n-\n-@item -static-libmpxwrappers\n-@opindex static-libmpxwrappers\n-When the @option{-fcheck-pointer bounds} and @option{-mmpx} options are used\n-to link a program without also using @option{-fno-chkp-use-wrappers}, the\n-GCC driver automatically links against @file{libmpxwrappers}.  If\n-@file{libmpxwrappers} is available as a shared library, and the\n-@option{-static} option is not used, then this links against the shared\n-version of @file{libmpxwrappers}.  The @option{-static-libmpxwrappers}\n-option directs the GCC driver to link @file{libmpxwrappers} statically,\n-without necessarily linking other libraries statically.\n-\n @item -static-libstdc++\n @opindex static-libstdc++\n When the @command{g++} program is used to link a C++ program, it\n@@ -27387,9 +27174,6 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n @itemx -mtbm\n @opindex mtbm\n @need 200\n-@itemx -mmpx\n-@opindex mmpx\n-@need 200\n @itemx -mmwaitx\n @opindex mmwaitx\n @need 200\n@@ -27432,7 +27216,7 @@ These switches enable the use of instructions in the MMX, SSE,\n SSE2, SSE3, SSSE3, SSE4.1, AVX, AVX2, AVX512F, AVX512PF, AVX512ER, AVX512CD,\n SHA, AES, PCLMUL, FSGSBASE, RDRND, F16C, FMA, SSE4A, FMA4, XOP, LWP, ABM,\n AVX512VL, AVX512BW, AVX512DQ, AVX512IFMA, AVX512VBMI, BMI, BMI2, VAES, WAITPKG,\n-FXSR, XSAVE, XSAVEOPT, LZCNT, RTM, MPX, MWAITX, PKU, IBT, SHSTK, AVX512VBMI2,\n+FXSR, XSAVE, XSAVEOPT, LZCNT, RTM, MWAITX, PKU, IBT, SHSTK, AVX512VBMI2,\n GFNI, VPCLMULQDQ, AVX512BITALG, MOVDIRI, MOVDIR64B,\n AVX512VPOPCNTDQ, CLDEMOTE, 3DNow!@: or enhanced 3DNow!@: extended instruction\n sets. Each has a corresponding @option{-mno-} option to disable use of these\n@@ -28018,9 +27802,8 @@ Note that @option{-mcmodel=large} is incompatible with\n not be reachable in the large code model.\n \n Note that @option{-mindirect-branch=thunk-extern} is incompatible with\n-@option{-fcf-protection=branch} and @option{-fcheck-pointer-bounds}\n-since the external thunk can not be modified to disable control-flow\n-check.\n+@option{-fcf-protection=branch} since the external thunk can not be modified\n+to disable control-flow check.\n \n @item -mfunction-return=@var{choice}\n @opindex -mfunction-return"}, {"sha": "a3ecb711ecaa69e2c4a2ba194581e726fa857149", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -4189,12 +4189,6 @@ VSIB address operand.\n @item Ts\n Address operand without segment register.\n \n-@item Ti\n-MPX address operand without index.\n-\n-@item Tb\n-MPX address operand without base.\n-\n @end table\n \n @item Xstormy16---@file{config/stormy16/stormy16.h}"}, {"sha": "1c5a80920f17694f1119696ec40faef1452fe1c1", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 0, "deletions": 93, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -5252,12 +5252,6 @@ This hook is used by expand pass to emit insn to store @var{bounds}\n returned by function call into @var{slot}.\n @end deftypefn\n \n-@deftypefn {Target Hook} rtx TARGET_CHKP_FUNCTION_VALUE_BOUNDS (const_tree @var{ret_type}, const_tree @var{fn_decl_or_type}, bool @var{outgoing})\n-Define this to return an RTX representing the place where a function\n-returns bounds for returned pointers.  Arguments meaning is similar to\n-@code{TARGET_FUNCTION_VALUE}.\n-@end deftypefn\n-\n @deftypefn {Target Hook} void TARGET_SETUP_INCOMING_VARARG_BOUNDS (cumulative_args_t @var{args_so_far}, machine_mode @var{mode}, tree @var{type}, int *@var{pretend_args_size}, int @var{second_time})\n Use it to store bounds for anonymous register arguments stored\n into the stack.  Arguments meaning is similar to\n@@ -11417,93 +11411,6 @@ ignored.  This function should return the result of the call to the\n built-in function.\n @end deftypefn\n \n-@deftypefn {Target Hook} tree TARGET_BUILTIN_CHKP_FUNCTION (unsigned @var{fcode})\n-This hook allows target to redefine built-in functions used by\n-Pointer Bounds Checker for code instrumentation.  Hook should return\n-fndecl of function implementing generic builtin whose code is\n-passed in @var{fcode}.  Currently following built-in functions are\n-obtained using this hook:\n-@deftypefn {Built-in Function} __bounds_type __chkp_bndmk (const void *@var{lb}, size_t @var{size})\n-Function code - BUILT_IN_CHKP_BNDMK.  This built-in function is used\n-by Pointer Bounds Checker to create bound values.  @var{lb} holds low\n-bound of the resulting bounds.  @var{size} holds size of created bounds.\n-@end deftypefn\n-\n-@deftypefn {Built-in Function} void __chkp_bndstx (const void *@var{ptr}, __bounds_type @var{b}, const void **@var{loc})\n-Function code - @code{BUILT_IN_CHKP_BNDSTX}.  This built-in function is used\n-by Pointer Bounds Checker to store bounds @var{b} for pointer @var{ptr}\n-when @var{ptr} is stored by address @var{loc}.\n-@end deftypefn\n-\n-@deftypefn {Built-in Function} __bounds_type __chkp_bndldx (const void **@var{loc}, const void *@var{ptr})\n-Function code - @code{BUILT_IN_CHKP_BNDLDX}.  This built-in function is used\n-by Pointer Bounds Checker to get bounds of pointer @var{ptr} loaded by\n-address @var{loc}.\n-@end deftypefn\n-\n-@deftypefn {Built-in Function} void __chkp_bndcl (const void *@var{ptr}, __bounds_type @var{b})\n-Function code - @code{BUILT_IN_CHKP_BNDCL}.  This built-in function is used\n-by Pointer Bounds Checker to perform check for pointer @var{ptr} against\n-lower bound of bounds @var{b}.\n-@end deftypefn\n-\n-@deftypefn {Built-in Function} void __chkp_bndcu (const void *@var{ptr}, __bounds_type @var{b})\n-Function code - @code{BUILT_IN_CHKP_BNDCU}.  This built-in function is used\n-by Pointer Bounds Checker to perform check for pointer @var{ptr} against\n-upper bound of bounds @var{b}.\n-@end deftypefn\n-\n-@deftypefn {Built-in Function} __bounds_type __chkp_bndret (void *@var{ptr})\n-Function code - @code{BUILT_IN_CHKP_BNDRET}.  This built-in function is used\n-by Pointer Bounds Checker to obtain bounds returned by a call statement.\n-@var{ptr} passed to built-in is @code{SSA_NAME} returned by the call.\n-@end deftypefn\n-\n-@deftypefn {Built-in Function} __bounds_type __chkp_intersect (__bounds_type @var{b1}, __bounds_type @var{b2})\n-Function code - @code{BUILT_IN_CHKP_INTERSECT}.  This built-in function\n-returns intersection of bounds @var{b1} and @var{b2}.\n-@end deftypefn\n-\n-@deftypefn {Built-in Function} __bounds_type __chkp_narrow (const void *@var{ptr}, __bounds_type @var{b}, size_t @var{s})\n-Function code - @code{BUILT_IN_CHKP_NARROW}.  This built-in function\n-returns intersection of bounds @var{b} and\n-[@var{ptr}, @var{ptr} + @var{s} - @code{1}].\n-@end deftypefn\n-\n-@deftypefn {Built-in Function} size_t __chkp_sizeof (const void *@var{ptr})\n-Function code - @code{BUILT_IN_CHKP_SIZEOF}.  This built-in function\n-returns size of object referenced by @var{ptr}. @var{ptr} is always\n-@code{ADDR_EXPR} of @code{VAR_DECL}.  This built-in is used by\n-Pointer Bounds Checker when bounds of object cannot be computed statically\n-(e.g. object has incomplete type).\n-@end deftypefn\n-\n-@deftypefn {Built-in Function} const void *__chkp_extract_lower (__bounds_type @var{b})\n-Function code - @code{BUILT_IN_CHKP_EXTRACT_LOWER}.  This built-in function\n-returns lower bound of bounds @var{b}.\n-@end deftypefn\n-\n-@deftypefn {Built-in Function} const void *__chkp_extract_upper (__bounds_type @var{b})\n-Function code - @code{BUILT_IN_CHKP_EXTRACT_UPPER}.  This built-in function\n-returns upper bound of bounds @var{b}.\n-@end deftypefn\n-@end deftypefn\n-@deftypefn {Target Hook} tree TARGET_CHKP_BOUND_TYPE (void)\n-Return type to be used for bounds\n-@end deftypefn\n-@deftypefn {Target Hook} machine_mode TARGET_CHKP_BOUND_MODE (void)\n-Return mode to be used for bounds.\n-@end deftypefn\n-@deftypefn {Target Hook} tree TARGET_CHKP_MAKE_BOUNDS_CONSTANT (HOST_WIDE_INT @var{lb}, HOST_WIDE_INT @var{ub})\n-Return constant used to statically initialize constant bounds\n-with specified lower bound @var{lb} and upper bounds @var{ub}.\n-@end deftypefn\n-@deftypefn {Target Hook} int TARGET_CHKP_INITIALIZE_BOUNDS (tree @var{var}, tree @var{lb}, tree @var{ub}, tree *@var{stmts})\n-Generate a list of statements @var{stmts} to initialize pointer\n-bounds variable @var{var} with bounds @var{lb} and @var{ub}.  Return\n-the number of generated statements.\n-@end deftypefn\n-\n @deftypefn {Target Hook} tree TARGET_RESOLVE_OVERLOADED_BUILTIN (unsigned int @var{loc}, tree @var{fndecl}, void *@var{arglist})\n Select a replacement for a machine specific built-in function that\n was set up by @samp{TARGET_INIT_BUILTINS}.  This is done"}, {"sha": "bf2c64e15dba1b95179cfe682523f29bb8fa1151", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -3761,8 +3761,6 @@ These machine description macros help implement varargs:\n \n @hook TARGET_STORE_RETURNED_BOUNDS\n \n-@hook TARGET_CHKP_FUNCTION_VALUE_BOUNDS\n-\n @hook TARGET_SETUP_INCOMING_VARARG_BOUNDS\n \n @node Trampolines\n@@ -7866,12 +7864,6 @@ to by @var{ce_info}.\n \n @hook TARGET_EXPAND_BUILTIN\n \n-@hook TARGET_BUILTIN_CHKP_FUNCTION\n-@hook TARGET_CHKP_BOUND_TYPE\n-@hook TARGET_CHKP_BOUND_MODE\n-@hook TARGET_CHKP_MAKE_BOUNDS_CONSTANT\n-@hook TARGET_CHKP_INITIALIZE_BOUNDS\n-\n @hook TARGET_RESOLVE_OVERLOADED_BUILTIN\n \n @hook TARGET_FOLD_BUILTIN"}, {"sha": "a6b20b4912dc76cafda826ee6ea535385968a02c", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 12, "deletions": 23, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -12918,7 +12918,6 @@ is_base_type (tree type)\n     case FIXED_POINT_TYPE:\n     case COMPLEX_TYPE:\n     case BOOLEAN_TYPE:\n-    case POINTER_BOUNDS_TYPE:\n       return 1;\n \n     case VOID_TYPE:\n@@ -22295,21 +22294,18 @@ gen_formal_types_die (tree function_or_method_type, dw_die_ref context_die)\n \tbreak;\n \n       /* Output a (nameless) DIE to represent the formal parameter itself.  */\n-      if (!POINTER_BOUNDS_TYPE_P (formal_type))\n+      parm_die = gen_formal_parameter_die (formal_type, NULL,\n+\t\t\t\t\t   true /* Emit name attribute.  */,\n+\t\t\t\t\t   context_die);\n+      if (TREE_CODE (function_or_method_type) == METHOD_TYPE\n+\t  && link == first_parm_type)\n \t{\n-\t  parm_die = gen_formal_parameter_die (formal_type, NULL,\n-\t\t\t\t\t       true /* Emit name attribute.  */,\n-\t\t\t\t\t       context_die);\n-\t  if (TREE_CODE (function_or_method_type) == METHOD_TYPE\n-\t      && link == first_parm_type)\n-\t    {\n-\t      add_AT_flag (parm_die, DW_AT_artificial, 1);\n-\t      if (dwarf_version >= 3 || !dwarf_strict)\n-\t\tadd_AT_die_ref (context_die, DW_AT_object_pointer, parm_die);\n-\t    }\n-\t  else if (arg && DECL_ARTIFICIAL (arg))\n-\t    add_AT_flag (parm_die, DW_AT_artificial, 1);\n+\t  add_AT_flag (parm_die, DW_AT_artificial, 1);\n+\t  if (dwarf_version >= 3 || !dwarf_strict)\n+\t    add_AT_die_ref (context_die, DW_AT_object_pointer, parm_die);\n \t}\n+      else if (arg && DECL_ARTIFICIAL (arg))\n+\tadd_AT_flag (parm_die, DW_AT_artificial, 1);\n \n       link = TREE_CHAIN (link);\n       if (arg)\n@@ -23176,7 +23172,7 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n \t    gen_formal_parameter_pack_die (generic_decl_parm,\n \t\t\t\t\t   parm, subr_die,\n \t\t\t\t\t   &parm);\n-\t  else if (parm && !POINTER_BOUNDS_P (parm))\n+\t  else if (parm)\n \t    {\n \t      dw_die_ref parm_die = gen_decl_die (parm, NULL, NULL, subr_die);\n \n@@ -25561,7 +25557,6 @@ gen_type_die_with_usage (tree type, dw_die_ref context_die,\n     case FIXED_POINT_TYPE:\n     case COMPLEX_TYPE:\n     case BOOLEAN_TYPE:\n-    case POINTER_BOUNDS_TYPE:\n       /* No DIEs needed for fundamental types.  */\n       break;\n \n@@ -26141,12 +26136,6 @@ gen_decl_die (tree decl, tree origin, struct vlr_context *ctx,\n   if (DECL_P (decl_or_origin) && DECL_IGNORED_P (decl_or_origin))\n     return NULL;\n \n-  /* Ignore pointer bounds decls.  */\n-  if (DECL_P (decl_or_origin)\n-      && TREE_TYPE (decl_or_origin)\n-      && POINTER_BOUNDS_P (decl_or_origin))\n-    return NULL;\n-\n   switch (TREE_CODE (decl_or_origin))\n     {\n     case ERROR_MARK:\n@@ -26480,7 +26469,7 @@ dwarf2out_late_global_decl (tree decl)\n {\n   /* Fill-in any location information we were unable to determine\n      on the first pass.  */\n-  if (VAR_P (decl) && !POINTER_BOUNDS_P (decl))\n+  if (VAR_P (decl))\n     {\n       dw_die_ref die = lookup_decl_die (decl);\n "}, {"sha": "89430246d12dbfa8bc1a1f6697d841db5b74f03f", "filename": "gcc/expr.c", "status": "modified", "additions": 11, "deletions": 67, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -58,8 +58,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-outof-ssa.h\"\n #include \"tree-ssa-address.h\"\n #include \"builtins.h\"\n-#include \"tree-chkp.h\"\n-#include \"rtl-chkp.h\"\n #include \"ccmp.h\"\n #include \"rtx-vector-builder.h\"\n \n@@ -5283,14 +5281,10 @@ expand_assignment (tree to, tree from, bool nontemporal)\n \t    || TREE_CODE (to) == SSA_NAME))\n     {\n       rtx value;\n-      rtx bounds;\n \n       push_temp_slots ();\n       value = expand_normal (from);\n \n-      /* Split value and bounds to store them separately.  */\n-      chkp_split_slot (value, &value, &bounds);\n-\n       if (to_rtx == 0)\n \tto_rtx = expand_expr (to, NULL_RTX, VOIDmode, EXPAND_WRITE);\n \n@@ -5325,14 +5319,6 @@ expand_assignment (tree to, tree from, bool nontemporal)\n \t  emit_move_insn (to_rtx, value);\n \t}\n \n-      /* Store bounds if required.  */\n-      if (bounds\n-\t  && (BOUNDED_P (to) || chkp_type_has_pointer (TREE_TYPE (to))))\n-\t{\n-\t  gcc_assert (MEM_P (to_rtx));\n-\t  chkp_emit_bounds_store (bounds, value, to_rtx);\n-\t}\n-\n       preserve_temp_slots (to_rtx);\n       pop_temp_slots ();\n       return;\n@@ -5403,7 +5389,7 @@ expand_assignment (tree to, tree from, bool nontemporal)\n   /* Compute FROM and store the value in the rtx we got.  */\n \n   push_temp_slots ();\n-  result = store_expr_with_bounds (from, to_rtx, 0, nontemporal, false, to);\n+  result = store_expr (from, to_rtx, 0, nontemporal, false);\n   preserve_temp_slots (result);\n   pop_temp_slots ();\n   return;\n@@ -5442,14 +5428,11 @@ emit_storent_insn (rtx to, rtx from)\n \n    If NONTEMPORAL is true, try using a nontemporal store instruction.\n \n-   If REVERSE is true, the store is to be done in reverse order.\n-\n-   If BTARGET is not NULL then computed bounds of EXP are\n-   associated with BTARGET.  */\n+   If REVERSE is true, the store is to be done in reverse order.  */\n \n rtx\n-store_expr_with_bounds (tree exp, rtx target, int call_param_p,\n-\t\t\tbool nontemporal, bool reverse, tree btarget)\n+store_expr (tree exp, rtx target, int call_param_p,\n+\t\t\tbool nontemporal, bool reverse)\n {\n   rtx temp;\n   rtx alt_rtl = NULL_RTX;\n@@ -5470,9 +5453,8 @@ store_expr_with_bounds (tree exp, rtx target, int call_param_p,\n \t part.  */\n       expand_expr (TREE_OPERAND (exp, 0), const0_rtx, VOIDmode,\n \t\t   call_param_p ? EXPAND_STACK_PARM : EXPAND_NORMAL);\n-      return store_expr_with_bounds (TREE_OPERAND (exp, 1), target,\n-\t\t\t\t     call_param_p, nontemporal, reverse,\n-\t\t\t\t     btarget);\n+      return store_expr (TREE_OPERAND (exp, 1), target,\n+\t\t\t\t     call_param_p, nontemporal, reverse);\n     }\n   else if (TREE_CODE (exp) == COND_EXPR && GET_MODE (target) == BLKmode)\n     {\n@@ -5487,13 +5469,13 @@ store_expr_with_bounds (tree exp, rtx target, int call_param_p,\n       NO_DEFER_POP;\n       jumpifnot (TREE_OPERAND (exp, 0), lab1,\n \t\t profile_probability::uninitialized ());\n-      store_expr_with_bounds (TREE_OPERAND (exp, 1), target, call_param_p,\n-\t\t\t      nontemporal, reverse, btarget);\n+      store_expr (TREE_OPERAND (exp, 1), target, call_param_p,\n+\t\t  nontemporal, reverse);\n       emit_jump_insn (targetm.gen_jump (lab2));\n       emit_barrier ();\n       emit_label (lab1);\n-      store_expr_with_bounds (TREE_OPERAND (exp, 2), target, call_param_p,\n-\t\t\t      nontemporal, reverse, btarget);\n+      store_expr (TREE_OPERAND (exp, 2), target, call_param_p,\n+\t\t  nontemporal, reverse);\n       emit_label (lab2);\n       OK_DEFER_POP;\n \n@@ -5546,18 +5528,6 @@ store_expr_with_bounds (tree exp, rtx target, int call_param_p,\n       temp = expand_expr (exp, inner_target, VOIDmode,\n \t\t\t  call_param_p ? EXPAND_STACK_PARM : EXPAND_NORMAL);\n \n-      /* Handle bounds returned by call.  */\n-      if (TREE_CODE (exp) == CALL_EXPR)\n-\t{\n-\t  rtx bounds;\n-\t  chkp_split_slot (temp, &temp, &bounds);\n-\t  if (bounds && btarget)\n-\t    {\n-\t      gcc_assert (TREE_CODE (btarget) == SSA_NAME);\n-\t      rtx tmp = targetm.calls.load_returned_bounds (bounds);\n-\t      chkp_set_rtl_bounds (btarget, tmp);\n-\t    }\n-\t}\n \n       /* If TEMP is a VOIDmode constant, use convert_modes to make\n \t sure that we properly convert it.  */\n@@ -5639,19 +5609,6 @@ store_expr_with_bounds (tree exp, rtx target, int call_param_p,\n \t\t\t       (call_param_p\n \t\t\t\t? EXPAND_STACK_PARM : EXPAND_NORMAL),\n \t\t\t       &alt_rtl, false);\n-\n-      /* Handle bounds returned by call.  */\n-      if (TREE_CODE (exp) == CALL_EXPR)\n-\t{\n-\t  rtx bounds;\n-\t  chkp_split_slot (temp, &temp, &bounds);\n-\t  if (bounds && btarget)\n-\t    {\n-\t      gcc_assert (TREE_CODE (btarget) == SSA_NAME);\n-\t      rtx tmp = targetm.calls.load_returned_bounds (bounds);\n-\t      chkp_set_rtl_bounds (btarget, tmp);\n-\t    }\n-\t}\n     }\n \n   /* If TEMP is a VOIDmode constant and the mode of the type of EXP is not\n@@ -5831,15 +5788,6 @@ store_expr_with_bounds (tree exp, rtx target, int call_param_p,\n \n   return NULL_RTX;\n }\n-\n-/* Same as store_expr_with_bounds but ignoring bounds of EXP.  */\n-rtx\n-store_expr (tree exp, rtx target, int call_param_p, bool nontemporal,\n-\t    bool reverse)\n-{\n-  return store_expr_with_bounds (exp, target, call_param_p, nontemporal,\n-\t\t\t\t reverse, NULL);\n-}\n \f\n /* Return true if field F of structure TYPE is a flexible array.  */\n \n@@ -10954,11 +10902,7 @@ expand_expr_real_1 (tree exp, rtx target, machine_mode tmode,\n \tif (fndecl && DECL_BUILT_IN (fndecl))\n \t  {\n \t    gcc_assert (DECL_BUILT_IN_CLASS (fndecl) != BUILT_IN_FRONTEND);\n-\t    if (CALL_WITH_BOUNDS_P (exp))\n-\t      return expand_builtin_with_bounds (exp, target, subtarget,\n-\t\t\t\t\t\t tmode, ignore);\n-\t    else\n-\t      return expand_builtin (exp, target, subtarget, tmode, ignore);\n+\t    return expand_builtin (exp, target, subtarget, tmode, ignore);\n \t  }\n       }\n       return expand_call (exp, target, ignore);"}, {"sha": "cf047d49e2ef63ff7852191e3e6182f64c514527", "filename": "gcc/expr.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -254,7 +254,6 @@ extern void expand_assignment (tree, tree, bool);\n    and storing the value into TARGET.\n    If SUGGEST_REG is nonzero, copy the value through a register\n    and return that register, if that is possible.  */\n-extern rtx store_expr_with_bounds (tree, rtx, int, bool, bool, tree);\n extern rtx store_expr (tree, rtx, int, bool, bool);\n \n /* Given an rtx that may include add and multiply operations,"}, {"sha": "47232a27611bbf0b8a9d2ca5580bfd7484b0ce26", "filename": "gcc/function.c", "status": "modified", "additions": 9, "deletions": 232, "changes": 241, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -73,8 +73,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"shrink-wrap.h\"\n #include \"toplev.h\"\n #include \"rtl-iter.h\"\n-#include \"tree-chkp.h\"\n-#include \"rtl-chkp.h\"\n #include \"tree-dfa.h\"\n #include \"tree-ssa.h\"\n #include \"stringpool.h\"\n@@ -2201,14 +2199,6 @@ use_register_for_decl (const_tree decl)\n       return false;\n     }\n \n-  /* Decl is implicitly addressible by bound stores and loads\n-     if it is an aggregate holding bounds.  */\n-  if (chkp_function_instrumented_p (current_function_decl)\n-      && TREE_TYPE (decl)\n-      && !BOUNDED_P (decl)\n-      && chkp_type_has_pointer (TREE_TYPE (decl)))\n-    return false;\n-\n   /* Only register-like things go in registers.  */\n   if (DECL_MODE (decl) == BLKmode)\n     return false;\n@@ -2280,15 +2270,6 @@ struct assign_parm_data_one\n   BOOL_BITFIELD loaded_in_reg : 1;\n };\n \n-struct bounds_parm_data\n-{\n-  assign_parm_data_one parm_data;\n-  tree bounds_parm;\n-  tree ptr_parm;\n-  rtx ptr_entry;\n-  int bound_no;\n-};\n-\n /* A subroutine of assign_parms.  Initialize ALL.  */\n \n static void\n@@ -2403,23 +2384,6 @@ assign_parms_augmented_arg_list (struct assign_parm_data_all *all)\n       fnargs.safe_insert (0, decl);\n \n       all->function_result_decl = decl;\n-\n-      /* If function is instrumented then bounds of the\n-\t passed structure address is the second argument.  */\n-      if (chkp_function_instrumented_p (fndecl))\n-\t{\n-\t  decl = build_decl (DECL_SOURCE_LOCATION (fndecl),\n-\t\t\t     PARM_DECL, get_identifier (\".result_bnd\"),\n-\t\t\t     pointer_bounds_type_node);\n-\t  DECL_ARG_TYPE (decl) = pointer_bounds_type_node;\n-\t  DECL_ARTIFICIAL (decl) = 1;\n-\t  DECL_NAMELESS (decl) = 1;\n-\t  TREE_CONSTANT (decl) = 1;\n-\n-\t  DECL_CHAIN (decl) = DECL_CHAIN (all->orig_fnargs);\n-\t  DECL_CHAIN (all->orig_fnargs) = decl;\n-\t  fnargs.safe_insert (1, decl);\n-\t}\n     }\n \n   /* If the target wants to split complex arguments into scalars, do so.  */\n@@ -2563,7 +2527,7 @@ assign_parm_find_entry_rtl (struct assign_parm_data_all *all,\n      it came in a register so that REG_PARM_STACK_SPACE isn't skipped.\n      In this case, we call FUNCTION_ARG with NAMED set to 1 instead of 0\n      as it was the previous time.  */\n-  in_regs = (entry_parm != 0) || POINTER_BOUNDS_TYPE_P (data->passed_type);\n+  in_regs = (entry_parm != 0);\n #ifdef STACK_PARMS_IN_REG_PARM_AREA\n   in_regs = true;\n #endif\n@@ -2652,12 +2616,8 @@ static bool\n assign_parm_is_stack_parm (struct assign_parm_data_all *all,\n \t\t\t   struct assign_parm_data_one *data)\n {\n-  /* Bounds are never passed on the stack to keep compatibility\n-     with not instrumented code.  */\n-  if (POINTER_BOUNDS_TYPE_P (data->passed_type))\n-    return false;\n   /* Trivially true if we've no incoming register.  */\n-  else if (data->entry_parm == NULL)\n+  if (data->entry_parm == NULL)\n     ;\n   /* Also true if we're partially in registers and partially not,\n      since we've arranged to drop the entire argument on the stack.  */\n@@ -3572,121 +3532,6 @@ assign_parms_unsplit_complex (struct assign_parm_data_all *all,\n     }\n }\n \n-/* Load bounds of PARM from bounds table.  */\n-static void\n-assign_parm_load_bounds (struct assign_parm_data_one *data,\n-\t\t\t tree parm,\n-\t\t\t rtx entry,\n-\t\t\t unsigned bound_no)\n-{\n-  bitmap_iterator bi;\n-  unsigned i, offs = 0;\n-  int bnd_no = -1;\n-  rtx slot = NULL, ptr = NULL;\n-\n-  if (parm)\n-    {\n-      bitmap slots;\n-      bitmap_obstack_initialize (NULL);\n-      slots = BITMAP_ALLOC (NULL);\n-      chkp_find_bound_slots (TREE_TYPE (parm), slots);\n-      EXECUTE_IF_SET_IN_BITMAP (slots, 0, i, bi)\n-\t{\n-\t  if (bound_no)\n-\t    bound_no--;\n-\t  else\n-\t    {\n-\t      bnd_no = i;\n-\t      break;\n-\t    }\n-\t}\n-      BITMAP_FREE (slots);\n-      bitmap_obstack_release (NULL);\n-    }\n-\n-  /* We may have bounds not associated with any pointer.  */\n-  if (bnd_no != -1)\n-    offs = bnd_no * POINTER_SIZE / BITS_PER_UNIT;\n-\n-  /* Find associated pointer.  */\n-  if (bnd_no == -1)\n-    {\n-      /* If bounds are not associated with any bounds,\n-\t then it is passed in a register or special slot.  */\n-      gcc_assert (data->entry_parm);\n-      ptr = const0_rtx;\n-    }\n-  else if (MEM_P (entry))\n-    slot = adjust_address (entry, Pmode, offs);\n-  else if (REG_P (entry))\n-    ptr = gen_rtx_REG (Pmode, REGNO (entry) + bnd_no);\n-  else if (GET_CODE (entry) == PARALLEL)\n-    ptr = chkp_get_value_with_offs (entry, GEN_INT (offs));\n-  else\n-    gcc_unreachable ();\n-  data->entry_parm = targetm.calls.load_bounds_for_arg (slot, ptr,\n-\t\t\t\t\t\t\tdata->entry_parm);\n-}\n-\n-/* Assign RTL expressions to the function's bounds parameters BNDARGS.  */\n-\n-static void\n-assign_bounds (vec<bounds_parm_data> &bndargs,\n-\t       struct assign_parm_data_all &all,\n-\t       bool assign_regs, bool assign_special,\n-\t       bool assign_bt)\n-{\n-  unsigned i, pass;\n-  bounds_parm_data *pbdata;\n-\n-  if (!bndargs.exists ())\n-    return;\n-\n-  /* We make few passes to store input bounds.  Firstly handle bounds\n-     passed in registers.  After that we load bounds passed in special\n-     slots.  Finally we load bounds from Bounds Table.  */\n-  for (pass = 0; pass < 3; pass++)\n-    FOR_EACH_VEC_ELT (bndargs, i, pbdata)\n-      {\n-\t/* Pass 0 => regs only.  */\n-\tif (pass == 0\n-\t    && (!assign_regs\n-\t\t||(!pbdata->parm_data.entry_parm\n-\t\t   || GET_CODE (pbdata->parm_data.entry_parm) != REG)))\n-\t  continue;\n-\t/* Pass 1 => slots only.  */\n-\telse if (pass == 1\n-\t\t && (!assign_special\n-\t\t     || (!pbdata->parm_data.entry_parm\n-\t\t\t || GET_CODE (pbdata->parm_data.entry_parm) == REG)))\n-\t  continue;\n-\t/* Pass 2 => BT only.  */\n-\telse if (pass == 2\n-\t\t && (!assign_bt\n-\t\t     || pbdata->parm_data.entry_parm))\n-\t  continue;\n-\n-\tif (!pbdata->parm_data.entry_parm\n-\t    || GET_CODE (pbdata->parm_data.entry_parm) != REG)\n-\t  assign_parm_load_bounds (&pbdata->parm_data, pbdata->ptr_parm,\n-\t\t\t\t   pbdata->ptr_entry, pbdata->bound_no);\n-\n-\tset_decl_incoming_rtl (pbdata->bounds_parm,\n-\t\t\t       pbdata->parm_data.entry_parm, false);\n-\n-\tif (assign_parm_setup_block_p (&pbdata->parm_data))\n-\t  assign_parm_setup_block (&all, pbdata->bounds_parm,\n-\t\t\t\t   &pbdata->parm_data);\n-\telse if (pbdata->parm_data.passed_pointer\n-\t\t || use_register_for_decl (pbdata->bounds_parm))\n-\t  assign_parm_setup_reg (&all, pbdata->bounds_parm,\n-\t\t\t\t &pbdata->parm_data);\n-\telse\n-\t  assign_parm_setup_stack (&all, pbdata->bounds_parm,\n-\t\t\t\t   &pbdata->parm_data);\n-      }\n-}\n-\n /* Assign RTL expressions to the function's parameters.  This may involve\n    copying them into registers and using those registers as the DECL_RTL.  */\n \n@@ -3696,11 +3541,7 @@ assign_parms (tree fndecl)\n   struct assign_parm_data_all all;\n   tree parm;\n   vec<tree> fnargs;\n-  unsigned i, bound_no = 0;\n-  tree last_arg = NULL;\n-  rtx last_arg_entry = NULL;\n-  vec<bounds_parm_data> bndargs = vNULL;\n-  bounds_parm_data bdata;\n+  unsigned i;\n \n   crtl->args.internal_arg_pointer\n     = targetm.calls.internal_arg_pointer ();\n@@ -3751,15 +3592,6 @@ assign_parms (tree fndecl)\n \t  assign_parm_find_stack_rtl (parm, &data);\n \t  assign_parm_adjust_entry_rtl (&data);\n \t}\n-      if (!POINTER_BOUNDS_TYPE_P (data.passed_type))\n-\t{\n-\t  /* Remember where last non bounds arg was passed in case\n-\t     we have to load associated bounds for it from Bounds\n-\t     Table.  */\n-\t  last_arg = parm;\n-\t  last_arg_entry = data.entry_parm;\n-\t  bound_no = 0;\n-\t}\n       /* Record permanently how this parm was passed.  */\n       if (data.passed_pointer)\n \t{\n@@ -3773,64 +3605,21 @@ assign_parms (tree fndecl)\n \n       assign_parm_adjust_stack_rtl (&data);\n \n-      /* Bounds should be loaded in the particular order to\n-\t have registers allocated correctly.  Collect info about\n-\t input bounds and load them later.  */\n-      if (POINTER_BOUNDS_TYPE_P (data.passed_type))\n-\t{\n-\t  /* Expect bounds in instrumented functions only.  */\n-\t  gcc_assert (chkp_function_instrumented_p (fndecl));\n-\n-\t  bdata.parm_data = data;\n-\t  bdata.bounds_parm = parm;\n-\t  bdata.ptr_parm = last_arg;\n-\t  bdata.ptr_entry = last_arg_entry;\n-\t  bdata.bound_no = bound_no;\n-\t  bndargs.safe_push (bdata);\n-\t}\n+      if (assign_parm_setup_block_p (&data))\n+\tassign_parm_setup_block (&all, parm, &data);\n+      else if (data.passed_pointer || use_register_for_decl (parm))\n+\tassign_parm_setup_reg (&all, parm, &data);\n       else\n-\t{\n-\t  if (assign_parm_setup_block_p (&data))\n-\t    assign_parm_setup_block (&all, parm, &data);\n-\t  else if (data.passed_pointer || use_register_for_decl (parm))\n-\t    assign_parm_setup_reg (&all, parm, &data);\n-\t  else\n-\t    assign_parm_setup_stack (&all, parm, &data);\n-\t}\n+\tassign_parm_setup_stack (&all, parm, &data);\n \n       if (cfun->stdarg && !DECL_CHAIN (parm))\n-\t{\n-\t  int pretend_bytes = 0;\n-\n-\t  assign_parms_setup_varargs (&all, &data, false);\n-\n-\t  if (chkp_function_instrumented_p (fndecl))\n-\t    {\n-\t      /* We expect this is the last parm.  Otherwise it is wrong\n-\t\t to assign bounds right now.  */\n-\t      gcc_assert (i == (fnargs.length () - 1));\n-\t      assign_bounds (bndargs, all, true, false, false);\n-\t      targetm.calls.setup_incoming_vararg_bounds (all.args_so_far,\n-\t\t\t\t\t\t\t  data.promoted_mode,\n-\t\t\t\t\t\t\t  data.passed_type,\n-\t\t\t\t\t\t\t  &pretend_bytes,\n-\t\t\t\t\t\t\t  false);\n-\t      assign_bounds (bndargs, all, false, true, true);\n-\t      bndargs.release ();\n-\t    }\n-\t}\n+\tassign_parms_setup_varargs (&all, &data, false);\n \n       /* Update info on where next arg arrives in registers.  */\n       targetm.calls.function_arg_advance (all.args_so_far, data.promoted_mode,\n \t\t\t\t\t  data.passed_type, data.named_arg);\n-\n-      if (POINTER_BOUNDS_TYPE_P (data.passed_type))\n-\tbound_no++;\n     }\n \n-  assign_bounds (bndargs, all, true, true, true);\n-  bndargs.release ();\n-\n   if (targetm.calls.split_complex_arg)\n     assign_parms_unsplit_complex (&all, fnargs);\n \n@@ -3953,10 +3742,6 @@ assign_parms (tree fndecl)\n \n \t  real_decl_rtl = targetm.calls.function_value (TREE_TYPE (decl_result),\n \t\t\t\t\t\t\tfndecl, true);\n-\t  if (chkp_function_instrumented_p (fndecl))\n-\t    crtl->return_bnd\n-\t      = targetm.calls.chkp_function_value_bounds (TREE_TYPE (decl_result),\n-\t\t\t\t\t\t\t  fndecl, true);\n \t  REG_FUNCTION_VALUE_P (real_decl_rtl) = 1;\n \t  /* The delay slot scheduler assumes that crtl->return_rtx\n \t     holds the hard register containing the return value, not a\n@@ -5238,14 +5023,6 @@ expand_function_start (tree subr)\n       /* Set DECL_REGISTER flag so that expand_function_end will copy the\n \t result to the real return register(s).  */\n       DECL_REGISTER (res) = 1;\n-\n-      if (chkp_function_instrumented_p (current_function_decl))\n-\t{\n-\t  tree return_type = TREE_TYPE (res);\n-\t  rtx bounds = targetm.calls.chkp_function_value_bounds (return_type,\n-\t\t\t\t\t\t\t\t subr, 1);\n-\t  SET_DECL_BOUNDS_RTL (res, bounds);\n-\t}\n     }\n \n   /* Initialize rtx for parameters and local variables."}, {"sha": "a631caafd3f706571411f3ce17b7ee4c2b02d128", "filename": "gcc/gcc.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -1012,10 +1012,6 @@ proper position among the other output files.  */\n #endif\n #endif\n \n-#ifndef CHKP_SPEC\n-#define CHKP_SPEC \"\"\n-#endif\n-\n /* -u* was put back because both BSD and SysV seem to support it.  */\n /* %{static|no-pie|static-pie:} simply prevents an error message:\n    1. If the target machine doesn't handle -static.\n@@ -1039,7 +1035,7 @@ proper position among the other output files.  */\n    \"%X %{o*} %{e*} %{N} %{n} %{r}\\\n     %{s} %{t} %{u*} %{z} %{Z} %{!nostdlib:%{!nostartfiles:%S}} \\\n     %{static|no-pie|static-pie:} %{L*} %(mfwrap) %(link_libgcc) \" \\\n-    VTABLE_VERIFICATION_SPEC \" \" SANITIZER_EARLY_SPEC \" %o \" CHKP_SPEC \" \\\n+    VTABLE_VERIFICATION_SPEC \" \" SANITIZER_EARLY_SPEC \" %o \"\" \\\n     %{fopenacc|fopenmp|%:gt(%{ftree-parallelize-loops=*:%*} 1):\\\n \t%:include(libgomp.spec)%(link_gomp)}\\\n     %{fgnu-tm:%:include(libitm.spec)%(link_itm)}\\"}, {"sha": "c1d84420c6ef9a6d6c7644e00ee5b7373e582814", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -55,7 +55,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gomp-constants.h\"\n #include \"optabs-query.h\"\n #include \"omp-general.h\"\n-#include \"ipa-chkp.h\"\n #include \"tree-cfg.h\"\n #include \"fold-const-call.h\"\n #include \"stringpool.h\"\n@@ -728,18 +727,6 @@ gimple_fold_builtin_memory_op (gimple_stmt_iterator *gsi,\n       unsigned int src_align, dest_align;\n       tree off0;\n \n-      /* Inlining of memcpy/memmove may cause bounds lost (if we copy\n-\t pointers as wide integer) and also may result in huge function\n-\t size because of inlined bounds copy.  Thus don't inline for\n-\t functions we want to instrument.  */\n-      if (flag_check_pointer_bounds\n-\t  && chkp_instrumentable_p (cfun->decl)\n-\t  /* Even if data may contain pointers we can inline if copy\n-\t     less than a pointer size.  */\n-\t  && (!tree_fits_uhwi_p (len)\n-\t      || compare_tree_int (len, POINTER_SIZE_UNITS) >= 0))\n-\treturn false;\n-\n       /* Build accesses at offset zero with a ref-all character type.  */\n       off0 = build_int_cst (build_pointer_type_for_mode (char_type_node,\n \t\t\t\t\t\t\t ptr_mode, true), 0);"}, {"sha": "cc50fba21d7b51325724b37f96465476053bece0", "filename": "gcc/gimple-ssa-warn-restrict.c", "status": "modified", "additions": 5, "deletions": 35, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fgimple-ssa-warn-restrict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fgimple-ssa-warn-restrict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-warn-restrict.c?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -589,29 +589,21 @@ builtin_access::builtin_access (gcall *call, builtin_memref &dst,\n \n   /* The size argument number (depends on the built-in).  */\n   unsigned sizeargno = 2;\n-  if (gimple_call_with_bounds_p (call))\n-    sizeargno += 2;\n \n   tree func = gimple_call_fndecl (call);\n   switch (DECL_FUNCTION_CODE (func))\n     {\n     case BUILT_IN_MEMCPY:\n     case BUILT_IN_MEMCPY_CHK:\n-    case BUILT_IN_MEMCPY_CHKP:\n-    case BUILT_IN_MEMCPY_CHK_CHKP:\n     case BUILT_IN_MEMPCPY:\n     case BUILT_IN_MEMPCPY_CHK:\n-    case BUILT_IN_MEMPCPY_CHKP:\n-    case BUILT_IN_MEMPCPY_CHK_CHKP:\n       ostype = 0;\n       depends_p = false;\n       detect_overlap = &builtin_access::generic_overlap;\n       break;\n \n     case BUILT_IN_MEMMOVE:\n     case BUILT_IN_MEMMOVE_CHK:\n-    case BUILT_IN_MEMMOVE_CHKP:\n-    case BUILT_IN_MEMMOVE_CHK_CHKP:\n       /* For memmove there is never any overlap to check for.  */\n       ostype = 0;\n       depends_p = false;\n@@ -628,19 +620,13 @@ builtin_access::builtin_access (gcall *call, builtin_memref &dst,\n \n     case BUILT_IN_STPCPY:\n     case BUILT_IN_STPCPY_CHK:\n-    case BUILT_IN_STPCPY_CHKP:\n-    case BUILT_IN_STPCPY_CHK_CHKP:\n     case BUILT_IN_STRCPY:\n     case BUILT_IN_STRCPY_CHK:\n-    case BUILT_IN_STRCPY_CHKP:\n-    case BUILT_IN_STRCPY_CHK_CHKP:\n       detect_overlap = &builtin_access::strcpy_overlap;\n       break;\n \n     case BUILT_IN_STRCAT:\n     case BUILT_IN_STRCAT_CHK:\n-    case BUILT_IN_STRCAT_CHKP:\n-    case BUILT_IN_STRCAT_CHK_CHKP:\n       detect_overlap = &builtin_access::strcat_overlap;\n       break;\n \n@@ -654,8 +640,7 @@ builtin_access::builtin_access (gcall *call, builtin_memref &dst,\n     default:\n       /* Handle other string functions here whose access may need\n \t to be validated for in-bounds offsets and non-overlapping\n-\t copies.  (Not all _chkp functions have BUILT_IN_XXX_CHKP\n-\t macros so they need to be handled here.)  */\n+\t copies.  */\n       return;\n     }\n \n@@ -1738,8 +1723,6 @@ wrestrict_dom_walker::check_call (gcall *call)\n   if (!func || DECL_BUILT_IN_CLASS (func) != BUILT_IN_NORMAL)\n     return;\n \n-  bool with_bounds = gimple_call_with_bounds_p (call);\n-\n   /* Argument number to extract from the call (depends on the built-in\n      and its kind).  */\n   unsigned dst_idx = -1;\n@@ -1754,16 +1737,10 @@ wrestrict_dom_walker::check_call (gcall *call)\n     {\n     case BUILT_IN_MEMCPY:\n     case BUILT_IN_MEMCPY_CHK:\n-    case BUILT_IN_MEMCPY_CHKP:\n-    case BUILT_IN_MEMCPY_CHK_CHKP:\n     case BUILT_IN_MEMPCPY:\n     case BUILT_IN_MEMPCPY_CHK:\n-    case BUILT_IN_MEMPCPY_CHKP:\n-    case BUILT_IN_MEMPCPY_CHK_CHKP:\n     case BUILT_IN_MEMMOVE:\n     case BUILT_IN_MEMMOVE_CHK:\n-    case BUILT_IN_MEMMOVE_CHKP:\n-    case BUILT_IN_MEMMOVE_CHK_CHKP:\n       strfun = false;\n       /* Fall through.  */\n \n@@ -1774,31 +1751,24 @@ wrestrict_dom_walker::check_call (gcall *call)\n     case BUILT_IN_STRNCPY:\n     case BUILT_IN_STRNCPY_CHK:\n       dst_idx = 0;\n-      src_idx = 1 + with_bounds;\n-      bnd_idx = 2 + 2 * with_bounds;\n+      src_idx = 1;\n+      bnd_idx = 2;\n       break;\n \n     case BUILT_IN_STPCPY:\n     case BUILT_IN_STPCPY_CHK:\n-    case BUILT_IN_STPCPY_CHKP:\n-    case BUILT_IN_STPCPY_CHK_CHKP:\n     case BUILT_IN_STRCPY:\n     case BUILT_IN_STRCPY_CHK:\n-    case BUILT_IN_STRCPY_CHKP:\n-    case BUILT_IN_STRCPY_CHK_CHKP:\n     case BUILT_IN_STRCAT:\n     case BUILT_IN_STRCAT_CHK:\n-    case BUILT_IN_STRCAT_CHKP:\n-    case BUILT_IN_STRCAT_CHK_CHKP:\n       dst_idx = 0;\n-      src_idx = 1 + with_bounds;\n+      src_idx = 1;\n       break;\n \n     default:\n       /* Handle other string functions here whose access may need\n \t to be validated for in-bounds offsets and non-overlapping\n-\t copies.  (Not all _chkp functions have BUILT_IN_XXX_CHKP\n-\t macros so they need to be handled here.)  */\n+\t copies.  */\n       return;\n     }\n "}, {"sha": "abd28079b2de33d1d2283bf3decbe5a07caac99a", "filename": "gcc/gimple.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -385,7 +385,6 @@ gimple_build_call_from_tree (tree t, tree fnptrtype)\n   gimple_call_set_nothrow (call, TREE_NOTHROW (t));\n   gimple_call_set_by_descriptor (call, CALL_EXPR_BY_DESCRIPTOR (t));\n   gimple_set_no_warning (call, TREE_NO_WARNING (t));\n-  gimple_call_set_with_bounds (call, CALL_WITH_BOUNDS_P (t));\n \n   if (fnptrtype)\n     {"}, {"sha": "00a9f207bdf1d5e89d1f6a3225cc667a10fde63b", "filename": "gcc/gimple.h", "status": "modified", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -145,7 +145,6 @@ enum gf_mask {\n     GF_CALL_ALLOCA_FOR_VAR\t= 1 << 5,\n     GF_CALL_INTERNAL\t\t= 1 << 6,\n     GF_CALL_CTRL_ALTERING       = 1 << 7,\n-    GF_CALL_WITH_BOUNDS \t= 1 << 8,\n     GF_CALL_MUST_TAIL_CALL\t= 1 << 9,\n     GF_CALL_BY_DESCRIPTOR\t= 1 << 10,\n     GF_CALL_NOCF_CHECK\t\t= 1 << 11,\n@@ -2856,44 +2855,6 @@ gimple_call_internal_p (const gimple *gs)\n   return gimple_call_internal_p (gc);\n }\n \n-\n-/* Return true if call GS is marked as instrumented by\n-   Pointer Bounds Checker.  */\n-\n-static inline bool\n-gimple_call_with_bounds_p (const gcall *gs)\n-{\n-  return (gs->subcode & GF_CALL_WITH_BOUNDS) != 0;\n-}\n-\n-static inline bool\n-gimple_call_with_bounds_p (const gimple *gs)\n-{\n-  const gcall *gc = GIMPLE_CHECK2<const gcall *> (gs);\n-  return gimple_call_with_bounds_p (gc);\n-}\n-\n-\n-/* If INSTRUMENTED_P is true, marm statement GS as instrumented by\n-   Pointer Bounds Checker.  */\n-\n-static inline void\n-gimple_call_set_with_bounds (gcall *gs, bool with_bounds)\n-{\n-  if (with_bounds)\n-    gs->subcode |= GF_CALL_WITH_BOUNDS;\n-  else\n-    gs->subcode &= ~GF_CALL_WITH_BOUNDS;\n-}\n-\n-static inline void\n-gimple_call_set_with_bounds (gimple *gs, bool with_bounds)\n-{\n-  gcall *gc = GIMPLE_CHECK2<gcall *> (gs);\n-  gimple_call_set_with_bounds (gc, with_bounds);\n-}\n-\n-\n /* Return true if call GS is marked as nocf_check.  */\n \n static inline bool"}, {"sha": "32d7ad63ac99e0f57a7d1df5a8b8e3070c6069e2", "filename": "gcc/gimplify.c", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -4859,19 +4859,11 @@ gimplify_init_constructor (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t   individual element initialization.  Also don't do this for small\n \t   all-zero initializers (which aren't big enough to merit\n \t   clearing), and don't try to make bitwise copies of\n-\t   TREE_ADDRESSABLE types.\n+\t   TREE_ADDRESSABLE types.  */\n \n-\t   We cannot apply such transformation when compiling chkp static\n-\t   initializer because creation of initializer image in the memory\n-\t   will require static initialization of bounds for it.  It should\n-\t   result in another gimplification of similar initializer and we\n-\t   may fall into infinite loop.  */\n \tif (valid_const_initializer\n \t    && !(cleared || num_nonzero_elements == 0)\n-\t    && !TREE_ADDRESSABLE (type)\n-\t    && (!current_function_decl\n-\t\t|| !lookup_attribute (\"chkp ctor\",\n-\t\t\t\t      DECL_ATTRIBUTES (current_function_decl))))\n+\t    && !TREE_ADDRESSABLE (type))\n \t  {\n \t    HOST_WIDE_INT size = int_size_in_bytes (type);\n \t    unsigned int align;"}, {"sha": "b38b542ccb0536e2c2018e0164ba8f2f746a5ceb", "filename": "gcc/ipa-chkp.c", "status": "removed", "additions": 0, "deletions": 876, "changes": 876, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Fipa-chkp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Fipa-chkp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-chkp.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,876 +0,0 @@\n-/* Pointer Bounds Checker IPA passes.\n-   Copyright (C) 2014-2018 Free Software Foundation, Inc.\n-   Contributed by Ilya Enkovich (ilya.enkovich@intel.com)\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify it under\n-the terms of the GNU General Public License as published by the Free\n-Software Foundation; either version 3, or (at your option) any later\n-version.\n-\n-GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GCC; see the file COPYING3.  If not see\n-<http://www.gnu.org/licenses/>.  */\n-\n-#include \"config.h\"\n-#define INCLUDE_STRING\n-#include \"system.h\"\n-#include \"coretypes.h\"\n-#include \"backend.h\"\n-#include \"tree.h\"\n-#include \"gimple.h\"\n-#include \"tree-pass.h\"\n-#include \"stringpool.h\"\n-#include \"lto-streamer.h\"\n-#include \"stor-layout.h\"\n-#include \"calls.h\"\n-#include \"cgraph.h\"\n-#include \"tree-chkp.h\"\n-#include \"tree-inline.h\"\n-#include \"ipa-chkp.h\"\n-#include \"stringpool.h\"\n-#include \"attribs.h\"\n-\n-/*  Pointer Bounds Checker has two IPA passes to support code instrumentation.\n-\n-    In instrumented code each pointer is provided with bounds.  For input\n-    pointer parameters it means we also have bounds passed.  For calls it\n-    means we have additional bounds arguments for pointer arguments.\n-\n-    To have all IPA optimizations working correctly we have to express\n-    dataflow between passed and received bounds explicitly via additional\n-    entries in function declaration arguments list and in function type.\n-    Since we may have both instrumented and not instrumented code at the\n-    same time, we cannot replace all original functions with their\n-    instrumented variants.  Therefore we create clones (versions) instead.\n-\n-    Instrumentation clones creation is a separate IPA pass which is a part\n-    of early local passes.  Clones are created after SSA is built (because\n-    instrumentation pass works on SSA) and before any transformations\n-    which may change pointer flow and therefore lead to incorrect code\n-    instrumentation (possibly causing false bounds check failures).\n-\n-    Instrumentation clones have pointer bounds arguments added right after\n-    pointer arguments.  Clones have assembler name of the original\n-    function with suffix added.  New assembler name is in transparent\n-    alias chain with the original name.  Thus we expect all calls to the\n-    original and instrumented functions look similar in assembler.\n-\n-    During instrumentation versioning pass we create instrumented versions\n-    of all function with body and also for all their aliases and thunks.\n-    Clones for functions with no body are created on demand (usually\n-    during call instrumentation).\n-\n-    Original and instrumented function nodes are connected with IPA\n-    reference IPA_REF_CHKP.  It is mostly done to have reachability\n-    analysis working correctly.  We may have no references to the\n-    instrumented function in the code but it still should be counted\n-    as reachable if the original function is reachable.\n-\n-    When original function bodies are not needed anymore we release\n-    them and transform functions into a special kind of thunks.  Each\n-    thunk has a call edge to the instrumented version.  These thunks\n-    help to keep externally visible instrumented functions visible\n-    when linker resolution files are used.  Linker has no info about\n-    connection between original and instrumented function and\n-    therefore we may wrongly decide (due to difference in assembler\n-    names) that instrumented function version is local and can be\n-    removed.  */\n-\n-#define CHKP_BOUNDS_OF_SYMBOL_PREFIX \"__chkp_bounds_of_\"\n-#define CHKP_WRAPPER_SYMBOL_PREFIX \"__mpx_wrapper_\"\n-\n-/* Return 1 calls to FNDECL should be replaced with\n-   a call to wrapper function.  */\n-bool\n-chkp_wrap_function (tree fndecl)\n-{\n-  if (!flag_chkp_use_wrappers)\n-    return false;\n-\n-  if (DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL)\n-    {\n-      switch (DECL_FUNCTION_CODE (fndecl))\n-\t{\n-\tcase BUILT_IN_STRLEN:\n-\tcase BUILT_IN_STRCPY:\n-\tcase BUILT_IN_STRNCPY:\n-\tcase BUILT_IN_STPCPY:\n-\tcase BUILT_IN_STPNCPY:\n-\tcase BUILT_IN_STRCAT:\n-\tcase BUILT_IN_STRNCAT:\n-\tcase BUILT_IN_MEMCPY:\n-\tcase BUILT_IN_MEMPCPY:\n-\tcase BUILT_IN_MEMSET:\n-\tcase BUILT_IN_MEMMOVE:\n-\tcase BUILT_IN_BZERO:\n-\tcase BUILT_IN_MALLOC:\n-\tcase BUILT_IN_CALLOC:\n-\tcase BUILT_IN_REALLOC:\n-\t  return 1;\n-\n-\tdefault:\n-\t  return 0;\n-\t}\n-    }\n-\n-  return false;\n-}\n-\n-static const char *\n-chkp_wrap_function_name (tree fndecl)\n-{\n-  gcc_assert (DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL);\n-\n-  switch (DECL_FUNCTION_CODE (fndecl))\n-    {\n-    case BUILT_IN_STRLEN:\n-      return CHKP_WRAPPER_SYMBOL_PREFIX \"strlen\";\n-    case BUILT_IN_STRCPY:\n-      return CHKP_WRAPPER_SYMBOL_PREFIX \"strcpy\";\n-    case BUILT_IN_STRNCPY:\n-      return CHKP_WRAPPER_SYMBOL_PREFIX \"strncpy\";\n-    case BUILT_IN_STPCPY:\n-      return CHKP_WRAPPER_SYMBOL_PREFIX \"stpcpy\";\n-    case BUILT_IN_STPNCPY:\n-      return CHKP_WRAPPER_SYMBOL_PREFIX \"stpncpy\";\n-    case BUILT_IN_STRCAT:\n-      return CHKP_WRAPPER_SYMBOL_PREFIX \"strcat\";\n-    case BUILT_IN_STRNCAT:\n-      return CHKP_WRAPPER_SYMBOL_PREFIX \"strncat\";\n-    case BUILT_IN_MEMCPY:\n-      return CHKP_WRAPPER_SYMBOL_PREFIX \"memcpy\";\n-    case BUILT_IN_MEMPCPY:\n-      return CHKP_WRAPPER_SYMBOL_PREFIX \"mempcpy\";\n-    case BUILT_IN_MEMSET:\n-      return CHKP_WRAPPER_SYMBOL_PREFIX \"memset\";\n-    case BUILT_IN_MEMMOVE:\n-      return CHKP_WRAPPER_SYMBOL_PREFIX \"memmove\";\n-    case BUILT_IN_BZERO:\n-      return CHKP_WRAPPER_SYMBOL_PREFIX \"bzero\";\n-    case BUILT_IN_MALLOC:\n-      return CHKP_WRAPPER_SYMBOL_PREFIX \"malloc\";\n-    case BUILT_IN_CALLOC:\n-      return CHKP_WRAPPER_SYMBOL_PREFIX \"calloc\";\n-    case BUILT_IN_REALLOC:\n-      return CHKP_WRAPPER_SYMBOL_PREFIX \"realloc\";\n-\n-    default:\n-      gcc_unreachable ();\n-    }\n-\n-  return \"\";\n-}\n-\n-/* Build a clone of FNDECL with a modified name.  */\n-\n-static tree\n-chkp_build_instrumented_fndecl (tree fndecl)\n-{\n-  tree new_decl = copy_node (fndecl);\n-  tree new_name;\n-  std::string s;\n-\n-  /* called_as_built_in checks DECL_NAME to identify calls to\n-     builtins.  We want instrumented calls to builtins to be\n-     recognized by called_as_built_in.  Therefore use original\n-     DECL_NAME for cloning with no prefixes.  */\n-  s = IDENTIFIER_POINTER (DECL_NAME (fndecl));\n-  s += \".chkp\";\n-  DECL_NAME (new_decl) = get_identifier (s.c_str ());\n-\n-  /* References to the original and to the instrumented version\n-     should look the same in the output assembly.  And we cannot\n-     use the same assembler name for the instrumented version\n-     because it conflicts with decl merging algorithms in LTO.\n-     Achieve the result by using transparent alias name for the\n-     instrumented version.  */\n-  if (chkp_wrap_function(fndecl))\n-    {\n-      new_name = get_identifier (chkp_wrap_function_name (fndecl));\n-      DECL_VISIBILITY (new_decl) = VISIBILITY_DEFAULT;\n-    }\n-  else\n-    {\n-      s = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (fndecl));\n-      s += \".chkp\";\n-      new_name = get_identifier (s.c_str ());\n-      IDENTIFIER_TRANSPARENT_ALIAS (new_name) = 1;\n-      TREE_CHAIN (new_name) = DECL_ASSEMBLER_NAME (fndecl);\n-    }\n-  SET_DECL_ASSEMBLER_NAME (new_decl, new_name);\n-\n-  /* For functions with body versioning will make a copy of arguments.\n-     For functions with no body we need to do it here.  */\n-  if (!gimple_has_body_p (fndecl))\n-    {\n-      tree arg;\n-\n-      DECL_ARGUMENTS (new_decl) = copy_list (DECL_ARGUMENTS (fndecl));\n-      for (arg = DECL_ARGUMENTS (new_decl); arg; arg = DECL_CHAIN (arg))\n-\tDECL_CONTEXT (arg) = new_decl;\n-    }\n-\n-  /* We are going to modify attributes list and therefore should\n-     make own copy.  */\n-  DECL_ATTRIBUTES (new_decl) = copy_list (DECL_ATTRIBUTES (fndecl));\n-\n-  /* Change builtin function code.  */\n-  if (DECL_BUILT_IN (new_decl))\n-    {\n-      gcc_assert (DECL_BUILT_IN_CLASS (new_decl) == BUILT_IN_NORMAL);\n-      gcc_assert (DECL_FUNCTION_CODE (new_decl) < BEGIN_CHKP_BUILTINS);\n-      DECL_FUNCTION_CODE (new_decl)\n-\t= (enum built_in_function)(DECL_FUNCTION_CODE (new_decl)\n-\t\t\t\t   + BEGIN_CHKP_BUILTINS + 1);\n-    }\n-\n-  return new_decl;\n-}\n-\n-\n-/* Fix operands of attribute from ATTRS list named ATTR_NAME.\n-   Integer operands are replaced with values according to\n-   INDEXES map having LEN elements.  For operands out of len\n-   we just add DELTA.  */\n-\n-static void\n-chkp_map_attr_arg_indexes (tree attrs, const char *attr_name,\n-\t\t\t   unsigned *indexes, int len, int delta)\n-{\n-  tree attr = lookup_attribute (attr_name, attrs);\n-  tree op;\n-\n-  if (!attr)\n-    return;\n-\n-  TREE_VALUE (attr) = copy_list (TREE_VALUE (attr));\n-  for (op = TREE_VALUE (attr); op; op = TREE_CHAIN (op))\n-    {\n-      int idx;\n-\n-      if (TREE_CODE (TREE_VALUE (op)) != INTEGER_CST)\n-\tcontinue;\n-\n-      idx = TREE_INT_CST_LOW (TREE_VALUE (op));\n-\n-      /* If idx exceeds indexes length then we just\n-\t keep it at the same distance from the last\n-\t known arg.  */\n-      if (idx > len)\n-\tidx += delta;\n-      else\n-\tidx = indexes[idx - 1] + 1;\n-      TREE_VALUE (op) = build_int_cst (TREE_TYPE (TREE_VALUE (op)), idx);\n-    }\n-}\n-\n-/* Make a copy of function type ORIG_TYPE adding pointer\n-   bounds as additional arguments.  */\n-\n-tree\n-chkp_copy_function_type_adding_bounds (tree orig_type)\n-{\n-  tree type;\n-  tree arg_type, attrs;\n-  unsigned len = list_length (TYPE_ARG_TYPES (orig_type));\n-  unsigned *indexes = XALLOCAVEC (unsigned, len);\n-  unsigned idx = 0, new_idx = 0;\n-\n-  for (arg_type = TYPE_ARG_TYPES (orig_type);\n-       arg_type;\n-       arg_type = TREE_CHAIN (arg_type))\n-    if (TREE_VALUE (arg_type) == void_type_node)\n-      continue;\n-    else if (BOUNDED_TYPE_P (TREE_VALUE (arg_type))\n-\t     || pass_by_reference (NULL, TYPE_MODE (TREE_VALUE (arg_type)),\n-\t\t\t\t   TREE_VALUE (arg_type), true)\n-\t     || chkp_type_has_pointer (TREE_VALUE (arg_type)))\n-      break;\n-\n-  /* We may use original type if there are no bounds passed.  */\n-  if (!arg_type)\n-    return orig_type;\n-\n-  type = build_distinct_type_copy (orig_type);\n-  TYPE_ARG_TYPES (type) = copy_list (TYPE_ARG_TYPES (type));\n-\n-  for (arg_type = TYPE_ARG_TYPES (type);\n-       arg_type;\n-       arg_type = TREE_CHAIN (arg_type))\n-    {\n-      indexes[idx++] = new_idx++;\n-\n-      /* pass_by_reference returns 1 for void type,\n-\t so check for it first.  */\n-      if (TREE_VALUE (arg_type) == void_type_node)\n-\tcontinue;\n-      else if (BOUNDED_TYPE_P (TREE_VALUE (arg_type))\n-\t       || pass_by_reference (NULL, TYPE_MODE (TREE_VALUE (arg_type)),\n-\t\t\t\t     TREE_VALUE (arg_type), true))\n-\t{\n-\t  tree new_type = build_tree_list (NULL_TREE,\n-\t\t\t\t\t   pointer_bounds_type_node);\n-\t  TREE_CHAIN (new_type) = TREE_CHAIN (arg_type);\n-\t  TREE_CHAIN (arg_type) = new_type;\n-\n-\t  arg_type = TREE_CHAIN (arg_type);\n-\t  new_idx++;\n-\t}\n-      else if (chkp_type_has_pointer (TREE_VALUE (arg_type)))\n-\t{\n-\t  bitmap slots = BITMAP_ALLOC (NULL);\n-\t  bitmap_iterator bi;\n-\t  unsigned bnd_no;\n-\n-\t  chkp_find_bound_slots (TREE_VALUE (arg_type), slots);\n-\n-\t  EXECUTE_IF_SET_IN_BITMAP (slots, 0, bnd_no, bi)\n-\t    {\n-\t      tree new_type = build_tree_list (NULL_TREE,\n-\t\t\t\t\t       pointer_bounds_type_node);\n-\t      TREE_CHAIN (new_type) = TREE_CHAIN (arg_type);\n-\t      TREE_CHAIN (arg_type) = new_type;\n-\n-\t      arg_type = TREE_CHAIN (arg_type);\n-\t      new_idx++;\n-\t    }\n-\t  BITMAP_FREE (slots);\n-\t}\n-    }\n-\n-  /* If function type has attribute with arg indexes then\n-     we have to copy it fixing attribute ops.  Map for\n-     fixing is in indexes array.  */\n-  attrs = TYPE_ATTRIBUTES (type);\n-  if (lookup_attribute (\"nonnull\", attrs)\n-      || lookup_attribute (\"format\", attrs)\n-      || lookup_attribute (\"format_arg\", attrs))\n-    {\n-      int delta = new_idx - len;\n-      attrs = copy_list (TYPE_ATTRIBUTES (type));\n-      chkp_map_attr_arg_indexes (attrs, \"nonnull\", indexes, len, delta);\n-      chkp_map_attr_arg_indexes (attrs, \"format\", indexes, len, delta);\n-      chkp_map_attr_arg_indexes (attrs, \"format_arg\", indexes, len, delta);\n-      TYPE_ATTRIBUTES (type) = attrs;\n-    }\n-\n-  return type;\n-}\n-\n-/* For given function FNDECL add bounds arguments to arguments\n-   list.  */\n-\n-static void\n-chkp_add_bounds_params_to_function (tree fndecl)\n-{\n-  tree arg;\n-\n-  for (arg = DECL_ARGUMENTS (fndecl); arg; arg = DECL_CHAIN (arg))\n-    if (BOUNDED_P (arg))\n-      {\n-\tstd::string new_name = CHKP_BOUNDS_OF_SYMBOL_PREFIX;\n-\ttree new_arg;\n-\n-\tif (DECL_NAME (arg))\n-\t  new_name += IDENTIFIER_POINTER (DECL_NAME (arg));\n-\telse\n-\t  {\n-\t    char uid[25];\n-\t    snprintf (uid, 25, \"D.%u\", DECL_UID (arg));\n-\t    new_name += uid;\n-\t  }\n-\n-\tnew_arg = build_decl (DECL_SOURCE_LOCATION (arg), PARM_DECL,\n-\t\t\t      get_identifier (new_name.c_str ()),\n-\t\t\t      pointer_bounds_type_node);\n-\tDECL_ARG_TYPE (new_arg) = pointer_bounds_type_node;\n-\tDECL_CONTEXT (new_arg) = DECL_CONTEXT (arg);\n-\tDECL_ARTIFICIAL (new_arg) = 1;\n-\tDECL_CHAIN (new_arg) = DECL_CHAIN (arg);\n-\tDECL_CHAIN (arg) = new_arg;\n-\n-\targ = DECL_CHAIN (arg);\n-\n-      }\n-    else if (chkp_type_has_pointer (TREE_TYPE (arg)))\n-      {\n-\ttree orig_arg = arg;\n-\tbitmap slots = BITMAP_ALLOC (NULL);\n-\tbitmap_iterator bi;\n-\tunsigned bnd_no;\n-\n-\tchkp_find_bound_slots (TREE_TYPE (arg), slots);\n-\n-\tEXECUTE_IF_SET_IN_BITMAP (slots, 0, bnd_no, bi)\n-\t  {\n-\t    std::string new_name = CHKP_BOUNDS_OF_SYMBOL_PREFIX;\n-\t    tree new_arg;\n-\t    char offs[25];\n-\n-\t    if (DECL_NAME (orig_arg))\n-\t      new_name += IDENTIFIER_POINTER (DECL_NAME (orig_arg));\n-\t    else\n-\t      {\n-\t\tsnprintf (offs, 25, \"D.%u\", DECL_UID (arg));\n-\t\tnew_name += offs;\n-\t      }\n-\t    snprintf (offs, 25, \"__%u\", bnd_no * POINTER_SIZE / BITS_PER_UNIT);\n-\n-\t    new_arg = build_decl (DECL_SOURCE_LOCATION (orig_arg),\n-\t\t\t\t  PARM_DECL,\n-\t\t\t\t  get_identifier (new_name.c_str ()),\n-\t\t\t\t  pointer_bounds_type_node);\n-\t    DECL_ARG_TYPE (new_arg) = pointer_bounds_type_node;\n-\t    DECL_CONTEXT (new_arg) = DECL_CONTEXT (orig_arg);\n-\t    DECL_ARTIFICIAL (new_arg) = 1;\n-\t    DECL_CHAIN (new_arg) = DECL_CHAIN (arg);\n-\t    DECL_CHAIN (arg) = new_arg;\n-\n-\t    arg = DECL_CHAIN (arg);\n-\t  }\n-\tBITMAP_FREE (slots);\n-      }\n-\n-  TREE_TYPE (fndecl) =\n-    chkp_copy_function_type_adding_bounds (TREE_TYPE (fndecl));\n-}\n-\n-/* Return an instrumentation clone for builtin function\n-   FNDECL.  Create one if needed.  */\n-\n-tree\n-chkp_maybe_clone_builtin_fndecl (tree fndecl)\n-{\n-  tree clone;\n-  enum built_in_function fcode = DECL_FUNCTION_CODE (fndecl);\n-\n-  gcc_assert (DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL\n-\t      && fcode < BEGIN_CHKP_BUILTINS);\n-\n-  fcode = (enum built_in_function) (fcode + BEGIN_CHKP_BUILTINS + 1);\n-  clone = builtin_decl_explicit (fcode);\n-  if (clone)\n-    return clone;\n-\n-  clone = chkp_build_instrumented_fndecl (fndecl);\n-  chkp_add_bounds_params_to_function (clone);\n-\n-  gcc_assert (DECL_FUNCTION_CODE (clone) == fcode);\n-\n-  set_builtin_decl (fcode, clone, false);\n-\n-  return clone;\n-}\n-\n-/* Return 1 if function FNDECL should be instrumented.  */\n-\n-bool\n-chkp_instrumentable_p (tree fndecl)\n-{\n-  struct function *fn = DECL_STRUCT_FUNCTION (fndecl);\n-  return (!lookup_attribute (\"bnd_legacy\", DECL_ATTRIBUTES (fndecl))\n-\t  && (!flag_chkp_instrument_marked_only\n-\t      || lookup_attribute (\"bnd_instrument\", DECL_ATTRIBUTES (fndecl)))\n-\t  && (!fn || !copy_forbidden (fn)));\n-}\n-\n-/* Return clone created for instrumentation of NODE or NULL.  */\n-\n-cgraph_node *\n-chkp_maybe_create_clone (tree fndecl)\n-{\n-  cgraph_node *node = cgraph_node::get_create (fndecl);\n-  cgraph_node *clone = node->instrumented_version;\n-\n-  gcc_assert (!node->instrumentation_clone);\n-\n-  if (DECL_BUILT_IN (fndecl)\n-      && (DECL_BUILT_IN_CLASS (fndecl) != BUILT_IN_NORMAL\n-\t  || DECL_FUNCTION_CODE (fndecl) >= BEGIN_CHKP_BUILTINS))\n-    return NULL;\n-\n-  clone = node->instrumented_version;\n-\n-  /* Some instrumented builtin function calls may be optimized and\n-     cgraph nodes may be removed as unreachable.  Later optimizations\n-     may generate new calls to removed functions and in this case\n-     we have to recreate cgraph node.  FUNCTION_DECL for instrumented\n-     builtin still exists and should be reused in such case.  */\n-  if (DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL\n-      && fndecl == builtin_decl_explicit (DECL_FUNCTION_CODE (fndecl))\n-      && !clone)\n-    {\n-      enum built_in_function fncode = DECL_FUNCTION_CODE (fndecl);\n-      tree new_decl;\n-\n-      fncode = (enum built_in_function) (fncode + BEGIN_CHKP_BUILTINS + 1);\n-      new_decl = builtin_decl_explicit (fncode);\n-\n-      /* We've actually already created an instrumented clone once.\n-\t Restore it.  */\n-      if (new_decl)\n-\t{\n-\t  clone = cgraph_node::get (new_decl);\n-\n-\t  if (!clone)\n-\t    {\n-\t      gcc_assert (!gimple_has_body_p (fndecl));\n-\t      clone = cgraph_node::get_create (new_decl);\n-\t      clone->externally_visible = node->externally_visible;\n-\t      clone->local = node->local;\n-\t      clone->address_taken = node->address_taken;\n-\t      clone->thunk = node->thunk;\n-\t      clone->alias = node->alias;\n-\t      clone->weakref = node->weakref;\n-\t      clone->cpp_implicit_alias = node->cpp_implicit_alias;\n-\t      clone->orig_decl = fndecl;\n-\t      clone->instrumentation_clone = true;\n-\t    }\n-\n-\t  clone->instrumented_version = node;\n-\t  node->instrumented_version = clone;\n-\t}\n-    }\n-\n-  if (!clone)\n-    {\n-      tree new_decl = chkp_build_instrumented_fndecl (fndecl);\n-      struct cgraph_edge *e;\n-      struct ipa_ref *ref;\n-      int i;\n-\n-      clone = node->create_version_clone (new_decl, vNULL, NULL);\n-      clone->externally_visible = node->externally_visible;\n-      clone->local = node->local;\n-      clone->address_taken = node->address_taken;\n-      clone->thunk = node->thunk;\n-      clone->alias = node->alias;\n-      clone->weakref = node->weakref;\n-      clone->cpp_implicit_alias = node->cpp_implicit_alias;\n-      clone->instrumented_version = node;\n-      clone->orig_decl = fndecl;\n-      clone->instrumentation_clone = true;\n-      node->instrumented_version = clone;\n-\n-      if (gimple_has_body_p (fndecl))\n-\t{\n-\t  gcc_assert (chkp_instrumentable_p (fndecl));\n-\t  tree_function_versioning (fndecl, new_decl, NULL, false,\n-\t\t\t\t    NULL, false, NULL, NULL);\n-\t  clone->lowered = true;\n-\t}\n-\n-      /* New params are inserted after versioning because it\n-\t actually copies args list from the original decl.  */\n-      chkp_add_bounds_params_to_function (new_decl);\n-\n-      /* Remember builtin fndecl.  */\n-      if (DECL_BUILT_IN_CLASS (clone->decl) == BUILT_IN_NORMAL\n-\t  && fndecl == builtin_decl_explicit (DECL_FUNCTION_CODE (fndecl)))\n-\t{\n-\t  gcc_assert (!builtin_decl_explicit (DECL_FUNCTION_CODE (clone->decl)));\n-\t  set_builtin_decl (DECL_FUNCTION_CODE (clone->decl),\n-\t\t\t    clone->decl, false);\n-\t}\n-\n-      /* Clones have the same comdat group as originals.  */\n-      if (node->same_comdat_group\n-\t  || (DECL_ONE_ONLY (node->decl)\n-\t      && !DECL_EXTERNAL (node->decl)))\n-\tclone->add_to_same_comdat_group (node);\n-\n-      if (gimple_has_body_p (fndecl))\n-\tsymtab->call_cgraph_insertion_hooks (clone);\n-\n-      /* Clone all aliases.  */\n-      for (i = 0; node->iterate_direct_aliases (i, ref); i++)\n-\tchkp_maybe_create_clone (ref->referring->decl);\n-\n-      /* Clone all thunks.  */\n-      for (e = node->callers; e; e = e->next_caller)\n-\tif (e->caller->thunk.thunk_p\n-\t    && !e->caller->thunk.add_pointer_bounds_args\n-\t    && !e->caller->instrumentation_clone)\n-\t  {\n-\t    struct cgraph_node *thunk\n-\t      = chkp_maybe_create_clone (e->caller->decl);\n-\t    /* Redirect thunk clone edge to the node clone.  */\n-\t    thunk->callees->redirect_callee (clone);\n-\t  }\n-\n-      /* For aliases and thunks we should make sure target is cloned\n-\t to have proper references and edges.  */\n-      if (node->thunk.thunk_p)\n-\tchkp_maybe_create_clone (node->callees->callee->decl);\n-      else if (node->alias)\n-\t{\n-\t  struct cgraph_node *target;\n-\n-\t  ref = node->ref_list.first_reference ();\n-\t  if (ref)\n-\t    {\n-\t      target = chkp_maybe_create_clone (ref->referred->decl);\n-\t      clone->create_reference (target, IPA_REF_ALIAS);\n-\t    }\n-\n-\t  if (node->alias_target)\n-\t    {\n-\t      if (TREE_CODE (node->alias_target) == FUNCTION_DECL)\n-\t\t{\n-\t\t  target = chkp_maybe_create_clone (node->alias_target);\n-\t\t  clone->alias_target = target->decl;\n-\t\t}\n-\t      else\n-\t\tclone->alias_target = node->alias_target;\n-\t    }\n-\t}\n-\n-      /* Add IPA reference.  It's main role is to keep instrumented\n-\t version reachable while original node is reachable.  */\n-      ref = node->create_reference (clone, IPA_REF_CHKP, NULL);\n-    }\n-\n-  return clone;\n-}\n-\n-/* Create clone for all functions to be instrumented.  */\n-\n-static unsigned int\n-chkp_versioning (void)\n-{\n-  struct cgraph_node *node;\n-  const char *reason;\n-\n-  bitmap_obstack_initialize (NULL);\n-\n-  FOR_EACH_DEFINED_FUNCTION (node)\n-    {\n-      tree decl = node->decl;\n-      if (!node->instrumentation_clone\n-\t  && !node->instrumented_version\n-\t  && !node->alias\n-\t  && !node->thunk.thunk_p\n-\t  && (!DECL_BUILT_IN (decl)\n-\t      || (DECL_BUILT_IN_CLASS (decl) == BUILT_IN_NORMAL\n-\t\t  && DECL_FUNCTION_CODE (decl) < BEGIN_CHKP_BUILTINS)))\n-\t{\n-\t  if (chkp_instrumentable_p (decl))\n-\t    chkp_maybe_create_clone (decl);\n-\t  else if ((reason = copy_forbidden (DECL_STRUCT_FUNCTION (decl))))\n-\t    {\n-\t      if (warning_at (DECL_SOURCE_LOCATION (decl), OPT_Wchkp,\n-\t\t\t      \"function cannot be instrumented\"))\n-\t\tinform (DECL_SOURCE_LOCATION (decl), reason, decl);\n-\t    }\n-\t}\n-    }\n-\n-  /* Mark all aliases and thunks of functions with no instrumented\n-     version as legacy function.  */\n-  FOR_EACH_DEFINED_FUNCTION (node)\n-    {\n-      if (!node->instrumentation_clone\n-\t  && !node->instrumented_version\n-\t  && (node->alias || node->thunk.thunk_p)\n-\t  && !lookup_attribute (\"bnd_legacy\", DECL_ATTRIBUTES (node->decl)))\n-\tDECL_ATTRIBUTES (node->decl)\n-\t  = tree_cons (get_identifier (\"bnd_legacy\"), NULL,\n-\t\t       DECL_ATTRIBUTES (node->decl));\n-    }\n-\n-  bitmap_obstack_release (NULL);\n-\n-  return 0;\n-}\n-\n-/* In this pass we remove bodies of functions having\n-   instrumented version.  Functions with removed bodies\n-   become a special kind of thunks to provide a connection\n-   between calls to the original version and instrumented\n-   function.  */\n-\n-static unsigned int\n-chkp_produce_thunks (bool early)\n-{\n-  struct cgraph_node *node;\n-\n-  FOR_EACH_DEFINED_FUNCTION (node)\n-    {\n-      if (!node->instrumentation_clone\n-\t  && node->instrumented_version\n-\t  && gimple_has_body_p (node->decl)\n-\t  && gimple_has_body_p (node->instrumented_version->decl)\n-\t  && (!lookup_attribute (\"always_inline\", DECL_ATTRIBUTES (node->decl))\n-\t      || !early))\n-\t{\n-\t  node->release_body ();\n-\t  node->remove_callees ();\n-\t  node->remove_all_references ();\n-\n-\t  node->thunk.thunk_p = true;\n-\t  node->thunk.add_pointer_bounds_args = true;\n-\t  node->create_edge (node->instrumented_version, NULL,\n-\t\t\t     node->count);\n-\t  node->create_reference (node->instrumented_version,\n-\t\t\t       IPA_REF_CHKP, NULL);\n-\t  /* Thunk shouldn't be a cdtor.  */\n-\t  DECL_STATIC_CONSTRUCTOR (node->decl) = 0;\n-\t  DECL_STATIC_DESTRUCTOR (node->decl) = 0;\n-\t}\n-    }\n-\n-  /* Mark instrumentation clones created for aliases and thunks\n-     as insttrumented so they could be removed as unreachable\n-     now.  */\n-  if (!early)\n-    {\n-      FOR_EACH_DEFINED_FUNCTION (node)\n-      {\n-\tif (node->instrumentation_clone\n-\t    && (node->alias || node->thunk.thunk_p)\n-\t    && !chkp_function_instrumented_p (node->decl))\n-\t  chkp_function_mark_instrumented (node->decl);\n-      }\n-    }\n-\n-  return TODO_remove_functions;\n-}\n-\n-const pass_data pass_data_ipa_chkp_versioning =\n-{\n-  SIMPLE_IPA_PASS, /* type */\n-  \"chkp_versioning\", /* name */\n-  OPTGROUP_NONE, /* optinfo_flags */\n-  TV_NONE, /* tv_id */\n-  0, /* properties_required */\n-  0, /* properties_provided */\n-  0, /* properties_destroyed */\n-  0, /* todo_flags_start */\n-  0 /* todo_flags_finish */\n-};\n-\n-const pass_data pass_data_ipa_chkp_early_produce_thunks =\n-{\n-  SIMPLE_IPA_PASS, /* type */\n-  \"chkp_ecleanup\", /* name */\n-  OPTGROUP_NONE, /* optinfo_flags */\n-  TV_NONE, /* tv_id */\n-  0, /* properties_required */\n-  0, /* properties_provided */\n-  0, /* properties_destroyed */\n-  0, /* todo_flags_start */\n-  0 /* todo_flags_finish */\n-};\n-\n-const pass_data pass_data_ipa_chkp_produce_thunks =\n-{\n-  SIMPLE_IPA_PASS, /* type */\n-  \"chkp_cleanup\", /* name */\n-  OPTGROUP_NONE, /* optinfo_flags */\n-  TV_NONE, /* tv_id */\n-  0, /* properties_required */\n-  0, /* properties_provided */\n-  0, /* properties_destroyed */\n-  0, /* todo_flags_start */\n-  0 /* todo_flags_finish */\n-};\n-\n-class pass_ipa_chkp_versioning : public simple_ipa_opt_pass\n-{\n-public:\n-  pass_ipa_chkp_versioning (gcc::context *ctxt)\n-    : simple_ipa_opt_pass (pass_data_ipa_chkp_versioning, ctxt)\n-  {}\n-\n-  /* opt_pass methods: */\n-  virtual opt_pass * clone ()\n-    {\n-      return new pass_ipa_chkp_versioning (m_ctxt);\n-    }\n-\n-  virtual bool gate (function *)\n-    {\n-      return flag_check_pointer_bounds;\n-    }\n-\n-  virtual unsigned int execute (function *)\n-    {\n-      return chkp_versioning ();\n-    }\n-\n-}; // class pass_ipa_chkp_versioning\n-\n-class pass_ipa_chkp_early_produce_thunks : public simple_ipa_opt_pass\n-{\n-public:\n-  pass_ipa_chkp_early_produce_thunks (gcc::context *ctxt)\n-    : simple_ipa_opt_pass (pass_data_ipa_chkp_early_produce_thunks, ctxt)\n-  {}\n-\n-  /* opt_pass methods: */\n-  virtual opt_pass * clone ()\n-    {\n-      return new pass_ipa_chkp_early_produce_thunks (m_ctxt);\n-    }\n-\n-  virtual bool gate (function *)\n-    {\n-      return flag_check_pointer_bounds;\n-    }\n-\n-  virtual unsigned int execute (function *)\n-    {\n-      return chkp_produce_thunks (true);\n-    }\n-\n-}; // class pass_chkp_produce_thunks\n-\n-class pass_ipa_chkp_produce_thunks : public simple_ipa_opt_pass\n-{\n-public:\n-  pass_ipa_chkp_produce_thunks (gcc::context *ctxt)\n-    : simple_ipa_opt_pass (pass_data_ipa_chkp_produce_thunks, ctxt)\n-  {}\n-\n-  /* opt_pass methods: */\n-  virtual opt_pass * clone ()\n-    {\n-      return new pass_ipa_chkp_produce_thunks (m_ctxt);\n-    }\n-\n-  virtual bool gate (function *)\n-    {\n-      return flag_check_pointer_bounds;\n-    }\n-\n-  virtual unsigned int execute (function *)\n-    {\n-      return chkp_produce_thunks (false);\n-    }\n-\n-}; // class pass_chkp_produce_thunks\n-\n-simple_ipa_opt_pass *\n-make_pass_ipa_chkp_versioning (gcc::context *ctxt)\n-{\n-  return new pass_ipa_chkp_versioning (ctxt);\n-}\n-\n-simple_ipa_opt_pass *\n-make_pass_ipa_chkp_early_produce_thunks (gcc::context *ctxt)\n-{\n-  return new pass_ipa_chkp_early_produce_thunks (ctxt);\n-}\n-\n-simple_ipa_opt_pass *\n-make_pass_ipa_chkp_produce_thunks (gcc::context *ctxt)\n-{\n-  return new pass_ipa_chkp_produce_thunks (ctxt);\n-}"}, {"sha": "5693cba5f824dac1a27a1ea45877de43a3340320", "filename": "gcc/ipa-chkp.h", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Fipa-chkp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Fipa-chkp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-chkp.h?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,29 +0,0 @@\n-/* Declaration of interface functions of Pointer Bounds Checker.\n-   Copyright (C) 2014-2018 Free Software Foundation, Inc.\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify it under\n-the terms of the GNU General Public License as published by the Free\n-Software Foundation; either version 3, or (at your option) any later\n-version.\n-\n-GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GCC; see the file COPYING3.  If not see\n-<http://www.gnu.org/licenses/>.  */\n-\n-#ifndef GCC_IPA_CHKP_H\n-#define GCC_IPA_CHKP_H\n-\n-extern tree chkp_copy_function_type_adding_bounds (tree orig_type);\n-extern tree chkp_maybe_clone_builtin_fndecl (tree fndecl);\n-extern cgraph_node *chkp_maybe_create_clone (tree fndecl);\n-extern bool chkp_instrumentable_p (tree fndecl);\n-extern bool chkp_wrap_function (tree fndecl);\n-\n-#endif /* GCC_IPA_CHKP_H */"}, {"sha": "06611d3b5d79598beb045d49c86b1bd446e1385e", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 2, "deletions": 22, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -1177,7 +1177,7 @@ initialize_node_lattices (struct cgraph_node *node)\n   int i;\n \n   gcc_checking_assert (node->has_gimple_body_p ());\n-  if (cgraph_local_p (node))\n+  if (node->local.local)\n     {\n       int caller_count = 0;\n       node->call_for_symbol_thunks_and_aliases (count_callers, &caller_count,\n@@ -2271,24 +2271,6 @@ propagate_constants_across_call (struct cgraph_edge *cs)\n   if (parms_count == 0)\n     return false;\n \n-  /* No propagation through instrumentation thunks is available yet.\n-     It should be possible with proper mapping of call args and\n-     instrumented callee params in the propagation loop below.  But\n-     this case mostly occurs when legacy code calls instrumented code\n-     and it is not a primary target for optimizations.\n-     We detect instrumentation thunks in aliases and thunks chain by\n-     checking instrumentation_clone flag for chain source and target.\n-     Going through instrumentation thunks we always have it changed\n-     from 0 to 1 and all other nodes do not change it.  */\n-  if (!cs->callee->instrumentation_clone\n-      && callee->instrumentation_clone)\n-    {\n-      for (i = 0; i < parms_count; i++)\n-\tret |= set_all_contains_variable (ipa_get_parm_lattices (callee_info,\n-\t\t\t\t\t\t\t\t i));\n-      return ret;\n-    }\n-\n   /* If this call goes through a thunk we must not propagate to the first (0th)\n      parameter.  However, we might need to uncover a thunk from below a series\n      of aliases first.  */\n@@ -3967,9 +3949,7 @@ find_more_scalar_values_for_callers_subset (struct cgraph_node *node,\n \n \t  if (i >= ipa_get_cs_argument_count (IPA_EDGE_REF (cs))\n \t      || (i == 0\n-\t\t  && call_passes_through_thunk_p (cs))\n-\t      || (!cs->callee->instrumentation_clone\n-\t\t  && cs->callee->function_symbol ()->instrumentation_clone))\n+\t\t  && call_passes_through_thunk_p (cs)))\n \t    {\n \t      newval = NULL_TREE;\n \t      break;"}, {"sha": "b1b897aeb3ac26a66bf947376c836e0e88f17be7", "filename": "gcc/ipa-hsa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fipa-hsa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fipa-hsa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-hsa.c?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -113,7 +113,7 @@ process_hsa_functions (void)\n \t  TREE_PUBLIC (clone->decl) = TREE_PUBLIC (node->decl);\n \t  clone->externally_visible = node->externally_visible;\n \n-\t  if (!cgraph_local_p (node))\n+\t  if (!node->local.local)\n \t    clone->force_output = true;\n \t  hsa_summaries->link_functions (clone, node, HSA_FUNCTION, false);\n "}, {"sha": "ba39ea365740249a5c0c71ca1fcc9364058a274a", "filename": "gcc/ipa-icf-gimple.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fipa-icf-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fipa-icf-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-icf-gimple.c?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -754,8 +754,7 @@ func_checker::compare_gimple_call (gcall *s1, gcall *s2)\n       || gimple_call_return_slot_opt_p (s1) != gimple_call_return_slot_opt_p (s2)\n       || gimple_call_from_thunk_p (s1) != gimple_call_from_thunk_p (s2)\n       || gimple_call_va_arg_pack_p (s1) != gimple_call_va_arg_pack_p (s2)\n-      || gimple_call_alloca_for_var_p (s1) != gimple_call_alloca_for_var_p (s2)\n-      || gimple_call_with_bounds_p (s1) != gimple_call_with_bounds_p (s2))\n+      || gimple_call_alloca_for_var_p (s1) != gimple_call_alloca_for_var_p (s2))\n     return false;\n \n   if (gimple_call_internal_p (s1)"}, {"sha": "8958421993a3b00b26f385d48c6f972426147cdc", "filename": "gcc/ipa-icf.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fipa-icf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fipa-icf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-icf.c?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -1220,8 +1220,7 @@ sem_function::merge (sem_item *alias_item)\n \t are not interposable.  */\n       redirect_callers\n \t= alias->get_availability () > AVAIL_INTERPOSABLE\n-\t  && original->get_availability () > AVAIL_INTERPOSABLE\n-\t  && !alias->instrumented_version;\n+\t  && original->get_availability () > AVAIL_INTERPOSABLE;\n       /* TODO: We can redirect, but we need to produce alias of ORIGINAL\n \t with proper properties.  */\n       if (!sem_item::compare_referenced_symbol_properties (NULL, original, alias,"}, {"sha": "1d524a9cd4ff0d469706bb8581714e46a02d067a", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -2712,13 +2712,6 @@ early_inliner (function *fun)\n     node->verify ();\n   node->remove_all_references ();\n \n-  /* Rebuild this reference because it dosn't depend on\n-     function's body and it's required to pass cgraph_node\n-     verification.  */\n-  if (node->instrumented_version\n-      && !node->instrumentation_clone)\n-    node->create_reference (node->instrumented_version, IPA_REF_CHKP, NULL);\n-\n   /* Even when not optimizing or not inlining inline always-inline\n      functions.  */\n   inlined = inline_always_inline_functions (node);"}, {"sha": "1e0bcae626400a076535fb3977ab26db640761d2", "filename": "gcc/ipa-pure-const.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fipa-pure-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fipa-pure-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-pure-const.c?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -259,10 +259,6 @@ warn_function_noreturn (tree decl)\n {\n   tree original_decl = decl;\n \n-  cgraph_node *node = cgraph_node::get (decl);\n-  if (node->instrumentation_clone)\n-    decl = node->instrumented_version->decl;\n-\n   static hash_set<tree> *warned_about;\n   if (!lang_hooks.missing_noreturn_ok_p (decl)\n       && targetm.warn_func_return (decl))\n@@ -276,10 +272,6 @@ warn_function_cold (tree decl)\n {\n   tree original_decl = decl;\n \n-  cgraph_node *node = cgraph_node::get (decl);\n-  if (node->instrumentation_clone)\n-    decl = node->instrumented_version->decl;\n-\n   static hash_set<tree> *warned_about;\n   warned_about \n     = suggest_attribute (OPT_Wsuggest_attribute_cold, original_decl,\n@@ -1619,7 +1611,6 @@ propagate_pure_const (void)\n \t\t    fprintf (dump_file, \"    global var write\\n\");\n \t\t  break;\n \t\tcase IPA_REF_ADDR:\n-\t\tcase IPA_REF_CHKP:\n \t\t  break;\n \t\tdefault:\n \t\t  gcc_unreachable ();"}, {"sha": "4e22d85ac030a456f5d2b6ecd9f2a7051b80be0f", "filename": "gcc/ipa-ref.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fipa-ref.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fipa-ref.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-ref.h?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -32,8 +32,7 @@ enum GTY(()) ipa_ref_use\n   IPA_REF_LOAD,\n   IPA_REF_STORE,\n   IPA_REF_ADDR,\n-  IPA_REF_ALIAS,\n-  IPA_REF_CHKP\n+  IPA_REF_ALIAS\n };\n \n /* Record of reference in callgraph or varpool.  */"}, {"sha": "23d1df99bea1e9e9ac143988c5f402badad2d1db", "filename": "gcc/ipa-split.c", "status": "modified", "additions": 2, "deletions": 76, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fipa-split.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fipa-split.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-split.c?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -104,7 +104,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple-pretty-print.h\"\n #include \"ipa-fnsummary.h\"\n #include \"cfgloop.h\"\n-#include \"tree-chkp.h\"\n \n /* Per basic block info.  */\n \n@@ -151,7 +150,6 @@ struct split_point best_split_point;\n static bitmap forbidden_dominators;\n \n static tree find_retval (basic_block return_bb);\n-static tree find_retbnd (basic_block return_bb);\n \n /* Callback for walk_stmt_load_store_addr_ops.  If T is non-SSA automatic\n    variable, check it if it is present in bitmap passed via DATA.  */\n@@ -433,7 +431,6 @@ consider_split (struct split_point *current, bitmap non_ssa_vars,\n   gphi_iterator bsi;\n   unsigned int i;\n   tree retval;\n-  tree retbnd;\n   bool back_edge = false;\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n@@ -678,29 +675,6 @@ consider_split (struct split_point *current, bitmap non_ssa_vars,\n   else\n     current->split_part_set_retval = true;\n \n-  /* See if retbnd used by return bb is computed by header or split part.  */\n-  retbnd = find_retbnd (return_bb);\n-  if (retbnd)\n-    {\n-      bool split_part_set_retbnd\n-\t= split_part_set_ssa_name_p (retbnd, current, return_bb);\n-\n-      /* If we have both return value and bounds then keep their definitions\n-\t in a single function.  We use SSA names to link returned bounds and\n-\t value and therefore do not handle cases when result is passed by\n-\t reference (which should not be our case anyway since bounds are\n-\t returned for pointers only).  */\n-      if ((DECL_BY_REFERENCE (DECL_RESULT (current_function_decl))\n-\t   && current->split_part_set_retval)\n-\t  || split_part_set_retbnd != current->split_part_set_retval)\n-\t{\n-\t  if (dump_file && (dump_flags & TDF_DETAILS))\n-\t    fprintf (dump_file,\n-\t\t     \"  Refused: split point splits return value and bounds\\n\");\n-\t  return;\n-\t}\n-    }\n-\n   /* split_function fixes up at most one PHI non-virtual PHI node in return_bb,\n      for the return value.  If there are other PHIs, give up.  */\n   if (return_bb != EXIT_BLOCK_PTR_FOR_FN (cfun))\n@@ -830,18 +804,6 @@ find_retval (basic_block return_bb)\n   return NULL;\n }\n \n-/* Given return basic block RETURN_BB, see where return bounds are really\n-   stored.  */\n-static tree\n-find_retbnd (basic_block return_bb)\n-{\n-  gimple_stmt_iterator bsi;\n-  for (bsi = gsi_last_bb (return_bb); !gsi_end_p (bsi); gsi_prev (&bsi))\n-    if (gimple_code (gsi_stmt (bsi)) == GIMPLE_RETURN)\n-      return gimple_return_retbnd (gsi_stmt (bsi));\n-  return NULL;\n-}\n-\n /* Callback for walk_stmt_load_store_addr_ops.  If T is non-SSA automatic\n    variable, mark it as used in bitmap passed via DATA.\n    Return true when access to T prevents splitting the function.  */\n@@ -1228,8 +1190,7 @@ split_function (basic_block return_bb, struct split_point *split_point,\n   gcall *call, *tsan_func_exit_call = NULL;\n   edge e;\n   edge_iterator ei;\n-  tree retval = NULL, real_retval = NULL, retbnd = NULL;\n-  bool with_bounds = chkp_function_instrumented_p (current_function_decl);\n+  tree retval = NULL, real_retval = NULL;\n   gimple *last_stmt = NULL;\n   unsigned int i;\n   tree arg, ddef;\n@@ -1311,14 +1272,10 @@ split_function (basic_block return_bb, struct split_point *split_point,\n       e = make_single_succ_edge (new_return_bb, EXIT_BLOCK_PTR_FOR_FN (cfun), 0);\n       add_bb_to_loop (new_return_bb, current_loops->tree_root);\n       bitmap_set_bit (split_point->split_bbs, new_return_bb->index);\n-      retbnd = find_retbnd (return_bb);\n     }\n   /* When we pass around the value, use existing return block.  */\n   else\n-    {\n-      bitmap_set_bit (split_point->split_bbs, return_bb->index);\n-      retbnd = find_retbnd (return_bb);\n-    }\n+    bitmap_set_bit (split_point->split_bbs, return_bb->index);\n \n   /* If RETURN_BB has virtual operand PHIs, they must be removed and the\n      virtual operand marked for renaming as we change the CFG in a way that\n@@ -1434,11 +1391,6 @@ split_function (basic_block return_bb, struct split_point *split_point,\n \t}\n     }\n \n-  /* If the original function is instrumented then it's\n-     part is also instrumented.  */\n-  if (with_bounds)\n-    chkp_function_mark_instrumented (node->decl);\n-\n   /* If the original function is declared inline, there is no point in issuing\n      a warning for the non-inlinable part.  */\n   DECL_NO_INLINE_WARNING_P (node->decl) = 1;\n@@ -1474,7 +1426,6 @@ split_function (basic_block return_bb, struct split_point *split_point,\n \targs_to_pass[i] = arg;\n       }\n   call = gimple_build_call_vec (node->decl, args_to_pass);\n-  gimple_call_set_with_bounds (call, with_bounds);\n   gimple_set_block (call, DECL_INITIAL (current_function_decl));\n   args_to_pass.release ();\n \n@@ -1618,21 +1569,6 @@ split_function (basic_block return_bb, struct split_point *split_point,\n \t\t\t    }\n \t\t\t}\n \t\t    }\n-\n-\t\t  /* Replace retbnd with new one.  */\n-\t\t  if (retbnd)\n-\t\t    {\n-\t\t      gimple_stmt_iterator bsi;\n-\t\t      for (bsi = gsi_last_bb (return_bb); !gsi_end_p (bsi);\n-\t\t\t   gsi_prev (&bsi))\n-\t\t\tif (gimple_code (gsi_stmt (bsi)) == GIMPLE_RETURN)\n-\t\t\t  {\n-\t\t\t    retbnd = copy_ssa_name (retbnd, call);\n-\t\t\t    gimple_return_set_retbnd (gsi_stmt (bsi), retbnd);\n-\t\t\t    update_stmt (gsi_stmt (bsi));\n-\t\t\t    break;\n-\t\t\t  }\n-\t\t    }\n \t\t}\n \t      if (DECL_BY_REFERENCE (DECL_RESULT (current_function_decl)))\n \t\t{\n@@ -1653,9 +1589,6 @@ split_function (basic_block return_bb, struct split_point *split_point,\n \t\t      gsi_insert_after (&gsi, cpy, GSI_NEW_STMT);\n \t\t      retval = tem;\n \t\t    }\n-\t\t  /* Build bndret call to obtain returned bounds.  */\n-\t\t  if (retbnd)\n-\t\t    chkp_insert_retbnd_call (retbnd, retval, &gsi);\n \t\t  gimple_call_set_lhs (call, retval);\n \t\t  update_stmt (call);\n \t\t}\n@@ -1676,10 +1609,6 @@ split_function (basic_block return_bb, struct split_point *split_point,\n \t    {\n \t      retval = DECL_RESULT (current_function_decl);\n \n-\t      if (chkp_function_instrumented_p (current_function_decl)\n-\t\t  && BOUNDED_P (retval))\n-\t\tretbnd = create_tmp_reg (pointer_bounds_type_node);\n-\n \t      /* We use temporary register to hold value when aggregate_value_p\n \t\t is false.  Similarly for DECL_BY_REFERENCE we must avoid extra\n \t\t copy.  */\n@@ -1717,9 +1646,6 @@ split_function (basic_block return_bb, struct split_point *split_point,\n \t\t  gsi_insert_after (&gsi, g, GSI_NEW_STMT);\n \t\t}\n \t    }\n-\t  /* Build bndret call to obtain returned bounds.  */\n-\t  if (retbnd)\n-\t    chkp_insert_retbnd_call (retbnd, retval, &gsi);\n \t  if (tsan_func_exit_call)\n \t    gsi_insert_after (&gsi, tsan_func_exit_call, GSI_NEW_STMT);\n \t  ret = gimple_build_return (retval);"}, {"sha": "907dc9d0e2b03f90fe979554205469a87eca84a5", "filename": "gcc/ipa-visibility.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fipa-visibility.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fipa-visibility.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-visibility.c?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -245,10 +245,6 @@ cgraph_externally_visible_p (struct cgraph_node *node,\n   if (MAIN_NAME_P (DECL_NAME (node->decl)))\n     return true;\n \n-  if (node->instrumentation_clone\n-      && MAIN_NAME_P (DECL_NAME (node->orig_decl)))\n-    return true;\n-\n   return false;\n }\n "}, {"sha": "82fc334ec0be6f2501737779cf0b95ccb0eea538", "filename": "gcc/ipa.c", "status": "modified", "additions": 7, "deletions": 49, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fipa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fipa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa.c?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -240,13 +240,7 @@ walk_polymorphic_call_targets (hash_set<void *> *reachable_call_targets,\n \t  if (ipa_fn_summaries)\n \t    ipa_update_overall_fn_summary (node);\n \t  else if (edge->call_stmt)\n-\t    {\n-\t      edge->redirect_call_stmt_to_callee ();\n-\n-\t      /* Call to __builtin_unreachable shouldn't be instrumented.  */\n-\t      if (!targets.length ())\n-\t\tgimple_call_set_with_bounds (edge->call_stmt, false);\n-\t    }\n+\t    edge->redirect_call_stmt_to_callee ();\n \t}\n     }\n }\n@@ -462,20 +456,6 @@ symbol_table::remove_unreachable_nodes (FILE *file)\n \t      if (cnode->global.inlined_to)\n \t        body_needed_for_clonning.add (cnode->decl);\n \n-\t      /* For instrumentation clones we always need original\n-\t\t function node for proper LTO privatization.  */\n-\t      if (cnode->instrumentation_clone\n-\t\t  && cnode->definition)\n-\t\t{\n-\t\t  gcc_assert (cnode->instrumented_version || in_lto_p);\n-\t\t  if (cnode->instrumented_version)\n-\t\t    {\n-\t\t      enqueue_node (cnode->instrumented_version, &first,\n-\t\t\t\t    &reachable);\n-\t\t      reachable.add (cnode->instrumented_version);\n-\t\t    }\n-\t\t}\n-\n \t      /* For non-inline clones, force their origins to the boundary and ensure\n \t\t that body is not removed.  */\n \t      while (cnode->clone_of)\n@@ -643,8 +623,7 @@ symbol_table::remove_unreachable_nodes (FILE *file)\n \t    }\n \t  /* Keep body if it may be useful for constant folding.  */\n \t  if ((flag_wpa || flag_incremental_link == INCREMENTAL_LINK_LTO)\n-\t      || ((init = ctor_for_folding (vnode->decl)) == error_mark_node\n-\t          && !POINTER_BOUNDS_P (vnode->decl)))\n+\t      || ((init = ctor_for_folding (vnode->decl)) == error_mark_node))\n \t    vnode->remove_initializer ();\n \t  else\n \t    DECL_INITIAL (vnode->decl) = init;\n@@ -669,10 +648,7 @@ symbol_table::remove_unreachable_nodes (FILE *file)\n \t&& !node->used_from_other_partition)\n       {\n \tif (!node->call_for_symbol_and_aliases\n-\t    (has_addr_references_p, NULL, true)\n-\t    && (!node->instrumentation_clone\n-\t\t|| !node->instrumented_version\n-\t\t|| !node->instrumented_version->address_taken))\n+\t    (has_addr_references_p, NULL, true))\n \t  {\n \t    if (file)\n \t      fprintf (file, \" %s\", node->name ());\n@@ -740,8 +716,6 @@ process_references (varpool_node *vnode,\n \tprocess_references (dyn_cast<varpool_node *> (ref->referring), written,\n \t\t\t    address_taken, read, explicit_refs);\n \tbreak;\n-      case IPA_REF_CHKP:\n-\tgcc_unreachable ();\n       }\n }\n \n@@ -847,9 +821,8 @@ ipa_discover_readonly_nonaddressable_vars (void)\n }\n \n /* Generate and emit a static constructor or destructor.  WHICH must\n-   be one of 'I' (for a constructor), 'D' (for a destructor), 'P'\n-   (for chp static vars constructor) or 'B' (for chkp static bounds\n-   constructor).  BODY is a STATEMENT_LIST containing GENERIC\n+   be one of 'I' (for a constructor), 'D' (for a destructor).\n+   BODY is a STATEMENT_LIST containing GENERIC\n    statements.  PRIORITY is the initialization priority for this\n    constructor or destructor.\n \n@@ -912,20 +885,6 @@ cgraph_build_static_cdtor_1 (char which, tree body, int priority, bool final)\n       DECL_STATIC_CONSTRUCTOR (decl) = 1;\n       decl_init_priority_insert (decl, priority);\n       break;\n-    case 'P':\n-      DECL_STATIC_CONSTRUCTOR (decl) = 1;\n-      DECL_ATTRIBUTES (decl) = tree_cons (get_identifier (\"chkp ctor\"),\n-\t\t\t\t\t  NULL,\n-\t\t\t\t\t  NULL_TREE);\n-      decl_init_priority_insert (decl, priority);\n-      break;\n-    case 'B':\n-      DECL_STATIC_CONSTRUCTOR (decl) = 1;\n-      DECL_ATTRIBUTES (decl) = tree_cons (get_identifier (\"bnd_legacy\"),\n-\t\t\t\t\t  NULL,\n-\t\t\t\t\t  NULL_TREE);\n-      decl_init_priority_insert (decl, priority);\n-      break;\n     case 'D':\n       DECL_STATIC_DESTRUCTOR (decl) = 1;\n       decl_fini_priority_insert (decl, priority);\n@@ -943,9 +902,8 @@ cgraph_build_static_cdtor_1 (char which, tree body, int priority, bool final)\n }\n \n /* Generate and emit a static constructor or destructor.  WHICH must\n-   be one of 'I' (for a constructor), 'D' (for a destructor), 'P'\n-   (for chkp static vars constructor) or 'B' (for chkp static bounds\n-   constructor).  BODY is a STATEMENT_LIST containing GENERIC\n+   be one of 'I' (for a constructor) or 'D' (for a destructor).\n+   BODY is a STATEMENT_LIST containing GENERIC\n    statements.  PRIORITY is the initialization priority for this\n    constructor or destructor.  */\n "}, {"sha": "a57bda9437db6190c0d272619385e19be43ceed1", "filename": "gcc/lto-cgraph.c", "status": "modified", "additions": 3, "deletions": 68, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Flto-cgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Flto-cgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-cgraph.c?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -37,7 +37,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"pass_manager.h\"\n #include \"ipa-utils.h\"\n #include \"omp-offload.h\"\n-#include \"ipa-chkp.h\"\n #include \"stringpool.h\"\n #include \"attribs.h\"\n \n@@ -544,7 +543,6 @@ lto_output_node (struct lto_simple_output_block *ob, struct cgraph_node *node,\n \t\t/* When doing incremental link, we will get new resolution\n \t\t   info next time we process the file.  */\n \t\tflag_incremental_link ? LDPR_UNKNOWN : node->resolution);\n-  bp_pack_value (&bp, node->instrumentation_clone, 1);\n   bp_pack_value (&bp, node->split_part, 1);\n   streamer_write_bitpack (&bp);\n   streamer_write_data_stream (ob->main_stream, section, strlen (section) + 1);\n@@ -564,9 +562,6 @@ lto_output_node (struct lto_simple_output_block *ob, struct cgraph_node *node,\n     streamer_write_hwi_stream (ob->main_stream, node->get_init_priority ());\n   if (DECL_STATIC_DESTRUCTOR (node->decl))\n     streamer_write_hwi_stream (ob->main_stream, node->get_fini_priority ());\n-\n-  if (node->instrumentation_clone)\n-    lto_output_fn_decl_index (ob->decl_state, ob->main_stream, node->orig_decl);\n }\n \n /* Output the varpool NODE to OB. \n@@ -775,33 +770,11 @@ output_refs (lto_symtab_encoder_t encoder)\n     {\n       symtab_node *node = lto_symtab_encoder_deref (encoder, i);\n \n-      /* IPA_REF_ALIAS and IPA_REF_CHKP references are always preserved\n+      /* IPA_REF_ALIAS references are always preserved\n \t in the boundary.  Alias node can't have other references and\n \t can be always handled as if it's not in the boundary.  */\n       if (!node->alias && !lto_symtab_encoder_in_partition_p (encoder, node))\n-\t{\n-\t  cgraph_node *cnode = dyn_cast <cgraph_node *> (node);\n-\t  /* Output IPA_REF_CHKP reference.  */\n-\t  if (cnode\n-\t      && cnode->instrumented_version\n-\t      && !cnode->instrumentation_clone)\n-\t    {\n-\t      for (int i = 0; node->iterate_reference (i, ref); i++)\n-\t\tif (ref->use == IPA_REF_CHKP)\n-\t\t  {\n-\t\t    if (lto_symtab_encoder_lookup (encoder, ref->referred)\n-\t\t\t!= LCC_NOT_FOUND)\n-\t\t      {\n-\t\t\tint nref = lto_symtab_encoder_lookup (encoder, node);\n-\t\t\tstreamer_write_gcov_count_stream (ob->main_stream, 1);\n-\t\t\tstreamer_write_uhwi_stream (ob->main_stream, nref);\n-\t\t\tlto_output_ref (ob, ref, encoder);\n-\t\t      }\n-\t\t    break;\n-\t\t  }\n-\t    }\n-\t  continue;\n-\t}\n+\tcontinue;\n \n       count = node->ref_list.nreferences ();\n       if (count)\n@@ -913,8 +886,7 @@ compute_ltrans_boundary (lto_symtab_encoder_t in_encoder)\n \t      && (((vnode->ctor_useable_for_folding_p ()\n \t\t   && (!DECL_VIRTUAL_P (vnode->decl)\n \t\t       || !flag_wpa\n-\t\t       || flag_ltrans_devirtualize))\n-\t\t  || POINTER_BOUNDS_P (vnode->decl))))\n+\t\t       || flag_ltrans_devirtualize)))))\n \t    {\n \t      lto_set_symtab_encoder_encode_initializer (encoder, vnode);\n \t      create_references (encoder, vnode);\n@@ -1204,7 +1176,6 @@ input_overwrite_node (struct lto_file_decl_data *file_data,\n   node->parallelized_function = bp_unpack_value (bp, 1);\n   node->resolution = bp_unpack_enum (bp, ld_plugin_symbol_resolution,\n \t\t\t\t     LDPR_NUM_KNOWN);\n-  node->instrumentation_clone = bp_unpack_value (bp, 1);\n   node->split_part = bp_unpack_value (bp, 1);\n   gcc_assert (flag_ltrans\n \t      || (!node->in_other_partition\n@@ -1340,13 +1311,6 @@ input_node (struct lto_file_decl_data *file_data,\n   if (DECL_STATIC_DESTRUCTOR (node->decl))\n     node->set_fini_priority (streamer_read_hwi (ib));\n \n-  if (node->instrumentation_clone)\n-    {\n-      decl_index = streamer_read_uhwi (ib);\n-      fn_decl = lto_file_decl_data_get_fn_decl (file_data, decl_index);\n-      node->orig_decl = fn_decl;\n-    }\n-\n   return node;\n }\n \n@@ -1588,35 +1552,6 @@ input_cgraph_1 (struct lto_file_decl_data *file_data,\n \t      = dyn_cast<cgraph_node *> (nodes[ref]);\n \t  else\n \t    cnode->global.inlined_to = NULL;\n-\n-\t  /* Compute instrumented_version.  */\n-\t  if (cnode->instrumentation_clone)\n-\t    {\n-\t      gcc_assert (cnode->orig_decl);\n-\n-\t      cnode->instrumented_version = cgraph_node::get (cnode->orig_decl);\n-\t      if (cnode->instrumented_version)\n-\t\t{\n-\t\t  /* We may have multiple nodes for a single function which\n-\t\t     will be merged later.  To have a proper merge we need\n-\t\t     to keep instrumentation_version reference between nodes\n-\t\t     consistent: each instrumented_version reference should\n-\t\t     have proper reverse reference.  Thus don't break existing\n-\t\t     instrumented_version reference if it already exists.  */\n-\t\t  if (cnode->instrumented_version->instrumented_version)\n-\t\t    cnode->instrumented_version = NULL;\n-\t\t  else\n-\t\t    cnode->instrumented_version->instrumented_version = cnode;\n-\t\t}\n-\n-\t      /* Restore decl names reference except for wrapper functions.  */\n-\t      if (!chkp_wrap_function (cnode->orig_decl))\n-\t\t{\n-\t\t  tree name = DECL_ASSEMBLER_NAME (cnode->decl);\n-\t\t  IDENTIFIER_TRANSPARENT_ALIAS (name) = 1;\n-\t\t  TREE_CHAIN (name) = DECL_ASSEMBLER_NAME (cnode->orig_decl);\n-\t\t}\n-\t    }\n \t}\n \n       ref = (int) (intptr_t) node->same_comdat_group;"}, {"sha": "5cf1dce33c6533a6a3db0f784b392dbd2343fd2d", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -1,3 +1,11 @@\n+2018-06-08  Martin Liska  <mliska@suse.cz>\n+\n+\t* lto-partition.c (add_references_to_partition): Remove support\n+\tfor MPX (macros, related functions, fields in cgraph_node, ...).\n+\t(add_symbol_to_partition_1): Likewise.\n+\t(privatize_symbol_name): Likewise.\n+\t* lto-symtab.c (lto_cgraph_replace_node): Likewise.\n+\n 2018-06-05  Richard Biener  <rguenther@suse.de>\n \n \t* lto.c (cmp_type_location): Expand locations only once."}, {"sha": "e8207fb7230dbe577e91869f199199e7b232f279", "filename": "gcc/lto/lto-partition.c", "status": "modified", "additions": 1, "deletions": 31, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Flto%2Flto-partition.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Flto%2Flto-partition.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-partition.c?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -115,8 +115,7 @@ add_references_to_partition (ltrans_partition part, symtab_node *node)\n        references, too.  */\n     else if (is_a <varpool_node *> (ref->referred)\n \t     && (dyn_cast <varpool_node *> (ref->referred)\n-\t\t ->ctor_useable_for_folding_p ()\n-\t\t || POINTER_BOUNDS_P (ref->referred->decl))\n+\t\t ->ctor_useable_for_folding_p ())\n \t     && !lto_symtab_encoder_in_partition_p (part->encoder, ref->referred))\n       {\n \tif (!part->initializers_visited)\n@@ -185,11 +184,6 @@ add_symbol_to_partition_1 (ltrans_partition part, symtab_node *node)\n       for (e = cnode->callers; e; e = e->next_caller)\n \tif (e->caller->thunk.thunk_p && !e->caller->global.inlined_to)\n \t  add_symbol_to_partition_1 (part, e->caller);\n-\n-      /* Instrumented version is actually the same function.\n-\t Therefore put it into the same partition.  */\n-      if (cnode->instrumented_version)\n-\tadd_symbol_to_partition_1 (part, cnode->instrumented_version);\n     }\n \n   add_references_to_partition (part, node);\n@@ -1003,30 +997,6 @@ privatize_symbol_name (symtab_node *node)\n   if (!privatize_symbol_name_1 (node, node->decl))\n     return false;\n \n-  /* We could change name which is a target of transparent alias\n-     chain of instrumented function name.  Fix alias chain if so  .*/\n-  if (cgraph_node *cnode = dyn_cast <cgraph_node *> (node))\n-    {\n-      tree iname = NULL_TREE;\n-      if (cnode->instrumentation_clone)\n-\t{\n-\t  /* If we want to privatize instrumentation clone\n-\t     then we also need to privatize original function.  */\n-\t  if (cnode->instrumented_version)\n-\t    privatize_symbol_name (cnode->instrumented_version);\n-\t  else\n-\t    privatize_symbol_name_1 (cnode, cnode->orig_decl);\n-\t  iname = DECL_ASSEMBLER_NAME (cnode->decl);\n-\t  TREE_CHAIN (iname) = DECL_ASSEMBLER_NAME (cnode->orig_decl);\n-\t}\n-      else if (cnode->instrumented_version\n-\t       && cnode->instrumented_version->orig_decl == cnode->decl)\n-\t{\n-\t  iname = DECL_ASSEMBLER_NAME (cnode->instrumented_version->decl);\n-\t  TREE_CHAIN (iname) = DECL_ASSEMBLER_NAME (cnode->decl);\n-\t}\n-    }\n-\n   return true;\n }\n "}, {"sha": "b1df9bb77d13a450e621bd84daa94dc15e1d8005", "filename": "gcc/lto/lto-symtab.c", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Flto%2Flto-symtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Flto%2Flto-symtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-symtab.c?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -89,21 +89,6 @@ lto_cgraph_replace_node (struct cgraph_node *node,\n     }\n   /* Redirect incomming references.  */\n   prevailing_node->clone_referring (node);\n-\n-  /* Fix instrumentation references.  */\n-  if (node->instrumented_version)\n-    {\n-      gcc_assert (node->instrumentation_clone\n-\t\t  == prevailing_node->instrumentation_clone);\n-      node->instrumented_version->instrumented_version = prevailing_node;\n-      if (!prevailing_node->instrumented_version)\n-\tprevailing_node->instrumented_version = node->instrumented_version;\n-      /* Need to reset node->instrumented_version to NULL,\n-\t otherwise node removal code would reset\n-\t node->instrumented_version->instrumented_version.  */\n-      node->instrumented_version = NULL;\n-    }\n-\n   lto_free_function_in_decl_state_for_node (node);\n \n   if (node->decl != prevailing_node->decl)"}, {"sha": "a3906c268814bdc3a813416a60b9f666d1568f0a", "filename": "gcc/params.def", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -1238,12 +1238,6 @@ DEFPARAM (PARAM_UNINIT_CONTROL_DEP_ATTEMPTS,\n \t  \"during uninitialized variable analysis.\",\n \t  1000, 1, 0)\n \n-DEFPARAM (PARAM_CHKP_MAX_CTOR_SIZE,\n-\t  \"chkp-max-ctor-size\",\n-\t  \"Maximum number of statements to be included into a single static \"\n-\t  \"constructor generated by Pointer Bounds Checker.\",\n-\t  5000, 100, 0)\n-\n DEFPARAM (PARAM_FSM_SCALE_PATH_STMTS,\n \t  \"fsm-scale-path-stmts\",\n \t  \"Scale factor to apply to the number of statements in a threading path when comparing to the number of (scaled) blocks.\","}, {"sha": "ee42009b620eb764b5d41f936b51d794487e16b6", "filename": "gcc/passes.c", "status": "modified", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -117,8 +117,6 @@ void\n pass_manager::execute_early_local_passes ()\n {\n   execute_pass_list (cfun, pass_build_ssa_passes_1->sub);\n-  if (flag_check_pointer_bounds)\n-    execute_pass_list (cfun, pass_chkp_instrumentation_passes_1->sub);\n   execute_pass_list (cfun, pass_local_optimization_passes_1->sub);\n }\n \n@@ -432,36 +430,6 @@ class pass_build_ssa_passes : public simple_ipa_opt_pass\n \n }; // class pass_build_ssa_passes\n \n-const pass_data pass_data_chkp_instrumentation_passes =\n-{\n-  SIMPLE_IPA_PASS, /* type */\n-  \"chkp_passes\", /* name */\n-  OPTGROUP_NONE, /* optinfo_flags */\n-  TV_NONE, /* tv_id */\n-  0, /* properties_required */\n-  0, /* properties_provided */\n-  0, /* properties_destroyed */\n-  0, /* todo_flags_start */\n-  0, /* todo_flags_finish */\n-};\n-\n-class pass_chkp_instrumentation_passes : public simple_ipa_opt_pass\n-{\n-public:\n-  pass_chkp_instrumentation_passes (gcc::context *ctxt)\n-    : simple_ipa_opt_pass (pass_data_chkp_instrumentation_passes, ctxt)\n-  {}\n-\n-  /* opt_pass methods: */\n-  virtual bool gate (function *)\n-    {\n-      /* Don't bother doing anything if the program has errors.  */\n-      return (flag_check_pointer_bounds\n-\t      && !seen_error () && !in_lto_p);\n-    }\n-\n-}; // class pass_chkp_instrumentation_passes\n-\n const pass_data pass_data_local_optimization_passes =\n {\n   SIMPLE_IPA_PASS, /* type */\n@@ -499,12 +467,6 @@ make_pass_build_ssa_passes (gcc::context *ctxt)\n   return new pass_build_ssa_passes (ctxt);\n }\n \n-simple_ipa_opt_pass *\n-make_pass_chkp_instrumentation_passes (gcc::context *ctxt)\n-{\n-  return new pass_chkp_instrumentation_passes (ctxt);\n-}\n-\n simple_ipa_opt_pass *\n make_pass_local_optimization_passes (gcc::context *ctxt)\n {"}, {"sha": "2a8fbc2efbefcbe3da03a2466343cc3f355018be", "filename": "gcc/passes.def", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fpasses.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fpasses.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.def?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -51,8 +51,6 @@ along with GCC; see the file COPYING3.  If not see\n   INSERT_PASSES_AFTER (all_small_ipa_passes)\n   NEXT_PASS (pass_ipa_free_lang_data);\n   NEXT_PASS (pass_ipa_function_and_variable_visibility);\n-  NEXT_PASS (pass_ipa_chkp_versioning);\n-  NEXT_PASS (pass_ipa_chkp_early_produce_thunks);\n   NEXT_PASS (pass_build_ssa_passes);\n   PUSH_INSERT_PASSES_WITHIN (pass_build_ssa_passes)\n       NEXT_PASS (pass_fixup_cfg);\n@@ -64,13 +62,6 @@ along with GCC; see the file COPYING3.  If not see\n       NEXT_PASS (pass_rebuild_cgraph_edges);\n   POP_INSERT_PASSES ()\n \n-  NEXT_PASS (pass_chkp_instrumentation_passes);\n-  PUSH_INSERT_PASSES_WITHIN (pass_chkp_instrumentation_passes)\n-      NEXT_PASS (pass_fixup_cfg);\n-      NEXT_PASS (pass_chkp);\n-      NEXT_PASS (pass_rebuild_cgraph_edges);\n-  POP_INSERT_PASSES ()\n-\n   NEXT_PASS (pass_local_optimization_passes);\n   PUSH_INSERT_PASSES_WITHIN (pass_local_optimization_passes)\n       NEXT_PASS (pass_fixup_cfg);\n@@ -138,7 +129,6 @@ along with GCC; see the file COPYING3.  If not see\n   POP_INSERT_PASSES ()\n \n   NEXT_PASS (pass_target_clone);\n-  NEXT_PASS (pass_ipa_chkp_produce_thunks);\n   NEXT_PASS (pass_ipa_auto_profile);\n   NEXT_PASS (pass_ipa_tree_profile);\n   PUSH_INSERT_PASSES_WITHIN (pass_ipa_tree_profile)\n@@ -211,7 +201,6 @@ along with GCC; see the file COPYING3.  If not see\n       NEXT_PASS (pass_merge_phi);\n       NEXT_PASS (pass_thread_jumps);\n       NEXT_PASS (pass_vrp, true /* warn_array_bounds_p */);\n-      NEXT_PASS (pass_chkp_opt);\n       NEXT_PASS (pass_dce);\n       NEXT_PASS (pass_stdarg);\n       NEXT_PASS (pass_call_cdce);"}, {"sha": "0149349ce08fbb5dbcd26e9c3900f88003a547d5", "filename": "gcc/rtl-chkp.c", "status": "removed", "additions": 0, "deletions": 302, "changes": 302, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Frtl-chkp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Frtl-chkp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl-chkp.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,302 +0,0 @@\n-/* RTL manipulation functions exported by Pointer Bounds Checker.\n-   Copyright (C) 2014-2018 Free Software Foundation, Inc.\n-   Contributed by Ilya Enkovich (ilya.enkovich@intel.com)\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify it under\n-the terms of the GNU General Public License as published by the Free\n-Software Foundation; either version 3, or (at your option) any later\n-version.\n-\n-GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GCC; see the file COPYING3.  If not see\n-<http://www.gnu.org/licenses/>.  */\n-\n-#include \"config.h\"\n-#include \"system.h\"\n-#include \"coretypes.h\"\n-#include \"backend.h\"\n-#include \"target.h\"\n-#include \"rtl.h\"\n-#include \"tree.h\"\n-#include \"memmodel.h\"\n-#include \"emit-rtl.h\"\n-#include \"expr.h\"\n-#include \"rtl-chkp.h\"\n-#include \"tree-chkp.h\"\n-\n-static hash_map<tree, rtx> *chkp_rtx_bounds_map;\n-\n-/* Get bounds rtx associated with NODE via\n-   chkp_set_rtl_bounds call.  */\n-rtx\n-chkp_get_rtl_bounds (tree node)\n-{\n-  rtx *slot;\n-\n-  if (!chkp_rtx_bounds_map)\n-    return NULL_RTX;\n-\n-  slot = chkp_rtx_bounds_map->get (node);\n-  return slot ? *slot : NULL_RTX;\n-}\n-\n-/* Associate bounds rtx VAL with NODE.  */\n-void\n-chkp_set_rtl_bounds (tree node, rtx val)\n-{\n-  if (!chkp_rtx_bounds_map)\n-    chkp_rtx_bounds_map = new hash_map<tree, rtx>;\n-\n-  chkp_rtx_bounds_map->put (node, val);\n-}\n-\n-/* Reset all bounds stored via chkp_set_rtl_bounds.  */\n-void\n-chkp_reset_rtl_bounds ()\n-{\n-  if (!chkp_rtx_bounds_map)\n-    return;\n-\n-  delete chkp_rtx_bounds_map;\n-  chkp_rtx_bounds_map = NULL;\n-}\n-\n-/* Split SLOT identifying slot for function value or\n-   argument into two parts SLOT_VAL and SLOT_BND.\n-   First is the slot for regular value and the other one is\n-   for bounds.  */\n-void\n-chkp_split_slot (rtx slot, rtx *slot_val, rtx *slot_bnd)\n-{\n-  int i;\n-  int val_num = 0;\n-  int bnd_num = 0;\n-  rtx *val_tmps;\n-  rtx *bnd_tmps;\n-\n-  *slot_bnd = 0;\n-\n-  if (!slot\n-      || GET_CODE (slot) != PARALLEL)\n-    {\n-      *slot_val = slot;\n-      return;\n-    }\n-\n-  val_tmps = XALLOCAVEC (rtx, XVECLEN (slot, 0));\n-  bnd_tmps = XALLOCAVEC (rtx, XVECLEN (slot, 0));\n-\n-  for (i = 0; i < XVECLEN (slot, 0); i++)\n-    {\n-      rtx elem = XVECEXP (slot, 0, i);\n-      rtx reg = GET_CODE (elem) == EXPR_LIST ? XEXP (elem, 0) : elem;\n-\n-      if (!reg)\n-\tcontinue;\n-\n-      if (POINTER_BOUNDS_MODE_P (GET_MODE (reg)) || CONST_INT_P (reg))\n-\tbnd_tmps[bnd_num++] = elem;\n-      else\n-\tval_tmps[val_num++] = elem;\n-    }\n-\n-  gcc_assert (val_num);\n-\n-  if (!bnd_num)\n-    {\n-      *slot_val = slot;\n-      return;\n-    }\n-\n-  if ((GET_CODE (val_tmps[0]) == EXPR_LIST) || (val_num > 1))\n-    *slot_val = gen_rtx_PARALLEL (GET_MODE (slot),\n-\t\t\t\t  gen_rtvec_v (val_num, val_tmps));\n-  else\n-    *slot_val = val_tmps[0];\n-\n-  if ((GET_CODE (bnd_tmps[0]) == EXPR_LIST) || (bnd_num > 1))\n-    *slot_bnd = gen_rtx_PARALLEL (VOIDmode,\n-\t\t\t\t  gen_rtvec_v (bnd_num, bnd_tmps));\n-  else\n-    *slot_bnd = bnd_tmps[0];\n-}\n-\n-/* Join previously splitted to VAL and BND rtx for function\n-   value or argument and return it.  */\n-rtx\n-chkp_join_splitted_slot (rtx val, rtx bnd)\n-{\n-  rtx res;\n-  int i, n = 0;\n-\n-  if (!bnd)\n-    return val;\n-\n-  if (GET_CODE (val) == PARALLEL)\n-    n += XVECLEN (val, 0);\n-  else\n-    n++;\n-\n-  if (GET_CODE (bnd) == PARALLEL)\n-    n += XVECLEN (bnd, 0);\n-  else\n-    n++;\n-\n-  res = gen_rtx_PARALLEL (GET_MODE (val), rtvec_alloc (n));\n-\n-  n = 0;\n-\n-  if (GET_CODE (val) == PARALLEL)\n-    for (i = 0; i < XVECLEN (val, 0); i++)\n-      XVECEXP (res, 0, n++) = XVECEXP (val, 0, i);\n-  else\n-    XVECEXP (res, 0, n++) = val;\n-\n-  if (GET_CODE (bnd) == PARALLEL)\n-    for (i = 0; i < XVECLEN (bnd, 0); i++)\n-      XVECEXP (res, 0, n++) = XVECEXP (bnd, 0, i);\n-  else\n-    XVECEXP (res, 0, n++) = bnd;\n-\n-  return res;\n-}\n-\n-/* If PAR is PARALLEL holding registers then transform\n-   it into PARALLEL holding EXPR_LISTs of those regs\n-   and zero constant (similar to how function value\n-   on multiple registers looks like).  */\n-void\n-chkp_put_regs_to_expr_list (rtx par)\n-{\n-  int n;\n-\n-  if (GET_CODE (par) != PARALLEL\n-      || GET_CODE (XVECEXP (par, 0, 0)) == EXPR_LIST)\n-    return;\n-\n-  for (n = 0; n < XVECLEN (par, 0); n++)\n-    XVECEXP (par, 0, n) = gen_rtx_EXPR_LIST (VOIDmode,\n-\t\t\t\t\t     XVECEXP (par, 0, n),\n-\t\t\t\t\t     const0_rtx);\n-}\n-\n-/*  Search rtx PAR describing function return value for an\n-    item related to value at offset OFFS and return it.\n-    Return NULL if item was not found.  */\n-rtx\n-chkp_get_value_with_offs (rtx par, rtx offs)\n-{\n-  int n;\n-\n-  gcc_assert (GET_CODE (par) == PARALLEL);\n-\n-  for (n = 0; n < XVECLEN (par, 0); n++)\n-    {\n-      rtx par_offs = XEXP (XVECEXP (par, 0, n), 1);\n-      if (INTVAL (offs) == INTVAL (par_offs))\n-\treturn XEXP (XVECEXP (par, 0, n), 0);\n-    }\n-\n-  return NULL;\n-}\n-\n-/* Emit instructions to store BOUNDS for pointer VALUE\n-   stored in MEM.\n-   Function is used by expand to pass bounds for args\n-   passed on stack.  */\n-void\n-chkp_emit_bounds_store (rtx bounds, rtx value, rtx mem)\n-{\n-  gcc_assert (MEM_P (mem));\n-\n-  if (REG_P (bounds) || CONST_INT_P (bounds))\n-    {\n-      rtx ptr;\n-\n-      if (REG_P (value))\n-\tptr = value;\n-      else\n-\t{\n-\t  rtx slot = adjust_address (value, Pmode, 0);\n-\t  ptr = gen_reg_rtx (Pmode);\n-\t  emit_move_insn (ptr, slot);\n-\t}\n-\n-      if (CONST_INT_P (bounds))\n-\tbounds = targetm.calls.load_bounds_for_arg (value, ptr, bounds);\n-\n-      targetm.calls.store_bounds_for_arg (ptr, mem,\n-\t\t\t\t\t  bounds, NULL);\n-    }\n-  else\n-    {\n-      int i;\n-\n-      gcc_assert (GET_CODE (bounds) == PARALLEL);\n-      gcc_assert (GET_CODE (value) == PARALLEL || MEM_P (value) || REG_P (value));\n-\n-      for (i = 0; i < XVECLEN (bounds, 0); i++)\n-\t{\n-\t  rtx reg = XEXP (XVECEXP (bounds, 0, i), 0);\n-\t  rtx offs = XEXP (XVECEXP (bounds, 0, i), 1);\n-\t  rtx slot = adjust_address (mem, Pmode, INTVAL (offs));\n-\t  rtx ptr;\n-\n-\t  if (GET_CODE (value) == PARALLEL)\n-\t    ptr = chkp_get_value_with_offs (value, offs);\n-\t  else if (MEM_P (value))\n-\t    {\n-\t      rtx tmp = adjust_address (value, Pmode, INTVAL (offs));\n-\t      ptr = gen_reg_rtx (Pmode);\n-\t      emit_move_insn (ptr, tmp);\n-\t    }\n-\t  else\n-\t    ptr = gen_rtx_SUBREG (Pmode, value, INTVAL (offs));\n-\n-\t  targetm.calls.store_bounds_for_arg (ptr, slot, reg, NULL);\n-\t}\n-    }\n-}\n-\n-/* Emit code to copy bounds for structure VALUE of type TYPE\n-   copied to SLOT.  */\n-void\n-chkp_copy_bounds_for_stack_parm (rtx slot, rtx value, tree type)\n-{\n-  bitmap have_bound;\n-  bitmap_iterator bi;\n-  unsigned i;\n-  rtx tmp = NULL, bnd;\n-\n-  gcc_assert (TYPE_SIZE (type));\n-  gcc_assert (MEM_P (value));\n-  gcc_assert (MEM_P (slot));\n-  gcc_assert (RECORD_OR_UNION_TYPE_P (type));\n-\n-  bitmap_obstack_initialize (NULL);\n-  have_bound = BITMAP_ALLOC (NULL);\n-  chkp_find_bound_slots (type, have_bound);\n-\n-  EXECUTE_IF_SET_IN_BITMAP (have_bound, 0, i, bi)\n-    {\n-      rtx ptr = adjust_address (value, Pmode, i * POINTER_SIZE / 8);\n-      rtx to = adjust_address (slot, Pmode, i * POINTER_SIZE / 8);\n-\n-      if (!tmp)\n-\ttmp = gen_reg_rtx (Pmode);\n-\n-      emit_move_insn (tmp, ptr);\n-      bnd = targetm.calls.load_bounds_for_arg (ptr, tmp, NULL);\n-      targetm.calls.store_bounds_for_arg (tmp, to, bnd, NULL);\n-    }\n-\n-  BITMAP_FREE (have_bound);\n-  bitmap_obstack_release (NULL);\n-}"}, {"sha": "ac4f5cf167836eb4af28bc8a900c8b7c98d3c3e4", "filename": "gcc/rtl-chkp.h", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Frtl-chkp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Frtl-chkp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl-chkp.h?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,38 +0,0 @@\n-/* Declaration of interface functions of Pointer Bounds Checker.\n-   Copyright (C) 2014-2018 Free Software Foundation, Inc.\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify it under\n-the terms of the GNU General Public License as published by the Free\n-Software Foundation; either version 3, or (at your option) any later\n-version.\n-\n-GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GCC; see the file COPYING3.  If not see\n-<http://www.gnu.org/licenses/>.  */\n-\n-#ifndef GCC_RTL_CHKP_H\n-#define GCC_RTL_CHKP_H\n-\n-#define DECL_BOUNDS_RTL(NODE) (chkp_get_rtl_bounds (DECL_WRTL_CHECK (NODE)))\n-\n-#define SET_DECL_BOUNDS_RTL(NODE, VAL) \\\n-  (chkp_set_rtl_bounds (DECL_WRTL_CHECK (NODE), VAL))\n-\n-extern rtx chkp_get_rtl_bounds (tree node);\n-extern void chkp_set_rtl_bounds (tree node, rtx val);\n-extern void chkp_reset_rtl_bounds ();\n-extern void chkp_split_slot (rtx slot, rtx *slot_val, rtx *slot_bnd);\n-extern rtx chkp_join_splitted_slot (rtx val, rtx bnd);\n-extern rtx chkp_get_value_with_offs (rtx par, rtx offs);\n-extern void chkp_copy_bounds_for_stack_parm (rtx slot, rtx value, tree type);\n-extern void chkp_emit_bounds_store (rtx bounds, rtx value, rtx mem);\n-extern void chkp_put_regs_to_expr_list (rtx par);\n-\n-#endif /* GCC_RTL_CHKP_H */"}, {"sha": "bd610e28f436979099a7474fb7d20bdefef70e75", "filename": "gcc/rtl.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -321,7 +321,6 @@ struct GTY((desc(\"0\"), tag(\"0\"),\n      1 in a VALUE is SP_BASED_VALUE_P in cselib.c.\n      1 in a SUBREG generated by LRA for reload insns.\n      1 in a REG if this is a static chain register.\n-     1 in a CALL for calls instrumented by Pointer Bounds Checker.\n      Dumped as \"/j\" in RTL dumps.  */\n   unsigned int jump : 1;\n   /* In a CODE_LABEL, part of the two-bit alternate entry field.\n@@ -2515,10 +2514,6 @@ do {\t\t\t\t\t\t\t\t        \\\n #define LRA_SUBREG_P(RTX)\t\\\n   (RTL_FLAG_CHECK1 (\"LRA_SUBREG_P\", (RTX), SUBREG)->jump)\n \n-/* True if call is instrumented by Pointer Bounds Checker.  */\n-#define CALL_EXPR_WITH_BOUNDS_P(RTX) \\\n-  (RTL_FLAG_CHECK1 (\"CALL_EXPR_WITH_BOUNDS_P\", (RTX), CALL)->jump)\n-\n /* Access various components of an ASM_OPERANDS rtx.  */\n \n #define ASM_OPERANDS_TEMPLATE(RTX) XCSTR (RTX, 0, ASM_OPERANDS)"}, {"sha": "ad970019e0198ec5afea71b77c886728d82b4cb9", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -2389,11 +2389,6 @@ layout_type (tree type)\n       SET_TYPE_MODE (type, VOIDmode);\n       break;\n \n-    case POINTER_BOUNDS_TYPE:\n-      TYPE_SIZE (type) = bitsize_int (GET_MODE_BITSIZE (TYPE_MODE (type)));\n-      TYPE_SIZE_UNIT (type) = size_int (GET_MODE_SIZE (TYPE_MODE (type)));\n-      break;\n-\n     case OFFSET_TYPE:\n       TYPE_SIZE (type) = bitsize_int (POINTER_SIZE);\n       TYPE_SIZE_UNIT (type) = size_int (POINTER_SIZE_UNITS);"}, {"sha": "c5464cbe6d7e1a01ed26fe3092e6f32a863a6f49", "filename": "gcc/symtab.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fsymtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Fsymtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsymtab.c?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -39,7 +39,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"attribs.h\"\n #include \"builtins.h\"\n \n-static const char *ipa_ref_use_name[] = {\"read\",\"write\",\"addr\",\"alias\",\"chkp\"};\n+static const char *ipa_ref_use_name[] = {\"read\",\"write\",\"addr\",\"alias\"};\n \n const char * const ld_plugin_symbol_resolution_names[]=\n {"}, {"sha": "472a593c3466d5cd48a9c8c1d9c875cb22848f60", "filename": "gcc/target.def", "status": "modified", "additions": 0, "deletions": 110, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -2369,107 +2369,6 @@ built-in function.\",\n  (tree exp, rtx target, rtx subtarget, machine_mode mode, int ignore),\n  default_expand_builtin)\n \n-DEFHOOK\n-(builtin_chkp_function,\n- \"This hook allows target to redefine built-in functions used by\\n\\\n-Pointer Bounds Checker for code instrumentation.  Hook should return\\n\\\n-fndecl of function implementing generic builtin whose code is\\n\\\n-passed in @var{fcode}.  Currently following built-in functions are\\n\\\n-obtained using this hook:\\n\\\n-@deftypefn {Built-in Function} __bounds_type __chkp_bndmk (const void *@var{lb}, size_t @var{size})\\n\\\n-Function code - BUILT_IN_CHKP_BNDMK.  This built-in function is used\\n\\\n-by Pointer Bounds Checker to create bound values.  @var{lb} holds low\\n\\\n-bound of the resulting bounds.  @var{size} holds size of created bounds.\\n\\\n-@end deftypefn\\n\\\n-\\n\\\n-@deftypefn {Built-in Function} void __chkp_bndstx (const void *@var{ptr}, __bounds_type @var{b}, const void **@var{loc})\\n\\\n-Function code - @code{BUILT_IN_CHKP_BNDSTX}.  This built-in function is used\\n\\\n-by Pointer Bounds Checker to store bounds @var{b} for pointer @var{ptr}\\n\\\n-when @var{ptr} is stored by address @var{loc}.\\n\\\n-@end deftypefn\\n\\\n-\\n\\\n-@deftypefn {Built-in Function} __bounds_type __chkp_bndldx (const void **@var{loc}, const void *@var{ptr})\\n\\\n-Function code - @code{BUILT_IN_CHKP_BNDLDX}.  This built-in function is used\\n\\\n-by Pointer Bounds Checker to get bounds of pointer @var{ptr} loaded by\\n\\\n-address @var{loc}.\\n\\\n-@end deftypefn\\n\\\n-\\n\\\n-@deftypefn {Built-in Function} void __chkp_bndcl (const void *@var{ptr}, __bounds_type @var{b})\\n\\\n-Function code - @code{BUILT_IN_CHKP_BNDCL}.  This built-in function is used\\n\\\n-by Pointer Bounds Checker to perform check for pointer @var{ptr} against\\n\\\n-lower bound of bounds @var{b}.\\n\\\n-@end deftypefn\\n\\\n-\\n\\\n-@deftypefn {Built-in Function} void __chkp_bndcu (const void *@var{ptr}, __bounds_type @var{b})\\n\\\n-Function code - @code{BUILT_IN_CHKP_BNDCU}.  This built-in function is used\\n\\\n-by Pointer Bounds Checker to perform check for pointer @var{ptr} against\\n\\\n-upper bound of bounds @var{b}.\\n\\\n-@end deftypefn\\n\\\n-\\n\\\n-@deftypefn {Built-in Function} __bounds_type __chkp_bndret (void *@var{ptr})\\n\\\n-Function code - @code{BUILT_IN_CHKP_BNDRET}.  This built-in function is used\\n\\\n-by Pointer Bounds Checker to obtain bounds returned by a call statement.\\n\\\n-@var{ptr} passed to built-in is @code{SSA_NAME} returned by the call.\\n\\\n-@end deftypefn\\n\\\n-\\n\\\n-@deftypefn {Built-in Function} __bounds_type __chkp_intersect (__bounds_type @var{b1}, __bounds_type @var{b2})\\n\\\n-Function code - @code{BUILT_IN_CHKP_INTERSECT}.  This built-in function\\n\\\n-returns intersection of bounds @var{b1} and @var{b2}.\\n\\\n-@end deftypefn\\n\\\n-\\n\\\n-@deftypefn {Built-in Function} __bounds_type __chkp_narrow (const void *@var{ptr}, __bounds_type @var{b}, size_t @var{s})\\n\\\n-Function code - @code{BUILT_IN_CHKP_NARROW}.  This built-in function\\n\\\n-returns intersection of bounds @var{b} and\\n\\\n-[@var{ptr}, @var{ptr} + @var{s} - @code{1}].\\n\\\n-@end deftypefn\\n\\\n-\\n\\\n-@deftypefn {Built-in Function} size_t __chkp_sizeof (const void *@var{ptr})\\n\\\n-Function code - @code{BUILT_IN_CHKP_SIZEOF}.  This built-in function\\n\\\n-returns size of object referenced by @var{ptr}. @var{ptr} is always\\n\\\n-@code{ADDR_EXPR} of @code{VAR_DECL}.  This built-in is used by\\n\\\n-Pointer Bounds Checker when bounds of object cannot be computed statically\\n\\\n-(e.g. object has incomplete type).\\n\\\n-@end deftypefn\\n\\\n-\\n\\\n-@deftypefn {Built-in Function} const void *__chkp_extract_lower (__bounds_type @var{b})\\n\\\n-Function code - @code{BUILT_IN_CHKP_EXTRACT_LOWER}.  This built-in function\\n\\\n-returns lower bound of bounds @var{b}.\\n\\\n-@end deftypefn\\n\\\n-\\n\\\n-@deftypefn {Built-in Function} const void *__chkp_extract_upper (__bounds_type @var{b})\\n\\\n-Function code - @code{BUILT_IN_CHKP_EXTRACT_UPPER}.  This built-in function\\n\\\n-returns upper bound of bounds @var{b}.\\n\\\n-@end deftypefn\",\n- tree, (unsigned fcode),\n- default_builtin_chkp_function)\n-\n-DEFHOOK\n-(chkp_bound_type,\n- \"Return type to be used for bounds\",\n- tree, (void),\n- default_chkp_bound_type)\n-\n-DEFHOOK\n-(chkp_bound_mode,\n- \"Return mode to be used for bounds.\",\n- machine_mode, (void),\n- default_chkp_bound_mode)\n-\n-DEFHOOK\n-(chkp_make_bounds_constant,\n- \"Return constant used to statically initialize constant bounds\\n\\\n-with specified lower bound @var{lb} and upper bounds @var{ub}.\",\n- tree, (HOST_WIDE_INT lb, HOST_WIDE_INT ub),\n- default_chkp_make_bounds_constant)\n-\n-DEFHOOK\n-(chkp_initialize_bounds,\n- \"Generate a list of statements @var{stmts} to initialize pointer\\n\\\n-bounds variable @var{var} with bounds @var{lb} and @var{ub}.  Return\\n\\\n-the number of generated statements.\",\n- int, (tree var, tree lb, tree ub, tree *stmts),\n- default_chkp_initialize_bounds)\n-\n /* Select a replacement for a target-specific builtin.  This is done\n    *before* regular type checking, and so allows the target to\n    implement a crude form of function overloading.  The result is a\n@@ -4920,15 +4819,6 @@ aggregate data types, because these are returned in another way.  See\\n\\\n  rtx, (const_tree ret_type, const_tree fn_decl_or_type, bool outgoing),\n  default_function_value)\n \n-/* Return the rtx for bounds of returned pointer.  */\n-DEFHOOK\n-(chkp_function_value_bounds,\n- \"Define this to return an RTX representing the place where a function\\n\\\n-returns bounds for returned pointers.  Arguments meaning is similar to\\n\\\n-@code{TARGET_FUNCTION_VALUE}.\",\n- rtx, (const_tree ret_type, const_tree fn_decl_or_type, bool outgoing),\n- default_chkp_function_value_bounds)\n-\n /* Return the rtx for the result of a libcall of mode MODE,\n    calling the function FN_NAME.  */\n DEFHOOK"}, {"sha": "51b0dcac111cba45413223e3d44bf565956d23e4", "filename": "gcc/targhooks.c", "status": "modified", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -2222,53 +2222,6 @@ std_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n   return build_va_arg_indirect_ref (addr);\n }\n \n-tree\n-default_chkp_bound_type (void)\n-{\n-  tree res = make_node (POINTER_BOUNDS_TYPE);\n-  TYPE_PRECISION (res) = TYPE_PRECISION (size_type_node) * 2;\n-  TYPE_NAME (res) = get_identifier (\"__bounds_type\");\n-  SET_TYPE_MODE (res, targetm.chkp_bound_mode ());\n-  layout_type (res);\n-  return res;\n-}\n-\n-machine_mode\n-default_chkp_bound_mode (void)\n-{\n-  return VOIDmode;\n-}\n-\n-tree\n-default_builtin_chkp_function (unsigned int fcode ATTRIBUTE_UNUSED)\n-{\n-  return NULL_TREE;\n-}\n-\n-rtx\n-default_chkp_function_value_bounds (const_tree ret_type ATTRIBUTE_UNUSED,\n-\t\t\t\t    const_tree fn_decl_or_type ATTRIBUTE_UNUSED,\n-\t\t\t\t    bool outgoing ATTRIBUTE_UNUSED)\n-{\n-  gcc_unreachable ();\n-}\n-\n-tree\n-default_chkp_make_bounds_constant (HOST_WIDE_INT lb ATTRIBUTE_UNUSED,\n-\t\t\t\t   HOST_WIDE_INT ub ATTRIBUTE_UNUSED)\n-{\n-  return NULL_TREE;\n-}\n-\n-int\n-default_chkp_initialize_bounds (tree var ATTRIBUTE_UNUSED,\n-\t\t\t\ttree lb ATTRIBUTE_UNUSED,\n-\t\t\t\ttree ub ATTRIBUTE_UNUSED,\n-\t\t\t\ttree *stmts ATTRIBUTE_UNUSED)\n-{\n-  return 0;\n-}\n-\n void\n default_setup_incoming_vararg_bounds (cumulative_args_t ca ATTRIBUTE_UNUSED,\n \t\t\t\t      machine_mode mode ATTRIBUTE_UNUSED,"}, {"sha": "b6a8fa544f709ad1e5a63495fb97f321041ab727", "filename": "gcc/targhooks.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -266,13 +266,6 @@ extern rtx default_load_bounds_for_arg (rtx, rtx, rtx);\n extern void default_store_bounds_for_arg (rtx, rtx, rtx, rtx);\n extern rtx default_load_returned_bounds (rtx);\n extern void default_store_returned_bounds (rtx,rtx);\n-extern tree default_chkp_bound_type (void);\n-extern machine_mode default_chkp_bound_mode (void);\n-extern tree default_builtin_chkp_function (unsigned int);\n-extern rtx default_chkp_function_value_bounds (const_tree, const_tree, bool);\n-extern tree default_chkp_make_bounds_constant (HOST_WIDE_INT lb, HOST_WIDE_INT ub);\n-extern int default_chkp_initialize_bounds (tree var, tree lb, tree ub,\n-\t\t\t\t\t   tree *stmts);\n extern void default_setup_incoming_vararg_bounds (cumulative_args_t ca ATTRIBUTE_UNUSED,\n \t\t\t\t\t\t  machine_mode mode ATTRIBUTE_UNUSED,\n \t\t\t\t\t\t  tree type ATTRIBUTE_UNUSED,"}, {"sha": "c5510f140f6dbcb5ef4b49533617180c90ffcc2b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 391, "deletions": 0, "changes": 391, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -1,3 +1,394 @@\n+2018-06-08  Martin Liska  <mliska@suse.cz>\n+\n+\t* g++.dg/dg.exp: Do not use mpx.exp.\n+\t* g++.dg/lto/lto.exp: Likewise.\n+\t* g++.dg/lto/pr69729_0.C: Remove.\n+\t* g++.dg/opt/pr71529.C: Remove.\n+\t* g++.dg/pr63995-1.C: Remove.\n+\t* g++.dg/pr68270.C: Remove.\n+\t* g++.dg/pr71624.C: Remove.\n+\t* g++.dg/pr71633.C: Remove.\n+\t* g++.dg/pr79761.C: Remove.\n+\t* g++.dg/pr79764.C: Remove.\n+\t* g++.dg/pr79769.C: Remove.\n+\t* gcc.dg/lto/chkp-privatize-1_0.c: Remove.\n+\t* gcc.dg/lto/chkp-privatize-2_0.c: Remove.\n+\t* gcc.dg/lto/chkp-privatize_0.c: Remove.\n+\t* gcc.dg/lto/chkp-removed-alias_0.c: Remove.\n+\t* gcc.dg/lto/chkp-static-bounds_0.c: Remove.\n+\t* gcc.dg/lto/chkp-wrap-asm-name_0.c: Remove.\n+\t* gcc.dg/lto/lto.exp: Do not use mpx.exp.\n+\t* gcc.dg/lto/pr66221_0.c: Remove.\n+\t* gcc.target/i386/chkp-always_inline.c: Remove.\n+\t* gcc.target/i386/chkp-bndret.c: Remove.\n+\t* gcc.target/i386/chkp-builtins-1.c: Remove.\n+\t* gcc.target/i386/chkp-builtins-2.c: Remove.\n+\t* gcc.target/i386/chkp-builtins-3.c: Remove.\n+\t* gcc.target/i386/chkp-builtins-4.c: Remove.\n+\t* gcc.target/i386/chkp-const-check-1.c: Remove.\n+\t* gcc.target/i386/chkp-const-check-2.c: Remove.\n+\t* gcc.target/i386/chkp-hidden-def.c: Remove.\n+\t* gcc.target/i386/chkp-label-address.c: Remove.\n+\t* gcc.target/i386/chkp-lifetime-1.c: Remove.\n+\t* gcc.target/i386/chkp-narrow-bounds.c: Remove.\n+\t* gcc.target/i386/chkp-pr69044.c: Remove.\n+\t* gcc.target/i386/chkp-remove-bndint-1.c: Remove.\n+\t* gcc.target/i386/chkp-remove-bndint-2.c: Remove.\n+\t* gcc.target/i386/chkp-strchr.c: Remove.\n+\t* gcc.target/i386/chkp-strlen-1.c: Remove.\n+\t* gcc.target/i386/chkp-strlen-2.c: Remove.\n+\t* gcc.target/i386/chkp-strlen-3.c: Remove.\n+\t* gcc.target/i386/chkp-strlen-4.c: Remove.\n+\t* gcc.target/i386/chkp-strlen-5.c: Remove.\n+\t* gcc.target/i386/chkp-stropt-1.c: Remove.\n+\t* gcc.target/i386/chkp-stropt-10.c: Remove.\n+\t* gcc.target/i386/chkp-stropt-11.c: Remove.\n+\t* gcc.target/i386/chkp-stropt-12.c: Remove.\n+\t* gcc.target/i386/chkp-stropt-13.c: Remove.\n+\t* gcc.target/i386/chkp-stropt-14.c: Remove.\n+\t* gcc.target/i386/chkp-stropt-15.c: Remove.\n+\t* gcc.target/i386/chkp-stropt-16.c: Remove.\n+\t* gcc.target/i386/chkp-stropt-17.c: Remove.\n+\t* gcc.target/i386/chkp-stropt-2.c: Remove.\n+\t* gcc.target/i386/chkp-stropt-3.c: Remove.\n+\t* gcc.target/i386/chkp-stropt-4.c: Remove.\n+\t* gcc.target/i386/chkp-stropt-5.c: Remove.\n+\t* gcc.target/i386/chkp-stropt-6.c: Remove.\n+\t* gcc.target/i386/chkp-stropt-7.c: Remove.\n+\t* gcc.target/i386/chkp-stropt-8.c: Remove.\n+\t* gcc.target/i386/chkp-stropt-9.c: Remove.\n+\t* gcc.target/i386/i386.exp: Do not use mpx.exp.\n+\t* gcc.target/i386/indirect-thunk-11.c: Remove.\n+\t* gcc.target/i386/indirect-thunk-12.c: Remove.\n+\t* gcc.target/i386/indirect-thunk-attr-12.c: Remove.\n+\t* gcc.target/i386/indirect-thunk-attr-13.c: Remove.\n+\t* gcc.target/i386/indirect-thunk-bnd-1.c: Remove.\n+\t* gcc.target/i386/indirect-thunk-bnd-2.c: Remove.\n+\t* gcc.target/i386/indirect-thunk-bnd-3.c: Remove.\n+\t* gcc.target/i386/indirect-thunk-bnd-4.c: Remove.\n+\t* gcc.target/i386/interrupt-bnd-err-1.c: Remove.\n+\t* gcc.target/i386/interrupt-bnd-err-2.c: Remove.\n+\t* gcc.target/i386/mpx/alloca-1-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/alloca-1-nov.c: Remove.\n+\t* gcc.target/i386/mpx/alloca-1-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/arg-addr-1-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/arg-addr-1-nov.c: Remove.\n+\t* gcc.target/i386/mpx/arg-addr-1-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/bitfields-1-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/bitfields-1-nov.c: Remove.\n+\t* gcc.target/i386/mpx/bitfields-1-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/builtin-bnd-chk-ptr-bounds-1-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/builtin-bnd-chk-ptr-bounds-1-nov.c: Remove.\n+\t* gcc.target/i386/mpx/builtin-bnd-chk-ptr-bounds-1-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/builtin-bnd-chk-ptr-bounds-2.c: Remove.\n+\t* gcc.target/i386/mpx/builtin-bnd-chk-ptr-lbounds-1-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/builtin-bnd-chk-ptr-lbounds-1-nov.c: Remove.\n+\t* gcc.target/i386/mpx/builtin-bnd-chk-ptr-lbounds-2.c: Remove.\n+\t* gcc.target/i386/mpx/builtin-bnd-chk-ptr-ubounds-1-nov.c: Remove.\n+\t* gcc.target/i386/mpx/builtin-bnd-chk-ptr-ubounds-1-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/builtin-bnd-chk-ptr-ubounds-2.c: Remove.\n+\t* gcc.target/i386/mpx/builtin-bnd-copy-ptr-bounds-1.c: Remove.\n+\t* gcc.target/i386/mpx/builtin-bnd-copy-ptr-bounds-2-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/builtin-bnd-copy-ptr-bounds-2-nov.c: Remove.\n+\t* gcc.target/i386/mpx/builtin-bnd-copy-ptr-bounds-2-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/builtin-bnd-copy-ptr-bounds-3.c: Remove.\n+\t* gcc.target/i386/mpx/builtin-bnd-get-ptr-lbound-1.c: Remove.\n+\t* gcc.target/i386/mpx/builtin-bnd-get-ptr-lbound-2.c: Remove.\n+\t* gcc.target/i386/mpx/builtin-bnd-get-ptr-ubound-1.c: Remove.\n+\t* gcc.target/i386/mpx/builtin-bnd-get-ptr-ubound-2.c: Remove.\n+\t* gcc.target/i386/mpx/builtin-bnd-init-ptr-bounds-1.c: Remove.\n+\t* gcc.target/i386/mpx/builtin-bnd-init-ptr-bounds-2-nov.c: Remove.\n+\t* gcc.target/i386/mpx/builtin-bnd-init-ptr-bounds-3.c: Remove.\n+\t* gcc.target/i386/mpx/builtin-bnd-narrow-ptr-bounds-1.c: Remove.\n+\t* gcc.target/i386/mpx/builtin-bnd-narrow-ptr-bounds-2-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/builtin-bnd-narrow-ptr-bounds-2-nov.c: Remove.\n+\t* gcc.target/i386/mpx/builtin-bnd-narrow-ptr-bounds-2-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/builtin-bnd-narrow-ptr-bounds-3-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/builtin-bnd-narrow-ptr-bounds-3-nov.c: Remove.\n+\t* gcc.target/i386/mpx/builtin-bnd-narrow-ptr-bounds-3-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/builtin-bnd-narrow-ptr-bounds-4.c: Remove.\n+\t* gcc.target/i386/mpx/builtin-bnd-null-ptr-bounds-1-bbv.c: Remove.\n+\t* gcc.target/i386/mpx/builtin-bnd-set-ptr-bounds-1.c: Remove.\n+\t* gcc.target/i386/mpx/builtin-bnd-set-ptr-bounds-2-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/builtin-bnd-set-ptr-bounds-2-nov.c: Remove.\n+\t* gcc.target/i386/mpx/builtin-bnd-set-ptr-bounds-2-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/builtin-bnd-set-ptr-bounds-3.c: Remove.\n+\t* gcc.target/i386/mpx/builtin-bnd-store-ptr-bounds-1-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/builtin-bnd-store-ptr-bounds-1-nov.c: Remove.\n+\t* gcc.target/i386/mpx/builtin-bnd-store-ptr-bounds-1-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/builtin-bnd-store-ptr-bounds-2.c: Remove.\n+\t* gcc.target/i386/mpx/calloc-1-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/calloc-1-nov.c: Remove.\n+\t* gcc.target/i386/mpx/calloc-1-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/chkp-fix-calls-1.c: Remove.\n+\t* gcc.target/i386/mpx/chkp-fix-calls-2.c: Remove.\n+\t* gcc.target/i386/mpx/chkp-fix-calls-3.c: Remove.\n+\t* gcc.target/i386/mpx/chkp-fix-calls-4.c: Remove.\n+\t* gcc.target/i386/mpx/chkp-thunk-comdat-1.cc: Remove.\n+\t* gcc.target/i386/mpx/chkp-thunk-comdat-2.cc: Remove.\n+\t* gcc.target/i386/mpx/chkp-thunk-comdat-3.c: Remove.\n+\t* gcc.target/i386/mpx/fastcall-1-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/fastcall-1-nov.c: Remove.\n+\t* gcc.target/i386/mpx/fastcall-1-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/fastcall-2-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/fastcall-2-nov.c: Remove.\n+\t* gcc.target/i386/mpx/fastcall-2-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/field-addr-1-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/field-addr-1-nov.c: Remove.\n+\t* gcc.target/i386/mpx/field-addr-1-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/field-addr-10-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/field-addr-10-nov.c: Remove.\n+\t* gcc.target/i386/mpx/field-addr-10-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/field-addr-2-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/field-addr-2-nov.c: Remove.\n+\t* gcc.target/i386/mpx/field-addr-2-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/field-addr-3-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/field-addr-3-nov.c: Remove.\n+\t* gcc.target/i386/mpx/field-addr-3-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/field-addr-4-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/field-addr-4-nov.c: Remove.\n+\t* gcc.target/i386/mpx/field-addr-4-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/field-addr-5-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/field-addr-5-nov.c: Remove.\n+\t* gcc.target/i386/mpx/field-addr-5-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/field-addr-6-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/field-addr-6-nov.c: Remove.\n+\t* gcc.target/i386/mpx/field-addr-6-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/field-addr-7-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/field-addr-7-nov.c: Remove.\n+\t* gcc.target/i386/mpx/field-addr-7-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/field-addr-8-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/field-addr-8-nov.c: Remove.\n+\t* gcc.target/i386/mpx/field-addr-8-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/field-addr-9-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/field-addr-9-nov.c: Remove.\n+\t* gcc.target/i386/mpx/field-addr-9-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/frame-address-1-nov.c: Remove.\n+\t* gcc.target/i386/mpx/hard-reg-1-nov.c: Remove.\n+\t* gcc.target/i386/mpx/hard-reg-2-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/hard-reg-2-nov.c: Remove.\n+\t* gcc.target/i386/mpx/hard-reg-2-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/if-stmt-1-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/if-stmt-1-nov.c: Remove.\n+\t* gcc.target/i386/mpx/if-stmt-1-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/if-stmt-2-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/if-stmt-2-nov.c: Remove.\n+\t* gcc.target/i386/mpx/if-stmt-2-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/label-address-1.c: Remove.\n+\t* gcc.target/i386/mpx/legacy-1-nov.c: Remove.\n+\t* gcc.target/i386/mpx/macro.c: Remove.\n+\t* gcc.target/i386/mpx/malloc-1-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/malloc-1-nov.c: Remove.\n+\t* gcc.target/i386/mpx/malloc-1-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/memcpy-1.c: Remove.\n+\t* gcc.target/i386/mpx/memmove-1.c: Remove.\n+\t* gcc.target/i386/mpx/memmove-2.c: Remove.\n+\t* gcc.target/i386/mpx/memmove-zero-length.c: Remove.\n+\t* gcc.target/i386/mpx/mpx-check.h: Remove.\n+\t* gcc.target/i386/mpx/mpx-os-support.h: Remove.\n+\t* gcc.target/i386/mpx/mpx.exp: Remove.\n+\t* gcc.target/i386/mpx/nested-function-1-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/nested-function-1-nov.c: Remove.\n+\t* gcc.target/i386/mpx/nested-function-1-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/pointer-arg-1-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/pointer-arg-1-nov.c: Remove.\n+\t* gcc.target/i386/mpx/pointer-arg-1-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/pointer-arg-2-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/pointer-arg-2-nov.c: Remove.\n+\t* gcc.target/i386/mpx/pointer-arg-2-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/pointer-arg-3-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/pointer-arg-3-nov.c: Remove.\n+\t* gcc.target/i386/mpx/pointer-arg-3-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/pointer-arg-4-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/pointer-arg-4-nov.c: Remove.\n+\t* gcc.target/i386/mpx/pointer-arg-4-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/pointer-arg-5-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/pointer-arg-5-nov.c: Remove.\n+\t* gcc.target/i386/mpx/pointer-arg-5-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/pointer-diff-1.c: Remove.\n+\t* gcc.target/i386/mpx/pointer-store-1-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/pointer-store-1-nov.c: Remove.\n+\t* gcc.target/i386/mpx/pointer-store-1-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/pr65508.c: Remove.\n+\t* gcc.target/i386/mpx/pr65531.cc: Remove.\n+\t* gcc.target/i386/mpx/pr66048.cc: Remove.\n+\t* gcc.target/i386/mpx/pr66134.c: Remove.\n+\t* gcc.target/i386/mpx/pr66566.c: Remove.\n+\t* gcc.target/i386/mpx/pr66567.c: Remove.\n+\t* gcc.target/i386/mpx/pr66568.c: Remove.\n+\t* gcc.target/i386/mpx/pr66569.c: Remove.\n+\t* gcc.target/i386/mpx/pr66581.c: Remove.\n+\t* gcc.target/i386/mpx/pr68337-1.c: Remove.\n+\t* gcc.target/i386/mpx/pr68337-2.c: Remove.\n+\t* gcc.target/i386/mpx/pr68416.c: Remove.\n+\t* gcc.target/i386/mpx/pr78339.c: Remove.\n+\t* gcc.target/i386/mpx/pr79631.c: Remove.\n+\t* gcc.target/i386/mpx/pr79633.c: Remove.\n+\t* gcc.target/i386/mpx/pr79753.c: Remove.\n+\t* gcc.target/i386/mpx/pr79770.c: Remove.\n+\t* gcc.target/i386/mpx/pr79987.c: Remove.\n+\t* gcc.target/i386/mpx/pr79988.c: Remove.\n+\t* gcc.target/i386/mpx/realloc-1-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/realloc-1-nov.c: Remove.\n+\t* gcc.target/i386/mpx/realloc-1-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/realloc-2-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/realloc-2-nov.c: Remove.\n+\t* gcc.target/i386/mpx/realloc-2-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/reference-1-lbv.cpp: Remove.\n+\t* gcc.target/i386/mpx/reference-1-nov.cpp: Remove.\n+\t* gcc.target/i386/mpx/reference-1-ubv.cpp: Remove.\n+\t* gcc.target/i386/mpx/reference-2-lbv.cpp: Remove.\n+\t* gcc.target/i386/mpx/reference-2-nov.cpp: Remove.\n+\t* gcc.target/i386/mpx/reference-2-ubv.cpp: Remove.\n+\t* gcc.target/i386/mpx/reference-3-lbv.cpp: Remove.\n+\t* gcc.target/i386/mpx/reference-3-nov.cpp: Remove.\n+\t* gcc.target/i386/mpx/reference-3-ubv.cpp: Remove.\n+\t* gcc.target/i386/mpx/reference-4-lbv.cpp: Remove.\n+\t* gcc.target/i386/mpx/reference-4-nov.cpp: Remove.\n+\t* gcc.target/i386/mpx/reference-4-ubv.cpp: Remove.\n+\t* gcc.target/i386/mpx/return-pointer-1-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/return-pointer-1-nov.c: Remove.\n+\t* gcc.target/i386/mpx/return-pointer-1-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/return-struct-1-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/return-struct-1-nov.c: Remove.\n+\t* gcc.target/i386/mpx/return-struct-1-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/return-struct-2-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/return-struct-2-nov.c: Remove.\n+\t* gcc.target/i386/mpx/return-struct-2-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/return-struct-3-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/return-struct-3-nov.c: Remove.\n+\t* gcc.target/i386/mpx/return-struct-3-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/return-struct-4-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/return-struct-4-nov.c: Remove.\n+\t* gcc.target/i386/mpx/return-struct-4-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/return-struct-5-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/return-struct-5-nov.c: Remove.\n+\t* gcc.target/i386/mpx/return-struct-5-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/return-struct-6-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/return-struct-6-nov.c: Remove.\n+\t* gcc.target/i386/mpx/return-struct-6-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/sincos-1-nov.c: Remove.\n+\t* gcc.target/i386/mpx/static-array-1-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/static-array-1-nov.c: Remove.\n+\t* gcc.target/i386/mpx/static-array-1-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/static-init-1-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/static-init-1-nov.c: Remove.\n+\t* gcc.target/i386/mpx/static-init-1-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/static-init-2-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/static-init-2-nov.c: Remove.\n+\t* gcc.target/i386/mpx/static-init-2-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/static-init-3-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/static-init-3-nov.c: Remove.\n+\t* gcc.target/i386/mpx/static-init-3-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/static-init-4-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/static-init-4-nov.c: Remove.\n+\t* gcc.target/i386/mpx/static-init-4-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/static-init-5-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/static-init-5-nov.c: Remove.\n+\t* gcc.target/i386/mpx/static-init-5-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/static-init-6-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/static-init-6-nov.c: Remove.\n+\t* gcc.target/i386/mpx/static-init-6-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/static-string-1-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/static-string-1-nov.c: Remove.\n+\t* gcc.target/i386/mpx/static-string-1-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/struct-arg-1-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/struct-arg-1-nov.c: Remove.\n+\t* gcc.target/i386/mpx/struct-arg-1-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/struct-arg-10-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/struct-arg-10-nov.c: Remove.\n+\t* gcc.target/i386/mpx/struct-arg-10-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/struct-arg-2-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/struct-arg-2-nov.c: Remove.\n+\t* gcc.target/i386/mpx/struct-arg-2-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/struct-arg-3-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/struct-arg-3-nov.c: Remove.\n+\t* gcc.target/i386/mpx/struct-arg-3-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/struct-arg-4-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/struct-arg-4-nov.c: Remove.\n+\t* gcc.target/i386/mpx/struct-arg-4-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/struct-arg-5-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/struct-arg-5-nov.c: Remove.\n+\t* gcc.target/i386/mpx/struct-arg-5-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/struct-arg-6-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/struct-arg-6-nov.c: Remove.\n+\t* gcc.target/i386/mpx/struct-arg-6-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/struct-arg-7-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/struct-arg-7-nov.c: Remove.\n+\t* gcc.target/i386/mpx/struct-arg-7-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/struct-arg-8-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/struct-arg-8-nov.c: Remove.\n+\t* gcc.target/i386/mpx/struct-arg-8-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/struct-arg-9-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/struct-arg-9-nov.c: Remove.\n+\t* gcc.target/i386/mpx/struct-arg-9-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/struct-copy-1-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/struct-copy-1-nov.c: Remove.\n+\t* gcc.target/i386/mpx/struct-copy-1-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/struct-copy-2-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/struct-copy-2-nov.c: Remove.\n+\t* gcc.target/i386/mpx/struct-copy-2-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/thread-local-var-1-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/thread-local-var-1-nov.c: Remove.\n+\t* gcc.target/i386/mpx/thread-local-var-1-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/union-arg-1-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/union-arg-1-nov.c: Remove.\n+\t* gcc.target/i386/mpx/union-arg-1-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/va-arg-pack-1-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/va-arg-pack-1-nov.c: Remove.\n+\t* gcc.target/i386/mpx/va-arg-pack-1-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/va-arg-pack-2-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/va-arg-pack-2-nov.c: Remove.\n+\t* gcc.target/i386/mpx/va-arg-pack-2-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/vararg-1-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/vararg-1-nov.c: Remove.\n+\t* gcc.target/i386/mpx/vararg-1-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/vararg-2-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/vararg-2-nov.c: Remove.\n+\t* gcc.target/i386/mpx/vararg-2-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/vararg-3-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/vararg-3-nov.c: Remove.\n+\t* gcc.target/i386/mpx/vararg-3-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/vararg-4-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/vararg-4-nov.c: Remove.\n+\t* gcc.target/i386/mpx/vararg-4-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/vararg-5-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/vararg-5-nov.c: Remove.\n+\t* gcc.target/i386/mpx/vararg-5-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/vararg-6-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/vararg-6-nov.c: Remove.\n+\t* gcc.target/i386/mpx/vararg-6-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/vararg-7-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/vararg-7-nov.c: Remove.\n+\t* gcc.target/i386/mpx/vararg-7-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/vararg-8-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/vararg-8-nov.c: Remove.\n+\t* gcc.target/i386/mpx/vararg-8-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/vla-1-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/vla-1-nov.c: Remove.\n+\t* gcc.target/i386/mpx/vla-1-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/vla-2-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/vla-2-nov.c: Remove.\n+\t* gcc.target/i386/mpx/vla-2-ubv.c: Remove.\n+\t* gcc.target/i386/mpx/vla-trailing-1-lbv.c: Remove.\n+\t* gcc.target/i386/mpx/vla-trailing-1-nov.c: Remove.\n+\t* gcc.target/i386/mpx/vla-trailing-1-ubv.c: Remove.\n+\t* gcc.target/i386/pr63995-2.c: Remove.\n+\t* gcc.target/i386/pr64805.c: Remove.\n+\t* gcc.target/i386/pr65044.c: Remove.\n+\t* gcc.target/i386/pr65167.c: Remove.\n+\t* gcc.target/i386/pr65183.c: Remove.\n+\t* gcc.target/i386/pr65184.c: Remove.\n+\t* gcc.target/i386/pr65523.c: Remove.\n+\t* gcc.target/i386/pr70876.c: Remove.\n+\t* gcc.target/i386/pr70877.c: Remove.\n+\t* gcc.target/i386/pr71458.c: Remove.\n+\t* gcc.target/i386/pr80880.c: Remove.\n+\t* gcc.target/i386/ret-thunk-25.c: Remove.\n+\t* gcc.target/i386/thunk-retbnd.c: Remove.\n+\t* lib/mpx-dg.exp: Remove.\n+\t* gcc.target/i386/funcspec-56.inc: Adjust test case.\n+\n 2018-06-07  Carl Love  <cel@us.ibm.com>\n \n \t* gcc.target/powerpc/builtins-3-p9-runnable.c: Add debug print"}, {"sha": "fce96a63fbab5947112bbc8a7e4b600a89f5c288", "filename": "gcc/testsuite/g++.dg/dg.exp", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdg.exp?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -18,7 +18,6 @@\n \n # Load support procs.\n load_lib g++-dg.exp\n-load_lib mpx-dg.exp\n \n # If a testcase doesn't have special options, use these.\n global DEFAULT_CXXFLAGS"}, {"sha": "eeb5e432d09d0e8bc27f8e2a675e2393b078c5b2", "filename": "gcc/testsuite/g++.dg/lto/lto.exp", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Flto.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Flto.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Flto.exp?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -31,7 +31,6 @@ if $tracelevel then {\n load_lib standard.exp\n load_lib g++.exp\n load_lib target-libpath.exp\n-load_lib mpx-dg.exp\n \n # Load the language-independent compabibility support procedures.\n load_lib lto.exp\n@@ -43,7 +42,6 @@ if { ![check_effective_target_lto] } {\n \n g++_init\n lto_init no-mathlib\n-mpx_init\n \n # Define an identifier for use with this suite to avoid name conflicts\n # with other lto tests running at the same time.\n@@ -59,5 +57,4 @@ foreach src [lsort [find $srcdir/$subdir *_0.\\[cC\\]]] {\n     lto-execute $src $sid\n }\n \n-mpx_finish\n lto_finish"}, {"sha": "b736406e0cbed20ae89c0784b0c15eb82382da09", "filename": "gcc/testsuite/g++.dg/lto/pr69729_0.C", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr69729_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr69729_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr69729_0.C?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,35 +0,0 @@\n-/* { dg-lto-do link } */\n-/* { dg-require-effective-target mpx } */\n-/* { dg-lto-options {{-fcheck-pointer-bounds -mmpx -flto -flto-partition=max}} } */\n-\n-class cl1\n-{\n- public:\n-  virtual ~cl1 () { };\n-};\n-\n-class cl2\n-{\n- public:\n-  virtual ~cl2 () { };\n-};\n-\n-class cl3 : cl1, cl2\n-{\n-};\n-\n-class cl4 : cl3\n-{\n- public:\n-  ~cl4 ();\n-};\n-\n-cl4::~cl4 ()\n-{\n-}\n-\n-int main (int argc, char **argv)\n-{\n-  cl4 c;\n-  return 0;\n-}"}, {"sha": "148527f00c421883d46005e9a74304a953afdd6b", "filename": "gcc/testsuite/g++.dg/opt/pr71529.C", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr71529.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr71529.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr71529.C?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,22 +0,0 @@\n-// PR middle-end/71529\n-// { dg-do compile { target { { i?86-*-* x86_64-*-* } && { ! x32 } } } }\n-// { dg-options \"-fcheck-pointer-bounds -mmpx -O2\" }\n-\n-class c1\n-{\n- public:\n-  virtual ~c1 ();\n-};\n-\n-class c2\n-{\n- public:\n-  virtual ~c2 ();\n-};\n-\n-class c3 : c1, c2 { };\n-\n-int main (int, char **)\n-{\n-  c3 obj;\n-}"}, {"sha": "41a1c01153bcdcd15ee755c00bce3c83770a99ff", "filename": "gcc/testsuite/g++.dg/pr63995-1.C", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr63995-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr63995-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr63995-1.C?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,15 +0,0 @@\n-/* { dg-do compile { target { { i?86-*-* x86_64-*-* } && { ! x32 } } } } */\n-/* { dg-options \"-O2 -g -fcheck-pointer-bounds -mmpx\" } */\n-\n-int test1 (int i)\n-{\n-  extern const int arr[10];\n-  return arr[i];\n-}\n-\n-extern const int arr[10];\n-\n-int test2 (int i)\n-{\n-  return arr[i];\n-}"}, {"sha": "441fca3e85fd97c749c117c73a4e248e28055e91", "filename": "gcc/testsuite/g++.dg/pr68270.C", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr68270.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr68270.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr68270.C?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,16 +0,0 @@\n-/* PR71633 */\n-/* { dg-do compile { target { { i?86-*-* x86_64-*-* } && { ! x32 } } } } */\n-/* { dg-options \"-Werror=chkp -mmpx -fcheck-pointer-bounds -O1 -fchkp-flexible-struct-trailing-arrays\" } */\n-\n-struct a\n-{\n-  struct\n-  {\n-    int e[1];\n-  } f;\n-};\n-\n-int g(a *ptr)\n-{\n-  return ptr->f.e[1];\n-}"}, {"sha": "951534ce875147ef0d40f9894f8334a7db14a484", "filename": "gcc/testsuite/g++.dg/pr71624.C", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr71624.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr71624.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr71624.C?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,35 +0,0 @@\n-/* PR71624 */\n-/* { dg-do compile { target { { i?86-*-* x86_64-*-* } && { ! x32 } } } } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx -O2\" } */\n-\n-class c1\n-{\n-public:\n-  virtual int fn1 () const;\n-  int fn2 (const int *) const;\n-};\n-\n-class c2\n-{\n-  int fn1 ();\n-  c1 obj;\n-};\n-\n-int\n-c1::fn1 () const\n-{\n-  return 0;\n-}\n-\n-int\n-c1::fn2 (const int *) const\n-{\n-  return this->fn1 ();\n-}\n-\n-int\n-c2::fn1 ()\n-{\n-  return obj.fn2 (0);\n-}\n-"}, {"sha": "8852695b910a00c0e9eb6bca4fa3774cf0f8fbae", "filename": "gcc/testsuite/g++.dg/pr71633.C", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr71633.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr71633.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr71633.C?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,29 +0,0 @@\n-/* PR71633 */\n-/* { dg-do compile { target { { i?86-*-* x86_64-*-* } && { ! x32 } } } } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx -O2\" } */\n-\n-class c1\n-{\n-  virtual void fn1 ();\n-};\n-\n-class c2\n-{\n-  virtual int *fn2 () const;\n-};\n-\n-class c3 : c1, c2\n-{\n-  int *fn2 () const;\n-  int *fn3 (int) const;\n-};\n-\n-int *c3::fn2 () const\n-{\n-  return 0;\n-}\n-\n-int *c3::fn3 (int p) const\n-{\n-  return fn3 (p);\n-}"}, {"sha": "a97325a1fc4db45159ff400ee7b012c813cbc6bd", "filename": "gcc/testsuite/g++.dg/pr79761.C", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr79761.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr79761.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr79761.C?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,34 +0,0 @@\n-/* { dg-do compile { target { { i?86-*-* x86_64-*-* } && { ! x32 } } } } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx -mabi=ms\" } */\n-\n-struct Foo\n-{\n-  Foo() : a(1), b(1), c('a') {}\n-  int a;\n-  int b;\n-  char c;\n-};\n-\n-static Foo copy_foo(Foo) __attribute__((noinline, noclone));\n-\n-static Foo copy_foo(Foo A)\n-{\n-  return A;\n-}\n-\n-struct Bar : Foo\n-{\n-  Bar(Foo t) : Foo(copy_foo(t)) {}\n-};\n-\n-Foo F;\n-\n-int main (void)\n-{\n-  Bar B (F);\n-\n-  if (B.a != 1 || B.b != 1 || B.c != 'a')\n-    __builtin_abort ();\n-\n-  return 0;\n-}"}, {"sha": "293aa33769309eb4fef1098cd06c5acb1cda3ff0", "filename": "gcc/testsuite/g++.dg/pr79764.C", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr79764.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr79764.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr79764.C?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,12 +0,0 @@\n-/* { dg-do compile { target { { i?86-*-* x86_64-*-* } && { ! x32 } } } } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-typedef float __m256 __attribute__ (( __vector_size__(32), __may_alias__ ));\n-struct A {\n-  __m256 ymm;\n-  const float &f() const;\n-};\n-\n-const float &A::f() const {\n-  return ymm[1];\n-}"}, {"sha": "c3186877f60ef40ee5fbf017c2a1154227c1f1ca", "filename": "gcc/testsuite/g++.dg/pr79769.C", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr79769.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr79769.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr79769.C?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,4 +0,0 @@\n-/* { dg-do compile { target { { i?86-*-* x86_64-*-* } && { ! x32 } } } } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx -mabi=ms\" } */\n-\n-void a (_Complex) { a (3); }"}, {"sha": "2054aa15ba00455a9e6e1ca7d8df80431b69ab2d", "filename": "gcc/testsuite/gcc.dg/lto/chkp-privatize-1_0.c", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fchkp-privatize-1_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fchkp-privatize-1_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fchkp-privatize-1_0.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,17 +0,0 @@\n-/* { dg-lto-do link } */\n-/* { dg-require-effective-target mpx } */\n-/* { dg-lto-options { { -Ofast -flto -fcheck-pointer-bounds -mmpx } } } */\n-\n-extern int __attribute__((noinline)) f1 (int i);\n-\n-static int __attribute__((noinline))\n-f2 (int i)\n-{\n-  return i + 6;\n-}\n-\n-int\n-main (int argc, char **argv)\n-{\n-  return f1 (argc) + f2 (argc);\n-}"}, {"sha": "be7f601e399b2c93320d9f3394711e6e4f6145d8", "filename": "gcc/testsuite/gcc.dg/lto/chkp-privatize-2_0.c", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fchkp-privatize-2_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fchkp-privatize-2_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fchkp-privatize-2_0.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,18 +0,0 @@\n-/* { dg-lto-do link } */\n-/* { dg-require-effective-target mpx } */\n-/* { dg-lto-options { { -Ofast -flto -fcheck-pointer-bounds -mmpx } } } */\n-\n-static int\n-__attribute__ ((noinline))\n-func1 (int i)\n-{\n-  return i + 2;\n-}\n-\n-extern int func2 (int i);\n-\n-int\n-main (int argc, char **argv)\n-{\n-  return func1 (argc) + func2 (argc) + 1;\n-}"}, {"sha": "ad9fdaaee88916948dc87dd599673e9db60f0704", "filename": "gcc/testsuite/gcc.dg/lto/chkp-privatize_0.c", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fchkp-privatize_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fchkp-privatize_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fchkp-privatize_0.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,18 +0,0 @@\n-/* { dg-lto-do link } */\n-/* { dg-require-effective-target mpx } */\n-/* { dg-lto-options { { -fPIC -flto -flto-partition=max -fcheck-pointer-bounds -mmpx } } } */\n-\n-static int\n-__attribute__ ((noinline))\n-func1 (int i)\n-{\n-  return i + 2;\n-}\n-\n-extern int func2 (int i);\n-\n-int\n-main (int argc, char **argv)\n-{\n-  return func1 (argc) + func2 (argc) + 1;\n-}"}, {"sha": "96d728d5122a26478d28616f811e350020df9138", "filename": "gcc/testsuite/gcc.dg/lto/chkp-removed-alias_0.c", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fchkp-removed-alias_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fchkp-removed-alias_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fchkp-removed-alias_0.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,28 +0,0 @@\n-/* { dg-lto-do link } */\n-/* { dg-require-effective-target mpx } */\n-/* { dg-lto-options { { -O2 -flto -flto-partition=max -fcheck-pointer-bounds -mmpx } } } */\n-\n-int test1 (const char *c)\n-{\n-  return c[0] * 2;\n-}\n-\n-int test2 (const char *c)\n-{\n-  return c[1] * 3;\n-}\n-\n-int test1_alias (const char *c) __attribute__ ((alias (\"test1\")));\n-int test2_alias (const char *c) __attribute__ ((alias (\"test2\")));\n-\n-struct S\n-{\n-  int (*fnptr[2]) (const char *);\n-} S;\n-\n-struct S s = {test1_alias, test2_alias};\n-\n-int main (int argc, const char **argv)\n-{\n-  return s.fnptr[argc] (argv[0]);\n-}"}, {"sha": "596e5510664f9d5105b1950cff6ef79b71c28eec", "filename": "gcc/testsuite/gcc.dg/lto/chkp-static-bounds_0.c", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fchkp-static-bounds_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fchkp-static-bounds_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fchkp-static-bounds_0.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,26 +0,0 @@\n-/* { dg-lto-do link } */\n-/* { dg-require-effective-target mpx } */\n-/* { dg-lto-options { { -flto -flto-partition=max -fcheck-pointer-bounds -mmpx } } } */\n-\n-const char *cc;\n-\n-int test1 (const char *c)\n-{\n-  c = __builtin___bnd_init_ptr_bounds (c);\n-  cc = c;\n-  return c[0] * 2;\n-}\n-\n-struct S\n-{\n-  int (*fnptr) (const char *);\n-} S;\n-\n-struct S s1 = {test1};\n-struct S s2 = {test1};\n-struct S s3 = {test1};\n-\n-int main (int argc, const char **argv)\n-{\n-  return s1.fnptr (argv[0]) + s2.fnptr (argv[1]);\n-}"}, {"sha": "6611bdb825c2180c28288fb8809e77530091b6d1", "filename": "gcc/testsuite/gcc.dg/lto/chkp-wrap-asm-name_0.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fchkp-wrap-asm-name_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fchkp-wrap-asm-name_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fchkp-wrap-asm-name_0.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,20 +0,0 @@\n-/* { dg-lto-do link } */\n-/* { dg-require-effective-target mpx } */\n-/* { dg-lto-options { { -O2 -flto -fcheck-pointer-bounds -mmpx } } } */\n-\n-typedef long unsigned int size_t;\n-\n-extern size_t strlen (const char *);\n-extern __typeof (strlen) strlen __asm__ (\"\" \"__hidden_strlen\") __attribute__ ((visibility (\"hidden\")));\n-\n-size_t\n-test1 (const char *p) { return strlen (p); }\n-\n-size_t\n-test2 (const char *p) { return __builtin_strlen (p); }\n-\n-int\n-main (int argc, const char **argv)\n-{\n-  return test1 (argv[0]) - test2 (argv[0]);\n-}"}, {"sha": "cb35341d5ef1d36f7d02e73fb605fa1c7990086c", "filename": "gcc/testsuite/gcc.dg/lto/lto.exp", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Flto.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Flto.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Flto.exp?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -30,7 +30,6 @@ if $tracelevel then {\n # Load procedures from common libraries. \n load_lib standard.exp\n load_lib gcc.exp\n-load_lib mpx-dg.exp\n \n # Load the language-independent compabibility support procedures.\n load_lib lto.exp\n@@ -42,7 +41,6 @@ if { ![check_effective_target_lto] } {\n \n gcc_init\n lto_init no-mathlib\n-mpx_init\n \n # Define an identifier for use with this suite to avoid name conflicts\n # with other lto tests running at the same time."}, {"sha": "dbb92829be610bc090d5923b56277b45d41f71e0", "filename": "gcc/testsuite/gcc.dg/lto/pr66221_0.c", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr66221_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr66221_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr66221_0.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,10 +0,0 @@\n-/* { dg-lto-do link } */\n-/* { dg-require-effective-target mpx } */\n-/* { dg-lto-options { { -O2 -flto -fcheck-pointer-bounds -mmpx } } } */\n-\n-int test1 (const char *);\n-\n-int main (int argc, const char **argv)\n-{\n-  return test1 (argv[0]);\n-}"}, {"sha": "c10d1310e0e4b937aa30663282b3d411c6147a61", "filename": "gcc/testsuite/gcc.target/i386/chkp-always_inline.c", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-always_inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-always_inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-always_inline.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,12 +0,0 @@\n-/* { dg-do compile { target { ! x32 } } } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx -O2 -Wno-attributes\" } */\n-\n-static __attribute__((always_inline)) int f1 (int *p)\n-{\n-  return *p;\n-}\n-\n-__attribute__((bnd_legacy)) int f2 (int *p)\n-{\n-  return f1 (p);\n-}"}, {"sha": "d84ea70dcda70f943dee6b4485a441130a81d88c", "filename": "gcc/testsuite/gcc.target/i386/chkp-bndret.c", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-bndret.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-bndret.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-bndret.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,13 +0,0 @@\n-/* { dg-do compile { target { ! x32 } } } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx -O2 -fdump-tree-chkp\" } */\n-/* { dg-final { scan-tree-dump-not \"bndret\" \"chkp\" } } */\n-\n-#include \"string.h\"\n-\n-extern int *test1 (int *p) __attribute__((bnd_legacy));\n-\n-int *\n-test2 (int *p)\n-{\n-  return test1 (p);\n-}"}, {"sha": "99cfa82681cbba02a80e6efa220014a52f2ec089", "filename": "gcc/testsuite/gcc.target/i386/chkp-builtins-1.c", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-builtins-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-builtins-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-builtins-1.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,9 +0,0 @@\n-/* { dg-do compile { target { ! x32 } } } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx -fdump-tree-chkp\" } */\n-/* { dg-final { scan-tree-dump-not \"bnd_init_ptr_bounds\" \"chkp\" } } */\n-\n-void *\n-chkp_test (void *p)\n-{\n-  return __builtin___bnd_init_ptr_bounds (p);\n-}"}, {"sha": "6da8d0a83ff34363f6acbd1ee821f87ec95fbd44", "filename": "gcc/testsuite/gcc.target/i386/chkp-builtins-2.c", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-builtins-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-builtins-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-builtins-2.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,9 +0,0 @@\n-/* { dg-do compile { target { ! x32 } } } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx -fdump-tree-chkp\" } */\n-/* { dg-final { scan-tree-dump-not \"bnd_copy_ptr_bounds\" \"chkp\" } } */\n-\n-void *\n-chkp_test (void *p, void *q)\n-{\n-  return __builtin___bnd_copy_ptr_bounds (p, q);\n-}"}, {"sha": "ae30534c6da7d5410f7a12be795fed6c3e2b67c2", "filename": "gcc/testsuite/gcc.target/i386/chkp-builtins-3.c", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-builtins-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-builtins-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-builtins-3.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,9 +0,0 @@\n-/* { dg-do compile { target { ! x32 } } } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx -fdump-tree-chkp\" } */\n-/* { dg-final { scan-tree-dump-not \"bnd_set_ptr_bounds\" \"chkp\" } } */\n-\n-void *\n-chkp_test (void *p)\n-{\n-  return __builtin___bnd_set_ptr_bounds (p, 10);\n-}"}, {"sha": "d408a490b13085e99e0e83dd2e57505f218badda", "filename": "gcc/testsuite/gcc.target/i386/chkp-builtins-4.c", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-builtins-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-builtins-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-builtins-4.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,9 +0,0 @@\n-/* { dg-do compile { target { ! x32 } } } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx -fdump-tree-chkp\" } */\n-/* { dg-final { scan-tree-dump-not \"bnd_null_ptr_bounds\" \"chkp\" } } */\n-\n-void *\n-chkp_test (void *p)\n-{\n-  return __builtin___bnd_null_ptr_bounds (p);\n-}"}, {"sha": "6e6d067fb5062d5a3f7f84a7a57fd01d2de8fbf5", "filename": "gcc/testsuite/gcc.target/i386/chkp-const-check-1.c", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-const-check-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-const-check-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-const-check-1.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,10 +0,0 @@\n-/* { dg-do compile { target { ! x32 } } } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx -O2 -fdump-tree-chkpopt\" } */\n-/* { dg-final { scan-tree-dump-not \"bndcl\" \"chkpopt\" } } */\n-/* { dg-final { scan-tree-dump-not \"bndcu\" \"chkpopt\" } } */\n-\n-int test (int *p)\n-{\n-  p = (int *)__builtin___bnd_set_ptr_bounds (p, sizeof (int));\n-  return *p;\n-}"}, {"sha": "839cf788e7c68be1a59d9e6c063f5895e9aae5ae", "filename": "gcc/testsuite/gcc.target/i386/chkp-const-check-2.c", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-const-check-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-const-check-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-const-check-2.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,8 +0,0 @@\n-/* { dg-do compile { target { ! x32 } } } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx -O2 -Wchkp\" } */\n-\n-int test (int *p)\n-{\n-  p = (int *)__builtin___bnd_set_ptr_bounds (p, sizeof (int));\n-  return *(p + 1); /* { dg-warning \"memory access check always fail\" } */\n-}"}, {"sha": "68f70ff258de228225f13ff85c9f6506e0b1dc2e", "filename": "gcc/testsuite/gcc.target/i386/chkp-hidden-def.c", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-hidden-def.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-hidden-def.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-hidden-def.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,15 +0,0 @@\n-/* { dg-do compile { target { ! x32 } } } */\n-/* { dg-require-alias \"\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx -O2\" } */\n-/* { dg-final { scan-assembler-not \"test.chkp\" } } */\n-\n-int test (int *p);\n-extern __typeof (test) test  __asm__ (\"\" \"__test\") __attribute__ ((visibility (\"hidden\")));\n-\n-int test (int *p)\n-{\n-  return *p;\n-}\n-\n-extern __typeof (test) __test1 __asm__(\"\" \"test\");\n-extern __typeof (test) __test1 __attribute__((alias (\"\" \"__test\")));"}, {"sha": "23a2f7cd052166dbe1bf4faaa63f977807f15c7d", "filename": "gcc/testsuite/gcc.target/i386/chkp-label-address.c", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-label-address.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-label-address.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-label-address.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,23 +0,0 @@\n-/* { dg-do compile { target { ! x32 } } } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx -O2 -Wchkp\" } */\n-\n-#include <stdio.h>\n-\n-static int f1 () /* { dg-warning \"function cannot be instrumented\" } */\n-{\n-  static int array = &&label_B - &&label_A;\n-\n- label_A:\n-\n-  printf (\"%d\\n\", array);\n-\n- label_B:\n-\n-  return 0;\n-}\n-\n-int f2 (int i)\n-{\n-  printf (\"%d\\n\", i);\n-  return f1 ();\n-}"}, {"sha": "70b8b38dc2856b900f619ddb6ebbfe60d067d8e0", "filename": "gcc/testsuite/gcc.target/i386/chkp-lifetime-1.c", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-lifetime-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-lifetime-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-lifetime-1.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,15 +0,0 @@\n-/* { dg-do compile { target { ! x32 } } } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx -O2 -fdump-tree-chkpopt-details\" } */\n-/* { dg-final { scan-tree-dump \"Moving creation of \\[^ \\]+ down to its use\" \"chkpopt\" } } */\n-\n-extern int arr[];\n-\n-int test (int i)\n-{\n-  int res;\n-  if (i >= 0)\n-    res = arr[i];\n-  else\n-    res = -i;\n-  return res;\n-}"}, {"sha": "ab1b122479a96f4c428dea31cc5d2286f14c6935", "filename": "gcc/testsuite/gcc.target/i386/chkp-narrow-bounds.c", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-narrow-bounds.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-narrow-bounds.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-narrow-bounds.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,11 +0,0 @@\n-/* { dg-do compile { target { ! x32 } } } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx -O2 -fdump-tree-chkp\" } */\n-/* { dg-final { scan-tree-dump \"bndcl\" \"chkp\" } } */\n-/* { dg-final { scan-tree-dump \"bndcu\" \"chkp\" } } */\n-\n-int\n-test (int *p)\n-{\n-  int *p1 = __bnd_narrow_ptr_bounds (p - 10, p, sizeof (int) * 20);\n-  return p1[10];\n-}"}, {"sha": "16751f517662c273a77d98b266c8bb9f622cf9fd", "filename": "gcc/testsuite/gcc.target/i386/chkp-pr69044.c", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-pr69044.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-pr69044.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-pr69044.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,10 +0,0 @@\n-/* { dg-do compile { target { ! x32 } } } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx -O2\" } */\n-\n-int i;\n-int strncasecmp (char *p1, char *p2, long p3) { return 0; }\n-int special_command ()\n-{\n-  if (strncasecmp (0, 0, 0))\n-    i++;\n-}"}, {"sha": "7c0f13f8ccf8e41fd9fc8f866cc60c2f6d65cb38", "filename": "gcc/testsuite/gcc.target/i386/chkp-remove-bndint-1.c", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-remove-bndint-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-remove-bndint-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-remove-bndint-1.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,16 +0,0 @@\n-/* { dg-do compile { target { ! x32 } } } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx -O2 -fdump-tree-optimized\" } */\n-/* { dg-final { scan-tree-dump-not \"bndint\" \"optimized\" } } */\n-\n-struct S\n-{\n-  int a;\n-  int b;\n-  int c;\n-};\n-\n-int test (struct S *ps)\n-{\n-  int *pi = &ps->b;\n-  return *pi;\n-}"}, {"sha": "eea0b0afa10433798b19d6557df94bbf0f990f5b", "filename": "gcc/testsuite/gcc.target/i386/chkp-remove-bndint-2.c", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-remove-bndint-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-remove-bndint-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-remove-bndint-2.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,16 +0,0 @@\n-/* { dg-do compile { target { ! x32 } } } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx -O2 -fdump-tree-optimized -Wchkp\" } */\n-/* { dg-final { scan-tree-dump-not \"bndint\" \"optimized\" } } */\n-\n-struct S\n-{\n-  int a;\n-  int b;\n-  int c;\n-};\n-\n-int test (struct S *ps)\n-{\n-  int *pi = &ps->b;\n-  return *(pi + 1); /* { dg-warning \"memory access check always fail\" } */\n-}"}, {"sha": "01ee619dfd91dfd318ff3599125f861a40788fe2", "filename": "gcc/testsuite/gcc.target/i386/chkp-strchr.c", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-strchr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-strchr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-strchr.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,16 +0,0 @@\n-/* { dg-do compile { target { ! x32 } } } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx -O2\" } */\n-\n-#include \"string.h\"\n-\n-static char *\n-test1 (char *str)\n-{\n-  return strrchr (str, '_');\n-}\n-\n-char *\n-test2 ()\n-{\n-  return test1 (\"test_string\");\n-}"}, {"sha": "38d5390062735c92be36aa6548fae8503f064dd2", "filename": "gcc/testsuite/gcc.target/i386/chkp-strlen-1.c", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-strlen-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-strlen-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-strlen-1.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,12 +0,0 @@\n-/* { dg-do compile { target { ! x32 } } } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx -O2 -fdump-tree-strlen\" } */\n-/* { dg-final { scan-tree-dump \"memcpy.chkp\" \"strlen\" } } */\n-\n-#include \"../../gcc.dg/strlenopt.h\"\n-\n-char *test (char *str1, char *str2)\n-{\n-  size_t len = strlen (str2);\n-  strcpy (str1, str2);\n-  return str1 + len;\n-}"}, {"sha": "789ebc1f2d896c3c59971aa70deb49a45bbf9e66", "filename": "gcc/testsuite/gcc.target/i386/chkp-strlen-2.c", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-strlen-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-strlen-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-strlen-2.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,14 +0,0 @@\n-/* { dg-do compile { target { ! x32 } } } */\n-/* { dg-require-effective-target stpcpy } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx -O2 -fdump-tree-strlen\" } */\n-/* { dg-final { scan-tree-dump-not \"strlen\" \"strlen\" } } */\n-\n-#define USE_GNU\n-#include \"../../gcc.dg/strlenopt.h\"\n-\n-char *test (char *str1, char *str2)\n-{\n-  char *p = stpcpy (str1, str2);\n-  size_t len = strlen (str1);\n-  return p + len;\n-}"}, {"sha": "276f4127975928860b0fe5fb9c6d5d0ae9d6691d", "filename": "gcc/testsuite/gcc.target/i386/chkp-strlen-3.c", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-strlen-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-strlen-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-strlen-3.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,12 +0,0 @@\n-/* { dg-do compile { target { ! x32 } } } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx -O2 -fdump-tree-strlen\" } */\n-/* { dg-final { scan-tree-dump-times \"strlen\" 1 \"strlen\" } } */\n-\n-#include \"../../gcc.dg/strlenopt.h\"\n-\n-size_t test (char *str1, char *str2)\n-{\n-  size_t len = strlen (str2);\n-  memcpy (str1, str2, len + 1);\n-  return len + strlen (str1);\n-}"}, {"sha": "51ff96028be2bf5803e6568437c24d63e1361e4f", "filename": "gcc/testsuite/gcc.target/i386/chkp-strlen-4.c", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-strlen-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-strlen-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-strlen-4.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,14 +0,0 @@\n-/* { dg-do compile { target { ! x32 } } } */\n-/* { dg-require-effective-target mempcpy } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx -O2 -fdump-tree-strlen\" } */\n-/* { dg-final { scan-tree-dump-times \"strlen\" 1 \"strlen\" } } */\n-\n-#define USE_GNU\n-#include \"../../gcc.dg/strlenopt.h\"\n-\n-char * test (char *str1, char *str2)\n-{\n-  size_t len = strlen (str2);\n-  char *p = (char *)mempcpy (str1, str2, len + 1);\n-  return p + len + strlen (str1);\n-}"}, {"sha": "bbafecc30632064ae7cfb525302764f5bc901da4", "filename": "gcc/testsuite/gcc.target/i386/chkp-strlen-5.c", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-strlen-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-strlen-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-strlen-5.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,14 +0,0 @@\n-/* { dg-do compile { target { ! x32 } } } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx -O2 -fdump-tree-strlen\" } */\n-/* { dg-final { scan-tree-dump-times \"strlen\" 2 \"strlen\" } } */\n-/* { dg-final { scan-tree-dump \"memcpy\" \"strlen\" } } */\n-\n-#include \"../../gcc.dg/strlenopt.h\"\n-\n-size_t test (char *str1, char *str2)\n-{\n-  size_t len1 = strlen (str1);\n-  size_t len2 = strlen (str2);\n-  strcat (str1, str2);\n-  return len1 + len2 + strlen (str1);\n-}"}, {"sha": "d6148a87fd18004e57abb0f33956e09b863ae105", "filename": "gcc/testsuite/gcc.target/i386/chkp-stropt-1.c", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-1.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,10 +0,0 @@\n-/* { dg-do compile { target { ! x32 } } } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx -O2 -fdump-tree-chkpopt -fchkp-use-nochk-string-functions\" } */\n-/* { dg-final { scan-tree-dump \"memcpy_nochk\" \"chkpopt\" } } */\n-\n-#include \"../../gcc.dg/strlenopt.h\"\n-\n-void test (int *buf1, int *buf2, size_t len)\n-{\n-  memcpy (buf1, buf2, len);\n-}"}, {"sha": "18cff739b017654dad1e6e9a36e4bb004ca0a37a", "filename": "gcc/testsuite/gcc.target/i386/chkp-stropt-10.c", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-10.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,10 +0,0 @@\n-/* { dg-do compile { target { ! x32 } } } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx -O2 -fdump-tree-chkpopt -fchkp-use-fast-string-functions\" } */\n-/* { dg-final { scan-tree-dump-not \"memset_nobnd\" \"chkpopt\" } } */\n-\n-#include \"../../gcc.dg/strlenopt.h\"\n-\n-void test (void *buf1, int c, size_t len)\n-{\n-  memset (buf1, c, len);\n-}"}, {"sha": "c53db6a17e404ebf21c1bf9bcbe71690c890bd3f", "filename": "gcc/testsuite/gcc.target/i386/chkp-stropt-11.c", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-11.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,10 +0,0 @@\n-/* { dg-do compile { target { ! x32 } } } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx -O2 -fdump-tree-chkpopt -fchkp-use-fast-string-functions\" } */\n-/* { dg-final { scan-tree-dump-not \"memmove_nobnd\" \"chkpopt\" } } */\n-\n-#include \"../../gcc.dg/strlenopt.h\"\n-\n-void test (void *buf1, void *buf2, size_t len)\n-{\n-  memmove (buf1, buf2, len);\n-}"}, {"sha": "a076d17cd9a527322d535e18f42580bb278b654d", "filename": "gcc/testsuite/gcc.target/i386/chkp-stropt-12.c", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-12.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,12 +0,0 @@\n-/* { dg-do compile { target { ! x32 } } } */\n-/* { dg-require-effective-target mempcpy } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx -O2 -fdump-tree-chkpopt -fchkp-use-fast-string-functions\" } */\n-/* { dg-final { scan-tree-dump-not \"mempcpy_nobnd\" \"chkpopt\" } } */\n-\n-#define USE_GNU\n-#include \"../../gcc.dg/strlenopt.h\"\n-\n-void test (void *buf1, void *buf2, size_t len)\n-{\n-  mempcpy (buf1, buf2, len);\n-}"}, {"sha": "279cae3e5bfce1b7c9a1d9bb4018e9db5c55f3ea", "filename": "gcc/testsuite/gcc.target/i386/chkp-stropt-13.c", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-13.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,10 +0,0 @@\n-/* { dg-do compile { target { ! x32 } } } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx -O2 -fdump-tree-chkpopt -fchkp-use-nochk-string-functions -fchkp-use-fast-string-functions\" } */\n-/* { dg-final { scan-tree-dump \"memcpy_nobnd_nochk\" \"chkpopt\" } } */\n-\n-#include \"../../gcc.dg/strlenopt.h\"\n-\n-void test (int *buf1, int *buf2, size_t len)\n-{\n-  memcpy (buf1, buf2, len);\n-}"}, {"sha": "b810c682569a2faaf23a8bb19d3ee72497c47891", "filename": "gcc/testsuite/gcc.target/i386/chkp-stropt-14.c", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-14.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,10 +0,0 @@\n-/* { dg-do compile { target { ! x32 } } } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx -O2 -fdump-tree-chkpopt -fchkp-use-nochk-string-functions -fchkp-use-fast-string-functions\" } */\n-/* { dg-final { scan-tree-dump \"memset_nobnd_nochk\" \"chkpopt\" } } */\n-\n-#include \"../../gcc.dg/strlenopt.h\"\n-\n-void test (int *buf1, int c, size_t len)\n-{\n-  memset (buf1, c, len);\n-}"}, {"sha": "a9a79c1e33033d4c48288687313b3756ce58da90", "filename": "gcc/testsuite/gcc.target/i386/chkp-stropt-15.c", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-15.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,10 +0,0 @@\n-/* { dg-do compile { target { ! x32 } } } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx -O2 -fdump-tree-chkpopt -fchkp-use-nochk-string-functions -fchkp-use-fast-string-functions\" } */\n-/* { dg-final { scan-tree-dump \"memmove_nobnd_nochk\" \"chkpopt\" } } */\n-\n-#include \"../../gcc.dg/strlenopt.h\"\n-\n-void test (int *buf1, int *buf2, size_t len)\n-{\n-  memmove (buf1, buf2, len);\n-}"}, {"sha": "6ce170c9d68fd8eb4c8f596691cdbf59a6e16c56", "filename": "gcc/testsuite/gcc.target/i386/chkp-stropt-16.c", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-16.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,12 +0,0 @@\n-/* { dg-do compile { target { ! x32 } } } */\n-/* { dg-require-effective-target mempcpy } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx -O2 -fdump-tree-chkpopt -fchkp-use-nochk-string-functions -fchkp-use-fast-string-functions\" } */\n-/* { dg-final { scan-tree-dump \"mempcpy_nobnd_nochk\" \"chkpopt\" } } */\n-\n-#define USE_GNU\n-#include \"../../gcc.dg/strlenopt.h\"\n-\n-void test (int *buf1, int *buf2, size_t len)\n-{\n-  mempcpy (buf1, buf2, len);\n-}"}, {"sha": "faf304c33039961c55f8b6b3271a3e4ececbb6bb", "filename": "gcc/testsuite/gcc.target/i386/chkp-stropt-17.c", "status": "removed", "additions": 0, "deletions": 68, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-17.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,68 +0,0 @@\n-/* { dg-do compile { target { ! x32 } } }\n-   { dg-require-effective-target mempcpy }\n-   { dg-options \"-O2 -Wrestrict -fcheck-pointer-bounds -mmpx\" } */\n-\n-#define USE_GNU\n-#include \"../../gcc.dg/strlenopt.h\"\n-\n-/* There is no BUILT_IN_ST{P,R}NCPY_CHKP or BUILT_IN_STRNCAT_CHKP\n-   so the test for them below are XFAIL.  */\n-char *stpncpy (char *__restrict, const char *__restrict, size_t);\n-char *strncpy (char *__restrict, const char *__restrict, size_t);\n-char *strncat (char *__restrict, const char *__restrict, size_t);\n-\n-\n-char a[8];\n-\n-void test_memcpy (void)\n-{\n-  memcpy (a, a + 1, 3);   /* { dg-warning \".memcpy\\.chkp. accessing 3 bytes at offsets 0 and 1 overlaps 2 bytes at offset 1\" } */\n-}\n-\n-void test_memmove (void)\n-{\n-  memmove (a, a + 1, 3);\n-}\n-\n-void* test_mempcpy (void)\n-{\n-  return mempcpy (a, a + 1, 3);   /* { dg-warning \".mempcpy\\.chkp. accessing 3 bytes at offsets 0 and 1 overlaps 2 bytes at offset 1\" } */\n-}\n-\n-char* test_stpcpy (void)\n-{\n-  strcpy (a, \"0123456\");\n-  return stpcpy (a, a + 2);   /* { dg-warning \".stpcpy\\.chkp. accessing 6 bytes at offsets 0 and 2 overlaps 4 bytes at offset 2\" } */\n-}\n-\n-char* test_stpncpy (void)\n-{\n-  strcpy (a, \"0123456\");\n-\n-  /* There is no BUILT_IN_STPNCPY_CHKP so this isn't handled.  */\n-  return stpncpy (a, a + 2, sizeof a);   /* { dg-warning \".stpcpy\\.chkp. accessing 7 bytes at offsets 0 and 2 overlaps 4 bytes at offset 2\" \"bug 82652\" { xfail *-*-* } } */\n-}\n-\n-void test_strcpy (void)\n-{\n-  strcpy (a, \"0123456\");\n-  strcpy (a, a + 1);   /* { dg-warning \".strcpy\\.chkp. accessing 7 bytes at offsets 0 and 1 overlaps 6 bytes at offset 1\" } */\n-}\n-\n-void test_strcat (int n)\n-{\n-  strcat (a, a + 3);   /* { dg-warning \".strcat\\.chkp. accessing 4 or more bytes at offsets 0 and 3 may overlap 1 byte at offset 3\" } */\n-}\n-\n-void test_strncat (int n)\n-{\n-  strncat (a, a + 3, sizeof a);   /* { dg-warning \".strncat\\.chkp. accessing 0 or more bytes at offsets 0 and 3 may overlap 1 byte\" \"bug 82652\" { xfail *-*-* } } */\n-}\n-\n-void test_strncpy (int n)\n-{\n-  strcpy (a, \"0123456\");\n-\n-  /* There is no BUILT_IN_STRNCPY_CHKP so this isn't handled.  */\n-  strncpy (a, a + 2, sizeof a);   /* { dg-warning \".strncpy\\.chkp. accessing 7 bytes at offsets 0 and 2 overlaps 5 bytes at offset 2\" \"bug 82652\" { xfail *-*-* } } */\n-}"}, {"sha": "6a0c24ee887d1a6130748fdbd4a2beadd6e0757b", "filename": "gcc/testsuite/gcc.target/i386/chkp-stropt-2.c", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-2.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,10 +0,0 @@\n-/* { dg-do compile { target { ! x32 } } } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx -O2 -fdump-tree-chkpopt -fchkp-use-nochk-string-functions\" } */\n-/* { dg-final { scan-tree-dump \"memset_nochk\" \"chkpopt\" } } */\n-\n-#include \"../../gcc.dg/strlenopt.h\"\n-\n-void test (int *buf1, int c, size_t len)\n-{\n-  memset (buf1, c, len);\n-}"}, {"sha": "310dec77456c7166838e5a099d895ba4cae72d2b", "filename": "gcc/testsuite/gcc.target/i386/chkp-stropt-3.c", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-3.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,10 +0,0 @@\n-/* { dg-do compile { target { ! x32 } } } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx -O2 -fdump-tree-chkpopt -fchkp-use-nochk-string-functions\" } */\n-/* { dg-final { scan-tree-dump \"memmove_nochk\" \"chkpopt\" } } */\n-\n-#include \"../../gcc.dg/strlenopt.h\"\n-\n-void test (int *buf1, int *buf2, size_t len)\n-{\n-  memmove (buf1, buf2, len);\n-}"}, {"sha": "7a30d17b8e65d218663e891887a259115c434858", "filename": "gcc/testsuite/gcc.target/i386/chkp-stropt-4.c", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-4.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,12 +0,0 @@\n-/* { dg-do compile { target { ! x32 } } } */\n-/* { dg-require-effective-target mempcpy } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx -O2 -fdump-tree-chkpopt -fchkp-use-nochk-string-functions\" } */\n-/* { dg-final { scan-tree-dump \"mempcpy_nochk\" \"chkpopt\" } } */\n-\n-#define USE_GNU\n-#include \"../../gcc.dg/strlenopt.h\"\n-\n-void test (int *buf1, int *buf2, size_t len)\n-{\n-  mempcpy (buf1, buf2, len);\n-}"}, {"sha": "39850d62be8ac279de283feed2eebaf941926da1", "filename": "gcc/testsuite/gcc.target/i386/chkp-stropt-5.c", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-5.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,10 +0,0 @@\n-/* { dg-do compile { target { ! x32 } } } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx -O2 -fdump-tree-chkpopt -fchkp-use-fast-string-functions\" } */\n-/* { dg-final { scan-tree-dump \"memcpy_nobnd\" \"chkpopt\" } } */\n-\n-#include \"../../gcc.dg/strlenopt.h\"\n-\n-void test (int *buf1, int *buf2, size_t len)\n-{\n-  memcpy (buf1, buf2, len);\n-}"}, {"sha": "06dcbfb9a25329a544c6a4c5e312caeac3ed4059", "filename": "gcc/testsuite/gcc.target/i386/chkp-stropt-6.c", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-6.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,10 +0,0 @@\n-/* { dg-do compile { target { ! x32 } } } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx -O2 -fdump-tree-chkpopt -fchkp-use-fast-string-functions\" } */\n-/* { dg-final { scan-tree-dump \"memset_nobnd\" \"chkpopt\" } } */\n-\n-#include \"../../gcc.dg/strlenopt.h\"\n-\n-void test (int *buf1, int c, size_t len)\n-{\n-  memset (buf1, c, len);\n-}"}, {"sha": "40ded068f8e3ae4d5b20227c98bf1a89083cdd4d", "filename": "gcc/testsuite/gcc.target/i386/chkp-stropt-7.c", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-7.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,10 +0,0 @@\n-/* { dg-do compile { target { ! x32 } } } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx -O2 -fdump-tree-chkpopt -fchkp-use-fast-string-functions\" } */\n-/* { dg-final { scan-tree-dump \"memmove_nobnd\" \"chkpopt\" } } */\n-\n-#include \"../../gcc.dg/strlenopt.h\"\n-\n-void test (int *buf1, int *buf2, size_t len)\n-{\n-  memmove (buf1, buf2, len);\n-}"}, {"sha": "7e575bb40bbc071dc336b19b2c35f1ffe4ad6944", "filename": "gcc/testsuite/gcc.target/i386/chkp-stropt-8.c", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-8.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,12 +0,0 @@\n-/* { dg-do compile { target { ! x32 } } } */\n-/* { dg-require-effective-target mempcpy } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx -O2 -fdump-tree-chkpopt -fchkp-use-fast-string-functions\" } */\n-/* { dg-final { scan-tree-dump \"mempcpy_nobnd\" \"chkpopt\" } } */\n-\n-#define USE_GNU\n-#include \"../../gcc.dg/strlenopt.h\"\n-\n-void test (int *buf1, int *buf2, size_t len)\n-{\n-  mempcpy (buf1, buf2, len);\n-}"}, {"sha": "bf26874e5a86b83e6f581720253932faeb4d8cab", "filename": "gcc/testsuite/gcc.target/i386/chkp-stropt-9.c", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-stropt-9.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,10 +0,0 @@\n-/* { dg-do compile { target { ! x32 } } } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx -O2 -fdump-tree-chkpopt -fchkp-use-fast-string-functions\" } */\n-/* { dg-final { scan-tree-dump-not \"memcpy_nobnd\" \"chkpopt\" } } */\n-\n-#include \"../../gcc.dg/strlenopt.h\"\n-\n-void test (void *buf1, void *buf2, size_t len)\n-{\n-  memcpy (buf1, buf2, len);\n-}"}, {"sha": "437b12fc67d5063c7681bfdbadf69711186e0fd1", "filename": "gcc/testsuite/gcc.target/i386/funcspec-56.inc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -62,7 +62,6 @@ extern void test_pku (void)\t\t\t__attribute__((__target__(\"pku\")));\n extern void test_lwp (void)\t\t\t__attribute__((__target__(\"lwp\")));\n extern void test_hle (void)\t\t\t__attribute__((__target__(\"hle\")));\n extern void test_fxsr (void)\t\t\t__attribute__((__target__(\"fxsr\")));\n-extern void test_mpx (void)\t\t\t__attribute__((__target__(\"mpx\")));\n extern void test_clwb (void)\t\t\t__attribute__((__target__(\"clwb\")));\n \n extern void test_cld (void)\t\t\t__attribute__((__target__(\"cld\")));\n@@ -130,7 +129,6 @@ extern void test_no_pku (void)\t\t\t__attribute__((__target__(\"no-pku\")));\n extern void test_no_lwp (void)\t\t\t__attribute__((__target__(\"no-lwp\")));\n extern void test_no_hle (void)\t\t\t__attribute__((__target__(\"no-hle\")));\n extern void test_no_fxsr (void)\t\t\t__attribute__((__target__(\"no-fxsr\")));\n-extern void test_no_mpx (void)\t\t\t__attribute__((__target__(\"no-mpx\")));\n extern void test_no_clwb (void)\t\t\t__attribute__((__target__(\"no-clwb\")));\n \n extern void test_no_cld (void)\t\t\t__attribute__((__target__(\"no-cld\")));"}, {"sha": "91fa2a61af2d675661803639bf08b681eedf7ceb", "filename": "gcc/testsuite/gcc.target/i386/i386.exp", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31db0fe044cc9d4ba43dd4535575aeac3aa3952b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp?ref=31db0fe044cc9d4ba43dd4535575aeac3aa3952b", "patch": "@@ -24,7 +24,6 @@ if { ![istarget i?86*-*-*] && ![istarget x86_64-*-*] } then {\n # Load support procs.\n load_lib gcc-dg.exp\n load_lib clearcap.exp\n-load_lib mpx-dg.exp\n \n # Return 1 if attribute ms_hook_prologue is supported.\n proc check_effective_target_ms_hook_prologue { } {"}, {"sha": "b6bd51be63a8af860919793b0d830cf9cb69df91", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-11.c", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-11.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,7 +0,0 @@\n-/* { dg-do compile { target { ! x32 } } } */\n-/* { dg-options \"-O2 -mindirect-branch=thunk-extern -fcf-protection -fcheck-pointer-bounds -mmpx\" } */\n-\n-void\n-bar (void)\n-{ /* { dg-error \"'-mindirect-branch=thunk-extern', '-fcf-protection=branch' and '-fcheck-pointer-bounds' are not compatible\" } */\n-}"}, {"sha": "2c3848e1fb031b91a87c8517db0ad2fdbfec2baa", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-12.c", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-12.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,7 +0,0 @@\n-/* { dg-do compile { target { ! x32 } } } */\n-/* { dg-options \"-O2 -mindirect-branch=thunk -fcf-protection -fcheck-pointer-bounds -mmpx\" } */\n-\n-void\n-bar (void)\n-{\n-}"}, {"sha": "5da515690d4d6dc80de44b30586301a78c6f8db5", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-attr-12.c", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-12.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,8 +0,0 @@\n-/* { dg-do compile { target { ! x32 } } } */\n-/* { dg-options \"-O2 -mindirect-branch=keep -fcf-protection -fcheck-pointer-bounds -mmpx\" } */\n-\n-__attribute__ ((indirect_branch(\"thunk-extern\")))\n-void\n-bar (void)\n-{ /* { dg-error \"'-mindirect-branch=thunk-extern', '-fcf-protection=branch' and '-fcheck-pointer-bounds' are not compatible\" } */\n-}"}, {"sha": "a671e46009882842b63a1a5f8bc59c68984f61fb", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-attr-13.c", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-attr-13.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,8 +0,0 @@\n-/* { dg-do compile { target { ! x32 } } } */\n-/* { dg-options \"-O2 -mindirect-branch=keep -fcf-protection -fcheck-pointer-bounds -mmpx\" } */\n-\n-__attribute__ ((indirect_branch(\"thunk-inline\")))\n-void\n-bar (void)\n-{\n-}"}, {"sha": "73d16baddc7e743caafdac2e74305dbc03933ab0", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-bnd-1.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-bnd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-bnd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-bnd-1.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,20 +0,0 @@\n-/* { dg-do compile { target { ! x32 } } } */\n-/* { dg-options \"-O2 -mno-indirect-branch-register -mfunction-return=keep -mindirect-branch=thunk -fcheck-pointer-bounds -mmpx -fno-pic\" } */\n-\n-void (*dispatch) (char *);\n-char buf[10];\n-\n-void\n-foo (void)\n-{\n-  dispatch (buf);\n-}\n-\n-/* { dg-final { scan-assembler \"mov(?:l|q)\\[ \\t\\]*_?dispatch\" { target *-*-linux* } } } */\n-/* { dg-final { scan-assembler \"bnd jmp\\[ \\t\\]*__x86_indirect_thunk_bnd_rax\" { target lp64 } } } */\n-/* { dg-final { scan-assembler \"bnd call\\[ \\t\\]*__x86_indirect_thunk_bnd_eax\" { target ia32 } } } */\n-/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*\\.LIND\" } } */\n-/* { dg-final { scan-assembler \"bnd call\\[ \\t\\]*\\.LIND\" } } */\n-/* { dg-final { scan-assembler \"bnd ret\" } } */\n-/* { dg-final { scan-assembler {\\tpause} } } */\n-/* { dg-final { scan-assembler {\\tlfence} } } */"}, {"sha": "856751ac2241aa57306aac9f8897b0d5046a1975", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-bnd-2.c", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-bnd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-bnd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-bnd-2.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,19 +0,0 @@\n-/* { dg-do compile { target { ! x32 } } } */\n-/* { dg-options \"-O2 -mno-indirect-branch-register -mfunction-return=keep -mindirect-branch=thunk -fcheck-pointer-bounds -mmpx -fno-pic\" } */\n-\n-void (*dispatch) (char *);\n-char buf[10];\n-\n-int\n-foo (void)\n-{\n-  dispatch (buf);\n-  return 0;\n-}\n-\n-/* { dg-final { scan-assembler \"mov(?:l|q)\\[ \\t\\]*_?dispatch\" { target *-*-linux* } } } */\n-/* { dg-final { scan-assembler \"bnd call\\[ \\t\\]*__x86_indirect_thunk_bnd_(r|e)ax\" } } */\n-/* { dg-final { scan-assembler \"bnd call\\[ \\t\\]*\\.LIND\" } } */\n-/* { dg-final { scan-assembler \"bnd ret\" } } */\n-/* { dg-final { scan-assembler {\\tpause} } } */\n-/* { dg-final { scan-assembler {\\tlfence} } } */"}, {"sha": "42312f655888be6d12608e3196e64c1d8ac2aea7", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-bnd-3.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-bnd-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-bnd-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-bnd-3.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,20 +0,0 @@\n-/* { dg-do compile { target { *-*-linux* && { ! x32 } } } } */\n-/* { dg-options \"-O2 -mno-indirect-branch-register -mfunction-return=keep -mindirect-branch=thunk -fcheck-pointer-bounds -mmpx -fpic -fno-plt\" } */\n-\n-void bar (char *);\n-char buf[10];\n-\n-void\n-foo (void)\n-{\n-  bar (buf);\n-}\n-\n-/* { dg-final { scan-assembler \"mov(?:l|q)\\[ \\t\\]*bar@GOT\" } } */\n-/* { dg-final { scan-assembler \"bnd jmp\\[ \\t\\]*__x86_indirect_thunk_bnd_rax\" { target lp64 } } } */\n-/* { dg-final { scan-assembler \"bnd call\\[ \\t\\]*__x86_indirect_thunk_bnd_eax\" { target ia32 } } } */\n-/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*\\.LIND\" } } */\n-/* { dg-final { scan-assembler \"bnd call\\[ \\t\\]*\\.LIND\" } } */\n-/* { dg-final { scan-assembler \"bnd ret\" } } */\n-/* { dg-final { scan-assembler {\\tpause} } } */\n-/* { dg-final { scan-assembler {\\tlfence} } } */"}, {"sha": "8850f2ffca4f4bfe6155ba5b0703968bbd825ac9", "filename": "gcc/testsuite/gcc.target/i386/indirect-thunk-bnd-4.c", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-bnd-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-bnd-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Findirect-thunk-bnd-4.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,19 +0,0 @@\n-/* { dg-do compile { target { *-*-linux* && { ! x32 } } } } */\n-/* { dg-options \"-O2 -mno-indirect-branch-register -mfunction-return=keep -mindirect-branch=thunk -fcheck-pointer-bounds -mmpx -fpic -fno-plt\" } */\n-\n-void bar (char *);\n-char buf[10];\n-\n-int\n-foo (void)\n-{\n-  bar (buf);\n-  return 0;\n-}\n-\n-/* { dg-final { scan-assembler \"mov(?:l|q)\\[ \\t\\]*bar@GOT\" } } */\n-/* { dg-final { scan-assembler \"bnd call\\[ \\t\\]*__x86_indirect_thunk_bnd_(r|e)ax\" } } */\n-/* { dg-final { scan-assembler-times \"bnd call\\[ \\t\\]*\\.LIND\" 1 } } */\n-/* { dg-final { scan-assembler \"bnd ret\" } } */\n-/* { dg-final { scan-assembler {\\tpause} } } */\n-/* { dg-final { scan-assembler {\\tlfence} } } */"}, {"sha": "e07688e7ee20ca12e6bd0c152422465fee495520", "filename": "gcc/testsuite/gcc.target/i386/interrupt-bnd-err-1.c", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Finterrupt-bnd-err-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Finterrupt-bnd-err-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Finterrupt-bnd-err-1.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,16 +0,0 @@\n-/* { dg-do compile { target { ! x32 } } } */\n-/* { dg-options \"-O2 -mgeneral-regs-only -mno-cld -mno-iamcu -mmpx\" } */\n-\n-typedef unsigned int uword_t __attribute__ ((mode (__word__)));\n-\n-void\n-__attribute__((interrupt))\n-fn1 (void *frame)\n-{ /* { dg-message \"MPX instructions aren't allowed in interrupt service routine\" } */\n-}\n-\n-void\n-__attribute__((interrupt))\n-fn2 (void *frame, uword_t error)\n-{ /* { dg-message \"MPX instructions aren't allowed in exception service routine\" } */\n-}"}, {"sha": "641ca637f8c82fd5f0dc0a71f9f44e9b054710df", "filename": "gcc/testsuite/gcc.target/i386/interrupt-bnd-err-2.c", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Finterrupt-bnd-err-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Finterrupt-bnd-err-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Finterrupt-bnd-err-2.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,8 +0,0 @@\n-/* { dg-do compile { target { ! x32 } } } */\n-/* { dg-options \"-O2 -mgeneral-regs-only -mno-cld -mno-iamcu -mmpx\" } */\n-\n-void\n-__attribute__((no_caller_saved_registers))\n-fn (void *frame)\n-{ /* { dg-message \"MPX instructions aren't allowed in function with no_caller_saved_registers attribute\" } */\n-}"}, {"sha": "1c77c192c177809fdefd6f3a72a387e76ff933c6", "filename": "gcc/testsuite/gcc.target/i386/mpx/alloca-1-lbv.c", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Falloca-1-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Falloca-1-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Falloca-1-lbv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,24 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-int rd (int *p, int i)\n-{\n-  int res = p[i];\n-  printf (\"%d\\n\", res);\n-  return res;\n-}\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  int *buf = (int *)__builtin_alloca (100 * sizeof(int));\n-\n-  rd (buf, -1);\n-\n-  return 0;\n-}"}, {"sha": "835015fc43203f80f32d4646526ab7dc971a3f99", "filename": "gcc/testsuite/gcc.target/i386/mpx/alloca-1-nov.c", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Falloca-1-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Falloca-1-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Falloca-1-nov.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,22 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#include \"mpx-check.h\"\n-\n-int rd (int *p, int i)\n-{\n-  int res = p[i];\n-  printf (\"%d\\n\", res);\n-  return res;\n-}\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  int *buf = (int *)__builtin_alloca (100 * sizeof(int));\n-\n-  rd (buf, 0);\n-  rd (buf, 99);\n-\n-  return 0;\n-}"}, {"sha": "c57c6c4811f7fdc045cca7148325d7016ca2a682", "filename": "gcc/testsuite/gcc.target/i386/mpx/alloca-1-ubv.c", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Falloca-1-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Falloca-1-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Falloca-1-ubv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,24 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-int rd (int *p, int i)\n-{\n-  int res = p[i];\n-  printf (\"%d\\n\", res);\n-  return res;\n-}\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  int *buf = (int *)__builtin_alloca (100 * sizeof(int));\n-\n-  rd (buf, 100);\n-\n-  return 0;\n-}"}, {"sha": "1fd2036cf06bcaf3566721a1f21a577d0b264bdd", "filename": "gcc/testsuite/gcc.target/i386/mpx/arg-addr-1-lbv.c", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Farg-addr-1-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Farg-addr-1-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Farg-addr-1-lbv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,27 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-int rd (int *p, int i)\n-{\n-  int res = p[i];\n-  printf (\"%d\\n\", res);\n-  return res;\n-}\n-\n-int foo (int i, int j)\n-{\n-  return rd(&i, j);\n-}\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  foo (1, -1);\n-\n-  return 0;\n-}"}, {"sha": "4e338c76f7c273cce7714601262b0ca6ff179b85", "filename": "gcc/testsuite/gcc.target/i386/mpx/arg-addr-1-nov.c", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Farg-addr-1-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Farg-addr-1-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Farg-addr-1-nov.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,24 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#include \"mpx-check.h\"\n-\n-int rd (int *p, int i)\n-{\n-  int res = p[i];\n-  printf (\"%d\\n\", res);\n-  return res;\n-}\n-\n-int foo (int i, int j)\n-{\n-  return rd(&i, j);\n-}\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  foo (1, 0);\n-\n-  return 0;\n-}"}, {"sha": "65cb46bcd3f68b6df9ecff08ebe86598c4bf4085", "filename": "gcc/testsuite/gcc.target/i386/mpx/arg-addr-1-ubv.c", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Farg-addr-1-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Farg-addr-1-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Farg-addr-1-ubv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,27 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-int rd (int *p, int i)\n-{\n-  int res = p[i];\n-  printf (\"%d\\n\", res);\n-  return res;\n-}\n-\n-int foo (int i, int j)\n-{\n-  return rd(&i, j);\n-}\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  foo (1, 1);\n-\n-  return 0;\n-}"}, {"sha": "deca6fd6a97bc81f6b3368d3bc22b85a5597e35a", "filename": "gcc/testsuite/gcc.target/i386/mpx/bitfields-1-lbv.c", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbitfields-1-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbitfields-1-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbitfields-1-lbv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,33 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-struct s {\n-  int a;\n-  int b : 10;\n-  int c : 1;\n-  int e : 10;\n-} s;\n-\n-#define HH (unsigned char)1\n-\n-int foo (struct s *p)\n-{\n-  int val = p->b;\n-  printf (\"%d\\n\", val);\n-  return val == HH;\n-}\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  struct s buf[100];\n-\n-  foo (buf - 1);\n-\n-  return 0;\n-}"}, {"sha": "0a7913a256d16a78cae486ca1280483eeb5c8523", "filename": "gcc/testsuite/gcc.target/i386/mpx/bitfields-1-nov.c", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbitfields-1-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbitfields-1-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbitfields-1-nov.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,31 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#include \"mpx-check.h\"\n-\n-struct s {\n-  int a;\n-  int b : 10;\n-  int c : 1;\n-  int e : 10;\n-} s;\n-\n-#define HH (unsigned char)1\n-\n-int foo (struct s *p)\n-{\n-  int val = p->b;\n-  printf (\"%d\\n\", val);\n-  return val == HH;\n-}\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  struct s buf[100];\n-\n-  foo (buf);\n-  foo (buf + 99);\n-\n-  return 0;\n-}"}, {"sha": "a20a7897fce2b33e0f57b3be7da5543f1791c037", "filename": "gcc/testsuite/gcc.target/i386/mpx/bitfields-1-ubv.c", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbitfields-1-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbitfields-1-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbitfields-1-ubv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,33 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-struct s {\n-  int a;\n-  int b : 10;\n-  int c : 1;\n-  int e : 10;\n-} s;\n-\n-#define HH (unsigned char)1\n-\n-int foo (struct s *p)\n-{\n-  int val = p->b;\n-  printf (\"%d\\n\", val);\n-  return val == HH;\n-}\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  struct s buf[100];\n-\n-  foo (buf + 100);\n-\n-  return 0;\n-}"}, {"sha": "140848e015845138682909c3cee9abbfbea6277a", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-chk-ptr-bounds-1-lbv.c", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-chk-ptr-bounds-1-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-chk-ptr-bounds-1-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-chk-ptr-bounds-1-lbv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,16 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-int buf[100];\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  __bnd_chk_ptr_bounds (buf - 1, sizeof (int));\n-  return 0;\n-}"}, {"sha": "055b61d649c4fc74f3ec6141aa42f22c1180ed67", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-chk-ptr-bounds-1-nov.c", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-chk-ptr-bounds-1-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-chk-ptr-bounds-1-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-chk-ptr-bounds-1-nov.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,13 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#include \"mpx-check.h\"\n-\n-int buf[100];\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  __bnd_chk_ptr_bounds (buf, sizeof (int) * 100);\n-  return 0;\n-}"}, {"sha": "f811694b9ee676d4d163979ab43c01387fa3f9c1", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-chk-ptr-bounds-1-ubv.c", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-chk-ptr-bounds-1-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-chk-ptr-bounds-1-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-chk-ptr-bounds-1-ubv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,16 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-int buf[100];\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  __bnd_chk_ptr_bounds (buf + 100, sizeof (int));\n-  return 0;\n-}"}, {"sha": "47e62e7834ddccb9f3a57afa0effccc122f9ae4d", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-chk-ptr-bounds-2.c", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-chk-ptr-bounds-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-chk-ptr-bounds-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-chk-ptr-bounds-2.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,14 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-fno-check-pointer-bounds\" } */\n-\n-\n-#include \"mpx-check.h\"\n-\n-int buf[100];\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  __bnd_chk_ptr_bounds (buf - 1, sizeof (int));\n-  __bnd_chk_ptr_bounds (buf + 100, sizeof (int));\n-  return 0;\n-}"}, {"sha": "085166fc142c0166cce03cb4af6cb2ca197f6bfd", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-chk-ptr-lbounds-1-lbv.c", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-chk-ptr-lbounds-1-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-chk-ptr-lbounds-1-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-chk-ptr-lbounds-1-lbv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,16 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-int buf[100];\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  __bnd_chk_ptr_lbounds (buf - 1);\n-  return 0;\n-}"}, {"sha": "3a666d8e300623a14580d81264d3224d488f401d", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-chk-ptr-lbounds-1-nov.c", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-chk-ptr-lbounds-1-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-chk-ptr-lbounds-1-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-chk-ptr-lbounds-1-nov.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,13 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#include \"mpx-check.h\"\n-\n-int buf[100];\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  __bnd_chk_ptr_lbounds (buf);\n-  return 0;\n-}"}, {"sha": "87b80e0b62c69240c196d8c769b442c995d26b02", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-chk-ptr-lbounds-2.c", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-chk-ptr-lbounds-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-chk-ptr-lbounds-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-chk-ptr-lbounds-2.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,13 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-fno-check-pointer-bounds\" } */\n-\n-\n-#include \"mpx-check.h\"\n-\n-int buf[100];\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  __bnd_chk_ptr_lbounds (buf - 1);\n-  return 0;\n-}"}, {"sha": "8a73fe367d13022c40f51b48af88997c92f7619b", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-chk-ptr-ubounds-1-nov.c", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-chk-ptr-ubounds-1-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-chk-ptr-ubounds-1-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-chk-ptr-ubounds-1-nov.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,13 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#include \"mpx-check.h\"\n-\n-int buf[100];\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  __bnd_chk_ptr_ubounds (buf + 99);\n-  return 0;\n-}"}, {"sha": "eb22dd1936aeb08fa8ca532f8ab02d9217f85b54", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-chk-ptr-ubounds-1-ubv.c", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-chk-ptr-ubounds-1-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-chk-ptr-ubounds-1-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-chk-ptr-ubounds-1-ubv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,16 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-int buf[100];\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  __bnd_chk_ptr_ubounds (buf + 100);\n-  return 0;\n-}"}, {"sha": "503bd53a60bcbd20fdc4fa5f36feb7d9fd8ed837", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-chk-ptr-ubounds-2.c", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-chk-ptr-ubounds-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-chk-ptr-ubounds-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-chk-ptr-ubounds-2.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,13 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-fno-check-pointer-bounds\" } */\n-\n-\n-#include \"mpx-check.h\"\n-\n-int buf[100];\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  __bnd_chk_ptr_ubounds (buf + 100);\n-  return 0;\n-}"}, {"sha": "0949f6acd87429ccc9650cad30b2c55fdbfadd1e", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-copy-ptr-bounds-1.c", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-copy-ptr-bounds-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-copy-ptr-bounds-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-copy-ptr-bounds-1.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,13 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#include \"mpx-check.h\"\n-\n-int buf[100];\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  assert (buf + 10 == __bnd_copy_ptr_bounds (buf + 10, buf));\n-  return 0;\n-}"}, {"sha": "a7317e71785cceba27fc939e25a20a62ceb5ecad", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-copy-ptr-bounds-2-lbv.c", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-copy-ptr-bounds-2-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-copy-ptr-bounds-2-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-copy-ptr-bounds-2-lbv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,18 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-int buf[100];\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  int *p = __bnd_set_ptr_bounds (buf + 10, sizeof (int) * 10);\n-  int *p1 = __bnd_copy_ptr_bounds (buf, p);\n-  p1[9] = argc;\n-  return 0;\n-}"}, {"sha": "6b6423e3c6d3159a0be97f960fbf043f63613d30", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-copy-ptr-bounds-2-nov.c", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-copy-ptr-bounds-2-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-copy-ptr-bounds-2-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-copy-ptr-bounds-2-nov.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,16 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#include \"mpx-check.h\"\n-\n-int buf[100];\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  int *p = __bnd_set_ptr_bounds (buf + 10, sizeof (int) * 10);\n-  int *p1 = __bnd_copy_ptr_bounds (buf, p);\n-  p1[10] = argc;\n-  p1[19] = argc;\n-  return 0;\n-}"}, {"sha": "2893d9be1f924a1ea4c28338b4d04e01302b0dfd", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-copy-ptr-bounds-2-ubv.c", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-copy-ptr-bounds-2-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-copy-ptr-bounds-2-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-copy-ptr-bounds-2-ubv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,18 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-int buf[100];\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  int *p = __bnd_set_ptr_bounds (buf + 10, sizeof (int) * 10);\n-  int *p1 = __bnd_copy_ptr_bounds (buf, p);\n-  p1[20] = argc;\n-  return 0;\n-}"}, {"sha": "4d0137579ebefd2748cd5e7bdf36d4da10c623e3", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-copy-ptr-bounds-3.c", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-copy-ptr-bounds-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-copy-ptr-bounds-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-copy-ptr-bounds-3.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,13 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-fno-check-pointer-bounds\" } */\n-\n-\n-#include \"mpx-check.h\"\n-\n-int buf[100];\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  assert (buf + 10 == __bnd_copy_ptr_bounds (buf + 10, buf));\n-  return 0;\n-}"}, {"sha": "2a7f46ff2d67bb915f3dfe38ecf5a448002a518d", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-get-ptr-lbound-1.c", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-get-ptr-lbound-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-get-ptr-lbound-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-get-ptr-lbound-1.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,13 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#include \"mpx-check.h\"\n-\n-char buf[100];\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  assert (buf == __bnd_get_ptr_lbound (buf));\n-  return 0;\n-}"}, {"sha": "70b49e312b6aae3fad8fc800de7e3ecc3f0c3ad4", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-get-ptr-lbound-2.c", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-get-ptr-lbound-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-get-ptr-lbound-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-get-ptr-lbound-2.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,13 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-fno-check-pointer-bounds\" } */\n-\n-\n-#include \"mpx-check.h\"\n-\n-char buf[100];\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  assert ((void *)0 == __bnd_get_ptr_lbound (buf));\n-  return 0;\n-}"}, {"sha": "a9111f35d7d4edcb33cfd3e40c9a4f1392008e38", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-get-ptr-ubound-1.c", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-get-ptr-ubound-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-get-ptr-ubound-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-get-ptr-ubound-1.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,13 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#include \"mpx-check.h\"\n-\n-char buf[100];\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  assert (buf + 99 == __bnd_get_ptr_ubound (buf));\n-  return 0;\n-}"}, {"sha": "cf0aca14a6b61f702c191a0b333c395ce62a262b", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-get-ptr-ubound-2.c", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-get-ptr-ubound-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-get-ptr-ubound-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-get-ptr-ubound-2.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,13 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-fno-check-pointer-bounds\" } */\n-\n-\n-#include \"mpx-check.h\"\n-\n-char buf[100];\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  assert ((void *)-1 == __bnd_get_ptr_ubound (buf));\n-  return 0;\n-}"}, {"sha": "ee259cc9fb68c35a58c47351c58a8f2a81a24ab7", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-init-ptr-bounds-1.c", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-init-ptr-bounds-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-init-ptr-bounds-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-init-ptr-bounds-1.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,13 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#include \"mpx-check.h\"\n-\n-int buf[100];\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  assert (buf + 10 == __bnd_init_ptr_bounds (buf + 10));\n-  return 0;\n-}"}, {"sha": "da44e7a96421b5919e21b853cee61a938ce84259", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-init-ptr-bounds-2-nov.c", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-init-ptr-bounds-2-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-init-ptr-bounds-2-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-init-ptr-bounds-2-nov.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,16 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#include \"mpx-check.h\"\n-\n-int buf[100];\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  int *p = __bnd_set_ptr_bounds (buf + 10, sizeof (int) * 10);\n-  p = __bnd_init_ptr_bounds (p);\n-  p[-1] = argc;\n-  p[10] = argc;\n-  return 0;\n-}"}, {"sha": "8c1527025f622a1b127a90ff6aaff2389a42ce31", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-init-ptr-bounds-3.c", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-init-ptr-bounds-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-init-ptr-bounds-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-init-ptr-bounds-3.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,13 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-fno-check-pointer-bounds\" } */\n-\n-\n-#include \"mpx-check.h\"\n-\n-int buf[100];\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  assert (buf + 10 == __bnd_init_ptr_bounds (buf + 10));\n-  return 0;\n-}"}, {"sha": "4ac49abd70a4ba72cbdf340d15eb2870a4f7bb6b", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-narrow-ptr-bounds-1.c", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-narrow-ptr-bounds-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-narrow-ptr-bounds-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-narrow-ptr-bounds-1.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,13 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#include \"mpx-check.h\"\n-\n-int buf[100];\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  assert (buf + 10 == __bnd_narrow_ptr_bounds (buf + 10, buf, 4));\n-  return 0;\n-}"}, {"sha": "21a8f927f4751202ffddb6e21cd3f3f330dd128f", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-narrow-ptr-bounds-2-lbv.c", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-narrow-ptr-bounds-2-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-narrow-ptr-bounds-2-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-narrow-ptr-bounds-2-lbv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,17 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-int buf[100];\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  int *p = __bnd_narrow_ptr_bounds (buf - 10, buf, sizeof (int) * 20);\n-  p[9] = argc;\n-  return 0;\n-}"}, {"sha": "8182d029e07c1753a70a28c6bfc27f6d84a5851c", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-narrow-ptr-bounds-2-nov.c", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-narrow-ptr-bounds-2-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-narrow-ptr-bounds-2-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-narrow-ptr-bounds-2-nov.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,15 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#include \"mpx-check.h\"\n-\n-int buf[100];\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  int *p = __bnd_narrow_ptr_bounds (buf - 10, buf, sizeof (int) * 20);\n-  p[10] = argc;\n-  p[19] = argc;\n-  return 0;\n-}"}, {"sha": "6ff90cee593ec2e7bde6a6c150bdaa3cca1e457d", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-narrow-ptr-bounds-2-ubv.c", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-narrow-ptr-bounds-2-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-narrow-ptr-bounds-2-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-narrow-ptr-bounds-2-ubv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,17 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-int buf[100];\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  int *p = __bnd_narrow_ptr_bounds (buf - 10, buf, sizeof (int) * 20);\n-  p[20] = argc;\n-  return 0;\n-}"}, {"sha": "69b4a51b490bbc66cba3d41f060b20420f2c7809", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-narrow-ptr-bounds-3-lbv.c", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-narrow-ptr-bounds-3-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-narrow-ptr-bounds-3-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-narrow-ptr-bounds-3-lbv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,17 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-int buf[100];\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  int *p = __bnd_narrow_ptr_bounds (buf + 10, buf, sizeof (int) * 100);\n-  p[-1] = argc;\n-  return 0;\n-}"}, {"sha": "0c13b123d8ff2ecb58b9672a7f595b054830a2bc", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-narrow-ptr-bounds-3-nov.c", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-narrow-ptr-bounds-3-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-narrow-ptr-bounds-3-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-narrow-ptr-bounds-3-nov.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,15 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#include \"mpx-check.h\"\n-\n-int buf[100];\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  int *p = __bnd_narrow_ptr_bounds (buf + 10, buf, sizeof (int) * 100);\n-  p[0] = argc;\n-  p[89] = argc;\n-  return 0;\n-}"}, {"sha": "445e337583467bbdb9d8c914b5827747b9e64277", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-narrow-ptr-bounds-3-ubv.c", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-narrow-ptr-bounds-3-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-narrow-ptr-bounds-3-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-narrow-ptr-bounds-3-ubv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,17 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-int buf[100];\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  int *p = __bnd_narrow_ptr_bounds (buf + 10, buf, sizeof (int) * 100);\n-  p[90] = argc;\n-  return 0;\n-}"}, {"sha": "144855cfabdfe225b3bab165dcade6f653a5f3ef", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-narrow-ptr-bounds-4.c", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-narrow-ptr-bounds-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-narrow-ptr-bounds-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-narrow-ptr-bounds-4.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,13 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-fno-check-pointer-bounds\" } */\n-\n-\n-#include \"mpx-check.h\"\n-\n-int buf[100];\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  assert (buf - 10 == __bnd_narrow_ptr_bounds (buf - 10, buf, 4));\n-  return 0;\n-}"}, {"sha": "5497ef1d2daab2af79b2c1608f4b84093843dd6b", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-null-ptr-bounds-1-bbv.c", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-null-ptr-bounds-1-bbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-null-ptr-bounds-1-bbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-null-ptr-bounds-1-bbv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,17 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-int buf[100];\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  int *p = __bnd_null_ptr_bounds (buf + 10);\n-  p[0] = argc;\n-  return 0;\n-}"}, {"sha": "8abb2576654604cab24e77e2f4d67aae1dc93e2b", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-set-ptr-bounds-1.c", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-set-ptr-bounds-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-set-ptr-bounds-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-set-ptr-bounds-1.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,13 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#include \"mpx-check.h\"\n-\n-int buf[100];\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  assert (buf + 10 == __bnd_set_ptr_bounds (buf + 10, 4));\n-  return 0;\n-}"}, {"sha": "bbc578abd2c711b24b65d657160f0e7fe9dc296e", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-set-ptr-bounds-2-lbv.c", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-set-ptr-bounds-2-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-set-ptr-bounds-2-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-set-ptr-bounds-2-lbv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,17 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-int buf[100];\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  int *p = __bnd_set_ptr_bounds (buf + 10, sizeof (int) * 10);\n-  p[-1] = argc;\n-  return 0;\n-}"}, {"sha": "39df101ad5033ae4a346905be82e76eb73b1dd9f", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-set-ptr-bounds-2-nov.c", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-set-ptr-bounds-2-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-set-ptr-bounds-2-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-set-ptr-bounds-2-nov.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,15 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#include \"mpx-check.h\"\n-\n-int buf[100];\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  int *p = __bnd_set_ptr_bounds (buf + 10, sizeof (int) * 10);\n-  p[0] = argc;\n-  p[9] = argc;\n-  return 0;\n-}"}, {"sha": "c2d27e7106552619a99068de9307277921474a84", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-set-ptr-bounds-2-ubv.c", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-set-ptr-bounds-2-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-set-ptr-bounds-2-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-set-ptr-bounds-2-ubv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,17 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-int buf[100];\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  int *p = __bnd_set_ptr_bounds (buf + 10, sizeof (int) * 10);\n-  p[10] = argc;\n-  return 0;\n-}"}, {"sha": "811cdb4e11621f123f9cc1cab911fbd47ea1e509", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-set-ptr-bounds-3.c", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-set-ptr-bounds-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-set-ptr-bounds-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-set-ptr-bounds-3.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,13 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-fno-check-pointer-bounds\" } */\n-\n-\n-#include \"mpx-check.h\"\n-\n-int buf[100];\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  assert (buf + 10 == __bnd_set_ptr_bounds (buf + 10, sizeof (int) * 10));\n-  return 0;\n-}"}, {"sha": "af6c8dbe59c8dbd8fa065507d9d385266de038cb", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-store-ptr-bounds-1-lbv.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-store-ptr-bounds-1-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-store-ptr-bounds-1-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-store-ptr-bounds-1-lbv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,20 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-int buf[100];\n-int *p;\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  int *p1 = __bnd_set_ptr_bounds (buf + 10, sizeof (int) * 10);\n-  p = buf;\n-  __bnd_store_ptr_bounds ((void **)&p, p1 - 10);\n-  p[9] = argc;\n-  return 0;\n-}"}, {"sha": "9e9ea305ae85354ed73268d53cb3df7ef6625e93", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-store-ptr-bounds-1-nov.c", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-store-ptr-bounds-1-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-store-ptr-bounds-1-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-store-ptr-bounds-1-nov.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,18 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#include \"mpx-check.h\"\n-\n-int buf[100];\n-int *p;\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  int *p1 = __bnd_set_ptr_bounds (buf + 10, sizeof (int) * 10);\n-  p = buf;\n-  __bnd_store_ptr_bounds ((void **)&p, p1 - 10);\n-  p[10] = argc;\n-  p[19] = argc;\n-  return 0;\n-}"}, {"sha": "62aca8c131bc500742603f5e5908212462cdf4d2", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-store-ptr-bounds-1-ubv.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-store-ptr-bounds-1-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-store-ptr-bounds-1-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-store-ptr-bounds-1-ubv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,20 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-int buf[100];\n-int *p;\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  int *p1 = __bnd_set_ptr_bounds (buf + 10, sizeof (int) * 10);\n-  p = buf;\n-  __bnd_store_ptr_bounds ((void **)&p, p1 - 10);\n-  p[20] = argc;\n-  return 0;\n-}"}, {"sha": "a2ca7900915c11348ffabfed66698affcc2d976b", "filename": "gcc/testsuite/gcc.target/i386/mpx/builtin-bnd-store-ptr-bounds-2.c", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-store-ptr-bounds-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-store-ptr-bounds-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fbuiltin-bnd-store-ptr-bounds-2.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,16 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-fno-check-pointer-bounds\" } */\n-\n-\n-#include \"mpx-check.h\"\n-\n-int buf[100];\n-int *p;\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  int *p1 = __bnd_set_ptr_bounds (buf + 10, sizeof (int) * 10);\n-  p = buf;\n-  __bnd_store_ptr_bounds ((void **)&p, p1);\n-  return 0;\n-}"}, {"sha": "0ba5d73229d1c2f14ca6e502c40771fc74e577a3", "filename": "gcc/testsuite/gcc.target/i386/mpx/calloc-1-lbv.c", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fcalloc-1-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fcalloc-1-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fcalloc-1-lbv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,26 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-int rd (int *p, int i)\n-{\n-  int res = p[i];\n-  printf (\"%d\\n\", res);\n-  return res;\n-}\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  int *buf = (int *)calloc (100, sizeof(int));\n-\n-  rd (buf, -1);\n-\n-  free (buf);\n-\n-  return 0;\n-}"}, {"sha": "cb755e573910324f7e3fee71e0193d1cc362fba7", "filename": "gcc/testsuite/gcc.target/i386/mpx/calloc-1-nov.c", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fcalloc-1-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fcalloc-1-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fcalloc-1-nov.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,24 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#include \"mpx-check.h\"\n-\n-int rd (int *p, int i)\n-{\n-  int res = p[i];\n-  printf (\"%d\\n\", res);\n-  return res;\n-}\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  int *buf = (int *)calloc (100, sizeof(int));\n-\n-  rd (buf, 0);\n-  rd (buf, 99);\n-\n-  free (buf);\n-\n-  return 0;\n-}"}, {"sha": "a932a8c7b47d432b1ef713e7d54a919045418ad2", "filename": "gcc/testsuite/gcc.target/i386/mpx/calloc-1-ubv.c", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fcalloc-1-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fcalloc-1-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fcalloc-1-ubv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,26 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-int rd (int *p, int i)\n-{\n-  int res = p[i];\n-  printf (\"%d\\n\", res);\n-  return res;\n-}\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  int *buf = (int *)calloc (100, sizeof(int));\n-\n-  rd (buf, 100);\n-\n-  free (buf);\n-\n-  return 0;\n-}"}, {"sha": "cb4d22984b66566e4e7df2ecfcd6c05bccfcddc1", "filename": "gcc/testsuite/gcc.target/i386/mpx/chkp-fix-calls-1.c", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fchkp-fix-calls-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fchkp-fix-calls-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fchkp-fix-calls-1.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,16 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-O2 -fcheck-pointer-bounds -mmpx\" } */\n-\n-#include \"math.h\"\n-\n-double\n-test1 (double x, double y, double (*fn)(double, double))\n-{\n-  return fn (x, y);\n-}\n-\n-double\n-test2 (double x, double y)\n-{\n-  return test1 (x, y, copysign);\n-}"}, {"sha": "951e7dece199ff7964f0a9b65fd48bec24dcba78", "filename": "gcc/testsuite/gcc.target/i386/mpx/chkp-fix-calls-2.c", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fchkp-fix-calls-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fchkp-fix-calls-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fchkp-fix-calls-2.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,16 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-O3 -fcheck-pointer-bounds -mmpx -fno-inline\" } */\n-\n-#include \"math.h\"\n-\n-double\n-test1 (double x, double y, double (*fn)(double, double))\n-{\n-  return fn (x, y);\n-}\n-\n-double\n-test2 (double x, double y)\n-{\n-  return test1 (x, y, copysign);\n-}"}, {"sha": "439f631a3b932d70618cc67f4a1752e9f4b27878", "filename": "gcc/testsuite/gcc.target/i386/mpx/chkp-fix-calls-3.c", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fchkp-fix-calls-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fchkp-fix-calls-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fchkp-fix-calls-3.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,33 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-O2 -fexceptions -fcheck-pointer-bounds -mmpx\" } */\n-\n-extern int f2 (const char*, int, ...);\n-extern long int f3 (int *);\n-extern void err (void) __attribute__((__error__(\"error\")));\n-\n-extern __inline __attribute__ ((__always_inline__)) int\n-f1 (int i, ...)\n-{\n-  if (__builtin_constant_p (i))\n-    {\n-      if (i)\n-\terr ();\n-      return f2 (\"\", i);\n-    }\n-\n-  return f2 (\"\", i);\n-}\n-\n-int\n-test ()\n-{\n-  int i;\n-\n-  if (f1 (0))\n-    if (f3 (&i))\n-      i = 0;\n-\n-  return i;\n-}\n-\n-"}, {"sha": "1b7d7032ecb1874fbe75040f1eac7db75043dd9c", "filename": "gcc/testsuite/gcc.target/i386/mpx/chkp-fix-calls-4.c", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fchkp-fix-calls-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fchkp-fix-calls-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fchkp-fix-calls-4.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,17 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-Os -fcheck-pointer-bounds -mmpx\" } */\n-\n-typedef void (func) (int *);\n-\n-static inline void\n-bar (func f)\n-{\n-  int i;\n-  f (&i);\n-}\n-\n-void\n-foo ()\n-{\n-  bar (0);\n-}"}, {"sha": "26d3c48a6214c6292767171f4724af9b10ff9d91", "filename": "gcc/testsuite/gcc.target/i386/mpx/chkp-thunk-comdat-1.cc", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fchkp-thunk-comdat-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fchkp-thunk-comdat-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fchkp-thunk-comdat-1.cc?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,18 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-O2 -fcheck-pointer-bounds -mmpx\" } */\n-\n-namespace\n-{\n-  template <int dim>\n-  int __attribute__((noinline))\n-  f1 ()\n-  {\n-    return dim;\n-  }\n-}\n-\n-int\n-test ()\n-{\n-  return f1<3> ();\n-}"}, {"sha": "2b1abe9b67d6c8034f1b7e444a56b967dbf9e058", "filename": "gcc/testsuite/gcc.target/i386/mpx/chkp-thunk-comdat-2.cc", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fchkp-thunk-comdat-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fchkp-thunk-comdat-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fchkp-thunk-comdat-2.cc?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,26 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-O2 -fcheck-pointer-bounds -mmpx\" } */\n-\n-class c1\n-{\n-public:\n-  virtual int test1 (const char *);\n-};\n-\n-class c2\n-{\n-public:\n-  int test2 (const char *);\n-};\n-\n-int\n-c1::test1 (const char *)\n-{\n-  return 0;\n-}\n-\n-int\n-c2::test2 (const char *)\n-{\n-  return 0;\n-}"}, {"sha": "dd0057e298195a953656794eacecfc6e62a486ec", "filename": "gcc/testsuite/gcc.target/i386/mpx/chkp-thunk-comdat-3.c", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fchkp-thunk-comdat-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fchkp-thunk-comdat-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fchkp-thunk-comdat-3.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,23 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx -O -fvisibility=hidden\" } */\n-\n-int val;\n-\n-static int __attribute__((noinline))\n-test1 ()\n-{\n-  return val;\n-}\n-\n-static int __attribute__((bnd_legacy,noinline))\n-test2 ()\n-{\n-  return test1 ();\n-}\n-\n-int\n-test3 (void)\n-{\n-  return test2 ();\n-}\n-"}, {"sha": "6f9ba88fed5d277c02c9366a8e97b000e026eb86", "filename": "gcc/testsuite/gcc.target/i386/mpx/fastcall-1-lbv.c", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffastcall-1-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffastcall-1-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffastcall-1-lbv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,26 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-require-effective-target ia32 } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-__attribute__((fastcall)) int rd (int *p1, int *p2, int i)\n-{\n-  int res = p1[i];\n-  printf (\"%d\\n\", res);\n-  return res;\n-}\n-\n-int buf[100];\n-int buf1[10];\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  rd (buf1, buf, -1);\n-\n-  return 0;\n-}"}, {"sha": "6a2896e0125081a82387dac1bd20bee65d073837", "filename": "gcc/testsuite/gcc.target/i386/mpx/fastcall-1-nov.c", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffastcall-1-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffastcall-1-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffastcall-1-nov.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,24 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-require-effective-target ia32 } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#include \"mpx-check.h\"\n-\n-__attribute__((fastcall)) int rd (int *p1, int *p2, int i)\n-{\n-  int res = p1[i];\n-  printf (\"%d\\n\", res);\n-  return res;\n-}\n-\n-int buf[100];\n-int buf1[10];\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  rd (buf1, buf, 0);\n-  rd (buf1, buf, 9);\n-\n-  return 0;\n-}"}, {"sha": "b5edc438f27e9871cfecc8f48bef7ee1fca033c4", "filename": "gcc/testsuite/gcc.target/i386/mpx/fastcall-1-ubv.c", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffastcall-1-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffastcall-1-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffastcall-1-ubv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,26 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-require-effective-target ia32 } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-__attribute__((fastcall)) int rd (int *p1, int *p2, int i)\n-{\n-  int res = p1[i];\n-  printf (\"%d\\n\", res);\n-  return res;\n-}\n-\n-int buf[100];\n-int buf1[10];\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  rd (buf1, buf, 10);\n-\n-  return 0;\n-}"}, {"sha": "cbe7343e018d8f494fd31c9eee899fc9b10f6243", "filename": "gcc/testsuite/gcc.target/i386/mpx/fastcall-2-lbv.c", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffastcall-2-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffastcall-2-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffastcall-2-lbv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,26 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-require-effective-target ia32 } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-__attribute__((fastcall)) int rd (int *p1, int *p2, int i)\n-{\n-  int res = p2[i];\n-  printf (\"%d\\n\", res);\n-  return res;\n-}\n-\n-int buf[100];\n-int buf1[10];\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  rd (buf, buf1, -1);\n-\n-  return 0;\n-}"}, {"sha": "83773d0d90c3b59ff58f43e663f2137001c736a7", "filename": "gcc/testsuite/gcc.target/i386/mpx/fastcall-2-nov.c", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffastcall-2-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffastcall-2-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffastcall-2-nov.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,24 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-require-effective-target ia32 } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#include \"mpx-check.h\"\n-\n-__attribute__((fastcall)) int rd (int *p1, int *p2, int i)\n-{\n-  int res = p2[i];\n-  printf (\"%d\\n\", res);\n-  return res;\n-}\n-\n-int buf[100];\n-int buf1[10];\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  rd (buf, buf1, 0);\n-  rd (buf, buf1, 9);\n-\n-  return 0;\n-}"}, {"sha": "1a614fa3610510f76d04b1758baa9a3f335dee2a", "filename": "gcc/testsuite/gcc.target/i386/mpx/fastcall-2-ubv.c", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffastcall-2-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffastcall-2-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffastcall-2-ubv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,26 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-require-effective-target ia32 } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-__attribute__((fastcall)) int rd (int *p1, int *p2, int i)\n-{\n-  int res = p2[i];\n-  printf (\"%d\\n\", res);\n-  return res;\n-}\n-\n-int buf[100];\n-int buf1[10];\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  rd (buf, buf1, 10);\n-\n-  return 0;\n-}"}, {"sha": "46a58123bf4930a01d2d03577c13d6b948681059", "filename": "gcc/testsuite/gcc.target/i386/mpx/field-addr-1-lbv.c", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-1-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-1-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-1-lbv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,29 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-struct S {\n-  int a;\n-  int b[100];\n-  int c;\n-} S;\n-\n-int foo (int *i, int k)\n-{\n-  printf (\"%d\\n\", i[k]);\n-  return i[k];\n-}\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  struct S s;\n-\n-  foo(&s.a, -1);\n-\n-  return 0;\n-}"}, {"sha": "b8500ff333d37b72760cb50344301d381edd276e", "filename": "gcc/testsuite/gcc.target/i386/mpx/field-addr-1-nov.c", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-1-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-1-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-1-nov.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,27 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#include \"mpx-check.h\"\n-\n-struct S {\n-  int a;\n-  int b[100];\n-  int c;\n-} S;\n-\n-int foo (int *i, int k)\n-{\n-  printf (\"%d\\n\", i[k]);\n-  return i[k];\n-}\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  struct S s;\n-\n-  foo(&s.a, 0);\n-  foo(&s.a, 101);\n-\n-  return 0;\n-}"}, {"sha": "990adee3bb2223abea3cd4155f613928b753f0ab", "filename": "gcc/testsuite/gcc.target/i386/mpx/field-addr-1-ubv.c", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-1-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-1-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-1-ubv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,29 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-struct S {\n-  int a;\n-  int b[100];\n-  int c;\n-} S;\n-\n-int foo (int *i, int k)\n-{\n-  printf (\"%d\\n\", i[k]);\n-  return i[k];\n-}\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  struct S s;\n-\n-  foo(&s.a, 102);\n-\n-  return 0;\n-}"}, {"sha": "cd8d59afd22fbed0e051792f27ef8898fac08c9c", "filename": "gcc/testsuite/gcc.target/i386/mpx/field-addr-10-lbv.c", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-10-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-10-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-10-lbv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,29 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-/* { dg-additional-options \"-fchkp-narrow-to-innermost-array\" } */\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-struct S {\n-  int arr[100];\n-} S;\n-\n-struct S sa[10];\n-\n-int rd (int *p, int i)\n-{\n-  int res = p[i];\n-  printf (\"%d\\n\", res);\n-  return res;\n-}\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  rd (&sa[argc].arr[0], -1);\n-\n-  return 0;\n-}"}, {"sha": "90f79a0eaed0e7708ef004636d2d76606805eddf", "filename": "gcc/testsuite/gcc.target/i386/mpx/field-addr-10-nov.c", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-10-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-10-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-10-nov.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,27 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-/* { dg-additional-options \"-fchkp-narrow-to-innermost-array\" } */\n-\n-#include \"mpx-check.h\"\n-\n-struct S {\n-  int arr[100];\n-} S;\n-\n-struct S sa[10];\n-\n-int rd (int *p, int i)\n-{\n-  int res = p[i];\n-  printf (\"%d\\n\", res);\n-  return res;\n-}\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  rd (&sa[argc].arr[0], 0);\n-  rd (&sa[argc].arr[0], 99);\n-\n-  return 0;\n-}"}, {"sha": "b6a9ad07071bd3360d93fdf17e3e676825c70884", "filename": "gcc/testsuite/gcc.target/i386/mpx/field-addr-10-ubv.c", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-10-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-10-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-10-ubv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,29 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-/* { dg-additional-options \"-fchkp-narrow-to-innermost-array\" } */\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-struct S {\n-  int arr[100];\n-} S;\n-\n-struct S sa[10];\n-\n-int rd (int *p, int i)\n-{\n-  int res = p[i];\n-  printf (\"%d\\n\", res);\n-  return res;\n-}\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  rd (&sa[argc].arr[0], 100);\n-\n-  return 0;\n-}"}, {"sha": "fdf39672315afc6233daa86f65d08fdf9c8b09e5", "filename": "gcc/testsuite/gcc.target/i386/mpx/field-addr-2-lbv.c", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-2-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-2-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-2-lbv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,30 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-/* { dg-additional-options \"-fchkp-first-field-has-own-bounds\" } */\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-struct S {\n-  int a;\n-  int b[100];\n-  int c;\n-} S;\n-\n-int foo (int *i, int k)\n-{\n-  printf (\"%d\\n\", i[k]);\n-  return i[k];\n-}\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  struct S s;\n-\n-  foo(&s.a, -1);\n-\n-  return 0;\n-}"}, {"sha": "2a685036ca0a5ca483f3505f3d2a3020ef09feb8", "filename": "gcc/testsuite/gcc.target/i386/mpx/field-addr-2-nov.c", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-2-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-2-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-2-nov.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,27 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-/* { dg-additional-options \"-fchkp-first-field-has-own-bounds\" } */\n-\n-#include \"mpx-check.h\"\n-\n-struct S {\n-  int a;\n-  int b[100];\n-  int c;\n-} S;\n-\n-int foo (int *i, int k)\n-{\n-  printf (\"%d\\n\", i[k]);\n-  return i[k];\n-}\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  struct S s;\n-\n-  foo(&s.a, 0);\n-\n-  return 0;\n-}"}, {"sha": "b07b09ff808aab5f843e3762e6ece2c644d1b391", "filename": "gcc/testsuite/gcc.target/i386/mpx/field-addr-2-ubv.c", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-2-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-2-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-2-ubv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,30 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-/* { dg-additional-options \"-fchkp-first-field-has-own-bounds\" } */\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-struct S {\n-  int a;\n-  int b[100];\n-  int c;\n-} S;\n-\n-int foo (int *i, int k)\n-{\n-  printf (\"%d\\n\", i[k]);\n-  return i[k];\n-}\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  struct S s;\n-\n-  foo(&s.a, 1);\n-\n-  return 0;\n-}"}, {"sha": "ea919d80fbc9517c18c90f74693a535fe6a06a5e", "filename": "gcc/testsuite/gcc.target/i386/mpx/field-addr-3-lbv.c", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-3-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-3-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-3-lbv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,29 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-struct S {\n-  int a;\n-  int b[100];\n-  int c;\n-} S;\n-\n-int foo (int *p, int i)\n-{\n-  printf (\"%d\\n\", p[i]);\n-  return p[i];\n-}\n-\n-struct S s;\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  foo (&s.b[0], -1);\n-\n-  return 0;\n-}"}, {"sha": "12f42c4d2897dbe2992df7bd4457e311edfb80b9", "filename": "gcc/testsuite/gcc.target/i386/mpx/field-addr-3-nov.c", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-3-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-3-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-3-nov.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,27 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#include \"mpx-check.h\"\n-\n-struct S {\n-  int a;\n-  int b[100];\n-  int c;\n-} S;\n-\n-int foo (int *p, int i)\n-{\n-  printf (\"%d\\n\", p[i]);\n-  return p[i];\n-}\n-\n-struct S s;\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  foo (&s.b[0], 0);\n-  foo (&s.b[0], 99);\n-\n-  return 0;\n-}"}, {"sha": "55a8af3a0ce97822d82ffd6bb757dae5ef9a255f", "filename": "gcc/testsuite/gcc.target/i386/mpx/field-addr-3-ubv.c", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-3-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-3-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-3-ubv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,29 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-struct S {\n-  int a;\n-  int b[100];\n-  int c;\n-} S;\n-\n-int foo (int *p, int i)\n-{\n-  printf (\"%d\\n\", p[i]);\n-  return p[i];\n-}\n-\n-struct S s;\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  foo (&s.b[0], 100);\n-\n-  return 0;\n-}"}, {"sha": "23cf71ed6dfaecac5608af3d384d75a37170bfea", "filename": "gcc/testsuite/gcc.target/i386/mpx/field-addr-4-lbv.c", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-4-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-4-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-4-lbv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,35 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-struct S {\n-  int a;\n-  int b[100];\n-  int c;\n-} S;\n-\n-struct S1 {\n-  int x;\n-  struct S a[10];\n-  struct S b;\n-} S1;\n-\n-int foo (int *p, int i)\n-{\n-  printf (\"%d\\n\", p[i]);\n-  return p[i];\n-}\n-\n-struct S1 s1;\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  foo (&s1.a[0].a, -1);\n-\n-  return 0;\n-}"}, {"sha": "791753244f3bf3f582a4a88d1acef650c3c151ef", "filename": "gcc/testsuite/gcc.target/i386/mpx/field-addr-4-nov.c", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-4-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-4-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-4-nov.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,33 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#include \"mpx-check.h\"\n-\n-struct S {\n-  int a;\n-  int b[100];\n-  int c;\n-} S;\n-\n-struct S1 {\n-  int x;\n-  struct S a[10];\n-  struct S b;\n-} S1;\n-\n-int foo (int *p, int i)\n-{\n-  printf (\"%d\\n\", p[i]);\n-  return p[i];\n-}\n-\n-struct S1 s1;\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  foo (&s1.a[9].c, 0);\n-  foo (&s1.a[0].a, 0);\n-\n-  return 0;\n-}"}, {"sha": "0d4ac020cf3733e2055e5c76692bb7c490c39022", "filename": "gcc/testsuite/gcc.target/i386/mpx/field-addr-4-ubv.c", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-4-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-4-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-4-ubv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,35 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-struct S {\n-  int a;\n-  int b[100];\n-  int c;\n-} S;\n-\n-struct S1 {\n-  int x;\n-  struct S a[10];\n-  struct S b;\n-} S1;\n-\n-int foo (int *p, int i)\n-{\n-  printf (\"%d\\n\", p[i]);\n-  return p[i];\n-}\n-\n-struct S1 s1;\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  foo (&s1.a[9].c, 1);\n-\n-  return 0;\n-}"}, {"sha": "c00d42f3213ffee6fd4754cbc7e73f6a279151ea", "filename": "gcc/testsuite/gcc.target/i386/mpx/field-addr-5-lbv.c", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-5-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-5-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-5-lbv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,35 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-struct S {\n-  int a;\n-  int b[100];\n-  int c;\n-} S;\n-\n-struct S1 {\n-  int x;\n-  struct S a[10];\n-  struct S b;\n-} S1;\n-\n-int foo (int *p, int i)\n-{\n-  printf (\"%d\\n\", p[i]);\n-  return p[i];\n-}\n-\n-struct S1 s1;\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  foo (&s1.b.b[0], -1);\n-\n-  return 0;\n-}"}, {"sha": "b69895e1d2060a23c39b607510dff905112cff21", "filename": "gcc/testsuite/gcc.target/i386/mpx/field-addr-5-nov.c", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-5-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-5-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-5-nov.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,33 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#include \"mpx-check.h\"\n-\n-struct S {\n-  int a;\n-  int b[100];\n-  int c;\n-} S;\n-\n-struct S1 {\n-  int x;\n-  struct S a[10];\n-  struct S b;\n-} S1;\n-\n-int foo (int *p, int i)\n-{\n-  printf (\"%d\\n\", p[i]);\n-  return p[i];\n-}\n-\n-struct S1 s1;\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  foo (&s1.b.b[0], 0);\n-  foo (&s1.b.b[0], 99);\n-\n-  return 0;\n-}"}, {"sha": "d00f41eb86e7cdcbe6ebc276adb0a04cad3f3489", "filename": "gcc/testsuite/gcc.target/i386/mpx/field-addr-5-ubv.c", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-5-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-5-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-5-ubv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,35 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-struct S {\n-  int a;\n-  int b[100];\n-  int c;\n-} S;\n-\n-struct S1 {\n-  int x;\n-  struct S a[10];\n-  struct S b;\n-} S1;\n-\n-int foo (int *p, int i)\n-{\n-  printf (\"%d\\n\", p[i]);\n-  return p[i];\n-}\n-\n-struct S1 s1;\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  foo (&s1.b.b[0], 100);\n-\n-  return 0;\n-}"}, {"sha": "91b64bf462d6203e47e697f74490f97143ef3b38", "filename": "gcc/testsuite/gcc.target/i386/mpx/field-addr-6-lbv.c", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-6-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-6-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-6-lbv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,36 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-struct S {\n-  int a;\n-  int b[100];\n-  int c;\n-} S;\n-\n-struct S1 {\n-  int x;\n-  struct S a[10];\n-  struct S b;\n-} S1;\n-\n-int foo (int *p, int i)\n-{\n-  printf (\"%d\\n\", p[i]);\n-  return p[i];\n-}\n-\n-struct S1 s1;\n-struct S1 *s2 = &s1;\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  foo (&(s2->a[0].a), -1);\n-\n-  return 0;\n-}"}, {"sha": "f837f57a4218d293aecca8d6aa9d40bad2d030fc", "filename": "gcc/testsuite/gcc.target/i386/mpx/field-addr-6-nov.c", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-6-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-6-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-6-nov.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,34 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#include \"mpx-check.h\"\n-\n-struct S {\n-  int a;\n-  int b[100];\n-  int c;\n-} S;\n-\n-struct S1 {\n-  int x;\n-  struct S a[10];\n-  struct S b;\n-} S1;\n-\n-int foo (int *p, int i)\n-{\n-  printf (\"%d\\n\", p[i]);\n-  return p[i];\n-}\n-\n-struct S1 s1;\n-struct S1 *s2 = &s1;\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  foo (&(s2->a[0].a), 0);\n-  foo (&(s2->a[9].a), 101);\n-\n-  return 0;\n-}"}, {"sha": "97ef911406eeb26bf1ef5fe6fbbb3d137a6831c9", "filename": "gcc/testsuite/gcc.target/i386/mpx/field-addr-6-ubv.c", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-6-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-6-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-6-ubv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,36 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-struct S {\n-  int a;\n-  int b[100];\n-  int c;\n-} S;\n-\n-struct S1 {\n-  int x;\n-  struct S a[10];\n-  struct S b;\n-} S1;\n-\n-int foo (int *p, int i)\n-{\n-  printf (\"%d\\n\", p[i]);\n-  return p[i];\n-}\n-\n-struct S1 s1;\n-struct S1 *s2 = &s1;\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  foo (&(s2->a[9].a), 102);\n-\n-  return 0;\n-}"}, {"sha": "176971168e51b10fa5cce80575bc9383dffaecc6", "filename": "gcc/testsuite/gcc.target/i386/mpx/field-addr-7-lbv.c", "status": "removed", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-7-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-7-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-7-lbv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,42 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-struct S {\n-  int a[10];\n-  int b;\n-} S;\n-\n-struct S1 {\n-  int a;\n-  struct S b[10];\n-  int c;\n-} S1;\n-\n-struct S2 {\n-  int x;\n-  struct S1 a[10];\n-  struct S1 b;\n-} S2;\n-\n-int foo (int *p, int i)\n-{\n-  int res = p[i];\n-  printf (\"%d\\n\", res);\n-  return res;\n-}\n-\n-struct S2 s1;\n-struct S2 *s2 = &s1;\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  foo (&(s2->a[-1].a), 0);\n-\n-  return 0;\n-}"}, {"sha": "19c09b8271ea53f25384bee5ea3e0b72eba60424", "filename": "gcc/testsuite/gcc.target/i386/mpx/field-addr-7-nov.c", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-7-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-7-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-7-nov.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,40 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#include \"mpx-check.h\"\n-\n-struct S {\n-  int a[10];\n-  int b;\n-} S;\n-\n-struct S1 {\n-  int a;\n-  struct S b[10];\n-  int c;\n-} S1;\n-\n-struct S2 {\n-  int x;\n-  struct S1 a[10];\n-  struct S1 b;\n-} S2;\n-\n-int foo (int *p, int i)\n-{\n-  int res = p[i];\n-  printf (\"%d\\n\", res);\n-  return res;\n-}\n-\n-struct S2 s1;\n-struct S2 *s2 = &s1;\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  foo (&(s2->a[0].a), 0);\n-  foo (&(s2->a[9].c), 0);\n-\n-  return 0;\n-}"}, {"sha": "c9e8ae2442c47a8cb9f625a84760e4f6d8fc9846", "filename": "gcc/testsuite/gcc.target/i386/mpx/field-addr-7-ubv.c", "status": "removed", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-7-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-7-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-7-ubv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,42 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-struct S {\n-  int a[10];\n-  int b;\n-} S;\n-\n-struct S1 {\n-  int a;\n-  struct S b[10];\n-  int c;\n-} S1;\n-\n-struct S2 {\n-  int x;\n-  struct S1 a[10];\n-  struct S1 b;\n-} S2;\n-\n-int foo (int *p, int i)\n-{\n-  int res = p[i];\n-  printf (\"%d\\n\", res);\n-  return res;\n-}\n-\n-struct S2 s1;\n-struct S2 *s2 = &s1;\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  foo (&(s2->a[10].a), 0);\n-\n-  return 0;\n-}"}, {"sha": "cac6784175b5e292e520b56e9e259dec561da8a3", "filename": "gcc/testsuite/gcc.target/i386/mpx/field-addr-8-lbv.c", "status": "removed", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-8-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-8-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-8-lbv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,43 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-/* { dg-additional-options \"-fchkp-narrow-to-innermost-array\" } */\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-struct S {\n-  int a[10];\n-  int b;\n-} S;\n-\n-struct S1 {\n-  int a;\n-  struct S b[10];\n-  int c;\n-} S1;\n-\n-struct S2 {\n-  int x;\n-  struct S1 a[10];\n-  struct S1 b;\n-} S2;\n-\n-int foo (int *p, int i)\n-{\n-  int res = p[i];\n-  printf (\"%d\\n\", res);\n-  return res;\n-}\n-\n-struct S2 s1;\n-struct S2 *s2 = &s1;\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  foo (&(s1.a[argc].b[-1].a[0]), 9);\n-\n-  return 0;\n-}"}, {"sha": "e7243a989f9ed49b844559556bd300de5b1a2e30", "filename": "gcc/testsuite/gcc.target/i386/mpx/field-addr-8-nov.c", "status": "removed", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-8-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-8-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-8-nov.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,43 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-/* { dg-additional-options \"-fchkp-narrow-to-innermost-array\" } */\n-\n-#include \"mpx-check.h\"\n-\n-struct S {\n-  int a[10];\n-  int b;\n-} S;\n-\n-struct S1 {\n-  int a;\n-  struct S b[10];\n-  int c;\n-} S1;\n-\n-struct S2 {\n-  int x;\n-  struct S1 a[10];\n-  struct S1 b;\n-} S2;\n-\n-int foo (int *p, int i)\n-{\n-  int res = p[i];\n-  printf (\"%d\\n\", res);\n-  return res;\n-}\n-\n-struct S2 s1;\n-struct S2 *s2 = &s1;\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  foo (&(s1.a[argc].b[0].a[0]), 0);\n-  foo (&(s1.a[argc].b[0].a[0]), 9);\n-  foo (&(s1.a[argc].b[9].a[0]), 0);\n-  foo (&(s1.a[argc].b[9].a[0]), 9);\n-\n-  return 0;\n-}"}, {"sha": "d2792e1bba4d8d6905c99964feb84d9f46749c60", "filename": "gcc/testsuite/gcc.target/i386/mpx/field-addr-8-ubv.c", "status": "removed", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-8-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-8-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-8-ubv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,43 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-/* { dg-additional-options \"-fchkp-narrow-to-innermost-array\" } */\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-struct S {\n-  int a[10];\n-  int b;\n-} S;\n-\n-struct S1 {\n-  int a;\n-  struct S b[10];\n-  int c;\n-} S1;\n-\n-struct S2 {\n-  int x;\n-  struct S1 a[10];\n-  struct S1 b;\n-} S2;\n-\n-int foo (int *p, int i)\n-{\n-  int res = p[i];\n-  printf (\"%d\\n\", res);\n-  return res;\n-}\n-\n-struct S2 s1;\n-struct S2 *s2 = &s1;\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  foo (&(s1.a[argc].b[10].a[0]), 9);\n-\n-  return 0;\n-}"}, {"sha": "127d0966330524a37495d7514ae62b9d71b9b8ed", "filename": "gcc/testsuite/gcc.target/i386/mpx/field-addr-9-lbv.c", "status": "removed", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-9-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-9-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-9-lbv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,44 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-/* { dg-additional-options \"-fchkp-narrow-to-innermost-array\" } */\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-struct S {\n-  int first;\n-  int a[10];\n-  int b;\n-} S;\n-\n-struct S1 {\n-  int a;\n-  struct S b[10];\n-  int c;\n-} S1;\n-\n-struct S2 {\n-  int x;\n-  struct S1 a[10];\n-  struct S1 b;\n-} S2;\n-\n-int foo (int *p, int i)\n-{\n-  int res = p[i];\n-  printf (\"%d\\n\", res);\n-  return res;\n-}\n-\n-struct S2 s1;\n-struct S2 *s2 = &s1;\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  foo (&(s2->a[argc].b[5].a[0]), -1);\n-\n-  return 0;\n-}"}, {"sha": "7f98b0188a3c8551baee2bf0c3f12fb461a3191a", "filename": "gcc/testsuite/gcc.target/i386/mpx/field-addr-9-nov.c", "status": "removed", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-9-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-9-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-9-nov.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,42 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-/* { dg-additional-options \"-fchkp-narrow-to-innermost-array\" } */\n-\n-#include \"mpx-check.h\"\n-\n-struct S {\n-  int first;\n-  int a[10];\n-  int b;\n-} S;\n-\n-struct S1 {\n-  int a;\n-  struct S b[10];\n-  int c;\n-} S1;\n-\n-struct S2 {\n-  int x;\n-  struct S1 a[10];\n-  struct S1 b;\n-} S2;\n-\n-int foo (int *p, int i)\n-{\n-  int res = p[i];\n-  printf (\"%d\\n\", res);\n-  return res;\n-}\n-\n-struct S2 s1;\n-struct S2 *s2 = &s1;\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  foo (&(s2->a[argc].b[5].a[0]), 0);\n-  foo (&(s2->a[argc].b[5].a[0]), 9);\n-\n-  return 0;\n-}"}, {"sha": "a65b8f0d17fbdf4da859fc858b7719c8996ddc12", "filename": "gcc/testsuite/gcc.target/i386/mpx/field-addr-9-ubv.c", "status": "removed", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-9-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-9-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Ffield-addr-9-ubv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,44 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-/* { dg-additional-options \"-fchkp-narrow-to-innermost-array\" } */\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-struct S {\n-  int first;\n-  int a[10];\n-  int b;\n-} S;\n-\n-struct S1 {\n-  int a;\n-  struct S b[10];\n-  int c;\n-} S1;\n-\n-struct S2 {\n-  int x;\n-  struct S1 a[10];\n-  struct S1 b;\n-} S2;\n-\n-int foo (int *p, int i)\n-{\n-  int res = p[i];\n-  printf (\"%d\\n\", res);\n-  return res;\n-}\n-\n-struct S2 s1;\n-struct S2 *s2 = &s1;\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  foo (&(s2->a[argc].b[5].a[0]), 10);\n-\n-  return 0;\n-}"}, {"sha": "87cc2dd1cfcb244562d4e3518c2920f7df2882f4", "filename": "gcc/testsuite/gcc.target/i386/mpx/frame-address-1-nov.c", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fframe-address-1-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fframe-address-1-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fframe-address-1-nov.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,12 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#include \"mpx-check.h\"\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  void **fa = (void **)__builtin_frame_address (0);\n-  printf (\"%p\\n\", *fa);\n-  return 0;\n-}"}, {"sha": "8cf72e5554302ebfa5b3af60775d397b2526b464", "filename": "gcc/testsuite/gcc.target/i386/mpx/hard-reg-1-nov.c", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fhard-reg-1-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fhard-reg-1-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fhard-reg-1-nov.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,24 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#include \"mpx-check.h\"\n-\n-int rd (int *p, int i)\n-{\n-  int res = p[i];\n-  printf (\"%d\\n\", res);\n-  return res;\n-}\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-#ifdef __x86_64__\n-  register int *frame __asm__(\"rsp\");\n-#else\n-  register int *frame __asm__(\"esp\");\n-#endif\n-  rd (frame, 1);\n-\n-  return 0;\n-}"}, {"sha": "38fe59f8be99632ff2168a565f9c164f28febb91", "filename": "gcc/testsuite/gcc.target/i386/mpx/hard-reg-2-lbv.c", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fhard-reg-2-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fhard-reg-2-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fhard-reg-2-lbv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,21 +0,0 @@\n-/* { dg-do run { target sse2_runtime } } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx -msse2\" } */\n-\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-typedef int v16 __attribute__((vector_size(16)));\n-\n-int foo(int i) {\n-  register v16 u asm(\"xmm0\");\n-  return u[i];\n-}\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  printf (\"%d\\n\", foo (-1));\n-  return 0;\n-}"}, {"sha": "1db83f5b54723b7baecf063ed9583fa281c9a290", "filename": "gcc/testsuite/gcc.target/i386/mpx/hard-reg-2-nov.c", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fhard-reg-2-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fhard-reg-2-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fhard-reg-2-nov.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,18 +0,0 @@\n-/* { dg-do run { target sse2_runtime } } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx -msse2\" } */\n-\n-#include \"mpx-check.h\"\n-\n-typedef int v16 __attribute__((vector_size(16)));\n-\n-int foo (int i) {\n-  register v16 u asm (\"xmm0\");\n-  return u[i];\n-}\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  printf (\"%d\\n\", foo (3));\n-  printf (\"%d\\n\", foo (0));\n-  return 0;\n-}"}, {"sha": "66607805ca473ee606c4541e7f448b27ffb8d1b2", "filename": "gcc/testsuite/gcc.target/i386/mpx/hard-reg-2-ubv.c", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fhard-reg-2-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fhard-reg-2-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fhard-reg-2-ubv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,21 +0,0 @@\n-/* { dg-do run { target sse2_runtime } } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx -msse2\" } */\n-\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-typedef int v16 __attribute__((vector_size(16)));\n-\n-int foo (int i) {\n-  register v16 u asm (\"xmm0\");\n-  return u[i];\n-}\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  printf (\"%d\\n\", foo (5));\n-  return 0;\n-}"}, {"sha": "29fa443697f74bc0e56c02886ab82ef73a92f604", "filename": "gcc/testsuite/gcc.target/i386/mpx/if-stmt-1-lbv.c", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fif-stmt-1-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fif-stmt-1-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fif-stmt-1-lbv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,30 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-int rd (int *p1, int *p2, int i)\n-{\n-  int res;\n-\n-  if (p1 < p2)\n-    p1 = p2;\n-\n-  res = p1[i];\n-  printf (\"%d\\n\", res);\n-  return res;\n-}\n-\n-int buf[100];\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  int *p = __bnd_set_ptr_bounds (buf + 1, 40);\n-  rd (buf, p, -1);\n-\n-  return 0;\n-}"}, {"sha": "576ea8487e3daa6cbb5132257406f79034518816", "filename": "gcc/testsuite/gcc.target/i386/mpx/if-stmt-1-nov.c", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fif-stmt-1-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fif-stmt-1-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fif-stmt-1-nov.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,28 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#include \"mpx-check.h\"\n-\n-int rd (int *p1, int *p2, int i)\n-{\n-  int res;\n-\n-  if (p1 < p2)\n-    p1 = p2;\n-\n-  res = p1[i];\n-  printf (\"%d\\n\", res);\n-  return res;\n-}\n-\n-int buf[100];\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  int *p = __bnd_set_ptr_bounds (buf + 1, 40);\n-  rd (buf, p, 0);\n-  rd (buf, p, 9);\n-\n-  return 0;\n-}"}, {"sha": "021a3aed2678683cfab3a9518385e10ffa3c1b93", "filename": "gcc/testsuite/gcc.target/i386/mpx/if-stmt-1-ubv.c", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fif-stmt-1-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fif-stmt-1-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fif-stmt-1-ubv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,30 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-int rd (int *p1, int *p2, int i)\n-{\n-  int res;\n-\n-  if (p1 < p2)\n-    p1 = p2;\n-\n-  res = p1[i];\n-  printf (\"%d\\n\", res);\n-  return res;\n-}\n-\n-int buf[100];\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  int *p = __bnd_set_ptr_bounds (buf + 1, 40);\n-  rd (buf, p, 10);\n-\n-  return 0;\n-}"}, {"sha": "5d7fe6299a5332be30fb9799533370dad53dae08", "filename": "gcc/testsuite/gcc.target/i386/mpx/if-stmt-2-lbv.c", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fif-stmt-2-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fif-stmt-2-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fif-stmt-2-lbv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,30 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-int rd (int *p1, int *p2, int i)\n-{\n-  int res;\n-\n-  if (p1 > p2)\n-    p1 = p2;\n-\n-  res = p1[i];\n-  printf (\"%d\\n\", res);\n-  return res;\n-}\n-\n-int buf[100];\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  int *p = __bnd_set_ptr_bounds (buf + 1, 40);\n-  rd (buf, p, -1);\n-\n-  return 0;\n-}"}, {"sha": "327c108f7890008cdf8f7b0a56a5b2d48dda7ec8", "filename": "gcc/testsuite/gcc.target/i386/mpx/if-stmt-2-nov.c", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fif-stmt-2-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fif-stmt-2-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fif-stmt-2-nov.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,28 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#include \"mpx-check.h\"\n-\n-int rd (int *p1, int *p2, int i)\n-{\n-  int res;\n-\n-  if (p1 > p2)\n-    p1 = p2;\n-\n-  res = p1[i];\n-  printf (\"%d\\n\", res);\n-  return res;\n-}\n-\n-int buf[100];\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  int *p = __bnd_set_ptr_bounds (buf + 1, 40);\n-  rd (buf, p, 0);\n-  rd (buf, p, 99);\n-\n-  return 0;\n-}"}, {"sha": "3047f7b51041124a3532f40e9fc9e5c8988d08c7", "filename": "gcc/testsuite/gcc.target/i386/mpx/if-stmt-2-ubv.c", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fif-stmt-2-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fif-stmt-2-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fif-stmt-2-ubv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,30 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-int rd (int *p1, int *p2, int i)\n-{\n-  int res;\n-\n-  if (p1 > p2)\n-    p1 = p2;\n-\n-  res = p1[i];\n-  printf (\"%d\\n\", res);\n-  return res;\n-}\n-\n-int buf[100];\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  int *p = __bnd_set_ptr_bounds (buf + 1, 40);\n-  rd (buf, p, 100);\n-\n-  return 0;\n-}"}, {"sha": "f4cd360b1d4cd4667ae581b575355b079e5d82e7", "filename": "gcc/testsuite/gcc.target/i386/mpx/label-address-1.c", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Flabel-address-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Flabel-address-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Flabel-address-1.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,14 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#include \"mpx-check.h\"\n-\n-void *p;\n-int mpx_test (int argc, const char **argv)\n-{\n-  p = &&label;\n-\n- label:\n-  return 0;\n-}"}, {"sha": "b51ac7f0271e7253c332f9aeee9e9091d6f0f5e6", "filename": "gcc/testsuite/gcc.target/i386/mpx/legacy-1-nov.c", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Flegacy-1-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Flegacy-1-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Flegacy-1-nov.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,25 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#include \"mpx-check.h\"\n-\n-int buf[100];\n-\n-__attribute__((bnd_legacy))\n-int rd (int *p, int i)\n-{\n-  int res = p[i];\n-  printf (\"%d\\n\", res);\n-  return res;\n-}\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  int *p = __bnd_set_ptr_bounds (buf + 1, 10);\n-\n-  rd (p, -1);\n-  rd (p, 10);\n-\n-  return 0;\n-}"}, {"sha": "00d467bd19d09b98e2d1d1a0b16a6e7a16a3462d", "filename": "gcc/testsuite/gcc.target/i386/mpx/macro.c", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fmacro.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,18 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#include \"mpx-check.h\"\n-\n-#ifndef __MPX__\n-#error -mmpx is required\n-#endif\n-\n-#ifndef __CHKP__\n-#error -fcheck-pointer-bounds is required\n-#endif\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  return 0;\n-}"}, {"sha": "aa2aed983cf5cea77c5630d0143fc0d19aa3ac26", "filename": "gcc/testsuite/gcc.target/i386/mpx/malloc-1-lbv.c", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fmalloc-1-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fmalloc-1-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fmalloc-1-lbv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,26 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-int rd (int *p, int i)\n-{\n-  int res = p[i];\n-  printf (\"%d\\n\", res);\n-  return res;\n-}\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  int *buf = (int *)malloc (100 * sizeof(int));\n-\n-  rd (buf, -1);\n-\n-  free (buf);\n-\n-  return 0;\n-}"}, {"sha": "56f26e964d844dd13391a4aa5c8a48339e035010", "filename": "gcc/testsuite/gcc.target/i386/mpx/malloc-1-nov.c", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fmalloc-1-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fmalloc-1-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fmalloc-1-nov.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,24 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#include \"mpx-check.h\"\n-\n-int rd (int *p, int i)\n-{\n-  int res = p[i];\n-  printf (\"%d\\n\", res);\n-  return res;\n-}\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  int *buf = (int *)malloc (100 * sizeof(int));\n-\n-  rd (buf, 0);\n-  rd (buf, 99);\n-\n-  free (buf);\n-\n-  return 0;\n-}"}, {"sha": "6f48ec269237e98deec35403ed9f149d8cae2010", "filename": "gcc/testsuite/gcc.target/i386/mpx/malloc-1-ubv.c", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fmalloc-1-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fmalloc-1-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fmalloc-1-ubv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,26 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-int rd (int *p, int i)\n-{\n-  int res = p[i];\n-  printf (\"%d\\n\", res);\n-  return res;\n-}\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  int *buf = (int *)malloc (100 * sizeof(int));\n-\n-  rd (buf, 100);\n-\n-  free (buf);\n-\n-  return 0;\n-}"}, {"sha": "6ecbdc1a32289647a49fddc122c4fcef137fa78a", "filename": "gcc/testsuite/gcc.target/i386/mpx/memcpy-1.c", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fmemcpy-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fmemcpy-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fmemcpy-1.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,24 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-/* Fix for PR78631 */\n-\n-#define SHOULDFAIL\n-\n-#include <stdio.h>\n-#include <string.h>\n-#include \"mpx-check.h\"\n-\n-char s[10];\n-char d[10];\n-__attribute__((noinline))\n-\n-char* foo(char* dst, char* src, size_t size) {\n-  return memcpy(dst, src, size);\n-}\n-int mpx_test(int argc, const char **argv) {\n-  char* r = foo(d, s, 11);\n-  printf(\"r = %p\\n\", r);\n-  return 0;\n-}"}, {"sha": "0efd030307561cb2d2a54e403bc4ae7f9c05e08f", "filename": "gcc/testsuite/gcc.target/i386/mpx/memmove-1.c", "status": "removed", "additions": 0, "deletions": 117, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fmemmove-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fmemmove-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fmemmove-1.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,117 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#include <stdint.h>\n-#include <string.h>\n-#include \"mpx-check.h\"\n-\n-#ifdef __i386__\n-/* i386 directory size is 4MB.  */\n-#define MPX_NUM_L2_BITS 10\n-#define MPX_NUM_IGN_BITS 2\n-#else /* __i386__ */\n-/* x86_64 directory size is 2GB.  */\n-#define MPX_NUM_L2_BITS 17\n-#define MPX_NUM_IGN_BITS 3\n-#endif /* !__i386__ */\n-\n-\n-/* bt_num_of_elems is the number of elements in bounds table.  */\n-unsigned long bt_num_of_elems = (1UL << MPX_NUM_L2_BITS);\n-/* Function to test MPX wrapper of memmove function.\n-   src_bigger_dst determines which address is bigger, can be 0 or 1.\n-   src_bt_index and dst_bt index are bt_indexes\n-   from the beginning of the page.\n-   bd_index_end is the bd index of the last element of src if we define\n-   bd index of the first element as 0.\n-   src_bt index_end is bt index of the last element of src.\n-   pointers inside determines if array being copied includes pointers\n-   src_align and dst_align are alignments of src and dst.\n-   Arrays may contain unaligned pointers.  */\n-int\n-test (int src_bigger_dst, int src_bt_index, int dst_bt_index,\n-      int bd_index_end, int src_bt_index_end, int pointers_inside,\n-      int src_align, int dst_align)\n-{\n-  const int n =\n-    src_bt_index_end - src_bt_index + bd_index_end * bt_num_of_elems;\n-  if (n < 0)\n-    {\n-      return 0;\n-    }\n-  const int num_of_pointers = (bd_index_end + 2) * bt_num_of_elems;\n-  void **arr = 0;\n-  posix_memalign ((void **) (&arr),\n-           1UL << (MPX_NUM_L2_BITS + MPX_NUM_IGN_BITS),\n-           num_of_pointers * sizeof (void *));\n-  void **src = arr, **dst = arr;\n-  if ((src_bigger_dst) && (src_bt_index < dst_bt_index))\n-    src_bt_index += bt_num_of_elems;\n-  if (!(src_bigger_dst) && (src_bt_index > dst_bt_index))\n-    dst_bt_index += bt_num_of_elems;\n-  src += src_bt_index;\n-  dst += dst_bt_index;\n-  char *realign = (char *) src;\n-  realign += src_align;\n-  src = (void **) realign;\n-  realign = (char *) dst;\n-  realign += src_align;\n-  dst = (void **) realign;\n-  if (pointers_inside)\n-    {\n-      for (int i = 0; i < n; i++)\n-        src[i] = __bnd_set_ptr_bounds (arr + i, i * sizeof (void *) + 1);\n-    }\n-  memmove (dst, src, n * sizeof (void *));\n-  if (pointers_inside)\n-    {\n-      for (int i = 0; i < n; i++)\n-        {\n-          if (dst[i] != arr + i)\n-            abort ();\n-          if (__bnd_get_ptr_lbound (dst[i]) != arr + i)\n-            abort ();\n-          if (__bnd_get_ptr_ubound (dst[i]) != arr + 2 * i)\n-            abort ();\n-        }\n-    }\n-  free (arr);\n-  return 0;\n-}\n-\n-/* Call testall to test common cases of memmove for MPX.  */\n-void\n-testall ()\n-{\n-  int align[3];\n-  align[0] = 0;\n-  align[1] = 1;\n-  align[2] = 7;\n-  for (int pointers_inside = 0; pointers_inside < 2; pointers_inside++)\n-    for (int src_bigger_dst = 0; src_bigger_dst < 2; src_bigger_dst++)\n-      for (int src_align = 0; src_align < 3; src_align ++)\n-        for (int dst_align = 0; dst_align < 3; dst_align ++)\n-          for (int pages = 0; pages < 4; pages++)\n-            {\n-              test (src_bigger_dst, 1, 2, pages, 1, pointers_inside,\n-                    align[src_align], align[dst_align]);\n-              test (src_bigger_dst, 1, 2, pages, 2, pointers_inside,\n-                    align[src_align], align[dst_align]);\n-              test (src_bigger_dst, 2, 1, pages, 12, pointers_inside,\n-                    align[src_align], align[dst_align]);\n-              test (src_bigger_dst, 2, 1, pages, 1, pointers_inside,\n-                    align[src_align], align[dst_align]);\n-              test (src_bigger_dst, 2, 3, pages, 12, pointers_inside,\n-                    align[src_align], align[dst_align]);\n-              test (src_bigger_dst, 1, bt_num_of_elems - 2, pages, 2,\n-                    pointers_inside, align[src_align], align[dst_align]);\n-            }\n-};\n-\n-int\n-mpx_test (int argc, const char **argv)\n-{\n-  testall ();\n-  return 0;\n-}"}, {"sha": "e1d78fa47c6e698eb7af1dbf00843af434449dd1", "filename": "gcc/testsuite/gcc.target/i386/mpx/memmove-2.c", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fmemmove-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fmemmove-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fmemmove-2.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,40 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#include <stdint.h>\n-#include <string.h>\n-#include \"mpx-check.h\"\n-\n-#ifdef __i386__\n-/* i386 directory size is 4MB.  */\n-#define MPX_NUM_L2_BITS 10\n-#define MPX_NUM_IGN_BITS 2\n-#else /* __i386__ */\n-/* x86_64 directory size is 2GB.  */\n-#define MPX_NUM_L2_BITS 17\n-#define MPX_NUM_IGN_BITS 3\n-#endif /* !__i386__ */\n-\n-\n-/* bt_num_of_elems is the number of elements in bounds table.  */\n-unsigned long bt_num_of_elems = (1UL << MPX_NUM_L2_BITS);\n-\n-/* Function to test MPX wrapper of memmove function.\n-   Check case with no BT allocated for data.  */\n-\n-int\n-mpx_test (int argc, const char **argv)\n-{\n-  void **arr = 0;\n-  posix_memalign ((void **) (&arr),\n-           1UL << (MPX_NUM_L2_BITS + MPX_NUM_IGN_BITS),\n-           2 * bt_num_of_elems * sizeof (void *));\n-  void **src = arr, **dst = arr, **ptr = arr;\n-  src += 10;\n-  dst += 1;\n-  ptr += bt_num_of_elems + 100;\n-  ptr[0] = __bnd_set_ptr_bounds (arr + 1, sizeof (void *) + 1);\n-  memmove (dst, src, 5 * sizeof (void *));\n-  return 0;\n-}"}, {"sha": "78bfdebff03039c6c26a73789d3f1985263ea8d1", "filename": "gcc/testsuite/gcc.target/i386/mpx/memmove-zero-length.c", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fmemmove-zero-length.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fmemmove-zero-length.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fmemmove-zero-length.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,18 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#include \"mpx-check.h\"\n-#include \"string.h\"\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  int *buf = (int *)malloc (100 * sizeof(int));\n-\n-  memmove (buf, NULL, 0);\n-  memmove (NULL, buf, 0);\n-\n-  free (buf);\n-\n-  return 0;\n-}"}, {"sha": "e622934fe32a55f4d22cbd24f2ae5c43d24753d3", "filename": "gcc/testsuite/gcc.target/i386/mpx/mpx-check.h", "status": "removed", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fmpx-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fmpx-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fmpx-check.h?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,48 +0,0 @@\n-#include <stdio.h>\n-#include <stdlib.h>\n-#include <assert.h>\n-#include \"cpuid.h\"\n-#include \"mpx-os-support.h\"\n-\n-static int\n-__attribute__ ((noinline))\n-mpx_test (int, const char **);\n-\n-#ifdef SHOULDFAIL\n-#define NORUNRES 1\n-#else\n-#define NORUNRES 0\n-#endif\n-\n-#define DEBUG\n-\n-static int\n-check_osxsave (void)\n-{\n-  unsigned int eax, ebx, ecx, edx;\n-\n-  __cpuid (1, eax, ebx, ecx, edx);\n-  return (ecx & bit_OSXSAVE) != 0;\n-}\n-\n-int\n-main (int argc, const char **argv)\n-{\n-  unsigned int eax, ebx, ecx, edx;\n-\n-  if (!__get_cpuid_count (7, 0, &eax, &ebx, &ecx, &edx))\n-    return NORUNRES;\n-\n-  /* Run MPX test only if host has MPX support.  */\n-  if (check_osxsave () && (ebx & bit_MPX) && mpx_os_support ())\n-    mpx_test (argc, argv);\n-  else\n-    {\n-#ifdef DEBUG\n-      printf (\"SKIPPED\\n\");\n-#endif\n-      return NORUNRES;\n-    }\n-\n-  return 0;\n-}"}, {"sha": "8c9294d33a5dda714e7346583402aacaa085f888", "filename": "gcc/testsuite/gcc.target/i386/mpx/mpx-os-support.h", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fmpx-os-support.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fmpx-os-support.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fmpx-os-support.h?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,16 +0,0 @@\n-/* Check if the OS supports executing MPX instructions.  */\n-\n-#define XCR_XFEATURE_ENABLED_MASK\t0x0\n-\n-#define XSTATE_BNDREGS\t0x8\n-\n-static int\n-mpx_os_support (void)\n-{\n-  unsigned int eax, edx;\n-  unsigned int ecx = XCR_XFEATURE_ENABLED_MASK;\n-\n-  __asm__ (\"xgetbv\" : \"=a\" (eax), \"=d\" (edx) : \"c\" (ecx));\n-\n-  return (eax & XSTATE_BNDREGS) != 0;\n-}"}, {"sha": "62d44697eabeabab51553e366317c058caca582f", "filename": "gcc/testsuite/gcc.target/i386/mpx/mpx.exp", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fmpx.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fmpx.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fmpx.exp?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,39 +0,0 @@\n-# Copyright (C) 2014-2018 Free Software Foundation, Inc.\n-#\n-# This file is part of GCC.\n-#\n-# GCC is free software; you can redistribute it and/or modify\n-# it under the terms of the GNU General Public License as published by\n-# the Free Software Foundation; either version 3, or (at your option)\n-# any later version.\n-#\n-# GCC is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-# GNU General Public License for more details.\n-#\n-# You should have received a copy of the GNU General Public License\n-# along with GCC; see the file COPYING3.  If not see\n-# <http://www.gnu.org/licenses/>.\n-\n-# Exit immediately if this isn't a x86 target.\n-if { ![istarget i?86*-*-*] && ![istarget x86_64-*-*] } then {\n-  return\n-}\n-\n-# Load support procs.\n-load_lib gcc-dg.exp\n-load_lib mpx-dg.exp\n-\n-# Initialize.\n-dg-init\n-mpx_init\n-\n-if [check_effective_target_mpx] {\n-    # Run all tests.\n-    gcc-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.c*]] \"\" \"\"\n-}\n-\n-# All done.\n-mpx_finish\n-dg-finish"}, {"sha": "0e9d657fcbd300fc27ff890ba475f85525ef6a8c", "filename": "gcc/testsuite/gcc.target/i386/mpx/nested-function-1-lbv.c", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fnested-function-1-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fnested-function-1-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fnested-function-1-lbv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,22 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  int a[100];\n-\n-  void rd (int i)\n-  {\n-    printf (\"%d\\n\", a[i]);\n-  }\n-\n-  rd (-1);\n-\n-  return 0;\n-}"}, {"sha": "dd985466328a7b148f59b19c6d7fed6973fcf58f", "filename": "gcc/testsuite/gcc.target/i386/mpx/nested-function-1-nov.c", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fnested-function-1-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fnested-function-1-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fnested-function-1-nov.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,20 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#include \"mpx-check.h\"\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  int a[100];\n-\n-  void rd (int i)\n-  {\n-    printf (\"%d\\n\", a[i]);\n-  }\n-\n-  rd (0);\n-  rd (99);\n-\n-  return 0;\n-}"}, {"sha": "b5cf6cc29b3d6f0659339ee14376ea21dba15b73", "filename": "gcc/testsuite/gcc.target/i386/mpx/nested-function-1-ubv.c", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fnested-function-1-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fnested-function-1-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fnested-function-1-ubv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,22 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  int a[100];\n-\n-  void rd (int i)\n-  {\n-    printf (\"%d\\n\", a[i]);\n-  }\n-\n-  rd (100);\n-\n-  return 0;\n-}"}, {"sha": "58692efb0e3fccfd78280f2840999c39d6bc710a", "filename": "gcc/testsuite/gcc.target/i386/mpx/pointer-arg-1-lbv.c", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-1-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-1-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-1-lbv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,26 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-int buf[100];\n-\n-int rd (int *p, int i)\n-{\n-  int res = p[i];\n-  printf (\"%d\\n\", res);\n-  return res;\n-}\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  int *p;\n-\n-  rd (buf, -1);\n-\n-  return 0;\n-}"}, {"sha": "01279be8d3b81e13e0a7ece74ea4ef07aa82256c", "filename": "gcc/testsuite/gcc.target/i386/mpx/pointer-arg-1-nov.c", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-1-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-1-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-1-nov.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,24 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#include \"mpx-check.h\"\n-\n-int buf[100];\n-\n-int rd (int *p, int i)\n-{\n-  int res = p[i];\n-  printf (\"%d\\n\", res);\n-  return res;\n-}\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  int *p;\n-\n-  rd (buf, 0);\n-  rd (buf, 99);\n-\n-  return 0;\n-}"}, {"sha": "c377c57eb6bf4eea65ccc73ceb89e2d9f6acc5c2", "filename": "gcc/testsuite/gcc.target/i386/mpx/pointer-arg-1-ubv.c", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-1-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-1-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-1-ubv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,26 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-int buf[100];\n-\n-int rd (int *p, int i)\n-{\n-  int res = p[i];\n-  printf (\"%d\\n\", res);\n-  return res;\n-}\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  int *p;\n-\n-  rd (buf, 100);\n-\n-  return 0;\n-}"}, {"sha": "ebe76cb8263a6d20e35e5ceeb60dd6fb9684d14b", "filename": "gcc/testsuite/gcc.target/i386/mpx/pointer-arg-2-lbv.c", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-2-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-2-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-2-lbv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,26 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-int buf[100];\n-\n-int rd (int t1, int t2, int t3, int t4, int t5, int *p, int i)\n-{\n-  int res = p[i];\n-  printf (\"%d\\n\", res);\n-  return res;\n-}\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  int *p;\n-\n-  rd (0, 0, 0, 0, 0, buf, -1);\n-\n-  return 0;\n-}"}, {"sha": "8b9fce2e29745906be4e02cf3838be7221377d51", "filename": "gcc/testsuite/gcc.target/i386/mpx/pointer-arg-2-nov.c", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-2-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-2-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-2-nov.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,24 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#include \"mpx-check.h\"\n-\n-int buf[100];\n-\n-int rd (int t1, int t2, int t3, int t4, int t5, int *p, int i)\n-{\n-  int res = p[i];\n-  printf (\"%d\\n\", res);\n-  return res;\n-}\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  int *p;\n-\n-  rd (0, 0, 0, 0, 0, buf, 0);\n-  rd (0, 0, 0, 0, 0, buf, 99);\n-\n-  return 0;\n-}"}, {"sha": "525140e2d7913fc6716d5ef147f1144e525a3f0d", "filename": "gcc/testsuite/gcc.target/i386/mpx/pointer-arg-2-ubv.c", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-2-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-2-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-2-ubv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,26 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-int buf[100];\n-\n-int rd (int t1, int t2, int t3, int t4, int t5, int *p, int i)\n-{\n-  int res = p[i];\n-  printf (\"%d\\n\", res);\n-  return res;\n-}\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  int *p;\n-\n-  rd (0, 0, 0, 0, 0, buf, 100);\n-\n-  return 0;\n-}"}, {"sha": "d6571be44b518abaf13a1728f08d9fc46b517da3", "filename": "gcc/testsuite/gcc.target/i386/mpx/pointer-arg-3-lbv.c", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-3-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-3-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-3-lbv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,26 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-int buf[100];\n-\n-int rd (int t1, int t2, int t3, int t4, int t5, int t6, int *p, int i)\n-{\n-  int res = p[i];\n-  printf (\"%d\\n\", res);\n-  return res;\n-}\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  int *p;\n-\n-  rd (0, 0, 0, 0, 0, 0, buf, -1);\n-\n-  return 0;\n-}"}, {"sha": "e42ecba4e2a51e97d84b1fda64201134ebd2a181", "filename": "gcc/testsuite/gcc.target/i386/mpx/pointer-arg-3-nov.c", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-3-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-3-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-3-nov.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,24 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#include \"mpx-check.h\"\n-\n-int buf[100];\n-\n-int rd (int t1, int t2, int t3, int t4, int t5, int t6, int *p, int i)\n-{\n-  int res = p[i];\n-  printf (\"%d\\n\", res);\n-  return res;\n-}\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  int *p;\n-\n-  rd (0, 0, 0, 0, 0, 0, buf, 0);\n-  rd (0, 0, 0, 0, 0, 0, buf, 99);\n-\n-  return 0;\n-}"}, {"sha": "8da6252a03a63455ddc26fcb576cb95f063eff6d", "filename": "gcc/testsuite/gcc.target/i386/mpx/pointer-arg-3-ubv.c", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-3-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-3-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-3-ubv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,26 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-int buf[100];\n-\n-int rd (int t1, int t2, int t3, int t4, int t5, int t6, int *p, int i)\n-{\n-  int res = p[i];\n-  printf (\"%d\\n\", res);\n-  return res;\n-}\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  int *p;\n-\n-  rd (0, 0, 0, 0, 0, 0, buf, 100);\n-\n-  return 0;\n-}"}, {"sha": "5a6842512db537797c6e1c1b5283038c24fa9d86", "filename": "gcc/testsuite/gcc.target/i386/mpx/pointer-arg-4-lbv.c", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-4-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-4-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-4-lbv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,27 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-int buf[100];\n-int buf1[10];\n-\n-int rd (int *t1, int *t2, int *t3, int *t4, int *p, int i)\n-{\n-  int res = p[i];\n-  printf (\"%d\\n\", res);\n-  return res;\n-}\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  int *p;\n-\n-  rd (buf1, buf1, buf1, buf1, buf, -1);\n-\n-  return 0;\n-}"}, {"sha": "bb2bc46a6f3251a2c76a976d7abd4fe9e9aee10c", "filename": "gcc/testsuite/gcc.target/i386/mpx/pointer-arg-4-nov.c", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-4-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-4-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-4-nov.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,25 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#include \"mpx-check.h\"\n-\n-int buf[100];\n-int buf1[10];\n-\n-int rd (int *t1, int *t2, int *t3, int *t4, int *p, int i)\n-{\n-  int res = p[i];\n-  printf (\"%d\\n\", res);\n-  return res;\n-}\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  int *p;\n-\n-  rd (buf1, buf1, buf1, buf1, buf, 0);\n-  rd (buf1, buf1, buf1, buf1, buf, 99);\n-\n-  return 0;\n-}"}, {"sha": "cf3a5c48f1b7d2d6d1e59c650ea5ffedb9afbb41", "filename": "gcc/testsuite/gcc.target/i386/mpx/pointer-arg-4-ubv.c", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-4-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-4-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-4-ubv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,27 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-int buf[100];\n-int buf1[10];\n-\n-int rd (int *t1, int *t2, int *t3, int *t4, int *p, int i)\n-{\n-  int res = p[i];\n-  printf (\"%d\\n\", res);\n-  return res;\n-}\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  int *p;\n-\n-  rd (buf1, buf1, buf1, buf1, buf, 100);\n-\n-  return 0;\n-}"}, {"sha": "7c3bd867204811ff062145bca375365cc1da13f3", "filename": "gcc/testsuite/gcc.target/i386/mpx/pointer-arg-5-lbv.c", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-5-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-5-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-5-lbv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,27 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-int buf[100];\n-int buf1[10];\n-\n-int rd (int *t1, int *t2, int *t3, int *t4, int *t5, int *p, int i)\n-{\n-  int res = p[i];\n-  printf (\"%d\\n\", res);\n-  return res;\n-}\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  int *p;\n-\n-  rd (buf1, buf1, buf1, buf1, buf1, buf, -1);\n-\n-  return 0;\n-}"}, {"sha": "27e4a7130b09b627306bb5d3786fa525cfcfad49", "filename": "gcc/testsuite/gcc.target/i386/mpx/pointer-arg-5-nov.c", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-5-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-5-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-5-nov.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,25 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#include \"mpx-check.h\"\n-\n-int buf[100];\n-int buf1[10];\n-\n-int rd (int *t1, int *t2, int *t3, int *t4, int *t5, int *p, int i)\n-{\n-  int res = p[i];\n-  printf (\"%d\\n\", res);\n-  return res;\n-}\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  int *p;\n-\n-  rd (buf1, buf1, buf1, buf1, buf1, buf, 0);\n-  rd (buf1, buf1, buf1, buf1, buf1, buf, 99);\n-\n-  return 0;\n-}"}, {"sha": "68e2654b91abe11aa4baa1e54de986f7efd6949b", "filename": "gcc/testsuite/gcc.target/i386/mpx/pointer-arg-5-ubv.c", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-5-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-5-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-arg-5-ubv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,27 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-int buf[100];\n-int buf1[10];\n-\n-int rd (int *t1, int *t2, int *t3, int *t4, int *t5, int *p, int i)\n-{\n-  int res = p[i];\n-  printf (\"%d\\n\", res);\n-  return res;\n-}\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  int *p;\n-\n-  rd (buf1, buf1, buf1, buf1, buf1, buf, 100);\n-\n-  return 0;\n-}"}, {"sha": "657991979f69adba0c8f9e315ec5ea12d89735fb", "filename": "gcc/testsuite/gcc.target/i386/mpx/pointer-diff-1.c", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-diff-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-diff-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-diff-1.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,8 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-O2 -mmpx -fcheck-pointer-bounds\" } */\n-\n-char *\n-foo (char *p, char *q)\n-{\n-  return (char *) (p - q);\t/* { dg-bogus \"pointer bounds were lost due to unexpected expression\" } */\n-}"}, {"sha": "bde8c76e4b7282cda3e2fa321ec3a9269960264e", "filename": "gcc/testsuite/gcc.target/i386/mpx/pointer-store-1-lbv.c", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-store-1-lbv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-store-1-lbv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-store-1-lbv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,31 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-int *buf1[100];\n-int buf2[100];\n-\n-void wr (int i)\n-{\n-  buf1[i] = buf2;\n-}\n-\n-int rd(int i, int j)\n-{\n-  int res = buf1[i][j];\n-  printf(\"%d\\n\", res);\n-  return res;\n-}\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  wr(10);\n-  rd(10, -1);\n-\n-  return 0;\n-}"}, {"sha": "269e3af17f04f147dfaf9cb6dd996de34f014ad1", "filename": "gcc/testsuite/gcc.target/i386/mpx/pointer-store-1-nov.c", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-store-1-nov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-store-1-nov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-store-1-nov.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,29 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#include \"mpx-check.h\"\n-\n-int *buf1[100];\n-int buf2[100];\n-\n-void wr (int i)\n-{\n-  buf1[i] = buf2;\n-}\n-\n-int rd(int i, int j)\n-{\n-  int res = buf1[i][j];\n-  printf(\"%d\\n\", res);\n-  return res;\n-}\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  wr(10);\n-  rd(10, 0);\n-  rd(10, 99);\n-\n-  return 0;\n-}"}, {"sha": "4c8d45e003f242d8babff5fc125f2d8dbaf033d7", "filename": "gcc/testsuite/gcc.target/i386/mpx/pointer-store-1-ubv.c", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-store-1-ubv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-store-1-ubv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpointer-store-1-ubv.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,31 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-shouldfail \"bounds violation\" } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-\n-#define SHOULDFAIL\n-\n-#include \"mpx-check.h\"\n-\n-int *buf1[100];\n-int buf2[100];\n-\n-void wr (int i)\n-{\n-  buf1[i] = buf2;\n-}\n-\n-int rd(int i, int j)\n-{\n-  int res = buf1[i][j];\n-  printf(\"%d\\n\", res);\n-  return res;\n-}\n-\n-int mpx_test (int argc, const char **argv)\n-{\n-  wr(10);\n-  rd(10, 100);\n-\n-  return 0;\n-}"}, {"sha": "9060287cac5f4a36032c0761b09acecfc99b5557", "filename": "gcc/testsuite/gcc.target/i386/mpx/pr65508.c", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpr65508.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpr65508.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpr65508.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,12 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-O2 -fcheck-pointer-bounds -mmpx\" } */\n-\n-void\n-bar (int N)\n-{\n-  int a[N];\n-  void foo (int a[N])\n-  {\n-  }\n-  foo (a);\n-}"}, {"sha": "049569c50b1847bb23486bc64c089a951309b9d1", "filename": "gcc/testsuite/gcc.target/i386/mpx/pr65531.cc", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpr65531.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpr65531.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpr65531.cc?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,13 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-O2 -fcheck-pointer-bounds -mmpx\" } */\n-\n-#pragma interface\n-\n-struct S\n-{\n-  ~S ()\n-  {\n-  }\n-};\n-\n-S s;"}, {"sha": "b29cd03ed0f0724330eb7470051349e603c20f92", "filename": "gcc/testsuite/gcc.target/i386/mpx/pr66048.cc", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpr66048.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpr66048.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpr66048.cc?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,16 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-O2 -fcheck-pointer-bounds -mmpx -march=corei7-avx\" } */\n-\n-struct c1\n-{\n-  c1 (const c1 &other) : p (other.p) { };\n-  int *p;\n-};\n-\n-struct c2 : public c1 { };\n-\n-c1\n-test (c2 a)\n-{\n-  return a;\n-}"}, {"sha": "3889674ed5fcfc9885b416a69bbe6d25394de880", "filename": "gcc/testsuite/gcc.target/i386/mpx/pr66134.c", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpr66134.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpr66134.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpr66134.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,17 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-O2 -fcheck-pointer-bounds -mmpx -fno-tree-ccp\" } */\n-\n-extern int vfork (void) __attribute__ ((__nothrow__ , __leaf__));\n-void test1 (void);\n-void test2 (void);\n-void test3 (int *);\n-\n-void test (int *p)\n-{\n- test1 ();\n- p++;\n- test2 ();\n- p++;\n- vfork ();\n- test3 (p);\n-}"}, {"sha": "a405c20ac0e6aaae5414b9417d3cca9887379964", "filename": "gcc/testsuite/gcc.target/i386/mpx/pr66566.c", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpr66566.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpr66566.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpr66566.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,12 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-O2 -fcheck-pointer-bounds -mmpx\" } */\n-\n-union jsval_layout\n-{\n-  void *asPtr;\n-};\n-union jsval_layout a;\n-union jsval_layout b;\n-union jsval_layout __inline__ fn1() { return b; }\n-\n-void fn2() { a = fn1(); }"}, {"sha": "5a7e2f29e8072a3a00679eaf9bfbef3cb1cdb7b2", "filename": "gcc/testsuite/gcc.target/i386/mpx/pr66567.c", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpr66567.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpr66567.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpr66567.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,16 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-void  (*b) ();\n-\n-void fn1 (const int *p1)\n-{\n-  static void *a = &&conv_1234_123C;\n- conv_1234_123C:\n-  ;\n-}\n-\n-void fn2 ()\n-{\n-  b = fn1;\n-}"}, {"sha": "2653ebc0fa02ea7b341a004e383782d465a6e2fd", "filename": "gcc/testsuite/gcc.target/i386/mpx/pr66568.c", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpr66568.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpr66568.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpr66568.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,11 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-require-effective-target fpic } */\n-/* { dg-options \"-O2 -fcheck-pointer-bounds -mmpx -O2 -fPIC\" } */\n-\n-extern void exit (int);\n-int a, b, c;\n-void *set_test () {\n-  if (b)\n-    a ? exit (0) : exit (1);\n-  b = c;\n-}"}, {"sha": "ba2023c68462d3bcae27eebfb471ac518d976cdc", "filename": "gcc/testsuite/gcc.target/i386/mpx/pr66569.c", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpr66569.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpr66569.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpr66569.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,14 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-struct s1 {\n-  int *p;\n-  int i;\n-};\n-\n-struct s2 {\n-  struct s1 s;\n-  int i;\n-};\n-\n-int test (struct s2 s, ...) { }"}, {"sha": "015faaeae50ac0cbec3226ae903d487bb3116039", "filename": "gcc/testsuite/gcc.target/i386/mpx/pr66581.c", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpr66581.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpr66581.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpr66581.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,18 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-void *a;\n-int b;\n-\n-void\n-fn1 (void)\n-{\n-  void *c = &&l_nop;\n-l_nop:\n-    for (; b;)\n-    ;\n-  int *d = c;\n-  c = fn1;\n-  *d = 1;\n-  goto *a;\n-}"}, {"sha": "3f8d79d42829673b0dd477839c5cc8d6a1e58c44", "filename": "gcc/testsuite/gcc.target/i386/mpx/pr68337-1.c", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpr68337-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpr68337-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpr68337-1.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,32 +0,0 @@\n-/* { dg-do run } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-\n-#include \"mpx-check.h\"\n-\n-#define N 2\n-\n-extern void abort ();\n-\n-static int\n-mpx_test (int argc, const char **argv)\n-{\n-  char ** src = (char **)malloc (sizeof (char *) * N);\n-  char ** dst = (char **)malloc (sizeof (char *) * N);\n-  int i;\n-\n-  for (i = 0; i < N; i++)\n-    src[i] = __bnd_set_ptr_bounds (argv[0] + i, i + 1);\n-\n-  __builtin_memcpy(dst, src, sizeof (char *) * N);\n-\n-  for (i = 0; i < N; i++)\n-    {\n-      char *p = dst[i];\n-      if (p != argv[0] + i\n-\t  || __bnd_get_ptr_lbound (p) != p\n-\t  || __bnd_get_ptr_ubound (p) != p + i)\n-\tabort ();\n-    }\n-\n-  return 0;\n-}"}, {"sha": "8845cca79be0ff85f67779e42ef2992b2268b981", "filename": "gcc/testsuite/gcc.target/i386/mpx/pr68337-2.c", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpr68337-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpr68337-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmpx%2Fpr68337-2.c?ref=c71f71f8bd0dc7e5d93ee75993a84b3386c3fe12", "patch": "@@ -1,9 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-fcheck-pointer-bounds -mmpx\" } */\n-/* { dg-final { scan-assembler-not \"memcpy\" } } */\n-\n-void\n-test (void *dst, void *src)\n-{\n-  __builtin_memcpy (dst, src, sizeof (char *) / 2);\n-}"}]}