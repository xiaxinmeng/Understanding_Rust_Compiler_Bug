{"sha": "2fde567ecee0858733c5cd0d28fceefb1906e9d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmZkZTU2N2VjZWUwODU4NzMzYzVjZDBkMjhmY2VlZmIxOTA2ZTlkMw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1998-02-17T22:43:25Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-02-17T22:43:25Z"}, "message": "fold-const.c: Include \"system.h\" to get stdlib.h and stdio.h.\n\n        * fold-const.c: Include \"system.h\" to get stdlib.h and stdio.h.\n        (lshift_double): Add parentheses around + or - inside shift.\n        (rshift_double): Likewise.\n        (size_int_wide): Explicitly set type of `bit_p' to `int'.\n        * Makefile.in (fold-const.o): Depend on system.h.\n\nFrom-SVN: r18057", "tree": {"sha": "d3290a539a2b4027e3efb2bb476e13cdc995d8e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3290a539a2b4027e3efb2bb476e13cdc995d8e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2fde567ecee0858733c5cd0d28fceefb1906e9d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fde567ecee0858733c5cd0d28fceefb1906e9d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fde567ecee0858733c5cd0d28fceefb1906e9d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fde567ecee0858733c5cd0d28fceefb1906e9d3/comments", "author": null, "committer": null, "parents": [{"sha": "0a7ed33c8703824a9f97178adc8c4f58352d2008", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a7ed33c8703824a9f97178adc8c4f58352d2008", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a7ed33c8703824a9f97178adc8c4f58352d2008"}], "stats": {"total": 24, "additions": 16, "deletions": 8}, "files": [{"sha": "d4b369838dadd84892b95c11aa9dcb1ef90021b8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fde567ecee0858733c5cd0d28fceefb1906e9d3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fde567ecee0858733c5cd0d28fceefb1906e9d3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2fde567ecee0858733c5cd0d28fceefb1906e9d3", "patch": "@@ -19,6 +19,13 @@ Tue Feb 17 22:56:14 1998  Richard Henderson  <rth@cygnus.com>\n \n Tue Feb 17 22:37:22 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n+        * fold-const.c: Include \"system.h\" to get stdlib.h and stdio.h.\n+        (lshift_double): Add parentheses around + or - inside shift.\n+        (rshift_double): Likewise.\n+        (size_int_wide): Explicitly set type of `bit_p' to `int'.\n+\n+        * Makefile.in (fold-const.o): Depend on system.h.\n+\n \t* Makefile.in (gcc.o): Depend on system.h, in accordance with last\n \tchange to gcc.c.\n "}, {"sha": "100a7ade917f572399931443ac9caab95bcddd8e", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fde567ecee0858733c5cd0d28fceefb1906e9d3/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fde567ecee0858733c5cd0d28fceefb1906e9d3/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=2fde567ecee0858733c5cd0d28fceefb1906e9d3", "patch": "@@ -1319,7 +1319,7 @@ convert.o: convert.c $(CONFIG_H) $(TREE_H) flags.h convert.h\n tree.o : tree.c $(CONFIG_H) $(TREE_H) flags.h function.h\n print-tree.o : print-tree.c $(CONFIG_H) $(TREE_H)\n stor-layout.o : stor-layout.c $(CONFIG_H) $(TREE_H) flags.h function.h\n-fold-const.o : fold-const.c $(CONFIG_H) $(TREE_H) flags.h \n+fold-const.o : fold-const.c $(CONFIG_H) $(TREE_H) flags.h system.h\n toplev.o : toplev.c $(CONFIG_H) $(TREE_H) $(RTL_H) \\\n    flags.h input.h insn-attr.h xcoffout.h defaults.h output.h \\\n    $(lang_options_files)"}, {"sha": "12d9cadad3d0722af532c9c6e550b755bccf4559", "filename": "gcc/fold-const.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fde567ecee0858733c5cd0d28fceefb1906e9d3/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fde567ecee0858733c5cd0d28fceefb1906e9d3/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=2fde567ecee0858733c5cd0d28fceefb1906e9d3", "patch": "@@ -43,7 +43,7 @@ Boston, MA 02111-1307, USA.  */\n    forces the value to fit the type.  It returns an overflow indicator.  */\n \n #include \"config.h\"\n-#include <stdio.h>\n+#include \"system.h\"\n #include <setjmp.h>\n #include \"flags.h\"\n #include \"tree.h\"\n@@ -356,13 +356,13 @@ lshift_double (l1, h1, count, prec, lv, hv, arith)\n \n   if (count >= HOST_BITS_PER_WIDE_INT)\n     {\n-      *hv = (unsigned HOST_WIDE_INT) l1 << count - HOST_BITS_PER_WIDE_INT;\n+      *hv = (unsigned HOST_WIDE_INT) l1 << (count - HOST_BITS_PER_WIDE_INT);\n       *lv = 0;\n     }\n   else\n     {\n       *hv = (((unsigned HOST_WIDE_INT) h1 << count)\n-\t     | ((unsigned HOST_WIDE_INT) l1 >> HOST_BITS_PER_WIDE_INT - count - 1 >> 1));\n+\t     | ((unsigned HOST_WIDE_INT) l1 >> (HOST_BITS_PER_WIDE_INT - count - 1) >> 1));\n       *lv = (unsigned HOST_WIDE_INT) l1 << count;\n     }\n }\n@@ -392,14 +392,14 @@ rshift_double (l1, h1, count, prec, lv, hv, arith)\n   if (count >= HOST_BITS_PER_WIDE_INT)\n     {\n       *hv = signmask;\n-      *lv = ((signmask << 2 * HOST_BITS_PER_WIDE_INT - count - 1 << 1)\n-\t     | ((unsigned HOST_WIDE_INT) h1 >> count - HOST_BITS_PER_WIDE_INT));\n+      *lv = ((signmask << (2 * HOST_BITS_PER_WIDE_INT - count - 1) << 1)\n+\t     | ((unsigned HOST_WIDE_INT) h1 >> (count - HOST_BITS_PER_WIDE_INT)));\n     }\n   else\n     {\n       *lv = (((unsigned HOST_WIDE_INT) l1 >> count)\n-\t     | ((unsigned HOST_WIDE_INT) h1 << HOST_BITS_PER_WIDE_INT - count - 1 << 1));\n-      *hv = ((signmask << HOST_BITS_PER_WIDE_INT - count)\n+\t     | ((unsigned HOST_WIDE_INT) h1 << (HOST_BITS_PER_WIDE_INT - count - 1) << 1));\n+      *hv = ((signmask << (HOST_BITS_PER_WIDE_INT - count))\n \t     | ((unsigned HOST_WIDE_INT) h1 >> count));\n     }\n }\n@@ -1429,6 +1429,7 @@ const_binop (code, arg1, arg2, notrunc)\n tree\n size_int_wide (number, high, bit_p)\n      unsigned HOST_WIDE_INT number, high;\n+     int bit_p;\n {\n   register tree t;\n   /* Type-size nodes already made for small sizes.  */"}]}