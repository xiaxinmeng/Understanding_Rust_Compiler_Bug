{"sha": "31cc5821223a096ef61743bff520f4a0dbba5872", "node_id": "C_kwDOANBUbNoAKDMxY2M1ODIxMjIzYTA5NmVmNjE3NDNiZmY1MjBmNGEwZGJiYTU4NzI", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-02-23T10:03:03Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-02-23T10:16:39Z"}, "message": "tree-optimization/108888 - call if-conversion\n\nThe following makes sure to only predicate calls necessary.\n\n\tPR tree-optimization/108888\n\t* tree-if-conv.cc (if_convertible_stmt_p): Set PLF_2 on\n\tcalls to predicate.\n\t(predicate_statements): Only predicate calls with PLF_2.\n\n\t* g++.dg/torture/pr108888.C: New testcase.", "tree": {"sha": "93347d8a41ea5a6e37f2f0ceb46e3eb5571bb2ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93347d8a41ea5a6e37f2f0ceb46e3eb5571bb2ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31cc5821223a096ef61743bff520f4a0dbba5872", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31cc5821223a096ef61743bff520f4a0dbba5872", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31cc5821223a096ef61743bff520f4a0dbba5872", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31cc5821223a096ef61743bff520f4a0dbba5872/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f609c6f762832e43524352527a7ecbea2698ff9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f609c6f762832e43524352527a7ecbea2698ff9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f609c6f762832e43524352527a7ecbea2698ff9"}], "stats": {"total": 35, "additions": 28, "deletions": 7}, "files": [{"sha": "29a22e2110269208839966742608f18da726fe7c", "filename": "gcc/testsuite/g++.dg/torture/pr108888.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31cc5821223a096ef61743bff520f4a0dbba5872/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr108888.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31cc5821223a096ef61743bff520f4a0dbba5872/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr108888.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr108888.C?ref=31cc5821223a096ef61743bff520f4a0dbba5872", "patch": "@@ -0,0 +1,18 @@\n+// { dg-do compile }\n+\n+int scaleValueSaturate_scalefactor, scaleValueSaturate___trans_tmp_2,\n+    scaleValuesSaturate_i;\n+int scaleValueSaturate(int value) {\n+  int result = __builtin_clz(value);\n+  if (value)\n+    if (-result <= scaleValueSaturate_scalefactor)\n+      return 0;\n+  return scaleValueSaturate___trans_tmp_2;\n+}\n+short scaleValuesSaturate_dst;\n+short *scaleValuesSaturate_src;\n+void scaleValuesSaturate() {\n+  for (; scaleValuesSaturate_i; scaleValuesSaturate_i++)\n+    scaleValuesSaturate_dst =\n+        scaleValueSaturate(scaleValuesSaturate_src[scaleValuesSaturate_i]);\n+}"}, {"sha": "0e384e3639447f1130edb5c19ef8661b7ececf1a", "filename": "gcc/tree-if-conv.cc", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31cc5821223a096ef61743bff520f4a0dbba5872/gcc%2Ftree-if-conv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31cc5821223a096ef61743bff520f4a0dbba5872/gcc%2Ftree-if-conv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.cc?ref=31cc5821223a096ef61743bff520f4a0dbba5872", "patch": "@@ -1099,6 +1099,7 @@ if_convertible_stmt_p (gimple *stmt, vec<data_reference_p> refs)\n \t\t   n = n->simdclone->next_clone)\n \t\tif (n->simdclone->inbranch)\n \t\t  {\n+\t\t    gimple_set_plf (stmt, GF_PLF_2, true);\n \t\t    need_to_predicate = true;\n \t\t    return true;\n \t\t  }\n@@ -2541,7 +2542,8 @@ predicate_statements (loop_p loop)\n \t      release_defs (stmt);\n \t      continue;\n \t    }\n-\t  else if (gimple_plf (stmt, GF_PLF_2))\n+\t  else if (gimple_plf (stmt, GF_PLF_2)\n+\t\t   && is_gimple_assign (stmt))\n \t    {\n \t      tree lhs = gimple_assign_lhs (stmt);\n \t      tree mask;\n@@ -2625,13 +2627,14 @@ predicate_statements (loop_p loop)\n \t      gimple_assign_set_rhs1 (stmt, ifc_temp_var (type, rhs, &gsi));\n \t      update_stmt (stmt);\n \t    }\n-\n-\t  /* Convert functions that have a SIMD clone to IFN_MASK_CALL.  This\n-\t     will cause the vectorizer to match the \"in branch\" clone variants,\n-\t     and serves to build the mask vector in a natural way.  */\n-\t  gcall *call = dyn_cast <gcall *> (gsi_stmt (gsi));\n-\t  if (call && !gimple_call_internal_p (call))\n+\t  else if (gimple_plf (stmt, GF_PLF_2)\n+\t\t   && is_gimple_call (stmt))\n \t    {\n+\t      /* Convert functions that have a SIMD clone to IFN_MASK_CALL.\n+\t\t This will cause the vectorizer to match the \"in branch\"\n+\t\t clone variants, and serves to build the mask vector\n+\t\t in a natural way.  */\n+\t      gcall *call = dyn_cast <gcall *> (gsi_stmt (gsi));\n \t      tree orig_fn = gimple_call_fn (call);\n \t      int orig_nargs = gimple_call_num_args (call);\n \t      auto_vec<tree> args;"}]}