{"sha": "61af7eb4d1466f5cf325b3e041386050a45709c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjFhZjdlYjRkMTQ2NmY1Y2YzMjViM2UwNDEzODYwNTBhNDU3MDljOQ==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2011-08-25T13:50:30Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2011-08-25T13:50:30Z"}, "message": "avr.c (reg_class_tab): Make local to avr_regno_reg_class.\n\n\t* config/avr/avr.c (reg_class_tab): Make local to\n\tavr_regno_reg_class.  Return smallest register class available.\n\nFrom-SVN: r178063", "tree": {"sha": "c84f7ae0b193c87241637a170b833a56dfc1b06d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c84f7ae0b193c87241637a170b833a56dfc1b06d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61af7eb4d1466f5cf325b3e041386050a45709c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61af7eb4d1466f5cf325b3e041386050a45709c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61af7eb4d1466f5cf325b3e041386050a45709c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61af7eb4d1466f5cf325b3e041386050a45709c9/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2814222f9fe1f1661773a67101c29ac501d8f93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2814222f9fe1f1661773a67101c29ac501d8f93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2814222f9fe1f1661773a67101c29ac501d8f93"}], "stats": {"total": 45, "additions": 29, "deletions": 16}, "files": [{"sha": "73ac31982eabd8fe92bd9e50cc33d91f3d1c9528", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61af7eb4d1466f5cf325b3e041386050a45709c9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61af7eb4d1466f5cf325b3e041386050a45709c9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=61af7eb4d1466f5cf325b3e041386050a45709c9", "patch": "@@ -1,3 +1,8 @@\n+2011-08-25  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\t* config/avr/avr.c (reg_class_tab): Make local to\n+\tavr_regno_reg_class.  Return smallest register class available.\n+\t\n 2011-08-25  Georg-Johann Lay  <avr@gjlay.de>\n \t\n \t* config/avr/avr.c (STR_PREFIX_P): New Define."}, {"sha": "7575fc56d2f595cdf507a6004e0c5b0df481be1c", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 24, "deletions": 16, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61af7eb4d1466f5cf325b3e041386050a45709c9/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61af7eb4d1466f5cf325b3e041386050a45709c9/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=61af7eb4d1466f5cf325b3e041386050a45709c9", "patch": "@@ -281,22 +281,6 @@ avr_option_override (void)\n   init_machine_status = avr_init_machine_status;\n }\n \n-/*  return register class from register number.  */\n-\n-static const enum reg_class reg_class_tab[]={\n-  GENERAL_REGS,GENERAL_REGS,GENERAL_REGS,GENERAL_REGS,GENERAL_REGS,\n-  GENERAL_REGS,GENERAL_REGS,GENERAL_REGS,GENERAL_REGS,GENERAL_REGS,\n-  GENERAL_REGS,GENERAL_REGS,GENERAL_REGS,GENERAL_REGS,GENERAL_REGS,\n-  GENERAL_REGS, /* r0 - r15 */\n-  LD_REGS,LD_REGS,LD_REGS,LD_REGS,LD_REGS,LD_REGS,LD_REGS,\n-  LD_REGS,                      /* r16 - 23 */\n-  ADDW_REGS,ADDW_REGS,          /* r24,r25 */\n-  POINTER_X_REGS,POINTER_X_REGS, /* r26,27 */\n-  POINTER_Y_REGS,POINTER_Y_REGS, /* r28,r29 */\n-  POINTER_Z_REGS,POINTER_Z_REGS, /* r30,r31 */\n-  STACK_REG,STACK_REG           /* SPL,SPH */\n-};\n-\n /* Function to set up the backend function structure.  */\n \n static struct machine_function *\n@@ -310,8 +294,32 @@ avr_init_machine_status (void)\n enum reg_class\n avr_regno_reg_class (int r)\n {\n+  static const enum reg_class reg_class_tab[] =\n+    {\n+      R0_REG,\n+      /* r1 - r15 */\n+      NO_LD_REGS, NO_LD_REGS, NO_LD_REGS,\n+      NO_LD_REGS, NO_LD_REGS, NO_LD_REGS, NO_LD_REGS,\n+      NO_LD_REGS, NO_LD_REGS, NO_LD_REGS, NO_LD_REGS,\n+      NO_LD_REGS, NO_LD_REGS, NO_LD_REGS, NO_LD_REGS,\n+      /* r16 - r23 */\n+      SIMPLE_LD_REGS, SIMPLE_LD_REGS, SIMPLE_LD_REGS, SIMPLE_LD_REGS,\n+      SIMPLE_LD_REGS, SIMPLE_LD_REGS, SIMPLE_LD_REGS, SIMPLE_LD_REGS,\n+      /* r24, r25 */\n+      ADDW_REGS, ADDW_REGS,\n+      /* X: r26, 27 */\n+      POINTER_X_REGS, POINTER_X_REGS,\n+      /* Y: r28, r29 */\n+      POINTER_Y_REGS, POINTER_Y_REGS,\n+      /* Z: r30, r31 */\n+      POINTER_Z_REGS, POINTER_Z_REGS,\n+      /* SP: SPL, SPH */\n+      STACK_REG, STACK_REG\n+    };\n+\n   if (r <= 33)\n     return reg_class_tab[r];\n+  \n   return ALL_REGS;\n }\n "}]}