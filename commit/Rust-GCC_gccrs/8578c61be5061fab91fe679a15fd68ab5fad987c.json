{"sha": "8578c61be5061fab91fe679a15fd68ab5fad987c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODU3OGM2MWJlNTA2MWZhYjkxZmU2NzlhMTVmZDY4YWI1ZmFkOTg3Yw==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-01-25T17:03:36Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2021-01-27T10:42:25Z"}, "message": "Add mutablity checks and left hand size assignee checker\n\nIn order to assign to a name we must ensure the LHS is a valid expression\nto assign to. This leads onto actually checking if this is a mutable\ndeclaration or not.\n\nOnce these checks pass the name resolver we can in GIMPLE create immutable\ntypes for these declarations to help with optimization.\n\nFixes #77", "tree": {"sha": "f09524d5f8bf17fab00618ef7e8e98fd905a557e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f09524d5f8bf17fab00618ef7e8e98fd905a557e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8578c61be5061fab91fe679a15fd68ab5fad987c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8578c61be5061fab91fe679a15fd68ab5fad987c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8578c61be5061fab91fe679a15fd68ab5fad987c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8578c61be5061fab91fe679a15fd68ab5fad987c/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "854aad3b58e747cad3e46b522c9ef765bdfadca4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/854aad3b58e747cad3e46b522c9ef765bdfadca4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/854aad3b58e747cad3e46b522c9ef765bdfadca4"}], "stats": {"total": 278, "additions": 268, "deletions": 10}, "files": [{"sha": "7b325830e1239a6fc962ef0412fbcb34be182827", "filename": "gcc/rust/ast/rust-ast.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8578c61be5061fab91fe679a15fd68ab5fad987c/gcc%2Frust%2Fast%2Frust-ast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8578c61be5061fab91fe679a15fd68ab5fad987c/gcc%2Frust%2Fast%2Frust-ast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.h?ref=8578c61be5061fab91fe679a15fd68ab5fad987c", "patch": "@@ -962,7 +962,7 @@ class IdentifierExpr : public ExprWithoutBlock\n   std::string as_string () const override { return ident; }\n \n   Location get_locus () const { return locus; }\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus_slow () const override { return locus; }\n \n   Identifier get_ident () const { return ident; }\n "}, {"sha": "cf6e6f7f909f264baa9f6461201d5dd739a43618", "filename": "gcc/rust/backend/rust-compile-fnparam.h", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8578c61be5061fab91fe679a15fd68ab5fad987c/gcc%2Frust%2Fbackend%2Frust-compile-fnparam.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8578c61be5061fab91fe679a15fd68ab5fad987c/gcc%2Frust%2Fbackend%2Frust-compile-fnparam.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-fnparam.h?ref=8578c61be5061fab91fe679a15fd68ab5fad987c", "patch": "@@ -0,0 +1,67 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#ifndef RUST_COMPILE_FNPARAM\n+#define RUST_COMPILE_FNPARAM\n+\n+#include \"rust-compile-base.h\"\n+\n+namespace Rust {\n+namespace Compile {\n+\n+class CompileFnParam : public HIRCompileBase\n+{\n+public:\n+  static Bvariable *compile (Context *ctx, Bfunction *fndecl,\n+\t\t\t     HIR::FunctionParam *param, Btype *decl_type,\n+\t\t\t     Location locus)\n+  {\n+    CompileFnParam compiler (ctx, fndecl, decl_type, locus);\n+    param->get_param_name ()->accept_vis (compiler);\n+    return compiler.translated;\n+  }\n+\n+  void visit (HIR::IdentifierPattern &pattern)\n+  {\n+    if (!pattern.is_mut)\n+      decl_type = ctx->get_backend ()->immutable_type (decl_type);\n+\n+    translated\n+      = ctx->get_backend ()->parameter_variable (fndecl, pattern.variable_ident,\n+\t\t\t\t\t\t decl_type,\n+\t\t\t\t\t\t false /* address_taken */,\n+\t\t\t\t\t\t locus);\n+  }\n+\n+private:\n+  CompileFnParam (Context *ctx, ::Bfunction *fndecl, ::Btype *decl_type,\n+\t\t  Location locus)\n+    : HIRCompileBase (ctx), fndecl (fndecl), decl_type (decl_type),\n+      locus (locus), translated (nullptr)\n+  {}\n+\n+  ::Bfunction *fndecl;\n+  ::Btype *decl_type;\n+  Location locus;\n+  ::Bvariable *translated;\n+};\n+\n+} // namespace Compile\n+} // namespace Rust\n+\n+#endif // RUST_COMPILE_FNPARAM"}, {"sha": "1bb7c91d644761bae3014c0cdcbfa41ef4939b36", "filename": "gcc/rust/backend/rust-compile-item.h", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8578c61be5061fab91fe679a15fd68ab5fad987c/gcc%2Frust%2Fbackend%2Frust-compile-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8578c61be5061fab91fe679a15fd68ab5fad987c/gcc%2Frust%2Fbackend%2Frust-compile-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-item.h?ref=8578c61be5061fab91fe679a15fd68ab5fad987c", "patch": "@@ -24,6 +24,7 @@\n #include \"rust-compile-var-decl.h\"\n #include \"rust-compile-stmt.h\"\n #include \"rust-compile-expr.h\"\n+#include \"rust-compile-fnparam.h\"\n \n namespace Rust {\n namespace Compile {\n@@ -174,17 +175,20 @@ class CompileItem : public HIRCompileBase\n     for (auto &it : fntype->get_params ())\n       {\n \tHIR::FunctionParam &referenced_param = function.function_params.at (i);\n-\tauto param_pattern = it.first;\n \tauto param_tyty = it.second;\n-\n \tauto compiled_param_type\n \t  = TyTyResolveCompile::compile (ctx, param_tyty);\n \n-\tbool tree_addressable = false;\n-\tauto compiled_param_var = ctx->get_backend ()->parameter_variable (\n-\t  fndecl, param_pattern->as_string (), compiled_param_type,\n-\t  tree_addressable,\n-\t  ctx->get_mappings ()->lookup_location (param_tyty->get_ref ()));\n+\tLocation param_locus\n+\t  = ctx->get_mappings ()->lookup_location (param_tyty->get_ref ());\n+\tBvariable *compiled_param_var\n+\t  = CompileFnParam::compile (ctx, fndecl, &referenced_param,\n+\t\t\t\t     compiled_param_type, param_locus);\n+\tif (compiled_param_var == nullptr)\n+\t  {\n+\t    rust_error_at (param_locus, \"failed to compile parameter variable\");\n+\t    return;\n+\t  }\n \n \tparam_vars.push_back (compiled_param_var);\n "}, {"sha": "06ea5a9006454929910060542dc97777bb9a97db", "filename": "gcc/rust/backend/rust-compile-var-decl.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8578c61be5061fab91fe679a15fd68ab5fad987c/gcc%2Frust%2Fbackend%2Frust-compile-var-decl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8578c61be5061fab91fe679a15fd68ab5fad987c/gcc%2Frust%2Fbackend%2Frust-compile-var-decl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-var-decl.h?ref=8578c61be5061fab91fe679a15fd68ab5fad987c", "patch": "@@ -54,6 +54,9 @@ class CompileVarDecl : public HIRCompileBase\n \n   void visit (HIR::IdentifierPattern &pattern)\n   {\n+    if (!pattern.is_mut)\n+      translated_type = ctx->get_backend ()->immutable_type (translated_type);\n+\n     translated\n       = ctx->get_backend ()->local_variable (fndecl, pattern.variable_ident,\n \t\t\t\t\t     translated_type, NULL /*decl_var*/,"}, {"sha": "936681830abdc924ed59d233351b08ab25accf31", "filename": "gcc/rust/resolve/rust-ast-resolve-expr.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8578c61be5061fab91fe679a15fd68ab5fad987c/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8578c61be5061fab91fe679a15fd68ab5fad987c/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h?ref=8578c61be5061fab91fe679a15fd68ab5fad987c", "patch": "@@ -22,6 +22,7 @@\n #include \"rust-ast-resolve-base.h\"\n #include \"rust-ast-full.h\"\n #include \"rust-ast-resolve-struct-expr-field.h\"\n+#include \"rust-ast-verify-assignee.h\"\n \n namespace Rust {\n namespace Resolver {\n@@ -94,6 +95,9 @@ class ResolveExpr : public ResolverBase\n   {\n     ResolveExpr::go (expr.get_left_expr ().get (), expr.get_node_id ());\n     ResolveExpr::go (expr.get_right_expr ().get (), expr.get_node_id ());\n+\n+    // need to verify the assignee\n+    VerifyAsignee::go (expr.get_left_expr ().get (), expr.get_node_id ());\n   }\n \n   void visit (AST::IdentifierExpr &expr)\n@@ -120,6 +124,9 @@ class ResolveExpr : public ResolverBase\n   {\n     ResolveExpr::go (expr.get_left_expr ().get (), expr.get_node_id ());\n     ResolveExpr::go (expr.get_right_expr ().get (), expr.get_node_id ());\n+\n+    // need to verify the assignee\n+    VerifyAsignee::go (expr.get_left_expr ().get (), expr.get_node_id ());\n   }\n \n   void visit (AST::ComparisonExpr &expr)"}, {"sha": "0f45ba025b18ba963e9ffb570fe130277482d67d", "filename": "gcc/rust/resolve/rust-ast-resolve-item.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8578c61be5061fab91fe679a15fd68ab5fad987c/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8578c61be5061fab91fe679a15fd68ab5fad987c/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h?ref=8578c61be5061fab91fe679a15fd68ab5fad987c", "patch": "@@ -62,12 +62,22 @@ class ResolveItem : public ResolverBase\n   {\n     ResolveType::go (var.get_type ().get (), var.get_node_id ());\n     ResolveExpr::go (var.get_expr ().get (), var.get_node_id ());\n+\n+    // the mutability checker needs to verify for immutable decls the number\n+    // of assignments are <1. This marks an implicit assignment\n+    resolver->mark_assignment_to_decl (var.get_node_id (), var.get_node_id ());\n   }\n \n   void visit (AST::ConstantItem &constant)\n   {\n     ResolveType::go (constant.get_type ().get (), constant.get_node_id ());\n     ResolveExpr::go (constant.get_expr ().get (), constant.get_node_id ());\n+\n+    // the mutability checker needs to verify for immutable decls the number\n+    // of assignments are <1. This marks an implicit assignment\n+    resolver->mark_decl_mutability (constant.get_node_id (), false);\n+    resolver->mark_assignment_to_decl (constant.get_node_id (),\n+\t\t\t\t       constant.get_node_id ());\n   }\n \n   void visit (AST::Function &function)\n@@ -89,6 +99,11 @@ class ResolveItem : public ResolverBase\n \tResolveType::go (param.get_type ().get (), param.get_node_id ());\n \tPatternDeclaration::go (param.get_pattern ().get (),\n \t\t\t\tparam.get_node_id ());\n+\n+\t// the mutability checker needs to verify for immutable decls the number\n+\t// of assignments are <1. This marks an implicit assignment\n+\tresolver->mark_assignment_to_decl (param.get_pattern ()->get_node_id (),\n+\t\t\t\t\t   param.get_node_id ());\n       }\n \n     // resolve the function body"}, {"sha": "f7618ab8d11d8bbb5bfe757b97127ca3a488b86c", "filename": "gcc/rust/resolve/rust-ast-resolve-pattern.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8578c61be5061fab91fe679a15fd68ab5fad987c/gcc%2Frust%2Fresolve%2Frust-ast-resolve-pattern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8578c61be5061fab91fe679a15fd68ab5fad987c/gcc%2Frust%2Fresolve%2Frust-ast-resolve-pattern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-pattern.h?ref=8578c61be5061fab91fe679a15fd68ab5fad987c", "patch": "@@ -86,6 +86,8 @@ class PatternDeclaration : public ResolverBase\n     resolver->insert_new_definition (pattern.get_node_id (),\n \t\t\t\t     Definition{pattern.get_node_id (),\n \t\t\t\t\t\tparent});\n+    resolver->mark_decl_mutability (pattern.get_node_id (),\n+\t\t\t\t    pattern.get_is_mut ());\n   }\n \n private:"}, {"sha": "8904ce99f5725d25f64ea581ce1d485c8202be8e", "filename": "gcc/rust/resolve/rust-ast-resolve-stmt.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8578c61be5061fab91fe679a15fd68ab5fad987c/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8578c61be5061fab91fe679a15fd68ab5fad987c/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h?ref=8578c61be5061fab91fe679a15fd68ab5fad987c", "patch": "@@ -52,7 +52,13 @@ class ResolveStmt : public ResolverBase\n   void visit (AST::LetStmt &stmt)\n   {\n     if (stmt.has_init_expr ())\n-      ResolveExpr::go (stmt.get_init_expr ().get (), stmt.get_node_id ());\n+      {\n+\tResolveExpr::go (stmt.get_init_expr ().get (), stmt.get_node_id ());\n+\n+\t// mark the assignment\n+\tresolver->mark_assignment_to_decl (stmt.get_pattern ()->get_node_id (),\n+\t\t\t\t\t   stmt.get_node_id ());\n+      }\n \n     PatternDeclaration::go (stmt.get_pattern ().get (), stmt.get_node_id ());\n     if (stmt.has_type ())"}, {"sha": "90f9cd64b0f3cce0418a17089627f70a464b8720", "filename": "gcc/rust/resolve/rust-ast-resolve-toplevel.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8578c61be5061fab91fe679a15fd68ab5fad987c/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8578c61be5061fab91fe679a15fd68ab5fad987c/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h?ref=8578c61be5061fab91fe679a15fd68ab5fad987c", "patch": "@@ -57,6 +57,7 @@ class ResolveTopLevel : public ResolverBase\n     resolver->insert_new_definition (var.get_node_id (),\n \t\t\t\t     Definition{var.get_node_id (),\n \t\t\t\t\t\tvar.get_node_id ()});\n+    resolver->mark_decl_mutability (var.get_node_id (), var.is_mutable ());\n   }\n \n   void visit (AST::ConstantItem &constant)"}, {"sha": "6cfe2c233b653553f25725d96a4f4d200a0617a0", "filename": "gcc/rust/resolve/rust-ast-verify-assignee.h", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8578c61be5061fab91fe679a15fd68ab5fad987c/gcc%2Frust%2Fresolve%2Frust-ast-verify-assignee.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8578c61be5061fab91fe679a15fd68ab5fad987c/gcc%2Frust%2Fresolve%2Frust-ast-verify-assignee.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-verify-assignee.h?ref=8578c61be5061fab91fe679a15fd68ab5fad987c", "patch": "@@ -0,0 +1,83 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#ifndef RUST_AST_VERIFY_ASSIGNEE\n+#define RUST_AST_VERIFY_ASSIGNEE\n+\n+#include \"rust-ast-resolve-base.h\"\n+#include \"rust-ast-full.h\"\n+\n+namespace Rust {\n+namespace Resolver {\n+\n+class VerifyAsignee : public ResolverBase\n+{\n+public:\n+  static bool go (AST::Expr *assignee, NodeId parent)\n+  {\n+    VerifyAsignee checker (parent);\n+    assignee->accept_vis (checker);\n+    if (!checker.ok)\n+      rust_error_at (assignee->get_locus_slow (),\n+\t\t     \"invalid left-hand side of assignment\");\n+    return checker.ok;\n+  }\n+\n+  void visit (AST::ArrayIndexExpr &expr)\n+  {\n+    expr.get_array_expr ()->accept_vis (*this);\n+  }\n+\n+  void visit (AST::FieldAccessExpr &expr)\n+  {\n+    expr.get_receiver_expr ()->accept_vis (*this);\n+  }\n+\n+  void visit (AST::TupleIndexExpr &expr)\n+  {\n+    expr.get_tuple_expr ()->accept_vis (*this);\n+  }\n+\n+  void visit (AST::IdentifierExpr &expr)\n+  {\n+    if (!resolver->get_name_scope ().lookup (expr.as_string (), &resolved_node))\n+      return;\n+\n+    ok = true;\n+    // mark the assignment to the name\n+    resolver->mark_assignment_to_decl (resolved_node, parent);\n+\n+    // check is mutable\n+    if (!resolver->decl_is_mutable (resolved_node))\n+      {\n+\t// we only allow a single assignment to immutable decls\n+\tif (resolver->get_num_assignments_to_decl (resolved_node) > 1)\n+\t  rust_error_at (expr.get_locus (), \"cannot assign to immutable\");\n+      }\n+  }\n+\n+private:\n+  VerifyAsignee (NodeId parent) : ResolverBase (parent), ok (false) {}\n+\n+  bool ok;\n+};\n+\n+} // namespace Resolver\n+} // namespace Rust\n+\n+#endif // RUST_AST_VERIFY_ASSIGNEE"}, {"sha": "5bc6abab30957160e0429185e09d9716199ff50a", "filename": "gcc/rust/resolve/rust-name-resolver.h", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8578c61be5061fab91fe679a15fd68ab5fad987c/gcc%2Frust%2Fresolve%2Frust-name-resolver.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8578c61be5061fab91fe679a15fd68ab5fad987c/gcc%2Frust%2Fresolve%2Frust-name-resolver.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-name-resolver.h?ref=8578c61be5061fab91fe679a15fd68ab5fad987c", "patch": "@@ -235,6 +235,37 @@ class Resolver\n   void set_unit_type_node_id (NodeId id) { unit_ty_node_id = id; }\n   NodeId get_unit_type_node_id () { return unit_ty_node_id; }\n \n+  void mark_decl_mutability (NodeId id, bool mut)\n+  {\n+    rust_assert (decl_mutability.find (id) == decl_mutability.end ());\n+    decl_mutability[id] = mut;\n+  }\n+\n+  bool decl_is_mutable (NodeId id) const\n+  {\n+    auto it = decl_mutability.find (id);\n+    rust_assert (it != decl_mutability.end ());\n+    return it->second;\n+  }\n+\n+  void mark_assignment_to_decl (NodeId id, NodeId assignment)\n+  {\n+    auto it = assignment_to_decl.find (id);\n+    if (it == assignment_to_decl.end ())\n+      assignment_to_decl[id] = {};\n+\n+    assignment_to_decl[id].insert (assignment);\n+  }\n+\n+  size_t get_num_assignments_to_decl (NodeId id) const\n+  {\n+    auto it = assignment_to_decl.find (id);\n+    if (it == assignment_to_decl.end ())\n+      return 0;\n+\n+    return it->second.size ();\n+  }\n+\n private:\n   Resolver ();\n \n@@ -269,6 +300,11 @@ class Resolver\n   // we need two namespaces one for names and ones for types\n   std::map<NodeId, NodeId> resolved_names;\n   std::map<NodeId, NodeId> resolved_types;\n+\n+  // map of resolved names mutability flag\n+  std::map<NodeId, bool> decl_mutability;\n+  // map of resolved names and set of assignments to the decl\n+  std::map<NodeId, std::set<NodeId> > assignment_to_decl;\n };\n \n } // namespace Resolver"}, {"sha": "f9bee7748ee688ee2527fb2bdab6c778e1155b9a", "filename": "gcc/testsuite/rust.test/compilable/arrays_index2.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8578c61be5061fab91fe679a15fd68ab5fad987c/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Farrays_index2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8578c61be5061fab91fe679a15fd68ab5fad987c/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Farrays_index2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Farrays_index2.rs?ref=8578c61be5061fab91fe679a15fd68ab5fad987c", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    let mut array: [i32; 3] = [0; 3];\n+    array[0] = 1;\n+}"}, {"sha": "74af41ef16397addfbe1f721cdf23e2b0f1723ce", "filename": "gcc/testsuite/rust.test/compilable/scoping1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8578c61be5061fab91fe679a15fd68ab5fad987c/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fscoping1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8578c61be5061fab91fe679a15fd68ab5fad987c/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fscoping1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fscoping1.rs?ref=8578c61be5061fab91fe679a15fd68ab5fad987c", "patch": "@@ -1,7 +1,7 @@\n fn main() {\n     let x = 1;\n     {\n-        let x = true;\n+        let mut x = true;\n         {\n             x = false;\n         }"}, {"sha": "8d1bbe9906ce1f2b7e7dab259f6f87a280b15785", "filename": "gcc/testsuite/rust.test/compilable/tuple_field_access.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8578c61be5061fab91fe679a15fd68ab5fad987c/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Ftuple_field_access.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8578c61be5061fab91fe679a15fd68ab5fad987c/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Ftuple_field_access.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Ftuple_field_access.rs?ref=8578c61be5061fab91fe679a15fd68ab5fad987c", "patch": "@@ -0,0 +1,6 @@\n+struct Foo(i32, i32);\n+\n+fn main() {\n+    let mut a = Foo(1, 2);\n+    a.0 = 22;\n+}"}, {"sha": "5713d3b144ffe125263d7aa1834ae7d77e0ee508", "filename": "gcc/testsuite/rust.test/fail_compilation/immutable1.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8578c61be5061fab91fe679a15fd68ab5fad987c/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fimmutable1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8578c61be5061fab91fe679a15fd68ab5fad987c/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fimmutable1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fimmutable1.rs?ref=8578c61be5061fab91fe679a15fd68ab5fad987c", "patch": "@@ -0,0 +1,5 @@\n+static x: i32 = 3;\n+\n+fn main() {\n+    x = 1;\n+}"}, {"sha": "e316e72985767f840353c1ae41bb48dbb7ad9a01", "filename": "gcc/testsuite/rust.test/fail_compilation/immutable2.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8578c61be5061fab91fe679a15fd68ab5fad987c/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fimmutable2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8578c61be5061fab91fe679a15fd68ab5fad987c/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fimmutable2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fimmutable2.rs?ref=8578c61be5061fab91fe679a15fd68ab5fad987c", "patch": "@@ -0,0 +1,5 @@\n+const TEST_CONST: i32 = 10;\n+\n+fn main() {\n+    TEST_CONST = 1;\n+}"}, {"sha": "b310193ae8d4be0ae51a1966714724e6ed01f3da", "filename": "gcc/testsuite/rust.test/fail_compilation/immutable3.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8578c61be5061fab91fe679a15fd68ab5fad987c/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fimmutable3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8578c61be5061fab91fe679a15fd68ab5fad987c/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fimmutable3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fimmutable3.rs?ref=8578c61be5061fab91fe679a15fd68ab5fad987c", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    let a = 1;\n+    a += 2;\n+}"}, {"sha": "d2e740fb7d8ccc50a3d76d46b93d25421be6d5bf", "filename": "gcc/testsuite/rust.test/fail_compilation/immutable4.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8578c61be5061fab91fe679a15fd68ab5fad987c/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fimmutable4.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8578c61be5061fab91fe679a15fd68ab5fad987c/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fimmutable4.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fimmutable4.rs?ref=8578c61be5061fab91fe679a15fd68ab5fad987c", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    let array: [i32; 3] = [0; 3];\n+    array[0] = 1;\n+}"}, {"sha": "c442ba580dd57cc899eaf6f3ed5e7aec52de73bf", "filename": "gcc/testsuite/rust.test/fail_compilation/immutable5.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8578c61be5061fab91fe679a15fd68ab5fad987c/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fimmutable5.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8578c61be5061fab91fe679a15fd68ab5fad987c/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fimmutable5.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fimmutable5.rs?ref=8578c61be5061fab91fe679a15fd68ab5fad987c", "patch": "@@ -0,0 +1,6 @@\n+struct Foo(f32, i32);\n+\n+fn main() {\n+    let a = Foo(1, 2);\n+    a.0 = 22;\n+}"}]}