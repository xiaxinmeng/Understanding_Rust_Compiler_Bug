{"sha": "d47c8ef90093a92e7f6ad34365dd107a37697309", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQ3YzhlZjkwMDkzYTkyZTdmNmFkMzQzNjVkZDEwN2EzNzY5NzMwOQ==", "commit": {"author": {"name": "Dmitriy Anisimkov", "email": "anisimko@adacore.com", "date": "2018-07-17T08:07:26Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-07-17T08:07:26Z"}, "message": "[Ada] GNAT.Sockets: reorganize and make public components of Inet_Addr_Type\n\n2018-07-17  Dmitriy Anisimkov  <anisimko@adacore.com>\n\ngcc/ada/\n\n\t* libgnat/g-socket.adb, libgnat/g-socket.ads: Reorganize and make\n\tpublic components of Inet_Addr_Type. Introduce public binary\n\toperations.\n\nFrom-SVN: r262780", "tree": {"sha": "e3c17b4929c738deaefd60afd9f2e51eb4c768ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3c17b4929c738deaefd60afd9f2e51eb4c768ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d47c8ef90093a92e7f6ad34365dd107a37697309", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d47c8ef90093a92e7f6ad34365dd107a37697309", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d47c8ef90093a92e7f6ad34365dd107a37697309", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d47c8ef90093a92e7f6ad34365dd107a37697309/comments", "author": {"login": "anisimkov", "id": 15864134, "node_id": "MDQ6VXNlcjE1ODY0MTM0", "avatar_url": "https://avatars.githubusercontent.com/u/15864134?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anisimkov", "html_url": "https://github.com/anisimkov", "followers_url": "https://api.github.com/users/anisimkov/followers", "following_url": "https://api.github.com/users/anisimkov/following{/other_user}", "gists_url": "https://api.github.com/users/anisimkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/anisimkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anisimkov/subscriptions", "organizations_url": "https://api.github.com/users/anisimkov/orgs", "repos_url": "https://api.github.com/users/anisimkov/repos", "events_url": "https://api.github.com/users/anisimkov/events{/privacy}", "received_events_url": "https://api.github.com/users/anisimkov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "01bd58f51858c375e5814e3937aa2c57fbbc9bdc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01bd58f51858c375e5814e3937aa2c57fbbc9bdc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01bd58f51858c375e5814e3937aa2c57fbbc9bdc"}], "stats": {"total": 204, "additions": 180, "deletions": 24}, "files": [{"sha": "9b9bdca64893af60458ab050a27284f4f727578c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d47c8ef90093a92e7f6ad34365dd107a37697309/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d47c8ef90093a92e7f6ad34365dd107a37697309/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d47c8ef90093a92e7f6ad34365dd107a37697309", "patch": "@@ -1,3 +1,9 @@\n+2018-07-17  Dmitriy Anisimkov  <anisimko@adacore.com>\n+\n+\t* libgnat/g-socket.adb, libgnat/g-socket.ads: Reorganize and make\n+\tpublic components of Inet_Addr_Type. Introduce public binary\n+\toperations.\n+\n 2018-07-17  Javier Miranda  <miranda@adacore.com>\n \n \t* exp_ch7.adb (Make_Transient_Block): When determining whether an"}, {"sha": "721571fb8b9a86f9de506acf65f5a10076eba818", "filename": "gcc/ada/libgnat/g-socket.adb", "status": "modified", "additions": 131, "deletions": 5, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d47c8ef90093a92e7f6ad34365dd107a37697309/gcc%2Fada%2Flibgnat%2Fg-socket.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d47c8ef90093a92e7f6ad34365dd107a37697309/gcc%2Fada%2Flibgnat%2Fg-socket.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fg-socket.adb?ref=d47c8ef90093a92e7f6ad34365dd107a37697309", "patch": "@@ -144,8 +144,8 @@ package body GNAT.Sockets is\n    --  Symmetric operation\n \n    function Image\n-     (Val :  Inet_Addr_VN_Type;\n-      Hex :  Boolean := False) return String;\n+     (Val : Inet_Addr_Bytes;\n+      Hex : Boolean := False) return String;\n    --  Output an array of inet address components in hex or decimal mode\n \n    function Is_IP_Address (Name : String) return Boolean;\n@@ -275,6 +275,15 @@ package body GNAT.Sockets is\n    --  Create_Selector has been called and Close_Selector has not been called,\n    --  or the null selector.\n \n+   function Create_Address\n+     (Family : Family_Type; Bytes : Inet_Addr_Bytes) return Inet_Addr_Type\n+     with Inline;\n+   --  Creates address from family and Inet_Addr_Bytes array.\n+\n+   function Get_Bytes (Addr : Inet_Addr_Type) return Inet_Addr_Bytes\n+     with Inline;\n+   --  Extract bytes from address\n+\n    ---------\n    -- \"+\" --\n    ---------\n@@ -1314,7 +1323,7 @@ package body GNAT.Sockets is\n    -----------\n \n    function Image\n-     (Val : Inet_Addr_VN_Type;\n+     (Val : Inet_Addr_Bytes;\n       Hex : Boolean := False) return String\n    is\n       --  The largest Inet_Addr_Comp_Type image occurs with IPv4. It\n@@ -1381,9 +1390,9 @@ package body GNAT.Sockets is\n    function Image (Value : Inet_Addr_Type) return String is\n    begin\n       if Value.Family = Family_Inet then\n-         return Image (Inet_Addr_VN_Type (Value.Sin_V4), Hex => False);\n+         return Image (Inet_Addr_Bytes (Value.Sin_V4), Hex => False);\n       else\n-         return Image (Inet_Addr_VN_Type (Value.Sin_V6), Hex => True);\n+         return Image (Inet_Addr_Bytes (Value.Sin_V6), Hex => True);\n       end if;\n    end Image;\n \n@@ -2782,4 +2791,121 @@ package body GNAT.Sockets is\n    --  The elaboration and finalization of this object perform the required\n    --  initialization and cleanup actions for the sockets library.\n \n+   --------------------\n+   -- Create_Address --\n+   --------------------\n+\n+   function Create_Address\n+     (Family : Family_Type; Bytes : Inet_Addr_Bytes) return Inet_Addr_Type\n+   is\n+     (case Family is\n+         when Family_Inet => (Family_Inet, Bytes),\n+         when Family_Inet6 => (Family_Inet6, Bytes));\n+\n+   ---------------\n+   -- Get_Bytes --\n+   ---------------\n+\n+   function Get_Bytes (Addr : Inet_Addr_Type) return Inet_Addr_Bytes is\n+     (case Addr.Family is\n+         when Family_Inet => Addr.Sin_V4,\n+         when Family_Inet6 => Addr.Sin_V6);\n+\n+   ----------\n+   -- Mask --\n+   ----------\n+\n+   function Mask\n+     (Family : Family_Type;\n+      Length : Natural;\n+      Host   : Boolean := False) return Inet_Addr_Type\n+   is\n+      Addr_Len : constant Natural := Inet_Addr_Bytes_Length (Family);\n+   begin\n+      if Length > 8 * Addr_Len then\n+         raise Constraint_Error with\n+           \"invalid mask length for address family \" & Family'Img;\n+      end if;\n+\n+      declare\n+         B    : Inet_Addr_Bytes (1 ..  Addr_Len);\n+         Part : Inet_Addr_Comp_Type;\n+      begin\n+         for J in 1 .. Length / 8 loop\n+            B (J) := (if Host then 0 else 255);\n+         end loop;\n+\n+         if Length < 8 * Addr_Len then\n+            Part := 2 ** (8 - Length mod 8) - 1;\n+            B (Length / 8 + 1) := (if Host then Part else not Part);\n+\n+            for J in Length / 8 + 2 .. B'Last loop\n+               B (J) := (if Host then 255 else 0);\n+            end loop;\n+         end if;\n+\n+         return Create_Address (Family, B);\n+      end;\n+   end Mask;\n+\n+   -----------\n+   -- \"and\" --\n+   -----------\n+\n+   function \"and\" (Addr, Mask : Inet_Addr_Type) return Inet_Addr_Type is\n+   begin\n+      if Addr.Family /= Mask.Family then\n+         raise Constraint_Error with \"incompatible address families\";\n+      end if;\n+\n+      declare\n+         A : constant Inet_Addr_Bytes := Get_Bytes (Addr);\n+         M : constant Inet_Addr_Bytes := Get_Bytes (Mask);\n+         R : Inet_Addr_Bytes (A'Range);\n+\n+      begin\n+         for J in A'Range loop\n+            R (J) := A (J) and M (J);\n+         end loop;\n+         return Create_Address (Addr.Family, R);\n+      end;\n+   end \"and\";\n+\n+   ----------\n+   -- \"or\" --\n+   ----------\n+\n+   function \"or\" (Net, Host : Inet_Addr_Type) return Inet_Addr_Type is\n+   begin\n+      if Net.Family /= Host.Family then\n+         raise Constraint_Error with \"incompatible address families\";\n+      end if;\n+\n+      declare\n+         N : constant Inet_Addr_Bytes := Get_Bytes (Net);\n+         H : constant Inet_Addr_Bytes := Get_Bytes (Host);\n+         R : Inet_Addr_Bytes (N'Range);\n+\n+      begin\n+         for J in N'Range loop\n+            R (J) := N (J) or H (J);\n+         end loop;\n+         return Create_Address (Net.Family, R);\n+      end;\n+   end \"or\";\n+\n+   -----------\n+   -- \"not\" --\n+   -----------\n+\n+   function \"not\" (Mask : Inet_Addr_Type) return Inet_Addr_Type is\n+      M : constant Inet_Addr_Bytes := Get_Bytes (Mask);\n+      R : Inet_Addr_Bytes (M'Range);\n+   begin\n+      for J in R'Range loop\n+         R (J) := not M (J);\n+      end loop;\n+      return Create_Address (Mask.Family, R);\n+   end \"not\";\n+\n end GNAT.Sockets;"}, {"sha": "03b3f9548cf8cd6bf78393c38eb438991b13daaa", "filename": "gcc/ada/libgnat/g-socket.ads", "status": "modified", "additions": 43, "deletions": 19, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d47c8ef90093a92e7f6ad34365dd107a37697309/gcc%2Fada%2Flibgnat%2Fg-socket.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d47c8ef90093a92e7f6ad34365dd107a37697309/gcc%2Fada%2Flibgnat%2Fg-socket.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fg-socket.ads?ref=d47c8ef90093a92e7f6ad34365dd107a37697309", "patch": "@@ -489,7 +489,32 @@ package GNAT.Sockets is\n    No_Port : constant Port_Type;\n    --  Uninitialized port number\n \n-   type Inet_Addr_Type (Family : Family_Type := Family_Inet) is private;\n+   type Inet_Addr_Comp_Type is mod 2 ** 8;\n+   --  Octet for Internet address\n+\n+   Inet_Addr_Bytes_Length : constant array (Family_Type) of Positive :=\n+     (Family_Inet => 4, Family_Inet6 => 16);\n+\n+   type Inet_Addr_Bytes is array (Natural range <>) of Inet_Addr_Comp_Type;\n+\n+   subtype Inet_Addr_V4_Type is\n+     Inet_Addr_Bytes (1 ..  Inet_Addr_Bytes_Length (Family_Inet));\n+   subtype Inet_Addr_V6_Type is\n+     Inet_Addr_Bytes (1 ..  Inet_Addr_Bytes_Length (Family_Inet6));\n+\n+   subtype Inet_Addr_VN_Type is Inet_Addr_Bytes;\n+   --  For backwards compatibility\n+\n+   type Inet_Addr_Type (Family : Family_Type := Family_Inet) is record\n+      case Family is\n+         when Family_Inet =>\n+            Sin_V4 : Inet_Addr_V4_Type := (others => 0);\n+\n+         when Family_Inet6 =>\n+            Sin_V6 : Inet_Addr_V6_Type := (others => 0);\n+      end case;\n+   end record;\n+\n    --  An Internet address depends on an address family (IPv4 contains 4 octets\n    --  and IPv6 contains 16 octets). Any_Inet_Addr is a special value treated\n    --  like a wildcard enabling all addresses. No_Inet_Addr provides a special\n@@ -506,6 +531,23 @@ package GNAT.Sockets is\n    All_Hosts_Group_Inet_Addr   : constant Inet_Addr_Type;\n    All_Routers_Group_Inet_Addr : constant Inet_Addr_Type;\n \n+   --  Functions to handle masks and prefixes\n+\n+   function Mask\n+     (Family : Family_Type;\n+      Length : Natural;\n+      Host   : Boolean := False) return Inet_Addr_Type;\n+   --  Return an address mask of the given family with the given prefix length.\n+   --  If Host is False, this is a network mask (i.e. network bits are 1,\n+   --  and host bits are 0); if Host is True, this is a host mask (i.e.\n+   --  network bits are 0, and host bits are 1).\n+\n+   function \"and\" (Addr, Mask : Inet_Addr_Type) return Inet_Addr_Type;\n+   function \"or\" (Net, Host : Inet_Addr_Type) return Inet_Addr_Type;\n+   function \"not\" (Mask : Inet_Addr_Type) return Inet_Addr_Type;\n+   --  Bit-wise operations on inet addresses (both operands must have the\n+   --  same address family).\n+\n    type Sock_Addr_Type (Family : Family_Type := Family_Inet) is record\n       Addr : Inet_Addr_Type (Family);\n       Port : Port_Type;\n@@ -1213,24 +1255,6 @@ private\n       --  undefined if Last = No_Socket.\n    end record;\n \n-   subtype Inet_Addr_Comp_Type is Natural range 0 .. 255;\n-   --  Octet for Internet address\n-\n-   type Inet_Addr_VN_Type is array (Natural range <>) of Inet_Addr_Comp_Type;\n-\n-   subtype Inet_Addr_V4_Type is Inet_Addr_VN_Type (1 ..  4);\n-   subtype Inet_Addr_V6_Type is Inet_Addr_VN_Type (1 .. 16);\n-\n-   type Inet_Addr_Type (Family : Family_Type := Family_Inet) is record\n-      case Family is\n-         when Family_Inet =>\n-            Sin_V4 : Inet_Addr_V4_Type := (others => 0);\n-\n-         when Family_Inet6 =>\n-            Sin_V6 : Inet_Addr_V6_Type := (others => 0);\n-      end case;\n-   end record;\n-\n    Any_Port : constant Port_Type := 0;\n    No_Port  : constant Port_Type := 0;\n "}]}