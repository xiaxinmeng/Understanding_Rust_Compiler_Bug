{"sha": "f5c8b82512f9d3eda7e4c71853409d3ac6224777", "node_id": "C_kwDOANBUbNoAKGY1YzhiODI1MTJmOWQzZWRhN2U0YzcxODUzNDA5ZDNhYzYyMjQ3Nzc", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-01-17T19:32:27Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-01-17T19:32:27Z"}, "message": "libstdc++: Apply modifications to our local copy of fast_float\n\nThis performs the following modifications to our local copy of fast_float\nin order to make it more readily usable in our std::from_chars\nimplementation:\n\n  * Remove system #includes\n  * Replace stray call to assert\n  * Use the standard chars_format and from_chars_result types\n\nlibstdc++-v3/ChangeLog:\n\n\t* src/c++17/fast_float/LOCAL_PATCHES: Update.\n\t* src/c++17/fast_float/fast_float.h: Apply local modifications.", "tree": {"sha": "54e7673484e0e505b3ef886a312f15b841590e2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54e7673484e0e505b3ef886a312f15b841590e2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5c8b82512f9d3eda7e4c71853409d3ac6224777", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5c8b82512f9d3eda7e4c71853409d3ac6224777", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5c8b82512f9d3eda7e4c71853409d3ac6224777", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5c8b82512f9d3eda7e4c71853409d3ac6224777/comments", "author": null, "committer": null, "parents": [{"sha": "2800bc08e4ab4c116f556f17791936c889191fbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2800bc08e4ab4c116f556f17791936c889191fbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2800bc08e4ab4c116f556f17791936c889191fbf"}], "stats": {"total": 63, "additions": 7, "deletions": 56}, "files": [{"sha": "ad5a60f9a0112f9837b7bcdc95fe3acb10f036b6", "filename": "libstdc++-v3/src/c++17/fast_float/LOCAL_PATCHES", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5c8b82512f9d3eda7e4c71853409d3ac6224777/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffast_float%2FLOCAL_PATCHES", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5c8b82512f9d3eda7e4c71853409d3ac6224777/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffast_float%2FLOCAL_PATCHES", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffast_float%2FLOCAL_PATCHES?ref=f5c8b82512f9d3eda7e4c71853409d3ac6224777", "patch": "@@ -0,0 +1 @@\n+r12-6647"}, {"sha": "c908719ec3afb4bf7a7fa48c6fb1bc44be5662b1", "filename": "libstdc++-v3/src/c++17/fast_float/fast_float.h", "status": "modified", "additions": 6, "deletions": 56, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5c8b82512f9d3eda7e4c71853409d3ac6224777/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffast_float%2Ffast_float.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5c8b82512f9d3eda7e4c71853409d3ac6224777/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffast_float%2Ffast_float.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffast_float%2Ffast_float.h?ref=f5c8b82512f9d3eda7e4c71853409d3ac6224777", "patch": "@@ -42,21 +42,10 @@\n #ifndef FASTFLOAT_FAST_FLOAT_H\n #define FASTFLOAT_FAST_FLOAT_H\n \n-#include <system_error>\n-\n namespace fast_float {\n-enum chars_format {\n-    scientific = 1<<0,\n-    fixed = 1<<2,\n-    hex = 1<<3,\n-    general = fixed | scientific\n-};\n \n-\n-struct from_chars_result {\n-  const char *ptr;\n-  std::errc ec;\n-};\n+using std::chars_format;\n+using std::from_chars_result;\n \n struct parse_options {\n   constexpr explicit parse_options(chars_format fmt = chars_format::general,\n@@ -105,11 +94,6 @@ from_chars_result from_chars_advanced(const char *first, const char *last,\n #ifndef FASTFLOAT_FLOAT_COMMON_H\n #define FASTFLOAT_FLOAT_COMMON_H\n \n-#include <cfloat>\n-#include <cstdint>\n-#include <cassert>\n-#include <cstring>\n-\n #if (defined(__x86_64) || defined(__x86_64__) || defined(_M_X64)   \\\n        || defined(__amd64) || defined(__aarch64__) || defined(_M_ARM64) \\\n        || defined(__MINGW64__)                                          \\\n@@ -233,7 +217,7 @@ struct value128 {\n \n /* result might be undefined when input_num is zero */\n fastfloat_really_inline int leading_zeroes(uint64_t input_num) {\n-  assert(input_num > 0);\n+  FASTFLOAT_DEBUG_ASSERT(input_num > 0);\n #ifdef FASTFLOAT_VISUAL_STUDIO\n   #if defined(_M_X64) || defined(_M_ARM64)\n   unsigned long leading_zero = 0;\n@@ -468,11 +452,6 @@ fastfloat_really_inline void to_float(bool negative, adjusted_mantissa am, T &va\n #ifndef FASTFLOAT_ASCII_NUMBER_H\n #define FASTFLOAT_ASCII_NUMBER_H\n \n-#include <cctype>\n-#include <cstdint>\n-#include <cstring>\n-#include <iterator>\n-\n \n namespace fast_float {\n \n@@ -610,7 +589,7 @@ parsed_number_string parse_number_string(const char *p, const char *pend, parse_\n     return answer;\n   }\n   int64_t exp_number = 0;            // explicit exponential part\n-  if ((fmt & chars_format::scientific) && (p != pend) && (('e' == *p) || ('E' == *p))) {\n+  if (bool(fmt & chars_format::scientific) && (p != pend) && (('e' == *p) || ('E' == *p))) {\n     const char * location_of_e = p;\n     ++p;\n     bool neg_exp = false;\n@@ -621,7 +600,7 @@ parsed_number_string parse_number_string(const char *p, const char *pend, parse_\n       ++p;\n     }\n     if ((p == pend) || !is_integer(*p)) {\n-      if(!(fmt & chars_format::fixed)) {\n+      if(!bool(fmt & chars_format::fixed)) {\n         // We are in error.\n         return answer;\n       }\n@@ -640,7 +619,7 @@ parsed_number_string parse_number_string(const char *p, const char *pend, parse_\n     }\n   } else {\n     // If it scientific and not fixed, we have to bail out.\n-    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }\n+    if(bool(fmt & chars_format::scientific) && !bool(fmt & chars_format::fixed)) { return answer; }\n   }\n   answer.lastmatch = p;\n   answer.valid = true;\n@@ -699,8 +678,6 @@ parsed_number_string parse_number_string(const char *p, const char *pend, parse_\n #ifndef FASTFLOAT_FAST_TABLE_H\n #define FASTFLOAT_FAST_TABLE_H\n \n-#include <cstdint>\n-\n namespace fast_float {\n \n /**\n@@ -1399,13 +1376,6 @@ using powers = powers_template<>;\n #ifndef FASTFLOAT_DECIMAL_TO_BINARY_H\n #define FASTFLOAT_DECIMAL_TO_BINARY_H\n \n-#include <cfloat>\n-#include <cinttypes>\n-#include <cmath>\n-#include <cstdint>\n-#include <cstdlib>\n-#include <cstring>\n-\n namespace fast_float {\n \n // This will compute or rather approximate w * 5**q and return a pair of 64-bit words approximating\n@@ -1592,11 +1562,6 @@ adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {\n #ifndef FASTFLOAT_BIGINT_H\n #define FASTFLOAT_BIGINT_H\n \n-#include <algorithm>\n-#include <cstdint>\n-#include <climits>\n-#include <cstring>\n-\n \n namespace fast_float {\n \n@@ -2182,11 +2147,6 @@ struct bigint {\n #ifndef FASTFLOAT_ASCII_NUMBER_H\n #define FASTFLOAT_ASCII_NUMBER_H\n \n-#include <cctype>\n-#include <cstdint>\n-#include <cstring>\n-#include <iterator>\n-\n \n namespace fast_float {\n \n@@ -2413,11 +2373,6 @@ parsed_number_string parse_number_string(const char *p, const char *pend, parse_\n #ifndef FASTFLOAT_DIGIT_COMPARISON_H\n #define FASTFLOAT_DIGIT_COMPARISON_H\n \n-#include <algorithm>\n-#include <cstdint>\n-#include <cstring>\n-#include <iterator>\n-\n \n namespace fast_float {\n \n@@ -2835,11 +2790,6 @@ inline adjusted_mantissa digit_comp(parsed_number_string& num, adjusted_mantissa\n #define FASTFLOAT_PARSE_NUMBER_H\n \n \n-#include <cmath>\n-#include <cstring>\n-#include <limits>\n-#include <system_error>\n-\n namespace fast_float {\n \n "}]}