{"sha": "01ac2f08b0105a1c85425d0e59216eb528c6d2ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDFhYzJmMDhiMDEwNWExYzg1NDI1ZDBlNTkyMTZlYjUyOGM2ZDJhYg==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-07-23T00:16:31Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-07-23T00:16:31Z"}, "message": "Daily bump.", "tree": {"sha": "3eeaf64a566ae47483d8c039d7f30cc35d34dd8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3eeaf64a566ae47483d8c039d7f30cc35d34dd8d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01ac2f08b0105a1c85425d0e59216eb528c6d2ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01ac2f08b0105a1c85425d0e59216eb528c6d2ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01ac2f08b0105a1c85425d0e59216eb528c6d2ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01ac2f08b0105a1c85425d0e59216eb528c6d2ab/comments", "author": null, "committer": null, "parents": [{"sha": "e4966e1d1de54441bdaed54eb00084db4193bbbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4966e1d1de54441bdaed54eb00084db4193bbbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4966e1d1de54441bdaed54eb00084db4193bbbf"}], "stats": {"total": 157, "additions": 156, "deletions": 1}, "files": [{"sha": "b70e99c079cf1ab61d5a704d4ff58302498d6469", "filename": "gcc/ChangeLog", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01ac2f08b0105a1c85425d0e59216eb528c6d2ab/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01ac2f08b0105a1c85425d0e59216eb528c6d2ab/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=01ac2f08b0105a1c85425d0e59216eb528c6d2ab", "patch": "@@ -1,3 +1,72 @@\n+2021-07-22  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR tree-optimization/10153\n+\t* tree-tailcall.c (create_tailcall_accumulator):\n+\tDon't call fold_convert as the type should be correct already.\n+\t(tree_optimize_tail_calls_1): Use build_{one,zero}_cst instead\n+\tof integer_{one,zero}_node for the call of create_tailcall_accumulator.\n+\n+2021-07-22  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-range-cache.cc (non_null_ref::adjust_range): Replace\n+\tvarying_p check for null/non-null check.\n+\n+2021-07-22  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/101511\n+\t* value-relation.cc (relation_oracle::query_relation): Check if ssa1\n+\tis in ssa2's equiv set, and don't trap if so.\n+\n+2021-07-22  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/101497\n+\t* gimple-range-fold.cc (fold_using_range::range_of_cond_expr): Check\n+\tfor undefined.\n+\n+2021-07-22  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/101496\n+\t* vr-values.c (simplify_using_ranges::fold_cond): Call range_of_stmt\n+\tfirst, then vrp_visit_cond_Stmt.\n+\n+2021-07-22  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* config/i386/i386-expand.c\n+\t(ix86_broadcast_from_integer_constant): Rename to ..\n+\t(ix86_broadcast_from_constant): .. this, and extend it to\n+\thandle float mode.\n+\t(ix86_expand_vector_move): Extend to float mode.\n+\t* config/i386/i386-features.c\n+\t(replace_constant_pool_with_broadcast): Remove.\n+\t(remove_partial_avx_dependency_gate): Ditto.\n+\t(constant_pool_broadcast): Ditto.\n+\t(class pass_constant_pool_broadcast): Ditto.\n+\t(make_pass_constant_pool_broadcast): Ditto.\n+\t(remove_partial_avx_dependency): Adjust gate.\n+\t* config/i386/i386-passes.def: Remove pass_constant_pool_broadcast.\n+\t* config/i386/i386-protos.h\n+\t(make_pass_constant_pool_broadcast): Remove.\n+\n+2021-07-22  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* config/i386/constraints.md (Wb): New constraint.\n+\t(Ww): Ditto.\n+\t* config/i386/i386.md (*ashlhi3_1): Extend to avx512 mask\n+\tshift.\n+\t(*ashlqi3_1): Ditto.\n+\t(*<insn><mode>3_1): Split to ..\n+\t(*ashr<mode>3_1): this, ...\n+\t(*lshr<mode>3_1): and this, also extend this pattern to avx512\n+\tmask registers.\n+\t(*<insn><mode>3_1): Split to ..\n+\t(*ashr<mode>3_1): this, ...\n+\t(*lshrqi3_1): and this, also extend this pattern to avx512\n+\tmask registers.\n+\t(*lshrhi3_1): And this, also extend this pattern to avx512\n+\tmask registers.\n+\t* config/i386/sse.md (k<code><mode>): New define_split after\n+\tit to convert generic shift pattern to mask shift ones.\n+\n 2021-07-21  Thomas Schwinge  <thomas@codesourcery.com>\n \t    Joseph Myers  <joseph@codesourcery.com>\n \t    Cesar Philippidis  <cesar@codesourcery.com>"}, {"sha": "dd601225256965b4b5a69d270982ddaaa38ad033", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01ac2f08b0105a1c85425d0e59216eb528c6d2ab/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01ac2f08b0105a1c85425d0e59216eb528c6d2ab/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=01ac2f08b0105a1c85425d0e59216eb528c6d2ab", "patch": "@@ -1 +1 @@\n-20210722\n+20210723"}, {"sha": "22ff279f7a9eaf2fe63710f035cf297dfc5b7664", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01ac2f08b0105a1c85425d0e59216eb528c6d2ab/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01ac2f08b0105a1c85425d0e59216eb528c6d2ab/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=01ac2f08b0105a1c85425d0e59216eb528c6d2ab", "patch": "@@ -1,3 +1,39 @@\n+2021-07-22  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/65178\n+\t* gcc.dg/uninit-pr65178.c: New test.\n+\n+2021-07-22  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR testsuite/101568\n+\t* g++.dg/ipa/pr82352.C\n+\n+2021-07-22  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR tree-optimization/10153\n+\t* gcc.c-torture/compile/pr10153-1.c: New test.\n+\t* gcc.c-torture/compile/pr10153-2.c: New test.\n+\n+2021-07-22  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* g++.dg/pr101511.C: New.\n+\n+2021-07-22  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gcc.dg/pr101497.c: New.\n+\n+2021-07-22  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gcc.dg/pr101496.c: New.\n+\n+2021-07-22  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/fuse-caller-save-xmm.c: Adjust testcase.\n+\n+2021-07-22  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/mask-shift.c: New test.\n+\n 2021-07-21  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/101547"}, {"sha": "df8ff97c5e6ea8fc0898b32ab9375da5a1682914", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01ac2f08b0105a1c85425d0e59216eb528c6d2ab/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01ac2f08b0105a1c85425d0e59216eb528c6d2ab/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=01ac2f08b0105a1c85425d0e59216eb528c6d2ab", "patch": "@@ -1,3 +1,9 @@\n+2021-07-22  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* runtime/ISO_Fortran_binding.c (CFI_allocate): Don't use elem_len\n+\tfor CFI_type_signed_char.\n+\t(CFI_select_part): Likewise.\n+\n 2021-07-01  Tobias Burnus  <tobias@codesourcery.com>\n \t    Sandra Loosemore  <sandra@codesourcery.com>\n "}, {"sha": "33c6d613a509e1f9bf60694a7464e8e517e768e8", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01ac2f08b0105a1c85425d0e59216eb528c6d2ab/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01ac2f08b0105a1c85425d0e59216eb528c6d2ab/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=01ac2f08b0105a1c85425d0e59216eb528c6d2ab", "patch": "@@ -1,3 +1,47 @@\n+2021-07-22  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/101583\n+\t* include/bits/hashtable.h (_Hashtable): Replace mixin with\n+\t_Enable_default_ctor. Construct it explicitly in all\n+\tnon-forwarding, non-defaulted constructors.\n+\t* testsuite/23_containers/unordered_map/cons/default.cc: Check\n+\tnon-default constructors can be used.\n+\t* testsuite/23_containers/unordered_set/cons/default.cc:\n+\tLikewise.\n+\n+2021-07-22  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* config/os/aix/os_defines.h (__LIBC_NO_CPP_MATH_OVERLOADS__): Define.\n+\n+2021-07-22  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/94295\n+\t* include/ext/new_allocator.h (_GLIBCXX_OPERATOR_NEW)\n+\t(_GLIBCXX_OPERATOR_DELETE, _GLIBCXX_SIZED_DEALLOC): Define.\n+\t(allocator::allocate, allocator::deallocate): Use new macros.\n+\n+2021-07-22  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/101571\n+\t* include/bits/ranges_uninitialized.h (_DestroyGuard): Change\n+\tconstructor parameter to reference and use addressof.\n+\t* testsuite/util/testsuite_iterators.h: Define deleted operator&\n+\toverloads for test iterators.\n+\n+2021-07-22  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/std_function.h (_Function_base): Add\n+\tdefault member initializers and define constructor as defaulted.\n+\t(function::_M_invoker): Add default member initializer.\n+\n+2021-07-22  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/100682\n+\t* doc/xml/manual/debug_mode.xml: Update documentation about\n+\tdebug capability of std::array.\n+\t* doc/html/*: Regenerate.\n+\t* include/debug/array: New file.\n+\n 2021-07-21  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/101542"}]}