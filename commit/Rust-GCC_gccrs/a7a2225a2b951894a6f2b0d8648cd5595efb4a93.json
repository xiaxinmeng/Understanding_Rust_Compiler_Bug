{"sha": "a7a2225a2b951894a6f2b0d8648cd5595efb4a93", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTdhMjIyNWEyYjk1MTg5NGE2ZjJiMGQ4NjQ4Y2Q1NTk1ZWZiNGE5Mw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-02-03T07:08:29Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-02-03T07:08:29Z"}, "message": "c4x.h (FUNCTION_VALUE): Use gen_rtx_REG instead of gen_rtx.\n\n\t* config/c4x/c4x.h (FUNCTION_VALUE): Use gen_rtx_REG instead\n\tof gen_rtx.\n\t(LIBCALL_VALUE): Likewise.\n\t* config/ip2k/ip2k.c (mdr_try_propagate_clr_sequence): Use\n\tgen_rtx_CC0 instead of gen_rtx.\n\t* config/m68hc11/m68hc11.c (m68hc11_emit_libcall): Use\n\tgen_rtx_fmt_e and gen_rtx_fmt_ee instead of gen_rtx.\n\t(m68hc11_expand_compare): Use gen_rtx_fmt_ee instead of\n\tgen_rtx.\n\t(m68hc11_emit_logical): Likewise.\n\nFrom-SVN: r77162", "tree": {"sha": "41d34e9d6d9a2ca071567938881ac977bdf79453", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/41d34e9d6d9a2ca071567938881ac977bdf79453"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7a2225a2b951894a6f2b0d8648cd5595efb4a93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7a2225a2b951894a6f2b0d8648cd5595efb4a93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7a2225a2b951894a6f2b0d8648cd5595efb4a93", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7a2225a2b951894a6f2b0d8648cd5595efb4a93/comments", "author": null, "committer": null, "parents": [{"sha": "a556fd39abf14ab516df0663c8df99ea8e81f9c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a556fd39abf14ab516df0663c8df99ea8e81f9c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a556fd39abf14ab516df0663c8df99ea8e81f9c5"}], "stats": {"total": 38, "additions": 26, "deletions": 12}, "files": [{"sha": "0bedc8af962bdcdbd18fe9e3b6eaafec07caaf22", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7a2225a2b951894a6f2b0d8648cd5595efb4a93/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7a2225a2b951894a6f2b0d8648cd5595efb4a93/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a7a2225a2b951894a6f2b0d8648cd5595efb4a93", "patch": "@@ -1,3 +1,16 @@\n+2004-02-03  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/c4x/c4x.h (FUNCTION_VALUE): Use gen_rtx_REG instead\n+\tof gen_rtx.\n+\t(LIBCALL_VALUE): Likewise.\n+\t* config/ip2k/ip2k.c (mdr_try_propagate_clr_sequence): Use\n+\tgen_rtx_CC0 instead of gen_rtx.\n+\t* config/m68hc11/m68hc11.c (m68hc11_emit_libcall): Use\n+\tgen_rtx_fmt_e and gen_rtx_fmt_ee instead of gen_rtx.\n+\t(m68hc11_expand_compare): Use gen_rtx_fmt_ee instead of\n+\tgen_rtx.\n+\t(m68hc11_emit_logical): Likewise.\n+\n 2004-02-03  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/alpha/alpha.c, config/arm/arm.c, config/c4x/c4x.c,"}, {"sha": "1725b796a6e71d830398774b3482fd1bee6fff93", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7a2225a2b951894a6f2b0d8648cd5595efb4a93/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7a2225a2b951894a6f2b0d8648cd5595efb4a93/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=a7a2225a2b951894a6f2b0d8648cd5595efb4a93", "patch": "@@ -1151,10 +1151,10 @@ CUMULATIVE_ARGS;\n /* How Scalar Function Values Are Returned.  */\n \n #define FUNCTION_VALUE(VALTYPE, FUNC) \\\n-\tgen_rtx(REG, TYPE_MODE(VALTYPE), R0_REGNO)\t/* Return in R0.  */\n+\tgen_rtx_REG (TYPE_MODE(VALTYPE), R0_REGNO)\t/* Return in R0.  */\n \n #define LIBCALL_VALUE(MODE) \\\n-\tgen_rtx(REG, MODE, R0_REGNO)\t/* Return in R0.  */\n+\tgen_rtx_REG (MODE, R0_REGNO)\t/* Return in R0.  */\n \n #define FUNCTION_VALUE_REGNO_P(REGNO) ((REGNO) == R0_REGNO)\n "}, {"sha": "916fd1025d120b7a356597d0c31815cf827c09fd", "filename": "gcc/config/ip2k/ip2k.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7a2225a2b951894a6f2b0d8648cd5595efb4a93/gcc%2Fconfig%2Fip2k%2Fip2k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7a2225a2b951894a6f2b0d8648cd5595efb4a93/gcc%2Fconfig%2Fip2k%2Fip2k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fip2k%2Fip2k.c?ref=a7a2225a2b951894a6f2b0d8648cd5595efb4a93", "patch": "@@ -4458,7 +4458,7 @@ mdr_try_propagate_clr_sequence (first_insn, regno)\n \t      && GET_MODE_SIZE (GET_MODE (XEXP (set2, 1))) == 2\n \t      && REGNO (XEXP (set2, 1)) == regno)\n             {\n-\t      new_insn = gen_rtx_SET (VOIDmode, gen_rtx (CC0, VOIDmode),\n+\t      new_insn = gen_rtx_SET (VOIDmode, gen_rtx_CC0 (VOIDmode),\n \t\t\t\t      gen_rtx_REG(QImode, regno + 1));\n               new_insn = emit_insn_before (new_insn, try_insn);\n \t    }"}, {"sha": "c43042115127b2f73273fb5a35b3736ec5ffaa03", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7a2225a2b951894a6f2b0d8648cd5595efb4a93/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7a2225a2b951894a6f2b0d8648cd5595efb4a93/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=a7a2225a2b951894a6f2b0d8648cd5595efb4a93", "patch": "@@ -866,15 +866,15 @@ m68hc11_emit_libcall (const char *name, enum rtx_code code,\n     case 2:\n       ret = emit_library_call_value (libcall, NULL_RTX, LCT_CONST,\n                                      dmode, 1, operands[1], smode);\n-      equiv = gen_rtx (code, dmode, operands[1]);\n+      equiv = gen_rtx_fmt_e (code, dmode, operands[1]);\n       break;\n \n     case 3:\n       ret = emit_library_call_value (libcall, NULL_RTX,\n                                      LCT_CONST, dmode, 2,\n                                      operands[1], smode, operands[2],\n                                      smode);\n-      equiv = gen_rtx (code, dmode, operands[1], operands[2]);\n+      equiv = gen_rtx_fmt_ee (code, dmode, operands[1], operands[2]);\n       break;\n \n     default:\n@@ -2498,7 +2498,7 @@ m68hc11_expand_compare (enum rtx_code code, rtx op0, rtx op1)\n     {\n       emit_insn (gen_rtx_SET (VOIDmode, cc0_rtx,\n \t\t\t      gen_rtx_COMPARE (VOIDmode, op0, op1)));\n-      ret = gen_rtx (code, VOIDmode, cc0_rtx, const0_rtx);\n+      ret = gen_rtx_fmt_ee (code, VOIDmode, cc0_rtx, const0_rtx);\n     }\n \n   return ret;\n@@ -2976,17 +2976,18 @@ m68hc11_emit_logical (enum machine_mode mode, int code, rtx *operands)\n \t{\n \t  emit_move_insn (operands[3], operands[1]);\n \t  emit_insn (gen_rtx_SET (mode,\n-\t\t\t      operands[3],\n-\t\t\t      gen_rtx (code, mode,\n-\t\t\t\t       operands[3], operands[2])));\n+\t\t\t\t  operands[3],\n+\t\t\t\t  gen_rtx_fmt_ee (code, mode,\n+\t\t\t\t\t\t  operands[3], operands[2])));\n \t  insn = emit_move_insn (operands[0], operands[3]);\n \t}\n       else\n \t{\n \t  insn = emit_insn (gen_rtx_SET (mode,\n-\t\t\t\t     operands[0],\n-\t\t\t\t     gen_rtx (code, mode,\n-\t\t\t\t\t      operands[0], operands[2])));\n+\t\t\t\t\t operands[0],\n+\t\t\t\t\t gen_rtx_fmt_ee (code, mode,\n+\t\t\t\t\t\t\t operands[0],\n+\t\t\t\t\t\t\t operands[2])));\n \t}\n     }\n "}]}