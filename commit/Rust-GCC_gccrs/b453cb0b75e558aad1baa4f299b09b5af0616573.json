{"sha": "b453cb0b75e558aad1baa4f299b09b5af0616573", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQ1M2NiMGI3NWU1NThhYWQxYmFhNGYyOTliMDliNWFmMDYxNjU3Mw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-02-23T13:46:45Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-02-23T13:46:45Z"}, "message": "(reload): For special CONST_CALL_P NOTE_INSN_SETJMP, mark all\ncall-saved regs as used.\n\nFrom-SVN: r11341", "tree": {"sha": "95639ac9abf386839a2bcdbf08e5ec7cef0bb74a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95639ac9abf386839a2bcdbf08e5ec7cef0bb74a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b453cb0b75e558aad1baa4f299b09b5af0616573", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b453cb0b75e558aad1baa4f299b09b5af0616573", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b453cb0b75e558aad1baa4f299b09b5af0616573", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b453cb0b75e558aad1baa4f299b09b5af0616573/comments", "author": null, "committer": null, "parents": [{"sha": "0dddb42d9003167d9485ef1079f0ecc8d37e34a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dddb42d9003167d9485ef1079f0ecc8d37e34a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0dddb42d9003167d9485ef1079f0ecc8d37e34a5"}], "stats": {"total": 10, "additions": 9, "deletions": 1}, "files": [{"sha": "9b27b47a74167bfdc6542630e4bec170e3997ee1", "filename": "gcc/reload1.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b453cb0b75e558aad1baa4f299b09b5af0616573/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b453cb0b75e558aad1baa4f299b09b5af0616573/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=b453cb0b75e558aad1baa4f299b09b5af0616573", "patch": "@@ -551,12 +551,20 @@ reload (first, global, dumpfile)\n   /* Look for REG_EQUIV notes; record what each pseudo is equivalent to.\n      Also find all paradoxical subregs and find largest such for each pseudo.\n      On machines with small register classes, record hard registers that\n-     are used for user variables.  These can never be used for spills.  */\n+     are used for user variables.  These can never be used for spills. \n+     Also look for a \"constant\" NOTE_INSN_SETJMP.  This means that all\n+     caller-saved registers must be marked live.  */\n \n   for (insn = first; insn; insn = NEXT_INSN (insn))\n     {\n       rtx set = single_set (insn);\n \n+      if (GET_CODE (insn) == NOTE && CONST_CALL_P (insn)\n+\t  && NOTE_LINE_NUMBER (insn) == NOTE_INSN_SETJMP)\n+\tfor (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n+\t  if (! call_used_regs[i])\n+\t    regs_ever_live[i] = 1;\n+\n       if (set != 0 && GET_CODE (SET_DEST (set)) == REG)\n \t{\n \t  rtx note = find_reg_note (insn, REG_EQUIV, NULL_RTX);"}]}