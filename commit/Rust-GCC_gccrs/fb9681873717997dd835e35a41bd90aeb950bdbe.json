{"sha": "fb9681873717997dd835e35a41bd90aeb950bdbe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmI5NjgxODczNzE3OTk3ZGQ4MzVlMzVhNDFiZDkwYWViOTUwYmRiZQ==", "commit": {"author": {"name": "R\u00fcdiger Sonderfeld", "email": "ruediger@c-plusplus.de", "date": "2015-02-17T14:25:48Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2015-02-17T14:25:48Z"}, "message": "char32_t.cc: New.\n\n2015-02-17  R\u00fcdiger Sonderfeld  <ruediger@c-plusplus.de>\n\t    Jonathan Wakely  <jwakely@redhat.com>\n\n\t* testsuite/22_locale/codecvt/char32_t.cc: New.\n\nCo-Authored-By: Jonathan Wakely <jwakely@redhat.com>\n\nFrom-SVN: r220760", "tree": {"sha": "1f62a34b665018b0a803f97a2d4c380e34b0f0d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f62a34b665018b0a803f97a2d4c380e34b0f0d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb9681873717997dd835e35a41bd90aeb950bdbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb9681873717997dd835e35a41bd90aeb950bdbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb9681873717997dd835e35a41bd90aeb950bdbe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb9681873717997dd835e35a41bd90aeb950bdbe/comments", "author": {"login": "ruediger", "id": 1803, "node_id": "MDQ6VXNlcjE4MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/1803?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ruediger", "html_url": "https://github.com/ruediger", "followers_url": "https://api.github.com/users/ruediger/followers", "following_url": "https://api.github.com/users/ruediger/following{/other_user}", "gists_url": "https://api.github.com/users/ruediger/gists{/gist_id}", "starred_url": "https://api.github.com/users/ruediger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ruediger/subscriptions", "organizations_url": "https://api.github.com/users/ruediger/orgs", "repos_url": "https://api.github.com/users/ruediger/repos", "events_url": "https://api.github.com/users/ruediger/events{/privacy}", "received_events_url": "https://api.github.com/users/ruediger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09008d80b62d1304b13f811a94c8af84a146088f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09008d80b62d1304b13f811a94c8af84a146088f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09008d80b62d1304b13f811a94c8af84a146088f"}], "stats": {"total": 103, "additions": 103, "deletions": 0}, "files": [{"sha": "9e08cb148719d208331101bb16b0e5da88ab2793", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb9681873717997dd835e35a41bd90aeb950bdbe/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb9681873717997dd835e35a41bd90aeb950bdbe/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=fb9681873717997dd835e35a41bd90aeb950bdbe", "patch": "@@ -1,3 +1,8 @@\n+2015-02-17  R\u00fcdiger Sonderfeld  <ruediger@c-plusplus.de>\n+\t    Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/22_locale/codecvt/char32_t.cc: New.\n+\n 2015-02-17  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/65085"}, {"sha": "07f72c4cf97719bade17f4859e87947495cfe88b", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/char32_t.cc", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb9681873717997dd835e35a41bd90aeb950bdbe/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fchar32_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb9681873717997dd835e35a41bd90aeb950bdbe/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fchar32_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fchar32_t.cc?ref=fb9681873717997dd835e35a41bd90aeb950bdbe", "patch": "@@ -0,0 +1,98 @@\n+// { dg-options \"-std=gnu++11\" }\n+\n+// 2014-04-24 R\u00fcdiger Sonderfeld\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// [locale.codecvt], C++11 22.4.1.4.  specialization.\n+\n+#include <locale>\n+#include <cstring>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  using namespace std;\n+  typedef codecvt<char32_t, char, mbstate_t> codecvt_c32;\n+  locale loc_c = locale::classic();\n+  VERIFY(has_facet<codecvt_c32>(loc_c));\n+  const codecvt_c32* const cvt = &use_facet<codecvt_c32>(loc_c);\n+\n+  VERIFY(!cvt->always_noconv());\n+  VERIFY(cvt->max_length() == 4);\n+  VERIFY(cvt->encoding() == 0);\n+\n+  const char u8dat[] = u8\"H\\U000000E4ll\\U000000F6 \\U0001F63F \\U000056FD \"\n+    u8\"\\U0000222B f(\\U000003BA) exp(-2\\U000003C0\\U000003C9) d\\U000003BA \"\n+    u8\"\\U0001F6BF \\U0001F6BF \\U0001F648 \\U00000413\\U00000435\\U0000043E\"\n+    u8\"\\U00000433\\U00000440\\U00000430\\U00000444\\U00000438\\U0000044F \\U0000FB05\";\n+  const char* const u8dat_end = std::end(u8dat);\n+\n+  const char32_t u32dat[] = U\"H\\U000000E4ll\\U000000F6 \\U0001F63F \\U000056FD \"\n+    U\"\\U0000222B f(\\U000003BA) exp(-2\\U000003C0\\U000003C9) d\\U000003BA \"\n+    U\"\\U0001F6BF \\U0001F6BF \\U0001F648 \\U00000413\\U00000435\\U0000043E\"\n+    U\"\\U00000433\\U00000440\\U00000430\\U00000444\\U00000438\\U0000044F \\U0000FB05\";\n+  const char32_t* const u32dat_end = std::end(u32dat);\n+\n+  {\n+    const size_t len = u32dat_end - u32dat + 1;\n+    char32_t* const buffer = new char32_t[len];\n+    char32_t* const buffer_end = buffer + len;\n+\n+    const char* from_next;\n+    char32_t* to_next;\n+\n+    codecvt_c32::state_type state01;\n+    state01 = {};\n+    codecvt_base::result res = cvt->in(state01, u8dat, u8dat_end, from_next,\n+                                       buffer, buffer_end, to_next);\n+\n+    VERIFY(res == codecvt_base::ok);\n+    VERIFY(from_next == u8dat_end);\n+    VERIFY(std::memcmp((void*)buffer, (void*)u32dat, sizeof(u32dat)) == 0);\n+\n+    delete[] buffer;\n+  }\n+\n+  {\n+    const size_t len = u8dat_end - u8dat + 1;\n+    char* const buffer = new char[len];\n+    char* const buffer_end = buffer + len;\n+\n+    const char32_t* from_next;\n+    char* to_next;\n+\n+    codecvt_c32::state_type state01;\n+    state01 = {};\n+    codecvt_base::result res = cvt->out(state01, u32dat, u32dat_end, from_next,\n+                                        buffer, buffer_end, to_next);\n+\n+    VERIFY(res == codecvt_base::ok);\n+    VERIFY(from_next == u32dat_end);\n+    VERIFY(std::memcmp((void*)buffer, (void*)u8dat, sizeof(u8dat)) == 0);\n+\n+    delete[] buffer;\n+  }\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}]}