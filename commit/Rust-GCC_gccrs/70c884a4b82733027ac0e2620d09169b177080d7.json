{"sha": "70c884a4b82733027ac0e2620d09169b177080d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzBjODg0YTRiODI3MzMwMjdhYzBlMjYyMGQwOTE2OWIxNzcwODBkNw==", "commit": {"author": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2020-07-10T19:35:35Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2020-07-10T19:35:35Z"}, "message": "PR fortran/95980 - ICE in get_unique_type_string, at fortran/class.c:485\n\nIn SELECT TYPE, the argument may be an incorrectly specified unlimited\nCLASS variable.  Avoid NULL pointer dereferences for clean error\nrecovery.\n\ngcc/fortran/\n\tPR fortran/95980\n\t* class.c (gfc_add_component_ref, gfc_build_class_symbol):\n\tAdd checks for NULL pointer dereference.\n\t* primary.c (gfc_variable_attr): Likewise.\n\t* resolve.c (resolve_variable, resolve_assoc_var)\n\t(resolve_fl_var_and_proc, resolve_fl_variable_derived)\n\t(resolve_symbol): Likewise.", "tree": {"sha": "fefa915f1be0e6bc5831048847ba1abb56d7eec5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fefa915f1be0e6bc5831048847ba1abb56d7eec5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70c884a4b82733027ac0e2620d09169b177080d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70c884a4b82733027ac0e2620d09169b177080d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70c884a4b82733027ac0e2620d09169b177080d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70c884a4b82733027ac0e2620d09169b177080d7/comments", "author": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a0b69f0b089c05d233b8e1a941825b1ceac93bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a0b69f0b089c05d233b8e1a941825b1ceac93bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a0b69f0b089c05d233b8e1a941825b1ceac93bd"}], "stats": {"total": 38, "additions": 31, "deletions": 7}, "files": [{"sha": "dfa484007120307c43fe14e48d3e4bdf32fe03fd", "filename": "gcc/fortran/class.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70c884a4b82733027ac0e2620d09169b177080d7/gcc%2Ffortran%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70c884a4b82733027ac0e2620d09169b177080d7/gcc%2Ffortran%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fclass.c?ref=70c884a4b82733027ac0e2620d09169b177080d7", "patch": "@@ -228,7 +228,7 @@ gfc_add_component_ref (gfc_expr *e, const char *name)\n \tbreak;\n       tail = &((*tail)->next);\n     }\n-  if (derived->components && derived->components->next &&\n+  if (derived && derived->components && derived->components->next &&\n       derived->components->next->ts.type == BT_DERIVED &&\n       derived->components->next->ts.u.derived == NULL)\n     {\n@@ -663,6 +663,10 @@ gfc_build_class_symbol (gfc_typespec *ts, symbol_attribute *attr,\n \n   /* Determine the name of the encapsulating type.  */\n   rank = !(*as) || (*as)->rank == -1 ? GFC_MAX_DIMENSIONS : (*as)->rank;\n+\n+  if (!ts->u.derived)\n+    return false;\n+\n   get_unique_hashed_string (tname, ts->u.derived);\n   if ((*as) && attr->allocatable)\n     name = xasprintf (\"__class_%s_%d_%da\", tname, rank, (*as)->corank);"}, {"sha": "c0f66d3df22a8813b6b76c6d8974ea3b9a3efeef", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70c884a4b82733027ac0e2620d09169b177080d7/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70c884a4b82733027ac0e2620d09169b177080d7/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=70c884a4b82733027ac0e2620d09169b177080d7", "patch": "@@ -2597,7 +2597,7 @@ gfc_variable_attr (gfc_expr *expr, gfc_typespec *ts)\n   sym = expr->symtree->n.sym;\n   attr = sym->attr;\n \n-  if (sym->ts.type == BT_CLASS && sym->attr.class_ok)\n+  if (sym->ts.type == BT_CLASS && sym->attr.class_ok && sym->ts.u.derived)\n     {\n       dimension = CLASS_DATA (sym)->attr.dimension;\n       codimension = CLASS_DATA (sym)->attr.codimension;"}, {"sha": "b1238c8ab91a032f3a486a54f6e572c79200eda6", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70c884a4b82733027ac0e2620d09169b177080d7/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70c884a4b82733027ac0e2620d09169b177080d7/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=70c884a4b82733027ac0e2620d09169b177080d7", "patch": "@@ -5571,6 +5571,7 @@ resolve_variable (gfc_expr *e)\n     }\n   /* TS 29113, C535b.  */\n   else if (((sym->ts.type == BT_CLASS && sym->attr.class_ok\n+\t     && sym->ts.u.derived && CLASS_DATA (sym)\n \t     && CLASS_DATA (sym)->as\n \t     && CLASS_DATA (sym)->as->type == AS_ASSUMED_RANK)\n \t    || (sym->ts.type != BT_CLASS && sym->as\n@@ -5618,6 +5619,7 @@ resolve_variable (gfc_expr *e)\n \n   /* TS 29113, C535b.  */\n   if (((sym->ts.type == BT_CLASS && sym->attr.class_ok\n+\t&& sym->ts.u.derived && CLASS_DATA (sym)\n \t&& CLASS_DATA (sym)->as\n \t&& CLASS_DATA (sym)->as->type == AS_ASSUMED_RANK)\n        || (sym->ts.type != BT_CLASS && sym->as\n@@ -9031,7 +9033,7 @@ resolve_assoc_var (gfc_symbol* sym, bool resolve_target)\n     {\n       /* target's rank is 0, but the type of the sym is still array valued,\n \t which has to be corrected.  */\n-      if (sym->ts.type == BT_CLASS\n+      if (sym->ts.type == BT_CLASS && sym->ts.u.derived\n \t  && CLASS_DATA (sym) && CLASS_DATA (sym)->as)\n \t{\n \t  gfc_array_spec *as;\n@@ -12618,7 +12620,8 @@ resolve_fl_var_and_proc (gfc_symbol *sym, int mp_flag)\n {\n   gfc_array_spec *as;\n \n-  if (sym->ts.type == BT_CLASS && sym->attr.class_ok)\n+  if (sym->ts.type == BT_CLASS && sym->attr.class_ok\n+      && sym->ts.u.derived && CLASS_DATA (sym))\n     as = CLASS_DATA (sym)->as;\n   else\n     as = sym->as;\n@@ -12628,7 +12631,8 @@ resolve_fl_var_and_proc (gfc_symbol *sym, int mp_flag)\n     {\n       bool pointer, allocatable, dimension;\n \n-      if (sym->ts.type == BT_CLASS && sym->attr.class_ok)\n+      if (sym->ts.type == BT_CLASS && sym->attr.class_ok\n+\t  && sym->ts.u.derived && CLASS_DATA (sym))\n \t{\n \t  pointer = CLASS_DATA (sym)->attr.class_pointer;\n \t  allocatable = CLASS_DATA (sym)->attr.allocatable;\n@@ -12679,6 +12683,7 @@ resolve_fl_var_and_proc (gfc_symbol *sym, int mp_flag)\n     {\n       /* F03:C502.  */\n       if (sym->attr.class_ok\n+\t  && sym->ts.u.derived\n \t  && !sym->attr.select_type_temporary\n \t  && !UNLIMITED_POLY (sym)\n \t  && !gfc_type_is_extensible (CLASS_DATA (sym)->ts.u.derived))\n@@ -12717,7 +12722,8 @@ resolve_fl_variable_derived (gfc_symbol *sym, int no_init_flag)\n      associated by the presence of another class I symbol in the same\n      namespace.  14.6.1.3 of the standard and the discussion on\n      comp.lang.fortran.  */\n-  if (sym->ns != sym->ts.u.derived->ns\n+  if (sym->ts.u.derived\n+      && sym->ns != sym->ts.u.derived->ns\n       && !sym->ts.u.derived->attr.use_assoc\n       && sym->ns->proc_name->attr.if_source != IFSRC_IFBODY)\n     {\n@@ -15348,7 +15354,7 @@ resolve_symbol (gfc_symbol *sym)\n       specification_expr = saved_specification_expr;\n     }\n \n-  if (sym->ts.type == BT_CLASS && sym->attr.class_ok)\n+  if (sym->ts.type == BT_CLASS && sym->attr.class_ok && sym->ts.u.derived)\n     {\n       as = CLASS_DATA (sym)->as;\n       class_attr = CLASS_DATA (sym)->attr;\n@@ -15749,6 +15755,7 @@ resolve_symbol (gfc_symbol *sym)\n   /* F2008, C525.  */\n   if ((((sym->ts.type == BT_DERIVED && sym->ts.u.derived->attr.coarray_comp)\n \t || (sym->ts.type == BT_CLASS && sym->attr.class_ok\n+\t     && sym->ts.u.derived && CLASS_DATA (sym)\n \t     && CLASS_DATA (sym)->attr.coarray_comp))\n        || class_attr.codimension)\n       && (sym->attr.result || sym->result == sym))\n@@ -15770,6 +15777,7 @@ resolve_symbol (gfc_symbol *sym)\n   /* F2008, C525.  */\n   if (((sym->ts.type == BT_DERIVED && sym->ts.u.derived->attr.coarray_comp)\n \t|| (sym->ts.type == BT_CLASS && sym->attr.class_ok\n+\t    && sym->ts.u.derived && CLASS_DATA (sym)\n \t    && CLASS_DATA (sym)->attr.coarray_comp))\n       && (class_attr.codimension || class_attr.pointer || class_attr.dimension\n \t  || class_attr.allocatable))\n@@ -15813,6 +15821,7 @@ resolve_symbol (gfc_symbol *sym)\n   /* F2008, C541.  */\n   if ((((sym->ts.type == BT_DERIVED && sym->ts.u.derived->attr.coarray_comp)\n \t|| (sym->ts.type == BT_CLASS && sym->attr.class_ok\n+\t    && sym->ts.u.derived && CLASS_DATA (sym)\n \t    && CLASS_DATA (sym)->attr.coarray_comp))\n        || (class_attr.codimension && class_attr.allocatable))\n       && sym->attr.dummy && sym->attr.intent == INTENT_OUT)"}, {"sha": "d1fe9c76bd0bbac4433798a2f02a8fa7420da2b2", "filename": "gcc/testsuite/gfortran.dg/pr95980_2.f90", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70c884a4b82733027ac0e2620d09169b177080d7/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr95980_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70c884a4b82733027ac0e2620d09169b177080d7/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr95980_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr95980_2.f90?ref=70c884a4b82733027ac0e2620d09169b177080d7", "patch": "@@ -0,0 +1,11 @@\n+! { dg-do compile }\n+! PR fortran/95980 - ICE in get_unique_type_string, at fortran/class.c:485\n+\n+program p\n+  type t\n+     integer :: a\n+  end type t\n+  class(t) :: x         ! { dg-error \"must be dummy, allocatable or pointer\" }\n+  select type (y => x)\n+  end select\n+end"}]}