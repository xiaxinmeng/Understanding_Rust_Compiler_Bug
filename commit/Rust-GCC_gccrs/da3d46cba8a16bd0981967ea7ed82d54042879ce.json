{"sha": "da3d46cba8a16bd0981967ea7ed82d54042879ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGEzZDQ2Y2JhOGExNmJkMDk4MTk2N2VhN2VkODJkNTQwNDI4NzljZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-03-02T19:16:14Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-03-02T19:16:14Z"}, "message": "re PR libgomp/69555 (libgomp.c++/target-6.C fails because of undefined behaviour)\n\n\tPR libgomp/69555\n\t* gimplify.c (gimplify_decl_expr): For decls with REFERENCE_TYPE, also\n\tgimplify_type_sizes the type they refer to.\n\t(omp_notice_variable): Handle reference vars to VLAs.\n\t* omp-low.c (lower_omp_target): Emit setup of OMP_CLAUSE_PRIVATE reference\n\tto VLA decls in the second pass instead of first pass.\n\n\t* testsuite/libgomp.c++/pr69555-1.C: New test.\n\t* testsuite/libgomp.c++/pr69555-2.C: New test.\n\nFrom-SVN: r233913", "tree": {"sha": "f57aa687d2dd5488df0e71d98672b1e7b3265350", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f57aa687d2dd5488df0e71d98672b1e7b3265350"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da3d46cba8a16bd0981967ea7ed82d54042879ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da3d46cba8a16bd0981967ea7ed82d54042879ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da3d46cba8a16bd0981967ea7ed82d54042879ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da3d46cba8a16bd0981967ea7ed82d54042879ce/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "268bc320088146b2eb3533ec6088e0b566e310de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/268bc320088146b2eb3533ec6088e0b566e310de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/268bc320088146b2eb3533ec6088e0b566e310de"}], "stats": {"total": 265, "additions": 245, "deletions": 20}, "files": [{"sha": "67cee6b5a0c48dd0d86f2e3d9666717beb09d217", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da3d46cba8a16bd0981967ea7ed82d54042879ce/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da3d46cba8a16bd0981967ea7ed82d54042879ce/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=da3d46cba8a16bd0981967ea7ed82d54042879ce", "patch": "@@ -1,3 +1,12 @@\n+2016-03-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libgomp/69555\n+\t* gimplify.c (gimplify_decl_expr): For decls with REFERENCE_TYPE, also\n+\tgimplify_type_sizes the type they refer to.\n+\t(omp_notice_variable): Handle reference vars to VLAs.\n+\t* omp-low.c (lower_omp_target): Emit setup of OMP_CLAUSE_PRIVATE reference\n+\tto VLA decls in the second pass instead of first pass.\n+\n 2016-03-02  Tom de Vries  <tom@codesourcery.com>\n \n \tPR tree-optimization/68659"}, {"sha": "b331e410a3c152a699a4a61d19feb6f97ba925c1", "filename": "gcc/gimplify.c", "status": "modified", "additions": 34, "deletions": 12, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da3d46cba8a16bd0981967ea7ed82d54042879ce/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da3d46cba8a16bd0981967ea7ed82d54042879ce/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=da3d46cba8a16bd0981967ea7ed82d54042879ce", "patch": "@@ -1436,14 +1436,22 @@ gimplify_decl_expr (tree *stmt_p, gimple_seq *seq_p)\n   if ((TREE_CODE (decl) == TYPE_DECL\n        || TREE_CODE (decl) == VAR_DECL)\n       && !TYPE_SIZES_GIMPLIFIED (TREE_TYPE (decl)))\n-    gimplify_type_sizes (TREE_TYPE (decl), seq_p);\n+    {\n+      gimplify_type_sizes (TREE_TYPE (decl), seq_p);\n+      if (TREE_CODE (TREE_TYPE (decl)) == REFERENCE_TYPE)\n+\tgimplify_type_sizes (TREE_TYPE (TREE_TYPE (decl)), seq_p);\n+    }\n \n   /* ??? DECL_ORIGINAL_TYPE is streamed for LTO so it needs to be gimplified\n      in case its size expressions contain problematic nodes like CALL_EXPR.  */\n   if (TREE_CODE (decl) == TYPE_DECL\n       && DECL_ORIGINAL_TYPE (decl)\n       && !TYPE_SIZES_GIMPLIFIED (DECL_ORIGINAL_TYPE (decl)))\n-    gimplify_type_sizes (DECL_ORIGINAL_TYPE (decl), seq_p);\n+    {\n+      gimplify_type_sizes (DECL_ORIGINAL_TYPE (decl), seq_p);\n+      if (TREE_CODE (DECL_ORIGINAL_TYPE (decl)) == REFERENCE_TYPE)\n+\tgimplify_type_sizes (TREE_TYPE (DECL_ORIGINAL_TYPE (decl)), seq_p);\n+    }\n \n   if (TREE_CODE (decl) == VAR_DECL && !DECL_EXTERNAL (decl))\n     {\n@@ -6264,16 +6272,30 @@ omp_notice_variable (struct gimplify_omp_ctx *ctx, tree decl, bool in_code)\n \n   if ((n->value & (GOVD_SEEN | GOVD_LOCAL)) == 0\n       && (flags & (GOVD_SEEN | GOVD_LOCAL)) == GOVD_SEEN\n-      && DECL_SIZE (decl)\n-      && TREE_CODE (DECL_SIZE (decl)) != INTEGER_CST)\n-    {\n-      splay_tree_node n2;\n-      tree t = DECL_VALUE_EXPR (decl);\n-      gcc_assert (TREE_CODE (t) == INDIRECT_REF);\n-      t = TREE_OPERAND (t, 0);\n-      gcc_assert (DECL_P (t));\n-      n2 = splay_tree_lookup (ctx->variables, (splay_tree_key) t);\n-      n2->value |= GOVD_SEEN;\n+      && DECL_SIZE (decl))\n+    {\n+      if (TREE_CODE (DECL_SIZE (decl)) != INTEGER_CST)\n+\t{\n+\t  splay_tree_node n2;\n+\t  tree t = DECL_VALUE_EXPR (decl);\n+\t  gcc_assert (TREE_CODE (t) == INDIRECT_REF);\n+\t  t = TREE_OPERAND (t, 0);\n+\t  gcc_assert (DECL_P (t));\n+\t  n2 = splay_tree_lookup (ctx->variables, (splay_tree_key) t);\n+\t  n2->value |= GOVD_SEEN;\n+\t}\n+      else if (lang_hooks.decls.omp_privatize_by_reference (decl)\n+\t       && TYPE_SIZE_UNIT (TREE_TYPE (TREE_TYPE (decl)))\n+\t       && (TREE_CODE (TYPE_SIZE_UNIT (TREE_TYPE (TREE_TYPE (decl))))\n+\t\t   != INTEGER_CST))\n+\t{\n+\t  splay_tree_node n2;\n+\t  tree t = TYPE_SIZE_UNIT (TREE_TYPE (TREE_TYPE (decl)));\n+\t  gcc_assert (DECL_P (t));\n+\t  n2 = splay_tree_lookup (ctx->variables, (splay_tree_key) t);\n+\t  if (n2)\n+\t    n2->value |= GOVD_SEEN;\n+\t}\n     }\n \n   shared = ((flags | n->value) & GOVD_SHARED) != 0;"}, {"sha": "ecbf74ad71bf7201c0e4a5fe4aabea8d1cf895d1", "filename": "gcc/omp-low.c", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da3d46cba8a16bd0981967ea7ed82d54042879ce/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da3d46cba8a16bd0981967ea7ed82d54042879ce/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=da3d46cba8a16bd0981967ea7ed82d54042879ce", "patch": "@@ -16472,13 +16472,7 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t\t    x = build_fold_addr_expr_loc (clause_loc, x);\n \t\t  }\n \t\telse\n-\t\t  {\n-\t\t    tree atmp\n-\t\t      = builtin_decl_explicit (BUILT_IN_ALLOCA_WITH_ALIGN);\n-\t\t    tree rtype = TREE_TYPE (TREE_TYPE (new_var));\n-\t\t    tree al = size_int (TYPE_ALIGN (rtype));\n-\t\t    x = build_call_expr_loc (clause_loc, atmp, 2, x, al);\n-\t\t  }\n+\t\t  break;\n \n \t\tx = fold_convert_loc (clause_loc, TREE_TYPE (new_var), x);\n \t\tgimplify_expr (&x, &new_body, NULL, is_gimple_val, fb_rvalue);\n@@ -16545,7 +16539,8 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t  }\n       /* Handle GOMP_MAP_FIRSTPRIVATE_{POINTER,REFERENCE} in second pass,\n \t so that firstprivate vars holding OMP_CLAUSE_SIZE if needed\n-\t are already handled.  */\n+\t are already handled.  Similarly OMP_CLAUSE_PRIVATE for VLAs\n+\t or references to VLAs.  */\n       for (c = clauses; c; c = OMP_CLAUSE_CHAIN (c))\n \tswitch (OMP_CLAUSE_CODE (c))\n \t  {\n@@ -16687,6 +16682,27 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t\tgimple_seq_add_stmt (&new_body,\n \t\t\t\t     gimple_build_assign (new_pvar, x));\n \t      }\n+\t    else if (is_reference (var) && !is_gimple_omp_oacc (ctx->stmt))\n+\t      {\n+\t\tlocation_t clause_loc = OMP_CLAUSE_LOCATION (c);\n+\t\ttree new_var = lookup_decl (var, ctx);\n+\t\ttree x = TYPE_SIZE_UNIT (TREE_TYPE (TREE_TYPE (new_var)));\n+\t\tif (TREE_CONSTANT (x))\n+\t\t  break;\n+\t\telse\n+\t\t  {\n+\t\t    tree atmp\n+\t\t      = builtin_decl_explicit (BUILT_IN_ALLOCA_WITH_ALIGN);\n+\t\t    tree rtype = TREE_TYPE (TREE_TYPE (new_var));\n+\t\t    tree al = size_int (TYPE_ALIGN (rtype));\n+\t\t    x = build_call_expr_loc (clause_loc, atmp, 2, x, al);\n+\t\t  }\n+\n+\t\tx = fold_convert_loc (clause_loc, TREE_TYPE (new_var), x);\n+\t\tgimplify_expr (&x, &new_body, NULL, is_gimple_val, fb_rvalue);\n+\t\tgimple_seq_add_stmt (&new_body,\n+\t\t\t\t     gimple_build_assign (new_var, x));\n+\t      }\n \t    break;\n \t  }\n "}, {"sha": "90f245dd3190031f07e9efd89742964bf0aff299", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da3d46cba8a16bd0981967ea7ed82d54042879ce/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da3d46cba8a16bd0981967ea7ed82d54042879ce/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=da3d46cba8a16bd0981967ea7ed82d54042879ce", "patch": "@@ -1,3 +1,9 @@\n+2016-03-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libgomp/69555\n+\t* testsuite/libgomp.c++/pr69555-1.C: New test.\n+\t* testsuite/libgomp.c++/pr69555-2.C: New test.\n+\n 2016-02-26  Keith McDaniel <k.allen.mcdaniel@gmail.com>\n \t    Martin Jambor  <mjambor@suse.cz>\n "}, {"sha": "c6885ff73213de77a3b2ca9e53c3e5ae8237e2d6", "filename": "libgomp/testsuite/libgomp.c++/pr69555-1.C", "status": "added", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da3d46cba8a16bd0981967ea7ed82d54042879ce/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fpr69555-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da3d46cba8a16bd0981967ea7ed82d54042879ce/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fpr69555-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fpr69555-1.C?ref=da3d46cba8a16bd0981967ea7ed82d54042879ce", "patch": "@@ -0,0 +1,114 @@\n+// PR libgomp/69555\n+// { dg-do run }\n+\n+#include <omp.h>\n+\n+__attribute__((noinline, noclone)) void\n+f1 (int y)\n+{\n+  int a[y - 2];\n+  int (&c)[y - 2] = a;\n+  c[0] = 111;\n+  int e = 0;\n+\n+  #pragma omp parallel private (c) num_threads (4) reduction (+:e)\n+  {\n+    int v = omp_get_thread_num ();\n+    for (int i = 0; i < y - 2; i++)\n+      c[i] = i + v;\n+    #pragma omp barrier\n+    for (int i = 0; i < y - 2; i++)\n+      if (c[i] != i + v)\n+\te++;\n+  }\n+  if (c[0] != 111 || e)\n+    __builtin_abort ();\n+}\n+\n+__attribute__((noinline, noclone)) void\n+f2 (int y)\n+{\n+  int a[y - 2];\n+  int (&c)[y - 2] = a;\n+  c[0] = 111;\n+\n+  #pragma omp task private (c)\n+  {\n+    int v = omp_get_thread_num ();\n+    for (int i = 0; i < y - 2; i++)\n+      c[i] = i + v;\n+    asm volatile (\"\" : : \"r\" (&c[0]) : \"memory\");\n+    for (int i = 0; i < y - 2; i++)\n+      if (c[i] != i + v)\n+\t__builtin_abort ();\n+  }\n+  if (c[0] != 111)\n+    __builtin_abort ();\n+}\n+\n+__attribute__((noinline, noclone)) void\n+f3 (int y)\n+{\n+  int a[y - 2];\n+  int (&c)[y - 2] = a;\n+  for (int i = 0; i < y - 2; i++)\n+    c[i] = i + 4;\n+\n+  #pragma omp parallel firstprivate (c) num_threads (4)\n+  {\n+    int v = omp_get_thread_num ();\n+    for (int i = 0; i < y - 2; i++)\n+      {\n+\tif (c[i] != i + 4)\n+\t  __builtin_abort ();\n+\tc[i] = i + v;\n+      }\n+    #pragma omp barrier\n+    for (int i = 0; i < y - 2; i++)\n+      if (c[i] != i + v)\n+\t__builtin_abort ();\n+  }\n+  for (int i = 0; i < y - 2; i++)\n+    if (c[i] != i + 4)\n+      __builtin_abort ();\n+}\n+\n+__attribute__((noinline, noclone)) void\n+f4 (int y)\n+{\n+  int a[y - 2];\n+  int (&c)[y - 2] = a;\n+  for (int i = 0; i < y - 2; i++)\n+    c[i] = i + 4;\n+\n+  #pragma omp task firstprivate (c)\n+  {\n+    int v = omp_get_thread_num ();\n+    for (int i = 0; i < y - 2; i++)\n+      {\n+\tif (c[i] != i + 4)\n+\t  __builtin_abort ();\n+\tc[i] = i + v;\n+      }\n+    asm volatile (\"\" : : \"r\" (&c[0]) : \"memory\");\n+    for (int i = 0; i < y - 2; i++)\n+      if (c[i] != i + v)\n+\t__builtin_abort ();\n+  }\n+  for (int i = 0; i < y - 2; i++)\n+    if (c[i] != i + 4)\n+      __builtin_abort ();\n+}\n+\n+int\n+main ()\n+{\n+  f1 (6);\n+  f3 (6);\n+  #pragma omp parallel num_threads (4)\n+  {\n+    f2 (6);\n+    f4 (6);\n+  }\n+  return 0;\n+}"}, {"sha": "78776ea7c9e1fed804183f9e4217678ff447386d", "filename": "libgomp/testsuite/libgomp.c++/pr69555-2.C", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da3d46cba8a16bd0981967ea7ed82d54042879ce/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fpr69555-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da3d46cba8a16bd0981967ea7ed82d54042879ce/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fpr69555-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fpr69555-2.C?ref=da3d46cba8a16bd0981967ea7ed82d54042879ce", "patch": "@@ -0,0 +1,58 @@\n+// PR libgomp/69555\n+// { dg-do run }\n+\n+__attribute__((noinline, noclone)) void\n+f1 (int y)\n+{\n+  int a[y - 2];\n+  int (&c)[y - 2] = a;\n+  for (int i = 0; i < y - 2; i++)\n+    c[i] = i + 4;\n+\n+  #pragma omp target firstprivate (c)\n+  {\n+    for (int i = 0; i < y - 2; i++)\n+      {\n+\tif (c[i] != i + 4)\n+\t  __builtin_abort ();\n+\tc[i] = i + 9;\n+      }\n+    asm volatile (\"\" : : \"r\" (&c[0]) : \"memory\");\n+    for (int i = 0; i < y - 2; i++)\n+      if (c[i] != i + 9)\n+\t__builtin_abort ();\n+  }\n+  for (int i = 0; i < y - 2; i++)\n+    if (c[i] != i + 4)\n+      __builtin_abort ();\n+}\n+\n+__attribute__((noinline, noclone)) void\n+f2 (int y)\n+{\n+  int a[y - 2];\n+  int (&c)[y - 2] = a;\n+  for (int i = 0; i < y - 2; i++)\n+    c[i] = i + 4;\n+\n+  #pragma omp target private (c)\n+  {\n+    for (int i = 0; i < y - 2; i++)\n+      c[i] = i + 9;\n+    asm volatile (\"\" : : \"r\" (&c[0]) : \"memory\");\n+    for (int i = 0; i < y - 2; i++)\n+      if (c[i] != i + 9)\n+\t__builtin_abort ();\n+  }\n+  for (int i = 0; i < y - 2; i++)\n+    if (c[i] != i + 4)\n+      __builtin_abort ();\n+}\n+\n+int\n+main ()\n+{\n+  f1 (6);\n+  f2 (6);\n+  return 0;\n+}"}]}