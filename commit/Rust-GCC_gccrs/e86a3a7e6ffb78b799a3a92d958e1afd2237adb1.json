{"sha": "e86a3a7e6ffb78b799a3a92d958e1afd2237adb1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTg2YTNhN2U2ZmZiNzhiNzk5YTNhOTJkOTU4ZTFhZmQyMjM3YWRiMQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-22T12:42:24Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-22T12:42:24Z"}, "message": "[multiple changes]\n\n2010-06-22  Robert Dewar  <dewar@adacore.com>\n\n\t* errout.adb (Unwind_Internal_Type): Improve handling of First_Subtype\n\ttest to catch more cases where first subtype is the results we want.\n\t* sem_res.adb (Make_Call_Into_Operator): Don't go to First_Subtype in\n\terror case, since Errout will now handle this correctly.\n\t* gcc-interface/Make-lang.in: Add Sem_Aux to list of GNATBIND objects.\n\tUpdate dependencies.\n\n2010-06-22  Arnaud Charlet  <charlet@adacore.com>\n\n\t* exp_ch4.adb (Expand_Allocator_Expression): Set Related_Node properly\n\twhen calling Make_Temporary.\n\n2010-06-22  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch3.adb (Access_Subprogram_Declaration): An anonymous access to\n\tsubprogram can be associated with an entry body.\n\n2010-06-22  Robert Dewar  <dewar@adacore.com>\n\n\t* scos.ads: Add note on membership test handling.\n\n2010-06-22  Vincent Celier  <celier@adacore.com>\n\n\t* projects.texi: Minor spelling fixes.\n\tMinor reformatting.\n\n2010-06-22  Paul Hilfinger  <hilfinger@adacore.com>\n\n\t* s-rannum.adb: Correct off-by-one error in Extract_Value.\n\nFrom-SVN: r161171", "tree": {"sha": "50900b84fb5e659aac25cd84920e07cfcab97f6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50900b84fb5e659aac25cd84920e07cfcab97f6d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e86a3a7e6ffb78b799a3a92d958e1afd2237adb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e86a3a7e6ffb78b799a3a92d958e1afd2237adb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e86a3a7e6ffb78b799a3a92d958e1afd2237adb1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e86a3a7e6ffb78b799a3a92d958e1afd2237adb1/comments", "author": null, "committer": null, "parents": [{"sha": "b086849e7c7d11523c5f99695e6f7e949019c263", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b086849e7c7d11523c5f99695e6f7e949019c263", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b086849e7c7d11523c5f99695e6f7e949019c263"}], "stats": {"total": 378, "additions": 207, "deletions": 171}, "files": [{"sha": "6ebb330bcb9c70749b5fa47b068ffff3b6a95994", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e86a3a7e6ffb78b799a3a92d958e1afd2237adb1/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e86a3a7e6ffb78b799a3a92d958e1afd2237adb1/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e86a3a7e6ffb78b799a3a92d958e1afd2237adb1", "patch": "@@ -1,3 +1,35 @@\n+2010-06-22  Robert Dewar  <dewar@adacore.com>\n+\n+\t* errout.adb (Unwind_Internal_Type): Improve handling of First_Subtype\n+\ttest to catch more cases where first subtype is the results we want.\n+\t* sem_res.adb (Make_Call_Into_Operator): Don't go to First_Subtype in\n+\terror case, since Errout will now handle this correctly.\n+\t* gcc-interface/Make-lang.in: Add Sem_Aux to list of GNATBIND objects.\n+\tUpdate dependencies.\n+\n+2010-06-22  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_Allocator_Expression): Set Related_Node properly\n+\twhen calling Make_Temporary.\n+\n+2010-06-22  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb (Access_Subprogram_Declaration): An anonymous access to\n+\tsubprogram can be associated with an entry body.\n+\n+2010-06-22  Robert Dewar  <dewar@adacore.com>\n+\n+\t* scos.ads: Add note on membership test handling.\n+\n+2010-06-22  Vincent Celier  <celier@adacore.com>\n+\n+\t* projects.texi: Minor spelling fixes.\n+\tMinor reformatting.\n+\n+2010-06-22  Paul Hilfinger  <hilfinger@adacore.com>\n+\n+\t* s-rannum.adb: Correct off-by-one error in Extract_Value.\n+\n 2010-06-22  Vincent Celier  <celier@adacore.com>\n \n \t* mlib-prj.adb (Display): In non verbose mode, truncate after fourth"}, {"sha": "bb25564f0844fe645ea6cbdc62ca6b742dbe7014", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 32, "deletions": 28, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e86a3a7e6ffb78b799a3a92d958e1afd2237adb1/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e86a3a7e6ffb78b799a3a92d958e1afd2237adb1/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=e86a3a7e6ffb78b799a3a92d958e1afd2237adb1", "patch": "@@ -43,6 +43,7 @@ with Opt;      use Opt;\n with Nlists;   use Nlists;\n with Output;   use Output;\n with Scans;    use Scans;\n+with Sem_Aux;  use Sem_Aux;\n with Sinput;   use Sinput;\n with Sinfo;    use Sinfo;\n with Snames;   use Snames;\n@@ -2824,7 +2825,7 @@ package body Errout is\n       --  \"type derived from\" message more than once in the case where we climb\n       --  up multiple levels.\n \n-      loop\n+      Find : loop\n          Old_Ent := Ent;\n \n          --  Implicit access type, use directly designated type In Ada 2005,\n@@ -2872,7 +2873,7 @@ package body Errout is\n                   Set_Msg_Str (\"access to procedure \");\n                end if;\n \n-               exit;\n+               exit Find;\n \n             --  Type is access to object, named or anonymous\n \n@@ -2910,51 +2911,54 @@ package body Errout is\n          --  itself an internal name. This avoids the obvious loop (subtype ->\n          --  basetype -> subtype) which would otherwise occur!)\n \n-         elsif Present (Freeze_Node (Ent))\n-           and then Present (First_Subtype_Link (Freeze_Node (Ent)))\n-           and then\n-             not Is_Internal_Name\n-                   (Chars (First_Subtype_Link (Freeze_Node (Ent))))\n-         then\n-            Ent := First_Subtype_Link (Freeze_Node (Ent));\n+         else\n+            declare\n+               FST : constant Entity_Id := First_Subtype (Ent);\n \n-         --  Otherwise use root type\n+            begin\n+               if not Is_Internal_Name (Chars (FST)) then\n+                  Ent := FST;\n+                  exit Find;\n \n-         else\n-            if not Derived then\n-               Buffer_Remove (\"type \");\n+                  --  Otherwise use root type\n \n-               --  Test for \"subtype of type derived from\" which seems\n-               --  excessive and is replaced by simply \"type derived from\"\n+               else\n+                  if not Derived then\n+                     Buffer_Remove (\"type \");\n \n-               Buffer_Remove (\"subtype of\");\n+                     --  Test for \"subtype of type derived from\" which seems\n+                     --  excessive and is replaced by \"type derived from\".\n \n-               --  Avoid duplication \"type derived from type derived from\"\n+                     Buffer_Remove (\"subtype of\");\n \n-               if not Buffer_Ends_With (\"type derived from \") then\n-                  Set_Msg_Str (\"type derived from \");\n-               end if;\n+                     --  Avoid duplicated \"type derived from type derived from\"\n \n-               Derived := True;\n-            end if;\n+                     if not Buffer_Ends_With (\"type derived from \") then\n+                        Set_Msg_Str (\"type derived from \");\n+                     end if;\n+\n+                     Derived := True;\n+                  end if;\n+               end if;\n+            end;\n \n             Ent := Etype (Ent);\n          end if;\n \n          --  If we are stuck in a loop, get out and settle for the internal\n-         --  name after all. In this case we set to kill the message if it\n-         --  is not the first error message (we really try hard not to show\n-         --  the dirty laundry of the implementation to the poor user!)\n+         --  name after all. In this case we set to kill the message if it is\n+         --  not the first error message (we really try hard not to show the\n+         --  dirty laundry of the implementation to the poor user!)\n \n          if Ent = Old_Ent then\n             Kill_Message := True;\n-            exit;\n+            exit Find;\n          end if;\n \n          --  Get out if we finally found a non-internal name to use\n \n-         exit when not Is_Internal_Name (Chars (Ent));\n-      end loop;\n+         exit Find when not Is_Internal_Name (Chars (Ent));\n+      end loop Find;\n \n       if Mchar = '\"' then\n          Set_Msg_Char ('\"');"}, {"sha": "7d8822c6e4571e2cde24e940921e9d45eaa99b25", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e86a3a7e6ffb78b799a3a92d958e1afd2237adb1/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e86a3a7e6ffb78b799a3a92d958e1afd2237adb1/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=e86a3a7e6ffb78b799a3a92d958e1afd2237adb1", "patch": "@@ -590,7 +590,7 @@ package body Exp_Ch4 is\n \n             Set_Analyzed (Node);\n \n-            Temp := Make_Temporary (Loc, 'P', Node);\n+            Temp := Make_Temporary (Loc, 'P', N);\n \n             Insert_Action (N,\n               Make_Object_Declaration (Loc,\n@@ -659,7 +659,7 @@ package body Exp_Ch4 is\n             Remove_Side_Effects (Exp);\n          end if;\n \n-         Temp := Make_Temporary (Loc, 'P');\n+         Temp := Make_Temporary (Loc, 'P', N);\n \n          --  For a class wide allocation generate the following code:\n \n@@ -979,7 +979,7 @@ package body Exp_Ch4 is\n          end if;\n \n       elsif Aggr_In_Place then\n-         Temp := Make_Temporary (Loc, 'P');\n+         Temp := Make_Temporary (Loc, 'P', N);\n          Tmp_Node :=\n            Make_Object_Declaration (Loc,\n              Defining_Identifier => Temp,"}, {"sha": "4888cd03ad12f1c476089a80a8a71bb724301fec", "filename": "gcc/ada/gcc-interface/Make-lang.in", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e86a3a7e6ffb78b799a3a92d958e1afd2237adb1/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e86a3a7e6ffb78b799a3a92d958e1afd2237adb1/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMake-lang.in?ref=e86a3a7e6ffb78b799a3a92d958e1afd2237adb1", "patch": "@@ -443,6 +443,7 @@ GNATBIND_OBJS = \\\n  ada/scng.o       \\\n  ada/scans.o      \\\n  ada/sdefault.o   \\\n+ ada/sem_aux.o    \\\n  ada/sinfo.o      \\\n  ada/sinput.o     \\\n  ada/sinput-c.o   \\\n@@ -1600,16 +1601,16 @@ ada/errout.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n    ada/fname.ads ada/gnat.ads ada/g-hesorg.ads ada/g-htable.ads \\\n    ada/gnatvsn.ads ada/hostparm.ads ada/lib.ads ada/lib.adb \\\n    ada/lib-list.adb ada/lib-sort.adb ada/namet.ads ada/nlists.ads \\\n-   ada/nlists.adb ada/opt.ads ada/output.ads ada/scans.ads ada/sinfo.ads \\\n-   ada/sinfo.adb ada/sinput.ads ada/sinput.adb ada/snames.ads \\\n-   ada/stand.ads ada/stringt.ads ada/stylesw.ads ada/system.ads \\\n-   ada/s-exctab.ads ada/s-htable.ads ada/s-imenne.ads ada/s-memory.ads \\\n-   ada/s-os_lib.ads ada/s-parame.ads ada/s-secsta.ads ada/s-soflin.ads \\\n-   ada/s-stache.ads ada/s-stalib.ads ada/s-stoele.ads ada/s-stoele.adb \\\n-   ada/s-string.ads ada/s-traent.ads ada/s-unstyp.ads ada/s-wchcon.ads \\\n-   ada/table.ads ada/table.adb ada/tree_io.ads ada/types.ads ada/uintp.ads \\\n-   ada/uintp.adb ada/uname.ads ada/unchconv.ads ada/unchdeal.ads \\\n-   ada/urealp.ads ada/widechar.ads \n+   ada/nlists.adb ada/opt.ads ada/output.ads ada/scans.ads ada/sem_aux.ads \\\n+   ada/sinfo.ads ada/sinfo.adb ada/sinput.ads ada/sinput.adb \\\n+   ada/snames.ads ada/stand.ads ada/stringt.ads ada/stylesw.ads \\\n+   ada/system.ads ada/s-exctab.ads ada/s-htable.ads ada/s-imenne.ads \\\n+   ada/s-memory.ads ada/s-os_lib.ads ada/s-parame.ads ada/s-secsta.ads \\\n+   ada/s-soflin.ads ada/s-stache.ads ada/s-stalib.ads ada/s-stoele.ads \\\n+   ada/s-stoele.adb ada/s-string.ads ada/s-traent.ads ada/s-unstyp.ads \\\n+   ada/s-wchcon.ads ada/table.ads ada/table.adb ada/tree_io.ads \\\n+   ada/types.ads ada/uintp.ads ada/uintp.adb ada/uname.ads \\\n+   ada/unchconv.ads ada/unchdeal.ads ada/urealp.ads ada/widechar.ads \n \n ada/erroutc.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n    ada/a-uncdea.ads ada/alloc.ads ada/atree.ads ada/atree.adb \\\n@@ -2570,10 +2571,10 @@ ada/gnatvsn.o : ada/ada.ads ada/a-unccon.ads ada/gnatvsn.ads \\\n    ada/gnatvsn.adb ada/system.ads ada/s-secsta.ads ada/s-stoele.ads \\\n    ada/s-stoele.adb \n \n-ada/hlo.o : ada/ada.ads ada/a-unccon.ads ada/hlo.ads ada/hlo.adb \\\n-   ada/hostparm.ads ada/output.ads ada/system.ads ada/s-exctab.ads \\\n-   ada/s-stalib.ads ada/s-unstyp.ads ada/types.ads ada/unchconv.ads \\\n-   ada/unchdeal.ads \n+ada/hlo.o : ada/ada.ads ada/a-unccon.ads ada/a-uncdea.ads ada/hlo.ads \\\n+   ada/hlo.adb ada/hostparm.ads ada/output.ads ada/system.ads \\\n+   ada/s-exctab.ads ada/s-os_lib.ads ada/s-stalib.ads ada/s-string.ads \\\n+   ada/s-unstyp.ads ada/types.ads ada/unchconv.ads ada/unchdeal.ads \n \n ada/hostparm.o : ada/ada.ads ada/a-unccon.ads ada/hostparm.ads \\\n    ada/system.ads ada/s-exctab.ads ada/s-stalib.ads ada/s-unstyp.ads \\"}, {"sha": "98b972271e83bb7748b5cad9a6214a345894762e", "filename": "gcc/ada/projects.texi", "status": "modified", "additions": 112, "deletions": 116, "changes": 228, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e86a3a7e6ffb78b799a3a92d958e1afd2237adb1/gcc%2Fada%2Fprojects.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e86a3a7e6ffb78b799a3a92d958e1afd2237adb1/gcc%2Fada%2Fprojects.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprojects.texi?ref=e86a3a7e6ffb78b799a3a92d958e1afd2237adb1", "patch": "@@ -144,8 +144,9 @@ detailed later in this documentation. They are summarized here as a reference.\n \n @item @b{Project variables}:\n   In addition to attributes, a project can use variables to store intermediate\n-  values and avoid duplication in complex expressions.   It can be initialized with a value coming from the environment\n-  Z frequent use of variables is to define scenarios.\n+  values and avoid duplication in complex expressions. It can be initialized\n+  with a value coming from the environment.\n+  A frequent use of variables is to define scenarios.\n   @xref{External Values}, @xref{Scenarios in Projects}, and @xref{Variables}.\n \n @item @b{Source files} and @b{source directories}:\n@@ -199,8 +200,8 @@ the directory @file{obj/}.\n @end smallexample\n \n @noindent\n-Our project is to be called @emph{Build}. By convention, the name of the\n-file is the name of the project (lower-cased) with the\n+Our project is to be called @emph{Build}. The name of the\n+file is the name of the project (case-insensitive) with the\n @file{.gpr} extension, therefore the project file name is @file{build.gpr}. This\n is not mandatory, but a warning is issued when this convention is not followed.\n \n@@ -245,9 +246,9 @@ There are several ways of defining source directories:\n \n @itemize @bullet\n @item When the attribute @b{Source_Dirs} is not used, a project contains a\n-  single source directory which is the one where the project file itself resides.\n-  In our example, if  @file{build.gpr} is placed in the @file{common} directory,\n-  the project has the needed implicit source directory.\n+  single source directory which is the one where the project file itself\n+  resides. In our example, if @file{build.gpr} is placed in the @file{common}\n+  directory, the project has the needed implicit source directory.\n \n @item The attribute @b{Source_Dirs} can be set to a list of path names, one\n   for each of the source directories. Such paths can either be absolute\n@@ -257,25 +258,25 @@ There are several ways of defining source directories:\n   Each of the source directories must exist and be readable.\n \n   @cindex portability\n-  The syntax for directories is platform specific. For portability, however, the\n-  project manager will always properly translate UNIX-like path names to the\n-  native format of specific platform. For instance, when the same project file\n-  is to be used both on Unix and Windows, \"/\" should be used as the directory\n-  separator rather than \"\\\".\n-\n-@item The attribute @b{Source_Dirs} can automatically include subdirectories using\n-  a special syntax inspired by some UNIX shells. If any of the path in the\n-  list ends with @emph{\"/**\"}, then that path and all its subdirectories\n-  (recursively) are included in the list of source directories. For\n-  instance, @file{./**} represent the complete directory tree rooted at \".\".\n+  The syntax for directories is platform specific. For portability, however,\n+  the project manager will always properly translate UNIX-like path names to\n+  the native format of specific platform. For instance, when the same project\n+  file is to be used both on Unix and Windows, \"/\" should be used as the\n+  directory separator rather than \"\\\".\n+\n+@item The attribute @b{Source_Dirs} can automatically include subdirectories\n+  using a special syntax inspired by some UNIX shells. If any of the path in\n+  the list ends with @emph{\"/**\"}, then that path and all its subdirectories\n+  (recursively) are included in the list of source directories. For instance,\n+  @file{./**} represent the complete directory tree rooted at \".\".\n   @cindex Source directories, recursive\n \n   @cindex @code{Excluded_Source_Dirs}\n-  When using that construct, it can sometimes be convenient to also use\n-  the attribute @b{Excluded_Source_Dirs}, which is also a list of paths.\n-  Each entry specifies a directory whose immediate content, not including\n-  subdirs, is to be excluded. It is also possible to exclude a complete directory\n-  subtree using the \"**\" notation.\n+  When using that construct, it can sometimes be convenient to also use the\n+  attribute @b{Excluded_Source_Dirs}, which is also a list of paths. Each entry\n+  specifies a directory whose immediate content, not including subdirs, is to\n+  be excluded. It is also possible to exclude a complete directory subtree\n+  using the \"/**\" notation.\n \n @end itemize\n \n@@ -305,24 +306,24 @@ locating the specified source files in the specified source directories.\n   specified languages in all the source directories.\n \n   Since the project manager was initially developed for Ada environments, the\n-  default language is Ada and the above project file is complete: it defines\n-  without ambiguity the sources composing the project: that is to say, all\n-  the sources in subdirectory \"common\" for the default language (Ada) using\n+  default language is usually Ada and the above project file is complete: it\n+  defines without ambiguity the sources composing the project: that is to say,\n+  all the sources in subdirectory \"common\" for the default language (Ada) using\n   the default naming convention.\n \n   @cindex @code{Languages}\n   However, when compiling a multi-language application, or a pure C\n-  application, the project\n-  manager must be told which languages are of interest, which is done by setting\n-  the @b{Languages} attribute to a list of strings, each of which is the\n-  name of a language. Tools like @command{gnatmake} only know about Ada,\n-  while other tools like @command{gprbuild} know about many more\n-  languages such as C, C++, Fortran, assembly  and others can be added dynamically.\n+  application, the project manager must be told which languages are of\n+  interest, which is done by setting the @b{Languages} attribute to a list of\n+  strings, each of which is the name of a language. Tools like\n+  @command{gnatmake} only know about Ada, while other tools like\n+  @command{gprbuild} know about many more languages such as C, C++, Fortran,\n+  assembly and others can be added dynamically.\n \n   @cindex Naming scheme\n   Even when using only Ada, the default naming might not be suitable. Indeed,\n   how does the project manager recognizes an \"Ada file\" from any other\n-  file ? Project files can describe the naming scheme used for source files,\n+  file? Project files can describe the naming scheme used for source files,\n   and override the default (@pxref{Naming Schemes}). The default is the\n   standard GNAT extension (@file{.adb} for bodies and @file{.ads} for\n   specs), which is what is used in our example, explaining why no naming scheme\n@@ -355,8 +356,8 @@ locating the specified source files in the specified source directories.\n   external tools.\n \n   A warning is issued if both attributes @code{Source_Files} and\n-  @code{Source_List_File} are given explicit values. In this case, the attribute\n-  @code{Source_Files} prevails.\n+  @code{Source_List_File} are given explicit values. In this case, the\n+  attribute @code{Source_Files} prevails.\n \n @item @cindex @code{Excluded_Source_Files}\n   @cindex @code{Locally_Removed_Files}\n@@ -366,9 +367,9 @@ locating the specified source files in the specified source directories.\n   This can be done thanks to the attribute @b{Excluded_Source_Files}\n   (or its synonym @b{Locally_Removed_Files}).\n   Its value is the list of file names that should not be taken into account.\n-  This attribute is often used when extending a project, @xref{Project Extension}.\n-  A similar attribute @b{Excluded_Source_List_File} plays the same role\n-  but takes the name of file containing file names similarly to\n+  This attribute is often used when extending a project, @xref{Project\n+  Extension}. A similar attribute @b{Excluded_Source_List_File} plays the same\n+  role but takes the name of file containing file names similarly to\n   @code{Source_List_File}.\n \n @end itemize\n@@ -385,12 +386,15 @@ attached to it unless explicitly declared as mentionend above.\n \n If the order of the source directories is known statically, that is if\n @code{\"/**\"} is not used in the string list @code{Source_Dirs}, then there may\n-be several files with the same source file name sitting in different directories\n-of the project. In this case, only the file in the first directory is considered\n-as a source of the project and the others are hidden. If the order of the source\n-directories is not known statically, it is an error to have several files with\n-the same source file name, since there would be an ambiguity as to which one\n-should be used.\n+be several files with the same source file name sitting in different\n+directories of the project. In this case, only the file in the first directory\n+is considered as a source of the project and the others are hidden. If\n+@code{\"/**\"} is not used in the string list @code{Source_Dirs}, it is an error\n+to have several files with the same source file name in the same directory\n+@code{\"/**\"} subtree, since there would be an ambiguity as to which one should\n+be used. However, two files with the same source file name may in two single\n+directories or directory subtrees. In this case, the one in the first directory\n+or directory subtree is a source of the project.\n \n @c ---------------------------------------------\n @node Object and Exec Directory\n@@ -399,13 +403,13 @@ should be used.\n \n @noindent\n The next step when writing a project is to indicate where the compiler should\n-put the object files. In fact, the compiler and other tools might create several\n-different kind of files (for GNAT, there is the @code{.o} object file and the\n-@code{.ali} file for instance). One of the important concepts in projects is\n-that most tools may consider source directories as read-only and do not attempt\n-to create new or temporary files there. Instead, all  files are created\n-in the object directory. It is of course not true for project-aware IDEs,\n-whose purpose it is to create the source files.\n+put the object files. In fact, the compiler and other tools might create\n+several different kind of files (for GNAT, there is the object file and the ALI\n+file for instance). One of the important concepts in projects is that most\n+tools may consider source directories as read-only and do not attempt to create\n+new or temporary files there. Instead, all files are created in the object\n+directory. It is of course not true for project-aware IDEs, whose purpose it is\n+to create the source files.\n \n @cindex @code{Object_Dir}\n The object directory is specified through the @b{Object_Dir} attribute.\n@@ -416,7 +420,7 @@ some tools have a switch to create the directory if needed (See\n the switch @code{-p} for @command{gnatmake} and @command{gprbuild}).\n \n If the attribute @code{Object_Dir} is not specified, it defaults to\n-the directory that contains the project file.\n+the project directory, that is the directory containing the project file.\n \n For our example, we can specify the object dir in this way:\n \n@@ -428,13 +432,13 @@ For our example, we can specify the object dir in this way:\n @end smallexample\n \n @noindent\n-As mentioned earlier, there is a single object directory per project.\n-As a result, if you have an existing system where the object files are spread\n-in several directories, you can either move all of them into the same directory\n-if you want to build it with a single project file, or\n-study the section on subsystems\n-(@pxref{Organizing Projects into Subsystems}) to see how each separate object\n-directory can be associated with one of the subsystem constituting the application.\n+As mentioned earlier, there is a single object directory per project. As a\n+result, if you have an existing system where the object files are spread in\n+several directories, you can either move all of them into the same directory if\n+you want to build it with a single project file, or study the section on\n+subsystems (@pxref{Organizing Projects into Subsystems}) to see how each\n+separate object directory can be associated with one of the subsystem\n+constituting the application.\n \n When the @command{linker} is called, it usually creates an executable. By\n default, this executable is placed in the object directory of the project. It\n@@ -443,10 +447,10 @@ might be convenient to store it in its own directory.\n @cindex @code{Exec_Dir}\n This can be done through the @code{Exec_Dir} attribute, which, like\n @emph{Object_Dir} contains a single absolute or relative path and must point to\n-an existing and writable directory, unless you ask the tool to create it on your\n-behalf. When not specified, It defaults to the object directory and therefore to\n-the project file's directory if neither @emph{Object_Dir} nor @emph{Exec_Dir}\n-was specified.\n+an existing and writable directory, unless you ask the tool to create it on\n+your behalf. When not specified, It defaults to the object directory and\n+therefore to the project file's directory if neither @emph{Object_Dir} nor\n+@emph{Exec_Dir} was specified.\n \n In the case of the example, let's place the executable in the root\n of the hierarchy, ie the same directory as @file{build.gpr}. Hence\n@@ -510,39 +514,34 @@ automatically builds all the executables corresponding to the files\n listed in the @emph{Main} attribute. It is possible to specify one\n or more executables on the command line to build a subset of them.\n \n-@cindex @code{Main_Language}\n-The attribute @b{Main_Language} contains a string that specifies the\n-language of the main program.\n-@c ??? What is this for, we already have the naming scheme\n-\n @c ---------------------------------------------\n @node Tools Options in Project Files\n @subsection Tools Options in Project Files\n @c ---------------------------------------------\n \n @noindent\n-We now have a project file that fully describes our environment, and can be used\n-to build the application with a simple @command{gnatmake} command as seen in the\n-previous section. In fact, the empty project we showed immediately at the\n-beginning (with no attribute at all) could already fullfill that need if it was\n-put in the @file{common} directory.\n+We now have a project file that fully describes our environment, and can be\n+used to build the application with a simple @command{gnatmake} command as seen\n+in the previous section. In fact, the empty project we showed immediately at\n+the beginning (with no attribute at all) could already fullfill that need if it\n+was put in the @file{common} directory.\n \n Of course, we always want more control. This section will show you how to\n specify the compilation switches that the various tools involved in the\n building of the executable should use.\n \n @cindex command line length\n Since source names and locations are described into the project file, it is not\n-necessary to use switches on the command line for this purpose (switches such as\n--I for gcc). This removes a major source of command line length overflow.\n+necessary to use switches on the command line for this purpose (switches such\n+as -I for gcc). This removes a major source of command line length overflow.\n Clearly, the builders will have to communicate this information one way or\n another to the underlying compilers and tools they call but they usually use\n response files for this and thus should not be subject to command line\n overflows.\n \n-Several tools are participating to the creation of an executable: the\n-compiler produces object files from the source files; the binder (in the Ada\n-case) creates an source file that takes care, among other things, of elaboration\n+Several tools are participating to the creation of an executable: the compiler\n+produces object files from the source files; the binder (in the Ada case)\n+creates an source file that takes care, among other things, of elaboration\n issues and global variables initialization; and the linker gathers everything\n into a single executable that users can execute. All these tools are known by\n the project manager and will be called with user defined switches from the\n@@ -553,13 +552,13 @@ express which switches to be used for any of the tools involved in the build.\n A project file is subdivided into zero or more @b{packages}, each of which\n contains the attributes specific to one tool (or one set of tools). Project\n files use an Ada-like syntax for packages. Package names permitted in project\n-files are restricted to a predefined set (@pxref{Packages}), and the contents of\n-packages are limited to a small set of constructs and attributes\n+files are restricted to a predefined set (@pxref{Packages}), and the contents\n+of packages are limited to a small set of constructs and attributes\n (@pxref{Attributes}).\n \n-Our example project file can be extended with the following empty\n-packages. At this stage, they could all be omitted since they are empty,\n-but they show which packages would be involved in the build process.\n+Our example project file can be extended with the following empty packages. At\n+this stage, they could all be omitted since they are empty, but they show which\n+packages would be involved in the build process.\n \n @smallexample\n    @b{project} Build @b{is}\n@@ -631,8 +630,8 @@ Several attributes can be used to specify the switches:\n   @end smallexample\n \n   @noindent\n-  @code{Switches} can also be given a language name as index instead of a file name\n-  in which case it has the same semantics as @emph{Default_Switches}.\n+  @code{Switches} can also be given a language name as index instead of a file\n+  name in which case it has the same semantics as @emph{Default_Switches}.\n \n @item @b{Local_Configuration_Pragams}:\n   @cindex @code{Local_Configuration_Pragmas}\n@@ -646,8 +645,8 @@ Several attributes can be used to specify the switches:\n The switches for the other tools are defined in a similar manner through the\n @b{Default_Switches} and @b{Switches} attributes, respectively in the\n @emph{Builder} package (for @command{gnatmake} and @command{gprbuild}),\n-the @emph{Binder} package (for @command{gnatbind} and @command{gprbind})\n-and the @emph{Linker} package (for @command{gnatlink} and @command{gprlink}).\n+the @emph{Binder} package (binding Ada executables) and the @emph{Linker}\n+package (for inking executables).\n \n @c ---------------------------------------------\n @node Compiling with Project Files\n@@ -744,7 +743,7 @@ on Windows), we could configure our project file to build \"proc1\"\n Attribute @b{Executable_Suffix}, when specified, may change the suffix\n of the executable files, when no attribute @code{Executable} applies:\n its value replace the platform-specific executable suffix.\n-By default, the latter is empty on UNIX and \".exe\" on Windows.\n+The default executable suffix is empty on UNIX and \".exe\" on Windows.\n \n It is also possible to change the name of the produced executable by using the\n command line switch @option{-o}. when several mains are defined in the project,\n@@ -771,7 +770,7 @@ project C_Main is\n       C_Switches := (\"-pedantic\");\n       for Default_Switches (\"C\")   use C_Switches;\n       for Default_Switches (\"Ada\") use (\"-gnaty\");\n-      for Switches (\"main.c\")    use C_Switches & (\"-g\");\n+      for Switches (\"main.c\") use C_Switches & (\"-g\");\n    end Compiler;\n end C_Main;\n @end smallexample\n@@ -802,6 +801,7 @@ replaced by a reference to the @code{Default_Switches} attribute:\n Note the tick (@emph{'}) used to refer to attributes defined in a package.\n \n Here is the output of the GPRbuild command using this project:\n+@c This is NOT the output of gprbuild????\n \n @smallexample\n $gprbuild -Pc_main\n@@ -817,7 +817,7 @@ gcc main.o -o main.exe\n @noindent\n The default switches for Ada sources,\n the default switches for C sources (in the compilation of @file{lib.c}),\n-and the specific switches for @file{c_main.c} have all been taken into\n+and the specific switches for @file{main.c} have all been taken into\n account.\n \n @c ---------------------------------------------\n@@ -829,8 +829,8 @@ account.\n Sometimes an Ada software system is ported from one compilation environment to\n another (say GNAT), and the file are not named using the default GNAT\n conventions. Instead of changing all the file names, which for a variety of\n-reasons might not be possible, you can define the relevant file naming scheme in\n-the @b{Naming} package of your project file.\n+reasons might not be possible, you can define the relevant file naming scheme\n+in the @b{Naming} package of your project file.\n \n The naming scheme has two distinct goals for the project manager: it\n allows finding of source files when searching in the source\n@@ -860,9 +860,9 @@ The following attributes can be defined in package @code{Naming}:\n   @cindex @code{Dot_Replacement}\n   This attribute specifies the string that should replace the \".\" in unit\n   names. Its default value is @code{\"-\"} so that a unit\n-  @code{Parent.Child}is expected to be found in the file @file{parent-child.adb}.\n-  The replacement string must satisfy the following requirements to\n-  avoid ambiguities in the naming scheme:\n+  @code{Parent.Child} is expected to be found in the file\n+  @file{parent-child.adb}. The replacement string must satisfy the following\n+  requirements to avoid ambiguities in the naming scheme:\n \n   @itemize -\n   @item It must not be empty\n@@ -978,7 +978,7 @@ For example, the following package models the Apex file naming rules:\n @end ifclear\n \n @ifset vms\n-For example, the following package models the HP Ada file naming rules:\n+For example, the following package models the DEC Ada file naming rules:\n \n @smallexample @c projectfile\n @group\n@@ -1053,21 +1053,18 @@ of our project:\n When such a project is compiled, @command{gnatmake} will automatically\n check the other projects and recompile their sources when needed. It will also\n recompile the sources from @code{Build} when needed, and finally create the\n-executable. In some cases,\n-the implementation units needed to recompile a project are not available,\n-or come from some third-party and\n-you do not want to recompile it yourself. In this case, the\n-attribute @b{Externally_Built} to \"true\" can be set, indicating to the builder\n- that this project can be assumed to be up-to-date, and should not be considered\n-for recompilation. In Ada, if the sources of this externally built project\n-were compiled with another version of the compiler or with incompatible options,\n-the binder will issue an error.\n+executable. In some cases, the implementation units needed to recompile a\n+project are not available, or come from some third-party and you do not want to\n+recompile it yourself. In this case, the attribute @b{Externally_Built} to\n+\"true\" can be set, indicating to the builder that this project can be assumed\n+to be up-to-date, and should not be considered for recompilation. In Ada, if\n+the sources of this externally built project were compiled with another version\n+of the compiler or with incompatible options, the binder will issue an error.\n \n The project's @code{with} clause has several effects. It provides source\n-visibility between projects during the compilation process.\n-It also guarantees that the necessary object files from @code{Logging}\n-and @code{GtkAda} are available when\n-linking @code{Build}.\n+visibility between projects during the compilation process. It also guarantees\n+that the necessary object files from @code{Logging} and @code{GtkAda} are\n+available when linking @code{Build}.\n \n As can be seen in this example, the syntax for importing projects is similar\n to the syntax for importing compilation units in Ada. However, project files\n@@ -1095,14 +1092,13 @@ the search stops:\n   @cindex @code{GPR_PROJECT_PATH}\n   Then it is searched relative to all the directories specified in the\n   ^environment variables^logical names^ @b{GPR_PROJECT_PATH} and\n-  @b{ADA_PROJECT_PATH} (in that order) if they exist.. The former is\n+  @b{ADA_PROJECT_PATH} (in that order) if they exist. The former is\n   recommended, the latter is kept for backward compatibility.\n @item Finally, it is searched relative to the default project directories.\n-  Such directories are defined by the compiler and are relative to the\n-  installation directory of that compiler (in the @file{lib/gnat/} and\n-  @file{lib/gpr/} subdirectories). In our example, @file{gtkada.gpr}\n-  is found in the predefined directory if it was installed at the same root\n-  as GNAT.\n+  Such directories depends on the tool used. For @command{gnatmake}, there is\n+  one default project directory: @file{<prefix>/lib/gnat/}. In our example,\n+  @file{gtkada.gpr} is found in the predefined directory if it was installed at\n+  the same root as GNAT.\n \n @end itemize\n \n@@ -1131,7 +1127,7 @@ when they do, they need to specify precisely which project owns which sources\n using attribute @code{Source_Files} or equivalent. By contrast, 2 projects\n can each own a source with the same base file name as long as they live in\n different directories. The latter is not true for Ada Sources because of the\n-correlation betwen source files and Ada units: it is not possible to link an\n+correlation betwen source files and Ada units.\n \n @c ---------------------------------------------\n @node Cyclic Project Dependencies"}, {"sha": "085c4bf81b55ae3e9060e7f2bcec19265bad2062", "filename": "gcc/ada/s-rannum.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e86a3a7e6ffb78b799a3a92d958e1afd2237adb1/gcc%2Fada%2Fs-rannum.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e86a3a7e6ffb78b799a3a92d958e1afd2237adb1/gcc%2Fada%2Fs-rannum.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-rannum.adb?ref=e86a3a7e6ffb78b799a3a92d958e1afd2237adb1", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2007,2009  Free Software Foundation, Inc.         --\n+--          Copyright (C) 2007-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -528,7 +528,7 @@ package body System.Random_Numbers is\n    function Extract_Value (S : String; Index : Integer) return State_Val is\n    begin\n       return State_Val'Value (S (S'First + Index * 11 ..\n-                                 S'First + Index * 11 + 11));\n+                                 S'First + Index * 11 + 10));\n    end Extract_Value;\n \n end System.Random_Numbers;"}, {"sha": "7111287c0a626c99a7d98c04e80df5716eae14d4", "filename": "gcc/ada/scos.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e86a3a7e6ffb78b799a3a92d958e1afd2237adb1/gcc%2Fada%2Fscos.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e86a3a7e6ffb78b799a3a92d958e1afd2237adb1/gcc%2Fada%2Fscos.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscos.ads?ref=e86a3a7e6ffb78b799a3a92d958e1afd2237adb1", "patch": "@@ -272,6 +272,10 @@ package SCOs is\n    --    enclosing statement. The SCO line for a nested decision always occurs\n    --    after the line for the enclosing decision.\n \n+   --    Note that membership tests are considered to be a single simple\n+   --    condition, and that is true even if the Ada 2005 set membership\n+   --    form is used, e.g. A in (2,7,11.15).\n+\n    --  Case Expressions\n \n    --    For case statements, we rely on statement coverage to make sure that"}, {"sha": "fa48a542109987f1cec9b2b2c63b6b99790d56e5", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e86a3a7e6ffb78b799a3a92d958e1afd2237adb1/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e86a3a7e6ffb78b799a3a92d958e1afd2237adb1/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=e86a3a7e6ffb78b799a3a92d958e1afd2237adb1", "patch": "@@ -1037,8 +1037,8 @@ package body Sem_Ch3 is\n \n    begin\n       --  Associate the Itype node with the inner full-type declaration or\n-      --  subprogram spec. This is required to handle nested anonymous\n-      --  declarations. For example:\n+      --  subprogram spec or entry body. This is required to handle nested\n+      --  anonymous declarations. For example:\n \n       --      procedure P\n       --       (X : access procedure\n@@ -1050,7 +1050,9 @@ package body Sem_Ch3 is\n                                    N_Private_Type_Declaration,\n                                    N_Private_Extension_Declaration,\n                                    N_Procedure_Specification,\n-                                   N_Function_Specification)\n+                                   N_Function_Specification,\n+                                   N_Entry_Body)\n+\n                    or else\n                  Nkind_In (D_Ityp, N_Object_Declaration,\n                                    N_Object_Renaming_Declaration,"}, {"sha": "ac18104008071d2b4ab33a6a057da5257a5476d6", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e86a3a7e6ffb78b799a3a92d958e1afd2237adb1/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e86a3a7e6ffb78b799a3a92d958e1afd2237adb1/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=e86a3a7e6ffb78b799a3a92d958e1afd2237adb1", "patch": "@@ -1444,21 +1444,18 @@ package body Sem_Res is\n \n                null;\n \n-               --  Operator may be defined in an extension of system\n+            --  Operator may be defined in an extension of System\n \n             elsif Present (System_Aux_Id)\n               and then Scope (Opnd_Type) = System_Aux_Id\n             then\n                null;\n \n             else\n-               --  Note: go to First_Subtype here to ensure the message has the\n-               --  proper source type name (Typ may be an anonymous base type).\n-\n                --  Could we use Wrong_Type here??? (this would require setting\n                --  Etype (N) to the actual type found where Typ was expected).\n \n-               Error_Msg_NE (\"expect type&\", N, First_Subtype (Typ));\n+               Error_Msg_NE (\"expect }\", N, Typ);\n             end if;\n          end if;\n       end if;"}]}