{"sha": "d9aa82f10cdbbc460af31c61067e07c4ea0acc39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDlhYTgyZjEwY2RiYmM0NjBhZjMxYzYxMDY3ZTA3YzRlYTBhY2MzOQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2014-11-08T11:25:10Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2014-11-08T11:25:10Z"}, "message": "aarch-common.c: Include rtl-iter.h.\n\ngcc/\n\t* config/arm/aarch-common.c: Include rtl-iter.h.\n\t(search_term, arm_find_sub_rtx_with_search_term): Delete.\n\t(arm_find_sub_rtx_with_code): Use FOR_EACH_SUBRTX_VAR.\n\t(arm_get_set_operands): Pass the insn pattern rather than the\n\tinsn itself.\n\t(arm_no_early_store_addr_dep): Likewise.\n\nFrom-SVN: r217253", "tree": {"sha": "292231a65c7f21f8b1de3e3dc1346bd9db5b7a6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/292231a65c7f21f8b1de3e3dc1346bd9db5b7a6c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9aa82f10cdbbc460af31c61067e07c4ea0acc39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9aa82f10cdbbc460af31c61067e07c4ea0acc39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9aa82f10cdbbc460af31c61067e07c4ea0acc39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9aa82f10cdbbc460af31c61067e07c4ea0acc39/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d1b0433b1aba81a6c3e87e867aaf24c6356e4f35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1b0433b1aba81a6c3e87e867aaf24c6356e4f35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1b0433b1aba81a6c3e87e867aaf24c6356e4f35"}], "stats": {"total": 109, "additions": 39, "deletions": 70}, "files": [{"sha": "57e2a0e4c50543893cc74026ddb08442124a6fc6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9aa82f10cdbbc460af31c61067e07c4ea0acc39/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9aa82f10cdbbc460af31c61067e07c4ea0acc39/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d9aa82f10cdbbc460af31c61067e07c4ea0acc39", "patch": "@@ -1,3 +1,12 @@\n+2014-11-08  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/arm/aarch-common.c: Include rtl-iter.h.\n+\t(search_term, arm_find_sub_rtx_with_search_term): Delete.\n+\t(arm_find_sub_rtx_with_code): Use FOR_EACH_SUBRTX_VAR.\n+\t(arm_get_set_operands): Pass the insn pattern rather than the\n+\tinsn itself.\n+\t(arm_no_early_store_addr_dep): Likewise.\n+\n 2014-11-08  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* config/arm/arm.c (arm_set_return_address): Mark the store as frame"}, {"sha": "17219600a22ecd6e6755c639de6b61ee068ffc47", "filename": "gcc/config/arm/aarch-common.c", "status": "modified", "additions": 30, "deletions": 70, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9aa82f10cdbbc460af31c61067e07c4ea0acc39/gcc%2Fconfig%2Farm%2Faarch-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9aa82f10cdbbc460af31c61067e07c4ea0acc39/gcc%2Fconfig%2Farm%2Faarch-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Faarch-common.c?ref=d9aa82f10cdbbc460af31c61067e07c4ea0acc39", "patch": "@@ -30,6 +30,7 @@\n #include \"tree.h\"\n #include \"c-family/c-common.h\"\n #include \"rtl.h\"\n+#include \"rtl-iter.h\"\n \n /* In ARMv8-A there's a general expectation that AESE/AESMC\n    and AESD/AESIMC sequences of the form:\n@@ -68,13 +69,6 @@ aarch_crypto_can_dual_issue (rtx_insn *producer_insn, rtx_insn *consumer_insn)\n   return 0;\n }\n \n-typedef struct\n-{\n-  rtx_code search_code;\n-  rtx search_result;\n-  bool find_any_shift;\n-} search_term;\n-\n /* Return TRUE if X is either an arithmetic shift left, or\n    is a multiplication by a power of two.  */\n bool\n@@ -96,68 +90,32 @@ static rtx_code shift_rtx_codes[] =\n   { ASHIFT, ROTATE, ASHIFTRT, LSHIFTRT,\n     ROTATERT, ZERO_EXTEND, SIGN_EXTEND };\n \n-/* Callback function for arm_find_sub_rtx_with_code.\n-   DATA is safe to treat as a SEARCH_TERM, ST.  This will\n-   hold a SEARCH_CODE.  PATTERN is checked to see if it is an\n-   RTX with that code.  If it is, write SEARCH_RESULT in ST\n-   and return 1.  Otherwise, or if we have been passed a NULL_RTX\n-   return 0.  If ST.FIND_ANY_SHIFT then we are interested in\n-   anything which can reasonably be described as a SHIFT RTX.  */\n-static int\n-arm_find_sub_rtx_with_search_term (rtx *pattern, void *data)\n-{\n-  search_term *st = (search_term *) data;\n-  rtx_code pattern_code;\n-  int found = 0;\n-\n-  gcc_assert (pattern);\n-  gcc_assert (st);\n-\n-  /* Poorly formed patterns can really ruin our day.  */\n-  if (*pattern == NULL_RTX)\n-    return 0;\n-\n-  pattern_code = GET_CODE (*pattern);\n-\n-  if (st->find_any_shift)\n-    {\n-      unsigned i = 0;\n-\n-      /* Left shifts might have been canonicalized to a MULT of some\n-\t power of two.  Make sure we catch them.  */\n-      if (arm_rtx_shift_left_p (*pattern))\n-\tfound = 1;\n-      else\n-\tfor (i = 0; i < ARRAY_SIZE (shift_rtx_codes); i++)\n-\t  if (pattern_code == shift_rtx_codes[i])\n-\t    found = 1;\n-    }\n-\n-  if (pattern_code == st->search_code)\n-    found = 1;\n-\n-  if (found)\n-    st->search_result = *pattern;\n-\n-  return found;\n-}\n-\n-/* Traverse PATTERN looking for a sub-rtx with RTX_CODE CODE.  */\n+/* Traverse PATTERN looking for a sub-rtx with RTX_CODE CODE.\n+   If FIND_ANY_SHIFT then we are interested in anything which can\n+   reasonably be described as a SHIFT RTX.  */\n static rtx\n arm_find_sub_rtx_with_code (rtx pattern, rtx_code code, bool find_any_shift)\n {\n-  search_term st;\n-  int result = 0;\n-\n-  gcc_assert (pattern != NULL_RTX);\n-  st.search_code = code;\n-  st.search_result = NULL_RTX;\n-  st.find_any_shift = find_any_shift;\n-  result = for_each_rtx (&pattern, arm_find_sub_rtx_with_search_term, &st);\n-  if (result)\n-    return st.search_result;\n-  else\n-    return NULL_RTX;\n+  subrtx_var_iterator::array_type array;\n+  FOR_EACH_SUBRTX_VAR (iter, array, pattern, NONCONST)\n+    {\n+      rtx x = *iter;\n+      if (find_any_shift)\n+\t{\n+\t  /* Left shifts might have been canonicalized to a MULT of some\n+\t     power of two.  Make sure we catch them.  */\n+\t  if (arm_rtx_shift_left_p (x))\n+\t    return x;\n+\t  else\n+\t    for (unsigned int i = 0; i < ARRAY_SIZE (shift_rtx_codes); i++)\n+\t      if (GET_CODE (x) == shift_rtx_codes[i])\n+\t\treturn x;\n+\t}\n+\n+      if (GET_CODE (x) == code)\n+\treturn x;\n+    }\n+  return NULL_RTX;\n }\n \n /* Traverse PATTERN looking for any sub-rtx which looks like a shift.  */\n@@ -180,8 +138,10 @@ static int\n arm_get_set_operands (rtx producer, rtx consumer,\n \t\t      rtx *set_source, rtx *set_destination)\n {\n-  rtx set_producer = arm_find_sub_rtx_with_code (producer, SET, false);\n-  rtx set_consumer = arm_find_sub_rtx_with_code (consumer, SET, false);\n+  rtx set_producer = arm_find_sub_rtx_with_code (PATTERN (producer),\n+\t\t\t\t\t\t SET, false);\n+  rtx set_consumer = arm_find_sub_rtx_with_code (PATTERN (consumer),\n+\t\t\t\t\t\t SET, false);\n \n   if (set_producer && set_consumer)\n     {\n@@ -353,8 +313,8 @@ arm_no_early_mul_dep (rtx producer, rtx consumer)\n int\n arm_no_early_store_addr_dep (rtx producer, rtx consumer)\n {\n-  rtx value = arm_find_sub_rtx_with_code (producer, SET, false);\n-  rtx addr = arm_find_sub_rtx_with_code (consumer, SET, false);\n+  rtx value = arm_find_sub_rtx_with_code (PATTERN (producer), SET, false);\n+  rtx addr = arm_find_sub_rtx_with_code (PATTERN (consumer), SET, false);\n \n   if (value)\n     value = SET_DEST (value);"}]}