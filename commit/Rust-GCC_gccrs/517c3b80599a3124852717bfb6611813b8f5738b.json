{"sha": "517c3b80599a3124852717bfb6611813b8f5738b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTE3YzNiODA1OTlhMzEyNDg1MjcxN2JmYjY2MTE4MTNiOGY1NzM4Yg==", "commit": {"author": {"name": "Ben Elliston", "email": "bje@redhat.com", "date": "2001-07-11T07:56:23Z"}, "committer": {"name": "Ben Elliston", "email": "bje@gcc.gnu.org", "date": "2001-07-11T07:56:23Z"}, "message": "re PR c++/80 (g++ enum and attributed __packed__)\n\n2001-07-11  Ben Elliston  <bje@redhat.com>\n\n\tPR c++/80\n\t* decl.c (finish_enum): New \"attributes\" argument; pass it to\n\tcplus_decl_attributes.  Use a narrower type if the enum is packed.\n\t* cp-tree.h (finish_enum): Adjust prototype.\n\t* parse.y (enum_head): New non-terminal.\n\t(structsp): Use it. Enums now may be preceded or followed by\n\toptional attributes -- pass their chained tree to finish_enum().\n\t* pt.c (tsubst_enum): Pass NULL_TREE for the new argument.\n\nFrom-SVN: r43929", "tree": {"sha": "195b4f1c5e483097198fa73d23583d4ed1f36e73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/195b4f1c5e483097198fa73d23583d4ed1f36e73"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/517c3b80599a3124852717bfb6611813b8f5738b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/517c3b80599a3124852717bfb6611813b8f5738b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/517c3b80599a3124852717bfb6611813b8f5738b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/517c3b80599a3124852717bfb6611813b8f5738b/comments", "author": null, "committer": null, "parents": [{"sha": "6fbce318c30ee5eade1645dad4770d25d22a0346", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fbce318c30ee5eade1645dad4770d25d22a0346", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fbce318c30ee5eade1645dad4770d25d22a0346"}], "stats": {"total": 54, "additions": 39, "deletions": 15}, "files": [{"sha": "4ecf0aa0bce7d5de6c518f3609fe8f155785b10e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/517c3b80599a3124852717bfb6611813b8f5738b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/517c3b80599a3124852717bfb6611813b8f5738b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=517c3b80599a3124852717bfb6611813b8f5738b", "patch": "@@ -1,3 +1,14 @@\n+2001-07-11  Ben Elliston  <bje@redhat.com>\n+\n+\tPR c++/80\n+\t* decl.c (finish_enum): New \"attributes\" argument; pass it to\n+\tcplus_decl_attributes.  Use a narrower type if the enum is packed.\n+\t* cp-tree.h (finish_enum): Adjust prototype.\n+\t* parse.y (enum_head): New non-terminal.\n+\t(structsp): Use it. Enums now may be preceded or followed by\n+\toptional attributes -- pass their chained tree to finish_enum().\n+\t* pt.c (tsubst_enum): Pass NULL_TREE for the new argument.\n+\n 2001-07-10  Mark Mitchell  <mark@codesourcery.com>\n \n \t* pt.c (tsubst_decl): Set DECL_CONTEXT for namespace-scope"}, {"sha": "d27ee9fe830a4240bcb1b681c546b8a023f445f1", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/517c3b80599a3124852717bfb6611813b8f5738b/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/517c3b80599a3124852717bfb6611813b8f5738b/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=517c3b80599a3124852717bfb6611813b8f5738b", "patch": "@@ -3845,7 +3845,7 @@ extern tree xref_tag\t\t\t\tPARAMS ((tree, tree, int));\n extern tree xref_tag_from_type\t\t\tPARAMS ((tree, tree, int));\n extern void xref_basetypes\t\t\tPARAMS ((tree, tree, tree, tree));\n extern tree start_enum\t\t\t\tPARAMS ((tree));\n-extern void finish_enum\t\t\t\tPARAMS ((tree));\n+extern void finish_enum\t\t\t\tPARAMS ((tree, tree));\n extern void build_enumerator\t\t\tPARAMS ((tree, tree, tree));\n extern int start_function\t\t\tPARAMS ((tree, tree, tree, int));\n extern tree finish_function\t\t\tPARAMS ((int));"}, {"sha": "15ee0be1a39893551e66f85a22f04e88ceb0857d", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/517c3b80599a3124852717bfb6611813b8f5738b/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/517c3b80599a3124852717bfb6611813b8f5738b/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=517c3b80599a3124852717bfb6611813b8f5738b", "patch": "@@ -12984,8 +12984,9 @@ start_enum (name)\n    ENUMTYPE is the type object and VALUES a list of name-value pairs.  */\n \n void\n-finish_enum (enumtype)\n+finish_enum (enumtype, attributes)\n      tree enumtype;\n+     tree attributes;\n {\n   tree pair;\n   tree minnode;\n@@ -12996,6 +12997,8 @@ finish_enum (enumtype)\n   int highprec; \n   int precision;\n \n+  cplus_decl_attributes (enumtype, attributes, NULL_TREE);\n+  \n   /* We built up the VALUES in reverse order.  */\n   TYPE_VALUES (enumtype) = nreverse (TYPE_VALUES (enumtype));\n \n@@ -13074,11 +13077,14 @@ finish_enum (enumtype)\n   else\n     fixup_signed_type (enumtype);\n \n-  if (flag_short_enums || (precision > TYPE_PRECISION (integer_type_node)))\n-    /* Use the width of the narrowest normal C type which is wide\n-       enough.  */\n-    TYPE_PRECISION (enumtype) = TYPE_PRECISION (type_for_size\n-\t\t\t\t\t\t(precision, 1));\n+  if (flag_short_enums || TYPE_PACKED (enumtype) ||\n+      (precision > TYPE_PRECISION (integer_type_node)))\n+    {\n+      /* Use the width of the narrowest normal C type which is wide\n+\t enough.  */\n+      TYPE_PRECISION (enumtype) = TYPE_PRECISION (type_for_size\n+\t\t\t\t\t\t  (precision, 1));\n+    }\n   else\n     TYPE_PRECISION (enumtype) = TYPE_PRECISION (integer_type_node);\n "}, {"sha": "6c2a6beb24bcbe0ed00e41bc254e25bbd0cc8fe2", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/517c3b80599a3124852717bfb6611813b8f5738b/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/517c3b80599a3124852717bfb6611813b8f5738b/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=517c3b80599a3124852717bfb6611813b8f5738b", "patch": "@@ -340,7 +340,7 @@ cp_parse_init ()\n %type <ttype> init initlist maybeasm maybe_init defarg defarg1\n %type <ttype> asm_operands nonnull_asm_operands asm_operand asm_clobbers\n %type <ttype> maybe_attribute attributes attribute attribute_list attrib\n-%type <ttype> any_word\n+%type <ttype> any_word enum_head\n \n %type <itype> save_lineno\n %type <ttype> simple_stmt simple_if\n@@ -2240,22 +2240,29 @@ pending_defargs:\n \t\t{ do_pending_defargs (); }\n \t;\n \n+enum_head:\n+\t  ENUM\n+\t\t{ $$ = NULL_TREE; }\n+\t| ENUM attributes\n+\t\t{ $$ = $2; }\n+\t;\n+\n structsp:\n-\t  ENUM identifier '{'\n+\t  enum_head identifier '{'\n \t\t{ $<ttype>$ = current_enum_type;\n \t\t  current_enum_type = start_enum ($2); }\n-\t  enumlist_opt '}'\n+\t  enumlist_opt '}' maybe_attribute \n \t\t{ $$.t = current_enum_type;\n-\t\t  finish_enum (current_enum_type);\n+\t\t  finish_enum (current_enum_type, chainon ($1, $7));\n \t\t  $$.new_type_flag = 1;\n \t\t  current_enum_type = $<ttype>4;\n \t\t  check_for_missing_semicolon ($$.t); }\n-\t| ENUM '{'\n+\t| enum_head '{'\n \t\t{ $<ttype>$ = current_enum_type;\n \t\t  current_enum_type = start_enum (make_anon_name ()); }\n-\t  enumlist_opt '}'\n+\t  enumlist_opt '}' maybe_attribute \n                 { $$.t = current_enum_type;\n-\t\t  finish_enum (current_enum_type);\n+\t\t  finish_enum (current_enum_type, chainon ($1, $6));\n \t\t  $$.new_type_flag = 1;\n \t\t  current_enum_type = $<ttype>3;\n \t\t  check_for_missing_semicolon ($$.t); }"}, {"sha": "9503e3ec13f6edd26df427d1a317bceada60a65d", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/517c3b80599a3124852717bfb6611813b8f5738b/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/517c3b80599a3124852717bfb6611813b8f5738b/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=517c3b80599a3124852717bfb6611813b8f5738b", "patch": "@@ -10149,7 +10149,7 @@ tsubst_enum (tag, newtag, args)\n       build_enumerator (TREE_PURPOSE (e), value, newtag); \n     }\n \n-  finish_enum (newtag);\n+  finish_enum (newtag, NULL_TREE);\n   DECL_SOURCE_LINE (TYPE_NAME (newtag)) = DECL_SOURCE_LINE (TYPE_NAME (tag));\n   DECL_SOURCE_FILE (TYPE_NAME (newtag)) = DECL_SOURCE_FILE (TYPE_NAME (tag));\n }"}]}