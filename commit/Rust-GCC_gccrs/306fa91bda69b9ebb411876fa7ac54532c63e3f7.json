{"sha": "306fa91bda69b9ebb411876fa7ac54532c63e3f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzA2ZmE5MWJkYTY5YjllYmI0MTE4NzZmYTdhYzU0NTMyYzYzZTNmNw==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2015-10-26T10:47:00Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2015-10-26T10:47:00Z"}, "message": "Add vars in intra_create_variables_info\n\n2015-10-26  Tom de Vries  <tom@codesourcery.com>\n\n\t* tree-ssa-structalias.c (intra_create_variable_infos): Add\n\trestrict_pointer_p and recursive_restrict_p variables.\n\nFrom-SVN: r229323", "tree": {"sha": "c8b6cc06aaf223bf79c5c11749abd6d800482528", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8b6cc06aaf223bf79c5c11749abd6d800482528"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/306fa91bda69b9ebb411876fa7ac54532c63e3f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/306fa91bda69b9ebb411876fa7ac54532c63e3f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/306fa91bda69b9ebb411876fa7ac54532c63e3f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/306fa91bda69b9ebb411876fa7ac54532c63e3f7/comments", "author": null, "committer": null, "parents": [{"sha": "e541e62f3b49076aa72fcfa5e7f01f3b97e91fda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e541e62f3b49076aa72fcfa5e7f01f3b97e91fda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e541e62f3b49076aa72fcfa5e7f01f3b97e91fda"}], "stats": {"total": 17, "additions": 12, "deletions": 5}, "files": [{"sha": "e4a8b88981c42445dd78878b8f3934360e2cd289", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/306fa91bda69b9ebb411876fa7ac54532c63e3f7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/306fa91bda69b9ebb411876fa7ac54532c63e3f7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=306fa91bda69b9ebb411876fa7ac54532c63e3f7", "patch": "@@ -1,3 +1,8 @@\n+2015-10-26  Tom de Vries  <tom@codesourcery.com>\n+\n+\t* tree-ssa-structalias.c (intra_create_variable_infos): Add\n+\trestrict_pointer_p and recursive_restrict_p variables.\n+\n 2015-10-26  Tom de Vries  <tom@codesourcery.com>\n \n \t* tree-ssa-structalias.c (intra_create_variable_infos): Inline"}, {"sha": "1e1ae95a297ed80c5304aeeb6677035cb01ac162", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/306fa91bda69b9ebb411876fa7ac54532c63e3f7/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/306fa91bda69b9ebb411876fa7ac54532c63e3f7/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=306fa91bda69b9ebb411876fa7ac54532c63e3f7", "patch": "@@ -5857,6 +5857,11 @@ intra_create_variable_infos (struct function *fn)\n      passed-by-reference argument.  */\n   for (t = DECL_ARGUMENTS (fn->decl); t; t = DECL_CHAIN (t))\n     {\n+      bool restrict_pointer_p = (POINTER_TYPE_P (TREE_TYPE (t))\n+\t\t\t\t && TYPE_RESTRICT (TREE_TYPE (t)));\n+      bool recursive_restrict_p\n+\t= (restrict_pointer_p\n+\t   && !type_contains_placeholder_p (TREE_TYPE (TREE_TYPE (t))));\n       varinfo_t p = lookup_vi_for_tree (t);\n       if (p == NULL)\n \t{\n@@ -5868,9 +5873,7 @@ intra_create_variable_infos (struct function *fn)\n \t the pointed-to object.  Note that this ends up handling\n \t out-of-bound references conservatively by aggregating them\n \t in the first/last subfield of the object.  */\n-      if (POINTER_TYPE_P (TREE_TYPE (t))\n-\t  && TYPE_RESTRICT (TREE_TYPE (t))\n-\t  && !type_contains_placeholder_p (TREE_TYPE (TREE_TYPE (t))))\n+      if (recursive_restrict_p)\n \t{\n \t  varinfo_t vi;\n \t  tree heapvar = build_fake_var_decl (TREE_TYPE (TREE_TYPE (t)));\n@@ -5890,8 +5893,7 @@ intra_create_variable_infos (struct function *fn)\n \t  continue;\n \t}\n \n-      if (POINTER_TYPE_P (TREE_TYPE (t))\n-\t  && TYPE_RESTRICT (TREE_TYPE (t)))\n+      if (restrict_pointer_p)\n \tmake_constraint_from_global_restrict (p, \"PARM_RESTRICT\");\n       else\n \t{"}]}