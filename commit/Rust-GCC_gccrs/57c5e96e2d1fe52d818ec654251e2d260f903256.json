{"sha": "57c5e96e2d1fe52d818ec654251e2d260f903256", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTdjNWU5NmUyZDFmZTUyZDgxOGVjNjU0MjUxZTJkMjYwZjkwMzI1Ng==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2015-04-14T21:31:07Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-04-14T21:31:07Z"}, "message": "* pt.c (lookup_template_class_1): Use coerce_innermost_template_parms.\n\nFrom-SVN: r222104", "tree": {"sha": "a45bc47298c3ea784b0b53d92e92a95be9493cae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a45bc47298c3ea784b0b53d92e92a95be9493cae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57c5e96e2d1fe52d818ec654251e2d260f903256", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57c5e96e2d1fe52d818ec654251e2d260f903256", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57c5e96e2d1fe52d818ec654251e2d260f903256", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57c5e96e2d1fe52d818ec654251e2d260f903256/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c07ad89a044d379b5048441d0792c7a296502b2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c07ad89a044d379b5048441d0792c7a296502b2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c07ad89a044d379b5048441d0792c7a296502b2a"}], "stats": {"total": 60, "additions": 6, "deletions": 54}, "files": [{"sha": "dbf6330da935311d51fadb4b8a5bb3542ec9b064", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57c5e96e2d1fe52d818ec654251e2d260f903256/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57c5e96e2d1fe52d818ec654251e2d260f903256/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=57c5e96e2d1fe52d818ec654251e2d260f903256", "patch": "@@ -1,5 +1,7 @@\n 2015-04-14  Jason Merrill  <jason@redhat.com>\n \n+\t* pt.c (lookup_template_class_1): Use coerce_innermost_template_parms.\n+\n \tPR c++/65695\n \t* cvt.c (cp_fold_convert): Avoid wrapping PTRMEM_CST in NOP_EXPR.\n "}, {"sha": "aed6f1cb953731a67ca2377f60a69428ed337f77", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 54, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57c5e96e2d1fe52d818ec654251e2d260f903256/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57c5e96e2d1fe52d818ec654251e2d260f903256/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=57c5e96e2d1fe52d818ec654251e2d260f903256", "patch": "@@ -7724,60 +7724,10 @@ lookup_template_class_1 (tree d1, tree arglist, tree in_decl, tree context,\n       /* Calculate the BOUND_ARGS.  These will be the args that are\n \t actually tsubst'd into the definition to create the\n \t instantiation.  */\n-      if (parm_depth > 1)\n-\t{\n-\t  /* We have multiple levels of arguments to coerce, at once.  */\n-\t  int i;\n-\t  int saved_depth = TMPL_ARGS_DEPTH (arglist);\n-\n-\t  tree bound_args = make_tree_vec (parm_depth);\n-\n-\t  for (i = saved_depth,\n-\t\t t = DECL_TEMPLATE_PARMS (gen_tmpl);\n-\t       i > 0 && t != NULL_TREE;\n-\t       --i, t = TREE_CHAIN (t))\n-\t    {\n-\t      tree a;\n-\t      if (i == saved_depth)\n-\t\ta = coerce_template_parms (TREE_VALUE (t),\n-\t\t\t\t\t   arglist, gen_tmpl,\n-\t\t\t\t\t   complain,\n-\t\t\t\t\t   /*require_all_args=*/true,\n-\t\t\t\t\t   /*use_default_args=*/true);\n-\t      else\n-\t\t/* Outer levels should have already been coerced.  */\n-\t\ta = TMPL_ARGS_LEVEL (arglist, i);\n-\n-\t      /* Don't process further if one of the levels fails.  */\n-\t      if (a == error_mark_node)\n-\t\t{\n-\t\t  /* Restore the ARGLIST to its full size.  */\n-\t\t  TREE_VEC_LENGTH (arglist) = saved_depth;\n-\t\t  return error_mark_node;\n-\t\t}\n-\n-\t      SET_TMPL_ARGS_LEVEL (bound_args, i, a);\n-\n-\t      /* We temporarily reduce the length of the ARGLIST so\n-\t\t that coerce_template_parms will see only the arguments\n-\t\t corresponding to the template parameters it is\n-\t\t examining.  */\n-\t      TREE_VEC_LENGTH (arglist)--;\n-\t    }\n-\n-\t  /* Restore the ARGLIST to its full size.  */\n-\t  TREE_VEC_LENGTH (arglist) = saved_depth;\n-\n-\t  arglist = bound_args;\n-\t}\n-      else\n-\targlist\n-\t  = coerce_template_parms (INNERMOST_TEMPLATE_PARMS (parmlist),\n-\t\t\t\t   INNERMOST_TEMPLATE_ARGS (arglist),\n-\t\t\t\t   gen_tmpl,\n-\t\t\t\t   complain,\n-\t\t\t\t   /*require_all_args=*/true,\n-\t\t\t\t   /*use_default_args=*/true);\n+      arglist = coerce_innermost_template_parms (parmlist, arglist, gen_tmpl,\n+\t\t\t\t\t\t complain,\n+\t\t\t\t\t\t /*require_all_args=*/true,\n+\t\t\t\t\t\t /*use_default_args=*/true);\n \n       if (arglist == error_mark_node)\n \t/* We were unable to bind the arguments.  */"}]}