{"sha": "901a52ba7d5c1f530e60f0b615ee16889786532a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTAxYTUyYmE3ZDVjMWY1MzBlNjBmMGI2MTVlZTE2ODg5Nzg2NTMyYQ==", "commit": {"author": {"name": "Gary Dismukes", "email": "dismukes@adacore.com", "date": "2019-07-04T08:06:49Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-07-04T08:06:49Z"}, "message": "[Ada] Expr. func. with private formal rejected in nested Ghost package\n\nThe compiler prematurely freezes a private type that is the type of a\nformal parameter of an expression function declared within a nested,\ninactivated Ghost package, resulting is an error complaining that the\nprivate type must be fully defined at that point. This is fixed by\ntesting for Ignored_Ghost_Entity in the condition guarding the code that\nperforms Mask_Unfrozen_Types for an expression function without a\nseparate declaration, ensuring that the expression function's profile\nisn't frozen prematurely.\n\n2019-07-04  Gary Dismukes  <dismukes@adacore.com>\n\ngcc/ada/\n\n\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): The special\n\ttreatment of calling Mask_Unfrozen_Types must also be done in\n\tthe case of an Ignored_Ghost_Entity, because Expander_Active is\n\tFalse in that case.\n\ngcc/testsuite/\n\n\t* gnat.dg/ghost5.adb, gnat.dg/ghost5.ads,\n\tgnat.dg/ghost5_parent.ads: New testcase.\n\nFrom-SVN: r273065", "tree": {"sha": "8ebad73048377afd4c605abc7e694d7617b82dcb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ebad73048377afd4c605abc7e694d7617b82dcb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/901a52ba7d5c1f530e60f0b615ee16889786532a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/901a52ba7d5c1f530e60f0b615ee16889786532a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/901a52ba7d5c1f530e60f0b615ee16889786532a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/901a52ba7d5c1f530e60f0b615ee16889786532a/comments", "author": {"login": "dismukes", "id": 50880541, "node_id": "MDQ6VXNlcjUwODgwNTQx", "avatar_url": "https://avatars.githubusercontent.com/u/50880541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dismukes", "html_url": "https://github.com/dismukes", "followers_url": "https://api.github.com/users/dismukes/followers", "following_url": "https://api.github.com/users/dismukes/following{/other_user}", "gists_url": "https://api.github.com/users/dismukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dismukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dismukes/subscriptions", "organizations_url": "https://api.github.com/users/dismukes/orgs", "repos_url": "https://api.github.com/users/dismukes/repos", "events_url": "https://api.github.com/users/dismukes/events{/privacy}", "received_events_url": "https://api.github.com/users/dismukes/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3cc0fae4334466cc8da40e454455b08e83c9e932", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cc0fae4334466cc8da40e454455b08e83c9e932", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cc0fae4334466cc8da40e454455b08e83c9e932"}], "stats": {"total": 43, "additions": 41, "deletions": 2}, "files": [{"sha": "5eb10d285391f98ec1adf18274e580afe0ae169c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/901a52ba7d5c1f530e60f0b615ee16889786532a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/901a52ba7d5c1f530e60f0b615ee16889786532a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=901a52ba7d5c1f530e60f0b615ee16889786532a", "patch": "@@ -1,3 +1,10 @@\n+2019-07-04  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): The special\n+\ttreatment of calling Mask_Unfrozen_Types must also be done in\n+\tthe case of an Ignored_Ghost_Entity, because Expander_Active is\n+\tFalse in that case.\n+\n 2019-07-04  Yannick Moy  <moy@adacore.com>\n \n \t* sem_prag.adb (Check_Library_Level_Entity): Update for new rule"}, {"sha": "d238b9de7d2a896988be9f0a64f0bf6ffc39a78f", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/901a52ba7d5c1f530e60f0b615ee16889786532a/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/901a52ba7d5c1f530e60f0b615ee16889786532a/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=901a52ba7d5c1f530e60f0b615ee16889786532a", "patch": "@@ -3689,7 +3689,7 @@ package body Sem_Ch6 is\n          --  generated. Freeze nodes, if any, are inserted before the current\n          --  body. These freeze actions are also needed in ASIS mode and in\n          --  Compile_Only mode to enable the proper back-end type annotations.\n-         --  They are necessary in any case to insure order of elaboration\n+         --  They are necessary in any case to ensure proper elaboration order\n          --  in gigi.\n \n          if Nkind (N) = N_Subprogram_Body\n@@ -3698,13 +3698,16 @@ package body Sem_Ch6 is\n            and then Serious_Errors_Detected = 0\n            and then (Expander_Active\n                       or else ASIS_Mode\n-                      or else Operating_Mode = Check_Semantics)\n+                      or else Operating_Mode = Check_Semantics\n+                      or else Is_Ignored_Ghost_Entity (Spec_Id))\n          then\n             --  The body generated for an expression function that is not a\n             --  completion is a freeze point neither for the profile nor for\n             --  anything else. That's why, in order to prevent any freezing\n             --  during analysis, we need to mask types declared outside the\n             --  expression (and in an outer scope) that are not yet frozen.\n+            --  This also needs to be done in the case of an ignored Ghost\n+            --  expression function, where the expander isn't active.\n \n             Set_Is_Frozen (Spec_Id);\n             Mask_Types := Mask_Unfrozen_Types (Spec_Id);"}, {"sha": "dd1aa0dc14a61185402252721663b1cccc9251b3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/901a52ba7d5c1f530e60f0b615ee16889786532a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/901a52ba7d5c1f530e60f0b615ee16889786532a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=901a52ba7d5c1f530e60f0b615ee16889786532a", "patch": "@@ -1,3 +1,8 @@\n+2019-07-04  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* gnat.dg/ghost5.adb, gnat.dg/ghost5.ads,\n+\tgnat.dg/ghost5_parent.ads: New testcase.\n+\n 2019-07-04  Yannick Moy  <moy@adacore.com>\n \n \t* gnat.dg/spark3.adb: New testcase."}, {"sha": "8aad8d4263319456f1844c24d17d8e53a76cb138", "filename": "gcc/testsuite/gnat.dg/ghost5.adb", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/901a52ba7d5c1f530e60f0b615ee16889786532a/gcc%2Ftestsuite%2Fgnat.dg%2Fghost5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/901a52ba7d5c1f530e60f0b615ee16889786532a/gcc%2Ftestsuite%2Fgnat.dg%2Fghost5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fghost5.adb?ref=901a52ba7d5c1f530e60f0b615ee16889786532a", "patch": "@@ -0,0 +1,5 @@\n+--  { dg-do compile }\n+\n+package body Ghost5 is\n+   procedure Foo is null;\n+end Ghost5;"}, {"sha": "f58ff39c707672452c0211b3b861f9b7f38b464a", "filename": "gcc/testsuite/gnat.dg/ghost5.ads", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/901a52ba7d5c1f530e60f0b615ee16889786532a/gcc%2Ftestsuite%2Fgnat.dg%2Fghost5.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/901a52ba7d5c1f530e60f0b615ee16889786532a/gcc%2Ftestsuite%2Fgnat.dg%2Fghost5.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fghost5.ads?ref=901a52ba7d5c1f530e60f0b615ee16889786532a", "patch": "@@ -0,0 +1,5 @@\n+with Ghost5_Parent;\n+generic\n+package Ghost5 is\n+   procedure Foo;\n+end Ghost5;"}, {"sha": "cab7f315c351563daa856f4da6492425f4d6307f", "filename": "gcc/testsuite/gnat.dg/ghost5_parent.ads", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/901a52ba7d5c1f530e60f0b615ee16889786532a/gcc%2Ftestsuite%2Fgnat.dg%2Fghost5_parent.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/901a52ba7d5c1f530e60f0b615ee16889786532a/gcc%2Ftestsuite%2Fgnat.dg%2Fghost5_parent.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fghost5_parent.ads?ref=901a52ba7d5c1f530e60f0b615ee16889786532a", "patch": "@@ -0,0 +1,14 @@\n+package Ghost5_Parent is\n+\n+   type Priv is private;\n+\n+   package Nested with Ghost is\n+      function Func1 (X : Priv) return Boolean is (True); -- Error flagged here\n+      function Func2 (X : Priv) return Boolean is (False);\n+   end Nested;\n+\n+private\n+\n+    type Priv is new Integer;\n+\n+end Ghost5_Parent;"}]}