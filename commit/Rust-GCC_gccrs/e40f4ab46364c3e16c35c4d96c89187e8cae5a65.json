{"sha": "e40f4ab46364c3e16c35c4d96c89187e8cae5a65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQwZjRhYjQ2MzY0YzNlMTZjMzVjNGQ5NmM4OTE4N2U4Y2FlNWE2NQ==", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2021-05-28T13:11:03Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-07-09T12:35:25Z"}, "message": "[Ada] Decouple analysis of static expression functions from GNATprove\n\ngcc/ada/\n\n\t* sem_ch6.adb (Analyze_Expression_Function): Reorder code.", "tree": {"sha": "8358ea4ca141bdb046c598a309060a36ef6c95d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8358ea4ca141bdb046c598a309060a36ef6c95d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e40f4ab46364c3e16c35c4d96c89187e8cae5a65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e40f4ab46364c3e16c35c4d96c89187e8cae5a65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e40f4ab46364c3e16c35c4d96c89187e8cae5a65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e40f4ab46364c3e16c35c4d96c89187e8cae5a65/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "640ba4c1a33cb7e4ad854985f7d95882f8ed2260", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/640ba4c1a33cb7e4ad854985f7d95882f8ed2260", "html_url": "https://github.com/Rust-GCC/gccrs/commit/640ba4c1a33cb7e4ad854985f7d95882f8ed2260"}], "stats": {"total": 137, "additions": 68, "deletions": 69}, "files": [{"sha": "0ecac3fed4e9ca7888e2f14384221789ec752456", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 68, "deletions": 69, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e40f4ab46364c3e16c35c4d96c89187e8cae5a65/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e40f4ab46364c3e16c35c4d96c89187e8cae5a65/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=e40f4ab46364c3e16c35c4d96c89187e8cae5a65", "patch": "@@ -526,30 +526,30 @@ package body Sem_Ch6 is\n             End_Scope;\n          end if;\n \n+         --  If this is a wrapper created in an instance for a formal\n+         --  subprogram, insert body after declaration, to be analyzed when the\n+         --  enclosing instance is analyzed.\n+\n+         if GNATprove_Mode\n+           and then Is_Generic_Actual_Subprogram (Def_Id)\n+         then\n+            Insert_After (N, New_Body);\n+\n          --  To prevent premature freeze action, insert the new body at the end\n          --  of the current declarations, or at the end of the package spec.\n          --  However, resolve usage names now, to prevent spurious visibility\n          --  on later entities. Note that the function can now be called in\n-         --  the current declarative part, which will appear to be prior to\n-         --  the presence of the body in the code. There are nevertheless no\n-         --  order of elaboration issues because all name resolution has taken\n-         --  place at the point of declaration.\n-\n-         declare\n-            Decls : List_Id          := List_Containing (N);\n-            Par   : constant Node_Id := Parent (Decls);\n+         --  the current declarative part, which will appear to be prior to the\n+         --  presence of the body in the code. There are nevertheless no order\n+         --  of elaboration issues because all name resolution has taken place\n+         --  at the point of declaration.\n \n-         begin\n-            --  If this is a wrapper created in an instance for a formal\n-            --  subprogram, insert body after declaration, to be analyzed when\n-            --  the enclosing instance is analyzed.\n-\n-            if GNATprove_Mode\n-              and then Is_Generic_Actual_Subprogram (Def_Id)\n-            then\n-               Insert_After (N, New_Body);\n+         else\n+            declare\n+               Decls : List_Id          := List_Containing (N);\n+               Par   : constant Node_Id := Parent (Decls);\n \n-            else\n+            begin\n                if Nkind (Par) = N_Package_Specification\n                  and then Decls = Visible_Declarations (Par)\n                  and then not Is_Empty_List (Private_Declarations (Par))\n@@ -558,68 +558,67 @@ package body Sem_Ch6 is\n                end if;\n \n                Insert_After (Last (Decls), New_Body);\n+            end;\n+         end if;\n \n-               --  Preanalyze the expression if not already done above\n+         --  Preanalyze the expression if not already done above\n \n-               if not Inside_A_Generic then\n-                  Push_Scope (Def_Id);\n-                  Install_Formals (Def_Id);\n-                  Preanalyze_Formal_Expression (Expr, Typ);\n-                  Check_Limited_Return (Orig_N, Expr, Typ);\n-                  End_Scope;\n-               end if;\n+         if not Inside_A_Generic then\n+            Push_Scope (Def_Id);\n+            Install_Formals (Def_Id);\n+            Preanalyze_Formal_Expression (Expr, Typ);\n+            Check_Limited_Return (Orig_N, Expr, Typ);\n+            End_Scope;\n+         end if;\n \n-               --  In the case of an expression function marked with the\n-               --  aspect Static, we need to check the requirement that the\n-               --  function's expression is a potentially static expression.\n-               --  This is done by making a full copy of the expression tree\n-               --  and performing a special preanalysis on that tree with\n-               --  the global flag Checking_Potentially_Static_Expression\n-               --  enabled. If the resulting expression is static, then it's\n-               --  OK, but if not, that means the expression violates the\n-               --  requirements of the Ada 2022 RM in 4.9(3.2/5-3.4/5) and\n-               --  we flag an error.\n-\n-               if Is_Static_Function (Def_Id) then\n-                  if not Is_Static_Expression (Expr) then\n-                     declare\n-                        Exp_Copy : constant Node_Id := New_Copy_Tree (Expr);\n-                     begin\n-                        Set_Checking_Potentially_Static_Expression (True);\n+         --  In the case of an expression function marked with the aspect\n+         --  Static, we need to check the requirement that the function's\n+         --  expression is a potentially static expression. This is done\n+         --  by making a full copy of the expression tree and performing\n+         --  a special preanalysis on that tree with the global flag\n+         --  Checking_Potentially_Static_Expression enabled. If the\n+         --  resulting expression is static, then it's OK, but if not, that\n+         --  means the expression violates the requirements of the Ada 2022\n+         --  RM in 4.9(3.2/5-3.4/5) and we flag an error.\n \n-                        Preanalyze_Formal_Expression (Exp_Copy, Typ);\n+         if Is_Static_Function (Def_Id) then\n+            if not Is_Static_Expression (Expr) then\n+               declare\n+                  Exp_Copy : constant Node_Id := New_Copy_Tree (Expr);\n+               begin\n+                  Set_Checking_Potentially_Static_Expression (True);\n \n-                        if not Is_Static_Expression (Exp_Copy) then\n-                           Error_Msg_N\n-                             (\"static expression function requires \"\n-                                & \"potentially static expression\", Expr);\n-                        end if;\n+                  Preanalyze_Formal_Expression (Exp_Copy, Typ);\n \n-                        Set_Checking_Potentially_Static_Expression (False);\n-                     end;\n+                  if not Is_Static_Expression (Exp_Copy) then\n+                     Error_Msg_N\n+                       (\"static expression function requires \"\n+                          & \"potentially static expression\", Expr);\n                   end if;\n \n-                  --  We also make an additional copy of the expression and\n-                  --  replace the expression of the expression function with\n-                  --  this copy, because the currently present expression is\n-                  --  now associated with the body created for the static\n-                  --  expression function, which will later be analyzed and\n-                  --  possibly rewritten, and we need to have the separate\n-                  --  unanalyzed copy available for use with later static\n-                  --  calls.\n+                  Set_Checking_Potentially_Static_Expression (False);\n+               end;\n+            end if;\n \n-                  Set_Expression\n-                    (Original_Node (Subprogram_Spec (Def_Id)),\n-                     New_Copy_Tree (Expr));\n+            --  We also make an additional copy of the expression and\n+            --  replace the expression of the expression function with\n+            --  this copy, because the currently present expression is\n+            --  now associated with the body created for the static\n+            --  expression function, which will later be analyzed and\n+            --  possibly rewritten, and we need to have the separate\n+            --  unanalyzed copy available for use with later static\n+            --  calls.\n \n-                  --  Mark static expression functions as inlined, to ensure\n-                  --  that even calls with nonstatic actuals will be inlined.\n+            Set_Expression\n+              (Original_Node (Subprogram_Spec (Def_Id)),\n+               New_Copy_Tree (Expr));\n \n-                  Set_Has_Pragma_Inline (Def_Id);\n-                  Set_Is_Inlined (Def_Id);\n-               end if;\n-            end if;\n-         end;\n+            --  Mark static expression functions as inlined, to ensure\n+            --  that even calls with nonstatic actuals will be inlined.\n+\n+            Set_Has_Pragma_Inline (Def_Id);\n+            Set_Is_Inlined (Def_Id);\n+         end if;\n       end if;\n \n       --  Check incorrect use of dynamically tagged expression. This doesn't"}]}