{"sha": "1234ee19c9a7b175c154f987d3089d669d17501a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTIzNGVlMTljOWE3YjE3NWMxNTRmOTg3ZDMwODlkNjY5ZDE3NTAxYQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2017-07-16T18:25:26Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2017-07-16T18:25:26Z"}, "message": "tree-ssa-loop-manip.c (tree_transform_and_unroll_loop): Use profile_proability for scalling.\n\n\n\t* tree-ssa-loop-manip.c (tree_transform_and_unroll_loop): Use\n\tprofile_proability for scalling.\n\t* scale_profile_for_vect_loop.c (scale_profile_for_vect_loop): Likewise.\n\nFrom-SVN: r250245", "tree": {"sha": "68b1b5e7c40dc5d48e22f371d06b21cb8e460a76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68b1b5e7c40dc5d48e22f371d06b21cb8e460a76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1234ee19c9a7b175c154f987d3089d669d17501a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1234ee19c9a7b175c154f987d3089d669d17501a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1234ee19c9a7b175c154f987d3089d669d17501a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1234ee19c9a7b175c154f987d3089d669d17501a/comments", "author": null, "committer": null, "parents": [{"sha": "109bb9be651660bd3624509880c5cb487698a2e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/109bb9be651660bd3624509880c5cb487698a2e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/109bb9be651660bd3624509880c5cb487698a2e9"}], "stats": {"total": 49, "additions": 23, "deletions": 26}, "files": [{"sha": "31979ed91b398022fca3fe4922eb639c1666d6f3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1234ee19c9a7b175c154f987d3089d669d17501a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1234ee19c9a7b175c154f987d3089d669d17501a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1234ee19c9a7b175c154f987d3089d669d17501a", "patch": "@@ -1,3 +1,9 @@\n+2017-07-16  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* tree-ssa-loop-manip.c (tree_transform_and_unroll_loop): Use\n+\tprofile_proability for scalling.\n+\t* scale_profile_for_vect_loop.c (scale_profile_for_vect_loop): Likewise.\n+\n 2017-07-16  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* cgraph.c (cgraph_edge::redirect_call_stmt_to_caller): Cleanup."}, {"sha": "5488044b18f5572fc27f8d752ee0bd7765b1cae5", "filename": "gcc/tree-ssa-loop-manip.c", "status": "modified", "additions": 14, "deletions": 21, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1234ee19c9a7b175c154f987d3089d669d17501a/gcc%2Ftree-ssa-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1234ee19c9a7b175c154f987d3089d669d17501a/gcc%2Ftree-ssa-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-manip.c?ref=1234ee19c9a7b175c154f987d3089d669d17501a", "patch": "@@ -1212,7 +1212,8 @@ tree_transform_and_unroll_loop (struct loop *loop, unsigned factor,\n   gimple_stmt_iterator bsi;\n   use_operand_p op;\n   bool ok;\n-  unsigned i, prob, prob_entry, scale_unrolled;\n+  unsigned i;\n+  profile_probability prob, prob_entry, scale_unrolled;\n   profile_count freq_e, freq_h;\n   gcov_type new_est_niter = niter_for_unrolled_loop (loop, factor);\n   unsigned irr = loop_preheader_edge (loop)->flags & EDGE_IRREDUCIBLE_LOOP;\n@@ -1224,9 +1225,10 @@ tree_transform_and_unroll_loop (struct loop *loop, unsigned factor,\n \n   /* Let us assume that the unrolled loop is quite likely to be entered.  */\n   if (integer_nonzerop (enter_main_cond))\n-    prob_entry = REG_BR_PROB_BASE;\n+    prob_entry = profile_probability::always ();\n   else\n-    prob_entry = PROB_UNROLLED_LOOP_ENTERED * REG_BR_PROB_BASE / 100;\n+    prob_entry = profile_probability::guessed_always ()\n+\t\t\t.apply_scale (PROB_UNROLLED_LOOP_ENTERED, 100);\n \n   /* The values for scales should keep profile consistent, and somewhat close\n      to correct.\n@@ -1242,13 +1244,8 @@ tree_transform_and_unroll_loop (struct loop *loop, unsigned factor,\n      by appropriate factors).  */\n   scale_unrolled = prob_entry;\n \n-  new_loop = loop_version (loop, enter_main_cond, NULL,\n-\t\t\t   profile_probability::from_reg_br_prob_base\n-\t\t\t\t (prob_entry),\n-\t\t\t   profile_probability::from_reg_br_prob_base\n-\t\t\t\t (REG_BR_PROB_BASE - prob_entry),\n-\t\t\t   profile_probability::from_reg_br_prob_base\n-\t\t\t\t(scale_unrolled),\n+  new_loop = loop_version (loop, enter_main_cond, NULL, prob_entry,\n+\t\t\t   prob_entry.invert (), scale_unrolled,\n \t\t\t   profile_probability::guessed_always (),\n \t\t\t   true);\n   gcc_assert (new_loop != NULL);\n@@ -1266,6 +1263,8 @@ tree_transform_and_unroll_loop (struct loop *loop, unsigned factor,\n      1 / (1 - exit->probability).  */\n   if (exit->probability.initialized_p ())\n     scale_dominated_blocks_in_loop (loop, exit->src,\n+\t\t\t\t    /* We are scaling up here so probability\n+\t\t\t\t       does not fit.  */\n \t\t\t\t    REG_BR_PROB_BASE,\n \t\t\t\t    REG_BR_PROB_BASE\n \t\t\t\t    - exit->probability.to_reg_br_prob_base ());\n@@ -1289,9 +1288,7 @@ tree_transform_and_unroll_loop (struct loop *loop, unsigned factor,\n   new_nonexit->flags = EDGE_TRUE_VALUE;\n   new_nonexit->count -= exit->count;\n   if (new_nonexit->probability.initialized_p ())\n-    scale_bbs_frequencies_int (&loop->latch, 1,\n-\t\t\t       new_nonexit->probability.to_reg_br_prob_base (),\n-\t\t\t       REG_BR_PROB_BASE);\n+    scale_bbs_frequencies (&loop->latch, 1, new_nonexit->probability);\n \n   old_entry = loop_preheader_edge (loop);\n   new_entry = loop_preheader_edge (new_loop);\n@@ -1388,16 +1385,12 @@ tree_transform_and_unroll_loop (struct loop *loop, unsigned factor,\n   rest->frequency += EDGE_FREQUENCY (new_exit);\n \n   new_nonexit = single_pred_edge (loop->latch);\n-  if (new_nonexit->probability.initialized_p ())\n-    prob = new_nonexit->probability.to_reg_br_prob_base ();\n-  else\n-    prob = 0;\n+  prob = new_nonexit->probability;\n   new_nonexit->probability = new_exit->probability.invert ();\n   new_nonexit->count = exit_bb->count - new_exit->count;\n-  if (prob > 0)\n-    scale_bbs_frequencies_int (&loop->latch, 1,\n-\t\t\t       new_nonexit->probability.to_reg_br_prob_base (),\n-\t\t\t       prob);\n+  prob = new_nonexit->probability / prob;\n+  if (prob.initialized_p ())\n+    scale_bbs_frequencies (&loop->latch, 1, prob);\n \n   /* Finally create the new counter for number of iterations and add the new\n      exit instruction.  */"}, {"sha": "6c18c8f8ecb07c32e7c312226991aafd995b7edc", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1234ee19c9a7b175c154f987d3089d669d17501a/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1234ee19c9a7b175c154f987d3089d669d17501a/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=1234ee19c9a7b175c154f987d3089d669d17501a", "patch": "@@ -7222,13 +7222,11 @@ scale_profile_for_vect_loop (struct loop *loop, unsigned vf)\n \t\t\t\t .apply_scale (1, new_est_niter + 1);\n \n   edge exit_l = single_pred_edge (loop->latch);\n-  int prob = exit_l->probability.initialized_p ()\n-\t     ? exit_l->probability.to_reg_br_prob_base () : 0;\n+  profile_probability prob = exit_l->probability;\n   exit_l->probability = exit_e->probability.invert ();\n   exit_l->count = exit_bb->count - exit_e->count;\n-  if (prob > 0)\n-    scale_bbs_frequencies_int (&loop->latch, 1,\n-\t\t\t       exit_l->probability.to_reg_br_prob_base (), prob);\n+  if (prob.initialized_p () && exit_l->probability.initialized_p ())\n+    scale_bbs_frequencies (&loop->latch, 1, exit_l->probability / prob);\n }\n \n /* Function vect_transform_loop."}]}