{"sha": "7b0e48fb44b44241ae79e34a666edc87fdfbeb78", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2IwZTQ4ZmI0NGI0NDI0MWFlNzllMzRhNjY2ZWRjODdmZGZiZWI3OA==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2007-08-14T20:52:47Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2007-08-14T20:52:47Z"}, "message": "tree-pass.h (PROP_pta): Removed.\n\n2007-08-14  Daniel Berlin  <dberlin@dberlin.org>\n\n\t* tree-pass.h (PROP_pta): Removed.\n\t(TODO_rebuild_alias): New.\n\t(pass_may_alias): Removed.\n\t* tree-ssa-ccp.c (execute_fold_all_builtins): Only rebuild\n\taliasing if we changed something.\n\t* tree-ssa-alias.c (compute_may_aliases): Make non-static.  Update\n\tSSA internally.\n\t(pass_may_alias): Removed.\n\t(create_structure_vars): Return TODO_rebuild_alias.\n\t* tree-ssa-pre.c (do_pre): Return TODO_rebuild_alias.\n\t* tree-sra.c (tree_sra): Only rebuild aliasing if something\n\tchanged.\n\t(tree_sra_early): We never affect aliasing right now.\n\t* tree-flow.h (compute_may_aliases): New prototype.\n\t* passes.c: Remove pass_may_alias from the passes.\n\t(execute_function_todo): Support TODO_rebuild_alias.\n\nFrom-SVN: r127491", "tree": {"sha": "162c2336093852966cecdacd8587d21a4e4868f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/162c2336093852966cecdacd8587d21a4e4868f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b0e48fb44b44241ae79e34a666edc87fdfbeb78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b0e48fb44b44241ae79e34a666edc87fdfbeb78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b0e48fb44b44241ae79e34a666edc87fdfbeb78", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b0e48fb44b44241ae79e34a666edc87fdfbeb78/comments", "author": null, "committer": null, "parents": [{"sha": "ea2666ba5e7bd79860e585dd09092bbcb0dd23c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea2666ba5e7bd79860e585dd09092bbcb0dd23c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea2666ba5e7bd79860e585dd09092bbcb0dd23c9"}], "stats": {"total": 178, "additions": 86, "deletions": 92}, "files": [{"sha": "11d3ad8e2a59aa55fbc06b01b2292f34ef5fff0b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b0e48fb44b44241ae79e34a666edc87fdfbeb78/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b0e48fb44b44241ae79e34a666edc87fdfbeb78/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7b0e48fb44b44241ae79e34a666edc87fdfbeb78", "patch": "@@ -1,3 +1,22 @@\n+2007-08-14  Daniel Berlin  <dberlin@dberlin.org>\n+\n+\t* tree-pass.h (PROP_pta): Removed.\n+\t(TODO_rebuild_alias): New.\n+\t(pass_may_alias): Removed.\n+\t* tree-ssa-ccp.c (execute_fold_all_builtins): Only rebuild\n+\taliasing if we changed something.\n+\t* tree-ssa-alias.c (compute_may_aliases): Make non-static.  Update\n+\tSSA internally.\n+\t(pass_may_alias): Removed.\n+\t(create_structure_vars): Return TODO_rebuild_alias.\n+\t* tree-ssa-pre.c (do_pre): Return TODO_rebuild_alias.\n+\t* tree-sra.c (tree_sra): Only rebuild aliasing if something\n+\tchanged.\n+\t(tree_sra_early): We never affect aliasing right now.\n+\t* tree-flow.h (compute_may_aliases): New prototype.\n+\t* passes.c: Remove pass_may_alias from the passes.\n+\t(execute_function_todo): Support TODO_rebuild_alias.\t\n+\n 2007-08-14  Kai Tietz  <kai.tietz@onevision.com>\n \n \t* i386.c: (legitimize_address): Move dllimported variable check\n@@ -385,6 +404,7 @@\n \t* emit-rtl.c (try_split): Relink the insns with REG_LIBCALL note\n \tand with REG_RETVAL note after split.\n \n+>>>>>>> .r127481\n 2007-08-11  David Daney  <ddaney@avtrex.com>\n \n \t* config/mips/mips.c (mips_sched_reorder):  Mark cycle parameter"}, {"sha": "1ec6b0a2c0d00e4c074313a35475c91ceb2d0388", "filename": "gcc/passes.c", "status": "modified", "additions": 8, "deletions": 19, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b0e48fb44b44241ae79e34a666edc87fdfbeb78/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b0e48fb44b44241ae79e34a666edc87fdfbeb78/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=7b0e48fb44b44241ae79e34a666edc87fdfbeb78", "patch": "@@ -551,7 +551,6 @@ init_optimization_passes (void)\n     {\n       struct tree_opt_pass **p = &pass_all_optimizations.sub;\n       NEXT_PASS (pass_create_structure_vars);\n-      NEXT_PASS (pass_may_alias);\n       NEXT_PASS (pass_return_slot);\n       NEXT_PASS (pass_rename_ssa_copies);\n \n@@ -566,26 +565,19 @@ init_optimization_passes (void)\n       NEXT_PASS (pass_vrp);\n       NEXT_PASS (pass_dce);\n       NEXT_PASS (pass_dominator);\n-\n       /* The only const/copy propagation opportunities left after\n \t DOM should be due to degenerate PHI nodes.  So rather than\n \t run the full propagators, run a specialized pass which\n \t only examines PHIs to discover const/copy propagation\n \t opportunities.  */\n       NEXT_PASS (pass_phi_only_cprop);\n-\n       NEXT_PASS (pass_tree_ifcombine);\n       NEXT_PASS (pass_phiopt);\n-      NEXT_PASS (pass_may_alias);\n       NEXT_PASS (pass_tail_recursion);\n       NEXT_PASS (pass_ch);\n       NEXT_PASS (pass_stdarg);\n       NEXT_PASS (pass_lower_complex);\n       NEXT_PASS (pass_sra);\n-      /* FIXME: SRA may generate arbitrary gimple code, exposing new\n-\t aliased and call-clobbered variables.  As mentioned below,\n-\t pass_may_alias should be a TODO item.  */\n-      NEXT_PASS (pass_may_alias);\n       NEXT_PASS (pass_rename_ssa_copies);\n       NEXT_PASS (pass_dominator);\n \n@@ -599,21 +591,15 @@ init_optimization_passes (void)\n       NEXT_PASS (pass_reassoc);\n       NEXT_PASS (pass_dce);\n       NEXT_PASS (pass_dse);\n-      NEXT_PASS (pass_may_alias);\n       NEXT_PASS (pass_forwprop);\n       NEXT_PASS (pass_phiopt);\n       NEXT_PASS (pass_object_sizes);\n       NEXT_PASS (pass_store_ccp);\n       NEXT_PASS (pass_store_copy_prop);\n       NEXT_PASS (pass_fold_builtins);\n       NEXT_PASS (pass_cse_sincos);\n-      /* FIXME: May alias should a TODO but for 4.0.0,\n-\t we add may_alias right after fold builtins\n-\t which can create arbitrary GIMPLE.  */\n-      NEXT_PASS (pass_may_alias);\n       NEXT_PASS (pass_split_crit_edges);\n       NEXT_PASS (pass_pre);\n-      NEXT_PASS (pass_may_alias);\n       NEXT_PASS (pass_sink_code);\n       NEXT_PASS (pass_tree_loop);\n \t{\n@@ -637,9 +623,6 @@ init_optimization_passes (void)\n \t      NEXT_PASS (pass_lower_vector_ssa);\n \t      NEXT_PASS (pass_dce_loop);\n \t    }\n-\t  /* NEXT_PASS (pass_may_alias) cannot be done again because the\n-\t     vectorizer creates alias relations that are not supported by\n-\t     pass_may_alias.  */\n \t  NEXT_PASS (pass_complete_unroll);\n \t  NEXT_PASS (pass_loop_prefetch);\n \t  NEXT_PASS (pass_iv_optimize);\n@@ -650,7 +633,7 @@ init_optimization_passes (void)\n       NEXT_PASS (pass_reassoc);\n       NEXT_PASS (pass_vrp);\n       NEXT_PASS (pass_dominator);\n-\n+      \n       /* The only const/copy propagation opportunities left after\n \t DOM should be due to degenerate PHI nodes.  So rather than\n \t run the full propagators, run a specialized pass which\n@@ -912,7 +895,13 @@ execute_function_todo (void *data)\n       update_ssa (update_flags);\n       cfun->last_verified &= ~TODO_verify_ssa;\n     }\n-\n+  \n+  if (flags & TODO_rebuild_alias)\n+    {\n+      compute_may_aliases ();\n+      cfun->curr_properties |= PROP_alias;\n+    }\n+  \n   if (flags & TODO_remove_unused_locals)\n     remove_unused_locals ();\n "}, {"sha": "46a3be7ee22870e35bd9c8fdbd0ab5d56a57d419", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20031015-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b0e48fb44b44241ae79e34a666edc87fdfbeb78/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20031015-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b0e48fb44b44241ae79e34a666edc87fdfbeb78/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20031015-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20031015-1.c?ref=7b0e48fb44b44241ae79e34a666edc87fdfbeb78", "patch": "@@ -1,7 +1,7 @@\n /* With tree-ssa, gcc.dg/20000724-1.c failed because we missed\n    a VOP of x in the asm statement.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-alias1-vops\" } */\n+/* { dg-options \"-O1 -fdump-tree-salias-vops\" } */\n \n struct s { int a; };\n \n@@ -14,5 +14,5 @@ main(void)\n }\n \n /* The VDEF comes from the initial assignment and the asm.  */\n-/* { dg-final { scan-tree-dump-times \"DEF\" 2 \"alias1\" } } */\n-/* { dg-final { cleanup-tree-dump \"alias1\" } } */\n+/* { dg-final { scan-tree-dump-times \"DEF\" 2 \"salias\" } } */\n+/* { dg-final { cleanup-tree-dump \"salias\" } } */"}, {"sha": "318ba7c1a19913d68c17f0df063d008aa22a1397", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20040517-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b0e48fb44b44241ae79e34a666edc87fdfbeb78/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040517-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b0e48fb44b44241ae79e34a666edc87fdfbeb78/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040517-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040517-1.c?ref=7b0e48fb44b44241ae79e34a666edc87fdfbeb78", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-alias1-vops\" } */\n+/* { dg-options \"-O1 -fdump-tree-salias-vops\" } */\n extern void abort (void);\n int a; \n  \n@@ -17,5 +17,5 @@ void bar (void)\n    malloc functions may clobber global memory.  Only the function result\n    does not alias any other pointer.\n    Hence, we must have a VDEF for a before and after the call to foo().  */\n-/* { dg-final { scan-tree-dump-times \"VDEF\" 2 \"alias1\"} } */\n-/* { dg-final { cleanup-tree-dump \"alias1\" } } */\n+/* { dg-final { scan-tree-dump-times \"VDEF\" 2 \"salias\"} } */\n+/* { dg-final { cleanup-tree-dump \"salias\" } } */"}, {"sha": "ac2b961d9dc9a018fcdb795d1efeb728e22a4629", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20040911-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b0e48fb44b44241ae79e34a666edc87fdfbeb78/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040911-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b0e48fb44b44241ae79e34a666edc87fdfbeb78/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040911-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040911-1.c?ref=7b0e48fb44b44241ae79e34a666edc87fdfbeb78", "patch": "@@ -1,7 +1,7 @@\n /* Verify that points-to information is handled properly for PTR + OFFSET\n    pointer arithmetics.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-alias1-vops\" } */\n+/* { dg-options \"-O2 -fdump-tree-salias-vops\" } */\n \n char buf[4], *q;\n int foo (int i)\n@@ -18,5 +18,5 @@ int foo (int i)\n   return *p;\n }\n \n-/* { dg-final { scan-tree-dump-not \"VUSE <c\" \"alias1\" } } */\n-/* { dg-final { cleanup-tree-dump \"alias1\" } } */\n+/* { dg-final { scan-tree-dump-not \"VUSE <c\" \"salias\" } } */\n+/* { dg-final { cleanup-tree-dump \"salias\" } } */"}, {"sha": "970ddc7323e5a97141486269bdfdc6ad53917f90", "filename": "gcc/testsuite/gcc.dg/tree-ssa/alias-12.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b0e48fb44b44241ae79e34a666edc87fdfbeb78/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b0e48fb44b44241ae79e34a666edc87fdfbeb78/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-12.c?ref=7b0e48fb44b44241ae79e34a666edc87fdfbeb78", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-alias1-vops\" } */\n+/* { dg-options \"-O2 -fdump-tree-salias-vops\" } */\n \n struct {\n \tint i;\n@@ -13,6 +13,6 @@ int foo(int i)\n \treturn a.x[i];\n }\n \n-/* { dg-final { scan-tree-dump \"VDEF\" \"alias1\" } } */\n-/* { dg-final { cleanup-tree-dump \"alias1\" } } */\n+/* { dg-final { scan-tree-dump \"VDEF\" \"salias\" } } */\n+/* { dg-final { cleanup-tree-dump \"salias\" } } */\n "}, {"sha": "97c25b1be9373d91a554bae900e626afa38214d6", "filename": "gcc/testsuite/gcc.dg/tree-ssa/inline_asm-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b0e48fb44b44241ae79e34a666edc87fdfbeb78/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Finline_asm-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b0e48fb44b44241ae79e34a666edc87fdfbeb78/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Finline_asm-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Finline_asm-1.c?ref=7b0e48fb44b44241ae79e34a666edc87fdfbeb78", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-optimized -fdump-tree-alias1-vops\" } */\n+/* { dg-options \"-O1 -fdump-tree-optimized -fdump-tree-salias-vops\" } */\n /* Test to make sure that inline-asm causes a V_MAY_DEF and that we call test_function twice. */\n \n char test_function(void ) __attribute__((__pure__));\n@@ -16,5 +16,5 @@ char f(char *a)\n /* { dg-final { cleanup-tree-dump \"optimized\" } } */\n \n /* There should a VDEF for the inline-asm.  */\n-/* { dg-final { scan-tree-dump-times \"VDEF\" 1 \"alias1\"} } */\n-/* { dg-final { cleanup-tree-dump \"alias1\" } } */\n+/* { dg-final { scan-tree-dump-times \"VDEF\" 1 \"salias\"} } */\n+/* { dg-final { cleanup-tree-dump \"salias\" } } */"}, {"sha": "33443e0234d7e6cc1ddfed27500b326592a60769", "filename": "gcc/testsuite/gcc.dg/tree-ssa/inline_asm-2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b0e48fb44b44241ae79e34a666edc87fdfbeb78/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Finline_asm-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b0e48fb44b44241ae79e34a666edc87fdfbeb78/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Finline_asm-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Finline_asm-2.c?ref=7b0e48fb44b44241ae79e34a666edc87fdfbeb78", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-alias1-vops\" } */\n+/* { dg-options \"-O1 -fdump-tree-salias-vops\" } */\n /* Test to make sure that inline-asm causes a V_MAY_DEF. */\n \n \n@@ -14,5 +14,5 @@ void f(char *a)\n }\n \n /* There should a VDEF for the inline-asm and one for the link_error.  */\n-/* { dg-final { scan-tree-dump-times \"VDEF\" 2 \"alias1\"} } */\n-/* { dg-final { cleanup-tree-dump \"alias1\" } } */\n+/* { dg-final { scan-tree-dump-times \"VDEF\" 2 \"salias\"} } */\n+/* { dg-final { cleanup-tree-dump \"salias\" } } */"}, {"sha": "d0b208825bc2cf1601163fc236336b8e7a5dc474", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr23382.c", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b0e48fb44b44241ae79e34a666edc87fdfbeb78/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23382.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b0e48fb44b44241ae79e34a666edc87fdfbeb78/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23382.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23382.c?ref=7b0e48fb44b44241ae79e34a666edc87fdfbeb78", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */ \n-/* { dg-options \"-O2 -fdump-tree-alias-vops\" } */\n+/* { dg-options \"-O2 -fdump-tree-salias-vops\" } */\n struct a\n {\n   int length;\n@@ -13,14 +13,5 @@ int f(void)\n    struct a *a = malloc(sizeof(struct a));\n    return a->length;\n }\n-/* { dg-final { scan-tree-dump-times \"VDEF <HEAP\" 1 \"alias1\"} } */\n-/* { dg-final { scan-tree-dump-times \"VDEF <HEAP\" 1 \"alias2\"} } */\n-/* { dg-final { scan-tree-dump-times \"VDEF <HEAP\" 1 \"alias3\"} } */\n-/* { dg-final { scan-tree-dump-times \"VDEF <HEAP\" 1 \"alias4\"} } */\n-/* { dg-final { scan-tree-dump-times \"VDEF <HEAP\" 1 \"alias5\"} } */\n-/* { dg-final { cleanup-tree-dump \"alias1\" } } */\n-/* { dg-final { cleanup-tree-dump \"alias2\" } } */\n-/* { dg-final { cleanup-tree-dump \"alias3\" } } */\n-/* { dg-final { cleanup-tree-dump \"alias4\" } } */\n-/* { dg-final { cleanup-tree-dump \"alias5\" } } */\n-/* { dg-final { cleanup-tree-dump \"alias6\" } } */\n+/* { dg-final { scan-tree-dump-times \"VDEF <HEAP\" 1 \"salias\"} } */\n+/* { dg-final { cleanup-tree-dump \"salias\" } } */"}, {"sha": "d2d99baf0a149863dfaa770b158388f79e9f237f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr26421.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b0e48fb44b44241ae79e34a666edc87fdfbeb78/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr26421.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b0e48fb44b44241ae79e34a666edc87fdfbeb78/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr26421.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr26421.c?ref=7b0e48fb44b44241ae79e34a666edc87fdfbeb78", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-alias1-vops\" } */\n+/* { dg-options \"-O2 -fdump-tree-salias-vops\" } */\n \n typedef struct {\n   int i;\n@@ -16,5 +16,5 @@ int foo(void)\n   return a.i;\n }\n \n-/* { dg-final { scan-tree-dump-times \"VDEF\" 2 \"alias1\" } } */\n-/* { dg-final { cleanup-tree-dump \"alias1\" } } */\n+/* { dg-final { scan-tree-dump-times \"VDEF\" 2 \"salias\" } } */\n+/* { dg-final { cleanup-tree-dump \"salias\" } } */"}, {"sha": "b9d84dffa8acf15e0827007ef77dd8858492c179", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pta-fp.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b0e48fb44b44241ae79e34a666edc87fdfbeb78/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpta-fp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b0e48fb44b44241ae79e34a666edc87fdfbeb78/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpta-fp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpta-fp.c?ref=7b0e48fb44b44241ae79e34a666edc87fdfbeb78", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */ \n-/* { dg-options \"-O2 -fdump-tree-alias1\" } */\n+/* { dg-options \"-O2 -fdump-tree-salias\" } */\n extern double cos (double);\n extern double sin (double);\n double f(double a)\n@@ -22,5 +22,5 @@ double f(double a)\n }\n /* The points-to set of the final function pointer should be \"sin cos\" */\n \n-/* { dg-final { scan-tree-dump-times \"{ sin cos }\" 1 \"alias1\"} } */\n-/* { dg-final { cleanup-tree-dump \"alias1\" } } */\n+/* { dg-final { scan-tree-dump-times \"{ sin cos }\" 1 \"salias\"} } */\n+/* { dg-final { cleanup-tree-dump \"salias\" } } */"}, {"sha": "5e47db40a73048f26a1e7b260ae21bf08a078901", "filename": "gcc/testsuite/gcc.dg/tree-ssa/salias-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b0e48fb44b44241ae79e34a666edc87fdfbeb78/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fsalias-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b0e48fb44b44241ae79e34a666edc87fdfbeb78/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fsalias-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fsalias-1.c?ref=7b0e48fb44b44241ae79e34a666edc87fdfbeb78", "patch": "@@ -15,5 +15,5 @@ int foo(void)\n   return a.b.c.j;\n }\n \n-/* { dg-final { scan-tree-dump-times \"SFT\" 2 \"salias\" } } */\n+/* { dg-final { scan-tree-dump-times \"structure field tag SFT\" 2 \"salias\" } } */\n /* { dg-final { cleanup-tree-dump \"salias\" } } */"}, {"sha": "f55922ba11a1fa515ebf88aa04d3ee5881d7cfb5", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b0e48fb44b44241ae79e34a666edc87fdfbeb78/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b0e48fb44b44241ae79e34a666edc87fdfbeb78/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=7b0e48fb44b44241ae79e34a666edc87fdfbeb78", "patch": "@@ -831,6 +831,7 @@ extern void record_vars (tree);\n extern bool block_may_fallthru (const_tree);\n \n /* In tree-ssa-alias.c  */\n+extern unsigned int compute_may_aliases (void);\n extern void dump_may_aliases_for (FILE *, tree);\n extern void debug_may_aliases_for (tree);\n extern void dump_alias_info (FILE *);"}, {"sha": "5a20772339e21e1720722658372d2938b98edc9c", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b0e48fb44b44241ae79e34a666edc87fdfbeb78/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b0e48fb44b44241ae79e34a666edc87fdfbeb78/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=7b0e48fb44b44241ae79e34a666edc87fdfbeb78", "patch": "@@ -149,12 +149,11 @@ struct dump_file_info\n #define PROP_gimple_leh\t\t(1 << 2)\t/* lowered eh */\n #define PROP_cfg\t\t(1 << 3)\n #define PROP_referenced_vars\t(1 << 4)\n-#define PROP_pta\t\t(1 << 5)\n-#define PROP_ssa\t\t(1 << 6)\n-#define PROP_no_crit_edges      (1 << 7)\n-#define PROP_rtl\t\t(1 << 8)\n-#define PROP_alias\t\t(1 << 9)\n-#define PROP_gimple_lomp\t(1 << 10)\t/* lowered OpenMP directives */\n+#define PROP_ssa\t\t(1 << 5)\n+#define PROP_no_crit_edges      (1 << 6)\n+#define PROP_rtl\t\t(1 << 7)\n+#define PROP_alias\t\t(1 << 8)\n+#define PROP_gimple_lomp\t(1 << 9)\t/* lowered OpenMP directives */\n \n #define PROP_trees \\\n   (PROP_gimple_any | PROP_gimple_lcf | PROP_gimple_leh | PROP_gimple_lomp)\n@@ -228,6 +227,9 @@ struct dump_file_info\n /* Internally used for the first instance of a pass.  */\n #define TODO_mark_first_instance\t(1 << 18)\n \n+/* Rebuild aliasing info.  */\n+#define TODO_rebuild_alias                (1 << 19)\n+\n #define TODO_update_ssa_any\t\t\\\n     (TODO_update_ssa\t\t\t\\\n      | TODO_update_ssa_no_phi\t\t\\\n@@ -278,7 +280,6 @@ extern struct tree_opt_pass pass_dce;\n extern struct tree_opt_pass pass_dce_loop;\n extern struct tree_opt_pass pass_cd_dce;\n extern struct tree_opt_pass pass_merge_phi;\n-extern struct tree_opt_pass pass_may_alias;\n extern struct tree_opt_pass pass_split_crit_edges;\n extern struct tree_opt_pass pass_pre;\n extern struct tree_opt_pass pass_profile;"}, {"sha": "5d69a49b7eb25858f3b3d2afaa6240f1d20e385e", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b0e48fb44b44241ae79e34a666edc87fdfbeb78/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b0e48fb44b44241ae79e34a666edc87fdfbeb78/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=7b0e48fb44b44241ae79e34a666edc87fdfbeb78", "patch": "@@ -2400,6 +2400,8 @@ tree_sra (void)\n       scan_function ();\n       decide_instantiations ();\n       scalarize_function ();\n+      if (!bitmap_empty_p (sra_candidates))\n+\ttodoflags |= TODO_rebuild_alias;\n     }\n \n   /* Free allocated memory.  */\n@@ -2422,7 +2424,7 @@ tree_sra_early (void)\n   ret = tree_sra ();\n   early_sra = false;\n \n-  return ret;\n+  return ret & ~TODO_rebuild_alias;\n }\n \n static bool"}, {"sha": "3889ea5aa7551793dc6fbd0311402d12498126e1", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 9, "deletions": 25, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b0e48fb44b44241ae79e34a666edc87fdfbeb78/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b0e48fb44b44241ae79e34a666edc87fdfbeb78/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=7b0e48fb44b44241ae79e34a666edc87fdfbeb78", "patch": "@@ -1634,10 +1634,12 @@ compute_memory_partitions (void)\n    grouped to avoid severe compile-time slow downs and memory\n    consumption. See compute_memory_partitions.  */\n \n-static unsigned int\n+unsigned int\n compute_may_aliases (void)\n {\n   struct alias_info *ai;\n+\n+  timevar_push (TV_TREE_MAY_ALIAS);\n   \n   memset (&alias_stats, 0, sizeof (alias_stats));\n \n@@ -1731,33 +1733,15 @@ compute_may_aliases (void)\n \n   /* Deallocate memory used by aliasing data structures.  */\n   delete_alias_info (ai);\n+\n+  if (need_ssa_update_p ())\n+    update_ssa (TODO_update_ssa);\n+\n+  timevar_pop (TV_TREE_MAY_ALIAS);\n   \n   return 0;\n }\n \n-\n-struct tree_opt_pass pass_may_alias = \n-{\n-  \"alias\",\t\t\t\t/* name */\n-  NULL,\t\t\t\t\t/* gate */\n-  compute_may_aliases,\t\t\t/* execute */\n-  NULL,\t\t\t\t\t/* sub */\n-  NULL,\t\t\t\t\t/* next */\n-  0,\t\t\t\t\t/* static_pass_number */\n-  TV_TREE_MAY_ALIAS,\t\t\t/* tv_id */\n-  PROP_cfg | PROP_ssa,\t\t\t/* properties_required */\n-  PROP_alias,\t\t\t\t/* properties_provided */\n-  0,\t\t\t\t\t/* properties_destroyed */\n-  0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func\n-    | TODO_update_ssa\n-    | TODO_ggc_collect\n-    | TODO_verify_ssa\n-    | TODO_verify_stmts, \t\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n-};\n-\n-\n /* Data structure used to count the number of dereferences to PTR\n    inside an expression.  */\n struct count_ptr_d\n@@ -4028,7 +4012,7 @@ create_structure_vars (void)\n \t  }\n       }\n \n-  return 0;\n+  return TODO_rebuild_alias;\n }\n \n static bool"}, {"sha": "e6dfcd83e88dca0680f50ac74b369c95d2a1f3e4", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b0e48fb44b44241ae79e34a666edc87fdfbeb78/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b0e48fb44b44241ae79e34a666edc87fdfbeb78/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=7b0e48fb44b44241ae79e34a666edc87fdfbeb78", "patch": "@@ -2640,6 +2640,8 @@ execute_fold_all_builtins (void)\n {\n   bool cfg_changed = false;\n   basic_block bb;\n+  unsigned int todoflags = 0;\n+  \n   FOR_EACH_BB (bb)\n     {\n       block_stmt_iterator i;\n@@ -2697,6 +2699,7 @@ execute_fold_all_builtins (void)\n \t\t{\n \t\t  bool ok = set_rhs (stmtp, result);\n \t\t  gcc_assert (ok);\n+\t\t  todoflags |= TODO_rebuild_alias;\n \t\t}\n \t    }\n \n@@ -2728,9 +2731,12 @@ execute_fold_all_builtins (void)\n \t    bsi_next (&i);\n \t}\n     }\n-\n+  \n   /* Delete unreachable blocks.  */\n-  return cfg_changed ? TODO_cleanup_cfg : 0;\n+  if (cfg_changed)\n+    todoflags |= TODO_cleanup_cfg;\n+  \n+  return todoflags;\n }\n \n "}, {"sha": "bfbf20ed860b91c9ab841d46e0eb9737dcb291d3", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b0e48fb44b44241ae79e34a666edc87fdfbeb78/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b0e48fb44b44241ae79e34a666edc87fdfbeb78/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=7b0e48fb44b44241ae79e34a666edc87fdfbeb78", "patch": "@@ -3981,7 +3981,7 @@ static unsigned int\n do_pre (void)\n {\n   execute_pre (false);\n-  return 0;\n+  return TODO_rebuild_alias;\n }\n \n static bool"}]}