{"sha": "543c0cbca0ca4e9dbe703a9ea4b8eb79744157b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQzYzBjYmNhMGNhNGU5ZGJlNzAzYTllYTRiOGViNzk3NDQxNTdiNg==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-05-12T09:52:51Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-05-14T08:56:45Z"}, "message": "aarch64: Merge sqdmlal2 and sqdmlsl2 expanders\n\nThe various sqdmlal2 and sqdmlsl2 expanders perform almost identical functions and can be\nmerged using code iterators and attributes to reduce the code in the MD file.\nNo behavioural change is expected.\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64-simd.md (aarch64_sqdmlal2<mode>): Merge into...\n\t(aarch64_sqdml<SBINQOPS:as>l2<mode>): ... This.\n\t(aarch64_sqdmlsl2<mode>): Delete.\n\t(aarch64_sqdmlal2_lane<mode>): Merge this...\n\t(aarch64_sqdmlsl2_lane<mode>): ... And this...\n\t(aarch64_sqdml<SBINQOPS:as>l2_lane<mode>): ... Into this.\n\t(aarch64_sqdmlal2_laneq<mode>): Merge this...\n\t(aarch64_sqdmlsl2_laneq<mode>): ... And this...\n\t(aarch64_sqdml<SBINQOPS:as>l2_laneq<mode>): ... Into this.\n\t(aarch64_sqdmlal2_n<mode>): Merge this...\n\t(aarch64_sqdmlsl2_n<mode>): ... And this...\n\t(aarch64_sqdml<SBINQOPS:as>l2_n<mode>): ... Into this.", "tree": {"sha": "0762eac54807dffe22245110552469f51f2e06e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0762eac54807dffe22245110552469f51f2e06e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/543c0cbca0ca4e9dbe703a9ea4b8eb79744157b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/543c0cbca0ca4e9dbe703a9ea4b8eb79744157b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/543c0cbca0ca4e9dbe703a9ea4b8eb79744157b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/543c0cbca0ca4e9dbe703a9ea4b8eb79744157b6/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3489257a33d69d9d3778b585558adb7dc33eec6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3489257a33d69d9d3778b585558adb7dc33eec6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3489257a33d69d9d3778b585558adb7dc33eec6d"}], "stats": {"total": 104, "additions": 28, "deletions": 76}, "files": [{"sha": "802cca3a68abb766b192d42700ed231fa4d8d77e", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 28, "deletions": 76, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/543c0cbca0ca4e9dbe703a9ea4b8eb79744157b6/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/543c0cbca0ca4e9dbe703a9ea4b8eb79744157b6/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=543c0cbca0ca4e9dbe703a9ea4b8eb79744157b6", "patch": "@@ -5356,29 +5356,19 @@\n   [(set_attr \"type\" \"neon_sat_mla_<Vetype>_scalar_long\")]\n )\n \n-(define_expand \"aarch64_sqdmlal2<mode>\"\n+(define_expand \"aarch64_sqdml<SBINQOPS:as>l2<mode>\"\n   [(match_operand:<VWIDE> 0 \"register_operand\")\n-   (match_operand:<VWIDE> 1 \"register_operand\")\n+   (SBINQOPS:<VWIDE>\n+     (match_operand:<VWIDE> 1 \"register_operand\")\n+     (match_dup 1))\n    (match_operand:VQ_HSI 2 \"register_operand\")\n    (match_operand:VQ_HSI 3 \"register_operand\")]\n   \"TARGET_SIMD\"\n {\n   rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, true);\n-  emit_insn (gen_aarch64_sqdmlal2<mode>_internal (operands[0], operands[1],\n-\t\t\t\t\t\t  operands[2], operands[3], p));\n-  DONE;\n-})\n-\n-(define_expand \"aarch64_sqdmlsl2<mode>\"\n-  [(match_operand:<VWIDE> 0 \"register_operand\")\n-   (match_operand:<VWIDE> 1 \"register_operand\")\n-   (match_operand:VQ_HSI 2 \"register_operand\")\n-   (match_operand:VQ_HSI 3 \"register_operand\")]\n-  \"TARGET_SIMD\"\n-{\n-  rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, true);\n-  emit_insn (gen_aarch64_sqdmlsl2<mode>_internal (operands[0], operands[1],\n-\t\t\t\t\t\t  operands[2], operands[3], p));\n+  emit_insn (gen_aarch64_sqdml<SBINQOPS:as>l2<mode>_internal (operands[0],\n+\t\t\t\t\t\toperands[1], operands[2],\n+\t\t\t\t\t\toperands[3], p));\n   DONE;\n })\n \n@@ -5436,63 +5426,37 @@\n   [(set_attr \"type\" \"neon_sat_mla_<Vetype>_scalar_long\")]\n )\n \n-(define_expand \"aarch64_sqdmlal2_lane<mode>\"\n-  [(match_operand:<VWIDE> 0 \"register_operand\")\n-   (match_operand:<VWIDE> 1 \"register_operand\")\n-   (match_operand:VQ_HSI 2 \"register_operand\")\n-   (match_operand:<VCOND> 3 \"register_operand\")\n-   (match_operand:SI 4 \"immediate_operand\")]\n-  \"TARGET_SIMD\"\n-{\n-  rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, true);\n-  emit_insn (gen_aarch64_sqdmlal2_lane<mode>_internal (operands[0], operands[1],\n-\t\t\t\t\t\t       operands[2], operands[3],\n-\t\t\t\t\t\t       operands[4], p));\n-  DONE;\n-})\n-\n-(define_expand \"aarch64_sqdmlal2_laneq<mode>\"\n-  [(match_operand:<VWIDE> 0 \"register_operand\")\n-   (match_operand:<VWIDE> 1 \"register_operand\")\n-   (match_operand:VQ_HSI 2 \"register_operand\")\n-   (match_operand:<VCONQ> 3 \"register_operand\")\n-   (match_operand:SI 4 \"immediate_operand\")]\n-  \"TARGET_SIMD\"\n-{\n-  rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, true);\n-  emit_insn (gen_aarch64_sqdmlal2_laneq<mode>_internal (operands[0], operands[1],\n-\t\t\t\t\t\t       operands[2], operands[3],\n-\t\t\t\t\t\t       operands[4], p));\n-  DONE;\n-})\n-\n-(define_expand \"aarch64_sqdmlsl2_lane<mode>\"\n+(define_expand \"aarch64_sqdml<SBINQOPS:as>l2_lane<mode>\"\n   [(match_operand:<VWIDE> 0 \"register_operand\")\n-   (match_operand:<VWIDE> 1 \"register_operand\")\n+   (SBINQOPS:<VWIDE>\n+     (match_operand:<VWIDE> 1 \"register_operand\")\n+     (match_dup 1))\n    (match_operand:VQ_HSI 2 \"register_operand\")\n    (match_operand:<VCOND> 3 \"register_operand\")\n    (match_operand:SI 4 \"immediate_operand\")]\n   \"TARGET_SIMD\"\n {\n   rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, true);\n-  emit_insn (gen_aarch64_sqdmlsl2_lane<mode>_internal (operands[0], operands[1],\n-\t\t\t\t\t\t       operands[2], operands[3],\n-\t\t\t\t\t\t       operands[4], p));\n+  emit_insn (gen_aarch64_sqdml<SBINQOPS:as>l2_lane<mode>_internal (operands[0],\n+\t\t\t\t\t\toperands[1], operands[2],\n+\t\t\t\t\t\toperands[3], operands[4], p));\n   DONE;\n })\n \n-(define_expand \"aarch64_sqdmlsl2_laneq<mode>\"\n+(define_expand \"aarch64_sqdml<SBINQOPS:as>l2_laneq<mode>\"\n   [(match_operand:<VWIDE> 0 \"register_operand\")\n-   (match_operand:<VWIDE> 1 \"register_operand\")\n+   (SBINQOPS:<VWIDE>\n+     (match_operand:<VWIDE> 1 \"register_operand\")\n+     (match_dup 1))\n    (match_operand:VQ_HSI 2 \"register_operand\")\n    (match_operand:<VCONQ> 3 \"register_operand\")\n    (match_operand:SI 4 \"immediate_operand\")]\n   \"TARGET_SIMD\"\n {\n   rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, true);\n-  emit_insn (gen_aarch64_sqdmlsl2_laneq<mode>_internal (operands[0], operands[1],\n-\t\t\t\t\t\t       operands[2], operands[3],\n-\t\t\t\t\t\t       operands[4], p));\n+  emit_insn (gen_aarch64_sqdml<SBINQOPS:as>l2_laneq<mode>_internal (operands[0],\n+\t\t\t\t\t\toperands[1], operands[2],\n+\t\t\t\t\t\toperands[3], operands[4], p));\n   DONE;\n })\n \n@@ -5515,31 +5479,19 @@\n   [(set_attr \"type\" \"neon_sat_mla_<Vetype>_scalar_long\")]\n )\n \n-(define_expand \"aarch64_sqdmlal2_n<mode>\"\n-  [(match_operand:<VWIDE> 0 \"register_operand\")\n-   (match_operand:<VWIDE> 1 \"register_operand\")\n-   (match_operand:VQ_HSI 2 \"register_operand\")\n-   (match_operand:<VEL> 3 \"register_operand\")]\n-  \"TARGET_SIMD\"\n-{\n-  rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, true);\n-  emit_insn (gen_aarch64_sqdmlal2_n<mode>_internal (operands[0], operands[1],\n-\t\t\t\t\t\t    operands[2], operands[3],\n-\t\t\t\t\t\t    p));\n-  DONE;\n-})\n-\n-(define_expand \"aarch64_sqdmlsl2_n<mode>\"\n+(define_expand \"aarch64_sqdml<SBINQOPS:as>l2_n<mode>\"\n   [(match_operand:<VWIDE> 0 \"register_operand\")\n-   (match_operand:<VWIDE> 1 \"register_operand\")\n+   (SBINQOPS:<VWIDE>\n+     (match_operand:<VWIDE> 1 \"register_operand\")\n+     (match_dup 1))\n    (match_operand:VQ_HSI 2 \"register_operand\")\n    (match_operand:<VEL> 3 \"register_operand\")]\n   \"TARGET_SIMD\"\n {\n   rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, true);\n-  emit_insn (gen_aarch64_sqdmlsl2_n<mode>_internal (operands[0], operands[1],\n-\t\t\t\t\t\t    operands[2], operands[3],\n-\t\t\t\t\t\t    p));\n+  emit_insn (gen_aarch64_sqdml<SBINQOPS:as>l2_n<mode>_internal (operands[0],\n+\t\t\t\t\t\toperands[1], operands[2],\n+\t\t\t\t\t\toperands[3], p));\n   DONE;\n })\n "}]}