{"sha": "fd5c81e9083eb241aa14a4ff428042fe98c15c88", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQ1YzgxZTkwODNlYjI0MWFhMTRhNGZmNDI4MDQyZmU5OGMxNWM4OA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2008-03-07T17:45:09Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2008-03-07T17:45:09Z"}, "message": "decl.c (gnat_to_gnu_entity): Issue a warning on suspiciously large alignments specified for types.\n\n\t* decl.c (gnat_to_gnu_entity): Issue a warning on suspiciously\n\tlarge alignments specified for types.\n\t(validate_alignment): Minor cleanup.\n\nFrom-SVN: r133012", "tree": {"sha": "20245462f699d27d1630bd92f987d5d41a828eb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20245462f699d27d1630bd92f987d5d41a828eb4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd5c81e9083eb241aa14a4ff428042fe98c15c88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd5c81e9083eb241aa14a4ff428042fe98c15c88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd5c81e9083eb241aa14a4ff428042fe98c15c88", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd5c81e9083eb241aa14a4ff428042fe98c15c88/comments", "author": null, "committer": null, "parents": [{"sha": "7f42aa36f6956dd769a4c0fdf9f1c0febc8d7831", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f42aa36f6956dd769a4c0fdf9f1c0febc8d7831", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f42aa36f6956dd769a4c0fdf9f1c0febc8d7831"}], "stats": {"total": 113, "additions": 101, "deletions": 12}, "files": [{"sha": "9d92d7b732f5efde269b549ace2a5b5cfb61a8b6", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd5c81e9083eb241aa14a4ff428042fe98c15c88/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd5c81e9083eb241aa14a4ff428042fe98c15c88/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=fd5c81e9083eb241aa14a4ff428042fe98c15c88", "patch": "@@ -1,3 +1,9 @@\n+2008-03-07  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* decl.c (gnat_to_gnu_entity): Issue a warning on suspiciously\n+\tlarge alignments specified for types.\n+\t(validate_alignment): Minor cleanup.\n+\n 2008-03-07  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* decl.c (MAX_FIXED_MODE_SIZE): Define if not already defined."}, {"sha": "48279391b3079c45540460979aacf69336160683", "filename": "gcc/ada/decl.c", "status": "modified", "additions": 46, "deletions": 12, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd5c81e9083eb241aa14a4ff428042fe98c15c88/gcc%2Fada%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd5c81e9083eb241aa14a4ff428042fe98c15c88/gcc%2Fada%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdecl.c?ref=fd5c81e9083eb241aa14a4ff428042fe98c15c88", "patch": "@@ -4086,8 +4086,38 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n       if (align != 0 || TREE_CODE (gnu_type) == UNCONSTRAINED_ARRAY_TYPE)\n \t;\n       else if (Known_Alignment (gnat_entity))\n-\talign = validate_alignment (Alignment (gnat_entity), gnat_entity,\n-\t\t\t\t    TYPE_ALIGN (gnu_type));\n+\t{\n+\t  align = validate_alignment (Alignment (gnat_entity), gnat_entity,\n+\t\t\t\t      TYPE_ALIGN (gnu_type));\n+\n+\t  /* Warn on suspiciously large alignments.  This should catch\n+\t     errors about the (alignment,byte)/(size,bit) discrepancy.  */\n+\t  if (align > BIGGEST_ALIGNMENT && Has_Alignment_Clause (gnat_entity))\n+\t    {\n+\t      tree size;\n+\n+\t      /* If a size was specified, take it into account.  Otherwise\n+\t\t use the RM size for records as the type size has already\n+\t\t been adjusted to the alignment.  */\n+\t      if (gnu_size)\n+\t\tsize = gnu_size;\n+\t      else if ((TREE_CODE (gnu_type) == RECORD_TYPE\n+\t\t\t|| TREE_CODE (gnu_type) == UNION_TYPE\n+\t\t\t|| TREE_CODE (gnu_type) == QUAL_UNION_TYPE)\n+\t\t       && !TYPE_IS_FAT_POINTER_P (gnu_type))\n+\t\tsize = rm_size (gnu_type);\n+\t      else\n+\t        size = TYPE_SIZE (gnu_type);\n+\n+\t      /* Consider an alignment as suspicious if the alignment/size\n+\t\t ratio is greater or equal to the byte/bit ratio.  */\n+\t      if (host_integerp (size, 1)\n+\t\t  && align >= TREE_INT_CST_LOW (size) * BITS_PER_UNIT)\n+\t\tpost_error_ne (\"?suspiciously large alignment specified for&\",\n+\t\t\t       Expression (Alignment_Clause (gnat_entity)),\n+\t\t\t       gnat_entity);\n+\t    }\n+\t}\n       else if (Is_Atomic (gnat_entity) && !gnu_size\n \t       && host_integerp (TYPE_SIZE (gnu_type), 1)\n \t       && integer_pow2p (TYPE_SIZE (gnu_type)))\n@@ -6904,25 +6934,25 @@ make_type_from_size (tree type, tree size_tree, bool biased_p)\n static unsigned int\n validate_alignment (Uint alignment, Entity_Id gnat_entity, unsigned int align)\n {\n-  Node_Id gnat_error_node = gnat_entity;\n-  unsigned int new_align;\n-\n   unsigned int max_allowed_alignment = get_target_maximum_allowed_alignment ();\n-\n-  if (Present (Alignment_Clause (gnat_entity)))\n-    gnat_error_node = Expression (Alignment_Clause (gnat_entity));\n+  unsigned int new_align;\n+  Node_Id gnat_error_node;\n \n   /* Don't worry about checking alignment if alignment was not specified\n      by the source program and we already posted an error for this entity.  */\n-\n   if (Error_Posted (gnat_entity) && !Has_Alignment_Clause (gnat_entity))\n     return align;\n \n+  /* Post the error on the alignment clause if any.  */\n+  if (Present (Alignment_Clause (gnat_entity)))\n+    gnat_error_node = Expression (Alignment_Clause (gnat_entity));\n+  else\n+    gnat_error_node = gnat_entity;\n+\n   /* Within GCC, an alignment is an integer, so we must make sure a value is\n      specified that fits in that range.  Also, there is an upper bound to\n      alignments we can support/allow.  */\n-\n-  if (! UI_Is_In_Int_Range (alignment)\n+  if (!UI_Is_In_Int_Range (alignment)\n       || ((new_align = UI_To_Int (alignment)) > max_allowed_alignment))\n     post_error_ne_num (\"largest supported alignment for& is ^\",\n \t\t       gnat_error_node, gnat_entity, max_allowed_alignment);\n@@ -6933,7 +6963,11 @@ validate_alignment (Uint alignment, Entity_Id gnat_entity, unsigned int align)\n \t\t       gnat_error_node, gnat_entity,\n \t\t       align / BITS_PER_UNIT);\n   else\n-    align = MAX (align, new_align == 0 ? 1 : new_align * BITS_PER_UNIT);\n+    {\n+      new_align = (new_align > 0 ? new_align * BITS_PER_UNIT : 1);\n+      if (new_align > align)\n+\talign = new_align;\n+    }\n \n   return align;\n }"}, {"sha": "5a6735d7df436f0ff2fd14448a5917a3c00800e1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd5c81e9083eb241aa14a4ff428042fe98c15c88/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd5c81e9083eb241aa14a4ff428042fe98c15c88/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fd5c81e9083eb241aa14a4ff428042fe98c15c88", "patch": "@@ -1,3 +1,7 @@\n+2008-03-07  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/specs/alignment2.ads: New test.\n+\n 2008-03-07  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/pack3.adb: New test."}, {"sha": "1b92000d2d36ec8925f4fdcfffa36f12df897dd8", "filename": "gcc/testsuite/gnat.dg/specs/alignment2.ads", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd5c81e9083eb241aa14a4ff428042fe98c15c88/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Falignment2.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd5c81e9083eb241aa14a4ff428042fe98c15c88/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Falignment2.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Falignment2.ads?ref=fd5c81e9083eb241aa14a4ff428042fe98c15c88", "patch": "@@ -0,0 +1,45 @@\n+with Interfaces; use Interfaces;\n+\n+package Alignment2 is\n+\n+  -- warning\n+  type R1 is record\n+    A, B, C, D : Integer_8;\n+  end record;\n+  for R1'Size use 32;\n+  for R1'Alignment use 32; -- { dg-warning \"suspiciously large alignment\" }\n+\n+  -- warning\n+  type R2 is record\n+    A, B, C, D : Integer_8;\n+  end record;\n+  for R2'Alignment use 32; -- { dg-warning \"suspiciously large alignment\" }\n+\n+  -- OK, big size\n+  type R3 is record\n+    A, B, C, D : Integer_8;\n+  end record;\n+  for R3'Size use 32 * 8;\n+  for R3'Alignment use 32;\n+\n+  -- OK, big size\n+  type R4 is record\n+    A, B, C, D, E, F, G, H : Integer_32;\n+  end record;\n+  for R4'Alignment use 32;\n+\n+  -- warning\n+  type I1 is new Integer_32;\n+  for I1'Size use 32;\n+  for I1'Alignment use 32; -- { dg-warning \"suspiciously large alignment\" }\n+\n+  -- warning\n+  type I2 is new Integer_32;\n+  for I2'Alignment use 32; -- { dg-warning \"suspiciously large alignment\" }\n+\n+  -- OK, big size\n+  type I3 is new Integer_32;\n+  for I3'Size use 32 * 8;\n+  for I3'Alignment use 32;\n+\n+end Alignment2;"}]}