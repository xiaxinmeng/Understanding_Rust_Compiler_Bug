{"sha": "b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZkM2NiMzdlZjY3NmMyNDM5ZmRmOTQ5OGU0ZGJlODA0MmZiM2M2YQ==", "commit": {"author": {"name": "Thomas Fitzsimmons", "email": "fitzsim@redhat.com", "date": "2004-02-03T17:10:56Z"}, "committer": {"name": "Thomas Fitzsimmons", "email": "fitzsim@gcc.gnu.org", "date": "2004-02-03T17:10:56Z"}, "message": "GtkListPeer.java, [...]: Fix handling of alias methods...\n\n2004-02-03  Thomas Fitzsimmons  <fitzsim@redhat.com>\n\n\t* gnu/java/awt/peer/gtk/GtkListPeer.java,\n\tjava/awt/BorderLayout.java, java/awt/CardLayout.java,\n\tjava/awt/CheckboxGroup.java, java/awt/Choice.java,\n\tjava/awt/Component.java, java/awt/Container.java,\n\tjava/awt/FontMetrics.java, java/awt/GridBagLayout.java,\n\tjava/awt/LayoutManager2.java, java/awt/List.java,\n\tjava/awt/Menu.java, java/awt/MenuBar.java,\n\tjava/awt/MenuItem.java, java/awt/Polygon.java,\n\tjava/awt/Rectangle.java, java/awt/ScrollPane.java,\n\tjava/awt/Scrollbar.java, java/awt/TextArea.java,\n\tjava/awt/TextField.java,\n\tjava/awt/image/renderable/RenderContext.java,\n\tjavax/swing/JApplet.java: Fix handling of alias methods, where a\n\tmethod has been deprecated in favour of a new one with the same\n\tfuntion but a different name.  Put the method implementation in\n\tthe deprecated method and have the new method call the\n\tdeprecated one.  Make all other code call the new method.\n\nFrom-SVN: r77178", "tree": {"sha": "69b793f3808108f9a710a0f4875efb2e7eea8892", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/69b793f3808108f9a710a0f4875efb2e7eea8892"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a/comments", "author": null, "committer": null, "parents": [{"sha": "5a98fa7bdb847dc92fdbeddf4dfcff51835aca48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a98fa7bdb847dc92fdbeddf4dfcff51835aca48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a98fa7bdb847dc92fdbeddf4dfcff51835aca48"}], "stats": {"total": 1411, "additions": 713, "deletions": 698}, "files": [{"sha": "69ea3321ec6ec6ef66727b1940cb9101222cc3a6", "filename": "libjava/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a", "patch": "@@ -1,3 +1,23 @@\n+2004-02-03  Thomas Fitzsimmons  <fitzsim@redhat.com>\n+\n+\t* gnu/java/awt/peer/gtk/GtkListPeer.java,\n+\tjava/awt/BorderLayout.java, java/awt/CardLayout.java,\n+\tjava/awt/CheckboxGroup.java, java/awt/Choice.java,\n+\tjava/awt/Component.java, java/awt/Container.java,\n+\tjava/awt/FontMetrics.java, java/awt/GridBagLayout.java,\n+\tjava/awt/LayoutManager2.java, java/awt/List.java,\n+\tjava/awt/Menu.java, java/awt/MenuBar.java,\n+\tjava/awt/MenuItem.java, java/awt/Polygon.java,\n+\tjava/awt/Rectangle.java, java/awt/ScrollPane.java,\n+\tjava/awt/Scrollbar.java, java/awt/TextArea.java,\n+\tjava/awt/TextField.java,\n+\tjava/awt/image/renderable/RenderContext.java,\n+\tjavax/swing/JApplet.java: Fix handling of alias methods, where a\n+\tmethod has been deprecated in favour of a new one with the same\n+\tfuntion but a different name.  Put the method implementation in\n+\tthe deprecated method and have the new method call the\n+\tdeprecated one.  Make all other code call the new method.\n+\n 2004-02-03  Mohan Embar  <gnustuff@thisiscool.com>\n \n \t* gnu/java/nio/DatagramChannelImpl.java"}, {"sha": "7517c64655f76a48644c799108d46d2c1a2df47b", "filename": "libjava/gnu/java/awt/peer/gtk/GtkListPeer.java", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkListPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkListPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkListPeer.java?ref=b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a", "patch": "@@ -85,31 +85,31 @@ public void clear ()\n   \n   public Dimension getMinimumSize (int rows)\n   {\n-    int dims[] = new int[2];\n-\n-    getSize (rows, dims);\n-    return (new Dimension (dims[0], dims[1]));\n+    return minimumSize (rows);\n   }\n \n   public Dimension getPreferredSize (int rows)\n   {\n-    int dims[] = new int[2];\n-\n-    getSize (rows, dims);\n-    return (new Dimension (dims[0], dims[1]));\n+    return preferredSize (rows);\n   }\n   \n   public native int[] getSelectedIndexes ();\n   public native void makeVisible (int index);\n \n   public Dimension minimumSize (int rows)\n   {\n-    return (getMinimumSize (rows));\n+    int dims[] = new int[2];\n+\n+    getSize (rows, dims);\n+    return new Dimension (dims[0], dims[1]);\n   }\n \n   public Dimension preferredSize (int rows)\n   {\n-    return (getPreferredSize (rows));\n+    int dims[] = new int[2];\n+\n+    getSize (rows, dims);\n+    return new Dimension (dims[0], dims[1]);\n   }\n \n   public void removeAll ()"}, {"sha": "5033bcf7ab29a1fe37043c37910bda2f9188c365", "filename": "libjava/java/awt/BorderLayout.java", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a/libjava%2Fjava%2Fawt%2FBorderLayout.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a/libjava%2Fjava%2Fawt%2FBorderLayout.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FBorderLayout.java?ref=b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a", "patch": "@@ -349,7 +349,28 @@ public class BorderLayout implements LayoutManager2, java.io.Serializable\n   if (constraints != null && ! (constraints instanceof String))\n     throw new IllegalArgumentException(\"Constraint must be a string\");\n \n-  String str = (String)constraints;\n+  addLayoutComponent((String) constraints, component);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Adds a component to the layout in the specified constraint position, \n+  * which must be one of the string constants defined in this class.\n+  *\n+  * @param constraints The constraint string.\n+  * @param component The component to add.\n+  *\n+  * @exception IllegalArgumentException If the constraint object is not\n+  * one of the specified constants in this class.\n+  *\n+  * @deprecated This method is deprecated in favor of\n+  * <code>addLayoutComponent(Component, Object)</code>.\n+  */\n+public void\n+addLayoutComponent(String constraints, Component component)\n+{\n+  String str = constraints;\n \n   if (str == null || str.equals(CENTER))\n     center = component;\n@@ -375,27 +396,6 @@ else if (str.equals(AFTER_LINE_ENDS))\n \n /*************************************************************************/\n \n-/**\n-  * Adds a component to the layout in the specified constraint position, \n-  * which must be one of the string constants defined in this class.\n-  *\n-  * @param constraints The constraint string.\n-  * @param component The component to add.\n-  *\n-  * @exception IllegalArgumentException If the constraint object is not\n-  * one of the specified constants in this class.\n-  *\n-  * @deprecated This method is deprecated in favor of\n-  * <code>addLayoutComponent(Component, Object)</code>.\n-  */\n-public void\n-addLayoutComponent(String constraints, Component component)\n-{\n-  addLayoutComponent(component, constraints);\n-}\n-\n-/*************************************************************************/\n-\n /**\n   * Removes the specified component from the layout.\n   *"}, {"sha": "c3c9f5381d55b282bece1e2ed757745143d41b4b", "filename": "libjava/java/awt/CardLayout.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a/libjava%2Fjava%2Fawt%2FCardLayout.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a/libjava%2Fjava%2Fawt%2FCardLayout.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FCardLayout.java?ref=b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a", "patch": "@@ -90,7 +90,7 @@ public void addLayoutComponent (Component comp, Object constraints)\n     if (! (constraints instanceof String))\n       throw new IllegalArgumentException (\"Object \" + constraints\n \t\t\t\t\t  + \" is not a string\");\n-    tab.put (constraints, comp);\n+    addLayoutComponent ((String) constraints, comp);\n   }\n \n   /** Add a new component to the layout.  The name can be used later\n@@ -102,7 +102,7 @@ public void addLayoutComponent (Component comp, Object constraints)\n    */\n   public void addLayoutComponent (String name, Component comp)\n   {\n-    addLayoutComponent (comp, name);\n+    tab.put (name, comp);\n   }\n \n   /** Cause the first component in the container to be displayed."}, {"sha": "52af1903a9c3455a271f00b5fab4936050a3d0c3", "filename": "libjava/java/awt/CheckboxGroup.java", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a/libjava%2Fjava%2Fawt%2FCheckboxGroup.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a/libjava%2Fjava%2Fawt%2FCheckboxGroup.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FCheckboxGroup.java?ref=b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a", "patch": "@@ -95,8 +95,8 @@ public class CheckboxGroup implements java.io.Serializable\n public Checkbox\n getSelectedCheckbox()\n {\n-  return(selectedCheckbox);\n-} \n+  return getCurrent ();\n+}\n \n /*************************************************************************/\n \n@@ -126,17 +126,7 @@ public class CheckboxGroup implements java.io.Serializable\n public void\n setSelectedCheckbox(Checkbox selectedCheckbox)\n {\n-  if (this.selectedCheckbox != null)\n-    {\n-      if (this.selectedCheckbox.getCheckboxGroup() != this)\n-        return;\n-\n-      this.selectedCheckbox.setState(false);\n-    }\n-\n-  this.selectedCheckbox = selectedCheckbox;\n-  if (selectedCheckbox != null)\n-    selectedCheckbox.setState(true);\n+  setCurrent (selectedCheckbox);\n }\n \n /*************************************************************************/\n@@ -153,7 +143,17 @@ public class CheckboxGroup implements java.io.Serializable\n public void\n setCurrent(Checkbox selectedCheckbox)\n {\n-  setSelectedCheckbox(selectedCheckbox);\n+  if (this.selectedCheckbox != null)\n+    {\n+      if (this.selectedCheckbox.getCheckboxGroup() != this)\n+        return;\n+\n+      this.selectedCheckbox.setState(false);\n+    }\n+\n+  this.selectedCheckbox = selectedCheckbox;\n+  if (selectedCheckbox != null)\n+    selectedCheckbox.setState(true);\n }\n \n /*************************************************************************/"}, {"sha": "b2b597ed06fce7d66f550a46a9934c9c05525abe", "filename": "libjava/java/awt/Choice.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a/libjava%2Fjava%2Fawt%2FChoice.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a/libjava%2Fjava%2Fawt%2FChoice.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FChoice.java?ref=b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a", "patch": "@@ -111,7 +111,7 @@ public Choice()\n public int\n getItemCount()\n {\n-  return(pItems.size());\n+  return countItems ();\n }\n \n /*************************************************************************/"}, {"sha": "f2fcef59b1942ba8e8e03af2820c68ca36494008", "filename": "libjava/java/awt/Component.java", "status": "modified", "additions": 62, "deletions": 56, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a/libjava%2Fjava%2Fawt%2FComponent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a/libjava%2Fjava%2Fawt%2FComponent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FComponent.java?ref=b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a", "patch": "@@ -779,9 +779,7 @@ public boolean isEnabled()\n    */\n   public void setEnabled(boolean b)\n   {\n-    this.enabled = b;\n-    if (peer != null)\n-      peer.setEnabled(b);\n+    enable (b);\n   }\n \n   /**\n@@ -791,7 +789,9 @@ public void setEnabled(boolean b)\n    */\n   public void enable()\n   {\n-    setEnabled(true);\n+    this.enabled = true;\n+    if (peer != null)\n+      peer.setEnabled (true);\n   }\n \n   /**\n@@ -802,7 +802,10 @@ public void enable()\n    */\n   public void enable(boolean b)\n   {\n-    setEnabled(b);\n+    if (b)\n+      enable ();\n+    else\n+      disable ();\n   }\n \n   /**\n@@ -812,7 +815,9 @@ public void enable(boolean b)\n    */\n   public void disable()\n   {\n-    setEnabled(false);\n+    this.enabled = false;\n+    if (peer != null)\n+      peer.setEnabled (false);\n   }\n \n   /**\n@@ -856,10 +861,7 @@ public void setVisible(boolean b)\n     // Inspection by subclassing shows that Sun's implementation calls\n     // show(boolean) which then calls show() or hide(). It is the show()\n     // method that is overriden in subclasses like Window.\n-    if (b)\n-      show();\n-    else\n-      hide();\n+    show (b);\n   }\n \n   /**\n@@ -887,7 +889,10 @@ public void show()\n    */\n   public void show(boolean b)\n   {\n-    setVisible(b);\n+    if (b)\n+      show ();\n+    else\n+      hide ();\n   }\n \n   /**\n@@ -1083,7 +1088,7 @@ public ColorModel getColorModel()\n    */\n   public Point getLocation()\n   {\n-    return new Point(x, y);\n+    return location ();\n   }\n \n   /**\n@@ -1110,7 +1115,7 @@ public Point getLocationOnScreen()\n    */\n   public Point location()\n   {\n-    return getLocation();\n+    return new Point (x, y);\n   }\n \n   /**\n@@ -1125,13 +1130,7 @@ public Point location()\n    */\n   public void setLocation(int x, int y)\n   {\n-    if (this.x == x && this.y == y)\n-      return;\n-    invalidate();\n-    this.x = x;\n-    this.y = y;\n-    if (peer != null)\n-      peer.setBounds(x, y, width, height);\n+    move (x, y);\n   }\n \n   /**\n@@ -1145,7 +1144,13 @@ public void setLocation(int x, int y)\n    */\n   public void move(int x, int y)\n   {\n-    setLocation(x, y);\n+    if (this.x == x && this.y == y)\n+      return;\n+    invalidate ();\n+    this.x = x;\n+    this.y = y;\n+    if (peer != null)\n+      peer.setBounds (x, y, width, height);\n   }\n \n   /**\n@@ -1173,7 +1178,7 @@ public void setLocation(Point p)\n    */\n   public Dimension getSize()\n   {\n-    return new Dimension(width, height);\n+    return size ();\n   }\n \n   /**\n@@ -1184,7 +1189,7 @@ public Dimension getSize()\n    */\n   public Dimension size()\n   {\n-    return getSize();\n+    return new Dimension (width, height);\n   }\n \n   /**\n@@ -1197,13 +1202,7 @@ public Dimension size()\n    */\n   public void setSize(int width, int height)\n   {\n-    if (this.width == width && this.height == height)\n-      return;\n-    invalidate();\n-    this.width = width;\n-    this.height = height;\n-    if (peer != null)\n-      peer.setBounds(x, y, width, height);\n+    resize (width, height);\n   }\n \n   /**\n@@ -1215,7 +1214,13 @@ public void setSize(int width, int height)\n    */\n   public void resize(int width, int height)\n   {\n-    setSize(width, height);\n+    if (this.width == width && this.height == height)\n+      return;\n+    invalidate ();\n+    this.width = width;\n+    this.height = height;\n+    if (peer != null)\n+      peer.setBounds (x, y, width, height);\n   }\n \n   /**\n@@ -1229,7 +1234,7 @@ public void resize(int width, int height)\n    */\n   public void setSize(Dimension d)\n   {\n-    setSize(d.width, d.height);\n+    resize (d);\n   }\n \n   /**\n@@ -1241,7 +1246,7 @@ public void setSize(Dimension d)\n    */\n   public void resize(Dimension d)\n   {\n-    setSize(d.width, d.height);\n+    resize (d.width, d.height);\n   }\n \n   /**\n@@ -1256,7 +1261,7 @@ public void resize(Dimension d)\n    */\n   public Rectangle getBounds()\n   {\n-    return new Rectangle(x, y, width, height);\n+    return bounds ();\n   }\n \n   /**\n@@ -1269,7 +1274,7 @@ public Rectangle getBounds()\n    */\n   public Rectangle bounds()\n   {\n-    return getBounds();\n+    return new Rectangle (x, y, width, height);\n   }\n \n   /**\n@@ -1289,15 +1294,7 @@ public Rectangle bounds()\n    */\n   public void setBounds(int x, int y, int w, int h)\n   {\n-    if (this.x == x && this.y == y && width == w && height == h)\n-      return;\n-    invalidate();\n-    this.x = x;\n-    this.y = y;\n-    width = w;\n-    height = h;\n-    if (peer != null)\n-      peer.setBounds(x, y, w, h);\n+    reshape (x, y, w, h);\n   }\n \n   /**\n@@ -1306,13 +1303,22 @@ public void setBounds(int x, int y, int w, int h)\n    *\n    * @param x the X coordinate of the upper left corner of the rectangle\n    * @param y the Y coordinate of the upper left corner of the rectangle\n-   * @param w the width of the rectangle\n-   * @param h the height of the rectangle\n+   * @param width the width of the rectangle\n+   * @param height the height of the rectangle\n    * @deprecated use {@link #setBounds(int, int, int, int)} instead\n    */\n   public void reshape(int x, int y, int width, int height)\n   {\n-    setBounds(x, y, width, height);\n+    if (this.x == x && this.y == y\n+        && this.width == width && this.height == height)\n+      return;\n+    invalidate ();\n+    this.x = x;\n+    this.y = y;\n+    this.width = width;\n+    this.height = height;\n+    if (peer != null)\n+      peer.setBounds (x, y, width, height);\n   }\n \n   /**\n@@ -1329,7 +1335,7 @@ public void reshape(int x, int y, int width, int height)\n    */\n   public void setBounds(Rectangle r)\n   {\n-    setBounds(r.x, r.y, r.width, r.height);\n+    setBounds (r.x, r.y, r.width, r.height);\n   }\n \n   /**\n@@ -1560,7 +1566,7 @@ public float getAlignmentY()\n    */\n   public void doLayout()\n   {\n-    // nothing to do unless we're a container\n+    layout ();\n   }\n \n   /**\n@@ -1571,7 +1577,7 @@ public void doLayout()\n    */\n   public void layout()\n   {\n-    doLayout();\n+    // Nothing to do unless we're a container.\n   }\n \n   /**\n@@ -2076,7 +2082,7 @@ public boolean getIgnoreRepaint()\n    */\n   public boolean contains(int x, int y)\n   {\n-    return x >= 0 && y >= 0 && x < width && y < height;\n+    return inside (x, y);\n   }\n \n   /**\n@@ -2090,7 +2096,7 @@ public boolean contains(int x, int y)\n    */\n   public boolean inside(int x, int y)\n   {\n-    return contains(x, y);\n+    return x >= 0 && y >= 0 && x < width && y < height;\n   }\n \n   /**\n@@ -2105,7 +2111,7 @@ public boolean inside(int x, int y)\n    */\n   public boolean contains(Point p)\n   {\n-    return contains(p.x, p.y);\n+    return contains (p.x, p.y);\n   }\n \n   /**\n@@ -2120,7 +2126,7 @@ public boolean contains(Point p)\n    */\n   public Component getComponentAt(int x, int y)\n   {\n-    return contains(x, y) ? this : null;\n+    return locate (x, y);\n   }\n \n   /**\n@@ -2135,7 +2141,7 @@ public Component getComponentAt(int x, int y)\n    */\n   public Component locate(int x, int y)\n   {\n-    return getComponentAt(x, y);\n+    return contains (x, y) ? this : null;\n   }\n \n   /**\n@@ -2151,7 +2157,7 @@ public Component locate(int x, int y)\n    */\n   public Component getComponentAt(Point p)\n   {\n-    return getComponentAt(p.x, p.y);\n+    return getComponentAt (p.x, p.y);\n   }\n \n   /**"}, {"sha": "ed869e18eae91c5af00b62ce66b4f08bb319321e", "filename": "libjava/java/awt/Container.java", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a/libjava%2Fjava%2Fawt%2FContainer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a/libjava%2Fjava%2Fawt%2FContainer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FContainer.java?ref=b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a", "patch": "@@ -106,7 +106,7 @@ public Container()\n    */\n   public int getComponentCount()\n   {\n-    return ncomponents;\n+    return countComponents ();\n   }\n \n   /**\n@@ -118,7 +118,7 @@ public int getComponentCount()\n    */\n   public int countComponents()\n   {\n-    return getComponentCount();\n+    return ncomponents;\n   }\n \n   /**\n@@ -186,10 +186,7 @@ protected void swapComponents (int i, int j)\n    */\n   public Insets getInsets()\n   {\n-    if (peer == null)\n-      return new Insets(0, 0, 0, 0);\n-    \n-    return ((ContainerPeer) peer).getInsets();\n+    return insets ();\n   }\n \n   /**\n@@ -201,7 +198,10 @@ public Insets getInsets()\n    */\n   public Insets insets()\n   {\n-    return getInsets();\n+    if (peer == null)\n+      return new Insets (0, 0, 0, 0);\n+\n+    return ((ContainerPeer) peer).getInsets ();\n   }\n \n   /**\n@@ -463,8 +463,7 @@ public void setLayout(LayoutManager mgr)\n    */\n   public void doLayout()\n   {\n-    if (layoutMgr != null)\n-      layoutMgr.layoutContainer(this);\n+    layout ();\n   }\n \n   /**\n@@ -474,7 +473,8 @@ public void doLayout()\n    */\n   public void layout()\n   {\n-    doLayout();\n+    if (layoutMgr != null)\n+      layoutMgr.layoutContainer (this);\n   }\n \n   /**\n@@ -555,7 +555,7 @@ public void setFont(Font f)\n    */\n   public Dimension getPreferredSize()\n   {\n-      return preferredSize();\n+    return preferredSize ();\n   }\n \n   /**\n@@ -567,10 +567,10 @@ public Dimension getPreferredSize()\n    */\n   public Dimension preferredSize()\n   {\n-      if (layoutMgr != null)\n-\t  return layoutMgr.preferredLayoutSize(this);\n-      else\n-\t  return super.preferredSize();\n+    if (layoutMgr != null)\n+      return layoutMgr.preferredLayoutSize (this);\n+    else\n+      return super.preferredSize ();\n   }\n \n   /**\n@@ -580,7 +580,7 @@ public Dimension preferredSize()\n    */\n   public Dimension getMinimumSize()\n   {\n-      return minimumSize();\n+    return minimumSize ();\n   }\n \n   /**\n@@ -592,10 +592,10 @@ public Dimension getMinimumSize()\n    */\n   public Dimension minimumSize()\n   {\n-      if (layoutMgr != null)\n-\t  return layoutMgr.minimumLayoutSize(this);\n-      else\n-\t  return super.minimumSize();\n+    if (layoutMgr != null)\n+      return layoutMgr.minimumLayoutSize (this);\n+    else\n+      return super.minimumSize ();\n   }\n \n   /**\n@@ -833,23 +833,7 @@ public void deliverEvent(Event e)\n    */\n   public Component getComponentAt(int x, int y)\n   {\n-    synchronized (getTreeLock ())\n-      {\n-        if (! contains(x, y))\n-          return null;\n-        for (int i = 0; i < ncomponents; ++i)\n-          {\n-            // Ignore invisible children...\n-            if (!component[i].isVisible())\n-              continue;\n-\n-            int x2 = x - component[i].x;\n-            int y2 = y - component[i].y;\n-            if (component[i].contains(x2, y2))\n-              return component[i];\n-          }\n-        return this;\n-      }\n+    return locate (x, y);\n   }\n \n   /**\n@@ -869,7 +853,23 @@ public Component getComponentAt(int x, int y)\n    */\n   public Component locate(int x, int y)\n   {\n-    return getComponentAt(x, y);\n+    synchronized (getTreeLock ())\n+      {\n+        if (!contains (x, y))\n+          return null;\n+        for (int i = 0; i < ncomponents; ++i)\n+          {\n+            // Ignore invisible children...\n+            if (!component[i].isVisible ())\n+              continue;\n+\n+            int x2 = x - component[i].x;\n+            int y2 = y - component[i].y;\n+            if (component[i].contains (x2, y2))\n+              return component[i];\n+          }\n+        return this;\n+      }\n   }\n \n   /**\n@@ -886,7 +886,7 @@ public Component locate(int x, int y)\n    */\n   public Component getComponentAt(Point p)\n   {\n-    return getComponentAt(p.x, p.y);\n+    return getComponentAt (p.x, p.y);\n   }\n \n   public Component findComponentAt(int x, int y)"}, {"sha": "a7f76e03ae75aaca84ea50251f2a8fbb6f437e6a", "filename": "libjava/java/awt/FontMetrics.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a/libjava%2Fjava%2Fawt%2FFontMetrics.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a/libjava%2Fjava%2Fawt%2FFontMetrics.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FFontMetrics.java?ref=b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a", "patch": "@@ -195,7 +195,7 @@ public abstract class FontMetrics implements java.io.Serializable\n public int\n getMaxDescent()\n {\n-  return(getDescent());\n+  return getMaxDecent ();\n }\n \n /*************************************************************************/\n@@ -212,7 +212,7 @@ public abstract class FontMetrics implements java.io.Serializable\n public int\n getMaxDecent()\n {\n-  return(getMaxDescent());\n+  return getDescent ();\n }\n \n /*************************************************************************/"}, {"sha": "2cf8daa6b181540a85a2c732011a691ae1bc5070", "filename": "libjava/java/awt/GridBagLayout.java", "status": "modified", "additions": 277, "deletions": 278, "changes": 555, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a/libjava%2Fjava%2Fawt%2FGridBagLayout.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a/libjava%2Fjava%2Fawt%2FGridBagLayout.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FGridBagLayout.java?ref=b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a", "patch": "@@ -149,7 +149,7 @@ public Dimension maximumLayoutSize (Container target)\n \n     public void layoutContainer (Container parent)\n     {\n-\tarrangeGrid (parent);\n+      arrangeGrid (parent);\n     }\n \n     public float getLayoutAlignmentX (Container target)\n@@ -302,45 +302,307 @@ public Point location (int x, int y)\n      */\n     protected void AdjustForGravity (GridBagConstraints gbc, Rectangle rect)\n     {\n-\tadjustForGravity (gbc, rect);\n+      // FIXME\n+      throw new Error (\"Not implemented\");\n     }\n \n     /**\n      * Obsolete.\n      */\n     protected void ArrangeGrid (Container parent)\n     {\n-\tarrangeGrid (parent);\n+      Component[] components = parent.getComponents();\n+\n+      if (components.length == 0)\n+        return;\n+\n+      GridBagLayoutInfo info = getLayoutInfo (parent, PREFERREDSIZE);\n+      if (info.cols == 0 && info.rows == 0)\n+        return;\n+      layoutInfo = info;\n+\n+      // DEBUG\n+      //dumpLayoutInfo (layoutInfo);\n+    \n+      for(int i = 0; i < components.length; i++)\n+\t{\n+          Component component = components [i];\n+\t\t\n+          // If component is not visible we dont have to care about it.\n+          if (!component.isVisible())\n+            continue;\n+\t\t\n+          GridBagConstraints constraints = lookupConstraints (component);\n+\n+          int cellx = sumIntArray(layoutInfo.colWidths, constraints.gridx);\n+          int celly = sumIntArray(layoutInfo.rowHeights, constraints.gridy);\n+          int cellw = sumIntArray(layoutInfo.colWidths,\n+                                  constraints.gridx + constraints.gridwidth) - cellx;\n+          int cellh = sumIntArray(layoutInfo.rowHeights,\n+                                  constraints.gridy + constraints.gridheight) - celly;\n+\n+          Insets insets = constraints.insets;\n+          if (insets != null)\n+\t    {\n+              cellx += insets.left;\n+              celly += insets.top;\n+              cellw -= insets.left + insets.right;\n+              cellh -= insets.top + insets.bottom;\n+\t    }\n+\n+          Dimension dim = component.getPreferredSize();\n+\n+          // Note: Documentation says that padding is added on both sides, but\n+          // visual inspection shows that the Sun implementation only adds it\n+          // once, so we do the same.\n+          dim.width += constraints.ipadx;\n+          dim.height += constraints.ipady;\n+\n+          switch(constraints.fill)\n+\t    {\n+            case GridBagConstraints.HORIZONTAL:\n+              dim.width = cellw;\n+              break;\n+            case GridBagConstraints.VERTICAL:\n+              dim.height = cellh;\n+              break;\n+            case GridBagConstraints.BOTH:\n+              dim.width = cellw;\n+              dim.height = cellh;\n+              break;\n+\t    }\n+\n+          int x;\n+          int y;\n+\n+          switch(constraints.anchor)\n+\t    {\n+            case GridBagConstraints.NORTH:\n+              x = cellx + (cellw - dim.width) / 2;\n+              y = celly;\n+              break;\n+            case GridBagConstraints.SOUTH:\n+              x = cellx + (cellw - dim.width) / 2;\n+              y = celly + cellh - dim.height;\n+              break;\n+            case GridBagConstraints.WEST:\n+              x = cellx;\n+              y = celly + (cellh - dim.height) / 2;\n+              break;\n+            case GridBagConstraints.EAST:\n+              x = cellx + cellw - dim.width;\n+              y = celly + (cellh - dim.height) / 2;\n+              break;\n+            case GridBagConstraints.NORTHEAST:\n+              x = cellx + cellw - dim.width;\n+              y = celly;\n+              break;\n+            case GridBagConstraints.NORTHWEST:\n+              x = cellx;\n+              y = celly;\n+              break;\n+            case GridBagConstraints.SOUTHEAST:\n+              x = cellx + cellw - dim.width;\n+              y = celly + cellh - dim.height;\n+              break;\n+            case GridBagConstraints.SOUTHWEST:\n+              x = cellx;\n+              y = celly + cellh - dim.height;\n+              break;\n+            default:\n+              x = cellx + (cellw - dim.width) / 2;\n+              y = celly + (cellh - dim.height) / 2;\n+              break;\n+\t    }\n+\n+          component.setBounds(layoutInfo.pos_x + x, layoutInfo.pos_y + y, dim.width, dim.height);\n+\t}\n+\n+      // DEBUG\n+      //dumpLayoutInfo (layoutInfo);\n     }\n \n     /**\n      * Obsolete.\n      */\n     protected GridBagLayoutInfo GetLayoutInfo (Container parent, int sizeflag)\n     {\n-\treturn getLayoutInfo (parent, sizeflag);\n+      if (sizeflag != MINSIZE && sizeflag != PREFERREDSIZE)\n+        throw new IllegalArgumentException();\n+\n+      Dimension parentDim = parent.getSize ();\n+      Insets parentInsets = parent.getInsets ();\n+      parentDim.width -= parentInsets.left + parentInsets.right;\n+      parentDim.height -= parentInsets.top + parentInsets.bottom;\n+   \n+      int x = 0;\n+      int y = 0;\n+      int max_x = 0;\n+      int max_y = 0;\n+\n+      // first we figure out how many rows/columns\n+      Component[] components = parent.getComponents();\n+      for (int i = 0; i < components.length; i++)\n+\t{\n+          Component component = components [i];\n+\t\t\n+          // If component is not visible we dont have to care about it.\n+          if (!component.isVisible())\n+            continue;\n+\t\t\n+          GridBagConstraints constraints = lookupConstraints (component);\n+\t\t\n+          if(constraints.gridx == GridBagConstraints.RELATIVE)\n+            constraints.gridx = x;\n+\n+          if(constraints.gridy == GridBagConstraints.RELATIVE)\n+            constraints.gridy = y;\n+\t\t\n+          max_x = Math.max(max_x, \n+                           constraints.gridx + Math.max(1, constraints.gridwidth));\n+          max_y = Math.max(max_y,\n+                           constraints.gridy + Math.max(1, constraints.gridheight));\n+\n+          if(constraints.gridwidth == GridBagConstraints.REMAINDER)\n+\t    {\n+              x = 0;\n+              y++;\n+\t    }\n+          else\n+\t    {\n+              x = constraints.gridx + Math.max(1, constraints.gridwidth);\n+              y = constraints.gridy;\n+\t    }\n+\t}\n+\t\n+      GridBagLayoutInfo info = new GridBagLayoutInfo(max_x, max_y);\n+\n+      for (x = 0; x <= max_x; x++)\n+\t{\n+          if(columnWidths != null && columnWidths.length > x)\n+\t    {\n+              info.colWidths[x] = columnWidths[x];\n+\t    }\n+          if(columnWeights != null && columnWeights.length > x)\n+\t    {\n+              info.colWeights[x] = columnWeights[x];\n+\t    }\n+          for (int i = 0; i < components.length; i++)\n+\t    {\n+              Component component = components [i];\n+\t\t\t\n+              // If component is not visible we dont have to care about it.\n+              if (!component.isVisible())\n+                continue;\n+\t\t\t\n+              GridBagConstraints constraints = lookupConstraints (component);\n+\n+              // first we fix up any REMAINDER cells\n+              if(constraints.gridwidth == GridBagConstraints.REMAINDER)\n+\t\t{\n+                  constraints.gridwidth = max_x - constraints.gridx;\n+\t\t}\n+              if(constraints.gridheight == GridBagConstraints.REMAINDER)\n+\t\t{\n+                  constraints.gridheight = max_y - constraints.gridy;\n+\t\t}\n+\n+              if(constraints.gridx + constraints.gridwidth - 1 == x)\n+\t\t{\n+                  int width = (sizeflag == PREFERREDSIZE) ?\n+                    component.getPreferredSize().width :\n+                    component.getMinimumSize().width;\n+                  if(constraints.insets != null)\n+\t\t    {\n+                      width += constraints.insets.left + constraints.insets.right;\n+\t\t    }\n+                  width += constraints.ipadx;\n+                  for(int w = 1; w < constraints.gridwidth; w++)\n+\t\t    {\n+                      width -= info.colWidths[x - w];\n+\t\t    }\n+                  info.colWidths[x] = Math.max(info.colWidths[x], width);\n+                  info.colWeights[x] =\n+                    Math.max(info.colWeights[x], constraints.weightx);\n+\t\t}\n+\t    }\n+\t}\n+\n+      for (y = 0; y <= max_y; y++)\n+\t{\n+          if(rowHeights != null && rowHeights.length > y)\n+\t    {\n+              info.rowHeights[y] = rowHeights[y];\n+\t    }\n+          if(rowWeights != null && rowWeights.length > y)\n+\t    {\n+              info.rowWeights[y] = rowWeights[y];\n+\t    }\n+          for (int i = 0; i < components.length; i++)\n+\t    {\n+              Component component = components [i];\n+\t\t\t\n+              // If component is not visible we dont have to care about it.\n+              if (!component.isVisible())\n+                continue;\n+\t\t\t\n+              GridBagConstraints constraints = lookupConstraints (component);\n+\n+              if(constraints.gridy + constraints.gridheight - 1 == y)\n+\t\t{\n+                  int height = (sizeflag == PREFERREDSIZE) ?\n+                    component.getPreferredSize().height :\n+                    component.getMinimumSize().height;\n+                  if(constraints.insets != null)\n+\t\t    {\n+                      height += constraints.insets.top + constraints.insets.bottom;\n+\t\t    } \n+                  height += constraints.ipady;\n+                  for(int h = 1; h < constraints.gridheight; h++)\n+\t\t    {\n+                      height -= info.rowHeights[y - h];\n+\t\t    }\n+                  info.rowHeights[y] = Math.max(info.rowHeights[y], height);\n+                  info.rowWeights[y] =\n+                    Math.max(info.rowWeights[y], constraints.weighty);\n+\t\t}\n+\t    }\n+\t}\n+\n+      calcCellSizes (info.colWidths, info.colWeights, parentDim.width);\n+      calcCellSizes (info.rowHeights, info.rowWeights, parentDim.height);\n+\n+      int totalWidth = sumIntArray(info.colWidths);\n+      int totalHeight = sumIntArray(info.rowHeights);\n+      info.pos_x = parentInsets.left + (parentDim.width - totalWidth) / 2;\n+      info.pos_y = parentInsets.top + (parentDim.height - totalHeight) / 2;\n+\n+      // DEBUG\n+      //dumpLayoutInfo (info);\n+\n+      return info;\n     }\n \n     /**\n      * Obsolete.\n      */\n     protected Dimension GetMinSize (Container parent, GridBagLayoutInfo info)\n     {\n-\treturn getMinSize (parent, info);\n+      if (parent == null || info == null)\n+        return new Dimension (0, 0);\n+\n+      Insets insets = parent.getInsets();\n+      int width = sumIntArray (info.colWidths) + insets.left + insets.right;\n+      int height = sumIntArray (info.rowHeights) + insets.top + insets.bottom;\n+      return new Dimension (width, height);\n     }\n \n     /**\n      * @since 1.4\n      */\n     protected Dimension getMinSize (Container parent, GridBagLayoutInfo info)\n     {\n-\tif (parent == null || info == null)\n-\t    return new Dimension (0, 0);\n-\n-\tInsets insets = parent.getInsets();\n-\tint width = sumIntArray (info.colWidths) + insets.left + insets.right;\n-\tint height = sumIntArray (info.rowHeights) + insets.top + insets.bottom;\n-\treturn new Dimension (width, height);\n+      return GetMinSize (parent, info);\n     }\n \n     private void calcCellSizes (int[] sizes, double[] weights, int range)\n@@ -404,285 +666,22 @@ private void dumpArray(double[] array)\n      */\n     protected void arrangeGrid (Container parent)\n     {\n-\tComponent[] components = parent.getComponents();\n-\n-\tif (components.length == 0)\n-\t    return;\n-\n-\tGridBagLayoutInfo info = getLayoutInfo (parent, PREFERREDSIZE);\n-\tif (info.cols == 0 && info.rows == 0)\n-\t    return;\n-\tlayoutInfo = info;\n-\n-\t// DEBUG\n-\t//dumpLayoutInfo (layoutInfo);\n-    \n-\tfor(int i = 0; i < components.length; i++)\n-\t{\n-\t    Component component = components [i];\n-\t\t\n-\t    // If component is not visible we dont have to care about it.\n-\t    if (!component.isVisible())\n-\t\tcontinue;\n-\t\t\n-\t    GridBagConstraints constraints = lookupConstraints (component);\n-\n-\t    int cellx = sumIntArray(layoutInfo.colWidths, constraints.gridx);\n-\t    int celly = sumIntArray(layoutInfo.rowHeights, constraints.gridy);\n-\t    int cellw = sumIntArray(layoutInfo.colWidths,\n-\t\tconstraints.gridx + constraints.gridwidth) - cellx;\n-\t    int cellh = sumIntArray(layoutInfo.rowHeights,\n-\t\tconstraints.gridy + constraints.gridheight) - celly;\n-\n-\t    Insets insets = constraints.insets;\n-\t    if (insets != null)\n-\t    {\n-\t\tcellx += insets.left;\n-\t\tcelly += insets.top;\n-\t\tcellw -= insets.left + insets.right;\n-\t\tcellh -= insets.top + insets.bottom;\n-\t    }\n-\n-\t    Dimension dim = component.preferredSize();\n-\n-\t    // Note: Documentation says that padding is added on both sides, but\n-\t    // visual inspection shows that the Sun implementation only adds it\n-\t    // once, so we do the same.\n-\t    dim.width += constraints.ipadx;\n-\t    dim.height += constraints.ipady;\n-\n-\t    switch(constraints.fill)\n-\t    {\n-\t\tcase GridBagConstraints.HORIZONTAL:\n-\t\t    dim.width = cellw;\n-\t\t    break;\n-\t\tcase GridBagConstraints.VERTICAL:\n-\t\t    dim.height = cellh;\n-\t\t    break;\n-\t\tcase GridBagConstraints.BOTH:\n-\t\t    dim.width = cellw;\n-\t\t    dim.height = cellh;\n-\t\t    break;\n-\t    }\n-\n-\t    int x;\n-\t    int y;\n-\n-\t    switch(constraints.anchor)\n-\t    {\n-\t\tcase GridBagConstraints.NORTH:\n-\t\t    x = cellx + (cellw - dim.width) / 2;\n-\t\t    y = celly;\n-\t\t    break;\n-\t\tcase GridBagConstraints.SOUTH:\n-\t\t    x = cellx + (cellw - dim.width) / 2;\n-\t\t    y = celly + cellh - dim.height;\n-\t\t    break;\n-\t\tcase GridBagConstraints.WEST:\n-\t\t    x = cellx;\n-\t\t    y = celly + (cellh - dim.height) / 2;\n-\t\t    break;\n-\t\tcase GridBagConstraints.EAST:\n-\t\t    x = cellx + cellw - dim.width;\n-\t\t    y = celly + (cellh - dim.height) / 2;\n-\t\t    break;\n-\t\tcase GridBagConstraints.NORTHEAST:\n-\t\t    x = cellx + cellw - dim.width;\n-\t\t    y = celly;\n-\t\t    break;\n-\t\tcase GridBagConstraints.NORTHWEST:\n-\t\t    x = cellx;\n-\t\t    y = celly;\n-\t\t    break;\n-\t\tcase GridBagConstraints.SOUTHEAST:\n-\t\t    x = cellx + cellw - dim.width;\n-\t\t    y = celly + cellh - dim.height;\n-\t\t    break;\n-\t\tcase GridBagConstraints.SOUTHWEST:\n-\t\t    x = cellx;\n-\t\t    y = celly + cellh - dim.height;\n-\t\t    break;\n-\t\tdefault:\n-\t\t    x = cellx + (cellw - dim.width) / 2;\n-\t\t    y = celly + (cellh - dim.height) / 2;\n-\t\t    break;\n-\t    }\n-\n-\t    component.setBounds(layoutInfo.pos_x + x, layoutInfo.pos_y + y, dim.width, dim.height);\n-\t}\n-    \n-\t// DEBUG\n-\t//dumpLayoutInfo (layoutInfo);\n-\n+      ArrangeGrid (parent);\n     }\n \n     /**\n      * @since 1.4\n      */\n     protected GridBagLayoutInfo getLayoutInfo (Container parent, int sizeflag)\n     {\n-\tif (sizeflag != MINSIZE && sizeflag != PREFERREDSIZE)\n-\t    throw new IllegalArgumentException();\n-\n-\tDimension parentDim = parent.size();\n-\tInsets parentInsets = parent.insets();\n-\tparentDim.width -= parentInsets.left + parentInsets.right;\n-\tparentDim.height -= parentInsets.top + parentInsets.bottom;\n-   \n-\tint x = 0;\n-\tint y = 0;\n-\tint max_x = 0;\n-\tint max_y = 0;\n-\n-\t// first we figure out how many rows/columns\n-\tComponent[] components = parent.getComponents();\n-\tfor (int i = 0; i < components.length; i++)\n-\t{\n-\t    Component component = components [i];\n-\t\t\n-\t    // If component is not visible we dont have to care about it.\n-\t    if (!component.isVisible())\n-\t\tcontinue;\n-\t\t\n-\t    GridBagConstraints constraints = lookupConstraints (component);\n-\t\t\n-\t    if(constraints.gridx == GridBagConstraints.RELATIVE)\n-\t\tconstraints.gridx = x;\n-\n-\t    if(constraints.gridy == GridBagConstraints.RELATIVE)\n-\t\tconstraints.gridy = y;\n-\t\t\n-\t    max_x = Math.max(max_x, \n-\t\tconstraints.gridx + Math.max(1, constraints.gridwidth));\n-\t    max_y = Math.max(max_y,\n-\t\tconstraints.gridy + Math.max(1, constraints.gridheight));\n-\n-\t    if(constraints.gridwidth == GridBagConstraints.REMAINDER)\n-\t    {\n-\t\tx = 0;\n-\t\ty++;\n-\t    }\n-\t    else\n-\t    {\n-\t\tx = constraints.gridx + Math.max(1, constraints.gridwidth);\n-\t\ty = constraints.gridy;\n-\t    }\n-\t}\n-\t\n-\tGridBagLayoutInfo info = new GridBagLayoutInfo(max_x, max_y);\n-\n-\tfor (x = 0; x <= max_x; x++)\n-\t{\n-\t    if(columnWidths != null && columnWidths.length > x)\n-\t    {\n-\t\tinfo.colWidths[x] = columnWidths[x];\n-\t    }\n-\t    if(columnWeights != null && columnWeights.length > x)\n-\t    {\n-\t\tinfo.colWeights[x] = columnWeights[x];\n-\t    }\n-\t    for (int i = 0; i < components.length; i++)\n-\t    {\n-\t\tComponent component = components [i];\n-\t\t\t\n-\t\t// If component is not visible we dont have to care about it.\n-\t\tif (!component.isVisible())\n-\t\t    continue;\n-\t\t\t\n-\t\tGridBagConstraints constraints = lookupConstraints (component);\n-\n-\t\t// first we fix up any REMAINDER cells\n-\t\tif(constraints.gridwidth == GridBagConstraints.REMAINDER)\n-\t\t{\n-\t\t    constraints.gridwidth = max_x - constraints.gridx;\n-\t\t}\n-\t\tif(constraints.gridheight == GridBagConstraints.REMAINDER)\n-\t\t{\n-\t\t    constraints.gridheight = max_y - constraints.gridy;\n-\t\t}\n-\n-\t\tif(constraints.gridx + constraints.gridwidth - 1 == x)\n-\t\t{\n-\t\t    int width = (sizeflag == PREFERREDSIZE) ?\n-\t\t\tcomponent.preferredSize().width :\n-\t\t\tcomponent.minimumSize().width;\n-\t\t    if(constraints.insets != null)\n-\t\t    {\n-\t\t\twidth += constraints.insets.left + constraints.insets.right;\n-\t\t    }\n-\t\t    width += constraints.ipadx;\n-\t\t    for(int w = 1; w < constraints.gridwidth; w++)\n-\t\t    {\n-\t\t\twidth -= info.colWidths[x - w];\n-\t\t    }\n-\t\t    info.colWidths[x] = Math.max(info.colWidths[x], width);\n-\t\t    info.colWeights[x] =\n-\t\t\tMath.max(info.colWeights[x], constraints.weightx);\n-\t\t}\n-\t    }\n-\t}\n-\n-\tfor (y = 0; y <= max_y; y++)\n-\t{\n-\t    if(rowHeights != null && rowHeights.length > y)\n-\t    {\n-\t\tinfo.rowHeights[y] = rowHeights[y];\n-\t    }\n-\t    if(rowWeights != null && rowWeights.length > y)\n-\t    {\n-\t\tinfo.rowWeights[y] = rowWeights[y];\n-\t    }\n-\t    for (int i = 0; i < components.length; i++)\n-\t    {\n-\t\tComponent component = components [i];\n-\t\t\t\n-\t\t// If component is not visible we dont have to care about it.\n-\t\tif (!component.isVisible())\n-\t\t    continue;\n-\t\t\t\n-\t\tGridBagConstraints constraints = lookupConstraints (component);\n-\n-\t\tif(constraints.gridy + constraints.gridheight - 1 == y)\n-\t\t{\n-\t\t    int height = (sizeflag == PREFERREDSIZE) ?\n-\t\t\tcomponent.preferredSize().height :\n-\t\t\tcomponent.minimumSize().height;\n-\t\t    if(constraints.insets != null)\n-\t\t    {\n-\t\t\theight += constraints.insets.top + constraints.insets.bottom;\n-\t\t    } \n-\t\t    height += constraints.ipady;\n-\t\t    for(int h = 1; h < constraints.gridheight; h++)\n-\t\t    {\n-\t\t\theight -= info.rowHeights[y - h];\n-\t\t    }\n-\t\t    info.rowHeights[y] = Math.max(info.rowHeights[y], height);\n-\t\t    info.rowWeights[y] =\n-\t\t\tMath.max(info.rowWeights[y], constraints.weighty);\n-\t\t}\n-\t    }\n-\t}\n-\n-\tcalcCellSizes (info.colWidths, info.colWeights, parentDim.width);\n-\tcalcCellSizes (info.rowHeights, info.rowWeights, parentDim.height);\n-\n-\tint totalWidth = sumIntArray(info.colWidths);\n-\tint totalHeight = sumIntArray(info.rowHeights);\n-\tinfo.pos_x = parentInsets.left + (parentDim.width - totalWidth) / 2;\n-\tinfo.pos_y = parentInsets.top + (parentDim.height - totalHeight) / 2;\n-\n-\t// DEBUG\n-\t//dumpLayoutInfo (info);\n-\n-\treturn info;\n+      return GetLayoutInfo (parent, sizeflag);\n     }\n \n     /**\n      * @since 1.4\n      */\n     protected void adjustForGravity (GridBagConstraints gbc, Rectangle rect)\n     {\n-\t// FIXME\n-\tthrow new Error (\"Not implemented\");\n+      AdjustForGravity (gbc, rect);\n     }\n }"}, {"sha": "802e25e664bb475eb50c566f9f931ead6f2b23e4", "filename": "libjava/java/awt/LayoutManager2.java", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a/libjava%2Fjava%2Fawt%2FLayoutManager2.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a/libjava%2Fjava%2Fawt%2FLayoutManager2.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FLayoutManager2.java?ref=b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a", "patch": "@@ -52,12 +52,12 @@ public interface LayoutManager2 extends LayoutManager\n {\n   /**\n    * Adds the specified component to the layout, with the specified\n-   * constraint object.\n+   * constraints object.\n    *\n    * @param component the component to add\n-   * @param constraint the constraint to satisfy\n+   * @param constraints the constraints to satisfy\n    */\n-  void addLayoutComponent(Component component, Object contraint);\n+  void addLayoutComponent(Component component, Object contraints);\n \n   /**\n    * Determines the maximum size of the specified target container."}, {"sha": "47177edc7a0c438c1ff47ecc37028ebf68b9311a", "filename": "libjava/java/awt/List.java", "status": "modified", "additions": 57, "deletions": 62, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a/libjava%2Fjava%2Fawt%2FList.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a/libjava%2Fjava%2Fawt%2FList.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FList.java?ref=b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a", "patch": "@@ -175,7 +175,7 @@ public class List extends Component\n public int\n getItemCount()\n {\n-  return(items.size());\n+  return countItems ();\n }\n \n /*************************************************************************/\n@@ -191,7 +191,7 @@ public class List extends Component\n public int\n countItems()\n {\n-  return(getItemCount());\n+  return items.size ();\n }\n \n /*************************************************************************/\n@@ -249,7 +249,7 @@ public class List extends Component\n public boolean\n isMultipleMode()\n {\n-  return(multipleMode);\n+  return allowsMultipleSelections ();\n }\n \n /*************************************************************************/\n@@ -266,7 +266,7 @@ public class List extends Component\n public boolean\n allowsMultipleSelections()\n {\n-  return(multipleMode);\n+  return multipleMode;\n }\n \n /*************************************************************************/\n@@ -281,12 +281,7 @@ public class List extends Component\n public void\n setMultipleMode(boolean multipleMode)\n {\n-  this.multipleMode = multipleMode;\n-  if (peer != null)\n-    {\n-      ListPeer l = (ListPeer) peer;\n-      l.setMultipleMode (multipleMode);\n-    }\n+  setMultipleSelections (multipleMode);\n }\n \n /*************************************************************************/\n@@ -303,7 +298,11 @@ public class List extends Component\n public void\n setMultipleSelections(boolean multipleMode)\n {\n-  setMultipleMode(multipleMode);\n+  this.multipleMode = multipleMode;\n+\n+  ListPeer peer = (ListPeer) getPeer ();\n+  if (peer != null)\n+    peer.setMultipleMode (multipleMode);\n }\n \n /*************************************************************************/\n@@ -316,7 +315,7 @@ public class List extends Component\n public Dimension\n getMinimumSize()\n {\n-  return(getMinimumSize(rows));\n+  return getMinimumSize (getRows ());\n }\n \n /*************************************************************************/\n@@ -332,7 +331,7 @@ public class List extends Component\n public Dimension\n minimumSize()\n {\n-  return(getMinimumSize(rows));\n+  return minimumSize (getRows ());\n }\n \n /*************************************************************************/\n@@ -348,11 +347,7 @@ public class List extends Component\n public Dimension\n getMinimumSize(int rows)\n {\n-  ListPeer lp = (ListPeer)getPeer();\n-  if (lp != null)\n-    return(lp.minimumSize(rows));\n-  else\n-    return(new Dimension(0,0));\n+  return minimumSize (rows);\n }\n \n /*************************************************************************/\n@@ -371,7 +366,11 @@ public class List extends Component\n public Dimension\n minimumSize(int rows)\n {\n-  return(getMinimumSize(rows));\n+  ListPeer peer = (ListPeer) getPeer ();\n+  if (peer != null)\n+    return peer.minimumSize (rows);\n+  else\n+    return new Dimension (0, 0);\n }\n \n /*************************************************************************/\n@@ -384,7 +383,7 @@ public class List extends Component\n public Dimension\n getPreferredSize()\n {\n-  return(getPreferredSize(rows));\n+  return getPreferredSize (getRows ());\n }\n \n /*************************************************************************/\n@@ -400,7 +399,7 @@ public class List extends Component\n public Dimension\n preferredSize()\n {\n-  return(getPreferredSize(rows));\n+  return preferredSize (getRows ());\n }\n \n /*************************************************************************/\n@@ -416,11 +415,7 @@ public class List extends Component\n public Dimension\n getPreferredSize(int rows)\n {\n-  ListPeer lp = (ListPeer)getPeer();\n-  if (lp != null)\n-    return(lp.preferredSize(rows));\n-  else\n-    return(new Dimension(0,0));\n+  return preferredSize (rows);\n }\n \n /*************************************************************************/\n@@ -439,7 +434,11 @@ public class List extends Component\n public Dimension\n preferredSize(int rows)\n {\n-  return(getPreferredSize(rows));\n+  ListPeer peer = (ListPeer) getPeer ();\n+  if (peer != null)\n+    return peer.preferredSize (rows);\n+  else\n+    return new Dimension (0, 0);\n }\n \n /*************************************************************************/\n@@ -452,7 +451,7 @@ public class List extends Component\n public void\n add(String item)\n {\n-  add(item, -1);\n+  add (item, -1);\n }\n \n /*************************************************************************/\n@@ -467,7 +466,7 @@ public class List extends Component\n public void\n addItem(String item)\n {\n-  addItem(item, -1);\n+  addItem (item, -1);\n }\n \n /*************************************************************************/\n@@ -484,16 +483,7 @@ public class List extends Component\n public void\n add(String item, int index)\n {\n-  if ((index == -1) || (index >= items.size()))\n-    items.addElement(item);\n-  else\n-    items.insertElementAt(item, index);\n-\n-  if (peer != null)\n-    {\n-      ListPeer l = (ListPeer) peer;\n-      l.add (item, index);\n-    }\n+  addItem (item, index);\n }\n \n /*************************************************************************/\n@@ -512,7 +502,14 @@ public class List extends Component\n public void\n addItem(String item, int index)\n {\n-  add(item, index);\n+  if ((index == -1) || (index >= items.size ()))\n+    items.addElement (item);\n+  else\n+    items.insertElementAt (item, index);\n+\n+  ListPeer peer = (ListPeer) getPeer ();\n+  if (peer != null)\n+    peer.add (item, index);\n }\n \n /*************************************************************************/\n@@ -529,7 +526,11 @@ public class List extends Component\n public void\n delItem(int index) throws IllegalArgumentException\n {\n-  remove(index);\n+  items.removeElementAt (index);\n+\n+  ListPeer peer = (ListPeer) getPeer ();\n+  if (peer != null)\n+    peer.delItems (index, index);\n }\n \n /*************************************************************************/\n@@ -544,12 +545,7 @@ public class List extends Component\n public void\n remove(int index) throws IllegalArgumentException\n {\n-  items.removeElementAt (index);\n-  if (peer != null)\n-    {\n-      ListPeer l = (ListPeer) peer;\n-      l.delItems (index, index);\n-    }\n+  delItem (index);\n }\n \n /*************************************************************************/\n@@ -613,12 +609,7 @@ public class List extends Component\n public synchronized void\n removeAll()\n {\n-  items.clear();\n-  if (peer != null)\n-    {\n-      ListPeer l = (ListPeer) peer;\n-      l.removeAll ();\n-    }\n+  clear ();\n }\n \n /*************************************************************************/\n@@ -631,7 +622,11 @@ public class List extends Component\n public void\n clear()\n {\n-  removeAll();\n+  items.clear();\n+\n+  ListPeer peer = (ListPeer) getPeer ();\n+  if (peer != null)\n+    peer.removeAll ();\n }\n \n /*************************************************************************/\n@@ -782,13 +777,7 @@ public class List extends Component\n public boolean\n isIndexSelected(int index)\n {\n-  int[] indexes = getSelectedIndexes();\n-\n-  for (int i = 0; i < indexes.length; i++)\n-    if (indexes[i] == index)\n-      return(true);\n-\n-  return(false);\n+  return isSelected (index);\n }\n \n /*************************************************************************/\n@@ -807,7 +796,13 @@ public class List extends Component\n public boolean\n isSelected(int index)\n {\n-  return(isIndexSelected(index));\n+  int[] indexes = getSelectedIndexes ();\n+\n+  for (int i = 0; i < indexes.length; i++)\n+    if (indexes[i] == index)\n+      return true;\n+\n+  return false;\n }\n \n /*************************************************************************/"}, {"sha": "74478fbca75871f294cf967b363f20e58959ed73", "filename": "libjava/java/awt/Menu.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a/libjava%2Fjava%2Fawt%2FMenu.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a/libjava%2Fjava%2Fawt%2FMenu.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FMenu.java?ref=b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a", "patch": "@@ -171,7 +171,7 @@ public class Menu extends MenuItem implements MenuContainer, Serializable\n public int\n getItemCount()\n {\n-  return(items.size());\n+  return countItems ();\n }\n \n /**\n@@ -183,7 +183,7 @@ public class Menu extends MenuItem implements MenuContainer, Serializable\n  */\n public int countItems ()\n {\n-  return getItemCount ();\n+  return items.size ();\n }\n  \n /*************************************************************************/"}, {"sha": "fb26729000846be1696a64cf55355c87aec8c954", "filename": "libjava/java/awt/MenuBar.java", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a/libjava%2Fjava%2Fawt%2FMenuBar.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a/libjava%2Fjava%2Fawt%2FMenuBar.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FMenuBar.java?ref=b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a", "patch": "@@ -219,8 +219,7 @@ public class MenuBar extends MenuComponent\n public int\n getMenuCount()\n {\n-  // FIXME: How does the help menu fit in here?\n-  return(menus.size());\n+  return countMenus ();\n }\n \n /*************************************************************************/\n@@ -235,7 +234,8 @@ public class MenuBar extends MenuComponent\n public int\n countMenus()\n {\n-  return(getMenuCount());\n+  // FIXME: How does the help menu fit in here?\n+  return menus.size ();\n }\n \n /*************************************************************************/"}, {"sha": "cfdfafcc881c0054a09479717961fa496a9864ab", "filename": "libjava/java/awt/MenuItem.java", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a/libjava%2Fjava%2Fawt%2FMenuItem.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a/libjava%2Fjava%2Fawt%2FMenuItem.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FMenuItem.java?ref=b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a", "patch": "@@ -202,15 +202,7 @@ public class MenuItem extends MenuComponent\n public synchronized void\n setEnabled(boolean enabled)\n {\n-  if (enabled == this.enabled)\n-    return;\n-\n-  this.enabled = enabled;\n-  if (peer != null)\n-    {\n-      MenuItemPeer mp = (MenuItemPeer) peer;\n-      mp.setEnabled (enabled);\n-    }\n+  enable (enabled);\n }\n \n /*************************************************************************/\n@@ -226,7 +218,10 @@ public class MenuItem extends MenuComponent\n public void\n enable(boolean enabled)\n {\n-  setEnabled(enabled);\n+  if (enabled)\n+    enable ();\n+  else\n+    disable ();\n }\n \n /*************************************************************************/\n@@ -239,7 +234,12 @@ public class MenuItem extends MenuComponent\n public void\n enable()\n {\n-  setEnabled(true);\n+  if (enabled)\n+    return;\n+\n+  this.enabled = true;\n+  if (peer != null)\n+    ((MenuItemPeer) peer).setEnabled (true);\n }\n \n /*************************************************************************/\n@@ -252,7 +252,12 @@ public class MenuItem extends MenuComponent\n public void\n disable()\n {\n-  setEnabled(false);\n+  if (!enabled)\n+    return;\n+\n+  this.enabled = false;\n+  if (peer != null)\n+    ((MenuItemPeer) peer).setEnabled (false);\n }\n \n /*************************************************************************/"}, {"sha": "e91144c88121956289b6f32eb333a1db83e460ac", "filename": "libjava/java/awt/Polygon.java", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a/libjava%2Fjava%2Fawt%2FPolygon.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a/libjava%2Fjava%2Fawt%2FPolygon.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FPolygon.java?ref=b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a", "patch": "@@ -257,11 +257,25 @@ else if (y > bounds.y + bounds.height)\n    * @since 1.1\n    */\n   public Rectangle getBounds()\n+  {\n+    return getBoundingBox ();\n+  }\n+\n+  /**\n+   * Returns the bounding box of this polygon. This is the smallest\n+   * rectangle with sides parallel to the X axis that will contain this\n+   * polygon.\n+   *\n+   * @return the bounding box for this polygon\n+   * @see #getBounds2D()\n+   * @deprecated use {@link #getBounds()} instead\n+   */\n+  public Rectangle getBoundingBox()\n   {\n     if (bounds == null)\n       {\n         if (npoints == 0)\n-          return bounds = new Rectangle();\n+          return bounds = new Rectangle ();\n         int i = npoints - 1;\n         int minx = xpoints[i];\n         int maxx = minx;\n@@ -280,25 +294,11 @@ else if (x > maxx)\n             else if (y > maxy)\n               maxy = y;\n           }\n-        bounds = new Rectangle(minx, maxy, maxx - minx, maxy - miny);\n+        bounds = new Rectangle (minx, maxy, maxx - minx, maxy - miny);\n       }\n     return bounds;\n   }\n \n-  /**\n-   * Returns the bounding box of this polygon. This is the smallest\n-   * rectangle with sides parallel to the X axis that will contain this\n-   * polygon.\n-   *\n-   * @return the bounding box for this polygon\n-   * @see #getBounds2D()\n-   * @deprecated use {@link #getBounds()} instead\n-   */\n-  public Rectangle getBoundingBox()\n-  {\n-    return getBounds();\n-  }\n-\n   /**\n    * Tests whether or not the specified point is inside this polygon.\n    *"}, {"sha": "c3340bb8eb4b6123d84a8dcf2a838c2e41a8874e", "filename": "libjava/java/awt/Rectangle.java", "status": "modified", "additions": 20, "deletions": 29, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a/libjava%2Fjava%2Fawt%2FRectangle.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a/libjava%2Fjava%2Fawt%2FRectangle.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FRectangle.java?ref=b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a", "patch": "@@ -281,10 +281,7 @@ public Rectangle2D getBounds2D()\n    */\n   public void setBounds(Rectangle r)\n   {\n-    x = r.x;\n-    y = r.y;\n-    width = r.width;\n-    height = r.height;\n+    setBounds (r.x, r.y, r.width, r.height);\n   }\n \n   /**\n@@ -298,10 +295,7 @@ public void setBounds(Rectangle r)\n    */\n   public void setBounds(int x, int y, int width, int height)\n   {\n-    this.x = x;\n-    this.y = y;\n-    this.width = width;\n-    this.height = height;\n+    reshape (x, y, width, height);\n   }\n \n   /**\n@@ -333,7 +327,10 @@ public void setRect(double x, double y, double width, double height)\n    */\n   public void reshape(int x, int y, int width, int height)\n   {\n-    setBounds(x, y, width, height);\n+    this.x = x;\n+    this.y = y;\n+    this.width = width;\n+    this.height = height;\n   }\n \n   /**\n@@ -360,8 +357,7 @@ public Point getLocation()\n    */\n   public void setLocation(Point p)\n   {\n-    this.x = p.x;\n-    this.y = p.y;\n+    setLocation (p.x, p.y);\n   }\n \n   /**\n@@ -374,8 +370,7 @@ public void setLocation(Point p)\n    */\n   public void setLocation(int x, int y)\n   {\n-    this.x = x;\n-    this.y = y;\n+    move (x, y);\n   }\n \n   /**\n@@ -388,7 +383,8 @@ public void setLocation(int x, int y)\n    */\n   public void move(int x, int y)\n   {\n-    setLocation(x, y);\n+    this.x = x;\n+    this.y = y;\n   }\n \n   /**\n@@ -426,8 +422,7 @@ public Dimension getSize()\n    */\n   public void setSize(Dimension d)\n   {\n-    width = d.width;\n-    height = d.height;\n+    setSize (d.width, d.height);\n   }\n \n   /**\n@@ -439,8 +434,7 @@ public void setSize(Dimension d)\n    */\n   public void setSize(int width, int height)\n   {\n-    this.width = width;\n-    this.height = height;\n+    resize (width, height);\n   }\n \n   /**\n@@ -452,7 +446,8 @@ public void setSize(int width, int height)\n    */\n   public void resize(int width, int height)\n   {\n-    setSize(width, height);\n+    this.width = width;\n+    this.height = height;\n   }\n \n   /**\n@@ -469,9 +464,7 @@ public void resize(int width, int height)\n    */\n   public boolean contains(Point p)\n   {\n-    return width > 0 && height > 0\n-      && p.x >= x && p.x < x + width\n-      && p.y >= y && p.y < y + height;\n+    return contains (p.x, p.y);\n   }\n \n   /**\n@@ -487,9 +480,7 @@ public boolean contains(Point p)\n    */\n   public boolean contains(int x, int y)\n   {\n-    return width > 0 && height > 0\n-      && x >= this.x && x < this.x + width\n-      && y >= this.y && y < this.y + height;\n+    return inside (x, y);\n   }\n \n   /**\n@@ -504,9 +495,7 @@ public boolean contains(int x, int y)\n    */\n   public boolean contains(Rectangle r)\n   {\n-    return width > 0 && height > 0 && r.width > 0 && r.height > 0\n-      && r.x >= x && r.x + r.width <= x + width\n-      && r.y >= y && r.y + r.height <= y + height;\n+    return contains (r.x, r.y, r.width, r.height);\n   }\n \n   /**\n@@ -537,7 +526,9 @@ public boolean contains(int x, int y, int w, int h)\n    */\n   public boolean inside(int x, int y)\n   {\n-    return contains(x, y);\n+    return width > 0 && height > 0\n+      && x >= this.x && x < this.x + width\n+      && y >= this.y && y < this.y + height;\n   }\n \n   /**"}, {"sha": "b772bee3878e090e687cd41853ca29bf0a842514", "filename": "libjava/java/awt/ScrollPane.java", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a/libjava%2Fjava%2Fawt%2FScrollPane.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a/libjava%2Fjava%2Fawt%2FScrollPane.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FScrollPane.java?ref=b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a", "patch": "@@ -446,10 +446,25 @@ protected final void addImpl (Component component, Object constraints,\n public void\n doLayout()\n {\n-  Component[] list = getComponents();\n+  layout ();\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Lays out this component.  This consists of resizing the sole child\n+  * component to its perferred size.\n+  *\n+  * @deprecated This method is deprecated in favor of\n+  * <code>doLayout()</code>.\n+  */\n+public void\n+layout()\n+{\n+  Component[] list = getComponents ();\n   if ((list != null) && (list.length > 0))\n     {\n-      Dimension dim = list[0].getPreferredSize();\n+      Dimension dim = list[0].getPreferredSize ();\n       Dimension vp = getViewportSize ();\n \n       if (dim.width < vp.width)\n@@ -462,35 +477,20 @@ protected final void addImpl (Component component, Object constraints,\n       if (peer != null)\n \tpeer.childResized (dim.width, dim.height);\n \n-      list[0].resize (dim);\n+      list[0].setSize (dim);\n \n-      Point p = getScrollPosition();\n+      Point p = getScrollPosition ();\n       if (p.x > dim.width)\n         p.x = dim.width;\n       if (p.y > dim.height)\n         p.y = dim.height;\n \n-      setScrollPosition(p);\n+      setScrollPosition (p);\n     }\n }\n \n /*************************************************************************/\n \n-/**\n-  * Lays out this component.  This consists of resizing the sole child\n-  * component to its perferred size.\n-  *\n-  * @deprecated This method is deprecated in favor of\n-  * <code>doLayout()</code>.\n-  */\n-public void\n-layout()\n-{\n-  doLayout();\n-}\n-\n-/*************************************************************************/\n-\n /**\n   * This method overrides its superclass method to ensure no layout\n   * manager is set for this container.  <code>ScrollPane</code>'s do"}, {"sha": "79b2e439ea14cf3a5d19c7919dee4e013fb72bc9", "filename": "libjava/java/awt/Scrollbar.java", "status": "modified", "additions": 48, "deletions": 48, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a/libjava%2Fjava%2Fawt%2FScrollbar.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a/libjava%2Fjava%2Fawt%2FScrollbar.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FScrollbar.java?ref=b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a", "patch": "@@ -333,7 +333,7 @@ public class Scrollbar extends Component implements Accessible,\n public int\n getVisibleAmount()\n {\n-  return(visibleAmount);\n+  return getVisible ();\n }\n \n /*************************************************************************/\n@@ -350,7 +350,7 @@ public class Scrollbar extends Component implements Accessible,\n public int\n getVisible()\n {\n-  return(getVisibleAmount());\n+  return visibleAmount;\n }\n \n /*************************************************************************/\n@@ -438,7 +438,7 @@ public class Scrollbar extends Component implements Accessible,\n public int\n getUnitIncrement()\n {\n-  return(lineIncrement);\n+  return getLineIncrement ();\n }\n \n /*************************************************************************/\n@@ -455,7 +455,7 @@ public class Scrollbar extends Component implements Accessible,\n public int\n getLineIncrement()\n {\n-  return(lineIncrement);\n+  return lineIncrement;\n }\n \n /*************************************************************************/\n@@ -469,26 +469,7 @@ public class Scrollbar extends Component implements Accessible,\n public synchronized void\n setUnitIncrement(int unitIncrement)\n {\n-  if (unitIncrement < 0)\n-    throw new IllegalArgumentException(\"Unit increment less than zero.\");\n-\n-  int range = maximum - minimum;\n-  if (unitIncrement > range)\n-    {\n-      if (range == 0)\n-        unitIncrement = 1;\n-      else\n-        unitIncrement = range;\n-    }\n-\n-  if (unitIncrement == lineIncrement)\n-    return;\n-\n-  lineIncrement = unitIncrement;\n-\n-  ScrollbarPeer sp = (ScrollbarPeer)getPeer();\n-  if (sp != null)\n-    sp.setLineIncrement(lineIncrement);\n+  setLineIncrement (unitIncrement);\n }\n \n /*************************************************************************/\n@@ -505,7 +486,26 @@ public class Scrollbar extends Component implements Accessible,\n public void\n setLineIncrement(int lineIncrement)\n {\n-  setUnitIncrement(lineIncrement);\n+  if (lineIncrement < 0)\n+    throw new IllegalArgumentException (\"Unit increment less than zero.\");\n+\n+  int range = maximum - minimum;\n+  if (lineIncrement > range)\n+    {\n+      if (range == 0)\n+        lineIncrement = 1;\n+      else\n+        lineIncrement = range;\n+    }\n+\n+  if (lineIncrement == this.lineIncrement)\n+    return;\n+\n+  this.lineIncrement = lineIncrement;\n+\n+  ScrollbarPeer sp = (ScrollbarPeer) getPeer ();\n+  if (sp != null)\n+    sp.setLineIncrement (this.lineIncrement);\n }\n \n /*************************************************************************/\n@@ -519,7 +519,7 @@ public class Scrollbar extends Component implements Accessible,\n public int\n getBlockIncrement()\n {\n-  return(pageIncrement);\n+  return getPageIncrement ();\n }\n \n /*************************************************************************/\n@@ -536,7 +536,7 @@ public class Scrollbar extends Component implements Accessible,\n public int\n getPageIncrement()\n {\n-  return(pageIncrement);\n+  return pageIncrement;\n }\n \n /*************************************************************************/\n@@ -550,26 +550,7 @@ public class Scrollbar extends Component implements Accessible,\n public synchronized void\n setBlockIncrement(int blockIncrement)\n {\n-  if (blockIncrement < 0)\n-    throw new IllegalArgumentException(\"Block increment less than zero.\");\n-\n-  int range = maximum - minimum;\n-  if (blockIncrement > range)\n-    {\n-      if (range == 0)\n-        blockIncrement = 1;\n-      else\n-        blockIncrement = range;\n-    }\n-\n-  if (blockIncrement == pageIncrement)\n-    return;\n-\n-  pageIncrement = blockIncrement;\n-\n-  ScrollbarPeer sp = (ScrollbarPeer)getPeer();\n-  if (sp != null)\n-    sp.setPageIncrement(pageIncrement);\n+  setPageIncrement (blockIncrement);\n }\n \n /*************************************************************************/\n@@ -586,7 +567,26 @@ public class Scrollbar extends Component implements Accessible,\n public void\n setPageIncrement(int pageIncrement)\n {\n-  setBlockIncrement(pageIncrement);\n+  if (pageIncrement < 0)\n+    throw new IllegalArgumentException (\"Block increment less than zero.\");\n+\n+  int range = maximum - minimum;\n+  if (pageIncrement > range)\n+    {\n+      if (range == 0)\n+        pageIncrement = 1;\n+      else\n+        pageIncrement = range;\n+    }\n+\n+  if (pageIncrement == this.pageIncrement)\n+    return;\n+\n+  this.pageIncrement = pageIncrement;\n+\n+  ScrollbarPeer sp = (ScrollbarPeer) getPeer ();\n+  if (sp != null)\n+    sp.setPageIncrement (this.pageIncrement);\n }\n \n /*************************************************************************/"}, {"sha": "6f60ee69c2f784745b398e05689e082a33528d19", "filename": "libjava/java/awt/TextArea.java", "status": "modified", "additions": 48, "deletions": 48, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a/libjava%2Fjava%2Fawt%2FTextArea.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a/libjava%2Fjava%2Fawt%2FTextArea.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FTextArea.java?ref=b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a", "patch": "@@ -288,13 +288,7 @@ public Dimension getMinimumSize ()\n    */\n   public Dimension getMinimumSize (int rows, int columns)\n   {\n-    TextAreaPeer peer = (TextAreaPeer) getPeer ();\n-\n-    // Sun returns Dimension (0,0) in this case.\n-    if (peer == null)\n-      return new Dimension (0, 0);\n-\n-    return peer.getMinimumSize (rows, columns);\n+    return minimumSize (rows, columns);\n   }\n \n   /**\n@@ -311,7 +305,7 @@ public Dimension getMinimumSize (int rows, int columns)\n    */\n   public Dimension minimumSize ()\n   {\n-    return getMinimumSize (getRows (), getColumns ());\n+    return minimumSize (getRows (), getColumns ());\n   }\n \n   /**\n@@ -333,7 +327,13 @@ public Dimension minimumSize ()\n    */\n   public Dimension minimumSize (int rows, int columns)\n   {\n-    return getMinimumSize (rows, columns);\n+    TextAreaPeer peer = (TextAreaPeer) getPeer ();\n+\n+    // Sun returns Dimension (0,0) in this case.\n+    if (peer == null)\n+      return new Dimension (0, 0);\n+\n+    return peer.getMinimumSize (rows, columns);\n   }\n \n   /**\n@@ -366,13 +366,7 @@ public Dimension getPreferredSize ()\n    */\n   public Dimension getPreferredSize (int rows, int columns)\n   {\n-    TextAreaPeer peer = (TextAreaPeer) getPeer ();\n-\n-    // Sun returns Dimension (0,0) in this case.\n-    if (peer == null)\n-      return new Dimension (0, 0);\n-\n-    return peer.getPreferredSize (rows, columns);\n+    return preferredSize (rows, columns);\n   }\n \n   /**\n@@ -389,7 +383,7 @@ public Dimension getPreferredSize (int rows, int columns)\n    */\n   public Dimension preferredSize ()\n   {\n-    return getPreferredSize (getRows (), getColumns ());\n+    return preferredSize (getRows (), getColumns ());\n   }\n \n   /**\n@@ -411,7 +405,13 @@ public Dimension preferredSize ()\n    */\n   public Dimension preferredSize (int rows, int columns)\n   {\n-    return getPreferredSize (rows, columns);\n+    TextAreaPeer peer = (TextAreaPeer) getPeer ();\n+\n+    // Sun returns Dimension (0,0) in this case.\n+    if (peer == null)\n+      return new Dimension (0, 0);\n+\n+    return peer.getPreferredSize (rows, columns);\n   }\n \n   /**\n@@ -440,59 +440,59 @@ public void addNotify ()\n   /**\n    * Append the specified text to the end of the current text.\n    *\n-   * @param text The text to append.\n+   * @param str The text to append.\n    */\n   public void append (String str)\n   {\n-    TextAreaPeer peer = (TextAreaPeer) getPeer ();\n-    if (peer == null)\n-      return;\n-\n-    peer.insert (str, peer.getText().length ());\n+    appendText (str);\n   }\n \n   /**\n    * Append the specified text to the end of the current text.\n    *\n-   * @param text The text to append.\n+   * @param str The text to append.\n    *\n    * @deprecated This method is deprecated in favor of\n    * <code>append ()</code>.\n    */\n-  public void appendText (String text)\n+  public void appendText (String str)\n   {\n-    append (text);\n+    TextAreaPeer peer = (TextAreaPeer) getPeer ();\n+    if (peer == null)\n+      return;\n+\n+    peer.insert (str, peer.getText().length ());\n   }\n \n   /**\n    * Insert the specified text at the specified position.  The first\n    * character in the text area is at position zero.\n    *\n-   * @param text The text to insert.\n+   * @param str The text to insert.\n    * @param pos The position at which to insert text.\n    */\n-  public void insert (String text, int pos)\n+  public void insert (String str, int pos)\n   {\n-    TextAreaPeer peer = (TextAreaPeer) getPeer ();\n-    if (peer == null)\n-      return;\n-\n-    peer.insert (text, pos);\n+    insertText (str, pos);\n   }\n \n   /**\n    * Insert the specified text at the specified position.  The first\n    * character in the text area is at position zero.\n    *\n-   * @param text The text to insert.\n+   * @param str The text to insert.\n    * @param pos The position at which to insert text.\n    *\n-   * @deprecated This method is depcreated in favor of\n+   * @deprecated This method is deprecated in favor of\n    * <code>insert ()</code>.\n    */\n-  public void insertText (String text, int pos)\n+  public void insertText (String str, int pos)\n   {\n-    insert (text, pos);\n+    TextAreaPeer peer = (TextAreaPeer) getPeer ();\n+    if (peer == null)\n+      return;\n+\n+    peer.insert (str, pos);\n   }\n \n   /**\n@@ -503,17 +503,13 @@ public void insertText (String text, int pos)\n    * length of the replacement text may differ from the length of the\n    * text that is replaced.\n    *\n-   * @param text The new text for the range.\n+   * @param str The new text for the range.\n    * @param start The start position of the replacement range.\n    * @param end The end position of the replacement range.\n    */\n-  public void replaceRange (String text, int start, int end)\n+  public void replaceRange (String str, int start, int end)\n   {\n-    TextAreaPeer peer = (TextAreaPeer) getPeer ();\n-    if (peer == null)\n-      return;\n-\n-    peer.replaceRange (text, start, end);\n+    replaceText (str, start, end);\n   }\n \n   /**\n@@ -524,16 +520,20 @@ public void replaceRange (String text, int start, int end)\n    * length of the replacement text may differ from the length of the\n    * text that is replaced.\n    *\n-   * @param text The new text for the range.\n+   * @param str The new text for the range.\n    * @param start The start position of the replacement range.\n    * @param end The end position of the replacement range.\n    *\n    * @deprecated This method is deprecated in favor of\n    * <code>replaceRange ()</code>.\n    */\n-  public void replaceText (String text, int start, int end)\n+  public void replaceText (String str, int start, int end)\n   {\n-    replaceRange (text, start, end);\n+    TextAreaPeer peer = (TextAreaPeer) getPeer ();\n+    if (peer == null)\n+      return;\n+\n+    peer.replaceRange (str, start, end);\n   }\n \n   /**"}, {"sha": "1a783e27a79ca07a60e3ae2c6b89dc0ad30a5a06", "filename": "libjava/java/awt/TextField.java", "status": "modified", "additions": 23, "deletions": 24, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a/libjava%2Fjava%2Fawt%2FTextField.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a/libjava%2Fjava%2Fawt%2FTextField.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FTextField.java?ref=b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a", "patch": "@@ -212,11 +212,7 @@ public class TextField extends TextComponent\n public void\n setEchoChar(char echoChar)\n {\n-  this.echoChar = echoChar;\n-\n-  TextFieldPeer tfp = (TextFieldPeer)getPeer();\n-  if (tfp != null)\n-    tfp.setEchoChar(echoChar);\n+  setEchoCharacter (echoChar);\n }\n \n /*************************************************************************/\n@@ -233,7 +229,11 @@ public class TextField extends TextComponent\n public void\n setEchoCharacter(char echoChar)\n {\n-  setEchoChar(echoChar);\n+  this.echoChar = echoChar;\n+\n+  TextFieldPeer peer = (TextFieldPeer) getPeer ();\n+  if (peer != null)\n+    peer.setEchoChar (echoChar);\n }\n \n /*************************************************************************/\n@@ -264,7 +264,7 @@ public class TextField extends TextComponent\n public Dimension\n getMinimumSize()\n {\n-  return(getMinimumSize(getColumns()));\n+  return getMinimumSize (getColumns ());\n }\n \n /*************************************************************************/\n@@ -278,11 +278,7 @@ public class TextField extends TextComponent\n public Dimension\n getMinimumSize(int columns)\n {\n-  TextFieldPeer tfp = (TextFieldPeer)getPeer();\n-  if (tfp == null)\n-    return(null); // FIXME: What do we do if there is no peer?\n-\n-  return(tfp.getMinimumSize(columns));\n+  return minimumSize (columns);\n }\n \n /*************************************************************************/\n@@ -292,13 +288,13 @@ public class TextField extends TextComponent\n   *\n   * @return The minimum size for this text field.\n   *\n-  * @deprecated This method is depcreated in favor of\n+  * @deprecated This method is deprecated in favor of\n   * <code>getMinimumSize()</code>.\n   */\n public Dimension\n minimumSize()\n {\n-  return(getMinimumSize(getColumns()));\n+  return minimumSize (getColumns ());\n }\n \n /*************************************************************************/\n@@ -315,7 +311,11 @@ public class TextField extends TextComponent\n public Dimension\n minimumSize(int columns)\n {\n-  return(getMinimumSize(columns));\n+  TextFieldPeer peer = (TextFieldPeer) getPeer ();\n+  if (peer == null)\n+    return null; // FIXME: What do we do if there is no peer?\n+\n+  return peer.getMinimumSize (columns);\n }\n \n /*************************************************************************/\n@@ -328,7 +328,7 @@ public class TextField extends TextComponent\n public Dimension\n getPreferredSize()\n {\n-  return(getPreferredSize(getColumns()));\n+  return getPreferredSize (getColumns ());\n }\n \n /*************************************************************************/\n@@ -342,12 +342,7 @@ public class TextField extends TextComponent\n public Dimension\n getPreferredSize(int columns)\n {\n-  TextFieldPeer tfp = (TextFieldPeer)getPeer();\n-  if (tfp == null)\n-    {\n-      return new Dimension(0, 0);\n-    }\n-  return(tfp.getPreferredSize(columns));\n+  return preferredSize (columns);\n }\n \n /*************************************************************************/\n@@ -363,7 +358,7 @@ public class TextField extends TextComponent\n public Dimension\n preferredSize()\n {\n-  return(getPreferredSize(getColumns()));\n+  return preferredSize (getColumns ());\n }\n \n /*************************************************************************/\n@@ -380,7 +375,11 @@ public class TextField extends TextComponent\n public Dimension\n preferredSize(int columns)\n {\n-  return(getPreferredSize(columns));\n+  TextFieldPeer peer = (TextFieldPeer) getPeer ();\n+  if (peer == null)\n+    return new Dimension (0, 0);\n+\n+  return peer.getPreferredSize (columns);\n }\n \n /*************************************************************************/"}, {"sha": "81d84a45e562564731a8498968076c2d61a8509a", "filename": "libjava/java/awt/image/renderable/RenderContext.java", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a/libjava%2Fjava%2Fawt%2Fimage%2Frenderable%2FRenderContext.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a/libjava%2Fjava%2Fawt%2Fimage%2Frenderable%2FRenderContext.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fimage%2Frenderable%2FRenderContext.java?ref=b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a", "patch": "@@ -87,24 +87,24 @@ public void setTransform(AffineTransform xform)\n \n   public void preConcatenateTransform(AffineTransform pre)\n   {\n-    xform.preConcatenate(pre);\n+    preConcetenateTransform (pre);\n   }\n \n-  /** @deprecated Sun can't spell concatenate */\n+  /** @deprecated */\n   public void preConcetenateTransform(AffineTransform pre)\n   {\n-    preConcetenateTransform(pre);\n+    xform.preConcatenate (pre);\n   }\n \n   public void concatenateTransform(AffineTransform post)\n   {\n-    xform.concatenate(post);\n+    concetenateTransform (post);\n   }\n \n-  /** @deprecated Sun can't spell concatenate */\n+  /** @deprecated */\n   public void concetenateTransform(AffineTransform post)\n   {\n-    concatenateTransform(post);\n+    xform.concatenate (post);\n   }\n \n   public AffineTransform getTransform()"}, {"sha": "82976d38c7b49a6c85703ea77de847b5b3b4bf39", "filename": "libjava/javax/swing/JApplet.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a/libjava%2Fjavax%2Fswing%2FJApplet.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a/libjava%2Fjavax%2Fswing%2FJApplet.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FJApplet.java?ref=b6d3cb37ef676c2439fdf9498e4dbe8042fb3c6a", "patch": "@@ -80,7 +80,7 @@ protected  void frameInit()\n   public Dimension getPreferredSize()\n   {\n     Dimension d = super.getPreferredSize();\n-    System.out.println(\"JFrame.getPrefSize(): \" + d + \" , comp=\"+countComponents() + \", layout=\" + getLayout());\n+    System.out.println(\"JFrame.getPrefSize(): \" + d + \" , comp=\"+ getComponentCount () + \", layout=\" + getLayout());\n     return d;\n   }\n "}]}