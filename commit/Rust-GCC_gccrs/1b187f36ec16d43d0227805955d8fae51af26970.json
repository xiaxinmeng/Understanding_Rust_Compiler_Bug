{"sha": "1b187f36ec16d43d0227805955d8fae51af26970", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWIxODdmMzZlYzE2ZDQzZDAyMjc4MDU5NTVkOGZhZTUxYWYyNjk3MA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-08-14T11:04:11Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-08-14T11:04:11Z"}, "message": "[AArch64] Use SVE BIC for conditional arithmetic\n\nThis patch uses BIC to pattern-match conditional AND with an inverted\nthird input.  It also adds extra tests for AND, ORR and EOR.\n\n2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n\t    Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n\ngcc/\n\t* config/aarch64/aarch64-sve.md (*cond_bic<mode>_2)\n\t(*cond_bic<mode>_any): New patterns.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/cond_logical_1.c: New test.\n\t* gcc.target/aarch64/sve/cond_logical_1_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_logical_2.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_logical_2_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_logical_3.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_logical_3_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_logical_4.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_logical_4_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_logical_5.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_logical_5_run.c: Likewise.\n\nCo-Authored-By: Kugan Vivekanandarajah <kuganv@linaro.org>\n\nFrom-SVN: r274480", "tree": {"sha": "038efa855b617788fd2c3fc5b515415a666f6ba2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/038efa855b617788fd2c3fc5b515415a666f6ba2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b187f36ec16d43d0227805955d8fae51af26970", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b187f36ec16d43d0227805955d8fae51af26970", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b187f36ec16d43d0227805955d8fae51af26970", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b187f36ec16d43d0227805955d8fae51af26970/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d113ece60450b2efb07e9057b6d2732b08fee2c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d113ece60450b2efb07e9057b6d2732b08fee2c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d113ece60450b2efb07e9057b6d2732b08fee2c4"}], "stats": {"total": 548, "additions": 548, "deletions": 0}, "files": [{"sha": "0c453aca3157ade2c25a513c947cb0637dd12672", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b187f36ec16d43d0227805955d8fae51af26970/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b187f36ec16d43d0227805955d8fae51af26970/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1b187f36ec16d43d0227805955d8fae51af26970", "patch": "@@ -1,3 +1,9 @@\n+2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n+\t    Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n+\n+\t* config/aarch64/aarch64-sve.md (*cond_bic<mode>_2)\n+\t(*cond_bic<mode>_any): New patterns.\n+\n 2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_print_operand): Allow %e to"}, {"sha": "43beb7e5242ecefac238891cc8e24af2a811834a", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b187f36ec16d43d0227805955d8fae51af26970/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b187f36ec16d43d0227805955d8fae51af26970/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=1b187f36ec16d43d0227805955d8fae51af26970", "patch": "@@ -2274,6 +2274,50 @@\n   }\n )\n \n+;; Predicated integer BIC, merging with the first input.\n+(define_insn \"*cond_bic<mode>_2\"\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, ?&w\")\n+\t(unspec:SVE_I\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n+\t   (and:SVE_I\n+\t     (not:SVE_I (match_operand:SVE_I 3 \"register_operand\" \"w, w\"))\n+\t     (match_operand:SVE_I 2 \"register_operand\" \"0, w\"))\n+\t   (match_dup 2)]\n+\t  UNSPEC_SEL))]\n+  \"TARGET_SVE\"\n+  \"@\n+   bic\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\n+   movprfx\\t%0, %2\\;bic\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\"\n+  [(set_attr \"movprfx\" \"*,yes\")]\n+)\n+\n+;; Predicated integer BIC, merging with an independent value.\n+(define_insn_and_rewrite \"*cond_bic<mode>_any\"\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=&w, &w, &w, ?&w\")\n+\t(unspec:SVE_I\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl, Upl\")\n+\t   (and:SVE_I\n+\t     (not:SVE_I (match_operand:SVE_I 3 \"register_operand\" \"w, w, w, w\"))\n+\t     (match_operand:SVE_I 2 \"register_operand\" \"0, w, w, w\"))\n+\t   (match_operand:SVE_I 4 \"aarch64_simd_reg_or_zero\" \"Dz, Dz, 0, w\")]\n+\t  UNSPEC_SEL))]\n+  \"TARGET_SVE && !rtx_equal_p (operands[2], operands[4])\"\n+  \"@\n+   movprfx\\t%0.<Vetype>, %1/z, %0.<Vetype>\\;bic\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\n+   movprfx\\t%0.<Vetype>, %1/z, %2.<Vetype>\\;bic\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\n+   movprfx\\t%0.<Vetype>, %1/m, %2.<Vetype>\\;bic\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\n+   #\"\n+  \"&& reload_completed\n+   && register_operand (operands[4], <MODE>mode)\n+   && !rtx_equal_p (operands[0], operands[4])\"\n+  {\n+    emit_insn (gen_vcond_mask_<mode><vpred> (operands[0], operands[2],\n+\t\t\t\t\t     operands[4], operands[1]));\n+    operands[4] = operands[2] = operands[0];\n+  }\n+  [(set_attr \"movprfx\" \"yes\")]\n+)\n+\n ;; -------------------------------------------------------------------------\n ;; ---- [INT] Shifts\n ;; -------------------------------------------------------------------------"}, {"sha": "7cb6b3c5412401d024abb667e69f7b11bfc50455", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b187f36ec16d43d0227805955d8fae51af26970/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b187f36ec16d43d0227805955d8fae51af26970/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1b187f36ec16d43d0227805955d8fae51af26970", "patch": "@@ -1,3 +1,17 @@\n+2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n+\t    Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n+\n+\t* gcc.target/aarch64/sve/cond_logical_1.c: New test.\n+\t* gcc.target/aarch64/sve/cond_logical_1_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_logical_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_logical_2_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_logical_3.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_logical_3_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_logical_4.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_logical_4_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_logical_5.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_logical_5_run.c: Likewise.\n+\n 2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.target/aarch64/sve/cond_uxt_1.c: New test."}, {"sha": "a1e80b8a995d703554e64c84027f896a85dc0e1a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_logical_1.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b187f36ec16d43d0227805955d8fae51af26970/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_logical_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b187f36ec16d43d0227805955d8fae51af26970/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_logical_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_logical_1.c?ref=1b187f36ec16d43d0227805955d8fae51af26970", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define bit_and(A, B) ((A) & (B))\n+#define bit_or(A, B) ((A) | (B))\n+#define bit_xor(A, B) ((A) ^ (B))\n+#define bit_bic(A, B) ((A) & ~(B))\n+\n+#define DEF_LOOP(TYPE, OP)\t\t\t\t\\\n+  void __attribute__ ((noinline, noclone))\t\t\\\n+  test_##TYPE##_##OP (TYPE *__restrict r,\t\t\\\n+\t\t      TYPE *__restrict a,\t\t\\\n+\t\t      TYPE *__restrict b,\t\t\\\n+\t\t      TYPE *__restrict c, int n)\t\\\n+  {\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\\\n+      r[i] = a[i] < 20 ? OP (b[i], c[i]) : b[i];\t\\\n+  }\n+\n+#define TEST_TYPE(T, TYPE) \\\n+  T (TYPE, bit_and) \\\n+  T (TYPE, bit_or) \\\n+  T (TYPE, bit_xor) \\\n+  T (TYPE, bit_bic)\n+\n+#define TEST_ALL(T) \\\n+  TEST_TYPE (T, int8_t) \\\n+  TEST_TYPE (T, uint8_t) \\\n+  TEST_TYPE (T, int16_t) \\\n+  TEST_TYPE (T, uint16_t) \\\n+  TEST_TYPE (T, int32_t) \\\n+  TEST_TYPE (T, uint32_t) \\\n+  TEST_TYPE (T, int64_t) \\\n+  TEST_TYPE (T, uint64_t)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.b, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.h, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.s, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.d, p[0-7]/m,} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.b, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.h, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.s, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.d, p[0-7]/m,} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.b, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.h, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.s, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.d, p[0-7]/m,} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tbic\\tz[0-9]+\\.b, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tbic\\tz[0-9]+\\.h, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tbic\\tz[0-9]+\\.s, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tbic\\tz[0-9]+\\.d, p[0-7]/m,} 2 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz[^,]*z} } } */\n+/* { dg-final { scan-assembler-not {\\tmovprfx\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "cb12e5609b1a40b2abcbf003664a5008a4d55f98", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_logical_1_run.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b187f36ec16d43d0227805955d8fae51af26970/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_logical_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b187f36ec16d43d0227805955d8fae51af26970/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_logical_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_logical_1_run.c?ref=1b187f36ec16d43d0227805955d8fae51af26970", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_logical_1.c\"\n+\n+#define N 99\n+\n+#define TEST_LOOP(TYPE, OP)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE r[N], a[N], b[N], c[N];\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = (i & 1 ? i : 3 * i);\t\t\t\t\\\n+\tb[i] = (i >> 4) << (i & 15);\t\t\t\t\\\n+\tc[i] = ((i + 2) % 3) * (i + 1);\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##TYPE##_##OP (r, a, b, c, N);\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tTYPE expected = a[i] < 20 ? OP (b[i], c[i]) : b[i];\t\\\n+\tif (r[i] != expected)\t\t\t\t\t\\\n+\t  __builtin_abort ();\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "c476fe2ff3827e26f558c9150abbe9dd93801895", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_logical_2.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b187f36ec16d43d0227805955d8fae51af26970/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_logical_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b187f36ec16d43d0227805955d8fae51af26970/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_logical_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_logical_2.c?ref=1b187f36ec16d43d0227805955d8fae51af26970", "patch": "@@ -0,0 +1,63 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define bit_and(A, B) ((A) & (B))\n+#define bit_or(A, B) ((A) | (B))\n+#define bit_xor(A, B) ((A) ^ (B))\n+#define bit_bic(A, B) ((A) & ~(B))\n+\n+#define DEF_LOOP(TYPE, OP)\t\t\t\t\\\n+  void __attribute__ ((noinline, noclone))\t\t\\\n+  test_##TYPE##_##OP (TYPE *__restrict r,\t\t\\\n+\t\t      TYPE *__restrict a,\t\t\\\n+\t\t      TYPE *__restrict b,\t\t\\\n+\t\t      TYPE *__restrict c, int n)\t\\\n+  {\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\\\n+      r[i] = a[i] < 20 ? OP (b[i], c[i]) : c[i];\t\\\n+  }\n+\n+#define TEST_TYPE(T, TYPE) \\\n+  T (TYPE, bit_and) \\\n+  T (TYPE, bit_or) \\\n+  T (TYPE, bit_xor) \\\n+  T (TYPE, bit_bic)\n+\n+#define TEST_ALL(T) \\\n+  TEST_TYPE (T, int8_t) \\\n+  TEST_TYPE (T, uint8_t) \\\n+  TEST_TYPE (T, int16_t) \\\n+  TEST_TYPE (T, uint16_t) \\\n+  TEST_TYPE (T, int32_t) \\\n+  TEST_TYPE (T, uint32_t) \\\n+  TEST_TYPE (T, int64_t) \\\n+  TEST_TYPE (T, uint64_t)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.b, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.h, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.s, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.d, p[0-7]/m,} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.b, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.h, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.s, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.d, p[0-7]/m,} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.b, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.h, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.s, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.d, p[0-7]/m,} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tbic\\tz[0-9]+\\.b, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tbic\\tz[0-9]+\\.h, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tbic\\tz[0-9]+\\.s, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tbic\\tz[0-9]+\\.d, p[0-7]/m,} 2 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz[^,]*z} } } */\n+/* { dg-final { scan-assembler-not {\\tmovprfx\\t} } } */\n+/* There's no BICR or equivalent, so the BIC functions need a select.  */\n+/* { dg-final { scan-assembler-times {\\tsel\\t} 8 } } */"}, {"sha": "9b9918cc86cdc5048de6eb07e1b5fc817ae09f9f", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_logical_2_run.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b187f36ec16d43d0227805955d8fae51af26970/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_logical_2_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b187f36ec16d43d0227805955d8fae51af26970/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_logical_2_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_logical_2_run.c?ref=1b187f36ec16d43d0227805955d8fae51af26970", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_logical_2.c\"\n+\n+#define N 99\n+\n+#define TEST_LOOP(TYPE, OP)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE r[N], a[N], b[N], c[N];\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = (i & 1 ? i : 3 * i);\t\t\t\t\\\n+\tb[i] = (i >> 4) << (i & 15);\t\t\t\t\\\n+\tc[i] = ((i + 2) % 3) * (i + 1);\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##TYPE##_##OP (r, a, b, c, N);\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tTYPE expected = a[i] < 20 ? OP (b[i], c[i]) : c[i];\t\\\n+\tif (r[i] != expected)\t\t\t\t\t\\\n+\t  __builtin_abort ();\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "7ad2c4ea3669e7bf291919b24ee7dcf055edc388", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_logical_3.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b187f36ec16d43d0227805955d8fae51af26970/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_logical_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b187f36ec16d43d0227805955d8fae51af26970/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_logical_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_logical_3.c?ref=1b187f36ec16d43d0227805955d8fae51af26970", "patch": "@@ -0,0 +1,66 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define bit_and(A, B) ((A) & (B))\n+#define bit_or(A, B) ((A) | (B))\n+#define bit_xor(A, B) ((A) ^ (B))\n+#define bit_bic(A, B) ((A) & ~(B))\n+\n+#define DEF_LOOP(TYPE, OP)\t\t\t\t\\\n+  void __attribute__ ((noinline, noclone))\t\t\\\n+  test_##TYPE##_##OP (TYPE *__restrict r,\t\t\\\n+\t\t      TYPE *__restrict a,\t\t\\\n+\t\t      TYPE *__restrict b,\t\t\\\n+\t\t      TYPE *__restrict c, int n)\t\\\n+  {\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\\\n+      r[i] = a[i] < 20 ? OP (b[i], c[i]) : a[i];\t\\\n+  }\n+\n+#define TEST_TYPE(T, TYPE) \\\n+  T (TYPE, bit_and) \\\n+  T (TYPE, bit_or) \\\n+  T (TYPE, bit_xor) \\\n+  T (TYPE, bit_bic)\n+\n+#define TEST_ALL(T) \\\n+  TEST_TYPE (T, int8_t) \\\n+  TEST_TYPE (T, uint8_t) \\\n+  TEST_TYPE (T, int16_t) \\\n+  TEST_TYPE (T, uint16_t) \\\n+  TEST_TYPE (T, int32_t) \\\n+  TEST_TYPE (T, uint32_t) \\\n+  TEST_TYPE (T, int64_t) \\\n+  TEST_TYPE (T, uint64_t)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.b, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.h, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.s, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.d, p[0-7]/m,} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.b, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.h, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.s, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.d, p[0-7]/m,} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.b, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.h, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.s, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.d, p[0-7]/m,} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tbic\\tz[0-9]+\\.b, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tbic\\tz[0-9]+\\.h, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tbic\\tz[0-9]+\\.s, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tbic\\tz[0-9]+\\.d, p[0-7]/m,} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b\\n} 8 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h\\n} 8 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s\\n} 8 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d\\n} 8 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz[^,]*z} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "05dc78ab3e293a58ab513b86d446984dcbec9767", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_logical_3_run.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b187f36ec16d43d0227805955d8fae51af26970/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_logical_3_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b187f36ec16d43d0227805955d8fae51af26970/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_logical_3_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_logical_3_run.c?ref=1b187f36ec16d43d0227805955d8fae51af26970", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_logical_3.c\"\n+\n+#define N 99\n+\n+#define TEST_LOOP(TYPE, OP)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE r[N], a[N], b[N], c[N];\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = (i & 1 ? i : 3 * i);\t\t\t\t\\\n+\tb[i] = (i >> 4) << (i & 15);\t\t\t\t\\\n+\tc[i] = ((i + 2) % 3) * (i + 1);\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##TYPE##_##OP (r, a, b, c, N);\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tTYPE expected = a[i] < 20 ? OP (b[i], c[i]) : a[i];\t\\\n+\tif (r[i] != expected)\t\t\t\t\t\\\n+\t  __builtin_abort ();\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "00217bffaadb78da7d732ba3fb566fdef00d618a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_logical_4.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b187f36ec16d43d0227805955d8fae51af26970/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_logical_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b187f36ec16d43d0227805955d8fae51af26970/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_logical_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_logical_4.c?ref=1b187f36ec16d43d0227805955d8fae51af26970", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define bit_and(A, B) ((A) & (B))\n+#define bit_or(A, B) ((A) | (B))\n+#define bit_xor(A, B) ((A) ^ (B))\n+#define bit_bic(A, B) ((A) & ~(B))\n+\n+#define DEF_LOOP(TYPE, OP)\t\t\t\t\\\n+  void __attribute__ ((noinline, noclone))\t\t\\\n+  test_##TYPE##_##OP (TYPE *__restrict r,\t\t\\\n+\t\t      TYPE *__restrict a,\t\t\\\n+\t\t      TYPE *__restrict b,\t\t\\\n+\t\t      TYPE *__restrict c, int n)\t\\\n+  {\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\\\n+      r[i] = a[i] < 20 ? OP (b[i], c[i]) : 42;\t\t\\\n+  }\n+\n+#define TEST_TYPE(T, TYPE) \\\n+  T (TYPE, bit_and) \\\n+  T (TYPE, bit_or) \\\n+  T (TYPE, bit_xor) \\\n+  T (TYPE, bit_bic)\n+\n+#define TEST_ALL(T) \\\n+  TEST_TYPE (T, int8_t) \\\n+  TEST_TYPE (T, uint8_t) \\\n+  TEST_TYPE (T, int16_t) \\\n+  TEST_TYPE (T, uint16_t) \\\n+  TEST_TYPE (T, int32_t) \\\n+  TEST_TYPE (T, uint32_t) \\\n+  TEST_TYPE (T, int64_t) \\\n+  TEST_TYPE (T, uint64_t)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.b, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.h, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.s, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.d, p[0-7]/m,} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.b, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.h, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.s, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.d, p[0-7]/m,} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.b, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.h, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.s, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.d, p[0-7]/m,} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tbic\\tz[0-9]+\\.b, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tbic\\tz[0-9]+\\.h, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tbic\\tz[0-9]+\\.s, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tbic\\tz[0-9]+\\.d, p[0-7]/m,} 2 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz[^,]*z} } } */\n+/* { dg-final { scan-assembler-not {\\tmovprfx\\t} } } */\n+/* { dg-final { scan-assembler-times {\\tsel\\t} 32 } } */"}, {"sha": "46fb115942a042840e96ec57c525dfdf44cc8dda", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_logical_4_run.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b187f36ec16d43d0227805955d8fae51af26970/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_logical_4_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b187f36ec16d43d0227805955d8fae51af26970/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_logical_4_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_logical_4_run.c?ref=1b187f36ec16d43d0227805955d8fae51af26970", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_logical_4.c\"\n+\n+#define N 99\n+\n+#define TEST_LOOP(TYPE, OP)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE r[N], a[N], b[N], c[N];\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = (i & 1 ? i : 3 * i);\t\t\t\t\\\n+\tb[i] = (i >> 4) << (i & 15);\t\t\t\t\\\n+\tc[i] = ((i + 2) % 3) * (i + 1);\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##TYPE##_##OP (r, a, b, c, N);\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tTYPE expected = a[i] < 20 ? OP (b[i], c[i]) : 42;\t\\\n+\tif (r[i] != expected)\t\t\t\t\t\\\n+\t  __builtin_abort ();\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "36b541f21859bd70c8d1a406857834bc6b235745", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_logical_5.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b187f36ec16d43d0227805955d8fae51af26970/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_logical_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b187f36ec16d43d0227805955d8fae51af26970/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_logical_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_logical_5.c?ref=1b187f36ec16d43d0227805955d8fae51af26970", "patch": "@@ -0,0 +1,66 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define bit_and(A, B) ((A) & (B))\n+#define bit_or(A, B) ((A) | (B))\n+#define bit_xor(A, B) ((A) ^ (B))\n+#define bit_bic(A, B) ((A) & ~(B))\n+\n+#define DEF_LOOP(TYPE, OP)\t\t\t\t\\\n+  void __attribute__ ((noinline, noclone))\t\t\\\n+  test_##TYPE##_##OP (TYPE *__restrict r,\t\t\\\n+\t\t      TYPE *__restrict a,\t\t\\\n+\t\t      TYPE *__restrict b,\t\t\\\n+\t\t      TYPE *__restrict c, int n)\t\\\n+  {\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\\\n+      r[i] = a[i] < 20 ? OP (b[i], c[i]) : 0;\t\t\\\n+  }\n+\n+#define TEST_TYPE(T, TYPE) \\\n+  T (TYPE, bit_and) \\\n+  T (TYPE, bit_or) \\\n+  T (TYPE, bit_xor) \\\n+  T (TYPE, bit_bic)\n+\n+#define TEST_ALL(T) \\\n+  TEST_TYPE (T, int8_t) \\\n+  TEST_TYPE (T, uint8_t) \\\n+  TEST_TYPE (T, int16_t) \\\n+  TEST_TYPE (T, uint16_t) \\\n+  TEST_TYPE (T, int32_t) \\\n+  TEST_TYPE (T, uint32_t) \\\n+  TEST_TYPE (T, int64_t) \\\n+  TEST_TYPE (T, uint64_t)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.b, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.h, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.s, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.d, p[0-7]/m,} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.b, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.h, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.s, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.d, p[0-7]/m,} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.b, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.h, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.s, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.d, p[0-7]/m,} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tbic\\tz[0-9]+\\.b, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tbic\\tz[0-9]+\\.h, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tbic\\tz[0-9]+\\.s, p[0-7]/m,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tbic\\tz[0-9]+\\.d, p[0-7]/m,} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.b, p[0-7]/z, z[0-9]+\\.b\\n} 8 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.h, p[0-7]/z, z[0-9]+\\.h\\n} 8 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s\\n} 8 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.d, p[0-7]/z, z[0-9]+\\.d\\n} 8 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz[^,]*z} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "e0da5fe58ad5b8e3eab8ce8d1f36ba3b715301b0", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_logical_5_run.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b187f36ec16d43d0227805955d8fae51af26970/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_logical_5_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b187f36ec16d43d0227805955d8fae51af26970/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_logical_5_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_logical_5_run.c?ref=1b187f36ec16d43d0227805955d8fae51af26970", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_logical_5.c\"\n+\n+#define N 99\n+\n+#define TEST_LOOP(TYPE, OP)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    TYPE r[N], a[N], b[N], c[N];\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\ta[i] = (i & 1 ? i : 3 * i);\t\t\t\t\\\n+\tb[i] = (i >> 4) << (i & 15);\t\t\t\t\\\n+\tc[i] = ((i + 2) % 3) * (i + 1);\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    test_##TYPE##_##OP (r, a, b, c, N);\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tTYPE expected = a[i] < 20 ? OP (b[i], c[i]) : 0;\t\\\n+\tif (r[i] != expected)\t\t\t\t\t\\\n+\t  __builtin_abort ();\t\t\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}]}