{"sha": "591bb5e4bf6b9a75175b162bcf9d22bcae2b5abf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTkxYmI1ZTRiZjZiOWE3NTE3NWIxNjJiY2Y5ZDIyYmNhZTJiNWFiZg==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2016-01-01T17:02:51Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2016-01-01T17:02:51Z"}, "message": "re PR fortran/68864 (ICE: in gfc_get_descriptor_dimension, at fortran/trans-array.c:268)\n\n2016-01-01  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/68864\n\t* trans-array.c (evaluate_bound): If deferred, test that 'desc'\n\tis an array descriptor before using gfc_conv_descriptor_xxx.\n\n\n2016-01-01  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/68864\n\t* gfortran.dg/pr68864.f90: New test.\n\nFrom-SVN: r232026", "tree": {"sha": "d9ec0725f3a82d26c2a6aae4255fe82f7aa87938", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9ec0725f3a82d26c2a6aae4255fe82f7aa87938"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/591bb5e4bf6b9a75175b162bcf9d22bcae2b5abf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/591bb5e4bf6b9a75175b162bcf9d22bcae2b5abf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/591bb5e4bf6b9a75175b162bcf9d22bcae2b5abf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/591bb5e4bf6b9a75175b162bcf9d22bcae2b5abf/comments", "author": null, "committer": null, "parents": [{"sha": "942a13194f3efa752dbb1d9b8fbe6ceb9d104e13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/942a13194f3efa752dbb1d9b8fbe6ceb9d104e13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/942a13194f3efa752dbb1d9b8fbe6ceb9d104e13"}], "stats": {"total": 60, "additions": 57, "deletions": 3}, "files": [{"sha": "0e7bf72638bce0cd14f17517ec778f59f5a8d997", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/591bb5e4bf6b9a75175b162bcf9d22bcae2b5abf/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/591bb5e4bf6b9a75175b162bcf9d22bcae2b5abf/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=591bb5e4bf6b9a75175b162bcf9d22bcae2b5abf", "patch": "@@ -1,3 +1,9 @@\n+2016-01-01  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/68864\n+\t* trans-array.c (evaluate_bound): If deferred, test that 'desc'\n+\tis an array descriptor before using gfc_conv_descriptor_xxx.\n+\n 2015-12-29  Andre Vehreschild  <vehre@gcc.gnu.org>\n \n \tPR fortran/69011"}, {"sha": "287b4af332738512635887b83f29c99bac11de55", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/591bb5e4bf6b9a75175b162bcf9d22bcae2b5abf/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/591bb5e4bf6b9a75175b162bcf9d22bcae2b5abf/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=591bb5e4bf6b9a75175b162bcf9d22bcae2b5abf", "patch": "@@ -3821,10 +3821,10 @@ evaluate_bound (stmtblock_t *block, tree *bounds, gfc_expr ** values,\n       gfc_add_block_to_block (block, &se.pre);\n       *output = se.expr;\n     }\n-  else if (deferred)\n+  else if (deferred && GFC_DESCRIPTOR_TYPE_P (TREE_TYPE (desc)))\n     {\n       /* The gfc_conv_array_lbound () routine returns a constant zero for\n-\t deferred length arrays, which in the scalarizer wrecks havoc, when\n+\t deferred length arrays, which in the scalarizer wreaks havoc, when\n \t copying to a (newly allocated) one-based array.\n \t Keep returning the actual result in sync for both bounds.  */\n       *output = lbound ? gfc_conv_descriptor_lbound_get (desc,"}, {"sha": "a514461a8051db70aa3a88b9c04681724b2f6062", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/591bb5e4bf6b9a75175b162bcf9d22bcae2b5abf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/591bb5e4bf6b9a75175b162bcf9d22bcae2b5abf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=591bb5e4bf6b9a75175b162bcf9d22bcae2b5abf", "patch": "@@ -1,3 +1,8 @@\n+2016-01-01  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/68864\n+\t* gfortran.dg/pr68864.f90: New test.\n+\n 2016-01-01  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/69070\n@@ -8,7 +13,7 @@\n \n \tPR target/69015\n \t* gcc.dg/pr69015.c: New test.\n-\f\n+\n Copyright (C) 2016 Free Software Foundation, Inc.\n \n Copying and distribution of this file, with or without modification,"}, {"sha": "151dfb2c2ffdf4cec6010b944f7041f3d23e02f8", "filename": "gcc/testsuite/gfortran.dg/pr68864.f90", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/591bb5e4bf6b9a75175b162bcf9d22bcae2b5abf/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr68864.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/591bb5e4bf6b9a75175b162bcf9d22bcae2b5abf/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr68864.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr68864.f90?ref=591bb5e4bf6b9a75175b162bcf9d22bcae2b5abf", "patch": "@@ -0,0 +1,43 @@\n+! { dg-do compile }\n+!\n+! Contributed by Hossein Talebi  <talebi.hossein@gmail.com>\n+!\n+!\n+Module part_base2_class\n+\n+    implicit none\n+\n+    type :: ty_moc1\n+        integer l\n+    end type ty_moc1\n+    integer,parameter ::  MAX_NUM_ELEMENT_TYPE=32\n+\n+    type :: ty_element_index2\n+\n+        class(ty_moc1),allocatable :: element\n+        class(ty_moc1),allocatable :: element_th(:)\n+\n+    endtype ty_element_index2\n+\n+    type :: ty_part_base2\n+        type(ty_element_index2)::element_index(MAX_NUM_ELEMENT_TYPE)\n+    end type ty_part_base2\n+\n+    class(ty_part_base2),allocatable ::  part_tmp_obj\n+\n+End Module part_base2_class\n+\n+    use part_base2_class\n+    allocate (part_tmp_obj)\n+    allocate (part_tmp_obj%element_index(1)%element, source = ty_moc1(1))\n+    allocate (part_tmp_obj%element_index(1)%element_th(1), source = ty_moc1(99))\n+    allocate (part_tmp_obj%element_index(32)%element_th(1), source = ty_moc1(999))\n+\n+    do i = 1, MAX_NUM_ELEMENT_TYPE\n+      if (allocated (part_tmp_obj%element_index(i)%element_th)) then\n+        print *, i, part_tmp_obj%element_index(i)%element_th(1)%l\n+      end if\n+    end do\n+    deallocate (part_tmp_obj)\n+\n+end"}]}