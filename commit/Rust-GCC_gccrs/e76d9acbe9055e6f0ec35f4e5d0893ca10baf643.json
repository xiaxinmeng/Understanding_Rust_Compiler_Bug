{"sha": "e76d9acbe9055e6f0ec35f4e5d0893ca10baf643", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTc2ZDlhY2JlOTA1NWU2ZjBlYzM1ZjRlNWQwODkzY2ExMGJhZjY0Mw==", "commit": {"author": {"name": "John Wehle", "email": "john@feith.com", "date": "2000-08-19T16:34:44Z"}, "committer": {"name": "John Wehle", "email": "wehle@gcc.gnu.org", "date": "2000-08-19T16:34:44Z"}, "message": "loop.c (scan_loop): Use CONST_CALL_P instead of checking for REG_LIBCALL / REG_RETVAL.\n\n\t* loop.c (scan_loop): Use CONST_CALL_P instead of\n\tchecking for REG_LIBCALL / REG_RETVAL.\n\nFrom-SVN: r35808", "tree": {"sha": "2b760b9e70242dd44efe6a433b13fa0b8c4ba519", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b760b9e70242dd44efe6a433b13fa0b8c4ba519"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e76d9acbe9055e6f0ec35f4e5d0893ca10baf643", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e76d9acbe9055e6f0ec35f4e5d0893ca10baf643", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e76d9acbe9055e6f0ec35f4e5d0893ca10baf643", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e76d9acbe9055e6f0ec35f4e5d0893ca10baf643/comments", "author": {"login": "jlwehle", "id": 46985578, "node_id": "MDQ6VXNlcjQ2OTg1NTc4", "avatar_url": "https://avatars.githubusercontent.com/u/46985578?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jlwehle", "html_url": "https://github.com/jlwehle", "followers_url": "https://api.github.com/users/jlwehle/followers", "following_url": "https://api.github.com/users/jlwehle/following{/other_user}", "gists_url": "https://api.github.com/users/jlwehle/gists{/gist_id}", "starred_url": "https://api.github.com/users/jlwehle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jlwehle/subscriptions", "organizations_url": "https://api.github.com/users/jlwehle/orgs", "repos_url": "https://api.github.com/users/jlwehle/repos", "events_url": "https://api.github.com/users/jlwehle/events{/privacy}", "received_events_url": "https://api.github.com/users/jlwehle/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "850aac532e0a0846f12c6c84c42370749c9bf461", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/850aac532e0a0846f12c6c84c42370749c9bf461", "html_url": "https://github.com/Rust-GCC/gccrs/commit/850aac532e0a0846f12c6c84c42370749c9bf461"}], "stats": {"total": 16, "additions": 7, "deletions": 9}, "files": [{"sha": "dc35df43ceee0da01d2c1c55335d1115a681407c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e76d9acbe9055e6f0ec35f4e5d0893ca10baf643/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e76d9acbe9055e6f0ec35f4e5d0893ca10baf643/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e76d9acbe9055e6f0ec35f4e5d0893ca10baf643", "patch": "@@ -1,3 +1,8 @@\n+Sat Aug 19 12:37:08 EDT 2000  John Wehle  (john@feith.com)\n+\n+\t* loop.c (scan_loop): Use CONST_CALL_P instead of\n+\tchecking for REG_LIBCALL / REG_RETVAL.\n+\n Sat Aug 19 09:18:47 2000  Jeffrey A Law  (law@cygnus.com)\n \n \t* reload1.c (reload_as_needed): Accept dumpfile argument,"}, {"sha": "fe9e0d4ebabc0812108e34d4c5b7bf90510b82ba", "filename": "gcc/loop.c", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e76d9acbe9055e6f0ec35f4e5d0893ca10baf643/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e76d9acbe9055e6f0ec35f4e5d0893ca10baf643/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=e76d9acbe9055e6f0ec35f4e5d0893ca10baf643", "patch": "@@ -599,7 +599,6 @@ scan_loop (loop, flags)\n   rtx loop_entry_jump = 0;\n   /* Number of insns in the loop.  */\n   int insn_count;\n-  int in_libcall = 0;\n   int tem;\n   rtx temp, update_start, update_end;\n   /* The SET from an insn, if it is the only SET in the insn.  */\n@@ -753,11 +752,6 @@ scan_loop (loop, flags)\n        p != NULL_RTX;\n        p = next_insn_in_loop (loop, p))\n     {\n-      if (INSN_P (p) && find_reg_note (p, REG_LIBCALL, NULL_RTX))\n-\tin_libcall = 1;\n-      else if (INSN_P (p) && find_reg_note (p, REG_RETVAL, NULL_RTX))\n-\tin_libcall = 0;\n-\n       if (GET_CODE (p) == INSN\n \t  && (set = single_set (p))\n \t  && GET_CODE (SET_DEST (set)) == REG\n@@ -1046,9 +1040,8 @@ scan_loop (loop, flags)\n \t}\n       /* Past a call insn, we get to insns which might not be executed\n \t because the call might exit.  This matters for insns that trap.\n-\t Call insns inside a REG_LIBCALL/REG_RETVAL block always return,\n-\t so they don't count.  */\n-      else if (GET_CODE (p) == CALL_INSN && ! in_libcall)\n+\t Constant and pure call insns always return, so they don't count.  */\n+      else if (GET_CODE (p) == CALL_INSN && ! CONST_CALL_P (p))\n \tcall_passed = 1;\n       /* Past a label or a jump, we get to insns for which we\n \t can't count on whether or how many times they will be"}]}