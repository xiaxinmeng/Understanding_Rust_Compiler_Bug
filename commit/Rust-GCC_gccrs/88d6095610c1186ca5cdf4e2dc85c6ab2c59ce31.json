{"sha": "88d6095610c1186ca5cdf4e2dc85c6ab2c59ce31", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODhkNjA5NTYxMGMxMTg2Y2E1Y2RmNGUyZGM4NWM2YWIyYzU5Y2UzMQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-12-09T17:33:42Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-12-09T17:33:42Z"}, "message": "re PR target/17025 (attribute regparm code-generation bug)\n\n        PR target/17025\n        * config/i386/i386.md (testqi_1_maybe_si, andqi_2_maybe_si): New.\n        (test_qi_1, andqi_2): Do not promote to simode.\n\nFrom-SVN: r91956", "tree": {"sha": "6afa8d65d112d873cd35e346a9fc91aec8e5bcc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6afa8d65d112d873cd35e346a9fc91aec8e5bcc0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88d6095610c1186ca5cdf4e2dc85c6ab2c59ce31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88d6095610c1186ca5cdf4e2dc85c6ab2c59ce31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88d6095610c1186ca5cdf4e2dc85c6ab2c59ce31", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88d6095610c1186ca5cdf4e2dc85c6ab2c59ce31/comments", "author": null, "committer": null, "parents": [{"sha": "ad87ad6788c58657b793cf8ad2d22b8b677f4b78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad87ad6788c58657b793cf8ad2d22b8b677f4b78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad87ad6788c58657b793cf8ad2d22b8b677f4b78"}], "stats": {"total": 69, "additions": 54, "deletions": 15}, "files": [{"sha": "80b36ab34b06699e5a05c034a5af53151a6ccde8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88d6095610c1186ca5cdf4e2dc85c6ab2c59ce31/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88d6095610c1186ca5cdf4e2dc85c6ab2c59ce31/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=88d6095610c1186ca5cdf4e2dc85c6ab2c59ce31", "patch": "@@ -1,3 +1,9 @@\n+2004-12-09  Richard Henderson  <rth@redhat.com>\n+\n+\tPR target/17025\n+\t* config/i386/i386.md (testqi_1_maybe_si, andqi_2_maybe_si): New.\n+\t(test_qi_1, andqi_2): Do not promote to simode.\n+\n 2004-12-09  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR tree-opt/18904"}, {"sha": "e3346fa84d4daa2ac24f2c7adc571edfa02ee8db", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 48, "deletions": 15, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88d6095610c1186ca5cdf4e2dc85c6ab2c59ce31/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88d6095610c1186ca5cdf4e2dc85c6ab2c59ce31/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=88d6095610c1186ca5cdf4e2dc85c6ab2c59ce31", "patch": "@@ -7834,18 +7834,21 @@\n   \"\"\n   \"\")\n \n-(define_insn \"*testqi_1\"\n+(define_insn \"*testqi_1_maybe_si\"\n   [(set (reg FLAGS_REG)\n-        (compare (and:QI (match_operand:QI 0 \"nonimmediate_operand\" \"%!*a,q,qm,r\")\n-\t\t\t (match_operand:QI 1 \"general_operand\" \"n,n,qn,n\"))\n-\t\t (const_int 0)))]\n-  \"ix86_match_ccmode (insn, CCNOmode)\n-   && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n+        (compare\n+\t  (and:QI\n+\t    (match_operand:QI 0 \"nonimmediate_operand\" \"%!*a,q,qm,r\")\n+\t    (match_operand:QI 1 \"general_operand\" \"n,n,qn,n\"))\n+\t  (const_int 0)))]\n+   \"(GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\n+    && ix86_match_ccmode (insn,\n+ \t\t\t GET_CODE (operands[1]) == CONST_INT\n+ \t\t\t && INTVAL (operands[1]) >= 0 ? CCNOmode : CCZmode)\"\n {\n   if (which_alternative == 3)\n     {\n-      if (GET_CODE (operands[1]) == CONST_INT\n-\t  && (INTVAL (operands[1]) & 0xffffff00))\n+      if (GET_CODE (operands[1]) == CONST_INT && INTVAL (operands[1]) < 0)\n \toperands[1] = GEN_INT (INTVAL (operands[1]) & 0xff);\n       return \"test{l}\\t{%1, %k0|%k0, %1}\";\n     }\n@@ -7856,6 +7859,21 @@\n    (set_attr \"mode\" \"QI,QI,QI,SI\")\n    (set_attr \"pent_pair\" \"uv,np,uv,np\")])\n \n+(define_insn \"*testqi_1\"\n+  [(set (reg FLAGS_REG)\n+        (compare\n+\t  (and:QI\n+\t    (match_operand:QI 0 \"nonimmediate_operand\" \"%!*a,q,qm\")\n+\t    (match_operand:QI 1 \"general_operand\" \"n,n,qn\"))\n+\t  (const_int 0)))]\n+  \"(GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\n+   && ix86_match_ccmode (insn, CCNOmode)\"\n+  \"test{b}\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"test\")\n+   (set_attr \"modrm\" \"0,1,1\")\n+   (set_attr \"mode\" \"QI\")\n+   (set_attr \"pent_pair\" \"uv,np,uv\")])\n+\n (define_expand \"testqi_ext_ccno_0\"\n   [(set (reg:CCNO FLAGS_REG)\n \t(compare:CCNO\n@@ -8343,21 +8361,22 @@\n   [(set_attr \"type\" \"alu1\")\n    (set_attr \"mode\" \"QI\")])\n \n-(define_insn \"*andqi_2\"\n+(define_insn \"*andqi_2_maybe_si\"\n   [(set (reg FLAGS_REG)\n \t(compare (and:QI\n-\t\t   (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0,0\")\n-\t\t   (match_operand:QI 2 \"general_operand\" \"qim,qi,i\"))\n+\t\t      (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0,0\")\n+\t\t      (match_operand:QI 2 \"general_operand\" \"qim,qi,i\"))\n \t\t (const_int 0)))\n    (set (match_operand:QI 0 \"nonimmediate_operand\" \"=q,qm,*r\")\n \t(and:QI (match_dup 1) (match_dup 2)))]\n-  \"ix86_match_ccmode (insn, CCNOmode)\n-   && ix86_binary_operator_ok (AND, QImode, operands)\"\n+  \"ix86_binary_operator_ok (AND, QImode, operands)\n+   && ix86_match_ccmode (insn,\n+\t\t\t GET_CODE (operands[2]) == CONST_INT\n+\t\t\t && INTVAL (operands[2]) >= 0 ? CCNOmode : CCZmode)\"\n {\n   if (which_alternative == 2)\n     {\n-      if (GET_CODE (operands[2]) == CONST_INT\n-          && (INTVAL (operands[2]) & 0xffffff00))\n+      if (GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) < 0)\n         operands[2] = GEN_INT (INTVAL (operands[2]) & 0xff);\n       return \"and{l}\\t{%2, %k0|%k0, %2}\";\n     }\n@@ -8366,6 +8385,20 @@\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"mode\" \"QI,QI,SI\")])\n \n+(define_insn \"*andqi_2\"\n+  [(set (reg FLAGS_REG)\n+\t(compare (and:QI\n+\t\t   (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0\")\n+\t\t   (match_operand:QI 2 \"general_operand\" \"qim,qi\"))\n+\t\t (const_int 0)))\n+   (set (match_operand:QI 0 \"nonimmediate_operand\" \"=q,qm\")\n+\t(and:QI (match_dup 1) (match_dup 2)))]\n+  \"ix86_match_ccmode (insn, CCNOmode)\n+   && ix86_binary_operator_ok (AND, QImode, operands)\"\n+  \"and{b}\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"alu\")\n+   (set_attr \"mode\" \"QI\")])\n+\n (define_insn \"*andqi_2_slp\"\n   [(set (reg FLAGS_REG)\n \t(compare (and:QI"}]}