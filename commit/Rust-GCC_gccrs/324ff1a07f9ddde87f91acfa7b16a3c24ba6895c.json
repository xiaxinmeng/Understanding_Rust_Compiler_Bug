{"sha": "324ff1a07f9ddde87f91acfa7b16a3c24ba6895c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzI0ZmYxYTA3ZjlkZGRlODdmOTFhY2ZhN2IxNmEzYzI0YmE2ODk1Yw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-02-28T15:25:19Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-02-28T15:25:19Z"}, "message": "i386.c: Include intl.h.\n\n\t* config/i386/i386.c: Include intl.h.\n\t(ix86_option_override_internal): Use cond ? G_(\"...\") : G_(\"...\")\n\tinstead of just cond ? \"...\" : \"...\".\n\t* config/nvptx/nvptx.c (nvptx_goacc_validate_dims): Likewise.\n\t* coverage.c (read_counts_file): Likewise.\n\t* omp-offload.c: Include intl.h.\n\t(oacc_loop_fixed_partitions): Use cond ? G_(\"...\") : G_(\"...\") instead\n\tof just cond ? \"...\" : \"...\".\n\t* gcov.c (read_count_file): Use cond ? N_(\"...\") : N_(\"...\") instead\n\tof just cond ? \"...\" : \"...\".\nc/\n\t* c-parser.c (c_parser_asm_statement): Use cond ? G_(\"...\") : G_(\"...\")\n\tinstead of just cond ? \"...\" : \"...\".\n\t(c_parser_oacc_enter_exit_data): Use %s and ternary operator only\n\tfor \"enter\"/\"exit\" keyword.\n\t(c_finish_oacc_routine): Don't use %s to supply portions of the\n\tmessage.\ncp/\n\t* decl.c (find_decomp_class_base): Use cond ? G_(\"...\") : G_(\"...\")\n\tinstead of just cond ? \"...\" : \"...\".\n\t(grokdeclarator): Likewise.\n\t(build_enumerator): Likewise.\n\t* init.c (build_new_1): Likewise.\n\t* call.c (build_new_method_call_1): Likewise.\n\t* parser.c: Include intl.h.\n\t(cp_parser_oacc_enter_exit_data): Use %s and ternary operator only for\n\t\"enter\"/\"exit\" keyword.\n\t(cp_finalize_oacc_routine): Don't use %s to supply portions of the\n\tmessage.\nfortran/\n\t* parse.c (parse_critical_block): Use cond ? G_(\"...\") : G_(\"...\")\n\tinstead of just cond ? \"...\" : \"...\".\n\t* scanner.c (gfc_next_char_literal): Likewise.\n\t* match.c (match_exit_cycle): Likewise.\n\nFrom-SVN: r245778", "tree": {"sha": "68c599de8fbc088feb2c6b53509d06af0157d3e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68c599de8fbc088feb2c6b53509d06af0157d3e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/324ff1a07f9ddde87f91acfa7b16a3c24ba6895c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/324ff1a07f9ddde87f91acfa7b16a3c24ba6895c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/324ff1a07f9ddde87f91acfa7b16a3c24ba6895c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/324ff1a07f9ddde87f91acfa7b16a3c24ba6895c/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c5c78a527d98118e8ee8a098627a3f3f00307bd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5c78a527d98118e8ee8a098627a3f3f00307bd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5c78a527d98118e8ee8a098627a3f3f00307bd2"}], "stats": {"total": 231, "additions": 146, "deletions": 85}, "files": [{"sha": "87478eec4314fb1045190e7ac2ba18c20ce45112", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/324ff1a07f9ddde87f91acfa7b16a3c24ba6895c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/324ff1a07f9ddde87f91acfa7b16a3c24ba6895c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=324ff1a07f9ddde87f91acfa7b16a3c24ba6895c", "patch": "@@ -1,3 +1,16 @@\n+2017-02-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/i386/i386.c: Include intl.h.\n+\t(ix86_option_override_internal): Use cond ? G_(\"...\") : G_(\"...\")\n+\tinstead of just cond ? \"...\" : \"...\".\n+\t* config/nvptx/nvptx.c (nvptx_goacc_validate_dims): Likewise.\n+\t* coverage.c (read_counts_file): Likewise.\n+\t* omp-offload.c: Include intl.h.\n+\t(oacc_loop_fixed_partitions): Use cond ? G_(\"...\") : G_(\"...\") instead\n+\tof just cond ? \"...\" : \"...\".\n+\t* gcov.c (read_count_file): Use cond ? N_(\"...\") : N_(\"...\") instead\n+\tof just cond ? \"...\" : \"...\".\n+\n 2017-02-28  Richard Earnshaw  <rearnsha@arm.com>\n \n \tPR target/79742"}, {"sha": "95cea175d3f487517c0d6ce240266549f6bb812f", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/324ff1a07f9ddde87f91acfa7b16a3c24ba6895c/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/324ff1a07f9ddde87f91acfa7b16a3c24ba6895c/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=324ff1a07f9ddde87f91acfa7b16a3c24ba6895c", "patch": "@@ -1,3 +1,12 @@\n+2017-02-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-parser.c (c_parser_asm_statement): Use cond ? G_(\"...\") : G_(\"...\")\n+\tinstead of just cond ? \"...\" : \"...\".\n+\t(c_parser_oacc_enter_exit_data): Use %s and ternary operator only\n+\tfor \"enter\"/\"exit\" keyword.\n+\t(c_finish_oacc_routine): Don't use %s to supply portions of the\n+\tmessage.\n+\n 2017-02-24  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/79588"}, {"sha": "c74b3cff00136845752b5d88d7c4d411705fd719", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/324ff1a07f9ddde87f91acfa7b16a3c24ba6895c/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/324ff1a07f9ddde87f91acfa7b16a3c24ba6895c/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=324ff1a07f9ddde87f91acfa7b16a3c24ba6895c", "patch": "@@ -64,6 +64,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple-parser.h\"\n #include \"read-rtl-function.h\"\n #include \"run-rtl-passes.h\"\n+#include \"intl.h\"\n \n /* We need to walk over decls with incomplete struct/union/enum types\n    after parsing the whole translation unit.\n@@ -6159,8 +6160,8 @@ c_parser_asm_statement (c_parser *parser)\n     {\n       if (!c_parser_require (parser, CPP_COLON,\n \t\t\t     is_goto\n-\t\t\t     ? \"expected %<:%>\"\n-\t\t\t     : \"expected %<:%> or %<)%>\"))\n+\t\t\t     ? G_(\"expected %<:%>\")\n+\t\t\t     : G_(\"expected %<:%> or %<)%>\")))\n \tgoto error_close_paren;\n \n       /* Once past any colon, we're no longer a simple asm.  */\n@@ -13925,9 +13926,8 @@ c_parser_oacc_enter_exit_data (c_parser *parser, bool enter)\n \n   if (strcmp (p, \"data\") != 0)\n     {\n-      error_at (loc, enter\n-\t\t? \"expected %<data%> after %<#pragma acc enter%>\"\n-\t\t: \"expected %<data%> after %<#pragma acc exit%>\");\n+      error_at (loc, \"expected %<data%> after %<#pragma acc %s%>\",\n+\t\tenter ? \"enter\" : \"exit\");\n       parser->error = true;\n       c_parser_skip_to_pragma_eol (parser);\n       return;\n@@ -13942,9 +13942,8 @@ c_parser_oacc_enter_exit_data (c_parser *parser, bool enter)\n \n   if (omp_find_clause (clauses, OMP_CLAUSE_MAP) == NULL_TREE)\n     {\n-      error_at (loc, enter\n-\t\t? \"%<#pragma acc enter data%> has no data movement clause\"\n-\t\t: \"%<#pragma acc exit data%> has no data movement clause\");\n+      error_at (loc, \"%<#pragma acc %s data%> has no data movement clause\",\n+\t\tenter ? \"enter\" : \"exit\");\n       return;\n     }\n \n@@ -14270,8 +14269,10 @@ c_finish_oacc_routine (struct oacc_routine_data *data, tree fndecl,\n   if (TREE_USED (fndecl) || (!is_defn && DECL_SAVED_TREE (fndecl)))\n     {\n       error_at (data->loc,\n-\t\t\"%<#pragma acc routine%> must be applied before %s\",\n-\t\tTREE_USED (fndecl) ? \"use\" : \"definition\");\n+\t\tTREE_USED (fndecl)\n+\t\t? G_(\"%<#pragma acc routine%> must be applied before use\")\n+\t\t: G_(\"%<#pragma acc routine%> must be applied before \"\n+\t\t     \"definition\"));\n       data->error_seen = true;\n       return;\n     }"}, {"sha": "33ad0f1f0ecf6681f91c58e34ed12dbbc4f74a5a", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 46, "deletions": 40, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/324ff1a07f9ddde87f91acfa7b16a3c24ba6895c/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/324ff1a07f9ddde87f91acfa7b16a3c24ba6895c/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=324ff1a07f9ddde87f91acfa7b16a3c24ba6895c", "patch": "@@ -83,6 +83,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"selftest.h\"\n #include \"selftest-rtl.h\"\n #include \"print-rtl.h\"\n+#include \"intl.h\"\n \n /* This file should be included last.  */\n #include \"target-def.h\"\n@@ -5265,11 +5266,11 @@ ix86_option_override_internal (bool main_args_p,\n       else if (!strcmp (opts->x_ix86_tune_string, \"x86-64\"))\n         warning (OPT_Wdeprecated,\n \t\t main_args_p\n-\t\t ? \"%<-mtune=x86-64%> is deprecated; use %<-mtune=k8%> \"\n-\t\t   \"or %<-mtune=generic%> instead as appropriate\"\n-\t\t : \"%<target(\\\"tune=x86-64\\\")%> is deprecated; use \"\n-\t\t   \"%<target(\\\"tune=k8\\\")%> or %<target(\\\"tune=generic\\\")%> \"\n-\t\t   \"instead as appropriate\");\n+\t\t ? G_(\"%<-mtune=x86-64%> is deprecated; use %<-mtune=k8%> \"\n+\t\t      \"or %<-mtune=generic%> instead as appropriate\")\n+\t\t : G_(\"%<target(\\\"tune=x86-64\\\")%> is deprecated; use \"\n+\t\t      \"%<target(\\\"tune=k8\\\")%> or %<target(\\\"tune=generic\\\")%>\"\n+\t\t      \" instead as appropriate\"));\n     }\n   else\n     {\n@@ -5418,17 +5419,19 @@ ix86_option_override_internal (bool main_args_p,\n \tif (!strcmp (opts->x_ix86_arch_string, \"generic\"))\n \t  {\n \t    error (main_args_p\n-\t\t  ? \"%<generic%> CPU can be used only for %<-mtune=%> switch\"\n-\t\t  : \"%<generic%> CPU can be used only for \"\n-\t\t    \"%<target(\\\"tune=\\\")%> attribute\");\n+\t\t   ? G_(\"%<generic%> CPU can be used only for %<-mtune=%> \"\n+\t\t\t\"switch\")\n+\t\t   : G_(\"%<generic%> CPU can be used only for \"\n+\t\t\t\"%<target(\\\"tune=\\\")%> attribute\"));\n \t    return false;\n \t  }\n \telse if (!strcmp (opts->x_ix86_arch_string, \"intel\"))\n \t  {\n \t    error (main_args_p\n-\t\t  ? \"%<intel%> CPU can be used only for %<-mtune=%> switch\"\n-\t\t  : \"%<intel%> CPU can be used only for \"\n-\t\t    \"%<target(\\\"tune=\\\")%> attribute\");\n+\t\t   ? G_(\"%<intel%> CPU can be used only for %<-mtune=%> \"\n+\t\t\t\"switch\")\n+\t\t   : G_(\"%<intel%> CPU can be used only for \"\n+\t\t\t\"%<target(\\\"tune=\\\")%> attribute\"));\n \t    return false;\n \t  }\n \n@@ -5656,8 +5659,8 @@ ix86_option_override_internal (bool main_args_p,\n   if (i == pta_size)\n     {\n       error (main_args_p\n-\t     ? \"bad value (%qs) for %<-march=%> switch\"\n-\t     : \"bad value (%qs) for %<target(\\\"arch=\\\")%> attribute\",\n+\t     ? G_(\"bad value (%qs) for %<-march=%> switch\")\n+\t     : G_(\"bad value (%qs) for %<target(\\\"arch=\\\")%> attribute\"),\n \t     opts->x_ix86_arch_string);\n \n       auto_vec <const char *> candidates;\n@@ -5674,16 +5677,16 @@ ix86_option_override_internal (bool main_args_p,\n       if (hint)\n \tinform (input_location,\n \t\tmain_args_p\n-\t\t? \"valid arguments to %<-march=%> switch are: \"\n-\t\t  \"%s; did you mean %qs?\"\n-\t\t: \"valid arguments to %<target(\\\"arch=\\\")%> attribute are: \"\n-\t\t  \"%s; did you mean %qs?\", s, hint);\n+\t\t? G_(\"valid arguments to %<-march=%> switch are: \"\n+\t\t     \"%s; did you mean %qs?\")\n+\t\t: G_(\"valid arguments to %<target(\\\"arch=\\\")%> attribute are: \"\n+\t\t     \"%s; did you mean %qs?\"), s, hint);\n       else\n \tinform (input_location,\n \t\tmain_args_p\n-\t\t? \"valid arguments to %<-march=%> switch are: %s\"\n-\t\t: \"valid arguments to %<target(\\\"arch=\\\")%> attribute are: %s\",\n-\t\ts);\n+\t\t? G_(\"valid arguments to %<-march=%> switch are: %s\")\n+\t\t: G_(\"valid arguments to %<target(\\\"arch=\\\")%> attribute \"\n+\t\t     \"are: %s\"), s);\n       XDELETEVEC (s);\n     }\n \n@@ -5729,8 +5732,8 @@ ix86_option_override_internal (bool main_args_p,\n   if (ix86_tune_specified && i == pta_size)\n     {\n       error (main_args_p\n-\t     ? \"bad value (%qs) for %<-mtune=%> switch\"\n-\t     : \"bad value (%qs) for %<target(\\\"tune=\\\")%> attribute\",\n+\t     ? G_(\"bad value (%qs) for %<-mtune=%> switch\")\n+\t     : G_(\"bad value (%qs) for %<target(\\\"tune=\\\")%> attribute\"),\n \t     opts->x_ix86_tune_string);\n \n       auto_vec <const char *> candidates;\n@@ -5745,16 +5748,16 @@ ix86_option_override_internal (bool main_args_p,\n       if (hint)\n \tinform (input_location,\n \t\tmain_args_p\n-\t\t? \"valid arguments to %<-mtune=%> switch are: \"\n-\t\t  \"%s; did you mean %qs?\"\n-\t\t: \"valid arguments to %<target(\\\"tune=\\\")%> attribute are: \"\n-\t\t  \"%s; did you mean %qs?\", s, hint);\n+\t\t? G_(\"valid arguments to %<-mtune=%> switch are: \"\n+\t\t     \"%s; did you mean %qs?\")\n+\t\t: G_(\"valid arguments to %<target(\\\"tune=\\\")%> attribute are: \"\n+\t\t     \"%s; did you mean %qs?\"), s, hint);\n       else\n \tinform (input_location,\n \t\tmain_args_p\n-\t\t? \"valid arguments to %<-mtune=%> switch are: %s\"\n-\t\t: \"valid arguments to %<target(\\\"tune=\\\")%> attribute are: %s\",\n-\t\ts);\n+\t\t? G_(\"valid arguments to %<-mtune=%> switch are: %s\")\n+\t\t: G_(\"valid arguments to %<target(\\\"tune=\\\")%> attribute \"\n+\t\t     \"are: %s\"), s);\n       XDELETEVEC (s);\n     }\n \n@@ -5856,8 +5859,9 @@ ix86_option_override_internal (bool main_args_p,\n \n       if (TARGET_RTD_P (opts->x_target_flags))\n \twarning (0,\n-\t\t main_args_p ? \"%<-mrtd%> is ignored in 64bit mode\"\n-\t\t\t     : \"%<target(\\\"rtd\\\")%> is ignored in 64bit mode\");\n+\t\t main_args_p\n+\t\t ? G_(\"%<-mrtd%> is ignored in 64bit mode\")\n+\t\t : G_(\"%<target(\\\"rtd\\\")%> is ignored in 64bit mode\"));\n     }\n   else\n     {\n@@ -5979,8 +5983,8 @@ ix86_option_override_internal (bool main_args_p,\n   if (TARGET_SSEREGPARM_P (opts->x_target_flags)\n       && ! TARGET_SSE_P (opts->x_ix86_isa_flags))\n     error (main_args_p\n-\t   ? \"%<-msseregparm%> used without SSE enabled\"\n-\t   : \"%<target(\\\"sseregparm\\\")%> used without SSE enabled\");\n+\t   ? G_(\"%<-msseregparm%> used without SSE enabled\")\n+\t   : G_(\"%<target(\\\"sseregparm\\\")%> used without SSE enabled\"));\n \n   if (opts_set->x_ix86_fpmath)\n     {\n@@ -6047,10 +6051,11 @@ ix86_option_override_internal (bool main_args_p,\n       if (opts_set->x_target_flags & MASK_ACCUMULATE_OUTGOING_ARGS)\n \twarning (0,\n \t\t main_args_p\n-\t\t ? \"stack probing requires %<-maccumulate-outgoing-args%> \"\n-\t\t   \"for correctness\"\n-\t\t : \"stack probing requires \"\n-\t\t   \"%<target(\\\"accumulate-outgoing-args\\\")%> for correctness\");\n+\t\t ? G_(\"stack probing requires %<-maccumulate-outgoing-args%> \"\n+\t\t      \"for correctness\")\n+\t\t : G_(\"stack probing requires \"\n+\t\t      \"%<target(\\\"accumulate-outgoing-args\\\")%> for \"\n+\t\t      \"correctness\"));\n       opts->x_target_flags |= MASK_ACCUMULATE_OUTGOING_ARGS;\n     }\n \n@@ -6062,9 +6067,10 @@ ix86_option_override_internal (bool main_args_p,\n       if (opts_set->x_target_flags & MASK_ACCUMULATE_OUTGOING_ARGS)\n \twarning (0,\n \t\t main_args_p\n-\t\t ? \"fixed ebp register requires %<-maccumulate-outgoing-args%>\"\n-\t\t : \"fixed ebp register requires \"\n-\t\t   \"%<target(\\\"accumulate-outgoing-args\\\")%>\");\n+\t\t ? G_(\"fixed ebp register requires \"\n+\t\t      \"%<-maccumulate-outgoing-args%>\")\n+\t\t : G_(\"fixed ebp register requires \"\n+\t\t      \"%<target(\\\"accumulate-outgoing-args\\\")%>\"));\n       opts->x_target_flags |= MASK_ACCUMULATE_OUTGOING_ARGS;\n     }\n "}, {"sha": "b6899221eb3a347318eb5450264a21dcfffb3c84", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/324ff1a07f9ddde87f91acfa7b16a3c24ba6895c/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/324ff1a07f9ddde87f91acfa7b16a3c24ba6895c/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=324ff1a07f9ddde87f91acfa7b16a3c24ba6895c", "patch": "@@ -4542,8 +4542,8 @@ nvptx_goacc_validate_dims (tree decl, int dims[], int fn_level)\n       if (fn_level < 0 && dims[GOMP_DIM_VECTOR] >= 0)\n \twarning_at (decl ? DECL_SOURCE_LOCATION (decl) : UNKNOWN_LOCATION, 0,\n \t\t    dims[GOMP_DIM_VECTOR]\n-\t\t    ? \"using vector_length (%d), ignoring %d\"\n-\t\t    : \"using vector_length (%d), ignoring runtime setting\",\n+\t\t    ? G_(\"using vector_length (%d), ignoring %d\")\n+\t\t    : G_(\"using vector_length (%d), ignoring runtime setting\"),\n \t\t    PTX_VECTOR_LENGTH, dims[GOMP_DIM_VECTOR]);\n       dims[GOMP_DIM_VECTOR] = PTX_VECTOR_LENGTH;\n       changed = true;"}, {"sha": "0a949c3a9f7780a185864c48ef1d70c525e19c20", "filename": "gcc/coverage.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/324ff1a07f9ddde87f91acfa7b16a3c24ba6895c/gcc%2Fcoverage.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/324ff1a07f9ddde87f91acfa7b16a3c24ba6895c/gcc%2Fcoverage.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoverage.c?ref=324ff1a07f9ddde87f91acfa7b16a3c24ba6895c", "patch": "@@ -327,7 +327,9 @@ read_counts_file (void)\n       gcov_sync (offset, length);\n       if ((is_error = gcov_is_error ()))\n \t{\n-\t  error (is_error < 0 ? \"%qs has overflowed\" : \"%qs is corrupted\",\n+\t  error (is_error < 0\n+\t\t ? G_(\"%qs has overflowed\")\n+\t\t : G_(\"%qs is corrupted\"),\n \t\t da_file_name);\n \t  delete counts_hash;\n \t  counts_hash = NULL;"}, {"sha": "e62bdb3420c04ef651a9b7cf7662c467154dd6a1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/324ff1a07f9ddde87f91acfa7b16a3c24ba6895c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/324ff1a07f9ddde87f91acfa7b16a3c24ba6895c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=324ff1a07f9ddde87f91acfa7b16a3c24ba6895c", "patch": "@@ -1,3 +1,17 @@\n+2017-02-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* decl.c (find_decomp_class_base): Use cond ? G_(\"...\") : G_(\"...\")\n+\tinstead of just cond ? \"...\" : \"...\".\n+\t(grokdeclarator): Likewise.\n+\t(build_enumerator): Likewise.\n+\t* init.c (build_new_1): Likewise.\n+\t* call.c (build_new_method_call_1): Likewise.\n+\t* parser.c: Include intl.h.\n+\t(cp_parser_oacc_enter_exit_data): Use %s and ternary operator only for\n+\t\"enter\"/\"exit\" keyword.\n+\t(cp_finalize_oacc_routine): Don't use %s to supply portions of the\n+\tmessage.\n+\n 2017-02-27  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/71568 - SFINAE forming pointer to member function"}, {"sha": "560804ab2d548422604cfd8a1e9cddc231c30fdf", "filename": "gcc/cp/call.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/324ff1a07f9ddde87f91acfa7b16a3c24ba6895c/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/324ff1a07f9ddde87f91acfa7b16a3c24ba6895c/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=324ff1a07f9ddde87f91acfa7b16a3c24ba6895c", "patch": "@@ -8772,8 +8772,8 @@ build_new_method_call_1 (tree instance, tree fns, vec<tree, va_gc> **args,\n \t      else if (DECL_CONSTRUCTOR_P (current_function_decl)\n \t\t       || DECL_DESTRUCTOR_P (current_function_decl))\n \t\twarning (0, (DECL_CONSTRUCTOR_P (current_function_decl)\n-\t\t\t     ? \"pure virtual %q#D called from constructor\"\n-\t\t\t     : \"pure virtual %q#D called from destructor\"),\n+\t\t\t     ? G_(\"pure virtual %q#D called from constructor\")\n+\t\t\t     : G_(\"pure virtual %q#D called from destructor\")),\n \t\t\t fn);\n \t    }\n "}, {"sha": "54cbbb70c01c4db6cd3d8e507103a1047e82c0a8", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/324ff1a07f9ddde87f91acfa7b16a3c24ba6895c/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/324ff1a07f9ddde87f91acfa7b16a3c24ba6895c/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=324ff1a07f9ddde87f91acfa7b16a3c24ba6895c", "patch": "@@ -7224,8 +7224,9 @@ find_decomp_class_base (location_t loc, tree type, tree ret)\n \terror_at (loc, \"cannot decompose non-public member %qD of %qT\",\n \t\t  field, type);\n \tinform (DECL_SOURCE_LOCATION (field),\n-\t\tTREE_PRIVATE (field) ? \"declared private here\"\n-\t\t: \"declared protected here\");\n+\t\tTREE_PRIVATE (field)\n+\t\t? G_(\"declared private here\")\n+\t\t: G_(\"declared protected here\"));\n \treturn error_mark_node;\n       }\n     else\n@@ -11001,8 +11002,8 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t  {\n \t\t    maybe_warn_cpp0x (CPP0X_REF_QUALIFIER);\n \t\t    error ((flags == DTOR_FLAG)\n-\t\t\t   ? \"destructors may not be ref-qualified\"\n-\t\t\t   : \"constructors may not be ref-qualified\");\n+\t\t\t   ? G_(\"destructors may not be ref-qualified\")\n+\t\t\t   : G_(\"constructors may not be ref-qualified\"));\n \t\t    rqual = REF_QUAL_NONE;\n \t\t  }\n \n@@ -14484,9 +14485,10 @@ build_enumerator (tree name, tree value, tree enumtype, tree attributes,\n \t\t\t    }\n \t\t\t  if (type && cxx_dialect < cxx11\n \t\t\t      && itk > itk_unsigned_long)\n-\t\t\t    pedwarn (input_location, OPT_Wlong_long, pos ? \"\\\n-incremented enumerator value is too large for %<unsigned long%>\" :  \"\\\n-incremented enumerator value is too large for %<long%>\");\n+\t\t\t    pedwarn (input_location, OPT_Wlong_long,\n+\t\t\t\t     pos ? G_(\"\\\n+incremented enumerator value is too large for %<unsigned long%>\") : G_(\"\\\n+incremented enumerator value is too large for %<long%>\"));\n \t\t\t}\n \t\t      if (type == NULL_TREE)\n \t\t\toverflowed = true;"}, {"sha": "55209634147777b08c4acc95567510644258ca8e", "filename": "gcc/cp/init.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/324ff1a07f9ddde87f91acfa7b16a3c24ba6895c/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/324ff1a07f9ddde87f91acfa7b16a3c24ba6895c/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=324ff1a07f9ddde87f91acfa7b16a3c24ba6895c", "patch": "@@ -2811,8 +2811,8 @@ build_new_1 (vec<tree, va_gc> **placement, tree type, tree nelts,\n \t{\n \t  pedwarn (EXPR_LOC_OR_LOC (outer_nelts, input_location), OPT_Wvla,\n \t\t   typedef_variant_p (orig_type)\n-\t\t   ? \"non-constant array new length must be specified \"\n-\t\t     \"directly, not by typedef\"\n+\t\t   ? G_(\"non-constant array new length must be specified \"\n+\t\t\t\"directly, not by typedef\")\n \t\t   : G_(\"non-constant array new length must be specified \"\n \t\t\t\"without parentheses around the type-id\"));\n \t}"}, {"sha": "50528e24335fde2c7fe7cc715bdbc37fab5a3e8c", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/324ff1a07f9ddde87f91acfa7b16a3c24ba6895c/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/324ff1a07f9ddde87f91acfa7b16a3c24ba6895c/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=324ff1a07f9ddde87f91acfa7b16a3c24ba6895c", "patch": "@@ -36293,9 +36293,8 @@ cp_parser_oacc_enter_exit_data (cp_parser *parser, cp_token *pragma_tok,\n \n   if (strcmp (p, \"data\") != 0)\n     {\n-      error_at (loc, enter\n-\t\t? \"expected %<data%> after %<#pragma acc enter%>\"\n-\t\t: \"expected %<data%> after %<#pragma acc exit%>\");\n+      error_at (loc, \"expected %<data%> after %<#pragma acc %s%>\",\n+\t\tenter ? \"enter\" : \"exit\");\n       cp_parser_skip_to_pragma_eol (parser, pragma_tok);\n       return NULL_TREE;\n     }\n@@ -37573,8 +37572,10 @@ cp_finalize_oacc_routine (cp_parser *parser, tree fndecl, bool is_defn)\n       if (TREE_USED (fndecl) || (!is_defn && DECL_SAVED_TREE (fndecl)))\n \t{\n \t  error_at (parser->oacc_routine->loc,\n-\t\t    \"%<#pragma acc routine%> must be applied before %s\",\n-\t\t    TREE_USED (fndecl) ? \"use\" : \"definition\");\n+\t\t    TREE_USED (fndecl)\n+\t\t    ? G_(\"%<#pragma acc routine%> must be applied before use\")\n+\t\t    : G_(\"%<#pragma acc routine%> must be applied before \"\n+\t\t\t \"definition\"));\n \t  parser->oacc_routine = NULL;\n \t  return;\n \t}"}, {"sha": "e9432d2cd91706a2aca3c77697e5b0616436ab05", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/324ff1a07f9ddde87f91acfa7b16a3c24ba6895c/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/324ff1a07f9ddde87f91acfa7b16a3c24ba6895c/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=324ff1a07f9ddde87f91acfa7b16a3c24ba6895c", "patch": "@@ -1,3 +1,10 @@\n+2017-02-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* parse.c (parse_critical_block): Use cond ? G_(\"...\") : G_(\"...\")\n+\tinstead of just cond ? \"...\" : \"...\".\n+\t* scanner.c (gfc_next_char_literal): Likewise.\n+\t* match.c (match_exit_cycle): Likewise.\n+\n 2017-02-26  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/51119"}, {"sha": "fc37f227e8a68dae3a903603d7560325a1de0167", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/324ff1a07f9ddde87f91acfa7b16a3c24ba6895c/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/324ff1a07f9ddde87f91acfa7b16a3c24ba6895c/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=324ff1a07f9ddde87f91acfa7b16a3c24ba6895c", "patch": "@@ -2731,8 +2731,8 @@ match_exit_cycle (gfc_statement st, gfc_exec_op op)\n   if (o != NULL)\n     {\n       gfc_error (is_oacc (p)\n-\t\t ? \"%s statement at %C leaving OpenACC structured block\"\n-\t\t : \"%s statement at %C leaving OpenMP structured block\",\n+\t\t ? G_(\"%s statement at %C leaving OpenACC structured block\")\n+\t\t : G_(\"%s statement at %C leaving OpenMP structured block\"),\n \t\t gfc_ascii_statement (st));\n       return MATCH_ERROR;\n     }"}, {"sha": "3c568ee8c838e288af1e3d32d26d1ccc38fc55ff", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/324ff1a07f9ddde87f91acfa7b16a3c24ba6895c/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/324ff1a07f9ddde87f91acfa7b16a3c24ba6895c/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=324ff1a07f9ddde87f91acfa7b16a3c24ba6895c", "patch": "@@ -4340,8 +4340,8 @@ parse_critical_block (void)\n   for (sd = gfc_state_stack; sd; sd = sd->previous)\n     if (sd->state == COMP_OMP_STRUCTURED_BLOCK)\n       gfc_error_now (is_oacc (sd)\n-\t\t     ? \"CRITICAL block inside of OpenACC region at %C\"\n-\t\t     : \"CRITICAL block inside of OpenMP region at %C\");\n+\t\t     ? G_(\"CRITICAL block inside of OpenACC region at %C\")\n+\t\t     : G_(\"CRITICAL block inside of OpenMP region at %C\"));\n \n   s.ext.end_do_label = new_st.label1;\n "}, {"sha": "82f431da52799f1ce4d3fdd9c15ce88d58f2366c", "filename": "gcc/fortran/scanner.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/324ff1a07f9ddde87f91acfa7b16a3c24ba6895c/gcc%2Ffortran%2Fscanner.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/324ff1a07f9ddde87f91acfa7b16a3c24ba6895c/gcc%2Ffortran%2Fscanner.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fscanner.c?ref=324ff1a07f9ddde87f91acfa7b16a3c24ba6895c", "patch": "@@ -1406,10 +1406,11 @@ gfc_next_char_literal (gfc_instring in_string)\n \t      if (i == 4)\n \t\told_loc = gfc_current_locus;\n \t    }\n-\t  gfc_error (is_openmp ? \"Wrong OpenACC continuation at %C: \"\n-\t\t     \"expected !$ACC, got !$OMP\"\n-\t\t     : \"Wrong OpenMP continuation at %C: \"\n-\t\t     \"expected !$OMP, got !$ACC\");\n+\t  gfc_error (is_openmp\n+\t\t     ? G_(\"Wrong OpenACC continuation at %C: \"\n+\t\t\t  \"expected !$ACC, got !$OMP\")\n+\t\t     : G_(\"Wrong OpenMP continuation at %C: \"\n+\t\t\t  \"expected !$OMP, got !$ACC\"));\n \t}\n \n       if (c != '&')\n@@ -1502,10 +1503,11 @@ gfc_next_char_literal (gfc_instring in_string)\n \t      if (gfc_wide_tolower (c) != (unsigned char) \"*$acc\"[i])\n \t\tis_openmp = 1;\n \t    }\n-\t  gfc_error (is_openmp ? \"Wrong OpenACC continuation at %C: \"\n-\t\t     \"expected !$ACC, got !$OMP\"\n-\t\t     : \"Wrong OpenMP continuation at %C: \"\n-\t\t     \"expected !$OMP, got !$ACC\");\n+\t  gfc_error (is_openmp\n+\t\t     ? G_(\"Wrong OpenACC continuation at %C: \"\n+\t\t\t  \"expected !$ACC, got !$OMP\")\n+\t\t     : G_(\"Wrong OpenMP continuation at %C: \"\n+\t\t\t  \"expected !$OMP, got !$ACC\"));\n \t}\n       else if (!openmp_flag && !openacc_flag)\n \tfor (i = 0; i < 5; i++)"}, {"sha": "06880c1d182164a56208b85ceb1ccbac6cd95aa1", "filename": "gcc/gcov.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/324ff1a07f9ddde87f91acfa7b16a3c24ba6895c/gcc%2Fgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/324ff1a07f9ddde87f91acfa7b16a3c24ba6895c/gcc%2Fgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov.c?ref=324ff1a07f9ddde87f91acfa7b16a3c24ba6895c", "patch": "@@ -1669,7 +1669,10 @@ read_count_file (function_t *fns)\n       gcov_sync (base, length);\n       if ((error = gcov_is_error ()))\n \t{\n-\t  fnotice (stderr, error < 0 ? \"%s:overflowed\\n\" : \"%s:corrupted\\n\",\n+\t  fnotice (stderr,\n+\t\t   error < 0\n+\t\t   ? N_(\"%s:overflowed\\n\")\n+\t\t   : N_(\"%s:corrupted\\n\"),\n \t\t   da_file_name);\n \t  goto cleanup;\n \t}"}, {"sha": "520bb91b8bf0300290b1cace885295a4ce4ae686", "filename": "gcc/omp-offload.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/324ff1a07f9ddde87f91acfa7b16a3c24ba6895c/gcc%2Fomp-offload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/324ff1a07f9ddde87f91acfa7b16a3c24ba6895c/gcc%2Fomp-offload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-offload.c?ref=324ff1a07f9ddde87f91acfa7b16a3c24ba6895c", "patch": "@@ -45,6 +45,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"lto-section-names.h\"\n #include \"gomp-constants.h\"\n #include \"gimple-pretty-print.h\"\n+#include \"intl.h\"\n \n /* Describe the OpenACC looping structure of a function.  The entire\n    function is held in a 'NULL' loop.  */\n@@ -1117,9 +1118,9 @@ oacc_loop_fixed_partitions (oacc_loop *loop, unsigned outer_mask)\n \t  if (noisy)\n \t    error_at (loop->loc,\n \t\t      seq_par\n-\t\t      ? \"%<seq%> overrides other OpenACC loop specifiers\"\n-\t\t      : \"%<auto%> conflicts with other OpenACC loop \"\n-\t\t      \"specifiers\");\n+\t\t      ? G_(\"%<seq%> overrides other OpenACC loop specifiers\")\n+\t\t      : G_(\"%<auto%> conflicts with other OpenACC loop \"\n+\t\t\t   \"specifiers\"));\n \t  maybe_auto = false;\n \t  loop->flags &= ~OLF_AUTO;\n \t  if (seq_par)"}]}