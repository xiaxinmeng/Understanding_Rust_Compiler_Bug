{"sha": "de6a431bee95a409f848f3f2276bf026c4e7272a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGU2YTQzMWJlZTk1YTQwOWY4NDhmM2YyMjc2YmYwMjZjNGU3MjcyYQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-01-15T21:29:48Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-01-15T21:29:48Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r189", "tree": {"sha": "3ed3cdad3c795d6a6fc766e82e799ebc659f6001", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ed3cdad3c795d6a6fc766e82e799ebc659f6001"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de6a431bee95a409f848f3f2276bf026c4e7272a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de6a431bee95a409f848f3f2276bf026c4e7272a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de6a431bee95a409f848f3f2276bf026c4e7272a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de6a431bee95a409f848f3f2276bf026c4e7272a/comments", "author": null, "committer": null, "parents": [{"sha": "e1c8bbf44b25e3a811a415a9294ea11bd4a4c3f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1c8bbf44b25e3a811a415a9294ea11bd4a4c3f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1c8bbf44b25e3a811a415a9294ea11bd4a4c3f6"}], "stats": {"total": 43, "additions": 31, "deletions": 12}, "files": [{"sha": "a3c7979d01b54905d412b2b187250845fa924a4a", "filename": "gcc/genoutput.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de6a431bee95a409f848f3f2276bf026c4e7272a/gcc%2Fgenoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de6a431bee95a409f848f3f2276bf026c4e7272a/gcc%2Fgenoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenoutput.c?ref=de6a431bee95a409f848f3f2276bf026c4e7272a", "patch": "@@ -1,5 +1,5 @@\n /* Generate code from to output assembler insns as recognized from rtl.\n-   Copyright (C) 1987-1991 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 1988, 1991 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -424,12 +424,12 @@ scan_operands (part, this_address_p, this_strict_low)\n \tmax_opno = opno;\n       if (max_opno >= MAX_MAX_OPERANDS)\n \t{\n-\t  error (\"Too many operands (%d) in instruction pattern %d.\\n\",\n+\t  error (\"Too many operands (%d) in definition %d.\\n\",\n \t\t max_opno + 1, next_index_number);\n \t  return;\n \t}\n       if (seen[opno])\n-\terror (\"Insn pattern %d specified operand number %d more than once.\\n\",\n+\terror (\"Definition %d specified operand number %d more than once.\\n\",\n \t       next_index_number, opno);\n       seen[opno] = 1;\n       modes[opno] = GET_MODE (part);\n@@ -450,12 +450,12 @@ scan_operands (part, this_address_p, this_strict_low)\n \tmax_opno = opno;\n       if (max_opno >= MAX_MAX_OPERANDS)\n \t{\n-\t  error (\"Too many operands (%d) in instruction pattern %d.\\n\",\n+\t  error (\"Too many operands (%d) in definition %d.\\n\",\n \t\t max_opno + 1, next_index_number);\n \t  return;\n \t}\n       if (seen[opno])\n-\terror (\"Insn pattern %d specified operand number %d more than once.\\n\",\n+\terror (\"Definition %d specified operand number %d more than once.\\n\",\n \t       next_index_number, opno);\n       seen[opno] = 1;\n       modes[opno] = GET_MODE (part);\n@@ -477,12 +477,12 @@ scan_operands (part, this_address_p, this_strict_low)\n \tmax_opno = opno;\n       if (max_opno >= MAX_MAX_OPERANDS)\n \t{\n-\t  error (\"Too many operands (%d) in instruction pattern %d.\\n\",\n+\t  error (\"Too many operands (%d) in definition %d.\\n\",\n \t\t max_opno + 1, next_index_number);\n \t  return;\n \t}\n       if (seen[opno])\n-\terror (\"Insn pattern %d specified operand number %d more than once.\\n\",\n+\terror (\"Definition %d specified operand number %d more than once.\\n\",\n \t       next_index_number, opno);\n       seen[opno] = 1;\n       modes[opno] = GET_MODE (part);"}, {"sha": "a8b0372558ad3e3996406d50a0e4770671c71d6d", "filename": "gcc/genrecog.c", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de6a431bee95a409f848f3f2276bf026c4e7272a/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de6a431bee95a409f848f3f2276bf026c4e7272a/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=de6a431bee95a409f848f3f2276bf026c4e7272a", "patch": "@@ -1,5 +1,5 @@\n /* Generate code from machine description to recognize rtl as insns.\n-   Copyright (C) 1987-1991 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 1988, 1991 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -81,7 +81,7 @@ struct decision\n   int test_elt_zero_int;\t/* Nonzero if should test XINT (rtl, 0) */\n   int elt_zero_int;\t\t/* Required value for XINT (rtl, 0) */\n   int test_elt_one_int;\t\t/* Nonzero if should test XINT (rtl, 1) */\n-  int elt_one_int;\t\t/* Required value for XINT (rtl, 2) */\n+  int elt_one_int;\t\t/* Required value for XINT (rtl, 1) */\n   char *tests;\t\t\t/* If nonzero predicate to call */\n   int pred;\t\t\t/* `preds' index of predicate or -1 */\n   char *c_test;\t\t\t/* Additional test to perform */\n@@ -824,11 +824,30 @@ merge_trees (oldh, addh)\n \t\t    }\n \t\t}\n \n-\t      old->success = merge_trees (old->success, add->success);\n \t      if (old->insn_code_number >= 0 && add->insn_code_number >= 0)\n-\t\tfatal (\"Two actions at one point in tree\");\n+\t\t{\n+\t\t  /* If one node is for a normal insn and the second is\n+\t\t     for the base insn with clobbers stripped off, the\n+\t\t     second node should be ignored.  */\n+\n+\t\t  if (old->num_clobbers_to_add == 0\n+\t\t      && add->num_clobbers_to_add > 0)\n+\t\t    /* Nothing to do here.  */\n+\t\t    ;\n+\t\t  else if (old->num_clobbers_to_add > 0\n+\t\t\t   && add->num_clobbers_to_add == 0)\n+\t\t    {\n+\t\t      /* In this case, replace OLD with ADD.  */\n+\t\t      old->insn_code_number = add->insn_code_number;\n+\t\t      old->num_clobbers_to_add = 0;\n+\t\t    }\n+\t\t  else\n+\t\t    fatal (\"Two actions at one point in tree\");\n+\t\t}\n+\n \t      if (old->insn_code_number == -1)\n \t\told->insn_code_number = add->insn_code_number;\n+\t      old->success = merge_trees (old->success, add->success);\n \t      add = 0;\n \t      break;\n \t    }\n@@ -1609,7 +1628,7 @@ fatal (s, a1, a2)\n   fprintf (stderr, \"genrecog: \");\n   fprintf (stderr, s, a1, a2);\n   fprintf (stderr, \"\\n\");\n-  fprintf (stderr, \"after %d instruction definitions\\n\", next_index);\n+  fprintf (stderr, \"after %d definitions\\n\", next_index);\n   exit (FATAL_EXIT_CODE);\n }\n "}]}