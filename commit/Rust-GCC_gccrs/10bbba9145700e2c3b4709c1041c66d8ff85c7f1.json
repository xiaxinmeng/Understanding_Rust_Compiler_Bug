{"sha": "10bbba9145700e2c3b4709c1041c66d8ff85c7f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTBiYmJhOTE0NTcwMGUyYzNiNDcwOWMxMDQxYzY2ZDhmZjg1YzdmMQ==", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2020-12-13T13:53:48Z"}, "committer": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2020-12-13T13:53:48Z"}, "message": "middle-end: Refactor and expose some vectorizer helper functions.\n\nThis is a small refactoring which exposes some helper functions in the\nvectorizer so they can be used in other places.\n\ngcc/ChangeLog:\n\n\t* tree-vect-patterns.c (vect_mark_pattern_stmts): Remove static inline.\n\t* tree-vect-slp.c (vect_create_new_slp_node): Remove static and only\n\tset smts if valid.\n\t* tree-vectorizer.c (vec_info::add_pattern_stmt): New.\n\t(vec_info::set_vinfo_for_stmt): Optionally enforce read-only.\n\t* tree-vectorizer.h (struct _slp_tree): Use new types.\n\t(lane_permutation_t, lane_permutation_t): New.\n\t(vect_create_new_slp_node, vect_mark_pattern_stmts): New.", "tree": {"sha": "b8c7d225b028590a0716073890e91419bb899974", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8c7d225b028590a0716073890e91419bb899974"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10bbba9145700e2c3b4709c1041c66d8ff85c7f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10bbba9145700e2c3b4709c1041c66d8ff85c7f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10bbba9145700e2c3b4709c1041c66d8ff85c7f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10bbba9145700e2c3b4709c1041c66d8ff85c7f1/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "501f470267445e037614649639d17a1b32b4a9aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/501f470267445e037614649639d17a1b32b4a9aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/501f470267445e037614649639d17a1b32b4a9aa"}], "stats": {"total": 41, "additions": 32, "deletions": 9}, "files": [{"sha": "ff1358ae79ab523c9baa5baaf5ca3f4d144ff45e", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10bbba9145700e2c3b4709c1041c66d8ff85c7f1/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10bbba9145700e2c3b4709c1041c66d8ff85c7f1/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=10bbba9145700e2c3b4709c1041c66d8ff85c7f1", "patch": "@@ -5281,7 +5281,7 @@ const unsigned int NUM_PATTERNS = ARRAY_SIZE (vect_vect_recog_func_ptrs);\n \n /* Mark statements that are involved in a pattern.  */\n \n-static inline void\n+void\n vect_mark_pattern_stmts (vec_info *vinfo,\n \t\t\t stmt_vec_info orig_stmt_info, gimple *pattern_stmt,\n                          tree pattern_vectype)"}, {"sha": "03174fecc365a5a9c9f53fd1c1d6c6f946e1260d", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10bbba9145700e2c3b4709c1041c66d8ff85c7f1/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10bbba9145700e2c3b4709c1041c66d8ff85c7f1/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=10bbba9145700e2c3b4709c1041c66d8ff85c7f1", "patch": "@@ -176,15 +176,18 @@ vect_free_slp_instance (slp_instance instance)\n \n /* Create an SLP node for SCALAR_STMTS.  */\n \n-static slp_tree\n+slp_tree\n vect_create_new_slp_node (slp_tree node,\n \t\t\t  vec<stmt_vec_info> scalar_stmts, unsigned nops)\n {\n   SLP_TREE_SCALAR_STMTS (node) = scalar_stmts;\n   SLP_TREE_CHILDREN (node).create (nops);\n   SLP_TREE_DEF_TYPE (node) = vect_internal_def;\n-  SLP_TREE_REPRESENTATIVE (node) = scalar_stmts[0];\n-  SLP_TREE_LANES (node) = scalar_stmts.length ();\n+  if (scalar_stmts.exists ())\n+    {\n+      SLP_TREE_REPRESENTATIVE (node) = scalar_stmts[0];\n+      SLP_TREE_LANES (node) = scalar_stmts.length ();\n+    }\n   return node;\n }\n "}, {"sha": "39928496179a251f57c3abd2dff93a5e14ddb9b2", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10bbba9145700e2c3b4709c1041c66d8ff85c7f1/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10bbba9145700e2c3b4709c1041c66d8ff85c7f1/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=10bbba9145700e2c3b4709c1041c66d8ff85c7f1", "patch": "@@ -525,6 +525,19 @@ vec_info::add_stmt (gimple *stmt)\n   return res;\n }\n \n+/* Record that STMT belongs to the vectorizable region.  Create a new\n+   stmt_vec_info and mark VECINFO as being related and return the new\n+   stmt_vec_info.  */\n+\n+stmt_vec_info\n+vec_info::add_pattern_stmt (gimple *stmt, stmt_vec_info stmt_info)\n+{\n+  stmt_vec_info res = new_stmt_vec_info (stmt);\n+  set_vinfo_for_stmt (stmt, res, false);\n+  STMT_VINFO_RELATED_STMT (res) = stmt_info;\n+  return res;\n+}\n+\n /* If STMT has an associated stmt_vec_info, return that vec_info, otherwise\n    return null.  It is safe to call this function on any statement, even if\n    it might not be part of the vectorizable region.  */\n@@ -702,12 +715,12 @@ vec_info::new_stmt_vec_info (gimple *stmt)\n /* Associate STMT with INFO.  */\n \n void\n-vec_info::set_vinfo_for_stmt (gimple *stmt, stmt_vec_info info)\n+vec_info::set_vinfo_for_stmt (gimple *stmt, stmt_vec_info info, bool check_ro)\n {\n   unsigned int uid = gimple_uid (stmt);\n   if (uid == 0)\n     {\n-      gcc_assert (!stmt_vec_info_ro);\n+      gcc_assert (!check_ro || !stmt_vec_info_ro);\n       gcc_checking_assert (info);\n       uid = stmt_vec_infos.length () + 1;\n       gimple_set_uid (stmt, uid);"}, {"sha": "d130ba67c5ed55e4d019f7a19a2e8ba05f25cea0", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10bbba9145700e2c3b4709c1041c66d8ff85c7f1/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10bbba9145700e2c3b4709c1041c66d8ff85c7f1/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=10bbba9145700e2c3b4709c1041c66d8ff85c7f1", "patch": "@@ -114,6 +114,8 @@ typedef hash_map<tree_operand_hash,\n   SLP\n  ************************************************************************/\n typedef struct _slp_tree *slp_tree;\n+typedef vec<std::pair<unsigned, unsigned> > lane_permutation_t;\n+typedef vec<unsigned> load_permutation_t;\n \n /* A computation tree of an SLP instance.  Each node corresponds to a group of\n    stmts to be packed in a SIMD stmt.  */\n@@ -134,11 +136,11 @@ struct _slp_tree {\n \n   /* Load permutation relative to the stores, NULL if there is no\n      permutation.  */\n-  vec<unsigned> load_permutation;\n+  load_permutation_t load_permutation;\n   /* Lane permutation of the operands scalar lanes encoded as pairs\n      of { operand number, lane number }.  The number of elements\n      denotes the number of output lanes.  */\n-  vec<std::pair<unsigned, unsigned> > lane_permutation;\n+  lane_permutation_t lane_permutation;\n \n   tree vectype;\n   /* Vectorized stmt/s.  */\n@@ -362,6 +364,7 @@ class vec_info {\n   ~vec_info ();\n \n   stmt_vec_info add_stmt (gimple *);\n+  stmt_vec_info add_pattern_stmt (gimple *, stmt_vec_info);\n   stmt_vec_info lookup_stmt (gimple *);\n   stmt_vec_info lookup_def (tree);\n   stmt_vec_info lookup_single_use (tree);\n@@ -407,7 +410,7 @@ class vec_info {\n \n private:\n   stmt_vec_info new_stmt_vec_info (gimple *stmt);\n-  void set_vinfo_for_stmt (gimple *, stmt_vec_info);\n+  void set_vinfo_for_stmt (gimple *, stmt_vec_info, bool = true);\n   void free_stmt_vec_infos ();\n   void free_stmt_vec_info (stmt_vec_info);\n };\n@@ -2005,8 +2008,12 @@ extern void duplicate_and_interleave (vec_info *, gimple_seq *, tree,\n \t\t\t\t      vec<tree>, unsigned int, vec<tree> &);\n extern int vect_get_place_in_interleaving_chain (stmt_vec_info, stmt_vec_info);\n extern bool vect_update_shared_vectype (stmt_vec_info, tree);\n+extern slp_tree vect_create_new_slp_node (vec<stmt_vec_info>, unsigned);\n \n /* In tree-vect-patterns.c.  */\n+extern void\n+vect_mark_pattern_stmts (vec_info *, stmt_vec_info, gimple *, tree);\n+\n /* Pattern recognition functions.\n    Additional pattern recognition functions can (and will) be added\n    in the future.  */"}]}