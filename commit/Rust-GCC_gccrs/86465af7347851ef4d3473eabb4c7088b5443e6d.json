{"sha": "86465af7347851ef4d3473eabb4c7088b5443e6d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODY0NjVhZjczNDc4NTFlZjRkMzQ3M2VhYmI0YzcwODhiNTQ0M2U2ZA==", "commit": {"author": {"name": "David S. Miller", "email": "davem@pierdol.cobaltmicro.com", "date": "1998-09-12T01:03:36Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "1998-09-12T01:03:36Z"}, "message": "flow.c (mark_set_1): Recognize multi-register structure return values in CALL insns.\n\n\t* flow.c (mark_set_1): Recognize multi-register structure return\n\tvalues in CALL insns.\n\t(mark_used_regs): Likewise.\n\t(count_reg_sets_1): Likewise.\n\t(count_reg_references):\tLikewise.\n\t* rtlanal.c (note_stores): Likewise.\n\nFrom-SVN: r22395", "tree": {"sha": "6a94719da1d0636b9e8e23c1c16030b3eb36f44a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a94719da1d0636b9e8e23c1c16030b3eb36f44a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/86465af7347851ef4d3473eabb4c7088b5443e6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86465af7347851ef4d3473eabb4c7088b5443e6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86465af7347851ef4d3473eabb4c7088b5443e6d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86465af7347851ef4d3473eabb4c7088b5443e6d/comments", "author": null, "committer": null, "parents": [{"sha": "b5754a68c62048dc0e0dd34afbe5a99a3df042f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5754a68c62048dc0e0dd34afbe5a99a3df042f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5754a68c62048dc0e0dd34afbe5a99a3df042f9"}], "stats": {"total": 68, "additions": 60, "deletions": 8}, "files": [{"sha": "63646a0f67af8dcae70135aa46cd533ba64a515d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86465af7347851ef4d3473eabb4c7088b5443e6d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86465af7347851ef4d3473eabb4c7088b5443e6d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=86465af7347851ef4d3473eabb4c7088b5443e6d", "patch": "@@ -1,3 +1,12 @@\n+Fri Sep 11 23:55:54 1998  David S. Miller  <davem@pierdol.cobaltmicro.com>\n+\n+\t* flow.c (mark_set_1): Recognize multi-register structure return\n+\tvalues in CALL insns.\n+\t(mark_used_regs): Likewise.\n+\t(count_reg_sets_1): Likewise.\n+\t(count_reg_references):\tLikewise.\n+\t* rtlanal.c (note_stores): Likewise.\n+\n Fri Sep 11 22:57:55 1998  Eric Dumazet  <dumazet@cosmosbay.com>\n \n \t* config/i386/sco5.h (ASM_WEAKEN_LABEL): Defined as in svr4.h."}, {"sha": "a7ce4a367e003ada7559de55b5362fbc5bb65bfb", "filename": "gcc/flow.c", "status": "modified", "additions": 32, "deletions": 6, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86465af7347851ef4d3473eabb4c7088b5443e6d/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86465af7347851ef4d3473eabb4c7088b5443e6d/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=86465af7347851ef4d3473eabb4c7088b5443e6d", "patch": "@@ -2133,6 +2133,19 @@ mark_set_1 (needed, dead, x, insn, significant)\n   register int regno;\n   register rtx reg = SET_DEST (x);\n \n+  /* Some targets place small structures in registers for\n+     return values of functions.  We have to detect this\n+     case specially here to get correct flow information.  */\n+  if (GET_CODE (reg) == PARALLEL\n+      && GET_MODE (reg) == BLKmode)\n+    {\n+      register int i;\n+\n+      for (i = XVECLEN (reg, 0) - 1; i >= 0; i--)\n+\t  mark_set_1 (needed, dead, XVECEXP (reg, 0, i), insn, significant);\n+      return;\n+    }\n+\n   /* Modifying just one hardware register of a multi-reg value\n      or just a byte field of a register\n      does not mean the value from before this insn is now dead.\n@@ -2794,15 +2807,17 @@ mark_used_regs (needed, live, x, final, insn)\n \t/* If this is a store into a register,\n \t   recursively scan the value being stored.  */\n \n-\tif (GET_CODE (testreg) == REG\n-\t    && (regno = REGNO (testreg), regno != FRAME_POINTER_REGNUM)\n+\tif ((GET_CODE (testreg) == PARALLEL\n+\t     && GET_MODE (testreg) == BLKmode)\n+\t    || (GET_CODE (testreg) == REG\n+\t\t&& (regno = REGNO (testreg), regno != FRAME_POINTER_REGNUM)\n #if FRAME_POINTER_REGNUM != HARD_FRAME_POINTER_REGNUM\n-\t    && regno != HARD_FRAME_POINTER_REGNUM\n+\t\t&& regno != HARD_FRAME_POINTER_REGNUM\n #endif\n #if FRAME_POINTER_REGNUM != ARG_POINTER_REGNUM\n-\t    && ! (regno == ARG_POINTER_REGNUM && fixed_regs[regno])\n+\t\t&& ! (regno == ARG_POINTER_REGNUM && fixed_regs[regno])\n #endif\n-\t    )\n+\t\t))\n \t  /* We used to exclude global_regs here, but that seems wrong.\n \t     Storing in them is like storing in mem.  */\n \t  {\n@@ -4043,6 +4058,15 @@ count_reg_sets_1 (x)\n \t || GET_CODE (reg) == STRICT_LOW_PART)\n     reg = XEXP (reg, 0);\n \n+  if (GET_CODE (reg) == PARALLEL\n+      && GET_MODE (reg) == BLKmode)\n+    {\n+      register int i;\n+      for (i = XVECLEN (reg, 0) - 1; i >= 0; i--)\n+\tcount_reg_sets_1 (XVECEXP (reg, 0, i));\n+      return;\n+    }\n+\n   if (GET_CODE (reg) == REG)\n     {\n       regno = REGNO (reg);\n@@ -4175,7 +4199,9 @@ count_reg_references (x)\n \t/* If this is a store into a register,\n \t   recursively scan the value being stored.  */\n \n-\tif (GET_CODE (testreg) == REG)\n+\tif ((GET_CODE (testreg) == PARALLEL\n+\t     && GET_MODE (testreg) == BLKmode)\n+\t    || GET_CODE (testreg) == REG)\n \t  {\n \t    count_reg_references (SET_SRC (x));\n \t    if (mark_dest)"}, {"sha": "41625ee28686ede6d1b133842354040bab477077", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86465af7347851ef4d3473eabb4c7088b5443e6d/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86465af7347851ef4d3473eabb4c7088b5443e6d/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=86465af7347851ef4d3473eabb4c7088b5443e6d", "patch": "@@ -1086,7 +1086,16 @@ note_stores (x, fun)\n \t     || GET_CODE (dest) == SIGN_EXTRACT\n \t     || GET_CODE (dest) == STRICT_LOW_PART)\n \tdest = XEXP (dest, 0);\n-      (*fun) (dest, x);\n+\n+      if (GET_CODE (dest) == PARALLEL\n+\t  && GET_MODE (dest) == BLKmode)\n+\t{\n+\t  register int i;\n+\t  for (i = XVECLEN (dest, 0) - 1; i >= 0; i--)\n+\t    (*fun) (SET_DEST (XVECEXP (dest, 0, i)), x);\n+\t}\n+      else\n+\t(*fun) (dest, x);\n     }\n   else if (GET_CODE (x) == PARALLEL)\n     {\n@@ -1105,7 +1114,15 @@ note_stores (x, fun)\n \t\t     || GET_CODE (dest) == SIGN_EXTRACT\n \t\t     || GET_CODE (dest) == STRICT_LOW_PART)\n \t\tdest = XEXP (dest, 0);\n-\t      (*fun) (dest, y);\n+\t      if (GET_CODE (dest) == PARALLEL\n+\t\t  && GET_MODE (dest) == BLKmode)\n+\t\t{\n+\t\t  register int i;\n+\t\t  for (i = XVECLEN (dest, 0) - 1; i >= 0; i--)\n+\t\t    (*fun) (SET_DEST (XVECEXP (dest, 0, i)), y);\n+\t\t}\n+\t      else\n+\t\t(*fun) (dest, y);\n \t    }\n \t}\n     }"}]}