{"sha": "5db2e9ca7dc5ab9bac4baad91c224ba7d8fc0c45", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWRiMmU5Y2E3ZGM1YWI5YmFjNGJhYWQ5MWMyMjRiYTdkOGZjMGM0NQ==", "commit": {"author": {"name": "Doug Kwan", "email": "dougkwan@google.com", "date": "2008-01-13T00:22:38Z"}, "committer": {"name": "Doug Kwan", "email": "dougkwan@gcc.gnu.org", "date": "2008-01-13T00:22:38Z"}, "message": "c-decl.c: (grokdeclarator): Use OPT_Wignored_qualifiers instead of OPT_Wreturn_type in...\n\nChangeLog:\n\n2008-01-12  Doug Kwan  <dougkwan@google.com>\n\n\t* c-decl.c: (grokdeclarator): Use OPT_Wignored_qualifiers\n\tinstead of OPT_Wreturn_type in warning due to ignored return type\n\tqualifiers.\n\t* c-opt.c (c_common_post_option): Add -Wignored-qualifiers to\n\toptions included in -Wextra.\n\t* c.opt: New option -Wignored_qualifiers.\n\t* doc/invoke.texi (Warning Options, -Wextra): Add new option\n\t-Wignore_qualifiers.\n\t(-Wignored-qualifiers): Document.\n\t(-Wreturn-type): Remove description of functionality now handled\n\tby -Wignored-qualifiers.\n\ncp/ChangeLog:\n\n2008-01-12  Doug Kwan  <dougkwan@google.com>\n\n\t* decl.c: (grokdeclarator): Use OPT_Wignored_qualifiers\n\tinstead of OPT_Wreturn_type in warning due to ignored return type\n\tqualifiers.\n\t* pt.c: (tsubst_function_type): Use OPT_Wignored_qualifiers\n\tinstead of OPT_Wreturn_type in warning due to ignored return type\n\tqualifiers.\n\ntestsuite/ChangeLog:\n\n2008-01-12  Doug Kwan  <dougkwan@google.com>\n\n\t* gcc.dg/qual-return-1.c: Add -Wignored-qualifiers.\n\t* g++.dg/warn/Wreturn-type-4.C: Replace -Wreturn-type by\n\t-Wignored-qualifiers.\n\nFrom-SVN: r131499", "tree": {"sha": "e1ab0d8cbc735be34bf3b43df3a196670e70025b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1ab0d8cbc735be34bf3b43df3a196670e70025b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5db2e9ca7dc5ab9bac4baad91c224ba7d8fc0c45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5db2e9ca7dc5ab9bac4baad91c224ba7d8fc0c45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5db2e9ca7dc5ab9bac4baad91c224ba7d8fc0c45", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5db2e9ca7dc5ab9bac4baad91c224ba7d8fc0c45/comments", "author": {"login": "dougkwan", "id": 1399231, "node_id": "MDQ6VXNlcjEzOTkyMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1399231?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dougkwan", "html_url": "https://github.com/dougkwan", "followers_url": "https://api.github.com/users/dougkwan/followers", "following_url": "https://api.github.com/users/dougkwan/following{/other_user}", "gists_url": "https://api.github.com/users/dougkwan/gists{/gist_id}", "starred_url": "https://api.github.com/users/dougkwan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dougkwan/subscriptions", "organizations_url": "https://api.github.com/users/dougkwan/orgs", "repos_url": "https://api.github.com/users/dougkwan/repos", "events_url": "https://api.github.com/users/dougkwan/events{/privacy}", "received_events_url": "https://api.github.com/users/dougkwan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7219c2c7d309f8a8f3695d82462351bb06bce542", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7219c2c7d309f8a8f3695d82462351bb06bce542", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7219c2c7d309f8a8f3695d82462351bb06bce542"}], "stats": {"total": 71, "additions": 56, "deletions": 15}, "files": [{"sha": "9595419ad8033ad34cf47cafcac3f99450d4b39f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5db2e9ca7dc5ab9bac4baad91c224ba7d8fc0c45/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5db2e9ca7dc5ab9bac4baad91c224ba7d8fc0c45/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5db2e9ca7dc5ab9bac4baad91c224ba7d8fc0c45", "patch": "@@ -1,3 +1,17 @@\n+2008-01-12  Doug Kwan  <dougkwan@google.com>\n+\n+\t* c-decl.c: (grokdeclarator): Use OPT_Wignored_qualifiers\n+\tinstead of OPT_Wreturn_type in warning due to ignored return type\n+\tqualifiers.\n+\t* c-opt.c (c_common_post_option): Add -Wignored-qualifiers to\n+\toptions included in -Wextra.\n+\t* c.opt: New option -Wignored_qualifiers.\n+\t* doc/invoke.texi (Warning Options, -Wextra): Add new option\n+\t-Wignore_qualifiers.\n+\t(-Wignored-qualifiers): Document.\n+\t(-Wreturn-type): Remove description of functionality now handled\n+\tby -Wignored-qualifiers.\n+\n 2008-01-12  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR ada/33788"}, {"sha": "9237a75491a5513687cb9fba0eae8236d4d50760", "filename": "gcc/c-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5db2e9ca7dc5ab9bac4baad91c224ba7d8fc0c45/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5db2e9ca7dc5ab9bac4baad91c224ba7d8fc0c45/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=5db2e9ca7dc5ab9bac4baad91c224ba7d8fc0c45", "patch": "@@ -4526,7 +4526,7 @@ grokdeclarator (const struct c_declarator *declarator,\n \t\tif (VOID_TYPE_P (type) && really_funcdef)\n \t\t  pedwarn (\"function definition has qualified void return type\");\n \t\telse\n-\t\t  warning (OPT_Wreturn_type,\n+\t\t  warning (OPT_Wignored_qualifiers,\n \t\t\t   \"type qualifiers ignored on function return type\");\n \n \t\ttype = c_build_qualified_type (type, type_quals);"}, {"sha": "951118c51b53308afc44dfc5372f7efebe4df22a", "filename": "gcc/c-opts.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5db2e9ca7dc5ab9bac4baad91c224ba7d8fc0c45/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5db2e9ca7dc5ab9bac4baad91c224ba7d8fc0c45/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=5db2e9ca7dc5ab9bac4baad91c224ba7d8fc0c45", "patch": "@@ -1064,7 +1064,7 @@ c_common_post_options (const char **pfilename)\n   /* -Wextra implies -Wtype-limits, -Wclobbered, \n      -Wempty-body, -Wsign-compare, \n      -Wmissing-field-initializers, -Wmissing-parameter-type\n-     -Wold-style-declaration, and -Woverride-init, \n+     -Wold-style-declaration, -Woverride-init and -Wignored-qualifiers\n      but not if explicitly overridden.  */\n   if (warn_type_limits == -1)\n     warn_type_limits = extra_warnings;\n@@ -1082,6 +1082,8 @@ c_common_post_options (const char **pfilename)\n     warn_old_style_declaration = extra_warnings;\n   if (warn_override_init == -1)\n     warn_override_init = extra_warnings;\n+  if (warn_ignored_qualifiers == -1)\n+    warn_ignored_qualifiers = extra_warnings;\n \n   /* -Wpointer_sign is disabled by default, but it is enabled if any\n      of -Wall or -pedantic are given.  */"}, {"sha": "37045197bf18954496db1c3e76ef11db5311cc08", "filename": "gcc/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5db2e9ca7dc5ab9bac4baad91c224ba7d8fc0c45/gcc%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5db2e9ca7dc5ab9bac4baad91c224ba7d8fc0c45/gcc%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc.opt?ref=5db2e9ca7dc5ab9bac4baad91c224ba7d8fc0c45", "patch": "@@ -242,6 +242,10 @@ Warn about zero-length formats\n Wformat=\n C ObjC C++ ObjC++ Joined Warning\n \n+Wignored-qualifiers\n+C C++ Var(warn_ignored_qualifiers) Init(-1) Warning\n+Warn whenever type qualifiers are ignored.\n+\n Winit-self\n C ObjC C++ ObjC++ Var(warn_init_self) Warning\n Warn about variables which are initialized to themselves"}, {"sha": "c46c07251a4552dc188174993ca256b3a5d18d10", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5db2e9ca7dc5ab9bac4baad91c224ba7d8fc0c45/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5db2e9ca7dc5ab9bac4baad91c224ba7d8fc0c45/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5db2e9ca7dc5ab9bac4baad91c224ba7d8fc0c45", "patch": "@@ -1,3 +1,12 @@\n+2008-01-12  Doug Kwan  <dougkwan@google.com>\n+\n+\t* decl.c: (grokdeclarator): Use OPT_Wignored_qualifiers\n+\tinstead of OPT_Wreturn_type in warning due to ignored return type\n+\tqualifiers.\n+\t* pt.c: (tsubst_function_type): Use OPT_Wignored_qualifiers\n+\tinstead of OPT_Wreturn_type in warning due to ignored return type\n+\tqualifiers.\n+\n 2008-01-08  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/33890"}, {"sha": "11a5c478fbe24c072bdc224a207cbea516f432e2", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5db2e9ca7dc5ab9bac4baad91c224ba7d8fc0c45/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5db2e9ca7dc5ab9bac4baad91c224ba7d8fc0c45/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=5db2e9ca7dc5ab9bac4baad91c224ba7d8fc0c45", "patch": "@@ -8018,7 +8018,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t    if (type_quals != TYPE_UNQUALIFIED)\n \t      {\n \t\tif (SCALAR_TYPE_P (type) || VOID_TYPE_P (type))\n-\t\t  warning (OPT_Wreturn_type,\n+\t\t  warning (OPT_Wignored_qualifiers,\n \t\t\t   \"type qualifiers ignored on function return type\");\n \t\t/* We now know that the TYPE_QUALS don't apply to the\n \t\t   decl, but to its return type.  */"}, {"sha": "f25f2c403049143eeba64fb8da4bc256607183a0", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5db2e9ca7dc5ab9bac4baad91c224ba7d8fc0c45/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5db2e9ca7dc5ab9bac4baad91c224ba7d8fc0c45/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=5db2e9ca7dc5ab9bac4baad91c224ba7d8fc0c45", "patch": "@@ -8663,7 +8663,7 @@ tsubst_function_type (tree t,\n       && in_decl != NULL_TREE\n       && !TREE_NO_WARNING (in_decl)\n       && (SCALAR_TYPE_P (return_type) || VOID_TYPE_P (return_type)))\n-    warning (OPT_Wreturn_type,\n+    warning (OPT_Wignored_qualifiers,\n             \"type qualifiers ignored on function return type\");\n \n   /* Construct a new type node and return it.  */"}, {"sha": "5e41ec30f51b97f95b3a65dc0c4935afbd5b81c3", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5db2e9ca7dc5ab9bac4baad91c224ba7d8fc0c45/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5db2e9ca7dc5ab9bac4baad91c224ba7d8fc0c45/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=5db2e9ca7dc5ab9bac4baad91c224ba7d8fc0c45", "patch": "@@ -236,7 +236,7 @@ Objective-C and Objective-C++ Dialects}.\n -Werror  -Werror=* @gol\n -Wfatal-errors  -Wfloat-equal  -Wformat  -Wformat=2 @gol\n -Wno-format-extra-args -Wformat-nonliteral @gol\n--Wformat-security  -Wformat-y2k @gol\n+-Wformat-security  -Wformat-y2k -Wignored-qualifiers @gol\n -Wimplicit  -Wimplicit-function-declaration  -Wimplicit-int @gol\n -Wimport  -Wno-import  -Winit-self  -Winline @gol\n -Wno-int-to-pointer-cast -Wno-invalid-offsetof @gol\n@@ -2675,6 +2675,7 @@ name is still supported, but the newer name is more descriptive.)\n \n @gccoptlist{-Wclobbered  @gol\n -Wempty-body  @gol\n+-Wignored-qualifiers @gol\n -Wmissing-field-initializers  @gol\n -Wmissing-parameter-type @r{(C only)}  @gol\n -Wold-style-declaration @r{(C only)}  @gol\n@@ -2864,6 +2865,19 @@ enabled by default and it is made into an error by\n Same as @option{-Wimplicit-int} and @option{-Wimplicit-function-declaration}.\n This warning is enabled by @option{-Wall}.\n \n+@item -Wignored-qualifiers\n+@opindex Wignored-qualifiers\n+@opindex Wno-ignored-qualifiers\n+Warn if the return type of a function has a type qualifier\n+such as @code{const}.  For ISO C such a type qualifier has no effect,\n+since the value returned by a function is not an lvalue.\n+For C++, the warning is only emitted for scalar types or @code{void}.\n+ISO C prohibits qualified @code{void} return types on function\n+definitions, so such return types always receive a warning\n+even without this option.\n+\n+This warning is also enabled by @option{-Wextra}.\n+\n @item -Wmain\n @opindex Wmain\n Warn if the type of @samp{main} is suspicious.  @samp{main} should be a\n@@ -2996,14 +3010,6 @@ return-value in a function whose return-type is not @code{void}\n without a value), and about a @code{return} statement with a\n expression in a function whose return-type is @code{void}.\n \n-Also warn if the return type of a function has a type qualifier\n-such as @code{const}.  For ISO C such a type qualifier has no effect,\n-since the value returned by a function is not an lvalue.\n-For C++, the warning is only emitted for scalar types or @code{void}.\n-ISO C prohibits qualified @code{void} return types on function\n-definitions, so such return types always receive a warning\n-even without this option.\n-\n For C++, a function without return type always produces a diagnostic\n message, even when @option{-Wno-return-type} is specified.  The only\n exceptions are @samp{main} and functions defined in system headers."}, {"sha": "34b4ec1158026170f7b03bac9cc9006b1324f2e1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5db2e9ca7dc5ab9bac4baad91c224ba7d8fc0c45/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5db2e9ca7dc5ab9bac4baad91c224ba7d8fc0c45/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5db2e9ca7dc5ab9bac4baad91c224ba7d8fc0c45", "patch": "@@ -1,3 +1,9 @@\n+2008-01-12  Doug Kwan  <dougkwan@google.com>\n+\n+\t* gcc.dg/qual-return-1.c: Add -Wignored-qualifiers.\n+\t* g++.dg/warn/Wreturn-type-4.C: Replace -Wreturn-type by\n+\t-Wignored-qualifiers.\n+\n 2008-01-12  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/slice3.adb: New test."}, {"sha": "20c34a836a9e7821d22333f05f75010a3ce1ec28", "filename": "gcc/testsuite/g++.dg/warn/Wreturn-type-4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5db2e9ca7dc5ab9bac4baad91c224ba7d8fc0c45/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWreturn-type-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5db2e9ca7dc5ab9bac4baad91c224ba7d8fc0c45/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWreturn-type-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWreturn-type-4.C?ref=5db2e9ca7dc5ab9bac4baad91c224ba7d8fc0c45", "patch": "@@ -1,6 +1,6 @@\n /* PR c++/18313 */\n /* { dg-do compile } */\n-/* { dg-options \"-Wreturn-type\" } */\n+/* { dg-options \"-Wignored-qualifiers\" } */\n \n volatile void bar(); /* { dg-warning \"type qualifiers ignored\" } */\n "}, {"sha": "8151995d8b30d81f5668b042ce4a4dd3b6ebd3c4", "filename": "gcc/testsuite/gcc.dg/qual-return-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5db2e9ca7dc5ab9bac4baad91c224ba7d8fc0c45/gcc%2Ftestsuite%2Fgcc.dg%2Fqual-return-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5db2e9ca7dc5ab9bac4baad91c224ba7d8fc0c45/gcc%2Ftestsuite%2Fgcc.dg%2Fqual-return-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fqual-return-1.c?ref=5db2e9ca7dc5ab9bac4baad91c224ba7d8fc0c45", "patch": "@@ -1,7 +1,7 @@\n /* Test for warnings for qualified function return types.  */\n /* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n /* { dg-do compile } */\n-/* { dg-options \"-std=gnu99 -Wreturn-type\" } */\n+/* { dg-options \"-std=gnu99 -Wreturn-type -Wignored-qualifiers\" } */\n \n /* Qualifying a function return type makes no sense.  */\n "}]}