{"sha": "c2ea1ac6b63f3c8e4cb03c5a156137f059f88293", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzJlYTFhYzZiNjNmM2M4ZTRjYjAzYzVhMTU2MTM3ZjA1OWY4ODI5Mw==", "commit": {"author": {"name": "Douglas B Rupp", "email": "rupp@gnat.com", "date": "2002-02-16T18:50:17Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2002-02-16T18:50:17Z"}, "message": "alpha.c: Implement null frame procedure types on VMS.\n\n\t* config/alpha/alpha.c: Implement null frame procedure types on VMS.\n\t(alpha_procedure_type): Replaces alpha_is_stack_procedure.\n\t(alpha_sa_mask, alpha_sa_size): Reflect above change.\n\t(alpha_pv_save_size, alpha_expand_prologue): Likewise.\n\t(alpha_start_function, alpha_expand_epilogue): Likewise.\n\t(unicosmk_gen_dsib): Likewise.\n\nFrom-SVN: r49806", "tree": {"sha": "d5a8fd1c2362145c7c6e44928b794d883fdd6295", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5a8fd1c2362145c7c6e44928b794d883fdd6295"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2ea1ac6b63f3c8e4cb03c5a156137f059f88293", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2ea1ac6b63f3c8e4cb03c5a156137f059f88293", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2ea1ac6b63f3c8e4cb03c5a156137f059f88293", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2ea1ac6b63f3c8e4cb03c5a156137f059f88293/comments", "author": null, "committer": null, "parents": [{"sha": "725e58b1b6b9e59bfb05d08572210ae1050fe232", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/725e58b1b6b9e59bfb05d08572210ae1050fe232", "html_url": "https://github.com/Rust-GCC/gccrs/commit/725e58b1b6b9e59bfb05d08572210ae1050fe232"}], "stats": {"total": 113, "additions": 70, "deletions": 43}, "files": [{"sha": "52cabeda71476a01607fd721d8539fe35b286731", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ea1ac6b63f3c8e4cb03c5a156137f059f88293/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ea1ac6b63f3c8e4cb03c5a156137f059f88293/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c2ea1ac6b63f3c8e4cb03c5a156137f059f88293", "patch": "@@ -1,3 +1,12 @@\n+2002-02-16  Douglas B Rupp  <rupp@gnat.com>\n+\n+\t* config/alpha/alpha.c: Implement null frame procedure types on VMS.\n+\t(alpha_procedure_type): Replaces alpha_is_stack_procedure.\n+\t(alpha_sa_mask, alpha_sa_size): Reflect above change.\n+\t(alpha_pv_save_size, alpha_expand_prologue): Likewise.\n+\t(alpha_start_function, alpha_expand_epilogue): Likewise.\n+\t(unicosmk_gen_dsib): Likewise.\n+\n Sat Feb 16 13:39:09 2002  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* expr.c (store_constructor): Handle target REG case for ARRAY_TYPE."}, {"sha": "3fb7cf8fc4396d003367f95c5435b0bc4706a8e9", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 61, "deletions": 43, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2ea1ac6b63f3c8e4cb03c5a156137f059f88293/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2ea1ac6b63f3c8e4cb03c5a156137f059f88293/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=c2ea1ac6b63f3c8e4cb03c5a156137f059f88293", "patch": "@@ -5832,7 +5832,8 @@ alpha_va_arg (valist, type)\n    descriptior to generate.  */\n \n /* Nonzero if we need a stack procedure.  */\n-static int alpha_is_stack_procedure;\n+enum alpha_procedure_types {PT_NULL = 0, PT_REGISTER = 1, PT_STACK = 2};\n+static enum alpha_procedure_types alpha_procedure_type;\n \n /* Register number (either FP or SP) that is used to unwind the frame.  */\n static int vms_unwind_regno;\n@@ -5868,7 +5869,7 @@ alpha_sa_mask (imaskP, fmaskP)\n       return;\n     }\n \n-  if (TARGET_ABI_OPEN_VMS && alpha_is_stack_procedure)\n+  if (TARGET_ABI_OPEN_VMS && alpha_procedure_type == PT_STACK)\n     imask |= (1L << HARD_FRAME_POINTER_REGNUM);\n \n   /* One for every register we have to save.  */\n@@ -5933,40 +5934,46 @@ alpha_sa_size ()\n \t use alloca and have not determined that we need a frame for other\n \t reasons.  */\n \n-      alpha_is_stack_procedure = (sa_size\n-\t\t\t\t  || get_frame_size() != 0\n-\t\t\t\t  || current_function_outgoing_args_size\n-\t\t\t\t  || current_function_varargs\n-\t\t\t\t  || current_function_stdarg\n-\t\t\t\t  || current_function_calls_alloca\n-\t\t\t\t  || frame_pointer_needed);\n+      alpha_procedure_type\n+\t= (sa_size || get_frame_size() != 0\n+\t   || current_function_outgoing_args_size || current_function_varargs\n+\t   || current_function_stdarg || current_function_calls_alloca\n+\t   || frame_pointer_needed)\n+\t  ? PT_STACK : PT_REGISTER;\n \n       /* Always reserve space for saving callee-saved registers if we\n \t need a frame as required by the calling convention.  */\n-      if (alpha_is_stack_procedure)\n+      if (alpha_procedure_type == PT_STACK)\n         sa_size = 14;\n     }\n   else if (TARGET_ABI_OPEN_VMS)\n     {\n       /* Start by assuming we can use a register procedure if we don't\n \t make any calls (REG_RA not used) or need to save any\n \t registers and a stack procedure if we do.  */\n-      alpha_is_stack_procedure = ((mask[0] >> REG_RA) & 1);\n+      if ((mask[0] >> REG_RA) & 1)\n+\talpha_procedure_type = PT_STACK;\n+      else if (get_frame_size() != 0)\n+\talpha_procedure_type = PT_REGISTER;\n+      else\n+\talpha_procedure_type = PT_NULL;\n \n       /* Don't reserve space for saving RA yet.  Do that later after we've\n \t made the final decision on stack procedure vs register procedure.  */\n-      if (alpha_is_stack_procedure)\n+      if (alpha_procedure_type == PT_STACK)\n \tsa_size--;\n \n       /* Decide whether to refer to objects off our PV via FP or PV.\n \t If we need FP for something else or if we receive a nonlocal\n \t goto (which expects PV to contain the value), we must use PV.\n \t Otherwise, start by assuming we can use FP.  */\n-      vms_base_regno = (frame_pointer_needed\n-\t\t\t|| current_function_has_nonlocal_label\n-\t\t\t|| alpha_is_stack_procedure\n-\t\t\t|| current_function_outgoing_args_size\n-\t\t\t? REG_PV : HARD_FRAME_POINTER_REGNUM);\n+\n+      vms_base_regno\n+\t= (frame_pointer_needed\n+\t   || current_function_has_nonlocal_label\n+\t   || alpha_procedure_type == PT_STACK\n+\t   || current_function_outgoing_args_size)\n+\t  ? REG_PV : HARD_FRAME_POINTER_REGNUM;\n \n       /* If we want to copy PV into FP, we need to find some register\n \t in which to save FP.  */\n@@ -5977,15 +5984,17 @@ alpha_sa_size ()\n \t  if (! fixed_regs[i] && call_used_regs[i] && ! regs_ever_live[i])\n \t    vms_save_fp_regno = i;\n \n-      if (vms_save_fp_regno == -1)\n-\tvms_base_regno = REG_PV, alpha_is_stack_procedure = 1;\n+      if (vms_save_fp_regno == -1 && alpha_procedure_type == PT_REGISTER)\n+\tvms_base_regno = REG_PV, alpha_procedure_type = PT_STACK;\n+      else if (alpha_procedure_type == PT_NULL)\n+\tvms_base_regno = REG_PV;\n \n       /* Stack unwinding should be done via FP unless we use it for PV.  */\n       vms_unwind_regno = (vms_base_regno == REG_PV\n \t\t\t  ? HARD_FRAME_POINTER_REGNUM : STACK_POINTER_REGNUM);\n \n       /* If this is a stack procedure, allow space for saving FP and RA.  */\n-      if (alpha_is_stack_procedure)\n+      if (alpha_procedure_type == PT_STACK)\n \tsa_size += 2;\n     }\n   else\n@@ -6002,7 +6011,7 @@ int\n alpha_pv_save_size ()\n {\n   alpha_sa_size ();\n-  return alpha_is_stack_procedure ? 8 : 0;\n+  return alpha_procedure_type == PT_STACK ? 8 : 0;\n }\n \n int\n@@ -6151,13 +6160,13 @@ alpha_expand_prologue ()\n   frame_size = get_frame_size ();\n   if (TARGET_ABI_OPEN_VMS)\n     frame_size = ALPHA_ROUND (sa_size \n-\t\t\t      + (alpha_is_stack_procedure ? 8 : 0)\n+\t\t\t      + (alpha_procedure_type == PT_STACK ? 8 : 0)\n \t\t\t      + frame_size\n \t\t\t      + current_function_pretend_args_size);\n   else if (TARGET_ABI_UNICOSMK)\n     /* We have to allocate space for the DSIB if we generate a frame.  */\n     frame_size = ALPHA_ROUND (sa_size\n-\t\t\t      + (alpha_is_stack_procedure ? 48 : 0))\n+\t\t\t      + (alpha_procedure_type == PT_STACK ? 48 : 0))\n \t\t + ALPHA_ROUND (frame_size\n \t\t\t\t+ current_function_outgoing_args_size);\n   else\n@@ -6312,7 +6321,7 @@ alpha_expand_prologue ()\n \t}\n     \n       /* Save regs in stack order.  Beginning with VMS PV.  */\n-      if (TARGET_ABI_OPEN_VMS && alpha_is_stack_procedure)\n+      if (TARGET_ABI_OPEN_VMS && alpha_procedure_type == PT_STACK)\n \t{\n \t  mem = gen_rtx_MEM (DImode, stack_pointer_rtx);\n \t  set_mem_alias_set (mem, alpha_sr_alias_set);\n@@ -6348,7 +6357,7 @@ alpha_expand_prologue ()\n \t    reg_offset += 8;\n \t  }\n     }\n-  else if (TARGET_ABI_UNICOSMK && alpha_is_stack_procedure)\n+  else if (TARGET_ABI_UNICOSMK && alpha_procedure_type == PT_STACK)\n     {\n       /* The standard frame on the T3E includes space for saving registers.\n \t We just have to use it. We don't have to save the return address and\n@@ -6377,17 +6386,18 @@ alpha_expand_prologue ()\n \n   if (TARGET_ABI_OPEN_VMS)\n     {\n-      if (!alpha_is_stack_procedure)\n-\t/* Register frame procedures save the fp.  */\n-\t/* ??? Ought to have a dwarf2 save for this.  */\n+      if (alpha_procedure_type == PT_REGISTER)\n+\t/* Register frame procedures save the fp.\n+\t   ?? Ought to have a dwarf2 save for this.  */\n \temit_move_insn (gen_rtx_REG (DImode, vms_save_fp_regno),\n \t\t\thard_frame_pointer_rtx);\n \n-      if (vms_base_regno != REG_PV)\n+      if (alpha_procedure_type != PT_NULL && vms_base_regno != REG_PV)\n \temit_insn (gen_force_movdi (gen_rtx_REG (DImode, vms_base_regno),\n \t\t\t\t    gen_rtx_REG (DImode, REG_PV)));\n \n-      if (vms_unwind_regno == HARD_FRAME_POINTER_REGNUM)\n+      if (alpha_procedure_type != PT_NULL\n+\t  && vms_unwind_regno == HARD_FRAME_POINTER_REGNUM)\n \tFRP (emit_move_insn (hard_frame_pointer_rtx, stack_pointer_rtx));\n \n       /* If we have to allocate space for outgoing args, do it now.  */\n@@ -6460,12 +6470,12 @@ alpha_start_function (file, fnname, decl)\n   frame_size = get_frame_size ();\n   if (TARGET_ABI_OPEN_VMS)\n     frame_size = ALPHA_ROUND (sa_size \n-\t\t\t      + (alpha_is_stack_procedure ? 8 : 0)\n+\t\t\t      + (alpha_procedure_type == PT_STACK ? 8 : 0)\n \t\t\t      + frame_size\n \t\t\t      + current_function_pretend_args_size);\n   else if (TARGET_ABI_UNICOSMK)\n     frame_size = ALPHA_ROUND (sa_size\n-\t\t\t      + (alpha_is_stack_procedure ? 48 : 0))\n+\t\t\t      + (alpha_procedure_type == PT_STACK ? 48 : 0))\n \t\t + ALPHA_ROUND (frame_size\n \t\t\t      + current_function_outgoing_args_size);\n   else\n@@ -6585,7 +6595,7 @@ alpha_start_function (file, fnname, decl)\n \tfprintf (file, \"\\t.mask 0x%lx,0\\n\", imask & ~(1L << REG_RA));\n       if (fmask)\n \tfprintf (file, \"\\t.fmask 0x%lx,0\\n\", fmask);\n-      if (!alpha_is_stack_procedure)\n+      if (alpha_procedure_type == PT_REGISTER)\n \tfprintf (file, \"\\t.fp_save $%d\\n\", vms_save_fp_regno);\n     }\n   else if (!flag_inhibit_size_directive)\n@@ -6629,7 +6639,9 @@ alpha_start_function (file, fnname, decl)\n   ASM_OUTPUT_LABEL (file, fnname);\n   fprintf (file, \"\\t.pdesc \");\n   assemble_name (file, fnname);\n-  fprintf (file, \"..en,%s\\n\", alpha_is_stack_procedure ? \"stack\" : \"reg\");\n+  fprintf (file, \"..en,%s\\n\",\n+\t   alpha_procedure_type == PT_STACK ? \"stack\"\n+\t   : alpha_procedure_type == PT_REGISTER ? \"reg\" : \"null\");\n   alpha_need_linkage (fnname, 1);\n   text_section ();\n #endif\n@@ -6683,12 +6695,12 @@ alpha_expand_epilogue ()\n   frame_size = get_frame_size ();\n   if (TARGET_ABI_OPEN_VMS)\n     frame_size = ALPHA_ROUND (sa_size \n-\t\t\t      + (alpha_is_stack_procedure ? 8 : 0)\n+\t\t\t      + (alpha_procedure_type == PT_STACK ? 8 : 0)\n \t\t\t      + frame_size\n \t\t\t      + current_function_pretend_args_size);\n   else if (TARGET_ABI_UNICOSMK)\n     frame_size = ALPHA_ROUND (sa_size\n-\t\t\t      + (alpha_is_stack_procedure ? 48 : 0))\n+\t\t\t      + (alpha_procedure_type == PT_STACK ? 48 : 0))\n \t\t + ALPHA_ROUND (frame_size\n \t\t\t      + current_function_outgoing_args_size);\n   else\n@@ -6698,14 +6710,20 @@ alpha_expand_epilogue ()\n \t\t\t\t + current_function_pretend_args_size));\n \n   if (TARGET_ABI_OPEN_VMS)\n-    reg_offset = 8;\n+    {\n+       if (alpha_procedure_type == PT_STACK)\n+          reg_offset = 8;\n+       else\n+          reg_offset = 0;\n+    }\n   else\n     reg_offset = ALPHA_ROUND (current_function_outgoing_args_size);\n \n   alpha_sa_mask (&imask, &fmask);\n \n-  fp_is_frame_pointer = ((TARGET_ABI_OPEN_VMS && alpha_is_stack_procedure)\n-\t\t\t || (!TARGET_ABI_OPEN_VMS && frame_pointer_needed));\n+  fp_is_frame_pointer\n+    = ((TARGET_ABI_OPEN_VMS && alpha_procedure_type == PT_STACK)\n+       || (!TARGET_ABI_OPEN_VMS && frame_pointer_needed));\n   fp_offset = 0;\n   sa_reg = stack_pointer_rtx;\n \n@@ -6772,7 +6790,7 @@ alpha_expand_epilogue ()\n \t    reg_offset += 8;\n \t  }\n     }\n-  else if (TARGET_ABI_UNICOSMK && alpha_is_stack_procedure)\n+  else if (TARGET_ABI_UNICOSMK && alpha_procedure_type == PT_STACK)\n     {\n       /* Restore callee-saved general-purpose registers.  */\n \n@@ -6892,13 +6910,13 @@ alpha_expand_epilogue ()\n     }\n   else \n     {\n-      if (TARGET_ABI_OPEN_VMS && !alpha_is_stack_procedure)\n+      if (TARGET_ABI_OPEN_VMS && alpha_procedure_type == PT_REGISTER)\n         {\n           emit_insn (gen_blockage ());\n           FRP (emit_move_insn (hard_frame_pointer_rtx,\n \t\t\t       gen_rtx_REG (DImode, vms_save_fp_regno)));\n         }\n-      else if (TARGET_ABI_UNICOSMK && !alpha_is_stack_procedure)\n+      else if (TARGET_ABI_UNICOSMK && alpha_procedure_type != PT_STACK)\n \t{\n \t  /* Decrement the frame pointer if the function does not have a\n \t     frame.  */\n@@ -8701,7 +8719,7 @@ static void\n unicosmk_gen_dsib (imaskP)\n       unsigned long * imaskP;\n {\n-  if (alpha_is_stack_procedure)\n+  if (alpha_procedure_type == PT_STACK)\n     {\n       const char *ssib_name;\n       rtx mem;"}]}