{"sha": "7981c06ae92548bd66f07121db1802eb6aec73ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzk4MWMwNmFlOTI1NDhiZDY2ZjA3MTIxZGIxODAyZWI2YWVjNzNlZA==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-03-28T12:57:11Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-03-28T12:57:11Z"}, "message": "c++: Diagnose when \"requires\" is used instead of \"requires requires\" [PR94306]\n\nThis adds support to detect and recover from the case where an opening brace\nimmediately follows the start of a requires-clause.  So rather than emitting the\nerror\n\n  error: expected primary-expression before '{' token\n\nfollowed by a slew of irrevelant errors, we now assume the user had intended to\nwrite \"requires requires {\" and diagnose and recover accordingly.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/94306\n\t* parser.c (cp_parser_requires_clause_opt): Diagnose and recover from\n\t\"requires {\" when \"requires requires {\" was probably intended.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/94306\n\t* g++.dg/concepts/diagnostic8.C: New test.", "tree": {"sha": "c5c9ddcf1dd284be44597236b30a683b91ba4ddd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5c9ddcf1dd284be44597236b30a683b91ba4ddd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7981c06ae92548bd66f07121db1802eb6aec73ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7981c06ae92548bd66f07121db1802eb6aec73ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7981c06ae92548bd66f07121db1802eb6aec73ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7981c06ae92548bd66f07121db1802eb6aec73ed/comments", "author": null, "committer": null, "parents": [{"sha": "a7ea3d2ced786c4544fa625f34f515d89ed074fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7ea3d2ced786c4544fa625f34f515d89ed074fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7ea3d2ced786c4544fa625f34f515d89ed074fe"}], "stats": {"total": 30, "additions": 29, "deletions": 1}, "files": [{"sha": "e7c248a3c2fccff8d8595fe042b4b0276b573e71", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7981c06ae92548bd66f07121db1802eb6aec73ed/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7981c06ae92548bd66f07121db1802eb6aec73ed/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7981c06ae92548bd66f07121db1802eb6aec73ed", "patch": "@@ -1,5 +1,9 @@\n 2020-03-28  Patrick Palka  <ppalka@redhat.com>\n \n+\tPR c++/94306\n+\t* parser.c (cp_parser_requires_clause_opt): Diagnose and recover from\n+\t\"requires {\" when \"requires requires {\" was probably intended.\n+\n \tPR c++/94252\n \t* constraint.cc (tsubst_compound_requirement): Always suppress errors\n \tfrom type_deducible_p and expression_convertible_p, as they're not"}, {"sha": "fc3c2976e3d96c054b19632191977bf67636a4e4", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7981c06ae92548bd66f07121db1802eb6aec73ed/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7981c06ae92548bd66f07121db1802eb6aec73ed/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=7981c06ae92548bd66f07121db1802eb6aec73ed", "patch": "@@ -27704,7 +27704,22 @@ cp_parser_requires_clause_opt (cp_parser *parser, bool lambda_p)\n \t}\n       return NULL_TREE;\n     }\n-  cp_lexer_consume_token (parser->lexer);\n+\n+  cp_token *tok2 = cp_lexer_peek_nth_token (parser->lexer, 2);\n+  if (tok2->type == CPP_OPEN_BRACE)\n+    {\n+      /* An opening brace following the start of a requires-clause is\n+\t ill-formed; the user likely forgot the second `requires' that\n+\t would start a requires-expression.  */\n+      gcc_rich_location richloc (tok2->location);\n+      richloc.add_fixit_insert_after (tok->location, \" requires\");\n+      error_at (&richloc, \"missing additional %<requires%> to start \"\n+\t\t\"a requires-expression\");\n+      /* Don't consume the `requires', so that it's reused as the start of a\n+\t requires-expression.  */\n+    }\n+  else\n+    cp_lexer_consume_token (parser->lexer);\n \n   if (!flag_concepts_ts)\n     return cp_parser_requires_clause_expression (parser, lambda_p);"}, {"sha": "3422550ae023ce99340e4bef53896a76b2bcc7eb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7981c06ae92548bd66f07121db1802eb6aec73ed/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7981c06ae92548bd66f07121db1802eb6aec73ed/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7981c06ae92548bd66f07121db1802eb6aec73ed", "patch": "@@ -1,5 +1,8 @@\n 2020-03-28  Patrick Palka  <ppalka@redhat.com>\n \n+\tPR c++/94306\n+\t* g++.dg/concepts/diagnostic8.C: New test.\n+\n \tPR c++/94252\n \t* g++.dg/concepts/diagnostic7.C: New test.\n \t* g++.dg/concepts/pr94252.C: New test."}, {"sha": "70d7e4a9cc141a8a3247e2c1f43ab23c5eb9fb9b", "filename": "gcc/testsuite/g++.dg/concepts/diagnostic8.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7981c06ae92548bd66f07121db1802eb6aec73ed/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7981c06ae92548bd66f07121db1802eb6aec73ed/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic8.C?ref=7981c06ae92548bd66f07121db1802eb6aec73ed", "patch": "@@ -0,0 +1,6 @@\n+// PR c++/94306\n+// { dg-do compile { target c++2a } }\n+\n+template<typename T> struct S { };\n+template<typename T> requires { typename T::type; } struct S<T> { };\n+// { dg-error \"missing additional .requires.\" \"\" { target *-*-* } .-1 }"}]}