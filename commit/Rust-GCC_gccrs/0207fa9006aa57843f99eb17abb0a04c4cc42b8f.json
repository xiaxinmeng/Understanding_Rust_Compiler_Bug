{"sha": "0207fa9006aa57843f99eb17abb0a04c4cc42b8f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDIwN2ZhOTAwNmFhNTc4NDNmOTllYjE3YWJiMGEwNGM0Y2M0MmI4Zg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2012-11-11T21:52:49Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2012-11-11T21:52:49Z"}, "message": "re PR rtl-optimization/55247 (internal compiler error: Max. number of generated reload insns per insn is achieved (90))\n\n\tPR rtl-optimization/55247\n\tPR middle-end/55259\n\t* emit-rtl.c (adjust_address_1): If POINTERS_EXTEND_UNSIGNED > 0,\n\thandle ZERO_EXTEND.\n\t* recog.c (offsettable_address_addr_space_p): Likewise.\n\nFrom-SVN: r193415", "tree": {"sha": "e46e95eb2fb00a9a4043e23fc4ae9d095ad324b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e46e95eb2fb00a9a4043e23fc4ae9d095ad324b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0207fa9006aa57843f99eb17abb0a04c4cc42b8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0207fa9006aa57843f99eb17abb0a04c4cc42b8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0207fa9006aa57843f99eb17abb0a04c4cc42b8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0207fa9006aa57843f99eb17abb0a04c4cc42b8f/comments", "author": null, "committer": null, "parents": [{"sha": "92eba4000df906bae1d3be6d9c2047d6b3f8cac2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92eba4000df906bae1d3be6d9c2047d6b3f8cac2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92eba4000df906bae1d3be6d9c2047d6b3f8cac2"}], "stats": {"total": 84, "additions": 81, "deletions": 3}, "files": [{"sha": "58d401c9878008837196f5539e0046c2e67474d9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0207fa9006aa57843f99eb17abb0a04c4cc42b8f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0207fa9006aa57843f99eb17abb0a04c4cc42b8f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0207fa9006aa57843f99eb17abb0a04c4cc42b8f", "patch": "@@ -1,3 +1,12 @@\n+2012-11-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\t    H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR rtl-optimization/55247\n+\tPR middle-end/55259\n+\t* emit-rtl.c (adjust_address_1): If POINTERS_EXTEND_UNSIGNED > 0,\n+\thandle ZERO_EXTEND.\n+\t* recog.c (offsettable_address_addr_space_p): Likewise.\n+\n 2012-11-11  Steven Bosscher  <steven@gcc.gnu.org>\n \n \tPR middle-end/55263"}, {"sha": "f39d861606981c43615624ed4e259d3bea056a41", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0207fa9006aa57843f99eb17abb0a04c4cc42b8f/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0207fa9006aa57843f99eb17abb0a04c4cc42b8f/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=0207fa9006aa57843f99eb17abb0a04c4cc42b8f", "patch": "@@ -2071,10 +2071,12 @@ adjust_address_1 (rtx memref, enum machine_mode mode, HOST_WIDE_INT offset,\n   rtx new_rtx;\n   enum machine_mode address_mode;\n   int pbits;\n-  struct mem_attrs attrs, *defattrs;\n+  struct mem_attrs attrs = *get_mem_attrs (memref), *defattrs;\n   unsigned HOST_WIDE_INT max_align;\n-\n-  attrs = *get_mem_attrs (memref);\n+#ifdef POINTERS_EXTEND_UNSIGNED\n+  enum machine_mode pointer_mode\n+    = targetm.addr_space.pointer_mode (attrs.addrspace);\n+#endif\n \n   /* If there are no changes, just return the original memory reference.  */\n   if (mode == GET_MODE (memref) && !offset\n@@ -2109,6 +2111,18 @@ adjust_address_1 (rtx memref, enum machine_mode mode, HOST_WIDE_INT offset,\n \taddr = gen_rtx_LO_SUM (address_mode, XEXP (addr, 0),\n \t\t\t       plus_constant (address_mode,\n \t\t\t\t\t      XEXP (addr, 1), offset));\n+#ifdef POINTERS_EXTEND_UNSIGNED\n+      /* If MEMREF is a ZERO_EXTEND from pointer_mode and the offset is valid\n+\t in that mode, we merge it into the ZERO_EXTEND.  We take advantage of\n+\t the fact that pointers are not allowed to overflow.  */\n+      else if (POINTERS_EXTEND_UNSIGNED > 0\n+\t       && GET_CODE (addr) == ZERO_EXTEND\n+\t       && GET_MODE (XEXP (addr, 0)) == pointer_mode\n+\t       && trunc_int_for_mode (offset, pointer_mode) == offset)\n+\taddr = gen_rtx_ZERO_EXTEND (address_mode,\n+\t\t\t\t    plus_constant (pointer_mode,\n+\t\t\t\t\t\t   XEXP (addr, 0), offset));\n+#endif\n       else\n \taddr = plus_constant (address_mode, addr, offset);\n     }"}, {"sha": "47e7f75e1dd7a5d4d78d33ebb78ba63264bcf789", "filename": "gcc/recog.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0207fa9006aa57843f99eb17abb0a04c4cc42b8f/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0207fa9006aa57843f99eb17abb0a04c4cc42b8f/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=0207fa9006aa57843f99eb17abb0a04c4cc42b8f", "patch": "@@ -1942,6 +1942,9 @@ offsettable_address_addr_space_p (int strictp, enum machine_mode mode, rtx y,\n     (strictp ? strict_memory_address_addr_space_p\n \t     : memory_address_addr_space_p);\n   unsigned int mode_sz = GET_MODE_SIZE (mode);\n+#ifdef POINTERS_EXTEND_UNSIGNED\n+  enum machine_mode pointer_mode = targetm.addr_space.pointer_mode (as);\n+#endif\n \n   if (CONSTANT_ADDRESS_P (y))\n     return 1;\n@@ -1991,6 +1994,15 @@ offsettable_address_addr_space_p (int strictp, enum machine_mode mode, rtx y,\n     z = gen_rtx_LO_SUM (GET_MODE (y), XEXP (y, 0),\n \t\t\tplus_constant (GET_MODE (y), XEXP (y, 1),\n \t\t\t\t       mode_sz - 1));\n+#ifdef POINTERS_EXTEND_UNSIGNED\n+  /* Likewise for a ZERO_EXTEND from pointer_mode.  */\n+  else if (POINTERS_EXTEND_UNSIGNED > 0\n+\t   && GET_CODE (y) == ZERO_EXTEND\n+\t   && GET_MODE (XEXP (y, 0)) == pointer_mode)\n+    z = gen_rtx_ZERO_EXTEND (GET_MODE (y),\n+\t\t\t     plus_constant (pointer_mode, XEXP (y, 0),\n+\t\t\t\t\t    mode_sz - 1));\n+#endif\n   else\n     z = plus_constant (GET_MODE (y), y, mode_sz - 1);\n "}, {"sha": "b8d7da35ebea306c4f66af520cfadb28dbbe0490", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0207fa9006aa57843f99eb17abb0a04c4cc42b8f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0207fa9006aa57843f99eb17abb0a04c4cc42b8f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0207fa9006aa57843f99eb17abb0a04c4cc42b8f", "patch": "@@ -1,3 +1,9 @@\n+2012-11-11  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR middle-end/55247\n+\tPR middle-end/55259\n+\t* gcc.target/i386/pr55247-2.c: New file.\n+\n 2012-11-11  Steven Bosscher  <steven@gcc.gnu.org>\n \n \tPR middle-end/55263"}, {"sha": "d91b504e66f8f1cef6fa53f8b38758978da20de3", "filename": "gcc/testsuite/gcc.target/i386/pr55247-2.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0207fa9006aa57843f99eb17abb0a04c4cc42b8f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr55247-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0207fa9006aa57843f99eb17abb0a04c4cc42b8f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr55247-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr55247-2.c?ref=0207fa9006aa57843f99eb17abb0a04c4cc42b8f", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile { target { ! { ia32 } } } } */\n+/* { dg-require-effective-target maybe_x32 } */\n+/* { dg-options \"-O2 -mx32 -mtune=generic -maddress-mode=long\" } */\n+\n+typedef unsigned int uint32_t;\n+typedef uint32_t Elf32_Word;\n+typedef uint32_t Elf32_Addr;\n+typedef struct {\n+  Elf32_Word st_name;\n+  Elf32_Addr st_value;\n+  Elf32_Word st_size;\n+  unsigned char st_other;\n+} Elf32_Sym;\n+typedef struct {\n+  Elf32_Word r_info;\n+}\n+Elf32_Rela;\n+typedef struct {\n+  union {\n+    Elf32_Addr d_ptr;\n+  }\n+  d_un;\n+} Elf32_Dyn;\n+struct link_map   {\n+  Elf32_Dyn *l_info[34];\n+};\n+extern void symbind32 (Elf32_Sym *);\n+void\n+_dl_profile_fixup (struct link_map *l, Elf32_Word reloc_arg)\n+{\n+  const Elf32_Sym *const symtab  = (const void *) l->l_info[6]->d_un.d_ptr;\n+  const Elf32_Rela *const reloc  = (const void *) (l->l_info[23]->d_un.d_ptr + reloc_arg * sizeof (Elf32_Rela));\n+  Elf32_Sym sym = symtab[(reloc->r_info) >> 8];\n+  symbind32 (&sym);\n+}\n+\n+/* { dg-final { scan-assembler-not \"%xmm\\[0-9\\]\" } } */"}]}