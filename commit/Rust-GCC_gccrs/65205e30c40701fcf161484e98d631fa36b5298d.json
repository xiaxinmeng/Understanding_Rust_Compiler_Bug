{"sha": "65205e30c40701fcf161484e98d631fa36b5298d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjUyMDVlMzBjNDA3MDFmY2YxNjE0ODRlOThkNjMxZmEzNmI1Mjk4ZA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2016-10-13T16:21:28Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2016-10-13T16:21:28Z"}, "message": "compiler: don't try to get backend representation of redefinition\n    \n    Trying to get the backend representation of a redefined name can cause a\n    compiler crash as the compiler can walk over the same statements a\n    second time.  It's also quite unlikely to produce any additional useful\n    error messages for the user.\n    \n    Test case follows.  I'm not going to bother adding this test case to the\n    testsuite--crash-on-invalid cases are worth fixing but not worth\n    continually retesting.\n    \n    package p\n    \n    type A []int\n    \n    func (a A) Sum() (sum int) {\n    \tfor _, v := range a {\n    \t\tsum += v\n    \t}\n    \treturn sum\n    }\n    \n    type A []int\n    \n    func (a A) Sum() (sum int) {\n    \tfor _, v := range a {\n    \t\tsum += v\n    \t}\n    \treturn sum\n    }\n    \n    Reviewed-on: https://go-review.googlesource.com/30976\n\nFrom-SVN: r241127", "tree": {"sha": "403169efef8464ce3d59a9035abc31e34b98bd29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/403169efef8464ce3d59a9035abc31e34b98bd29"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65205e30c40701fcf161484e98d631fa36b5298d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65205e30c40701fcf161484e98d631fa36b5298d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65205e30c40701fcf161484e98d631fa36b5298d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65205e30c40701fcf161484e98d631fa36b5298d/comments", "author": null, "committer": null, "parents": [{"sha": "5117a23e9fe6e91179ec8c3487da50c3b35a7958", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5117a23e9fe6e91179ec8c3487da50c3b35a7958", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5117a23e9fe6e91179ec8c3487da50c3b35a7958"}], "stats": {"total": 10, "additions": 9, "deletions": 1}, "files": [{"sha": "6e689f464a931a162c24feb52ec901d3c72d107d", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65205e30c40701fcf161484e98d631fa36b5298d/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65205e30c40701fcf161484e98d631fa36b5298d/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=65205e30c40701fcf161484e98d631fa36b5298d", "patch": "@@ -1,4 +1,4 @@\n-681580a3afc687ba3ff9ef240c67e8630e4306e6\n+e3913d96fb024b916c87a4dc01f413523467ead9\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "9491e51258ed11a2349213000884cedf7a654e45", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65205e30c40701fcf161484e98d631fa36b5298d/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65205e30c40701fcf161484e98d631fa36b5298d/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=65205e30c40701fcf161484e98d631fa36b5298d", "patch": "@@ -7214,6 +7214,14 @@ Named_object::get_backend(Gogo* gogo, std::vector<Bexpression*>& const_decls,\n                           std::vector<Btype*>& type_decls,\n                           std::vector<Bfunction*>& func_decls)\n {\n+  // If this is a definition, avoid trying to get the backend\n+  // representation, as that can crash.\n+  if (this->is_redefinition_)\n+    {\n+      go_assert(saw_errors());\n+      return;\n+    }\n+\n   switch (this->classification_)\n     {\n     case NAMED_OBJECT_CONST:"}]}