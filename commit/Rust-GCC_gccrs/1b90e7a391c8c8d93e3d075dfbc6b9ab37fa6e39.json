{"sha": "1b90e7a391c8c8d93e3d075dfbc6b9ab37fa6e39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWI5MGU3YTM5MWM4YzhkOTNlM2QwNzVkZmJjNmI5YWIzN2ZhNmUzOQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-08-19T20:22:45Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-08-19T20:22:45Z"}, "message": "insert.cc: For std::map instantiate the allocator for a correct pair type.\n\n2004-08-19  Paolo Carlini  <pcarlini@suse.de>\n\n\t* testsuite/performance/20_util/allocator/insert.cc: For std::map\n\tinstantiate the allocator for a correct pair type.\n\t* testsuite/performance/20_util/allocator/insert_insert.cc: Likewise.\n\t* testsuite/performance/20_util/allocator/map_thread.cc: Likewise.\n\t* testsuite/performance/20_util/allocator/producer_consumer.cc:\n\tLikewise.\n\n\t* testsuite/performance/20_util/allocator/list_sort_search.cc: Very\n\tminor formatting fixes.\n\t* testsuite/performance/20_util/allocator/map_mt_find.cc: Likewise.\n\nFrom-SVN: r86269", "tree": {"sha": "26e4f819731eb567a1f1c8eab30e38d11f5e970f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26e4f819731eb567a1f1c8eab30e38d11f5e970f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b90e7a391c8c8d93e3d075dfbc6b9ab37fa6e39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b90e7a391c8c8d93e3d075dfbc6b9ab37fa6e39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b90e7a391c8c8d93e3d075dfbc6b9ab37fa6e39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b90e7a391c8c8d93e3d075dfbc6b9ab37fa6e39/comments", "author": null, "committer": null, "parents": [{"sha": "717a7d5d006f2e88ba48e7d2984a70f7a9731412", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/717a7d5d006f2e88ba48e7d2984a70f7a9731412", "html_url": "https://github.com/Rust-GCC/gccrs/commit/717a7d5d006f2e88ba48e7d2984a70f7a9731412"}], "stats": {"total": 136, "additions": 97, "deletions": 39}, "files": [{"sha": "f849f164c794cc87d6bc5abaf906f5ce4b3b0cc2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b90e7a391c8c8d93e3d075dfbc6b9ab37fa6e39/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b90e7a391c8c8d93e3d075dfbc6b9ab37fa6e39/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1b90e7a391c8c8d93e3d075dfbc6b9ab37fa6e39", "patch": "@@ -1,3 +1,16 @@\n+2004-08-19  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* testsuite/performance/20_util/allocator/insert.cc: For std::map\n+\tinstantiate the allocator for a correct pair type.\n+\t* testsuite/performance/20_util/allocator/insert_insert.cc: Likewise.\n+\t* testsuite/performance/20_util/allocator/map_thread.cc: Likewise.\n+\t* testsuite/performance/20_util/allocator/producer_consumer.cc:\n+\tLikewise.\n+\n+\t* testsuite/performance/20_util/allocator/list_sort_search.cc: Very\n+\tminor formatting fixes.\n+\t* testsuite/performance/20_util/allocator/map_mt_find.cc: Likewise.\n+\n 2004-08-19  Paolo Carlini  <pcarlini@suse.de>\n \n \t* testsuite/22_locale/time_put/put/char/1.cc: Add VERIFY on the"}, {"sha": "372b7e078cb85cf96b809d0446064cc875a6be8b", "filename": "libstdc++-v3/testsuite/performance/20_util/allocator/insert.cc", "status": "modified", "additions": 27, "deletions": 11, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b90e7a391c8c8d93e3d075dfbc6b9ab37fa6e39/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F20_util%2Fallocator%2Finsert.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b90e7a391c8c8d93e3d075dfbc6b9ab37fa6e39/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F20_util%2Fallocator%2Finsert.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F20_util%2Fallocator%2Finsert.cc?ref=1b90e7a391c8c8d93e3d075dfbc6b9ab37fa6e39", "patch": "@@ -200,20 +200,32 @@ int main(void)\n #endif\n \n   typedef less<test_type> compare_type;\n+  typedef pair<const test_type, test_type> pair_type;\n+  typedef __gnu_cxx::malloc_allocator<pair_type> m_pair_alloc_type;\n+  typedef __gnu_cxx::new_allocator<pair_type> n_pair_alloc_type;\n+  typedef __gnu_cxx::__mt_alloc<pair_type> so_pair_alloc_type;\n+  typedef __gnu_cxx::bitmap_allocator<pair_type> bit_pair_alloc_type;\n+  typedef __gnu_cxx::__pool_alloc<pair_type> po_pair_alloc_type;\n+\n #ifdef TEST_B15\n-  test_container(map<test_type, test_type, compare_type, m_alloc_type>());\n+  test_container(map<test_type, test_type, compare_type,\n+\t\t m_pair_alloc_type>());\n #endif\n #ifdef TEST_B16\n-  test_container(map<test_type, test_type, compare_type, n_alloc_type>());\n+  test_container(map<test_type, test_type, compare_type,\n+\t\t n_pair_alloc_type>());\n #endif\n #ifdef TEST_B17\n-  test_container(map<test_type, test_type, compare_type, so_alloc_type>());\n+  test_container(map<test_type, test_type, compare_type,\n+\t\t so_pair_alloc_type>());\n #endif\n #ifdef TEST_B18\n-  test_container(map<test_type, test_type, compare_type, bit_alloc_type>());\n+  test_container(map<test_type, test_type, compare_type,\n+\t\t bit_pair_alloc_type>());\n #endif\n #ifdef TEST_B19\n-  test_container(map<test_type, test_type, compare_type, po_alloc_type>());\n+  test_container(map<test_type, test_type, compare_type,\n+\t\t po_pair_alloc_type>());\n #endif\n \n #ifdef TEST_B20\n@@ -280,21 +292,25 @@ int main(void)\n   test_container(deque<test_type, po_alloc_type>(), true);\n #endif\n \n-  typedef less<test_type> compare_type;\n #ifdef TEST_T15\n-  test_container(map<test_type, test_type, compare_type, m_alloc_type>(), true);\n+  test_container(map<test_type, test_type, compare_type,\n+\t\t m_pair_alloc_type>(), true);\n #endif\n #ifdef TEST_T16\n-  test_container(map<test_type, test_type, compare_type, n_alloc_type>(), true);\n+  test_container(map<test_type, test_type, compare_type,\n+\t\t n_pair_alloc_type>(), true);\n #endif\n #ifdef TEST_T17\n-  test_container(map<test_type, test_type, compare_type, so_alloc_type>(), true);\n+  test_container(map<test_type, test_type, compare_type,\n+\t\t so_pair_alloc_type>(), true);\n #endif\n #ifdef TEST_T18\n-  test_container(map<test_type, test_type, compare_type, bit_alloc_type>(), true);\n+  test_container(map<test_type, test_type, compare_type,\n+\t\t bit_pair_alloc_type>(), true);\n #endif\n #ifdef TEST_T19\n-  test_container(map<test_type, test_type, compare_type, po_alloc_type>(), true);\n+  test_container(map<test_type, test_type, compare_type,\n+\t\t po_pair_alloc_type>(), true);\n #endif\n \n #ifdef TEST_T20"}, {"sha": "455c9a42e927a7c0f04684f2fea4b271de8f7f52", "filename": "libstdc++-v3/testsuite/performance/20_util/allocator/insert_insert.cc", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b90e7a391c8c8d93e3d075dfbc6b9ab37fa6e39/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F20_util%2Fallocator%2Finsert_insert.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b90e7a391c8c8d93e3d075dfbc6b9ab37fa6e39/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F20_util%2Fallocator%2Finsert_insert.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F20_util%2Fallocator%2Finsert_insert.cc?ref=1b90e7a391c8c8d93e3d075dfbc6b9ab37fa6e39", "patch": "@@ -171,20 +171,32 @@ int main(void)\n #endif\n \n   typedef less<test_type> compare_type;\n+  typedef pair<const test_type, test_type> pair_type;\n+  typedef __gnu_cxx::malloc_allocator<pair_type> m_pair_alloc_type;\n+  typedef __gnu_cxx::new_allocator<pair_type> n_pair_alloc_type;\n+  typedef __gnu_cxx::__mt_alloc<pair_type> so_pair_alloc_type;\n+  typedef __gnu_cxx::bitmap_allocator<pair_type> bit_pair_alloc_type;\n+  typedef __gnu_cxx::__pool_alloc<pair_type> po_pair_alloc_type;\n+\n #ifdef TEST_S15\n-  test_container(map<test_type, test_type, compare_type, m_alloc_type>());\n+  test_container(map<test_type, test_type, compare_type,\n+\t\t m_pair_alloc_type>());\n #endif\n #ifdef TEST_S16\n-  test_container(map<test_type, test_type, compare_type, n_alloc_type>());\n+  test_container(map<test_type, test_type, compare_type,\n+\t\t n_pair_alloc_type>());\n #endif\n #ifdef TEST_S17\n-  test_container(map<test_type, test_type, compare_type, so_alloc_type>());\n+  test_container(map<test_type, test_type, compare_type,\n+\t\t so_pair_alloc_type>());\n #endif\n #ifdef TEST_S18\n-  test_container(map<test_type, test_type, compare_type, bit_alloc_type>());\n+  test_container(map<test_type, test_type, compare_type,\n+\t\t bit_pair_alloc_type>());\n #endif\n #ifdef TEST_S19\n-  test_container(map<test_type, test_type, compare_type, po_alloc_type>());\n+  test_container(map<test_type, test_type, compare_type,\n+\t\t po_pair_alloc_type>());\n #endif\n \n #ifdef TEST_S20"}, {"sha": "cce55cc6a6246ee4ed46da52c39a69b8bb04b016", "filename": "libstdc++-v3/testsuite/performance/20_util/allocator/list_sort_search.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b90e7a391c8c8d93e3d075dfbc6b9ab37fa6e39/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F20_util%2Fallocator%2Flist_sort_search.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b90e7a391c8c8d93e3d075dfbc6b9ab37fa6e39/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F20_util%2Fallocator%2Flist_sort_search.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F20_util%2Fallocator%2Flist_sort_search.cc?ref=1b90e7a391c8c8d93e3d075dfbc6b9ab37fa6e39", "patch": "@@ -28,17 +28,16 @@\n // 2004-03-11  Dhruv Matani  <dhruvbird@HotPOP.com>\n \n #include <list>\n-#include <map>\n #include <algorithm>\n #include <cstdlib>\n #include <typeinfo>\n #include <sstream>\n #include <ext/mt_allocator.h>\n #include <ext/malloc_allocator.h>\n-#include <cxxabi.h>\n-#include <testsuite_performance.h>\n #include <ext/bitmap_allocator.h>\n #include <ext/pool_allocator.h>\n+#include <cxxabi.h>\n+#include <testsuite_performance.h>\n \n using namespace std;\n using __gnu_cxx::malloc_allocator;"}, {"sha": "a3ab267ad12bb4bc30431ff5d418c9ffae973bb3", "filename": "libstdc++-v3/testsuite/performance/20_util/allocator/map_mt_find.cc", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b90e7a391c8c8d93e3d075dfbc6b9ab37fa6e39/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F20_util%2Fallocator%2Fmap_mt_find.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b90e7a391c8c8d93e3d075dfbc6b9ab37fa6e39/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F20_util%2Fallocator%2Fmap_mt_find.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F20_util%2Fallocator%2Fmap_mt_find.cc?ref=1b90e7a391c8c8d93e3d075dfbc6b9ab37fa6e39", "patch": "@@ -36,10 +36,10 @@\n #include <sstream>\n #include <ext/mt_allocator.h>\n #include <ext/malloc_allocator.h>\n-#include <cxxabi.h>\n-#include <testsuite_performance.h>\n #include <ext/bitmap_allocator.h>\n #include <ext/pool_allocator.h>\n+#include <cxxabi.h>\n+#include <testsuite_performance.h>\n \n using namespace std;\n using __gnu_cxx::malloc_allocator;\n@@ -48,9 +48,7 @@ using __gnu_cxx::__mt_alloc;\n using __gnu_cxx::bitmap_allocator;\n using __gnu_cxx::__pool_alloc;\n \n-typedef int test_type;\n-\n-bool less_int(int x1, int x2) { return x1<x2; }\n+bool less_int(int x1, int x2) { return x1 < x2; }\n \n #if defined USE_FUNCTION_COMPARE\n #define COMPARE_T typeof(&less_int)\n@@ -133,19 +131,21 @@ template <typename Alloc>\n \n int main()\n {\n+  typedef pair<const int, string> pair_type;\n+\n #ifdef TEST_T0\n-  exec_tests<new_allocator<int> >();\n+  exec_tests<new_allocator<pair_type> >();\n #endif\n #ifdef TEST_T1\n-  exec_tests<malloc_allocator<int> >();\n+  exec_tests<malloc_allocator<pair_type> >();\n #endif\n #ifdef TEST_T2\n-  exec_tests<__mt_alloc<int> >();\n+  exec_tests<__mt_alloc<pair_type> >();\n #endif\n #ifdef TEST_T3\n-  exec_tests<bitmap_allocator<int> >();\n+  exec_tests<bitmap_allocator<pair_type> >();\n #endif\n #ifdef TEST_T4\n-  exec_tests<__pool_alloc<int> >();\n+  exec_tests<__pool_alloc<pair_type> >();\n #endif\n }"}, {"sha": "487a8aa5cf41c5a383a0b525a6465792ac4e7717", "filename": "libstdc++-v3/testsuite/performance/20_util/allocator/map_thread.cc", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b90e7a391c8c8d93e3d075dfbc6b9ab37fa6e39/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F20_util%2Fallocator%2Fmap_thread.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b90e7a391c8c8d93e3d075dfbc6b9ab37fa6e39/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F20_util%2Fallocator%2Fmap_thread.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F20_util%2Fallocator%2Fmap_thread.cc?ref=1b90e7a391c8c8d93e3d075dfbc6b9ab37fa6e39", "patch": "@@ -111,24 +111,30 @@ template<typename Container>\n \n int main(void)\n {\n+  typedef pair<const int, int> pair_type;\n+\n #ifdef TEST_T0\n   test_container(map<int, int>());\n #endif\n #ifdef TEST_T1\n-  test_container(map<int, int, less<const int>, new_allocator<int> >());\n+  test_container(map<int, int, less<const int>,\n+\t\t new_allocator<pair_type> >());\n #endif\n #ifdef TEST_T2\n-  test_container(map<int, int, less<const int>, malloc_allocator<int> >());\n+  test_container(map<int, int, less<const int>,\n+\t\t malloc_allocator<pair_type> >());\n #endif\n #ifdef TEST_T3\n   test_container(map<int, int, less<const int>,\n-                     __mt_alloc< pair<const int, int> > >());\n+\t\t __mt_alloc<pair_type> >());\n #endif\n #ifdef TEST_T4\n-  test_container(map<int, int, less<const int>, bitmap_allocator<int> >());\n+  test_container(map<int, int, less<const int>,\n+\t\t bitmap_allocator<pair_type> >());\n #endif\n #ifdef TEST_T5\n-  test_container(map<int, int, less<const int>, __pool_alloc<int> >());\n+  test_container(map<int, int, less<const int>,\n+\t\t __pool_alloc<pair_type> >());\n #endif\n   return 0;\n }"}, {"sha": "dd277a95fb1eaac5dde76425e5800125f413655c", "filename": "libstdc++-v3/testsuite/performance/20_util/allocator/producer_consumer.cc", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b90e7a391c8c8d93e3d075dfbc6b9ab37fa6e39/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F20_util%2Fallocator%2Fproducer_consumer.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b90e7a391c8c8d93e3d075dfbc6b9ab37fa6e39/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F20_util%2Fallocator%2Fproducer_consumer.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F20_util%2Fallocator%2Fproducer_consumer.cc?ref=1b90e7a391c8c8d93e3d075dfbc6b9ab37fa6e39", "patch": "@@ -63,6 +63,13 @@ typedef __mt_alloc<test_type> so_alloc_type;\n typedef bitmap_allocator<test_type> bit_alloc_type;\n typedef __pool_alloc<test_type> po_alloc_type;\n \n+typedef pair<const test_type, test_type> pair_type;\n+typedef malloc_allocator<pair_type> malloc_pair_alloc_type;\n+typedef new_allocator<pair_type> new_pair_alloc_type;\n+typedef __mt_alloc<pair_type> so_pair_alloc_type;\n+typedef bitmap_allocator<pair_type> bit_pair_alloc_type;\n+typedef __pool_alloc<pair_type> po_pair_alloc_type;\n+\n // The number of iterations to be performed.\n int iterations = 10000;\n \n@@ -323,19 +330,24 @@ int main(void)\n #endif\n \n #ifdef TEST_T10\n-  test_container(map<test_type, test_type, compare_type, malloc_alloc_type>());\n+  test_container(map<test_type, test_type, compare_type,\n+\t\t malloc_pair_alloc_type>());\n #endif\n #ifdef TEST_T11\n-  test_container(map<test_type, test_type, compare_type, new_alloc_type>());\n+  test_container(map<test_type, test_type, compare_type,\n+\t\t new_pair_alloc_type>());\n #endif\n #ifdef TEST_T12\n-  test_container(map<test_type, test_type, compare_type, so_alloc_type>());\n+  test_container(map<test_type, test_type, compare_type,\n+\t\t so_pair_alloc_type>());\n #endif\n #ifdef TEST_T13\n-  test_container(map<test_type, test_type, compare_type, bit_alloc_type>());\n+  test_container(map<test_type, test_type, compare_type,\n+\t\t bit_pair_alloc_type>());\n #endif\n #ifdef TEST_T14\n-  test_container(map<test_type, test_type, compare_type, po_alloc_type>());\n+  test_container(map<test_type, test_type, compare_type,\n+\t\t po_pair_alloc_type>());\n #endif\n \n   return 0;"}]}