{"sha": "f50c32fa7ab4d3bb8b8091c6d38186799b81093b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjUwYzMyZmE3YWI0ZDNiYjhiODA5MWM2ZDM4MTg2Nzk5YjgxMDkzYg==", "commit": {"author": {"name": "Max Filippov", "email": "jcmvbkbc@gmail.com", "date": "2020-06-15T05:09:36Z"}, "committer": {"name": "Max Filippov", "email": "jcmvbkbc@gmail.com", "date": "2020-06-15T10:24:23Z"}, "message": "gcc: xtensa: make register elimination data static\n\nRemove ABI reference from the ELIMINABLE_REGS to avoid static data\ninitialization dependency on xtensa core configuration.\n\n2020-06-15  Max Filippov  <jcmvbkbc@gmail.com>\ngcc/\n\t* config/xtensa/xtensa.c (xtensa_can_eliminate): New function.\n\t(TARGET_CAN_ELIMINATE): New macro.\n\t* config/xtensa/xtensa.h\n\t(XTENSA_WINDOWED_HARD_FRAME_POINTER_REGNUM)\n\t(XTENSA_CALL0_HARD_FRAME_POINTER_REGNUM): New macros.\n\t(HARD_FRAME_POINTER_REGNUM): Define using\n\tXTENSA_*_HARD_FRAME_POINTER_REGNUM.\n\t(ELIMINABLE_REGS): Replace lines with HARD_FRAME_POINTER_REGNUM\n\tby lines with XTENSA_WINDOWED_HARD_FRAME_POINTER_REGNUM and\n\tXTENSA_CALL0_HARD_FRAME_POINTER_REGNUM.", "tree": {"sha": "2e08fa94114934bac2af06c0f41ae5a7535d75e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e08fa94114934bac2af06c0f41ae5a7535d75e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f50c32fa7ab4d3bb8b8091c6d38186799b81093b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f50c32fa7ab4d3bb8b8091c6d38186799b81093b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f50c32fa7ab4d3bb8b8091c6d38186799b81093b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f50c32fa7ab4d3bb8b8091c6d38186799b81093b/comments", "author": {"login": "jcmvbkbc", "id": 166731, "node_id": "MDQ6VXNlcjE2NjczMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/166731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcmvbkbc", "html_url": "https://github.com/jcmvbkbc", "followers_url": "https://api.github.com/users/jcmvbkbc/followers", "following_url": "https://api.github.com/users/jcmvbkbc/following{/other_user}", "gists_url": "https://api.github.com/users/jcmvbkbc/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcmvbkbc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcmvbkbc/subscriptions", "organizations_url": "https://api.github.com/users/jcmvbkbc/orgs", "repos_url": "https://api.github.com/users/jcmvbkbc/repos", "events_url": "https://api.github.com/users/jcmvbkbc/events{/privacy}", "received_events_url": "https://api.github.com/users/jcmvbkbc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jcmvbkbc", "id": 166731, "node_id": "MDQ6VXNlcjE2NjczMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/166731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcmvbkbc", "html_url": "https://github.com/jcmvbkbc", "followers_url": "https://api.github.com/users/jcmvbkbc/followers", "following_url": "https://api.github.com/users/jcmvbkbc/following{/other_user}", "gists_url": "https://api.github.com/users/jcmvbkbc/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcmvbkbc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcmvbkbc/subscriptions", "organizations_url": "https://api.github.com/users/jcmvbkbc/orgs", "repos_url": "https://api.github.com/users/jcmvbkbc/repos", "events_url": "https://api.github.com/users/jcmvbkbc/events{/privacy}", "received_events_url": "https://api.github.com/users/jcmvbkbc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce5a3d6bde7b3ca53c9988b057fa59ef411b1b76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce5a3d6bde7b3ca53c9988b057fa59ef411b1b76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce5a3d6bde7b3ca53c9988b057fa59ef411b1b76"}], "stats": {"total": 42, "additions": 34, "deletions": 8}, "files": [{"sha": "e3afb70cdf04aea6f9e138d3837d99cb8de51d01", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f50c32fa7ab4d3bb8b8091c6d38186799b81093b/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f50c32fa7ab4d3bb8b8091c6d38186799b81093b/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=f50c32fa7ab4d3bb8b8091c6d38186799b81093b", "patch": "@@ -183,6 +183,8 @@ static unsigned int xtensa_hard_regno_nregs (unsigned int, machine_mode);\n static bool xtensa_hard_regno_mode_ok (unsigned int, machine_mode);\n static bool xtensa_modes_tieable_p (machine_mode, machine_mode);\n static HOST_WIDE_INT xtensa_constant_alignment (const_tree, HOST_WIDE_INT);\n+static bool xtensa_can_eliminate (const int from ATTRIBUTE_UNUSED,\n+\t\t\t\t  const int to);\n static HOST_WIDE_INT xtensa_starting_frame_offset (void);\n static unsigned HOST_WIDE_INT xtensa_asan_shadow_offset (void);\n \n@@ -326,6 +328,9 @@ static rtx xtensa_delegitimize_address (rtx);\n #undef TARGET_CONSTANT_ALIGNMENT\n #define TARGET_CONSTANT_ALIGNMENT xtensa_constant_alignment\n \n+#undef TARGET_CAN_ELIMINATE\n+#define TARGET_CAN_ELIMINATE xtensa_can_eliminate\n+\n #undef TARGET_STARTING_FRAME_OFFSET\n #define TARGET_STARTING_FRAME_OFFSET xtensa_starting_frame_offset\n \n@@ -4411,6 +4416,17 @@ xtensa_constant_alignment (const_tree exp, HOST_WIDE_INT align)\n   return align;\n }\n \n+static bool\n+xtensa_can_eliminate (const int from ATTRIBUTE_UNUSED, const int to)\n+{\n+  gcc_assert (from == ARG_POINTER_REGNUM || from == FRAME_POINTER_REGNUM);\n+\n+  /* If we need a frame pointer, ARG_POINTER_REGNUM and FRAME_POINTER_REGNUM\n+     can only eliminate to HARD_FRAME_POINTER_REGNUM.  */\n+  return to == HARD_FRAME_POINTER_REGNUM\n+    || (!frame_pointer_needed && to == STACK_POINTER_REGNUM);\n+}\n+\n /* Implement TARGET_STARTING_FRAME_OFFSET.  */\n \n static HOST_WIDE_INT"}, {"sha": "fb5aee870dd5f199c87e7f1f6ef6cf1954f8664d", "filename": "gcc/config/xtensa/xtensa.h", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f50c32fa7ab4d3bb8b8091c6d38186799b81093b/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f50c32fa7ab4d3bb8b8091c6d38186799b81093b/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.h?ref=f50c32fa7ab4d3bb8b8091c6d38186799b81093b", "patch": "@@ -314,8 +314,13 @@ extern int leaf_function;\n #define STACK_POINTER_REGNUM (GP_REG_FIRST + 1)\n \n /* Base register for access to local variables of the function.  */\n-#define HARD_FRAME_POINTER_REGNUM (GP_REG_FIRST + \\\n-\t\t\t\t   (TARGET_WINDOWED_ABI ? 7 : 15))\n+#define HARD_FRAME_POINTER_REGNUM \\\n+  (TARGET_WINDOWED_ABI \\\n+   ? XTENSA_WINDOWED_HARD_FRAME_POINTER_REGNUM \\\n+   : XTENSA_CALL0_HARD_FRAME_POINTER_REGNUM)\n+\n+#define XTENSA_WINDOWED_HARD_FRAME_POINTER_REGNUM (GP_REG_FIRST + 7)\n+#define XTENSA_CALL0_HARD_FRAME_POINTER_REGNUM (GP_REG_FIRST + 15)\n \n /* The register number of the frame pointer register, which is used to\n    access automatic variables in the stack frame.  For Xtensa, this\n@@ -434,12 +439,17 @@ enum reg_class\n \t\t\t      || (flag_sanitize & SANITIZE_ADDRESS) != 0)\n \n /* The ARG_POINTER and FRAME_POINTER are not real Xtensa registers, so\n-   they are eliminated to either the stack pointer or hard frame pointer.  */\n-#define ELIMINABLE_REGS\t\t\t\t\t\t\t\\\n-{{ ARG_POINTER_REGNUM,\t\tSTACK_POINTER_REGNUM},\t\t\t\\\n- { ARG_POINTER_REGNUM,\t\tHARD_FRAME_POINTER_REGNUM},\t\t\\\n- { FRAME_POINTER_REGNUM,\tSTACK_POINTER_REGNUM},\t\t\t\\\n- { FRAME_POINTER_REGNUM,\tHARD_FRAME_POINTER_REGNUM}}\n+   they are eliminated to either the stack pointer or hard frame pointer.\n+   Since hard frame pointer is different register in windowed and call0\n+   ABIs list them both and only allow real HARD_FRAME_POINTER_REGNUM in\n+   TARGET_CAN_ELIMINATE.  */\n+#define ELIMINABLE_REGS\t\t\t\t\t\t\t    \\\n+{{ ARG_POINTER_REGNUM,\t\tSTACK_POINTER_REGNUM},\t\t\t    \\\n+ { ARG_POINTER_REGNUM,\t\tXTENSA_WINDOWED_HARD_FRAME_POINTER_REGNUM}, \\\n+ { ARG_POINTER_REGNUM,\t\tXTENSA_CALL0_HARD_FRAME_POINTER_REGNUM},    \\\n+ { FRAME_POINTER_REGNUM,\tSTACK_POINTER_REGNUM},\t\t\t    \\\n+ { FRAME_POINTER_REGNUM,\tXTENSA_WINDOWED_HARD_FRAME_POINTER_REGNUM}, \\\n+ { FRAME_POINTER_REGNUM,\tXTENSA_CALL0_HARD_FRAME_POINTER_REGNUM}}\n \n /* Specify the initial difference between the specified pair of registers.  */\n #define INITIAL_ELIMINATION_OFFSET(FROM, TO, OFFSET)\t\t\t\\"}]}