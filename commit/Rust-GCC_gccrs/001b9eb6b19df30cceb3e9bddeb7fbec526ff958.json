{"sha": "001b9eb6b19df30cceb3e9bddeb7fbec526ff958", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDAxYjllYjZiMTlkZjMwY2NlYjNlOWJkZGViN2ZiZWM1MjZmZjk1OA==", "commit": {"author": {"name": "Pat Haugen", "email": "pthaugen@us.ibm.com", "date": "2009-01-28T18:51:53Z"}, "committer": {"name": "Pat Haugen", "email": "pthaugen@gcc.gnu.org", "date": "2009-01-28T18:51:53Z"}, "message": "invoke.texi (avoid-indexed-addresses): Document new option.\n\n\t* doc/invoke.texi (avoid-indexed-addresses): Document new option.\n\t* config/rs6000/rs6000-protos.h (avoiding_indexed_address_p): Declare.\n\t* config/rs6000/rs6000.opt (avoid-indexed-addresses): New option.\n\t* config/rs6000/rs6000.c (rs6000_override_options): Default\n\tavoid-indexed-addresses on for Power6, off for everything else.\n\t(avoiding_indexed_address_p): New function.\n\t(rs6000_legitimize_address): Use it.\n\t(rs6000_legitimate_address): Likewise.\n\t* config/rs6000/rs6000.md (movXX_updateX): Likewise\n\t* gcc.target/powerpc/avoid-indexed-addresses.c: New test.\n\nFrom-SVN: r143742", "tree": {"sha": "7768363a91ec2e18411cb1aee8856dc7d40aa721", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7768363a91ec2e18411cb1aee8856dc7d40aa721"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/001b9eb6b19df30cceb3e9bddeb7fbec526ff958", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/001b9eb6b19df30cceb3e9bddeb7fbec526ff958", "html_url": "https://github.com/Rust-GCC/gccrs/commit/001b9eb6b19df30cceb3e9bddeb7fbec526ff958", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/001b9eb6b19df30cceb3e9bddeb7fbec526ff958/comments", "author": null, "committer": null, "parents": [{"sha": "b990b40f023aef5d01dc60a7582770302eef1706", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b990b40f023aef5d01dc60a7582770302eef1706", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b990b40f023aef5d01dc60a7582770302eef1706"}], "stats": {"total": 141, "additions": 122, "deletions": 19}, "files": [{"sha": "5f99aab0337783da7b6edba467269bbaa6df5d11", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/001b9eb6b19df30cceb3e9bddeb7fbec526ff958/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/001b9eb6b19df30cceb3e9bddeb7fbec526ff958/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=001b9eb6b19df30cceb3e9bddeb7fbec526ff958", "patch": "@@ -1,3 +1,15 @@\n+2009-01-28  Pat Haugen  <pthaugen@us.ibm.com>\n+\n+\t* doc/invoke.texi (avoid-indexed-addresses): Document new option.\n+\t* config/rs6000/rs6000-protos.h (avoiding_indexed_address_p): Declare.\n+\t* config/rs6000/rs6000.opt (avoid-indexed-addresses): New option.\n+\t* config/rs6000/rs6000.c (rs6000_override_options): Default\n+\tavoid-indexed-addresses on for Power6, off for everything else.\n+\t(avoiding_indexed_address_p): New function.\n+\t(rs6000_legitimize_address): Use it.\n+\t(rs6000_legitimate_address): Likewise.\n+\t* config/rs6000/rs6000.md (movXX_updateX): Likewise\n+\n 2009-01-28  Kazu Hirata  <kazu@codesourcery.com>\n \n \tPR tree-optimization/38997"}, {"sha": "4e2ecd3ec4a542bd0c570d8254ceb61e0ce9ae42", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/001b9eb6b19df30cceb3e9bddeb7fbec526ff958/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/001b9eb6b19df30cceb3e9bddeb7fbec526ff958/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=001b9eb6b19df30cceb3e9bddeb7fbec526ff958", "patch": "@@ -42,6 +42,7 @@ extern void validate_condition_mode (enum rtx_code, enum machine_mode);\n extern bool legitimate_constant_pool_address_p (rtx);\n extern bool legitimate_indirect_address_p (rtx, int);\n extern bool legitimate_indexed_address_p (rtx, int);\n+extern bool avoiding_indexed_address_p (enum machine_mode);\n \n extern rtx rs6000_got_register (rtx);\n extern rtx find_addr_reg (rtx);"}, {"sha": "d2ebf628f5730c29e01b6d0362e96529bf5ee190", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/001b9eb6b19df30cceb3e9bddeb7fbec526ff958/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/001b9eb6b19df30cceb3e9bddeb7fbec526ff958/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=001b9eb6b19df30cceb3e9bddeb7fbec526ff958", "patch": "@@ -1987,6 +1987,13 @@ rs6000_override_options (const char *default_cpu)\n       rs6000_single_float = rs6000_double_float = 1;\n   }\n \n+  /* If not explicitly specified via option, decide whether to generate indexed\n+     load/store instructions.  */\n+  if (TARGET_AVOID_XFORM == -1)\n+    /* Avoid indexed addressing when targeting Power6 in order to avoid\n+     the DERAT mispredict penalty.  */\n+    TARGET_AVOID_XFORM = (rs6000_cpu == PROCESSOR_POWER6 && TARGET_CMPB);\n+\n   rs6000_init_hard_regno_mode_ok ();\n }\n \n@@ -3704,6 +3711,14 @@ legitimate_indexed_address_p (rtx x, int strict)\n \t\t  && INT_REG_OK_FOR_INDEX_P (op0, strict))));\n }\n \n+bool\n+avoiding_indexed_address_p (enum machine_mode mode)\n+{\n+  /* Avoid indexed addressing for modes that have non-indexed\n+     load/store instruction forms.  */\n+  return TARGET_AVOID_XFORM && !ALTIVEC_VECTOR_MODE (mode);\n+}\n+\n inline bool\n legitimate_indirect_address_p (rtx x, int strict)\n {\n@@ -3830,6 +3845,7 @@ rs6000_legitimize_address (rtx x, rtx oldx ATTRIBUTE_UNUSED,\n \t       || ((mode != DImode && mode != DFmode && mode != DDmode)\n \t\t   || (TARGET_E500_DOUBLE && mode != DDmode)))\n \t   && (TARGET_POWERPC64 || mode != DImode)\n+\t   && !avoiding_indexed_address_p (mode)\n \t   && mode != TImode\n \t   && mode != TFmode\n \t   && mode != TDmode)\n@@ -4441,6 +4457,7 @@ rs6000_legitimate_address (enum machine_mode mode, rtx x, int reg_ok_strict)\n \t  || (mode != DFmode && mode != DDmode)\n \t  || (TARGET_E500_DOUBLE && mode != DDmode))\n       && (TARGET_POWERPC64 || mode != DImode)\n+      && !avoiding_indexed_address_p (mode)\n       && legitimate_indexed_address_p (x, reg_ok_strict))\n     return 1;\n   if (GET_CODE (x) == PRE_MODIFY\n@@ -4459,7 +4476,8 @@ rs6000_legitimate_address (enum machine_mode mode, rtx x, int reg_ok_strict)\n       && TARGET_UPDATE\n       && legitimate_indirect_address_p (XEXP (x, 0), reg_ok_strict)\n       && (rs6000_legitimate_offset_address_p (mode, XEXP (x, 1), reg_ok_strict)\n-\t  || legitimate_indexed_address_p (XEXP (x, 1), reg_ok_strict))\n+\t  || (!avoiding_indexed_address_p (mode)\n+\t      && legitimate_indexed_address_p (XEXP (x, 1), reg_ok_strict)))\n       && rtx_equal_p (XEXP (XEXP (x, 1), 0), XEXP (x, 0)))\n     return 1;\n   if (legitimate_lo_sum_address_p (mode, x, reg_ok_strict))"}, {"sha": "b6f41814ebac4d42361bb38ff1cbd3a717fcf8a1", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 57, "deletions": 18, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/001b9eb6b19df30cceb3e9bddeb7fbec526ff958/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/001b9eb6b19df30cceb3e9bddeb7fbec526ff958/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=001b9eb6b19df30cceb3e9bddeb7fbec526ff958", "patch": "@@ -10055,7 +10055,9 @@\n \t\t\t (match_operand:DI 2 \"reg_or_aligned_short_operand\" \"r,I\"))))\n    (set (match_operand:DI 0 \"gpc_reg_operand\" \"=b,b\")\n \t(plus:DI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_POWERPC64 && TARGET_UPDATE\"\n+  \"TARGET_POWERPC64 && TARGET_UPDATE\n+   && (!avoiding_indexed_address_p (DImode)\n+       || !gpc_reg_operand (operands[2], DImode))\"\n   \"@\n    ldux %3,%0,%2\n    ldu %3,%2(%0)\"\n@@ -10067,7 +10069,11 @@\n \t(match_operand:DI 3 \"gpc_reg_operand\" \"r,r\"))\n    (set (match_operand:P 0 \"gpc_reg_operand\" \"=b,b\")\n \t(plus:P (match_dup 1) (match_dup 2)))]\n-  \"TARGET_POWERPC64 && TARGET_UPDATE\"\n+  \"TARGET_POWERPC64 && TARGET_UPDATE\n+   && (!avoiding_indexed_address_p (Pmode)\n+       || !gpc_reg_operand (operands[2], Pmode)\n+       || (REG_P (operands[0])\n+\t   && REGNO (operands[0]) == STACK_POINTER_REGNUM))\"\n   \"@\n    stdux %3,%0,%2\n    stdu %3,%2(%0)\"\n@@ -10079,7 +10085,9 @@\n \t\t\t (match_operand:SI 2 \"reg_or_short_operand\" \"r,I\"))))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=b,b\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_UPDATE\"\n+  \"TARGET_UPDATE\n+   && (!avoiding_indexed_address_p (SImode)\n+       || !gpc_reg_operand (operands[2], SImode))\"\n   \"@\n    {lux|lwzux} %3,%0,%2\n    {lu|lwzu} %3,%2(%0)\"\n@@ -10092,7 +10100,8 @@\n \t\t\t  (match_operand:DI 2 \"gpc_reg_operand\" \"r\")))))\n    (set (match_operand:DI 0 \"gpc_reg_operand\" \"=b\")\n \t(plus:DI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_POWERPC64 && rs6000_gen_cell_microcode\"\n+  \"TARGET_POWERPC64 && rs6000_gen_cell_microcode\n+   && !avoiding_indexed_address_p (DImode)\"\n   \"lwaux %3,%0,%2\"\n   [(set_attr \"type\" \"load_ext_ux\")])\n \n@@ -10102,7 +10111,11 @@\n \t(match_operand:SI 3 \"gpc_reg_operand\" \"r,r\"))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=b,b\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_UPDATE\"\n+  \"TARGET_UPDATE\n+   && (!avoiding_indexed_address_p (SImode)\n+       || !gpc_reg_operand (operands[2], SImode)\n+       || (REG_P (operands[0])\n+\t   && REGNO (operands[0]) == STACK_POINTER_REGNUM))\"\n   \"@\n    {stux|stwux} %3,%0,%2\n    {stu|stwu} %3,%2(%0)\"\n@@ -10114,7 +10127,9 @@\n \t\t\t (match_operand:SI 2 \"reg_or_short_operand\" \"r,I\"))))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=b,b\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_UPDATE\"\n+  \"TARGET_UPDATE\n+   && (!avoiding_indexed_address_p (SImode)\n+       || !gpc_reg_operand (operands[2], SImode))\"\n   \"@\n    lhzux %3,%0,%2\n    lhzu %3,%2(%0)\"\n@@ -10127,7 +10142,9 @@\n \t\t\t  (match_operand:SI 2 \"reg_or_short_operand\" \"r,I\")))))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=b,b\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_UPDATE\"\n+  \"TARGET_UPDATE\n+   && (!avoiding_indexed_address_p (SImode)\n+       || !gpc_reg_operand (operands[2], SImode))\"\n   \"@\n    lhzux %3,%0,%2\n    lhzu %3,%2(%0)\"\n@@ -10140,7 +10157,9 @@\n \t\t\t  (match_operand:SI 2 \"reg_or_short_operand\" \"r,I\")))))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=b,b\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_UPDATE && rs6000_gen_cell_microcode\"\n+  \"TARGET_UPDATE && rs6000_gen_cell_microcode\n+   && (!avoiding_indexed_address_p (SImode)\n+       || !gpc_reg_operand (operands[2], SImode))\"\n   \"@\n    lhaux %3,%0,%2\n    lhau %3,%2(%0)\"\n@@ -10152,7 +10171,9 @@\n \t(match_operand:HI 3 \"gpc_reg_operand\" \"r,r\"))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=b,b\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_UPDATE\"\n+  \"TARGET_UPDATE\n+   && (!avoiding_indexed_address_p (SImode)\n+       || !gpc_reg_operand (operands[2], SImode))\"\n   \"@\n    sthux %3,%0,%2\n    sthu %3,%2(%0)\"\n@@ -10164,7 +10185,9 @@\n \t\t\t (match_operand:SI 2 \"reg_or_short_operand\" \"r,I\"))))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=b,b\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_UPDATE\"\n+  \"TARGET_UPDATE\n+   && (!avoiding_indexed_address_p (SImode)\n+       || !gpc_reg_operand (operands[2], SImode))\"\n   \"@\n    lbzux %3,%0,%2\n    lbzu %3,%2(%0)\"\n@@ -10177,7 +10200,9 @@\n \t\t\t  (match_operand:SI 2 \"reg_or_short_operand\" \"r,I\")))))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=b,b\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_UPDATE\"\n+  \"TARGET_UPDATE\n+   && (!avoiding_indexed_address_p (SImode)\n+       || !gpc_reg_operand (operands[2], SImode))\"\n   \"@\n    lbzux %3,%0,%2\n    lbzu %3,%2(%0)\"\n@@ -10189,7 +10214,9 @@\n \t(match_operand:QI 3 \"gpc_reg_operand\" \"r,r\"))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=b,b\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_UPDATE\"\n+  \"TARGET_UPDATE\n+   && (!avoiding_indexed_address_p (SImode)\n+       || !gpc_reg_operand (operands[2], SImode))\"\n   \"@\n    stbux %3,%0,%2\n    stbu %3,%2(%0)\"\n@@ -10201,7 +10228,9 @@\n \t\t\t (match_operand:SI 2 \"reg_or_short_operand\" \"r,I\"))))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=b,b\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT && TARGET_UPDATE\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT && TARGET_UPDATE\n+   && (!avoiding_indexed_address_p (SImode)\n+       || !gpc_reg_operand (operands[2], SImode))\"\n   \"@\n    lfsux %3,%0,%2\n    lfsu %3,%2(%0)\"\n@@ -10213,7 +10242,9 @@\n \t(match_operand:SF 3 \"gpc_reg_operand\" \"f,f\"))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=b,b\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT && TARGET_UPDATE\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT && TARGET_UPDATE\n+   && (!avoiding_indexed_address_p (SImode)\n+       || !gpc_reg_operand (operands[2], SImode))\"\n   \"@\n    stfsux %3,%0,%2\n    stfsu %3,%2(%0)\"\n@@ -10225,7 +10256,9 @@\n \t\t\t (match_operand:SI 2 \"reg_or_short_operand\" \"r,I\"))))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=b,b\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n-  \"(TARGET_SOFT_FLOAT || !TARGET_FPRS) && TARGET_UPDATE\"\n+  \"(TARGET_SOFT_FLOAT || !TARGET_FPRS) && TARGET_UPDATE\n+   && (!avoiding_indexed_address_p (SImode)\n+       || !gpc_reg_operand (operands[2], SImode))\"\n   \"@\n    {lux|lwzux} %3,%0,%2\n    {lu|lwzu} %3,%2(%0)\"\n@@ -10237,7 +10270,9 @@\n \t(match_operand:SF 3 \"gpc_reg_operand\" \"r,r\"))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=b,b\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n-  \"(TARGET_SOFT_FLOAT || !TARGET_FPRS) && TARGET_UPDATE\"\n+  \"(TARGET_SOFT_FLOAT || !TARGET_FPRS) && TARGET_UPDATE\n+   && (!avoiding_indexed_address_p (SImode)\n+       || !gpc_reg_operand (operands[2], SImode))\"\n   \"@\n    {stux|stwux} %3,%0,%2\n    {stu|stwu} %3,%2(%0)\"\n@@ -10249,7 +10284,9 @@\n \t\t\t (match_operand:SI 2 \"reg_or_short_operand\" \"r,I\"))))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=b,b\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT && TARGET_UPDATE\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT && TARGET_UPDATE\n+   && (!avoiding_indexed_address_p (SImode)\n+       || !gpc_reg_operand (operands[2], SImode))\"\n   \"@\n    lfdux %3,%0,%2\n    lfdu %3,%2(%0)\"\n@@ -10261,7 +10298,9 @@\n \t(match_operand:DF 3 \"gpc_reg_operand\" \"f,f\"))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=b,b\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT && TARGET_UPDATE\"\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT && TARGET_UPDATE\n+   && (!avoiding_indexed_address_p (SImode)\n+       || !gpc_reg_operand (operands[2], SImode))\"\n   \"@\n    stfdux %3,%0,%2\n    stfdu %3,%2(%0)\""}, {"sha": "ec5373eb877e17ef0639011b67c6fe139e8e079a", "filename": "gcc/config/rs6000/rs6000.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/001b9eb6b19df30cceb3e9bddeb7fbec526ff958/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/001b9eb6b19df30cceb3e9bddeb7fbec526ff958/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.opt?ref=001b9eb6b19df30cceb3e9bddeb7fbec526ff958", "patch": "@@ -119,6 +119,10 @@ mupdate\n Target Report RejectNegative InverseMask(NO_UPDATE, UPDATE)\n Generate load/store with update instructions\n \n+mavoid-indexed-addresses\n+Target Report Var(TARGET_AVOID_XFORM) Init(-1)\n+Avoid generation of indexed load/store instructions when possible\n+\n mno-fused-madd\n Target Report RejectNegative Mask(NO_FUSED_MADD)\n Do not generate fused multiply/add instructions"}, {"sha": "7e991c89f995c6eabe93a86ee5f8adc7f0dc874c", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/001b9eb6b19df30cceb3e9bddeb7fbec526ff958/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/001b9eb6b19df30cceb3e9bddeb7fbec526ff958/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=001b9eb6b19df30cceb3e9bddeb7fbec526ff958", "patch": "@@ -721,6 +721,7 @@ See RS/6000 and PowerPC Options.\n -msoft-float  -mhard-float  -mmultiple  -mno-multiple @gol\n -msingle-float -mdouble-float -msimple-fpu @gol\n -mstring  -mno-string  -mupdate  -mno-update @gol\n+-mavoid-indexed-addresses  -mno-avoid-indexed-addresses @gol\n -mfused-madd  -mno-fused-madd  -mbit-align  -mno-bit-align @gol\n -mstrict-align  -mno-strict-align  -mrelocatable @gol\n -mno-relocatable  -mrelocatable-lib  -mno-relocatable-lib @gol\n@@ -13814,6 +13815,16 @@ stack pointer is updated and the address of the previous frame is\n stored, which means code that walks the stack frame across interrupts or\n signals may get corrupted data.\n \n+@item -mavoid-indexed-addresses\n+@item -mno-avoid-indexed-addresses\n+@opindex mavoid-indexed-addresses\n+@opindex mno-avoid-indexed-addresses\n+Generate code that tries to avoid (not avoid) the use of indexed load\n+or store instructions. These instructions can incur a performance\n+penalty on Power6 processors in certain situations, such as when\n+stepping through large arrays that cross a 16M boundary.  This option\n+is enabled by default when targetting Power6 and disabled otherwise.\n+\n @item -mfused-madd\n @itemx -mno-fused-madd\n @opindex mfused-madd"}, {"sha": "44e685b51bfb82fa517b44e3d0672560e824d9c3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/001b9eb6b19df30cceb3e9bddeb7fbec526ff958/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/001b9eb6b19df30cceb3e9bddeb7fbec526ff958/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=001b9eb6b19df30cceb3e9bddeb7fbec526ff958", "patch": "@@ -1,3 +1,7 @@\n+2009-01-28  Pat Haugen  <pthaugen@us.ibm.com>\n+\n+\t* gcc.target/powerpc/avoid-indexed-addresses.c: New test.\n+\n 2009-01-28  Kazu Hirata  <kazu@codesourcery.com>\n \n \tPR tree-optimization/38997"}, {"sha": "b1b067283f7302a3b5688f19dfcb9e7bea0a15dc", "filename": "gcc/testsuite/gcc.target/powerpc/avoid-indexed-addresses.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/001b9eb6b19df30cceb3e9bddeb7fbec526ff958/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Favoid-indexed-addresses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/001b9eb6b19df30cceb3e9bddeb7fbec526ff958/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Favoid-indexed-addresses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Favoid-indexed-addresses.c?ref=001b9eb6b19df30cceb3e9bddeb7fbec526ff958", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-options \"-O2 -mavoid-indexed-addresses\" } */\n+\n+/* { dg-final { scan-assembler-not \"lbzx\" } }\n+\n+/* Ensure that an indexed load is not generated with\n+   -mavoid-indexed-addresses. */\n+\n+char\n+do_one (char *base, unsigned long offset)\n+{\n+  return base[offset];\n+}\n+"}]}