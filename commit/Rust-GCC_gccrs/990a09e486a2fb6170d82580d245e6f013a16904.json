{"sha": "990a09e486a2fb6170d82580d245e6f013a16904", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTkwYTA5ZTQ4NmEyZmI2MTcwZDgyNTgwZDI0NWU2ZjAxM2ExNjkwNA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-12-10T16:15:49Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-12-10T16:15:49Z"}, "message": "libstdc++: Fix bug in std::indirect_result_t\n\nThe alias template wasn't working because it applied iter_reference_t to\nthe pack of iterators before and after passing the pack to the\n__indeirect_result helper.\n\n\t* include/bits/iterator_concepts.h (indirect_result_t): Do not apply\n\titer_reference_t to parameter pack.\n\t* testsuite/24_iterators/indirect_callable/projected.cc: New test.\n\nFrom-SVN: r279170", "tree": {"sha": "ba7f6be93faf6a510d89175f78853abfb82ef518", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba7f6be93faf6a510d89175f78853abfb82ef518"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/990a09e486a2fb6170d82580d245e6f013a16904", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/990a09e486a2fb6170d82580d245e6f013a16904", "html_url": "https://github.com/Rust-GCC/gccrs/commit/990a09e486a2fb6170d82580d245e6f013a16904", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/990a09e486a2fb6170d82580d245e6f013a16904/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0d0ba20f2345023e9cec2419c9fb9e6cc7098c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0d0ba20f2345023e9cec2419c9fb9e6cc7098c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0d0ba20f2345023e9cec2419c9fb9e6cc7098c6"}], "stats": {"total": 77, "additions": 64, "deletions": 13}, "files": [{"sha": "f25e0407bfaeba7b394e55b3ec2f61ae8e5d7867", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/990a09e486a2fb6170d82580d245e6f013a16904/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/990a09e486a2fb6170d82580d245e6f013a16904/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=990a09e486a2fb6170d82580d245e6f013a16904", "patch": "@@ -1,3 +1,9 @@\n+2019-12-10  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/iterator_concepts.h (indirect_result_t): Do not apply\n+\titer_reference_t to parameter pack.\n+\t* testsuite/24_iterators/indirect_callable/projected.cc: New test.\n+\n 2019-12-09  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/range_access.h (ranges::enable_safe_range): Define."}, {"sha": "ab9851f19c4e9dda2978d4e00a19e237b38316f8", "filename": "libstdc++-v3/include/bits/iterator_concepts.h", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/990a09e486a2fb6170d82580d245e6f013a16904/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fiterator_concepts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/990a09e486a2fb6170d82580d245e6f013a16904/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fiterator_concepts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fiterator_concepts.h?ref=990a09e486a2fb6170d82580d245e6f013a16904", "patch": "@@ -474,18 +474,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       struct __iter_common_ref\n       : common_reference<iter_reference_t<_Tp>, iter_value_t<_Tp>&>\n       { };\n-\n-    // FIXME: needed due to PR c++/67704\n-    template<typename _Fn, typename... _Is>\n-      struct __indirect_result\n-      { };\n-\n-    template<typename _Fn, typename... _Is>\n-      requires (readable<_Is> && ...)\n-\t&& invocable<_Fn, iter_reference_t<_Is>...>\n-      struct __indirect_result<_Fn, _Is...>\n-      : invoke_result<_Fn, iter_reference_t<_Is>...>\n-      { };\n   } // namespace __detail\n \n   template<typename _Tp>\n@@ -653,15 +641,31 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       && strict_weak_order<_Fn&, iter_common_reference_t<_I1>,\n \t\t\t   iter_common_reference_t<_I2>>;\n \n+  namespace __detail\n+  {\n+    // FIXME: needed due to PR c++/67704\n+    template<typename _Fn, typename... _Is>\n+      struct __indirect_result\n+      { };\n+\n+    template<typename _Fn, typename... _Is>\n+      requires (readable<_Is> && ...)\n+\t&& invocable<_Fn, iter_reference_t<_Is>...>\n+      struct __indirect_result<_Fn, _Is...>\n+      : invoke_result<_Fn, iter_reference_t<_Is>...>\n+      { };\n+  } // namespace __detail\n+\n   template<typename _Fn, typename... _Is>\n     using indirect_result_t = typename\n-      __detail::__indirect_result<_Fn, iter_reference_t<_Is>...>::type;\n+      __detail::__indirect_result<_Fn, _Is...>::type;\n \n   /// [projected], projected\n   template<readable _Iter, indirectly_regular_unary_invocable<_Iter> _Proj>\n     struct projected\n     {\n       using value_type = remove_cvref_t<indirect_result_t<_Proj&, _Iter>>;\n+\n       indirect_result_t<_Proj&, _Iter> operator*() const; // not defined\n     };\n "}, {"sha": "2237314ddc2bf06c9a1c2e20faef06653523c88e", "filename": "libstdc++-v3/testsuite/24_iterators/indirect_callable/projected.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/990a09e486a2fb6170d82580d245e6f013a16904/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Findirect_callable%2Fprojected.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/990a09e486a2fb6170d82580d245e6f013a16904/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Findirect_callable%2Fprojected.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Findirect_callable%2Fprojected.cc?ref=990a09e486a2fb6170d82580d245e6f013a16904", "patch": "@@ -0,0 +1,41 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <iterator>\n+\n+template<typename T>\n+  using PI = std::projected<T, std::identity>;\n+\n+static_assert(std::same_as<PI<int*>::value_type, int>);\n+static_assert(std::same_as<decltype(*std::declval<const PI<int*>&>()), int&>);\n+\n+struct X\n+{\n+  using value_type = char*;\n+  char* const& operator*() &;\n+};\n+static_assert( std::readable<X> );\n+static_assert(std::same_as<PI<X>::value_type, char*>);\n+static_assert(std::same_as<decltype(*std::declval<PI<X>&>()), char* const&>);\n+\n+struct Y;\n+using PY = std::projected<const Y*, int Y::*>;\n+static_assert(std::same_as<PY::value_type, int>);\n+static_assert(std::same_as<decltype(*std::declval<PY&>()), const int&>);"}]}