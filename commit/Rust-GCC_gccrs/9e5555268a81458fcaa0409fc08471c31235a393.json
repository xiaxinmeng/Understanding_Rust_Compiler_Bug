{"sha": "9e5555268a81458fcaa0409fc08471c31235a393", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWU1NTU1MjY4YTgxNDU4ZmNhYTA0MDlmYzA4NDcxYzMxMjM1YTM5Mw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-02-23T06:10:02Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-02-23T06:10:02Z"}, "message": "[multiple changes]\n\n2003-02-22  Richard Henderson  <rth@redhat.com>\n\n\t* i386.c, i386.h (TUNEMASK): Rename from CPUMASK.\n\n2003-02-22  Kelley Cook <kelley@dwhoops.info>\n\n        * i386.h, i386.c, i386.md (ix86_tune): Rename from ix86_cpu.\n\t(ix86_tune_string): Rename from ix86_cpu_string.\n\nFrom-SVN: r63314", "tree": {"sha": "792ae2a99c611a958ebde1708494099611ea5961", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/792ae2a99c611a958ebde1708494099611ea5961"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e5555268a81458fcaa0409fc08471c31235a393", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e5555268a81458fcaa0409fc08471c31235a393", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e5555268a81458fcaa0409fc08471c31235a393", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e5555268a81458fcaa0409fc08471c31235a393/comments", "author": null, "committer": null, "parents": [{"sha": "9d913bbf3fc996874649168d7d144a642012ac9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d913bbf3fc996874649168d7d144a642012ac9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d913bbf3fc996874649168d7d144a642012ac9b"}], "stats": {"total": 197, "additions": 103, "deletions": 94}, "files": [{"sha": "3b0e143b16c6d03df877189cba65069439e3699a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e5555268a81458fcaa0409fc08471c31235a393/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e5555268a81458fcaa0409fc08471c31235a393/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9e5555268a81458fcaa0409fc08471c31235a393", "patch": "@@ -1,3 +1,12 @@\n+2003-02-22  Richard Henderson  <rth@redhat.com>\n+\n+\t* i386.c, i386.h (TUNEMASK): Rename from CPUMASK.\n+\n+2003-02-22  Kelley Cook <kelley@dwhoops.info>\n+\n+        * i386.h, i386.c, i386.md (ix86_tune): Rename from ix86_cpu.\n+\t(ix86_tune_string): Rename from ix86_cpu_string.\n+\n 2003-02-22  Kelley Cook <kelleycook@comcast.net>\n \n         * config/i386/i386.c: Replace \"mcpu\" with \"mtune\"."}, {"sha": "89995c7cb782df6236a15bdf7ca57170f12eeee0", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e5555268a81458fcaa0409fc08471c31235a393/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e5555268a81458fcaa0409fc08471c31235a393/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=9e5555268a81458fcaa0409fc08471c31235a393", "patch": "@@ -754,12 +754,12 @@ enum tls_dialect ix86_tls_dialect = TLS_DIALECT_GNU;\n enum fpmath_unit ix86_fpmath;\n \n /* Which cpu are we scheduling for.  */\n-enum processor_type ix86_cpu;\n+enum processor_type ix86_tune;\n /* Which instruction set architecture to use.  */\n enum processor_type ix86_arch;\n \n /* Strings to hold which cpu and instruction set architecture  to use.  */\n-const char *ix86_cpu_string;\t\t/* for -mtune=<xxx> */\n+const char *ix86_tune_string;\t\t/* for -mtune=<xxx> */\n const char *ix86_arch_string;\t\t/* for -march=<xxx> */\n const char *ix86_fpmath_string;\t\t/* for -mfpmath=<xxx> */\n \n@@ -1148,10 +1148,10 @@ override_options ()\n   SUBTARGET_OVERRIDE_OPTIONS;\n #endif\n \n-  if (!ix86_cpu_string && ix86_arch_string)\n-    ix86_cpu_string = ix86_arch_string;\n-  if (!ix86_cpu_string)\n-    ix86_cpu_string = cpu_names [TARGET_CPU_DEFAULT];\n+  if (!ix86_tune_string && ix86_arch_string)\n+    ix86_tune_string = ix86_arch_string;\n+  if (!ix86_tune_string)\n+    ix86_tune_string = cpu_names [TARGET_CPU_DEFAULT];\n   if (!ix86_arch_string)\n     ix86_arch_string = TARGET_64BIT ? \"k8\" : \"i386\";\n \n@@ -1201,7 +1201,7 @@ override_options ()\n       {\n \tix86_arch = processor_alias_table[i].processor;\n \t/* Default cpu tuning to the architecture.  */\n-\tix86_cpu = ix86_arch;\n+\tix86_tune = ix86_arch;\n \tif (processor_alias_table[i].flags & PTA_MMX\n \t    && !(target_flags_explicit & MASK_MMX))\n \t  target_flags |= MASK_MMX;\n@@ -1228,24 +1228,24 @@ override_options ()\n     error (\"bad value (%s) for -march= switch\", ix86_arch_string);\n \n   for (i = 0; i < pta_size; i++)\n-    if (! strcmp (ix86_cpu_string, processor_alias_table[i].name))\n+    if (! strcmp (ix86_tune_string, processor_alias_table[i].name))\n       {\n-\tix86_cpu = processor_alias_table[i].processor;\n+\tix86_tune = processor_alias_table[i].processor;\n \tif (TARGET_64BIT && !(processor_alias_table[i].flags & PTA_64BIT))\n \t  error (\"CPU you selected does not support x86-64 instruction set\");\n \tbreak;\n       }\n   if (processor_alias_table[i].flags & PTA_PREFETCH_SSE)\n     x86_prefetch_sse = true;\n   if (i == pta_size)\n-    error (\"bad value (%s) for -mtune= switch\", ix86_cpu_string);\n+    error (\"bad value (%s) for -mtune= switch\", ix86_tune_string);\n \n   if (optimize_size)\n     ix86_cost = &size_cost;\n   else\n-    ix86_cost = processor_target_table[ix86_cpu].cost;\n-  target_flags |= processor_target_table[ix86_cpu].target_enable;\n-  target_flags &= ~processor_target_table[ix86_cpu].target_disable;\n+    ix86_cost = processor_target_table[ix86_tune].cost;\n+  target_flags |= processor_target_table[ix86_tune].target_enable;\n+  target_flags &= ~processor_target_table[ix86_tune].target_disable;\n \n   /* Arrange to set up i386_stack_locals for all functions.  */\n   init_machine_status = ix86_init_machine_status;\n@@ -1308,17 +1308,17 @@ override_options ()\n   /* Default align_* from the processor table.  */\n   if (align_loops == 0)\n     {\n-      align_loops = processor_target_table[ix86_cpu].align_loop;\n-      align_loops_max_skip = processor_target_table[ix86_cpu].align_loop_max_skip;\n+      align_loops = processor_target_table[ix86_tune].align_loop;\n+      align_loops_max_skip = processor_target_table[ix86_tune].align_loop_max_skip;\n     }\n   if (align_jumps == 0)\n     {\n-      align_jumps = processor_target_table[ix86_cpu].align_jump;\n-      align_jumps_max_skip = processor_target_table[ix86_cpu].align_jump_max_skip;\n+      align_jumps = processor_target_table[ix86_tune].align_jump;\n+      align_jumps_max_skip = processor_target_table[ix86_tune].align_jump_max_skip;\n     }\n   if (align_functions == 0)\n     {\n-      align_functions = processor_target_table[ix86_cpu].align_func;\n+      align_functions = processor_target_table[ix86_tune].align_func;\n     }\n \n   /* Validate -mpreferred-stack-boundary= value, or provide default.\n@@ -1339,7 +1339,7 @@ override_options ()\n     }\n \n   /* Validate -mbranch-cost= value, or provide default.  */\n-  ix86_branch_cost = processor_target_table[ix86_cpu].cost->branch_cost;\n+  ix86_branch_cost = processor_target_table[ix86_tune].cost->branch_cost;\n   if (ix86_branch_cost_string)\n     {\n       i = atoi (ix86_branch_cost_string);\n@@ -1438,7 +1438,7 @@ override_options ()\n       if (x86_3dnow_a & (1 << ix86_arch))\n \ttarget_flags |= MASK_3DNOW_A;\n     }\n-  if ((x86_accumulate_outgoing_args & CPUMASK)\n+  if ((x86_accumulate_outgoing_args & TUNEMASK)\n       && !(target_flags_explicit & MASK_ACCUMULATE_OUTGOING_ARGS)\n       && !optimize_size)\n     target_flags |= MASK_ACCUMULATE_OUTGOING_ARGS;\n@@ -4004,7 +4004,7 @@ promotable_binary_operator (op, mode)\n     case MULT:\n       /* Modern CPUs have same latency for HImode and SImode multiply,\n          but 386 and 486 do HImode multiply faster.  */\n-      return ix86_cpu > PROCESSOR_I486;\n+      return ix86_tune > PROCESSOR_I486;\n     case PLUS:\n     case AND:\n     case IOR:\n@@ -4264,7 +4264,7 @@ standard_80387_constant_p (x)\n   /* For XFmode constants, try to find a special 80387 instruction on\n      those CPUs that benefit from them.  */\n   if (GET_MODE (x) == XFmode\n-      && x86_ext_80387_constants & CPUMASK)\n+      && x86_ext_80387_constants & TUNEMASK)\n     {\n       REAL_VALUE_TYPE r;\n       int i;\n@@ -5468,7 +5468,7 @@ ix86_decompose_address (addr, out)\n \n   /* Special case: on K6, [%esi] makes the instruction vector decoded.\n      Avoid this by transforming to [%esi+0].  */\n-  if (ix86_cpu == PROCESSOR_K6 && !optimize_size\n+  if (ix86_tune == PROCESSOR_K6 && !optimize_size\n       && base && !index && !disp\n       && REG_P (base)\n       && REGNO_REG_CLASS (REGNO (base)) == SIREG)\n@@ -11910,7 +11910,7 @@ ix86_attr_length_address_default (insn)\n static int\n ix86_issue_rate ()\n {\n-  switch (ix86_cpu)\n+  switch (ix86_tune)\n     {\n     case PROCESSOR_PENTIUM:\n     case PROCESSOR_K6:\n@@ -12037,7 +12037,7 @@ ix86_adjust_cost (insn, link, dep_insn, cost)\n   insn_type = get_attr_type (insn);\n   dep_insn_type = get_attr_type (dep_insn);\n \n-  switch (ix86_cpu)\n+  switch (ix86_tune)\n     {\n     case PROCESSOR_PENTIUM:\n       /* Address Generation Interlock adds a cycle of latency.  */\n@@ -12328,7 +12328,7 @@ ix86_sched_reorder (dump, sched_verbose, ready, n_readyp, clock_var)\n       goto out;\n     }\n \n-  switch (ix86_cpu)\n+  switch (ix86_tune)\n     {\n     default:\n       break;\n@@ -12353,7 +12353,7 @@ ix86_variable_issue (dump, sched_verbose, insn, can_issue_more)\n      int can_issue_more;\n {\n   int i;\n-  switch (ix86_cpu)\n+  switch (ix86_tune)\n     {\n     default:\n       return can_issue_more - 1;\n@@ -12420,7 +12420,7 @@ ia32_use_dfa_pipeline_interface ()\n static int\n ia32_multipass_dfa_lookahead ()\n {\n-  if (ix86_cpu == PROCESSOR_PENTIUM)\n+  if (ix86_tune == PROCESSOR_PENTIUM)\n     return 2;\n   else\n    return 0;"}, {"sha": "c8be29650a650ca768e9b7a9147494fa03ffa9a3", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 65, "deletions": 65, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e5555268a81458fcaa0409fc08471c31235a393/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e5555268a81458fcaa0409fc08471c31235a393/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=9e5555268a81458fcaa0409fc08471c31235a393", "patch": "@@ -201,17 +201,17 @@ extern int target_flags;\n #endif\n #endif\n \n-#define TARGET_386 (ix86_cpu == PROCESSOR_I386)\n-#define TARGET_486 (ix86_cpu == PROCESSOR_I486)\n-#define TARGET_PENTIUM (ix86_cpu == PROCESSOR_PENTIUM)\n-#define TARGET_PENTIUMPRO (ix86_cpu == PROCESSOR_PENTIUMPRO)\n-#define TARGET_K6 (ix86_cpu == PROCESSOR_K6)\n-#define TARGET_ATHLON (ix86_cpu == PROCESSOR_ATHLON)\n-#define TARGET_PENTIUM4 (ix86_cpu == PROCESSOR_PENTIUM4)\n-#define TARGET_K8 (ix86_cpu == PROCESSOR_K8)\n+#define TARGET_386 (ix86_tune == PROCESSOR_I386)\n+#define TARGET_486 (ix86_tune == PROCESSOR_I486)\n+#define TARGET_PENTIUM (ix86_tune == PROCESSOR_PENTIUM)\n+#define TARGET_PENTIUMPRO (ix86_tune == PROCESSOR_PENTIUMPRO)\n+#define TARGET_K6 (ix86_tune == PROCESSOR_K6)\n+#define TARGET_ATHLON (ix86_tune == PROCESSOR_ATHLON)\n+#define TARGET_PENTIUM4 (ix86_tune == PROCESSOR_PENTIUM4)\n+#define TARGET_K8 (ix86_tune == PROCESSOR_K8)\n #define TARGET_ATHLON_K8 (TARGET_K8 || TARGET_ATHLON)\n \n-#define CPUMASK (1 << ix86_cpu)\n+#define TUNEMASK (1 << ix86_tune)\n extern const int x86_use_leave, x86_push_memory, x86_zero_extend_with_and;\n extern const int x86_use_bit_test, x86_cmove, x86_deep_branch;\n extern const int x86_branch_hints, x86_unroll_strlen;\n@@ -233,57 +233,57 @@ extern const int x86_use_ffreep, x86_sse_partial_regs_for_cvtsd2ss;\n extern const int x86_inter_unit_moves;\n extern int x86_prefetch_sse;\n \n-#define TARGET_USE_LEAVE (x86_use_leave & CPUMASK)\n-#define TARGET_PUSH_MEMORY (x86_push_memory & CPUMASK)\n-#define TARGET_ZERO_EXTEND_WITH_AND (x86_zero_extend_with_and & CPUMASK)\n-#define TARGET_USE_BIT_TEST (x86_use_bit_test & CPUMASK)\n-#define TARGET_UNROLL_STRLEN (x86_unroll_strlen & CPUMASK)\n+#define TARGET_USE_LEAVE (x86_use_leave & TUNEMASK)\n+#define TARGET_PUSH_MEMORY (x86_push_memory & TUNEMASK)\n+#define TARGET_ZERO_EXTEND_WITH_AND (x86_zero_extend_with_and & TUNEMASK)\n+#define TARGET_USE_BIT_TEST (x86_use_bit_test & TUNEMASK)\n+#define TARGET_UNROLL_STRLEN (x86_unroll_strlen & TUNEMASK)\n /* For sane SSE instruction set generation we need fcomi instruction.  It is\n    safe to enable all CMOVE instructions.  */\n #define TARGET_CMOVE ((x86_cmove & (1 << ix86_arch)) || TARGET_SSE)\n-#define TARGET_DEEP_BRANCH_PREDICTION (x86_deep_branch & CPUMASK)\n-#define TARGET_BRANCH_PREDICTION_HINTS (x86_branch_hints & CPUMASK)\n-#define TARGET_DOUBLE_WITH_ADD (x86_double_with_add & CPUMASK)\n-#define TARGET_USE_SAHF ((x86_use_sahf & CPUMASK) && !TARGET_64BIT)\n-#define TARGET_MOVX (x86_movx & CPUMASK)\n-#define TARGET_PARTIAL_REG_STALL (x86_partial_reg_stall & CPUMASK)\n-#define TARGET_USE_LOOP (x86_use_loop & CPUMASK)\n-#define TARGET_USE_FIOP (x86_use_fiop & CPUMASK)\n-#define TARGET_USE_MOV0 (x86_use_mov0 & CPUMASK)\n-#define TARGET_USE_CLTD (x86_use_cltd & CPUMASK)\n-#define TARGET_SPLIT_LONG_MOVES (x86_split_long_moves & CPUMASK)\n-#define TARGET_READ_MODIFY_WRITE (x86_read_modify_write & CPUMASK)\n-#define TARGET_READ_MODIFY (x86_read_modify & CPUMASK)\n-#define TARGET_PROMOTE_QImode (x86_promote_QImode & CPUMASK)\n-#define TARGET_FAST_PREFIX (x86_fast_prefix & CPUMASK)\n-#define TARGET_SINGLE_STRINGOP (x86_single_stringop & CPUMASK)\n-#define TARGET_QIMODE_MATH (x86_qimode_math & CPUMASK)\n-#define TARGET_HIMODE_MATH (x86_himode_math & CPUMASK)\n-#define TARGET_PROMOTE_QI_REGS (x86_promote_qi_regs & CPUMASK)\n-#define TARGET_PROMOTE_HI_REGS (x86_promote_hi_regs & CPUMASK)\n-#define TARGET_ADD_ESP_4 (x86_add_esp_4 & CPUMASK)\n-#define TARGET_ADD_ESP_8 (x86_add_esp_8 & CPUMASK)\n-#define TARGET_SUB_ESP_4 (x86_sub_esp_4 & CPUMASK)\n-#define TARGET_SUB_ESP_8 (x86_sub_esp_8 & CPUMASK)\n-#define TARGET_INTEGER_DFMODE_MOVES (x86_integer_DFmode_moves & CPUMASK)\n-#define TARGET_PARTIAL_REG_DEPENDENCY (x86_partial_reg_dependency & CPUMASK)\n+#define TARGET_DEEP_BRANCH_PREDICTION (x86_deep_branch & TUNEMASK)\n+#define TARGET_BRANCH_PREDICTION_HINTS (x86_branch_hints & TUNEMASK)\n+#define TARGET_DOUBLE_WITH_ADD (x86_double_with_add & TUNEMASK)\n+#define TARGET_USE_SAHF ((x86_use_sahf & TUNEMASK) && !TARGET_64BIT)\n+#define TARGET_MOVX (x86_movx & TUNEMASK)\n+#define TARGET_PARTIAL_REG_STALL (x86_partial_reg_stall & TUNEMASK)\n+#define TARGET_USE_LOOP (x86_use_loop & TUNEMASK)\n+#define TARGET_USE_FIOP (x86_use_fiop & TUNEMASK)\n+#define TARGET_USE_MOV0 (x86_use_mov0 & TUNEMASK)\n+#define TARGET_USE_CLTD (x86_use_cltd & TUNEMASK)\n+#define TARGET_SPLIT_LONG_MOVES (x86_split_long_moves & TUNEMASK)\n+#define TARGET_READ_MODIFY_WRITE (x86_read_modify_write & TUNEMASK)\n+#define TARGET_READ_MODIFY (x86_read_modify & TUNEMASK)\n+#define TARGET_PROMOTE_QImode (x86_promote_QImode & TUNEMASK)\n+#define TARGET_FAST_PREFIX (x86_fast_prefix & TUNEMASK)\n+#define TARGET_SINGLE_STRINGOP (x86_single_stringop & TUNEMASK)\n+#define TARGET_QIMODE_MATH (x86_qimode_math & TUNEMASK)\n+#define TARGET_HIMODE_MATH (x86_himode_math & TUNEMASK)\n+#define TARGET_PROMOTE_QI_REGS (x86_promote_qi_regs & TUNEMASK)\n+#define TARGET_PROMOTE_HI_REGS (x86_promote_hi_regs & TUNEMASK)\n+#define TARGET_ADD_ESP_4 (x86_add_esp_4 & TUNEMASK)\n+#define TARGET_ADD_ESP_8 (x86_add_esp_8 & TUNEMASK)\n+#define TARGET_SUB_ESP_4 (x86_sub_esp_4 & TUNEMASK)\n+#define TARGET_SUB_ESP_8 (x86_sub_esp_8 & TUNEMASK)\n+#define TARGET_INTEGER_DFMODE_MOVES (x86_integer_DFmode_moves & TUNEMASK)\n+#define TARGET_PARTIAL_REG_DEPENDENCY (x86_partial_reg_dependency & TUNEMASK)\n #define TARGET_SSE_PARTIAL_REG_DEPENDENCY \\\n-\t\t\t\t      (x86_sse_partial_reg_dependency & CPUMASK)\n-#define TARGET_SSE_PARTIAL_REGS (x86_sse_partial_regs & CPUMASK)\n+\t\t\t\t      (x86_sse_partial_reg_dependency & TUNEMASK)\n+#define TARGET_SSE_PARTIAL_REGS (x86_sse_partial_regs & TUNEMASK)\n #define TARGET_SSE_PARTIAL_REGS_FOR_CVTSD2SS \\\n-\t\t\t\t(x86_sse_partial_regs_for_cvtsd2ss & CPUMASK)\n-#define TARGET_SSE_TYPELESS_STORES (x86_sse_typeless_stores & CPUMASK)\n-#define TARGET_SSE_TYPELESS_LOAD0 (x86_sse_typeless_load0 & CPUMASK)\n-#define TARGET_SSE_LOAD0_BY_PXOR (x86_sse_load0_by_pxor & CPUMASK)\n-#define TARGET_MEMORY_MISMATCH_STALL (x86_memory_mismatch_stall & CPUMASK)\n-#define TARGET_PROLOGUE_USING_MOVE (x86_prologue_using_move & CPUMASK)\n-#define TARGET_EPILOGUE_USING_MOVE (x86_epilogue_using_move & CPUMASK)\n-#define TARGET_DECOMPOSE_LEA (x86_decompose_lea & CPUMASK)\n+\t\t\t\t(x86_sse_partial_regs_for_cvtsd2ss & TUNEMASK)\n+#define TARGET_SSE_TYPELESS_STORES (x86_sse_typeless_stores & TUNEMASK)\n+#define TARGET_SSE_TYPELESS_LOAD0 (x86_sse_typeless_load0 & TUNEMASK)\n+#define TARGET_SSE_LOAD0_BY_PXOR (x86_sse_load0_by_pxor & TUNEMASK)\n+#define TARGET_MEMORY_MISMATCH_STALL (x86_memory_mismatch_stall & TUNEMASK)\n+#define TARGET_PROLOGUE_USING_MOVE (x86_prologue_using_move & TUNEMASK)\n+#define TARGET_EPILOGUE_USING_MOVE (x86_epilogue_using_move & TUNEMASK)\n+#define TARGET_DECOMPOSE_LEA (x86_decompose_lea & TUNEMASK)\n #define TARGET_PREFETCH_SSE (x86_prefetch_sse)\n-#define TARGET_SHIFT1 (x86_shift1 & CPUMASK)\n-#define TARGET_USE_FFREEP (x86_use_ffreep & CPUMASK)\n-#define TARGET_REP_MOVL_OPTIMAL (x86_rep_movl_optimal & CPUMASK)\n-#define TARGET_INTER_UNIT_MOVES (x86_inter_unit_moves & CPUMASK)\n+#define TARGET_SHIFT1 (x86_shift1 & TUNEMASK)\n+#define TARGET_USE_FFREEP (x86_use_ffreep & TUNEMASK)\n+#define TARGET_REP_MOVL_OPTIMAL (x86_rep_movl_optimal & TUNEMASK)\n+#define TARGET_INTER_UNIT_MOVES (x86_inter_unit_moves & TUNEMASK)\n \n #define TARGET_STACK_PROBE (target_flags & MASK_STACK_PROBE)\n \n@@ -432,7 +432,7 @@ extern int x86_prefetch_sse;\n    option if the fixed part matches.  The actual option name is made\n    by appending `-m' to the specified name.  */\n #define TARGET_OPTIONS\t\t\t\t\t\t\\\n-{ { \"tune=\",\t\t&ix86_cpu_string,\t\t\t\\\n+{ { \"tune=\",\t\t&ix86_tune_string,\t\t\t\\\n     N_(\"Schedule code for given CPU\")},\t\t\t\t\\\n   { \"fpmath=\",\t\t&ix86_fpmath_string,\t\t\t\\\n     N_(\"Generate floating point mathematics using given instruction set\")},\\\n@@ -510,9 +510,9 @@ extern int x86_prefetch_sse;\n   do\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n       size_t arch_len = strlen (ix86_arch_string);\t\t\\\n-      size_t cpu_len = strlen (ix86_cpu_string);\t\t\\\n+      size_t tune_len = strlen (ix86_tune_string);\t\t\\\n       int last_arch_char = ix86_arch_string[arch_len - 1];\t\\\n-      int last_cpu_char = ix86_cpu_string[cpu_len - 1];\t\t\\\n+      int last_tune_char = ix86_tune_string[tune_len - 1];\t\t\\\n \t\t\t\t\t\t\t\t\\\n       if (TARGET_64BIT)\t\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\\\n@@ -529,7 +529,7 @@ extern int x86_prefetch_sse;\n \t}\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\\\n       /* Built-ins based on -mtune= (or -march= if no\t\t\\\n-\t CPU given).  */\t\t\t\t\t\\\n+\t -mtune= given).  */\t\t\t\t\t\\\n       if (TARGET_386)\t\t\t\t\t\t\\\n \tbuiltin_define (\"__tune_i386__\");\t\t\t\\\n       else if (TARGET_486)\t\t\t\t\t\\\n@@ -538,14 +538,14 @@ extern int x86_prefetch_sse;\n \t{\t\t\t\t\t\t\t\\\n \t  builtin_define (\"__tune_i586__\");\t\t\t\\\n \t  builtin_define (\"__tune_pentium__\");\t\t\t\\\n-\t  if (last_cpu_char == 'x')\t\t\t\t\\\n+\t  if (last_tune_char == 'x')\t\t\t\t\\\n \t    builtin_define (\"__tune_pentium_mmx__\");\t\t\\\n \t}\t\t\t\t\t\t\t\\\n       else if (TARGET_PENTIUMPRO)\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\\\n \t  builtin_define (\"__tune_i686__\");\t\t\t\\\n \t  builtin_define (\"__tune_pentiumpro__\");\t\t\\\n-\t  switch (last_cpu_char)\t\t\t\t\\\n+\t  switch (last_tune_char)\t\t\t\t\\\n \t    {\t\t\t\t\t\t\t\\\n \t    case '3':\t\t\t\t\t\t\\\n \t      builtin_define (\"__tune_pentium3__\");\t\t\\\n@@ -558,16 +558,16 @@ extern int x86_prefetch_sse;\n       else if (TARGET_K6)\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\\\n \t  builtin_define (\"__tune_k6__\");\t\t\t\\\n-\t  if (last_cpu_char == '2')\t\t\t\t\\\n+\t  if (last_tune_char == '2')\t\t\t\t\\\n \t    builtin_define (\"__tune_k6_2__\");\t\t\t\\\n-\t  else if (last_cpu_char == '3')\t\t\t\\\n+\t  else if (last_tune_char == '3')\t\t\t\\\n \t    builtin_define (\"__tune_k6_3__\");\t\t\t\\\n \t}\t\t\t\t\t\t\t\\\n       else if (TARGET_ATHLON)\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\\\n \t  builtin_define (\"__tune_athlon__\");\t\t\t\\\n \t  /* Only plain \"athlon\" lacks SSE.  */\t\t\t\\\n-\t  if (last_cpu_char != 'n')\t\t\t\t\\\n+\t  if (last_tune_char != 'n')\t\t\t\t\\\n \t    builtin_define (\"__tune_athlon_sse__\");\t\t\\\n \t}\t\t\t\t\t\t\t\\\n       else if (TARGET_K8)\t\t\t\t\t\\\n@@ -3074,8 +3074,8 @@ enum processor_type\n   PROCESSOR_max\n };\n \n-extern enum processor_type ix86_cpu;\n-extern const char *ix86_cpu_string;\n+extern enum processor_type ix86_tune;\n+extern const char *ix86_tune_string;\n \n extern enum processor_type ix86_arch;\n extern const char *ix86_arch_string;"}, {"sha": "9c1d270fc34705585a475a8e2b576fd014642219", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e5555268a81458fcaa0409fc08471c31235a393/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e5555268a81458fcaa0409fc08471c31235a393/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=9e5555268a81458fcaa0409fc08471c31235a393", "patch": "@@ -136,7 +136,7 @@\n ;; Processor type.  This attribute must exactly match the processor_type\n ;; enumeration in i386.h.\n (define_attr \"cpu\" \"i386,i486,pentium,pentiumpro,k6,athlon,pentium4,k8\"\n-  (const (symbol_ref \"ix86_cpu\")))\n+  (const (symbol_ref \"ix86_tune\")))\n \n ;; A basic instruction type.  Refinements due to arguments to be\n ;; provided in other attributes."}]}