{"sha": "6d53e6f9c7ab06510953b9881550b54a24137d4d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQ1M2U2ZjljN2FiMDY1MTA5NTNiOTg4MTU1MGI1NGEyNDEzN2Q0ZA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-07-06T00:16:44Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-07-06T00:16:44Z"}, "message": "Daily bump.", "tree": {"sha": "9dfd880c0a34ee509439bbd590dc7863b30b99fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9dfd880c0a34ee509439bbd590dc7863b30b99fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d53e6f9c7ab06510953b9881550b54a24137d4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d53e6f9c7ab06510953b9881550b54a24137d4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d53e6f9c7ab06510953b9881550b54a24137d4d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d53e6f9c7ab06510953b9881550b54a24137d4d/comments", "author": null, "committer": null, "parents": [{"sha": "1562c7987be115311a75b1074c3768a1b006adb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1562c7987be115311a75b1074c3768a1b006adb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1562c7987be115311a75b1074c3768a1b006adb6"}], "stats": {"total": 487, "additions": 486, "deletions": 1}, "files": [{"sha": "b1a108be82a03b88378afa3e873f5b8157e0ecdf", "filename": "ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d53e6f9c7ab06510953b9881550b54a24137d4d/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d53e6f9c7ab06510953b9881550b54a24137d4d/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=6d53e6f9c7ab06510953b9881550b54a24137d4d", "patch": "@@ -1,3 +1,11 @@\n+2021-07-05  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* Makefile.def: Add dsymutil defs.\n+\t* Makefile.in: Regenerated.\n+\t* Makefile.tpl: Add dsymutil to flags.\n+\t* configure: Regenerated.\n+\t* configure.ac: Add dsymutil to target and build recipes.\n+\n 2021-07-01  Ankur Saini  <arsenic@sourceware.org>\n \n \t* MAINTAINERS: Add myself for write after approval."}, {"sha": "4e6b8744ae518cb88bf793f1438f6f2a72e1810a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d53e6f9c7ab06510953b9881550b54a24137d4d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d53e6f9c7ab06510953b9881550b54a24137d4d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6d53e6f9c7ab06510953b9881550b54a24137d4d", "patch": "@@ -1,3 +1,93 @@\n+2021-07-05  Jeff Law  <jeffreyalaw@gmail.com>\n+\n+\t* config/h8300/shiftrotate.md (shift-by-variable patterns): Update to\n+\tgenerate condition code aware RTL directly.\n+\n+2021-07-05  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR tree-optimization/101039\n+\t* match.pd (A CMP 0 ? A : -A): New patterns.\n+\t* tree-ssa-phiopt.c (abs_replacement): Delete function.\n+\t(tree_ssa_phiopt_worker): Don't call abs_replacement.\n+\tUpdate comment about abs_replacement.\n+\n+2021-07-05  Andrew Pinski  <apinski@marvell.com>\n+\n+\t* tree-ssa-phiopt.c (gimple_simplify_phiopt):\n+\tIf \"A ? B : C\" fails to simplify, try \"(!A) ? C : B\".\n+\n+2021-07-05  Andrew Pinski  <apinski@marvell.com>\n+\n+\t* tree-ssa-phiopt.c (match_simplify_replacement):\n+\tAdd early_p argument. Call gimple_simplify_phiopt\n+\tinstead of gimple_simplify.\n+\t(tree_ssa_phiopt_worker): Update call to\n+\tmatch_simplify_replacement and allow unconditionally.\n+\t(phiopt_early_allow): New function.\n+\t(gimple_simplify_phiopt): New function.\n+\n+2021-07-05  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR middle-end/101237\n+\t* fold-const.c (negate_expr_p): Remove call to element_mode\n+\tand TREE_MODE/TREE_TYPE when calling HONOR_SIGNED_ZEROS,\n+\tHONOR_SIGN_DEPENDENT_ROUNDING, and HONOR_SNANS.\n+\t(fold_negate_expr_1): Likewise.\n+\t(const_unop): Likewise.\n+\t(fold_cond_expr_with_comparison): Likewise.\n+\t(fold_binary_loc): Likewise.\n+\t(fold_ternary_loc): Likewise.\n+\t(tree_call_nonnegative_warnv_p): Likewise.\n+\t* match.pd (-(A + B) -> (-B) - A): Likewise.\n+\n+2021-07-05  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* configure.ac: Handle --with-dsymutil in the same way as we\n+\tdo for the assembler and linker.  (DEFAULT_DSYMUTIL): New.\n+\tExtract the type and version for the dsymutil configured or\n+\tfound by the default searches.\n+\t* config.in: Regenerated.\n+\t* configure: Regenerated.\n+\t* collect2.c (do_dsymutil): Handle locating dsymutil in the\n+\tsame way as for the assembler and  linker.\n+\t* config/darwin.h (DSYMUTIL): Delete.\n+\t* gcc.c: Report a configured dsymutil correctly.\n+\t* exec-tool.in: Allow for dsymutil.\n+\n+2021-07-05  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386-expand.c (ix86_split_mmx_punpck):\n+\tHandle V4QI and V2HI modes.\n+\t(expand_vec_perm_blend): Allow 4-byte vector modes with TARGET_SSE4_1.\n+\tHandle V4QI mode. Emit mmx_pblendvb32 for 4-byte modes.\n+\t(expand_vec_perm_pshufb): Rewrite to use switch statemets.\n+\tHandle 4-byte dual operands with TARGET_XOP and single operands\n+\twith TARGET_SSSE3.  Emit mmx_ppermv32 for TARGET_XOP and\n+\tmmx_pshufbv4qi3 for TARGET_SSSE3.\n+\t(expand_vec_perm_pblendv): Allow 4-byte vector modes with TARGET_SSE4_1.\n+\t(expand_vec_perm_interleave2): Allow 4-byte vector modes.\n+\t(expand_vec_perm_pshufb2): Allow 4-byte vector modes with TARGET_SSSE3.\n+\t(expand_vec_perm_even_odd_1): Handle V4QI mode.\n+\t(expand_vec_perm_broadcast_1): Handle V4QI mode.\n+\t(ix86_vectorize_vec_perm_const): Handle V4QI mode.\n+\t* config/i386/mmx.md (mmx_ppermv32): New insn pattern.\n+\t(mmx_pshufbv4qi3): Ditto.\n+\t(*mmx_pblendw32): Ditto.\n+\t(*mmx_pblendw64): Rename from *mmx_pblendw.\n+\t(mmx_punpckhbw_low): New insn_and_split pattern.\n+\t(mmx_punpcklbw_low): Ditto.\n+\n+2021-07-05  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-loop-manip.c (vect_loop_versioning): Do not\n+\tset LOOP_C_INFINITE on the vectorized loop.\n+\n+2021-07-05  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/101291\n+\t* cfgloopmanip.c (loop_version): Set the loop copy of the\n+\tversioned loop to the new loop.\n+\n 2021-07-04  Iain Sandoe  <iain@sandoe.co.uk>\n \n \tPR target/100269"}, {"sha": "740061aaec49e086bccd1df6112c55d337475b28", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d53e6f9c7ab06510953b9881550b54a24137d4d/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d53e6f9c7ab06510953b9881550b54a24137d4d/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=6d53e6f9c7ab06510953b9881550b54a24137d4d", "patch": "@@ -1 +1 @@\n-20210705\n+20210706"}, {"sha": "d1116c907dca8fa1a7b953c27d96e1a893e0dd69", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 365, "deletions": 0, "changes": 365, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d53e6f9c7ab06510953b9881550b54a24137d4d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d53e6f9c7ab06510953b9881550b54a24137d4d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=6d53e6f9c7ab06510953b9881550b54a24137d4d", "patch": "@@ -1,3 +1,368 @@\n+2021-07-05  Pierre-Marie de Rodat  <derodat@adacore.com>\n+\n+\t* gnat-style.texi, gnat_rm.texi, gnat_ugn.texi: Regenerate.\n+\n+2021-07-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Depends_In_Decl_Part): Reject overlays\n+\tin Depends and Refined_Depends contracts.\n+\t(Analyze_Global_In_Decl_Part): Likewise for Global and\n+\tRefined_Global.\n+\t(Analyze_Initializes_In_Decl_Part): Likewise for Initializes\n+\t(when appearing both as a single item and as a initialization\n+\tclause).\n+\t* sem_util.ads (Ultimate_Overlaid_Entity): New routine.\n+\t* sem_util.adb (Report_Unused_Body_States): Ignore overlays.\n+\t(Ultimate_Overlaid_Entity): New routine.\n+\n+2021-07-05  Claire Dross  <dross@adacore.com>\n+\n+\t* libgnat/a-cfdlli.ads, libgnat/a-cfdlli.adb\n+\tlibgnat/a-cfinve.ads, libgnat/a-cfinve.adb,\n+\tlibgnat/a-cofove.ads, libgnat/a-cofove.adb,\n+\tlibgnat/a-coboho.ads, libgnat/a-coboho.adb (Constant_Reference):\n+\tGet a read-only access to an element of the container.\n+\t(At_End): Ghost functions used to express pledges in the\n+\tpostcondition of Reference.\n+\t(Reference): Get a read-write access to an element of the\n+\tcontainer.\n+\t* libgnat/a-cfhama.ads, libgnat/a-cfhama.adb,\n+\tlibgnat/a-cforma.ads, libgnat/a-cforma.adb: The full view of the\n+\tMap type is no longer a tagged type, but a wrapper over this\n+\ttagged type. This is to avoid issues with dispatching result in\n+\tAt_End functions.\n+\t(Constant_Reference): Get a read-only access to an element of\n+\tthe container.\n+\t(At_End): Ghost functions used to express pledges in the\n+\tpostcondition of Reference.\n+\t(Reference): Get a read-write access to an element of the\n+\tcontainer.\n+\t* libgnat/a-cfhase.ads, libgnat/a-cfhase.adb,\n+\tlibgnat/a-cforse.ads, libgnat/a-cforse.adb: The full view of the\n+\tMap type is no longer a tagged type, but a wrapper over this\n+\ttagged type.\n+\t(Constant_Reference): Get a read-only access to an element of\n+\tthe container.\n+\t* libgnat/a-cofuse.ads, libgnat/a-cofuve.ads (Copy_Element):\n+\tExpression function used to cause SPARK to make sure\n+\tElement_Type is copiable.\n+\t* libgnat/a-cofuma.ads (Copy_Key): Expression function used to\n+\tcause SPARK to make sure Key_Type is copiable.\n+\t(Copy_Element): Expression function used to cause SPARK to make\n+\tsure Element_Type is copiable.\n+\n+2021-07-05  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Global_Item): Adapt to update SPARK RM\n+\trule.\n+\n+2021-07-05  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* Make-generated.in: Add -f switch to ensure cp will never fail.\n+\n+2021-07-05  Steve Baird  <baird@adacore.com>\n+\n+\t* exp_ch3.adb (Build_Record_Init_Proc.Build_Assignment): When\n+\tbuilding the assignment statement corresponding to the default\n+\texpression for a component, we make a copy of the expression.\n+\tWhen making that copy (and if we have seen a component that\n+\trequires late initialization), pass a Map parameter into the\n+\tcall to New_Copy_Tree to redirect references to the type to\n+\tinstead refer to the _Init formal parameter of the init proc.\n+\tThis includes hoisting the declaration of Has_Late_Init_Comp out\n+\tone level so that it becomes available to Build_Assignment.\n+\t(Find_Current_Instance): Return True for other kinds of current\n+\tinstance references, instead of just access-valued attribute\n+\treferences such as T'Access.\n+\t* sem_util.adb (Is_Aliased_View): Return True for the _Init\n+\tformal parameter of an init procedure. The changes in\n+\texp_ch3.adb can have the effect of replacing a \"T'Access\"\n+\tattribute reference in an init procedure with an \"_Init'Access\"\n+\tattribute reference. We want such an attribute reference to be\n+\tlegal. However, we do not simply mark the formal parameter as\n+\tbeing aliased because that might impact callers.\n+\t(Is_Object_Image): Return True if Is_Current_Instance returns\n+\tTrue for the prefix of an Image (or related attribute) attribute\n+\treference.\n+\n+2021-07-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch3.adb (Stream_Operation_OK): Reuse\n+\tIs_Concurrent_Interface.\n+\t* sem_ch3.adb (Analyze_Interface_Declaration,\n+\tBuild_Derived_Record_Type): Likewise.\n+\t* sem_ch6.adb (Check_Limited_Return): Likewise.\n+\t* sem_util.adb (Is_Concurrent_Interface): Don't call\n+\tIs_Interface because each of the Is_Protected_Interface,\n+\tIs_Synchronized_Interface and Is_Task_Interface calls it anyway.\n+\n+2021-07-05  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* sem_ch6.adb (Check_Limited_Return): Replace Comes_From_Source\n+\twith Comes_From_Extended_Return_Statement.\n+\n+2021-07-05  Steve Baird  <baird@adacore.com>\n+\n+\t* libgnat/a-stobbu.adb, libgnat/a-stobbu.ads,\n+\tlibgnat/a-stobfi.adb, libgnat/a-stobfi.ads,\n+\tlibgnat/a-stoubu.adb, libgnat/a-stoubu.ads,\n+\tlibgnat/a-stoufi.adb, libgnat/a-stoufi.ads,\n+\tlibgnat/a-stoufo.adb, libgnat/a-stoufo.ads,\n+\tlibgnat/a-stouut.adb, libgnat/a-stouut.ads,\n+\tlibgnat/a-stteou.ads: Delete files.\n+\t* Makefile.rtl, impunit.adb: Remove references to deleted files.\n+\n+2021-07-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_util.adb (Has_Compatible_Alignment_Internal): If the\n+\tprefix of the Address expression is an entire object with a\n+\tknown alignment, then skip checks related to its size.\n+\n+2021-07-05  Doug Rupp  <rupp@adacore.com>\n+\n+\t* libgnat/s-os_lib.ads: Import OS_Time comparison ops as\n+\tintrinsic.\n+\t* libgnat/s-os_lib.adb: Remove OS_TIme comparison ops\n+\timplementation.\n+\n+2021-07-05  Doug Rupp  <rupp@adacore.com>\n+\n+\t* libgnat/s-os_lib.ads: Add some comments about time_t.\n+\t* libgnat/s-os_lib.adb (GM_Split/To_GM_Time): Rename formal to\n+\tP_OS_Time.\n+\t(GM_Time_Of/To_OS_Time): Likewise.\n+\n+2021-07-05  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* sem_res.adb (Resolve): Insert minus sign if needed.\n+\n+2021-07-05  Steve Baird  <baird@adacore.com>\n+\n+\t* exp_put_image.adb:\n+\t(Enable_Put_Image, Preload_Root_Buffer_Type): Revert to querying\n+\tthe -gnatd_z switch, as opposed to testing whether Ada_Version >= Ada_2022.\n+\n+2021-07-05  Justin Squirek  <squirek@adacore.com>\n+\n+\t* checks.adb (Accessibility_Checks_Suppressed): Add check\n+\tagainst restriction No_Dynamic_Accessibility_Checks.\n+\t(Apply_Accessibility_Check): Add assertion to check restriction\n+\tNo_Dynamic_Accessibility_Checks is not active.\n+\t* debug.adb: Add documentation for new debugging switch to\n+\tcontrol which accessibility model gets employed under\n+\trestriction No_Dynamic_Accessibility_Checks.\n+\t* exp_attr.adb (Expand_N_Attribute_Reference): Disable dynamic\n+\taccessibility check generation when\n+\tNo_Dynamic_Accessibility_Checks is active.\n+\t* exp_ch4.adb (Apply_Accessibility_Check): Skip check generation\n+\twhen restriction No_Dynamic_Accessibility_Checks is active.\n+\t(Expand_N_Allocator): Disable dynamic accessibility checks when\n+\tNo_Dynamic_Accessibility_Checks is active.\n+\t(Expand_N_In): Disable dynamic accessibility checks when\n+\tNo_Dynamic_Accessibility_Checks is active.\n+\t(Expand_N_Type_Conversion): Disable dynamic accessibility checks\n+\twhen No_Dynamic_Accessibility_Checks is active.\n+\t* exp_ch5.adb (Expand_N_Assignment_Statement): Disable\n+\talternative accessibility model calculations when computing a\n+\tdynamic level for a SAOAAT.\n+\t* exp_ch6.adb (Add_Call_By_Copy_Code): Disable dynamic\n+\taccessibility check generation when\n+\tNo_Dynamic_Accessibility_Checks is active.\n+\t(Expand_Branch): Disable alternative accessibility model\n+\tcalculations.\n+\t(Expand_Call_Helper): Disable alternative accessibility model\n+\tcalculations.\n+\t* restrict.adb, restrict.ads: Add new restriction\n+\tNo_Dynamic_Accessibility_Checks.\n+\t(No_Dynamic_Accessibility_Checks_Enabled): Created to test when\n+\texperimental features (which are generally incompatible with\n+\tstandard Ada) can be enabled.\n+\t* sem_attr.adb (Safe_Value_Conversions): Add handling of new\n+\taccessibility model under the restriction\n+\tNo_Dynamic_Accessibility_Checks.\n+\t* sem_prag.adb (Process_Restrictions_Or_Restriction_Warnings):\n+\tDisallow new restriction No_Dynamic_Accessibility_Checks from\n+\tbeing exclusively specified within a body or subunit without\n+\tbeing present in a specification.\n+\t* sem_res.adb (Check_Fully_Declared_Prefix): Minor comment\n+\tfixup.\n+\t(Valid_Conversion): Omit implicit conversion checks on anonymous\n+\taccess types and perform static checking instead when\n+\tNo_Dynamic_Accessibility_Checks is active.\n+\t* sem_util.adb, sem_util.ads (Accessibility_Level): Add special\n+\thandling of anonymous access objects, formal parameters,\n+\tanonymous access components, and function return objects.\n+\t(Deepest_Type_Access_Level): When\n+\tNo_Dynamic_Accessibility_Checks is active employ an alternative\n+\tmodel. Add paramter Allow_Alt_Model to override the new behavior\n+\tin certain cases.\n+\t(Type_Access_Level): When No_Dynamic_Accessibility_Checks is\n+\tactive employ an alternative model. Add parameter\n+\tAllow_Alt_Model to override the new behavior in certain cases.\n+\t(Typ_Access_Level): Created within Accessibility_Level for\n+\tconvenience.\n+\t* libgnat/s-rident.ads, snames.ads-tmpl: Add handing for\n+\tNo_Dynamic_Accessibility_Checks.\n+\n+2021-07-05  Doug Rupp  <rupp@adacore.com>\n+\n+\t* adaint.h (__gnat_set_file_time_name): Use OS_Time.\n+\t* adaint.c (__gnat_set_file_time_name): Likewise.\n+\n+2021-07-05  Doug Rupp  <rupp@adacore.com>\n+\n+\t* adaint.h (OS_Time): typedef as long long.\n+\t* osint.adb (Underlying_OS_Time): Declare as 64-bit signed type.\n+\t* libgnat/s-os_lib.adb (\"<\"): Compare OS_Time as\n+\tLong_Long_Integer.\n+\t(\"<=\"): Likewise.\n+\t(\">\"): Likewise.\n+\t(\">=\"): Likewise.\n+\t* libgnat/s-os_lib.ads (OS_Time): Declare as 64-bit signed type.\n+\n+2021-07-05  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* sem_ch3.adb (Check_Abstract_Overriding): Post error message on\n+\trenaming node.\n+\n+2021-07-05  Yannick Moy  <moy@adacore.com>\n+\n+\t* libgnat/a-uncdea.ads: Add Depends/Post to\n+\tAda.Unchecked_Deallocation.\n+\t* sem_ch4.adb (Analyze_Allocator): Remove checking of allocator\n+\tplacement.\n+\t* sem_res.adb (Flag_Object): Same.\n+\n+2021-07-05  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* aspects.ads: Add GNAT_Annotate aspect.\n+\t* gnat1drv.adb (Adjust_Global_Switches): Stop defining\n+\tName_Gnat_Annotate as an alias of Name_Annotate.\n+\t* snames.ads-tmpl: Define Gnat_Annotate.\n+\t* par-prag.adb, sem_prag.ads: Add Pragma_Gnat_Annotate to list\n+\tof pragmas.\n+\t* lib-writ.adb, sem_ch13.adb, sem_prag.adb: Handle Gnat_Annotate\n+\tlike Aspect_Annotate.\n+\n+2021-07-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* ttypes.ads (Target_Strict_Alignment): Fix comment.\n+\n+2021-07-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_util.adb (Has_Compatible_Alignment_Internal): Fix\n+\tindentation of ELSIF comments; remove explicit calls to\n+\tUI_To_Int; remove extra parens around the MOD operand.\n+\n+2021-07-05  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_aggr.adb (Resolve_Record_Aggregate, Step_5): Do not check\n+\tfor the need to use an extension aggregate for a given component\n+\twhen within an instance and the type of the component hss a\n+\tprivate ancestor: the instantiation is legal if the generic\n+\tcompiles, and spurious errors may be generated otherwise.\n+\n+2021-07-05  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* errout.adb (Output_JSON_Message): Recursively call\n+\tOutput_JSON_Message for continuation messages instead of\n+\tappending their content to the initial message.\n+\n+2021-07-05  Steve Baird  <baird@adacore.com>\n+\n+\t* debug.adb: Remove comments about -gnatd_z switch.\n+\t* exp_ch3.adb (Make_Predefined_Primitive_Specs): A one-line fix\n+\tfor a subtle bug that took some effort to debug. Append a new\n+\tPut_Image procedure for a type extension even if it seems to\n+\talready have one, just as is done for (for example) the\n+\tstreaming-related Read procedure.\n+\t* exp_put_image.adb:\n+\t(Build_Record_Put_Image_Procedure.Make_Component_Attributes): Do\n+\tnot treat _Parent component like just another component, for two\n+\treasons.  1. If the _parent component's type has a\n+\tuser-specified Put_Image procedure, then we want to generate a\n+\tcall to that procedure and then generate extension aggregate\n+\tsyntax.  2. Otherwise, we still don't want to see any mention of\n+\t\"_parent\" in the generated image text.\n+\t(Build_Record_Put_Image_Procedure.Make_Component_Name): Add\n+\tassertion that we are not generating a reference to an \"_parent\"\n+\tcomponent.\n+\t(Build_Record_Put_Image_Procedure): Add special treatment for\n+\tnull records.  Add call to Duplicate_Subexpr for image attribute\n+\tprefix in order to help with expansion needed in the class-wide\n+\tcase (where the prefix is also referenced in the call to\n+\tWide_Wide_Expanded_Name) if evaluation of the prefix has side\n+\teffects. Add new local helper function, Put_String_Exp.  Add\n+\tsupport for case where prefix type is class-wide.\n+\t(Enable_Put_Image, Preload_Root_Buffer_Type): Query Ada_Version\n+\t> Ada_2022 instead of (indirectly) querying -gnatd_z switch.\n+\t* freeze.adb (In_Expanded_Body): A one-line change to add\n+\tTSS_Put_Image to the list of subprograms that have\n+\texpander-created bodies.\n+\t* rtsfind.ads: Add support for accessing\n+\tAda.Tags.Wide_Wide_Expanded_Name.\n+\t* sem_ch3.ads, sem_ch3.adb: Delete Is_Null_Extension function,\n+\tas part of moving it to Sem_Util.\n+\t* sem_ch13.adb\n+\t(Analyze_Put_Image_TSS_Definition.Has_Good_Profile): Improve\n+\tdiagnostic messages in cases where the result is going to be\n+\tFalse and the Report parameter is True. Relax overly-restrictive\n+\tchecks in order to implement mode conformance.\n+\t(Analyze_Stream_TSS_Definition.Has_Good_Profile): Add similar\n+\trelaxation of parameter subtype checking for the Stream\n+\tparameter of user-defined streaming subprograms.\n+\t* sem_disp.adb (Check_Dispatching_Operation): A one-line\n+\tchange (and an accompanying comment change) to add TSS_Put_Image\n+\tto the list of compiler-generated dispatching primitive\n+\toperations.\n+\t* sem_util.ads, sem_util.adb: Add Ignore_Privacy Boolean\n+\tparameter to Is_Null_Record_Type function (typically the\n+\tparameter will be False when the function is being used in the\n+\timplementation of static semantics and True for dynamic\n+\tsemantics; the parameter might make a difference in the case of,\n+\tfor example, a private type that is implemented as a null record\n+\ttype).  Add related new routines Is_Null_Extension (formerly\n+\tdeclared in Sem_Ch3), Is_Null_Extension_Of, and\n+\tIs_Null_Record_Definition.\n+\n+2021-07-05  Justin Squirek  <squirek@adacore.com>\n+\n+\t* freeze.adb (Freeze_Profile): Use N's Sloc, F_type's chars.\n+\n+2021-07-05  Bob Duff  <duff@adacore.com>\n+\n+\t* checks.adb, exp_aggr.adb, exp_ch5.adb, freeze.adb,\n+\tsem_util.adb, sem_util.ads: Change L and H to be First and Last,\n+\tto match the attributes in the RM. Change calls from procedure\n+\tto function where appropriate.\n+\n+2021-07-05  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_util.ads, sem_util.adb (Compute_Returns_By_Ref): New\n+\tprocedure to compute Returns_By_Ref, to avoid some code\n+\tduplication. This will likely change soon, so it's good to have\n+\tthe code in one place.\n+\t(CW_Or_Has_Controlled_Part): Move here from Exp_Ch7, because\n+\tit's called by Compute_Returns_By_Ref, and this is a better\n+\tplace for it anyway.\n+\t(Needs_Finalization): Fix comment to be vague instead of wrong.\n+\t* exp_ch6.adb (Expand_N_Subprogram_Body, Freeze_Subprogram):\n+\tCall Compute_Returns_By_Ref.\n+\t* sem_ch6.adb (Check_Delayed_Subprogram): Call\n+\tCompute_Returns_By_Ref.\n+\t* exp_ch7.ads, exp_ch7.adb (CW_Or_Has_Controlled_Part): Move to\n+\tSem_Util.\n+\t(Has_New_Controlled_Component): Remove unused function.\n+\n+2021-07-05  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* sem_ch3.adb (Check_Abstract_Overriding): Check for renamings.\n+\n+2021-07-05  Boris Yakobowski  <yakobowski@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_Op_Rem): Remove special case for rem -1\n+\tin CodePeer_Mode.\n+\n 2021-07-01  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR ada/101094"}, {"sha": "87cd3ed7ad68d945a6fd9d23c71841fbe7ee5a50", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d53e6f9c7ab06510953b9881550b54a24137d4d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d53e6f9c7ab06510953b9881550b54a24137d4d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6d53e6f9c7ab06510953b9881550b54a24137d4d", "patch": "@@ -1,3 +1,25 @@\n+2021-07-05  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR tree-optimization/101039\n+\t* gcc.dg/tree-ssa/phi-opt-15.c: Update test to expect\n+\tABSU and still not expect ABS_EXPR.\n+\t* gcc.dg/tree-ssa/phi-opt-23.c: New test.\n+\t* gcc.dg/tree-ssa/phi-opt-24.c: New test.\n+\n+2021-07-05  Christophe Lyon  <christophe.lyon@foss.st.com>\n+\n+\tPR debug/101321\n+\t* gcc.dg/debug/btf/btf-bitfields-3.c: Add -fno-short-enums.\n+\n+2021-07-05  Richard Biener  <rguenther@suse.de>\n+\n+\tPR testsuite/101299\n+\t* gcc.dg/vect/bb-slp-74.c: Add vect_double requires.\n+\n+2021-07-05  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/pr92658-avx512vl.c: Refine testcase.\n+\n 2021-07-03  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* gcc.dg/debug/btf/btf.exp: Skip on AIX."}]}