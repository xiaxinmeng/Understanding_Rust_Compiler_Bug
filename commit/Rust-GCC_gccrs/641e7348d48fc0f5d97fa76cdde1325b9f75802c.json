{"sha": "641e7348d48fc0f5d97fa76cdde1325b9f75802c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQxZTczNDhkNDhmYzBmNWQ5N2ZhNzZjZGRlMTMyNWI5Zjc1ODAyYw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-11-02T12:51:09Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-11-02T12:51:09Z"}, "message": "tree-ssa-threadupdate.c (copy_phis_to_block): Install PHI arguments using PENDING_STMT.\n\n\t* tree-ssa-threadupdate.c (copy_phis_to_block): Install PHI\n\targuments using PENDING_STMT.\n\t(thread_block): Call copy_phis_to_block after redirecting an\n\tedge.\n\nFrom-SVN: r89983", "tree": {"sha": "f64643a34a616d257a08804df339691274f0db43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f64643a34a616d257a08804df339691274f0db43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/641e7348d48fc0f5d97fa76cdde1325b9f75802c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/641e7348d48fc0f5d97fa76cdde1325b9f75802c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/641e7348d48fc0f5d97fa76cdde1325b9f75802c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/641e7348d48fc0f5d97fa76cdde1325b9f75802c/comments", "author": null, "committer": null, "parents": [{"sha": "7ef7b3459927ad613838df2353515d04539cd1d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ef7b3459927ad613838df2353515d04539cd1d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ef7b3459927ad613838df2353515d04539cd1d6"}], "stats": {"total": 37, "additions": 21, "deletions": 16}, "files": [{"sha": "ef00d117425fc192f3c2e81e19ec8cace3b9572c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/641e7348d48fc0f5d97fa76cdde1325b9f75802c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/641e7348d48fc0f5d97fa76cdde1325b9f75802c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=641e7348d48fc0f5d97fa76cdde1325b9f75802c", "patch": "@@ -1,3 +1,10 @@\n+2004-11-02  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* tree-ssa-threadupdate.c (copy_phis_to_block): Install PHI\n+\targuments using PENDING_STMT.\n+\t(thread_block): Call copy_phis_to_block after redirecting an\n+\tedge.\n+\n 2004-11-02  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* bitmap.h (bitmap_and, bitmap_and_into, bitmap_and_compl,"}, {"sha": "2fdfb861857d59abdcc8d130fecb018b3f09ce17", "filename": "gcc/tree-ssa-threadupdate.c", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/641e7348d48fc0f5d97fa76cdde1325b9f75802c/gcc%2Ftree-ssa-threadupdate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/641e7348d48fc0f5d97fa76cdde1325b9f75802c/gcc%2Ftree-ssa-threadupdate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.c?ref=641e7348d48fc0f5d97fa76cdde1325b9f75802c", "patch": "@@ -95,38 +95,37 @@ struct redirection_data\n /* Main data structure to hold information for duplicates of BB.  */\n static varray_type redirection_data;\n \n-/* For each PHI node in BB, find or create a PHI node in NEW_BB for the\n-   same PHI_RESULT.  Add an argument to the PHI node in NEW_BB which\n-   corresponds to the same PHI argument associated with edge E in BB.  */\n+/* Add to the destination of edge E those PHI arguments queued on\n+   E.  */\n \n static void\n-copy_phis_to_block (basic_block new_bb, basic_block bb, edge e)\n+copy_phis_to_block (edge e)\n {\n-  tree phi, arg;\n+  basic_block dest = e->dest;\n+  tree var;\n \n-  /* Walk over every PHI in BB.  */\n-  for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n+  for (var = PENDING_STMT (e); var; var = TREE_CHAIN (var))\n     {\n+      tree result = TREE_PURPOSE (var);\n+      tree arg = TREE_VALUE (var);\n       tree new_phi;\n \n       /* First try to find a PHI node in NEW_BB which has the same\n          PHI_RESULT as the PHI from BB we are currently processing.  */\n-      for (new_phi = phi_nodes (new_bb); new_phi;\n+      for (new_phi = phi_nodes (dest); new_phi;\n \t   new_phi = PHI_CHAIN (new_phi))\n-\tif (PHI_RESULT (new_phi) == PHI_RESULT (phi))\n+\tif (PHI_RESULT (new_phi) == result)\n \t  break;\n \n       /* If we did not find a suitable PHI in NEW_BB, create one.  */\n       if (!new_phi)\n-\tnew_phi = create_phi_node (PHI_RESULT (phi), new_bb);\n-\n-      /* Extract the argument corresponding to E from the current PHI\n-         node in BB.  */\n-      arg = PHI_ARG_DEF_TREE (phi, phi_arg_from_edge (phi, e));\n+\tnew_phi = create_phi_node (result, dest);\n \n       /* Now add that same argument to the new PHI node in block NEW_BB.  */\n       add_phi_arg (&new_phi, arg, e);\n     }\n+\n+  PENDING_STMT (e) = NULL;\n }\n \n /* Remove the last statement in block BB if it is a control statement\n@@ -363,14 +362,13 @@ thread_block (basic_block bb)\n \t  if (rd->outgoing_edge == new_dest && rd->dup_block)\n \t    {\n \t      edge e2;\n-\t      copy_phis_to_block (rd->dup_block, bb, e);\n \n \t      if (dump_file && (dump_flags & TDF_DETAILS))\n \t\tfprintf (dump_file, \"  Threaded jump %d --> %d to %d\\n\",\n \t\t\t e->src->index, e->dest->index, rd->dup_block->index);\n \n \t      e2 = redirect_edge_and_branch (e, rd->dup_block);\n-\t      PENDING_STMT (e2) = NULL;\n+\t      copy_phis_to_block (e2);\n \n \t      if ((dump_file && (dump_flags & TDF_DETAILS))\n \t\t  && e->src != e2->src)"}]}