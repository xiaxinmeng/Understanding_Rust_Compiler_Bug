{"sha": "8dff10278c53da7ae8ee33127897792d1788a16f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGRmZjEwMjc4YzUzZGE3YWU4ZWUzMzEyNzg5Nzc5MmQxNzg4YTE2Zg==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1997-08-01T17:21:46Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1997-08-01T17:21:46Z"}, "message": "92th Cygnus<->FSF quick merge\n\nFrom-SVN: r14576", "tree": {"sha": "8d4fca6d688aad2bcf077b147146bb0433bd54b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d4fca6d688aad2bcf077b147146bb0433bd54b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8dff10278c53da7ae8ee33127897792d1788a16f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dff10278c53da7ae8ee33127897792d1788a16f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8dff10278c53da7ae8ee33127897792d1788a16f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dff10278c53da7ae8ee33127897792d1788a16f/comments", "author": null, "committer": null, "parents": [{"sha": "5e5b9f695084641d6096a525f3ac6181ee33d166", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e5b9f695084641d6096a525f3ac6181ee33d166", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e5b9f695084641d6096a525f3ac6181ee33d166"}], "stats": {"total": 115, "additions": 84, "deletions": 31}, "files": [{"sha": "6d4c3447b50b4966ec16595546e7f4a51f5c10ad", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dff10278c53da7ae8ee33127897792d1788a16f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dff10278c53da7ae8ee33127897792d1788a16f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8dff10278c53da7ae8ee33127897792d1788a16f", "patch": "@@ -1,3 +1,23 @@\n+Fri Aug  1 03:18:15 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* parse.y: Break out eat_saved_input, handle errors.\n+\n+Thu Jul 31 17:14:04 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* tree.c (build_cplus_new): Don't set TREE_ADDRESSABLE.\n+\n+Fri Jul  4 01:45:16 1997  Andreas Schwab  <schwab@issan.informatik.uni-dortmund.de>\n+\n+\t* Make-lang.in (cplib2.txt, cplib2.ready): Instead of checking for\n+\texistence of cc1plus check whether $(LANGUAGES) contains C++.\n+\n+Wed Jul 30 13:04:21 1997  Andreas Schwab  <schwab@issan.informatik.uni-dortmund.de>\n+\n+\t* method.c (do_build_copy_constructor): When copying an anonymous\n+\tunion member loop around to handle nested anonymous unions.  Use\n+\tthe offset of the member relative to the outer structure, not the\n+\tunion.\n+\n Tue Jul 29 21:17:29 1997  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* call.c (resolve_args): New fn."}, {"sha": "6748974820d8b7d2bef58937c1ad63a5c879fbb7", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dff10278c53da7ae8ee33127897792d1788a16f/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dff10278c53da7ae8ee33127897792d1788a16f/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=8dff10278c53da7ae8ee33127897792d1788a16f", "patch": "@@ -157,21 +157,23 @@ new2.o: cc1plus $(srcdir)/cp/new2.cc\n \n # We want to update cplib2.txt if any of the source files change...\n cplib2.txt: $(CXX_LIB2SRCS) $(CXX_EXTRA_HEADERS) cplib2.ready\n-\tif [ -f cc1plus ]; then \\\n-\t  echo $(CXX_LIB2FUNCS) > cplib2.new; \\\n-\telse \\\n-\t  echo \"\" > cplib2.new; \\\n-\tfi\n+\tcase \" $(LANGUAGES) \" in \\\n+\t*\" \"[cC]\"++ \"*) \\\n+\t  echo $(CXX_LIB2FUNCS) > cplib2.new;; \\\n+\t*) \\\n+\t  echo \"\" > cplib2.new;; \\\n+\tesac\n \tmv -f cplib2.new cplib2.txt \n \n # Or if it would be different.\n cplib2.ready: $(GCC_PASSES) $(LANGUAGES) $(LIBGCC2_DEPS) stmp-int-hdrs\n \t@if [ -r cplib2.txt ]; then \\\n-\t  if [ -f cc1plus ]; then \\\n-\t    echo $(CXX_LIB2FUNCS) > cplib2.new; \\\n-\t  else \\\n-\t    echo \"\" > cplib2.new; \\\n-\t  fi; \\\n+\t  case \" $(LANGUAGES) \" in \\\n+\t  *\" \"[cC]\"++ \"*) \\\n+\t    echo $(CXX_LIB2FUNCS) > cplib2.new;; \\\n+\t  *) \\\n+\t    echo \"\" > cplib2.new;; \\\n+\t  esac; \\\n \t  if cmp -s cplib2.new cplib2.txt; then true; else \\\n \t    touch cplib2.ready; \\\n \t  fi; \\"}, {"sha": "cf40fb4d96d23ce70e2b6ff31b19b365df74386d", "filename": "gcc/cp/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dff10278c53da7ae8ee33127897792d1788a16f/gcc%2Fcp%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dff10278c53da7ae8ee33127897792d1788a16f/gcc%2Fcp%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMakefile.in?ref=8dff10278c53da7ae8ee33127897792d1788a16f", "patch": "@@ -195,7 +195,7 @@ parse.o : $(PARSE_C) $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h lex.h\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(BIG_SWITCHFLAG) \\\n   `echo $(PARSE_C) | sed 's,^\\./,,'`\n \n-CONFLICTS = expect 18 shift/reduce conflicts and 39 reduce/reduce conflicts.\n+CONFLICTS = expect 20 shift/reduce conflicts and 39 reduce/reduce conflicts.\n $(PARSE_H) : $(PARSE_C)\n $(PARSE_C) : $(srcdir)/parse.y\n \t@echo $(CONFLICTS)"}, {"sha": "fb2abeca255d4150494908675846789283b48022", "filename": "gcc/cp/method.c", "status": "modified", "additions": 31, "deletions": 5, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dff10278c53da7ae8ee33127897792d1788a16f/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dff10278c53da7ae8ee33127897792d1788a16f/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=8dff10278c53da7ae8ee33127897792d1788a16f", "patch": "@@ -1924,6 +1924,8 @@ do_build_copy_constructor (fndecl)\n \n \t  if (TREE_CODE (field) != FIELD_DECL)\n \t    continue;\n+\n+\t  init = parm;\n \t  if (DECL_NAME (field))\n \t    {\n \t      if (VFIELD_NAME_P (DECL_NAME (field)))\n@@ -1939,11 +1941,21 @@ do_build_copy_constructor (fndecl)\n \t\t   && TREE_CODE (t) == UNION_TYPE\n \t\t   && ANON_AGGRNAME_P (TYPE_IDENTIFIER (t))\n \t\t   && TYPE_FIELDS (t) != NULL_TREE)\n-\t    field = largest_union_member (t);\n+\t    {\n+\t      do\n+\t\t{\n+\t\t  init = build (COMPONENT_REF, t, init, field);\n+\t\t  field = largest_union_member (t);\n+\t\t}\n+\t      while ((t = TREE_TYPE (field)) != NULL_TREE\n+\t\t     && TREE_CODE (t) == UNION_TYPE\n+\t\t     && ANON_AGGRNAME_P (TYPE_IDENTIFIER (t))\n+\t\t     && TYPE_FIELDS (t) != NULL_TREE);\n+\t    }\n \t  else\n \t    continue;\n \n-\t  init = build (COMPONENT_REF, TREE_TYPE (field), parm, field);\n+\t  init = build (COMPONENT_REF, TREE_TYPE (field), init, field);\n \t  init = build_tree_list (NULL_TREE, init);\n \n \t  current_member_init_list\n@@ -2017,6 +2029,9 @@ do_build_assign_ref (fndecl)\n \t      continue;\n \t    }\n \n+\t  comp = current_class_ref;\n+\t  init = parm;\n+\n \t  if (DECL_NAME (field))\n \t    {\n \t      if (VFIELD_NAME_P (DECL_NAME (field)))\n@@ -2032,12 +2047,23 @@ do_build_assign_ref (fndecl)\n \t\t   && TREE_CODE (t) == UNION_TYPE\n \t\t   && ANON_AGGRNAME_P (TYPE_IDENTIFIER (t))\n \t\t   && TYPE_FIELDS (t) != NULL_TREE)\n-\t    field = largest_union_member (t);\n+\t    {\n+\t      do\n+\t\t{\n+\t\t  comp = build (COMPONENT_REF, t, comp, field);\n+\t\t  init = build (COMPONENT_REF, t, init, field);\n+\t\t  field = largest_union_member (t);\n+\t\t}\n+\t      while ((t = TREE_TYPE (field)) != NULL_TREE\n+\t\t     && TREE_CODE (t) == UNION_TYPE\n+\t\t     && ANON_AGGRNAME_P (TYPE_IDENTIFIER (t))\n+\t\t     && TYPE_FIELDS (t) != NULL_TREE);\n+\t    }\n \t  else\n \t    continue;\n \n-\t  comp = build (COMPONENT_REF, TREE_TYPE (field), current_class_ref, field);\n-\t  init = build (COMPONENT_REF, TREE_TYPE (field), parm, field);\n+\t  comp = build (COMPONENT_REF, TREE_TYPE (field), comp, field);\n+\t  init = build (COMPONENT_REF, TREE_TYPE (field), init, field);\n \n \t  expand_expr_stmt (build_modify_expr (comp, NOP_EXPR, init));\n \t}"}, {"sha": "9c990688b46223e737fcf47fb02e61dd368d7502", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dff10278c53da7ae8ee33127897792d1788a16f/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dff10278c53da7ae8ee33127897792d1788a16f/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=8dff10278c53da7ae8ee33127897792d1788a16f", "patch": "@@ -363,7 +363,7 @@ lang_extdef:\n \t;\n \n extdef:\n-\t  fndef\n+\t  fndef eat_saved_input\n \t\t{ if (pending_inlines) do_pending_inlines (); }\n \t| datadef\n \t\t{ if (pending_inlines) do_pending_inlines (); }\n@@ -374,7 +374,7 @@ extdef:\n \t\t  assemble_asm ($3); }\n \t| extern_lang_string '{' extdefs_opt '}'\n \t\t{ pop_lang_context (); }\n-\t| extern_lang_string .hush_warning fndef .warning_ok\n+\t| extern_lang_string .hush_warning fndef .warning_ok eat_saved_input\n \t\t{ if (pending_inlines) do_pending_inlines ();\n \t\t  pop_lang_context (); }\n \t| extern_lang_string .hush_warning datadef .warning_ok\n@@ -539,8 +539,9 @@ fndef:\n \t  fn.def1 maybe_return_init ctor_initializer_opt compstmt_or_error\n \t\t{ finish_function (lineno, (int)$3, 0); }\n \t| fn.def1 maybe_return_init function_try_block\n-\t\t{ if ($<ttype>$) process_next_inline ($<ttype>$); }\n-\t  eat_saved_input\n+\t\t{ }\n+\t| fn.def1 maybe_return_init error\n+\t\t{ }\n \t;\n \n constructor_declarator:\n@@ -2109,26 +2110,32 @@ fn.defpen:\n \t\t\t\t  NULL_TREE, 1);\n \t\t  reinit_parse_for_function (); }\n \n-pending_inlines:\n-\t  /* empty */\n-\t| pending_inlines fn.defpen maybe_return_init ctor_initializer_opt\n-\t  compstmt_or_error\n+pending_inline:\n+\t  fn.defpen maybe_return_init ctor_initializer_opt compstmt_or_error\n \t\t{\n \t\t  int nested = (hack_decl_function_context\n \t\t\t\t(current_function_decl) != NULL_TREE);\n-\t\t  finish_function (lineno, (int)$4, nested);\n-\t\t  process_next_inline ($2);\n+\t\t  finish_function (lineno, (int)$3, nested);\n+\t\t  process_next_inline ($1);\n \t\t}\n-\t| pending_inlines fn.defpen maybe_return_init function_try_block\n-\t\t{ process_next_inline ($2); }\n-\t  eat_saved_input\n+\t| fn.defpen maybe_return_init function_try_block\n+\t\t{ process_next_inline ($1); }\n+\t| fn.defpen maybe_return_init error\n+\t\t{ process_next_inline ($1); }\n+\t;\n+\n+pending_inlines:\n+\t/* empty */\n+\t| pending_inlines pending_inline eat_saved_input\n \t;\n \n /* A regurgitated default argument.  The value of DEFARG_MARKER will be\n    the TREE_LIST node for the parameter in question.  */\n defarg_again:\n \tDEFARG_MARKER expr_no_commas END_OF_SAVED_INPUT\n \t\t{ replace_defarg ($1, $2); }\n+\t| DEFARG_MARKER error END_OF_SAVED_INPUT\n+\t\t{ replace_defarg ($1, error_mark_node); }\n \n pending_defargs:\n \t  /* empty */ %prec EMPTY"}, {"sha": "2843abdd2509663271cd43aef98dc0ed24cfdff2", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dff10278c53da7ae8ee33127897792d1788a16f/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dff10278c53da7ae8ee33127897792d1788a16f/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=8dff10278c53da7ae8ee33127897792d1788a16f", "patch": "@@ -227,10 +227,8 @@ build_cplus_new (type, init)\n   rval = build (NEW_EXPR, type,\n \t\tTREE_OPERAND (init, 0), TREE_OPERAND (init, 1), slot);\n   TREE_SIDE_EFFECTS (rval) = 1;\n-  TREE_ADDRESSABLE (rval) = 1;\n   rval = build (TARGET_EXPR, type, slot, rval, NULL_TREE, NULL_TREE);\n   TREE_SIDE_EFFECTS (rval) = 1;\n-  TREE_ADDRESSABLE (rval) = 1;\n \n   return rval;\n }"}]}