{"sha": "bd1fc4a219d8c0fad0ec41002e895b49e384c1c2", "node_id": "C_kwDOANBUbNoAKGJkMWZjNGEyMTlkOGMwZmFkMGVjNDEwMDJlODk1YjQ5ZTM4NGMxYzI", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-12-23T14:18:37Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-12-23T14:18:37Z"}, "message": "c++: template friend with variadic constraints [PR107853]\n\nWhen instantiating a constrained hidden template friend, we substitute\ninto its template-head requirements in tsubst_friend_function.  For this\nsubstitution we use the template's full argument vector whose outer\nlevels correspond to the instantiated class's arguments and innermost\nlevel corresponds to the template's own level-lowered generic arguments.\n\nBut for A<int>::f here, for which the relevant argument vector is\n{{int}, {Us...}}, the substitution into (C<Ts, Us> && ...) triggers the\nassert in use_pack_expansion_extra_args_p since one argument is a pack\nexpansion and the other isn't.\n\nAnd for A<int, int>::f, for which the relevant argument vector is\n{{int, int}, {Us...}}, the use_pack_expansion_extra_args_p assert would\nalso trigger but we first get a bogus \"mismatched argument pack lengths\"\nerror from tsubst_pack_expansion.\n\nSidestepping the question of whether tsubst_pack_expansion should be\nable to handle such substitutions, it seems we can work around this by\nusing only the instantiated class's arguments and not also the template\nfriend's own generic arguments, which is consistent with how we normally\nsubstitute into the signature of a member template.\n\n\tPR c++/107853\n\ngcc/cp/ChangeLog:\n\n\t* constraint.cc (maybe_substitute_reqs_for): Substitute into\n\tthe template-head requirements of a template friend using only\n\tits outer arguments via outer_template_args.\n\t* cp-tree.h (outer_template_args): Declare.\n\t* pt.cc (outer_template_args): Define, factored out and\n\tgeneralized from ...\n\t(ctor_deduction_guides_for): ... here.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/concepts-friend12.C: New test.\n\t* g++.dg/cpp2a/concepts-friend13.C: New test.", "tree": {"sha": "cd99579216aa7a67a62163ba94967f78c0870e84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd99579216aa7a67a62163ba94967f78c0870e84"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd1fc4a219d8c0fad0ec41002e895b49e384c1c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd1fc4a219d8c0fad0ec41002e895b49e384c1c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd1fc4a219d8c0fad0ec41002e895b49e384c1c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd1fc4a219d8c0fad0ec41002e895b49e384c1c2/comments", "author": null, "committer": null, "parents": [{"sha": "b358521b608f36409281a51263ace3155d28f54d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b358521b608f36409281a51263ace3155d28f54d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b358521b608f36409281a51263ace3155d28f54d"}], "stats": {"total": 83, "additions": 70, "deletions": 13}, "files": [{"sha": "247a8278d402ea3d19ae0183964339b25729ca23", "filename": "gcc/cp/constraint.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd1fc4a219d8c0fad0ec41002e895b49e384c1c2/gcc%2Fcp%2Fconstraint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd1fc4a219d8c0fad0ec41002e895b49e384c1c2/gcc%2Fcp%2Fconstraint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstraint.cc?ref=bd1fc4a219d8c0fad0ec41002e895b49e384c1c2", "patch": "@@ -1350,11 +1350,12 @@ maybe_substitute_reqs_for (tree reqs, const_tree decl)\n   if (DECL_UNIQUE_FRIEND_P (decl) && DECL_TEMPLATE_INFO (decl))\n     {\n       tree tmpl = DECL_TI_TEMPLATE (decl);\n-      tree gargs = generic_targs_for (tmpl);\n+      tree outer_args = outer_template_args (tmpl);\n       processing_template_decl_sentinel s;\n-      if (uses_template_parms (gargs))\n+      if (PRIMARY_TEMPLATE_P (tmpl)\n+\t  || uses_template_parms (outer_args))\n \t++processing_template_decl;\n-      reqs = tsubst_constraint (reqs, gargs,\n+      reqs = tsubst_constraint (reqs, outer_args,\n \t\t\t\ttf_warning_or_error, NULL_TREE);\n     }\n   return reqs;"}, {"sha": "1f4967c2ba04516d4ed1ecc96c1f6ae9a1032175", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd1fc4a219d8c0fad0ec41002e895b49e384c1c2/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd1fc4a219d8c0fad0ec41002e895b49e384c1c2/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=bd1fc4a219d8c0fad0ec41002e895b49e384c1c2", "patch": "@@ -7056,6 +7056,7 @@ extern tree maybe_set_retval_sentinel\t\t(void);\n extern tree template_parms_to_args\t\t(tree);\n extern tree template_parms_level_to_args\t(tree);\n extern tree generic_targs_for\t\t\t(tree);\n+extern tree outer_template_args\t\t\t(tree);\n \n /* in expr.cc */\n extern tree cplus_expand_constant\t\t(tree);"}, {"sha": "cbe5898b553ff79c205d6bc035fce325ab8b9f0b", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd1fc4a219d8c0fad0ec41002e895b49e384c1c2/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd1fc4a219d8c0fad0ec41002e895b49e384c1c2/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=bd1fc4a219d8c0fad0ec41002e895b49e384c1c2", "patch": "@@ -4958,6 +4958,28 @@ generic_targs_for (tree tmpl)\n   return template_parms_to_args (DECL_TEMPLATE_PARMS (tmpl));\n }\n \n+/* Return the template arguments corresponding to the template parameters of\n+   TMPL's enclosing scope.  When TMPL is a member of a partial specialization,\n+   this returns the arguments for the partial specialization as opposed to those\n+   for the primary template, which is the main difference between this function\n+   and simply using e.g. the TYPE_TI_ARGS of TMPL's DECL_CONTEXT.  */\n+\n+tree\n+outer_template_args (tree tmpl)\n+{\n+  tree ti = get_template_info (DECL_TEMPLATE_RESULT (tmpl));\n+  if (!ti)\n+    return NULL_TREE;\n+  tree args = TI_ARGS (ti);\n+  if (!PRIMARY_TEMPLATE_P (tmpl))\n+    return args;\n+  if (TMPL_ARGS_DEPTH (args) == 1)\n+    return NULL_TREE;\n+  args = copy_node (args);\n+  --TREE_VEC_LENGTH (args);\n+  return args;\n+}\n+\n /* Update the declared TYPE by doing any lookups which were thought to be\n    dependent, but are not now that we know the SCOPE of the declarator.  */\n \n@@ -30081,16 +30103,8 @@ alias_ctad_tweaks (tree tmpl, tree uguides)\n static tree\n ctor_deduction_guides_for (tree tmpl, tsubst_flags_t complain)\n {\n-  tree type = TREE_TYPE (tmpl);\n-  tree outer_args = NULL_TREE;\n-  if (DECL_CLASS_SCOPE_P (tmpl)\n-      && CLASSTYPE_TEMPLATE_INSTANTIATION (DECL_CONTEXT (tmpl)))\n-    {\n-      outer_args = copy_node (CLASSTYPE_TI_ARGS (type));\n-      gcc_assert (TMPL_ARGS_DEPTH (outer_args) > 1);\n-      --TREE_VEC_LENGTH (outer_args);\n-      type = TREE_TYPE (most_general_template (tmpl));\n-    }\n+  tree outer_args = outer_template_args (tmpl);\n+  tree type = TREE_TYPE (most_general_template (tmpl));\n \n   tree cands = NULL_TREE;\n "}, {"sha": "9687be5931a16d46662944b8bf684d1cc395956d", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-friend12.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd1fc4a219d8c0fad0ec41002e895b49e384c1c2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-friend12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd1fc4a219d8c0fad0ec41002e895b49e384c1c2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-friend12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-friend12.C?ref=bd1fc4a219d8c0fad0ec41002e895b49e384c1c2", "patch": "@@ -0,0 +1,21 @@\n+// PR c++/107853\n+// { dg-do compile { target c++20 } }\n+\n+template<class T, class U>\n+concept C = __is_same(T, U);\n+\n+template<class... Ts>\n+struct A {\n+  template<class... Us>\n+    requires (C<Ts, Us> && ...)\n+  friend void f(A, A<Us...>) { }\n+};\n+\n+int main() {\n+  A<int> x;\n+  f(x, x);\n+  A<int, int> y;\n+  f(y, y);\n+  A<char> z;\n+  f(x, z); // { dg-error \"no match\" }\n+}"}, {"sha": "3cc4505a7eff493276d6ef904c6611a6619079f4", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-friend13.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd1fc4a219d8c0fad0ec41002e895b49e384c1c2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-friend13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd1fc4a219d8c0fad0ec41002e895b49e384c1c2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-friend13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-friend13.C?ref=bd1fc4a219d8c0fad0ec41002e895b49e384c1c2", "patch": "@@ -0,0 +1,20 @@\n+// Verify we substitute the correct outer template arguments\n+// when instantiating a constrained template friend declared\n+// inside a partial specialization.\n+// { dg-do compile { target c++20 } }\n+\n+template<class U>\n+  requires __is_same(int*, U)\n+void f() { };\n+\n+template<class T>\n+struct A;\n+\n+template<class T>\n+struct A<T*> {\n+  template<class U>\n+    requires __is_same(T, U)\n+  friend void f() { } // { dg-bogus \"redefinition\" }\n+};\n+\n+template struct A<int*>;"}]}