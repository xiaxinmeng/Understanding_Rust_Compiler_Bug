{"sha": "1b4513069a1ba56abff09f27977da3d10ffcd7f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWI0NTEzMDY5YTFiYTU2YWJmZjA5ZjI3OTc3ZGEzZDEwZmZjZDdmMw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2003-12-19T09:35:24Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-12-19T09:35:24Z"}, "message": "locale_facets.tcc (num_get::_M_extract_float): When __found_sci becomes true stop eating thousands separators and the decimal...\n\n2003-12-19  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/locale_facets.tcc (num_get::_M_extract_float):\n\tWhen __found_sci becomes true stop eating thousands separators\n\tand the decimal radix separator.\n\t* testsuite/22_locale/num_get/get/char/9.cc: New.\n\t* testsuite/22_locale/num_get/get/wchar_t/9.cc: Likewise.\n\n\t* config/locale/generic/c_locale.cc (__convert_to_v): Don't\n\tcheck that *__sanity == '\\0': parsing may stop earlier, still\n\tbe successful.\n\t* config/locale/gnu/c_locale.cc: Likewise.\n\t* testsuite/22_locale/num_get/get/char/10.cc: New.\n\t* testsuite/22_locale/num_get/get/wchar_t/10.cc: Likewise.\n\t* testsuite/27_io/basic_istream/extractors_arithmetic/char/10.cc:\n\tTweak in one place accordingly.\n\n\t* testsuite/22_locale/money_get/get/char/1.cc: Fix typo.\n\t* testsuite/22_locale/money_get/get/wchar_t/1.cc: Likewise.\n\nFrom-SVN: r74826", "tree": {"sha": "85a14266411b4a664f0e48d4aec9dde4fee5d49f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85a14266411b4a664f0e48d4aec9dde4fee5d49f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b4513069a1ba56abff09f27977da3d10ffcd7f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b4513069a1ba56abff09f27977da3d10ffcd7f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b4513069a1ba56abff09f27977da3d10ffcd7f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b4513069a1ba56abff09f27977da3d10ffcd7f3/comments", "author": null, "committer": null, "parents": [{"sha": "ed8d88031c395a0029393904e44afe077d7a5b93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed8d88031c395a0029393904e44afe077d7a5b93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed8d88031c395a0029393904e44afe077d7a5b93"}], "stats": {"total": 323, "additions": 309, "deletions": 14}, "files": [{"sha": "441ed54aa88d8c3a38f70110f67e5d44158b6e05", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b4513069a1ba56abff09f27977da3d10ffcd7f3/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b4513069a1ba56abff09f27977da3d10ffcd7f3/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1b4513069a1ba56abff09f27977da3d10ffcd7f3", "patch": "@@ -1,3 +1,23 @@\n+2003-12-19  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/locale_facets.tcc (num_get::_M_extract_float):\n+\tWhen __found_sci becomes true stop eating thousands separators\n+\tand the decimal radix separator.\n+\t* testsuite/22_locale/num_get/get/char/9.cc: New.\n+\t* testsuite/22_locale/num_get/get/wchar_t/9.cc: Likewise.\t\n+\t\n+\t* config/locale/generic/c_locale.cc (__convert_to_v): Don't\n+\tcheck that *__sanity == '\\0': parsing may stop earlier, still\n+\tbe successful.\n+\t* config/locale/gnu/c_locale.cc: Likewise.\n+\t* testsuite/22_locale/num_get/get/char/10.cc: New.\n+\t* testsuite/22_locale/num_get/get/wchar_t/10.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/extractors_arithmetic/char/10.cc:\n+\tTweak in one place accordingly.\n+\n+\t* testsuite/22_locale/money_get/get/char/1.cc: Fix typo.\n+\t* testsuite/22_locale/money_get/get/wchar_t/1.cc: Likewise.\n+\n 2003-12-18  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/bits/stl_list.h: Formatting tweaks."}, {"sha": "a214e00b5163dd06aa81f310de232d4ae2249c7b", "filename": "libstdc++-v3/config/locale/generic/c_locale.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b4513069a1ba56abff09f27977da3d10ffcd7f3/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b4513069a1ba56abff09f27977da3d10ffcd7f3/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.cc?ref=1b4513069a1ba56abff09f27977da3d10ffcd7f3", "patch": "@@ -76,7 +76,7 @@ namespace std\n \t    errno = ERANGE;\n #endif\n #endif\n-          if (__sanity != __s && *__sanity == '\\0' && errno != ERANGE)\n+          if (__sanity != __s && errno != ERANGE)\n \t    __v = __f;\n \t  else\n \t    __err |= ios_base::failbit;\n@@ -98,7 +98,7 @@ namespace std\n \t  char* __sanity;\n \t  errno = 0;\n \t  double __d = strtod(__s, &__sanity);\n-          if (__sanity != __s && *__sanity == '\\0' && errno != ERANGE)\n+          if (__sanity != __s && errno != ERANGE)\n \t    __v = __d;\n \t  else\n \t    __err |= ios_base::failbit;\n@@ -121,7 +121,7 @@ namespace std\n \t  char* __sanity;\n \t  errno = 0;\n \t  long double __ld = strtold(__s, &__sanity);\n-          if (__sanity != __s && *__sanity == '\\0' && errno != ERANGE)\n+          if (__sanity != __s && errno != ERANGE)\n \t    __v = __ld;\n #else\n \t  typedef char_traits<char>::int_type int_type;"}, {"sha": "b808f70e5f96da020087e120a001a765cf16fa0c", "filename": "libstdc++-v3/config/locale/gnu/c_locale.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b4513069a1ba56abff09f27977da3d10ffcd7f3/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b4513069a1ba56abff09f27977da3d10ffcd7f3/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.cc?ref=1b4513069a1ba56abff09f27977da3d10ffcd7f3", "patch": "@@ -51,7 +51,7 @@ namespace std\n \t  char* __sanity;\n \t  errno = 0;\n \t  float __f = __strtof_l(__s, &__sanity, __cloc);\n-          if (__sanity != __s && *__sanity == '\\0' && errno != ERANGE)\n+          if (__sanity != __s && errno != ERANGE)\n \t    __v = __f;\n \t  else\n \t    __err |= ios_base::failbit;\n@@ -68,7 +68,7 @@ namespace std\n \t  char* __sanity;\n \t  errno = 0;\n \t  double __d = __strtod_l(__s, &__sanity, __cloc);\n-          if (__sanity != __s && *__sanity == '\\0' && errno != ERANGE)\n+          if (__sanity != __s && errno != ERANGE)\n \t    __v = __d;\n \t  else\n \t    __err |= ios_base::failbit;\n@@ -85,7 +85,7 @@ namespace std\n \t  char* __sanity;\n \t  errno = 0;\n \t  long double __ld = __strtold_l(__s, &__sanity, __cloc);\n-          if (__sanity != __s && *__sanity == '\\0' && errno != ERANGE)\n+          if (__sanity != __s && errno != ERANGE)\n \t    __v = __ld;\n \t  else\n \t    __err |= ios_base::failbit;"}, {"sha": "8f79d9e6959927e0c999a52c74bb8d542e139111", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b4513069a1ba56abff09f27977da3d10ffcd7f3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b4513069a1ba56abff09f27977da3d10ffcd7f3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=1b4513069a1ba56abff09f27977da3d10ffcd7f3", "patch": "@@ -183,8 +183,9 @@ namespace std\n \t      ++__sep_pos;\n \t      ++__beg;\n \t    }\n-          else if (__traits_type::eq(__c, __lc->_M_thousands_sep) \n-\t\t   && __lc->_M_use_grouping && !__found_dec)\n+          else if (__lc->_M_use_grouping\n+\t\t   && __traits_type::eq(__c, __lc->_M_thousands_sep)\n+\t\t   && !__found_dec && !__found_sci)\n \t    {\n               // NB: Thousands separator at the beginning of a string\n               // is a no-no, as is two consecutive thousands separators.\n@@ -201,7 +202,7 @@ namespace std\n \t\t}\n             }\n \t  else if (__traits_type::eq(__c, __lc->_M_decimal_point) \n-\t\t   && !__found_dec)\n+\t\t   && !__found_dec && !__found_sci)\n \t    {\n \t      // According to the standard, if no grouping chars are seen,\n \t      // no grouping check is applied. Therefore __found_grouping"}, {"sha": "fd2c1e55c939d3dbca42fdcac7e7232a6d5f7637", "filename": "libstdc++-v3/testsuite/22_locale/money_get/get/char/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b4513069a1ba56abff09f27977da3d10ffcd7f3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b4513069a1ba56abff09f27977da3d10ffcd7f3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F1.cc?ref=1b4513069a1ba56abff09f27977da3d10ffcd7f3", "patch": "@@ -100,7 +100,7 @@ void test01()\n   ios_base::iostate err04 = ios_base::goodbit;\n   mon_get.get(is_it04, end, true, iss, err04, result4);\n   VERIFY( result4 == empty );\n-  VERIFY( err04 == ios_base::failbit | ios_base::eofbit );\n+  VERIFY( err04 == (ios_base::failbit | ios_base::eofbit) );\n \n   iss.str(\"working for enlightenment and peace in a mad world\");\n   iterator_type is_it05(iss);"}, {"sha": "a89507234552d375bcd7626abe93c6a734e3019f", "filename": "libstdc++-v3/testsuite/22_locale/money_get/get/wchar_t/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b4513069a1ba56abff09f27977da3d10ffcd7f3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b4513069a1ba56abff09f27977da3d10ffcd7f3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F1.cc?ref=1b4513069a1ba56abff09f27977da3d10ffcd7f3", "patch": "@@ -100,7 +100,7 @@ void test01()\n   ios_base::iostate err04 = ios_base::goodbit;\n   mon_get.get(is_it04, end, true, iss, err04, result4);\n   VERIFY( result4 == empty );\n-  VERIFY( err04 == ios_base::failbit | ios_base::eofbit );\n+  VERIFY( err04 == (ios_base::failbit | ios_base::eofbit) );\n \n   iss.str(L\"working for enlightenment and peace in a mad world\");\n   iterator_type is_it05(iss);"}, {"sha": "259dea95e8069b96a7c82d1e6d71a1e0884f300a", "filename": "libstdc++-v3/testsuite/22_locale/num_get/get/char/10.cc", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b4513069a1ba56abff09f27977da3d10ffcd7f3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F10.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b4513069a1ba56abff09f27977da3d10ffcd7f3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F10.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F10.cc?ref=1b4513069a1ba56abff09f27977da3d10ffcd7f3", "patch": "@@ -0,0 +1,72 @@\n+// 2003-12-19  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.2.1.1  num_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+  typedef istreambuf_iterator<char> iterator_type;\n+  \n+  bool test __attribute__((unused)) = true;\n+\n+  istringstream iss;\n+  const num_get<char>& ng = use_facet<num_get<char> >(iss.getloc()); \n+  ios_base::iostate err = ios_base::goodbit;\n+  iterator_type end;\n+  float f = 0.0f;\n+  double d = 0.0;\n+  long double ld = 0.0l;\n+  float f1 = 1.0f;\n+  double d1 = 3.0;\n+  long double ld1 = 6.0l;\n+  \n+  iss.str(\"1e.\");\n+  err = ios_base::goodbit;\n+  end = ng.get(iss.rdbuf(), 0, iss, err, f);\n+  VERIFY( err == ios_base::goodbit );\n+  VERIFY( *end == '.' );\n+  VERIFY( f == f1 );\n+\n+  iss.str(\"3e+\");\n+  iss.clear();\n+  err = ios_base::goodbit;\n+  end = ng.get(iss.rdbuf(), 0, iss, err, d);\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( d == d1 );\n+\n+  iss.str(\"6e \");\n+  iss.clear();\n+  err = ios_base::goodbit;\n+  end = ng.get(iss.rdbuf(), 0, iss, err, ld);\n+  VERIFY( err == ios_base::goodbit );\n+  VERIFY( *end == ' ' );\n+  VERIFY( ld == ld1 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "5934b61cbd51d497f96b98ac802f9d332c5b9929", "filename": "libstdc++-v3/testsuite/22_locale/num_get/get/char/9.cc", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b4513069a1ba56abff09f27977da3d10ffcd7f3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F9.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b4513069a1ba56abff09f27977da3d10ffcd7f3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F9.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F9.cc?ref=1b4513069a1ba56abff09f27977da3d10ffcd7f3", "patch": "@@ -0,0 +1,65 @@\n+// 2003-12-19  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.2.1.1  num_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+  typedef istreambuf_iterator<char> iterator_type;\n+  \n+  bool test __attribute__((unused)) = true;\n+\n+  // A locale that expects grouping  \n+  locale loc_de = __gnu_test::try_named_locale(\"de_DE\");\n+  istringstream iss;\n+  iss.imbue(loc_de);\n+\n+  const num_get<char>& ng = use_facet<num_get<char> >(iss.getloc()); \n+  ios_base::iostate err = ios_base::goodbit;\n+  iterator_type end;\n+  double d = 0.0;\n+  double d1 = 1e1;\n+  double d2 = 3e1;\n+  \n+  iss.str(\"1e1,\");\n+  end = ng.get(iss.rdbuf(), 0, iss, err, d);\n+  VERIFY( err == ios_base::goodbit );\n+  VERIFY( *end == ',' );\n+  VERIFY( d == d1 );\n+\n+  iss.str(\"3e1.\");\n+  iss.clear();\n+  err = ios_base::goodbit;\n+  end = ng.get(iss.rdbuf(), 0, iss, err, d);\n+  VERIFY( err == ios_base::goodbit );\n+  VERIFY( *end == '.' );\n+  VERIFY( d == d2 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "85fa5744dec6a39923e7a9d98e0b26f684923a7e", "filename": "libstdc++-v3/testsuite/22_locale/num_get/get/wchar_t/10.cc", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b4513069a1ba56abff09f27977da3d10ffcd7f3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F10.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b4513069a1ba56abff09f27977da3d10ffcd7f3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F10.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F10.cc?ref=1b4513069a1ba56abff09f27977da3d10ffcd7f3", "patch": "@@ -0,0 +1,72 @@\n+// 2003-12-19  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.2.1.1  num_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+  typedef istreambuf_iterator<wchar_t> iterator_type;\n+  \n+  bool test __attribute__((unused)) = true;\n+\n+  wistringstream iss;\n+  const num_get<wchar_t>& ng = use_facet<num_get<wchar_t> >(iss.getloc()); \n+  ios_base::iostate err = ios_base::goodbit;\n+  iterator_type end;\n+  float f = 0.0f;\n+  double d = 0.0;\n+  long double ld = 0.0l;\n+  float f1 = 1.0f;\n+  double d1 = 3.0;\n+  long double ld1 = 6.0l;\n+  \n+  iss.str(L\"1e.\");\n+  err = ios_base::goodbit;\n+  end = ng.get(iss.rdbuf(), 0, iss, err, f);\n+  VERIFY( err == ios_base::goodbit );\n+  VERIFY( *end == L'.' );\n+  VERIFY( f == f1 );\n+\n+  iss.str(L\"3e+\");\n+  iss.clear();\n+  err = ios_base::goodbit;\n+  end = ng.get(iss.rdbuf(), 0, iss, err, d);\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( d == d1 );\n+\n+  iss.str(L\"6e \");\n+  iss.clear();\n+  err = ios_base::goodbit;\n+  end = ng.get(iss.rdbuf(), 0, iss, err, ld);\n+  VERIFY( err == ios_base::goodbit );\n+  VERIFY( *end == L' ' );\n+  VERIFY( ld == ld1 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "df3db53b127a0ae76f1e985a5a9db6f1431756df", "filename": "libstdc++-v3/testsuite/22_locale/num_get/get/wchar_t/9.cc", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b4513069a1ba56abff09f27977da3d10ffcd7f3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F9.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b4513069a1ba56abff09f27977da3d10ffcd7f3/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F9.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F9.cc?ref=1b4513069a1ba56abff09f27977da3d10ffcd7f3", "patch": "@@ -0,0 +1,65 @@\n+// 2003-12-19  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.2.1.1  num_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+  typedef istreambuf_iterator<wchar_t> iterator_type;\n+  \n+  bool test __attribute__((unused)) = true;\n+\n+  // A locale that expects grouping  \n+  locale loc_de = __gnu_test::try_named_locale(\"de_DE\");\n+  wistringstream iss;\n+  iss.imbue(loc_de);\n+\n+  const num_get<wchar_t>& ng = use_facet<num_get<wchar_t> >(iss.getloc()); \n+  ios_base::iostate err = ios_base::goodbit;\n+  iterator_type end;\n+  double d = 0.0;\n+  double d1 = 1e1;\n+  double d2 = 3e1;\n+  \n+  iss.str(L\"1e1,\");\n+  end = ng.get(iss.rdbuf(), 0, iss, err, d);\n+  VERIFY( err == ios_base::goodbit );\n+  VERIFY( *end == L',' );\n+  VERIFY( d == d1 );\n+\n+  iss.str(L\"3e1.\");\n+  iss.clear();\n+  err = ios_base::goodbit;\n+  end = ng.get(iss.rdbuf(), 0, iss, err, d);\n+  VERIFY( err == ios_base::goodbit );\n+  VERIFY( *end == L'.' );\n+  VERIFY( d == d2 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "08c39ee8167ca7f939ee7e8d1444c0a84ca54b2b", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_arithmetic/char/10.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b4513069a1ba56abff09f27977da3d10ffcd7f3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2F10.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b4513069a1ba56abff09f27977da3d10ffcd7f3/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2F10.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2F10.cc?ref=1b4513069a1ba56abff09f27977da3d10ffcd7f3", "patch": "@@ -127,13 +127,13 @@ bool test10() {\n   is_05 >> f;\n   VERIFY( f == 0 );\n   is_05 >> f;\n-  VERIFY( f == 0 );\n-  VERIFY( is_05.rdstate() == std::ios_base::failbit );\n+  VERIFY( f == 5.0 );\n+  VERIFY( is_05.rdstate() == std::ios_base::goodbit );\n   is_05.clear();\n   is_05 >> c;\n   VERIFY( c == 'a' );\n   is_05 >> f;\n-  VERIFY( f == 0 );\n+  VERIFY( f == 5.0 );\n   VERIFY( is_05.rdstate() == std::ios_base::failbit );\n   is_05.clear();\n   is_05.ignore();"}]}