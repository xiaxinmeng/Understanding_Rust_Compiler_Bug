{"sha": "2735e93e53bb4cf96a8f245b40bf29fefe946163", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjczNWU5M2U1M2JiNGNmOTZhOGYyNDViNDBiZjI5ZmVmZTk0NjE2Mw==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2005-06-21T18:46:33Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2005-06-21T18:46:33Z"}, "message": "tree-vrp.c (extract_range_from_unary_expr): Handle type conversions better.\n\n        * tree-vrp.c (extract_range_from_unary_expr): Handle type\n        conversions better.\n\n        * gcc.dg/tree-ssa/vrp15.c: New test.\n\nFrom-SVN: r101232", "tree": {"sha": "51811cb1fc3462dd074a020bad55da4671ab8357", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51811cb1fc3462dd074a020bad55da4671ab8357"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2735e93e53bb4cf96a8f245b40bf29fefe946163", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2735e93e53bb4cf96a8f245b40bf29fefe946163", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2735e93e53bb4cf96a8f245b40bf29fefe946163", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2735e93e53bb4cf96a8f245b40bf29fefe946163/comments", "author": null, "committer": null, "parents": [{"sha": "a6b46ba2c84f81e70811e13581c99350cdc76400", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6b46ba2c84f81e70811e13581c99350cdc76400", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6b46ba2c84f81e70811e13581c99350cdc76400"}], "stats": {"total": 72, "additions": 72, "deletions": 0}, "files": [{"sha": "591d59d884d37f7744774c6b36b6e590c10a1660", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2735e93e53bb4cf96a8f245b40bf29fefe946163/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2735e93e53bb4cf96a8f245b40bf29fefe946163/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2735e93e53bb4cf96a8f245b40bf29fefe946163", "patch": "@@ -1,3 +1,8 @@\n+2005-06-21  Jeff Law  <law@redhat.com>\n+\n+        * tree-vrp.c (extract_range_from_unary_expr): Handle type\n+        conversions better.\n+\n 2005-06-21  Dorit Nuzman  <dorit@il.ibm.com>\n \n \t* genopinit.c (vec_shl_optab, vec_shr_optab): Initialize new optabs."}, {"sha": "b8c7927dae02ce8a193196a54de2b65b8f300461", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2735e93e53bb4cf96a8f245b40bf29fefe946163/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2735e93e53bb4cf96a8f245b40bf29fefe946163/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2735e93e53bb4cf96a8f245b40bf29fefe946163", "patch": "@@ -1,3 +1,7 @@\n+2005-06-21  Jeff Law  <law@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/vrp15.c: New test.\n+\n 2005-06-21  Dorit Nuzman  <dorit@il.ibm.com>\n \n \t* lib/target-supports.exp (check_effective_target_vect_reduction): "}, {"sha": "035d38f9f228013656ce5fc4bba2dcadb2e01d23", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp15.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2735e93e53bb4cf96a8f245b40bf29fefe946163/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2735e93e53bb4cf96a8f245b40bf29fefe946163/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp15.c?ref=2735e93e53bb4cf96a8f245b40bf29fefe946163", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-vrp\" } */\n+\n+\n+extern void abort (void) __attribute__ ((__noreturn__));\n+union tree_node;\n+typedef union tree_node *tree;\n+enum tree_code\n+{\n+  ERROR_MARK,\n+  COND_EXPR = 42,\n+};\n+extern const unsigned char tree_code_length[];\n+struct tree_common\n+{\n+  enum tree_code code:8;\n+};\n+union tree_node\n+{\n+  struct tree_common common;\n+};\n+void\n+blah (tree t)\n+{\n+  if (t->common.code != COND_EXPR)\n+    abort ();\n+  if (1 >= tree_code_length[t->common.code])\n+    abort ();\n+\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"tree_code_length.42.\" 1 \"vrp\" } } */\n+/* { dg-final { cleanup-tree-dump \"vrp\" } } */\n+"}, {"sha": "81b0c0a471e57668ea74c6d5454e667f8a801177", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2735e93e53bb4cf96a8f245b40bf29fefe946163/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2735e93e53bb4cf96a8f245b40bf29fefe946163/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=2735e93e53bb4cf96a8f245b40bf29fefe946163", "patch": "@@ -1286,6 +1286,35 @@ extract_range_from_unary_expr (value_range_t *vr, tree expr)\n       tree inner_type = TREE_TYPE (op0);\n       tree outer_type = TREE_TYPE (expr);\n \n+      /* If VR0 represents a simple range, then try to convert\n+\t the min and max values for the range to the same type\n+\t as OUTER_TYPE.  If the results compare equal to VR0's\n+\t min and max values and the new min is still less than\n+\t or equal to the new max, then we can safely use the newly\n+\t computed range for EXPR.  This allows us to compute\n+\t accurate ranges through many casts.  */\n+      if (vr0.type == VR_RANGE)\n+\t{\n+\t  tree new_min, new_max;\n+\n+\t  /* Convert VR0's min/max to OUTER_TYPE.  */\n+\t  new_min = fold_convert (outer_type, vr0.min);\n+\t  new_max = fold_convert (outer_type, vr0.max);\n+\n+\t  /* Verify the new min/max values are gimple values and\n+\t     that they compare equal to VR0's min/max values.  */\n+\t  if (is_gimple_val (new_min)\n+\t      && is_gimple_val (new_max)\n+\t      && tree_int_cst_equal (new_min, vr0.min)\n+\t      && tree_int_cst_equal (new_max, vr0.max)\n+\t      && compare_values (new_min, new_max) <= 0\n+\t      && compare_values (new_min, new_max) >= -2)\n+\t    {\n+\t      set_value_range (vr, VR_RANGE, new_min, new_max, vr->equiv);\n+\t      return;\n+\t    }\n+\t}\n+\n       /* When converting types of different sizes, set the result to\n \t VARYING.  Things like sign extensions and precision loss may\n \t change the range.  For instance, if x_3 is of type 'long long"}]}