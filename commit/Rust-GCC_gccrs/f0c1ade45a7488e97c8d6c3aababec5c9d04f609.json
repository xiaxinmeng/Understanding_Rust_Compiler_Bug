{"sha": "f0c1ade45a7488e97c8d6c3aababec5c9d04f609", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjBjMWFkZTQ1YTc0ODhlOTdjOGQ2YzNhYWJhYmVjNWM5ZDA0ZjYwOQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2017-05-23T20:14:01Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2017-05-23T20:14:01Z"}, "message": "PR c++/80396 - built-in for make_integer_sequence.\n\n\t* pt.c (builtin_pack_fn_p, builtin_pack_call_p)\n\t(expand_integer_pack, expand_builtin_pack_call): New.\n\t(find_parameter_packs_r): Check builtin_pack_call_p.\n\t(check_for_bare_parameter_packs): Handle it.\n\t(tsubst_pack_expansion): Call expand_builtin_pack_call.\n\t(declare_integer_pack): New.\n\t(init_template_processing): Call it.\n\t* decl2.c (mark_used): Check builtin_pack_fn_p.\n\nFrom-SVN: r248384", "tree": {"sha": "59a1364497c81860c16d0237d89f45ebbc6be599", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59a1364497c81860c16d0237d89f45ebbc6be599"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0c1ade45a7488e97c8d6c3aababec5c9d04f609", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0c1ade45a7488e97c8d6c3aababec5c9d04f609", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0c1ade45a7488e97c8d6c3aababec5c9d04f609", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0c1ade45a7488e97c8d6c3aababec5c9d04f609/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f6744083c85b7b7469401ef9ce2e1014b7bf548f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6744083c85b7b7469401ef9ce2e1014b7bf548f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6744083c85b7b7469401ef9ce2e1014b7bf548f"}], "stats": {"total": 193, "additions": 191, "deletions": 2}, "files": [{"sha": "2f15c9b177983dbad410d62be743f7dbf1ed9f6d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0c1ade45a7488e97c8d6c3aababec5c9d04f609/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0c1ade45a7488e97c8d6c3aababec5c9d04f609/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f0c1ade45a7488e97c8d6c3aababec5c9d04f609", "patch": "@@ -1,3 +1,15 @@\n+2017-05-23  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/80396 - built-in for make_integer_sequence.\n+\t* pt.c (builtin_pack_fn_p, builtin_pack_call_p)\n+\t(expand_integer_pack, expand_builtin_pack_call): New.\n+\t(find_parameter_packs_r): Check builtin_pack_call_p.\n+\t(check_for_bare_parameter_packs): Handle it.\n+\t(tsubst_pack_expansion): Call expand_builtin_pack_call.\n+\t(declare_integer_pack): New.\n+\t(init_template_processing): Call it.\n+\t* decl2.c (mark_used): Check builtin_pack_fn_p.\n+\n 2017-05-23  Nathan Sidwell  <nathan@acm.org>\n \n \t* name-lookup.c (find_namespace_binding): New."}, {"sha": "98ef023db61ae99767d058278b82d37b04104c0b", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0c1ade45a7488e97c8d6c3aababec5c9d04f609/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0c1ade45a7488e97c8d6c3aababec5c9d04f609/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=f0c1ade45a7488e97c8d6c3aababec5c9d04f609", "patch": "@@ -6382,6 +6382,7 @@ extern bool always_instantiate_p\t\t(tree);\n extern void maybe_instantiate_noexcept\t\t(tree);\n extern tree instantiate_decl\t\t\t(tree, bool, bool);\n extern int comp_template_parms\t\t\t(const_tree, const_tree);\n+extern bool builtin_pack_fn_p\t\t\t(tree);\n extern bool uses_parameter_packs                (tree);\n extern bool template_parameter_pack_p           (const_tree);\n extern bool function_parameter_pack_p\t\t(const_tree);"}, {"sha": "85310e0e666594eb1931836985b8ff53579b6cd6", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0c1ade45a7488e97c8d6c3aababec5c9d04f609/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0c1ade45a7488e97c8d6c3aababec5c9d04f609/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=f0c1ade45a7488e97c8d6c3aababec5c9d04f609", "patch": "@@ -5109,6 +5109,13 @@ mark_used (tree decl, tsubst_flags_t complain)\n   if (!require_deduced_type (decl, complain))\n     return false;\n \n+  if (builtin_pack_fn_p (decl))\n+    {\n+      error (\"use of built-in parameter pack %qD outside of a template\",\n+\t     DECL_NAME (decl));\n+      return false;\n+    }\n+\n   /* If we don't need a value, then we don't need to synthesize DECL.  */\n   if (cp_unevaluated_operand || in_discarded_stmt)\n     return true;"}, {"sha": "4f2c2d53294cd833f1e8ce3cdccc65621ff60266", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0c1ade45a7488e97c8d6c3aababec5c9d04f609/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0c1ade45a7488e97c8d6c3aababec5c9d04f609/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=f0c1ade45a7488e97c8d6c3aababec5c9d04f609", "patch": "@@ -15096,7 +15096,7 @@ cp_parser_template_parameter (cp_parser* parser, bool *is_non_type,\n   *is_parameter_pack = false;\n   /* Peek at the next token.  */\n   token = cp_lexer_peek_token (parser->lexer);\n-  /* If it is `class' or `template', we have a type-parameter.  */\n+  /* If it is `template', we have a type-parameter.  */\n   if (token->keyword == RID_TEMPLATE)\n     return cp_parser_type_parameter (parser, is_parameter_pack);\n   /* If it is `class' or `typename' we do not know yet whether it is a"}, {"sha": "54de34b6798a62c0d957b7c5ecf304bc81df9bbc", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 130, "deletions": 1, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0c1ade45a7488e97c8d6c3aababec5c9d04f609/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0c1ade45a7488e97c8d6c3aababec5c9d04f609/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=f0c1ade45a7488e97c8d6c3aababec5c9d04f609", "patch": "@@ -215,6 +215,7 @@ static tree instantiate_alias_template (tree, tree, tsubst_flags_t);\n static bool complex_alias_template_p (const_tree tmpl);\n static tree tsubst_attributes (tree, tree, tsubst_flags_t, tree);\n static tree canonicalize_expr_argument (tree, tsubst_flags_t);\n+static tree make_argument_pack (tree);\n \n /* Make the current scope suitable for access checking when we are\n    processing T.  T can be FUNCTION_DECL for instantiated function\n@@ -3414,6 +3415,101 @@ get_template_argument_pack_elems (const_tree t)\n   return ARGUMENT_PACK_ARGS (t);\n }\n \n+/* True iff FN is a function representing a built-in variadic parameter\n+   pack.  */\n+\n+bool\n+builtin_pack_fn_p (tree fn)\n+{\n+  if (!fn\n+      || TREE_CODE (fn) != FUNCTION_DECL\n+      || !DECL_IS_BUILTIN (fn))\n+    return false;\n+\n+  if (strcmp (IDENTIFIER_POINTER (DECL_NAME (fn)), \"__integer_pack\") == 0)\n+    return true;\n+\n+  return false;\n+}\n+\n+/* True iff CALL is a call to a function representing a built-in variadic\n+   parameter pack.  */\n+\n+static bool\n+builtin_pack_call_p (tree call)\n+{\n+  if (TREE_CODE (call) != CALL_EXPR)\n+    return false;\n+  return builtin_pack_fn_p (CALL_EXPR_FN (call));\n+}\n+\n+/* Return a TREE_VEC for the expansion of __integer_pack(HI).  */\n+\n+static tree\n+expand_integer_pack (tree call, tree args, tsubst_flags_t complain,\n+\t\t     tree in_decl)\n+{\n+  tree ohi = CALL_EXPR_ARG (call, 0);\n+  tree hi = tsubst_copy_and_build (ohi, args, complain, in_decl,\n+\t\t\t\t   false/*fn*/, true/*int_cst*/);\n+\n+  if (value_dependent_expression_p (hi))\n+    {\n+      if (hi != ohi)\n+\t{\n+\t  call = copy_node (call);\n+\t  CALL_EXPR_ARG (call, 0) = hi;\n+\t}\n+      tree ex = make_pack_expansion (call);\n+      tree vec = make_tree_vec (1);\n+      TREE_VEC_ELT (vec, 0) = ex;\n+      return vec;\n+    }\n+  else\n+    {\n+      hi = cxx_constant_value (hi);\n+      int len = valid_constant_size_p (hi) ? tree_to_shwi (hi) : -1;\n+\n+      /* Calculate the largest value of len that won't make the size of the vec\n+\t overflow an int.  The compiler will exceed resource limits long before\n+\t this, but it seems a decent place to diagnose.  */\n+      int max = ((INT_MAX - sizeof (tree_vec)) / sizeof (tree)) + 1;\n+\n+      if (len < 0 || len > max)\n+\t{\n+\t  if ((complain & tf_error)\n+\t      && hi != error_mark_node)\n+\t    error (\"argument to __integer_pack must be between 0 and %d\", max);\n+\t  return error_mark_node;\n+\t}\n+\n+      tree vec = make_tree_vec (len);\n+\n+      for (int i = 0; i < len; ++i)\n+\tTREE_VEC_ELT (vec, i) = size_int (i);\n+\n+      return vec;\n+    }\n+}\n+\n+/* Return a TREE_VEC for the expansion of built-in template parameter pack\n+   CALL.  */\n+\n+static tree\n+expand_builtin_pack_call (tree call, tree args, tsubst_flags_t complain,\n+\t\t\t  tree in_decl)\n+{\n+  if (!builtin_pack_call_p (call))\n+    return NULL_TREE;\n+\n+  tree fn = CALL_EXPR_FN (call);\n+\n+  if (strcmp (IDENTIFIER_POINTER (DECL_NAME (fn)), \"__integer_pack\") == 0)\n+    return expand_integer_pack (call, args, complain, in_decl);\n+\n+  return NULL_TREE;\n+}\n+\n /* Structure used to track the progress of find_parameter_packs_r.  */\n struct find_parameter_pack_data \n {\n@@ -3503,6 +3599,11 @@ find_parameter_packs_r (tree *tp, int *walk_subtrees, void* data)\n \t}\n       break;\n \n+    case CALL_EXPR:\n+      if (builtin_pack_call_p (t))\n+\tparameter_pack_p = true;\n+      break;\n+\n     case BASES:\n       parameter_pack_p = true;\n       break;\n@@ -3801,6 +3902,8 @@ check_for_bare_parameter_packs (tree t)\n             name = TYPE_NAME (pack);\n           else if (TREE_CODE (pack) == TEMPLATE_PARM_INDEX)\n             name = DECL_NAME (TEMPLATE_PARM_DECL (pack));\n+\t  else if (TREE_CODE (pack) == CALL_EXPR)\n+\t    name = DECL_NAME (CALL_EXPR_FN (pack));\n           else\n             name = DECL_NAME (pack);\n \n@@ -11286,14 +11389,22 @@ tsubst_pack_expansion (tree t, tree args, tsubst_flags_t complain,\n \n       if (TREE_CODE (parm_pack) == BASES)\n        {\n+\t gcc_assert (parm_pack == pattern);\n          if (BASES_DIRECT (parm_pack))\n            return calculate_direct_bases (tsubst_expr (BASES_TYPE (parm_pack),\n                                                         args, complain, in_decl, false));\n          else\n            return calculate_bases (tsubst_expr (BASES_TYPE (parm_pack),\n                                                  args, complain, in_decl, false));\n        }\n-      if (TREE_CODE (parm_pack) == PARM_DECL)\n+      else if (builtin_pack_call_p (parm_pack))\n+\t{\n+\t  /* ??? Support use in other patterns.  */\n+\t  gcc_assert (parm_pack == pattern);\n+\t  return expand_builtin_pack_call (parm_pack, args,\n+\t\t\t\t\t   complain, in_decl);\n+\t}\n+      else if (TREE_CODE (parm_pack) == PARM_DECL)\n \t{\n \t  /* We know we have correct local_specializations if this\n \t     expansion is at function scope, or if we're dealing with a\n@@ -26007,13 +26118,31 @@ init_constraint_processing (void)\n   subsumption_table = hash_table<subsumption_hasher>::create_ggc(37);\n }\n \n+/* __integer_pack(N) in a pack expansion expands to a sequence of numbers from\n+   0..N-1.  */\n+\n+void\n+declare_integer_pack (void)\n+{\n+  tree ipfn = push_library_fn (get_identifier (\"__integer_pack\"),\n+\t\t\t       build_function_type_list (integer_type_node,\n+\t\t\t\t\t\t\t integer_type_node,\n+\t\t\t\t\t\t\t NULL_TREE),\n+\t\t\t       NULL_TREE, ECF_CONST);\n+  DECL_DECLARED_CONSTEXPR_P (ipfn) = true;\n+  DECL_BUILT_IN_CLASS (ipfn) = BUILT_IN_FRONTEND;\n+}\n+\n /* Set up the hash tables for template instantiations.  */\n \n void\n init_template_processing (void)\n {\n   decl_specializations = hash_table<spec_hasher>::create_ggc (37);\n   type_specializations = hash_table<spec_hasher>::create_ggc (37);\n+\n+  if (cxx_dialect >= cxx11)\n+    declare_integer_pack ();\n }\n \n /* Print stats about the template hash tables for -fstats.  */"}, {"sha": "6cc95a8f7e92355dc864e2e0cead5be5e7ce2e41", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0c1ade45a7488e97c8d6c3aababec5c9d04f609/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0c1ade45a7488e97c8d6c3aababec5c9d04f609/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=f0c1ade45a7488e97c8d6c3aababec5c9d04f609", "patch": "@@ -22645,6 +22645,12 @@ true, else it is false.\n The underlying type of @code{type}.  Requires: @code{type} shall be\n an enumeration type ([dcl.enum]).\n \n+@item __integer_pack (length)\n+When used as the pattern of a pack expansion within a template\n+definition, expands to a template argument pack containing integers\n+from @code{0} to @code{length-1}.  This is provided for efficient\n+implementation of @code{std::make_integer_sequence}.\n+\n @end table\n \n "}, {"sha": "cc54f50e74ae45adacbb526a38f8d6846a1cc738", "filename": "gcc/testsuite/g++.dg/ext/integer-pack1.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0c1ade45a7488e97c8d6c3aababec5c9d04f609/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Finteger-pack1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0c1ade45a7488e97c8d6c3aababec5c9d04f609/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Finteger-pack1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Finteger-pack1.C?ref=f0c1ade45a7488e97c8d6c3aababec5c9d04f609", "patch": "@@ -0,0 +1,22 @@\n+// { dg-do compile { target c++11 } }\n+\n+template <int... I> struct A { };\n+\n+template <int N>\n+using TS = A<__integer_pack(N)...>;\n+\n+TS<4> t = 1;\t\t\t// { dg-error \"A<0, 1, 2, 3>\" }\n+\n+template <int N>\n+using TS2 = A<__integer_pack(N)...>; // { dg-error \"argument\" }\n+\n+TS2<-1> t2;\n+\n+template <int N>\n+using TS2 = A<__integer_pack(N)>; // { dg-error \"not expanded\" }\n+\n+template <int N>\n+using TS3 = A<__integer_pack>; // { dg-error \"\" }\n+\n+int i = __integer_pack(2);\t// { dg-error \"__integer_pack\" }\n+int j = __integer_pack(2)...;\t// { dg-error \"__integer_pack\" }"}, {"sha": "370dbebfa10d82d09e1f2adcd964199b83b530e2", "filename": "gcc/testsuite/g++.dg/ext/integer-pack2.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0c1ade45a7488e97c8d6c3aababec5c9d04f609/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Finteger-pack2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0c1ade45a7488e97c8d6c3aababec5c9d04f609/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Finteger-pack2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Finteger-pack2.C?ref=f0c1ade45a7488e97c8d6c3aababec5c9d04f609", "patch": "@@ -0,0 +1,12 @@\n+// { dg-do compile { target c++11 } }\n+// { dg-options -w }\n+\n+#include <limits.h>\n+\n+template<typename T, T...> struct integer_sequence { };\n+template<typename T, T num>\n+ using make_integer_sequence = integer_sequence<T, __integer_pack(num)...>; // { dg-error \"argument\" }\n+\n+make_integer_sequence<int, -9223372036854775808> w;\n+make_integer_sequence<int, INT_MAX> x;\t   // { dg-message \"required\" }\n+make_integer_sequence<int, -2147483650> y; // { dg-message \"required\" }"}]}