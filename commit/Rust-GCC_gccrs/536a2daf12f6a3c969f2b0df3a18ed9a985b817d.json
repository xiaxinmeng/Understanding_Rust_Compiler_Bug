{"sha": "536a2daf12f6a3c969f2b0df3a18ed9a985b817d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTM2YTJkYWYxMmY2YTNjOTY5ZjJiMGRmM2ExOGVkOWE5ODViODE3ZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-08-04T10:45:30Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-08-04T10:45:30Z"}, "message": "[multiple changes]\n\n2014-08-04  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_util.adb, sem_case.adb: Minor reformatting.\n\n2014-08-04  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch9.adb (Extract_Entry): If the synchronized object is a\n\tlimited view, replace with non-limited view, which is available\n\tat the point of an entry call.\n\n2014-08-04  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch6.adb (Expand_Call): If the call is to a function in\n\ta run-time unit that is marked Inline_Always, we must suppress\n\tdebugging information on it, so that the code that is eventually\n\tinlined will not affect debugging of the user program.\n\nFrom-SVN: r213567", "tree": {"sha": "fd02e51d2b95e785647bf4e310b70d489f90bd4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd02e51d2b95e785647bf4e310b70d489f90bd4a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/536a2daf12f6a3c969f2b0df3a18ed9a985b817d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/536a2daf12f6a3c969f2b0df3a18ed9a985b817d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/536a2daf12f6a3c969f2b0df3a18ed9a985b817d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/536a2daf12f6a3c969f2b0df3a18ed9a985b817d/comments", "author": null, "committer": null, "parents": [{"sha": "2e1295ade52283a56984222331d603c85ae6d19a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e1295ade52283a56984222331d603c85ae6d19a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e1295ade52283a56984222331d603c85ae6d19a"}], "stats": {"total": 65, "additions": 53, "deletions": 12}, "files": [{"sha": "0d70e1b3183fc5f6cb25988267e80d16a14e686c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/536a2daf12f6a3c969f2b0df3a18ed9a985b817d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/536a2daf12f6a3c969f2b0df3a18ed9a985b817d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=536a2daf12f6a3c969f2b0df3a18ed9a985b817d", "patch": "@@ -1,3 +1,20 @@\n+2014-08-04  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_util.adb, sem_case.adb: Minor reformatting.\n+\n+2014-08-04  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch9.adb (Extract_Entry): If the synchronized object is a\n+\tlimited view, replace with non-limited view, which is available\n+\tat the point of an entry call.\n+\n+2014-08-04  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch6.adb (Expand_Call): If the call is to a function in\n+\ta run-time unit that is marked Inline_Always, we must suppress\n+\tdebugging information on it, so that the code that is eventually\n+\tinlined will not affect debugging of the user program.\n+\n 2014-08-04  Robert Dewar  <dewar@adacore.com>\n \n \t* inline.adb, einfo.ads, s-tassta.adb, s-tarest.adb: Minor comment"}, {"sha": "7f111901b0516be0c278b6eccd2f64b7ce26e88f", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/536a2daf12f6a3c969f2b0df3a18ed9a985b817d/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/536a2daf12f6a3c969f2b0df3a18ed9a985b817d/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=536a2daf12f6a3c969f2b0df3a18ed9a985b817d", "patch": "@@ -3929,6 +3929,18 @@ package body Exp_Ch6 is\n             Add_Inlined_Body (Subp);\n             Register_Backend_Call (Call_Node);\n \n+            --  If the call is to a function in a run-time unit that is marked\n+            --  Inline_Always, we must suppress debugging information on it,\n+            --  so that the code that is eventually inlined will not affect\n+            --  debugging of the user program.\n+\n+            if Is_Predefined_File_Name\n+                 (Unit_File_Name (Get_Source_Unit (Sloc (Subp))))\n+              and then In_Extended_Main_Source_Unit (N)\n+            then\n+               Set_Needs_Debug_Info (Subp, False);\n+            end if;\n+\n          --  Frontend expansion of supported functions returning unconstrained\n          --  types and simple renamings inlined by the frontend (see Freeze.\n          --  Build_Renamed_Entity)."}, {"sha": "32b3679c7db0e03ab8a23ff5c032578787a41f98", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/536a2daf12f6a3c969f2b0df3a18ed9a985b817d/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/536a2daf12f6a3c969f2b0df3a18ed9a985b817d/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=536a2daf12f6a3c969f2b0df3a18ed9a985b817d", "patch": "@@ -12819,6 +12819,14 @@ package body Exp_Ch9 is\n          Ename   := Selector_Name (Prefix (Nam));\n          Index   := First (Expressions (Nam));\n       end if;\n+\n+      --  Through indirection, the type may actually be a limited view of a\n+      --  concurrent type. When compiling a call, the non-limited view of the\n+      --  type is visible.\n+\n+      if From_Limited_With (Etype (Concval)) then\n+         Set_Etype (Concval, Non_Limited_View (Etype (Concval)));\n+      end if;\n    end Extract_Entry;\n \n    -------------------"}, {"sha": "005bd95db0aababb3d084bd3cc89d6e24b662ce0", "filename": "gcc/ada/sem_case.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/536a2daf12f6a3c969f2b0df3a18ed9a985b817d/gcc%2Fada%2Fsem_case.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/536a2daf12f6a3c969f2b0df3a18ed9a985b817d/gcc%2Fada%2Fsem_case.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_case.adb?ref=536a2daf12f6a3c969f2b0df3a18ed9a985b817d", "patch": "@@ -113,7 +113,6 @@ package body Sem_Case is\n       Subtyp         : Entity_Id;\n       Others_Present : Boolean;\n       Case_Node      : Node_Id)\n-\n    is\n       Predicate_Error : Boolean;\n       --  Flag to prevent cascaded errors when a static predicate is known to\n@@ -616,6 +615,10 @@ package body Sem_Case is\n          Missing_Choice (Value1, Expr_Value (Value2));\n       end Missing_Choice;\n \n+      --------------------\n+      -- Missing_Choice --\n+      --------------------\n+\n       procedure Missing_Choice (Value1 : Uint; Value2 : Uint) is\n          Msg_Sloc : constant Source_Ptr := Sloc (Case_Node);\n \n@@ -781,6 +784,7 @@ package body Sem_Case is\n \n             if Error then\n                Predicate_Error := True;\n+\n                if not All_Errors_Mode then\n                   return;\n                end if;"}, {"sha": "dd6206dc265b4a09e6f9e966ec2e4e78077f8f01", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/536a2daf12f6a3c969f2b0df3a18ed9a985b817d/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/536a2daf12f6a3c969f2b0df3a18ed9a985b817d/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=536a2daf12f6a3c969f2b0df3a18ed9a985b817d", "patch": "@@ -73,15 +73,15 @@ package body Sem_Util is\n    -- Global_Variables for New_Copy_Tree --\n    ----------------------------------------\n \n-   --  These global variables are used by New_Copy_Tree. See description\n-   --  of the body of this subprogram for details. Global variables can be\n-   --  safely used by New_Copy_Tree, since there is no case of a recursive\n-   --  call from the processing inside New_Copy_Tree.\n+   --  These global variables are used by New_Copy_Tree. See description of the\n+   --  body of this subprogram for details. Global variables can be safely used\n+   --  by New_Copy_Tree, since there is no case of a recursive call from the\n+   --  processing inside New_Copy_Tree.\n \n    NCT_Hash_Threshold : constant := 20;\n-   --  If there are more than this number of pairs of entries in the\n-   --  map, then Hash_Tables_Used will be set, and the hash tables will\n-   --  be initialized and used for the searches.\n+   --  If there are more than this number of pairs of entries in the map, then\n+   --  Hash_Tables_Used will be set, and the hash tables will be initialized\n+   --  and used for the searches.\n \n    NCT_Hash_Tables_Used : Boolean := False;\n    --  Set to True if hash tables are in use\n@@ -90,10 +90,10 @@ package body Sem_Util is\n    --  Count entries in table to see if threshold is reached\n \n    NCT_Hash_Table_Setup : Boolean := False;\n-   --  Set to True if hash table contains data. We set this True if we\n-   --  setup the hash table with data, and leave it set permanently\n-   --  from then on, this is a signal that second and subsequent users\n-   --  of the hash table must clear the old entries before reuse.\n+   --  Set to True if hash table contains data. We set this True if we setup\n+   --  the hash table with data, and leave it set permanently from then on,\n+   --  this is a signal that second and subsequent users of the hash table\n+   --  must clear the old entries before reuse.\n \n    subtype NCT_Header_Num is Int range 0 .. 511;\n    --  Defines range of headers in hash tables (512 headers)"}]}