{"sha": "61717a4593d0c710b6fed946e8ce9728c83ed369", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjE3MTdhNDU5M2QwYzcxMGI2ZmVkOTQ2ZThjZTk3MjhjODNlZDM2OQ==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2015-08-18T20:07:57Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2015-08-18T20:07:57Z"}, "message": "re PR middle-end/36757 (__builtin_signbit should be type-generic)\n\n\tPR middle-end/36757\n\n\t* builtins.c (expand_builtin_signbit): Add asserts to make sure\n\twe can expand BUILT_IN_SIGNBIT inline.\n\t* builtins.def (BUILT_IN_SIGNBIT): Make type-generic.\n\t* doc/extend.texi: Document the type-generic __builtin_signbit.\n\n\t* c-common.c (check_builtin_function_arguments): Add check\n\tfor BUILT_IN_SIGNBIT argument.\n\n\t* gcc.dg/builtins-error.c: Add checks for __builtin_signbit.\n\t* gcc.dg/tg-tests.h: Add checks for __builtin_signbit.\n\nFrom-SVN: r226990", "tree": {"sha": "e35d243d6dcbdc7bf2a9787803bcacdfa3715f55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e35d243d6dcbdc7bf2a9787803bcacdfa3715f55"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61717a4593d0c710b6fed946e8ce9728c83ed369", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61717a4593d0c710b6fed946e8ce9728c83ed369", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61717a4593d0c710b6fed946e8ce9728c83ed369", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61717a4593d0c710b6fed946e8ce9728c83ed369/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1c045caab2c1b31ce7b8e9c28ccd9f8106c4e58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1c045caab2c1b31ce7b8e9c28ccd9f8106c4e58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1c045caab2c1b31ce7b8e9c28ccd9f8106c4e58"}], "stats": {"total": 68, "additions": 53, "deletions": 15}, "files": [{"sha": "f210fd685432c06f8591063bcf4c71d23386a5b4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61717a4593d0c710b6fed946e8ce9728c83ed369/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61717a4593d0c710b6fed946e8ce9728c83ed369/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=61717a4593d0c710b6fed946e8ce9728c83ed369", "patch": "@@ -1,3 +1,11 @@\n+2015-08-18  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR middle-end/36757\n+\t* builtins.c (expand_builtin_signbit): Add asserts to make sure\n+\twe can expand BUILT_IN_SIGNBIT inline.\n+\t* builtins.def (BUILT_IN_SIGNBIT): Make type-generic.\n+\t* doc/extend.texi: Document the type-generic __builtin_signbit.\n+\n 2015-08-18  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR rtl-optimization/67218"}, {"sha": "31969ca3e534cebc745f01689f613011dea0eadf", "filename": "gcc/builtins.c", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61717a4593d0c710b6fed946e8ce9728c83ed369/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61717a4593d0c710b6fed946e8ce9728c83ed369/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=61717a4593d0c710b6fed946e8ce9728c83ed369", "patch": "@@ -4953,11 +4953,9 @@ expand_builtin_adjust_trampoline (tree exp)\n    function.  The function first checks whether the back end provides\n    an insn to implement signbit for the respective mode.  If not, it\n    checks whether the floating point format of the value is such that\n-   the sign bit can be extracted.  If that is not the case, the\n-   function returns NULL_RTX to indicate that a normal call should be\n-   emitted rather than expanding the function in-line.  EXP is the\n-   expression that is a call to the builtin function; if convenient,\n-   the result should be placed in TARGET.  */\n+   the sign bit can be extracted.  If that is not the case, error out.\n+   EXP is the expression that is a call to the builtin function; if\n+   convenient, the result should be placed in TARGET.  */\n static rtx\n expand_builtin_signbit (tree exp, rtx target)\n {\n@@ -5000,8 +4998,7 @@ expand_builtin_signbit (tree exp, rtx target)\n   if (bitpos < 0)\n   {\n     /* But we can't do this if the format supports signed zero.  */\n-    if (fmt->has_signed_zero && HONOR_SIGNED_ZEROS (fmode))\n-      return NULL_RTX;\n+    gcc_assert (!fmt->has_signed_zero || !HONOR_SIGNED_ZEROS (fmode));\n \n     arg = fold_build2_loc (loc, LT_EXPR, TREE_TYPE (exp), arg,\n \t\t       build_real (TREE_TYPE (arg), dconst0));\n@@ -5011,8 +5008,7 @@ expand_builtin_signbit (tree exp, rtx target)\n   if (GET_MODE_SIZE (fmode) <= UNITS_PER_WORD)\n     {\n       imode = int_mode_for_mode (fmode);\n-      if (imode == BLKmode)\n-\treturn NULL_RTX;\n+      gcc_assert (imode != BLKmode);\n       temp = gen_lowpart (imode, temp);\n     }\n   else"}, {"sha": "f7ac4a834cc40906cba3c6d9edf23ebef743b9e5", "filename": "gcc/builtins.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61717a4593d0c710b6fed946e8ce9728c83ed369/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61717a4593d0c710b6fed946e8ce9728c83ed369/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=61717a4593d0c710b6fed946e8ce9728c83ed369", "patch": "@@ -489,7 +489,7 @@ DEF_C99_BUILTIN        (BUILT_IN_SCALBLNL, \"scalblnl\", BT_FN_LONGDOUBLE_LONGDOUB\n DEF_C99_BUILTIN        (BUILT_IN_SCALBN, \"scalbn\", BT_FN_DOUBLE_DOUBLE_INT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_SCALBNF, \"scalbnf\", BT_FN_FLOAT_FLOAT_INT, ATTR_MATHFN_FPROUNDING_ERRNO)\n DEF_C99_BUILTIN        (BUILT_IN_SCALBNL, \"scalbnl\", BT_FN_LONGDOUBLE_LONGDOUBLE_INT, ATTR_MATHFN_FPROUNDING_ERRNO)\n-DEF_EXT_LIB_BUILTIN    (BUILT_IN_SIGNBIT, \"signbit\", BT_FN_INT_DOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_SIGNBIT, \"signbit\", BT_FN_INT_VAR, ATTR_CONST_NOTHROW_TYPEGENERIC_LEAF)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_SIGNBITF, \"signbitf\", BT_FN_INT_FLOAT, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_SIGNBITL, \"signbitl\", BT_FN_INT_LONGDOUBLE, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_SIGNBITD32, \"signbitd32\", BT_FN_INT_DFLOAT32, ATTR_CONST_NOTHROW_LEAF_LIST)"}, {"sha": "7a25c399e22ed988029e87134ede96b8a03eded0", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61717a4593d0c710b6fed946e8ce9728c83ed369/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61717a4593d0c710b6fed946e8ce9728c83ed369/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=61717a4593d0c710b6fed946e8ce9728c83ed369", "patch": "@@ -1,3 +1,9 @@\n+2015-08-18  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR middle-end/36757\n+\t* c-common.c (check_builtin_function_arguments): Add check\n+\tfor BUILT_IN_SIGNBIT argument.\n+\n 2015-08-18  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/67160"}, {"sha": "f081dadd6b6ceaa78ac90795e8cdafed9b10eb99", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61717a4593d0c710b6fed946e8ce9728c83ed369/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61717a4593d0c710b6fed946e8ce9728c83ed369/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=61717a4593d0c710b6fed946e8ce9728c83ed369", "patch": "@@ -10151,6 +10151,7 @@ check_builtin_function_arguments (tree fndecl, int nargs, tree *args)\n     case BUILT_IN_ISINF_SIGN:\n     case BUILT_IN_ISNAN:\n     case BUILT_IN_ISNORMAL:\n+    case BUILT_IN_SIGNBIT:\n       if (builtin_function_validate_nargs (fndecl, nargs, 1))\n \t{\n \t  if (TREE_CODE (TREE_TYPE (args[0])) != REAL_TYPE)"}, {"sha": "dba8b4382b257172273175225cde3df441f5bcb3", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61717a4593d0c710b6fed946e8ce9728c83ed369/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61717a4593d0c710b6fed946e8ce9728c83ed369/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=61717a4593d0c710b6fed946e8ce9728c83ed369", "patch": "@@ -10448,7 +10448,7 @@ the same names as the standard macros ( @code{isgreater},\n prefixed.  We intend for a library implementor to be able to simply\n @code{#define} each standard macro to its built-in equivalent.\n In the same fashion, GCC provides @code{fpclassify}, @code{isfinite},\n-@code{isinf_sign} and @code{isnormal} built-ins used with\n+@code{isinf_sign}, @code{isnormal} and @code{signbit} built-ins used with\n @code{__builtin_} prefixed.  The @code{isinf} and @code{isnan}\n built-in functions appear both with and without the @code{__builtin_} prefix.\n "}, {"sha": "9ca2ce5bd9c82599bf19a7ca89c9e65b2007333a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61717a4593d0c710b6fed946e8ce9728c83ed369/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61717a4593d0c710b6fed946e8ce9728c83ed369/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=61717a4593d0c710b6fed946e8ce9728c83ed369", "patch": "@@ -1,3 +1,9 @@\n+2015-08-18  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR middle-end/36757\n+\t* gcc.dg/builtins-error.c: Add checks for __builtin_signbit.\n+\t* gcc.dg/tg-tests.h: Add checks for __builtin_signbit.\n+\n 2015-08-18  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR rtl-optimization/67218"}, {"sha": "9ddf1b1e2ae13ebcb7d4d8cb4d4ff1104c32a61b", "filename": "gcc/testsuite/gcc.dg/builtins-error.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61717a4593d0c710b6fed946e8ce9728c83ed369/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-error.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61717a4593d0c710b6fed946e8ce9728c83ed369/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-error.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-error.c?ref=61717a4593d0c710b6fed946e8ce9728c83ed369", "patch": "@@ -16,6 +16,7 @@ int test1(struct X x)\n   if (x.x == 10) return __builtin_islessequal(x, x); /* { dg-error \"non-floating-point arguments\" } */\n   if (x.x == 11) return __builtin_islessgreater(x, x); /* { dg-error \"non-floating-point arguments\" } */\n   if (x.x == 12) return __builtin_isunordered(x, x); /* { dg-error \"non-floating-point arguments\" } */\n+  if (x.x == 13) return __builtin_signbit(x); /* { dg-error \"non-floating-point argument\" } */\n \n   return 0;\n }\n@@ -34,6 +35,7 @@ int test2(double x)\n   if (x == 10) return __builtin_islessequal(x); /* { dg-error \"not enough arguments\" } */\n   if (x == 11) return __builtin_islessgreater(x); /* { dg-error \"not enough arguments\" } */\n   if (x == 12) return __builtin_isunordered(x); /* { dg-error \"not enough arguments\" } */\n+  if (x == 13) return __builtin_signbit(); /* { dg-error \"not enough arguments\" } */\n   return 0;\n }\n \n@@ -51,6 +53,7 @@ int test3(double x)\n   if (x == 10) return __builtin_islessequal(x, x, x); /* { dg-error \"too many arguments\" } */\n   if (x == 11) return __builtin_islessgreater(x, x, x); /* { dg-error \"too many arguments\" } */\n   if (x == 12) return __builtin_isunordered(x, x, x); /* { dg-error \"too many arguments\" } */\n+  if (x == 13) return __builtin_signbit(x, x); /* { dg-error \"too many arguments\" } */\n   return 0;\n }\n "}, {"sha": "a645cc4f4526b4fbc1310359bed5cc57fc5f9a80", "filename": "gcc/testsuite/gcc.dg/tg-tests.h", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61717a4593d0c710b6fed946e8ce9728c83ed369/gcc%2Ftestsuite%2Fgcc.dg%2Ftg-tests.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61717a4593d0c710b6fed946e8ce9728c83ed369/gcc%2Ftestsuite%2Fgcc.dg%2Ftg-tests.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftg-tests.h?ref=61717a4593d0c710b6fed946e8ce9728c83ed369", "patch": "@@ -11,7 +11,7 @@ void __attribute__ ((__noinline__))\n foo_1 (float f, double d, long double ld,\n        int res_unord, int res_isnan, int res_isinf,\n        int res_isinf_sign, int res_isfin, int res_isnorm,\n-       int classification)\n+       int res_signbit, int classification)\n {\n   if (__builtin_isunordered (f, 0) != res_unord)\n     __builtin_abort ();\n@@ -80,6 +80,23 @@ foo_1 (float f, double d, long double ld,\n   if (__builtin_finitel (ld) != res_isfin)\n     __builtin_abort ();\n \n+  /* Sign bit of zeros and nans is not preserved in unsafe math mode.  */\n+#ifdef UNSAFE\n+  if (!res_isnan && d != 0)\n+#endif\n+    {\n+      if ((__builtin_signbit (f) ? 1 : 0) != res_signbit)\n+\t__builtin_abort ();\n+      if ((__builtin_signbit (d) ? 1 : 0) != res_signbit)\n+\t__builtin_abort ();\n+      if ((__builtin_signbit (ld) ? 1 : 0) != res_signbit)\n+\t__builtin_abort ();\n+      if ((__builtin_signbitf (f) ? 1 : 0) != res_signbit)\n+\t__builtin_abort ();\n+      if ((__builtin_signbitl (ld) ? 1 : 0) != res_signbit)\n+\t__builtin_abort ();\n+    }\n+\n   /* Subnormals can abruptly underflow to zero in unsafe math\n      mode, so bypass testing these numbers if necessary.  */\n #ifdef UNSAFE\n@@ -100,9 +117,10 @@ foo (float f, double d, long double ld,\n      int res_unord, int res_isnan, int res_isinf,\n      int res_isfin, int res_isnorm, int classification)\n {\n-  foo_1 (f, d, ld, res_unord, res_isnan, res_isinf, res_isinf, res_isfin, res_isnorm, classification);\n-  /* Try all the values negated as well.  */\n-  foo_1 (-f, -d, -ld, res_unord, res_isnan, res_isinf, -res_isinf, res_isfin, res_isnorm, classification);\n+  foo_1 (f, d, ld, res_unord, res_isnan, res_isinf, res_isinf, res_isfin, res_isnorm, 0, classification);\n+  /* Try all the values negated as well.  All will have the sign bit set,\n+     except for the nan.  */\n+  foo_1 (-f, -d, -ld, res_unord, res_isnan, res_isinf, -res_isinf, res_isfin, res_isnorm, 1, classification);\n }\n \n int __attribute__ ((__noinline__))"}]}