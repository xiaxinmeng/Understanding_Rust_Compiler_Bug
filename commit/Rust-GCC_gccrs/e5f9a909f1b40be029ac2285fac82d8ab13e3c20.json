{"sha": "e5f9a909f1b40be029ac2285fac82d8ab13e3c20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTVmOWE5MDlmMWI0MGJlMDI5YWMyMjg1ZmFjODJkOGFiMTNlM2MyMA==", "commit": {"author": {"name": "James E Wilson", "email": "wilson@specifixinc.com", "date": "2005-10-31T23:24:36Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2005-10-31T23:24:36Z"}, "message": "Rewrite fix for PR 17356, fix for enable checking ada build failure.\n\ncfgrtl.c (purge_dead_edges): Undo last change.  In EDGE_EH code,\nadd check for CALL_INSN if EDGE_ABRNOMAL_CALL true.\n\nFrom-SVN: r106297", "tree": {"sha": "3e1f58b0184d865dc21af1f539e7f543cfdd8b34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e1f58b0184d865dc21af1f539e7f543cfdd8b34"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e5f9a909f1b40be029ac2285fac82d8ab13e3c20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5f9a909f1b40be029ac2285fac82d8ab13e3c20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5f9a909f1b40be029ac2285fac82d8ab13e3c20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5f9a909f1b40be029ac2285fac82d8ab13e3c20/comments", "author": null, "committer": null, "parents": [{"sha": "d63f0fe58ad1702b1efbf8bafa83266755c889aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d63f0fe58ad1702b1efbf8bafa83266755c889aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d63f0fe58ad1702b1efbf8bafa83266755c889aa"}], "stats": {"total": 28, "additions": 18, "deletions": 10}, "files": [{"sha": "1fb10c7005115f2a1300456ab0608eacf494f8a1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5f9a909f1b40be029ac2285fac82d8ab13e3c20/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5f9a909f1b40be029ac2285fac82d8ab13e3c20/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e5f9a909f1b40be029ac2285fac82d8ab13e3c20", "patch": "@@ -1,3 +1,9 @@\n+2005-10-25  James E. Wilson  <wilson@specifix.com>\n+\n+\tPR rtl-optimization/17356\n+\t*  cfgrtl.c (purge_dead_edges): Undo last change.  In EDGE_EH code,\n+\tadd check for CALL_INSN if EDGE_ABRNOMAL_CALL true.\n+\n 2005-10-31  Jan Hubicka  <jh@suse.cz>\n \n \tPR middle-end/24093"}, {"sha": "d06caba73bd71c53ef111bd016abf873e8243cbb", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5f9a909f1b40be029ac2285fac82d8ab13e3c20/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5f9a909f1b40be029ac2285fac82d8ab13e3c20/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=e5f9a909f1b40be029ac2285fac82d8ab13e3c20", "patch": "@@ -2294,23 +2294,25 @@ purge_dead_edges (basic_block bb)\n   /* Cleanup abnormal edges caused by exceptions or non-local gotos.  */\n   for (ei = ei_start (bb->succs); (e = ei_safe_edge (ei)); )\n     {\n-      /* We must check for the most restrictive condition first.  Since\n-\t an abnormal call edge is always an EH edge, but an EH edge is not\n-\t always an abnormal call edge, we must check for an abnormal call\n-\t edge first.  */\n-      if (e->flags & EDGE_ABNORMAL_CALL)\n+      /* There are three types of edges we need to handle correctly here: EH\n+\t edges, abnormal call EH edges, and abnormal call non-EH edges.  The\n+\t latter can appear when nonlocal gotos are used.  */\n+      if (e->flags & EDGE_EH)\n \t{\n-\t  if (CALL_P (BB_END (bb))\n-\t      && (! (note = find_reg_note (insn, REG_EH_REGION, NULL))\n-\t\t  || INTVAL (XEXP (note, 0)) >= 0))\n+\t  if (can_throw_internal (BB_END (bb))\n+\t      /* If this is a call edge, verify that this is a call insn.  */\n+\t      && (! (e->flags & EDGE_ABNORMAL_CALL)\n+\t\t  || CALL_P (BB_END (bb))))\n \t    {\n \t      ei_next (&ei);\n \t      continue;\n \t    }\n \t}\n-      else if (e->flags & EDGE_EH)\n+      else if (e->flags & EDGE_ABNORMAL_CALL)\n \t{\n-\t  if (can_throw_internal (BB_END (bb)))\n+\t  if (CALL_P (BB_END (bb))\n+\t      && (! (note = find_reg_note (insn, REG_EH_REGION, NULL))\n+\t\t  || INTVAL (XEXP (note, 0)) >= 0))\n \t    {\n \t      ei_next (&ei);\n \t      continue;"}]}