{"sha": "93b8cfce27abe795f56ab467570f66682e9688ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTNiOGNmY2UyN2FiZTc5NWY1NmFiNDY3NTcwZjY2NjgyZTk2ODhjYQ==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-02-15T15:59:36Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-02-16T02:16:00Z"}, "message": "libstdc++: Move code after an early exit constexpr if to under an else branch\n\nThis avoids instantiating dead code when the true branch of the constexpr if is\ntaken.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/ranges_algo.h (__lexicographical_compare_fn::operator()):\n\tMove code after an early exit constexpr if to under an else branch.\n\t* include/bits/ranges_algobase.h (__equal_fn::operator()): Likewise.", "tree": {"sha": "e561e2a497da923af4b95c45884bbe585edc2caa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e561e2a497da923af4b95c45884bbe585edc2caa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93b8cfce27abe795f56ab467570f66682e9688ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93b8cfce27abe795f56ab467570f66682e9688ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93b8cfce27abe795f56ab467570f66682e9688ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93b8cfce27abe795f56ab467570f66682e9688ca/comments", "author": null, "committer": null, "parents": [{"sha": "e19c49e0dab1345684813a7e7e1e80fc21c38cf9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e19c49e0dab1345684813a7e7e1e80fc21c38cf9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e19c49e0dab1345684813a7e7e1e80fc21c38cf9"}], "stats": {"total": 116, "additions": 61, "deletions": 55}, "files": [{"sha": "25fa9ba6098ead05d998675b6699276862f1ad64", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93b8cfce27abe795f56ab467570f66682e9688ca/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93b8cfce27abe795f56ab467570f66682e9688ca/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=93b8cfce27abe795f56ab467570f66682e9688ca", "patch": "@@ -1,3 +1,9 @@\n+2020-02-16  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/bits/ranges_algo.h (__lexicographical_compare_fn::operator()):\n+\tMove code after an early exit constexpr if to under an else branch.\n+\t* include/bits/ranges_algobase.h (__equal_fn::operator()): Likewise.\n+\n 2020-02-15  Patrick Palka  <ppalka@redhat.com>\n \n \t* include/bits/ranges_algo.h: Adjust whitespace and formatting."}, {"sha": "ff1b40f6ace1c5d5547a31ea1bb4c2fa38cbeecb", "filename": "libstdc++-v3/include/bits/ranges_algo.h", "status": "modified", "additions": 53, "deletions": 50, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93b8cfce27abe795f56ab467570f66682e9688ca/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93b8cfce27abe795f56ab467570f66682e9688ca/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algo.h?ref=93b8cfce27abe795f56ab467570f66682e9688ca", "patch": "@@ -3318,65 +3318,68 @@ namespace ranges\n \t\t\t std::__niter_base(std::move(__last2)),\n \t\t\t std::move(__comp),\n \t\t\t std::move(__proj1), std::move(__proj2));\n-\n-\tconstexpr bool __sized_iters\n-\t  = (sized_sentinel_for<_Sent1, _Iter1>\n-\t     && sized_sentinel_for<_Sent2, _Iter2>);\n-\tif constexpr (__sized_iters)\n+\telse\n \t  {\n-\t    auto __d1 = ranges::distance(__first1, __last1);\n-\t    auto __d2 = ranges::distance(__first2, __last2);\n-\n-\t    using _ValueType1 = iter_value_t<_Iter1>;\n-\t    using _ValueType2 = iter_value_t<_Iter2>;\n-\t    constexpr bool __use_memcmp\n-\t      = ((is_integral_v<_ValueType1> || is_pointer_v<_ValueType1>)\n-\t\t && is_same_v<_ValueType1, _ValueType2>\n-\t\t && is_pointer_v<_Iter1>\n-\t\t && is_pointer_v<_Iter2>\n-\t\t && (is_same_v<_Comp, ranges::less>\n-\t\t     || is_same_v<_Comp, ranges::greater>)\n-\t\t && is_same_v<_Proj1, identity>\n-\t\t && is_same_v<_Proj2, identity>);\n-\t    if constexpr (__use_memcmp)\n+\t    constexpr bool __sized_iters\n+\t      = (sized_sentinel_for<_Sent1, _Iter1>\n+\t\t && sized_sentinel_for<_Sent2, _Iter2>);\n+\t    if constexpr (__sized_iters)\n \t      {\n-\t\tif (const auto __len = std::min(__d1, __d2))\n+\t\tauto __d1 = ranges::distance(__first1, __last1);\n+\t\tauto __d2 = ranges::distance(__first2, __last2);\n+\n+\t\tusing _ValueType1 = iter_value_t<_Iter1>;\n+\t\tusing _ValueType2 = iter_value_t<_Iter2>;\n+\t\tconstexpr bool __use_memcmp\n+\t\t  = ((is_integral_v<_ValueType1> || is_pointer_v<_ValueType1>)\n+\t\t     && is_same_v<_ValueType1, _ValueType2>\n+\t\t     && is_pointer_v<_Iter1>\n+\t\t     && is_pointer_v<_Iter2>\n+\t\t     && (is_same_v<_Comp, ranges::less>\n+\t\t\t || is_same_v<_Comp, ranges::greater>)\n+\t\t     && is_same_v<_Proj1, identity>\n+\t\t     && is_same_v<_Proj2, identity>);\n+\t\tif constexpr (__use_memcmp)\n \t\t  {\n-\t\t    const auto __c = std::__memcmp(__first1, __first2, __len);\n-\t\t    if constexpr (is_same_v<_Comp, ranges::less>)\n-\t\t      {\n-\t\t\tif (__c < 0)\n-\t\t\t  return true;\n-\t\t\tif (__c > 0)\n-\t\t\t  return false;\n-\t\t      }\n-\t\t    else if constexpr (is_same_v<_Comp, ranges::greater>)\n+\t\t    if (const auto __len = std::min(__d1, __d2))\n \t\t      {\n-\t\t\tif (__c > 0)\n-\t\t\t  return true;\n-\t\t\tif (__c < 0)\n-\t\t\t  return false;\n+\t\t\tconst auto __c\n+\t\t\t  = std::__memcmp(__first1, __first2, __len);\n+\t\t\tif constexpr (is_same_v<_Comp, ranges::less>)\n+\t\t\t  {\n+\t\t\t    if (__c < 0)\n+\t\t\t      return true;\n+\t\t\t    if (__c > 0)\n+\t\t\t      return false;\n+\t\t\t  }\n+\t\t\telse if constexpr (is_same_v<_Comp, ranges::greater>)\n+\t\t\t  {\n+\t\t\t    if (__c > 0)\n+\t\t\t      return true;\n+\t\t\t    if (__c < 0)\n+\t\t\t      return false;\n+\t\t\t  }\n+\t\t\telse\n+\t\t\t  __builtin_unreachable();\n \t\t      }\n-\t\t    else\n-\t\t      __builtin_unreachable();\n+\t\t    return (__last1 - __first1 < __last2 - __first2);\n \t\t  }\n-\t\treturn (__last1 - __first1 < __last2 - __first2);\n \t      }\n-\t  }\n \n-\tfor (; __first1 != __last1 && __first2 != __last2;\n-\t     ++__first1, (void) ++__first2)\n-\t  {\n-\t    if (std::__invoke(__comp,\n-\t\t\t      std::__invoke(__proj1, *__first1),\n-\t\t\t      std::__invoke(__proj2, *__first2)))\n-\t      return true;\n-\t    if (std::__invoke(__comp,\n-\t\t\t      std::__invoke(__proj2, *__first2),\n-\t\t\t      std::__invoke(__proj1, *__first1)))\n-\t      return false;\n+\t    for (; __first1 != __last1 && __first2 != __last2;\n+\t\t ++__first1, (void) ++__first2)\n+\t      {\n+\t\tif (std::__invoke(__comp,\n+\t\t\t\t  std::__invoke(__proj1, *__first1),\n+\t\t\t\t  std::__invoke(__proj2, *__first2)))\n+\t\t  return true;\n+\t\tif (std::__invoke(__comp,\n+\t\t\t\t  std::__invoke(__proj2, *__first2),\n+\t\t\t\t  std::__invoke(__proj1, *__first1)))\n+\t\t  return false;\n+\t      }\n+\t    return __first1 == __last1 && __first2 != __last2;\n \t  }\n-\treturn __first1 == __last1 && __first2 != __last2;\n       }\n \n     template<input_range _Range1, input_range _Range2,"}, {"sha": "cc24483b2d3ff7b173001b29d91ea4448cbee3b2", "filename": "libstdc++-v3/include/bits/ranges_algobase.h", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93b8cfce27abe795f56ab467570f66682e9688ca/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93b8cfce27abe795f56ab467570f66682e9688ca/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algobase.h?ref=93b8cfce27abe795f56ab467570f66682e9688ca", "patch": "@@ -93,11 +93,8 @@ namespace ranges\n \t\t\t std::__niter_base(std::move(__last2)),\n \t\t\t std::move(__pred),\n \t\t\t std::move(__proj1), std::move(__proj2));\n-\n-\tconstexpr bool __sized_iters\n-\t  = (sized_sentinel_for<_Sent1, _Iter1>\n-\t     && sized_sentinel_for<_Sent2, _Iter2>);\n-\tif constexpr (__sized_iters)\n+\telse if constexpr (sized_sentinel_for<_Sent1, _Iter1>\n+\t\t\t   && sized_sentinel_for<_Sent2, _Iter2>)\n \t  {\n \t    auto __d1 = ranges::distance(__first1, __last1);\n \t    auto __d2 = ranges::distance(__first2, __last2);"}]}