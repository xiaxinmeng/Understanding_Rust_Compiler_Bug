{"sha": "ede34dfcebbfaded870a505d122557f2eff8c01a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWRlMzRkZmNlYmJmYWRlZDg3MGE1MDVkMTIyNTU3ZjJlZmY4YzAxYQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2013-12-20T16:46:37Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2013-12-20T16:46:37Z"}, "message": "arm.c (arm_expand_prologue): In a nested APCS frame with arguments to push onto the stack and no varargs...\n\n\t* config/arm/arm.c (arm_expand_prologue): In a nested APCS frame with\n\targuments to push onto the stack and no varargs, save ip into the last\n\tstack slot if r3 isn't available on entry.\n\nFrom-SVN: r206154", "tree": {"sha": "dbe3ece26cf49880bb2f5bd76db55084b4c49e4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dbe3ece26cf49880bb2f5bd76db55084b4c49e4c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ede34dfcebbfaded870a505d122557f2eff8c01a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ede34dfcebbfaded870a505d122557f2eff8c01a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ede34dfcebbfaded870a505d122557f2eff8c01a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ede34dfcebbfaded870a505d122557f2eff8c01a/comments", "author": null, "committer": null, "parents": [{"sha": "abdd0cfa93ee92acb9498ec1a430b6d86137f7f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abdd0cfa93ee92acb9498ec1a430b6d86137f7f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abdd0cfa93ee92acb9498ec1a430b6d86137f7f4"}], "stats": {"total": 102, "additions": 82, "deletions": 20}, "files": [{"sha": "c7a8c254fb854dd4727bbe3901a2cd6e104b02f2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ede34dfcebbfaded870a505d122557f2eff8c01a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ede34dfcebbfaded870a505d122557f2eff8c01a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ede34dfcebbfaded870a505d122557f2eff8c01a", "patch": "@@ -1,3 +1,9 @@\n+2013-12-20  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* config/arm/arm.c (arm_expand_prologue): In a nested APCS frame with\n+\targuments to push onto the stack and no varargs, save ip into the last\n+\tstack slot if r3 isn't available on entry.\n+\n 2013-12-20  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/arm/neon.ml (crypto_intrinsics): Add vceq_64 and vtst_p64."}, {"sha": "706846e909f5aa70547c382947724e89900c635d", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 38, "deletions": 20, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ede34dfcebbfaded870a505d122557f2eff8c01a/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ede34dfcebbfaded870a505d122557f2eff8c01a/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=ede34dfcebbfaded870a505d122557f2eff8c01a", "patch": "@@ -18679,8 +18679,7 @@ arm_r3_live_at_start_p (void)\n   /* Just look at cfg info, which is still close enough to correct at this\n      point.  This gives false positives for broken functions that might use\n      uninitialized data that happens to be allocated in r3, but who cares?  */\n-  return REGNO_REG_SET_P (df_get_live_out (ENTRY_BLOCK_PTR_FOR_FN (cfun)),\n-\t\t\t  3);\n+  return REGNO_REG_SET_P (df_get_live_out (ENTRY_BLOCK_PTR_FOR_FN (cfun)), 3);\n }\n \n /* Compute the number of bytes used to store the static chain register on the\n@@ -20706,11 +20705,13 @@ arm_expand_prologue (void)\n \t     whilst the frame is being created.  We try the following\n \t     places in order:\n \n-\t       1. The last argument register r3.\n-\t       2. A slot on the stack above the frame.  (This only\n-\t          works if the function is not a varargs function).\n+\t       1. The last argument register r3 if it is available.\n+\t       2. A slot on the stack above the frame if there are no\n+\t\t  arguments to push onto the stack.\n \t       3. Register r3 again, after pushing the argument registers\n-\t          onto the stack.\n+\t          onto the stack, if this is a varargs function.\n+\t       4. The last slot on the stack created for the arguments to\n+\t\t  push, if this isn't a varargs function.\n \n \t     Note - we only need to tell the dwarf2 backend about the SP\n \t     adjustment in the second variant; the static chain register\n@@ -20721,13 +20722,13 @@ arm_expand_prologue (void)\n \t    insn = emit_set_insn (gen_rtx_REG (SImode, 3), ip_rtx);\n \t  else if (args_to_push == 0)\n \t    {\n-\t      rtx dwarf;\n+\t      rtx addr, dwarf;\n \n \t      gcc_assert(arm_compute_static_chain_stack_bytes() == 4);\n \t      saved_regs += 4;\n \n-\t      insn = gen_rtx_PRE_DEC (SImode, stack_pointer_rtx);\n-\t      insn = emit_set_insn (gen_frame_mem (SImode, insn), ip_rtx);\n+\t      addr = gen_rtx_PRE_DEC (Pmode, stack_pointer_rtx);\n+\t      insn = emit_set_insn (gen_frame_mem (SImode, addr), ip_rtx);\n \t      fp_offset = 4;\n \n \t      /* Just tell the dwarf backend that we adjusted SP.  */\n@@ -20741,21 +20742,38 @@ arm_expand_prologue (void)\n \t    {\n \t      /* Store the args on the stack.  */\n \t      if (cfun->machine->uses_anonymous_args)\n-\t\tinsn = emit_multi_reg_push\n-\t\t  ((0xf0 >> (args_to_push / 4)) & 0xf);\n+\t\t{\n+\t\t  insn\n+\t\t    = emit_multi_reg_push ((0xf0 >> (args_to_push / 4)) & 0xf);\n+\t\t  emit_set_insn (gen_rtx_REG (SImode, 3), ip_rtx);\n+\t\t  saved_pretend_args = 1;\n+\t\t}\n \t      else\n-\t\tinsn = emit_insn\n-\t\t  (gen_addsi3 (stack_pointer_rtx, stack_pointer_rtx,\n-\t\t\t       GEN_INT (- args_to_push)));\n+\t\t{\n+\t\t  rtx addr, dwarf;\n \n-\t      RTX_FRAME_RELATED_P (insn) = 1;\n+\t\t  if (args_to_push == 4)\n+\t\t    addr = gen_rtx_PRE_DEC (Pmode, stack_pointer_rtx);\n+\t\t  else\n+\t\t    addr\n+\t\t      = gen_rtx_PRE_MODIFY (Pmode, stack_pointer_rtx,\n+\t\t\t\t\t    plus_constant (Pmode,\n+\t\t\t\t\t\t\t   stack_pointer_rtx,\n+\t\t\t\t\t\t\t   -args_to_push));\n+\n+\t\t  insn = emit_set_insn (gen_frame_mem (SImode, addr), ip_rtx);\n \n-\t      saved_pretend_args = 1;\n+\t\t  /* Just tell the dwarf backend that we adjusted SP.  */\n+\t\t  dwarf\n+\t\t    = gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n+\t\t\t\t   plus_constant (Pmode, stack_pointer_rtx,\n+\t\t\t\t\t\t  -args_to_push));\n+\t\t  add_reg_note (insn, REG_FRAME_RELATED_EXPR, dwarf);\n+\t\t}\n+\n+\t      RTX_FRAME_RELATED_P (insn) = 1;\n \t      fp_offset = args_to_push;\n \t      args_to_push = 0;\n-\n-\t      /* Now reuse r3 to preserve IP.  */\n-\t      emit_set_insn (gen_rtx_REG (SImode, 3), ip_rtx);\n \t    }\n \t}\n \n@@ -20861,7 +20879,7 @@ arm_expand_prologue (void)\n \t      /* Recover the static chain register.  */\n \t      if (!arm_r3_live_at_start_p () || saved_pretend_args)\n \t\tinsn = gen_rtx_REG (SImode, 3);\n-\t      else /* if (crtl->args.pretend_args_size == 0) */\n+\t      else\n \t\t{\n \t\t  insn = plus_constant (Pmode, hard_frame_pointer_rtx, 4);\n \t\t  insn = gen_frame_mem (SImode, insn);"}, {"sha": "ac0b7e0acc4f3132eec1d71f5425c11b108774f6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ede34dfcebbfaded870a505d122557f2eff8c01a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ede34dfcebbfaded870a505d122557f2eff8c01a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ede34dfcebbfaded870a505d122557f2eff8c01a", "patch": "@@ -1,3 +1,7 @@\n+2013-12-20  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* gcc.target/arm/nested-apcs.c: New test.\n+\n 2013-12-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/59255"}, {"sha": "9dac3043e278a182da04d8333f820dffe5f46bca", "filename": "gcc/testsuite/gcc.target/arm/nested-apcs.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ede34dfcebbfaded870a505d122557f2eff8c01a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fnested-apcs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ede34dfcebbfaded870a505d122557f2eff8c01a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fnested-apcs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fnested-apcs.c?ref=ede34dfcebbfaded870a505d122557f2eff8c01a", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fno-omit-frame-pointer -mapcs-frame -O\" } */\n+\n+extern void abort (void);\n+\n+struct x\n+{\n+  int y;\n+  int z;\n+};\n+\n+int __attribute__((noinline)) f (int c, int d, int e, int h, int i)\n+{\n+  int a;\n+  struct x b;\n+\n+  int __attribute__((noinline)) g (int p, int q, int r, struct x s)\n+  {\n+    return a + p + q + r + s.y + s.z;\n+  }\n+\n+  a = 5;\n+  b.y = h;\n+  b.z = i;\n+\n+  return g(c, d, e, b);\n+}\n+\n+int main(void)\n+{\n+  if (f (1, 2, 3, 4, 5) != 20)\n+    abort();\n+  return 0;\n+}"}]}