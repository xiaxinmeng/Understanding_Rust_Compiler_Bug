{"sha": "5c04e9f475d8916abcecd7498ec506e3300f11ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWMwNGU5ZjQ3NWQ4OTE2YWJjZWNkNzQ5OGVjNTA2ZTMzMDBmMTFjYQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-04-29T10:59:33Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-04-29T10:59:33Z"}, "message": "tree-ssa-structalias.c (get_fi_for_callee): Restructure.\n\n2011-04-29  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-ssa-structalias.c (get_fi_for_callee): Restructure.\n\tHandle OBJ_TYPE_REF.\n\t(find_func_aliases_for_call): Use it more consistently.\n\nFrom-SVN: r173152", "tree": {"sha": "783011a324db62f35723a527edf67eaf39c03d26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/783011a324db62f35723a527edf67eaf39c03d26"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c04e9f475d8916abcecd7498ec506e3300f11ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c04e9f475d8916abcecd7498ec506e3300f11ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c04e9f475d8916abcecd7498ec506e3300f11ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c04e9f475d8916abcecd7498ec506e3300f11ca/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9d9305ea5de90380a24dc2557bc28c1ed621bd9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d9305ea5de90380a24dc2557bc28c1ed621bd9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d9305ea5de90380a24dc2557bc28c1ed621bd9e"}], "stats": {"total": 52, "additions": 24, "deletions": 28}, "files": [{"sha": "e2e0a8f5f53e8249297799ee84bd2ac3563833c1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c04e9f475d8916abcecd7498ec506e3300f11ca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c04e9f475d8916abcecd7498ec506e3300f11ca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5c04e9f475d8916abcecd7498ec506e3300f11ca", "patch": "@@ -1,3 +1,9 @@\n+2011-04-29  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-ssa-structalias.c (get_fi_for_callee): Restructure.\n+\tHandle OBJ_TYPE_REF.\n+\t(find_func_aliases_for_call): Use it more consistently.\n+\n 2011-04-29  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* haifa-sched.c (last_nondebug_scheduled_insn): New."}, {"sha": "ce0d8d0653d03f77d9acaebb3679fa9e2228fe1d", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 18, "deletions": 28, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c04e9f475d8916abcecd7498ec506e3300f11ca/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c04e9f475d8916abcecd7498ec506e3300f11ca/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=5c04e9f475d8916abcecd7498ec506e3300f11ca", "patch": "@@ -3925,35 +3925,29 @@ handle_pure_call (gimple stmt, VEC(ce_s, heap) **results)\n static varinfo_t\n get_fi_for_callee (gimple call)\n {\n-  tree decl;\n+  tree decl, fn = gimple_call_fn (call);\n \n-  gcc_assert (!gimple_call_internal_p (call));\n+  if (fn && TREE_CODE (fn) == OBJ_TYPE_REF)\n+    fn = OBJ_TYPE_REF_EXPR (fn);\n \n   /* If we can directly resolve the function being called, do so.\n      Otherwise, it must be some sort of indirect expression that\n      we should still be able to handle.  */\n-  decl = gimple_call_fndecl (call);\n+  decl = gimple_call_addr_fndecl (fn);\n   if (decl)\n     return get_vi_for_tree (decl);\n \n-  decl = gimple_call_fn (call);\n-  /* The function can be either an SSA name pointer or,\n-     worse, an OBJ_TYPE_REF.  In this case we have no\n+  /* If the function is anything other than a SSA name pointer we have no\n      clue and should be getting ANYFN (well, ANYTHING for now).  */\n-  if (TREE_CODE (decl) == SSA_NAME)\n-    {\n-      if (TREE_CODE (decl) == SSA_NAME\n-\t  && (TREE_CODE (SSA_NAME_VAR (decl)) == PARM_DECL\n-\t      || TREE_CODE (SSA_NAME_VAR (decl)) == RESULT_DECL)\n-\t  && SSA_NAME_IS_DEFAULT_DEF (decl))\n-\tdecl = SSA_NAME_VAR (decl);\n-      return get_vi_for_tree (decl);\n-    }\n-  else if (TREE_CODE (decl) == INTEGER_CST\n-\t   || TREE_CODE (decl) == OBJ_TYPE_REF)\n+  if (!fn || TREE_CODE (fn) != SSA_NAME)\n     return get_varinfo (anything_id);\n-  else\n-    gcc_unreachable ();\n+\n+  if ((TREE_CODE (SSA_NAME_VAR (fn)) == PARM_DECL\n+       || TREE_CODE (SSA_NAME_VAR (fn)) == RESULT_DECL)\n+      && SSA_NAME_IS_DEFAULT_DEF (fn))\n+    fn = SSA_NAME_VAR (fn);\n+\n+  return get_vi_for_tree (fn);\n }\n \n /* Create constraints for the builtin call T.  Return true if the call\n@@ -4199,11 +4193,9 @@ find_func_aliases_for_call (gimple t)\n       && find_func_aliases_for_builtin_call (t))\n     return;\n \n+  fi = get_fi_for_callee (t);\n   if (!in_ipa_mode\n-      || gimple_call_internal_p (t)\n-      || (fndecl\n-\t  && (!(fi = lookup_vi_for_tree (fndecl))\n-\t      || !fi->is_fn_info)))\n+      || (fndecl && !fi->is_fn_info))\n     {\n       VEC(ce_s, heap) *rhsc = NULL;\n       int flags = gimple_call_flags (t);\n@@ -4231,8 +4223,6 @@ find_func_aliases_for_call (gimple t)\n       tree lhsop;\n       unsigned j;\n \n-      fi = get_fi_for_callee (t);\n-\n       /* Assign all the passed arguments to the appropriate incoming\n \t parameters of the function.  */\n       for (j = 0; j < gimple_call_num_args (t); j++)\n@@ -4271,7 +4261,7 @@ find_func_aliases_for_call (gimple t)\n \t      VEC_free(ce_s, heap, tem);\n \t    }\n \t  FOR_EACH_VEC_ELT (ce_s, lhsc, j, lhsp)\n-\t      process_constraint (new_constraint (*lhsp, rhs));\n+\t    process_constraint (new_constraint (*lhsp, rhs));\n \t}\n \n       /* If we pass the result decl by reference, honor that.  */\n@@ -4286,7 +4276,7 @@ find_func_aliases_for_call (gimple t)\n \t  get_constraint_for_address_of (lhsop, &rhsc);\n \t  lhs = get_function_part_constraint (fi, fi_result);\n \t  FOR_EACH_VEC_ELT (ce_s, rhsc, j, rhsp)\n-\t      process_constraint (new_constraint (lhs, *rhsp));\n+\t    process_constraint (new_constraint (lhs, *rhsp));\n \t  VEC_free (ce_s, heap, rhsc);\n \t}\n \n@@ -4299,7 +4289,7 @@ find_func_aliases_for_call (gimple t)\n \t  get_constraint_for (gimple_call_chain (t), &rhsc);\n \t  lhs = get_function_part_constraint (fi, fi_static_chain);\n \t  FOR_EACH_VEC_ELT (ce_s, rhsc, j, rhsp)\n-\t      process_constraint (new_constraint (lhs, *rhsp));\n+\t    process_constraint (new_constraint (lhs, *rhsp));\n \t}\n     }\n }"}]}