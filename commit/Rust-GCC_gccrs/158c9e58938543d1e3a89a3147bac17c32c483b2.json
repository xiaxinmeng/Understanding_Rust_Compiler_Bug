{"sha": "158c9e58938543d1e3a89a3147bac17c32c483b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTU4YzllNTg5Mzg1NDNkMWUzYTg5YTMxNDdiYWMxN2MzMmM0ODNiMg==", "commit": {"author": {"name": "Paul Eggert", "email": "eggert@gnu.org", "date": "1997-01-23T04:23:12Z"}, "committer": {"name": "Paul Eggert", "email": "eggert@gnu.org", "date": "1997-01-23T04:23:12Z"}, "message": "automatically generated from GPLed version\n\nFrom-SVN: r13547", "tree": {"sha": "b638d909c2f3505916d3ea7ac2b3b1af068b853e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b638d909c2f3505916d3ea7ac2b3b1af068b853e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/158c9e58938543d1e3a89a3147bac17c32c483b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/158c9e58938543d1e3a89a3147bac17c32c483b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/158c9e58938543d1e3a89a3147bac17c32c483b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/158c9e58938543d1e3a89a3147bac17c32c483b2/comments", "author": null, "committer": null, "parents": [{"sha": "69ce75dc0debae1aa0f133ae1739b3e9b628b9b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69ce75dc0debae1aa0f133ae1739b3e9b628b9b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69ce75dc0debae1aa0f133ae1739b3e9b628b9b4"}], "stats": {"total": 191, "additions": 191, "deletions": 0}, "files": [{"sha": "b51be7f1bc3e6660403419a33aed5c97a01292ce", "filename": "gcc/getopt1.c", "status": "added", "additions": 191, "deletions": 0, "changes": 191, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/158c9e58938543d1e3a89a3147bac17c32c483b2/gcc%2Fgetopt1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/158c9e58938543d1e3a89a3147bac17c32c483b2/gcc%2Fgetopt1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgetopt1.c?ref=158c9e58938543d1e3a89a3147bac17c32c483b2", "patch": "@@ -0,0 +1,191 @@\n+/* getopt_long and getopt_long_only entry points for GNU getopt.\n+   Copyright (C) 1987,88,89,90,91,92,93,94,96,97 Free Software Foundation, Inc.\n+\n+   the C library, however.  The master source lives in /gd/gnu/lib.\n+\n+NOTE: The canonical source of this file is maintained with the GNU C Library.\n+Bugs can be reported to bug-glibc@prep.ai.mit.edu.\n+\n+This program is free software; you can redistribute it and/or modify it\n+under the terms of the GNU General Public License as published by the\n+Free Software Foundation; either version 2, or (at your option) any\n+later version.\n+\n+This program is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with this program; if not, write to the Free Software\n+Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+USA.  */\n+\f\n+#ifdef HAVE_CONFIG_H\n+#include <config.h>\n+#endif\n+\n+#include \"getopt.h\"\n+\n+#if !defined (__STDC__) || !__STDC__\n+/* This is a separate conditional since some stdc systems\n+   reject `defined (const)'.  */\n+#ifndef const\n+#define const\n+#endif\n+#endif\n+\n+#include <stdio.h>\n+\n+/* Comment out all this code if we are using the GNU C Library, and are not\n+   actually compiling the library itself.  This code is part of the GNU C\n+   Library, but also included in many other GNU distributions.  Compiling\n+   and linking in this code is a waste when using the GNU C library\n+   (especially if it is a shared library).  Rather than having every GNU\n+   program understand `configure --with-gnu-libc' and omit the object files,\n+   it is simpler to just do this in the source for each such file.  */\n+\n+#define GETOPT_INTERFACE_VERSION 2\n+#if !defined (_LIBC) && defined (__GLIBC__) && __GLIBC__ >= 2\n+#include <gnu-versions.h>\n+#if _GNU_GETOPT_INTERFACE_VERSION == GETOPT_INTERFACE_VERSION\n+#define ELIDE_CODE\n+#endif\n+#endif\n+\n+#ifndef ELIDE_CODE\n+\n+\n+/* This needs to come after some library #include\n+   to get __GNU_LIBRARY__ defined.  */\n+#ifdef __GNU_LIBRARY__\n+#include <stdlib.h>\n+#endif\n+\n+#ifndef\tNULL\n+#define NULL 0\n+#endif\n+\n+int\n+getopt_long (argc, argv, options, long_options, opt_index)\n+     int argc;\n+     char *const *argv;\n+     const char *options;\n+     const struct option *long_options;\n+     int *opt_index;\n+{\n+  return _getopt_internal (argc, argv, options, long_options, opt_index, 0);\n+}\n+\n+/* Like getopt_long, but '-' as well as '--' can indicate a long option.\n+   If an option that starts with '-' (not '--') doesn't match a long option,\n+   but does match a short option, it is parsed as a short option\n+   instead.  */\n+\n+int\n+getopt_long_only (argc, argv, options, long_options, opt_index)\n+     int argc;\n+     char *const *argv;\n+     const char *options;\n+     const struct option *long_options;\n+     int *opt_index;\n+{\n+  return _getopt_internal (argc, argv, options, long_options, opt_index, 1);\n+}\n+\n+\n+#endif\t/* Not ELIDE_CODE.  */\n+\f\n+#ifdef TEST\n+\n+#include <stdio.h>\n+\n+int\n+main (argc, argv)\n+     int argc;\n+     char **argv;\n+{\n+  int c;\n+  int digit_optind = 0;\n+\n+  while (1)\n+    {\n+      int this_option_optind = optind ? optind : 1;\n+      int option_index = 0;\n+      static struct option long_options[] =\n+      {\n+\t{\"add\", 1, 0, 0},\n+\t{\"append\", 0, 0, 0},\n+\t{\"delete\", 1, 0, 0},\n+\t{\"verbose\", 0, 0, 0},\n+\t{\"create\", 0, 0, 0},\n+\t{\"file\", 1, 0, 0},\n+\t{0, 0, 0, 0}\n+      };\n+\n+      c = getopt_long (argc, argv, \"abc:d:0123456789\",\n+\t\t       long_options, &option_index);\n+      if (c == -1)\n+\tbreak;\n+\n+      switch (c)\n+\t{\n+\tcase 0:\n+\t  printf (\"option %s\", long_options[option_index].name);\n+\t  if (optarg)\n+\t    printf (\" with arg %s\", optarg);\n+\t  printf (\"\\n\");\n+\t  break;\n+\n+\tcase '0':\n+\tcase '1':\n+\tcase '2':\n+\tcase '3':\n+\tcase '4':\n+\tcase '5':\n+\tcase '6':\n+\tcase '7':\n+\tcase '8':\n+\tcase '9':\n+\t  if (digit_optind != 0 && digit_optind != this_option_optind)\n+\t    printf (\"digits occur in two different argv-elements.\\n\");\n+\t  digit_optind = this_option_optind;\n+\t  printf (\"option %c\\n\", c);\n+\t  break;\n+\n+\tcase 'a':\n+\t  printf (\"option a\\n\");\n+\t  break;\n+\n+\tcase 'b':\n+\t  printf (\"option b\\n\");\n+\t  break;\n+\n+\tcase 'c':\n+\t  printf (\"option c with value `%s'\\n\", optarg);\n+\t  break;\n+\n+\tcase 'd':\n+\t  printf (\"option d with value `%s'\\n\", optarg);\n+\t  break;\n+\n+\tcase '?':\n+\t  break;\n+\n+\tdefault:\n+\t  printf (\"?? getopt returned character code 0%o ??\\n\", c);\n+\t}\n+    }\n+\n+  if (optind < argc)\n+    {\n+      printf (\"non-option ARGV-elements: \");\n+      while (optind < argc)\n+\tprintf (\"%s \", argv[optind++]);\n+      printf (\"\\n\");\n+    }\n+\n+  exit (0);\n+}\n+\n+#endif /* TEST */"}]}