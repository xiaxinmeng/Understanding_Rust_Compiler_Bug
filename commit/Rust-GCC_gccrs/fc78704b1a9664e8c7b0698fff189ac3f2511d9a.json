{"sha": "fc78704b1a9664e8c7b0698fff189ac3f2511d9a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmM3ODcwNGIxYTk2NjRlOGM3YjA2OThmZmYxODlhYzNmMjUxMWQ5YQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2013-11-18T19:25:33Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2013-11-18T19:25:33Z"}, "message": "invoke.texi: Extend -fsanitize=undefined documentation.\n\n\t* doc/invoke.texi: Extend -fsanitize=undefined documentation.\n\nFrom-SVN: r204980", "tree": {"sha": "ea6d079dc463b65cc1e07e5b792b803feb69e7cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea6d079dc463b65cc1e07e5b792b803feb69e7cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc78704b1a9664e8c7b0698fff189ac3f2511d9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc78704b1a9664e8c7b0698fff189ac3f2511d9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc78704b1a9664e8c7b0698fff189ac3f2511d9a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc78704b1a9664e8c7b0698fff189ac3f2511d9a/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "72b7c4bc78f0c99a9b79a33b3a50fa9367b15782", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72b7c4bc78f0c99a9b79a33b3a50fa9367b15782", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72b7c4bc78f0c99a9b79a33b3a50fa9367b15782"}], "stats": {"total": 43, "additions": 41, "deletions": 2}, "files": [{"sha": "998678accc6f0aa26e57c493b3f20eec895cae6b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc78704b1a9664e8c7b0698fff189ac3f2511d9a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc78704b1a9664e8c7b0698fff189ac3f2511d9a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fc78704b1a9664e8c7b0698fff189ac3f2511d9a", "patch": "@@ -1,3 +1,7 @@\n+2013-11-18  Marek Polacek  <polacek@redhat.com>\n+\n+\t* doc/invoke.texi: Extend -fsanitize=undefined documentation.\n+\n 2013-11-18  Andrew Pinski <apinski@cavium.com>\n \t    Steve Ellcey  <sellcey@mips.com>\n "}, {"sha": "8855fb74cf336b009aa42043cf64baf0615a856c", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 37, "deletions": 2, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc78704b1a9664e8c7b0698fff189ac3f2511d9a/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc78704b1a9664e8c7b0698fff189ac3f2511d9a/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=fc78704b1a9664e8c7b0698fff189ac3f2511d9a", "patch": "@@ -5260,9 +5260,44 @@ data race bugs.\n See @uref{http://code.google.com/p/data-race-test/wiki/ThreadSanitizer} for more details.\n \n @item -fsanitize=undefined\n-Enable UndefinedBehaviorSanitizer, a fast undefined behavior detector\n+Enable UndefinedBehaviorSanitizer, a fast undefined behavior detector.\n Various computations will be instrumented to detect undefined behavior\n-at runtime, e.g.@: division by zero or various overflows.\n+at runtime.  Current suboptions are:\n+\n+@itemize @bullet\n+\n+@item @option{-fsanitize=shift}\n+\n+This option enables checking that the result of a shift operation is\n+not undefined.  Note that what exactly is considered undefined differs\n+slightly between C and C++, as well as between ISO C90 and C99, etc.\n+\n+@item @option{-fsanitize=integer-divide-by-zero}\n+\n+Detect integer division by zero as well as @code{INT_MIN / -1} division.\n+\n+@item @option{-fsanitize=unreachable}\n+\n+With this option, the compiler will turn the @code{__builtin_unreachable}\n+call into a diagnostics message call instead.  When reaching the\n+@code{__builtin_unreachable} call, the behavior is undefined.\n+\n+@item @option{-fsanitize=vla-bound}\n+\n+This option instructs the compiler to check that the size of a variable\n+length array is positive.  This option does not have any effect in\n+@option{-std=c++1y} mode, as the standard requires the exception be thrown\n+instead.\n+\n+@item @option{-fsanitize=null}\n+\n+This option enables pointer checking.  Particularly, the application\n+built with this option turned on will issue an error message when it\n+tries to dereference a NULL pointer, or if a reference (possibly an\n+rvalue reference) is bound to a NULL pointer.\n+\n+@end itemize\n+\n While @option{-ftrapv} causes traps for signed overflows to be emitted,\n @option{-fsanitize=undefined} gives a diagnostic message.\n This currently works only for the C family of languages."}]}