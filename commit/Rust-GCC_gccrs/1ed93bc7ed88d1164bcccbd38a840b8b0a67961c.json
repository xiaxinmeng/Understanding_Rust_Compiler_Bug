{"sha": "1ed93bc7ed88d1164bcccbd38a840b8b0a67961c", "node_id": "C_kwDOANBUbNoAKDFlZDkzYmM3ZWQ4OGQxMTY0YmNjY2JkMzhhODQwYjhiMGE2Nzk2MWM", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-02-16T03:30:01Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-02-17T02:46:35Z"}, "message": "RISC-V: Add RVV all mask C/C++ intrinsics support\n\ngcc/ChangeLog:\n\n\t* config/riscv/riscv-vector-builtins-bases.cc (class mask_logic): New\n\tclass.\n\t(class mask_nlogic): Ditto.\n\t(class mask_notlogic): Ditto.\n\t(class vmmv): Ditto.\n\t(class vmclr): Ditto.\n\t(class vmset): Ditto.\n\t(class vmnot): Ditto.\n\t(class vcpop): Ditto.\n\t(class vfirst): Ditto.\n\t(class mask_misc): Ditto.\n\t(class viota): Ditto.\n\t(class vid): Ditto.\n\t(BASE): Ditto.\n\t* config/riscv/riscv-vector-builtins-bases.h: Ditto.\n\t* config/riscv/riscv-vector-builtins-functions.def (vmand): Ditto.\n\t(vmnand): Ditto.\n\t(vmandn): Ditto.\n\t(vmxor): Ditto.\n\t(vmor): Ditto.\n\t(vmnor): Ditto.\n\t(vmorn): Ditto.\n\t(vmxnor): Ditto.\n\t(vmmv): Ditto.\n\t(vmclr): Ditto.\n\t(vmset): Ditto.\n\t(vmnot): Ditto.\n\t(vcpop): Ditto.\n\t(vfirst): Ditto.\n\t(vmsbf): Ditto.\n\t(vmsif): Ditto.\n\t(vmsof): Ditto.\n\t(viota): Ditto.\n\t(vid): Ditto.\n\t* config/riscv/riscv-vector-builtins-shapes.cc (struct alu_def): Ditto.\n\t(struct mask_alu_def): Ditto.\n\t(SHAPE): Ditto.\n\t* config/riscv/riscv-vector-builtins-shapes.h: Ditto.\n\t* config/riscv/riscv-vector-builtins.cc: Ditto.\n\t* config/riscv/riscv-vsetvl.cc (pass_vsetvl::cleanup_insns): Fix bug\n\tfor dest it scalar RVV intrinsics.\n\t* config/riscv/vector-iterators.md (sof): New iterator.\n\t* config/riscv/vector.md (@pred_<optab>n<mode>): New pattern.\n\t(@pred_<optab>not<mode>): New pattern.\n\t(@pred_popcount<VB:mode><P:mode>): New pattern.\n\t(@pred_ffs<VB:mode><P:mode>): New pattern.\n\t(@pred_<misc_op><mode>): New pattern.\n\t(@pred_iota<mode>): New pattern.\n\t(@pred_series<mode>): New pattern.", "tree": {"sha": "38b9f90e32c73998ed07fe58d77cbffe48088a05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/38b9f90e32c73998ed07fe58d77cbffe48088a05"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ed93bc7ed88d1164bcccbd38a840b8b0a67961c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ed93bc7ed88d1164bcccbd38a840b8b0a67961c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ed93bc7ed88d1164bcccbd38a840b8b0a67961c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ed93bc7ed88d1164bcccbd38a840b8b0a67961c/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2031252868015f8a8ad1c67362a8b37ce6f8030", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2031252868015f8a8ad1c67362a8b37ce6f8030", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2031252868015f8a8ad1c67362a8b37ce6f8030"}], "stats": {"total": 531, "additions": 511, "deletions": 20}, "files": [{"sha": "88142217e45f5153bf418b3a333e4033910a94c9", "filename": "gcc/config/riscv/riscv-vector-builtins-bases.cc", "status": "modified", "additions": 217, "deletions": 0, "changes": 217, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ed93bc7ed88d1164bcccbd38a840b8b0a67961c/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ed93bc7ed88d1164bcccbd38a840b8b0a67961c/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc?ref=1ed93bc7ed88d1164bcccbd38a840b8b0a67961c", "patch": "@@ -665,6 +665,185 @@ class iwmac : public function_base\n   }\n };\n \n+/* Implements vmand/vmnand/vmandn/vmxor/vmor/vmnor/vmorn/vmxnor  */\n+template<rtx_code CODE>\n+class mask_logic : public function_base\n+{\n+public:\n+  bool apply_tail_policy_p () const override { return false; }\n+  bool apply_mask_policy_p () const override { return false; }\n+\n+  rtx expand (function_expander &e) const override\n+  {\n+    return e.use_exact_insn (code_for_pred (CODE, e.vector_mode ()));\n+  }\n+};\n+template<rtx_code CODE>\n+class mask_nlogic : public function_base\n+{\n+public:\n+  bool apply_tail_policy_p () const override { return false; }\n+  bool apply_mask_policy_p () const override { return false; }\n+\n+  rtx expand (function_expander &e) const override\n+  {\n+    return e.use_exact_insn (code_for_pred_n (CODE, e.vector_mode ()));\n+  }\n+};\n+template<rtx_code CODE>\n+class mask_notlogic : public function_base\n+{\n+public:\n+  bool apply_tail_policy_p () const override { return false; }\n+  bool apply_mask_policy_p () const override { return false; }\n+\n+  rtx expand (function_expander &e) const override\n+  {\n+    return e.use_exact_insn (code_for_pred_not (CODE, e.vector_mode ()));\n+  }\n+};\n+\n+/* Implements vmmv.  */\n+class vmmv : public function_base\n+{\n+public:\n+  bool apply_tail_policy_p () const override { return false; }\n+  bool apply_mask_policy_p () const override { return false; }\n+\n+  rtx expand (function_expander &e) const override\n+  {\n+    return e.use_exact_insn (code_for_pred_mov (e.vector_mode ()));\n+  }\n+};\n+\n+/* Implements vmclr.  */\n+class vmclr : public function_base\n+{\n+public:\n+  bool can_be_overloaded_p (enum predication_type_index) const override\n+  {\n+    return false;\n+  }\n+\n+  rtx expand (function_expander &e) const override\n+  {\n+    machine_mode mode = TYPE_MODE (TREE_TYPE (e.exp));\n+    e.add_all_one_mask_operand (mode);\n+    e.add_vundef_operand (mode);\n+    e.add_input_operand (mode, CONST0_RTX (mode));\n+    e.add_input_operand (call_expr_nargs (e.exp) - 1);\n+    e.add_input_operand (Pmode, get_avl_type_rtx (avl_type::NONVLMAX));\n+    return e.generate_insn (code_for_pred_mov (e.vector_mode ()));\n+  }\n+};\n+\n+/* Implements vmset.  */\n+class vmset : public function_base\n+{\n+public:\n+  bool can_be_overloaded_p (enum predication_type_index) const override\n+  {\n+    return false;\n+  }\n+\n+  rtx expand (function_expander &e) const override\n+  {\n+    machine_mode mode = TYPE_MODE (TREE_TYPE (e.exp));\n+    e.add_all_one_mask_operand (mode);\n+    e.add_vundef_operand (mode);\n+    e.add_input_operand (mode, CONSTM1_RTX (mode));\n+    e.add_input_operand (call_expr_nargs (e.exp) - 1);\n+    e.add_input_operand (Pmode, get_avl_type_rtx (avl_type::NONVLMAX));\n+    return e.generate_insn (code_for_pred_mov (e.vector_mode ()));\n+  }\n+};\n+\n+/* Implements vmnot.  */\n+class vmnot : public function_base\n+{\n+public:\n+  bool apply_tail_policy_p () const override { return false; }\n+  bool apply_mask_policy_p () const override { return false; }\n+\n+  rtx expand (function_expander &e) const override\n+  {\n+    return e.use_exact_insn (code_for_pred_not (e.vector_mode ()));\n+  }\n+};\n+\n+/* Implements vcpop.  */\n+class vcpop : public function_base\n+{\n+public:\n+  bool apply_tail_policy_p () const override { return false; }\n+  bool apply_mask_policy_p () const override { return false; }\n+  bool has_merge_operand_p () const override { return false; }\n+\n+  rtx expand (function_expander &e) const override\n+  {\n+    return e.use_exact_insn (code_for_pred_popcount (e.vector_mode (), Pmode));\n+  }\n+};\n+\n+/* Implements vfirst.  */\n+class vfirst : public function_base\n+{\n+public:\n+  bool apply_tail_policy_p () const override { return false; }\n+  bool apply_mask_policy_p () const override { return false; }\n+  bool has_merge_operand_p () const override { return false; }\n+\n+  rtx expand (function_expander &e) const override\n+  {\n+    return e.use_exact_insn (code_for_pred_ffs (e.vector_mode (), Pmode));\n+  }\n+};\n+\n+/* Implements vmsbf/vmsif/vmsof.  */\n+template<int UNSPEC>\n+class mask_misc : public function_base\n+{\n+public:\n+  bool apply_tail_policy_p () const override { return false; }\n+\n+  rtx expand (function_expander &e) const override\n+  {\n+    return e.use_exact_insn (code_for_pred (UNSPEC, e.vector_mode ()));\n+  }\n+};\n+\n+/* Implements viota.  */\n+class viota : public function_base\n+{\n+public:\n+  bool can_be_overloaded_p (enum predication_type_index pred) const override\n+  {\n+    return pred == PRED_TYPE_tu || pred == PRED_TYPE_tum\n+\t   || pred == PRED_TYPE_tumu;\n+  }\n+\n+  rtx expand (function_expander &e) const override\n+  {\n+    return e.use_exact_insn (code_for_pred_iota (e.vector_mode ()));\n+  }\n+};\n+\n+/* Implements vid.  */\n+class vid : public function_base\n+{\n+public:\n+  bool can_be_overloaded_p (enum predication_type_index pred) const override\n+  {\n+    return pred == PRED_TYPE_tu || pred == PRED_TYPE_tum\n+\t   || pred == PRED_TYPE_tumu;\n+  }\n+\n+  rtx expand (function_expander &e) const override\n+  {\n+    return e.use_exact_insn (code_for_pred_series (e.vector_mode ()));\n+  }\n+};\n+\n static CONSTEXPR const vsetvl<false> vsetvl_obj;\n static CONSTEXPR const vsetvl<true> vsetvlmax_obj;\n static CONSTEXPR const loadstore<false, LST_UNIT_STRIDE, false> vle_obj;\n@@ -763,6 +942,25 @@ static CONSTEXPR const sat_op<UNSPEC_VSSRL> vssrl_obj;\n static CONSTEXPR const sat_op<UNSPEC_VSSRA> vssra_obj;\n static CONSTEXPR const vnclip<UNSPEC_VNCLIP> vnclip_obj;\n static CONSTEXPR const vnclip<UNSPEC_VNCLIPU> vnclipu_obj;\n+static CONSTEXPR const mask_logic<AND> vmand_obj;\n+static CONSTEXPR const mask_nlogic<AND> vmnand_obj;\n+static CONSTEXPR const mask_notlogic<AND> vmandn_obj;\n+static CONSTEXPR const mask_logic<XOR> vmxor_obj;\n+static CONSTEXPR const mask_logic<IOR> vmor_obj;\n+static CONSTEXPR const mask_nlogic<IOR> vmnor_obj;\n+static CONSTEXPR const mask_notlogic<IOR> vmorn_obj;\n+static CONSTEXPR const mask_nlogic<XOR> vmxnor_obj;\n+static CONSTEXPR const vmmv vmmv_obj;\n+static CONSTEXPR const vmclr vmclr_obj;\n+static CONSTEXPR const vmset vmset_obj;\n+static CONSTEXPR const vmnot vmnot_obj;\n+static CONSTEXPR const vcpop vcpop_obj;\n+static CONSTEXPR const vfirst vfirst_obj;\n+static CONSTEXPR const mask_misc<UNSPEC_VMSBF> vmsbf_obj;\n+static CONSTEXPR const mask_misc<UNSPEC_VMSIF> vmsif_obj;\n+static CONSTEXPR const mask_misc<UNSPEC_VMSOF> vmsof_obj;\n+static CONSTEXPR const viota viota_obj;\n+static CONSTEXPR const vid vid_obj;\n \n /* Declare the function base NAME, pointing it to an instance\n    of class <NAME>_obj.  */\n@@ -867,5 +1065,24 @@ BASE (vssra)\n BASE (vssrl)\n BASE (vnclip)\n BASE (vnclipu)\n+BASE (vmand)\n+BASE (vmnand)\n+BASE (vmandn)\n+BASE (vmxor)\n+BASE (vmor)\n+BASE (vmnor)\n+BASE (vmorn)\n+BASE (vmxnor)\n+BASE (vmmv)\n+BASE (vmclr)\n+BASE (vmset)\n+BASE (vmnot)\n+BASE (vcpop)\n+BASE (vfirst)\n+BASE (vmsbf)\n+BASE (vmsif)\n+BASE (vmsof)\n+BASE (viota)\n+BASE (vid)\n \n } // end namespace riscv_vector"}, {"sha": "e136cd9114768437c482b71b64be950ae6fc7fa4", "filename": "gcc/config/riscv/riscv-vector-builtins-bases.h", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ed93bc7ed88d1164bcccbd38a840b8b0a67961c/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ed93bc7ed88d1164bcccbd38a840b8b0a67961c/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.h?ref=1ed93bc7ed88d1164bcccbd38a840b8b0a67961c", "patch": "@@ -124,6 +124,25 @@ extern const function_base *const vnclip;\n extern const function_base *const vnclip;\n extern const function_base *const vnclipu;\n extern const function_base *const vnclipu;\n+extern const function_base *const vmand;\n+extern const function_base *const vmnand;\n+extern const function_base *const vmandn;\n+extern const function_base *const vmxor;\n+extern const function_base *const vmor;\n+extern const function_base *const vmnor;\n+extern const function_base *const vmorn;\n+extern const function_base *const vmxnor;\n+extern const function_base *const vmmv;\n+extern const function_base *const vmclr;\n+extern const function_base *const vmset;\n+extern const function_base *const vmnot;\n+extern const function_base *const vcpop;\n+extern const function_base *const vfirst;\n+extern const function_base *const vmsbf;\n+extern const function_base *const vmsif;\n+extern const function_base *const vmsof;\n+extern const function_base *const viota;\n+extern const function_base *const vid;\n }\n \n } // end namespace riscv_vector"}, {"sha": "38bf1b694bbbc79ed2bbf1dda2c60ba7b7f5df9c", "filename": "gcc/config/riscv/riscv-vector-builtins-functions.def", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ed93bc7ed88d1164bcccbd38a840b8b0a67961c/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-functions.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ed93bc7ed88d1164bcccbd38a840b8b0a67961c/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-functions.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-functions.def?ref=1ed93bc7ed88d1164bcccbd38a840b8b0a67961c", "patch": "@@ -277,7 +277,37 @@ DEF_RVV_FUNCTION (vnclip, narrow_alu, full_preds, i_narrow_shift_vwx_ops)\n \n /* TODO: 13. Vector Floating-Point Instructions.  */\n /* TODO: 14. Vector Reduction Operations.  */\n-/* TODO: 15. Vector Mask Instructions.  */\n+\n+/* 15. Vector Mask Instructions.  */\n+\n+// 15.1. Vector Mask-Register Logical Instructions\n+DEF_RVV_FUNCTION (vmand, mask_alu, none_preds, b_mmm_ops)\n+DEF_RVV_FUNCTION (vmnand, mask_alu, none_preds, b_mmm_ops)\n+DEF_RVV_FUNCTION (vmandn, mask_alu, none_preds, b_mmm_ops)\n+DEF_RVV_FUNCTION (vmxor, mask_alu, none_preds, b_mmm_ops)\n+DEF_RVV_FUNCTION (vmor, mask_alu, none_preds, b_mmm_ops)\n+DEF_RVV_FUNCTION (vmnor, mask_alu, none_preds, b_mmm_ops)\n+DEF_RVV_FUNCTION (vmorn, mask_alu, none_preds, b_mmm_ops)\n+DEF_RVV_FUNCTION (vmxnor, mask_alu, none_preds, b_mmm_ops)\n+DEF_RVV_FUNCTION (vmmv, mask_alu, none_preds, b_mm_ops)\n+DEF_RVV_FUNCTION (vmclr, mask_alu, none_preds, b_m_ops)\n+DEF_RVV_FUNCTION (vmset, mask_alu, none_preds, b_m_ops)\n+DEF_RVV_FUNCTION (vmnot, mask_alu, none_preds, b_mm_ops)\n+// 15.2. Vector count population in mask vcpop.m\n+DEF_RVV_FUNCTION (vcpop, mask_alu, none_m_preds, b_ulong_m_ops)\n+// 15.3. vfirst find-first-set mask bit\n+DEF_RVV_FUNCTION (vfirst, mask_alu, none_m_preds, b_long_m_ops)\n+// 15.4. vmsbf.m set-before-first mask bit\n+DEF_RVV_FUNCTION (vmsbf, mask_alu, none_m_mu_preds, b_mm_ops)\n+// 15.5. vmsif.m set-including-first mask bit\n+DEF_RVV_FUNCTION (vmsif, mask_alu, none_m_mu_preds, b_mm_ops)\n+// 15.6. vmsof.m set-only-first mask bit\n+DEF_RVV_FUNCTION (vmsof, mask_alu, none_m_mu_preds, b_mm_ops)\n+// 15.8. Vector Iota Instruction\n+DEF_RVV_FUNCTION (viota, mask_alu, full_preds, u_vm_ops)\n+// 15.9. Vector Element Index Instruction\n+DEF_RVV_FUNCTION (vid, alu, full_preds, u_v_ops)\n+\n /* TODO: 16. Vector Permutation Instructions.  */\n \n #undef DEF_RVV_FUNCTION"}, {"sha": "abf169dea4c51e779e897e63bdb5d9e97aa583ec", "filename": "gcc/config/riscv/riscv-vector-builtins-shapes.cc", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ed93bc7ed88d1164bcccbd38a840b8b0a67961c/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ed93bc7ed88d1164bcccbd38a840b8b0a67961c/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.cc?ref=1ed93bc7ed88d1164bcccbd38a840b8b0a67961c", "patch": "@@ -191,6 +191,10 @@ struct alu_def : public build_base\n   char *get_name (function_builder &b, const function_instance &instance,\n \t\t  bool overloaded_p) const override\n   {\n+    /* Return nullptr if it can not be overloaded.  */\n+    if (overloaded_p && !instance.base->can_be_overloaded_p (instance.pred))\n+      return nullptr;\n+\n     b.append_base_name (instance.base_name);\n \n     /* vop<sew> --> vop<sew>_<op>. According to rvv-intrinsic-doc, _vv/_vx/_v\n@@ -342,6 +346,39 @@ struct move_def : public build_base\n \tb.append_name (type_suffixes[instance.type.index].vector);\n       }\n \n+    /* According to rvv-intrinsic-doc, it does not add \"_m\" suffix\n+       for vop_m C++ overloaded API.  */\n+    if (overloaded_p && instance.pred == PRED_TYPE_m)\n+      return b.finish_name ();\n+    b.append_name (predication_suffixes[instance.pred]);\n+    return b.finish_name ();\n+  }\n+};\n+\n+/* mask_alu_def class.  */\n+struct mask_alu_def : public build_base\n+{\n+  char *get_name (function_builder &b, const function_instance &instance,\n+\t\t  bool overloaded_p) const override\n+  {\n+    /* Return nullptr if it can not be overloaded.  */\n+    if (overloaded_p && !instance.base->can_be_overloaded_p (instance.pred))\n+      return nullptr;\n+\n+    b.append_base_name (instance.base_name);\n+\n+    if (instance.op_info->op == OP_TYPE_mm || instance.op_info->op == OP_TYPE_m)\n+      if (!overloaded_p)\n+\tb.append_name (operand_suffixes[instance.op_info->op]);\n+\n+    /* vop<sew>_<op> --> vop<sew>_<op>_<type>.  */\n+    if (!overloaded_p)\n+      b.append_name (type_suffixes[instance.type.index].vector);\n+\n+    /* According to rvv-intrinsic-doc, it does not add \"_m\" suffix\n+       for vop_m C++ overloaded API.  */\n+    if (overloaded_p && instance.pred == PRED_TYPE_m)\n+      return b.finish_name ();\n     b.append_name (predication_suffixes[instance.pred]);\n     return b.finish_name ();\n   }\n@@ -357,5 +394,6 @@ SHAPE(no_mask_policy, no_mask_policy)\n SHAPE(return_mask, return_mask)\n SHAPE(narrow_alu, narrow_alu)\n SHAPE(move, move)\n+SHAPE(mask_alu, mask_alu)\n \n } // end namespace riscv_vector"}, {"sha": "406abefdb10f5b564c6b2ca7c55575fa30125704", "filename": "gcc/config/riscv/riscv-vector-builtins-shapes.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ed93bc7ed88d1164bcccbd38a840b8b0a67961c/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ed93bc7ed88d1164bcccbd38a840b8b0a67961c/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-shapes.h?ref=1ed93bc7ed88d1164bcccbd38a840b8b0a67961c", "patch": "@@ -34,6 +34,7 @@ extern const function_shape *const no_mask_policy;\n extern const function_shape *const return_mask;\n extern const function_shape *const narrow_alu;\n extern const function_shape *const move;\n+extern const function_shape *const mask_alu;\n }\n \n } // end namespace riscv_vector"}, {"sha": "3747cad672fd400be94ebfd90ce147047b8f7eef", "filename": "gcc/config/riscv/riscv-vector-builtins.cc", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ed93bc7ed88d1164bcccbd38a840b8b0a67961c/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ed93bc7ed88d1164bcccbd38a840b8b0a67961c/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc?ref=1ed93bc7ed88d1164bcccbd38a840b8b0a67961c", "patch": "@@ -231,6 +231,10 @@ static CONSTEXPR const rvv_arg_type_info rvv_arg_type_info_end\n static CONSTEXPR const rvv_arg_type_info void_args[]\n   = {rvv_arg_type_info (RVV_BASE_void), rvv_arg_type_info_end};\n \n+/* A list of args for size_t func () function.  */\n+static CONSTEXPR const rvv_arg_type_info end_args[]\n+  = {rvv_arg_type_info_end};\n+\n /* A list of args for size_t func (size_t) function.  */\n static CONSTEXPR const rvv_arg_type_info size_args[]\n   = {rvv_arg_type_info (RVV_BASE_size), rvv_arg_type_info_end};\n@@ -371,6 +375,10 @@ static CONSTEXPR const rvv_arg_type_info shift_wv_args[]\n static CONSTEXPR const rvv_arg_type_info v_args[]\n   = {rvv_arg_type_info (RVV_BASE_vector), rvv_arg_type_info_end};\n \n+/* A list of args for vector_type func (vector_type) function.  */\n+static CONSTEXPR const rvv_arg_type_info m_args[]\n+  = {rvv_arg_type_info (RVV_BASE_mask), rvv_arg_type_info_end};\n+\n /* A list of args for vector_type func (scalar_type) function.  */\n static CONSTEXPR const rvv_arg_type_info x_args[]\n   = {rvv_arg_type_info (RVV_BASE_scalar), rvv_arg_type_info_end};\n@@ -539,6 +547,62 @@ static CONSTEXPR const rvv_op_info b_v_scalar_ptr_ops\n      rvv_arg_type_info (RVV_BASE_void), /* Return type */\n      scalar_ptr_args /* Args */};\n \n+/* A static operand information for vector_type func (vector_type, vector_type)\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info b_mmm_ops\n+  = {b_ops,\t\t\t\t  /* Types */\n+     OP_TYPE_mm,\t\t\t  /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     vv_args /* Args */};\n+\n+/* A static operand information for vector_type func (vector_type)\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info b_mm_ops\n+  = {b_ops,\t\t\t\t  /* Types */\n+     OP_TYPE_m,\t\t\t\t  /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     v_args /* Args */};\n+\n+/* A static operand information for vector_type func (vector_type)\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info u_vm_ops\n+  = {u_ops,\t\t\t\t  /* Types */\n+     OP_TYPE_m,\t\t\t\t  /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     m_args /* Args */};\n+\n+/* A static operand information for vector_type func ()\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info b_m_ops\n+  = {b_ops,\t\t\t\t  /* Types */\n+     OP_TYPE_m,\t\t\t\t  /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     end_args /* Args */};\n+\n+/* A static operand information for vector_type func ()\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info u_v_ops\n+  = {u_ops,\t\t\t\t  /* Types */\n+     OP_TYPE_v,\t\t\t\t  /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     end_args /* Args */};\n+\n+/* A static operand information for unsigned long func (vector_type)\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info b_ulong_m_ops\n+  = {b_ops,\t\t\t\t\t /* Types */\n+     OP_TYPE_m,\t\t\t\t\t /* Suffix */\n+     rvv_arg_type_info (RVV_BASE_unsigned_long), /* Return type */\n+     v_args /* Args */};\n+\n+/* A static operand information for long func (vector_type)\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info b_long_m_ops\n+  = {b_ops,\t\t\t\t/* Types */\n+     OP_TYPE_m,\t\t\t\t/* Suffix */\n+     rvv_arg_type_info (RVV_BASE_long), /* Return type */\n+     v_args /* Args */};\n+\n /* A static operand information for vector_type func (const scalar_type *,\n  * ptrdiff_t) function registration. */\n static CONSTEXPR const rvv_op_info all_v_scalar_const_ptr_ptrdiff_ops"}, {"sha": "3fbdd8622422c11cc38e4a5bf5c2ede7a0d95869", "filename": "gcc/config/riscv/riscv-vsetvl.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ed93bc7ed88d1164bcccbd38a840b8b0a67961c/gcc%2Fconfig%2Friscv%2Friscv-vsetvl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ed93bc7ed88d1164bcccbd38a840b8b0a67961c/gcc%2Fconfig%2Friscv%2Friscv-vsetvl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vsetvl.cc?ref=1ed93bc7ed88d1164bcccbd38a840b8b0a67961c", "patch": "@@ -3349,7 +3349,7 @@ pass_vsetvl::cleanup_insns (void) const\n \t  if (!has_vl_op (rinsn) || !REG_P (get_vl (rinsn)))\n \t    continue;\n \t  rtx avl = get_vl (rinsn);\n-\t  if (count_occurrences (PATTERN (rinsn), avl, true) == 1)\n+\t  if (count_occurrences (PATTERN (rinsn), avl, 0) == 1)\n \t    {\n \t      /* Get the list of uses for the new instruction.  */\n \t      auto attempt = crtl->ssa->new_change_attempt ();\n@@ -3363,7 +3363,9 @@ pass_vsetvl::cleanup_insns (void) const\n \t      use_array new_uses = use_array (uses_builder.finish ());\n \t      change.new_uses = new_uses;\n \t      change.move_range = insn->ebb ()->insn_range ();\n-\t      rtx pat = simplify_replace_rtx (PATTERN (rinsn), avl, const0_rtx);\n+\t      rtx set = single_set (rinsn);\n+\t      rtx src = simplify_replace_rtx (SET_SRC (set), avl, const0_rtx);\n+\t      rtx pat = gen_rtx_SET (SET_DEST (set), src);\n \t      gcc_assert (change_insn (crtl->ssa, change, insn, pat));\n \t    }\n \t}"}, {"sha": "023b0b329c4296a7079402f9ed1fc0a5f24d520c", "filename": "gcc/config/riscv/vector-iterators.md", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ed93bc7ed88d1164bcccbd38a840b8b0a67961c/gcc%2Fconfig%2Friscv%2Fvector-iterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ed93bc7ed88d1164bcccbd38a840b8b0a67961c/gcc%2Fconfig%2Friscv%2Fvector-iterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fvector-iterators.md?ref=1ed93bc7ed88d1164bcccbd38a840b8b0a67961c", "patch": "@@ -49,6 +49,11 @@\n   UNSPEC_VASUBU\n   UNSPEC_VASUB\n   UNSPEC_VSMUL\n+\n+  UNSPEC_VMSBF\n+  UNSPEC_VMSIF\n+  UNSPEC_VMSOF\n+  UNSPEC_VIOTA\n ])\n \n (define_mode_iterator V [\n@@ -293,6 +298,8 @@\n \t\t\t      \t    UNSPEC_VASUBU UNSPEC_VASUB UNSPEC_VSMUL])\n (define_int_iterator VSAT_SHIFT_OP [UNSPEC_VSSRL UNSPEC_VSSRA])\n \n+(define_int_iterator VMISC [UNSPEC_VMSBF UNSPEC_VMSIF UNSPEC_VMSOF])\n+\n (define_int_attr order [\n   (UNSPEC_ORDERED \"o\") (UNSPEC_UNORDERED \"u\")\n ])\n@@ -309,6 +316,8 @@\n \t\t\t \t(UNSPEC_VSSRA \"vsshift\") (UNSPEC_VNCLIP \"vnclip\")\n \t\t\t\t(UNSPEC_VNCLIPU \"vnclip\")])\n \n+(define_int_attr misc_op [(UNSPEC_VMSBF \"sbf\") (UNSPEC_VMSIF \"sif\") (UNSPEC_VMSOF \"sof\")])\n+\n (define_code_iterator any_int_binop [plus minus and ior xor ashift ashiftrt lshiftrt\n   smax umax smin umin mult div udiv mod umod\n ])"}, {"sha": "c131738c75ff1bb8f4d9848aa333a569800e9660", "filename": "gcc/config/riscv/vector.md", "status": "modified", "additions": 128, "deletions": 17, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ed93bc7ed88d1164bcccbd38a840b8b0a67961c/gcc%2Fconfig%2Friscv%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ed93bc7ed88d1164bcccbd38a840b8b0a67961c/gcc%2Fconfig%2Friscv%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fvector.md?ref=1ed93bc7ed88d1164bcccbd38a840b8b0a67961c", "patch": "@@ -146,7 +146,8 @@\n \t\t\t  vialu,vshift,vicmp,vimul,vidiv,vsalu,\\\n \t\t\t  vext,viwalu,viwmul,vicalu,vnshift,\\\n \t\t\t  vimuladd,vimerge,vaalu,vsmul,vsshift,\\\n-\t\t\t  vnclip,viminmax,viwmuladd\")\n+\t\t\t  vnclip,viminmax,viwmuladd,vmpop,vmffs,vmsfs,\\\n+\t\t\t  vmiota,vmidx\")\n \t   (const_int INVALID_ATTRIBUTE)\n \t (eq_attr \"mode\" \"VNx1QI,VNx1BI\")\n \t   (symbol_ref \"riscv_vector::get_ratio(E_VNx1QImode)\")\n@@ -198,7 +199,8 @@\n (define_attr \"merge_op_idx\" \"\"\n \t(cond [(eq_attr \"type\" \"vlde,vimov,vfmov,vldm,vlds,vmalu,vldux,vldox,vicmp,\\\n \t\t\t\tvialu,vshift,viminmax,vimul,vidiv,vsalu,vext,viwalu,\\\n-\t\t\t\tviwmul,vnshift,vaalu,vsmul,vsshift,vnclip\")\n+\t\t\t\tviwmul,vnshift,vaalu,vsmul,vsshift,vnclip,vmsfs,\\\n+\t\t\t\tvmiota,vmidx\")\n \t       (const_int 2)\n \n \t       (eq_attr \"type\" \"vimerge\")\n@@ -211,7 +213,7 @@\n ;; The index of operand[] to get the avl op.\n (define_attr \"vl_op_idx\" \"\"\n   (cond [(eq_attr \"type\" \"vlde,vste,vimov,vfmov,vldm,vstm,vmalu,vsts,vstux,\\\n-\t\t\t  vstox,vext\")\n+\t\t\t  vstox,vext,vmsfs,vmiota\")\n \t   (const_int 4)\n \n \t ;; If operands[3] of \"vlds\" is not vector mode, it is pred_broadcast.\n@@ -226,16 +228,16 @@\n \t\t\t  vsshift,vnclip\")\n \t   (const_int 5)\n \n-\t (eq_attr \"type\" \"vicmp\")\n+\t (eq_attr \"type\" \"vicmp,vimuladd,viwmuladd\")\n \t   (const_int 6)\n \n-\t (eq_attr \"type\" \"vimuladd,viwmuladd\")\n-\t   (const_int 6)]\n+\t (eq_attr \"type\" \"vmpop,vmffs,vmidx\")\n+\t   (const_int 3)]\n   (const_int INVALID_ATTRIBUTE)))\n \n ;; The tail policy op value.\n (define_attr \"ta\" \"\"\n-  (cond [(eq_attr \"type\" \"vlde,vimov,vfmov,vext\")\n+  (cond [(eq_attr \"type\" \"vlde,vimov,vfmov,vext,vmiota\")\n \t   (symbol_ref \"riscv_vector::get_ta(operands[5])\")\n \n \t ;; If operands[3] of \"vlds\" is not vector mode, it is pred_broadcast.\n@@ -251,12 +253,15 @@\n \t   (symbol_ref \"riscv_vector::get_ta(operands[6])\")\n \n \t (eq_attr \"type\" \"vimuladd,viwmuladd\")\n-\t   (symbol_ref \"riscv_vector::get_ta(operands[7])\")]\n+\t   (symbol_ref \"riscv_vector::get_ta(operands[7])\")\n+\n+\t (eq_attr \"type\" \"vmidx\")\n+\t   (symbol_ref \"riscv_vector::get_ta(operands[4])\")]\n \t(const_int INVALID_ATTRIBUTE)))\n \n ;; The mask policy op value.\n (define_attr \"ma\" \"\"\n-  (cond [(eq_attr \"type\" \"vlde,vext\")\n+  (cond [(eq_attr \"type\" \"vlde,vext,vmiota\")\n \t   (symbol_ref \"riscv_vector::get_ma(operands[6])\")\n \n \t ;; If operands[3] of \"vlds\" is not vector mode, it is pred_broadcast.\n@@ -272,7 +277,10 @@\n \t   (symbol_ref \"riscv_vector::get_ma(operands[7])\")\n \n \t (eq_attr \"type\" \"vimuladd,viwmuladd\")\n-\t   (symbol_ref \"riscv_vector::get_ma(operands[8])\")]\n+\t   (symbol_ref \"riscv_vector::get_ma(operands[8])\")\n+\n+\t (eq_attr \"type\" \"vmsfs,vmidx\")\n+\t   (symbol_ref \"riscv_vector::get_ma(operands[5])\")]\n \t(const_int INVALID_ATTRIBUTE)))\n \n ;; The avl type value.\n@@ -297,7 +305,13 @@\n \t   (symbol_ref \"INTVAL (operands[5])\")\n \n \t (eq_attr \"type\" \"vimuladd,viwmuladd\")\n-\t   (symbol_ref \"INTVAL (operands[9])\")]\n+\t   (symbol_ref \"INTVAL (operands[9])\")\n+\n+\t (eq_attr \"type\" \"vmsfs,vmidx\")\n+\t   (symbol_ref \"INTVAL (operands[6])\")\n+\n+\t (eq_attr \"type\" \"vmpop,vmffs\")\n+\t   (symbol_ref \"INTVAL (operands[4])\")]\n \t(const_int INVALID_ATTRIBUTE)))\n \n ;; -----------------------------------------------------------------\n@@ -795,14 +809,15 @@\n   \"@\n    vlm.v\\t%0,%3\n    vsm.v\\t%3,%0\n-   #\n+   vmmv.m\\t%0,%3\n    vmclr.m\\t%0\n    vmset.m\\t%0\"\n   \"&& register_operand (operands[0], <MODE>mode)\n-   && register_operand (operands[3], <MODE>mode)\"\n+   && register_operand (operands[3], <MODE>mode)\n+   && INTVAL (operands[5]) == riscv_vector::VLMAX\"\n   [(set (match_dup 0) (match_dup 3))]\n   \"\"\n-  [(set_attr \"type\" \"vldm,vstm,vimov,vmalu,vmalu\")\n+  [(set_attr \"type\" \"vldm,vstm,vmalu,vmalu,vmalu\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n ;; Dedicated pattern for vsm.v instruction since we can't reuse pred_mov pattern to include\n@@ -3809,7 +3824,7 @@\n \t\treg, CONSTM1_RTX (<VM>mode), undef, operands[3], operands[4],\n \t\toperands[5], operands[6], operands[7], operands[8]));\n \t      emit_insn (\n-\t\tgen_pred_andn<vm> (operands[0], CONSTM1_RTX (<VM>mode), undef,\n+\t\tgen_pred_andnot<vm> (operands[0], CONSTM1_RTX (<VM>mode), undef,\n \t\t\t\t   operands[1], reg, operands[6], operands[8]));\n \t    }\n \t  else\n@@ -4471,6 +4486,13 @@\n ;; -------------------------------------------------------------------------------\n ;; Includes:\n ;; - 15.1 Vector Mask-Register Logical Instructions\n+;; - 15.2 Vector count population in mask vcpop.m\n+;; - 15.3 vfirst find-first-set mask bit\n+;; - 15.4 vmsbf.m set-before-first mask bit\n+;; - 15.5 vmsif.m set-including-first mask bit\n+;; - 15.6 vmsof.m set-only-first mask bit\n+;; - 15.8 Vector Iota Instruction\n+;; - 15.9 Vector Element Index Instruction\n ;; -------------------------------------------------------------------------------\n \n ;; We keep this pattern same as pred_mov so that we can gain more optimizations.\n@@ -4517,7 +4539,7 @@\n    (set_attr \"vl_op_idx\" \"5\")\n    (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[6])\"))])\n \n-(define_insn \"@pred_<optab>n<mode>\"\n+(define_insn \"@pred_<optab>not<mode>\"\n   [(set (match_operand:VB 0 \"register_operand\"                   \"=vr\")\n \t(if_then_else:VB\n \t  (unspec:VB\n@@ -4551,8 +4573,97 @@\n \t    (match_operand:VB 3 \"register_operand\"               \" vr\"))\n \t  (match_operand:VB 2 \"vector_undef_operand\"             \" vu\")))]\n   \"TARGET_VECTOR\"\n-  \"vmnot.mm\\t%0,%3\"\n+  \"vmnot.m\\t%0,%3\"\n   [(set_attr \"type\" \"vmalu\")\n    (set_attr \"mode\" \"<MODE>\")\n    (set_attr \"vl_op_idx\" \"4\")\n    (set (attr \"avl_type\") (symbol_ref \"INTVAL (operands[5])\"))])\n+\n+(define_insn \"@pred_popcount<VB:mode><P:mode>\"\n+  [(set (match_operand:P 0 \"register_operand\"               \"=r\")\n+\t(popcount:P\n+\t  (unspec:VB\n+\t    [(and:VB\n+\t       (match_operand:VB 1 \"vector_mask_operand\" \"vmWc1\")\n+\t       (match_operand:VB 2 \"register_operand\"    \"   vr\"))\n+\t     (match_operand 3 \"vector_length_operand\"    \"   rK\")\n+\t     (match_operand 4 \"const_int_operand\"        \"    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)))]\n+  \"TARGET_VECTOR\"\n+  \"vcpop.m\\t%0,%2%p1\"\n+  [(set_attr \"type\" \"vmpop\")\n+   (set_attr \"mode\" \"<VB:MODE>\")])\n+\n+(define_insn \"@pred_ffs<VB:mode><P:mode>\"\n+  [(set (match_operand:P 0 \"register_operand\"                 \"=r\")\n+\t(plus:P\n+\t  (ffs:P\n+\t    (unspec:VB\n+\t      [(and:VB\n+\t         (match_operand:VB 1 \"vector_mask_operand\" \"vmWc1\")\n+\t         (match_operand:VB 2 \"register_operand\"    \"   vr\"))\n+\t       (match_operand 3 \"vector_length_operand\"    \"   rK\")\n+\t       (match_operand 4 \"const_int_operand\"        \"    i\")\n+\t       (reg:SI VL_REGNUM)\n+\t       (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE))\n+\t  (const_int -1)))]\n+  \"TARGET_VECTOR\"\n+  \"vfirst.m\\t%0,%2%p1\"\n+  [(set_attr \"type\" \"vmffs\")\n+   (set_attr \"mode\" \"<VB:MODE>\")])\n+\n+(define_insn \"@pred_<misc_op><mode>\"\n+  [(set (match_operand:VB 0 \"register_operand\"          \"=&vr\")\n+\t(if_then_else:VB\n+\t  (unspec:VB\n+\t    [(match_operand:VB 1 \"vector_mask_operand\" \"vmWc1\")\n+\t     (match_operand 4 \"vector_length_operand\"  \"   rK\")\n+\t     (match_operand 5 \"const_int_operand\"      \"    i\")\n+\t     (match_operand 6 \"const_int_operand\"      \"    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (unspec:VB\n+\t    [(match_operand:VB 3 \"register_operand\"    \"   vr\")] VMISC)\n+\t  (match_operand:VB 2 \"vector_merge_operand\"   \"  0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vm<misc_op>.m\\t%0,%3%p1\"\n+  [(set_attr \"type\" \"vmsfs\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"@pred_iota<mode>\"\n+  [(set (match_operand:VI 0 \"register_operand\"            \"=&vr\")\n+\t(if_then_else:VI\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\" \"vmWc1\")\n+\t     (match_operand 4 \"vector_length_operand\"    \"   rK\")\n+\t     (match_operand 5 \"const_int_operand\"        \"    i\")\n+\t     (match_operand 6 \"const_int_operand\"        \"    i\")\n+\t     (match_operand 7 \"const_int_operand\"        \"    i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (unspec:VI\n+\t    [(match_operand:<VM> 3 \"register_operand\"    \"   vr\")] UNSPEC_VIOTA)\n+\t  (match_operand:VI 2 \"vector_merge_operand\"     \"  0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"viota.m\\t%0,%3%p1\"\n+  [(set_attr \"type\" \"vmiota\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"@pred_series<mode>\"\n+  [(set (match_operand:VI 0 \"register_operand\"           \"=vd, vr\")\n+\t(if_then_else:VI\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\" \" vm,Wc1\")\n+\t     (match_operand 3 \"vector_length_operand\"    \" rK, rK\")\n+\t     (match_operand 4 \"const_int_operand\"        \"  i,  i\")\n+\t     (match_operand 5 \"const_int_operand\"        \"  i,  i\")\n+\t     (match_operand 6 \"const_int_operand\"        \"  i,  i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (vec_series:VI (const_int 0) (const_int 1))\n+\t  (match_operand:VI 2 \"vector_merge_operand\"     \"0vu,0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vid.v\\t%0%p1\"\n+  [(set_attr \"type\" \"vmidx\")\n+   (set_attr \"mode\" \"<MODE>\")])"}]}