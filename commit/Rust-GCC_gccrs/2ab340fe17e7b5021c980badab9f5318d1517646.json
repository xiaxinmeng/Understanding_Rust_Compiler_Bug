{"sha": "2ab340fe17e7b5021c980badab9f5318d1517646", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmFiMzQwZmUxN2U3YjUwMjFjOTgwYmFkYWI5ZjUzMThkMTUxNzY0Ng==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2019-11-15T22:56:33Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2019-11-15T22:56:33Z"}, "message": "typeck.c (cp_truthvalue_conversion): Add tsubst_flags_t parameter and use it in calls...\n\n/cp\n2019-11-15  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* typeck.c (cp_truthvalue_conversion): Add tsubst_flags_t parameter\n\tand use it in calls; also pass the location_t of the expression to\n\tcp_build_binary_op and c_common_truthvalue_conversion.\n\t* rtti.c (build_dynamic_cast_1): Adjust call.\n\t* cvt.c (ocp_convert): Likewise.\n\t* cp-gimplify.c (cp_fold): Likewise.\n\t* cp-tree.h (cp_truthvalue_conversion): Update declaration.\n\n/testsuite\n2019-11-15  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* g++.dg/warn/Walways-true-1.C: Check locations too.\n\t* g++.dg/warn/Walways-true-2.C: Likewise.\n\t* g++.dg/warn/Walways-true-3.C: Likewise.\n\t* g++.dg/warn/Waddress-1.C: Check additional location.\n\nFrom-SVN: r278320", "tree": {"sha": "5ddf11c67b73a26f5d9f6044364c25d305ebc795", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ddf11c67b73a26f5d9f6044364c25d305ebc795"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ab340fe17e7b5021c980badab9f5318d1517646", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ab340fe17e7b5021c980badab9f5318d1517646", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ab340fe17e7b5021c980badab9f5318d1517646", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ab340fe17e7b5021c980badab9f5318d1517646/comments", "author": null, "committer": null, "parents": [{"sha": "f982d12a51cd91c7a16af22f8054bfb648fe54ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f982d12a51cd91c7a16af22f8054bfb648fe54ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f982d12a51cd91c7a16af22f8054bfb648fe54ca"}], "stats": {"total": 94, "additions": 56, "deletions": 38}, "files": [{"sha": "429ffd69e474521f0031f1683372aa787fa24ef9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ab340fe17e7b5021c980badab9f5318d1517646/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ab340fe17e7b5021c980badab9f5318d1517646/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2ab340fe17e7b5021c980badab9f5318d1517646", "patch": "@@ -1,3 +1,13 @@\n+2019-11-15  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* typeck.c (cp_truthvalue_conversion): Add tsubst_flags_t parameter\n+\tand use it in calls; also pass the location_t of the expression to\n+\tcp_build_binary_op and c_common_truthvalue_conversion.\n+\t* rtti.c (build_dynamic_cast_1): Adjust call.\n+\t* cvt.c (ocp_convert): Likewise.\n+\t* cp-gimplify.c (cp_fold): Likewise.\n+\t* cp-tree.h (cp_truthvalue_conversion): Update declaration.\n+\n 2019-11-14  Jason Merrill  <jason@redhat.com>\n \n \tImplement P1816R0, class template argument deduction for aggregates."}, {"sha": "60766978c71858d8ce3105ed12eeae2a5d7d71d6", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ab340fe17e7b5021c980badab9f5318d1517646/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ab340fe17e7b5021c980badab9f5318d1517646/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=2ab340fe17e7b5021c980badab9f5318d1517646", "patch": "@@ -2573,9 +2573,9 @@ cp_fold (tree x)\n \t{\n \t  warning_sentinel s (warn_int_in_bool_context);\n \t  if (!VOID_TYPE_P (TREE_TYPE (op1)))\n-\t    op1 = cp_truthvalue_conversion (op1);\n+\t    op1 = cp_truthvalue_conversion (op1, tf_warning_or_error);\n \t  if (!VOID_TYPE_P (TREE_TYPE (op2)))\n-\t    op2 = cp_truthvalue_conversion (op2);\n+\t    op2 = cp_truthvalue_conversion (op2, tf_warning_or_error);\n \t}\n       else if (VOID_TYPE_P (TREE_TYPE (x)))\n \t{"}, {"sha": "d6e9357385af8a2205a0c589cc35fed3a47c4bf6", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ab340fe17e7b5021c980badab9f5318d1517646/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ab340fe17e7b5021c980badab9f5318d1517646/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=2ab340fe17e7b5021c980badab9f5318d1517646", "patch": "@@ -7450,7 +7450,7 @@ enum compare_bounds_t { bounds_none, bounds_either, bounds_first };\n \n extern bool cxx_mark_addressable\t\t(tree, bool = false);\n extern int string_conv_p\t\t\t(const_tree, const_tree, int);\n-extern tree cp_truthvalue_conversion\t\t(tree);\n+extern tree cp_truthvalue_conversion\t\t(tree, tsubst_flags_t);\n extern tree contextual_conv_bool\t\t(tree, tsubst_flags_t);\n extern tree condition_conversion\t\t(tree);\n extern tree require_complete_type\t\t(tree);"}, {"sha": "bca687fd33b58a4d80f82f16bc5bd1a67488b891", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ab340fe17e7b5021c980badab9f5318d1517646/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ab340fe17e7b5021c980badab9f5318d1517646/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=2ab340fe17e7b5021c980badab9f5318d1517646", "patch": "@@ -841,13 +841,13 @@ ocp_convert (tree type, tree expr, int convtype, int flags,\n \t  if (SCOPED_ENUM_P (intype) && (convtype & CONV_STATIC))\n \t    e = build_nop (ENUM_UNDERLYING_TYPE (intype), e);\n \t  if (complain & tf_warning)\n-\t    return cp_truthvalue_conversion (e);\n+\t    return cp_truthvalue_conversion (e, complain);\n \t  else\n \t    {\n \t      /* Prevent bogus -Wint-in-bool-context warnings coming\n \t\t from c_common_truthvalue_conversion down the line.  */\n \t      warning_sentinel w (warn_int_in_bool_context);\n-\t      return cp_truthvalue_conversion (e);\n+\t      return cp_truthvalue_conversion (e, complain);\n \t    }\n \t}\n "}, {"sha": "d987f8b4d8350ba419bda7c631562537a8b96581", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ab340fe17e7b5021c980badab9f5318d1517646/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ab340fe17e7b5021c980badab9f5318d1517646/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=2ab340fe17e7b5021c980badab9f5318d1517646", "patch": "@@ -782,7 +782,7 @@ build_dynamic_cast_1 (tree type, tree expr, tsubst_flags_t complain)\n \t      tree neq;\n \n \t      result = save_expr (result);\n-\t      neq = cp_truthvalue_conversion (result);\n+\t      neq = cp_truthvalue_conversion (result, complain);\n \t      return cp_convert (type,\n \t\t\t\t build3 (COND_EXPR, TREE_TYPE (result),\n \t\t\t\t\t neq, result, bad), complain);"}, {"sha": "747ae42f9120f600e41651fcfa2415c38babe23a", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ab340fe17e7b5021c980badab9f5318d1517646/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ab340fe17e7b5021c980badab9f5318d1517646/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=2ab340fe17e7b5021c980badab9f5318d1517646", "patch": "@@ -5981,15 +5981,16 @@ cp_build_addressof (location_t loc, tree arg, tsubst_flags_t complain)\n    -1.  */\n \n tree\n-cp_truthvalue_conversion (tree expr)\n+cp_truthvalue_conversion (tree expr, tsubst_flags_t complain)\n {\n   tree type = TREE_TYPE (expr);\n+  location_t loc = cp_expr_loc_or_input_loc (expr);\n   if (TYPE_PTR_OR_PTRMEM_P (type)\n       /* Avoid ICE on invalid use of non-static member function.  */\n       || TREE_CODE (expr) == FUNCTION_DECL)\n-    return build_binary_op (input_location, NE_EXPR, expr, nullptr_node, true);\n+    return cp_build_binary_op (loc, NE_EXPR, expr, nullptr_node, complain);\n   else\n-    return c_common_truthvalue_conversion (input_location, expr);\n+    return c_common_truthvalue_conversion (loc, expr);\n }\n \n /* Returns EXPR contextually converted to bool.  */"}, {"sha": "997096cf1d67b1fdeae6d217b06a02cd3c4fa6e3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ab340fe17e7b5021c980badab9f5318d1517646/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ab340fe17e7b5021c980badab9f5318d1517646/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2ab340fe17e7b5021c980badab9f5318d1517646", "patch": "@@ -1,3 +1,10 @@\n+2019-11-15  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* g++.dg/warn/Walways-true-1.C: Check locations too.\n+\t* g++.dg/warn/Walways-true-2.C: Likewise.\n+\t* g++.dg/warn/Walways-true-3.C: Likewise.\n+\t* g++.dg/warn/Waddress-1.C: Check additional location.\n+\n 2019-11-15  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gcc.dg/c2x-attr-maybe_unused-1.c,"}, {"sha": "1783622230b9fb1805595366e1522b000beeb32b", "filename": "gcc/testsuite/g++.dg/warn/Waddress-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ab340fe17e7b5021c980badab9f5318d1517646/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWaddress-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ab340fe17e7b5021c980badab9f5318d1517646/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWaddress-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWaddress-1.C?ref=2ab340fe17e7b5021c980badab9f5318d1517646", "patch": "@@ -13,7 +13,7 @@ S s;\n T t;\n double d;\n \n-void f()  { if (z) z(); }               // { dg-warning \"address\" }\n+void f()  { if (z) z(); }               // { dg-warning \"17:address\" }\n \n void gl() { if (z != 0) z(); }          // { dg-warning \"19:address\" }\n void hl() { if (z != (ptrf)0) z(); }    // { dg-warning \"19:address\" }"}, {"sha": "e74114d8f1f1c6b426a9c6f7a49b595d07f53309", "filename": "gcc/testsuite/g++.dg/warn/Walways-true-1.C", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ab340fe17e7b5021c980badab9f5318d1517646/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWalways-true-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ab340fe17e7b5021c980badab9f5318d1517646/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWalways-true-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWalways-true-1.C?ref=2ab340fe17e7b5021c980badab9f5318d1517646", "patch": "@@ -12,46 +12,46 @@ void\n bar (int a)\n {\n  lab:\n-  if (foo)\t// { dg-warning \"always evaluate as|never be NULL\" \"correct warning\" }\n+  if (foo)\t// { dg-warning \"7:the address of .int foo\\\\(int\\\\). will never be NULL\" \"correct warning\" }\n     foo (0);\n   if (foo (1))\n     ;\n-  if (&i)\t// { dg-warning \"always evaluate as|never be NULL\" \"correct warning\" }\n+  if (&i)\t// { dg-warning \"7:the address of .i. will never be NULL\" \"correct warning\" }\n     foo (2);\n   if (i)\n     foo (3);\n-  if (&a)\t// { dg-warning \"always evaluate as|never be NULL\" \"correct warning\" }\n+  if (&a)\t// { dg-warning \"7:the address of .a. will never be NULL\" \"correct warning\" }\n     foo (4);\n   if (a)\n     foo (5);\n-  if (&&lab)\t// { dg-warning \"always evaluate as|never be NULL\" \"correct warning\" }\n+  if (&&lab)\t// { dg-warning \"7:the address of .lab. will never be NULL\" \"correct warning\" }\n     foo (6);\n-  if (foo == 0)\t// { dg-warning \"never be NULL\" \"correct warning\" }\n+  if (foo == 0)\t// { dg-warning \"11:the address of .int foo\\\\(int\\\\). will never be NULL\" \"correct warning\" }\n     foo (7);\n   if (foo (1) == 0)\n     foo (8);\n-  if (&i == 0)\t// { dg-warning \"never be NULL\" \"correct warning\" }\n+  if (&i == 0)\t// { dg-warning \"10:the address of .i. will never be NULL\" \"correct warning\" }\n     foo (9);\n   if (i == 0)\n     foo (10);\n-  if (&a == 0)\t// { dg-warning \"never be NULL\" \"correct warning\" }\n+  if (&a == 0)\t// { dg-warning \"10:the address of .a. will never be NULL\" \"correct warning\" }\n     foo (11);\n   if (a == 0)\n     foo (12);\n-  if (&&lab == 0) // { dg-warning \"never be NULL\" \"correct warning\" }\n+  if (&&lab == 0) // { dg-warning \"13:the address of .lab. will never be NULL\" \"correct warning\" }\n     foo (13);\n-  if (0 == foo)\t// { dg-warning \"never be NULL\" \"correct warning\" }\n+  if (0 == foo)\t// { dg-warning \"9:the address of .int foo\\\\(int\\\\). will never be NULL\" \"correct warning\" }\n     foo (14);\n   if (0 == foo (1))\n     foo (15);\n-  if (0 == &i)\t// { dg-warning \"never be NULL\" \"correct warning\" }\n+  if (0 == &i)\t// { dg-warning \"9:the address of .i. will never be NULL\" \"correct warning\" }\n     foo (16);\n   if (0 == i)\n     foo (17);\n-  if (0 == &a)\t// { dg-warning \"never be NULL\" \"correct warning\" }\n+  if (0 == &a)\t// { dg-warning \"9:the address of .a. will never be NULL\" \"correct warning\" }\n     foo (18);\n   if (0 == a)\n     foo (19);\n-  if (0 == &&lab) // { dg-warning \"never be NULL\" \"correct warning\" }\n+  if (0 == &&lab) // { dg-warning \"9:the address of .lab. will never be NULL\" \"correct warning\" }\n     foo (20);\n }"}, {"sha": "29a80e5c1132e26cb020a9d044391ace4ec8b900", "filename": "gcc/testsuite/g++.dg/warn/Walways-true-2.C", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ab340fe17e7b5021c980badab9f5318d1517646/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWalways-true-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ab340fe17e7b5021c980badab9f5318d1517646/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWalways-true-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWalways-true-2.C?ref=2ab340fe17e7b5021c980badab9f5318d1517646", "patch": "@@ -23,11 +23,11 @@ bar (int a)\n     foo (2);\n   if (i)\n     foo (3);\n-  if (&a)\t// { dg-warning \"always evaluate as|never be NULL\" \"correct warning\" }\n+  if (&a)\t// { dg-warning \"7:the address of .a. will never be NULL\" \"correct warning\" }\n     foo (4);\n   if (a)\n     foo (5);\n-  if (&&lab)\t// { dg-warning \"always evaluate as|never be NULL\" \"correct warning\" }\n+  if (&&lab)\t// { dg-warning \"7:the address of .lab. will never be NULL\" \"correct warning\" }\n     foo (6);\n   if (foo == 0)\n     foo (7);\n@@ -37,11 +37,11 @@ bar (int a)\n     foo (9);\n   if (i == 0)\n     foo (10);\n-  if (&a == 0)\t// { dg-warning \"never be NULL\" \"correct warning\" }\n+  if (&a == 0)\t// { dg-warning \"10:the address of .a. will never be NULL\" \"correct warning\" }\n     foo (11);\n   if (a == 0)\n     foo (12);\n-  if (&&lab == 0) // { dg-warning \"never be NULL\" \"correct warning\" }\n+  if (&&lab == 0) // { dg-warning \"13:the address of .lab. will never be NULL\" \"correct warning\" }\n     foo (13);\n   if (0 == foo)\n     foo (14);\n@@ -51,10 +51,10 @@ bar (int a)\n     foo (16);\n   if (0 == i)\n     foo (17);\n-  if (0 == &a)\t// { dg-warning \"never be NULL\" \"correct warning\" }\n+  if (0 == &a)\t// { dg-warning \"9:the address of .a. will never be NULL\" \"correct warning\" }\n     foo (18);\n   if (0 == a)\n     foo (19);\n-  if (0 == &&lab) // { dg-warning \"never be NULL\" \"correct warning\" }\n+  if (0 == &&lab) // { dg-warning \"9:the address of .lab. will never be NULL\" \"correct warning\" }\n     foo (20);\n }"}, {"sha": "0291328d415eccbaace32265daf31fde57bb404c", "filename": "gcc/testsuite/g++.dg/warn/Walways-true-3.C", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ab340fe17e7b5021c980badab9f5318d1517646/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWalways-true-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ab340fe17e7b5021c980badab9f5318d1517646/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWalways-true-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWalways-true-3.C?ref=2ab340fe17e7b5021c980badab9f5318d1517646", "patch": "@@ -11,36 +11,36 @@ bar (int &a)\n {\n   int &b = a;\n \n-  if ((int *)&a) // { dg-warning \"address of\" }\n+  if ((int *)&a) // { dg-warning \"7:the compiler can assume that the address of\" }\n     foo ();\n \n-  if (&b) // { dg-warning \"address of\" }\n+  if (&b) // { dg-warning \"7:the compiler can assume that the address of\" }\n     foo ();\n \n-  if (!&c) // { dg-warning \"address of\" }\n+  if (!&c) // { dg-warning \"8:the compiler can assume that the address of\" }\n     foo ();\n \n-  if (!&(int &)(int &)a) // { dg-warning \"address of\" }\n+  if (!&(int &)(int &)a) // { dg-warning \"8:the compiler can assume that the address of\" }\n     foo ();\n \n-  if (&a == 0) // { dg-warning \"never be NULL\" }\n+  if (&a == 0) // { dg-warning \"10:the compiler can assume that the address of\" }\n     foo ();\n \n-  if (&b != 0) // { dg-warning \"never be NULL\" }\n+  if (&b != 0) // { dg-warning \"10:the compiler can assume that the address of\" }\n     foo ();\n \n-  if (0 == &(int &)(int &)c) // { dg-warning \"never be NULL\" }\n+  if (0 == &(int &)(int &)c) // { dg-warning \"9:the compiler can assume that the address of\" }\n     foo ();\n \n-  if (&a != (int *)0) // { dg-warning \"never be NULL\" }\n+  if (&a != (int *)0) // { dg-warning \"10:the compiler can assume that the address of\" }\n     foo ();\n }\n \n bool\n bar_1 (int &a)\n {\n   if (d == 5)\n-    return &a; // { dg-warning \"address of\" }\n+    return &a; // { dg-warning \"12:the compiler can assume that the address of\" }\n   else\n-    return !&(int &)(int &)a; // { dg-warning \"address of\" }\n+    return !&(int &)(int &)a; // { dg-warning \"13:the compiler can assume that the address of\" }\n }"}]}