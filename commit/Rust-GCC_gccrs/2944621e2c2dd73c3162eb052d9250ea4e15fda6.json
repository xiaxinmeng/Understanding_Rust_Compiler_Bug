{"sha": "2944621e2c2dd73c3162eb052d9250ea4e15fda6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjk0NDYyMWUyYzJkZDczYzMxNjJlYjA1MmQ5MjUwZWE0ZTE1ZmRhNg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-01-25T16:44:30Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-01-25T16:44:30Z"}, "message": "Avoid including all of <random> in <algorithm>\n\n\tPR libstdc++/69464\n\t* include/Makefile.am: Add new header.\n\t* include/Makefile.in: Regenerate.\n\t* include/bits/random.h (uniform_int_distribution): Move to\n\tbits/uniform_int_dist.h.\n\t* include/bits/random.tcc (uniform_int_distribution::operator(),\n\tuniform_int_distribution::__generate_impl): Likewise.\n\t* include/bits/uniform_int_dist.h: New header.\n\t* include/bits/stl_algo.h [__cplusplus >= 201103L]: Include\n\t<bits/uniform_int_dist.h> instead of <random>.\n\t* testsuite/20_util/specialized_algorithms/uninitialized_copy/\n\tmove_iterators/1.cc: Include correct header for uninitialized_copy.\n\t* testsuite/20_util/specialized_algorithms/uninitialized_copy_n/\n\tmove_iterators/1.cc: Likewise.\n\t* testsuite/25_algorithms/nth_element/58800.cc: Include correct\n\theader for vector.\n\t* testsuite/26_numerics/random/pr60037-neg.cc: Adjust dg-error lines.\n\nFrom-SVN: r232798", "tree": {"sha": "e845f636dd8ae2c084b0b41d80d87fdcd09598df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e845f636dd8ae2c084b0b41d80d87fdcd09598df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2944621e2c2dd73c3162eb052d9250ea4e15fda6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2944621e2c2dd73c3162eb052d9250ea4e15fda6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2944621e2c2dd73c3162eb052d9250ea4e15fda6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2944621e2c2dd73c3162eb052d9250ea4e15fda6/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "685c8785fd8b89fae4ae17abaf02a50c7408c56a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/685c8785fd8b89fae4ae17abaf02a50c7408c56a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/685c8785fd8b89fae4ae17abaf02a50c7408c56a"}], "stats": {"total": 719, "additions": 396, "deletions": 323}, "files": [{"sha": "bebe638edce35fb67134bf7312f946ec15109de8", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2944621e2c2dd73c3162eb052d9250ea4e15fda6/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2944621e2c2dd73c3162eb052d9250ea4e15fda6/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2944621e2c2dd73c3162eb052d9250ea4e15fda6", "patch": "@@ -1,3 +1,23 @@\n+2016-01-25  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/69464\n+\t* include/Makefile.am: Add new header.\n+\t* include/Makefile.in: Regenerate.\n+\t* include/bits/random.h (uniform_int_distribution): Move to\n+\tbits/uniform_int_dist.h.\n+\t* include/bits/random.tcc (uniform_int_distribution::operator(),\n+\tuniform_int_distribution::__generate_impl): Likewise.\n+\t* include/bits/uniform_int_dist.h: New header.\n+\t* include/bits/stl_algo.h [__cplusplus >= 201103L]: Include\n+\t<bits/uniform_int_dist.h> instead of <random>.\n+\t* testsuite/20_util/specialized_algorithms/uninitialized_copy/\n+\tmove_iterators/1.cc: Include correct header for uninitialized_copy.\n+\t* testsuite/20_util/specialized_algorithms/uninitialized_copy_n/\n+\tmove_iterators/1.cc: Likewise.\n+\t* testsuite/25_algorithms/nth_element/58800.cc: Include correct\n+\theader for vector.\n+\t* testsuite/26_numerics/random/pr60037-neg.cc: Adjust dg-error lines.\n+\n 2016-01-23  John David Anglin  <danglin@gcc.gnu.org>\n \n \tPR libstdc++/69446"}, {"sha": "0b34c3c01d3fd739a3259ee747f207abfc9e5041", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2944621e2c2dd73c3162eb052d9250ea4e15fda6/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2944621e2c2dd73c3162eb052d9250ea4e15fda6/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=2944621e2c2dd73c3162eb052d9250ea4e15fda6", "patch": "@@ -180,6 +180,7 @@ bits_headers = \\\n \t${bits_srcdir}/stl_vector.h \\\n \t${bits_srcdir}/streambuf.tcc \\\n \t${bits_srcdir}/stringfwd.h \\\n+\t${bits_srcdir}/uniform_int_dist.h \\\n \t${bits_srcdir}/unique_ptr.h \\\n \t${bits_srcdir}/unordered_map.h \\\n \t${bits_srcdir}/unordered_set.h \\"}, {"sha": "3bbd3d7724584f5f176a8556b428ccc9848ca2b3", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2944621e2c2dd73c3162eb052d9250ea4e15fda6/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2944621e2c2dd73c3162eb052d9250ea4e15fda6/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=2944621e2c2dd73c3162eb052d9250ea4e15fda6", "patch": "@@ -470,6 +470,7 @@ bits_headers = \\\n \t${bits_srcdir}/stl_vector.h \\\n \t${bits_srcdir}/streambuf.tcc \\\n \t${bits_srcdir}/stringfwd.h \\\n+\t${bits_srcdir}/uniform_int_dist.h \\\n \t${bits_srcdir}/unique_ptr.h \\\n \t${bits_srcdir}/unordered_map.h \\\n \t${bits_srcdir}/unordered_set.h \\"}, {"sha": "1babe8091659c1f7da57895d776bea4c1ec3b95b", "filename": "libstdc++-v3/include/bits/random.h", "status": "modified", "additions": 2, "deletions": 166, "changes": 168, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2944621e2c2dd73c3162eb052d9250ea4e15fda6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2944621e2c2dd73c3162eb052d9250ea4e15fda6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h?ref=2944621e2c2dd73c3162eb052d9250ea4e15fda6", "patch": "@@ -32,6 +32,7 @@\n #define _RANDOM_H 1\n \n #include <vector>\n+#include <bits/uniform_int_dist.h>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n@@ -149,14 +150,6 @@ _GLIBCXX_END_NAMESPACE_VERSION\n       __mod(_Tp __x)\n       { return _Mod<_Tp, __m, __a, __c>::__calc(__x); }\n \n-    /* Determine whether number is a power of 2.  */\n-    template<typename _Tp>\n-      inline bool\n-      _Power_of_2(_Tp __x)\n-      {\n-\treturn ((__x - 1) & __x) == 0;\n-      };\n-\n     /*\n      * An adaptor class for converting the output of any Generator into\n      * the input for a specific Distribution.\n@@ -1656,164 +1649,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * @{\n    */\n \n-  /**\n-   * @brief Uniform discrete distribution for random numbers.\n-   * A discrete random distribution on the range @f$[min, max]@f$ with equal\n-   * probability throughout the range.\n-   */\n-  template<typename _IntType = int>\n-    class uniform_int_distribution\n-    {\n-      static_assert(std::is_integral<_IntType>::value,\n-\t\t    \"template argument not an integral type\");\n-\n-    public:\n-      /** The type of the range of the distribution. */\n-      typedef _IntType result_type;\n-      /** Parameter type. */\n-      struct param_type\n-      {\n-\ttypedef uniform_int_distribution<_IntType> distribution_type;\n-\n-\texplicit\n-\tparam_type(_IntType __a = 0,\n-\t\t   _IntType __b = std::numeric_limits<_IntType>::max())\n-\t: _M_a(__a), _M_b(__b)\n-\t{\n-\t  __glibcxx_assert(_M_a <= _M_b);\n-\t}\n-\n-\tresult_type\n-\ta() const\n-\t{ return _M_a; }\n-\n-\tresult_type\n-\tb() const\n-\t{ return _M_b; }\n-\n-\tfriend bool\n-\toperator==(const param_type& __p1, const param_type& __p2)\n-\t{ return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }\n-\n-      private:\n-\t_IntType _M_a;\n-\t_IntType _M_b;\n-      };\n-\n-    public:\n-      /**\n-       * @brief Constructs a uniform distribution object.\n-       */\n-      explicit\n-      uniform_int_distribution(_IntType __a = 0,\n-\t\t\t   _IntType __b = std::numeric_limits<_IntType>::max())\n-      : _M_param(__a, __b)\n-      { }\n-\n-      explicit\n-      uniform_int_distribution(const param_type& __p)\n-      : _M_param(__p)\n-      { }\n-\n-      /**\n-       * @brief Resets the distribution state.\n-       *\n-       * Does nothing for the uniform integer distribution.\n-       */\n-      void\n-      reset() { }\n-\n-      result_type\n-      a() const\n-      { return _M_param.a(); }\n-\n-      result_type\n-      b() const\n-      { return _M_param.b(); }\n-\n-      /**\n-       * @brief Returns the parameter set of the distribution.\n-       */\n-      param_type\n-      param() const\n-      { return _M_param; }\n-\n-      /**\n-       * @brief Sets the parameter set of the distribution.\n-       * @param __param The new parameter set of the distribution.\n-       */\n-      void\n-      param(const param_type& __param)\n-      { _M_param = __param; }\n-\n-      /**\n-       * @brief Returns the inclusive lower bound of the distribution range.\n-       */\n-      result_type\n-      min() const\n-      { return this->a(); }\n-\n-      /**\n-       * @brief Returns the inclusive upper bound of the distribution range.\n-       */\n-      result_type\n-      max() const\n-      { return this->b(); }\n-\n-      /**\n-       * @brief Generating functions.\n-       */\n-      template<typename _UniformRandomNumberGenerator>\n-\tresult_type\n-\toperator()(_UniformRandomNumberGenerator& __urng)\n-        { return this->operator()(__urng, _M_param); }\n-\n-      template<typename _UniformRandomNumberGenerator>\n-\tresult_type\n-\toperator()(_UniformRandomNumberGenerator& __urng,\n-\t\t   const param_type& __p);\n-\n-      template<typename _ForwardIterator,\n-\t       typename _UniformRandomNumberGenerator>\n-\tvoid\n-\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n-\t\t   _UniformRandomNumberGenerator& __urng)\n-\t{ this->__generate(__f, __t, __urng, _M_param); }\n-\n-      template<typename _ForwardIterator,\n-\t       typename _UniformRandomNumberGenerator>\n-\tvoid\n-\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n-\t\t   _UniformRandomNumberGenerator& __urng,\n-\t\t   const param_type& __p)\n-\t{ this->__generate_impl(__f, __t, __urng, __p); }\n-\n-      template<typename _UniformRandomNumberGenerator>\n-\tvoid\n-\t__generate(result_type* __f, result_type* __t,\n-\t\t   _UniformRandomNumberGenerator& __urng,\n-\t\t   const param_type& __p)\n-\t{ this->__generate_impl(__f, __t, __urng, __p); }\n-\n-      /**\n-       * @brief Return true if two uniform integer distributions have\n-       *        the same parameters.\n-       */\n-      friend bool\n-      operator==(const uniform_int_distribution& __d1,\n-\t\t const uniform_int_distribution& __d2)\n-      { return __d1._M_param == __d2._M_param; }\n-\n-    private:\n-      template<typename _ForwardIterator,\n-\t       typename _UniformRandomNumberGenerator>\n-\tvoid\n-\t__generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n-\t\t\t_UniformRandomNumberGenerator& __urng,\n-\t\t\tconst param_type& __p);\n-\n-      param_type _M_param;\n-    };\n+  // std::uniform_int_distribution is defined in <bits/random_uid.h>\n \n   /**\n    * @brief Return true if two uniform integer distributions have"}, {"sha": "7dfc721e55ff50a939c4ce128d7486ce76e06049", "filename": "libstdc++-v3/include/bits/random.tcc", "status": "modified", "additions": 0, "deletions": 152, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2944621e2c2dd73c3162eb052d9250ea4e15fda6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2944621e2c2dd73c3162eb052d9250ea4e15fda6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc?ref=2944621e2c2dd73c3162eb052d9250ea4e15fda6", "patch": "@@ -872,158 +872,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n \n-  template<typename _IntType>\n-    template<typename _UniformRandomNumberGenerator>\n-      typename uniform_int_distribution<_IntType>::result_type\n-      uniform_int_distribution<_IntType>::\n-      operator()(_UniformRandomNumberGenerator& __urng,\n-\t\t const param_type& __param)\n-      {\n-\ttypedef typename _UniformRandomNumberGenerator::result_type\n-\t  _Gresult_type;\n-\ttypedef typename std::make_unsigned<result_type>::type __utype;\n-\ttypedef typename std::common_type<_Gresult_type, __utype>::type\n-\t  __uctype;\n-\n-\tconst __uctype __urngmin = __urng.min();\n-\tconst __uctype __urngmax = __urng.max();\n-\tconst __uctype __urngrange = __urngmax - __urngmin;\n-\tconst __uctype __urange\n-\t  = __uctype(__param.b()) - __uctype(__param.a());\n-\n-\t__uctype __ret;\n-\n-\tif (__urngrange > __urange)\n-\t  {\n-\t    // downscaling\n-\t    const __uctype __uerange = __urange + 1; // __urange can be zero\n-\t    const __uctype __scaling = __urngrange / __uerange;\n-\t    const __uctype __past = __uerange * __scaling;\n-\t    do\n-\t      __ret = __uctype(__urng()) - __urngmin;\n-\t    while (__ret >= __past);\n-\t    __ret /= __scaling;\n-\t  }\n-\telse if (__urngrange < __urange)\n-\t  {\n-\t    // upscaling\n-\t    /*\n-\t      Note that every value in [0, urange]\n-\t      can be written uniquely as\n-\n-\t      (urngrange + 1) * high + low\n-\n-\t      where\n-\n-\t      high in [0, urange / (urngrange + 1)]\n-\n-\t      and\n-\t\n-\t      low in [0, urngrange].\n-\t    */\n-\t    __uctype __tmp; // wraparound control\n-\t    do\n-\t      {\n-\t\tconst __uctype __uerngrange = __urngrange + 1;\n-\t\t__tmp = (__uerngrange * operator()\n-\t\t\t (__urng, param_type(0, __urange / __uerngrange)));\n-\t\t__ret = __tmp + (__uctype(__urng()) - __urngmin);\n-\t      }\n-\t    while (__ret > __urange || __ret < __tmp);\n-\t  }\n-\telse\n-\t  __ret = __uctype(__urng()) - __urngmin;\n-\n-\treturn __ret + __param.a();\n-      }\n-\n-\n-  template<typename _IntType>\n-    template<typename _ForwardIterator,\n-\t     typename _UniformRandomNumberGenerator>\n-      void\n-      uniform_int_distribution<_IntType>::\n-      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n-\t\t      _UniformRandomNumberGenerator& __urng,\n-\t\t      const param_type& __param)\n-      {\n-\t__glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n-\ttypedef typename _UniformRandomNumberGenerator::result_type\n-\t  _Gresult_type;\n-\ttypedef typename std::make_unsigned<result_type>::type __utype;\n-\ttypedef typename std::common_type<_Gresult_type, __utype>::type\n-\t  __uctype;\n-\n-\tconst __uctype __urngmin = __urng.min();\n-\tconst __uctype __urngmax = __urng.max();\n-\tconst __uctype __urngrange = __urngmax - __urngmin;\n-\tconst __uctype __urange\n-\t  = __uctype(__param.b()) - __uctype(__param.a());\n-\n-\t__uctype __ret;\n-\n-\tif (__urngrange > __urange)\n-\t  {\n-\t    if (__detail::_Power_of_2(__urngrange + 1)\n-\t\t&& __detail::_Power_of_2(__urange + 1))\n-\t      {\n-\t\twhile (__f != __t)\n-\t\t  {\n-\t\t    __ret = __uctype(__urng()) - __urngmin;\n-\t\t    *__f++ = (__ret & __urange) + __param.a();\n-\t\t  }\n-\t      }\n-\t    else\n-\t      {\n-\t\t// downscaling\n-\t\tconst __uctype __uerange = __urange + 1; // __urange can be zero\n-\t\tconst __uctype __scaling = __urngrange / __uerange;\n-\t\tconst __uctype __past = __uerange * __scaling;\n-\t\twhile (__f != __t)\n-\t\t  {\n-\t\t    do\n-\t\t      __ret = __uctype(__urng()) - __urngmin;\n-\t\t    while (__ret >= __past);\n-\t\t    *__f++ = __ret / __scaling + __param.a();\n-\t\t  }\n-\t      }\n-\t  }\n-\telse if (__urngrange < __urange)\n-\t  {\n-\t    // upscaling\n-\t    /*\n-\t      Note that every value in [0, urange]\n-\t      can be written uniquely as\n-\n-\t      (urngrange + 1) * high + low\n-\n-\t      where\n-\n-\t      high in [0, urange / (urngrange + 1)]\n-\n-\t      and\n-\n-\t      low in [0, urngrange].\n-\t    */\n-\t    __uctype __tmp; // wraparound control\n-\t    while (__f != __t)\n-\t      {\n-\t\tdo\n-\t\t  {\n-\t\t    const __uctype __uerngrange = __urngrange + 1;\n-\t\t    __tmp = (__uerngrange * operator()\n-\t\t\t     (__urng, param_type(0, __urange / __uerngrange)));\n-\t\t    __ret = __tmp + (__uctype(__urng()) - __urngmin);\n-\t\t  }\n-\t\twhile (__ret > __urange || __ret < __tmp);\n-\t\t*__f++ = __ret;\n-\t      }\n-\t  }\n-\telse\n-\t  while (__f != __t)\n-\t    *__f++ = __uctype(__urng()) - __urngmin + __param.a();\n-      }\n-\n   template<typename _IntType, typename _CharT, typename _Traits>\n     std::basic_ostream<_CharT, _Traits>&\n     operator<<(std::basic_ostream<_CharT, _Traits>& __os,"}, {"sha": "fbd03a79e1ebdfd4624221e7d8d2e37a53406288", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2944621e2c2dd73c3162eb052d9250ea4e15fda6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2944621e2c2dd73c3162eb052d9250ea4e15fda6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=2944621e2c2dd73c3162eb052d9250ea4e15fda6", "patch": "@@ -63,7 +63,7 @@\n #include <bits/predefined_ops.h>\n \n #if __cplusplus >= 201103L\n-#include <random>     // for std::uniform_int_distribution\n+#include <bits/uniform_int_dist.h>\n #endif\n \n // See concept_check.h for the __glibcxx_*_requires macros."}, {"sha": "393aa77b7f015920a2adac9df97b1f48e16cbda8", "filename": "libstdc++-v3/include/bits/uniform_int_dist.h", "status": "added", "additions": 366, "deletions": 0, "changes": 366, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2944621e2c2dd73c3162eb052d9250ea4e15fda6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funiform_int_dist.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2944621e2c2dd73c3162eb052d9250ea4e15fda6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funiform_int_dist.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funiform_int_dist.h?ref=2944621e2c2dd73c3162eb052d9250ea4e15fda6", "patch": "@@ -0,0 +1,366 @@\n+// Class template uniform_int_distribution -*- C++ -*-\n+\n+// Copyright (C) 2009-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/**\n+ * @file bits/uniform_int_dist.h\n+ *  This is an internal header file, included by other library headers.\n+ *  Do not attempt to use it directly. @headername{random}\n+ */\n+\n+#ifndef _GLIBCXX_BITS_UNIFORM_INT_DIST_H\n+#define _GLIBCXX_BITS_UNIFORM_INT_DIST_H\n+\n+#include <type_traits>\n+#include <limits>\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  namespace __detail\n+  {\n+    /* Determine whether number is a power of 2.  */\n+    template<typename _Tp>\n+      inline bool\n+      _Power_of_2(_Tp __x)\n+      {\n+\treturn ((__x - 1) & __x) == 0;\n+      };\n+  }\n+\n+  /**\n+   * @brief Uniform discrete distribution for random numbers.\n+   * A discrete random distribution on the range @f$[min, max]@f$ with equal\n+   * probability throughout the range.\n+   */\n+  template<typename _IntType = int>\n+    class uniform_int_distribution\n+    {\n+      static_assert(std::is_integral<_IntType>::value,\n+\t\t    \"template argument not an integral type\");\n+\n+    public:\n+      /** The type of the range of the distribution. */\n+      typedef _IntType result_type;\n+      /** Parameter type. */\n+      struct param_type\n+      {\n+\ttypedef uniform_int_distribution<_IntType> distribution_type;\n+\n+\texplicit\n+\tparam_type(_IntType __a = 0,\n+\t\t   _IntType __b = std::numeric_limits<_IntType>::max())\n+\t: _M_a(__a), _M_b(__b)\n+\t{\n+\t  __glibcxx_assert(_M_a <= _M_b);\n+\t}\n+\n+\tresult_type\n+\ta() const\n+\t{ return _M_a; }\n+\n+\tresult_type\n+\tb() const\n+\t{ return _M_b; }\n+\n+\tfriend bool\n+\toperator==(const param_type& __p1, const param_type& __p2)\n+\t{ return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }\n+\n+      private:\n+\t_IntType _M_a;\n+\t_IntType _M_b;\n+      };\n+\n+    public:\n+      /**\n+       * @brief Constructs a uniform distribution object.\n+       */\n+      explicit\n+      uniform_int_distribution(_IntType __a = 0,\n+\t\t\t   _IntType __b = std::numeric_limits<_IntType>::max())\n+      : _M_param(__a, __b)\n+      { }\n+\n+      explicit\n+      uniform_int_distribution(const param_type& __p)\n+      : _M_param(__p)\n+      { }\n+\n+      /**\n+       * @brief Resets the distribution state.\n+       *\n+       * Does nothing for the uniform integer distribution.\n+       */\n+      void\n+      reset() { }\n+\n+      result_type\n+      a() const\n+      { return _M_param.a(); }\n+\n+      result_type\n+      b() const\n+      { return _M_param.b(); }\n+\n+      /**\n+       * @brief Returns the parameter set of the distribution.\n+       */\n+      param_type\n+      param() const\n+      { return _M_param; }\n+\n+      /**\n+       * @brief Sets the parameter set of the distribution.\n+       * @param __param The new parameter set of the distribution.\n+       */\n+      void\n+      param(const param_type& __param)\n+      { _M_param = __param; }\n+\n+      /**\n+       * @brief Returns the inclusive lower bound of the distribution range.\n+       */\n+      result_type\n+      min() const\n+      { return this->a(); }\n+\n+      /**\n+       * @brief Returns the inclusive upper bound of the distribution range.\n+       */\n+      result_type\n+      max() const\n+      { return this->b(); }\n+\n+      /**\n+       * @brief Generating functions.\n+       */\n+      template<typename _UniformRandomNumberGenerator>\n+\tresult_type\n+\toperator()(_UniformRandomNumberGenerator& __urng)\n+        { return this->operator()(__urng, _M_param); }\n+\n+      template<typename _UniformRandomNumberGenerator>\n+\tresult_type\n+\toperator()(_UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p);\n+\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t   _UniformRandomNumberGenerator& __urng)\n+\t{ this->__generate(__f, __t, __urng, _M_param); }\n+\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{ this->__generate_impl(__f, __t, __urng, __p); }\n+\n+      template<typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(result_type* __f, result_type* __t,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{ this->__generate_impl(__f, __t, __urng, __p); }\n+\n+      /**\n+       * @brief Return true if two uniform integer distributions have\n+       *        the same parameters.\n+       */\n+      friend bool\n+      operator==(const uniform_int_distribution& __d1,\n+\t\t const uniform_int_distribution& __d2)\n+      { return __d1._M_param == __d2._M_param; }\n+\n+    private:\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t\t_UniformRandomNumberGenerator& __urng,\n+\t\t\tconst param_type& __p);\n+\n+      param_type _M_param;\n+    };\n+\n+  template<typename _IntType>\n+    template<typename _UniformRandomNumberGenerator>\n+      typename uniform_int_distribution<_IntType>::result_type\n+      uniform_int_distribution<_IntType>::\n+      operator()(_UniformRandomNumberGenerator& __urng,\n+\t\t const param_type& __param)\n+      {\n+\ttypedef typename _UniformRandomNumberGenerator::result_type\n+\t  _Gresult_type;\n+\ttypedef typename std::make_unsigned<result_type>::type __utype;\n+\ttypedef typename std::common_type<_Gresult_type, __utype>::type\n+\t  __uctype;\n+\n+\tconst __uctype __urngmin = __urng.min();\n+\tconst __uctype __urngmax = __urng.max();\n+\tconst __uctype __urngrange = __urngmax - __urngmin;\n+\tconst __uctype __urange\n+\t  = __uctype(__param.b()) - __uctype(__param.a());\n+\n+\t__uctype __ret;\n+\n+\tif (__urngrange > __urange)\n+\t  {\n+\t    // downscaling\n+\t    const __uctype __uerange = __urange + 1; // __urange can be zero\n+\t    const __uctype __scaling = __urngrange / __uerange;\n+\t    const __uctype __past = __uerange * __scaling;\n+\t    do\n+\t      __ret = __uctype(__urng()) - __urngmin;\n+\t    while (__ret >= __past);\n+\t    __ret /= __scaling;\n+\t  }\n+\telse if (__urngrange < __urange)\n+\t  {\n+\t    // upscaling\n+\t    /*\n+\t      Note that every value in [0, urange]\n+\t      can be written uniquely as\n+\n+\t      (urngrange + 1) * high + low\n+\n+\t      where\n+\n+\t      high in [0, urange / (urngrange + 1)]\n+\n+\t      and\n+\n+\t      low in [0, urngrange].\n+\t    */\n+\t    __uctype __tmp; // wraparound control\n+\t    do\n+\t      {\n+\t\tconst __uctype __uerngrange = __urngrange + 1;\n+\t\t__tmp = (__uerngrange * operator()\n+\t\t\t (__urng, param_type(0, __urange / __uerngrange)));\n+\t\t__ret = __tmp + (__uctype(__urng()) - __urngmin);\n+\t      }\n+\t    while (__ret > __urange || __ret < __tmp);\n+\t  }\n+\telse\n+\t  __ret = __uctype(__urng()) - __urngmin;\n+\n+\treturn __ret + __param.a();\n+      }\n+\n+\n+  template<typename _IntType>\n+    template<typename _ForwardIterator,\n+\t     typename _UniformRandomNumberGenerator>\n+      void\n+      uniform_int_distribution<_IntType>::\n+      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t      _UniformRandomNumberGenerator& __urng,\n+\t\t      const param_type& __param)\n+      {\n+\t__glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n+\ttypedef typename _UniformRandomNumberGenerator::result_type\n+\t  _Gresult_type;\n+\ttypedef typename std::make_unsigned<result_type>::type __utype;\n+\ttypedef typename std::common_type<_Gresult_type, __utype>::type\n+\t  __uctype;\n+\n+\tconst __uctype __urngmin = __urng.min();\n+\tconst __uctype __urngmax = __urng.max();\n+\tconst __uctype __urngrange = __urngmax - __urngmin;\n+\tconst __uctype __urange\n+\t  = __uctype(__param.b()) - __uctype(__param.a());\n+\n+\t__uctype __ret;\n+\n+\tif (__urngrange > __urange)\n+\t  {\n+\t    if (__detail::_Power_of_2(__urngrange + 1)\n+\t\t&& __detail::_Power_of_2(__urange + 1))\n+\t      {\n+\t\twhile (__f != __t)\n+\t\t  {\n+\t\t    __ret = __uctype(__urng()) - __urngmin;\n+\t\t    *__f++ = (__ret & __urange) + __param.a();\n+\t\t  }\n+\t      }\n+\t    else\n+\t      {\n+\t\t// downscaling\n+\t\tconst __uctype __uerange = __urange + 1; // __urange can be zero\n+\t\tconst __uctype __scaling = __urngrange / __uerange;\n+\t\tconst __uctype __past = __uerange * __scaling;\n+\t\twhile (__f != __t)\n+\t\t  {\n+\t\t    do\n+\t\t      __ret = __uctype(__urng()) - __urngmin;\n+\t\t    while (__ret >= __past);\n+\t\t    *__f++ = __ret / __scaling + __param.a();\n+\t\t  }\n+\t      }\n+\t  }\n+\telse if (__urngrange < __urange)\n+\t  {\n+\t    // upscaling\n+\t    /*\n+\t      Note that every value in [0, urange]\n+\t      can be written uniquely as\n+\n+\t      (urngrange + 1) * high + low\n+\n+\t      where\n+\n+\t      high in [0, urange / (urngrange + 1)]\n+\n+\t      and\n+\n+\t      low in [0, urngrange].\n+\t    */\n+\t    __uctype __tmp; // wraparound control\n+\t    while (__f != __t)\n+\t      {\n+\t\tdo\n+\t\t  {\n+\t\t    const __uctype __uerngrange = __urngrange + 1;\n+\t\t    __tmp = (__uerngrange * operator()\n+\t\t\t     (__urng, param_type(0, __urange / __uerngrange)));\n+\t\t    __ret = __tmp + (__uctype(__urng()) - __urngmin);\n+\t\t  }\n+\t\twhile (__ret > __urange || __ret < __tmp);\n+\t\t*__f++ = __ret;\n+\t      }\n+\t  }\n+\telse\n+\t  while (__f != __t)\n+\t    *__f++ = __uctype(__urng()) - __urngmin + __param.a();\n+      }\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace std\n+\n+#endif"}, {"sha": "c1de0e06c4e9f5651d8883f1b55b49dd661b90a7", "filename": "libstdc++-v3/testsuite/20_util/specialized_algorithms/uninitialized_copy/move_iterators/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2944621e2c2dd73c3162eb052d9250ea4e15fda6/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_copy%2Fmove_iterators%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2944621e2c2dd73c3162eb052d9250ea4e15fda6/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_copy%2Fmove_iterators%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_copy%2Fmove_iterators%2F1.cc?ref=2944621e2c2dd73c3162eb052d9250ea4e15fda6", "patch": "@@ -19,7 +19,7 @@\n \n #undef _GLIBCXX_CONCEPT_CHECKS\n \n-#include <algorithm>\n+#include <memory>\n #include <iterator>\n #include <testsuite_hooks.h>\n #include <testsuite_iterators.h>"}, {"sha": "a7c6d729aa75905309199ce661d5d3be8bb9aad7", "filename": "libstdc++-v3/testsuite/20_util/specialized_algorithms/uninitialized_copy_n/move_iterators/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2944621e2c2dd73c3162eb052d9250ea4e15fda6/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_copy_n%2Fmove_iterators%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2944621e2c2dd73c3162eb052d9250ea4e15fda6/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_copy_n%2Fmove_iterators%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_copy_n%2Fmove_iterators%2F1.cc?ref=2944621e2c2dd73c3162eb052d9250ea4e15fda6", "patch": "@@ -21,7 +21,7 @@\n \n #undef _GLIBCXX_CONCEPT_CHECKS\n \n-#include <algorithm>\n+#include <memory>\n #include <iterator>\n #include <testsuite_hooks.h>\n #include <testsuite_iterators.h>"}, {"sha": "f72f5e71e60647605ee6e297de44b1947c3a5fd8", "filename": "libstdc++-v3/testsuite/25_algorithms/nth_element/58800.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2944621e2c2dd73c3162eb052d9250ea4e15fda6/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnth_element%2F58800.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2944621e2c2dd73c3162eb052d9250ea4e15fda6/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnth_element%2F58800.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnth_element%2F58800.cc?ref=2944621e2c2dd73c3162eb052d9250ea4e15fda6", "patch": "@@ -20,6 +20,7 @@\n // { dg-options \"-std=gnu++11\" }\n \n #include <algorithm>\n+#include <vector>\n #include <testsuite_hooks.h>\n #include <testsuite_iterators.h>\n "}, {"sha": "e9ebc68473285cf1f2b168fcbc75d0d743a2a41c", "filename": "libstdc++-v3/testsuite/26_numerics/random/pr60037-neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2944621e2c2dd73c3162eb052d9250ea4e15fda6/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpr60037-neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2944621e2c2dd73c3162eb052d9250ea4e15fda6/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpr60037-neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpr60037-neg.cc?ref=2944621e2c2dd73c3162eb052d9250ea4e15fda6", "patch": "@@ -10,6 +10,6 @@ std::__detail::_Adaptor<std::mt19937, unsigned long> aurng(urng);\n auto x = std::generate_canonical<std::size_t,\n \t\t\tstd::numeric_limits<std::size_t>::digits>(urng);\n \n-// { dg-error \"static assertion failed: template argument not a floating point type\" \"\" { target *-*-* } 167 }\n+// { dg-error \"static assertion failed: template argument not a floating point type\" \"\" { target *-*-* } 160 }\n \n-// { dg-error \"static assertion failed: template argument not a floating point type\" \"\" { target *-*-* } 3466 }\n+// { dg-error \"static assertion failed: template argument not a floating point type\" \"\" { target *-*-* } 3314 }"}]}