{"sha": "f47f2c17db22e355a48c7aa99ff3ce4529f24b80", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQ3ZjJjMTdkYjIyZTM1NWE0OGM3YWE5OWZmM2NlNDUyOWYyNGI4MA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-06-26T23:17:37Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-06-26T23:17:37Z"}, "message": "(find_splittable_regs): When completely unrolling loop, check for\nnon-invariant initial biv values.\n\nFrom-SVN: r10056", "tree": {"sha": "f2e4130180fa5dec890cac26daadb178578c542a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2e4130180fa5dec890cac26daadb178578c542a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f47f2c17db22e355a48c7aa99ff3ce4529f24b80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f47f2c17db22e355a48c7aa99ff3ce4529f24b80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f47f2c17db22e355a48c7aa99ff3ce4529f24b80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f47f2c17db22e355a48c7aa99ff3ce4529f24b80/comments", "author": null, "committer": null, "parents": [{"sha": "0184223489d6ddf887c169e01dc9cd7325677fbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0184223489d6ddf887c169e01dc9cd7325677fbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0184223489d6ddf887c169e01dc9cd7325677fbc"}], "stats": {"total": 7, "additions": 4, "deletions": 3}, "files": [{"sha": "76543d9f11b85438c54e7d097212f29e2d7081c9", "filename": "gcc/unroll.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f47f2c17db22e355a48c7aa99ff3ce4529f24b80/gcc%2Funroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f47f2c17db22e355a48c7aa99ff3ce4529f24b80/gcc%2Funroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funroll.c?ref=f47f2c17db22e355a48c7aa99ff3ce4529f24b80", "patch": "@@ -2397,12 +2397,13 @@ find_splittable_regs (unroll_type, loop_start, loop_end, end_insert_before,\n \t    {\n \t      /* If the initial value of the biv is itself (i.e. it is too\n \t\t complicated for strength_reduce to compute), or is a hard\n-\t\t register, then we must create a new pseudo reg to hold the\n-\t\t initial value of the biv.  */\n+\t\t register, or it isn't invariant, then we must create a new\n+\t\t pseudo reg to hold the initial value of the biv.  */\n \n \t      if (GET_CODE (bl->initial_value) == REG\n \t\t  && (REGNO (bl->initial_value) == bl->regno\n-\t\t      || REGNO (bl->initial_value) < FIRST_PSEUDO_REGISTER))\n+\t\t      || REGNO (bl->initial_value) < FIRST_PSEUDO_REGISTER\n+\t\t      || ! invariant_p (bl->initial_value)))\n \t\t{\n \t\t  rtx tem = gen_reg_rtx (bl->biv->mode);\n \t\t  "}]}