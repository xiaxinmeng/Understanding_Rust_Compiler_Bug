{"sha": "a67189d4904ebdae45829558f5ddd6f628e5c910", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTY3MTg5ZDQ5MDRlYmRhZTQ1ODI5NTU4ZjVkZGQ2ZjYyOGU1YzkxMA==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2010-09-11T16:34:20Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2010-09-11T16:34:20Z"}, "message": "mathbuiltins.def: Do not defined huge_val built-in.\n\n\t* mathbuiltins.def: Do not defined huge_val built-in.\n\t* trans-const.c (gfc_build_inf_or_huge): New function.\n\t* trans-const.h (gfc_build_inf_or_huge): New prototype.\n\t* f95-lang.c (gfc_init_builtin_functions): Don't defined\n\thuge_val built-ins.\n\t* trans-intrinsic.c (gfc_build_intrinsic_lib_fndecls): We don't\n\thave functions of type (*) (void) anymore.\n\t(gfc_conv_intrinsic_minmaxloc): Call gfc_build_inf_or_huge.\n\t(gfc_conv_intrinsic_nearest): Call gfc_build_inf_or_huge instead\n\tof generating a call to huge_val().\n\nFrom-SVN: r164216", "tree": {"sha": "615287f513f3d8f71931077bb3135b6eaeffadc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/615287f513f3d8f71931077bb3135b6eaeffadc3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a67189d4904ebdae45829558f5ddd6f628e5c910", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a67189d4904ebdae45829558f5ddd6f628e5c910", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a67189d4904ebdae45829558f5ddd6f628e5c910", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a67189d4904ebdae45829558f5ddd6f628e5c910/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "616f12900dccc06a528586f8c7f969012d1e50a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/616f12900dccc06a528586f8c7f969012d1e50a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/616f12900dccc06a528586f8c7f969012d1e50a1"}], "stats": {"total": 67, "additions": 43, "deletions": 24}, "files": [{"sha": "e7f79bdedaeb655105ed5fb4b72b0a26675a00c8", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a67189d4904ebdae45829558f5ddd6f628e5c910/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a67189d4904ebdae45829558f5ddd6f628e5c910/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=a67189d4904ebdae45829558f5ddd6f628e5c910", "patch": "@@ -1,3 +1,16 @@\n+2010-09-11  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\t* mathbuiltins.def: Do not defined huge_val built-in.\n+\t* trans-const.c (gfc_build_inf_or_huge): New function.\n+\t* trans-const.h (gfc_build_inf_or_huge): New prototype.\n+\t* f95-lang.c (gfc_init_builtin_functions): Don't defined\n+\thuge_val built-ins.\n+\t* trans-intrinsic.c (gfc_build_intrinsic_lib_fndecls): We don't\n+\thave functions of type (*) (void) anymore.\n+\t(gfc_conv_intrinsic_minmaxloc): Call gfc_build_inf_or_huge.\n+\t(gfc_conv_intrinsic_nearest): Call gfc_build_inf_or_huge instead\n+\tof generating a call to huge_val().\n+\n 2010-09-11  Mikael Morin  <mikael@gcc.gnu.org>\n \n \t* gfortran.h (gfc_expr): Remove inline_noncopying_intrinsic attribute."}, {"sha": "d00b7f0df50f41c13a9a6c55f4459ef3144b4909", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a67189d4904ebdae45829558f5ddd6f628e5c910/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a67189d4904ebdae45829558f5ddd6f628e5c910/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=a67189d4904ebdae45829558f5ddd6f628e5c910", "patch": "@@ -856,13 +856,6 @@ gfc_init_builtin_functions (void)\n   gfc_define_builtin (\"__builtin_fmodf\", mfunc_float[1], \n \t\t      BUILT_IN_FMODF, \"fmodf\", true);\n \n-  gfc_define_builtin (\"__builtin_huge_vall\", mfunc_longdouble[3], \n-\t\t      BUILT_IN_HUGE_VALL, \"__builtin_huge_vall\", true);\n-  gfc_define_builtin (\"__builtin_huge_val\", mfunc_double[3], \n-\t\t      BUILT_IN_HUGE_VAL, \"__builtin_huge_val\", true);\n-  gfc_define_builtin (\"__builtin_huge_valf\", mfunc_float[3], \n-\t\t      BUILT_IN_HUGE_VALF, \"__builtin_huge_valf\", true);\n-\n   /* lround{f,,l} and llround{f,,l} */\n   ftype = build_function_type_list (long_integer_type_node,\n                                     float_type_node, NULL_TREE); "}, {"sha": "b3c52997a7f95830ea9da49d72821cdb15595369", "filename": "gcc/fortran/mathbuiltins.def", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a67189d4904ebdae45829558f5ddd6f628e5c910/gcc%2Ffortran%2Fmathbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a67189d4904ebdae45829558f5ddd6f628e5c910/gcc%2Ffortran%2Fmathbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmathbuiltins.def?ref=a67189d4904ebdae45829558f5ddd6f628e5c910", "patch": "@@ -62,7 +62,6 @@ OTHER_BUILTIN (CPOW,      \"cpow\",      cpow,    true)\n OTHER_BUILTIN (FABS,      \"fabs\",      1,       true)\n OTHER_BUILTIN (FMOD,      \"fmod\",      2,       true)\n OTHER_BUILTIN (FREXP,     \"frexp\",     frexp,   false)\n-OTHER_BUILTIN (HUGE_VAL,  \"huge_val\",  0,       true)\n OTHER_BUILTIN (LLROUND,   \"llround\",   llround, true)\n OTHER_BUILTIN (LROUND,    \"lround\",    lround,  true)\n OTHER_BUILTIN (NEXTAFTER, \"nextafter\", 2,       true)"}, {"sha": "3d8d4ef8e7d4a5f7d474d3e4fb58f14157765f8c", "filename": "gcc/fortran/trans-const.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a67189d4904ebdae45829558f5ddd6f628e5c910/gcc%2Ffortran%2Ftrans-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a67189d4904ebdae45829558f5ddd6f628e5c910/gcc%2Ffortran%2Ftrans-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-const.c?ref=a67189d4904ebdae45829558f5ddd6f628e5c910", "patch": "@@ -235,6 +235,26 @@ gfc_conv_mpfr_to_tree (mpfr_t f, int kind, int is_snan)\n   return build_real (type, real);\n }\n \n+/* Returns a real constant that is +Infinity if the target\n+   supports infinities for this floating-point mode, and\n+   +HUGE_VAL otherwise (the largest representable number).  */\n+\n+tree\n+gfc_build_inf_or_huge (tree type, int kind)\n+{\n+  if (HONOR_INFINITIES (TYPE_MODE (type)))\n+    {\n+      REAL_VALUE_TYPE real;\n+      real_inf (&real);\n+      return build_real (type, real);\n+    }\n+  else\n+    {\n+      int k = gfc_validate_kind (BT_REAL, kind, false);\n+      return gfc_conv_mpfr_to_tree (gfc_real_kinds[k].huge, kind, 0);\n+    }\n+}\n+\n /* Converts a backend tree into a real constant.  */\n \n void"}, {"sha": "8f567116ee3a1e916f03b16065b37bf764d2f843", "filename": "gcc/fortran/trans-const.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a67189d4904ebdae45829558f5ddd6f628e5c910/gcc%2Ffortran%2Ftrans-const.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a67189d4904ebdae45829558f5ddd6f628e5c910/gcc%2Ffortran%2Ftrans-const.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-const.h?ref=a67189d4904ebdae45829558f5ddd6f628e5c910", "patch": "@@ -27,6 +27,10 @@ void gfc_conv_tree_to_mpz (mpz_t, tree);\n tree gfc_conv_mpfr_to_tree (mpfr_t, int, int);\n void gfc_conv_tree_to_mpfr (mpfr_ptr, tree);\n \n+/* Build a tree containing a real infinity (or HUGE if infinities are\n+   not supported for the given type.  */\n+tree gfc_build_inf_or_huge (tree, int);\n+\n /* Build a tree for a constant.  Must be an EXPR_CONSTANT gfc_expr.\n    For CHARACTER literal constants, the caller still has to set the\n    string length as a separate operation.  */"}, {"sha": "6e9bfaf8b36eb99734ad1ed1e2705b2c4c9d9778", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a67189d4904ebdae45829558f5ddd6f628e5c910/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a67189d4904ebdae45829558f5ddd6f628e5c910/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=a67189d4904ebdae45829558f5ddd6f628e5c910", "patch": "@@ -621,13 +621,11 @@ gfc_build_intrinsic_lib_fndecls (void)\n        C99-like library functions.  For now, we only handle __float128\n        q-suffixed functions.  */\n \n-    tree tmp, func_0, func_1, func_2, func_cabs, func_frexp;\n+    tree tmp, func_1, func_2, func_cabs, func_frexp;\n     tree func_lround, func_llround, func_scalbn, func_cpow;\n \n     memset (quad_decls, 0, sizeof(tree) * (END_BUILTINS + 1));\n \n-    /* type (*) (void) */\n-    func_0 = build_function_type (float128_type_node, void_list_node);\n     /* type (*) (type) */\n     tmp = tree_cons (NULL_TREE, float128_type_node, void_list_node);\n     func_1 = build_function_type (float128_type_node, tmp);\n@@ -2490,22 +2488,14 @@ gfc_conv_intrinsic_minmaxloc (gfc_se * se, gfc_expr * expr, enum tree_code op)\n     }\n \n   limit = gfc_create_var (gfc_typenode_for_spec (&arrayexpr->ts), \"limit\");\n-  n = gfc_validate_kind (arrayexpr->ts.type, arrayexpr->ts.kind, false);\n   switch (arrayexpr->ts.type)\n     {\n     case BT_REAL:\n-      if (HONOR_INFINITIES (DECL_MODE (limit)))\n-\t{\n-\t  REAL_VALUE_TYPE real;\n-\t  real_inf (&real);\n-\t  tmp = build_real (TREE_TYPE (limit), real);\n-\t}\n-      else\n-\ttmp = gfc_conv_mpfr_to_tree (gfc_real_kinds[n].huge,\n-\t\t\t\t     arrayexpr->ts.kind, 0);\n+      tmp = gfc_build_inf_or_huge (TREE_TYPE (limit), arrayexpr->ts.kind);\n       break;\n \n     case BT_INTEGER:\n+      n = gfc_validate_kind (arrayexpr->ts.type, arrayexpr->ts.kind, false);\n       tmp = gfc_conv_mpz_to_tree (gfc_integer_kinds[n].huge,\n \t\t\t\t  arrayexpr->ts.kind);\n       break;\n@@ -4242,12 +4232,12 @@ gfc_conv_intrinsic_nearest (gfc_se * se, gfc_expr * expr)\n \n   nextafter = gfc_builtin_decl_for_float_kind (BUILT_IN_NEXTAFTER, expr->ts.kind);\n   copysign = gfc_builtin_decl_for_float_kind (BUILT_IN_COPYSIGN, expr->ts.kind);\n-  huge_val = gfc_builtin_decl_for_float_kind (BUILT_IN_HUGE_VAL, expr->ts.kind);\n \n   type = gfc_typenode_for_spec (&expr->ts);\n   gfc_conv_intrinsic_function_args (se, expr, args, 2);\n-  tmp = build_call_expr_loc (input_location, copysign, 2,\n-\t\t\t     build_call_expr_loc (input_location, huge_val, 0),\n+\n+  huge_val = gfc_build_inf_or_huge (type, expr->ts.kind);\n+  tmp = build_call_expr_loc (input_location, copysign, 2, huge_val,\n \t\t\t     fold_convert (type, args[1]));\n   se->expr = build_call_expr_loc (input_location, nextafter, 2,\n \t\t\t\t  fold_convert (type, args[0]), tmp);"}]}