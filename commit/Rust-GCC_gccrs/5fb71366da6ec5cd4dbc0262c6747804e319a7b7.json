{"sha": "5fb71366da6ec5cd4dbc0262c6747804e319a7b7", "node_id": "C_kwDOANBUbNoAKDVmYjcxMzY2ZGE2ZWM1Y2Q0ZGJjMDI2MmM2NzQ3ODA0ZTMxOWE3Yjc", "commit": {"author": {"name": "Torbj\u00f6rn SVENSSON", "email": "torbjorn.svensson@foss.st.com", "date": "2022-09-16T17:49:01Z"}, "committer": {"name": "Torbj\u00f6rn SVENSSON", "email": "torbjorn.svensson@foss.st.com", "date": "2022-09-30T16:28:46Z"}, "message": "testsuite: Only run test on target if VMA == LMA\n\nChecking that the triplet matches arm*-*-eabi (or msp430-*-*) is not\nenough to know if the execution will enter an endless loop, or if it\nwill give a meaningful result. As the execution test only work when\nVMA and LMA are equal, make sure that this condition is met.\n\ngcc/ChangeLog:\n\n\t* doc/sourcebuild.texi: Document new vma_equals_lma effective\n\ttarget check.\n\ngcc/testsuite/ChangeLog:\n\n\t* lib/target-supports.exp (check_effective_target_vma_equals_lma): New.\n\t* c-c++-common/torture/attr-noinit-1.c: Requre VMA == LMA to run.\n\t* c-c++-common/torture/attr-noinit-2.c: Likewise.\n\t* c-c++-common/torture/attr-noinit-3.c: Likewise.\n\t* c-c++-common/torture/attr-persistent-1.c: Likewise.\n\t* c-c++-common/torture/attr-persistent-3.c: Likewise.\n\nCo-Authored-By: Yvan ROUX  <yvan.roux@foss.st.com>\nSigned-off-by: Torbj\u00f6rn SVENSSON  <torbjorn.svensson@foss.st.com>", "tree": {"sha": "6a38b1a91c33ade838304c7bcb7f9942250bd024", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a38b1a91c33ade838304c7bcb7f9942250bd024"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5fb71366da6ec5cd4dbc0262c6747804e319a7b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fb71366da6ec5cd4dbc0262c6747804e319a7b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fb71366da6ec5cd4dbc0262c6747804e319a7b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fb71366da6ec5cd4dbc0262c6747804e319a7b7/comments", "author": null, "committer": null, "parents": [{"sha": "86291da0057d01efdaba71f28cad80b69dc703a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86291da0057d01efdaba71f28cad80b69dc703a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86291da0057d01efdaba71f28cad80b69dc703a4"}], "stats": {"total": 67, "additions": 62, "deletions": 5}, "files": [{"sha": "c81e2ffd43a331117b2882dff163d988f85ff836", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fb71366da6ec5cd4dbc0262c6747804e319a7b7/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fb71366da6ec5cd4dbc0262c6747804e319a7b7/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=5fb71366da6ec5cd4dbc0262c6747804e319a7b7", "patch": "@@ -2868,6 +2868,9 @@ Vector alignment is reachable for types of 32 bits or less.\n @item vector_alignment_reachable_for_64bit\n Vector alignment is reachable for types of 64 bits or less.\n \n+@item vma_equals_lma\n+Target generates executable with VMA equal to LMA for .data section.\n+\n @item wchar_t_char16_t_compatible\n Target supports @code{wchar_t} that is compatible with @code{char16_t}.\n "}, {"sha": "f84eba0b649e20c46a34cdfec0ad916c5059a100", "filename": "gcc/testsuite/c-c++-common/torture/attr-noinit-1.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fb71366da6ec5cd4dbc0262c6747804e319a7b7/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fattr-noinit-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fb71366da6ec5cd4dbc0262c6747804e319a7b7/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fattr-noinit-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fattr-noinit-1.c?ref=5fb71366da6ec5cd4dbc0262c6747804e319a7b7", "patch": "@@ -1,4 +1,5 @@\n-/* { dg-do run } */\n+/* { dg-do link } */\n+/* { dg-do run { target { vma_equals_lma } } } */\n /* { dg-require-effective-target noinit } */\n /* { dg-skip-if \"data LMA != VMA\" { msp430-*-* } { \"-mlarge\" } } */\n /* { dg-options \"-save-temps\" } */"}, {"sha": "4528b9e3cfa20a4552519a88360fecb15e714d69", "filename": "gcc/testsuite/c-c++-common/torture/attr-noinit-2.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fb71366da6ec5cd4dbc0262c6747804e319a7b7/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fattr-noinit-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fb71366da6ec5cd4dbc0262c6747804e319a7b7/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fattr-noinit-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fattr-noinit-2.c?ref=5fb71366da6ec5cd4dbc0262c6747804e319a7b7", "patch": "@@ -1,4 +1,5 @@\n-/* { dg-do run } */\n+/* { dg-do link } */\n+/* { dg-do run { target { vma_equals_lma } } } */\n /* { dg-require-effective-target noinit } */\n /* { dg-options \"-fdata-sections -save-temps\" } */\n /* { dg-skip-if \"data LMA != VMA\" { msp430-*-* } { \"-mlarge\" } } */"}, {"sha": "2f1745694c9c48b63d2a2c472b1c9291f81a8a1c", "filename": "gcc/testsuite/c-c++-common/torture/attr-noinit-3.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fb71366da6ec5cd4dbc0262c6747804e319a7b7/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fattr-noinit-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fb71366da6ec5cd4dbc0262c6747804e319a7b7/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fattr-noinit-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fattr-noinit-3.c?ref=5fb71366da6ec5cd4dbc0262c6747804e319a7b7", "patch": "@@ -1,4 +1,5 @@\n-/* { dg-do run } */\n+/* { dg-do link } */\n+/* { dg-do run { target { vma_equals_lma } } } */\n /* { dg-require-effective-target noinit } */\n /* { dg-options \"-flto -save-temps\" } */\n /* { dg-skip-if \"data LMA != VMA\" { msp430-*-* } { \"-mlarge\" } } */"}, {"sha": "b11a515cef86448774c3258e09d38d4b400eed2e", "filename": "gcc/testsuite/c-c++-common/torture/attr-persistent-1.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fb71366da6ec5cd4dbc0262c6747804e319a7b7/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fattr-persistent-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fb71366da6ec5cd4dbc0262c6747804e319a7b7/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fattr-persistent-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fattr-persistent-1.c?ref=5fb71366da6ec5cd4dbc0262c6747804e319a7b7", "patch": "@@ -1,4 +1,5 @@\n-/* { dg-do run } */\n+/* { dg-do link } */\n+/* { dg-do run { target { vma_equals_lma } } } */\n /* { dg-require-effective-target persistent } */\n /* { dg-skip-if \"data LMA != VMA\" { msp430-*-* } { \"-mlarge\" } } */\n /* { dg-options \"-save-temps\" } */"}, {"sha": "068a72af5c8edc09baf2f046a4eb33532fc41781", "filename": "gcc/testsuite/c-c++-common/torture/attr-persistent-3.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fb71366da6ec5cd4dbc0262c6747804e319a7b7/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fattr-persistent-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fb71366da6ec5cd4dbc0262c6747804e319a7b7/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fattr-persistent-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fattr-persistent-3.c?ref=5fb71366da6ec5cd4dbc0262c6747804e319a7b7", "patch": "@@ -1,4 +1,5 @@\n-/* { dg-do run } */\n+/* { dg-do link } */\n+/* { dg-do run { target { vma_equals_lma } } } */\n /* { dg-require-effective-target persistent } */\n /* { dg-options \"-flto -save-temps\" } */\n /* { dg-skip-if \"data LMA != VMA\" { msp430-*-* } { \"-mlarge\" } } */"}, {"sha": "7c9dd45f2a7321b703af88880123e52f887a7509", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fb71366da6ec5cd4dbc0262c6747804e319a7b7/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fb71366da6ec5cd4dbc0262c6747804e319a7b7/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=5fb71366da6ec5cd4dbc0262c6747804e319a7b7", "patch": "@@ -370,6 +370,55 @@ proc check_weak_override_available { } {\n     return [check_weak_available]\n }\n \n+# Return 1 if VMA is equal to LMA for the .data section, 0\n+# otherwise.  Cache the result.\n+\n+proc check_effective_target_vma_equals_lma { } {\n+    global tool\n+\n+    return [check_cached_effective_target vma_equals_lma {\n+\tset src vma_equals_lma[pid].c\n+\tset exe vma_equals_lma[pid].exe\n+\tverbose \"check_effective_target_vma_equals_lma  compiling testfile $src\" 2\n+\tset f [open $src \"w\"]\n+\tputs $f \"#ifdef __cplusplus\\nextern \\\"C\\\"\\n#endif\\n\"\n+\tputs $f \"int foo = 42; void main() {}\"\n+\tclose $f\n+\tset lines [${tool}_target_compile $src $exe executable \"\"]\n+\tfile delete $src\n+\n+\tif [string match \"\" $lines] then {\n+\t    # No error messages\n+\n+            set objdump_name [find_binutils_prog objdump]\n+            set output [remote_exec host \"$objdump_name\" \"--section-headers --section=.data $exe\"]\n+            set output [lindex $output 1]\n+\n+            remote_file build delete $exe\n+\n+            # Example output of objdump:\n+            #vma_equals_lma9059.exe:     file format elf32-littlearm\n+            #\n+            #Sections:\n+            #Idx Name          Size      VMA       LMA       File off  Algn\n+            #  6 .data         00000558  20000000  08002658  00020000  2**3\n+            #                  CONTENTS, ALLOC, LOAD, DATA\n+\n+            # Capture LMA and VMA columns for .data section\n+            if ![ regexp {\\d*\\d+\\s+\\.data\\s+\\d+\\s+(\\d+)\\s+(\\d+)} $output dummy vma lma ] {\n+                verbose \"Could not parse objdump output\" 2\n+                return 0\n+            } else {\n+                return [string equal $vma $lma]\n+            }\n+\t} else {\n+            remote_file build delete $exe\n+            verbose \"Could not determine if VMA is equal to LMA. Assuming not equal.\" 2\n+            return 0\n+\t}\n+    }]\n+}\n+\n # The \"noinit\" attribute is only supported by some targets.\n # This proc returns 1 if it's supported, 0 if it's not.\n "}]}