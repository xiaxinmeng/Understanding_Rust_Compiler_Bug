{"sha": "ed48be0ef388933901f5785e2c3dbf83c39242ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQ0OGJlMGVmMzg4OTMzOTAxZjU3ODVlMmMzZGJmODNjMzkyNDJhZA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2015-11-26T23:31:32Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2015-11-26T23:31:32Z"}, "message": "Correctly handle ARM targets.\n\n\t* g++.dg/init/new45.C (cookie_size): New constant set to a value\n\tappropriate for the target.\n\t(operator new[]): Use it.\n\nFrom-SVN: r230987", "tree": {"sha": "347e0d0d3d5a1298a2703b2bf8f5358f098f4032", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/347e0d0d3d5a1298a2703b2bf8f5358f098f4032"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed48be0ef388933901f5785e2c3dbf83c39242ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed48be0ef388933901f5785e2c3dbf83c39242ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed48be0ef388933901f5785e2c3dbf83c39242ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed48be0ef388933901f5785e2c3dbf83c39242ad/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1e5d7fd638ca44b45e9d1a49da0b39e6d0cb1fc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e5d7fd638ca44b45e9d1a49da0b39e6d0cb1fc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e5d7fd638ca44b45e9d1a49da0b39e6d0cb1fc7"}], "stats": {"total": 22, "additions": 20, "deletions": 2}, "files": [{"sha": "33ef41f751be2b627f301b4bca60ddf41cde8a75", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed48be0ef388933901f5785e2c3dbf83c39242ad/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed48be0ef388933901f5785e2c3dbf83c39242ad/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ed48be0ef388933901f5785e2c3dbf83c39242ad", "patch": "@@ -1,3 +1,9 @@\n+2015-11-26  Martin Sebor  <msebor@redhat.com>\n+\n+\t* g++.dg/init/new45.C (cookie_size): New constant set to a value\n+\tappropriate for the target.\n+\t(operator new[]): Use it.\n+\n 2015-11-26  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/67238"}, {"sha": "ff3bddbce3597f15c80a83917799211d93b4b64e", "filename": "gcc/testsuite/g++.dg/init/new45.C", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed48be0ef388933901f5785e2c3dbf83c39242ad/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew45.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed48be0ef388933901f5785e2c3dbf83c39242ad/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew45.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew45.C?ref=ed48be0ef388933901f5785e2c3dbf83c39242ad", "patch": "@@ -23,13 +23,25 @@ struct POD {\n \n enum { N = 123 };\n \n+#if defined (__arm__) && defined (__ARM_EABI__)\n+// On ARM EABI the cookie is always 8 bytes as per Section 3.2.2 of\n+// http://infocenter.arm.com/help/topic/com.arm.doc.ihi0041d/IHI0041D_cppabi.pdf\n+static const size_t cookie_size = 8;\n+#else\n+// On all other targets, the cookie size is the size of size_t\n+// GCC, and ideally the C++ standard, should provide an API to\n+// retrieve this constant.)\n+static const size_t cookie_size = sizeof (size_t);\n+#endif\n+\n inline __attribute__ ((always_inline))\n void* operator new[] (size_t n)\n {\n     // Verify that array new is invoked with an argument large enough\n     // for the array and a size_t cookie to store the number of elements.\n     // (This holds for classes with user-defined types but not POD types).\n-    if (n != N * sizeof (UDClass) + sizeof n) abort ();\n+ \n+  if (n != N * sizeof (UDClass) + cookie_size) abort ();\n     return malloc (n);\n }\n \n@@ -60,7 +72,7 @@ void* operator new[] (size_t n, UDClass *p)\n     // Verify that placement array new overload for a class type with\n     // a user-defined ctor and dtor is invoked with an argument large\n     // enough for the array and a cookie.\n-    if (n != N * sizeof (UDClass) + sizeof n) abort ();\n+    if (n != N * sizeof (UDClass) + cookie_size) abort ();\n     return p;\n }\n "}]}