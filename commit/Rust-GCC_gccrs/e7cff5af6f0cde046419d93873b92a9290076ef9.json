{"sha": "e7cff5af6f0cde046419d93873b92a9290076ef9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTdjZmY1YWY2ZjBjZGUwNDY0MTlkOTM4NzNiOTJhOTI5MDA3NmVmOQ==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2014-02-19T11:07:31Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-02-19T11:07:31Z"}, "message": "exp_util.adb (Side_Effect_Free): Scalar if expressions can be SEF.\n\n2014-02-19  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_util.adb (Side_Effect_Free): Scalar if expressions can be SEF.\n\nFrom-SVN: r207892", "tree": {"sha": "6d4de55376186332f5b77ffd5bd41c07c06dfa37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d4de55376186332f5b77ffd5bd41c07c06dfa37"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7cff5af6f0cde046419d93873b92a9290076ef9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7cff5af6f0cde046419d93873b92a9290076ef9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7cff5af6f0cde046419d93873b92a9290076ef9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7cff5af6f0cde046419d93873b92a9290076ef9/comments", "author": null, "committer": null, "parents": [{"sha": "a767d69b628706fb1c4986232b00ccb61a911ebe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a767d69b628706fb1c4986232b00ccb61a911ebe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a767d69b628706fb1c4986232b00ccb61a911ebe"}], "stats": {"total": 25, "additions": 18, "deletions": 7}, "files": [{"sha": "64187583bd4d07b0878674052fd151cebf506536", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7cff5af6f0cde046419d93873b92a9290076ef9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7cff5af6f0cde046419d93873b92a9290076ef9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e7cff5af6f0cde046419d93873b92a9290076ef9", "patch": "@@ -1,3 +1,7 @@\n+2014-02-19  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_util.adb (Side_Effect_Free): Scalar if expressions can be SEF.\n+\n 2014-02-19  Robert Dewar  <dewar@adacore.com>\n \n \t* exp_util.adb: Update comments."}, {"sha": "cab17742815ad60092a1b21d08348f183c8f2a04", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7cff5af6f0cde046419d93873b92a9290076ef9/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7cff5af6f0cde046419d93873b92a9290076ef9/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=e7cff5af6f0cde046419d93873b92a9290076ef9", "patch": "@@ -7675,6 +7675,9 @@ package body Exp_Util is\n       Name_Req     : Boolean := False;\n       Variable_Ref : Boolean := False) return Boolean\n    is\n+      Typ : constant Entity_Id := Etype (N);\n+      --  Result type of the expression\n+\n       function Safe_Prefixed_Reference (N : Node_Id) return Boolean;\n       --  The argument N is a construct where the Prefix is dereferenced if it\n       --  is an access type and the result is a variable. The call returns True\n@@ -7919,7 +7922,7 @@ package body Exp_Util is\n       elsif VM_Target /= No_VM\n          and then not Comes_From_Source (N)\n          and then Nkind (Parent (N)) = N_Object_Renaming_Declaration\n-         and then Is_Class_Wide_Type (Etype (N))\n+         and then Is_Class_Wide_Type (Typ)\n       then\n          return True;\n       end if;\n@@ -7981,12 +7984,16 @@ package body Exp_Util is\n                 Side_Effect_Free\n                   (First (Parameter_Associations (N)), Name_Req, Variable_Ref);\n \n-         --  An IF expression is side effect free if its components are all\n-         --  side effect free (conditions and then actions and else actions).\n+         --  An IF expression is side effect free if it's of a scalar type, and\n+         --  all its components are all side effect free (conditions and then\n+         --  actions and else actions). We restrict to scalar types, since it\n+         --  is annoying to deal with things like (if A then B else C)'First\n+         --  where the type involved is a string type.\n \n-         --  when N_If_Expression =>\n-         --  return Side_Effect_Free (Expressions (N), Name_Req, Variable_Ref);\n-         --  commented out for now, caused some crashes ???\n+         when N_If_Expression =>\n+            return Is_Scalar_Type (Typ)\n+              and then\n+                Side_Effect_Free (Expressions (N), Name_Req, Variable_Ref);\n \n          --  An indexed component is side effect free if it is a side\n          --  effect free prefixed reference and all the indexing\n@@ -8014,7 +8021,7 @@ package body Exp_Util is\n \n          when N_Selected_Component =>\n             if Nkind (Parent (N)) = N_Explicit_Dereference\n-              and then Has_Non_Standard_Rep (Designated_Type (Etype (N)))\n+              and then Has_Non_Standard_Rep (Designated_Type (Typ))\n             then\n                return False;\n             else"}]}