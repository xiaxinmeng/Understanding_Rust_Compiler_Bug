{"sha": "ef8c92e8e76b51040e0c3a37ff7dd0a3463a727d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWY4YzkyZThlNzZiNTEwNDBlMGMzYTM3ZmY3ZGQwYTM0NjNhNzI3ZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-10-13T07:17:06Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-10-13T07:17:06Z"}, "message": "re PR target/82498 (Missed optimization for x86 rotate instruction)\n\n\tPR target/82498\n\t* config/i386/ia32intrin.h (__rold, __rord, __rolq, __rorq): Allow\n\tany values of __C while still being pattern recognizable as a simple\n\trotate instruction.\n\n\t* gcc.dg/ubsan/pr82498.c: New test.\n\nFrom-SVN: r253708", "tree": {"sha": "08438b3b35a482ee1339d6e41f02ee6f48ff4ca5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08438b3b35a482ee1339d6e41f02ee6f48ff4ca5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef8c92e8e76b51040e0c3a37ff7dd0a3463a727d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef8c92e8e76b51040e0c3a37ff7dd0a3463a727d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef8c92e8e76b51040e0c3a37ff7dd0a3463a727d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef8c92e8e76b51040e0c3a37ff7dd0a3463a727d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a68f286ccc36bc6d5e483383e490e2531307466b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a68f286ccc36bc6d5e483383e490e2531307466b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a68f286ccc36bc6d5e483383e490e2531307466b"}], "stats": {"total": 183, "additions": 179, "deletions": 4}, "files": [{"sha": "58923e8835a428d42061a8e8bfc9387b319653b5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef8c92e8e76b51040e0c3a37ff7dd0a3463a727d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef8c92e8e76b51040e0c3a37ff7dd0a3463a727d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ef8c92e8e76b51040e0c3a37ff7dd0a3463a727d", "patch": "@@ -1,3 +1,10 @@\n+2017-10-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/82498\n+\t* config/i386/ia32intrin.h (__rold, __rord, __rolq, __rorq): Allow\n+\tany values of __C while still being pattern recognizable as a simple\n+\trotate instruction.\n+\n 2017-10-13  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/82451"}, {"sha": "1f4e484d55b8215a695223a6a5501abc433fdae9", "filename": "gcc/config/i386/ia32intrin.h", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef8c92e8e76b51040e0c3a37ff7dd0a3463a727d/gcc%2Fconfig%2Fi386%2Fia32intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef8c92e8e76b51040e0c3a37ff7dd0a3463a727d/gcc%2Fconfig%2Fi386%2Fia32intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fia32intrin.h?ref=ef8c92e8e76b51040e0c3a37ff7dd0a3463a727d", "patch": "@@ -147,7 +147,8 @@ extern __inline unsigned int\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n __rold (unsigned int __X, int __C)\n {\n-  return (__X << __C) | (__X >> (32 - __C));\n+  __C &= 31;\n+  return (__X << __C) | (__X >> (-__C & 31));\n }\n \n /* 8bit ror */\n@@ -171,7 +172,8 @@ extern __inline unsigned int\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n __rord (unsigned int __X, int __C)\n {\n-  return (__X >> __C) | (__X << (32 - __C));\n+  __C &= 31;\n+  return (__X >> __C) | (__X << (-__C & 31));\n }\n \n /* Pause */\n@@ -239,15 +241,17 @@ extern __inline unsigned long long\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n __rolq (unsigned long long __X, int __C)\n {\n-  return (__X << __C) | (__X >> (64 - __C));\n+  __C &= 63;\n+  return (__X << __C) | (__X >> (-__C & 63));\n }\n \n /* 64bit ror */\n extern __inline unsigned long long\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n __rorq (unsigned long long __X, int __C)\n {\n-  return (__X >> __C) | (__X << (64 - __C));\n+  __C &= 63;\n+  return (__X >> __C) | (__X << (-__C & 63));\n }\n \n /* Read flags register */"}, {"sha": "0a8246fd980f54f5046280c5a9df441b6f85d3f0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef8c92e8e76b51040e0c3a37ff7dd0a3463a727d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef8c92e8e76b51040e0c3a37ff7dd0a3463a727d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ef8c92e8e76b51040e0c3a37ff7dd0a3463a727d", "patch": "@@ -1,3 +1,8 @@\n+2017-10-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/82498\n+\t* gcc.dg/ubsan/pr82498.c: New test.\n+\n 2017-10-13  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/82451"}, {"sha": "1d093a058e1e28d988bad0d7f1c37adaddf3acf2", "filename": "gcc/testsuite/gcc.dg/ubsan/pr82498.c", "status": "added", "additions": 159, "deletions": 0, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef8c92e8e76b51040e0c3a37ff7dd0a3463a727d/gcc%2Ftestsuite%2Fgcc.dg%2Fubsan%2Fpr82498.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef8c92e8e76b51040e0c3a37ff7dd0a3463a727d/gcc%2Ftestsuite%2Fgcc.dg%2Fubsan%2Fpr82498.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fubsan%2Fpr82498.c?ref=ef8c92e8e76b51040e0c3a37ff7dd0a3463a727d", "patch": "@@ -0,0 +1,159 @@\n+/* PR target/82498 */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-fsanitize=undefined -fno-sanitize-recover=undefined\" } */\n+\n+#include <x86intrin.h>\n+\n+volatile unsigned int a;\n+volatile unsigned long long b;\n+volatile int c;\n+\n+int\n+main ()\n+{\n+  a = 0x12345678U;\n+  a = __rold (a, 0);\n+  if (a != 0x12345678U)\n+    __builtin_abort ();\n+  a = __rold (a, 32);\n+  if (a != 0x12345678U)\n+    __builtin_abort ();\n+  a = __rold (a, -32);\n+  if (a != 0x12345678U)\n+    __builtin_abort ();\n+  a = __rold (a, 37);\n+  if (a != 0x468acf02U)\n+    __builtin_abort ();\n+  a = __rold (a, -5);\n+  if (a != 0x12345678U)\n+    __builtin_abort ();\n+  a = __rord (a, 0);\n+  if (a != 0x12345678U)\n+    __builtin_abort ();\n+  a = __rord (a, 32);\n+  if (a != 0x12345678U)\n+    __builtin_abort ();\n+  a = __rord (a, -32);\n+  if (a != 0x12345678U)\n+    __builtin_abort ();\n+  a = __rord (a, -37);\n+  if (a != 0x468acf02U)\n+    __builtin_abort ();\n+  a = __rord (a, 5);\n+  if (a != 0x12345678U)\n+    __builtin_abort ();\n+  c = 0;\n+  a = __rold (a, c);\n+  if (a != 0x12345678U)\n+    __builtin_abort ();\n+  c = 32;\n+  a = __rold (a, c);\n+  if (a != 0x12345678U)\n+    __builtin_abort ();\n+  c = -32;\n+  a = __rold (a, c);\n+  if (a != 0x12345678U)\n+    __builtin_abort ();\n+  c = 37;\n+  a = __rold (a, c);\n+  if (a != 0x468acf02U)\n+    __builtin_abort ();\n+  c = -5;\n+  a = __rold (a, c);\n+  if (a != 0x12345678U)\n+    __builtin_abort ();\n+  c = 0;\n+  a = __rord (a, c);\n+  if (a != 0x12345678U)\n+    __builtin_abort ();\n+  c = 32;\n+  a = __rord (a, c);\n+  if (a != 0x12345678U)\n+    __builtin_abort ();\n+  c = -32;\n+  a = __rord (a, c);\n+  if (a != 0x12345678U)\n+    __builtin_abort ();\n+  c = -37;\n+  a = __rord (a, c);\n+  if (a != 0x468acf02U)\n+    __builtin_abort ();\n+  c = 5;\n+  a = __rord (a, c);\n+  if (a != 0x12345678U)\n+    __builtin_abort ();\n+#ifdef __x86_64__\n+  b = 0x123456789abcdef1ULL;\n+  b = __rolq (b, 0);\n+  if (b != 0x123456789abcdef1ULL)\n+    __builtin_abort ();\n+  b = __rolq (b, 64);\n+  if (b != 0x123456789abcdef1ULL)\n+    __builtin_abort ();\n+  b = __rolq (b, -64);\n+  if (b != 0x123456789abcdef1ULL)\n+    __builtin_abort ();\n+  b = __rolq (b, 69);\n+  if (b != 0x468acf13579bde22ULL)\n+    __builtin_abort ();\n+  b = __rolq (b, -5);\n+  if (b != 0x123456789abcdef1ULL)\n+    __builtin_abort ();\n+  b = __rorq (b, 0);\n+  if (b != 0x123456789abcdef1ULL)\n+    __builtin_abort ();\n+  b = __rorq (b, 64);\n+  if (b != 0x123456789abcdef1ULL)\n+    __builtin_abort ();\n+  b = __rorq (b, -64);\n+  if (b != 0x123456789abcdef1ULL)\n+    __builtin_abort ();\n+  b = __rorq (b, -69);\n+  if (b != 0x468acf13579bde22ULL)\n+    __builtin_abort ();\n+  b = __rorq (b, 5);\n+  if (b != 0x123456789abcdef1ULL)\n+    __builtin_abort ();\n+  c = 0;\n+  b = __rolq (b, c);\n+  if (b != 0x123456789abcdef1ULL)\n+    __builtin_abort ();\n+  c = 64;\n+  b = __rolq (b, c);\n+  if (b != 0x123456789abcdef1ULL)\n+    __builtin_abort ();\n+  c = -64;\n+  b = __rolq (b, c);\n+  if (b != 0x123456789abcdef1ULL)\n+    __builtin_abort ();\n+  c = 69;\n+  b = __rolq (b, c);\n+  if (b != 0x468acf13579bde22ULL)\n+    __builtin_abort ();\n+  c = -5;\n+  b = __rolq (b, c);\n+  if (b != 0x123456789abcdef1ULL)\n+    __builtin_abort ();\n+  c = 0;\n+  b = __rorq (b, c);\n+  if (b != 0x123456789abcdef1ULL)\n+    __builtin_abort ();\n+  c = 64;\n+  b = __rorq (b, c);\n+  if (b != 0x123456789abcdef1ULL)\n+    __builtin_abort ();\n+  c = -64;\n+  b = __rorq (b, c);\n+  if (b != 0x123456789abcdef1ULL)\n+    __builtin_abort ();\n+  c = -69;\n+  b = __rorq (b, c);\n+  if (b != 0x468acf13579bde22ULL)\n+    __builtin_abort ();\n+  c = 5;\n+  b = __rorq (b, c);\n+  if (b != 0x123456789abcdef1ULL)\n+    __builtin_abort ();\n+#endif\n+  return 0;\n+}"}]}