{"sha": "a278e2017797a7ba7f807ca93ce0c06a37c8bdaf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTI3OGUyMDE3Nzk3YTdiYTdmODA3Y2E5M2NlMGMwNmEzN2M4YmRhZg==", "commit": {"author": {"name": "Sujoy Saraswati", "email": "sujoy.saraswati@hpe.com", "date": "2015-12-19T04:57:57Z"}, "committer": {"name": "Sujoy Saraswati", "email": "ssaraswati@gcc.gnu.org", "date": "2015-12-19T04:57:57Z"}, "message": "This series of patches fix PR61441. This patch adds REAL_VALUE_ISSIGNALING_NAN.\n\nBootstrapped & regression-tested on x86_64-linux-gnu.\n\ngcc/\n\t* real.c (real_issignaling_nan): New.\n\t* real.h (real_issignaling_nan, REAL_VALUE_ISSIGNALING_NAN): New.\n\nFrom-SVN: r231848", "tree": {"sha": "ec918de3ae6e7c63dd169f8846d57718664be040", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec918de3ae6e7c63dd169f8846d57718664be040"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a278e2017797a7ba7f807ca93ce0c06a37c8bdaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a278e2017797a7ba7f807ca93ce0c06a37c8bdaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a278e2017797a7ba7f807ca93ce0c06a37c8bdaf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a278e2017797a7ba7f807ca93ce0c06a37c8bdaf/comments", "author": null, "committer": null, "parents": [{"sha": "d3ccfbb91e622532f44d298c3764d7ec9e2ef5a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3ccfbb91e622532f44d298c3764d7ec9e2ef5a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3ccfbb91e622532f44d298c3764d7ec9e2ef5a1"}], "stats": {"total": 18, "additions": 18, "deletions": 0}, "files": [{"sha": "d024128977ad06417097ad7e4b95f20b3b2dfb95", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a278e2017797a7ba7f807ca93ce0c06a37c8bdaf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a278e2017797a7ba7f807ca93ce0c06a37c8bdaf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a278e2017797a7ba7f807ca93ce0c06a37c8bdaf", "patch": "@@ -1,3 +1,9 @@\n+2015-12-19  Sujoy Saraswati  <sujoy.saraswati@hpe.com>\n+\n+\tPR tree-optimization/61441\n+\t* real.c (real_issignaling_nan): New.\n+\t* real.h (real_issignaling_nan, REAL_VALUE_ISSIGNALING_NAN): New.\n+\n 2015-13-18  John David Anglin  <danglin@gcc.gnu.org>\n \n \tPR target/68729"}, {"sha": "17d79c287f53c44b163290ffd0c4778b336277bf", "filename": "gcc/real.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a278e2017797a7ba7f807ca93ce0c06a37c8bdaf/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a278e2017797a7ba7f807ca93ce0c06a37c8bdaf/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=a278e2017797a7ba7f807ca93ce0c06a37c8bdaf", "patch": "@@ -1195,6 +1195,12 @@ real_isnan (const REAL_VALUE_TYPE *r)\n   return (r->cl == rvc_nan);\n }\n \n+/* Determine whether a floating-point value X is a signaling NaN.  */ \n+bool real_issignaling_nan (const REAL_VALUE_TYPE *r)\n+{\n+  return real_isnan (r) && r->signalling;\n+}\n+\n /* Determine whether a floating-point value X is finite.  */\n \n bool"}, {"sha": "f92c480c6e3c8909597374b401e83498749c041a", "filename": "gcc/real.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a278e2017797a7ba7f807ca93ce0c06a37c8bdaf/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a278e2017797a7ba7f807ca93ce0c06a37c8bdaf/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=a278e2017797a7ba7f807ca93ce0c06a37c8bdaf", "patch": "@@ -262,6 +262,9 @@ extern bool real_isinf (const REAL_VALUE_TYPE *);\n /* Determine whether a floating-point value X is a NaN.  */\n extern bool real_isnan (const REAL_VALUE_TYPE *);\n \n+/* Determine whether a floating-point value X is a signaling NaN.  */\n+extern bool real_issignaling_nan (const REAL_VALUE_TYPE *);\n+\n /* Determine whether a floating-point value X is finite.  */\n extern bool real_isfinite (const REAL_VALUE_TYPE *);\n \n@@ -357,6 +360,9 @@ extern const struct real_format arm_half_format;\n /* Determine whether a floating-point value X is a NaN.  */\n #define REAL_VALUE_ISNAN(x)\t\treal_isnan (&(x))\n \n+/* Determine whether a floating-point value X is a signaling NaN.  */ \n+#define REAL_VALUE_ISSIGNALING_NAN(x)  real_issignaling_nan (&(x))\n+\n /* Determine whether a floating-point value X is negative.  */\n #define REAL_VALUE_NEGATIVE(x)\t\treal_isneg (&(x))\n "}]}