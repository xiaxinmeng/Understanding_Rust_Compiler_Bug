{"sha": "23e8c0b0d99f585499baddda70af6a8b26f49bea", "node_id": "C_kwDOANBUbNoAKDIzZThjMGIwZDk5ZjU4NTQ5OWJhZGRkYTcwYWY2YThiMjZmNDliZWE", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-08-15T18:47:03Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-08-15T18:47:03Z"}, "message": "analyzer: fix direction of -Wanalyzer-out-of-bounds note [PR106626]\n\nFix a read/write typo.\n\nAlso, add more test coverage of -Wanalyzer-out-of-bounds to help\nestablish a baseline for experiments on tweaking the wording of\nthe warning (PR analyzer/106626).\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/106626\n\t* region-model.cc (buffer_overread::emit): Fix copy&paste error in\n\tdirection of the access in the note.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/106626\n\t* gcc.dg/analyzer/out-of-bounds-read-char-arr.c: New test.\n\t* gcc.dg/analyzer/out-of-bounds-read-int-arr.c: New test.\n\t* gcc.dg/analyzer/out-of-bounds-write-char-arr.c: New test.\n\t* gcc.dg/analyzer/out-of-bounds-write-int-arr.c: New test.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "224cabaf171dc2940bf3e8f14fe8a6a7b9a3398c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/224cabaf171dc2940bf3e8f14fe8a6a7b9a3398c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23e8c0b0d99f585499baddda70af6a8b26f49bea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23e8c0b0d99f585499baddda70af6a8b26f49bea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23e8c0b0d99f585499baddda70af6a8b26f49bea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23e8c0b0d99f585499baddda70af6a8b26f49bea/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca123e019bb92fd1d6909e8da7f53a4f45922526", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca123e019bb92fd1d6909e8da7f53a4f45922526", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca123e019bb92fd1d6909e8da7f53a4f45922526"}], "stats": {"total": 222, "additions": 220, "deletions": 2}, "files": [{"sha": "b05b7097c00ed294791e44ec75953b86cdb9a2dd", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23e8c0b0d99f585499baddda70af6a8b26f49bea/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23e8c0b0d99f585499baddda70af6a8b26f49bea/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=23e8c0b0d99f585499baddda70af6a8b26f49bea", "patch": "@@ -1447,11 +1447,11 @@ class buffer_overread : public past_the_end\n \tprint_dec (m_out_of_bounds_range.m_size_in_bytes,\n \t\t   num_bytes_past_buf, UNSIGNED);\n \tif (m_diag_arg)\n-\t  inform (rich_loc->get_loc (), \"write is %s bytes past the end\"\n+\t  inform (rich_loc->get_loc (), \"read is %s bytes past the end\"\n \t\t\t\t\t\" of %qE\", num_bytes_past_buf,\n \t\t\t\t\t\t    m_diag_arg);\n \telse\n-\t  inform (rich_loc->get_loc (), \"write is %s bytes past the end\"\n+\t  inform (rich_loc->get_loc (), \"read is %s bytes past the end\"\n \t\t\t\t\t\"of the region\",\n \t\t\t\t\tnum_bytes_past_buf);\n       }"}, {"sha": "61cbfc75c11e5a7793dce92b56478ca48e1bc00d", "filename": "gcc/testsuite/gcc.dg/analyzer/out-of-bounds-read-char-arr.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23e8c0b0d99f585499baddda70af6a8b26f49bea/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-read-char-arr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23e8c0b0d99f585499baddda70af6a8b26f49bea/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-read-char-arr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-read-char-arr.c?ref=23e8c0b0d99f585499baddda70af6a8b26f49bea", "patch": "@@ -0,0 +1,55 @@\n+char arr[10]; /* { dg-message \"capacity is 10 bytes\" } */\n+\n+char int_arr_read_element_before_start_far(void)\n+{\n+  return arr[-100]; /* { dg-warning \"buffer underread\" \"warning\" } */\n+  /* { dg-message \"out-of-bounds read at byte -100 but 'arr' starts at byte 0\" \"final event\" { target *-*-* } .-1 } */\n+}\n+\n+char int_arr_read_element_before_start_near(void)\n+{\n+  return arr[-2]; /* { dg-warning \"buffer underread\" \"warning\" } */\n+  /* { dg-message \"out-of-bounds read at byte -2 but 'arr' starts at byte 0\" \"final event\" { target *-*-* } .-1 } */\n+}\n+\n+char int_arr_read_element_before_start_off_by_one(void)\n+{\n+  return arr[-1]; /* { dg-warning \"buffer underread\" \"warning\" } */\n+  /* { dg-message \"out-of-bounds read at byte -1 but 'arr' starts at byte 0\" \"final event\" { target *-*-* } .-1 } */\n+}\n+\n+char int_arr_read_element_at_start(void)\n+{\n+  return arr[0];\n+}\n+\n+char int_arr_read_element_at_end(void)\n+{\n+  return arr[9];\n+}\n+\n+char int_arr_read_element_after_end_off_by_one(void)\n+{\n+  return arr[10]; /* { dg-warning \"buffer overread\" \"warning\" } */\n+  /* { dg-message \"out-of-bounds read at byte 10 but 'arr' ends at byte 10\" \"final event\" { target *-*-* } .-1 } */\n+  /* { dg-message \"read is 1 bytes past the end of 'arr'\" \"note\" { target *-*-* } .-2 } */\n+  // FIXME(PR 106626): \"1 bytes\"\n+}\n+\n+char int_arr_read_element_after_end_near(void)\n+{\n+  return arr[11]; /* { dg-warning \"buffer overread\" \"warning\" } */\n+  /* { dg-message \"out-of-bounds read at byte 11 but 'arr' ends at byte 10\" \"final event\" { target *-*-* } .-1 } */\n+  /* { dg-message \"read is 1 bytes past the end of 'arr'\" \"note\" { target *-*-* } .-2 } */\n+  // FIXME(PR 106626): is the note correct?\n+  // FIXME(PR 106626): \"1 bytes\"\n+}\n+\n+char int_arr_read_element_after_end_far(void)\n+{\n+  return arr[100]; /* { dg-warning \"buffer overread\" \"warning\" } */\n+  /* { dg-message \"out-of-bounds read at byte 100 but 'arr' ends at byte 10\" \"final event\" { target *-*-* } .-1 } */\n+  /* { dg-message \"read is 1 bytes past the end of 'arr'\" \"note\" { target *-*-* } .-2 } */\n+  // FIXME(PR 106626): the note seems incorrect (size of access is 1 byte, but magnitude beyond boundary is 90)\n+  // FIXME(PR 106626): \"1 bytes\"\n+}"}, {"sha": "0bb30d24e9f9a001b97adf22d8c739540bcf1475", "filename": "gcc/testsuite/gcc.dg/analyzer/out-of-bounds-read-int-arr.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23e8c0b0d99f585499baddda70af6a8b26f49bea/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-read-int-arr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23e8c0b0d99f585499baddda70af6a8b26f49bea/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-read-int-arr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-read-int-arr.c?ref=23e8c0b0d99f585499baddda70af6a8b26f49bea", "patch": "@@ -0,0 +1,54 @@\n+#include <stdint.h>\n+\n+int32_t arr[10]; /* { dg-message \"capacity is 40 bytes\" } */\n+\n+int32_t int_arr_read_element_before_start_far(void)\n+{\n+  return arr[-100]; /* { dg-warning \"buffer underread\" \"warning\" } */\n+  /* { dg-message \"out-of-bounds read from byte -400 till byte -397 but 'arr' starts at byte 0\" \"final event\" { target *-*-* } .-1 } */\n+}\n+\n+int32_t int_arr_read_element_before_start_near(void)\n+{\n+  return arr[-2]; /* { dg-warning \"buffer underread\" \"warning\" } */\n+  /* { dg-message \"out-of-bounds read from byte -8 till byte -5 but 'arr' starts at byte 0\" \"final event\" { target *-*-* } .-1 } */\n+}\n+\n+int32_t int_arr_read_element_before_start_off_by_one(void)\n+{\n+  return arr[-1]; /* { dg-warning \"buffer underread\" \"warning\" } */\n+  /* { dg-message \"out-of-bounds read from byte -4 till byte -1 but 'arr' starts at byte 0\" \"final event\" { target *-*-* } .-1 } */\n+}\n+\n+int32_t int_arr_read_element_at_start(void)\n+{\n+  return arr[0];\n+}\n+\n+int32_t int_arr_read_element_at_end(void)\n+{\n+  return arr[9];\n+}\n+\n+int32_t int_arr_read_element_after_end_off_by_one(void)\n+{\n+  return arr[10]; /* { dg-warning \"buffer overread\" \"warning\" } */\n+  /* { dg-message \"out-of-bounds read from byte 40 till byte 43 but 'arr' ends at byte 40\" \"final event\" { target *-*-* } .-1 } */\n+  /* { dg-message \"read is 4 bytes past the end of 'arr'\" \"note\" { target *-*-* } .-2 } */\n+}\n+\n+int32_t int_arr_read_element_after_end_near(void)\n+{\n+  return arr[11]; /* { dg-warning \"buffer overread\" \"warning\" } */\n+  /* { dg-message \"out-of-bounds read from byte 44 till byte 47 but 'arr' ends at byte 40\" \"final event\" { target *-*-* } .-1 } */\n+  /* { dg-message \"read is 4 bytes past the end of 'arr'\" \"note\" { target *-*-* } .-2 } */\n+  // FIXME(PR 106626): is the note correct?\n+}\n+\n+int32_t int_arr_read_element_after_end_far(void)\n+{\n+  return arr[100]; /* { dg-warning \"buffer overread\" \"warning\" } */\n+  /* { dg-message \"out-of-bounds read from byte 400 till byte 403 but 'arr' ends at byte 40\" \"final event\" { target *-*-* } .-1 } */\n+  /* { dg-message \"read is 4 bytes past the end of 'arr'\" \"note\" { target *-*-* } .-2 } */\n+  // FIXME(PR 106626): the note seems incorrect (size of access is 4 bytes, but magnitude beyond boundary is 390-393)\n+}"}, {"sha": "47fbc5207eedf285dc947f188aeb5d530d2c91d2", "filename": "gcc/testsuite/gcc.dg/analyzer/out-of-bounds-write-char-arr.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23e8c0b0d99f585499baddda70af6a8b26f49bea/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-write-char-arr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23e8c0b0d99f585499baddda70af6a8b26f49bea/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-write-char-arr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-write-char-arr.c?ref=23e8c0b0d99f585499baddda70af6a8b26f49bea", "patch": "@@ -0,0 +1,55 @@\n+char arr[10]; /* { dg-message \"capacity is 10 bytes\" } */\n+\n+void int_arr_write_element_before_start_far(char x)\n+{\n+  arr[-100] = x; /* { dg-warning \"buffer underflow\" \"warning\" } */\n+  /* { dg-message \"out-of-bounds write at byte -100 but 'arr' starts at byte 0\" \"final event\" { target *-*-* } .-1 } */\n+}\n+\n+void int_arr_write_element_before_start_near(char x)\n+{\n+  arr[-2] = x; /* { dg-warning \"buffer underflow\" \"warning\" } */\n+  /* { dg-message \"out-of-bounds write at byte -2 but 'arr' starts at byte 0\" \"final event\" { target *-*-* } .-1 } */\n+}\n+\n+void int_arr_write_element_before_start_off_by_one(char x)\n+{\n+  arr[-1] = x; /* { dg-warning \"buffer underflow\" \"warning\" } */\n+  /* { dg-message \"out-of-bounds write at byte -1 but 'arr' starts at byte 0\" \"final event\" { target *-*-* } .-1 } */\n+}\n+\n+void int_arr_write_element_at_start(char x)\n+{\n+  arr[0] = x;\n+}\n+\n+void int_arr_write_element_at_end(char x)\n+{\n+  arr[9] = x;\n+}\n+\n+void int_arr_write_element_after_end_off_by_one(char x)\n+{\n+  arr[10] = x; /* { dg-warning \"buffer overflow\" \"warning\" } */\n+  /* { dg-message \"out-of-bounds write at byte 10 but 'arr' ends at byte 10\" \"final event\" { target *-*-* } .-1 } */\n+  /* { dg-message \"write is 1 bytes past the end of 'arr'\" \"note\" { target *-*-* } .-2 } */\n+  // FIXME(PR 106626): \"1 bytes\"\n+}\n+\n+void int_arr_write_element_after_end_near(char x)\n+{\n+  arr[11] = x; /* { dg-warning \"buffer overflow\" \"warning\" } */\n+  /* { dg-message \"out-of-bounds write at byte 11 but 'arr' ends at byte 10\" \"final event\" { target *-*-* } .-1 } */\n+  /* { dg-message \"write is 1 bytes past the end of 'arr'\" \"note\" { target *-*-* } .-2 } */\n+  // FIXME(PR 106626): is the note correct?\n+  // FIXME(PR 106626): \"1 bytes\"\n+}\n+\n+void int_arr_write_element_after_end_far(char x)\n+{\n+  arr[100] = x; /* { dg-warning \"buffer overflow\" \"warning\" } */\n+  /* { dg-message \"out-of-bounds write at byte 100 but 'arr' ends at byte 10\" \"final event\" { target *-*-* } .-1 } */\n+  /* { dg-message \"write is 1 bytes past the end of 'arr'\" \"note\" { target *-*-* } .-2 } */\n+  // FIXME(PR 106626): the note seems incorrect (size of access is 1 byte, but magnitude beyond boundary is 90)\n+  // FIXME(PR 106626): \"1 bytes\"\n+}"}, {"sha": "bf9760ee978f25f30e7a518a65deb3bdd24bcf82", "filename": "gcc/testsuite/gcc.dg/analyzer/out-of-bounds-write-int-arr.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23e8c0b0d99f585499baddda70af6a8b26f49bea/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-write-int-arr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23e8c0b0d99f585499baddda70af6a8b26f49bea/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-write-int-arr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-write-int-arr.c?ref=23e8c0b0d99f585499baddda70af6a8b26f49bea", "patch": "@@ -0,0 +1,54 @@\n+#include <stdint.h>\n+\n+int32_t arr[10]; /* { dg-message \"capacity is 40 bytes\" } */\n+\n+void int_arr_write_element_before_start_far(int32_t x)\n+{\n+  arr[-100] = x; /* { dg-warning \"buffer underflow\" \"warning\" } */\n+  /* { dg-message \"out-of-bounds write from byte -400 till byte -397 but 'arr' starts at byte 0\" \"final event\" { target *-*-* } .-1 } */\n+}\n+\n+void int_arr_write_element_before_start_near(int32_t x)\n+{\n+  arr[-2] = x; /* { dg-warning \"buffer underflow\" \"warning\" } */\n+  /* { dg-message \"out-of-bounds write from byte -8 till byte -5 but 'arr' starts at byte 0\" \"final event\" { target *-*-* } .-1 } */\n+}\n+\n+void int_arr_write_element_before_start_off_by_one(int32_t x)\n+{\n+  arr[-1] = x; /* { dg-warning \"buffer underflow\" \"warning\" } */\n+  /* { dg-message \"out-of-bounds write from byte -4 till byte -1 but 'arr' starts at byte 0\" \"final event\" { target *-*-* } .-1 } */\n+}\n+\n+void int_arr_write_element_at_start(int32_t x)\n+{\n+  arr[0] = x;\n+}\n+\n+void int_arr_write_element_at_end(int32_t x)\n+{\n+  arr[9] = x;\n+}\n+\n+void int_arr_write_element_after_end_off_by_one(int32_t x)\n+{\n+  arr[10] = x; /* { dg-warning \"buffer overflow\" \"warning\" } */\n+  /* { dg-message \"out-of-bounds write from byte 40 till byte 43 but 'arr' ends at byte 40\" \"final event\" { target *-*-* } .-1 } */\n+  /* { dg-message \"write is 4 bytes past the end of 'arr'\" \"note\" { target *-*-* } .-2 } */\n+}\n+\n+void int_arr_write_element_after_end_near(int32_t x)\n+{\n+  arr[11] = x; /* { dg-warning \"buffer overflow\" \"warning\" } */\n+  /* { dg-message \"out-of-bounds write from byte 44 till byte 47 but 'arr' ends at byte 40\" \"final event\" { target *-*-* } .-1 } */\n+  /* { dg-message \"write is 4 bytes past the end of 'arr'\" \"note\" { target *-*-* } .-2 } */\n+  // FIXME(PR 106626): is the note correct?\n+}\n+\n+void int_arr_write_element_after_end_far(int32_t x)\n+{\n+  arr[100] = x; /* { dg-warning \"buffer overflow\" \"warning\" } */\n+  /* { dg-message \"out-of-bounds write from byte 400 till byte 403 but 'arr' ends at byte 40\" \"final event\" { target *-*-* } .-1 } */\n+  /* { dg-message \"write is 4 bytes past the end of 'arr'\" \"note\" { target *-*-* } .-2 } */\n+  // FIXME(PR 106626): the note seems incorrect (size of access is 4 bytes, but magnitude beyond boundary is 390-393)\n+}"}]}