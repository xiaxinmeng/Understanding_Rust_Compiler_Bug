{"sha": "87f85ea0660e58ac0f2447d1c4a593863601df0e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODdmODVlYTA2NjBlNThhYzBmMjQ0N2QxYzRhNTkzODYzNjAxZGYwZQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-05-03T21:44:31Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-05-03T21:44:31Z"}, "message": "re PR c/10604 (-Wall includes sign conversion warning [3.3 regression])\n\n\tPR c/10604\n\n\t* c-common.c (warn_sign_compare): Initialize to -1.\n\t* c-opts.c (c_common_init_options): Don't set warn_sign_compare here.\n\t(c_common_decode_option <OPT_Wall>): Set warn_sign_compare\n\tfor C++ only.\n\t(c_common_post_options): Set warn_sign_compare from extra_warnings\n\tif it's still -1 at this point.\n\n\t* toplev.c (maybe_warn_unused_parameter): New static variable.\n\t(set_Wextra): New static function.\n\t(W_options): Remove \"extra\".\n\t(decode_W_option): Call set_Wextra.\n\t(independent_decode_option): Likewise.\n\t(set_Wunused): Cooperate with set_Wextra in setting\n\twarn_unused_parameter.\n\t(rest_of_compilation): No need to check extra_warnings as\n\twell as warn_uninitialized.\n\n\t* c-typeck.c (build_binary_op, build_conditional_expr):\n\tNo need to check extra_warnings as well as warn_sign_compare.\n\t(internal_build_compound_expr): No need to check extra_warnings\n\tas well as warn_unused_value.\n\t* function.c (expand_function_end): No need to check extra_warnings\n\tas well as warn_unused_parameter.\n\t* stmt.c (expand_expr_stmt_value): No need to check extra_warnings\n\tas well as warn_unused_value.\n\t* cp/typeck.c (build_x_compound_expr): No need to check\n\textra_warnings as well as warn_unused_value.\n\n\t* doc/invoke.texi: Clarify documentation of -Wsign-compare.\n\t* gcc.dg/compare7.c, g++.dg/warn/compare1.C: New testcases.\n\n\t* Makefile.in: Disable -Werror for gengtype-lex.o.\n\nFrom-SVN: r66436", "tree": {"sha": "e37cc59b695cc55218915e90bcce25c7621fdf58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e37cc59b695cc55218915e90bcce25c7621fdf58"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87f85ea0660e58ac0f2447d1c4a593863601df0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87f85ea0660e58ac0f2447d1c4a593863601df0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87f85ea0660e58ac0f2447d1c4a593863601df0e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87f85ea0660e58ac0f2447d1c4a593863601df0e/comments", "author": null, "committer": null, "parents": [{"sha": "e7b5f0c9b4aa73a1de50162ae18101dab4f86ce4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7b5f0c9b4aa73a1de50162ae18101dab4f86ce4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7b5f0c9b4aa73a1de50162ae18101dab4f86ce4"}], "stats": {"total": 1078, "additions": 578, "deletions": 500}, "files": [{"sha": "c5621b55815ae48bfd40d01e2e27b9075a488040", "filename": "gcc/ChangeLog", "status": "modified", "additions": 484, "deletions": 451, "changes": 935, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87f85ea0660e58ac0f2447d1c4a593863601df0e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87f85ea0660e58ac0f2447d1c4a593863601df0e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=87f85ea0660e58ac0f2447d1c4a593863601df0e", "patch": "@@ -1,10 +1,43 @@\n+2003-05-03  Zack Weinberg  <zack@codesourcery.com>\n+\n+\tPR c/10604\n+\t* c-common.c (warn_sign_compare): Initialize to -1.\n+\t* c-opts.c (c_common_init_options): Don't set warn_sign_compare here.\n+\t(c_common_decode_option <OPT_Wall>): Set warn_sign_compare\n+\tfor C++ only.\n+\t(c_common_post_options): Set warn_sign_compare from extra_warnings\n+\tif it's still -1 at this point.\n+\n+\t* toplev.c (maybe_warn_unused_parameter): New static variable.\n+\t(set_Wextra): New static function.\n+\t(W_options): Remove \"extra\".\n+\t(decode_W_option): Call set_Wextra.\n+\t(independent_decode_option): Likewise.\n+\t(set_Wunused): Cooperate with set_Wextra in setting\n+\twarn_unused_parameter.\n+\t(rest_of_compilation): No need to check extra_warnings as\n+\twell as warn_uninitialized.\n+\n+\t* c-typeck.c (build_binary_op, build_conditional_expr):\n+\tNo need to check extra_warnings as well as warn_sign_compare.\n+\t(internal_build_compound_expr): No need to check extra_warnings\n+\tas well as warn_unused_value.\n+\t* function.c (expand_function_end): No need to check extra_warnings\n+\tas well as warn_unused_parameter.\n+\t* stmt.c (expand_expr_stmt_value): No need to check extra_warnings\n+\tas well as warn_unused_value.\n+\n+\t* doc/invoke.texi: Clarify documentation of -Wsign-compare.\n+\n+\t* Makefile.in: Disable -Werror for gengtype-lex.o.\n+\n 2003-05-03  Olivier Hainque  <hainque@act-europe.fr>\n \n \t* emit-rtl.c (last_call_insn, add_function_usage_to): New functions.\n \t* rtl.h (last_call_insn, add_function_usage_to): New prototypes.\n \t* builtins.c (expand_builtin_apply): Use the new emit-rtl functions.\n \t* calls.c (emit_call_1): Likewise.\n-\t(expand_call): For calls initializing constant memory, replace \n+\t(expand_call): For calls initializing constant memory, replace\n \temission of standalone mem /u clobber with function usage entry.\n \t* expr.c (emit_block_move_via_libcall): Likewise.\n \t* cse.c (count_reg_usage, case EXPR_LIST): New case.\n@@ -42,7 +75,7 @@\n \t* tree-inline.c (find_alloca_call): Likewise.\n \t(find_builtin_longjmp_call): Likewise.\n \t* gcc.c (input_filename): Make static.\n-\t\n+\n 2003-05-03  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/mips/mips.md: Fix comment typo.\n@@ -77,7 +110,7 @@\n \n \t* config/rs6000/rs6000.c (rs6000_attribute_table): Add 'extern'\n \tto tentative declaration.\n-\t\n+\n \t* config/rs6000/sysv4.h (SYMBOL_FLAG_SMALL_V4): Delete.\n \t(SYMBOL_FLAG_SMALL_V4): Delete.\n \t* config/rs6000/rs6000.c (small_data_operand): Use SYMBOL_REF_SMALL_P.\n@@ -154,12 +187,12 @@\n \t* configure: Regenerate.\n \n 2003-05-01  Falk Hueffner  <falk.hueffner@student.uni-tuebingen.de>\n- \n-        PR target/8257\n-        * config/alpha/alpha.c (alpha_sa_mask, alpha_expand_prologue,\n-        alpha_start_function, alpha_expand_epilogue, unicosmk_gen_dsib):\n-        Avoid undefined shifts by making the shift operand unsigned.\n- \n+\n+\tPR target/8257\n+\t* config/alpha/alpha.c (alpha_sa_mask, alpha_expand_prologue,\n+\talpha_start_function, alpha_expand_epilogue, unicosmk_gen_dsib):\n+\tAvoid undefined shifts by making the shift operand unsigned.\n+\n 2003-05-01  DJ Delorie  <dj@redhat.com>\n \n \t* reload.c (find_reloads): Also check that all of a multi-reg\n@@ -254,549 +287,549 @@\n \n \t2003-04-07  Richard Sandiford  <rsandifo@redhat.com>\n \n-\t        * config/mips/mips.c (mips_classify_symbol): Add catch-all case for\n-\t        handling local labels when TARGET_ABICALLS.\n+\t\t* config/mips/mips.c (mips_classify_symbol): Add catch-all case for\n+\t\thandling local labels when TARGET_ABICALLS.\n \n \t2003-04-04  Richard Sandiford  <rsandifo@redhat.com>\n \n-\t        * config/mips/mips-protos.h (mips_expand_epilogue): Add an\n-\t        integer argument.\n-\t        (mips_expand_call): Likewise.\n-\t        * config/mips/mips.h (TARGET_SIBCALLS): New macro.\n-\t        (FIXED_REGISTERS): Clear $31 entry.\n-\t        (CALL_USED_REGISTERS, CALL_REALLY_USED_REGISTER): Likewise.\n-\t        (EPILOGUE_USES): Define.\n-\t        * config/mips/mips.c (mips_function_ok_for_sibcall): New function.\n-\t        (TARGET_FUNCTION_OK_FOR_SIBCALL): Use it.\n-\t        (override_options): Add a 'j' register class.\n-\t        (mips_expand_call): Handle sibcalls\n-\t        (mips_expand_epilogue): Handle epilogues for sibcalls.\n-\t        * config/mips/mips.md (epilogue): Adjust call to mips_expand_epilogue.\n-\t        (sibcall_epilogue): New pattern.\n-\t        (call, call_value): Adjust calls to mips_expand_call.\n-\t        (sibcall, sibcall_value): New expanders.\n-\t        (sibcall_internal, sibcall_value_internal): New patterns.\n-\t        (sibcall_value_multiple_internal): New pattern.\n+\t\t* config/mips/mips-protos.h (mips_expand_epilogue): Add an\n+\t\tinteger argument.\n+\t\t(mips_expand_call): Likewise.\n+\t\t* config/mips/mips.h (TARGET_SIBCALLS): New macro.\n+\t\t(FIXED_REGISTERS): Clear $31 entry.\n+\t\t(CALL_USED_REGISTERS, CALL_REALLY_USED_REGISTER): Likewise.\n+\t\t(EPILOGUE_USES): Define.\n+\t\t* config/mips/mips.c (mips_function_ok_for_sibcall): New function.\n+\t\t(TARGET_FUNCTION_OK_FOR_SIBCALL): Use it.\n+\t\t(override_options): Add a 'j' register class.\n+\t\t(mips_expand_call): Handle sibcalls\n+\t\t(mips_expand_epilogue): Handle epilogues for sibcalls.\n+\t\t* config/mips/mips.md (epilogue): Adjust call to mips_expand_epilogue.\n+\t\t(sibcall_epilogue): New pattern.\n+\t\t(call, call_value): Adjust calls to mips_expand_call.\n+\t\t(sibcall, sibcall_value): New expanders.\n+\t\t(sibcall_internal, sibcall_value_internal): New patterns.\n+\t\t(sibcall_value_multiple_internal): New pattern.\n \n \t2003-03-25  Richard Sandiford  <rsandifo@redhat.com>\n \n-\t        * config/mips/mips.md (extended_mips16): New attribute.\n-\t        (define_attr length): Default to 8 if extended_mips16 == yes.\n-\t        (truncdisi2): Set extended_mips16 to yes for the sll alternative.\n-\t        (truncdihi2, truncdiqi2, *extendsidi2): Likewise.\n-\t        (call_internal): Set extended_mips16 to yes for direct jumps.\n-\t        Remove redundant mode attribute.\n-\t        (call_value_internal, call_value_multiple_internal): Likewise.\n-\t        (call_split): Remove redundant mode attribute.\n-\t        (call_value_split, call_value_multiple_split): Likewise.\n+\t\t* config/mips/mips.md (extended_mips16): New attribute.\n+\t\t(define_attr length): Default to 8 if extended_mips16 == yes.\n+\t\t(truncdisi2): Set extended_mips16 to yes for the sll alternative.\n+\t\t(truncdihi2, truncdiqi2, *extendsidi2): Likewise.\n+\t\t(call_internal): Set extended_mips16 to yes for direct jumps.\n+\t\tRemove redundant mode attribute.\n+\t\t(call_value_internal, call_value_multiple_internal): Likewise.\n+\t\t(call_split): Remove redundant mode attribute.\n+\t\t(call_value_split, call_value_multiple_split): Likewise.\n \n-\t        * config/mips/mips.c (mips_symbol_insns): Rework.  Fix handling\n-\t        of unaligned offsets.\n+\t\t* config/mips/mips.c (mips_symbol_insns): Rework.  Fix handling\n+\t\tof unaligned offsets.\n \n \t       \t* config/mips/mips.c (mips_splittable_symbol_p): Fix handling\n-\t        of SYMBOL_GENERAL.\n+\t\tof SYMBOL_GENERAL.\n \n \t2003-03-22  Richard Sandiford  <rsandifo@redhat.com>\n \n-\t        * config/mips/mips.h (TARGET_EXPLICIT_RELOCS): Add commentary.\n-\t        * config/mips/mips.c (override_options): Disable -mexplicit-relocs\n-\t        for mips16 code.\n+\t\t* config/mips/mips.h (TARGET_EXPLICIT_RELOCS): Add commentary.\n+\t\t* config/mips/mips.c (override_options): Disable -mexplicit-relocs\n+\t\tfor mips16 code.\n \n \t2003-03-22  Richard Sandiford  <rsandifo@redhat.com>\n \n-\t        * config/mips/mips.h (ADDRESS_COST): Define.\n+\t\t* config/mips/mips.h (ADDRESS_COST): Define.\n \n \t2003-03-20  Richard Sandiford  <rsandifo@redhat.com>\n \n-\t        * config/mips/mips.h (EXTRA_CONSTRAINT): Give existing meaning of\n-\t        'R' to 'U'.  Make 'R' mean a single-instruction memory reference.\n-\t        * config/mips/mips.md: Replace 'R' constraints with 'U'.\n+\t\t* config/mips/mips.h (EXTRA_CONSTRAINT): Give existing meaning of\n+\t\t'R' to 'U'.  Make 'R' mean a single-instruction memory reference.\n+\t\t* config/mips/mips.md: Replace 'R' constraints with 'U'.\n \n \t2003-03-18  Richard Sandiford  <rsandifo@redhat.com>\n \n-\t        * config/mips/mips.md (truncdisi2): Add commentary.  Use sll instead\n-\t        of a two-instruction sequence.  Add register->memory alternative.\n-\t        (truncdihi2, truncdiqi2): Likewise.\n-\t        Rework shift/truncate instructions so that they only handle right\n-\t        shifts of 32 (or more, in the case of arithmetic shifts).\n-\t        Add patterns for truncate/sign-extend.\n+\t\t* config/mips/mips.md (truncdisi2): Add commentary.  Use sll instead\n+\t\tof a two-instruction sequence.  Add register->memory alternative.\n+\t\t(truncdihi2, truncdiqi2): Likewise.\n+\t\tRework shift/truncate instructions so that they only handle right\n+\t\tshifts of 32 (or more, in the case of arithmetic shifts).\n+\t\tAdd patterns for truncate/sign-extend.\n \n \t2003-03-13  Richard Sandiford  <rsandifo@redhat.com>\n \n-\t        * configure.in (mips*-*-*): Check for explicit relocation support.\n-\t        * configure: Regenerate.\n+\t\t* configure.in (mips*-*-*): Check for explicit relocation support.\n+\t\t* configure: Regenerate.\n \n \t2003-03-13  Richard Sandiford  <rsandifo@redhat.com>\n \n-\t        * config/mips/mips.h (TARGET_SWITCHES): Add -mexplicit-relocs\n-\t        and -mno-explicit-relocs.\n-\t        (MASK_EXPLICIT_RELOCS): Define.\n-\t        (TARGET_EXPLICIT_RELOCS): Use it.\n-\t        (mips_split_addresses): Remove declaration.\n-\t        * config/mips/mips.c (override_options): Update comment for\n-\t        mips_split_addresses.  Clear MASK_EXPLICIT_RELOCS for non-PIC n64.\n+\t\t* config/mips/mips.h (TARGET_SWITCHES): Add -mexplicit-relocs\n+\t\tand -mno-explicit-relocs.\n+\t\t(MASK_EXPLICIT_RELOCS): Define.\n+\t\t(TARGET_EXPLICIT_RELOCS): Use it.\n+\t\t(mips_split_addresses): Remove declaration.\n+\t\t* config/mips/mips.c (override_options): Update comment for\n+\t\tmips_split_addresses.  Clear MASK_EXPLICIT_RELOCS for non-PIC n64.\n \n \t2003-03-13  Richard Sandiford  <rsandifo@redhat.com>\n \n-\t        * combine.c (gen_lowpart_for_combine): Treat the lowpart Pmode of\n-\t        a CONST as identity.  Check the return value of gen_lowpart_common.\n+\t\t* combine.c (gen_lowpart_for_combine): Treat the lowpart Pmode of\n+\t\ta CONST as identity.  Check the return value of gen_lowpart_common.\n \n \t2003-03-13  Richard Sandiford  <rsandifo@redhat.com>\n \n-\t        * config/mips/mips.c (mips_legitimize_symbol): Handle small data\n-\t        references for TARGET_EXPLICIT_RELOCS.\n-\t        (mips_reloc_string): Return \"%gp_rel(\" for RELOC_GPREL16 if\n-\t        !TARGET_MIPS16.\n+\t\t* config/mips/mips.c (mips_legitimize_symbol): Handle small data\n+\t\treferences for TARGET_EXPLICIT_RELOCS.\n+\t\t(mips_reloc_string): Return \"%gp_rel(\" for RELOC_GPREL16 if\n+\t\t!TARGET_MIPS16.\n \n \t2003-03-13  Richard Sandiford  <rsandifo@redhat.com>\n \n-\t        * config/mips/mips.md: Replace 'IQ' mips16 constraints with just 'Q'.\n-\t        (addsi3): Remove redundant constraints.\n-\t        (addsi3_internal): Use separate register & constant alternatives.\n-\t        Use a 'Q' constraint and \"addiu\" insn for the latter.\n-\t        (adddi3_internal_3, addsi3_internal_2): Likewise.\n+\t\t* config/mips/mips.md: Replace 'IQ' mips16 constraints with just 'Q'.\n+\t\t(addsi3): Remove redundant constraints.\n+\t\t(addsi3_internal): Use separate register & constant alternatives.\n+\t\tUse a 'Q' constraint and \"addiu\" insn for the latter.\n+\t\t(adddi3_internal_3, addsi3_internal_2): Likewise.\n \n \t2003-03-13  Richard Sandiford  <rsandifo@redhat.com>\n \n-\t        * config/mips/mips-protos.h (mips_expand_unaligned_load): Declare.\n-\t        (mips_expand_unaligned_store): Declare.\n-\t        * config/mips/mips.c (mips_get_unaligned_mem): New fn.\n-\t        (mips_expand_unaligned_load, mips_expand_unaligned_store): New fns.\n-\t        * config/mips/mips.md (UNSPEC_ULW, UNSPEC_USW): Remove.\n-\t        (UNSPEC_ULD, UNSPEC_USD): Remove.\n-\t        (UNSPEC_LWL, UNSPEC_LWR, UNSPEC_SWL, UNSPEC_SWR): New.\n-\t        (UNSPEC_LDL, UNSPEC_LDR, UNSPEC_SDL, UNSPEC_SDR): New.\n-\t        (extv, extzv): Use mips_expand_unaligned_load.\n-\t        (insv): Use mips_expand_unaligned_store.  Use a reg_or_0_operand\n-\t        predicate for operand 3.\n-\t        (movsi_ulw, movsi_usw): Replace with...\n-\t        (mov_lwl, mov_lwr, mov_swl, move_swr): ...these new insns.\n-\t        (movdi_uld, movdi_usd): Likewise replace with...\n-\t        (mov_ldl, mov_ldr, mov_sdl, move_sdr): ...these insns.\n+\t\t* config/mips/mips-protos.h (mips_expand_unaligned_load): Declare.\n+\t\t(mips_expand_unaligned_store): Declare.\n+\t\t* config/mips/mips.c (mips_get_unaligned_mem): New fn.\n+\t\t(mips_expand_unaligned_load, mips_expand_unaligned_store): New fns.\n+\t\t* config/mips/mips.md (UNSPEC_ULW, UNSPEC_USW): Remove.\n+\t\t(UNSPEC_ULD, UNSPEC_USD): Remove.\n+\t\t(UNSPEC_LWL, UNSPEC_LWR, UNSPEC_SWL, UNSPEC_SWR): New.\n+\t\t(UNSPEC_LDL, UNSPEC_LDR, UNSPEC_SDL, UNSPEC_SDR): New.\n+\t\t(extv, extzv): Use mips_expand_unaligned_load.\n+\t\t(insv): Use mips_expand_unaligned_store.  Use a reg_or_0_operand\n+\t\tpredicate for operand 3.\n+\t\t(movsi_ulw, movsi_usw): Replace with...\n+\t\t(mov_lwl, mov_lwr, mov_swl, move_swr): ...these new insns.\n+\t\t(movdi_uld, movdi_usd): Likewise replace with...\n+\t\t(mov_ldl, mov_ldr, mov_sdl, move_sdr): ...these insns.\n \n \t2003-02-26  Richard Sandiford  <rsandifo@redhat.com>\n \n-\t        * config/mips/mips-protos.h (mips_global_pic_constant_p): Declare.\n-\t        * config/mips/mips.h (LEA_REGS): New register class.\n-\t        (REG_CLASS_NAMES, REG_CLASS_CONTENTS): Add entries for it.\n-\t        (GR_REG_CLASS_P): Include LEA_REGS.\n-\t        (DANGEROUS_FOR_LA25_P): New macro.\n-\t        (EXTRA_CONSTRAINT): Add !DANGEROUS_FOR_LA25_P to R's condition.\n-\t        Add a T constraint for the DANGEROUS_FOR_LA25_P case.\n-\t        * config/mips/mips.c (mips_regno_to_class): Change GR_REGS\n-\t        entries to LEA_REGS.\n-\t        (mips_global_pic_constant_p): New function.\n-\t        (override_options): Add 'e' register constraint.\n-\t        (mips_secondary_reload_class): Return LEA_REGS when reloading\n-\t        a dangerous constant into a class containing $25.\n-\t        * config/mips/mips.md (movdi_internal2): Add an e <- T alternative.\n-\t        (movsi_internal): Likewise.\n+\t\t* config/mips/mips-protos.h (mips_global_pic_constant_p): Declare.\n+\t\t* config/mips/mips.h (LEA_REGS): New register class.\n+\t\t(REG_CLASS_NAMES, REG_CLASS_CONTENTS): Add entries for it.\n+\t\t(GR_REG_CLASS_P): Include LEA_REGS.\n+\t\t(DANGEROUS_FOR_LA25_P): New macro.\n+\t\t(EXTRA_CONSTRAINT): Add !DANGEROUS_FOR_LA25_P to R's condition.\n+\t\tAdd a T constraint for the DANGEROUS_FOR_LA25_P case.\n+\t\t* config/mips/mips.c (mips_regno_to_class): Change GR_REGS\n+\t\tentries to LEA_REGS.\n+\t\t(mips_global_pic_constant_p): New function.\n+\t\t(override_options): Add 'e' register constraint.\n+\t\t(mips_secondary_reload_class): Return LEA_REGS when reloading\n+\t\ta dangerous constant into a class containing $25.\n+\t\t* config/mips/mips.md (movdi_internal2): Add an e <- T alternative.\n+\t\t(movsi_internal): Likewise.\n \n \t2003-02-23  Richard Sandiford  <rsandifo@redhat.com>\n \n-\t        * config/mips/mips.h (TARGET_SPLIT_CALLS): New macro.\n-\t        * config/mips/mips.md (call_split): New insn.\n-\t        (call_value_split, call_value_multiple_split): New insns.\n-\t        (call_internal): Turn into a define_insn_and_split.  Split the\n-\t        instruction into a call and $gp load if TARGET_SPLIT_CALLS.\n-\t        (call_value_internal, call_value_multiple_internal): Likewise.\n+\t\t* config/mips/mips.h (TARGET_SPLIT_CALLS): New macro.\n+\t\t* config/mips/mips.md (call_split): New insn.\n+\t\t(call_value_split, call_value_multiple_split): New insns.\n+\t\t(call_internal): Turn into a define_insn_and_split.  Split the\n+\t\tinstruction into a call and $gp load if TARGET_SPLIT_CALLS.\n+\t\t(call_value_internal, call_value_multiple_internal): Likewise.\n \n \t2003-02-23  Richard Sandiford  <rsandifo@redhat.com>\n \n-\t        * config/mips/mips.c (mips_reloc_string): Return \"%got(\" for\n-\t        RELOC_GOT_PAGE and RELOC_GOT_DISP if !TARGET_NEWABI.\n-\t        (mips_encode_section_info): Don't take symbol visibility into\n-\t        account if TARGET_ABICALLS.  Add more commentary.\n-\t        * config/mips/mips.md: Add commentary above reloc constants.\n+\t\t* config/mips/mips.c (mips_reloc_string): Return \"%got(\" for\n+\t\tRELOC_GOT_PAGE and RELOC_GOT_DISP if !TARGET_NEWABI.\n+\t\t(mips_encode_section_info): Don't take symbol visibility into\n+\t\taccount if TARGET_ABICALLS.  Add more commentary.\n+\t\t* config/mips/mips.md: Add commentary above reloc constants.\n \n \t2003-02-12  Richard Sandiford  <rsandifo@redhat.com>\n \n-\t        * config/mips/mips.c (mips_legitimize_const_move): New, extracted\n-\t        from mips_legitimize_move.  Legitimize constant pool references.\n-\t        (mips_legitimize_move): Call mips_legitimize_const_move.  Attach\n-\t        a REG_EQUAL note to the last instruction.\n+\t\t* config/mips/mips.c (mips_legitimize_const_move): New, extracted\n+\t\tfrom mips_legitimize_move.  Legitimize constant pool references.\n+\t\t(mips_legitimize_move): Call mips_legitimize_const_move.  Attach\n+\t\ta REG_EQUAL note to the last instruction.\n \n \t2003-02-11  Richard Sandiford  <rsandifo@redhat.com>\n \n-\t        * config/mips/mips-protos.h (mips_simplify_dwarf_addr): Declare.\n-\t        * config/mips/mips.h (TARGET_EXPLICIT_RELOCS, TARGET_NEWABI): New.\n-\t        (ASM_SIMPLIFY_DWARF_ADDR): Define to mips_simplify_dwarf_addr.\n-\t        (EXTRA_CONSTRAINT): Allow symbolic call addresses for TARGET_ABICALLS.\n-\t        * config/mips/mips.md (UNSPEC_HIGH): New constant.\n-\t        (UNSPEC_RELOC_GPREL16): Rename to...\n-\t        (RELOC_GPREL16): ...this.\n-\t        (RELOC_GOT_HI, RELOC_GOT_LO, RELOC_GOT_PAGE, RELOC_GOT_DISP): New.\n-\t        (RELOC_CALL16, RELOC_CALL_HI, RELOC_CALL_LO): New.\n-\t        (macro_calls): New attribute.\n-\t        (length): Use it to set the default length of calls.  Don't allow\n-\t        calls to have delay slots if macro_calls is \"yes\".\n-\t        (luisi, luidi): New patterns.\n-\t        (lowsi, lowdi): Use '%R' to print the relocation.\n-\t        (lowdi_extend): Remove.\n-\t        (loadgp): Remove mode from operand 0.  Use '%0' instead of '%a0'.\n-\t        (call_internal): Merge alternatives.  Always use \"jal\".\n-\t        (call_value_internal, call_value_multiple_internal): Likewise.\n-\t        (reloc_gprel16): Remove.\n-\t        * config/mips/mips.c (mips_got_alias_set): New variable.\n-\t        (mips_classify_constant): Handle the new relocation constants.\n-\t        (mips_classify_symbol): Reverse the sense of SYMBOL_REF_FLAG for PIC.\n-\t        (mips_symbolic_address_p): Return false if generating explicit relocs.\n-\t        Otherwise allow local PIC symbols to have an offset.\n-\t        (mips_splittable_symbol_p): New function.\n-\t        (mips_classify_address): Use it to check whether a LO_SUM is valid.\n-\t        (mips_const_insns): Always accept HIGH.\n-\t        (call_insn_operand): Don't accept global symbols if using explicit\n-\t        relocs.\n-\t        (move_operand): Don't accept HIGH when generating PIC.\n-\t        (mips_reloc, mips_lui_reloc): New functions.\n-\t        (mips_force_temporary): Remove MODE argument.  Expect VALUE to\n-\t        be a valid right-hand-side for a SET pattern.\n-\t        (mips_load_got, mips_load_got16, mips_load_got32): New functions.\n-\t        (mips_emit_high): New function.\n-\t        (mips_legitimize_symbol): Use mips_reloc for the mips16 gp-relative\n-\t        case.  Use mips_splittable_symbol_p to check whether a LO_SUM\n-\t        address should be used.  Use mips_emit_high to generate the\n-\t        high part of such an address.  Adjust the global symbol + offset\n-\t        case to match the change to mips_force_temprorary.\n-\t        (mips_legitimize_move): Shuffle call to mips_legitimize_symbol.\n-\t        If generating explicit-reloc PIC, load the address of global\n-\t        symbols from the GOT.  Use mips_emit_high to emit the high part\n-\t        of an address.\n-\t        (mips_simplify_dwarf_addr): New function.\n-\t        (mips_move_1word): Use lwc1 instead of l.s and swc1 instead of s.s.\n-\t        (mips_move_2words): Likewise ldc1/l.d and sdc1/s.d if TARGET_64BIT.\n-\t        (mips_expand_call): Load the addresses of global functions using\n-\t        %call* relocs if generating explicit-reloc PIC.  Don't generate\n-\t        an exception_receiver pattern.\n-\t        (override_options): Initialize mips_got_alias_set.\n-\t        (print_relocation): Remove in favour of...\n-\t        (mips_reloc_string): ...this new function.\n-\t        (print_operand): Handle '%R'.  Use mips_reloc_string.\n-\t        (print_operand_address): Use print_operand to print the symbolic\n-\t        part of a LO_SUM address.\n-\t        (mips_output_function_prologue): Use .cprestore, reverting last patch.\n-\t        (mips_encode_section_info): Factor out DECL_RTL accesses.  Reverse\n-\t        sense of SYMBOL_REF_FLAG for PIC, using binds_local_p to check\n-\t        for local symbols.\n+\t\t* config/mips/mips-protos.h (mips_simplify_dwarf_addr): Declare.\n+\t\t* config/mips/mips.h (TARGET_EXPLICIT_RELOCS, TARGET_NEWABI): New.\n+\t\t(ASM_SIMPLIFY_DWARF_ADDR): Define to mips_simplify_dwarf_addr.\n+\t\t(EXTRA_CONSTRAINT): Allow symbolic call addresses for TARGET_ABICALLS.\n+\t\t* config/mips/mips.md (UNSPEC_HIGH): New constant.\n+\t\t(UNSPEC_RELOC_GPREL16): Rename to...\n+\t\t(RELOC_GPREL16): ...this.\n+\t\t(RELOC_GOT_HI, RELOC_GOT_LO, RELOC_GOT_PAGE, RELOC_GOT_DISP): New.\n+\t\t(RELOC_CALL16, RELOC_CALL_HI, RELOC_CALL_LO): New.\n+\t\t(macro_calls): New attribute.\n+\t\t(length): Use it to set the default length of calls.  Don't allow\n+\t\tcalls to have delay slots if macro_calls is \"yes\".\n+\t\t(luisi, luidi): New patterns.\n+\t\t(lowsi, lowdi): Use '%R' to print the relocation.\n+\t\t(lowdi_extend): Remove.\n+\t\t(loadgp): Remove mode from operand 0.  Use '%0' instead of '%a0'.\n+\t\t(call_internal): Merge alternatives.  Always use \"jal\".\n+\t\t(call_value_internal, call_value_multiple_internal): Likewise.\n+\t\t(reloc_gprel16): Remove.\n+\t\t* config/mips/mips.c (mips_got_alias_set): New variable.\n+\t\t(mips_classify_constant): Handle the new relocation constants.\n+\t\t(mips_classify_symbol): Reverse the sense of SYMBOL_REF_FLAG for PIC.\n+\t\t(mips_symbolic_address_p): Return false if generating explicit relocs.\n+\t\tOtherwise allow local PIC symbols to have an offset.\n+\t\t(mips_splittable_symbol_p): New function.\n+\t\t(mips_classify_address): Use it to check whether a LO_SUM is valid.\n+\t\t(mips_const_insns): Always accept HIGH.\n+\t\t(call_insn_operand): Don't accept global symbols if using explicit\n+\t\trelocs.\n+\t\t(move_operand): Don't accept HIGH when generating PIC.\n+\t\t(mips_reloc, mips_lui_reloc): New functions.\n+\t\t(mips_force_temporary): Remove MODE argument.  Expect VALUE to\n+\t\tbe a valid right-hand-side for a SET pattern.\n+\t\t(mips_load_got, mips_load_got16, mips_load_got32): New functions.\n+\t\t(mips_emit_high): New function.\n+\t\t(mips_legitimize_symbol): Use mips_reloc for the mips16 gp-relative\n+\t\tcase.  Use mips_splittable_symbol_p to check whether a LO_SUM\n+\t\taddress should be used.  Use mips_emit_high to generate the\n+\t\thigh part of such an address.  Adjust the global symbol + offset\n+\t\tcase to match the change to mips_force_temprorary.\n+\t\t(mips_legitimize_move): Shuffle call to mips_legitimize_symbol.\n+\t\tIf generating explicit-reloc PIC, load the address of global\n+\t\tsymbols from the GOT.  Use mips_emit_high to emit the high part\n+\t\tof an address.\n+\t\t(mips_simplify_dwarf_addr): New function.\n+\t\t(mips_move_1word): Use lwc1 instead of l.s and swc1 instead of s.s.\n+\t\t(mips_move_2words): Likewise ldc1/l.d and sdc1/s.d if TARGET_64BIT.\n+\t\t(mips_expand_call): Load the addresses of global functions using\n+\t\t%call* relocs if generating explicit-reloc PIC.  Don't generate\n+\t\tan exception_receiver pattern.\n+\t\t(override_options): Initialize mips_got_alias_set.\n+\t\t(print_relocation): Remove in favour of...\n+\t\t(mips_reloc_string): ...this new function.\n+\t\t(print_operand): Handle '%R'.  Use mips_reloc_string.\n+\t\t(print_operand_address): Use print_operand to print the symbolic\n+\t\tpart of a LO_SUM address.\n+\t\t(mips_output_function_prologue): Use .cprestore, reverting last patch.\n+\t\t(mips_encode_section_info): Factor out DECL_RTL accesses.  Reverse\n+\t\tsense of SYMBOL_REF_FLAG for PIC, using binds_local_p to check\n+\t\tfor local symbols.\n \n \t2003-02-02  Eric Christopher  <echristo@redhat.com>\n \n \t       \t* config/mips/mips.c (mips_sign_extend): Remove.\n-\t        * config/mips/mips-protos.h: Ditto.\n-\t        * config/mips/mips.md (movdi_internal2_extend): Remove.\n-\t        (extendsidi2): Fix mode of convert_memory_address.\n+\t\t* config/mips/mips-protos.h: Ditto.\n+\t\t* config/mips/mips.md (movdi_internal2_extend): Remove.\n+\t\t(extendsidi2): Fix mode of convert_memory_address.\n \n \t2003-01-24  Eric Christopher  <echristo@redhat.com>\n \n-\t        * config/mips/mips.md: Rewrite zero_extend* and extend*\n-\t        patterns. Use explicit instructions and split after reload\n-\t        for register extensions.\n-\t        (ashlsi3_internal1_extend): New combiner pattern for\n-\t        shift and extend combinations.\n-\t        * config/mips/mips.h: Change Pmode back to ptr_mode\n-\t        for performance enhancement.\n-\t        * combine.c (expand_compound_operation): Make sure\n-\t        that zero_extend operation is profitable.\n+\t\t* config/mips/mips.md: Rewrite zero_extend* and extend*\n+\t\tpatterns. Use explicit instructions and split after reload\n+\t\tfor register extensions.\n+\t\t(ashlsi3_internal1_extend): New combiner pattern for\n+\t\tshift and extend combinations.\n+\t\t* config/mips/mips.h: Change Pmode back to ptr_mode\n+\t\tfor performance enhancement.\n+\t\t* combine.c (expand_compound_operation): Make sure\n+\t\tthat zero_extend operation is profitable.\n \n \t2003-01-14  Richard Sandiford  <rsandifo@redhat.com>\n \n-\t        * config/mips/mips.h (TRAMPOLINE_TEMPLATE): Make size of stored\n-\t        addresses depend on ptr_mode rather than Pmode.\n-\t        (TRAMPOLINE_SIZE, TRAMPOLINE_ALIGNMENT): Update acoordingly.\n-\t        (INITIALIZE_TRAMPOLINE): Rework to handle Pmode != ptr_mode.\n-\t        (CASE_VECTOR_MODE): Use ptr_mode for !TARGET_MIPS16.\n-\t        (ASM_OUTPUT_ADDR_VEC_ELT): Update accordingly.\n-\t        * config/mips/mips.md (tablejump): Likewise.  Remove Pmode\n-\t        condition for selecting cpaddsi or cpadddi: use cpadd instead.\n-\t        (tablejump_internal1): Remove condition.\n-\t        (tablejump_internal2): Change condition to TARGET_64BIT.\n-\t        (cpaddsi): Rename to...\n-\t        (cpadd): ...this.\n-\t        (cpadddi): Remove.\n+\t\t* config/mips/mips.h (TRAMPOLINE_TEMPLATE): Make size of stored\n+\t\taddresses depend on ptr_mode rather than Pmode.\n+\t\t(TRAMPOLINE_SIZE, TRAMPOLINE_ALIGNMENT): Update acoordingly.\n+\t\t(INITIALIZE_TRAMPOLINE): Rework to handle Pmode != ptr_mode.\n+\t\t(CASE_VECTOR_MODE): Use ptr_mode for !TARGET_MIPS16.\n+\t\t(ASM_OUTPUT_ADDR_VEC_ELT): Update accordingly.\n+\t\t* config/mips/mips.md (tablejump): Likewise.  Remove Pmode\n+\t\tcondition for selecting cpaddsi or cpadddi: use cpadd instead.\n+\t\t(tablejump_internal1): Remove condition.\n+\t\t(tablejump_internal2): Change condition to TARGET_64BIT.\n+\t\t(cpaddsi): Rename to...\n+\t\t(cpadd): ...this.\n+\t\t(cpadddi): Remove.\n \n \t2003-01-09  Richard Sandiford  <rsandifo@redhat.com>\n \n-\t        * config/mips/mips-protos.h (mips16_constant_after_function_p,\n-\t        mips_address_cost, mips_check_split, double_memory_operand,\n-\t        mips16_gp_offset, mips16_gp_offset_p, mips16_constant,\n-\t        pic_address_needs_scratch, symbolic_operand): Remove declarations.\n-\t        (mips_legitimate_address_p): Return bool.\n-\t        (mips_address_insns, mips_fetch_insns, mips_const_insns,\n-\t        mips_legitimize_address, mips_legitimize_move,\n-\t        mips_expand_call): Declare.\n-\t        (mips_return_addr): Move outside #ifdef RTX_CODE.\n-\n-\t        * config/mips/mips.h (ABI_HAS_64BIT_SYMBOLS): New macro.\n-\t        (PIC_FN_ADDR_REG): New reg_class.\n-\t        (REG_CLASS_NAMES, REG_CLASS_CONTENTS): Add corresponding entries.\n-\t        (GR_REG_CLASS_P): True for PIC_FN_ADDR_REG.\n-\t        (SMALL_OPERAND, SMALL_OPERAND_UNSIGNED, LUI_OPERAND,\n-\t        CONST_HIGH_PART, CONST_LOW_PART, LUI_INT): New macros.\n-\t        (SMALL_INT, SMALL_INT_UNSIGNED, CONST_OK_FOR_LETTER_P): Use new macros.\n-\t        (EXTRA_CONSTRAINTS): Give new meanings to Q, R and S.\n-\t        (CONSTANT_ADDRESS_P): Use mips_legitimate_address_p.\n-\t        (LEGITIMATE_PIC_OPERAND): Undefine.\n-\t        (LEGITIMATE_CONSTANT_P): Use mips_const_insns.\n-\t        (LEGITIMIZE_ADDRESS): Use mips_legitimize_address.\n-\t        (CONSTANT_AFTER_FUNCTION_P): Remove definition in #if 0 block.\n-\t        (FUNCTION_MODE): Change to SImode.\n-\t        (CONST_COSTS): Use mips_const_insns to calculate the cost of\n-\t        most constants.  Treat const_artih_operands specially if they\n-\t        occur in a PLUS or MINUS.\n-\t        (CONSTANT_POOL_COST): New macro.\n-\t        (RTX_COSTS): Use mips_address_insns for MEMs, with a base cost of 2.\n-\t        Add LO_SUM handling.\n-\t        (ADDRESS_COST): Undefine.\n-\t        (PREDICATE_CODES): Add symbolic_operand and const_arith_operand.\n-\t        Add CONST to the list of codes for arith_operand.  Add LABEL_REF\n-\t        to call_insn_operand and remove CONST_INT.\n-\n-\t        * config/mips/mips.c: Include integrate.h.\n-\t        (SINGLE_WORD_MODE_P): New macro.\n-\t        (mips_constant_type, mips_symbol_type, mips_address_type): New enums.\n-\t        (mips_constant_info, mips_address_info): New structs.\n-\t        (mips_regno_to_class): Map $25 to PIC_FN_ADDR_REG.\n-\t        (mips_classify_constant, mips_classify_symbol,\n-\t        mips_valid_base_register_p, mips_symbolic_address_p,\n-\t        mips_classify_address, mips_symbol_insns,\n-\t        mips16_unextended_reference_p, mips_address_insns, mips_const_insns,\n-\t        mips_fetch_insns, mips_force_temporary, mips_add_offset,\n-\t        mips_legitimize_symbol, mips_legitimize_address, mips_legitimize_move,\n-\t        mips_print_relocation): New functions.\n-\t        (const_arith_operand): New operand predicate.\n-\t        (arith_operand): Use it.\n-\t        (mips_const_double_ok, mips16_simple_memory_operand,\n-\t        simple_memory_operand, double_memory_operand, mips_check_split,\n-\t        mips_address_cost, pic_address_needs_scratch, mips16_gp_offset,\n-\t        mips16_gp_offset_p, mips16_output_gp_offset,\n+\t\t* config/mips/mips-protos.h (mips16_constant_after_function_p,\n+\t\tmips_address_cost, mips_check_split, double_memory_operand,\n+\t\tmips16_gp_offset, mips16_gp_offset_p, mips16_constant,\n+\t\tpic_address_needs_scratch, symbolic_operand): Remove declarations.\n+\t\t(mips_legitimate_address_p): Return bool.\n+\t\t(mips_address_insns, mips_fetch_insns, mips_const_insns,\n+\t\tmips_legitimize_address, mips_legitimize_move,\n+\t\tmips_expand_call): Declare.\n+\t\t(mips_return_addr): Move outside #ifdef RTX_CODE.\n+\n+\t\t* config/mips/mips.h (ABI_HAS_64BIT_SYMBOLS): New macro.\n+\t\t(PIC_FN_ADDR_REG): New reg_class.\n+\t\t(REG_CLASS_NAMES, REG_CLASS_CONTENTS): Add corresponding entries.\n+\t\t(GR_REG_CLASS_P): True for PIC_FN_ADDR_REG.\n+\t\t(SMALL_OPERAND, SMALL_OPERAND_UNSIGNED, LUI_OPERAND,\n+\t\tCONST_HIGH_PART, CONST_LOW_PART, LUI_INT): New macros.\n+\t\t(SMALL_INT, SMALL_INT_UNSIGNED, CONST_OK_FOR_LETTER_P): Use new macros.\n+\t\t(EXTRA_CONSTRAINTS): Give new meanings to Q, R and S.\n+\t\t(CONSTANT_ADDRESS_P): Use mips_legitimate_address_p.\n+\t\t(LEGITIMATE_PIC_OPERAND): Undefine.\n+\t\t(LEGITIMATE_CONSTANT_P): Use mips_const_insns.\n+\t\t(LEGITIMIZE_ADDRESS): Use mips_legitimize_address.\n+\t\t(CONSTANT_AFTER_FUNCTION_P): Remove definition in #if 0 block.\n+\t\t(FUNCTION_MODE): Change to SImode.\n+\t\t(CONST_COSTS): Use mips_const_insns to calculate the cost of\n+\t\tmost constants.  Treat const_artih_operands specially if they\n+\t\toccur in a PLUS or MINUS.\n+\t\t(CONSTANT_POOL_COST): New macro.\n+\t\t(RTX_COSTS): Use mips_address_insns for MEMs, with a base cost of 2.\n+\t\tAdd LO_SUM handling.\n+\t\t(ADDRESS_COST): Undefine.\n+\t\t(PREDICATE_CODES): Add symbolic_operand and const_arith_operand.\n+\t\tAdd CONST to the list of codes for arith_operand.  Add LABEL_REF\n+\t\tto call_insn_operand and remove CONST_INT.\n+\n+\t\t* config/mips/mips.c: Include integrate.h.\n+\t\t(SINGLE_WORD_MODE_P): New macro.\n+\t\t(mips_constant_type, mips_symbol_type, mips_address_type): New enums.\n+\t\t(mips_constant_info, mips_address_info): New structs.\n+\t\t(mips_regno_to_class): Map $25 to PIC_FN_ADDR_REG.\n+\t\t(mips_classify_constant, mips_classify_symbol,\n+\t\tmips_valid_base_register_p, mips_symbolic_address_p,\n+\t\tmips_classify_address, mips_symbol_insns,\n+\t\tmips16_unextended_reference_p, mips_address_insns, mips_const_insns,\n+\t\tmips_fetch_insns, mips_force_temporary, mips_add_offset,\n+\t\tmips_legitimize_symbol, mips_legitimize_address, mips_legitimize_move,\n+\t\tmips_print_relocation): New functions.\n+\t\t(const_arith_operand): New operand predicate.\n+\t\t(arith_operand): Use it.\n+\t\t(mips_const_double_ok, mips16_simple_memory_operand,\n+\t\tsimple_memory_operand, double_memory_operand, mips_check_split,\n+\t\tmips_address_cost, pic_address_needs_scratch, mips16_gp_offset,\n+\t\tmips16_gp_offset_p, mips16_output_gp_offset,\n \t       \tmips16_constant_after_function_p, mips16_constant): Remove.\n-\t        (call_insn_operand): Be more fussy about symbolic constants.\n-\t        Use register_operand.\n-\t        (move_operand): Use mips_symbolic_address_p to check symbolic\n-\t        operands and general_operand to check the rest.\n-\t        (symbolic_operand): Use mips_classify_constant.\n-\t        (mips_legitimate_address_p): Use mips_classify_address.\n-\t        (mips_move_1word): Combine handling of symbolic addresses.\n-\t        Remove special treatment of gp-relative loads for TARGET_MIPS16.\n-\t        (move_move_2words): Likewise.  Assume addresses are offsettable\n-\t        if they need to refer to more than one word.  Add HIGH handling.\n-\t        (mips_restore_gp): Use ptr_mode for the GP save slot.\n-\t        (mips_expand_call): New function, combining the old mips.md\n-\t        call and call_internal define_expands.  If the address isn't\n-\t        a call_insn_operand, force it into a register.  For SVR4 PIC,\n-\t        emit an exception_receiver instruction after the call.\n-\t        (override_options): Only override flag_pic for TARGET_ABICALLS\n-\t        if it is currently zero.  Allow mips_split_addresses when\n-\t        Pmode == DImode too, except when ABI_HAS_64BIT_SYMBOLS.\n-\t        Add new register class letter, 'c'.\n-\t        (print_operand): Use mips_classify_constant for constant operands.\n-\t        (print_operand_address): Use mips_classify_address.\n-\t        (mips_output_function_prologue): Don't use .cprestore.\n-\t        (mips_expand_epilogue): For TARGET_MIPS16, only adjust the stack\n-\t        via the frame pointer if current_function_calls_eh_return.\n-\t        (mips_encode_section_info): For TARGET_ABICALLS, use SYMBOL_REF_FLAG\n-\t        to mark whether a symbol is local or global.\n-\t        (build_mips16_call_stub): Expect the address of the function rather\n-\t        than a MEM reference to it.  Update call generation sequences.\n-\t        (mips16_optimize_gp): Remove Pmode checks.  Temporarily disable\n-\t        small-data adjustments.\n-\n-\t        * config/mips/mips.md: Remove 'R'/'m' memory distinction.  Use default\n-\t        length for loads and stores.\n-\t        (UNSPEC_CPADD, UNSPEC_RELOC_GPREL16): New constants.\n-\t        (define_attr type): Add const and prefetch.\n-\t        (define_attr length): Use mips_const_insns for const instructions.\n-\t        Use mips_fetch_insns for load and store instructions.\n-\t        (define_attr single_insn): New.\n-\t        (define_attr can_delay): Use it.\n-\t        (define_attr abicalls): Remove.\n-\t        (define_delay): Use can_delay.  Always allow calls to have delay slots.\n-\t        (addsi3_internal_2): Add 'Q' constraint.\n-\t        (movsi_ulw, movsi_usw, movdi_uld, movdi_usd): Set length to 8.\n-\t        (high): Remove.\n-\t        (lowsi): Renamed from low.\n-\t        (lowdi): New pattern.\n-\t        (movdi, movsi): Use mips_legitimize_move.  Remove define_split.\n-\t        (lwxc1, ldxc1, swxc1, sdxc1): Set length to 4.\n-\t        (loadgp): Change operand 0 to an immediate_operand.\n-\t        (tablejump): Use the same patterns for SVR4 PIC but emit a cpadd\n-\t        beforehand.\n-\t        (cpaddsi, cpadddi): New patterns.\n-\t        (tablejump_internal3, tablejump_internal4): Remove define_expands\n-\t        and associated define_splits.\n-\t        (call, call_value): Use mips_expand_call.\n-\t        (call_internal): New, replacing all existing call_internal* insns.\n-\t        (call_value_internal): Likewise call_value_internal*.\n-\t        (call_value_multiple_internal): Likewise call_value_multiple_internal*.\n-\t        (untyped_call): Remove if (operands[0]) magic.\n-\t        (prefetch_si_address, prefetch_si): Change type to \"prefetch\".\n-\t        (prefetch_di_address, prefetch_di): Likewise.\n-\t        (leasi, leadi): Remove.\n-\t        (reloc_gprel16): New.\n-\n-\t        * config/mips/5400.md (ir_vr54_hilo): Include const type.\n-\t        * config/mips/5500.md (ir_vr55_hilo): Likewise.\n-\t        * config/mips/sr71k.md (ir_sr70_hilo): Likewise.\n+\t\t(call_insn_operand): Be more fussy about symbolic constants.\n+\t\tUse register_operand.\n+\t\t(move_operand): Use mips_symbolic_address_p to check symbolic\n+\t\toperands and general_operand to check the rest.\n+\t\t(symbolic_operand): Use mips_classify_constant.\n+\t\t(mips_legitimate_address_p): Use mips_classify_address.\n+\t\t(mips_move_1word): Combine handling of symbolic addresses.\n+\t\tRemove special treatment of gp-relative loads for TARGET_MIPS16.\n+\t\t(move_move_2words): Likewise.  Assume addresses are offsettable\n+\t\tif they need to refer to more than one word.  Add HIGH handling.\n+\t\t(mips_restore_gp): Use ptr_mode for the GP save slot.\n+\t\t(mips_expand_call): New function, combining the old mips.md\n+\t\tcall and call_internal define_expands.  If the address isn't\n+\t\ta call_insn_operand, force it into a register.  For SVR4 PIC,\n+\t\temit an exception_receiver instruction after the call.\n+\t\t(override_options): Only override flag_pic for TARGET_ABICALLS\n+\t\tif it is currently zero.  Allow mips_split_addresses when\n+\t\tPmode == DImode too, except when ABI_HAS_64BIT_SYMBOLS.\n+\t\tAdd new register class letter, 'c'.\n+\t\t(print_operand): Use mips_classify_constant for constant operands.\n+\t\t(print_operand_address): Use mips_classify_address.\n+\t\t(mips_output_function_prologue): Don't use .cprestore.\n+\t\t(mips_expand_epilogue): For TARGET_MIPS16, only adjust the stack\n+\t\tvia the frame pointer if current_function_calls_eh_return.\n+\t\t(mips_encode_section_info): For TARGET_ABICALLS, use SYMBOL_REF_FLAG\n+\t\tto mark whether a symbol is local or global.\n+\t\t(build_mips16_call_stub): Expect the address of the function rather\n+\t\tthan a MEM reference to it.  Update call generation sequences.\n+\t\t(mips16_optimize_gp): Remove Pmode checks.  Temporarily disable\n+\t\tsmall-data adjustments.\n+\n+\t\t* config/mips/mips.md: Remove 'R'/'m' memory distinction.  Use default\n+\t\tlength for loads and stores.\n+\t\t(UNSPEC_CPADD, UNSPEC_RELOC_GPREL16): New constants.\n+\t\t(define_attr type): Add const and prefetch.\n+\t\t(define_attr length): Use mips_const_insns for const instructions.\n+\t\tUse mips_fetch_insns for load and store instructions.\n+\t\t(define_attr single_insn): New.\n+\t\t(define_attr can_delay): Use it.\n+\t\t(define_attr abicalls): Remove.\n+\t\t(define_delay): Use can_delay.  Always allow calls to have delay slots.\n+\t\t(addsi3_internal_2): Add 'Q' constraint.\n+\t\t(movsi_ulw, movsi_usw, movdi_uld, movdi_usd): Set length to 8.\n+\t\t(high): Remove.\n+\t\t(lowsi): Renamed from low.\n+\t\t(lowdi): New pattern.\n+\t\t(movdi, movsi): Use mips_legitimize_move.  Remove define_split.\n+\t\t(lwxc1, ldxc1, swxc1, sdxc1): Set length to 4.\n+\t\t(loadgp): Change operand 0 to an immediate_operand.\n+\t\t(tablejump): Use the same patterns for SVR4 PIC but emit a cpadd\n+\t\tbeforehand.\n+\t\t(cpaddsi, cpadddi): New patterns.\n+\t\t(tablejump_internal3, tablejump_internal4): Remove define_expands\n+\t\tand associated define_splits.\n+\t\t(call, call_value): Use mips_expand_call.\n+\t\t(call_internal): New, replacing all existing call_internal* insns.\n+\t\t(call_value_internal): Likewise call_value_internal*.\n+\t\t(call_value_multiple_internal): Likewise call_value_multiple_internal*.\n+\t\t(untyped_call): Remove if (operands[0]) magic.\n+\t\t(prefetch_si_address, prefetch_si): Change type to \"prefetch\".\n+\t\t(prefetch_di_address, prefetch_di): Likewise.\n+\t\t(leasi, leadi): Remove.\n+\t\t(reloc_gprel16): New.\n+\n+\t\t* config/mips/5400.md (ir_vr54_hilo): Include const type.\n+\t\t* config/mips/5500.md (ir_vr55_hilo): Likewise.\n+\t\t* config/mips/sr71k.md (ir_sr70_hilo): Likewise.\n \n \t2003-01-08  Eric Christopher  <echristo@redhat.com>\n \n-\t        * config.gcc (mipsisa32*): Change ABI_MEABI to ABI_EABI.\n-\t        * config/mips/elf.h (STARTFILE_SPEC): Remove ABI_MEABI references and\n-\t        configure check for libgloss.\n-\t        * config/mips/elf64.h: Ditto.\n-\t        * config/mips/mips.c: Remove ABI_MEABI.\n-\t        * config/mips/mips.h: Ditto.\n+\t\t* config.gcc (mipsisa32*): Change ABI_MEABI to ABI_EABI.\n+\t\t* config/mips/elf.h (STARTFILE_SPEC): Remove ABI_MEABI references and\n+\t\tconfigure check for libgloss.\n+\t\t* config/mips/elf64.h: Ditto.\n+\t\t* config/mips/mips.c: Remove ABI_MEABI.\n+\t\t* config/mips/mips.h: Ditto.\n \n \t2002-11-05  Richard Sandiford  <rsandifo@redhat.com>\n \n-\t        Fix merge fallout.\n-\t        * config/mips/mips.md (mul_acc_si): Reapply 2002-10-16 change.\n-\t        (muldi3_internal): Remove outdated comment.\n-\t        (*muls_di, *umuls_di): Fix comment and 64-bitness.\n-\t        (*smsac_di, *umsac_di): Likewise.  Reformat.\n-\t        (umulsi3_highpart): Minor formatting tweaks.\n-\t        (umulsi3_highpart_internal): Use only if !ISA_HAS_MULHI.  Remove\n-\t        redundant scratch operand.  Minor formatting tweak.\n-\t        (umulsi3_highpart_mulhi_internal): Use for !TARGET_64BIT as well.\n-\t        (umulsi3_highpart_neg_mulhi_internal): Likewise.  Fix asm template.\n-\t        (smulsi3_highpart): As for the unsigned version.\n-\t        (smulsi3_highpart_internal): Likewise.\n-\t        (smulsi3_highpart_mulhi_internal): Likewise.\n-\t        (smulsi3_highpart_neg_mulhi_internal): Likewise.\n-\t        (smuldi3_highpart, umuldi3_highpart): Minor formatting tweaks.\n-\t        (*smul_acc_di): Remove duplicated pattern.\n-\t        (*umul_acc_di, *smul_acc_di): Reapply 2002-10-16 change.\n-\t        (anddi3) [unnamed mips16 pattern]: Remove reintroduced length.\n-\t        (zero_extendsidi2_internal2): Remove new, but commented-out pattern.\n+\t\tFix merge fallout.\n+\t\t* config/mips/mips.md (mul_acc_si): Reapply 2002-10-16 change.\n+\t\t(muldi3_internal): Remove outdated comment.\n+\t\t(*muls_di, *umuls_di): Fix comment and 64-bitness.\n+\t\t(*smsac_di, *umsac_di): Likewise.  Reformat.\n+\t\t(umulsi3_highpart): Minor formatting tweaks.\n+\t\t(umulsi3_highpart_internal): Use only if !ISA_HAS_MULHI.  Remove\n+\t\tredundant scratch operand.  Minor formatting tweak.\n+\t\t(umulsi3_highpart_mulhi_internal): Use for !TARGET_64BIT as well.\n+\t\t(umulsi3_highpart_neg_mulhi_internal): Likewise.  Fix asm template.\n+\t\t(smulsi3_highpart): As for the unsigned version.\n+\t\t(smulsi3_highpart_internal): Likewise.\n+\t\t(smulsi3_highpart_mulhi_internal): Likewise.\n+\t\t(smulsi3_highpart_neg_mulhi_internal): Likewise.\n+\t\t(smuldi3_highpart, umuldi3_highpart): Minor formatting tweaks.\n+\t\t(*smul_acc_di): Remove duplicated pattern.\n+\t\t(*umul_acc_di, *smul_acc_di): Reapply 2002-10-16 change.\n+\t\t(anddi3) [unnamed mips16 pattern]: Remove reintroduced length.\n+\t\t(zero_extendsidi2_internal2): Remove new, but commented-out pattern.\n \n \t2002-10-22  Eric Christopher  <echristo@redhat.com>\n \n-\t        * config/mips/mips-protos.h (mips_return_addr): New.\n-\t        * config/mips/mips.c (mips_return_addr): New.\n-\t        (movdi_operand): Remove.\n-\t        (se_register_operand): Ditto.\n-\t        (se_reg_or_0_operand): Ditto.\n-\t        (se_uns_arith_operand): Ditto.\n-\t        (se_arith_operand): Ditto.\n-\t        (se_nonmemory_operand): Ditto.\n-\t        (extend_operator): Ditto.\n-\t        (highpart_shift_operator): Ditto.\n-\t        (mips_initial_elimination_offset): Remove return address pointer\n-\t        elimination.\n-\t        (mips_reg_names): Remove $ra.\n-\t        (mips_regno_to_class): Ditto.\n-\t        * config/mips/mips.h (POINTER_SIZE): Define based on TARGET_LONG64\n-\t        and TARGET_64BIT.\n-\t        (POINTER_BOUNDARY): Remove.\n-\t        (POINTERS_EXTEND_UNSIGNED): Define to 0.\n-\t        (PROMOTE_MODE): Promote to Pmode.\n-\t        (SHORT_IMMEDIATES_SIGN_EXTEND): Define.\n-\t        (Pmode): Define to TARGET_64BIT.\n-\t        (FUNCTION_MODE): Define as Pmode.\n-\t        (mips_args): Remove deleted functions.\n-\t        (SIZE_TYPE): Depend on POINTER_SIZE.\n-\t        (PTRDIFF_TYPE): Ditto.\n-\t        (FIXED_REGISTERS): Fix extra registers.\n-\t        (CALL_USED_REGISTERS): Ditto.\n-\t        (CALL_REALLY_USED_REGISTERS): Ditto.\n-\t        (RAP_REG_NUM): Remove.\n-\t        (RETURN_ADDRESS_POINTER_REGNUM): Ditto.\n-\t        (RETURN_ADDR_RTX): Define to mips_return_addr.\n-\t        (ELIMINABLE_REGS): Remove RETURN_ADDRESS_POINTER_REGNUM.\n-\t        (CAN_ELIMINATE): Ditto.\n-\t        * config/mips/mips.md: For DImode patterns, take into account\n-\t        deletions above. Split mulsidi patterns into sign_extend and\n-\t        zero_extend.\n+\t\t* config/mips/mips-protos.h (mips_return_addr): New.\n+\t\t* config/mips/mips.c (mips_return_addr): New.\n+\t\t(movdi_operand): Remove.\n+\t\t(se_register_operand): Ditto.\n+\t\t(se_reg_or_0_operand): Ditto.\n+\t\t(se_uns_arith_operand): Ditto.\n+\t\t(se_arith_operand): Ditto.\n+\t\t(se_nonmemory_operand): Ditto.\n+\t\t(extend_operator): Ditto.\n+\t\t(highpart_shift_operator): Ditto.\n+\t\t(mips_initial_elimination_offset): Remove return address pointer\n+\t\telimination.\n+\t\t(mips_reg_names): Remove $ra.\n+\t\t(mips_regno_to_class): Ditto.\n+\t\t* config/mips/mips.h (POINTER_SIZE): Define based on TARGET_LONG64\n+\t\tand TARGET_64BIT.\n+\t\t(POINTER_BOUNDARY): Remove.\n+\t\t(POINTERS_EXTEND_UNSIGNED): Define to 0.\n+\t\t(PROMOTE_MODE): Promote to Pmode.\n+\t\t(SHORT_IMMEDIATES_SIGN_EXTEND): Define.\n+\t\t(Pmode): Define to TARGET_64BIT.\n+\t\t(FUNCTION_MODE): Define as Pmode.\n+\t\t(mips_args): Remove deleted functions.\n+\t\t(SIZE_TYPE): Depend on POINTER_SIZE.\n+\t\t(PTRDIFF_TYPE): Ditto.\n+\t\t(FIXED_REGISTERS): Fix extra registers.\n+\t\t(CALL_USED_REGISTERS): Ditto.\n+\t\t(CALL_REALLY_USED_REGISTERS): Ditto.\n+\t\t(RAP_REG_NUM): Remove.\n+\t\t(RETURN_ADDRESS_POINTER_REGNUM): Ditto.\n+\t\t(RETURN_ADDR_RTX): Define to mips_return_addr.\n+\t\t(ELIMINABLE_REGS): Remove RETURN_ADDRESS_POINTER_REGNUM.\n+\t\t(CAN_ELIMINATE): Ditto.\n+\t\t* config/mips/mips.md: For DImode patterns, take into account\n+\t\tdeletions above. Split mulsidi patterns into sign_extend and\n+\t\tzero_extend.\n \n \t2002-10-16  Richard Sandiford  <rsandifo@redhat.com>\n-\t            Michael Meissner  <meissner@redhat.com>\n-\n-\t        * config/mips/mips.h (ISA_HAS_MACC): True for normal-mode vr4120 code.\n-\t        * config/mips/mips.md (mulsi3_mult3): Add a define_peephole2 to\n-\t        mop up unnecessarly moves through LO.\n-\t        (*mul_acc_si): Remove vr5400 and vr5500 handling from here.\n-\t        (*macc): New pattern for ISA_HAS_MACC.  Add define_peephole2s to\n-\t        change mtlo/macc sequences into mul/add sequences when a three-\n-\t        address mul is available.\n-\t        (*macc2): New pattern.  Add a define_peephole2 to generate it.\n-\t        (*mul_sub_si): Fix contraint for operand 5.\n-\t        (*muls): Use in 32-bit code as well.\n-\t        (*msac): Likewise.  Use msub instead of msac in vr5500 code\n-\t        if the destination is LO.  Remove duplicate define_split.\n-\t        (*muls_di): Use only in 32-bit code.  Adjust rtl accordingly.\n-\t        (*msac_di): Likewise.  Fix formatting.\n-\t        (smulsi3_highpart, umulsi3_highpart): Use mulhi in 32-bit code too.\n-\t        (*xmulsi3_highpart_internal): Use only if !ISA_HAS_MULHI.\n-\t        (*xmulsi3_highpart_mulhi): Use even if !TARGET_64BIT.\n-\t        (*xmulsi3_neg_highpart_mulhi): Likewise.\n-\t        (*mul_acc_64bit_di): Remove.\n-\t        (*mul_acc_di): Use only in 32-bit code.  Handle ISA_HAS_MACC as well.\n+\t\t    Michael Meissner  <meissner@redhat.com>\n+\n+\t\t* config/mips/mips.h (ISA_HAS_MACC): True for normal-mode vr4120 code.\n+\t\t* config/mips/mips.md (mulsi3_mult3): Add a define_peephole2 to\n+\t\tmop up unnecessarly moves through LO.\n+\t\t(*mul_acc_si): Remove vr5400 and vr5500 handling from here.\n+\t\t(*macc): New pattern for ISA_HAS_MACC.  Add define_peephole2s to\n+\t\tchange mtlo/macc sequences into mul/add sequences when a three-\n+\t\taddress mul is available.\n+\t\t(*macc2): New pattern.  Add a define_peephole2 to generate it.\n+\t\t(*mul_sub_si): Fix contraint for operand 5.\n+\t\t(*muls): Use in 32-bit code as well.\n+\t\t(*msac): Likewise.  Use msub instead of msac in vr5500 code\n+\t\tif the destination is LO.  Remove duplicate define_split.\n+\t\t(*muls_di): Use only in 32-bit code.  Adjust rtl accordingly.\n+\t\t(*msac_di): Likewise.  Fix formatting.\n+\t\t(smulsi3_highpart, umulsi3_highpart): Use mulhi in 32-bit code too.\n+\t\t(*xmulsi3_highpart_internal): Use only if !ISA_HAS_MULHI.\n+\t\t(*xmulsi3_highpart_mulhi): Use even if !TARGET_64BIT.\n+\t\t(*xmulsi3_neg_highpart_mulhi): Likewise.\n+\t\t(*mul_acc_64bit_di): Remove.\n+\t\t(*mul_acc_di): Use only in 32-bit code.  Handle ISA_HAS_MACC as well.\n \n \t2002-10-14  Richard Sandiford  <rsandifo@redhat.com>\n \n-\t        * config/mips/vr.h (DRIVER_SELF_SPECS): Define.\n-\t        * config/mips/t-vr (MULTILIB_OPTIONS): Remove mlong32.\n-\t        (MULTILIB_DIRNAMES): Remove long32.\n-\t        (MULTILIB_EXCEPTIONS): Don't build -mabi=32 -mgp32 multilibs.\n-\t        (MULTILIB_REDUNDANT_DIRS): Remove.\n+\t\t* config/mips/vr.h (DRIVER_SELF_SPECS): Define.\n+\t\t* config/mips/t-vr (MULTILIB_OPTIONS): Remove mlong32.\n+\t\t(MULTILIB_DIRNAMES): Remove long32.\n+\t\t(MULTILIB_EXCEPTIONS): Don't build -mabi=32 -mgp32 multilibs.\n+\t\t(MULTILIB_REDUNDANT_DIRS): Remove.\n \n \t2002-10-14  Richard Sandiford  <rsandifo@redhat.com>\n \n-\t        * doc/tm.texi (DRIVER_SELF_SPECS): Document.\n-\t        * gcc.c (driver_self_specs): New variable.\n-\t        (do_self_spec): New function.\n-\t        (main): Use it to process driver_self_specs.\n+\t\t* doc/tm.texi (DRIVER_SELF_SPECS): Document.\n+\t\t* gcc.c (driver_self_specs): New variable.\n+\t\t(do_self_spec): New function.\n+\t\t(main): Use it to process driver_self_specs.\n \n \t2002-10-09  Richard Sandiford  <rsandifo@redhat.com>\n \n-\t        * config/mips/mips.md (one_cmpldi2): Use only if TARGET_64BIT.\n-\t        Remove DImode define_split for !TARGET_64BIT.\n-\t        (anddi3): Remove !TARGET_64BIT support from here as well.\n-\t        Change operand 2's predicate to se_uns_arith_operand.\n-\t        Add constant alternatives to define_insn.\n-\t        (iordi3, xordi3, *nordi3): Likewise.\n-\t        (anddi3_internal1, xordi3_immed): Remove.\n+\t\t* config/mips/mips.md (one_cmpldi2): Use only if TARGET_64BIT.\n+\t\tRemove DImode define_split for !TARGET_64BIT.\n+\t\t(anddi3): Remove !TARGET_64BIT support from here as well.\n+\t\tChange operand 2's predicate to se_uns_arith_operand.\n+\t\tAdd constant alternatives to define_insn.\n+\t\t(iordi3, xordi3, *nordi3): Likewise.\n+\t\t(anddi3_internal1, xordi3_immed): Remove.\n \n \t2002-10-01  Richard Sandiford  <rsandifo@redhat.com>\n \n-\t        * config/mips/mips.h (PROCESSOR_R4121): Rename to PROCESSOR_R4120.\n-\t        (TARGET_MIPS4121): Rename to TARGET_MIPS4120.\n-\t        * config/mips/mips.c (mips_cpu_info): Rename vr4121 to vr4120.\n-\t        * config/mips/mips.md: Apply same renaming here.\n+\t\t* config/mips/mips.h (PROCESSOR_R4121): Rename to PROCESSOR_R4120.\n+\t\t(TARGET_MIPS4121): Rename to TARGET_MIPS4120.\n+\t\t* config/mips/mips.c (mips_cpu_info): Rename vr4121 to vr4120.\n+\t\t* config/mips/mips.md: Apply same renaming here.\n \n \t2002-10-01  Richard Sandiford  <rsandifo@redhat.com>\n \n-\t        * config/mips/mips.c (PROCESSOR_R4320, TARGET_MIPS4320): Remove.\n-\t        (GENERATE_MULT3_SI): Remove use of TARGET_MIPS4320.\n-\t        * config/mips/mips.c (mips_cpu_info): Remove vr4320 entry.\n-\t        * config/mips/mips.md (define_attr cpu): Remove r4320.\n-\t        Remove vr4320 scheduler and uses of TARGET_MIPS4320.\n+\t\t* config/mips/mips.c (PROCESSOR_R4320, TARGET_MIPS4320): Remove.\n+\t\t(GENERATE_MULT3_SI): Remove use of TARGET_MIPS4320.\n+\t\t* config/mips/mips.c (mips_cpu_info): Remove vr4320 entry.\n+\t\t* config/mips/mips.md (define_attr cpu): Remove r4320.\n+\t\tRemove vr4320 scheduler and uses of TARGET_MIPS4320.\n \n \t2002-10-01  Richard Sandiford  <rsandifo@redhat.com>\n \n-\t        * config/mips/mips.c (mips16_strings): New variable.\n-\t        (mips_output_function_epilogue): Clear the SYMBOL_REF_FLAG of every\n-\t        symbol in mips16_strings.  Free the list.\n-\t        (mips_encode_section_info): Keep track of local strings.\n+\t\t* config/mips/mips.c (mips16_strings): New variable.\n+\t\t(mips_output_function_epilogue): Clear the SYMBOL_REF_FLAG of every\n+\t\tsymbol in mips16_strings.  Free the list.\n+\t\t(mips_encode_section_info): Keep track of local strings.\n \n \t2002-10-01  Richard Sandiford  <rsandifo@redhat.com>\n \n-\t        * config/mips/mips.md (bunge, bltgt, bungt): New define_expands.\n-\t        (sordered_df, sordered_sf): Remove.\n-\t        * config/mips/mips.c (get_float_compare_codes): New fn.\n-\t        (gen_int_relational, gen_conditional_move): Use it.\n+\t\t* config/mips/mips.md (bunge, bltgt, bungt): New define_expands.\n+\t\t(sordered_df, sordered_sf): Remove.\n+\t\t* config/mips/mips.c (get_float_compare_codes): New fn.\n+\t\t(gen_int_relational, gen_conditional_move): Use it.\n \n \t2002-10-01  Richard Sandiford  <rsandifo@redhat.com>\n \n-        \t* config/mips/mips-protos.h (mips_emit_fcc_reload): Declare.\n-        \t* config/mips/mips.h (PREDICATE_CODES): Add fcc_register_operand.\n-        \t* config/mips/mips.c (fcc_register_operand): New function.\n-        \t(mips_emit_fcc_reload): New function, extracted from reload_incc.\n-        \t(override_options): Allow TFmode values in float registers\n-        \tif ISA_HAS_8CC.\n-        \t* cnfig/mips/mips.md (reload_incc): Change destination prediate\n-        \tto fcc_register_operand.  Remove misleading source constraint.\n-        \tUse mips_emit_fcc_reload.\n+\t\t* config/mips/mips-protos.h (mips_emit_fcc_reload): Declare.\n+\t\t* config/mips/mips.h (PREDICATE_CODES): Add fcc_register_operand.\n+\t\t* config/mips/mips.c (fcc_register_operand): New function.\n+\t\t(mips_emit_fcc_reload): New function, extracted from reload_incc.\n+\t\t(override_options): Allow TFmode values in float registers\n+\t\tif ISA_HAS_8CC.\n+\t\t* cnfig/mips/mips.md (reload_incc): Change destination prediate\n+\t\tto fcc_register_operand.  Remove misleading source constraint.\n+\t\tUse mips_emit_fcc_reload.\n        \t\t(reload_outcc): Duplicate reload_incc.\n \n \n@@ -885,8 +918,8 @@\n \n 2003-04-29  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * expr.c (emit_group_load): Dump parallels of simd types to\n-        memory.\n+\t* expr.c (emit_group_load): Dump parallels of simd types to\n+\tmemory.\n \n 2003-04-29  Vladimir Makarov  <vmakarov@redhat.com>\n "}, {"sha": "e99dbb9646d1b9ee760a34ece75a5a3895ec26fb", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87f85ea0660e58ac0f2447d1c4a593863601df0e/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87f85ea0660e58ac0f2447d1c4a593863601df0e/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=87f85ea0660e58ac0f2447d1c4a593863601df0e", "patch": "@@ -165,6 +165,8 @@ insn-conditions.o-warn = -Wno-error\n # Bison-1.75 output often yields (harmless) -Wtraditional warnings\n gengtype-yacc.o-warn = -Wno-error\n c-parse.o-warn = -Wno-error\n+# flex output may yield harmless \"no previous prototype\" warnings\n+gengtype-lex.o-warn = -Wno-error\n \n # All warnings have to be shut off in stage1 if the compiler used then\n # isn't gcc; configure determines that.  WARN_CFLAGS will be either"}, {"sha": "aa34d53afcbef57dabee9fb49cefdb2ed0f1aafe", "filename": "gcc/c-common.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87f85ea0660e58ac0f2447d1c4a593863601df0e/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87f85ea0660e58ac0f2447d1c4a593863601df0e/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=87f85ea0660e58ac0f2447d1c4a593863601df0e", "patch": "@@ -304,9 +304,10 @@ int warn_parentheses;\n int warn_missing_braces;\n \n /* Warn about comparison of signed and unsigned values.\n-   If -1, neither -Wsign-compare nor -Wno-sign-compare has been specified.  */\n+   If -1, neither -Wsign-compare nor -Wno-sign-compare has been specified\n+   (in which case -Wextra gets to decide).  */\n \n-int warn_sign_compare;\n+int warn_sign_compare = -1;\n \n /* Nonzero means warn about usage of long long when `-pedantic'.  */\n "}, {"sha": "0a2898299a269702cdea19d9cee2bc9eaed54d14", "filename": "gcc/c-opts.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87f85ea0660e58ac0f2447d1c4a593863601df0e/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87f85ea0660e58ac0f2447d1c4a593863601df0e/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=87f85ea0660e58ac0f2447d1c4a593863601df0e", "patch": "@@ -595,8 +595,6 @@ c_common_init_options (lang)\n \n   flag_const_strings = (lang == clk_cplusplus);\n   warn_pointer_arith = (lang == clk_cplusplus);\n-  if (lang == clk_c)\n-    warn_sign_compare = -1;\n }\n \n /* Handle one command-line option in (argc, argv).\n@@ -805,7 +803,8 @@ c_common_decode_option (argc, argv)\n       warn_parentheses = on;\n       warn_return_type = on;\n       warn_sequence_point = on;\t/* Was C only.  */\n-      warn_sign_compare = on;\t/* Was C++ only.  */\n+      if (c_language == clk_cplusplus)\n+\twarn_sign_compare = on;\n       warn_switch = on;\n       warn_strict_aliasing = on;\n       \n@@ -1526,6 +1525,11 @@ c_common_post_options (pfilename)\n \t}\n     }\n \n+  /* -Wextra implies -Wsign-compare, but not if explicitly\n+      overridden.  */\n+  if (warn_sign_compare == -1)\n+    warn_sign_compare = extra_warnings;\n+\n   /* Special format checking options don't work without -Wformat; warn if\n      they are used.  */\n   if (warn_format_y2k && !warn_format)"}, {"sha": "92c64cdaf60055c19ba88858dc7f76bc72a95498", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87f85ea0660e58ac0f2447d1c4a593863601df0e/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87f85ea0660e58ac0f2447d1c4a593863601df0e/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=87f85ea0660e58ac0f2447d1c4a593863601df0e", "patch": "@@ -2458,8 +2458,7 @@ build_binary_op (code, orig_op0, orig_op1, convert_p)\n \t  converted = 1;\n \t  resultcode = xresultcode;\n \n-\t  if ((warn_sign_compare < 0 ? extra_warnings : warn_sign_compare != 0)\n-\t      && skip_evaluation == 0)\n+\t  if (warn_sign_compare && skip_evaluation == 0)\n \t    {\n \t      int op0_signed = ! TREE_UNSIGNED (TREE_TYPE (orig_op0));\n \t      int op1_signed = ! TREE_UNSIGNED (TREE_TYPE (orig_op1));\n@@ -3448,8 +3447,7 @@ build_conditional_expr (ifexp, op1, op2)\n \t and later code won't know it used to be different.\n \t Do this check on the original types, so that explicit casts\n \t will be considered, but default promotions won't.  */\n-      if ((warn_sign_compare < 0 ? extra_warnings : warn_sign_compare)\n-\t  && !skip_evaluation)\n+      if (warn_sign_compare && !skip_evaluation)\n \t{\n \t  int unsigned_op1 = TREE_UNSIGNED (TREE_TYPE (orig_op1));\n \t  int unsigned_op2 = TREE_UNSIGNED (TREE_TYPE (orig_op2));\n@@ -3603,7 +3601,7 @@ internal_build_compound_expr (list, first_p)\n       /* The left-hand operand of a comma expression is like an expression\n          statement: with -Wextra or -Wunused, we should warn if it doesn't have\n \t any side-effects, unless it was explicitly cast to (void).  */\n-      if ((extra_warnings || warn_unused_value)\n+      if (warn_unused_value\n            && ! (TREE_CODE (TREE_VALUE (list)) == CONVERT_EXPR\n                 && VOID_TYPE_P (TREE_TYPE (TREE_VALUE (list)))))\n         warning (\"left-hand operand of comma expression has no effect\");"}, {"sha": "4f6fe484d01a207aa7ce65d00908ac7bb7ff1c60", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87f85ea0660e58ac0f2447d1c4a593863601df0e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87f85ea0660e58ac0f2447d1c4a593863601df0e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=87f85ea0660e58ac0f2447d1c4a593863601df0e", "patch": "@@ -1,3 +1,9 @@\n+2003-05-03  Zack Weinberg  <zack@codesourcery.com>\n+\n+\tPR c/10604\n+\t* cp/typeck.c (build_x_compound_expr): No need to check\n+\textra_warnings as well as warn_unused_value.\n+\n 2003-05-03  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \tPR c++/9364, c++/10553, c++/10586\n@@ -49,7 +55,7 @@\n \ttsubst, tsubst_expr, instantiate_decl): Likewise.\n \t* semantics.c (genrtl_try_block, finish_label_stmt,\n \tbegin_class_definition, expand_body,\n-\tgenrtl_finish_function): Likewise. \n+\tgenrtl_finish_function): Likewise.\n \t* tree.c (build_min_nt, build_min): Likewise.\n \n 2003-05-01  Mark Mitchell  <mark@codesourcery.com>\n@@ -156,7 +162,7 @@\n \n 2003-04-24  Sylvain Pion  <Sylvain.Pion@mpi-sb.mpg.de>\n \n-        * call.c (print_z_candidates): Fix off by one error.\n+\t* call.c (print_z_candidates): Fix off by one error.\n \n 2003-04-24  Nathan Sidwell  <nathan@codesourcery.com>\n \n@@ -192,7 +198,7 @@\n \tPR c++/10446\n \t* search.c (lookup_fnfields_1): Handle empty slots in the method\n \tvector.\n-\t\n+\n \tPR c++/10428\n \t* decl.c (check_elaborated_type_specifier): New function, split\n \tout from ...\n@@ -223,7 +229,7 @@\n \tPR c++/9881\n \t* typeck.c (build_unary_op): Fold all COMPONENT_REF addr\n \texpressions. Reverts my 2002-08-08 patch.\n-\t\n+\n \t* typeck.c (comp_ptr_ttypes_real): Swap final && operands for\n \tcheaper early exit.\n "}, {"sha": "bb99adc6fc02dccd5e05ba95fd41d616949bb845", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87f85ea0660e58ac0f2447d1c4a593863601df0e/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87f85ea0660e58ac0f2447d1c4a593863601df0e/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=87f85ea0660e58ac0f2447d1c4a593863601df0e", "patch": "@@ -4793,7 +4793,7 @@ build_x_compound_expr (list)\n       /* the left-hand operand of a comma expression is like an expression\n          statement: we should warn if it doesn't have any side-effects,\n          unless it was explicitly cast to (void).  */\n-      if ((extra_warnings || warn_unused_value)\n+      if (warn_unused_value\n            && !(TREE_CODE (TREE_VALUE(list)) == CONVERT_EXPR\n                 && VOID_TYPE_P (TREE_TYPE (TREE_VALUE(list)))))\n         warning(\"left-hand operand of comma expression has no effect\");"}, {"sha": "232771e695bf313d1467c43125b56983fccc389b", "filename": "gcc/function.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87f85ea0660e58ac0f2447d1c4a593863601df0e/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87f85ea0660e58ac0f2447d1c4a593863601df0e/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=87f85ea0660e58ac0f2447d1c4a593863601df0e", "patch": "@@ -6956,13 +6956,8 @@ expand_function_end (filename, line, end_bindings)\n \t  }\n     }\n \n-  /* Warn about unused parms if extra warnings were specified.  */\n-  /* Either ``-Wextra -Wunused'' or ``-Wunused-parameter'' enables this\n-     warning.  WARN_UNUSED_PARAMETER is negative when set by\n-     -Wunused.  Note that -Wall implies -Wunused, so ``-Wall -Wextra'' will\n-     also give these warnings.  */\n-  if (warn_unused_parameter > 0\n-      || (warn_unused_parameter < 0 && extra_warnings))\n+  /* Possibly warn about unused parameters.  */\n+  if (warn_unused_parameter)\n     {\n       tree decl;\n "}, {"sha": "7c94359f4aacc92213f0f14cd04cc89cc35f7475", "filename": "gcc/stmt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87f85ea0660e58ac0f2447d1c4a593863601df0e/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87f85ea0660e58ac0f2447d1c4a593863601df0e/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=87f85ea0660e58ac0f2447d1c4a593863601df0e", "patch": "@@ -2174,7 +2174,7 @@ expand_expr_stmt_value (exp, want_value, maybe_last)\n     {\n       if (! TREE_SIDE_EFFECTS (exp))\n \t{\n-\t  if ((extra_warnings || warn_unused_value)\n+\t  if (warn_unused_value\n \t      && !(TREE_CODE (exp) == CONVERT_EXPR\n \t\t   && VOID_TYPE_P (TREE_TYPE (exp))))\n \t    warning_with_file_and_line (emit_filename, emit_lineno,"}, {"sha": "d041bd5eaa3eea1e8e982c07c8dd4a52a4ac48b0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87f85ea0660e58ac0f2447d1c4a593863601df0e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87f85ea0660e58ac0f2447d1c4a593863601df0e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=87f85ea0660e58ac0f2447d1c4a593863601df0e", "patch": "@@ -1,3 +1,8 @@\n+2003-05-03  Zack Weinberg  <zack@codesourcery.com>\n+\n+\tPR c/10604\n+\t* gcc.dg/compare7.c, g++.dg/warn/compare1.C: New testcases.\n+\n 2003-05-03  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* gcc.dg/m-un-2.c: Fix the typedef of size_t.\n@@ -43,7 +48,7 @@\n \t* lib/old-dejagnu.exp: Remove.\n \t* g++.old-deja/old-deja.exp: Use dg.exp, not old-dejagnu.exp.\n \t* g++.old-deja: Revise all tests to use dg commands.\n-\t\n+\n 2003-04-30  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \tPR c++/9432, c++/9528\n@@ -151,7 +156,7 @@\n \n \tPR c++/10451\n \t* g++.dg/parse/crash4.C: New test.\n-\t\n+\n \tPR c++/9847\n \t* g++.dg/parse/crash5.C: New test.\n \n@@ -166,7 +171,7 @@\n 2003-04-22  Devang Patel  <dpatel@apple.com>\n \n \t* gcc.dg/cpp/trad/funlike-5.c: New test.\n-\t\n+\n 2003-04-21  Andreas Tobler <a.tobler@schweiz.ch>\n \n \t* g++.dg/other/packed1.C: Fix dg options."}, {"sha": "e00592262c63d3b8b7a36a424e4a36e223818001", "filename": "gcc/testsuite/g++.dg/warn/compare1.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87f85ea0660e58ac0f2447d1c4a593863601df0e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fcompare1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87f85ea0660e58ac0f2447d1c4a593863601df0e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fcompare1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fcompare1.C?ref=87f85ea0660e58ac0f2447d1c4a593863601df0e", "patch": "@@ -0,0 +1,10 @@\n+/* -Wall is supposed to trigger -Wsign-compare for C++.  PR 10604.\n+   See also gcc.dg/compare7.c.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-Wall\" } */\n+\n+int f(unsigned a, int b)\n+{\n+  return a < b;  /* { dg-warning \"signed and unsigned\" } */\n+}"}, {"sha": "e2fbc04bfc2cd716f969399943dab91f97a2110b", "filename": "gcc/testsuite/gcc.dg/compare7.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87f85ea0660e58ac0f2447d1c4a593863601df0e/gcc%2Ftestsuite%2Fgcc.dg%2Fcompare7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87f85ea0660e58ac0f2447d1c4a593863601df0e/gcc%2Ftestsuite%2Fgcc.dg%2Fcompare7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompare7.c?ref=87f85ea0660e58ac0f2447d1c4a593863601df0e", "patch": "@@ -0,0 +1,10 @@\n+/* -Wall is not supposed to trigger -Wsign-compare for C.  PR 10604.\n+   See also g++.dg/warn/compare1.C.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-Wall\" } */\n+\n+int f(unsigned a, int b)\n+{\n+  return a < b;  /* { dg-bogus \"signed and unsigned\" } */\n+}"}, {"sha": "30bae577992f7afd5c86e9f800a9199975a61eff", "filename": "gcc/toplev.c", "status": "modified", "additions": 37, "deletions": 23, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87f85ea0660e58ac0f2447d1c4a593863601df0e/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87f85ea0660e58ac0f2447d1c4a593863601df0e/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=87f85ea0660e58ac0f2447d1c4a593863601df0e", "patch": "@@ -124,6 +124,7 @@ static int decode_f_option PARAMS ((const char *));\n static int decode_W_option PARAMS ((const char *));\n static int decode_g_option PARAMS ((const char *));\n static unsigned int independent_decode_option PARAMS ((int, char **));\n+static void set_Wextra PARAMS ((int));\n \n static void print_version PARAMS ((FILE *, const char *));\n static int print_single_switch PARAMS ((FILE *, int, int, const char *,\n@@ -1463,6 +1464,9 @@ int warn_unused_parameter;\n int warn_unused_variable;\n int warn_unused_value;\n \n+/* Used for cooperation between set_Wunused and set_Wextra.  */\n+static int maybe_warn_unused_parameter;\n+\n /* Nonzero to warn about code which is never reached.  */\n \n int warn_notreached;\n@@ -1586,8 +1590,6 @@ static const lang_independent_options W_options[] =\n    N_(\"Warn when an optimization pass is disabled\") },\n   {\"deprecated-declarations\", &warn_deprecated_decl, 1,\n    N_(\"Warn about uses of __attribute__((deprecated)) declarations\") },\n-  {\"extra\", &extra_warnings, 1,\n-   N_(\"Print extra (possibly unwanted) warnings\") },\n   {\"missing-noreturn\", &warn_missing_noreturn, 1,\n    N_(\"Warn about functions which might be candidates for attribute noreturn\") },\n   {\"strict-aliasing\", &warn_strict_aliasing, 1,\n@@ -1600,17 +1602,34 @@ set_Wunused (setting)\n {\n   warn_unused_function = setting;\n   warn_unused_label = setting;\n-  /* Unused function parameter warnings are reported when either ``-W\n-     -Wunused'' or ``-Wunused-parameter'' is specified.  Differentiate\n-     -Wunused by setting WARN_UNUSED_PARAMETER to -1.  */\n-  if (!setting)\n-    warn_unused_parameter = 0;\n-  else if (!warn_unused_parameter)\n-    warn_unused_parameter = -1;\n+  /* Unused function parameter warnings are reported when either\n+     ``-Wextra -Wunused'' or ``-Wunused-parameter'' is specified.\n+     Thus, if -Wextra has already been seen, set warn_unused_parameter;\n+     otherwise set maybe_warn_extra_parameter, which will be picked up\n+     by set_Wextra.  */\n+  maybe_warn_unused_parameter = setting;\n+  warn_unused_parameter = (setting && extra_warnings);\n   warn_unused_variable = setting;\n   warn_unused_value = setting;\n }\n \n+static void\n+set_Wextra (setting)\n+     int setting;\n+{\n+  extra_warnings = setting;\n+  warn_unused_value = setting;\n+  warn_unused_parameter = (setting && maybe_warn_unused_parameter);\n+\n+  /* We save the value of warn_uninitialized, since if they put\n+     -Wuninitialized on the command line, we need to generate a\n+     warning about not using it without also specifying -O.  */\n+  if (setting == 0)\n+    warn_uninitialized = 0;\n+  else if (warn_uninitialized != 1)\n+    warn_uninitialized = 2;\n+}\n+\n /* The following routines are useful in setting all the flags that\n    -ffast-math and -fno-fast-math imply.  */\n \n@@ -3206,7 +3225,7 @@ rest_of_compilation (decl)\n \t\t | (flag_thread_jumps ? CLEANUP_THREADING : 0));\n   timevar_pop (TV_FLOW);\n \n-  if (warn_uninitialized || extra_warnings)\n+  if (warn_uninitialized)\n     {\n       uninitialized_vars_warning (DECL_INITIAL (decl));\n       if (extra_warnings)\n@@ -3874,6 +3893,7 @@ display_help ()\n \t\tW_options[i].string, _(description));\n     }\n \n+  printf (_(\"  -Wextra                 Print extra (possibly unwanted) warnings\\n\"));\n   printf (_(\"  -Wunused                Enable unused warnings\\n\"));\n   printf (_(\"  -Wlarger-than-<number>  Warn if an object is larger than <number> bytes\\n\"));\n   printf (_(\"  -p                      Enable function profiling\\n\"));\n@@ -4256,11 +4276,11 @@ decode_W_option (arg)\n     }\n   else if (!strcmp (arg, \"extra\"))\n     {\n-      /* We save the value of warn_uninitialized, since if they put\n-\t -Wuninitialized on the command line, we need to generate a\n-\t warning about not using it without also specifying -O.  */\n-      if (warn_uninitialized != 1)\n-\twarn_uninitialized = 2;\n+      set_Wextra (1);\n+    }\n+  else if (!strcmp (arg, \"no-extra\"))\n+    {\n+      set_Wextra (0);\n     }\n   else\n     return 0;\n@@ -4539,15 +4559,9 @@ independent_decode_option (argc, argv)\n       break;\n \n     case 'W':\n+      /* For backward compatibility, -W is the same as -Wextra.  */\n       if (arg[1] == 0)\n-\t{\n-\t  extra_warnings = 1;\n-\t  /* We save the value of warn_uninitialized, since if they put\n-\t     -Wuninitialized on the command line, we need to generate a\n-\t     warning about not using it without also specifying -O.  */\n-\t  if (warn_uninitialized != 1)\n-\t    warn_uninitialized = 2;\n-\t}\n+\tset_Wextra (1);\n       else\n \treturn decode_W_option (arg + 1);\n       break;"}]}