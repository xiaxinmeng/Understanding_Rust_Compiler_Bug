{"sha": "e538847e1c56a0d6a8bbdea61d70a81bf958e78d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTUzODg0N2UxYzU2YTBkNmE4YmJkZWE2MWQ3MGE4MWJmOTU4ZTc4ZA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2001-12-31T10:22:00Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2001-12-31T10:22:00Z"}, "message": "hash_map: Move into __gnu_cxx, tweak, add using declarations.\n\n2001-12-31  Paolo Carlini  <pcarlini@unitus.it>\n\n\t* include/ext/hash_map:  Move into __gnu_cxx,\n\ttweak, add using declarations.\n\t* include/ext/hash_set:  Ditto.\n\t* include/ext/ropeimpl.h:  Ditto.\n\t* include/ext/stl_hash_fun.h:  Ditto.\n\t* include/ext/stl_hashtable.h:  Ditto.\n\t* include/ext/stl_rope.h:  Ditto.\n\t* src/ext-inst.cc: Tweak.\n\t* testsuite/ext/rope.cc: Tweak.\n\nFrom-SVN: r48422", "tree": {"sha": "871cd9717a14c7d5be85ce430dca244f66806ebd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/871cd9717a14c7d5be85ce430dca244f66806ebd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e538847e1c56a0d6a8bbdea61d70a81bf958e78d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e538847e1c56a0d6a8bbdea61d70a81bf958e78d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e538847e1c56a0d6a8bbdea61d70a81bf958e78d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e538847e1c56a0d6a8bbdea61d70a81bf958e78d/comments", "author": null, "committer": null, "parents": [{"sha": "a2ee91448039c4df6e463daa818af56035ab00f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2ee91448039c4df6e463daa818af56035ab00f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2ee91448039c4df6e463daa818af56035ab00f2"}], "stats": {"total": 130, "additions": 94, "deletions": 36}, "files": [{"sha": "1548e7e2f6bf327889025280963b23e252d99613", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e538847e1c56a0d6a8bbdea61d70a81bf958e78d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e538847e1c56a0d6a8bbdea61d70a81bf958e78d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e538847e1c56a0d6a8bbdea61d70a81bf958e78d", "patch": "@@ -1,3 +1,15 @@\n+2001-12-31  Paolo Carlini  <pcarlini@unitus.it>\n+\n+\t* include/ext/hash_map:  Move into __gnu_cxx,\n+\ttweak, add using declarations.\n+\t* include/ext/hash_set:  Ditto.\n+\t* include/ext/ropeimpl.h:  Ditto.\n+\t* include/ext/stl_hash_fun.h:  Ditto.\n+\t* include/ext/stl_hashtable.h:  Ditto.\n+\t* include/ext/stl_rope.h:  Ditto.\n+\t* src/ext-inst.cc: Tweak.\n+\t* testsuite/ext/rope.cc: Tweak.\n+\n 2001-12-31  Paolo Carlini  <pcarlini@unitus.it>\n \n \t* include/backward/algo.h:  Include <ext/algorithm>,"}, {"sha": "813fad771ea9a6ba42644fd6122e420a9c011d18", "filename": "libstdc++-v3/include/ext/hash_map", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e538847e1c56a0d6a8bbdea61d70a81bf958e78d/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhash_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e538847e1c56a0d6a8bbdea61d70a81bf958e78d/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhash_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhash_map?ref=e538847e1c56a0d6a8bbdea61d70a81bf958e78d", "patch": "@@ -64,8 +64,12 @@\n #include <ext/stl_hashtable.h>\n #include <bits/concept_check.h>\n \n-namespace std\n+namespace __gnu_cxx\n {\n+using std::equal_to;\n+using std::allocator;\n+using std::pair;\n+using std::_Select1st;\n \n // Forward declaration of equality operator; needed for friend declaration.\n \n@@ -371,14 +375,17 @@ swap(hash_multimap<_Key,_Tp,_HashFcn,_EqlKey,_Alloc>& __hm1,\n   __hm1.swap(__hm2);\n }\n \n+} // namespace __gnu_cxx\n \n+namespace std\n+{\n // Specialization of insert_iterator so that it will work for hash_map\n // and hash_multimap.\n \n template <class _Key, class _Tp, class _HashFn,  class _EqKey, class _Alloc>\n-class insert_iterator<hash_map<_Key, _Tp, _HashFn, _EqKey, _Alloc> > {\n+class insert_iterator<__gnu_cxx::hash_map<_Key, _Tp, _HashFn, _EqKey, _Alloc> > {\n protected:\n-  typedef hash_map<_Key, _Tp, _HashFn, _EqKey, _Alloc> _Container;\n+  typedef __gnu_cxx::hash_map<_Key, _Tp, _HashFn, _EqKey, _Alloc> _Container;\n   _Container* container;\n public:\n   typedef _Container          container_type;\n@@ -402,9 +409,9 @@ public:\n };\n \n template <class _Key, class _Tp, class _HashFn,  class _EqKey, class _Alloc>\n-class insert_iterator<hash_multimap<_Key, _Tp, _HashFn, _EqKey, _Alloc> > {\n+class insert_iterator<__gnu_cxx::hash_multimap<_Key, _Tp, _HashFn, _EqKey, _Alloc> > {\n protected:\n-  typedef hash_multimap<_Key, _Tp, _HashFn, _EqKey, _Alloc> _Container;\n+  typedef __gnu_cxx::hash_multimap<_Key, _Tp, _HashFn, _EqKey, _Alloc> _Container;\n   _Container* container;\n   typename _Container::iterator iter;\n public:"}, {"sha": "b2a43789cdd80e5b85d471b7debb1fc9e3ff644a", "filename": "libstdc++-v3/include/ext/hash_set", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e538847e1c56a0d6a8bbdea61d70a81bf958e78d/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhash_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e538847e1c56a0d6a8bbdea61d70a81bf958e78d/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhash_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhash_set?ref=e538847e1c56a0d6a8bbdea61d70a81bf958e78d", "patch": "@@ -64,8 +64,12 @@\n #include <ext/stl_hashtable.h>\n #include <bits/concept_check.h>\n \n-namespace std\n+namespace __gnu_cxx\n {\n+using std::equal_to;\n+using std::allocator;\n+using std::pair;\n+using std::_Identity;\n \n // Forward declaration of equality operator; needed for friend declaration.\n \n@@ -361,13 +365,17 @@ swap(hash_multiset<_Val,_HashFcn,_EqualKey,_Alloc>& __hs1,\n   __hs1.swap(__hs2);\n }\n \n+} // namespace __gnu_cxx\n+\n+namespace std\n+{\n // Specialization of insert_iterator so that it will work for hash_set\n // and hash_multiset.\n \n template <class _Value, class _HashFcn, class _EqualKey, class _Alloc>\n-class insert_iterator<hash_set<_Value, _HashFcn, _EqualKey, _Alloc> > {\n+class insert_iterator<__gnu_cxx::hash_set<_Value, _HashFcn, _EqualKey, _Alloc> > {\n protected:\n-  typedef hash_set<_Value, _HashFcn, _EqualKey, _Alloc> _Container;\n+  typedef __gnu_cxx::hash_set<_Value, _HashFcn, _EqualKey, _Alloc> _Container;\n   _Container* container;\n public:\n   typedef _Container          container_type;\n@@ -391,9 +399,9 @@ public:\n };\n \n template <class _Value, class _HashFcn, class _EqualKey, class _Alloc>\n-class insert_iterator<hash_multiset<_Value, _HashFcn, _EqualKey, _Alloc> > {\n+class insert_iterator<__gnu_cxx::hash_multiset<_Value, _HashFcn, _EqualKey, _Alloc> > {\n protected:\n-  typedef hash_multiset<_Value, _HashFcn, _EqualKey, _Alloc> _Container;\n+  typedef __gnu_cxx::hash_multiset<_Value, _HashFcn, _EqualKey, _Alloc> _Container;\n   _Container* container;\n   typename _Container::iterator iter;\n public:"}, {"sha": "54ddc26e7fa16058f36759454b8f4434be376908", "filename": "libstdc++-v3/include/ext/ropeimpl.h", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e538847e1c56a0d6a8bbdea61d70a81bf958e78d/libstdc%2B%2B-v3%2Finclude%2Fext%2Fropeimpl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e538847e1c56a0d6a8bbdea61d70a81bf958e78d/libstdc%2B%2B-v3%2Finclude%2Fext%2Fropeimpl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fropeimpl.h?ref=e538847e1c56a0d6a8bbdea61d70a81bf958e78d", "patch": "@@ -49,8 +49,17 @@\n #include <bits/std_iostream.h>\n #include <bits/functexcept.h>\n \n-namespace std\n+namespace __gnu_cxx\n {\n+using std::size_t;\n+using std::printf;\n+using std::basic_ostream;  \n+using std::__throw_length_error;\n+using std::__alloc;\n+using std::_Destroy;\n+using std::uninitialized_fill_n;\n+using std::lexicographical_compare_3way;\n+using std::uninitialized_copy_n;\n \n // Set buf_start, buf_end, and buf_ptr appropriately, filling tmp_buf\n // if necessary.  Assumes _M_path_end[leaf_index] and leaf_pos are correct.\n@@ -837,13 +846,13 @@ bool rope<_CharT, _Alloc>::_S_apply_to_pieces(\n \t\t_RopeRep* __left =  __conc->_M_left;\n \t\tsize_t __left_len = __left->_M_size;\n \t\tif (__begin < __left_len) {\n-\t\t    size_t __left_end = min(__left_len, __end);\n+\t\t    size_t __left_end = std::min(__left_len, __end);\n \t\t    if (!_S_apply_to_pieces(__c, __left, __begin, __left_end))\n \t\t\treturn false;\n \t\t}\n \t\tif (__end > __left_len) {\n \t\t    _RopeRep* __right =  __conc->_M_right;\n-\t\t    size_t __right_start = max(__left_len, __begin);\n+\t\t    size_t __right_start = std::max(__left_len, __begin);\n \t\t    if (!_S_apply_to_pieces(__c, __right,\n \t\t\t\t\t __right_start - __left_len,\n \t\t\t\t\t __end - __left_len)) {\n@@ -901,7 +910,7 @@ basic_ostream<_CharT, _Traits>& operator<< (basic_ostream<_CharT, _Traits>& __o,\n                                             const rope<_CharT, _Alloc>& __r)\n {\n     size_t __w = __o.width();\n-    bool __left = bool(__o.flags() & ios::left);\n+    bool __left = bool(__o.flags() & std::ios::left);\n     size_t __pad_len;\n     size_t __rope_len = __r.size();\n       _Rope_insert_char_consumer<_CharT, _Traits> __c(__o);\n@@ -974,7 +983,7 @@ rope<_CharT,_Alloc>::_S_flatten(_RopeRep* __r, _CharT* __buffer)\n \tcase _RopeRep::_S_leaf:\n \t    {\n \t\t_RopeLeaf* __l = (_RopeLeaf*)__r;\n-\t\treturn copy_n(__l->_M_data, __l->_M_size, __buffer).second;\n+\t\treturn std::copy_n(__l->_M_data, __l->_M_size, __buffer).second;\n \t    }\n \tcase _RopeRep::_S_function:\n \tcase _RopeRep::_S_substringfn:\n@@ -1449,7 +1458,7 @@ const _CharT* rope<_CharT,_Alloc>::c_str() const {\n \t_M_tree_ptr->_M_c_string = __result;\n #   else\n       if ((__old_c_string = (__GC_CONST _CharT*)\n-             _Atomic_swap((unsigned long *)(&(_M_tree_ptr->_M_c_string)),\n+             std::_Atomic_swap((unsigned long *)(&(_M_tree_ptr->_M_c_string)),\n \t\t\t  (unsigned long)__result)) != 0) {\n \t// It must have been added in the interim.  Hence it had to have been\n \t// separately allocated.  Deallocate the old copy, since we just\n@@ -1530,7 +1539,7 @@ inline void rotate(\n }\n # endif\n \n-} // namespace std\n+} // namespace __gnu_cxx\n \n // Local Variables:\n // mode:C++"}, {"sha": "64ddab86eda9d5ee11c85f7f99bef8ace50f3618", "filename": "libstdc++-v3/include/ext/stl_hash_fun.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e538847e1c56a0d6a8bbdea61d70a81bf958e78d/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstl_hash_fun.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e538847e1c56a0d6a8bbdea61d70a81bf958e78d/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstl_hash_fun.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstl_hash_fun.h?ref=e538847e1c56a0d6a8bbdea61d70a81bf958e78d", "patch": "@@ -63,8 +63,9 @@\n \n #include <bits/std_cstddef.h>\n \n-namespace std\n+namespace __gnu_cxx\n {\n+using std::size_t;\n \n template <class _Key> struct hash { };\n \n@@ -115,7 +116,7 @@ template<> struct hash<unsigned long> {\n   size_t operator()(unsigned long __x) const { return __x; }\n };\n \n-} // namespace std\n+} // namespace __gnu_cxx\n \n #endif /* _CPP_BITS_STL_HASH_FUN_H */\n "}, {"sha": "91024b5660771ee8f04c13eebce4235b4f3180fc", "filename": "libstdc++-v3/include/ext/stl_hashtable.h", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e538847e1c56a0d6a8bbdea61d70a81bf958e78d/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstl_hashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e538847e1c56a0d6a8bbdea61d70a81bf958e78d/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstl_hashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstl_hashtable.h?ref=e538847e1c56a0d6a8bbdea61d70a81bf958e78d", "patch": "@@ -74,8 +74,18 @@\n #include <bits/stl_vector.h>\n #include <ext/stl_hash_fun.h>\n \n-namespace std\n+namespace __gnu_cxx\n {\n+using std::size_t;\n+using std::ptrdiff_t;\n+using std::forward_iterator_tag;\n+using std::input_iterator_tag;\n+using std::_Alloc_traits;\n+using std::_Construct;\n+using std::_Destroy;\n+using std::distance;\n+using std::vector;\n+using std::pair;\n \n template <class _Val>\n struct _Hashtable_node\n@@ -85,7 +95,7 @@ struct _Hashtable_node\n };  \n \n template <class _Val, class _Key, class _HashFcn,\n-          class _ExtractKey, class _EqualKey, class _Alloc = __alloc>\n+          class _ExtractKey, class _EqualKey, class _Alloc = std::__alloc>\n class hashtable;\n \n template <class _Val, class _Key, class _HashFcn,\n@@ -188,7 +198,7 @@ inline unsigned long __stl_next_prime(unsigned long __n)\n {\n   const unsigned long* __first = __stl_prime_list;\n   const unsigned long* __last = __stl_prime_list + (int)__stl_num_primes;\n-  const unsigned long* pos = lower_bound(__first, __last, __n);\n+  const unsigned long* pos = std::lower_bound(__first, __last, __n);\n   return pos == __last ? *(__last - 1) : *pos;\n }\n \n@@ -964,7 +974,7 @@ void hashtable<_Val,_Key,_HF,_Ex,_Eq,_All>\n     }\n }\n \n-} // namespace std\n+} // namespace __gnu_cxx\n \n #endif /* __SGI_STL_INTERNAL_HASHTABLE_H */\n "}, {"sha": "9f23a607c93a853e12d33de381b7ec550b8ed462", "filename": "libstdc++-v3/include/ext/stl_rope.h", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e538847e1c56a0d6a8bbdea61d70a81bf958e78d/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstl_rope.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e538847e1c56a0d6a8bbdea61d70a81bf958e78d/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstl_rope.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstl_rope.h?ref=e538847e1c56a0d6a8bbdea61d70a81bf958e78d", "patch": "@@ -61,8 +61,17 @@\n #   define __GC_CONST   // constant except for deallocation\n # endif\n \n-namespace std\n+namespace __gnu_cxx\n {\n+using std::size_t;\n+using std::ptrdiff_t;\n+using std::allocator;\n+using std::iterator;\n+using std::reverse_iterator;\n+using std::_Alloc_traits;\n+using std::_Destroy;\n+using std::_Refcount_Base;\n+using std::uninitialized_copy_n;\n \n // The _S_eos function is used for those functions that\n // convert to/from C-like strings to detect the end of the string.\n@@ -122,7 +131,7 @@ class char_producer {\n // little like containers.\n \n template<class _Sequence, size_t _Buf_sz = 100>\n-class sequence_buffer : public iterator<output_iterator_tag,void,void,void,void>\n+class sequence_buffer : public iterator<std::output_iterator_tag,void,void,void,void>\n {\n     public:\n         typedef typename _Sequence::value_type value_type;\n@@ -316,7 +325,7 @@ rope<_CharT,_Alloc> operator+ (const rope<_CharT,_Alloc>& __left,\n // The result has refcount 0.\n template<class _CharT, class _Alloc>\n struct _Rope_Concat_fn\n-       : public binary_function<rope<_CharT,_Alloc>, rope<_CharT,_Alloc>,\n+       : public std::binary_function<rope<_CharT,_Alloc>, rope<_CharT,_Alloc>,\n                                      rope<_CharT,_Alloc> > {\n         rope<_CharT,_Alloc> operator() (const rope<_CharT,_Alloc>& __x,\n                                 const rope<_CharT,_Alloc>& __y) {\n@@ -601,7 +610,7 @@ struct _Rope_RopeConcatenation : public _Rope_RopeRep<_CharT,_Alloc> {\n                              allocator_type __a)\n \n       : _Rope_RopeRep<_CharT,_Alloc>(_S_concat,\n-                                     max(__l->_M_depth, __r->_M_depth) + 1,\n+                                     std::max(__l->_M_depth, __r->_M_depth) + 1,\n                                      false,\n                                      __l->_M_size + __r->_M_size, __a),\n         _M_left(__l), _M_right(__r)\n@@ -838,7 +847,7 @@ class _Rope_char_ptr_proxy {\n \n template<class _CharT, class _Alloc>\n class _Rope_iterator_base\n-  : public iterator<random_access_iterator_tag, _CharT>\n+  : public iterator<std::random_access_iterator_tag, _CharT>\n {\n     friend class rope<_CharT,_Alloc>;\n   public:\n@@ -1538,7 +1547,7 @@ class rope : public _Rope_base<_CharT,_Alloc> {\n         {\n             _CharT* __buf = _Data_allocate(_S_rounded_up_size(1));\n \n-            _Construct(__buf, __c);\n+            std::_Construct(__buf, __c);\n             try {\n                 _M_tree_ptr = _S_new_RopeLeaf(__buf, 1, __a);\n             }\n@@ -2107,8 +2116,9 @@ class rope : public _Rope_base<_CharT,_Alloc> {\n         size_type find(_CharT __c, size_type __pos = 0) const;\n         size_type find(const _CharT* __s, size_type __pos = 0) const {\n             size_type __result_pos;\n-            const_iterator __result = search(const_begin() + __pos, const_end(),\n-                                           __s, __s + _S_char_ptr_len(__s));\n+            const_iterator __result =\n+\t      std::search(const_begin() + __pos, const_end(),\n+\t\t\t  __s, __s + _S_char_ptr_len(__s));\n             __result_pos = __result.index();\n #           ifndef __STL_OLD_ROPE_SEMANTICS\n                 if (__result_pos == size()) __result_pos = npos;\n@@ -2429,8 +2439,8 @@ inline bool operator!= (const _Rope_char_ptr_proxy<_CharT,_Alloc>& __x,\n }\n \n template<class _CharT, class _Traits, class _Alloc>\n-basic_ostream<_CharT, _Traits>& operator<<\n-                                        (basic_ostream<_CharT, _Traits>& __o,\n+std::basic_ostream<_CharT, _Traits>& operator<<\n+                                        (std::basic_ostream<_CharT, _Traits>& __o,\n                                          const rope<_CharT, _Alloc>& __r);\n \n typedef rope<char> crope;\n@@ -2475,7 +2485,7 @@ template<> struct hash<wrope>\n   }\n };\n \n-} // namespace std\n+} // namespace __gnu_cxx\n \n # include <ext/ropeimpl.h>\n "}, {"sha": "21b98c8ee6ad76eadee9850eb52e03d74f3c7d2d", "filename": "libstdc++-v3/src/ext-inst.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e538847e1c56a0d6a8bbdea61d70a81bf958e78d/libstdc%2B%2B-v3%2Fsrc%2Fext-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e538847e1c56a0d6a8bbdea61d70a81bf958e78d/libstdc%2B%2B-v3%2Fsrc%2Fext-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fext-inst.cc?ref=e538847e1c56a0d6a8bbdea61d70a81bf958e78d", "patch": "@@ -35,5 +35,6 @@\n \n namespace std\n {\n-  template const unsigned long rope<char, std::allocator<char> >::_S_min_len;\n+  template\n+  const unsigned long __gnu_cxx::rope<char, std::allocator<char> >::_S_min_len;\n } // namespace std"}, {"sha": "969554cbe1c5bcce8c876a354f3c458c743fedca", "filename": "libstdc++-v3/testsuite/ext/rope.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e538847e1c56a0d6a8bbdea61d70a81bf958e78d/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frope.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e538847e1c56a0d6a8bbdea61d70a81bf958e78d/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frope.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frope.cc?ref=e538847e1c56a0d6a8bbdea61d70a81bf958e78d", "patch": "@@ -25,7 +25,7 @@\n \n void test01()\n {\n-  std::crope foo;\n+  __gnu_cxx::crope foo;\n   foo += \"bar\";\n   const char* data = foo.c_str();\n   std::cout << data << std::endl;"}]}