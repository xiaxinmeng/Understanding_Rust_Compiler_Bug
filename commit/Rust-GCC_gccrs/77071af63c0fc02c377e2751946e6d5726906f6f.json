{"sha": "77071af63c0fc02c377e2751946e6d5726906f6f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzcwNzFhZjYzYzBmYzAyYzM3N2UyNzUxOTQ2ZTZkNTcyNjkwNmY2Zg==", "commit": {"author": {"name": "Bill Seurer", "email": "seurer@linux.vnet.ibm.com", "date": "2017-04-25T15:22:40Z"}, "committer": {"name": "Bill Seurer", "email": "seurer@gcc.gnu.org", "date": "2017-04-25T15:22:40Z"}, "message": "[PATCH, rs6000] pr80482 Relax vector builtin parameter checks\n\nPR target/80482\n\nThis patch changes the parameter testing for powerpc vector builtins to relax\nthe existing requirement that the parameters be identical to instead that they\nbe compatible.  This allows for mixing parameters with differing qualified\n(const, volatile, etc.) types.\n\nSee https://gcc.gnu.org/bugzilla/show_bug.cgi?id=80482 for more information.\n\nBootstrapped and tested on powerpc64le-unknown-linux-gnu and\npowerpc64be-unknown-linux-gnu with no regressions.  Is this ok for trunk?\n\n[gcc]\n\n2017-04-25  Bill Seurer  <seurer@linux.vnet.ibm.com>\n\n\tPR target/80482\n\t* config/rs6000/rs6000-c.c (altivec_resolve_overloaded_builtin): Change\n\ttype checks to test for compatibility instead of equality.\n\n[gcc/testsuite]\n\n2017-04-25  Bill Seurer  <seurer@linux.vnet.ibm.com>\n\n\tPR target/80482\n\t* gcc.target/powerpc/vec-constvolatile.c: New test.\n\nFrom-SVN: r247250", "tree": {"sha": "99b8adb5509f96239368470c1cc55d74b777a93c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99b8adb5509f96239368470c1cc55d74b777a93c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77071af63c0fc02c377e2751946e6d5726906f6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77071af63c0fc02c377e2751946e6d5726906f6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77071af63c0fc02c377e2751946e6d5726906f6f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77071af63c0fc02c377e2751946e6d5726906f6f/comments", "author": {"login": "BillSeurer", "id": 8561221, "node_id": "MDQ6VXNlcjg1NjEyMjE=", "avatar_url": "https://avatars.githubusercontent.com/u/8561221?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BillSeurer", "html_url": "https://github.com/BillSeurer", "followers_url": "https://api.github.com/users/BillSeurer/followers", "following_url": "https://api.github.com/users/BillSeurer/following{/other_user}", "gists_url": "https://api.github.com/users/BillSeurer/gists{/gist_id}", "starred_url": "https://api.github.com/users/BillSeurer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BillSeurer/subscriptions", "organizations_url": "https://api.github.com/users/BillSeurer/orgs", "repos_url": "https://api.github.com/users/BillSeurer/repos", "events_url": "https://api.github.com/users/BillSeurer/events{/privacy}", "received_events_url": "https://api.github.com/users/BillSeurer/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fbe91804589555b48f00e1e26b98096745fc6882", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbe91804589555b48f00e1e26b98096745fc6882", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbe91804589555b48f00e1e26b98096745fc6882"}], "stats": {"total": 73, "additions": 58, "deletions": 15}, "files": [{"sha": "56da6914880b20487d5c1b3ccffad2d585a623ea", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77071af63c0fc02c377e2751946e6d5726906f6f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77071af63c0fc02c377e2751946e6d5726906f6f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=77071af63c0fc02c377e2751946e6d5726906f6f", "patch": "@@ -1,3 +1,9 @@\n+2017-04-25  Bill Seurer  <seurer@linux.vnet.ibm.com>\n+\n+\tPR target/80482\n+\t* config/rs6000/rs6000-c.c (altivec_resolve_overloaded_builtin): Change\n+\ttype checks to test for compatibility instead of equality.\n+\n 2017-04-25  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "80aab5ff2dffd8ecf786af446c2c668747577b33", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77071af63c0fc02c377e2751946e6d5726906f6f/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77071af63c0fc02c377e2751946e6d5726906f6f/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=77071af63c0fc02c377e2751946e6d5726906f6f", "patch": "@@ -5595,11 +5595,11 @@ altivec_resolve_overloaded_builtin (location_t loc, tree fndecl,\n       tree arg1 = (*arglist)[1];\n       tree arg1_type = TREE_TYPE (arg1);\n \n-      /* Both arguments must be vectors and the types must match.  */\n-      if (arg0_type != arg1_type)\n-\tgoto bad;\n+      /* Both arguments must be vectors and the types must be compatible.  */\n       if (TREE_CODE (arg0_type) != VECTOR_TYPE)\n \tgoto bad;\n+      if (!lang_hooks.types_compatible_p (arg0_type, arg1_type))\n+\tgoto bad;\n \n       switch (TYPE_MODE (TREE_TYPE (arg0_type)))\n \t{\n@@ -5610,8 +5610,8 @@ altivec_resolve_overloaded_builtin (location_t loc, tree fndecl,\n \t  case TImode:\n \t    {\n \t      /* For scalar types just use a multiply expression.  */\n-\t      return fold_build2_loc (loc, MULT_EXPR, TREE_TYPE (arg0),\n-\t\t\t\t\targ0, arg1);\n+\t      return fold_build2_loc (loc, MULT_EXPR, TREE_TYPE (arg0), arg0,\n+\t\t\t\t      fold_convert (TREE_TYPE (arg0), arg1));\n \t    }\n \t  case SFmode:\n \t    {\n@@ -5655,12 +5655,11 @@ altivec_resolve_overloaded_builtin (location_t loc, tree fndecl,\n \t  || (TYPE_MODE (TREE_TYPE (arg0_type)) == SFmode)\n \t  || (TYPE_MODE (TREE_TYPE (arg0_type)) == DFmode))\n \t{\n-\t  /* Both arguments must be vectors and the types must match.  */\n-\t  if (arg0_type != arg1_type)\n-\t    goto bad;\n+\t  /* Both arguments must be vectors and the types must be compatible.  */\n \t  if (TREE_CODE (arg0_type) != VECTOR_TYPE)\n \t    goto bad;\n-\n+\t  if (!lang_hooks.types_compatible_p (arg0_type, arg1_type))\n+\t    goto bad;\n \n \t  switch (TYPE_MODE (TREE_TYPE (arg0_type)))\n \t    {\n@@ -5720,11 +5719,12 @@ altivec_resolve_overloaded_builtin (location_t loc, tree fndecl,\n       tree arg2_type = TREE_TYPE (arg2);\n \n       /* All 3 arguments must be vectors of (signed or unsigned) (int or\n-\t  __int128) and the types must match.  */\n-      if ((arg0_type != arg1_type) || (arg1_type != arg2_type))\n-\tgoto bad;\n+\t __int128) and the types must be compatible.  */\n       if (TREE_CODE (arg0_type) != VECTOR_TYPE)\n \tgoto bad;\n+      if (!lang_hooks.types_compatible_p (arg0_type, arg1_type) ||\n+\t  !lang_hooks.types_compatible_p (arg1_type, arg2_type))\n+\tgoto bad;\n \n       switch (TYPE_MODE (TREE_TYPE (arg0_type)))\n \t{\n@@ -5783,11 +5783,12 @@ altivec_resolve_overloaded_builtin (location_t loc, tree fndecl,\n       tree arg2_type = TREE_TYPE (arg2);\n \n       /* All 3 arguments must be vectors of (signed or unsigned) (int or\n-\t__int128) and the types must match.  */\n-      if (arg0_type != arg1_type || arg1_type != arg2_type)\n-\tgoto bad;\n+\t __int128) and the types must be compatible.  */\n       if (TREE_CODE (arg0_type) != VECTOR_TYPE)\n \tgoto bad;\n+      if (!lang_hooks.types_compatible_p (arg0_type, arg1_type) ||\n+\t  !lang_hooks.types_compatible_p (arg1_type, arg2_type))\n+\tgoto bad;\n \n       switch (TYPE_MODE (TREE_TYPE (arg0_type)))\n \t{"}, {"sha": "cf583f97dcfdc8728fbf078a96cac73354843f1f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77071af63c0fc02c377e2751946e6d5726906f6f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77071af63c0fc02c377e2751946e6d5726906f6f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=77071af63c0fc02c377e2751946e6d5726906f6f", "patch": "@@ -1,3 +1,8 @@\n+2017-04-25  Bill Seurer  <seurer@linux.vnet.ibm.com>\n+\n+\tPR target/80482\n+\t* gcc.target/powerpc/vec-constvolatile.c: New test.\n+\n 2017-04-25  David Malcolm  <dmalcolm@redhat.com>\n \n \t* g++.dg/semicolon-fixits.C: New test case."}, {"sha": "07cbd5c291ad020016deaf7dc14baa6ff04c658d", "filename": "gcc/testsuite/gcc.target/powerpc/vec-constvolatile.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77071af63c0fc02c377e2751946e6d5726906f6f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-constvolatile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77071af63c0fc02c377e2751946e6d5726906f6f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-constvolatile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-constvolatile.c?ref=77071af63c0fc02c377e2751946e6d5726906f6f", "patch": "@@ -0,0 +1,31 @@\n+/* Test that const and volatile qualifiers can mix on vec_mul operands.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec -mvsx\" } */\n+\n+#include <altivec.h>\n+\n+void P() {\n+  const volatile vector float cvva = vec_splats(0.00187682f);\n+  volatile vector float vva = vec_splats(0.00187682f);\n+  const vector float cva = vec_splats(0.00187682f);\n+  vector float va = vec_splats(0.00187682f);\n+  vector float dx = {1.0f, 2.0f, 3.0f, 4.0f};\n+\n+  vector float X1m0 = vec_mul(va, va);\n+  vector float X2m0 = vec_mul(va, dx);\n+  vector float X3m0 = vec_mul(dx, va);\n+\n+  vector float X1m1 = vec_mul(cva, cva);\n+  vector float X2m1 = vec_mul(cva, dx);\n+  vector float X3m1 = vec_mul(dx, cva);\n+\n+  vector float Y1m2 = vec_mul(vva, vva);\n+  vector float Y2m2 = vec_mul(vva, dx);\n+  vector float Y3m2 = vec_mul(dx, vva);\n+\n+  vector float X1m3 = vec_mul(cvva, cvva);\n+  vector float X2m3 = vec_mul(cvva, dx);\n+  vector float X3m3 = vec_mul(dx, cvva);\n+}"}]}