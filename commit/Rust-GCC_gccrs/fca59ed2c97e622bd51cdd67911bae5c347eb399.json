{"sha": "fca59ed2c97e622bd51cdd67911bae5c347eb399", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmNhNTllZDJjOTdlNjIyYmQ1MWNkZDY3OTExYmFlNWMzNDdlYjM5OQ==", "commit": {"author": {"name": "Michael Matz", "email": "matz@suse.de", "date": "2005-09-15T05:03:01Z"}, "committer": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2005-09-15T05:03:01Z"}, "message": "* tree-vrp.c (vrp_int_const_binop <MINUS_EXPR>): Handle 0 - -INF.\n\nFrom-SVN: r104298", "tree": {"sha": "71cce1f99ee510dfc33760561e6423fac9b8fa98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71cce1f99ee510dfc33760561e6423fac9b8fa98"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fca59ed2c97e622bd51cdd67911bae5c347eb399", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fca59ed2c97e622bd51cdd67911bae5c347eb399", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fca59ed2c97e622bd51cdd67911bae5c347eb399", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fca59ed2c97e622bd51cdd67911bae5c347eb399/comments", "author": {"login": "susematz", "id": 4117296, "node_id": "MDQ6VXNlcjQxMTcyOTY=", "avatar_url": "https://avatars.githubusercontent.com/u/4117296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/susematz", "html_url": "https://github.com/susematz", "followers_url": "https://api.github.com/users/susematz/followers", "following_url": "https://api.github.com/users/susematz/following{/other_user}", "gists_url": "https://api.github.com/users/susematz/gists{/gist_id}", "starred_url": "https://api.github.com/users/susematz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/susematz/subscriptions", "organizations_url": "https://api.github.com/users/susematz/orgs", "repos_url": "https://api.github.com/users/susematz/repos", "events_url": "https://api.github.com/users/susematz/events{/privacy}", "received_events_url": "https://api.github.com/users/susematz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fd312e903f8427204fd73fe574bfb18b28005825", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd312e903f8427204fd73fe574bfb18b28005825", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd312e903f8427204fd73fe574bfb18b28005825"}], "stats": {"total": 10, "additions": 8, "deletions": 2}, "files": [{"sha": "e111d5d87da24c9c97b6b813a9bce3faed4c4770", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca59ed2c97e622bd51cdd67911bae5c347eb399/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca59ed2c97e622bd51cdd67911bae5c347eb399/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fca59ed2c97e622bd51cdd67911bae5c347eb399", "patch": "@@ -1,3 +1,7 @@\n+2005-09-15  Michael Matz  <matz@suse.de>\n+\n+\t* tree-vrp.c (vrp_int_const_binop <MINUS_EXPR>): Handle 0 - -INF.\n+\n 2005-09-14  Daniel Berlin  <dberlin@dberlin.org>\n \n \tPR tree-optimization/23835"}, {"sha": "e802b2db802dd047d5048f61d0391e310bb03fe5", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca59ed2c97e622bd51cdd67911bae5c347eb399/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca59ed2c97e622bd51cdd67911bae5c347eb399/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=fca59ed2c97e622bd51cdd67911bae5c347eb399", "patch": "@@ -956,8 +956,10 @@ vrp_int_const_binop (enum tree_code code, tree val1, tree val2)\n \t  /* For subtraction, the operands must be of different\n \t     signs to yield an overflow.  Its sign is therefore\n \t     that of the first operand or the opposite of that\n-\t     of the second operand.  */\n-\t  || (code == MINUS_EXPR && sgn1 > 0)\n+\t     of the second operand.  A first operand of 0 counts\n+\t     as positive here, for the corner case 0 - (-INF),\n+\t     which overflows, but must yield +INF.  */\n+\t  || (code == MINUS_EXPR && sgn1 >= 0)\n \t  /* For division, the only case is -INF / -1 = +INF.  */\n \t  || code == TRUNC_DIV_EXPR\n \t  || code == FLOOR_DIV_EXPR"}]}