{"sha": "d399ae674b67725d39ada360cda4cc668a4a6af0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDM5OWFlNjc0YjY3NzI1ZDM5YWRhMzYwY2RhNGNjNjY4YTRhNmFmMA==", "commit": {"author": {"name": "Daniel Jacobowitz", "email": "dan@codesourcery.com", "date": "2005-10-10T01:04:31Z"}, "committer": {"name": "Daniel Jacobowitz", "email": "drow@gcc.gnu.org", "date": "2005-10-10T01:04:31Z"}, "message": "config.gcc (arm*-*-linux*): Remove redundant extra_parts and gnu_ld assignments.\n\n\t* config.gcc (arm*-*-linux*): Remove redundant extra_parts and\n\tgnu_ld assignments.\n\t* config/arm/t-linux-eabi (LIB1ASMFUNCS)\n\t(EXTRA_MULTILIB_PARTS): Define.\n\t* config/arm/linux-elf.h (NO_IMPLICIT_EXTERN_C, CPLUSPLUS_CPP_SPEC)\n\t(STARTFILE_SPEC, ENDFILE_SPEC, CC1_SPEC)\n\t(LINK_GCC_C_SEQUENCE_SPEC, USE_LD_AS_NEEDED): Move to...\n\t* config/arm/uclinux-elf.h (NO_IMPLICIT_EXTERN_C, CPLUSPLUS_CPP_SPEC)\n\t(STARTFILE_SPEC, ENDFILE_SPEC, CC1_SPEC)\n\t(LINK_GCC_C_SEQUENCE_SPEC, USE_LD_AS_NEEDED): ... here.\n\nFrom-SVN: r105162", "tree": {"sha": "fd7ed0f1944d6b6180c6a0df54ad756ec0eb963a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd7ed0f1944d6b6180c6a0df54ad756ec0eb963a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d399ae674b67725d39ada360cda4cc668a4a6af0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d399ae674b67725d39ada360cda4cc668a4a6af0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d399ae674b67725d39ada360cda4cc668a4a6af0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d399ae674b67725d39ada360cda4cc668a4a6af0/comments", "author": null, "committer": null, "parents": [{"sha": "50347226297c2c007b5ce980148250c1fce47685", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50347226297c2c007b5ce980148250c1fce47685", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50347226297c2c007b5ce980148250c1fce47685"}], "stats": {"total": 107, "additions": 64, "deletions": 43}, "files": [{"sha": "1e0034bb8ac7fa432c140c23129bc732a6fa7f08", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d399ae674b67725d39ada360cda4cc668a4a6af0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d399ae674b67725d39ada360cda4cc668a4a6af0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d399ae674b67725d39ada360cda4cc668a4a6af0", "patch": "@@ -1,3 +1,16 @@\n+2005-10-09  Daniel Jacobowitz  <dan@codesourcery.com>\n+\n+\t* config.gcc (arm*-*-linux*): Remove redundant extra_parts and\n+\tgnu_ld assignments.\n+\t* config/arm/t-linux-eabi (LIB1ASMFUNCS)\n+\t(EXTRA_MULTILIB_PARTS): Define.\n+\t* config/arm/linux-elf.h (NO_IMPLICIT_EXTERN_C, CPLUSPLUS_CPP_SPEC)\n+\t(STARTFILE_SPEC, ENDFILE_SPEC, CC1_SPEC)\n+\t(LINK_GCC_C_SEQUENCE_SPEC, USE_LD_AS_NEEDED): Move to...\n+\t* config/arm/uclinux-elf.h (NO_IMPLICIT_EXTERN_C, CPLUSPLUS_CPP_SPEC)\n+\t(STARTFILE_SPEC, ENDFILE_SPEC, CC1_SPEC)\n+\t(LINK_GCC_C_SEQUENCE_SPEC, USE_LD_AS_NEEDED): ... here.\n+\n 2005-10-09  Zdenek Dvorak  <dvorakz@suse.cz>\n \n \tPR tree-optimization/24226"}, {"sha": "9acca827cc8fa52aa7f030485a775eba86e30eba", "filename": "gcc/config.gcc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d399ae674b67725d39ada360cda4cc668a4a6af0/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d399ae674b67725d39ada360cda4cc668a4a6af0/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=d399ae674b67725d39ada360cda4cc668a4a6af0", "patch": "@@ -673,8 +673,6 @@ arm*-*-netbsd*)\n arm*-*-linux*)\t\t\t# ARM GNU/Linux with ELF\n \ttm_file=\"dbxelf.h elfos.h linux.h arm/elf.h arm/linux-gas.h arm/linux-elf.h\" \n \ttmake_file=\"${tmake_file} t-linux arm/t-arm\"\n-\textra_parts=\"crtbegin.o crtbeginS.o crtend.o crtendS.o\"\n-\tgnu_ld=yes\n \tcase ${target} in\n \tarm*-*-linux-gnueabi)\n \t    tm_file=\"$tm_file arm/bpabi.h arm/linux-eabi.h\""}, {"sha": "15354e5ba0d63bc9c018e2d329340209b9294e99", "filename": "gcc/config/arm/linux-elf.h", "status": "modified", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d399ae674b67725d39ada360cda4cc668a4a6af0/gcc%2Fconfig%2Farm%2Flinux-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d399ae674b67725d39ada360cda4cc668a4a6af0/gcc%2Fconfig%2Farm%2Flinux-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Flinux-elf.h?ref=d399ae674b67725d39ada360cda4cc668a4a6af0", "patch": "@@ -28,9 +28,6 @@\n #undef  TARGET_VERSION\n #define TARGET_VERSION  fputs (\" (ARM GNU/Linux with ELF)\", stderr);\n \n-/* Do not assume anything about header files.  */\n-#define NO_IMPLICIT_EXTERN_C\n-\n #undef  TARGET_DEFAULT_FLOAT_ABI\n #define TARGET_DEFAULT_FLOAT_ABI ARM_FLOAT_ABI_HARD\n \n@@ -45,10 +42,6 @@\n #define MULTILIB_DEFAULTS \\\n \t{ \"marm\", \"mlittle-endian\", \"mhard-float\", \"mno-thumb-interwork\" }\n \n-/* The GNU C++ standard library requires that these macros be defined.  */\n-#undef CPLUSPLUS_CPP_SPEC\n-#define CPLUSPLUS_CPP_SPEC \"-D_GNU_SOURCE %(cpp)\"\n-\n /* Now we define the strings used to build the spec file.  */\n #undef  LIB_SPEC\n #define LIB_SPEC \\\n@@ -58,29 +51,6 @@\n \n #define LIBGCC_SPEC \"%{msoft-float:-lfloat} %{mfloat-abi=soft*:-lfloat} -lgcc\"\n \n-/* Provide a STARTFILE_SPEC appropriate for GNU/Linux.  Here we add\n-   the GNU/Linux magical crtbegin.o file (see crtstuff.c) which\n-   provides part of the support for getting C++ file-scope static\n-   object constructed before entering `main'.  */\n-   \n-#undef  STARTFILE_SPEC\n-#define STARTFILE_SPEC \\\n-  \"%{!shared: \\\n-     %{pg:gcrt1.o%s} %{!pg:%{p:gcrt1.o%s} \\\n-\t\t       %{!p:%{profile:gcrt1.o%s} \\\n-\t\t\t %{!profile:crt1.o%s}}}} \\\n-   crti.o%s %{!shared:crtbegin.o%s} %{shared:crtbeginS.o%s}\"\n-\n-/* Provide a ENDFILE_SPEC appropriate for GNU/Linux.  Here we tack on\n-   the GNU/Linux magical crtend.o file (see crtstuff.c) which\n-   provides part of the support for getting C++ file-scope static\n-   object constructed before entering `main', followed by a normal\n-   GNU/Linux \"finalizer\" file, `crtn.o'.  */\n-\n-#undef  ENDFILE_SPEC\n-#define ENDFILE_SPEC \\\n-  \"%{!shared:crtend.o%s} %{shared:crtendS.o%s} crtn.o%s\"\n-\n #define LINUX_TARGET_INTERPRETER \"/lib/ld-linux.so.2\"\n \n #define LINUX_TARGET_LINK_SPEC  \"%{h*} %{version:-v} \\\n@@ -139,14 +109,3 @@\n \n /* The GNU/Linux profiler needs a frame pointer.  */\n #define SUBTARGET_FRAME_POINTER_REQUIRED current_function_profile\n-\n-#undef  CC1_SPEC\n-#define CC1_SPEC \"%{profile:-p}\"\n-\n-#define LINK_GCC_C_SEQUENCE_SPEC \\\n-  \"%{static:--start-group} %G %L %{static:--end-group}%{!static:%G}\"\n-\n-/* Use --as-needed -lgcc_s for eh support.  */\n-#ifdef HAVE_LD_AS_NEEDED\n-#define USE_LD_AS_NEEDED 1\n-#endif"}, {"sha": "5e8d94d7a28fcc0d7b90bbd62b8065b3677db2ef", "filename": "gcc/config/arm/t-linux-eabi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d399ae674b67725d39ada360cda4cc668a4a6af0/gcc%2Fconfig%2Farm%2Ft-linux-eabi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d399ae674b67725d39ada360cda4cc668a4a6af0/gcc%2Fconfig%2Farm%2Ft-linux-eabi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-linux-eabi?ref=d399ae674b67725d39ada360cda4cc668a4a6af0", "patch": "@@ -5,3 +5,10 @@ TARGET_LIBGCC2_CFLAGS = -fPIC\n # CLEAR_INSN_CACHE in linux-gas.h does not work in Thumb mode.\n MULTILIB_OPTIONS\t=\n MULTILIB_DIRNAMES\t=\n+\n+# Use a version of div0 which raises SIGFPE.\n+LIB1ASMFUNCS := $(filter-out _dvmd_tls,$(LIB1ASMFUNCS)) _dvmd_lnx\n+\n+# Multilib the standard Linux files.  Don't include crti.o or crtn.o,\n+# which are provided by glibc.\n+EXTRA_MULTILIB_PARTS=crtbegin.o crtend.o crtbeginS.o crtendS.o crtbeginT.o"}, {"sha": "9f112cddaa28c62ea0b9664ea9ba640ea5398247", "filename": "gcc/config/arm/uclinux-elf.h", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d399ae674b67725d39ada360cda4cc668a4a6af0/gcc%2Fconfig%2Farm%2Fuclinux-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d399ae674b67725d39ada360cda4cc668a4a6af0/gcc%2Fconfig%2Farm%2Fuclinux-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fuclinux-elf.h?ref=d399ae674b67725d39ada360cda4cc668a4a6af0", "patch": "@@ -28,3 +28,47 @@\n \n #undef  TARGET_DEFAULT\n #define TARGET_DEFAULT (MASK_SINGLE_PIC_BASE)\n+\n+/* NOTE: The remaining definitions in this file are needed because uclinux\n+   does not use config/linux.h.  */\n+\n+/* Do not assume anything about header files.  */\n+#define NO_IMPLICIT_EXTERN_C\n+\n+/* The GNU C++ standard library requires that these macros be defined.  */\n+#undef CPLUSPLUS_CPP_SPEC\n+#define CPLUSPLUS_CPP_SPEC \"-D_GNU_SOURCE %(cpp)\"\n+\n+/* Provide a STARTFILE_SPEC appropriate for GNU/Linux.  Here we add\n+   the GNU/Linux magical crtbegin.o file (see crtstuff.c) which\n+   provides part of the support for getting C++ file-scope static\n+   object constructed before entering `main'.  */\n+\n+#undef  STARTFILE_SPEC\n+#define STARTFILE_SPEC \\\n+  \"%{!shared: \\\n+     %{pg:gcrt1.o%s} %{!pg:%{p:gcrt1.o%s} \\\n+\t\t       %{!p:%{profile:gcrt1.o%s} \\\n+\t\t\t %{!profile:crt1.o%s}}}} \\\n+   crti.o%s %{!shared:crtbegin.o%s} %{shared:crtbeginS.o%s}\"\n+\n+/* Provide a ENDFILE_SPEC appropriate for GNU/Linux.  Here we tack on\n+   the GNU/Linux magical crtend.o file (see crtstuff.c) which\n+   provides part of the support for getting C++ file-scope static\n+   object constructed before entering `main', followed by a normal\n+   GNU/Linux \"finalizer\" file, `crtn.o'.  */\n+\n+#undef  ENDFILE_SPEC\n+#define ENDFILE_SPEC \\\n+  \"%{!shared:crtend.o%s} %{shared:crtendS.o%s} crtn.o%s\"\n+\n+#undef  CC1_SPEC\n+#define CC1_SPEC \"%{profile:-p}\"\n+\n+#define LINK_GCC_C_SEQUENCE_SPEC \\\n+  \"%{static:--start-group} %G %L %{static:--end-group}%{!static:%G}\"\n+\n+/* Use --as-needed -lgcc_s for eh support.  */\n+#ifdef HAVE_LD_AS_NEEDED\n+#define USE_LD_AS_NEEDED 1\n+#endif"}]}