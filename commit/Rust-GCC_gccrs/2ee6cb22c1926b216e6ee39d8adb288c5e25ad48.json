{"sha": "2ee6cb22c1926b216e6ee39d8adb288c5e25ad48", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmVlNmNiMjJjMTkyNmIyMTZlNmVlMzlkOGFkYjI4OGM1ZTI1YWQ0OA==", "commit": {"author": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2019-01-23T08:16:11Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2019-01-23T08:16:11Z"}, "message": "[nvptx, libgomp] Fix map_push\n\nThe map field of a struct ptx_stream is a FIFO.  The FIFO is implemented as a\nsingle linked list, with pop-from-the-front semantics.\n\nThe function map_pop pops an element, either by:\n- deallocating the element, if there is more than one element\n- or marking the element inactive, if there's only one element\n\nThe responsibility of map_push is to push an element to the back, as well as\nselecting the element to push, by:\n- allocating an element, or\n- reusing the element at the front if inactive and big enough, or\n- dropping the element at the front if inactive and not big enough, and\n  allocating one that's big enough\n\nThe current implemention gets at least the first and most basic scenario wrong:\n\n> map = cuda_map_create (size);\n\nWe create an element, and assign it to map.\n\n> for (t = s->map; t->next != NULL; t = t->next)\n>   ;\n\nWe determine the last element in the fifo.\n\n> t->next = map;\n\nWe append the new element.\n\n> s->map = map;\n\nBut here, we throw away the rest of the FIFO, and declare the FIFO to be just\nthe new element.\n\nThis problem causes the test-case asyncwait-1.c to fail intermittently on some\nsystems.  The pr87835.c test-case added here is a a minimized and modified\nversion of asyncwait-1.c (avoiding the kernel construct) that is more likely to\nfail.\n\nFix this by rewriting map_pop more robustly, by:\n- seperating the function in two phases: select element, push element\n- when reusing or dropping an element, making sure that the element is cleanly\n  popped from the queue\n- rewriting the push element part in such a way that it can handle all cases\n  without needing if statements, such that each line is exercised for each of\n  the three cases.\n\n2019-01-23  Tom de Vries  <tdevries@suse.de>\n\n\tPR target/87835\n\t* plugin/plugin-nvptx.c (map_push): Fix adding of allocated element.\n\t* testsuite/libgomp.oacc-c-c++-common/pr87835.c: New test.\n\nFrom-SVN: r268176", "tree": {"sha": "b6100d50d21f3c4a49216e299a5acead273fcc08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6100d50d21f3c4a49216e299a5acead273fcc08"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ee6cb22c1926b216e6ee39d8adb288c5e25ad48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ee6cb22c1926b216e6ee39d8adb288c5e25ad48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ee6cb22c1926b216e6ee39d8adb288c5e25ad48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ee6cb22c1926b216e6ee39d8adb288c5e25ad48/comments", "author": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c262f6b77cd8c2ae996109d39324f22a69654a30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c262f6b77cd8c2ae996109d39324f22a69654a30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c262f6b77cd8c2ae996109d39324f22a69654a30"}], "stats": {"total": 115, "additions": 97, "deletions": 18}, "files": [{"sha": "5d13262c3985f86ca286b399e58a8fd73e3827c3", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee6cb22c1926b216e6ee39d8adb288c5e25ad48/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee6cb22c1926b216e6ee39d8adb288c5e25ad48/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=2ee6cb22c1926b216e6ee39d8adb288c5e25ad48", "patch": "@@ -1,3 +1,9 @@\n+2019-01-23  Tom de Vries  <tdevries@suse.de>\n+\n+\tPR target/87835\n+\t* plugin/plugin-nvptx.c (map_push): Fix adding of allocated element.\n+\t* testsuite/libgomp.oacc-c-c++-common/pr87835.c: New test.\n+\n 2019-01-15  Tom de Vries  <tdevries@suse.de>\n \n \tPR target/80547"}, {"sha": "a220560b189605d95c424c482c159d9a1cb4d8f1", "filename": "libgomp/plugin/plugin-nvptx.c", "status": "modified", "additions": 29, "deletions": 18, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee6cb22c1926b216e6ee39d8adb288c5e25ad48/libgomp%2Fplugin%2Fplugin-nvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee6cb22c1926b216e6ee39d8adb288c5e25ad48/libgomp%2Fplugin%2Fplugin-nvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fplugin%2Fplugin-nvptx.c?ref=2ee6cb22c1926b216e6ee39d8adb288c5e25ad48", "patch": "@@ -296,35 +296,46 @@ map_pop (struct ptx_stream *s)\n static CUdeviceptr\n map_push (struct ptx_stream *s, size_t size)\n {\n-  struct cuda_map *map = NULL, *t = NULL;\n+  struct cuda_map *map = NULL;\n+  struct cuda_map **t;\n \n   assert (s);\n   assert (s->map);\n \n-  /* Each PTX stream requires a separate data region to store the\n-     launch arguments for cuLaunchKernel.  Allocate a new\n-     cuda_map and push it to the end of the list.  */\n+  /* Select an element to push.  */\n   if (s->map->active)\n+    map = cuda_map_create (size);\n+  else\n     {\n-      map = cuda_map_create (size);\n+      /* Pop the inactive front element.  */\n+      struct cuda_map *pop = s->map;\n+      s->map = pop->next;\n+      pop->next = NULL;\n \n-      for (t = s->map; t->next != NULL; t = t->next)\n-\t;\n+      if (pop->size < size)\n+\t{\n+\t  cuda_map_destroy (pop);\n \n-      t->next = map;\n-    }\n-  else if (s->map->size < size)\n-    {\n-      cuda_map_destroy (s->map);\n-      map = cuda_map_create (size);\n+\t  map = cuda_map_create (size);\n+\t}\n+      else\n+\tmap = pop;\n     }\n-  else\n-    map = s->map;\n \n-  s->map = map;\n-  s->map->active = true;\n+  /* Check that the element is as expected.  */\n+  assert (map->next == NULL);\n+  assert (!map->active);\n+\n+  /* Mark the element active.  */\n+  map->active = true;\n+\n+  /* Push the element to the back of the list.  */\n+  for (t = &s->map; (*t) != NULL; t = &(*t)->next)\n+    ;\n+  assert (t != NULL && *t == NULL);\n+  *t = map;\n \n-  return s->map->d;\n+  return map->d;\n }\n \n /* Target data function launch information.  */"}, {"sha": "310a485e74f0082dbc22b46ed23662fbfd00d31c", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/pr87835.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee6cb22c1926b216e6ee39d8adb288c5e25ad48/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr87835.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee6cb22c1926b216e6ee39d8adb288c5e25ad48/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr87835.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr87835.c?ref=2ee6cb22c1926b216e6ee39d8adb288c5e25ad48", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-do run { target openacc_nvidia_accel_selected } } */\n+/* { dg-additional-options \"-lcuda\" } */\n+\n+#include <openacc.h>\n+#include <stdlib.h>\n+#include \"cuda.h\"\n+\n+#include <stdio.h>\n+\n+#define n 128\n+\n+int\n+main (void)\n+{\n+  CUresult r;\n+  CUstream stream1;\n+  int N = n;\n+  int a[n];\n+  int b[n];\n+  int c[n];\n+\n+  acc_init (acc_device_nvidia);\n+\n+  r = cuStreamCreate (&stream1, CU_STREAM_NON_BLOCKING);\n+  if (r != CUDA_SUCCESS)\n+    {\n+      fprintf (stderr, \"cuStreamCreate failed: %d\\n\", r);\n+      abort ();\n+    }\n+\n+  acc_set_cuda_stream (1, stream1);\n+\n+  for (int i = 0; i < n; i++)\n+    {\n+      a[i] = 3;\n+      c[i] = 0;\n+    }\n+\n+#pragma acc data copy (a, b, c) copyin (N)\n+  {\n+#pragma acc parallel async (1)\n+    ;\n+\n+#pragma acc parallel async (1) num_gangs (320)\n+    #pragma loop gang\n+    for (int ii = 0; ii < N; ii++)\n+      c[ii] = (a[ii] + a[N - ii - 1]);\n+\n+#pragma acc parallel async (1)\n+    #pragma acc loop seq\n+    for (int ii = 0; ii < n; ii++)\n+      a[ii] = 6;\n+\n+#pragma acc wait (1)\n+  }\n+\n+  for (int i = 0; i < n; i++)\n+    if (c[i] != 6)\n+      abort ();\n+\n+  return 0;\n+}"}]}