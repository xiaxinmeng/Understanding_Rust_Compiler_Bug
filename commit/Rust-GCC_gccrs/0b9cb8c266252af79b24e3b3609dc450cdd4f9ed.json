{"sha": "0b9cb8c266252af79b24e3b3609dc450cdd4f9ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGI5Y2I4YzI2NjI1MmFmNzliMjRlM2IzNjA5ZGM0NTBjZGQ0ZjllZA==", "commit": {"author": {"name": "Volker Reichelt", "email": "reichelt@igpm.rwth-aachen.de", "date": "2006-06-23T17:02:38Z"}, "committer": {"name": "Volker Reichelt", "email": "reichelt@gcc.gnu.org", "date": "2006-06-23T17:02:38Z"}, "message": "re PR c++/28112 (ICE with invalid argument in attribute)\n\n\tPR c++/28112\n\t* parser.c (cp_parser_attribute_list): Skip attributes with invalid\n\targuments.  Fix comment.\n\n\t* g++.dg/ext/attrib23.C: New test.\n\nFrom-SVN: r114941", "tree": {"sha": "f585bfa75f5fb97d8fa3960a27839b602972dd58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f585bfa75f5fb97d8fa3960a27839b602972dd58"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b9cb8c266252af79b24e3b3609dc450cdd4f9ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b9cb8c266252af79b24e3b3609dc450cdd4f9ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b9cb8c266252af79b24e3b3609dc450cdd4f9ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b9cb8c266252af79b24e3b3609dc450cdd4f9ed/comments", "author": null, "committer": null, "parents": [{"sha": "e10e3ac826f20ce1ea8560ccc083b4fdb1070eea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e10e3ac826f20ce1ea8560ccc083b4fdb1070eea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e10e3ac826f20ce1ea8560ccc083b4fdb1070eea"}], "stats": {"total": 41, "additions": 32, "deletions": 9}, "files": [{"sha": "76ed3a0abba778f7f11e4f685b73d33faecd04eb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b9cb8c266252af79b24e3b3609dc450cdd4f9ed/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b9cb8c266252af79b24e3b3609dc450cdd4f9ed/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0b9cb8c266252af79b24e3b3609dc450cdd4f9ed", "patch": "@@ -1,5 +1,9 @@\n 2006-06-23  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n+\tPR c++/28112\n+\t* parser.c (cp_parser_attribute_list): Skip attributes with invalid\n+\targuments.  Fix comment.\n+\n \tPR c++/11468\n \t* init.c (build_new_1): Handle error_mark_nodes returned by\n \tbuild_java_class_ref."}, {"sha": "deb36fe9e52e44c60ca777348223dd93b9879112", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b9cb8c266252af79b24e3b3609dc450cdd4f9ed/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b9cb8c266252af79b24e3b3609dc450cdd4f9ed/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=0b9cb8c266252af79b24e3b3609dc450cdd4f9ed", "patch": "@@ -14614,6 +14614,8 @@ cp_parser_attribute_list (cp_parser* parser)\n       if (token->type == CPP_NAME\n \t  || token->type == CPP_KEYWORD)\n \t{\n+\t  tree arguments = NULL_TREE;\n+\n \t  /* Consume the token.  */\n \t  token = cp_lexer_consume_token (parser->lexer);\n \n@@ -14627,18 +14629,19 @@ cp_parser_attribute_list (cp_parser* parser)\n \t  /* If it's an `(', then parse the attribute arguments.  */\n \t  if (token->type == CPP_OPEN_PAREN)\n \t    {\n-\t      tree arguments;\n-\n-\t      arguments = (cp_parser_parenthesized_expression_list\n-\t\t\t   (parser, true, /*cast_p=*/false,\n-\t\t\t    /*non_constant_p=*/NULL));\n-\t      /* Save the identifier and arguments away.  */\n+\t      arguments = cp_parser_parenthesized_expression_list\n+\t\t\t  (parser, true, /*cast_p=*/false,\n+\t\t\t   /*non_constant_p=*/NULL);\n+\t      /* Save the arguments away.  */\n \t      TREE_VALUE (attribute) = arguments;\n \t    }\n \n-\t  /* Add this attribute to the list.  */\n-\t  TREE_CHAIN (attribute) = attribute_list;\n-\t  attribute_list = attribute;\n+\t  if (arguments != error_mark_node)\n+\t    {\n+\t      /* Add this attribute to the list.  */\n+\t      TREE_CHAIN (attribute) = attribute_list;\n+\t      attribute_list = attribute;\n+\t    }\n \n \t  token = cp_lexer_peek_token (parser->lexer);\n \t}"}, {"sha": "70264d945453644ab2faed6f171a4703f6955bda", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b9cb8c266252af79b24e3b3609dc450cdd4f9ed/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b9cb8c266252af79b24e3b3609dc450cdd4f9ed/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0b9cb8c266252af79b24e3b3609dc450cdd4f9ed", "patch": "@@ -1,3 +1,8 @@\n+2006-06-23  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n+\n+\tPR c++/28112\n+\t* g++.dg/ext/attrib23.C: New test.\n+\n 2006-06-23  Olivier Hainque  <hainque@adacore.com>\n \n \t* gnat.dg/varsize_temp.adb: New test."}, {"sha": "0a2c58689e25597876981f87a2dd2043095ce67f", "filename": "gcc/testsuite/g++.dg/ext/attrib23.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b9cb8c266252af79b24e3b3609dc450cdd4f9ed/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib23.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b9cb8c266252af79b24e3b3609dc450cdd4f9ed/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib23.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib23.C?ref=0b9cb8c266252af79b24e3b3609dc450cdd4f9ed", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/28112\n+// { dg-do compile }\n+\n+int i       __attribute__((init_priority(;)));  // { dg-error \"before\" }\n+int j       __attribute__((vector_size(;)));    // { dg-error \"before\" }\n+int k       __attribute__((visibility(;)));     // { dg-error \"before\" }\n+struct A {} __attribute__((aligned(;)));        // { dg-error \"before\" }\n+struct B {} __attribute__((mode(;)));           // { dg-error \"before\" }\n+void foo()  __attribute__((alias(;)));          // { dg-error \"before\" }\n+void bar()  __attribute__((nonnull(;)));        // { dg-error \"before\" }\n+void baz()  __attribute__((section(;)));        // { dg-error \"before\" }"}]}