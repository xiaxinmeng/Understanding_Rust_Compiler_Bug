{"sha": "0508bed7ffc2de0ccfebf7bde414a31f3062a21a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDUwOGJlZDdmZmMyZGUwY2NmZWJmN2JkZTQxNGEzMWYzMDYyYTIxYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2010-03-03T07:02:37Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-03-03T07:02:37Z"}, "message": "re PR debug/43237 (Wrong DW_AT_upper_bound)\n\n\tPR debug/43237\n\t* dwarf2out.c (add_bound_info): If a decl bound doesn't have decl_die,\n\tfallthrough to default handling, just with want_address 0 instead of 2.\n\tFor single element lists, add_AT_loc directly, otherwise create an\n\tartificial variable DIE and stick location list to it.\n\n\t* gcc.dg/debug/dwarf2/pr43237.c: New test.\n\nFrom-SVN: r157190", "tree": {"sha": "afb0e26639839ea21093a386287bf92eb2634e8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/afb0e26639839ea21093a386287bf92eb2634e8d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0508bed7ffc2de0ccfebf7bde414a31f3062a21a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0508bed7ffc2de0ccfebf7bde414a31f3062a21a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0508bed7ffc2de0ccfebf7bde414a31f3062a21a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0508bed7ffc2de0ccfebf7bde414a31f3062a21a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "db51bb34401c8984f410afab38634daaaf68453c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db51bb34401c8984f410afab38634daaaf68453c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db51bb34401c8984f410afab38634daaaf68453c"}], "stats": {"total": 66, "additions": 54, "deletions": 12}, "files": [{"sha": "e31d206d27f8472df30fea1a7e18b834b23cddb4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0508bed7ffc2de0ccfebf7bde414a31f3062a21a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0508bed7ffc2de0ccfebf7bde414a31f3062a21a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0508bed7ffc2de0ccfebf7bde414a31f3062a21a", "patch": "@@ -1,5 +1,11 @@\n 2010-03-03  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR debug/43237\n+\t* dwarf2out.c (add_bound_info): If a decl bound doesn't have decl_die,\n+\tfallthrough to default handling, just with want_address 0 instead of 2.\n+\tFor single element lists, add_AT_loc directly, otherwise create an\n+\tartificial variable DIE and stick location list to it.\n+\n \tPR debug/43177\n \t* var-tracking.c (loc_cmp): Don't assert VALUEs have the same mode.\n \t(VAL_EXPR_HAS_REVERSE): Define."}, {"sha": "25951194f5760d150dd8a823927c437466803687", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0508bed7ffc2de0ccfebf7bde414a31f3062a21a/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0508bed7ffc2de0ccfebf7bde414a31f3062a21a/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=0508bed7ffc2de0ccfebf7bde414a31f3062a21a", "patch": "@@ -16275,6 +16275,8 @@ add_comp_dir_attribute (dw_die_ref die)\n static void\n add_bound_info (dw_die_ref subrange_die, enum dwarf_attribute bound_attr, tree bound)\n {\n+  int want_address = 2;\n+\n   switch (TREE_CODE (bound))\n     {\n     case ERROR_MARK:\n@@ -16324,22 +16326,20 @@ add_bound_info (dw_die_ref subrange_die, enum dwarf_attribute bound_attr, tree b\n     case RESULT_DECL:\n       {\n \tdw_die_ref decl_die = lookup_decl_die (bound);\n-\tdw_loc_list_ref loc;\n \n \t/* ??? Can this happen, or should the variable have been bound\n \t   first?  Probably it can, since I imagine that we try to create\n \t   the types of parameters in the order in which they exist in\n \t   the list, and won't have created a forward reference to a\n \t   later parameter.  */\n \tif (decl_die != NULL)\n-\t  add_AT_die_ref (subrange_die, bound_attr, decl_die);\n-\telse\n \t  {\n-\t    loc = loc_list_from_tree (bound, 0);\n-\t    add_AT_location_description (subrange_die, bound_attr, loc);\n+\t    add_AT_die_ref (subrange_die, bound_attr, decl_die);\n+\t    break;\n \t  }\n-\tbreak;\n+\twant_address = 0;\n       }\n+      /* FALLTHRU */\n \n     default:\n       {\n@@ -16349,10 +16349,16 @@ add_bound_info (dw_die_ref subrange_die, enum dwarf_attribute bound_attr, tree b\n \tdw_die_ref ctx, decl_die;\n \tdw_loc_list_ref list;\n \n-\tlist = loc_list_from_tree (bound, 2);\n+\tlist = loc_list_from_tree (bound, want_address);\n \tif (list == NULL)\n \t  break;\n \n+\tif (single_element_loc_list_p (list))\n+\t  {\n+\t    add_AT_loc (subrange_die, bound_attr, list->expr);\n+\t    break;\n+\t  }\n+\n \tif (current_function_decl == 0)\n \t  ctx = comp_unit_die;\n \telse\n@@ -16361,11 +16367,7 @@ add_bound_info (dw_die_ref subrange_die, enum dwarf_attribute bound_attr, tree b\n \tdecl_die = new_die (DW_TAG_variable, ctx, bound);\n \tadd_AT_flag (decl_die, DW_AT_artificial, 1);\n \tadd_type_attribute (decl_die, TREE_TYPE (bound), 1, 0, ctx);\n-\tif (list->dw_loc_next)\n-\t  add_AT_loc_list (decl_die, DW_AT_location, list);\n-\telse\n-\t  add_AT_loc (decl_die, DW_AT_location, list->expr);\n-\n+\tadd_AT_location_description (decl_die, DW_AT_location, list);\n \tadd_AT_die_ref (subrange_die, bound_attr, decl_die);\n \tbreak;\n       }"}, {"sha": "6e53f48b9cb6a7f5d05f52bdfc6c6316702011e1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0508bed7ffc2de0ccfebf7bde414a31f3062a21a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0508bed7ffc2de0ccfebf7bde414a31f3062a21a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0508bed7ffc2de0ccfebf7bde414a31f3062a21a", "patch": "@@ -1,5 +1,8 @@\n 2010-03-03  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR debug/43237\n+\t* gcc.dg/debug/dwarf2/pr43237.c: New test.\n+\n \tPR debug/43177\n \t* gcc.dg/guality/pr43177.c: New test.\n "}, {"sha": "21262c3b210c048a77c6658913d4b3514ff54723", "filename": "gcc/testsuite/gcc.dg/debug/dwarf2/pr43237.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0508bed7ffc2de0ccfebf7bde414a31f3062a21a/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fpr43237.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0508bed7ffc2de0ccfebf7bde414a31f3062a21a/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fpr43237.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fpr43237.c?ref=0508bed7ffc2de0ccfebf7bde414a31f3062a21a", "patch": "@@ -0,0 +1,31 @@\n+/* PR debug/43237 */\n+/* { dg-do compile } */\n+/* { dg-options \"-g -O2 -dA -fno-merge-debug-strings\" } */\n+\n+struct S\n+{\n+  int *a;\n+  int b;\n+  int **c;\n+  int d;\n+};\n+\n+void foo (struct S *);\n+void bar (struct S *);\n+\n+int\n+baz (void)\n+{\n+  struct S s;\n+  foo (&s);\n+  {\n+    int a[s.b];\n+    int *c[s.d];\n+    s.a = a;\n+    s.c = c;\n+    bar (&s);\n+  }\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-not \"LLST\\[^\\\\r\\\\n\\]*DW_AT_upper_bound\" } } */"}]}