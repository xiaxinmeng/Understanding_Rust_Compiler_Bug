{"sha": "54b9e939534d857498abbbfc2d1bea8bf308b404", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTRiOWU5Mzk1MzRkODU3NDk4YWJiYmZjMmQxYmVhOGJmMzA4YjQwNA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2006-05-02T15:04:52Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2006-05-02T15:04:52Z"}, "message": "re PR target/27387 (Thumb thunk is not PIC)\n\ngcc/\n\tPR target/27387\n\t* arm.c (arm_output_mi_thunk): Use pc-relative addressing when\n\t-mthumb -fPIC are used.\n\ntestsuite/\n\tPR target/27387\n\t* gcc.target/arm/arm.exp: New.\n\t* gcc.target/arm/pr27387.C: Likewise.\n\nFrom-SVN: r113467", "tree": {"sha": "f3e6209af7c13308785d0c6fc4658a40b20a763e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3e6209af7c13308785d0c6fc4658a40b20a763e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54b9e939534d857498abbbfc2d1bea8bf308b404", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54b9e939534d857498abbbfc2d1bea8bf308b404", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54b9e939534d857498abbbfc2d1bea8bf308b404", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54b9e939534d857498abbbfc2d1bea8bf308b404/comments", "author": null, "committer": null, "parents": [{"sha": "613e2ac8d3dc830f03c00b165ffcf85b96717240", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/613e2ac8d3dc830f03c00b165ffcf85b96717240", "html_url": "https://github.com/Rust-GCC/gccrs/commit/613e2ac8d3dc830f03c00b165ffcf85b96717240"}], "stats": {"total": 112, "additions": 111, "deletions": 1}, "files": [{"sha": "f1f4e9f4059638afc2172ff3367a5a435431ba3e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54b9e939534d857498abbbfc2d1bea8bf308b404/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54b9e939534d857498abbbfc2d1bea8bf308b404/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=54b9e939534d857498abbbfc2d1bea8bf308b404", "patch": "@@ -1,3 +1,9 @@\n+2006-05-02  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\tPR target/27387\n+\t* arm.c (arm_output_mi_thunk): Use pc-relative addressing when\n+\t-mthumb -fPIC are used.\n+\n 2006-05-02  Joshua Kinard  <kumba@gentoo.org>\n \n \tPR target/25871"}, {"sha": "9438b7c25ae4f506a986db5c4bea3fec013128f7", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54b9e939534d857498abbbfc2d1bea8bf308b404/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54b9e939534d857498abbbfc2d1bea8bf308b404/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=54b9e939534d857498abbbfc2d1bea8bf308b404", "patch": "@@ -14701,6 +14701,7 @@ arm_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n {\n   static int thunk_label = 0;\n   char label[256];\n+  char labelpc[256];\n   int mi_delta = delta;\n   const char *const mi_op = mi_delta < 0 ? \"sub\" : \"add\";\n   int shift = 0;\n@@ -14715,6 +14716,23 @@ arm_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n       fputs (\"\\tldr\\tr12, \", file);\n       assemble_name (file, label);\n       fputc ('\\n', file);\n+      if (flag_pic)\n+\t{\n+\t  /* If we are generating PIC, the ldr instruction below loads\n+\t     \"(target - 7) - .LTHUNKPCn\" into r12.  The pc reads as\n+\t     the address of the add + 8, so we have:\n+\n+\t     r12 = (target - 7) - .LTHUNKPCn + (.LTHUNKPCn + 8)\n+\t         = target + 1.\n+\n+\t     Note that we have \"+ 1\" because some versions of GNU ld\n+\t     don't set the low bit of the result for R_ARM_REL32\n+\t     relocations against thumb function symbols.  */\n+\t  ASM_GENERATE_INTERNAL_LABEL (labelpc, \"LTHUNKPC\", labelno);\n+\t  assemble_name (file, labelpc);\n+\t  fputs (\":\\n\", file);\n+\t  fputs (\"\\tadd\\tr12, pc, r12\\n\", file);\n+\t}\n     }\n   while (mi_delta != 0)\n     {\n@@ -14735,7 +14753,20 @@ arm_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n       ASM_OUTPUT_ALIGN (file, 2);\n       assemble_name (file, label);\n       fputs (\":\\n\", file);\n-      assemble_integer (XEXP (DECL_RTL (function), 0), 4, BITS_PER_WORD, 1);\n+      if (flag_pic)\n+\t{\n+\t  /* Output \".word .LTHUNKn-7-.LTHUNKPCn\".  */\n+\t  rtx tem = XEXP (DECL_RTL (function), 0);\n+\t  tem = gen_rtx_PLUS (GET_MODE (tem), tem, GEN_INT (-7));\n+\t  tem = gen_rtx_MINUS (GET_MODE (tem),\n+\t\t\t       tem,\n+\t\t\t       gen_rtx_SYMBOL_REF (Pmode,\n+\t\t\t\t\t\t   ggc_strdup (labelpc)));\n+\t  assemble_integer (tem, 4, BITS_PER_WORD, 1);\n+\t}\n+      else\n+\t/* Output \".word .LTHUNKn\".  */\n+\tassemble_integer (XEXP (DECL_RTL (function), 0), 4, BITS_PER_WORD, 1);\n     }\n   else\n     {"}, {"sha": "eb2eab460c5c46c41dbc55371bef19ef784c9915", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54b9e939534d857498abbbfc2d1bea8bf308b404/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54b9e939534d857498abbbfc2d1bea8bf308b404/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=54b9e939534d857498abbbfc2d1bea8bf308b404", "patch": "@@ -1,3 +1,9 @@\n+2006-05-02  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\tPR target/27387\n+\t* gcc.target/arm/arm.exp: New.\n+\t* gcc.target/arm/pr27387.C: Likewise.\n+\n 2006-05-02 Paul Thomas <pault@gcc.gnu.org>\n \n         PR fortran/27269"}, {"sha": "7f4958e92acc69154cbb325316278a2b6d2f8eaa", "filename": "gcc/testsuite/gcc.target/arm/arm.exp", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54b9e939534d857498abbbfc2d1bea8bf308b404/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Farm.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54b9e939534d857498abbbfc2d1bea8bf308b404/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Farm.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Farm.exp?ref=54b9e939534d857498abbbfc2d1bea8bf308b404", "patch": "@@ -0,0 +1,41 @@\n+# Copyright (C) 1997, 2004, 2006 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  \n+\n+# GCC testsuite that uses the `dg.exp' driver.\n+\n+# Exit immediately if this isn't an ARM target.\n+if ![istarget arm*-*-*] then {\n+  return\n+}\n+\n+# Load support procs.\n+load_lib gcc-dg.exp\n+\n+# If a testcase doesn't have special options, use these.\n+global DEFAULT_CFLAGS\n+if ![info exists DEFAULT_CFLAGS] then {\n+    set DEFAULT_CFLAGS \" -ansi -pedantic-errors\"\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Main loop.\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\\[cCS\\]]] \\\n+\t\"\" $DEFAULT_CFLAGS\n+\n+# All done.\n+dg-finish"}, {"sha": "5ffce10ba110ff90137832f4cab61380920d7db1", "filename": "gcc/testsuite/gcc.target/arm/pr90000.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54b9e939534d857498abbbfc2d1bea8bf308b404/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr90000.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54b9e939534d857498abbbfc2d1bea8bf308b404/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr90000.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr90000.C?ref=54b9e939534d857498abbbfc2d1bea8bf308b404", "patch": "@@ -0,0 +1,26 @@\n+/* PR target/90000\n+   We used to generate a non-PIC thunk on thumb even with -fPIC.\n+   Make sure that won't happen anymore.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm32 } */\n+/* { dg-options \"-mthumb -fPIC\" } */\n+\n+struct A {\n+  virtual void f ();\n+};\n+\n+struct B {\n+  virtual void g ();\n+};\n+\n+struct C : public A, public B {\n+  virtual void g();\n+};\n+\n+void\n+C::g()\n+{\n+}\n+\n+/* { dg-final { scan-assembler \"LTHUNKPC\" } } */"}]}