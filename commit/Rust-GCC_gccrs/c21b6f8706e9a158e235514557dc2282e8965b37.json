{"sha": "c21b6f8706e9a158e235514557dc2282e8965b37", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzIxYjZmODcwNmU5YTE1OGUyMzU1MTQ1NTdkYzIyODJlODk2NWIzNw==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2001-03-25T00:16:58Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2001-03-25T00:16:58Z"}, "message": "acinclude.m4 (GLIBCPP_CHECK_COMPILER_FEATURES): Update comment.\n\n2001-03-24  Phil Edwards  <pme@sources.redhat.com>\n\n\t* acinclude.m4 (GLIBCPP_CHECK_COMPILER_FEATURES):  Update comment.\n\t* src/Makefile.am:  Replace leading spaces with tabs on continuation\n\tlines.\n\t* aclocal.m4:  Regenerated.\n\t* configure:  Ditto.\n\t* Makefile.in:  Ditto.\n\t* src/Makefile.in:  Ditto.\n\t* libio/Makefile.in:  Ditto.\n\t* libmath/Makefile.in:  Ditto.\n\t* libsupc++/Makefile.in:  Ditto.\n\nFrom-SVN: r40822", "tree": {"sha": "36d06e8c97dee144c255f0a27c96a776aac23e2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36d06e8c97dee144c255f0a27c96a776aac23e2d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c21b6f8706e9a158e235514557dc2282e8965b37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c21b6f8706e9a158e235514557dc2282e8965b37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c21b6f8706e9a158e235514557dc2282e8965b37", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c21b6f8706e9a158e235514557dc2282e8965b37/comments", "author": null, "committer": null, "parents": [{"sha": "537286a2db3be62bb4c9bee97895d33e0c518c9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/537286a2db3be62bb4c9bee97895d33e0c518c9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/537286a2db3be62bb4c9bee97895d33e0c518c9f"}], "stats": {"total": 2076, "additions": 1148, "deletions": 928}, "files": [{"sha": "0ba1bd3db4340d25310e31930d72dbd661226784", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21b6f8706e9a158e235514557dc2282e8965b37/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21b6f8706e9a158e235514557dc2282e8965b37/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c21b6f8706e9a158e235514557dc2282e8965b37", "patch": "@@ -1,3 +1,16 @@\n+2001-03-24  Phil Edwards  <pme@sources.redhat.com>\n+\n+\t* acinclude.m4 (GLIBCPP_CHECK_COMPILER_FEATURES):  Update comment.\n+\t* src/Makefile.am:  Replace leading spaces with tabs on continuation\n+\tlines.\n+\t* aclocal.m4:  Regenerated.\n+\t* configure:  Ditto.\n+\t* Makefile.in:  Ditto.\n+\t* src/Makefile.in:  Ditto.\n+\t* libio/Makefile.in:  Ditto.\n+\t* libmath/Makefile.in:  Ditto.\n+\t* libsupc++/Makefile.in:  Ditto.\n+\n 2001-03-24  Phil Edwards  <pme@sources.redhat.com>\n \n \t* docs/html/19_diagnostics/howto.html:  HTML fixup.  Describe"}, {"sha": "ab8c5d40a4a78204d99a32e379ba0cd0291849b3", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21b6f8706e9a158e235514557dc2282e8965b37/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21b6f8706e9a158e235514557dc2282e8965b37/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=c21b6f8706e9a158e235514557dc2282e8965b37", "patch": "@@ -134,7 +134,48 @@ MULTICLEAN = true\n # Work around what appears to be a GNU make bug handling MAKEFLAGS\n # values defined in terms of make variables, as is the case for CC and\n # friends when we are called from the top level Makefile.\n-AM_MAKEFLAGS =  \t\"AR_FLAGS=$(AR_FLAGS)\" \t\"CC_FOR_BUILD=$(CC_FOR_BUILD)\" \t\"CC_FOR_TARGET=$(CC_FOR_TARGET)\" \t\"CFLAGS=$(CFLAGS)\" \t\"CXXFLAGS=$(CXXFLAGS)\" \t\"CFLAGS_FOR_BUILD=$(CFLAGS_FOR_BUILD)\" \t\"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)\" \t\"INSTALL=$(INSTALL)\" \t\"INSTALL_DATA=$(INSTALL_DATA)\" \t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \t\"INSTALL_SCRIPT=$(INSTALL_SCRIPT)\" \t\"LDFLAGS=$(LDFLAGS)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"LIBCFLAGS_FOR_TARGET=$(LIBCFLAGS_FOR_TARGET)\" \t\"MAKE=$(MAKE)\" \t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"PICFLAG_FOR_TARGET=$(PICFLAG_FOR_TARGET)\" \t\"SHELL=$(SHELL)\" \t\"EXPECT=$(EXPECT)\" \t\"RUNTEST=$(RUNTEST)\" \t\"RUNTESTFLAGS=$(RUNTESTFLAGS)\" \t\"exec_prefix=$(exec_prefix)\" \t\"infodir=$(infodir)\" \t\"libdir=$(libdir)\" \t\"includedir=$(includedir)\" \t\"prefix=$(prefix)\" \t\"tooldir=$(tooldir)\" \t\"AR=$(AR)\" \t\"AS=$(AS)\" \t\"CC=$(CC)\" \t\"CXX=$(CXX)\" \t\"LD=$(LD)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"RANLIB=$(RANLIB)\" \t\"NM=$(NM)\" \t\"NM_FOR_BUILD=$(NM_FOR_BUILD)\" \t\"NM_FOR_TARGET=$(NM_FOR_TARGET)\" \t\"DESTDIR=$(DESTDIR)\" \t\"WERROR=$(WERROR)\" \n+AM_MAKEFLAGS = \\\n+\t\"AR_FLAGS=$(AR_FLAGS)\" \\\n+\t\"CC_FOR_BUILD=$(CC_FOR_BUILD)\" \\\n+\t\"CC_FOR_TARGET=$(CC_FOR_TARGET)\" \\\n+\t\"CFLAGS=$(CFLAGS)\" \\\n+\t\"CXXFLAGS=$(CXXFLAGS)\" \\\n+\t\"CFLAGS_FOR_BUILD=$(CFLAGS_FOR_BUILD)\" \\\n+\t\"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)\" \\\n+\t\"INSTALL=$(INSTALL)\" \\\n+\t\"INSTALL_DATA=$(INSTALL_DATA)\" \\\n+\t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \\\n+\t\"INSTALL_SCRIPT=$(INSTALL_SCRIPT)\" \\\n+\t\"LDFLAGS=$(LDFLAGS)\" \\\n+\t\"LIBCFLAGS=$(LIBCFLAGS)\" \\\n+\t\"LIBCFLAGS_FOR_TARGET=$(LIBCFLAGS_FOR_TARGET)\" \\\n+\t\"MAKE=$(MAKE)\" \\\n+\t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \\\n+\t\"PICFLAG=$(PICFLAG)\" \\\n+\t\"PICFLAG_FOR_TARGET=$(PICFLAG_FOR_TARGET)\" \\\n+\t\"SHELL=$(SHELL)\" \\\n+\t\"EXPECT=$(EXPECT)\" \\\n+\t\"RUNTEST=$(RUNTEST)\" \\\n+\t\"RUNTESTFLAGS=$(RUNTESTFLAGS)\" \\\n+\t\"exec_prefix=$(exec_prefix)\" \\\n+\t\"infodir=$(infodir)\" \\\n+\t\"libdir=$(libdir)\" \\\n+\t\"includedir=$(includedir)\" \\\n+\t\"prefix=$(prefix)\" \\\n+\t\"tooldir=$(tooldir)\" \\\n+\t\"AR=$(AR)\" \\\n+\t\"AS=$(AS)\" \\\n+\t\"CC=$(CC)\" \\\n+\t\"CXX=$(CXX)\" \\\n+\t\"LD=$(LD)\" \\\n+\t\"LIBCFLAGS=$(LIBCFLAGS)\" \\\n+\t\"PICFLAG=$(PICFLAG)\" \\\n+\t\"RANLIB=$(RANLIB)\" \\\n+\t\"NM=$(NM)\" \\\n+\t\"NM_FOR_BUILD=$(NM_FOR_BUILD)\" \\\n+\t\"NM_FOR_TARGET=$(NM_FOR_TARGET)\" \\\n+\t\"DESTDIR=$(DESTDIR)\" \\\n+\t\"WERROR=$(WERROR)\" \n \n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n CONFIG_HEADER = config.h"}, {"sha": "c3b3a06ac438935b550dee0e502c07d73ca5b23a", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21b6f8706e9a158e235514557dc2282e8965b37/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21b6f8706e9a158e235514557dc2282e8965b37/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=c21b6f8706e9a158e235514557dc2282e8965b37", "patch": "@@ -178,7 +178,8 @@ dnl new inlining code or the new system_header pragma will die on -Werror.\n dnl Leave it out by default and use maint-mode to use it.\n dnl\n dnl Define SECTION_FLAGS='-ffunction-sections -fdata-sections' if\n-dnl compiler supports it.  \n+dnl compiler supports it and the user has not requested debug mode.\n+dnl\n dnl GLIBCPP_CHECK_COMPILER_FEATURES\n AC_DEFUN(GLIBCPP_CHECK_COMPILER_FEATURES, [\n   # All these tests are for C++; save the language and the compiler flags."}, {"sha": "b215cba1d64b46e427bf634644a8885bb16f9fc5", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21b6f8706e9a158e235514557dc2282e8965b37/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21b6f8706e9a158e235514557dc2282e8965b37/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=c21b6f8706e9a158e235514557dc2282e8965b37", "patch": "@@ -190,7 +190,8 @@ dnl new inlining code or the new system_header pragma will die on -Werror.\n dnl Leave it out by default and use maint-mode to use it.\n dnl\n dnl Define SECTION_FLAGS='-ffunction-sections -fdata-sections' if\n-dnl compiler supports it.  \n+dnl compiler supports it and the user has not requested debug mode.\n+dnl\n dnl GLIBCPP_CHECK_COMPILER_FEATURES\n AC_DEFUN(GLIBCPP_CHECK_COMPILER_FEATURES, [\n   # All these tests are for C++; save the language and the compiler flags."}, {"sha": "4737318aa5fb3173b9a8974568152db08d76e5b0", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 880, "deletions": 859, "changes": 1739, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21b6f8706e9a158e235514557dc2282e8965b37/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21b6f8706e9a158e235514557dc2282e8965b37/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=c21b6f8706e9a158e235514557dc2282e8965b37"}, {"sha": "2f1f8cfb73679666ac7ddd432af69de053577ffb", "filename": "libstdc++-v3/libio/Makefile.in", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21b6f8706e9a158e235514557dc2282e8965b37/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21b6f8706e9a158e235514557dc2282e8965b37/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FMakefile.in?ref=c21b6f8706e9a158e235514557dc2282e8965b37", "patch": "@@ -110,7 +110,7 @@ toplevel_srcdir = @toplevel_srcdir@\n AUTOMAKE_OPTIONS = 1.3 cygnus\n \n mkinstalldirs = $(SHELL) $(toplevel_srcdir)/mkinstalldirs\n-@GLIBCPP_BUILD_LIBIO_TRUE@noinst_LTLIBRARIES = libio.la\n+@GLIBCPP_BUILD_LIBIO_TRUE@noinst_LTLIBRARIES = @GLIBCPP_BUILD_LIBIO_TRUE@libio.la\n @GLIBCPP_BUILD_LIBIO_FALSE@noinst_LTLIBRARIES = \n \n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n@@ -122,14 +122,21 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n \n-INCLUDES =  \t-nostdinc++ \t-I$(top_builddir)/include -I$(GLIBCPP_INCLUDE_DIR) \t$(LIBIO_INCLUDES) $(TOPLEVEL_INCLUDES)\t\n+INCLUDES = \\\n+\t-nostdinc++ \\\n+\t-I$(top_builddir)/include -I$(GLIBCPP_INCLUDE_DIR) \\\n+\t$(LIBIO_INCLUDES) $(TOPLEVEL_INCLUDES)\t\n \n \n-libio_headers =          libio.h libioP.h iolibio.h\n+libio_headers = \\\n+        libio.h libioP.h iolibio.h\n \n-@GLIBCPP_NEED_LIBIO_TRUE@LIBIO_SRCS = \tfiledoalloc.c genops.c fileops.c stdfiles.c c_codecvt.c \tiofclose.c iofopen.c \n+@GLIBCPP_NEED_LIBIO_TRUE@LIBIO_SRCS = @GLIBCPP_NEED_LIBIO_TRUE@\\\n+@GLIBCPP_NEED_LIBIO_TRUE@\tfiledoalloc.c genops.c fileops.c stdfiles.c c_codecvt.c \\\n+@GLIBCPP_NEED_LIBIO_TRUE@\tiofclose.c iofopen.c \n @GLIBCPP_NEED_LIBIO_FALSE@LIBIO_SRCS = \n-@GLIBCPP_NEED_WLIBIO_TRUE@LIBIO_WSRCS = \twfiledoalloc.c wfileops.c wgenops.c iofwide.c\n+@GLIBCPP_NEED_WLIBIO_TRUE@LIBIO_WSRCS = @GLIBCPP_NEED_WLIBIO_TRUE@\\\n+@GLIBCPP_NEED_WLIBIO_TRUE@\twfiledoalloc.c wfileops.c wgenops.c iofwide.c\n @GLIBCPP_NEED_WLIBIO_FALSE@LIBIO_WSRCS = \n \n EXTRA_DIST = iostreamP.h"}, {"sha": "94ba3c2286a562443751bc6cf05a94e5299e3892", "filename": "libstdc++-v3/libmath/Makefile.in", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21b6f8706e9a158e235514557dc2282e8965b37/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21b6f8706e9a158e235514557dc2282e8965b37/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in?ref=c21b6f8706e9a158e235514557dc2282e8965b37", "patch": "@@ -113,18 +113,24 @@ mkinstalldirs = $(SHELL) $(toplevel_srcdir)/mkinstalldirs\n \n noinst_LTLIBRARIES = libmath.la\n \n-EXTRA_LONG_DOUBLE_yes =  \thypotl.c signbitl.c\n+EXTRA_LONG_DOUBLE_yes = \\\n+\thypotl.c signbitl.c\n \n \n-EXTRA_DIST =  \thypot.c hypotf.c atan2f.c expf.c \t$(EXTRA_LONG_DOUBLE_yes) \n+EXTRA_DIST = \\\n+\thypot.c hypotf.c atan2f.c expf.c \\\n+\t$(EXTRA_LONG_DOUBLE_yes) \n \n \n-libmath_la_LIBADD =  \t@LIBMATHOBJS@ \t$(EXTRA_LONG_DOUBLE_$(USE_COMPLEX_LONG_DOUBLE)) \n+libmath_la_LIBADD = \\\n+\t@LIBMATHOBJS@ \\\n+\t$(EXTRA_LONG_DOUBLE_$(USE_COMPLEX_LONG_DOUBLE)) \n \n \n libmath_la_DEPENDENCIES = $(libmath_la_LIBADD)\n \n-libmath_la_SOURCES =  \tsignbit.c signbitf.c\n+libmath_la_SOURCES = \\\n+\tsignbit.c signbitf.c\n \n \n LINK = $(LIBTOOL) --mode=link \"$(CCLD)\" $(AM_CFLAGS) $(CFLAGS) $(LDFLAGS) -o $@\n@@ -138,7 +144,9 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n \n-INCLUDES =  \t-I$(GLIBCPP_INCLUDE_DIR) -I$(top_builddir)/include  \t$(TOPLEVEL_INCLUDES) \n+INCLUDES = \\\n+\t-I$(GLIBCPP_INCLUDE_DIR) -I$(top_builddir)/include  \\\n+\t$(TOPLEVEL_INCLUDES) \n \n CONFIG_HEADER = ../config.h\n CONFIG_CLEAN_FILES = "}, {"sha": "1bfff7929b4d76aaf79fab5ced733e37e78ac73e", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 36, "deletions": 8, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21b6f8706e9a158e235514557dc2282e8965b37/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21b6f8706e9a158e235514557dc2282e8965b37/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=c21b6f8706e9a158e235514557dc2282e8965b37", "patch": "@@ -127,11 +127,13 @@ OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n # These bits are all figured out from configure. Look in acinclude.m4\n # or configure.in to see how they are set. See GLIBCPP_EXPORT_FLAGS\n # NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n-CONFIG_CXXFLAGS =  \t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n+CONFIG_CXXFLAGS = \\\n+\t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n \n \n # Warning flags to use.\n-WARN_CXXFLAGS =  \t@WARN_FLAGS@ $(WERROR) -fdiagnostics-show-location=once\n+WARN_CXXFLAGS = \\\n+\t@WARN_FLAGS@ $(WERROR) -fdiagnostics-show-location=once\n \n \n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n@@ -143,13 +145,31 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n \n-INCLUDES =  \t-I$(toplevel_srcdir)/gcc -I$(toplevel_srcdir)/include \t-I$(GLIBCPP_INCLUDE_DIR) $(CSTD_INCLUDES) -I$(top_builddir)/include \t $(LIBSUPCXX_INCLUDES)\n+INCLUDES = \\\n+\t-I$(toplevel_srcdir)/gcc -I$(toplevel_srcdir)/include \\\n+\t-I$(GLIBCPP_INCLUDE_DIR) $(CSTD_INCLUDES) -I$(top_builddir)/include \\\n+\t $(LIBSUPCXX_INCLUDES)\n \n \n-headers =  \texception new typeinfo cxxabi.h exception_defines.h \n+headers = \\\n+\texception new typeinfo cxxabi.h exception_defines.h \n \n \n-sources =  \tdel_op.cc \tdel_opnt.cc \tdel_opv.cc \tdel_opvnt.cc \texception_support.cc \tnew_handler.cc \tnew_op.cc \tnew_opnt.cc \tnew_opv.cc \tnew_opvnt.cc \tpure.cc \ttinfo.cc \ttinfo2.cc \tvec.cc\n+sources = \\\n+\tdel_op.cc \\\n+\tdel_opnt.cc \\\n+\tdel_opv.cc \\\n+\tdel_opvnt.cc \\\n+\texception_support.cc \\\n+\tnew_handler.cc \\\n+\tnew_op.cc \\\n+\tnew_opnt.cc \\\n+\tnew_opv.cc \\\n+\tnew_opvnt.cc \\\n+\tpure.cc \\\n+\ttinfo.cc \\\n+\ttinfo2.cc \\\n+\tvec.cc\n \n \n libsupc___la_SOURCES = $(sources)\n@@ -167,7 +187,12 @@ LIBSUPCXX_CXXFLAGS = -prefer-pic\n # set this option because CONFIG_CXXFLAGS has to be after\n # OPTIMIZE_CXXFLAGS on the compile line so that -O2 can be overridden\n # as the occasion call for it. (ie, --enable-debug)\n-AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS) \t$(OPTIMIZE_CXXFLAGS) \t$(CONFIG_CXXFLAGS) \n+AM_CXXFLAGS = \\\n+\t-fno-implicit-templates \\\n+\t$(LIBSUPCXX_CXXFLAGS) \\\n+\t$(WARN_CXXFLAGS) \\\n+\t$(OPTIMIZE_CXXFLAGS) \\\n+\t$(CONFIG_CXXFLAGS) \n \n \n # libstdc++ libtool notes\n@@ -191,14 +216,17 @@ AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS)\n #\n # We have to put --tag disable-shared after --tag CXX lest things\n # CXX undo the affect of disable-shared.\n-LTCXXCOMPILE = $(LIBTOOL) --tag CXX --tag disable-shared                --mode=compile $(CXX) $(INCLUDES) \t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n+LTCXXCOMPILE = $(LIBTOOL) --tag CXX --tag disable-shared \\\n+               --mode=compile $(CXX) $(INCLUDES) \\\n+\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n \n \n # 3) We have a problem when building the shared libstdc++ object if\n # the rules automake generates would be used.  We cannot allow CXX to\n # be used in libtool since this would add -lstdc++ to the link line\n # which of course is problematic at this point.\n-CXXLINK = $(LIBTOOL) --mode=link \"$(CC)\" \t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n+CXXLINK = $(LIBTOOL) --mode=link \"$(CC)\" \\\n+\t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n \n CONFIG_HEADER = ../config.h\n CONFIG_CLEAN_FILES = "}, {"sha": "1c486bac8a6885795d68ddf2773d0cc1923df1ca", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21b6f8706e9a158e235514557dc2282e8965b37/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21b6f8706e9a158e235514557dc2282e8965b37/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=c21b6f8706e9a158e235514557dc2282e8965b37", "patch": "@@ -21,7 +21,7 @@\n ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n ## USA.\n \n-## $Id: Makefile.am,v 1.76 2001/03/01 00:37:18 bkoz Exp $\n+## $Id: Makefile.am,v 1.77 2001/03/02 21:38:26 bkoz Exp $\n \n AUTOMAKE_OPTIONS = 1.3 gnits\n MAINT_CHARSET = latin1\n@@ -60,7 +60,7 @@ INCLUDES = \\\n \t-nostdinc++ \\\n \t-I$(GLIBCPP_INCLUDE_DIR) $(CSTD_INCLUDES) -I$(top_builddir)/include \\\n \t$(LIBSUPCXX_INCLUDES) $(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) \\\n-\t$(TOPLEVEL_INCLUDES)\t\n+\t$(TOPLEVEL_INCLUDES)\n \n base_headers = \\\n \tbits/cpp_type_traits.h bits/char_traits.h bits/codecvt.h \\\n@@ -165,7 +165,7 @@ build_headers = \\\n sources = \\\n \tlimitsMEMBERS.cc \\\n \tstdexcept.cc functexcept.cc bitset.cc \\\n-        globals.cc \\\n+\tglobals.cc \\\n \tbasic_file.cc ios.cc complex_io.cc strstream.cc \\\n \tc++locale.cc locale.cc localename.cc codecvt.cc \\\n \tlocale-inst.cc stl-inst.cc misc-inst.cc valarray-inst.cc \\\n@@ -205,7 +205,7 @@ endif\n $(libstdc___la_OBJECTS): $(CSHADOW_H)\n \n $(top_builddir)/stamp-cshadow: $(top_srcdir)/mkinclosure \\\n-                               $(top_srcdir)/mkcshadow\n+\t                       $(top_srcdir)/mkcshadow\n \t$(top_srcdir)/mkinclosure \\\n \t\"-I $(top_builddir)/../../gcc/include -I /usr/include -G fcntl.h unistd.h\" | $(top_srcdir)/mkcshadow;\n \trm -f  $(top_builddir)/stamp-cshadow \n@@ -248,33 +248,34 @@ c_incdir = @C_INCLUDE_DIR@\n myinstallheaders: \n \tif test -z \"$(MULTISUBDIR)\"; then \\\n \tfor i in $(base_headers); do \\\n-        echo \"$(INSTALL_DATA) $(src_incdir)/$$i $(gxx_include_dir)/bits/\"; \\\n+\techo \"$(INSTALL_DATA) $(src_incdir)/$$i $(gxx_include_dir)/bits/\"; \\\n \t  $(INSTALL_DATA) $(src_incdir)/$$i $(gxx_include_dir)/bits/; \\\n \tdone; \\\n \tfor i in $(ext_headers); do \\\n-        echo \"$(INSTALL_DATA) $(src_incdir)/$$i $(gxx_include_dir)/ext/\"; \\\n+\techo \"$(INSTALL_DATA) $(src_incdir)/$$i $(gxx_include_dir)/ext/\"; \\\n \t  $(INSTALL_DATA) $(src_incdir)/$$i $(gxx_include_dir)/ext/; \\\n \tdone; \\\n \tfor i in $(backward_headers); do \\\n-        echo \"$(INSTALL_DATA) $(src_incdir)/$$i $(gxx_include_dir)\"; \\\n+\techo \"$(INSTALL_DATA) $(src_incdir)/$$i $(gxx_include_dir)\"; \\\n \t  $(INSTALL_DATA) $(src_incdir)/$$i $(gxx_include_dir); \\\n \tdone; \\\n \tfor i in $(c_base_headers); do \\\n-        echo \"$(INSTALL_DATA) $(c_incdir)/$$i $(gxx_include_dir)/bits/\"; \\\n+\techo \"$(INSTALL_DATA) $(c_incdir)/$$i $(gxx_include_dir)/bits/\"; \\\n \t  $(INSTALL_DATA) $(c_incdir)/$$i $(gxx_include_dir)/bits/; \\\n \tdone; \\\n \tfor i in $(std_headers); do \\\n \techo \"$(INSTALL_DATA) $(src_incdir)/std/$$i $(gxx_include_dir)\";\\\n \t  $(INSTALL_DATA) $(src_incdir)/std/$$i $(gxx_include_dir); \\\n \tdone; \\\n \tfor i in $(build_headers); do \\\n-    echo \"$(INSTALL_DATA) $(bld_incdir)/$$i $(gxx_target_include_dir)/bits/\"; \\\n-\t  $(INSTALL_DATA) $(bld_incdir)/$$i $(gxx_target_include_dir)/bits/; \\\n+\techo \"$(INSTALL_DATA) $(bld_incdir)/$$i \\\n+\t  $(gxx_target_include_dir)/bits/\"; $(INSTALL_DATA) \\\n+\t  $(bld_incdir)/$$i $(gxx_target_include_dir)/bits/; \\\n \tdone; \\\n \tlibio_headers_install='$(libio_headers)'; \\\n \tfor i in $$libio_headers_install; do \\\n-        echo \"$(INSTALL_DATA) $$i $(gxx_include_dir)\"; \\\n-          $(INSTALL_DATA) $$i $(gxx_include_dir); \\\n+\techo \"$(INSTALL_DATA) $$i $(gxx_include_dir)\"; \\\n+\t  $(INSTALL_DATA) $$i $(gxx_include_dir); \\\n \tdone; \\\n \tfi;\n "}, {"sha": "8486367b690cecb6657ff2e9c09cb1f90bdb911c", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 135, "deletions": 36, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c21b6f8706e9a158e235514557dc2282e8965b37/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c21b6f8706e9a158e235514557dc2282e8965b37/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=c21b6f8706e9a158e235514557dc2282e8965b37", "patch": "@@ -120,11 +120,13 @@ OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n # These bits are all figured out from configure. Look in acinclude.m4\n # or configure.in to see how they are set. See GLIBCPP_EXPORT_FLAGS\n # NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n-CONFIG_CXXFLAGS =  \t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n+CONFIG_CXXFLAGS = \\\n+\t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n \n \n # Warning flags to use.\n-WARN_CXXFLAGS =  \t@WARN_FLAGS@ $(WERROR) -fdiagnostics-show-location=once\n+WARN_CXXFLAGS = \\\n+\t@WARN_FLAGS@ $(WERROR) -fdiagnostics-show-location=once\n \n \n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n@@ -136,44 +138,133 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n \n-INCLUDES =  \t-nostdinc++ \t-I$(GLIBCPP_INCLUDE_DIR) $(CSTD_INCLUDES) -I$(top_builddir)/include \t$(LIBSUPCXX_INCLUDES) $(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) \t$(TOPLEVEL_INCLUDES)\t\n-\n-\n-base_headers =  \tbits/cpp_type_traits.h bits/char_traits.h bits/codecvt.h \tbits/stringfwd.h bits/std_string.h bits/basic_string.h \tbits/basic_string.tcc \tbits/generic_shadow.h bits/std_utility.h \tbits/std_complex.h \tbits/valarray_array.h bits/valarray_array.tcc bits/valarray_meta.h \tbits/std_valarray.h bits/mask_array.h bits/slice.h bits/slice_array.h \tbits/gslice.h bits/gslice_array.h bits/indirect_array.h \tbits/std_fstream.h bits/std_iomanip.h \tbits/ios_base.h bits/fpos.h bits/basic_ios.h bits/basic_ios.tcc \tbits/std_ios.h bits/std_iosfwd.h bits/std_iostream.h \tbits/std_istream.h bits/istream.tcc bits/std_locale.h \tbits/fstream.tcc bits/ostream.tcc bits/sbuf_iter.h bits/sstream.tcc \tbits/std_ostream.h bits/std_sstream.h bits/std_streambuf.h \tbits/streambuf.tcc bits/basic_file.h \tbits/locale_facets.h bits/locale_facets.tcc bits/localefwd.h \tbits/stl_pthread_alloc.h bits/pthread_allocimpl.h \tbits/stl_threads.h bits/stl_iterator_base.h \tbits/std_bitset.h bits/std_deque.h bits/std_functional.h \tbits/std_iterator.h bits/std_list.h \tbits/std_map.h bits/std_memory.h bits/std_numeric.h \tbits/std_queue.h bits/std_set.h bits/std_stack.h \tbits/std_stdexcept.h bits/functexcept.h bits/std_vector.h \tbits/stl_algo.h bits/stl_algobase.h bits/stl_alloc.h \tbits/stl_deque.h bits/stl_function.h \tbits/stl_heap.h bits/stl_iterator.h bits/stl_list.h bits/stl_map.h \tbits/stl_multimap.h bits/stl_multiset.h bits/stl_numeric.h \tbits/stl_pair.h bits/stl_queue.h bits/stl_raw_storage_iter.h \tbits/stl_relops.h bits/stl_set.h \tbits/stl_stack.h bits/stl_tempbuf.h \tbits/stl_tree.h bits/stl_uninitialized.h bits/stl_vector.h \tbits/type_traits.h bits/std_algorithm.h \tbits/concept_checks.h bits/container_concepts.h \tbits/sequence_concepts.h bits/stl_construct.h\n-\n-\n-backward_headers =  \tbackward/complex.h backward/iomanip.h backward/istream.h \tbackward/ostream.h backward/stream.h backward/streambuf.h \tbackward/algo.h backward/algobase.h backward/alloc.h \tbackward/bvector.h backward/defalloc.h backward/deque.h \tbackward/function.h backward/hash_map.h backward/hash_set.h \tbackward/hashtable.h backward/heap.h backward/iterator.h \tbackward/list.h backward/map.h backward/multimap.h backward/new.h \tbackward/multiset.h backward/pair.h backward/iostream.h \tbackward/rope.h backward/set.h backward/slist.h backward/stack.h \tbackward/tempbuf.h backward/tree.h backward/vector.h \tbackward/fstream.h backward/strstream.h backward/strstream\n-\n-\n-ext_headers =  \text/ropeimpl.h ext/stl_rope.h \text/stl_bvector.h ext/stl_hashtable.h ext/stl_hash_fun.h \text/hash_map ext/hash_set ext/rope ext/slist \text/tree ext/bvector \n-\n-\n-c_base_headers =  \tbits/std_cassert.h bits/std_cctype.h bits/std_cerrno.h \tbits/std_cfloat.h bits/std_climits.h bits/std_clocale.h \tbits/std_cmath.h bits/std_csetjmp.h bits/std_csignal.h \tbits/std_cstdarg.h bits/std_cstddef.h bits/std_cstdio.h \tbits/std_cstdlib.h bits/std_cstring.h bits/std_ctime.h \tbits/std_cwchar.h bits/std_cwctype.h bits/cmath.tcc\n-\n-@GLIBCPP_USE_CSHADOW_TRUE@c_shadow_headers = \tassert.h ctype.h errno.h float.h limits.h locale.h math.h setjmp.h \tsignal.h stdarg.h stddef.h stdio.h stdlib.h string.h time.h wchar.h \twctype.h fcntl.h libio.h iolibio.h libioP.h pthread.h iconv.h \tfeatures.h langinfo.h \tbits/wrap_libio.h bits/wrap_iolibio.h bits/wrap_libioP.h \tbits/wrap_iconv.h bits/wrap_fcntl.h bits/wrap_pthread.h \tbits/wrap_features.h bits/wrap_langinfo.h \tsys/cdefs.h \n+INCLUDES = \\\n+\t-nostdinc++ \\\n+\t-I$(GLIBCPP_INCLUDE_DIR) $(CSTD_INCLUDES) -I$(top_builddir)/include \\\n+\t$(LIBSUPCXX_INCLUDES) $(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) \\\n+\t$(TOPLEVEL_INCLUDES)\n+\n+\n+base_headers = \\\n+\tbits/cpp_type_traits.h bits/char_traits.h bits/codecvt.h \\\n+\tbits/stringfwd.h bits/std_string.h bits/basic_string.h \\\n+\tbits/basic_string.tcc \\\n+\tbits/generic_shadow.h bits/std_utility.h \\\n+\tbits/std_complex.h \\\n+\tbits/valarray_array.h bits/valarray_array.tcc bits/valarray_meta.h \\\n+\tbits/std_valarray.h bits/mask_array.h bits/slice.h bits/slice_array.h \\\n+\tbits/gslice.h bits/gslice_array.h bits/indirect_array.h \\\n+\tbits/std_fstream.h bits/std_iomanip.h \\\n+\tbits/ios_base.h bits/fpos.h bits/basic_ios.h bits/basic_ios.tcc \\\n+\tbits/std_ios.h bits/std_iosfwd.h bits/std_iostream.h \\\n+\tbits/std_istream.h bits/istream.tcc bits/std_locale.h \\\n+\tbits/fstream.tcc bits/ostream.tcc bits/sbuf_iter.h bits/sstream.tcc \\\n+\tbits/std_ostream.h bits/std_sstream.h bits/std_streambuf.h \\\n+\tbits/streambuf.tcc bits/basic_file.h \\\n+\tbits/locale_facets.h bits/locale_facets.tcc bits/localefwd.h \\\n+\tbits/stl_pthread_alloc.h bits/pthread_allocimpl.h \\\n+\tbits/stl_threads.h bits/stl_iterator_base.h \\\n+\tbits/std_bitset.h bits/std_deque.h bits/std_functional.h \\\n+\tbits/std_iterator.h bits/std_list.h \\\n+\tbits/std_map.h bits/std_memory.h bits/std_numeric.h \\\n+\tbits/std_queue.h bits/std_set.h bits/std_stack.h \\\n+\tbits/std_stdexcept.h bits/functexcept.h bits/std_vector.h \\\n+\tbits/stl_algo.h bits/stl_algobase.h bits/stl_alloc.h \\\n+\tbits/stl_deque.h bits/stl_function.h \\\n+\tbits/stl_heap.h bits/stl_iterator.h bits/stl_list.h bits/stl_map.h \\\n+\tbits/stl_multimap.h bits/stl_multiset.h bits/stl_numeric.h \\\n+\tbits/stl_pair.h bits/stl_queue.h bits/stl_raw_storage_iter.h \\\n+\tbits/stl_relops.h bits/stl_set.h \\\n+\tbits/stl_stack.h bits/stl_tempbuf.h \\\n+\tbits/stl_tree.h bits/stl_uninitialized.h bits/stl_vector.h \\\n+\tbits/type_traits.h bits/std_algorithm.h \\\n+\tbits/concept_checks.h bits/container_concepts.h \\\n+\tbits/sequence_concepts.h bits/stl_construct.h\n+\n+\n+backward_headers = \\\n+\tbackward/complex.h backward/iomanip.h backward/istream.h \\\n+\tbackward/ostream.h backward/stream.h backward/streambuf.h \\\n+\tbackward/algo.h backward/algobase.h backward/alloc.h \\\n+\tbackward/bvector.h backward/defalloc.h backward/deque.h \\\n+\tbackward/function.h backward/hash_map.h backward/hash_set.h \\\n+\tbackward/hashtable.h backward/heap.h backward/iterator.h \\\n+\tbackward/list.h backward/map.h backward/multimap.h backward/new.h \\\n+\tbackward/multiset.h backward/pair.h backward/iostream.h \\\n+\tbackward/rope.h backward/set.h backward/slist.h backward/stack.h \\\n+\tbackward/tempbuf.h backward/tree.h backward/vector.h \\\n+\tbackward/fstream.h backward/strstream.h backward/strstream\n+\n+\n+ext_headers = \\\n+\text/ropeimpl.h ext/stl_rope.h \\\n+\text/stl_bvector.h ext/stl_hashtable.h ext/stl_hash_fun.h \\\n+\text/hash_map ext/hash_set ext/rope ext/slist \\\n+\text/tree ext/bvector \n+\n+\n+c_base_headers = \\\n+\tbits/std_cassert.h bits/std_cctype.h bits/std_cerrno.h \\\n+\tbits/std_cfloat.h bits/std_climits.h bits/std_clocale.h \\\n+\tbits/std_cmath.h bits/std_csetjmp.h bits/std_csignal.h \\\n+\tbits/std_cstdarg.h bits/std_cstddef.h bits/std_cstdio.h \\\n+\tbits/std_cstdlib.h bits/std_cstring.h bits/std_ctime.h \\\n+\tbits/std_cwchar.h bits/std_cwctype.h bits/cmath.tcc\n+\n+@GLIBCPP_USE_CSHADOW_TRUE@c_shadow_headers = @GLIBCPP_USE_CSHADOW_TRUE@\\\n+@GLIBCPP_USE_CSHADOW_TRUE@\tassert.h ctype.h errno.h float.h limits.h locale.h math.h setjmp.h \\\n+@GLIBCPP_USE_CSHADOW_TRUE@\tsignal.h stdarg.h stddef.h stdio.h stdlib.h string.h time.h wchar.h \\\n+@GLIBCPP_USE_CSHADOW_TRUE@\twctype.h fcntl.h libio.h iolibio.h libioP.h pthread.h iconv.h \\\n+@GLIBCPP_USE_CSHADOW_TRUE@\tfeatures.h langinfo.h \\\n+@GLIBCPP_USE_CSHADOW_TRUE@\tbits/wrap_libio.h bits/wrap_iolibio.h bits/wrap_libioP.h \\\n+@GLIBCPP_USE_CSHADOW_TRUE@\tbits/wrap_iconv.h bits/wrap_fcntl.h bits/wrap_pthread.h \\\n+@GLIBCPP_USE_CSHADOW_TRUE@\tbits/wrap_features.h bits/wrap_langinfo.h \\\n+@GLIBCPP_USE_CSHADOW_TRUE@\tsys/cdefs.h \n @GLIBCPP_USE_CSHADOW_FALSE@c_shadow_headers = \n \n-std_headers =  \talgorithm bitset complex deque fstream functional \tiomanip ios iosfwd iostream istream iterator limits list locale \tmap memory numeric ostream queue set sstream stack stdexcept \tstreambuf string utility valarray vector \tcassert cctype cerrno cfloat climits clocale ciso646 \tcmath csetjmp csignal cstdarg cstddef cstdio cstdlib \tcstring ctime cwchar cwctype\n-\n-@GLIBCPP_NEED_LIBIO_TRUE@libio_headers = \t$(top_srcdir)/libio/_G_config.h $(top_srcdir)/libio/libio.h\n+std_headers = \\\n+\talgorithm bitset complex deque fstream functional \\\n+\tiomanip ios iosfwd iostream istream iterator limits list locale \\\n+\tmap memory numeric ostream queue set sstream stack stdexcept \\\n+\tstreambuf string utility valarray vector \\\n+\tcassert cctype cerrno cfloat climits clocale ciso646 \\\n+\tcmath csetjmp csignal cstdarg cstddef cstdio cstdlib \\\n+\tcstring ctime cwchar cwctype\n+\n+@GLIBCPP_NEED_LIBIO_TRUE@libio_headers = @GLIBCPP_NEED_LIBIO_TRUE@\\\n+@GLIBCPP_NEED_LIBIO_TRUE@\t$(top_srcdir)/libio/_G_config.h $(top_srcdir)/libio/libio.h\n @GLIBCPP_NEED_LIBIO_FALSE@libio_headers = \n \n-build_headers =  \tbits/std_limits.h \tbits/c++config.h bits/c++io.h bits/c++locale.h bits/c++threads.h \tbits/basic_file_model.h \tbits/atomicity.h bits/os_defines.h \tbits/ctype_base.h bits/ctype_noninline.h bits/ctype_inline.h \n+build_headers = \\\n+\tbits/std_limits.h \\\n+\tbits/c++config.h bits/c++io.h bits/c++locale.h bits/c++threads.h \\\n+\tbits/basic_file_model.h \\\n+\tbits/atomicity.h bits/os_defines.h \\\n+\tbits/ctype_base.h bits/ctype_noninline.h bits/ctype_inline.h \n \n \n-sources =  \tlimitsMEMBERS.cc \tstdexcept.cc functexcept.cc bitset.cc         globals.cc \tbasic_file.cc ios.cc complex_io.cc strstream.cc \tc++locale.cc locale.cc localename.cc codecvt.cc \tlocale-inst.cc stl-inst.cc misc-inst.cc valarray-inst.cc \tstring-inst.cc wstring-inst.cc \n+sources = \\\n+\tlimitsMEMBERS.cc \\\n+\tstdexcept.cc functexcept.cc bitset.cc \\\n+\tglobals.cc \\\n+\tbasic_file.cc ios.cc complex_io.cc strstream.cc \\\n+\tc++locale.cc locale.cc localename.cc codecvt.cc \\\n+\tlocale-inst.cc stl-inst.cc misc-inst.cc valarray-inst.cc \\\n+\tstring-inst.cc wstring-inst.cc \n \n VPATH =  $(top_srcdir) $(top_srcdir)/src $(GLIBCPP_INCLUDE_DIR)  $(GLIBCPP_INCLUDE_DIR)/std $(C_INCLUDE_DIR)\n \n libstdc___la_SOURCES = $(sources)\n \n-libstdc___la_LIBADD =  \t../libmath/libmath.la @libio_la@ \t../libsupc++/libsupc++convenience.la\n+libstdc___la_LIBADD = \\\n+\t../libmath/libmath.la @libio_la@ \\\n+\t../libsupc++/libsupc++convenience.la\n \n \n libstdc___la_LDFLAGS = -version-info 3:0:0 -lm\n \n libstdc___la_DEPENDENCIES = $(libstdc___la_LIBADD)\n-@GLIBCPP_USE_CSHADOW_TRUE@CSHADOW_H = $(top_builddir)/stamp-cshadow\n+@GLIBCPP_USE_CSHADOW_TRUE@CSHADOW_H = @GLIBCPP_USE_CSHADOW_TRUE@$(top_builddir)/stamp-cshadow\n @GLIBCPP_USE_CSHADOW_FALSE@CSHADOW_H = \n \n # Check for various configure bits that change where the headers get installed.\n@@ -192,7 +283,12 @@ c_incdir = @C_INCLUDE_DIR@\n # set this option because CONFIG_CXXFLAGS has to be after\n # OPTIMIZE_CXXFLAGS on the compile line so that -O2 can be overridden\n # as the occasion call for it. (ie, --enable-debug)\n-AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS) \t$(OPTIMIZE_CXXFLAGS) \t$(CONFIG_CXXFLAGS) \n+AM_CXXFLAGS = \\\n+\t-fno-implicit-templates \\\n+\t$(LIBSUPCXX_CXXFLAGS) \\\n+\t$(WARN_CXXFLAGS) \\\n+\t$(OPTIMIZE_CXXFLAGS) \\\n+\t$(CONFIG_CXXFLAGS) \n \n \n # libstdc++ libtool notes\n@@ -213,14 +309,16 @@ AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS)\n # correct solution is to add `--tag CXX' to LTCXXCOMPILE and maybe\n # CXXLINK, just after $(LIBTOOL), so that libtool doesn't have to\n # attempt to infer which configuration to use\n-LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n+LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \\\n+\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n \n \n # 3) We have a problem when building the shared libstdc++ object if\n # the rules automake generates would be used.  We cannot allow CXX to\n # be used in libtool since this would add -lstdc++ to the link line\n # which of course is problematic at this point.\n-CXXLINK = $(LIBTOOL) --mode=link \"$(CC)\" \t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n+CXXLINK = $(LIBTOOL) --mode=link \"$(CC)\" \\\n+\t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n \n CONFIG_HEADER = ../config.h\n CONFIG_CLEAN_FILES = \n@@ -474,7 +572,7 @@ strstream.o: strstream.cc\n $(libstdc___la_OBJECTS): $(CSHADOW_H)\n \n $(top_builddir)/stamp-cshadow: $(top_srcdir)/mkinclosure \\\n-                               $(top_srcdir)/mkcshadow\n+\t                       $(top_srcdir)/mkcshadow\n \t$(top_srcdir)/mkinclosure \\\n \t\"-I $(top_builddir)/../../gcc/include -I /usr/include -G fcntl.h unistd.h\" | $(top_srcdir)/mkcshadow;\n \trm -f  $(top_builddir)/stamp-cshadow \n@@ -505,33 +603,34 @@ myinstalldirs:\n myinstallheaders: \n \tif test -z \"$(MULTISUBDIR)\"; then \\\n \tfor i in $(base_headers); do \\\n-        echo \"$(INSTALL_DATA) $(src_incdir)/$$i $(gxx_include_dir)/bits/\"; \\\n+\techo \"$(INSTALL_DATA) $(src_incdir)/$$i $(gxx_include_dir)/bits/\"; \\\n \t  $(INSTALL_DATA) $(src_incdir)/$$i $(gxx_include_dir)/bits/; \\\n \tdone; \\\n \tfor i in $(ext_headers); do \\\n-        echo \"$(INSTALL_DATA) $(src_incdir)/$$i $(gxx_include_dir)/ext/\"; \\\n+\techo \"$(INSTALL_DATA) $(src_incdir)/$$i $(gxx_include_dir)/ext/\"; \\\n \t  $(INSTALL_DATA) $(src_incdir)/$$i $(gxx_include_dir)/ext/; \\\n \tdone; \\\n \tfor i in $(backward_headers); do \\\n-        echo \"$(INSTALL_DATA) $(src_incdir)/$$i $(gxx_include_dir)\"; \\\n+\techo \"$(INSTALL_DATA) $(src_incdir)/$$i $(gxx_include_dir)\"; \\\n \t  $(INSTALL_DATA) $(src_incdir)/$$i $(gxx_include_dir); \\\n \tdone; \\\n \tfor i in $(c_base_headers); do \\\n-        echo \"$(INSTALL_DATA) $(c_incdir)/$$i $(gxx_include_dir)/bits/\"; \\\n+\techo \"$(INSTALL_DATA) $(c_incdir)/$$i $(gxx_include_dir)/bits/\"; \\\n \t  $(INSTALL_DATA) $(c_incdir)/$$i $(gxx_include_dir)/bits/; \\\n \tdone; \\\n \tfor i in $(std_headers); do \\\n \techo \"$(INSTALL_DATA) $(src_incdir)/std/$$i $(gxx_include_dir)\";\\\n \t  $(INSTALL_DATA) $(src_incdir)/std/$$i $(gxx_include_dir); \\\n \tdone; \\\n \tfor i in $(build_headers); do \\\n-    echo \"$(INSTALL_DATA) $(bld_incdir)/$$i $(gxx_target_include_dir)/bits/\"; \\\n-\t  $(INSTALL_DATA) $(bld_incdir)/$$i $(gxx_target_include_dir)/bits/; \\\n+\techo \"$(INSTALL_DATA) $(bld_incdir)/$$i \\\n+\t  $(gxx_target_include_dir)/bits/\"; $(INSTALL_DATA) \\\n+\t  $(bld_incdir)/$$i $(gxx_target_include_dir)/bits/; \\\n \tdone; \\\n \tlibio_headers_install='$(libio_headers)'; \\\n \tfor i in $$libio_headers_install; do \\\n-        echo \"$(INSTALL_DATA) $$i $(gxx_include_dir)\"; \\\n-          $(INSTALL_DATA) $$i $(gxx_include_dir); \\\n+\techo \"$(INSTALL_DATA) $$i $(gxx_include_dir)\"; \\\n+\t  $(INSTALL_DATA) $$i $(gxx_include_dir); \\\n \tdone; \\\n \tfi;\n "}]}