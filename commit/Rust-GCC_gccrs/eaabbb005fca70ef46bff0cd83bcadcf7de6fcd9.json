{"sha": "eaabbb005fca70ef46bff0cd83bcadcf7de6fcd9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWFhYmJiMDA1ZmNhNzBlZjQ2YmZmMGNkODNiY2FkY2Y3ZGU2ZmNkOQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2015-01-13T16:30:23Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2015-01-13T16:30:23Z"}, "message": "Option diff dump is added for target and optimization\n\n\t* ipa-icf.c (sem_function::equals_private): Call new functions\n\tcl_target_option_print_diff and cl_optimization_print_diff.\n\t* optc-save-gen.awk (cl_target_option_print_diff): New function.\n\t(cl_optimization_print_diff): Likewise.\n\t* opth-gen.awk: Likewise.\n\nM    gcc/ChangeLog\nM    gcc/ipa-icf.c\nM    gcc/optc-save-gen.awk\nM    gcc/opth-gen.awk\n\nFrom-SVN: r219542", "tree": {"sha": "5ae3dfcc068bf5bf59530ccfb7b0f1619f5d42e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ae3dfcc068bf5bf59530ccfb7b0f1619f5d42e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eaabbb005fca70ef46bff0cd83bcadcf7de6fcd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eaabbb005fca70ef46bff0cd83bcadcf7de6fcd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eaabbb005fca70ef46bff0cd83bcadcf7de6fcd9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eaabbb005fca70ef46bff0cd83bcadcf7de6fcd9/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ff8ebda16a00b9f745d213f72f57c27043e07f85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff8ebda16a00b9f745d213f72f57c27043e07f85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff8ebda16a00b9f745d213f72f57c27043e07f85"}], "stats": {"total": 159, "additions": 151, "deletions": 8}, "files": [{"sha": "01f6c6d6b91324835677d4fb0fb876e3cc6afb1b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaabbb005fca70ef46bff0cd83bcadcf7de6fcd9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaabbb005fca70ef46bff0cd83bcadcf7de6fcd9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eaabbb005fca70ef46bff0cd83bcadcf7de6fcd9", "patch": "@@ -1,3 +1,11 @@\n+2015-01-13  Martin Liska  <mliska@suse.cz>\n+\n+\t* ipa-icf.c (sem_function::equals_private): Call new functions\n+\tcl_target_option_print_diff and cl_optimization_print_diff.\n+\t* optc-save-gen.awk (cl_target_option_print_diff): New function.\n+\t(cl_optimization_print_diff): Likewise.\n+\t* opth-gen.awk: Likewise.\n+\n 2015-01-13  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/aarch64.md (subsi3, *subsi3_uxtw, subdi3)"}, {"sha": "fb3a18924db053c23df0d1d57c707423fc63c5b1", "filename": "gcc/ipa-icf.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaabbb005fca70ef46bff0cd83bcadcf7de6fcd9/gcc%2Fipa-icf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaabbb005fca70ef46bff0cd83bcadcf7de6fcd9/gcc%2Fipa-icf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-icf.c?ref=eaabbb005fca70ef46bff0cd83bcadcf7de6fcd9", "patch": "@@ -445,10 +445,8 @@ sem_function::equals_private (sem_item *item,\n \t{\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    {\n-\t      fprintf (dump_file, \"Source target flags\\n\");\n-\t      cl_target_option_print (dump_file, 2, tar1);\n-\t      fprintf (dump_file, \"Target target flags\\n\");\n-\t      cl_target_option_print (dump_file, 2, tar2);\n+\t      fprintf (dump_file, \"target flags difference\");\n+\t      cl_target_option_print_diff (dump_file, 2, tar1, tar2);\n \t    }\n \n \t  return return_false_with_msg (\"Target flags are different\");\n@@ -466,10 +464,8 @@ sem_function::equals_private (sem_item *item,\n \t{\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    {\n-\t      fprintf (dump_file, \"Source optimization flags\\n\");\n-\t      cl_optimization_print (dump_file, 2, opt1);\n-\t      fprintf (dump_file, \"Target optimization flags\\n\");\n-\t      cl_optimization_print (dump_file, 2, opt2);\n+\t      fprintf (dump_file, \"optimization flags difference\");\n+\t      cl_optimization_print_diff (dump_file, 2, opt1, opt2);\n \t    }\n \n \t  return return_false_with_msg (\"optimization flags are different\");"}, {"sha": "c773213ddcf9d31b9b72fb82be6baf18dbfff5b6", "filename": "gcc/optc-save-gen.awk", "status": "modified", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaabbb005fca70ef46bff0cd83bcadcf7de6fcd9/gcc%2Foptc-save-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaabbb005fca70ef46bff0cd83bcadcf7de6fcd9/gcc%2Foptc-save-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptc-save-gen.awk?ref=eaabbb005fca70ef46bff0cd83bcadcf7de6fcd9", "patch": "@@ -243,6 +243,69 @@ for (i = 0; i < n_opt_char; i++) {\n \n print \"}\";\n \n+print \"\";\n+print \"/* Print different optimization variables from structures provided as arguments.  */\";\n+print \"void\";\n+print \"cl_optimization_print_diff (FILE *file,\";\n+print \"                            int indent_to,\";\n+print \"                            struct cl_optimization *ptr1,\";\n+print \"                            struct cl_optimization *ptr2)\";\n+print \"{\";\n+\n+print \"  fputs (\\\"\\\\n\\\", file);\";\n+for (i = 0; i < n_opt_other; i++) {\n+\tprint \"  if (ptr1->x_\" var_opt_other[i] \" != ptr2->x_\" var_opt_other[i] \")\";\n+\tprint \"    fprintf (file, \\\"%*s%s (%#lx/%#lx)\\\\n\\\",\";\n+\tprint \"             indent_to, \\\"\\\",\";\n+\tprint \"             \\\"\" var_opt_other[i] \"\\\",\";\n+\tprint \"             (unsigned long)ptr1->x_\" var_opt_other[i] \",\";\n+\tprint \"             (unsigned long)ptr2->x_\" var_opt_other[i] \");\";\n+\tprint \"\";\n+}\n+\n+for (i = 0; i < n_opt_int; i++) {\n+\tprint \"  if (ptr1->x_\" var_opt_int[i] \" != ptr2->x_\" var_opt_int[i] \")\";\n+\tprint \"    fprintf (file, \\\"%*s%s (%#x/%#x)\\\\n\\\",\";\n+\tprint \"             indent_to, \\\"\\\",\";\n+\tprint \"             \\\"\" var_opt_int[i] \"\\\",\";\n+\tprint \"             ptr1->x_\" var_opt_int[i] \",\";\n+\tprint \"             ptr2->x_\" var_opt_int[i] \");\";\n+\tprint \"\";\n+}\n+\n+for (i = 0; i < n_opt_enum; i++) {\n+\tprint \"  if (ptr1->x_\" var_opt_enum[i] \" != ptr2->x_\" var_opt_enum[i] \")\";\n+\tprint \"  fprintf (file, \\\"%*s%s (%#x/%#x)\\\\n\\\",\";\n+\tprint \"           indent_to, \\\"\\\",\";\n+\tprint \"           \\\"\" var_opt_enum[i] \"\\\",\";\n+\tprint \"           (int) ptr1->x_\" var_opt_enum[i] \",\";\n+\tprint \"           (int) ptr2->x_\" var_opt_enum[i] \");\";\n+\tprint \"\";\n+}\n+\n+for (i = 0; i < n_opt_short; i++) {\n+\tprint \"  if (ptr1->x_\" var_opt_short[i] \" != ptr2->x_\" var_opt_short[i] \")\";\n+\tprint \"    fprintf (file, \\\"%*s%s (%#x/%#x)\\\\n\\\",\";\n+\tprint \"             indent_to, \\\"\\\",\";\n+\tprint \"             \\\"\" var_opt_short[i] \"\\\",\";\n+\tprint \"             ptr1->x_\" var_opt_short[i] \",\";\n+\tprint \"             ptr2->x_\" var_opt_short[i] \");\";\n+\tprint \"\";\n+}\n+\n+for (i = 0; i < n_opt_char; i++) {\n+\tprint \"  if (ptr1->x_\" var_opt_char[i] \" != ptr2->x_\" var_opt_char[i] \")\";\n+\tprint \"    fprintf (file, \\\"%*s%s (%#x/%#x)\\\\n\\\",\";\n+\tprint \"             indent_to, \\\"\\\",\";\n+\tprint \"             \\\"\" var_opt_char[i] \"\\\",\";\n+\tprint \"             ptr1->x_\" var_opt_char[i] \",\";\n+\tprint \"             ptr2->x_\" var_opt_char[i] \");\";\n+\tprint \"\";\n+}\n+\n+print \"}\";\n+\n+\n print \"\";\n print \"/* Save selected option variables into a structure.  */\"\n print \"void\";\n@@ -436,6 +499,76 @@ for (i = 0; i < n_target_char; i++) {\n print \"\";\n print \"  if (targetm.target_option.print)\";\n print \"    targetm.target_option.print (file, indent, ptr);\";\n+print \"}\";\n+\n+print \"\";\n+print \"/* Print different target option variables from structures provided as arguments.  */\";\n+print \"void\";\n+print \"cl_target_option_print_diff (FILE *file,\";\n+print \"                             int indent,\";\n+print \"                             struct cl_target_option *ptr1,\";\n+print \"                             struct cl_target_option *ptr2)\";\n+print \"{\";\n+\n+print \"  fputs (\\\"\\\\n\\\", file);\";\n+for (i = 0; i < n_target_other; i++) {\n+\tprint \"  if (ptr1->x_\" var_target_other[i] \" != ptr2->x_\" var_target_other[i] \")\";\n+\tif (host_wide_int[var_target_other[i]] == \"yes\")\n+\t\tprint \"    fprintf (file, \\\"%*s%s (%#\\\" HOST_WIDE_INT_PRINT \\\"x/%#\\\" HOST_WIDE_INT_PRINT \\\"x)\\\\n\\\",\";\n+\telse\n+\t\tprint \"    fprintf (file, \\\"%*s%s (%#x/%#x)\\\\n\\\",\";\n+\tprint \"             indent, \\\"\\\",\";\n+\tprint \"             \\\"\" var_target_other[i] \"\\\",\";\n+\tif (host_wide_int[var_target_other[i]] == \"yes\") {\n+\t\tprint \"             ptr1->x_\" var_target_other[i] \",\";\n+\t\tprint \"             ptr2->x_\" var_target_other[i] \");\";\n+\t}\n+\telse {\n+\t\tprint \"             (unsigned long)ptr1->x_\" var_target_other[i] \",\";\n+\t\tprint \"             (unsigned long)ptr2->x_\" var_target_other[i] \");\";\n+\t}\n+\tprint \"\";\n+}\n+\n+for (i = 0; i < n_target_enum; i++) {\n+\tprint \"  if (ptr1->x_\" var_target_enum[i] \" != ptr2->x_\" var_target_enum[i] \")\";\n+\tprint \"    fprintf (file, \\\"%*s%s (%#x/%#x)\\\\n\\\",\";\n+\tprint \"             indent, \\\"\\\",\";\n+\tprint \"             \\\"\" var_target_enum[i] \"\\\",\";\n+\tprint \"             ptr1->x_\" var_target_enum[i] \",\";\n+\tprint \"             ptr2->x_\" var_target_enum[i] \");\";\n+\tprint \"\";\n+}\n+\n+for (i = 0; i < n_target_int; i++) {\n+\tprint \"  if (ptr1->x_\" var_target_int[i] \" != ptr2->x_\" var_target_int[i] \")\";\n+\tprint \"    fprintf (file, \\\"%*s%s (%#x/%#x)\\\\n\\\",\";\n+\tprint \"             indent, \\\"\\\",\";\n+\tprint \"             \\\"\" var_target_int[i] \"\\\",\";\n+\tprint \"             ptr1->x_\" var_target_int[i] \",\";\n+\tprint \"             ptr2->x_\" var_target_int[i] \");\";\n+\tprint \"\";\n+}\n+\n+for (i = 0; i < n_target_short; i++) {\n+\tprint \"  if (ptr1->x_\" var_target_short[i] \" != ptr2->x_\" var_target_short[i] \")\";\n+\tprint \"    fprintf (file, \\\"%*s%s (%#x/%#x)\\\\n\\\",\";\n+\tprint \"             indent, \\\"\\\",\";\n+\tprint \"             \\\"\" var_target_short[i] \"\\\",\";\n+\tprint \"             ptr1->x_\" var_target_short[i] \",\";\n+\tprint \"             ptr2->x_\" var_target_short[i] \");\";\n+\tprint \"\";\n+}\n+\n+for (i = 0; i < n_target_char; i++) {\n+\tprint \"  if (ptr1->x_\" var_target_char[i] \" != ptr2->x_\" var_target_char[i] \")\";\n+\tprint \"    fprintf (file, \\\"%*s%s (%#x/%#x)\\\\n\\\",\";\n+\tprint \"             indent, \\\"\\\",\";\n+\tprint \"             \\\"\" var_target_char[i] \"\\\",\";\n+\tprint \"             ptr1->x_\" var_target_char[i] \",\";\n+\tprint \"             ptr2->x_\" var_target_char[i] \");\";\n+\tprint \"\";\n+}\n \n print \"}\";\n "}, {"sha": "bcb0a957eb206a65d636f53b59f800a0ed86c61c", "filename": "gcc/opth-gen.awk", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaabbb005fca70ef46bff0cd83bcadcf7de6fcd9/gcc%2Fopth-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaabbb005fca70ef46bff0cd83bcadcf7de6fcd9/gcc%2Fopth-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopth-gen.awk?ref=eaabbb005fca70ef46bff0cd83bcadcf7de6fcd9", "patch": "@@ -284,6 +284,9 @@ print \"\";\n print \"/* Print optimization variables from a structure.  */\";\n print \"extern void cl_optimization_print (FILE *, int, struct cl_optimization *);\";\n print \"\";\n+print \"/* Print different optimization variables from structures provided as arguments.  */\";\n+print \"extern void cl_optimization_print_diff (FILE *, int, cl_optimization *ptr1, cl_optimization *ptr2);\";\n+print \"\";\n print \"/* Save selected option variables into a structure.  */\"\n print \"extern void cl_target_option_save (struct cl_target_option *, struct gcc_options *);\";\n print \"\";\n@@ -293,6 +296,9 @@ print \"\";\n print \"/* Print target option variables from a structure.  */\";\n print \"extern void cl_target_option_print (FILE *, int, struct cl_target_option *);\";\n print \"\";\n+print \"/* Print different target option variables from structures provided as arguments.  */\";\n+print \"extern void cl_target_option_print_diff (FILE *, int, cl_target_option *ptr1, cl_target_option *ptr2);\";\n+print \"\";\n print \"/* Compare two target option variables from a structure.  */\";\n print \"extern bool cl_target_option_eq (const struct cl_target_option *, const struct cl_target_option *);\";\n print \"\";"}]}