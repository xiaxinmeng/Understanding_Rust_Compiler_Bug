{"sha": "df3b1289521e6f24d5151fc5f7b135b8bf3009bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGYzYjEyODk1MjFlNmYyNGQ1MTUxZmM1ZjdiMTM1YjhiZjMwMDliYw==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-04-15T00:16:47Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-04-15T00:16:47Z"}, "message": "Daily bump.", "tree": {"sha": "d64efb3fdab6acf6a5a6dd5f94f9709dfd051fc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d64efb3fdab6acf6a5a6dd5f94f9709dfd051fc3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df3b1289521e6f24d5151fc5f7b135b8bf3009bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df3b1289521e6f24d5151fc5f7b135b8bf3009bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df3b1289521e6f24d5151fc5f7b135b8bf3009bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df3b1289521e6f24d5151fc5f7b135b8bf3009bc/comments", "author": null, "committer": null, "parents": [{"sha": "a87d3f964df31d4fbceb822c6d293e85c117d992", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a87d3f964df31d4fbceb822c6d293e85c117d992", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a87d3f964df31d4fbceb822c6d293e85c117d992"}], "stats": {"total": 277, "additions": 276, "deletions": 1}, "files": [{"sha": "90860a78fd41a0695cb7d0094402d5ebcf3aebb0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df3b1289521e6f24d5151fc5f7b135b8bf3009bc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df3b1289521e6f24d5151fc5f7b135b8bf3009bc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=df3b1289521e6f24d5151fc5f7b135b8bf3009bc", "patch": "@@ -1,3 +1,123 @@\n+2021-04-14  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR rtl-optimization/99929\n+\t* rtl.h (same_vector_encodings_p): New function.\n+\t* cse.c (exp_equiv_p): Check that CONST_VECTORs have the same encoding.\n+\t* cselib.c (rtx_equal_for_cselib_1): Likewise.\n+\t* jump.c (rtx_renumbered_equal_p): Likewise.\n+\t* lra-constraints.c (operands_match_p): Likewise.\n+\t* reload.c (operands_match_p): Likewise.\n+\t* rtl.c (rtx_equal_p_cb, rtx_equal_p): Likewise.\n+\n+2021-04-14  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* print-rtl.c (rtx_writer::print_rtx_operand_codes_E_and_V): Print\n+\tmore information about variable-length CONST_VECTORs.\n+\n+2021-04-14  Vladimir N. Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/100066\n+\t* lra-constraints.c (split_reg): Check paradoxical_subreg_p for\n+\tordered modes when choosing splitting mode for hard reg.\n+\n+2021-04-14  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR target/99246\n+\t* config/aarch64/aarch64.c (aarch64_expand_sve_const_vector_sel):\n+\tNew function.\n+\t(aarch64_expand_sve_const_vector): Use it for nelts_per_pattern==2.\n+\n+2021-04-14  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\t* config/s390/s390-builtins.def (O_M5, O_M12, ...): Add new macros\n+\tfor mask operand types.\n+\t(s390_vec_permi_s64, s390_vec_permi_b64, s390_vec_permi_u64)\n+\t(s390_vec_permi_dbl, s390_vpdi): Use the M5 type for the immediate\n+\toperand.\n+\t(s390_vec_msum_u128, s390_vmslg): Use the M12 type for the\n+\timmediate operand.\n+\t* config/s390/s390.c (s390_const_operand_ok): Check the new\n+\toperand types and generate a list of valid values.\n+\n+2021-04-14  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* doc/tm.texi: Regenerate.\n+\t* doc/tm.texi.in (D language and ABI): Add @hook for\n+\tTARGET_D_REGISTER_OS_TARGET_INFO.\n+\n+2021-04-14  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* config/aarch64/aarch64-d.c (aarch64_d_handle_target_float_abi): New\n+\tfunction.\n+\t(aarch64_d_register_target_info): New function.\n+\t* config/aarch64/aarch64-protos.h (aarch64_d_register_target_info):\n+\tDeclare.\n+\t* config/aarch64/aarch64.h (TARGET_D_REGISTER_CPU_TARGET_INFO):\n+\tDefine.\n+\t* config/arm/arm-d.c (arm_d_handle_target_float_abi): New function.\n+\t(arm_d_register_target_info): New function.\n+\t* config/arm/arm-protos.h (arm_d_register_target_info): Declare.\n+\t* config/arm/arm.h (TARGET_D_REGISTER_CPU_TARGET_INFO): Define.\n+\t* config/i386/i386-d.c (ix86_d_handle_target_float_abi): New function.\n+\t(ix86_d_register_target_info): New function.\n+\t* config/i386/i386-protos.h (ix86_d_register_target_info): Declare.\n+\t* config/i386/i386.h (TARGET_D_REGISTER_CPU_TARGET_INFO): Define.\n+\t* config/mips/mips-d.c (mips_d_handle_target_float_abi): New function.\n+\t(mips_d_register_target_info): New function.\n+\t* config/mips/mips-protos.h (mips_d_register_target_info): Declare.\n+\t* config/mips/mips.h (TARGET_D_REGISTER_CPU_TARGET_INFO): Define.\n+\t* config/pa/pa-d.c (pa_d_handle_target_float_abi): New function.\n+\t(pa_d_register_target_info): New function.\n+\t* config/pa/pa-protos.h (pa_d_register_target_info): Declare.\n+\t* config/pa/pa.h (TARGET_D_REGISTER_CPU_TARGET_INFO): Define.\n+\t* config/riscv/riscv-d.c (riscv_d_handle_target_float_abi): New\n+\tfunction.\n+\t(riscv_d_register_target_info): New function.\n+\t* config/riscv/riscv-protos.h (riscv_d_register_target_info): Declare.\n+\t* config/riscv/riscv.h (TARGET_D_REGISTER_CPU_TARGET_INFO): Define.\n+\t* config/rs6000/rs6000-d.c (rs6000_d_handle_target_float_abi): New\n+\tfunction.\n+\t(rs6000_d_register_target_info): New function.\n+\t* config/rs6000/rs6000-protos.h (rs6000_d_register_target_info):\n+\tDeclare.\n+\t* config/rs6000/rs6000.h (TARGET_D_REGISTER_CPU_TARGET_INFO): Define.\n+\t* config/s390/s390-d.c (s390_d_handle_target_float_abi): New function.\n+\t(s390_d_register_target_info): New function.\n+\t* config/s390/s390-protos.h (s390_d_register_target_info): Declare.\n+\t* config/s390/s390.h (TARGET_D_REGISTER_CPU_TARGET_INFO): Define.\n+\t* config/sparc/sparc-d.c (sparc_d_handle_target_float_abi): New\n+\tfunction.\n+\t(sparc_d_register_target_info): New function.\n+\t* config/sparc/sparc-protos.h (sparc_d_register_target_info): Declare.\n+\t* config/sparc/sparc.h (TARGET_D_REGISTER_CPU_TARGET_INFO): Define.\n+\t* doc/tm.texi: Regenerate.\n+\t* doc/tm.texi.in (D language and ABI): Add @hook for\n+\tTARGET_D_REGISTER_CPU_TARGET_INFO.\n+\n+2021-04-14  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* config/i386/i386-d.c (ix86_d_has_stdcall_convention): New function.\n+\t* config/i386/i386-protos.h (ix86_d_has_stdcall_convention): Declare.\n+\t* config/i386/i386.h (TARGET_D_HAS_STDCALL_CONVENTION): Define.\n+\t* doc/tm.texi: Regenerate.\n+\t* doc/tm.texi.in (D language and ABI): Add @hook for\n+\tTARGET_D_HAS_STDCALL_CONVENTION.\n+\n+2021-04-14  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-cfg.c (verify_gimple_assign_ternary): Verify that\n+\tVEC_COND_EXPRs have a gimple_val condition.\n+\t* tree-ssa-propagate.c (valid_gimple_rhs_p): VEC_COND_EXPR\n+\tcan no longer have a GENERIC condition.\n+\n+2021-04-14  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\tPR target/100067\n+\t* config/arm/arm.c (arm_configure_build_target): Strip isa_all_fpbits\n+\tfrom the isa_delta when -mfpu has been used.\n+\t(arm_options_perform_arch_sanity_checks): It's the architecture that\n+\tlacks an FPU not the processor.\n+\n 2021-04-13  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/100053"}, {"sha": "e9d3aa7a5965c086f8f14f103a3c0a106ee15f0b", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df3b1289521e6f24d5151fc5f7b135b8bf3009bc/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df3b1289521e6f24d5151fc5f7b135b8bf3009bc/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=df3b1289521e6f24d5151fc5f7b135b8bf3009bc", "patch": "@@ -1 +1 @@\n-20210414\n+20210415"}, {"sha": "e50822285779ce308875b3725fc0d3255338a99a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df3b1289521e6f24d5151fc5f7b135b8bf3009bc/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df3b1289521e6f24d5151fc5f7b135b8bf3009bc/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=df3b1289521e6f24d5151fc5f7b135b8bf3009bc", "patch": "@@ -1,3 +1,45 @@\n+2021-04-14  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/100078\n+\tPR c++/93085\n+\t* pt.c (uses_outer_template_parms): Also look at default\n+\ttemplate argument.\n+\n+2021-04-14  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/93314\n+\t* semantics.c (finish_id_expression_1): Clear cp_unevaluated_operand\n+\tfor a non-static data member in a constant-expression.\n+\n+2021-04-14  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/83476\n+\tPR c++/99885\n+\t* pt.c (deducible_expression): Look through implicit\n+\tINDIRECT_REFs as well.\n+\n+2021-04-14  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/99478\n+\t* parser.c (cp_parser_lambda_expression): Reject lambda\n+\tin template parameter type.\n+\n+2021-04-14  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/90674\n+\t* decl.c (duplicate_decls): Don't propagate\n+\tDECL_INITIALIZED_IN_CLASS_P to a specialization.\n+\n+2021-04-14  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/88742\n+\tPR c++/49951\n+\tPR c++/58123\n+\t* semantics.c (set_cleanup_locs): New.\n+\t(do_poplevel): Call it.\n+\t* parser.c (cp_parser_compound_statement): Consume the }\n+\tbefore finish_compound_stmt.\n+\n 2021-04-13  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/100032"}, {"sha": "fe89d7b399be9b72cd5bfe27085ae55836159285", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df3b1289521e6f24d5151fc5f7b135b8bf3009bc/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df3b1289521e6f24d5151fc5f7b135b8bf3009bc/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=df3b1289521e6f24d5151fc5f7b135b8bf3009bc", "patch": "@@ -1,3 +1,40 @@\n+2021-04-14  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-target.cc (Target::_init): Call new targetdm hook to register OS\n+\tspecific target info keys.\n+\t* d-target.def (d_register_os_target_info): New hook.\n+\n+2021-04-14  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-builtins.cc (d_add_builtin_version): Remove all setting of\n+\ttarget-specific global.params.\n+\t* typeinfo.cc (create_typeinfo): Don't add argType fields to\n+\tTypeInfo_Struct.\n+\n+2021-04-14  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/99914\n+\t* decl.cc (DeclVisitor::visit (StructDeclaration *)): Don't set\n+\tDECL_INSTANTIATED on static initializer declarations.\n+\t(DeclVisitor::visit (ClassDeclaration *)): Likewise.\n+\t(DeclVisitor::visit (EnumDeclaration *)): Likewise.\n+\t(d_finish_decl): Move call to set_linkage_for_decl to...\n+\t(declare_extern_var): ...here.\n+\n+2021-04-14  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-target.cc (Target::_init): Call new targetdm hook to register CPU\n+\tspecific target info keys.\n+\t* d-target.def (d_register_cpu_target_info): New hook.\n+\n+2021-04-14  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-target.cc (Target::systemLinkage): Return LINKwindows if\n+\td_has_stdcall_convention applies to LINKsystem.\n+\t* d-target.def (d_has_stdcall_convention): New hook.\n+\t* types.cc (TypeVisitor::visit (TypeFunction *)): Insert \"stdcall\"\n+\tfunction attribute if d_has_stdcall_convention applies to LINKwindows.\n+\n 2021-04-10  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* dmd/MERGE: Merge upstream dmd 0450061c8."}, {"sha": "1f8578ccd6adb50a948eb22f6a432b48f4e4e327", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df3b1289521e6f24d5151fc5f7b135b8bf3009bc/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df3b1289521e6f24d5151fc5f7b135b8bf3009bc/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=df3b1289521e6f24d5151fc5f7b135b8bf3009bc", "patch": "@@ -1,3 +1,8 @@\n+2021-04-14  Martin Liska  <mliska@suse.cz>\n+\n+\t* intrinsic.texi: The table has first column empty and it makes\n+\ttrouble when processing makeinfo --xml output.\n+\n 2021-04-09  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR fortran/99817"}, {"sha": "d9e9168fbf349df9bc2aef2a0518a3f4cc4a7fd3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df3b1289521e6f24d5151fc5f7b135b8bf3009bc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df3b1289521e6f24d5151fc5f7b135b8bf3009bc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=df3b1289521e6f24d5151fc5f7b135b8bf3009bc", "patch": "@@ -1,3 +1,67 @@\n+2021-04-14  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/pr99929_1.c: New file.\n+\t* gcc.target/aarch64/sve/pr99929_2.c: Likewise.\n+\n+2021-04-14  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/100078\n+\t* g++.dg/template/dependent-tmpl2.C: New test.\n+\n+2021-04-14  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/93314\n+\t* g++.dg/parse/uneval1.C: New test.\n+\n+2021-04-14  Vladimir N. Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/100066\n+\t* gcc.target/i386/pr100066.c: New.\n+\n+2021-04-14  Martin Sebor  <msebor@redhat.com>\n+\n+\t* gcc.dg/pr86058.c: Limit to just x86_64.\n+\n+2021-04-14  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR target/99246\n+\t* gcc.target/aarch64/sve/acle/general/pr99246.c: New test.\n+\n+2021-04-14  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\t* gcc.target/s390/zvector/imm-range-error-1.c: New test.\n+\t* gcc.target/s390/zvector/vec_msum_u128-1.c: New test.\n+\n+2021-04-14  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/83476\n+\tPR c++/99885\n+\t* g++.dg/cpp1z/class-deduction85.C: New test.\n+\t* g++.dg/template/ref11.C: New test.\n+\n+2021-04-14  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/99478\n+\t* g++.dg/cpp2a/lambda-uneval14.C: New test.\n+\n+2021-04-14  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/90674\n+\t* g++.dg/debug/defaulted1.C: New test.\n+\n+2021-04-14  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/88742\n+\t* g++.dg/debug/cleanup1.C: New test.\n+\t* c-c++-common/Wimplicit-fallthrough-6.c: Adjust diagnostic line.\n+\t* c-c++-common/Wimplicit-fallthrough-7.c: Likewise.\n+\t* g++.dg/cpp2a/constexpr-dtor3.C: Likewise.\n+\t* g++.dg/ext/constexpr-attr-cleanup1.C: Likewise.\n+\t* g++.dg/tm/inherit2.C: Likewise.\n+\t* g++.dg/tm/unsafe1.C: Likewise.\n+\t* g++.dg/warn/Wimplicit-fallthrough-1.C: Likewise.\n+\t* g++.dg/gcov/gcov-2.C: Adjust coverage counts.\n+\n 2021-04-13  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/82800"}, {"sha": "ca800b8cfaf3ce9903d98c2a0c93fc72c7bbf3b3", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df3b1289521e6f24d5151fc5f7b135b8bf3009bc/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df3b1289521e6f24d5151fc5f7b135b8bf3009bc/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=df3b1289521e6f24d5151fc5f7b135b8bf3009bc", "patch": "@@ -1,3 +1,10 @@\n+2021-04-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR testsuite/100071\n+\t* testsuite/libgomp.fortran/alloc-1.F90: Call c_f_pointer after last\n+\tcp = omp_alloc with cp, p arguments instead of cq, q and call\n+\tc_f_pointer after last cq = omp_alloc with cq, q.\n+\n 2021-04-11  Hafiz Abid Qadeer  <abidh@codesourcery.com>\n \n \tPR middle-end/98088"}]}