{"sha": "e48933f00d676658ad065d9691a1b61446745386", "node_id": "C_kwDOANBUbNoAKGU0ODkzM2YwMGQ2NzY2NThhZDA2NWQ5NjkxYTFiNjE0NDY3NDUzODY", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-04-12T09:35:43Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-04-12T21:38:31Z"}, "message": "libstdc++: Use nothrow new in std::stacktrace\n\nWe can avoid the overhead of handling a bad_alloc exception from\nstd::allocator<std::stacktrace_entry>::allocate by just calling the\nnothrow operator new instead.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/stacktrace (basic_stacktrace::_Impl::_M_allocate):\n\tUse nothrow new instead of try block for std::allocator.\n\t(basic_stacktrace::_Impl::_M_deallocate): Use delete for\n\tstd::allocator.", "tree": {"sha": "960dd4e9efe489dad33e8abf25b4af328ee97b54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/960dd4e9efe489dad33e8abf25b4af328ee97b54"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e48933f00d676658ad065d9691a1b61446745386", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e48933f00d676658ad065d9691a1b61446745386", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e48933f00d676658ad065d9691a1b61446745386", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e48933f00d676658ad065d9691a1b61446745386/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ce0f5185ba95131b3c538507323d8ecb561a0c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ce0f5185ba95131b3c538507323d8ecb561a0c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ce0f5185ba95131b3c538507323d8ecb561a0c2"}], "stats": {"total": 42, "additions": 35, "deletions": 7}, "files": [{"sha": "f36c5a9abefd896903d5676db08426f432a0d881", "filename": "libstdc++-v3/include/std/stacktrace", "status": "modified", "additions": 35, "deletions": 7, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e48933f00d676658ad065d9691a1b61446745386/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstacktrace", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e48933f00d676658ad065d9691a1b61446745386/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstacktrace", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstacktrace?ref=e48933f00d676658ad065d9691a1b61446745386", "patch": "@@ -30,6 +30,7 @@\n \n #if __cplusplus > 202002L && _GLIBCXX_HAVE_STACKTRACE\n #include <compare>\n+#include <new>\n #include <string>\n #include <sstream>\n #include <bits/stl_algobase.h>\n@@ -589,36 +590,63 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  return std::min(__size_max, __alloc_max);\n \t}\n \n+#if __has_builtin(__builtin_operator_new) >= 201802L\n+# define _GLIBCXX_OPERATOR_NEW __builtin_operator_new\n+# define _GLIBCXX_OPERATOR_DELETE __builtin_operator_delete\n+#else\n+# define _GLIBCXX_OPERATOR_NEW ::operator new\n+# define _GLIBCXX_OPERATOR_DELETE ::operator delete\n+#endif\n+\n \t// Precondition: _M_frames == nullptr && __n != 0\n \tpointer\n \t_M_allocate(allocator_type& __alloc, size_type __n) noexcept\n \t{\n \t  if (__n <= _S_max_size(__alloc)) [[likely]]\n \t    {\n-\t      __try\n+\t      if constexpr (is_same_v<allocator_type, allocator<value_type>>)\n \t\t{\n-\t\t  _M_frames = __alloc.allocate(__n);\n-\t\t  _M_capacity = __n;\n-\t\t  return _M_frames;\n+\t\t  __n *= sizeof(value_type);\n+\t\t  void* const __p = _GLIBCXX_OPERATOR_NEW (__n, nothrow_t{});\n+\t\t  if (__p == nullptr) [[unlikely]]\n+\t\t    return nullptr;\n+\t\t  _M_frames = static_cast<pointer>(__p);\n \t\t}\n-\t      __catch (...)\n+\t      else\n \t\t{\n+\t\t  __try\n+\t\t    {\n+\t\t      _M_frames = __alloc.allocate(__n);\n+\t\t    }\n+\t\t  __catch (const std::bad_alloc&)\n+\t\t    {\n+\t\t      return nullptr;\n+\t\t    }\n \t\t}\n+\t      _M_capacity = __n;\n+\t      return _M_frames;\n \t    }\n-\t  return nullptr;;\n+\t  return nullptr;\n \t}\n \n \tvoid\n \t_M_deallocate(allocator_type& __alloc) noexcept\n \t{\n \t  if (_M_capacity)\n \t    {\n-\t      __alloc.deallocate(_M_frames, _M_capacity);\n+\t      if constexpr (is_same_v<allocator_type, allocator<value_type>>)\n+\t\t_GLIBCXX_OPERATOR_DELETE (static_cast<void*>(_M_frames),\n+\t\t\t\t\t  _M_capacity * sizeof(value_type));\n+\t      else\n+\t\t__alloc.deallocate(_M_frames, _M_capacity);\n \t      _M_frames = nullptr;\n \t      _M_capacity = 0;\n \t    }\n \t}\n \n+#undef _GLIBCXX_OPERATOR_DELETE\n+#undef _GLIBCXX_OPERATOR_NEW\n+\n \tvoid\n \t_M_destroy() noexcept\n \t{"}]}