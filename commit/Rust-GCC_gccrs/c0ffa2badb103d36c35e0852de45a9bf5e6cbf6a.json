{"sha": "c0ffa2badb103d36c35e0852de45a9bf5e6cbf6a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzBmZmEyYmFkYjEwM2QzNmMzNWUwODUyZGU0NWE5YmY1ZTZjYmY2YQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2013-02-20T01:52:36Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2013-02-20T01:52:36Z"}, "message": "user.cfg.in: Set __cplusplus to 201103L.\n\n2013-02-19  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* doc/doxygen/user.cfg.in: Set __cplusplus to 201103L. Change to\n\t_GLIBCXX_INCLUDE_AS_CXX11. DIRECTORY_GRAPH, MARKDOWN_SUPPORT,\n\tAUTOLINK_SUPPORT to NO. Update to doxygen 1.8.3.1.\n\t* include/bits/stl_pair.h: Add to utilities group.\n\t* include/std/tuple: Same.\n\t* include/std/typeindex: Same.\n\n\t* include/bits/stringfwd.h: Fix markup.\n\t* include/std/limits: Same.\n\t* include/std/type_traits: Same.\n\t* include/tr1/memory: Same.\n\t* include/tr1/regex: Same.\n\t* scripts/run_doxygen: Comment.\n\t* testsuite/20_util/uses_allocator/cons_neg.cc: Fixup line numbers.\n\nFrom-SVN: r196162", "tree": {"sha": "2f23778c44e7978bd70d450572c3317af8845150", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f23778c44e7978bd70d450572c3317af8845150"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0ffa2badb103d36c35e0852de45a9bf5e6cbf6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0ffa2badb103d36c35e0852de45a9bf5e6cbf6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0ffa2badb103d36c35e0852de45a9bf5e6cbf6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0ffa2badb103d36c35e0852de45a9bf5e6cbf6a/comments", "author": null, "committer": null, "parents": [{"sha": "10b707dc8d932c3bebff31f054c1e0c26d3ea253", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10b707dc8d932c3bebff31f054c1e0c26d3ea253", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10b707dc8d932c3bebff31f054c1e0c26d3ea253"}], "stats": {"total": 254, "additions": 179, "deletions": 75}, "files": [{"sha": "e93ce567d960cfdd449e0314872590003c0a71c0", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ffa2badb103d36c35e0852de45a9bf5e6cbf6a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ffa2badb103d36c35e0852de45a9bf5e6cbf6a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c0ffa2badb103d36c35e0852de45a9bf5e6cbf6a", "patch": "@@ -1,3 +1,20 @@\n+2013-02-19  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* doc/doxygen/user.cfg.in: Set __cplusplus to 201103L. Change to\n+\t_GLIBCXX_INCLUDE_AS_CXX11. DIRECTORY_GRAPH, MARKDOWN_SUPPORT,\n+\tAUTOLINK_SUPPORT to NO. Update to doxygen 1.8.3.1.\n+\t* include/bits/stl_pair.h: Add to utilities group.\n+\t* include/std/tuple: Same.\n+\t* include/std/typeindex: Same.\n+\n+\t* include/bits/stringfwd.h: Fix markup.\n+\t* include/std/limits: Same.\n+\t* include/std/type_traits: Same.\n+\t* include/tr1/memory: Same.\n+\t* include/tr1/regex: Same.\n+\t* scripts/run_doxygen: Comment.\n+\t* testsuite/20_util/uses_allocator/cons_neg.cc: Fixup line numbers.\n+\n 2013-02-14  Jason Merrill  <jason@redhat.com>\n \n \t* testsuite/18_support/quick_exit/quick_exit.cc: #if out the whole"}, {"sha": "4a3afc4de934cd3022525343cbd40836e94d7c79", "filename": "libstdc++-v3/doc/doxygen/user.cfg.in", "status": "modified", "additions": 86, "deletions": 25, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ffa2badb103d36c35e0852de45a9bf5e6cbf6a/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ffa2badb103d36c35e0852de45a9bf5e6cbf6a/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in?ref=c0ffa2badb103d36c35e0852de45a9bf5e6cbf6a", "patch": "@@ -1,4 +1,4 @@\n-# Doxyfile 1.8.2\n+# Doxyfile 1.8.3.1\n \n # This file describes the settings to be used by the documentation system\n # doxygen (www.doxygen.org) for a project.\n@@ -252,14 +252,15 @@ EXTENSION_MAPPING      =\n # can mix doxygen, HTML, and XML commands with Markdown formatting.\n # Disable only in case of backward compatibilities issues.\n \n-MARKDOWN_SUPPORT       = YES\n+MARKDOWN_SUPPORT       = NO\n \n-# When enabled doxygen tries to link words that correspond to documented classes,\n-# or namespaces to their corresponding documentation. Such a link can be\n-# prevented in individual cases by by putting a % sign in front of the word or\n-# globally by setting AUTOLINK_SUPPORT to NO.\n+# When enabled doxygen tries to link words that correspond to\n+# documented classes, or namespaces to their corresponding\n+# documentation. Such a link can be prevented in individual cases by\n+# by putting a % sign in front of the word or globally by setting\n+# AUTOLINK_SUPPORT to NO.\n \n-AUTOLINK_SUPPORT       = YES\n+AUTOLINK_SUPPORT       = NO\n \n # If you use STL classes (i.e. std::string, std::vector, etc.) but do not want\n # to include (a tag file for) the STL sources as input, then you should\n@@ -281,7 +282,12 @@ CPP_CLI_SUPPORT        = NO\n \n SIP_SUPPORT            = NO\n \n-# For Microsoft's IDL there are propget and propput attributes to indicate getter and setter methods for a property. Setting this option to YES (the default) will make doxygen replace the get and set methods by a property in the documentation. This will only work if the methods are indeed getting or setting a simple type. If this is not the case, or you want to show the methods anyway, you should set this option to NO.\n+# For Microsoft's IDL there are propget and propput attributes to indicate\n+# getter and setter methods for a property. Setting this option to YES (the\n+# default) will make doxygen replace the get and set methods by a property in\n+# the documentation. This will only work if the methods are indeed getting or\n+# setting a simple type. If this is not the case, or you want to show the\n+# methods anyway, you should set this option to NO.\n \n IDL_PROPERTY_SUPPORT   = NO\n \n@@ -305,16 +311,15 @@ SUBGROUPING            = YES\n # @ingroup) instead of on a separate page (for HTML and Man pages) or\n # section (for LaTeX and RTF).\n \n-#INLINE_GROUPED_CLASSES = NO\n-INLINE_GROUPED_CLASSES = YES\n+INLINE_GROUPED_CLASSES = NO\n \n # When the INLINE_SIMPLE_STRUCTS tag is set to YES, structs, classes, and\n # unions with only public data fields will be shown inline in the documentation\n # of the scope in which they are defined (i.e. file, namespace, or group\n # documentation), provided this scope is documented. If set to NO (the default),\n # structs, classes, and unions are shown on a separate page (for HTML and Man\n # pages) or section (for LaTeX and RTF).\n- \n+\n INLINE_SIMPLE_STRUCTS  = NO\n \n # When TYPEDEF_HIDES_STRUCT is enabled, a typedef of a struct, union, or enum\n@@ -542,7 +547,8 @@ GENERATE_BUGLIST       = YES\n GENERATE_DEPRECATEDLIST= YES\n \n # The ENABLED_SECTIONS tag can be used to enable conditional\n-# documentation sections, marked by \\if sectionname ... \\endif.\n+# documentation sections, marked by \\if section-label ... \\endif\n+# and \\cond section-label ... \\endcond blocks.\n \n ENABLED_SECTIONS       = @enabled_sections@\n \n@@ -600,7 +606,8 @@ LAYOUT_FILE            =\n # requires the bibtex tool to be installed. See also\n # http://en.wikipedia.org/wiki/BibTeX for more info. For LaTeX the style\n # of the bibliography can be controlled using LATEX_BIB_STYLE. To use this\n-# feature you need bibtex and perl available in the search path.\n+# feature you need bibtex and perl available in the search path. Do not use\n+# file names with spaces, bibtex cannot handle them.\n \n CITE_BIB_FILES         =\n \n@@ -952,6 +959,13 @@ FILTER_SOURCE_FILES    = NO\n \n FILTER_SOURCE_PATTERNS =\n \n+# If the USE_MD_FILE_AS_MAINPAGE tag refers to the name of a markdown file that\n+# is part of the input, its contents will be placed on the main page (index.html).\n+# This can be useful if you have a project on for instance GitHub and want reuse\n+# the introduction page also for the doxygen output.\n+\n+USE_MDFILE_AS_MAINPAGE =\n+\n #---------------------------------------------------------------------------\n # configuration options related to source browsing\n #---------------------------------------------------------------------------\n@@ -1134,7 +1148,7 @@ HTML_TIMESTAMP         = NO\n # documentation will contain sections that can be hidden and shown after the\n # page has loaded.\n \n-HTML_DYNAMIC_SECTIONS  = YES\n+HTML_DYNAMIC_SECTIONS  = NO\n \n # With HTML_INDEX_NUM_ENTRIES one can control the preferred number of\n # entries shown in the various tree structured indices initially; the user\n@@ -1145,7 +1159,7 @@ HTML_DYNAMIC_SECTIONS  = YES\n # default. 0 is a special value representing an infinite number of entries\n # and will result in a full expanded tree by default.\n \n-HTML_INDEX_NUM_ENTRIES = 100\n+HTML_INDEX_NUM_ENTRIES = 0\n \n # If the GENERATE_DOCSET tag is set to YES, additional index files\n # will be generated that can be used as input for Apple's Xcode 3\n@@ -1361,6 +1375,13 @@ FORMULA_TRANSPARENT    = YES\n \n USE_MATHJAX            = NO\n \n+# When MathJax is enabled you can set the default output format to be used for\n+# thA MathJax output. Supported types are HTML-CSS, NativeMML (i.e. MathML) and\n+# SVG. The default value is HTML-CSS, which is slower, but has the best\n+# compatibility.\n+\n+MATHJAX_FORMAT         = HTML-CSS\n+\n # When MathJax is enabled you need to specify the location relative to the\n # HTML output directory using the MATHJAX_RELPATH option. The destination\n # directory should contain the MathJax.js script. For instance, if the mathjax\n@@ -1389,15 +1410,55 @@ MATHJAX_EXTENSIONS     =\n SEARCHENGINE           = NO\n \n # When the SERVER_BASED_SEARCH tag is enabled the search engine will be\n-# implemented using a PHP enabled web server instead of at the web client\n-# using Javascript. Doxygen will generate the search PHP script and index\n-# file to put on the web server. The advantage of the server\n-# based approach is that it scales better to large projects and allows\n-# full text search. The disadvantages are that it is more difficult to setup\n-# and does not have live searching capabilities.\n+# implemented using a web server instead of a web client using Javascript.\n+# There are two flavours of web server based search depending on the\n+# EXTERNAL_SEARCH setting. When disabled, doxygen will generate a PHP script for\n+# searching and an index file used by the script. When EXTERNAL_SEARCH is\n+# enabled the indexing and searching needs to be provided by external tools.\n+# See the manual for details.\n \n SERVER_BASED_SEARCH    = NO\n \n+# When EXTERNAL_SEARCH is enabled doxygen will no longer generate the PHP\n+# script for searching. Instead the search results are written to an XML file\n+# which needs to be processed by an external indexer. Doxygen will invoke an\n+# external search engine pointed to by the SEARCHENGINE_URL option to obtain\n+# the search results. Doxygen ships with an example indexer (doxyindexer) and\n+# search engine (doxysearch.cgi) which are based on the open source search engine\n+# library Xapian. See the manual for configuration details.\n+\n+EXTERNAL_SEARCH        = NO\n+\n+# The SEARCHENGINE_URL should point to a search engine hosted by a web server\n+# which will returned the search results when EXTERNAL_SEARCH is enabled.\n+# Doxygen ships with an example search engine (doxysearch) which is based on\n+# the open source search engine library Xapian. See the manual for configuration\n+# details.\n+\n+SEARCHENGINE_URL       =\n+\n+# When SERVER_BASED_SEARCH and EXTERNAL_SEARCH are both enabled the unindexed\n+# search data is written to a file for indexing by an external tool. With the\n+# SEARCHDATA_FILE tag the name of this file can be specified.\n+\n+SEARCHDATA_FILE        = searchdata.xml\n+\n+# When SERVER_BASED_SEARCH AND EXTERNAL_SEARCH are both enabled the\n+# EXTERNAL_SEARCH_ID tag can be used as an identifier for the project. This is\n+# useful in combination with EXTRA_SEARCH_MAPPINGS to search through multiple\n+# projects and redirect the results back to the right project.\n+\n+EXTERNAL_SEARCH_ID     =\n+\n+# The EXTRA_SEARCH_MAPPINGS tag can be used to enable searching through doxygen\n+# projects other than the one defined by this configuration file, but that are\n+# all added to the same external search index. Each project needs to have a\n+# unique id set via EXTERNAL_SEARCH_ID. The search mapping then maps the id\n+# of to a relative location where the documentation can be found.\n+# The format is: EXTRA_SEARCH_MAPPINGS = id1=loc1 id2=loc2 ...\n+\n+EXTRA_SEARCH_MAPPINGS  =\n+\n #---------------------------------------------------------------------------\n # configuration options related to the LaTeX output\n #---------------------------------------------------------------------------\n@@ -1431,7 +1492,7 @@ MAKEINDEX_CMD_NAME     = makeindex\n # LaTeX documents. This may be useful for small projects and may help to\n # save some trees in general.\n \n-COMPACT_LATEX          =  YES\n+COMPACT_LATEX          = YES\n \n # The PAPER_TYPE tag can be used to set the paper type that is used\n # by the printer. Possible values are: a4, letter, legal and\n@@ -1698,10 +1759,10 @@ INCLUDE_FILE_PATTERNS  =\n # undefined via #undef or recursively expanded use the := operator\n # instead of the = operator.\n \n-PREDEFINED             = __cplusplus \\\n+PREDEFINED             = __cplusplus=201103L \\\n                          __GTHREADS \\\n                          _GLIBCXX_HAS_GTHREADS \\\n-                         _GLIBCXX_INCLUDE_AS_CXX0X \\\n+                         _GLIBCXX_INCLUDE_AS_CXX11 \\\n                          \"_GLIBCXX_PURE= \" \\\n                          \"_GLIBCXX_CONST= \" \\\n                          \"_GLIBCXX_NORETURN= \" \\\n@@ -1938,7 +1999,7 @@ GRAPHICAL_HIERARCHY    = YES\n # in a graphical way. The dependency relations are determined by the #include\n # relations between the files in the directories.\n \n-DIRECTORY_GRAPH        = YES\n+DIRECTORY_GRAPH        = NO\n \n # The DOT_IMAGE_FORMAT tag can be used to set the image format of the images\n # generated by dot. Possible values are svg, png, jpg, or gif."}, {"sha": "92250166b4073c024b9795897cbda92aa93d4238", "filename": "libstdc++-v3/include/bits/stl_pair.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ffa2badb103d36c35e0852de45a9bf5e6cbf6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ffa2badb103d36c35e0852de45a9bf5e6cbf6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h?ref=c0ffa2badb103d36c35e0852de45a9bf5e6cbf6a", "patch": "@@ -66,6 +66,11 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+  /**\n+   *  @addtogroup utilities\n+   *  @{\n+   */\n+\n #if __cplusplus >= 201103L\n   /// piecewise_construct_t\n   struct piecewise_construct_t { };\n@@ -282,7 +287,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { return pair<_T1, _T2>(__x, __y); }\n #endif\n \n+  /// @}\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace\n+} // namespace std\n \n #endif /* _STL_PAIR_H */"}, {"sha": "5d5b83f5e968d1fd0eb4ebf035b41bfb870c22c8", "filename": "libstdc++-v3/include/bits/stringfwd.h", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ffa2badb103d36c35e0852de45a9bf5e6cbf6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstringfwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ffa2badb103d36c35e0852de45a9bf5e6cbf6a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstringfwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstringfwd.h?ref=c0ffa2badb103d36c35e0852de45a9bf5e6cbf6a", "patch": "@@ -60,12 +60,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<> struct char_traits<char>;\n \n-  typedef basic_string<char>    string;   /// A string of @c char\n+  /// A string of @c char\n+  typedef basic_string<char>    string;   \n \n #ifdef _GLIBCXX_USE_WCHAR_T\n   template<> struct char_traits<wchar_t>;\n \n-  typedef basic_string<wchar_t> wstring;   /// A string of @c wchar_t\n+  /// A string of @c wchar_t\n+  typedef basic_string<wchar_t> wstring;   \n #endif\n \n #if ((__cplusplus >= 201103L) \\\n@@ -74,13 +76,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<> struct char_traits<char16_t>;\n   template<> struct char_traits<char32_t>;\n \n-  typedef basic_string<char16_t> u16string; /// A string of @c char16_t\n-  typedef basic_string<char32_t> u32string; /// A string of @c char32_t\n+  /// A string of @c char16_t\n+  typedef basic_string<char16_t> u16string; \n+\n+  /// A string of @c char32_t\n+  typedef basic_string<char32_t> u32string; \n \n #endif\n   /** @}  */\n \n _GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace\n+} // namespace std\n \n #endif\t// _STRINGFWD_H"}, {"sha": "a137d0b121091dd8eac63ac18cef1cddb06de46d", "filename": "libstdc++-v3/include/std/limits", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ffa2badb103d36c35e0852de45a9bf5e6cbf6a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flimits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ffa2badb103d36c35e0852de45a9bf5e6cbf6a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flimits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flimits?ref=c0ffa2badb103d36c35e0852de45a9bf5e6cbf6a", "patch": "@@ -211,14 +211,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     /** True if the type is signed.  */\n     static _GLIBCXX_USE_CONSTEXPR bool is_signed = false;\n \n-    /** True if the type is integer.\n-     *  Is this supposed to be <em>if the type is integral?</em>  */\n+    /** True if the type is integer.  */\n     static _GLIBCXX_USE_CONSTEXPR bool is_integer = false;\n \n-    /** True if the type uses an exact representation. <em>All integer types are\n+    /** True if the type uses an exact representation. All integer types are\n \texact, but not all exact types are integer.  For example, rational and\n-\tfixed-exponent representations are exact but not integer.</em>\n-\t[18.2.1.2]/15  */\n+\tfixed-exponent representations are exact but not integer. */\n     static _GLIBCXX_USE_CONSTEXPR bool is_exact = false;\n \n     /** For integer types, specifies the base of the representation.  For\n@@ -246,27 +244,27 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     static _GLIBCXX_USE_CONSTEXPR bool has_infinity = false;\n \n     /** True if the type has a representation for a quiet (non-signaling)\n-\t<em>Not a Number</em>.  */\n+\tNot a Number.  */\n     static _GLIBCXX_USE_CONSTEXPR bool has_quiet_NaN = false;\n \n     /** True if the type has a representation for a signaling\n-\t<em>Not a Number</em>.  */\n+\tNot a Number.  */\n     static _GLIBCXX_USE_CONSTEXPR bool has_signaling_NaN = false;\n \n     /** See std::float_denorm_style for more information.  */\n     static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm = denorm_absent;\n \n-    /** <em>True if loss of accuracy is detected as a denormalization loss,\n-\trather than as an inexact result.</em> [18.2.1.2]/42  */\n+    /** True if loss of accuracy is detected as a denormalization loss,\n+\trather than as an inexact result. */\n     static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false;\n \n     /** True if-and-only-if the type adheres to the IEC 559 standard, also\n \tknown as IEEE 754.  (Only makes sense for floating point types.)  */\n     static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false;\n \n-    /** <em>True if the set of values representable by the type is\n+    /** True if the set of values representable by the type is\n \tfinite.  All built-in types are bounded, this member would be\n-\tfalse for arbitrary precision types.</em> [18.2.1.2]/54  */\n+\tfalse for arbitrary precision types. */\n     static _GLIBCXX_USE_CONSTEXPR bool is_bounded = false;\n \n     /** True if the type is @e modulo. A type is modulo if, for any\n@@ -334,12 +332,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX_CONSTEXPR _Tp\n       infinity() _GLIBCXX_USE_NOEXCEPT { return _Tp(); }\n \n-      /** The representation of a quiet <em>Not a Number</em>,\n+      /** The representation of a quiet Not a Number,\n \t  if @c has_quiet_NaN. */\n       static _GLIBCXX_CONSTEXPR _Tp\n       quiet_NaN() _GLIBCXX_USE_NOEXCEPT { return _Tp(); }\n \n-      /** The representation of a signaling <em>Not a Number</em>, if\n+      /** The representation of a signaling Not a Number, if\n \t  @c has_signaling_NaN. */\n       static _GLIBCXX_CONSTEXPR _Tp\n       signaling_NaN() _GLIBCXX_USE_NOEXCEPT { return _Tp(); }"}, {"sha": "ee2b2e1d4c20dc625cc77e776dd69fa4685bf54b", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ffa2badb103d36c35e0852de45a9bf5e6cbf6a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ffa2badb103d36c35e0852de45a9bf5e6cbf6a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=c0ffa2badb103d36c35e0852de45a9bf5e6cbf6a", "patch": "@@ -43,6 +43,11 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+  /**\n+   *  @addtogroup utilities\n+   *  @{\n+   */\n+\n   // Adds a const reference to a non-reference type.\n   template<typename _Tp>\n     struct __add_c_ref\n@@ -1018,6 +1023,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n     };\n \n+  /// tuple_cat\n   template<typename... _Tpls, typename = typename\n            enable_if<__and_<__is_tuple_like<_Tpls>...>::value>::type>\n     constexpr auto\n@@ -1030,11 +1036,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __concater::_S_do(std::forward<_Tpls>(__tpls)...);\n     }\n \n+  /// tie\n   template<typename... _Elements>\n     inline tuple<_Elements&...>\n     tie(_Elements&... __args) noexcept\n     { return tuple<_Elements&...>(__args...); }\n \n+  /// swap\n   template<typename... _Elements>\n     inline void \n     swap(tuple<_Elements...>& __x, tuple<_Elements...>& __y)\n@@ -1080,8 +1088,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)\n       { }\n \n+  /// @}\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace\n+} // namespace std\n \n #endif // C++11\n "}, {"sha": "62d59128f9ff3311943b1ce485b7c68fd406b19c", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ffa2badb103d36c35e0852de45a9bf5e6cbf6a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ffa2badb103d36c35e0852de45a9bf5e6cbf6a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=c0ffa2badb103d36c35e0852de45a9bf5e6cbf6a", "patch": "@@ -1,4 +1,4 @@\n-// C++11 type_traits -*- C++ -*-\n+// C++11 <type_traits> -*- C++ -*-\n \n // Copyright (C) 2007-2013 Free Software Foundation, Inc.\n //\n@@ -42,7 +42,7 @@ namespace std _GLIBCXX_VISIBILITY(default)\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /**\n-   * @defgroup metaprogramming Metaprogramming and type traits\n+   * @defgroup metaprogramming Metaprogramming\n    * @ingroup utilities\n    *\n    * Template utilities for compile-time introspection and modification,\n@@ -62,15 +62,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       constexpr operator value_type() { return value; }\n     };\n   \n+  template<typename _Tp, _Tp __v>\n+    constexpr _Tp integral_constant<_Tp, __v>::value;\n+\n   /// The type used as a compile-time boolean with true value.\n   typedef integral_constant<bool, true>     true_type;\n \n   /// The type used as a compile-time boolean with false value.\n   typedef integral_constant<bool, false>    false_type;\n \n-  template<typename _Tp, _Tp __v>\n-    constexpr _Tp integral_constant<_Tp, __v>::value;\n-\n   // Meta programming helper types.\n \n   template<bool, typename, typename>\n@@ -145,7 +145,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   struct __failure_type\n   { };\n \n-  // primary type categories.\n+  // Primary type categories.\n \n   template<typename>\n     struct remove_cv;\n@@ -426,7 +426,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t      remove_cv<_Tp>::type>::value)>\n     { };\n \n-  // composite type categories.\n+  // Composite type categories.\n \n   /// is_reference\n   template<typename _Tp>\n@@ -484,7 +484,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t      typename remove_cv<_Tp>::type>::value)>\n     { };\n \n-  // type properties.\n+  // Type properties.\n \n   /// is_const\n   template<typename>\n@@ -577,7 +577,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { };\n \n \n-  // destructible and constructible type properties\n+  // Destructible and constructible type properties.\n \n   template<typename>\n     struct add_rvalue_reference;\n@@ -1271,7 +1271,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { };\n \n \n-  // type relations.\n+  // Type relations.\n \n   /// is_same\n   template<typename, typename>\n@@ -1320,7 +1320,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { };\n \n \n-  // const-volatile modifications.\n+  // Const-volatile modifications.\n \n   /// remove_const\n   template<typename _Tp>\n@@ -1420,7 +1420,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { };\n \n \n-  // sign modifications.\n+  // Sign modifications.\n \n   // Utility for constructing identically cv-qualified types.\n   template<typename _Unqualified, bool _IsConst, bool _IsVol>\n@@ -1617,7 +1617,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct make_signed<bool>;\n \n \n-  // array modifications.\n+  // Array modifications.\n \n   /// remove_extent\n   template<typename _Tp>\n@@ -1646,7 +1646,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { typedef typename remove_all_extents<_Tp>::type     type; };\n \n \n-  // pointer modifications.\n+  // Pointer modifications.\n \n   template<typename _Tp, typename>\n     struct __remove_pointer_helper\n@@ -1789,7 +1789,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename... _Tp>\n     struct common_type;\n \n-  // sfinae-friendly common_type implementation:\n+  // Sfinae-friendly common_type implementation:\n \n   struct __do_common_type_impl\n   {\n@@ -1877,7 +1877,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Signature>\n     class result_of;\n \n-  // sfinae-friendly result_of implementation:\n+  // Sfinae-friendly result_of implementation:\n \n   // [func.require] paragraph 1 bullet 1:\n   struct __result_of_memfun_ref_impl\n@@ -2034,6 +2034,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    _Functor, _ArgTypes...\n       >::type\n     { };\n+\n+  /// @} group metaprogramming\n \t\n   /**\n    *  Use SFINAE to determine if the type _Tp has a publicly-accessible\n@@ -2064,9 +2066,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t<typename remove_cv<_Tp>::type>::value>  \\\n     { };\n \n-  /// @} group metaprogramming\n _GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace\n+} // namespace std\n \n #endif  // C++11\n "}, {"sha": "9e6db30a72a171e6050357f03f68e60a2e1414c8", "filename": "libstdc++-v3/include/std/typeindex", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ffa2badb103d36c35e0852de45a9bf5e6cbf6a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftypeindex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ffa2badb103d36c35e0852de45a9bf5e6cbf6a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftypeindex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftypeindex?ref=c0ffa2badb103d36c35e0852de45a9bf5e6cbf6a", "patch": "@@ -1,4 +1,4 @@\n-// C++0x typeindex -*- C++ -*-\n+// C++11 <typeindex> -*- C++ -*-\n \n // Copyright (C) 2010-2013 Free Software Foundation, Inc.\n //\n@@ -42,9 +42,12 @@ namespace std _GLIBCXX_VISIBILITY(default)\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /**\n-     @brief The class type_index provides a simple wrapper for type_info\n-     which can be used as an index type in associative containers (23.6)\n-     and in unordered associative containers (23.7).\n+   * @brief Class type_index\n+   * @ingroup utilities\n+   *\n+   *  The class type_index provides a simple wrapper for type_info\n+   *  which can be used as an index type in associative containers\n+   *  (23.6) and in unordered associative containers (23.7).\n    */\n   struct type_index\n   {\n@@ -102,7 +105,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     };\n \n _GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace\n+} // namespace std\n \n #endif  // C++11\n "}, {"sha": "7f4ce51377773e41c99f5be3f77a6b31a871adf6", "filename": "libstdc++-v3/include/tr1/memory", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ffa2badb103d36c35e0852de45a9bf5e6cbf6a/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fmemory", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ffa2badb103d36c35e0852de45a9bf5e6cbf6a/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fmemory", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fmemory?ref=c0ffa2badb103d36c35e0852de45a9bf5e6cbf6a", "patch": "@@ -32,8 +32,8 @@\n \n #pragma GCC system_header\n \n-#if defined(_GLIBCXX_INCLUDE_AS_CXX0X)\n-#  error TR1 header cannot be included from C++0x header\n+#if defined(_GLIBCXX_INCLUDE_AS_CXX11)\n+#  error TR1 header cannot be included from C++11 header\n #endif\n \n #include <memory>"}, {"sha": "dfcc3a90467dbe3e40d433fc6d5081af27ac781e", "filename": "libstdc++-v3/include/tr1/regex", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ffa2badb103d36c35e0852de45a9bf5e6cbf6a/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fregex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ffa2badb103d36c35e0852de45a9bf5e6cbf6a/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fregex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fregex?ref=c0ffa2badb103d36c35e0852de45a9bf5e6cbf6a", "patch": "@@ -847,7 +847,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t: _M_flags(__f), _M_pattern(__first, __last), _M_mark_count(0)\n         { _M_compile(); }\n \n-#ifdef _GLIBCXX_INCLUDE_AS_CXX0X\n+#ifdef _GLIBCXX_INCLUDE_AS_CXX11\n       /**\n        * @brief Constructs a basic regular expression from an initializer list.\n        *\n@@ -986,7 +986,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t       flag_type __flags = regex_constants::ECMAScript)\n         { return this->assign(string_type(__first, __last), __flags); }\n \n-#ifdef _GLIBCXX_INCLUDE_AS_CXX0X\n+#ifdef _GLIBCXX_INCLUDE_AS_CXX11\n       /**\n        * @brief Assigns a new regular expression to a regex object.\n        *\n@@ -1966,7 +1966,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       begin() const\n       { return _Base_type::begin(); }\n       \n-#ifdef _GLIBCXX_INCLUDE_AS_CXX0X\n+#ifdef _GLIBCXX_INCLUDE_AS_CXX11\n       /**\n        * @brief Gets an iterator to the start of the %sub_match collection.\n        */\n@@ -1982,7 +1982,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       end() const\n       { return _Base_type::end(); }\n       \n-#ifdef _GLIBCXX_INCLUDE_AS_CXX0X\n+#ifdef _GLIBCXX_INCLUDE_AS_CXX11\n       /**\n        * @brief Gets an iterator to one-past-the-end of the collection.\n        */"}, {"sha": "75b2f4f9758994a0b57be08e4f676bbb8f7ea140", "filename": "libstdc++-v3/scripts/run_doxygen", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ffa2badb103d36c35e0852de45a9bf5e6cbf6a/libstdc%2B%2B-v3%2Fscripts%2Frun_doxygen", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ffa2badb103d36c35e0852de45a9bf5e6cbf6a/libstdc%2B%2B-v3%2Fscripts%2Frun_doxygen", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fscripts%2Frun_doxygen?ref=c0ffa2badb103d36c35e0852de45a9bf5e6cbf6a", "patch": "@@ -205,6 +205,8 @@ if $do_html; then\n   cd ${outdir}/${mode}\n \n   #doxytag -t libstdc++.tag . > /dev/null 2>&1\n+\n+  # Strip pathnames from tag file.\n   sed -e '/<path>/d' libstdc++.tag > TEMP\n   mv TEMP libstdc++.tag\n "}, {"sha": "e5f015fa146ceb9b4de570f0cbb5fd75d86afc08", "filename": "libstdc++-v3/testsuite/20_util/uses_allocator/cons_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0ffa2badb103d36c35e0852de45a9bf5e6cbf6a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2Fcons_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0ffa2badb103d36c35e0852de45a9bf5e6cbf6a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2Fcons_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2Fcons_neg.cc?ref=c0ffa2badb103d36c35e0852de45a9bf5e6cbf6a", "patch": "@@ -44,4 +44,4 @@ void test01()\n \n   tuple<Type> t(allocator_arg, a, 1);\n }\n-// { dg-error \"no matching function\" \"\" { target *-*-* } 113 }\n+// { dg-error \"no matching function\" \"\" { target *-*-* } 118 }"}]}