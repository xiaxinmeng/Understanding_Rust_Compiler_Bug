{"sha": "e4dfaf724fb00007371cf3ff0ee86b5ec52cc558", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTRkZmFmNzI0ZmIwMDAwNzM3MWNmM2ZmMGVlODZiNWVjNTJjYzU1OA==", "commit": {"author": {"name": "Laurynas Biveinis", "email": "laurynas.biveinis@gmail.com", "date": "2010-05-26T11:24:42Z"}, "committer": {"name": "Laurynas Biveinis", "email": "lauras@gcc.gnu.org", "date": "2010-05-26T11:24:42Z"}, "message": "ggc-zone.c: Update copyright year.\n\n2010-05-26  Laurynas Biveinis  <laurynas.biveinis@gmail.com>\n\n\t* ggc-zone.c: Update copyright year.\n\t(poison_region): Mark memory for Valgrind as undefined before\n\tmemset () call and inaccessible afterwards.\n\t(ggc_pch_total_size): Change type of i to int.\n\n2010-05-26  Laurynas Biveinis  <laurynas.biveinis@gmail.com>\n\n\t* ggc-common.c (ggc_free_overhead): Allow empty slot.\n\n2010-05-26  Laurynas Biveinis  <laurynas.biveinis@gmail.com>\n\n\t* ggc-common.c: Update copyright year.\n\t(ggc_rlimit_bound): Remove prototype.  Compile only if\n\t!ENABLE_GC_CHECKING && !ENABLE_GC_ALWAYS_COLLECT.\n\t(ggc_min_heapsize_heuristic): Compile only if !ENABLE_GC_CHECKING\n\t&& !ENABLE_GC_ALWAYS_COLLECT.  Make static.\n\t(ggc_min_heapsize_heuristic): Likewise.\n\nFrom-SVN: r159863", "tree": {"sha": "37c08416aaec00456b907de173556f4632bab3b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37c08416aaec00456b907de173556f4632bab3b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4dfaf724fb00007371cf3ff0ee86b5ec52cc558", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4dfaf724fb00007371cf3ff0ee86b5ec52cc558", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4dfaf724fb00007371cf3ff0ee86b5ec52cc558", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4dfaf724fb00007371cf3ff0ee86b5ec52cc558/comments", "author": {"login": "laurynas-biveinis", "id": 58894, "node_id": "MDQ6VXNlcjU4ODk0", "avatar_url": "https://avatars.githubusercontent.com/u/58894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/laurynas-biveinis", "html_url": "https://github.com/laurynas-biveinis", "followers_url": "https://api.github.com/users/laurynas-biveinis/followers", "following_url": "https://api.github.com/users/laurynas-biveinis/following{/other_user}", "gists_url": "https://api.github.com/users/laurynas-biveinis/gists{/gist_id}", "starred_url": "https://api.github.com/users/laurynas-biveinis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/laurynas-biveinis/subscriptions", "organizations_url": "https://api.github.com/users/laurynas-biveinis/orgs", "repos_url": "https://api.github.com/users/laurynas-biveinis/repos", "events_url": "https://api.github.com/users/laurynas-biveinis/events{/privacy}", "received_events_url": "https://api.github.com/users/laurynas-biveinis/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e12da9c28bfa69bb6fc868841855851527a3db14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e12da9c28bfa69bb6fc868841855851527a3db14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e12da9c28bfa69bb6fc868841855851527a3db14"}], "stats": {"total": 54, "additions": 43, "deletions": 11}, "files": [{"sha": "4e022304ebd0013aad8d28acdf25e5c8346070f5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4dfaf724fb00007371cf3ff0ee86b5ec52cc558/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4dfaf724fb00007371cf3ff0ee86b5ec52cc558/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e4dfaf724fb00007371cf3ff0ee86b5ec52cc558", "patch": "@@ -1,3 +1,23 @@\n+2010-05-26  Laurynas Biveinis  <laurynas.biveinis@gmail.com>\n+\n+\t* ggc-zone.c: Update copyright year.\n+\t(poison_region): Mark memory for Valgrind as undefined before\n+\tmemset () call and inaccessible afterwards.\n+\t(ggc_pch_total_size): Change type of i to int.\n+\n+2010-05-26  Laurynas Biveinis  <laurynas.biveinis@gmail.com>\n+\n+\t* ggc-common.c (ggc_free_overhead): Allow empty slot.\n+\n+2010-05-26  Laurynas Biveinis  <laurynas.biveinis@gmail.com>\n+\n+\t* ggc-common.c: Update copyright year.\n+\t(ggc_rlimit_bound): Remove prototype.  Compile only if\n+\t!ENABLE_GC_CHECKING && !ENABLE_GC_ALWAYS_COLLECT.\n+\t(ggc_min_heapsize_heuristic): Compile only if !ENABLE_GC_CHECKING\n+\t&& !ENABLE_GC_ALWAYS_COLLECT.  Make static.\n+\t(ggc_min_heapsize_heuristic): Likewise.\n+\n 2010-05-26  Richard Guenther  <rguenther@suse.de>\n \n \tPR rtl-optimization/44164"}, {"sha": "76bf975c86fb9f5ad7d16bc29d27c1a75a85c46b", "filename": "gcc/ggc-common.c", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4dfaf724fb00007371cf3ff0ee86b5ec52cc558/gcc%2Fggc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4dfaf724fb00007371cf3ff0ee86b5ec52cc558/gcc%2Fggc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-common.c?ref=e4dfaf724fb00007371cf3ff0ee86b5ec52cc558", "patch": "@@ -1,6 +1,6 @@\n /* Simple garbage collection for the GNU compiler.\n-   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n-   Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,\n+   2009, 2010 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -70,7 +70,6 @@ static int compare_ptr_data (const void *, const void *);\n static void relocate_ptrs (void *, void *);\n static void write_pch_globals (const struct ggc_root_tab * const *tab,\n \t\t\t       struct traversal_state *state);\n-static double ggc_rlimit_bound (double);\n \n /* Maintain global roots that are preserved during GC.  */\n \n@@ -742,6 +741,8 @@ mmap_gt_pch_use_address (void *base, size_t size, int fd, size_t offset)\n }\n #endif /* HAVE_MMAP_FILE */\n \n+#if !defined ENABLE_GC_CHECKING && !defined ENABLE_GC_ALWAYS_COLLECT\n+\n /* Modify the bound based on rlimits.  */\n static double\n ggc_rlimit_bound (double limit)\n@@ -776,7 +777,7 @@ ggc_rlimit_bound (double limit)\n }\n \n /* Heuristic to set a default for GGC_MIN_EXPAND.  */\n-int\n+static int\n ggc_min_expand_heuristic (void)\n {\n   double min_expand = physmem_total();\n@@ -795,7 +796,7 @@ ggc_min_expand_heuristic (void)\n }\n \n /* Heuristic to set a default for GGC_MIN_HEAPSIZE.  */\n-int\n+static int\n ggc_min_heapsize_heuristic (void)\n {\n   double phys_kbytes = physmem_total();\n@@ -832,6 +833,7 @@ ggc_min_heapsize_heuristic (void)\n \n   return phys_kbytes;\n }\n+#endif\n \n void\n init_ggc_heuristics (void)\n@@ -980,7 +982,13 @@ ggc_free_overhead (void *ptr)\n {\n   PTR *slot = htab_find_slot_with_hash (ptr_hash, ptr, htab_hash_pointer (ptr),\n \t\t\t\t\tNO_INSERT);\n-  struct ptr_hash_entry *p = (struct ptr_hash_entry *) *slot;\n+  struct ptr_hash_entry *p;\n+  /* The pointer might be not found if a PCH read happened between allocation\n+     and ggc_free () call.  FIXME: account memory properly in the presence of\n+     PCH. */\n+  if (!slot)\n+      return;\n+  p = (struct ptr_hash_entry *) *slot;\n   p->loc->freed += p->size;\n   htab_clear_slot (ptr_hash, slot);\n   free (p);"}, {"sha": "a8154cc4de0f3e7714b0fcbcd14d8e1e633a2e30", "filename": "gcc/ggc-zone.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4dfaf724fb00007371cf3ff0ee86b5ec52cc558/gcc%2Fggc-zone.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4dfaf724fb00007371cf3ff0ee86b5ec52cc558/gcc%2Fggc-zone.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-zone.c?ref=e4dfaf724fb00007371cf3ff0ee86b5ec52cc558", "patch": "@@ -1,6 +1,6 @@\n /* \"Bag-of-pages\" zone garbage collector for the GNU compiler.\n-   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008\n-   Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008,\n+   2010 Free Software Foundation, Inc.\n \n    Contributed by Richard Henderson (rth@redhat.com) and Daniel Berlin\n    (dberlin@dberlin.org).  Rewritten by Daniel Jacobowitz\n@@ -1385,8 +1385,12 @@ ggc_alloc_stat (size_t size MEM_STAT_DECL)\n \n /* Poison the chunk.  */\n #ifdef ENABLE_GC_CHECKING\n-#define poison_region(PTR, SIZE) \\\n-  memset ((PTR), 0xa5, (SIZE))\n+#define poison_region(PTR, SIZE)\t\t\t\t      \\\n+  do {\t\t\t\t\t\t\t\t      \\\n+    VALGRIND_DISCARD (VALGRIND_MAKE_MEM_UNDEFINED ((PTR), (SIZE)));   \\\n+    memset ((PTR), 0xa5, (SIZE));\t\t\t\t      \\\n+    VALGRIND_DISCARD (VALGRIND_MAKE_MEM_NOACCESS ((PTR), (SIZE)));    \\\n+  } while (0)\n #else\n #define poison_region(PTR, SIZE)\n #endif\n@@ -2349,7 +2353,7 @@ ggc_pch_count_object (struct ggc_pch_data *d, void *x ATTRIBUTE_UNUSED,\n size_t\n ggc_pch_total_size (struct ggc_pch_data *d)\n {\n-  enum gt_types_enum i;\n+  int i;\n   size_t alloc_size, total_size;\n \n   total_size = 0;"}]}