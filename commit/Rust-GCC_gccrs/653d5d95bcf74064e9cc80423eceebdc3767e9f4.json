{"sha": "653d5d95bcf74064e9cc80423eceebdc3767e9f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjUzZDVkOTViY2Y3NDA2NGU5Y2M4MDQyM2VjZWViZGMzNzY3ZTlmNA==", "commit": {"author": {"name": "Alexandre Petit-Bianco", "email": "apbianco@redhat.com", "date": "2001-09-14T22:58:37Z"}, "committer": {"name": "Alexandre Petit-Bianco", "email": "apbianco@gcc.gnu.org", "date": "2001-09-14T22:58:37Z"}, "message": "java-tree.h (TYPE_IMPORT_LIST): New macro.\n\n2001-09-13  Alexandre Petit-Bianco  <apbianco@redhat.com>\n\n\t* java-tree.h (TYPE_IMPORT_LIST): New macro.\n\t(TYPE_IMPORT_DEMAND_LIST): Likewise.\n\t(struct lang_type): New fields import_list and import_demand_list.\n\t* parse.y (java_complete_class): Initialize TYPE_IMPORT_LIST and\n\tTYPE_IMPORT_DEMAND_LIST with ctxp counterparts.\n\t(do_resolve_class): New local saved_enclosing_type, initialized,\n\tpassed as parameter to find_in_imports and find_in_imports_on_demand.\n\t(find_in_imports): Added paramater enclosing_type, use its\n\tTYPE_IMPORT_LIST when applicable.\n\t(find_in_imports_on_demand): Added parameter enclosing_type, use\n\tits TYPE_IMPORT_DEMAND_LIST when applicable. Reorganized locals\n\tdeclaration and initialization.\n\t(fold_constant_for_init): Switch/restore current_class to the\n\tappropriate context.\n\n( http://gcc.gnu.org/ml/gcc-patches/2001-09/msg00563.html )\n\nFrom-SVN: r45619", "tree": {"sha": "d7b09b10f0dd78bec10dd581bb4270ea3e34a66c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7b09b10f0dd78bec10dd581bb4270ea3e34a66c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/653d5d95bcf74064e9cc80423eceebdc3767e9f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/653d5d95bcf74064e9cc80423eceebdc3767e9f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/653d5d95bcf74064e9cc80423eceebdc3767e9f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/653d5d95bcf74064e9cc80423eceebdc3767e9f4/comments", "author": null, "committer": null, "parents": [{"sha": "846f046709389edeb34698ac0198b58c8f01a6de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/846f046709389edeb34698ac0198b58c8f01a6de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/846f046709389edeb34698ac0198b58c8f01a6de"}], "stats": {"total": 78, "additions": 61, "deletions": 17}, "files": [{"sha": "2c2f77cb4dea38cd73084e363911f68d2e81037e", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/653d5d95bcf74064e9cc80423eceebdc3767e9f4/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/653d5d95bcf74064e9cc80423eceebdc3767e9f4/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=653d5d95bcf74064e9cc80423eceebdc3767e9f4", "patch": "@@ -1,3 +1,20 @@\n+2001-09-13  Alexandre Petit-Bianco  <apbianco@redhat.com>\n+\n+\t* java-tree.h (TYPE_IMPORT_LIST): New macro.\n+\t(TYPE_IMPORT_DEMAND_LIST): Likewise.\n+\t(struct lang_type): New fields import_list and import_demand_list.\n+\t* parse.y (java_complete_class): Initialize TYPE_IMPORT_LIST and\n+\tTYPE_IMPORT_DEMAND_LIST with ctxp counterparts.\n+\t(do_resolve_class): New local saved_enclosing_type, initialized,\n+\tpassed as parameter to find_in_imports and find_in_imports_on_demand.\n+\t(find_in_imports): Added paramater enclosing_type, use its\n+\tTYPE_IMPORT_LIST when applicable.\n+\t(find_in_imports_on_demand): Added parameter enclosing_type, use\n+\tits TYPE_IMPORT_DEMAND_LIST when applicable. Reorganized locals\n+\tdeclaration and initialization.\n+\t(fold_constant_for_init): Switch/restore current_class to the\n+\tappropriate context.\n+\n 2001-09-13  Mark Mitchell  <mark@codesourcery.com>\n \n \t* verify.c (verify_jvm_instructions): Fix typo."}, {"sha": "22be14965cca68547f9f2cc97bd004f1843f62fb", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/653d5d95bcf74064e9cc80423eceebdc3767e9f4/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/653d5d95bcf74064e9cc80423eceebdc3767e9f4/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=653d5d95bcf74064e9cc80423eceebdc3767e9f4", "patch": "@@ -950,6 +950,8 @@ struct lang_decl_var\n    for non primitive types when compiling to bytecode. */\n #define TYPE_DOT_CLASS(T)        (TYPE_LANG_SPECIFIC(T)->dot_class)\n #define TYPE_PACKAGE_LIST(T)     (TYPE_LANG_SPECIFIC(T)->package_list)\n+#define TYPE_IMPORT_LIST(T)      (TYPE_LANG_SPECIFIC(T)->import_list)\n+#define TYPE_IMPORT_DEMAND_LIST(T) (TYPE_LANG_SPECIFIC(T)->import_demand_list)\n #define TYPE_PRIVATE_INNER_CLASS(T) (TYPE_LANG_SPECIFIC(T)->pic)\n #define TYPE_PROTECTED_INNER_CLASS(T) (TYPE_LANG_SPECIFIC(T)->poic)\n #define TYPE_HAS_FINAL_VARIABLE(T) (TYPE_LANG_SPECIFIC(T)->hfv)\n@@ -968,6 +970,8 @@ struct lang_type\n \t\t\t\t   compiling to bytecode to implement\n \t\t\t\t   <non_primitive_type>.class */\n   tree package_list;\t\t/* List of package names, progressive */\n+  tree import_list;\t\t/* Imported types, in the CU of this class */\n+  tree import_demand_list;\t/* Imported types, in the CU of this class */\n   unsigned pic:1;\t\t/* Private Inner Class. */\n   unsigned poic:1;\t\t/* Protected Inner Class. */\n   unsigned hfv:1;\t\t/* Has final variables */"}, {"sha": "97efb5b0d1c8f6b5fa33a77054178de4fc02b41a", "filename": "gcc/java/parse.y", "status": "modified", "additions": 40, "deletions": 17, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/653d5d95bcf74064e9cc80423eceebdc3767e9f4/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/653d5d95bcf74064e9cc80423eceebdc3767e9f4/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=653d5d95bcf74064e9cc80423eceebdc3767e9f4", "patch": "@@ -99,8 +99,8 @@ static tree parse_jdk1_1_error PARAMS ((const char *));\n static void complete_class_report_errors PARAMS ((jdep *));\n static int process_imports PARAMS ((void));\n static void read_import_dir PARAMS ((tree));\n-static int find_in_imports_on_demand PARAMS ((tree));\n-static void find_in_imports PARAMS ((tree));\n+static int find_in_imports_on_demand PARAMS ((tree, tree));\n+static void find_in_imports PARAMS ((tree, tree));\n static void check_static_final_variable_assignment_flag PARAMS ((tree));\n static void reset_static_final_variable_assignment_flag PARAMS ((tree));\n static void check_final_variable_local_assignment_flag PARAMS ((tree, tree));\n@@ -5564,6 +5564,13 @@ java_complete_class ()\n        cclass = TREE_CHAIN (cclass), cclassd = CLASSD_CHAIN (cclassd))\n     {\n       jdep *dep;\n+\n+      /* We keep the compilation unit imports in the class so that\n+\t they can be used later to resolve type dependencies that\n+\t aren't necessary to solve now. */\n+      TYPE_IMPORT_LIST (TREE_TYPE (cclass)) = ctxp->import_list;\n+      TYPE_IMPORT_DEMAND_LIST (TREE_TYPE (cclass)) = ctxp->import_demand_list;\n+\n       for (dep = CLASSD_FIRST (cclassd); dep; dep = JDEP_CHAIN (dep))\n \t{\n \t  tree decl;\n@@ -5750,6 +5757,7 @@ do_resolve_class (enclosing, class_type, decl, cl)\n      tree enclosing, class_type, decl, cl;\n {\n   tree new_class_decl = NULL_TREE, super = NULL_TREE;\n+  tree saved_enclosing_type = enclosing ? TREE_TYPE (enclosing) : NULL_TREE;\n   struct hash_table _ht, *circularity_hash = &_ht;\n \n   /* This hash table is used to register the classes we're going\n@@ -5786,7 +5794,7 @@ do_resolve_class (enclosing, class_type, decl, cl)\n \n   /* 1- Check for the type in single imports. This will change\n      TYPE_NAME() if something relevant is found */\n-  find_in_imports (class_type);\n+  find_in_imports (saved_enclosing_type, class_type);\n \n   /* 2- And check for the type in the current compilation unit */\n   if ((new_class_decl = IDENTIFIER_CLASS_VALUE (TYPE_NAME (class_type))))\n@@ -5808,7 +5816,7 @@ do_resolve_class (enclosing, class_type, decl, cl)\n   /* 4- Check the import on demands. Don't allow bar.baz to be\n      imported from foo.* */\n   if (!QUALIFIED_P (TYPE_NAME (class_type)))\n-    if (find_in_imports_on_demand (class_type))\n+    if (find_in_imports_on_demand (saved_enclosing_type, class_type))\n       return NULL_TREE;\n \n   /* If found in find_in_imports_on_demant, the type has already been\n@@ -6710,17 +6718,22 @@ process_imports ()\n    statement.  */\n \n static void\n-find_in_imports (class_type)\n+find_in_imports (enclosing_type, class_type)\n+     tree enclosing_type;\n      tree class_type;\n {\n-  tree import;\n-\n-  for (import = ctxp->import_list; import; import = TREE_CHAIN (import))\n-    if (TREE_VALUE (import) == TYPE_NAME (class_type))\n-      {\n-\tTYPE_NAME (class_type) = EXPR_WFL_NODE (TREE_PURPOSE (import));\n-\tQUALIFIED_P (TYPE_NAME (class_type)) = 1;\n-      }\n+  tree import = (enclosing_type ? TYPE_IMPORT_LIST (enclosing_type) : \n+\t\t ctxp->import_list);\n+  while (import)\n+    {\n+      if (TREE_VALUE (import) == TYPE_NAME (class_type))\n+\t{\n+\t  TYPE_NAME (class_type) = EXPR_WFL_NODE (TREE_PURPOSE (import));\n+\t  QUALIFIED_P (TYPE_NAME (class_type)) = 1;\n+\t  return;\n+\t}\n+      import = TREE_CHAIN (import);\n+    }\n }\n \n static int\n@@ -6869,14 +6882,17 @@ read_import_dir (wfl)\n    entire list, to detected potential double definitions.  */\n \t\t \n static int\n-find_in_imports_on_demand (class_type)\n+find_in_imports_on_demand (enclosing_type, class_type)\n+     tree enclosing_type;\n      tree class_type;\n {\n-  tree node, import, node_to_use = NULL_TREE;\n+  tree import = (enclosing_type ? TYPE_IMPORT_DEMAND_LIST (enclosing_type) :\n+\t\t  ctxp->import_demand_list);\n+  tree node_to_use = NULL_TREE, cl = NULL_TREE;\n+  tree node;\n   int seen_once = -1;\n-  tree cl = NULL_TREE;\n \n-  for (import = ctxp->import_demand_list; import; import = TREE_CHAIN (import))\n+  while (import)\n     {\n       const char *id_name;\n       obstack_grow (&temporary_obstack, \n@@ -6907,6 +6923,7 @@ find_in_imports_on_demand (class_type)\n \t\t IDENTIFIER_POINTER (EXPR_WFL_NODE (TREE_PURPOSE (import))));\n \t    }\n \t}\n+      import = TREE_CHAIN (import);\n     }\n \n   if (seen_once == 1)\n@@ -16129,8 +16146,14 @@ fold_constant_for_init (node, context)\n \t    }\n \t  else\n \t    {\n+\t      /* Install the proper context for the field resolution.\n+\t\t The prior context is restored once the name is\n+\t\t properly qualified. */\n+\t      tree saved_current_class = current_class;\n \t      /* Wait until the USE_COMPONENT_REF re-write.  FIXME. */\n+\t      current_class = DECL_CONTEXT (context);\n \t      qualify_ambiguous_name (node);\n+\t      current_class = saved_current_class;\n \t      if (resolve_field_access (node, &decl, NULL)\n \t\t  && decl != NULL_TREE)\n \t\treturn fold_constant_for_init (decl, decl);"}]}