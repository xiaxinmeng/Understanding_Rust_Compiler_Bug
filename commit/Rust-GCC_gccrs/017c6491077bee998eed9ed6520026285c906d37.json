{"sha": "017c6491077bee998eed9ed6520026285c906d37", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDE3YzY0OTEwNzdiZWU5OThlZWQ5ZWQ2NTIwMDI2Mjg1YzkwNmQzNw==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2019-11-08T01:21:40Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2019-11-08T01:21:40Z"}, "message": "Handle removal of old-style function definitions in C2x.\n\nC2x removes support for old-style function definitions with identifier\nlists, changing () in function definitions to be equivalent to (void)\n(while () in declarations that are not definitions still gives an\nunprototyped type).\n\nThis patch updates GCC accordingly.  The new semantics for () are\nimplemented for C2x mode (meaning () in function definitions isn't\ndiagnosed by -Wold-style-definition in that mode).\n-Wold-style-definition is enabled by default, and turned into a\npedwarn, for C2x.\n\nBootstrapped with no regressions on x86_64-pc-linux-gnu.\n\ngcc:\n\t* doc/invoke.texi (-Wold-style-definition): Document () not being\n\tconsidered an old-style definition for C2x.\n\ngcc/c:\n\t* c-decl.c (grokparms): Convert () in a function definition to\n\t(void) for C2x.\n\t(store_parm_decls_oldstyle): Pedwarn for C2x.\n\t(store_parm_decls): Update comment about () not generating a\n\tprototype.\n\ngcc/c-family:\n\t* c.opt (Wold-style-definition): Initialize to -1.\n\t* c-opts.c (c_common_post_options): Set warn_old_style_definition\n\tto flag_isoc2x if not set explicitly.\n\ngcc/testsuite:\n\t* gcc.dg/c11-old-style-definition-1.c,\n\tgcc.dg/c11-old-style-definition-2.c,\n\tgcc.dg/c2x-old-style-definition-1.c,\n\tgcc.dg/c2x-old-style-definition-2.c,\n\tgcc.dg/c2x-old-style-definition-3.c,\n\tgcc.dg/c2x-old-style-definition-4.c,\n\tgcc.dg/c2x-old-style-definition-5.c,\n\tgcc.dg/c2x-old-style-definition-6.c: New tests.\n\nFrom-SVN: r277945", "tree": {"sha": "17e627d2d781e8f6c48233b95f8bec50f1734fe2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17e627d2d781e8f6c48233b95f8bec50f1734fe2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/017c6491077bee998eed9ed6520026285c906d37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/017c6491077bee998eed9ed6520026285c906d37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/017c6491077bee998eed9ed6520026285c906d37", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/017c6491077bee998eed9ed6520026285c906d37/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d6e7aa95cf3b354dded4cb1a8c546cbe217beb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d6e7aa95cf3b354dded4cb1a8c546cbe217beb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d6e7aa95cf3b354dded4cb1a8c546cbe217beb9"}], "stats": {"total": 160, "additions": 151, "deletions": 9}, "files": [{"sha": "e723121b8ccb7bb7bb65168a73430fc6dd422cc3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/017c6491077bee998eed9ed6520026285c906d37/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/017c6491077bee998eed9ed6520026285c906d37/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=017c6491077bee998eed9ed6520026285c906d37", "patch": "@@ -1,3 +1,8 @@\n+2019-11-08  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* doc/invoke.texi (-Wold-style-definition): Document () not being\n+\tconsidered an old-style definition for C2x.\n+\n 2019-11-07  John David Anglin  <danglin@gcc.gnu.org>\n \n \t* config/pa/pa.md (memory_barrier): Revise to use ldcw barriers."}, {"sha": "d3e328fc9a0af1c952395abbf14aa38a14c488e4", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/017c6491077bee998eed9ed6520026285c906d37/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/017c6491077bee998eed9ed6520026285c906d37/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=017c6491077bee998eed9ed6520026285c906d37", "patch": "@@ -1,3 +1,9 @@\n+2019-11-08  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c.opt (Wold-style-definition): Initialize to -1.\n+\t* c-opts.c (c_common_post_options): Set warn_old_style_definition\n+\tto flag_isoc2x if not set explicitly.\n+\n 2019-11-07  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-attribs.c (parse_tm_stmt_attr): Handle scoped attributes."}, {"sha": "75b69597be24f0e9f9a5f7ca61bc13368aa3dec1", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/017c6491077bee998eed9ed6520026285c906d37/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/017c6491077bee998eed9ed6520026285c906d37/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=017c6491077bee998eed9ed6520026285c906d37", "patch": "@@ -904,6 +904,10 @@ c_common_post_options (const char **pfilename)\n   if (warn_implicit_int == -1)\n     warn_implicit_int = flag_isoc99;\n \n+  /* -Wold-style-definition is enabled by default for C2X.  */\n+  if (warn_old_style_definition == -1)\n+    warn_old_style_definition = flag_isoc2x;\n+\n   /* -Wshift-overflow is enabled by default in C99 and C++11 modes.  */\n   if (warn_shift_overflow == -1)\n     warn_shift_overflow = cxx_dialect >= cxx11 || flag_isoc99;"}, {"sha": "914a2f0ef4425c340331138081f330bc399d1243", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/017c6491077bee998eed9ed6520026285c906d37/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/017c6491077bee998eed9ed6520026285c906d37/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=017c6491077bee998eed9ed6520026285c906d37", "patch": "@@ -960,7 +960,7 @@ C ObjC Var(warn_old_style_declaration) Warning EnabledBy(Wextra)\n Warn for obsolescent usage in a declaration.\n \n Wold-style-definition\n-C ObjC Var(warn_old_style_definition) Warning\n+C ObjC Var(warn_old_style_definition) Init(-1) Warning\n Warn if an old-style parameter definition is used.\n \n Wopenmp-simd"}, {"sha": "f1d73e4e73cd1e4613e4154c105803b7a03ae5d8", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/017c6491077bee998eed9ed6520026285c906d37/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/017c6491077bee998eed9ed6520026285c906d37/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=017c6491077bee998eed9ed6520026285c906d37", "patch": "@@ -1,3 +1,11 @@\n+2019-11-08  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-decl.c (grokparms): Convert () in a function definition to\n+\t(void) for C2x.\n+\t(store_parm_decls_oldstyle): Pedwarn for C2x.\n+\t(store_parm_decls): Update comment about () not generating a\n+\tprototype.\n+\n 2019-11-07  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-parser.c (c_parser_attribute_arguments): New function."}, {"sha": "2841b4f5a777c0b85b3f716c1f0a0f5ffb60dafe", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/017c6491077bee998eed9ed6520026285c906d37/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/017c6491077bee998eed9ed6520026285c906d37/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=017c6491077bee998eed9ed6520026285c906d37", "patch": "@@ -7416,6 +7416,13 @@ grokparms (struct c_arg_info *arg_info, bool funcdef_flag)\n       tree parm, type, typelt;\n       unsigned int parmno;\n \n+      /* In C2X, convert () in a function definition to (void).  */\n+      if (flag_isoc2x\n+\t  && funcdef_flag\n+\t  && !arg_types\n+\t  && !arg_info->parms)\n+\targ_types = arg_info->types = void_list_node;\n+\n       /* If there is a parameter of incomplete type in a definition,\n \t this is an error.  In a declaration this is valid, and a\n \t struct or union type may be completed later, before any calls\n@@ -9261,8 +9268,15 @@ store_parm_decls_oldstyle (tree fndecl, const struct c_arg_info *arg_info)\n   hash_set<tree> seen_args;\n \n   if (!in_system_header_at (input_location))\n-    warning_at (DECL_SOURCE_LOCATION (fndecl),\n-\t\tOPT_Wold_style_definition, \"old-style function definition\");\n+    {\n+      if (flag_isoc2x)\n+\tpedwarn (DECL_SOURCE_LOCATION (fndecl),\n+\t\t OPT_Wold_style_definition, \"old-style function definition\");\n+      else\n+\twarning_at (DECL_SOURCE_LOCATION (fndecl),\n+\t\t    OPT_Wold_style_definition,\n+\t\t    \"old-style function definition\");\n+    }\n \n   /* Match each formal parameter name with its declaration.  Save each\n      decl in the appropriate TREE_PURPOSE slot of the parmids chain.  */\n@@ -9578,11 +9592,10 @@ store_parm_decls (void)\n   struct c_arg_info *arg_info = current_function_arg_info;\n   current_function_arg_info = 0;\n \n-  /* True if this definition is written with a prototype.  Note:\n-     despite C99 6.7.5.3p14, we can *not* treat an empty argument\n-     list in a function definition as equivalent to (void) -- an\n-     empty argument list specifies the function has no parameters,\n-     but only (void) sets up a prototype for future calls.  */\n+  /* True if this definition is written with a prototype.  In C2X, an\n+     empty argument list was converted to (void) in grokparms; in\n+     older C standard versions, it does not give the function a type\n+     with a prototype for future calls.  */\n   proto = arg_info->types != 0;\n \n   if (proto)"}, {"sha": "00eb7e7780815a8f5b43143a64f4147c678ba0f4", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/017c6491077bee998eed9ed6520026285c906d37/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/017c6491077bee998eed9ed6520026285c906d37/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=017c6491077bee998eed9ed6520026285c906d37", "patch": "@@ -7334,7 +7334,10 @@ is also enabled by @option{-Wextra}.\n @opindex Wold-style-definition\n @opindex Wno-old-style-definition\n Warn if an old-style function definition is used.  A warning is given\n-even if there is a previous prototype.\n+even if there is a previous prototype.  A definition using @samp{()}\n+is not considered an old-style definition in C2X mode, because it is\n+equivalent to @samp{(void)} in that case, but is considered an\n+old-style definition for older standards.\n \n @item -Wmissing-parameter-type @r{(C and Objective-C only)}\n @opindex Wmissing-parameter-type"}, {"sha": "459fd8907ad995dde36c2c8ad8444f76c2fa7d3d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/017c6491077bee998eed9ed6520026285c906d37/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/017c6491077bee998eed9ed6520026285c906d37/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=017c6491077bee998eed9ed6520026285c906d37", "patch": "@@ -1,3 +1,14 @@\n+2019-11-08  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/c11-old-style-definition-1.c,\n+\tgcc.dg/c11-old-style-definition-2.c,\n+\tgcc.dg/c2x-old-style-definition-1.c,\n+\tgcc.dg/c2x-old-style-definition-2.c,\n+\tgcc.dg/c2x-old-style-definition-3.c,\n+\tgcc.dg/c2x-old-style-definition-4.c,\n+\tgcc.dg/c2x-old-style-definition-5.c,\n+\tgcc.dg/c2x-old-style-definition-6.c: New tests.\n+\n 2019-11-07  Peter Bergner <bergner@linux.ibm.com>\n \n \tPR other/92090"}, {"sha": "74164b76904cd4c88cf20f0c163edcf63026efab", "filename": "gcc/testsuite/gcc.dg/c11-old-style-definition-1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/017c6491077bee998eed9ed6520026285c906d37/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-old-style-definition-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/017c6491077bee998eed9ed6520026285c906d37/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-old-style-definition-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-old-style-definition-1.c?ref=017c6491077bee998eed9ed6520026285c906d37", "patch": "@@ -0,0 +1,9 @@\n+/* Test old-style function definitions not in C2x: allowed in C11.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c11 -pedantic-errors\" } */\n+\n+void\n+f (x)\n+     int x;\n+{\n+}"}, {"sha": "a22f555416d26c9dc09a09f976aa3a3cbc0403ce", "filename": "gcc/testsuite/gcc.dg/c11-old-style-definition-2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/017c6491077bee998eed9ed6520026285c906d37/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-old-style-definition-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/017c6491077bee998eed9ed6520026285c906d37/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-old-style-definition-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-old-style-definition-2.c?ref=017c6491077bee998eed9ed6520026285c906d37", "patch": "@@ -0,0 +1,15 @@\n+/* Test old-style function definitions not in C2x: () does not give\n+   type with a prototype for older standards.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c11\" } */\n+\n+void\n+f ()\n+{\n+}\n+\n+void\n+g (void)\n+{\n+  f (1);\n+}"}, {"sha": "c775366d70133a2480dc4b1a7e89cb379799a8eb", "filename": "gcc/testsuite/gcc.dg/c2x-old-style-definition-1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/017c6491077bee998eed9ed6520026285c906d37/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-old-style-definition-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/017c6491077bee998eed9ed6520026285c906d37/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-old-style-definition-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-old-style-definition-1.c?ref=017c6491077bee998eed9ed6520026285c906d37", "patch": "@@ -0,0 +1,9 @@\n+/* Test old-style function definitions not in C2x: warnings.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c2x\" } */\n+\n+void\n+f (x) /* { dg-warning \"old-style function definition\" } */\n+     int x;\n+{\n+}"}, {"sha": "7bd5a60f6ddd5993ec3a9d51f1b1304df20b31d9", "filename": "gcc/testsuite/gcc.dg/c2x-old-style-definition-2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/017c6491077bee998eed9ed6520026285c906d37/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-old-style-definition-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/017c6491077bee998eed9ed6520026285c906d37/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-old-style-definition-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-old-style-definition-2.c?ref=017c6491077bee998eed9ed6520026285c906d37", "patch": "@@ -0,0 +1,9 @@\n+/* Test old-style function definitions not in C2x: errors.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c2x -pedantic-errors\" } */\n+\n+void\n+f (x) /* { dg-error \"old-style function definition\" } */\n+     int x;\n+{\n+}"}, {"sha": "a2500769f87f80cd518e4cd5f7598d325eb98e68", "filename": "gcc/testsuite/gcc.dg/c2x-old-style-definition-3.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/017c6491077bee998eed9ed6520026285c906d37/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-old-style-definition-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/017c6491077bee998eed9ed6520026285c906d37/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-old-style-definition-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-old-style-definition-3.c?ref=017c6491077bee998eed9ed6520026285c906d37", "patch": "@@ -0,0 +1,10 @@\n+/* Test old-style function definitions not in C2x: warnings disabled\n+   by -Wno-old-style-definition.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c2x -Wno-old-style-definition\" } */\n+\n+void\n+f (x)\n+     int x;\n+{\n+}"}, {"sha": "b1862b101b89baffd0f208fb3619581f52b308a3", "filename": "gcc/testsuite/gcc.dg/c2x-old-style-definition-4.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/017c6491077bee998eed9ed6520026285c906d37/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-old-style-definition-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/017c6491077bee998eed9ed6520026285c906d37/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-old-style-definition-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-old-style-definition-4.c?ref=017c6491077bee998eed9ed6520026285c906d37", "patch": "@@ -0,0 +1,15 @@\n+/* Test old-style function definitions not in C2x: () gives type with\n+   a prototype.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c2x\" } */\n+\n+void\n+f ()\n+{\n+}\n+\n+void\n+g (void)\n+{\n+  f (1); /* { dg-error \"too many arguments to function\" } */\n+}"}, {"sha": "0c37a067c9b6a2973c0e4cfe5924c258ff80044a", "filename": "gcc/testsuite/gcc.dg/c2x-old-style-definition-5.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/017c6491077bee998eed9ed6520026285c906d37/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-old-style-definition-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/017c6491077bee998eed9ed6520026285c906d37/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-old-style-definition-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-old-style-definition-5.c?ref=017c6491077bee998eed9ed6520026285c906d37", "patch": "@@ -0,0 +1,9 @@\n+/* Test old-style function definitions not in C2x: () does not warn\n+   with -Wold-style-definition.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c2x -Wold-style-definition\" } */\n+\n+void\n+f ()\n+{\n+}"}, {"sha": "fc0e778446d726df5d70851265eb7bbbf1b14d3e", "filename": "gcc/testsuite/gcc.dg/c2x-old-style-definition-6.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/017c6491077bee998eed9ed6520026285c906d37/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-old-style-definition-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/017c6491077bee998eed9ed6520026285c906d37/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-old-style-definition-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-old-style-definition-6.c?ref=017c6491077bee998eed9ed6520026285c906d37", "patch": "@@ -0,0 +1,16 @@\n+/* Test old-style function definitions not in C2x: () does not give\n+   type with a prototype except for function definitions.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c2x\" } */\n+\n+void f1 ();\n+\n+/* Prototyped function returning a pointer to unprototyped function.  */\n+void (*f2 (void))() { return f1; }\n+\n+void\n+g (void)\n+{\n+  f1 (1);\n+  f2 () (1);\n+}"}]}