{"sha": "4799603f1a0efdb385cc42268f8b379eb9240771", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDc5OTYwM2YxYTBlZmRiMzg1Y2M0MjI2OGY4YjM3OWViOTI0MDc3MQ==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2016-03-14T14:18:44Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2016-03-14T14:18:44Z"}, "message": "rs6000: Handle \"d\" output in the bd*z patterns (PR70098)\n\nIn the rs6000 port, FLOAT_REGS can contain DImode values when compiling\nfor 64-bit targets.  Some instructions (like \"fcfid\" in the testcase,\nconvert from integer to DP float) only work on floating point registers.\nSo, we do want to allow DImode in these regs.\n\nNow, in unusual cases IRA will assign FLOAT_REGS to some allocno where\nsome insns cannot handle FLOAT_REGS there, so they will need a reload.\nMaybe IRA can be made smarter, but it isn't doing anything wrong here,\nso we should be able to handle it.\n\nThe place it goes wrong is in the output of the *ctrdi_internal[1256]\npattern: the \"bdz\" and \"bdnz\" instructions.  GCC refuses to do output\nreloads on JUMP_INSNs, probably because it is hard to do, needs different\nstrategies than \"normal\" reloads do, and it cannot even be done at all\nfor general patterns.  So JUMP_INSNs need to be able to handle every\npossible output for the register class used.\n\nThese patterns already handle writing to \"c\" (the base insn case), and\nto \"r\", \"m\", and \"c\" or \"l\"; all those via splitters.  We just need to\nhandle \"d\" as well.  That is what this patch does.  [A predicate in one\nof the splitters needs to be touched up so that the correct splitter\nis used for the FLOAT_REGS case.]\n\nBut, that leaves another problem.  One of the insns that are split to\nis a move from a GPR to an FPR.  That work fine on targets with direct\nmove (which does exactly that), i.e. power8 and up.  But older targets\nneed memory to do the move, and this splitter runs after reload so\nit cannot allocate memory; and allocating memory beforehand for every\nbdnz insn is pretty horrible as well.\n\nThis patch implements the easy part.  With it, power8 works, where it\ndidn't before.\n\n\n\tPR target/70098\n\t* config/rs6000/rs6000.md (*ctr<mode>_internal1, *ctr<mode>_internal2,\n\t*ctr<mode>_internal5, *ctr<mode>_internal6): Also allow \"d\" as output.\n\t(define_split for the GPR case): Use int_reg_operand instead of\n\tgpc_reg_operand for the output.\n\ngcc/testsuite/\n\tPR target/70098\n\t* lib/target-supports.exp (check_effective_target_powerpc64_no_dm):\n\tNew function.\n\t* g++.dg/pr70098.C: New testcase.\n\nFrom-SVN: r234181", "tree": {"sha": "f81a4c58a552ecaeb1271860979256ed03814787", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f81a4c58a552ecaeb1271860979256ed03814787"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4799603f1a0efdb385cc42268f8b379eb9240771", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4799603f1a0efdb385cc42268f8b379eb9240771", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4799603f1a0efdb385cc42268f8b379eb9240771", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4799603f1a0efdb385cc42268f8b379eb9240771/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "760ca967d0fea23edea33ff7115663a09000a354", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/760ca967d0fea23edea33ff7115663a09000a354", "html_url": "https://github.com/Rust-GCC/gccrs/commit/760ca967d0fea23edea33ff7115663a09000a354"}], "stats": {"total": 130, "additions": 125, "deletions": 5}, "files": [{"sha": "9761c0452cd9c8c72ec956b5bd853dc85f0fef53", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4799603f1a0efdb385cc42268f8b379eb9240771/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4799603f1a0efdb385cc42268f8b379eb9240771/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4799603f1a0efdb385cc42268f8b379eb9240771", "patch": "@@ -1,3 +1,11 @@\n+2016-03-14  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\tPR target/70098\n+\t* config/rs6000/rs6000.md (*ctr<mode>_internal1, *ctr<mode>_internal2,\n+\t*ctr<mode>_internal5, *ctr<mode>_internal6): Also allow \"d\" as output.\n+\t(define_split for the GPR case): Use int_reg_operand instead of\n+\tgpc_reg_operand for the output.\n+\n 2016-03-14  Tom de Vries  <tom@codesourcery.com>\n \n \tPR tree-optimization/70045"}, {"sha": "d4678af28953bd3368672a8f9ccea4260e8a346a", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4799603f1a0efdb385cc42268f8b379eb9240771/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4799603f1a0efdb385cc42268f8b379eb9240771/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=4799603f1a0efdb385cc42268f8b379eb9240771", "patch": "@@ -11909,7 +11909,7 @@\n \t\t\t  (const_int 1))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))\n-   (set (match_operand:P 2 \"nonimmediate_operand\" \"=1,*r,m,*c*l\")\n+   (set (match_operand:P 2 \"nonimmediate_operand\" \"=1,*r,m,*d*c*l\")\n \t(plus:P (match_dup 1)\n \t\t (const_int -1)))\n    (clobber (match_scratch:CC 3 \"=X,&x,&x,&x\"))\n@@ -11933,7 +11933,7 @@\n \t\t\t  (const_int 1))\n \t\t      (pc)\n \t\t      (label_ref (match_operand 0 \"\" \"\"))))\n-   (set (match_operand:P 2 \"nonimmediate_operand\" \"=1,*r,m,*c*l\")\n+   (set (match_operand:P 2 \"nonimmediate_operand\" \"=1,*r,m,*d*c*l\")\n \t(plus:P (match_dup 1)\n \t\t (const_int -1)))\n    (clobber (match_scratch:CC 3 \"=X,&x,&x,&x\"))\n@@ -11959,7 +11959,7 @@\n \t\t\t  (const_int 1))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))\n-   (set (match_operand:P 2 \"nonimmediate_operand\" \"=1,*r,m,*c*l\")\n+   (set (match_operand:P 2 \"nonimmediate_operand\" \"=1,*r,m,*d*c*l\")\n \t(plus:P (match_dup 1)\n \t\t (const_int -1)))\n    (clobber (match_scratch:CC 3 \"=X,&x,&x,&x\"))\n@@ -11983,7 +11983,7 @@\n \t\t\t  (const_int 1))\n \t\t      (pc)\n \t\t      (label_ref (match_operand 0 \"\" \"\"))))\n-   (set (match_operand:P 2 \"nonimmediate_operand\" \"=1,*r,m,*c*l\")\n+   (set (match_operand:P 2 \"nonimmediate_operand\" \"=1,*r,m,*d*c*l\")\n \t(plus:P (match_dup 1)\n \t\t (const_int -1)))\n    (clobber (match_scratch:CC 3 \"=X,&x,&x,&x\"))\n@@ -12010,7 +12010,7 @@\n \t\t\t\t       (const_int 1)])\n \t\t      (match_operand 5 \"\" \"\")\n \t\t      (match_operand 6 \"\" \"\")))\n-   (set (match_operand:P 0 \"gpc_reg_operand\" \"\")\n+   (set (match_operand:P 0 \"int_reg_operand\" \"\")\n \t(plus:P (match_dup 1) (const_int -1)))\n    (clobber (match_scratch:CC 3 \"\"))\n    (clobber (match_scratch:P 4 \"\"))]"}, {"sha": "00492f53de47abf07076c2d4764f0504ee6fc6f1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4799603f1a0efdb385cc42268f8b379eb9240771/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4799603f1a0efdb385cc42268f8b379eb9240771/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4799603f1a0efdb385cc42268f8b379eb9240771", "patch": "@@ -1,3 +1,11 @@\n+2016-03-14  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\tPR target/70098\n+\t* lib/target-supports.exp (check_effective_target_powerpc64_no_dm):\n+\tNew function.\n+\t* g++.dg/pr70098.C: New testcase.\n+\n+\n 2016-03-14  Tom de Vries  <tom@codesourcery.com>\n \n \tPR tree-optimization/70045"}, {"sha": "f5eb48f96e250e1c2b247913f948d86fafe2a8c3", "filename": "gcc/testsuite/g++.dg/pr70098.C", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4799603f1a0efdb385cc42268f8b379eb9240771/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr70098.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4799603f1a0efdb385cc42268f8b379eb9240771/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr70098.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr70098.C?ref=4799603f1a0efdb385cc42268f8b379eb9240771", "patch": "@@ -0,0 +1,91 @@\n+// PR target/70098\n+// { dg-do compile }\n+// { dg-options -O2 }\n+// { dg-require-effective-target c++11 }\n+// { dg-xfail-if \"PR70098\" { lp64 && powerpc64_no_dm } }\n+// { dg-prune-output \".*internal compiler error.*\" }\n+\n+template < typename > struct traits;\n+template < typename, int _Rows, int _Cols, int = 0, int = _Rows,\n+\tint = _Cols > class Matrix;\n+template < typename > class G;\n+template < typename Derived > struct A {\n+\ttypedef G < Derived > type;\n+};\n+\n+template < typename Derived > class C {\n+public:\n+\tenum { RowsAtCompileTime =\n+\t\t    traits < Derived >::RowsAtCompileTime } static Zero;\n+};\n+\n+template < typename Derived > class G:public C < Derived > {\n+};\n+\n+template < int _Rows > class D {\n+public:\n+\tlong rows() {\n+\t\treturn _Rows;\n+\t}\n+};\n+\n+template < typename Derived > class PlainObjectBase:public A < Derived >::type {\n+\ttypedef typename A < Derived >::type Base;\n+\tD < Base::RowsAtCompileTime > m_storage;\n+\n+public:\n+\tlong rows() {\n+\t\treturn m_storage.rows();\n+\t}\n+};\n+\n+int fn1();\n+\n+struct B {\n+\tstatic long run(long x, long) {\n+\t\tint offset(fn1());\n+\t\t return x + offset;\n+}};\n+\n+long fn2(int x)\n+{\n+\treturn B::run(x, 0);\n+}\n+\n+template < typename _Scalar, int _Rows, int _Cols, int _Options, int _MaxRows,\n+    int _MaxCols >\n+    struct traits <Matrix < _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols >> {\n+\tenum { RowsAtCompileTime = _Rows };\n+};\n+\n+template < typename, int, int, int, int _MaxRows, int _MaxCols >\n+\tclass Matrix:public PlainObjectBase < Matrix < double, _MaxRows,\n+\t_MaxCols >> {\n+public:\n+\ttemplate < typename OtherDerived > Matrix(OtherDerived);\n+};\n+\n+struct F {\n+\tstatic Matrix < double, 2, 2 > run(long size) {\n+\t\tMatrix < double, 2, 2 > diag = Matrix < double, 2, 2 >::Zero;\n+\t\tlong i = 0;\n+\t\twhile (i < size) {\n+\t\t\tlong randomInt = fn2(-1);\n+\t\t\tif (randomInt == 0)\n+\t\t\t\t++i;\n+\t\t\telse {\n+\t\t\t\tdouble alpha(randomInt);\n+\t\t\t\t diag = alpha;\n+\t\t\t\t i = 2;\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn diag;\n+\t}\n+};\n+\n+void fn3(Matrix < double, 2, 2 > m)\n+{\n+\tlong size = m.rows();\n+\tF::run(size);\n+}"}, {"sha": "49b82c32dae65314c77940c9cdd10532379148f4", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4799603f1a0efdb385cc42268f8b379eb9240771/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4799603f1a0efdb385cc42268f8b379eb9240771/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=4799603f1a0efdb385cc42268f8b379eb9240771", "patch": "@@ -1629,6 +1629,19 @@ proc check_effective_target_avx_runtime { } {\n     return 0\n }\n \n+# Return 1 if we are compiling for 64-bit PowerPC but we do not use direct\n+# move instructions for moves from GPR to FPR.\n+\n+proc check_effective_target_powerpc64_no_dm { } {\n+    # The \"mulld\" checks if we are generating PowerPC64 code.  The \"lfd\"\n+    # checks if we do not use direct moves, but use the old-fashioned\n+    # slower move-via-the-stack.\n+    return [check_no_messages_and_pattern powerpc64_no_dm \\\n+\t{\\mmulld\\M.*\\mlfd} assembly {\n+\t    double f(long long x) { return x*x; }\n+\t} {-O2}]\n+}\n+\n # Return 1 if the target supports executing power8 vector instructions, 0\n # otherwise.  Cache the result.\n "}]}