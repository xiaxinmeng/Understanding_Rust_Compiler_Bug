{"sha": "58c1ae3667e753a492bfa224ff9194b9e2ae01ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NThjMWFlMzY2N2U3NTNhNDkyYmZhMjI0ZmY5MTk0YjllMmFlMDFmZg==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2011-09-22T09:32:11Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2011-09-22T09:32:11Z"}, "message": "re PR fortran/41733 (Proc-pointer conformance checks: Elemental-proc-ptr => non-elemental-proc)\n\n2011-09-22  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/41733\n\t* expr.c (gfc_check_pointer_assign): Check for nonintrinsic elemental\n\tprocedures.\n\t* interface.c (gfc_compare_interfaces): Rename 'intent_flag'. Check\n\tfor PURE and ELEMENTAL attributes.\n\t(compare_actual_formal): Remove pureness check here.\n\n\n2011-09-22  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/41733\n\t* gfortran.dg/impure_actual_1.f90: Modified error message.\n\t* gfortran.dg/proc_ptr_32.f90: New.\n\t* gfortran.dg/proc_ptr_33.f90: New.\n\nFrom-SVN: r179080", "tree": {"sha": "422fdb8c37217bfc8598a7e3f79ac6671571df52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/422fdb8c37217bfc8598a7e3f79ac6671571df52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58c1ae3667e753a492bfa224ff9194b9e2ae01ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58c1ae3667e753a492bfa224ff9194b9e2ae01ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58c1ae3667e753a492bfa224ff9194b9e2ae01ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58c1ae3667e753a492bfa224ff9194b9e2ae01ff/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29ed4920e8f131a9c315be88ab1a9dcd9c5ccc59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29ed4920e8f131a9c315be88ab1a9dcd9c5ccc59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29ed4920e8f131a9c315be88ab1a9dcd9c5ccc59"}], "stats": {"total": 124, "additions": 100, "deletions": 24}, "files": [{"sha": "02ee59319c3192d9b54a766b0c6d019f9bcaa15a", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58c1ae3667e753a492bfa224ff9194b9e2ae01ff/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58c1ae3667e753a492bfa224ff9194b9e2ae01ff/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=58c1ae3667e753a492bfa224ff9194b9e2ae01ff", "patch": "@@ -1,3 +1,12 @@\n+2011-09-22  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/41733\n+\t* expr.c (gfc_check_pointer_assign): Check for nonintrinsic elemental\n+\tprocedures.\n+\t* interface.c (gfc_compare_interfaces): Rename 'intent_flag'. Check\n+\tfor PURE and ELEMENTAL attributes.\n+\t(compare_actual_formal): Remove pureness check here.\n+\n 2011-09-20  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \t* check.c (gfc_check_c_sizeof): Remove redundant word."}, {"sha": "813a99d037b836b9176496f78e8b9eba14dafb74", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58c1ae3667e753a492bfa224ff9194b9e2ae01ff/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58c1ae3667e753a492bfa224ff9194b9e2ae01ff/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=58c1ae3667e753a492bfa224ff9194b9e2ae01ff", "patch": "@@ -3432,7 +3432,7 @@ gfc_check_pointer_assign (gfc_expr *lvalue, gfc_expr *rvalue)\n \t\t     rvalue->symtree->name, &rvalue->where);\n \t  return FAILURE;\n \t}\n-      /* Check for C727.  */\n+      /* Check for F08:C729.  */\n       if (attr.flavor == FL_PROCEDURE)\n \t{\n \t  if (attr.proc == PROC_ST_FUNCTION)\n@@ -3448,6 +3448,14 @@ gfc_check_pointer_assign (gfc_expr *lvalue, gfc_expr *rvalue)\n \t\t\t      rvalue->symtree->name, &rvalue->where) == FAILURE)\n \t    return FAILURE;\n \t}\n+      /* Check for F08:C730.  */\n+      if (attr.elemental && !attr.intrinsic)\n+\t{\n+\t  gfc_error (\"Nonintrinsic elemental procedure '%s' is invalid \"\n+\t\t     \"in procedure pointer assigment at %L\",\n+\t\t     rvalue->symtree->name, &rvalue->where);\n+\t  return FAILURE;\n+\t}\n \n       /* Ensure that the calling convention is the same. As other attributes\n \t such as DLLEXPORT may differ, one explicitly only tests for the"}, {"sha": "7cbe16319b4d63e33cbc0db6f341cf9ef1261818", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 27, "deletions": 22, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58c1ae3667e753a492bfa224ff9194b9e2ae01ff/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58c1ae3667e753a492bfa224ff9194b9e2ae01ff/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=58c1ae3667e753a492bfa224ff9194b9e2ae01ff", "patch": "@@ -1087,12 +1087,12 @@ check_dummy_characteristics (gfc_symbol *s1, gfc_symbol *s2,\n /* 'Compare' two formal interfaces associated with a pair of symbols.\n    We return nonzero if there exists an actual argument list that\n    would be ambiguous between the two interfaces, zero otherwise.\n-   'intent_flag' specifies whether INTENT and OPTIONAL of the arguments are\n+   'strict_flag' specifies whether all the characteristics are\n    required to match, which is not the case for ambiguity checks.*/\n \n int\n gfc_compare_interfaces (gfc_symbol *s1, gfc_symbol *s2, const char *name2,\n-\t\t\tint generic_flag, int intent_flag,\n+\t\t\tint generic_flag, int strict_flag,\n \t\t\tchar *errmsg, int err_len)\n {\n   gfc_formal_arglist *f1, *f2;\n@@ -1115,17 +1115,32 @@ gfc_compare_interfaces (gfc_symbol *s1, gfc_symbol *s2, const char *name2,\n       return 0;\n     }\n \n-  /* If the arguments are functions, check type and kind\n-     (only for dummy procedures and procedure pointer assignments).  */\n-  if (!generic_flag && intent_flag && s1->attr.function && s2->attr.function)\n+  /* Do strict checks on all characteristics\n+     (for dummy procedures and procedure pointer assignments).  */\n+  if (!generic_flag && strict_flag)\n     {\n-      if (s1->ts.type == BT_UNKNOWN)\n-\treturn 1;\n-      if ((s1->ts.type != s2->ts.type) || (s1->ts.kind != s2->ts.kind))\n+      if (s1->attr.function && s2->attr.function)\n \t{\n-\t  if (errmsg != NULL)\n-\t    snprintf (errmsg, err_len, \"Type/kind mismatch in return value \"\n-\t\t      \"of '%s'\", name2);\n+\t  /* If both are functions, check type and kind.  */\n+\t  if (s1->ts.type == BT_UNKNOWN)\n+\t    return 1;\n+\t  if ((s1->ts.type != s2->ts.type) || (s1->ts.kind != s2->ts.kind))\n+\t    {\n+\t      if (errmsg != NULL)\n+\t\tsnprintf (errmsg, err_len, \"Type/kind mismatch in return value \"\n+\t\t\t  \"of '%s'\", name2);\n+\t      return 0;\n+\t    }\n+\t}\n+\n+      if (s1->attr.pure && !s2->attr.pure)\n+\t{\n+\t  snprintf (errmsg, err_len, \"Mismatch in PURE attribute\");\n+\t  return 0;\n+\t}\n+      if (s1->attr.elemental && !s2->attr.elemental)\n+\t{\n+\t  snprintf (errmsg, err_len, \"Mismatch in ELEMENTAL attribute\");\n \t  return 0;\n \t}\n     }\n@@ -1166,7 +1181,7 @@ gfc_compare_interfaces (gfc_symbol *s1, gfc_symbol *s2, const char *name2,\n \t    return 0;\n \t  }\n \n-\tif (intent_flag)\n+\tif (strict_flag)\n \t  {\n \t    /* Check all characteristics.  */\n \t    if (check_dummy_characteristics (f1->sym, f2->sym,\n@@ -2276,16 +2291,6 @@ compare_actual_formal (gfc_actual_arglist **ap, gfc_formal_arglist *formal,\n \t  return 0;\n \t}\n \n-      if (f->sym->attr.flavor == FL_PROCEDURE && f->sym->attr.pure\n-\t  && a->expr->ts.type == BT_PROCEDURE\n-\t  && !a->expr->symtree->n.sym->attr.pure)\n-\t{\n-\t  if (where)\n-\t    gfc_error (\"Expected a PURE procedure for argument '%s' at %L\",\n-\t\t       f->sym->name, &a->expr->where);\n-\t  return 0;\n-\t}\n-\n       if (f->sym->as && f->sym->as->type == AS_ASSUMED_SHAPE\n \t  && a->expr->expr_type == EXPR_VARIABLE\n \t  && a->expr->symtree->n.sym->as"}, {"sha": "10aff8268a2f0010e11267761091624902429572", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58c1ae3667e753a492bfa224ff9194b9e2ae01ff/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58c1ae3667e753a492bfa224ff9194b9e2ae01ff/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=58c1ae3667e753a492bfa224ff9194b9e2ae01ff", "patch": "@@ -1,3 +1,10 @@\n+2011-09-22  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/41733\n+\t* gfortran.dg/impure_actual_1.f90: Modified error message.\n+\t* gfortran.dg/proc_ptr_32.f90: New.\n+\t* gfortran.dg/proc_ptr_33.f90: New.\n+\n 2011-09-22  Ira Rosen  <ira.rosen@linaro.org>\n \n \tPR tree-optimization/50451"}, {"sha": "12f3375bf0a505646b58316a3241a3f7f065e73e", "filename": "gcc/testsuite/gfortran.dg/impure_actual_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58c1ae3667e753a492bfa224ff9194b9e2ae01ff/gcc%2Ftestsuite%2Fgfortran.dg%2Fimpure_actual_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58c1ae3667e753a492bfa224ff9194b9e2ae01ff/gcc%2Ftestsuite%2Fgfortran.dg%2Fimpure_actual_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fimpure_actual_1.f90?ref=58c1ae3667e753a492bfa224ff9194b9e2ae01ff", "patch": "@@ -18,7 +18,7 @@ END FUNCTION K\n  END FUNCTION J\n END MODULE M1\n USE M1\n- write(6,*) J(L) ! { dg-error \"Expected a PURE procedure for argument\" }\n+ write(6,*) J(L) ! { dg-error \"Mismatch in PURE attribute\" }\n END\n \n ! { dg-final { cleanup-modules \"m1\" } }"}, {"sha": "5664ddecd5da1aac9c6e8a96016dc1694a2f794a", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_32.f90", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58c1ae3667e753a492bfa224ff9194b9e2ae01ff/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_32.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58c1ae3667e753a492bfa224ff9194b9e2ae01ff/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_32.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_32.f90?ref=58c1ae3667e753a492bfa224ff9194b9e2ae01ff", "patch": "@@ -0,0 +1,15 @@\n+! { dg-do compile }\n+!\n+! PR 41733: Proc-pointer conformance checks: Elemental-proc-ptr => non-elemental-procedure\n+!\n+! Contributed by James Van Buskirk\n+\n+  implicit none\n+  procedure(my_dcos), pointer :: f\n+  f => my_dcos           ! { dg-error \"invalid in procedure pointer assigment\" }\n+contains\n+  real elemental function my_dcos(x)\n+    real, intent(in) :: x\n+    my_dcos = cos(x)\n+  end function\n+end"}, {"sha": "803d90e05eafc5b32c444c9599a87ce0ae1bbff4", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_33.f90", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58c1ae3667e753a492bfa224ff9194b9e2ae01ff/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_33.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58c1ae3667e753a492bfa224ff9194b9e2ae01ff/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_33.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_33.f90?ref=58c1ae3667e753a492bfa224ff9194b9e2ae01ff", "patch": "@@ -0,0 +1,32 @@\n+! { dg-do compile }\n+!\n+! PR 41733: Proc-pointer conformance checks: Elemental-proc-ptr => non-elemental-procedure\n+!\n+! Contributed by James Van Buskirk\n+\n+module funcs\n+   implicit none\n+   abstract interface\n+      real elemental function fun(x)\n+         real, intent(in) :: x\n+      end function\n+   end interface\n+contains\n+  function my_dcos(x)\n+    real, intent(in) :: x\n+    real :: my_dcos\n+    my_dcos = cos(x)\n+  end function\n+end module\n+\n+program start\n+   use funcs\n+   implicit none\n+   procedure(fun), pointer :: f\n+   real x(3)\n+   x = [1,2,3]\n+   f => my_dcos     ! { dg-error \"Mismatch in PURE attribute\" }\n+   write(*,*) f(x)\n+end program start \n+\n+! { dg-final { cleanup-modules \"funcs\" } }\n\\ No newline at end of file"}]}