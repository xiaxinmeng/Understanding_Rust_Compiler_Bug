{"sha": "d2288d5d766ff3997591950e84713b0a1e72deb7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDIyODhkNWQ3NjZmZjM5OTc1OTE5NTBlODQ3MTNiMGExZTcyZGViNw==", "commit": {"author": {"name": "Hartmut Penner", "email": "hpenner@de.ibm.com", "date": "2004-01-12T08:11:28Z"}, "committer": {"name": "Hartmut Penner", "email": "hpenner@gcc.gnu.org", "date": "2004-01-12T08:11:28Z"}, "message": "rs6000.c (word_offset_memref_operand): New predicate to handle 'ld' conform addresses.\n\n      * gcc/config/rs6000/rs6000.c (word_offset_memref_operand): New\n       predicate to handle 'ld' conform addresses.\n       * gcc/config/rs6000/rs6000.h (EXTRA_CONSTRAINT): New 'Y'\n       contraint.\n       (EXTRA_MEMORY_CONSTRAINT): Tell reload which constraint\n       are memory contraints.\n       * gcc/config/rs6000/rs6000-protos.h (word_offset_memref_operand):\n       New prototype.\n       * gcc/config/rs6000/rs6000.md (*movdf_hardfloat64):\n       Change 'o' to 'Y' constraint.\n       (*movdf_softfloat64): Ditto.\n\nFrom-SVN: r75707", "tree": {"sha": "d47c67bc221d940f2cf8e958c637910354dd89ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d47c67bc221d940f2cf8e958c637910354dd89ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2288d5d766ff3997591950e84713b0a1e72deb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2288d5d766ff3997591950e84713b0a1e72deb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2288d5d766ff3997591950e84713b0a1e72deb7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2288d5d766ff3997591950e84713b0a1e72deb7/comments", "author": null, "committer": null, "parents": [{"sha": "ea1ea21af5153ef84ac00dee8a1eaa54662b0aa2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea1ea21af5153ef84ac00dee8a1eaa54662b0aa2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea1ea21af5153ef84ac00dee8a1eaa54662b0aa2"}], "stats": {"total": 63, "additions": 54, "deletions": 9}, "files": [{"sha": "dd94d58cf9887c4539ecb4656fc29b93aeec1680", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2288d5d766ff3997591950e84713b0a1e72deb7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2288d5d766ff3997591950e84713b0a1e72deb7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d2288d5d766ff3997591950e84713b0a1e72deb7", "patch": "@@ -1,3 +1,17 @@\n+2004-01-12  Hartmut Penner  <hpenner@de.ibm.com>\n+\n+\t* gcc/config/rs6000/rs6000.c (word_offset_memref_operand): New\n+\tpredicate to handle 'ld' conform addresses.\n+\t* gcc/config/rs6000/rs6000.h (EXTRA_CONSTRAINT): New 'Y'\n+\tcontraint.\n+\t(EXTRA_MEMORY_CONSTRAINT): Tell reload which constraint\n+\tare memory contraints.\n+\t* gcc/config/rs6000/rs6000-protos.h (word_offset_memref_operand): \n+\tNew prototype.\n+\t* gcc/config/rs6000/rs6000.md (*movdf_hardfloat64): \n+\tChange 'o' to 'Y' constraint.\n+\t(*movdf_softfloat64): Ditto.\n+\t\n 2004-01-12  Bernardo Innocenti  <bernie@develer.com>\n \n \t* gcc/config/m68k/m68k.md: Switch from the \"*...\" syntax to the"}, {"sha": "982de3e8c989171a24b8161c725b7240048c34cc", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2288d5d766ff3997591950e84713b0a1e72deb7/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2288d5d766ff3997591950e84713b0a1e72deb7/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=d2288d5d766ff3997591950e84713b0a1e72deb7", "patch": "@@ -52,6 +52,7 @@ extern int reg_or_add_cint64_operand (rtx, enum machine_mode);\n extern int reg_or_sub_cint64_operand (rtx, enum machine_mode);\n extern int reg_or_logical_cint_operand (rtx, enum machine_mode);\n extern int got_operand (rtx, enum machine_mode);\n+extern int word_offset_memref_operand (rtx, enum machine_mode);\n extern int got_no_const_operand (rtx, enum machine_mode);\n extern int num_insns_constant (rtx, enum machine_mode);\n extern int easy_fp_constant (rtx, enum machine_mode);"}, {"sha": "3e5dda00361242cc02bac7a9cf46816a21641d64", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2288d5d766ff3997591950e84713b0a1e72deb7/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2288d5d766ff3997591950e84713b0a1e72deb7/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=d2288d5d766ff3997591950e84713b0a1e72deb7", "patch": "@@ -2361,6 +2361,27 @@ small_data_operand (rtx op ATTRIBUTE_UNUSED,\n #endif\n }\n \n+/* Return true, if operand is a memory operand and has a\n+   displacement divisible by 4.  */\n+\n+int\n+word_offset_memref_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n+{\n+  rtx addr;\n+  int off = 0;\n+\n+  if (!memory_operand (op, mode))\n+    return 0;\n+\n+  addr = XEXP (op, 0);\n+  if (GET_CODE (addr) == PLUS\n+      && GET_CODE (XEXP (addr, 0)) == REG\n+      && GET_CODE (XEXP (addr, 1)) == CONST_INT)\n+    off = INTVAL (XEXP (addr, 1));\n+\n+  return (off % 4) == 0;\n+}\n+\n /* Return true if either operand is a general purpose register.  */\n \n bool"}, {"sha": "d31863b91ad3f5acd6dce0c3ea9b7b9ea8758fd9", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2288d5d766ff3997591950e84713b0a1e72deb7/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2288d5d766ff3997591950e84713b0a1e72deb7/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=d2288d5d766ff3997591950e84713b0a1e72deb7", "patch": "@@ -1419,6 +1419,7 @@ enum reg_class\n    'T' is a constant that can be placed into a 32-bit mask operand\n    'U' is for V.4 small data references.\n    'W' is a vector constant that can be easily generated (no mem refs).\n+   'Y' is a indexed or word-aligned displacement memory operand. \n    't' is for AND masks that can be performed by two rldic{l,r} insns.  */\n \n #define EXTRA_CONSTRAINT(OP, C)\t\t\t\t\t\t\\\n@@ -1433,8 +1434,16 @@ enum reg_class\n \t\t       || !logical_operand (OP, DImode))\t\t\\\n \t\t   && !mask64_operand (OP, DImode))\t\t\t\\\n    : (C) == 'W' ? (easy_vector_constant (OP, GET_MODE (OP)))\t\t\\\n+   : (C) == 'Y' ? (word_offset_memref_operand (OP, GET_MODE (OP)))      \\\n    : 0)\n \n+/* Defining, which contraints are memory contraints. Tells reload,\n+   that any memory address can be reloaded by copying the \n+   memory address into a base register if required.  */\n+\n+#define EXTRA_MEMORY_CONSTRAINT(C, STR)\t\t\t\t\\\n+  ((C) == 'Q' || (C) == 'Y')\n+\n /* Given an rtx X being reloaded into a reg required to be\n    in class CLASS, return the class of reg to actually use.\n    In general this is just CLASS; but on some machines"}, {"sha": "9a1874e505cc1882ffc69c4c35110835f0379352", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2288d5d766ff3997591950e84713b0a1e72deb7/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2288d5d766ff3997591950e84713b0a1e72deb7/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=d2288d5d766ff3997591950e84713b0a1e72deb7", "patch": "@@ -8160,11 +8160,11 @@\n   [(set_attr \"type\" \"*,load,store,*,*,*\")\n    (set_attr \"length\" \"8,8,8,8,12,16\")])\n \n-; ld/std require word-aligned displacements, so use offsettable constraint.\n-; List o->r and r->o before r->r for reload.\n+; ld/std require word-aligned displacements -> 'Y' constraint.\n+; List Y->r and r->Y before r->r for reload.\n (define_insn \"*movdf_hardfloat64\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=o,??r,!r,f,f,m,!cl,!r,!r,!r,!r\")\n-\t(match_operand:DF 1 \"input_operand\" \"r,o,r,f,m,f,r,h,G,H,F\"))]\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=Y,??r,!r,f,f,m,!cl,!r,!r,!r,!r\")\n+\t(match_operand:DF 1 \"input_operand\" \"r,Y,r,f,m,f,r,h,G,H,F\"))]\n   \"TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS\n    && (gpc_reg_operand (operands[0], DFmode)\n        || gpc_reg_operand (operands[1], DFmode))\"\n@@ -8184,22 +8184,22 @@\n    (set_attr \"length\" \"4,4,4,4,4,4,4,4,8,12,16\")])\n \n (define_insn \"*movdf_softfloat64\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=r,cl,r,r,m,r,r,r,*h\")\n-\t(match_operand:DF 1 \"input_operand\" \"r,r,h,m,r,G,H,F,0\"))]\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=r,Y,r,cl,r,r,r,r,*h\")\n+\t(match_operand:DF 1 \"input_operand\" \"Y,r,r,r,h,G,H,F,0\"))]\n   \"TARGET_POWERPC64 && (TARGET_SOFT_FLOAT || !TARGET_FPRS)\n    && (gpc_reg_operand (operands[0], DFmode)\n        || gpc_reg_operand (operands[1], DFmode))\"\n   \"@\n+   ld%U1%X1 %0,%1\n+   std%U0%X0 %1,%0\n    mr %0,%1\n    mt%0 %1\n    mf%1 %0\n-   ld%U1%X1 %0,%1\n-   std%U0%X0 %1,%0\n    #\n    #\n    #\n    nop\"\n-  [(set_attr \"type\" \"*,*,*,load,store,*,*,*,*\")\n+  [(set_attr \"type\" \"load,store,*,*,*,*,*,*,*\")\n    (set_attr \"length\" \"4,4,4,4,4,8,12,16,4\")])\n \f\n (define_expand \"movtf\""}]}