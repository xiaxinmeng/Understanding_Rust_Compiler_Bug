{"sha": "a427621f8c670213467ba447ce6297fb7d7ce11a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQyNzYyMWY4YzY3MDIxMzQ2N2JhNDQ3Y2U2Mjk3ZmI3ZDdjZTExYQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2010-09-16T08:33:04Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-09-16T08:33:04Z"}, "message": "i386.md: Remove unneeded empty conditions and preparation statements from expanders.\n\n\t* config/i386/i386.md: Remove unneeded empty conditions and\n\tpreparation statements from expanders.\n\t* config/i386/mmx.md: Ditto.\n\t* config/i386/sse.md: Ditto.\n\nFrom-SVN: r164329", "tree": {"sha": "cd4538377b7166f7b8b61b5f4152d76e91937df0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd4538377b7166f7b8b61b5f4152d76e91937df0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a427621f8c670213467ba447ce6297fb7d7ce11a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a427621f8c670213467ba447ce6297fb7d7ce11a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a427621f8c670213467ba447ce6297fb7d7ce11a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a427621f8c670213467ba447ce6297fb7d7ce11a/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8c2b2faee5255407a95c55b5d4a76f16b74cb5d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c2b2faee5255407a95c55b5d4a76f16b74cb5d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c2b2faee5255407a95c55b5d4a76f16b74cb5d0"}], "stats": {"total": 267, "additions": 99, "deletions": 168}, "files": [{"sha": "b0666373db7aed3e741aa260a5b53f5b4f5c8435", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a427621f8c670213467ba447ce6297fb7d7ce11a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a427621f8c670213467ba447ce6297fb7d7ce11a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a427621f8c670213467ba447ce6297fb7d7ce11a", "patch": "@@ -1,3 +1,10 @@\n+2010-09-16  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md: Remove unneeded empty conditions and\n+\tpreparation statements from expanders.\n+\t* config/i386/mmx.md: Ditto.\n+\t* config/i386/sse.md: Ditto.\n+\n 2010-09-16  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.h (PUSH_ROUNDING): Redefine using UNITS_PER_WORD."}, {"sha": "ae26d10b9356603e4377215d2d5e8f82aa557e08", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 41, "deletions": 91, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a427621f8c670213467ba447ce6297fb7d7ce11a/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a427621f8c670213467ba447ce6297fb7d7ce11a/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=a427621f8c670213467ba447ce6297fb7d7ce11a", "patch": "@@ -979,9 +979,7 @@\n (define_expand \"cmp<mode>_1\"\n   [(set (reg:CC FLAGS_REG)\n \t(compare:CC (match_operand:SWI48 0 \"nonimmediate_operand\" \"\")\n-\t\t    (match_operand:SWI48 1 \"<general_operand>\" \"\")))]\n-  \"\"\n-  \"\")\n+\t\t    (match_operand:SWI48 1 \"<general_operand>\" \"\")))])\n \n (define_insn \"*cmp<mode>_ccno_1\"\n   [(set (reg FLAGS_REG)\n@@ -1066,9 +1064,7 @@\n \t      (match_operand 0 \"ext_register_operand\" \"\")\n \t      (const_int 8)\n \t      (const_int 8)) 0)\n-\t  (match_operand:QI 1 \"immediate_operand\" \"\")))]\n-  \"\"\n-  \"\")\n+\t  (match_operand:QI 1 \"immediate_operand\" \"\")))])\n \n (define_insn \"*cmpqi_ext_3_insn\"\n   [(set (reg FLAGS_REG)\n@@ -2544,9 +2540,7 @@\n   [(set (zero_extract:SWI48 (match_operand 0 \"ext_register_operand\" \"\")\n \t\t\t    (const_int 8)\n \t\t\t    (const_int 8))\n-\t(match_operand:SWI48 1 \"nonmemory_operand\" \"\"))]\n-  \"\"\n-  \"\")\n+\t(match_operand:SWI48 1 \"nonmemory_operand\" \"\"))])\n \n (define_insn \"*mov<mode>_insv_1_rex64\"\n   [(set (zero_extract:SWI48x (match_operand 0 \"ext_register_operand\" \"+Q\")\n@@ -3690,9 +3684,7 @@\n   [(parallel\n     [(set (match_operand:SWI24 0 \"register_operand\" \"\")\n \t  (zero_extend:SWI24 (match_operand:QI 1 \"nonimmediate_operand\" \"\")))\n-     (clobber (reg:CC FLAGS_REG))])]\n-  \"\"\n-  \"\")\n+     (clobber (reg:CC FLAGS_REG))])])\n \n (define_insn \"*zero_extendqi<mode>2_and\"\n   [(set (match_operand:SWI24 0 \"register_operand\" \"=r,?&q\")\n@@ -4209,8 +4201,7 @@\n (define_expand \"truncdfsf2_with_temp\"\n   [(parallel [(set (match_operand:SF 0 \"\" \"\")\n \t\t   (float_truncate:SF (match_operand:DF 1 \"\" \"\")))\n-\t      (clobber (match_operand:SF 2 \"\" \"\"))])]\n-  \"\")\n+\t      (clobber (match_operand:SF 2 \"\" \"\"))])])\n \n (define_insn \"*truncdfsf_fast_mixed\"\n   [(set (match_operand:SF 0 \"nonimmediate_operand\"   \"=fm,x\")\n@@ -4854,8 +4845,7 @@\n \t(float:X87MODEF (match_operand:HI 1 \"nonimmediate_operand\" \"\")))]\n   \"TARGET_80387\n    && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n-       || TARGET_MIX_SSE_I387)\"\n-  \"\")\n+       || TARGET_MIX_SSE_I387)\")\n \n ;; Pre-reload splitter to add memory clobber to the pattern.\n (define_insn_and_split \"*floathi<mode>2_1\"\n@@ -6712,8 +6702,7 @@\n \t\t\t(const_int 0)])\n \t\t      (match_operand:SWI 2 \"<general_operand>\" \"\"))))\n      (clobber (reg:CC FLAGS_REG))])]\n-  \"ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n-  \"\")\n+  \"ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\")\n \n (define_insn \"*<plusminus_insn><mode>3_carry\"\n   [(set (match_operand:SWI 0 \"nonimmediate_operand\" \"=<r>m,<r>\")\n@@ -6822,17 +6811,15 @@\n \t(plusminus:XF\n \t  (match_operand:XF 1 \"register_operand\" \"\")\n \t  (match_operand:XF 2 \"register_operand\" \"\")))]\n-  \"TARGET_80387\"\n-  \"\")\n+  \"TARGET_80387\")\n \n (define_expand \"<plusminus_insn><mode>3\"\n   [(set (match_operand:MODEF 0 \"register_operand\" \"\")\n \t(plusminus:MODEF\n \t  (match_operand:MODEF 1 \"register_operand\" \"\")\n \t  (match_operand:MODEF 2 \"nonimmediate_operand\" \"\")))]\n   \"(TARGET_80387 && X87_ENABLE_ARITH (<MODE>mode))\n-    || (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\"\n-  \"\")\n+    || (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\")\n \f\n ;; Multiply instructions\n \n@@ -6841,18 +6828,15 @@\n \t\t   (mult:SWIM248\n \t\t     (match_operand:SWIM248 1 \"register_operand\" \"\")\n \t\t     (match_operand:SWIM248 2 \"<general_operand>\" \"\")))\n-\t      (clobber (reg:CC FLAGS_REG))])]\n-  \"\"\n-  \"\")\n+\t      (clobber (reg:CC FLAGS_REG))])])\n \n (define_expand \"mulqi3\"\n   [(parallel [(set (match_operand:QI 0 \"register_operand\" \"\")\n \t\t   (mult:QI\n \t\t     (match_operand:QI 1 \"register_operand\" \"\")\n \t\t     (match_operand:QI 2 \"nonimmediate_operand\" \"\")))\n \t      (clobber (reg:CC FLAGS_REG))])]\n-  \"TARGET_QIMODE_MATH\"\n-  \"\")\n+  \"TARGET_QIMODE_MATH\")\n \n ;; On AMDFAM10\n ;; IMUL reg32/64, reg32/64, imm8 \tDirect\n@@ -6982,9 +6966,7 @@\n \t\t       (match_operand:DWIH 1 \"nonimmediate_operand\" \"\"))\n \t\t     (any_extend:<DWI>\n \t\t       (match_operand:DWIH 2 \"register_operand\" \"\"))))\n-\t      (clobber (reg:CC FLAGS_REG))])]\n-  \"\"\n-  \"\")\n+\t      (clobber (reg:CC FLAGS_REG))])])\n \n (define_expand \"<u>mulqihi3\"\n   [(parallel [(set (match_operand:HI 0 \"register_operand\" \"\")\n@@ -6994,8 +6976,7 @@\n \t\t     (any_extend:HI\n \t\t       (match_operand:QI 2 \"register_operand\" \"\"))))\n \t      (clobber (reg:CC FLAGS_REG))])]\n-  \"TARGET_QIMODE_MATH\"\n-  \"\")\n+  \"TARGET_QIMODE_MATH\")\n \n (define_insn \"*<u>mul<mode><dwi>3_1\"\n   [(set (match_operand:<DWI> 0 \"register_operand\" \"=A\")\n@@ -7127,16 +7108,14 @@\n   [(set (match_operand:XF 0 \"register_operand\" \"\")\n \t(mult:XF (match_operand:XF 1 \"register_operand\" \"\")\n \t\t (match_operand:XF 2 \"register_operand\" \"\")))]\n-  \"TARGET_80387\"\n-  \"\")\n+  \"TARGET_80387\")\n \n (define_expand \"mul<mode>3\"\n   [(set (match_operand:MODEF 0 \"register_operand\" \"\")\n \t(mult:MODEF (match_operand:MODEF 1 \"register_operand\" \"\")\n \t\t    (match_operand:MODEF 2 \"nonimmediate_operand\" \"\")))]\n   \"(TARGET_80387 && X87_ENABLE_ARITH (<MODE>mode))\n-    || (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\"\n-  \"\")\n+    || (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\")\n \f\n ;; Divide instructions\n \n@@ -7146,16 +7125,14 @@\n   [(set (match_operand:XF 0 \"register_operand\" \"\")\n \t(div:XF (match_operand:XF 1 \"register_operand\" \"\")\n \t\t(match_operand:XF 2 \"register_operand\" \"\")))]\n-  \"TARGET_80387\"\n-  \"\")\n+  \"TARGET_80387\")\n \n (define_expand \"divdf3\"\n   [(set (match_operand:DF 0 \"register_operand\" \"\")\n  \t(div:DF (match_operand:DF 1 \"register_operand\" \"\")\n  \t\t(match_operand:DF 2 \"nonimmediate_operand\" \"\")))]\n    \"(TARGET_80387 && X87_ENABLE_ARITH (DFmode))\n-    || (TARGET_SSE2 && TARGET_SSE_MATH)\"\n-   \"\")\n+    || (TARGET_SSE2 && TARGET_SSE_MATH)\")\n \n (define_expand \"divsf3\"\n   [(set (match_operand:SF 0 \"register_operand\" \"\")\n@@ -7302,9 +7279,7 @@\n \t\t     (match_operand:SWIM248 2 \"nonimmediate_operand\" \"\")))\n \t      (set (match_operand:SWIM248 3 \"register_operand\" \"\")\n \t\t   (mod:SWIM248 (match_dup 1) (match_dup 2)))\n-\t      (clobber (reg:CC FLAGS_REG))])]\n-  \"\"\n-  \"\")\n+\t      (clobber (reg:CC FLAGS_REG))])])\n \n (define_insn_and_split \"*divmod<mode>4\"\n   [(set (match_operand:SWIM248 0 \"register_operand\" \"=a\")\n@@ -7361,9 +7336,7 @@\n \t\t     (match_operand:SWIM248 2 \"nonimmediate_operand\" \"\")))\n \t      (set (match_operand:SWIM248 3 \"register_operand\" \"\")\n \t\t   (umod:SWIM248 (match_dup 1) (match_dup 2)))\n-\t      (clobber (reg:CC FLAGS_REG))])]\n-  \"\"\n-  \"\")\n+\t      (clobber (reg:CC FLAGS_REG))])])\n \n (define_insn_and_split \"*udivmod<mode>4\"\n   [(set (match_operand:SWIM248 0 \"register_operand\" \"=a\")\n@@ -7428,17 +7401,13 @@\n \t(compare:CCNO\n \t  (and:SI (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n \t\t  (match_operand:SI 1 \"nonmemory_operand\" \"\"))\n-\t  (const_int 0)))]\n-  \"\"\n-  \"\")\n+\t  (const_int 0)))])\n \n (define_expand \"testqi_ccz_1\"\n   [(set (reg:CCZ FLAGS_REG)\n         (compare:CCZ (and:QI (match_operand:QI 0 \"nonimmediate_operand\" \"\")\n \t\t\t     (match_operand:QI 1 \"nonmemory_operand\" \"\"))\n-\t\t (const_int 0)))]\n-  \"\"\n-  \"\")\n+\t\t (const_int 0)))])\n \n (define_insn \"*testdi_1\"\n   [(set (reg FLAGS_REG)\n@@ -7508,9 +7477,7 @@\n \t      (const_int 8)\n \t      (const_int 8))\n \t    (match_operand 1 \"const_int_operand\" \"\"))\n-\t  (const_int 0)))]\n-  \"\"\n-  \"\")\n+\t  (const_int 0)))])\n \n (define_insn \"*testqi_ext_0\"\n   [(set (reg FLAGS_REG)\n@@ -8440,9 +8407,7 @@\n \t     (match_dup 1)\n \t     (const_int 8)\n \t     (const_int 8))\n-\t    (match_dup 2)))])]\n-  \"\"\n-  \"\")\n+\t    (match_dup 2)))])])\n \n (define_insn \"*xorqi_cc_ext_1_rex64\"\n   [(set (reg FLAGS_REG)\n@@ -12046,8 +12011,7 @@\n \t\t\t      UNSPEC_TLS_GD))\n \t      (clobber (match_dup 4))\n \t      (clobber (match_dup 5))\n-\t      (clobber (reg:CC FLAGS_REG))])]\n-  \"\")\n+\t      (clobber (reg:CC FLAGS_REG))])])\n \n ;; Segment register for the thread base ptr load\n (define_mode_attr tp_seg [(SI \"gs\") (DI \"fs\")])\n@@ -13153,8 +13117,7 @@\n \t\t\t      UNSPEC_FPATAN))\n \t      (clobber (match_scratch:XF 3 \"\"))])]\n   \"TARGET_USE_FANCY_MATH_387\n-   && flag_unsafe_math_optimizations\"\n-  \"\")\n+   && flag_unsafe_math_optimizations\")\n \n (define_expand \"atan2<mode>3\"\n   [(use (match_operand:MODEF 0 \"register_operand\" \"\"))\n@@ -13505,9 +13468,7 @@\n \t\t   (unspec:XF [(match_dup 1)] UNSPEC_XTRACT_EXP))])]\n   \"TARGET_USE_FANCY_MATH_387\n    && flag_unsafe_math_optimizations\"\n-{\n-  operands[2] = gen_reg_rtx (XFmode);\n-})\n+  \"operands[2] = gen_reg_rtx (XFmode);\")\n \n (define_expand \"logb<mode>2\"\n   [(use (match_operand:MODEF 0 \"register_operand\" \"\"))\n@@ -13891,9 +13852,7 @@\n \t\t   (unspec:XF [(match_dup 1)] UNSPEC_XTRACT_EXP))])]\n   \"TARGET_USE_FANCY_MATH_387\n    && flag_unsafe_math_optimizations\"\n-{\n-  operands[2] = gen_reg_rtx (XFmode);\n-})\n+  \"operands[2] = gen_reg_rtx (XFmode);\")\n \n (define_expand \"significand<mode>2\"\n   [(use (match_operand:MODEF 0 \"register_operand\" \"\"))\n@@ -14106,16 +14065,14 @@\n   [(set (match_operand:X87MODEI 0 \"nonimmediate_operand\" \"\")\n      (unspec:X87MODEI [(match_operand:XF 1 \"register_operand\" \"\")]\n \t\t      UNSPEC_FIST))]\n-  \"TARGET_USE_FANCY_MATH_387\"\n-  \"\")\n+  \"TARGET_USE_FANCY_MATH_387\")\n \n (define_expand \"lrint<MODEF:mode><SSEMODEI24:mode>2\"\n   [(set (match_operand:SSEMODEI24 0 \"nonimmediate_operand\" \"\")\n      (unspec:SSEMODEI24 [(match_operand:MODEF 1 \"register_operand\" \"\")]\n \t\t\tUNSPEC_FIX_NOTRUNC))]\n   \"SSE_FLOAT_MODE_P (<MODEF:MODE>mode) && TARGET_SSE_MATH\n-   && ((<SSEMODEI24:MODE>mode != DImode) || TARGET_64BIT)\"\n-  \"\")\n+   && ((<SSEMODEI24:MODE>mode != DImode) || TARGET_64BIT)\")\n \n (define_expand \"lround<MODEF:mode><SSEMODEI24:mode>2\"\n   [(match_operand:SSEMODEI24 0 \"nonimmediate_operand\" \"\")\n@@ -14373,8 +14330,7 @@\n \t      (clobber (reg:CC FLAGS_REG))])]\n   \"TARGET_USE_FANCY_MATH_387\n    && (!TARGET_SSE_MATH || TARGET_MIX_SSE_I387)\n-   && flag_unsafe_math_optimizations\"\n-  \"\")\n+   && flag_unsafe_math_optimizations\")\n \n (define_expand \"lfloor<MODEF:mode><SWI48:mode>2\"\n   [(match_operand:SWI48 0 \"nonimmediate_operand\" \"\")\n@@ -14631,8 +14587,7 @@\n \t      (clobber (reg:CC FLAGS_REG))])]\n   \"TARGET_USE_FANCY_MATH_387\n    && (!TARGET_SSE_MATH || TARGET_MIX_SSE_I387)\n-   && flag_unsafe_math_optimizations\"\n-  \"\")\n+   && flag_unsafe_math_optimizations\")\n \n (define_expand \"lceil<MODEF:mode><SWI48:mode>2\"\n   [(match_operand:SWI48 0 \"nonimmediate_operand\" \"\")\n@@ -14782,7 +14737,6 @@\n    && flag_unsafe_math_optimizations\"\n {\n   emit_insn (gen_frndintxf2_mask_pm (operands[0], operands[1]));\n-\n   DONE;\n })\n \n@@ -15803,9 +15757,7 @@\n \t      (const_int 0)])\n \t    (const_int -1)\n \t    (const_int 0)))\n-     (clobber (reg:CC FLAGS_REG))])]\n-  \"\"\n-  \"\")\n+     (clobber (reg:CC FLAGS_REG))])])\n \n (define_insn \"*x86_mov<mode>cc_0_m1\"\n   [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n@@ -17617,8 +17569,7 @@\n (define_expand \"lwp_llwpcb\"\n   [(unspec_volatile [(match_operand 0 \"register_operand\" \"r\")]\n \t\t    UNSPECV_LLWP_INTRINSIC)]\n-  \"TARGET_LWP\"\n-  \"\")\n+  \"TARGET_LWP\")\n \n (define_insn \"*lwp_llwpcb<mode>1\"\n   [(unspec_volatile [(match_operand:P 0 \"register_operand\" \"r\")]\n@@ -17633,13 +17584,13 @@\n   [(set (match_operand 0 \"register_operand\" \"=r\")\n \t(unspec_volatile [(const_int 0)] UNSPECV_SLWP_INTRINSIC))]\n   \"TARGET_LWP\"\n-  {\n-    if (TARGET_64BIT)\n-      emit_insn (gen_lwp_slwpcbdi (operands[0]));\n-    else\n-      emit_insn (gen_lwp_slwpcbsi (operands[0]));\n-    DONE;\n-  })\n+{\n+  if (TARGET_64BIT)\n+    emit_insn (gen_lwp_slwpcbdi (operands[0]));\n+  else\n+    emit_insn (gen_lwp_slwpcbsi (operands[0]));\n+  DONE;\n+})\n \n (define_insn \"lwp_slwpcb<mode>\"\n   [(set (match_operand:P 0 \"register_operand\" \"=r\")\n@@ -17679,8 +17630,7 @@\n \t\t\t     UNSPECV_LWPINS_INTRINSIC))\n    (set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm\")\n \t(eq:QI (reg:CCC FLAGS_REG) (const_int 0)))]\n-  \"TARGET_LWP\"\n-  \"\")\n+  \"TARGET_LWP\")\n \n (define_insn \"*lwp_lwpins<mode>3_1\"\n   [(set (reg:CCC FLAGS_REG)"}, {"sha": "8053bc043fb03606647ac5f1e37bb33213ca4ba9", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a427621f8c670213467ba447ce6297fb7d7ce11a/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a427621f8c670213467ba447ce6297fb7d7ce11a/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=a427621f8c670213467ba447ce6297fb7d7ce11a", "patch": "@@ -341,15 +341,13 @@\n   [(set (match_operand:V2SF 0 \"register_operand\" \"\")\n         (minus:V2SF (match_operand:V2SF 1 \"register_operand\" \"\")\n \t\t    (match_operand:V2SF 2 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_3DNOW\"\n-  \"\")\n+  \"TARGET_3DNOW\")\n \n (define_expand \"mmx_subrv2sf3\"\n   [(set (match_operand:V2SF 0 \"register_operand\" \"\")\n         (minus:V2SF (match_operand:V2SF 2 \"register_operand\" \"\")\n \t\t    (match_operand:V2SF 1 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_3DNOW\"\n-  \"\")\n+  \"TARGET_3DNOW\")\n \n (define_insn \"*mmx_subv2sf3\"\n   [(set (match_operand:V2SF 0 \"register_operand\" \"=y,y\")\n@@ -1623,8 +1621,7 @@\n \t\t      (match_operand:V8QI 2 \"register_operand\" \"\")\n \t\t      (match_dup 0)]\n \t\t     UNSPEC_MASKMOV))]\n-  \"TARGET_SSE || TARGET_3DNOW_A\"\n-  \"\")\n+  \"TARGET_SSE || TARGET_3DNOW_A\")\n \n (define_insn \"*mmx_maskmovq\"\n   [(set (mem:V8QI (match_operand:SI 0 \"register_operand\" \"D\"))"}, {"sha": "0a116aa8370d694a304ea740fef44ba1114292d1", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 48, "deletions": 71, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a427621f8c670213467ba447ce6297fb7d7ce11a/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a427621f8c670213467ba447ce6297fb7d7ce11a/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=a427621f8c670213467ba447ce6297fb7d7ce11a", "patch": "@@ -508,30 +508,26 @@\n \t(unspec:SSEMODEF2P\n \t  [(match_operand:SSEMODEF2P 1 \"register_operand\" \"\")]\n \t  UNSPEC_MOVNT))]\n-  \"SSE_VEC_FLOAT_MODE_P (<MODE>mode)\"\n-  \"\")\n+  \"SSE_VEC_FLOAT_MODE_P (<MODE>mode)\")\n \n (define_expand \"storent<mode>\"\n   [(set (match_operand:MODEF 0 \"memory_operand\" \"\")\n \t(unspec:MODEF\n \t  [(match_operand:MODEF 1 \"register_operand\" \"\")]\n \t  UNSPEC_MOVNT))]\n-  \"TARGET_SSE4A\"\n-  \"\")\n+  \"TARGET_SSE4A\")\n \n (define_expand \"storentv2di\"\n   [(set (match_operand:V2DI 0 \"memory_operand\" \"\")\n \t(unspec:V2DI [(match_operand:V2DI 1 \"register_operand\" \"\")]\n \t\t     UNSPEC_MOVNT))]\n-  \"TARGET_SSE2\"\n-  \"\")\n+  \"TARGET_SSE2\")\n \n (define_expand \"storentsi\"\n   [(set (match_operand:SI 0 \"memory_operand\" \"\")\n \t(unspec:SI [(match_operand:SI 1 \"register_operand\" \"\")]\n \t\t   UNSPEC_MOVNT))]\n-  \"TARGET_SSE2\"\n-  \"\")\n+  \"TARGET_SSE2\")\n \n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;;\n@@ -734,8 +730,7 @@\n   [(set (match_operand:V2DF 0 \"register_operand\" \"\")\n \t(div:V2DF (match_operand:V2DF 1 \"register_operand\" \"\")\n \t\t  (match_operand:V2DF 2 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_SSE2\"\n-  \"\")\n+  \"TARGET_SSE2\")\n \n (define_insn \"*avx_div<mode>3\"\n   [(set (match_operand:SSEMODEF2P 0 \"register_operand\" \"=x\")\n@@ -3106,10 +3101,8 @@\n      (vec_select:V2SF\n        (match_dup 2)\n        (parallel [(const_int 0) (const_int 1)]))))]\n- \"TARGET_SSE2\"\n-{\n- operands[2] = gen_reg_rtx (V4SFmode);\n-})\n+  \"TARGET_SSE2\"\n+  \"operands[2] = gen_reg_rtx (V4SFmode);\")\n \n (define_expand \"vec_unpacks_lo_v4sf\"\n   [(set (match_operand:V2DF 0 \"register_operand\" \"\")\n@@ -3180,8 +3173,8 @@\n \t  (vec_select:V2SI\n \t  (match_dup 2)\n \t    (parallel [(const_int 0) (const_int 1)]))))]\n- \"TARGET_SSE2\"\n- \"operands[2] = gen_reg_rtx (V4SImode);\")\n+  \"TARGET_SSE2\"\n+  \"operands[2] = gen_reg_rtx (V4SImode);\")\n \n (define_expand \"vec_unpacks_float_lo_v4si\"\n   [(set (match_operand:V2DF 0 \"register_operand\" \"\")\n@@ -3210,7 +3203,7 @@\n \t(and:V2DF (match_dup 7) (match_dup 4)))\n    (set (match_operand:V2DF 0 \"register_operand\" \"\")\n \t(plus:V2DF (match_dup 6) (match_dup 8)))]\n- \"TARGET_SSE2\"\n+  \"TARGET_SSE2\"\n {\n   REAL_VALUE_TYPE TWO32r;\n   rtx x;\n@@ -4467,8 +4460,7 @@\n \t    (match_dup 1))\n \t  (parallel [(const_int 0) (const_int 4)\n \t\t     (const_int 2) (const_int 6)])))]\n-  \"TARGET_AVX\"\n-  \"\")\n+  \"TARGET_AVX\")\n \n (define_expand \"avx_unpcklpd256\"\n   [(set (match_operand:V4DF 0 \"register_operand\" \"\")\n@@ -4478,8 +4470,7 @@\n \t    (match_operand:V4DF 2 \"nonimmediate_operand\" \"\"))\n \t  (parallel [(const_int 0) (const_int 4)\n \t\t     (const_int 2) (const_int 6)])))]\n-  \"TARGET_AVX\"\n-  \"\")\n+  \"TARGET_AVX\")\n \n (define_insn \"*avx_unpcklpd256\"\n   [(set (match_operand:V4DF 0 \"register_operand\"         \"=x,x\")\n@@ -4813,9 +4804,7 @@\n \t  (parallel [(const_int 1)])))]\n   \"TARGET_SSE2 && reload_completed\"\n   [(set (match_dup 0) (match_dup 1))]\n-{\n-  operands[1] = adjust_address (operands[1], DFmode, 8);\n-})\n+  \"operands[1] = adjust_address (operands[1], DFmode, 8);\")\n \n ;; Avoid combining registers from different units in a single alternative,\n ;; see comment above inline_secondary_memory_needed function in i386.c\n@@ -4910,9 +4899,7 @@\n \t  (match_operand:DF 1 \"register_operand\" \"\")))]\n   \"TARGET_SSE2 && reload_completed\"\n   [(set (match_dup 0) (match_dup 1))]\n-{\n-  operands[0] = adjust_address (operands[0], DFmode, 8);\n-})\n+  \"operands[0] = adjust_address (operands[0], DFmode, 8);\")\n \n (define_expand \"sse2_loadlpd_exp\"\n   [(set (match_operand:V2DF 0 \"nonimmediate_operand\" \"\")\n@@ -4975,9 +4962,7 @@\n \t  (vec_select:DF (match_dup 0) (parallel [(const_int 1)]))))]\n   \"TARGET_SSE2 && reload_completed\"\n   [(set (match_dup 0) (match_dup 1))]\n-{\n-  operands[0] = adjust_address (operands[0], DFmode, 8);\n-})\n+  \"operands[0] = adjust_address (operands[0], DFmode, 8);\")\n \n ;; Not sure these two are ever used, but it doesn't hurt to have\n ;; them. -aoliva\n@@ -6127,20 +6112,20 @@\n   if (TARGET_SSE4_1)\n     ix86_fixup_binary_operands_no_copy (SMAX, <MODE>mode, operands);\n   else\n-  {\n-    rtx xops[6];\n-    bool ok;\n-\n-    xops[0] = operands[0];\n-    xops[1] = operands[1];\n-    xops[2] = operands[2];\n-    xops[3] = gen_rtx_GT (VOIDmode, operands[1], operands[2]);\n-    xops[4] = operands[1];\n-    xops[5] = operands[2];\n-    ok = ix86_expand_int_vcond (xops);\n-    gcc_assert (ok);\n-    DONE;\n-  }\n+    {\n+      rtx xops[6];\n+      bool ok;\n+\n+      xops[0] = operands[0];\n+      xops[1] = operands[1];\n+      xops[2] = operands[2];\n+      xops[3] = gen_rtx_GT (VOIDmode, operands[1], operands[2]);\n+      xops[4] = operands[1];\n+      xops[5] = operands[2];\n+      ok = ix86_expand_int_vcond (xops);\n+      gcc_assert (ok);\n+      DONE;\n+    }\n })\n \n (define_insn \"*sse4_1_<code><mode>3\"\n@@ -6183,20 +6168,20 @@\n   if (TARGET_SSE4_1)\n     ix86_fixup_binary_operands_no_copy (UMAX, V4SImode, operands);\n   else\n-  {\n-    rtx xops[6];\n-    bool ok;\n-\n-    xops[0] = operands[0];\n-    xops[1] = operands[1];\n-    xops[2] = operands[2];\n-    xops[3] = gen_rtx_GTU (VOIDmode, operands[1], operands[2]);\n-    xops[4] = operands[1];\n-    xops[5] = operands[2];\n-    ok = ix86_expand_int_vcond (xops);\n-    gcc_assert (ok);\n-    DONE;\n-  }\n+    {\n+      rtx xops[6];\n+      bool ok;\n+\n+      xops[0] = operands[0];\n+      xops[1] = operands[1];\n+      xops[2] = operands[2];\n+      xops[3] = gen_rtx_GTU (VOIDmode, operands[1], operands[2]);\n+      xops[4] = operands[1];\n+      xops[5] = operands[2];\n+      ok = ix86_expand_int_vcond (xops);\n+      gcc_assert (ok);\n+      DONE;\n+    }\n })\n \n (define_insn \"*sse4_1_<code><mode>3\"\n@@ -7313,9 +7298,7 @@\n        || MEM_P (operands [0])\n        || !GENERAL_REGNO_P (true_regnum (operands [0])))\"\n   [(set (match_dup 0) (match_dup 1))]\n-{\n-  operands[1] = gen_rtx_REG (SImode, REGNO (operands[1]));\n-})\n+  \"operands[1] = gen_rtx_REG (SImode, REGNO (operands[1]));\")\n \n (define_insn_and_split \"*vec_ext_v4si_mem\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -7338,8 +7321,7 @@\n \t(vec_select:DI\n \t  (match_operand:V2DI 1 \"register_operand\" \"\")\n \t  (parallel [(const_int 0)])))]\n-  \"TARGET_SSE\"\n-  \"\")\n+  \"TARGET_SSE\")\n \n (define_insn \"*sse2_storeq_rex64\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=mx,*r,r\")\n@@ -7374,9 +7356,7 @@\n        || MEM_P (operands [0])\n        || !GENERAL_REGNO_P (true_regnum (operands [0])))\"\n   [(set (match_dup 0) (match_dup 1))]\n-{\n-  operands[1] = gen_rtx_REG (DImode, REGNO (operands[1]));\n-})\n+  \"operands[1] = gen_rtx_REG (DImode, REGNO (operands[1]));\")\n \n (define_insn \"*vec_extractv2di_1_rex64_avx\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=m,x,x,r\")\n@@ -8055,8 +8035,7 @@\n \t\t       (match_operand:V16QI 2 \"register_operand\" \"\")\n \t\t       (match_dup 0)]\n \t\t      UNSPEC_MASKMOV))]\n-  \"TARGET_SSE2\"\n-  \"\")\n+  \"TARGET_SSE2\")\n \n (define_insn \"*sse2_maskmovdqu\"\n   [(set (mem:V16QI (match_operand:SI 0 \"register_operand\" \"D\"))\n@@ -11508,9 +11487,7 @@\n   \"&& reload_completed && REG_P (operands[1])\"\n   [(set (match_dup 2) (vec_duplicate:<avxhalfvecmode> (match_dup 1)))\n    (set (match_dup 0) (vec_concat:AVX256MODE24P (match_dup 2) (match_dup 2)))]\n-{\n-  operands[2] = gen_rtx_REG (<avxhalfvecmode>mode, REGNO (operands[0]));\n-}\n+  \"operands[2] = gen_rtx_REG (<avxhalfvecmode>mode, REGNO (operands[0]));\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"vex\")"}]}