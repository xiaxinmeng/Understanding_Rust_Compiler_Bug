{"sha": "975f381876699c55c3802e2d102eb0d9e1dcd6b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc1ZjM4MTg3NjY5OWM1NWMzODAyZTJkMTAyZWIwZDllMWRjZDZiMw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2003-09-14T10:07:51Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2003-09-14T10:07:51Z"}, "message": "function.c (STACK_BYTES): Move definition to head of file.\n\n\t* function.c (STACK_BYTES): Move definition to head of file.\n\t(assign_parms): Don't pass current_function_pretend_args_size\n\tdirectly to SETUP_INCOMING_VARARGS.  For partial register arguments,\n\tround current_function_pretend_args_size up to STACK_BYTES.  Skip any\n\texcess before laying out the argument.\n\nFrom-SVN: r71372", "tree": {"sha": "8d4bc0c5b6278c4ecbb34d3389d0f7d3a7bc36f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d4bc0c5b6278c4ecbb34d3389d0f7d3a7bc36f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/975f381876699c55c3802e2d102eb0d9e1dcd6b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/975f381876699c55c3802e2d102eb0d9e1dcd6b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/975f381876699c55c3802e2d102eb0d9e1dcd6b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/975f381876699c55c3802e2d102eb0d9e1dcd6b3/comments", "author": null, "committer": null, "parents": [{"sha": "011d50d946a1c854e19d0be0aff69de6f97f6eaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/011d50d946a1c854e19d0be0aff69de6f97f6eaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/011d50d946a1c854e19d0be0aff69de6f97f6eaf"}], "stats": {"total": 130, "additions": 109, "deletions": 21}, "files": [{"sha": "9c4ae39a385eed443bc3f34381403b1811a70e3b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/975f381876699c55c3802e2d102eb0d9e1dcd6b3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/975f381876699c55c3802e2d102eb0d9e1dcd6b3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=975f381876699c55c3802e2d102eb0d9e1dcd6b3", "patch": "@@ -1,3 +1,11 @@\n+2003-09-14  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* function.c (STACK_BYTES): Move definition to head of file.\n+\t(assign_parms): Don't pass current_function_pretend_args_size\n+\tdirectly to SETUP_INCOMING_VARARGS.  For partial register arguments,\n+\tround current_function_pretend_args_size up to STACK_BYTES.  Skip any\n+\texcess before laying out the argument.\n+\n 2003-09-14  Andreas Jaeger  <aj@suse.de>\n \n \t* objc/objc-act.c: Convert to ISO C90 prototypes."}, {"sha": "29c84222071de10ae99ed493efd4dad56d40b8f3", "filename": "gcc/function.c", "status": "modified", "additions": 50, "deletions": 21, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/975f381876699c55c3802e2d102eb0d9e1dcd6b3/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/975f381876699c55c3802e2d102eb0d9e1dcd6b3/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=975f381876699c55c3802e2d102eb0d9e1dcd6b3", "patch": "@@ -76,6 +76,8 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #define STACK_ALIGNMENT_NEEDED 1\n #endif\n \n+#define STACK_BYTES (STACK_BOUNDARY / BITS_PER_UNIT)\n+\n /* Some systems use __main in a way incompatible with its use in gcc, in these\n    cases use the macros NAME__MAIN to give a quoted symbol and SYMBOL__MAIN to\n    give the same symbol without quotes for an alternative entry point.  You\n@@ -4339,6 +4341,7 @@ assign_parms (tree fndecl)\n       int last_named = 0, named_arg;\n       int in_regs;\n       int partial = 0;\n+      int pretend_bytes = 0;\n \n       /* Set LAST_NAMED if this is last named arg before last\n \t anonymous args.  */\n@@ -4453,10 +4456,17 @@ assign_parms (tree fndecl)\n \t Also, indicate when RTL generation is to be suppressed.  */\n       if (last_named && !varargs_setup)\n \t{\n+\t  int varargs_pretend_bytes = 0;\n \t  targetm.calls.setup_incoming_varargs (&args_so_far, promoted_mode,\n-\t\t\t\t\t\t  passed_type,\n-\t\t\t\t\t\t  &current_function_pretend_args_size, 0);\n+\t\t\t\t\t\tpassed_type,\n+\t\t\t\t\t\t&varargs_pretend_bytes, 0);\n \t  varargs_setup = 1;\n+\n+\t  /* If the back-end has requested extra stack space, record how\n+\t     much is needed.  Do not change pretend_args_size otherwise\n+\t     since it may be nonzero from an earlier partial argument.  */\n+\t  if (varargs_pretend_bytes > 0)\n+\t    current_function_pretend_args_size = varargs_pretend_bytes;\n \t}\n \n       /* Determine parm's home in the stack,\n@@ -4500,8 +4510,43 @@ assign_parms (tree fndecl)\n \n #ifdef FUNCTION_ARG_PARTIAL_NREGS\n       if (entry_parm)\n-\tpartial = FUNCTION_ARG_PARTIAL_NREGS (args_so_far, promoted_mode,\n-\t\t\t\t\t      passed_type, named_arg);\n+\t{\n+\t  partial = FUNCTION_ARG_PARTIAL_NREGS (args_so_far, promoted_mode,\n+\t\t\t\t\t\tpassed_type, named_arg);\n+\t  if (partial\n+#ifndef MAYBE_REG_PARM_STACK_SPACE\n+\t      /* The caller might already have allocated stack space\n+\t\t for the register parameters.  */\n+\t      && reg_parm_stack_space == 0\n+#endif\n+\t      )\n+\t    {\n+\t      /* Part of this argument is passed in registers and part\n+\t\t is passed on the stack.  Ask the prologue code to extend\n+\t\t the stack part so that we can recreate the full value.\n+\n+\t\t PRETEND_BYTES is the size of the registers we need to store.\n+\t\t CURRENT_FUNCTION_PRETEND_ARGS_SIZE is the amount of extra\n+\t\t stack space that the prologue should allocate.\n+\n+\t\t Internally, gcc assumes that the argument pointer is\n+\t\t aligned to STACK_BOUNDARY bits.  This is used both for\n+\t\t alignment optimisations (see init_emit) and to locate\n+\t\t arguments that are aligned to more than PARM_BOUNDARY\n+\t\t bits.  We must preserve this invariant by rounding\n+\t\t CURRENT_FUNCTION_PRETEND_ARGS_SIZE up to a stack\n+\t\t boundary.  */\n+\t      pretend_bytes = partial * UNITS_PER_WORD;\n+\t      current_function_pretend_args_size\n+\t\t= CEIL_ROUND (pretend_bytes, STACK_BYTES);\n+\n+\t      /* If PRETEND_BYTES != CURRENT_FUNCTION_PRETEND_ARGS_SIZE,\n+\t\t insert the padding before the start of the first pretend\n+\t\t argument.  */\n+\t      stack_args_size.constant\n+\t\t= (current_function_pretend_args_size - pretend_bytes);\n+\t    }\n+\t}\n #endif\n \n       memset (&locate, 0, sizeof (locate));\n@@ -4546,17 +4591,6 @@ assign_parms (tree fndecl)\n \n       if (partial)\n \t{\n-#ifndef MAYBE_REG_PARM_STACK_SPACE\n-\t  /* When REG_PARM_STACK_SPACE is nonzero, stack space for\n-\t     split parameters was allocated by our caller, so we\n-\t     won't be pushing it in the prolog.  */\n-\t  if (reg_parm_stack_space == 0)\n-#endif\n-\t  current_function_pretend_args_size\n-\t    = (((partial * UNITS_PER_WORD) + (PARM_BOUNDARY / BITS_PER_UNIT) - 1)\n-\t       / (PARM_BOUNDARY / BITS_PER_UNIT)\n-\t       * (PARM_BOUNDARY / BITS_PER_UNIT));\n-\n \t  /* Handle calls that pass values in multiple non-contiguous\n \t     locations.  The Irix 6 ABI has examples of this.  */\n \t  if (GET_CODE (entry_parm) == PARALLEL)\n@@ -4600,10 +4634,7 @@ assign_parms (tree fndecl)\n #endif\n \t  )\n \t{\n-\t  stack_args_size.constant += locate.size.constant;\n-\t  /* locate.size doesn't include the part in regs.  */\n-\t  if (partial)\n-\t    stack_args_size.constant += current_function_pretend_args_size;\n+\t  stack_args_size.constant += pretend_bytes + locate.size.constant;\n \t  if (locate.size.var)\n \t    ADD_PARM_SIZE (stack_args_size, locate.size.var);\n \t}\n@@ -5175,8 +5206,6 @@ assign_parms (tree fndecl)\n #endif\n #endif\n \n-#define STACK_BYTES (STACK_BOUNDARY / BITS_PER_UNIT)\n-\n   current_function_args_size\n     = ((current_function_args_size + STACK_BYTES - 1)\n        / STACK_BYTES) * STACK_BYTES;"}, {"sha": "b2f7a2fefc2a81b9ab902eb832863ff5efa6bc06", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/975f381876699c55c3802e2d102eb0d9e1dcd6b3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/975f381876699c55c3802e2d102eb0d9e1dcd6b3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=975f381876699c55c3802e2d102eb0d9e1dcd6b3", "patch": "@@ -1,3 +1,7 @@\n+2003-09-14  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* gcc.c-torture/execute/20030914-[12].c: New tests.\n+\n 2003-09-11  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/11788"}, {"sha": "ab1c1541df0a2e4d4bfd9b84c61cfdd3cfafcc47", "filename": "gcc/testsuite/gcc.c-torture/execute/20030914-1.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/975f381876699c55c3802e2d102eb0d9e1dcd6b3/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20030914-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/975f381876699c55c3802e2d102eb0d9e1dcd6b3/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20030914-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20030914-1.c?ref=975f381876699c55c3802e2d102eb0d9e1dcd6b3", "patch": "@@ -0,0 +1,26 @@\n+/* On IRIX 6, PB is passed partially in registers and partially on the\n+   stack, with an odd number of words in the register part.  Check that\n+   the long double stack argument (PC) is still accessed properly.  */\n+\n+struct s { int val[16]; };\n+\n+long double f (int pa, struct s pb, long double pc)\n+{\n+  int i;\n+\n+  for (i = 0; i < 16; i++)\n+    pc += pb.val[i];\n+  return pc;\n+}\n+\n+int main ()\n+{\n+  struct s x;\n+  int i;\n+\n+  for (i = 0; i < 16; i++)\n+    x.val[i] = i + 1;\n+  if (f (1, x, 10000.0L) != 10136.0L)\n+    abort ();\n+  exit (0);\n+}"}, {"sha": "38a81982ff265c7a053aa98ec4403b92694e12f8", "filename": "gcc/testsuite/gcc.c-torture/execute/20030914-2.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/975f381876699c55c3802e2d102eb0d9e1dcd6b3/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20030914-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/975f381876699c55c3802e2d102eb0d9e1dcd6b3/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20030914-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20030914-2.c?ref=975f381876699c55c3802e2d102eb0d9e1dcd6b3", "patch": "@@ -0,0 +1,21 @@\n+/* On IRIX 6, PA is passed partially in registers and partially on the\n+   stack.  We therefore have two potential uses of pretend_args_size:\n+   one for the partial argument and one for the varargs save area.\n+   Make sure that these uses don't conflict.  */\n+\n+struct s { int i[18]; };\n+\n+int f (struct s pa, int pb, ...)\n+{\n+  return pb;\n+}\n+\n+struct s gs;\n+\n+int main ()\n+{\n+  if (f (gs, 0x1234) != 0x1234)\n+    abort ();\n+\n+  exit (0);\n+}"}]}