{"sha": "ba4fa5819f91c7e82eb08ff33fd61b106715a54e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmE0ZmE1ODE5ZjkxYzdlODJlYjA4ZmYzM2ZkNjFiMTA2NzE1YTU0ZQ==", "commit": {"author": {"name": "Wei Mi", "email": "wmi@google.com", "date": "2013-12-03T18:35:24Z"}, "committer": {"name": "Wei Mi", "email": "wmi@gcc.gnu.org", "date": "2013-12-03T18:35:24Z"}, "message": "re PR rtl-optimization/59020 (internal compiler error: in maybe_add_or_update_dep_1, at sched-deps.c:933)\n\n2013-12-03  Wei Mi  <wmi@google.com>\n\n\tPR rtl-optimization/59020\n\t* sched-deps.c (try_group_insn): Move it from haifa-sched.c to here.\n\t(sched_analyze_insn): Call try_group_insn.\n\t(sched_analyze): Cleanup SCHED_GROUP_P before start the analysis.\n\t* haifa-sched.c (try_group_insn): Moved to sched-deps.c.\n\t(group_insns_for_macro_fusion): Removed.\n\t(sched_init): Remove calling group_insns_for_macro_fusion.\n\n2013-12-03  Wei Mi  <wmi@google.com>\n\n\tPR rtl-optimization/59020\n\t* testsuite/gcc.dg/pr59020.c: New.\n\t* testsuite/gcc.dg/macro-fusion-1.c: New.\n\t* testsuite/gcc.dg/macro-fusion-2.c: New.\n\nFrom-SVN: r205644", "tree": {"sha": "c7fa75151c5a9cc592c2871ba91390f22dffed86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7fa75151c5a9cc592c2871ba91390f22dffed86"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba4fa5819f91c7e82eb08ff33fd61b106715a54e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba4fa5819f91c7e82eb08ff33fd61b106715a54e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba4fa5819f91c7e82eb08ff33fd61b106715a54e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba4fa5819f91c7e82eb08ff33fd61b106715a54e/comments", "author": {"login": "wmi-11", "id": 59629650, "node_id": "MDQ6VXNlcjU5NjI5NjUw", "avatar_url": "https://avatars.githubusercontent.com/u/59629650?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wmi-11", "html_url": "https://github.com/wmi-11", "followers_url": "https://api.github.com/users/wmi-11/followers", "following_url": "https://api.github.com/users/wmi-11/following{/other_user}", "gists_url": "https://api.github.com/users/wmi-11/gists{/gist_id}", "starred_url": "https://api.github.com/users/wmi-11/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wmi-11/subscriptions", "organizations_url": "https://api.github.com/users/wmi-11/orgs", "repos_url": "https://api.github.com/users/wmi-11/repos", "events_url": "https://api.github.com/users/wmi-11/events{/privacy}", "received_events_url": "https://api.github.com/users/wmi-11/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "05db108d6b1f073795f7aae33a30791f343c2f60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05db108d6b1f073795f7aae33a30791f343c2f60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05db108d6b1f073795f7aae33a30791f343c2f60"}], "stats": {"total": 150, "additions": 101, "deletions": 49}, "files": [{"sha": "51e1fa0b9d3c0855497c86c13f16762de0a991f5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4fa5819f91c7e82eb08ff33fd61b106715a54e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4fa5819f91c7e82eb08ff33fd61b106715a54e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ba4fa5819f91c7e82eb08ff33fd61b106715a54e", "patch": "@@ -1,3 +1,13 @@\n+2013-12-03  Wei Mi  <wmi@google.com>\n+\n+\tPR rtl-optimization/59020\n+\t* sched-deps.c (try_group_insn): Move it from haifa-sched.c to here.\n+\t(sched_analyze_insn): Call try_group_insn.\n+\t(sched_analyze): Cleanup SCHED_GROUP_P before start the analysis.\n+\t* haifa-sched.c (try_group_insn): Moved to sched-deps.c.\n+\t(group_insns_for_macro_fusion): Removed.\n+\t(sched_init): Remove calling group_insns_for_macro_fusion.\n+\n 2013-12-03  Peter Bergner  <bergner@vnet.ibm.com>\n \n \t* config/rs6000/htmintrin.h (_TEXASR_INSTRUCTION_FETCH_CONFLICT): Fix"}, {"sha": "8d47eb93d53db5a398deca29b9af4a0aae298c96", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4fa5819f91c7e82eb08ff33fd61b106715a54e/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4fa5819f91c7e82eb08ff33fd61b106715a54e/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=ba4fa5819f91c7e82eb08ff33fd61b106715a54e", "patch": "@@ -6553,50 +6553,6 @@ setup_sched_dump (void)\n \t\t? stderr : dump_file);\n }\n \n-/* Try to group comparison and the following conditional jump INSN if\n-   they're already adjacent. This is to prevent scheduler from scheduling\n-   them apart.  */\n-\n-static void\n-try_group_insn (rtx insn)\n-{\n-  unsigned int condreg1, condreg2;\n-  rtx cc_reg_1;\n-  rtx prev;\n-\n-  if (!any_condjump_p (insn))\n-    return;\n-\n-  targetm.fixed_condition_code_regs (&condreg1, &condreg2);\n-  cc_reg_1 = gen_rtx_REG (CCmode, condreg1);\n-  prev = prev_nonnote_nondebug_insn (insn);\n-  if (!reg_referenced_p (cc_reg_1, PATTERN (insn))\n-      || !prev\n-      || !modified_in_p (cc_reg_1, prev))\n-    return;\n-\n-  /* Different microarchitectures support macro fusions for different\n-     combinations of insn pairs.  */\n-  if (!targetm.sched.macro_fusion_pair_p\n-      || !targetm.sched.macro_fusion_pair_p (prev, insn))\n-    return;\n-\n-  SCHED_GROUP_P (insn) = 1;\n-}\n-\n-/* If the last cond jump and the cond register defining insn are consecutive\n-   before scheduling, we want them to be in a schedule group. This is good\n-   for performance on microarchitectures supporting macro-fusion.  */\n-\n-static void\n-group_insns_for_macro_fusion ()\n-{\n-  basic_block bb;\n-\n-  FOR_EACH_BB (bb)\n-    try_group_insn (BB_END (bb));\n-}\n-\n /* Initialize some global state for the scheduler.  This function works\n    with the common data shared between all the schedulers.  It is called\n    from the scheduler specific initialization routine.  */\n@@ -6725,11 +6681,6 @@ sched_init (void)\n     }\n \n   curr_state = xmalloc (dfa_state_size);\n-\n-  /* Group compare and branch insns for macro-fusion.  */\n-  if (targetm.sched.macro_fusion_p\n-      && targetm.sched.macro_fusion_p ())\n-    group_insns_for_macro_fusion ();\n }\n \n static void haifa_init_only_bb (basic_block, basic_block);"}, {"sha": "f818a83ea2ec55dceafa99419644d67dcdd06bad", "filename": "gcc/sched-deps.c", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4fa5819f91c7e82eb08ff33fd61b106715a54e/gcc%2Fsched-deps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4fa5819f91c7e82eb08ff33fd61b106715a54e/gcc%2Fsched-deps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-deps.c?ref=ba4fa5819f91c7e82eb08ff33fd61b106715a54e", "patch": "@@ -2820,6 +2820,37 @@ sched_analyze_2 (struct deps_desc *deps, rtx x, rtx insn)\n     sched_deps_info->finish_rhs ();\n }\n \n+/* Try to group comparison and the following conditional jump INSN if\n+   they're already adjacent. This is to prevent scheduler from scheduling\n+   them apart.  */\n+\n+static void\n+try_group_insn (rtx insn)\n+{\n+  unsigned int condreg1, condreg2;\n+  rtx cc_reg_1;\n+  rtx prev;\n+\n+  if (!any_condjump_p (insn))\n+    return;\n+\n+  targetm.fixed_condition_code_regs (&condreg1, &condreg2);\n+  cc_reg_1 = gen_rtx_REG (CCmode, condreg1);\n+  prev = prev_nonnote_nondebug_insn (insn);\n+  if (!reg_referenced_p (cc_reg_1, PATTERN (insn))\n+      || !prev\n+      || !modified_in_p (cc_reg_1, prev))\n+    return;\n+\n+  /* Different microarchitectures support macro fusions for different\n+     combinations of insn pairs.  */\n+  if (!targetm.sched.macro_fusion_pair_p\n+      || !targetm.sched.macro_fusion_pair_p (prev, insn))\n+    return;\n+\n+  SCHED_GROUP_P (insn) = 1;\n+}\n+\n /* Analyze an INSN with pattern X to find all dependencies.  */\n static void\n sched_analyze_insn (struct deps_desc *deps, rtx x, rtx insn)\n@@ -2843,6 +2874,11 @@ sched_analyze_insn (struct deps_desc *deps, rtx x, rtx insn)\n   can_start_lhs_rhs_p = (NONJUMP_INSN_P (insn)\n \t\t\t && code == SET);\n \n+  /* Group compare and branch insns for macro-fusion.  */\n+  if (targetm.sched.macro_fusion_p\n+      && targetm.sched.macro_fusion_p ())\n+    try_group_insn (insn);\n+\n   if (may_trap_p (x))\n     /* Avoid moving trapping instructions across function calls that might\n        not always return.  */\n@@ -3733,6 +3769,10 @@ sched_analyze (struct deps_desc *deps, rtx head, rtx tail)\n \t{\n \t  /* And initialize deps_lists.  */\n \t  sd_init_insn (insn);\n+\t  /* Clean up SCHED_GROUP_P which may be set by last\n+\t     scheduler pass.  */\n+\t  if (SCHED_GROUP_P (insn))\n+\t    SCHED_GROUP_P (insn) = 0;\n \t}\n \n       deps_analyze_insn (deps, insn);"}, {"sha": "c1a0f54f093d470927853252b6ea0c8ad6c878b1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4fa5819f91c7e82eb08ff33fd61b106715a54e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4fa5819f91c7e82eb08ff33fd61b106715a54e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ba4fa5819f91c7e82eb08ff33fd61b106715a54e", "patch": "@@ -1,3 +1,10 @@\n+2013-12-03  Wei Mi  <wmi@google.com>\n+\n+\tPR rtl-optimization/59020\n+\t* testsuite/gcc.dg/pr59020.c: New.\n+\t* testsuite/gcc.dg/macro-fusion-1.c: New.\n+\t* testsuite/gcc.dg/macro-fusion-2.c: New.\n+\n 2013-12-03  Yury Gribov  <y.gribov@samsung.com>\n \n \tPR sanitizer/59063"}, {"sha": "4ac98668bdcbc2bc82dc1ad565bb6b370662803e", "filename": "gcc/testsuite/gcc.dg/macro-fusion-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4fa5819f91c7e82eb08ff33fd61b106715a54e/gcc%2Ftestsuite%2Fgcc.dg%2Fmacro-fusion-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4fa5819f91c7e82eb08ff33fd61b106715a54e/gcc%2Ftestsuite%2Fgcc.dg%2Fmacro-fusion-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fmacro-fusion-1.c?ref=ba4fa5819f91c7e82eb08ff33fd61b106715a54e", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -mtune=corei7 -fdump-rtl-sched2\" } */\n+/* { dg-final { scan-rtl-dump-not \"compare.*insn.*jump_insn.*jump_insn\" \"sched2\" } } */\n+\n+int a[100];\n+\n+double bar (double sum)\n+{\n+  int i;\n+  for (i = 0; i < 1000000; i++)\n+   sum += (0.5 + (a[i%100] - 128));\n+  return sum;\n+}"}, {"sha": "638350d9926724537b9832b1b2ef5ac08b832235", "filename": "gcc/testsuite/gcc.dg/macro-fusion-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4fa5819f91c7e82eb08ff33fd61b106715a54e/gcc%2Ftestsuite%2Fgcc.dg%2Fmacro-fusion-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4fa5819f91c7e82eb08ff33fd61b106715a54e/gcc%2Ftestsuite%2Fgcc.dg%2Fmacro-fusion-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fmacro-fusion-2.c?ref=ba4fa5819f91c7e82eb08ff33fd61b106715a54e", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -mtune=corei7-avx -fdump-rtl-sched2\" } */\n+/* { dg-final { scan-rtl-dump-not \"compare.*insn.*jump_insn.*jump_insn\" \"sched2\" } } */\n+\n+int a[100];\n+\n+double bar (double sum)\n+{\n+  int i = 100000;\n+  while (i != 0)\n+    {\n+      sum += (0.5 + (a[i%100] - 128));\n+      i--;\n+    }\n+  return sum;\n+}"}, {"sha": "696c9df9ac16f4d0eb45bcdeafe4ccb537a7574e", "filename": "gcc/testsuite/gcc.dg/pr59020.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba4fa5819f91c7e82eb08ff33fd61b106715a54e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr59020.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba4fa5819f91c7e82eb08ff33fd61b106715a54e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr59020.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr59020.c?ref=ba4fa5819f91c7e82eb08ff33fd61b106715a54e", "patch": "@@ -0,0 +1,15 @@\n+/* PR rtl-optimization/59020 */\n+\n+/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -fmodulo-sched -fno-inline -march=corei7\" } */\n+\n+int a, b, d;\n+unsigned c;\n+\n+void f()\n+{\n+  unsigned q;\n+  for(; a; a++)\n+    if(((c %= d && 1) ? : 1) & 1)\n+      for(; b; q++);\n+}"}]}