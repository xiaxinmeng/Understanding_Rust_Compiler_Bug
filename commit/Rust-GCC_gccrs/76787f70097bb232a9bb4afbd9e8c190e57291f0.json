{"sha": "76787f70097bb232a9bb4afbd9e8c190e57291f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzY3ODdmNzAwOTdiYjIzMmE5YmI0YWZiZDllOGMxOTBlNTcyOTFmMA==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2015-08-05T17:36:29Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2015-08-05T17:36:29Z"}, "message": "re PR c/16351 (NULL dereference warnings)\n\ngcc/ChangeLog:\n\n2015-08-05  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\t    Jeff Law  <law@redhat.com>\n\n\tPR c/16351\n\t* doc/invoke.texi (Wnull-dereference): New.\n\t* tree-vrp.c (infer_value_range): Update call to infer_nonnull_range.\n\t* gimple-ssa-isolate-paths.c (find_implicit_erroneous_behaviour):\n\tWarn for potential NULL dereferences.\n\t(find_explicit_erroneous_behaviour): Warn for NULL dereferences.\n\t* ubsan.c (instrument_nonnull_arg): Call\n\tinfer_nonnull_range_by_attribute.\n\t(instrument_nonnull_return): Likewise.\n\t* common.opt (Wnull-dereference); New.\n\t* gimple.c (infer_nonnull_range): Remove bool arguments.\n\t(infer_nonnull_range_by_dereference): New.\n\t(infer_nonnull_range_by_attribute): New.\n\t* gimple.h: Update declarations.\n\ngcc/testsuite/ChangeLog:\n\n2015-08-05  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\t    Jeff Law  <law@redhat.com>\n\n\tPR c/16351\n\t* gcc.dg/tree-ssa/isolate-2.c: Close comment.\n\t* gcc.dg/tree-ssa/isolate-4.c: Likewise.\n\t* gcc.dg/tree-ssa/wnull-dereference.c: New test.\n\t* gcc.dg/tree-ssa/isolate-1.c: Test warnings with -Wnull-dereference.\n\t* gcc.dg/tree-ssa/isolate-3.c: Likewise.\n\t* gcc.dg/tree-ssa/isolate-5.c: Likewise.\n\n\n\nCo-Authored-By: Jeff Law <law@redhat.com>\n\nFrom-SVN: r226640", "tree": {"sha": "95eb22912610de69685ef6ec213edea83c4c6c6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95eb22912610de69685ef6ec213edea83c4c6c6d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76787f70097bb232a9bb4afbd9e8c190e57291f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76787f70097bb232a9bb4afbd9e8c190e57291f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76787f70097bb232a9bb4afbd9e8c190e57291f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76787f70097bb232a9bb4afbd9e8c190e57291f0/comments", "author": null, "committer": null, "parents": [{"sha": "72a35f9354f285d7ab6211c6c1b71056969f90c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72a35f9354f285d7ab6211c6c1b71056969f90c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72a35f9354f285d7ab6211c6c1b71056969f90c7"}], "stats": {"total": 271, "additions": 222, "deletions": 49}, "files": [{"sha": "c29e1c6e4da0672925862fb603cab188f6975f52", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76787f70097bb232a9bb4afbd9e8c190e57291f0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76787f70097bb232a9bb4afbd9e8c190e57291f0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=76787f70097bb232a9bb4afbd9e8c190e57291f0", "patch": "@@ -1,3 +1,21 @@\n+2015-08-05  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\t    Jeff Law  <law@redhat.com>\n+\n+\tPR c/16351\n+\t* doc/invoke.texi (Wnull-dereference): New.\n+\t* tree-vrp.c (infer_value_range): Update call to infer_nonnull_range.\n+\t* gimple-ssa-isolate-paths.c (find_implicit_erroneous_behaviour):\n+\tWarn for potential NULL dereferences.\n+\t(find_explicit_erroneous_behaviour): Warn for NULL dereferences.\n+\t* ubsan.c (instrument_nonnull_arg): Call\n+\tinfer_nonnull_range_by_attribute.\n+\t(instrument_nonnull_return): Likewise.\n+\t* common.opt (Wnull-dereference); New.\n+\t* gimple.c (infer_nonnull_range): Remove bool arguments.\n+\t(infer_nonnull_range_by_dereference): New.\n+\t(infer_nonnull_range_by_attribute): New.\n+\t* gimple.h: Update declarations.\n+\n 2015-08-05  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gensupport.c (sequence_num): Replace with..."}, {"sha": "fb9e9daa7542780f41e7acd48ef8f4d640d2cdc0", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76787f70097bb232a9bb4afbd9e8c190e57291f0/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76787f70097bb232a9bb4afbd9e8c190e57291f0/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=76787f70097bb232a9bb4afbd9e8c190e57291f0", "patch": "@@ -592,6 +592,10 @@ Wlarger-than=\n Common RejectNegative Joined UInteger Warning\n -Wlarger-than=<number>\tWarn if an object is larger than <number> bytes\n \n+Wnull-dereference\n+Common Var(warn_null_dereference) Warning EnabledBy(Wall)\n+Warn if dereferencing a NULL pointer may lead to erroneous or undefined behavior\n+\n Wunsafe-loop-optimizations\n Common Var(warn_unsafe_loop_optimizations) Warning\n Warn if the loop cannot be optimized due to nontrivial assumptions."}, {"sha": "8f375b7e527cbb03c987090a0342b139cb34d1c2", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76787f70097bb232a9bb4afbd9e8c190e57291f0/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76787f70097bb232a9bb4afbd9e8c190e57291f0/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=76787f70097bb232a9bb4afbd9e8c190e57291f0", "patch": "@@ -260,6 +260,7 @@ Objective-C and Objective-C++ Dialects}.\n -Wimplicit  -Wimplicit-function-declaration  -Wimplicit-int @gol\n -Winit-self  -Winline  -Wno-int-conversion @gol\n -Wno-int-to-pointer-cast -Wno-invalid-offsetof @gol\n+-Wnull-dereference @gol\n -Winvalid-pch -Wlarger-than=@var{len}  -Wunsafe-loop-optimizations @gol\n -Wlogical-op -Wlogical-not-parentheses -Wlong-long @gol\n -Wmain -Wmaybe-uninitialized -Wmemset-transposed-args @gol\n@@ -4156,6 +4157,16 @@ In order to get a warning about an unused function parameter, you must\n either specify @option{-Wextra -Wunused} (note that @option{-Wall} implies\n @option{-Wunused}), or separately specify @option{-Wunused-parameter}.\n \n+@item -Wnull-dereference\n+@opindex Wnull-dereference\n+@opindex Wno-null-dereference\n+Warn if the compiler detects paths that trigger erroneous or\n+undefined behavior due to dereferencing a null pointer.  This option\n+is only active when @option{-fdelete-null-pointer-checks} is active,\n+which is enabled by optimizations in most targets.  The precision of\n+the warnings depends on the optimization options used.  This option is\n+enabled by @option{-Wall}.\n+\n @item -Wuninitialized\n @opindex Wuninitialized\n @opindex Wno-uninitialized"}, {"sha": "6f84f85856b932559c5c879fadb358e7363e5285", "filename": "gcc/gimple-ssa-isolate-paths.c", "status": "modified", "additions": 45, "deletions": 10, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76787f70097bb232a9bb4afbd9e8c190e57291f0/gcc%2Fgimple-ssa-isolate-paths.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76787f70097bb232a9bb4afbd9e8c190e57291f0/gcc%2Fgimple-ssa-isolate-paths.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-isolate-paths.c?ref=76787f70097bb232a9bb4afbd9e8c190e57291f0", "patch": "@@ -331,11 +331,29 @@ find_implicit_erroneous_behaviour (void)\n \t\t  if (gimple_bb (use_stmt) != bb)\n \t\t    continue;\n \n-\t\t  if (infer_nonnull_range (use_stmt, lhs,\n-\t\t\t\t\t   flag_isolate_erroneous_paths_dereference,\n-\t\t\t\t\t   flag_isolate_erroneous_paths_attribute))\n+\t\t  bool by_dereference \n+\t\t    = infer_nonnull_range_by_dereference (use_stmt, lhs);\n \n+\t\t  if (by_dereference \n+\t\t      || infer_nonnull_range_by_attribute (use_stmt, lhs))\n \t\t    {\n+\t\t      location_t loc = gimple_location (use_stmt)\n+\t\t\t? gimple_location (use_stmt)\n+\t\t\t: gimple_phi_arg_location (phi, i);\n+\n+\t\t      if (by_dereference)\n+\t\t\t{\n+\t\t\t  warning_at (loc, OPT_Wnull_dereference,\n+\t\t\t\t      \"potential null pointer dereference\");\n+\t\t\t  if (!flag_isolate_erroneous_paths_dereference)\n+\t\t\t    continue;\n+\t\t\t}\n+\t\t      else \n+\t\t\t{\n+\t\t\t  if (!flag_isolate_erroneous_paths_attribute)\n+\t\t\t    continue;\n+\t\t\t}\n+\n \t\t      duplicate = isolate_path (bb, duplicate, e,\n \t\t\t\t\t\tuse_stmt, lhs, false);\n \n@@ -381,13 +399,29 @@ find_explicit_erroneous_behaviour (void)\n \t{\n \t  gimple stmt = gsi_stmt (si);\n \n-\t  /* By passing null_pointer_node, we can use infer_nonnull_range\n-\t     to detect explicit NULL pointer dereferences and other uses\n-\t     where a non-NULL value is required.  */\n-\t  if (infer_nonnull_range (stmt, null_pointer_node,\n-\t\t\t\t   flag_isolate_erroneous_paths_dereference,\n-\t\t\t\t   flag_isolate_erroneous_paths_attribute))\n+\t  /* By passing null_pointer_node, we can use the\n+\t     infer_nonnull_range functions to detect explicit NULL\n+\t     pointer dereferences and other uses where a non-NULL\n+\t     value is required.  */\n+\t  \n+\t  bool by_dereference\n+\t    = infer_nonnull_range_by_dereference (stmt, null_pointer_node);\n+\t  if (by_dereference\n+\t      || infer_nonnull_range_by_attribute (stmt, null_pointer_node))\n \t    {\n+\t      if (by_dereference)\n+\t\t{\n+\t\t  warning_at (gimple_location (stmt), OPT_Wnull_dereference,\n+\t\t\t      \"null pointer dereference\");\n+\t\t  if (!flag_isolate_erroneous_paths_dereference)\n+\t\t    continue;\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  if (!flag_isolate_erroneous_paths_attribute)\n+\t\t    continue;\n+\t\t}\n+\n \t      insert_trap_and_remove_trailing_statements (&si,\n \t\t\t\t\t\t\t  null_pointer_node);\n \n@@ -534,7 +568,8 @@ class pass_isolate_erroneous_paths : public gimple_opt_pass\n       /* If we do not have a suitable builtin function for the trap statement,\n \t then do not perform the optimization.  */\n       return (flag_isolate_erroneous_paths_dereference != 0\n-\t      || flag_isolate_erroneous_paths_attribute != 0);\n+\t      || flag_isolate_erroneous_paths_attribute != 0\n+\t      || warn_null_dereference);\n     }\n \n   virtual unsigned int execute (function *)"}, {"sha": "e31a273172792bd0ac1071b24baf491b0c56e033", "filename": "gcc/gimple.c", "status": "modified", "additions": 35, "deletions": 19, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76787f70097bb232a9bb4afbd9e8c190e57291f0/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76787f70097bb232a9bb4afbd9e8c190e57291f0/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=76787f70097bb232a9bb4afbd9e8c190e57291f0", "patch": "@@ -2618,16 +2618,20 @@ check_loadstore (gimple, tree op, tree, void *data)\n   return false;\n }\n \n-/* If OP can be inferred to be non-NULL after STMT executes, return true.\n \n-   DEREFERENCE is TRUE if we can use a pointer dereference to infer a\n-   non-NULL range, FALSE otherwise.\n-\n-   ATTRIBUTE is TRUE if we can use attributes to infer a non-NULL range\n-   for function arguments and return values.  FALSE otherwise.  */\n+/* Return true if OP can be inferred to be non-NULL after STMT executes,\n+   either by using a pointer dereference or attributes.  */\n+bool\n+infer_nonnull_range (gimple stmt, tree op)\n+{\n+  return infer_nonnull_range_by_dereference (stmt, op)\n+    || infer_nonnull_range_by_attribute (stmt, op);\n+}\n \n+/* Return true if OP can be inferred to be non-NULL after STMT\n+   executes by using a pointer dereference.  */\n bool\n-infer_nonnull_range (gimple stmt, tree op, bool dereference, bool attribute)\n+infer_nonnull_range_by_dereference (gimple stmt, tree op)\n {\n   /* We can only assume that a pointer dereference will yield\n      non-NULL if -fdelete-null-pointer-checks is enabled.  */\n@@ -2636,13 +2640,26 @@ infer_nonnull_range (gimple stmt, tree op, bool dereference, bool attribute)\n       || gimple_code (stmt) == GIMPLE_ASM)\n     return false;\n \n-  if (dereference\n-      && walk_stmt_load_store_ops (stmt, (void *)op,\n-\t\t\t\t   check_loadstore, check_loadstore))\n+  if (walk_stmt_load_store_ops (stmt, (void *)op,\n+\t\t\t\tcheck_loadstore, check_loadstore))\n     return true;\n \n-  if (attribute\n-      && is_gimple_call (stmt) && !gimple_call_internal_p (stmt))\n+  return false;\n+}\n+\n+/* Return true if OP can be inferred to be a non-NULL after STMT\n+   executes by using attributes.  */\n+bool\n+infer_nonnull_range_by_attribute (gimple stmt, tree op)\n+{\n+  /* We can only assume that a pointer dereference will yield\n+     non-NULL if -fdelete-null-pointer-checks is enabled.  */\n+  if (!flag_delete_null_pointer_checks\n+      || !POINTER_TYPE_P (TREE_TYPE (op))\n+      || gimple_code (stmt) == GIMPLE_ASM)\n+    return false;\n+\n+  if (is_gimple_call (stmt) && !gimple_call_internal_p (stmt))\n     {\n       tree fntype = gimple_call_fntype (stmt);\n       tree attrs = TYPE_ATTRIBUTES (fntype);\n@@ -2681,13 +2698,12 @@ infer_nonnull_range (gimple stmt, tree op, bool dereference, bool attribute)\n \n   /* If this function is marked as returning non-null, then we can\n      infer OP is non-null if it is used in the return statement.  */\n-  if (attribute)\n-    if (greturn *return_stmt = dyn_cast <greturn *> (stmt))\n-      if (gimple_return_retval (return_stmt)\n-\t  && operand_equal_p (gimple_return_retval (return_stmt), op, 0)\n-\t  && lookup_attribute (\"returns_nonnull\",\n-\t\t\t       TYPE_ATTRIBUTES (TREE_TYPE (current_function_decl))))\n-\treturn true;\n+  if (greturn *return_stmt = dyn_cast <greturn *> (stmt))\n+    if (gimple_return_retval (return_stmt)\n+\t&& operand_equal_p (gimple_return_retval (return_stmt), op, 0)\n+\t&& lookup_attribute (\"returns_nonnull\",\n+\t\t\t     TYPE_ATTRIBUTES (TREE_TYPE (current_function_decl))))\n+      return true;\n \n   return false;\n }"}, {"sha": "d4467b5a163046cb99ead70ba5d6b5159054e75b", "filename": "gcc/gimple.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76787f70097bb232a9bb4afbd9e8c190e57291f0/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76787f70097bb232a9bb4afbd9e8c190e57291f0/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=76787f70097bb232a9bb4afbd9e8c190e57291f0", "patch": "@@ -1401,7 +1401,9 @@ extern bool gimple_call_builtin_p (const_gimple, enum built_in_function);\n extern bool gimple_asm_clobbers_memory_p (const gasm *);\n extern void dump_decl_set (FILE *, bitmap);\n extern bool nonfreeing_call_p (gimple);\n-extern bool infer_nonnull_range (gimple, tree, bool, bool);\n+extern bool infer_nonnull_range (gimple, tree);\n+extern bool infer_nonnull_range_by_dereference (gimple, tree);\n+extern bool infer_nonnull_range_by_attribute (gimple, tree);\n extern void sort_case_labels (vec<tree>);\n extern void preprocess_case_label_vec_for_gimple (vec<tree>, tree, tree *);\n extern void gimple_seq_set_location (gimple_seq, location_t);"}, {"sha": "205975df36a6d1a7a930a251a8e59f27cc903461", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76787f70097bb232a9bb4afbd9e8c190e57291f0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76787f70097bb232a9bb4afbd9e8c190e57291f0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=76787f70097bb232a9bb4afbd9e8c190e57291f0", "patch": "@@ -1,3 +1,14 @@\n+2015-08-05  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\t    Jeff Law  <law@redhat.com>\n+\n+\tPR c/16351\n+\t* gcc.dg/tree-ssa/isolate-2.c: Close comment.\n+\t* gcc.dg/tree-ssa/isolate-4.c: Likewise.\n+\t* gcc.dg/tree-ssa/wnull-dereference.c: New test.\n+\t* gcc.dg/tree-ssa/isolate-1.c: Test warnings with -Wnull-dereference.\n+\t* gcc.dg/tree-ssa/isolate-3.c: Likewise.\n+\t* gcc.dg/tree-ssa/isolate-5.c: Likewise.\n+\n 2015-08-05  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR middle-end/66311"}, {"sha": "486c307cbdc30a2279dbc6eb3692eb259c8a318f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/isolate-1.c", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76787f70097bb232a9bb4afbd9e8c190e57291f0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fisolate-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76787f70097bb232a9bb4afbd9e8c190e57291f0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fisolate-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fisolate-1.c?ref=76787f70097bb232a9bb4afbd9e8c190e57291f0", "patch": "@@ -1,6 +1,5 @@\n-\n /* { dg-do compile } */ \n-/* { dg-options \"-O2 -fdump-tree-isolate-paths -fdelete-null-pointer-checks\" } */\n+/* { dg-options \"-O2 -fdump-tree-isolate-paths -fdelete-null-pointer-checks -Wnull-dereference\" } */\n /* { dg-skip-if \"\" keeps_null_pointer_checks } */\n \n \n@@ -39,8 +38,8 @@ d_type (struct d_info *di)\n {\n    struct demangle_component *ret;\n    ret = d_make_empty (di);\n-   ret->type = 42;\n-   ret->zzz = -1;\n+   ret->type = 42;\t\t/* { dg-warning \"null pointer dereference\" } */\n+   ret->zzz = -1;\t\t/* { dg-warning \"null pointer dereference\" } */\n    return ret;\n }\n \n@@ -53,8 +52,3 @@ d_type (struct d_info *di)\n /* { dg-final { scan-tree-dump-times \"->type = 42\" 1 \"isolate-paths\"} } */\n /* { dg-final { scan-tree-dump-times \"->type ={v} 0\" 1 \"isolate-paths\"} } */\n /* { dg-final { scan-tree-dump-times \"->zzz\" 1 \"isolate-paths\"} } */\n-\n-\n-\n-\n-"}, {"sha": "b993849e96d8afb1157330d199bab69b6d00dd40", "filename": "gcc/testsuite/gcc.dg/tree-ssa/isolate-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76787f70097bb232a9bb4afbd9e8c190e57291f0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fisolate-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76787f70097bb232a9bb4afbd9e8c190e57291f0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fisolate-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fisolate-2.c?ref=76787f70097bb232a9bb4afbd9e8c190e57291f0", "patch": "@@ -35,7 +35,7 @@ bar (void)\n    from a PHI, the second with an explicit return 0 in the IL.\n \n    We also verify that after isolation phi-cprop simplifies the\n-   return statement so that it returns &z directly.\n+   return statement so that it returns &z directly. */\n /* { dg-final { scan-tree-dump-times \"__builtin_trap\" 2 \"isolate-paths\"} } */\n /* { dg-final { scan-tree-dump-times \"return &z;\" 1 \"phicprop1\"} } */\n "}, {"sha": "d8fd8361ead3bb1cc7dbb915981a34b25d249560", "filename": "gcc/testsuite/gcc.dg/tree-ssa/isolate-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76787f70097bb232a9bb4afbd9e8c190e57291f0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fisolate-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76787f70097bb232a9bb4afbd9e8c190e57291f0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fisolate-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fisolate-3.c?ref=76787f70097bb232a9bb4afbd9e8c190e57291f0", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */ \n-/* { dg-options \"-O2 -fdump-tree-isolate-paths -fdelete-null-pointer-checks\" } */\n+/* { dg-options \"-O2 -fdump-tree-isolate-paths -fdelete-null-pointer-checks -Wnull-dereference\" } */\n /* { dg-skip-if \"\" keeps_null_pointer_checks } */\n \n \n@@ -29,7 +29,7 @@ static __inline__ void\n VEC_rtx_gc_safe_grow (VEC_rtx_gc ** vec_, int size_, const char *file_,\n                       unsigned line_, const char *function_)\n {\n-  ((*vec_) ? &(*vec_)->base : 0)->num = size_;\n+  ((*vec_) ? &(*vec_)->base : 0)->num = size_; /* { dg-warning \"null pointer dereference\" } */\n } \n \n static __inline__ void"}, {"sha": "0a88d7d47f6e91d82f167c2ab0e926c58c1ef0de", "filename": "gcc/testsuite/gcc.dg/tree-ssa/isolate-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76787f70097bb232a9bb4afbd9e8c190e57291f0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fisolate-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76787f70097bb232a9bb4afbd9e8c190e57291f0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fisolate-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fisolate-4.c?ref=76787f70097bb232a9bb4afbd9e8c190e57291f0", "patch": "@@ -24,7 +24,7 @@ bar (void)\n    a return statement.\n \n    We also verify that after isolation phi-cprop simplifies the\n-   return statement so that it returns &z directly.\n+   return statement so that it returns &z directly. */\n /* { dg-final { scan-tree-dump-times \"__builtin_trap\" 2 \"isolate-paths\"} } */\n /* { dg-final { scan-tree-dump-times \"foo .&z.;\" 1 \"phicprop1\"} } */\n "}, {"sha": "f67e3dad86eef92ce3c626b60f7d3091e6d4081a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/isolate-5.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76787f70097bb232a9bb4afbd9e8c190e57291f0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fisolate-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76787f70097bb232a9bb4afbd9e8c190e57291f0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fisolate-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fisolate-5.c?ref=76787f70097bb232a9bb4afbd9e8c190e57291f0", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */ \n-/* { dg-options \"-O2 -fdelete-null-pointer-checks -fdump-tree-isolate-paths -fdump-tree-optimized\" } */\n+/* { dg-options \"-O2 -fdelete-null-pointer-checks -fdump-tree-isolate-paths -fdump-tree-optimized -Wnull-dereference\" } */\n /* { dg-skip-if \"\" keeps_null_pointer_checks } */\n \n struct demangle_component\n@@ -36,8 +36,8 @@ d_type (struct d_info *di)\n {\n    struct demangle_component *ret;\n    ret = d_make_empty (di);\n-   foo (ret->type);\n-   bar (ret->zzz);\n+   foo (ret->type); /* { dg-warning \"null pointer dereference\" } */\n+   bar (ret->zzz); /* { dg-warning \"null pointer dereference\" } */\n    return ret;\n }\n "}, {"sha": "db36acc15b7787cf31b446eb294d1800455a886b", "filename": "gcc/testsuite/gcc.dg/tree-ssa/wnull-dereference.c", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76787f70097bb232a9bb4afbd9e8c190e57291f0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fwnull-dereference.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76787f70097bb232a9bb4afbd9e8c190e57291f0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fwnull-dereference.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fwnull-dereference.c?ref=76787f70097bb232a9bb4afbd9e8c190e57291f0", "patch": "@@ -0,0 +1,82 @@\n+/* { dg-do compile } */ \n+/* PR c/16531 */\n+/* { dg-options \"-O2 -fdelete-null-pointer-checks -Wnull-dereference\" } */\n+/* { dg-skip-if \"\" keeps_null_pointer_checks } */\n+\n+#ifndef __cplusplus\n+#define NULL (void *)0\n+#else\n+#define NULL nullptr\n+#endif\n+\n+struct t\n+{\n+  int bar;\n+};\n+\n+struct t2\n+{\n+  struct t *s;\n+};\n+\n+void test1 ()\n+{\n+  struct t *s = NULL;\n+  s->bar = 1;  /* { dg-warning \"null\" } */\n+}\n+\n+void test2 (struct t *s)\n+{\n+  if (s == NULL && s->bar > 2)  /* { dg-warning \"null\" } */\n+    return;\n+\n+  s->bar = 3;\n+}\n+\n+void test3 (struct t *s)\n+{\n+  if (s != NULL || s->bar > 2)  /* { dg-warning \"null\" } */\n+    return;\n+\n+  s->bar = 3;  /* { dg-warning \"null\" } */\n+}\n+\n+int test4 (struct t *s)\n+{\n+  if (s != NULL && s->bar > 2)  /* { dg-bogus \"null\" } */\n+    return 1;\n+  return 0;\n+}\n+\n+int test5 (struct t *s)\n+{\n+  if (s == NULL || s->bar > 2)  /* { dg-bogus \"null\" } */\n+    return 1;\n+  return 0;\n+}\n+\n+int test6 (struct t2 *s)\n+{\n+  if (s->s == 0 && s->s->bar == 0)  /* { dg-warning \"null\" } */\n+    return 1;\n+  return 0;\n+}\n+\n+int test7 (struct t *s)\n+{\n+  s = 0;\n+  return s->bar;  /* { dg-warning \"null\" } */\n+}\n+\n+int test8 ()\n+{\n+  return ((struct t *)0)->bar;  /* { dg-warning \"null\" } */\n+}\n+\n+void test9 (struct t **s)\n+{\n+  if (s == 0)\n+    *s = 0;  /* { dg-warning \"null\" } */\n+}\n+\n+"}, {"sha": "31a9d21b4bad22d8377eae518c282ed8a521f37f", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76787f70097bb232a9bb4afbd9e8c190e57291f0/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76787f70097bb232a9bb4afbd9e8c190e57291f0/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=76787f70097bb232a9bb4afbd9e8c190e57291f0", "patch": "@@ -4938,7 +4938,7 @@ infer_value_range (gimple stmt, tree op, enum tree_code *comp_code_p, tree *val_\n \treturn false;\n     }\n \n-  if (infer_nonnull_range (stmt, op, true, true))\n+  if (infer_nonnull_range (stmt, op))\n     {\n       *val_p = build_int_cst (TREE_TYPE (op), 0);\n       *comp_code_p = NE_EXPR;"}, {"sha": "7983c930c6610093a85354f4930a830f30579859", "filename": "gcc/ubsan.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76787f70097bb232a9bb4afbd9e8c190e57291f0/gcc%2Fubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76787f70097bb232a9bb4afbd9e8c190e57291f0/gcc%2Fubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fubsan.c?ref=76787f70097bb232a9bb4afbd9e8c190e57291f0", "patch": "@@ -1615,7 +1615,7 @@ instrument_nonnull_arg (gimple_stmt_iterator *gsi)\n     {\n       tree arg = gimple_call_arg (stmt, i);\n       if (POINTER_TYPE_P (TREE_TYPE (arg))\n-\t  && infer_nonnull_range (stmt, arg, false, true))\n+\t  && infer_nonnull_range_by_attribute (stmt, arg))\n \t{\n \t  gimple g;\n \t  if (!is_gimple_val (arg))\n@@ -1680,7 +1680,7 @@ instrument_nonnull_return (gimple_stmt_iterator *gsi)\n   if (arg\n       && POINTER_TYPE_P (TREE_TYPE (arg))\n       && is_gimple_val (arg)\n-      && infer_nonnull_range (stmt, arg, false, true))\n+      && infer_nonnull_range_by_attribute (stmt, arg))\n     {\n       basic_block then_bb, fallthru_bb;\n       *gsi = create_cond_insert_point (gsi, true, false, true,"}]}