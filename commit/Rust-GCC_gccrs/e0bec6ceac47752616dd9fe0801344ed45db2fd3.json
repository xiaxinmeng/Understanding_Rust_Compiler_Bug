{"sha": "e0bec6ceac47752616dd9fe0801344ed45db2fd3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBiZWM2Y2VhYzQ3NzUyNjE2ZGQ5ZmUwODAxMzQ0ZWQ0NWRiMmZkMw==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-01-12T14:34:41Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-01-12T14:34:41Z"}, "message": "c++: Fix ICE with CTAD in concept [PR98611]\n\nThis patch teaches cp_walk_subtrees to visit the template represented\nby a CTAD placeholder, which would otherwise be not visited during\nfind_template_parameters.  The template may be a template template\nparameter (as in the first testcase), or it may implicitly use the\ntemplate parameters of an enclosing class template (as in the second\ntestcase), and in either case we need to visit this tree to record the\ntemplate parameters used therein for later satisfaction.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/98611\n\t* tree.c (cp_walk_subtrees) <case TEMPLATE_TYPE_PARM>: Visit\n\tthe template of a CTAD placeholder.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/98611\n\t* g++.dg/cpp2a/concepts-ctad1.C: New test.\n\t* g++.dg/cpp2a/concepts-ctad2.C: New test.", "tree": {"sha": "9b880f8e69f5ffa5e057206f31886579c42782a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b880f8e69f5ffa5e057206f31886579c42782a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0bec6ceac47752616dd9fe0801344ed45db2fd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0bec6ceac47752616dd9fe0801344ed45db2fd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0bec6ceac47752616dd9fe0801344ed45db2fd3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0bec6ceac47752616dd9fe0801344ed45db2fd3/comments", "author": null, "committer": null, "parents": [{"sha": "52a170b1a1818b7521c25e76271638a448b3f630", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52a170b1a1818b7521c25e76271638a448b3f630", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52a170b1a1818b7521c25e76271638a448b3f630"}], "stats": {"total": 34, "additions": 33, "deletions": 1}, "files": [{"sha": "d339036e88e766db81b6cc5f419c5b5e83cc6be2", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0bec6ceac47752616dd9fe0801344ed45db2fd3/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0bec6ceac47752616dd9fe0801344ed45db2fd3/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=e0bec6ceac47752616dd9fe0801344ed45db2fd3", "patch": "@@ -5173,12 +5173,15 @@ cp_walk_subtrees (tree *tp, int *walk_subtrees_p, walk_tree_fn func,\n   result = NULL_TREE;\n   switch (code)\n     {\n+    case TEMPLATE_TYPE_PARM:\n+      if (template_placeholder_p (*tp))\n+\tWALK_SUBTREE (CLASS_PLACEHOLDER_TEMPLATE (*tp));\n+      /* Fall through.  */\n     case DEFERRED_PARSE:\n     case TEMPLATE_TEMPLATE_PARM:\n     case BOUND_TEMPLATE_TEMPLATE_PARM:\n     case UNBOUND_CLASS_TEMPLATE:\n     case TEMPLATE_PARM_INDEX:\n-    case TEMPLATE_TYPE_PARM:\n     case TYPEOF_TYPE:\n     case UNDERLYING_TYPE:\n       /* None of these have subtrees other than those already walked"}, {"sha": "ec2e4b014d7763c9b9efc84961dfccee36302f3f", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-ctad1.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0bec6ceac47752616dd9fe0801344ed45db2fd3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-ctad1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0bec6ceac47752616dd9fe0801344ed45db2fd3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-ctad1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-ctad1.C?ref=e0bec6ceac47752616dd9fe0801344ed45db2fd3", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/98611\n+// { dg-do compile { target c++20 } }\n+\n+template <class T, class U>\n+concept IsSame = __is_same(T, U);\n+\n+template <class T, template <class...> class _Class>\n+concept IsInstantiationOf = requires(T object) {\n+ { _Class{object} } -> IsSame<T>;\n+};\n+\n+template <class T> struct Degrees {};\n+static_assert(IsInstantiationOf<Degrees<int>, Degrees>);\n+\n+template <class T> struct NotDegrees {};\n+static_assert(!IsInstantiationOf<Degrees<int>, NotDegrees>);"}, {"sha": "0d7f9790777aec5179dba0b39579ab62807a31ef", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-ctad2.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0bec6ceac47752616dd9fe0801344ed45db2fd3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-ctad2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0bec6ceac47752616dd9fe0801344ed45db2fd3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-ctad2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-ctad2.C?ref=e0bec6ceac47752616dd9fe0801344ed45db2fd3", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/98611\n+// { dg-do compile { target c++20 } }\n+\n+template <class>\n+struct S {\n+  template <class T> struct Tmpl { Tmpl(T); };\n+\n+  template <class T>\n+    requires requires (T object) { Tmpl{object}; }\n+  static int f(T);\n+};\n+\n+int a = S<int>::f(0);"}]}