{"sha": "9a61dfdb5ecb58bc4caea1c11e017d93bdd1d9a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWE2MWRmZGI1ZWNiNThiYzRjYWVhMWMxMWUwMTdkOTNiZGQxZDlhNQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-06-17T00:16:54Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-06-17T00:16:54Z"}, "message": "Daily bump.", "tree": {"sha": "7d4a310d91b95cb6e36e1a9d4beb1f7612d35971", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d4a310d91b95cb6e36e1a9d4beb1f7612d35971"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a61dfdb5ecb58bc4caea1c11e017d93bdd1d9a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a61dfdb5ecb58bc4caea1c11e017d93bdd1d9a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a61dfdb5ecb58bc4caea1c11e017d93bdd1d9a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a61dfdb5ecb58bc4caea1c11e017d93bdd1d9a5/comments", "author": null, "committer": null, "parents": [{"sha": "786188e8b8cab47cb31177c6f4ab1a1578a607c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/786188e8b8cab47cb31177c6f4ab1a1578a607c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/786188e8b8cab47cb31177c6f4ab1a1578a607c3"}], "stats": {"total": 493, "additions": 492, "deletions": 1}, "files": [{"sha": "61a714d6ec062273668ba23219d1fd033f803e1f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a61dfdb5ecb58bc4caea1c11e017d93bdd1d9a5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a61dfdb5ecb58bc4caea1c11e017d93bdd1d9a5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9a61dfdb5ecb58bc4caea1c11e017d93bdd1d9a5", "patch": "@@ -1,3 +1,131 @@\n+2021-06-17  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range-gori.cc (gori_compute::has_edge_range_p): Check with\n+\tmay_recompute_p.\n+\t(gori_compute::may_recompute_p): New.\n+\t(gori_compute::outgoing_edge_range_p): Perform recomputations.\n+\t* gimple-range-gori.h (class gori_compute): Add prototype.\n+\n+2021-06-17  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range-cache.cc (ranger_cache::range_on_edge): Always return\n+\ttrue when a range can be calculated.\n+\t* gimple-range.cc (gimple_ranger::dump_bb): Check has_edge_range_p.\n+\n+2021-06-16  Martin Sebor  <msebor@redhat.com>\n+\n+\t* doc/invoke.texi (-Wmismatched-dealloc, -Wmismatched-new-delete):\n+\tCorrect documented defaults.\n+\n+2021-06-16  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range-cache.cc (ranger_cache::ranger_cache): Initialize\n+\tm_new_value_p directly.\n+\n+2021-06-16  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/89021\n+\t* config/i386/i386-expand.c (expand_vec_perm_2perm_pblendv):\n+\tHandle 64bit modes for TARGET_SSE4_1.\n+\t(expand_vec_perm_pshufb2): Handle 64bit modes for TARGET_SSSE3.\n+\t(expand_vec_perm_even_odd_pack): Handle V4HI mode.\n+\t(expand_vec_perm_even_odd_1) <case E_V4HImode>: Expand via\n+\texpand_vec_perm_pshufb2 for TARGET_SSSE3 and via\n+\texpand_vec_perm_even_odd_pack for TARGET_SSE4_1.\n+\t* config/i386/mmx.md (mmx_packusdw): New insn pattern.\n+\n+2021-06-16  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (aarch64_<sur><addsub>hn<mode>):\n+\tChange to an expander that emits the correct instruction\n+\tdepending on endianness.\n+\t(aarch64_<sur><addsub>hn<mode>_insn_le): Define.\n+\t(aarch64_<sur><addsub>hn<mode>_insn_be): Define.\n+\n+2021-06-16  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def: Split generator\n+\tfor aarch64_<su>qmovn builtins into scalar and vector\n+\tvariants.\n+\t* config/aarch64/aarch64-simd.md (aarch64_<su>qmovn<mode>_insn_le):\n+\tDefine.\n+\t(aarch64_<su>qmovn<mode>_insn_be): Define.\n+\t(aarch64_<su>qmovn<mode>): Split into scalar and vector\n+\tvariants. Change vector variant to an expander that emits the\n+\tcorrect instruction depending on endianness.\n+\n+2021-06-16  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def: Split generator\n+\tfor aarch64_sqmovun builtins into scalar and vector variants.\n+\t* config/aarch64/aarch64-simd.md (aarch64_sqmovun<mode>):\n+\tSplit into scalar and vector variants. Change vector variant\n+\tto an expander that emits the correct instruction depending\n+\ton endianness.\n+\t(aarch64_sqmovun<mode>_insn_le): Define.\n+\t(aarch64_sqmovun<mode>_insn_be): Define.\n+\n+2021-06-16  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (aarch64_xtn<mode>_insn_le):\n+\tDefine - modeling zero-high-half semantics.\n+\t(aarch64_xtn<mode>): Change to an expander that emits the\n+\tappropriate instruction depending on endianness.\n+\t(aarch64_xtn<mode>_insn_be): Define - modeling zero-high-half\n+\tsemantics.\n+\t(aarch64_xtn2<mode>_le): Rename to...\n+\t(aarch64_xtn2<mode>_insn_le): This.\n+\t(aarch64_xtn2<mode>_be): Rename to...\n+\t(aarch64_xtn2<mode>_insn_be): This.\n+\t(vec_pack_trunc_<mode>): Emit truncation instruction instead\n+\tof aarch64_xtn.\n+\t* config/aarch64/iterators.md (Vnarrowd): Add Vnarrowd mode\n+\tattribute iterator.\n+\n+2021-06-16  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/100453\n+\t* tree-sra.c (create_access): Disqualify any const candidates\n+\twhich are written to.\n+\t(sra_modify_expr): Do not store sub-replacements back to a const base.\n+\t(handle_unscalarized_data_in_subtree): Likewise.\n+\t(sra_modify_assign): Likewise.  Earlier, use TREE_READONLy test\n+\tinstead of constant_decl_p.\n+\n+2021-06-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/101062\n+\t* stor-layout.c (finish_bitfield_representative): For fields in unions\n+\tassume nextf is always NULL.\n+\t(finish_bitfield_layout): Compute bit field representatives also in\n+\tunions, but handle it as if each bitfield was the only field in the\n+\taggregate.\n+\n+2021-06-16  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101088\n+\t* tree-ssa-loop-im.c (sm_seq_valid_bb): Only look for\n+\tsupported refs on edges.  Do not assert same ref but\n+\tdifferent kind stores are unsuported but mark them so.\n+\t(hoist_memory_references): Only look for supported refs\n+\ton exits.\n+\n+2021-06-16  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR rtl-optimization/46235\n+\t* config/i386/i386.md: New define_split for bt followed by cmov.\n+\t(*bt<mode>_setcqi): New define_insn_and_split for bt followed by setc.\n+\t(*bt<mode>_setncqi): New define_insn_and_split for bt then setnc.\n+\t(*bt<mode>_setnc<mode>): New define_insn_and_split for bt followed\n+\tby setnc with zero extension.\n+\n+2021-06-16  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101083\n+\t* tree-vect-slp.c (vect_slp_build_two_operator_nodes): Get\n+\tvectype as argument.\n+\t(vect_build_slp_tree_2): Adjust.\n+\n 2021-06-15  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/100876"}, {"sha": "f84fbffe108aaf21f8bacc9ad9d39fba22d6dd3e", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a61dfdb5ecb58bc4caea1c11e017d93bdd1d9a5/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a61dfdb5ecb58bc4caea1c11e017d93bdd1d9a5/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=9a61dfdb5ecb58bc4caea1c11e017d93bdd1d9a5", "patch": "@@ -1 +1 @@\n-20210616\n+20210617"}, {"sha": "f102600bbc9fba846d326083c29e6692e4f9a404", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 186, "deletions": 0, "changes": 186, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a61dfdb5ecb58bc4caea1c11e017d93bdd1d9a5/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a61dfdb5ecb58bc4caea1c11e017d93bdd1d9a5/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9a61dfdb5ecb58bc4caea1c11e017d93bdd1d9a5", "patch": "@@ -1,3 +1,189 @@\n+2021-06-16  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_util.adb (Is_Volatile_Function): Follow the exact wording\n+\tof SPARK (regarding volatile functions) and Ada (regarding\n+\tprotected functions).\n+\n+2021-06-16  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_util.adb (Is_OK_Volatile_Context): All references to\n+\tvolatile objects are legal in preanalysis.\n+\t(Within_Volatile_Function): Previously it was wrongly called on\n+\tEmpty entities; now it is only called on E_Return_Statement,\n+\twhich allow the body to be greatly simplified.\n+\n+2021-06-16  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_res.adb (Set_Slice_Subtype): Revert special-case\n+\tintroduced previously, which is not needed as Itypes created for\n+\tslices are precisely always used.\n+\n+2021-06-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* urealp.adb (Scale): Change first paramter to Uint and adjust.\n+\t(Equivalent_Decimal_Exponent): Pass U.Den directly to Scale.\n+\t* libgnat/s-exponr.adb (Negative): Rename to...\n+\t(Safe_Negative): ...this and change its lower bound.\n+\t(Exponr): Adjust to above renaming and deal with Integer'First.\n+\n+2021-06-16  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_res.adb (Flag_Effectively_Volatile_Objects): Detect also\n+\tallocators within restricted contexts and not just entity names.\n+\t(Resolve_Actuals): Remove duplicated code for detecting\n+\trestricted contexts; it is now exclusively done in\n+\tIs_OK_Volatile_Context.\n+\t(Resolve_Entity_Name): Adapt to new parameter of\n+\tIs_OK_Volatile_Context.\n+\t* sem_util.ads, sem_util.adb (Is_OK_Volatile_Context): Adapt to\n+\thandle contexts both inside and outside of subprogram call\n+\tactual parameters.\n+\t(Within_Subprogram_Call): Remove; now handled by\n+\tIs_OK_Volatile_Context itself and its parameter.\n+\n+2021-06-16  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sinput.adb (Sloc_Range): Refactor several repeated calls to\n+\tSloc and two comparisons with No_Location.\n+\n+2021-06-16  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* checks.adb (Apply_Scalar_Range_Check): Fix handling of check depending\n+\ton the parameter passing mechanism.  Grammar adjustment (\"has\"\n+\t=> \"have\").\n+\t(Parameter_Passing_Mechanism_Specified): Add a hyphen in a comment.\n+\n+2021-06-16  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch3.adb (Build_Slice_Assignment): Remove unused\n+\tinitialization.\n+\n+2021-06-16  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* restrict.adb, sem_attr.adb, types.ads: Fix typos in\n+\t\"occuring\"; refill comment as necessary.\n+\n+2021-06-16  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_util.ads (Is_Actual_Parameter): Update comment.\n+\t* sem_util.adb (Is_Actual_Parameter): Also detect entry parameters.\n+\n+2021-06-16  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* rtsfind.ads, libgnarl/s-taskin.ads, exp_ch3.adb, exp_ch4.adb,\n+\texp_ch6.adb, exp_ch9.adb, sem_ch6.adb: Move master related\n+\tentities to the expander directly.\n+\n+2021-06-16  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_res.adb (Is_Assignment_Or_Object_Expression): Whitespace\n+\tcleanup.\n+\t(Is_Attribute_Expression): Prevent AST climbing from going to\n+\tthe root of the compilation unit.\n+\n+2021-06-16  Steve Baird  <baird@adacore.com>\n+\n+\t* doc/gnat_rm/implementation_advice.rst: Add a section for RM\n+\tA.18 .\n+\t* gnat_rm.texi: Regenerate.\n+\n+2021-06-16  Justin Squirek  <squirek@adacore.com>\n+\n+\t* sem_ch13.adb (Analyze_Enumeration_Representation_Clause): Add\n+\tcheck for the mixing of entries.\n+\n+2021-06-16  Justin Squirek  <squirek@adacore.com>\n+\n+\t* sem_ch13.adb (Make_Aitem_Pragma): Check for static expressions\n+\tin Priority aspect arguments for restriction Static_Priorities.\n+\n+2021-06-16  Justin Squirek  <squirek@adacore.com>\n+\n+\t* sem_util.adb (Accessibility_Level): Take into account\n+\trenamings of loop parameters.\n+\n+2021-06-16  Matthieu Eyraud  <eyraud@adacore.com>\n+\n+\t* par_sco.adb (Set_Statement_Entry): Change sloc for dominance\n+\tmarker.\n+\t(Traverse_One): Fix typo.\n+\t(Output_Header): Fix comment.\n+\n+2021-06-16  Richard Kenner  <kenner@adacore.com>\n+\n+\t* exp_unst.adb (Register_Subprogram): Don't look for aliases for\n+\tsubprograms that are generic.  Reorder tests for efficiency.\n+\n+2021-06-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_util.adb (Incomplete_Or_Partial_View): Retrieve the scope of\n+\tthe parameter and use it to find its incomplete view, if any.\n+\n+2021-06-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* freeze.adb (Check_No_Parts_Violations): Return earlier if the\n+\ttype is elementary or does not come from source.\n+\n+2021-06-16  Bob Duff  <duff@adacore.com>\n+\n+\t* ghost.adb: Add another special case where full analysis is\n+\tneeded. This bug is due to quirks in the way\n+\tMark_And_Set_Ghost_Assignment works (it happens very early,\n+\tbefore name resolution is done).\n+\n+2021-06-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_util.adb (Current_Entity_In_Scope): Reimplement.\n+\n+2021-06-16  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch8.adb (End_Scope): Remove extra parens.\n+\n+2021-06-16  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_disp.adb (Build_Class_Wide_Check): Ensure that evaluation\n+\tof actuals is side effects free (since the check duplicates\n+\tactuals).\n+\n+2021-06-16  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Raise_Expression): Apply Ada_2020 rules\n+\tconcerning the need for parentheses around Raise_Expressions in\n+\tvarious contexts.\n+\n+2021-06-16  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch13.adb (Validate_Unchecked_Conversion): Move detection\n+\tof generic types before switching to their private views; fix\n+\tstyle in using AND THEN.\n+\n+2021-06-16  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_ch3.adb (Analyze_Component_Declaration): Do not special\n+\tcase raise expressions.\n+\n+2021-06-16  Sergey Rybin  <rybin@adacore.com>\n+\n+\t* doc/gnat_ugn/building_executable_programs_with_gnat.rst:\n+\tInstead of referring to the formatting of the Ada examples in\n+\tAda RM add use the list of checks that are actually performed.\n+\t* gnat_ugn.texi: Regenerate.\n+\n+2021-06-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* initialize.c: Do not include vxWorks.h and fcntl.h from here.\n+\t(__gnat_initialize) [__MINGW32__]: Remove #ifdef and attribute\n+\t(__gnat_initialize) [init_float]: Delete.\n+\t(__gnat_initialize) [VxWorks]: Likewise.\n+\t(__gnat_initialize) [PA-RISC HP-UX 10]: Likewise.\n+\t* runtime.h: Add comment about vxWorks.h include.\n+\n+2021-06-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* libgnat/s-except.ads (ZCX_By_Default): Delete.\n+\t(Require_Body): Likewise.\n+\t* libgnat/s-except.adb: Replace body with pragma No_Body.\n+\n 2021-06-15  Steve Baird  <baird@adacore.com>\n \n \t* exp_util.adb (Kill_Dead_Code): Generalize the existing"}, {"sha": "8d14d38bf777ffdfa2e841507c02be528dabedc8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a61dfdb5ecb58bc4caea1c11e017d93bdd1d9a5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a61dfdb5ecb58bc4caea1c11e017d93bdd1d9a5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9a61dfdb5ecb58bc4caea1c11e017d93bdd1d9a5", "patch": "@@ -1,3 +1,9 @@\n+2021-06-16  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/101078\n+\tPR c++/91706\n+\t* pt.c (tsubst_baselink): Update binfos in non-dependent case.\n+\n 2021-06-15  Robin Dapp  <rdapp@linux.ibm.com>\n \n \t* decl.c (duplicate_decls): Likewise."}, {"sha": "f073f34a6f359a0c0963ba1ac563d69fd4ecd13c", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a61dfdb5ecb58bc4caea1c11e017d93bdd1d9a5/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a61dfdb5ecb58bc4caea1c11e017d93bdd1d9a5/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=9a61dfdb5ecb58bc4caea1c11e017d93bdd1d9a5", "patch": "@@ -1,3 +1,36 @@\n+2021-06-16  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/95501\n+\tPR fortran/95502\n+\t* expr.c (gfc_check_pointer_assign): Avoid NULL pointer\n+\tdereference.\n+\t* match.c (gfc_match_pointer_assignment): Likewise.\n+\t* parse.c (gfc_check_do_variable): Avoid comparison with NULL\n+\tsymtree.\n+\n+2021-06-16  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tRevert:\n+\t2021-06-16  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/95501\n+\tPR fortran/95502\n+\t* expr.c (gfc_check_pointer_assign): Avoid NULL pointer\n+\tdereference.\n+\t* match.c (gfc_match_pointer_assignment): Likewise.\n+\t* parse.c (gfc_check_do_variable): Avoid comparison with NULL\n+\tsymtree.\n+\n+2021-06-16  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/95501\n+\tPR fortran/95502\n+\t* expr.c (gfc_check_pointer_assign): Avoid NULL pointer\n+\tdereference.\n+\t* match.c (gfc_match_pointer_assignment): Likewise.\n+\t* parse.c (gfc_check_do_variable): Avoid comparison with NULL\n+\tsymtree.\n+\n 2021-06-15  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR fortran/92568"}, {"sha": "c6e8817fedb76982dd7d4532229179ddeae04ea0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a61dfdb5ecb58bc4caea1c11e017d93bdd1d9a5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a61dfdb5ecb58bc4caea1c11e017d93bdd1d9a5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9a61dfdb5ecb58bc4caea1c11e017d93bdd1d9a5", "patch": "@@ -1,3 +1,93 @@\n+2021-06-16  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/101078\n+\tPR c++/91706\n+\t* g++.dg/template/access39.C: New test.\n+\n+2021-06-16  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/95501\n+\tPR fortran/95502\n+\t* gfortran.dg/pr95502.f90: New test.\n+\n+2021-06-16  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tRevert:\n+\t2021-06-16  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/95501\n+\tPR fortran/95502\n+\t* gfortran.dg/pr95502.f90: New test.\n+\n+2021-06-16  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/95501\n+\tPR fortran/95502\n+\t* gfortran.dg/pr95502.f90: New test.\n+\n+2021-06-16  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/100796\n+\tPR preprocessor/96391\n+\t* g++.dg/plugin/location-overflow-test-pr100796.c: New test.\n+\t* g++.dg/plugin/plugin.exp: Run it.\n+\n+2021-06-16  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* gcc.target/aarch64/narrow_zero_high_half.c: Add new tests.\n+\n+2021-06-16  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* gcc.target/aarch64/narrow_zero_high_half.c: Add new tests.\n+\n+2021-06-16  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* gcc.target/aarch64/narrow_zero_high_half.c: Add new tests.\n+\n+2021-06-16  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* gcc.target/aarch64/narrow_zero_high_half.c: Add new tests.\n+\n+2021-06-16  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* gcc.target/aarch64/narrow_zero_high_half.c: New test.\n+\n+2021-06-16  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/100453\n+\t* gcc.dg/tree-ssa/pr100453.c: New test.\n+\n+2021-06-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.dg/guality/pr49888.c (f): Use noipa attribute instead of\n+\tnoinline, noclone.\n+\n+2021-06-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/101062\n+\t* gcc.dg/pr101062.c: New test.\n+\n+2021-06-16  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101088\n+\t* gcc.dg/torture/pr101088.c: New testcase.\n+\n+2021-06-16  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR rtl-optimization/46235\n+\t* gcc.target/i386/bt-5.c: New test.\n+\t* gcc.target/i386/bt-6.c: New test.\n+\t* gcc.target/i386/bt-7.c: New test.\n+\n+2021-06-16  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* gnat.dg/limited4.adb: Disable illegal code.\n+\n+2021-06-16  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101083\n+\t* gcc.dg/vect/pr97832-4.c: New testcase.\n+\n 2021-06-15  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR fortran/92568"}, {"sha": "7b9896f34500c3048a5fe2c661aac0869ca8c972", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a61dfdb5ecb58bc4caea1c11e017d93bdd1d9a5/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a61dfdb5ecb58bc4caea1c11e017d93bdd1d9a5/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=9a61dfdb5ecb58bc4caea1c11e017d93bdd1d9a5", "patch": "@@ -1,3 +1,10 @@\n+2021-06-16  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/100796\n+\tPR preprocessor/96391\n+\t* line-map.c (linemap_compare_locations): Only use comparison with\n+\tLINE_MAP_MAX_LOCATION_WITH_COLS to avoid abort.\n+\n 2021-05-20  Christophe Lyon  <christophe.lyon@linaro.org>\n \t    Torbj\u00f6rn Svensson  <torbjorn.svensson@st.com>\n "}, {"sha": "8ecc9de67a7d169b4846d43fbdca89a400696d01", "filename": "libffi/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a61dfdb5ecb58bc4caea1c11e017d93bdd1d9a5/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a61dfdb5ecb58bc4caea1c11e017d93bdd1d9a5/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=9a61dfdb5ecb58bc4caea1c11e017d93bdd1d9a5", "patch": "@@ -1,3 +1,11 @@\n+2021-06-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* src/x86/ffi64.c (classify_argument): For FFI_TYPE_STRUCT set words\n+\tto number of words needed for type->size + byte_offset bytes rather\n+\tthan just type->size bytes.  Compute pos before the loop and check\n+\ttotal size of the structure.\n+\t* testsuite/libffi.call/nested_struct12.c: New test.\n+\n 2021-01-05  Samuel Thibault  <samuel.thibault@ens-lyon.org>\n \n \t* configure: Re-generate."}, {"sha": "eaebcea0c15e06d9ff522189e2ce16242cbde5bd", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a61dfdb5ecb58bc4caea1c11e017d93bdd1d9a5/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a61dfdb5ecb58bc4caea1c11e017d93bdd1d9a5/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9a61dfdb5ecb58bc4caea1c11e017d93bdd1d9a5", "patch": "@@ -1,3 +1,36 @@\n+2021-06-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/iterator_concepts.h (__decay_copy): Name type.\n+\n+2021-06-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/ranges_base.h (ranges::begin, ranges::end)\n+\t(ranges::cbegin, ranges::cend, ranges::rbeing, ranges::rend)\n+\t(ranges::crbegin, ranges::crend, ranges::size, ranges::ssize)\n+\t(ranges::empty, ranges::data, ranges::cdata): Remove final\n+\tkeywords and deleted operator& overloads.\n+\t* testsuite/24_iterators/customization_points/iter_move.cc: Use\n+\tnew is_customization_point_object function.\n+\t* testsuite/24_iterators/customization_points/iter_swap.cc:\n+\tLikewise.\n+\t* testsuite/std/concepts/concepts.lang/concept.swappable/swap.cc:\n+\tLikewise.\n+\t* testsuite/std/ranges/access/begin.cc: Likewise.\n+\t* testsuite/std/ranges/access/cbegin.cc: Likewise.\n+\t* testsuite/std/ranges/access/cdata.cc: Likewise.\n+\t* testsuite/std/ranges/access/cend.cc: Likewise.\n+\t* testsuite/std/ranges/access/crbegin.cc: Likewise.\n+\t* testsuite/std/ranges/access/crend.cc: Likewise.\n+\t* testsuite/std/ranges/access/data.cc: Likewise.\n+\t* testsuite/std/ranges/access/empty.cc: Likewise.\n+\t* testsuite/std/ranges/access/end.cc: Likewise.\n+\t* testsuite/std/ranges/access/rbegin.cc: Likewise.\n+\t* testsuite/std/ranges/access/rend.cc: Likewise.\n+\t* testsuite/std/ranges/access/size.cc: Likewise.\n+\t* testsuite/std/ranges/access/ssize.cc: Likewise.\n+\t* testsuite/util/testsuite_iterators.h\n+\t(is_customization_point_object): New function.\n+\n 2021-06-15  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/ranges_base.h (ranges::begin, ranges::end)"}]}