{"sha": "33d9078ac5134dce037632da60cde27145193f5a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzNkOTA3OGFjNTEzNGRjZTAzNzYzMmRhNjBjZGUyNzE0NTE5M2Y1YQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-09-08T14:28:51Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-09-08T14:28:51Z"}, "message": "re PR ipa/63196 (FAIL: g++.dg/torture/pr57140.C   -O3 -fomit-frame-pointer  (internal compiler error))\n\n2014-09-08  Richard Biener  <rguenther@suse.de>\n\n\tPR ipa/63196\n\t* tree-inline.c (copy_loops): The source loop header should\n\talways be non-NULL.\n\t(tree_function_versioning): If loops need fixup after removing\n\tunreachable blocks fix them.\n\t* omp-low.c (simd_clone_adjust): Do not add incr block to\n\tloop under construction.\n\nFrom-SVN: r215016", "tree": {"sha": "d829261fc020863ce018b35b3e289c94c57db1bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d829261fc020863ce018b35b3e289c94c57db1bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33d9078ac5134dce037632da60cde27145193f5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33d9078ac5134dce037632da60cde27145193f5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33d9078ac5134dce037632da60cde27145193f5a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33d9078ac5134dce037632da60cde27145193f5a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "efe295f2379ac8fe80a29880c0f31dd13dcca03f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efe295f2379ac8fe80a29880c0f31dd13dcca03f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efe295f2379ac8fe80a29880c0f31dd13dcca03f"}], "stats": {"total": 26, "additions": 19, "deletions": 7}, "files": [{"sha": "6137b1a4b6792755801809da9780ecb41d1aac42", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33d9078ac5134dce037632da60cde27145193f5a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33d9078ac5134dce037632da60cde27145193f5a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=33d9078ac5134dce037632da60cde27145193f5a", "patch": "@@ -1,3 +1,13 @@\n+2014-09-08  Richard Biener  <rguenther@suse.de>\n+\n+\tPR ipa/63196\n+\t* tree-inline.c (copy_loops): The source loop header should\n+\talways be non-NULL.\n+\t(tree_function_versioning): If loops need fixup after removing\n+\tunreachable blocks fix them.\n+\t* omp-low.c (simd_clone_adjust): Do not add incr block to\n+\tloop under construction.\n+\n 2014-09-08  Alan Lawrence  <alan.lawrence@arm.com>\n \n \t* config/aarch64/aarch64-builtins.c"}, {"sha": "be882f72628f09cfb36e36e82c90189e70a02860", "filename": "gcc/omp-low.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33d9078ac5134dce037632da60cde27145193f5a/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33d9078ac5134dce037632da60cde27145193f5a/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=33d9078ac5134dce037632da60cde27145193f5a", "patch": "@@ -11900,6 +11900,7 @@ simd_clone_adjust (struct cgraph_node *node)\n      iteration increment and the condition/branch.  */\n   basic_block orig_exit = EDGE_PRED (EXIT_BLOCK_PTR_FOR_FN (cfun), 0)->src;\n   basic_block incr_bb = create_empty_bb (orig_exit);\n+  add_bb_to_loop (incr_bb, body_bb->loop_father);\n   /* The succ of orig_exit was EXIT_BLOCK_PTR_FOR_FN (cfun), with an empty\n      flag.  Set it now to be a FALLTHRU_EDGE.  */\n   gcc_assert (EDGE_COUNT (orig_exit->succs) == 1);\n@@ -11924,7 +11925,6 @@ simd_clone_adjust (struct cgraph_node *node)\n   loop->safelen = node->simdclone->simdlen;\n   loop->force_vectorize = true;\n   loop->header = body_bb;\n-  add_bb_to_loop (incr_bb, loop);\n \n   /* Branch around the body if the mask applies.  */\n   if (node->simdclone->inbranch)\n@@ -11965,7 +11965,7 @@ simd_clone_adjust (struct cgraph_node *node)\n   gsi_insert_after (&gsi, g, GSI_CONTINUE_LINKING);\n   e = split_block (incr_bb, gsi_stmt (gsi));\n   basic_block latch_bb = e->dest;\n-  basic_block new_exit_bb = e->dest;\n+  basic_block new_exit_bb;\n   new_exit_bb = split_block (latch_bb, NULL)->dest;\n   loop->latch = latch_bb;\n "}, {"sha": "ad474a586046d46e71dd724d80058f28f3a143f0", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33d9078ac5134dce037632da60cde27145193f5a/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33d9078ac5134dce037632da60cde27145193f5a/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=33d9078ac5134dce037632da60cde27145193f5a", "patch": "@@ -2376,11 +2376,8 @@ copy_loops (copy_body_data *id,\n \n \t  /* Assign the new loop its header and latch and associate\n \t     those with the new loop.  */\n-\t  if (src_loop->header != NULL)\n-\t    {\n-\t      dest_loop->header = (basic_block)src_loop->header->aux;\n-\t      dest_loop->header->loop_father = dest_loop;\n-\t    }\n+\t  dest_loop->header = (basic_block)src_loop->header->aux;\n+\t  dest_loop->header->loop_father = dest_loop;\n \t  if (src_loop->latch != NULL)\n \t    {\n \t      dest_loop->latch = (basic_block)src_loop->latch->aux;\n@@ -5536,6 +5533,11 @@ tree_function_versioning (tree old_decl, tree new_decl,\n   delete_unreachable_blocks_update_callgraph (&id);\n   if (id.dst_node->definition)\n     cgraph_edge::rebuild_references ();\n+  if (loops_state_satisfies_p (LOOPS_NEED_FIXUP))\n+    {\n+      calculate_dominance_info (CDI_DOMINATORS);\n+      fix_loop_structure (NULL);\n+    }\n   update_ssa (TODO_update_ssa);\n \n   /* After partial cloning we need to rescale frequencies, so they are"}]}