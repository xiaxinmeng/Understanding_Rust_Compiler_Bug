{"sha": "8506650392e4e0269e576c6331da763d79196e34", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODUwNjY1MDM5MmU0ZTAyNjllNTc2YzYzMzFkYTc2M2Q3OTE5NmUzNA==", "commit": {"author": {"name": "Manfred Hollstein", "email": "manfred@s-direktnet.de", "date": "1998-03-12T00:02:51Z"}, "committer": {"name": "Manfred Hollstein", "email": "manfred@gcc.gnu.org", "date": "1998-03-12T00:02:51Z"}, "message": "c-decl (finish_struct): Change type of min_align to unsigned.\n\nd\ngcc/ChangeLog:\n\t* c-decl (finish_struct): Change type of min_align to unsigned.\n\t* cplus-dem.c (demangle_function_name): Change type of variable i to size_t;\n\tremove unused variable len.\n\t* dwarf2out.c (reg_save): Add explicit cast of -1 to unsigned and a\n\tcomment indicating this is proper behaviour.\n\t(reg_loc_descriptor): Remove redundant comparison of unsigned variable\n\treg >= 0.\n\t(based_loc_descr): Likewise.\n\t* enquire.c (bitpattern): Change type of variable i to unsigned.\n\t* final.c (output_asm_insn): Don't cast insn_noperands to unsigned.\n\t* flow.c (life_analysis): Change type of variable i to size_t;\n\tremove unused variable insn.\n\t* gcc.c (translate_options): Change type of variables optlen, arglen and\n\tcomplen to size_t.\n\t(input_filename_length): Change type to size_t.\n\t(do_spec_1): Change type of variable bufsize to size_t.\n\t(main): Change type of variables i and j to size_t;\n \tremove subblock local definition of variable i.\n\t(lookup_compiler): Change type of second argument to size_t;\n\tchange type of variable i to size_t.\n\t* genemit.c (output_init_mov_optab): Change type of variable i to size_t.\n\t* genopinit.c (get_insn): Change type of variable pindex to size_t.\n\t* genrecog.c (add_to_sequence): Change type of variable i to size_t.\n\t* global.c (global_alloc): Change type of variable i to size_t.\n\t* regclass.c (init_reg_sets): Change type of variables i and j to unsigned.\n\t* stmt.c (expand_end_bindings): Change type of variable i to size_t.\n\t(expand_end_case): Change type of variable count to size_t.\n\t* toplev.c (main): Change type of variable j to size_t.\n\t(set_target_switch): Change type of variable j to size_t.\n\t(print_switch_values): Change type of variable j to size_t;\n\tremove unused variable flags.\n\t* varasm.c (assemble_variable): Change type of variable align to size_t.\n\t(const_hash_rtx): Change type of variable i to size_t.\ngcc/cp/ChangeLog:\nSun Mar  8 17:13:38 1998  Manfred Hollstein  <manfred@s-direktnet.de>\n\t* decl2.c (lang_decode_option): Change j's type to size_t.\n\t* tree.c (layout_vbasetypes): record_align and desired_align are of\n\ttype unsigned int; const_size and nonvirtual_const_size likewise.\n\nFrom-SVN: r18490", "tree": {"sha": "c0b0ead5f1ce5f7f4353a9bf27608bce69b66548", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0b0ead5f1ce5f7f4353a9bf27608bce69b66548"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8506650392e4e0269e576c6331da763d79196e34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8506650392e4e0269e576c6331da763d79196e34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8506650392e4e0269e576c6331da763d79196e34", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8506650392e4e0269e576c6331da763d79196e34/comments", "author": null, "committer": null, "parents": [{"sha": "5ae9a7e94aa1c9abd7b61bb4df579bedecec749c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ae9a7e94aa1c9abd7b61bb4df579bedecec749c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ae9a7e94aa1c9abd7b61bb4df579bedecec749c"}], "stats": {"total": 112, "additions": 84, "deletions": 28}, "files": [{"sha": "2daa654ae2e062fae669d9d4fdaa1dcf71f43e11", "filename": "gcc/ChangeLog", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8506650392e4e0269e576c6331da763d79196e34/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8506650392e4e0269e576c6331da763d79196e34/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8506650392e4e0269e576c6331da763d79196e34", "patch": "@@ -1,3 +1,53 @@\n+Thu Mar 12 08:37:02 1998  Manfred Hollstein  <manfred@s-direktnet.de>\n+\n+\t* c-decl (finish_struct): Change type of min_align to unsigned.\n+\n+\t* cplus-dem.c (demangle_function_name): Change type of variable i to size_t;\n+\tremove unused variable len.\n+\n+\t* dwarf2out.c (reg_save): Add explicit cast of -1 to unsigned and a\n+\tcomment indicating this is proper behaviour.\n+\t(reg_loc_descriptor): Remove redundant comparison of unsigned variable\n+\treg >= 0.\n+\t(based_loc_descr): Likewise.\n+\n+\t* enquire.c (bitpattern): Change type of variable i to unsigned.\n+\n+\t* final.c (output_asm_insn): Don't cast insn_noperands to unsigned.\n+\n+\t* flow.c (life_analysis): Change type of variable i to size_t;\n+\tremove unused variable insn.\n+\n+\t* gcc.c (translate_options): Change type of variables optlen, arglen and\n+\tcomplen to size_t.\n+\t(input_filename_length): Change type to size_t.\n+\t(do_spec_1): Change type of variable bufsize to size_t.\n+\t(main): Change type of variables i and j to size_t;\n+ \tremove subblock local definition of variable i.\n+\t(lookup_compiler): Change type of second argument to size_t;\n+\tchange type of variable i to size_t.\n+\n+\t* genemit.c (output_init_mov_optab): Change type of variable i to size_t.\n+\t\n+\t* genopinit.c (get_insn): Change type of variable pindex to size_t.\n+\n+\t* genrecog.c (add_to_sequence): Change type of variable i to size_t.\n+\n+\t* global.c (global_alloc): Change type of variable i to size_t.\n+\n+\t* regclass.c (init_reg_sets): Change type of variables i and j to unsigned.\n+\n+\t* stmt.c (expand_end_bindings): Change type of variable i to size_t.\n+\t(expand_end_case): Change type of variable count to size_t.\n+\n+\t* toplev.c (main): Change type of variable j to size_t.\n+\t(set_target_switch): Change type of variable j to size_t.\n+\t(print_switch_values): Change type of variable j to size_t;\n+\tremove unused variable flags.\n+\n+\t* varasm.c (assemble_variable): Change type of variable align to size_t.\n+\t(const_hash_rtx): Change type of variable i to size_t.\n+\n 1998-03-11  Mark Mitchell  <mmitchell@usa.net>\n \n \t* dbxout.c (dbxout_type_methods): Only treat TYPE_METHODS as a"}, {"sha": "4538a80872a508e81ddefdfeb5c0d6ee913e2c91", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8506650392e4e0269e576c6331da763d79196e34/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8506650392e4e0269e576c6331da763d79196e34/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8506650392e4e0269e576c6331da763d79196e34", "patch": "@@ -1,3 +1,10 @@\n+Thu Mar 12 08:39:13 1998  Manfred Hollstein  <manfred@s-direktnet.de>\n+\n+\t* decl2.c (lang_decode_option): Change j's type to size_t.\n+\n+\t* tree.c (layout_vbasetypes): record_align and desired_align are of\n+\ttype unsigned int; const_size and nonvirtual_const_size likewise.\n+\n Wed Mar 11 07:31:08 1998  Mark Mitchell  <mmitchell@usa.net>\n \n \t* pt.c (tsubst): Clear TYPE_REFERENCE_TO when creating a"}, {"sha": "adf0fc6bac77a89642b677ce36703f8104b5b9e5", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8506650392e4e0269e576c6331da763d79196e34/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8506650392e4e0269e576c6331da763d79196e34/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=8506650392e4e0269e576c6331da763d79196e34", "patch": "@@ -510,7 +510,8 @@ lang_decode_option (p)\n       /* Some kind of -f option.\n \t P's value is the option sans `-f'.\n \t Search for it in the table of options.  */\n-      int found = 0, j;\n+      int found = 0;\n+      size_t j;\n \n       p += 2;\n       /* Try special -f options.  */"}, {"sha": "0911e7dbeba7955ec4ad05b138f65dca2689e056", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8506650392e4e0269e576c6331da763d79196e34/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8506650392e4e0269e576c6331da763d79196e34/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=8506650392e4e0269e576c6331da763d79196e34", "patch": "@@ -917,7 +917,9 @@ reg_save (label, reg, sreg, offset)\n \n   cfi->dw_cfi_oprnd1.dw_cfi_reg_num = reg;\n \n-  if (sreg == -1)\n+  /* The following comparison is correct. -1 is used to indicate that\n+     the value isn't a register number.  */\n+  if (sreg == (unsigned int) -1)\n     {\n       if (reg & ~0x3f)\n \t/* The register number won't fit in 6 bits, so we have to use\n@@ -6378,7 +6380,7 @@ reg_loc_descriptor (rtl)\n   register dw_loc_descr_ref loc_result = NULL;\n   register unsigned reg = reg_number (rtl);\n \n-  if (reg >= 0 && reg <= 31)\n+  if (reg <= 31)\n     loc_result = new_loc_descr (DW_OP_reg0 + reg, 0, 0);\n   else\n     loc_result = new_loc_descr (DW_OP_regx, reg, 0);\n@@ -6403,7 +6405,7 @@ based_loc_descr (reg, offset)\n \n   if (reg == fp_reg)\n     loc_result = new_loc_descr (DW_OP_fbreg, offset, 0);\n-  else if (reg >= 0 && reg <= 31)\n+  else if (reg <= 31)\n     loc_result = new_loc_descr (DW_OP_breg0 + reg, offset, 0);\n   else\n     loc_result = new_loc_descr (DW_OP_bregx, reg, offset);"}, {"sha": "151697d05d40efc04f55983b31211610f71a532d", "filename": "gcc/final.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8506650392e4e0269e576c6331da763d79196e34/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8506650392e4e0269e576c6331da763d79196e34/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=8506650392e4e0269e576c6331da763d79196e34", "patch": "@@ -3244,7 +3244,7 @@ output_asm_insn (template, operands)\n \n \t    if (! (*p >= '0' && *p <= '9'))\n \t      output_operand_lossage (\"operand number missing after %-letter\");\n-\t    else if (this_is_asm_operands && c >= (unsigned) insn_noperands)\n+\t    else if (this_is_asm_operands && c >= insn_noperands)\n \t      output_operand_lossage (\"operand number out of range\");\n \t    else if (letter == 'l')\n \t      output_asm_label (operands[c]);\n@@ -3277,7 +3277,7 @@ output_asm_insn (template, operands)\n \telse if (*p >= '0' && *p <= '9')\n \t  {\n \t    c = atoi (p);\n-\t    if (this_is_asm_operands && c >= (unsigned) insn_noperands)\n+\t    if (this_is_asm_operands && c >= insn_noperands)\n \t      output_operand_lossage (\"operand number out of range\");\n \t    else\n \t      output_operand (operands[c], 0);"}, {"sha": "c739607a84c4c352dc1985249e7c34c63d4bfb29", "filename": "gcc/flow.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8506650392e4e0269e576c6331da763d79196e34/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8506650392e4e0269e576c6331da763d79196e34/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=8506650392e4e0269e576c6331da763d79196e34", "patch": "@@ -965,8 +965,7 @@ life_analysis (f, nregs, file)\n      int nregs;\n      FILE *file;\n {\n-  register rtx insn;\n-  register int i;\n+  register size_t i;\n \n #ifdef ELIMINABLE_REGS\n   static struct {int from, to; } eliminables[] = ELIMINABLE_REGS;"}, {"sha": "5d2855d9ec754335ec2fc6919b153a0205f28a8c", "filename": "gcc/gcc.c", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8506650392e4e0269e576c6331da763d79196e34/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8506650392e4e0269e576c6331da763d79196e34/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=8506650392e4e0269e576c6331da763d79196e34", "patch": "@@ -217,7 +217,7 @@ struct path_prefix;\n static void init_spec\t\tPROTO((void));\n static void read_specs\t\tPROTO((char *, int));\n static void set_spec\t\tPROTO((char *, char *));\n-static struct compiler *lookup_compiler PROTO((char *, int, char *));\n+static struct compiler *lookup_compiler PROTO((char *, size_t, char *));\n static char *build_search_list\tPROTO((struct path_prefix *, char *, int));\n static void putenv_from_prefixes PROTO((struct path_prefix *, char *));\n static char *find_a_file\tPROTO((struct path_prefix *, char *, int));\n@@ -861,9 +861,9 @@ translate_options (argcp, argvp)\n \t  /* Find a mapping that applies to this option.  */\n \t  for (j = 0; j < sizeof (option_map) / sizeof (option_map[0]); j++)\n \t    {\n-\t      int optlen = strlen (option_map[j].name);\n-\t      int arglen = strlen (argv[i]);\n-\t      int complen = arglen > optlen ? optlen : arglen;\n+\t      size_t optlen = strlen (option_map[j].name);\n+\t      size_t arglen = strlen (argv[i]);\n+\t      size_t complen = arglen > optlen ? optlen : arglen;\n \t      char *arginfo = option_map[j].arg_info;\n \n \t      if (arginfo == 0)\n@@ -3014,7 +3014,7 @@ process_command (argc, argv)\n \n static char *input_filename;\n static int input_file_number;\n-static int input_filename_length;\n+static size_t input_filename_length;\n static int basename_length;\n static char *input_basename;\n static char *input_suffix;\n@@ -3210,7 +3210,7 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \t  case 'D':\n \t    {\n \t      struct prefix_list *pl = startfile_prefixes.plist;\n-\t      int bufsize = 100;\n+\t      size_t bufsize = 100;\n \t      char *buffer = (char *) xmalloc (bufsize);\n \t      int idx;\n \n@@ -4299,8 +4299,8 @@ main (argc, argv)\n      int argc;\n      char **argv;\n {\n-  register int i;\n-  int j;\n+  register size_t i;\n+  size_t j;\n   int value;\n   int linker_was_run = 0;\n   char *explicit_link_files;\n@@ -4392,7 +4392,6 @@ main (argc, argv)\n   process_command (argc, argv);\n \n   {\n-    int i;\n     int first_time;\n \n     /* Build COLLECT_GCC_OPTIONS to have all of the options specified to\n@@ -4778,7 +4777,7 @@ main (argc, argv)\n static struct compiler *\n lookup_compiler (name, length, language)\n      char *name;\n-     int length;\n+     size_t length;\n      char *language;\n {\n   struct compiler *cp;\n@@ -5045,7 +5044,7 @@ validate_all_switches ()\n \n   for (comp = compilers; comp->spec[0]; comp++)\n     {\n-      int i;\n+      size_t i;\n       for (i = 0; i < sizeof comp->spec / sizeof comp->spec[0] && comp->spec[i]; i++)\n \t{\n \t  p = comp->spec[i];"}, {"sha": "dc5eca1502b8d216a988b4513e044a3d02b06b3b", "filename": "gcc/genemit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8506650392e4e0269e576c6331da763d79196e34/gcc%2Fgenemit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8506650392e4e0269e576c6331da763d79196e34/gcc%2Fgenemit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenemit.c?ref=8506650392e4e0269e576c6331da763d79196e34", "patch": "@@ -650,7 +650,7 @@ output_init_mov_optab ()\n #ifdef EXTRA_CC_NAMES\n   static char *cc_names[] = { EXTRA_CC_NAMES };\n   char *p;\n-  int i;\n+  size_t i;\n \n   printf (\"\\nvoid\\ninit_mov_optab ()\\n{\\n\");\n "}, {"sha": "6e9877bf1cc5491deaf6f975772e1f25f32ee171", "filename": "gcc/genrecog.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8506650392e4e0269e576c6331da763d79196e34/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8506650392e4e0269e576c6331da763d79196e34/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=8506650392e4e0269e576c6331da763d79196e34", "patch": "@@ -306,7 +306,7 @@ add_to_sequence (pattern, last, position)\n   struct decision *this;\n   char *newpos;\n   register char *fmt;\n-  register int i;\n+  register size_t i;\n   int depth = strlen (position);\n   int len;\n "}, {"sha": "6b370ba275662e219734815cc50bd6607f35f361", "filename": "gcc/stmt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8506650392e4e0269e576c6331da763d79196e34/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8506650392e4e0269e576c6331da763d79196e34/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=8506650392e4e0269e576c6331da763d79196e34", "patch": "@@ -2916,7 +2916,7 @@ expand_end_bindings (vars, mark_ends, dont_jump_in)\n \t     This is the case on all known machines; if we don't make this\n \t     assumption, we do unnecessary saving on many machines.  */\n \t  static struct elims {int from, to;} elim_regs[] = ELIMINABLE_REGS;\n-\t  int i;\n+\t  size_t i;\n \n \t  for (i = 0; i < sizeof elim_regs / sizeof elim_regs[0]; i++)\n \t    if (elim_regs[i].from == ARG_POINTER_REGNUM\n@@ -4594,7 +4594,7 @@ expand_end_case (orig_index)\n   tree minval, maxval, range, orig_minval;\n   rtx default_label = 0;\n   register struct case_node *n;\n-  int count;\n+  unsigned int count;\n   rtx index;\n   rtx table_label;\n   int ncases;"}, {"sha": "70dddc24bd336eb9d3af8f54a8f63e573d294f67", "filename": "gcc/toplev.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8506650392e4e0269e576c6331da763d79196e34/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8506650392e4e0269e576c6331da763d79196e34/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=8506650392e4e0269e576c6331da763d79196e34", "patch": "@@ -3819,7 +3819,7 @@ main (argc, argv, envp)\n \n   for (i = 1; i < argc; i++)\n     {\n-      int j;\n+      size_t j;\n       /* If this is a language-specific option,\n \t decode it in a language-specific way.  */\n       for (j = 0; lang_options[j] != 0; j++)\n@@ -4411,7 +4411,7 @@ void\n set_target_switch (name)\n      char *name;\n {\n-  register int j;\n+  register size_t j;\n   int valid = 0;\n \n   for (j = 0; j < sizeof target_switches / sizeof target_switches[0]; j++)\n@@ -4504,7 +4504,7 @@ print_switch_values (file, pos, max, indent, sep, term)\n      int pos, max;\n      char *indent, *sep, *term;\n {\n-  int j, flags;\n+  size_t j;\n   char **p;\n \n   /* Print the options as passed.  */\n@@ -4548,7 +4548,6 @@ print_switch_values (file, pos, max, indent, sep, term)\n \n   /* Print target specific options.  */\n \n-  flags = target_flags;\n   for (j = 0; j < sizeof target_switches / sizeof target_switches[0]; j++)\n     if (target_switches[j].name[0] != '\\0'\n \t&& target_switches[j].value > 0\n@@ -4557,7 +4556,6 @@ print_switch_values (file, pos, max, indent, sep, term)\n       {\n \tpos = print_single_switch (file, pos, max, indent, sep, term,\n \t\t\t\t   \"-m\", target_switches[j].name);\n-\tflags &= ~ target_switches[j].value;\n       }\n \n #ifdef TARGET_OPTIONS"}]}