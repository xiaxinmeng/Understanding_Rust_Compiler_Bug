{"sha": "4729dc926faa10c1df41a720a9d7cda713d864fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDcyOWRjOTI2ZmFhMTBjMWRmNDFhNzIwYTlkN2NkYTcxM2Q4NjRmYg==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernd.schmidt@analog.com", "date": "2006-02-21T15:32:21Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2006-02-21T15:32:21Z"}, "message": "predicates.md (cc_operand): Delete predicate.\n\n\t* config/bfin/predicates.md (cc_operand): Delete predicate.  All uses\n\treplaced with register_operand.\n\t* config/bfin/bfin.c (bfin_register_move_cost): Moving CC to any\n\tnon-DREG is expensive.\n\t* config/bfin/bfin.h (FIXED_REGISTERS): CC isn't fixed.\n\t* config/bfin/bfin.md (movbi): Fix constraints and template for moves\n\tinvolving memory.\n\nFrom-SVN: r111336", "tree": {"sha": "6262eb1a0bf8b6fe001924820625181063221b4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6262eb1a0bf8b6fe001924820625181063221b4e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4729dc926faa10c1df41a720a9d7cda713d864fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4729dc926faa10c1df41a720a9d7cda713d864fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4729dc926faa10c1df41a720a9d7cda713d864fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4729dc926faa10c1df41a720a9d7cda713d864fb/comments", "author": null, "committer": null, "parents": [{"sha": "ee2312f34f73628a916796444be7cfd0b3f73bcb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee2312f34f73628a916796444be7cfd0b3f73bcb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee2312f34f73628a916796444be7cfd0b3f73bcb"}], "stats": {"total": 73, "additions": 43, "deletions": 30}, "files": [{"sha": "3702a69143b6111398f59bc684350a71e2ee8433", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4729dc926faa10c1df41a720a9d7cda713d864fb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4729dc926faa10c1df41a720a9d7cda713d864fb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4729dc926faa10c1df41a720a9d7cda713d864fb", "patch": "@@ -1,3 +1,13 @@\n+2006-02-21  Bernd Schmidt  <bernd.schmidt@analog.com>\n+\n+\t* config/bfin/predicates.md (cc_operand): Delete predicate.  All uses\n+\treplaced with register_operand.\n+\t* config/bfin/bfin.c (bfin_register_move_cost): Moving CC to any\n+\tnon-DREG is expensive.\n+\t* config/bfin/bfin.h (FIXED_REGISTERS): CC isn't fixed.\n+\t* config/bfin/bfin.md (movbi): Fix constraints and template for moves\n+\tinvolving memory.\n+\n 2006-02-21  Joseph S. Myers  <joseph@codesourcery.com>\n \n \t* doc/install.texi2html: Use set -e."}, {"sha": "079b91916c1f5c1a7bf67830f245095830fbc330", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4729dc926faa10c1df41a720a9d7cda713d864fb/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4729dc926faa10c1df41a720a9d7cda713d864fb/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=4729dc926faa10c1df41a720a9d7cda713d864fb", "patch": "@@ -1,5 +1,5 @@\n /* The Blackfin code generation auxiliary output file.\n-   Copyright (C) 2005  Free Software Foundation, Inc.\n+   Copyright (C) 2005, 2006  Free Software Foundation, Inc.\n    Contributed by Analog Devices.\n \n    This file is part of GCC.\n@@ -1685,6 +1685,11 @@ int\n bfin_register_move_cost (enum machine_mode mode ATTRIBUTE_UNUSED,\n \t\t\t enum reg_class class1, enum reg_class class2)\n {\n+  /* These need secondary reloads, so they're more expensive.  */\n+  if ((class1 == CCREGS && class2 != DREGS)\n+      || (class1 != DREGS && class2 == CCREGS))\n+    return 4;\n+\n   /* If optimizing for size, always prefer reg-reg over reg-memory moves.  */\n   if (optimize_size)\n     return 2;\n@@ -1788,6 +1793,7 @@ bfin_secondary_reload (bool in_p, rtx x, enum reg_class class,\n     return DREGS;\n   if (x_class == CCREGS && class != DREGS)\n     return DREGS;\n+\n   /* All registers other than AREGS can load arbitrary constants.  The only\n      case that remains is MEM.  */\n   if (code == MEM)"}, {"sha": "171edb928ab54e72d3e0df81e00f37fa1b181c49", "filename": "gcc/config/bfin/bfin.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4729dc926faa10c1df41a720a9d7cda713d864fb/gcc%2Fconfig%2Fbfin%2Fbfin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4729dc926faa10c1df41a720a9d7cda713d864fb/gcc%2Fconfig%2Fbfin%2Fbfin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.h?ref=4729dc926faa10c1df41a720a9d7cda713d864fb", "patch": "@@ -1,5 +1,5 @@\n /* Definitions for the Blackfin port.\n-   Copyright (C) 2005  Free Software Foundation, Inc.\n+   Copyright (C) 2005, 2006  Free Software Foundation, Inc.\n    Contributed by Analog Devices.\n \n    This file is part of GCC.\n@@ -256,7 +256,7 @@ extern const char *bfin_library_id_string;\n /*i0 i1 i2 i3 b0 b1 b2 b3   l0 l1 l2 l3 m0 m1 m2 m3 */ \\\n   0, 0, 0, 0, 0, 0, 0, 0,   1, 1, 1, 1, 0, 0, 0, 0,    \\\n /*a0 a1 cc rets/i/x/n/e     astat seqstat usp argp */ \\\n-  0, 0, 1, 1, 1, 1, 1, 1,   1, 1, 1, 1\t \\\n+  0, 0, 0, 1, 1, 1, 1, 1,   1, 1, 1, 1\t \\\n }\n \n /* 1 for registers not available across function calls."}, {"sha": "fb806330cbed9038575ce38b0dfe8921cb19ff28", "filename": "gcc/config/bfin/bfin.md", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4729dc926faa10c1df41a720a9d7cda713d864fb/gcc%2Fconfig%2Fbfin%2Fbfin.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4729dc926faa10c1df41a720a9d7cda713d864fb/gcc%2Fconfig%2Fbfin%2Fbfin.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.md?ref=4729dc926faa10c1df41a720a9d7cda713d864fb", "patch": "@@ -1,5 +1,5 @@\n ;;- Machine description for Blackfin for GNU compiler\n-;;  Copyright 2005  Free Software Foundation, Inc.\n+;;  Copyright 2005, 2006  Free Software Foundation, Inc.\n ;;  Contributed by Analog Devices.\n \n ;; This file is part of GCC.\n@@ -239,7 +239,7 @@\n (define_insn \"*movsicc_insn1\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=da,da,da\")\n         (if_then_else:SI\n-\t    (eq:BI (match_operand:BI 3 \"cc_operand\" \"C,C,C\")\n+\t    (eq:BI (match_operand:BI 3 \"register_operand\" \"C,C,C\")\n \t\t(const_int 0))\n \t    (match_operand:SI 1 \"register_operand\" \"da,0,da\")\n \t    (match_operand:SI 2 \"register_operand\" \"0,da,da\")))]\n@@ -254,7 +254,7 @@\n (define_insn \"*movsicc_insn2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=da,da,da\")\n         (if_then_else:SI\n-\t    (ne:BI (match_operand:BI 3 \"cc_operand\" \"C,C,C\")\n+\t    (ne:BI (match_operand:BI 3 \"register_operand\" \"C,C,C\")\n \t\t(const_int 0))\n \t    (match_operand:SI 1 \"register_operand\" \"0,da,da\")\n \t    (match_operand:SI 2 \"register_operand\" \"da,0,da\")))]\n@@ -344,15 +344,15 @@\n })\n \n (define_insn \"movbi\"\n-  [(set (match_operand:BI 0 \"nonimmediate_operand\" \"=x,x,d,mr,C,d,C\")\n-        (match_operand:BI 1 \"general_operand\" \"x,xKs3,mr,d,d,C,P0\"))]\n+  [(set (match_operand:BI 0 \"nonimmediate_operand\" \"=x,x,d,md,C,d,C\")\n+        (match_operand:BI 1 \"general_operand\" \"x,xKs3,md,d,d,C,P0\"))]\n \n   \"\"\n   \"@\n    %0 = %1;\n    %0 = %1 (X);\n-   %0 = %1;\n-   %0 = %1;\n+   %0 = B %1 (Z);\n+   B %0 = %1;\n    CC = %1;\n    %0 = CC;\n    R0 = R0 | R0; CC = AC0;\"\n@@ -967,7 +967,7 @@\n ;; Bit test instructions\n \n (define_insn \"*not_bittst\"\n- [(set (match_operand:BI 0 \"cc_operand\" \"=C\")\n+ [(set (match_operand:BI 0 \"register_operand\" \"=C\")\n        (eq:BI (zero_extract:SI (match_operand:SI 1 \"register_operand\" \"d\")\n \t\t\t       (const_int 1)\n \t\t\t       (match_operand:SI 2 \"immediate_operand\" \"Ku5\"))\n@@ -977,7 +977,7 @@\n   [(set_attr \"type\" \"alu0\")])\n \n (define_insn \"*bittst\"\n- [(set (match_operand:BI 0 \"cc_operand\" \"=C\")\n+ [(set (match_operand:BI 0 \"register_operand\" \"=C\")\n        (ne:BI (zero_extract:SI (match_operand:SI 1 \"register_operand\" \"d\")\n \t\t\t       (const_int 1)\n \t\t\t       (match_operand:SI 2 \"immediate_operand\" \"Ku5\"))\n@@ -1530,47 +1530,47 @@\n })\n \n (define_insn \"compare_eq\"\n-  [(set (match_operand:BI 0 \"cc_operand\" \"=C,C\")\n+  [(set (match_operand:BI 0 \"register_operand\" \"=C,C\")\n         (eq:BI (match_operand:SI 1 \"register_operand\" \"d,a\")\n                (match_operand:SI 2 \"reg_or_const_int_operand\" \"dKs3,aKs3\")))]\n   \"\"\n   \"cc =%1==%2;\"\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"compare_ne\"\n-  [(set (match_operand:BI 0 \"cc_operand\" \"=C,C\")\n+  [(set (match_operand:BI 0 \"register_operand\" \"=C,C\")\n         (ne:BI (match_operand:SI 1 \"register_operand\" \"d,a\")\n                (match_operand:SI 2 \"reg_or_const_int_operand\" \"dKs3,aKs3\")))]\n   \"0\"\n   \"cc =%1!=%2;\"\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"compare_lt\"\n-  [(set (match_operand:BI 0 \"cc_operand\" \"=C,C\")\n+  [(set (match_operand:BI 0 \"register_operand\" \"=C,C\")\n         (lt:BI (match_operand:SI 1 \"register_operand\" \"d,a\")\n                (match_operand:SI 2 \"reg_or_const_int_operand\" \"dKs3,aKs3\")))]\n   \"\"\n   \"cc =%1<%2;\"\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"compare_le\"\n-  [(set (match_operand:BI 0 \"cc_operand\" \"=C,C\")\n+  [(set (match_operand:BI 0 \"register_operand\" \"=C,C\")\n         (le:BI (match_operand:SI 1 \"register_operand\" \"d,a\")\n                (match_operand:SI 2 \"reg_or_const_int_operand\" \"dKs3,aKs3\")))]\n   \"\"\n   \"cc =%1<=%2;\"\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"compare_leu\"\n-  [(set (match_operand:BI 0 \"cc_operand\" \"=C,C\")\n+  [(set (match_operand:BI 0 \"register_operand\" \"=C,C\")\n         (leu:BI (match_operand:SI 1 \"register_operand\" \"d,a\")\n                 (match_operand:SI 2 \"reg_or_const_int_operand\" \"dKu3,aKu3\")))]\n   \"\"\n   \"cc =%1<=%2 (iu);\"\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"compare_ltu\"\n-  [(set (match_operand:BI 0 \"cc_operand\" \"=C,C\")\n+  [(set (match_operand:BI 0 \"register_operand\" \"=C,C\")\n         (ltu:BI (match_operand:SI 1 \"register_operand\" \"d,a\")\n                 (match_operand:SI 2 \"reg_or_const_int_operand\" \"dKu3,aKu3\")))]\n   \"\"\n@@ -1735,7 +1735,7 @@\n   [(set (pc)\n \t(if_then_else\n \t (match_operator 0 \"bfin_cbranch_operator\"\n-\t\t\t [(match_operand:BI 1 \"cc_operand\" \"C\")\n+\t\t\t [(match_operand:BI 1 \"register_operand\" \"C\")\n \t\t\t  (match_operand:BI 2 \"immediate_operand\" \"P0\")])\n \t (label_ref (match_operand 3 \"\" \"\"))\n \t (pc)))]\n@@ -1753,7 +1753,7 @@\n   [(set (pc)\n \t(if_then_else\n \t (match_operator 0 \"bfin_cbranch_operator\"\n-\t\t\t [(match_operand:BI 1 \"cc_operand\" \"C\")\n+\t\t\t [(match_operand:BI 1 \"register_operand\" \"C\")\n \t\t\t  (match_operand:BI 2 \"immediate_operand\" \"P0\")])\n \t (label_ref (match_operand 3 \"\" \"\"))\n \t (pc)))\n@@ -1769,7 +1769,7 @@\n   [(set (pc)\n \t(if_then_else\n \t (match_operator 0 \"bfin_cbranch_operator\"\n-\t\t\t [(match_operand:BI 1 \"cc_operand\" \"C\")\n+\t\t\t [(match_operand:BI 1 \"register_operand\" \"C\")\n \t\t\t  (match_operand:BI 2 \"immediate_operand\" \"P0\")])\n \t (label_ref (match_operand 3 \"\" \"\"))\n \t (pc)))\n@@ -1845,7 +1845,7 @@\n \n ;;;;;;;;;;;;;;;;;;;;   CC2dreg   ;;;;;;;;;;;;;;;;;;;;;;;;;\n (define_insn \"movsibi\"\n-  [(set (match_operand:BI 0 \"cc_operand\" \"=C\")\n+  [(set (match_operand:BI 0 \"register_operand\" \"=C\")\n \t(ne:BI (match_operand:SI 1 \"register_operand\" \"d\")\n \t       (const_int 0)))]\n   \"\"\n@@ -1854,15 +1854,15 @@\n \n (define_insn \"movbisi\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(ne:SI (match_operand:BI 1 \"cc_operand\" \"C\")\n+\t(ne:SI (match_operand:BI 1 \"register_operand\" \"C\")\n \t       (const_int 0)))]\n   \"\"\n   \"%0 = CC;\"\n   [(set_attr \"length\" \"2\")])\n \n (define_insn \"\"\n-  [(set (match_operand:BI 0 \"cc_operand\" \"=C\")\n-\t(eq:BI (match_operand:BI 1 \"cc_operand\" \" 0\")\n+  [(set (match_operand:BI 0 \"register_operand\" \"=C\")\n+\t(eq:BI (match_operand:BI 1 \"register_operand\" \" 0\")\n \t       (const_int 0)))]\n   \"\"\n   \"%0 = ! %0;\"    /*  NOT CC;\"  */"}, {"sha": "dc0da877d75ebb2e719d59abaa377e8ed604bd4f", "filename": "gcc/config/bfin/predicates.md", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4729dc926faa10c1df41a720a9d7cda713d864fb/gcc%2Fconfig%2Fbfin%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4729dc926faa10c1df41a720a9d7cda713d864fb/gcc%2Fconfig%2Fbfin%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fpredicates.md?ref=4729dc926faa10c1df41a720a9d7cda713d864fb", "patch": "@@ -1,4 +1,6 @@\n ;; Predicate definitions for the Blackfin.\n+;; Copyright (C) 2005, 2006  Free Software Foundation, Inc.\n+;; Contributed by Analog Devices.\n ;;\n ;; This file is part of GCC.\n ;;\n@@ -65,11 +67,6 @@\n   return 1;\n })\n \n-;; Return nonzero if OP is the CC register.\n-(define_predicate \"cc_operand\"\n-  (and (match_code \"reg\")\n-       (match_test \"REGNO (op) == REG_CC && GET_MODE (op) == BImode\")))\n-\n ;; Return nonzero if OP is a register or a 7 bit signed constant.\n (define_predicate \"reg_or_7bit_operand\"\n   (ior (match_operand 0 \"register_operand\")"}]}