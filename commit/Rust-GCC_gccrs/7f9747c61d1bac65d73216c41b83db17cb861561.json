{"sha": "7f9747c61d1bac65d73216c41b83db17cb861561", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Y5NzQ3YzYxZDFiYWM2NWQ3MzIxNmM0MWI4M2RiMTdjYjg2MTU2MQ==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2006-02-17T16:06:57Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2006-02-17T16:06:57Z"}, "message": "freeze.adb (Statically_Discriminated_Components): Return false if the bounds of the type of the discriminant are not static...\n\n2006-02-17  Ed Schonberg  <schonberg@adacore.com>\n\n\t* freeze.adb (Statically_Discriminated_Components): Return false if\n\tthe bounds of the type of the discriminant are not static expressions.\n\n\t* sem_aggr.adb (Check_Static_Discriminated_Subtype): Return false if\n\tthe bounds of the discriminant type are not static.\n\nFrom-SVN: r111187", "tree": {"sha": "79c3f38e39064cc602b2d0cc4cb3127357149c7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79c3f38e39064cc602b2d0cc4cb3127357149c7a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f9747c61d1bac65d73216c41b83db17cb861561", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f9747c61d1bac65d73216c41b83db17cb861561", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f9747c61d1bac65d73216c41b83db17cb861561", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f9747c61d1bac65d73216c41b83db17cb861561/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "faad2f7ed698abf82e002d21708979e2b49aac76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/faad2f7ed698abf82e002d21708979e2b49aac76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/faad2f7ed698abf82e002d21708979e2b49aac76"}], "stats": {"total": 51, "additions": 36, "deletions": 15}, "files": [{"sha": "da997c0dac6bb7305463faf3001953c2bee9a94d", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f9747c61d1bac65d73216c41b83db17cb861561/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f9747c61d1bac65d73216c41b83db17cb861561/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=7f9747c61d1bac65d73216c41b83db17cb861561", "patch": "@@ -887,12 +887,31 @@ package body Freeze is\n         (T : Entity_Id) return Boolean\n       is\n          Constraint : Elmt_Id;\n+         Discr      : Entity_Id;\n \n       begin\n          if Has_Discriminants (T)\n            and then Present (Discriminant_Constraint (T))\n            and then Present (First_Component (T))\n          then\n+            Discr := First_Discriminant (T);\n+\n+            if Is_Access_Type (Etype (Discr)) then\n+               null;\n+\n+            --  If the bounds of the discriminant are not compile-time known,\n+            --  treat this as non-static, even if the value of the discriminant\n+            --  is compile-time known, because the back-end treats aggregates\n+            --  of such a subtype as having unknown size.\n+\n+            elsif not\n+              (Compile_Time_Known_Value (Type_Low_Bound  (Etype (Discr)))\n+                 and then\n+               Compile_Time_Known_Value (Type_High_Bound (Etype (Discr))))\n+            then\n+               return False;\n+            end if;\n+\n             Constraint := First_Elmt (Discriminant_Constraint (T));\n             while Present (Constraint) loop\n                if not Compile_Time_Known_Value (Node (Constraint)) then"}, {"sha": "9f0c5fc80dd004588d76c6a2650e997abaf81b5f", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f9747c61d1bac65d73216c41b83db17cb861561/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f9747c61d1bac65d73216c41b83db17cb861561/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=7f9747c61d1bac65d73216c41b83db17cb861561", "patch": "@@ -731,13 +731,10 @@ package body Sem_Aggr is\n                 Name_Buffer (1 .. Name_Len);\n \n       begin\n-\n          Component_Elmt := First_Elmt (Elements);\n-\n          while Nr_Of_Suggestions <= Max_Suggestions\n             and then Present (Component_Elmt)\n          loop\n-\n             Get_Name_String (Chars (Node (Component_Elmt)));\n \n             if Is_Bad_Spelling_Of (Name_Buffer (1 .. Name_Len), S) then\n@@ -785,12 +782,23 @@ package body Sem_Aggr is\n \n       elsif Nkind (V) /= N_Integer_Literal then\n          return;\n+\n+      elsif Is_Access_Type (Etype (Disc)) then\n+         null;\n+\n+      --  If the bounds of the discriminant type are not compile time known,\n+      --  the back-end will treat this as a variable-size object.\n+\n+      elsif not\n+        (Compile_Time_Known_Value (Type_Low_Bound  (Etype (Disc)))\n+           and then\n+         Compile_Time_Known_Value (Type_High_Bound (Etype (Disc))))\n+      then\n+         return;\n       end if;\n \n       Comp := First_Component (T);\n-\n       while Present (Comp) loop\n-\n          if Is_Scalar_Type (Etype (Comp)) then\n             null;\n \n@@ -801,15 +809,12 @@ package body Sem_Aggr is\n             null;\n \n          elsif Is_Array_Type (Etype (Comp)) then\n-\n             if Is_Bit_Packed_Array (Etype (Comp)) then\n                return;\n             end if;\n \n             Ind := First_Index (Etype (Comp));\n-\n             while Present (Ind) loop\n-\n                if Nkind (Ind) /= N_Range\n                  or else Nkind (Low_Bound (Ind)) /= N_Integer_Literal\n                  or else Nkind (High_Bound (Ind)) /= N_Integer_Literal\n@@ -1615,7 +1620,6 @@ package body Sem_Aggr is\n \n             Assoc := First (Component_Associations (N));\n             while Present (Assoc) loop\n-\n                Prev_Nb_Discrete_Choices := Nb_Discrete_Choices;\n                Choice := First (Choices (Assoc));\n                loop\n@@ -2058,10 +2062,9 @@ package body Sem_Aggr is\n       elsif Nkind (A) /= N_Aggregate then\n          if Is_Overloaded (A) then\n             A_Type := Any_Type;\n-            Get_First_Interp (A, I, It);\n \n+            Get_First_Interp (A, I, It);\n             while Present (It.Typ) loop\n-\n                if Is_Tagged_Type (It.Typ)\n                   and then not Is_Limited_Type (It.Typ)\n                then\n@@ -2555,7 +2558,7 @@ package body Sem_Aggr is\n \n             if Is_Array_Type (Expr_Type) then\n                declare\n-                  Index : Node_Id := First_Index (Expr_Type);\n+                  Index : Node_Id;\n                   --  Range of the current constrained index in the array\n \n                   Orig_Index : Node_Id := First_Index (Etype (Component));\n@@ -2569,6 +2572,7 @@ package body Sem_Aggr is\n                   --  range checks.\n \n                begin\n+                  Index := First_Index (Expr_Type);\n                   while Present (Index) loop\n                      if Depends_On_Discriminant (Orig_Index) then\n                         Apply_Range_Check (Index, Etype (Unconstr_Index));\n@@ -2890,7 +2894,6 @@ package body Sem_Aggr is\n \n             Parent_Typ  := Base_Type (Typ);\n             while Parent_Typ /= Root_Typ loop\n-\n                Prepend_Elmt (Parent_Typ, To => Parent_Typ_List);\n                Parent_Typ := Etype (Parent_Typ);\n \n@@ -3208,11 +3211,10 @@ package body Sem_Aggr is\n \n    begin\n       K := L;\n-\n       while K /= U loop\n          T := Case_Table (K + 1);\n-         J := K + 1;\n \n+         J := K + 1;\n          while J /= L\n            and then Expr_Value (Case_Table (J - 1).Choice_Lo) >\n                     Expr_Value (T.Choice_Lo)"}]}