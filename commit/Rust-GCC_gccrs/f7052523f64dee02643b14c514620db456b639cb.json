{"sha": "f7052523f64dee02643b14c514620db456b639cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjcwNTI1MjNmNjRkZWUwMjY0M2IxNGM1MTQ2MjBkYjQ1NmI2MzljYg==", "commit": {"author": {"name": "Caroline Tice", "email": "ctice@gcc.gnu.org", "date": "2005-03-31T19:38:44Z"}, "committer": {"name": "Caroline Tice", "email": "ctice@gcc.gnu.org", "date": "2005-03-31T19:38:44Z"}, "message": "Committing ChangeLog that goes with hot/cold partitioning fix I checked in...\n\nCommitting ChangeLog that goes with hot/cold partitioning fix I checked\nin earlier today (I forgot to check in the ChangeLog at the time and only\njust noticed).\n\nFrom-SVN: r97347", "tree": {"sha": "0494f6068eae8514fb9b138c069c665c0f28665a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0494f6068eae8514fb9b138c069c665c0f28665a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7052523f64dee02643b14c514620db456b639cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7052523f64dee02643b14c514620db456b639cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7052523f64dee02643b14c514620db456b639cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7052523f64dee02643b14c514620db456b639cb/comments", "author": null, "committer": null, "parents": [{"sha": "92cf604f5b9ffd06c0b8d2bd4a4db0ba87ba6eb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92cf604f5b9ffd06c0b8d2bd4a4db0ba87ba6eb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92cf604f5b9ffd06c0b8d2bd4a4db0ba87ba6eb9"}], "stats": {"total": 176, "additions": 176, "deletions": 0}, "files": [{"sha": "dfd47ba49f6453d0a18f5c1edf796ec6815c782d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 176, "deletions": 0, "changes": 176, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7052523f64dee02643b14c514620db456b639cb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7052523f64dee02643b14c514620db456b639cb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f7052523f64dee02643b14c514620db456b639cb", "patch": "@@ -34,6 +34,182 @@\n \tcallers.\n \t(do_tlink): Check lderrout as well as ldout.\n \n+2005-03-31  Caroline Tice  <ctice@apple.com>\n+\n+\t* Makefile.in (varasm.o): Add basic-block.h to list of requirements.\n+\t(bb-reorder.o): Add errors.h to list of requirements.\n+\t(STAGEFEEDBACK_FLAGS_TO_PASS): Add -freorder-blocks-and-partition to\n+\tprofiledbootstrap flags.\n+\t* bb-reorder.c (errors.h): Add new include.\n+\t(struct bbro_basic_block_data_def): Add new field, in_trace.\n+\t(add_unlikely_executed_notes):  Remove function.\n+\t(mark_bb_for_unlikely_executed_section): Remove function.\n+\t(insert_section_boundary_note): New function.\n+\t(verify_hot_cold_block_grouping): New function.\n+\t(push_to_next_round_p): Remove variables and tests that push all\n+\tcold blocks to last round.\n+\t(find_traces): Remove code that added extra round of trace finding\n+\twhen doing partitioning.\n+\t(find_traces_1_round) :  Remove variable last_round;  add code to \n+\tupdate new struct field, in_trace; correct trace_length where it was \n+\tincorrect before (after call to copy_bb); change code that pushed all \n+\tcold blocks to last round. Instead verify that all blocks going into \n+\ta trace belong in the same partition.\n+\t(connect_traces): Modify to connect the traces in two passes, if the\n+\tfunction contains both hot and cold blocks.  The first pass connects \n+\tall the traces for blocks in the partition that the first block in \n+\tthe function belongs to; the second pass connnects all the traces \n+\tcontaining blocks that belong in the other partition.\n+\t(find_rarely_executed_basic_blocks_and_crossing_edges):  Remove\n+\tcode that automatically put the first block in a function into the\n+\thot partition if the function had any hot blocks.\n+\t(fix_crossing_unconditional_branches): Check number of succ edges \n+\tbefore attempting to get one.\n+\t(fix_edges_for_rarely_executed_code):  Update comment describing\n+\tfunction.\n+\t(reorder_basic_blocks):  Add code to initialize new field (in_trace);\n+\tremove call to add_unlikely_executed_notes; add call to \n+\tverify_hot_cold_block_grouping.\n+\t(duplicate_computed_gotos): Don't change computed goto if it's a \n+\tcrossing edge.\n+\t(partition_hot_cold_basic_blocks):  Update function comment.\n+\t* cfgcleanup.c (try_simplify_condjump): Remove redundacy from \n+\tcondition.\n+\t(try_forward_edges): Likewise.\n+\t(merge_blocks_move_predecessor_nojumps): Likewise.\n+\t(merge_blocks_move_successor_nojumps): Likewise.\n+\t(merge_blocks_move): Likewise.\n+\t(try_crossjump_bb): Likewise.\n+\t* cfglayout.c (update_unlikely_executed_notes): Remove function.\n+\t(fixup_reorder_chain): Remove code for adding UNLIKELY_EXECUTED_CODE\n+\tnotes to cold bb's; remove call to update_unlikely_executed_notes.\n+\t(duplicate_insn_chain):  change NOTE_INSN_UNLIKELY_EXECUTED_CODE to\n+\tNOTE_INSN_SWITCH_TEXT_SECTIONS.\n+\t* cfglayout.h (scan_ahead_for_unlikely_executed_note): Remove\n+\tfunction declaration.\n+\t* cfgrtl.c (can_delete_note_p): Remove UNLIKELY_EXECUTED_CODE note\n+\tfrom consideration.\n+\t(rtl_can_merge_blocks): Remove redundancy from condition.\n+\t(try_redirect_by_replacing_jump): Likewise.\n+\t(force_nonfallthru_and_redirect): Remove code for adding\n+\tUNLIKELY_EXECUTED_CODE notes to cold bb's.\n+\t(commit_one_edge_insertion): Likewise.\n+\t(cfg_layout_can_merge_blocks_p): Remove redundancy from condition.\n+\t* dbxout.c (FORCE_TEXT): Replace function_section with \n+\tcurrent_function_section.\n+\t(struct dbx_debug_h): Add do_nothing function for new debug_hooks\n+\tfunction, switch_text_section.\n+\t(struct xcoff_debug): Likewise.\n+\t(dbxout_function_end): Add code to put out label diffs for both\n+\thot and cold sections.\n+\t* debug.c (struct do_nothing_debug_hooks): Add do_nothing function\n+\tfor new debug_hooks funciton, switch_text_section..\n+\t* debug.h (struct gcc_debug_hooks):  Add new function to debug_hooks,\n+\tswitch_text_section.\n+\t* dwarf2out.c (struct dw_fde_struct):  Add five new fields: \n+\tdw_fde_hot_section_label, dw_fde_hot_section_end_label, \n+\tdw_fde_unlikely_section_label, dw_fde_unlikely_section_end_label and \n+\tdw_fde_switched_sections.\n+\t(output_call_frame_info):  Add test to see if function switches text\n+\tsections in the middle; if so, use appropriate extra hot and cold \n+\tsection labels to compute size deltas for the hot and cold sections.\n+\t(dwarf2out_begin_prologue): Add code to initialize new fields in \n+\tdw_fde_struct.\n+\t(dwarf2out_switch_text_section): New function (invoked through \n+\tdebug_hook); updates new fields in dw_fde_struct appropriately and\n+\tincrements separate_line_info_table_in_use.\n+\t(dwarf2_debug_hooks): Initialize switch_text_section function to be\n+\tdwarf2out_switch_text_section.\n+\t(struct var_loc_node): Add new field, section_label.\n+\t(output_aranges): Add code to check whether in hot or cold section and\n+\tuse the appropriate label in calculating deltas.\n+\t(output_ranges): Likewise.\n+\t(output_line_info): Add code to check which section we're in and\n+\tuse appropriate hot/cold label.\n+\t(add_location_or_constant_value_attribute): Likewise.\n+\t(gen_subprogam_die): Modify arange attributes to use correct labels.\n+\t(dwarf2out_begin_block): Change call to function_section into call to\n+\tcurrent_function_section.\n+\t(dwarf2out_end_block): Likewise.\n+\t(dwarf2out_source_line): Likewise.\n+\t(dwarf2out_var_location): Add code to check whether in hot or cold \n+\tsection and use the appropriate label.\n+\t* except.c (output_function_exception_table): Change call to \n+\tfunction_section into call to current_function_section.\n+\t* final.c (profile_function): Likewise.\n+\t(scan_ahead_for_unlikely_executed_note): Remove function.\n+\t(final_scan_insn):  Remove calls to \n+\tscan_ahead_for_unlikely_executed_note, and related code for switching \n+\tto cold section, except for the single time \n+\tNOTE_INSN_SWITCH_TEXT_SECTIONS may be encountered;  add calls to \n+\tdebug_hooks->switch_text_sections; replace appropriate calls to \n+\tfunction_section with calls to current_function_section.\n+\t* ifcvt.c (find_if_case_1): Remove redundancy from condition, add \n+\ttest_bb to condition.\n+\t(find_if_case_2): Likewise.\n+\t* insn-notes.def: Change NOTE_INSN_UNLIKELY_EXECUTED_CODE to\n+\tNOTE_INSN_SWITCH_TEXT_SECTIONS.  Update comment appropriately.\n+\t* opts.c (decode_options): Change warning about hot/cold partitioning\n+\twith exceptionss to inform (so as not to cause bootstrap failures);\n+\tremove warning about partitioning with DWARF debug info.\n+\t* output.h (current_function_section): Add new function decl.\n+\t(insert_section_boundary_note): Likewise.\n+\t(enum in_section): Move this declaration here from varasm.c.\n+\t(unlikely_section_label): Likewise.\n+\t(unlikely_text_section_name): Likewise.\n+\t(last_text_section_name): New global variable.\n+\t(last_text_section): Likewise.\n+\t(hot_section_label): Likewise.\n+\t(hot_section_end_label): Likewise.\n+\t(cold_section_end_label): Likewise.\n+\t* passes.c (rest_of_handle_final): Free unlikely_text_section_name.\n+\t* print-rtl.c (print_rtx): Change NOTE_INSN_UNLIKELY_EXECUTED_CODE\n+\tto NOTE_INSN_SWITCH_TEXT_SECTIONS.\n+\t* reg-stack.c (emit_swap_insn): Remove UNLIKELY_EXECUTED_CODE note \n+\tinsn from consideration.\n+\t* sdbout.c (sdb_debug_hooks): Add do_nothing for new function, \n+\tswitch_text_section.\n+\t* varasm.c (basic-block.h): Add new include.\n+\t(unlikely_section_label_printed): Remove global variable.\n+\t(unlikely_section_label): Make global variable not be static any more.\n+\t(unlikely_text_section_name): Likewise.\n+\t(hot_section_end_label): New global variable (not static)\n+\t(first_function_block_is_cold): Likewise.\n+\t(hot_section_label): Likewise.\n+\t(cold_section_end_label): Likewise..\n+\t(last_text_section): New global variable, not static.\n+\t(last_text_section_name): New global variable, not static.\n+\t(initialize_cold_section_name): New function.\n+\t(enum in_section): Move declaration to output.h.\n+\t(text_section): Update last_text_section.\n+\t(unlikely_text_section): Replace code to determine cold section name \n+\twith call to initialize_cold_section_name; Add code to update \n+\tlast_text_section; remove code for printing out label.\n+\t(named_section_real): Add code to update last_text_section and \n+\tlast_text_section_name as appropriate.\n+\t(function_section): Change test for 'unlikely' to depend on\n+\tfirst_function_block_is_cold (moved old test to \n+        current_function_section).\n+\t(current_function_section): New function.\n+\t(assemble_start_function): Move code that frees \n+\tunlikely_text_section_name; initialize hot_section_end_label; \n+\tprint hot and cold section labels at the start of the function; \n+\tset first_function_block_is_cold, if appropriate; initialize l\n+\tast_text_section; add call to insert_section_boundary_note.\n+\t(assemble_end_function):  Add code to write out hot and cold section\n+\tend labels.\n+\t*vmsdbgout.c (vmsdbg_debug_hooks): Add do_nothing for new function,\n+\tswitch_text_section.\n+\t* config/darwin.c (machopic_select_section): Replace incorrect \n+\tfunction in base_funs; update reloc for cold sections if necessary.\n+\t* config/darwin.h (SECTION_FUNCTION):  Add code to update \n+\tlast_text_section if appropriate.\n+\t(text_unlikely_section): Remove.\n+\t* config/sparc/sparc.c (sparc_output_deferred_case_vectors): Likewise.\n+\t* config/stormy16/stormy16.c (stormy_16_output_addr_vec): Likewise.\n+\t* config/xtensa/xtensa.c (override_options): Turn off hot/cold\n+\tpartitioning for this architecture.\n+\n 2005-03-31  Olivier Hainque  <hainque@adacore.com>\n \n         * dwarf2out.c (dwarf2out_frame_finish): Honor DWARF2_FRAME_INFO"}]}