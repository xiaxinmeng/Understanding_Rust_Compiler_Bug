{"sha": "046e4e367e33c781229e0f33b936f8c64aa25dc1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ2ZTRlMzY3ZTMzYzc4MTIyOWUwZjMzYjkzNmY4YzY0YWEyNWRjMQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-05-07T21:14:48Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-05-07T21:14:48Z"}, "message": "stmt.c (force_label_rtx): New function, based on logic formerly found in expand_expr.\n\n\t* stmt.c (force_label_rtx): New function, based on logic\n\tformerly found in expand_expr.\n\t* expr.h: Prototype it.\n\t* expr.c (expand_expr <LABEL_DECL>): Use force_label_rtx if\n\tappropriate.\n\t* varasm.c (decode_addr_const <LABEL_DECL>): Use force_label_rtx.\n\n\t* print-tree.c (debug_tree): Free the table after we're done\n\twith it.  Use putc.\n\ntreelang:\n\t* Make-lang.in: Set -Wno-error for treelang/lex.o.\n\nFrom-SVN: r66579", "tree": {"sha": "3614f193205349c343ee4e569d08b222253384a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3614f193205349c343ee4e569d08b222253384a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/046e4e367e33c781229e0f33b936f8c64aa25dc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/046e4e367e33c781229e0f33b936f8c64aa25dc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/046e4e367e33c781229e0f33b936f8c64aa25dc1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/046e4e367e33c781229e0f33b936f8c64aa25dc1/comments", "author": null, "committer": null, "parents": [{"sha": "9d70d418dbe366666be1ec6501d93cf2b661e1a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d70d418dbe366666be1ec6501d93cf2b661e1a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d70d418dbe366666be1ec6501d93cf2b661e1a0"}], "stats": {"total": 94, "additions": 66, "deletions": 28}, "files": [{"sha": "2dc768dbf07cae46638fe39a99ba07f06f939c66", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/046e4e367e33c781229e0f33b936f8c64aa25dc1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/046e4e367e33c781229e0f33b936f8c64aa25dc1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=046e4e367e33c781229e0f33b936f8c64aa25dc1", "patch": "@@ -1,9 +1,21 @@\n+2003-05-07  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* stmt.c (force_label_rtx): New function, based on logic\n+\tformerly found in expand_expr.\n+\t* expr.h: Prototype it.\n+\t* expr.c (expand_expr <LABEL_DECL>): Use force_label_rtx if\n+\tappropriate.\n+\t* varasm.c (decode_addr_const <LABEL_DECL>): Use force_label_rtx.\n+\n+\t* print-tree.c (debug_tree): Free the table after we're done\n+\twith it.  Use putc.\n+\n 2003-05-07  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * config/rs6000/spe.h: Reverse arguments for __ev_subfw.\n-        Unreverse arguments for __ev_subw.\n+\t* config/rs6000/spe.h: Reverse arguments for __ev_subfw.\n+\tUnreverse arguments for __ev_subw.\n \n-        * config/rs6000/spe.md (evsubfw): Reverse arguments of assembly.\n+\t* config/rs6000/spe.md (evsubfw): Reverse arguments of assembly.\n \n 2003-05-07  Nick Clifton  <nickc@redhat.com>\n \n@@ -69,13 +81,13 @@\n \n 2003-05-06  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * config/rs6000/linuxspe.h: New file.\n+\t* config/rs6000/linuxspe.h: New file.\n \n-        * config.gcc: Add powerpc-*-linux-gnuspe* target.\n+\t* config.gcc: Add powerpc-*-linux-gnuspe* target.\n \n 2003-05-06  Richard Henderson  <rth@redhat.com>\n \n-\t* unwind-dw2.c (uw_update_context_1): Only set cfa as sp if \n+\t* unwind-dw2.c (uw_update_context_1): Only set cfa as sp if\n \tprevious frame didn't save sp.  Clear sp for next frame.\n \t(uw_install_context_1): Honor saved sp from frame.\n "}, {"sha": "9f1c330bdf1619ebd01e6262039347ace0206954", "filename": "gcc/expr.c", "status": "modified", "additions": 9, "deletions": 17, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/046e4e367e33c781229e0f33b936f8c64aa25dc1/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/046e4e367e33c781229e0f33b936f8c64aa25dc1/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=046e4e367e33c781229e0f33b936f8c64aa25dc1", "patch": "@@ -6753,25 +6753,17 @@ expand_expr (exp, target, tmode, modifier)\n     case LABEL_DECL:\n       {\n \ttree function = decl_function_context (exp);\n-\t/* Handle using a label in a containing function.  */\n-\tif (function != current_function_decl\n-\t    && function != inline_function_decl && function != 0)\n-\t  {\n-\t    struct function *p = find_function_data (function);\n-\t    p->expr->x_forced_labels\n-\t      = gen_rtx_EXPR_LIST (VOIDmode, label_rtx (exp),\n-\t\t\t\t   p->expr->x_forced_labels);\n-\t  }\n+\t/* Labels in containing functions, or labels used from initializers,\n+\t   must be forced.  */\n+\tif (modifier == EXPAND_INITIALIZER\n+\t    || (function != current_function_decl\n+\t\t&& function != inline_function_decl\n+\t\t&& function != 0))\n+\t  temp = force_label_rtx (exp);\n \telse\n-\t  {\n-\t    if (modifier == EXPAND_INITIALIZER)\n-\t      forced_labels = gen_rtx_EXPR_LIST (VOIDmode,\n-\t\t\t\t\t\t label_rtx (exp),\n-\t\t\t\t\t\t forced_labels);\n-\t  }\n+\t  temp = label_rtx (exp);\n \n-\ttemp = gen_rtx_MEM (FUNCTION_MODE,\n-\t\t\t    gen_rtx_LABEL_REF (Pmode, label_rtx (exp)));\n+\ttemp = gen_rtx_MEM (FUNCTION_MODE, gen_rtx_LABEL_REF (Pmode, temp));\n \tif (function != current_function_decl\n \t    && function != inline_function_decl && function != 0)\n \t  LABEL_REF_NONLOCAL_P (XEXP (temp, 0)) = 1;"}, {"sha": "64ee6f1225a636dbcc8be82a10d21fcba124bbb9", "filename": "gcc/expr.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/046e4e367e33c781229e0f33b936f8c64aa25dc1/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/046e4e367e33c781229e0f33b936f8c64aa25dc1/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=046e4e367e33c781229e0f33b936f8c64aa25dc1", "patch": "@@ -595,6 +595,11 @@ extern rtx expand_inline_function PARAMS ((tree, tree, rtx, int, tree, rtx));\n \n /* Return the CODE_LABEL rtx for a LABEL_DECL, creating it if necessary.  */\n extern rtx label_rtx PARAMS ((tree));\n+\n+/* As label_rtx, but additionally the label is placed on the forced label\n+   list of its containing function (i.e. it is treated as reachable even\n+   if how is not obvious).  */\n+extern rtx force_label_rtx PARAMS ((tree));\n #endif\n \n /* Indicate how an input argument register was promoted.  */"}, {"sha": "b06de1114569eba9b72d465548f632a8c5379d23", "filename": "gcc/print-tree.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/046e4e367e33c781229e0f33b936f8c64aa25dc1/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/046e4e367e33c781229e0f33b936f8c64aa25dc1/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=046e4e367e33c781229e0f33b936f8c64aa25dc1", "patch": "@@ -52,8 +52,9 @@ debug_tree (node)\n {\n   table = (struct bucket **) xcalloc (HASH_SIZE, sizeof (struct bucket *));\n   print_node (stderr, \"\", node, 0);\n+  free (table);\n   table = 0;\n-  fprintf (stderr, \"\\n\");\n+  putc ('\\n', stderr);\n }\n \n /* Print a node in brief fashion, with just the code, address and name.  */"}, {"sha": "4beb86eea96766d879a71aa316b7beb7755f68f3", "filename": "gcc/stmt.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/046e4e367e33c781229e0f33b936f8c64aa25dc1/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/046e4e367e33c781229e0f33b936f8c64aa25dc1/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=046e4e367e33c781229e0f33b936f8c64aa25dc1", "patch": "@@ -510,6 +510,29 @@ label_rtx (label)\n   return DECL_RTL (label);\n }\n \n+/* As above, but also put it on the forced-reference list of the\n+   function that contains it.  */\n+rtx\n+force_label_rtx (label)\n+     tree label;\n+{\n+  rtx ref = label_rtx (label);\n+  tree function = decl_function_context (label);\n+  struct function *p;\n+\n+  if (!function)\n+    abort ();\n+\n+  if (function != current_function_decl\n+      && function != inline_function_decl)\n+    p = find_function_data (function);\n+  else\n+    p = cfun;\n+\n+  p->expr->x_forced_labels = gen_rtx_EXPR_LIST (VOIDmode, ref,\n+\t\t\t\t\t\tp->expr->x_forced_labels);\n+  return ref;\n+}\n \n /* Add an unconditional jump to LABEL as the next sequential instruction.  */\n "}, {"sha": "4ea22aeab8a3d455ef18f15e83a85a788a9e2923", "filename": "gcc/treelang/ChangeLog", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/046e4e367e33c781229e0f33b936f8c64aa25dc1/gcc%2Ftreelang%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/046e4e367e33c781229e0f33b936f8c64aa25dc1/gcc%2Ftreelang%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2FChangeLog?ref=046e4e367e33c781229e0f33b936f8c64aa25dc1", "patch": "@@ -1,3 +1,7 @@\n+2003-05-07  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* Make-lang.in: Set -Wno-error for treelang/lex.o.\n+\n 2003-05-06  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* Make-lang.in (treelang/tree1.o): Depends on input.h\n@@ -91,7 +95,7 @@\n \n 2003-03-01  Tim Josling  <tej@melbpc.org.au>\n \n-        Name clashes with rtl.h fixed.\n+\tName clashes with rtl.h fixed.\n \n \t* lex.l: Tokens PLUS, MINUS, RETURN changed to tl_PLUS tl_MINUS\n \ttl_RETURN.\n@@ -108,7 +112,7 @@\n \n 2003-02-23  Tim Josling  <tej@melbpc.org.au>\n \n-        Fix garbage collection, add more error checking, force GC always.\n+\tFix garbage collection, add more error checking, force GC always.\n \n \t* Make-lang.in (treelang/tree1.o): Depend on treelang/treetree.h\n \t(treelang/treetree.o): Depend on  treelang/parse.h"}, {"sha": "8f3885a2daf6e907586bc963ec4f619b79f0eece", "filename": "gcc/treelang/Make-lang.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/046e4e367e33c781229e0f33b936f8c64aa25dc1/gcc%2Ftreelang%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/046e4e367e33c781229e0f33b936f8c64aa25dc1/gcc%2Ftreelang%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2FMake-lang.in?ref=046e4e367e33c781229e0f33b936f8c64aa25dc1", "patch": "@@ -67,6 +67,8 @@ TREE_EXES = tree1$(exeext)\n treelang-warn = $(LOOSE_WARN) -pedantic -Wno-long-long -Wmissing-prototypes -Wmissing-declarations $(WERROR)\n # bison emits some unused static arrays (yytoknum)\n treelang/parse.o-warn = -Wno-error\n+# flex produces 'no previous prototype' warnings\n+treelang/lex.o-warn = -Wno-error\n \n #\f\n # Define the names for selecting treelang in LANGUAGES."}, {"sha": "ec8d60149a62d31e94f47028f7fbcb873bc30279", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/046e4e367e33c781229e0f33b936f8c64aa25dc1/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/046e4e367e33c781229e0f33b936f8c64aa25dc1/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=046e4e367e33c781229e0f33b936f8c64aa25dc1", "patch": "@@ -2088,8 +2088,7 @@ decode_addr_const (exp, value)\n \n     case LABEL_DECL:\n       x = gen_rtx_MEM (FUNCTION_MODE,\n-\t\t       gen_rtx_LABEL_REF (VOIDmode,\n-\t\t\t\t\t  label_rtx (TREE_OPERAND (exp, 0))));\n+\t\t       gen_rtx_LABEL_REF (VOIDmode, force_label_rtx (target)));\n       break;\n \n     case REAL_CST:"}]}