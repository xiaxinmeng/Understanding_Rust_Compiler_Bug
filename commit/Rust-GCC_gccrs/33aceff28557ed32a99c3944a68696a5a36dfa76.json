{"sha": "33aceff28557ed32a99c3944a68696a5a36dfa76", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzNhY2VmZjI4NTU3ZWQzMmE5OWMzOTQ0YTY4Njk2YTVhMzZkZmE3Ng==", "commit": {"author": {"name": "John Wehle", "email": "john@feith.com", "date": "2001-12-22T17:23:52Z"}, "committer": {"name": "John Wehle", "email": "wehle@gcc.gnu.org", "date": "2001-12-22T17:23:52Z"}, "message": "rtl.h (subreg_lsb): Declare.\n\n\t* rtl.h (subreg_lsb): Declare.\n\t* rtlanal.c (subreg_lsb): Implement.\n\nFrom-SVN: r48272", "tree": {"sha": "6bcb256bb7123d660768c9efef33482d5e05d5b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6bcb256bb7123d660768c9efef33482d5e05d5b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33aceff28557ed32a99c3944a68696a5a36dfa76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33aceff28557ed32a99c3944a68696a5a36dfa76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33aceff28557ed32a99c3944a68696a5a36dfa76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33aceff28557ed32a99c3944a68696a5a36dfa76/comments", "author": {"login": "jlwehle", "id": 46985578, "node_id": "MDQ6VXNlcjQ2OTg1NTc4", "avatar_url": "https://avatars.githubusercontent.com/u/46985578?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jlwehle", "html_url": "https://github.com/jlwehle", "followers_url": "https://api.github.com/users/jlwehle/followers", "following_url": "https://api.github.com/users/jlwehle/following{/other_user}", "gists_url": "https://api.github.com/users/jlwehle/gists{/gist_id}", "starred_url": "https://api.github.com/users/jlwehle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jlwehle/subscriptions", "organizations_url": "https://api.github.com/users/jlwehle/orgs", "repos_url": "https://api.github.com/users/jlwehle/repos", "events_url": "https://api.github.com/users/jlwehle/events{/privacy}", "received_events_url": "https://api.github.com/users/jlwehle/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d599b3fc8a66a32a79a91359985b295f81e62a4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d599b3fc8a66a32a79a91359985b295f81e62a4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d599b3fc8a66a32a79a91359985b295f81e62a4d"}], "stats": {"total": 49, "additions": 49, "deletions": 0}, "files": [{"sha": "99f7c5bf7b798aaa8ea51edcaffb5581b3cda276", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33aceff28557ed32a99c3944a68696a5a36dfa76/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33aceff28557ed32a99c3944a68696a5a36dfa76/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=33aceff28557ed32a99c3944a68696a5a36dfa76", "patch": "@@ -1,3 +1,8 @@\n+Sat Dec 22 12:20:20 EST 2001  John Wehle  (john@feith.com)\n+\n+\t* rtl.h (subreg_lsb): Declare.\n+\t* rtlanal.c (subreg_lsb): Implement.\n+\n Sat Dec 22 08:59:50 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* predict.c: Reformatting and minor cleanups."}, {"sha": "e4360d620d24567e274af218a37fb799f63ff426", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33aceff28557ed32a99c3944a68696a5a36dfa76/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33aceff28557ed32a99c3944a68696a5a36dfa76/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=33aceff28557ed32a99c3944a68696a5a36dfa76", "patch": "@@ -818,6 +818,7 @@ extern const char * const note_insn_name[NOTE_INSN_MAX - NOTE_INSN_BIAS];\n #define SUBREG_BYTE(RTX) XCUINT(RTX, 1, SUBREG)\n \n /* in rtlanal.c */\n+extern unsigned int subreg_lsb\t\tPARAMS ((rtx));\n extern unsigned int subreg_regno_offset \tPARAMS ((unsigned int, \n \t\t\t\t\t\t\t enum machine_mode, \n \t\t\t\t\t\t\t unsigned int, "}, {"sha": "b6056de14a1c4e79c59309347a09535844044e7a", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33aceff28557ed32a99c3944a68696a5a36dfa76/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33aceff28557ed32a99c3944a68696a5a36dfa76/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=33aceff28557ed32a99c3944a68696a5a36dfa76", "patch": "@@ -2881,6 +2881,49 @@ loc_mentioned_in_p (loc, in)\n   return 0;\n }\n \n+/* Given a subreg X, return the bit offset where the subreg begins\n+   (counting from the least significant bit of the reg).  */\n+\n+unsigned int\n+subreg_lsb (x)\n+     rtx x;\n+{\n+  enum machine_mode inner_mode = GET_MODE (SUBREG_REG (x));\n+  enum machine_mode mode = GET_MODE (x);\n+  unsigned int bitpos;\n+  unsigned int byte;\n+  unsigned int word;\n+\n+  /* A paradoxical subreg begins at bit position 0.  */\n+  if (GET_MODE_BITSIZE (mode) > GET_MODE_BITSIZE (inner_mode))\n+    return 0;\n+\n+  if (WORDS_BIG_ENDIAN != BYTES_BIG_ENDIAN)\n+    /* If the subreg crosses a word boundary ensure that\n+       it also begins and ends on a word boundary.  */\n+    if ((SUBREG_BYTE (x) % UNITS_PER_WORD\n+\t + GET_MODE_SIZE (mode)) > UNITS_PER_WORD\n+\t&& (SUBREG_BYTE (x) % UNITS_PER_WORD\n+\t    || GET_MODE_SIZE (mode) % UNITS_PER_WORD))\n+\tabort ();\n+\n+  if (WORDS_BIG_ENDIAN)\n+    word = (GET_MODE_SIZE (inner_mode)\n+\t    - (SUBREG_BYTE (x) + GET_MODE_SIZE (mode))) / UNITS_PER_WORD;\n+  else\n+    word = SUBREG_BYTE (x) / UNITS_PER_WORD;\n+  bitpos = word * BITS_PER_WORD;\n+\n+  if (BYTES_BIG_ENDIAN)\n+    byte = (GET_MODE_SIZE (inner_mode)\n+\t    - (SUBREG_BYTE (x) + GET_MODE_SIZE (mode))) % UNITS_PER_WORD;\n+  else\n+    byte = SUBREG_BYTE (x) % UNITS_PER_WORD;\n+  bitpos += byte * BITS_PER_UNIT;\n+\n+  return bitpos;\n+}\n+\n /* This function returns the regno offset of a subreg expression.\n    xregno - A regno of an inner hard subreg_reg (or what will become one).\n    xmode  - The mode of xregno."}]}