{"sha": "6d9c4c8386f1d11605d1c383f68d118be6aeea18", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQ5YzRjODM4NmYxZDExNjA1ZDFjMzgzZjY4ZDExOGJlNmFlZWExOA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2003-04-11T02:25:13Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2003-04-11T02:25:13Z"}, "message": "extend.texi (Template Instantiation): Refer to ISO standard, not Working Paper.\n\n2003-04-08  Jonathan Wakely  <redi@gcc.gnu.org>\n\n\t* doc/extend.texi (Template Instantiation): Refer to ISO standard,\n\tnot Working Paper.\n\t* doc/invoke.texi (C++ Dialect Options): Same.\n\nFrom-SVN: r65456", "tree": {"sha": "d6f719e546ba4474708a1697b68ad5dd31d90ad3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6f719e546ba4474708a1697b68ad5dd31d90ad3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d9c4c8386f1d11605d1c383f68d118be6aeea18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d9c4c8386f1d11605d1c383f68d118be6aeea18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d9c4c8386f1d11605d1c383f68d118be6aeea18", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d9c4c8386f1d11605d1c383f68d118be6aeea18/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc9150d3354d869a668b18fa6e29ae575aaac5e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc9150d3354d869a668b18fa6e29ae575aaac5e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc9150d3354d869a668b18fa6e29ae575aaac5e8"}], "stats": {"total": 26, "additions": 16, "deletions": 10}, "files": [{"sha": "b156338b9adc24d1aceb5956a8b04532d6eb9056", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d9c4c8386f1d11605d1c383f68d118be6aeea18/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d9c4c8386f1d11605d1c383f68d118be6aeea18/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6d9c4c8386f1d11605d1c383f68d118be6aeea18", "patch": "@@ -1,3 +1,9 @@\n+2003-04-08  Jonathan Wakely  <redi@gcc.gnu.org>\n+\n+\t* doc/extend.texi (Template Instantiation): Refer to ISO standard,\n+\tnot Working Paper.\n+\t* doc/invoke.texi (C++ Dialect Options): Same.\n+\n 2003-04-10  Zack Weinberg  <zack@codesourcery.com>\n \n \t* tree.c (tree_operand_check_failed): New function."}, {"sha": "701f5d4b11ca9c75e8cde271c7faab19281a6eb3", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d9c4c8386f1d11605d1c383f68d118be6aeea18/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d9c4c8386f1d11605d1c383f68d118be6aeea18/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=6d9c4c8386f1d11605d1c383f68d118be6aeea18", "patch": "@@ -7428,8 +7428,8 @@ compile it without @option{-fno-implicit-templates} so you get all of the\n instances required by your explicit instantiations (but not by any\n other files) without having to specify them as well.\n \n-g++ has extended the template instantiation syntax outlined in the\n-Working Paper to allow forward declaration of explicit instantiations\n+g++ has extended the template instantiation syntax given in the ISO\n+standard to allow forward declaration of explicit instantiations\n (with @code{extern}), instantiation of the compiler support data for a\n template class (i.e.@: the vtable) without instantiating any of its\n members (with @code{inline}), and instantiation of only the static data"}, {"sha": "c016eeb71e083b059a940ebaf1b2d62aae7d699c", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d9c4c8386f1d11605d1c383f68d118be6aeea18/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d9c4c8386f1d11605d1c383f68d118be6aeea18/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=6d9c4c8386f1d11605d1c383f68d118be6aeea18", "patch": "@@ -1281,14 +1281,14 @@ around bugs in the access control code.\n @item -fcheck-new\n @opindex fcheck-new\n Check that the pointer returned by @code{operator new} is non-null\n-before attempting to modify the storage allocated.  The current Working\n-Paper requires that @code{operator new} never return a null pointer, so\n-this check is normally unnecessary.\n-\n-An alternative to using this option is to specify that your\n-@code{operator new} does not throw any exceptions; if you declare it\n-@samp{throw()}, G++ will check the return value.  See also @samp{new\n-(nothrow)}.\n+before attempting to modify the storage allocated.  This check is\n+normally unnecessary because the C++ standard specifies that\n+@code{operator new} will only return @code{0} if it is declared\n+@samp{throw()}, in which case the compiler will always check the\n+return value even without this option.  In all other cases, when\n+@code{operator new} has a non-empty exception specification, memory\n+exhaustion is signalled by throwing @code{std::bad_alloc}.  See also\n+@samp{new (nothrow)}.\n \n @item -fconserve-space\n @opindex fconserve-space"}]}