{"sha": "b81ac2881e267c356ae502af92da39d9837939de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjgxYWMyODgxZTI2N2MzNTZhZTUwMmFmOTJkYTM5ZDk4Mzc5MzlkZQ==", "commit": {"author": {"name": "Paul Brook", "email": "paul@codesourcery.com", "date": "2006-02-16T15:14:23Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2006-02-16T15:14:23Z"}, "message": "reload1.c (emit_reload_insns): Invalidate dead input registers used for reloads.\n\n2005-02-16  Paul Brook  <paul@codesourcery.com>\n\n\t* reload1.c (emit_reload_insns): Invalidate dead input registers used\n\tfor reloads.\n\nFrom-SVN: r111137", "tree": {"sha": "e799e371d522806c73d0c4723e97a4e288ce8dfe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e799e371d522806c73d0c4723e97a4e288ce8dfe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b81ac2881e267c356ae502af92da39d9837939de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b81ac2881e267c356ae502af92da39d9837939de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b81ac2881e267c356ae502af92da39d9837939de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b81ac2881e267c356ae502af92da39d9837939de/comments", "author": null, "committer": null, "parents": [{"sha": "4035f24587ce1716adcdafadc5d4a1f7528ddf58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4035f24587ce1716adcdafadc5d4a1f7528ddf58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4035f24587ce1716adcdafadc5d4a1f7528ddf58"}], "stats": {"total": 22, "additions": 16, "deletions": 6}, "files": [{"sha": "cda729aa0fdc37e6e979257d32fd98f81808396c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b81ac2881e267c356ae502af92da39d9837939de/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b81ac2881e267c356ae502af92da39d9837939de/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b81ac2881e267c356ae502af92da39d9837939de", "patch": "@@ -1,3 +1,8 @@\n+2005-02-16  Paul Brook  <paul@codesourcery.com>\n+\n+\t* reload1.c (emit_reload_insns): Invalidate dead input registers used\n+\tfor reloads.\n+\n 2006-02-16  Bernd Schmidt  <bernd.schmidt@analog.com>\n \n \tPR rtl-optimization/25636"}, {"sha": "6746c78ed58de444be4932b3db1dbdf0ba8eb368", "filename": "gcc/reload1.c", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b81ac2881e267c356ae502af92da39d9837939de/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b81ac2881e267c356ae502af92da39d9837939de/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=b81ac2881e267c356ae502af92da39d9837939de", "patch": "@@ -7419,13 +7419,18 @@ emit_reload_insns (struct insn_chain *chain)\n       /* If a register gets output-reloaded from a non-spill register,\n \t that invalidates any previous reloaded copy of it.\n \t But forget_old_reloads_1 won't get to see it, because\n-\t it thinks only about the original insn.  So invalidate it here.  */\n-      if (i < 0 && rld[r].out != 0\n-\t  && (REG_P (rld[r].out)\n-\t      || (MEM_P (rld[r].out)\n+\t it thinks only about the original insn.  So invalidate it here.\n+\t Also do the same thing for RELOAD_OTHER constraints where the\n+\t output is discarded.  */\n+      if (i < 0 \n+\t  && ((rld[r].out != 0\n+\t       && (REG_P (rld[r].out)\n+\t\t   || (MEM_P (rld[r].out)\n+\t\t       && REG_P (rld[r].out_reg))))\n+\t      || (rld[r].out == 0 && rld[r].out_reg\n \t\t  && REG_P (rld[r].out_reg))))\n \t{\n-\t  rtx out = (REG_P (rld[r].out)\n+\t  rtx out = ((rld[r].out && REG_P (rld[r].out))\n \t\t     ? rld[r].out : rld[r].out_reg);\n \t  int nregno = REGNO (out);\n \t  if (nregno >= FIRST_PSEUDO_REGISTER)\n@@ -7501,7 +7506,7 @@ emit_reload_insns (struct insn_chain *chain)\n \t    }\n \t  else\n \t    {\n-\t      int num_regs = hard_regno_nregs[nregno][GET_MODE (rld[r].out)];\n+\t      int num_regs = hard_regno_nregs[nregno][GET_MODE (out)];\n \n \t      while (num_regs-- > 0)\n \t\treg_last_reload_reg[nregno + num_regs] = 0;"}]}