{"sha": "ddaad23e2f49a91ab59f87f31b01e57439a3d6df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGRhYWQyM2UyZjQ5YTkxYWI1OWY4N2YzMWIwMWU1NzQzOWEzZDZkZg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2020-11-21T20:34:02Z"}, "committer": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2020-11-21T20:34:02Z"}, "message": "Use OEP_MATCH_SIDE_EFFECTS in compare_ao_refs\n\n\t* tree-ssa-alias.c (ao_compare::compare_ao_refs,\n\tao_compare::hash_ao_ref): Use OEP_MATCH_SIDE_EFFECTS.", "tree": {"sha": "25d3276f54637f30638cc8c40bbbaf02e50817d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25d3276f54637f30638cc8c40bbbaf02e50817d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ddaad23e2f49a91ab59f87f31b01e57439a3d6df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddaad23e2f49a91ab59f87f31b01e57439a3d6df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddaad23e2f49a91ab59f87f31b01e57439a3d6df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddaad23e2f49a91ab59f87f31b01e57439a3d6df/comments", "author": null, "committer": null, "parents": [{"sha": "caf17f3afa83623c0f538f6c91c7699c4fdd5674", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/caf17f3afa83623c0f538f6c91c7699c4fdd5674", "html_url": "https://github.com/Rust-GCC/gccrs/commit/caf17f3afa83623c0f538f6c91c7699c4fdd5674"}], "stats": {"total": 9, "additions": 5, "deletions": 4}, "files": [{"sha": "311ce66892bba403531dfbade322fb5b9d9b842c", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddaad23e2f49a91ab59f87f31b01e57439a3d6df/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddaad23e2f49a91ab59f87f31b01e57439a3d6df/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=ddaad23e2f49a91ab59f87f31b01e57439a3d6df", "patch": "@@ -3985,11 +3985,12 @@ ao_compare::compare_ao_refs (ao_ref *ref1, ao_ref *ref2,\n \treturn SEMANTICS;\n \n       /* Now we can compare the address of actual memory access.  */\n-      if (!operand_equal_p (r1, r2, OEP_ADDRESS_OF))\n+      if (!operand_equal_p (r1, r2, OEP_ADDRESS_OF | OEP_MATCH_SIDE_EFFECTS))\n \treturn SEMANTICS;\n     }\n   /* For constant accesses we get more matches by comparing offset only.  */\n-  else if (!operand_equal_p (base1, base2, OEP_ADDRESS_OF))\n+  else if (!operand_equal_p (base1, base2,\n+\t\t\t     OEP_ADDRESS_OF | OEP_MATCH_SIDE_EFFECTS))\n     return SEMANTICS;\n \n   /* We can't simply use get_object_alignment_1 on the full\n@@ -4197,11 +4198,11 @@ ao_compare::hash_ao_ref (ao_ref *ref, bool lto_streaming_safe, bool tbaa,\n \t  r = TREE_OPERAND (r, 0);\n \t}\n       hash_operand (TYPE_SIZE (TREE_TYPE (ref->ref)), hstate, 0);\n-      hash_operand (r, hstate, OEP_ADDRESS_OF);\n+      hash_operand (r, hstate, OEP_ADDRESS_OF | OEP_MATCH_SIDE_EFFECTS);\n     }\n   else\n     {\n-      hash_operand (tbase, hstate, OEP_ADDRESS_OF);\n+      hash_operand (tbase, hstate, OEP_ADDRESS_OF | OEP_MATCH_SIDE_EFFECTS);\n       hstate.add_poly_int (ref->offset);\n       hstate.add_poly_int (ref->size);\n       hstate.add_poly_int (ref->max_size);"}]}