{"sha": "8d33eae8913eb827d595808416a3d27cffedbf56", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQzM2VhZTg5MTNlYjgyN2Q1OTU4MDg0MTZhM2QyN2NmZmVkYmY1Ng==", "commit": {"author": {"name": "Thomas Preud'homme", "email": "thomas.preudhomme@arm.com", "date": "2018-12-14T19:20:29Z"}, "committer": {"name": "Thomas Preud'homme", "email": "thopre01@gcc.gnu.org", "date": "2018-12-14T19:20:29Z"}, "message": "ARM] Improve robustness of -mslow-flash-data\n\nCurrent code to handle -mslow-flash-data in machine description files\nsuffers from a number of issues which this patch fixes:\n\n1) The insn_and_split in vfp.md to load a generic floating-point\nconstant via GPR first and move it to VFP register are guarded by\n!reload_completed which is forbidden explicitely in the GCC internals\ndocumentation section 17.2 point 3;\n\n2) A number of testcase in the testsuite ICEs under -mslow-flash-data\nwhen targeting the hardfloat ABI [1];\n\n3) Instructions performing load from literal pool are not disabled.\n\nThese problems are addressed by 2 separate actions:\n\n1) Making the splitters take a clobber and changing the expanders\naccordingly to generate a mov with clobber in cases where a literal\npool would be used. The splitter can thus be enabled after reload since\nit does not call gen_reg_rtx anymore;\n\n2) Adding new predicates and constraints to disable literal pool loads\nin existing instructions when -mslow-flash-data is in effect.\n\nThe patch also rework the splitter for DFmode slightly to generate an\nintermediate DI load instead of 2 intermediate SI loads, thus relying on\nthe existing DI splitters instead of redoing their job. At last, the\npatch adds some missing arm_fp_ok effective target to some of the\nslow-flash-data testcases.\n\n[1]\nc-c++-common/Wunused-var-3.c\ngcc.c-torture/compile/pr72771.c\ngcc.c-torture/compile/vector-5.c\ngcc.c-torture/compile/vector-6.c\ngcc.c-torture/execute/20030914-1.c\ngcc.c-torture/execute/20050316-1.c\ngcc.c-torture/execute/pr59643.c\ngcc.dg/builtin-tgmath-1.c\ngcc.dg/debug/pr55730.c\ngcc.dg/graphite/interchange-7.c\ngcc.dg/pr56890-2.c\ngcc.dg/pr68474.c\ngcc.dg/pr80286.c\ngcc.dg/torture/pr35227.c\ngcc.dg/torture/pr65077.c\ngcc.dg/torture/pr86363.c\ng++.dg/torture/pr81112.C\ng++.dg/torture/pr82985.C\ng++.dg/warn/Wunused-var-7.C\nand a lot more in libstdc++ in special_functions/*_comp_ellint_* and\nspecial_functions/*_ellint_* directories.\n\n2018-12-14  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n\n    gcc/\n    * config/arm/arm.md (arm_movdi): Split if -mslow-flash-data and\n    source is a constant that would be loaded by literal pool.\n    (movsf expander): Generate a no_literal_pool_sf_immediate insn if\n    -mslow-flash-data is present, targeting hardfloat ABI and source is a\n    float constant that cannot be loaded via vmov.\n    (movdf expander): Likewise but generate a no_literal_pool_df_immediate\n    insn.\n    (arm_movsf_soft_insn): Split if -mslow-flash-data and source is a\n    float constant that would be loaded by literal pool.\n    (softfloat constant movsf splitter): Splitter for the above case.\n    (movdf_soft_insn): Split if -mslow-flash-data and source is a float\n    constant that would be loaded by literal pool.\n    (softfloat constant movdf splitter): Splitter for the above case.\n    * config/arm/constraints.md (Pz): Document existing constraint.\n    (Ha): Define constraint.\n    (Tu): Likewise.\n    * config/arm/predicates.md (hard_sf_operand): New predicate.\n    (hard_df_operand): Likewise.\n    * config/arm/thumb2.md (thumb2_movsi_insn): Split if\n    -mslow-flash-data and constant would be loaded by literal pool.\n    * constant/arm/vfp.md (thumb2_movsi_vfp): Likewise and disable constant\n    load in VFP register.\n    (movdi_vfp): Likewise.\n    (thumb2_movsf_vfp): Use hard_sf_operand as predicate for source to\n    prevent match for a constant load if -mslow-flash-data and constant\n    cannot be loaded via vmov.  Adapt constraint accordingly by\n    using Ha instead of E for generic floating-point constant load.\n    (thumb2_movdf_vfp): Likewise using hard_df_operand predicate instead.\n    (no_literal_pool_df_immediate): Add a clobber to use as the\n    intermediate general purpose register and also enable it after reload\n    but disable it constant is a valid FP constant.  Add constraints and\n    generate a DI intermediate load rather than 2 SI loads.\n    (no_literal_pool_sf_immediate): Add a clobber to use as the\n    intermediate general purpose register and also enable it after\n    reload.\n\n2018-11-14  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n\n    gcc/testsuite/\n    * gcc.target/arm/thumb2-slow-flash-data-2.c: Require arm_fp_ok\n    effective target.\n    * gcc.target/arm/thumb2-slow-flash-data-3.c: Likewise.\n    * gcc.target/arm/thumb2-slow-flash-data-4.c: Likewise.\n    * gcc.target/arm/thumb2-slow-flash-data-5.c: Likewise.\n\nFrom-SVN: r267141", "tree": {"sha": "71f8d2adbe0f7da62b01e422e6c7c2859fb29649", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71f8d2adbe0f7da62b01e422e6c7c2859fb29649"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d33eae8913eb827d595808416a3d27cffedbf56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d33eae8913eb827d595808416a3d27cffedbf56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d33eae8913eb827d595808416a3d27cffedbf56", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d33eae8913eb827d595808416a3d27cffedbf56/comments", "author": {"login": "RoboTux", "id": 272327, "node_id": "MDQ6VXNlcjI3MjMyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/272327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RoboTux", "html_url": "https://github.com/RoboTux", "followers_url": "https://api.github.com/users/RoboTux/followers", "following_url": "https://api.github.com/users/RoboTux/following{/other_user}", "gists_url": "https://api.github.com/users/RoboTux/gists{/gist_id}", "starred_url": "https://api.github.com/users/RoboTux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RoboTux/subscriptions", "organizations_url": "https://api.github.com/users/RoboTux/orgs", "repos_url": "https://api.github.com/users/RoboTux/repos", "events_url": "https://api.github.com/users/RoboTux/events{/privacy}", "received_events_url": "https://api.github.com/users/RoboTux/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b2d02c4915192a8db57512818798789bc2a5438f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2d02c4915192a8db57512818798789bc2a5438f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2d02c4915192a8db57512818798789bc2a5438f"}], "stats": {"total": 284, "additions": 237, "deletions": 47}, "files": [{"sha": "3cacc25f273a2d4d33faa293bf538e8fa5fc362d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d33eae8913eb827d595808416a3d27cffedbf56/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d33eae8913eb827d595808416a3d27cffedbf56/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8d33eae8913eb827d595808416a3d27cffedbf56", "patch": "@@ -1,3 +1,41 @@\n+2018-12-14  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n+\t* config/arm/arm.md (arm_movdi): Split if -mslow-flash-data and\n+\tsource is a constant that would be loaded by literal pool.\n+\t(movsf expander): Generate a no_literal_pool_sf_immediate insn if\n+\t-mslow-flash-data is present, targeting hardfloat ABI and source is a\n+\tfloat constant that cannot be loaded via vmov.\n+\t(movdf expander): Likewise but generate a no_literal_pool_df_immediate\n+\tinsn.\n+\t(arm_movsf_soft_insn): Split if -mslow-flash-data and source is a\n+\tfloat constant that would be loaded by literal pool.\n+\t(softfloat constant movsf splitter): Splitter for the above case.\n+\t(movdf_soft_insn): Split if -mslow-flash-data and source is a float\n+\tconstant that would be loaded by literal pool.\n+\t(softfloat constant movdf splitter): Splitter for the above case.\n+\t* config/arm/constraints.md (Pz): Document existing constraint.\n+\t(Ha): Define constraint.\n+\t(Tu): Likewise.\n+\t* config/arm/predicates.md (hard_sf_operand): New predicate.\n+\t(hard_df_operand): Likewise.\n+\t* config/arm/thumb2.md (thumb2_movsi_insn): Split if\n+\t-mslow-flash-data and constant would be loaded by literal pool.\n+\t* constant/arm/vfp.md (thumb2_movsi_vfp): Likewise and disable constant\n+\tload in VFP register.\n+\t(movdi_vfp): Likewise.\n+\t(thumb2_movsf_vfp): Use hard_sf_operand as predicate for source to\n+\tprevent match for a constant load if -mslow-flash-data and constant\n+\tcannot be loaded via vmov.  Adapt constraint accordingly by\n+\tusing Ha instead of E for generic floating-point constant load.\n+\t(thumb2_movdf_vfp): Likewise using hard_df_operand predicate instead.\n+\t(no_literal_pool_df_immediate): Add a clobber to use as the\n+\tintermediate general purpose register and also enable it after reload\n+\tbut disable it constant is a valid FP constant.  Add constraints and\n+\tgenerate a DI intermediate load rather than 2 SI loads.\n+\t(no_literal_pool_sf_immediate): Add a clobber to use as the\n+\tintermediate general purpose register and also enable it after\n+\treload.\n+\n 2018-12-14  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/88474"}, {"sha": "6071264d28ba22089dce80f74df9237f99a0804d", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 85, "deletions": 4, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d33eae8913eb827d595808416a3d27cffedbf56/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d33eae8913eb827d595808416a3d27cffedbf56/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=8d33eae8913eb827d595808416a3d27cffedbf56", "patch": "@@ -5831,6 +5831,11 @@\n     case 1:\n     case 2:\n       return \\\"#\\\";\n+    case 3:\n+      /* Cannot load it directly, split to load it via MOV / MOVT.  */\n+      if (!MEM_P (operands[1]) && arm_disable_literal_pool)\n+\treturn \\\"#\\\";\n+      /* Fall through.  */\n     default:\n       return output_move_double (operands, true, NULL);\n     }\n@@ -6940,6 +6945,20 @@\n \t     operands[1] = force_reg (SFmode, operands[1]);\n         }\n     }\n+\n+  /* Cannot load it directly, generate a load with clobber so that it can be\n+     loaded via GPR with MOV / MOVT.  */\n+  if (arm_disable_literal_pool\n+      && (REG_P (operands[0]) || SUBREG_P (operands[0]))\n+      && CONST_DOUBLE_P (operands[1])\n+      && TARGET_HARD_FLOAT\n+      && !vfp3_const_double_rtx (operands[1]))\n+    {\n+      rtx clobreg = gen_reg_rtx (SFmode);\n+      emit_insn (gen_no_literal_pool_sf_immediate (operands[0], operands[1],\n+\t\t\t\t\t\t   clobreg));\n+      DONE;\n+    }\n   \"\n )\n \n@@ -6967,10 +6986,19 @@\n    && TARGET_SOFT_FLOAT\n    && (!MEM_P (operands[0])\n        || register_operand (operands[1], SFmode))\"\n-  \"@\n-   mov%?\\\\t%0, %1\n-   ldr%?\\\\t%0, %1\\\\t%@ float\n-   str%?\\\\t%1, %0\\\\t%@ float\"\n+{\n+  switch (which_alternative)\n+    {\n+    case 0: return \\\"mov%?\\\\t%0, %1\\\";\n+    case 1:\n+      /* Cannot load it directly, split to load it via MOV / MOVT.  */\n+      if (!MEM_P (operands[1]) && arm_disable_literal_pool)\n+\treturn \\\"#\\\";\n+      return \\\"ldr%?\\\\t%0, %1\\\\t%@ float\\\";\n+    case 2: return \\\"str%?\\\\t%1, %0\\\\t%@ float\\\";\n+    default: gcc_unreachable ();\n+    }\n+}\n   [(set_attr \"predicable\" \"yes\")\n    (set_attr \"type\" \"mov_reg,load_4,store_4\")\n    (set_attr \"arm_pool_range\" \"*,4096,*\")\n@@ -6979,6 +7007,21 @@\n    (set_attr \"thumb2_neg_pool_range\" \"*,0,*\")]\n )\n \n+;; Splitter for the above.\n+(define_split\n+  [(set (match_operand:SF 0 \"s_register_operand\")\n+\t(match_operand:SF 1 \"const_double_operand\"))]\n+  \"arm_disable_literal_pool && TARGET_SOFT_FLOAT\"\n+  [(const_int 0)]\n+{\n+  long buf;\n+  real_to_target (&buf, CONST_DOUBLE_REAL_VALUE (operands[1]), SFmode);\n+  rtx cst = gen_int_mode (buf, SImode);\n+  emit_move_insn (simplify_gen_subreg (SImode, operands[0], SFmode, 0), cst);\n+  DONE;\n+}\n+)\n+\n (define_expand \"movdf\"\n   [(set (match_operand:DF 0 \"general_operand\" \"\")\n \t(match_operand:DF 1 \"general_operand\" \"\"))]\n@@ -6997,6 +7040,21 @@\n \t    operands[1] = force_reg (DFmode, operands[1]);\n         }\n     }\n+\n+  /* Cannot load it directly, generate a load with clobber so that it can be\n+     loaded via GPR with MOV / MOVT.  */\n+  if (arm_disable_literal_pool\n+      && (REG_P (operands[0]) || SUBREG_P (operands[0]))\n+      && CONSTANT_P (operands[1])\n+      && TARGET_HARD_FLOAT\n+      && !arm_const_double_rtx (operands[1])\n+      && !(TARGET_VFP_DOUBLE && vfp3_const_double_rtx (operands[1])))\n+    {\n+      rtx clobreg = gen_reg_rtx (DFmode);\n+      emit_insn (gen_no_literal_pool_df_immediate (operands[0], operands[1],\n+\t\t\t\t\t\t   clobreg));\n+      DONE;\n+    }\n   \"\n )\n \n@@ -7056,6 +7114,11 @@\n     case 1:\n     case 2:\n       return \\\"#\\\";\n+    case 3:\n+      /* Cannot load it directly, split to load it via MOV / MOVT.  */\n+      if (!MEM_P (operands[1]) && arm_disable_literal_pool)\n+\treturn \\\"#\\\";\n+      /* Fall through.  */\n     default:\n       return output_move_double (operands, true, NULL);\n     }\n@@ -7067,6 +7130,24 @@\n    (set_attr \"arm_neg_pool_range\" \"*,*,*,1004,*\")\n    (set_attr \"thumb2_neg_pool_range\" \"*,*,*,0,*\")]\n )\n+\n+;; Splitter for the above.\n+(define_split\n+  [(set (match_operand:DF 0 \"s_register_operand\")\n+\t(match_operand:DF 1 \"const_double_operand\"))]\n+  \"arm_disable_literal_pool && TARGET_SOFT_FLOAT\"\n+  [(const_int 0)]\n+{\n+  long buf[2];\n+  int order = BYTES_BIG_ENDIAN ? 1 : 0;\n+  real_to_target (buf, CONST_DOUBLE_REAL_VALUE (operands[1]), DFmode);\n+  unsigned HOST_WIDE_INT ival = zext_hwi (buf[order], 32);\n+  ival |= (zext_hwi (buf[1 - order], 32) << 32);\n+  rtx cst = gen_int_mode (ival, DImode);\n+  emit_move_insn (simplify_gen_subreg (DImode, operands[0], DFmode, 0), cst);\n+  DONE;\n+}\n+)\n \f\n \n ;; load- and store-multiple insns"}, {"sha": "657e540816bdd82cddd23059dea2be19df7eb1bb", "filename": "gcc/config/arm/constraints.md", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d33eae8913eb827d595808416a3d27cffedbf56/gcc%2Fconfig%2Farm%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d33eae8913eb827d595808416a3d27cffedbf56/gcc%2Fconfig%2Farm%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fconstraints.md?ref=8d33eae8913eb827d595808416a3d27cffedbf56", "patch": "@@ -31,9 +31,10 @@\n ;; 'H' was previously used for FPA.\n \n ;; The following multi-letter normal constraints have been used:\n-;; in ARM/Thumb-2 state: Da, Db, Dc, Dd, Dn, Dl, DL, Do, Dv, Dy, Di, Dt, Dp, Dz\n+;; in ARM/Thumb-2 state: Da, Db, Dc, Dd, Dn, Dl, DL, Do, Dv, Dy, Di, Dt, Dp,\n+;;\t\t\t Dz, Tu\n ;; in Thumb-1 state: Pa, Pb, Pc, Pd, Pe\n-;; in Thumb-2 state: Pj, PJ, Ps, Pt, Pu, Pv, Pw, Px, Py\n+;; in Thumb-2 state: Ha, Pj, PJ, Ps, Pt, Pu, Pv, Pw, Px, Py, Pz\n ;; in all states: Pf\n \n ;; The following memory constraints have been used:\n@@ -234,6 +235,12 @@\n  (and (match_code \"const_double\")\n       (match_test \"TARGET_32BIT && arm_const_double_rtx (op)\")))\n \n+(define_constraint \"Ha\"\n+  \"@internal In ARM / Thumb-2 a float constant iff literal pools are allowed.\"\n+  (and (match_code \"const_double\")\n+       (match_test \"satisfies_constraint_E (op)\")\n+       (match_test \"!arm_disable_literal_pool\")))\n+\n (define_constraint \"Dz\"\n  \"@internal\n   In ARM/Thumb-2 state a vector of constant zeros.\"\n@@ -351,6 +358,12 @@\n        (match_test \"TARGET_32BIT\n \t\t    && vfp3_const_double_for_bits (op) > 0\")))\n \n+(define_constraint \"Tu\"\n+  \"@internal In ARM / Thumb-2 an integer constant iff literal pools are\n+   allowed.\"\n+  (and (match_test \"CONSTANT_P (op)\")\n+       (match_test \"!arm_disable_literal_pool\")))\n+\n (define_register_constraint \"Ts\" \"(arm_restrict_it) ? LO_REGS : GENERAL_REGS\"\n  \"For arm_restrict_it the core registers @code{r0}-@code{r7}.  GENERAL_REGS otherwise.\")\n "}, {"sha": "b73021f72dceb71afe1d20fa4fc09ca3ec6cb4da", "filename": "gcc/config/arm/predicates.md", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d33eae8913eb827d595808416a3d27cffedbf56/gcc%2Fconfig%2Farm%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d33eae8913eb827d595808416a3d27cffedbf56/gcc%2Fconfig%2Farm%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpredicates.md?ref=8d33eae8913eb827d595808416a3d27cffedbf56", "patch": "@@ -473,6 +473,24 @@\n        (and (match_code \"reg,subreg,mem\")\n \t    (match_operand 0 \"nonimmediate_soft_df_operand\"))))\n \n+;; Predicate for thumb2_movsf_vfp.  Compared to general_operand, this\n+;; forbids constant loaded via literal pool iff literal pools are disabled.\n+(define_predicate \"hard_sf_operand\"\n+  (and (match_operand 0 \"general_operand\")\n+       (ior (not (match_code \"const_double\"))\n+\t    (not (match_test \"arm_disable_literal_pool\"))\n+\t    (match_test \"satisfies_constraint_Dv (op)\"))))\n+\n+;; Predicate for thumb2_movdf_vfp.  Compared to soft_df_operand used in\n+;; movdf_soft_insn, this forbids constant loaded via literal pool iff\n+;; literal pools are disabled.\n+(define_predicate \"hard_df_operand\"\n+  (and (match_operand 0 \"soft_df_operand\")\n+       (ior (not (match_code \"const_double\"))\n+\t    (not (match_test \"arm_disable_literal_pool\"))\n+\t    (match_test \"satisfies_constraint_Dy (op)\")\n+\t    (match_test \"satisfies_constraint_G (op)\"))))\n+\n (define_special_predicate \"load_multiple_operation\"\n   (match_code \"parallel\")\n {"}, {"sha": "727ceb9b37957efbc7ab8809f57e8825deb6b1df", "filename": "gcc/config/arm/thumb2.md", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d33eae8913eb827d595808416a3d27cffedbf56/gcc%2Fconfig%2Farm%2Fthumb2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d33eae8913eb827d595808416a3d27cffedbf56/gcc%2Fconfig%2Farm%2Fthumb2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fthumb2.md?ref=8d33eae8913eb827d595808416a3d27cffedbf56", "patch": "@@ -252,16 +252,26 @@\n   \"TARGET_THUMB2 && !TARGET_IWMMXT && !TARGET_HARD_FLOAT\n    && (   register_operand (operands[0], SImode)\n        || register_operand (operands[1], SImode))\"\n-  \"@\n-   mov%?\\\\t%0, %1\n-   mov%?\\\\t%0, %1\n-   mov%?\\\\t%0, %1\n-   mvn%?\\\\t%0, #%B1\n-   movw%?\\\\t%0, %1\n-   ldr%?\\\\t%0, %1\n-   ldr%?\\\\t%0, %1\n-   str%?\\\\t%1, %0\n-   str%?\\\\t%1, %0\"\n+{\n+  switch (which_alternative)\n+    {\n+    case 0:\n+    case 1:\n+    case 2:\n+      return \\\"mov%?\\\\t%0, %1\\\";\n+    case 3: return \\\"mvn%?\\\\t%0, #%B1\\\";\n+    case 4: return \\\"movw%?\\\\t%0, %1\\\";\n+    case 5:\n+    case 6:\n+      /* Cannot load it directly, split to load it via MOV / MOVT.  */\n+      if (!MEM_P (operands[1]) && arm_disable_literal_pool)\n+\treturn \\\"#\\\";\n+      return \\\"ldr%?\\\\t%0, %1\\\";\n+    case 7:\n+    case 8: return \\\"str%?\\\\t%1, %0\\\";\n+    default: gcc_unreachable ();\n+    }\n+}\n   [(set_attr \"type\" \"mov_reg,mov_imm,mov_imm,mvn_imm,mov_imm,load_4,load_4,store_4,store_4\")\n    (set_attr \"length\" \"2,4,2,4,4,4,4,4,4\")\n    (set_attr \"predicable\" \"yes\")"}, {"sha": "f3d4f30cb53d82e2ffd2c4fcaad2cc873d97c24b", "filename": "gcc/config/arm/vfp.md", "status": "modified", "additions": 49, "deletions": 31, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d33eae8913eb827d595808416a3d27cffedbf56/gcc%2Fconfig%2Farm%2Fvfp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d33eae8913eb827d595808416a3d27cffedbf56/gcc%2Fconfig%2Farm%2Fvfp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvfp.md?ref=8d33eae8913eb827d595808416a3d27cffedbf56", "patch": "@@ -259,7 +259,7 @@\n ;; arm_restrict_it.\n (define_insn \"*thumb2_movsi_vfp\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rk,r,l,r,r, l,*hk,m, *m,*t, r,*t,*t,  *Uv\")\n-\t(match_operand:SI 1 \"general_operand\"\t   \"rk,I,Py,K,j,mi,*mi,l,*hk, r,*t,*t,*Uvi,*t\"))]\n+\t(match_operand:SI 1 \"general_operand\"\t   \"rk,I,Py,K,j,mi,*mi,l,*hk, r,*t,*t,*UvTu,*t\"))]\n   \"TARGET_THUMB2 && TARGET_HARD_FLOAT\n    && (   s_register_operand (operands[0], SImode)\n        || s_register_operand (operands[1], SImode))\"\n@@ -276,6 +276,9 @@\n       return \\\"movw%?\\\\t%0, %1\\\";\n     case 5:\n     case 6:\n+      /* Cannot load it directly, split to load it via MOV / MOVT.  */\n+      if (!MEM_P (operands[1]) && arm_disable_literal_pool)\n+\treturn \\\"#\\\";\n       return \\\"ldr%?\\\\t%0, %1\\\";\n     case 7:\n     case 8:\n@@ -305,7 +308,7 @@\n \n (define_insn \"*movdi_vfp\"\n   [(set (match_operand:DI 0 \"nonimmediate_di_operand\" \"=r,r,r,r,q,q,m,w,!r,w,w, Uv\")\n-       (match_operand:DI 1 \"di_operand\"              \"r,rDa,Db,Dc,mi,mi,q,r,w,w,Uvi,w\"))]\n+\t(match_operand:DI 1 \"di_operand\"\t      \"r,rDa,Db,Dc,mi,mi,q,r,w,w,UvTu,w\"))]\n   \"TARGET_32BIT && TARGET_HARD_FLOAT\n    && (   register_operand (operands[0], DImode)\n        || register_operand (operands[1], DImode))\n@@ -321,6 +324,10 @@\n       return \\\"#\\\";\n     case 4:\n     case 5:\n+      /* Cannot load it directly, split to load it via MOV / MOVT.  */\n+      if (!MEM_P (operands[1]) && arm_disable_literal_pool)\n+\treturn \\\"#\\\";\n+      /* Fall through.  */\n     case 6:\n       return output_move_double (operands, true, NULL);\n     case 7:\n@@ -587,7 +594,7 @@\n \n (define_insn \"*thumb2_movsf_vfp\"\n   [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=t,?r,t, t  ,Uv,r ,m,t,r\")\n-\t(match_operand:SF 1 \"general_operand\"\t   \" ?r,t,Dv,UvE,t, mE,r,t,r\"))]\n+\t(match_operand:SF 1 \"hard_sf_operand\"\t   \" ?r,t,Dv,UvHa,t, mHa,r,t,r\"))]\n   \"TARGET_THUMB2 && TARGET_HARD_FLOAT\n    && (   s_register_operand (operands[0], SFmode)\n        || s_register_operand (operands[1], SFmode))\"\n@@ -676,7 +683,7 @@\n \n (define_insn \"*thumb2_movdf_vfp\"\n   [(set (match_operand:DF 0 \"nonimmediate_soft_df_operand\" \"=w,?r,w ,w,w  ,Uv,r ,m,w,r\")\n-\t(match_operand:DF 1 \"soft_df_operand\"\t\t   \" ?r,w,Dy,G,UvF,w, mF,r, w,r\"))]\n+\t(match_operand:DF 1 \"hard_df_operand\"\t\t   \" ?r,w,Dy,G,UvHa,w, mHa,r, w,r\"))]\n   \"TARGET_THUMB2 && TARGET_HARD_FLOAT\n    && (   register_operand (operands[0], DFmode)\n        || register_operand (operands[1], DFmode))\"\n@@ -1983,39 +1990,50 @@\n ;; Support for xD (single precision only) variants.\n ;; fmrrs, fmsrr\n \n-;; Split an immediate DF move to two immediate SI moves.\n+;; Load a DF immediate via GPR (where combinations of MOV and MOVT can be used)\n+;; and then move it into a VFP register.\n (define_insn_and_split \"no_literal_pool_df_immediate\"\n-  [(set (match_operand:DF 0 \"s_register_operand\" \"\")\n-\t(match_operand:DF 1 \"const_double_operand\" \"\"))]\n-  \"TARGET_THUMB2 && arm_disable_literal_pool\n-  && !(TARGET_HARD_FLOAT && TARGET_VFP_DOUBLE\n-       && vfp3_const_double_rtx (operands[1]))\"\n+  [(set (match_operand:DF 0 \"s_register_operand\" \"=w\")\n+\t(match_operand:DF 1 \"const_double_operand\" \"F\"))\n+   (clobber (match_operand:DF 2 \"s_register_operand\" \"=r\"))]\n+  \"arm_disable_literal_pool\n+   && TARGET_HARD_FLOAT\n+   && !arm_const_double_rtx (operands[1])\n+   && !(TARGET_VFP_DOUBLE && vfp3_const_double_rtx (operands[1]))\"\n   \"#\"\n-  \"&& !reload_completed\"\n-  [(set (subreg:SI (match_dup 1) 0) (match_dup 2))\n-   (set (subreg:SI (match_dup 1) 4) (match_dup 3))\n-   (set (match_dup 0) (match_dup 1))]\n-  \"\n+  \"\"\n+  [(const_int 0)]\n+{\n   long buf[2];\n+  int order = BYTES_BIG_ENDIAN ? 1 : 0;\n   real_to_target (buf, CONST_DOUBLE_REAL_VALUE (operands[1]), DFmode);\n-  operands[2] = GEN_INT ((int) buf[0]);\n-  operands[3] = GEN_INT ((int) buf[1]);\n-  operands[1] = gen_reg_rtx (DFmode);\n-  \")\n+  unsigned HOST_WIDE_INT ival = zext_hwi (buf[order], 32);\n+  ival |= (zext_hwi (buf[1 - order], 32) << 32);\n+  rtx cst = gen_int_mode (ival, DImode);\n+  emit_move_insn (simplify_gen_subreg (DImode, operands[2], DFmode, 0), cst);\n+  emit_move_insn (operands[0], operands[2]);\n+  DONE;\n+}\n+)\n \n-;; Split an immediate SF move to one immediate SI move.\n+;; Load a SF immediate via GPR (where combinations of MOV and MOVT can be used)\n+;; and then move it into a VFP register.\n (define_insn_and_split \"no_literal_pool_sf_immediate\"\n-  [(set (match_operand:SF 0 \"s_register_operand\" \"\")\n-\t(match_operand:SF 1 \"const_double_operand\" \"\"))]\n-  \"TARGET_THUMB2 && arm_disable_literal_pool\n-  && !(TARGET_HARD_FLOAT && vfp3_const_double_rtx (operands[1]))\"\n+  [(set (match_operand:SF 0 \"s_register_operand\" \"=t\")\n+\t(match_operand:SF 1 \"const_double_operand\" \"E\"))\n+   (clobber (match_operand:SF 2 \"s_register_operand\" \"=r\"))]\n+  \"arm_disable_literal_pool\n+   && TARGET_HARD_FLOAT\n+   && !vfp3_const_double_rtx (operands[1])\"\n   \"#\"\n-  \"&& !reload_completed\"\n-  [(set (subreg:SI (match_dup 1) 0) (match_dup 2))\n-   (set (match_dup 0) (match_dup 1))]\n-  \"\n+  \"\"\n+  [(const_int 0)]\n+{\n   long buf;\n   real_to_target (&buf, CONST_DOUBLE_REAL_VALUE (operands[1]), SFmode);\n-  operands[2] = GEN_INT ((int) buf);\n-  operands[1] = gen_reg_rtx (SFmode);\n-  \")\n+  rtx cst = gen_int_mode (buf, SImode);\n+  emit_move_insn (simplify_gen_subreg (SImode, operands[2], SFmode, 0), cst);\n+  emit_move_insn (operands[0], operands[2]);\n+  DONE;\n+}\n+)"}, {"sha": "3717a5c7ed272fdf1b2968a765406852133635b9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d33eae8913eb827d595808416a3d27cffedbf56/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d33eae8913eb827d595808416a3d27cffedbf56/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8d33eae8913eb827d595808416a3d27cffedbf56", "patch": "@@ -1,3 +1,11 @@\n+2018-11-14  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n+\t* gcc.target/arm/thumb2-slow-flash-data-2.c: Require arm_fp_ok\n+\teffective target.\n+\t* gcc.target/arm/thumb2-slow-flash-data-3.c: Likewise.\n+\t* gcc.target/arm/thumb2-slow-flash-data-4.c: Likewise.\n+\t* gcc.target/arm/thumb2-slow-flash-data-5.c: Likewise.\n+\n 2018-12-14  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/88483"}, {"sha": "231243759cfe486c390ca27f10bd06177f60bd43", "filename": "gcc/testsuite/gcc.target/arm/thumb2-slow-flash-data-2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d33eae8913eb827d595808416a3d27cffedbf56/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb2-slow-flash-data-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d33eae8913eb827d595808416a3d27cffedbf56/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb2-slow-flash-data-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb2-slow-flash-data-2.c?ref=8d33eae8913eb827d595808416a3d27cffedbf56", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target arm_cortex_m } */\n /* { dg-require-effective-target arm_thumb2_ok } */\n+/* { dg-require-effective-target arm_fp_ok } */\n /* { dg-skip-if \"avoid conflicts with multilib options\" { *-*-* } { \"-mcpu=*\" } { \"-mcpu=cortex-m4\" \"-mcpu=cortex-m7\" } } */\n /* { dg-skip-if \"do not override -mfloat-abi\" { *-*-* } { \"-mfloat-abi=*\" } { \"-mfloat-abi=hard\" } } */\n /* { dg-skip-if \"-mslow-flash-data and -mword-relocations incompatible\" { *-*-* } { \"-mword-relocations\" } } */"}, {"sha": "27e72ec20863866acdc5e7fea632bc6880678dfd", "filename": "gcc/testsuite/gcc.target/arm/thumb2-slow-flash-data-3.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d33eae8913eb827d595808416a3d27cffedbf56/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb2-slow-flash-data-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d33eae8913eb827d595808416a3d27cffedbf56/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb2-slow-flash-data-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb2-slow-flash-data-3.c?ref=8d33eae8913eb827d595808416a3d27cffedbf56", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target arm_cortex_m } */\n /* { dg-require-effective-target arm_thumb2_ok } */\n+/* { dg-require-effective-target arm_fp_ok } */\n /* { dg-skip-if \"avoid conflicts with multilib options\" { *-*-* } { \"-mcpu=*\" } { \"-mcpu=cortex-m4\" \"-mcpu=cortex-m7\" } } */\n /* { dg-skip-if \"do not override -mfloat-abi\" { *-*-* } { \"-mfloat-abi=*\" } { \"-mfloat-abi=hard\" } } */\n /* { dg-skip-if \"-mslow-flash-data and -mword-relocations incompatible\" { *-*-* } { \"-mword-relocations\" } } */"}, {"sha": "8dbe87a1e68d5eb2edfd8259948988fbe0658ced", "filename": "gcc/testsuite/gcc.target/arm/thumb2-slow-flash-data-4.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d33eae8913eb827d595808416a3d27cffedbf56/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb2-slow-flash-data-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d33eae8913eb827d595808416a3d27cffedbf56/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb2-slow-flash-data-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb2-slow-flash-data-4.c?ref=8d33eae8913eb827d595808416a3d27cffedbf56", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target arm_cortex_m } */\n /* { dg-require-effective-target arm_thumb2_ok } */\n+/* { dg-require-effective-target arm_fp_ok } */\n /* { dg-skip-if \"avoid conflicts with multilib options\" { *-*-* } { \"-mcpu=*\" } { \"-mcpu=cortex-m4\" \"-mcpu=cortex-m7\" } } */\n /* { dg-skip-if \"do not override -mfloat-abi\" { *-*-* } { \"-mfloat-abi=*\" } { \"-mfloat-abi=hard\" } } */\n /* { dg-skip-if \"-mslow-flash-data and -mword-relocations incompatible\" { *-*-* } { \"-mword-relocations\" } } */"}, {"sha": "b98eb7624e42b5a7f4a11c604c7d2826339bcfd5", "filename": "gcc/testsuite/gcc.target/arm/thumb2-slow-flash-data-5.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d33eae8913eb827d595808416a3d27cffedbf56/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb2-slow-flash-data-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d33eae8913eb827d595808416a3d27cffedbf56/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb2-slow-flash-data-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb2-slow-flash-data-5.c?ref=8d33eae8913eb827d595808416a3d27cffedbf56", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target arm_cortex_m } */\n /* { dg-require-effective-target arm_thumb2_ok } */\n+/* { dg-require-effective-target arm_fp_ok } */\n /* { dg-skip-if \"avoid conflicts with multilib options\" { *-*-* } { \"-mcpu=*\" } { \"-mcpu=cortex-m4\" \"-mcpu=cortex-m7\" } } */\n /* { dg-skip-if \"do not override -mfloat-abi\" { *-*-* } { \"-mfloat-abi=*\" } { \"-mfloat-abi=hard\" } } */\n /* { dg-skip-if \"-mslow-flash-data and -mword-relocations incompatible\" { *-*-* } { \"-mword-relocations\" } } */"}]}