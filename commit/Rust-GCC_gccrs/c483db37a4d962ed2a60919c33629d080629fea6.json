{"sha": "c483db37a4d962ed2a60919c33629d080629fea6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQ4M2RiMzdhNGQ5NjJlZDJhNjA5MTljMzM2MjlkMDgwNjI5ZmVhNg==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2017-12-14T15:02:58Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2017-12-14T15:02:58Z"}, "message": "[SFN] next/prev_nonnote_insn_bb are no more, even for ports\n\nThe patch that added _nondebug to next_ and prev_nonnote_insn_bb\nfailed to find and adjust uses within config.  Fixed.\n\nfor  gcc/ChangeLog\n\n\tPR bootstrap/83396\n\t* config/arc/arc.c (hwloop_optimize): Skip debug insns.\n\t* config/sh/sh-protos.h (sh_find_set_of_reg): Adjust.\n\t* config/sh/sh.c: Skip debug insns besides notes.\n\t* config/sh/sh.md: Likewise.\n\t* config/sh/sh_treg_combine.cc: Likewise.\n\t* config/sh/sync.md: Likewise.\n\nFrom-SVN: r255638", "tree": {"sha": "d197847224d3b2161b2c48565ccbb892a7090c13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d197847224d3b2161b2c48565ccbb892a7090c13"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c483db37a4d962ed2a60919c33629d080629fea6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c483db37a4d962ed2a60919c33629d080629fea6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c483db37a4d962ed2a60919c33629d080629fea6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c483db37a4d962ed2a60919c33629d080629fea6/comments", "author": null, "committer": null, "parents": [{"sha": "aadd37c8a055e072475fe257681a95dc9b0c8849", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aadd37c8a055e072475fe257681a95dc9b0c8849", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aadd37c8a055e072475fe257681a95dc9b0c8849"}], "stats": {"total": 77, "additions": 45, "deletions": 32}, "files": [{"sha": "4d7f67ccb8f2fdddf7263518f0637c8268ea4f69", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c483db37a4d962ed2a60919c33629d080629fea6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c483db37a4d962ed2a60919c33629d080629fea6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c483db37a4d962ed2a60919c33629d080629fea6", "patch": "@@ -1,3 +1,13 @@\n+2017-12-14  Alexandre Oliva <aoliva@redhat.com>\n+\n+\tPR bootstrap/83396\n+\t* config/arc/arc.c (hwloop_optimize): Skip debug insns.\n+\t* config/sh/sh-protos.h (sh_find_set_of_reg): Adjust.\n+\t* config/sh/sh.c: Skip debug insns besides notes.\n+\t* config/sh/sh.md: Likewise.\n+\t* config/sh/sh_treg_combine.cc: Likewise.\n+\t* config/sh/sync.md: Likewise.\n+\n 2017-12-14  Tom de Vries  <tom@codesourcery.com>\n \n \t* doc/sourcebuild.texi (Effective-Target Keywords, Other attributes):"}, {"sha": "9974a1f999b54c408d2f2612112fb96bfd35a0f6", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c483db37a4d962ed2a60919c33629d080629fea6/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c483db37a4d962ed2a60919c33629d080629fea6/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=c483db37a4d962ed2a60919c33629d080629fea6", "patch": "@@ -7499,7 +7499,7 @@ hwloop_optimize (hwloop_info loop)\n                  && NOTE_KIND (entry_after) != NOTE_INSN_CALL_ARG_LOCATION))\n         entry_after = NEXT_INSN (entry_after);\n #endif\n-      entry_after = next_nonnote_insn_bb (entry_after);\n+      entry_after = next_nonnote_nondebug_insn_bb (entry_after);\n \n       gcc_assert (entry_after);\n       emit_insn_before (seq, entry_after);"}, {"sha": "938487501f307fdd9674554df9e1c49531c3905c", "filename": "gcc/config/sh/sh-protos.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c483db37a4d962ed2a60919c33629d080629fea6/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c483db37a4d962ed2a60919c33629d080629fea6/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh-protos.h?ref=c483db37a4d962ed2a60919c33629d080629fea6", "patch": "@@ -120,10 +120,10 @@ struct set_of_reg\n   rtx set_src;\n };\n \n-/* Given a reg rtx and a start insn, try to find the insn that sets the\n-   specified reg by using the specified insn stepping function, such as \n-   'prev_nonnote_insn_bb'.  When the insn is found, try to extract the rtx\n-   of the reg set.  */\n+/* Given a reg rtx and a start insn, try to find the insn that sets\n+   the specified reg by using the specified insn stepping function,\n+   such as 'prev_nonnote_nondebug_insn_bb'.  When the insn is found,\n+   try to extract the rtx of the reg set.  */\n template <typename F> inline set_of_reg\n sh_find_set_of_reg (rtx reg, rtx_insn* insn, F stepfunc,\n \t\t    bool ignore_reg_reg_copies = false)"}, {"sha": "85cc77b873a56fc1da002a180a6003ae08d01a8a", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c483db37a4d962ed2a60919c33629d080629fea6/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c483db37a4d962ed2a60919c33629d080629fea6/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=c483db37a4d962ed2a60919c33629d080629fea6", "patch": "@@ -11896,8 +11896,8 @@ sh_is_logical_t_store_expr (rtx op, rtx_insn* insn)\n \n       else\n \t{\n-\t  set_of_reg op_set = sh_find_set_of_reg (ops[i], insn,\n-\t\t\t\t\t\t  prev_nonnote_insn_bb);\n+\t  set_of_reg op_set = sh_find_set_of_reg\n+\t    (ops[i], insn, prev_nonnote_nondebug_insn_bb);\n \t  if (op_set.set_src == NULL_RTX)\n \t    continue;\n \n@@ -11929,7 +11929,8 @@ sh_try_omit_signzero_extend (rtx extended_op, rtx_insn* insn)\n   if (GET_MODE (extended_op) != SImode)\n     return NULL_RTX;\n \n-  set_of_reg s = sh_find_set_of_reg (extended_op, insn, prev_nonnote_insn_bb);\n+  set_of_reg s = sh_find_set_of_reg (extended_op, insn,\n+\t\t\t\t     prev_nonnote_nondebug_insn_bb);\n   if (s.set_src == NULL_RTX)\n     return NULL_RTX;\n \n@@ -11965,10 +11966,10 @@ sh_split_movrt_negc_to_movt_xor (rtx_insn* curr_insn, rtx operands[])\n   if (!can_create_pseudo_p ())\n     return false;\n \n-  set_of_reg t_before_negc = sh_find_set_of_reg (get_t_reg_rtx (), curr_insn,\n-\t\t\t\t\t\t prev_nonnote_insn_bb);\n-  set_of_reg t_after_negc = sh_find_set_of_reg (get_t_reg_rtx (), curr_insn,\n-\t\t\t\t\t\tnext_nonnote_insn_bb);\n+  set_of_reg t_before_negc = sh_find_set_of_reg\n+    (get_t_reg_rtx (), curr_insn, prev_nonnote_nondebug_insn_bb);\n+  set_of_reg t_after_negc = sh_find_set_of_reg\n+    (get_t_reg_rtx (), curr_insn, next_nonnote_nondebug_insn_bb);\n \n   if (t_before_negc.set_rtx != NULL_RTX && t_after_negc.set_rtx != NULL_RTX\n       && rtx_equal_p (t_before_negc.set_rtx, t_after_negc.set_rtx)\n@@ -12009,8 +12010,8 @@ sh_find_extending_set_of_reg (rtx reg, rtx_insn* curr_insn)\n      Also try to look through the first extension that we hit.  There are some\n      cases, where a zero_extend is followed an (implicit) sign_extend, and it\n      fails to see the sign_extend.  */\n-  sh_extending_set_of_reg result =\n-\tsh_find_set_of_reg (reg, curr_insn, prev_nonnote_insn_bb, true);\n+  sh_extending_set_of_reg result = sh_find_set_of_reg\n+    (reg, curr_insn, prev_nonnote_nondebug_insn_bb, true);\n \n   if (result.set_src != NULL)\n     {"}, {"sha": "eb39b24e06da6a5f4d00ed9d74e6c90cbcdf2729", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c483db37a4d962ed2a60919c33629d080629fea6/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c483db37a4d962ed2a60919c33629d080629fea6/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=c483db37a4d962ed2a60919c33629d080629fea6", "patch": "@@ -848,7 +848,7 @@\n   /* FIXME: Maybe also search the predecessor basic blocks to catch\n      more cases.  */\n   set_of_reg op = sh_find_set_of_reg (operands[0], curr_insn,\n-\t\t\t\t      prev_nonnote_insn_bb);\n+\t\t\t\t      prev_nonnote_nondebug_insn_bb);\n \n   if (op.set_src != NULL && GET_CODE (op.set_src) == AND\n       && !sh_insn_operands_modified_between_p (op.insn, op.insn, curr_insn))\n@@ -939,7 +939,7 @@\n   if (dump_file)\n     fprintf (dump_file, \"cmpgesi_t: trying to optimize for const_int 0\\n\");\n \n-  rtx_insn* i = next_nonnote_insn_bb (curr_insn);\n+  rtx_insn* i = next_nonnote_nondebug_insn_bb (curr_insn);\n \n   if (dump_file)\n     {\n@@ -3094,7 +3094,7 @@\n \t  && ! sh_dynamicalize_shift_p (shift_count))\n \t{\n \t  if (prev_set_t_insn == NULL)\n-\t    prev_set_t_insn = prev_nonnote_insn_bb (curr_insn);\n+\t    prev_set_t_insn = prev_nonnote_nondebug_insn_bb (curr_insn);\n \n \t  /* Skip the nott insn, which was probably inserted by the splitter\n \t     of *rotcr_neg_t.  Don't use one of the recog functions\n@@ -3106,7 +3106,8 @@\n \t      if (GET_CODE (pat) == SET\n \t\t  && t_reg_operand (XEXP (pat, 0), SImode)\n \t\t  && negt_reg_operand (XEXP (pat, 1), SImode))\n-\t      prev_set_t_insn = prev_nonnote_insn_bb (prev_set_t_insn);\n+\t\tprev_set_t_insn = prev_nonnote_nondebug_insn_bb\n+\t\t  (prev_set_t_insn);\n \t    }\n \n \t  if (! (prev_set_t_insn != NULL_RTX\n@@ -3194,7 +3195,7 @@\n       if (sh_ashlsi_clobbers_t_reg_p (shift_count)\n \t  && ! sh_dynamicalize_shift_p (shift_count))\n \t{\n-\t  prev_set_t_insn = prev_nonnote_insn_bb (curr_insn);\n+\t  prev_set_t_insn = prev_nonnote_nondebug_insn_bb (curr_insn);\n \n \t  /* Skip the nott insn, which was probably inserted by the splitter\n \t     of *rotcl_neg_t.  Don't use one of the recog functions\n@@ -3206,7 +3207,8 @@\n \t      if (GET_CODE (pat) == SET\n \t\t  && t_reg_operand (XEXP (pat, 0), SImode)\n \t\t  && negt_reg_operand (XEXP (pat, 1), SImode))\n-\t      prev_set_t_insn = prev_nonnote_insn_bb (prev_set_t_insn);\n+\t\tprev_set_t_insn = prev_nonnote_nondebug_insn_bb\n+\t\t  (prev_set_t_insn);\n \t    }\n \n \t  if (! (prev_set_t_insn != NULL_RTX\n@@ -4423,7 +4425,7 @@\n    When we're here, the not:SI pattern obviously has been matched already\n    and we only have to see whether the following insn is the left shift.  */\n \n-  rtx_insn *i = next_nonnote_insn_bb (curr_insn);\n+  rtx_insn *i = next_nonnote_nondebug_insn_bb (curr_insn);\n   if (i == NULL_RTX || !NONJUMP_INSN_P (i))\n     FAIL;\n \n@@ -10751,8 +10753,8 @@\n {\n   rtx t_reg = get_t_reg_rtx ();\n \n-  for (rtx_insn* i = prev_nonnote_insn_bb (curr_insn); i != NULL;\n-       i = prev_nonnote_insn_bb (i))\n+  for (rtx_insn* i = prev_nonnote_nondebug_insn_bb (curr_insn); i != NULL;\n+       i = prev_nonnote_nondebug_insn_bb (i))\n     {\n       if (!INSN_P (i) || DEBUG_INSN_P (i))\n \tcontinue;"}, {"sha": "bae81af3126e7194a3da32182b1b0b106684daea", "filename": "gcc/config/sh/sh_treg_combine.cc", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c483db37a4d962ed2a60919c33629d080629fea6/gcc%2Fconfig%2Fsh%2Fsh_treg_combine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c483db37a4d962ed2a60919c33629d080629fea6/gcc%2Fconfig%2Fsh%2Fsh_treg_combine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh_treg_combine.cc?ref=c483db37a4d962ed2a60919c33629d080629fea6", "patch": "@@ -291,7 +291,7 @@ find_set_of_reg_bb (rtx reg, rtx_insn *insn)\n     return result;\n \n   for (result.insn = insn; result.insn != NULL;\n-       result.insn = prev_nonnote_insn_bb (result.insn))\n+       result.insn = prev_nonnote_nondebug_insn_bb (result.insn))\n     {\n       if (BARRIER_P (result.insn))\n \treturn result;\n@@ -748,9 +748,8 @@ sh_treg_combine::record_set_of_reg (rtx reg, rtx_insn *start_insn,\n       // Now see how the ccreg was set.\n       // For now it must be in the same BB.\n       log_msg (\"tracing ccreg\\n\");\n-      new_entry.setcc =\n-\t  find_set_of_reg_bb (m_ccreg,\n-\t\t\t      prev_nonnote_insn_bb (new_entry.cstore.insn));\n+      new_entry.setcc = find_set_of_reg_bb\n+\t(m_ccreg, prev_nonnote_nondebug_insn_bb (new_entry.cstore.insn));\n \n       // If cstore was found but setcc was not found continue anyway, as\n       // for some of the optimization types the setcc is irrelevant.\n@@ -1353,7 +1352,8 @@ sh_treg_combine::try_optimize_cbranch (rtx_insn *insn)\n   //   (set (reg ccreg) (eq (reg) (const_int 0)))\n   // The testing insn could also be outside of the current basic block, but\n   // for now we limit the search to the current basic block.\n-  trace.setcc = find_set_of_reg_bb (m_ccreg, prev_nonnote_insn_bb (insn));\n+  trace.setcc = find_set_of_reg_bb\n+    (m_ccreg, prev_nonnote_nondebug_insn_bb (insn));\n \n   if (trace.setcc.set_src () == NULL_RTX)\n     log_return_void (\"could not find set of ccreg in current BB\\n\");\n@@ -1412,9 +1412,9 @@ sh_treg_combine::try_optimize_cbranch (rtx_insn *insn)\n   // If we find it here there's no point in checking other BBs.\n   trace.bb_entries.push_front (bb_entry (trace.bb ()));\n \n-  record_return_t res =\n-      record_set_of_reg (trace_reg, prev_nonnote_insn_bb (trace.setcc.insn),\n-\t\t\t trace.bb_entries.front ());\n+  record_return_t res = record_set_of_reg\n+    (trace_reg, prev_nonnote_nondebug_insn_bb (trace.setcc.insn),\n+     trace.bb_entries.front ());\n \n   if (res == other_set_found)\n     log_return_void (\"other set found - aborting trace\\n\");"}, {"sha": "9f158bd935336fe7d6761a3bd13d6b5ba9a19747", "filename": "gcc/config/sh/sync.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c483db37a4d962ed2a60919c33629d080629fea6/gcc%2Fconfig%2Fsh%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c483db37a4d962ed2a60919c33629d080629fea6/gcc%2Fconfig%2Fsh%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsync.md?ref=c483db37a4d962ed2a60919c33629d080629fea6", "patch": "@@ -294,7 +294,7 @@\n   /* FIXME: Sometimes the 'expected value' operand is not propagated as\n      immediate value.  See PR 64974.  */\n   set_of_reg op2 = sh_find_set_of_reg (operands[2], curr_insn,\n-\t\t\t\t       prev_nonnote_insn_bb);\n+\t\t\t\t       prev_nonnote_nondebug_insn_bb);\n   if (op2.set_src != NULL && satisfies_constraint_I08 (op2.set_src))\n     {\n       rtx* r = &XVECEXP (XEXP (XVECEXP (PATTERN (curr_insn), 0, 0), 1), 0, 1);"}]}