{"sha": "7848054c68bad6e2aa40cb59f77cc99bd8448d52", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzg0ODA1NGM2OGJhZDZlMmFhNDBjYjU5Zjc3Y2M5OWJkODQ0OGQ1Mg==", "commit": {"author": {"name": "Andrew Benson", "email": "abenson@carnegiescience.edu", "date": "2020-02-10T17:59:34Z"}, "committer": {"name": "Andrew Benson", "email": "abenson@carnegiescience.edu", "date": "2020-02-10T17:59:34Z"}, "message": "Fix bogus duplicate attribute errors for submodule functions.\n\n        PR fortran/83113\n        * array.c: Do not attempt to set the array spec for a submodule\n        function symbol (as it has already been set in the corresponding\n        module procedure interface).\n        * symbol.c: Do not reject duplicate POINTER, ALLOCATABLE, or\n        DIMENSION attributes in declarations of a submodule function.\n        * gfortran.h: Add a macro that tests for a module procedure in a\n        submodule.\n        * gfortran.dg/pr83113.f90: New test.", "tree": {"sha": "c445cff040dd021e8ab81d9fd5d5e2e0139c03f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c445cff040dd021e8ab81d9fd5d5e2e0139c03f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7848054c68bad6e2aa40cb59f77cc99bd8448d52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7848054c68bad6e2aa40cb59f77cc99bd8448d52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7848054c68bad6e2aa40cb59f77cc99bd8448d52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7848054c68bad6e2aa40cb59f77cc99bd8448d52/comments", "author": {"login": "abensonca", "id": 7468651, "node_id": "MDQ6VXNlcjc0Njg2NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/7468651?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abensonca", "html_url": "https://github.com/abensonca", "followers_url": "https://api.github.com/users/abensonca/followers", "following_url": "https://api.github.com/users/abensonca/following{/other_user}", "gists_url": "https://api.github.com/users/abensonca/gists{/gist_id}", "starred_url": "https://api.github.com/users/abensonca/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abensonca/subscriptions", "organizations_url": "https://api.github.com/users/abensonca/orgs", "repos_url": "https://api.github.com/users/abensonca/repos", "events_url": "https://api.github.com/users/abensonca/events{/privacy}", "received_events_url": "https://api.github.com/users/abensonca/received_events", "type": "User", "site_admin": false}, "committer": {"login": "abensonca", "id": 7468651, "node_id": "MDQ6VXNlcjc0Njg2NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/7468651?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abensonca", "html_url": "https://github.com/abensonca", "followers_url": "https://api.github.com/users/abensonca/followers", "following_url": "https://api.github.com/users/abensonca/following{/other_user}", "gists_url": "https://api.github.com/users/abensonca/gists{/gist_id}", "starred_url": "https://api.github.com/users/abensonca/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abensonca/subscriptions", "organizations_url": "https://api.github.com/users/abensonca/orgs", "repos_url": "https://api.github.com/users/abensonca/repos", "events_url": "https://api.github.com/users/abensonca/events{/privacy}", "received_events_url": "https://api.github.com/users/abensonca/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0cc575e4d8b68b743e07da02a74733f9b5cb585a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cc575e4d8b68b743e07da02a74733f9b5cb585a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cc575e4d8b68b743e07da02a74733f9b5cb585a"}], "stats": {"total": 55, "additions": 50, "deletions": 5}, "files": [{"sha": "a2f45d216c28afbb3c6439c1d73d834b5ce9d279", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7848054c68bad6e2aa40cb59f77cc99bd8448d52/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7848054c68bad6e2aa40cb59f77cc99bd8448d52/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=7848054c68bad6e2aa40cb59f77cc99bd8448d52", "patch": "@@ -1,3 +1,15 @@\n+2020-02-10  Andrew Benson  <abensonca@gmail.com>\n+\n+        PR fortran/83113\n+        * array.c: Do not attempt to set the array spec for a submodule\n+        function symbol (as it has already been set in the corresponding\n+        module procedure interface).\n+        * symbol.c: Do not reject duplicate POINTER, ALLOCATABLE, or\n+        DIMENSION attributes in declarations of a submodule function.\n+        * gfortran.h: Add a macro that tests for a module procedure in a\n+        submodule.\n+        * gfortran.dg/pr83113.f90: New test.\n+\n 2020-02-03  Julian Brown  <julian@codesourcery.com>\n \t    Tobias Burnus  <tobias@codesourcery.com>\n "}, {"sha": "82b0eb39ca9a55569683b5ac42926859e99f039e", "filename": "gcc/fortran/array.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7848054c68bad6e2aa40cb59f77cc99bd8448d52/gcc%2Ffortran%2Farray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7848054c68bad6e2aa40cb59f77cc99bd8448d52/gcc%2Ffortran%2Farray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farray.c?ref=7848054c68bad6e2aa40cb59f77cc99bd8448d52", "patch": "@@ -23,6 +23,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"options.h\"\n #include \"gfortran.h\"\n+#include \"parse.h\"\n #include \"match.h\"\n #include \"constructor.h\"\n \n@@ -822,7 +823,6 @@ gfc_match_array_spec (gfc_array_spec **asp, bool match_dim, bool match_codim)\n   return MATCH_ERROR;\n }\n \n-\n /* Given a symbol and an array specification, modify the symbol to\n    have that array specification.  The error locus is needed in case\n    something goes wrong.  On failure, the caller must free the spec.  */\n@@ -831,10 +831,17 @@ bool\n gfc_set_array_spec (gfc_symbol *sym, gfc_array_spec *as, locus *error_loc)\n {\n   int i;\n-\n+  symbol_attribute *attr;\n+  \n   if (as == NULL)\n     return true;\n \n+  /* If the symbol corresponds to a submodule module procedure the array spec is\n+     already set, so do not attempt to set it again here. */\n+  attr = &sym->attr;\n+  if (gfc_submodule_procedure(attr))\n+    return true;\n+  \n   if (as->rank\n       && !gfc_add_dimension (&sym->attr, sym->name, error_loc))\n     return false;"}, {"sha": "96037629f5f07ecc6334304c2981e71c188cfebb", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7848054c68bad6e2aa40cb59f77cc99bd8448d52/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7848054c68bad6e2aa40cb59f77cc99bd8448d52/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=7848054c68bad6e2aa40cb59f77cc99bd8448d52", "patch": "@@ -2845,6 +2845,13 @@ bool gfc_insert_parameter_exprs (gfc_expr *, gfc_actual_arglist *);\n match gfc_get_pdt_instance (gfc_actual_arglist *, gfc_symbol **,\n \t\t\t    gfc_actual_arglist **);\n \n+\n+/* Given a symbol, test whether it is a module procedure in a submodule */\n+#define gfc_submodule_procedure(attr)\t\t\t\t     \\\n+  (gfc_state_stack->previous && gfc_state_stack->previous->previous  \\\n+   && gfc_state_stack->previous->previous->state == COMP_SUBMODULE   \\\n+   && attr->module_procedure)\n+\n /* scanner.c */\n void gfc_scanner_done_1 (void);\n void gfc_scanner_init_1 (void);"}, {"sha": "59f602d80d521263ec2e23102b3a450cf3b8e766", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7848054c68bad6e2aa40cb59f77cc99bd8448d52/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7848054c68bad6e2aa40cb59f77cc99bd8448d52/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=7848054c68bad6e2aa40cb59f77cc99bd8448d52", "patch": "@@ -1014,7 +1014,7 @@ gfc_add_allocatable (symbol_attribute *attr, locus *where)\n   if (check_used (attr, NULL, where))\n     return false;\n \n-  if (attr->allocatable)\n+  if (attr->allocatable && ! gfc_submodule_procedure(attr))\n     {\n       duplicate_attr (\"ALLOCATABLE\", where);\n       return false;\n@@ -1081,7 +1081,7 @@ gfc_add_dimension (symbol_attribute *attr, const char *name, locus *where)\n   if (check_used (attr, name, where))\n     return false;\n \n-  if (attr->dimension)\n+  if (attr->dimension && ! gfc_submodule_procedure(attr))\n     {\n       duplicate_attr (\"DIMENSION\", where);\n       return false;\n@@ -1208,7 +1208,8 @@ gfc_add_pointer (symbol_attribute *attr, locus *where)\n     return false;\n \n   if (attr->pointer && !(attr->if_source == IFSRC_IFBODY\n-      && !gfc_find_state (COMP_INTERFACE)))\n+      && !gfc_find_state (COMP_INTERFACE))\n+      && ! gfc_submodule_procedure(attr))\n     {\n       duplicate_attr (\"POINTER\", where);\n       return false;"}, {"sha": "7dbe8029d297693b99fd41197a5b80865a123f12", "filename": "gcc/testsuite/gfortran.dg/pr83113.f90", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7848054c68bad6e2aa40cb59f77cc99bd8448d52/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr83113.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7848054c68bad6e2aa40cb59f77cc99bd8448d52/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr83113.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr83113.f90?ref=7848054c68bad6e2aa40cb59f77cc99bd8448d52", "patch": "@@ -0,0 +1,18 @@\n+! { dg-do compile }\n+! PR fortran/83113\n+module mm\n+  implicit none\n+  interface\n+     module function c()\n+       integer, dimension(2)  :: c\n+     end function c\n+  end interface\n+end module mm\n+\n+submodule (mm) oo\n+  implicit none\n+contains\n+  module function c()\n+    integer, dimension(3)  :: c\n+  end function c\n+end submodule oo"}]}