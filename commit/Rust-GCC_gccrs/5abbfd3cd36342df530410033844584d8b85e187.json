{"sha": "5abbfd3cd36342df530410033844584d8b85e187", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWFiYmZkM2NkMzYzNDJkZjUzMDQxMDAzMzg0NDU4NGQ4Yjg1ZTE4Nw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-03-30T16:05:01Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-03-30T16:05:01Z"}, "message": "i386: Fix up *one_cmplv*2* insn with avx512f [PR94343]\n\nThis define_insn has two issues.\nOne is that with -mavx512f -mno-avx512vl it can emit an AVX512VL-only insn\n- 128-bit or 256-bit EVEX encoded vpternlog{d,q}.\nAnother one is that because there is no vpternlog{b,w}, we emit vpternlogd\ninstead, but then we shouldn't pretend we support masking of that, because\nwe don't.\nThe first one can be fixed by forcing the use of %zmm* registers instead of\n%xmm* or %ymm* if AVX512F but not AVX512VL, like we do for a couple of other\ninsns (although that is primarily done in order to support %xmm16+ regs).\nBut we need to make sure that in that case the input operand isn't memory,\nbecause while we can read and store the higher bits of registers, we don't\nwant to read from memory more bytes than what we should read.\n\nA variant to these two if_then_else set attrs, condition in the output and\nlarger condition would be 4 different define_insns (one with something like\nVI48_AVX512VL iterator, masking, no g modifiers and \"vm\" input constraint,\nanother one with VI48_AVX iterator, !TARGET_AVX512VL in condition,\nno masking, g modifiers and \"v\" input constraint, one with VI12_AVX512VL\niterator, no masking, no g modifiers and \"vm\" input constraint and last one with\nVI12_AVX2 iterator, !TARGET_AVX512VL in condition, no masking, g modifiers\nand \"v\" input constraint, but I think having one pattern is shorter than\nthat.\n\n2020-03-30  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/94343\n\t* config/i386/sse.md (<mask_codefor>one_cmpl<mode>2<mask_name>): If\n\t!TARGET_AVX512VL, use 512-bit vpternlog and make sure the input\n\toperand is a register.  Don't enable masked variants for V*[QH]Imode.\n\n\t* gcc.target/i386/avx512f-pr94343.c: New test.\n\t* gcc.target/i386/avx512vl-pr94343.c: New test.", "tree": {"sha": "764d2f9857a8eb6a5f38decdf5cf26b57608de8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/764d2f9857a8eb6a5f38decdf5cf26b57608de8a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5abbfd3cd36342df530410033844584d8b85e187", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5abbfd3cd36342df530410033844584d8b85e187", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5abbfd3cd36342df530410033844584d8b85e187", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5abbfd3cd36342df530410033844584d8b85e187/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "291aa50a63194245ad3ab8bd584f9c0286c5b44c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/291aa50a63194245ad3ab8bd584f9c0286c5b44c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/291aa50a63194245ad3ab8bd584f9c0286c5b44c"}], "stats": {"total": 62, "additions": 56, "deletions": 6}, "files": [{"sha": "fc6e8778aea59d84872d1f7824a5122c9b9cacc3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5abbfd3cd36342df530410033844584d8b85e187/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5abbfd3cd36342df530410033844584d8b85e187/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5abbfd3cd36342df530410033844584d8b85e187", "patch": "@@ -1,5 +1,10 @@\n 2020-03-30  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/94343\n+\t* config/i386/sse.md (<mask_codefor>one_cmpl<mode>2<mask_name>): If\n+\t!TARGET_AVX512VL, use 512-bit vpternlog and make sure the input\n+\toperand is a register.  Don't enable masked variants for V*[QH]Imode.\n+\n \tPR target/93069\n \t* config/i386/sse.md (vec_extract_lo_<mode><mask_name>): Use\n \t<store_mask_constraint> instead of m in output operand constraint."}, {"sha": "fba91b7369a0dd9a66ba09d82c3e19a21bab2bc8", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5abbfd3cd36342df530410033844584d8b85e187/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5abbfd3cd36342df530410033844584d8b85e187/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=5abbfd3cd36342df530410033844584d8b85e187", "patch": "@@ -12798,14 +12798,29 @@\n })\n \n (define_insn \"<mask_codefor>one_cmpl<mode>2<mask_name>\"\n-  [(set (match_operand:VI 0 \"register_operand\" \"=v\")\n-\t(xor:VI (match_operand:VI 1 \"nonimmediate_operand\" \"vm\")\n-\t\t(match_operand:VI 2 \"vector_all_ones_operand\" \"BC\")))]\n-  \"TARGET_AVX512F\"\n-  \"vpternlog<ternlogsuffix>\\t{$0x55, %1, %0, %0<mask_operand3>|%0<mask_operand3>, %0, %1, 0x55}\"\n+  [(set (match_operand:VI 0 \"register_operand\" \"=v,v\")\n+\t(xor:VI (match_operand:VI 1 \"nonimmediate_operand\" \"v,m\")\n+\t\t(match_operand:VI 2 \"vector_all_ones_operand\" \"BC,BC\")))]\n+  \"TARGET_AVX512F\n+   && (!<mask_applied>\n+       || <ssescalarmode>mode == SImode\n+       || <ssescalarmode>mode == DImode)\"\n+{\n+  if (TARGET_AVX512VL)\n+    return \"vpternlog<ternlogsuffix>\\t{$0x55, %1, %0, %0<mask_operand3>|%0<mask_operand3>, %0, %1, 0x55}\";\n+  else\n+    return \"vpternlog<ternlogsuffix>\\t{$0x55, %g1, %g0, %g0<mask_operand3>|%g0<mask_operand3>, %g0, %g1, 0x55}\";\n+}\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix\" \"evex\")\n-   (set_attr \"mode\" \"<sseinsnmode>\")])\n+   (set (attr \"mode\")\n+        (if_then_else (match_test \"TARGET_AVX512VL\")\n+\t\t      (const_string \"<sseinsnmode>\")\n+\t\t      (const_string \"XI\")))\n+   (set (attr \"enabled\")\n+\t(if_then_else (eq_attr \"alternative\" \"1\")\n+\t\t      (symbol_ref \"<MODE_SIZE> == 64 || TARGET_AVX512VL\")\n+\t\t      (const_int 1)))])\n \n (define_expand \"<sse2_avx2>_andnot<mode>3\"\n   [(set (match_operand:VI_AVX2 0 \"register_operand\")"}, {"sha": "9304d92ec1492fcbec55c93b08a4f33104541119", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5abbfd3cd36342df530410033844584d8b85e187/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5abbfd3cd36342df530410033844584d8b85e187/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5abbfd3cd36342df530410033844584d8b85e187", "patch": "@@ -1,3 +1,9 @@\n+2020-03-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/94343\n+\t* gcc.target/i386/avx512f-pr94343.c: New test.\n+\t* gcc.target/i386/avx512vl-pr94343.c: New test.\n+\n 2020-03-30  Martin Liska  <mliska@suse.cz>\n \n \tPR rtl-optimization/87716"}, {"sha": "ff3f7930b00ca6b9466312e17b2dd138db68bb9f", "filename": "gcc/testsuite/gcc.target/i386/avx512f-pr94343.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5abbfd3cd36342df530410033844584d8b85e187/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr94343.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5abbfd3cd36342df530410033844584d8b85e187/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr94343.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr94343.c?ref=5abbfd3cd36342df530410033844584d8b85e187", "patch": "@@ -0,0 +1,12 @@\n+/* PR target/94343 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f -mno-avx512vl\" } */\n+/* { dg-final { scan-assembler-not \"vpternlogd\\[^\\n\\r]*xmm\\[0-9]*\" } } */\n+\n+typedef int __v4si __attribute__((vector_size (16)));\n+\n+__v4si\n+foo (__v4si a)\n+{\n+  return ~a;\n+}"}, {"sha": "6f29aa29f59a9476e5d7079796abc3b043804564", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-pr94343.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5abbfd3cd36342df530410033844584d8b85e187/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr94343.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5abbfd3cd36342df530410033844584d8b85e187/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr94343.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr94343.c?ref=5abbfd3cd36342df530410033844584d8b85e187", "patch": "@@ -0,0 +1,12 @@\n+/* PR target/94343 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512vl\" } */\n+/* { dg-final { scan-assembler \"vpternlogd\\[^\\n\\r]*xmm\\[0-9]*\" } } */\n+\n+typedef int __v4si __attribute__((vector_size (16)));\n+\n+__v4si\n+foo (__v4si a)\n+{\n+  return ~a;\n+}"}]}