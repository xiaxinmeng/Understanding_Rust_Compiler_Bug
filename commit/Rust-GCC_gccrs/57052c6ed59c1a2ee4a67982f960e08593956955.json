{"sha": "57052c6ed59c1a2ee4a67982f960e08593956955", "node_id": "C_kwDOANBUbNoAKDU3MDUyYzZlZDU5YzFhMmVlNGE2Nzk4MmY5NjBlMDg1OTM5NTY5NTU", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2023-03-15T19:33:48Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2023-03-15T19:35:37Z"}, "message": "i386: Fix blend vector permutation for 8-byte modes\n\n8-byte modes should be processed only for TARGET_MMX_WITH_SSE. Handle\nV2SFmode and fix V2HImode handling. The resulting BLEND instructions\nare always faster than MOVSS/MOVSD, so prioritize them w.r.t MOVSS/MOVSD\nfor TARGET_SSE4_1.\n\ngcc/ChangeLog:\n\n\t* config/i386/i386-expand.cc (expand_vec_perm_blend):\n\tHandle 8-byte modes only with TARGET_MMX_WITH_SSE. Handle V2SFmode\n\tand fix V2HImode handling.\n\t(expand_vec_perm_1): Try to emit BLEND instruction\n\tbefore MOVSS/MOVSD.\n\t* config/i386/mmx.md (*mmx_blendps): New insn pattern.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/merge-1.c (dg-options): Use -mno-sse4.\n\t* gcc.target/i386/sse2-mmx-21.c (dg-options): Ditto.\n\t* gcc.target/i386/sse-movss-4.c (dg-options):\n\tUse -mno-sse4.  Simplify scan-assembler-not strings.\n\t* gcc.target/i386/sse2-movsd-3.c (dg-options): Ditto.\n\t* gcc.target/i386/sse2-mmx-movss-1.c: New test.", "tree": {"sha": "7666451538edb09a30194ba56181216fafd37eba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7666451538edb09a30194ba56181216fafd37eba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57052c6ed59c1a2ee4a67982f960e08593956955", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57052c6ed59c1a2ee4a67982f960e08593956955", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57052c6ed59c1a2ee4a67982f960e08593956955", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57052c6ed59c1a2ee4a67982f960e08593956955/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "901edd99b44976b3c2b13a7d525d9e315540186a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/901edd99b44976b3c2b13a7d525d9e315540186a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/901edd99b44976b3c2b13a7d525d9e315540186a"}], "stats": {"total": 71, "additions": 53, "deletions": 18}, "files": [{"sha": "1545d4365b76f3e6e108777662d122a63b1648bd", "filename": "gcc/config/i386/i386-expand.cc", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57052c6ed59c1a2ee4a67982f960e08593956955/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57052c6ed59c1a2ee4a67982f960e08593956955/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.cc?ref=57052c6ed59c1a2ee4a67982f960e08593956955", "patch": "@@ -19007,9 +19007,10 @@ expand_vec_perm_blend (struct expand_vec_perm_d *d)\n     ;\n   else if (TARGET_AVX && (vmode == V4DFmode || vmode == V8SFmode))\n     ;\n-  else if (TARGET_SSE4_1 && (GET_MODE_SIZE (vmode) == 16\n-\t\t\t     || GET_MODE_SIZE (vmode) == 8\n-\t\t\t     || GET_MODE_SIZE (vmode) == 4))\n+  else if (TARGET_SSE4_1\n+\t   && (GET_MODE_SIZE (vmode) == 16\n+\t       || (TARGET_MMX_WITH_SSE && GET_MODE_SIZE (vmode) == 8)\n+\t       || GET_MODE_SIZE (vmode) == 4))\n     ;\n   else\n     return false;\n@@ -19042,6 +19043,8 @@ expand_vec_perm_blend (struct expand_vec_perm_d *d)\n     case E_V8SFmode:\n     case E_V2DFmode:\n     case E_V4SFmode:\n+    case E_V2SFmode:\n+    case E_V2HImode:\n     case E_V4HImode:\n     case E_V8HImode:\n     case E_V8SImode:\n@@ -19897,11 +19900,15 @@ expand_vec_perm_1 (struct expand_vec_perm_d *d)\n \t}\n     }\n \n+  /* Try the SSE4.1 blend variable merge instructions.  */\n+  if (expand_vec_perm_blend (d))\n+    return true;\n+\n   /* Try movss/movsd instructions.  */\n   if (expand_vec_perm_movs (d))\n     return true;\n \n-  /* Finally, try the fully general two operand permute.  */\n+  /* Try the fully general two operand permute.  */\n   if (expand_vselect_vconcat (d->target, d->op0, d->op1, d->perm, nelt,\n \t\t\t      d->testing_p))\n     return true;\n@@ -19924,10 +19931,6 @@ expand_vec_perm_1 (struct expand_vec_perm_d *d)\n \treturn true;\n     }\n \n-  /* Try the SSE4.1 blend variable merge instructions.  */\n-  if (expand_vec_perm_blend (d))\n-    return true;\n-\n   /* Try one of the AVX vpermil variable permutations.  */\n   if (expand_vec_perm_vpermil (d))\n     return true;"}, {"sha": "18dae03ad0a43c35b3c695f52e8f08f2e646403b", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57052c6ed59c1a2ee4a67982f960e08593956955/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57052c6ed59c1a2ee4a67982f960e08593956955/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=57052c6ed59c1a2ee4a67982f960e08593956955", "patch": "@@ -1154,6 +1154,25 @@\n   DONE;\n })\n \n+(define_insn \"*mmx_blendps\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=Yr,*x,x\")\n+\t(vec_merge:V2SF\n+\t  (match_operand:V2SF 2 \"register_operand\" \"Yr,*x,x\")\n+\t  (match_operand:V2SF 1 \"register_operand\" \"0,0,x\")\n+\t  (match_operand:SI 3 \"const_0_to_3_operand\")))]\n+  \"TARGET_SSE4_1 && TARGET_MMX_WITH_SSE\"\n+  \"@\n+   blendps\\t{%3, %2, %0|%0, %2, %3}\n+   blendps\\t{%3, %2, %0|%0, %2, %3}\n+   vblendps\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n+  [(set_attr \"isa\" \"noavx,noavx,avx\")\n+   (set_attr \"type\" \"ssemov\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"prefix_data16\" \"1,1,*\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"prefix\" \"orig,orig,vex\")\n+   (set_attr \"mode\" \"V4SF\")])\n+\n (define_insn \"mmx_blendvps\"\n   [(set (match_operand:V2SF 0 \"register_operand\" \"=Yr,*x,x\")\n \t(unspec:V2SF"}, {"sha": "b018eb192050dcdda5f3f3a8f68a2ed96a0ceda7", "filename": "gcc/testsuite/gcc.target/i386/merge-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57052c6ed59c1a2ee4a67982f960e08593956955/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmerge-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57052c6ed59c1a2ee4a67982f960e08593956955/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmerge-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmerge-1.c?ref=57052c6ed59c1a2ee4a67982f960e08593956955", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -msse2\" } */\n+/* { dg-options \"-O1 -msse2 -mno-sse4\" } */\n \n #include <x86intrin.h>\n "}, {"sha": "d8a8a03b1473241ecf2a24fa1fd0fd5a756e3492", "filename": "gcc/testsuite/gcc.target/i386/sse-movss-4.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57052c6ed59c1a2ee4a67982f960e08593956955/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-movss-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57052c6ed59c1a2ee4a67982f960e08593956955/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-movss-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-movss-4.c?ref=57052c6ed59c1a2ee4a67982f960e08593956955", "patch": "@@ -1,13 +1,13 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -msse\" } */\n+/* { dg-options \"-O2 -msse -mno-sse4\" } */\n \n typedef unsigned int v4si __attribute__((vector_size(16)));\n typedef float v4sf __attribute__((vector_size(16)));\n \n v4si foo(v4si x,v4si y) { return (v4si){y[0],x[1],x[2],x[3]}; }\n v4sf bar(v4sf x,v4sf y) { return (v4sf){y[0],x[1],x[2],x[3]}; }\n \n-/* { dg-final { scan-assembler-times \"\\tv?movss\\t\" 2 } } */\n+/* { dg-final { scan-assembler-times \"\\tmovss\\t\" 2 } } */\n /* { dg-final { scan-assembler-not \"movaps\" } } */\n /* { dg-final { scan-assembler-not \"shufps\" } } */\n-/* { dg-final { scan-assembler-not \"vpblendw\" } } */\n+/* { dg-final { scan-assembler-not \"pblendw\" } } */"}, {"sha": "7f8098aa63126bac9f45e07575056f6ce0fb73ac", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-21.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57052c6ed59c1a2ee4a67982f960e08593956955/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57052c6ed59c1a2ee4a67982f960e08593956955/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-21.c?ref=57052c6ed59c1a2ee4a67982f960e08593956955", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target { ! ia32 } } } */\n-/* { dg-options \"-O2 -msse2 -mno-mmx\" } */\n+/* { dg-options \"-O2 -msse2 -mno-mmx -mno-sse4\" } */\n /* { dg-final { scan-assembler-times \"pshufd\" 1 } } */\n /* { dg-final { scan-assembler-times \"movd\" 1 } } */\n /* { dg-final { scan-assembler-not \"%mm\" } } */"}, {"sha": "bb7962848b73be9745161b2d71cdfc04cc8f8161", "filename": "gcc/testsuite/gcc.target/i386/sse2-mmx-movss-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57052c6ed59c1a2ee4a67982f960e08593956955/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-movss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57052c6ed59c1a2ee4a67982f960e08593956955/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-movss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-mmx-movss-1.c?ref=57052c6ed59c1a2ee4a67982f960e08593956955", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -msse2 -mno-sse4\" } */\n+\n+typedef unsigned int v2si __attribute__((vector_size(8)));\n+typedef float v2sf __attribute__((vector_size(8)));\n+\n+v2si foo(v2si x,v2si y) { return (v2si){y[0],x[1]}; }\n+v2sf bar(v2sf x,v2sf y) { return (v2sf){y[0],x[1]}; }\n+\n+/* { dg-final { scan-assembler-times \"\\tmovss\\t\" 2 } } */\n+/* { dg-final { scan-assembler-not \"movaps\" } } */\n+/* { dg-final { scan-assembler-not \"shufps\" } } */\n+/* { dg-final { scan-assembler-not \"pblendw\" } } */"}, {"sha": "edd4a445fc3b0dacc436c1e4874a1c5bfe8d05d9", "filename": "gcc/testsuite/gcc.target/i386/sse2-movsd-3.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57052c6ed59c1a2ee4a67982f960e08593956955/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-movsd-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57052c6ed59c1a2ee4a67982f960e08593956955/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-movsd-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-movsd-3.c?ref=57052c6ed59c1a2ee4a67982f960e08593956955", "patch": "@@ -1,15 +1,15 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -msse2\" } */\n+/* { dg-options \"-O2 -msse2 -mno-sse4\" } */\n \n typedef unsigned long long v2di __attribute__((vector_size(16)));\n typedef double v2df __attribute__((vector_size(16)));\n \n v2di foo(v2di x,v2di y) { return (v2di){y[0],x[1]}; }\n v2df bar(v2df x,v2df y) { return (v2df){y[0],x[1]}; }\n \n-/* { dg-final { scan-assembler-times \"\\tv?movsd\\t\" 2 } } */\n-/* { dg-final { scan-assembler-not \"v?shufpd\" } } */\n+/* { dg-final { scan-assembler-times \"\\tmovsd\\t\" 2 } } */\n+/* { dg-final { scan-assembler-not \"shufpd\" } } */\n /* { dg-final { scan-assembler-not \"movdqa\" } } */\n /* { dg-final { scan-assembler-not \"pshufd\" } } */\n-/* { dg-final { scan-assembler-not \"v?punpckldq\" } } */\n-/* { dg-final { scan-assembler-not \"v?movq\" } } */\n+/* { dg-final { scan-assembler-not \"punpckldq\" } } */\n+/* { dg-final { scan-assembler-not \"movq\" } } */"}]}