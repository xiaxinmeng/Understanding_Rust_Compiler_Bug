{"sha": "46c4e5d6e9e539d736eebbd7cab1d76a569af11a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDZjNGU1ZDZlOWU1MzlkNzM2ZWViYmQ3Y2FiMWQ3NmE1NjlhZjExYQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-06-06T00:19:17Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-06-06T00:19:17Z"}, "message": "re PR libstdc++/9024 (Input fails after call to basic_filebuf<>::pubsetbuf(0, 0))\n\n\n2003-06-05  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tPR libstdc++/9024\n\t* include/bits/fstream.tcc (_M_underflow): Fix for unbuffered.\n\t* include/bits/stl_algobase.h: Tweak.\n\t* include/std/std_fstream.h: Move _M_buf_size to...\n\t* include/std/std_streambuf.h: ...here. Modify.\n\t* include/bits/streambuf.tcc: Same.\n\t* testsuite/testsuite_hooks.h: Tweak.\n\t* testsuite/testsuite_io.h (constraint_filebuf): New.\n\t* testsuite/27_io/basic_filebuf/sbumpc/char/1.cc: Split into...\n\t* testsuite/27_io/basic_filebuf/sbumpc/char/1-in.cc: New.\n\t* testsuite/27_io/basic_filebuf/sbumpc/char/1-io.cc: New.\n\t* testsuite/27_io/basic_filebuf/sbumpc/char/1-out.cc: New.\n\t* testsuite/27_io/basic_filebuf/sbumpc/char/2-in.cc: New.\n\t* testsuite/27_io/basic_filebuf/sbumpc/char/2-io.cc: New.\n\t* testsuite/27_io/basic_filebuf/sbumpc/char/2-out.cc: New.\n\t* testsuite/27_io/basic_filebuf/sgetc/char/1.cc: Split into...\n\t* testsuite/27_io/basic_filebuf/sgetc/char/1-in.cc: New.\n\t* testsuite/27_io/basic_filebuf/sgetc/char/1-io.cc: New.\n\t* testsuite/27_io/basic_filebuf/sgetc/char/1-out.cc: New.\n\t* testsuite/27_io/basic_filebuf/sgetc/char/2-in.cc: New.\n\t* testsuite/27_io/basic_filebuf/sgetc/char/2-io.cc: New.\n\t* testsuite/27_io/basic_filebuf/sgetc/char/2-out.cc: New.\n\t* testsuite/27_io/basic_filebuf/sgetn/char/1.cc: Split into...\n\t* testsuite/27_io/basic_filebuf/sgetn/char/1-in.cc: New.\n\t* testsuite/27_io/basic_filebuf/sgetn/char/1-io.cc: New.\n\t* testsuite/27_io/basic_filebuf/sgetn/char/1-out.cc: New.\n\t* testsuite/27_io/basic_filebuf/sgetn/char/2.cc: Split into...\n\t* testsuite/27_io/basic_filebuf/sgetn/char/2-in.cc: New.\n\t* testsuite/27_io/basic_filebuf/sgetn/char/2-io.cc: New.\n\t* testsuite/27_io/basic_filebuf/sgetn/char/2-out.cc: New.\n\t* testsuite/27_io/basic_filebuf/sgetn/char/3.cc: New.\n\t* testsuite/27_io/basic_filebuf/snextc/char/1.cc: Split into...\n\t* testsuite/27_io/basic_filebuf/snextc/char/1-in.cc: New.\n\t* testsuite/27_io/basic_filebuf/snextc/char/1-io.cc: New.\n\t* testsuite/27_io/basic_filebuf/snextc/char/1-out.cc: New.\n\t* testsuite/27_io/basic_filebuf/snextc/char/2-in.cc: New.\n\t* testsuite/27_io/basic_filebuf/snextc/char/2-io.cc: New.\n\t* testsuite/27_io/basic_filebuf/snextc/char/2-out.cc: New.\n\t* testsuite/27_io/basic_filebuf/sputc/char/1.cc: Split into...\n\t* testsuite/27_io/basic_filebuf/sputc/char/1-in.cc: New.\n\t* testsuite/27_io/basic_filebuf/sputc/char/1-io.cc: New.\n\t* testsuite/27_io/basic_filebuf/sputc/char/1-out.cc: New.\n\t* testsuite/27_io/basic_filebuf/sputc/char/2.cc: Split into...\n\t* testsuite/27_io/basic_filebuf/sputc/char/2-in.cc: New.\n\t* testsuite/27_io/basic_filebuf/sputc/char/2-io.cc: New.\n\t* testsuite/27_io/basic_filebuf/sputc/char/2-out.cc: New.\n\t* testsuite/27_io/basic_filebuf/sputn/char/1.cc: Split into...\n\t* testsuite/27_io/basic_filebuf/sputn/char/1-in.cc: New.\n\t* testsuite/27_io/basic_filebuf/sputn/char/1-io.cc: New.\n\t* testsuite/27_io/basic_filebuf/sputn/char/1-out.cc: New.\n\t* testsuite/27_io/basic_filebuf/sputn/char/2-in.cc: New.\n\t* testsuite/27_io/basic_filebuf/sputn/char/2-io.cc: New.\n\t* testsuite/27_io/basic_filebuf/sputn/char/2-out.cc: New.\n\t* testsuite/data/sgetc.txt: New.\n\t* testsuite/data/sgetn.txt: New.\n\nFrom-SVN: r67524", "tree": {"sha": "95ab9d1fe7fba981a5d40632ce9519386ff0060d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95ab9d1fe7fba981a5d40632ce9519386ff0060d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46c4e5d6e9e539d736eebbd7cab1d76a569af11a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46c4e5d6e9e539d736eebbd7cab1d76a569af11a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46c4e5d6e9e539d736eebbd7cab1d76a569af11a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/comments", "author": null, "committer": null, "parents": [{"sha": "821bcbd221a5a1063e1fbac4e1612961f24634ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/821bcbd221a5a1063e1fbac4e1612961f24634ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/821bcbd221a5a1063e1fbac4e1612961f24634ec"}], "stats": {"total": 4208, "additions": 3190, "deletions": 1018}, "files": [{"sha": "052958a28e3bdf6edc43d3d427dce1a83217d8de", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 69, "deletions": 12, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=46c4e5d6e9e539d736eebbd7cab1d76a569af11a", "patch": "@@ -1,21 +1,78 @@\n+2003-06-05  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tPR libstdc++/9024\t\n+\t* include/bits/fstream.tcc (_M_underflow): Fix for unbuffered.\n+\t* include/bits/stl_algobase.h: Tweak.\n+\t* include/std/std_fstream.h: Move _M_buf_size to...\n+\t* include/std/std_streambuf.h: ...here. Modify.\n+\t* include/bits/streambuf.tcc: Same.\n+\t* testsuite/testsuite_hooks.h: Tweak.\n+\t* testsuite/testsuite_io.h (constraint_filebuf): New.\n+\t* testsuite/27_io/basic_filebuf/sbumpc/char/1.cc: Split into...\n+\t* testsuite/27_io/basic_filebuf/sbumpc/char/1-in.cc: New.\n+\t* testsuite/27_io/basic_filebuf/sbumpc/char/1-io.cc: New.\n+\t* testsuite/27_io/basic_filebuf/sbumpc/char/1-out.cc: New.\n+\t* testsuite/27_io/basic_filebuf/sbumpc/char/2-in.cc: New.\n+\t* testsuite/27_io/basic_filebuf/sbumpc/char/2-io.cc: New.\n+\t* testsuite/27_io/basic_filebuf/sbumpc/char/2-out.cc: New.\n+\t* testsuite/27_io/basic_filebuf/sgetc/char/1.cc: Split into...\n+\t* testsuite/27_io/basic_filebuf/sgetc/char/1-in.cc: New.\n+\t* testsuite/27_io/basic_filebuf/sgetc/char/1-io.cc: New.\n+\t* testsuite/27_io/basic_filebuf/sgetc/char/1-out.cc: New.\n+\t* testsuite/27_io/basic_filebuf/sgetc/char/2-in.cc: New.\n+\t* testsuite/27_io/basic_filebuf/sgetc/char/2-io.cc: New.\n+\t* testsuite/27_io/basic_filebuf/sgetc/char/2-out.cc: New.\n+\t* testsuite/27_io/basic_filebuf/sgetn/char/1.cc: Split into...\n+\t* testsuite/27_io/basic_filebuf/sgetn/char/1-in.cc: New.\n+\t* testsuite/27_io/basic_filebuf/sgetn/char/1-io.cc: New.\n+\t* testsuite/27_io/basic_filebuf/sgetn/char/1-out.cc: New.\n+\t* testsuite/27_io/basic_filebuf/sgetn/char/2.cc: Split into...\n+\t* testsuite/27_io/basic_filebuf/sgetn/char/2-in.cc: New.\n+\t* testsuite/27_io/basic_filebuf/sgetn/char/2-io.cc: New.\n+\t* testsuite/27_io/basic_filebuf/sgetn/char/2-out.cc: New.\n+\t* testsuite/27_io/basic_filebuf/sgetn/char/3.cc: New.\n+\t* testsuite/27_io/basic_filebuf/snextc/char/1.cc: Split into...\n+\t* testsuite/27_io/basic_filebuf/snextc/char/1-in.cc: New.\n+\t* testsuite/27_io/basic_filebuf/snextc/char/1-io.cc: New.\n+\t* testsuite/27_io/basic_filebuf/snextc/char/1-out.cc: New.\n+\t* testsuite/27_io/basic_filebuf/snextc/char/2-in.cc: New.\n+\t* testsuite/27_io/basic_filebuf/snextc/char/2-io.cc: New.\n+\t* testsuite/27_io/basic_filebuf/snextc/char/2-out.cc: New.\n+\t* testsuite/27_io/basic_filebuf/sputc/char/1.cc: Split into...\n+\t* testsuite/27_io/basic_filebuf/sputc/char/1-in.cc: New.\n+\t* testsuite/27_io/basic_filebuf/sputc/char/1-io.cc: New.\n+\t* testsuite/27_io/basic_filebuf/sputc/char/1-out.cc: New.\n+\t* testsuite/27_io/basic_filebuf/sputc/char/2.cc: Split into...\n+\t* testsuite/27_io/basic_filebuf/sputc/char/2-in.cc: New.\n+\t* testsuite/27_io/basic_filebuf/sputc/char/2-io.cc: New.\n+\t* testsuite/27_io/basic_filebuf/sputc/char/2-out.cc: New.\n+\t* testsuite/27_io/basic_filebuf/sputn/char/1.cc: Split into...\n+\t* testsuite/27_io/basic_filebuf/sputn/char/1-in.cc: New.\n+\t* testsuite/27_io/basic_filebuf/sputn/char/1-io.cc: New.\n+\t* testsuite/27_io/basic_filebuf/sputn/char/1-out.cc: New.\n+\t* testsuite/27_io/basic_filebuf/sputn/char/2-in.cc: New.\n+\t* testsuite/27_io/basic_filebuf/sputn/char/2-io.cc: New.\n+\t* testsuite/27_io/basic_filebuf/sputn/char/2-out.cc: New.\n+\t* testsuite/data/sgetc.txt: New.\n+\t* testsuite/data/sgetn.txt: New.\n+\t\n 2003-06-05  Paolo Carlini  <pcarlini@unitus.it>\n \n \tPR libstdc++/11095\n \t* include/bits/istream.tcc (operator>>(basic_istream&, _CharT*)):\n \tDeal with width() smaller than zero.\n \t* include/bits/ostream.tcc (operator<<(basic_ostream&, _CharT),\n-\toperator<<(basic_ostream&, char), operator<<(basic_ostream&,\n-\tconst _CharT*), operator<<(basic_ostream<_CharT, _Traits>&,\n-\tconst char*), operator<<(basic_ostream<char, _Traits>&,\n-\tconst char*), operator<<(basic_ostream, const basic_string&)): Likewise.\n-\t* testsuite/27_io/basic_istream/extractors_character/char/11095-i.cc:\n-\t* testsuite/27_io/basic_ostream/inserters_character/char/11095-oa.cc:\n-\t* testsuite/27_io/basic_ostream/inserters_character/char/11095-ob.cc:\n-\t* testsuite/27_io/basic_ostream/inserters_character/char/11095-oc.cc:\n-\t* testsuite/27_io/basic_ostream/inserters_character/wchar_t/11095-od.cc:\n-\t* testsuite/27_io/basic_ostream/inserters_character/wchar_t/11095-oe.cc:\n-\t* testsuite/27_io/basic_ostream/inserters_character/wchar_t/11095-of.cc:\n-\tNew.\n+\toperator<<(basic_ostream&, char), operator<<(basic_ostream&, const\n+\t_CharT*), operator<<(basic_ostream<_CharT, _Traits>&, const\n+\tchar*), operator<<(basic_ostream<char, _Traits>&, const char*),\n+\toperator<<(basic_ostream, const basic_string&)): Likewise.\n+\n+\t* testsuite/27_io/basic_istream/extractors_character/char/\n+\t(11095-i.cc, 11095-oa.cc, 11095-ob.cc, 11095-oc.cc): New.\n+\t* testsuite/27_io/basic_ostream/inserters_character/char/\n+\t(11095-oa.cc, 11095-ob.cc, 11095-oc.cc): New.\n+\t* testsuite/27_io/basic_ostream/inserters_character/wchar_t/\n+\t(11095-od.cc, 11095-oe.cc, 11095-of.cc): New.\n \n 2003-06-05  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n "}, {"sha": "a46b478af3b1ebe8d52fb3b44dc8cc2d91e40d1f", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 69, "deletions": 31, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=46c4e5d6e9e539d736eebbd7cab1d76a569af11a", "patch": "@@ -71,14 +71,13 @@ namespace std\n   template<typename _CharT, typename _Traits>\n     basic_filebuf<_CharT, _Traits>::\n     basic_filebuf() : __streambuf_type(), _M_file(&_M_lock), \n-    _M_state_cur(__state_type()), _M_state_beg(__state_type()), \n-    _M_buf(NULL), _M_buf_size(BUFSIZ), _M_buf_allocated(false),\n-    _M_last_overflowed(false), _M_filepos(0), _M_pback_cur_save(0),\n+    _M_state_cur(__state_type()), _M_state_beg(__state_type()), _M_buf(NULL), \n+    _M_buf_allocated(false),_M_last_overflowed(false), \n+    _M_filepos(0), _M_pback(char_type()), _M_pback_cur_save(0), \n     _M_pback_end_save(0), _M_pback_init(false), _M_codecvt(0)\n     { \n       this->_M_buf_unified = true; \t  \n-      if (__builtin_expect(has_facet<__codecvt_type>(this->_M_buf_locale), \n-\t\t\t                             true))\n+      if (has_facet<__codecvt_type>(this->_M_buf_locale))\n \t_M_codecvt = &use_facet<__codecvt_type>(this->_M_buf_locale);\n     }\n \n@@ -194,40 +193,41 @@ namespace std\n \t  // fileops happen...\n \t  _M_destroy_pback();\n \n-\t  if (this->_M_in_cur < this->_M_in_end)\n+\t  const size_t __buflen = this->_M_buf_size \n+\t                          ? this->_M_buf_size - 1 : 0;\n+\t  if (__buflen)\n \t    {\n-\t      __ret = traits_type::to_int_type(*this->_M_in_cur);\n-\t      if (__bump)\n-\t\t_M_move_in_cur(1);\n-\t      return __ret;\n-\t    }\n+\t      if (this->_M_in_cur < this->_M_in_end)\n+\t\t{\n+\t\t  __ret = traits_type::to_int_type(*this->_M_in_cur);\n+\t\t  if (__bump)\n+\t\t    _M_move_in_cur(1);\n+\t\t  return __ret;\n+\t\t}\n \n-\t  // Sync internal and external buffers.\n-\t  if (__testout && this->_M_out_beg < this->_M_out_lim)\n-\t    this->overflow();\n+\t      // Sync internal and external buffers.\n+\t      if (__testout && this->_M_out_beg < this->_M_out_lim)\n+\t\tthis->overflow();\n \n-\t  if (_M_buf_size > 1)\n-\t    {\n+\t      // Get and convert input sequence.\n \t      streamsize __elen = 0;\n \t      streamsize __ilen = 0;\n-\n \t      if (__check_facet(_M_codecvt).always_noconv())\n \t\t{\n-\t\t  __elen = _M_file.xsgetn(reinterpret_cast<char*>(this->_M_in_beg), _M_buf_size - 1);\n+\t\t  __elen = _M_file.xsgetn(reinterpret_cast<char*>(this->_M_in_beg), __buflen);\n \t\t  __ilen = __elen;\n \t\t}\n \t      else\n \t\t{\n-\t\t  char* __buf = static_cast<char*>(__builtin_alloca(_M_buf_size - 1));\n-\t\t  __elen = _M_file.xsgetn(__buf, _M_buf_size - 1);\n+\t\t  char* __buf = static_cast<char*>(__builtin_alloca(__buflen));\n+\t\t  __elen = _M_file.xsgetn(__buf, __buflen);\n \t\t  \n \t\t  const char* __eend;\n \t\t  char_type* __iend;\n \t\t  codecvt_base::result __r;\n \t\t  __r = _M_codecvt->in(_M_state_cur, __buf, __buf + __elen, \n \t\t\t\t       __eend, this->_M_in_beg, \n-\t\t\t\t       this->_M_in_beg + _M_buf_size - 1, \n-\t\t\t\t       __iend);\n+\t\t\t\t       this->_M_in_beg + __buflen, __iend);\n \t\t  if (__r == codecvt_base::ok)\n \t\t    __ilen = __iend - this->_M_in_beg;\n \t\t  else if (__r == codecvt_base::noconv)\n@@ -245,13 +245,49 @@ namespace std\n \t\t    }\n \t\t}\n \n-\t      if (0 < __ilen)\n+\t      if (__ilen > 0)\n \t\t{\n \t\t  _M_set_buffer(__ilen);\n \t\t  __ret = traits_type::to_int_type(*this->_M_in_cur);\n \t\t  if (__bump)\n \t\t    _M_move_in_cur(1);\n-\t\t}\t   \n+\t\t}\t   \t    \n+\t    }\n+\t  else\n+\t    {\n+\t      // Unbuffered.\n+\t      char __buf;\n+\t      if (_M_file.xsgetn(&__buf, 1) > 0)\n+\t\t{\n+\t\t  if (__check_facet(_M_codecvt).always_noconv())\n+\t\t    {\n+\t\t      char_type* __cp = reinterpret_cast<char_type*>(&__buf);\n+\t\t      __ret = traits_type::to_int_type(*__cp);\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      char_type __c;\t\t \n+\t\t      const char* __eend;\n+\t\t      char_type* __iend;\n+\t\t      codecvt_base::result __r;\n+\t\t      __r = _M_codecvt->in(_M_state_cur, &__buf, &__buf + 1, \n+\t\t\t\t\t   __eend, &__c, &__c + 1, __iend);\n+\t\t      if (__r == codecvt_base::ok \n+\t\t\t  || __r == codecvt_base::noconv)\n+\t\t\t__ret = traits_type::to_int_type(__c);\n+\t\t    }\n+\n+\t\t  // Need to put back this extracted character so that\n+\t\t  // sgetc will not advance the input stream iff\n+\t\t  // underflow, but cannot call pbackfail directly as\n+\t\t  // it calls underflow... which leads to a recursive\n+\t\t  // showdown.\n+\t\t  if (!__bump)\n+\t\t    {\n+\t\t      _M_create_pback();\n+\t\t      *this->_M_in_cur = traits_type::to_char_type(__ret); \n+\t\t    }\n+\t\t}\n \t    }\n \t}\n       _M_last_overflowed = false;\t\n@@ -279,19 +315,21 @@ namespace std\n \t      _M_move_in_cur(-1);\n \t      __tmp = traits_type::to_int_type(*this->_M_in_cur);\n \t    }\n-\t  // At the beginning of the buffer, need to make a\n-\t  // putback position available.\n-\t  // But the seek may fail (f.i., at the beginning of\n-\t  // a file, see libstdc++/9439) and in that case\n-\t  // we return traits_type::eof().\n \t  else if (this->seekoff(-1, ios_base::cur) >= 0)\n \t    {\n \t      __tmp = this->underflow();\n \t      if (traits_type::eq_int_type(__tmp, __ret))\n \t\treturn __ret;\n \t    }\n \t  else\n-\t    return __ret;\n+\t    {\n+\t      // At the beginning of the buffer, need to make a\n+\t      // putback position available.  But the seek may fail\n+\t      // (f.i., at the beginning of a file, see\n+\t      // libstdc++/9439) and in that case we return\n+\t      // traits_type::eof().\n+\t      return __ret;\n+\t    }\n \n \t  // Try to put back __i into input sequence in one of three ways.\n \t  // Order these tests done in is unspecified by the standard.\n@@ -394,7 +432,7 @@ namespace std\n \t    }\n \t  else\n \t    {\n-\t      // Result == error \n+\t      // Result == error .\n \t      __blen = 0;\n \t    }\n \t  "}, {"sha": "c5ba0d4ce354d8b286dea3f9ae033074517c869c", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 69, "deletions": 101, "changes": 170, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=46c4e5d6e9e539d736eebbd7cab1d76a569af11a", "patch": "@@ -1,6 +1,6 @@\n // Bits and pieces used in algorithms -*- C++ -*-\n \n-// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -77,8 +77,6 @@\n \n namespace std\n {\n-  // swap and iter_swap\n-\n   /**\n    *  @brief Swaps the contents of two iterators.\n    *  @param  a  An iterator.\n@@ -127,9 +125,6 @@ namespace std\n       __b = __tmp;\n     }\n \n-  //--------------------------------------------------\n-  // min and max\n-\n   #undef min\n   #undef max\n \n@@ -209,9 +204,6 @@ namespace std\n       if (__comp(__a, __b)) return __b; return __a;\n     }\n \n-  //--------------------------------------------------\n-  // copy\n-\n   // All of these auxiliary functions serve two purposes.  (1) Replace\n   // calls to copy with memmove whenever possible.  (Memmove, not memcpy,\n   // because the input and output ranges are permitted to overlap.)\n@@ -221,27 +213,26 @@ namespace std\n   template<typename _InputIter, typename _OutputIter>\n     inline _OutputIter\n     __copy(_InputIter __first, _InputIter __last,\n-\t   _OutputIter __result,\n-\t   input_iterator_tag)\n+\t   _OutputIter __result, input_iterator_tag)\n     {\n-      for ( ; __first != __last; ++__result, ++__first)\n+      for (; __first != __last; ++__result, ++__first)\n \t*__result = *__first;\n       return __result;\n     }\n \n   template<typename _RandomAccessIter, typename _OutputIter>\n     inline _OutputIter\n     __copy(_RandomAccessIter __first, _RandomAccessIter __last,\n-\t   _OutputIter __result,\n-\t   random_access_iterator_tag)\n+\t   _OutputIter __result, random_access_iterator_tag)\n     {\n       typedef typename iterator_traits<_RandomAccessIter>::difference_type\n           _Distance;\n-      for (_Distance __n = __last - __first; __n > 0; --__n) {\n-\t*__result = *__first;\n-\t++__first;\n-\t++__result;\n-      }\n+      for (_Distance __n = __last - __first; __n > 0; --__n) \n+\t{\n+\t  *__result = *__first;\n+\t  ++__first;\n+\t  ++__result;\n+\t}\n       return __result;\n     }\n \n@@ -255,69 +246,64 @@ namespace std\n \n   template<typename _InputIter, typename _OutputIter>\n     inline _OutputIter\n-    __copy_aux2(_InputIter __first, _InputIter __last,\n-\t\t_OutputIter __result, __false_type)\n+    __copy_aux2(_InputIter __first, _InputIter __last, _OutputIter __result, \n+\t\t__false_type)\n     { return __copy(__first, __last, __result, __iterator_category(__first)); }\n \n   template<typename _InputIter, typename _OutputIter>\n     inline _OutputIter\n-    __copy_aux2(_InputIter __first, _InputIter __last,\n-\t\t_OutputIter __result, __true_type)\n+    __copy_aux2(_InputIter __first, _InputIter __last, _OutputIter __result, \n+\t\t__true_type)\n     { return __copy(__first, __last, __result, __iterator_category(__first)); }\n \n   template<typename _Tp>\n     inline _Tp*\n-    __copy_aux2(_Tp* __first, _Tp* __last,\n-\t\t_Tp* __result, __true_type)\n+    __copy_aux2(_Tp* __first, _Tp* __last, _Tp* __result, __true_type)\n     { return __copy_trivial(__first, __last, __result); }\n \n   template<typename _Tp>\n     inline _Tp*\n-    __copy_aux2(const _Tp* __first, const _Tp* __last,\n-\t\t_Tp* __result, __true_type)\n+    __copy_aux2(const _Tp* __first, const _Tp* __last, _Tp* __result, \n+\t\t__true_type)\n     { return __copy_trivial(__first, __last, __result); }\n \n   template<typename _InputIter, typename _OutputIter>\n     inline _OutputIter\n-    __copy_ni2(_InputIter __first, _InputIter __last,\n-\t       _OutputIter __result, __true_type)\n+    __copy_ni2(_InputIter __first, _InputIter __last, _OutputIter __result, \n+\t       __true_type)\n     {\n       typedef typename iterator_traits<_InputIter>::value_type\n \t  _ValueType;\n       typedef typename __type_traits<_ValueType>::has_trivial_assignment_operator\n \t  _Trivial;\n-      return _OutputIter(__copy_aux2(__first, __last,\n-                                     __result.base(),\n+      return _OutputIter(__copy_aux2(__first, __last, __result.base(), \n \t\t\t\t     _Trivial()));\n     }\n \n   template<typename _InputIter, typename _OutputIter>\n     inline _OutputIter\n-    __copy_ni2(_InputIter __first, _InputIter __last,\n-\t       _OutputIter __result, __false_type)\n+    __copy_ni2(_InputIter __first, _InputIter __last, _OutputIter __result, \n+\t       __false_type)\n     {\n-      typedef typename iterator_traits<_InputIter>::value_type\n-          _ValueType;\n+      typedef typename iterator_traits<_InputIter>::value_type _ValueType;\n       typedef typename __type_traits<_ValueType>::has_trivial_assignment_operator\n           _Trivial;\n-      return __copy_aux2(__first, __last,\n-                         __result,\n-\t\t\t _Trivial());\n+      return __copy_aux2(__first, __last, __result, _Trivial());\n     }\n \n   template<typename _InputIter, typename _OutputIter>\n     inline _OutputIter\n-    __copy_ni1(_InputIter __first, _InputIter __last,\n-\t       _OutputIter __result, __true_type)\n+    __copy_ni1(_InputIter __first, _InputIter __last, _OutputIter __result, \n+\t       __true_type)\n     {\n       typedef typename _Is_normal_iterator<_OutputIter>::_Normal __Normal;\n       return __copy_ni2(__first.base(), __last.base(), __result, __Normal());\n     }\n \n   template<typename _InputIter, typename _OutputIter>\n     inline _OutputIter\n-    __copy_ni1(_InputIter __first, _InputIter __last,\n-\t       _OutputIter __result, __false_type)\n+    __copy_ni1(_InputIter __first, _InputIter __last, _OutputIter __result, \n+\t       __false_type)\n     {\n       typedef typename _Is_normal_iterator<_OutputIter>::_Normal __Normal;\n       return __copy_ni2(__first, __last, __result, __Normal());\n@@ -349,14 +335,10 @@ namespace std\n        return __copy_ni1(__first, __last, __result, __Normal());\n     }\n \n-  //--------------------------------------------------\n-  // copy_backward\n-\n   template<typename _BidirectionalIter1, typename _BidirectionalIter2>\n     inline _BidirectionalIter2\n     __copy_backward(_BidirectionalIter1 __first, _BidirectionalIter1 __last, \n-\t\t    _BidirectionalIter2 __result,\n-\t\t    bidirectional_iterator_tag)\n+\t\t    _BidirectionalIter2 __result, bidirectional_iterator_tag)\n     {\n       while (__first != __last)\n         *--__result = *--__last;\n@@ -366,8 +348,7 @@ namespace std\n   template<typename _RandomAccessIter, typename _BidirectionalIter>\n     inline _BidirectionalIter\n     __copy_backward(_RandomAccessIter __first, _RandomAccessIter __last, \n-\t\t    _BidirectionalIter __result,\n-\t\t    random_access_iterator_tag)\n+\t\t    _BidirectionalIter __result, random_access_iterator_tag)\n     {\n       typename iterator_traits<_RandomAccessIter>::difference_type __n;\n       for (__n = __last - __first; __n > 0; --__n)\n@@ -380,7 +361,6 @@ namespace std\n   // have partial ordering of function templates.  All we're doing is\n   // creating a specialization so that we can turn a call to copy_backward\n   // into a memmove whenever possible.\n-\n   template<typename _BidirectionalIter1, typename _BidirectionalIter2,\n            typename _BoolType>\n     struct __copy_backward_dispatch\n@@ -389,8 +369,7 @@ namespace std\n       copy(_BidirectionalIter1 __first, _BidirectionalIter1 __last, \n \t   _BidirectionalIter2 __result)\n       {\n-        return __copy_backward(__first, __last,\n-\t                       __result,\n+        return __copy_backward(__first, __last, __result, \n \t\t\t       __iterator_category(__first));\n       }\n     };\n@@ -424,8 +403,9 @@ namespace std\n     {\n       typedef typename __type_traits<typename iterator_traits<_BI2>::value_type>\n \t\t\t    ::has_trivial_assignment_operator _Trivial;\n-      return __copy_backward_dispatch<_BI1, _BI2, _Trivial>\n-\t\t  ::copy(__first, __last, __result);\n+      return __copy_backward_dispatch<_BI1, _BI2, _Trivial>::copy(__first, \n+\t\t\t\t\t\t\t\t  __last, \n+\t\t\t\t\t\t\t\t  __result);\n     }\n \n   template <typename _BI1, typename _BI2>\n@@ -446,8 +426,9 @@ namespace std\n \t\t\t\t\t  _BI2 __result, __true_type)\n     {\n       typedef typename _Is_normal_iterator<_BI2>::_Normal __Normal;\n-      return __copy_backward_output_normal_iterator(__first.base(), __last.base(),\n-\t\t\t\t\t\t    __result, __Normal());\n+      return __copy_backward_output_normal_iterator(__first.base(),\n+\t\t\t\t\t\t    __last.base(), __result, \n+\t\t\t\t\t\t    __Normal());\n     }\n \n   template <typename _BI1, typename _BI2>\n@@ -491,10 +472,6 @@ namespace std\n     }\n \n \n-  //--------------------------------------------------\n-  // fill and fill_n\n-\n-\n   /**\n    *  @brief Fills the range [first,last) with copies of value.\n    *  @param  first  A forward iterator.\n@@ -541,7 +518,6 @@ namespace std\n     }\n \n   // Specialization: for one-byte types we can use memset.\n-\n   inline void\n   fill(unsigned char* __first, unsigned char* __last, const unsigned char& __c)\n   {\n@@ -588,9 +564,6 @@ namespace std\n     }\n \n \n-  //--------------------------------------------------\n-  // equal and mismatch\n-\n   /**\n    *  @brief Finds the places in ranges which don't match.\n    *  @param  first1  An input iterator.\n@@ -605,8 +578,7 @@ namespace std\n   */\n   template<typename _InputIter1, typename _InputIter2>\n     pair<_InputIter1, _InputIter2>\n-    mismatch(_InputIter1 __first1, _InputIter1 __last1,\n-\t     _InputIter2 __first2)\n+    mismatch(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2)\n     {\n       // concept requirements\n       __glibcpp_function_requires(_InputIteratorConcept<_InputIter1>)\n@@ -616,10 +588,11 @@ namespace std\n       __glibcpp_function_requires(_EqualityComparableConcept<\n \t    typename iterator_traits<_InputIter2>::value_type>)\n \n-      while (__first1 != __last1 && *__first1 == *__first2) {\n-\t++__first1;\n-\t++__first2;\n-      }\n+      while (__first1 != __last1 && *__first1 == *__first2) \n+\t{\n+\t  ++__first1;\n+\t  ++__first2;\n+\t}\n       return pair<_InputIter1, _InputIter2>(__first1, __first2);\n     }\n \n@@ -639,18 +612,18 @@ namespace std\n   */\n   template<typename _InputIter1, typename _InputIter2, typename _BinaryPredicate>\n     pair<_InputIter1, _InputIter2>\n-    mismatch(_InputIter1 __first1, _InputIter1 __last1,\n-\t     _InputIter2 __first2,\n+    mismatch(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2,\n \t     _BinaryPredicate __binary_pred)\n     {\n       // concept requirements\n       __glibcpp_function_requires(_InputIteratorConcept<_InputIter1>)\n       __glibcpp_function_requires(_InputIteratorConcept<_InputIter2>)\n \n-      while (__first1 != __last1 && __binary_pred(*__first1, *__first2)) {\n-\t++__first1;\n-\t++__first2;\n-      }\n+      while (__first1 != __last1 && __binary_pred(*__first1, *__first2)) \n+\t{\n+\t  ++__first1;\n+\t  ++__first2;\n+\t}\n       return pair<_InputIter1, _InputIter2>(__first1, __first2);\n     }\n \n@@ -667,8 +640,7 @@ namespace std\n   */\n   template<typename _InputIter1, typename _InputIter2>\n     inline bool\n-    equal(_InputIter1 __first1, _InputIter1 __last1,\n-\t  _InputIter2 __first2)\n+    equal(_InputIter1 __first1, _InputIter1 __last1, _InputIter2 __first2)\n     {\n       // concept requirements\n       __glibcpp_function_requires(_InputIteratorConcept<_InputIter1>)\n@@ -712,9 +684,6 @@ namespace std\n       return true;\n     }\n \n-  //--------------------------------------------------\n-  // lexicographical_compare\n-\n   /**\n    *  @brief Performs \"dictionary\" comparison on ranges.\n    *  @param  first1  An input iterator.\n@@ -742,13 +711,13 @@ namespace std\n       __glibcpp_function_requires(_LessThanComparableConcept<\n \t    typename iterator_traits<_InputIter2>::value_type>)\n \n-      for ( ; __first1 != __last1 && __first2 != __last2\n-\t    ; ++__first1, ++__first2) {\n-\tif (*__first1 < *__first2)\n-\t  return true;\n-\tif (*__first2 < *__first1)\n-\t  return false;\n-      }\n+      for (;__first1 != __last1 && __first2 != __last2; ++__first1, ++__first2) \n+\t{\n+\t  if (*__first1 < *__first2)\n+\t    return true;\n+\t  if (*__first2 < *__first1)\n+\t    return false;\n+\t}\n       return __first1 == __last1 && __first2 != __last2;\n     }\n \n@@ -775,18 +744,21 @@ namespace std\n       __glibcpp_function_requires(_InputIteratorConcept<_InputIter2>)\n \n       for ( ; __first1 != __last1 && __first2 != __last2\n-\t    ; ++__first1, ++__first2) {\n-\tif (__comp(*__first1, *__first2))\n-\t  return true;\n-\tif (__comp(*__first2, *__first1))\n-\t  return false;\n-      }\n+\t    ; ++__first1, ++__first2) \n+\t{\n+\t  if (__comp(*__first1, *__first2))\n+\t    return true;\n+\t  if (__comp(*__first2, *__first1))\n+\t    return false;\n+\t}\n       return __first1 == __last1 && __first2 != __last2;\n     }\n \n   inline bool \n-  lexicographical_compare(const unsigned char* __first1, const unsigned char* __last1,\n-\t\t\t  const unsigned char* __first2, const unsigned char* __last2)\n+  lexicographical_compare(const unsigned char* __first1, \n+\t\t\t  const unsigned char* __last1,\n+\t\t\t  const unsigned char* __first2, \n+\t\t\t  const unsigned char* __last2)\n   {\n     const size_t __len1 = __last1 - __first1;\n     const size_t __len2 = __last2 - __first2;\n@@ -813,8 +785,4 @@ namespace std\n \n } // namespace std\n \n-#endif /* __GLIBCPP_INTERNAL_ALGOBASE_H */\n-\n-// Local Variables:\n-// mode:C++\n-// End:\n+#endif "}, {"sha": "502645d4003ea7ab025e693d79e835491bd1be0f", "filename": "libstdc++-v3/include/bits/streambuf.tcc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc?ref=46c4e5d6e9e539d736eebbd7cab1d76a569af11a", "patch": "@@ -48,8 +48,12 @@ namespace std\n       if (_M_in_cur < _M_in_end)\n \t{\n \t  char_type __c = *this->_M_in_cur;\n-\t  _M_move_in_cur(1);\n \t  __ret = traits_type::to_int_type(__c);\n+\t  \n+\t  if (_M_buf_size)\n+\t    _M_move_in_cur(1);\n+\t  else\n+\t    this->underflow();\n \t}\n       else \n \t__ret = this->uflow();"}, {"sha": "77350d024e5de9360c05bd2f2596f68112fc65d0", "filename": "libstdc++-v3/include/std/std_fstream.h", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h?ref=46c4e5d6e9e539d736eebbd7cab1d76a569af11a", "patch": "@@ -121,15 +121,6 @@ namespace std\n       */\n       char_type*\t\t_M_buf; \t\n \n-      /**\n-       *  @if maint\n-       *  Actual size of internal buffer. This number is equal to the size\n-       *  of the put area + 1 position, reserved for the overflow char of\n-       *  a full area.\n-       *  @endif\n-      */\n-      size_t\t\t\t_M_buf_size;\n-\n       // Set iff _M_buf is allocated memory from _M_allocate_internal_buffer.\n       /**\n        *  @if maint\n@@ -191,9 +182,9 @@ namespace std\n \tif (_M_pback_init)\n \t  {\n \t    // Length _M_in_cur moved in the pback buffer.\n-\t    const size_t __off = this->_M_in_cur == this->_M_in_beg ? 0 : 1;\n-\t    this->setg(this->_M_buf, _M_pback_cur_save + __off, \n-\t\t       _M_pback_end_save);\n+\t    if (_M_pback_cur_save)\n+\t      _M_pback_cur_save += this->_M_in_cur != this->_M_in_beg;\n+\t    this->setg(this->_M_buf, _M_pback_cur_save, _M_pback_end_save);\n \t    _M_pback_init = false;\n \t  }\n       }\n@@ -215,7 +206,6 @@ namespace std\n       ~basic_filebuf()\n       {\n \tthis->close();\n-\t_M_buf_size = 0;\n \t_M_last_overflowed = false;\n       }\n \n@@ -375,7 +365,7 @@ namespace std\n \t    // Need to restore current position after the write.\n \t    off_type __off = this->_M_out_cur - this->_M_out_lim;\n \n-\t    // _M_file.sync() will be called within\n+\t    // _M_file.sync() will be called within.\n \t    if (traits_type::eq_int_type(this->overflow(), traits_type::eof()))\n \t      __ret = -1;\n \t    else if (__off)\n@@ -395,8 +385,8 @@ namespace std\n       virtual streamsize\n       xsgetn(char_type* __s, streamsize __n)\n       {\n-\tstreamsize __ret = 0;\n \t// Clear out pback buffer before going on to the real deal...\n+\tstreamsize __ret = 0;\n \tif (this->_M_pback_init)\n \t  {\n \t    if (__n && this->_M_in_cur == this->_M_in_beg)\n@@ -439,7 +429,7 @@ namespace std\n       {\n  \tconst bool __testin = this->_M_mode & ios_base::in;\n  \tconst bool __testout = this->_M_mode & ios_base::out;\n-\tif (_M_buf_size)\n+\tif (this->_M_buf_size)\n \t  {\n \t    if (__testin)\n \t      this->setg(this->_M_buf, this->_M_buf, this->_M_buf + __off);"}, {"sha": "c4159cc4eca1fd54e390c1880afbcb05290c1c34", "filename": "libstdc++-v3/include/std/std_streambuf.h", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h?ref=46c4e5d6e9e539d736eebbd7cab1d76a569af11a", "patch": "@@ -159,14 +159,6 @@ namespace std\n \t\t\t  __streambuf_type* __sbin,__streambuf_type* __sbout);\n       \n     protected:\n-      /**\n-       *  @if maint\n-       *  True iff _M_in_* and _M_out_* buffers should always point to\n-       *  the same place.  True for fstreams, false for sstreams.\n-       *  @endif\n-      */\n-      bool \t\t\t_M_buf_unified;\t\n-\n       //@{\n       /**\n        *  @if maint\n@@ -193,15 +185,31 @@ namespace std\n        *  @endif\n       */      \n       char_type*                _M_out_lim;    // End limit of used put area.\n-\n       //@}\n \n+      /**\n+       *  @if maint\n+       *  True iff _M_in_* and _M_out_* buffers should always point to\n+       *  the same place.  True for fstreams, false for sstreams.\n+       *  @endif\n+      */\n+      bool \t\t\t_M_buf_unified;\t\n+\n+      /**\n+       *  @if maint\n+       *  Actual size of internal buffer. This number is equal to the size\n+       *  of the put area + 1 position, reserved for the overflow char of\n+       *  a full area.\n+       *  @endif\n+      */\n+      size_t\t\t\t_M_buf_size;\n+\n       /**\n        *  @if maint\n        *  Place to stash in || out || in | out settings for current streambuf.\n        *  @endif\n       */\n-      ios_base::openmode \t_M_mode;\t\n+      ios_base::openmode \t_M_mode;\n \n       /**\n        *  @if maint\n@@ -259,6 +267,7 @@ namespace std\n       ~basic_streambuf() \n       {\n \t_M_buf_unified = false;\n+\t_M_buf_size = 0;\n \t_M_mode = ios_base::openmode(0);\n       }\n \n@@ -458,10 +467,10 @@ namespace std\n        *  - this is not an error\n       */\n       basic_streambuf()\n-      : _M_buf_unified(false), _M_in_beg(0), _M_in_cur(0),\n-      _M_in_end(0), _M_out_beg(0), _M_out_cur(0), _M_out_end(0),\n-      _M_out_lim(0), _M_mode(ios_base::openmode(0)),\n-      _M_buf_locale(locale()) \n+      : _M_in_beg(0), _M_in_cur(0), _M_in_end(0), \n+      _M_out_beg(0), _M_out_cur(0), _M_out_end(0),_M_out_lim(0), \n+      _M_buf_unified(false), _M_buf_size(BUFSIZ), \n+      _M_mode(ios_base::openmode(0)),_M_buf_locale(locale()) \n       { }\n \n       // [27.5.2.3.1] get area access"}, {"sha": "e03da5f2064924143e135857056ec9eb37c6725b", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sbumpc/char/1-in.cc", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsbumpc%2Fchar%2F1-in.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsbumpc%2Fchar%2F1-in.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsbumpc%2Fchar%2F1-in.cc?ref=46c4e5d6e9e539d736eebbd7cab1d76a569af11a", "patch": "@@ -0,0 +1,79 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+const char name_01[] = \"sgetc.txt\"; // file with data in it\n+\n+void test05() \n+{\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+  typedef filebuf::int_type \tint_type;\n+  typedef filebuf::traits_type \ttraits_type;\n+\n+  bool \t\t\t\t\ttest = true;\n+\n+  // int_type sbumpc()\n+  // if read_cur not avail returns uflow(), else return *read_cur & increment\n+\n+  // in \n+  {\n+    constraint_filebuf fb_01; \n+    fb_01.open(name_01, ios_base::in);\n+    VERIFY( !fb_01.write_position() );\n+\n+    int_type c1 = fb_01.sbumpc();\n+    VERIFY( c1 == '/' );\n+    int_type c3 = fb_01.sbumpc();\n+    VERIFY( c3 == '/' );\n+\n+    c1 = fb_01.sgetc();\n+    int_type c2 = fb_01.sbumpc();\n+    c3 = fb_01.sgetc();\n+    VERIFY( c1 == ' ' );\n+    VERIFY( c3 == '9' );\n+    VERIFY( c1 == c2 );\n+    VERIFY( c2 != c3 );\n+\n+    c1 = fb_01.sbumpc();\n+    c2 = fb_01.sbumpc();\n+    c3 = fb_01.sgetc();\n+    VERIFY( c1 == '9' );\n+    VERIFY( c2 == '9' );\n+    VERIFY( c3 == '0' );\n+\n+    VERIFY( !fb_01.write_position() );\n+    VERIFY( fb_01.read_position() );\n+  }\n+}\n+\n+main() \n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "9098a2083e7f1697acf5d5b6f3c7fa30c9fe800b", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sbumpc/char/1-io.cc", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsbumpc%2Fchar%2F1-io.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsbumpc%2Fchar%2F1-io.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsbumpc%2Fchar%2F1-io.cc?ref=46c4e5d6e9e539d736eebbd7cab1d76a569af11a", "patch": "@@ -0,0 +1,92 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+const char name_01[] = \"sgetc.txt\"; // file with data in it\n+const char name_03[] = \"tmp_sbumpc_1io.tst\"; // empty file, need to create\n+\n+void test05() \n+{\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+  typedef filebuf::int_type \tint_type;\n+  typedef filebuf::traits_type \ttraits_type;\n+\n+  bool \t\t\t\t\ttest = true;\n+\n+  // int_type sbumpc()\n+  // if read_cur not avail returns uflow(), else return *read_cur & increment\n+\n+  // in | out 1\n+  {\n+    constraint_filebuf fb_03; \n+    fb_03.open(name_03, ios_base::out | ios_base::in | ios_base::trunc); \n+    VERIFY( fb_03.write_position() );\n+    VERIFY( !fb_03.read_position() );\n+    int_type c5 = fb_03.sbumpc();\n+    VERIFY( c5 == traits_type::eof() );\n+    VERIFY( fb_03.write_position() );\n+    VERIFY( !fb_03.read_position() );\n+  }\n+\n+  // in | out 2\n+  {\n+    constraint_filebuf fb_01; \n+    fb_01.open(name_01, ios_base::in | ios_base::out);\n+    VERIFY( fb_01.write_position() );\n+\n+     int_type c1 = fb_01.sbumpc();\n+    VERIFY( c1 == '/' );\n+    int_type c3 = fb_01.sbumpc();\n+    VERIFY( c3 == '/' );\n+\n+    c1 = fb_01.sgetc();\n+    int_type c2 = fb_01.sbumpc();\n+    c3 = fb_01.sgetc();\n+    VERIFY( c1 == ' ' );\n+    VERIFY( c3 == '9' );\n+    VERIFY( c1 == c2 );\n+    VERIFY( c2 != c3 );\n+\n+    c1 = fb_01.sbumpc();\n+    c2 = fb_01.sbumpc();\n+    c3 = fb_01.sgetc();\n+    VERIFY( c1 == '9' );\n+    VERIFY( c2 == '9' );\n+    VERIFY( c3 == '0' );\n+\n+    VERIFY( fb_01.write_position() );\n+    VERIFY( fb_01.read_position() );\n+  }\n+}\n+\n+main() \n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "ff0cb97dd5da4ad69a21ae4793627c534dbb963b", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sbumpc/char/1-out.cc", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsbumpc%2Fchar%2F1-out.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsbumpc%2Fchar%2F1-out.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsbumpc%2Fchar%2F1-out.cc?ref=46c4e5d6e9e539d736eebbd7cab1d76a569af11a", "patch": "@@ -0,0 +1,63 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+const char name_02[] = \"tmp_sbumpc_1out.tst\"; // empty file, need to create\n+\n+void test05() \n+{\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+  typedef filebuf::int_type \tint_type;\n+  typedef filebuf::traits_type \ttraits_type;\n+\n+  bool \t\t\t\t\ttest = true;\n+\n+  // int_type sbumpc()\n+  // if read_cur not avail returns uflow(), else return *read_cur & increment\n+\n+  // out\n+  {\n+    constraint_filebuf fb_02; \n+    fb_02.open(name_02, ios_base::out | ios_base::trunc);\n+    VERIFY( fb_02.write_position() );\n+    VERIFY( !fb_02.read_position() );\n+    int_type c2 = fb_02.sbumpc();\n+    VERIFY( c2 == traits_type::eof() );\n+    int_type c4 = fb_02.sbumpc();\n+    VERIFY( c4 == traits_type::eof() );\n+    VERIFY( fb_02.write_position() );\n+    VERIFY( !fb_02.read_position() );\n+  }\n+}\n+\n+main() \n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "d2c7ccd53b471291576e9f432e2262074d66d7c8", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sbumpc/char/1.cc", "status": "removed", "additions": 0, "deletions": 106, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/821bcbd221a5a1063e1fbac4e1612961f24634ec/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsbumpc%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/821bcbd221a5a1063e1fbac4e1612961f24634ec/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsbumpc%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsbumpc%2Fchar%2F1.cc?ref=821bcbd221a5a1063e1fbac4e1612961f24634ec", "patch": "@@ -1,106 +0,0 @@\n-// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n-\n-// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// 27.8.1.4 Overridden virtual functions\n-\n-#include <fstream>\n-#include <testsuite_hooks.h>\n-\n-// @require@ %-*.tst %-*.txt\n-// @diff@ %-*.tst %*.txt\n-\n-// NB: This test assumes that _M_buf_size == 40, and not the usual\n-// buffer_size length of BUFSIZ (8192), so that overflow/underflow can be\n-// simulated a bit more readily.\n-// NRB (Nota Really Bene): setting it to 40 breaks the test, as intended.\n-const int buffer_size = 8192;\n-//const int buffer_size = 40;\n-\n-const char name_01[] = \"filebuf_virtuals-1.txt\"; // file with data in it\n-const char name_02[] = \"filebuf_virtuals-2.txt\"; // empty file, need to create\n-const char name_03[] = \"filebuf_virtuals-3.txt\"; // empty file, need to create\n-\n-class derived_filebuf: public std::filebuf\n-{\n- public:\n-  void\n-  set_size(int_type __size) { _M_buf_size = __size; }\n-};\n-\n-derived_filebuf fb_01; // in \n-derived_filebuf fb_02; // out\n-derived_filebuf fb_03; // in | out\n-\n-// Initialize filebufs to be the same size regardless of platform.\n-void test03()\n-{\n-  fb_01.set_size(buffer_size);\n-  fb_02.set_size(buffer_size);\n-  fb_03.set_size(buffer_size);\n-}\n-\n-// Test overloaded virtual functions.\n-void test05() \n-{\n-  using namespace std;\n-  typedef filebuf::int_type \tint_type;\n-  typedef filebuf::traits_type \ttraits_type;\n-  typedef filebuf::pos_type \tpos_type;\n-  typedef filebuf::off_type \toff_type;\n-  typedef size_t \t\t\tsize_type;\n-\n-  bool \t\t\t\t\ttest = true;\n-  filebuf \t\t\t\tf_tmp;\n-  streamsize \t\t\tstrmsz_1, strmsz_2;\n-  streamoff  \t\t\tstrmof_1, strmof_2;\n-  int \t\t\t\t\ti = 0, j = 0, k = 0;\n-\n-  // GET\n-  fb_01.open(name_01, ios_base::in);\n-  fb_02.open(name_02, ios_base::out | ios_base::trunc);\n-  fb_03.open(name_03, ios_base::out | ios_base::in | ios_base::trunc); \n-  strmof_1 = fb_01.in_avail();\n-  strmof_2 = fb_02.in_avail();\n-  strmof_1 = fb_03.in_avail(); \n-\n-  // int_type sbumpc()\n-  // if read_cur not avail returns uflow(), else return *read_cur & increment\n-  int_type c1 = fb_01.sbumpc();\n-  int_type c2 = fb_02.sbumpc();\n-  VERIFY( c1 != c2 );\n-  VERIFY( c1 == '/' );\n-  VERIFY( c2 == -1 );\n-  int_type c3 = fb_01.sbumpc();\n-  int_type c4 = fb_02.sbumpc();\n-  VERIFY( c3 != c4 );\n-  VERIFY( c1 == c3 ); // fluke, both happen to be '/'\n-  VERIFY( c2 == c4 );\n-  int_type c5 = fb_03.sbumpc();\n-  VERIFY( c5 == traits_type::eof() );\n-  // XXX should do some kind of test to make sure that internal\n-  // buffers point to the same thing, to check consistancy.\n-}\n-\n-main() \n-{\n-  test03();\n-  test05();\n-  return 0;\n-}"}, {"sha": "d0f256ee10ca094866647262a5ed500828e20f8f", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sbumpc/char/2-in.cc", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsbumpc%2Fchar%2F2-in.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsbumpc%2Fchar%2F2-in.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsbumpc%2Fchar%2F2-in.cc?ref=46c4e5d6e9e539d736eebbd7cab1d76a569af11a", "patch": "@@ -0,0 +1,79 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+const char name_01[] = \"sgetc.txt\"; // file with data in it\n+\n+void test05() \n+{\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+  typedef filebuf::int_type \tint_type;\n+  typedef filebuf::traits_type \ttraits_type;\n+\n+  bool \t\t\t\t\ttest = true;\n+\n+  // int_type sbumpc()\n+  // if read_cur not avail returns uflow(), else return *read_cur & increment\n+\n+  // in \n+  {\n+    constraint_filebuf fb_01; \n+    fb_01.pubsetbuf(0, 0);\n+    fb_01.open(name_01, ios_base::in);\n+    VERIFY( fb_01.unbuffered() );\n+\n+    int_type c1 = fb_01.sbumpc();\n+    VERIFY( c1 == '/' );\n+    int_type c3 = fb_01.sbumpc();\n+    VERIFY( c3 == '/' );\n+\n+    c1 = fb_01.sgetc();\n+    int_type c2 = fb_01.sbumpc();\n+    c3 = fb_01.sgetc();\n+    VERIFY( c1 == ' ' );\n+    VERIFY( c3 == '9' );\n+    VERIFY( c1 == c2 );\n+    VERIFY( c2 != c3 );\n+\n+    c1 = fb_01.sbumpc();\n+    c2 = fb_01.sbumpc();\n+    c3 = fb_01.sgetc();\n+    VERIFY( c1 == '9' );\n+    VERIFY( c2 == '9' );\n+    VERIFY( c3 == '0' );\n+\n+    VERIFY( fb_01.unbuffered() );\n+  }\n+}\n+\n+main() \n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "ef1f28f786eacac207e99f9058586ba013867e87", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sbumpc/char/2-io.cc", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsbumpc%2Fchar%2F2-io.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsbumpc%2Fchar%2F2-io.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsbumpc%2Fchar%2F2-io.cc?ref=46c4e5d6e9e539d736eebbd7cab1d76a569af11a", "patch": "@@ -0,0 +1,91 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+const char name_01[] = \"sgetc.txt\"; // file with data in it\n+const char name_03[] = \"tmp_sbumpc_2io.tst\"; // empty file, need to create\n+\n+void test05() \n+{\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+  typedef filebuf::int_type \tint_type;\n+  typedef filebuf::traits_type \ttraits_type;\n+\n+  bool \t\t\t\t\ttest = true;\n+\n+  // int_type sbumpc()\n+  // if read_cur not avail returns uflow(), else return *read_cur & increment\n+\n+  // in | out 1\n+  {\n+    constraint_filebuf fb_03;\n+    fb_03.pubsetbuf(0, 0); \n+    fb_03.open(name_03, ios_base::out | ios_base::in | ios_base::trunc); \n+    VERIFY( fb_03.unbuffered() );\n+    int_type c5 = fb_03.sbumpc();\n+    VERIFY( c5 == traits_type::eof() );\n+    VERIFY( fb_03.unbuffered() );\n+  }\n+\n+  // in | out 2\n+  {\n+    constraint_filebuf fb_01; \n+    fb_01.pubsetbuf(0, 0);\n+    fb_01.open(name_01, ios_base::in | ios_base::out);\n+    VERIFY( fb_01.unbuffered() );\n+\n+    int_type c1 = fb_01.sbumpc();\n+    VERIFY( c1 == '/' );\n+    int_type c3 = fb_01.sbumpc();\n+    VERIFY( c3 == '/' );\n+\n+    c1 = fb_01.sgetc();\n+    int_type c2 = fb_01.sbumpc();\n+    c3 = fb_01.sgetc();\n+    VERIFY( c1 == ' ' );\n+    VERIFY( c3 == '9' );\n+    VERIFY( c1 == c2 );\n+    VERIFY( c2 != c3 );\n+\n+    c1 = fb_01.sbumpc();\n+    c2 = fb_01.sbumpc();\n+    c3 = fb_01.sgetc();\n+    VERIFY( c1 == '9' );\n+    VERIFY( c2 == '9' );\n+    VERIFY( c3 == '0' );\n+\n+    VERIFY( fb_01.unbuffered() );\n+  }\n+}\n+\n+main() \n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "1d8df086bcce74bbaf1a7b4ecd319d40e3e5ee10", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sbumpc/char/2-out.cc", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsbumpc%2Fchar%2F2-out.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsbumpc%2Fchar%2F2-out.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsbumpc%2Fchar%2F2-out.cc?ref=46c4e5d6e9e539d736eebbd7cab1d76a569af11a", "patch": "@@ -0,0 +1,64 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+const char name_02[] = \"tmp_sbumpc_2out.tst\"; // empty file, need to create\n+\n+void test05() \n+{\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+  typedef filebuf::int_type \tint_type;\n+  typedef filebuf::traits_type \ttraits_type;\n+\n+  bool \t\t\t\t\ttest = true;\n+\n+  // int_type sbumpc()\n+  // if read_cur not avail returns uflow(), else return *read_cur & increment\n+\n+  // out\n+  {\n+    constraint_filebuf fb_02; \n+    fb_02.pubsetbuf(0, 0);\n+    fb_02.open(name_02, ios_base::out | ios_base::trunc);\n+    VERIFY( fb_02.unbuffered() );\n+    VERIFY( !fb_02.read_position() );\n+    int_type c2 = fb_02.sbumpc();\n+    VERIFY( c2 == traits_type::eof() );\n+    int_type c4 = fb_02.sbumpc();\n+    VERIFY( c4 == traits_type::eof() );\n+    VERIFY( fb_02.unbuffered() );\n+    VERIFY( !fb_02.read_position() );\n+  }\n+}\n+\n+main() \n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "7ae7cdccee4fbf86f5a9e7cdf2f7bee06cc4c38a", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sgetc/char/1-in.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetc%2Fchar%2F1-in.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetc%2Fchar%2F1-in.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetc%2Fchar%2F1-in.cc?ref=46c4e5d6e9e539d736eebbd7cab1d76a569af11a", "patch": "@@ -0,0 +1,71 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+const char name_01[] = \"filebuf_virtuals-1.txt\"; // file with data in it\n+\n+// Test overloaded virtual functions.\n+void test05() \n+{\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+  typedef std::filebuf::int_type \tint_type;\n+  typedef filebuf::traits_type \t\ttraits_type;\n+\n+  bool \t\t\t\t\ttest = true;\n+  int_type \t\t\tc1, c2, c3;\n+\n+  // int_type sgetc()\n+  // if read_cur not avail, return uflow(), else return *read_cur  \n+\n+  // in\n+  {\n+    constraint_filebuf fb_01; // in \n+    fb_01.open(name_01, ios::in);\n+    VERIFY( !fb_01.write_position() );\n+    c1 = fb_01.sgetc();\n+    VERIFY( c1 == '/' );\n+    c2 = fb_01.sgetc();\n+    VERIFY( c1 == c2 );\n+    fb_01.sbumpc();\n+    c1 = fb_01.sbumpc();\n+    c2 = fb_01.sgetc();\n+    c3 = fb_01.sgetc();\n+    VERIFY( c1 == '/' );\n+    VERIFY( c2 == ' ' );\n+    VERIFY( c3 == ' ' );\n+    VERIFY( !fb_01.write_position() );\n+    VERIFY( fb_01.read_position() );\n+  }\n+}\n+\n+main() \n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "6882234f1d5ca54bcba244fad2f9c3da0536bd79", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sgetc/char/1-io.cc", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetc%2Fchar%2F1-io.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetc%2Fchar%2F1-io.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetc%2Fchar%2F1-io.cc?ref=46c4e5d6e9e539d736eebbd7cab1d76a569af11a", "patch": "@@ -0,0 +1,86 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+const char name_01[] = \"sgetc.txt\"; // file with data in it\n+const char name_03[] = \"tmp_sgetc_1io.tst\"; // empty file, need to create\n+\n+// Test overloaded virtual functions.\n+void test05() \n+{\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+  typedef std::filebuf::int_type \tint_type;\n+  typedef filebuf::traits_type \t\ttraits_type;\n+\n+  bool \t\t\t\t\ttest = true;\n+  int_type \t\t\tc1, c2, c3;\n+\n+  // int_type sgetc()\n+  // if read_cur not avail, return uflow(), else return *read_cur  \n+\n+  // in | out 1\n+  {\n+    constraint_filebuf fb_03; // in | out\n+    fb_03.open(name_03, ios::out | ios::in | ios::trunc); \n+    VERIFY( fb_03.write_position() );\n+    VERIFY( !fb_03.read_position() );\n+    c1 = fb_03.sgetc();\n+    c2 = fb_03.sbumpc();\n+    VERIFY( c1 == traits_type::eof() );\n+    VERIFY( c1 == c2 );\n+    VERIFY( fb_03.write_position() );\n+    VERIFY( !fb_03.read_position() );\n+  }\n+\n+  // in | out 2\n+  {\n+    constraint_filebuf fb_01; // in \n+    fb_01.open(name_01, ios::in | ios::out);\n+    VERIFY( fb_01.write_position() );\n+    c1 = fb_01.sgetc();\n+    VERIFY( c1 == '/' );\n+    c2 = fb_01.sgetc();\n+    VERIFY( c1 == c2 );\n+    fb_01.sbumpc();\n+    c1 = fb_01.sbumpc();\n+    c2 = fb_01.sgetc();\n+    c3 = fb_01.sgetc();\n+    VERIFY( c1 == '/' );\n+    VERIFY( c2 == ' ' );\n+    VERIFY( c3 == ' ' );\n+    VERIFY( fb_01.write_position() );\n+    VERIFY( fb_01.read_position() );\n+  }\n+}\n+\n+main() \n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "30d4d1b5e403d2078e6e8bada5af6eed3b11c4e2", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sgetc/char/1-out.cc", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetc%2Fchar%2F1-out.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetc%2Fchar%2F1-out.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetc%2Fchar%2F1-out.cc?ref=46c4e5d6e9e539d736eebbd7cab1d76a569af11a", "patch": "@@ -0,0 +1,69 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+const char name_02[] = \"tmp_sgetc_1out.tst\"; // empty file, need to create\n+\n+// Test overloaded virtual functions.\n+void test05() \n+{\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+  typedef std::filebuf::int_type \tint_type;\n+  typedef filebuf::traits_type \t\ttraits_type;\n+\n+  bool \t\t\t\t\ttest = true;\n+  int_type \t\t\tc1, c2, c3;\n+\n+  // int_type sgetc()\n+  // if read_cur not avail, return uflow(), else return *read_cur  \n+\n+  // out\n+  {\n+    constraint_filebuf fb_02; // out\n+    fb_02.open(name_02, ios::out | ios::trunc);    \n+    VERIFY( fb_02.write_position() );\n+    VERIFY( !fb_02.read_position() );\n+    c1 = fb_02.sgetc();\n+    VERIFY( c1 == traits_type::eof() );\n+    c2 = fb_02.sgetc();\n+    VERIFY( c2 == traits_type::eof() );\n+    fb_02.sbumpc();\n+    c1 = fb_02.sbumpc();\n+    c2 = fb_02.sgetc();\n+    VERIFY( c1 == c2 );\n+    VERIFY( fb_02.write_position() );\n+    VERIFY( !fb_02.read_position() );\n+  }\n+}\n+\n+main() \n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "37573c8edfdae60c9b9699d07bc9d2e455e5f94e", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sgetc/char/1.cc", "status": "removed", "additions": 0, "deletions": 107, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/821bcbd221a5a1063e1fbac4e1612961f24634ec/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetc%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/821bcbd221a5a1063e1fbac4e1612961f24634ec/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetc%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetc%2Fchar%2F1.cc?ref=821bcbd221a5a1063e1fbac4e1612961f24634ec", "patch": "@@ -1,107 +0,0 @@\n-// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n-\n-// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// 27.8.1.4 Overridden virtual functions\n-\n-#include <fstream>\n-#include <testsuite_hooks.h>\n-\n-// @require@ %-*.tst %-*.txt\n-// @diff@ %-*.tst %*.txt\n-\n-// NB: This test assumes that _M_buf_size == 40, and not the usual\n-// buffer_size length of BUFSIZ (8192), so that overflow/underflow can be\n-// simulated a bit more readily.\n-// NRB (Nota Really Bene): setting it to 40 breaks the test, as intended.\n-const int buffer_size = 8192;\n-//const int buffer_size = 40;\n-\n-const char name_01[] = \"filebuf_virtuals-1.txt\"; // file with data in it\n-const char name_02[] = \"filebuf_virtuals-2.txt\"; // empty file, need to create\n-const char name_03[] = \"filebuf_virtuals-3.txt\"; // empty file, need to create\n-\n-class derived_filebuf: public std::filebuf\n-{\n- public:\n-  void\n-  set_size(int_type __size) { _M_buf_size = __size; }\n-};\n-\n-derived_filebuf fb_01; // in \n-derived_filebuf fb_02; // out\n-derived_filebuf fb_03; // in | out\n-\n-// Initialize filebufs to be the same size regardless of platform.\n-void test03()\n-{\n-  fb_01.set_size(buffer_size);\n-  fb_02.set_size(buffer_size);\n-  fb_03.set_size(buffer_size);\n-}\n-\n-// Test overloaded virtual functions.\n-void test05() \n-{\n-  typedef std::filebuf::int_type \tint_type;\n-  typedef std::filebuf::traits_type \ttraits_type;\n-  typedef std::filebuf::pos_type \tpos_type;\n-  typedef std::filebuf::off_type \toff_type;\n-  typedef size_t \t\t\tsize_type;\n-\n-  bool \t\t\t\t\ttest = true;\n-  std::filebuf \t\t\t\tf_tmp;\n-  std::streamsize \t\t\tstrmsz_1, strmsz_2;\n-  std::streamoff  \t\t\tstrmof_1, strmof_2;\n-  int \t\t\t\t\ti = 0, j = 0, k = 0;\n-\n-  // GET\n-  fb_01.open(name_01, std::ios_base::in);\n-  fb_02.open(name_02, std::ios_base::out | std::ios_base::trunc);\n-  fb_03.open(name_03, std::ios_base::out | std::ios_base::in | std::ios_base::trunc); \n-  strmof_1 = fb_01.in_avail();\n-  strmof_2 = fb_02.in_avail();\n-  strmof_1 = fb_03.in_avail(); \n-\n-  int_type c1 = fb_01.sbumpc();\n-  int_type c2 = fb_02.sbumpc();\n-  int_type c3 = fb_01.sbumpc();\n-  int_type c4 = fb_02.sbumpc();\n-  int_type c5 = fb_03.sbumpc();\n-\n-  // int_type sgetc()\n-  // if read_cur not avail, return uflow(), else return *read_cur  \n-  int_type c6 = fb_01.sgetc();\n-  int_type c7 = fb_02.sgetc();\n-  VERIFY( c6 != c3 );\n-  VERIFY( c7 == c4 ); // both -1\n-  int_type c8 = fb_01.sgetc();\n-  int_type c9 = fb_02.sgetc();\n-  VERIFY( c6 == c8 );\n-  VERIFY( c7 == c9 );\n-  c5 = fb_03.sgetc();\n-  VERIFY( c5 == traits_type::eof() );\n-}\n-\n-main() \n-{\n-  test03();\n-  test05();\n-  return 0;\n-}"}, {"sha": "979a3fd38457eaaceef0dd605f37ed2558c60750", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sgetc/char/2-in.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetc%2Fchar%2F2-in.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetc%2Fchar%2F2-in.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetc%2Fchar%2F2-in.cc?ref=46c4e5d6e9e539d736eebbd7cab1d76a569af11a", "patch": "@@ -0,0 +1,71 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+const char name_01[] = \"sgetc.txt\"; // file with data in it\n+\n+// Test overloaded virtual functions.\n+void test05() \n+{\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+  typedef std::filebuf::int_type \tint_type;\n+  typedef filebuf::traits_type \t\ttraits_type;\n+\n+  bool \t\t\t\t\ttest = true;\n+  int_type \t\t\tc1, c2, c3;\n+\n+  // int_type sgetc()\n+  // if read_cur not avail, return uflow(), else return *read_cur  \n+\n+  // in\n+  {\n+    constraint_filebuf fb_01; // in \n+    fb_01.pubsetbuf(0, 0);\n+    fb_01.open(name_01, ios::in);\n+    VERIFY( fb_01.unbuffered() );\n+    c1 = fb_01.sgetc();\n+    VERIFY( c1 == '/' );\n+    c2 = fb_01.sgetc();\n+    VERIFY( c1 == c2 );\n+    fb_01.sbumpc();\n+    c1 = fb_01.sbumpc();\n+    c2 = fb_01.sgetc();\n+    c3 = fb_01.sgetc();\n+    VERIFY( c1 == '/' );\n+    VERIFY( c2 == ' ' );\n+    VERIFY( c3 == ' ' );\n+    VERIFY( fb_01.unbuffered() );\n+  }\n+}\n+\n+main() \n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "e12ef3455cd9615820c4049fd0907fd2bf968aaa", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sgetc/char/2-io.cc", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetc%2Fchar%2F2-io.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetc%2Fchar%2F2-io.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetc%2Fchar%2F2-io.cc?ref=46c4e5d6e9e539d736eebbd7cab1d76a569af11a", "patch": "@@ -0,0 +1,85 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+const char name_01[] = \"sgetc.txt\"; // file with data in it\n+const char name_03[] = \"tmp_sgetc_2io.tst\"; // empty file, need to create\n+\n+// Test overloaded virtual functions.\n+void test05() \n+{\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+  typedef std::filebuf::int_type \tint_type;\n+  typedef filebuf::traits_type \t\ttraits_type;\n+\n+  bool \t\t\t\t\ttest = true;\n+  int_type \t\t\tc1, c2, c3;\n+\n+  // int_type sgetc()\n+  // if read_cur not avail, return uflow(), else return *read_cur  \n+\n+  // in | out 1\n+  {\n+    constraint_filebuf fb_03; // in | out\n+    fb_03.pubsetbuf(0, 0);\n+    fb_03.open(name_03, ios::out | ios::in | ios::trunc); \n+    VERIFY( fb_03.unbuffered() );\n+    c1 = fb_03.sgetc();\n+    c2 = fb_03.sbumpc();\n+    VERIFY( c1 == traits_type::eof() );\n+    VERIFY( c1 == c2 );\n+    VERIFY( fb_03.unbuffered() );\n+  }\n+\n+  // in | out 2\n+  {\n+    constraint_filebuf fb_01; // in \n+    fb_01.pubsetbuf(0, 0);\n+    fb_01.open(name_01, ios::in | ios::out);\n+    VERIFY( fb_01.unbuffered() );\n+    c1 = fb_01.sgetc();\n+    VERIFY( c1 == '/' );\n+    c2 = fb_01.sgetc();\n+    VERIFY( c1 == c2 );\n+    fb_01.sbumpc();\n+    c1 = fb_01.sbumpc();\n+    c2 = fb_01.sgetc();\n+    c3 = fb_01.sgetc();\n+    VERIFY( c1 == '/' );\n+    VERIFY( c2 == ' ' );\n+    VERIFY( c3 == ' ' );\n+    VERIFY( fb_01.unbuffered() );\n+  }\n+}\n+\n+main() \n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "491c028c281871bdf1c1320ed2653b599e3f89b4", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sgetc/char/2-out.cc", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetc%2Fchar%2F2-out.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetc%2Fchar%2F2-out.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetc%2Fchar%2F2-out.cc?ref=46c4e5d6e9e539d736eebbd7cab1d76a569af11a", "patch": "@@ -0,0 +1,70 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+const char name_02[] = \"tmp_sgetc_2out.tst\"; // empty file, need to create\n+\n+// Test overloaded virtual functions.\n+void test05() \n+{\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+  typedef std::filebuf::int_type \tint_type;\n+  typedef filebuf::traits_type \t\ttraits_type;\n+\n+  bool \t\t\t\t\ttest = true;\n+  int_type \t\t\tc1, c2, c3;\n+\n+  // int_type sgetc()\n+  // if read_cur not avail, return uflow(), else return *read_cur  \n+\n+  // out\n+  {\n+    constraint_filebuf fb_02; // out\n+    fb_02.pubsetbuf(0, 0);\n+    fb_02.open(name_02, ios::out | ios::trunc);    \n+    VERIFY( fb_02.unbuffered() );\n+    VERIFY( !fb_02.read_position() );\n+    c1 = fb_02.sgetc();\n+    VERIFY( c1 == traits_type::eof() );\n+    c2 = fb_02.sgetc();\n+    VERIFY( c2 == traits_type::eof() );\n+    fb_02.sbumpc();\n+    c1 = fb_02.sbumpc();\n+    c2 = fb_02.sgetc();\n+    VERIFY( c1 == c2 );\n+    VERIFY( fb_02.unbuffered() );\n+    VERIFY( !fb_02.read_position() );\n+  }\n+}\n+\n+main() \n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "021a1c89d68f23f6657a599f093563aaf20374f6", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sgetn/char/1-in.cc", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetn%2Fchar%2F1-in.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetn%2Fchar%2F1-in.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetn%2Fchar%2F1-in.cc?ref=46c4e5d6e9e539d736eebbd7cab1d76a569af11a", "patch": "@@ -0,0 +1,83 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+const char name_01[] = \"sgetn.txt\"; // file with data in it\n+\n+// Test overloaded virtual functions.\n+void test05() \n+{\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+  typedef filebuf::int_type \tint_type;\n+  typedef filebuf::traits_type \ttraits_type;\n+\n+  bool \t\t\t\t\ttest = true;\n+\n+  streamsize \t\t\tstrmsz_1, strmsz_2, strmsz_3;\n+  int \t\t\t\t\ti = 0, j = 0, k = 0;\n+  char carray1[13] = \"\";\n+  char carray2[8192] = \"\";\n+  int_type \t\t\tc1, c2, c3, c4;\n+  \n+  // streamsize sgetn(char_type *s, streamsize n)\n+  // streamsize xsgetn(char_type *s, streamsize n)\n+  // assign up to n chars to s from input sequence, indexing in_cur as\n+  // approp and returning the number of chars assigned\n+\n+  // in \n+  {\n+    constraint_filebuf fb_01; \n+    fb_01.open(name_01, ios_base::in);\n+    VERIFY( !fb_01.write_position() );\n+    strmsz_1 = fb_01.in_avail(); // 8261\n+    strmsz_2 = fb_01.sgetn(carray1, 10);\n+    VERIFY( strmsz_2 == 10 );\n+    strmsz_2 = fb_01.in_avail(); \n+    VERIFY( strmsz_1 > strmsz_2 );\n+    c1 = fb_01.sgetc();\n+    VERIFY( c1 == 'b' );  \n+    strmsz_1 = fb_01.in_avail();\n+    strmsz_2 = fb_01.sgetn(carray2, strmsz_1 + 5);\n+    VERIFY( strmsz_1 == strmsz_2 - 5 ); \n+    c4 = fb_01.sgetc(); // buffer should have underflowed from above.\n+    VERIFY( c4 == 'h' );\n+    strmsz_1 = fb_01.in_avail();\n+    VERIFY( strmsz_1 > 0 );\n+    strmsz_2 = fb_01.sgetn(carray2, strmsz_1 + 5);\n+    VERIFY( strmsz_1 == strmsz_2 ); //at the end of the actual file \n+    VERIFY( !fb_01.write_position() );\n+    VERIFY( !fb_01.read_position() );\n+  }\n+}\n+\n+main() \n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "432ed6cdab5cbd08cf41f047358aa818411afb56", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sgetn/char/1-io.cc", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetn%2Fchar%2F1-io.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetn%2Fchar%2F1-io.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetn%2Fchar%2F1-io.cc?ref=46c4e5d6e9e539d736eebbd7cab1d76a569af11a", "patch": "@@ -0,0 +1,96 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+const char name_01[] = \"sgetn.txt\"; // file with data in it\n+const char name_03[] = \"tmp_sgetn_1io.tst\"; // empty file, need to create\n+\n+// Test overloaded virtual functions.\n+void test05() \n+{\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+  typedef filebuf::int_type \tint_type;\n+  typedef filebuf::traits_type \ttraits_type;\n+\n+  bool \t\t\t\t\ttest = true;\n+\n+  streamsize \t\t\tstrmsz_1, strmsz_2, strmsz_3;\n+  int \t\t\t\t\ti = 0, j = 0, k = 0;\n+  char carray1[13] = \"\";\n+  char carray2[8192] = \"\";\n+  int_type \t\t\tc1, c2, c3, c4;\n+  \n+  // streamsize sgetn(char_type *s, streamsize n)\n+  // streamsize xsgetn(char_type *s, streamsize n)\n+  // assign up to n chars to s from input sequence, indexing in_cur as\n+  // approp and returning the number of chars assigned\n+\n+  // in | out 1\n+  {\n+    constraint_filebuf fb_03; \n+    fb_03.open(name_03, ios_base::out | ios_base::in | ios_base::trunc); \n+    VERIFY( fb_03.write_position() );\n+    VERIFY( !fb_03.read_position() );\n+    strmsz_1 = fb_03.sgetn(carray1, 10);\n+    VERIFY( strmsz_1 == 0 ); \n+    VERIFY( fb_03.write_position() );\n+    VERIFY( !fb_03.read_position() );\n+  }\n+\n+  // in | out 2\n+  {\n+    constraint_filebuf fb_01; \n+    fb_01.open(name_01, ios_base::in | ios_base::out);\n+    VERIFY( fb_01.write_position() );\n+    strmsz_1 = fb_01.in_avail();\n+    strmsz_2 = fb_01.sgetn(carray1, 10);\n+    VERIFY( strmsz_2 == 10 );\n+    strmsz_2 = fb_01.in_avail(); \n+    VERIFY( strmsz_1 > strmsz_2 );\n+    c1 = fb_01.sgetc();\n+    VERIFY( c1 == 'b' );  \n+    strmsz_1 = fb_01.in_avail();\n+    strmsz_2 = fb_01.sgetn(carray2, strmsz_1 + 5);\n+    VERIFY( strmsz_1 == strmsz_2 - 5 ); \n+    c4 = fb_01.sgetc(); // buffer should have underflowed from above.\n+    VERIFY( c4 == 'h' );\n+    strmsz_1 = fb_01.in_avail();\n+    VERIFY( strmsz_1 > 0 );\n+    strmsz_2 = fb_01.sgetn(carray2, strmsz_1 + 5);\n+    VERIFY( strmsz_1 == strmsz_2 ); //at the end of the actual file \n+    VERIFY( fb_01.write_position() );\n+    VERIFY( !fb_01.read_position() );\n+  }\n+}\n+\n+main() \n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "dcefe01c6a13e67725b3232fab94e66e7fb114de", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sgetn/char/1-out.cc", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetn%2Fchar%2F1-out.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetn%2Fchar%2F1-out.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetn%2Fchar%2F1-out.cc?ref=46c4e5d6e9e539d736eebbd7cab1d76a569af11a", "patch": "@@ -0,0 +1,79 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+const char name_02[] = \"tmp_sgetn_1out.tst\"; // empty file, need to create\n+\n+// Test overloaded virtual functions.\n+void test05() \n+{\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+  typedef filebuf::int_type \tint_type;\n+  typedef filebuf::traits_type \ttraits_type;\n+\n+  bool \t\t\t\t\ttest = true;\n+\n+  streamsize \t\t\tstrmsz_1, strmsz_2, strmsz_3;\n+  int \t\t\t\t\ti = 0, j = 0, k = 0;\n+  char carray1[13] = \"\";\n+  char carray2[8192] = \"\";\n+  int_type \t\t\tc1, c2, c3, c4;\n+  \n+  // streamsize sgetn(char_type *s, streamsize n)\n+  // streamsize xsgetn(char_type *s, streamsize n)\n+  // assign up to n chars to s from input sequence, indexing in_cur as\n+  // approp and returning the number of chars assigned\n+\n+  // out\n+  {\n+    constraint_filebuf fb_02; \n+    fb_02.open(name_02, ios_base::out | ios_base::trunc);\n+    VERIFY( fb_02.write_position() );\n+    VERIFY( !fb_02.read_position() );\n+    strmsz_2 = fb_02.in_avail();\n+    strmsz_2 = fb_02.sgetn(carray2, 10);\n+    VERIFY( strmsz_2 == 0 );\n+    c2 = fb_02.sgetc();\n+    VERIFY( c2 == traits_type::eof() );\n+    strmsz_1 = fb_02.in_avail();\n+    strmsz_2 = fb_02.sgetn(carray2, strmsz_1 + 5);\n+    VERIFY( strmsz_1 == -1 );\n+    VERIFY( strmsz_2 == 0 );\n+    c4 = fb_02.sgetc(); \n+    VERIFY( c4 == traits_type::eof() );\n+    VERIFY( fb_02.write_position() );\n+    VERIFY( !fb_02.read_position() );\n+  }\n+}\n+\n+main() \n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "d890f3e7dcf01dc247df34d81c1653862539e783", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sgetn/char/1.cc", "status": "removed", "additions": 0, "deletions": 148, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/821bcbd221a5a1063e1fbac4e1612961f24634ec/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetn%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/821bcbd221a5a1063e1fbac4e1612961f24634ec/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetn%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetn%2Fchar%2F1.cc?ref=821bcbd221a5a1063e1fbac4e1612961f24634ec", "patch": "@@ -1,148 +0,0 @@\n-// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n-\n-// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// 27.8.1.4 Overridden virtual functions\n-\n-#include <fstream>\n-#include <testsuite_hooks.h>\n-\n-// @require@ %-*.tst %-*.txt\n-// @diff@ %-*.tst %*.txt\n-\n-// NB: This test assumes that _M_buf_size == 40, and not the usual\n-// buffer_size length of BUFSIZ (8192), so that overflow/underflow can be\n-// simulated a bit more readily.\n-// NRB (Nota Really Bene): setting it to 40 breaks the test, as intended.\n-const int buffer_size = 8192;\n-//const int buffer_size = 40;\n-\n-const char name_01[] = \"filebuf_virtuals-1.txt\"; // file with data in it\n-const char name_02[] = \"filebuf_virtuals-2.txt\"; // empty file, need to create\n-const char name_03[] = \"filebuf_virtuals-3.txt\"; // empty file, need to create\n-\n-class derived_filebuf: public std::filebuf\n-{\n- public:\n-  void\n-  set_size(int_type __size) { _M_buf_size = __size; }\n-};\n-\n-derived_filebuf fb_01; // in \n-derived_filebuf fb_02; // out\n-derived_filebuf fb_03; // in | out\n-\n-// Initialize filebufs to be the same size regardless of platform.\n-void test03()\n-{\n-  fb_01.set_size(buffer_size);\n-  fb_02.set_size(buffer_size);\n-  fb_03.set_size(buffer_size);\n-}\n-\n-// Test overloaded virtual functions.\n-void test05() \n-{\n-  using namespace std;\n-  typedef filebuf::int_type \tint_type;\n-  typedef filebuf::traits_type \ttraits_type;\n-  typedef filebuf::pos_type \tpos_type;\n-  typedef filebuf::off_type \toff_type;\n-  typedef size_t \t\t\tsize_type;\n-\n-  bool \t\t\t\t\ttest = true;\n-  filebuf \t\t\t\tf_tmp;\n-  streamsize \t\t\tstrmsz_1, strmsz_2;\n-  streamoff  \t\t\tstrmof_1, strmof_2;\n-  int \t\t\t\t\ti = 0, j = 0, k = 0;\n-\n-  // GET\n-  fb_01.open(name_01, ios_base::in);\n-  fb_02.open(name_02, ios_base::out | ios_base::trunc);\n-  fb_03.open(name_03, ios_base::out | ios_base::in | ios_base::trunc); \n-\n-  strmof_1 = fb_01.in_avail();\n-  int_type c1 = fb_01.sbumpc();\n-  int_type c3 = fb_01.sbumpc();\n-  int_type c6 = fb_01.sgetc();\n-  int_type c8 = fb_01.sgetc();\n-\n-  strmof_2 = fb_02.in_avail();\n-  int_type c2 = fb_02.sbumpc();\n-  int_type c4 = fb_02.sbumpc();\n-  int_type c7 = fb_02.sgetc();\n-  int_type c9 = fb_02.sgetc();\n-\n-  strmof_1 = fb_03.in_avail(); \n-  int_type c5 = fb_03.sbumpc();\n-  c5 = fb_03.sgetc();\n-\n-  // int_type snextc()\n-  // calls sbumpc and if sbumpc != eof, return sgetc\n-  c6 = fb_01.snextc();\n-  c6 = fb_01.snextc();\n-\n-  c7 = fb_02.snextc();\n-  c7 = fb_02.snextc();\n-\n-  c5 = fb_03.snextc();\n-\n-  // streamsize sgetn(char_type *s, streamsize n)\n-  // streamsize xsgetn(char_type *s, streamsize n)\n-  // assign up to n chars to s from input sequence, indexing in_cur as\n-  // approp and returning the number of chars assigned\n-  strmsz_1 = fb_01.in_avail();\n-  strmsz_2 = fb_02.in_avail();\n-  test = strmsz_1 != strmsz_2;\n-  char carray1[13] = \"\";\n-  strmsz_1 = fb_01.sgetn(carray1, 10);\n-  char carray2[buffer_size] = \"\";\n-  strmsz_2 = fb_02.sgetn(carray2, 10);\n-  VERIFY( strmsz_1 != strmsz_2 );\n-  VERIFY( strmsz_1 == 10 );\n-  VERIFY( strmsz_2 == 0 );\n-  c1 = fb_01.sgetc();\n-  c2 = fb_02.sgetc();\n-  VERIFY( c1 == '\\n' );  \n-  VERIFY( c7 == c2 ); // n != i\n-  strmsz_1 = fb_03.sgetn(carray1, 10);\n-  VERIFY( !strmsz_1 ); //zero\n-  strmsz_1 = fb_01.in_avail(); // N.B.: _M_in_end - _M_in_beg == BUFSIZ - 1\n-  strmsz_2 = fb_01.sgetn(carray2, strmsz_1 + 5);\n-  VERIFY( strmsz_1 == strmsz_2 - 5 ); \n-  c4 = fb_01.sgetc(); // buffer should have underflowed from above.\n-  VERIFY( c4 == 'h' );\n-  strmsz_1 = fb_01.in_avail();\n-  VERIFY( strmsz_1 > 0 );\n-  strmsz_2 = fb_01.sgetn(carray2, strmsz_1 + 5);\n-  VERIFY( strmsz_1 == strmsz_2 ); //at the end of the actual file \n-  strmsz_1 = fb_02.in_avail();\n-  strmsz_2 = fb_02.sgetn(carray2, strmsz_1 + 5);\n-  VERIFY( strmsz_1 == -1 );\n-  VERIFY( strmsz_2 == 0 );\n-  c4 = fb_02.sgetc(); // should be EOF\n-  VERIFY( c4 == traits_type::eof() );\n-}\n-\n-main() \n-{\n-  test03();\n-  test05();\n-  return 0;\n-}"}, {"sha": "62c5a0f93f0b216407d6f528f1ae1c3728dcf470", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sgetn/char/2-in.cc", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetn%2Fchar%2F2-in.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetn%2Fchar%2F2-in.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetn%2Fchar%2F2-in.cc?ref=46c4e5d6e9e539d736eebbd7cab1d76a569af11a", "patch": "@@ -0,0 +1,83 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+const char name_01[] = \"sgetn.txt\"; // file with data in it\n+\n+// Test overloaded virtual functions.\n+void test05() \n+{\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+  typedef filebuf::int_type \tint_type;\n+  typedef filebuf::traits_type \ttraits_type;\n+\n+  bool \t\t\t\t\ttest = true;\n+\n+  streamsize \t\t\tstrmsz_1, strmsz_2, strmsz_3;\n+  int \t\t\t\t\ti = 0, j = 0, k = 0;\n+  char carray1[13] = \"\";\n+  char carray2[8192] = \"\";\n+  int_type \t\t\tc1, c2, c3, c4;\n+  \n+  // streamsize sgetn(char_type *s, streamsize n)\n+  // streamsize xsgetn(char_type *s, streamsize n)\n+  // assign up to n chars to s from input sequence, indexing in_cur as\n+  // approp and returning the number of chars assigned\n+\n+  // in \n+  {\n+    constraint_filebuf fb_01; \n+    fb_01.pubsetbuf(0, 0);\n+    fb_01.open(name_01, ios_base::in);\n+    VERIFY( fb_01.unbuffered() );\n+    strmsz_1 = fb_01.in_avail();\n+    strmsz_2 = fb_01.sgetn(carray1, 10);\n+    VERIFY( strmsz_2 == 10 );\n+    strmsz_2 = fb_01.in_avail(); \n+    VERIFY( strmsz_1 > strmsz_2 );\n+    c1 = fb_01.sgetc();\n+    VERIFY( c1 == 'b' );  \n+    strmsz_1 = fb_01.in_avail(); // 8181 or 8250 depending on buffer\n+    strmsz_2 = fb_01.sgetn(carray2, 8181 + 5);\n+    VERIFY( 8181 == strmsz_2 - 5 ); \n+    c4 = fb_01.sgetc(); // buffer should have underflowed from above.\n+    VERIFY( c4 == 'h' );\n+    strmsz_1 = fb_01.in_avail();\n+    VERIFY( strmsz_1 > 0 );\n+    strmsz_2 = fb_01.sgetn(carray2, 65 + 5);\n+    VERIFY( 65 == strmsz_2 ); // at the end of the actual file \n+    VERIFY( fb_01.unbuffered() );\n+  }\n+}\n+\n+main() \n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "30ccee29f2e3dcb09e1688f53718c018d272e9de", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sgetn/char/2-io.cc", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetn%2Fchar%2F2-io.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetn%2Fchar%2F2-io.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetn%2Fchar%2F2-io.cc?ref=46c4e5d6e9e539d736eebbd7cab1d76a569af11a", "patch": "@@ -0,0 +1,95 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+const char name_01[] = \"sgetn.txt\"; // file with data in it\n+const char name_03[] = \"tmp_sgetn_2io.tst\"; // empty file, need to create\n+\n+// Test overloaded virtual functions.\n+void test05() \n+{\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+  typedef filebuf::int_type \tint_type;\n+  typedef filebuf::traits_type \ttraits_type;\n+\n+  bool \t\t\t\t\ttest = true;\n+\n+  streamsize \t\t\tstrmsz_1, strmsz_2, strmsz_3;\n+  int \t\t\t\t\ti = 0, j = 0, k = 0;\n+  char carray1[13] = \"\";\n+  char carray2[8192] = \"\";\n+  int_type \t\t\tc1, c2, c3, c4;\n+  \n+  // streamsize sgetn(char_type *s, streamsize n)\n+  // streamsize xsgetn(char_type *s, streamsize n)\n+  // assign up to n chars to s from input sequence, indexing in_cur as\n+  // approp and returning the number of chars assigned\n+\n+  // in | out 1\n+  {\n+    constraint_filebuf fb_03; \n+    fb_03.pubsetbuf(0, 0);\n+    fb_03.open(name_03, ios_base::out | ios_base::in | ios_base::trunc); \n+    VERIFY( fb_03.unbuffered() );\n+    strmsz_1 = fb_03.sgetn(carray1, 10);\n+    VERIFY( strmsz_1 == 0 ); \n+    VERIFY( fb_03.unbuffered() );\n+  }\n+\n+  // in | out 2\n+  {\n+    constraint_filebuf fb_01; \n+    fb_01.pubsetbuf(0, 0);\n+    fb_01.open(name_01, ios_base::in | ios_base::out);\n+    VERIFY( fb_01.unbuffered() );\n+    strmsz_1 = fb_01.in_avail();\n+    strmsz_2 = fb_01.sgetn(carray1, 10);\n+    VERIFY( strmsz_2 == 10 );\n+    strmsz_2 = fb_01.in_avail(); \n+    VERIFY( strmsz_1 > strmsz_2 );\n+    c1 = fb_01.sgetc();\n+    VERIFY( c1 == 'b' );  \n+    strmsz_1 = fb_01.in_avail();\n+    strmsz_2 = fb_01.sgetn(carray2, 8181 + 5);\n+    VERIFY( 8181 == strmsz_2 - 5 ); \n+    c4 = fb_01.sgetc(); // buffer should have underflowed from above.\n+    VERIFY( c4 == 'h' );\n+    strmsz_1 = fb_01.in_avail();\n+    VERIFY( strmsz_1 > 0 );\n+    strmsz_2 = fb_01.sgetn(carray2, 65 + 5);\n+    VERIFY( 65 == strmsz_2 ); //at the end of the actual file \n+    VERIFY( fb_01.unbuffered() );\n+  }\n+}\n+\n+main() \n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "99a907493d450dc471fa8f242266dda76753dfed", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sgetn/char/2-out.cc", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetn%2Fchar%2F2-out.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetn%2Fchar%2F2-out.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetn%2Fchar%2F2-out.cc?ref=46c4e5d6e9e539d736eebbd7cab1d76a569af11a", "patch": "@@ -0,0 +1,79 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+const char name_02[] = \"tmp_sgetn_2out.tst\"; // empty file, need to create\n+\n+// Test overloaded virtual functions.\n+void test05() \n+{\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+  typedef filebuf::int_type \tint_type;\n+  typedef filebuf::traits_type \ttraits_type;\n+\n+  bool \t\t\t\t\ttest = true;\n+\n+  streamsize \t\t\tstrmsz_1, strmsz_2, strmsz_3;\n+  int \t\t\t\t\ti = 0, j = 0, k = 0;\n+  char carray1[13] = \"\";\n+  char carray2[8192] = \"\";\n+  int_type \t\t\tc1, c2, c3, c4;\n+  \n+  // streamsize sgetn(char_type *s, streamsize n)\n+  // streamsize xsgetn(char_type *s, streamsize n)\n+  // assign up to n chars to s from input sequence, indexing in_cur as\n+  // approp and returning the number of chars assigned\n+\n+  // out\n+  {\n+    constraint_filebuf fb_02; \n+    fb_02.pubsetbuf(0, 0);\n+    fb_02.open(name_02, ios_base::out | ios_base::trunc);\n+    VERIFY( fb_02.unbuffered() );\n+    VERIFY( !fb_02.read_position() );\n+    strmsz_2 = fb_02.in_avail();\n+    strmsz_2 = fb_02.sgetn(carray2, 10);\n+    VERIFY( strmsz_2 == 0 );\n+    c2 = fb_02.sgetc();\n+    VERIFY( c2 == traits_type::eof() );\n+    strmsz_1 = fb_02.in_avail();\n+    strmsz_2 = fb_02.sgetn(carray2, strmsz_1 + 5);\n+    VERIFY( strmsz_1 == -1 );\n+    VERIFY( strmsz_2 == 0 );\n+    c4 = fb_02.sgetc(); \n+    VERIFY( fb_02.unbuffered() );\n+    VERIFY( !fb_02.read_position() );\n+  }\n+}\n+\n+main() \n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "d3e41805938dae96a424f3bf798712b9220b927e", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sgetn/char/3.cc", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetn%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetn%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsgetn%2Fchar%2F3.cc?ref=46c4e5d6e9e539d736eebbd7cab1d76a569af11a", "patch": "@@ -23,7 +23,7 @@\n #include <fstream>\n #include <testsuite_hooks.h>\n \n-const char name_01[] = \"filebuf_virtuals-1.tst\"; // empty file, need to create\n+const char name_01[] = \"sgetn.txt\"; \n \n void test06()\n {", "previous_filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sgetn/char/2.cc"}, {"sha": "437a7fb65355a745f398e08e787289cc31f62425", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/snextc/char/1-in.cc", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsnextc%2Fchar%2F1-in.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsnextc%2Fchar%2F1-in.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsnextc%2Fchar%2F1-in.cc?ref=46c4e5d6e9e539d736eebbd7cab1d76a569af11a", "patch": "@@ -0,0 +1,84 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+const char name_01[] = \"sgetc.txt\"; // file with data in it\n+const char name_02[] = \"tmp_snextc_1out.tst\"; // empty file, need to create\n+const char name_03[] = \"tmp_snextc_1io.tst\"; // empty file, need to create\n+\n+void test05() \n+{\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+  typedef filebuf::int_type \tint_type;\n+  typedef filebuf::traits_type \ttraits_type;\n+\n+  bool \t\t\t\t\ttest = true;\n+  int_type \t\t\tc1, c2, c3;\n+\n+  // int_type snextc()\n+  // calls sbumpc and if sbumpc != eof, return sgetc\n+  \n+  // in\n+  {\n+    constraint_filebuf fb_01; \n+    fb_01.open(name_01, ios_base::in);\n+    VERIFY( !fb_01.write_position() );\n+    c1 = fb_01.snextc();\n+    VERIFY( c1 == '/' );\n+    c1 = fb_01.snextc();\n+    VERIFY( c1 == ' ' );\n+    VERIFY( !fb_01.write_position() );\n+    VERIFY( fb_01.read_position() );\n+  }\n+\n+  // in\n+  {  \n+    constraint_filebuf fb_01; \n+    fb_01.open(name_01, ios_base::in);\n+    VERIFY( !fb_01.write_position() );\n+    int_type c4 = fb_01.sbumpc();\n+    VERIFY( c4 == '/' );\n+    c4 = fb_01.sbumpc();\n+    VERIFY( c4 == '/' );\n+    c4 = fb_01.sgetc();\n+    VERIFY( c4 == ' ' );\n+    c1 = fb_01.snextc();\n+    VERIFY( c1 == '9' );\n+    c4 = fb_01.sgetc();\n+    VERIFY( c4 == '9' );\n+    VERIFY( !fb_01.write_position() );\n+    VERIFY( fb_01.read_position() );\n+  }\n+}\n+\n+main() \n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "0627648cc7bcb6a2b4426339b922093812b355b6", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/snextc/char/1-io.cc", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsnextc%2Fchar%2F1-io.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsnextc%2Fchar%2F1-io.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsnextc%2Fchar%2F1-io.cc?ref=46c4e5d6e9e539d736eebbd7cab1d76a569af11a", "patch": "@@ -0,0 +1,83 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+const char name_01[] = \"sgetc.txt\"; // file with data in it\n+const char name_02[] = \"tmp_snextc_1out.tst\"; // empty file, need to create\n+const char name_03[] = \"tmp_snextc_1io.tst\"; // empty file, need to create\n+\n+void test05() \n+{\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+  typedef filebuf::int_type \tint_type;\n+  typedef filebuf::traits_type \ttraits_type;\n+\n+  bool \t\t\t\t\ttest = true;\n+  int_type \t\t\tc1, c2, c3;\n+\n+  // int_type snextc()\n+  // calls sbumpc and if sbumpc != eof, return sgetc\n+\n+  // in | out 1\n+  {\n+    constraint_filebuf fb_03; \n+    fb_03.open(name_03, ios_base::out | ios_base::in | ios_base::trunc);\n+    VERIFY( fb_03.write_position() );\n+    VERIFY( !fb_03.read_position() );\n+    c3 = fb_03.snextc();\n+    VERIFY( c3 == traits_type::eof() );\n+    VERIFY( fb_03.write_position() );\n+    VERIFY( !fb_03.read_position() );\n+ }\n+\n+  // in | out 2\n+  {  \n+    constraint_filebuf fb_01; \n+    fb_01.open(name_01, ios_base::in | ios_base::out);\n+    VERIFY( fb_01.write_position() );\n+    int_type c4 = fb_01.sbumpc();\n+    VERIFY( c4 == '/' );\n+    c4 = fb_01.sbumpc();\n+    VERIFY( c4 == '/' );\n+    c4 = fb_01.sgetc();\n+    VERIFY( c4 == ' ' );\n+    c1 = fb_01.snextc();\n+    VERIFY( c1 == '9' );\n+    c4 = fb_01.sgetc();\n+    VERIFY( c4 == '9' );\n+    VERIFY( fb_01.write_position() );\n+    VERIFY( fb_01.read_position() );\n+  }\n+}\n+\n+main() \n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "d226ac296995ea672cdb20697e09f38a1ad091ed", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/snextc/char/1-out.cc", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsnextc%2Fchar%2F1-out.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsnextc%2Fchar%2F1-out.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsnextc%2Fchar%2F1-out.cc?ref=46c4e5d6e9e539d736eebbd7cab1d76a569af11a", "patch": "@@ -0,0 +1,66 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+const char name_01[] = \"sgetc.txt\"; // file with data in it\n+const char name_02[] = \"tmp_snextc_1out.tst\"; // empty file, need to create\n+const char name_03[] = \"tmp_snextc_1io.tst\"; // empty file, need to create\n+\n+void test05() \n+{\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+  typedef filebuf::int_type \tint_type;\n+  typedef filebuf::traits_type \ttraits_type;\n+\n+  bool \t\t\t\t\ttest = true;\n+  int_type \t\t\tc1, c2, c3;\n+\n+  // int_type snextc()\n+  // calls sbumpc and if sbumpc != eof, return sgetc\n+\n+  // out\n+  {    \n+    constraint_filebuf fb_02;\n+    fb_02.open(name_02, ios_base::out | ios_base::trunc);\n+    VERIFY( fb_02.write_position() );\n+    VERIFY( !fb_02.read_position() );\n+    c2 = fb_02.snextc();\n+    VERIFY( c2 == traits_type::eof() );\n+    c2 = fb_02.snextc();\n+    VERIFY( c2 == traits_type::eof() );\n+    VERIFY( fb_02.write_position() );\n+    VERIFY( !fb_02.read_position() );\n+  }\n+}\n+\n+main() \n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "fb205bd701f01bfe435cf9b58ad757a7838ee8c3", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/snextc/char/1.cc", "status": "removed", "additions": 0, "deletions": 116, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/821bcbd221a5a1063e1fbac4e1612961f24634ec/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsnextc%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/821bcbd221a5a1063e1fbac4e1612961f24634ec/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsnextc%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsnextc%2Fchar%2F1.cc?ref=821bcbd221a5a1063e1fbac4e1612961f24634ec", "patch": "@@ -1,116 +0,0 @@\n-// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n-\n-// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// 27.8.1.4 Overridden virtual functions\n-\n-#include <fstream>\n-#include <testsuite_hooks.h>\n-\n-// @require@ %-*.tst %-*.txt\n-// @diff@ %-*.tst %*.txt\n-\n-// NB: This test assumes that _M_buf_size == 40, and not the usual\n-// buffer_size length of BUFSIZ (8192), so that overflow/underflow can be\n-// simulated a bit more readily.\n-// NRB (Nota Really Bene): setting it to 40 breaks the test, as intended.\n-const int buffer_size = 8192;\n-//const int buffer_size = 40;\n-\n-const char name_01[] = \"filebuf_virtuals-1.txt\"; // file with data in it\n-const char name_02[] = \"filebuf_virtuals-2.txt\"; // empty file, need to create\n-const char name_03[] = \"filebuf_virtuals-3.txt\"; // empty file, need to create\n-\n-class derived_filebuf: public std::filebuf\n-{\n- public:\n-  void\n-  set_size(int_type __size) { _M_buf_size = __size; }\n-};\n-\n-derived_filebuf fb_01; // in \n-derived_filebuf fb_02; // out\n-derived_filebuf fb_03; // in | out\n-\n-// Initialize filebufs to be the same size regardless of platform.\n-void test03()\n-{\n-  fb_01.set_size(buffer_size);\n-  fb_02.set_size(buffer_size);\n-  fb_03.set_size(buffer_size);\n-}\n-\n-// Test overloaded virtual functions.\n-void test05() \n-{\n-  using namespace std;\n-  typedef filebuf::int_type \tint_type;\n-  typedef filebuf::traits_type \ttraits_type;\n-  typedef filebuf::pos_type \tpos_type;\n-  typedef filebuf::off_type \toff_type;\n-  typedef size_t \t\t\tsize_type;\n-\n-  bool \t\t\t\t\ttest = true;\n-  filebuf \t\t\t\tf_tmp;\n-  streamsize \t\t\tstrmsz_1, strmsz_2;\n-  streamoff  \t\t\tstrmof_1, strmof_2;\n-  int \t\t\t\t\ti = 0, j = 0, k = 0;\n-\n-  // GET\n-  fb_01.open(name_01, ios_base::in);\n-  fb_02.open(name_02, ios_base::out | ios_base::trunc);\n-  fb_03.open(name_03, ios_base::out | ios_base::in | ios_base::trunc); \n-  strmof_1 = fb_01.in_avail();\n-  strmof_2 = fb_02.in_avail();\n-  strmof_1 = fb_03.in_avail(); \n-\n-  int_type c1 = fb_01.sbumpc();\n-  int_type c2 = fb_02.sbumpc();\n-  int_type c3 = fb_01.sbumpc();\n-  int_type c4 = fb_02.sbumpc();\n-  int_type c5 = fb_03.sbumpc();\n-\n-  int_type c6 = fb_01.sgetc();\n-  int_type c7 = fb_02.sgetc();\n-  int_type c8 = fb_01.sgetc();\n-  int_type c9 = fb_02.sgetc();\n-  c5 = fb_03.sgetc();\n-\n-  // int_type snextc()\n-  // calls sbumpc and if sbumpc != eof, return sgetc\n-  c6 = fb_01.snextc();\n-  c7 = fb_02.snextc();\n-  VERIFY( c6 != c8 );\n-  VERIFY( c7 == c9 ); // -1\n-  VERIFY( c6 == '\\n' );\n-  c6 = fb_01.snextc();\n-  c7 = fb_02.snextc();\n-  VERIFY( c6 != c8 );\n-  VERIFY( c7 == c9 ); // -1\n-  VERIFY( c6 == '9' );\n-  c5 = fb_03.snextc();\n-  VERIFY( c5 == traits_type::eof() );\n-}\n-\n-main() \n-{\n-  test03();\n-  test05();\n-  return 0;\n-}"}, {"sha": "8c563ad41e893ae020734cd0eceacb3b27de0c77", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/snextc/char/2-in.cc", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsnextc%2Fchar%2F2-in.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsnextc%2Fchar%2F2-in.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsnextc%2Fchar%2F2-in.cc?ref=46c4e5d6e9e539d736eebbd7cab1d76a569af11a", "patch": "@@ -0,0 +1,82 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+const char name_01[] = \"sgetc.txt\"; // file with data in it\n+\n+void test05() \n+{\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+  typedef filebuf::int_type \tint_type;\n+  typedef filebuf::traits_type \ttraits_type;\n+\n+  bool \t\t\t\t\ttest = true;\n+  int_type \t\t\tc1, c2, c3;\n+\n+  // int_type snextc()\n+  // calls sbumpc and if sbumpc != eof, return sgetc\n+  \n+  // in\n+  {\n+    constraint_filebuf fb_01; \n+    fb_01.pubsetbuf(0, 0);\n+    fb_01.open(name_01, ios_base::in);\n+    VERIFY( fb_01.unbuffered() );\n+    c1 = fb_01.snextc();\n+    VERIFY( c1 == '/' ); // overflow\n+    c1 = fb_01.snextc();\n+    VERIFY( c1 == ' ' ); \n+    VERIFY( fb_01.unbuffered() );\n+  }\n+\n+  // in\n+  {  \n+    constraint_filebuf fb_01; \n+    fb_01.pubsetbuf(0, 0);\n+    fb_01.open(name_01, ios_base::in);\n+    VERIFY( fb_01.unbuffered() );\n+    int_type c4 = fb_01.sbumpc();\n+    VERIFY( c4 == '/' );\n+    c4 = fb_01.sbumpc();\n+    VERIFY( c4 == '/' );\n+    c4 = fb_01.sgetc();\n+    VERIFY( c4 == ' ' );\n+    c1 = fb_01.snextc();\n+    VERIFY( c1 == '9' );\n+    c4 = fb_01.sgetc();\n+    VERIFY( c4 == '9' );\n+    VERIFY( fb_01.unbuffered() );\n+  }\n+}\n+\n+main() \n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "a044c6d4f419717b3fc8784c78da0943f0fd843f", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/snextc/char/2-io.cc", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsnextc%2Fchar%2F2-io.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsnextc%2Fchar%2F2-io.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsnextc%2Fchar%2F2-io.cc?ref=46c4e5d6e9e539d736eebbd7cab1d76a569af11a", "patch": "@@ -0,0 +1,81 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+const char name_01[] = \"sgetc.txt\"; // file with data in it\n+const char name_03[] = \"tmp_snextc_2io.tst\"; // empty file, need to create\n+\n+void test05() \n+{\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+  typedef filebuf::int_type \tint_type;\n+  typedef filebuf::traits_type \ttraits_type;\n+\n+  bool \t\t\t\t\ttest = true;\n+  int_type \t\t\tc1, c2, c3;\n+\n+  // int_type snextc()\n+  // calls sbumpc and if sbumpc != eof, return sgetc\n+\n+  // in | out 1\n+  {\n+    constraint_filebuf fb_03; \n+    fb_03.pubsetbuf(0, 0);\n+    fb_03.open(name_03, ios_base::out | ios_base::in | ios_base::trunc);\n+    VERIFY( fb_03.unbuffered() );\n+    c3 = fb_03.snextc();\n+    VERIFY( c3 == traits_type::eof() );\n+    VERIFY( fb_03.unbuffered() );\n+  }\n+\n+  // in | out 2\n+  {  \n+    constraint_filebuf fb_01; \n+    fb_01.pubsetbuf(0, 0);\n+    fb_01.open(name_01, ios_base::in | ios_base::out);\n+    VERIFY( fb_01.unbuffered() );\n+    int_type c4 = fb_01.sbumpc();\n+    VERIFY( c4 == '/' );\n+    c4 = fb_01.sbumpc();\n+    VERIFY( c4 == '/' );\n+    c4 = fb_01.sgetc();\n+    VERIFY( c4 == ' ' );\n+    c1 = fb_01.snextc();\n+    VERIFY( c1 == '9' );\n+    c4 = fb_01.sgetc();\n+    VERIFY( c4 == '9' );\n+    VERIFY( fb_01.unbuffered() );\n+  }\n+}\n+\n+main() \n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "8af126337f6303aba5b6c52976232dab8fdb25cc", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/snextc/char/2-out.cc", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsnextc%2Fchar%2F2-out.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsnextc%2Fchar%2F2-out.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsnextc%2Fchar%2F2-out.cc?ref=46c4e5d6e9e539d736eebbd7cab1d76a569af11a", "patch": "@@ -0,0 +1,63 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+const char name_02[] = \"tmp_snextc_2out.tst\"; // empty file, need to create\n+\n+void test05() \n+{\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+  typedef filebuf::int_type \tint_type;\n+  typedef filebuf::traits_type \ttraits_type;\n+\n+  bool \t\t\t\t\ttest = true;\n+  int_type \t\t\tc1, c2, c3;\n+\n+  // int_type snextc()\n+  // calls sbumpc and if sbumpc != eof, return sgetc\n+\n+  // out\n+  {    \n+    constraint_filebuf fb_02;\n+    fb_02.pubsetbuf(0, 0);\n+    fb_02.open(name_02, ios_base::out | ios_base::trunc);\n+    VERIFY( fb_02.unbuffered() );\n+    c2 = fb_02.snextc();\n+    VERIFY( c2 == traits_type::eof() );\n+    c2 = fb_02.snextc();\n+    VERIFY( c2 == traits_type::eof() );\n+    VERIFY( fb_02.unbuffered() );\n+ }\n+}\n+\n+main() \n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "25d9ee0ce8d044f0f409dbfc13155ed65b3afc6e", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sputc/char/1-in.cc", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputc%2Fchar%2F1-in.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputc%2Fchar%2F1-in.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputc%2Fchar%2F1-in.cc?ref=46c4e5d6e9e539d736eebbd7cab1d76a569af11a", "patch": "@@ -0,0 +1,65 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+const char name_01[] = \"filebuf_virtuals-1.txt\"; // file with data in it\n+\n+void test05() \n+{\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+\n+  typedef filebuf::int_type \tint_type;\n+  typedef filebuf::traits_type \ttraits_type;\n+\n+  bool \t\t\t\t\ttest = true;\n+  streamsize \t\t\tstrmsz_1, strmsz_2;\n+  int \t\t\t\t\ti = 0, j = 0, k = 0;\n+  int_type \t\t\tc1, c2, c3;\n+\n+  // int_type sputc(char_type c)\n+  // if out_cur not avail, return overflow(traits_type::to_int_type(c)) \n+  // else, stores c at out_cur,\n+  // increments out_cur, and returns c as int_type\n+\n+  // in \n+  {\n+    constraint_filebuf fb_01; \n+    fb_01.open(name_01, ios_base::in);\n+    VERIFY( !fb_01.write_position() );\n+    c3 = fb_01.sputc('a'); \n+    VERIFY( c3 == traits_type::eof() );\n+    VERIFY( !fb_01.write_position() );\n+   }\n+}\n+\n+main() \n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "c1717612b6c523b06c7a8dec8d21fc60e37bcdf4", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sputc/char/1-io.cc", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputc%2Fchar%2F1-io.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputc%2Fchar%2F1-io.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputc%2Fchar%2F1-io.cc?ref=46c4e5d6e9e539d736eebbd7cab1d76a569af11a", "patch": "@@ -0,0 +1,72 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+const char name_01[] = \"filebuf_virtuals-1.txt\"; // file with data in it\n+const char name_03[] = \"tmp_sputc_1io.tst\";\n+\n+void test05() \n+{\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+\n+  typedef filebuf::int_type \tint_type;\n+  typedef filebuf::traits_type \ttraits_type;\n+\n+  bool \t\t\t\t\ttest = true;\n+  streamsize \t\t\tstrmsz_1, strmsz_2;\n+  int \t\t\t\t\ti = 0, j = 0, k = 0;\n+  int_type \t\t\tc1, c2, c3;\n+\n+  // int_type sputc(char_type c)\n+  // if out_cur not avail, return overflow(traits_type::to_int_type(c)) \n+  // else, stores c at out_cur,\n+  // increments out_cur, and returns c as int_type\n+\n+  // in | out 1\n+  {\n+    constraint_filebuf fb_03; \n+    fb_03.open(name_03, ios_base::out | ios_base::in | ios_base::trunc);\n+    VERIFY( fb_03.write_position() );\n+    VERIFY( !fb_03.read_position() );\n+    c1 = fb_03.sputc('b'); \n+    VERIFY( c1 == 'b' );\n+    c2 = fb_03.sputc('d'); \n+    VERIFY( c2 == 'd' );\n+    for (int i = 50; i <= 90; ++i) \n+      c2 = fb_03.sputc(char(i));\n+    VERIFY( fb_03.write_position() );\n+    VERIFY( !fb_03.read_position() );\n+  }\n+}\n+\n+main() \n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "987b4e26217e60df6eda66a7e80ffb38b8bab1c3", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sputc/char/1-out.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputc%2Fchar%2F1-out.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputc%2Fchar%2F1-out.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputc%2Fchar%2F1-out.cc?ref=46c4e5d6e9e539d736eebbd7cab1d76a569af11a", "patch": "@@ -0,0 +1,71 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+const char name_02[] = \"tmp_sputc_1out.tst\"; // empty file, need to create\n+\n+void test05() \n+{\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+\n+  typedef filebuf::int_type \tint_type;\n+  typedef filebuf::traits_type \ttraits_type;\n+\n+  bool \t\t\t\t\ttest = true;\n+  streamsize \t\t\tstrmsz_1, strmsz_2;\n+  int \t\t\t\t\ti = 0, j = 0, k = 0;\n+  int_type \t\t\tc1, c2, c3;\n+\n+  // int_type sputc(char_type c)\n+  // if out_cur not avail, return overflow(traits_type::to_int_type(c)) \n+  // else, stores c at out_cur,\n+  // increments out_cur, and returns c as int_type\n+\n+  // out\n+  {\n+    constraint_filebuf fb_02; \n+    fb_02.open(name_02, ios_base::out | ios_base::trunc);\n+    VERIFY( fb_02.write_position() );\n+    VERIFY( !fb_02.read_position() );\n+    c1 = fb_02.sputc('a');\n+    VERIFY( c1 == 'a' ); \n+    c2 = fb_02.sputc('c'); \n+    VERIFY( c2 == 'c' );\n+    for (int i = 50; i <= 90; ++i) \n+      c2 = fb_02.sputc(char(i));\n+    VERIFY( fb_02.write_position() );\n+    VERIFY( !fb_02.read_position() );\n+  }\n+}\n+\n+main() \n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "b02c70fb49a1c4c5587f9b971551bec5752e304b", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sputc/char/1.cc", "status": "removed", "additions": 0, "deletions": 124, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/821bcbd221a5a1063e1fbac4e1612961f24634ec/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputc%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/821bcbd221a5a1063e1fbac4e1612961f24634ec/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputc%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputc%2Fchar%2F1.cc?ref=821bcbd221a5a1063e1fbac4e1612961f24634ec", "patch": "@@ -1,124 +0,0 @@\n-// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n-\n-// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// 27.8.1.4 Overridden virtual functions\n-\n-#include <fstream>\n-#include <testsuite_hooks.h>\n-\n-// @require@ %-*.tst %-*.txt\n-// @diff@ %-*.tst %*.txt\n-\n-// NB: This test assumes that _M_buf_size == 40, and not the usual\n-// buffer_size length of BUFSIZ (8192), so that overflow/underflow can be\n-// simulated a bit more readily.\n-// NRB (Nota Really Bene): setting it to 40 breaks the test, as intended.\n-const int buffer_size = 8192;\n-//const int buffer_size = 40;\n-\n-const char name_01[] = \"filebuf_virtuals-1.txt\"; // file with data in it\n-const char name_02[] = \"filebuf_virtuals-2.txt\"; // empty file, need to create\n-const char name_03[] = \"filebuf_virtuals-3.txt\"; // empty file, need to create\n-\n-class derived_filebuf: public std::filebuf\n-{\n- public:\n-  void\n-  set_size(int_type __size) { _M_buf_size = __size; }\n-};\n-\n-derived_filebuf fb_01; // in \n-derived_filebuf fb_02; // out\n-derived_filebuf fb_03; // in | out\n-\n-// Initialize filebufs to be the same size regardless of platform.\n-void test03()\n-{\n-  fb_01.set_size(buffer_size);\n-  fb_02.set_size(buffer_size);\n-  fb_03.set_size(buffer_size);\n-}\n-\n-// Test overloaded virtual functions.\n-void test05() \n-{\n-  typedef std::filebuf::int_type \tint_type;\n-  typedef std::filebuf::traits_type \ttraits_type;\n-  typedef std::filebuf::pos_type \tpos_type;\n-  typedef std::filebuf::off_type \toff_type;\n-  typedef size_t \t\t\tsize_type;\n-\n-  bool \t\t\t\t\ttest = true;\n-  std::filebuf \t\t\t\tf_tmp;\n-  std::streamsize \t\t\tstrmsz_1, strmsz_2;\n-  std::streamoff  \t\t\tstrmof_1, strmof_2;\n-  int \t\t\t\t\ti = 0, j = 0, k = 0;\n-\n-  fb_01.open(name_01, std::ios_base::in);\n-  fb_02.open(name_02, std::ios_base::out | std::ios_base::trunc);\n-  fb_03.open(name_03, std::ios_base::out | std::ios_base::in | std::ios_base::trunc);\n-\n-  int_type c1 = fb_01.sbumpc();\n-  int_type c2 = fb_02.sbumpc();\n-  int_type c3 = fb_01.sbumpc();\n-  int_type c4 = fb_02.sbumpc();\n-  int_type c5 = fb_03.sbumpc();\n-  int_type c6 = fb_01.sgetc();\n-  int_type c7 = fb_02.sgetc();\n-  int_type c8 = fb_01.sgetc();\n-  int_type c9 = fb_02.sgetc();\n-\n-  // PUT\n-  // int_type sputc(char_type c)\n-  // if out_cur not avail, return overflow(traits_type::to_int_type(c)) \n-  // else, stores c at out_cur,\n-  // increments out_cur, and returns c as int_type\n-  // strmsz_1 = fb_03.in_avail();  // XXX valid for in|out??\n-  c1 = fb_02.sputc('a'); \n-  c2 = fb_03.sputc('b'); \n-  VERIFY( c1 != c2 );\n-  c1 = fb_02.sputc('c'); \n-  c2 = fb_03.sputc('d'); \n-  VERIFY( c1 != c2 );\n-  // strmsz_2 = fb_03.in_avail();\n-  // VERIFY( strmsz_1 != strmsz_2 );\n-  for (int i = 50; i <= 90; ++i) \n-    c2 = fb_02.sputc(char(i));\n-  // 27filebuf-2.txt == ac23456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWX\n-  // fb_02._M_out_cur = '2'\n-  strmsz_1 = fb_03.in_avail();\n-  for (int i = 50; i <= 90; ++i) \n-    c2 = fb_03.sputc(char(i));\n-  strmsz_2 = fb_03.in_avail();\n-  // VERIFY( strmsz_1 != strmsz_2 );\n-  // VERIFY( strmsz_1 > 0 );\n-  // VERIFY( strmsz_2 > 0 );\n-  // 27filebuf-2.txt == bd23456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWX\n-  // fb_02._M_out_cur = '2'\n-  c3 = fb_01.sputc('a'); // should be EOF because this is read-only\n-  VERIFY( c3 == traits_type::eof() );\n-}\n-\n-main() \n-{\n-  test03();\n-  test05();\n-  return 0;\n-}"}, {"sha": "85ab4efbeffde110b226d25e95b879a0cd865fad", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sputc/char/2-in.cc", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputc%2Fchar%2F2-in.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputc%2Fchar%2F2-in.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputc%2Fchar%2F2-in.cc?ref=46c4e5d6e9e539d736eebbd7cab1d76a569af11a", "patch": "@@ -0,0 +1,66 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+const char name_01[] = \"filebuf_virtuals-1.txt\"; // file with data in it\n+\n+void test05() \n+{\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+\n+  typedef filebuf::int_type \tint_type;\n+  typedef filebuf::traits_type \ttraits_type;\n+\n+  bool \t\t\t\t\ttest = true;\n+  streamsize \t\t\tstrmsz_1, strmsz_2;\n+  int \t\t\t\t\ti = 0, j = 0, k = 0;\n+  int_type \t\t\tc1, c2, c3;\n+\n+  // int_type sputc(char_type c)\n+  // if out_cur not avail, return overflow(traits_type::to_int_type(c)) \n+  // else, stores c at out_cur,\n+  // increments out_cur, and returns c as int_type\n+\n+  // in \n+  {\n+    constraint_filebuf fb_01; \n+    fb_01.pubsetbuf(0, 0);\n+    fb_01.open(name_01, ios_base::in);\n+    VERIFY( fb_01.unbuffered() );\n+    c3 = fb_01.sputc('a'); \n+    VERIFY( c3 == traits_type::eof() );\n+    VERIFY( fb_01.unbuffered() );\n+   }\n+}\n+\n+main() \n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "373a6a8cba55245f951a854f2cceac57c5ce85d7", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sputc/char/2-io.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputc%2Fchar%2F2-io.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputc%2Fchar%2F2-io.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputc%2Fchar%2F2-io.cc?ref=46c4e5d6e9e539d736eebbd7cab1d76a569af11a", "patch": "@@ -0,0 +1,71 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+const char name_01[] = \"filebuf_virtuals-1.txt\"; // file with data in it\n+const char name_03[] = \"tmp_sputc_2io.tst\";\n+\n+void test05() \n+{\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+\n+  typedef filebuf::int_type \tint_type;\n+  typedef filebuf::traits_type \ttraits_type;\n+\n+  bool \t\t\t\t\ttest = true;\n+  streamsize \t\t\tstrmsz_1, strmsz_2;\n+  int \t\t\t\t\ti = 0, j = 0, k = 0;\n+  int_type \t\t\tc1, c2, c3;\n+\n+  // int_type sputc(char_type c)\n+  // if out_cur not avail, return overflow(traits_type::to_int_type(c)) \n+  // else, stores c at out_cur,\n+  // increments out_cur, and returns c as int_type\n+\n+  // in | out 1\n+  {\n+    constraint_filebuf fb_03; \n+    fb_03.pubsetbuf(0, 0);\n+    fb_03.open(name_03, ios_base::out | ios_base::in | ios_base::trunc);\n+    VERIFY( fb_03.unbuffered() );\n+    c1 = fb_03.sputc('b'); \n+    VERIFY( c1 == 'b' );\n+    c2 = fb_03.sputc('d'); \n+    VERIFY( c2 == 'd' );\n+    for (int i = 50; i <= 90; ++i) \n+      c2 = fb_03.sputc(char(i));\n+    VERIFY( fb_03.unbuffered() );\n+  }\n+}\n+\n+main() \n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "96e12954a971d5748d2bca4b1cea9ea145591bb9", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sputc/char/2-out.cc", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputc%2Fchar%2F2-out.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputc%2Fchar%2F2-out.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputc%2Fchar%2F2-out.cc?ref=46c4e5d6e9e539d736eebbd7cab1d76a569af11a", "patch": "@@ -0,0 +1,72 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+const char name_02[] = \"tmp_sputc_2out.tst\"; // empty file, need to create\n+\n+void test05() \n+{\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+\n+  typedef filebuf::int_type \tint_type;\n+  typedef filebuf::traits_type \ttraits_type;\n+\n+  bool \t\t\t\t\ttest = true;\n+  streamsize \t\t\tstrmsz_1, strmsz_2;\n+  int \t\t\t\t\ti = 0, j = 0, k = 0;\n+  int_type \t\t\tc1, c2, c3;\n+\n+  // int_type sputc(char_type c)\n+  // if out_cur not avail, return overflow(traits_type::to_int_type(c)) \n+  // else, stores c at out_cur,\n+  // increments out_cur, and returns c as int_type\n+\n+  // out\n+  {\n+    constraint_filebuf fb_02; \n+    fb_02.pubsetbuf(0, 0);\n+    fb_02.open(name_02, ios_base::out | ios_base::trunc);\n+    VERIFY( fb_02.unbuffered() );\n+    VERIFY( !fb_02.read_position() );\n+    c1 = fb_02.sputc('a');\n+    VERIFY( c1 == 'a' ); \n+    c2 = fb_02.sputc('c'); \n+    VERIFY( c2 == 'c' );\n+    for (int i = 50; i <= 90; ++i) \n+      c2 = fb_02.sputc(char(i));\n+    VERIFY( fb_02.unbuffered() );\n+    VERIFY( !fb_02.read_position() );\n+  }\n+}\n+\n+main() \n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "f6a4ae8b0db37e230c37a0f4ca0d7fe485c47523", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sputc/char/2.cc", "status": "removed", "additions": 0, "deletions": 129, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/821bcbd221a5a1063e1fbac4e1612961f24634ec/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputc%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/821bcbd221a5a1063e1fbac4e1612961f24634ec/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputc%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputc%2Fchar%2F2.cc?ref=821bcbd221a5a1063e1fbac4e1612961f24634ec", "patch": "@@ -1,129 +0,0 @@\n-// 2003-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n-\n-// Copyright (C) 2003 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// 27.8.1.4 Overridden virtual functions\n-\n-#include <fstream>\n-#include <testsuite_hooks.h>\n-\n-// @require@ %-*.tst %-*.txt\n-// @diff@ %-*.tst %*.txt\n-\n-// NB: This test assumes that _M_buf_size == 40, and not the usual\n-// buffer_size length of BUFSIZ (8192), so that overflow/underflow can be\n-// simulated a bit more readily.\n-// NRB (Nota Really Bene): setting it to 40 breaks the test, as intended.\n-const int buffer_size = 8192;\n-//const int buffer_size = 40;\n-\n-const char name_01[] = \"filebuf_virtuals-1.txt\"; // file with data in it\n-const char name_02[] = \"filebuf_virtuals-2.txt\"; // empty file, need to create\n-const char name_03[] = \"filebuf_virtuals-3.txt\"; // empty file, need to create\n-\n-class derived_filebuf: public std::filebuf\n-{\n- public:\n-  void\n-  set_size(int_type __size) { _M_buf_size = __size; }\n-};\n-\n-derived_filebuf fb_01; // in \n-derived_filebuf fb_02; // out\n-derived_filebuf fb_03; // in | out\n-\n-// Initialize filebufs to be the same size regardless of platform.\n-void test03()\n-{\n-  fb_01.set_size(buffer_size);\n-  fb_02.set_size(buffer_size);\n-  fb_03.set_size(buffer_size);\n-}\n-\n-// Test overloaded virtual functions.\n-void test05() \n-{\n-  typedef std::filebuf::int_type \tint_type;\n-  typedef std::filebuf::traits_type \ttraits_type;\n-  typedef std::filebuf::pos_type \tpos_type;\n-  typedef std::filebuf::off_type \toff_type;\n-  typedef size_t \t\t\tsize_type;\n-\n-  bool \t\t\t\t\ttest = true;\n-  std::filebuf \t\t\t\tf_tmp;\n-  std::streamsize \t\t\tstrmsz_1, strmsz_2;\n-  std::streamoff  \t\t\tstrmof_1, strmof_2;\n-  int \t\t\t\t\ti = 0, j = 0, k = 0;\n-\n-  // Unbuffered\n-  fb_01.pubsetbuf(0, 0);\n-  fb_02.pubsetbuf(0, 0);\n-  fb_03.pubsetbuf(0, 0);\n-\n-  fb_01.open(name_01, std::ios_base::in);\n-  fb_02.open(name_02, std::ios_base::out | std::ios_base::trunc);\n-  fb_03.open(name_03, std::ios_base::out | std::ios_base::in | std::ios_base::trunc);\n-\n-  int_type c1 = fb_01.sbumpc();\n-  int_type c2 = fb_02.sbumpc();\n-  int_type c3 = fb_01.sbumpc();\n-  int_type c4 = fb_02.sbumpc();\n-  int_type c5 = fb_03.sbumpc();\n-  int_type c6 = fb_01.sgetc();\n-  int_type c7 = fb_02.sgetc();\n-  int_type c8 = fb_01.sgetc();\n-  int_type c9 = fb_02.sgetc();\n-\n-  // PUT\n-  // int_type sputc(char_type c)\n-  // if out_cur not avail, return overflow(traits_type::to_int_type(c)) \n-  // else, stores c at out_cur,\n-  // increments out_cur, and returns c as int_type\n-  // strmsz_1 = fb_03.in_avail();  // XXX valid for in|out??\n-  c1 = fb_02.sputc('a'); \n-  c2 = fb_03.sputc('b'); \n-  VERIFY( c1 != c2 );\n-  c1 = fb_02.sputc('c'); \n-  c2 = fb_03.sputc('d'); \n-  VERIFY( c1 != c2 );\n-  // strmsz_2 = fb_03.in_avail();\n-  // VERIFY( strmsz_1 != strmsz_2 );\n-  for (int i = 50; i <= 90; ++i) \n-    c2 = fb_02.sputc(char(i));\n-  // 27filebuf-2.txt == ac23456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWX\n-  // fb_02._M_out_cur = '2'\n-  strmsz_1 = fb_03.in_avail();\n-  for (int i = 50; i <= 90; ++i) \n-    c2 = fb_03.sputc(char(i));\n-  strmsz_2 = fb_03.in_avail();\n-  // VERIFY( strmsz_1 != strmsz_2 );\n-  // VERIFY( strmsz_1 > 0 );\n-  // VERIFY( strmsz_2 > 0 );\n-  // 27filebuf-2.txt == bd23456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWX\n-  // fb_02._M_out_cur = '2'\n-  c3 = fb_01.sputc('a'); // should be EOF because this is read-only\n-  VERIFY( c3 == traits_type::eof() );\n-}\n-\n-main() \n-{\n-  test03();\n-  test05();\n-  return 0;\n-}"}, {"sha": "235fce07e22be6d49945b28614b128b98b5f6e3c", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sputn/char/1-in.cc", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputn%2Fchar%2F1-in.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputn%2Fchar%2F1-in.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputn%2Fchar%2F1-in.cc?ref=46c4e5d6e9e539d736eebbd7cab1d76a569af11a", "patch": "@@ -0,0 +1,63 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+const char name_01[] = \"filebuf_virtuals-1.txt\"; // file with data in it\n+\n+void test05() \n+{\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+\n+  typedef filebuf::int_type \tint_type;\n+  typedef filebuf::traits_type \ttraits_type;\n+  typedef size_t \t\t\tsize_type;\n+\n+  bool \t\t\t\t\ttest = true;\n+  streamsize \t\t\tstrmsz_1, strmsz_2;\n+\n+  // streamsize sputn(const char_typs* s, streamsize n)\n+  // write up to n chars to out_cur from s, returning number assigned\n+  // NB *sputn will happily put '\\0' into your stream if you give it a chance*\n+\n+  // in \n+  {\n+    constraint_filebuf fb_01; \n+    fb_01.open(name_01, ios_base::in);\n+    VERIFY( !fb_01.write_position() );\n+    strmsz_1 = fb_01.sputn(\"racadabra\", 10);\n+    VERIFY( strmsz_1 == 0 );  \n+    VERIFY( !fb_01.write_position() );\n+  }\n+}\n+\n+main() \n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "37509601427e7a8c999919bece2687967d0ded37", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sputn/char/1-io.cc", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputn%2Fchar%2F1-io.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputn%2Fchar%2F1-io.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputn%2Fchar%2F1-io.cc?ref=46c4e5d6e9e539d736eebbd7cab1d76a569af11a", "patch": "@@ -0,0 +1,69 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+const char name_01[] = \"filebuf_virtuals-1.txt\"; // file with data in it\n+const char name_03[] = \"tmp_sputn_1io.tst\"; // empty file, need to create\n+\n+void test05() \n+{\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+\n+  typedef filebuf::int_type \tint_type;\n+  typedef filebuf::traits_type \ttraits_type;\n+  typedef size_t \t\t\tsize_type;\n+\n+  bool \t\t\t\t\ttest = true;\n+  streamsize \t\t\tstrmsz_1, strmsz_2;\n+\n+  // streamsize sputn(const char_typs* s, streamsize n)\n+  // write up to n chars to out_cur from s, returning number assigned\n+  // NB *sputn will happily put '\\0' into your stream if you give it a chance*\n+\n+  // in | out\n+  {\n+    constraint_filebuf fb_03; \n+    fb_03.open(name_03, ios_base::out | ios_base::in | ios_base::trunc);\n+    VERIFY( fb_03.write_position() );\n+    VERIFY( !fb_03.read_position() );\n+    strmsz_1 = fb_03.sputn(\"racadabras\", 10);//\"abracadabras or what?\"\n+    VERIFY( strmsz_1 == 10 );\n+    strmsz_2 = fb_03.sputn(\", i wanna reach out and\", 10);\n+    VERIFY( strmsz_2 == 10 );\n+    VERIFY( strmsz_1 == strmsz_2 ); \n+    VERIFY( fb_03.write_position() );\n+    VERIFY( !fb_03.read_position() );\n+  }\n+}\n+\n+main() \n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "647f310d87f47e630e27c1f57c7aaadde8669dca", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sputn/char/1-out.cc", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputn%2Fchar%2F1-out.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputn%2Fchar%2F1-out.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputn%2Fchar%2F1-out.cc?ref=46c4e5d6e9e539d736eebbd7cab1d76a569af11a", "patch": "@@ -0,0 +1,65 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+const char name_02[] = \"tmp_sputn_1out.tst\"; // empty file, need to create\n+\n+void test05() \n+{\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+\n+  typedef filebuf::int_type \tint_type;\n+  typedef filebuf::traits_type \ttraits_type;\n+  typedef size_t \t\t\tsize_type;\n+\n+  bool \t\t\t\t\ttest = true;\n+  streamsize \t\t\tstrmsz_1, strmsz_2;\n+\n+  // streamsize sputn(const char_typs* s, streamsize n)\n+  // write up to n chars to out_cur from s, returning number assigned\n+  // NB *sputn will happily put '\\0' into your stream if you give it a chance*\n+\n+  // out\n+  {\n+    constraint_filebuf fb_02; \n+    fb_02.open(name_02, ios_base::out | ios_base::trunc);\n+    VERIFY( fb_02.write_position() );\n+    VERIFY( !fb_02.read_position() );\n+    strmsz_1 = fb_02.sputn(\"racadabras\", 10);\n+    VERIFY( strmsz_1 == 10 );  \n+    VERIFY( fb_02.write_position() );\n+    VERIFY( !fb_02.read_position() );\n+   }\n+}\n+\n+main() \n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "151ae42d66f72525f535f35b95620ab4770697d2", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sputn/char/1.cc", "status": "removed", "additions": 0, "deletions": 112, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/821bcbd221a5a1063e1fbac4e1612961f24634ec/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputn%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/821bcbd221a5a1063e1fbac4e1612961f24634ec/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputn%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputn%2Fchar%2F1.cc?ref=821bcbd221a5a1063e1fbac4e1612961f24634ec", "patch": "@@ -1,112 +0,0 @@\n-// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n-\n-// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// 27.8.1.4 Overridden virtual functions\n-\n-#include <fstream>\n-#include <testsuite_hooks.h>\n-\n-// @require@ %-*.tst %-*.txt\n-// @diff@ %-*.tst %*.txt\n-\n-// NB: This test assumes that _M_buf_size == 40, and not the usual\n-// buffer_size length of BUFSIZ (8192), so that overflow/underflow can be\n-// simulated a bit more readily.\n-// NRB (Nota Really Bene): setting it to 40 breaks the test, as intended.\n-const int buffer_size = 8192;\n-//const int buffer_size = 40;\n-\n-const char name_01[] = \"filebuf_virtuals-1.txt\"; // file with data in it\n-const char name_02[] = \"filebuf_virtuals-2.txt\"; // empty file, need to create\n-const char name_03[] = \"filebuf_virtuals-3.txt\"; // empty file, need to create\n-\n-class derived_filebuf: public std::filebuf\n-{\n- public:\n-  void\n-  set_size(int_type __size) { _M_buf_size = __size; }\n-};\n-\n-derived_filebuf fb_01; // in \n-derived_filebuf fb_02; // out\n-derived_filebuf fb_03; // in | out\n-\n-// Initialize filebufs to be the same size regardless of platform.\n-void test03()\n-{\n-  fb_01.set_size(buffer_size);\n-  fb_02.set_size(buffer_size);\n-  fb_03.set_size(buffer_size);\n-}\n-\n-// Test overloaded virtual functions.\n-void test05() \n-{\n-  typedef std::filebuf::int_type \tint_type;\n-  typedef std::filebuf::traits_type \ttraits_type;\n-  typedef std::filebuf::pos_type \tpos_type;\n-  typedef std::filebuf::off_type \toff_type;\n-  typedef size_t \t\t\tsize_type;\n-\n-  bool \t\t\t\t\ttest = true;\n-  std::filebuf \t\t\t\tf_tmp;\n-  std::streamsize \t\t\tstrmsz_1, strmsz_2;\n-  std::streamoff  \t\t\tstrmof_1, strmof_2;\n-  int \t\t\t\t\ti = 0, j = 0, k = 0;\n-\n-  fb_01.open(name_01, std::ios_base::in);\n-  fb_02.open(name_02, std::ios_base::out | std::ios_base::trunc);\n-  fb_03.open(name_03, std::ios_base::out | std::ios_base::in | std::ios_base::trunc);\n-\n-  int_type c1 = fb_01.sbumpc();\n-  int_type c2 = fb_02.sbumpc();\n-  int_type c3 = fb_01.sbumpc();\n-  int_type c4 = fb_02.sbumpc();\n-  int_type c5 = fb_03.sbumpc();\n-  int_type c6 = fb_01.sgetc();\n-  int_type c7 = fb_02.sgetc();\n-  int_type c8 = fb_01.sgetc();\n-  int_type c9 = fb_02.sgetc();\n-\n-  // PUT\n-  // streamsize sputn(const char_typs* s, streamsize n)\n-  // write up to n chars to out_cur from s, returning number assigned\n-  // NB *sputn will happily put '\\0' into your stream if you give it a chance*\n-  strmsz_1 = fb_03.sputn(\"racadabras\", 10);//\"abracadabras or what?\"\n-  VERIFY( strmsz_1 == 10 );\n-  strmsz_2 = fb_03.sputn(\", i wanna reach out and\", 10);\n-  VERIFY( strmsz_2 == 10 );\n-  VERIFY( strmsz_1 == strmsz_2 ); \n-  // fb_03._M_out_beg = \"YZracadabras, i wanna FGHIJKLMNOPQRSTUVW\"\n-  // fb_03._M_out_cur = \"FGHIJKLMNOPQRSTUVW\"\n-  strmsz_1 = fb_02.sputn(\"racadabras\", 10);\n-  VERIFY( strmsz_1 == 10 );  \n-  // fb_02._M_out_beg = \"YZracadabras<=>?@ABCDEFGHIJKLMNOPQRSTUVW\"\n-  // fb_02._M_out_cur = \"<=>?@ABCDEFGHIJKLMNOPQRSTUVW\"\n-  strmsz_1 = fb_01.sputn(\"racadabra\", 10);\n-  VERIFY( strmsz_1 == 0 );  \n-}\n-\n-main() \n-{\n-  test03();\n-  test05();\n-  return 0;\n-}"}, {"sha": "8972b5efcb8d1edc459fe988ce1a056e1372ae63", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sputn/char/2-in.cc", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputn%2Fchar%2F2-in.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputn%2Fchar%2F2-in.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputn%2Fchar%2F2-in.cc?ref=46c4e5d6e9e539d736eebbd7cab1d76a569af11a", "patch": "@@ -0,0 +1,64 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+const char name_01[] = \"filebuf_virtuals-1.txt\"; // file with data in it\n+\n+void test05() \n+{\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+\n+  typedef filebuf::int_type \tint_type;\n+  typedef filebuf::traits_type \ttraits_type;\n+  typedef size_t \t\t\tsize_type;\n+\n+  bool \t\t\t\t\ttest = true;\n+  streamsize \t\t\tstrmsz_1, strmsz_2;\n+\n+  // streamsize sputn(const char_typs* s, streamsize n)\n+  // write up to n chars to out_cur from s, returning number assigned\n+  // NB *sputn will happily put '\\0' into your stream if you give it a chance*\n+\n+  // in \n+  {\n+    constraint_filebuf fb_01; \n+    fb_01.pubsetbuf(0, 0);\n+    fb_01.open(name_01, ios_base::in);\n+    VERIFY( fb_01.unbuffered() );\n+    strmsz_1 = fb_01.sputn(\"racadabra\", 10);\n+    VERIFY( strmsz_1 == 0 );  \n+    VERIFY( fb_01.unbuffered() );\n+  }\n+}\n+\n+main() \n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "c6109c2f100ee4ad050b52a922b0f529d3873690", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sputn/char/2-io.cc", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputn%2Fchar%2F2-io.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputn%2Fchar%2F2-io.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputn%2Fchar%2F2-io.cc?ref=46c4e5d6e9e539d736eebbd7cab1d76a569af11a", "patch": "@@ -0,0 +1,68 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+const char name_01[] = \"filebuf_virtuals-1.txt\"; // file with data in it\n+const char name_03[] = \"tmp_sputn_2io.tst\"; // empty file, need to create\n+\n+void test05() \n+{\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+\n+  typedef filebuf::int_type \tint_type;\n+  typedef filebuf::traits_type \ttraits_type;\n+  typedef size_t \t\t\tsize_type;\n+\n+  bool \t\t\t\t\ttest = true;\n+  streamsize \t\t\tstrmsz_1, strmsz_2;\n+\n+  // streamsize sputn(const char_typs* s, streamsize n)\n+  // write up to n chars to out_cur from s, returning number assigned\n+  // NB *sputn will happily put '\\0' into your stream if you give it a chance*\n+\n+  // in | out\n+  {\n+    constraint_filebuf fb_03; \n+    fb_03.pubsetbuf(0, 0);\n+    fb_03.open(name_03, ios_base::out | ios_base::in | ios_base::trunc);\n+    VERIFY( fb_03.unbuffered() );\n+    strmsz_1 = fb_03.sputn(\"racadabras\", 10);//\"abracadabras or what?\"\n+    VERIFY( strmsz_1 == 10 );\n+    strmsz_2 = fb_03.sputn(\", i wanna reach out and\", 10);\n+    VERIFY( strmsz_2 == 10 );\n+    VERIFY( strmsz_1 == strmsz_2 ); \n+    VERIFY( fb_03.unbuffered() );\n+  }\n+}\n+\n+main() \n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "81cd506aba1104dbee985a620513ffa0d45766be", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/sputn/char/2-out.cc", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputn%2Fchar%2F2-out.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputn%2Fchar%2F2-out.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fsputn%2Fchar%2F2-out.cc?ref=46c4e5d6e9e539d736eebbd7cab1d76a569af11a", "patch": "@@ -0,0 +1,66 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+const char name_02[] = \"tmp_sputn_2out.tst\"; // empty file, need to create\n+\n+void test05() \n+{\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+\n+  typedef filebuf::int_type \tint_type;\n+  typedef filebuf::traits_type \ttraits_type;\n+  typedef size_t \t\t\tsize_type;\n+\n+  bool \t\t\t\t\ttest = true;\n+  streamsize \t\t\tstrmsz_1, strmsz_2;\n+\n+  // streamsize sputn(const char_typs* s, streamsize n)\n+  // write up to n chars to out_cur from s, returning number assigned\n+  // NB *sputn will happily put '\\0' into your stream if you give it a chance*\n+\n+  // out\n+  {\n+    constraint_filebuf fb_02; \n+    fb_02.pubsetbuf(0, 0);\n+    fb_02.open(name_02, ios_base::out | ios_base::trunc);\n+    VERIFY( fb_02.unbuffered() );\n+    VERIFY( !fb_02.read_position() );\n+    strmsz_1 = fb_02.sputn(\"racadabras\", 10);\n+    VERIFY( strmsz_1 == 10 );  \n+    VERIFY( fb_02.unbuffered() );\n+    VERIFY( !fb_02.read_position() );\n+   }\n+}\n+\n+main() \n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "87e81f677720969277d3eb798576ba1a26429254", "filename": "libstdc++-v3/testsuite/data/sgetc.txt", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2Fdata%2Fsgetc.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2Fdata%2Fsgetc.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdata%2Fsgetc.txt?ref=46c4e5d6e9e539d736eebbd7cab1d76a569af11a", "patch": "@@ -0,0 +1,3 @@\n+// 990117 bkoz\n+// test functionality of basic_filebuf for char_type == char\n+// this is a data file for 27filebuf.cc"}, {"sha": "cb3c57f7dfd3a38e23d0c6ad3b6b55713db4626b", "filename": "libstdc++-v3/testsuite/data/sgetn.txt", "status": "added", "additions": 158, "deletions": 0, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2Fdata%2Fsgetn.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2Fdata%2Fsgetn.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdata%2Fsgetn.txt?ref=46c4e5d6e9e539d736eebbd7cab1d76a569af11a", "patch": "@@ -0,0 +1,158 @@\n+// 990117 bkoz\n+// test functionality of basic_filebuf for char_type == char\n+// this is a data file for 27filebuf.cc\n+\n+// Copyright (C) 1997-1999 Cygnus Solutions\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+/mnt/cdrom/sarah_vaughan/sarah_vaughan.allofme\n+/mnt/cdrom/sarah_vaughan/sarah_vaughan.speaklow\n+\n+/mnt/cdrom/nikkigiovanni_thewayifeel/ng_01_the_way_i_feel\n+/mnt/cdrom/nikkigiovanni_thewayifeel/ng_02_seduction_kidnap\n+/mnt/cdrom/nikkigiovanni_thewayifeel/ng_03_just_a_ny_poem\n+/mnt/cdrom/nikkigiovanni_thewayifeel/ng_04_butterflies_i_remem\n+/mnt/cdrom/nikkigiovanni_thewayifeel/ng_05_luxury_poem\n+/mnt/cdrom/nikkigiovanni_thewayifeel/ng_06_my_house\n+/mnt/cdrom/nikkigiovanni_thewayifeel/ng_07_the_women_gather\n+/mnt/cdrom/nikkigiovanni_thewayifeel/ng_08_the_life_i_led\n+/mnt/cdrom/nikkigiovanni_thewayifeel/ng_09_when_i_die\n+/mnt/cdrom/nikkigiovanni_thewayifeel/ng_10_revolutionary_dreams\n+/mnt/cdrom/nikkigiovanni_thewayifeel/ng_11_winter_poem\n+/mnt/cdrom/nikkigiovanni_thewayifeel/ng_12_a_certain_peace_i_nap\n+/mnt/cdrom/nikkigiovanni_thewayifeel/ng_13_poem_for_a_lady_whose\n+\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/\n+/mnt/cdrom/marley-songs_of_freedom/disk_2/\n+/mnt/cdrom/marley-songs_of_freedom/disk_4/\n+\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/back out\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/bend down low\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/bus dem shut (pyaka)\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/caution\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/do it twice\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/don't rock the boat\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/duppy conqueror\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/hammer\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/hypocrites\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/i'm still waiting\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/judge not\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/mellow mood\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/mr brown\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/nice time\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/one cup of coffee\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/one love_people get ready\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/put it on\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/simmer down\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/small axe\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/soul rebel\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/soul shake down party\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/stir it up (original)\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/sun is shining\n+/mnt/cdrom/marley-songs_of_freedom/disk_1/thank you lord (original)\n+/mnt/cdrom/marley-songs_of_freedom/disk_2/acoustic medley\n+/mnt/cdrom/marley-songs_of_freedom/disk_2/burnin' and lootin'\n+/mnt/cdrom/marley-songs_of_freedom/disk_2/concrete jungle\n+/mnt/cdrom/marley-songs_of_freedom/disk_2/craven choke puppy\n+/mnt/cdrom/marley-songs_of_freedom/disk_2/get up stand up\n+/mnt/cdrom/marley-songs_of_freedom/disk_2/guava jelly\n+/mnt/cdrom/marley-songs_of_freedom/disk_2/high tide or low tide\n+/mnt/cdrom/marley-songs_of_freedom/disk_2/i shot the sheriff\n+/mnt/cdrom/marley-songs_of_freedom/disk_2/i'm hurting inside\n+/mnt/cdrom/marley-songs_of_freedom/disk_2/iron lion zion\n+/mnt/cdrom/marley-songs_of_freedom/disk_2/lick samba\n+/mnt/cdrom/marley-songs_of_freedom/disk_2/lively up yourself\n+/mnt/cdrom/marley-songs_of_freedom/disk_2/natty dread\n+/mnt/cdrom/marley-songs_of_freedom/disk_2/no more trouble\n+/mnt/cdrom/marley-songs_of_freedom/disk_2/rastaman chant\n+/mnt/cdrom/marley-songs_of_freedom/disk_2/screw face\n+/mnt/cdrom/marley-songs_of_freedom/disk_2/slave driver\n+/mnt/cdrom/marley-songs_of_freedom/disk_2/trenchtown rock\n+/mnt/cdrom/marley-songs_of_freedom/disk_4/africa unite\n+/mnt/cdrom/marley-songs_of_freedom/disk_4/babylon system\n+/mnt/cdrom/marley-songs_of_freedom/disk_4/bad card\n+/mnt/cdrom/marley-songs_of_freedom/disk_4/coming in from the cold (12\n+/mnt/cdrom/marley-songs_of_freedom/disk_4/could you be loved (12  mix\n+/mnt/cdrom/marley-songs_of_freedom/disk_4/forever loving jah\n+/mnt/cdrom/marley-songs_of_freedom/disk_4/give thanks and praise\n+/mnt/cdrom/marley-songs_of_freedom/disk_4/one drop\n+/mnt/cdrom/marley-songs_of_freedom/disk_4/one dub\n+/mnt/cdrom/marley-songs_of_freedom/disk_4/rastaman live up\n+/mnt/cdrom/marley-songs_of_freedom/disk_4/real situation\n+/mnt/cdrom/marley-songs_of_freedom/disk_4/redemption song (live in pi\n+/mnt/cdrom/marley-songs_of_freedom/disk_4/ride natty ride (12  mix)\n+/mnt/cdrom/marley-songs_of_freedom/disk_4/so much trouble in the worl\n+/mnt/cdrom/marley-songs_of_freedom/disk_4/survival\n+/mnt/cdrom/marley-songs_of_freedom/disk_4/why should i (previously un\n+/mnt/cdrom/marley-songs_of_freedom/disk_4/zimbabwe\n+\n+/mnt/cdrom/dj_spooky_riddim_warefare/djspooky_01_pandemonium\n+/mnt/cdrom/dj_spooky_riddim_warefare/djspooky_02_sync_disjecta\n+/mnt/cdrom/dj_spooky_riddim_warefare/djspooky_03_object_unknown\n+/mnt/cdrom/dj_spooky_riddim_warefare/djspooky_04_it's_nice_not\n+/mnt/cdrom/dj_spooky_rid-2dim_warefare/djspooky_05_dialectical_tra\n+/mnt/cdrom/dj_spooky_riddim_warefare/djspooky_06_post-human_soph\n+/mnt/cdrom/dj_spooky_riddim_warefare/djspooky_07_quilombo_ex\n+/mnt/cdrom/dj_spooky_riddim_warefare/djspooky_08_rekonstruction\n+/mnt/cdrom/dj_spooky_riddim_warefare/djspooky_09_scientifik\n+/mnt/cdrom/dj_spooky_riddim_warefare/djspooky_10_a_conversation\n+/mnt/cdrom/dj_spooky_riddim_warefare/djspooky_11_peace_in_zaire\n+/mnt/cdrom/dj_spooky_riddim_warefare/djspooky_13_degree_zero\n+/mnt/cdrom/dj_spooky_riddim_warefare/djspooky_14_roman_planeta\n+/mnt/cdrom/dj_spooky_riddim_warefare/djspooky_15_bass_digitalis\n+/mnt/cdrom/dj_spooky_riddim_warefare/djspooky_16_polyphony_of\n+/mnt/cdrom/dj_spooky_riddim_warefare/djspooky_17_riddim_warfare\n+/mnt/cdrom/dj_spooky_riddim_warefare/djspooky_18_the_nerd\n+/mnt/cdrom/dj_spooky_riddim_warefare/djspooky_20_theme_of_the\n+/mnt/cdrom/dj_spooky_riddim_warefare/djspooky_21_twilight_fugue\n+\n+/mnt/cdrom/stuff_smith_mosaic/disk3/01_desert_sands\n+/mnt/cdrom/stuff_smith_mosaic/disk3/02_soft_winds\n+/mnt/cdrom/stuff_smith_mosaic/disk3/03_time_and_again\n+/mnt/cdrom/stuff_smith_mosaic/disk3/04_it_don't_mean_a_thing\n+/mnt/cdrom/stuff_smith_mosaic/disk3/05_in_a_mellotone\n+/mnt/cdrom/stuff_smith_mosaic/disk3/06_i_know_that_you_know\n+/mnt/cdrom/stuff_smith_mosaic/disk3/07_heat_wave\n+/mnt/cdrom/stuff_smith_mosaic/disk3/08_things_ain't_what_they_used_to_be\n+/mnt/cdrom/stuff_smith_mosaic/disk3/09_body_and_soul\n+\n+So I take a break, wander down to the park to stand, then lean into\n+the concrete railing demarking the beginnings of space, oceanic\n+space. I watch the waves break, and form, and ease back out to sea and\n+wrap my arms around myself and hug tightly because it's early in the\n+morning and windy, and the sun is late getting out of bed today, which\n+is good because if there was brilliant light illuminating all the\n+beauty around me I would be shocked, stunned, forced to retreat back\n+into my cabana in a daze, blinded by hummingbirds and callilillies and\n+un-named red, yellow, and blue flowers. Green envelopes me, waves\n+sooth me. I can see the wind flip the top of the waves seaward, right\n+before they break. The sea seems so calm from my perch above the fray\n+that I wonder if maybe there is just some part of the deepest, most\n+abstract ocean where there is a large creature who happily chews\n+plankton and wags its tail in gentle, adulating waves that spread and\n+move and gracefully glide thousands of miles, to crash upon a beach,\n+one after the other, politely waiting for a turn to dance with the\n+seashore.\n+\n+I know: it is what the Mexican schoolchildren call \"la vibora de la\n+mer,\" the serpent of the sea.\n+\n+\n+\n+\n+"}, {"sha": "719135caa582be51424ea52d19ca25b9ec84a581", "filename": "libstdc++-v3/testsuite/testsuite_hooks.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_hooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_hooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_hooks.h?ref=46c4e5d6e9e539d736eebbd7cab1d76a569af11a", "patch": "@@ -110,6 +110,7 @@ namespace __gnu_cxx_test\n   std::locale\n   try_named_locale(const char* name);\n \n+\n   // Test data types.\n   struct pod_char\n   {\n@@ -137,6 +138,7 @@ namespace __gnu_cxx_test\n     unsigned long l2;\n   };\n \n+\n   // Counting.\n   struct counter\n   {"}, {"sha": "33de2a05b1433fae4aeffff891f2608300564910", "filename": "libstdc++-v3/testsuite/testsuite_io.h", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_io.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46c4e5d6e9e539d736eebbd7cab1d76a569af11a/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_io.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_io.h?ref=46c4e5d6e9e539d736eebbd7cab1d76a569af11a", "patch": "@@ -0,0 +1,79 @@\n+// -*- C++ -*-\n+// Testing filebuf for the C++ library testsuite.\n+//\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+//\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#ifndef _GLIBCPP_TESTSUITE_IO_H\n+#define _GLIBCPP_TESTSUITE_IO_H\n+\n+#include <fstream>\n+\n+namespace __gnu_cxx_test\n+{  \n+  // Used to verify the constraints/requirements on get and put areas\n+  // as defined in \n+  // 27.5.1 - Stream buffer requirements: get and put areas\n+  // 27.8.1.1 - Template class basic_filebuf p 3\n+  //   If the file is not open (ios_base::in) -> input seq. cannot be read\n+  //   If the file is not open (ios_base::out) -> output seq. cannot be written\n+  //   Joint file position\n+  // 27.8.1.4 - Overridden virtual functions p9\n+  //   If unbuffered, pbase == pptr == NULL\n+  class constraint_filebuf: public std::filebuf\n+  {\n+  public:\n+    bool\n+    write_position() \n+    { \n+      bool two = this->pptr() != NULL; \n+      bool one = this->pptr() < this->epptr();\n+      return one && two;\n+    }\n+\n+    bool\n+    read_position()\n+    { \n+      bool one = this->gptr() != NULL; \n+      bool two = this->gptr() < this->egptr();\n+\n+      return one && two;\n+    }\n+\n+    bool\n+    unbuffered() \n+    { \n+      bool one = this->pbase() == NULL; \n+      bool two = this->pptr() == NULL; \n+      return one && two;\n+    }\n+    \n+  };\n+}; // namespace __gnu_cxx_test\n+\n+#endif // _GLIBCPP_TESTSUITE_IO_H\n+"}]}