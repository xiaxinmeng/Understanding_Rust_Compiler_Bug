{"sha": "673b5311a91950bfb2d484fc057411ae00bd5e09", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjczYjUzMTFhOTE5NTBiZmIyZDQ4NGZjMDU3NDExYWUwMGJkNWUwOQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-11-04T07:23:58Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-11-04T07:23:58Z"}, "message": "flags.h (flag_renumber_insns): Declare.\n\n\t* flags.h (flag_renumber_insns): Declare.\n\t* emit-rtl.c (renumber_insns): Check flag_renumber_insns.  Print\n\trenumbering table.\n\t* rtl.h (renumber_insns): Change prototype.\n\t* toplev.c (flag_renumber_insns): Define.\n\t(rest_of_compilation): Pass rtl_dump_file to flag_renumber_insns.\n\nFrom-SVN: r30388", "tree": {"sha": "1464717adfe230dd1a7f3efcf6143c8d9d949e03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1464717adfe230dd1a7f3efcf6143c8d9d949e03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/673b5311a91950bfb2d484fc057411ae00bd5e09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/673b5311a91950bfb2d484fc057411ae00bd5e09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/673b5311a91950bfb2d484fc057411ae00bd5e09", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/673b5311a91950bfb2d484fc057411ae00bd5e09/comments", "author": null, "committer": null, "parents": [{"sha": "d211953910b71e341ccec849e4ade98db792369e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d211953910b71e341ccec849e4ade98db792369e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d211953910b71e341ccec849e4ade98db792369e"}], "stats": {"total": 72, "additions": 50, "deletions": 22}, "files": [{"sha": "49f90002b864f745936cc0ef77b59c840e234ba3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/673b5311a91950bfb2d484fc057411ae00bd5e09/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/673b5311a91950bfb2d484fc057411ae00bd5e09/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=673b5311a91950bfb2d484fc057411ae00bd5e09", "patch": "@@ -1,3 +1,12 @@\n+Wed Nov  3 23:05:14 1999  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* flags.h (flag_renumber_insns): Declare.\n+\t* emit-rtl.c (renumber_insns): Check flag_renumber_insns.  Print\n+\trenumbering table.\n+\t* rtl.h (renumber_insns): Change prototype.\n+\t* toplev.c (flag_renumber_insns): Define.\n+\t(rest_of_compilation): Pass rtl_dump_file to flag_renumber_insns.\n+\t\n Wed Nov  3 15:11:27 1999  David S. Miller  <davem@redhat.com>\n \n \t* config/sparc/sparc.md: Remove insn type fpsqrt, add fpsqrts"}, {"sha": "16fe0bc2c8b5b62868b3463e9e88f501ab391d2b", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/673b5311a91950bfb2d484fc057411ae00bd5e09/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/673b5311a91950bfb2d484fc057411ae00bd5e09/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=673b5311a91950bfb2d484fc057411ae00bd5e09", "patch": "@@ -1898,21 +1898,33 @@ get_max_uid ()\n   return cur_insn_uid;\n }\n \n+/* Renumber instructions so that no instruction UIDs are wasted.  */\n+\n void\n-renumber_insns ()\n+renumber_insns (stream)\n+     FILE *stream;\n {\n   rtx insn;\n   int old_max_uid = cur_insn_uid;\n \n+  /* If we're not supposed to renumber instructions, don't.  */\n+  if (!flag_renumber_insns)\n+    return;\n+\n   /* If there aren't that many instructions, then it's not really\n      worth renumbering them.  */\n-  if (get_max_uid () < 25000)\n+  if (flag_renumber_insns == 1 && get_max_uid () < 25000)\n     return;\n \n   cur_insn_uid = 1;\n \n   for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n-    INSN_UID (insn) = cur_insn_uid++;\n+    {\n+      if (stream)\n+\tfprintf (stream, \"Renumbering insn %d to %d\\n\", \n+\t\t INSN_UID (insn), cur_insn_uid);\n+      INSN_UID (insn) = cur_insn_uid++;\n+    }\n }\n \f\n /* Return the next insn.  If it is a SEQUENCE, return the first insn\n@@ -2593,7 +2605,6 @@ remove_unncessary_notes ()\n {\n   rtx insn;\n   rtx next;\n-  varray_type block_stack;\n \n   /* Remove NOTE_INSN_DELETED notes.  We must not remove the first\n      instruction in the function because the compiler depends on the"}, {"sha": "1cca4816808b77e61382677b4f82a4e16fd9af2a", "filename": "gcc/flags.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/673b5311a91950bfb2d484fc057411ae00bd5e09/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/673b5311a91950bfb2d484fc057411ae00bd5e09/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=673b5311a91950bfb2d484fc057411ae00bd5e09", "patch": "@@ -495,6 +495,11 @@ extern int flag_bounded_pointers;\n    For Fortran: defaults to off.\n    For CHILL: defaults to off.  */\n extern int flag_bounds_check;\n+\n+/* If one, renumber instruction UIDs to reduce the number of\n+   unused UIDs if there are a lot of instructions.  If greater than\n+   one, unconditionally renumber instruction UIDs.  */\n+extern int flag_renumber_insns;\n \f\n /* Other basic status info about current function.  */\n "}, {"sha": "baa4d83bdde268bb8e2f0f7c7fec951a347a8500", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/673b5311a91950bfb2d484fc057411ae00bd5e09/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/673b5311a91950bfb2d484fc057411ae00bd5e09/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=673b5311a91950bfb2d484fc057411ae00bd5e09", "patch": "@@ -1460,7 +1460,7 @@ extern rtx emit\t\t\t\t\tPROTO ((rtx));\n    warnings about unreachable code.  */\n int force_line_numbers PROTO((void));\n void restore_line_number_status PROTO((int old_value));\n-extern void renumber_insns                      PROTO ((void));\n+extern void renumber_insns                      PROTO ((FILE *));\n extern void remove_unncessary_notes             PROTO ((void));\n \n /* In insn-emit.c */"}, {"sha": "5e7dbc0a272f33a938a04294a18085d86afd6030", "filename": "gcc/toplev.c", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/673b5311a91950bfb2d484fc057411ae00bd5e09/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/673b5311a91950bfb2d484fc057411ae00bd5e09/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=673b5311a91950bfb2d484fc057411ae00bd5e09", "patch": "@@ -771,6 +771,11 @@ int flag_bounded_pointers = 0;\n    For CHILL: defaults to off.  */\n int flag_bounds_check = 0;\n \n+/* If one, renumber instruction UIDs to reduce the number of\n+   unused UIDs if there are a lot of instructions.  If greater than\n+   one, unconditionally renumber instruction UIDs.  */\n+int flag_renumber_insns = 1;\n+\n /* Values of the -falign-* flags: how much to align labels in code. \n    0 means `use default', 1 means `don't align'.  \n    For each variable, there is an _log variant which is the power\n@@ -3776,6 +3781,17 @@ rest_of_compilation (decl)\n   TIMEVAR (jump_time, jump_optimize (insns, !JUMP_CROSS_JUMP, !JUMP_NOOP_MOVES,\n \t\t\t\t     JUMP_AFTER_REGSCAN));\n \n+  /* Jump optimization, and the removal of NULL pointer checks, may\n+     have reduced the number of instructions substantially.  CSE, and\n+     future passes, allocate arrays whose dimensions involve the maximum\n+     instruction UID, so if we can reduce the maximum UID we'll save big on\n+     memory.  */\n+  renumber_insns (rtl_dump_file);\n+\n+  /* Dump rtl code after jump, if we are doing that.  */\n+  if (jump_opt_dump)\n+    close_dump_file (print_rtl, insns);\n+\n   /* Now is when we stop if -fsyntax-only and -Wreturn-type.  */\n   if (rtl_dump_and_exit || flag_syntax_only || DECL_DEFER_OUTPUT (decl))\n     goto exit_rest_of_compilation;\n@@ -3784,20 +3800,9 @@ rest_of_compilation (decl)\n   if (flag_delete_null_pointer_checks)\n     TIMEVAR (jump_time, delete_null_pointer_checks (get_insns ()));\n \n-  /* Dump rtl code after jump, if we are doing that.  */\n-  if (jump_opt_dump)\n-    close_dump_file (print_rtl, insns);\n-\n   if (ggc_p)\n     ggc_collect ();\n \n-  /* Jump optimization, and the removal of NULL pointer checks, may\n-     have reduced the number of instructions substantially.  CSE, and\n-     future passes, allocate arrays whose dimensions involve the maximum\n-     instruction UID, so if we can reduce the maximum UID we'll save big on\n-     memory.  */\n-  renumber_insns ();\n-\n   /* Perform common subexpression elimination.\n      Nonzero value from `cse_main' means that jumps were simplified\n      and some code may now be unreachable, so do\n@@ -3832,18 +3837,17 @@ rest_of_compilation (decl)\n       if (flag_delete_null_pointer_checks)\n \tTIMEVAR (jump_time, delete_null_pointer_checks (get_insns ()));\n \n-      /* Dump rtl code after cse, if we are doing that.  */\n+      /* The second pass of jump optimization is likely to have\n+         removed a bunch more instructions.  */\n+      renumber_insns (rtl_dump_file);\n \n+      /* Dump rtl code after cse, if we are doing that.  */\n       if (cse_dump)\n \t{\n \t  close_dump_file (print_rtl, insns);\n \t  if (graph_dump_format != no_graph)\n \t    print_rtl_graph_with_bb (dump_base_name, \".02.cse\", insns);\n \t}\n-\n-      /* The second pass of jump optimization is likely to have\n-         removed a bunch more instructions.  */\n-      renumber_insns ();\n     }\n \n   purge_addressof (insns);\n@@ -3970,7 +3974,6 @@ rest_of_compilation (decl)\n \t}\n \n       /* Dump rtl code after cse, if we are doing that.  */\n-\n       if (cse2_dump)\n \t{\n \t  close_dump_file (print_rtl, insns);"}]}