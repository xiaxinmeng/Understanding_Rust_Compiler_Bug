{"sha": "bedb9fc04bb56b56d8af671bdfe28cc9052622ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmVkYjlmYzA0YmI1NmI1NmQ4YWY2NzFiZGZlMjhjYzkwNTI2MjJlYw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2005-01-02T07:52:31Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-01-02T07:52:31Z"}, "message": "re PR c/19031 (#pragma weak handling changes in 4.0.0)\n\n        PR c/19031\n        * c-decl.c (pop_file_scope): Call maybe_apply_pending_pragma_weaks.\n        * c-lang.c (finish_file): Don't do it here.\n        * objc/objc-act.c (objc_finish_file): Likewise.\n\n        * cgraph.c (decl_assembler_name_equal): New.\n        (cgraph_node_for_asm, cgraph_varpool_node_for_asm): New.\n        (cgraph_varpool_node): Actually link up cgraph_varpool_nodes.\n        * cgraph.h (struct cgraph_varpool_node): Add next.\n        (cgraph_node_for_asm, cgraph_varpool_node_for_asm): Declare.\n        * varasm.c (assemble_alias): Mark the target as needed.\n\nFrom-SVN: r92803", "tree": {"sha": "9fcf4185c5360e802ff2cef25c68d1cd2b7178d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9fcf4185c5360e802ff2cef25c68d1cd2b7178d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bedb9fc04bb56b56d8af671bdfe28cc9052622ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bedb9fc04bb56b56d8af671bdfe28cc9052622ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bedb9fc04bb56b56d8af671bdfe28cc9052622ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bedb9fc04bb56b56d8af671bdfe28cc9052622ec/comments", "author": null, "committer": null, "parents": [{"sha": "1cb2fc7b18423a905d0c646dc7b0b6b5a023de36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cb2fc7b18423a905d0c646dc7b0b6b5a023de36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cb2fc7b18423a905d0c646dc7b0b6b5a023de36"}], "stats": {"total": 156, "additions": 152, "deletions": 4}, "files": [{"sha": "0ebb6696b5dfb30f2b4a3f57e5295ce98c24810c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedb9fc04bb56b56d8af671bdfe28cc9052622ec/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedb9fc04bb56b56d8af671bdfe28cc9052622ec/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bedb9fc04bb56b56d8af671bdfe28cc9052622ec", "patch": "@@ -1,3 +1,17 @@\n+2005-01-01  Richard Henderson  <rth@redhat.com>\n+\n+\tPR c/19031\n+\t* c-decl.c (pop_file_scope): Call maybe_apply_pending_pragma_weaks.\n+\t* c-lang.c (finish_file): Don't do it here.\n+\t* objc/objc-act.c (objc_finish_file): Likewise.\n+\n+\t* cgraph.c (decl_assembler_name_equal): New.\n+\t(cgraph_node_for_asm, cgraph_varpool_node_for_asm): New.\n+\t(cgraph_varpool_node): Actually link up cgraph_varpool_nodes.\n+\t* cgraph.h (struct cgraph_varpool_node): Add next.\n+\t(cgraph_node_for_asm, cgraph_varpool_node_for_asm): Declare.\n+\t* varasm.c (assemble_alias): Mark the target as needed.\n+\n 2005-01-01  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR middle-end/19221"}, {"sha": "047ef5905cb52adc559f03d2462ecb323e9e17ca", "filename": "gcc/c-decl.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedb9fc04bb56b56d8af671bdfe28cc9052622ec/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedb9fc04bb56b56d8af671bdfe28cc9052622ec/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=bedb9fc04bb56b56d8af671bdfe28cc9052622ec", "patch": "@@ -897,6 +897,8 @@ pop_file_scope (void)\n   /* Pop off the file scope and close this translation unit.  */\n   pop_scope ();\n   file_scope = 0;\n+\n+  maybe_apply_pending_pragma_weaks ();\n   cgraph_finalize_compilation_unit ();\n }\n "}, {"sha": "5217102224f0f6124d93ba349203977744fd44e6", "filename": "gcc/c-lang.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedb9fc04bb56b56d8af671bdfe28cc9052622ec/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedb9fc04bb56b56d8af671bdfe28cc9052622ec/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=bedb9fc04bb56b56d8af671bdfe28cc9052622ec", "patch": "@@ -89,7 +89,6 @@ const char *const tree_code_name[] = {\n void\n finish_file (void)\n {\n-  maybe_apply_pending_pragma_weaks ();\n }\n \n #include \"gtype-c.h\""}, {"sha": "1c06616214910f650f3535d3d5dad60cf024885f", "filename": "gcc/cgraph.c", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedb9fc04bb56b56d8af671bdfe28cc9052622ec/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedb9fc04bb56b56d8af671bdfe28cc9052622ec/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=bedb9fc04bb56b56d8af671bdfe28cc9052622ec", "patch": "@@ -194,6 +194,56 @@ cgraph_node (tree decl)\n   return node;\n }\n \n+/* Compare ASMNAME with the DECL_ASSEMBLER_NAME of DECL.  */\n+\n+static bool\n+decl_assembler_name_equal (tree decl, tree asmname)\n+{\n+  tree decl_asmname = DECL_ASSEMBLER_NAME (decl);\n+\n+  if (decl_asmname == asmname)\n+    return true;\n+\n+  /* If the target assembler name was set by the user, things are trickier.\n+     We have a leading '*' to begin with.  After that, it's arguable what\n+     is the correct thing to do with -fleading-underscore.  Arguably, we've\n+     historically been doing the wrong thing in assemble_alias by always\n+     printing the leading underscore.  Since we're not changing that, make\n+     sure user_label_prefix follows the '*' before matching.  */\n+  if (IDENTIFIER_POINTER (decl_asmname)[0] == '*')\n+    {\n+      const char *decl_str = IDENTIFIER_POINTER (decl_asmname) + 1;\n+      size_t ulp_len = strlen (user_label_prefix);\n+\n+      if (ulp_len == 0)\n+\t;\n+      else if (strncmp (decl_str, user_label_prefix, ulp_len) == 0)\n+\tdecl_str += ulp_len;\n+      else\n+\treturn false;\n+\n+      return strcmp (decl_str, IDENTIFIER_POINTER (asmname)) == 0;\n+    }\n+\n+  return false;\n+}\n+\n+\n+/* Return the cgraph node that has ASMNAME for its DECL_ASSEMBLER_NAME.\n+   Return NULL if there's no such node.  */\n+\n+struct cgraph_node *\n+cgraph_node_for_asm (tree asmname)\n+{\n+  struct cgraph_node *node;\n+\n+  for (node = cgraph_nodes; node ; node = node->next)\n+    if (decl_assembler_name_equal (node->decl, asmname))\n+      return node;\n+\n+  return NULL;\n+}\n+\n /* Return callgraph edge representing CALL_EXPR.  */\n struct cgraph_edge *\n cgraph_edge (struct cgraph_node *node, tree call_expr)\n@@ -533,12 +583,25 @@ cgraph_varpool_node (tree decl)\n     return *slot;\n   node = ggc_alloc_cleared (sizeof (*node));\n   node->decl = decl;\n+  node->next = cgraph_varpool_nodes;\n   cgraph_varpool_n_nodes++;\n   cgraph_varpool_nodes = node;\n   *slot = node;\n   return node;\n }\n \n+struct cgraph_varpool_node *\n+cgraph_varpool_node_for_asm (tree asmname)\n+{\n+  struct cgraph_varpool_node *node;\n+\n+  for (node = cgraph_varpool_nodes; node ; node = node->next)\n+    if (decl_assembler_name_equal (node->decl, asmname))\n+      return node;\n+\n+  return NULL;\n+}\n+\n /* Set the DECL_ASSEMBLER_NAME and update cgraph hashtables.  */\n void\n change_decl_assembler_name (tree decl, tree name)"}, {"sha": "a30e54885882fb68b3d57f6ebe273816af8e35c0", "filename": "gcc/cgraph.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedb9fc04bb56b56d8af671bdfe28cc9052622ec/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedb9fc04bb56b56d8af671bdfe28cc9052622ec/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=bedb9fc04bb56b56d8af671bdfe28cc9052622ec", "patch": "@@ -138,6 +138,8 @@ struct cgraph_edge GTY((chain_next (\"%h.next_caller\")))\n struct cgraph_varpool_node GTY(())\n {\n   tree decl;\n+  /* Pointer to the next function in cgraph_varpool_nodes.  */\n+  struct cgraph_varpool_node *next;\n   /* Pointer to the next function in cgraph_varpool_nodes_queue.  */\n   struct cgraph_varpool_node *next_needed;\n \n@@ -168,6 +170,7 @@ struct cgraph_edge *cgraph_create_edge (struct cgraph_node *,\n \t\t\t\t\tstruct cgraph_node *,\n \t\t\t\t        tree);\n struct cgraph_node *cgraph_node (tree decl);\n+struct cgraph_node *cgraph_node_for_asm (tree asmname);\n struct cgraph_edge *cgraph_edge (struct cgraph_node *, tree call_expr);\n struct cgraph_local_info *cgraph_local_info (tree);\n struct cgraph_global_info *cgraph_global_info (tree);\n@@ -177,6 +180,7 @@ struct cgraph_edge * cgraph_clone_edge (struct cgraph_edge *, struct cgraph_node\n struct cgraph_node * cgraph_clone_node (struct cgraph_node *);\n \n struct cgraph_varpool_node *cgraph_varpool_node (tree decl);\n+struct cgraph_varpool_node *cgraph_varpool_node_for_asm (tree asmname);\n void cgraph_varpool_mark_needed_node (struct cgraph_varpool_node *);\n void cgraph_varpool_finalize_decl (tree);\n bool cgraph_varpool_assemble_pending_decls (void);"}, {"sha": "e735d55e391ec2dc4be9627baf1b52471f7e4f8c", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedb9fc04bb56b56d8af671bdfe28cc9052622ec/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedb9fc04bb56b56d8af671bdfe28cc9052622ec/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=bedb9fc04bb56b56d8af671bdfe28cc9052622ec", "patch": "@@ -603,8 +603,6 @@ objc_finish_file (void)\n \n #ifdef OBJCPLUS\n   cp_finish_file ();\n-#else\n-  maybe_apply_pending_pragma_weaks ();\n #endif\n }\n \f"}, {"sha": "8a21384cf46d0b63171486640a38735f9a5dfabc", "filename": "gcc/testsuite/gcc.dg/attr-alias-2.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedb9fc04bb56b56d8af671bdfe28cc9052622ec/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-alias-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedb9fc04bb56b56d8af671bdfe28cc9052622ec/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-alias-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-alias-2.c?ref=bedb9fc04bb56b56d8af671bdfe28cc9052622ec", "patch": "@@ -0,0 +1,20 @@\n+/* PR 19031 */\n+/* { dg-do link } */\n+/* { dg-require-alias } */\n+/* { dg-options \"-funit-at-a-time\" } */\n+\n+static int f1 (void) { return 0; }\n+extern int g1 (void) __attribute__((__alias__(\"f1\")));\n+\n+#define STR(x) STR1(__USER_LABEL_PREFIX__, x)\n+#define STR1(x,y) STR2(x, y)\n+#define STR2(x,y) #x #y\n+\n+static int f2 (void) __asm__(STR(a2));\n+static int f2 (void) { return 0; }\n+extern int g2 (void) __attribute__((__alias__(\"a2\")));\n+\n+int main ()\n+{\n+  return g1() + g2();\n+}"}, {"sha": "c20135a3aaea27d05d596d2a6d8a61c963e72c65", "filename": "gcc/testsuite/gcc.dg/weak/weak-11.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedb9fc04bb56b56d8af671bdfe28cc9052622ec/gcc%2Ftestsuite%2Fgcc.dg%2Fweak%2Fweak-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedb9fc04bb56b56d8af671bdfe28cc9052622ec/gcc%2Ftestsuite%2Fgcc.dg%2Fweak%2Fweak-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fweak%2Fweak-11.c?ref=bedb9fc04bb56b56d8af671bdfe28cc9052622ec", "patch": "@@ -0,0 +1,10 @@\n+/* PR 19031 */\n+/* { dg-do compile } */\n+/* { dg-require-weak \"\" } */\n+/* { dg-require-alias \"\" } */\n+/* { dg-options \"-funit-at-a-time\" } */\n+\n+/* { dg-final { scan-assembler \"xyzzy\" } } */\n+\n+static const int local = 1; \n+#pragma weak xyzzy = local"}, {"sha": "7c58b98f82688c5c256042e41b9decfbdaacbf01", "filename": "gcc/varasm.c", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedb9fc04bb56b56d8af671bdfe28cc9052622ec/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedb9fc04bb56b56d8af671bdfe28cc9052622ec/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=bedb9fc04bb56b56d8af671bdfe28cc9052622ec", "patch": "@@ -4344,7 +4344,7 @@ globalize_decl (tree decl)\n    the symbol for TARGET.  */\n \n void\n-assemble_alias (tree decl, tree target ATTRIBUTE_UNUSED)\n+assemble_alias (tree decl, tree target)\n {\n   const char *name;\n \n@@ -4395,6 +4395,44 @@ assemble_alias (tree decl, tree target ATTRIBUTE_UNUSED)\n #endif\n #endif\n \n+  /* Tell cgraph that the aliased symbol is needed.  We *could* be more\n+     specific and tell cgraph about the relationship between the two\n+     symbols, but given that aliases virtually always exist for a reason,\n+     it doesn't seem worthwhile.  */\n+  if (flag_unit_at_a_time)\n+    {\n+      struct cgraph_node *fnode = NULL;\n+      struct cgraph_varpool_node *vnode = NULL;\n+\n+      if (TREE_CODE (decl) == FUNCTION_DECL)\n+\t{\n+\t  fnode = cgraph_node_for_asm (target);\n+\t  if (fnode != NULL)\n+\t    cgraph_mark_needed_node (fnode);\n+\t  else\n+\t    {\n+\t      vnode = cgraph_varpool_node_for_asm (target);\n+\t      if (vnode != NULL)\n+\t\tcgraph_varpool_mark_needed_node (vnode);\n+\t    }\n+\t}\n+      else\n+\t{\n+\t  vnode = cgraph_varpool_node_for_asm (target);\n+\t  if (vnode != NULL)\n+\t    cgraph_varpool_mark_needed_node (vnode);\n+\t  else\n+\t    {\n+\t      fnode = cgraph_node_for_asm (target);\n+\t      if (fnode != NULL)\n+\t\tcgraph_mark_needed_node (fnode);\n+\t    }\n+\t}\n+\n+      if (fnode == NULL && vnode == NULL)\n+\twarning (\"%qD aliased to undefined symbol %qE\", decl, target);\n+    }\n+\n   TREE_USED (decl) = 1;\n   TREE_ASM_WRITTEN (decl) = 1;\n   TREE_ASM_WRITTEN (DECL_ASSEMBLER_NAME (decl)) = 1;"}]}