{"sha": "d19aa6af6634b1e97f38431ad091f3b3f12baf2f", "node_id": "C_kwDOANBUbNoAKGQxOWFhNmFmNjYzNGIxZTk3ZjM4NDMxYWQwOTFmM2IzZjEyYmFmMmY", "commit": {"author": {"name": "Bernhard Reutner-Fischer", "email": "rep.dot.nop@gmail.com", "date": "2022-11-20T17:06:04Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-12-02T19:17:53Z"}, "message": "c++: Set the locus of the function result decl\n\ngcc/cp/ChangeLog:\n\n\t* decl.cc (grokdeclarator): Build RESULT_DECL.\n\t(start_preparsed_function): Copy location from template.\n\t* semantics.cc (apply_deduced_return_type): Handle\n\targ != current_function_decl.\n\t* method.cc (implicitly_declare_fn): Use it.\n\ngcc/ChangeLog:\n\n\t* function.cc (init_function_start): Use DECL_RESULT location\n\tfor -Waggregate-return warning.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/diagnostic/return-type-loc1.C: New test.\n\nCo-authored-by: Jason Merrill <jason@redhat.com>", "tree": {"sha": "613da0d1266dc37b38754f68de5f2dc491eaa40c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/613da0d1266dc37b38754f68de5f2dc491eaa40c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d19aa6af6634b1e97f38431ad091f3b3f12baf2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d19aa6af6634b1e97f38431ad091f3b3f12baf2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d19aa6af6634b1e97f38431ad091f3b3f12baf2f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d19aa6af6634b1e97f38431ad091f3b3f12baf2f/comments", "author": {"login": "aldot", "id": 141020, "node_id": "MDQ6VXNlcjE0MTAyMA==", "avatar_url": "https://avatars.githubusercontent.com/u/141020?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldot", "html_url": "https://github.com/aldot", "followers_url": "https://api.github.com/users/aldot/followers", "following_url": "https://api.github.com/users/aldot/following{/other_user}", "gists_url": "https://api.github.com/users/aldot/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldot/subscriptions", "organizations_url": "https://api.github.com/users/aldot/orgs", "repos_url": "https://api.github.com/users/aldot/repos", "events_url": "https://api.github.com/users/aldot/events{/privacy}", "received_events_url": "https://api.github.com/users/aldot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76dd48f8956b5e17adf0ae1cd1ed3d804a005470", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76dd48f8956b5e17adf0ae1cd1ed3d804a005470", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76dd48f8956b5e17adf0ae1cd1ed3d804a005470"}], "stats": {"total": 65, "additions": 53, "deletions": 12}, "files": [{"sha": "508156309d9d504a84694ab17e4465328f213406", "filename": "gcc/cp/decl.cc", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d19aa6af6634b1e97f38431ad091f3b3f12baf2f/gcc%2Fcp%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d19aa6af6634b1e97f38431ad091f3b3f12baf2f/gcc%2Fcp%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.cc?ref=d19aa6af6634b1e97f38431ad091f3b3f12baf2f", "patch": "@@ -14772,6 +14772,19 @@ grokdeclarator (const cp_declarator *declarator,\n \telse if (constinit_p)\n \t  DECL_DECLARED_CONSTINIT_P (decl) = true;\n       }\n+    else if (TREE_CODE (decl) == FUNCTION_DECL)\n+      {\n+\t/* If we saw a return type, record its location.  */\n+\tlocation_t loc = declspecs->locations[ds_type_spec];\n+\tif (loc != UNKNOWN_LOCATION)\n+\t  {\n+\t    tree restype = TREE_TYPE (TREE_TYPE (decl));\n+\t    tree resdecl = build_decl (loc, RESULT_DECL, 0, restype);\n+\t    DECL_ARTIFICIAL (resdecl) = 1;\n+\t    DECL_IGNORED_P (resdecl) = 1;\n+\t    DECL_RESULT (decl) = resdecl;\n+\t  }\n+      }\n \n     /* Record constancy and volatility on the DECL itself .  There's\n        no need to do this when processing a template; we'll do this\n@@ -17326,9 +17339,17 @@ start_preparsed_function (tree decl1, tree attrs, int flags)\n \n   if (DECL_RESULT (decl1) == NULL_TREE)\n     {\n-      tree resdecl;\n+      /* In a template instantiation, copy the return type location.  When\n+\t parsing, the location will be set in grokdeclarator.  */\n+      location_t loc = input_location;\n+      if (DECL_TEMPLATE_INSTANTIATION (decl1))\n+\t{\n+\t  tree tmpl = template_for_substitution (decl1);\n+\t  if (tree res = DECL_RESULT (DECL_TEMPLATE_RESULT (tmpl)))\n+\t    loc = DECL_SOURCE_LOCATION (res);\n+\t}\n \n-      resdecl = build_decl (input_location, RESULT_DECL, 0, restype);\n+      tree resdecl = build_decl (loc, RESULT_DECL, 0, restype);\n       DECL_ARTIFICIAL (resdecl) = 1;\n       DECL_IGNORED_P (resdecl) = 1;\n       DECL_RESULT (decl1) = resdecl;"}, {"sha": "7b4d5a59823cda54fe3444be8df9bfa8d60926ed", "filename": "gcc/cp/method.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d19aa6af6634b1e97f38431ad091f3b3f12baf2f/gcc%2Fcp%2Fmethod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d19aa6af6634b1e97f38431ad091f3b3f12baf2f/gcc%2Fcp%2Fmethod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.cc?ref=d19aa6af6634b1e97f38431ad091f3b3f12baf2f", "patch": "@@ -3079,7 +3079,7 @@ implicitly_declare_fn (special_function_kind kind, tree type,\n     {\n       fn = copy_operator_fn (pattern_fn, EQ_EXPR);\n       DECL_ARTIFICIAL (fn) = 1;\n-      TREE_TYPE (fn) = change_return_type (boolean_type_node, TREE_TYPE (fn));\n+      apply_deduced_return_type (fn, boolean_type_node);\n       return fn;\n     }\n "}, {"sha": "ab52e56d6c179580467fefe59d3b92f128afebe0", "filename": "gcc/cp/semantics.cc", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d19aa6af6634b1e97f38431ad091f3b3f12baf2f/gcc%2Fcp%2Fsemantics.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d19aa6af6634b1e97f38431ad091f3b3f12baf2f/gcc%2Fcp%2Fsemantics.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.cc?ref=d19aa6af6634b1e97f38431ad091f3b3f12baf2f", "patch": "@@ -12325,24 +12325,23 @@ apply_deduced_return_type (tree fco, tree return_type)\n   /* We already have a DECL_RESULT from start_preparsed_function.\n      Now we need to redo the work it and allocate_struct_function\n      did to reflect the new type.  */\n-  gcc_assert (current_function_decl == fco);\n-  result = build_decl (input_location, RESULT_DECL, NULL_TREE,\n+  result = build_decl (DECL_SOURCE_LOCATION (result), RESULT_DECL, NULL_TREE,\n \t\t       TYPE_MAIN_VARIANT (return_type));\n   DECL_ARTIFICIAL (result) = 1;\n   DECL_IGNORED_P (result) = 1;\n   cp_apply_type_quals_to_decl (cp_type_quals (return_type),\n                                result);\n-\n   DECL_RESULT (fco) = result;\n \n   if (!processing_template_decl)\n-    {\n-      bool aggr = aggregate_value_p (result, fco);\n+    if (function *fun = DECL_STRUCT_FUNCTION (fco))\n+      {\n+\tbool aggr = aggregate_value_p (result, fco);\n #ifdef PCC_STATIC_STRUCT_RETURN\n-      cfun->returns_pcc_struct = aggr;\n+\tfun->returns_pcc_struct = aggr;\n #endif\n-      cfun->returns_struct = aggr;\n-    }\n+\tfun->returns_struct = aggr;\n+      }\n }\n \n /* DECL is a local variable or parameter from the surrounding scope of a"}, {"sha": "dc333c27e92008ec0d54b9b0d1f0a6e5335966cd", "filename": "gcc/function.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d19aa6af6634b1e97f38431ad091f3b3f12baf2f/gcc%2Ffunction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d19aa6af6634b1e97f38431ad091f3b3f12baf2f/gcc%2Ffunction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.cc?ref=d19aa6af6634b1e97f38431ad091f3b3f12baf2f", "patch": "@@ -4997,7 +4997,8 @@ init_function_start (tree subr)\n   /* Warn if this value is an aggregate type,\n      regardless of which calling convention we are using for it.  */\n   if (AGGREGATE_TYPE_P (TREE_TYPE (DECL_RESULT (subr))))\n-    warning (OPT_Waggregate_return, \"function returns an aggregate\");\n+    warning_at (DECL_SOURCE_LOCATION (DECL_RESULT (subr)),\n+\t\tOPT_Waggregate_return, \"function returns an aggregate\");\n }\n \n /* Expand code to verify the stack_protect_guard.  This is invoked at"}, {"sha": "f96179ed4d5c1f017fb3e52c46772d1edaece417", "filename": "gcc/testsuite/g++.dg/diagnostic/return-type-loc1.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d19aa6af6634b1e97f38431ad091f3b3f12baf2f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Freturn-type-loc1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d19aa6af6634b1e97f38431ad091f3b3f12baf2f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Freturn-type-loc1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Freturn-type-loc1.C?ref=d19aa6af6634b1e97f38431ad091f3b3f12baf2f", "patch": "@@ -0,0 +1,20 @@\n+// { dg-do compile { target c++11 } }\n+// { dg-additional-options -Waggregate-return }\n+\n+struct B { int i,j; };\n+\n+template <class T>\n+struct A\n+{\n+  template <class U>\n+  U\t\t\t\t// { dg-warning \"aggregate\" }\n+  f() { return {}; }\n+};\n+\n+int main()\n+{\n+  A<int>().f<B>();\t\t// { dg-warning \"aggregate\" }\n+}\n+\n+B\t\t\t\t// { dg-warning \"aggregate\" }\n+g() { return {}; }"}]}