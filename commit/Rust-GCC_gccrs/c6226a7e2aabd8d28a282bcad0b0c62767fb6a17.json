{"sha": "c6226a7e2aabd8d28a282bcad0b0c62767fb6a17", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzYyMjZhN2UyYWFiZDhkMjhhMjgyYmNhZDBiMGM2Mjc2N2ZiNmExNw==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2002-06-11T17:31:11Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2002-06-11T17:31:11Z"}, "message": "jcf-write.c (generate_classfile): Use FIELD_SYNTHETIC.\n\n\t* jcf-write.c (generate_classfile): Use FIELD_SYNTHETIC.\n\t* parse-scan.y (statement_without_trailing_substatement): Added\n\tassert_statement.\n\t(assert_statement): New rule.\n\t* java-tree.h (struct lang_type) [assertions]: New field.\n\t(TYPE_USES_ASSERTIONS): New macro.\n\t(CLASS_USES_ASSERTIONS): Likewise.\n\t(FIELD_SYNTHETIC): New define.\n\t* lex.c (java_lval;): Added ASSERT_TK.\n\t* parse.y (ASSERT_TK): Added.\n\t(statement_without_trailing_substatement): Added assert_statement.\n\t(assert_statement): New rule.\n\t(build_assertion): New function.\n\t(maybe_generate_pre_expand_clinit): Create and initialize\n\t$assertionsDisabled.\n\t(lookup_package_type): Removed decl.\n\t* keyword.h: Rebuilt.\n\t* keyword.gperf (assert): New token.\n\nFrom-SVN: r54516", "tree": {"sha": "5c940f59a273b4bbc23e5a9544f817838059fdcb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c940f59a273b4bbc23e5a9544f817838059fdcb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6226a7e2aabd8d28a282bcad0b0c62767fb6a17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6226a7e2aabd8d28a282bcad0b0c62767fb6a17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6226a7e2aabd8d28a282bcad0b0c62767fb6a17", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6226a7e2aabd8d28a282bcad0b0c62767fb6a17/comments", "author": null, "committer": null, "parents": [{"sha": "9da754bd5e3c704f74ff1019c735e7ac30081b0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9da754bd5e3c704f74ff1019c735e7ac30081b0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9da754bd5e3c704f74ff1019c735e7ac30081b0e"}], "stats": {"total": 286, "additions": 205, "deletions": 81}, "files": [{"sha": "3037f8cbc7d67c798f4fde730c7e40a135c076d0", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6226a7e2aabd8d28a282bcad0b0c62767fb6a17/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6226a7e2aabd8d28a282bcad0b0c62767fb6a17/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=c6226a7e2aabd8d28a282bcad0b0c62767fb6a17", "patch": "@@ -1,3 +1,24 @@\n+2002-06-11  Tom Tromey  <tromey@redhat.com>\n+\n+\t* jcf-write.c (generate_classfile): Use FIELD_SYNTHETIC.\n+\t* parse-scan.y (statement_without_trailing_substatement): Added\n+\tassert_statement.\n+\t(assert_statement): New rule.\n+\t* java-tree.h (struct lang_type) [assertions]: New field.\n+\t(TYPE_USES_ASSERTIONS): New macro.\n+\t(CLASS_USES_ASSERTIONS): Likewise.\n+\t(FIELD_SYNTHETIC): New define.\n+\t* lex.c (java_lval;): Added ASSERT_TK.\n+\t* parse.y (ASSERT_TK): Added.\n+\t(statement_without_trailing_substatement): Added assert_statement.\n+\t(assert_statement): New rule.\n+\t(build_assertion): New function.\n+\t(maybe_generate_pre_expand_clinit): Create and initialize\n+\t$assertionsDisabled.\n+\t(lookup_package_type): Removed decl.\n+\t* keyword.h: Rebuilt.\n+\t* keyword.gperf (assert): New token.\n+\n 2002-06-10  Akim Demaille  <akim@epita.fr>\n \n \t* parse.y (interface_type_list, class_member_declaration)"}, {"sha": "8a7fb9e9366438500dd21f59ead26228f77ba278", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6226a7e2aabd8d28a282bcad0b0c62767fb6a17/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6226a7e2aabd8d28a282bcad0b0c62767fb6a17/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=c6226a7e2aabd8d28a282bcad0b0c62767fb6a17", "patch": "@@ -92,6 +92,7 @@ struct JCF;\n       CLASS_PUBLIC (in TYPE_DECL).\n    2: METHOD_STATIC (in FUNCTION_DECL).\n       (But note that FIELD_STATIC uses TREE_STATIC!)\n+      FIELD_SYNTHETIC (in FIELD_DECL)\n       CLASS_COMPLETE_P (in TYPE_DECL)\n    3: METHOD_FINAL (in FUNCTION_DECL)\n       FIELD_FINAL (in FIELD_DECL)\n@@ -812,6 +813,9 @@ union lang_tree_node\n #define DECL_INIT_CALLS_THIS(DECL) \\\n   (DECL_LANG_SPECIFIC(DECL)->u.f.init_calls_this)\n \n+/* True when DECL (a field) is Synthetic.  */\n+#define FIELD_SYNTHETIC(DECL) DECL_LANG_FLAG_2 (DECL)\n+\n /* True when DECL aliases an outer context local variable.  */\n #define FIELD_LOCAL_ALIAS(DECL) DECL_LANG_FLAG_6 (DECL)\n \n@@ -1037,6 +1041,7 @@ struct lang_decl GTY(())\n #define TYPE_PRIVATE_INNER_CLASS(T) (TYPE_LANG_SPECIFIC(T)->pic)\n #define TYPE_PROTECTED_INNER_CLASS(T) (TYPE_LANG_SPECIFIC(T)->poic)\n #define TYPE_STRICTFP(T) (TYPE_LANG_SPECIFIC(T)->strictfp)\n+#define TYPE_USES_ASSERTIONS(T) (TYPE_LANG_SPECIFIC(T)->assertions)\n \n struct lang_type GTY(())\n {\n@@ -1057,6 +1062,7 @@ struct lang_type GTY(())\n   unsigned pic:1;\t\t/* Private Inner Class. */\n   unsigned poic:1;\t\t/* Protected Inner Class. */\n   unsigned strictfp:1;\t\t/* `strictfp' class.  */\n+  unsigned assertions:1;\t/* Any method uses `assert'.  */\n };\n \n #define JCF_u4 unsigned long\n@@ -1330,6 +1336,7 @@ struct rtx_def * java_expand_expr PARAMS ((tree, rtx, enum machine_mode,\n #define CLASS_PRIVATE(DECL) (TYPE_PRIVATE_INNER_CLASS (TREE_TYPE (DECL)))\n #define CLASS_PROTECTED(DECL) (TYPE_PROTECTED_INNER_CLASS (TREE_TYPE (DECL)))\n #define CLASS_STRICTFP(DECL) (TYPE_STRICTFP (TREE_TYPE (DECL)))\n+#define CLASS_USES_ASSERTIONS(DECL) (TYPE_USES_ASSERTIONS (TREE_TYPE (DECL)))\n \n /* @deprecated marker flag on methods, fields and classes */\n "}, {"sha": "dcf2397a9ec4adebcac644bc22773455382c1820", "filename": "gcc/java/jcf-write.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6226a7e2aabd8d28a282bcad0b0c62767fb6a17/gcc%2Fjava%2Fjcf-write.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6226a7e2aabd8d28a282bcad0b0c62767fb6a17/gcc%2Fjava%2Fjcf-write.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-write.c?ref=c6226a7e2aabd8d28a282bcad0b0c62767fb6a17", "patch": "@@ -2962,7 +2962,7 @@ generate_classfile (clas, state)\n       if (have_value)\n \tattr_count++;\n \n-      if (FIELD_THISN (part) || FIELD_LOCAL_ALIAS (part))\n+      if (FIELD_THISN (part) || FIELD_LOCAL_ALIAS (part) || FIELD_SYNTHETIC (part))\n \tattr_count++;\n \n       PUT2 (attr_count);  /* attributes_count */\n@@ -2980,8 +2980,10 @@ generate_classfile (clas, state)\n \t  PUT4 (2); /* attribute_length */\n \t  i = find_constant_index (init, state);  PUT2 (i);\n \t}\n-      /* Emit the \"Synthetic\" attribute for val$<x> and this$<n> fields. */\n-      if (FIELD_THISN (part) || FIELD_LOCAL_ALIAS (part))\n+      /* Emit the \"Synthetic\" attribute for val$<x> and this$<n>\n+\t fields and other fields which need it.  */\n+      if (FIELD_THISN (part) || FIELD_LOCAL_ALIAS (part)\n+\t  || FIELD_SYNTHETIC (part))\n \tptr = append_synthetic_attribute (state);\n       fields_count++;\n     }"}, {"sha": "1087d3b00af9f004f061ed11022cc2b2df5107bb", "filename": "gcc/java/keyword.gperf", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6226a7e2aabd8d28a282bcad0b0c62767fb6a17/gcc%2Fjava%2Fkeyword.gperf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6226a7e2aabd8d28a282bcad0b0c62767fb6a17/gcc%2Fjava%2Fkeyword.gperf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fkeyword.gperf?ref=c6226a7e2aabd8d28a282bcad0b0c62767fb6a17", "patch": "@@ -87,3 +87,4 @@ strictfp, STRICT_TK\n true, TRUE_TK\n false, FALSE_TK\n null, NULL_TK\n+assert, ASSERT_TK"}, {"sha": "24fcef56cc032c6895439e00f58f9bc4aef98e9d", "filename": "gcc/java/keyword.h", "status": "modified", "additions": 66, "deletions": 75, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6226a7e2aabd8d28a282bcad0b0c62767fb6a17/gcc%2Fjava%2Fkeyword.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6226a7e2aabd8d28a282bcad0b0c62767fb6a17/gcc%2Fjava%2Fkeyword.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fkeyword.h?ref=c6226a7e2aabd8d28a282bcad0b0c62767fb6a17", "patch": "@@ -1,5 +1,5 @@\n-/* C code produced by gperf version 2.7.2 */\n-/* Command-line: gperf -L C -C -F ', 0' -p -t -j1 -i 1 -g -o -N java_keyword -k'1,4,$' keyword.gperf  */\n+/* C code produced by gperf version 2.7 */\n+/* Command-line: gperf -L C -C -F , 0 -p -t -j1 -i 1 -g -o -N java_keyword -k1,4,$ keyword.gperf  */\n /* Keyword definition for the GNU compiler for the Java(TM) language.\n    Copyright (C) 1997, 1998 Free Software Foundation, Inc.\n    Contributed by Alexandre Petit-Bianco (apbianco@cygnus.com)\n@@ -35,19 +35,15 @@ __inline\n #endif\n const struct java_keyword *java_keyword\tPARAMS ((const char *, unsigned int));\n \n-#define TOTAL_KEYWORDS 51\n+#define TOTAL_KEYWORDS 52\n #define MIN_WORD_LENGTH 2\n #define MAX_WORD_LENGTH 12\n #define MIN_HASH_VALUE 7\n-#define MAX_HASH_VALUE 95\n-/* maximum key range = 89, duplicates = 0 */\n+#define MAX_HASH_VALUE 85\n+/* maximum key range = 79, duplicates = 0 */\n \n #ifdef __GNUC__\n __inline\n-#else\n-#ifdef __cplusplus\n-inline\n-#endif\n #endif\n static unsigned int\n hash (str, len)\n@@ -56,32 +52,32 @@ hash (str, len)\n {\n   static const unsigned char asso_values[] =\n     {\n-      96, 96, 96, 96, 96, 96, 96, 96, 96, 96,\n-      96, 96, 96, 96, 96, 96, 96, 96, 96, 96,\n-      96, 96, 96, 96, 96, 96, 96, 96, 96, 96,\n-      96, 96, 96, 96, 96, 96, 96, 96, 96, 96,\n-      96, 96, 96, 96, 96, 96, 96, 96, 96, 96,\n-      96, 96, 96, 96, 96, 96, 96, 96, 96, 96,\n-      96, 96, 96, 96, 96, 96, 96, 96, 96, 96,\n-      96, 96, 96, 96, 96, 96, 96, 96, 96, 96,\n-      96, 96, 96, 96, 96, 96, 96, 96, 96, 96,\n-      96, 96, 96, 96, 96, 96, 96,  9, 17,  3,\n-       1,  1, 20, 13, 15, 29, 96, 21,  1, 96,\n-      35, 39,  1, 96, 15,  6,  2,  1, 41, 17,\n-      96,  7, 96, 96, 96, 96, 96, 96, 96, 96,\n-      96, 96, 96, 96, 96, 96, 96, 96, 96, 96,\n-      96, 96, 96, 96, 96, 96, 96, 96, 96, 96,\n-      96, 96, 96, 96, 96, 96, 96, 96, 96, 96,\n-      96, 96, 96, 96, 96, 96, 96, 96, 96, 96,\n-      96, 96, 96, 96, 96, 96, 96, 96, 96, 96,\n-      96, 96, 96, 96, 96, 96, 96, 96, 96, 96,\n-      96, 96, 96, 96, 96, 96, 96, 96, 96, 96,\n-      96, 96, 96, 96, 96, 96, 96, 96, 96, 96,\n-      96, 96, 96, 96, 96, 96, 96, 96, 96, 96,\n-      96, 96, 96, 96, 96, 96, 96, 96, 96, 96,\n-      96, 96, 96, 96, 96, 96, 96, 96, 96, 96,\n-      96, 96, 96, 96, 96, 96, 96, 96, 96, 96,\n-      96, 96, 96, 96, 96, 96\n+      86, 86, 86, 86, 86, 86, 86, 86, 86, 86,\n+      86, 86, 86, 86, 86, 86, 86, 86, 86, 86,\n+      86, 86, 86, 86, 86, 86, 86, 86, 86, 86,\n+      86, 86, 86, 86, 86, 86, 86, 86, 86, 86,\n+      86, 86, 86, 86, 86, 86, 86, 86, 86, 86,\n+      86, 86, 86, 86, 86, 86, 86, 86, 86, 86,\n+      86, 86, 86, 86, 86, 86, 86, 86, 86, 86,\n+      86, 86, 86, 86, 86, 86, 86, 86, 86, 86,\n+      86, 86, 86, 86, 86, 86, 86, 86, 86, 86,\n+      86, 86, 86, 86, 86, 86, 86,  1, 34,  3,\n+       1,  1, 18,  7, 21, 28, 86, 14,  1, 86,\n+      18, 20, 37, 86, 15,  6,  2,  5, 40, 36,\n+      86, 36, 86, 86, 86, 86, 86, 86, 86, 86,\n+      86, 86, 86, 86, 86, 86, 86, 86, 86, 86,\n+      86, 86, 86, 86, 86, 86, 86, 86, 86, 86,\n+      86, 86, 86, 86, 86, 86, 86, 86, 86, 86,\n+      86, 86, 86, 86, 86, 86, 86, 86, 86, 86,\n+      86, 86, 86, 86, 86, 86, 86, 86, 86, 86,\n+      86, 86, 86, 86, 86, 86, 86, 86, 86, 86,\n+      86, 86, 86, 86, 86, 86, 86, 86, 86, 86,\n+      86, 86, 86, 86, 86, 86, 86, 86, 86, 86,\n+      86, 86, 86, 86, 86, 86, 86, 86, 86, 86,\n+      86, 86, 86, 86, 86, 86, 86, 86, 86, 86,\n+      86, 86, 86, 86, 86, 86, 86, 86, 86, 86,\n+      86, 86, 86, 86, 86, 86, 86, 86, 86, 86,\n+      86, 86, 86, 86, 86, 86\n     };\n   register int hval = len;\n \n@@ -109,74 +105,69 @@ java_keyword (str, len)\n {\n   static const struct java_keyword wordlist[] =\n     {\n-      {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0},\n-      {\"\", 0},\n+      {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0},\n       {\"else\", ELSE_TK},\n       {\"true\", TRUE_TK},\n       {\"case\", CASE_TK},\n+      {\"assert\", ASSERT_TK},\n+      {\"default\", DEFAULT_TK},\n       {\"\", 0},\n-      {\"public\", PUBLIC_TK},\n-      {\"try\", TRY_TK},\n-      {\"protected\", PROTECTED_TK},\n+      {\"abstract\", ABSTRACT_TK},\n       {\"continue\", CONTINUE_TK},\n       {\"extends\", EXTENDS_TK},\n       {\"const\", CONST_TK},\n       {\"static\", STATIC_TK},\n       {\"this\", THIS_TK},\n-      {\"default\", DEFAULT_TK},\n+      {\"long\", LONG_TK},\n       {\"class\", CLASS_TK},\n-      {\"abstract\", ABSTRACT_TK},\n+      {\"\", 0},\n       {\"synchronized\", SYNCHRONIZED_TK},\n-      {\"byte\", BYTE_TK},\n-      {\"while\", WHILE_TK},\n-      {\"double\", DOUBLE_TK},\n-      {\"catch\", CATCH_TK},\n+      {\"do\", DO_TK},\n+      {\"null\", NULL_TK},\n+      {\"final\", FINAL_TK},\n+      {\"float\", FLOAT_TK},\n       {\"super\", SUPER_TK},\n       {\"short\", SHORT_TK},\n-      {\"switch\", SWITCH_TK},\n-      {\"package\", PACKAGE_TK},\n-      {\"long\", LONG_TK},\n-      {\"false\", FALSE_TK},\n       {\"\", 0},\n+      {\"false\", FALSE_TK},\n+      {\"transient\", TRANSIENT_TK},\n+      {\"catch\", CATCH_TK},\n       {\"int\", INT_TK},\n-      {\"final\", FINAL_TK},\n-      {\"float\", FLOAT_TK},\n-      {\"char\", CHAR_TK},\n+      {\"throws\", THROWS_TK},\n+      {\"switch\", SWITCH_TK},\n       {\"for\", FOR_TK},\n+      {\"char\", CHAR_TK},\n       {\"\", 0},\n       {\"interface\", INTERFACE_TK},\n-      {\"null\", NULL_TK},\n-      {\"do\", DO_TK},\n-      {\"finally\", FINALLY_TK},\n-      {\"strictfp\", STRICT_TK},\n-      {\"\", 0},\n+      {\"byte\", BYTE_TK},\n+      {\"try\", TRY_TK},\n+      {\"double\", DOUBLE_TK},\n+      {\"while\", WHILE_TK},\n+      {\"return\", RETURN_TK},\n       {\"implements\", IMPLEMENTS_TK},\n       {\"void\", VOID_TK},\n-      {\"transient\", TRANSIENT_TK},\n-      {\"\", 0},\n-      {\"private\", PRIVATE_TK},\n+      {\"public\", PUBLIC_TK},\n       {\"if\", IF_TK},\n+      {\"protected\", PROTECTED_TK},\n+      {\"volatile\", VOLATILE_TK},\n+      {\"goto\", GOTO_TK},\n+      {\"\", 0},\n+      {\"native\", NATIVE_TK},\n       {\"break\", BREAK_TK},\n-      {\"throws\", THROWS_TK},\n       {\"\", 0},\n+      {\"import\", IMPORT_TK},\n       {\"new\", NEW_TK},\n-      {\"\", 0},\n-      {\"return\", RETURN_TK},\n-      {\"\", 0},\n-      {\"volatile\", VOLATILE_TK},\n-      {\"boolean\", BOOLEAN_TK},\n       {\"instanceof\", INSTANCEOF_TK},\n+      {\"package\", PACKAGE_TK},\n+      {\"boolean\", BOOLEAN_TK},\n       {\"\", 0},\n+      {\"finally\", FINALLY_TK},\n       {\"throw\", THROW_TK},\n+      {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0},\n       {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0},\n-      {\"\", 0},\n-      {\"native\", NATIVE_TK},\n-      {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0},\n-      {\"import\", IMPORT_TK},\n-      {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0},\n-      {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0},\n-      {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0},\n-      {\"goto\", GOTO_TK}\n+      {\"strictfp\", STRICT_TK},\n+      {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0}, {\"\", 0},\n+      {\"private\", PRIVATE_TK}\n     };\n \n   if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)"}, {"sha": "21c442b58e98d6ace9bcd8f8dd000341c9bb059b", "filename": "gcc/java/lex.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6226a7e2aabd8d28a282bcad0b0c62767fb6a17/gcc%2Fjava%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6226a7e2aabd8d28a282bcad0b0c62767fb6a17/gcc%2Fjava%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flex.c?ref=c6226a7e2aabd8d28a282bcad0b0c62767fb6a17", "patch": "@@ -1616,6 +1616,7 @@ java_lex (java_lval)\n \t    case CATCH_TK:\n \t    case THROW_TK:\n \t    case INSTANCEOF_TK:\n+\t    case ASSERT_TK:\n \t      BUILD_OPERATOR (kw->token);\n \n \t    default:"}, {"sha": "977bbce226d77b0b3e0a24b764e9f895b8f60959", "filename": "gcc/java/parse-scan.y", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6226a7e2aabd8d28a282bcad0b0c62767fb6a17/gcc%2Fjava%2Fparse-scan.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6226a7e2aabd8d28a282bcad0b0c62767fb6a17/gcc%2Fjava%2Fparse-scan.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse-scan.y?ref=c6226a7e2aabd8d28a282bcad0b0c62767fb6a17", "patch": "@@ -180,6 +180,7 @@ void report PARAMS ((void));\n %token   SWITCH_TK       CONST_TK           TRY_TK\n %token   FOR_TK          NEW_TK             CONTINUE_TK\n %token   GOTO_TK         PACKAGE_TK         THIS_TK\n+%token   ASSERT_TK\n \n %token   BYTE_TK         SHORT_TK           INT_TK            LONG_TK\n %token   CHAR_TK         INTEGRAL_TK\n@@ -717,6 +718,7 @@ statement_without_trailing_substatement:\n |\tsynchronized_statement\n |\tthrow_statement\n |\ttry_statement\n+|\tassert_statement\n ;\n \n empty_statement:\n@@ -870,6 +872,14 @@ throw_statement:\n \tTHROW_TK expression SC_TK { ++complexity; }\n ;\n \n+assert_statement:\n+\tASSERT_TK expression REL_CL_TK expression SC_TK\n+|\tASSERT_TK expression SC_TK\n+|\tASSERT_TK error\n+\t\t{yyerror (\"Missing term\"); RECOVER;}\n+|\tASSERT_TK expression error\n+\t\t{yyerror (\"';' expected\"); RECOVER;}\n+;\n synchronized_statement:\n \tsynchronized OP_TK expression CP_TK block\n |\tsynchronized OP_TK expression CP_TK error"}, {"sha": "907ca28580860f11d1f31501a39b0893e25f453e", "filename": "gcc/java/parse.y", "status": "modified", "additions": 94, "deletions": 3, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6226a7e2aabd8d28a282bcad0b0c62767fb6a17/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6226a7e2aabd8d28a282bcad0b0c62767fb6a17/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=c6226a7e2aabd8d28a282bcad0b0c62767fb6a17", "patch": "@@ -220,6 +220,7 @@ static tree build_string_concatenation PARAMS ((tree, tree));\n static tree patch_string_cst PARAMS ((tree));\n static tree patch_string PARAMS ((tree));\n static tree encapsulate_with_try_catch PARAMS ((int, tree, tree, tree));\n+static tree build_assertion PARAMS ((int, tree, tree));\n static tree build_try_statement PARAMS ((int, tree, tree));\n static tree build_try_finally_statement PARAMS ((int, tree, tree));\n static tree patch_try_statement PARAMS ((tree));\n@@ -505,6 +506,7 @@ static GTY(()) tree src_parse_roots[1];\n %token   SWITCH_TK       CONST_TK           TRY_TK\n %token   FOR_TK          NEW_TK             CONTINUE_TK\n %token   GOTO_TK         PACKAGE_TK         THIS_TK\n+%token   ASSERT_TK\n \n %token   BYTE_TK         SHORT_TK           INT_TK            LONG_TK\n %token   CHAR_TK         INTEGRAL_TK\n@@ -571,12 +573,13 @@ static GTY(()) tree src_parse_roots[1];\n \t\t\tleft_hand_side assignment for_header for_begin\n \t\t\tconstant_expression do_statement_begin empty_statement\n \t\t\tswitch_statement synchronized_statement throw_statement\n-\t\t\ttry_statement switch_expression switch_block\n+\t\t\ttry_statement assert_statement\n+\t\t\tswitch_expression switch_block\n \t\t\tcatches catch_clause catch_clause_parameter finally\n \t\t\tanonymous_class_creation trap_overflow_corner_case\n %type    <node>         return_statement break_statement continue_statement\n \n-%type    <operator>     ASSIGN_TK      MULT_ASSIGN_TK  DIV_ASSIGN_TK\n+%type    <operator>     ASSIGN_TK      MULT_ASSIGN_TK  DIV_ASSIGN_TK  \n %type    <operator>     REM_ASSIGN_TK  PLUS_ASSIGN_TK  MINUS_ASSIGN_TK\n %type    <operator>     LS_ASSIGN_TK   SRS_ASSIGN_TK   ZRS_ASSIGN_TK\n %type    <operator>     AND_ASSIGN_TK  XOR_ASSIGN_TK   OR_ASSIGN_TK\n@@ -588,7 +591,7 @@ static GTY(()) tree src_parse_roots[1];\n %token   <operator>     OP_TK OSB_TK DOT_TK THROW_TK INSTANCEOF_TK\n %type    <operator>\tTHIS_TK SUPER_TK RETURN_TK BREAK_TK CONTINUE_TK\n %type\t <operator>     CASE_TK DEFAULT_TK TRY_TK CATCH_TK SYNCHRONIZED_TK\n-%type\t <operator>     NEW_TK\n+%type\t <operator>     NEW_TK ASSERT_TK\n \n %type\t <node>\t\tmethod_body\n \n@@ -1460,6 +1463,7 @@ statement_without_trailing_substatement:\n |\tsynchronized_statement\n |\tthrow_statement\n |\ttry_statement\n+|\tassert_statement\n ;\n \n empty_statement:\n@@ -1845,6 +1849,21 @@ throw_statement:\n \t\t{yyerror (\"';' expected\"); RECOVER;}\n ;\n \n+assert_statement:\n+\tASSERT_TK expression REL_CL_TK expression SC_TK\n+\t\t{\n+\t\t  $$ = build_assertion ($1.location, $2, $4);\n+\t\t}\n+|\tASSERT_TK expression SC_TK\n+\t\t{\n+\t\t  $$ = build_assertion ($1.location, $2, NULL_TREE);\n+\t\t}\n+|\tASSERT_TK error\n+\t\t{yyerror (\"Missing term\"); RECOVER;}\n+|\tASSERT_TK expression error\n+\t\t{yyerror (\"';' expected\"); RECOVER;}\n+;\n+\n synchronized_statement:\n \tsynchronized OP_TK expression CP_TK block\n \t\t{\n@@ -15292,6 +15311,78 @@ patch_switch_statement (node)\n   return node;\n }\n \n+/* Assertions.  */\n+\n+/* Build an assertion expression for `assert CONDITION : VALUE'; VALUE\n+   might be NULL_TREE.  */\n+static tree\n+build_assertion (location, condition, value)\n+     int location;\n+     tree condition, value;\n+{\n+  tree node;\n+  tree klass = GET_CPC ();\n+\n+  if (! CLASS_USES_ASSERTIONS (klass))\n+    {\n+      tree field, classdollar, id, call;\n+      tree class_type = TREE_TYPE (klass);\n+\n+      field = add_field (class_type,\n+\t\t\t get_identifier (\"$assertionsDisabled\"),\n+\t\t\t boolean_type_node,\n+\t\t\t ACC_PRIVATE | ACC_STATIC | ACC_FINAL);\n+      MAYBE_CREATE_VAR_LANG_DECL_SPECIFIC (field);\n+      FIELD_SYNTHETIC (field) = 1;\n+\n+      if (!TYPE_DOT_CLASS (class_type))\n+\tbuild_dot_class_method (class_type);\n+      classdollar = build_dot_class_method_invocation (class_type);\n+\n+      /* Call CLASS.desiredAssertionStatus().  */\n+      id = build_wfl_node (get_identifier (\"desiredAssertionStatus\"));\n+      call = build (CALL_EXPR, NULL_TREE, id, NULL_TREE, NULL_TREE);\n+      call = make_qualified_primary (classdollar, call, location);\n+      TREE_SIDE_EFFECTS (call) = 1;\n+      DECL_INITIAL (field) = call;\n+\n+      /* Record the initializer in the initializer statement list.  */\n+      call = build (MODIFY_EXPR, NULL_TREE, field, call);\n+      TREE_CHAIN (call) = CPC_STATIC_INITIALIZER_STMT (ctxp);\n+      SET_CPC_STATIC_INITIALIZER_STMT (ctxp, call);\n+      MODIFY_EXPR_FROM_INITIALIZATION_P (call) = 1;\n+\n+      CLASS_USES_ASSERTIONS (klass) = 1;\n+    }\n+\n+  if (value != NULL_TREE)\n+    value = tree_cons (NULL_TREE, value, NULL_TREE);\n+\n+  node = build_wfl_node (get_identifier (\"java\"));\n+  node = make_qualified_name (node, build_wfl_node (get_identifier (\"lang\")),\n+\t\t\t      location);\n+  node = make_qualified_name (node, build_wfl_node (get_identifier (\"AssertionError\")),\n+\t\t\t      location);\n+\n+  node = build (NEW_CLASS_EXPR, NULL_TREE, node, value, NULL_TREE);\n+  TREE_SIDE_EFFECTS (node) = 1;\n+  /* It is too early to use BUILD_THROW.  */\n+  node = build1 (THROW_EXPR, NULL_TREE, node);\n+  TREE_SIDE_EFFECTS (node) = 1;\n+\n+  /* We invert the condition; if we just put NODE as the `else' part\n+     then we generate weird-looking bytecode.  */\n+  condition = build1 (TRUTH_NOT_EXPR, NULL_TREE, condition);\n+  /* Check $assertionsDisabled.  */\n+  condition\n+    = build (TRUTH_ANDIF_EXPR, NULL_TREE,\n+\t     build1 (TRUTH_NOT_EXPR, NULL_TREE,\n+\t\t     build_wfl_node (get_identifier (\"$assertionsDisabled\"))),\n+\t     condition);\n+  node = build_if_else_statement (location, condition, node, NULL_TREE);\n+  return node;\n+}\n+\n /* 14.18 The try/catch statements */\n \n /* Encapsulate TRY_STMTS' in a try catch sequence. The catch clause"}]}