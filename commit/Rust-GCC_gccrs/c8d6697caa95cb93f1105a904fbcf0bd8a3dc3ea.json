{"sha": "c8d6697caa95cb93f1105a904fbcf0bd8a3dc3ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzhkNjY5N2NhYTk1Y2I5M2YxMTA1YTkwNGZiY2YwYmQ4YTNkYzNlYQ==", "commit": {"author": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1993-03-03T14:48:17Z"}, "committer": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1993-03-03T14:48:17Z"}, "message": "(lhs_lshift_operand): New function.\n\n(lhs_lshift_cint_operand): New function.\n(print_operand): Handle L and P for bit field instructions.\n\nFrom-SVN: r3623", "tree": {"sha": "12a96d9403069176e3344a38866863c58f925a80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12a96d9403069176e3344a38866863c58f925a80"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8d6697caa95cb93f1105a904fbcf0bd8a3dc3ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8d6697caa95cb93f1105a904fbcf0bd8a3dc3ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8d6697caa95cb93f1105a904fbcf0bd8a3dc3ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8d6697caa95cb93f1105a904fbcf0bd8a3dc3ea/comments", "author": null, "committer": null, "parents": [{"sha": "95246213bda1bccf642de0a858dec0f6da20193a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95246213bda1bccf642de0a858dec0f6da20193a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95246213bda1bccf642de0a858dec0f6da20193a"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "1ef694fc48e9330fd391c1cfab8e97bab6f5ecaa", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8d6697caa95cb93f1105a904fbcf0bd8a3dc3ea/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8d6697caa95cb93f1105a904fbcf0bd8a3dc3ea/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=c8d6697caa95cb93f1105a904fbcf0bd8a3dc3ea", "patch": "@@ -387,6 +387,29 @@ ior_operand (op, mode)\n   return (GET_CODE (op) == CONST_INT && ior_mask_p (INTVAL (op)));\n }\n \n+int\n+lhs_lshift_operand (op, mode)\n+     rtx op;\n+     enum machine_mode mode;\n+{\n+  return register_operand (op, mode) || lhs_lshift_cint_operand (op, mode);\n+}\n+\n+/* True iff OP is a CONST_INT of the forms 0...0xxxx or 0...01...1xxxx.\n+   Such values can be the left hand side x in (x << r), using the zvdepi\n+   instruction.  */\n+int\n+lhs_lshift_cint_operand (op, mode)\n+     rtx op;\n+     enum machine_mode mode;\n+{\n+  unsigned x;\n+  if (GET_CODE (op) != CONST_INT)\n+    return 0;\n+  x = INTVAL (op) >> 4;\n+  return (x & (x + 1)) == 0;\n+}\n+\n int\n arith32_operand (op, mode)\n      rtx op;\n@@ -2364,6 +2387,20 @@ print_operand (file, x, code)\n \t  return;\n \t}\n       abort();\n+    case 'L':\n+      if (GET_CODE (x) == CONST_INT)\n+\t{\n+\t  fprintf (file, \"%d\", 32 - (INTVAL (x) & 31));\n+\t  return;\n+\t}\n+      abort();\n+    case 'P':\n+      if (GET_CODE (x) == CONST_INT)\n+\t{\n+\t  fprintf (file, \"%d\", 31 - (INTVAL (x) & 31));\n+\t  return;\n+\t}\n+      abort();\n     case 'I':\n       if (GET_CODE (x) == CONST_INT)\n \tfputs (\"i\", file);"}]}