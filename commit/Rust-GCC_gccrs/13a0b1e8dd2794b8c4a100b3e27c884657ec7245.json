{"sha": "13a0b1e8dd2794b8c4a100b3e27c884657ec7245", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTNhMGIxZThkZDI3OTRiOGM0YTEwMGIzZTI3Yzg4NDY1N2VjNzI0NQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-09-05T13:58:39Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-09-05T13:58:39Z"}, "message": "[multiple changes]\n\n2011-09-05  Thomas Quinot  <quinot@adacore.com>\n\n\t* exp_intr.adb, s-tasini.adb: Minor reformatting.\n\n2011-09-05  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch3.adb (Access_Definition): If an access type declaration\n\tappears in a child unit, the scope of whatever anonymous type\n\tmay be generated is the child unit itself.\n\n2011-09-05  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.adb (Analyze_Expression_Function): Do not set\n\tComes_From_Source on rewritten body.\n\t(Analyze_Subprogram_Body_Helper): Check that the original node for\n\tthe body comes from source, when determining whether expansion\n\tof a protected operation is needed.\n\nFrom-SVN: r178543", "tree": {"sha": "674c1838aaffec64653c0a4cada8b32ed422c7fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/674c1838aaffec64653c0a4cada8b32ed422c7fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13a0b1e8dd2794b8c4a100b3e27c884657ec7245", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13a0b1e8dd2794b8c4a100b3e27c884657ec7245", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13a0b1e8dd2794b8c4a100b3e27c884657ec7245", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13a0b1e8dd2794b8c4a100b3e27c884657ec7245/comments", "author": null, "committer": null, "parents": [{"sha": "2042872573c41ee6974a0f8e708799e9a8524996", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2042872573c41ee6974a0f8e708799e9a8524996", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2042872573c41ee6974a0f8e708799e9a8524996"}], "stats": {"total": 61, "additions": 39, "deletions": 22}, "files": [{"sha": "e77ffbbe820531517c284c8e4f5d388ea3fecc52", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13a0b1e8dd2794b8c4a100b3e27c884657ec7245/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13a0b1e8dd2794b8c4a100b3e27c884657ec7245/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=13a0b1e8dd2794b8c4a100b3e27c884657ec7245", "patch": "@@ -1,3 +1,21 @@\n+2011-09-05  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* exp_intr.adb, s-tasini.adb: Minor reformatting.\n+\n+2011-09-05  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb (Access_Definition): If an access type declaration\n+\tappears in a child unit, the scope of whatever anonymous type\n+\tmay be generated is the child unit itself.\n+\n+2011-09-05  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Expression_Function): Do not set\n+\tComes_From_Source on rewritten body.\n+\t(Analyze_Subprogram_Body_Helper): Check that the original node for\n+\tthe body comes from source, when determining whether expansion\n+\tof a protected operation is needed.\n+\n 2011-09-05  Ed Schonberg  <schonberg@adacore.com>\n \n \t* exp_aggr.adb (Replace_Type): If the target of the assignment is"}, {"sha": "ce7c0dcc979cdb6e34bf73367a377ba8889c4b9f", "filename": "gcc/ada/exp_intr.adb", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13a0b1e8dd2794b8c4a100b3e27c884657ec7245/gcc%2Fada%2Fexp_intr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13a0b1e8dd2794b8c4a100b3e27c884657ec7245/gcc%2Fada%2Fexp_intr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_intr.adb?ref=13a0b1e8dd2794b8c4a100b3e27c884657ec7245", "patch": "@@ -1006,9 +1006,8 @@ package body Exp_Intr is\n             Nam2 : Node_Id;\n \n          begin\n-            --  An Abort followed by a Free will not do what the user\n-            --  expects, because the abort is not immediate. This is\n-            --  worth a friendly warning.\n+            --  An Abort followed by a Free will not do what the user expects,\n+            --  because the abort is not immediate. This is worth a warning.\n \n             while Present (Stat)\n               and then not Comes_From_Source (Original_Node (Stat))\n@@ -1101,9 +1100,9 @@ package body Exp_Intr is\n \n       if Present (Procedure_To_Call (Free_Node)) then\n \n-         --  For all cases of a Deallocate call, the back-end needs to be\n-         --  able to compute the size of the object being freed. This may\n-         --  require some adjustments for objects of dynamic size.\n+         --  For all cases of a Deallocate call, the back-end needs to be able\n+         --  to compute the size of the object being freed. This may require\n+         --  some adjustments for objects of dynamic size.\n          --\n          --  If the type is class wide, we generate an implicit type with the\n          --  right dynamic size, so that the deallocate call gets the right\n@@ -1175,8 +1174,8 @@ package body Exp_Intr is\n          Set_Expression (Free_Node, Free_Arg);\n       end if;\n \n-      --  Only remaining step is to set result to null, or generate a\n-      --  raise of constraint error if the target object is \"not null\".\n+      --  Only remaining step is to set result to null, or generate a raise of\n+      --  Constraint_Error if the target object is \"not null\".\n \n       if Can_Never_Be_Null (Etype (Arg)) then\n          Append_To (Stmts,"}, {"sha": "7203c1ccec29b8497578539491c225552f81e018", "filename": "gcc/ada/s-tasini.adb", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13a0b1e8dd2794b8c4a100b3e27c884657ec7245/gcc%2Fada%2Fs-tasini.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13a0b1e8dd2794b8c4a100b3e27c884657ec7245/gcc%2Fada%2Fs-tasini.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasini.adb?ref=13a0b1e8dd2794b8c4a100b3e27c884657ec7245", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1992-2009, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1992-2011, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -682,9 +682,7 @@ package body System.Tasking.Initialization is\n          --  between the expander and the run time, we may end up with\n          --  Self_ID.Deferral_Level being equal to zero, when called from\n          --  the procedure created by the expander that corresponds to a\n-         --  task body.\n-\n-         --  In this case, there's nothing to be done\n+         --  task body. In this case, there's nothing to be done.\n \n          --  See related code in System.Tasking.Stages.Create_Task resetting\n          --  Deferral_Level when System.Restrictions.Abort_Allowed is False."}, {"sha": "ba3bbb798b52f8380859af6da5cbda99b5254c53", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13a0b1e8dd2794b8c4a100b3e27c884657ec7245/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13a0b1e8dd2794b8c4a100b3e27c884657ec7245/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=13a0b1e8dd2794b8c4a100b3e27c884657ec7245", "patch": "@@ -772,10 +772,16 @@ package body Sem_Ch3 is\n             Anon_Scope := Scope (Defining_Entity (Related_Nod));\n          end if;\n \n-      else\n-         --  For access formals, access components, and access discriminants,\n-         --  the scope is that of the enclosing declaration,\n+         --  For an access type definition, if the current scope is a child\n+         --  unit it is the scope of the type.\n+\n+      elsif Is_Compilation_Unit (Current_Scope) then\n+         Anon_Scope := Current_Scope;\n \n+      --  For access formals, access components, and access discriminants, the\n+      --  scope is that of the enclosing declaration,\n+\n+      else\n          Anon_Scope := Scope (Current_Scope);\n       end if;\n "}, {"sha": "04a288924ca2b4a3b7176fbccbf44025156a580b", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13a0b1e8dd2794b8c4a100b3e27c884657ec7245/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13a0b1e8dd2794b8c4a100b3e27c884657ec7245/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=13a0b1e8dd2794b8c4a100b3e27c884657ec7245", "patch": "@@ -298,12 +298,6 @@ package body Sem_Ch6 is\n                 Make_Simple_Return_Statement (LocX,\n                   Expression => Expression (N)))));\n \n-      --  If the expression function comes from source, indicate that so does\n-      --  its rewriting, so it is compatible with any subsequent expansion of\n-      --  the subprogram body (e.g. when it is a protected operation).\n-\n-      Set_Comes_From_Source (New_Body, Comes_From_Source (N));\n-\n       if Present (Prev)\n         and then Ekind (Prev) = E_Generic_Function\n       then\n@@ -2719,9 +2713,11 @@ package body Sem_Ch6 is\n       --  family index (if applicable). This form of early expansion is done\n       --  when the Expander is active because Install_Private_Data_Declarations\n       --  references entities which were created during regular expansion.\n+      --  The body may be the rewritting of an expression function, and we need\n+      --  to verify that the original node is in the source.\n \n       if Full_Expander_Active\n-        and then Comes_From_Source (N)\n+        and then Comes_From_Source (Original_Node (N))\n         and then Present (Prot_Typ)\n         and then Present (Spec_Id)\n         and then not Is_Eliminated (Spec_Id)"}]}