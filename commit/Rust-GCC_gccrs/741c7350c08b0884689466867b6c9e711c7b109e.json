{"sha": "741c7350c08b0884689466867b6c9e711c7b109e", "node_id": "C_kwDOANBUbNoAKDc0MWM3MzUwYzA4YjA4ODQ2ODk0NjY4NjdiNmM5ZTcxMWM3YjEwOWU", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-04-17T21:34:09Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-10-01T19:34:46Z"}, "message": "libstdc++: Implement std::clamp with std::min and std::max [PR 96733]\n\nThe compiler doesn't know about the precondition of std::clamp that\n(hi < lo) is false, and so can't optimize as well as we'd like. By using\nstd::min and std::max we help the compiler.\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/96733\n\t* include/bits/stl_algo.h (clamp): Use std::min and std::max.", "tree": {"sha": "1b0c1a73481bc0fb4cabbed8d3d5ad96bbe8d35d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b0c1a73481bc0fb4cabbed8d3d5ad96bbe8d35d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/741c7350c08b0884689466867b6c9e711c7b109e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/741c7350c08b0884689466867b6c9e711c7b109e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/741c7350c08b0884689466867b6c9e711c7b109e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/741c7350c08b0884689466867b6c9e711c7b109e/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a93d18da3bd79eb0be87f029eefc8b28bb66dec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a93d18da3bd79eb0be87f029eefc8b28bb66dec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a93d18da3bd79eb0be87f029eefc8b28bb66dec"}], "stats": {"total": 17, "additions": 11, "deletions": 6}, "files": [{"sha": "90f3162ff902da10713088151498c85e5c639ebe", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/741c7350c08b0884689466867b6c9e711c7b109e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/741c7350c08b0884689466867b6c9e711c7b109e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=741c7350c08b0884689466867b6c9e711c7b109e", "patch": "@@ -3621,7 +3621,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t   __gnu_cxx::__ops::__iter_comp_iter(__pred));\n     }\n \n-#if __cplusplus > 201402L\n+#if __cplusplus >= 201703L\n \n #define __cpp_lib_clamp 201603\n \n@@ -3631,14 +3631,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @param  __val  A value of arbitrary type.\n    *  @param  __lo   A lower limit of arbitrary type.\n    *  @param  __hi   An upper limit of arbitrary type.\n-   *  @return max(__val, __lo) if __val < __hi or min(__val, __hi) otherwise.\n+   *  @retval `__lo` if `__val < __lo`\n+   *  @retval `__hi` if `__hi < __val`\n+   *  @retval `__val` otherwise.\n+   *  @pre `_Tp` is LessThanComparable and `(__hi < __lo)` is false.\n    */\n   template<typename _Tp>\n     constexpr const _Tp&\n     clamp(const _Tp& __val, const _Tp& __lo, const _Tp& __hi)\n     {\n       __glibcxx_assert(!(__hi < __lo));\n-      return (__val < __lo) ? __lo : (__hi < __val) ? __hi : __val;\n+      return std::min(std::max(__val, __lo), __hi);\n     }\n \n   /**\n@@ -3648,15 +3651,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @param  __lo    A lower limit of arbitrary type.\n    *  @param  __hi    An upper limit of arbitrary type.\n    *  @param  __comp  A comparison functor.\n-   *  @return max(__val, __lo, __comp) if __comp(__val, __hi)\n-   *\t      or min(__val, __hi, __comp) otherwise.\n+   *  @retval `__lo` if `__comp(__val, __lo)`\n+   *  @retval `__hi` if `__comp(__hi, __val)`\n+   *  @retval `__val` otherwise.\n+   *  @pre `__comp(__hi, __lo)` is false.\n    */\n   template<typename _Tp, typename _Compare>\n     constexpr const _Tp&\n     clamp(const _Tp& __val, const _Tp& __lo, const _Tp& __hi, _Compare __comp)\n     {\n       __glibcxx_assert(!__comp(__hi, __lo));\n-      return __comp(__val, __lo) ? __lo : __comp(__hi, __val) ? __hi : __val;\n+      return std::min(std::max(__val, __lo, __comp), __hi, __comp);\n     }\n #endif // C++17\n #endif // C++14"}]}