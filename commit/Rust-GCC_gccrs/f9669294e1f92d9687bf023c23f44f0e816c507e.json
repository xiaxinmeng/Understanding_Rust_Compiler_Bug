{"sha": "f9669294e1f92d9687bf023c23f44f0e816c507e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjk2NjkyOTRlMWY5MmQ5Njg3YmYwMjNjMjNmNDRmMGU4MTZjNTA3ZQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2010-11-16T22:56:06Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2010-11-16T22:56:06Z"}, "message": "pa: Use the FMA rtx code.\n\n        * config/pa/pa.md (fmadf4): Rename from unnamed; use FMA.\n        (fmasf4, fnmadf4, fnmasf4): Likewise.\n        (unnamed plus+mult insns and splitters): Delete.\n\nFrom-SVN: r166834", "tree": {"sha": "d70b83b281df49f0131a84602ddb32d4351cf8a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d70b83b281df49f0131a84602ddb32d4351cf8a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9669294e1f92d9687bf023c23f44f0e816c507e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9669294e1f92d9687bf023c23f44f0e816c507e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9669294e1f92d9687bf023c23f44f0e816c507e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9669294e1f92d9687bf023c23f44f0e816c507e/comments", "author": null, "committer": null, "parents": [{"sha": "23c819b54d241d206562c2e6ccd51af4f3420add", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23c819b54d241d206562c2e6ccd51af4f3420add", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23c819b54d241d206562c2e6ccd51af4f3420add"}], "stats": {"total": 256, "additions": 25, "deletions": 231}, "files": [{"sha": "16a21da3446191e3697006637455b036c4b512f5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9669294e1f92d9687bf023c23f44f0e816c507e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9669294e1f92d9687bf023c23f44f0e816c507e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f9669294e1f92d9687bf023c23f44f0e816c507e", "patch": "@@ -1,3 +1,9 @@\n+2010-11-16  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/pa/pa.md (fmadf4): Rename from unnamed; use FMA.\n+\t(fmasf4, fnmadf4, fnmasf4): Likewise.\n+\t(unnamed plus+mult insns and splitters): Delete.\n+\n 2010-11-16  Richard Henderson  <rth@redhat.com>\n \n \t* config/spu/spu.md (fma<VSF>4): Rename from fma_<VSF>."}, {"sha": "0d51c62db7e56ed4493670c7838ff05292bd779f", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 19, "deletions": 231, "changes": 250, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9669294e1f92d9687bf023c23f44f0e816c507e/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9669294e1f92d9687bf023c23f44f0e816c507e/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=f9669294e1f92d9687bf023c23f44f0e816c507e", "patch": "@@ -6090,64 +6090,44 @@\n ;; PA 2.0 floating point instructions\n \n ; fmpyfadd patterns\n-(define_insn \"\"\n+(define_insn \"fmadf4\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(plus:DF (mult:DF (match_operand:DF 1 \"register_operand\" \"f\")\n-\t\t\t  (match_operand:DF 2 \"register_operand\" \"f\"))\n-\t\t (match_operand:DF 3 \"register_operand\" \"f\")))]\n+\t(fma:DF (match_operand:DF 1 \"register_operand\" \"f\")\n+\t\t(match_operand:DF 2 \"register_operand\" \"f\")\n+\t\t(match_operand:DF 3 \"register_operand\" \"f\")))]\n   \"TARGET_PA_20 && ! TARGET_SOFT_FLOAT\"\n   \"fmpyfadd,dbl %1,%2,%3,%0\"\n   [(set_attr \"type\" \"fpmuldbl\")\n    (set_attr \"length\" \"4\")])\n \n-(define_insn \"\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(plus:DF (match_operand:DF 1 \"register_operand\" \"f\")\n-\t\t (mult:DF (match_operand:DF 2 \"register_operand\" \"f\")\n-\t\t\t  (match_operand:DF 3 \"register_operand\" \"f\"))))]\n-  \"TARGET_PA_20 && ! TARGET_SOFT_FLOAT\"\n-  \"fmpyfadd,dbl %2,%3,%1,%0\"\n-  [(set_attr \"type\" \"fpmuldbl\")\n-   (set_attr \"length\" \"4\")])\n-\n-(define_insn \"\"\n+(define_insn \"fmasf4\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t(plus:SF (mult:SF (match_operand:SF 1 \"register_operand\" \"f\")\n-\t\t\t  (match_operand:SF 2 \"register_operand\" \"f\"))\n-\t\t (match_operand:SF 3 \"register_operand\" \"f\")))]\n+\t(fma:SF (match_operand:SF 1 \"register_operand\" \"f\")\n+\t\t(match_operand:SF 2 \"register_operand\" \"f\")\n+\t\t(match_operand:SF 3 \"register_operand\" \"f\")))]\n   \"TARGET_PA_20 && ! TARGET_SOFT_FLOAT\"\n   \"fmpyfadd,sgl %1,%2,%3,%0\"\n   [(set_attr \"type\" \"fpmulsgl\")\n    (set_attr \"length\" \"4\")])\n \n-(define_insn \"\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t(plus:SF (match_operand:SF 1 \"register_operand\" \"f\")\n-\t\t (mult:SF (match_operand:SF 2 \"register_operand\" \"f\")\n-\t\t\t  (match_operand:SF 3 \"register_operand\" \"f\"))))]\n-  \"TARGET_PA_20 && ! TARGET_SOFT_FLOAT\"\n-  \"fmpyfadd,sgl %2,%3,%1,%0\"\n-  [(set_attr \"type\" \"fpmulsgl\")\n-   (set_attr \"length\" \"4\")])\n-\n ; fmpynfadd patterns\n-(define_insn \"\"\n+(define_insn \"fnmadf4\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(minus:DF (match_operand:DF 1 \"register_operand\" \"f\")\n-\t\t  (mult:DF (match_operand:DF 2 \"register_operand\" \"f\")\n-\t\t\t   (match_operand:DF 3 \"register_operand\" \"f\"))))]\n+\t(fma:DF (neg:DF (match_operand:DF 1 \"register_operand\" \"f\"))\n+\t\t(match_operand:DF 2 \"register_operand\" \"f\")\n+\t\t(match_operand:DF 3 \"register_operand\" \"f\")))]\n   \"TARGET_PA_20 && ! TARGET_SOFT_FLOAT\"\n-  \"fmpynfadd,dbl %2,%3,%1,%0\"\n+  \"fmpynfadd,dbl %1,%2,%3,%0\"\n   [(set_attr \"type\" \"fpmuldbl\")\n    (set_attr \"length\" \"4\")])\n \n-(define_insn \"\"\n+(define_insn \"fnmasf4\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t(minus:SF (match_operand:SF 1 \"register_operand\" \"f\")\n-\t\t  (mult:SF (match_operand:SF 2 \"register_operand\" \"f\")\n-\t\t\t   (match_operand:SF 3 \"register_operand\" \"f\"))))]\n+\t(fma:SF (neg:SF (match_operand:SF 1 \"register_operand\" \"f\"))\n+\t\t(match_operand:SF 2 \"register_operand\" \"f\")\n+\t\t(match_operand:SF 3 \"register_operand\" \"f\")))]\n   \"TARGET_PA_20 && ! TARGET_SOFT_FLOAT\"\n-  \"fmpynfadd,sgl %2,%3,%1,%0\"\n+  \"fmpynfadd,sgl %1,%2,%3,%0\"\n   [(set_attr \"type\" \"fpmulsgl\")\n    (set_attr \"length\" \"4\")])\n \n@@ -6168,72 +6148,9 @@\n   [(set_attr \"type\" \"fpalu\")\n    (set_attr \"length\" \"4\")])\n \n-;; Generating a fused multiply sequence is a win for this case as it will\n-;; reduce the latency for the fused case without impacting the plain\n-;; multiply case.\n-;;\n-;; Similar possibilities exist for fnegabs, shadd and other insns which\n-;; perform two operations with the result of the first feeding the second.\n-(define_insn \"\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(plus:DF (mult:DF (match_operand:DF 1 \"register_operand\" \"f\")\n-\t\t\t  (match_operand:DF 2 \"register_operand\" \"f\"))\n-\t\t (match_operand:DF 3 \"register_operand\" \"f\")))\n-   (set (match_operand:DF 4 \"register_operand\" \"=&f\")\n-\t(mult:DF (match_dup 1) (match_dup 2)))]\n-  \"(! TARGET_SOFT_FLOAT && TARGET_PA_20\n-    && ! (reg_overlap_mentioned_p (operands[4], operands[1])\n-          || reg_overlap_mentioned_p (operands[4], operands[2])))\"\n-  \"#\"\n-  [(set_attr \"type\" \"fpmuldbl\")\n-   (set_attr \"length\" \"8\")])\n-\n-;; We want to split this up during scheduling since we want both insns\n-;; to schedule independently.\n-(define_split\n-  [(set (match_operand:DF 0 \"register_operand\" \"\")\n-\t(plus:DF (mult:DF (match_operand:DF 1 \"register_operand\" \"\")\n-\t\t\t  (match_operand:DF 2 \"register_operand\" \"\"))\n-\t\t (match_operand:DF 3 \"register_operand\" \"\")))\n-   (set (match_operand:DF 4 \"register_operand\" \"\")\n-\t(mult:DF (match_dup 1) (match_dup 2)))]\n-  \"! TARGET_SOFT_FLOAT && TARGET_PA_20\"\n-  [(set (match_dup 4) (mult:DF (match_dup 1) (match_dup 2)))\n-   (set (match_dup 0) (plus:DF (mult:DF (match_dup 1) (match_dup 2))\n-\t\t\t       (match_dup 3)))]\n-  \"\")\n-\n-(define_insn \"\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t(plus:SF (mult:SF (match_operand:SF 1 \"register_operand\" \"f\")\n-\t\t\t  (match_operand:SF 2 \"register_operand\" \"f\"))\n-\t\t (match_operand:SF 3 \"register_operand\" \"f\")))\n-   (set (match_operand:SF 4 \"register_operand\" \"=&f\")\n-\t(mult:SF (match_dup 1) (match_dup 2)))]\n-  \"(! TARGET_SOFT_FLOAT && TARGET_PA_20\n-    && ! (reg_overlap_mentioned_p (operands[4], operands[1])\n-          || reg_overlap_mentioned_p (operands[4], operands[2])))\"\n-  \"#\"\n-  [(set_attr \"type\" \"fpmuldbl\")\n-   (set_attr \"length\" \"8\")])\n-\n-;; We want to split this up during scheduling since we want both insns\n-;; to schedule independently.\n-(define_split\n-  [(set (match_operand:SF 0 \"register_operand\" \"\")\n-\t(plus:SF (mult:SF (match_operand:SF 1 \"register_operand\" \"\")\n-\t\t\t  (match_operand:SF 2 \"register_operand\" \"\"))\n-\t\t (match_operand:SF 3 \"register_operand\" \"\")))\n-   (set (match_operand:SF 4 \"register_operand\" \"\")\n-\t(mult:SF (match_dup 1) (match_dup 2)))]\n-  \"! TARGET_SOFT_FLOAT && TARGET_PA_20\"\n-  [(set (match_dup 4) (mult:SF (match_dup 1) (match_dup 2)))\n-   (set (match_dup 0) (plus:SF (mult:SF (match_dup 1) (match_dup 2))\n-\t\t\t       (match_dup 3)))]\n-  \"\")\n-\n ;; Negating a multiply can be faked by adding zero in a fused multiply-add\n ;; instruction.\n+;; ??? Only if we add -0.0 or can ignore the sign of zero.\n (define_insn \"\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(neg:DF (mult:DF (match_operand:DF 1 \"register_operand\" \"f\")\n@@ -6300,135 +6217,6 @@\n    (set (match_dup 0) (neg:SF (mult:SF (match_dup 1) (match_dup 2))))]\n   \"\")\n \n-;; Now fused multiplies with the result of the multiply negated.\n-(define_insn \"\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(plus:DF (neg:DF (mult:DF (match_operand:DF 1 \"register_operand\" \"f\")\n-\t\t\t\t  (match_operand:DF 2 \"register_operand\" \"f\")))\n-\t\t (match_operand:DF 3 \"register_operand\" \"f\")))]\n-  \"! TARGET_SOFT_FLOAT && TARGET_PA_20\"\n-  \"fmpynfadd,dbl %1,%2,%3,%0\"\n-  [(set_attr \"type\" \"fpmuldbl\")\n-   (set_attr \"length\" \"4\")])\n-\n-(define_insn \"\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t(plus:SF (neg:SF (mult:SF (match_operand:SF 1 \"register_operand\" \"f\")\n-\t\t\t (match_operand:SF 2 \"register_operand\" \"f\")))\n-\t\t (match_operand:SF 3 \"register_operand\" \"f\")))]\n-  \"! TARGET_SOFT_FLOAT && TARGET_PA_20\"\n-  \"fmpynfadd,sgl %1,%2,%3,%0\"\n-  [(set_attr \"type\" \"fpmuldbl\")\n-   (set_attr \"length\" \"4\")])\n-\n-(define_insn \"\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(plus:DF (neg:DF (mult:DF (match_operand:DF 1 \"register_operand\" \"f\")\n-\t\t\t\t  (match_operand:DF 2 \"register_operand\" \"f\")))\n-\t\t (match_operand:DF 3 \"register_operand\" \"f\")))\n-   (set (match_operand:DF 4 \"register_operand\" \"=&f\")\n-\t(mult:DF (match_dup 1) (match_dup 2)))]\n-  \"(! TARGET_SOFT_FLOAT && TARGET_PA_20\n-    && ! (reg_overlap_mentioned_p (operands[4], operands[1])\n-          || reg_overlap_mentioned_p (operands[4], operands[2])))\"\n-  \"#\"\n-  [(set_attr \"type\" \"fpmuldbl\")\n-   (set_attr \"length\" \"8\")])\n-\n-(define_split\n-  [(set (match_operand:DF 0 \"register_operand\" \"\")\n-\t(plus:DF (neg:DF (mult:DF (match_operand:DF 1 \"register_operand\" \"\")\n-\t\t\t\t  (match_operand:DF 2 \"register_operand\" \"\")))\n-\t\t (match_operand:DF 3 \"register_operand\" \"\")))\n-   (set (match_operand:DF 4 \"register_operand\" \"\")\n-\t(mult:DF (match_dup 1) (match_dup 2)))]\n-  \"! TARGET_SOFT_FLOAT && TARGET_PA_20\"\n-  [(set (match_dup 4) (mult:DF (match_dup 1) (match_dup 2)))\n-   (set (match_dup 0) (plus:DF (neg:DF (mult:DF (match_dup 1) (match_dup 2)))\n-\t\t\t       (match_dup 3)))]\n-  \"\")\n-\n-(define_insn \"\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t(plus:SF (neg:SF (mult:SF (match_operand:SF 1 \"register_operand\" \"f\")\n-\t\t\t\t  (match_operand:SF 2 \"register_operand\" \"f\")))\n-\t\t (match_operand:SF 3 \"register_operand\" \"f\")))\n-   (set (match_operand:SF 4 \"register_operand\" \"=&f\")\n-\t(mult:SF (match_dup 1) (match_dup 2)))]\n-  \"(! TARGET_SOFT_FLOAT && TARGET_PA_20\n-    && ! (reg_overlap_mentioned_p (operands[4], operands[1])\n-          || reg_overlap_mentioned_p (operands[4], operands[2])))\"\n-  \"#\"\n-  [(set_attr \"type\" \"fpmuldbl\")\n-   (set_attr \"length\" \"8\")])\n-\n-(define_split\n-  [(set (match_operand:SF 0 \"register_operand\" \"\")\n-\t(plus:SF (neg:SF (mult:SF (match_operand:SF 1 \"register_operand\" \"\")\n-\t\t\t\t  (match_operand:SF 2 \"register_operand\" \"\")))\n-\t\t (match_operand:SF 3 \"register_operand\" \"\")))\n-   (set (match_operand:SF 4 \"register_operand\" \"\")\n-\t(mult:SF (match_dup 1) (match_dup 2)))]\n-  \"! TARGET_SOFT_FLOAT && TARGET_PA_20\"\n-  [(set (match_dup 4) (mult:SF (match_dup 1) (match_dup 2)))\n-   (set (match_dup 0) (plus:SF (neg:SF (mult:SF (match_dup 1) (match_dup 2)))\n-\t\t\t       (match_dup 3)))]\n-  \"\")\n-\n-(define_insn \"\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(minus:DF (match_operand:DF 3 \"register_operand\" \"f\")\n-\t\t  (mult:DF (match_operand:DF 1 \"register_operand\" \"f\")\n-\t\t\t   (match_operand:DF 2 \"register_operand\" \"f\"))))\n-   (set (match_operand:DF 4 \"register_operand\" \"=&f\")\n-\t(mult:DF (match_dup 1) (match_dup 2)))]\n-  \"(! TARGET_SOFT_FLOAT && TARGET_PA_20\n-    && ! (reg_overlap_mentioned_p (operands[4], operands[1])\n-          || reg_overlap_mentioned_p (operands[4], operands[2])))\"\n-  \"#\"\n-  [(set_attr \"type\" \"fpmuldbl\")\n-   (set_attr \"length\" \"8\")])\n-\n-(define_split\n-  [(set (match_operand:DF 0 \"register_operand\" \"\")\n-\t(minus:DF (match_operand:DF 3 \"register_operand\" \"\")\n-\t\t  (mult:DF (match_operand:DF 1 \"register_operand\" \"\")\n-\t\t\t   (match_operand:DF 2 \"register_operand\" \"\"))))\n-   (set (match_operand:DF 4 \"register_operand\" \"\")\n-\t(mult:DF (match_dup 1) (match_dup 2)))]\n-  \"! TARGET_SOFT_FLOAT && TARGET_PA_20\"\n-  [(set (match_dup 4) (mult:DF (match_dup 1) (match_dup 2)))\n-   (set (match_dup 0) (minus:DF (match_dup 3)\n-\t\t\t\t(mult:DF (match_dup 1) (match_dup 2))))]\n-  \"\")\n-\n-(define_insn \"\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t(minus:SF (match_operand:SF 3 \"register_operand\" \"f\")\n-\t\t  (mult:SF (match_operand:SF 1 \"register_operand\" \"f\")\n-\t\t\t   (match_operand:SF 2 \"register_operand\" \"f\"))))\n-   (set (match_operand:SF 4 \"register_operand\" \"=&f\")\n-\t(mult:SF (match_dup 1) (match_dup 2)))]\n-  \"(! TARGET_SOFT_FLOAT && TARGET_PA_20\n-    && ! (reg_overlap_mentioned_p (operands[4], operands[1])\n-          || reg_overlap_mentioned_p (operands[4], operands[2])))\"\n-  \"#\"\n-  [(set_attr \"type\" \"fpmuldbl\")\n-   (set_attr \"length\" \"8\")])\n-\n-(define_split\n-  [(set (match_operand:SF 0 \"register_operand\" \"\")\n-\t(minus:SF (match_operand:SF 3 \"register_operand\" \"\")\n-\t\t  (mult:SF (match_operand:SF 1 \"register_operand\" \"\")\n-\t\t\t   (match_operand:SF 2 \"register_operand\" \"\"))))\n-   (set (match_operand:SF 4 \"register_operand\" \"\")\n-\t(mult:SF (match_dup 1) (match_dup 2)))]\n-  \"! TARGET_SOFT_FLOAT && TARGET_PA_20\"\n-  [(set (match_dup 4) (mult:SF (match_dup 1) (match_dup 2)))\n-   (set (match_dup 0) (minus:SF (match_dup 3)\n-\t\t\t\t(mult:SF (match_dup 1) (match_dup 2))))]\n-  \"\")\n-\n (define_insn \"\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(neg:DF (abs:DF (match_operand:DF 1 \"register_operand\" \"f\"))))"}]}