{"sha": "297927a89c74904958ecc24986b2ea3f010cc4d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjk3OTI3YTg5Yzc0OTA0OTU4ZWNjMjQ5ODZiMmVhM2YwMTBjYzRkOQ==", "commit": {"author": {"name": "Bernd Schmidt", "email": "crux@pool.informatik.rwth-aachen.de", "date": "1998-10-17T01:44:01Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-10-17T01:44:01Z"}, "message": "reload1.c (reg_used_by_pseudo): New static variable.\n\n\t* reload1.c (reg_used_by_pseudo): New static variable.\n\t(choose_reload_regs): Initialize it.\n\tUse it instead of testing spill_reg_order to determine whether a\n\tpseudo is live in a hard register across the current insn.\n\tFix a typo in a reference to reload_reg_rtx.\n\nFrom-SVN: r23149", "tree": {"sha": "59fb9610ae61a43c2522b4360538396009443a61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59fb9610ae61a43c2522b4360538396009443a61"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/297927a89c74904958ecc24986b2ea3f010cc4d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/297927a89c74904958ecc24986b2ea3f010cc4d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/297927a89c74904958ecc24986b2ea3f010cc4d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/297927a89c74904958ecc24986b2ea3f010cc4d9/comments", "author": null, "committer": null, "parents": [{"sha": "f8dd7f9883b1c1b8707a9a2ef47f2c1a93ab141d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8dd7f9883b1c1b8707a9a2ef47f2c1a93ab141d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8dd7f9883b1c1b8707a9a2ef47f2c1a93ab141d"}], "stats": {"total": 18, "additions": 16, "deletions": 2}, "files": [{"sha": "ca7e47046ded59a9951105654c40d0d918580aaf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/297927a89c74904958ecc24986b2ea3f010cc4d9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/297927a89c74904958ecc24986b2ea3f010cc4d9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=297927a89c74904958ecc24986b2ea3f010cc4d9", "patch": "@@ -1,5 +1,11 @@\n Sat Oct 17 02:26:03 1998  Bernd Schmidt <crux@pool.informatik.rwth-aachen.de> \n \n+\t* reload1.c (reg_used_by_pseudo): New static variable.\n+\t(choose_reload_regs): Initialize it.\n+\tUse it instead of testing spill_reg_order to determine whether a\n+\tpseudo is live in a hard register across the current insn.\n+\tFix a typo in a reference to reload_reg_rtx.\n+\n \t* flow.c (propagate_block): Replace code that computes and uses\n \tregs_sometimes_live with simpler code that just walks the set of\n \tcurrently live registers."}, {"sha": "3d5cfbe9ab237a823648929b774cd779a9e5567f", "filename": "gcc/reload1.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/297927a89c74904958ecc24986b2ea3f010cc4d9/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/297927a89c74904958ecc24986b2ea3f010cc4d9/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=297927a89c74904958ecc24986b2ea3f010cc4d9", "patch": "@@ -4683,6 +4683,10 @@ static HARD_REG_SET reload_reg_used_at_all;\n    in the group.  */\n static HARD_REG_SET reload_reg_used_for_inherit;\n \n+/* Records which hard regs are allocated to a pseudo during any point of the\n+   current insn.  */\n+static HARD_REG_SET reg_used_by_pseudo;\n+\n /* Mark reg REGNO as in use for a reload of the sort spec'd by OPNUM and\n    TYPE. MODE is used to indicate how many consecutive regs are\n    actually used.  */\n@@ -5812,6 +5816,10 @@ choose_reload_regs (chain, avoid_return_reg)\n   CLEAR_HARD_REG_SET (reload_reg_used_in_insn);\n   CLEAR_HARD_REG_SET (reload_reg_used_in_other_addr);\n \n+  CLEAR_HARD_REG_SET (reg_used_by_pseudo);\n+  compute_use_by_pseudos (&reg_used_by_pseudo, chain->live_before);\n+  compute_use_by_pseudos (&reg_used_by_pseudo, chain->live_after);\n+  \n   for (i = 0; i < reload_n_operands; i++)\n     {\n       CLEAR_HARD_REG_SET (reload_reg_used_in_output[i]);\n@@ -6161,7 +6169,7 @@ choose_reload_regs (chain, avoid_return_reg)\n \n \t\t\t  if (i1 != n_earlyclobbers\n \t\t\t      /* Don't use it if we'd clobber a pseudo reg.  */\n-\t\t\t      || (spill_reg_order[i] < 0\n+\t\t\t      || (! TEST_HARD_REG_BIT (reg_used_by_pseudo, i)\n \t\t\t\t  && reload_out[r]\n \t\t\t\t  && ! TEST_HARD_REG_BIT (reg_reloaded_dead, i))\n \t\t\t      /* Don't really use the inherited spill reg\n@@ -6174,7 +6182,7 @@ choose_reload_regs (chain, avoid_return_reg)\n \t\t\t      /* If find_reloads chose reload_out as reload\n \t\t\t\t register, stay with it - that leaves the\n \t\t\t\t inherited register for subsequent reloads.  */\n-\t\t\t      || (reload_out[r] && reload_reg_rtx\n+\t\t\t      || (reload_out[r] && reload_reg_rtx[r]\n \t\t\t\t  && rtx_equal_p (reload_out[r],\n \t\t\t\t\t\t  reload_reg_rtx[r])))\n \t\t\t    {"}]}