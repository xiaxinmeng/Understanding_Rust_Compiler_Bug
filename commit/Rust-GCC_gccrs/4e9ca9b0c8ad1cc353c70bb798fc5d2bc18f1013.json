{"sha": "4e9ca9b0c8ad1cc353c70bb798fc5d2bc18f1013", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGU5Y2E5YjBjOGFkMWNjMzUzYzcwYmI3OThmYzVkMmJjMThmMTAxMw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2010-09-28T21:20:32Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-09-28T21:20:32Z"}, "message": "tree.c (lvalue_kind): Rename from lvalue_p_1, make nonstatic.\n\n\t* tree.c (lvalue_kind): Rename from lvalue_p_1, make nonstatic.\n\t(real_lvalue_p): Take const_tree.\n\t* cp-tree.h: Adjust.\n\t* typeck.c (lvalue_or_else): Make temporary arg a permerror.\n\t(cp_build_addr_expr_1): Likewise.\n\nFrom-SVN: r164704", "tree": {"sha": "a08eb32bd94ddf4c8fe5242e91eb836a62ccc265", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a08eb32bd94ddf4c8fe5242e91eb836a62ccc265"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e9ca9b0c8ad1cc353c70bb798fc5d2bc18f1013", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e9ca9b0c8ad1cc353c70bb798fc5d2bc18f1013", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e9ca9b0c8ad1cc353c70bb798fc5d2bc18f1013", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e9ca9b0c8ad1cc353c70bb798fc5d2bc18f1013/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "374fd2f5c87344707bf436f9e1d09b9789c1b104", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/374fd2f5c87344707bf436f9e1d09b9789c1b104", "html_url": "https://github.com/Rust-GCC/gccrs/commit/374fd2f5c87344707bf436f9e1d09b9789c1b104"}], "stats": {"total": 98, "additions": 67, "deletions": 31}, "files": [{"sha": "175bc981942a21c77ad307506d2fc46f7260b441", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e9ca9b0c8ad1cc353c70bb798fc5d2bc18f1013/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e9ca9b0c8ad1cc353c70bb798fc5d2bc18f1013/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4e9ca9b0c8ad1cc353c70bb798fc5d2bc18f1013", "patch": "@@ -1,3 +1,11 @@\n+2010-09-28  Jason Merrill  <jason@redhat.com>\n+\n+\t* tree.c (lvalue_kind): Rename from lvalue_p_1, make nonstatic.\n+\t(real_lvalue_p): Take const_tree.\n+\t* cp-tree.h: Adjust.\n+\t* typeck.c (lvalue_or_else): Make temporary arg a permerror.\n+\t(cp_build_addr_expr_1): Likewise.\n+\n 2010-09-28  Iain Sandoe  <iains@gcc.gnu.org>\n \t\n \tPartially merged from apple/trunk branch on FSF servers:"}, {"sha": "7e671a8761c1e60b319b88fc82782e5993a3e6e9", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e9ca9b0c8ad1cc353c70bb798fc5d2bc18f1013/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e9ca9b0c8ad1cc353c70bb798fc5d2bc18f1013/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=4e9ca9b0c8ad1cc353c70bb798fc5d2bc18f1013", "patch": "@@ -5345,7 +5345,8 @@ extern void cp_set_underlying_type\t\t(tree);\n extern tree copy_binfo\t\t\t\t(tree, tree, tree,\n \t\t\t\t\t\t tree *, int);\n extern int member_p\t\t\t\t(const_tree);\n-extern cp_lvalue_kind real_lvalue_p\t\t(tree);\n+extern cp_lvalue_kind real_lvalue_p\t\t(const_tree);\n+extern cp_lvalue_kind lvalue_kind\t\t(const_tree);\n extern bool lvalue_or_rvalue_with_address_p\t(const_tree);\n extern bool builtin_valid_in_constant_expr_p    (const_tree);\n extern tree build_min\t\t\t\t(enum tree_code, tree, ...);"}, {"sha": "ddfb3542acffe49d01665c763a15b2bf5f70af3b", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e9ca9b0c8ad1cc353c70bb798fc5d2bc18f1013/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e9ca9b0c8ad1cc353c70bb798fc5d2bc18f1013/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=4e9ca9b0c8ad1cc353c70bb798fc5d2bc18f1013", "patch": "@@ -40,7 +40,6 @@ static tree bot_replace (tree *, int *, void *);\n static int list_hash_eq (const void *, const void *);\n static hashval_t list_hash_pieces (tree, tree, tree);\n static hashval_t list_hash (const void *);\n-static cp_lvalue_kind lvalue_p_1 (const_tree);\n static tree build_target_expr (tree, tree);\n static tree count_trees_r (tree *, int *, void *);\n static tree verify_stmt_tree_r (tree *, int *, void *);\n@@ -53,8 +52,8 @@ static tree handle_init_priority_attribute (tree *, tree, tree, int, bool *);\n /* If REF is an lvalue, returns the kind of lvalue that REF is.\n    Otherwise, returns clk_none.  */\n \n-static cp_lvalue_kind\n-lvalue_p_1 (const_tree ref)\n+cp_lvalue_kind\n+lvalue_kind (const_tree ref)\n {\n   cp_lvalue_kind op1_lvalue_kind = clk_none;\n   cp_lvalue_kind op2_lvalue_kind = clk_none;\n@@ -66,7 +65,7 @@ lvalue_p_1 (const_tree ref)\n   if (TREE_CODE (ref) == INDIRECT_REF\n       && TREE_CODE (TREE_TYPE (TREE_OPERAND (ref, 0)))\n \t  == REFERENCE_TYPE)\n-    return lvalue_p_1 (TREE_OPERAND (ref, 0));\n+    return lvalue_kind (TREE_OPERAND (ref, 0));\n \n   if (TREE_CODE (TREE_TYPE (ref)) == REFERENCE_TYPE)\n     {\n@@ -96,10 +95,10 @@ lvalue_p_1 (const_tree ref)\n     case WITH_CLEANUP_EXPR:\n     case REALPART_EXPR:\n     case IMAGPART_EXPR:\n-      return lvalue_p_1 (TREE_OPERAND (ref, 0));\n+      return lvalue_kind (TREE_OPERAND (ref, 0));\n \n     case COMPONENT_REF:\n-      op1_lvalue_kind = lvalue_p_1 (TREE_OPERAND (ref, 0));\n+      op1_lvalue_kind = lvalue_kind (TREE_OPERAND (ref, 0));\n       /* Look at the member designator.  */\n       if (!op1_lvalue_kind)\n \t;\n@@ -156,22 +155,22 @@ lvalue_p_1 (const_tree ref)\n       if (TREE_SIDE_EFFECTS (TREE_OPERAND (ref, 0))\n \t  || TREE_SIDE_EFFECTS (TREE_OPERAND (ref, 1)))\n \treturn clk_none;\n-      op1_lvalue_kind = lvalue_p_1 (TREE_OPERAND (ref, 0));\n-      op2_lvalue_kind = lvalue_p_1 (TREE_OPERAND (ref, 1));\n+      op1_lvalue_kind = lvalue_kind (TREE_OPERAND (ref, 0));\n+      op2_lvalue_kind = lvalue_kind (TREE_OPERAND (ref, 1));\n       break;\n \n     case COND_EXPR:\n-      op1_lvalue_kind = lvalue_p_1 (TREE_OPERAND (ref, 1)\n+      op1_lvalue_kind = lvalue_kind (TREE_OPERAND (ref, 1)\n \t\t\t\t    ? TREE_OPERAND (ref, 1)\n \t\t\t\t    : TREE_OPERAND (ref, 0));\n-      op2_lvalue_kind = lvalue_p_1 (TREE_OPERAND (ref, 2));\n+      op2_lvalue_kind = lvalue_kind (TREE_OPERAND (ref, 2));\n       break;\n \n     case MODIFY_EXPR:\n       return clk_ordinary;\n \n     case COMPOUND_EXPR:\n-      return lvalue_p_1 (TREE_OPERAND (ref, 1));\n+      return lvalue_kind (TREE_OPERAND (ref, 1));\n \n     case TARGET_EXPR:\n       return clk_class;\n@@ -194,7 +193,7 @@ lvalue_p_1 (const_tree ref)\n \t with a BASELINK.  */\n       /* This CONST_CAST is okay because BASELINK_FUNCTIONS returns\n \t its argument unmodified and we assign it to a const_tree.  */\n-      return lvalue_p_1 (BASELINK_FUNCTIONS (CONST_CAST_TREE (ref)));\n+      return lvalue_kind (BASELINK_FUNCTIONS (CONST_CAST_TREE (ref)));\n \n     case NON_DEPENDENT_EXPR:\n       /* We must consider NON_DEPENDENT_EXPRs to be lvalues so that\n@@ -232,9 +231,9 @@ lvalue_p_1 (const_tree ref)\n    computes the C++ definition of lvalue.  */\n \n cp_lvalue_kind\n-real_lvalue_p (tree ref)\n+real_lvalue_p (const_tree ref)\n {\n-  cp_lvalue_kind kind = lvalue_p_1 (ref);\n+  cp_lvalue_kind kind = lvalue_kind (ref);\n   if (kind & (clk_rvalueref|clk_class))\n     return clk_none;\n   else\n@@ -247,7 +246,7 @@ real_lvalue_p (tree ref)\n bool\n lvalue_p (const_tree ref)\n {\n-  return (lvalue_p_1 (ref) != clk_none);\n+  return (lvalue_kind (ref) != clk_none);\n }\n \n /* This differs from real_lvalue_p in that rvalues formed by dereferencing\n@@ -256,7 +255,7 @@ lvalue_p (const_tree ref)\n bool\n lvalue_or_rvalue_with_address_p (const_tree ref)\n {\n-  cp_lvalue_kind kind = lvalue_p_1 (ref);\n+  cp_lvalue_kind kind = lvalue_kind (ref);\n   if (kind & clk_class)\n     return false;\n   else"}, {"sha": "eff670419f5427935400c12b127096993fd5acde", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 30, "deletions": 7, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e9ca9b0c8ad1cc353c70bb798fc5d2bc18f1013/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e9ca9b0c8ad1cc353c70bb798fc5d2bc18f1013/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=4e9ca9b0c8ad1cc353c70bb798fc5d2bc18f1013", "patch": "@@ -4878,13 +4878,23 @@ cp_build_addr_expr_1 (tree arg, bool strict_lvalue, tsubst_flags_t complain)\n   if (TREE_CODE (argtype) != FUNCTION_TYPE\n       && TREE_CODE (argtype) != METHOD_TYPE)\n     {\n-      bool win = strict_lvalue ? real_lvalue_p (arg) : lvalue_p (arg);\n-      if (!win)\n+      cp_lvalue_kind kind = lvalue_kind (arg);\n+      if (kind == clk_none)\n \t{\n \t  if (complain & tf_error)\n \t    lvalue_error (lv_addressof);\n \t  return error_mark_node;\n \t}\n+      if (strict_lvalue && (kind & (clk_rvalueref|clk_class)))\n+\t{\n+\t  if (!(complain & tf_error))\n+\t    return error_mark_node;\n+\t  if (kind & clk_class)\n+\t    /* Make this a permerror because we used to accept it.  */\n+\t    permerror (input_location, \"taking address of temporary\");\n+\t  else\n+\t    error (\"taking address of xvalue (rvalue reference)\");\n+\t}\n     }\n \n   if (TREE_CODE (argtype) == REFERENCE_TYPE)\n@@ -8361,11 +8371,24 @@ non_reference (tree t)\n int\n lvalue_or_else (tree ref, enum lvalue_use use, tsubst_flags_t complain)\n {\n-  int win = real_lvalue_p (ref);\n-\n-  if (!win && (complain & tf_error))\n-    lvalue_error (use);\n+  cp_lvalue_kind kind = lvalue_kind (ref);\n \n-  return win;\n+  if (kind == clk_none)\n+    {\n+      if (complain & tf_error)\n+\tlvalue_error (use);\n+      return 0;\n+    }\n+  else if (kind & (clk_rvalueref|clk_class))\n+    {\n+      if (!(complain & tf_error))\n+\treturn 0;\n+      if (kind & clk_class)\n+\t/* Make this a permerror because we used to accept it.  */\n+\tpermerror (input_location, \"using temporary as lvalue\");\n+      else\n+\terror (\"using xvalue (rvalue reference) as lvalue\");\n+    }\n+  return 1;\n }\n "}, {"sha": "18f9f96fbb427b1825f30e1c9800f4288ea82e84", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e9ca9b0c8ad1cc353c70bb798fc5d2bc18f1013/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e9ca9b0c8ad1cc353c70bb798fc5d2bc18f1013/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4e9ca9b0c8ad1cc353c70bb798fc5d2bc18f1013", "patch": "@@ -1,5 +1,9 @@\n 2010-09-28  Jason Merrill  <jason@redhat.com>\n \n+\t* g++.dg/cpp0x/rv-lvalue-req.C: Adjust messages.\n+\t* g++.dg/ext/complit11.C: Likewise.\n+\t* g++.old-deja/g++.law/temps1.C: Likewise.\n+\n \t* g++.old-deja/g++.bugs/900121_02.C: Adjust for C++0x mode.\n \t* g++.old-deja/g++.mike/misc6.C: Likewise.\n "}, {"sha": "a8f424df003a2fda85942652cfb87ae4ccb0c98e", "filename": "gcc/testsuite/g++.dg/cpp0x/rv-lvalue-req.C", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e9ca9b0c8ad1cc353c70bb798fc5d2bc18f1013/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv-lvalue-req.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e9ca9b0c8ad1cc353c70bb798fc5d2bc18f1013/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv-lvalue-req.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv-lvalue-req.C?ref=4e9ca9b0c8ad1cc353c70bb798fc5d2bc18f1013", "patch": "@@ -4,9 +4,9 @@ template <class T> T&& declval();\n \n int main()\n {\n-  &declval<int>();\t\t        // { dg-error \"lvalue\" }\n-  declval<int>() = declval<int>();\t// { dg-error \"lvalue\" }\n-  declval<int>()++;\t\t\t// { dg-error \"lvalue\" }\n-  --declval<int>();\t\t\t// { dg-error \"lvalue\" }\n-  declval<int>() += 1;\t\t\t// { dg-error \"lvalue\" }\n+  &declval<int>();\t\t        // { dg-error \"xvalue\" }\n+  declval<int>() = declval<int>();\t// { dg-error \"xvalue\" }\n+  declval<int>()++;\t\t\t// { dg-error \"xvalue\" }\n+  --declval<int>();\t\t\t// { dg-error \"xvalue\" }\n+  declval<int>() += 1;\t\t\t// { dg-error \"xvalue\" }\n }"}, {"sha": "0662543d941b8659e5c2316a572e6afdb8c037af", "filename": "gcc/testsuite/g++.dg/ext/complit11.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e9ca9b0c8ad1cc353c70bb798fc5d2bc18f1013/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fcomplit11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e9ca9b0c8ad1cc353c70bb798fc5d2bc18f1013/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fcomplit11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fcomplit11.C?ref=4e9ca9b0c8ad1cc353c70bb798fc5d2bc18f1013", "patch": "@@ -6,7 +6,7 @@ struct A { int i; };\n template<int t>\n void foo()\n {\n-    ((struct A) { 0 }).i += 1;\t// { dg-error \"lvalue required\" }\n+    ((struct A) { 0 }).i += 1;\t// { dg-error \"temporary\" }\n }\n \n void g(void)"}, {"sha": "bd344b4190c3e5d32b470b34470b33627f0e40d2", "filename": "gcc/testsuite/g++.old-deja/g++.law/temps1.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e9ca9b0c8ad1cc353c70bb798fc5d2bc18f1013/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Ftemps1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e9ca9b0c8ad1cc353c70bb798fc5d2bc18f1013/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Ftemps1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Ftemps1.C?ref=4e9ca9b0c8ad1cc353c70bb798fc5d2bc18f1013", "patch": "@@ -3,6 +3,7 @@\n // temps file\n // Date: Mon, 07 Sep 1992 13:12:28 EDT\n // From: richard@ttt.kth.se \n+// { dg-options \"-fpermissive\" }\n struct foo\n {\n   char *s;\n@@ -16,4 +17,4 @@ struct cookie\n };\n \n cookie cat(&foo(\"apabepa\"));// { dg-warning \"deprecated conversion\" \"dep\" }\n-// { dg-error \"lvalue required\" \"lvalue\" { target *-*-* } 18 }\n+// { dg-warning \"taking address of temporary\" \"add\" { target *-*-* } 19 }"}]}