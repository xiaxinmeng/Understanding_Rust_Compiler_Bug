{"sha": "4cc31a3c4ee108d960eb003129f05d5950f08355", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGNjMzFhM2M0ZWUxMDhkOTYwZWIwMDMxMjlmMDVkNTk1MGYwODM1NQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-11-05T11:11:04Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-11-05T11:11:04Z"}, "message": "tree-scalar-evolution.h (final_value_replacement_loop): Update prototype.\n\n2018-11-05  Richard Biener  <rguenther@suse.de>\n\n\t* tree-scalar-evolution.h (final_value_replacement_loop): Update\n\tprototype.\n\t* tree-scalar-evolution.c (final_value_replacement_loop): Return\n\twhether anything was done.\n\t(scev_const_prop): Remove constant propagation part, fold\n\tremains into ...\n\t* tree-ssa-loop.c (pass_scev_cprop::execute): ... here.\n\t(pass_data_scev_cprop): TODO_cleanup_cfg is now done\n\tconditionally.\n\n\t* gcc.dg/pr41488.c: Scan ivcanon dump instead of sccp one.\n\t* gcc.dg/tree-ssa/scev-7.c: Likewise.\n\nFrom-SVN: r265795", "tree": {"sha": "a705d138f11930f3ce3c457f5d7b8970061fcd68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a705d138f11930f3ce3c457f5d7b8970061fcd68"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4cc31a3c4ee108d960eb003129f05d5950f08355", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cc31a3c4ee108d960eb003129f05d5950f08355", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cc31a3c4ee108d960eb003129f05d5950f08355", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cc31a3c4ee108d960eb003129f05d5950f08355/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "18e0c3d1718157761e3f23ddc33ae22393bef15f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18e0c3d1718157761e3f23ddc33ae22393bef15f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18e0c3d1718157761e3f23ddc33ae22393bef15f"}], "stats": {"total": 150, "additions": 45, "deletions": 105}, "files": [{"sha": "014935f06b0e078c99bf269be008b02320c4b9c4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cc31a3c4ee108d960eb003129f05d5950f08355/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cc31a3c4ee108d960eb003129f05d5950f08355/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4cc31a3c4ee108d960eb003129f05d5950f08355", "patch": "@@ -1,3 +1,15 @@\n+2018-11-05  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-scalar-evolution.h (final_value_replacement_loop): Update\n+\tprototype.\n+\t* tree-scalar-evolution.c (final_value_replacement_loop): Return\n+\twhether anything was done.\n+\t(scev_const_prop): Remove constant propagation part, fold\n+\tremains into ...\n+\t* tree-ssa-loop.c (pass_scev_cprop::execute): ... here.\n+\t(pass_data_scev_cprop): TODO_cleanup_cfg is now done\n+\tconditionally.\n+\n 2018-11-05  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/87859"}, {"sha": "f0715986e0faffb94c158347536df564c3c4ba04", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cc31a3c4ee108d960eb003129f05d5950f08355/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cc31a3c4ee108d960eb003129f05d5950f08355/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4cc31a3c4ee108d960eb003129f05d5950f08355", "patch": "@@ -1,3 +1,8 @@\n+2018-11-05  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/pr41488.c: Scan ivcanon dump instead of sccp one.\n+\t* gcc.dg/tree-ssa/scev-7.c: Likewise.\n+\n 2018-11-05  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/87859"}, {"sha": "1e4bf19c7da947a134be00864ed244a089d09ec6", "filename": "gcc/testsuite/gcc.dg/pr41488.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cc31a3c4ee108d960eb003129f05d5950f08355/gcc%2Ftestsuite%2Fgcc.dg%2Fpr41488.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cc31a3c4ee108d960eb003129f05d5950f08355/gcc%2Ftestsuite%2Fgcc.dg%2Fpr41488.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr41488.c?ref=4cc31a3c4ee108d960eb003129f05d5950f08355", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-sccp-scev\" } */\n+/* { dg-options \"-O2 -fdump-tree-ivcanon-scev\" } */\n \n struct struct_t\n {\n@@ -14,4 +14,4 @@ void foo (struct struct_t* sp, int start, int end)\n     sp->data[i+start] = 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"Simplify PEELED_CHREC into POLYNOMIAL_CHREC\" 1 \"sccp\" } } */\n+/* { dg-final { scan-tree-dump-times \"Simplify PEELED_CHREC into POLYNOMIAL_CHREC\" 1 \"ivcanon\" } } */"}, {"sha": "2ede8d734a4f03d9973ad1107343a472bd16ef1d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/scev-7.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cc31a3c4ee108d960eb003129f05d5950f08355/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fscev-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cc31a3c4ee108d960eb003129f05d5950f08355/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fscev-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fscev-7.c?ref=4cc31a3c4ee108d960eb003129f05d5950f08355", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-sccp-scev\" } */\n+/* { dg-options \"-O2 -fdump-tree-ivcanon-scev\" } */\n \n struct struct_t\n {\n@@ -14,4 +14,4 @@ void foo (struct struct_t* sp, int start, int end)\n     sp->data[i+start] = 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"Simplify PEELED_CHREC into POLYNOMIAL_CHREC\" 1 \"sccp\" } } */\n+/* { dg-final { scan-tree-dump-times \"Simplify PEELED_CHREC into POLYNOMIAL_CHREC\" 1 \"ivcanon\" } } */"}, {"sha": "02174b1864c1a9b952b47a9606eed8a30ff872ad", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 7, "deletions": 97, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cc31a3c4ee108d960eb003129f05d5950f08355/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cc31a3c4ee108d960eb003129f05d5950f08355/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=4cc31a3c4ee108d960eb003129f05d5950f08355", "patch": "@@ -3537,20 +3537,20 @@ expression_expensive_p (tree expr)\n     }\n }\n \n-/* Do final value replacement for LOOP.  */\n+/* Do final value replacement for LOOP, return true if we did anything.  */\n \n-void\n+bool\n final_value_replacement_loop (struct loop *loop)\n {\n   /* If we do not know exact number of iterations of the loop, we cannot\n      replace the final value.  */\n   edge exit = single_exit (loop);\n   if (!exit)\n-    return;\n+    return false;\n \n   tree niter = number_of_latch_executions (loop);\n   if (niter == chrec_dont_know)\n-    return;\n+    return false;\n \n   /* Ensure that it is possible to insert new statements somewhere.  */\n   if (!single_pred_p (exit->dest))\n@@ -3563,6 +3563,7 @@ final_value_replacement_loop (struct loop *loop)\n     = superloop_at_depth (loop,\n \t\t\t  loop_depth (exit->dest->loop_father) + 1);\n \n+  bool any = false;\n   gphi_iterator psi;\n   for (psi = gsi_start_phis (exit->dest); !gsi_end_p (psi); )\n     {\n@@ -3620,6 +3621,7 @@ final_value_replacement_loop (struct loop *loop)\n \t  fprintf (dump_file, \" with expr: \");\n \t  print_generic_expr (dump_file, def);\n \t}\n+      any = true;\n       def = unshare_expr (def);\n       remove_phi_node (&psi, false);\n \n@@ -3662,100 +3664,8 @@ final_value_replacement_loop (struct loop *loop)\n \t  fprintf (dump_file, \"\\n\");\n \t}\n     }\n-}\n-\n-/* Replace ssa names for that scev can prove they are constant by the\n-   appropriate constants.  Also perform final value replacement in loops,\n-   in case the replacement expressions are cheap.\n-\n-   We only consider SSA names defined by phi nodes; rest is left to the\n-   ordinary constant propagation pass.  */\n-\n-unsigned int\n-scev_const_prop (void)\n-{\n-  basic_block bb;\n-  tree name, type, ev;\n-  gphi *phi;\n-  struct loop *loop;\n-  bitmap ssa_names_to_remove = NULL;\n-  unsigned i;\n-  gphi_iterator psi;\n-\n-  if (number_of_loops (cfun) <= 1)\n-    return 0;\n-\n-  FOR_EACH_BB_FN (bb, cfun)\n-    {\n-      loop = bb->loop_father;\n-\n-      for (psi = gsi_start_phis (bb); !gsi_end_p (psi); gsi_next (&psi))\n-\t{\n-\t  phi = psi.phi ();\n-\t  name = PHI_RESULT (phi);\n-\n-\t  if (virtual_operand_p (name))\n-\t    continue;\n-\n-\t  type = TREE_TYPE (name);\n-\n-\t  if (!POINTER_TYPE_P (type)\n-\t      && !INTEGRAL_TYPE_P (type))\n-\t    continue;\n-\n-\t  ev = resolve_mixers (loop, analyze_scalar_evolution (loop, name),\n-\t\t\t       NULL);\n-\t  if (!is_gimple_min_invariant (ev)\n-\t      || !may_propagate_copy (name, ev))\n-\t    continue;\n-\n-\t  /* Replace the uses of the name.  */\n-\t  if (name != ev)\n-\t    {\n-\t      if (dump_file && (dump_flags & TDF_DETAILS))\n-\t\t{\n-\t\t  fprintf (dump_file, \"Replacing uses of: \");\n-\t\t  print_generic_expr (dump_file, name);\n-\t\t  fprintf (dump_file, \" with: \");\n-\t\t  print_generic_expr (dump_file, ev);\n-\t\t  fprintf (dump_file, \"\\n\");\n-\t\t}\n-\t      replace_uses_by (name, ev);\n-\t    }\n-\n-\t  if (!ssa_names_to_remove)\n-\t    ssa_names_to_remove = BITMAP_ALLOC (NULL);\n-\t  bitmap_set_bit (ssa_names_to_remove, SSA_NAME_VERSION (name));\n-\t}\n-    }\n-\n-  /* Remove the ssa names that were replaced by constants.  We do not\n-     remove them directly in the previous cycle, since this\n-     invalidates scev cache.  */\n-  if (ssa_names_to_remove)\n-    {\n-      bitmap_iterator bi;\n-\n-      EXECUTE_IF_SET_IN_BITMAP (ssa_names_to_remove, 0, i, bi)\n-\t{\n-\t  gimple_stmt_iterator psi;\n-\t  name = ssa_name (i);\n-\t  phi = as_a <gphi *> (SSA_NAME_DEF_STMT (name));\n-\n-\t  gcc_assert (gimple_code (phi) == GIMPLE_PHI);\n-\t  psi = gsi_for_stmt (phi);\n-\t  remove_phi_node (&psi, true);\n-\t}\n-\n-      BITMAP_FREE (ssa_names_to_remove);\n-      scev_reset ();\n-    }\n-\n-  /* Now the regular final value replacement.  */\n-  FOR_EACH_LOOP (loop, LI_FROM_INNERMOST)\n-    final_value_replacement_loop (loop);\n \n-  return 0;\n+  return any;\n }\n \n #include \"gt-tree-scalar-evolution.h\""}, {"sha": "9145281b639801921492d0ed9b07b7f924630fac", "filename": "gcc/tree-scalar-evolution.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cc31a3c4ee108d960eb003129f05d5950f08355/gcc%2Ftree-scalar-evolution.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cc31a3c4ee108d960eb003129f05d5950f08355/gcc%2Ftree-scalar-evolution.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.h?ref=4cc31a3c4ee108d960eb003129f05d5950f08355", "patch": "@@ -33,7 +33,7 @@ extern tree analyze_scalar_evolution (struct loop *, tree);\n extern tree instantiate_scev (edge, struct loop *, tree);\n extern tree resolve_mixers (struct loop *, tree, bool *);\n extern void gather_stats_on_scev_database (void);\n-extern void final_value_replacement_loop (struct loop *);\n+extern bool final_value_replacement_loop (struct loop *);\n extern unsigned int scev_const_prop (void);\n extern bool expression_expensive_p (tree);\n extern bool simple_iv_with_niters (struct loop *, struct loop *, tree,"}, {"sha": "7771a0d4595bd1f1eb4633be6f346b2a200152ac", "filename": "gcc/tree-ssa-loop.c", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cc31a3c4ee108d960eb003129f05d5950f08355/gcc%2Ftree-ssa-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cc31a3c4ee108d960eb003129f05d5950f08355/gcc%2Ftree-ssa-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop.c?ref=4cc31a3c4ee108d960eb003129f05d5950f08355", "patch": "@@ -436,8 +436,7 @@ const pass_data pass_data_scev_cprop =\n   0, /* properties_provided */\n   0, /* properties_destroyed */\n   0, /* todo_flags_start */\n-  ( TODO_cleanup_cfg\n-    | TODO_update_ssa_only_virtuals ), /* todo_flags_finish */\n+  0, /* todo_flags_finish */\n };\n \n class pass_scev_cprop : public gimple_opt_pass\n@@ -449,10 +448,24 @@ class pass_scev_cprop : public gimple_opt_pass\n \n   /* opt_pass methods: */\n   virtual bool gate (function *) { return flag_tree_scev_cprop; }\n-  virtual unsigned int execute (function *) { return scev_const_prop (); }\n+  virtual unsigned int execute (function *);\n \n }; // class pass_scev_cprop\n \n+unsigned\n+pass_scev_cprop::execute (function *)\n+{\n+  struct loop *loop;\n+  bool any = false;\n+\n+  /* Perform final value replacement in loops, in case the replacement\n+     expressions are cheap.  */\n+  FOR_EACH_LOOP (loop, LI_FROM_INNERMOST)\n+    any |= final_value_replacement_loop (loop);\n+\n+  return any ? TODO_cleanup_cfg | TODO_update_ssa_only_virtuals : 0;\n+}\n+\n } // anon namespace\n \n gimple_opt_pass *"}]}