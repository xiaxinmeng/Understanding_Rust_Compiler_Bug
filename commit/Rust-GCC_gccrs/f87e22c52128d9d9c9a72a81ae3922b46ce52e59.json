{"sha": "f87e22c52128d9d9c9a72a81ae3922b46ce52e59", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjg3ZTIyYzUyMTI4ZDlkOWM5YTcyYTgxYWUzOTIyYjQ2Y2U1MmU1OQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2016-08-18T16:22:10Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2016-08-18T16:22:10Z"}, "message": "selftest.h: add class line_table_test\n\ninput.c has a fixture class for running each selftest with a fresh\nline_table, and logic for looping over various interesting line_table\ntest cases.\n\nThis patch exposes the above in selftest.h so that such\nlocation-handling tests can be written in other files, renaming the\nclass from temp_line_table to line_table_test.\n\nAlso, the patch moves the stored line table ptr from being a member of\nthe test class to being a global GC-root, to avoid it being collected\nif the GC runs during such a test.\n\ngcc/ChangeLog:\n\t* input.c (saved_line_table): New global.\n\t(class selftest::temp_line_table): Rename to line_table_test and\n\tmove declaration to selftest.h, and drop field m_old_line_table.\n\t(selftest::temp_line_table::temp_line_table): Rename ctor to...\n\t(selftest::line_table_test::line_table_test): ...this.  Add a\n\tdefault ctor.  Store current value of line_table within\n\tsaved_line_table.\n\t(selftest::temp_line_table::~temp_line_table): Rename dtor to...\n\t(selftest::line_table_test::~line_table_test): ...this, and\n\trestore line_table from the saved_line_table, rather than\n\tm_old_line_table.\n\t(selftest::test_accessing_ordinary_linemaps): Update for above\n\trenaming.\n\t(selftest::test_lexer): Likewise.\n\t(struct selftest::lexer_test): Likewise.\n\t(selftest::lexer_test::lexer_test): Likewise.\n\t(selftest::input_c_tests): Move the looping over test cases from\n\there into...\n\t(selftest::for_each_line_table_case): New function.\n\t* input.h (saved_line_table): New decl.\n\t* selftest.h (struct selftest::line_table_case): New forward decl.\n\t(class selftest::line_table_test): New class, moved here from\n\tselftest::temp_line_table in input.c, and renamed.\n\t(selftest::for_each_line_table_case): New decl.\n\nFrom-SVN: r239580", "tree": {"sha": "88147dd9aecf18036124b1ad90c384efc1d40d24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88147dd9aecf18036124b1ad90c384efc1d40d24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f87e22c52128d9d9c9a72a81ae3922b46ce52e59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f87e22c52128d9d9c9a72a81ae3922b46ce52e59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f87e22c52128d9d9c9a72a81ae3922b46ce52e59", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f87e22c52128d9d9c9a72a81ae3922b46ce52e59/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "89c8878092d773cf3803a98e60d5632635199125", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89c8878092d773cf3803a98e60d5632635199125", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89c8878092d773cf3803a98e60d5632635199125"}], "stats": {"total": 196, "additions": 144, "deletions": 52}, "files": [{"sha": "b53a9d2f3168d55283ef1e7f2354263bdd8f7c8f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f87e22c52128d9d9c9a72a81ae3922b46ce52e59/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f87e22c52128d9d9c9a72a81ae3922b46ce52e59/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f87e22c52128d9d9c9a72a81ae3922b46ce52e59", "patch": "@@ -1,3 +1,30 @@\n+2016-08-18  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* input.c (saved_line_table): New global.\n+\t(class selftest::temp_line_table): Rename to line_table_test and\n+\tmove declaration to selftest.h, and drop field m_old_line_table.\n+\t(selftest::temp_line_table::temp_line_table): Rename ctor to...\n+\t(selftest::line_table_test::line_table_test): ...this.  Add a\n+\tdefault ctor.  Store current value of line_table within\n+\tsaved_line_table.\n+\t(selftest::temp_line_table::~temp_line_table): Rename dtor to...\n+\t(selftest::line_table_test::~line_table_test): ...this, and\n+\trestore line_table from the saved_line_table, rather than\n+\tm_old_line_table.\n+\t(selftest::test_accessing_ordinary_linemaps): Update for above\n+\trenaming.\n+\t(selftest::test_lexer): Likewise.\n+\t(struct selftest::lexer_test): Likewise.\n+\t(selftest::lexer_test::lexer_test): Likewise.\n+\t(selftest::input_c_tests): Move the looping over test cases from\n+\there into...\n+\t(selftest::for_each_line_table_case): New function.\n+\t* input.h (saved_line_table): New decl.\n+\t* selftest.h (struct selftest::line_table_case): New forward decl.\n+\t(class selftest::line_table_test): New class, moved here from\n+\tselftest::temp_line_table in input.c, and renamed.\n+\t(selftest::for_each_line_table_case): New decl.\n+\n 2015-08-18  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/72839"}, {"sha": "2dcecfb35ba08f289ee772e156f9b308498f8358", "filename": "gcc/input.c", "status": "modified", "additions": 74, "deletions": 52, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f87e22c52128d9d9c9a72a81ae3922b46ce52e59/gcc%2Finput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f87e22c52128d9d9c9a72a81ae3922b46ce52e59/gcc%2Finput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finput.c?ref=f87e22c52128d9d9c9a72a81ae3922b46ce52e59", "patch": "@@ -114,6 +114,13 @@ location_t input_location = UNKNOWN_LOCATION;\n \n struct line_maps *line_table;\n \n+/* A stashed copy of \"line_table\" for use by selftest::line_table_test.\n+   This needs to be a global so that it can be a GC root, and thus\n+   prevent the stashed copy from being garbage-collected if the GC runs\n+   during a line_table_test.  */\n+\n+struct line_maps *saved_line_table;\n+\n static fcache *fcache_tab;\n static const size_t fcache_tab_size = 16;\n static const size_t fcache_buffer_size = 4 * 1024;\n@@ -1591,8 +1598,8 @@ assert_loceq (const char *exp_filename, int exp_linenum, int exp_colnum,\n     ASSERT_EQ (exp_colnum, LOCATION_COLUMN (loc));\n }\n \n-/* Various selftests in this file involve constructing a line table\n-   and one or more line maps within it.\n+/* Various selftests involve constructing a line table and one or more\n+   line maps within it.\n \n    For maximum test coverage we want to run these tests with a variety\n    of situations:\n@@ -1618,29 +1625,35 @@ struct line_table_case\n   int m_base_location;\n };\n \n-/* A class for overriding the global \"line_table\" within a selftest,\n-   restoring its value afterwards.  */\n+/* Constructor.  Store the old value of line_table, and create a new\n+   one, using sane defaults.  */\n \n-class temp_line_table\n+line_table_test::line_table_test ()\n {\n- public:\n-  temp_line_table (const line_table_case &);\n-  ~temp_line_table ();\n-\n- private:\n-  line_maps *m_old_line_table;\n-};\n+  gcc_assert (saved_line_table == NULL);\n+  saved_line_table = line_table;\n+  line_table = ggc_alloc<line_maps> ();\n+  linemap_init (line_table, BUILTINS_LOCATION);\n+  gcc_assert (saved_line_table->reallocator);\n+  line_table->reallocator = saved_line_table->reallocator;\n+  gcc_assert (saved_line_table->round_alloc_size);\n+  line_table->round_alloc_size = saved_line_table->round_alloc_size;\n+  line_table->default_range_bits = 0;\n+}\n \n /* Constructor.  Store the old value of line_table, and create a new\n    one, using the sitation described in CASE_.  */\n \n-temp_line_table::temp_line_table (const line_table_case &case_)\n-  : m_old_line_table (line_table)\n+line_table_test::line_table_test (const line_table_case &case_)\n {\n+  gcc_assert (saved_line_table == NULL);\n+  saved_line_table = line_table;\n   line_table = ggc_alloc<line_maps> ();\n   linemap_init (line_table, BUILTINS_LOCATION);\n-  line_table->reallocator = m_old_line_table->reallocator;\n-  line_table->round_alloc_size = m_old_line_table->round_alloc_size;\n+  gcc_assert (saved_line_table->reallocator);\n+  line_table->reallocator = saved_line_table->reallocator;\n+  gcc_assert (saved_line_table->round_alloc_size);\n+  line_table->round_alloc_size = saved_line_table->round_alloc_size;\n   line_table->default_range_bits = case_.m_default_range_bits;\n   if (case_.m_base_location)\n     {\n@@ -1651,17 +1664,19 @@ temp_line_table::temp_line_table (const line_table_case &case_)\n \n /* Destructor.  Restore the old value of line_table.  */\n \n-temp_line_table::~temp_line_table ()\n+line_table_test::~line_table_test ()\n {\n-  line_table = m_old_line_table;\n+  gcc_assert (saved_line_table != NULL);\n+  line_table = saved_line_table;\n+  saved_line_table = NULL;\n }\n \n /* Verify basic operation of ordinary linemaps.  */\n \n static void\n test_accessing_ordinary_linemaps (const line_table_case &case_)\n {\n-  temp_line_table tmp_lt (case_);\n+  line_table_test ltt (case_);\n \n   /* Build a simple linemap describing some locations. */\n   linemap_add (line_table, LC_ENTER, false, \"foo.c\", 0);\n@@ -1813,7 +1828,7 @@ test_lexer (const line_table_case &case_)\n      \"   42\\n\");\n   temp_source_file tmp (SELFTEST_LOCATION, \".txt\", content);\n \n-  temp_line_table tmp_lt (case_);\n+  line_table_test ltt (case_);\n \n   cpp_reader *parser = cpp_create_reader (CLK_GNUC89, NULL, line_table);\n \n@@ -1876,7 +1891,7 @@ struct lexer_test\n   const cpp_token *get_token ();\n \n   temp_source_file m_tempfile;\n-  temp_line_table m_tmp_lt;\n+  line_table_test m_ltt;\n   cpp_reader *m_parser;\n   string_concat_db m_concats;\n };\n@@ -1948,7 +1963,7 @@ lexer_test::lexer_test (const line_table_case &case_, const char *content,\n \t\t\tlexer_test_options *options) :\n   /* Create a tempfile and write the text to it.  */\n   m_tempfile (SELFTEST_LOCATION, \".c\", content),\n-  m_tmp_lt (case_),\n+  m_ltt (case_),\n   m_parser (cpp_create_reader (CLK_GNUC99, NULL, line_table)),\n   m_concats ()\n {\n@@ -3129,15 +3144,11 @@ static const location_t boundary_locations[] = {\n   LINE_MAP_MAX_LOCATION_WITH_COLS + 0x100,\n };\n \n-/* Run all of the selftests within this file.  */\n+/* Run TESTCASE multiple times, once for each case in our test matrix.  */\n \n void\n-input_c_tests ()\n+for_each_line_table_case (void (*testcase) (const line_table_case &))\n {\n-  test_should_have_column_data_p ();\n-  test_unknown_location ();\n-  test_builtins ();\n-\n   /* As noted above in the description of struct line_table_case,\n      we want to explore a test matrix of interesting line_table\n      situations, running various selftests for each case within the\n@@ -3158,37 +3169,48 @@ input_c_tests ()\n \t{\n \t  line_table_case c (default_range_bits, boundary_locations[loc_idx]);\n \n-\t  /* Run all tests for the given case within the test matrix.  */\n-\t  test_accessing_ordinary_linemaps (c);\n-\t  test_lexer (c);\n-\t  test_lexer_string_locations_simple (c);\n-\t  test_lexer_string_locations_ebcdic (c);\n-\t  test_lexer_string_locations_hex (c);\n-\t  test_lexer_string_locations_oct (c);\n-\t  test_lexer_string_locations_letter_escape_1 (c);\n-\t  test_lexer_string_locations_letter_escape_2 (c);\n-\t  test_lexer_string_locations_ucn4 (c);\n-\t  test_lexer_string_locations_ucn8 (c);\n-\t  test_lexer_string_locations_wide_string (c);\n-\t  test_lexer_string_locations_string16 (c);\n-\t  test_lexer_string_locations_string32 (c);\n-\t  test_lexer_string_locations_u8 (c);\n-\t  test_lexer_string_locations_utf8_source (c);\n-\t  test_lexer_string_locations_concatenation_1 (c);\n-\t  test_lexer_string_locations_concatenation_2 (c);\n-\t  test_lexer_string_locations_concatenation_3 (c);\n-\t  test_lexer_string_locations_macro (c);\n-\t  test_lexer_string_locations_stringified_macro_argument (c);\n-\t  test_lexer_string_locations_non_string (c);\n-\t  test_lexer_string_locations_long_line (c);\n-\t  test_lexer_char_constants (c);\n+\t  testcase (c);\n \n \t  num_cases_tested++;\n \t}\n     }\n \n   /* Verify that we fully covered the test matrix.  */\n   ASSERT_EQ (num_cases_tested, 2 * 12);\n+}\n+\n+/* Run all of the selftests within this file.  */\n+\n+void\n+input_c_tests ()\n+{\n+  test_should_have_column_data_p ();\n+  test_unknown_location ();\n+  test_builtins ();\n+\n+  for_each_line_table_case (test_accessing_ordinary_linemaps);\n+  for_each_line_table_case (test_lexer);\n+  for_each_line_table_case (test_lexer_string_locations_simple);\n+  for_each_line_table_case (test_lexer_string_locations_ebcdic);\n+  for_each_line_table_case (test_lexer_string_locations_hex);\n+  for_each_line_table_case (test_lexer_string_locations_oct);\n+  for_each_line_table_case (test_lexer_string_locations_letter_escape_1);\n+  for_each_line_table_case (test_lexer_string_locations_letter_escape_2);\n+  for_each_line_table_case (test_lexer_string_locations_ucn4);\n+  for_each_line_table_case (test_lexer_string_locations_ucn8);\n+  for_each_line_table_case (test_lexer_string_locations_wide_string);\n+  for_each_line_table_case (test_lexer_string_locations_string16);\n+  for_each_line_table_case (test_lexer_string_locations_string32);\n+  for_each_line_table_case (test_lexer_string_locations_u8);\n+  for_each_line_table_case (test_lexer_string_locations_utf8_source);\n+  for_each_line_table_case (test_lexer_string_locations_concatenation_1);\n+  for_each_line_table_case (test_lexer_string_locations_concatenation_2);\n+  for_each_line_table_case (test_lexer_string_locations_concatenation_3);\n+  for_each_line_table_case (test_lexer_string_locations_macro);\n+  for_each_line_table_case (test_lexer_string_locations_stringified_macro_argument);\n+  for_each_line_table_case (test_lexer_string_locations_non_string);\n+  for_each_line_table_case (test_lexer_string_locations_long_line);\n+  for_each_line_table_case (test_lexer_char_constants);\n \n   test_reading_source_line ();\n }"}, {"sha": "c99abfd52927eccec349144375a02a5ddd797036", "filename": "gcc/input.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f87e22c52128d9d9c9a72a81ae3922b46ce52e59/gcc%2Finput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f87e22c52128d9d9c9a72a81ae3922b46ce52e59/gcc%2Finput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finput.h?ref=f87e22c52128d9d9c9a72a81ae3922b46ce52e59", "patch": "@@ -24,6 +24,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"line-map.h\"\n \n extern GTY(()) struct line_maps *line_table;\n+extern GTY(()) struct line_maps *saved_line_table;\n \n /* A value which will never be used to represent a real location.  */\n #define UNKNOWN_LOCATION ((source_location) 0)"}, {"sha": "58a40f67cb176f022b6f4ac5e5f9296aae92761c", "filename": "gcc/selftest.h", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f87e22c52128d9d9c9a72a81ae3922b46ce52e59/gcc%2Fselftest.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f87e22c52128d9d9c9a72a81ae3922b46ce52e59/gcc%2Fselftest.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fselftest.h?ref=f87e22c52128d9d9c9a72a81ae3922b46ce52e59", "patch": "@@ -85,6 +85,48 @@ class temp_source_file\n   char *m_filename;\n };\n \n+/* Various selftests involving location-handling require constructing a\n+   line table and one or more line maps within it.\n+\n+   For maximum test coverage we want to run these tests with a variety\n+   of situations:\n+   - line_table->default_range_bits: some frontends use a non-zero value\n+   and others use zero\n+   - the fallback modes within line-map.c: there are various threshold\n+   values for source_location/location_t beyond line-map.c changes\n+   behavior (disabling of the range-packing optimization, disabling\n+   of column-tracking).  We can exercise these by starting the line_table\n+   at interesting values at or near these thresholds.\n+\n+   The following struct describes a particular case within our test\n+   matrix.  */\n+\n+struct line_table_case;\n+\n+/* A class for overriding the global \"line_table\" within a selftest,\n+   restoring its value afterwards.  At most one instance of this\n+   class can exist at once, due to the need to keep the old value\n+   of line_table as a GC root.  */\n+\n+class line_table_test\n+{\n+ public:\n+  /* Default constructor.  Override \"line_table\", using sane defaults\n+     for the temporary line_table.  */\n+  line_table_test ();\n+\n+  /* Constructor.  Override \"line_table\", using the case described by C.  */\n+  line_table_test (const line_table_case &c);\n+\n+  /* Destructor.  Restore the saved line_table.  */\n+  ~line_table_test ();\n+};\n+\n+/* Run TESTCASE multiple times, once for each case in our test matrix.  */\n+\n+extern void\n+for_each_line_table_case (void (*testcase) (const line_table_case &));\n+\n /* Declarations for specific families of tests (by source file), in\n    alphabetical order.  */\n extern void bitmap_c_tests ();"}]}