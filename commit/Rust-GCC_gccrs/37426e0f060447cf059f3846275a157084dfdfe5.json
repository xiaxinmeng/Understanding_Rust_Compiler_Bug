{"sha": "37426e0f060447cf059f3846275a157084dfdfe5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzc0MjZlMGYwNjA0NDdjZjA1OWYzODQ2Mjc1YTE1NzA4NGRmZGZlNQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-01-11T18:03:25Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-01-11T18:03:25Z"}, "message": "aarch64: Add support for unpacked SVE conditional BIC\n\nThis patch adds support for unpacked conditional BIC.  The type suffix\ncould be taken from the element size or the container size, so the\npatch continues to use the element size.  This is consistent with\nthe existing support for unconditional BIC.\n\ngcc/\n\t* config/aarch64/aarch64-sve.md (*cond_bic<mode>_2): Extend from\n\tSVE_FULL_I to SVE_I.\n\t(*cond_bic<mode>_any): Likewise.\n\ngcc/testsuite/\n\t* g++.target/aarch64/sve/cond_bic_1.C: New test.\n\t* g++.target/aarch64/sve/cond_bic_2.C: Likewise.\n\t* g++.target/aarch64/sve/cond_bic_3.C: Likewise.\n\t* g++.target/aarch64/sve/cond_bic_4.C: Likewise.", "tree": {"sha": "2597cf4a2205d06db9700db73fc1e7d660540a8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2597cf4a2205d06db9700db73fc1e7d660540a8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37426e0f060447cf059f3846275a157084dfdfe5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37426e0f060447cf059f3846275a157084dfdfe5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37426e0f060447cf059f3846275a157084dfdfe5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37426e0f060447cf059f3846275a157084dfdfe5/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7446de5a2af0610d1e12b6583fbfb23e25fa3e1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7446de5a2af0610d1e12b6583fbfb23e25fa3e1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7446de5a2af0610d1e12b6583fbfb23e25fa3e1d"}], "stats": {"total": 169, "additions": 156, "deletions": 13}, "files": [{"sha": "b8259f24b3ddedafb1099567cfc41d7e12cfee90", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37426e0f060447cf059f3846275a157084dfdfe5/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37426e0f060447cf059f3846275a157084dfdfe5/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=37426e0f060447cf059f3846275a157084dfdfe5", "patch": "@@ -4475,13 +4475,13 @@\n \n ;; Predicated integer BIC, merging with the first input.\n (define_insn \"*cond_bic<mode>_2\"\n-  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w, ?&w\")\n-\t(unspec:SVE_FULL_I\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, ?&w\")\n+\t(unspec:SVE_I\n \t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n-\t   (and:SVE_FULL_I\n-\t     (not:SVE_FULL_I\n-\t       (match_operand:SVE_FULL_I 3 \"register_operand\" \"w, w\"))\n-\t     (match_operand:SVE_FULL_I 2 \"register_operand\" \"0, w\"))\n+\t   (and:SVE_I\n+\t     (not:SVE_I\n+\t       (match_operand:SVE_I 3 \"register_operand\" \"w, w\"))\n+\t     (match_operand:SVE_I 2 \"register_operand\" \"0, w\"))\n \t   (match_dup 2)]\n \t  UNSPEC_SEL))]\n   \"TARGET_SVE\"\n@@ -4493,14 +4493,14 @@\n \n ;; Predicated integer BIC, merging with an independent value.\n (define_insn_and_rewrite \"*cond_bic<mode>_any\"\n-  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=&w, &w, &w, ?&w\")\n-\t(unspec:SVE_FULL_I\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=&w, &w, &w, ?&w\")\n+\t(unspec:SVE_I\n \t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl, Upl\")\n-\t   (and:SVE_FULL_I\n-\t     (not:SVE_FULL_I\n-\t       (match_operand:SVE_FULL_I 3 \"register_operand\" \"w, w, w, w\"))\n-\t     (match_operand:SVE_FULL_I 2 \"register_operand\" \"0, w, w, w\"))\n-\t   (match_operand:SVE_FULL_I 4 \"aarch64_simd_reg_or_zero\" \"Dz, Dz, 0, w\")]\n+\t   (and:SVE_I\n+\t     (not:SVE_I\n+\t       (match_operand:SVE_I 3 \"register_operand\" \"w, w, w, w\"))\n+\t     (match_operand:SVE_I 2 \"register_operand\" \"0, w, w, w\"))\n+\t   (match_operand:SVE_I 4 \"aarch64_simd_reg_or_zero\" \"Dz, Dz, 0, w\")]\n \t  UNSPEC_SEL))]\n   \"TARGET_SVE && !rtx_equal_p (operands[2], operands[4])\"\n   \"@"}, {"sha": "9f7cd75fd08bc419dfc4ada60fd2b43b925f7f1a", "filename": "gcc/testsuite/g++.target/aarch64/sve/cond_bic_1.C", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37426e0f060447cf059f3846275a157084dfdfe5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_bic_1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37426e0f060447cf059f3846275a157084dfdfe5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_bic_1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_bic_1.C?ref=37426e0f060447cf059f3846275a157084dfdfe5", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O -msve-vector-bits=2048 -save-temps\" } */\n+\n+#include <stdint.h>\n+\n+#define TEST_OP(TYPE) \\\n+  TYPE \\\n+  test##_##TYPE##_reg (TYPE a, TYPE b, TYPE c) \\\n+  { \\\n+    return c == 0 ? a & ~b : a; \\\n+  }\n+\n+#define TEST_TYPE(TYPE, SIZE) \\\n+  typedef TYPE TYPE##SIZE __attribute__((vector_size(SIZE))); \\\n+  TEST_OP (TYPE##SIZE)\n+\n+TEST_TYPE (uint8_t, 32)\n+\n+TEST_TYPE (uint8_t, 64)\n+TEST_TYPE (uint16_t, 64)\n+\n+TEST_TYPE (uint8_t, 128)\n+TEST_TYPE (uint16_t, 128)\n+TEST_TYPE (uint32_t, 128)\n+\n+/* { dg-final { scan-assembler {\\tld1b\\t(z[0-9]+)\\.h, p[0-7]/z, \\[x0\\]\\n[^L]*\\tbic\\t\\1\\.b, p[0-7]/m, \\1\\.b, z[0-9]+\\.b\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1b\\t(z[0-9]+)\\.s, p[0-7]/z, \\[x0\\]\\n[^L]*\\tbic\\t\\1\\.b, p[0-7]/m, \\1\\.b, z[0-9]+\\.b\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1b\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x0\\]\\n[^L]*\\tbic\\t\\1\\.b, p[0-7]/m, \\1\\.b, z[0-9]+\\.b\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1h\\t(z[0-9]+)\\.s, p[0-7]/z, \\[x0\\]\\n[^L]*\\tbic\\t\\1\\.h, p[0-7]/m, \\1\\.h, z[0-9]+\\.h\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1h\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x0\\]\\n[^L]*\\tbic\\t\\1\\.h, p[0-7]/m, \\1\\.h, z[0-9]+\\.h\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1w\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x0\\]\\n[^L]*\\tbic\\t\\1\\.s, p[0-7]/m, \\1\\.s, z[0-9]+\\.s\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tld1b\\t(z[0-9]+)\\.h, p[0-7]/z, \\[x1\\]\\n[^L]*\\tbic\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, \\1\\.b\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1b\\t(z[0-9]+)\\.s, p[0-7]/z, \\[x1\\]\\n[^L]*\\tbic\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, \\1\\.b\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1b\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x1\\]\\n[^L]*\\tbic\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, \\1\\.b\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1h\\t(z[0-9]+)\\.s, p[0-7]/z, \\[x1\\]\\n[^L]*\\tbic\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, \\1\\.h\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1h\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x1\\]\\n[^L]*\\tbic\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, \\1\\.h\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1w\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x1\\]\\n[^L]*\\tbic\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, \\1\\.s\\n} } } */\n+\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "9f96b7411401dfbc6bd44130b9f4927e79926e5b", "filename": "gcc/testsuite/g++.target/aarch64/sve/cond_bic_2.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37426e0f060447cf059f3846275a157084dfdfe5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_bic_2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37426e0f060447cf059f3846275a157084dfdfe5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_bic_2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_bic_2.C?ref=37426e0f060447cf059f3846275a157084dfdfe5", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O -msve-vector-bits=2048 -save-temps\" } */\n+\n+#include <stdint.h>\n+\n+#define TEST_OP(TYPE) \\\n+  TYPE \\\n+  test##_##TYPE##_reg (TYPE a, TYPE b, TYPE c) \\\n+  { \\\n+    return c == 0 ? a & ~b : b; \\\n+  }\n+\n+#define TEST_TYPE(TYPE, SIZE) \\\n+  typedef TYPE TYPE##SIZE __attribute__((vector_size(SIZE))); \\\n+  TEST_OP (TYPE##SIZE)\n+\n+TEST_TYPE (uint8_t, 32)\n+\n+TEST_TYPE (uint8_t, 64)\n+TEST_TYPE (uint16_t, 64)\n+\n+TEST_TYPE (uint8_t, 128)\n+TEST_TYPE (uint16_t, 128)\n+TEST_TYPE (uint32_t, 128)\n+\n+/* { dg-final { scan-assembler-times {\\tbic\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tbic\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tbic\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmovprfx\\t} } } */\n+/* { dg-final { scan-assembler-times {\\tsel\\t} 6 } } */"}, {"sha": "f69f61a61a093b141428bfea7d36898f2c370bbf", "filename": "gcc/testsuite/g++.target/aarch64/sve/cond_bic_3.C", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37426e0f060447cf059f3846275a157084dfdfe5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_bic_3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37426e0f060447cf059f3846275a157084dfdfe5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_bic_3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_bic_3.C?ref=37426e0f060447cf059f3846275a157084dfdfe5", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O -msve-vector-bits=2048 -save-temps\" } */\n+\n+#include <stdint.h>\n+\n+#define TEST_OP(TYPE) \\\n+  TYPE \\\n+  test##_##TYPE##_reg (TYPE a, TYPE b, TYPE c) \\\n+  { \\\n+    return c == 0 ? a & ~b : c; \\\n+  }\n+\n+#define TEST_TYPE(TYPE, SIZE) \\\n+  typedef TYPE TYPE##SIZE __attribute__((vector_size(SIZE))); \\\n+  TEST_OP (TYPE##SIZE)\n+\n+TEST_TYPE (uint8_t, 32)\n+\n+TEST_TYPE (uint8_t, 64)\n+TEST_TYPE (uint16_t, 64)\n+\n+TEST_TYPE (uint8_t, 128)\n+TEST_TYPE (uint16_t, 128)\n+TEST_TYPE (uint32_t, 128)\n+\n+/* { dg-final { scan-assembler {\\tld1b\\t(z[0-9]+)\\.h, p[0-7]/z, \\[x2\\]\\n[^L]*\\tbic\\t\\1\\.b, p[0-7]/m, \\1\\.b, z[0-9]+\\.b\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1b\\t(z[0-9]+)\\.s, p[0-7]/z, \\[x2\\]\\n[^L]*\\tbic\\t\\1\\.b, p[0-7]/m, \\1\\.b, z[0-9]+\\.b\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1b\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x2\\]\\n[^L]*\\tbic\\t\\1\\.b, p[0-7]/m, \\1\\.b, z[0-9]+\\.b\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1h\\t(z[0-9]+)\\.s, p[0-7]/z, \\[x2\\]\\n[^L]*\\tbic\\t\\1\\.h, p[0-7]/m, \\1\\.h, z[0-9]+\\.h\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1h\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x2\\]\\n[^L]*\\tbic\\t\\1\\.h, p[0-7]/m, \\1\\.h, z[0-9]+\\.h\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1w\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x2\\]\\n[^L]*\\tbic\\t\\1\\.s, p[0-7]/m, \\1\\.s, z[0-9]+\\.s\\n} } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "d6eb22b821a61e23613a4bed9783951e102c8270", "filename": "gcc/testsuite/g++.target/aarch64/sve/cond_bic_4.C", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37426e0f060447cf059f3846275a157084dfdfe5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_bic_4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37426e0f060447cf059f3846275a157084dfdfe5/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_bic_4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_bic_4.C?ref=37426e0f060447cf059f3846275a157084dfdfe5", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O -msve-vector-bits=2048 -save-temps\" } */\n+\n+#include <stdint.h>\n+\n+#define TEST_OP(TYPE) \\\n+  TYPE \\\n+  test##_##TYPE##_reg (TYPE a, TYPE b, TYPE c) \\\n+  { \\\n+    return c == 0 ? a & ~b : 0; \\\n+  }\n+\n+#define TEST_TYPE(TYPE, SIZE) \\\n+  typedef TYPE TYPE##SIZE __attribute__((vector_size(SIZE))); \\\n+  TEST_OP (TYPE##SIZE)\n+\n+TEST_TYPE (uint8_t, 32)\n+\n+TEST_TYPE (uint8_t, 64)\n+TEST_TYPE (uint16_t, 64)\n+\n+TEST_TYPE (uint8_t, 128)\n+TEST_TYPE (uint16_t, 128)\n+TEST_TYPE (uint32_t, 128)\n+\n+/* { dg-final { scan-assembler {\\tld1b\\t(z[0-9]+)\\.h, p[0-7]/z, \\[x0\\]\\n[^L]*\\tbic\\t\\1\\.b, p[0-7]/m, \\1\\.b, z[0-9]+\\.b\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1b\\t(z[0-9]+)\\.s, p[0-7]/z, \\[x0\\]\\n[^L]*\\tbic\\t\\1\\.b, p[0-7]/m, \\1\\.b, z[0-9]+\\.b\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1b\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x0\\]\\n[^L]*\\tbic\\t\\1\\.b, p[0-7]/m, \\1\\.b, z[0-9]+\\.b\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1h\\t(z[0-9]+)\\.s, p[0-7]/z, \\[x0\\]\\n[^L]*\\tbic\\t\\1\\.h, p[0-7]/m, \\1\\.h, z[0-9]+\\.h\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1h\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x0\\]\\n[^L]*\\tbic\\t\\1\\.h, p[0-7]/m, \\1\\.h, z[0-9]+\\.h\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1w\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x0\\]\\n[^L]*\\tbic\\t\\1\\.s, p[0-7]/m, \\1\\.s, z[0-9]+\\.s\\n} } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.b, p[0-7]/z, z[0-9]+\\.b\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.h, p[0-7]/z, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}]}