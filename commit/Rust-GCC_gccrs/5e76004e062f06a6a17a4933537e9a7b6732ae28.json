{"sha": "5e76004e062f06a6a17a4933537e9a7b6732ae28", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWU3NjAwNGUwNjJmMDZhNmExN2E0OTMzNTM3ZTlhN2I2NzMyYWUyOA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2000-08-17T13:10:50Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2000-08-17T13:10:50Z"}, "message": "cp-tree.h (instantiate_type_flags): New enumeration.\n\n\t* cp-tree.h (instantiate_type_flags): New enumeration.\n\t(instantiate_type): Change parameter.\n\t* class.c (instantiate_type): Adjust prototype. Adjust.\n\t* call.c (standard_conversion): Adjust instantiate_type call.\n\t(reference_binding): Likewise.\n\t(build_op_delete_call): Likewise.\n\t(convert_like_real): Likewise.\n\t* cvt.c (cp_convert_to_pointer): Likewise.\n\t(convert_to_reference): Likewise.\n\t* pt.c (convert_nontype_argument): Likewise.\n\t* typeck.c (build_binary_op): Likewise.\n\t(build_ptrmemfunc): Likewise.\n\t(convert_for_assignment): Likewise.\n\nFrom-SVN: r35757", "tree": {"sha": "6d50b727176b151472606d3cc6e5adf0682b6d63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d50b727176b151472606d3cc6e5adf0682b6d63"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e76004e062f06a6a17a4933537e9a7b6732ae28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e76004e062f06a6a17a4933537e9a7b6732ae28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e76004e062f06a6a17a4933537e9a7b6732ae28", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e76004e062f06a6a17a4933537e9a7b6732ae28/comments", "author": null, "committer": null, "parents": [{"sha": "321cba9761d5183ffb2cf1f294e7551e9c889a2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/321cba9761d5183ffb2cf1f294e7551e9c889a2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/321cba9761d5183ffb2cf1f294e7551e9c889a2b"}], "stats": {"total": 74, "additions": 48, "deletions": 26}, "files": [{"sha": "a3ad3fa0950f8e3adf11c34315cb9978c2f4be98", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e76004e062f06a6a17a4933537e9a7b6732ae28/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e76004e062f06a6a17a4933537e9a7b6732ae28/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5e76004e062f06a6a17a4933537e9a7b6732ae28", "patch": "@@ -1,3 +1,19 @@\n+2000-08-17  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* cp-tree.h (instantiate_type_flags): New enumeration.\n+\t(instantiate_type): Change parameter.\n+\t* class.c (instantiate_type): Adjust prototype. Adjust.\n+\t* call.c (standard_conversion): Adjust instantiate_type call.\n+\t(reference_binding): Likewise.\n+\t(build_op_delete_call): Likewise.\n+\t(convert_like_real): Likewise.\n+\t* cvt.c (cp_convert_to_pointer): Likewise.\n+\t(convert_to_reference): Likewise.\n+\t* pt.c (convert_nontype_argument): Likewise.\n+\t* typeck.c (build_binary_op): Likewise.\n+\t(build_ptrmemfunc): Likewise.\n+\t(convert_for_assignment): Likewise.\n+\n 2000-08-17  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* cp-tree.h (CPTR_AGGR_TAG): New global tree node."}, {"sha": "9c2b295dbb5e32e68375d24b81261184f5fb10c3", "filename": "gcc/cp/call.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e76004e062f06a6a17a4933537e9a7b6732ae28/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e76004e062f06a6a17a4933537e9a7b6732ae28/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=5e76004e062f06a6a17a4933537e9a7b6732ae28", "patch": "@@ -657,7 +657,7 @@ standard_conversion (to, from, expr)\n   if ((TYPE_PTRFN_P (to) || TYPE_PTRMEMFUNC_P (to))\n       && expr && type_unknown_p (expr))\n     {\n-      expr = instantiate_type (to, expr, 0);\n+      expr = instantiate_type (to, expr, itf_none);\n       if (expr == error_mark_node)\n \treturn NULL_TREE;\n       from = TREE_TYPE (expr);\n@@ -1043,7 +1043,7 @@ reference_binding (rto, rfrom, expr, flags)\n \n   if (TREE_CODE (to) == FUNCTION_TYPE && expr && type_unknown_p (expr))\n     {\n-      expr = instantiate_type (to, expr, 0);\n+      expr = instantiate_type (to, expr, itf_none);\n       if (expr == error_mark_node)\n \treturn NULL_TREE;\n       from = TREE_TYPE (expr);\n@@ -3555,7 +3555,7 @@ build_op_delete_call (code, addr, size, flags, placement)\n   if (type != TYPE_MAIN_VARIANT (type))\n     addr = cp_convert (build_pointer_type (TYPE_MAIN_VARIANT (type)), addr);\n \n-  fn = instantiate_type (fntype, fns, 2);\n+  fn = instantiate_type (fntype, fns, itf_no_attributes);\n \n   if (fn != error_mark_node)\n     {\n@@ -3575,7 +3575,7 @@ build_op_delete_call (code, addr, size, flags, placement)\n \t\t\ttree_cons (NULL_TREE, sizetype, void_list_node));\n   fntype = build_function_type (void_type_node, argtypes);\n \n-  fn = instantiate_type (fntype, fns, 2);\n+  fn = instantiate_type (fntype, fns, itf_no_attributes);\n \n   if (fn != error_mark_node)\n     {\n@@ -3694,7 +3694,7 @@ convert_like_real (convs, expr, fn, argnum, inner)\n       }\n     case IDENTITY_CONV:\n       if (type_unknown_p (expr))\n-\texpr = instantiate_type (TREE_TYPE (convs), expr, 1);\n+\texpr = instantiate_type (TREE_TYPE (convs), expr, itf_complain);\n       return expr;\n     case AMBIG_CONV:\n       /* Call build_user_type_conversion again for the error.  */"}, {"sha": "f9c27ab3c277c6345d3a1deff4faaa7922f31d0f", "filename": "gcc/cp/class.c", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e76004e062f06a6a17a4933537e9a7b6732ae28/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e76004e062f06a6a17a4933537e9a7b6732ae28/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=5e76004e062f06a6a17a4933537e9a7b6732ae28", "patch": "@@ -5977,24 +5977,22 @@ resolve_address_of_overloaded_function (target_type,\n \n /* This function will instantiate the type of the expression given in\n    RHS to match the type of LHSTYPE.  If errors exist, then return\n-   error_mark_node.  We only complain is COMPLAIN is set.  If we are\n-   not complaining, never modify rhs, as overload resolution wants to\n-   try many possible instantiations, in hopes that at least one will\n-   work.\n-\n-   FLAGS is a bitmask, as we see at the top of the function.\n-\n+   error_mark_node. FLAGS is a bit mask.  If ITF_COMPLAIN is set, then\n+   we complain on errors.  If we are not complaining, never modify rhs,\n+   as overload resolution wants to try many possible instantiations, in\n+   the hope that at least one will work.\n+   \n    For non-recursive calls, LHSTYPE should be a function, pointer to\n    function, or a pointer to member function.  */\n \n tree\n instantiate_type (lhstype, rhs, flags)\n      tree lhstype, rhs;\n-     int flags;\n+     enum instantiate_type_flags flags;\n {\n-  int complain = (flags & 1);\n-  int strict = (flags & 2) ? COMPARE_NO_ATTRIBUTES : COMPARE_STRICT;\n-  tree r;\n+  int complain = (flags & itf_complain);\n+  int strict = (flags & itf_no_attributes)\n+               ? COMPARE_NO_ATTRIBUTES : COMPARE_STRICT;\n \n   if (TREE_CODE (lhstype) == UNKNOWN_TYPE)\n     {"}, {"sha": "1f21995c5dfa88eee05eca281397f1ee51f73b1f", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e76004e062f06a6a17a4933537e9a7b6732ae28/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e76004e062f06a6a17a4933537e9a7b6732ae28/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=5e76004e062f06a6a17a4933537e9a7b6732ae28", "patch": "@@ -3204,6 +3204,13 @@ typedef enum special_function_kind {\n   sfk_conversion           /* A conversion operator.  */\n } special_function_kind;\n \n+/* Bitmask flags to pass to instantiate_type.  */\n+typedef enum instantiate_type_flags {\n+  itf_none = 0,               /* nothing special */\n+  itf_complain = 1 << 0,      /* complain about errors */\n+  itf_no_attributes = 1 << 1  /* ignore attributes on comparisons */\n+} instantiate_type_flags;\n+\n /* Non-zero means that if a label exists, and no other identifier\n    applies, use the value of the label.  */\n extern int flag_labels_ok;\n@@ -3822,7 +3829,7 @@ extern void push_nested_class\t\t\tPARAMS ((tree, int));\n extern void pop_nested_class\t\t\tPARAMS ((void));\n extern void push_lang_context\t\t\tPARAMS ((tree));\n extern void pop_lang_context\t\t\tPARAMS ((void));\n-extern tree instantiate_type\t\t\tPARAMS ((tree, tree, int));\n+extern tree instantiate_type\t\t\tPARAMS ((tree, tree, enum instantiate_type_flags));\n extern void print_class_statistics\t\tPARAMS ((void));\n extern int first_vfun_index                     PARAMS ((tree));\n extern void build_self_reference\t\tPARAMS ((void));"}, {"sha": "77e7ae81ed12b2e8eaf312c9059c2be8c738d181", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e76004e062f06a6a17a4933537e9a7b6732ae28/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e76004e062f06a6a17a4933537e9a7b6732ae28/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=5e76004e062f06a6a17a4933537e9a7b6732ae28", "patch": "@@ -267,7 +267,7 @@ cp_convert_to_pointer (type, expr)\n     }\n \n   if (type_unknown_p (expr))\n-    return instantiate_type (type, expr, 1);\n+    return instantiate_type (type, expr, itf_no_attributes);\n \n   cp_error (\"cannot convert `%E' from type `%T' to type `%T'\",\n \t    expr, intype, type);\n@@ -464,7 +464,8 @@ convert_to_reference (reftype, expr, convtype, flags, decl)\n   if (TREE_CODE (type) == FUNCTION_TYPE && intype == unknown_type_node)\n     {\n       expr = instantiate_type (type, expr, \n-\t\t\t       (flags & LOOKUP_COMPLAIN) != 0);\n+\t\t\t       (flags & LOOKUP_COMPLAIN)\n+\t                       ? itf_complain : itf_none);\n       if (expr == error_mark_node)\n \treturn error_mark_node;\n "}, {"sha": "04511586bf6b92538d8e4821be406b1c5512e8c6", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e76004e062f06a6a17a4933537e9a7b6732ae28/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e76004e062f06a6a17a4933537e9a7b6732ae28/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=5e76004e062f06a6a17a4933537e9a7b6732ae28", "patch": "@@ -2911,7 +2911,7 @@ convert_nontype_argument (type, expr)\n \t    else\n \t      fns = expr;\n \n-\t    fn = instantiate_type (type_pointed_to, fns, 0);\n+\t    fn = instantiate_type (type_pointed_to, fns, itf_none);\n \n \t    if (fn == error_mark_node)\n \t      return error_mark_node;\n@@ -2976,7 +2976,7 @@ convert_nontype_argument (type, expr)\n \t       set (_over.over_).  */\n \t    tree fn;\n \n-\t    fn = instantiate_type (type_referred_to, expr, 0);\n+\t    fn = instantiate_type (type_referred_to, expr, itf_none);\n \n \t    if (fn == error_mark_node)\n \t      return error_mark_node;\n@@ -3051,7 +3051,7 @@ convert_nontype_argument (type, expr)\n \tif (TREE_CODE (expr) != ADDR_EXPR)\n \t  return error_mark_node;\n \n-\texpr = instantiate_type (type, expr, 0);\n+\texpr = instantiate_type (type, expr, itf_none);\n \t\n \tif (expr == error_mark_node)\n \t  return error_mark_node;"}, {"sha": "ddd827a96c7bb2a74c83418a969c757ec24d1a10", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e76004e062f06a6a17a4933537e9a7b6732ae28/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e76004e062f06a6a17a4933537e9a7b6732ae28/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=5e76004e062f06a6a17a4933537e9a7b6732ae28", "patch": "@@ -3344,7 +3344,7 @@ build_binary_op (code, orig_op0, orig_op1, convert_p)\n   /* DTRT if one side is an overloaded function, but complain about it.  */\n   if (type_unknown_p (op0))\n     {\n-      tree t = instantiate_type (TREE_TYPE (op1), op0, 0);\n+      tree t = instantiate_type (TREE_TYPE (op1), op0, itf_none);\n       if (t != error_mark_node)\n \t{\n \t  cp_pedwarn (\"assuming cast to type `%T' from overloaded function\",\n@@ -3354,7 +3354,7 @@ build_binary_op (code, orig_op0, orig_op1, convert_p)\n     }\n   if (type_unknown_p (op1))\n     {\n-      tree t = instantiate_type (TREE_TYPE (op0), op1, 0);\n+      tree t = instantiate_type (TREE_TYPE (op0), op1, itf_none);\n       if (t != error_mark_node)\n \t{\n \t  cp_pedwarn (\"assuming cast to type `%T' from overloaded function\",\n@@ -6199,7 +6199,7 @@ build_ptrmemfunc (type, pfn, force)\n     }\n \n   if (type_unknown_p (pfn))\n-    return instantiate_type (type, pfn, 1);\n+    return instantiate_type (type, pfn, itf_complain);\n \n   fn = TREE_OPERAND (pfn, 0);\n   my_friendly_assert (TREE_CODE (fn) == FUNCTION_DECL, 0);\n@@ -6464,7 +6464,7 @@ convert_for_assignment (type, rhs, errtype, fndecl, parmnum)\n \t     overloaded function.  Call instantiate_type to get error\n \t     messages.  */\n \t  if (rhstype == unknown_type_node)\n-\t    instantiate_type (type, rhs, 1);\n+\t    instantiate_type (type, rhs, itf_complain);\n \t  else if (fndecl)\n \t    cp_error (\"cannot convert `%T' to `%T' for argument `%P' to `%D'\",\n \t\t      rhstype, type, parmnum, fndecl);"}]}