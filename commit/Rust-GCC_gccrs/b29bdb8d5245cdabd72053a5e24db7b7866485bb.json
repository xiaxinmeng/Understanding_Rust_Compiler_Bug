{"sha": "b29bdb8d5245cdabd72053a5e24db7b7866485bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjI5YmRiOGQ1MjQ1Y2RhYmQ3MjA1M2E1ZTI0ZGI3Yjc4NjY0ODViYg==", "commit": {"author": {"name": "Max Ostapenko", "email": "m.ostapenko@partner.samsung.com", "date": "2013-12-12T11:44:23Z"}, "committer": {"name": "Maxim Ostapenko", "email": "chefmax@gcc.gnu.org", "date": "2013-12-12T11:44:23Z"}, "message": "free_race2.c: New file.\n\n2013-12-12  Max Ostapenko  <m.ostapenko@partner.samsung.com>\n\n\t* c-c++-common/tsan/free_race2.c: New file.\n\t* c-c++-common/tsan/race_on_barrier2.c: Likewise.\n\t* c-c++-common/tsan/race_on_mutex.c: Likewise.\n\t* c-c++-common/tsan/race_on_mutex2.c: Likewise.\n\t* c-c++-common/tsan/simple_race.c: Likewise.\n\t* c-c++-common/tsan/simple_stack.c: Likewise.\n\t* g++.dg/tsan/aligned_vs_unaligned_race.C: Likewise. Test applies only on x86_64-linux targets. \n\t* g++.dg/tsan/atomic_free.C: Likewise.\n\t* g++.dg/tsan/atomic_free2.C: Likewise.\n\t* g++.dg/tsan/benign_race.C: Likewise.\n\t* g++.dg/tsan/cond_race.C: Likewise.\n\t* g++.dg/tsan/default_options.C: Likewise.\n\t* g++.dg/tsan/fd_close_norace.C: Likewise.\n\t* g++.dg/tsan/fd_close_norace2.C: Likewise.\n\t* g++-dg/tsan/tsan.exp: Modified to run additional C++ tests.\n\nFrom-SVN: r205925", "tree": {"sha": "a713197eaeba8ba49842a744edcbbea8b3eef538", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a713197eaeba8ba49842a744edcbbea8b3eef538"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b29bdb8d5245cdabd72053a5e24db7b7866485bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b29bdb8d5245cdabd72053a5e24db7b7866485bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b29bdb8d5245cdabd72053a5e24db7b7866485bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b29bdb8d5245cdabd72053a5e24db7b7866485bb/comments", "author": null, "committer": null, "parents": [{"sha": "0790a65a2195c63ec15aedfbff0fc35a2bc934a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0790a65a2195c63ec15aedfbff0fc35a2bc934a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0790a65a2195c63ec15aedfbff0fc35a2bc934a9"}], "stats": {"total": 493, "additions": 492, "deletions": 1}, "files": [{"sha": "bfccb6ab55e13f4a8146d55726b7968d05743ecb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b29bdb8d5245cdabd72053a5e24db7b7866485bb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b29bdb8d5245cdabd72053a5e24db7b7866485bb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b29bdb8d5245cdabd72053a5e24db7b7866485bb", "patch": "@@ -1,3 +1,21 @@\n+2013-12-12  Max Ostapenko  <m.ostapenko@partner.samsung.com>\n+\n+\t* c-c++-common/tsan/free_race2.c: New file.\n+\t* c-c++-common/tsan/race_on_barrier2.c: Likewise.\n+\t* c-c++-common/tsan/race_on_mutex.c: Likewise.\n+\t* c-c++-common/tsan/race_on_mutex2.c: Likewise.\n+\t* c-c++-common/tsan/simple_race.c: Likewise.\n+\t* c-c++-common/tsan/simple_stack.c: Likewise.\n+\t* g++.dg/tsan/aligned_vs_unaligned_race.C: Likewise. Test applies only on x86_64-linux targets. \n+\t* g++.dg/tsan/atomic_free.C: Likewise.\n+\t* g++.dg/tsan/atomic_free2.C: Likewise.\n+\t* g++.dg/tsan/benign_race.C: Likewise.\n+\t* g++.dg/tsan/cond_race.C: Likewise.\n+\t* g++.dg/tsan/default_options.C: Likewise.\n+\t* g++.dg/tsan/fd_close_norace.C: Likewise.\n+\t* g++.dg/tsan/fd_close_norace2.C: Likewise.\n+\t* g++-dg/tsan/tsan.exp: Modified to run additional C++ tests.\n+\n 2013-12-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR libgomp/59467"}, {"sha": "3c15d2d20f53641cc1f026cf3049fb451f31474a", "filename": "gcc/testsuite/c-c++-common/tsan/free_race2.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b29bdb8d5245cdabd72053a5e24db7b7866485bb/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Ffree_race2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b29bdb8d5245cdabd72053a5e24db7b7866485bb/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Ffree_race2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Ffree_race2.c?ref=b29bdb8d5245cdabd72053a5e24db7b7866485bb", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"tsan\" } */\n+\n+#include <stdlib.h>\n+\n+void __attribute__((noinline)) foo(int *mem) {\n+  free(mem);\n+}\n+\n+void __attribute__((noinline)) bar(int *mem) {\n+  mem[0] = 42;\n+}\n+\n+int main() {\n+  int *mem = (int*)malloc(100);\n+  foo(mem);\n+  bar(mem);\n+  return 0;\n+}\n+\n+/* { dg-output \"WARNING: ThreadSanitizer: heap-use-after-free.*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"  Write of size 4.* by main thread:(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"    #0 bar.*\" } */\n+/* { dg-output \"    #1 main .*\" } */\n+/* { dg-output \"  Previous write of size 8 at .* by main thread:(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"    #0 free .*\" } */\n+/* { dg-output \"    #\\(1|2\\) foo.*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"    #\\(2|3\\) main .*\" } */\n+"}, {"sha": "9576c672e1b746454cecc3e3b720f0015badba9a", "filename": "gcc/testsuite/c-c++-common/tsan/race_on_barrier2.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b29bdb8d5245cdabd72053a5e24db7b7866485bb/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Frace_on_barrier2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b29bdb8d5245cdabd72053a5e24db7b7866485bb/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Frace_on_barrier2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Frace_on_barrier2.c?ref=b29bdb8d5245cdabd72053a5e24db7b7866485bb", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"tsan\" } */\n+\n+#include <pthread.h>\n+#include <stdio.h>\n+#include <stddef.h>\n+#include <unistd.h>\n+\n+pthread_barrier_t B;\n+int Global;\n+\n+void *Thread1(void *x) {\n+  if (pthread_barrier_wait(&B) == PTHREAD_BARRIER_SERIAL_THREAD)\n+    pthread_barrier_destroy(&B);\n+  return NULL;\n+}\n+\n+void *Thread2(void *x) {\n+  if (pthread_barrier_wait(&B) == PTHREAD_BARRIER_SERIAL_THREAD)\n+    pthread_barrier_destroy(&B);\n+  return NULL;\n+}\n+\n+int main() {\n+  pthread_barrier_init(&B, 0, 2);\n+  pthread_t t;\n+  pthread_create(&t, NULL, Thread1, NULL);\n+  Thread2(0);\n+  pthread_join(t, NULL);\n+  return 0;\n+}\n+\n+/* { dg-output \"WARNING: ThreadSanitizer: data race.*(\\n|\\r\\n|\\r)\" } */"}, {"sha": "f112d097de44c10517e80bb000109393d41dae64", "filename": "gcc/testsuite/c-c++-common/tsan/race_on_mutex.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b29bdb8d5245cdabd72053a5e24db7b7866485bb/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Frace_on_mutex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b29bdb8d5245cdabd72053a5e24db7b7866485bb/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Frace_on_mutex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Frace_on_mutex.c?ref=b29bdb8d5245cdabd72053a5e24db7b7866485bb", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"tsan\" } */\n+\n+#include <pthread.h>\n+#include <stdio.h>\n+#include <stddef.h>\n+#include <unistd.h>\n+\n+pthread_mutex_t Mtx;\n+int Global;\n+\n+void *Thread1(void *x) {\n+  pthread_mutex_init(&Mtx, 0);\n+  pthread_mutex_lock(&Mtx);\n+  Global = 42;\n+  pthread_mutex_unlock(&Mtx);\n+  return NULL;\n+}\n+\n+void *Thread2(void *x) {\n+  sleep(1);\n+  pthread_mutex_lock(&Mtx);\n+  Global = 43;\n+  pthread_mutex_unlock(&Mtx);\n+  return NULL;\n+}\n+\n+int main() {\n+  pthread_t t[2];\n+  pthread_create(&t[0], NULL, Thread1, NULL);\n+  pthread_create(&t[1], NULL, Thread2, NULL);\n+  pthread_join(t[0], NULL);\n+  pthread_join(t[1], NULL);\n+  pthread_mutex_destroy(&Mtx);\n+  return 0;\n+}\n+\n+/* { dg-output \"WARNING: ThreadSanitizer: data race.*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"  Atomic read of size 1 at .* by thread T2:(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"    #0 pthread_mutex_lock.*\" } */\n+/* { dg-output \"    #1 Thread2.* .*(race_on_mutex.c:22|\\\\?{2}:0) (.*)\" } */\n+/* { dg-output \"  Previous write of size 1 at .* by thread T1:(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"    #0 pthread_mutex_init .* (.)*\" } */\n+/* { dg-output \"    #1 Thread1.* .*(race_on_mutex.c:13|\\\\?{2}:0) .*\" } */"}, {"sha": "d8a69801ed0e4bc1f461515b703f7290ee2c6464", "filename": "gcc/testsuite/c-c++-common/tsan/race_on_mutex2.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b29bdb8d5245cdabd72053a5e24db7b7866485bb/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Frace_on_mutex2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b29bdb8d5245cdabd72053a5e24db7b7866485bb/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Frace_on_mutex2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Frace_on_mutex2.c?ref=b29bdb8d5245cdabd72053a5e24db7b7866485bb", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"tsan\" } */\n+\n+#include <pthread.h>\n+#include <stdio.h>\n+#include <stddef.h>\n+#include <unistd.h>\n+\n+void *Thread(void *x) {\n+  pthread_mutex_lock((pthread_mutex_t*)x);\n+  pthread_mutex_unlock((pthread_mutex_t*)x);\n+  return 0;\n+}\n+\n+int main() {\n+  pthread_mutex_t Mtx;\n+  pthread_mutex_init(&Mtx, 0);\n+  pthread_t t;\n+  pthread_create(&t, 0, Thread, &Mtx);\n+  sleep(1);\n+  pthread_mutex_destroy(&Mtx);\n+  pthread_join(t, 0);\n+  return 0;\n+}\n+\n+/* { dg-output \"WARNING: ThreadSanitizer: data race.*(\\n|\\r\\n|\\r)\" } */"}, {"sha": "24b88e8e5ee99977222dc5b606c63c1d77064a7f", "filename": "gcc/testsuite/c-c++-common/tsan/simple_race.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b29bdb8d5245cdabd72053a5e24db7b7866485bb/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Fsimple_race.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b29bdb8d5245cdabd72053a5e24db7b7866485bb/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Fsimple_race.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Fsimple_race.c?ref=b29bdb8d5245cdabd72053a5e24db7b7866485bb", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"tsan\" } */\n+\n+#include <pthread.h>\n+#include <stdio.h>\n+\n+int Global;\n+\n+void *Thread1(void *x) {\n+  Global = 42;\n+  return NULL;\n+}\n+\n+void *Thread2(void *x) {\n+  Global = 43;\n+  return NULL;\n+}\n+\n+int main() {\n+  pthread_t t[2];\n+  pthread_create(&t[0], NULL, Thread1, NULL);\n+  pthread_create(&t[1], NULL, Thread2, NULL);\n+  pthread_join(t[0], NULL);\n+  pthread_join(t[1], NULL);\n+  return 0;\n+}\n+\n+/* { dg-output \"WARNING: ThreadSanitizer: data race.*(\\n|\\r\\n|\\r)\" } */"}, {"sha": "e92d010a59b4e4f54a9d04f4235f22b1302b99bd", "filename": "gcc/testsuite/c-c++-common/tsan/simple_stack.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b29bdb8d5245cdabd72053a5e24db7b7866485bb/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Fsimple_stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b29bdb8d5245cdabd72053a5e24db7b7866485bb/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Fsimple_stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Fsimple_stack.c?ref=b29bdb8d5245cdabd72053a5e24db7b7866485bb", "patch": "@@ -0,0 +1,66 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"tsan\" } */\n+\n+#include <pthread.h>\n+#include <stdio.h>\n+#include <unistd.h>\n+\n+int Global;\n+\n+void __attribute__((noinline)) foo1() {\n+  Global = 42;\n+}\n+\n+void __attribute__((noinline)) bar1() {\n+  volatile int tmp = 42; (void)tmp;\n+  foo1();\n+}\n+\n+void __attribute__((noinline)) foo2() {\n+  volatile int v = Global; (void)v;\n+}\n+\n+void __attribute__((noinline)) bar2() {\n+  volatile int tmp = 42; (void)tmp;\n+  foo2();\n+}\n+\n+void *Thread1(void *x) {\n+  sleep(1);\n+  bar1();\n+  return NULL;\n+}\n+\n+void *Thread2(void *x) {\n+  bar2();\n+  return NULL;\n+}\n+\n+void StartThread(pthread_t *t, void *(*f)(void*)) {\n+  pthread_create(t, NULL, f, NULL);\n+}\n+\n+int main() {\n+  pthread_t t[2];\n+  StartThread(&t[0], Thread1);\n+  StartThread(&t[1], Thread2);\n+  pthread_join(t[0], NULL);\n+  pthread_join(t[1], NULL);\n+  return 0;\n+}\n+\n+/* { dg-output \"WARNING: ThreadSanitizer: data race.*\" } */\n+/* { dg-output \"  Write of size 4 at .* by thread T1:(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"    #0 foo1.* .*(simple_stack.c:11|\\\\?{2}:0) (.*)\" } */\n+/* { dg-output \"    #1 bar1.* .*(simple_stack.c:16|\\\\?{2}:0) (.*)\" } */\n+/* { dg-output \"    #2 Thread1.* .*(simple_stack.c:30|\\\\?{2}:0) (.*)\" } */\n+/* { dg-output \"  Previous read of size 4 at .* by thread T2:(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"    #0 foo2.* .*(simple_stack.c:20|\\\\?{2}:0) (.*)\" } */\n+/* { dg-output \"    #1 bar2.* .*(simple_stack.c:25|\\\\?{2}:0) (.*)\" } */\n+/* { dg-output \"    #2 Thread2.* .*(simple_stack.c:35|\\\\?{2}:0) (.*)\" } */\n+/* { dg-output \"  Thread T1 \\\\(tid=.*, running\\\\) created by main thread at:(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"    #0 pthread_create .* (.*)\" } */\n+/* { dg-output \"    #1 StartThread.* .*(simple_stack.c:40|\\\\?{2}:0) (.*)\" } */\n+/* { dg-output \"  Thread T2 (.*) created by main thread at:(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"    #0 pthread_create .* (.*)\" } */\n+/* { dg-output \"    #1 StartThread.* .*(simple_stack.c:40|\\\\?{2}:0) (.*)\" } */"}, {"sha": "ccac527e1d4826096823a4c0765e39cd1b7bf731", "filename": "gcc/testsuite/g++.dg/tsan/aligned_vs_unaligned_race.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b29bdb8d5245cdabd72053a5e24db7b7866485bb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftsan%2Faligned_vs_unaligned_race.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b29bdb8d5245cdabd72053a5e24db7b7866485bb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftsan%2Faligned_vs_unaligned_race.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftsan%2Faligned_vs_unaligned_race.C?ref=b29bdb8d5245cdabd72053a5e24db7b7866485bb", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run { target { x86_64-*-linux* } } } */\n+\n+#include <pthread.h>\n+#include <stdio.h>\n+#include <stdint.h>\n+\n+uint64_t Global[2];\n+\n+void *Thread1(void *x) {\n+  Global[1]++;\n+  return NULL;\n+}\n+\n+void *Thread2(void *x) {\n+  char *p1 = reinterpret_cast<char *>(&Global[0]);\n+  uint64_t *p4 = reinterpret_cast<uint64_t *>(p1 + 1);\n+  (*p4)++;\n+  return NULL;\n+}\n+\n+int main() {\n+  pthread_t t[2];\n+  pthread_create(&t[0], NULL, Thread1, NULL);\n+  pthread_create(&t[1], NULL, Thread2, NULL);\n+  pthread_join(t[0], NULL);\n+  pthread_join(t[1], NULL);\n+  printf(\"Pass\\n\");\n+  /* { dg-prune-output \"ThreadSanitizer: data race.*(\\n|\\r\\n|\\r)\" } */\n+  /* { dg-output \"Pass.*\" } */\n+  return 0;\n+}"}, {"sha": "afaad777de68d1b376b4115593e7645eaefa428b", "filename": "gcc/testsuite/g++.dg/tsan/atomic_free.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b29bdb8d5245cdabd72053a5e24db7b7866485bb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftsan%2Fatomic_free.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b29bdb8d5245cdabd72053a5e24db7b7866485bb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftsan%2Fatomic_free.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftsan%2Fatomic_free.C?ref=b29bdb8d5245cdabd72053a5e24db7b7866485bb", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"tsan\" } */\n+\n+#include <pthread.h>\n+#include <unistd.h>\n+\n+void *Thread(void *a) {\n+  __atomic_fetch_add((int*)a, 1, __ATOMIC_SEQ_CST);\n+  return 0;\n+}\n+\n+int main() {\n+  int *a = new int(0);\n+  pthread_t t;\n+  pthread_create(&t, 0, Thread, a);\n+  sleep(1);\n+  delete a;\n+  pthread_join(t, 0);\n+}\n+\n+/* { dg-output \"WARNING: ThreadSanitizer: data race.*(\\n|\\r\\n|\\r)\" } */"}, {"sha": "7ccaa1a95d9599499d39dd31202f4ca55d7247b8", "filename": "gcc/testsuite/g++.dg/tsan/atomic_free2.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b29bdb8d5245cdabd72053a5e24db7b7866485bb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftsan%2Fatomic_free2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b29bdb8d5245cdabd72053a5e24db7b7866485bb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftsan%2Fatomic_free2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftsan%2Fatomic_free2.C?ref=b29bdb8d5245cdabd72053a5e24db7b7866485bb", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"tsan\" } */\n+\n+#include <pthread.h>\n+#include <unistd.h>\n+\n+void *Thread(void *a) {\n+  sleep(1);\n+  __atomic_fetch_add((int*)a, 1, __ATOMIC_SEQ_CST);\n+  return 0;\n+}\n+\n+int main() {\n+  int *a = new int(0);\n+  pthread_t t;\n+  pthread_create(&t, 0, Thread, a);\n+  delete a;\n+  pthread_join(t, 0);\n+}\n+\n+/* { dg-output \"WARNING: ThreadSanitizer: heap-use-after-free.*(\\n|\\r\\n|\\r)\" } */"}, {"sha": "d67b31b2805573297694953b8066ae87476d383c", "filename": "gcc/testsuite/g++.dg/tsan/benign_race.C", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b29bdb8d5245cdabd72053a5e24db7b7866485bb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftsan%2Fbenign_race.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b29bdb8d5245cdabd72053a5e24db7b7866485bb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftsan%2Fbenign_race.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftsan%2Fbenign_race.C?ref=b29bdb8d5245cdabd72053a5e24db7b7866485bb", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do run } */\n+\n+#include <pthread.h>\n+#include <stdio.h>\n+#include <unistd.h>\n+\n+int Global;\n+int WTFGlobal;\n+\n+extern \"C\" {\n+void AnnotateBenignRaceSized(const char *f, int l,\n+                             void *mem, unsigned int size, const char *desc);\n+void WTFAnnotateBenignRaceSized(const char *f, int l,\n+                                void *mem, unsigned int size,\n+                                const char *desc);\n+}\n+\n+\n+void *Thread(void *x) {\n+  Global = 42;\n+  WTFGlobal = 142;\n+  return 0;\n+}\n+\n+int main() {\n+  AnnotateBenignRaceSized(__FILE__, __LINE__,\n+                          &Global, sizeof(Global), \"Race on Global\");\n+  WTFAnnotateBenignRaceSized(__FILE__, __LINE__,\n+                             &WTFGlobal, sizeof(WTFGlobal),\n+                             \"Race on WTFGlobal\");\n+  pthread_t t;\n+  pthread_create(&t, 0, Thread, 0);\n+  sleep(1);\n+  Global = 43;\n+  WTFGlobal = 143;\n+  pthread_join(t, 0);\n+  printf(\"OK\\n\");\n+}\n+\n+/* { dg-prune-output \"WARNING: ThreadSanitizer: data race.*(\\n|\\r\\n|\\r)\" } */"}, {"sha": "d28912f20239e8f008f40d1b01ff356d52a97559", "filename": "gcc/testsuite/g++.dg/tsan/cond_race.C", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b29bdb8d5245cdabd72053a5e24db7b7866485bb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftsan%2Fcond_race.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b29bdb8d5245cdabd72053a5e24db7b7866485bb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftsan%2Fcond_race.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftsan%2Fcond_race.C?ref=b29bdb8d5245cdabd72053a5e24db7b7866485bb", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"tsan\" } */\n+/* { dg-output \"ThreadSanitizer: data race.*\" } */\n+/* { dg-output \"pthread_cond_signal.*\" } */\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <pthread.h>\n+\n+struct Ctx {\n+  pthread_mutex_t m;\n+  pthread_cond_t c;\n+  bool done;\n+};\n+\n+void *thr(void *p) {\n+  Ctx *c = (Ctx*)p;\n+  pthread_mutex_lock(&c->m);\n+  c->done = true;\n+  pthread_mutex_unlock(&c->m);\n+  pthread_cond_signal(&c->c);\n+  return 0;\n+}\n+\n+int main() {\n+  Ctx *c = new Ctx();\n+  pthread_mutex_init(&c->m, 0);\n+  pthread_cond_init(&c->c, 0);\n+  pthread_t th;\n+  pthread_create(&th, 0, thr, c);\n+  pthread_mutex_lock(&c->m);\n+  while (!c->done)\n+    pthread_cond_wait(&c->c, &c->m);\n+  pthread_mutex_unlock(&c->m);\n+  delete c;\n+  pthread_join(th, 0);\n+}"}, {"sha": "b688abff4a96d577d75b1efa58ac0d8b797254ac", "filename": "gcc/testsuite/g++.dg/tsan/default_options.C", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b29bdb8d5245cdabd72053a5e24db7b7866485bb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftsan%2Fdefault_options.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b29bdb8d5245cdabd72053a5e24db7b7866485bb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftsan%2Fdefault_options.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftsan%2Fdefault_options.C?ref=b29bdb8d5245cdabd72053a5e24db7b7866485bb", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"tsan\" } */\n+\n+#include <pthread.h>\n+#include <stdio.h>\n+\n+extern \"C\" const char *__tsan_default_options() {\n+  return \"report_bugs=0\";\n+}\n+\n+int Global;\n+\n+void *Thread1(void *x) {\n+  Global = 42;\n+  return NULL;\n+}\n+\n+void *Thread2(void *x) {\n+  Global = 43;\n+  return NULL;\n+}\n+\n+int main() {\n+  pthread_t t[2];\n+  pthread_create(&t[0], NULL, Thread1, NULL);\n+  pthread_create(&t[1], NULL, Thread2, NULL);\n+  pthread_join(t[0], NULL);\n+  pthread_join(t[1], NULL);\n+  fprintf(stderr, \"DONE\\n\");\n+  return 0;\n+}\n+\n+/* { dg-prune-output \"WARNING: ThreadSanitizer: data race.*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"DONE\" } */"}, {"sha": "a31428a34567a70ff44bf6d03166f148669645c7", "filename": "gcc/testsuite/g++.dg/tsan/fd_close_norace.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b29bdb8d5245cdabd72053a5e24db7b7866485bb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftsan%2Ffd_close_norace.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b29bdb8d5245cdabd72053a5e24db7b7866485bb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftsan%2Ffd_close_norace.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftsan%2Ffd_close_norace.C?ref=b29bdb8d5245cdabd72053a5e24db7b7866485bb", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do run } */\n+\n+#include <pthread.h>\n+#include <stdio.h>\n+#include <unistd.h>\n+#include <sys/types.h>\n+#include <sys/stat.h>\n+#include <fcntl.h>\n+\n+void *Thread1(void *x) {\n+  int f = open(\"/dev/random\", O_RDONLY);\n+  close(f);\n+  return NULL;\n+}\n+\n+void *Thread2(void *x) {\n+  sleep(1);\n+  int f = open(\"/dev/random\", O_RDONLY);\n+  close(f);\n+  return NULL;\n+}\n+\n+int main() {\n+  pthread_t t[2];\n+  pthread_create(&t[0], NULL, Thread1, NULL);\n+  pthread_create(&t[1], NULL, Thread2, NULL);\n+  pthread_join(t[0], NULL);\n+  pthread_join(t[1], NULL);\n+  printf(\"OK\\n\");\n+}\n+\n+/* { dg-prune-output \"WARNING: ThreadSanitizer: data race.*(\\n|\\r\\n|\\r)\" } */"}, {"sha": "f2d394c28960f265eea68e0888315a438d16a4eb", "filename": "gcc/testsuite/g++.dg/tsan/fd_close_norace2.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b29bdb8d5245cdabd72053a5e24db7b7866485bb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftsan%2Ffd_close_norace2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b29bdb8d5245cdabd72053a5e24db7b7866485bb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftsan%2Ffd_close_norace2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftsan%2Ffd_close_norace2.C?ref=b29bdb8d5245cdabd72053a5e24db7b7866485bb", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run } */\n+\n+#include <pthread.h>\n+#include <stdio.h>\n+#include <unistd.h>\n+\n+int pipes[2];\n+\n+void *Thread(void *x) {\n+  // wait for shutown signal\n+  while (read(pipes[0], &x, 1) != 1) {\n+  }\n+  close(pipes[0]);\n+  close(pipes[1]);\n+  return 0;\n+}\n+\n+int main() {\n+  if (pipe(pipes))\n+    return 1;\n+  pthread_t t;\n+  pthread_create(&t, 0, Thread, 0);\n+  // send shutdown signal\n+  while (write(pipes[1], &t, 1) != 1) {\n+  }\n+  pthread_join(t, 0);\n+  printf(\"OK\\n\");\n+}\n+\n+/* { dg-prune-output \"WARNING: ThreadSanitizer: data race.*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"OK\" } */"}, {"sha": "9bcf6cc8a1d2741a4f720791cbe57f821706551b", "filename": "gcc/testsuite/g++.dg/tsan/tsan.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b29bdb8d5245cdabd72053a5e24db7b7866485bb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftsan%2Ftsan.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b29bdb8d5245cdabd72053a5e24db7b7866485bb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftsan%2Ftsan.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftsan%2Ftsan.exp?ref=b29bdb8d5245cdabd72053a5e24db7b7866485bb", "patch": "@@ -37,7 +37,7 @@ set-torture-options [list \\\n if [tsan_init] {\n \n # Main loop.\n-gcc-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.c $srcdir/c-c++-common/tsan/*.c]] \"\"\n+gcc-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.C $srcdir/c-c++-common/tsan/*.c]] \"\"\n \n }\n "}]}