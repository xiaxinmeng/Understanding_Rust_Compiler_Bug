{"sha": "33be0bec7e32a96c2cc05f5afeed7febf9b48a9c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzNiZTBiZWM3ZTMyYTk2YzJjYzA1ZjVhZmVlZDdmZWJmOWI0OGE5Yw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2013-06-25T07:23:19Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2013-06-25T07:23:19Z"}, "message": "expr.c (expand_expr_real_1): Fix formatting glitches.\n\n\t* expr.c (expand_expr_real_1) <ARRAY_REF>: Fix formatting glitches.\n\t<BIT_FIELD_REF>: Remove trailing TAB.\n\t* varasm.c (output_constructor_bitfield): Fix formatting glitch and\n\tremove blank line.\n\nFrom-SVN: r200389", "tree": {"sha": "affb25251d2ed549aac1201c32a11b23ddf04483", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/affb25251d2ed549aac1201c32a11b23ddf04483"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33be0bec7e32a96c2cc05f5afeed7febf9b48a9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33be0bec7e32a96c2cc05f5afeed7febf9b48a9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33be0bec7e32a96c2cc05f5afeed7febf9b48a9c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33be0bec7e32a96c2cc05f5afeed7febf9b48a9c/comments", "author": null, "committer": null, "parents": [{"sha": "6122e82486235677e1308770961b0ecf83b0e675", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6122e82486235677e1308770961b0ecf83b0e675", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6122e82486235677e1308770961b0ecf83b0e675"}], "stats": {"total": 53, "additions": 29, "deletions": 24}, "files": [{"sha": "f21e60b75c383a8de4103385eeda36b84f275b27", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33be0bec7e32a96c2cc05f5afeed7febf9b48a9c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33be0bec7e32a96c2cc05f5afeed7febf9b48a9c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=33be0bec7e32a96c2cc05f5afeed7febf9b48a9c", "patch": "@@ -1,3 +1,10 @@\n+2013-06-25  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* expr.c (expand_expr_real_1) <ARRAY_REF>: Fix formatting glitches.\n+\t<BIT_FIELD_REF>: Remove trailing TAB.\n+\t* varasm.c (output_constructor_bitfield): Fix formatting glitch and\n+\tremove blank line.\n+\n 2013-06-24  Martin Jambor  <mjambor@suse.cz>\n \n \tPR tree-optimization/57358"}, {"sha": "923f59bffda6efdfa23eb781a8d64b4e29a3a263", "filename": "gcc/expr.c", "status": "modified", "additions": 21, "deletions": 22, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33be0bec7e32a96c2cc05f5afeed7febf9b48a9c/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33be0bec7e32a96c2cc05f5afeed7febf9b48a9c/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=33be0bec7e32a96c2cc05f5afeed7febf9b48a9c", "patch": "@@ -9698,7 +9698,7 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n       {\n \ttree array = treeop0;\n \ttree index = treeop1;\n-        tree init;\n+\ttree init;\n \n \t/* Fold an expression like: \"foo\"[2].\n \t   This is not done in fold so it won't happen inside &.\n@@ -9776,32 +9776,31 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \t\t\t    break;\n \t\t\t}\n \n-\t\t      return expand_expr (fold (value), target, tmode,\n-\t\t\t\t\t  modifier);\n+\t\t      return\n+\t\t        expand_expr (fold (value), target, tmode, modifier);\n \t\t    }\n \t      }\n-\t    else if(TREE_CODE (init) == STRING_CST)\n+\t    else if (TREE_CODE (init) == STRING_CST)\n \t      {\n-\t\ttree index1 = index;\n \t\ttree low_bound = array_ref_low_bound (exp);\n-\t\tindex1 = fold_convert_loc (loc, sizetype,\n-\t\t\t\t\t   treeop1);\n-\n-\t\t/* Optimize the special-case of a zero lower bound.\n-\n-\t\t   We convert the low_bound to sizetype to avoid some problems\n-\t\t   with constant folding.  (E.g. suppose the lower bound is 1,\n-\t\t   and its mode is QI.  Without the conversion,l (ARRAY\n-\t\t   +(INDEX-(unsigned char)1)) becomes ((ARRAY+(-(unsigned char)1))\n-\t\t   +INDEX), which becomes (ARRAY+255+INDEX).  Opps!)  */\n-\n-\t\tif (! integer_zerop (low_bound))\n+\t\ttree index1 = fold_convert_loc (loc, sizetype, treeop1);\n+\n+\t\t/* Optimize the special case of a zero lower bound.\n+\n+\t\t   We convert the lower bound to sizetype to avoid problems\n+\t\t   with constant folding.  E.g. suppose the lower bound is\n+\t\t   1 and its mode is QI.  Without the conversion\n+\t\t      (ARRAY + (INDEX - (unsigned char)1))\n+\t\t   becomes\n+\t\t      (ARRAY + (-(unsigned char)1) + INDEX)\n+\t\t   which becomes\n+\t\t      (ARRAY + 255 + INDEX).  Oops!  */\n+\t\tif (!integer_zerop (low_bound))\n \t\t  index1 = size_diffop_loc (loc, index1,\n-\t\t\t\t\tfold_convert_loc (loc, sizetype,\n-\t\t\t\t\t\t\t  low_bound));\n+\t\t\t\t\t    fold_convert_loc (loc, sizetype,\n+\t\t\t\t\t\t\t      low_bound));\n \n-\t\tif (0 > compare_tree_int (index1,\n-\t\t\t\t\t  TREE_STRING_LENGTH (init)))\n+\t\tif (compare_tree_int (index1, TREE_STRING_LENGTH (init)) < 0)\n \t\t  {\n \t\t    tree type = TREE_TYPE (TREE_TYPE (init));\n \t\t    enum machine_mode mode = TYPE_MODE (type);\n@@ -10187,7 +10186,7 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \t    || modifier == EXPAND_CONST_ADDRESS\n \t    || modifier == EXPAND_INITIALIZER)\n \t  return op0;\n-\t\n+\n \tif (target == 0)\n \t  target = gen_reg_rtx (tmode != VOIDmode ? tmode : mode);\n "}, {"sha": "8efd98e0020b7a183066d31bd7f7737fb0c1a0e0", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33be0bec7e32a96c2cc05f5afeed7febf9b48a9c/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33be0bec7e32a96c2cc05f5afeed7febf9b48a9c/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=33be0bec7e32a96c2cc05f5afeed7febf9b48a9c", "patch": "@@ -4947,7 +4947,7 @@ output_constructor_bitfield (oc_local_state *local, unsigned int bit_offset)\n   /* Bit position of this element from the start of a possibly ongoing\n      outer byte buffer.  */\n   HOST_WIDE_INT byte_relative_ebitpos\n-      = bit_offset + constructor_relative_ebitpos;\n+    = bit_offset + constructor_relative_ebitpos;\n \n   /* From the start of a possibly ongoing outer byte buffer, offsets to\n      the first bit of this element and to the first bit past the end of\n@@ -5131,7 +5131,6 @@ output_constructor (tree exp, unsigned HOST_WIDE_INT size,\n   local.total_bytes = 0;\n   local.byte_buffer_in_use = outer != NULL;\n   local.byte = outer ? outer->byte : 0;\n-\n   local.last_relative_index = -1;\n \n   gcc_assert (HOST_BITS_PER_WIDE_INT >= BITS_PER_UNIT);"}]}