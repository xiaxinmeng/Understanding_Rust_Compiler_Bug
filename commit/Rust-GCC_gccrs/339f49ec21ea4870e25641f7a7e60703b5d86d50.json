{"sha": "339f49ec21ea4870e25641f7a7e60703b5d86d50", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzM5ZjQ5ZWMyMWVhNDg3MGUyNTY0MWY3YTdlNjA3MDNiNWQ4NmQ1MA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2010-05-17T22:13:07Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2010-05-17T22:13:07Z"}, "message": "ipa-cp.c (ipcp_update_callgraph): Use ipa_is_param_used.\n\n\n\t* ipa-cp.c (ipcp_update_callgraph): Use ipa_is_param_used.\n\t(ipcp_estimate_growth): Likewise.\n\t(ipcp_const_param_count): Likewise.\n\t(ipcp_insert_stage): Likewise.\n\t* ipa-prop.c (visit_load_for_mod_analysis): New function.\n\t(visit_store_addr_for_mod_analysis): Set used flag.\n\t(ipa_detect_param_modifications): Set used flag for SSE params;\n\tupdate use of walk_stmt_load_store_addr_ops.\n\t(ipa_print_node_params): Print used flag.\n\t(ipa_write_node_info): Stream used flag.\n\t(ipa_read_node_info): Likewise.\n\t* ipa-prop.h (struct ipa_param_descriptor): Add used field.\n\t(ipa_is_param_used): New function.\n\t(lto_ipa_fixup_call_notes): Remove unused declaration.\n\nFrom-SVN: r159513", "tree": {"sha": "75a9b1ae8bf1604ec705f1892a04d451a36c520f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75a9b1ae8bf1604ec705f1892a04d451a36c520f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/339f49ec21ea4870e25641f7a7e60703b5d86d50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/339f49ec21ea4870e25641f7a7e60703b5d86d50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/339f49ec21ea4870e25641f7a7e60703b5d86d50", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/339f49ec21ea4870e25641f7a7e60703b5d86d50/comments", "author": null, "committer": null, "parents": [{"sha": "2433310da1b2b5f0d00dfff01731b3cbfe405960", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2433310da1b2b5f0d00dfff01731b3cbfe405960", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2433310da1b2b5f0d00dfff01731b3cbfe405960"}], "stats": {"total": 97, "additions": 78, "deletions": 19}, "files": [{"sha": "f14820169850090c3104a1836da53f2e5a273b67", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/339f49ec21ea4870e25641f7a7e60703b5d86d50/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/339f49ec21ea4870e25641f7a7e60703b5d86d50/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=339f49ec21ea4870e25641f7a7e60703b5d86d50", "patch": "@@ -1,3 +1,20 @@\n+2010-05-17  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa-cp.c (ipcp_update_callgraph): Use ipa_is_param_used.\n+\t(ipcp_estimate_growth): Likewise.\n+\t(ipcp_const_param_count): Likewise.\n+\t(ipcp_insert_stage): Likewise.\n+\t* ipa-prop.c (visit_load_for_mod_analysis): New function.\n+\t(visit_store_addr_for_mod_analysis): Set used flag.\n+\t(ipa_detect_param_modifications): Set used flag for SSE params;\n+\tupdate use of walk_stmt_load_store_addr_ops.\n+\t(ipa_print_node_params): Print used flag.\n+\t(ipa_write_node_info): Stream used flag.\n+\t(ipa_read_node_info): Likewise.\n+\t* ipa-prop.h (struct ipa_param_descriptor): Add used field.\n+\t(ipa_is_param_used): New function.\n+\t(lto_ipa_fixup_call_notes): Remove unused declaration.\n+\n 2010-05-17  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \tPR target/44074"}, {"sha": "f4aab5d2d8997fb093e9a95c7c2e419650f7a725", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/339f49ec21ea4870e25641f7a7e60703b5d86d50/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/339f49ec21ea4870e25641f7a7e60703b5d86d50/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=339f49ec21ea4870e25641f7a7e60703b5d86d50", "patch": "@@ -917,12 +917,9 @@ ipcp_update_callgraph (void)\n \tfor (i = 0; i < count; i++)\n \t  {\n \t    struct ipcp_lattice *lat = ipcp_get_lattice (info, i);\n-\t    tree parm_tree = ipa_get_param (info, i);\n \n \t    /* We can proactively remove obviously unused arguments.  */\n-\t    if (is_gimple_reg (parm_tree)\n-\t\t&& !gimple_default_def (DECL_STRUCT_FUNCTION (orig_node->decl),\n-\t\t\t\t\tparm_tree))\n+\t    if (!ipa_is_param_used (info, i))\n \t      {\n \t\tbitmap_set_bit (args_to_skip, i);\n \t\tcontinue;\n@@ -995,12 +992,9 @@ ipcp_estimate_growth (struct cgraph_node *node)\n   for (i = 0; i < count; i++)\n     {\n       struct ipcp_lattice *lat = ipcp_get_lattice (info, i);\n-      tree parm_tree = ipa_get_param (info, i);\n \n       /* We can proactively remove obviously unused arguments.  */\n-      if (is_gimple_reg (parm_tree)\n-\t  && !gimple_default_def (DECL_STRUCT_FUNCTION (node->decl),\n-\t\t\t\t  parm_tree))\n+      if (!ipa_is_param_used (info, i))\n \tremovable_args++;\n \n       if (lat->type == IPA_CONST_VALUE)\n@@ -1068,12 +1062,9 @@ ipcp_const_param_count (struct cgraph_node *node)\n   for (i = 0; i < count; i++)\n     {\n       struct ipcp_lattice *lat = ipcp_get_lattice (info, i);\n-      tree parm_tree = ipa_get_param (info, i);\n       if (ipcp_lat_is_insertable (lat)\n \t  /* Do not count obviously unused arguments.  */\n-\t  && (!is_gimple_reg (parm_tree)\n-\t      || gimple_default_def (DECL_STRUCT_FUNCTION (node->decl),\n-\t\t\t\t     parm_tree)))\n+          && ipa_is_param_used (info, i))\n \tconst_param++;\n     }\n   return const_param;\n@@ -1177,9 +1168,7 @@ ipcp_insert_stage (void)\n \t  parm_tree = ipa_get_param (info, i);\n \n \t  /* We can proactively remove obviously unused arguments.  */\n-\t  if (is_gimple_reg (parm_tree)\n-\t      && !gimple_default_def (DECL_STRUCT_FUNCTION (node->decl),\n-\t\t\t\t      parm_tree))\n+          if (!ipa_is_param_used (info, i))\n \t    {\n \t      bitmap_set_bit (args_to_skip, i);\n \t      continue;"}, {"sha": "113a0085410e3e3d570d0ed7512408b201137106", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 46, "deletions": 3, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/339f49ec21ea4870e25641f7a7e60703b5d86d50/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/339f49ec21ea4870e25641f7a7e60703b5d86d50/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=339f49ec21ea4870e25641f7a7e60703b5d86d50", "patch": "@@ -211,6 +211,29 @@ visit_store_addr_for_mod_analysis (gimple stmt ATTRIBUTE_UNUSED,\n       int index = ipa_get_param_decl_index (info, op);\n       gcc_assert (index >= 0);\n       info->params[index].modified = true;\n+      info->params[index].used = true;\n+    }\n+\n+  return false;\n+}\n+\n+/* Callback of walk_stmt_load_store_addr_ops for the visit_load.\n+   If OP is a parameter declaration, mark it as used in the info structure\n+   passed in DATA.  */\n+\n+static bool\n+visit_load_for_mod_analysis (gimple stmt ATTRIBUTE_UNUSED,\n+\t\t\t     tree op, void *data)\n+{\n+  struct ipa_node_params *info = (struct ipa_node_params *) data;\n+\n+  op = get_base_address (op);\n+  if (op\n+      && TREE_CODE (op) == PARM_DECL)\n+    {\n+      int index = ipa_get_param_decl_index (info, op);\n+      gcc_assert (index >= 0);\n+      info->params[index].used = true;\n     }\n \n   return false;\n@@ -229,14 +252,26 @@ ipa_detect_param_modifications (struct cgraph_node *node)\n   struct function *func;\n   gimple_stmt_iterator gsi;\n   struct ipa_node_params *info = IPA_NODE_REF (node);\n+  int i;\n \n   if (ipa_get_param_count (info) == 0 || info->modification_analysis_done)\n     return;\n \n+  for (i = 0; i < ipa_get_param_count (info); i++)\n+    {\n+      tree parm = ipa_get_param (info, i);\n+      /* For SSA regs see if parameter is used.  For non-SSA we compute\n+\t the flag during modification analysis.  */\n+      if (is_gimple_reg (parm)\n+\t  && gimple_default_def (DECL_STRUCT_FUNCTION (node->decl), parm))\n+\tinfo->params[i].used = true;\n+    }\n+\n   func = DECL_STRUCT_FUNCTION (decl);\n   FOR_EACH_BB_FN (bb, func)\n     for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n-      walk_stmt_load_store_addr_ops (gsi_stmt (gsi), info, NULL,\n+      walk_stmt_load_store_addr_ops (gsi_stmt (gsi), info,\n+\t\t\t\t     visit_load_for_mod_analysis,\n \t\t\t\t     visit_store_addr_for_mod_analysis,\n \t\t\t\t     visit_store_addr_for_mod_analysis);\n \n@@ -1747,6 +1782,8 @@ ipa_print_node_params (FILE * f, struct cgraph_node *node)\n                   : \"(unnamed)\"));\n       if (ipa_is_param_modified (info, i))\n \tfprintf (f, \" modified\");\n+      if (ipa_is_param_used (info, i))\n+\tfprintf (f, \" used\");\n       fprintf (f, \"\\n\");\n     }\n }\n@@ -2361,7 +2398,10 @@ ipa_write_node_info (struct output_block *ob, struct cgraph_node *node)\n   gcc_assert (!info->node_enqueued);\n   gcc_assert (!info->ipcp_orig_node);\n   for (j = 0; j < ipa_get_param_count (info); j++)\n-    bp_pack_value (bp, info->params[j].modified, 1);\n+    {\n+      bp_pack_value (bp, info->params[j].modified, 1);\n+      bp_pack_value (bp, info->params[j].used, 1);\n+    }\n   lto_output_bitpack (ob->main_stream, bp);\n   bitpack_delete (bp);\n   for (e = node->callees; e; e = e->next_callee)\n@@ -2400,7 +2440,10 @@ ipa_read_node_info (struct lto_input_block *ib, struct cgraph_node *node,\n     }\n   info->node_enqueued = false;\n   for (k = 0; k < ipa_get_param_count (info); k++)\n-    info->params[k].modified = bp_unpack_value (bp, 1);\n+    {\n+      info->params[k].modified = bp_unpack_value (bp, 1);\n+      info->params[k].used = bp_unpack_value (bp, 1);\n+    }\n   bitpack_delete (bp);\n   for (e = node->callees; e; e = e->next_callee)\n     {"}, {"sha": "c142c03db2859bfd4cd004a936e4272f19f7d458", "filename": "gcc/ipa-prop.h", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/339f49ec21ea4870e25641f7a7e60703b5d86d50/gcc%2Fipa-prop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/339f49ec21ea4870e25641f7a7e60703b5d86d50/gcc%2Fipa-prop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.h?ref=339f49ec21ea4870e25641f7a7e60703b5d86d50", "patch": "@@ -163,6 +163,8 @@ struct ipa_param_descriptor\n   tree decl;\n   /* Whether the value parameter has been modified within the function.  */\n   unsigned modified : 1;\n+  /* The parameter is used.  */\n+  unsigned used : 1;\n };\n \n /* ipa_node_params stores information related to formal parameters of functions\n@@ -237,6 +239,15 @@ ipa_is_param_modified (struct ipa_node_params *info, int i)\n   return info->params[i].modified;\n }\n \n+/* Return the used flag corresponding to the Ith formal parameter of\n+   the function associated with INFO.  */\n+\n+static inline bool\n+ipa_is_param_used (struct ipa_node_params *info, int i)\n+{\n+  return info->params[i].used;\n+}\n+\n /* Flag this node as having callers with variable number of arguments.  */\n \n static inline void\n@@ -489,7 +500,6 @@ void ipa_dump_param_adjustments (FILE *, ipa_parm_adjustment_vec, tree);\n void ipa_prop_write_jump_functions (cgraph_node_set set);\n void ipa_prop_read_jump_functions (void);\n void ipa_update_after_lto_read (void);\n-void lto_ipa_fixup_call_notes (struct cgraph_node *, gimple *);\n \n /* From tree-sra.c:  */\n bool build_ref_for_offset (tree *, tree, HOST_WIDE_INT, tree, bool);"}]}