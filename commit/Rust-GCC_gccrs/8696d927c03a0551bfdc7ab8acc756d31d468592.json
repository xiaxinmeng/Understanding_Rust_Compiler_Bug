{"sha": "8696d927c03a0551bfdc7ab8acc756d31d468592", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODY5NmQ5MjdjMDNhMDU1MWJmZGM3YWI4YWNjNzU2ZDMxZDQ2ODU5Mg==", "commit": {"author": {"name": "Mohan Embar", "email": "gnustuff@thisiscool.com", "date": "2004-02-03T16:07:24Z"}, "committer": {"name": "Mohan Embar", "email": "membar@gcc.gnu.org", "date": "2004-02-03T16:07:24Z"}, "message": "* gnu/java/nio/DatagramChannelImpl.java\n\t(inChannelOperation): New field.\n\t(isInChannelOperation): New accessor.\n\t(setInChannelOperation): New modifier.\n\t(receive): Use capacity() - position() of destination\n\tbuffer instead of remaining(). Set and reset our \"in\n\tchannel operation indicator\" before and after delegating\n\tthe receive to our datagram socket. Removed testing code.\n\tUpdate destination buffer's current position if it is\n\tbacked by a byte array (hasArray() is true).\n\t(send): Set and reset our \"in channel operation indicator\"\n\tbefore and after delegating the send to our datagram socket.\n\tRemoved testing code. Update source buffer's current position\n\tif it is backed by a byte array (hasArray() is true).\n\t* gnu/java/nio/SocketChannelImpl.java (read(ByteBuffer)):\n\tUse capacity() - position() of destination buffer instead\n\tof remaining().\n\t* java/net/DatagramSocket.java (receive): Don't throw an\n\tIllegalBlockingModeException if we have a non-blocking\n\tchannel which initiated this operation.\n\t(send): Likewise.\n\nFrom-SVN: r77173", "tree": {"sha": "0f48b5ad32382781358369642827a7d8b293ae29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f48b5ad32382781358369642827a7d8b293ae29"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8696d927c03a0551bfdc7ab8acc756d31d468592", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8696d927c03a0551bfdc7ab8acc756d31d468592", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8696d927c03a0551bfdc7ab8acc756d31d468592", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8696d927c03a0551bfdc7ab8acc756d31d468592/comments", "author": null, "committer": null, "parents": [{"sha": "9b66ebb1460daae2b046d62d50d7c3c835ba1c43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b66ebb1460daae2b046d62d50d7c3c835ba1c43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b66ebb1460daae2b046d62d50d7c3c835ba1c43"}], "stats": {"total": 90, "additions": 78, "deletions": 12}, "files": [{"sha": "3392b3b491381d2fed172c7d10534e3e7bb9af0c", "filename": "libjava/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8696d927c03a0551bfdc7ab8acc756d31d468592/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8696d927c03a0551bfdc7ab8acc756d31d468592/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=8696d927c03a0551bfdc7ab8acc756d31d468592", "patch": "@@ -1,3 +1,27 @@\n+2004-02-03  Mohan Embar  <gnustuff@thisiscool.com>\n+\n+\t* gnu/java/nio/DatagramChannelImpl.java\n+\t(inChannelOperation): New field.\n+\t(isInChannelOperation): New accessor.\n+\t(setInChannelOperation): New modifier.\n+\t(receive): Use capacity() - position() of destination\n+\tbuffer instead of remaining(). Set and reset our \"in\n+\tchannel operation indicator\" before and after delegating\n+\tthe receive to our datagram socket. Removed testing code.\n+\tUpdate destination buffer's current position if it is\n+\tbacked by a byte array (hasArray() is true).\n+\t(send): Set and reset our \"in channel operation indicator\"\n+\tbefore and after delegating the send to our datagram socket.\n+\tRemoved testing code. Update source buffer's current position\n+\tif it is backed by a byte array (hasArray() is true).\n+\t* gnu/java/nio/SocketChannelImpl.java (read(ByteBuffer)):\n+\tUse capacity() - position() of destination buffer instead\n+\tof remaining().\n+\t* java/net/DatagramSocket.java (receive): Don't throw an\n+\tIllegalBlockingModeException if we have a non-blocking\n+\tchannel which initiated this operation.\n+\t(send): Likewise.\n+\n 2004-02-01  Thomas Fitzsimmons  <fitzsim@redhat.com>\n \n \t* configure.in: Add pkgconfig check for glib and gthread."}, {"sha": "baeac19deb641fd169de2bb04ec4ca2ef7457c5f", "filename": "libjava/gnu/java/nio/DatagramChannelImpl.java", "status": "modified", "additions": 48, "deletions": 9, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8696d927c03a0551bfdc7ab8acc756d31d468592/libjava%2Fgnu%2Fjava%2Fnio%2FDatagramChannelImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8696d927c03a0551bfdc7ab8acc756d31d468592/libjava%2Fgnu%2Fjava%2Fnio%2FDatagramChannelImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FDatagramChannelImpl.java?ref=8696d927c03a0551bfdc7ab8acc756d31d468592", "patch": "@@ -57,6 +57,33 @@ public final class DatagramChannelImpl extends DatagramChannel\n {\n   private NIODatagramSocket socket;\n   \n+  /**\n+   * Indicates whether this channel initiated whatever operation\n+   * is being invoked on our datagram socket.\n+   */\n+  private boolean inChannelOperation;\n+\n+  /**\n+   * Indicates whether our datagram socket should ignore whether\n+   * we are set to non-blocking mode. Certain operations on our\n+   * socket throw an <code>IllegalBlockingModeException</code> if\n+   * we are in non-blocking mode, <i>except</i> if the operation\n+   * is initiated by us.\n+   */\n+  public final boolean isInChannelOperation()\n+  {\n+    return inChannelOperation;\n+  }\n+  \n+  /**\n+   * Sets our indicator of whether we are initiating an I/O operation\n+   * on our socket.\n+   */\n+  public final void setInChannelOperation(boolean b)\n+  {\n+    inChannelOperation = b;\n+  }\n+ \n   protected DatagramChannelImpl (SelectorProvider provider)\n     throws IOException\n   {\n@@ -178,7 +205,7 @@ public SocketAddress receive (ByteBuffer dst)\n     try\n       {\n         DatagramPacket packet;\n-        int len = dst.remaining();\n+        int len = dst.capacity() - dst.position();\n         \n         if (dst.hasArray())\n           {\n@@ -196,23 +223,23 @@ public SocketAddress receive (ByteBuffer dst)\n         try\n           {\n             begin();\n+            setInChannelOperation(true);\n             socket.receive (packet);\n             completed = true;\n           }\n         finally\n           {\n             end (completed);\n+            setInChannelOperation(false);\n           }\n \n         if (!dst.hasArray())\n           {\n             dst.put (packet.getData(), packet.getOffset(), packet.getLength());\n           }\n-\n-        // FIMXE: remove this testing code.\n-        for (int i = 0; i < packet.getLength(); i++)\n+        else\n           {\n-            System.out.println (\"Byte \" + i + \" has value \" + packet.getData() [packet.getOffset() + i]);\n+            dst.position (dst.position() + packet.getLength());\n           }\n \n         return packet.getSocketAddress();\n@@ -246,13 +273,25 @@ public int send (ByteBuffer src, SocketAddress target)\n \n     DatagramPacket packet = new DatagramPacket (buffer, offset, len, target);\n \n-    // FIMXE: remove this testing code.\n-    for (int i = 0; i < packet.getLength(); i++)\n+    boolean completed = false;\n+    try\n+      {\n+        begin();\n+        setInChannelOperation(true);\n+        socket.send(packet);\n+        completed = true;\n+      }\n+    finally\n+      {\n+        end (completed);\n+        setInChannelOperation(false);\n+      }\n+      \n+    if (src.hasArray())\n       {\n-        System.out.println (\"Byte \" + i + \" has value \" + packet.getData() [packet.getOffset() + i]);\n+\tsrc.position (src.position() + len);\n       }\n \n-    socket.send (packet);\n     return len;\n   }\n }"}, {"sha": "d490529f87396e443ffe0d1442a576318bfb72a4", "filename": "libjava/gnu/java/nio/SocketChannelImpl.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8696d927c03a0551bfdc7ab8acc756d31d468592/libjava%2Fgnu%2Fjava%2Fnio%2FSocketChannelImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8696d927c03a0551bfdc7ab8acc756d31d468592/libjava%2Fgnu%2Fjava%2Fnio%2FSocketChannelImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FSocketChannelImpl.java?ref=8696d927c03a0551bfdc7ab8acc756d31d468592", "patch": "@@ -226,7 +226,7 @@ public int read (ByteBuffer dst) throws IOException\n     int offset = 0;\n     InputStream input = socket.getInputStream();\n     int available = input.available();\n-    int len = dst.remaining();\n+    int len = dst.capacity() - dst.position();\n \t\n     if (available == 0)\n       return 0;"}, {"sha": "c5920a0942460e70f2c87b4f9f06b05c7f27d0ea", "filename": "libjava/java/net/DatagramSocket.java", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8696d927c03a0551bfdc7ab8acc756d31d468592/libjava%2Fjava%2Fnet%2FDatagramSocket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8696d927c03a0551bfdc7ab8acc756d31d468592/libjava%2Fjava%2Fnet%2FDatagramSocket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FDatagramSocket.java?ref=8696d927c03a0551bfdc7ab8acc756d31d468592", "patch": "@@ -39,6 +39,7 @@\n package java.net;\n \n import gnu.java.net.PlainDatagramSocketImpl;\n+import gnu.java.nio.DatagramChannelImpl;\n import java.io.IOException;\n import java.nio.channels.DatagramChannel;\n import java.nio.channels.IllegalBlockingModeException;\n@@ -565,7 +566,8 @@ public synchronized void receive(DatagramPacket p) throws IOException\n         (\"Socket connected to a multicast address my not receive\");\n \n     if (getChannel() != null\n-        && !getChannel().isBlocking ())\n+        && !getChannel().isBlocking ()\n+        && !((DatagramChannelImpl) getChannel()).isInChannelOperation())\n       throw new IllegalBlockingModeException ();\n \n     getImpl().receive(p);\n@@ -618,7 +620,8 @@ public void send(DatagramPacket p) throws IOException\n     // use getTimeToLive for TTL val.\n \n     if (getChannel() != null\n-        && !getChannel().isBlocking ())\n+        && !getChannel().isBlocking ()\n+        && !((DatagramChannelImpl) getChannel()).isInChannelOperation())\n       throw new IllegalBlockingModeException ();\n \n     getImpl().send(p);"}]}