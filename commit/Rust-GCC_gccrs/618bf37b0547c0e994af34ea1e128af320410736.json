{"sha": "618bf37b0547c0e994af34ea1e128af320410736", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjE4YmYzN2IwNTQ3YzBlOTk0YWYzNGVhMWUxMjhhZjMyMDQxMDczNg==", "commit": {"author": {"name": "Tania Bento", "email": "tbento@redhat.com", "date": "2007-04-05T00:15:16Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2007-04-05T00:15:16Z"}, "message": "DecimalFormatSymbols.java: Added the year 2007 to Copyright information and introduced new variable, currency.\n\n2007-04-04  Tania Bento  <tbento@redhat.com>\n\n\t* java/text/DecimalFormatSymbols.java: Added the year 2007 to\n\tCopyright information and introduced new variable, currency.\n\t(DecimalFormatSymbols(Locale)): Define currency and intlCurrencySymbol\n\tto \"XXX\", currencySymbol to \"?\" and localCurrency appropriately.\n\t(getCurrency): Fixed documentation and return the value of currency.\n\t(setCurrency): Fixed documentation and update the value of currency.\n\t(setInternationalCurrencySymbol): Fixed documentation and update the\n\tvalue of currency.\n\t* java/util/Currency.java: Introduced two new variables, properties\n\tand fractionDigits. In the static block, a properties object is\n\tcreated and the currency resource is loaded.\n\t(Currency(Locale)): fractionDigits is defined.\n\t(Currency(String)): New method.\n\t(getDefaultFractionDigits): Return the value of fractionDigits.\n\t(getInstance(String)): Check if String is equal to \"XXX\".\n\nFrom-SVN: r123512", "tree": {"sha": "b659460d69becef2f5b04af277ac9f35a6b13f7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b659460d69becef2f5b04af277ac9f35a6b13f7f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/618bf37b0547c0e994af34ea1e128af320410736", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/618bf37b0547c0e994af34ea1e128af320410736", "html_url": "https://github.com/Rust-GCC/gccrs/commit/618bf37b0547c0e994af34ea1e128af320410736", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/618bf37b0547c0e994af34ea1e128af320410736/comments", "author": {"login": "kie-tools-bot", "id": 57156955, "node_id": "MDQ6VXNlcjU3MTU2OTU1", "avatar_url": "https://avatars.githubusercontent.com/u/57156955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kie-tools-bot", "html_url": "https://github.com/kie-tools-bot", "followers_url": "https://api.github.com/users/kie-tools-bot/followers", "following_url": "https://api.github.com/users/kie-tools-bot/following{/other_user}", "gists_url": "https://api.github.com/users/kie-tools-bot/gists{/gist_id}", "starred_url": "https://api.github.com/users/kie-tools-bot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kie-tools-bot/subscriptions", "organizations_url": "https://api.github.com/users/kie-tools-bot/orgs", "repos_url": "https://api.github.com/users/kie-tools-bot/repos", "events_url": "https://api.github.com/users/kie-tools-bot/events{/privacy}", "received_events_url": "https://api.github.com/users/kie-tools-bot/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dabf62003ec4a2d31f5b276650b1554db840601a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dabf62003ec4a2d31f5b276650b1554db840601a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dabf62003ec4a2d31f5b276650b1554db840601a"}], "stats": {"total": 183, "additions": 162, "deletions": 21}, "files": [{"sha": "ec79a05660666e4a46a3e0a121192a701f1f15fd", "filename": "libjava/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/618bf37b0547c0e994af34ea1e128af320410736/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/618bf37b0547c0e994af34ea1e128af320410736/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=618bf37b0547c0e994af34ea1e128af320410736", "patch": "@@ -1,3 +1,21 @@\n+2007-04-04  Tania Bento  <tbento@redhat.com>\n+\n+\t* java/text/DecimalFormatSymbols.java: Added the year 2007 to\n+\tCopyright information and introduced new variable, currency.\n+\t(DecimalFormatSymbols(Locale)): Define currency and intlCurrencySymbol\n+\tto \"XXX\", currencySymbol to \"?\" and localCurrency appropriately.\n+\t(getCurrency): Fixed documentation and return the value of currency.\n+\t(setCurrency): Fixed documentation and update the value of currency.\n+\t(setInternationalCurrencySymbol): Fixed documentation and update the\n+\tvalue of currency.\n+\t* java/util/Currency.java: Introduced two new variables, properties\n+\tand fractionDigits. In the static block, a properties object is\n+\tcreated and the currency resource is loaded.\n+\t(Currency(Locale)): fractionDigits is defined.\n+\t(Currency(String)): New method.\n+\t(getDefaultFractionDigits): Return the value of fractionDigits.\n+\t(getInstance(String)): Check if String is equal to \"XXX\".\n+\n 2007-04-04  Kyle Galloway  <kgallowa@redhat.com>\n \n \t* classpath/gnu/classpath/jdwp/util/VariableTable.java: Change longs"}, {"sha": "253b14efe4fc3f24457907516f2075b51dc7f0ae", "filename": "libjava/classpath/lib/java/text/DecimalFormatSymbols.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/618bf37b0547c0e994af34ea1e128af320410736/libjava%2Fclasspath%2Flib%2Fjava%2Ftext%2FDecimalFormatSymbols.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/618bf37b0547c0e994af34ea1e128af320410736/libjava%2Fclasspath%2Flib%2Fjava%2Ftext%2FDecimalFormatSymbols.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fjava%2Ftext%2FDecimalFormatSymbols.class?ref=618bf37b0547c0e994af34ea1e128af320410736"}, {"sha": "b2ca13189c6b47bd2e8876fb74dbc6ad1be23b98", "filename": "libjava/classpath/lib/java/util/Currency.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/618bf37b0547c0e994af34ea1e128af320410736/libjava%2Fclasspath%2Flib%2Fjava%2Futil%2FCurrency.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/618bf37b0547c0e994af34ea1e128af320410736/libjava%2Fclasspath%2Flib%2Fjava%2Futil%2FCurrency.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fjava%2Futil%2FCurrency.class?ref=618bf37b0547c0e994af34ea1e128af320410736"}, {"sha": "d907871df15653b7735d63d75fb6cbce5c561146", "filename": "libjava/gnu/java/net/PlainSocketImpl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/618bf37b0547c0e994af34ea1e128af320410736/libjava%2Fgnu%2Fjava%2Fnet%2FPlainSocketImpl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/618bf37b0547c0e994af34ea1e128af320410736/libjava%2Fgnu%2Fjava%2Fnet%2FPlainSocketImpl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnet%2FPlainSocketImpl.h?ref=618bf37b0547c0e994af34ea1e128af320410736", "patch": "@@ -46,8 +46,8 @@ class gnu::java::net::PlainSocketImpl : public ::java::net::SocketImpl\n   ::java::lang::Object * getOption(jint);\n   void shutdownInput();\n   void shutdownOutput();\n-public: // actually protected\n   void create(jboolean);\n+public: // actually protected\n   void connect(::java::lang::String *, jint);\n   void connect(::java::net::InetAddress *, jint);\n   void connect(::java::net::SocketAddress *, jint);"}, {"sha": "1d12845fd65e53490738ddd9496df5e705746399", "filename": "libjava/gnu/java/util/jar/JarUtils.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/618bf37b0547c0e994af34ea1e128af320410736/libjava%2Fgnu%2Fjava%2Futil%2Fjar%2FJarUtils.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/618bf37b0547c0e994af34ea1e128af320410736/libjava%2Fgnu%2Fjava%2Futil%2Fjar%2FJarUtils.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Futil%2Fjar%2FJarUtils.h?ref=618bf37b0547c0e994af34ea1e128af320410736", "patch": "@@ -50,7 +50,6 @@ class gnu::java::util::jar::JarUtils : public ::java::lang::Object\n   static void writeVersionInfo(::java::util::jar::Attributes *, ::java::io::OutputStream *);\n   static void writeAttributeEntry(::java::util::Map$Entry *, ::java::io::OutputStream *);\n   static void writeHeader(::java::lang::String *, ::java::lang::String *, ::java::io::OutputStream *);\n-  static ::java::util::logging::Logger * log;\n public:\n   static ::java::lang::String * META_INF;\n   static ::java::lang::String * DSA_SUFFIX;"}, {"sha": "e81f694e196dab0eeda818c89f72a8ade4ef3922", "filename": "libjava/java/lang/VMCompiler.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/618bf37b0547c0e994af34ea1e128af320410736/libjava%2Fjava%2Flang%2FVMCompiler.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/618bf37b0547c0e994af34ea1e128af320410736/libjava%2Fjava%2Flang%2FVMCompiler.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FVMCompiler.h?ref=618bf37b0547c0e994af34ea1e128af320410736", "patch": "@@ -41,7 +41,6 @@ class java::lang::VMCompiler : public ::java::lang::Object\n private:\n   VMCompiler();\n   static ::java::lang::Class * loadSharedLibrary(::java::lang::ClassLoader *, ::java::lang::String *, ::java::security::ProtectionDomain *, ::java::lang::String *);\n-  static ::java::lang::String * bytesToString(JArray< jbyte > *);\n public:\n   static ::java::lang::Class * compileClass(::java::lang::ClassLoader *, ::java::lang::String *, JArray< jbyte > *, jint, jint, ::java::security::ProtectionDomain *);\n   static jboolean compileClass(::java::lang::Class *);"}, {"sha": "b38140c0620096858ac6e0164569fbac9316c0c5", "filename": "libjava/java/text/DecimalFormatSymbols.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/618bf37b0547c0e994af34ea1e128af320410736/libjava%2Fjava%2Ftext%2FDecimalFormatSymbols.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/618bf37b0547c0e994af34ea1e128af320410736/libjava%2Fjava%2Ftext%2FDecimalFormatSymbols.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Ftext%2FDecimalFormatSymbols.h?ref=618bf37b0547c0e994af34ea1e128af320410736", "patch": "@@ -83,6 +83,7 @@ class java::text::DecimalFormatSymbols : public ::java::lang::Object\n   jint serialVersionOnStream;\n   jchar zeroDigit;\n   ::java::util::Locale * locale;\n+  ::java::util::Currency * currency;\n   static const jlong serialVersionUID = 5772796243397350300LL;\n public:\n   static ::java::lang::Class class$;"}, {"sha": "110e45f1200df810aee83a5f41cd78bfd8a11507", "filename": "libjava/java/text/DecimalFormatSymbols.java", "status": "modified", "additions": 69, "deletions": 15, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/618bf37b0547c0e994af34ea1e128af320410736/libjava%2Fjava%2Ftext%2FDecimalFormatSymbols.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/618bf37b0547c0e994af34ea1e128af320410736/libjava%2Fjava%2Ftext%2FDecimalFormatSymbols.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Ftext%2FDecimalFormatSymbols.java?ref=618bf37b0547c0e994af34ea1e128af320410736", "patch": "@@ -1,5 +1,5 @@\n /* DecimalFormatSymbols.java -- Format symbols used by DecimalFormat\n-   Copyright (C) 1999, 2000, 2001, 2004 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001, 2004, 2007 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -121,8 +121,19 @@ private char safeGetChar(ResourceBundle bundle,\n   /**\n    * This method initializes a new instance of\n    * <code>DecimalFormatSymbols</code> for the specified locale.\n+   * <strong>Note</strong>: if the locale does not have an associated\n+   * <code>Currency</code> instance, the currency symbol and\n+   * international currency symbol will be set to the strings \"?\"\n+   * and \"XXX\" respectively.  This generally happens with language\n+   * locales (those with no specified country), such as\n+   * <code>Locale.ENGLISH</code>.  This constructor only obtains\n+   * instances using the runtime's resources; to also include\n+   * {@link java.text.spi.DecimalFormatSymbolsProvider} instances,\n+   * call {@link #getInstance(java.util.Locale)} instead.\n    *\n    * @param loc The local to load symbols for.\n+   * @throws NullPointerException if the locale is null.\n+   * @see #getInstance(java.util.Locale)\n    */\n   public DecimalFormatSymbols (Locale loc)\n   {\n@@ -136,14 +147,26 @@ public DecimalFormatSymbols (Locale loc)\n       {\n \tres = null;\n       }\n-    currencySymbol = safeGetString (res, \"currencySymbol\", \"$\");\n+    currency = Currency.getInstance(\"XXX\");\n+    currencySymbol = \"?\";\n+    intlCurrencySymbol = \"XXX\";\n+    try\n+      {\n+\tCurrency localeCurrency = Currency.getInstance(loc);\n+\tif (localeCurrency != null)\n+\t  {\n+\t    setCurrency(localeCurrency);\n+\t  }\n+      }\n+    catch(IllegalArgumentException exception)\n+      {\n+\t/* Locale has an invalid currency */\n+      }\n     decimalSeparator = safeGetChar (res, \"decimalSeparator\", '.');\n     digit = safeGetChar (res, \"digit\", '#');\n     exponential = safeGetChar (res, \"exponential\", 'E');\n     groupingSeparator = safeGetChar (res, \"groupingSeparator\", ',');\n     infinity = safeGetString (res, \"infinity\", \"\\u221e\");\n-    // FIXME: default?\n-    intlCurrencySymbol = safeGetString (res, \"intlCurrencySymbol\", \"$\");\n     try\n       {\n \tmonetarySeparator = safeGetChar (res, \"monetarySeparator\", '.');\n@@ -200,12 +223,13 @@ public boolean equals (Object obj)\n    * Returns the currency corresponding to the currency symbol stored\n    * in the instance of <code>DecimalFormatSymbols</code>.\n    *\n-   * @return A new instance of <code>Currency</code> if\n-   * the currency code matches a known one.\n+   * @return An instance of <code>Currency</code> which matches\n+   *         the currency used, or null if there is no corresponding\n+   *         instance.\n    */\n   public Currency getCurrency ()\n   {\n-    return Currency.getInstance (currencySymbol);\n+    return currency;\n   }\n \n   /**\n@@ -368,13 +392,16 @@ public int hashCode ()\n   }\n \n   /**\n-   * This method sets the currency to the specified value.\n+   * This method sets the currency symbol and ISO 4217 currency\n+   * code to the values obtained from the supplied currency.\n    *\n-   * @param currency The new currency\n+   * @param currency the currency from which to obtain the values.\n+   * @throws NullPointerException if the currency is null.\n    */\n   public void setCurrency (Currency currency)\n   {\n     setCurrencySymbol (currency.getSymbol());\n+    this.currency = currency;\n   }\n \n   /**\n@@ -435,14 +462,31 @@ public void setInfinity (String infinity)\n   }\n \n   /**\n-   * This method sets the international currency symbols to the\n-   * specified value. \n+   * This method sets the international currency symbol to the\n+   * specified value. If a valid <code>Currency</code> instance\n+   * exists for the international currency code, then this is\n+   * used for the currency attribute, and the currency symbol\n+   * is set to the corresponding value from this instance.\n+   * Otherwise, the currency attribute is set to null and the\n+   * symbol is left unmodified. \n    *\n-   * @param intlCurrencySymbol The new international currency symbol.\n+   * @param currencyCode The new international currency symbol.\n    */\n-  public void setInternationalCurrencySymbol (String currency)\n+  public void setInternationalCurrencySymbol (String currencyCode)\n   {\n-    intlCurrencySymbol = currency;\n+    intlCurrencySymbol = currencyCode;\n+    try\n+      {\n+\tcurrency = Currency.getInstance(currencyCode);\n+      }\n+    catch (IllegalArgumentException exception)\n+      {\n+\tcurrency = null;\n+      }\n+    if (currency != null)\n+      {\n+        setCurrencySymbol(currency.getSymbol(locale));\n+      }\n   }\n \n   /**\n@@ -593,7 +637,17 @@ public void setZeroDigit (char zeroDigit)\n    * @serial The locale of these currency symbols.\n    */\n   private Locale locale;\n- \n+\n+  /**\n+   * The currency used for the symbols in this instance.\n+   * This is stored temporarily for efficiency reasons,\n+   * as well as to ensure that the correct instance\n+   * is restored from the currency code.\n+   *\n+   * @serial Ignored.\n+   */\n+  private transient Currency currency;\n+\n   private static final long serialVersionUID = 5772796243397350300L;\n \n   private void readObject(ObjectInputStream stream)"}, {"sha": "ac8878c7e2b4e01384ce2b916d87579853cf1ef0", "filename": "libjava/java/util/Currency.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/618bf37b0547c0e994af34ea1e128af320410736/libjava%2Fjava%2Futil%2FCurrency.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/618bf37b0547c0e994af34ea1e128af320410736/libjava%2Fjava%2Futil%2FCurrency.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FCurrency.h?ref=618bf37b0547c0e994af34ea1e128af320410736", "patch": "@@ -13,6 +13,7 @@ class java::util::Currency : public ::java::lang::Object\n \n   Currency();\n   Currency(::java::util::Locale *);\n+  Currency(::java::lang::String *);\n public:\n   ::java::lang::String * getCurrencyCode();\n   jint getDefaultFractionDigits();\n@@ -28,7 +29,9 @@ class java::util::Currency : public ::java::lang::Object\n private:\n   ::java::util::Locale * __attribute__((aligned(__alignof__( ::java::lang::Object)))) locale;\n   ::java::util::ResourceBundle * res;\n+  static ::java::util::Properties * properties;\n   ::java::lang::String * currencyCode;\n+  jint fractionDigits;\n   static ::java::util::Map * cache;\n public:\n   static ::java::lang::Class class$;"}, {"sha": "66888fa666bf7007b8ff58e6a94c08295ece0159", "filename": "libjava/java/util/Currency.java", "status": "modified", "additions": 70, "deletions": 3, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/618bf37b0547c0e994af34ea1e128af320410736/libjava%2Fjava%2Futil%2FCurrency.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/618bf37b0547c0e994af34ea1e128af320410736/libjava%2Fjava%2Futil%2FCurrency.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FCurrency.java?ref=618bf37b0547c0e994af34ea1e128af320410736", "patch": "@@ -37,6 +37,7 @@\n \n package java.util;\n \n+import java.io.IOException;\n import java.io.ObjectStreamException;\n import java.io.Serializable;\n import java.text.NumberFormat;\n@@ -82,6 +83,16 @@ public final class Currency\n    */\n   private transient ResourceBundle res;\n \n+  /**\n+   * The set of properties which map a currency to\n+   * the currency information such as the ISO 4217\n+   * currency code and the number of decimal points.\n+   *\n+   * @see #getCurrencyCode()\n+   * @serial ignored.\n+   */\n+  private static transient Properties properties;\n+\n   /**\n    * The ISO 4217 currency code associated with this\n    * particular instance.\n@@ -91,6 +102,15 @@ public final class Currency\n    */\n   private String currencyCode;\n \n+  /**\n+   * The number of fraction digits associated with this\n+   * particular instance.\n+   *\n+   * @see #getDefaultFractionDigits()\n+   * @serial the number of fraction digits\n+   */\n+  private transient int fractionDigits;\n+\n   /**\n    * A cache of <code>Currency</code> instances to\n    * ensure the singleton nature of this class.  The key\n@@ -108,6 +128,17 @@ public final class Currency\n   static\n   {\n     cache = new HashMap();\n+    /* Create the properties object */\n+    properties = new Properties();\n+    /* Try and load the properties from our iso4217.properties resource */\n+    try \n+      {\n+        properties.load(Currency.class.getResourceAsStream(\"iso4217.properties\"));\n+      }\n+    catch (IOException exception)\n+      {\n+        System.out.println(\"Failed to load currency resource: \" + exception);\n+      }\n   }\n \n   /**\n@@ -130,9 +161,24 @@ private Currency ()\n    */\n   private Currency (Locale loc)\n   {\n+    String countryCode;\n+    String fractionDigitsKey;  \n+ \n+    /* Retrieve the country code from the locale */\n+    countryCode = loc.getCountry();\n+\n+    /* If there is no country code, return */\n+    if (countryCode.equals(\"\"))\n+      {\n+        throw new\n+\t  IllegalArgumentException(\"Invalid (empty) country code for locale:\"\n+\t\t\t  \t   + loc);\n+      }\n+\n     this.locale = loc;\n     this.res = ResourceBundle.getBundle (\"gnu.java.locale.LocaleInformation\", \n       locale, ClassLoader.getSystemClassLoader());\n+\n     /* Retrieve the ISO4217 currency code */\n     try\n       {\n@@ -142,6 +188,25 @@ private Currency (Locale loc)\n       {\n \tcurrencyCode = null;\n       }\n+\n+    /* Construct the key for the fraction digits */\n+    fractionDigitsKey = countryCode + \".fractionDigits\";\n+\n+    /* Retrieve the fraction digits */\n+    fractionDigits = Integer.parseInt(properties.getProperty(fractionDigitsKey));\n+  }\n+\n+  /**\n+   * Constructor for the \"XXX\" special case.  This allows\n+   * a Currency to be constructed from an assumed good\n+   * currency code.\n+   *\n+   * @param code the code to use.\n+   */  \n+  private Currency(String code)\n+  {\n+    currencyCode = code;\n+    fractionDigits = -1; /* Pseudo currency */\n   }\n \n   /**\n@@ -168,9 +233,7 @@ public String getCurrencyCode ()\n    */   \n   public int getDefaultFractionDigits ()\n   {\n-    NumberFormat currency = NumberFormat.getCurrencyInstance (locale);\n-    \n-    return currency.getMaximumFractionDigits();\n+    return fractionDigits;\n   }\n     \n   /**\n@@ -226,6 +289,10 @@ public static Currency getInstance (String currencyCode)\n   {\n     Locale[] allLocales = Locale.getAvailableLocales ();\n     \n+    /* Nasty special case to allow an erroneous currency... blame Sun */\n+    if (currencyCode.equals(\"XXX\"))\n+      return new Currency(\"XXX\");\n+\n     for (int i = 0;i < allLocales.length; i++)\n       {\n \tCurrency testCurrency = getInstance (allLocales[i]);"}]}