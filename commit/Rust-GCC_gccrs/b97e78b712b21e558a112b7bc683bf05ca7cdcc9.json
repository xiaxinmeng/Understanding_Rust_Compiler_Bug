{"sha": "b97e78b712b21e558a112b7bc683bf05ca7cdcc9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjk3ZTc4YjcxMmIyMWU1NThhMTEyYjdiYzY4M2JmMDVjYTdjZGNjOQ==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2015-08-10T16:48:26Z"}, "committer": {"name": "Thomas Schwinge", "email": "tschwinge@gcc.gnu.org", "date": "2015-08-10T16:48:26Z"}, "message": "[PR libgomp/65742, PR middle-end/66332] libgomp: Remove plugin for non-shared memory host execution\n\n\tgcc/\n\t* builtins.c (expand_builtin_acc_on_device) [ACCEL_COMPILER]: Emit\n\topen-coded sequence.\n\t* omp-low.c (oacc_process_reduction_data): Remove handline of\n\tGOMP_DEVICE_HOST_NONSHM.\n\tgcc/testsuite/\n\t* c-c++-common/goacc/acc_on_device-2.c: Remove XFAIL for C.\n\tinclude/\n\t* gomp-constants.c (GOMP_DEVICE_HOST_NONSHM): Remove.\n\tlibgomp/\n\t* libgomp-plugin.h (enum offload_target_type): Remove\n\tOFFLOAD_TARGET_TYPE_HOST_NONSHM.\n\t* openacc.f90 (openacc_kinds): Remove acc_device_host_nonshm.\n\t* openacc.h (enum acc_device_t): Likewise.\n\t* openacc_lib.h: Likewise.\n\t* oacc-init.c (name_of_acc_device_t): Don't handle it.\n\t(acc_on_device): Just use __builtin_acc_on_device.\n\t* testsuite/libgomp.oacc-c-c++-common/if-1.c: Don't forbid usage\n\tof acc_on_device builtin.\n\t* plugin/plugin-host.h: Remove file.\n\t* plugin/plugin-host.c: Likewise, but salvage some content into...\n\t* oacc-host.c: ... this file.\n\t* plugin/Makefrag.am: Don't build libgomp-plugin-host_nonshm.la.\n\t* plugin/configfrag.ac (offload_targets): Don't add host_nonshm.\n\t* Makefile.in: Regenerate.\n\t* configure: Likewise.\n\t* testsuite/lib/libgomp.exp\n\t(check_effective_target_openacc_host_nonshm_selected): Remove.\n\t* testsuite/libgomp.oacc-c++/c++.exp: Don't handle\n\tACC_DEVICE_TYPE=host_nonshm.\n\t* testsuite/libgomp.oacc-c/c.exp: Likewise.\n\t* testsuite/libgomp.oacc-fortran/fortran.exp: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/acc_on_device-1.c: Likewise.\n\t* testsuite/libgomp.oacc-fortran/acc_on_device-1-1.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/acc_on_device-1-2.f: Likewise.\n\t* testsuite/libgomp.oacc-fortran/acc_on_device-1-3.f: Likewise.\n\nFrom-SVN: r226763", "tree": {"sha": "5b850fb18324259a3fae0131aac6dfa6b6f028fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b850fb18324259a3fae0131aac6dfa6b6f028fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b97e78b712b21e558a112b7bc683bf05ca7cdcc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b97e78b712b21e558a112b7bc683bf05ca7cdcc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b97e78b712b21e558a112b7bc683bf05ca7cdcc9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b97e78b712b21e558a112b7bc683bf05ca7cdcc9/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "44a7d18d95a01b37da666a38188201805c6b578d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44a7d18d95a01b37da666a38188201805c6b578d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44a7d18d95a01b37da666a38188201805c6b578d"}], "stats": {"total": 739, "additions": 262, "deletions": 477}, "files": [{"sha": "efc177c2c7548f95f6b67ae3c96d84d4277c2a9a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b97e78b712b21e558a112b7bc683bf05ca7cdcc9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b97e78b712b21e558a112b7bc683bf05ca7cdcc9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b97e78b712b21e558a112b7bc683bf05ca7cdcc9", "patch": "@@ -1,5 +1,12 @@\n 2015-08-10  Thomas Schwinge  <thomas@codesourcery.com>\n \n+\tPR libgomp/65742\n+\tPR middle-end/66332\n+\t* builtins.c (expand_builtin_acc_on_device) [ACCEL_COMPILER]: Emit\n+\topen-coded sequence.\n+\t* omp-low.c (oacc_process_reduction_data): Remove handline of\n+\tGOMP_DEVICE_HOST_NONSHM.\n+\n \t* lto-streamer-in.c (lto_input_mode_table): Adjust to\n \tGET_MODE_INNER changes.\n "}, {"sha": "82229a549dc599b6d94fc773ee5f427bc9589945", "filename": "gcc/builtins.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b97e78b712b21e558a112b7bc683bf05ca7cdcc9/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b97e78b712b21e558a112b7bc683bf05ca7cdcc9/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=b97e78b712b21e558a112b7bc683bf05ca7cdcc9", "patch": "@@ -5879,10 +5879,8 @@ expand_stack_save (void)\n    acceleration device (ACCEL_COMPILER conditional).  */\n \n static rtx\n-expand_builtin_acc_on_device (tree exp ATTRIBUTE_UNUSED,\n-\t\t\t      rtx target ATTRIBUTE_UNUSED)\n+expand_builtin_acc_on_device (tree exp, rtx target)\n {\n-#ifdef ACCEL_COMPILER\n   if (!validate_arglist (exp, INTEGER_TYPE, VOID_TYPE))\n     return NULL_RTX;\n \n@@ -5891,8 +5889,13 @@ expand_builtin_acc_on_device (tree exp ATTRIBUTE_UNUSED,\n   /* Return (arg == v1 || arg == v2) ? 1 : 0.  */\n   machine_mode v_mode = TYPE_MODE (TREE_TYPE (arg));\n   rtx v = expand_normal (arg), v1, v2;\n+#ifdef ACCEL_COMPILER\n   v1 = GEN_INT (GOMP_DEVICE_NOT_HOST);\n   v2 = GEN_INT (ACCEL_COMPILER_acc_device);\n+#else\n+  v1 = GEN_INT (GOMP_DEVICE_NONE);\n+  v2 = GEN_INT (GOMP_DEVICE_HOST);\n+#endif\n   machine_mode target_mode = TYPE_MODE (integer_type_node);\n   if (!target || !register_operand (target, target_mode))\n     target = gen_reg_rtx (target_mode);\n@@ -5906,9 +5909,6 @@ expand_builtin_acc_on_device (tree exp ATTRIBUTE_UNUSED,\n   emit_label (done_label);\n \n   return target;\n-#else\n-  return NULL;\n-#endif\n }\n \n "}, {"sha": "c1dc9191c4283d4f8a61b9f13173dbd3c9cc363c", "filename": "gcc/omp-low.c", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b97e78b712b21e558a112b7bc683bf05ca7cdcc9/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b97e78b712b21e558a112b7bc683bf05ca7cdcc9/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=b97e78b712b21e558a112b7bc683bf05ca7cdcc9", "patch": "@@ -9975,24 +9975,6 @@ oacc_process_reduction_data (gimple_seq *body, gimple_seq *in_stmt_seqp,\n \t\t\t   in_stmt_seqp);\n \t  gimple_seq_add_stmt (in_stmt_seqp, gimple_build_label (exit));\n \n-\t  /* Also, set nthreads = 1 for ACC_DEVICE_TYPE=host_nonshm.  */\n-\t  gimplify_assign (acc_device_host,\n-\t\t\t   build_int_cst (integer_type_node,\n-\t\t\t\t\t  GOMP_DEVICE_HOST_NONSHM),\n-\t\t\t   in_stmt_seqp);\n-\n-\t  enter = create_artificial_label (UNKNOWN_LOCATION);\n-\t  exit = create_artificial_label (UNKNOWN_LOCATION);\n-\n-\t  stmt = gimple_build_cond (EQ_EXPR, acc_device, acc_device_host,\n-\t\t\t\t    enter, exit);\n-\t  gimple_seq_add_stmt (in_stmt_seqp, stmt);\n-\t  gimple_seq_add_stmt (in_stmt_seqp, gimple_build_label (enter));\n-\t  gimplify_assign (nthreads, fold_build1 (NOP_EXPR, sizetype,\n-\t\t\t\t\t\t  integer_one_node),\n-\t\t\t   in_stmt_seqp);\n-\t  gimple_seq_add_stmt (in_stmt_seqp, gimple_build_label (exit));\n-\n \t  oacc_initialize_reduction_data (clauses, nthreads, in_stmt_seqp,\n \t\t\t\t\t  ctx);\n \t  oacc_finalize_reduction_data (clauses, nthreads, out_stmt_seqp, ctx);"}, {"sha": "bf858e2d9d7498f8787e36dde44b47551fbf612c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b97e78b712b21e558a112b7bc683bf05ca7cdcc9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b97e78b712b21e558a112b7bc683bf05ca7cdcc9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b97e78b712b21e558a112b7bc683bf05ca7cdcc9", "patch": "@@ -1,3 +1,9 @@\n+2015-08-10  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR libgomp/65742\n+\tPR middle-end/66332\n+\t* c-c++-common/goacc/acc_on_device-2.c: Remove XFAIL for C.\n+\n 2015-08-10  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR fortran/64022"}, {"sha": "ef622a874d55e37bfb19f6458d3d8e4394021cc5", "filename": "gcc/testsuite/c-c++-common/goacc/acc_on_device-2.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b97e78b712b21e558a112b7bc683bf05ca7cdcc9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Facc_on_device-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b97e78b712b21e558a112b7bc683bf05ca7cdcc9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Facc_on_device-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Facc_on_device-2.c?ref=b97e78b712b21e558a112b7bc683bf05ca7cdcc9", "patch": "@@ -20,17 +20,9 @@ f (void)\n }\n \n /* With -fopenacc, we're expecting the builtin to be expanded, so no calls.\n-\n    TODO: in C++, even under extern \"C\", the use of enum for acc_device_t\n    perturbs expansion as a builtin, which expects an int parameter.  It's fine\n    when changing acc_device_t to plain int, but that's not what we're doing in\n    <openacc.h>.\n \n-   TODO: given that we can't expand acc_on_device in\n-   gcc/builtins.c:expand_builtin_acc_on_device for in the !ACCEL_COMPILER case\n-   (because at that point we don't know whether we're acc_device_host or\n-   acc_device_host_nonshm), we'll (erroneously) get a library call in the host\n-   code.\n-\n-   { dg-final { scan-rtl-dump-times \"\\\\\\(call \\[^\\\\n\\]* acc_on_device\" 0 \"expand\" { xfail { c || c++ } } } } */\n-\n+   { dg-final { scan-rtl-dump-times \"\\\\\\(call \\[^\\\\n\\]* acc_on_device\" 0 \"expand\" { xfail c++ } } } */"}, {"sha": "7e2e499187cd6c93474c25bed69af029d00faa1b", "filename": "include/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b97e78b712b21e558a112b7bc683bf05ca7cdcc9/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b97e78b712b21e558a112b7bc683bf05ca7cdcc9/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=b97e78b712b21e558a112b7bc683bf05ca7cdcc9", "patch": "@@ -1,3 +1,7 @@\n+2015-08-10  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* gomp-constants.c (GOMP_DEVICE_HOST_NONSHM): Remove.\n+\n 2015-05-22  Yunlian Jiang  <yunlian@google.com>\n \n \t* libiberty.h (asprintf): Don't declare if HAVE_DECL_ASPRINTF is"}, {"sha": "807e672741ad5cdcdec81e4c0d29d564ea3bcaaf", "filename": "include/gomp-constants.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b97e78b712b21e558a112b7bc683bf05ca7cdcc9/include%2Fgomp-constants.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b97e78b712b21e558a112b7bc683bf05ca7cdcc9/include%2Fgomp-constants.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fgomp-constants.h?ref=b97e78b712b21e558a112b7bc683bf05ca7cdcc9", "patch": "@@ -101,11 +101,11 @@ enum gomp_map_kind\n \n /* Device codes.  Keep in sync with\n    libgomp/{openacc.h,openacc.f90,openacc_lib.h}:acc_device_t as well as\n-   libgomp/libgomp_target.h.  */\n+   libgomp/libgomp-plugin.h.  */\n #define GOMP_DEVICE_NONE\t\t0\n #define GOMP_DEVICE_DEFAULT\t\t1\n #define GOMP_DEVICE_HOST\t\t2\n-#define GOMP_DEVICE_HOST_NONSHM\t\t3\n+/* #define GOMP_DEVICE_HOST_NONSHM\t3 removed.  */\n #define GOMP_DEVICE_NOT_HOST\t\t4\n #define GOMP_DEVICE_NVIDIA_PTX\t\t5\n #define GOMP_DEVICE_INTEL_MIC\t\t6"}, {"sha": "1d265b62e99abb01ab2987030bcbbbe52dfc7018", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b97e78b712b21e558a112b7bc683bf05ca7cdcc9/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b97e78b712b21e558a112b7bc683bf05ca7cdcc9/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=b97e78b712b21e558a112b7bc683bf05ca7cdcc9", "patch": "@@ -1,3 +1,32 @@\n+2015-08-10  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* libgomp-plugin.h (enum offload_target_type): Remove\n+\tOFFLOAD_TARGET_TYPE_HOST_NONSHM.\n+\t* openacc.f90 (openacc_kinds): Remove acc_device_host_nonshm.\n+\t* openacc.h (enum acc_device_t): Likewise.\n+\t* openacc_lib.h: Likewise.\n+\t* oacc-init.c (name_of_acc_device_t): Don't handle it.\n+\t(acc_on_device): Just use __builtin_acc_on_device.\n+\t* testsuite/libgomp.oacc-c-c++-common/if-1.c: Don't forbid usage\n+\tof acc_on_device builtin.\n+\t* plugin/plugin-host.h: Remove file.\n+\t* plugin/plugin-host.c: Likewise, but salvage some content into...\n+\t* oacc-host.c: ... this file.\n+\t* plugin/Makefrag.am: Don't build libgomp-plugin-host_nonshm.la.\n+\t* plugin/configfrag.ac (offload_targets): Don't add host_nonshm.\n+\t* Makefile.in: Regenerate.\n+\t* configure: Likewise.\n+\t* testsuite/lib/libgomp.exp\n+\t(check_effective_target_openacc_host_nonshm_selected): Remove.\n+\t* testsuite/libgomp.oacc-c++/c++.exp: Don't handle\n+\tACC_DEVICE_TYPE=host_nonshm.\n+\t* testsuite/libgomp.oacc-c/c.exp: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/fortran.exp: Likewise.\n+\t* testsuite/libgomp.oacc-c-c++-common/acc_on_device-1.c: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/acc_on_device-1-1.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/acc_on_device-1-2.f: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/acc_on_device-1-3.f: Likewise.\n+\n 2015-08-10  Thomas Schwinge  <thomas@codesourcery.com>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "79745ce93f2fd86170ce45534ee8fe8af7155b96", "filename": "libgomp/Makefile.in", "status": "modified", "additions": 2, "deletions": 31, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b97e78b712b21e558a112b7bc683bf05ca7cdcc9/libgomp%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b97e78b712b21e558a112b7bc683bf05ca7cdcc9/libgomp%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FMakefile.in?ref=b97e78b712b21e558a112b7bc683bf05ca7cdcc9", "patch": "@@ -146,15 +146,6 @@ am__installdirs = \"$(DESTDIR)$(toolexeclibdir)\" \"$(DESTDIR)$(infodir)\" \\\n \t\"$(DESTDIR)$(fincludedir)\" \"$(DESTDIR)$(libsubincludedir)\" \\\n \t\"$(DESTDIR)$(toolexeclibdir)\"\n LTLIBRARIES = $(toolexeclib_LTLIBRARIES)\n-libgomp_plugin_host_nonshm_la_DEPENDENCIES = libgomp.la\n-am_libgomp_plugin_host_nonshm_la_OBJECTS =  \\\n-\tlibgomp_plugin_host_nonshm_la-plugin-host.lo\n-libgomp_plugin_host_nonshm_la_OBJECTS =  \\\n-\t$(am_libgomp_plugin_host_nonshm_la_OBJECTS)\n-libgomp_plugin_host_nonshm_la_LINK = $(LIBTOOL) --tag=CC \\\n-\t$(libgomp_plugin_host_nonshm_la_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\\n-\t--mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \\\n-\t$(libgomp_plugin_host_nonshm_la_LDFLAGS) $(LDFLAGS) -o $@\n am__DEPENDENCIES_1 =\n @PLUGIN_NVPTX_TRUE@libgomp_plugin_nvptx_la_DEPENDENCIES = libgomp.la \\\n @PLUGIN_NVPTX_TRUE@\t$(am__DEPENDENCIES_1)\n@@ -196,8 +187,7 @@ FCLD = $(FC)\n FCLINK = $(LIBTOOL) --tag=FC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\\n \t--mode=link $(FCLD) $(AM_FCFLAGS) $(FCFLAGS) $(AM_LDFLAGS) \\\n \t$(LDFLAGS) -o $@\n-SOURCES = $(libgomp_plugin_host_nonshm_la_SOURCES) \\\n-\t$(libgomp_plugin_nvptx_la_SOURCES) $(libgomp_la_SOURCES)\n+SOURCES = $(libgomp_plugin_nvptx_la_SOURCES) $(libgomp_la_SOURCES)\n MULTISRCTOP = \n MULTIBUILDTOP = \n MULTIDIRS = \n@@ -401,8 +391,7 @@ libsubincludedir = $(libdir)/gcc/$(target_alias)/$(gcc_version)/include\n AM_CPPFLAGS = $(addprefix -I, $(search_path))\n AM_CFLAGS = $(XCFLAGS)\n AM_LDFLAGS = $(XLDFLAGS) $(SECTION_LDFLAGS) $(OPT_LDFLAGS)\n-toolexeclib_LTLIBRARIES = libgomp.la $(am__append_1) \\\n-\tlibgomp-plugin-host_nonshm.la\n+toolexeclib_LTLIBRARIES = libgomp.la $(am__append_1)\n nodist_toolexeclib_HEADERS = libgomp.spec\n \n # -Wc is only a libtool option.\n@@ -437,14 +426,6 @@ libgomp_la_SOURCES = alloc.c barrier.c critical.c env.c error.c iter.c \\\n @PLUGIN_NVPTX_TRUE@\t$(lt_host_flags) $(PLUGIN_NVPTX_LDFLAGS)\n @PLUGIN_NVPTX_TRUE@libgomp_plugin_nvptx_la_LIBADD = libgomp.la $(PLUGIN_NVPTX_LIBS)\n @PLUGIN_NVPTX_TRUE@libgomp_plugin_nvptx_la_LIBTOOLFLAGS = --tag=disable-static\n-libgomp_plugin_host_nonshm_version_info = -version-info $(libtool_VERSION)\n-libgomp_plugin_host_nonshm_la_SOURCES = plugin/plugin-host.c\n-libgomp_plugin_host_nonshm_la_CPPFLAGS = $(AM_CPPFLAGS) -DHOST_NONSHM_PLUGIN\n-libgomp_plugin_host_nonshm_la_LDFLAGS = \\\n-\t$(libgomp_plugin_host_nonshm_version_info) $(lt_host_flags)\n-\n-libgomp_plugin_host_nonshm_la_LIBADD = libgomp.la\n-libgomp_plugin_host_nonshm_la_LIBTOOLFLAGS = --tag=disable-static\n nodist_noinst_HEADERS = libgomp_f.h\n nodist_libsubinclude_HEADERS = omp.h openacc.h\n @USE_FORTRAN_TRUE@nodist_finclude_HEADERS = omp_lib.h omp_lib.f90 omp_lib.mod omp_lib_kinds.mod \\\n@@ -572,8 +553,6 @@ clean-toolexeclibLTLIBRARIES:\n \t  echo \"rm -f \\\"$${dir}/so_locations\\\"\"; \\\n \t  rm -f \"$${dir}/so_locations\"; \\\n \tdone\n-libgomp-plugin-host_nonshm.la: $(libgomp_plugin_host_nonshm_la_OBJECTS) $(libgomp_plugin_host_nonshm_la_DEPENDENCIES) $(EXTRA_libgomp_plugin_host_nonshm_la_DEPENDENCIES) \n-\t$(libgomp_plugin_host_nonshm_la_LINK) -rpath $(toolexeclibdir) $(libgomp_plugin_host_nonshm_la_OBJECTS) $(libgomp_plugin_host_nonshm_la_LIBADD) $(LIBS)\n libgomp-plugin-nvptx.la: $(libgomp_plugin_nvptx_la_OBJECTS) $(libgomp_plugin_nvptx_la_DEPENDENCIES) $(EXTRA_libgomp_plugin_nvptx_la_DEPENDENCIES) \n \t$(libgomp_plugin_nvptx_la_LINK) $(am_libgomp_plugin_nvptx_la_rpath) $(libgomp_plugin_nvptx_la_OBJECTS) $(libgomp_plugin_nvptx_la_LIBADD) $(LIBS)\n libgomp.la: $(libgomp_la_OBJECTS) $(libgomp_la_DEPENDENCIES) $(EXTRA_libgomp_la_DEPENDENCIES) \n@@ -596,7 +575,6 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/iter.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/iter_ull.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libgomp-plugin.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libgomp_plugin_host_nonshm_la-plugin-host.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libgomp_plugin_nvptx_la-plugin-nvptx.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/lock.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/loop.Plo@am__quote@\n@@ -644,13 +622,6 @@ distclean-compile:\n @AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n @am__fastdepCC_FALSE@\t$(LTCOMPILE) -c -o $@ $<\n \n-libgomp_plugin_host_nonshm_la-plugin-host.lo: plugin/plugin-host.c\n-@am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(libgomp_plugin_host_nonshm_la_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgomp_plugin_host_nonshm_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT libgomp_plugin_host_nonshm_la-plugin-host.lo -MD -MP -MF $(DEPDIR)/libgomp_plugin_host_nonshm_la-plugin-host.Tpo -c -o libgomp_plugin_host_nonshm_la-plugin-host.lo `test -f 'plugin/plugin-host.c' || echo '$(srcdir)/'`plugin/plugin-host.c\n-@am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/libgomp_plugin_host_nonshm_la-plugin-host.Tpo $(DEPDIR)/libgomp_plugin_host_nonshm_la-plugin-host.Plo\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='plugin/plugin-host.c' object='libgomp_plugin_host_nonshm_la-plugin-host.lo' libtool=yes @AMDEPBACKSLASH@\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n-@am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(libgomp_plugin_host_nonshm_la_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgomp_plugin_host_nonshm_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o libgomp_plugin_host_nonshm_la-plugin-host.lo `test -f 'plugin/plugin-host.c' || echo '$(srcdir)/'`plugin/plugin-host.c\n-\n libgomp_plugin_nvptx_la-plugin-nvptx.lo: plugin/plugin-nvptx.c\n @am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(libgomp_plugin_nvptx_la_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libgomp_plugin_nvptx_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT libgomp_plugin_nvptx_la-plugin-nvptx.lo -MD -MP -MF $(DEPDIR)/libgomp_plugin_nvptx_la-plugin-nvptx.Tpo -c -o libgomp_plugin_nvptx_la-plugin-nvptx.lo `test -f 'plugin/plugin-nvptx.c' || echo '$(srcdir)/'`plugin/plugin-nvptx.c\n @am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/libgomp_plugin_nvptx_la-plugin-nvptx.Tpo $(DEPDIR)/libgomp_plugin_nvptx_la-plugin-nvptx.Plo"}, {"sha": "c93e87762417cdfe1bf575a9d2da664c3c507e5b", "filename": "libgomp/configure", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b97e78b712b21e558a112b7bc683bf05ca7cdcc9/libgomp%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b97e78b712b21e558a112b7bc683bf05ca7cdcc9/libgomp%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfigure?ref=b97e78b712b21e558a112b7bc683bf05ca7cdcc9", "patch": "@@ -15170,7 +15170,6 @@ if test x\"$plugin_support\" = xyes; then\n \n $as_echo \"#define PLUGIN_SUPPORT 1\" >>confdefs.h\n \n-  offload_targets=host_nonshm\n elif test \"x${enable_offload_targets-no}\" != xno; then\n   as_fn_error \"Can't support offloading without support for plugins\" \"$LINENO\" 5\n fi"}, {"sha": "24fbb9455c934bdf8184d871322e1174fbe344b9", "filename": "libgomp/libgomp-plugin.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b97e78b712b21e558a112b7bc683bf05ca7cdcc9/libgomp%2Flibgomp-plugin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b97e78b712b21e558a112b7bc683bf05ca7cdcc9/libgomp%2Flibgomp-plugin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Flibgomp-plugin.h?ref=b97e78b712b21e558a112b7bc683bf05ca7cdcc9", "patch": "@@ -46,7 +46,7 @@ extern \"C\" {\n enum offload_target_type\n {\n   OFFLOAD_TARGET_TYPE_HOST = 2,\n-  OFFLOAD_TARGET_TYPE_HOST_NONSHM = 3,\n+  /* OFFLOAD_TARGET_TYPE_HOST_NONSHM = 3 removed.  */\n   OFFLOAD_TARGET_TYPE_NVIDIA_PTX = 5,\n   OFFLOAD_TARGET_TYPE_INTEL_MIC = 6\n };"}, {"sha": "17a5102042b1381b6b87210d5ff735ad68dc4fef", "filename": "libgomp/oacc-host.c", "status": "modified", "additions": 198, "deletions": 34, "changes": 232, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b97e78b712b21e558a112b7bc683bf05ca7cdcc9/libgomp%2Foacc-host.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b97e78b712b21e558a112b7bc683bf05ca7cdcc9/libgomp%2Foacc-host.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Foacc-host.c?ref=b97e78b712b21e558a112b7bc683bf05ca7cdcc9", "patch": "@@ -26,51 +26,215 @@\n    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    <http://www.gnu.org/licenses/>.  */\n \n-/* This shares much of the implementation of the plugin-host.c \"host_nonshm\"\n-   plugin.  */\n-#include \"plugin/plugin-host.c\"\n+#include \"libgomp.h\"\n+#include \"oacc-int.h\"\n+\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+\n+static struct gomp_device_descr host_dispatch;\n+\n+static const char *\n+host_get_name (void)\n+{\n+  return host_dispatch.name;\n+}\n+\n+static unsigned int\n+host_get_caps (void)\n+{\n+  return host_dispatch.capabilities;\n+}\n+\n+static int\n+host_get_type (void)\n+{\n+  return host_dispatch.type;\n+}\n+\n+static int\n+host_get_num_devices (void)\n+{\n+  return 1;\n+}\n+\n+static void\n+host_init_device (int n __attribute__ ((unused)))\n+{\n+}\n+\n+static void\n+host_fini_device (int n __attribute__ ((unused)))\n+{\n+}\n+\n+static int\n+host_load_image (int n __attribute__ ((unused)),\n+\t\t const void *t __attribute__ ((unused)),\n+\t\t struct addr_pair **r __attribute__ ((unused)))\n+{\n+  return 0;\n+}\n+\n+static void\n+host_unload_image (int n __attribute__ ((unused)),\n+\t\t   const void *t __attribute__ ((unused)))\n+{\n+}\n+\n+static void *\n+host_alloc (int n __attribute__ ((unused)), size_t s)\n+{\n+  return gomp_malloc (s);\n+}\n+\n+static void\n+host_free (int n __attribute__ ((unused)), void *p)\n+{\n+  free (p);\n+}\n+\n+static void *\n+host_dev2host (int n __attribute__ ((unused)),\n+\t       void *h __attribute__ ((unused)),\n+\t       const void *d __attribute__ ((unused)),\n+\t       size_t s __attribute__ ((unused)))\n+{\n+  return NULL;\n+}\n+\n+static void *\n+host_host2dev (int n __attribute__ ((unused)),\n+\t       void *d __attribute__ ((unused)),\n+\t       const void *h __attribute__ ((unused)),\n+\t       size_t s __attribute__ ((unused)))\n+{\n+  return NULL;\n+}\n+\n+static void\n+host_run (int n __attribute__ ((unused)), void *fn_ptr, void *vars)\n+{\n+  void (*fn)(void *) = (void (*)(void *)) fn_ptr;\n+\n+  fn (vars);\n+}\n+\n+static void\n+host_openacc_exec (void (*fn) (void *),\n+\t\t   size_t mapnum __attribute__ ((unused)),\n+\t\t   void **hostaddrs,\n+\t\t   void **devaddrs __attribute__ ((unused)),\n+\t\t   size_t *sizes __attribute__ ((unused)),\n+\t\t   unsigned short *kinds __attribute__ ((unused)),\n+\t\t   int num_gangs __attribute__ ((unused)),\n+\t\t   int num_workers __attribute__ ((unused)),\n+\t\t   int vector_length __attribute__ ((unused)),\n+\t\t   int async __attribute__ ((unused)),\n+\t\t   void *targ_mem_desc __attribute__ ((unused)))\n+{\n+  fn (hostaddrs);\n+}\n+\n+static void\n+host_openacc_register_async_cleanup (void *targ_mem_desc __attribute__ ((unused)))\n+{\n+}\n+\n+static int\n+host_openacc_async_test (int async __attribute__ ((unused)))\n+{\n+  return 1;\n+}\n+\n+static int\n+host_openacc_async_test_all (void)\n+{\n+  return 1;\n+}\n+\n+static void\n+host_openacc_async_wait (int async __attribute__ ((unused)))\n+{\n+}\n+\n+static void\n+host_openacc_async_wait_async (int async1 __attribute__ ((unused)),\n+\t\t\t       int async2 __attribute__ ((unused)))\n+{\n+}\n+\n+static void\n+host_openacc_async_wait_all (void)\n+{\n+}\n+\n+static void\n+host_openacc_async_wait_all_async (int async __attribute__ ((unused)))\n+{\n+}\n+\n+static void\n+host_openacc_async_set_async (int async __attribute__ ((unused)))\n+{\n+}\n+\n+static void *\n+host_openacc_create_thread_data (int ord __attribute__ ((unused)))\n+{\n+  return NULL;\n+}\n+\n+static void\n+host_openacc_destroy_thread_data (void *tls_data __attribute__ ((unused)))\n+{\n+}\n \n static struct gomp_device_descr host_dispatch =\n   {\n     .name = \"host\",\n-    .capabilities = (GOMP_OFFLOAD_CAP_OPENACC_200\n+    .capabilities = (GOMP_OFFLOAD_CAP_SHARED_MEM\n \t\t     | GOMP_OFFLOAD_CAP_NATIVE_EXEC\n-\t\t     | GOMP_OFFLOAD_CAP_SHARED_MEM),\n+\t\t     | GOMP_OFFLOAD_CAP_OPENACC_200),\n     .target_id = 0,\n     .type = OFFLOAD_TARGET_TYPE_HOST,\n \n-    .get_name_func = GOMP_OFFLOAD_get_name,\n-    .get_caps_func = GOMP_OFFLOAD_get_caps,\n-    .get_type_func = GOMP_OFFLOAD_get_type,\n-    .get_num_devices_func = GOMP_OFFLOAD_get_num_devices,\n-    .init_device_func = GOMP_OFFLOAD_init_device,\n-    .fini_device_func = GOMP_OFFLOAD_fini_device,\n-    .load_image_func = GOMP_OFFLOAD_load_image,\n-    .unload_image_func = GOMP_OFFLOAD_unload_image,\n-    .alloc_func = GOMP_OFFLOAD_alloc,\n-    .free_func = GOMP_OFFLOAD_free,\n-    .dev2host_func = GOMP_OFFLOAD_dev2host,\n-    .host2dev_func = GOMP_OFFLOAD_host2dev,\n-    .run_func = GOMP_OFFLOAD_run,\n-\n+    .get_name_func = host_get_name,\n+    .get_caps_func = host_get_caps,\n+    .get_type_func = host_get_type,\n+    .get_num_devices_func = host_get_num_devices,\n+    .init_device_func = host_init_device,\n+    .fini_device_func = host_fini_device,\n+    .load_image_func = host_load_image,\n+    .unload_image_func = host_unload_image,\n+    .alloc_func = host_alloc,\n+    .free_func = host_free,\n+    .dev2host_func = host_dev2host,\n+    .host2dev_func = host_host2dev,\n+    .run_func = host_run,\n+\n+    .mem_map = { NULL },\n+    /* .lock initilized in goacc_host_init.  */\n     .is_initialized = false,\n \n     .openacc = {\n-      .exec_func = GOMP_OFFLOAD_openacc_parallel,\n+      .data_environ = NULL,\n+\n+      .exec_func = host_openacc_exec,\n \n-      .register_async_cleanup_func\n-        = GOMP_OFFLOAD_openacc_register_async_cleanup,\n+      .register_async_cleanup_func = host_openacc_register_async_cleanup,\n \n-      .async_set_async_func = GOMP_OFFLOAD_openacc_async_set_async,\n-      .async_test_func = GOMP_OFFLOAD_openacc_async_test,\n-      .async_test_all_func = GOMP_OFFLOAD_openacc_async_test_all,\n-      .async_wait_func = GOMP_OFFLOAD_openacc_async_wait,\n-      .async_wait_async_func = GOMP_OFFLOAD_openacc_async_wait_async,\n-      .async_wait_all_func = GOMP_OFFLOAD_openacc_async_wait_all,\n-      .async_wait_all_async_func = GOMP_OFFLOAD_openacc_async_wait_all_async,\n+      .async_test_func = host_openacc_async_test,\n+      .async_test_all_func = host_openacc_async_test_all,\n+      .async_wait_func = host_openacc_async_wait,\n+      .async_wait_async_func = host_openacc_async_wait_async,\n+      .async_wait_all_func = host_openacc_async_wait_all,\n+      .async_wait_all_async_func = host_openacc_async_wait_all_async,\n+      .async_set_async_func = host_openacc_async_set_async,\n \n-      .create_thread_data_func = GOMP_OFFLOAD_openacc_create_thread_data,\n-      .destroy_thread_data_func = GOMP_OFFLOAD_openacc_destroy_thread_data,\n+      .create_thread_data_func = host_openacc_create_thread_data,\n+      .destroy_thread_data_func = host_openacc_destroy_thread_data,\n \n       .cuda = {\n \t.get_current_device_func = NULL,\n@@ -81,9 +245,9 @@ static struct gomp_device_descr host_dispatch =\n     }\n   };\n \n-/* Register this device type.  */\n-static __attribute__ ((constructor))\n-void goacc_host_init (void)\n+/* Initialize and register this device type.  */\n+static __attribute__ ((constructor)) void\n+goacc_host_init (void)\n {\n   gomp_mutex_init (&host_dispatch.lock);\n   goacc_register (&host_dispatch);"}, {"sha": "c12f8ad713732af53dfcc910f8a074c2229123c2", "filename": "libgomp/oacc-init.c", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b97e78b712b21e558a112b7bc683bf05ca7cdcc9/libgomp%2Foacc-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b97e78b712b21e558a112b7bc683bf05ca7cdcc9/libgomp%2Foacc-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Foacc-init.c?ref=b97e78b712b21e558a112b7bc683bf05ca7cdcc9", "patch": "@@ -29,7 +29,6 @@\n #include \"libgomp.h\"\n #include \"oacc-int.h\"\n #include \"openacc.h\"\n-#include \"plugin/plugin-host.h\"\n #include <assert.h>\n #include <stdlib.h>\n #include <strings.h>\n@@ -102,7 +101,6 @@ name_of_acc_device_t (enum acc_device_t type)\n     case acc_device_none: return \"none\";\n     case acc_device_default: return \"default\";\n     case acc_device_host: return \"host\";\n-    case acc_device_host_nonshm: return \"host_nonshm\";\n     case acc_device_not_host: return \"not_host\";\n     case acc_device_nvidia: return \"nvidia\";\n     default: gomp_fatal (\"unknown device type %u\", (unsigned) type);\n@@ -625,18 +623,8 @@ ialias (acc_set_device_num)\n int\n acc_on_device (acc_device_t dev)\n {\n-  struct goacc_thread *thr = goacc_thread ();\n-\n-  /* We only want to appear to be the \"host_nonshm\" plugin from \"offloaded\"\n-     code -- i.e. within a parallel region.  Test a flag set by the\n-     openacc_parallel hook of the host_nonshm plugin to determine that.  */\n-  if (acc_get_device_type () == acc_device_host_nonshm\n-      && thr && thr->target_tls\n-      && ((struct nonshm_thread *)thr->target_tls)->nonshm_exec)\n-    return dev == acc_device_host_nonshm || dev == acc_device_not_host;\n-\n-  /* For OpenACC, libgomp is only built for the host, so this is sufficient.  */\n-  return dev == acc_device_host || dev == acc_device_none;\n+  /* Just rely on the compiler builtin.  */\n+  return __builtin_acc_on_device (dev);\n }\n \n ialias (acc_on_device)"}, {"sha": "fbd63c69b7f5849020cf51f88f83e7b8ad27c87f", "filename": "libgomp/openacc.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b97e78b712b21e558a112b7bc683bf05ca7cdcc9/libgomp%2Fopenacc.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b97e78b712b21e558a112b7bc683bf05ca7cdcc9/libgomp%2Fopenacc.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fopenacc.f90?ref=b97e78b712b21e558a112b7bc683bf05ca7cdcc9", "patch": "@@ -43,7 +43,7 @@ module openacc_kinds\n   integer (acc_device_kind), parameter :: acc_device_none = 0\n   integer (acc_device_kind), parameter :: acc_device_default = 1\n   integer (acc_device_kind), parameter :: acc_device_host = 2\n-  integer (acc_device_kind), parameter :: acc_device_host_nonshm = 3\n+  ! integer (acc_device_kind), parameter :: acc_device_host_nonshm = 3 removed.\n   integer (acc_device_kind), parameter :: acc_device_not_host = 4\n   integer (acc_device_kind), parameter :: acc_device_nvidia = 5\n "}, {"sha": "fc353e1502cdaeab4f323e5f9419f75b83667a66", "filename": "libgomp/openacc.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b97e78b712b21e558a112b7bc683bf05ca7cdcc9/libgomp%2Fopenacc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b97e78b712b21e558a112b7bc683bf05ca7cdcc9/libgomp%2Fopenacc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fopenacc.h?ref=b97e78b712b21e558a112b7bc683bf05ca7cdcc9", "patch": "@@ -53,7 +53,7 @@ typedef enum acc_device_t\n     acc_device_none = 0,\n     acc_device_default = 1,\n     acc_device_host = 2,\n-    acc_device_host_nonshm = 3,\n+    /* acc_device_host_nonshm = 3 removed.  */\n     acc_device_not_host = 4,\n     acc_device_nvidia = 5,\n     _ACC_device_hwm"}, {"sha": "e9c503e14197b5da80295c4ab8518a27a5faf438", "filename": "libgomp/openacc_lib.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b97e78b712b21e558a112b7bc683bf05ca7cdcc9/libgomp%2Fopenacc_lib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b97e78b712b21e558a112b7bc683bf05ca7cdcc9/libgomp%2Fopenacc_lib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fopenacc_lib.h?ref=b97e78b712b21e558a112b7bc683bf05ca7cdcc9", "patch": "@@ -38,7 +38,8 @@\n       integer (acc_device_kind), parameter :: acc_device_none = 0\n       integer (acc_device_kind), parameter :: acc_device_default = 1\n       integer (acc_device_kind), parameter :: acc_device_host = 2\n-      integer (acc_device_kind), parameter :: acc_device_host_nonshm = 3\n+!     integer (acc_device_kind), parameter :: acc_device_host_nonshm = 3\n+!     removed.\n       integer (acc_device_kind), parameter :: acc_device_not_host = 4\n       integer (acc_device_kind), parameter :: acc_device_nvidia = 5\n "}, {"sha": "745becd52b7f27e2f66c71b1e46228e41333f499", "filename": "libgomp/plugin/Makefrag.am", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b97e78b712b21e558a112b7bc683bf05ca7cdcc9/libgomp%2Fplugin%2FMakefrag.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b97e78b712b21e558a112b7bc683bf05ca7cdcc9/libgomp%2Fplugin%2FMakefrag.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fplugin%2FMakefrag.am?ref=b97e78b712b21e558a112b7bc683bf05ca7cdcc9", "patch": "@@ -38,12 +38,3 @@ libgomp_plugin_nvptx_la_LDFLAGS += $(PLUGIN_NVPTX_LDFLAGS)\n libgomp_plugin_nvptx_la_LIBADD = libgomp.la $(PLUGIN_NVPTX_LIBS)\n libgomp_plugin_nvptx_la_LIBTOOLFLAGS = --tag=disable-static\n endif\n-\n-libgomp_plugin_host_nonshm_version_info = -version-info $(libtool_VERSION)\n-toolexeclib_LTLIBRARIES += libgomp-plugin-host_nonshm.la\n-libgomp_plugin_host_nonshm_la_SOURCES = plugin/plugin-host.c\n-libgomp_plugin_host_nonshm_la_CPPFLAGS = $(AM_CPPFLAGS) -DHOST_NONSHM_PLUGIN\n-libgomp_plugin_host_nonshm_la_LDFLAGS = \\\n-\t$(libgomp_plugin_host_nonshm_version_info) $(lt_host_flags)\n-libgomp_plugin_host_nonshm_la_LIBADD = libgomp.la\n-libgomp_plugin_host_nonshm_la_LIBTOOLFLAGS = --tag=disable-static"}, {"sha": "8c2a420d793338337c960edd27fc9d458edf7953", "filename": "libgomp/plugin/configfrag.ac", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b97e78b712b21e558a112b7bc683bf05ca7cdcc9/libgomp%2Fplugin%2Fconfigfrag.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b97e78b712b21e558a112b7bc683bf05ca7cdcc9/libgomp%2Fplugin%2Fconfigfrag.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fplugin%2Fconfigfrag.ac?ref=b97e78b712b21e558a112b7bc683bf05ca7cdcc9", "patch": "@@ -33,7 +33,6 @@ AC_CHECK_LIB(dl, dlsym, , [plugin_support=no])\n if test x\"$plugin_support\" = xyes; then\n   AC_DEFINE(PLUGIN_SUPPORT, 1,\n     [Define if all infrastructure, needed for plugins, is supported.])\n-  offload_targets=host_nonshm\n elif test \"x${enable_offload_targets-no}\" != xno; then\n   AC_MSG_ERROR([Can't support offloading without support for plugins])\n fi"}, {"sha": "da3c5f4cdb74b1243b4d35b3b5fc0fbfafc6a7e2", "filename": "libgomp/plugin/plugin-host.c", "status": "removed", "additions": 0, "deletions": 259, "changes": 259, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44a7d18d95a01b37da666a38188201805c6b578d/libgomp%2Fplugin%2Fplugin-host.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44a7d18d95a01b37da666a38188201805c6b578d/libgomp%2Fplugin%2Fplugin-host.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fplugin%2Fplugin-host.c?ref=44a7d18d95a01b37da666a38188201805c6b578d", "patch": "@@ -1,259 +0,0 @@\n-/* OpenACC Runtime Library: acc_device_host, acc_device_host_nonshm.\n-\n-   Copyright (C) 2013-2015 Free Software Foundation, Inc.\n-\n-   Contributed by Mentor Embedded.\n-\n-   This file is part of the GNU Offloading and Multi Processing Library\n-   (libgomp).\n-\n-   Libgomp is free software; you can redistribute it and/or modify it\n-   under the terms of the GNU General Public License as published by\n-   the Free Software Foundation; either version 3, or (at your option)\n-   any later version.\n-\n-   Libgomp is distributed in the hope that it will be useful, but WITHOUT ANY\n-   WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n-   FOR A PARTICULAR PURPOSE.  See the GNU General Public License for\n-   more details.\n-\n-   Under Section 7 of GPL version 3, you are granted additional\n-   permissions described in the GCC Runtime Library Exception, version\n-   3.1, as published by the Free Software Foundation.\n-\n-   You should have received a copy of the GNU General Public License and\n-   a copy of the GCC Runtime Library Exception along with this program;\n-   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-   <http://www.gnu.org/licenses/>.  */\n-\n-/* Simple implementation of support routines for a shared-memory\n-   acc_device_host, and a non-shared memory acc_device_host_nonshm, with the\n-   latter built as a plugin.  */\n-\n-#include \"openacc.h\"\n-#include \"config.h\"\n-#ifdef HOST_NONSHM_PLUGIN\n-#include \"libgomp-plugin.h\"\n-#include \"oacc-plugin.h\"\n-#else\n-#include \"libgomp.h\"\n-#include \"oacc-int.h\"\n-#endif\n-\n-#include <stdint.h>\n-#include <stdlib.h>\n-#include <string.h>\n-#include <stdio.h>\n-#include <stdbool.h>\n-\n-#ifdef HOST_NONSHM_PLUGIN\n-#define STATIC\n-#define GOMP(X) GOMP_PLUGIN_##X\n-#define SELF \"host_nonshm plugin: \"\n-#else\n-#define STATIC static\n-#define GOMP(X) gomp_##X\n-#define SELF \"host: \"\n-#endif\n-\n-#ifdef HOST_NONSHM_PLUGIN\n-#include \"plugin-host.h\"\n-#endif\n-\n-STATIC const char *\n-GOMP_OFFLOAD_get_name (void)\n-{\n-#ifdef HOST_NONSHM_PLUGIN\n-  return \"host_nonshm\";\n-#else\n-  return \"host\";\n-#endif\n-}\n-\n-STATIC unsigned int\n-GOMP_OFFLOAD_get_caps (void)\n-{\n-  unsigned int caps = (GOMP_OFFLOAD_CAP_OPENACC_200\n-\t\t       | GOMP_OFFLOAD_CAP_NATIVE_EXEC);\n-\n-#ifndef HOST_NONSHM_PLUGIN\n-  caps |= GOMP_OFFLOAD_CAP_SHARED_MEM;\n-#endif\n-\n-  return caps;\n-}\n-\n-STATIC int\n-GOMP_OFFLOAD_get_type (void)\n-{\n-#ifdef HOST_NONSHM_PLUGIN\n-  return OFFLOAD_TARGET_TYPE_HOST_NONSHM;\n-#else\n-  return OFFLOAD_TARGET_TYPE_HOST;\n-#endif\n-}\n-\n-STATIC int\n-GOMP_OFFLOAD_get_num_devices (void)\n-{\n-  return 1;\n-}\n-\n-STATIC void\n-GOMP_OFFLOAD_init_device (int n __attribute__ ((unused)))\n-{\n-}\n-\n-STATIC void\n-GOMP_OFFLOAD_fini_device (int n __attribute__ ((unused)))\n-{\n-}\n-\n-STATIC int\n-GOMP_OFFLOAD_load_image (int n __attribute__ ((unused)),\n-\t\t\t const void *t __attribute__ ((unused)),\n-\t\t\t struct addr_pair **r __attribute__ ((unused)))\n-{\n-  return 0;\n-}\n-\n-STATIC void\n-GOMP_OFFLOAD_unload_image (int n __attribute__ ((unused)),\n-\t\t\t   const void *t __attribute__ ((unused)))\n-{\n-}\n-\n-STATIC void *\n-GOMP_OFFLOAD_alloc (int n __attribute__ ((unused)), size_t s)\n-{\n-  return GOMP (malloc) (s);\n-}\n-\n-STATIC void\n-GOMP_OFFLOAD_free (int n __attribute__ ((unused)), void *p)\n-{\n-  free (p);\n-}\n-\n-STATIC void *\n-GOMP_OFFLOAD_host2dev (int n __attribute__ ((unused)), void *d, const void *h,\n-\t\t       size_t s)\n-{\n-#ifdef HOST_NONSHM_PLUGIN\n-  memcpy (d, h, s);\n-#endif\n-\n-  return 0;\n-}\n-\n-STATIC void *\n-GOMP_OFFLOAD_dev2host (int n __attribute__ ((unused)), void *h, const void *d,\n-\t\t       size_t s)\n-{\n-#ifdef HOST_NONSHM_PLUGIN\n-  memcpy (h, d, s);\n-#endif\n-\n-  return 0;\n-}\n-\n-STATIC void\n-GOMP_OFFLOAD_run (int n __attribute__ ((unused)), void *fn_ptr, void *vars)\n-{\n-  void (*fn)(void *) = (void (*)(void *)) fn_ptr;\n-\n-  fn (vars);\n-}\n-\n-STATIC void\n-GOMP_OFFLOAD_openacc_parallel (void (*fn) (void *),\n-\t\t\t       size_t mapnum __attribute__ ((unused)),\n-\t\t\t       void **hostaddrs __attribute__ ((unused)),\n-\t\t\t       void **devaddrs __attribute__ ((unused)),\n-\t\t\t       size_t *sizes __attribute__ ((unused)),\n-\t\t\t       unsigned short *kinds __attribute__ ((unused)),\n-\t\t\t       int num_gangs __attribute__ ((unused)),\n-\t\t\t       int num_workers __attribute__ ((unused)),\n-\t\t\t       int vector_length __attribute__ ((unused)),\n-\t\t\t       int async __attribute__ ((unused)),\n-\t\t\t       void *targ_mem_desc __attribute__ ((unused)))\n-{\n-#ifdef HOST_NONSHM_PLUGIN\n-  struct nonshm_thread *thd = GOMP_PLUGIN_acc_thread ();\n-  thd->nonshm_exec = true;\n-  fn (devaddrs);\n-  thd->nonshm_exec = false;\n-#else\n-  fn (hostaddrs);\n-#endif\n-}\n-\n-STATIC void\n-GOMP_OFFLOAD_openacc_register_async_cleanup (void *targ_mem_desc)\n-{\n-#ifdef HOST_NONSHM_PLUGIN\n-  /* \"Asynchronous\" launches are executed synchronously on the (non-SHM) host,\n-     so there's no point in delaying host-side cleanup -- just do it now.  */\n-  GOMP_PLUGIN_async_unmap_vars (targ_mem_desc);\n-#endif\n-}\n-\n-STATIC void\n-GOMP_OFFLOAD_openacc_async_set_async (int async __attribute__ ((unused)))\n-{\n-}\n-\n-STATIC int\n-GOMP_OFFLOAD_openacc_async_test (int async __attribute__ ((unused)))\n-{\n-  return 1;\n-}\n-\n-STATIC int\n-GOMP_OFFLOAD_openacc_async_test_all (void)\n-{\n-  return 1;\n-}\n-\n-STATIC void\n-GOMP_OFFLOAD_openacc_async_wait (int async __attribute__ ((unused)))\n-{\n-}\n-\n-STATIC void\n-GOMP_OFFLOAD_openacc_async_wait_all (void)\n-{\n-}\n-\n-STATIC void\n-GOMP_OFFLOAD_openacc_async_wait_async (int async1 __attribute__ ((unused)),\n-\t\t\t\t       int async2 __attribute__ ((unused)))\n-{\n-}\n-\n-STATIC void\n-GOMP_OFFLOAD_openacc_async_wait_all_async (int async __attribute__ ((unused)))\n-{\n-}\n-\n-STATIC void *\n-GOMP_OFFLOAD_openacc_create_thread_data (int ord\n-\t\t\t\t\t __attribute__ ((unused)))\n-{\n-#ifdef HOST_NONSHM_PLUGIN\n-  struct nonshm_thread *thd\n-    = GOMP_PLUGIN_malloc (sizeof (struct nonshm_thread));\n-  thd->nonshm_exec = false;\n-  return thd;\n-#else\n-  return NULL;\n-#endif\n-}\n-\n-STATIC void\n-GOMP_OFFLOAD_openacc_destroy_thread_data (void *tls_data)\n-{\n-#ifdef HOST_NONSHM_PLUGIN\n-  free (tls_data);\n-#endif\n-}"}, {"sha": "96955d19414f70acb8d7e0e09c75d5eba2480914", "filename": "libgomp/plugin/plugin-host.h", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44a7d18d95a01b37da666a38188201805c6b578d/libgomp%2Fplugin%2Fplugin-host.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44a7d18d95a01b37da666a38188201805c6b578d/libgomp%2Fplugin%2Fplugin-host.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fplugin%2Fplugin-host.h?ref=44a7d18d95a01b37da666a38188201805c6b578d", "patch": "@@ -1,37 +0,0 @@\n-/* OpenACC Runtime Library: acc_device_host, acc_device_host_nonshm.\n-\n-   Copyright (C) 2015 Free Software Foundation, Inc.\n-\n-   Contributed by Mentor Embedded.\n-\n-   This file is part of the GNU Offloading and Multi Processing Library\n-   (libgomp).\n-\n-   Libgomp is free software; you can redistribute it and/or modify it\n-   under the terms of the GNU General Public License as published by\n-   the Free Software Foundation; either version 3, or (at your option)\n-   any later version.\n-\n-   Libgomp is distributed in the hope that it will be useful, but WITHOUT ANY\n-   WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n-   FOR A PARTICULAR PURPOSE.  See the GNU General Public License for\n-   more details.\n-\n-   Under Section 7 of GPL version 3, you are granted additional\n-   permissions described in the GCC Runtime Library Exception, version\n-   3.1, as published by the Free Software Foundation.\n-\n-   You should have received a copy of the GNU General Public License and\n-   a copy of the GCC Runtime Library Exception along with this program;\n-   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-   <http://www.gnu.org/licenses/>.  */\n-\n-#ifndef PLUGIN_HOST_H\n-#define PLUGIN_HOST_H\n-\n-struct nonshm_thread\n-{\n-  bool nonshm_exec;\n-};\n-\n-#endif"}, {"sha": "f04b163fafcef3d0d14545f22bf4bd0ad3f30145", "filename": "libgomp/testsuite/lib/libgomp.exp", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b97e78b712b21e558a112b7bc683bf05ca7cdcc9/libgomp%2Ftestsuite%2Flib%2Flibgomp.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b97e78b712b21e558a112b7bc683bf05ca7cdcc9/libgomp%2Ftestsuite%2Flib%2Flibgomp.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flib%2Flibgomp.exp?ref=b97e78b712b21e558a112b7bc683bf05ca7cdcc9", "patch": "@@ -355,13 +355,3 @@ proc check_effective_target_openacc_host_selected { } {\n     }\n     return 0;\n }\n-\n-# Return 1 if the host_nonshm target is selected for offloaded\n-\n-proc check_effective_target_openacc_host_nonshm_selected { } {\n-    global offload_target_openacc\n-    if { $offload_target_openacc == \"host_nonshm\" } {\n-        return 1;\n-    }\n-    return 0;\n-}"}, {"sha": "88b0269e3f35c8cff2b91f5cadabd13e9888bf23", "filename": "libgomp/testsuite/libgomp.oacc-c++/c++.exp", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b97e78b712b21e558a112b7bc683bf05ca7cdcc9/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2B%2B%2Fc%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b97e78b712b21e558a112b7bc683bf05ca7cdcc9/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2B%2B%2Fc%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2B%2B%2Fc%2B%2B.exp?ref=b97e78b712b21e558a112b7bc683bf05ca7cdcc9", "patch": "@@ -81,9 +81,6 @@ if { $lang_test_file_found } {\n \t    host {\n \t\tset acc_mem_shared 1\n \t    }\n-\t    host_nonshm {\n-\t\tset acc_mem_shared 0\n-\t    }\n \t    nvidia {\n \t\tif { ![check_effective_target_openacc_nvidia_accel_present] } {\n \t\t    # Don't bother; execution testing is going to FAIL."}, {"sha": "8112745bcb86077c17e5259963aec6957d8ee479", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/acc_on_device-1.c", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b97e78b712b21e558a112b7bc683bf05ca7cdcc9/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_on_device-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b97e78b712b21e558a112b7bc683bf05ca7cdcc9/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_on_device-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_on_device-1.c?ref=b97e78b712b21e558a112b7bc683bf05ca7cdcc9", "patch": "@@ -15,8 +15,6 @@ main (int argc, char *argv[])\n       abort ();\n     if (!acc_on_device (acc_device_host))\n       abort ();\n-    if (acc_on_device (acc_device_host_nonshm))\n-      abort ();\n     if (acc_on_device (acc_device_not_host))\n       abort ();\n     if (acc_on_device (acc_device_nvidia))\n@@ -32,8 +30,6 @@ main (int argc, char *argv[])\n       abort ();\n     if (!acc_on_device (acc_device_host))\n       abort ();\n-    if (acc_on_device (acc_device_host_nonshm))\n-      abort ();\n     if (acc_on_device (acc_device_not_host))\n       abort ();\n     if (acc_on_device (acc_device_nvidia))\n@@ -51,13 +47,6 @@ main (int argc, char *argv[])\n       abort ();\n     if (acc_on_device (acc_device_host))\n       abort ();\n-#if ACC_DEVICE_TYPE_host_nonshm\n-    if (!acc_on_device (acc_device_host_nonshm))\n-      abort ();\n-#else\n-    if (acc_on_device (acc_device_host_nonshm))\n-      abort ();\n-#endif\n     if (!acc_on_device (acc_device_not_host))\n       abort ();\n #if ACC_DEVICE_TYPE_nvidia"}, {"sha": "6aa3bb7199ef70ec497b0846a6f33ea3d664dd6d", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/if-1.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b97e78b712b21e558a112b7bc683bf05ca7cdcc9/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fif-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b97e78b712b21e558a112b7bc683bf05ca7cdcc9/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fif-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fif-1.c?ref=b97e78b712b21e558a112b7bc683bf05ca7cdcc9", "patch": "@@ -1,5 +1,4 @@\n /* { dg-do run } */\n-/* { dg-additional-options \"-fno-builtin-acc_on_device\" } */\n \n #include <openacc.h>\n #include <stdlib.h>"}, {"sha": "5020e6a0691edcb8336c540415921ea8d5538980", "filename": "libgomp/testsuite/libgomp.oacc-c/c.exp", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b97e78b712b21e558a112b7bc683bf05ca7cdcc9/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2Fc.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b97e78b712b21e558a112b7bc683bf05ca7cdcc9/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2Fc.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2Fc.exp?ref=b97e78b712b21e558a112b7bc683bf05ca7cdcc9", "patch": "@@ -44,9 +44,6 @@ foreach offload_target_openacc $offload_targets_s_openacc {\n \thost {\n \t    set acc_mem_shared 1\n \t}\n-\thost_nonshm {\n-\t    set acc_mem_shared 0\n-\t}\n \tnvidia {\n \t    if { ![check_effective_target_openacc_nvidia_accel_present] } {\n \t\t# Don't bother; execution testing is going to FAIL."}, {"sha": "1a10f32ab3a46156afaf987e56af799b3cf01a75", "filename": "libgomp/testsuite/libgomp.oacc-fortran/acc_on_device-1-1.f90", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b97e78b712b21e558a112b7bc683bf05ca7cdcc9/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Facc_on_device-1-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b97e78b712b21e558a112b7bc683bf05ca7cdcc9/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Facc_on_device-1-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Facc_on_device-1-1.f90?ref=b97e78b712b21e558a112b7bc683bf05ca7cdcc9", "patch": "@@ -11,7 +11,6 @@\n \n if (.not. acc_on_device (acc_device_none)) call abort\n if (.not. acc_on_device (acc_device_host)) call abort\n-if (acc_on_device (acc_device_host_nonshm)) call abort\n if (acc_on_device (acc_device_not_host)) call abort\n if (acc_on_device (acc_device_nvidia)) call abort\n \n@@ -21,7 +20,6 @@\n !$acc parallel if(.false.)\n if (.not. acc_on_device (acc_device_none)) call abort\n if (.not. acc_on_device (acc_device_host)) call abort\n-if (acc_on_device (acc_device_host_nonshm)) call abort\n if (acc_on_device (acc_device_not_host)) call abort\n if (acc_on_device (acc_device_nvidia)) call abort\n !$acc end parallel\n@@ -34,11 +32,6 @@\n !$acc parallel\n if (acc_on_device (acc_device_none)) call abort\n if (acc_on_device (acc_device_host)) call abort\n-#if ACC_DEVICE_TYPE_host_nonshm\n-if (.not. acc_on_device (acc_device_host_nonshm)) call abort\n-#else\n-if (acc_on_device (acc_device_host_nonshm)) call abort\n-#endif\n if (.not. acc_on_device (acc_device_not_host)) call abort\n #if ACC_DEVICE_TYPE_nvidia\n if (.not. acc_on_device (acc_device_nvidia)) call abort"}, {"sha": "a19045b05638baef04de686f35aa875b19e61a27", "filename": "libgomp/testsuite/libgomp.oacc-fortran/acc_on_device-1-2.f", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b97e78b712b21e558a112b7bc683bf05ca7cdcc9/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Facc_on_device-1-2.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b97e78b712b21e558a112b7bc683bf05ca7cdcc9/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Facc_on_device-1-2.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Facc_on_device-1-2.f?ref=b97e78b712b21e558a112b7bc683bf05ca7cdcc9", "patch": "@@ -11,7 +11,6 @@\n \n       IF (.NOT. ACC_ON_DEVICE (ACC_DEVICE_NONE)) CALL ABORT\n       IF (.NOT. ACC_ON_DEVICE (ACC_DEVICE_HOST)) CALL ABORT\n-      IF (ACC_ON_DEVICE (ACC_DEVICE_HOST_NONSHM)) CALL ABORT\n       IF (ACC_ON_DEVICE (ACC_DEVICE_NOT_HOST)) CALL ABORT\n       IF (ACC_ON_DEVICE (ACC_DEVICE_NVIDIA)) CALL ABORT\n \n@@ -21,7 +20,6 @@\n !$ACC PARALLEL IF(.FALSE.)\n       IF (.NOT. ACC_ON_DEVICE (ACC_DEVICE_NONE)) CALL ABORT\n       IF (.NOT. ACC_ON_DEVICE (ACC_DEVICE_HOST)) CALL ABORT\n-      IF (ACC_ON_DEVICE (ACC_DEVICE_HOST_NONSHM)) CALL ABORT\n       IF (ACC_ON_DEVICE (ACC_DEVICE_NOT_HOST)) CALL ABORT\n       IF (ACC_ON_DEVICE (ACC_DEVICE_NVIDIA)) CALL ABORT\n !$ACC END PARALLEL\n@@ -34,11 +32,6 @@\n !$ACC PARALLEL\n       IF (ACC_ON_DEVICE (ACC_DEVICE_NONE)) CALL ABORT\n       IF (ACC_ON_DEVICE (ACC_DEVICE_HOST)) CALL ABORT\n-#if ACC_DEVICE_TYPE_host_nonshm\n-      IF (.NOT. ACC_ON_DEVICE (ACC_DEVICE_HOST_NONSHM)) CALL ABORT\n-#else\n-      IF (ACC_ON_DEVICE (ACC_DEVICE_HOST_NONSHM)) CALL ABORT\n-#endif\n       IF (.NOT. ACC_ON_DEVICE (ACC_DEVICE_NOT_HOST)) CALL ABORT\n #if ACC_DEVICE_TYPE_nvidia\n       IF (.NOT. ACC_ON_DEVICE (ACC_DEVICE_NVIDIA)) CALL ABORT"}, {"sha": "c3917760682eba478c69df0af4215afcd9d3b5cc", "filename": "libgomp/testsuite/libgomp.oacc-fortran/acc_on_device-1-3.f", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b97e78b712b21e558a112b7bc683bf05ca7cdcc9/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Facc_on_device-1-3.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b97e78b712b21e558a112b7bc683bf05ca7cdcc9/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Facc_on_device-1-3.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Facc_on_device-1-3.f?ref=b97e78b712b21e558a112b7bc683bf05ca7cdcc9", "patch": "@@ -11,7 +11,6 @@\n \n       IF (.NOT. ACC_ON_DEVICE (ACC_DEVICE_NONE)) CALL ABORT\n       IF (.NOT. ACC_ON_DEVICE (ACC_DEVICE_HOST)) CALL ABORT\n-      IF (ACC_ON_DEVICE (ACC_DEVICE_HOST_NONSHM)) CALL ABORT\n       IF (ACC_ON_DEVICE (ACC_DEVICE_NOT_HOST)) CALL ABORT\n       IF (ACC_ON_DEVICE (ACC_DEVICE_NVIDIA)) CALL ABORT\n \n@@ -21,7 +20,6 @@\n !$ACC PARALLEL IF(.FALSE.)\n       IF (.NOT. ACC_ON_DEVICE (ACC_DEVICE_NONE)) CALL ABORT\n       IF (.NOT. ACC_ON_DEVICE (ACC_DEVICE_HOST)) CALL ABORT\n-      IF (ACC_ON_DEVICE (ACC_DEVICE_HOST_NONSHM)) CALL ABORT\n       IF (ACC_ON_DEVICE (ACC_DEVICE_NOT_HOST)) CALL ABORT\n       IF (ACC_ON_DEVICE (ACC_DEVICE_NVIDIA)) CALL ABORT\n !$ACC END PARALLEL\n@@ -34,11 +32,6 @@\n !$ACC PARALLEL\n       IF (ACC_ON_DEVICE (ACC_DEVICE_NONE)) CALL ABORT\n       IF (ACC_ON_DEVICE (ACC_DEVICE_HOST)) CALL ABORT\n-#if ACC_DEVICE_TYPE_host_nonshm\n-      IF (.NOT. ACC_ON_DEVICE (ACC_DEVICE_HOST_NONSHM)) CALL ABORT\n-#else\n-      IF (ACC_ON_DEVICE (ACC_DEVICE_HOST_NONSHM)) CALL ABORT\n-#endif\n       IF (.NOT. ACC_ON_DEVICE (ACC_DEVICE_NOT_HOST)) CALL ABORT\n #if ACC_DEVICE_TYPE_nvidia\n       IF (.NOT. ACC_ON_DEVICE (ACC_DEVICE_NVIDIA)) CALL ABORT"}, {"sha": "2d6b647af227a9e84f791843284fb658a8a0a34b", "filename": "libgomp/testsuite/libgomp.oacc-fortran/fortran.exp", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b97e78b712b21e558a112b7bc683bf05ca7cdcc9/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Ffortran.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b97e78b712b21e558a112b7bc683bf05ca7cdcc9/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Ffortran.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Ffortran.exp?ref=b97e78b712b21e558a112b7bc683bf05ca7cdcc9", "patch": "@@ -73,9 +73,6 @@ if { $lang_test_file_found } {\n \t    host {\n \t\tset acc_mem_shared 1\n \t    }\n-\t    host_nonshm {\n-\t\tset acc_mem_shared 0\n-\t    }\n \t    nvidia {\n \t\tif { ![check_effective_target_openacc_nvidia_accel_present] } {\n \t\t    # Don't bother; execution testing is going to FAIL."}]}