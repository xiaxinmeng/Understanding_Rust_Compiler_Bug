{"sha": "5277d0b7109e67d3dd582f5b832723ed8e008cb1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTI3N2QwYjcxMDllNjdkM2RkNTgyZjViODMyNzIzZWQ4ZTAwOGNiMQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-05-15T09:44:53Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-05-15T09:44:53Z"}, "message": "[multiple changes]\n\n2012-05-15  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* g-calend.adb (Split_At_Locale): New routine.\n\t(Time_Of_At_Locale): New routine.\n\t* g-calend.ads (Split_At_Locale): New routine.\n\t(Time_Of_At_Locale): New routine.\n\n2012-05-15  Gary Dismukes  <dismukes@adacore.com>\n\n\t* a-except.ads: Minor reformatting.\n\n2012-05-15  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch5.adb (Analyze_Loop_Parameter_Specification): If the loop\n\tparameter specification is part of a quantified expression, and it\n\talready carries a type, do not repeat the analysis to preserve\n\ttype information: a range attribute reference may have been\n\trewritten as a range with static bounds, and its re-analysis may\n\ttype it as Integer by default, instead of the original index type.\n\n2012-05-15  Robert Dewar  <dewar@adacore.com>\n\n\t* s-osprim-mingw.adb: Minor reformatting.\n\nFrom-SVN: r187512", "tree": {"sha": "e07c7f61f1320e6afd3773609fb222507665b4f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e07c7f61f1320e6afd3773609fb222507665b4f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5277d0b7109e67d3dd582f5b832723ed8e008cb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5277d0b7109e67d3dd582f5b832723ed8e008cb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5277d0b7109e67d3dd582f5b832723ed8e008cb1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5277d0b7109e67d3dd582f5b832723ed8e008cb1/comments", "author": null, "committer": null, "parents": [{"sha": "e4f422b8afeaed39fbc0ad5f6735739489f57d10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4f422b8afeaed39fbc0ad5f6735739489f57d10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4f422b8afeaed39fbc0ad5f6735739489f57d10"}], "stats": {"total": 193, "additions": 183, "deletions": 10}, "files": [{"sha": "8f936b678f9b72d096e986d1ac26fd4788fc82db", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5277d0b7109e67d3dd582f5b832723ed8e008cb1/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5277d0b7109e67d3dd582f5b832723ed8e008cb1/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5277d0b7109e67d3dd582f5b832723ed8e008cb1", "patch": "@@ -1,3 +1,27 @@\n+2012-05-15  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* g-calend.adb (Split_At_Locale): New routine.\n+\t(Time_Of_At_Locale): New routine.\n+\t* g-calend.ads (Split_At_Locale): New routine.\n+\t(Time_Of_At_Locale): New routine.\n+\n+2012-05-15  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* a-except.ads: Minor reformatting.\n+\n+2012-05-15  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch5.adb (Analyze_Loop_Parameter_Specification): If the loop\n+\tparameter specification is part of a quantified expression, and it\n+\talready carries a type, do not repeat the analysis to preserve\n+\ttype information: a range attribute reference may have been\n+\trewritten as a range with static bounds, and its re-analysis may\n+\ttype it as Integer by default, instead of the original index type.\n+\n+2012-05-15  Robert Dewar  <dewar@adacore.com>\n+\n+\t* s-osprim-mingw.adb: Minor reformatting.\n+\n 2012-05-15  Arnaud Charlet  <charlet@adacore.com>\n \n \t* a-except.adb, a-except.ads (Reraise_Library_Exception_If_Any): New.\n@@ -132,8 +156,6 @@\n \t* a-calfor.adb (Split): Update the call to\n \tFormatting_Operations.Split.\n \t(Time_Of): Update the call to Formatting_Operations.Time_Of.\n-\t* impunit.adb: Include g-calloc to the list of non-RM defined\n-\tunits.\n \n 2012-05-15  Vincent Celier  <celier@adacore.com>\n "}, {"sha": "0561fb74a11cb6e3f06a21001cab1a3527047b94", "filename": "gcc/ada/a-except.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5277d0b7109e67d3dd582f5b832723ed8e008cb1/gcc%2Fada%2Fa-except.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5277d0b7109e67d3dd582f5b832723ed8e008cb1/gcc%2Fada%2Fa-except.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except.ads?ref=5277d0b7109e67d3dd582f5b832723ed8e008cb1", "patch": "@@ -35,7 +35,7 @@\n \n --  This version of Ada.Exceptions is a full Ada 95 version. It omits Ada 2005\n --  features such as the additional definitions of Exception_Name returning\n---  Wide_[Wide_]String. If differs from the 95 version only in that it is\n+--  Wide_[Wide_]String. It differs from the Ada 95 version only in that it is\n --  declared Preelaborate (see declaration below for why this is done).\n \n --  It is used for building the compiler and the basic tools, since these"}, {"sha": "3b731e1eecdc7bd7599bb611b202939391e9c653", "filename": "gcc/ada/g-calend.adb", "status": "modified", "additions": 106, "deletions": 2, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5277d0b7109e67d3dd582f5b832723ed8e008cb1/gcc%2Fada%2Fg-calend.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5277d0b7109e67d3dd582f5b832723ed8e008cb1/gcc%2Fada%2Fg-calend.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-calend.adb?ref=5277d0b7109e67d3dd582f5b832723ed8e008cb1", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 1999-2010, AdaCore                     --\n+--                     Copyright (C) 1999-2012, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -188,6 +188,61 @@ package body GNAT.Calendar is\n       Second     := Second_Number (Secs mod 60);\n    end Split;\n \n+   ---------------------\n+   -- Split_At_Locale --\n+   ---------------------\n+\n+   procedure Split_At_Locale\n+     (Date       : Time;\n+      Year       : out Year_Number;\n+      Month      : out Month_Number;\n+      Day        : out Day_Number;\n+      Hour       : out Hour_Number;\n+      Minute     : out Minute_Number;\n+      Second     : out Second_Number;\n+      Sub_Second : out Second_Duration)\n+   is\n+      procedure Ada_Calendar_Split\n+        (Date        : Time;\n+         Year        : out Year_Number;\n+         Month       : out Month_Number;\n+         Day         : out Day_Number;\n+         Day_Secs    : out Day_Duration;\n+         Hour        : out Integer;\n+         Minute      : out Integer;\n+         Second      : out Integer;\n+         Sub_Sec     : out Duration;\n+         Leap_Sec    : out Boolean;\n+         Use_TZ      : Boolean;\n+         Is_Historic : Boolean;\n+         Time_Zone   : Long_Integer);\n+      pragma Import (Ada, Ada_Calendar_Split, \"__gnat_split\");\n+\n+      Ds : Day_Duration;\n+      Le : Boolean;\n+\n+      pragma Unreferenced (Ds, Le);\n+\n+   begin\n+      --  Even though the input time zone is UTC (0), the flag Use_TZ will\n+      --  ensure that Split picks up the local time zone.\n+\n+      Ada_Calendar_Split\n+        (Date        => Date,\n+         Year        => Year,\n+         Month       => Month,\n+         Day         => Day,\n+         Day_Secs    => Ds,\n+         Hour        => Hour,\n+         Minute      => Minute,\n+         Second      => Second,\n+         Sub_Sec     => Sub_Second,\n+         Leap_Sec    => Le,\n+         Use_TZ      => False,\n+         Is_Historic => False,\n+         Time_Zone   => 0);\n+   end Split_At_Locale;\n+\n    ----------------\n    -- Sub_Second --\n    ----------------\n@@ -219,7 +274,6 @@ package body GNAT.Calendar is\n       Second     : Second_Number;\n       Sub_Second : Second_Duration := 0.0) return Time\n    is\n-\n       Day_Secs : constant Day_Duration :=\n                    Day_Duration (Hour   * 3_600) +\n                    Day_Duration (Minute *    60) +\n@@ -229,6 +283,56 @@ package body GNAT.Calendar is\n       return Time_Of (Year, Month, Day, Day_Secs);\n    end Time_Of;\n \n+   -----------------------\n+   -- Time_Of_At_Locale --\n+   -----------------------\n+\n+   function Time_Of_At_Locale\n+     (Year       : Year_Number;\n+      Month      : Month_Number;\n+      Day        : Day_Number;\n+      Hour       : Hour_Number;\n+      Minute     : Minute_Number;\n+      Second     : Second_Number;\n+      Sub_Second : Second_Duration := 0.0) return Time\n+   is\n+      function Ada_Calendar_Time_Of\n+        (Year         : Year_Number;\n+         Month        : Month_Number;\n+         Day          : Day_Number;\n+         Day_Secs     : Day_Duration;\n+         Hour         : Integer;\n+         Minute       : Integer;\n+         Second       : Integer;\n+         Sub_Sec      : Duration;\n+         Leap_Sec     : Boolean;\n+         Use_Day_Secs : Boolean;\n+         Use_TZ       : Boolean;\n+         Is_Historic  : Boolean;\n+         Time_Zone    : Long_Integer) return Time;\n+      pragma Import (Ada, Ada_Calendar_Time_Of, \"__gnat_time_of\");\n+\n+   begin\n+      --  Even though the input time zone is UTC (0), the flag Use_TZ will\n+      --  ensure that Split picks up the local time zone.\n+\n+      return\n+        Ada_Calendar_Time_Of\n+          (Year         => Year,\n+           Month        => Month,\n+           Day          => Day,\n+           Day_Secs     => 0.0,\n+           Hour         => Hour,\n+           Minute       => Minute,\n+           Second       => Second,\n+           Sub_Sec      => Sub_Second,\n+           Leap_Sec     => False,\n+           Use_Day_Secs => False,\n+           Use_TZ       => False,\n+           Is_Historic  => False,\n+           Time_Zone    => 0);\n+   end Time_Of_At_Locale;\n+\n    -----------------\n    -- To_Duration --\n    -----------------"}, {"sha": "b1c5a407155f4b70f61b94dc4154f2561144196e", "filename": "gcc/ada/g-calend.ads", "status": "modified", "additions": 36, "deletions": 3, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5277d0b7109e67d3dd582f5b832723ed8e008cb1/gcc%2Fada%2Fg-calend.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5277d0b7109e67d3dd582f5b832723ed8e008cb1/gcc%2Fada%2Fg-calend.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-calend.ads?ref=5277d0b7109e67d3dd582f5b832723ed8e008cb1", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1999-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1999-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -83,8 +83,25 @@ package GNAT.Calendar is\n       Minute     : out Minute_Number;\n       Second     : out Second_Number;\n       Sub_Second : out Second_Duration);\n-   --  Split the standard Ada.Calendar.Time data in date data (Year, Month,\n-   --  Day) and Time data (Hour, Minute, Second, Sub_Second)\n+   --  Split a standard Ada.Calendar.Time value in date data (Year, Month, Day)\n+   --  and Time data (Hour, Minute, Second, Sub_Second).\n+\n+   procedure Split_At_Locale\n+     (Date       : Ada.Calendar.Time;\n+      Year       : out Ada.Calendar.Year_Number;\n+      Month      : out Ada.Calendar.Month_Number;\n+      Day        : out Ada.Calendar.Day_Number;\n+      Hour       : out Hour_Number;\n+      Minute     : out Minute_Number;\n+      Second     : out Second_Number;\n+      Sub_Second : out Second_Duration);\n+   --  Split a standard Ada.Calendar.Time value in date data (Year, Month, Day)\n+   --  and Time data (Hour, Minute, Second, Sub_Second). This version of Split\n+   --  utilizes the time zone and DST bias of the locale (equivalent to Clock).\n+   --  Due to this simplified behavior, the implementation does not require\n+   --  expensive system calls on targets such as Windows.\n+   --  WARNING: Split_At_Locale is no longer aware of historic events and may\n+   --  produce inaccurate results over DST changes which occurred in the past.\n \n    function Time_Of\n      (Year       : Ada.Calendar.Year_Number;\n@@ -96,6 +113,22 @@ package GNAT.Calendar is\n       Sub_Second : Second_Duration := 0.0) return Ada.Calendar.Time;\n    --  Return an Ada.Calendar.Time data built from the date and time values\n \n+   function Time_Of_At_Locale\n+     (Year       : Ada.Calendar.Year_Number;\n+      Month      : Ada.Calendar.Month_Number;\n+      Day        : Ada.Calendar.Day_Number;\n+      Hour       : Hour_Number;\n+      Minute     : Minute_Number;\n+      Second     : Second_Number;\n+      Sub_Second : Second_Duration := 0.0) return Ada.Calendar.Time;\n+   --  Return an Ada.Calendar.Time data built from the date and time values.\n+   --  This version of Time_Of utilizes the time zone and DST bias of the\n+   --  locale (equivalent to Clock). Due to this simplified behavior, the\n+   --  implementation does not require expensive system calls on targets such\n+   --  as Windows.\n+   --  WARNING: Split_At_Locale is no longer aware of historic events and may\n+   --  produce inaccurate results over DST changes which occurred in the past.\n+\n    function Week_In_Year (Date : Ada.Calendar.Time) return Week_In_Year_Number;\n    --  Return the week number as defined in ISO 8601. A week always starts on\n    --  a Monday and the first week of a particular year is the one containing"}, {"sha": "99d0c27140b974d6e19316d90ed8ebd267e897a9", "filename": "gcc/ada/impunit.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5277d0b7109e67d3dd582f5b832723ed8e008cb1/gcc%2Fada%2Fimpunit.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5277d0b7109e67d3dd582f5b832723ed8e008cb1/gcc%2Fada%2Fimpunit.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fimpunit.adb?ref=5277d0b7109e67d3dd582f5b832723ed8e008cb1", "patch": "@@ -246,7 +246,6 @@ package body Impunit is\n     (\"g-byorma\", F),  -- GNAT.Byte_Order_Mark\n     (\"g-bytswa\", F),  -- GNAT.Byte_Swapping\n     (\"g-calend\", F),  -- GNAT.Calendar\n-    (\"g-calloc\", F),  -- GNAT.Calendar.Locale\n     (\"g-catiio\", F),  -- GNAT.Calendar.Time_IO\n     (\"g-casuti\", F),  -- GNAT.Case_Util\n     (\"g-cgi   \", F),  -- GNAT.CGI"}, {"sha": "931d012762302d9731aee2a66aa7ced1dd9b94f3", "filename": "gcc/ada/s-osprim-mingw.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5277d0b7109e67d3dd582f5b832723ed8e008cb1/gcc%2Fada%2Fs-osprim-mingw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5277d0b7109e67d3dd582f5b832723ed8e008cb1/gcc%2Fada%2Fs-osprim-mingw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osprim-mingw.adb?ref=5277d0b7109e67d3dd582f5b832723ed8e008cb1", "patch": "@@ -236,9 +236,11 @@ package body System.OS_Primitives is\n    function Monotonic_Clock return Duration is\n       Current_Ticks  : aliased LARGE_INTEGER;\n       Elap_Secs_Tick : Duration;\n+\n    begin\n       if QueryPerformanceCounter (Current_Ticks'Access) = Win32.FALSE then\n          return 0.0;\n+\n       else\n          Elap_Secs_Tick :=\n            Duration (Long_Long_Float (Current_Ticks - BMTA.all) /"}, {"sha": "ba94d77f1c4544c3afdac93c7b4f7ae3007cd5bf", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5277d0b7109e67d3dd582f5b832723ed8e008cb1/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5277d0b7109e67d3dd582f5b832723ed8e008cb1/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=5277d0b7109e67d3dd582f5b832723ed8e008cb1", "patch": "@@ -2267,7 +2267,20 @@ package body Sem_Ch5 is\n          --  free.\n \n          else\n-            Analyze (DS);\n+            --  A quantified expression that appears in a pre/post condition\n+            --  is pre-analyzed several times.  If the range is given by an\n+            --  attribute reference it is rewritten as a range, and this is\n+            --  done even with expansion disabled. If the type is already set\n+            --  do not reanalyze, because a range with static bounds may be\n+            --  typed Integer by default.\n+\n+            if Nkind (Parent (N)) = N_Quantified_Expression\n+              and then Present (Etype (DS))\n+            then\n+               null;\n+            else\n+               Analyze (DS);\n+            end if;\n          end if;\n       end if;\n "}]}