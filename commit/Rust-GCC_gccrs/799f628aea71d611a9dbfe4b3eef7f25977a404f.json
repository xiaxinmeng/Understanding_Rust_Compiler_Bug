{"sha": "799f628aea71d611a9dbfe4b3eef7f25977a404f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzk5ZjYyOGFlYTcxZDYxMWE5ZGJmZTRiM2VlZjdmMjU5NzdhNDA0Zg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2003-10-25T21:32:02Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2003-10-25T21:32:02Z"}, "message": "dwarf2out.c (dw_cfi_oprnd_struct): Offset is HOST_WIDE_INT.\n\n\t* dwarf2out.c (dw_cfi_oprnd_struct): Offset is HOST_WIDE_INT.\n\t(cfa_loc): Likewise.\n\t(reg_save, stack_adjust_offset, queue_reg_save): Replace long by\n\tHOST_WIDE_INT.\n\t(args_size, old_args_size): change type to HOST_WIDE_INT.\n\t(dwarf2out_def_cfa, dwarf2out_args_size,\n\tdwarf2out_reg_save, new_loc_descr): offset is HOST_WIDE_INT.\n\t(dw_val_struct): integers, unsigneds and offsets are HOST_WIDE_INT.\n\t(add_AT_int, add_AT_unsigned, att_AT_offset, AT_int, AT_unsigned,\n\tAT_offset): Use HOST_WIDE_INT.\n\t(based_loc_descr): offset is HOST_WIDE_INT.\n\t(add_data_member): Likewise.\n\t(add_const_value_attribute): Simplify.\n\nFrom-SVN: r72935", "tree": {"sha": "076d47899a2560e764f23ae68d005786cd6c7529", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/076d47899a2560e764f23ae68d005786cd6c7529"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/799f628aea71d611a9dbfe4b3eef7f25977a404f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/799f628aea71d611a9dbfe4b3eef7f25977a404f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/799f628aea71d611a9dbfe4b3eef7f25977a404f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/799f628aea71d611a9dbfe4b3eef7f25977a404f/comments", "author": null, "committer": null, "parents": [{"sha": "fe9f516f689acccf87b2bc633772e6a751f04ebe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe9f516f689acccf87b2bc633772e6a751f04ebe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe9f516f689acccf87b2bc633772e6a751f04ebe"}], "stats": {"total": 108, "additions": 58, "deletions": 50}, "files": [{"sha": "156fd0270e1974e471448f0e9e0fa16f5704b501", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/799f628aea71d611a9dbfe4b3eef7f25977a404f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/799f628aea71d611a9dbfe4b3eef7f25977a404f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=799f628aea71d611a9dbfe4b3eef7f25977a404f", "patch": "@@ -1,3 +1,19 @@\n+2003-10-25  Jan Hubicka  <jh@suse.cz>\n+\n+\t* dwarf2out.c (dw_cfi_oprnd_struct): Offset is HOST_WIDE_INT.\n+\t(cfa_loc): Likewise.\n+\t(reg_save, stack_adjust_offset, queue_reg_save): Replace long by\n+\tHOST_WIDE_INT.\n+\t(args_size, old_args_size): change type to HOST_WIDE_INT.\n+\t(dwarf2out_def_cfa, dwarf2out_args_size,\n+\tdwarf2out_reg_save, new_loc_descr): offset is HOST_WIDE_INT.\n+\t(dw_val_struct): integers, unsigneds and offsets are HOST_WIDE_INT.\n+\t(add_AT_int, add_AT_unsigned, att_AT_offset, AT_int, AT_unsigned,\n+\tAT_offset): Use HOST_WIDE_INT.\n+\t(based_loc_descr): offset is HOST_WIDE_INT.\n+\t(add_data_member): Likewise.\n+\t(add_const_value_attribute): Simplify.\n+\n 2003-10-25  Richard Henderson  <rth@redhat.com>\n \n         * config/i386/i386.c (ix86_eax_live_at_start_p): New."}, {"sha": "7688fa9089f082f53334a8291434e99272968111", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 42, "deletions": 50, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/799f628aea71d611a9dbfe4b3eef7f25977a404f/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/799f628aea71d611a9dbfe4b3eef7f25977a404f/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=799f628aea71d611a9dbfe4b3eef7f25977a404f", "patch": "@@ -204,7 +204,7 @@ enum dw_cfi_oprnd_type {\n typedef union dw_cfi_oprnd_struct GTY(())\n {\n   unsigned long GTY ((tag (\"dw_cfi_oprnd_reg_num\"))) dw_cfi_reg_num;\n-  long int GTY ((tag (\"dw_cfi_oprnd_offset\"))) dw_cfi_offset;\n+  HOST_WIDE_INT GTY ((tag (\"dw_cfi_oprnd_offset\"))) dw_cfi_offset;\n   const char * GTY ((tag (\"dw_cfi_oprnd_addr\"))) dw_cfi_addr;\n   struct dw_loc_descr_struct * GTY ((tag (\"dw_cfi_oprnd_loc\"))) dw_cfi_loc;\n }\n@@ -229,8 +229,8 @@ dw_cfi_node;\n typedef struct cfa_loc GTY(())\n {\n   unsigned long reg;\n-  long offset;\n-  long base_offset;\n+  HOST_WIDE_INT offset;\n+  HOST_WIDE_INT base_offset;\n   int indirect;            /* 1 if CFA is accessed via a dereference.  */\n } dw_cfa_location;\n \n@@ -350,13 +350,13 @@ static void add_cfi (dw_cfi_ref *, dw_cfi_ref);\n static void add_fde_cfi (const char *, dw_cfi_ref);\n static void lookup_cfa_1 (dw_cfi_ref, dw_cfa_location *);\n static void lookup_cfa (dw_cfa_location *);\n-static void reg_save (const char *, unsigned, unsigned, long);\n+static void reg_save (const char *, unsigned, unsigned, HOST_WIDE_INT);\n static void initial_return_save (rtx);\n-static long stack_adjust_offset (rtx);\n+static HOST_WIDE_INT stack_adjust_offset (rtx);\n static void output_cfi (dw_cfi_ref, dw_fde_ref, int);\n static void output_call_frame_info (int);\n static void dwarf2out_stack_adjust (rtx);\n-static void queue_reg_save (const char *, rtx, long);\n+static void queue_reg_save (const char *, rtx, HOST_WIDE_INT);\n static void flush_queued_reg_saves (void);\n static bool clobbers_queued_reg_save (rtx);\n static void dwarf2out_frame_debug_expr (rtx, const char *);\n@@ -705,17 +705,17 @@ static dw_cfa_location cfa;\n static dw_cfa_location cfa_store;\n \n /* The running total of the size of arguments pushed onto the stack.  */\n-static long args_size;\n+static HOST_WIDE_INT args_size;\n \n /* The last args_size we actually output.  */\n-static long old_args_size;\n+static HOST_WIDE_INT old_args_size;\n \n /* Entry point to update the canonical frame address (CFA).\n    LABEL is passed to add_fde_cfi.  The value of CFA is now to be\n    calculated from REG+OFFSET.  */\n \n void\n-dwarf2out_def_cfa (const char *label, unsigned int reg, long int offset)\n+dwarf2out_def_cfa (const char *label, unsigned int reg, HOST_WIDE_INT offset)\n {\n   dw_cfa_location loc;\n   loc.indirect = 0;\n@@ -802,7 +802,7 @@ def_cfa_1 (const char *label, dw_cfa_location *loc_p)\n    otherwise it is saved in SREG.  */\n \n static void\n-reg_save (const char *label, unsigned int reg, unsigned int sreg, long int offset)\n+reg_save (const char *label, unsigned int reg, unsigned int sreg, HOST_WIDE_INT offset)\n {\n   dw_cfi_ref cfi = new_cfi ();\n \n@@ -825,7 +825,7 @@ reg_save (const char *label, unsigned int reg, unsigned int sreg, long int offse\n \t   DWARF_CIE_DATA_ALIGNMENT, there is either a bug in the\n \t   definition of DWARF_CIE_DATA_ALIGNMENT, or a bug in the machine\n \t   description.  */\n-\tlong check_offset = offset / DWARF_CIE_DATA_ALIGNMENT;\n+\tHOST_WIDE_INT check_offset = offset / DWARF_CIE_DATA_ALIGNMENT;\n \n \tif (check_offset * DWARF_CIE_DATA_ALIGNMENT != offset)\n \t  abort ();\n@@ -869,7 +869,7 @@ dwarf2out_window_save (const char *label)\n    pushed onto the stack.  */\n \n void\n-dwarf2out_args_size (const char *label, long int size)\n+dwarf2out_args_size (const char *label, HOST_WIDE_INT size)\n {\n   dw_cfi_ref cfi;\n \n@@ -888,7 +888,7 @@ dwarf2out_args_size (const char *label, long int size)\n    number.  LABEL and OFFSET are passed to reg_save.  */\n \n void\n-dwarf2out_reg_save (const char *label, unsigned int reg, long int offset)\n+dwarf2out_reg_save (const char *label, unsigned int reg, HOST_WIDE_INT offset)\n {\n   reg_save (label, DWARF_FRAME_REGNUM (reg), -1, offset);\n }\n@@ -897,7 +897,7 @@ dwarf2out_reg_save (const char *label, unsigned int reg, long int offset)\n    LABEL and OFFSET are passed to reg_save.  */\n \n void\n-dwarf2out_return_save (const char *label, long int offset)\n+dwarf2out_return_save (const char *label, HOST_WIDE_INT offset)\n {\n   reg_save (label, DWARF_FRAME_RETURN_COLUMN, -1, offset);\n }\n@@ -975,7 +975,7 @@ initial_return_save (rtx rtl)\n /* Given a SET, calculate the amount of stack adjustment it\n    contains.  */\n \n-static long\n+static HOST_WIDE_INT\n stack_adjust_offset (rtx pattern)\n {\n   rtx src = SET_SRC (pattern);\n@@ -1131,7 +1131,7 @@ struct queued_reg_save GTY(())\n {\n   struct queued_reg_save *next;\n   rtx reg;\n-  long cfa_offset;\n+  HOST_WIDE_INT cfa_offset;\n };\n \n static GTY(()) struct queued_reg_save *queued_reg_saves;\n@@ -1140,7 +1140,7 @@ static GTY(()) struct queued_reg_save *queued_reg_saves;\n static const char *last_reg_save_label;\n \n static void\n-queue_reg_save (const char *label, rtx reg, long int offset)\n+queue_reg_save (const char *label, rtx reg, HOST_WIDE_INT offset)\n {\n   struct queued_reg_save *q = ggc_alloc (sizeof (*q));\n \n@@ -2365,11 +2365,11 @@ typedef struct dw_val_struct GTY(())\n   union dw_val_struct_union\n     {\n       rtx GTY ((tag (\"dw_val_class_addr\"))) val_addr;\n-      long unsigned GTY ((tag (\"dw_val_class_offset\"))) val_offset;\n+      unsigned HOST_WIDE_INT GTY ((tag (\"dw_val_class_offset\"))) val_offset;\n       dw_loc_list_ref GTY ((tag (\"dw_val_class_loc_list\"))) val_loc_list;\n       dw_loc_descr_ref GTY ((tag (\"dw_val_class_loc\"))) val_loc;\n-      long int GTY ((default (\"\"))) val_int;\n-      long unsigned GTY ((tag (\"dw_val_class_unsigned_const\"))) val_unsigned;\n+      HOST_WIDE_INT GTY ((default (\"\"))) val_int;\n+      unsigned HOST_WIDE_INT GTY ((tag (\"dw_val_class_unsigned_const\"))) val_unsigned;\n       dw_long_long_const GTY ((tag (\"dw_val_class_long_long\"))) val_long_long;\n       dw_float_const GTY ((tag (\"dw_val_class_float\"))) val_float;\n       struct dw_val_die_union\n@@ -2417,7 +2417,7 @@ typedef struct dw_loc_list_struct GTY(())\n \n static const char *dwarf_stack_op_name (unsigned);\n static dw_loc_descr_ref new_loc_descr (enum dwarf_location_atom,\n-\t\t\t\t       unsigned long, unsigned long);\n+\t\t\t\t       unsigned HOST_WIDE_INT, unsigned HOST_WIDE_INT);\n static void add_loc_descr (dw_loc_descr_ref *, dw_loc_descr_ref);\n static unsigned long size_of_loc_descr (dw_loc_descr_ref);\n static unsigned long size_of_locs (dw_loc_descr_ref);\n@@ -2742,8 +2742,8 @@ dwarf_stack_op_name (unsigned int op)\n    together to form more complicated location (address) descriptions.  */\n \n static inline dw_loc_descr_ref\n-new_loc_descr (enum dwarf_location_atom op, long unsigned int oprnd1,\n-\t       long unsigned int oprnd2)\n+new_loc_descr (enum dwarf_location_atom op, unsigned HOST_WIDE_INT oprnd1,\n+\t       unsigned HOST_WIDE_INT oprnd2)\n {\n   dw_loc_descr_ref descr = ggc_alloc_cleared (sizeof (dw_loc_descr_node));\n \n@@ -3586,10 +3586,10 @@ static void add_dwarf_attr (dw_die_ref, dw_attr_ref);\n static inline enum dw_val_class AT_class (dw_attr_ref);\n static void add_AT_flag (dw_die_ref, enum dwarf_attribute, unsigned);\n static inline unsigned AT_flag (dw_attr_ref);\n-static void add_AT_int (dw_die_ref, enum dwarf_attribute, long);\n-static inline long int AT_int (dw_attr_ref);\n-static void add_AT_unsigned (dw_die_ref, enum dwarf_attribute, unsigned long);\n-static inline unsigned long AT_unsigned (dw_attr_ref);\n+static void add_AT_int (dw_die_ref, enum dwarf_attribute, HOST_WIDE_INT);\n+static inline HOST_WIDE_INT AT_int (dw_attr_ref);\n+static void add_AT_unsigned (dw_die_ref, enum dwarf_attribute, unsigned HOST_WIDE_INT);\n+static inline unsigned HOST_WIDE_INT AT_unsigned (dw_attr_ref);\n static void add_AT_long_long (dw_die_ref, enum dwarf_attribute, unsigned long,\n \t\t\t      unsigned long);\n static void add_AT_float (dw_die_ref, enum dwarf_attribute, unsigned, long *);\n@@ -3612,7 +3612,8 @@ static void add_AT_addr (dw_die_ref, enum dwarf_attribute, rtx);\n static inline rtx AT_addr (dw_attr_ref);\n static void add_AT_lbl_id (dw_die_ref, enum dwarf_attribute, const char *);\n static void add_AT_lbl_offset (dw_die_ref, enum dwarf_attribute, const char *);\n-static void add_AT_offset (dw_die_ref, enum dwarf_attribute, unsigned long);\n+static void add_AT_offset (dw_die_ref, enum dwarf_attribute,\n+\t\t\t   unsigned HOST_WIDE_INT);\n static void add_AT_range_list (dw_die_ref, enum dwarf_attribute,\n \t\t\t       unsigned long);\n static inline const char *AT_lbl (dw_attr_ref);\n@@ -3702,7 +3703,7 @@ static dw_loc_descr_ref reg_loc_descriptor (rtx);\n static dw_loc_descr_ref one_reg_loc_descriptor (unsigned int);\n static dw_loc_descr_ref multiple_reg_loc_descriptor (rtx, rtx);\n static dw_loc_descr_ref int_loc_descriptor (HOST_WIDE_INT);\n-static dw_loc_descr_ref based_loc_descr (unsigned, long);\n+static dw_loc_descr_ref based_loc_descr (unsigned, HOST_WIDE_INT);\n static int is_based_loc (rtx);\n static dw_loc_descr_ref mem_loc_descriptor (rtx, enum machine_mode mode);\n static dw_loc_descr_ref concat_loc_descriptor (rtx, rtx);\n@@ -4480,7 +4481,7 @@ AT_flag (dw_attr_ref a)\n /* Add a signed integer attribute value to a DIE.  */\n \n static inline void\n-add_AT_int (dw_die_ref die, enum dwarf_attribute attr_kind, long int int_val)\n+add_AT_int (dw_die_ref die, enum dwarf_attribute attr_kind, HOST_WIDE_INT int_val)\n {\n   dw_attr_ref attr = ggc_alloc (sizeof (dw_attr_node));\n \n@@ -4491,7 +4492,7 @@ add_AT_int (dw_die_ref die, enum dwarf_attribute attr_kind, long int int_val)\n   add_dwarf_attr (die, attr);\n }\n \n-static inline long int\n+static inline HOST_WIDE_INT\n AT_int (dw_attr_ref a)\n {\n   if (a && AT_class (a) == dw_val_class_const)\n@@ -4504,7 +4505,7 @@ AT_int (dw_attr_ref a)\n \n static inline void\n add_AT_unsigned (dw_die_ref die, enum dwarf_attribute attr_kind,\n-\t\t long unsigned int unsigned_val)\n+\t\t unsigned HOST_WIDE_INT unsigned_val)\n {\n   dw_attr_ref attr = ggc_alloc (sizeof (dw_attr_node));\n \n@@ -4515,7 +4516,7 @@ add_AT_unsigned (dw_die_ref die, enum dwarf_attribute attr_kind,\n   add_dwarf_attr (die, attr);\n }\n \n-static inline unsigned long\n+static inline unsigned HOST_WIDE_INT\n AT_unsigned (dw_attr_ref a)\n {\n   if (a && AT_class (a) == dw_val_class_unsigned_const)\n@@ -4803,7 +4804,8 @@ add_AT_lbl_offset (dw_die_ref die, enum dwarf_attribute attr_kind, const char *l\n /* Add an offset attribute value to a DIE.  */\n \n static inline void\n-add_AT_offset (dw_die_ref die, enum dwarf_attribute attr_kind, long unsigned int offset)\n+add_AT_offset (dw_die_ref die, enum dwarf_attribute attr_kind,\n+\t       unsigned HOST_WIDE_INT offset)\n {\n   dw_attr_ref attr = ggc_alloc (sizeof (dw_attr_node));\n \n@@ -8106,7 +8108,7 @@ int_loc_descriptor (HOST_WIDE_INT i)\n /* Return a location descriptor that designates a base+offset location.  */\n \n static dw_loc_descr_ref\n-based_loc_descr (unsigned int reg, long int offset)\n+based_loc_descr (unsigned int reg, HOST_WIDE_INT offset)\n {\n   dw_loc_descr_ref loc_result;\n   /* For the \"frame base\", we use the frame pointer or stack pointer\n@@ -9000,7 +9002,7 @@ add_AT_location_description (dw_die_ref die, enum dwarf_attribute attr_kind,\n static void\n add_data_member_location_attribute (dw_die_ref die, tree decl)\n {\n-  long offset;\n+  HOST_WIDE_INT offset;\n   dw_loc_descr_ref loc_descr = 0;\n \n   if (TREE_CODE (decl) == TREE_VEC)\n@@ -9094,20 +9096,10 @@ add_const_value_attribute (dw_die_ref die, rtx rtl)\n       {\n \tHOST_WIDE_INT val = INTVAL (rtl);\n \n-\t/* ??? We really should be using HOST_WIDE_INT throughout.  */\n-\tif (val < 0 && (long) val == val)\n-\t  add_AT_int (die, DW_AT_const_value, (long) val);\n-\telse if ((unsigned long) val == (unsigned HOST_WIDE_INT) val)\n-\t  add_AT_unsigned (die, DW_AT_const_value, (unsigned long) val);\n-\telse\n-\t  {\n-#if HOST_BITS_PER_LONG * 2 == HOST_BITS_PER_WIDE_INT\n-\t    add_AT_long_long (die, DW_AT_const_value,\n-\t\t\t      val >> HOST_BITS_PER_LONG, val);\n-#else\n-\t    abort ();\n-#endif\n-\t  }\n+\tif (val < 0)\n+\t  add_AT_int (die, DW_AT_const_value, val);\n+\telse \n+\t  add_AT_unsigned (die, DW_AT_const_value, (unsigned HOST_WIDE_INT) val);\n       }\n       break;\n "}]}