{"sha": "d18bbd25340adf4768c4e71ecd655630513876c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDE4YmJkMjUzNDBhZGY0NzY4YzRlNzFlY2Q2NTU2MzA1MTM4NzZjNw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-08-01T10:01:31Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-08-01T10:01:31Z"}, "message": "[multiple changes]\n\n2014-08-01  Arnaud Charlet  <charlet@adacore.com>\n\n\t* exp_attr.adb (Is_Inline_Floating_Point_Attribute): Restore more\n\tcompletely previous code since only GCC back-ends are prepared\n\tto handle e.g. 'Machine attribute.\n\t* targparm.adb, targparm.ads: Remove remaining refs and\n\thandling of OpenVMS_On_Target, VAX_Float_On_Target and\n\tRTX_RTSS_Kernel_Module_On_Target.\n\t* hostparm.ads (OpenVMS, Max_Debug_Name_Length): Removed,\n\tno longer used.\n\n2014-08-01  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_dist.adb, exp_attr.adb: Minor reformatting.\n\t* sem_ch3.adb, mlib-tgt-specific-hpux.adb, a-direct.ads,\n\ta-synbar-posix.adb, exp_ch9.adb, sem_ch10.adb, sem_prag.adb,\n\tsem_ch12.adb, sem.ads, sem_res.adb, s-exctra.adb, s-soflin.ads,\n\tg-alveop.ads, sem_ch8.adb, vxaddr2line.adb, sem_cat.ads: Remove\n\timproper use of shall.\n\nFrom-SVN: r213440", "tree": {"sha": "52f3a096a08f6e10ff730078081414d84efcabb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52f3a096a08f6e10ff730078081414d84efcabb0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d18bbd25340adf4768c4e71ecd655630513876c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d18bbd25340adf4768c4e71ecd655630513876c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d18bbd25340adf4768c4e71ecd655630513876c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d18bbd25340adf4768c4e71ecd655630513876c7/comments", "author": null, "committer": null, "parents": [{"sha": "37368818b9b039ebdb177c483b0d563e128952ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37368818b9b039ebdb177c483b0d563e128952ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37368818b9b039ebdb177c483b0d563e128952ba"}], "stats": {"total": 251, "additions": 133, "deletions": 118}, "files": [{"sha": "520f3c8ac76a9864b75b491fbef287d4e0aa4b66", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d18bbd25340adf4768c4e71ecd655630513876c7/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d18bbd25340adf4768c4e71ecd655630513876c7/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d18bbd25340adf4768c4e71ecd655630513876c7", "patch": "@@ -1,3 +1,23 @@\n+2014-08-01  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_attr.adb (Is_Inline_Floating_Point_Attribute): Restore more\n+\tcompletely previous code since only GCC back-ends are prepared\n+\tto handle e.g. 'Machine attribute.\n+\t* targparm.adb, targparm.ads: Remove remaining refs and\n+\thandling of OpenVMS_On_Target, VAX_Float_On_Target and\n+\tRTX_RTSS_Kernel_Module_On_Target.\n+\t* hostparm.ads (OpenVMS, Max_Debug_Name_Length): Removed,\n+\tno longer used.\n+\n+2014-08-01  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_dist.adb, exp_attr.adb: Minor reformatting.\n+\t* sem_ch3.adb, mlib-tgt-specific-hpux.adb, a-direct.ads,\n+\ta-synbar-posix.adb, exp_ch9.adb, sem_ch10.adb, sem_prag.adb,\n+\tsem_ch12.adb, sem.ads, sem_res.adb, s-exctra.adb, s-soflin.ads,\n+\tg-alveop.ads, sem_ch8.adb, vxaddr2line.adb, sem_cat.ads: Remove\n+\timproper use of shall.\n+\n 2014-08-01  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_aggr.adb, exp_atag.adb, layout.adb, nlists.adb, nlists.ads,"}, {"sha": "a308c004925b9eadee7ed168b1f827d375f035f0", "filename": "gcc/ada/a-direct.ads", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d18bbd25340adf4768c4e71ecd655630513876c7/gcc%2Fada%2Fa-direct.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d18bbd25340adf4768c4e71ecd655630513876c7/gcc%2Fada%2Fa-direct.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-direct.ads?ref=d18bbd25340adf4768c4e71ecd655630513876c7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2004-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived for use with GNAT from AI-00248,  which is --\n -- expected to be a part of a future expected revised Ada Reference Manual. --\n@@ -81,7 +81,7 @@ package Ada.Directories is\n \n    function Current_Directory return String;\n    --  Returns the full directory name for the current default directory. The\n-   --  name returned shall be suitable for a future call to Set_Directory.\n+   --  name returned must be suitable for a future call to Set_Directory.\n    --  The exception Use_Error is propagated if a default directory is not\n    --  supported by the external environment.\n \n@@ -121,15 +121,15 @@ package Ada.Directories is\n    --  Creates zero or more directories with name New_Directory. Each\n    --  non-existent directory named by New_Directory is created. For example,\n    --  on a typical Unix system, Create_Path (\"/usr/me/my\"); would create\n-   --  directory \"me\" in directory \"usr\", then create directory \"my\" in\n-   --  directory \"me\". The Form can be used to give system-dependent\n+   --  directory \"me\" in directory \"usr\", then create directory \"my\"\n+   --  in directory \"me\". The Form can be used to give system-dependent\n    --  characteristics of the directory; the interpretation of the Form\n    --  parameter is implementation-defined. A null string for Form specifies\n    --  the use of the default options of the implementation of the new\n    --  directory. The exception Name_Error is propagated if the string given\n-   --  as New_Directory does not allow the identification of any directory.\n-   --  The exception Use_Error is propagated if the external environment does\n-   --  not support the creation of any directories with the given name (in the\n+   --  as New_Directory does not allow the identification of any directory. The\n+   --  exception Use_Error is propagated if the external environment does not\n+   --  support the creation of any directories with the given name (in the\n    --  absence of Name_Error) and form.\n    --\n    --  The Form parameter is ignored\n@@ -139,9 +139,9 @@ package Ada.Directories is\n    --  all of its contents (possibly including other directories) are deleted.\n    --  The exception Name_Error is propagated if the string given as Directory\n    --  does not identify an existing directory. The exception Use_Error is\n-   --  propagated if the external environment does not support the deletion of\n-   --  the directory or some portion of its contents with the given name (in\n-   --  the absence of Name_Error). If Use_Error is propagated, it is\n+   --  propagated if the external environment does not support the deletion\n+   --  of the directory or some portion of its contents with the given name\n+   --  (in the absence of Name_Error). If Use_Error is propagated, it is\n    --  unspecified if a portion of the contents of the directory are deleted.\n \n    procedure Delete_File (Name : String);"}, {"sha": "62cf23250a1b13c783b4d08b3fb96082506e6141", "filename": "gcc/ada/a-synbar-posix.adb", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d18bbd25340adf4768c4e71ecd655630513876c7/gcc%2Fada%2Fa-synbar-posix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d18bbd25340adf4768c4e71ecd655630513876c7/gcc%2Fada%2Fa-synbar-posix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-synbar-posix.adb?ref=d18bbd25340adf4768c4e71ecd655630513876c7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -50,7 +50,7 @@ package body Ada.Synchronous_Barriers is\n    pragma Import (C, pthread_barrier_init, \"pthread_barrier_init\");\n    --  Initialize barrier with the attributes in attr. The barrier is opened\n    --  when count waiters arrived. If attr is null the default barrier\n-   --  attributes shall be used.\n+   --  attributes are used.\n \n    function pthread_barrier_destroy\n      (barrier : not null access pthread_barrier_t) return int;\n@@ -76,10 +76,11 @@ package body Ada.Synchronous_Barriers is\n    overriding procedure Initialize (Barrier : in out Synchronous_Barrier) is\n       Result : int;\n    begin\n-      Result := pthread_barrier_init\n-        (barrier => Barrier.POSIX_Barrier'Access,\n-         attr    => System.Null_Address,\n-         count   => unsigned (Barrier.Release_Threshold));\n+      Result :=\n+        pthread_barrier_init\n+          (barrier => Barrier.POSIX_Barrier'Access,\n+           attr    => System.Null_Address,\n+           count   => unsigned (Barrier.Release_Threshold));\n       pragma Assert (Result = 0);\n    end Initialize;\n \n@@ -98,8 +99,9 @@ package body Ada.Synchronous_Barriers is\n       --  the barrier open.\n \n    begin\n-      Result := pthread_barrier_wait\n-        (barrier => The_Barrier.POSIX_Barrier'Access);\n+      Result :=\n+        pthread_barrier_wait\n+          (barrier => The_Barrier.POSIX_Barrier'Access);\n       pragma Assert\n         (Result = 0 or else Result = PTHREAD_BARRIER_SERIAL_THREAD);\n "}, {"sha": "18ad6d1f3d74a8df8f39dc3c07a30691781402c2", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d18bbd25340adf4768c4e71ecd655630513876c7/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d18bbd25340adf4768c4e71ecd655630513876c7/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=d18bbd25340adf4768c4e71ecd655630513876c7", "patch": "@@ -7954,17 +7954,30 @@ package body Exp_Attr is\n    function Is_Inline_Floating_Point_Attribute (N : Node_Id) return Boolean is\n       Id : constant Attribute_Id := Get_Attribute_Id (Attribute_Name (N));\n \n+      function Is_GCC_Target return Boolean;\n+      --  Return True if we are using a GCC target/back-end\n+      --  ??? Note: the implementation is kludgy/fragile\n+\n+      -------------------\n+      -- Is_GCC_Target --\n+      -------------------\n+\n+      function Is_GCC_Target return Boolean is\n+      begin\n+         return VM_Target = No_VM and then not CodePeer_Mode\n+           and then not AAMP_On_Target;\n+      end Is_GCC_Target;\n+\n+   --  Start of processing for Exp_Attr\n+\n    begin\n-      --  Machine and Model can be expanded by the backend, but in CodePeer\n-      --  mode, we prefer the front end to do the expansion, because CodePeer\n-      --  is not prepared to handle these attributes.\n+      --  Machine and Model can be expanded by the GCC backend only\n \n       if Id = Attribute_Machine or else Id = Attribute_Model then\n-         return not CodePeer_Mode;\n+         return Is_GCC_Target;\n \n-      --  Remaining cases handled by the back end are Rounding and Truncatation\n+      --  Remaining cases handled by all back ends are Rounding and Truncation\n       --  when appearing as the operand of a conversion to some integer type.\n-      --  CodePeer can handle these cases fine.\n \n       elsif Nkind (Parent (N)) /= N_Type_Conversion\n         or else not Is_Integer_Type (Etype (Parent (N)))"}, {"sha": "d01e849c88f69e415e34b9151198e7abb00ed836", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d18bbd25340adf4768c4e71ecd655630513876c7/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d18bbd25340adf4768c4e71ecd655630513876c7/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=d18bbd25340adf4768c4e71ecd655630513876c7", "patch": "@@ -2425,7 +2425,7 @@ package body Exp_Ch9 is\n \n          --  If an inherited subprogram is implemented by a protected procedure\n          --  or an entry, then the first parameter of the inherited subprogram\n-         --  shall be of mode OUT or IN OUT, or access-to-variable parameter.\n+         --  must be of mode OUT or IN OUT, or access-to-variable parameter.\n \n          if Ekind (Iface_Op) = E_Procedure\n            and then Present (Parameter_Specifications (Iface_Op_Spec))"}, {"sha": "74f9055ba1f9d7e21f172e46a24dc480faf2f21f", "filename": "gcc/ada/exp_dist.adb", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d18bbd25340adf4768c4e71ecd655630513876c7/gcc%2Fada%2Fexp_dist.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d18bbd25340adf4768c4e71ecd655630513876c7/gcc%2Fada%2Fexp_dist.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dist.adb?ref=d18bbd25340adf4768c4e71ecd655630513876c7", "patch": "@@ -528,23 +528,23 @@ package body Exp_Dist is\n       RACW_Type                 : Entity_Id := Empty;\n       Nod                       : Node_Id);\n    --  Build calling stubs for general purpose. The parameters are:\n-   --    Decls             : a place to put declarations\n-   --    Statements        : a place to put statements\n-   --    Target            : PCS-specific target information (see details\n-   --                        in RPC_Target declaration).\n-   --    Subprogram_Id     : a node containing the subprogram ID\n+   --    Decls             : A place to put declarations\n+   --    Statements        : A place to put statements\n+   --    Target            : PCS-specific target information (see details in\n+   --                        RPC_Target declaration).\n+   --    Subprogram_Id     : A node containing the subprogram ID\n    --    Asynchronous      : True if an APC must be made instead of an RPC.\n    --                        The value needs not be supplied if one of the\n    --                        Is_Known_... is True.\n    --    Is_Known_Async... : True if we know that this is asynchronous\n    --    Is_Known_Non_A... : True if we know that this is not asynchronous\n-   --    Spec              : a node with a Parameter_Specifications and\n-   --                        a Result_Definition if applicable\n-   --    Stub_Type         : in case of RACW stubs, parameters of type access\n-   --                        to Stub_Type will be marshalled using the\n+   --    Spec              : Node with a Parameter_Specifications and a\n+   --                        Result_Definition if applicable\n+   --    Stub_Type         : For case of RACW stubs, parameters of type access\n+   --                        to Stub_Type will be marshalled using the address\n    --                        address of the object (the addr field) rather\n    --                        than using the 'Write on the stub itself\n-   --    Nod               : used to provide sloc for generated code\n+   --    Nod               : Used to provide sloc for generated code\n \n    function Specific_Build_Stub_Target\n      (Loc                   : Source_Ptr;"}, {"sha": "351e450570a6a98b5f382fd32677660189573f17", "filename": "gcc/ada/g-alveop.ads", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d18bbd25340adf4768c4e71ecd655630513876c7/gcc%2Fada%2Fg-alveop.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d18bbd25340adf4768c4e71ecd655630513876c7/gcc%2Fada%2Fg-alveop.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-alveop.ads?ref=d18bbd25340adf4768c4e71ecd655630513876c7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2004-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -7884,12 +7884,12 @@ private\n    -- Inlining considerations --\n    -----------------------------\n \n-   --  The intent in the Hard binding case is to eventually map operations\n-   --  to hardware instructions. Needless to say, intermediate function calls\n-   --  do not fit this purpose, so all the user visible subprograms shall be\n-   --  inlined. In the soft case, the bulk of the work is performed by the\n-   --  low level routines, and those exported by this unit are short enough\n-   --  for the inlining to make sense and even be beneficial, so...\n+   --  The intent in the Hard binding case is to eventually map operations to\n+   --  hardware instructions. Needless to say, intermediate function calls do\n+   --  not fit this purpose, so all the user visible subprograms are inlined.\n+   --  In the soft case, the bulk of the work is performed by the low level\n+   --  routines, and those exported by this unit are short enough for the\n+   --  inlining to make sense and even be beneficial, so...\n \n    pragma Inline_Always (vec_abs);\n    pragma Inline_Always (vec_abss);"}, {"sha": "253c3be3c4ce34b8f6b6a112eec821a34d6bb086", "filename": "gcc/ada/hostparm.ads", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d18bbd25340adf4768c4e71ecd655630513876c7/gcc%2Fada%2Fhostparm.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d18bbd25340adf4768c4e71ecd655630513876c7/gcc%2Fada%2Fhostparm.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fhostparm.ads?ref=d18bbd25340adf4768c4e71ecd655630513876c7", "patch": "@@ -41,9 +41,6 @@ package Hostparm is\n    -- HOST Parameters --\n    ---------------------\n \n-   OpenVMS : Boolean := False;\n-   --  Set True for OpenVMS host\n-\n    Direct_Separator : constant Character;\n    pragma Import (C, Direct_Separator, \"__gnat_dir_separator\");\n    Normalized_CWD : constant String := \".\" & Direct_Separator;\n@@ -73,9 +70,4 @@ package Hostparm is\n    --  If set to true, gnatbind will exclude from consideration all\n    --  non-existent .o files.\n \n-   Max_Debug_Name_Length : constant := 256;\n-   --  If a generated qualified debug name exceeds this length, then it\n-   --  is automatically compressed, regardless of the setting of the\n-   --  Compress_Debug_Names switch controlled by -gnatC.\n-\n end Hostparm;"}, {"sha": "57e40841a8003688a6a3996dcc758cc14fba11cc", "filename": "gcc/ada/mlib-tgt-specific-hpux.adb", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d18bbd25340adf4768c4e71ecd655630513876c7/gcc%2Fada%2Fmlib-tgt-specific-hpux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d18bbd25340adf4768c4e71ecd655630513876c7/gcc%2Fada%2Fmlib-tgt-specific-hpux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmlib-tgt-specific-hpux.adb?ref=d18bbd25340adf4768c4e71ecd655630513876c7", "patch": "@@ -7,7 +7,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 2003-2008, AdaCore                     --\n+--                     Copyright (C) 2003-2014, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -80,11 +80,10 @@ package body MLib.Tgt.Specific is\n \n       Common_Options : constant Argument_List :=\n                          Options & new String'(PIC_Option);\n-      --  Common set of options to the gcc command performing the link.\n-      --  On HPUX, this command eventually resorts to collect2, which may\n-      --  generate a C file and compile it on the fly. This compilation shall\n-      --  also generate position independent code for the final link to\n-      --  succeed.\n+      --  Common set of options to the gcc command performing the link. On\n+      --  HPUX, this command eventually resorts to collect2, which may generate\n+      --  a C file and compile it on the fly. This compilation also generates\n+      --  position independent code for the final link to succeed.\n    begin\n       if Opt.Verbose_Mode then\n          Write_Str (\"building relocatable shared library \");"}, {"sha": "1a05cc1efd4ccbd8551014ff4402040b3eb94b2c", "filename": "gcc/ada/s-exctra.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d18bbd25340adf4768c4e71ecd655630513876c7/gcc%2Fada%2Fs-exctra.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d18bbd25340adf4768c4e71ecd655630513876c7/gcc%2Fada%2Fs-exctra.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-exctra.adb?ref=d18bbd25340adf4768c4e71ecd655630513876c7", "patch": "@@ -39,12 +39,12 @@ package body System.Exception_Traces is\n    --  Calling the decorator directly from where it is needed would require\n    --  introducing nasty dependencies upon the spec of this package (typically\n    --  in a-except.adb). We also have to deal with the fact that the traceback\n-   --  array within an exception occurrence and the one the decorator shall\n-   --  accept are of different types. These are two reasons for which a wrapper\n-   --  with a System.Address argument is indeed used to call the decorator\n-   --  provided by the user of this package. This wrapper is called via a\n-   --  soft-link, which either is null when no decorator is in place or \"points\n-   --  to\" the following function otherwise.\n+   --  array within an exception occurrence and the one the decorator accepts\n+   --  are of different types. These are two reasons for which a wrapper with\n+   --  a System.Address argument is indeed used to call the decorator provided\n+   --  by the user of this package. This wrapper is called via a soft-link,\n+   --  which either is null when no decorator is in place or \"points to\" the\n+   --  following function otherwise.\n \n    function Decorator_Wrapper\n      (Traceback : System.Address;"}, {"sha": "f850cd2ffb01661691cd34af86cbf14761acb901", "filename": "gcc/ada/s-soflin.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d18bbd25340adf4768c4e71ecd655630513876c7/gcc%2Fada%2Fs-soflin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d18bbd25340adf4768c4e71ecd655630513876c7/gcc%2Fada%2Fs-soflin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-soflin.ads?ref=d18bbd25340adf4768c4e71ecd655630513876c7", "patch": "@@ -300,7 +300,7 @@ package System.Soft_Links is\n    --  Wrapper to the possible user specified traceback decorator to be\n    --  called during automatic output of exception data.\n \n-   --  The nullity of this wrapper shall correspond to the nullity of the\n+   --  The null value of this wrapper correspond sto the null value of the\n    --  current actual decorator. This is ensured first by the null initial\n    --  value of the corresponding variables, and then by Set_Trace_Decorator\n    --  in g-exctra.adb."}, {"sha": "13fc485f9bdc80ecd66cc8702c7f350b82965444", "filename": "gcc/ada/sem.ads", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d18bbd25340adf4768c4e71ecd655630513876c7/gcc%2Fada%2Fsem.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d18bbd25340adf4768c4e71ecd655630513876c7/gcc%2Fada%2Fsem.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.ads?ref=d18bbd25340adf4768c4e71ecd655630513876c7", "patch": "@@ -651,16 +651,18 @@ package Sem is\n    --  external (more global) to it.\n \n    procedure Enter_Generic_Scope (S : Entity_Id);\n-   --  Shall be called each time a Generic subprogram or package scope is\n-   --  entered. S is the entity of the scope.\n+   --  Called each time a Generic subprogram or package scope is entered. S is\n+   --  the entity of the scope.\n+   --\n    --  ??? At the moment, only called for package specs because this mechanism\n    --  is only used for avoiding freezing of external references in generics\n    --  and this can only be an issue if the outer generic scope is a package\n    --  spec (otherwise all external entities are already frozen)\n \n    procedure Exit_Generic_Scope  (S : Entity_Id);\n-   --  Shall be called each time a Generic subprogram or package scope is\n-   --  exited. S is the entity of the scope.\n+   --  Called each time a Generic subprogram or package scope is exited. S is\n+   --  the entity of the scope.\n+   --\n    --  ??? At the moment, only called for package specs exit.\n \n    function Explicit_Suppress (E : Entity_Id; C : Check_Id) return Boolean;"}, {"sha": "5e05a69a49ab201d0f53af4ab866fbd66f0ed0ae", "filename": "gcc/ada/sem_cat.ads", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d18bbd25340adf4768c4e71ecd655630513876c7/gcc%2Fada%2Fsem_cat.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d18bbd25340adf4768c4e71ecd655630513876c7/gcc%2Fada%2Fsem_cat.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_cat.ads?ref=d18bbd25340adf4768c4e71ecd655630513876c7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -110,18 +110,18 @@ package Sem_Cat is\n    --  the checks cannot be made before knowing if the object is imported.\n \n    procedure Validate_RCI_Declarations (P : Entity_Id);\n-   --  Apply semantic checks given in  E2.3(10-14)\n+   --  Apply semantic checks given in E2.3(10-14)\n \n    procedure Validate_RCI_Subprogram_Declaration (N : Node_Id);\n    --  Check RCI subprogram declarations for illegal inlining and formals not\n    --  supporting external streaming.\n \n    procedure Validate_Remote_Access_To_Class_Wide_Type (N : Node_Id);\n    --  Checks that Storage_Pool and Storage_Size attribute references are\n-   --  not applied to remote access-to-class-wide types. And the expected\n-   --  type for an allocator shall not be a remote access-to-class-wide\n-   --  type. And a remote access-to-class-wide type shall not be an actual\n-   --  parameter for a generic formal access type. RM E.2.3(22).\n+   --  not applied to remote access-to-class-wide types. Also checks that the\n+   --  expected type for an allocator cannot be a remote access-to-class-wide\n+   --  type. ALso checks that a remote access-to-class-wide type cannot be an\n+   --  actual parameter for a generic formal access type. RM E.2.3(22).\n \n    procedure Validate_RT_RAT_Component (N : Node_Id);\n    --  Given N, the package library unit declaration node, we should check"}, {"sha": "3fe718b7262dc209f3f4e190ebb5bd1533050e74", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d18bbd25340adf4768c4e71ecd655630513876c7/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d18bbd25340adf4768c4e71ecd655630513876c7/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=d18bbd25340adf4768c4e71ecd655630513876c7", "patch": "@@ -3,7 +3,7 @@\n --                         GNAT COMPILER COMPONENTS                         --\n --                                                                          --\n --                             S E M _ C H 1 0                              --\n---                                                                          --\n+--     s                                                                     --\n --                                 B o d y                                  --\n --                                                                          --\n --          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n@@ -3636,7 +3636,7 @@ package body Sem_Ch10 is\n       procedure Check_Private_Limited_Withed_Unit (Item : Node_Id);\n       --  Check that if a limited_with clause of a given compilation_unit\n       --  mentions a descendant of a private child of some library unit, then\n-      --  the given compilation_unit shall be the declaration of a private\n+      --  the given compilation_unit must be the declaration of a private\n       --  descendant of that library unit, or a public descendant of such. The\n       --  code is analogous to that of Check_Private_Child_Unit but we cannot\n       --  use entities on the limited with_clauses because their units have not"}, {"sha": "2faed4c7a9e0be6a9085dd72e4f4ee7f2e2906e5", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d18bbd25340adf4768c4e71ecd655630513876c7/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d18bbd25340adf4768c4e71ecd655630513876c7/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=d18bbd25340adf4768c4e71ecd655630513876c7", "patch": "@@ -11404,7 +11404,7 @@ package body Sem_Ch12 is\n                  (\"actual for & cannot be a class-wide type\", Actual, Gen_T);\n                Abandon_Instantiation (Actual);\n \n-            --  Otherwise, the formal and actual shall have the same number\n+            --  Otherwise, the formal and actual must have the same number\n             --  of discriminants and each discriminant of the actual must\n             --  correspond to a discriminant of the formal.\n "}, {"sha": "53e0b47b90567d47e0128a0750272ff46da9b37b", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d18bbd25340adf4768c4e71ecd655630513876c7/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d18bbd25340adf4768c4e71ecd655630513876c7/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=d18bbd25340adf4768c4e71ecd655630513876c7", "patch": "@@ -3421,9 +3421,9 @@ package body Sem_Ch3 is\n       --  is considered, so that the Object_Definition node is still the same\n       --  as in source code.\n \n-      --  In SPARK, the nominal subtype shall be given by a subtype mark and\n-      --  shall not be unconstrained. (The only exception to this is the\n-      --  admission of declarations of constants of type String.)\n+      --  In SPARK, the nominal subtype is always given by a subtype mark\n+      --  and must not be unconstrained. (The only exception to this is the\n+      --  acceptance of declarations of constants of type String.)\n \n       if not\n         Nkind_In (Object_Definition (N), N_Identifier, N_Expanded_Name)\n@@ -7073,10 +7073,10 @@ package body Sem_Ch3 is\n \n    --  Furthermore if a KNOWN_DISCRIMINANT_PART is provided, then [3.7(13-18)]:\n \n-   --  o The parent subtype shall be constrained;\n+   --  o The parent subtype must be constrained;\n \n    --  o If the parent type is not a tagged type, then each discriminant of\n-   --    the derived type shall be used in the constraint defining a parent\n+   --    the derived type must be used in the constraint defining a parent\n    --    subtype. [Implementation note: This ensures that the new discriminant\n    --    can share storage with an existing discriminant.]\n \n@@ -7333,19 +7333,19 @@ package body Sem_Ch3 is\n    --  [7.3(10-13)]:\n \n    --  o If a private extension inherits known discriminants from the ancestor\n-   --    subtype, then the full view shall also inherit its discriminants from\n-   --    the ancestor subtype and the parent subtype of the full view shall be\n+   --    subtype, then the full view must also inherit its discriminants from\n+   --    the ancestor subtype and the parent subtype of the full view must be\n    --    constrained if and only if the ancestor subtype is constrained.\n \n    --  o If a partial view has unknown discriminants, then the full view may\n    --    define a definite or an indefinite subtype, with or without\n    --    discriminants.\n \n    --  o If a partial view has neither known nor unknown discriminants, then\n-   --    the full view shall define a definite subtype.\n+   --    the full view must define a definite subtype.\n \n    --  o If the ancestor subtype of a private extension has constrained\n-   --    discriminants, then the parent subtype of the full view shall impose a\n+   --    discriminants, then the parent subtype of the full view must impose a\n    --    statically matching constraint on those discriminants.\n \n    --  This means that only the following forms of private extensions are"}, {"sha": "43eeeb2a96a56001eab8371dfc7129189209d0b8", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d18bbd25340adf4768c4e71ecd655630513876c7/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d18bbd25340adf4768c4e71ecd655630513876c7/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=d18bbd25340adf4768c4e71ecd655630513876c7", "patch": "@@ -1007,10 +1007,10 @@ package body Sem_Ch8 is\n \n          Resolve (Nam, T);\n \n-         --  Ada 2005 (AI-231): \"In the case where the type is defined by an\n+         --  Ada 2005 (AI-231): In the case where the type is defined by an\n          --  access_definition, the renamed entity shall be of an access-to-\n          --  constant type if and only if the access_definition defines an\n-         --  access-to-constant type\" ARM 8.5.1(4)\n+         --  access-to-constant type. ARM 8.5.1(4)\n \n          if Constant_Present (Access_Definition (N))\n            and then not Is_Access_Constant (Etype (Nam))"}, {"sha": "c5f778991c2acbd5e941f44e009a94655878e126", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d18bbd25340adf4768c4e71ecd655630513876c7/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d18bbd25340adf4768c4e71ecd655630513876c7/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=d18bbd25340adf4768c4e71ecd655630513876c7", "patch": "@@ -3466,14 +3466,14 @@ package body Sem_Prag is\n               and then Is_Private_Descendant (Pack_Id)\n             then\n                --  A variable or state abstraction which is part of the\n-               --  visible state of a private child unit (or a public\n-               --  descendant thereof) shall have its Part_Of indicator\n-               --  specified; the Part_Of indicator shall denote a state\n-               --  abstraction declared by either the parent unit of the\n-               --  private unit or by a public descendant of that parent unit.\n-\n-               --  Find nearest nearest private ancestor (which can be the\n-               --  current unit itself).\n+               --  visible state of a private child unit (or one of its public\n+               --  descendants) must have its Part_Of indicator specified. The\n+               --  Part_Of indicator must denote a state abstraction declared\n+               --  by either the parent unit of the private unit or by a public\n+               --  descendant of that parent unit.\n+\n+               --  Find nearest private ancestor (which can be the current unit\n+               --  itself).\n \n                Parent_Unit := Pack_Id;\n                while Present (Parent_Unit) loop"}, {"sha": "4d0cfe3b0c09a6e03f174fbaded3c9c87af6be4d", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d18bbd25340adf4768c4e71ecd655630513876c7/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d18bbd25340adf4768c4e71ecd655630513876c7/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=d18bbd25340adf4768c4e71ecd655630513876c7", "patch": "@@ -5224,7 +5224,7 @@ package body Sem_Res is\n       Eval_Arithmetic_Op (N);\n \n       --  In SPARK, a multiplication or division with operands of fixed point\n-      --  types shall be qualified or explicitly converted to identify the\n+      --  types must be qualified or explicitly converted to identify the\n       --  result type.\n \n       if (Is_Fixed_Point_Type (Etype (L))"}, {"sha": "b7f800b87d618cf68f176178366ef804941f99d0", "filename": "gcc/ada/targparm.adb", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d18bbd25340adf4768c4e71ecd655630513876c7/gcc%2Fada%2Ftargparm.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d18bbd25340adf4768c4e71ecd655630513876c7/gcc%2Fada%2Ftargparm.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftargparm.adb?ref=d18bbd25340adf4768c4e71ecd655630513876c7", "patch": "@@ -55,7 +55,6 @@ package body Targparm is\n       MOV,  --   Machine_Overflows\n       MRN,  --   Machine_Rounds\n       PAS,  --   Preallocated_Stacks\n-      RTX,  --   RTX_RTSS_Kernel_Module\n       SAG,  --   Support_Aggregates\n       SAP,  --   Support_Atomic_Primitives\n       SCA,  --   Support_Composite_Assign\n@@ -91,7 +90,6 @@ package body Targparm is\n    MOV_Str : aliased constant Source_Buffer := \"Machine_Overflows\";\n    MRN_Str : aliased constant Source_Buffer := \"Machine_Rounds\";\n    PAS_Str : aliased constant Source_Buffer := \"Preallocated_Stacks\";\n-   RTX_Str : aliased constant Source_Buffer := \"RTX_RTSS_Kernel_Module\";\n    SAG_Str : aliased constant Source_Buffer := \"Support_Aggregates\";\n    SAP_Str : aliased constant Source_Buffer := \"Support_Atomic_Primitives\";\n    SCA_Str : aliased constant Source_Buffer := \"Support_Composite_Assign\";\n@@ -127,7 +125,6 @@ package body Targparm is\n       MOV_Str'Access,\n       MRN_Str'Access,\n       PAS_Str'Access,\n-      RTX_Str'Access,\n       SAG_Str'Access,\n       SAP_Str'Access,\n       SCA_Str'Access,\n@@ -660,7 +657,6 @@ package body Targparm is\n                      when MOV => Machine_Overflows_On_Target         := Result;\n                      when MRN => Machine_Rounds_On_Target            := Result;\n                      when PAS => Preallocated_Stacks_On_Target       := Result;\n-                     when RTX => RTX_RTSS_Kernel_Module_On_Target    := Result;\n                      when SAG => Support_Aggregates_On_Target        := Result;\n                      when SAP => Support_Atomic_Primitives_On_Target := Result;\n                      when SCA => Support_Composite_Assign_On_Target  := Result;"}, {"sha": "b7d40c6749837cad455458f8ec86ea131f008b26", "filename": "gcc/ada/targparm.ads", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d18bbd25340adf4768c4e71ecd655630513876c7/gcc%2Fada%2Ftargparm.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d18bbd25340adf4768c4e71ecd655630513876c7/gcc%2Fada%2Ftargparm.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftargparm.ads?ref=d18bbd25340adf4768c4e71ecd655630513876c7", "patch": "@@ -203,15 +203,6 @@ package Targparm is\n    AAMP_On_Target : Boolean := False;\n    --  Set to True if target is AAMP\n \n-   OpenVMS_On_Target : Boolean := False;\n-   --  Set to True if target is OpenVMS\n-\n-   VAX_Float_On_Target : Boolean := False;\n-   --  Set to True if target float format is VAX Float\n-\n-   RTX_RTSS_Kernel_Module_On_Target : Boolean := False;\n-   --  Set to True if target is RTSS module for RTX\n-\n    type Virtual_Machine_Kind is (No_VM, JVM_Target, CLI_Target);\n    VM_Target : Virtual_Machine_Kind := No_VM;\n    --  Kind of virtual machine targetted"}, {"sha": "edcc95cc07f74d25b0349998b3bf64bb7d1624e0", "filename": "gcc/ada/vxaddr2line.adb", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d18bbd25340adf4768c4e71ecd655630513876c7/gcc%2Fada%2Fvxaddr2line.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d18bbd25340adf4768c4e71ecd655630513876c7/gcc%2Fada%2Fvxaddr2line.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvxaddr2line.adb?ref=d18bbd25340adf4768c4e71ecd655630513876c7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 2002-2013, AdaCore                     --\n+--                     Copyright (C) 2002-2014, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -41,18 +41,18 @@\n --    selects the target architecture. In the absence of this parameter the\n --    default variant is chosen based on the Detect_Arch result. Generally,\n --    this parameter will only be used if vxaddr2line is recompiled manually.\n---    Otherwise, the command name will always be of the form\n---    <target>-vxaddr2line where there is no ambiguity on the target's\n---    architecture.\n+--    Otherwise, the command name will always be of the form:\n+--      <target>-vxaddr2line\n+--    where there is no ambiguity on the target's architecture.\n \n --  <exe_file> :\n --    The name of the partially linked binary file for the application.\n \n --  <ref_address> :\n---    Runtime address (on the target) of a reference symbol you choose,\n---    which name shall match the value of the Ref_Symbol variable declared\n---    below. A symbol with a small offset from the beginning of the text\n---    segment is better, so \"adainit\" is a good choice.\n+--    Runtime address (on the target) of a reference symbol you choose. This\n+--    name must match the value of the Ref_Symbol variable declared below.\n+--    A symbol with a small offset from the beginning of the text segment is\n+--    better, so \"adainit\" is a good choice.\n \n --  <backtrace addresses> :\n --    The call chain addresses you obtained at run time on the target and\n@@ -78,7 +78,7 @@ procedure VxAddr2Line is\n    --  Instantiate Modular_IO to have Put\n \n    Ref_Symbol : constant String := \"adainit\";\n-   --  This is the name of the reference symbol which runtime address shall\n+   --  This is the name of the reference symbol whose runtime address must\n    --  be provided as the <ref_address> argument.\n \n    --  All supported architectures"}]}