{"sha": "f8d704048f0900b88a459a60c5fed0e9b7ed8658", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjhkNzA0MDQ4ZjA5MDBiODhhNDU5YTYwYzVmZWQwZTliN2VkODY1OA==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2018-05-25T07:57:10Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2018-05-25T07:57:10Z"}, "message": "Support SHF_EXCLUDE on non-x86 and with Solaris as\n\n\t* configure.ac (gcc_cv_as_section_has_e): Move to common section.\n\tRename to...\n\t(gcc_cv_as_section_exclude): ... this.\n\tTry Solaris as #exclude syntax.\n\t* configure: Regenerate.\n\t* config.in: Regenerate.\n\t* config/i386/i386.c (i386_solaris_elf_named_section): Handle\n\tSECTION_EXCLUDE.\n\t* config/sparc/sparc.c (sparc_solaris_elf_asm_named_section)\n\t[HAVE_GAS_SECTION_EXCLUDE]: Handle SECTION_EXCLUDE.\n\n\t* varasm.c (default_elf_asm_named_section): Don't check if\n\tHAVE_GAS_SECTION_EXCLUDE is defined.\n\nFrom-SVN: r260708", "tree": {"sha": "9946373293ac81d336c677b6b3aa3049f182b4bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9946373293ac81d336c677b6b3aa3049f182b4bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8d704048f0900b88a459a60c5fed0e9b7ed8658", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8d704048f0900b88a459a60c5fed0e9b7ed8658", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8d704048f0900b88a459a60c5fed0e9b7ed8658", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8d704048f0900b88a459a60c5fed0e9b7ed8658/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9d4ac06e0235697c7fa3144b6790b779e6385ea5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d4ac06e0235697c7fa3144b6790b779e6385ea5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d4ac06e0235697c7fa3144b6790b779e6385ea5"}], "stats": {"total": 194, "additions": 142, "deletions": 52}, "files": [{"sha": "9dd687ad8abab5493537138b0eb7427181536560", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d704048f0900b88a459a60c5fed0e9b7ed8658/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d704048f0900b88a459a60c5fed0e9b7ed8658/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f8d704048f0900b88a459a60c5fed0e9b7ed8658", "patch": "@@ -1,3 +1,19 @@\n+2018-05-25  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* configure.ac (gcc_cv_as_section_has_e): Move to common section.\n+\tRename to...\n+\t(gcc_cv_as_section_exclude): ... this.\n+\tTry Solaris as #exclude syntax.\n+\t* configure: Regenerate.\n+\t* config.in: Regenerate.\n+\t* config/i386/i386.c (i386_solaris_elf_named_section): Handle\n+\tSECTION_EXCLUDE.\n+\t* config/sparc/sparc.c (sparc_solaris_elf_asm_named_section)\n+\t[HAVE_GAS_SECTION_EXCLUDE]: Handle SECTION_EXCLUDE.\n+\n+\t* varasm.c (default_elf_asm_named_section): Don't check if\n+\tHAVE_GAS_SECTION_EXCLUDE is defined.\n+\n 2018-05-25  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* doc/md.texi: Update the documentation of the cond_* optabs"}, {"sha": "2856e72d627df537a301a6c7ab6b5bbb75f6b43f", "filename": "gcc/config.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d704048f0900b88a459a60c5fed0e9b7ed8658/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d704048f0900b88a459a60c5fed0e9b7ed8658/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=f8d704048f0900b88a459a60c5fed0e9b7ed8658", "patch": "@@ -1323,7 +1323,7 @@\n #endif\n \n \n-/* Define if your assembler supports specifying the section flag e. */\n+/* Define if your assembler supports specifying the exclude section flag. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_GAS_SECTION_EXCLUDE\n #endif"}, {"sha": "637c10565d5573e20545bc4c894e242ddbff1ba4", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d704048f0900b88a459a60c5fed0e9b7ed8658/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d704048f0900b88a459a60c5fed0e9b7ed8658/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=f8d704048f0900b88a459a60c5fed0e9b7ed8658", "patch": "@@ -45905,6 +45905,15 @@ i386_solaris_elf_named_section (const char *name, unsigned int flags,\n       solaris_elf_asm_comdat_section (name, flags, decl);\n       return;\n     }\n+\n+  /* Solaris/x86 as uses the same syntax for the SHF_EXCLUDE flags as the\n+     SPARC assembler.  One cannot mix single-letter flags and #exclude, so\n+     only emit the latter here.  */\n+  if (flags & SECTION_EXCLUDE)\n+    {\n+      fprintf (asm_out_file, \"\\t.section\\t%s,#exclude\\n\", name);\n+      return;\n+    }\n #endif\n \n   default_elf_asm_named_section (name, flags, decl);"}, {"sha": "6b6f155f49f10baa61f892b8999506a738d7f6b3", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d704048f0900b88a459a60c5fed0e9b7ed8658/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d704048f0900b88a459a60c5fed0e9b7ed8658/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=f8d704048f0900b88a459a60c5fed0e9b7ed8658", "patch": "@@ -10502,6 +10502,10 @@ sparc_solaris_elf_asm_named_section (const char *name, unsigned int flags,\n \n   if (!(flags & SECTION_DEBUG))\n     fputs (\",#alloc\", asm_out_file);\n+#if HAVE_GAS_SECTION_EXCLUDE\n+  if (flags & SECTION_EXCLUDE)\n+    fputs (\",#exclude\", asm_out_file);\n+#endif\n   if (flags & SECTION_WRITE)\n     fputs (\",#write\", asm_out_file);\n   if (flags & SECTION_TLS)"}, {"sha": "60d373982fd38fe51c285e2b02941754d1b833d6", "filename": "gcc/configure", "status": "modified", "additions": 83, "deletions": 40, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d704048f0900b88a459a60c5fed0e9b7ed8658/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d704048f0900b88a459a60c5fed0e9b7ed8658/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=f8d704048f0900b88a459a60c5fed0e9b7ed8658", "patch": "@@ -23514,6 +23514,89 @@ $as_echo \"#define USE_AS_TRADITIONAL_FORMAT 1\" >>confdefs.h\n \n fi\n \n+# Test if the assembler supports the section flag 'e' or #exclude for\n+# specifying an excluded section.\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for section exclude flag\" >&5\n+$as_echo_n \"checking assembler for section exclude flag... \" >&6; }\n+if test \"${gcc_cv_as_section_exclude_e+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  gcc_cv_as_section_exclude_e=no\n+    if test $in_tree_gas = yes; then\n+    if test $gcc_cv_gas_vers -ge `expr \\( \\( 2 \\* 1000 \\) + 22 \\) \\* 1000 + 51`\n+  then gcc_cv_as_section_exclude_e=yes\n+fi\n+  elif test x$gcc_cv_as != x; then\n+    $as_echo '.section foo1,\"e\"\n+  .byte 0,0,0,0' > conftest.s\n+    if { ac_try='$gcc_cv_as $gcc_cv_as_flags --fatal-warnings -o conftest.o conftest.s >&5'\n+  { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n+  test $ac_status = 0; }; }\n+    then\n+\tgcc_cv_as_section_exclude_e=yes\n+    else\n+      echo \"configure: failed program was\" >&5\n+      cat conftest.s >&5\n+    fi\n+    rm -f conftest.o conftest.s\n+  fi\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_section_exclude_e\" >&5\n+$as_echo \"$gcc_cv_as_section_exclude_e\" >&6; }\n+\n+\n+if test $gcc_cv_as_section_exclude_e = no; then\n+  case \"${target}\" in\n+    # Solaris as uses #exclude instead.\n+    *-*-solaris2*)\n+      case \"${target}\" in\n+\tsparc*-*-solaris2*)\n+\t  conftest_s='.section \"foo1\", #exclude'\n+\t  ;;\n+\ti?86-*-solaris2* | x86_64-*-solaris2*)\n+\t  conftest_s='.section foo1, #exclude'\n+\t  ;;\n+      esac\n+      ;;\n+    esac\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for section exclude flag\" >&5\n+$as_echo_n \"checking assembler for section exclude flag... \" >&6; }\n+if test \"${gcc_cv_as_section_exclude_hash+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  gcc_cv_as_section_exclude_hash=no\n+  if test x$gcc_cv_as != x; then\n+    $as_echo \"$conftest_s\n+     .byte 0,0,0,0\" > conftest.s\n+    if { ac_try='$gcc_cv_as $gcc_cv_as_flags  -o conftest.o conftest.s >&5'\n+  { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n+  test $ac_status = 0; }; }\n+    then\n+\tgcc_cv_as_section_exclude_hash=yes\n+    else\n+      echo \"configure: failed program was\" >&5\n+      cat conftest.s >&5\n+    fi\n+    rm -f conftest.o conftest.s\n+  fi\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_section_exclude_hash\" >&5\n+$as_echo \"$gcc_cv_as_section_exclude_hash\" >&6; }\n+\n+\n+fi\n+\n+cat >>confdefs.h <<_ACEOF\n+#define HAVE_GAS_SECTION_EXCLUDE `if test $gcc_cv_as_section_exclude_e = yes || test $gcc_cv_as_section_exclude_hash = yes; then echo 1; else echo 0; fi`\n+_ACEOF\n+\n+\n { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for section merging support\" >&5\n $as_echo_n \"checking assembler for section merging support... \" >&6; }\n if test \"${gcc_cv_as_shf_merge+set}\" = set; then :\n@@ -25671,46 +25754,6 @@ $as_echo \"#define HAVE_AS_XBRACE_COMMENT_OPTION 1\" >>confdefs.h\n fi\n \n \n-    # Test if the assembler supports the section flag 'e' for specifying\n-    # an excluded section.\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for .section with e\" >&5\n-$as_echo_n \"checking assembler for .section with e... \" >&6; }\n-if test \"${gcc_cv_as_section_has_e+set}\" = set; then :\n-  $as_echo_n \"(cached) \" >&6\n-else\n-  gcc_cv_as_section_has_e=no\n-    if test $in_tree_gas = yes; then\n-    if test $gcc_cv_gas_vers -ge `expr \\( \\( 2 \\* 1000 \\) + 22 \\) \\* 1000 + 51`\n-  then gcc_cv_as_section_has_e=yes\n-fi\n-  elif test x$gcc_cv_as != x; then\n-    $as_echo '.section foo1,\"e\"\n-.byte 0,0,0,0' > conftest.s\n-    if { ac_try='$gcc_cv_as $gcc_cv_as_flags --fatal-warnings -o conftest.o conftest.s >&5'\n-  { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n-  (eval $ac_try) 2>&5\n-  ac_status=$?\n-  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n-  test $ac_status = 0; }; }\n-    then\n-\tgcc_cv_as_section_has_e=yes\n-    else\n-      echo \"configure: failed program was\" >&5\n-      cat conftest.s >&5\n-    fi\n-    rm -f conftest.o conftest.s\n-  fi\n-fi\n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_section_has_e\" >&5\n-$as_echo \"$gcc_cv_as_section_has_e\" >&6; }\n-\n-\n-\n-cat >>confdefs.h <<_ACEOF\n-#define HAVE_GAS_SECTION_EXCLUDE `if test $gcc_cv_as_section_has_e = yes; then echo 1; else echo 0; fi`\n-_ACEOF\n-\n-\n     { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for filds and fists mnemonics\" >&5\n $as_echo_n \"checking assembler for filds and fists mnemonics... \" >&6; }\n if test \"${gcc_cv_as_ix86_filds+set}\" = set; then :"}, {"sha": "010ecd2ccf609ded1f4d2849a2acc13aba43b55b", "filename": "gcc/configure.ac", "status": "modified", "additions": 28, "deletions": 10, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d704048f0900b88a459a60c5fed0e9b7ed8658/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d704048f0900b88a459a60c5fed0e9b7ed8658/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=f8d704048f0900b88a459a60c5fed0e9b7ed8658", "patch": "@@ -2953,6 +2953,34 @@ if test $gcc_cv_as_eh_frame = buggy; then\n   [Define if your assembler mis-optimizes .eh_frame data.])\n fi\n \n+# Test if the assembler supports the section flag 'e' or #exclude for\n+# specifying an excluded section.\n+gcc_GAS_CHECK_FEATURE([section exclude flag], gcc_cv_as_section_exclude_e,\n+ [2,22,51], [--fatal-warnings],\n+ [.section foo1,\"e\"\n+  .byte 0,0,0,0])\n+if test $gcc_cv_as_section_exclude_e = no; then\n+  case \"${target}\" in\n+    # Solaris as uses #exclude instead.\n+    *-*-solaris2*)\n+      case \"${target}\" in\n+\tsparc*-*-solaris2*)\n+\t  conftest_s='.section \"foo1\", #exclude'\n+\t  ;;\n+\ti?86-*-solaris2* | x86_64-*-solaris2*)\n+\t  conftest_s='.section foo1, #exclude'\n+\t  ;;      \n+      esac\n+      ;;\n+    esac\n+  gcc_GAS_CHECK_FEATURE([section exclude flag], gcc_cv_as_section_exclude_hash,,,\n+    [$conftest_s\n+     .byte 0,0,0,0])\n+fi\n+AC_DEFINE_UNQUOTED(HAVE_GAS_SECTION_EXCLUDE,\n+  [`if test $gcc_cv_as_section_exclude_e = yes || test $gcc_cv_as_section_exclude_hash = yes; then echo 1; else echo 0; fi`],\n+[Define if your assembler supports specifying the exclude section flag.])\n+\n gcc_GAS_CHECK_FEATURE(section merging support, gcc_cv_as_shf_merge,\n  [elf,2,12,0], [--fatal-warnings],\n  [.section .rodata.str, \"aMS\", @progbits, 1])\n@@ -4202,16 +4230,6 @@ foo:\tnop\n       [AC_DEFINE(HAVE_AS_XBRACE_COMMENT_OPTION, 1,\n \t\t[Define if your assembler supports -xbrace_comment option.])])\n \n-    # Test if the assembler supports the section flag 'e' for specifying\n-    # an excluded section.\n-    gcc_GAS_CHECK_FEATURE([.section with e], gcc_cv_as_section_has_e,\n-      [2,22,51], [--fatal-warnings],\n-[.section foo1,\"e\"\n-.byte 0,0,0,0])\n-    AC_DEFINE_UNQUOTED(HAVE_GAS_SECTION_EXCLUDE,\n-      [`if test $gcc_cv_as_section_has_e = yes; then echo 1; else echo 0; fi`],\n-      [Define if your assembler supports specifying the section flag e.])\n-\n     gcc_GAS_CHECK_FEATURE([filds and fists mnemonics],\n        gcc_cv_as_ix86_filds,,,\n        [filds (%ebp); fists (%ebp)],,"}, {"sha": "6b9f87b203f4fd5f60b43d885d95df5c2b5c624b", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d704048f0900b88a459a60c5fed0e9b7ed8658/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d704048f0900b88a459a60c5fed0e9b7ed8658/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=f8d704048f0900b88a459a60c5fed0e9b7ed8658", "patch": "@@ -6449,7 +6449,7 @@ default_elf_asm_named_section (const char *name, unsigned int flags,\n     {\n       if (!(flags & SECTION_DEBUG))\n \t*f++ = 'a';\n-#if defined (HAVE_GAS_SECTION_EXCLUDE) && HAVE_GAS_SECTION_EXCLUDE == 1\n+#if HAVE_GAS_SECTION_EXCLUDE\n       if (flags & SECTION_EXCLUDE)\n \t*f++ = 'e';\n #endif"}]}