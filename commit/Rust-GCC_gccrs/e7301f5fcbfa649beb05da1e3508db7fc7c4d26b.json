{"sha": "e7301f5fcbfa649beb05da1e3508db7fc7c4d26b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTczMDFmNWZjYmZhNjQ5YmViMDVkYTFlMzUwOGRiN2ZjN2M0ZDI2Yg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-12-21T07:01:38Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-12-21T07:01:38Z"}, "message": "poly_int: bit_field_size/offset\n\nverify_expr ensured that the size and offset in gimple BIT_FIELD_REFs\nsatisfied tree_fits_uhwi_p.  This patch extends that so that they can\nbe poly_uint64s, and adds helper routines for accessing them when the\nverify_expr requirements apply.\n\n2017-12-21  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* tree.h (bit_field_size, bit_field_offset): New functions.\n\t* hsa-gen.c (gen_hsa_addr): Use them.\n\t* tree-ssa-forwprop.c (simplify_bitfield_ref): Likewise.\n\t(simplify_vector_constructor): Likewise.\n\t* tree-ssa-sccvn.c (copy_reference_ops_from_ref): Likewise.\n\t* tree-cfg.c (verify_expr): Require the sizes and offsets of a\n\tBIT_FIELD_REF to be poly_uint64s rather than uhwis.\n\t* fold-const.c (fold_ternary_loc): Protect tree_to_uhwi with\n\ttree_fits_uhwi_p.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r255926", "tree": {"sha": "78865bf62d706915d434176a2fbc7d8632a24802", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78865bf62d706915d434176a2fbc7d8632a24802"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7301f5fcbfa649beb05da1e3508db7fc7c4d26b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7301f5fcbfa649beb05da1e3508db7fc7c4d26b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7301f5fcbfa649beb05da1e3508db7fc7c4d26b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7301f5fcbfa649beb05da1e3508db7fc7c4d26b/comments", "author": null, "committer": null, "parents": [{"sha": "f8f667be749428f92a33d6c4ff8b56538f958c10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8f667be749428f92a33d6c4ff8b56538f958c10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8f667be749428f92a33d6c4ff8b56538f958c10"}], "stats": {"total": 78, "additions": 54, "deletions": 24}, "files": [{"sha": "a3ed3cec0b9ef43b7b990e55c0e069377b44ad05", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7301f5fcbfa649beb05da1e3508db7fc7c4d26b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7301f5fcbfa649beb05da1e3508db7fc7c4d26b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e7301f5fcbfa649beb05da1e3508db7fc7c4d26b", "patch": "@@ -1,3 +1,17 @@\n+2017-12-21  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* tree.h (bit_field_size, bit_field_offset): New functions.\n+\t* hsa-gen.c (gen_hsa_addr): Use them.\n+\t* tree-ssa-forwprop.c (simplify_bitfield_ref): Likewise.\n+\t(simplify_vector_constructor): Likewise.\n+\t* tree-ssa-sccvn.c (copy_reference_ops_from_ref): Likewise.\n+\t* tree-cfg.c (verify_expr): Require the sizes and offsets of a\n+\tBIT_FIELD_REF to be poly_uint64s rather than uhwis.\n+\t* fold-const.c (fold_ternary_loc): Protect tree_to_uhwi with\n+\ttree_fits_uhwi_p.\n+\n 2017-12-21  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "b21f35a37360f9df33371dcc232eee0963aaf1a7", "filename": "gcc/fold-const.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7301f5fcbfa649beb05da1e3508db7fc7c4d26b/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7301f5fcbfa649beb05da1e3508db7fc7c4d26b/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=e7301f5fcbfa649beb05da1e3508db7fc7c4d26b", "patch": "@@ -11632,7 +11632,9 @@ fold_ternary_loc (location_t loc, enum tree_code code, tree type,\n          fold (nearly) all BIT_FIELD_REFs.  */\n       if (CONSTANT_CLASS_P (arg0)\n \t  && can_native_interpret_type_p (type)\n-\t  && BITS_PER_UNIT == 8)\n+\t  && BITS_PER_UNIT == 8\n+\t  && tree_fits_uhwi_p (op1)\n+\t  && tree_fits_uhwi_p (op2))\n \t{\n \t  unsigned HOST_WIDE_INT bitpos = tree_to_uhwi (op2);\n \t  unsigned HOST_WIDE_INT bitsize = tree_to_uhwi (op1);"}, {"sha": "155bcdf1df4af35d9337d7ab300846644d2044c2", "filename": "gcc/hsa-gen.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7301f5fcbfa649beb05da1e3508db7fc7c4d26b/gcc%2Fhsa-gen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7301f5fcbfa649beb05da1e3508db7fc7c4d26b/gcc%2Fhsa-gen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhsa-gen.c?ref=e7301f5fcbfa649beb05da1e3508db7fc7c4d26b", "patch": "@@ -1959,8 +1959,8 @@ gen_hsa_addr (tree ref, hsa_bb *hbb, HOST_WIDE_INT *output_bitsize = NULL,\n       goto out;\n     }\n   else if (TREE_CODE (ref) == BIT_FIELD_REF\n-\t   && ((tree_to_uhwi (TREE_OPERAND (ref, 1)) % BITS_PER_UNIT) != 0\n-\t       || (tree_to_uhwi (TREE_OPERAND (ref, 2)) % BITS_PER_UNIT) != 0))\n+\t   && (!multiple_p (bit_field_size (ref), BITS_PER_UNIT)\n+\t       || !multiple_p (bit_field_offset (ref), BITS_PER_UNIT)))\n     {\n       HSA_SORRY_ATV (EXPR_LOCATION (origref),\n \t\t     \"support for HSA does not implement \""}, {"sha": "bed49473d53bd7471058e78b72f03d64922d8e62", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7301f5fcbfa649beb05da1e3508db7fc7c4d26b/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7301f5fcbfa649beb05da1e3508db7fc7c4d26b/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=e7301f5fcbfa649beb05da1e3508db7fc7c4d26b", "patch": "@@ -3170,34 +3170,34 @@ verify_expr (tree *tp, int *walk_subtrees, void *data ATTRIBUTE_UNUSED)\n \t  tree t0 = TREE_OPERAND (t, 0);\n \t  tree t1 = TREE_OPERAND (t, 1);\n \t  tree t2 = TREE_OPERAND (t, 2);\n-\t  if (!tree_fits_uhwi_p (t1)\n-\t      || !tree_fits_uhwi_p (t2)\n+\t  poly_uint64 size, bitpos;\n+\t  if (!poly_int_tree_p (t1, &size)\n+\t      || !poly_int_tree_p (t2, &bitpos)\n \t      || !types_compatible_p (bitsizetype, TREE_TYPE (t1))\n \t      || !types_compatible_p (bitsizetype, TREE_TYPE (t2)))\n \t    {\n \t      error (\"invalid position or size operand to BIT_FIELD_REF\");\n \t      return t;\n \t    }\n \t  if (INTEGRAL_TYPE_P (TREE_TYPE (t))\n-\t      && (TYPE_PRECISION (TREE_TYPE (t))\n-\t\t  != tree_to_uhwi (t1)))\n+\t      && maybe_ne (TYPE_PRECISION (TREE_TYPE (t)), size))\n \t    {\n \t      error (\"integral result type precision does not match \"\n \t\t     \"field size of BIT_FIELD_REF\");\n \t      return t;\n \t    }\n \t  else if (!INTEGRAL_TYPE_P (TREE_TYPE (t))\n \t\t   && TYPE_MODE (TREE_TYPE (t)) != BLKmode\n-\t\t   && (GET_MODE_BITSIZE (TYPE_MODE (TREE_TYPE (t)))\n-\t\t       != tree_to_uhwi (t1)))\n+\t\t   && maybe_ne (GET_MODE_BITSIZE (TYPE_MODE (TREE_TYPE (t))),\n+\t\t\t\tsize))\n \t    {\n \t      error (\"mode size of non-integral result does not \"\n \t\t     \"match field size of BIT_FIELD_REF\");\n \t      return t;\n \t    }\n \t  if (!AGGREGATE_TYPE_P (TREE_TYPE (t0))\n-\t      && (tree_to_uhwi (t1) + tree_to_uhwi (t2)\n-\t\t  > tree_to_uhwi (TYPE_SIZE (TREE_TYPE (t0)))))\n+\t      && maybe_gt (size + bitpos,\n+\t\t\t   tree_to_poly_uint64 (TYPE_SIZE (TREE_TYPE (t0)))))\n \t    {\n \t      error (\"position plus size exceeds size of referenced object in \"\n \t\t     \"BIT_FIELD_REF\");"}, {"sha": "41ee4098950f2eb2d5e4f538be948d994aed08d8", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7301f5fcbfa649beb05da1e3508db7fc7c4d26b/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7301f5fcbfa649beb05da1e3508db7fc7c4d26b/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=e7301f5fcbfa649beb05da1e3508db7fc7c4d26b", "patch": "@@ -1781,7 +1781,7 @@ simplify_bitfield_ref (gimple_stmt_iterator *gsi)\n   gimple *def_stmt;\n   tree op, op0, op1, op2;\n   tree elem_type;\n-  unsigned idx, n, size;\n+  unsigned idx, size;\n   enum tree_code code;\n \n   op = gimple_assign_rhs1 (stmt);\n@@ -1816,12 +1816,11 @@ simplify_bitfield_ref (gimple_stmt_iterator *gsi)\n     return false;\n \n   size = TREE_INT_CST_LOW (TYPE_SIZE (elem_type));\n-  n = TREE_INT_CST_LOW (op1) / size;\n-  if (n != 1)\n+  if (maybe_ne (bit_field_size (op), size))\n     return false;\n-  idx = TREE_INT_CST_LOW (op2) / size;\n \n-  if (code == VEC_PERM_EXPR)\n+  if (code == VEC_PERM_EXPR\n+      && constant_multiple_p (bit_field_offset (op), size, &idx))\n     {\n       tree p, m, tem;\n       unsigned nelts;\n@@ -2074,9 +2073,10 @@ simplify_vector_constructor (gimple_stmt_iterator *gsi)\n \t    return false;\n \t  orig = ref;\n \t}\n-      if (TREE_INT_CST_LOW (TREE_OPERAND (op1, 1)) != elem_size)\n+      unsigned int elt;\n+      if (maybe_ne (bit_field_size (op1), elem_size)\n+\t  || !constant_multiple_p (bit_field_offset (op1), elem_size, &elt))\n \treturn false;\n-      unsigned int elt = TREE_INT_CST_LOW (TREE_OPERAND (op1, 2)) / elem_size;\n       if (elt != i)\n \tmaybe_ident = false;\n       sel.quick_push (elt);"}, {"sha": "89ef26c7a3f616dc46e72b27a2b585300b9eba50", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7301f5fcbfa649beb05da1e3508db7fc7c4d26b/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7301f5fcbfa649beb05da1e3508db7fc7c4d26b/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=e7301f5fcbfa649beb05da1e3508db7fc7c4d26b", "patch": "@@ -779,12 +779,8 @@ copy_reference_ops_from_ref (tree ref, vec<vn_reference_op_s> *result)\n \t  /* Record bits, position and storage order.  */\n \t  temp.op0 = TREE_OPERAND (ref, 1);\n \t  temp.op1 = TREE_OPERAND (ref, 2);\n-\t  if (tree_fits_shwi_p (TREE_OPERAND (ref, 2)))\n-\t    {\n-\t      HOST_WIDE_INT off = tree_to_shwi (TREE_OPERAND (ref, 2));\n-\t      if (off % BITS_PER_UNIT == 0)\n-\t\ttemp.off = off / BITS_PER_UNIT;\n-\t    }\n+\t  if (!multiple_p (bit_field_offset (ref), BITS_PER_UNIT, &temp.off))\n+\t    temp.off = -1;\n \t  temp.reverse = REF_REVERSE_STORAGE_ORDER (ref);\n \t  break;\n \tcase COMPONENT_REF:"}, {"sha": "e8a2470106e437c147f7ee89cf7e9dc07da7d276", "filename": "gcc/tree.h", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7301f5fcbfa649beb05da1e3508db7fc7c4d26b/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7301f5fcbfa649beb05da1e3508db7fc7c4d26b/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=e7301f5fcbfa649beb05da1e3508db7fc7c4d26b", "patch": "@@ -4784,6 +4784,24 @@ poly_int_tree_p (const_tree t)\n   return (TREE_CODE (t) == INTEGER_CST || POLY_INT_CST_P (t));\n }\n \n+/* Return the bit size of BIT_FIELD_REF T, in cases where it is known\n+   to be a poly_uint64.  (This is always true at the gimple level.)  */\n+\n+inline poly_uint64\n+bit_field_size (const_tree t)\n+{\n+  return tree_to_poly_uint64 (TREE_OPERAND (t, 1));\n+}\n+\n+/* Return the starting bit offset of BIT_FIELD_REF T, in cases where it is\n+   known to be a poly_uint64.  (This is always true at the gimple level.)  */\n+\n+inline poly_uint64\n+bit_field_offset (const_tree t)\n+{\n+  return tree_to_poly_uint64 (TREE_OPERAND (t, 2));\n+}\n+\n extern tree strip_float_extensions (tree);\n extern int really_constant_p (const_tree);\n extern bool ptrdiff_tree_p (const_tree, poly_int64_pod *);"}]}