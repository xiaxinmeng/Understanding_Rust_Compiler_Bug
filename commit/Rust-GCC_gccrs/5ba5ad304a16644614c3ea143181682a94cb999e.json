{"sha": "5ba5ad304a16644614c3ea143181682a94cb999e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWJhNWFkMzA0YTE2NjQ0NjE0YzNlYTE0MzE4MTY4MmE5NGNiOTk5ZQ==", "commit": {"author": {"name": "Bernd Edlinger", "email": "bernd.edlinger@hotmail.de", "date": "2019-08-20T16:08:12Z"}, "committer": {"name": "Bernd Edlinger", "email": "edlinger@gcc.gnu.org", "date": "2019-08-20T16:08:12Z"}, "message": "function.c (assign_parm_find_stack_rtl): Use known_eq instead of ==.\n\n2019-08-20  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        * function.c (assign_parm_find_stack_rtl): Use known_eq instead of ==.\n\nFrom-SVN: r274751", "tree": {"sha": "0db5239bba8276ca24fbd65a202356daa26d2dae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0db5239bba8276ca24fbd65a202356daa26d2dae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ba5ad304a16644614c3ea143181682a94cb999e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ba5ad304a16644614c3ea143181682a94cb999e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ba5ad304a16644614c3ea143181682a94cb999e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ba5ad304a16644614c3ea143181682a94cb999e/comments", "author": {"login": "bernd-edlinger", "id": 17638929, "node_id": "MDQ6VXNlcjE3NjM4OTI5", "avatar_url": "https://avatars.githubusercontent.com/u/17638929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bernd-edlinger", "html_url": "https://github.com/bernd-edlinger", "followers_url": "https://api.github.com/users/bernd-edlinger/followers", "following_url": "https://api.github.com/users/bernd-edlinger/following{/other_user}", "gists_url": "https://api.github.com/users/bernd-edlinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/bernd-edlinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bernd-edlinger/subscriptions", "organizations_url": "https://api.github.com/users/bernd-edlinger/orgs", "repos_url": "https://api.github.com/users/bernd-edlinger/repos", "events_url": "https://api.github.com/users/bernd-edlinger/events{/privacy}", "received_events_url": "https://api.github.com/users/bernd-edlinger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "529f304811542ca34030b0dc0a7621503998da66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/529f304811542ca34030b0dc0a7621503998da66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/529f304811542ca34030b0dc0a7621503998da66"}], "stats": {"total": 6, "additions": 5, "deletions": 1}, "files": [{"sha": "7f0686b5efa853ed568e8ea8fb67d716e63eea05", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ba5ad304a16644614c3ea143181682a94cb999e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ba5ad304a16644614c3ea143181682a94cb999e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5ba5ad304a16644614c3ea143181682a94cb999e", "patch": "@@ -1,3 +1,7 @@\n+2019-08-20  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\t* function.c (assign_parm_find_stack_rtl): Use known_eq instead of ==.\n+\n 2019-08-20  Matthew Beliveau  <mbelivea@redhat.com>\n \n \t* tree-ssa-dse.c (dse_optimize_redundant_stores): Improved check to"}, {"sha": "05241a36161b7d45760e4f9e9d822905f2b5e3f2", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ba5ad304a16644614c3ea143181682a94cb999e/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ba5ad304a16644614c3ea143181682a94cb999e/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=5ba5ad304a16644614c3ea143181682a94cb999e", "patch": "@@ -2687,7 +2687,7 @@ assign_parm_find_stack_rtl (tree parm, struct assign_parm_data_one *data)\n \t stack slot boundary, take advantage of that excess alignment.\n \t Don't make any assumptions if STACK_POINTER_OFFSET is in use.  */\n       if (poly_int_rtx_p (offset_rtx, &offset)\n-\t  && STACK_POINTER_OFFSET == 0)\n+\t  && known_eq (STACK_POINTER_OFFSET, 0))\n \t{\n \t  unsigned int offset_align = known_alignment (offset) * BITS_PER_UNIT;\n \t  if (offset_align == 0 || offset_align > STACK_BOUNDARY)"}]}