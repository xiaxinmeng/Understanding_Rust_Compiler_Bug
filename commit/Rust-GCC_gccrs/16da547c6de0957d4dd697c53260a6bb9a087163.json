{"sha": "16da547c6de0957d4dd697c53260a6bb9a087163", "node_id": "C_kwDOANBUbNoAKDE2ZGE1NDdjNmRlMDk1N2Q0ZGQ2OTdjNTMyNjBhNmJiOWEwODcxNjM", "commit": {"author": {"name": "CohenArthur", "email": "arthur.cohen@epita.fr", "date": "2022-05-07T16:45:21Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-05-09T10:35:39Z"}, "message": "macros: Error out when repeating metavars which refer to repetitions\n\nIn the case were a repeting metavar was used as a regular metavar ($var\ninstead of $($var)* for example), the compiler would crash on an\nassertion that $var was only repeating once. We should instead error out\nand point to the user that this is probably not what they intended to\ndo.", "tree": {"sha": "3766599e0ae4c76c50d47e162b23b18ed8fbc749", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3766599e0ae4c76c50d47e162b23b18ed8fbc749"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16da547c6de0957d4dd697c53260a6bb9a087163", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16da547c6de0957d4dd697c53260a6bb9a087163", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16da547c6de0957d4dd697c53260a6bb9a087163", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16da547c6de0957d4dd697c53260a6bb9a087163/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ea940e4dcabbf99fbb44c125a0af7cf82e48146", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ea940e4dcabbf99fbb44c125a0af7cf82e48146", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ea940e4dcabbf99fbb44c125a0af7cf82e48146"}], "stats": {"total": 24, "additions": 24, "deletions": 0}, "files": [{"sha": "b7ab3abc0d9273df2e31b374ed8370be9b0eb817", "filename": "gcc/rust/expand/rust-macro-substitute-ctx.cc", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16da547c6de0957d4dd697c53260a6bb9a087163/gcc%2Frust%2Fexpand%2Frust-macro-substitute-ctx.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16da547c6de0957d4dd697c53260a6bb9a087163/gcc%2Frust%2Fexpand%2Frust-macro-substitute-ctx.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-substitute-ctx.cc?ref=16da547c6de0957d4dd697c53260a6bb9a087163", "patch": "@@ -16,6 +16,21 @@ SubstituteCtx::substitute_metavar (std::unique_ptr<AST::Token> &metavar)\n     }\n   else\n     {\n+      // If we are expanding a metavar which has a lof of matches, we are\n+      // currently expanding a repetition metavar - not a simple metavar. We\n+      // need to error out and inform the user.\n+      // Associated test case for an example: compile/macro-issue1224.rs\n+      if (it->second.get_match_amount () != 1)\n+\t{\n+\t  rust_error_at (metavar->get_locus (),\n+\t\t\t \"metavariable is still repeating at this depth\");\n+\t  rust_inform (\n+\t    metavar->get_locus (),\n+\t    \"you probably forgot the repetition operator: %<%s%s%s%>\", \"$(\",\n+\t    metavar->as_string ().c_str (), \")*\");\n+\t  return expanded;\n+\t}\n+\n       // We only care about the vector when expanding repetitions.\n       // Just access the first element of the vector.\n       auto &frag = it->second.get_single_fragment ();"}, {"sha": "003bbcd5067052ff279cae25af105a18b9287f71", "filename": "gcc/testsuite/rust/compile/macro-issue1224.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16da547c6de0957d4dd697c53260a6bb9a087163/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro-issue1224.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16da547c6de0957d4dd697c53260a6bb9a087163/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro-issue1224.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro-issue1224.rs?ref=16da547c6de0957d4dd697c53260a6bb9a087163", "patch": "@@ -0,0 +1,9 @@\n+macro_rules! impl_uint {\n+    ($($ty:ident),*) => {\n+        impl $ty {} // { dg-error \"metavariable is still repeating at this depth\" }\n+                    // { dg-error \"unrecognised token\" \"\" { target *-*-* } .-1 } // Spurious\n+                    // { dg-error \"could not parse type\" \"\" { target *-*-* } .-2 } // Spurious\n+    };\n+}\n+\n+impl_uint!(u8, u16, u32, u64, u128);"}]}