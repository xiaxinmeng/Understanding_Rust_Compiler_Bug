{"sha": "018086d1d0d90af377905aa43d806a465be17d50", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDE4MDg2ZDFkMGQ5MGFmMzc3OTA1YWE0M2Q4MDZhNDY1YmUxN2Q1MA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-06-10T15:59:30Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-06-10T15:59:30Z"}, "message": "(__sel_register_typed_name): Additional parameter that indicates\nwhether name and type parameters are constant or not.\n\nFrom-SVN: r12262", "tree": {"sha": "95d7a5883e1f77f6dd84baa9a0aa47ebcf3a84e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95d7a5883e1f77f6dd84baa9a0aa47ebcf3a84e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/018086d1d0d90af377905aa43d806a465be17d50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/018086d1d0d90af377905aa43d806a465be17d50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/018086d1d0d90af377905aa43d806a465be17d50", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/018086d1d0d90af377905aa43d806a465be17d50/comments", "author": null, "committer": null, "parents": [{"sha": "1717ec59158d5250140e479fd0fa5e57bc67f4e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1717ec59158d5250140e479fd0fa5e57bc67f4e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1717ec59158d5250140e479fd0fa5e57bc67f4e6"}], "stats": {"total": 53, "additions": 43, "deletions": 10}, "files": [{"sha": "a7229d50f9de4f52a26285d3076c71f05d087331", "filename": "gcc/objc/init.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018086d1d0d90af377905aa43d806a465be17d50/gcc%2Fobjc%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018086d1d0d90af377905aa43d806a465be17d50/gcc%2Fobjc%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Finit.c?ref=018086d1d0d90af377905aa43d806a465be17d50", "patch": "@@ -65,7 +65,7 @@ BOOL __objc_dangling_categories = NO;           /* !T:UNUSED */\n \n extern SEL\n __sel_register_typed_name (const char *name, const char *types, \n-\t\t\t   struct objc_selector *orig);\n+\t\t\t   struct objc_selector *orig, BOOL is_const);\n \n /* Run through the statics list, removing modules as soon as all its statics\n    have been initialized.  */\n@@ -183,8 +183,11 @@ __objc_exec_class (Module_t module)\n \t  const char *name, *type;\n \t  name = (char*)selectors[i].sel_id;\n \t  type = (char*)selectors[i].sel_types;\n+\t  /* Constructors are constant static data so we can safely store\n+\t     pointers to them in the runtime structures. is_const == YES */\n \t  __sel_register_typed_name (name, type, \n-\t\t\t\t     (struct objc_selector*)&(selectors[i]));\n+\t\t\t\t     (struct objc_selector*)&(selectors[i]),\n+\t\t\t\t     YES);\n \t}\n     }\n "}, {"sha": "900ca35d52e144a28d6d333d91b2651af27c6389", "filename": "gcc/objc/runtime.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018086d1d0d90af377905aa43d806a465be17d50/gcc%2Fobjc%2Fruntime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018086d1d0d90af377905aa43d806a465be17d50/gcc%2Fobjc%2Fruntime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fruntime.h?ref=018086d1d0d90af377905aa43d806a465be17d50", "patch": "@@ -79,7 +79,7 @@ extern int __objc_runtime_threads_alive;\n \n BOOL __objc_responds_to (id object, SEL sel); /* for internal use only! */\n SEL  __sel_register_typed_name (const char*, const char*, \n-\t\t\t\tstruct objc_selector*);\n+\t\t\t\tstruct objc_selector*, BOOL is_const);\n \n #endif /* not __objc_runtime_INCLUDE_GNU */\n "}, {"sha": "26cbba83d496d762b2072f1840f03349b6c73946", "filename": "gcc/objc/selector.c", "status": "modified", "additions": 37, "deletions": 7, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/018086d1d0d90af377905aa43d806a465be17d50/gcc%2Fobjc%2Fselector.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/018086d1d0d90af377905aa43d806a465be17d50/gcc%2Fobjc%2Fselector.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fselector.c?ref=018086d1d0d90af377905aa43d806a465be17d50", "patch": "@@ -258,9 +258,13 @@ extern struct sarray* __objc_uninstalled_dtable;\n /* Store the passed selector name in the selector record and return its\n    selector value (value returned by sel_get_uid).\n    Assumes that the calling function has locked down __objc_runtime_mutex. */\n+/* is_const parameter tells us if the name and types parameters\n+   are really constant or not.  If YES then they are constant and\n+   we can just store the pointers.  If NO then we need to copy\n+   name and types because the pointers may disappear later on. */\n SEL\n __sel_register_typed_name (const char *name, const char *types, \n-\t\t\t   struct objc_selector *orig)\n+\t\t\t   struct objc_selector *orig, BOOL is_const)\n {\n   struct objc_selector* j;\n   sidx i;\n@@ -303,7 +307,13 @@ __sel_register_typed_name (const char *name, const char *types,\n \tj = __objc_xmalloc (sizeof (struct objc_selector));\n \n       j->sel_id = (void*)i;\n-      j->sel_types = (const char*)types;\n+      /* Can we use the pointer or must copy types?  Don't copy if NULL */\n+      if ((is_const) || (types == 0))\n+\tj->sel_types = (const char*)types;\n+      else {\n+\tj->sel_types = (char *)__objc_xmalloc(strlen(types)+1);\n+\tstrcpy(j->sel_types, types);\n+      }\n       l = (struct objc_list*)sarray_get (__objc_selector_array, i);\n     }\n   else\n@@ -316,7 +326,13 @@ __sel_register_typed_name (const char *name, const char *types,\n \tj = __objc_xmalloc (sizeof (struct objc_selector));\n \t\n       j->sel_id = (void*)i;\n-      j->sel_types = (const char*)types;\n+      /* Can we use the pointer or must copy types?  Don't copy if NULL */\n+      if ((is_const) || (types == 0))\n+\tj->sel_types = (const char*)types;\n+      else {\n+\tj->sel_types = (char *)__objc_xmalloc(strlen(types)+1);\n+\tstrcpy(j->sel_types, types);\n+      }\n       l = 0;\n     }\n \n@@ -325,11 +341,21 @@ __sel_register_typed_name (const char *name, const char *types,\n   \n   {\n     int is_new = (l == 0);\n+    char *new_name;\n+\n+    /* Can we use the pointer or must copy name?  Don't copy if NULL */\n+    if ((is_const) || (name == 0))\n+      new_name = name;\n+    else {\n+      new_name = (char *)__objc_xmalloc(strlen(name)+1);\n+      strcpy(new_name, name);\n+    }\n+\n     l = list_cons ((void*)j, l);\n-    sarray_at_put_safe (__objc_selector_names, i, (void *) name);\n+    sarray_at_put_safe (__objc_selector_names, i, (void *) new_name);\n     sarray_at_put_safe (__objc_selector_array, i, (void *) l);\n     if (is_new)\n-      hash_add (&__objc_selector_hash, (void *) name, (void *) i);\n+      hash_add (&__objc_selector_hash, (void *) new_name, (void *) i);\n   }\n \n   sarray_realloc(__objc_uninstalled_dtable, __objc_selector_max_index+1);\n@@ -343,7 +369,9 @@ sel_register_name (const char *name)\n   SEL ret;\n     \n   objc_mutex_lock(__objc_runtime_mutex);\n-  ret = __sel_register_typed_name (name, 0, 0);\n+  /* Assume that name is not constant static memory and needs to be\n+     copied before put into a runtime structure.  is_const == NO */\n+  ret = __sel_register_typed_name (name, 0, 0, NO);\n   objc_mutex_unlock(__objc_runtime_mutex);\n   \n   return ret;\n@@ -355,7 +383,9 @@ sel_register_typed_name (const char *name, const char *type)\n   SEL ret;\n     \n   objc_mutex_lock(__objc_runtime_mutex);\n-  ret = __sel_register_typed_name (name, type, 0);\n+  /* Assume that name and type are not constant static memory and need to\n+     be copied before put into a runtime structure.  is_const == NO */\n+  ret = __sel_register_typed_name (name, type, 0, NO);\n   objc_mutex_unlock(__objc_runtime_mutex);\n   \n   return ret;"}]}