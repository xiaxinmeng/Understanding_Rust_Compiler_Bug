{"sha": "4446a13faa6ac84d2ef391bfb330370ec78053ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQ0NmExM2ZhYTZhYzg0ZDJlZjM5MWJmYjMzMDM3MGVjNzgwNTNjYQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-02-06T10:23:17Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-02-06T10:23:17Z"}, "message": "[multiple changes]\n\n2014-02-06  Robert Dewar  <dewar@adacore.com>\n\n\t* casing.adb (Determine_Casing): Consider SPARK_Mode to be\n\tmixed case.\n\n2014-02-06  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch6.adb (Is_Build_In_Place_Function): Predicate is false\n\twhen the function has a foreign convention, but not if only the\n\tlimited return type has such a convention.\n\n2014-02-06  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_ch3.adb (Handle_Late_Controlled_Primitive): Remove local\n\tvariable Spec. Comment reformatting. Use Copy_Separate_Tree\n\trather than New_Copy_Tree when building the corresponding\n\tsubprogram declaration.\n\n2014-02-06  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_prag.adb (Analyze_Global_Item): Remove\n\tthe mode-related checks on abstract states with enabled external\n\tproperties.\n\t(Property_Error): Removed.\n\n2014-02-06  Javier Miranda  <miranda@adacore.com>\n\n\t* lib-xref.adb (Generate_Reference): When\n\tgenerating the reference to the first private entity take care\n\tof handling swapped entities.\n\nFrom-SVN: r207547", "tree": {"sha": "3955586656957f515e4adc2d438b580f8a827213", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3955586656957f515e4adc2d438b580f8a827213"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4446a13faa6ac84d2ef391bfb330370ec78053ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4446a13faa6ac84d2ef391bfb330370ec78053ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4446a13faa6ac84d2ef391bfb330370ec78053ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4446a13faa6ac84d2ef391bfb330370ec78053ca/comments", "author": null, "committer": null, "parents": [{"sha": "e09a559856ab95618cdbc9704b06145cc6c34ca1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e09a559856ab95618cdbc9704b06145cc6c34ca1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e09a559856ab95618cdbc9704b06145cc6c34ca1"}], "stats": {"total": 156, "additions": 78, "deletions": 78}, "files": [{"sha": "463e2689101ea39315d6e8ebb3b8072d2a6037e8", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4446a13faa6ac84d2ef391bfb330370ec78053ca/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4446a13faa6ac84d2ef391bfb330370ec78053ca/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4446a13faa6ac84d2ef391bfb330370ec78053ca", "patch": "@@ -1,3 +1,34 @@\n+2014-02-06  Robert Dewar  <dewar@adacore.com>\n+\n+\t* casing.adb (Determine_Casing): Consider SPARK_Mode to be\n+\tmixed case.\n+\n+2014-02-06  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch6.adb (Is_Build_In_Place_Function): Predicate is false\n+\twhen the function has a foreign convention, but not if only the\n+\tlimited return type has such a convention.\n+\n+2014-02-06  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_ch3.adb (Handle_Late_Controlled_Primitive): Remove local\n+\tvariable Spec. Comment reformatting. Use Copy_Separate_Tree\n+\trather than New_Copy_Tree when building the corresponding\n+\tsubprogram declaration.\n+\n+2014-02-06  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Global_Item): Remove\n+\tthe mode-related checks on abstract states with enabled external\n+\tproperties.\n+\t(Property_Error): Removed.\n+\n+2014-02-06  Javier Miranda  <miranda@adacore.com>\n+\n+\t* lib-xref.adb (Generate_Reference): When\n+\tgenerating the reference to the first private entity take care\n+\tof handling swapped entities.\n+\n 2014-02-06  Sergey Rybin  <rybin@adacore.com frybin>\n \n \t* gnat_ugn.texi, vms_data.ads: Add documentation of -j option for"}, {"sha": "dce1e0bb17493f56aeb54dd7f19c12298e6a7319", "filename": "gcc/ada/casing.adb", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4446a13faa6ac84d2ef391bfb330370ec78053ca/gcc%2Fada%2Fcasing.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4446a13faa6ac84d2ef391bfb330370ec78053ca/gcc%2Fada%2Fcasing.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcasing.adb?ref=4446a13faa6ac84d2ef391bfb330370ec78053ca", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -59,6 +59,14 @@ package body Casing is\n       --  True at start of string, and after an underline character\n \n    begin\n+      --  A special kludge, consider SPARK_Mode to be mixed case\n+\n+      if Ident = \"SPARK_Mode\" then\n+         return Mixed_Case;\n+      end if;\n+\n+      --  Proceed with normal determination\n+\n       for S in Ident'Range loop\n          if Ident (S) = '_' or else Ident (S) = '.' then\n             After_Und := True;"}, {"sha": "39085843ae5584df675642a8f79b60c9b75be15d", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4446a13faa6ac84d2ef391bfb330370ec78053ca/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4446a13faa6ac84d2ef391bfb330370ec78053ca/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=4446a13faa6ac84d2ef391bfb330370ec78053ca", "patch": "@@ -9592,13 +9592,13 @@ package body Exp_Ch6 is\n         or else (Ekind (E) = E_Subprogram_Type\n                   and then Etype (E) /= Standard_Void_Type)\n       then\n-         --  Note: If you have Convention (C) on an inherently limited type,\n-         --  you're on your own. That is, the C code will have to be carefully\n-         --  written to know about the Ada conventions.\n+         --  Note: If the function has a foreign convention, it cannot build\n+         --  its result in place, so you're on your own. On the other hand,\n+         --  if only the return type has a foreign convention, its layout is\n+         --  intended to be compatible with the other language, but the build-\n+         --  in place machinery can ensure that the object is not copied.\n \n-         if Has_Foreign_Convention (E)\n-           or else Has_Foreign_Convention (Etype (E))\n-         then\n+         if Has_Foreign_Convention (E) then\n             return False;\n \n          --  In Ada 2005 all functions with an inherently limited return type"}, {"sha": "fbbdc3fb0236b5568373e237166d79f0b0991ae2", "filename": "gcc/ada/lib-xref.adb", "status": "modified", "additions": 23, "deletions": 9, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4446a13faa6ac84d2ef391bfb330370ec78053ca/gcc%2Fada%2Flib-xref.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4446a13faa6ac84d2ef391bfb330370ec78053ca/gcc%2Fada%2Flib-xref.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.adb?ref=4446a13faa6ac84d2ef391bfb330370ec78053ca", "patch": "@@ -1088,15 +1088,29 @@ package body Lib.Xref is\n               and then Present (First_Private_Entity (E))\n               and then In_Extended_Main_Source_Unit (N)\n             then\n-               Add_Entry\n-                 ((Ent       => Ent,\n-                   Loc       => Sloc (First_Private_Entity (E)),\n-                   Typ       => 'E',\n-                   Eun       => Get_Source_Unit (Def),\n-                   Lun       => Get_Source_Unit (Ref),\n-                   Ref_Scope => Empty,\n-                   Ent_Scope => Empty),\n-                  Ent_Scope_File => No_Unit);\n+               --  Handle case in which the full-view and partial-view of the\n+               --  first private entity are swapped\n+\n+               declare\n+                  First_Private : Entity_Id := First_Private_Entity (E);\n+\n+               begin\n+                  if Is_Private_Type (First_Private)\n+                    and then Present (Full_View (First_Private))\n+                  then\n+                     First_Private := Full_View (First_Private);\n+                  end if;\n+\n+                  Add_Entry\n+                    ((Ent       => Ent,\n+                      Loc       => Sloc (First_Private),\n+                      Typ       => 'E',\n+                      Eun       => Get_Source_Unit (Def),\n+                      Lun       => Get_Source_Unit (Ref),\n+                      Ref_Scope => Empty,\n+                      Ent_Scope => Empty),\n+                     Ent_Scope_File => No_Unit);\n+               end;\n             end if;\n          end if;\n       end if;"}, {"sha": "2f6eedbb5334785e579b85a2141f5828389a784c", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4446a13faa6ac84d2ef391bfb330370ec78053ca/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4446a13faa6ac84d2ef391bfb330370ec78053ca/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=4446a13faa6ac84d2ef391bfb330370ec78053ca", "patch": "@@ -2110,7 +2110,6 @@ package body Sem_Ch3 is\n          Loc       : constant Source_Ptr := Sloc (Body_Id);\n          Params    : constant List_Id    :=\n                        Parameter_Specifications (Body_Spec);\n-         Spec      : Node_Id;\n          Spec_Id   : Entity_Id;\n \n          Dummy : Entity_Id;\n@@ -2119,8 +2118,8 @@ package body Sem_Ch3 is\n          --  spec analysis.\n \n       begin\n-         --  Consider only procedure bodies whose name matches one of type\n-         --  [Limited_]Controlled's primitives.\n+         --  Consider only procedure bodies whose name matches one of the three\n+         --  controlled primitives.\n \n          if Nkind (Body_Spec) /= N_Procedure_Specification\n            or else not Nam_In (Chars (Body_Id), Name_Adjust,\n@@ -2129,15 +2128,16 @@ package body Sem_Ch3 is\n          then\n             return;\n \n-         --  A controlled primitive must have exactly one formal whose type\n-         --  derives from [Limited_]Controlled.\n+         --  A controlled primitive must have exactly one formal\n \n          elsif List_Length (Params) /= 1 then\n             return;\n          end if;\n \n          Dummy := Analyze_Subprogram_Specification (Body_Spec);\n \n+         --  The type of the formal must be derived from [Limited_]Controlled\n+\n          if not Is_Controlled (Etype (Defining_Entity (First (Params)))) then\n             return;\n          end if;\n@@ -2152,16 +2152,13 @@ package body Sem_Ch3 is\n          end if;\n \n          --  At this point the body is known to be a late controlled primitive.\n-         --  Generate a matching spec and insert it before the body.\n-\n-         Spec := New_Copy_Tree (Body_Spec);\n-\n-         Set_Defining_Unit_Name\n-           (Spec, Make_Defining_Identifier (Loc, Chars (Body_Id)));\n+         --  Generate a matching spec and insert it before the body. Note the\n+         --  use of Copy_Separate_Tree - we want an entirely separate semantic\n+         --  tree in this case.\n \n          Insert_Before_And_Analyze (Body_Decl,\n            Make_Subprogram_Declaration (Loc,\n-             Specification => Spec));\n+             Specification => Copy_Separate_Tree (Body_Spec)));\n       end Handle_Late_Controlled_Primitive;\n \n       --------------------------------"}, {"sha": "9549ade0a246e591b50bd794b6052143b44b0efa", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4446a13faa6ac84d2ef391bfb330370ec78053ca/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4446a13faa6ac84d2ef391bfb330370ec78053ca/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=4446a13faa6ac84d2ef391bfb330370ec78053ca", "patch": "@@ -1912,34 +1912,8 @@ package body Sem_Prag is\n            (Item        : Node_Id;\n             Global_Mode : Name_Id)\n          is\n-            procedure Property_Error\n-              (State_Id : Entity_Id;\n-               Prop_Nam : Name_Id);\n-            --  Emit an error concerning state State_Id with enabled property\n-            --  Async_Readers, Effective_Reads or Effective_Writes that is not\n-            --  marked as In_Out or Output item.\n-\n-            --------------------\n-            -- Property_Error --\n-            --------------------\n-\n-            procedure Property_Error\n-              (State_Id : Entity_Id;\n-               Prop_Nam : Name_Id)\n-            is\n-            begin\n-               Error_Msg_Name_1 := Prop_Nam;\n-               Error_Msg_NE\n-                 (\"external state & with enabled property % must have mode \"\n-                  & \"In_Out or Output (SPARK RM 7.1.2(7))\", Item, State_Id);\n-            end Property_Error;\n-\n-            --  Local variables\n-\n             Item_Id : Entity_Id;\n \n-         --  Start of processing for Analyze_Global_Item\n-\n          begin\n             --  Detect one of the following cases\n \n@@ -2018,30 +1992,6 @@ package body Sem_Prag is\n                         Ref      => Item);\n                   end if;\n \n-                  --  Detect an external state with an enabled property that\n-                  --  does not match the mode of the state.\n-\n-                  if Global_Mode = Name_Input then\n-                     if Async_Readers_Enabled (Item_Id) then\n-                        Property_Error (Item_Id, Name_Async_Readers);\n-\n-                     elsif Effective_Reads_Enabled (Item_Id) then\n-                        Property_Error (Item_Id, Name_Effective_Reads);\n-\n-                     elsif Effective_Writes_Enabled (Item_Id) then\n-                        Property_Error (Item_Id, Name_Effective_Writes);\n-                     end if;\n-\n-                  elsif Global_Mode = Name_Output\n-                    and then Async_Writers_Enabled (Item_Id)\n-                  then\n-                     Error_Msg_Name_1 := Name_Async_Writers;\n-                     Error_Msg_NE\n-                       (\"external state & with enabled property % must have \"\n-                        & \"mode Input or In_Out (SPARK RM 7.1.2(7))\",\n-                        Item, Item_Id);\n-                  end if;\n-\n                --  Variable related checks\n \n                else"}]}