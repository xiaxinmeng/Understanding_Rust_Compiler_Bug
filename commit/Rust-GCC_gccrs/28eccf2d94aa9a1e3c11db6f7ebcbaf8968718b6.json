{"sha": "28eccf2d94aa9a1e3c11db6f7ebcbaf8968718b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjhlY2NmMmQ5NGFhOWExZTNjMTFkYjZmN2ViY2JhZjg5Njg3MThiNg==", "commit": {"author": {"name": "Bernhard Reutner-Fischer", "email": "aldot@gcc.gnu.org", "date": "2012-03-15T16:55:12Z"}, "committer": {"name": "Bernhard Reutner-Fischer", "email": "aldot@gcc.gnu.org", "date": "2012-03-15T16:55:12Z"}, "message": "fortran-modules.exp: New file which was forgotten in r185430.\n\n2012-03-15  Bernhard Reutner-Fischer  <aldot@gcc.gnu.org>\n\n        * lib/fortran-modules.exp: New file which was forgotten in r185430.\n\nFrom-SVN: r185439", "tree": {"sha": "1a55580f1958ef68156148f1984b8a4d3883e2ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a55580f1958ef68156148f1984b8a4d3883e2ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28eccf2d94aa9a1e3c11db6f7ebcbaf8968718b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28eccf2d94aa9a1e3c11db6f7ebcbaf8968718b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28eccf2d94aa9a1e3c11db6f7ebcbaf8968718b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28eccf2d94aa9a1e3c11db6f7ebcbaf8968718b6/comments", "author": null, "committer": null, "parents": [{"sha": "df7965e4144004831703ce7ed1d7ea67509c1028", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df7965e4144004831703ce7ed1d7ea67509c1028", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df7965e4144004831703ce7ed1d7ea67509c1028"}], "stats": {"total": 102, "additions": 102, "deletions": 0}, "files": [{"sha": "f54a307a3987139e550d203074d58f855f9ad180", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28eccf2d94aa9a1e3c11db6f7ebcbaf8968718b6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28eccf2d94aa9a1e3c11db6f7ebcbaf8968718b6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=28eccf2d94aa9a1e3c11db6f7ebcbaf8968718b6", "patch": "@@ -1,3 +1,7 @@\n+2012-03-15  Bernhard Reutner-Fischer  <aldot@gcc.gnu.org>\n+\n+\t* lib/fortran-modules.exp: New file which was forgotten in r185430.\n+\n 2012-03-15  Ira Rosen  <irar@il.ibm.com>\n \t    Ulrich Weigand  <ulrich.weigand@linaro.org>\n "}, {"sha": "4069fb206a965b8a3a309582fa0bf404dcc96b12", "filename": "gcc/testsuite/lib/fortran-modules.exp", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28eccf2d94aa9a1e3c11db6f7ebcbaf8968718b6/gcc%2Ftestsuite%2Flib%2Ffortran-modules.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28eccf2d94aa9a1e3c11db6f7ebcbaf8968718b6/gcc%2Ftestsuite%2Flib%2Ffortran-modules.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ffortran-modules.exp?ref=28eccf2d94aa9a1e3c11db6f7ebcbaf8968718b6", "patch": "@@ -0,0 +1,98 @@\n+#   Copyright (C) 2012 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# helper to deal with fortran modules\n+\n+# Remove files for specified Fortran modules.\n+proc cleanup-modules { modlist } {\n+    global clean\n+    foreach mod [concat $modlist $clean] {\n+\tset m [string tolower $mod].mod\n+\tverbose \"cleanup-module `$m'\" 2\n+\tif [is_remote host] {\n+\t    remote_file host delete $m\n+\t}\n+\tremote_file build delete $m\n+    }\n+}\n+\n+proc keep-modules { modlist } {\n+    global clean\n+    # if the modlist is empty, keep everything\n+    if {[llength $modlist] < 1} {\n+\tset clean {}\n+    } else {\n+\tset cleansed {}\n+\tforeach cl $clean {\n+\t    if {[lsearch $cl $modlist] < 0} {\n+\t\tlappend cleansed $cl\n+\t    }\n+\t}\n+\tif {[llength $clean] == [llength $cleansed]} {\n+\t    warning \"keep-modules had no effect?! Possible typo in module name.\"\n+\t}\n+\tset clean $cleansed\n+    }\n+}\n+\n+# collect all module names from a source-file\n+proc list-module-names { files } {\n+    global clean\n+    set clean {}\n+    foreach file $files {\n+\tforeach mod [list-module-names-1 $file] {\n+\t    if {[lsearch $clean $mod] < 0} {\n+\t\tlappend clean $mod\n+\t    }\n+\t}\n+    }\n+    return [join $clean \" \"]\n+}\n+\n+proc list-module-names-1 { file } {\n+    set result {}\n+    set tmp [grep $file \"^\\[ \\t\\]*((#)?\\[ \\t\\]*include|\\[mM\\]\\[oO\\]\\[dD\\]\\[uU\\]\\[lL\\]\\[eE\\](?!\\[ \\t\\]+\\[pP\\]\\[rR\\]\\[oO\\]\\[cC\\]\\[eE\\]\\[dD\\]\\[uU\\]\\[rR\\]\\[eE\\]\\[ \\t\\]+))\\[ \\t\\]+.*\" line]\n+    if {![string match \"\" $tmp]} {\n+\tforeach i $tmp {\n+\t    regexp \"(\\[0-9\\]+)\\[ \\t\\]+(?:(?:#)?\\[ \\t\\]*include\\[ \\t\\]+)\\[\\\"\\](\\[^\\\"\\]*)\\[\\\"\\]\" $i dummy lineno include_file\n+\t    if {[info exists include_file]} {\n+\t\tset dir [file dirname $file]\n+\t\tset inc \"$dir/$include_file\"\n+\t\tunset include_file\n+\t\tif {![file readable $inc]} {\n+\t\t    warning \"Line $lineno includes unreadable file `$inc'\"\n+\t\t    continue\n+\t\t}\n+\t\tverbose \"Line $lineno includes `$inc'\" 3\n+\t\tforeach mod [list-module-names-1 $inc] {\n+\t\t    if {[lsearch $result $mod] < 0} {\n+\t\t\tlappend result $mod\n+\t\t    }\n+\t\t}\n+\t\tcontinue\n+\t    }\n+\t    regexp \"(\\[0-9\\]+)\\[ \\t\\]+(?:(\\[mM\\]\\[oO\\]\\[dD\\]\\[uU\\]\\[lL\\]\\[eE\\]\\[ \\t\\]+(?!\\[pP\\]\\[rR\\]\\[oO\\]\\[cC\\]\\[eE\\]\\[dD\\]\\[uU\\]\\[rR\\]\\[eE\\]\\[ \\t\\]+)))(\\[^ \\t;\\]*)\" $i i lineno keyword mod\n+\t    if {![info exists lineno]} {\n+\t\tcontinue\n+\t    }\n+\t    verbose \"Line $lineno mentions module `$mod'\" 3\n+\t    if {[lsearch $result $mod] < 0} {\n+\t\tlappend result $mod\n+\t    }\n+\t}\n+    }\n+    return $result\n+}"}]}