{"sha": "72a0aac6d24eb609d28b9c034c98ae29257db4a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzJhMGFhYzZkMjRlYjYwOWQyOGI5YzAzNGM5OGFlMjkyNTdkYjRhNg==", "commit": {"author": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1998-12-07T15:43:11Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1998-12-07T15:43:11Z"}, "message": "constants.c (find_methodref_index): When the class is an interface...\n\n/\n\t* constants.c (find_methodref_index):  When the class is an interface,\n\tgenerate CONSTANT_InterfaceMethodref instead of a CONSTANT_MethodRef.\n\t* decl.c (finit_identifier_node):  Use \"$finit$\", rather than\n\t\"<finit>\" (which Sun's verifier rejects).\n\t* parse.y (maybe_generate_finit):  Leave out meaningless final flag.\n\t(generate_field_initialization_code):  Removed.\n\t(fix_constructors)  Don't add call to $finit$ here (wrong order).\n\t(patch_method_invocation):  Add $finit$ call here.\n\t* java-tree.h (CALL_USING_SUPER):  New macro.\n\t* parse.y (patch_invoke):  Remove im local variable.\n \t(patch_method_invocation, patch_invoke):  Don't pass super parameter.\n\t(patch_invoke):  Use CALL_USING_SUPER instead of from_super parameter.\n\t(resolve_qualified_expression_name):  Maybe set CALL_USING_SUPER.\n\t* jcf-write.c (get_access_flags):  Fix typo ACC_PUBLIC -> ACC_FINAL.\n\t* parse.y (java_complete_tree):  Don't complain about unreachable\n\tstatement if it is empty_stmt_node.\n\t* jcf-write.c (find_constant_wide):  New function.\n\t(push_long_const):  Use find_constant_wide.\n\t* jcf-write.c (generate_bytecode_insn):  Fix bug in switch handling.\n\t(generate_bytecode_insn):  Use correct dup variant for MODIFY_EXPR.\n\tAdd \"redundant\" NOTE_PUSH/NOTE_POP uses so code_SP_max gets set.\n\tEmit invokeinterface when calling an interface method.\n\tEmit invokespecial also when calling super or private methods.\n\t* jcf-write.c (generate_classfile):  Emit ConstantValue attributes.\n\nFrom-SVN: r24160", "tree": {"sha": "33f45545a526236474f5118d8bbe2be9bf3f2ecc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33f45545a526236474f5118d8bbe2be9bf3f2ecc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72a0aac6d24eb609d28b9c034c98ae29257db4a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72a0aac6d24eb609d28b9c034c98ae29257db4a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72a0aac6d24eb609d28b9c034c98ae29257db4a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72a0aac6d24eb609d28b9c034c98ae29257db4a6/comments", "author": null, "committer": null, "parents": [{"sha": "2dfaf550bdee9b83e6a4a25f71f2fc8e9e9271d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dfaf550bdee9b83e6a4a25f71f2fc8e9e9271d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2dfaf550bdee9b83e6a4a25f71f2fc8e9e9271d0"}], "stats": {"total": 9, "additions": 6, "deletions": 3}, "files": [{"sha": "8eb9f5447da2083c175b9721df8584c21c6a507f", "filename": "gcc/java/constants.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72a0aac6d24eb609d28b9c034c98ae29257db4a6/gcc%2Fjava%2Fconstants.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72a0aac6d24eb609d28b9c034c98ae29257db4a6/gcc%2Fjava%2Fconstants.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fconstants.c?ref=72a0aac6d24eb609d28b9c034c98ae29257db4a6", "patch": "@@ -190,13 +190,16 @@ find_methodref_index (cpool, decl)\n      CPool *cpool;\n      tree decl;\n {\n-  int class_index = find_class_constant (cpool, DECL_CONTEXT (decl));\n+  tree mclass = DECL_CONTEXT (decl);\n+  int class_index = find_class_constant (cpool, mclass);\n   tree name = DECL_CONSTRUCTOR_P (decl) ? init_identifier_node\n     : DECL_NAME (decl);\n   int name_type_index\n     = find_name_and_type_constant (cpool, name, TREE_TYPE (decl));\n-  /* Methodref or INterfacemethodRef - FIXME */\n-  return find_constant1 (cpool, CONSTANT_Methodref,\n+  return find_constant1 (cpool,\n+\t\t\t CLASS_INTERFACE (TYPE_NAME (mclass))\n+\t\t\t ? CONSTANT_InterfaceMethodref\n+\t\t\t : CONSTANT_Methodref,\n \t\t\t (class_index << 16) | name_type_index);\n }\n "}]}