{"sha": "f91d04e77d33e9f09758b6e5cb69a7d5555a3e39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjkxZDA0ZTc3ZDMzZTlmMDk3NThiNmU1Y2I2OWE3ZDU1NTVhM2UzOQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2016-02-22T14:14:51Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2016-02-22T14:14:51Z"}, "message": "HSA: fix emission of clrsb{l,ll} builtins\n\n\t* hsa-gen.c (gen_hsa_clrsb): In case of zero value,\n\treturn bitsize - 1 as the return value.\n\nFrom-SVN: r233602", "tree": {"sha": "1d2d1f5ec203cf55ce55834f79bf5d62393d0aab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d2d1f5ec203cf55ce55834f79bf5d62393d0aab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f91d04e77d33e9f09758b6e5cb69a7d5555a3e39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f91d04e77d33e9f09758b6e5cb69a7d5555a3e39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f91d04e77d33e9f09758b6e5cb69a7d5555a3e39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f91d04e77d33e9f09758b6e5cb69a7d5555a3e39/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f88d45dc171e59e120817912115550b943c30b22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f88d45dc171e59e120817912115550b943c30b22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f88d45dc171e59e120817912115550b943c30b22"}], "stats": {"total": 14, "additions": 11, "deletions": 3}, "files": [{"sha": "32304003630639d086b6becb4e64054570eed1a8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f91d04e77d33e9f09758b6e5cb69a7d5555a3e39/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f91d04e77d33e9f09758b6e5cb69a7d5555a3e39/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f91d04e77d33e9f09758b6e5cb69a7d5555a3e39", "patch": "@@ -1,3 +1,8 @@\n+2016-02-22  Martin Liska  <mliska@suse.cz>\n+\n+\t* hsa-gen.c (gen_hsa_clrsb): In case of zero value,\n+\treturn bitsize - 1 as the return value.\n+\n 2016-02-22  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/69806"}, {"sha": "28e8b6f92ad600beecb35248653a0cfba8b85a7a", "filename": "gcc/hsa-gen.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f91d04e77d33e9f09758b6e5cb69a7d5555a3e39/gcc%2Fhsa-gen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f91d04e77d33e9f09758b6e5cb69a7d5555a3e39/gcc%2Fhsa-gen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhsa-gen.c?ref=f91d04e77d33e9f09758b6e5cb69a7d5555a3e39", "patch": "@@ -4055,7 +4055,9 @@ gen_hsa_clrsb (gcall *call, hsa_bb *hbb)\n   hsa_op_with_type *arg = hsa_reg_or_immed_for_gimple_op (rhs1, hbb);\n   BrigType16_t bittype = hsa_bittype_for_type (arg->m_type);\n   unsigned bitsize = tree_to_uhwi (TYPE_SIZE (TREE_TYPE (rhs1)));\n-  gcc_checking_assert (bitsize >= 32);\n+\n+  /* FIRSTBIT instruction is defined just for 32 and 64-bits wide integers.  */\n+  gcc_checking_assert (bitsize == 32 || bitsize == 64);\n \n   /* Set true to MOST_SIG if the most significant bit is set to one.  */\n   hsa_op_immed *c = new hsa_op_immed (1ul << (bitsize - 1),\n@@ -4098,9 +4100,10 @@ gen_hsa_clrsb (gcall *call, hsa_bb *hbb)\n \t\t\t  new hsa_op_immed (0, arg->m_type));\n   hbb->append_insn (cmp);\n \n-  /* Return the number of leading bits, or 31 if the input value is zero.  */\n+  /* Return the number of leading bits,\n+     or (bitsize - 1) if the input value is zero.  */\n   cmov = new hsa_insn_basic (4, BRIG_OPCODE_CMOV, BRIG_TYPE_B32, NULL, is_zero,\n-\t\t\t     new hsa_op_immed (31, BRIG_TYPE_U32),\n+\t\t\t     new hsa_op_immed (bitsize - 1, BRIG_TYPE_U32),\n \t\t\t     leading_bits->get_in_type (BRIG_TYPE_B32, hbb));\n   hbb->append_insn (cmov);\n   cmov->set_output_in_type (dest, 0, hbb);"}]}