{"sha": "4e7edcca305b9121c314ca5762dc45e426c20065", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGU3ZWRjY2EzMDViOTEyMWMzMTRjYTU3NjJkYzQ1ZTQyNmMyMDA2NQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2004-03-16T09:22:36Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2004-03-16T09:22:36Z"}, "message": "re PR target/14599 (ieee/20000320-1.c fails for -mips16 using -O2 and above)\n\n\tPR target/14599\n\t* config/mips/mips.md (UNSPEC_GP): New constant.\n\t* config/mips/mips.c (CONST_GP_P): Expect the CONST to contain\n\tan UNSPEC instead of (reg $gp).\n\t(mips16_gp_pseudo_reg): Change accordingly.\n\t(print_operand): Print $gp directly when handling CONST_GP_P.\n\nFrom-SVN: r79527", "tree": {"sha": "aa18b72a10946f018b0da63596169d5b363804bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa18b72a10946f018b0da63596169d5b363804bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e7edcca305b9121c314ca5762dc45e426c20065", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e7edcca305b9121c314ca5762dc45e426c20065", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e7edcca305b9121c314ca5762dc45e426c20065", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e7edcca305b9121c314ca5762dc45e426c20065/comments", "author": null, "committer": null, "parents": [{"sha": "3704aae954e07db1b797e5cc1750bcf4f2a88cc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3704aae954e07db1b797e5cc1750bcf4f2a88cc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3704aae954e07db1b797e5cc1750bcf4f2a88cc1"}], "stats": {"total": 30, "additions": 21, "deletions": 9}, "files": [{"sha": "e56a4a9cffc8fa4df9c2af569605d084897061e4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e7edcca305b9121c314ca5762dc45e426c20065/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e7edcca305b9121c314ca5762dc45e426c20065/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4e7edcca305b9121c314ca5762dc45e426c20065", "patch": "@@ -1,9 +1,18 @@\n-2004-03-16 Richard Zidlicky <rz@linux-m68k.org>\n+2004-03-16  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\tPR target/14599\n+\t* config/mips/mips.md (UNSPEC_GP): New constant.\n+\t* config/mips/mips.c (CONST_GP_P): Expect the CONST to contain\n+\tan UNSPEC instead of (reg $gp).\n+\t(mips16_gp_pseudo_reg): Change accordingly.\n+\t(print_operand): Print $gp directly when handling CONST_GP_P.\n+\n+2004-03-16  Richard Zidlicky  <rz@linux-m68k.org>\n \n \t* config.gcc, config/m68k/linux.h: Implement with-cpu for m68k-linux.\n \t* longlong.h: Make code 68060 clean when compiling for m68060.\n \n-2004-03-16   Richard Zidlicky  <rz@linux-m68k.org>\n+2004-03-16  Richard Zidlicky  <rz@linux-m68k.org>\n \n \t* config/m68k/m68k.md: Fix constraints for bitfield instructions.\n \t* doc/md.texi: Clarify description of \"i\" constraint."}, {"sha": "c11a65960a23240c8eb7f7b8f380533e23b85564", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e7edcca305b9121c314ca5762dc45e426c20065/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e7edcca305b9121c314ca5762dc45e426c20065/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=4e7edcca305b9121c314ca5762dc45e426c20065", "patch": "@@ -87,10 +87,12 @@ enum internal_test {\n #define UNSPEC_ADDRESS_TYPE(X) \\\n   ((enum mips_symbol_type) (XINT (X, 1) - UNSPEC_ADDRESS_FIRST))\n \n-/* True if X is (const $gp).  This is used to initialize the mips16\n-   gp pseudo register.  */\n+/* True if X is (const (unspec [(const_int 0)] UNSPEC_GP)).  This is used\n+   to initialize the mips16 gp pseudo register.  */\n #define CONST_GP_P(X) \\\n-  (GET_CODE (X) == CONST && XEXP (X, 0) == pic_offset_table_rtx)\n+  (GET_CODE (X) == CONST\t\t\t\\\n+   && GET_CODE (XEXP (X, 0)) == UNSPEC\t\t\\\n+   && XINT (XEXP (X, 0), 1) == UNSPEC_GP)\n \n /* The maximum distance between the top of the stack frame and the\n    value $sp has when we save & restore registers.\n@@ -5564,7 +5566,7 @@ print_operand (FILE *file, rtx op, int letter)\n     fputs (code == EQ ? \"t\" : \"f\", file);\n \n   else if (CONST_GP_P (op))\n-    print_operand (file, XEXP (op, 0), letter);\n+    fputs (reg_names[GLOBAL_POINTER_REGNUM], file);\n \n   else\n     output_addr_const (file, op);\n@@ -7799,18 +7801,18 @@ mips16_gp_pseudo_reg (void)\n {\n   if (cfun->machine->mips16_gp_pseudo_rtx == NULL_RTX)\n     {\n-      rtx const_gp;\n+      rtx unspec;\n       rtx insn, scan;\n \n       cfun->machine->mips16_gp_pseudo_rtx = gen_reg_rtx (Pmode);\n       RTX_UNCHANGING_P (cfun->machine->mips16_gp_pseudo_rtx) = 1;\n \n       /* We want to initialize this to a value which gcc will believe\n          is constant.  */\n-      const_gp = gen_rtx_CONST (Pmode, pic_offset_table_rtx);\n       start_sequence ();\n+      unspec = gen_rtx_UNSPEC (VOIDmode, gen_rtvec (1, const0_rtx), UNSPEC_GP);\n       emit_move_insn (cfun->machine->mips16_gp_pseudo_rtx,\n-\t\t      const_gp);\n+\t\t      gen_rtx_CONST (Pmode, unspec));\n       insn = get_insns ();\n       end_sequence ();\n "}, {"sha": "5b3c8465226f6bde2ccaf34e1fbd43815017257e", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e7edcca305b9121c314ca5762dc45e426c20065/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e7edcca305b9121c314ca5762dc45e426c20065/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=4e7edcca305b9121c314ca5762dc45e426c20065", "patch": "@@ -56,6 +56,7 @@\n    (UNSPEC_LOADGP\t\t26)\n    (UNSPEC_LOAD_CALL\t\t27)\n    (UNSPEC_LOAD_GOT\t\t28)\n+   (UNSPEC_GP\t\t\t29)\n \n    (UNSPEC_ADDRESS_FIRST\t100)\n "}]}