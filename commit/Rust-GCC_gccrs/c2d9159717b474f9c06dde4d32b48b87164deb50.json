{"sha": "c2d9159717b474f9c06dde4d32b48b87164deb50", "node_id": "C_kwDOANBUbNoAKGMyZDkxNTk3MTdiNDc0ZjljMDZkZGU0ZDMyYjQ4Yjg3MTY0ZGViNTA", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-01-21T10:16:50Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-01-21T10:16:50Z"}, "message": "optabs: Don't create pseudos in prepare_cmp_insn when not allowed [PR102478]\n\ncond traps can be created during ce3 after reload (and e.g. PR103028\nrecently fixed some ce3 cond trap related bug, so I think often that\nworks fine and we shouldn't disable cond traps after RA altogether),\nbut it calls prepare_cmp_insn.  This function can fail, so I don't\nsee why we couldn't make it work after RA (in most cases it already\njust works).  The first hunk is just an optimization which doesn't\nmake sense after RA, so I've guarded it with can_create_pseudo_p.\nThe second hunk is just a theoretical case, I don't have a testcase for it.\nprepare_cmp_insn has some other spots that can create pseudos, like when\nboth operands have VOIDmode, or when it is BLKmode comparison, or\nnot OPTAB_DIRECT, but I think none of that applies to ce3, we punt on\nBLKmode earlier, use OPTAB_DIRECT and shouldn't be comparing two\nVOIDmode CONST_INTs.\n\n2022-01-21  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR rtl-optimization/102478\n\t* optabs.cc (prepare_cmp_insn): If !can_create_pseudo_p (), don't\n\tforce_reg constants and for -fnon-call-exceptions fail if copy_to_reg\n\twould be needed.\n\n\t* gcc.dg/pr102478.c: New test.", "tree": {"sha": "e5a8fa24b2029bc83a4bb9dce2653805e0b4d21b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5a8fa24b2029bc83a4bb9dce2653805e0b4d21b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2d9159717b474f9c06dde4d32b48b87164deb50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2d9159717b474f9c06dde4d32b48b87164deb50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2d9159717b474f9c06dde4d32b48b87164deb50", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2d9159717b474f9c06dde4d32b48b87164deb50/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f45deb2aed804b185e7dabd2392bfbe14e9bb57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f45deb2aed804b185e7dabd2392bfbe14e9bb57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f45deb2aed804b185e7dabd2392bfbe14e9bb57"}], "stats": {"total": 37, "additions": 35, "deletions": 2}, "files": [{"sha": "3d8fa3abdfeaf245fd0ca5b2e5765502bfc54d6c", "filename": "gcc/optabs.cc", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2d9159717b474f9c06dde4d32b48b87164deb50/gcc%2Foptabs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2d9159717b474f9c06dde4d32b48b87164deb50/gcc%2Foptabs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.cc?ref=c2d9159717b474f9c06dde4d32b48b87164deb50", "patch": "@@ -4398,12 +4398,14 @@ prepare_cmp_insn (rtx x, rtx y, enum rtx_code comparison, rtx size,\n   /* If we are optimizing, force expensive constants into a register.  */\n   if (CONSTANT_P (x) && optimize\n       && (rtx_cost (x, mode, COMPARE, 0, optimize_insn_for_speed_p ())\n-          > COSTS_N_INSNS (1)))\n+          > COSTS_N_INSNS (1))\n+      && can_create_pseudo_p ())\n     x = force_reg (mode, x);\n \n   if (CONSTANT_P (y) && optimize\n       && (rtx_cost (y, mode, COMPARE, 1, optimize_insn_for_speed_p ())\n-          > COSTS_N_INSNS (1)))\n+          > COSTS_N_INSNS (1))\n+      && can_create_pseudo_p ())\n     y = force_reg (mode, y);\n \n   /* Don't let both operands fail to indicate the mode.  */\n@@ -4472,6 +4474,8 @@ prepare_cmp_insn (rtx x, rtx y, enum rtx_code comparison, rtx size,\n      compare and branch in different basic blocks.  */\n   if (cfun->can_throw_non_call_exceptions)\n     {\n+      if (!can_create_pseudo_p () && (may_trap_p (x) || may_trap_p (y)))\n+\tgoto fail;\n       if (may_trap_p (x))\n \tx = copy_to_reg (x);\n       if (may_trap_p (y))"}, {"sha": "43bc49b584df990c6f92970b65790a9abe69875c", "filename": "gcc/testsuite/gcc.dg/pr102478.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2d9159717b474f9c06dde4d32b48b87164deb50/gcc%2Ftestsuite%2Fgcc.dg%2Fpr102478.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2d9159717b474f9c06dde4d32b48b87164deb50/gcc%2Ftestsuite%2Fgcc.dg%2Fpr102478.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr102478.c?ref=c2d9159717b474f9c06dde4d32b48b87164deb50", "patch": "@@ -0,0 +1,29 @@\n+/* PR rtl-optimization/102478 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-if-conversion -Wno-div-by-zero\" } */\n+\n+unsigned a, b, c;\n+\n+void\n+foo (void)\n+{\n+  c |= __builtin_expect (65535 / a, 0) && 0 / 0;\n+  b = 0;\n+}\n+\n+void\n+bar (void)\n+{\n+  if (a <= 65535)\n+    __builtin_trap ();\n+  b = 0;\n+}\n+\n+void\n+baz (void)\n+{\n+  if (a > 65535)\n+    b = 0;\n+  else\n+    __builtin_trap ();\n+}"}]}