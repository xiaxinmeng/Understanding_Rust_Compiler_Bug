{"sha": "f79e14e39d4f11491b0e9dee7db919153132f105", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjc5ZTE0ZTM5ZDRmMTE0OTFiMGU5ZGVlN2RiOTE5MTUzMTMyZjEwNQ==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1996-04-15T17:49:08Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1996-04-15T17:49:08Z"}, "message": "collect2.c: #include \"gansidecl.h\".\n\n\t* collect2.c: #include \"gansidecl.h\".\n\t(const,PROTO): Delete.\n\t(P_tmpdir): Delete.\n\t(choose_temp_base): Declare as extern, delete internal copy.\n\t(main): Update call to choose_temp_base.\n\nFrom-SVN: r11789", "tree": {"sha": "f40c67e91d5eefc142daeeb4da619d68e890fb5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f40c67e91d5eefc142daeeb4da619d68e890fb5d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f79e14e39d4f11491b0e9dee7db919153132f105", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f79e14e39d4f11491b0e9dee7db919153132f105", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f79e14e39d4f11491b0e9dee7db919153132f105", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f79e14e39d4f11491b0e9dee7db919153132f105/comments", "author": null, "committer": null, "parents": [{"sha": "dae14688257ac3599b8e42906bf4521c689ef9cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dae14688257ac3599b8e42906bf4521c689ef9cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dae14688257ac3599b8e42906bf4521c689ef9cf"}], "stats": {"total": 62, "additions": 4, "deletions": 58}, "files": [{"sha": "59ea363a5ab751b4110ea6edb06b097566700e7e", "filename": "gcc/collect2.c", "status": "modified", "additions": 4, "deletions": 58, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f79e14e39d4f11491b0e9dee7db919153132f105/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f79e14e39d4f11491b0e9dee7db919153132f105/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=f79e14e39d4f11491b0e9dee7db919153132f105", "patch": "@@ -40,6 +40,7 @@ Boston, MA 02111-1307, USA.  */\n \n #include \"demangle.h\"\n #include \"obstack.h\"\n+#include \"gansidecl.h\"\n \n #ifndef errno\n extern int errno;\n@@ -60,23 +61,10 @@ char *strerror();\n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n \n-#if !defined (__STDC__) && !defined (const)\n-#define const\n-#endif\n-\n #ifdef USG\n #define vfork fork\n #endif\n \n-/* Add prototype support.  */\n-#ifndef PROTO\n-#if defined (USE_PROTOTYPES) ? USE_PROTOTYPES : defined (__STDC__)\n-#define PROTO(ARGS) ARGS\n-#else\n-#define PROTO(ARGS) ()\n-#endif\n-#endif\n-\n #ifndef R_OK\n #define R_OK 4\n #define W_OK 2\n@@ -96,13 +84,7 @@ char *strerror();\n #define WEXITSTATUS(S) (((S) & 0xff00) >> 8)\n #endif\n \n-/* On MSDOS, write temp files in current dir\n-   because there's no place else we can expect to use.  */\n-#ifdef __MSDOS__\n-#ifndef P_tmpdir\n-#define P_tmpdir \"./\"\n-#endif\n-#endif\n+extern char *choose_temp_base ();\n \f\n /* On certain systems, we have code that works by scanning the object file\n    directly.  But this code uses system-specific header files and library\n@@ -296,7 +278,6 @@ void collect_execute\t\tPROTO((char *, char **, char *));\n void dump_file\t\t\tPROTO((char *));\n static void handler\t\tPROTO((int));\n static int is_ctor_dtor\t\tPROTO((char *));\n-static void choose_temp_base\tPROTO((void));\n static int is_in_prefix_list\tPROTO((struct path_prefix *, char *, int));\n static char *find_a_file\tPROTO((struct path_prefix *, char *));\n static void add_prefix\t\tPROTO((struct path_prefix *, char *));\n@@ -625,42 +606,6 @@ is_ctor_dtor (s)\n     }\n   return 0;\n }\n-\n-\f\n-/* Compute a string to use as the base of all temporary file names.\n-   It is substituted for %g.  */\n-\n-static void\n-choose_temp_base ()\n-{\n-  char *base = getenv (\"TMPDIR\");\n-  int len;\n-\n-  if (base == (char *)0)\n-    {\n-#ifdef P_tmpdir\n-      if (access (P_tmpdir, R_OK | W_OK) == 0)\n-\tbase = P_tmpdir;\n-#endif\n-      if (base == (char *)0)\n-\t{\n-\t  if (access (\"/usr/tmp\", R_OK | W_OK) == 0)\n-\t    base = \"/usr/tmp/\";\n-\t  else\n-\t    base = \"/tmp/\";\n-\t}\n-    }\n-\n-  len = strlen (base);\n-  temp_filename = xmalloc (len + sizeof(\"/ccXXXXXX\") + 1);\n-  strcpy (temp_filename, base);\n-  if (len > 0 && temp_filename[len-1] != '/')\n-    temp_filename[len++] = '/';\n-  strcpy (temp_filename + len, \"ccXXXXXX\");\n-\n-  mktemp (temp_filename);\n-  temp_filename_length = strlen (temp_filename);\n-}\n \f\n /* Routine to add variables to the environment.  */\n \n@@ -1200,7 +1145,8 @@ main (argc, argv)\n   *ld1++ = *ld2++ = ld_file_name;\n \n   /* Make temp file names. */\n-  choose_temp_base ();\n+  temp_filename = choose_temp_base ();\n+  temp_filename_length = strlen (temp_filename);\n   c_file = xcalloc (temp_filename_length + sizeof (\".c\"), 1);\n   o_file = xcalloc (temp_filename_length + sizeof (\".o\"), 1);\n   export_file = xmalloc (temp_filename_length + sizeof (\".x\"));"}]}