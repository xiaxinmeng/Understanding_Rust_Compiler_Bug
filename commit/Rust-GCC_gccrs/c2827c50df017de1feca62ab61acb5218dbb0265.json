{"sha": "c2827c50df017de1feca62ab61acb5218dbb0265", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzI4MjdjNTBkZjAxN2RlMWZlY2E2MmFiNjFhY2I1MjE4ZGJiMDI2NQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1996-03-20T18:15:13Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1996-03-20T18:15:13Z"}, "message": "pa.c (hppa_legitimize_address): Don't lose for x[n-const] when n-const will not be shifted.\n\n        * pa.c (hppa_legitimize_address): Don't lose for x[n-const]\n        when n-const will not be shifted.  Don't pessimize code for\n        x[n-const] when const is small.\n\nFrom-SVN: r11579", "tree": {"sha": "c1e0b43dacc1c45c82e64084f9e0f4c007b2fe79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c1e0b43dacc1c45c82e64084f9e0f4c007b2fe79"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2827c50df017de1feca62ab61acb5218dbb0265", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2827c50df017de1feca62ab61acb5218dbb0265", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2827c50df017de1feca62ab61acb5218dbb0265", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2827c50df017de1feca62ab61acb5218dbb0265/comments", "author": null, "committer": null, "parents": [{"sha": "66795cc71383d31311c08231cfc6815212acd456", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66795cc71383d31311c08231cfc6815212acd456", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66795cc71383d31311c08231cfc6815212acd456"}], "stats": {"total": 31, "additions": 19, "deletions": 12}, "files": [{"sha": "1bce85fbd8159da0ff5522295a07fb796b9acd9b", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2827c50df017de1feca62ab61acb5218dbb0265/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2827c50df017de1feca62ab61acb5218dbb0265/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=c2827c50df017de1feca62ab61acb5218dbb0265", "patch": "@@ -807,24 +807,22 @@ hppa_legitimize_address (x, oldx, mode)\n     }\n \n   /* Uh-oh.  We might have an address for x[n-100000].  This needs\n-     special handling.\n+     special handling to avoid creating an indexed memory address\n+     with x-100000 as the base.\n+    \n+     If the constant part is small enough, then it's still safe because\n+     there is a guard page at the beginning and end of the data segment.\n \n-     This is common enough that we want to try and rearrange the terms\n-     so that we can use indexing for these addresses too.  Again, only\n+     Scaled references are common enough that we want to try and rearrange the\n+     terms so that we can use indexing for these addresses too.  Only\n      do the optimization for floatint point modes.  */\n \n-  if (GET_CODE (x) == PLUS && GET_CODE (XEXP (x, 0)) == MULT\n-      && GET_CODE (XEXP (XEXP (x, 0), 1)) == CONST_INT\n-      && shadd_constant_p (INTVAL (XEXP (XEXP (x, 0), 1))))\n+  if (GET_CODE (x) == PLUS\n+      && symbolic_expression_p (XEXP (x, 1)))\n     {\n       /* Ugly.  We modify things here so that the address offset specified\n \t by the index expression is computed first, then added to x to form\n-\t the entire address.\n-\n-\t For 2.5, it might be profitable to set things up so that we\n-\t compute the raw (unscaled) index first, then use scaled indexing\n-\t to access memory, or better yet have the MI parts of the compiler\n-\t handle this.  */\n+\t the entire address.  */\n \n       rtx regx1, regx2, regy1, regy2, y;\n \n@@ -860,6 +858,15 @@ hppa_legitimize_address (x, oldx, mode)\n \t\t\t\t\t\t  XEXP (XEXP (x, 0), 1)),\n \t\t\t\t\t force_reg (Pmode, XEXP (y, 0))));\n \t    }\n+\t  else if (GET_CODE (XEXP (y, 1)) == CONST_INT\n+\t\t   && INTVAL (XEXP (y, 1)) >= -4096\n+\t\t   && INTVAL (XEXP (y, 1)) <= 4095)\n+\t    {\n+\t      /* This is safe because of the guard page at the\n+\t\t beginning and end of the data space.  Just\n+\t\t return the original address.  */\n+\t      return orig;\n+\t    }\n \t  else\n \t    {\n \t      /* Doesn't look like one we can optimize.  */"}]}