{"sha": "2efbbba16a0630fac8cadcd6d9e0ffaabfadb79f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmVmYmJiYTE2YTA2MzBmYWM4Y2FkY2Q2ZDllMGZmYWFiZmFkYjc5Zg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-04-15T17:38:54Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-04-15T18:06:21Z"}, "message": "c++: noexcept error recursion [PR100101]\n\nHere instantiating the noexcept-specifier for bar<void>() means\ninstantiating A<void>::value, which complains about the conversion from 0 to\nint* in the default argument of foo.  Since my patch for PR99583, printing\nthe error context involves looking at C<void>::type, which again wants to\ninstantiate A<void>::value, which breaks.  For now at least, let's break\nthis recursion by avoiding looking into the noexcept-specifier in\nfind_typenames, and limit that to just the uses_parameter_packs case that\nPR99583 cares about.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/100101\n\tPR c++/99583\n\t* pt.c (find_parameter_packs_r) [FUNCTION_TYPE]: Walk into\n\tTYPE_RAISES_EXCEPTIONS here.\n\t* tree.c (cp_walk_subtrees): Not here.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/100101\n\t* g++.dg/cpp0x/noexcept67.C: New test.", "tree": {"sha": "9cf8ffec9561a9afb453780ebfc0ca8e5756f6c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9cf8ffec9561a9afb453780ebfc0ca8e5756f6c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2efbbba16a0630fac8cadcd6d9e0ffaabfadb79f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2efbbba16a0630fac8cadcd6d9e0ffaabfadb79f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2efbbba16a0630fac8cadcd6d9e0ffaabfadb79f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2efbbba16a0630fac8cadcd6d9e0ffaabfadb79f/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a25590f29d07a88f6bf1b2c1ab0e4e012725db98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a25590f29d07a88f6bf1b2c1ab0e4e012725db98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a25590f29d07a88f6bf1b2c1ab0e4e012725db98"}], "stats": {"total": 42, "additions": 37, "deletions": 5}, "files": [{"sha": "2190f83882a35e30ae1a5b287ae2777cbc560dda", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2efbbba16a0630fac8cadcd6d9e0ffaabfadb79f/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2efbbba16a0630fac8cadcd6d9e0ffaabfadb79f/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=2efbbba16a0630fac8cadcd6d9e0ffaabfadb79f", "patch": "@@ -3890,6 +3890,10 @@ find_parameter_packs_r (tree *tp, int *walk_subtrees, void* data)\n     (struct find_parameter_pack_data*)data;\n   bool parameter_pack_p = false;\n \n+#define WALK_SUBTREE(NODE)\t\t\t\t\\\n+  cp_walk_tree (&(NODE), &find_parameter_packs_r,\t\\\n+\t\tppd, ppd->visited)\t\t\t\\\n+\n   /* Don't look through typedefs; we are interested in whether a\n      parameter pack is actually written in the expression/type we're\n      looking at, not the target type.  */\n@@ -4070,10 +4074,17 @@ find_parameter_packs_r (tree *tp, int *walk_subtrees, void* data)\n \t\t\tppd, ppd->visited);\n       return NULL_TREE;\n \n+    case FUNCTION_TYPE:\n+    case METHOD_TYPE:\n+      WALK_SUBTREE (TYPE_RAISES_EXCEPTIONS (t));\n+      break;\n+\n     default:\n       return NULL_TREE;\n     }\n \n+#undef WALK_SUBTREE\n+\n   return NULL_TREE;\n }\n "}, {"sha": "dca947bf52a9392de42355e5b05801a1f3413685", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2efbbba16a0630fac8cadcd6d9e0ffaabfadb79f/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2efbbba16a0630fac8cadcd6d9e0ffaabfadb79f/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=2efbbba16a0630fac8cadcd6d9e0ffaabfadb79f", "patch": "@@ -5415,11 +5415,6 @@ cp_walk_subtrees (tree *tp, int *walk_subtrees_p, walk_tree_fn func,\n \t}\n       break;\n \n-    case FUNCTION_TYPE:\n-    case METHOD_TYPE:\n-      WALK_SUBTREE (TYPE_RAISES_EXCEPTIONS (*tp));\n-      break;\n-\n     default:\n       return NULL_TREE;\n     }"}, {"sha": "7f0610343231fce0d9957e472df1e603b5e5e182", "filename": "gcc/testsuite/g++.dg/cpp0x/noexcept67.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2efbbba16a0630fac8cadcd6d9e0ffaabfadb79f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept67.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2efbbba16a0630fac8cadcd6d9e0ffaabfadb79f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept67.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept67.C?ref=2efbbba16a0630fac8cadcd6d9e0ffaabfadb79f", "patch": "@@ -0,0 +1,26 @@\n+// PR c++/100101\n+// { dg-do compile { target c++11 } }\n+\n+template <typename T> struct A\n+{\n+    template <typename U> static char foo(U*, int* = 0);\n+    static const bool value = sizeof(foo(static_cast<T*>(nullptr))) > 0;\n+};\n+\n+template <bool b> struct B\n+{\n+    static const bool value = b;\n+};\n+\n+template <typename T> struct C\n+{\n+    typedef B<A<T>::value> type;\n+};\n+\n+template <typename T>\n+void bar() noexcept(A<T>::value && C<T>::type::value) {}\n+\n+void baz()\n+{\n+  bar<void>();\n+}"}]}