{"sha": "c82dbd958872662840fa7e33e9c0a47c7608938e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzgyZGJkOTU4ODcyNjYyODQwZmE3ZTMzZTljMGE0N2M3NjA4OTM4ZQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-09-09T00:29:22Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-09-09T00:29:22Z"}, "message": "decl.c (layout_var_decl): Change prototype.\n\n\t* decl.c (layout_var_decl): Change prototype.  Don't complete\n\ttypes for external objects.\n\t(check_initializer): Likewise.  Tidy.\n\t(initialize_local_var): Complete types here.\n\t(cp_finish_decl): Not here.  Reorganize a little.\n\t(grokvardecl): Don't complete types here.\n\nFrom-SVN: r29220", "tree": {"sha": "01872c170ff9420443e397bce240a82f08c6e92e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01872c170ff9420443e397bce240a82f08c6e92e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c82dbd958872662840fa7e33e9c0a47c7608938e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c82dbd958872662840fa7e33e9c0a47c7608938e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c82dbd958872662840fa7e33e9c0a47c7608938e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c82dbd958872662840fa7e33e9c0a47c7608938e/comments", "author": null, "committer": null, "parents": [{"sha": "dbec3d5b8fd90ef7434cac9c84b502b06c75d9f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbec3d5b8fd90ef7434cac9c84b502b06c75d9f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbec3d5b8fd90ef7434cac9c84b502b06c75d9f8"}], "stats": {"total": 134, "additions": 78, "deletions": 56}, "files": [{"sha": "ddd0c68e10c57b8a2e52c8a8c03a1440d6919f52", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c82dbd958872662840fa7e33e9c0a47c7608938e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c82dbd958872662840fa7e33e9c0a47c7608938e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c82dbd958872662840fa7e33e9c0a47c7608938e", "patch": "@@ -1,5 +1,12 @@\n 1999-09-08  Mark Mitchell  <mark@codesourcery.com>\n \n+\t* decl.c (layout_var_decl): Change prototype.  Don't complete\n+\ttypes for external objects.\n+\t(check_initializer): Likewise.  Tidy.\n+\t(initialize_local_var): Complete types here.\n+\t(cp_finish_decl): Not here.  Reorganize a little.\n+\t(grokvardecl): Don't complete types here.\n+\n \t* decl.c (start_function): Clear last_dtor_insn and\n \tlast_parm_cleanup_insn. \n \t(push_cp_function_context): Just copy over a little of"}, {"sha": "c75cddcd1c1182c29215d47271d60074aaa638ca", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 56, "deletions": 56, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c82dbd958872662840fa7e33e9c0a47c7608938e/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c82dbd958872662840fa7e33e9c0a47c7608938e/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=c82dbd958872662840fa7e33e9c0a47c7608938e", "patch": "@@ -195,10 +195,10 @@ static tree make_label_decl PROTO((tree, int));\n static void pop_label PROTO((tree));\n static void pop_labels PROTO((tree));\n static void maybe_deduce_size_from_array_init PROTO((tree, tree));\n-static void layout_var_decl PROTO((tree, tree *));\n+static tree layout_var_decl PROTO((tree, tree));\n static void maybe_commonize_var PROTO((tree));\n static tree build_cleanup_on_safe_obstack PROTO((tree));\n-static void check_initializer PROTO((tree, tree *));\n+static tree check_initializer PROTO((tree, tree));\n static void make_rtl_for_nonlocal_decl PROTO((tree, tree, const char *));\n static void push_cp_function_context PROTO((struct function *));\n static void pop_cp_function_context PROTO((struct function *));\n@@ -7305,32 +7305,26 @@ maybe_deduce_size_from_array_init (decl, init)\n }\n \n /* Set DECL_SIZE, DECL_ALIGN, etc. for DECL (a VAR_DECL), and issue\n-   any appropriate error messages regarding the layout.  INITP is a\n-   pointer to the initializer for DECL; the initializer may be\n-   modified by this function.  */\n+   any appropriate error messages regarding the layout.  INIT is a\n+   the initializer for DECL; returns a modified version.  */\n \n-static void\n-layout_var_decl (decl, initp)\n+static tree\n+layout_var_decl (decl, init)\n      tree decl;\n-     tree *initp;\n+     tree init;\n {\n   tree ttype = target_type (TREE_TYPE (decl));\n \n-  if (DECL_SIZE (decl) == NULL_TREE\n+  /* If we haven't already layed out this declaration, and we know its\n+     type, do so now.  Note that we must not call complete type for an\n+     external object because it's type might involve templates that we\n+     are not supposed to isntantiate yet.  */\n+  if (!DECL_EXTERNAL (decl)  \n+      && DECL_SIZE (decl) == NULL_TREE\n       && TYPE_SIZE (complete_type (TREE_TYPE (decl))) != NULL_TREE)\n     layout_decl (decl, 0);\n \n-  if (TREE_STATIC (decl) && DECL_SIZE (decl) == NULL_TREE)\n-    {\n-      /* A static variable with an incomplete type:\n-\t that is an error if it is initialized.\n-\t Otherwise, let it through, but if it is not `extern'\n-\t then it may cause an error message later.  */\n-      if (DECL_INITIAL (decl) != NULL_TREE)\n-\tcp_error (\"storage size of `%D' isn't known\", decl);\n-      *initp = NULL_TREE;\n-    }\n-  else if (!DECL_EXTERNAL (decl) && DECL_SIZE (decl) == NULL_TREE)\n+  if (!DECL_EXTERNAL (decl) && DECL_SIZE (decl) == NULL_TREE)\n     {\n       /* An automatic variable with an incomplete type: that is an error.\n \t Don't talk about array types here, since we took care of that\n@@ -7354,6 +7348,8 @@ layout_var_decl (decl, initp)\n       else\n \tcp_error (\"storage size of `%D' isn't constant\", decl);\n     }\n+\n+  return init;\n }\n \n /* Return a cleanup for DECL, created on whatever obstack is\n@@ -7476,51 +7472,51 @@ check_for_uninitialized_const_var (decl)\n     cp_error (\"uninitialized const `%D'\", decl);\n }\n \n-/* Verify INITP (the initializer for DECL), and record the\n-   initialization in DECL_INITIAL, if appropriate.  The initializer\n-   may be modified by this function.  */\n+/* Verify INIT (the initializer for DECL), and record the\n+   initialization in DECL_INITIAL, if appropriate.  Returns a new\n+   value for INIT.  */\n \n-static void\n-check_initializer (decl, initp)\n+static tree\n+check_initializer (decl, init)\n      tree decl;\n-     tree *initp;\n+     tree init;\n {\n-  tree init;\n   tree type;\n \n   if (TREE_CODE (decl) == FIELD_DECL)\n-    return;\n-\n-  type = TREE_TYPE (decl);\n-  init = *initp;\n+    return init;\n \n   /* If `start_decl' didn't like having an initialization, ignore it now.  */\n   if (init != NULL_TREE && DECL_INITIAL (decl) == NULL_TREE)\n     init = NULL_TREE;\n-  else if (DECL_EXTERNAL (decl))\n-    ;\n-  else if (TREE_CODE (type) == REFERENCE_TYPE)\n-    {\n-      if (TREE_STATIC (decl))\n-\tmake_decl_rtl (decl, NULL_PTR, toplevel_bindings_p ());\n-      grok_reference_init (decl, type, init);\n-      init = NULL_TREE;\n-    }\n \n-  /* Check for certain invalid initializations.  */\n+  /* Check the initializer.  */\n   if (init)\n     {\n-      if (TYPE_SIZE (type) && !TREE_CONSTANT (TYPE_SIZE (type)))\n+      /* Things that are going to be initialized need to have complete\n+\t type.  */\n+      TREE_TYPE (decl) = type = complete_type (TREE_TYPE (decl));\n+\n+      if (type == error_mark_node)\n+\t/* We will have already complained.  */\n+\tinit = NULL_TREE;\n+      else if (TYPE_SIZE (type) && !TREE_CONSTANT (TYPE_SIZE (type)))\n \t{\n \t  cp_error (\"variable-sized object `%D' may not be initialized\", decl);\n \t  init = NULL_TREE;\n \t}\n-      if (TREE_CODE (type) == ARRAY_TYPE\n-\t  && !TYPE_SIZE (complete_type (TREE_TYPE (type))))\n+      else if (TREE_CODE (type) == ARRAY_TYPE\n+\t       && !TYPE_SIZE (TREE_TYPE (type)))\n \t{\n \t  cp_error (\"elements of array `%#D' have incomplete type\", decl);\n \t  init = NULL_TREE;\n \t}\n+      else if (!TYPE_SIZE (type))\n+\t{\n+\t  cp_error (\"`%D' has incomplete type\", decl);\n+\t  TREE_TYPE (decl) = error_mark_node;\n+\t  init = NULL_TREE;\n+\t}\n     }\n \n   if (TREE_CODE (decl) == CONST_DECL)\n@@ -7533,6 +7529,13 @@ check_initializer (decl, initp)\n       my_friendly_assert (init != NULL_TREE, 149);\n       init = NULL_TREE;\n     }\n+  else if (!DECL_EXTERNAL (decl) && TREE_CODE (type) == REFERENCE_TYPE)\n+    {\n+      if (TREE_STATIC (decl))\n+\tmake_decl_rtl (decl, NULL_PTR, toplevel_bindings_p ());\n+      grok_reference_init (decl, type, init);\n+      init = NULL_TREE;\n+    }\n   else if (init)\n     {\n       if (TYPE_HAS_CONSTRUCTOR (type) || TYPE_NEEDS_CONSTRUCTING (type))\n@@ -7590,8 +7593,7 @@ check_initializer (decl, initp)\n   else\n     check_for_uninitialized_const_var (decl);\n   \n-  /* Store the modified initializer for our caller.  */\n-  *initp = init;\n+  return init;\n }\n \n /* If DECL is not a local variable, give it RTL.  */\n@@ -7735,7 +7737,7 @@ initialize_local_var (decl, init, flags)\n   tree type;\n   tree cleanup;\n \n-  type = TREE_TYPE (decl);\n+  type = complete_type (TREE_TYPE (decl));\n \n   cleanup = build_cleanup_on_safe_obstack (decl);\n \n@@ -7877,7 +7879,7 @@ cp_finish_decl (decl, init, asmspec_tree, need_pop, flags)\n       pop_decl_namespace ();\n     }\n \n-  type = complete_type (TREE_TYPE (decl));\n+  type = TREE_TYPE (decl);\n \n   if (type == error_mark_node)\n     {\n@@ -7954,7 +7956,9 @@ cp_finish_decl (decl, init, asmspec_tree, need_pop, flags)\n       make_decl_rtl (decl, asmspec, 0);\n     }\n \n-  check_initializer (decl, &init);\n+  /* Deduce size of array from initialization, if not already known.  */\n+  maybe_deduce_size_from_array_init (decl, init);\n+  init = check_initializer (decl, init);\n \n   GNU_xref_decl (current_function_decl, decl);\n \n@@ -7966,11 +7970,8 @@ cp_finish_decl (decl, init, asmspec_tree, need_pop, flags)\n   if (toplevel_bindings_p () && temporary)\n     end_temporary_allocation ();\n \n-  /* Deduce size of array from initialization, if not already known.  */\n-  maybe_deduce_size_from_array_init (decl, init);\n-\n   if (TREE_CODE (decl) == VAR_DECL)\n-    layout_var_decl (decl, &init);\n+    init = layout_var_decl (decl, init);\n \n   /* Output the assembler code and/or RTL code for variables and functions,\n      unless the type is an undefined structure or union.\n@@ -8762,12 +8763,11 @@ grokvardecl (type, declarator, specbits_in, initialized, constp, in_namespace)\n \t  /* If we're in a template, we need DECL_LANG_SPECIFIC so that\n \t     we can call push_template_decl.  */\n \t  push_permanent_obstack ();\n-\t  decl = build_lang_decl (VAR_DECL, declarator,\n-\t\t\t\t\tcomplete_type (type));\n+\t  decl = build_lang_decl (VAR_DECL, declarator, type);\n \t  pop_obstacks ();\n \t}\n       else\n-\tdecl = build_decl (VAR_DECL, declarator, complete_type (type));\n+\tdecl = build_decl (VAR_DECL, declarator, type);\n \n       if (context)\n \tset_decl_namespace (decl, context, 0);"}, {"sha": "6adf580e2a475d8c67d891d53bb74263f385e085", "filename": "gcc/testsuite/g++.old-deja/g++.pt/poi1.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c82dbd958872662840fa7e33e9c0a47c7608938e/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fpoi1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c82dbd958872662840fa7e33e9c0a47c7608938e/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fpoi1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fpoi1.C?ref=c82dbd958872662840fa7e33e9c0a47c7608938e", "patch": "@@ -0,0 +1,15 @@\n+// Build don't link:\n+// Origin: Gerald Pfeifer <pfeifer@dbai.tuwien.ac.at>\n+\n+template <class T>\n+class TLITERAL : public T \n+    {\n+    int x;\n+    };\n+\n+class GATOM;\n+\n+typedef TLITERAL<GATOM> x;\n+extern TLITERAL<GATOM> y;\n+\n+"}]}