{"sha": "e325277522ec7a72286f1faa5bfb47f4b4be3d81", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTMyNTI3NzUyMmVjN2E3MjI4NmYxZmFhNWJmYjQ3ZjRiNGJlM2Q4MQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-01-11T11:26:59Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-01-11T11:26:59Z"}, "message": "re PR bootstrap/79052 (bootstrap-ubsan failures due to warnings)\n\n2017-01-11  Richard Biener  <rguenther@suse.de>\n\n\tPR bootstrap/79052\n\t* gimple-parser.c (c_parser_gimple_switch_stmt): Add missing\n\treturns on parse errors.\n\nFrom-SVN: r244310", "tree": {"sha": "3a82060c8dd639996d1e50aee4b8a495161a1aa3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a82060c8dd639996d1e50aee4b8a495161a1aa3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e325277522ec7a72286f1faa5bfb47f4b4be3d81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e325277522ec7a72286f1faa5bfb47f4b4be3d81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e325277522ec7a72286f1faa5bfb47f4b4be3d81", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e325277522ec7a72286f1faa5bfb47f4b4be3d81/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f3df0b3cde2476f77059e4c3a704ab1960fa883a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3df0b3cde2476f77059e4c3a704ab1960fa883a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3df0b3cde2476f77059e4c3a704ab1960fa883a"}], "stats": {"total": 178, "additions": 93, "deletions": 85}, "files": [{"sha": "a47e10c06ea690b591b60aad27c0c145317b2f02", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e325277522ec7a72286f1faa5bfb47f4b4be3d81/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e325277522ec7a72286f1faa5bfb47f4b4be3d81/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=e325277522ec7a72286f1faa5bfb47f4b4be3d81", "patch": "@@ -1,3 +1,9 @@\n+2017-01-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR bootstrap/79052\n+\t* gimple-parser.c (c_parser_gimple_switch_stmt): Add missing\n+\treturns on parse errors.\n+\n 2017-01-04  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/64767"}, {"sha": "37e792ac35554d60206803056511b592638fd7d2", "filename": "gcc/c/gimple-parser.c", "status": "modified", "additions": 87, "deletions": 85, "changes": 172, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e325277522ec7a72286f1faa5bfb47f4b4be3d81/gcc%2Fc%2Fgimple-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e325277522ec7a72286f1faa5bfb47f4b4be3d81/gcc%2Fc%2Fgimple-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fgimple-parser.c?ref=e325277522ec7a72286f1faa5bfb47f4b4be3d81", "patch": "@@ -1259,118 +1259,120 @@ c_parser_gimple_switch_stmt (c_parser *parser, gimple_seq *seq)\n   gimple_seq switch_body = NULL;\n   c_parser_consume_token (parser);\n \n-  if (c_parser_require (parser, CPP_OPEN_PAREN, \"expected %<(%>\"))\n-    {\n-      cond_expr = c_parser_gimple_postfix_expression (parser);\n-      if (! c_parser_require (parser, CPP_CLOSE_PAREN, \"expected %<)%>\"))\n-\treturn;\n-    }\n+  if (! c_parser_require (parser, CPP_OPEN_PAREN, \"expected %<(%>\"))\n+    return;\n+  cond_expr = c_parser_gimple_postfix_expression (parser);\n+  if (! c_parser_require (parser, CPP_CLOSE_PAREN, \"expected %<)%>\"))\n+    return;\n+\n+  if (! c_parser_require (parser, CPP_OPEN_BRACE, \"expected %<{%>\"))\n+    return;\n \n-  if (c_parser_require (parser, CPP_OPEN_BRACE, \"expected %<{%>\"))\n+  while (c_parser_next_token_is_not (parser, CPP_CLOSE_BRACE))\n     {\n-      while (c_parser_next_token_is_not (parser, CPP_CLOSE_BRACE))\n+      if (c_parser_next_token_is (parser, CPP_EOF))\n \t{\n-\t  if (c_parser_next_token_is (parser, CPP_EOF))\n-\t    {\n-\t      c_parser_error (parser, \"expected statement\");\n-\t      return;\n-\t    }\n+\t  c_parser_error (parser, \"expected statement\");\n+\t  return;\n+\t}\n \n-\t  switch (c_parser_peek_token (parser)->keyword)\n-\t    {\n-\t    case RID_CASE:\n-\t      {\n-\t\tc_expr exp1;\n-\t\tlocation_t loc = c_parser_peek_token (parser)->location;\n-\t\tc_parser_consume_token (parser);\n+      switch (c_parser_peek_token (parser)->keyword)\n+\t{\n+\tcase RID_CASE:\n+\t  {\n+\t    c_expr exp1;\n+\t    location_t loc = c_parser_peek_token (parser)->location;\n+\t    c_parser_consume_token (parser);\n \n-\t\tif (c_parser_next_token_is (parser, CPP_NAME)\n-\t\t    || c_parser_peek_token (parser)->type == CPP_NUMBER)\n-\t\t  exp1 = c_parser_gimple_postfix_expression (parser);\n-\t\telse\n-\t\t  c_parser_error (parser, \"expected expression\");\n+\t    if (c_parser_next_token_is (parser, CPP_NAME)\n+\t\t|| c_parser_peek_token (parser)->type == CPP_NUMBER)\n+\t      exp1 = c_parser_gimple_postfix_expression (parser);\n+\t    else\n+\t      {\n+\t\tc_parser_error (parser, \"expected expression\");\n+\t\treturn;\n+\t      }\n \n-\t\tif (c_parser_next_token_is (parser, CPP_COLON))\n+\t    if (c_parser_next_token_is (parser, CPP_COLON))\n+\t      {\n+\t\tc_parser_consume_token (parser);\n+\t\tif (c_parser_next_token_is (parser, CPP_NAME))\n \t\t  {\n+\t\t    label = c_parser_peek_token (parser)->value;\n \t\t    c_parser_consume_token (parser);\n-\t\t    if (c_parser_next_token_is (parser, CPP_NAME))\n-\t\t      {\n-\t\t\tlabel = c_parser_peek_token (parser)->value;\n-\t\t\tc_parser_consume_token (parser);\n-\t\t\ttree decl = lookup_label_for_goto (loc, label);\n-\t\t\tcase_label = build_case_label (exp1.value, NULL_TREE,\n-\t\t\t\t\t\t       decl);\n-\t\t\tlabels.safe_push (case_label);\n-\t\t\tif (! c_parser_require (parser, CPP_SEMICOLON,\n-\t\t\t\t\t\t\"expected %<;%>\"))\n-\t\t\t  return;\n-\t\t      }\n-\t\t    else if (! c_parser_require (parser, CPP_NAME,\n-\t\t\t\t\t\t \"expected label\"))\n+\t\t    tree decl = lookup_label_for_goto (loc, label);\n+\t\t    case_label = build_case_label (exp1.value, NULL_TREE,\n+\t\t\t\t\t\t   decl);\n+\t\t    labels.safe_push (case_label);\n+\t\t    if (! c_parser_require (parser, CPP_SEMICOLON,\n+\t\t\t\t\t    \"expected %<;%>\"))\n \t\t      return;\n \t\t  }\n-\t\telse if (! c_parser_require (parser, CPP_SEMICOLON,\n-\t\t\t\t\t    \"expected %<:%>\"))\n+\t\telse if (! c_parser_require (parser, CPP_NAME,\n+\t\t\t\t\t     \"expected label\"))\n \t\t  return;\n-\t\tbreak;\n \t      }\n-\t    case RID_DEFAULT:\n+\t    else if (! c_parser_require (parser, CPP_SEMICOLON,\n+\t\t\t\t\t \"expected %<:%>\"))\n+\t      return;\n+\t    break;\n+\t  }\n+\tcase RID_DEFAULT:\n+\t  {\n+\t    location_t loc = c_parser_peek_token (parser)->location;\n+\t    c_parser_consume_token (parser);\n+\t    if (c_parser_next_token_is (parser, CPP_COLON))\n \t      {\n-\t\tlocation_t loc = c_parser_peek_token (parser)->location;\n \t\tc_parser_consume_token (parser);\n-\t\tif (c_parser_next_token_is (parser, CPP_COLON))\n+\t\tif (c_parser_next_token_is (parser, CPP_NAME))\n \t\t  {\n+\t\t    label = c_parser_peek_token (parser)->value;\n \t\t    c_parser_consume_token (parser);\n-\t\t    if (c_parser_next_token_is (parser, CPP_NAME))\n-\t\t      {\n-\t\t\tlabel = c_parser_peek_token (parser)->value;\n-\t\t\tc_parser_consume_token (parser);\n-\t\t\ttree decl = lookup_label_for_goto (loc, label);\n-\t\t\tdefault_label = build_case_label (NULL_TREE, NULL_TREE,\n-\t\t\t\t\t\t\t  decl);\n-\t\t\tif (! c_parser_require (parser, CPP_SEMICOLON,\n-\t\t\t\t\t\t\"expected %<;%>\"))\n-\t\t\t  return;\n-\t\t      }\n-\t\t    else if (! c_parser_require (parser, CPP_NAME,\n-\t\t\t\t\t\t \"expected label\"))\n+\t\t    tree decl = lookup_label_for_goto (loc, label);\n+\t\t    default_label = build_case_label (NULL_TREE, NULL_TREE,\n+\t\t\t\t\t\t      decl);\n+\t\t    if (! c_parser_require (parser, CPP_SEMICOLON,\n+\t\t\t\t\t    \"expected %<;%>\"))\n \t\t      return;\n \t\t  }\n-\t\telse if (! c_parser_require (parser, CPP_SEMICOLON,\n-\t\t\t\t\t    \"expected %<:%>\"))\n+\t\telse if (! c_parser_require (parser, CPP_NAME,\n+\t\t\t\t\t     \"expected label\"))\n \t\t  return;\n-\t\tbreak;\n \t      }\n-\t    case RID_GOTO:\n+\t    else if (! c_parser_require (parser, CPP_SEMICOLON,\n+\t\t\t\t\t \"expected %<:%>\"))\n+\t      return;\n+\t    break;\n+\t  }\n+\tcase RID_GOTO:\n+\t  {\n+\t    location_t loc = c_parser_peek_token (parser)->location;\n+\t    c_parser_consume_token (parser);\n+\t    if (c_parser_next_token_is (parser, CPP_NAME))\n \t      {\n-\t\tlocation_t loc = c_parser_peek_token (parser)->location;\n+\t\tc_parser_gimple_goto_stmt (loc,\n+\t\t\t\t\t   c_parser_peek_token\n+\t\t\t\t\t   (parser)->value,\n+\t\t\t\t\t   &switch_body);\n \t\tc_parser_consume_token (parser);\n-\t\tif (c_parser_next_token_is (parser, CPP_NAME))\n+\t\tif (c_parser_next_token_is (parser, CPP_SEMICOLON))\n+\t\t  c_parser_consume_token (parser);\n+\t\telse\n \t\t  {\n-\t\t    c_parser_gimple_goto_stmt (loc,\n-\t\t\t\t\t       c_parser_peek_token\n-\t\t\t\t\t         (parser)->value,\n-\t\t\t\t\t       &switch_body);\n-\t\t    c_parser_consume_token (parser);\n-\t\t    if (c_parser_next_token_is (parser, CPP_SEMICOLON))\n-\t\t      c_parser_consume_token (parser);\n-\t\t    else\n-\t\t      {\n-\t\t\tc_parser_error (parser, \"expected semicolon\");\n-\t\t\treturn;\n-\t\t      }\n+\t\t    c_parser_error (parser, \"expected semicolon\");\n+\t\t    return;\n \t\t  }\n-\t\telse if (! c_parser_require (parser, CPP_NAME,\n-\t\t\t\t\t    \"expected label\"))\n-\t\t  return;\n-\t\tbreak;\n \t      }\n-\t    default:\n-\t      c_parser_error (parser, \"expected case label or goto statement\");\n+\t    else if (! c_parser_require (parser, CPP_NAME,\n+\t\t\t\t\t \"expected label\"))\n \t      return;\n-\t    }\n-\n+\t    break;\n+\t  }\n+\tdefault:\n+\t  c_parser_error (parser, \"expected case label or goto statement\");\n+\t  return;\n \t}\n+\n     }\n   if (! c_parser_require (parser, CPP_CLOSE_BRACE, \"expected %<}%>\"))\n     return;"}]}