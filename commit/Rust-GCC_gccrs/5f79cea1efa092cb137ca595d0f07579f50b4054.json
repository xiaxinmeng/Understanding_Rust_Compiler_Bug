{"sha": "5f79cea1efa092cb137ca595d0f07579f50b4054", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWY3OWNlYTFlZmEwOTJjYjEzN2NhNTk1ZDBmMDc1NzlmNTBiNDA1NA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1998-01-25T16:45:02Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-01-25T16:45:02Z"}, "message": "bastring.h (unique): We only need length bytes.\n\n\t* std/bastring.h (unique): We only need length bytes.\n\t(c_str): Avoid writing over random memory.\n\t#include <std/bastring.cc>.\n\tLose _G_ALLOC_CONTROL.\n\t* std/bastring.cc: Likewise.\n \t(nilRep): Add initializer for selfish.\n\t* sinst.cc: Just #include <string>.\nFix a couple of bugs, linux undefined symbol problem.\n\nFrom-SVN: r17478", "tree": {"sha": "c12a2d62b85680d7c4ca67cda11b66f56afef1b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c12a2d62b85680d7c4ca67cda11b66f56afef1b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f79cea1efa092cb137ca595d0f07579f50b4054", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f79cea1efa092cb137ca595d0f07579f50b4054", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f79cea1efa092cb137ca595d0f07579f50b4054", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f79cea1efa092cb137ca595d0f07579f50b4054/comments", "author": null, "committer": null, "parents": [{"sha": "be34355626aab9c515132bd0bd795f9100324db8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be34355626aab9c515132bd0bd795f9100324db8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be34355626aab9c515132bd0bd795f9100324db8"}], "stats": {"total": 55, "additions": 16, "deletions": 39}, "files": [{"sha": "88a4e9552c70ddf682fe87208df8312d5a95190a", "filename": "libstdc++/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f79cea1efa092cb137ca595d0f07579f50b4054/libstdc%2B%2B%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f79cea1efa092cb137ca595d0f07579f50b4054/libstdc%2B%2B%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B%2FChangeLog?ref=5f79cea1efa092cb137ca595d0f07579f50b4054", "patch": "@@ -1,3 +1,13 @@\n+Sun Jan 25 14:01:50 1998  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* std/bastring.h (unique): We only need length bytes.\n+\t(c_str): Avoid writing over random memory.\n+\t#include <std/bastring.cc>.\n+\tLose _G_ALLOC_CONTROL.\n+\t* std/bastring.cc: Likewise.\n+ \t(nilRep): Add initializer for selfish.\n+\t* sinst.cc: Just #include <string>.\n+\n Tue Jan 13 21:23:05 1998  H.J. Lu  (hjl@gnu.org)\n \n \t* configure.in (configdirs): Include testsuite only if"}, {"sha": "79c31a369336207262416d492c1b6f7fc7080b88", "filename": "libstdc++/sinst.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f79cea1efa092cb137ca595d0f07579f50b4054/libstdc%2B%2B%2Fsinst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f79cea1efa092cb137ca595d0f07579f50b4054/libstdc%2B%2B%2Fsinst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B%2Fsinst.cc?ref=5f79cea1efa092cb137ca595d0f07579f50b4054", "patch": "@@ -33,7 +33,7 @@\n #endif\n #endif\n \n-#include <std/bastring.cc>\n+#include <string>\n \n #ifdef C\n typedef char c;"}, {"sha": "30a2382f90b319787eed57a3800a3531bb6fc12f", "filename": "libstdc++/std/bastring.cc", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f79cea1efa092cb137ca595d0f07579f50b4054/libstdc%2B%2B%2Fstd%2Fbastring.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f79cea1efa092cb137ca595d0f07579f50b4054/libstdc%2B%2B%2Fstd%2Fbastring.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B%2Fstd%2Fbastring.cc?ref=5f79cea1efa092cb137ca595d0f07579f50b4054", "patch": "@@ -25,9 +25,6 @@\n // Written by Jason Merrill based upon the specification by Takanori Adachi\n // in ANSI X3J16/94-0013R2.\n \n-#include <cstddef>\n-#include <std/bastring.h>\n-\n extern \"C++\" {\n template <class charT, class traits, class Allocator>\n inline void * basic_string <charT, traits, Allocator>::Rep::\n@@ -47,11 +44,7 @@ operator delete (void * ptr)\n \n template <class charT, class traits, class Allocator>\n inline size_t basic_string <charT, traits, Allocator>::Rep::\n-#if _G_ALLOC_CONTROL\n-default_frob (size_t s)\n-#else\n frob_size (size_t s)\n-#endif\n {\n   size_t i = 16;\n   while (i < s) i *= 2;\n@@ -83,11 +76,7 @@ clone ()\n \n template <class charT, class traits, class Allocator>\n inline bool basic_string <charT, traits, Allocator>::Rep::\n-#ifdef _G_ALLOC_CONTROL\n-default_excess (size_t s, size_t r)\n-#else\n excess_slop (size_t s, size_t r)\n-#endif\n {\n   return 2 * (s <= 16 ? 16 : s) < r;\n }\n@@ -520,20 +509,10 @@ getline (istream &is, basic_string <charT, traits, Allocator>& s, charT delim)\n \n template <class charT, class traits, class Allocator>\n basic_string <charT, traits, Allocator>::Rep\n-basic_string<charT, traits, Allocator>::nilRep = { 0, 0, 1 };\n+basic_string<charT, traits, Allocator>::nilRep = { 0, 0, 1, false };\n \n template <class charT, class traits, class Allocator>\n const basic_string <charT, traits, Allocator>::size_type\n basic_string <charT, traits, Allocator>::npos;\n \n-#ifdef _G_ALLOC_CONTROL\n-template <class charT, class traits, class Allocator>\n-bool (*basic_string <charT, traits, Allocator>::Rep::excess_slop) (size_t, size_t)\n-     = basic_string <charT, traits, Allocator>::Rep::default_excess;\n-\n-template <class charT, class traits, class Allocator>\n-size_t (*basic_string <charT, traits, Allocator>::Rep::frob_size) (size_t)\n-     = basic_string <charT, traits, Allocator>::Rep::default_frob;\n-#endif\n-\n } // extern \"C++\""}, {"sha": "cbc6e4384c82d3752ab1c13748c93ab9076abc45", "filename": "libstdc++/std/bastring.h", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f79cea1efa092cb137ca595d0f07579f50b4054/libstdc%2B%2B%2Fstd%2Fbastring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f79cea1efa092cb137ca595d0f07579f50b4054/libstdc%2B%2B%2Fstd%2Fbastring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B%2Fstd%2Fbastring.h?ref=5f79cea1efa092cb137ca595d0f07579f50b4054", "patch": "@@ -84,22 +84,8 @@ class basic_string\n     inline void move (size_t, const charT *, size_t);\n     inline void set  (size_t, const charT,   size_t);\n \n-#if _G_ALLOC_CONTROL\n-    // These function pointers allow you to modify the allocation policy used\n-    // by the string classes.  By default they expand by powers of two, but\n-    // this may be excessive for space-critical applications.\n-\n-    // Returns true if ALLOCATED is too much larger than LENGTH\n-    static bool (*excess_slop) (size_t length, size_t allocated);\n-    inline static bool default_excess (size_t, size_t);\n-\n-    // Returns a good amount of space to allocate for a string of length LENGTH\n-    static size_t (*frob_size) (size_t length);\n-    inline static size_t default_frob (size_t);\n-#else\n     inline static bool excess_slop (size_t, size_t);\n     inline static size_t frob_size (size_t);\n-#endif\n \n   private:\n     Rep &operator= (const Rep &);\n@@ -273,7 +259,7 @@ class basic_string\n \n private:\n   static charT eos () { return traits::eos (); }\n-  void unique () { if (rep ()->ref > 1) alloc (capacity (), true); }\n+  void unique () { if (rep ()->ref > 1) alloc (length (), true); }\n   void selfish () { unique (); rep ()->selfish = true; }\n \n public:\n@@ -304,7 +290,7 @@ class basic_string\n \n public:\n   const charT* c_str () const\n-    { terminate (); return data (); }\n+    { if (length () == 0) return \"\"; terminate (); return data (); }\n   void resize (size_type n, charT c);\n   void resize (size_type n)\n     { resize (n, eos ()); }\n@@ -621,4 +607,6 @@ getline (istream&, basic_string <charT, traits, Allocator>&, charT delim = '\\n')\n \n } // extern \"C++\"\n \n+#include <std/bastring.cc>\n+\n #endif"}]}