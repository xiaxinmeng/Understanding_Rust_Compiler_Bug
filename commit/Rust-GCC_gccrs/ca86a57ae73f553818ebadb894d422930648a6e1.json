{"sha": "ca86a57ae73f553818ebadb894d422930648a6e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2E4NmE1N2FlNzNmNTUzODE4ZWJhZGI4OTRkNDIyOTMwNjQ4YTZlMQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-03-21T01:49:22Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-03-21T01:49:22Z"}, "message": "(fold, case PLUS_EXPR): Don't associate apart a constant operand.\n\nFrom-SVN: r3807", "tree": {"sha": "aa9dd7621a884155f004f5ce7877ae921669a0f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa9dd7621a884155f004f5ce7877ae921669a0f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca86a57ae73f553818ebadb894d422930648a6e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca86a57ae73f553818ebadb894d422930648a6e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca86a57ae73f553818ebadb894d422930648a6e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca86a57ae73f553818ebadb894d422930648a6e1/comments", "author": null, "committer": null, "parents": [{"sha": "404f986e04ee55d0d944c85f02e83ea5a2519a19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/404f986e04ee55d0d944c85f02e83ea5a2519a19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/404f986e04ee55d0d944c85f02e83ea5a2519a19"}], "stats": {"total": 20, "additions": 17, "deletions": 3}, "files": [{"sha": "97cb12374ce70b948fa37a31db1883a31c9b0a4e", "filename": "gcc/fold-const.c", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca86a57ae73f553818ebadb894d422930648a6e1/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca86a57ae73f553818ebadb894d422930648a6e1/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=ca86a57ae73f553818ebadb894d422930648a6e1", "patch": "@@ -3424,6 +3424,12 @@ fold (expr)\n \t\t  if (code == PLUS_EXPR && operand_equal_p (var, arg1, 0))\n \t\t    return convert (TREE_TYPE (t), con);\n \t\t    \n+\t\t  /* If ARG0 is a constant, don't change things around;\n+\t\t     instead keep all the constant computations together.  */\n+\n+\t\t  if (TREE_CONSTANT (arg0))\n+\t\t    return t;\n+\n \t\t  /* Otherwise return (CON +- ARG1) - VAR.  */\n \t\t  TREE_SET_CODE (t, MINUS_EXPR);\n \t\t  TREE_OPERAND (t, 1) = var;\n@@ -3437,6 +3443,12 @@ fold (expr)\n \t\t  if (code == MINUS_EXPR && operand_equal_p (var, arg1, 0))\n \t\t    return convert (TREE_TYPE (t), con);\n \t\t    \n+\t\t  /* If ARG0 is a constant, don't change things around;\n+\t\t     instead keep all the constant computations together.  */\n+\n+\t\t  if (TREE_CONSTANT (arg0))\n+\t\t    return t;\n+\n \t\t  /* Otherwise return VAR +- (ARG1 +- CON).  */\n \t\t  TREE_OPERAND (t, 1) = tem\n \t\t    = fold (build (code, TREE_TYPE (t), arg1, con));\n@@ -3464,9 +3476,6 @@ fold (expr)\n \t  if (split_tree (arg1, code, &var, &con, &varsign))\n \t    {\n \t      /* EXPR is ARG0 +- (CON +- VAR).  */\n-\t      if (varsign == -1)\n-\t\tTREE_SET_CODE (t,\n-\t\t\t       (code == PLUS_EXPR ? MINUS_EXPR : PLUS_EXPR));\n \t      if (TREE_CODE (t) == MINUS_EXPR\n \t\t  && operand_equal_p (var, arg0, 0))\n \t\t{\n@@ -3476,6 +3485,11 @@ fold (expr)\n \t\t  return fold (build1 (NEGATE_EXPR, TREE_TYPE (t),\n \t\t\t\t       convert (TREE_TYPE (t), con)));\n \t\t}\n+\t      if (TREE_CONSTANT (arg1))\n+\t\treturn t;\n+\t      if (varsign == -1)\n+\t\tTREE_SET_CODE (t,\n+\t\t\t       (code == PLUS_EXPR ? MINUS_EXPR : PLUS_EXPR));\n \t      TREE_OPERAND (t, 0)\n \t\t= fold (build (code, TREE_TYPE (t), arg0, con));\n \t      TREE_OPERAND (t, 1) = var;"}]}