{"sha": "e8642944338d59542a7c0462a4745cda93affb6e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTg2NDI5NDQzMzhkNTk1NDJhN2MwNDYyYTQ3NDVjZGE5M2FmZmI2ZQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-09-07T13:02:05Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-09-07T13:02:05Z"}, "message": "tree-ssa-forwprop.c (forward_propagate_into_gimple_cond): Canonicalize negated predicates by swapping edges.\n\n2011-09-07  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-ssa-forwprop.c (forward_propagate_into_gimple_cond):\n\tCanonicalize negated predicates by swapping edges.\n\t(forward_propagate_into_cond): Likewise.\n\n\t* gcc.dg/tree-ssa/forwprop-16.c: New testcase.\n\nFrom-SVN: r178634", "tree": {"sha": "d7fdcaa9931bc56d88606ecb7ce549b79b8228e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7fdcaa9931bc56d88606ecb7ce549b79b8228e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8642944338d59542a7c0462a4745cda93affb6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8642944338d59542a7c0462a4745cda93affb6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8642944338d59542a7c0462a4745cda93affb6e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8642944338d59542a7c0462a4745cda93affb6e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "601f64e2e91c232210796cce3bc12a2e19a36ff2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/601f64e2e91c232210796cce3bc12a2e19a36ff2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/601f64e2e91c232210796cce3bc12a2e19a36ff2"}], "stats": {"total": 66, "additions": 63, "deletions": 3}, "files": [{"sha": "5cde3b1dcf0301019e8a554e0b467e4ab0cac23d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8642944338d59542a7c0462a4745cda93affb6e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8642944338d59542a7c0462a4745cda93affb6e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e8642944338d59542a7c0462a4745cda93affb6e", "patch": "@@ -1,3 +1,9 @@\n+2011-09-07  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-ssa-forwprop.c (forward_propagate_into_gimple_cond):\n+\tCanonicalize negated predicates by swapping edges.\n+\t(forward_propagate_into_cond): Likewise.\n+\n 2011-09-07  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/50213"}, {"sha": "82b748f476a5d1f4168983cb1d9493e499e02dbf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8642944338d59542a7c0462a4745cda93affb6e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8642944338d59542a7c0462a4745cda93affb6e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e8642944338d59542a7c0462a4745cda93affb6e", "patch": "@@ -1,3 +1,7 @@\n+2011-09-07  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gcc.dg/tree-ssa/forwprop-16.c: New testcase.\n+\n 2011-09-07  Jiangning Liu  <jiangning.liu@arm.com>\n \n \tPR tree-optimization/46021"}, {"sha": "b47edea0c184cfe772b5858e6359be55524bc14a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/forwprop-16.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8642944338d59542a7c0462a4745cda93affb6e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8642944338d59542a7c0462a4745cda93affb6e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-16.c?ref=e8642944338d59542a7c0462a4745cda93affb6e", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-forwprop1\" } */\n+\n+int foo (double xx, double xy)\n+{\n+  int p = xx < xy;\n+  int np = !p; \n+  if (np)\n+    return 5;\n+  return 2;\n+}\n+\n+/* { dg-final { scan-tree-dump \"if \\\\\\(x\" \"forwprop1\" } } */\n+/* { dg-final { cleanup-tree-dump \"forwprop1\" } } */"}, {"sha": "6333ed6c14882da12f7270dc90ff2a41e89f63a3", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 39, "deletions": 3, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8642944338d59542a7c0462a4745cda93affb6e/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8642944338d59542a7c0462a4745cda93affb6e/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=e8642944338d59542a7c0462a4745cda93affb6e", "patch": "@@ -534,6 +534,23 @@ forward_propagate_into_gimple_cond (gimple stmt)\n       return (cfg_changed || is_gimple_min_invariant (tmp)) ? 2 : 1;\n     }\n \n+  /* Canonicalize _Bool == 0 and _Bool != 1 to _Bool != 0 by swapping edges.  */\n+  if ((TREE_CODE (TREE_TYPE (rhs1)) == BOOLEAN_TYPE\n+       || (INTEGRAL_TYPE_P (TREE_TYPE (rhs1))\n+\t   && TYPE_PRECISION (TREE_TYPE (rhs1)) == 1))\n+      && ((code == EQ_EXPR\n+\t   && integer_zerop (rhs2))\n+\t  || (code == NE_EXPR\n+\t      && integer_onep (rhs2))))\n+    {\n+      basic_block bb = gimple_bb (stmt);\n+      gimple_cond_set_code (stmt, NE_EXPR);\n+      gimple_cond_set_rhs (stmt, build_zero_cst (TREE_TYPE (rhs1)));\n+      EDGE_SUCC (bb, 0)->flags ^= (EDGE_TRUE_VALUE|EDGE_FALSE_VALUE);\n+      EDGE_SUCC (bb, 1)->flags ^= (EDGE_TRUE_VALUE|EDGE_FALSE_VALUE);\n+      return 1;\n+    }\n+\n   return 0;\n }\n \n@@ -548,6 +565,7 @@ forward_propagate_into_cond (gimple_stmt_iterator *gsi_p)\n   gimple stmt = gsi_stmt (*gsi_p);\n   tree tmp = NULL_TREE;\n   tree cond = gimple_assign_rhs1 (stmt);\n+  bool swap = false;\n \n   /* We can do tree combining on SSA_NAME and comparison expressions.  */\n   if (COMPARISON_CLASS_P (cond))\n@@ -557,17 +575,27 @@ forward_propagate_into_cond (gimple_stmt_iterator *gsi_p)\n \t\t\t\t\t       TREE_OPERAND (cond, 1));\n   else if (TREE_CODE (cond) == SSA_NAME)\n     {\n+      enum tree_code code;\n       tree name = cond;\n       gimple def_stmt = get_prop_source_stmt (name, true, NULL);\n       if (!def_stmt || !can_propagate_from (def_stmt))\n \treturn 0;\n \n-      if (TREE_CODE_CLASS (gimple_assign_rhs_code (def_stmt)) == tcc_comparison)\n+      code = gimple_assign_rhs_code (def_stmt);\n+      if (TREE_CODE_CLASS (code) == tcc_comparison)\n \ttmp = fold_build2_loc (gimple_location (def_stmt),\n-\t\t\t       gimple_assign_rhs_code (def_stmt),\n+\t\t\t       code,\n \t\t\t       boolean_type_node,\n \t\t\t       gimple_assign_rhs1 (def_stmt),\n \t\t\t       gimple_assign_rhs2 (def_stmt));\n+      else if ((code == BIT_NOT_EXPR\n+\t\t&& TYPE_PRECISION (TREE_TYPE (cond)) == 1)\n+\t       || (code == BIT_XOR_EXPR\n+\t\t   && integer_onep (gimple_assign_rhs2 (def_stmt))))\n+\t{\n+\t  tmp = gimple_assign_rhs1 (def_stmt);\n+\t  swap = true;\n+\t}\n     }\n \n   if (tmp)\n@@ -586,7 +614,15 @@ forward_propagate_into_cond (gimple_stmt_iterator *gsi_p)\n       else if (integer_zerop (tmp))\n \tgimple_assign_set_rhs_from_tree (gsi_p, gimple_assign_rhs3 (stmt));\n       else\n-\tgimple_assign_set_rhs1 (stmt, unshare_expr (tmp));\n+\t{\n+\t  gimple_assign_set_rhs1 (stmt, unshare_expr (tmp));\n+\t  if (swap)\n+\t    {\n+\t      tree t = gimple_assign_rhs2 (stmt);\n+\t      gimple_assign_set_rhs2 (stmt, gimple_assign_rhs3 (stmt));\n+\t      gimple_assign_set_rhs3 (stmt, t);\n+\t    }\n+\t}\n       stmt = gsi_stmt (*gsi_p);\n       update_stmt (stmt);\n "}]}