{"sha": "a8006d0933c8c954b134152c1fb60a379c7fb846", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTgwMDZkMDkzM2M4Yzk1NGIxMzQxNTJjMWZiNjBhMzc5YzdmYjg0Ng==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2005-08-06T10:00:53Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2005-08-06T10:00:53Z"}, "message": "re PR fortran/18833 (ICE 'missing spec' on integer/char equivalence)\n\n\tPR fortran/18833\n\tPR fortran/20850\n\t* primary.c (match_varspec): If equiv_flag, don't look at sym's\n\tattributes, call gfc_match_array_ref up to twice and don't do any\n\tsubstring or component processing.\n\t* resolve.c (resolve_equivalence): Transform REF_ARRAY into\n\tREF_SUBSTRING or nothing if needed.  Check that substrings\n\tdon't have zero length.\n\n\t* gfortran.dg/equiv_1.f90: New test.\n\t* gfortran.dg/equiv_2.f90: New test.\n\t* gfortran.fortran-torture/execute/equiv_2.f90: New test.\n\t* gfortran.fortran-torture/execute/equiv_3.f90: New test.\n\t* gfortran.fortran-torture/execute/equiv_4.f90: New test.\n\nFrom-SVN: r102801", "tree": {"sha": "51307a287fe8c7944a34211fdcee41233244ad4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51307a287fe8c7944a34211fdcee41233244ad4a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8006d0933c8c954b134152c1fb60a379c7fb846", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8006d0933c8c954b134152c1fb60a379c7fb846", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8006d0933c8c954b134152c1fb60a379c7fb846", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8006d0933c8c954b134152c1fb60a379c7fb846/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b17775aba4c709c1fc3f19af33d50b025e3891f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b17775aba4c709c1fc3f19af33d50b025e3891f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b17775aba4c709c1fc3f19af33d50b025e3891f4"}], "stats": {"total": 286, "additions": 267, "deletions": 19}, "files": [{"sha": "49d9f1d5d8c9b1ac22d964300a81cc3852272e68", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8006d0933c8c954b134152c1fb60a379c7fb846/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8006d0933c8c954b134152c1fb60a379c7fb846/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=a8006d0933c8c954b134152c1fb60a379c7fb846", "patch": "@@ -1,3 +1,14 @@\n+2005-08-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR fortran/18833\n+\tPR fortran/20850\n+\t* primary.c (match_varspec): If equiv_flag, don't look at sym's\n+\tattributes, call gfc_match_array_ref up to twice and don't do any\n+\tsubstring or component processing.\n+\t* resolve.c (resolve_equivalence): Transform REF_ARRAY into\n+\tREF_SUBSTRING or nothing if needed.  Check that substrings\n+\tdon't have zero length.\n+\n 2005-08-05  Thomas Koenig  <Thomas.Koenig@online.de>\n \n \t* trans-expr.c  (gfc_build_builtin_function_decls):  Mark"}, {"sha": "34cc908ce95b9a84cc25dad222e8db9aac36b970", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8006d0933c8c954b134152c1fb60a379c7fb846/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8006d0933c8c954b134152c1fb60a379c7fb846/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=a8006d0933c8c954b134152c1fb60a379c7fb846", "patch": "@@ -1517,28 +1517,42 @@ match_varspec (gfc_expr * primary, int equiv_flag)\n   char name[GFC_MAX_SYMBOL_LEN + 1];\n   gfc_ref *substring, *tail;\n   gfc_component *component;\n-  gfc_symbol *sym;\n+  gfc_symbol *sym = primary->symtree->n.sym;\n   match m;\n \n   tail = NULL;\n \n-  if (primary->symtree->n.sym->attr.dimension\n-      || (equiv_flag\n-\t  && gfc_peek_char () == '('))\n+  if ((equiv_flag && gfc_peek_char () == '(')\n+      || sym->attr.dimension)\n     {\n-\n+      /* In EQUIVALENCE, we don't know yet whether we are seeing\n+\t an array, character variable or array of character\n+\t variables.  We'll leave the decision till resolve\n+\t time.  */\n       tail = extend_ref (primary, tail);\n       tail->type = REF_ARRAY;\n \n-      m = gfc_match_array_ref (&tail->u.ar, primary->symtree->n.sym->as,\n-                               equiv_flag);\n+      m = gfc_match_array_ref (&tail->u.ar, equiv_flag ? NULL : sym->as,\n+\t\t\t       equiv_flag);\n       if (m != MATCH_YES)\n \treturn m;\n+\n+      if (equiv_flag && gfc_peek_char () == '(')\n+\t{\n+\t  tail = extend_ref (primary, tail);\n+\t  tail->type = REF_ARRAY;\n+\n+\t  m = gfc_match_array_ref (&tail->u.ar, NULL, equiv_flag);\n+\t  if (m != MATCH_YES)\n+\t    return m;\n+\t}\n     }\n \n-  sym = primary->symtree->n.sym;\n   primary->ts = sym->ts;\n \n+  if (equiv_flag)\n+    return MATCH_YES;\n+\n   if (sym->ts.type != BT_DERIVED || gfc_match_char ('%') != MATCH_YES)\n     goto check_substring;\n "}, {"sha": "5910a1b0aaf3ed67a843b581b756dd5cf5836d11", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 85, "deletions": 11, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8006d0933c8c954b134152c1fb60a379c7fb846/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8006d0933c8c954b134152c1fb60a379c7fb846/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=a8006d0933c8c954b134152c1fb60a379c7fb846", "patch": "@@ -4757,7 +4757,7 @@ resolve_equivalence_derived (gfc_symbol *derived, gfc_symbol *sym, gfc_expr *e)\n    sequence derived type containing a pointer at any level of component\n    selection, an automatic object, a function name, an entry name, a result\n    name, a named constant, a structure component, or a subobject of any of\n-   the preceding objects.  */\n+   the preceding objects.  A substring shall not have length zero.  */\n \n static void\n resolve_equivalence (gfc_equiv *eq)\n@@ -4770,6 +4770,69 @@ resolve_equivalence (gfc_equiv *eq)\n   for (; eq; eq = eq->eq)\n     {\n       e = eq->expr;\n+\n+      e->ts = e->symtree->n.sym->ts;\n+      /* match_varspec might not know yet if it is seeing\n+\t array reference or substring reference, as it doesn't\n+\t know the types.  */\n+      if (e->ref && e->ref->type == REF_ARRAY)\n+\t{\n+\t  gfc_ref *ref = e->ref;\n+\t  sym = e->symtree->n.sym;\n+\n+\t  if (sym->attr.dimension)\n+\t    {\n+\t      ref->u.ar.as = sym->as;\n+\t      ref = ref->next;\n+\t    }\n+\n+\t  /* For substrings, convert REF_ARRAY into REF_SUBSTRING.  */\n+\t  if (e->ts.type == BT_CHARACTER\n+\t      && ref\n+\t      && ref->type == REF_ARRAY\n+\t      && ref->u.ar.dimen == 1\n+\t      && ref->u.ar.dimen_type[0] == DIMEN_RANGE\n+\t      && ref->u.ar.stride[0] == NULL)\n+\t    {\n+\t      gfc_expr *start = ref->u.ar.start[0];\n+\t      gfc_expr *end = ref->u.ar.end[0];\n+\t      void *mem = NULL;\n+\n+\t      /* Optimize away the (:) reference.  */\n+\t      if (start == NULL && end == NULL)\n+\t\t{\n+\t\t  if (e->ref == ref)\n+\t\t    e->ref = ref->next;\n+\t\t  else\n+\t\t    e->ref->next = ref->next;\n+\t\t  mem = ref;\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  ref->type = REF_SUBSTRING;\n+\t\t  if (start == NULL)\n+\t\t    start = gfc_int_expr (1);\n+\t\t  ref->u.ss.start = start;\n+\t\t  if (end == NULL && e->ts.cl)\n+\t\t    end = gfc_copy_expr (e->ts.cl->length);\n+\t\t  ref->u.ss.end = end;\n+\t\t  ref->u.ss.length = e->ts.cl;\n+\t\t  e->ts.cl = NULL;\n+\t\t}\n+\t      ref = ref->next;\n+\t      gfc_free (mem);\n+\t    }\n+\n+\t  /* Any further ref is an error.  */\n+\t  if (ref)\n+\t    {\n+\t      gcc_assert (ref->type == REF_ARRAY);\n+\t      gfc_error (\"Syntax error in EQUIVALENCE statement at %L\",\n+\t\t\t &ref->u.ar.where);\n+\t      continue;\n+\t    }\n+\t}\n+\n       if (gfc_resolve_expr (e) == FAILURE)\n         continue;\n \n@@ -4832,19 +4895,30 @@ resolve_equivalence (gfc_equiv *eq)\n           continue;\n         }\n \n-      /* Shall not be a structure component.  */\n       r = e->ref;\n       while (r)\n         {\n-          if (r->type == REF_COMPONENT)\n-            {\n-              gfc_error (\"Structure component '%s' at %L cannot be an \"\n-                         \"EQUIVALENCE object\",\n-                         r->u.c.component->name, &e->where);\n-              break;\n-            }\n-          r = r->next;\n-        }\n+\t  /* Shall not be a structure component.  */\n+\t  if (r->type == REF_COMPONENT)\n+\t    {\n+\t      gfc_error (\"Structure component '%s' at %L cannot be an \"\n+\t\t\t \"EQUIVALENCE object\",\n+\t\t\t r->u.c.component->name, &e->where);\n+\t      break;\n+\t    }\n+\n+\t  /* A substring shall not have length zero.  */\n+\t  if (r->type == REF_SUBSTRING)\n+\t    {\n+\t      if (compare_bound (r->u.ss.start, r->u.ss.end) == CMP_GT)\n+\t\t{\n+\t\t  gfc_error (\"Substring at %L has length zero\",\n+\t\t\t     &r->u.ss.start->where);\n+\t\t  break;\n+\t\t}\n+\t    }\n+\t  r = r->next;\n+\t}\n     }    \n }      \n "}, {"sha": "5f0466a84d01e79a43b69f5b41eba72fd4041022", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8006d0933c8c954b134152c1fb60a379c7fb846/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8006d0933c8c954b134152c1fb60a379c7fb846/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a8006d0933c8c954b134152c1fb60a379c7fb846", "patch": "@@ -1,3 +1,13 @@\n+2005-08-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR fortran/18833\n+\tPR fortran/20850\n+\t* gfortran.dg/equiv_1.f90: New test.\n+\t* gfortran.dg/equiv_2.f90: New test.\n+\t* gfortran.fortran-torture/execute/equiv_2.f90: New test.\n+\t* gfortran.fortran-torture/execute/equiv_3.f90: New test.\n+\t* gfortran.fortran-torture/execute/equiv_4.f90: New test.\n+\n 2005-08-05  James A. Morrison  <phython@gcc.gnu.org>\n \n \t* gcc.c-torture/execute/vrp-5.c: New test."}, {"sha": "8a8a8b97b8b0897da55ba839c3051c1d88cb966f", "filename": "gcc/testsuite/gfortran.dg/equiv_1.f90", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8006d0933c8c954b134152c1fb60a379c7fb846/gcc%2Ftestsuite%2Fgfortran.dg%2Fequiv_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8006d0933c8c954b134152c1fb60a379c7fb846/gcc%2Ftestsuite%2Fgfortran.dg%2Fequiv_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fequiv_1.f90?ref=a8006d0933c8c954b134152c1fb60a379c7fb846", "patch": "@@ -0,0 +1,9 @@\n+      program broken_equiv\n+      real d (2)\t! { dg-error \"Inconsistent equivalence rules\" \"d\" }\n+      real e\t\t! { dg-error \"Inconsistent equivalence rules\" \"e\" }\n+      equivalence (d (1), e), (d (2), e)\n+\n+      real f (2)\t! { dg-error \"Inconsistent equivalence rules\" \"f\" }\n+      double precision g (2) ! { dg-error \"Inconsistent equivalence rules\" \"g\" }\n+      equivalence (f (1), g (1)), (f (2), g (2)) ! Not standard conforming\n+      end"}, {"sha": "4bcdca1afc8f0fa4ead33826ed7f33b567a0615d", "filename": "gcc/testsuite/gfortran.dg/equiv_2.f90", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8006d0933c8c954b134152c1fb60a379c7fb846/gcc%2Ftestsuite%2Fgfortran.dg%2Fequiv_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8006d0933c8c954b134152c1fb60a379c7fb846/gcc%2Ftestsuite%2Fgfortran.dg%2Fequiv_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fequiv_2.f90?ref=a8006d0933c8c954b134152c1fb60a379c7fb846", "patch": "@@ -0,0 +1,17 @@\n+      subroutine broken_equiv1\n+      character*4 h\n+      character*3 i\n+      equivalence (h(1:3), i(2:1))\t! { dg-error \"has length zero\" }\n+      end subroutine\n+\n+      subroutine broken_equiv2\n+      character*4 j\n+      character*2 k\n+      equivalence (j(2:3), k(1:5))\t! { dg-error \"out of bounds\" }\n+      end subroutine\n+\n+      subroutine broken_equiv3\n+      character*4 l\n+      character*2 m\n+      equivalence (l(2:3:4), m(1:2))\t! { dg-error \"\\[Ss\\]yntax error\" }\n+      end subroutine"}, {"sha": "1c88ff99643b827a7f844cf8d6eac6060f7259e5", "filename": "gcc/testsuite/gfortran.fortran-torture/execute/equiv_2.f90", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8006d0933c8c954b134152c1fb60a379c7fb846/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fequiv_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8006d0933c8c954b134152c1fb60a379c7fb846/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fequiv_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fequiv_2.f90?ref=a8006d0933c8c954b134152c1fb60a379c7fb846", "patch": "@@ -0,0 +1,46 @@\n+      subroutine test1\n+      character*8 c\n+      character*1 d, f\n+      dimension d(2), f(2)\n+      character*4 e\n+      equivalence (c(1:1), d(1)), (c(3:5), e(2:4)), (c(6:6), f(2))\n+      c='abcdefgh'\n+      if (c.ne.'abcdefgh'.or.d(1).ne.'a'.or.d(2).ne.'b') call abort\n+      if (e.ne.'bcde'.or.f(1).ne.'e'.or.f(2).ne.'f') call abort\n+      end subroutine test1\n+      subroutine test2\n+      equivalence (c(1:1), d(1)), (c(3:5), e(2:4)), (c(6:6), f(2))\n+      character*8 c\n+      character*1 d, f\n+      dimension d(2), f(2)\n+      character*4 e\n+      c='abcdefgh'\n+      if (c.ne.'abcdefgh'.or.d(1).ne.'a'.or.d(2).ne.'b') call abort\n+      if (e.ne.'bcde'.or.f(1).ne.'e'.or.f(2).ne.'f') call abort\n+      end subroutine test2\n+      subroutine test3\n+      character*8 c\n+      character*1 d, f\n+      character*4 e\n+      equivalence (c(1:1), d(1)), (c(3:5), e(2:4)), (c(6:6), f(2))\n+      dimension d(2), f(2)\n+      c='abcdefgh'\n+      if (c.ne.'abcdefgh'.or.d(1).ne.'a'.or.d(2).ne.'b') call abort\n+      if (e.ne.'bcde'.or.f(1).ne.'e'.or.f(2).ne.'f') call abort\n+      end subroutine test3\n+      subroutine test4\n+      dimension d(2), f(2)\n+      equivalence (c(1:1), d(1)), (c(3:5), e(2:4)), (c(6:6), f(2))\n+      character*8 c\n+      character*1 d, f\n+      character*4 e\n+      c='abcdefgh'\n+      if (c.ne.'abcdefgh'.or.d(1).ne.'a'.or.d(2).ne.'b') call abort\n+      if (e.ne.'bcde'.or.f(1).ne.'e'.or.f(2).ne.'f') call abort\n+      end subroutine test4\n+      program main\n+      call test1\n+      call test2\n+      call test3\n+      call test4\n+      end program main"}, {"sha": "75103e200fb30f7df7f79076ce8d851b9e58737d", "filename": "gcc/testsuite/gfortran.fortran-torture/execute/equiv_3.f90", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8006d0933c8c954b134152c1fb60a379c7fb846/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fequiv_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8006d0933c8c954b134152c1fb60a379c7fb846/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fequiv_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fequiv_3.f90?ref=a8006d0933c8c954b134152c1fb60a379c7fb846", "patch": "@@ -0,0 +1,13 @@\n+      subroutine test1\n+      type t\n+      sequence\n+      character(8) c\n+      end type t\n+      type(t) :: tc, td\n+      equivalence (tc, td)\n+      tc%c='abcdefgh'\n+      if (tc%c.ne.'abcdefgh'.or.td%c(1:1).ne.'a') call abort\n+      end subroutine test1\n+      program main\n+      call test1\n+      end program main"}, {"sha": "9c232786dbb19c68fad387cfda3bda67d05476af", "filename": "gcc/testsuite/gfortran.fortran-torture/execute/equiv_4.f90", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8006d0933c8c954b134152c1fb60a379c7fb846/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fequiv_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8006d0933c8c954b134152c1fb60a379c7fb846/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fequiv_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fequiv_4.f90?ref=a8006d0933c8c954b134152c1fb60a379c7fb846", "patch": "@@ -0,0 +1,54 @@\n+      subroutine test1\n+      character*8 c\n+      character*2 d, f\n+      dimension d(2), f(2)\n+      character*4 e\n+      equivalence (c(1:1), d(1)(2:)), (c(3:5), e(2:4))\n+      equivalence (c(6:6), f(2)(:))\n+      d(1)='AB'\n+      c='abcdefgh'\n+      if (c.ne.'abcdefgh'.or.d(1).ne.'Aa'.or.d(2).ne.'bc') call abort\n+      if (e.ne.'bcde'.or.f(1).ne.'de'.or.f(2).ne.'fg') call abort\n+      end subroutine test1\n+      subroutine test2\n+      equivalence (c(1:1), d(1)(2:2)), (c(3:5), e(2:4))\n+      equivalence (c(6:6), f(2)(1:))\n+      character*8 c\n+      character*2 d, f\n+      dimension d(2), f(2)\n+      character*4 e\n+      d(1)='AB'\n+      c='abcdefgh'\n+      if (c.ne.'abcdefgh'.or.d(1).ne.'Aa'.or.d(2).ne.'bc') call abort\n+      if (e.ne.'bcde'.or.f(1).ne.'de'.or.f(2).ne.'fg') call abort\n+      end subroutine test2\n+      subroutine test3\n+      character*8 c\n+      character*2 d, f\n+      character*4 e\n+      equivalence (c(1:1), d(1)(2:)), (c(3:5), e(2:4))\n+      equivalence (c(6:6), f(2)(:1))\n+      dimension d(2), f(2)\n+      d(1)='AB'\n+      c='abcdefgh'\n+      if (c.ne.'abcdefgh'.or.d(1).ne.'Aa'.or.d(2).ne.'bc') call abort\n+      if (e.ne.'bcde'.or.f(1).ne.'de'.or.f(2).ne.'fg') call abort\n+      end subroutine test3\n+      subroutine test4\n+      dimension d(2), f(2)\n+      equivalence (c(1:1), d(1)(2:2)), (c(3:5), e(2:4))\n+      equivalence (c(6:6), f(2)(1:2))\n+      character*8 c\n+      character*2 d, f\n+      character*4 e\n+      d(1)='AB'\n+      c='abcdefgh'\n+      if (c.ne.'abcdefgh'.or.d(1).ne.'Aa'.or.d(2).ne.'bc') call abort\n+      if (e.ne.'bcde'.or.f(1).ne.'de'.or.f(2).ne.'fg') call abort\n+      end subroutine test4\n+      program main\n+      call test1\n+      call test2\n+      call test3\n+      call test4\n+      end program main"}]}