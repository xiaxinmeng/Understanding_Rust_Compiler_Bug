{"sha": "b31c244f31774551be1156bce8bdf5641ad35f55", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjMxYzI0NGYzMTc3NDU1MWJlMTE1NmJjZThiZGY1NjQxYWQzNWY1NQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-06-13T00:24:44Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-06-13T00:24:44Z"}, "message": "(ereal_from_float, ereal_from_double): New functions.\n\nFrom-SVN: r4670", "tree": {"sha": "44af7f19ad11059e5c710d0d1106992868c5c498", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44af7f19ad11059e5c710d0d1106992868c5c498"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b31c244f31774551be1156bce8bdf5641ad35f55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b31c244f31774551be1156bce8bdf5641ad35f55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b31c244f31774551be1156bce8bdf5641ad35f55", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b31c244f31774551be1156bce8bdf5641ad35f55/comments", "author": null, "committer": null, "parents": [{"sha": "5d5ea90929d24044ac05c891fcc8f7859e52daae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d5ea90929d24044ac05c891fcc8f7859e52daae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d5ea90929d24044ac05c891fcc8f7859e52daae"}], "stats": {"total": 64, "additions": 64, "deletions": 0}, "files": [{"sha": "7e0a27e64a76c13dccb0fc82be33c5b06f3189ab", "filename": "gcc/real.c", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b31c244f31774551be1156bce8bdf5641ad35f55/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b31c244f31774551be1156bce8bdf5641ad35f55/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=b31c244f31774551be1156bce8bdf5641ad35f55", "patch": "@@ -4975,4 +4975,68 @@ enum machine_mode mode;\n     *nan++ = *p++;\n }\n \n+/* Convert an SFmode target `float' value to a REAL_VALUE_TYPE.\n+   This is the inverse of the function `etarsingle' invoked by\n+   REAL_VALUE_TO_TARGET_SINGLE.  */\n+\n+REAL_VALUE_TYPE\n+ereal_from_float (f)\n+     unsigned long f;\n+{\n+  REAL_VALUE_TYPE r;\n+  unsigned EMUSHORT s[2];\n+  unsigned EMUSHORT e[NE];\n+\n+  /* Convert 32 bit integer to array of 16 bit pieces in target machine order.\n+   This is the inverse operation to what the function `endian' does.  */\n+#if WORDS_BIG_ENDIAN\n+  s[0] = (unsigned EMUSHORT) (f >> 16);\n+  s[1] = (unsigned EMUSHORT) f;\n+#else\n+  s[0] = (unsigned EMUSHORT) f;\n+  s[1] = (unsigned EMUSHORT) (f >> 16);\n+#endif\n+  /* Convert and promote the target float to E-type. */\n+  e24toe (s, e);\n+  /* Output E-type to REAL_VALUE_TYPE. */\n+  PUT_REAL (e, &r);\n+  return r;\n+}\n+\n+/* Convert a DFmode target `double' value to a REAL_VALUE_TYPE.\n+   This is the inverse of the function `etardouble' invoked by\n+   REAL_VALUE_TO_TARGET_DOUBLE.\n+\n+   The DFmode is stored as an array of longs (i.e., HOST_WIDE_INTs)\n+   with 32 bits of the value per each long.  The first element\n+   of the input array holds the bits that would come first in the\n+   target computer's memory.  */\n+\n+REAL_VALUE_TYPE\n+ereal_from_double (d)\n+     unsigned long d[];\n+{\n+  REAL_VALUE_TYPE r;\n+  unsigned EMUSHORT s[4];\n+  unsigned EMUSHORT e[NE];\n+\n+  /* Convert array of 32 bit pieces to equivalent array of 16 bit pieces.\n+     This is the inverse of `endian'.   */\n+#if WORDS_BIG_ENDIAN\n+  s[0] = (unsigned EMUSHORT) (d[0] >> 16);\n+  s[1] = (unsigned EMUSHORT) d[0];\n+  s[2] = (unsigned EMUSHORT) (d[1] >> 16);\n+  s[3] = (unsigned EMUSHORT) d[1];\n+#else\n+  s[0] = (unsigned EMUSHORT) d[0];\n+  s[1] = (unsigned EMUSHORT) (d[0] >> 16);\n+  s[2] = (unsigned EMUSHORT) d[1];\n+  s[3] = (unsigned EMUSHORT) (d[1] >> 16);\n+#endif\n+  /* Convert target double to E-type. */\n+  e53toe (s, e);\n+  /* Output E-type to REAL_VALUE_TYPE. */\n+  PUT_REAL (e, &r);\n+  return r;\n+}\n #endif /* EMU_NON_COMPILE not defined */"}]}