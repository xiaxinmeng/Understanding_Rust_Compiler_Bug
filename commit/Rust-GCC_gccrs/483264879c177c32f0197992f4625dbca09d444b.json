{"sha": "483264879c177c32f0197992f4625dbca09d444b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDgzMjY0ODc5YzE3N2MzMmYwMTk3OTkyZjQ2MjVkYmNhMDlkNDQ0Yg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2010-04-07T15:55:20Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-04-07T15:55:20Z"}, "message": "PR c++/11094, DR 408\n\n\tPR c++/11094, DR 408\n\t* cp-tree.h (VAR_HAD_UNKNOWN_BOUND, SET_VAR_HAD_UNKNOWN_BOUND): New.\n\t* decl2.c (finish_static_data_member_decl): Set it.\n\t* decl.c (duplicate_decls): Propagate it.\n\t* pt.c (tsubst_decl): Don't substitute the domain of an array\n\tVAR_DECL if it's set.\n\t(regenerate_decl_from_template): Substitute it here.\n\t(type_dependent_expression_p): Return true if it's set.\n\t* semantics.c (finish_decltype_type): Instantiate such a variable.\n\t* typeck.c (cxx_sizeof_expr): Likewise.\n\t(strip_array_domain): New.\n\nFrom-SVN: r158075", "tree": {"sha": "a5b7680b208ae794f76af4b1d4f4f2e185f2f4a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5b7680b208ae794f76af4b1d4f4f2e185f2f4a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/483264879c177c32f0197992f4625dbca09d444b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/483264879c177c32f0197992f4625dbca09d444b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/483264879c177c32f0197992f4625dbca09d444b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/483264879c177c32f0197992f4625dbca09d444b/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ae099258d3654e328fca96e0ebd457487a70a685", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae099258d3654e328fca96e0ebd457487a70a685", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae099258d3654e328fca96e0ebd457487a70a685"}], "stats": {"total": 131, "additions": 126, "deletions": 5}, "files": [{"sha": "4ea2565e51e46df716cefbce29ed79db4a2d8be1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483264879c177c32f0197992f4625dbca09d444b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483264879c177c32f0197992f4625dbca09d444b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=483264879c177c32f0197992f4625dbca09d444b", "patch": "@@ -1,5 +1,17 @@\n 2010-04-07  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/11094, DR 408\n+\t* cp-tree.h (VAR_HAD_UNKNOWN_BOUND, SET_VAR_HAD_UNKNOWN_BOUND): New.\n+\t* decl2.c (finish_static_data_member_decl): Set it.\n+\t* decl.c (duplicate_decls): Propagate it.\n+\t* pt.c (tsubst_decl): Don't substitute the domain of an array\n+\tVAR_DECL if it's set.\n+\t(regenerate_decl_from_template): Substitute it here.\n+\t(type_dependent_expression_p): Return true if it's set.\n+\t* semantics.c (finish_decltype_type): Instantiate such a variable.\n+\t* typeck.c (cxx_sizeof_expr): Likewise.\n+\t(strip_array_domain): New.\n+\n \t* name-lookup.c (current_decl_namespace): Non-static.\n \t(pop_nested_namespace): Sanity check.\n \t* cp-tree.h: Declare current_decl_namespace."}, {"sha": "941c49acb54ec10719ad59a6f145afcf64827df2", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483264879c177c32f0197992f4625dbca09d444b/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483264879c177c32f0197992f4625dbca09d444b/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=483264879c177c32f0197992f4625dbca09d444b", "patch": "@@ -1758,7 +1758,7 @@ struct GTY(()) lang_decl_base {\n   unsigned threadprivate_or_deleted_p : 1; /* var or fn */\n   unsigned anticipated_p : 1;\t\t   /* fn or type */\n   unsigned friend_attr : 1;\t\t   /* fn or type */\n-  unsigned template_conv_p : 1;\t\t   /* template only? */\n+  unsigned template_conv_p : 1;\t\t   /* var or template */\n   unsigned odr_used : 1;\t\t   /* var or fn */\n   unsigned u2sel : 1;\n   /* 1 spare bit */\n@@ -2088,6 +2088,15 @@ struct GTY(()) lang_decl {\n #define DECL_TEMPLATE_CONV_FN_P(NODE) \\\n   (DECL_LANG_SPECIFIC (TEMPLATE_DECL_CHECK (NODE))->u.base.template_conv_p)\n \n+/* Nonzero if NODE, a static data member, was declared in its class as an\n+   array of unknown bound.  */\n+#define VAR_HAD_UNKNOWN_BOUND(NODE)\t\t\t\\\n+  (DECL_LANG_SPECIFIC (VAR_DECL_CHECK (NODE))\t\t\\\n+   ? DECL_LANG_SPECIFIC (NODE)->u.base.template_conv_p\t\\\n+   : false)\n+#define SET_VAR_HAD_UNKNOWN_BOUND(NODE) \\\n+  (DECL_LANG_SPECIFIC (VAR_DECL_CHECK (NODE))->u.base.template_conv_p = true)\n+\n /* Set the overloaded operator code for NODE to CODE.  */\n #define SET_OVERLOADED_OPERATOR_CODE(NODE, CODE) \\\n   (LANG_DECL_FN_CHECK (NODE)->operator_code = (CODE))\n@@ -5393,6 +5402,7 @@ extern tree composite_pointer_type\t\t(tree, tree, tree, tree,\n \t\t\t\t\t\t composite_pointer_operation, \n \t\t\t\t\t\t tsubst_flags_t);\n extern tree merge_types\t\t\t\t(tree, tree);\n+extern tree strip_array_domain\t\t\t(tree);\n extern tree check_return_expr\t\t\t(tree, bool *);\n extern tree cp_build_binary_op                  (location_t,\n \t\t\t\t\t\t enum tree_code, tree, tree,"}, {"sha": "7a82ed6c511bad003215c4d37f8c86f5832f5ca8", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483264879c177c32f0197992f4625dbca09d444b/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483264879c177c32f0197992f4625dbca09d444b/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=483264879c177c32f0197992f4625dbca09d444b", "patch": "@@ -1929,6 +1929,10 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t  if (DECL_VIRTUAL_P (newdecl))\n \t    DECL_THUNKS (newdecl) = DECL_THUNKS (olddecl);\n \t}\n+      /* Only variables have this field.  */\n+      else if (TREE_CODE (newdecl) == VAR_DECL\n+\t       && VAR_HAD_UNKNOWN_BOUND (olddecl))\n+\tSET_VAR_HAD_UNKNOWN_BOUND (newdecl);\n     }\n \n   if (TREE_CODE (newdecl) == FUNCTION_DECL)"}, {"sha": "d811c9e316a5c82847be0f7ade3945d021371fea", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483264879c177c32f0197992f4625dbca09d444b/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483264879c177c32f0197992f4625dbca09d444b/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=483264879c177c32f0197992f4625dbca09d444b", "patch": "@@ -785,6 +785,10 @@ finish_static_data_member_decl (tree decl,\n   DECL_INITIAL (decl) = init;\n   DECL_IN_AGGR_P (decl) = 1;\n \n+  if (TREE_CODE (TREE_TYPE (decl)) == ARRAY_TYPE\n+      && TYPE_DOMAIN (TREE_TYPE (decl)) == NULL_TREE)\n+    SET_VAR_HAD_UNKNOWN_BOUND (decl);\n+\n   cp_finish_decl (decl, init, init_const_expr_p, asmspec_tree, flags);\n }\n "}, {"sha": "367608fb9088dfb00267c48808727e0eb45eafaf", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483264879c177c32f0197992f4625dbca09d444b/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483264879c177c32f0197992f4625dbca09d444b/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=483264879c177c32f0197992f4625dbca09d444b", "patch": "@@ -9496,6 +9496,8 @@ tsubst_decl (tree t, tree args, tsubst_flags_t complain)\n \t      type = DECL_ORIGINAL_TYPE (t);\n \t    else\n \t      type = TREE_TYPE (t);\n+\t    if (TREE_CODE (t) == VAR_DECL && VAR_HAD_UNKNOWN_BOUND (t))\n+\t      type = strip_array_domain (type);\n \t    type = tsubst (type, args, complain, in_decl);\n \t  }\n \tif (TREE_CODE (r) == VAR_DECL)\n@@ -16456,10 +16458,15 @@ regenerate_decl_from_template (tree decl, tree tmpl)\n \tDECL_DECLARED_INLINE_P (decl) = 1;\n     }\n   else if (TREE_CODE (decl) == VAR_DECL)\n-    DECL_INITIAL (decl) =\n-      tsubst_expr (DECL_INITIAL (code_pattern), args,\n-\t\t   tf_error, DECL_TI_TEMPLATE (decl),\n-\t\t   /*integral_constant_expression_p=*/false);\n+    {\n+      DECL_INITIAL (decl) =\n+\ttsubst_expr (DECL_INITIAL (code_pattern), args,\n+\t\t     tf_error, DECL_TI_TEMPLATE (decl),\n+\t\t     /*integral_constant_expression_p=*/false);\n+      if (VAR_HAD_UNKNOWN_BOUND (decl))\n+\tTREE_TYPE (decl) = tsubst (TREE_TYPE (code_pattern), args,\n+\t\t\t\t   tf_error, DECL_TI_TEMPLATE (decl));\n+    }\n   else\n     gcc_unreachable ();\n \n@@ -17730,6 +17737,15 @@ type_dependent_expression_p (tree expression)\n       return false;\n     }\n \n+  /* A static data member of the current instantiation with incomplete\n+     array type is type-dependent, as the definition and specializations\n+     can have different bounds.  */\n+  if (TREE_CODE (expression) == VAR_DECL\n+      && DECL_CLASS_SCOPE_P (expression)\n+      && dependent_type_p (DECL_CONTEXT (expression))\n+      && VAR_HAD_UNKNOWN_BOUND (expression))\n+    return true;\n+\n   if (TREE_TYPE (expression) == unknown_type_node)\n     {\n       if (TREE_CODE (expression) == ADDR_EXPR)"}, {"sha": "d425402e3ce868e17697fd777c27470729fc5728", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483264879c177c32f0197992f4625dbca09d444b/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483264879c177c32f0197992f4625dbca09d444b/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=483264879c177c32f0197992f4625dbca09d444b", "patch": "@@ -4836,6 +4836,14 @@ finish_decltype_type (tree expr, bool id_expression_or_member_access_p)\n   /* The type denoted by decltype(e) is defined as follows:  */\n \n   expr = resolve_nondeduced_context (expr);\n+\n+  /* To get the size of a static data member declared as an array of\n+     unknown bound, we need to instantiate it.  */\n+  if (TREE_CODE (expr) == VAR_DECL\n+      && VAR_HAD_UNKNOWN_BOUND (expr)\n+      && DECL_TEMPLATE_INSTANTIATION (expr))\n+    instantiate_decl (expr, /*defer_ok*/true, /*expl_inst_mem*/false);\n+\n   if (id_expression_or_member_access_p)\n     {\n       /* If e is an id-expression or a class member access (5.2.5"}, {"sha": "f623717273cc9eadfbbb2273a9041d5e4ec58216", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483264879c177c32f0197992f4625dbca09d444b/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483264879c177c32f0197992f4625dbca09d444b/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=483264879c177c32f0197992f4625dbca09d444b", "patch": "@@ -878,6 +878,19 @@ merge_types (tree t1, tree t2)\n     return cp_build_type_attribute_variant (t1, attributes);\n }\n \n+/* Return the ARRAY_TYPE type without its domain.  */\n+\n+tree\n+strip_array_domain (tree type)\n+{\n+  tree t2;\n+  gcc_assert (TREE_CODE (type) == ARRAY_TYPE);\n+  if (TYPE_DOMAIN (type) == NULL_TREE)\n+    return type;\n+  t2 = build_cplus_array_type (TREE_TYPE (type), NULL_TREE);\n+  return cp_build_type_attribute_variant (t2, TYPE_ATTRIBUTES (type));\n+}\n+\n /* Wrapper around cp_common_type that is used by c-common.c and other\n    front end optimizations that remove promotions.  \n \n@@ -1596,6 +1609,13 @@ cxx_sizeof_expr (tree e, tsubst_flags_t complain)\n       return e;\n     }\n \n+  /* To get the size of a static data member declared as an array of\n+     unknown bound, we need to instantiate it.  */\n+  if (TREE_CODE (e) == VAR_DECL\n+      && VAR_HAD_UNKNOWN_BOUND (e)\n+      && DECL_TEMPLATE_INSTANTIATION (e))\n+    instantiate_decl (e, /*defer_ok*/true, /*expl_inst_mem*/false);\n+\n   if (TREE_CODE (e) == COMPONENT_REF\n       && TREE_CODE (TREE_OPERAND (e, 1)) == FIELD_DECL\n       && DECL_C_BIT_FIELD (TREE_OPERAND (e, 1)))"}, {"sha": "32c64b329e319b31ad9c30bf31cf6745725e1837", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483264879c177c32f0197992f4625dbca09d444b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483264879c177c32f0197992f4625dbca09d444b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=483264879c177c32f0197992f4625dbca09d444b", "patch": "@@ -1,5 +1,7 @@\n 2010-04-07  Jason Merrill  <jason@redhat.com>\n \n+\t* g++.dg/template/dr408.C: New.\n+\n \t* g++.dg/lookup/ns4.C: New.\n \n \tPR c++/38392"}, {"sha": "d118ce45cd4beddfbd6d949c06e0d09f7cbf2c45", "filename": "gcc/testsuite/g++.dg/template/dr408.C", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483264879c177c32f0197992f4625dbca09d444b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdr408.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483264879c177c32f0197992f4625dbca09d444b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdr408.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdr408.C?ref=483264879c177c32f0197992f4625dbca09d444b", "patch": "@@ -0,0 +1,45 @@\n+// DR 408\n+// { dg-do link }\n+\n+// Test that a size given in the out-of-class definition isn't used until\n+// instantiation time.\n+template<typename T>\n+struct X\n+{\n+  static char s[];\n+  int c;\n+};\n+\n+template<typename T>\n+char X<T>::s[sizeof(X<T>)];\n+\n+#define sassert(EXP) int ar[(EXP)?1:-1]\n+sassert(sizeof (X<char>::s) == sizeof (int));\n+\n+// Test that a specialization can have a different size.\n+\n+template <int> void g();\n+template <> void g<2>() { }\n+\n+template <typename T>\n+struct S {\n+  static int i[];\n+  void f();\n+};\n+\n+template <typename T>\n+int S<T>::i[] = { 1 };\n+\n+template <typename T>\n+void S<T>::f() {\n+  g<sizeof (i) / sizeof (int)>();\n+}\n+\n+template <>\n+int S<int>::i[] = { 1, 2 };\n+\n+int main()\n+{\n+  S<int> s;\n+  s.f();\n+}"}]}