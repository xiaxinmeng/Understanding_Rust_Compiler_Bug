{"sha": "3c9a82fec0e08b24ee49c94c3cdfd6c426042f64", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M5YTgyZmVjMGUwOGIyNGVlNDljOTRjM2NkZmQ2YzQyNjA0MmY2NA==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2020-04-07T18:16:14Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-16T13:07:15Z"}, "message": "[Ada] Implement AI12-0216 on restricting overlap errors in calls\n\n2020-06-16  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* sem_warn.adb (Warn_On_Overlapping_Actuals): Simplify code and\n\timplement AI12-0216 which clarifies the conditions under which\n\toverlapping actuals in a call are illegal. If proper warnings\n\tare enabled, GNAT also emits warnings in legal cases of\n\toverlopping actuals.", "tree": {"sha": "62d17df86b658fc80bc77c0bb2920040ec1a1fc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62d17df86b658fc80bc77c0bb2920040ec1a1fc6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c9a82fec0e08b24ee49c94c3cdfd6c426042f64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c9a82fec0e08b24ee49c94c3cdfd6c426042f64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c9a82fec0e08b24ee49c94c3cdfd6c426042f64", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c9a82fec0e08b24ee49c94c3cdfd6c426042f64/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e7cb6eee494e3ec59ae1faf679fe2c3a578a95e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e7cb6eee494e3ec59ae1faf679fe2c3a578a95e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e7cb6eee494e3ec59ae1faf679fe2c3a578a95e"}], "stats": {"total": 43, "additions": 13, "deletions": 30}, "files": [{"sha": "4f4728c02245951f00ab6196d5940fb7e566439c", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 13, "deletions": 30, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c9a82fec0e08b24ee49c94c3cdfd6c426042f64/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c9a82fec0e08b24ee49c94c3cdfd6c426042f64/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=3c9a82fec0e08b24ee49c94c3cdfd6c426042f64", "patch": "@@ -3674,9 +3674,6 @@ package body Sem_Warn is\n       Act2      : Node_Id;\n       Form1     : Entity_Id;\n       Form2     : Entity_Id;\n-      Warn_Only : Boolean;\n-      --  GNAT warns on overlapping in-out parameters of any type, not just for\n-      --  elementary in-out parameters (as specified in RM 6.4.1 (15/3-17/3)).\n \n    --  Start of processing for Warn_On_Overlapping_Actuals\n \n@@ -3686,29 +3683,6 @@ package body Sem_Warn is\n          return;\n       end if;\n \n-      --  The call is illegal only if there are at least two in-out parameters\n-      --  of the same elementary type.\n-\n-      Warn_Only := True;\n-      Form1 := First_Formal (Subp);\n-      Set_Warn_Only : while Present (Form1) loop\n-         Form2 := Next_Formal (Form1);\n-         while Present (Form2) loop\n-            if Is_Elementary_Type (Etype (Form1))\n-              and then Is_Elementary_Type (Etype (Form2))\n-              and then Ekind (Form1) /= E_In_Parameter\n-              and then Ekind (Form2) /= E_In_Parameter\n-            then\n-               Warn_Only := False;\n-               exit Set_Warn_Only;\n-            end if;\n-\n-            Next_Formal (Form2);\n-         end loop;\n-\n-         Next_Formal (Form1);\n-      end loop Set_Warn_Only;\n-\n       --  Exclude calls rewritten as enumeration literals\n \n       if Nkind (N) not in N_Subprogram_Call\n@@ -3722,9 +3696,16 @@ package body Sem_Warn is\n       --  N that is passed as a parameter of mode in out or out to the call C,\n       --  there is no other name among the other parameters of mode in out or\n       --  out to C that is known to denote the same object (RM 6.4.1(6.15/3))\n+      --  This has been clarified in AI12-0216 to indicate that the illegality\n+      --  only occurs if both formals are of an elementary type, bevause of the\n+      --  non-determinism on the write-back of the corresponding actuals.\n+      --  Earlier versions of the language made it illegal if only one of the\n+      --  actuals was an elementary parameter that overlapped a composite\n+      --  actual, and both were writable.\n \n       --  If appropriate warning switch is set, we also report warnings on\n-      --  overlapping parameters that are record types or array types.\n+      --  overlapping parameters that are composite types. Users find these\n+      --  warnings useful, and they used in style guides.\n \n       --  It is also worthwhile to warn on overlaps of composite objects when\n       --  only one of the formals is (in)-out. Note that the RM rule above is\n@@ -3836,14 +3817,16 @@ package body Sem_Warn is\n                           --  Overlap is only illegal in Ada 2012 in the case\n                           --  of elementary types (passed by copy). For other\n                           --  types we always have a warning in all versions.\n+                          --  This is clarified by AI12-0216.\n \n-                          or else not Is_Elementary_Type (Etype (Form1))\n+                          or else not\n+                           (Is_Elementary_Type (Etype (Form1))\n+                            and then Is_Elementary_Type (Etype (Form2)))\n \n                           --  debug flag -gnatd.E changes the error to a\n                           --  warning even in Ada 2012 mode.\n \n-                          or else Error_To_Warning\n-                          or else Warn_Only;\n+                          or else Error_To_Warning;\n \n                         if Is_Elementary_Type (Etype (Act1))\n                           and then Ekind (Form2) = E_In_Parameter"}]}