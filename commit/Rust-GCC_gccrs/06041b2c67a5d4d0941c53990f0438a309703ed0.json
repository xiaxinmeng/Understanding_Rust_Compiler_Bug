{"sha": "06041b2c67a5d4d0941c53990f0438a309703ed0", "node_id": "C_kwDOANBUbNoAKDA2MDQxYjJjNjdhNWQ0ZDA5NDFjNTM5OTBmMDQzOGEzMDk3MDNlZDA", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-12-15T22:41:53Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-12-16T22:38:02Z"}, "message": "c++: delayed noexcept in member function template [PR99980]\n\nSome time ago I noticed that we don't properly delay parsing of\nnoexcept for member function templates.  This patch fixes that.\n\nIt didn't work because even though we set CP_PARSER_FLAGS_DELAY_NOEXCEPT\nin cp_parser_member_declaration, member template declarations take\na different path: we call cp_parser_template_declaration and return\nprior to setting the flag.\n\n\tPR c++/99980\n\ngcc/cp/ChangeLog:\n\n\t* parser.c (cp_parser_single_declaration): Maybe pass\n\tCP_PARSER_FLAGS_DELAY_NOEXCEPT down to cp_parser_init_declarator.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/noexcept71.C: New test.", "tree": {"sha": "dfcf3fc8fd5c682fe5f5c9f5627bd6766dbcb665", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dfcf3fc8fd5c682fe5f5c9f5627bd6766dbcb665"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06041b2c67a5d4d0941c53990f0438a309703ed0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06041b2c67a5d4d0941c53990f0438a309703ed0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06041b2c67a5d4d0941c53990f0438a309703ed0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06041b2c67a5d4d0941c53990f0438a309703ed0/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93faac7e32e4f9503c559f2a3e5a4732f5e9ea09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93faac7e32e4f9503c559f2a3e5a4732f5e9ea09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93faac7e32e4f9503c559f2a3e5a4732f5e9ea09"}], "stats": {"total": 38, "additions": 37, "deletions": 1}, "files": [{"sha": "44eed7ea63877e9a04e423450c14283f8c70ec44", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06041b2c67a5d4d0941c53990f0438a309703ed0/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06041b2c67a5d4d0941c53990f0438a309703ed0/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=06041b2c67a5d4d0941c53990f0438a309703ed0", "patch": "@@ -31673,8 +31673,13 @@ cp_parser_single_declaration (cp_parser* parser,\n       && (cp_lexer_next_token_is_not (parser->lexer, CPP_SEMICOLON)\n \t  || decl_specifiers.type != error_mark_node))\n     {\n+      int flags = CP_PARSER_FLAGS_TYPENAME_OPTIONAL;\n+      /* We don't delay parsing for friends, though CWG 2510 may change\n+\t that.  */\n+      if (member_p && !(friend_p && *friend_p))\n+\tflags |= CP_PARSER_FLAGS_DELAY_NOEXCEPT;\n       decl = cp_parser_init_declarator (parser,\n-\t\t\t\t\tCP_PARSER_FLAGS_TYPENAME_OPTIONAL,\n+\t\t\t\t\tflags,\n \t\t\t\t        &decl_specifiers,\n \t\t\t\t        checks,\n \t\t\t\t        /*function_definition_allowed_p=*/true,"}, {"sha": "361d6ad7b6017fcddf86fa817062f2f9de1b56d1", "filename": "gcc/testsuite/g++.dg/cpp0x/noexcept71.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06041b2c67a5d4d0941c53990f0438a309703ed0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept71.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06041b2c67a5d4d0941c53990f0438a309703ed0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept71.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept71.C?ref=06041b2c67a5d4d0941c53990f0438a309703ed0", "patch": "@@ -0,0 +1,31 @@\n+// PR c++/99980\n+// { dg-do compile { target c++11 } }\n+\n+#define SA(X) static_assert(X, #X)\n+\n+struct S {\n+  template<typename T>\n+  void f(T) noexcept(B);\n+\n+  struct N {\n+    template<typename T>\n+    void f2(T) noexcept(B);\n+  };\n+\n+  static constexpr bool B = true;\n+};\n+\n+S s;\n+SA(noexcept(s.f(10)));\n+S::N n;\n+SA(noexcept(n.f2(10)));\n+\n+struct Bad {\n+  template<typename T>\n+  using U = void() noexcept(B); // { dg-error \"not declared\" }\n+\n+  template<typename T>\n+  friend void friendo() noexcept(B); // { dg-error \"not declared\" }\n+\n+  static constexpr bool B = true;\n+};"}]}