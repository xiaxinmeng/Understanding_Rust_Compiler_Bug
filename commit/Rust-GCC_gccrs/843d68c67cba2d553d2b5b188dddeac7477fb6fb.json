{"sha": "843d68c67cba2d553d2b5b188dddeac7477fb6fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQzZDY4YzY3Y2JhMmQ1NTNkMmI1YjE4OGRkZGVhYzc0NzdmYjZmYg==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@vnet.ibm.com", "date": "2013-10-22T17:31:17Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2013-10-22T17:31:17Z"}, "message": "rs6000.c (altivec_expand_vec_perm_const): Reverse meaning of merge-high and merge-low masks for little endian...\n\ngcc:\n\n2013-10-22  Bill Schmidt  <wschmidt@vnet.ibm.com>\n\n\t* config/rs6000/rs6000.c (altivec_expand_vec_perm_const): Reverse\n\tmeaning of merge-high and merge-low masks for little endian; avoid\n\tuse of vector-pack masks for little endian for mismatched modes.\n\ngcc/testsuite:\n\n2013-10-22  Bill Schmidt  <wschmidt@vnet.ibm.com>\n\n\t* gcc.target/powerpc/altivec-perm-1.c: Move the two vector pack\n\ttests into...\n\t* gcc.target/powerpc/altivec-perm-3.c: ...this new test, which is\n\trestricted to big-endian targets.\n\nFrom-SVN: r203930", "tree": {"sha": "1566eb4998c969ca8ca97a920755ae0458b871c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1566eb4998c969ca8ca97a920755ae0458b871c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/843d68c67cba2d553d2b5b188dddeac7477fb6fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/843d68c67cba2d553d2b5b188dddeac7477fb6fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/843d68c67cba2d553d2b5b188dddeac7477fb6fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/843d68c67cba2d553d2b5b188dddeac7477fb6fb/comments", "author": null, "committer": null, "parents": [{"sha": "7faffbc4be05ee2e161f78d830b143236e99f2ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7faffbc4be05ee2e161f78d830b143236e99f2ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7faffbc4be05ee2e161f78d830b143236e99f2ca"}], "stats": {"total": 89, "additions": 68, "deletions": 21}, "files": [{"sha": "c1d3ba81e39b4d66ccb9975dfb0928913f1bead7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/843d68c67cba2d553d2b5b188dddeac7477fb6fb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/843d68c67cba2d553d2b5b188dddeac7477fb6fb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=843d68c67cba2d553d2b5b188dddeac7477fb6fb", "patch": "@@ -1,3 +1,9 @@\n+2013-10-22  Bill Schmidt  <wschmidt@vnet.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (altivec_expand_vec_perm_const): Reverse\n+\tmeaning of merge-high and merge-low masks for little endian; avoid\n+\tuse of vector-pack masks for little endian for mismatched modes.\n+\n 2013-10-22  Jan-Benedict Glaw  <jbglaw@lug-owl.de>\n \n \t* config/tilepro/tilepro.c: Include \"tree.h\"."}, {"sha": "afd6db231af8be2058f695c0ae35740c4cff0086", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 32, "deletions": 6, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/843d68c67cba2d553d2b5b188dddeac7477fb6fb/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/843d68c67cba2d553d2b5b188dddeac7477fb6fb/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=843d68c67cba2d553d2b5b188dddeac7477fb6fb", "patch": "@@ -28838,17 +28838,23 @@ altivec_expand_vec_perm_const (rtx operands[4])\n       {  1,  3,  5,  7,  9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31 } },\n     { OPTION_MASK_ALTIVEC, CODE_FOR_altivec_vpkuwum,\n       {  2,  3,  6,  7, 10, 11, 14, 15, 18, 19, 22, 23, 26, 27, 30, 31 } },\n-    { OPTION_MASK_ALTIVEC, CODE_FOR_altivec_vmrghb,\n+    { OPTION_MASK_ALTIVEC, \n+      BYTES_BIG_ENDIAN ? CODE_FOR_altivec_vmrghb : CODE_FOR_altivec_vmrglb,\n       {  0, 16,  1, 17,  2, 18,  3, 19,  4, 20,  5, 21,  6, 22,  7, 23 } },\n-    { OPTION_MASK_ALTIVEC, CODE_FOR_altivec_vmrghh,\n+    { OPTION_MASK_ALTIVEC,\n+      BYTES_BIG_ENDIAN ? CODE_FOR_altivec_vmrghh : CODE_FOR_altivec_vmrglh,\n       {  0,  1, 16, 17,  2,  3, 18, 19,  4,  5, 20, 21,  6,  7, 22, 23 } },\n-    { OPTION_MASK_ALTIVEC, CODE_FOR_altivec_vmrghw,\n+    { OPTION_MASK_ALTIVEC,\n+      BYTES_BIG_ENDIAN ? CODE_FOR_altivec_vmrghw : CODE_FOR_altivec_vmrglw,\n       {  0,  1,  2,  3, 16, 17, 18, 19,  4,  5,  6,  7, 20, 21, 22, 23 } },\n-    { OPTION_MASK_ALTIVEC, CODE_FOR_altivec_vmrglb,\n+    { OPTION_MASK_ALTIVEC,\n+      BYTES_BIG_ENDIAN ? CODE_FOR_altivec_vmrglb : CODE_FOR_altivec_vmrghb,\n       {  8, 24,  9, 25, 10, 26, 11, 27, 12, 28, 13, 29, 14, 30, 15, 31 } },\n-    { OPTION_MASK_ALTIVEC, CODE_FOR_altivec_vmrglh,\n+    { OPTION_MASK_ALTIVEC,\n+      BYTES_BIG_ENDIAN ? CODE_FOR_altivec_vmrglh : CODE_FOR_altivec_vmrghh,\n       {  8,  9, 24, 25, 10, 11, 26, 27, 12, 13, 28, 29, 14, 15, 30, 31 } },\n-    { OPTION_MASK_ALTIVEC, CODE_FOR_altivec_vmrglw,\n+    { OPTION_MASK_ALTIVEC,\n+      BYTES_BIG_ENDIAN ? CODE_FOR_altivec_vmrglw : CODE_FOR_altivec_vmrghw,\n       {  8,  9, 10, 11, 24, 25, 26, 27, 12, 13, 14, 15, 28, 29, 30, 31 } },\n     { OPTION_MASK_P8_VECTOR, CODE_FOR_p8_vmrgew,\n       {  0,  1,  2,  3, 16, 17, 18, 19,  8,  9, 10, 11, 24, 25, 26, 27 } },\n@@ -28981,6 +28987,26 @@ altivec_expand_vec_perm_const (rtx operands[4])\n \t  enum machine_mode omode = insn_data[icode].operand[0].mode;\n \t  enum machine_mode imode = insn_data[icode].operand[1].mode;\n \n+\t  /* For little-endian, don't use vpkuwum and vpkuhum if the\n+\t     underlying vector type is not V4SI and V8HI, respectively.\n+\t     For example, using vpkuwum with a V8HI picks up the even\n+\t     halfwords (BE numbering) when the even halfwords (LE\n+\t     numbering) are what we need.  */\n+\t  if (!BYTES_BIG_ENDIAN\n+\t      && icode == CODE_FOR_altivec_vpkuwum\n+\t      && ((GET_CODE (op0) == REG\n+\t\t   && GET_MODE (op0) != V4SImode)\n+\t\t  || (GET_CODE (op0) == SUBREG\n+\t\t      && GET_MODE (XEXP (op0, 0)) != V4SImode)))\n+\t    continue;\n+\t  if (!BYTES_BIG_ENDIAN\n+\t      && icode == CODE_FOR_altivec_vpkuhum\n+\t      && ((GET_CODE (op0) == REG\n+\t\t   && GET_MODE (op0) != V8HImode)\n+\t\t  || (GET_CODE (op0) == SUBREG\n+\t\t      && GET_MODE (XEXP (op0, 0)) != V8HImode)))\n+\t    continue;\n+\n           /* For little-endian, the two input operands must be swapped\n              (or swapped back) to ensure proper right-to-left numbering\n              from 0 to 2N-1.  */"}, {"sha": "446183db4665047b941517efd0737630d6a1228e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/843d68c67cba2d553d2b5b188dddeac7477fb6fb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/843d68c67cba2d553d2b5b188dddeac7477fb6fb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=843d68c67cba2d553d2b5b188dddeac7477fb6fb", "patch": "@@ -1,3 +1,10 @@\n+2013-10-22  Bill Schmidt  <wschmidt@vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/altivec-perm-1.c: Move the two vector pack\n+\ttests into...\n+\t* gcc.target/powerpc/altivec-perm-3.c: ...this new test, which is\n+\trestricted to big-endian targets.\n+\n 2013-10-22  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran 57893"}, {"sha": "c3cf67e44f40e46bb6f9b003d925e79bc61ef35f", "filename": "gcc/testsuite/gcc.target/powerpc/altivec-perm-1.c", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/843d68c67cba2d553d2b5b188dddeac7477fb6fb/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-perm-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/843d68c67cba2d553d2b5b188dddeac7477fb6fb/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-perm-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-perm-1.c?ref=843d68c67cba2d553d2b5b188dddeac7477fb6fb", "patch": "@@ -19,19 +19,6 @@ V b4(V x)\n   return __builtin_shuffle(x, (V){ 4,5,6,7, 4,5,6,7, 4,5,6,7, 4,5,6,7, });\n }\n \n-V p2(V x, V y)\n-{\n-  return __builtin_shuffle(x, y,\n-\t(V){ 1,  3,  5,  7,  9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31 });\n-\n-}\n-\n-V p4(V x, V y)\n-{\n-  return __builtin_shuffle(x, y,\n-\t(V){ 2,  3,  6,  7, 10, 11, 14, 15, 18, 19, 22, 23, 26, 27, 30, 31 });\n-}\n-\n V h1(V x, V y)\n {\n   return __builtin_shuffle(x, y,\n@@ -72,5 +59,3 @@ V l4(V x, V y)\n /* { dg-final { scan-assembler \"vspltb\" } } */\n /* { dg-final { scan-assembler \"vsplth\" } } */\n /* { dg-final { scan-assembler \"vspltw\" } } */\n-/* { dg-final { scan-assembler \"vpkuhum\" } } */\n-/* { dg-final { scan-assembler \"vpkuwum\" } } */"}, {"sha": "d0b671eac77fc55c180529aa03c2420913fd6c02", "filename": "gcc/testsuite/gcc.target/powerpc/altivec-perm-3.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/843d68c67cba2d553d2b5b188dddeac7477fb6fb/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-perm-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/843d68c67cba2d553d2b5b188dddeac7477fb6fb/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-perm-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-perm-3.c?ref=843d68c67cba2d553d2b5b188dddeac7477fb6fb", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-skip-if \"\" { powerpc*le-*-* } { \"*\" } { \"\" } } */\n+/* { dg-options \"-O -maltivec -mno-vsx\" } */\n+\n+typedef unsigned char V __attribute__((vector_size(16)));\n+\n+V p2(V x, V y)\n+{\n+  return __builtin_shuffle(x, y,\n+\t(V){ 1,  3,  5,  7,  9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31 });\n+\n+}\n+\n+V p4(V x, V y)\n+{\n+  return __builtin_shuffle(x, y,\n+\t(V){ 2,  3,  6,  7, 10, 11, 14, 15, 18, 19, 22, 23, 26, 27, 30, 31 });\n+}\n+\n+/* { dg-final { scan-assembler-not \"vperm\" } } */\n+/* { dg-final { scan-assembler \"vpkuhum\" } } */\n+/* { dg-final { scan-assembler \"vpkuwum\" } } */"}]}