{"sha": "83263ef536402228e0a6cdf5f0fae8055b8b472d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODMyNjNlZjUzNjQwMjIyOGUwYTZjZGY1ZjBmYWU4MDU1YjhiNDcyZA==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2019-11-09T17:37:38Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2019-11-09T17:37:38Z"}, "message": "ipa-fnsummary.c (estimate_edge_size_and_time): Do not call estimate_edge_devirt_benefit when not computing hints...\n\n\n\t* ipa-fnsummary.c (estimate_edge_size_and_time): Do not call\n\testimate_edge_devirt_benefit when not computing hints;\n\tdo not compute time when not asked for.\n\t(estimate_calls_size_and_time): Pass NULL hints and time when\n\tthese are not computed; do not evaluate hint predicates when these are\n\tnot computed.\n\t(ipa_merge_fn_summary_after_inlining): Do not re-evaluate edge\n\tfrequency.\n\nFrom-SVN: r278005", "tree": {"sha": "4c38ff7bab7e22adafc07aa7996875e527862e2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c38ff7bab7e22adafc07aa7996875e527862e2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83263ef536402228e0a6cdf5f0fae8055b8b472d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83263ef536402228e0a6cdf5f0fae8055b8b472d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83263ef536402228e0a6cdf5f0fae8055b8b472d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83263ef536402228e0a6cdf5f0fae8055b8b472d/comments", "author": null, "committer": null, "parents": [{"sha": "c47bee97fa9927563a5015b28e24a5505ba557a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c47bee97fa9927563a5015b28e24a5505ba557a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c47bee97fa9927563a5015b28e24a5505ba557a3"}], "stats": {"total": 53, "additions": 37, "deletions": 16}, "files": [{"sha": "0d6b35def70858a608bebdac0e21300377f27cc3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83263ef536402228e0a6cdf5f0fae8055b8b472d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83263ef536402228e0a6cdf5f0fae8055b8b472d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=83263ef536402228e0a6cdf5f0fae8055b8b472d", "patch": "@@ -1,3 +1,14 @@\n+2019-11-09  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-fnsummary.c (estimate_edge_size_and_time): Do not call\n+\testimate_edge_devirt_benefit when not computing hints;\n+\tdo not compute time when not asked for.\n+\t(estimate_calls_size_and_time): Pass NULL hints and time when\n+\tthese are not computed; do not evaluate hint predicates when these are\n+\tnot computed.\n+\t(ipa_merge_fn_summary_after_inlining): Do not re-evaluate edge\n+\tfrequency.\n+\n 2019-11-09  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/92401"}, {"sha": "569efdc794d45262717b2bf0744d4c9a9aae9805", "filename": "gcc/ipa-fnsummary.c", "status": "modified", "additions": 26, "deletions": 16, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83263ef536402228e0a6cdf5f0fae8055b8b472d/gcc%2Fipa-fnsummary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83263ef536402228e0a6cdf5f0fae8055b8b472d/gcc%2Fipa-fnsummary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-fnsummary.c?ref=83263ef536402228e0a6cdf5f0fae8055b8b472d", "patch": "@@ -2894,16 +2894,17 @@ estimate_edge_size_and_time (struct cgraph_edge *e, int *size, int *min_size,\n   int call_size = es->call_stmt_size;\n   int call_time = es->call_stmt_time;\n   int cur_size;\n-  if (!e->callee\n+  if (!e->callee && hints && e->maybe_hot_p ()\n       && estimate_edge_devirt_benefit (e, &call_size, &call_time,\n-\t\t\t\t       known_vals, known_contexts, known_aggs)\n-      && hints && e->maybe_hot_p ())\n+\t\t\t\t       known_vals, known_contexts, known_aggs))\n     *hints |= INLINE_HINT_indirect_call;\n   cur_size = call_size * ipa_fn_summary::size_scale;\n   *size += cur_size;\n   if (min_size)\n     *min_size += cur_size;\n-  if (prob == REG_BR_PROB_BASE)\n+  if (!time)\n+    ;\n+  else if (prob == REG_BR_PROB_BASE)\n     *time += ((sreal)call_time) * e->sreal_frequency ();\n   else\n     *time += ((sreal)call_time * prob) * e->sreal_frequency ();\n@@ -3235,8 +3236,11 @@ ipa_call_context::estimate_size_and_time (int *ret_size,\n \t  }\n     }\n \n-  estimate_calls_size_and_time (m_node, &size, &min_size, &time, &hints, m_possible_truths,\n+  estimate_calls_size_and_time (m_node, &size, &min_size,\n+\t\t\t\tret_time ? &time : NULL,\n+\t\t\t\tret_hints ? &hints : NULL, m_possible_truths,\n \t\t\t\tm_known_vals, m_known_contexts, m_known_aggs);\n+\n   sreal nonspecialized_time = time;\n \n   for (i = 0; vec_safe_iterate (info->size_time_table, i, &e); i++)\n@@ -3260,6 +3264,8 @@ ipa_call_context::estimate_size_and_time (int *ret_size,\n \t     known to be constant in a specialized setting.  */\n \t  if (nonconst)\n \t    size += e->size;\n+\t  if (!ret_time)\n+\t    continue;\n \t  nonspecialized_time += e->time;\n \t  if (!nonconst)\n \t    ;\n@@ -3295,16 +3301,19 @@ ipa_call_context::estimate_size_and_time (int *ret_size,\n   if (time > nonspecialized_time)\n     time = nonspecialized_time;\n \n-  if (info->loop_iterations\n-      && !info->loop_iterations->evaluate (m_possible_truths))\n-    hints |= INLINE_HINT_loop_iterations;\n-  if (info->loop_stride\n-      && !info->loop_stride->evaluate (m_possible_truths))\n-    hints |= INLINE_HINT_loop_stride;\n-  if (info->scc_no)\n-    hints |= INLINE_HINT_in_scc;\n-  if (DECL_DECLARED_INLINE_P (m_node->decl))\n-    hints |= INLINE_HINT_declared_inline;\n+  if (ret_hints)\n+    {\n+      if (info->loop_iterations\n+\t  && !info->loop_iterations->evaluate (m_possible_truths))\n+\thints |= INLINE_HINT_loop_iterations;\n+      if (info->loop_stride\n+\t  && !info->loop_stride->evaluate (m_possible_truths))\n+\thints |= INLINE_HINT_loop_stride;\n+      if (info->scc_no)\n+\thints |= INLINE_HINT_in_scc;\n+      if (DECL_DECLARED_INLINE_P (m_node->decl))\n+\thints |= INLINE_HINT_declared_inline;\n+    }\n \n   size = RDIV (size, ipa_fn_summary::size_scale);\n   min_size = RDIV (min_size, ipa_fn_summary::size_scale);\n@@ -3604,6 +3613,7 @@ ipa_merge_fn_summary_after_inlining (struct cgraph_edge *edge)\n \t  gcc_assert (map < ipa_get_param_count (params_summary));\n \t}\n     }\n+  sreal freq =  edge->sreal_frequency ();\n   for (i = 0; vec_safe_iterate (callee_info->size_time_table, i, &e); i++)\n     {\n       predicate p;\n@@ -3620,7 +3630,7 @@ ipa_merge_fn_summary_after_inlining (struct cgraph_edge *edge)\n \t\t\t\t      toplev_predicate);\n       if (p != false && nonconstp != false)\n \t{\n-\t  sreal add_time = ((sreal)e->time * edge->sreal_frequency ());\n+\t  sreal add_time = ((sreal)e->time * freq);\n \t  int prob = e->nonconst_predicate.probability (callee_info->conds,\n \t\t\t\t\t\t\tclause, es->param);\n \t  add_time = add_time * prob / REG_BR_PROB_BASE;"}]}