{"sha": "411707f4e466b75ec2dac4d024195fd1999eeeec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDExNzA3ZjRlNDY2Yjc1ZWMyZGFjNGQwMjQxOTVmZDE5OTllZWVlYw==", "commit": {"author": {"name": "Chandrakala Chavva", "email": "cchavva@redhat.com", "date": "2001-02-06T01:23:13Z"}, "committer": {"name": "Chandra Chavva", "email": "cchavva@gcc.gnu.org", "date": "2001-02-06T01:23:13Z"}, "message": "final.c: Move the declaration profile_label_no to ...\n\n        * final.c: Move the declaration profile_label_no to ...\n        * output.h: ... here.\n        * function.c (expand_function_start): Call PROFILE_HOOK.\n        * config/rs6000/aix.h: Define PROFILE_HOOK.\n        * config/rs6000/rs6000-protos.h: output_profile_hook new.\n        * config/rs6000/rs6000.c (output_profile_hook): Define.\n        (output_prolog): Do nothing for ABI_AIX as it is taken care by\n        output_profile_hook.\n        tm.texi : Explain new macro PROFILE_HOOK.\n\nFrom-SVN: r39473", "tree": {"sha": "b7d306e1aa3339f74147d38e1d9fb9b6ebffe031", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7d306e1aa3339f74147d38e1d9fb9b6ebffe031"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/411707f4e466b75ec2dac4d024195fd1999eeeec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/411707f4e466b75ec2dac4d024195fd1999eeeec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/411707f4e466b75ec2dac4d024195fd1999eeeec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/411707f4e466b75ec2dac4d024195fd1999eeeec/comments", "author": null, "committer": null, "parents": [{"sha": "8720914be356a666c811a881e02ce92c3c9e4f92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8720914be356a666c811a881e02ce92c3c9e4f92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8720914be356a666c811a881e02ce92c3c9e4f92"}], "stats": {"total": 113, "additions": 56, "deletions": 57}, "files": [{"sha": "6f9b17b07728c135e65802a83d4222571d043ed0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/411707f4e466b75ec2dac4d024195fd1999eeeec/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/411707f4e466b75ec2dac4d024195fd1999eeeec/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=411707f4e466b75ec2dac4d024195fd1999eeeec", "patch": "@@ -1,3 +1,15 @@\n+2001-02-05  Chandrakala Chavva  <cchavva@redhat.com>\n+\n+\t* final.c: Move the declaration profile_label_no to ...\n+        * output.h: ... here.\n+        * function.c (expand_function_start): Call PROFILE_HOOK.\n+        * config/rs6000/aix.h: Define PROFILE_HOOK.\n+        * config/rs6000/rs6000-protos.h: output_profile_hook new.\n+        * config/rs6000/rs6000.c (output_profile_hook): Define.\n+        (output_prolog): Do nothing for ABI_AIX as it is taken care by\n+        output_profile_hook.\n+\ttm.texi : Explain new macro PROFILE_HOOK.\n+\n 2001-02-06  Hans-Peter Nilsson  <hp@axis.com>\n \n \t* extend.texi (Extended Asm): Do not say that semicolon is always"}, {"sha": "3cead72e77612eaa437f8fc10956286fc41e4912", "filename": "gcc/config/rs6000/aix.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/411707f4e466b75ec2dac4d024195fd1999eeeec/gcc%2Fconfig%2Frs6000%2Faix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/411707f4e466b75ec2dac4d024195fd1999eeeec/gcc%2Fconfig%2Frs6000%2Faix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix.h?ref=411707f4e466b75ec2dac4d024195fd1999eeeec", "patch": "@@ -635,3 +635,4 @@ toc_section ()\t\t\t\t\t\t\\\n    So we have to squirrel it away with this.  */\n #define SETUP_FRAME_ADDRESSES() rs6000_aix_emit_builtin_unwind_init ()\n \n+#define PROFILE_HOOK(LABEL)   output_profile_hook (LABEL)"}, {"sha": "846321a36adc288e43fb58dae1c68b1d3c8bd8e8", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/411707f4e466b75ec2dac4d024195fd1999eeeec/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/411707f4e466b75ec2dac4d024195fd1999eeeec/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=411707f4e466b75ec2dac4d024195fd1999eeeec", "patch": "@@ -157,6 +157,7 @@ extern void output_ascii PARAMS ((FILE *, const char *, int));\n extern void rs6000_gen_section_name PARAMS ((char **, const char *,\n \t\t\t\t\t     const char *));\n extern void output_function_profiler PARAMS ((FILE *, int));\n+extern void output_profile_hook  PARAMS ((int));\n extern int rs6000_trampoline_size PARAMS ((void));\n extern void toc_section PARAMS ((void));\n extern void sdata_section PARAMS ((void));"}, {"sha": "9d8060bea2d4ea71e7b4d4a10471d030aba0a644", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 28, "deletions": 53, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/411707f4e466b75ec2dac4d024195fd1999eeeec/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/411707f4e466b75ec2dac4d024195fd1999eeeec/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=411707f4e466b75ec2dac4d024195fd1999eeeec", "patch": "@@ -7080,6 +7080,32 @@ rs6000_gen_section_name (buf, filename, section_desc)\n     *p = '\\0';\n }\n \f\n+\n+/* Emit profile function. */\n+void\n+output_profile_hook (labelno)\n+     int labelno;\n+{\n+\n+   if (profile_flag && DEFAULT_ABI == ABI_AIX)\n+     {\n+       char *buf;\n+       int length = 0;\n+       rtx fun;\n+\n+       labelno += 1;\n+       buf = permalloc (labelno+6);\n+\n+       ASM_GENERATE_INTERNAL_LABEL (buf, \"LP\", labelno);\n+\n+       fun = gen_rtx_SYMBOL_REF (Pmode, buf+1);\n+\n+       emit_library_call (init_one_libfunc (RS6000_MCOUNT), 0, VOIDmode, 1,\n+                          fun, Pmode, Pmode);\n+\n+      }\n+}\n+\n /* Write function profiler code. */\n \n void\n@@ -7148,60 +7174,9 @@ output_function_profiler (file, labelno)\n       break;\n \n     case ABI_AIX:\n-      /* Set up a TOC entry for the profiler label.  */\n-      toc_section ();\n-      ASM_OUTPUT_INTERNAL_LABEL (file, \"LPC\", labelno);\n-      if (TARGET_MINIMAL_TOC)\n-\t{\n-\t  fputs (TARGET_32BIT ? \"\\t.long \" : \"\\t.llong \", file);\n-\t  assemble_name (file, buf);\n-\t  putc ('\\n', file);\n-\t}\n-      else\n-\t{\n-\t  fputs (\"\\t.tc\\t\", file);\n-\t  assemble_name (file, buf);\n-\t  fputs (\"[TC],\", file);\n-\t  assemble_name (file, buf);\n-\t  putc ('\\n', file);\n-\t}\n-      text_section ();\n-\n-  /* Figure out last used parameter register.  The proper thing to do is\n-     to walk incoming args of the function.  A function might have live\n-     parameter registers even if it has no incoming args.  */\n-\n-      for (last_parm_reg = 10;\n-\t   last_parm_reg > 2 && ! regs_ever_live [last_parm_reg];\n-\t   last_parm_reg--)\n-\t;\n-\n-  /* Save parameter registers in regs 23-30 and static chain in r22.\n-     Don't overwrite reg 31, since it might be set up as the frame pointer.  */\n-\n-      for (i = 3, j = 30; i <= last_parm_reg; i++, j--)\n-\tasm_fprintf (file, \"\\tmr %d,%d\\n\", j, i);\n-      if (current_function_needs_context)\n-\tasm_fprintf (file, \"\\tmr %d,%d\\n\", j, STATIC_CHAIN_REGNUM);\n-\n-  /* Load location address into r3, and call mcount.  */\n-\n-      ASM_GENERATE_INTERNAL_LABEL (buf, \"LPC\", labelno);\n-      asm_fprintf (file, TARGET_32BIT ? \"\\t{l|lwz} %s,\" : \"\\tld %s,\",\n-\t\t   reg_names[3]);\n-      assemble_name (file, buf);\n-      asm_fprintf (file, \"(%s)\\n\\tbl %s\\n\\t\", reg_names[2], RS6000_MCOUNT);\n-      asm_fprintf (file, RS6000_CALL_GLUE);\n-      putc('\\n', file);\n-\n-  /* Restore parameter registers and static chain.  */\n-\n-      for (i = 3, j = 30; i <= last_parm_reg; i++, j--)\n-\tasm_fprintf (file, \"\\tmr %d,%d\\n\", i, j);\n-      if (current_function_needs_context)\n-\tasm_fprintf (file, \"\\tmr %d,%d\\n\", STATIC_CHAIN_REGNUM, j);\n-\n+      /* Don't do anything, done in output_profile_hook (). */\n       break;\n+\n     }\n }\n "}, {"sha": "18f3e90fe8bca7607729f58037a0bd460da3b20b", "filename": "gcc/final.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/411707f4e466b75ec2dac4d024195fd1999eeeec/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/411707f4e466b75ec2dac4d024195fd1999eeeec/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=411707f4e466b75ec2dac4d024195fd1999eeeec", "patch": "@@ -205,10 +205,6 @@ char regs_ever_live[FIRST_PSEUDO_REGISTER];\n \n int frame_pointer_needed;\n \n-/* Assign unique numbers to labels generated for profiling.  */\n-\n-int profile_label_no;\n-\n /* Number of unmatched NOTE_INSN_BLOCK_BEG notes we have seen.  */\n \n static int block_depth;"}, {"sha": "5421450c4a818628ae5ad3423483002bee3affff", "filename": "gcc/function.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/411707f4e466b75ec2dac4d024195fd1999eeeec/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/411707f4e466b75ec2dac4d024195fd1999eeeec/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=411707f4e466b75ec2dac4d024195fd1999eeeec", "patch": "@@ -6471,6 +6471,11 @@ expand_function_start (subr, parms_have_cleanups)\n \t\t\t Pmode);\n     }\n \n+#ifdef PROFILE_HOOK\n+  if (profile_flag)\n+    PROFILE_HOOK (profile_label_no);\n+#endif\n+\n   /* After the display initializations is where the tail-recursion label\n      should go, if we end up needing one.   Ensure we have a NOTE here\n      since some things (like trampolines) get placed before this.  */"}, {"sha": "0cdb719174f227ea82bbc2adf965ff272c2cd5e2", "filename": "gcc/output.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/411707f4e466b75ec2dac4d024195fd1999eeeec/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/411707f4e466b75ec2dac4d024195fd1999eeeec/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=411707f4e466b75ec2dac4d024195fd1999eeeec", "patch": "@@ -457,3 +457,6 @@ extern const char *user_label_prefix;\n #define STRIP_NAME_ENCODING(VAR,SYMBOL_NAME) \\\n   (VAR) = ((SYMBOL_NAME) + ((SYMBOL_NAME)[0] == '*'))\n #endif\n+/* Assign unique numbers to labels generated for profiling.  */\n+\n+int profile_label_no;"}, {"sha": "252c5c0309915c2c56e010ef9ad585d48bbe2f0c", "filename": "gcc/tm.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/411707f4e466b75ec2dac4d024195fd1999eeeec/gcc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/411707f4e466b75ec2dac4d024195fd1999eeeec/gcc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftm.texi?ref=411707f4e466b75ec2dac4d024195fd1999eeeec", "patch": "@@ -3677,6 +3677,12 @@ variable to be loaded into some register.  The name of this variable is\n @samp{LP} followed by the number @var{labelno}, so you would generate\n the name using @samp{LP%d} in a @code{fprintf}.\n \n+@findex PROFILE_HOOK\n+@item PROFILE_HOOK\n+A C statement or compound statement to output to @var{file} some assembly\n+code to call the profiling subroutine @code{mcount} even the target does\n+not support profiling.\n+\n @findex NO_PROFILE_COUNTERS\n @item NO_PROFILE_COUNTERS\n Define this macro if the @code{mcount} subroutine on your system does"}]}