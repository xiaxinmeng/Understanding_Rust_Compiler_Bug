{"sha": "7633f08ea73eaaabdaa40260660236cf596cbf67", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzYzM2YwOGVhNzNlYWFhYmRhYTQwMjYwNjYwMjM2Y2Y1OTZjYmY2Nw==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2005-10-19T11:20:48Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2005-10-19T11:20:48Z"}, "message": "s390-protos.h (s390_hard_regno_rename_ok): Add prototype.\n\n\t* config/s390/s390-protos.h (s390_hard_regno_rename_ok): Add prototype.\n\t* config/s390/s390.c (s390_hard_regno_rename_ok): New function.\n\t(s390_can_eliminate): Handle BASE_REGNUM elimination.\n\t(s390_initial_elimination_offset): Likewise.\n\t(s390_conditional_register_usage): BASE_REGNUM is no longer a fixed\n\tregister on TARGET_ZARCH targets.\n\t* config/s390/s390.h (HARD_REGNO_RENAME_OK): Define\n\t(INITIAL_FRAME_POINTER_OFFSET): Remove.\n\t(REG_ALLOC_ORDER): Move BASE_REGNUM lower.\n\t(ELIMINABLE_REGS): Add BASE_REGNUM elimination rule.\n\nFrom-SVN: r105611", "tree": {"sha": "1dec978ace83e5fe53292b7f61309f8c44616f0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1dec978ace83e5fe53292b7f61309f8c44616f0f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7633f08ea73eaaabdaa40260660236cf596cbf67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7633f08ea73eaaabdaa40260660236cf596cbf67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7633f08ea73eaaabdaa40260660236cf596cbf67", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7633f08ea73eaaabdaa40260660236cf596cbf67/comments", "author": null, "committer": null, "parents": [{"sha": "da48f5ec925021d918500ec18a35b0d37bc29811", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da48f5ec925021d918500ec18a35b0d37bc29811", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da48f5ec925021d918500ec18a35b0d37bc29811"}], "stats": {"total": 77, "additions": 67, "deletions": 10}, "files": [{"sha": "967ff8450003bfa29c26ab36e27413e0eba8fa4c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7633f08ea73eaaabdaa40260660236cf596cbf67/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7633f08ea73eaaabdaa40260660236cf596cbf67/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7633f08ea73eaaabdaa40260660236cf596cbf67", "patch": "@@ -1,3 +1,16 @@\n+2005-10-19  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n+\n+\t* config/s390/s390-protos.h (s390_hard_regno_rename_ok): Add prototype.\n+\t* config/s390/s390.c (s390_hard_regno_rename_ok): New function.\n+\t(s390_can_eliminate): Handle BASE_REGNUM elimination.\n+\t(s390_initial_elimination_offset): Likewise.\n+\t(s390_conditional_register_usage): BASE_REGNUM is no longer a fixed\n+\tregister on TARGET_ZARCH targets.\n+\t* config/s390/s390.h (HARD_REGNO_RENAME_OK): Define\n+\t(INITIAL_FRAME_POINTER_OFFSET): Remove.\n+\t(REG_ALLOC_ORDER): Move BASE_REGNUM lower.\n+\t(ELIMINABLE_REGS): Add BASE_REGNUM elimination rule.\n+\n 2005-10-19  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n \t* config/s390/s390.md: Comment describing output modifiers updated."}, {"sha": "b18e1d13f07ba143154291db87ceb800e6f4cebd", "filename": "gcc/config/s390/s390-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7633f08ea73eaaabdaa40260660236cf596cbf67/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7633f08ea73eaaabdaa40260660236cf596cbf67/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-protos.h?ref=7633f08ea73eaaabdaa40260660236cf596cbf67", "patch": "@@ -30,6 +30,7 @@ extern void s390_emit_epilogue (bool);\n extern void s390_function_profiler (FILE *, int);\n extern void s390_conditional_register_usage (void);\n extern void s390_set_has_landing_pad_p (bool);\n+extern bool s390_hard_regno_rename_ok (unsigned int, unsigned int);\n \n #ifdef RTX_CODE\n extern int s390_extra_constraint_str (rtx, int, const char *);"}, {"sha": "445f4e1a10dec394ca55ea49bd4f82e34f40a643", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7633f08ea73eaaabdaa40260660236cf596cbf67/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7633f08ea73eaaabdaa40260660236cf596cbf67/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=7633f08ea73eaaabdaa40260660236cf596cbf67", "patch": "@@ -6243,11 +6243,46 @@ s390_update_frame_layout (void)\n     regs_ever_live[REGNO (cfun->machine->base_reg)] = 1;\n }\n \n+/* Return nonzero if register OLD_REG can be renamed to register NEW_REG.  */\n+\n+bool\n+s390_hard_regno_rename_ok (unsigned int old_reg, unsigned int new_reg)\n+{\n+   /* Once we've decided upon a register to use as base register, it must\n+      no longer be used for any other purpose.  */\n+  if (cfun->machine->base_reg)\n+    if (REGNO (cfun->machine->base_reg) == old_reg\n+\t|| REGNO (cfun->machine->base_reg) == new_reg)\n+      return false;\n+\n+  return true;\n+}\n+\n /* Return true if register FROM can be eliminated via register TO.  */\n \n bool\n s390_can_eliminate (int from, int to)\n {\n+  /* On zSeries machines, we have not marked the base register as fixed.\n+     Instead, we have an elimination rule BASE_REGNUM -> BASE_REGNUM.\n+     If a function requires the base register, we say here that this\n+     elimination cannot be performed.  This will cause reload to free\n+     up the base register (as if it were fixed).  On the other hand,\n+     if the current function does *not* require the base register, we\n+     say here the elimination succeeds, which in turn allows reload\n+     to allocate the base register for any other purpose.  */\n+  if (from == BASE_REGNUM && to == BASE_REGNUM)\n+    {\n+      if (TARGET_CPU_ZARCH)\n+\t{\n+\t  s390_init_frame_layout ();\n+\t  return cfun->machine->base_reg == NULL_RTX;\n+\t}\n+\n+      return false;\n+    }\n+\n+  /* Everything else must point into the stack frame.  */\n   gcc_assert (to == STACK_POINTER_REGNUM\n \t      || to == HARD_FRAME_POINTER_REGNUM);\n \n@@ -6298,6 +6333,10 @@ s390_initial_elimination_offset (int from, int to)\n       offset += index * UNITS_PER_WORD;\n       break;\n \n+    case BASE_REGNUM:\n+      offset = 0;\n+      break;\n+\n     default:\n       gcc_unreachable ();\n     }\n@@ -8263,6 +8302,8 @@ s390_conditional_register_usage (void)\n     }\n   if (TARGET_CPU_ZARCH)\n     {\n+      fixed_regs[BASE_REGNUM] = 0;\n+      call_used_regs[BASE_REGNUM] = 0;\n       fixed_regs[RETURN_REGNUM] = 0;\n       call_used_regs[RETURN_REGNUM] = 0;\n     }"}, {"sha": "d8d1d1990d0761b49a24cffe026325f8ae766546", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7633f08ea73eaaabdaa40260660236cf596cbf67/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7633f08ea73eaaabdaa40260660236cf596cbf67/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=7633f08ea73eaaabdaa40260660236cf596cbf67", "patch": "@@ -318,7 +318,7 @@ if (INTEGRAL_MODE_P (MODE) &&\t        \t    \t\\\n \n /* Preferred register allocation order.  */\n #define REG_ALLOC_ORDER                                         \\\n-{  1, 2, 3, 4, 5, 0, 13, 12, 11, 10, 9, 8, 7, 6, 14,            \\\n+{  1, 2, 3, 4, 5, 0, 12, 11, 10, 9, 8, 7, 6, 14, 13,            \\\n    16, 17, 18, 19, 20, 21, 22, 23,                              \\\n    24, 25, 26, 27, 28, 29, 30, 31,                              \\\n    15, 32, 33, 34, 35, 36, 37 }\n@@ -365,6 +365,9 @@ if (INTEGRAL_MODE_P (MODE) &&\t        \t    \t\\\n       && (HARD_REGNO_NREGS(REGNO, MODE) == 1 || !((REGNO) & 1))) :  \\\n    0)\n \n+#define HARD_REGNO_RENAME_OK(FROM, TO) \\\n+  s390_hard_regno_rename_ok (FROM, TO)\n+\n #define MODES_TIEABLE_P(MODE1, MODE2)\t\t\\\n    (((MODE1) == SFmode || (MODE1) == DFmode)\t\\\n    == ((MODE2) == SFmode || (MODE2) == DFmode))\n@@ -605,15 +608,14 @@ extern int current_function_outgoing_args_size;\n \n #define FRAME_POINTER_REQUIRED 0\n \n-#define INITIAL_FRAME_POINTER_OFFSET(DEPTH) (DEPTH) = 0\n-\n-#define ELIMINABLE_REGS\t\t\t\t             \\\n-{{ FRAME_POINTER_REGNUM, STACK_POINTER_REGNUM},\t             \\\n- { FRAME_POINTER_REGNUM, HARD_FRAME_POINTER_REGNUM},         \\\n- { ARG_POINTER_REGNUM, STACK_POINTER_REGNUM},\t             \\\n- { ARG_POINTER_REGNUM, HARD_FRAME_POINTER_REGNUM},           \\\n- { RETURN_ADDRESS_POINTER_REGNUM, STACK_POINTER_REGNUM},     \\\n- { RETURN_ADDRESS_POINTER_REGNUM, HARD_FRAME_POINTER_REGNUM}}\n+#define ELIMINABLE_REGS\t\t\t\t\t\t\\\n+{{ FRAME_POINTER_REGNUM, STACK_POINTER_REGNUM },\t\t\\\n+ { FRAME_POINTER_REGNUM, HARD_FRAME_POINTER_REGNUM },\t\t\\\n+ { ARG_POINTER_REGNUM, STACK_POINTER_REGNUM },\t\t\t\\\n+ { ARG_POINTER_REGNUM, HARD_FRAME_POINTER_REGNUM },\t\t\\\n+ { RETURN_ADDRESS_POINTER_REGNUM, STACK_POINTER_REGNUM },\t\\\n+ { RETURN_ADDRESS_POINTER_REGNUM, HARD_FRAME_POINTER_REGNUM },\t\\\n+ { BASE_REGNUM, BASE_REGNUM }}\n \n #define CAN_ELIMINATE(FROM, TO) \\\n   s390_can_eliminate ((FROM), (TO))"}]}