{"sha": "1eeed24eb2000486a3abab4395c735c385925813", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWVlZWQyNGViMjAwMDQ4NmEzYWJhYjQzOTVjNzM1YzM4NTkyNTgxMw==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1998-04-21T11:07:59Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-04-21T11:07:59Z"}, "message": "mips.c (block_move_loop): Test Pmode == DImode instead of TARGET_MIPS64.\n\n        * mips.c (block_move_loop): Test Pmode == DImode instead of\n        TARGET_MIPS64.\n        (expand_block_move, save_restore_insns): Likewise.\n        (function_prologue, mips_expand_prologue): Likewise.\n        (mips_expand_epilogue): Likewise.\n        * mips.h (POINTER_SIZE): Allow specific targets to override.\n        (Pmode): Allow specific targets to override.\n        (FUNCTION_PROFILER): Test Pmode == DImode instead of TARGET_MIPS64\n        (POINTER_BOUNDARY, FUNCTION_MODE): Likewise.\n        (TRAMPOLINE_TEMPLATE, TRAMPOLINE_SIZE): Likewise.\n        (TRAMPOLINE_ALIGNMENT, INITIALIZE_TRAMPOLINE): Likewise.\n        (CASE_VECTOR_MODE, ASM_OUTPUT_ADDR_VEC_ELT): Likewise.\n        (ASM_OUTPUT_ADDR_DIFF_ELT, SIZE_TYPE, PTRDIFF_TYPE): Likewise.\n        * mips.md (indirect, tablejump & casesi support): Test for\n        Pmode == DImode instead of TARGET_MIPS64.\n        (call patterns): Likewise.\n\nFrom-SVN: r19354", "tree": {"sha": "f6cd8cb0127d4deca8fa8e60f125d8bc9b11b38e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6cd8cb0127d4deca8fa8e60f125d8bc9b11b38e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1eeed24eb2000486a3abab4395c735c385925813", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1eeed24eb2000486a3abab4395c735c385925813", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1eeed24eb2000486a3abab4395c735c385925813", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1eeed24eb2000486a3abab4395c735c385925813/comments", "author": null, "committer": null, "parents": [{"sha": "d2f5ef7012f3bb5a0b403a1530d389c3355fb004", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2f5ef7012f3bb5a0b403a1530d389c3355fb004", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2f5ef7012f3bb5a0b403a1530d389c3355fb004"}], "stats": {"total": 149, "additions": 86, "deletions": 63}, "files": [{"sha": "9add7255519600b9da5d1767a1ec1aba873c968a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eeed24eb2000486a3abab4395c735c385925813/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eeed24eb2000486a3abab4395c735c385925813/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1eeed24eb2000486a3abab4395c735c385925813", "patch": "@@ -1,3 +1,22 @@\n+Tue Apr 21 12:05:32 1998  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* mips.c (block_move_loop): Test Pmode == DImode instead of\n+\tTARGET_MIPS64.\n+\t(expand_block_move, save_restore_insns): Likewise.\n+\t(function_prologue, mips_expand_prologue): Likewise.\n+\t(mips_expand_epilogue): Likewise.\n+\t* mips.h (POINTER_SIZE): Allow specific targets to override.\n+\t(Pmode): Allow specific targets to override.\n+\t(FUNCTION_PROFILER): Test Pmode == DImode instead of TARGET_MIPS64\n+\t(POINTER_BOUNDARY, FUNCTION_MODE): Likewise.\n+\t(TRAMPOLINE_TEMPLATE, TRAMPOLINE_SIZE): Likewise.\n+\t(TRAMPOLINE_ALIGNMENT, INITIALIZE_TRAMPOLINE): Likewise.\n+\t(CASE_VECTOR_MODE, ASM_OUTPUT_ADDR_VEC_ELT): Likewise.\n+\t(ASM_OUTPUT_ADDR_DIFF_ELT, SIZE_TYPE, PTRDIFF_TYPE): Likewise.\n+\t* mips.md (indirect, tablejump & casesi support): Test for\n+\tPmode == DImode instead of TARGET_MIPS64.\n+\t(call patterns): Likewise.\n+\n Tue Apr 21 09:43:55 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* objc/sendmsg.c: Define gen_rtx_MEM() to 1, as is already done"}, {"sha": "e9e9cf408446748bb94e2fc7ca7911e5d84c1aa3", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eeed24eb2000486a3abab4395c735c385925813/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eeed24eb2000486a3abab4395c735c385925813/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=1eeed24eb2000486a3abab4395c735c385925813", "patch": "@@ -3008,7 +3008,7 @@ block_move_loop (dest_reg, src_reg, bytes, align, orig_dest, orig_src)\n \n   if (bytes > 0x7fff)\n     {\n-      if (TARGET_LONG64)\n+      if (Pmode == DImode)\n \t{\n \t  emit_insn (gen_movdi (final_src, bytes_rtx));\n \t  emit_insn (gen_adddi3 (final_src, final_src, src_reg));\n@@ -3021,7 +3021,7 @@ block_move_loop (dest_reg, src_reg, bytes, align, orig_dest, orig_src)\n     }\n   else\n     {\n-      if (TARGET_LONG64)\n+      if (Pmode == DImode)\n \temit_insn (gen_adddi3 (final_src, src_reg, bytes_rtx));\n       else\n \temit_insn (gen_addsi3 (final_src, src_reg, bytes_rtx));\n@@ -3031,7 +3031,7 @@ block_move_loop (dest_reg, src_reg, bytes, align, orig_dest, orig_src)\n \n   bytes_rtx = GEN_INT (MAX_MOVE_BYTES);\n   emit_insn (gen_movstrsi_internal (dest_mem, src_mem, bytes_rtx, align_rtx));\n-  if (TARGET_LONG64)\n+  if (Pmode == DImode)\n     {\n       emit_insn (gen_adddi3 (src_reg, src_reg, bytes_rtx));\n       emit_insn (gen_adddi3 (dest_reg, dest_reg, bytes_rtx));\n@@ -3143,7 +3143,7 @@ expand_block_move (operands)\n \n       bytes -= leftover;\n \n-      if (TARGET_LONG64)\n+      if (Pmode == DImode)\n \t{\n \t  emit_insn (gen_iordi3 (temp, src_reg, dest_reg));\n \t  emit_insn (gen_anddi3 (temp, temp, GEN_INT (UNITS_PER_WORD-1)));\n@@ -5733,7 +5733,7 @@ save_restore_insns (store_p, large_reg, large_offset, file)\n \t  base_offset  = large_offset;\n \t  if (file == (FILE *)0)\n \t    {\n-\t      if (TARGET_LONG64)\n+\t      if (Pmode == DImode)\n \t\tinsn = emit_insn (gen_adddi3 (base_reg_rtx, large_reg, stack_pointer_rtx));\n \t      else\n \t\tinsn = emit_insn (gen_addsi3 (base_reg_rtx, large_reg, stack_pointer_rtx));\n@@ -5742,7 +5742,7 @@ save_restore_insns (store_p, large_reg, large_offset, file)\n \t    }\n \t  else\n \t    fprintf (file, \"\\t%s\\t%s,%s,%s\\n\",\n-\t\t     TARGET_LONG64 ? \"daddu\" : \"addu\",\n+\t\t     Pmode == DImode ? \"daddu\" : \"addu\",\n \t\t     reg_names[MIPS_TEMP2_REGNUM],\n \t\t     reg_names[REGNO (large_reg)],\n \t\t     reg_names[STACK_POINTER_REGNUM]);\n@@ -5780,7 +5780,7 @@ save_restore_insns (store_p, large_reg, large_offset, file)\n \t\t    RTX_FRAME_RELATED_P (insn) = 1;\n \t\t}\n \n-\t      if (TARGET_LONG64)\n+\t      if (Pmode == DImode)\n \t\tinsn = emit_insn (gen_adddi3 (base_reg_rtx, base_reg_rtx, stack_pointer_rtx));\n \t      else\n \t\tinsn = emit_insn (gen_addsi3 (base_reg_rtx, base_reg_rtx, stack_pointer_rtx));\n@@ -5792,7 +5792,7 @@ save_restore_insns (store_p, large_reg, large_offset, file)\n \t\t     reg_names[MIPS_TEMP2_REGNUM],\n \t\t     (long)base_offset,\n \t\t     (long)base_offset,\n-\t\t     TARGET_LONG64 ? \"daddu\" : \"addu\",\n+\t\t     Pmode == DImode ? \"daddu\" : \"addu\",\n \t\t     reg_names[MIPS_TEMP2_REGNUM],\n \t\t     reg_names[MIPS_TEMP2_REGNUM],\n \t\t     reg_names[STACK_POINTER_REGNUM]);\n@@ -5947,7 +5947,7 @@ save_restore_insns (store_p, large_reg, large_offset, file)\n \t  base_offset  = large_offset;\n \t  if (file == (FILE *)0)\n \t    {\n-\t      if (TARGET_LONG64)\n+\t      if (Pmode == DImode)\n \t\tinsn = emit_insn (gen_adddi3 (base_reg_rtx, large_reg, stack_pointer_rtx));\n \t      else\n \t\tinsn = emit_insn (gen_addsi3 (base_reg_rtx, large_reg, stack_pointer_rtx));\n@@ -5956,7 +5956,7 @@ save_restore_insns (store_p, large_reg, large_offset, file)\n \t    }\n \t  else\n \t    fprintf (file, \"\\t%s\\t%s,%s,%s\\n\",\n-\t\t     TARGET_LONG64 ? \"daddu\" : \"addu\",\n+\t\t     Pmode == DImode ? \"daddu\" : \"addu\",\n \t\t     reg_names[MIPS_TEMP2_REGNUM],\n \t\t     reg_names[REGNO (large_reg)],\n \t\t     reg_names[STACK_POINTER_REGNUM]);\n@@ -5996,7 +5996,7 @@ save_restore_insns (store_p, large_reg, large_offset, file)\n \n \t      if (store_p)\n \t\tRTX_FRAME_RELATED_P (insn) = 1;\n-\t      if (TARGET_LONG64)\n+\t      if (Pmode == DImode)\n \t\tinsn = emit_insn (gen_adddi3 (base_reg_rtx, base_reg_rtx, stack_pointer_rtx));\n \t      else\n \t\tinsn = emit_insn (gen_addsi3 (base_reg_rtx, base_reg_rtx, stack_pointer_rtx));\n@@ -6008,7 +6008,7 @@ save_restore_insns (store_p, large_reg, large_offset, file)\n \t\t     reg_names[MIPS_TEMP2_REGNUM],\n \t\t     (long)base_offset,\n \t\t     (long)base_offset,\n-\t\t     TARGET_LONG64 ? \"daddu\" : \"addu\",\n+\t\t     Pmode == DImode ? \"daddu\" : \"addu\",\n \t\t     reg_names[MIPS_TEMP2_REGNUM],\n \t\t     reg_names[MIPS_TEMP2_REGNUM],\n \t\t     reg_names[STACK_POINTER_REGNUM]);\n@@ -6242,7 +6242,7 @@ function_prologue (file, size)\n       if (tsize > 0)\n \t{\n \t  fprintf (file, \"\\t%s\\t%s,%s,%ld\\n\",\n-\t\t   (TARGET_LONG64 ? \"dsubu\" : \"subu\"),\n+\t\t   (Pmode == DImode ? \"dsubu\" : \"subu\"),\n \t\t   sp_str, sp_str, tsize);\n \t  fprintf (file, \"\\t.cprestore %ld\\n\", current_frame_info.args_size);\n \t}\n@@ -6403,7 +6403,7 @@ mips_expand_prologue ()\n \t  if (TARGET_MIPS16 && current_function_outgoing_args_size != 0)\n \t    {\n \t      rtx incr = GEN_INT (current_function_outgoing_args_size);\n-\t      if (TARGET_LONG64)\n+\t      if (Pmode == DImode)\n \t\tinsn = emit_insn (gen_adddi3 (hard_frame_pointer_rtx,\n                                               stack_pointer_rtx,\n                                               incr));\n@@ -6412,7 +6412,7 @@ mips_expand_prologue ()\n                                               stack_pointer_rtx,\n                                               incr));\n \t    }\n-\t  else if (TARGET_LONG64)\n+\t  else if (Pmode == DImode)\n \t    insn = emit_insn (gen_movdi (hard_frame_pointer_rtx, stack_pointer_rtx));\n \t  else\n \t    insn = emit_insn (gen_movsi (hard_frame_pointer_rtx, stack_pointer_rtx));\n@@ -6501,7 +6501,7 @@ mips_expand_prologue ()\n \t      tsize_rtx = tmp_rtx;\n \t    }\n \n-\t  if (TARGET_LONG64)\n+\t  if (Pmode == DImode)\n \t    insn = emit_insn (gen_subdi3 (stack_pointer_rtx, stack_pointer_rtx,\n \t\t\t\t\t  tsize_rtx));\n \t  else\n@@ -6528,7 +6528,7 @@ mips_expand_prologue ()\n \t  reg_rtx = gen_rtx (REG, Pmode, 3);\n   \t  emit_move_insn (hard_frame_pointer_rtx, stack_pointer_rtx);\n   \t  emit_move_insn (reg_rtx, tsize_rtx);\n-  \t  if (TARGET_LONG64)\n+  \t  if (Pmode == DImode)\n \t    emit_insn (gen_subdi3 (hard_frame_pointer_rtx,\n \t\t\t\t   hard_frame_pointer_rtx,\n \t\t\t\t   reg_rtx));\n@@ -6557,7 +6557,7 @@ mips_expand_prologue ()\n \t      if (current_function_outgoing_args_size != 0)\n \t\t{\n \t\t  rtx incr = GEN_INT (current_function_outgoing_args_size);\n-\t\t  if (TARGET_LONG64)\n+\t\t  if (Pmode == DImode)\n \t\t    insn = emit_insn (gen_adddi3 (hard_frame_pointer_rtx,\n                                                   hard_frame_pointer_rtx,\n                                                   incr));\n@@ -6570,7 +6570,7 @@ mips_expand_prologue ()\n \t  else if (TARGET_MIPS16 && current_function_outgoing_args_size != 0)\n \t    {\n \t      rtx incr = GEN_INT (current_function_outgoing_args_size);\n-\t      if (TARGET_LONG64)\n+\t      if (Pmode == DImode)\n \t\tinsn = emit_insn (gen_adddi3 (hard_frame_pointer_rtx,\n                                               stack_pointer_rtx,\n                                               incr));\n@@ -6579,7 +6579,7 @@ mips_expand_prologue ()\n                                               stack_pointer_rtx,\n                                               incr));\n \t    }\n-\t  else if (TARGET_LONG64)\n+\t  else if (Pmode == DImode)\n \t    insn = emit_insn (gen_movdi (hard_frame_pointer_rtx, stack_pointer_rtx));\n \t  else\n \t    insn = emit_insn (gen_movsi (hard_frame_pointer_rtx, stack_pointer_rtx));\n@@ -6749,7 +6749,7 @@ mips_expand_epilogue ()\n \t\t  rtx g6_rtx = gen_rtx (REG, Pmode, GP_REG_FIRST + 6);\n \n \t\t  emit_move_insn (g6_rtx, GEN_INT (tsize));\n-\t\t  if (TARGET_LONG64)\n+\t\t  if (Pmode == DImode)\n \t\t    emit_insn (gen_adddi3 (hard_frame_pointer_rtx,\n \t\t\t\t\t   hard_frame_pointer_rtx,\n \t\t\t\t\t   g6_rtx));\n@@ -6764,7 +6764,7 @@ mips_expand_epilogue ()\n \t\ttsize_rtx = GEN_INT (tsize);\n \t    }\n \n-\t  if (TARGET_LONG64)\n+\t  if (Pmode == DImode)\n \t    emit_insn (gen_movdi (stack_pointer_rtx, hard_frame_pointer_rtx));\n \t  else\n \t    emit_insn (gen_movsi (stack_pointer_rtx, hard_frame_pointer_rtx));\n@@ -6787,7 +6787,7 @@ mips_expand_epilogue ()\n \tabort ();\n \n       emit_insn (gen_blockage ());\n-      if (TARGET_LONG64 && tsize != 0)\n+      if (Pmode == DImode && tsize != 0)\n \temit_insn (gen_adddi3 (stack_pointer_rtx, stack_pointer_rtx,\n \t\t\t       tsize_rtx));\n       else if (tsize != 0)"}, {"sha": "8e535616097607cf3e505e1e1bdbfd46cd3228a2", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eeed24eb2000486a3abab4395c735c385925813/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eeed24eb2000486a3abab4395c735c385925813/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=1eeed24eb2000486a3abab4395c735c385925813", "patch": "@@ -1314,10 +1314,12 @@ do {\t\t\t\t\t\t\t\\\n \n /* Width in bits of a pointer.\n    See also the macro `Pmode' defined below.  */\n+#ifndef POINTER_SIZE\n #define POINTER_SIZE (TARGET_LONG64 ? 64 : 32)\n+#endif\n \n /* Allocation boundary (in *bits*) for storing pointers in memory.  */\n-#define POINTER_BOUNDARY (TARGET_LONG64 ? 64 : 32)\n+#define POINTER_BOUNDARY (Pmode == DImode ? 64 : 32)\n \n /* Allocation boundary (in *bits*) for storing arguments in argument list.  */\n #define PARM_BOUNDARY (TARGET_64BIT ? 64 : 32)\n@@ -2495,7 +2497,7 @@ typedef struct mips_args {\n \t   TARGET_64BIT ? \"dsubu\" : \"subu\",\t\t\t\t\\\n \t   reg_names[STACK_POINTER_REGNUM],\t\t\t\t\\\n \t   reg_names[STACK_POINTER_REGNUM],\t\t\t\t\\\n-\t   TARGET_LONG64 ? 16 : 8);\t\t\t\t\t\\\n+\t   Pmode == DImode ? 16 : 8);\t\t\t\t\t\\\n   fprintf (FILE, \"\\t.set\\treorder\\n\");\t\t\t\t\t\\\n   fprintf (FILE, \"\\t.set\\tat\\n\");\t\t\t\t\t\\\n }\n@@ -2524,7 +2526,7 @@ typedef struct mips_args {\n   fprintf (STREAM, \"\\t.word\\t0x03e00821\\t\\t# move   $1,$31\\n\");\t\t\\\n   fprintf (STREAM, \"\\t.word\\t0x04110001\\t\\t# bgezal $0,.+8\\n\");\t\t\\\n   fprintf (STREAM, \"\\t.word\\t0x00000000\\t\\t# nop\\n\");\t\t\t\\\n-  if (TARGET_LONG64)\t\t\t\t\t\t\t\\\n+  if (Pmode == DImode)\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       fprintf (STREAM, \"\\t.word\\t0xdfe30014\\t\\t# ld     $3,20($31)\\n\");\t\\\n       fprintf (STREAM, \"\\t.word\\t0xdfe2001c\\t\\t# ld     $2,28($31)\\n\");\t\\\n@@ -2537,7 +2539,7 @@ typedef struct mips_args {\n   fprintf (STREAM, \"\\t.word\\t0x0060c821\\t\\t# move   $25,$3 (abicalls)\\n\"); \\\n   fprintf (STREAM, \"\\t.word\\t0x00600008\\t\\t# jr     $3\\n\");\t\t\\\n   fprintf (STREAM, \"\\t.word\\t0x0020f821\\t\\t# move   $31,$1\\n\");\t\t\\\n-  if (TARGET_LONG64)\t\t\t\t\t\t\t\\\n+  if (Pmode == DImode)\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       fprintf (STREAM, \"\\t.dword\\t0x00000000\\t\\t# <function address>\\n\"); \\\n       fprintf (STREAM, \"\\t.dword\\t0x00000000\\t\\t# <static chain value>\\n\"); \\\n@@ -2552,11 +2554,11 @@ typedef struct mips_args {\n /* A C expression for the size in bytes of the trampoline, as an\n    integer.  */\n \n-#define TRAMPOLINE_SIZE (32 + (TARGET_LONG64 ? 16 : 8))\n+#define TRAMPOLINE_SIZE (32 + (Pmode == DImode ? 16 : 8))\n \n /* Alignment required for trampolines, in bits.  */\n \n-#define TRAMPOLINE_ALIGNMENT (TARGET_LONG64 ? 64 : 32)\n+#define TRAMPOLINE_ALIGNMENT (Pmode == DImode ? 64 : 32)\n \n /* INITIALIZE_TRAMPOLINE calls this library function to flush\n    program and data caches.  */\n@@ -2574,7 +2576,7 @@ typedef struct mips_args {\n #define INITIALIZE_TRAMPOLINE(ADDR, FUNC, CHAIN)\t\t\t    \\\n {\t\t\t\t\t\t\t\t\t    \\\n   rtx addr = ADDR;\t\t\t\t\t\t\t    \\\n-  if (TARGET_LONG64)\t\t\t\t\t\t\t    \\\n+  if (Pmode == DImode)\t\t\t\t\t\t\t    \\\n     {\t\t\t\t\t\t\t\t\t    \\\n       emit_move_insn (gen_rtx (MEM, DImode, plus_constant (addr, 32)), FUNC); \\\n       emit_move_insn (gen_rtx (MEM, DImode, plus_constant (addr, 40)), CHAIN);\\\n@@ -3075,7 +3077,7 @@ while (0)\n    overflow is no more likely than the overflow in a branch\n    instruction.  Large functions can currently break in both ways.  */\n #define CASE_VECTOR_MODE \\\n-  (TARGET_MIPS16 ? HImode : TARGET_LONG64 ? DImode : SImode)\n+  (TARGET_MIPS16 ? HImode : Pmode == DImode ? DImode : SImode)\n \n /* Define as C expression which evaluates to nonzero if the tablejump\n    instruction expects the table to contain offsets from the address of the\n@@ -3136,13 +3138,15 @@ while (0)\n    After generation of rtl, the compiler makes no further distinction\n    between pointers and any other objects of this machine mode.  */\n \n+#ifndef Pmode\n #define Pmode (TARGET_LONG64 ? DImode : SImode)\n+#endif\n \n /* A function address in a call instruction\n    is a word address (for indexing purposes)\n    so give the MEM rtx a words's mode.  */\n \n-#define FUNCTION_MODE (TARGET_LONG64 ? DImode : SImode)\n+#define FUNCTION_MODE (Pmode == DImode ? DImode : SImode)\n \n /* Define TARGET_MEM_FUNCTIONS if we want to use calls to memcpy and\n    memset, instead of the BSD functions bcopy and bzero.  */\n@@ -4147,7 +4151,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #define ASM_OUTPUT_ADDR_VEC_ELT(STREAM, VALUE)\t\t\t\t\\\n   fprintf (STREAM, \"\\t%s\\t%sL%d\\n\",\t\t\t\t\t\\\n-\t   TARGET_LONG64 ? \".dword\" : \".word\",\t\t\t\t\\\n+\t   Pmode == DImode ? \".dword\" : \".word\",\t\t\t\\\n \t   LOCAL_LABEL_PREFIX,\t\t\t\t\t\t\\\n \t   VALUE)\n \n@@ -4162,15 +4166,15 @@ do {\t\t\t\t\t\t\t\t\t\\\n \t     LOCAL_LABEL_PREFIX, VALUE, LOCAL_LABEL_PREFIX, REL);\t\\\n   else if (TARGET_EMBEDDED_PIC)\t\t\t\t\t\t\\\n     fprintf (STREAM, \"\\t%s\\t%sL%d-%sLS%d\\n\",\t\t\t\t\\\n-\t     TARGET_LONG64 ? \".dword\" : \".word\",\t\t\t\\\n+\t     Pmode == DImode ? \".dword\" : \".word\",\t\t\t\\\n \t     LOCAL_LABEL_PREFIX, VALUE, LOCAL_LABEL_PREFIX, REL);\t\\\n   else if (mips_abi == ABI_32)\t\t\t\t\t\t\\\n     fprintf (STREAM, \"\\t%s\\t%sL%d\\n\",\t\t\t\t\t\\\n-\t     TARGET_LONG64 ? \".gpdword\" : \".gpword\",\t\t\t\\\n+\t     Pmode == DImode ? \".gpdword\" : \".gpword\",\t\t\t\\\n \t     LOCAL_LABEL_PREFIX, VALUE);\t\t\t\t\\\n   else\t\t\t\t\t\t\t\t\t\\\n     fprintf (STREAM, \"\\t%s\\t%sL%d\\n\",\t\t\t\t\t\\\n-\t     TARGET_LONG64 ? \".dword\" : \".word\",\t\t\t\\\n+\t     Pmode == DImode ? \".dword\" : \".word\",\t\t\t\\\n \t     LOCAL_LABEL_PREFIX, VALUE);\t\t\t\t\\\n } while (0)\n \n@@ -4410,12 +4414,12 @@ while (0)\n \n #ifndef SIZE_TYPE\n #define NO_BUILTIN_SIZE_TYPE\n-#define SIZE_TYPE (TARGET_LONG64 ? \"long unsigned int\" : \"unsigned int\")\n+#define SIZE_TYPE (Pmode == DImode ? \"long unsigned int\" : \"unsigned int\")\n #endif\n \n #ifndef PTRDIFF_TYPE\n #define NO_BUILTIN_PTRDIFF_TYPE\n-#define PTRDIFF_TYPE (TARGET_LONG64 ? \"long int\" : \"int\")\n+#define PTRDIFF_TYPE (Pmode == DImode ? \"long int\" : \"int\")\n #endif\n \n /* See mips_expand_prologue's use of loadgp for when this should be"}, {"sha": "37b0519c30599d63f1926a3a4b1bbe5010df434a", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eeed24eb2000486a3abab4395c735c385925813/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eeed24eb2000486a3abab4395c735c385925813/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=1eeed24eb2000486a3abab4395c735c385925813", "patch": "@@ -8598,7 +8598,7 @@ move\\\\t%0,%z4\\\\n\\\\\n       if (GET_CODE (dest) != REG || GET_MODE (dest) != Pmode)\n \toperands[0] = copy_to_mode_reg (Pmode, dest);\n \n-      if (!TARGET_LONG64)\n+      if (!(Pmode == DImode))\n \temit_jump_insn (gen_indirect_jump_internal1 (operands[0]));\n       else\n \temit_jump_insn (gen_indirect_jump_internal2 (operands[0]));\n@@ -8609,15 +8609,15 @@ move\\\\t%0,%z4\\\\n\\\\\n \n (define_insn \"indirect_jump_internal1\"\n   [(set (pc) (match_operand:SI 0 \"register_operand\" \"d\"))]\n-  \"!TARGET_LONG64\"\n+  \"!(Pmode == DImode)\"\n   \"%*j\\\\t%0\"\n   [(set_attr \"type\"\t\"jump\")\n    (set_attr \"mode\"\t\"none\")\n    (set_attr \"length\"\t\"1\")])\n \n (define_insn \"indirect_jump_internal2\"\n   [(set (pc) (match_operand:DI 0 \"se_register_operand\" \"d\"))]\n-  \"TARGET_LONG64\"\n+  \"Pmode == DImode\"\n   \"%*j\\\\t%0\"\n   [(set_attr \"type\"\t\"jump\")\n    (set_attr \"mode\"\t\"none\")\n@@ -8638,7 +8638,7 @@ move\\\\t%0,%z4\\\\n\\\\\n \t{\n \t  if (GET_MODE (operands[0]) != HImode)\n \t    abort ();\n-\t  if (!TARGET_LONG64)\n+\t  if (!(Pmode == DImode))\n \t    emit_jump_insn (gen_tablejump_mips161 (operands[0], operands[1]));\n \t  else\n \t    emit_jump_insn (gen_tablejump_mips162 (operands[0], operands[1]));\n@@ -8650,14 +8650,14 @@ move\\\\t%0,%z4\\\\n\\\\\n \n       if (! flag_pic)\n \t{\n-\t  if (!TARGET_LONG64)\n+\t  if (!(Pmode == DImode))\n \t    emit_jump_insn (gen_tablejump_internal1 (operands[0], operands[1]));\n \t  else\n \t    emit_jump_insn (gen_tablejump_internal2 (operands[0], operands[1]));\n \t}\n       else\n \t{\n-\t  if (!TARGET_LONG64)\n+\t  if (!(Pmode == DImode))\n \t    emit_jump_insn (gen_tablejump_internal3 (operands[0], operands[1]));\n \t  else\n \t    emit_jump_insn (gen_tablejump_internal4 (operands[0], operands[1]));\n@@ -8671,7 +8671,7 @@ move\\\\t%0,%z4\\\\n\\\\\n   [(set (pc)\n \t(match_operand:SI 0 \"register_operand\" \"d\"))\n    (use (label_ref (match_operand 1 \"\" \"\")))]\n-  \"!TARGET_LONG64\"\n+  \"!(Pmode == DImode)\"\n   \"%*j\\\\t%0\"\n   [(set_attr \"type\"\t\"jump\")\n    (set_attr \"mode\"\t\"none\")\n@@ -8681,7 +8681,7 @@ move\\\\t%0,%z4\\\\n\\\\\n   [(set (pc)\n \t(match_operand:DI 0 \"se_register_operand\" \"d\"))\n    (use (label_ref (match_operand 1 \"\" \"\")))]\n-  \"TARGET_LONG64\"\n+  \"Pmode == DImode\"\n   \"%*j\\\\t%0\"\n   [(set_attr \"type\"\t\"jump\")\n    (set_attr \"mode\"\t\"none\")\n@@ -8698,7 +8698,7 @@ move\\\\t%0,%z4\\\\n\\\\\n   [(set (pc) (plus:SI (sign_extend:SI\n \t\t       (match_operand:HI 0 \"register_operand\" \"d\"))\n \t\t      (label_ref:SI (match_operand:SI 1 \"\" \"\"))))]\n-  \"TARGET_MIPS16 && !TARGET_LONG64\"\n+  \"TARGET_MIPS16 && !(Pmode == DImode)\"\n   \"\n {\n   if (operands[0])\t/* eliminate unused code warnings.  */\n@@ -8720,7 +8720,7 @@ move\\\\t%0,%z4\\\\n\\\\\n   [(set (pc) (plus:DI (sign_extend:DI\n \t\t       (match_operand:HI 0 \"register_operand\" \"d\"))\n \t\t      (label_ref:DI (match_operand:SI 1 \"\" \"\"))))]\n-  \"TARGET_MIPS16 && TARGET_LONG64\"\n+  \"TARGET_MIPS16 && Pmode == DImode\"\n   \"\n {\n   if (operands[0])\t/* eliminate unused code warnings.  */\n@@ -8748,7 +8748,7 @@ move\\\\t%0,%z4\\\\n\\\\\n   [(set (pc)\n \t(plus:SI (match_operand:SI 0 \"register_operand\" \"d\")\n \t\t (label_ref:SI (match_operand:SI 1 \"\" \"\"))))]\n-  \"!TARGET_LONG64 && next_active_insn (insn) != 0\n+  \"!(Pmode == DImode) && next_active_insn (insn) != 0\n    && GET_CODE (PATTERN (next_active_insn (insn))) == ADDR_DIFF_VEC\n    && PREV_INSN (next_active_insn (insn)) == operands[1]\"\n   \"*\n@@ -8776,7 +8776,7 @@ move\\\\t%0,%z4\\\\n\\\\\n   [(set (pc)\n \t(plus:DI (match_operand:DI 0 \"se_register_operand\" \"d\")\n \t\t (label_ref:DI (match_operand:SI 1 \"\" \"\"))))]\n-  \"TARGET_LONG64 && next_active_insn (insn) != 0\n+  \"Pmode == DImode && next_active_insn (insn) != 0\n    && GET_CODE (PATTERN (next_active_insn (insn))) == ADDR_DIFF_VEC\n    && PREV_INSN (next_active_insn (insn)) == operands[1]\"\n   \"%*j\\\\t%0\"\n@@ -8810,7 +8810,7 @@ move\\\\t%0,%z4\\\\n\\\\\n   \"\n {\n   /* We need slightly different code for eight byte table entries.  */\n-  if (TARGET_LONG64)\n+  if (Pmode == DImode)\n     abort ();\n \n   if (operands[0])\n@@ -8871,7 +8871,7 @@ move\\\\t%0,%z4\\\\n\\\\\n   \"TARGET_ABICALLS\"\n   \"\n {\n-  if (TARGET_LONG64)\n+  if (Pmode == DImode)\n     emit_insn (gen_builtin_setjmp_setup_64 (operands[0]));\n   else\n     emit_insn (gen_builtin_setjmp_setup_32 (operands[0]));\n@@ -8882,14 +8882,14 @@ move\\\\t%0,%z4\\\\n\\\\\n   [(set (mem:SI (plus:SI (match_operand:SI 0 \"register_operand\" \"r\")\n \t\t   (const_int 12)))\n       (reg:SI 28))]\n-  \"TARGET_ABICALLS && ! TARGET_LONG64\"\n+  \"TARGET_ABICALLS && ! (Pmode == DImode)\"\n   \"\")\n \n (define_expand \"builtin_setjmp_setup_64\"\n   [(set (mem:DI (plus:DI (match_operand:DI 0 \"register_operand\" \"r\")\n \t\t   (const_int 24)))\n       (reg:DI 28))]\n-  \"TARGET_ABICALLS && TARGET_LONG64\"\n+  \"TARGET_ABICALLS && Pmode == DImode\"\n   \"\")\n \n ;; For o32/n32/n64, we need to arrange for longjmp to put the \n@@ -8901,7 +8901,7 @@ move\\\\t%0,%z4\\\\n\\\\\n   \"\n {\n   /* The elements of the buffer are, in order:  */\n-  int W = (TARGET_LONG64 ? 8 : 4);\n+  int W = (Pmode == DImode ? 8 : 4);\n   rtx fp = gen_rtx_MEM (Pmode, operands[0]);\n   rtx lab = gen_rtx_MEM (Pmode, plus_constant (operands[0], 1*W));\n   rtx stack = gen_rtx_MEM (Pmode, plus_constant (operands[0], 2*W));\n@@ -9138,7 +9138,7 @@ move\\\\t%0,%z4\\\\n\\\\\n   [(call (mem:SI (match_operand:SI 0 \"register_operand\" \"r\"))\n \t (match_operand 1 \"\" \"i\"))\n    (clobber (match_operand:SI 2 \"register_operand\" \"=d\"))]\n-  \"!TARGET_LONG64 && !TARGET_ABICALLS && TARGET_LONG_CALLS\"\n+  \"!(Pmode == DImode) && !TARGET_ABICALLS && TARGET_LONG_CALLS\"\n   \"%*jal\\\\t%2,%0\"\n   [(set_attr \"type\"\t\"call\")\n    (set_attr \"mode\"\t\"none\")\n@@ -9148,7 +9148,7 @@ move\\\\t%0,%z4\\\\n\\\\\n   [(call (mem:DI (match_operand:DI 0 \"se_register_operand\" \"r\"))\n \t (match_operand 1 \"\" \"i\"))\n    (clobber (match_operand:SI 2 \"register_operand\" \"=d\"))]\n-  \"TARGET_LONG64 && !TARGET_ABICALLS && TARGET_LONG_CALLS\"\n+  \"Pmode == DImode && !TARGET_ABICALLS && TARGET_LONG_CALLS\"\n   \"%*jal\\\\t%2,%0\"\n   [(set_attr \"type\"\t\"call\")\n    (set_attr \"mode\"\t\"none\")\n@@ -9158,7 +9158,7 @@ move\\\\t%0,%z4\\\\n\\\\\n   [(call (mem:SI (match_operand:SI 0 \"register_operand\" \"r\"))\n \t (match_operand 1 \"\" \"i\"))\n    (clobber (match_operand:SI 2 \"register_operand\" \"=d\"))]\n-  \"!TARGET_LONG64 && TARGET_ABICALLS && TARGET_LONG_CALLS\"\n+  \"!(Pmode == DImode) && TARGET_ABICALLS && TARGET_LONG_CALLS\"\n   \"*\n {\n   if (REGNO (operands[0]) != PIC_FUNCTION_ADDR_REGNUM)\n@@ -9174,7 +9174,7 @@ move\\\\t%0,%z4\\\\n\\\\\n   [(call (mem:DI (match_operand:DI 0 \"se_register_operand\" \"r\"))\n \t (match_operand 1 \"\" \"i\"))\n    (clobber (match_operand:SI 2 \"register_operand\" \"=d\"))]\n-  \"TARGET_LONG64 && TARGET_ABICALLS && TARGET_LONG_CALLS\"\n+  \"Pmode == DImode && TARGET_ABICALLS && TARGET_LONG_CALLS\"\n   \"*\n {\n   if (REGNO (operands[0]) != PIC_FUNCTION_ADDR_REGNUM)\n@@ -9336,7 +9336,7 @@ move\\\\t%0,%z4\\\\n\\\\\n         (call (mem:SI (match_operand:SI 1 \"register_operand\" \"r\"))\n \t      (match_operand 2 \"\" \"i\")))\n    (clobber (match_operand:SI 3 \"register_operand\" \"=d\"))]\n-  \"!TARGET_LONG64 && !TARGET_ABICALLS && TARGET_LONG_CALLS\"\n+  \"!(Pmode == DImode) && !TARGET_ABICALLS && TARGET_LONG_CALLS\"\n   \"%*jal\\\\t%3,%1\"\n   [(set_attr \"type\"\t\"call\")\n    (set_attr \"mode\"\t\"none\")\n@@ -9347,7 +9347,7 @@ move\\\\t%0,%z4\\\\n\\\\\n         (call (mem:DI (match_operand:DI 1 \"se_register_operand\" \"r\"))\n \t      (match_operand 2 \"\" \"i\")))\n    (clobber (match_operand:SI 3 \"register_operand\" \"=d\"))]\n-  \"TARGET_LONG64 && !TARGET_ABICALLS && TARGET_LONG_CALLS\"\n+  \"Pmode == DImode && !TARGET_ABICALLS && TARGET_LONG_CALLS\"\n   \"%*jal\\\\t%3,%1\"\n   [(set_attr \"type\"\t\"call\")\n    (set_attr \"mode\"\t\"none\")\n@@ -9358,7 +9358,7 @@ move\\\\t%0,%z4\\\\n\\\\\n         (call (mem:SI (match_operand:SI 1 \"register_operand\" \"r\"))\n \t      (match_operand 2 \"\" \"i\")))\n    (clobber (match_operand:SI 3 \"register_operand\" \"=d\"))]\n-  \"!TARGET_LONG64 && TARGET_ABICALLS && TARGET_LONG_CALLS\"\n+  \"!(Pmode == DImode) && TARGET_ABICALLS && TARGET_LONG_CALLS\"\n   \"*\n {\n   if (REGNO (operands[1]) != PIC_FUNCTION_ADDR_REGNUM)\n@@ -9375,7 +9375,7 @@ move\\\\t%0,%z4\\\\n\\\\\n         (call (mem:DI (match_operand:DI 1 \"se_register_operand\" \"r\"))\n \t      (match_operand 2 \"\" \"i\")))\n    (clobber (match_operand:SI 3 \"register_operand\" \"=d\"))]\n-  \"TARGET_LONG64 && TARGET_ABICALLS && TARGET_LONG_CALLS\"\n+  \"Pmode == DImode && TARGET_ABICALLS && TARGET_LONG_CALLS\"\n   \"*\n {\n   if (REGNO (operands[1]) != PIC_FUNCTION_ADDR_REGNUM)"}]}