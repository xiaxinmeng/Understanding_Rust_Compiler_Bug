{"sha": "8f0c9d53ef3a9b8ba2579b53596cc2b7f5d8bf69", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGYwYzlkNTNlZjNhOWI4YmEyNTc5YjUzNTk2Y2MyYjdmNWQ4YmY2OQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-03-18T08:57:01Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-03-18T09:56:47Z"}, "message": "aarch64: Improve generic SVE tuning defaults\n\nThis patch adds the recently-added tweak to split some SVE VL-based scalar\noperations [1] to the generic tuning used for SVE, as enabled by adding +sve\nto the -march flag, for example -march=armv8.2-a+sve.\n\nThe recommendation for best performance on a particular CPU remains unchanged:\nuse the -mcpu option for that CPU, where possible. -mcpu=native makes this\nstraightforward for native compilation.\n\nThe tweak to split out SVE VL-based scalar operations is a consistent win for\nthe Neoverse V1 CPU and should be neutral for the Fujitsu A64FX. A run of\nSPEC2017 on A64FX with this tweak on didn't show any non-noise differences.\nIt is also expected to be neutral on SVE2 implementations.\n\nTherefore, the patch enables the tweak for generic +sve tuning e.g.\n-march=armv8.2-a+sve. No SVE2 CPUs are expected to benefit from it,\ntherefore the tweak is disabled for generic tuning when +sve2 is in\n-march e.g. -march=armv8.2-a+sve2.\n\nThe implementation of this approach requires a bit of custom logic in\naarch64_override_options_internal to handle these kinds of\narchitecture-dependent decisions, but we do believe the user-facing principle\nhere is important to implement.\n\nIn general, for the generic target we're using a decision framework that looks\nlike:\n\n* If all cores that are known to benefit from an optimization\nare of architecture X, and all other cores that implement X or above\nare not impacted, or have a very slight impact, we will consider it for\ngeneric tuning for architecture X.\n* We will not enable that optimisation for generic tuning for architecture X+1\nif no known cores of architecture X+1 or above will benefit.\n\nThis framework allows us to improve generic tuning for CPUs of generation X\nwhile avoiding accumulating tweaks for future CPUs of generation X+1, X+2...\nthat do not need them, and thus avoid even the slight negative effects of\nthese optimisations if the user is willing to tell us the desired architecture\naccurately.\n\nX above can mean either annual architecture updates (Armv8.2-a, Armv8.3-a etc)\nor optional architecture extensions (like SVE, SVE2).\n\n[1] http://gcc.gnu.org/g:a65b9ad863c5fc0aea12db58557f4d286a1974d7\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64.c (aarch64_adjust_generic_arch_tuning): Define.\n\t(aarch64_override_options_internal): Use it.\n\t(generic_tunings): Add AARCH64_EXTRA_TUNE_CSE_SVE_VL_CONSTANTS to\n\ttune_flags.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.target/aarch64/sve/aarch64-sve.exp: Add -moverride=tune=none to\n\tsve_flags.\n\t* g++.target/aarch64/sve/acle/aarch64-sve-acle-asm.exp: Likewise.\n\t* g++.target/aarch64/sve/acle/aarch64-sve-acle.exp: Likewise.\n\t* gcc.target/aarch64/sve/aarch64-sve.exp: Likewise.\n\t* gcc.target/aarch64/sve/acle/aarch64-sve-acle-asm.exp: Likewise.\n\t* gcc.target/aarch64/sve/acle/aarch64-sve-acle.exp: Likewise.", "tree": {"sha": "03b01018553f987a82275f275aaadf6cb2f01792", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03b01018553f987a82275f275aaadf6cb2f01792"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f0c9d53ef3a9b8ba2579b53596cc2b7f5d8bf69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f0c9d53ef3a9b8ba2579b53596cc2b7f5d8bf69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f0c9d53ef3a9b8ba2579b53596cc2b7f5d8bf69", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f0c9d53ef3a9b8ba2579b53596cc2b7f5d8bf69/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bcf19215d88e6ec33d283352c52005f02dbc784", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bcf19215d88e6ec33d283352c52005f02dbc784", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bcf19215d88e6ec33d283352c52005f02dbc784"}], "stats": {"total": 44, "additions": 43, "deletions": 1}, "files": [{"sha": "db69e6983d0b4f6505e84c43090193cb70674881", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f0c9d53ef3a9b8ba2579b53596cc2b7f5d8bf69/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f0c9d53ef3a9b8ba2579b53596cc2b7f5d8bf69/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=8f0c9d53ef3a9b8ba2579b53596cc2b7f5d8bf69", "patch": "@@ -1035,7 +1035,10 @@ static const struct tune_params generic_tunings =\n   2,\t/* min_div_recip_mul_df.  */\n   0,\t/* max_case_values.  */\n   tune_params::AUTOPREFETCHER_WEAK,\t/* autoprefetcher_model.  */\n-  (AARCH64_EXTRA_TUNE_NONE),\t/* tune_flags.  */\n+  /* Enabling AARCH64_EXTRA_TUNE_CSE_SVE_VL_CONSTANTS significantly benefits\n+     Neoverse V1.  It does not have a noticeable effect on A64FX and should\n+     have at most a very minor effect on SVE2 cores.  */\n+  (AARCH64_EXTRA_TUNE_CSE_SVE_VL_CONSTANTS),\t/* tune_flags.  */\n   &generic_prefetch_tune\n };\n \n@@ -14485,6 +14488,19 @@ aarch64_parse_override_string (const char* input_string,\n   free (string_root);\n }\n \n+/* Adjust CURRENT_TUNE (a generic tuning struct) with settings that\n+   are best for a generic target with the currently-enabled architecture\n+   extensions.  */\n+static void\n+aarch64_adjust_generic_arch_tuning (struct tune_params &current_tune)\n+{\n+  /* Neoverse V1 is the only core that is known to benefit from\n+     AARCH64_EXTRA_TUNE_CSE_SVE_VL_CONSTANTS.  There is therefore no\n+     point enabling it for SVE2 and above.  */\n+  if (TARGET_SVE2)\n+    current_tune.extra_tuning_flags\n+      &= ~AARCH64_EXTRA_TUNE_CSE_SVE_VL_CONSTANTS;\n+}\n \n static void\n aarch64_override_options_after_change_1 (struct gcc_options *opts)\n@@ -14555,6 +14571,8 @@ aarch64_override_options_internal (struct gcc_options *opts)\n      we may later overwrite.  */\n   aarch64_tune_params = *(selected_tune->tune);\n   aarch64_architecture_version = selected_arch->architecture_version;\n+  if (selected_tune->tune == &generic_tunings)\n+    aarch64_adjust_generic_arch_tuning (aarch64_tune_params);\n \n   if (opts->x_aarch64_override_tune_string)\n     aarch64_parse_override_string (opts->x_aarch64_override_tune_string,"}, {"sha": "d4761f2d8075eaab056c2c22d2c429a82bf6452c", "filename": "gcc/testsuite/g++.target/aarch64/sve/aarch64-sve.exp", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f0c9d53ef3a9b8ba2579b53596cc2b7f5d8bf69/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Faarch64-sve.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f0c9d53ef3a9b8ba2579b53596cc2b7f5d8bf69/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Faarch64-sve.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Faarch64-sve.exp?ref=8f0c9d53ef3a9b8ba2579b53596cc2b7f5d8bf69", "patch": "@@ -38,6 +38,10 @@ if { [check_effective_target_aarch64_sve] } {\n     set sve_flags \"-march=armv8.2-a+sve\"\n }\n \n+# Turn off any codegen tweaks by default that may affect expected assembly.\n+# Tests relying on those should turn them on explicitly.\n+set sve_flags \"$sve_flags -moverride=tune=none\"\n+\n # Main loop.\n dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.C]] $sve_flags \"\"\n "}, {"sha": "84ae95e2ccc51c6affa259dae712100cd10966ac", "filename": "gcc/testsuite/g++.target/aarch64/sve/acle/aarch64-sve-acle-asm.exp", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f0c9d53ef3a9b8ba2579b53596cc2b7f5d8bf69/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Facle%2Faarch64-sve-acle-asm.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f0c9d53ef3a9b8ba2579b53596cc2b7f5d8bf69/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Facle%2Faarch64-sve-acle-asm.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Facle%2Faarch64-sve-acle-asm.exp?ref=8f0c9d53ef3a9b8ba2579b53596cc2b7f5d8bf69", "patch": "@@ -37,6 +37,10 @@ if { [check_effective_target_aarch64_sve] } {\n     set sve_flags \"-march=armv8.2-a+sve\"\n }\n \n+# Turn off any codegen tweaks by default that may affect expected assembly.\n+# Tests relying on those should turn them on explicitly.\n+set sve_flags \"$sve_flags -moverride=tune=none\"\n+\n global gcc_runtest_parallelize_limit_minor\n if { [info exists gcc_runtest_parallelize_limit_minor] } {\n     set old_limit_minor $gcc_runtest_parallelize_limit_minor"}, {"sha": "8d3d8b4a8b32d98202587264d8a2e8a890c38846", "filename": "gcc/testsuite/g++.target/aarch64/sve/acle/aarch64-sve-acle.exp", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f0c9d53ef3a9b8ba2579b53596cc2b7f5d8bf69/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Facle%2Faarch64-sve-acle.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f0c9d53ef3a9b8ba2579b53596cc2b7f5d8bf69/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Facle%2Faarch64-sve-acle.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Facle%2Faarch64-sve-acle.exp?ref=8f0c9d53ef3a9b8ba2579b53596cc2b7f5d8bf69", "patch": "@@ -44,6 +44,10 @@ if { [check_effective_target_aarch64_sve] } {\n     set sve_flags \"-march=armv8.2-a+sve\"\n }\n \n+# Turn off any codegen tweaks by default that may affect expected assembly.\n+# Tests relying on those should turn them on explicitly.\n+set sve_flags \"$sve_flags -moverride=tune=none\"\n+\n # Main loop.\n set gcc_subdir [string replace $subdir 0 2 gcc]\n set files [glob -nocomplain \\"}, {"sha": "1d3f56690e61bfd2102228f6a172e327b59c98d7", "filename": "gcc/testsuite/gcc.target/aarch64/sve/aarch64-sve.exp", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f0c9d53ef3a9b8ba2579b53596cc2b7f5d8bf69/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Faarch64-sve.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f0c9d53ef3a9b8ba2579b53596cc2b7f5d8bf69/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Faarch64-sve.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Faarch64-sve.exp?ref=8f0c9d53ef3a9b8ba2579b53596cc2b7f5d8bf69", "patch": "@@ -44,6 +44,10 @@ if { [check_effective_target_aarch64_sve] } {\n     set sve_flags \"-march=armv8.2-a+sve\"\n }\n \n+# Turn off any codegen tweaks by default that may affect expected assembly.\n+# Tests relying on those should turn them on explicitly.\n+set sve_flags \"$sve_flags -moverride=tune=none\"\n+\n # Most of the code-quality tests are written for LP64.  Just do the\n # correctness tests for ILP32.\n if { [check_effective_target_ilp32] } {"}, {"sha": "fcd07aaa04093214e5c7a64b20597017225e695b", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/aarch64-sve-acle-asm.exp", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f0c9d53ef3a9b8ba2579b53596cc2b7f5d8bf69/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Faarch64-sve-acle-asm.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f0c9d53ef3a9b8ba2579b53596cc2b7f5d8bf69/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Faarch64-sve-acle-asm.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Faarch64-sve-acle-asm.exp?ref=8f0c9d53ef3a9b8ba2579b53596cc2b7f5d8bf69", "patch": "@@ -37,6 +37,10 @@ if { [check_effective_target_aarch64_sve] } {\n     set sve_flags \"-march=armv8.2-a+sve\"\n }\n \n+# Turn off any codegen tweaks by default that may affect expected assembly.\n+# Tests relying on those should turn them on explicitly.\n+set sve_flags \"$sve_flags -moverride=tune=none\"\n+\n global gcc_runtest_parallelize_limit_minor\n if { [info exists gcc_runtest_parallelize_limit_minor] } {\n     set old_limit_minor $gcc_runtest_parallelize_limit_minor"}, {"sha": "2f36f1c57d1de28b575a71d05885bf82f6f3bdc1", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/aarch64-sve-acle.exp", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f0c9d53ef3a9b8ba2579b53596cc2b7f5d8bf69/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Faarch64-sve-acle.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f0c9d53ef3a9b8ba2579b53596cc2b7f5d8bf69/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Faarch64-sve-acle.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Faarch64-sve-acle.exp?ref=8f0c9d53ef3a9b8ba2579b53596cc2b7f5d8bf69", "patch": "@@ -44,6 +44,10 @@ if { [check_effective_target_aarch64_sve] } {\n     set sve_flags \"-march=armv8.2-a+sve\"\n }\n \n+# Turn off any codegen tweaks by default that may affect expected assembly.\n+# Tests relying on those should turn them on explicitly.\n+set sve_flags \"$sve_flags -moverride=tune=none\"\n+\n # Main loop.\n set files [glob -nocomplain \\\n \t       \"$srcdir/$subdir/general/*.c\" \\"}]}