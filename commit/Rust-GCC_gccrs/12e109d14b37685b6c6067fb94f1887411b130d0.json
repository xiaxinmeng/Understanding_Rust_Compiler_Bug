{"sha": "12e109d14b37685b6c6067fb94f1887411b130d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTJlMTA5ZDE0YjM3Njg1YjZjNjA2N2ZiOTRmMTg4NzQxMWIxMzBkMA==", "commit": {"author": {"name": "Trevor Saunders", "email": "tbsaunde+gcc@tbsaunde.org", "date": "2016-04-24T07:47:38Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2016-04-24T07:47:38Z"}, "message": "add some utility methods to vec\n\ngcc/ChangeLog:\n\n2016-04-24  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n\n\t* vec.h (vec_safe_contains): New function.\n\t(vec::contains): Likewise.\n\t(vec::begin): Likewise.\n\t(vec::end): Likewise.\n\nFrom-SVN: r235392", "tree": {"sha": "1cfbaa2b59b71276c788c8b4785403ead0f33d6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1cfbaa2b59b71276c788c8b4785403ead0f33d6f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12e109d14b37685b6c6067fb94f1887411b130d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12e109d14b37685b6c6067fb94f1887411b130d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12e109d14b37685b6c6067fb94f1887411b130d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12e109d14b37685b6c6067fb94f1887411b130d0/comments", "author": null, "committer": null, "parents": [{"sha": "dc3d45f24de8e8a2c03ea8e628939f17d729ac8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc3d45f24de8e8a2c03ea8e628939f17d729ac8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc3d45f24de8e8a2c03ea8e628939f17d729ac8c"}], "stats": {"total": 51, "additions": 50, "deletions": 1}, "files": [{"sha": "a820a0f9f7bd85f05a5395fa8bbde98ae45f68b2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12e109d14b37685b6c6067fb94f1887411b130d0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12e109d14b37685b6c6067fb94f1887411b130d0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=12e109d14b37685b6c6067fb94f1887411b130d0", "patch": "@@ -1,3 +1,10 @@\n+2016-04-24  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n+\n+\t* vec.h (vec_safe_contains): New function.\n+\t(vec::contains): Likewise.\n+\t(vec::begin): Likewise.\n+\t(vec::end): Likewise.\n+\n 2016-04-23  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR sanitizer/70712"}, {"sha": "eb8c27024f4e6c983ea33b59d003ab7f661ba5d5", "filename": "gcc/vec.h", "status": "modified", "additions": 43, "deletions": 1, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12e109d14b37685b6c6067fb94f1887411b130d0/gcc%2Fvec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12e109d14b37685b6c6067fb94f1887411b130d0/gcc%2Fvec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvec.h?ref=12e109d14b37685b6c6067fb94f1887411b130d0", "patch": "@@ -454,6 +454,10 @@ struct GTY((user)) vec<T, A, vl_embed>\n   bool is_empty (void) const { return m_vecpfx.m_num == 0; }\n   T *address (void) { return m_vecdata; }\n   const T *address (void) const { return m_vecdata; }\n+  T *begin () { return address (); }\n+  const T *begin () const { return address (); }\n+  T *end () { return address () + length (); }\n+  const T *end () const { return address () + length (); }\n   const T &operator[] (unsigned) const;\n   T &operator[] (unsigned);\n   T &last (void);\n@@ -473,6 +477,7 @@ struct GTY((user)) vec<T, A, vl_embed>\n   void qsort (int (*) (const void *, const void *));\n   T *bsearch (const void *key, int (*compar)(const void *, const void *));\n   unsigned lower_bound (T, bool (*)(const T &, const T &)) const;\n+  bool contains (const T &search) const;\n   static size_t embedded_size (unsigned);\n   void embedded_init (unsigned, unsigned = 0, unsigned = 0);\n   void quick_grow (unsigned len);\n@@ -542,7 +547,6 @@ vec_safe_is_empty (vec<T, A, vl_embed> *v)\n   return v ? v->is_empty () : true;\n }\n \n-\n /* If V does not have space for NELEMS elements, call\n    V->reserve(NELEMS, EXACT).  */\n template<typename T, typename A>\n@@ -695,6 +699,15 @@ vec_safe_splice (vec<T, A, vl_embed> *&dst, const vec<T, A, vl_embed> *src\n     }\n }\n \n+/* Return true if SEARCH is an element of V.  Note that this is O(N) in the\n+   size of the vector and so should be used with care.  */\n+\n+template<typename T, typename A>\n+inline bool\n+vec_safe_contains (vec<T, A, vl_embed> *v, const T &search)\n+{\n+  return v ? v->contains (search) : false;\n+}\n \n /* Index into vector.  Return the IX'th element.  IX must be in the\n    domain of the vector.  */\n@@ -973,6 +986,20 @@ vec<T, A, vl_embed>::bsearch (const void *key,\n   return NULL;\n }\n \n+/* Return true if SEARCH is an element of V.  Note that this is O(N) in the\n+   size of the vector and so should be used with care.  */\n+\n+template<typename T, typename A>\n+inline bool\n+vec<T, A, vl_embed>::contains (const T &search) const\n+{\n+  unsigned int len = length ();\n+  for (unsigned int i = 0; i < len; i++)\n+    if ((*this)[i] == search)\n+      return true;\n+\n+  return false;\n+}\n \n /* Find and return the first position in which OBJ could be inserted\n    without changing the ordering of this vector.  LESSTHAN is a\n@@ -1167,6 +1194,10 @@ struct vec<T, va_heap, vl_ptr>\n   const T *address (void) const\n   { return m_vec ? m_vec->m_vecdata : NULL; }\n \n+  T *begin () { return address (); }\n+  const T *begin () const { return address (); }\n+  T *end () { return begin () + length (); }\n+  const T *end () const { return begin () + length (); }\n   const T &operator[] (unsigned ix) const\n   { return (*m_vec)[ix]; }\n \n@@ -1208,6 +1239,7 @@ struct vec<T, va_heap, vl_ptr>\n   void qsort (int (*) (const void *, const void *));\n   T *bsearch (const void *key, int (*compar)(const void *, const void *));\n   unsigned lower_bound (T, bool (*)(const T &, const T &)) const;\n+  bool contains (const T &search) const;\n \n   bool using_auto_storage () const;\n \n@@ -1695,6 +1727,16 @@ vec<T, va_heap, vl_ptr>::lower_bound (T obj,\n   return m_vec ? m_vec->lower_bound (obj, lessthan) : 0;\n }\n \n+/* Return true if SEARCH is an element of V.  Note that this is O(N) in the\n+   size of the vector and so should be used with care.  */\n+\n+template<typename T>\n+inline bool\n+vec<T, va_heap, vl_ptr>::contains (const T &search) const\n+{\n+  return m_vec ? m_vec->contains (search) : false;\n+}\n+\n template<typename T>\n inline bool\n vec<T, va_heap, vl_ptr>::using_auto_storage () const"}]}