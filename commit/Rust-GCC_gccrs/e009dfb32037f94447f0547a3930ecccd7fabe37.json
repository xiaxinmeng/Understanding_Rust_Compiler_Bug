{"sha": "e009dfb32037f94447f0547a3930ecccd7fabe37", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTAwOWRmYjMyMDM3Zjk0NDQ3ZjA1NDdhMzkzMGVjY2NkN2ZhYmUzNw==", "commit": {"author": {"name": "Matthew Malcomson", "email": "matthew.malcomson@arm.com", "date": "2019-04-09T11:39:59Z"}, "committer": {"name": "Matthew Malcomson", "email": "matmal01@gcc.gnu.org", "date": "2019-04-09T11:39:59Z"}, "message": "Hi there,\n\nThe \"*neon_mov<mode>\" patterns for 128 bit sized quantities uses the \"Dn\"\nconstraint to match vmov.f32 and vmov.i<vec-width> patterns.\nThis constraint boils down to using the `neon_immediate_valid` function.\nOnce the constraint has matched, the output C statement asserts that function\npasses.\n\nThe output C statement calls `neon_immediate_valid` with the mode taken from the\niterator, while the constraint takes the mode from the operand.\nThis can cause a discrepency when the operand is a CONST_INT, as the constraint\npasses VOIDmode which `neon_immediate_valid` treats as DImode, while the C\nstatement passes the mode of the iterator which can be TImode.\nWhen this happens, the `neon_immediate_valid` can fail in the second call (if\ne.g. the CONST_INT is a valid immediate in DImode but not TImode) which would\ntrigger the assertion.\n\nThe testcase added with this patch triggers this when compiled with an arm cross\ncompiler using the command line below.\ngcc -march=armv8-a -c neon-immediate-timode.c -O1 -mfloat-abi=hard -mfpu=neon-fp-armv8\n\nThis patch splits the original \"Dn\" constraint into three new constraints, \"DN\"\nfor TImode CONST_INT, \"Dn\" for DImode CONST_INT, and \"Dm\" for CONST_VECTOR.\nSplitting things up this way requires using one extra alternative in the\n\"*neon_mov<mode>\" patterns, but makes it clear from the constraint what mode is\nbeing used.\n\nWe also remove the behaviour of treating VOIDmode as DImode in\n`neon_valid_immediate` since the original \"Dn\" constraint was the only place\nthat functionality was used.  VOIDmode is now never passed to that function.\nAn assertion has been added to the function to ensure this problem is caught\nearlier on.\n\nBootstrapped on arm-none-linux-gnueabihf\nRegtested on cross-compiler arm-none-eabi\n\ngcc/ChangeLog:\n\n2019-04-09  Matthew Malcomson  <matthew.malcomson@arm.com>\n\n\tPR target/90024\n\t* config/arm/arm.c (neon_valid_immediate): Disallow VOIDmode parameter.\n\t* config/arm/constraints.md (Dm, DN, Dn): Split previous Dn constraint\n\tinto three.\n\t* config/arm/neon.md (*neon_mov<mode>): Account for TImode and DImode\n\tdifferences directly.\n\t(*smax<mode>3_neon, vashl<mode>3, vashr<mode>3_imm): Use Dm constraint.\n\ngcc/testsuite/ChangeLog:\n\n2019-04-09  Matthew Malcomson  <matthew.malcomson@arm.com>\n\n\tPR target/90024\n\t* gcc.dg/torture/neon-immediate-timode.c: New test.\n\nFrom-SVN: r270226", "tree": {"sha": "e22eb2b914b8268d511c3cec3f6788fba44ac71d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e22eb2b914b8268d511c3cec3f6788fba44ac71d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e009dfb32037f94447f0547a3930ecccd7fabe37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e009dfb32037f94447f0547a3930ecccd7fabe37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e009dfb32037f94447f0547a3930ecccd7fabe37", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e009dfb32037f94447f0547a3930ecccd7fabe37/comments", "author": {"login": "mmalcomson", "id": 57484298, "node_id": "MDQ6VXNlcjU3NDg0Mjk4", "avatar_url": "https://avatars.githubusercontent.com/u/57484298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mmalcomson", "html_url": "https://github.com/mmalcomson", "followers_url": "https://api.github.com/users/mmalcomson/followers", "following_url": "https://api.github.com/users/mmalcomson/following{/other_user}", "gists_url": "https://api.github.com/users/mmalcomson/gists{/gist_id}", "starred_url": "https://api.github.com/users/mmalcomson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mmalcomson/subscriptions", "organizations_url": "https://api.github.com/users/mmalcomson/orgs", "repos_url": "https://api.github.com/users/mmalcomson/repos", "events_url": "https://api.github.com/users/mmalcomson/events{/privacy}", "received_events_url": "https://api.github.com/users/mmalcomson/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "765f8786cf6e22aa6309f321f0afd8e7dc79b4bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/765f8786cf6e22aa6309f321f0afd8e7dc79b4bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/765f8786cf6e22aa6309f321f0afd8e7dc79b4bb"}], "stats": {"total": 115, "additions": 77, "deletions": 38}, "files": [{"sha": "9d21ce38b032473c643142368c0860e1f8487ba9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e009dfb32037f94447f0547a3930ecccd7fabe37/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e009dfb32037f94447f0547a3930ecccd7fabe37/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e009dfb32037f94447f0547a3930ecccd7fabe37", "patch": "@@ -1,3 +1,13 @@\n+2019-04-09  Matthew Malcomson  <matthew.malcomson@arm.com>\n+\n+\tPR target/90024\n+\t* config/arm/arm.c (neon_valid_immediate): Disallow VOIDmode parameter.\n+\t* config/arm/constraints.md (Dm, DN, Dn): Split previous Dn constraint\n+\tinto three.\n+\t* config/arm/neon.md (*neon_mov<mode>): Account for TImode and DImode\n+\tdifferences directly.\n+\t(*smax<mode>3_neon, vashl<mode>3, vashr<mode>3_imm): Use Dm constraint.\n+\n 2019-04-09  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR translation/90011"}, {"sha": "12ccb7d69018e7aa23cb0fbd3a03d98f92cd4769", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e009dfb32037f94447f0547a3930ecccd7fabe37/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e009dfb32037f94447f0547a3930ecccd7fabe37/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=e009dfb32037f94447f0547a3930ecccd7fabe37", "patch": "@@ -11998,8 +11998,7 @@ neon_valid_immediate (rtx op, machine_mode mode, int inverse,\n   else\n     {\n       n_elts = 1;\n-      if (mode == VOIDmode)\n-\tmode = DImode;\n+      gcc_assert (mode != VOIDmode);\n     }\n \n   innersize = GET_MODE_UNIT_SIZE (mode);"}, {"sha": "d4a4c5967aea09816485d77f9ab90020aa085e73", "filename": "gcc/config/arm/constraints.md", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e009dfb32037f94447f0547a3930ecccd7fabe37/gcc%2Fconfig%2Farm%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e009dfb32037f94447f0547a3930ecccd7fabe37/gcc%2Fconfig%2Farm%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fconstraints.md?ref=e009dfb32037f94447f0547a3930ecccd7fabe37", "patch": "@@ -31,8 +31,8 @@\n ;; 'H' was previously used for FPA.\n \n ;; The following multi-letter normal constraints have been used:\n-;; in ARM/Thumb-2 state: Da, Db, Dc, Dd, Dn, Dl, DL, Do, Dv, Dy, Di, Dt, Dp,\n-;;\t\t\t Dz, Tu\n+;; in ARM/Thumb-2 state: Da, Db, Dc, Dd, Dn, DN, Dm, Dl, DL, Do, Dv, Dy, Di,\n+;;\t\t\t Dt, Dp, Dz, Tu\n ;; in Thumb-1 state: Pa, Pb, Pc, Pd, Pe\n ;; in Thumb-2 state: Ha, Pj, PJ, Ps, Pt, Pu, Pv, Pw, Px, Py, Pz\n ;; in all states: Pf\n@@ -298,14 +298,28 @@\n  (and (match_code \"const_double,const_int\")\n       (match_test \"TARGET_32BIT && arm_const_double_by_immediates (op)\")))\n \n-(define_constraint \"Dn\"\n+(define_constraint \"Dm\"\n  \"@internal\n-  In ARM/Thumb-2 state a const_vector or const_int which can be loaded with a\n-  Neon vmov immediate instruction.\"\n- (and (match_code \"const_vector,const_int\")\n+  In ARM/Thumb-2 state a const_vector which can be loaded with a Neon vmov\n+  immediate instruction.\"\n+ (and (match_code \"const_vector\")\n       (match_test \"TARGET_32BIT\n \t\t   && imm_for_neon_mov_operand (op, GET_MODE (op))\")))\n \n+(define_constraint \"Dn\"\n+ \"@internal\n+  In ARM/Thumb-2 state a DImode const_int which can be loaded with a Neon vmov\n+  immediate instruction.\"\n+ (and (match_code \"const_int\")\n+      (match_test \"TARGET_32BIT && imm_for_neon_mov_operand (op, DImode)\")))\n+\n+(define_constraint \"DN\"\n+ \"@internal\n+  In ARM/Thumb-2 state a TImode const_int which can be loaded with a Neon vmov\n+  immediate instruction.\"\n+ (and (match_code \"const_int\")\n+      (match_test \"TARGET_32BIT && imm_for_neon_mov_operand (op, TImode)\")))\n+\n (define_constraint \"Dl\"\n  \"@internal\n   In ARM/Thumb-2 state a const_vector which can be used with a Neon vorr or"}, {"sha": "726b7281a11be92d0b7a91fa7b8ba9efd1b68ac9", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 31, "deletions": 30, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e009dfb32037f94447f0547a3930ecccd7fabe37/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e009dfb32037f94447f0547a3930ecccd7fabe37/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=e009dfb32037f94447f0547a3930ecccd7fabe37", "patch": "@@ -25,14 +25,14 @@\n \n (define_insn \"*neon_mov<mode>\"\n   [(set (match_operand:VDX 0 \"nonimmediate_operand\"\n-\t  \"=w,Un,w, w,  ?r,?w,?r, ?Us,*r\")\n+\t  \"=w,Un,w, w, w,  ?r,?w,?r, ?Us,*r\")\n \t(match_operand:VDX 1 \"general_operand\"\n-\t  \" w,w, Dn,Uni, w, r, Usi,r,*r\"))]\n+\t  \" w,w, Dm,Dn,Uni, w, r, Usi,r,*r\"))]\n   \"TARGET_NEON\n    && (register_operand (operands[0], <MODE>mode)\n        || register_operand (operands[1], <MODE>mode))\"\n {\n-  if (which_alternative == 2)\n+  if (which_alternative == 2 || which_alternative == 3)\n     {\n       int width, is_valid;\n       static char templ[40];\n@@ -53,32 +53,33 @@\n   switch (which_alternative)\n     {\n     case 0: return \"vmov\\t%P0, %P1  @ <mode>\";\n-    case 1: case 3: return output_move_neon (operands);\n-    case 2: gcc_unreachable ();\n-    case 4: return \"vmov\\t%Q0, %R0, %P1  @ <mode>\";\n-    case 5: return \"vmov\\t%P0, %Q1, %R1  @ <mode>\";\n-    case 8: return \"#\";\n+    case 1: case 4: return output_move_neon (operands);\n+    case 2: case 3: gcc_unreachable ();\n+    case 5: return \"vmov\\t%Q0, %R0, %P1  @ <mode>\";\n+    case 6: return \"vmov\\t%P0, %Q1, %R1  @ <mode>\";\n+    case 9: return \"#\";\n     default: return output_move_double (operands, true, NULL);\n     }\n }\n  [(set_attr \"type\" \"neon_move<q>,neon_store1_1reg,neon_move<q>,\\\n-                    neon_load1_1reg, neon_to_gp<q>,neon_from_gp<q>,\\\n-                    neon_load1_2reg, neon_store1_2reg, multiple\")\n-  (set_attr \"length\" \"4,4,4,4,4,4,8,8,8\")\n-  (set_attr \"arm_pool_range\"     \"*,*,*,1020,*,*,1020,*,*\")\n-  (set_attr \"thumb2_pool_range\"     \"*,*,*,1018,*,*,1018,*,*\")\n-  (set_attr \"neg_pool_range\" \"*,*,*,1004,*,*,1004,*,*\")])\n+                    neon_move<q>,neon_load1_1reg, neon_to_gp<q>,\\\n+                    neon_from_gp<q>,neon_load1_2reg, neon_store1_2reg,\\\n+\t\t    multiple\")\n+  (set_attr \"length\" \"4,4,4,4,4,4,4,8,8,8\")\n+  (set_attr \"arm_pool_range\"     \"*,*,*,*,1020,*,*,1020,*,*\")\n+  (set_attr \"thumb2_pool_range\"     \"*,*,*,*,1018,*,*,1018,*,*\")\n+  (set_attr \"neg_pool_range\" \"*,*,*,*,1004,*,*,1004,*,*\")])\n \n (define_insn \"*neon_mov<mode>\"\n   [(set (match_operand:VQXMOV 0 \"nonimmediate_operand\"\n-  \t  \"=w,Un,w, w,  ?r,?w,?r,?r,  ?Us\")\n+\t  \"=w,Un,w, w, w,  ?r,?w,?r,?r,  ?Us\")\n \t(match_operand:VQXMOV 1 \"general_operand\"\n-\t  \" w,w, Dn,Uni, w, r, r, Usi, r\"))]\n+\t  \" w,w, Dm,DN,Uni, w, r, r, Usi, r\"))]\n   \"TARGET_NEON\n    && (register_operand (operands[0], <MODE>mode)\n        || register_operand (operands[1], <MODE>mode))\"\n {\n-  if (which_alternative == 2)\n+  if (which_alternative == 2 || which_alternative == 3)\n     {\n       int width, is_valid;\n       static char templ[40];\n@@ -99,20 +100,20 @@\n   switch (which_alternative)\n     {\n     case 0: return \"vmov\\t%q0, %q1  @ <mode>\";\n-    case 1: case 3: return output_move_neon (operands);\n-    case 2: gcc_unreachable ();\n-    case 4: return \"vmov\\t%Q0, %R0, %e1  @ <mode>\\;vmov\\t%J0, %K0, %f1\";\n-    case 5: return \"vmov\\t%e0, %Q1, %R1  @ <mode>\\;vmov\\t%f0, %J1, %K1\";\n+    case 1: case 4: return output_move_neon (operands);\n+    case 2: case 3: gcc_unreachable ();\n+    case 5: return \"vmov\\t%Q0, %R0, %e1  @ <mode>\\;vmov\\t%J0, %K0, %f1\";\n+    case 6: return \"vmov\\t%e0, %Q1, %R1  @ <mode>\\;vmov\\t%f0, %J1, %K1\";\n     default: return output_move_quad (operands);\n     }\n }\n   [(set_attr \"type\" \"neon_move_q,neon_store2_2reg_q,neon_move_q,\\\n-                     neon_load2_2reg_q,neon_to_gp_q,neon_from_gp_q,\\\n-                     mov_reg,neon_load1_4reg,neon_store1_4reg\")\n-   (set_attr \"length\" \"4,8,4,8,8,8,16,8,16\")\n-   (set_attr \"arm_pool_range\" \"*,*,*,1020,*,*,*,1020,*\")\n-   (set_attr \"thumb2_pool_range\" \"*,*,*,1018,*,*,*,1018,*\")\n-   (set_attr \"neg_pool_range\" \"*,*,*,996,*,*,*,996,*\")])\n+                     neon_move_q,neon_load2_2reg_q,neon_to_gp_q,\\\n+                     neon_from_gp_q,mov_reg,neon_load1_4reg,neon_store1_4reg\")\n+   (set_attr \"length\" \"4,8,4,4,8,8,8,16,8,16\")\n+   (set_attr \"arm_pool_range\" \"*,*,*,*,1020,*,*,*,1020,*\")\n+   (set_attr \"thumb2_pool_range\" \"*,*,*,*,1018,*,*,*,1018,*\")\n+   (set_attr \"neg_pool_range\" \"*,*,*,*,996,*,*,*,996,*\")])\n \n /* We define these mov expanders to match the standard mov$a optab to prevent\n    the mid-end from trying to do a subreg for these modes which is the most\n@@ -1066,7 +1067,7 @@\n (define_insn \"vashl<mode>3\"\n   [(set (match_operand:VDQIW 0 \"s_register_operand\" \"=w,w\")\n \t(ashift:VDQIW (match_operand:VDQIW 1 \"s_register_operand\" \"w,w\")\n-\t\t      (match_operand:VDQIW 2 \"imm_lshift_or_reg_neon\" \"w,Dn\")))]\n+\t\t      (match_operand:VDQIW 2 \"imm_lshift_or_reg_neon\" \"w,Dm\")))]\n   \"TARGET_NEON\"\n   {\n     switch (which_alternative)\n@@ -1085,7 +1086,7 @@\n (define_insn \"vashr<mode>3_imm\"\n   [(set (match_operand:VDQIW 0 \"s_register_operand\" \"=w\")\n \t(ashiftrt:VDQIW (match_operand:VDQIW 1 \"s_register_operand\" \"w\")\n-\t\t\t(match_operand:VDQIW 2 \"imm_for_neon_rshift_operand\" \"Dn\")))]\n+\t\t\t(match_operand:VDQIW 2 \"imm_for_neon_rshift_operand\" \"Dm\")))]\n   \"TARGET_NEON\"\n   {\n     return neon_output_shift_immediate (\"vshr\", 's', &operands[2],\n@@ -1098,7 +1099,7 @@\n (define_insn \"vlshr<mode>3_imm\"\n   [(set (match_operand:VDQIW 0 \"s_register_operand\" \"=w\")\n \t(lshiftrt:VDQIW (match_operand:VDQIW 1 \"s_register_operand\" \"w\")\n-\t\t\t(match_operand:VDQIW 2 \"imm_for_neon_rshift_operand\" \"Dn\")))]\n+\t\t\t(match_operand:VDQIW 2 \"imm_for_neon_rshift_operand\" \"Dm\")))]\n   \"TARGET_NEON\"\n   {\n     return neon_output_shift_immediate (\"vshr\", 'u', &operands[2],"}, {"sha": "71eaabc499763db2459d5dbe8b924c22457d17ea", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e009dfb32037f94447f0547a3930ecccd7fabe37/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e009dfb32037f94447f0547a3930ecccd7fabe37/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e009dfb32037f94447f0547a3930ecccd7fabe37", "patch": "@@ -1,3 +1,8 @@\n+2019-04-09  Matthew Malcomson  <matthew.malcomson@arm.com>\n+\n+\tPR target/90024\n+\t* gcc.dg/torture/neon-immediate-timode.c: New test.\n+\n 2019-04-09  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/89998"}, {"sha": "35f7d2cd32c8ad08f16dd3a17ffcb2c583c6442a", "filename": "gcc/testsuite/gcc.dg/torture/neon-immediate-timode.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e009dfb32037f94447f0547a3930ecccd7fabe37/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fneon-immediate-timode.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e009dfb32037f94447f0547a3930ecccd7fabe37/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fneon-immediate-timode.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fneon-immediate-timode.c?ref=e009dfb32037f94447f0547a3930ecccd7fabe37", "patch": "@@ -0,0 +1,10 @@\n+union a {\n+  char b;\n+  long long c;\n+};\n+union a d;\n+int g(int, union a, union a);\n+void e() {\n+  union a f[2] = {-1L};\n+  g(0, d, f[0]);\n+}"}]}