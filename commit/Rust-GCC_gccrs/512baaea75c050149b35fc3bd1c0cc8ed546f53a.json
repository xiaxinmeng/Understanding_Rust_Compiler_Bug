{"sha": "512baaea75c050149b35fc3bd1c0cc8ed546f53a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTEyYmFhZWE3NWMwNTAxNDliMzVmYzNiZDFjMGNjOGVkNTQ2ZjUzYQ==", "commit": {"author": {"name": "P.J. Darcy", "email": "darcypj@us.ibm.com", "date": "2004-09-23T20:57:25Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2004-09-23T20:57:25Z"}, "message": "gthr-tpf.h: New file.\n\n2004-09-23  P.J. Darcy  <darcypj@us.ibm.com>\n\ngcc/ChangeLog:\n\n\t* gthr-tpf.h: New file.\n\t* config.gcc (s390x-ibm-tpf*): Add thread_file='tpf'.\n\t* gthr.h: Use gthr-tpf.h on TPF OS.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/Makefile.am (thread_host_headers): Add gthr-tpf.h.\n\tAdd rule to build ${host_builddir}/gthr-tpf.h.\n\t* include/Makefile.in: Regenerate.\n\nFrom-SVN: r87982", "tree": {"sha": "751016d73a999419b8204b19a6606873284e8f19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/751016d73a999419b8204b19a6606873284e8f19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/512baaea75c050149b35fc3bd1c0cc8ed546f53a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/512baaea75c050149b35fc3bd1c0cc8ed546f53a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/512baaea75c050149b35fc3bd1c0cc8ed546f53a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/512baaea75c050149b35fc3bd1c0cc8ed546f53a/comments", "author": null, "committer": null, "parents": [{"sha": "23fad16eb84f349ad63b4ea47ad16e4d2dfc8805", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23fad16eb84f349ad63b4ea47ad16e4d2dfc8805", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23fad16eb84f349ad63b4ea47ad16e4d2dfc8805"}], "stats": {"total": 192, "additions": 191, "deletions": 1}, "files": [{"sha": "cabb154ca00612bb51c187b42e9a12a099048cef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/512baaea75c050149b35fc3bd1c0cc8ed546f53a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/512baaea75c050149b35fc3bd1c0cc8ed546f53a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=512baaea75c050149b35fc3bd1c0cc8ed546f53a", "patch": "@@ -1,3 +1,9 @@\n+2004-09-23  P.J. Darcy  <darcypj@us.ibm.com>\n+\n+\t* gthr-tpf.h: New file.\n+\t* config.gcc (s390x-ibm-tpf*): Add thread_file='tpf'.\n+\t* gthr.h: Use gthr-tpf.h on TPF OS.\n+\n 2004-09-23 Jeff Law  <law@redhat.com>\n \n \t* tree-ssa-ccp.c (get_default_value): Use SSA_NAME_VALUE rather"}, {"sha": "747bcac9577e2c0e716b751b9cbd82347b98d046", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/512baaea75c050149b35fc3bd1c0cc8ed546f53a/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/512baaea75c050149b35fc3bd1c0cc8ed546f53a/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=512baaea75c050149b35fc3bd1c0cc8ed546f53a", "patch": "@@ -1675,6 +1675,7 @@ s390x-ibm-tpf*)\n \textra_parts=\"crtbegin.o crtbeginS.o crtbeginT.o crtend.o crtendS.o\"\n \tout_file=s390/s390.c\n \ttmake_file=\"t-slibgcc-elf-ver s390/t-crtstuff s390/t-tpf\"\n+\tthread_file='tpf'\n \t;;\n sh-*-elf* | sh[12346l]*-*-elf* | sh*-*-kaos* | \\\n sh-*-symbianelf* | sh[12346l]*-*-symbianelf* | \\"}, {"sha": "9831c666dc4399fbb65f36964e9c44da74a5722f", "filename": "gcc/gthr-tpf.h", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/512baaea75c050149b35fc3bd1c0cc8ed546f53a/gcc%2Fgthr-tpf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/512baaea75c050149b35fc3bd1c0cc8ed546f53a/gcc%2Fgthr-tpf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgthr-tpf.h?ref=512baaea75c050149b35fc3bd1c0cc8ed546f53a", "patch": "@@ -0,0 +1,157 @@\n+/* Threads compatibility routines for libgcc2 and libobjc.\n+   Compile this one with gcc.\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 2, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to the Free\n+Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+02111-1307, USA.  */\n+\n+/* As a special exception, if you link this library with other files,\n+   some of which are compiled with GCC, to produce an executable,\n+   this library does not by itself cause the resulting executable\n+   to be covered by the GNU General Public License.\n+   This exception does not however invalidate any other reasons why\n+   the executable file might be covered by the GNU General Public License.  */\n+\n+\n+/* TPF needs its own version of gthr-*.h because TPF always links to \n+   the thread library.  However, for performance reasons we still do not\n+   want to issue thread api calls unless a check is made to see that we\n+   are running as a thread.  */\n+\n+#ifndef GCC_GTHR_TPF_H\n+#define GCC_GTHR_TPF_H\n+\n+/* POSIX threads specific definitions.\n+   Easy, since the interface is just one-to-one mapping.  */\n+\n+#define __GTHREADS 1\n+\n+/* Some implementations of <pthread.h> require this to be defined.  */\n+#ifndef _REENTRANT\n+#define _REENTRANT 1\n+#endif\n+\n+#include <pthread.h>\n+#include <unistd.h>\n+\n+typedef pthread_key_t __gthread_key_t;\n+typedef pthread_once_t __gthread_once_t;\n+typedef pthread_mutex_t __gthread_mutex_t;\n+\n+#define __GTHREAD_MUTEX_INIT PTHREAD_MUTEX_INITIALIZER\n+#define __GTHREAD_ONCE_INIT PTHREAD_ONCE_INIT\n+\n+#define NOTATHREAD   00\n+#define ECBBASEPTR (unsigned long int) *(unsigned int *)0x00000514u\n+#define ECBPG2PTR  ECBBASEPTR + 0x1000\n+#define CE2THRCPTR *((unsigned char *)(ECBPG2PTR + 208))\n+#define __tpf_pthread_active() (CE2THRCPTR != NOTATHREAD)\n+\n+#if SUPPORTS_WEAK && GTHREAD_USE_WEAK\n+\n+#pragma weak pthread_once\n+#pragma weak pthread_key_create\n+#pragma weak pthread_key_delete\n+#pragma weak pthread_getspecific\n+#pragma weak pthread_setspecific\n+#pragma weak pthread_create\n+\n+#pragma weak pthread_mutex_lock\n+#pragma weak pthread_mutex_trylock\n+#pragma weak pthread_mutex_unlock\n+\n+#endif /* SUPPORTS_WEAK */\n+\n+static inline int\n+__gthread_active_p (void)\n+{\n+  return 1;\n+}\n+\n+static inline int\n+__gthread_once (__gthread_once_t *once, void (*func) (void))\n+{\n+  if (__tpf_pthread_active ())\n+    return pthread_once (once, func);\n+  else\n+    return -1;\n+}\n+\n+static inline int\n+__gthread_key_create (__gthread_key_t *key, void (*dtor) (void *))\n+{\n+  if (__tpf_pthread_active ())\n+    return pthread_key_create (key, dtor);\n+  else\n+    return -1;\n+}\n+\n+static inline int\n+__gthread_key_delete (__gthread_key_t key)\n+{\n+  if (__tpf_pthread_active ())\n+    return pthread_key_delete (key);\n+  else\n+    return -1;\n+}\n+\n+static inline void *\n+__gthread_getspecific (__gthread_key_t key)\n+{\n+  if (__tpf_pthread_active ())\n+    return pthread_getspecific (key);\n+  else\n+    return NULL;\n+}\n+\n+static inline int\n+__gthread_setspecific (__gthread_key_t key, const void *ptr)\n+{\n+  if (__tpf_pthread_active ())\n+    return pthread_setspecific (key, ptr);\n+  else\n+    return -1;\n+}\n+\n+static inline int\n+__gthread_mutex_lock (__gthread_mutex_t *mutex)\n+{\n+  if (__tpf_pthread_active ())\n+    return pthread_mutex_lock (mutex);\n+  else\n+    return 0;\n+}\n+\n+static inline int\n+__gthread_mutex_trylock (__gthread_mutex_t *mutex)\n+{\n+  if (__tpf_pthread_active ())\n+    return pthread_mutex_trylock (mutex);\n+  else\n+    return 0;\n+}\n+\n+static inline int\n+__gthread_mutex_unlock (__gthread_mutex_t *mutex)\n+{\n+  if (__tpf_pthread_active ())\n+    return pthread_mutex_unlock (mutex);\n+  else\n+    return 0;\n+}\n+\n+#endif /* ! GCC_GTHR_TPF_H */"}, {"sha": "dc43b6d50e363de360802e61bdc6f610d79d81e2", "filename": "gcc/gthr.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/512baaea75c050149b35fc3bd1c0cc8ed546f53a/gcc%2Fgthr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/512baaea75c050149b35fc3bd1c0cc8ed546f53a/gcc%2Fgthr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgthr.h?ref=512baaea75c050149b35fc3bd1c0cc8ed546f53a", "patch": "@@ -89,7 +89,9 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n */\n \n /* Check first for thread specific defines.  */\n-#if _PTHREADS\n+#if defined (__tpf__)\n+#include \"gthr-tpf.h\"\n+#elif _PTHREADS\n #include \"gthr-posix.h\"\n #elif _DCE_THREADS\n #include \"gthr-dce.h\""}, {"sha": "711157815e636f40b76c80cf7b7a8912418c1192", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/512baaea75c050149b35fc3bd1c0cc8ed546f53a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/512baaea75c050149b35fc3bd1c0cc8ed546f53a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=512baaea75c050149b35fc3bd1c0cc8ed546f53a", "patch": "@@ -1,3 +1,9 @@\n+2004-09-23  P.J. Darcy  <darcypj@us.ibm.com>\n+\n+\t* include/Makefile.am (thread_host_headers): Add gthr-tpf.h.\n+\tAdd rule to build ${host_builddir}/gthr-tpf.h.\n+\t* include/Makefile.in: Regenerate.\n+\n 2004-09-23  Paolo Carlini  <pcarlini@suse.de>\n \t    Magnus Fromreide  <magfr@lysator.liu.se>\n \t    "}, {"sha": "2ab53ee59d3b24e1dcd4edbe18aa10c82fe6201f", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/512baaea75c050149b35fc3bd1c0cc8ed546f53a/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/512baaea75c050149b35fc3bd1c0cc8ed546f53a/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=512baaea75c050149b35fc3bd1c0cc8ed546f53a", "patch": "@@ -361,6 +361,7 @@ thread_host_headers = \\\n \t${host_builddir}/gthr.h \\\n \t${host_builddir}/gthr-single.h \\\n \t${host_builddir}/gthr-posix.h \\\n+\t${host_builddir}/gthr-tpf.h \\\n \t${host_builddir}/gthr-default.h\n \n pch_input = ${host_builddir}/stdc++.h\n@@ -526,6 +527,14 @@ ${host_builddir}/gthr-posix.h: ${toplevel_srcdir}/gcc/gthr-posix.h \\\n \t    -e 's/\\(${uppercase}*USE_WEAK\\)/_GLIBCXX_\\1/g' \\\n \t    < ${toplevel_srcdir}/gcc/gthr-posix.h > $@\n \n+${host_builddir}/gthr-tpf.h: ${toplevel_srcdir}/gcc/gthr-tpf.h \\\n+\t\t\t\t   stamp-${host_alias}\n+\tsed -e 's/\\(UNUSED\\)/_GLIBCXX_\\1/g' \\\n+\t    -e 's/\\(GCC${uppercase}*_H\\)/_GLIBCXX_\\1/g' \\\n+\t    -e 's/SUPPORTS_WEAK/__GXX_WEAK__/g' \\\n+\t    -e 's/\\(${uppercase}*USE_WEAK\\)/_GLIBCXX_\\1/g' \\\n+\t    < ${toplevel_srcdir}/gcc/gthr-tpf.h > $@\n+\n ${host_builddir}/gthr-default.h: ${toplevel_srcdir}/gcc/${glibcxx_thread_h} \\\n \t\t\t\t   stamp-${host_alias}\n \tsed -e 's/\\(UNUSED\\)/_GLIBCXX_\\1/g' \\"}, {"sha": "b6f4be72c6959d0c899f7739d5a7421c3eb722a8", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/512baaea75c050149b35fc3bd1c0cc8ed546f53a/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/512baaea75c050149b35fc3bd1c0cc8ed546f53a/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=512baaea75c050149b35fc3bd1c0cc8ed546f53a", "patch": "@@ -575,6 +575,7 @@ thread_host_headers = \\\n \t${host_builddir}/gthr.h \\\n \t${host_builddir}/gthr-single.h \\\n \t${host_builddir}/gthr-posix.h \\\n+\t${host_builddir}/gthr-tpf.h \\\n \t${host_builddir}/gthr-default.h\n \n pch_input = ${host_builddir}/stdc++.h\n@@ -903,6 +904,14 @@ ${host_builddir}/gthr-posix.h: ${toplevel_srcdir}/gcc/gthr-posix.h \\\n \t    -e 's/\\(${uppercase}*USE_WEAK\\)/_GLIBCXX_\\1/g' \\\n \t    < ${toplevel_srcdir}/gcc/gthr-posix.h > $@\n \n+${host_builddir}/gthr-tpf.h: ${toplevel_srcdir}/gcc/gthr-tpf.h \\\n+\t\t\t\t   stamp-${host_alias}\n+\tsed -e 's/\\(UNUSED\\)/_GLIBCXX_\\1/g' \\\n+\t    -e 's/\\(GCC${uppercase}*_H\\)/_GLIBCXX_\\1/g' \\\n+\t    -e 's/SUPPORTS_WEAK/__GXX_WEAK__/g' \\\n+\t    -e 's/\\(${uppercase}*USE_WEAK\\)/_GLIBCXX_\\1/g' \\\n+\t    < ${toplevel_srcdir}/gcc/gthr-tpf.h > $@\n+\n ${host_builddir}/gthr-default.h: ${toplevel_srcdir}/gcc/${glibcxx_thread_h} \\\n \t\t\t\t   stamp-${host_alias}\n \tsed -e 's/\\(UNUSED\\)/_GLIBCXX_\\1/g' \\"}]}