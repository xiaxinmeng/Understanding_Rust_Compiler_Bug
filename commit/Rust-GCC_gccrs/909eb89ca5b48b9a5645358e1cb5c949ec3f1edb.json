{"sha": "909eb89ca5b48b9a5645358e1cb5c949ec3f1edb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTA5ZWI4OWNhNWI0OGI5YTU2NDUzNThlMWNiNWM5NDllYzNmMWVkYg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2014-09-17T21:49:46Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2014-09-17T21:49:46Z"}, "message": "re PR c/61854 (Warning single-line comment for -std=c89?)\n\n\tPR c/61854\nlibcpp/\n\t* init.c (struct lang_flags): Remove cplusplus_comments.\n\t(cpp_set_lang): Likewise.\n\t(post_options): Likewise.\n\t* lex.c (_cpp_lex_direct): Disallow C++ style comments in C90/C94.\ntestsuite/\n\t* gcc.dg/cpp/pr61854-1.c: New test.\n\t* gcc.dg/cpp/pr61854-2.c: New test.\n\t* gcc.dg/cpp/pr61854-3.c: New test.\n\t* gcc.dg/cpp/pr61854-3.h: New test.\n\t* gcc.dg/cpp/pr61854-4.c: New test.\n\t* gcc.dg/cpp/pr61854-5.c: New test.\n\t* gcc.dg/cpp/pr61854-6.c: New test.\n\t* gcc.dg/cpp/pr61854-7.c: New test.\n\t* gcc.dg/cpp/pr61854-c90.c: New test.\n\t* gcc.dg/cpp/pr61854-c94.c: New test.\n\nFrom-SVN: r215339", "tree": {"sha": "d873bfc33c03e881e036aa4a39cd18516df27f6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d873bfc33c03e881e036aa4a39cd18516df27f6b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/909eb89ca5b48b9a5645358e1cb5c949ec3f1edb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/909eb89ca5b48b9a5645358e1cb5c949ec3f1edb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/909eb89ca5b48b9a5645358e1cb5c949ec3f1edb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/909eb89ca5b48b9a5645358e1cb5c949ec3f1edb/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "010718fc37a1e84698479677381e654169082cd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/010718fc37a1e84698479677381e654169082cd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/010718fc37a1e84698479677381e654169082cd0"}], "stats": {"total": 232, "additions": 206, "deletions": 26}, "files": [{"sha": "28157924c47bbc051002edbe101bc751018a120a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/909eb89ca5b48b9a5645358e1cb5c949ec3f1edb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/909eb89ca5b48b9a5645358e1cb5c949ec3f1edb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=909eb89ca5b48b9a5645358e1cb5c949ec3f1edb", "patch": "@@ -1,3 +1,17 @@\n+2014-09-17  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/61854\n+\t* gcc.dg/cpp/pr61854-1.c: New test.\n+\t* gcc.dg/cpp/pr61854-2.c: New test.\n+\t* gcc.dg/cpp/pr61854-3.c: New test.\n+\t* gcc.dg/cpp/pr61854-3.h: New test.\n+\t* gcc.dg/cpp/pr61854-4.c: New test.\n+\t* gcc.dg/cpp/pr61854-5.c: New test.\n+\t* gcc.dg/cpp/pr61854-6.c: New test.\n+\t* gcc.dg/cpp/pr61854-7.c: New test.\n+\t* gcc.dg/cpp/pr61854-c90.c: New test.\n+\t* gcc.dg/cpp/pr61854-c94.c: New test.\n+\n 2014-09-17  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/63284"}, {"sha": "364a5112e33600052e81e05ba349131db033df59", "filename": "gcc/testsuite/gcc.dg/cpp/pr61854-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/909eb89ca5b48b9a5645358e1cb5c949ec3f1edb/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr61854-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/909eb89ca5b48b9a5645358e1cb5c949ec3f1edb/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr61854-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr61854-1.c?ref=909eb89ca5b48b9a5645358e1cb5c949ec3f1edb", "patch": "@@ -0,0 +1,15 @@\n+/* PR c/61854 */\n+/* { dg-do run } */\n+/* { dg-options \"-std=c89\" } */\n+\n+int\n+main (void)\n+{\n+  int i = 1 //**/ 2\n+  ;\n+  int j = 1 //**/ 2\n+  ;\n+  if (i != 0 || j != 0)\n+    __builtin_abort ();  \n+  return 0;\n+}"}, {"sha": "883db21b00594b7cc98f50e294c27634990dbb3b", "filename": "gcc/testsuite/gcc.dg/cpp/pr61854-2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/909eb89ca5b48b9a5645358e1cb5c949ec3f1edb/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr61854-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/909eb89ca5b48b9a5645358e1cb5c949ec3f1edb/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr61854-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr61854-2.c?ref=909eb89ca5b48b9a5645358e1cb5c949ec3f1edb", "patch": "@@ -0,0 +1,15 @@\n+/* PR c/61854 */\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu89\" } */\n+\n+int\n+main (void)\n+{\n+  int i = 1 //**/ 2\n+  ;\n+  int j = 1 //**/ 2\n+  ;\n+  if (i != 1 || j != 1)\n+    __builtin_abort ();  \n+  return 0;\n+}"}, {"sha": "916c12ea3cfe3c00f08c064e3826475309ff24ec", "filename": "gcc/testsuite/gcc.dg/cpp/pr61854-3.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/909eb89ca5b48b9a5645358e1cb5c949ec3f1edb/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr61854-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/909eb89ca5b48b9a5645358e1cb5c949ec3f1edb/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr61854-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr61854-3.c?ref=909eb89ca5b48b9a5645358e1cb5c949ec3f1edb", "patch": "@@ -0,0 +1,6 @@\n+/* PR c/61854 */\n+/* { dg-do preprocess } */\n+/* { dg-options \"-std=c89\" } */\n+\n+#include \"pr61854-3.h\"\n+int i;"}, {"sha": "fd798bd8184599cf232cb3e5f6185097d9f634ba", "filename": "gcc/testsuite/gcc.dg/cpp/pr61854-3.h", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/909eb89ca5b48b9a5645358e1cb5c949ec3f1edb/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr61854-3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/909eb89ca5b48b9a5645358e1cb5c949ec3f1edb/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr61854-3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr61854-3.h?ref=909eb89ca5b48b9a5645358e1cb5c949ec3f1edb", "patch": "@@ -0,0 +1,4 @@\n+#pragma GCC system_header\n+// X\n+// Y\n+// Z"}, {"sha": "5cfa5a74923bb076bb58305ec6f9cb7799a97fce", "filename": "gcc/testsuite/gcc.dg/cpp/pr61854-4.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/909eb89ca5b48b9a5645358e1cb5c949ec3f1edb/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr61854-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/909eb89ca5b48b9a5645358e1cb5c949ec3f1edb/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr61854-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr61854-4.c?ref=909eb89ca5b48b9a5645358e1cb5c949ec3f1edb", "patch": "@@ -0,0 +1,16 @@\n+/* PR c/61854 */\n+/* { dg-do preprocess } */\n+/* { dg-options \"-std=c89\" } */\n+\n+void\n+foo (void)\n+{\n+#if 0\n+  // Do not error here.\n+#endif\n+#if 1\n+  // But error here.\n+#endif\n+  /* { dg-error \"C\\\\+\\\\+ style comments are not allowed in ISO C90\" \"comments\"  { target *-*-*} 12 } */\n+  /* { dg-error \"reported only once\" \"\"  { target *-*-*} 12 } */\n+}"}, {"sha": "a7628dc6ea43150bb49a1759226a62de4014442f", "filename": "gcc/testsuite/gcc.dg/cpp/pr61854-5.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/909eb89ca5b48b9a5645358e1cb5c949ec3f1edb/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr61854-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/909eb89ca5b48b9a5645358e1cb5c949ec3f1edb/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr61854-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr61854-5.c?ref=909eb89ca5b48b9a5645358e1cb5c949ec3f1edb", "patch": "@@ -0,0 +1,15 @@\n+/* PR c/61854 */\n+/* { dg-do run } */\n+/* { dg-options \"-std=c89\" } */\n+\n+#define h(x) #x\n+#define s(x) h(x)\n+#define foo //\n+\n+int\n+main (void)\n+{\n+  if (__builtin_memcmp (s(foo), \"//\", 3) != 0)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "1b60cc37fb1d1bd7093a2c83db51e5f76dcb4671", "filename": "gcc/testsuite/gcc.dg/cpp/pr61854-6.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/909eb89ca5b48b9a5645358e1cb5c949ec3f1edb/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr61854-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/909eb89ca5b48b9a5645358e1cb5c949ec3f1edb/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr61854-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr61854-6.c?ref=909eb89ca5b48b9a5645358e1cb5c949ec3f1edb", "patch": "@@ -0,0 +1,19 @@\n+/* PR c/61854 */\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu89\" } */\n+\n+int\n+main (void)\n+{\n+  int i = 0\n+#if 0\n+// /*\n+#else\n+// */\n++1\n+#endif\n+;\n+  if (i != 1)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "8bf479bbaae52e4eac323430a3c548c78a7bad05", "filename": "gcc/testsuite/gcc.dg/cpp/pr61854-7.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/909eb89ca5b48b9a5645358e1cb5c949ec3f1edb/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr61854-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/909eb89ca5b48b9a5645358e1cb5c949ec3f1edb/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr61854-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr61854-7.c?ref=909eb89ca5b48b9a5645358e1cb5c949ec3f1edb", "patch": "@@ -0,0 +1,19 @@\n+/* PR c/61854 */\n+/* { dg-do run } */\n+/* { dg-options \"-std=c89\" } */\n+\n+int\n+main (void)\n+{\n+  int i = 0\n+#if 0\n+// /*\n+#else\n+// */\n++1\n+#endif\n+;\n+  if (i != 0)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "37eecbe23fb6405c967fd5335abf4326b2e4aaac", "filename": "gcc/testsuite/gcc.dg/cpp/pr61854-c90.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/909eb89ca5b48b9a5645358e1cb5c949ec3f1edb/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr61854-c90.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/909eb89ca5b48b9a5645358e1cb5c949ec3f1edb/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr61854-c90.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr61854-c90.c?ref=909eb89ca5b48b9a5645358e1cb5c949ec3f1edb", "patch": "@@ -0,0 +1,13 @@\n+/* PR c/61854 */\n+/* { dg-do preprocess } */\n+/* { dg-options \"-std=iso9899:1990\" } */\n+\n+void\n+foo (void)\n+{\n+  // 1st\n+  /* { dg-error \"C\\\\+\\\\+ style comments are not allowed in ISO C90\" \"comments\"  { target *-*-*} 8 } */\n+  /* { dg-error \"reported only once\" \"\"  { target *-*-*} 8 } */\n+  // 2nd\n+  // 3rd\n+}"}, {"sha": "64f1e1845c7a476febb0b913d376571aed6d88d3", "filename": "gcc/testsuite/gcc.dg/cpp/pr61854-c94.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/909eb89ca5b48b9a5645358e1cb5c949ec3f1edb/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr61854-c94.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/909eb89ca5b48b9a5645358e1cb5c949ec3f1edb/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr61854-c94.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr61854-c94.c?ref=909eb89ca5b48b9a5645358e1cb5c949ec3f1edb", "patch": "@@ -0,0 +1,13 @@\n+/* PR c/61854 */\n+/* { dg-do preprocess } */\n+/* { dg-options \"-std=iso9899:199409\" } */\n+\n+void\n+foo (void)\n+{\n+  // 1st\n+  /* { dg-error \"C\\\\+\\\\+ style comments are not allowed in ISO C90\" \"comments\"  { target *-*-*} 8 } */\n+  /* { dg-error \"reported only once\" \"\"  { target *-*-*} 8 } */\n+  // 2nd\n+  // 3rd\n+}"}, {"sha": "77713476d4c7727172aceed47938562cbeb93de9", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/909eb89ca5b48b9a5645358e1cb5c949ec3f1edb/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/909eb89ca5b48b9a5645358e1cb5c949ec3f1edb/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=909eb89ca5b48b9a5645358e1cb5c949ec3f1edb", "patch": "@@ -1,3 +1,11 @@\n+2014-09-17  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/61854\n+\t* init.c (struct lang_flags): Remove cplusplus_comments.\n+\t(cpp_set_lang): Likewise.\n+\t(post_options): Likewise.\n+\t* lex.c (_cpp_lex_direct): Disallow C++ style comments in C90/C94.\n+\n 2014-09-09  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \t* include/cpplib.h (struct cpp_options): Declare warn_normalize as"}, {"sha": "1121962148b490bf4a7a59346f2feeb628ba1787", "filename": "libcpp/init.c", "status": "modified", "additions": 17, "deletions": 21, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/909eb89ca5b48b9a5645358e1cb5c949ec3f1edb/libcpp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/909eb89ca5b48b9a5645358e1cb5c949ec3f1edb/libcpp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.c?ref=909eb89ca5b48b9a5645358e1cb5c949ec3f1edb", "patch": "@@ -83,7 +83,6 @@ struct lang_flags\n   char extended_identifiers;\n   char c11_identifiers;\n   char std;\n-  char cplusplus_comments;\n   char digraphs;\n   char uliterals;\n   char rliterals;\n@@ -94,23 +93,23 @@ struct lang_flags\n };\n \n static const struct lang_flags lang_defaults[] =\n-{ /*              c99 c++ xnum xid c11 std // digr ulit rlit udlit bincst digsep trig */\n-  /* GNUC89   */  { 0,  0,  1,  0,  0,  0,  1,  1,  0,   0,   0,    0,     0,     0 },\n-  /* GNUC99   */  { 1,  0,  1,  0,  0,  0,  1,  1,  1,   1,   0,    0,     0,     0 },\n-  /* GNUC11   */  { 1,  0,  1,  0,  1,  0,  1,  1,  1,   1,   0,    0,     0,     0 },\n-  /* STDC89   */  { 0,  0,  0,  0,  0,  1,  0,  0,  0,   0,   0,    0,     0,     1 },\n-  /* STDC94   */  { 0,  0,  0,  0,  0,  1,  0,  1,  0,   0,   0,    0,     0,     1 },\n-  /* STDC99   */  { 1,  0,  1,  0,  0,  1,  1,  1,  0,   0,   0,    0,     0,     1 },\n-  /* STDC11   */  { 1,  0,  1,  0,  1,  1,  1,  1,  1,   0,   0,    0,     0,     1 },\n-  /* GNUCXX   */  { 0,  1,  1,  0,  0,  0,  1,  1,  0,   0,   0,    0,     0,     0 },\n-  /* CXX98    */  { 0,  1,  0,  0,  0,  1,  1,  1,  0,   0,   0,    0,     0,     1 },\n-  /* GNUCXX11 */  { 1,  1,  1,  0,  1,  0,  1,  1,  1,   1,   1,    0,     0,     0 },\n-  /* CXX11    */  { 1,  1,  1,  0,  1,  1,  1,  1,  1,   1,   1,    0,     0,     1 },\n-  /* GNUCXX14 */  { 1,  1,  1,  0,  1,  0,  1,  1,  1,   1,   1,    1,     1,     0 },\n-  /* CXX14    */  { 1,  1,  1,  0,  1,  1,  1,  1,  1,   1,   1,    1,     1,     1 },\n-  /* GNUCXX1Z */  { 1,  1,  1,  0,  1,  0,  1,  1,  1,   1,   1,    1,     1,     0 },\n-  /* CXX1Z    */  { 1,  1,  1,  0,  1,  1,  1,  1,  1,   1,   1,    1,     1,     0 },\n-  /* ASM      */  { 0,  0,  1,  0,  0,  0,  1,  0,  0,   0,   0,    0,     0,     0 }\n+{ /*              c99 c++ xnum xid c11 std digr ulit rlit udlit bincst digsep trig */\n+  /* GNUC89   */  { 0,  0,  1,  0,  0,  0,  1,   0,   0,   0,    0,     0,     0 },\n+  /* GNUC99   */  { 1,  0,  1,  0,  0,  0,  1,   1,   1,   0,    0,     0,     0 },\n+  /* GNUC11   */  { 1,  0,  1,  0,  1,  0,  1,   1,   1,   0,    0,     0,     0 },\n+  /* STDC89   */  { 0,  0,  0,  0,  0,  1,  0,   0,   0,   0,    0,     0,     1 },\n+  /* STDC94   */  { 0,  0,  0,  0,  0,  1,  1,   0,   0,   0,    0,     0,     1 },\n+  /* STDC99   */  { 1,  0,  1,  0,  0,  1,  1,   0,   0,   0,    0,     0,     1 },\n+  /* STDC11   */  { 1,  0,  1,  0,  1,  1,  1,   1,   0,   0,    0,     0,     1 },\n+  /* GNUCXX   */  { 0,  1,  1,  0,  0,  0,  1,   0,   0,   0,    0,     0,     0 },\n+  /* CXX98    */  { 0,  1,  0,  0,  0,  1,  1,   0,   0,   0,    0,     0,     1 },\n+  /* GNUCXX11 */  { 1,  1,  1,  0,  1,  0,  1,   1,   1,   1,    0,     0,     0 },\n+  /* CXX11    */  { 1,  1,  1,  0,  1,  1,  1,   1,   1,   1,    0,     0,     1 },\n+  /* GNUCXX14 */  { 1,  1,  1,  0,  1,  0,  1,   1,   1,   1,    1,     1,     0 },\n+  /* CXX14    */  { 1,  1,  1,  0,  1,  1,  1,   1,   1,   1,    1,     1,     1 },\n+  /* GNUCXX1Z */  { 1,  1,  1,  0,  1,  0,  1,   1,   1,   1,    1,     1,     0 },\n+  /* CXX1Z    */  { 1,  1,  1,  0,  1,  1,  1,   1,   1,   1,    1,     1,     0 },\n+  /* ASM      */  { 0,  0,  1,  0,  0,  0,  0,   0,   0,   0,    0,     0,     0 }\n   /* xid should be 1 for GNUC99, STDC99, GNUCXX, CXX98, GNUCXX11, CXX11,\n      GNUCXX14, and CXX14 when no longer experimental (when all uses of\n      identifiers in the compiler have been audited for correct handling\n@@ -131,7 +130,6 @@ cpp_set_lang (cpp_reader *pfile, enum c_lang lang)\n   CPP_OPTION (pfile, extended_identifiers)\t = l->extended_identifiers;\n   CPP_OPTION (pfile, c11_identifiers)\t\t = l->c11_identifiers;\n   CPP_OPTION (pfile, std)\t\t\t = l->std;\n-  CPP_OPTION (pfile, cplusplus_comments)\t = l->cplusplus_comments;\n   CPP_OPTION (pfile, digraphs)\t\t\t = l->digraphs;\n   CPP_OPTION (pfile, uliterals)\t\t\t = l->uliterals;\n   CPP_OPTION (pfile, rliterals)\t\t\t = l->rliterals;\n@@ -775,8 +773,6 @@ post_options (cpp_reader *pfile)\n \n   if (CPP_OPTION (pfile, traditional))\n     {\n-      CPP_OPTION (pfile, cplusplus_comments) = 0;\n-\n       CPP_OPTION (pfile, trigraphs) = 0;\n       CPP_OPTION (pfile, warn_trigraphs) = 0;\n     }"}, {"sha": "bdaa0705bc7962bc89ac7a2594b4658b540530ac", "filename": "libcpp/lex.c", "status": "modified", "additions": 32, "deletions": 5, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/909eb89ca5b48b9a5645358e1cb5c949ec3f1edb/libcpp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/909eb89ca5b48b9a5645358e1cb5c949ec3f1edb/libcpp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.c?ref=909eb89ca5b48b9a5645358e1cb5c949ec3f1edb", "patch": "@@ -2322,13 +2322,16 @@ _cpp_lex_direct (cpp_reader *pfile)\n \t  if (_cpp_skip_block_comment (pfile))\n \t    cpp_error (pfile, CPP_DL_ERROR, \"unterminated comment\");\n \t}\n-      else if (c == '/' && (CPP_OPTION (pfile, cplusplus_comments)\n-\t\t\t    || cpp_in_system_header (pfile)))\n+      else if (c == '/' && ! CPP_OPTION (pfile, traditional))\n \t{\n+\t  /* Don't warn for system headers.  */\n+\t  if (cpp_in_system_header (pfile))\n+\t    ;\n \t  /* Warn about comments if pedantically GNUC89, and not\n \t     in system headers.  */\n-\t  if (CPP_OPTION (pfile, lang) == CLK_GNUC89 && CPP_PEDANTIC (pfile)\n-\t      && ! buffer->warned_cplusplus_comments)\n+\t  else if (CPP_OPTION (pfile, lang) == CLK_GNUC89\n+\t\t   && CPP_PEDANTIC (pfile)\n+\t\t   && ! buffer->warned_cplusplus_comments)\n \t    {\n \t      cpp_error (pfile, CPP_DL_PEDWARN,\n \t\t\t \"C++ style comments are not allowed in ISO C90\");\n@@ -2347,7 +2350,31 @@ _cpp_lex_direct (cpp_reader *pfile)\n \t\t\t \"(this will be reported only once per input file)\");\n \t      buffer->warned_cplusplus_comments = 1;\n \t    }\n-\n+\t  /* In C89/C94, C++ style comments are forbidden.  */\n+\t  else if ((CPP_OPTION (pfile, lang) == CLK_STDC89\n+\t\t    || CPP_OPTION (pfile, lang) == CLK_STDC94))\n+\t    {\n+\t      /* But don't be confused about valid code such as\n+\t         - // immediately followed by *,\n+\t\t - // in a preprocessing directive,\n+\t\t - // in an #if 0 block.  */\n+\t      if (buffer->cur[1] == '*'\n+\t\t  || pfile->state.in_directive\n+\t\t  || pfile->state.skipping)\n+\t\t{\n+\t\t  result->type = CPP_DIV;\n+\t\t  break;\n+\t\t}\n+\t      else if (! buffer->warned_cplusplus_comments)\n+\t\t{\n+\t\t  cpp_error (pfile, CPP_DL_ERROR,\n+\t\t\t     \"C++ style comments are not allowed in ISO C90\");\n+\t\t  cpp_error (pfile, CPP_DL_ERROR,\n+\t\t\t     \"(this will be reported only once per input \"\n+\t\t\t     \"file)\");\n+\t\t  buffer->warned_cplusplus_comments = 1;\n+\t\t}\n+\t    }\n \t  if (skip_line_comment (pfile) && CPP_OPTION (pfile, warn_comments))\n \t    cpp_warning (pfile, CPP_W_COMMENTS, \"multi-line comment\");\n \t}"}]}