{"sha": "e10326ff910ab337741d0781a536435d51c5f044", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTEwMzI2ZmY5MTBhYjMzNzc0MWQwNzgxYTUzNjQzNWQ1MWM1ZjA0NA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-10-22T21:07:50Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-10-22T21:07:50Z"}, "message": "Make more use of subreg_size_lowpart_offset\n\nThis patch uses subreg_size_lowpart_offset in places that open-coded\nthe calculation.  The reload use (and the LRA one that was based on it)\nseemed to ignore the BYTES_BIG_ENDIAN != WORDS_BIG_ENDIAN case; it's not\nobvious whether that was deliberate or an oversight.\n\n2017-10-22  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* lra-spills.c (assign_mem_slot): Use subreg_size_lowpart_offset.\n\t* regcprop.c (maybe_mode_change): Likewise.\n\t* reload1.c (alter_reg): Likewise.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r253989", "tree": {"sha": "c06a568f9e31903ca74a6e355e410a71dfe83311", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c06a568f9e31903ca74a6e355e410a71dfe83311"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e10326ff910ab337741d0781a536435d51c5f044", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e10326ff910ab337741d0781a536435d51c5f044", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e10326ff910ab337741d0781a536435d51c5f044", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e10326ff910ab337741d0781a536435d51c5f044/comments", "author": null, "committer": null, "parents": [{"sha": "cae115d6d4552a29efb4ea94363d63bde985b4d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cae115d6d4552a29efb4ea94363d63bde985b4d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cae115d6d4552a29efb4ea94363d63bde985b4d8"}], "stats": {"total": 25, "additions": 13, "deletions": 12}, "files": [{"sha": "d27728d544872fe4ff7f9a1e5211c3b2283d3547", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e10326ff910ab337741d0781a536435d51c5f044/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e10326ff910ab337741d0781a536435d51c5f044/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e10326ff910ab337741d0781a536435d51c5f044", "patch": "@@ -1,3 +1,11 @@\n+2017-10-22  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* lra-spills.c (assign_mem_slot): Use subreg_size_lowpart_offset.\n+\t* regcprop.c (maybe_mode_change): Likewise.\n+\t* reload1.c (alter_reg): Likewise.\n+\n 2017-10-22  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* inchash.h (inchash::hash::add_wide_int): New function."}, {"sha": "5997b1e48f591098abc46f5a0338d83e8f6ded70", "filename": "gcc/lra-spills.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e10326ff910ab337741d0781a536435d51c5f044/gcc%2Flra-spills.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e10326ff910ab337741d0781a536435d51c5f044/gcc%2Flra-spills.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-spills.c?ref=e10326ff910ab337741d0781a536435d51c5f044", "patch": "@@ -153,9 +153,7 @@ assign_mem_slot (int i)\n \n   /* On a big endian machine, the \"address\" of the slot is the address\n      of the low part that fits its inherent mode.  */\n-  if (BYTES_BIG_ENDIAN && inherent_size < total_size)\n-    adjust += (total_size - inherent_size);\n-\n+  adjust += subreg_size_lowpart_offset (inherent_size, total_size);\n   x = adjust_address_nv (x, GET_MODE (regno_reg_rtx[i]), adjust);\n \n   /* Set all of the memory attributes as appropriate for a spill.  */"}, {"sha": "b80019b5be0d8761a59234a940f8e54f7a9136e2", "filename": "gcc/regcprop.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e10326ff910ab337741d0781a536435d51c5f044/gcc%2Fregcprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e10326ff910ab337741d0781a536435d51c5f044/gcc%2Fregcprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregcprop.c?ref=e10326ff910ab337741d0781a536435d51c5f044", "patch": "@@ -407,13 +407,9 @@ maybe_mode_change (machine_mode orig_mode, machine_mode copy_mode,\n       int use_nregs = hard_regno_nregs (copy_regno, new_mode);\n       int copy_offset\n \t= GET_MODE_SIZE (copy_mode) / copy_nregs * (copy_nregs - use_nregs);\n-      int offset\n-\t= GET_MODE_SIZE (orig_mode) - GET_MODE_SIZE (new_mode) - copy_offset;\n-      int byteoffset = offset % UNITS_PER_WORD;\n-      int wordoffset = offset - byteoffset;\n-\n-      offset = ((WORDS_BIG_ENDIAN ? wordoffset : 0)\n-\t\t+ (BYTES_BIG_ENDIAN ? byteoffset : 0));\n+      unsigned int offset\n+\t= subreg_size_lowpart_offset (GET_MODE_SIZE (new_mode) + copy_offset,\n+\t\t\t\t      GET_MODE_SIZE (orig_mode));\n       regno += subreg_regno_offset (regno, orig_mode, offset, new_mode);\n       if (targetm.hard_regno_mode_ok (regno, new_mode))\n \treturn gen_raw_REG (new_mode, regno);"}, {"sha": "27f37166b0354ca225468369f7199ebdb2e5ab92", "filename": "gcc/reload1.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e10326ff910ab337741d0781a536435d51c5f044/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e10326ff910ab337741d0781a536435d51c5f044/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=e10326ff910ab337741d0781a536435d51c5f044", "patch": "@@ -2251,8 +2251,7 @@ alter_reg (int i, int from_reg, bool dont_share_p)\n \n       /* On a big endian machine, the \"address\" of the slot\n \t is the address of the low part that fits its inherent mode.  */\n-      if (BYTES_BIG_ENDIAN && inherent_size < total_size)\n-\tadjust += (total_size - inherent_size);\n+      adjust += subreg_size_lowpart_offset (inherent_size, total_size);\n \n       /* If we have any adjustment to make, or if the stack slot is the\n \t wrong mode, make a new stack slot.  */"}]}