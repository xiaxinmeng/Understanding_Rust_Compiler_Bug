{"sha": "c41c1387d39f345a301dde4c414d379319d6ccc1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQxYzEzODdkMzlmMzQ1YTMwMWRkZTRjNDE0ZDM3OTMxOWQ2Y2NjMQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2008-06-01T09:47:28Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2008-06-01T09:47:28Z"}, "message": "rtl.h (emit_clobber, [...]): Declare.\n\ngcc/\n\t* rtl.h (emit_clobber, gen_clobber, emit_use, gen_use): Declare.\n\t* emit-rtl.c (emit_clobber, gen_clobber, emit_use, gen_use): New\n\tfunctions.  Do not emit uses and clobbers of CONCATs; individually\n\tuse and clobber their operands.\n\t* builtins.c (expand_builtin_setjmp_receiver): Use emit_clobber,\n\tgen_clobber, emit_use and gen_use.\n\t(expand_builtin_longjmp, expand_builtin_nonlocal_goto): Likewise.\n\t(expand_builtin_return): Likewise.\n\t* cfgbuild.c (count_basic_blocks): Likewise.\n\t* cfgrtl.c (rtl_flow_call_edges_add): Likewise.\n\t* explow.c (emit_stack_restore): Likewise.\n\t* expmed.c (extract_bit_field_1): Likewise.\n\t* expr.c (convert_move, emit_move_complex_parts): Likewise.\n\t(emit_move_multi_word, store_constructor): Likewise.\n\t* function.c (do_clobber_return_reg, do_use_return_reg): Likewise.\n\t(thread_prologue_and_epilogue_insns): Likewise.\n\t* lower-subreg.c (resolve_simple_move): Likewise.\n\t* optabs.c (widen_operand, expand_binop): Likewise.\n\t(expand_doubleword_bswap, emit_no_conflict_block): Likewise.\n\t* reload.c (find_reloads): Likewise.\n\t* reload1.c (eliminate_regs_in_insn): Likewise.\n\t* stmt.c (expand_nl_goto_receiver): Likewise.\n\t* config/alpha/alpha.md (builtin_longjmp): Likewise.\n\t* config/arc/arc.md (*movdi_insn, *movdf_insn): Likewise.\n\t* config/arm/arm.c (arm_load_pic_register): Likewise.\n\t(thumb1_expand_epilogue, thumb_set_return_address): Likewise.\n\t* config/arm/arm.md (untyped_return): Likewise.\n\t* config/arm/linux-elf.h (PROFILE_HOOK): Likewise.\n\t* config/avr/avr.c (expand_prologue): Likewise.\n\t* config/bfin/bfin.c (do_unlink): Likewise.\n\t* config/bfin/bfin.md (<optab>di3, adddi3, subdi3): Likewise.\n\t* config/cris/cris.c (cris_expand_prologue): Likewise.\n\t* config/darwin.c (machopic_indirect_data_reference): Likewise.\n\t(machopic_legitimize_pic_address): Likewise.\n\t* config/frv/frv.c (frv_frame_access, frv_expand_epilogue): Likewise.\n\t(frv_ifcvt_modify_insn, frv_expand_mdpackh_builtin): Likewise.\n\t* config/i386/i386.c (ix86_expand_vector_move_misalign): Likewise.\n\t(ix86_expand_convert_uns_didf_sse): Likewise.\n\t(ix86_expand_vector_init_general): Likewise.\n\t* config/ia64/ia64.md (eh_epilogue): Likewise.\n\t* config/iq2000/iq2000.c (iq2000_expand_epilogue): Likewise.\n\t* config/m32c/m32c.c (m32c_emit_eh_epilogue): Likewise.\n\t* config/m32r/m32r.c (m32r_reload_lr): Likewise.\n\t(config/iq2000/iq2000.c): Likewise.\n\t* config/mips/mips.md (fixuns_truncdfsi2): Likewise.\n\t(fixuns_truncdfdi2, fixuns_truncsfsi2, fixuns_truncsfdi2): Likewise.\n\t(builtin_longjmp): Likewise.\n\t* config/mn10300/mn10300.md (call, call_value): Likewise.\n\t* config/pa/pa.md (nonlocal_goto, nonlocal_longjmp): Likewise.\n\t* config/pdp11/pdp11.md (abshi2): Likewise.\n\t* config/rs6000/rs6000.c (rs6000_emit_move): Likewise.\n\t* config/s390/s390.c (s390_emit_prologue): Likewise.\n\t* config/s390/s390.md (movmem_long, setmem_long): Likewise.\n\t(cmpmem_long, extendsidi2, zero_extendsidi2, udivmoddi4): Likewise.\n\t(builtin_setjmp_receiver, restore_stack_nonlocal): Likewise.\n\t* config/sh/sh.c (prepare_move_operands): Likewise.\n\t(output_stack_adjust, sh_expand_epilogue): Likewise.\n\t(sh_set_return_address, sh_expand_t_scc): Likewise.\n\t* config/sparc/sparc.c (load_pic_register): Likewise.\n\t* config/sparc/sparc.md (untyped_return, nonlocal_goto): Likewise.\n\t* config/spu/spu.c (spu_expand_epilogue): Likewise.\n\t* config/v850/v850.c (expand_epilogue): Likewise.\n\nFrom-SVN: r136251", "tree": {"sha": "37c8032992aa66cf0017e07e121f03c775ad12a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37c8032992aa66cf0017e07e121f03c775ad12a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c41c1387d39f345a301dde4c414d379319d6ccc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c41c1387d39f345a301dde4c414d379319d6ccc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c41c1387d39f345a301dde4c414d379319d6ccc1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c41c1387d39f345a301dde4c414d379319d6ccc1/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d2d586f929bf0aa50868ac9a6393efddb2b89eb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2d586f929bf0aa50868ac9a6393efddb2b89eb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2d586f929bf0aa50868ac9a6393efddb2b89eb7"}], "stats": {"total": 391, "additions": 243, "deletions": 148}, "files": [{"sha": "e990443a4bcf54e0a77adaa44eb9ec49e6f91ade", "filename": "gcc/ChangeLog", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c41c1387d39f345a301dde4c414d379319d6ccc1", "patch": "@@ -1,3 +1,68 @@\n+2008-06-01  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* rtl.h (emit_clobber, gen_clobber, emit_use, gen_use): Declare.\n+\t* emit-rtl.c (emit_clobber, gen_clobber, emit_use, gen_use): New\n+\tfunctions.  Do not emit uses and clobbers of CONCATs; individually\n+\tuse and clobber their operands.\n+\t* builtins.c (expand_builtin_setjmp_receiver): Use emit_clobber,\n+\tgen_clobber, emit_use and gen_use.\n+\t(expand_builtin_longjmp, expand_builtin_nonlocal_goto): Likewise.\n+\t(expand_builtin_return): Likewise.\n+\t* cfgbuild.c (count_basic_blocks): Likewise.\n+\t* cfgrtl.c (rtl_flow_call_edges_add): Likewise.\n+\t* explow.c (emit_stack_restore): Likewise.\n+\t* expmed.c (extract_bit_field_1): Likewise.\n+\t* expr.c (convert_move, emit_move_complex_parts): Likewise.\n+\t(emit_move_multi_word, store_constructor): Likewise.\n+\t* function.c (do_clobber_return_reg, do_use_return_reg): Likewise.\n+\t(thread_prologue_and_epilogue_insns): Likewise.\n+\t* lower-subreg.c (resolve_simple_move): Likewise.\n+\t* optabs.c (widen_operand, expand_binop): Likewise.\n+\t(expand_doubleword_bswap, emit_no_conflict_block): Likewise.\n+\t* reload.c (find_reloads): Likewise.\n+\t* reload1.c (eliminate_regs_in_insn): Likewise.\n+\t* stmt.c (expand_nl_goto_receiver): Likewise.\n+\t* config/alpha/alpha.md (builtin_longjmp): Likewise.\n+\t* config/arc/arc.md (*movdi_insn, *movdf_insn): Likewise.\n+\t* config/arm/arm.c (arm_load_pic_register): Likewise.\n+\t(thumb1_expand_epilogue, thumb_set_return_address): Likewise.\n+\t* config/arm/arm.md (untyped_return): Likewise.\n+\t* config/arm/linux-elf.h (PROFILE_HOOK): Likewise.\n+\t* config/avr/avr.c (expand_prologue): Likewise.\n+\t* config/bfin/bfin.c (do_unlink): Likewise.\n+\t* config/bfin/bfin.md (<optab>di3, adddi3, subdi3): Likewise.\n+\t* config/cris/cris.c (cris_expand_prologue): Likewise.\n+\t* config/darwin.c (machopic_indirect_data_reference): Likewise.\n+\t(machopic_legitimize_pic_address): Likewise.\n+\t* config/frv/frv.c (frv_frame_access, frv_expand_epilogue): Likewise.\n+\t(frv_ifcvt_modify_insn, frv_expand_mdpackh_builtin): Likewise.\n+\t* config/i386/i386.c (ix86_expand_vector_move_misalign): Likewise.\n+\t(ix86_expand_convert_uns_didf_sse): Likewise.\n+\t(ix86_expand_vector_init_general): Likewise.\n+\t* config/ia64/ia64.md (eh_epilogue): Likewise.\n+\t* config/iq2000/iq2000.c (iq2000_expand_epilogue): Likewise.\n+\t* config/m32c/m32c.c (m32c_emit_eh_epilogue): Likewise.\n+\t* config/m32r/m32r.c (m32r_reload_lr): Likewise.\n+\t(config/iq2000/iq2000.c): Likewise.\n+\t* config/mips/mips.md (fixuns_truncdfsi2): Likewise.\n+\t(fixuns_truncdfdi2, fixuns_truncsfsi2, fixuns_truncsfdi2): Likewise.\n+\t(builtin_longjmp): Likewise.\n+\t* config/mn10300/mn10300.md (call, call_value): Likewise.\n+\t* config/pa/pa.md (nonlocal_goto, nonlocal_longjmp): Likewise.\n+\t* config/pdp11/pdp11.md (abshi2): Likewise.\n+\t* config/rs6000/rs6000.c (rs6000_emit_move): Likewise.\n+\t* config/s390/s390.c (s390_emit_prologue): Likewise.\n+\t* config/s390/s390.md (movmem_long, setmem_long): Likewise.\n+\t(cmpmem_long, extendsidi2, zero_extendsidi2, udivmoddi4): Likewise.\n+\t(builtin_setjmp_receiver, restore_stack_nonlocal): Likewise.\n+\t* config/sh/sh.c (prepare_move_operands): Likewise.\n+\t(output_stack_adjust, sh_expand_epilogue): Likewise.\n+\t(sh_set_return_address, sh_expand_t_scc): Likewise.\n+\t* config/sparc/sparc.c (load_pic_register): Likewise.\n+\t* config/sparc/sparc.md (untyped_return, nonlocal_goto): Likewise.\n+\t* config/spu/spu.c (spu_expand_epilogue): Likewise.\n+\t* config/v850/v850.c (expand_epilogue): Likewise.\n+\n 2008-05-31  Anatoly Sokolov  <aesok@post.ru>\n \n \t* config/avr/avr.md (UNSPECV_WRITE_SP_IRQ_ON): New constants."}, {"sha": "05eb6bbdd985c975a6303e8b2d1093fb36c22bbb", "filename": "gcc/builtins.c", "status": "modified", "additions": 13, "deletions": 22, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=c41c1387d39f345a301dde4c414d379319d6ccc1", "patch": "@@ -708,11 +708,11 @@ expand_builtin_setjmp_receiver (rtx receiver_label ATTRIBUTE_UNUSED)\n {\n   /* Clobber the FP when we get here, so we have to make sure it's\n      marked as used by this function.  */\n-  emit_insn (gen_rtx_USE (VOIDmode, hard_frame_pointer_rtx));\n+  emit_use (hard_frame_pointer_rtx);\n \n   /* Mark the static chain as clobbered here so life information\n      doesn't get messed up for it.  */\n-  emit_insn (gen_rtx_CLOBBER (VOIDmode, static_chain_rtx));\n+  emit_clobber (static_chain_rtx);\n \n   /* Now put in the code to restore the frame pointer, and argument\n      pointer, if needed.  */\n@@ -723,7 +723,7 @@ expand_builtin_setjmp_receiver (rtx receiver_label ATTRIBUTE_UNUSED)\n       emit_move_insn (virtual_stack_vars_rtx, hard_frame_pointer_rtx);\n       /* This might change the hard frame pointer in ways that aren't\n \t apparent to early optimization passes, so force a clobber.  */\n-      emit_insn (gen_rtx_CLOBBER (VOIDmode, hard_frame_pointer_rtx));\n+      emit_clobber (hard_frame_pointer_rtx);\n     }\n \n #if ARG_POINTER_REGNUM != HARD_FRAME_POINTER_REGNUM\n@@ -822,18 +822,14 @@ expand_builtin_longjmp (rtx buf_addr, rtx value)\n \t{\n \t  lab = copy_to_reg (lab);\n \n-\t  emit_insn (gen_rtx_CLOBBER (VOIDmode,\n-\t\t\t\t      gen_rtx_MEM (BLKmode,\n-\t\t\t\t\t\t   gen_rtx_SCRATCH (VOIDmode))));\n-\t  emit_insn (gen_rtx_CLOBBER (VOIDmode,\n-\t\t\t\t      gen_rtx_MEM (BLKmode,\n-\t\t\t\t\t\t   hard_frame_pointer_rtx)));\n+\t  emit_clobber (gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (VOIDmode)));\n+\t  emit_clobber (gen_rtx_MEM (BLKmode, hard_frame_pointer_rtx));\n \n \t  emit_move_insn (hard_frame_pointer_rtx, fp);\n \t  emit_stack_restore (SAVE_NONLOCAL, stack, NULL_RTX);\n \n-\t  emit_insn (gen_rtx_USE (VOIDmode, hard_frame_pointer_rtx));\n-\t  emit_insn (gen_rtx_USE (VOIDmode, stack_pointer_rtx));\n+\t  emit_use (hard_frame_pointer_rtx);\n+\t  emit_use (stack_pointer_rtx);\n \t  emit_indirect_jump (lab);\n \t}\n     }\n@@ -892,13 +888,8 @@ expand_builtin_nonlocal_goto (tree exp)\n     {\n       r_label = copy_to_reg (r_label);\n \n-      emit_insn (gen_rtx_CLOBBER (VOIDmode,\n-\t\t\t\t  gen_rtx_MEM (BLKmode,\n-\t\t\t\t\t       gen_rtx_SCRATCH (VOIDmode))));\n-\n-      emit_insn (gen_rtx_CLOBBER (VOIDmode,\n-\t\t\t\t  gen_rtx_MEM (BLKmode,\n-\t\t\t\t\t       hard_frame_pointer_rtx)));\n+      emit_clobber (gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (VOIDmode)));\n+      emit_clobber (gen_rtx_MEM (BLKmode, hard_frame_pointer_rtx));\n \n       /* Restore frame pointer for containing function.\n \t This sets the actual hard register used for the frame pointer\n@@ -910,8 +901,8 @@ expand_builtin_nonlocal_goto (tree exp)\n \n       /* USE of hard_frame_pointer_rtx added for consistency;\n \t not clear if really needed.  */\n-      emit_insn (gen_rtx_USE (VOIDmode, hard_frame_pointer_rtx));\n-      emit_insn (gen_rtx_USE (VOIDmode, stack_pointer_rtx));\n+      emit_use (hard_frame_pointer_rtx);\n+      emit_use (stack_pointer_rtx);\n \n       /* If the architecture is using a GP register, we must\n \t conservatively assume that the target function makes use of it.\n@@ -924,7 +915,7 @@ expand_builtin_nonlocal_goto (tree exp)\n \t a no-op if the GP register is a global invariant.)  */\n       if ((unsigned) PIC_OFFSET_TABLE_REGNUM != INVALID_REGNUM\n \t  && fixed_regs[PIC_OFFSET_TABLE_REGNUM])\n-\temit_insn (gen_rtx_USE (VOIDmode, pic_offset_table_rtx));\n+\temit_use (pic_offset_table_rtx);\n \n       emit_indirect_jump (r_label);\n     }\n@@ -1602,7 +1593,7 @@ expand_builtin_return (rtx result)\n \temit_move_insn (reg, adjust_address (result, mode, size));\n \n \tpush_to_sequence (call_fusage);\n-\temit_insn (gen_rtx_USE (VOIDmode, reg));\n+\temit_use (reg);\n \tcall_fusage = get_insns ();\n \tend_sequence ();\n \tsize += GET_MODE_SIZE (mode);"}, {"sha": "3b9c6faef8e504d4da16218872bfad667b35aff3", "filename": "gcc/cfgbuild.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fcfgbuild.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fcfgbuild.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgbuild.c?ref=c41c1387d39f345a301dde4c414d379319d6ccc1", "patch": "@@ -170,7 +170,7 @@ count_basic_blocks (const_rtx f)\n      check for the edge case of do-nothing functions with no basic blocks.  */\n   if (count == NUM_FIXED_BLOCKS)\n     {\n-      emit_insn (gen_rtx_USE (VOIDmode, const0_rtx));\n+      emit_use (const0_rtx);\n       count = NUM_FIXED_BLOCKS + 1;\n     }\n "}, {"sha": "8ce39006cf346167e92a7eb530cf765625c3ad45", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=c41c1387d39f345a301dde4c414d379319d6ccc1", "patch": "@@ -2809,7 +2809,7 @@ rtl_flow_call_edges_add (sbitmap blocks)\n \t  e = find_edge (bb, EXIT_BLOCK_PTR);\n \t  if (e)\n \t    {\n-\t      insert_insn_on_edge (gen_rtx_USE (VOIDmode, const0_rtx), e);\n+\t      insert_insn_on_edge (gen_use (const0_rtx), e);\n \t      commit_edge_insertions ();\n \t    }\n \t}"}, {"sha": "fed9efee89eb0cb308ccfbb9feeeac5c234c6681", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=c41c1387d39f345a301dde4c414d379319d6ccc1", "patch": "@@ -6948,8 +6948,8 @@\n   emit_move_insn (hard_frame_pointer_rtx, fp);\n   emit_move_insn (pv, lab);\n   emit_stack_restore (SAVE_NONLOCAL, stack, NULL_RTX);\n-  emit_insn (gen_rtx_USE (VOIDmode, hard_frame_pointer_rtx));\n-  emit_insn (gen_rtx_USE (VOIDmode, stack_pointer_rtx));\n+  emit_use (hard_frame_pointer_rtx);\n+  emit_use (stack_pointer_rtx);\n \n   /* Load the label we are jumping through into $27 so that we know\n      where to look for it when we get back to setjmp's function for"}, {"sha": "da435941427f742622dc4c04dac3d7f842b0c51b", "filename": "gcc/config/arc/arc.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fconfig%2Farc%2Farc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fconfig%2Farc%2Farc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.md?ref=c41c1387d39f345a301dde4c414d379319d6ccc1", "patch": "@@ -313,7 +313,7 @@\n ;{\n ;  /* Flow doesn't understand that this is effectively a DFmode move.\n ;     It doesn't know that all of `operands[0]' is set.  */\n-;  emit_insn (gen_rtx_CLOBBER (VOIDmode, operands[0]));\n+;  emit_clobber (operands[0]);\n ;\n ;  /* Emit insns that movsi_insn can handle.  */\n ;  emit_insn (gen_movsi (operand_subword (operands[0], 0, 0, DImode),\n@@ -406,7 +406,7 @@\n ;{\n ;  /* Flow doesn't understand that this is effectively a DFmode move.\n ;     It doesn't know that all of `operands[0]' is set.  */\n-;  emit_insn (gen_rtx_CLOBBER (VOIDmode, operands[0]));\n+;  emit_clobber (operands[0]);\n ;\n ;  /* Emit insns that movsi_insn can handle.  */\n ;  emit_insn (gen_movsi (operand_subword (operands[0], 0, 0, DFmode),"}, {"sha": "e1ec23b3862c13608420ab4d51c60a79e9dc29bc", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=c41c1387d39f345a301dde4c414d379319d6ccc1", "patch": "@@ -3693,7 +3693,7 @@ arm_load_pic_register (unsigned long saved_regs ATTRIBUTE_UNUSED)\n \n   /* Need to emit this whether or not we obey regdecls,\n      since setjmp/longjmp can cause life info to screw up.  */\n-  emit_insn (gen_rtx_USE (VOIDmode, pic_reg));\n+  emit_use (pic_reg);\n }\n \n \n@@ -17064,10 +17064,10 @@ thumb1_expand_epilogue (void)\n      so that flow2 will get register lifetimes correct.  */\n   for (regno = 0; regno < 13; regno++)\n     if (df_regs_ever_live_p (regno) && !call_used_regs[regno])\n-      emit_insn (gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (SImode, regno)));\n+      emit_clobber (gen_rtx_REG (SImode, regno));\n \n   if (! df_regs_ever_live_p (LR_REGNUM))\n-    emit_insn (gen_rtx_USE (VOIDmode, gen_rtx_REG (SImode, LR_REGNUM)));\n+    emit_use (gen_rtx_REG (SImode, LR_REGNUM));\n }\n \n static void\n@@ -18329,7 +18329,7 @@ thumb_set_return_address (rtx source, rtx scratch)\n   rtx addr;\n   unsigned long mask;\n \n-  emit_insn (gen_rtx_USE (VOIDmode, source));\n+  emit_use (source);\n \n   offsets = arm_get_frame_offsets ();\n   mask = offsets->saved_regs_mask;"}, {"sha": "9cd6e7262a25155d38d9a06e9f2d85bc611f8369", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=c41c1387d39f345a301dde4c414d379319d6ccc1", "patch": "@@ -8785,8 +8785,7 @@\n \n     /* Emit USE insns before the return.  */\n     for (i = 0; i < XVECLEN (operands[1], 0); i++)\n-      emit_insn (gen_rtx_USE (VOIDmode,\n-\t\t\t      SET_DEST (XVECEXP (operands[1], 0, i))));\n+      emit_use (SET_DEST (XVECEXP (operands[1], 0, i)));\n \n     /* Construct the return.  */\n     expand_naked_return ();"}, {"sha": "7036e71f8b3cdd1ae9f1adc6171e08ec50a44ddc", "filename": "gcc/config/arm/linux-elf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fconfig%2Farm%2Flinux-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fconfig%2Farm%2Flinux-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Flinux-elf.h?ref=c41c1387d39f345a301dde4c414d379319d6ccc1", "patch": "@@ -111,7 +111,7 @@\n /* The GNU/Linux profiler clobbers the link register.  Make sure the\n    prologue knows to save it.  */\n #define PROFILE_HOOK(X)\t\t\t\t\t\t\\\n-  emit_insn (gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (SImode, LR_REGNUM)))\n+  emit_clobber (gen_rtx_REG (SImode, LR_REGNUM))\n \n /* The GNU/Linux profiler needs a frame pointer.  */\n #define SUBTARGET_FRAME_POINTER_REQUIRED crtl->profile"}, {"sha": "7135c79610a4a5e62c8eebef412c1d126f475a43", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=c41c1387d39f345a301dde4c414d379319d6ccc1", "patch": "@@ -680,7 +680,7 @@ expand_prologue (void)\n       RTX_FRAME_RELATED_P (insn) = 1;\n \n       /* Prevent any attempt to delete the setting of ZERO_REG!  */\n-      emit_insn (gen_rtx_USE (VOIDmode, zero_reg_rtx));\n+      emit_use (zero_reg_rtx);\n     }\n   if (minimize && (frame_pointer_needed \n \t\t   || (AVR_2_BYTE_PC && live_seq > 6)"}, {"sha": "a7600cf80e2ebee8a3e05c37e89879c266d359b7", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=c41c1387d39f345a301dde4c414d379319d6ccc1", "patch": "@@ -1009,12 +1009,12 @@ do_unlink (rtx spreg, HOST_WIDE_INT frame_size, bool all, int epilogue_p)\n \t{\n \t  rtx fpreg = gen_rtx_REG (Pmode, REG_FP);\n \t  emit_move_insn (fpreg, postinc);\n-\t  emit_insn (gen_rtx_USE (VOIDmode, fpreg));\n+\t  emit_use (fpreg);\n \t}\n       if (! current_function_is_leaf)\n \t{\n \t  emit_move_insn (bfin_rets_rtx, postinc);\n-\t  emit_insn (gen_rtx_USE (VOIDmode, bfin_rets_rtx));\n+\t  emit_use (bfin_rets_rtx);\n \t}\n     }\n }"}, {"sha": "1388266400bcbe2bcaa45d118dbe9d038c5d2f80", "filename": "gcc/config/bfin/bfin.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fconfig%2Fbfin%2Fbfin.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fconfig%2Fbfin%2Fbfin.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.md?ref=c41c1387d39f345a301dde4c414d379319d6ccc1", "patch": "@@ -904,7 +904,7 @@\n   enum insn_code icode = CODE_FOR_<optab>si3;\n   if (!reg_overlap_mentioned_p (operands[0], operands[1])\n       && !reg_overlap_mentioned_p (operands[0], operands[2]))\n-    emit_insn (gen_rtx_CLOBBER (VOIDmode, operands[0]));\n+    emit_clobber (operands[0]);\n   split_di (operands, 3, lo_half, hi_half);\n   if (!(*insn_data[icode].operand[2].predicate) (lo_half[2], SImode))\n     lo_half[2] = force_reg (SImode, lo_half[2]);\n@@ -1022,7 +1022,7 @@\n     xops[4] = force_reg (SImode, xops[4]);\n   if (!reg_overlap_mentioned_p (operands[0], operands[1])\n       && !reg_overlap_mentioned_p (operands[0], operands[2]))\n-    emit_insn (gen_rtx_CLOBBER (VOIDmode, operands[0]));\n+    emit_clobber (operands[0]);\n   emit_insn (gen_add_with_carry (xops[0], xops[2], xops[4], xops[7]));\n   emit_insn (gen_movbisi (xops[6], xops[7]));\n   if (!register_operand (xops[5], SImode)\n@@ -1055,7 +1055,7 @@\n   xops[7] = gen_rtx_REG (BImode, REG_CC);\n   if (!reg_overlap_mentioned_p (operands[0], operands[1])\n       && !reg_overlap_mentioned_p (operands[0], operands[2]))\n-    emit_insn (gen_rtx_CLOBBER (VOIDmode, operands[0]));\n+    emit_clobber (operands[0]);\n   emit_insn (gen_sub_with_carry (xops[0], xops[2], xops[4], xops[7]));\n   emit_insn (gen_notbi (xops[7], xops[7]));\n   emit_insn (gen_movbisi (xops[6], xops[7]));"}, {"sha": "810366f5681368a9f76281f38272c200e7b9fa1b", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=c41c1387d39f345a301dde4c414d379319d6ccc1", "patch": "@@ -3002,7 +3002,7 @@ cris_expand_prologue (void)\n \t the GOT register load as maybe-dead.  To see this, remove the\n \t line below and try libsupc++/vec.cc or a trivial\n \t \"static void y (); void x () {try {y ();} catch (...) {}}\".  */\n-      emit_insn (gen_rtx_USE (VOIDmode, pic_offset_table_rtx));\n+      emit_use (pic_offset_table_rtx);\n     }\n \n   if (cris_max_stackframe && framesize > cris_max_stackframe)"}, {"sha": "5461fe083e0e61052400701177a44704955e0c72", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=c41c1387d39f345a301dde4c414d379319d6ccc1", "patch": "@@ -555,7 +555,7 @@ machopic_indirect_data_reference (rtx orig, rtx reg)\n \t  emit_insn (gen_rtx_SET (VOIDmode, reg,\n \t\t\t\t  gen_rtx_LO_SUM (Pmode, reg,\n \t\t\t\t\t\t  copy_rtx (offset))));\n-\t  emit_insn (gen_rtx_USE (VOIDmode, pic_offset_table_rtx));\n+\t  emit_use (pic_offset_table_rtx);\n \n \t  orig = gen_rtx_PLUS (Pmode, pic_offset_table_rtx, reg);\n #endif\n@@ -756,9 +756,7 @@ machopic_legitimize_pic_address (rtx orig, enum machine_mode mode, rtx reg)\n \n \t      pic_ref = reg;\n #else\n-\t      emit_insn (gen_rtx_USE (VOIDmode,\n-\t\t\t\t      gen_rtx_REG (Pmode,\n-\t\t\t\t\t\t   PIC_OFFSET_TABLE_REGNUM)));\n+\t      emit_use (gen_rtx_REG (Pmode, PIC_OFFSET_TABLE_REGNUM));\n \n \t      emit_insn (gen_rtx_SET (VOIDmode, reg,\n \t\t\t\t      gen_rtx_HIGH (Pmode,\n@@ -782,9 +780,7 @@ machopic_legitimize_pic_address (rtx orig, enum machine_mode mode, rtx reg)\n \t\t  pic = reg;\n \t\t}\n #if 0\n-\t      emit_insn (gen_rtx_USE (VOIDmode,\n-\t\t\t\t      gen_rtx_REG (Pmode,\n-\t\t\t\t\t\t   PIC_OFFSET_TABLE_REGNUM)));\n+\t      emit_use (gen_rtx_REG (Pmode, PIC_OFFSET_TABLE_REGNUM));\n #endif\n \n \t      if (reload_in_progress)\n@@ -857,8 +853,7 @@ machopic_legitimize_pic_address (rtx orig, enum machine_mode mode, rtx reg)\n \t\t      pic = reg;\n \t\t    }\n #if 0\n-\t\t  emit_insn (gen_rtx_USE (VOIDmode,\n-\t\t\t\t\t  pic_offset_table_rtx));\n+\t\t  emit_use (pic_offset_table_rtx);\n #endif\n \t\t  if (reload_in_progress)\n \t\t    df_set_regs_ever_live (REGNO (pic), true);"}, {"sha": "93648ccf39d2581a676d0505c55d6835e8020de8", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=c41c1387d39f345a301dde4c414d379319d6ccc1", "patch": "@@ -1682,7 +1682,7 @@ frv_frame_access (frv_frame_accessor_t *accessor, rtx reg, int stack_offset)\n \t}\n       else\n \temit_insn (gen_rtx_SET (VOIDmode, reg, mem));\n-      emit_insn (gen_rtx_USE (VOIDmode, reg));\n+      emit_use (reg);\n     }\n   else\n     {\n@@ -1946,7 +1946,7 @@ frv_expand_epilogue (bool emit_return)\n   if (frame_pointer_needed)\n     {\n       emit_insn (gen_rtx_SET (VOIDmode, fp, gen_rtx_MEM (Pmode, fp)));\n-      emit_insn (gen_rtx_USE (VOIDmode, fp));\n+      emit_use (fp);\n     }\n \n   /* Deallocate the stack frame.  */\n@@ -1972,7 +1972,7 @@ frv_expand_epilogue (bool emit_return)\n \t  emit_move_insn (lr, return_addr);\n \t}\n \n-      emit_insn (gen_rtx_USE (VOIDmode, lr));\n+      emit_use (lr);\n     }\n }\n \n@@ -5999,7 +5999,7 @@ frv_ifcvt_modify_insn (ce_if_block_t *ce_info,\n \t\tgoto fail;\n \t    }\n \n-\t  frv_ifcvt_add_insn (gen_rtx_USE (VOIDmode, dest), insn, FALSE);\n+\t  frv_ifcvt_add_insn (gen_use (dest), insn, FALSE);\n \t}\n \n       /* If we are just loading a constant created for a nested conditional\n@@ -9099,8 +9099,8 @@ frv_expand_mdpackh_builtin (tree call, rtx target)\n \n   /* The high half of each word is not explicitly initialized, so indicate\n      that the input operands are not live before this point.  */\n-  emit_insn (gen_rtx_CLOBBER (DImode, op0));\n-  emit_insn (gen_rtx_CLOBBER (DImode, op1));\n+  emit_clobber (op0);\n+  emit_clobber (op1);\n \n   /* Move each argument into the low half of its associated input word.  */\n   emit_move_insn (simplify_gen_subreg (HImode, op0, DImode, 2), arg1);"}, {"sha": "16e74228ddf35d2589aa21da1ed6092d3eef3cec", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=c41c1387d39f345a301dde4c414d379319d6ccc1", "patch": "@@ -10549,7 +10549,7 @@ ix86_expand_vector_move_misalign (enum machine_mode mode, rtx operands[])\n \t     writing to the top half twice.  */\n \t  if (TARGET_SSE_SPLIT_REGS)\n \t    {\n-\t      emit_insn (gen_rtx_CLOBBER (VOIDmode, op0));\n+\t      emit_clobber (op0);\n \t      zero = op0;\n \t    }\n \t  else\n@@ -10583,7 +10583,7 @@ ix86_expand_vector_move_misalign (enum machine_mode mode, rtx operands[])\n \t  if (TARGET_SSE_PARTIAL_REG_DEPENDENCY)\n \t    emit_move_insn (op0, CONST0_RTX (mode));\n \t  else\n-\t    emit_insn (gen_rtx_CLOBBER (VOIDmode, op0));\n+\t    emit_clobber (op0);\n \n \t  if (mode != V4SFmode)\n \t    op0 = gen_lowpart (V4SFmode, op0);\n@@ -10976,7 +10976,7 @@ ix86_expand_convert_uns_didf_sse (rtx target, rtx input)\n     emit_insn (gen_movdi_to_sse (int_xmm, input));\n   else if (TARGET_SSE_SPLIT_REGS)\n     {\n-      emit_insn (gen_rtx_CLOBBER (VOIDmode, int_xmm));\n+      emit_clobber (int_xmm);\n       emit_move_insn (gen_lowpart (DImode, int_xmm), input);\n     }\n   else\n@@ -24184,7 +24184,7 @@ ix86_expand_vector_init_general (bool mmx_ok, enum machine_mode mode,\n       else if (n_words == 2)\n \t{\n \t  rtx tmp = gen_reg_rtx (mode);\n-\t  emit_insn (gen_rtx_CLOBBER (VOIDmode, tmp));\n+\t  emit_clobber (tmp);\n \t  emit_move_insn (gen_lowpart (word_mode, tmp), words[0]);\n \t  emit_move_insn (gen_highpart (word_mode, tmp), words[1]);\n \t  emit_move_insn (target, tmp);"}, {"sha": "cf746f52b68f921b50ff000c068dcc59f5250111", "filename": "gcc/config/ia64/ia64.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fconfig%2Fia64%2Fia64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fconfig%2Fia64%2Fia64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.md?ref=c41c1387d39f345a301dde4c414d379319d6ccc1", "patch": "@@ -6332,8 +6332,8 @@\n       emit_move_insn (sp, operands[2]);\n       operands[2] = sp;\n     }\n-  emit_insn (gen_rtx_USE (VOIDmode, sp));\n-  emit_insn (gen_rtx_USE (VOIDmode, bsp));\n+  emit_use (sp);\n+  emit_use (bsp);\n \n   cfun->machine->ia64_eh_epilogue_sp = sp;\n   cfun->machine->ia64_eh_epilogue_bsp = bsp;"}, {"sha": "2d20a4ba4c2ce00ad02edaa09c849e9330a310f1", "filename": "gcc/config/iq2000/iq2000.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.c?ref=c41c1387d39f345a301dde4c414d379319d6ccc1", "patch": "@@ -2085,8 +2085,7 @@ iq2000_expand_epilogue (void)\n       /* Perform the additional bump for __throw.  */\n       emit_move_insn (gen_rtx_REG (Pmode, HARD_FRAME_POINTER_REGNUM),\n \t\t      stack_pointer_rtx);\n-      emit_insn (gen_rtx_USE (VOIDmode, gen_rtx_REG (Pmode,\n-\t\t\t\t\t\t  HARD_FRAME_POINTER_REGNUM)));\n+      emit_use (gen_rtx_REG (Pmode, HARD_FRAME_POINTER_REGNUM));\n       emit_jump_insn (gen_eh_return_internal ());\n     }\n   else"}, {"sha": "b0733dd83645c79679590bc14440cf1a2184eea2", "filename": "gcc/config/m32c/m32c.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fconfig%2Fm32c%2Fm32c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fconfig%2Fm32c%2Fm32c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.c?ref=c41c1387d39f345a301dde4c414d379319d6ccc1", "patch": "@@ -4079,7 +4079,7 @@ m32c_emit_eh_epilogue (rtx ret_addr)\n      (fudged), and return (fudged).  This is actually easier to do in\n      assembler, so punt to libgcc.  */\n   emit_jump_insn (gen_eh_epilogue (ret_addr, cfun->machine->eh_stack_adjust));\n-  /*  emit_insn (gen_rtx_CLOBBER (HImode, gen_rtx_REG (HImode, R0L_REGNO))); */\n+  /*  emit_clobber (gen_rtx_REG (HImode, R0L_REGNO)); */\n   emit_barrier ();\n }\n "}, {"sha": "23e7851b16036c5c2c2f66ee2fa0f6a19cb531e8", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=c41c1387d39f345a301dde4c414d379319d6ccc1", "patch": "@@ -1349,7 +1349,7 @@ m32r_reload_lr (rtx sp, int size)\n       emit_insn (gen_movsi (lr, gen_frame_mem (Pmode, tmp)));\n     }\n \n-  emit_insn (gen_rtx_USE (VOIDmode, lr));\n+  emit_use (lr);\n }\n \n void\n@@ -1361,7 +1361,7 @@ m32r_load_pic_register (void)\n \n   /* Need to emit this whether or not we obey regdecls,\n      since setjmp/longjmp can cause life info to screw up.  */\n-  emit_insn (gen_rtx_USE (VOIDmode, pic_offset_table_rtx));\n+  emit_use (pic_offset_table_rtx);\n }\n \n /* Expand the m32r prologue as a series of insns.  */"}, {"sha": "921e416bd0ef033395bd8d7b2eabbd8ae7965b07", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=c41c1387d39f345a301dde4c414d379319d6ccc1", "patch": "@@ -2912,7 +2912,7 @@\n \n       /* Allow REG_NOTES to be set on last insn (labels don't have enough\n \t fields, and can't be used for REG_NOTES anyway).  */\n-      emit_insn (gen_rtx_USE (VOIDmode, stack_pointer_rtx));\n+      emit_use (stack_pointer_rtx);\n       DONE;\n     }\n })\n@@ -2955,7 +2955,7 @@\n \n   /* Allow REG_NOTES to be set on last insn (labels don't have enough\n      fields, and can't be used for REG_NOTES anyway).  */\n-  emit_insn (gen_rtx_USE (VOIDmode, stack_pointer_rtx));\n+  emit_use (stack_pointer_rtx);\n   DONE;\n })\n \n@@ -2997,7 +2997,7 @@\n \n   /* Allow REG_NOTES to be set on last insn (labels don't have enough\n      fields, and can't be used for REG_NOTES anyway).  */\n-  emit_insn (gen_rtx_USE (VOIDmode, stack_pointer_rtx));\n+  emit_use (stack_pointer_rtx);\n   DONE;\n })\n \n@@ -3039,7 +3039,7 @@\n \n   /* Allow REG_NOTES to be set on last insn (labels don't have enough\n      fields, and can't be used for REG_NOTES anyway).  */\n-  emit_insn (gen_rtx_USE (VOIDmode, stack_pointer_rtx));\n+  emit_use (stack_pointer_rtx);\n   DONE;\n })\n \f\n@@ -5685,9 +5685,9 @@\n   mips_emit_move (pv, lab);\n   emit_stack_restore (SAVE_NONLOCAL, stack, NULL_RTX);\n   mips_emit_move (gp, gpv);\n-  emit_insn (gen_rtx_USE (VOIDmode, hard_frame_pointer_rtx));\n-  emit_insn (gen_rtx_USE (VOIDmode, stack_pointer_rtx));\n-  emit_insn (gen_rtx_USE (VOIDmode, gp));\n+  emit_use (hard_frame_pointer_rtx);\n+  emit_use (stack_pointer_rtx);\n+  emit_use (gp);\n   emit_indirect_jump (pv);\n   DONE;\n })"}, {"sha": "73043e99b1a732dd78a0f6fb354d764577eb2263", "filename": "gcc/config/mn10300/mn10300.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fconfig%2Fmn10300%2Fmn10300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fconfig%2Fmn10300%2Fmn10300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.md?ref=c41c1387d39f345a301dde4c414d379319d6ccc1", "patch": "@@ -1807,7 +1807,7 @@\n \t     shared library support for AM30 either, so we just assume\n \t     the linker is going to adjust all @PLT relocs to the\n \t     actual symbols.  */\n-\t  emit_insn (gen_rtx_USE (VOIDmode, pic_offset_table_rtx));\n+\t  emit_use (pic_offset_table_rtx);\n \t  XEXP (operands[0], 0) = gen_sym2PLT (XEXP (operands[0], 0));\n \t}\n       else\n@@ -1852,7 +1852,7 @@\n \t     shared library support for AM30 either, so we just assume\n \t     the linker is going to adjust all @PLT relocs to the\n \t     actual symbols.  */\n-\t  emit_insn (gen_rtx_USE (VOIDmode, pic_offset_table_rtx));\n+\t  emit_use (pic_offset_table_rtx);\n \t  XEXP (operands[1], 0) = gen_sym2PLT (XEXP (operands[1], 0));\n \t}\n       else"}, {"sha": "c3d686db5c420c33caf68d78e695dad43973e802", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=c41c1387d39f345a301dde4c414d379319d6ccc1", "patch": "@@ -7432,12 +7432,8 @@\n \n   lab = copy_to_reg (lab);\n \n-  emit_insn (gen_rtx_CLOBBER (VOIDmode,\n-\t\t\t      gen_rtx_MEM (BLKmode,\n-\t\t\t\t\t   gen_rtx_SCRATCH (VOIDmode))));\n-  emit_insn (gen_rtx_CLOBBER (VOIDmode,\n-\t\t\t      gen_rtx_MEM (BLKmode,\n-\t\t\t\t\t   hard_frame_pointer_rtx)));\n+  emit_clobber (gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (VOIDmode)));\n+  emit_clobber (gen_rtx_MEM (BLKmode, hard_frame_pointer_rtx));\n \n   /* Restore the frame pointer.  The virtual_stack_vars_rtx is saved\n      instead of the hard_frame_pointer_rtx in the save area.  As a\n@@ -7449,8 +7445,8 @@\n \n   emit_stack_restore (SAVE_NONLOCAL, stack, NULL_RTX);\n \n-  emit_insn (gen_rtx_USE (VOIDmode, hard_frame_pointer_rtx));\n-  emit_insn (gen_rtx_USE (VOIDmode, stack_pointer_rtx));\n+  emit_use (hard_frame_pointer_rtx);\n+  emit_use (stack_pointer_rtx);\n \n   /* Nonlocal goto jumps are only used between functions in the same\n      translation unit.  Thus, we can avoid the extra overhead of an\n@@ -8892,12 +8888,8 @@ add,l %2,%3,%3\\;bv,n %%r0(%3)\"\n \t\t\t   (POINTER_SIZE * 2) / BITS_PER_UNIT));\n   rtx pv = gen_rtx_REG (Pmode, 1);\n \n-  emit_insn (gen_rtx_CLOBBER (VOIDmode,\n-\t\t\t      gen_rtx_MEM (BLKmode,\n-\t\t\t\t\t   gen_rtx_SCRATCH (VOIDmode))));\n-  emit_insn (gen_rtx_CLOBBER (VOIDmode,\n-\t\t\t      gen_rtx_MEM (BLKmode,\n-\t\t\t\t\t   hard_frame_pointer_rtx)));\n+  emit_clobber (gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (VOIDmode)));\n+  emit_clobber (gen_rtx_MEM (BLKmode, hard_frame_pointer_rtx));\n \n   /* Restore the frame pointer.  The virtual_stack_vars_rtx is saved\n      instead of the hard_frame_pointer_rtx in the save area.  We need\n@@ -8913,8 +8905,8 @@ add,l %2,%3,%3\\;bv,n %%r0(%3)\"\n \n   /* This bit is the same as expand_builtin_longjmp.  */\n   emit_stack_restore (SAVE_NONLOCAL, stack, NULL_RTX);\n-  emit_insn (gen_rtx_USE (VOIDmode, hard_frame_pointer_rtx));\n-  emit_insn (gen_rtx_USE (VOIDmode, stack_pointer_rtx));\n+  emit_use (hard_frame_pointer_rtx);\n+  emit_use (stack_pointer_rtx);\n \n   /* Load the label we are jumping through into r1 so that we know\n      where to look for it when we get back to setjmp's function for"}, {"sha": "32b3e92e9c9917c51a2d7dd3a140a1b587324b8b", "filename": "gcc/config/pdp11/pdp11.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fconfig%2Fpdp11%2Fpdp11.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fconfig%2Fpdp11%2Fpdp11.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.md?ref=c41c1387d39f345a301dde4c414d379319d6ccc1", "patch": "@@ -1593,7 +1593,7 @@\n ;\n ;  /* allow REG_NOTES to be set on last insn (labels don't have enough\n ;     fields, and can't be used for REG_NOTES anyway).  */\n-;  emit_insn (gen_rtx_USE (VOIDmode, stack_pointer_rtx));\n+;  emit_use (stack_pointer_rtx);\n ;  DONE;\n ;}\")\n "}, {"sha": "197347677977d363e778dae938fd9fc5735a887b", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=c41c1387d39f345a301dde4c414d379319d6ccc1", "patch": "@@ -5000,7 +5000,7 @@ rs6000_emit_move (rtx dest, rtx source, enum machine_mode mode)\n \t     This should not be done for operands that contain LABEL_REFs.\n \t     For now, we just handle the obvious case.  */\n \t  if (GET_CODE (operands[1]) != LABEL_REF)\n-\t    emit_insn (gen_rtx_USE (VOIDmode, operands[1]));\n+\t    emit_use (operands[1]);\n \n #if TARGET_MACHO\n \t  /* Darwin uses a special PIC legitimizer.  */"}, {"sha": "ff2edecb2239fc7fbdce58e75ab7333da4826189", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=c41c1387d39f345a301dde4c414d379319d6ccc1", "patch": "@@ -7797,7 +7797,7 @@ s390_emit_prologue (void)\n       if (TARGET_BACKCHAIN && flag_non_call_exceptions)\n \t{\n \t  addr = gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (VOIDmode));\n-\t  emit_insn (gen_rtx_CLOBBER (VOIDmode, addr));\n+\t  emit_clobber (addr);\n \t}\n     }\n "}, {"sha": "d33cc5c32670e236e4a982b7d4bec7e1d86a57da", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=c41c1387d39f345a301dde4c414d379319d6ccc1", "patch": "@@ -2494,11 +2494,11 @@\n   rtx len0 = gen_lowpart (Pmode, reg0);\n   rtx len1 = gen_lowpart (Pmode, reg1);\n \n-  emit_insn (gen_rtx_CLOBBER (VOIDmode, reg0));\n+  emit_clobber (reg0);\n   emit_move_insn (addr0, force_operand (XEXP (operands[0], 0), NULL_RTX));\n   emit_move_insn (len0, operands[2]);\n \n-  emit_insn (gen_rtx_CLOBBER (VOIDmode, reg1));\n+  emit_clobber (reg1);\n   emit_move_insn (addr1, force_operand (XEXP (operands[1], 0), NULL_RTX));\n   emit_move_insn (len1, operands[2]);\n \n@@ -2694,7 +2694,7 @@\n   rtx addr0 = gen_lowpart (Pmode, gen_highpart (word_mode, reg0));\n   rtx len0 = gen_lowpart (Pmode, reg0);\n \n-  emit_insn (gen_rtx_CLOBBER (VOIDmode, reg0));\n+  emit_clobber (reg0);\n   emit_move_insn (addr0, force_operand (XEXP (operands[0], 0), NULL_RTX));\n   emit_move_insn (len0, operands[1]);\n \n@@ -2850,11 +2850,11 @@\n   rtx len0 = gen_lowpart (Pmode, reg0);\n   rtx len1 = gen_lowpart (Pmode, reg1);\n \n-  emit_insn (gen_rtx_CLOBBER (VOIDmode, reg0));\n+  emit_clobber (reg0);\n   emit_move_insn (addr0, force_operand (XEXP (operands[0], 0), NULL_RTX));\n   emit_move_insn (len0, operands[2]);\n \n-  emit_insn (gen_rtx_CLOBBER (VOIDmode, reg1));\n+  emit_clobber (reg1);\n   emit_move_insn (addr1, force_operand (XEXP (operands[1], 0), NULL_RTX));\n   emit_move_insn (len1, operands[2]);\n \n@@ -3215,7 +3215,7 @@\n {\n   if (!TARGET_64BIT)\n     {\n-      emit_insn (gen_rtx_CLOBBER (VOIDmode, operands[0]));\n+      emit_clobber (operands[0]);\n       emit_move_insn (gen_highpart (SImode, operands[0]), operands[1]);\n       emit_move_insn (gen_lowpart (SImode, operands[0]), const0_rtx);\n       emit_insn (gen_ashrdi3 (operands[0], operands[0], GEN_INT (32)));\n@@ -3365,7 +3365,7 @@\n {\n   if (!TARGET_64BIT)\n     {\n-      emit_insn (gen_rtx_CLOBBER (VOIDmode, operands[0]));\n+      emit_clobber (operands[0]);\n       emit_move_insn (gen_lowpart (SImode, operands[0]), operands[1]);\n       emit_move_insn (gen_highpart (SImode, operands[0]), const0_rtx);\n       DONE;\n@@ -5116,7 +5116,7 @@\n \t\t       gen_rtx_ZERO_EXTEND (TImode, div_equal));\n \n   operands[4] = gen_reg_rtx(TImode);\n-  emit_insn (gen_rtx_CLOBBER (VOIDmode, operands[4]));\n+  emit_clobber (operands[4]);\n   emit_move_insn (gen_lowpart (DImode, operands[4]), operands[1]);\n   emit_move_insn (gen_highpart (DImode, operands[4]), const0_rtx);\n \n@@ -5234,7 +5234,7 @@\n \t\t       gen_rtx_ZERO_EXTEND (DImode, div_equal));\n \n   operands[4] = gen_reg_rtx(DImode);\n-  emit_insn (gen_rtx_CLOBBER (VOIDmode, operands[4]));\n+  emit_clobber (operands[4]);\n   emit_move_insn (gen_lowpart (SImode, operands[4]), operands[1]);\n   emit_move_insn (gen_highpart (SImode, operands[4]), const0_rtx);\n \n@@ -8004,7 +8004,7 @@\n   \"flag_pic\"\n {\n   emit_insn (s390_load_got ());\n-  emit_insn (gen_rtx_USE (VOIDmode, pic_offset_table_rtx));\n+  emit_use (pic_offset_table_rtx);\n   DONE;\n })\n \n@@ -8087,7 +8087,7 @@\n   if (temp)\n     emit_move_insn (s390_back_chain_rtx (), temp);\n \n-  emit_insn (gen_rtx_USE (VOIDmode, base));\n+  emit_use (base);\n   DONE;\n })\n "}, {"sha": "71419ec61deb31dd01afadd6cecb9ab58711b1b2", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=c41c1387d39f345a301dde4c414d379319d6ccc1", "patch": "@@ -1371,8 +1371,7 @@ prepare_move_operands (rtx operands[], enum machine_mode mode)\n \t\t  if (flag_schedule_insns)\n \t\t    emit_insn (gen_blockage ());\n \t\t  emit_insn (gen_GOTaddr2picreg ());\n-\t\t  emit_insn (gen_rtx_USE (VOIDmode, gen_rtx_REG (SImode,\n-\t\t\t\t\t\t\t\t PIC_REG)));\n+\t\t  emit_use (gen_rtx_REG (SImode, PIC_REG));\n \t\t  if (flag_schedule_insns)\n \t\t    emit_insn (gen_blockage ());\n \t\t}\n@@ -5723,8 +5722,8 @@ output_stack_adjust (int size, rtx reg, int epilogue_p,\n \t      mem = gen_tmp_stack_mem (Pmode, gen_rtx_POST_INC (Pmode, reg));\n \t      emit_move_insn (tmp_reg, mem);\n \t      /* Tell flow the insns that pop r4/r5 aren't dead.  */\n-\t      emit_insn (gen_rtx_USE (VOIDmode, tmp_reg));\n-\t      emit_insn (gen_rtx_USE (VOIDmode, adj_reg));\n+\t      emit_use (tmp_reg);\n+\t      emit_use (adj_reg);\n \t      return;\n \t    }\n \t  const_reg = gen_rtx_REG (GET_MODE (reg), temp);\n@@ -6862,7 +6861,7 @@ sh_expand_epilogue (bool sibcall_p)\n      USE PR_MEDIA_REG, since it will be explicitly copied to TR0_REG\n      by the return pattern.  */\n   if (TEST_HARD_REG_BIT (live_regs_mask, PR_REG))\n-    emit_insn (gen_rtx_USE (VOIDmode, gen_rtx_REG (SImode, PR_REG)));\n+    emit_use (gen_rtx_REG (SImode, PR_REG));\n }\n \n static int sh_need_epilogue_known = 0;\n@@ -6916,7 +6915,7 @@ sh_set_return_address (rtx ra, rtx tmp)\n \n       emit_insn (GEN_MOV (rr, ra));\n       /* Tell flow the register for return isn't dead.  */\n-      emit_insn (gen_rtx_USE (VOIDmode, rr));\n+      emit_use (rr);\n       return;\n     }\n \n@@ -10714,7 +10713,7 @@ sh_expand_t_scc (enum rtx_code code, rtx target)\n     emit_insn (gen_movrt (result));\n   else if ((code == EQ && val == 0) || (code == NE && val == 1))\n     {\n-      emit_insn (gen_rtx_CLOBBER (VOIDmode, result));\n+      emit_clobber (result);\n       emit_insn (gen_subc (result, result, result));\n       emit_insn (gen_addsi3 (result, result, const1_rtx));\n     }"}, {"sha": "009ab3a2bcfaaa9794940694ad9d291926399d91", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=c41c1387d39f345a301dde4c414d379319d6ccc1", "patch": "@@ -3427,7 +3427,7 @@ load_pic_register (bool delay_pic_helper)\n   if (TARGET_VXWORKS_RTP)\n     {\n       emit_insn (gen_vxworks_load_got ());\n-      emit_insn (gen_rtx_USE (VOIDmode, pic_offset_table_rtx));\n+      emit_use (pic_offset_table_rtx);\n       return;\n     }\n \n@@ -3457,7 +3457,7 @@ load_pic_register (bool delay_pic_helper)\n      since setjmp/longjmp can cause life info to screw up.\n      ??? In the case where we don't obey regdecls, this is not sufficient\n      since we may not fall out the bottom.  */\n-  emit_insn (gen_rtx_USE (VOIDmode, pic_offset_table_rtx));\n+  emit_use (pic_offset_table_rtx);\n }\n \n /* Emit a call instruction with the pattern given by PAT.  ADDR is the"}, {"sha": "bc29bcf819cfe4db03e30abc8e8b87df86780ed5", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=c41c1387d39f345a301dde4c414d379319d6ccc1", "patch": "@@ -7104,8 +7104,8 @@\n \t\t  adjust_address (result, TARGET_ARCH64 ? TFmode : DFmode, 8));\n \n   /* Put USE insns before the return.  */\n-  emit_insn (gen_rtx_USE (VOIDmode, valreg1));\n-  emit_insn (gen_rtx_USE (VOIDmode, valreg2));\n+  emit_use (valreg1);\n+  emit_use (valreg2);\n \n   /* Construct the return.  */\n   expand_naked_return ();\n@@ -7191,8 +7191,8 @@\n      and reload the appropriate value into %fp.  */\n   emit_move_insn (hard_frame_pointer_rtx, stack);\n \n-  emit_insn (gen_rtx_USE (VOIDmode, stack_pointer_rtx));\n-  emit_insn (gen_rtx_USE (VOIDmode, static_chain_rtx));\n+  emit_use (stack_pointer_rtx);\n+  emit_use (static_chain_rtx);\n \n   /* ??? The V9-specific version was disabled in rev 1.65.  */\n   emit_jump_insn (gen_goto_handler_and_restore (labreg));"}, {"sha": "b944a00e5bfaf05dd8c29447336dbe367ad4adcb", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=c41c1387d39f345a301dde4c414d379319d6ccc1", "patch": "@@ -1906,8 +1906,7 @@ spu_expand_epilogue (bool sibcall_p)\n \n   if (!sibcall_p)\n     {\n-      emit_insn (gen_rtx_USE\n-\t\t (VOIDmode, gen_rtx_REG (SImode, LINK_REGISTER_REGNUM)));\n+      emit_use (gen_rtx_REG (SImode, LINK_REGISTER_REGNUM));\n       jump = emit_jump_insn (gen__return ());\n       emit_barrier_after (jump);\n     }"}, {"sha": "b9f11b1583f2e79d3e555391bc291e4eae5bd92a", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=c41c1387d39f345a301dde4c414d379319d6ccc1", "patch": "@@ -1909,7 +1909,7 @@ Saved %d bytes via epilogue function (%d vs. %d) in function %s\\n\",\n \t\t\t\t\t   plus_constant (stack_pointer_rtx,\n \t\t\t\t\t\t\t  offset)));\n \n-\t      emit_insn (gen_rtx_USE (VOIDmode, restore_regs[i]));\n+\t      emit_use (restore_regs[i]);\n \t      offset -= 4;\n \t    }\n "}, {"sha": "1194ad79b81f49887d1106bafa40b672bb429130", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=c41c1387d39f345a301dde4c414d379319d6ccc1", "patch": "@@ -4548,6 +4548,62 @@ emit_note (enum insn_note kind)\n   return note;\n }\n \n+/* Emit a clobber of lvalue X.  */\n+\n+rtx\n+emit_clobber (rtx x)\n+{\n+  /* CONCATs should not appear in the insn stream.  */\n+  if (GET_CODE (x) == CONCAT)\n+    {\n+      emit_clobber (XEXP (x, 0));\n+      return emit_clobber (XEXP (x, 1));\n+    }\n+  return emit_insn (gen_rtx_CLOBBER (VOIDmode, x));\n+}\n+\n+/* Return a sequence of insns to clobber lvalue X.  */\n+\n+rtx\n+gen_clobber (rtx x)\n+{\n+  rtx seq;\n+\n+  start_sequence ();\n+  emit_clobber (x);\n+  seq = get_insns ();\n+  end_sequence ();\n+  return seq;\n+}\n+\n+/* Emit a use of rvalue X.  */\n+\n+rtx\n+emit_use (rtx x)\n+{\n+  /* CONCATs should not appear in the insn stream.  */\n+  if (GET_CODE (x) == CONCAT)\n+    {\n+      emit_use (XEXP (x, 0));\n+      return emit_use (XEXP (x, 1));\n+    }\n+  return emit_insn (gen_rtx_USE (VOIDmode, x));\n+}\n+\n+/* Return a sequence of insns to use rvalue X.  */\n+\n+rtx\n+gen_use (rtx x)\n+{\n+  rtx seq;\n+\n+  start_sequence ();\n+  emit_use (x);\n+  seq = get_insns ();\n+  end_sequence ();\n+  return seq;\n+}\n+\n /* Cause next statement to emit a line note even if the line number\n    has not changed.  */\n "}, {"sha": "d573836d293f08165c88ede4b672ea1fc863e3ac", "filename": "gcc/explow.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=c41c1387d39f345a301dde4c414d379319d6ccc1", "patch": "@@ -1016,11 +1016,8 @@ emit_stack_restore (enum save_level save_level, rtx sa, rtx after)\n       /* These clobbers prevent the scheduler from moving\n \t references to variable arrays below the code\n \t that deletes (pops) the arrays.  */\n-      emit_insn (gen_rtx_CLOBBER (VOIDmode,\n-\t\t    gen_rtx_MEM (BLKmode,\n-\t\t\tgen_rtx_SCRATCH (VOIDmode))));\n-      emit_insn (gen_rtx_CLOBBER (VOIDmode,\n-\t\t    gen_rtx_MEM (BLKmode, stack_pointer_rtx)));\n+      emit_clobber (gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (VOIDmode)));\n+      emit_clobber (gen_rtx_MEM (BLKmode, stack_pointer_rtx));\n     }\n \n   discard_pending_stack_adjust ();"}, {"sha": "27ff0c063cf0b605b3051fd0145f147ac24dbd79", "filename": "gcc/expmed.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=c41c1387d39f345a301dde4c414d379319d6ccc1", "patch": "@@ -1374,7 +1374,7 @@ extract_bit_field_1 (rtx str_rtx, unsigned HOST_WIDE_INT bitsize,\n \ttarget = gen_reg_rtx (mode);\n \n       /* Indicate for flow that the entire target reg is being set.  */\n-      emit_insn (gen_rtx_CLOBBER (VOIDmode, target));\n+      emit_clobber (target);\n \n       for (i = 0; i < nwords; i++)\n \t{"}, {"sha": "d55a2797fb5408cbc50b161fb9672f57e53d0965", "filename": "gcc/expr.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=c41c1387d39f345a301dde4c414d379319d6ccc1", "patch": "@@ -557,7 +557,7 @@ convert_move (rtx to, rtx from, int unsignedp)\n \t    {\n \t      if (reg_overlap_mentioned_p (to, from))\n \t\tfrom = force_reg (from_mode, from);\n-\t      emit_insn (gen_rtx_CLOBBER (VOIDmode, to));\n+\t      emit_clobber (to);\n \t    }\n \t  convert_move (word_to, from, unsignedp);\n \t  emit_unop_insn (code, to, word_to, equiv_code);\n@@ -3108,7 +3108,7 @@ emit_move_complex_parts (rtx x, rtx y)\n      hard regs shouldn't appear here except as return values.  */\n   if (!reload_completed && !reload_in_progress\n       && REG_P (x) && !reg_overlap_mentioned_p (x, y))\n-    emit_insn (gen_rtx_CLOBBER (VOIDmode, x));\n+    emit_clobber (x);\n \n   write_complex_part (x, read_complex_part (y, false), false);\n   write_complex_part (x, read_complex_part (y, true), true);\n@@ -3305,7 +3305,7 @@ emit_move_multi_word (enum machine_mode mode, rtx x, rtx y)\n   if (x != y\n       && ! (reload_in_progress || reload_completed)\n       && need_clobber != 0)\n-    emit_insn (gen_rtx_CLOBBER (VOIDmode, x));\n+    emit_clobber (x);\n \n   emit_insn (seq);\n \n@@ -5160,7 +5160,7 @@ store_constructor (tree exp, rtx target, int cleared, HOST_WIDE_INT size)\n \t  }\n \n \tif (REG_P (target) && !cleared)\n-\t  emit_insn (gen_rtx_CLOBBER (VOIDmode, target));\n+\t  emit_clobber (target);\n \n \t/* Store each element of the constructor into the\n \t   corresponding field of TARGET.  */\n@@ -5360,7 +5360,7 @@ store_constructor (tree exp, rtx target, int cleared, HOST_WIDE_INT size)\n \n \tif (!cleared && REG_P (target))\n \t  /* Inform later passes that the old value is dead.  */\n-\t  emit_insn (gen_rtx_CLOBBER (VOIDmode, target));\n+\t  emit_clobber (target);\n \n \t/* Store each element of the constructor into the\n \t   corresponding element of TARGET, determined by counting the"}, {"sha": "bb4a2e6ab683e36aec3145db71808568a9313a65", "filename": "gcc/function.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=c41c1387d39f345a301dde4c414d379319d6ccc1", "patch": "@@ -4311,7 +4311,7 @@ diddle_return_value (void (*doit) (rtx, void *), void *arg)\n static void\n do_clobber_return_reg (rtx reg, void *arg ATTRIBUTE_UNUSED)\n {\n-  emit_insn (gen_rtx_CLOBBER (VOIDmode, reg));\n+  emit_clobber (reg);\n }\n \n void\n@@ -4334,7 +4334,7 @@ clobber_return_register (void)\n static void\n do_use_return_reg (rtx reg, void *arg ATTRIBUTE_UNUSED)\n {\n-  emit_insn (gen_rtx_USE (VOIDmode, reg));\n+  emit_use (reg);\n }\n \n static void\n@@ -4740,7 +4740,7 @@ thread_prologue_and_epilogue_insns (void)\n       /* Insert an explicit USE for the frame pointer \n          if the profiling is on and the frame pointer is required.  */\n       if (crtl->profile && frame_pointer_needed)\n-        emit_insn (gen_rtx_USE (VOIDmode, hard_frame_pointer_rtx));\n+\temit_use (hard_frame_pointer_rtx);\n \n       /* Retain a map of the prologue insns.  */\n       record_insns (seq, &prologue);"}, {"sha": "a9e7da998a4ddf93c217d9241fa28fb434dbf83a", "filename": "gcc/lower-subreg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Flower-subreg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Flower-subreg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flower-subreg.c?ref=c41c1387d39f345a301dde4c414d379319d6ccc1", "patch": "@@ -836,7 +836,7 @@ resolve_simple_move (rtx set, rtx insn)\n       unsigned int i;\n \n       if (REG_P (dest) && !HARD_REGISTER_NUM_P (REGNO (dest)))\n-\temit_insn (gen_rtx_CLOBBER (VOIDmode, dest));\n+\temit_clobber (dest);\n \n       for (i = 0; i < words; ++i)\n \temit_move_insn (simplify_gen_subreg_concatn (word_mode, dest,"}, {"sha": "bd054edce1815ea5d7ef9dd37010e6d5a861a37e", "filename": "gcc/optabs.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=c41c1387d39f345a301dde4c414d379319d6ccc1", "patch": "@@ -329,7 +329,7 @@ widen_operand (rtx op, enum machine_mode mode, enum machine_mode oldmode,\n      part to OP.  */\n \n   result = gen_reg_rtx (mode);\n-  emit_insn (gen_rtx_CLOBBER (VOIDmode, result));\n+  emit_clobber (result);\n   emit_move_insn (gen_lowpart (GET_MODE (op), result), op);\n   return result;\n }\n@@ -1998,7 +1998,7 @@ expand_binop (enum machine_mode mode, optab binoptab, rtx op0, rtx op1,\n \n       /* Indicate for flow that the entire target reg is being set.  */\n       if (REG_P (target))\n-\temit_insn (gen_rtx_CLOBBER (VOIDmode, xtarget));\n+\temit_clobber (xtarget);\n \n       /* Do the actual arithmetic.  */\n       for (i = 0; i < nwords; i++)\n@@ -2755,7 +2755,7 @@ expand_doubleword_bswap (enum machine_mode mode, rtx op, rtx target)\n   if (target == 0)\n     target = gen_reg_rtx (mode);\n   if (REG_P (target))\n-    emit_insn (gen_rtx_CLOBBER (VOIDmode, target));\n+    emit_clobber (target);\n   emit_move_insn (operand_subword (target, 0, 1, mode), t0);\n   emit_move_insn (operand_subword (target, 1, 1, mode), t1);\n "}, {"sha": "ad0a04f6633b59c09432917af1fa7d297e113aa0", "filename": "gcc/reload.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=c41c1387d39f345a301dde4c414d379319d6ccc1", "patch": "@@ -4083,7 +4083,7 @@ find_reloads (rtx insn, int replace, int ind_levels, int live_known,\n \t\t  PUT_MODE (emit_insn_before (gen_rtx_USE (VOIDmode, operand),\n \t\t\t\t\t      insn), QImode);\n \t\tif (modified[i] != RELOAD_READ)\n-\t\t  emit_insn_after (gen_rtx_CLOBBER (VOIDmode, operand), insn);\n+\t\t  emit_insn_after (gen_clobber (operand), insn);\n \t      }\n \t  }\n       }"}, {"sha": "7f4136657470ce199f88f5dd96d42c1aed1489a7", "filename": "gcc/reload1.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=c41c1387d39f345a301dde4c414d379319d6ccc1", "patch": "@@ -3316,14 +3316,13 @@ eliminate_regs_in_insn (rtx insn, int replace)\n \t     this point.  */\n \t  *recog_data.operand_loc[i] = 0;\n \n-\t/* If an output operand changed from a REG to a MEM and INSN is an\n-\t   insn, write a CLOBBER insn.  */\n+\t  /* If an output operand changed from a REG to a MEM and INSN is an\n+\t     insn, write a CLOBBER insn.  */\n \t  if (recog_data.operand_type[i] != OP_IN\n \t      && REG_P (orig_operand[i])\n \t      && MEM_P (substed_operand[i])\n \t      && replace)\n-\t    emit_insn_after (gen_rtx_CLOBBER (VOIDmode, orig_operand[i]),\n-\t\t\t     insn);\n+\t    emit_insn_after (gen_clobber (orig_operand[i]), insn);\n \t}\n     }\n "}, {"sha": "2e0884f8f565b604c041e6104d08f5b6d295de80", "filename": "gcc/rtl.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=c41c1387d39f345a301dde4c414d379319d6ccc1", "patch": "@@ -1609,6 +1609,10 @@ extern rtx emit_label (rtx);\n extern rtx emit_barrier (void);\n extern rtx emit_note (enum insn_note);\n extern rtx emit_note_copy (rtx);\n+extern rtx gen_clobber (rtx);\n+extern rtx emit_clobber (rtx);\n+extern rtx gen_use (rtx);\n+extern rtx emit_use (rtx);\n extern rtx make_insn_raw (rtx);\n extern rtx make_jump_insn_raw (rtx);\n extern void add_function_usage_to (rtx, rtx);"}, {"sha": "00dd59ce46350ed157bd9e0da844845e01deee34", "filename": "gcc/stmt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c41c1387d39f345a301dde4c414d379319d6ccc1/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=c41c1387d39f345a301dde4c414d379319d6ccc1", "patch": "@@ -1775,11 +1775,11 @@ expand_nl_goto_receiver (void)\n {\n   /* Clobber the FP when we get here, so we have to make sure it's\n      marked as used by this function.  */\n-  emit_insn (gen_rtx_USE (VOIDmode, hard_frame_pointer_rtx));\n+  emit_use (hard_frame_pointer_rtx);\n \n   /* Mark the static chain as clobbered here so life information\n      doesn't get messed up for it.  */\n-  emit_insn (gen_rtx_CLOBBER (VOIDmode, static_chain_rtx));\n+  emit_clobber (static_chain_rtx);\n \n #ifdef HAVE_nonlocal_goto\n   if (! HAVE_nonlocal_goto)"}]}