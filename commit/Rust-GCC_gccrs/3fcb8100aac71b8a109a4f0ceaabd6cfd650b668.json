{"sha": "3fcb8100aac71b8a109a4f0ceaabd6cfd650b668", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ZjYjgxMDBhYWM3MWI4YTEwOWE0ZjBjZWFhYmQ2Y2ZkNjUwYjY2OA==", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2020-11-16T11:06:32Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-12-14T15:51:48Z"}, "message": "[Ada] Correctly mark subprogram as not always inlined in GNATprove mode\n\ngcc/ada/\n\n\t* inline.adb (Cannot_Inline): Add No_Info parameter to disable\n\tinfo message.\n\t* inline.ads (Cannot_Inline): When No_Info is set to True, do\n\tnot issue info message in GNATprove mode, but still mark the\n\tsubprogram as not always inlined.\n\t* sem_res.adb (Resolve_Call): Always call Cannot_Inline inside\n\tan assertion expression.", "tree": {"sha": "6c89c3c7377ed176bd7391c5449eb7aed51ef93d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c89c3c7377ed176bd7391c5449eb7aed51ef93d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3fcb8100aac71b8a109a4f0ceaabd6cfd650b668", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fcb8100aac71b8a109a4f0ceaabd6cfd650b668", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fcb8100aac71b8a109a4f0ceaabd6cfd650b668", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fcb8100aac71b8a109a4f0ceaabd6cfd650b668/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49ea96b4d883105e44a63f304584088928732975", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49ea96b4d883105e44a63f304584088928732975", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49ea96b4d883105e44a63f304584088928732975"}], "stats": {"total": 48, "additions": 25, "deletions": 23}, "files": [{"sha": "bb4d97c168e8e879e55152b5e059e15b518a169b", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fcb8100aac71b8a109a4f0ceaabd6cfd650b668/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fcb8100aac71b8a109a4f0ceaabd6cfd650b668/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=3fcb8100aac71b8a109a4f0ceaabd6cfd650b668", "patch": "@@ -1945,10 +1945,11 @@ package body Inline is\n    -------------------\n \n    procedure Cannot_Inline\n-     (Msg        : String;\n-      N          : Node_Id;\n-      Subp       : Entity_Id;\n-      Is_Serious : Boolean := False)\n+     (Msg           : String;\n+      N             : Node_Id;\n+      Subp          : Entity_Id;\n+      Is_Serious    : Boolean := False;\n+      Suppress_Info : Boolean := False)\n    is\n    begin\n       --  In GNATprove mode, inlining is the technical means by which the\n@@ -1971,7 +1972,7 @@ package body Inline is\n             New_Msg (1 .. Len2) := \"info: no contextual analysis of\";\n             New_Msg (Len2 + 1 .. Msg'Length + Len2 - Len1) :=\n               Msg (Msg'First + Len1 .. Msg'Last);\n-            Cannot_Inline (New_Msg, N, Subp, Is_Serious);\n+            Cannot_Inline (New_Msg, N, Subp, Is_Serious, Suppress_Info);\n             return;\n          end;\n       end if;\n@@ -1992,14 +1993,14 @@ package body Inline is\n          then\n             null;\n \n-         --  In GNATprove mode, issue a warning when -gnatd_f is set, and\n-         --  indicate that the subprogram is not always inlined by setting\n-         --  flag Is_Inlined_Always to False.\n+         --  In GNATprove mode, issue an info message when -gnatd_f is set and\n+         --  Suppress_Info is False, and indicate that the subprogram is not\n+         --  always inlined by setting flag Is_Inlined_Always to False.\n \n          elsif GNATprove_Mode then\n             Set_Is_Inlined_Always (Subp, False);\n \n-            if Debug_Flag_Underscore_F then\n+            if Debug_Flag_Underscore_F and not Suppress_Info then\n                Error_Msg_NE (Msg, N, Subp);\n             end if;\n \n@@ -2022,14 +2023,14 @@ package body Inline is\n \n          Error_Msg_NE (Msg (Msg'First .. Msg'Last - 1), N, Subp);\n \n-      --  In GNATprove mode, issue a warning when -gnatd_f is set, and\n-      --  indicate that the subprogram is not always inlined by setting\n-      --  flag Is_Inlined_Always to False.\n+      --  In GNATprove mode, issue an info message when -gnatd_f is set and\n+      --  Suppress_Info is False, and indicate that the subprogram is not\n+      --  always inlined by setting flag Is_Inlined_Always to False.\n \n       elsif GNATprove_Mode then\n          Set_Is_Inlined_Always (Subp, False);\n \n-         if Debug_Flag_Underscore_F then\n+         if Debug_Flag_Underscore_F and not Suppress_Info then\n             Error_Msg_NE (Msg, N, Subp);\n          end if;\n "}, {"sha": "6790f159f0fde1dc8bcbf994ad0b7616e10f3324", "filename": "gcc/ada/inline.ads", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fcb8100aac71b8a109a4f0ceaabd6cfd650b668/gcc%2Fada%2Finline.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fcb8100aac71b8a109a4f0ceaabd6cfd650b668/gcc%2Fada%2Finline.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.ads?ref=3fcb8100aac71b8a109a4f0ceaabd6cfd650b668", "patch": "@@ -154,15 +154,17 @@ package Inline is\n    --  its treatment of the subprogram.\n \n    procedure Cannot_Inline\n-     (Msg        : String;\n-      N          : Node_Id;\n-      Subp       : Entity_Id;\n-      Is_Serious : Boolean := False);\n+     (Msg           : String;\n+      N             : Node_Id;\n+      Subp          : Entity_Id;\n+      Is_Serious    : Boolean := False;\n+      Suppress_Info : Boolean := False);\n    --  This procedure is called if the node N, an instance of a call to\n    --  subprogram Subp, cannot be inlined. Msg is the message to be issued,\n    --  which ends with ? (it does not end with ?p?, this routine takes care of\n-   --  the need to change ? to ?p?). The behavior of this routine depends on\n-   --  the value of Back_End_Inlining:\n+   --  the need to change ? to ?p?). Suppress_Info is set to True to prevent\n+   --  issuing an info message in GNATprove mode. The behavior of this routine\n+   --  depends on the value of Back_End_Inlining:\n    --\n    --    * If Back_End_Inlining is not set (ie. legacy frontend inlining model)\n    --      then if Subp has a pragma Always_Inlined, then an error message is"}, {"sha": "659db865f93f610f85cd01679fc009336201d8ac", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fcb8100aac71b8a109a4f0ceaabd6cfd650b668/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fcb8100aac71b8a109a4f0ceaabd6cfd650b668/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=3fcb8100aac71b8a109a4f0ceaabd6cfd650b668", "patch": "@@ -7122,10 +7122,9 @@ package body Sem_Res is\n             --  on expression functions.\n \n             elsif In_Assertion_Expr /= 0 then\n-               if Present (Body_Id) then\n-                  Cannot_Inline\n-                    (\"cannot inline & (in assertion expression)?\", N, Nam_UA);\n-               end if;\n+               Cannot_Inline\n+                 (\"cannot inline & (in assertion expression)?\", N, Nam_UA,\n+                  Suppress_Info => No (Body_Id));\n \n             --  Calls cannot be inlined inside default expressions\n "}]}