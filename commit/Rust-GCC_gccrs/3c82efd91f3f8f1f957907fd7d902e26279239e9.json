{"sha": "3c82efd91f3f8f1f957907fd7d902e26279239e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M4MmVmZDkxZjNmOGYxZjk1NzkwN2ZkN2Q5MDJlMjYyNzkyMzllOQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-07-20T08:31:26Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-07-20T08:31:26Z"}, "message": "builtins.c (get_object_alignment_2): Correct offset handling when using type alignment of a MEM_REF kind base.\n\n2012-07-20  Richard Guenther  <rguenther@suse.de>\n\n\t* builtins.c (get_object_alignment_2): Correct offset handling\n\twhen using type alignment of a MEM_REF kind base.\n\nFrom-SVN: r189704", "tree": {"sha": "0186cf52294cb90d2959dc4e34f45c417db61a60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0186cf52294cb90d2959dc4e34f45c417db61a60"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c82efd91f3f8f1f957907fd7d902e26279239e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c82efd91f3f8f1f957907fd7d902e26279239e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c82efd91f3f8f1f957907fd7d902e26279239e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c82efd91f3f8f1f957907fd7d902e26279239e9/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "83c8cdd7eccd811725200dd04f697362a160debd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83c8cdd7eccd811725200dd04f697362a160debd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83c8cdd7eccd811725200dd04f697362a160debd"}], "stats": {"total": 27, "additions": 20, "deletions": 7}, "files": [{"sha": "2c4c273582360fce4b0d8e85e0e9d02b88c7abd2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c82efd91f3f8f1f957907fd7d902e26279239e9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c82efd91f3f8f1f957907fd7d902e26279239e9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3c82efd91f3f8f1f957907fd7d902e26279239e9", "patch": "@@ -1,3 +1,8 @@\n+2012-07-20  Richard Guenther  <rguenther@suse.de>\n+\n+\t* builtins.c (get_object_alignment_2): Correct offset handling\n+\twhen using type alignment of a MEM_REF kind base.\n+\n 2012-07-20  Kirill Yukhin  <kirill.yukhin@intel.com>\n \n \tPR target/53877"}, {"sha": "a8318e8f3fd70edcf15bdf8d5c1dd8d3a3993812", "filename": "gcc/builtins.c", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c82efd91f3f8f1f957907fd7d902e26279239e9/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c82efd91f3f8f1f957907fd7d902e26279239e9/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=3c82efd91f3f8f1f957907fd7d902e26279239e9", "patch": "@@ -346,12 +346,10 @@ get_object_alignment_2 (tree exp, unsigned int *alignp,\n \n       known_alignment\n \t= get_pointer_alignment_1 (addr, &ptr_align, &ptr_bitpos);\n-      bitpos += ptr_bitpos;\n       align = MAX (ptr_align, align);\n \n-      if (TREE_CODE (exp) == MEM_REF\n-\t  || TREE_CODE (exp) == TARGET_MEM_REF)\n-\tbitpos += mem_ref_offset (exp).low * BITS_PER_UNIT;\n+      /* The alignment of the pointer operand in a TARGET_MEM_REF\n+\t has to take the variable offset parts into account.  */\n       if (TREE_CODE (exp) == TARGET_MEM_REF)\n \t{\n \t  if (TMR_INDEX (exp))\n@@ -369,9 +367,19 @@ get_object_alignment_2 (tree exp, unsigned int *alignp,\n       /* When EXP is an actual memory reference then we can use\n \t TYPE_ALIGN of a pointer indirection to derive alignment.\n \t Do so only if get_pointer_alignment_1 did not reveal absolute\n-\t alignment knowledge.  */\n-      if (!addr_p && !known_alignment)\n-\talign = MAX (TYPE_ALIGN (TREE_TYPE (exp)), align);\n+\t alignment knowledge and if using that alignment would\n+\t improve the situation.  */\n+      if (!addr_p && !known_alignment\n+\t  && TYPE_ALIGN (TREE_TYPE (exp)) > align)\n+\talign = TYPE_ALIGN (TREE_TYPE (exp));\n+      else\n+\t{\n+\t  /* Else adjust bitpos accordingly.  */\n+\t  bitpos += ptr_bitpos;\n+\t  if (TREE_CODE (exp) == MEM_REF\n+\t      || TREE_CODE (exp) == TARGET_MEM_REF)\n+\t    bitpos += mem_ref_offset (exp).low * BITS_PER_UNIT;\n+\t}\n     }\n   else if (TREE_CODE (exp) == STRING_CST)\n     {"}]}