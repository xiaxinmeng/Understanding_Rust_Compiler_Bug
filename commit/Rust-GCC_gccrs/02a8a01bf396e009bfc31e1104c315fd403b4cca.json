{"sha": "02a8a01bf396e009bfc31e1104c315fd403b4cca", "node_id": "C_kwDOANBUbNoAKDAyYThhMDFiZjM5NmUwMDliZmMzMWUxMTA0YzMxNWZkNDAzYjRjY2E", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-01-13T00:16:21Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-01-13T00:16:21Z"}, "message": "Daily bump.", "tree": {"sha": "34ce0e2bf707d8c44fe0215f9d80a505f1ed377f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34ce0e2bf707d8c44fe0215f9d80a505f1ed377f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02a8a01bf396e009bfc31e1104c315fd403b4cca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02a8a01bf396e009bfc31e1104c315fd403b4cca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02a8a01bf396e009bfc31e1104c315fd403b4cca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02a8a01bf396e009bfc31e1104c315fd403b4cca/comments", "author": null, "committer": null, "parents": [{"sha": "cb46559cea1d554cef1138db5bfbdd0647ffbc0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb46559cea1d554cef1138db5bfbdd0647ffbc0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb46559cea1d554cef1138db5bfbdd0647ffbc0d"}], "stats": {"total": 235, "additions": 234, "deletions": 1}, "files": [{"sha": "cd420ffdd20780546f534f0b12e39174da9955b9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02a8a01bf396e009bfc31e1104c315fd403b4cca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02a8a01bf396e009bfc31e1104c315fd403b4cca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=02a8a01bf396e009bfc31e1104c315fd403b4cca", "patch": "@@ -1,3 +1,91 @@\n+2022-01-12  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/100637\n+\tPR target/103861\n+\t* config/i386/i386-expand.c (ix86_emit_vec_binop): New static function.\n+\t(ix86_expand_sse_movcc): Use ix86_emit_vec_binop instead of gen_rtx_X\n+\twhen constructing vector logic RTXes.\n+\t(expand_vec_perm_pshufb2): Ditto.\n+\t* config/i386/mmx.md (negv2qi): Disparage GPR alternative a bit.\n+\t(<plusminus:insn>v2qi3): Ditto.\n+\t(vcond<mode><mode>): Re-enable for TARGET_SSE2.\n+\t(vcondu<mode><mode>): Ditto.\n+\t(vcond_mask_<mode><mode>): Ditto.\n+\t(one_cmpl<VI_32:mode>2): Remove expander.\n+\t(one_cmpl<VI_16_32:mode>2): Rename from one_cmplv2qi.\n+\tUse VI_16_32 mode iterator.\n+\t(one_cmpl<VI_16_32:mode>2 splitters): Use VI_16_32 mode iterator.\n+\tUse lowpart_subreg instead of gen_lowpart to create subreg.\n+\t(*andnot<VI_16_32:mode>3): Merge from \"*andnot<VI_32:mode>\" and\n+\t\"*andnotv2qi3\" insn patterns using VI_16_32 mode iterator.\n+\tDisparage GPR alternative a bit.  Add CC clobber.\n+\t(*andnot<VI_16_32:mode>3 splitters): Use VI_16_32 mode iterator.\n+\tUse lowpart_subreg instead of gen_lowpart to create subreg.\n+\t(*<any_logic:code><VI_16_32:mode>3): Merge from\n+\t\"*<any_logic:code><VI_32:mode>\" and \"*<any_logic:code>v2qi3\" insn patterns\n+\tusing VI_16_32 mode iterator.  Disparage GPR alternative a bit.\n+\tAdd CC clobber.\n+\t(*<any_logic:code><VI_16_32:mode>3 splitters):Use VI_16_32 mode\n+\titerator.  Use lowpart_subreg instead of gen_lowpart to create subreg.\n+\n+2022-01-12  Cl\u00e9ment Chigot  <clement.chigot@atos.net>\n+\n+\t* configure.ac: Check sizeof ino_t and dev_t.\n+\t(HOST_STAT_FOR_64BIT_INODES): New AC_DEFINE to provide stat\n+\tsyscall being able to handle 64bit inodes.\n+\t* config.in: Regenerate.\n+\t* configure: Regenerate.\n+\t* incpath.c (HOST_STAT_FOR_64BIT_INODES): New define.\n+\t(remove_duplicates): Use it.\n+\n+2022-01-12  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/103551\n+\t* tree-vrp.c (execute_ranger_vrp): Always set EDGE_EXECUTABLE.\n+\n+2022-01-12  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/103990\n+\t* tree-pass.h (tail_merge_optimize): Drop unused argument.\n+\t* tree-ssa-tail-merge.c (tail_merge_optimize): Likewise.\n+\t* tree-ssa-pre.c (pass_pre::execute): Retain TODO_cleanup_cfg\n+\tand adjust call to tail_merge_optimize.\n+\n+2022-01-12  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* tree-vect-loop.c (vect-analyze-loop): Handle scenario where target\n+\tdoes not add autovectorize_vector_modes.\n+\n+2022-01-12  Martin Liska  <mliska@suse.cz>\n+\n+\t* config/aarch64/aarch64.c (aarch64_parse_boolean_options): Use\n+\t%qs where possible.\n+\t(aarch64_parse_sve_width_string): Likewise.\n+\t(aarch64_override_options_internal): Likewise.\n+\t(aarch64_print_hint_for_extensions): Likewise.\n+\t(aarch64_validate_sls_mitigation): Likewise.\n+\t(aarch64_handle_attr_arch): Likewise.\n+\t(aarch64_handle_attr_cpu): Likewise.\n+\t(aarch64_handle_attr_tune): Likewise.\n+\t(aarch64_handle_attr_isa_flags): Likewise.\n+\n+2022-01-12  Martin Liska  <mliska@suse.cz>\n+\n+\t* config.gcc: Include elfos.h before ${tm_file}.\n+\n+2022-01-12  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* config/cris/cris.c: Quote identifiers in parameters to error\n+\tand internal_error, and remove extraneous spaces with punctuation.\n+\t* config/cris/cris.h (CRIS_ASSERT): When passing on stringified\n+\texpression to internal_error, pass it as a parameter instead of\n+\tappending it to the format part.\n+\n+2022-01-12  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* config/cris/cris.c (cris_postdbr_cmpelim): Parenthesize\n+\tparameter to as_a.\n+\n 2022-01-11  qing zhao  <qing.zhao@oracle.com>\n \n \t* gimplify.c (gimple_add_init_for_auto_var): Delete the 3rd argument."}, {"sha": "860fd87fbcbc860ac1e5ef8366ee7fa38e725501", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02a8a01bf396e009bfc31e1104c315fd403b4cca/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02a8a01bf396e009bfc31e1104c315fd403b4cca/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=02a8a01bf396e009bfc31e1104c315fd403b4cca", "patch": "@@ -1 +1 @@\n-20220112\n+20220113"}, {"sha": "b82f24430b5002bc620c438eb0880d3554f6e39c", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02a8a01bf396e009bfc31e1104c315fd403b4cca/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02a8a01bf396e009bfc31e1104c315fd403b4cca/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=02a8a01bf396e009bfc31e1104c315fd403b4cca", "patch": "@@ -1,3 +1,26 @@\n+2022-01-12  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/103940\n+\t* engine.cc (impl_sm_context::impl_sm_context): Add\n+\t\"unknown_side_effects\" param and use it to initialize\n+\tnew m_unknown_side_effects field.\n+\t(impl_sm_context::unknown_side_effects_p): New.\n+\t(impl_sm_context::m_unknown_side_effects): New.\n+\t(exploded_node::on_stmt): Pass unknown_side_effects to sm_ctxt\n+\tctor.\n+\t* sm-taint.cc: Include \"stringpool.h\" and \"attribs.h\".\n+\t(tainted_size::tainted_size): Drop \"dir\" param.\n+\t(tainted_size::get_kind): Drop \"FINAL\".\n+\t(tainted_size::emit): Likewise.\n+\t(tainted_size::m_dir): Drop unused field.\n+\t(class tainted_access_attrib_size): New subclass.\n+\t(taint_state_machine::on_stmt): Call check_for_tainted_size_arg on\n+\texternal functions with unknown side effects.\n+\t(taint_state_machine::check_for_tainted_size_arg): New.\n+\t(region_model::check_region_for_taint): Drop \"dir\" param from\n+\ttainted_size ctor.\n+\t* sm.h (sm_context::unknown_side_effects_p): New.\n+\n 2022-01-11  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/102692"}, {"sha": "503f17cbc8d684adbc9c1a840bc439881635bc7e", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02a8a01bf396e009bfc31e1104c315fd403b4cca/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02a8a01bf396e009bfc31e1104c315fd403b4cca/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=02a8a01bf396e009bfc31e1104c315fd403b4cca", "patch": "@@ -1,3 +1,9 @@\n+2022-01-12  Martin Liska  <mliska@suse.cz>\n+\n+\tPR target/103804\n+\t* c-attribs.c (handle_optimize_attribute): Do not call\n+\tcl_optimization_compare if we seen an error.\n+\n 2022-01-11  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/101537"}, {"sha": "3bccccf05d8918520c02a4e9b99a7d73d487a8df", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02a8a01bf396e009bfc31e1104c315fd403b4cca/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02a8a01bf396e009bfc31e1104c315fd403b4cca/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=02a8a01bf396e009bfc31e1104c315fd403b4cca", "patch": "@@ -1,3 +1,10 @@\n+2022-01-12  Jakub Jelinek  <jakub@redhat.com>\n+\t    Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/103480\n+\t* tree.c (move): If expr is xvalue_p, just return expr without\n+\tbuild_static_cast.\n+\n 2022-01-11  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/101597"}, {"sha": "3a52c15cc7ba50f26840403b373142d07c2064ad", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02a8a01bf396e009bfc31e1104c315fd403b4cca/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02a8a01bf396e009bfc31e1104c315fd403b4cca/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=02a8a01bf396e009bfc31e1104c315fd403b4cca", "patch": "@@ -1,3 +1,82 @@\n+2022-01-12  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/103941\n+\t* gcc.target/i386/pr103861-3.c (dg-options): Add -fno-vect-cost-model.\n+\n+2022-01-12  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/103935\n+\t* g++.dg/vect/slp-pr98855.cc: Compile only for x86 targets.\n+\n+2022-01-12  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/100637\n+\tPR target/103861\n+\t* g++.target/i386/pr100637-1b.C (dg-options):\n+\tUse -msse2 instead of -msse4.1.\n+\t* g++.target/i386/pr100637-1w.C (dg-options): Ditto.\n+\t* g++.target/i386/pr103861-1.C (dg-options): Ditto.\n+\t* gcc.target/i386/pr100637-4b.c (dg-options): Ditto.\n+\t* gcc.target/i386/pr103861-4.c (dg-options): Ditto.\n+\t* gcc.target/i386/pr100637-1b.c: Remove scan-assembler\n+\tdirectives for logic instructions.\n+\t* gcc.target/i386/pr100637-1w.c: Ditto.\n+\t* gcc.target/i386/warn-vect-op-2.c:\n+\tUpdate dg-warning for vector logic operation.\n+\n+2022-01-12  Michael Meissner  <meissner@the-meissners.org>\n+\n+\tPR testsuite/102935\n+\t* gcc.target/powerpc/pr101384-1.c: Update insn regexp for power9\n+\tand power10.\n+\n+2022-01-12  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/83541\n+\t* g++.dg/pr83541.C: New.\n+\n+2022-01-12  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/103940\n+\t* gcc.dg/analyzer/taint-size-access-attr-1.c: New test.\n+\n+2022-01-12  Tom de Vries  <tdevries@suse.de>\n+\n+\t* gcc.target/nvptx/atomic-exchange-1.c: New test.\n+\t* gcc.target/nvptx/atomic-exchange-2.c: New test.\n+\t* gcc.target/nvptx/atomic-exchange-3.c: New test.\n+\t* gcc.target/nvptx/atomic-exchange-4.c: New test.\n+\n+2022-01-12  Tom de Vries  <tdevries@suse.de>\n+\n+\t* gcc.target/nvptx/atomic_fetch-1.c: Rewrite.\n+\t* gcc.target/nvptx/atomic_fetch-2.c: Rewrite.\n+\n+2022-01-12  Francois-Xavier Coudert  <fxcoudert@gmail.com>\n+\n+\t* gfortran.dg/ieee/signaling_1.f90: Fix comment.\n+\n+2022-01-12  Francois-Xavier Coudert  <fxcoudert@gmail.com>\n+\n+\t* gfortran.dg/ieee/signaling_1.f90: Adjust flags.\n+\n+2022-01-12  Jakub Jelinek  <jakub@redhat.com>\n+\t    Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/103480\n+\t* g++.dg/warn/Wuseless-cast2.C: New test.\n+\n+2022-01-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/101530\n+\t* c-c++-common/builtin-shufflevector-3.c: Add -Wno-psabi to\n+\tdg-options.\n+\n+2022-01-12  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/76174\n+\t* gcc.dg/tree-ssa/pr76174.c: New testcase.\n+\n 2022-01-11  qing zhao  <qing.zhao@oracle.com>\n \n \t* c-c++-common/auto-init-1.c: Adjust testcase to reflect the 3rd"}, {"sha": "a5c4e7ecf06eddebf1f688dd95a047f664d563bb", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02a8a01bf396e009bfc31e1104c315fd403b4cca/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02a8a01bf396e009bfc31e1104c315fd403b4cca/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=02a8a01bf396e009bfc31e1104c315fd403b4cca", "patch": "@@ -1,3 +1,12 @@\n+2022-01-12  Cl\u00e9ment Chigot  <clement.chigot@atos.net>\n+\n+\t* configure.ac: Check sizeof ino_t and dev_t.\n+\t* config.in: Regenerate.\n+\t* configure: Regenerate.\n+\t* include/cpplib.h (INO_T_CPP): Change for AIX.\n+\t(DEV_T_CPP): New macro.\n+\t(struct cpp_dir): Use it.\n+\n 2021-12-30  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR preprocessor/89971"}, {"sha": "033cf0f51320140dfab114bab9b99875445ec2f4", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02a8a01bf396e009bfc31e1104c315fd403b4cca/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02a8a01bf396e009bfc31e1104c315fd403b4cca/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=02a8a01bf396e009bfc31e1104c315fd403b4cca", "patch": "@@ -1,3 +1,8 @@\n+2022-01-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* libgfortran.h (POWER_IEEE128): Use __GLIBC_PREREQ in a separate\n+\t#if directive inside of #if ... && defined __GLIBC_PREREQ.\n+\n 2022-01-11  Jakub Jelinek  <jakub@redhat.com>\n \n \t* io/transfer.c (unformatted_read, unformatted_write): When"}, {"sha": "e804c7139bd04a9f90ddc8679787c6a41ad49a94", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02a8a01bf396e009bfc31e1104c315fd403b4cca/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02a8a01bf396e009bfc31e1104c315fd403b4cca/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=02a8a01bf396e009bfc31e1104c315fd403b4cca", "patch": "@@ -1,3 +1,19 @@\n+2022-01-12  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* testsuite/20_util/to_chars/103955.cc: Add explicit dg-do\n+\tdirective.\n+\n+2022-01-12  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR libstdc++/103955\n+\t* src/c++17/floating_to_chars.cc (__floating_to_chars_hex):\n+\tTrack the excess precision separately from the effective\n+\tprecision.  Avoid overflow in bounds check by splitting it into\n+\ttwo checks.\n+\t(__floating_to_chars_precision): Avoid overflow in bounds checks\n+\tsimilarly.\n+\t* testsuite/20_util/to_chars/103955.cc: New test.\n+\n 2022-01-11  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/103726"}]}