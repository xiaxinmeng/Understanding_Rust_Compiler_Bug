{"sha": "b8a93198c2286edd6954930696ff8c1a6607785b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjhhOTMxOThjMjI4NmVkZDY5NTQ5MzA2OTZmZjhjMWE2NjA3Nzg1Yg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-09-06T08:03:04Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-09-06T08:03:04Z"}, "message": "[multiple changes]\n\n2011-09-06  Steve Baird  <baird@adacore.com>\n\n\t* einfo.ads (Extra_Accessibility): Update associated comment to use\n\tthe term \"present\" correctly (\"present\" just means that it is not\n\tan error to query the value of the attribute - it does not imply\n\tthat the value must be non-null).\n\t(Extra_Constrained): Ditto.\n\t(Is_Visible_Formal): Ditto.\n\t(Extra_Accessibility_Of_Result) Ditto; also add Inline pragma.\n\t(Set_Extra_Accessibility_Of_Result): Add Inline pragma.\n\t* exp_ch4.adb (Expand_Allocator_Expression): Improve a comment.\n\t* exp_ch6.adb (Expand_Call): The callee may require an\n\tExtra_Accessibility_Of_Result actual parameter even if Ada_Version\n\t< Ada_2012. This can occur if the callee is exported from a Gnat\n\truntimes unit. Also improve a comment.\n\n2011-09-06  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_ch7.adb: Add with and use clauses for Get_Targ.\n\t(Alignment_Of): Rename formal parameter Some_Typ\n\tto Typ, update related comment. Use the allocator alignment on\n\tstrict alignment targets such as SPARC.\n\t(Double_Alignment_Of): Rename formal parameter Some_Typ to Typ, update\n\trelated comment.\n\n2011-09-06  Gary Dismukes  <dismukes@adacore.com>\n\n\t* sem_ch9.adb (Check_Interfaces): Test\n\tIs_Limited_Type rather than Is_Limited_Record when checking that\n\tthe partial view of a synchronized full view must be limited.\n\n2011-09-06  Emmanuel Briot  <briot@adacore.com>\n\n\t* g-comlin.adb (Free): Fix memory leak.\n\nFrom-SVN: r178569", "tree": {"sha": "0d77cbf42032e7764049477aa84fc9ea89b94cc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d77cbf42032e7764049477aa84fc9ea89b94cc7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8a93198c2286edd6954930696ff8c1a6607785b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8a93198c2286edd6954930696ff8c1a6607785b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8a93198c2286edd6954930696ff8c1a6607785b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8a93198c2286edd6954930696ff8c1a6607785b/comments", "author": null, "committer": null, "parents": [{"sha": "ebf494ec2813a1adf5e0b060b12da6864b8932dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebf494ec2813a1adf5e0b060b12da6864b8932dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebf494ec2813a1adf5e0b060b12da6864b8932dd"}], "stats": {"total": 103, "additions": 73, "deletions": 30}, "files": [{"sha": "b887ead748a705eb1faf8bf1cb336f3199dfe157", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8a93198c2286edd6954930696ff8c1a6607785b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8a93198c2286edd6954930696ff8c1a6607785b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b8a93198c2286edd6954930696ff8c1a6607785b", "patch": "@@ -1,3 +1,38 @@\n+2011-09-06  Steve Baird  <baird@adacore.com>\n+\n+\t* einfo.ads (Extra_Accessibility): Update associated comment to use\n+\tthe term \"present\" correctly (\"present\" just means that it is not\n+\tan error to query the value of the attribute - it does not imply\n+\tthat the value must be non-null).\n+\t(Extra_Constrained): Ditto.\n+\t(Is_Visible_Formal): Ditto.\n+\t(Extra_Accessibility_Of_Result) Ditto; also add Inline pragma.\n+\t(Set_Extra_Accessibility_Of_Result): Add Inline pragma.\n+\t* exp_ch4.adb (Expand_Allocator_Expression): Improve a comment.\n+\t* exp_ch6.adb (Expand_Call): The callee may require an\n+\tExtra_Accessibility_Of_Result actual parameter even if Ada_Version\n+\t< Ada_2012. This can occur if the callee is exported from a Gnat\n+\truntimes unit. Also improve a comment.\n+\n+2011-09-06  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch7.adb: Add with and use clauses for Get_Targ.\n+\t(Alignment_Of): Rename formal parameter Some_Typ\n+\tto Typ, update related comment. Use the allocator alignment on\n+\tstrict alignment targets such as SPARC.\n+\t(Double_Alignment_Of): Rename formal parameter Some_Typ to Typ, update\n+\trelated comment.\n+\n+2011-09-06  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_ch9.adb (Check_Interfaces): Test\n+\tIs_Limited_Type rather than Is_Limited_Record when checking that\n+\tthe partial view of a synchronized full view must be limited.\n+\n+2011-09-06  Emmanuel Briot  <briot@adacore.com>\n+\n+\t* g-comlin.adb (Free): Fix memory leak.\n+\n 2011-09-06  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_util.adb, exp_ch6.adb: Minor reformatting and code reorganization."}, {"sha": "871a2cf39516a57639c307a3b79b1dbba5480a22", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8a93198c2286edd6954930696ff8c1a6607785b/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8a93198c2286edd6954930696ff8c1a6607785b/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=b8a93198c2286edd6954930696ff8c1a6607785b", "patch": "@@ -1120,9 +1120,9 @@ package Einfo is\n --       or entry. Returns Empty if there are no extra formals.\n \n --    Extra_Accessibility (Node13)\n---       Present in formal parameters in the non-generic case if expansion is\n---       active. Normally Empty, but if a parameter is one for which a dynamic\n---       accessibility check is required, then an extra formal of type\n+--       Present in formal parameters in the non-generic case. Normally Empty,\n+--       but if expansion is active, and a parameter is one for which a\n+--       dynamic accessibility check is required, then an extra formal of type\n --       Natural is created (see description of field Extra_Formal), and the\n --       Extra_Accessibility field of the formal parameter points to the entity\n --       for this extra formal. Also present in variables when compiling\n@@ -1133,16 +1133,16 @@ package Einfo is\n \n --    Extra_Accessibility_Of_Result (Node19)\n --       Present in (non-generic) Function, Operator, and Subprogram_Type\n---       entities if expansion is active. Normally Empty, but if a function is\n---       one for which \"the accessibility level of the result ... determined\n+--       entities. Normally Empty, but if expansion is active, and a function\n+--       is one for which \"the accessibility level of the result ... determined\n --       by the point of call\" (AI05-0234) is needed, then an extra formal of\n --       subtype Natural is created (see description of field Extra_Formal),\n --       and the Extra_Accessibility_Of_Result field of the function points to\n --       the entity for this extra formal.\n \n --    Extra_Constrained (Node23)\n---       Present in formal parameters in the non-generic case if expansion is\n---       active. Normally Empty, but if a parameter is one for which a dynamic\n+--       Present in formal parameters in the non-generic case. Normally Empty,\n+--       but if expansion is active and a parameter is one for which a dynamic\n --       indication of its constrained status is required, then an extra formal\n --       of type Boolean is created (see description of field Extra_Formal),\n --       and the Extra_Constrained field of the formal parameter points to the\n@@ -2853,11 +2853,10 @@ package Einfo is\n --       visible by selected notation, or not.\n \n --    Is_Visible_Formal (Flag206)\n---       Present in all entities. Set for instances of the formals of a formal\n---       package. Indicates that the entity must be made visible in the body\n---       of the instance, to reproduce the visibility of the generic. This\n---       simplifies visibility settings in instance bodies.\n---       ??? confusion in above comments between being present and being set\n+--       Present in all entities. Set True for instances of the formals of a\n+--       formal package. Indicates that the entity must be made visible in the\n+--       body of the instance, to reproduce the visibility of the generic.\n+--       This simplifies visibility settings in instance bodies.\n \n --    Is_VMS_Exception (Flag133)\n --       Present in all entities. Set only for exception entities where the\n@@ -7373,6 +7372,7 @@ package Einfo is\n    pragma Inline (Esize);\n    pragma Inline (Exception_Code);\n    pragma Inline (Extra_Accessibility);\n+   pragma Inline (Extra_Accessibility_Of_Result);\n    pragma Inline (Extra_Constrained);\n    pragma Inline (Extra_Formal);\n    pragma Inline (Extra_Formals);\n@@ -7817,6 +7817,7 @@ package Einfo is\n    pragma Inline (Set_Esize);\n    pragma Inline (Set_Exception_Code);\n    pragma Inline (Set_Extra_Accessibility);\n+   pragma Inline (Set_Extra_Accessibility_Of_Result);\n    pragma Inline (Set_Extra_Constrained);\n    pragma Inline (Set_Extra_Formal);\n    pragma Inline (Set_Extra_Formals);"}, {"sha": "2b9ab014bfc0e1f718f02dacd980c0f8b24b30f4", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8a93198c2286edd6954930696ff8c1a6607785b/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8a93198c2286edd6954930696ff8c1a6607785b/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=b8a93198c2286edd6954930696ff8c1a6607785b", "patch": "@@ -765,8 +765,6 @@ package body Exp_Ch4 is\n    --  Start of processing for Expand_Allocator_Expression\n \n    begin\n-      --  Messy???\n-\n       --  In the case of an Ada2012 allocator whose initial value comes from a\n       --  function call, pass \"the accessibility level determined by the point\n       --  of call\" (AI05-0234) to the function. Conceptually, this belongs in"}, {"sha": "2638137b28f2c066512d14b40d4d94cba5292049", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8a93198c2286edd6954930696ff8c1a6607785b/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8a93198c2286edd6954930696ff8c1a6607785b/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=b8a93198c2286edd6954930696ff8c1a6607785b", "patch": "@@ -2753,8 +2753,7 @@ package body Exp_Ch6 is\n       --  \"accessibility level determined by the point of call\" (AI05-0234)\n       --  passed in to it, then pass it in.\n \n-      if Ada_Version >= Ada_2012\n-         and then Ekind_In (Subp, E_Function, E_Operator, E_Subprogram_Type)\n+      if Ekind_In (Subp, E_Function, E_Operator, E_Subprogram_Type)\n          and then Present (Extra_Accessibility_Of_Result (Subp))\n       then\n          declare\n@@ -2781,8 +2780,6 @@ package body Exp_Ch6 is\n             case Nkind (Ancestor) is\n                when N_Allocator =>\n \n-                  --  Messy code, could use a cleanup???\n-\n                   --  At this point, we'd like to assign\n \n                   --    Level := Dynamic_Accessibility_Level (Ancestor);"}, {"sha": "eebb79d7c66fc66d988d8f6bd1c509b8e0c8b4b0", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8a93198c2286edd6954930696ff8c1a6607785b/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8a93198c2286edd6954930696ff8c1a6607785b/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=b8a93198c2286edd6954930696ff8c1a6607785b", "patch": "@@ -41,6 +41,7 @@ with Exp_Disp; use Exp_Disp;\n with Exp_Tss;  use Exp_Tss;\n with Exp_Util; use Exp_Util;\n with Freeze;   use Freeze;\n+with Get_Targ; use Get_Targ;\n with Lib;      use Lib;\n with Nlists;   use Nlists;\n with Nmake;    use Nmake;\n@@ -7033,38 +7034,46 @@ package body Exp_Ch7 is\n       Desg_Typ : Entity_Id;\n       Obj_Expr : Node_Id;\n \n-      function Alignment_Of (Some_Typ : Entity_Id) return Node_Id;\n+      function Alignment_Of (Typ : Entity_Id) return Node_Id;\n       --  Subsidiary routine, generate the following attribute reference:\n       --\n-      --    Some_Typ'Alignment\n+      --    Typ'Alignment\n \n-      function Double_Alignment_Of (Some_Typ : Entity_Id) return Node_Id;\n+      function Double_Alignment_Of (Typ : Entity_Id) return Node_Id;\n       --  Subsidiary routine, generate the following expression:\n       --\n-      --    2 * Some_Typ'Alignment\n+      --    2 * Typ'Alignment\n \n       ------------------\n       -- Alignment_Of --\n       ------------------\n \n-      function Alignment_Of (Some_Typ : Entity_Id) return Node_Id is\n+      function Alignment_Of (Typ : Entity_Id) return Node_Id is\n       begin\n-         return\n-           Make_Attribute_Reference (Loc,\n-             Prefix         => New_Reference_To (Some_Typ, Loc),\n-             Attribute_Name => Name_Alignment);\n+         --  Strict alignment targets such as SPARC ignore the alignment of the\n+         --  index type and use the system allocator alignment instead.\n+\n+         if Target_Strict_Alignment then\n+            return Make_Integer_Literal (Loc, Get_System_Allocator_Alignment);\n+\n+         else\n+            return\n+              Make_Attribute_Reference (Loc,\n+                Prefix         => New_Reference_To (Typ, Loc),\n+                Attribute_Name => Name_Alignment);\n+         end if;\n       end Alignment_Of;\n \n       -------------------------\n       -- Double_Alignment_Of --\n       -------------------------\n \n-      function Double_Alignment_Of (Some_Typ : Entity_Id) return Node_Id is\n+      function Double_Alignment_Of (Typ : Entity_Id) return Node_Id is\n       begin\n          return\n            Make_Op_Multiply (Loc,\n              Left_Opnd  => Make_Integer_Literal (Loc, 2),\n-             Right_Opnd => Alignment_Of (Some_Typ));\n+             Right_Opnd => Alignment_Of (Typ));\n       end Double_Alignment_Of;\n \n    --  Start of processing for Make_Finalize_Address_Stmts"}, {"sha": "e18a2b1ead632798bc8b6fcef5692dc6b151413c", "filename": "gcc/ada/g-comlin.adb", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8a93198c2286edd6954930696ff8c1a6607785b/gcc%2Fada%2Fg-comlin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8a93198c2286edd6954930696ff8c1a6607785b/gcc%2Fada%2Fg-comlin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-comlin.adb?ref=b8a93198c2286edd6954930696ff8c1a6607785b", "patch": "@@ -2982,6 +2982,7 @@ package body GNAT.Command_Line is\n          Free (Config.Sections);\n          Free (Config.Usage);\n          Free (Config.Help);\n+         Free (Config.Help_Msg);\n \n          if Config.Aliases /= null then\n             for A in Config.Aliases'Range loop\n@@ -3037,6 +3038,8 @@ package body GNAT.Command_Line is\n       end if;\n \n       Free (Config.Usage);\n+      Free (Config.Help);\n+      Free (Config.Help_Msg);\n       Config.Usage    := new String'(Usage);\n       Config.Help     := new String'(Help);\n       Config.Help_Msg := new String'(Help_Msg);"}, {"sha": "b4a4c456dc52aa989f21b35e55211a0d6b3cdd45", "filename": "gcc/ada/sem_ch9.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8a93198c2286edd6954930696ff8c1a6607785b/gcc%2Fada%2Fsem_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8a93198c2286edd6954930696ff8c1a6607785b/gcc%2Fada%2Fsem_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch9.adb?ref=b8a93198c2286edd6954930696ff8c1a6607785b", "patch": "@@ -2381,7 +2381,7 @@ package body Sem_Ch9 is\n          --  declaration must be limited.\n \n          if Present (Interface_List (N))\n-           and then not Is_Limited_Record (Priv_T)\n+           and then not Is_Limited_Type (Priv_T)\n          then\n             Error_Msg_Sloc := Sloc (Priv_T);\n             Error_Msg_N (\"(Ada 2005) limited type declaration expected for \" &"}]}