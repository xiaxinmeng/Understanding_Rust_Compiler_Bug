{"sha": "854b8a40570fee8d8c22acf21355a8ab88f17557", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODU0YjhhNDA1NzBmZWU4ZDhjMjJhY2YyMTM1NWE4YWI4OGYxNzU1Nw==", "commit": {"author": {"name": "Julian Brown", "email": "julian@codesourcery.com", "date": "2009-11-24T13:35:26Z"}, "committer": {"name": "Julian Brown", "email": "jules@gcc.gnu.org", "date": "2009-11-24T13:35:26Z"}, "message": "arm.c (TARGET_DWARF_REGISTER_SPAN): Define.\n\n\tgcc/\n\t* config/arm/arm.c (TARGET_DWARF_REGISTER_SPAN): Define.\n\t(arm_dwarf_register_span): New function.\n\t(arm_dbx_register_number): Add VFPv3 dwarf numbering.\n\n\nCo-Authored-By: Paul Brook <paul@codesourcery.com>\n\nFrom-SVN: r154497", "tree": {"sha": "37dea275a5d0e0a729313bf1ef1fcc97dcb54d8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37dea275a5d0e0a729313bf1ef1fcc97dcb54d8b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/854b8a40570fee8d8c22acf21355a8ab88f17557", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/854b8a40570fee8d8c22acf21355a8ab88f17557", "html_url": "https://github.com/Rust-GCC/gccrs/commit/854b8a40570fee8d8c22acf21355a8ab88f17557", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/854b8a40570fee8d8c22acf21355a8ab88f17557/comments", "author": {"login": "jtb20", "id": 6094880, "node_id": "MDQ6VXNlcjYwOTQ4ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6094880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtb20", "html_url": "https://github.com/jtb20", "followers_url": "https://api.github.com/users/jtb20/followers", "following_url": "https://api.github.com/users/jtb20/following{/other_user}", "gists_url": "https://api.github.com/users/jtb20/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtb20/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtb20/subscriptions", "organizations_url": "https://api.github.com/users/jtb20/orgs", "repos_url": "https://api.github.com/users/jtb20/repos", "events_url": "https://api.github.com/users/jtb20/events{/privacy}", "received_events_url": "https://api.github.com/users/jtb20/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2d8882865f812124cce403d0a28d372dd6d712b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d8882865f812124cce403d0a28d372dd6d712b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d8882865f812124cce403d0a28d372dd6d712b2"}], "stats": {"total": 53, "additions": 51, "deletions": 2}, "files": [{"sha": "2b0e478a978eda66ae9c512ffb60b621f004e0a6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/854b8a40570fee8d8c22acf21355a8ab88f17557/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/854b8a40570fee8d8c22acf21355a8ab88f17557/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=854b8a40570fee8d8c22acf21355a8ab88f17557", "patch": "@@ -1,3 +1,10 @@\n+2009-11-24  Julian Brown  <julian@codesourcery.com>\n+\t    Paul Brook  <paul@codesourcery.com>\n+\n+\t* config/arm/arm.c (TARGET_DWARF_REGISTER_SPAN): Define.\n+\t(arm_dwarf_register_span): New function.\n+\t(arm_dbx_register_number): Add VFPv3 dwarf numbering.\n+\n 2009-11-24  David Binderman <dcb314@hotmail.com>\n \n \t* cfgrtl.c (commit_one_edge_insertion): Remove set but not used"}, {"sha": "b9213eb8f7d556d2f7387bd069f67ed114a26166", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 44, "deletions": 2, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/854b8a40570fee8d8c22acf21355a8ab88f17557/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/854b8a40570fee8d8c22acf21355a8ab88f17557/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=854b8a40570fee8d8c22acf21355a8ab88f17557", "patch": "@@ -191,6 +191,7 @@ static void arm_unwind_emit (FILE *, rtx);\n static bool arm_output_ttype (rtx);\n #endif\n static void arm_dwarf_handle_frame_unspec (const char *, rtx, int);\n+static rtx arm_dwarf_register_span (rtx);\n \n static tree arm_cxx_guard_type (void);\n static bool arm_cxx_guard_mask_bit (void);\n@@ -438,6 +439,9 @@ static const struct attribute_spec arm_attribute_table[] =\n #undef TARGET_DWARF_HANDLE_FRAME_UNSPEC\n #define TARGET_DWARF_HANDLE_FRAME_UNSPEC arm_dwarf_handle_frame_unspec\n \n+#undef TARGET_DWARF_REGISTER_SPAN\n+#define TARGET_DWARF_REGISTER_SPAN arm_dwarf_register_span\n+\n #undef  TARGET_CANNOT_COPY_INSN_P\n #define TARGET_CANNOT_COPY_INSN_P arm_cannot_copy_insn_p\n \n@@ -20752,9 +20756,14 @@ arm_dbx_register_number (unsigned int regno)\n   if (IS_FPA_REGNUM (regno))\n     return (TARGET_AAPCS_BASED ? 96 : 16) + regno - FIRST_FPA_REGNUM;\n \n-  /* FIXME: VFPv3 register numbering.  */\n   if (IS_VFP_REGNUM (regno))\n-    return 64 + regno - FIRST_VFP_REGNUM;\n+    {\n+      /* See comment in arm_dwarf_register_span.  */\n+      if (VFP_REGNO_OK_FOR_SINGLE (regno))\n+\treturn 64 + regno - FIRST_VFP_REGNUM;\n+      else\n+\treturn 256 + (regno - FIRST_VFP_REGNUM) / 2;\n+    }\n \n   if (IS_IWMMXT_GR_REGNUM (regno))\n     return 104 + regno - FIRST_IWMMXT_GR_REGNUM;\n@@ -20765,6 +20774,39 @@ arm_dbx_register_number (unsigned int regno)\n   gcc_unreachable ();\n }\n \n+/* Dwarf models VFPv3 registers as 32 64-bit registers.\n+   GCC models tham as 64 32-bit registers, so we need to describe this to\n+   the DWARF generation code.  Other registers can use the default.  */\n+static rtx\n+arm_dwarf_register_span (rtx rtl)\n+{\n+  unsigned regno;\n+  int nregs;\n+  int i;\n+  rtx p;\n+\n+  regno = REGNO (rtl);\n+  if (!IS_VFP_REGNUM (regno))\n+    return NULL_RTX;\n+\n+  /* XXX FIXME: The EABI defines two VFP register ranges:\n+\t64-95: Legacy VFPv2 numbering for S0-S31 (obsolescent)\n+\t256-287: D0-D31\n+     The recommended encoding for S0-S31 is a DW_OP_bit_piece of the\n+     corresponding D register.  Until GDB supports this, we shall use the\n+     legacy encodings.  We also use these encodings for D0-D15 for\n+     compatibility with older debuggers.  */\n+  if (VFP_REGNO_OK_FOR_SINGLE (regno))\n+    return NULL_RTX;\n+\n+  nregs = GET_MODE_SIZE (GET_MODE (rtl)) / 8;\n+  p = gen_rtx_PARALLEL (VOIDmode, rtvec_alloc (nregs));\n+  regno = (regno - FIRST_VFP_REGNUM) / 2;\n+  for (i = 0; i < nregs; i++)\n+    XVECEXP (p, 0, i) = gen_rtx_REG (DImode, 256 + regno + i);\n+\n+  return p;\n+}\n \n #ifdef TARGET_UNWIND_INFO\n /* Emit unwind directives for a store-multiple instruction or stack pointer"}]}