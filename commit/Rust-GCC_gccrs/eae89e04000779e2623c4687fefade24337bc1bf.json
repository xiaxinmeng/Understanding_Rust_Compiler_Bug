{"sha": "eae89e04000779e2623c4687fefade24337bc1bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWFlODllMDQwMDA3NzllMjYyM2M0Njg3ZmVmYWRlMjQzMzdiYzFiZg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@phydeaux.cygnus.com", "date": "1994-10-27T01:22:58Z"}, "committer": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1994-10-27T01:22:58Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r8347", "tree": {"sha": "4e5b97d302910a34e3d6be43511996ecb3e9d0f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e5b97d302910a34e3d6be43511996ecb3e9d0f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eae89e04000779e2623c4687fefade24337bc1bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eae89e04000779e2623c4687fefade24337bc1bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eae89e04000779e2623c4687fefade24337bc1bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eae89e04000779e2623c4687fefade24337bc1bf/comments", "author": null, "committer": null, "parents": [{"sha": "1c6c2b05c732ed415fe812c596fe71ccc1828583", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c6c2b05c732ed415fe812c596fe71ccc1828583", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c6c2b05c732ed415fe812c596fe71ccc1828583"}], "stats": {"total": 47, "additions": 42, "deletions": 5}, "files": [{"sha": "84c32316cc9cdd4f3c11688d4c5b0cca1254cae8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eae89e04000779e2623c4687fefade24337bc1bf/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eae89e04000779e2623c4687fefade24337bc1bf/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=eae89e04000779e2623c4687fefade24337bc1bf", "patch": "@@ -1,3 +1,27 @@\n+Sun Oct 23 13:19:55 1994  Jason Merrill  (jason@phydeaux.cygnus.com)\n+\n+        * decl2.c: Declare flag_access_control.\n+        (struct lang_f_options): Add access-control.\n+        * expr.c (cplus_expand_expr, NEW_EXPR): Unset flag_access_control\n+        for the call to expand_aggr_init to copy the object out of the\n+        pcc_struct_return slot.\n+        * search.c (compute_access): if (!flag_access_control) return\n+        access_public.\n+\n+Fri Oct 21 00:32:54 1994  Jason Merrill  (jason@phydeaux.cygnus.com)\n+\n+        * decl.c (init_decl_processing): Use __pure_virtual for abort_fndecl\n+        instead of abort, since the OSF/1 dynamic linker doesn't like to see\n+        relocation entries for abort.\n+\n+        * tree.c (array_type_nelts_total): Use sizetype, not\n+        integer_type_node.\n+        (array_type_nelts_top): Ditto.\n+\n+Mon Oct 17 18:03:15 1994  Jason Merrill  (jason@phydeaux.cygnus.com)\n+\n+        * decl.c (init_decl_processing): Make alloca a builtin.\n+\n Mon Oct 17 15:56:11 1994  Mike Stump  <mrs@cygnus.com>\n \n \t* except.c (expand_start_catch_block): Make sure the false label"}, {"sha": "048ce5eb0e254c24db195933e549fcf0d10e2f5b", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eae89e04000779e2623c4687fefade24337bc1bf/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eae89e04000779e2623c4687fefade24337bc1bf/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=eae89e04000779e2623c4687fefade24337bc1bf", "patch": "@@ -4564,7 +4564,6 @@ init_decl_processing ()\n      Declare _exit just to mark it as volatile.  */\n   if (! flag_no_builtin && !flag_no_nonansi_builtin)\n     {\n-#if 0\t\t\t\t/* Why is this disabled? (jason 8/9/94) */\n       temp = builtin_function (\"alloca\",\n \t\t\t       build_function_type (ptr_type_node,\n \t\t\t\t\t\t    tree_cons (NULL_TREE,\n@@ -4573,7 +4572,6 @@ init_decl_processing ()\n \t\t\t       BUILT_IN_ALLOCA, NULL_PTR);\n       /* Suppress error if redefined as a non-function.  */\n       DECL_BUILT_IN_NONANSI (temp) = 1;\n-#endif\n       temp = builtin_function (\"ffs\", int_ftype_int, BUILT_IN_FFS, NULL_PTR);\n       /* Suppress error if redefined as a non-function.  */\n       DECL_BUILT_IN_NONANSI (temp) = 1;\n@@ -4987,7 +4985,7 @@ init_decl_processing ()\n \t\t NOT_BUILT_IN);\n \n   abort_fndecl\n-    = define_function (\"abort\",\n+    = define_function (\"__pure_virtual\",\n \t\t       build_function_type (void_type_node, void_list_node),\n \t\t       NOT_BUILT_IN, 0, 0);\n "}, {"sha": "a50b7bce12931736f6f28719770bf1028be44d57", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eae89e04000779e2623c4687fefade24337bc1bf/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eae89e04000779e2623c4687fefade24337bc1bf/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=eae89e04000779e2623c4687fefade24337bc1bf", "patch": "@@ -331,6 +331,9 @@ int flag_huge_objects;\n    definitions.  */\n int flag_conserve_space;\n \n+/* Nonzero if we want to obey access control semantics.  */\n+int flag_access_control = 1;\n+\n /* Table of language-dependent -f options.\n    STRING is the option name.  VARIABLE is the address of the variable.\n    ON_VALUE is the value to store in VARIABLE\n@@ -372,6 +375,7 @@ static struct { char *string; int *variable; int on_value;} lang_f_options[] =\n   {\"conserve-space\", &flag_conserve_space, 1},\n   {\"vtable-thunks\", &flag_vtable_thunks, 1},\n   {\"short-temps\", &flag_short_temps, 1},\n+  {\"access-control\", &flag_access_control, 1},\n   {\"nonansi-builtins\", &flag_no_nonansi_builtin, 0}\n };\n "}, {"sha": "3b4f65d1b81d74e34afe29d3161afe89e0eabc97", "filename": "gcc/cp/expr.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eae89e04000779e2623c4687fefade24337bc1bf/gcc%2Fcp%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eae89e04000779e2623c4687fefade24337bc1bf/gcc%2Fcp%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexpr.c?ref=eae89e04000779e2623c4687fefade24337bc1bf", "patch": "@@ -148,9 +148,16 @@ cplus_expand_expr (exp, target, tmode, modifier)\n \t  {\n \t    if (pcc_struct_return)\n \t      {\n+\t\textern int flag_access_control;\n+\t\tint old_ac = flag_access_control;\n+\n \t\ttree init = build (RTL_EXPR, type, 0, return_target);\n \t\tTREE_ADDRESSABLE (init) = 1;\n+\n+\t\tflag_access_control = 0;\n \t\texpand_aggr_init (slot, init, 0);\n+\t\tflag_access_control = old_ac;\n+\n \t\tif (TYPE_NEEDS_DESTRUCTOR (type))\n \t\t  {\n \t\t    init = build (RTL_EXPR, build_reference_type (type), 0,"}, {"sha": "7f6af72689811babd739dd50beb17f12528d1504", "filename": "gcc/cp/search.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eae89e04000779e2623c4687fefade24337bc1bf/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eae89e04000779e2623c4687fefade24337bc1bf/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=eae89e04000779e2623c4687fefade24337bc1bf", "patch": "@@ -768,6 +768,7 @@ compute_access (basetype_path, field)\n   tree types;\n   tree context;\n   int protected_ok, via_protected;\n+  extern int flag_access_control;\n #if 1\n   /* Replaces static decl above.  */\n   tree previous_scope;\n@@ -776,6 +777,9 @@ compute_access (basetype_path, field)\n     ((TREE_CODE (field) == FUNCTION_DECL && DECL_STATIC_FUNCTION_P (field))\n      || (TREE_CODE (field) != FUNCTION_DECL && TREE_STATIC (field)));\n \n+  if (! flag_access_control)\n+    return access_public;\n+\n   /* The field lives in the current class.  */\n   if (BINFO_TYPE (basetype_path) == current_class_type)\n     return access_public;"}, {"sha": "5db4a66e3080139d5f87596f4c9733f9b8a7cadc", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eae89e04000779e2623c4687fefade24337bc1bf/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eae89e04000779e2623c4687fefade24337bc1bf/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=eae89e04000779e2623c4687fefade24337bc1bf", "patch": "@@ -1765,7 +1765,7 @@ tree\n array_type_nelts_top (type)\n      tree type;\n {\n-  return fold (build (PLUS_EXPR, integer_type_node,\n+  return fold (build (PLUS_EXPR, sizetype,\n \t\t      array_type_nelts (type),\n \t\t      integer_one_node));\n }\n@@ -1783,7 +1783,7 @@ array_type_nelts_total (type)\n   while (TREE_CODE (type) == ARRAY_TYPE)\n     {\n       tree n = array_type_nelts_top (type);\n-      sz = fold (build (MULT_EXPR, integer_type_node, sz, n));\n+      sz = fold (build (MULT_EXPR, sizetype, sz, n));\n       type = TREE_TYPE (type);\n     }\n   return sz;"}]}