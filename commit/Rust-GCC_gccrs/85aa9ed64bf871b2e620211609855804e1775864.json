{"sha": "85aa9ed64bf871b2e620211609855804e1775864", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODVhYTllZDY0YmY4NzFiMmU2MjAyMTE2MDk4NTU4MDRlMTc3NTg2NA==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@arm.com", "date": "2017-10-18T15:56:15Z"}, "committer": {"name": "Bin Cheng", "email": "amker@gcc.gnu.org", "date": "2017-10-18T15:56:15Z"}, "message": "re PR tree-optimization/82574 (wrong code at -O3 on x86_64-linux-gnu)\n\n\tPR tree-optimization/82574\n\t* tree-loop-distribution.c (find_single_drs): New parameter.  Check\n\tthat data reference must be executed exactly once per iteration\n\tagainst the outermost loop in nest.\n\t(classify_partition): Update call to above function.\n\n\tgcc/testsuite\n\t* gcc.dg/tree-ssa/pr82574.c: New test.\n\nFrom-SVN: r253857", "tree": {"sha": "64a5269b9e0cf50625e2eb19ec76c7064588216e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64a5269b9e0cf50625e2eb19ec76c7064588216e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85aa9ed64bf871b2e620211609855804e1775864", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85aa9ed64bf871b2e620211609855804e1775864", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85aa9ed64bf871b2e620211609855804e1775864", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85aa9ed64bf871b2e620211609855804e1775864/comments", "author": null, "committer": null, "parents": [{"sha": "e33507e33c20c23d4b72687ce5129dcc4c75f0be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e33507e33c20c23d4b72687ce5129dcc4c75f0be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e33507e33c20c23d4b72687ce5129dcc4c75f0be"}], "stats": {"total": 58, "additions": 47, "deletions": 11}, "files": [{"sha": "1eee85d3328325a905efab28d35db1a0bceedd16", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85aa9ed64bf871b2e620211609855804e1775864/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85aa9ed64bf871b2e620211609855804e1775864/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=85aa9ed64bf871b2e620211609855804e1775864", "patch": "@@ -1,3 +1,11 @@\n+2017-10-18  Bin Cheng  <bin.cheng@arm.com>\n+\n+\tPR tree-optimization/82574\n+\t* tree-loop-distribution.c (find_single_drs): New parameter.  Check\n+\tthat data reference must be executed exactly once per iteration\n+\tagainst the outermost loop in nest.\n+\t(classify_partition): Update call to above function.\n+\n 2017-10-18  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/82591"}, {"sha": "d642a6aba80a5f66327ddf30223cd19f8843d69d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85aa9ed64bf871b2e620211609855804e1775864/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85aa9ed64bf871b2e620211609855804e1775864/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=85aa9ed64bf871b2e620211609855804e1775864", "patch": "@@ -1,3 +1,8 @@\n+2017-10-18  Bin Cheng  <bin.cheng@arm.com>\n+\n+\tPR tree-optimization/82574\n+\t* gcc.dg/tree-ssa/pr82574.c: New test.\n+\n 2017-10-18  Martin Liska  <mliska@suse.cz>\n \n \t* gcc.dg/tree-prof/switch-case-2.c: Scan IPA profile dump"}, {"sha": "8fc459631ef005aa3bc9fa8f46b8e929e2dacaa2", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr82574.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85aa9ed64bf871b2e620211609855804e1775864/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr82574.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85aa9ed64bf871b2e620211609855804e1775864/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr82574.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr82574.c?ref=85aa9ed64bf871b2e620211609855804e1775864", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3\" } */\n+\n+unsigned char a, b, c, d[200][200];\n+\n+void abort (void);\n+\n+int main ()\n+{\n+  for (; a < 200; a++)\n+    for (b = 0; b < 200; b++)\n+      if (c)\n+\td[a][b] = 1;\n+\n+  if ((c && d[0][0] != 1) || (!c && d[0][0] != 0))\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "6abb7e43421074d64b3dcd501850ff32071a72a7", "filename": "gcc/tree-loop-distribution.c", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85aa9ed64bf871b2e620211609855804e1775864/gcc%2Ftree-loop-distribution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85aa9ed64bf871b2e620211609855804e1775864/gcc%2Ftree-loop-distribution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-loop-distribution.c?ref=85aa9ed64bf871b2e620211609855804e1775864", "patch": "@@ -1283,12 +1283,12 @@ build_rdg_partition_for_vertex (struct graph *rdg, int v)\n   return partition;\n }\n \n-/* Given PARTITION of RDG, record single load/store data references for\n-   builtin partition in SRC_DR/DST_DR, return false if there is no such\n+/* Given PARTITION of LOOP and RDG, record single load/store data references\n+   for builtin partition in SRC_DR/DST_DR, return false if there is no such\n    data references.  */\n \n static bool\n-find_single_drs (struct graph *rdg, partition *partition,\n+find_single_drs (struct loop *loop, struct graph *rdg, partition *partition,\n \t\t data_reference_p *dst_dr, data_reference_p *src_dr)\n {\n   unsigned i;\n@@ -1344,10 +1344,12 @@ find_single_drs (struct graph *rdg, partition *partition,\n       && DECL_BIT_FIELD (TREE_OPERAND (DR_REF (single_st), 1)))\n     return false;\n \n-  /* Data reference must be executed exactly once per iteration.  */\n+  /* Data reference must be executed exactly once per iteration of each\n+     loop in the loop nest.  We only need to check dominance information\n+     against the outermost one in a perfect loop nest because a bb can't\n+     dominate outermost loop's latch without dominating inner loop's.  */\n   basic_block bb_st = gimple_bb (DR_STMT (single_st));\n-  struct loop *inner = bb_st->loop_father;\n-  if (!dominated_by_p (CDI_DOMINATORS, inner->latch, bb_st))\n+  if (!dominated_by_p (CDI_DOMINATORS, loop->latch, bb_st))\n     return false;\n \n   if (single_ld)\n@@ -1365,14 +1367,16 @@ find_single_drs (struct graph *rdg, partition *partition,\n \n       /* Load and store must be in the same loop nest.  */\n       basic_block bb_ld = gimple_bb (DR_STMT (single_ld));\n-      if (inner != bb_ld->loop_father)\n+      if (bb_st->loop_father != bb_ld->loop_father)\n \treturn false;\n \n-      /* Data reference must be executed exactly once per iteration.  */\n-      if (!dominated_by_p (CDI_DOMINATORS, inner->latch, bb_ld))\n+      /* Data reference must be executed exactly once per iteration.\n+\t Same as single_st, we only need to check against the outermost\n+\t loop.  */\n+      if (!dominated_by_p (CDI_DOMINATORS, loop->latch, bb_ld))\n \treturn false;\n \n-      edge e = single_exit (inner);\n+      edge e = single_exit (bb_st->loop_father);\n       bool dom_ld = dominated_by_p (CDI_DOMINATORS, e->src, bb_ld);\n       bool dom_st = dominated_by_p (CDI_DOMINATORS, e->src, bb_st);\n       if (dom_ld != dom_st)\n@@ -1611,7 +1615,7 @@ classify_partition (loop_p loop, struct graph *rdg, partition *partition,\n     return;\n \n   /* Find single load/store data references for builtin partition.  */\n-  if (!find_single_drs (rdg, partition, &single_st, &single_ld))\n+  if (!find_single_drs (loop, rdg, partition, &single_st, &single_ld))\n     return;\n \n   /* Classify the builtin kind.  */"}]}