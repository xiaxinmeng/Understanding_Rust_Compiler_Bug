{"sha": "30864e1408a8663cf6f2b4c7cd07fce1fd13128f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzA4NjRlMTQwOGE4NjYzY2Y2ZjJiNGM3Y2QwN2ZjZTFmZDEzMTI4Zg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-12-09T21:47:49Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-12-09T21:47:49Z"}, "message": "alpha.c (alpha_align_insns): Use align_functions, not FUNCTION_BOUNDARY.\n\n        * config/alpha/alpha.c (alpha_align_insns): Use align_functions,\n        not FUNCTION_BOUNDARY.\n        * config/alpha/alpha.h (TRAMPOLINE_ALIGNMENT): New.\n        * config/alpha/alpha32.h, config/alpha/vms.h: Likewise.\n        * config/alpha/unicosmk.h (FUNCTION_BOUNDARY): Remove.\n\nFrom-SVN: r47819", "tree": {"sha": "1562e6e43a90679c53aae5cc66c6d7d074549a47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1562e6e43a90679c53aae5cc66c6d7d074549a47"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30864e1408a8663cf6f2b4c7cd07fce1fd13128f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30864e1408a8663cf6f2b4c7cd07fce1fd13128f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30864e1408a8663cf6f2b4c7cd07fce1fd13128f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30864e1408a8663cf6f2b4c7cd07fce1fd13128f/comments", "author": null, "committer": null, "parents": [{"sha": "e41710661ceadb59dde0004bce0d609be8049370", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e41710661ceadb59dde0004bce0d609be8049370", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e41710661ceadb59dde0004bce0d609be8049370"}], "stats": {"total": 42, "additions": 30, "deletions": 12}, "files": [{"sha": "7381bd05f39eb7f968921ce73544dde878acdc0a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30864e1408a8663cf6f2b4c7cd07fce1fd13128f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30864e1408a8663cf6f2b4c7cd07fce1fd13128f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=30864e1408a8663cf6f2b4c7cd07fce1fd13128f", "patch": "@@ -1,3 +1,11 @@\n+2001-12-09  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/alpha/alpha.c (alpha_align_insns): Use align_functions,\n+\tnot FUNCTION_BOUNDARY.\n+\t* config/alpha/alpha.h (TRAMPOLINE_ALIGNMENT): New.\n+\t* config/alpha/alpha32.h, config/alpha/vms.h: Likewise.\n+\t* config/alpha/unicosmk.h (FUNCTION_BOUNDARY): Remove.\n+\n 2001-12-09  Hans-Peter Nilsson  <hp@bitrange.com>\n \n \t* config/mmix/mmix.c (mmix_function_block_profiler,"}, {"sha": "a4ca0df7c6c0f70d99f7c3e26d9bc41a6be4b929", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30864e1408a8663cf6f2b4c7cd07fce1fd13128f/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30864e1408a8663cf6f2b4c7cd07fce1fd13128f/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=30864e1408a8663cf6f2b4c7cd07fce1fd13128f", "patch": "@@ -7570,8 +7570,12 @@ alpha_align_insns (insns, max_align, next_group, next_nop)\n   /* Let shorten branches care for assigning alignments to code labels.  */\n   shorten_branches (insns);\n \n-  align = (FUNCTION_BOUNDARY / BITS_PER_UNIT < max_align\n-\t   ? FUNCTION_BOUNDARY / BITS_PER_UNIT : max_align);\n+  if (align_functions < 4)\n+    align = 4;\n+  else if (align_functions < max_align)\n+    align = align_functions;\n+  else\n+    align = max_align;\n \n   ofs = prev_in_use = 0;\n   i = insns;"}, {"sha": "504fe8863da105e805737ccad27b45ef4d2cfc20", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30864e1408a8663cf6f2b4c7cd07fce1fd13128f/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30864e1408a8663cf6f2b4c7cd07fce1fd13128f/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=30864e1408a8663cf6f2b4c7cd07fce1fd13128f", "patch": "@@ -1317,8 +1317,7 @@ extern struct alpha_compare alpha_compare;\n    The trampoline should set the static chain pointer to value placed\n    into the trampoline and should branch to the specified routine.  \n    Note that $27 has been set to the address of the trampoline, so we can\n-   use it for addressability of the two data items.  Trampolines are always\n-   aligned to FUNCTION_BOUNDARY, which is 64 bits.  */\n+   use it for addressability of the two data items.  */\n \n #define TRAMPOLINE_TEMPLATE(FILE)\t\t\\\n do {\t\t\t\t\t\t\\\n@@ -1338,6 +1337,10 @@ do {\t\t\t\t\t\t\\\n \n #define TRAMPOLINE_SIZE    32\n \n+/* The alignment of a trampoline, in bits.  */\n+\n+#define TRAMPOLINE_ALIGNMENT  64\n+\n /* Emit RTL insns to initialize the variable parts of a trampoline.\n    FNADDR is an RTX for the address of the function's pure code.\n    CXT is an RTX for the static chain value for the function.  */"}, {"sha": "8d9df0b8ebf9e4eff59a0babf326e18007051d06", "filename": "gcc/config/alpha/alpha32.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30864e1408a8663cf6f2b4c7cd07fce1fd13128f/gcc%2Fconfig%2Falpha%2Falpha32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30864e1408a8663cf6f2b4c7cd07fce1fd13128f/gcc%2Fconfig%2Falpha%2Falpha32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha32.h?ref=30864e1408a8663cf6f2b4c7cd07fce1fd13128f", "patch": "@@ -71,6 +71,11 @@ Boston, MA 02111-1307, USA.  */\n #undef TRAMPOLINE_SIZE\n #define TRAMPOLINE_SIZE    24\n \n+/* The alignment of a trampoline, in bits.  */\n+\n+#undef TRAMPOLINE_ALIGNMENT\n+#define TRAMPOLINE_ALIGNMENT  32\n+\n /* Emit RTL insns to initialize the variable parts of a trampoline.\n    FNADDR is an RTX for the address of the function's pure code.\n    CXT is an RTX for the static chain value for the function.  */"}, {"sha": "21b719fdf2e378b5cf1c08b6ddd43e9a38c205a7", "filename": "gcc/config/alpha/unicosmk.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30864e1408a8663cf6f2b4c7cd07fce1fd13128f/gcc%2Fconfig%2Falpha%2Funicosmk.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30864e1408a8663cf6f2b4c7cd07fce1fd13128f/gcc%2Fconfig%2Falpha%2Funicosmk.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Funicosmk.h?ref=30864e1408a8663cf6f2b4c7cd07fce1fd13128f", "patch": "@@ -73,12 +73,6 @@ Boston, MA 02111-1307, USA.  */\n #undef STRUCTURE_SIZE_BOUNDARY\n #define STRUCTURE_SIZE_BOUNDARY 64\n \n-/* Allocation boundary (in *bits*) for the code of a function. Functions\n-   should be cache-aligned on the T3E.  */\n-\n-#undef FUNCTION_BOUNDARY\n-#define FUNCTION_BOUNDARY 256\n-\n /* No data type wants to be aligned rounder than this.  */\n \n #undef BIGGEST_ALIGNMENT"}, {"sha": "c46b94379ee689979d8cee949ad8aef0765ff089", "filename": "gcc/config/alpha/vms.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30864e1408a8663cf6f2b4c7cd07fce1fd13128f/gcc%2Fconfig%2Falpha%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30864e1408a8663cf6f2b4c7cd07fce1fd13128f/gcc%2Fconfig%2Falpha%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvms.h?ref=30864e1408a8663cf6f2b4c7cd07fce1fd13128f", "patch": "@@ -351,8 +351,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    The trampoline should set the static chain pointer to value placed\n    into the trampoline and should branch to the specified routine.  \n    Note that $27 has been set to the address of the trampoline, so we can\n-   use it for addressability of the two data items.  Trampolines are always\n-   aligned to FUNCTION_BOUNDARY, which is 64 bits.  */\n+   use it for addressability of the two data items.  */\n \n #undef TRAMPOLINE_TEMPLATE\n #define TRAMPOLINE_TEMPLATE(FILE)\t\t\\\n@@ -367,6 +366,11 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef TRAMPOLINE_SIZE\n #define TRAMPOLINE_SIZE    32\n \n+/* The alignment of a trampoline, in bits.  */\n+\n+#undef TRAMPOLINE_ALIGNMENT\n+#define TRAMPOLINE_ALIGNMENT  64\n+\n /* Emit RTL insns to initialize the variable parts of a trampoline.\n    FNADDR is an RTX for the address of the function's pure code.\n    CXT is an RTX for the static chain value for the function.  */"}]}