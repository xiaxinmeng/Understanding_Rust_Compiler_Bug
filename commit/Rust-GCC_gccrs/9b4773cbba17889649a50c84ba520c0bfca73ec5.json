{"sha": "9b4773cbba17889649a50c84ba520c0bfca73ec5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWI0NzczY2JiYTE3ODg5NjQ5YTUwYzg0YmE1MjBjMGJmY2E3M2VjNQ==", "commit": {"author": {"name": "Warren Levy", "email": "warrenl@cygnus.com", "date": "2000-08-04T00:42:20Z"}, "committer": {"name": "Warren Levy", "email": "warrenl@gcc.gnu.org", "date": "2000-08-04T00:42:20Z"}, "message": "ObjectInputStream.java (readFields): Turn off readDataFromBlock while reading via GetField.\n\n\t* java/io/ObjectInputStream.java (readFields): Turn off\n\treadDataFromBlock while reading via GetField.\n\t(GetField$1.get(String, Object)): Pass Class of default value to\n\tgetField.\n\t(getField): Allow for null default values.\n\n\t* java/io/ObjectOutputStream.java: Fixed typo in comment.\n\t(PutField$1.put): Fixed calls of checkType in most of the put\n\tmethods to pass the correct parameter.\n\t(PutField$1.put(String, Object)): Allow for null value arg.\n\t(PutField$1.write): Turn off writeDataAsBlocks while writing via\n\tPutField.\n\n\t* java/io/ObjectStreamClass.java (serialPersistentFields): Fixed\n\ttypo in spec'ed field name.\n\t(getSerialPersistentFields): Changed spelling of method to match\n\tthe correct spelling of the spec'ed field name.\n\nMore serialization fixes per Mauve errors.\n\nFrom-SVN: r35468", "tree": {"sha": "8ab868484bc80edbae9a9b855c3efeebafc7bf00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ab868484bc80edbae9a9b855c3efeebafc7bf00"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b4773cbba17889649a50c84ba520c0bfca73ec5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b4773cbba17889649a50c84ba520c0bfca73ec5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b4773cbba17889649a50c84ba520c0bfca73ec5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b4773cbba17889649a50c84ba520c0bfca73ec5/comments", "author": null, "committer": null, "parents": [{"sha": "a1bcc528be03e3414d165af5303b771760cbf840", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1bcc528be03e3414d165af5303b771760cbf840", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1bcc528be03e3414d165af5303b771760cbf840"}], "stats": {"total": 67, "additions": 50, "deletions": 17}, "files": [{"sha": "aa1ee6f4e661636219d92efd2e413076275a0f68", "filename": "libjava/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b4773cbba17889649a50c84ba520c0bfca73ec5/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b4773cbba17889649a50c84ba520c0bfca73ec5/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=9b4773cbba17889649a50c84ba520c0bfca73ec5", "patch": "@@ -1,3 +1,23 @@\n+2000-08-03  Warren Levy  <warrenl@cygnus.com>\n+\n+\t* java/io/ObjectInputStream.java (readFields): Turn off\n+\treadDataFromBlock while reading via GetField.\n+\t(GetField$1.get(String, Object)): Pass Class of default value to\n+\tgetField.\n+\t(getField): Allow for null default values.\n+\n+\t* java/io/ObjectOutputStream.java: Fixed typo in comment.\n+\t(PutField$1.put): Fixed calls of checkType in most of the put\n+\tmethods to pass the correct parameter.\n+\t(PutField$1.put(String, Object)): Allow for null value arg.\n+\t(PutField$1.write): Turn off writeDataAsBlocks while writing via\n+\tPutField.\n+\n+\t* java/io/ObjectStreamClass.java (serialPersistentFields): Fixed\n+\ttypo in spec'ed field name.\n+\t(getSerialPersistentFields): Changed spelling of method to match\n+\tthe correct spelling of the spec'ed field name.\n+\n 2000-08-03  Tom Tromey  <tromey@cygnus.com>\n \n \t* Makefile.in: Rebuilt."}, {"sha": "53353dcffe7285427bbc05eefea3d6b681bc692a", "filename": "libjava/java/io/ObjectInputStream.java", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b4773cbba17889649a50c84ba520c0bfca73ec5/libjava%2Fjava%2Fio%2FObjectInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b4773cbba17889649a50c84ba520c0bfca73ec5/libjava%2Fjava%2Fio%2FObjectInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FObjectInputStream.java?ref=9b4773cbba17889649a50c84ba520c0bfca73ec5", "patch": "@@ -700,9 +700,15 @@ public GetField readFields ()\n     final ObjectStreamClass clazz = this.currentObjectStreamClass;\n     final byte[] prim_field_data = new byte[clazz.primFieldSize];\n     final Object[] objs = new Object[clazz.objectFieldCount];\n+\n+    // Apparently Block data is not used with GetField as per\n+    // empirical evidence against JDK 1.2.  Also see Mauve test\n+    // java.io.ObjectInputOutput.Test.GetPutField.\n+    setBlockDataMode (false);\n     readFully (prim_field_data);\n     for (int i = 0; i < objs.length; ++ i)\n       objs[i] = readObject ();\n+    setBlockDataMode (true);\n \n     return new GetField ()\n     {\n@@ -843,7 +849,8 @@ public double get (String name, double defvalue)\n       public Object get (String name, Object defvalue)\n \tthrows IOException, IllegalArgumentException\n       {\n-\tObjectStreamField field = getField (name, null);\n+\tObjectStreamField field =\n+\t  getField (name, defvalue == null ? null : defvalue.getClass ());\n \n \tif (field == null)\n \t  return defvalue;\n@@ -862,7 +869,7 @@ private ObjectStreamField getField (String name, Class type)\n \tClass field_type = field.getType ();\n \n \tif (type == field_type ||\n-\t    (type != null && field_type.isPrimitive ()))\n+\t    (type == null && ! field_type.isPrimitive ()))\n \t  return field;\n \n \tthrow new IllegalArgumentException (\"Field requested is of type \""}, {"sha": "c4ffc8c6d1e027ee01c9d023de8cda34678ea6e0", "filename": "libjava/java/io/ObjectOutputStream.java", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b4773cbba17889649a50c84ba520c0bfca73ec5/libjava%2Fjava%2Fio%2FObjectOutputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b4773cbba17889649a50c84ba520c0bfca73ec5/libjava%2Fjava%2Fio%2FObjectOutputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FObjectOutputStream.java?ref=9b4773cbba17889649a50c84ba520c0bfca73ec5", "patch": "@@ -138,7 +138,7 @@ public ObjectOutputStream (OutputStream out) throws IOException\n      output stream by writing out information about its class, then\n      writing out each of the objects non-transient, non-static\n      fields.  If any of these fields are other objects,\n-     the are written out in the same manner.\n+     they are written out in the same manner.\n \n      This method can be overriden by a class by implementing\n      <code>private void writeObject (ObjectOutputStream)</code>.\n@@ -846,7 +846,7 @@ public void put (String name, char value)\n \t  {\n \t    ObjectStreamField field\n \t      = currentObjectStreamClass.getField (name);\n-\t    checkType (field, 'B');\n+\t    checkType (field, 'C');\n \t    int off = field.getOffset ();\n \t    prim_field_data[off++] = (byte)(value >>> 8);\n \t    prim_field_data[off] = (byte)value;\n@@ -857,7 +857,7 @@ public void put (String name, double value)\n \t  {\n \t    ObjectStreamField field\n \t      = currentObjectStreamClass.getField (name);\n-\t    checkType (field, 'B');\n+\t    checkType (field, 'D');\n \t    int off = field.getOffset ();\n \t    long l_value = Double.doubleToLongBits (value);\n \t    prim_field_data[off++] = (byte)(l_value >>> 52);\n@@ -875,7 +875,7 @@ public void put (String name, float value)\n \t  {\n \t    ObjectStreamField field\n \t      = currentObjectStreamClass.getField (name);\n-\t    checkType (field, 'B');\n+\t    checkType (field, 'F');\n \t    int off = field.getOffset ();\n \t    int i_value = Float.floatToIntBits (value);\n \t    prim_field_data[off++] = (byte)(i_value >>> 24);\n@@ -889,7 +889,7 @@ public void put (String name, int value)\n \t  {\n \t    ObjectStreamField field\n \t      = currentObjectStreamClass.getField (name);\n-\t    checkType (field, 'B');\n+\t    checkType (field, 'I');\n \t    int off = field.getOffset ();\n \t    prim_field_data[off++] = (byte)(value >>> 24);\n \t    prim_field_data[off++] = (byte)(value >>> 16);\n@@ -902,7 +902,7 @@ public void put (String name, long value)\n \t  {\n \t    ObjectStreamField field\n \t      = currentObjectStreamClass.getField (name);\n-\t    checkType (field, 'B');\n+\t    checkType (field, 'J');\n \t    int off = field.getOffset ();\n \t    prim_field_data[off++] = (byte)(value >>> 52);\n \t    prim_field_data[off++] = (byte)(value >>> 48);\n@@ -919,7 +919,7 @@ public void put (String name, short value)\n \t  {\n \t    ObjectStreamField field\n \t      = currentObjectStreamClass.getField (name);\n-\t    checkType (field, 'B');\n+\t    checkType (field, 'S');\n \t    int off = field.getOffset ();\n \t    prim_field_data[off++] = (byte)(value >>> 8);\n \t    prim_field_data[off] = (byte)value;\n@@ -930,16 +930,22 @@ public void put (String name, Object value)\n \t  {\n \t    ObjectStreamField field\n \t      = currentObjectStreamClass.getField (name);\n-\t    if (! field.getType ().isAssignableFrom (value.getClass ()))\n+\t    if (value != null &&\n+\t    \t! field.getType ().isAssignableFrom (value.getClass ()))\n \t      throw new IllegalArgumentException ();\n \t    objs[field.getOffset ()] = value;\n \t  }\n \n \tpublic void write (ObjectOutput out) throws IOException\n \t  {\n+\t    // Apparently Block data is not used with PutField as per\n+\t    // empirical evidence against JDK 1.2.  Also see Mauve test\n+\t    // java.io.ObjectInputOutput.Test.GetPutField.\n+\t    setBlockDataMode (false);\n \t    out.write (prim_field_data);\n \t    for (int i = 0; i < objs.length; ++ i)\n \t      out.writeObject (objs[i]);\n+\t    setBlockDataMode (true);\n \t  }\n \n \tprivate void checkType (ObjectStreamField field, char type)"}, {"sha": "5bd867fa5ee8174bc786c3c6779753afdca42ee9", "filename": "libjava/java/io/ObjectStreamClass.java", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b4773cbba17889649a50c84ba520c0bfca73ec5/libjava%2Fjava%2Fio%2FObjectStreamClass.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b4773cbba17889649a50c84ba520c0bfca73ec5/libjava%2Fjava%2Fio%2FObjectStreamClass.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FObjectStreamClass.java?ref=9b4773cbba17889649a50c84ba520c0bfca73ec5", "patch": "@@ -350,15 +350,15 @@ private void setFields (Class cl)\n \n     try\n     {\n-      Field serialPersistantFields\n-\t= cl.getDeclaredField (\"serialPersistantFields\");\n-      int modifiers = serialPersistantFields.getModifiers ();\n+      Field serialPersistentFields\n+\t= cl.getDeclaredField (\"serialPersistentFields\");\n+      int modifiers = serialPersistentFields.getModifiers ();\n \n       if (Modifier.isStatic (modifiers)\n \t  && Modifier.isFinal (modifiers)\n \t  && Modifier.isPrivate (modifiers))\n       {\n-\tfields = getSerialPersistantFields (cl);\n+\tfields = getSerialPersistentFields (cl);\n \tArrays.sort (fields);\n \tcalculateOffsets ();\n \treturn;\n@@ -569,15 +569,15 @@ private long getDefinedSUID (Class clazz)\n   }\n \n   // Returns the value of CLAZZ's private static final field named\n-  // `serialPersistantFields'.\n-  private ObjectStreamField[] getSerialPersistantFields (Class clazz)\n+  // `serialPersistentFields'.\n+  private ObjectStreamField[] getSerialPersistentFields (Class clazz)\n   {\n     ObjectStreamField[] o = null;\n     try\n       {\n \t// Use getDeclaredField rather than getField for the same reason\n \t// as above in getDefinedSUID.\n-\tField f = clazz.getDeclaredField (\"getSerialPersistantFields\");\n+\tField f = clazz.getDeclaredField (\"getSerialPersistentFields\");\n \to = (ObjectStreamField[])f.get (null);\n       }\n     catch (java.lang.NoSuchFieldException e)"}]}