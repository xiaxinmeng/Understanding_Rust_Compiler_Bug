{"sha": "90fd73bbeaad8438a3251e061f8f6525691f3c30", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTBmZDczYmJlYWFkODQzOGEzMjUxZTA2MWY4ZjY1MjU2OTFmM2MzMA==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2019-07-01T13:36:56Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-07-01T13:36:56Z"}, "message": "[Ada] Wrong code with -gnatVa on lock-free protected objects\n\nThis patch fixes the handling of validity checks on protected objects\nthat use the Lock-Free implementation when validity checks are enabled,\nprevious to this patch the compiler would report improperly that a\ncondition in a protected operation was always True (when comoipled with\n-gnatwa) and would generate incorrect code fhat operation.\n\n2019-07-01  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* checks.adb (Insert_Valid_Check): Do not apply validity check\n\tto variable declared within a protected object that uses the\n\tLock_Free implementation, to prevent unwarranted constant\n\tfolding, because entities within such an object msut be treated\n\tas volatile.\n\ngcc/testsuite/\n\n\t* gnat.dg/prot7.adb, gnat.dg/prot7.ads: New testcase.\n\nFrom-SVN: r272873", "tree": {"sha": "2f4f105ad34d7cfe70216ad8cd9cc29634a7dbef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f4f105ad34d7cfe70216ad8cd9cc29634a7dbef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90fd73bbeaad8438a3251e061f8f6525691f3c30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90fd73bbeaad8438a3251e061f8f6525691f3c30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90fd73bbeaad8438a3251e061f8f6525691f3c30", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90fd73bbeaad8438a3251e061f8f6525691f3c30/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "69b5279e977593d656906288316ee03a8bf79c6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69b5279e977593d656906288316ee03a8bf79c6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69b5279e977593d656906288316ee03a8bf79c6a"}], "stats": {"total": 63, "additions": 63, "deletions": 0}, "files": [{"sha": "bf6e1c386a0821a2309d3506bffdd509c4080fc3", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90fd73bbeaad8438a3251e061f8f6525691f3c30/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90fd73bbeaad8438a3251e061f8f6525691f3c30/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=90fd73bbeaad8438a3251e061f8f6525691f3c30", "patch": "@@ -1,3 +1,11 @@\n+2019-07-01  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* checks.adb (Insert_Valid_Check): Do not apply validity check\n+\tto variable declared within a protected object that uses the\n+\tLock_Free implementation, to prevent unwarranted constant\n+\tfolding, because entities within such an object msut be treated\n+\tas volatile.\n+\n 2019-07-01  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* exp_ch9.adb (Check_Inlining): Deal with Has_Pragma_No_Inline."}, {"sha": "e851c5f702f29340eb7d54b1c48020226635795e", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90fd73bbeaad8438a3251e061f8f6525691f3c30/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90fd73bbeaad8438a3251e061f8f6525691f3c30/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=90fd73bbeaad8438a3251e061f8f6525691f3c30", "patch": "@@ -7429,6 +7429,19 @@ package body Checks is\n          return;\n       end if;\n \n+      --  Entities declared in Lock_free protected types must be treated\n+      --  as volatile, and we must inhibit validity checks to prevent\n+      --  improper constant folding.\n+\n+      if Is_Entity_Name (Expr)\n+        and then Is_Subprogram (Scope (Entity (Expr)))\n+        and then Present (Protected_Subprogram (Scope (Entity (Expr))))\n+        and then Uses_Lock_Free\n+           (Scope (Protected_Subprogram (Scope (Entity (Expr)))))\n+      then\n+         return;\n+      end if;\n+\n       --  If we have a checked conversion, then validity check applies to\n       --  the expression inside the conversion, not the result, since if\n       --  the expression inside is valid, then so is the conversion result."}, {"sha": "4d49ad3de830ef3937b771446e622be74df1a867", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90fd73bbeaad8438a3251e061f8f6525691f3c30/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90fd73bbeaad8438a3251e061f8f6525691f3c30/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=90fd73bbeaad8438a3251e061f8f6525691f3c30", "patch": "@@ -1,3 +1,7 @@\n+2019-07-01  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* gnat.dg/prot7.adb, gnat.dg/prot7.ads: New testcase.\n+\n 2019-07-01  Richard Biener  <rguenther@suse.de>\n \n \t* gcc.dg/gimplefe-42.c: New testcase."}, {"sha": "6051ef0054f9088e8a08ff101a77fe916aa3a675", "filename": "gcc/testsuite/gnat.dg/prot7.adb", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90fd73bbeaad8438a3251e061f8f6525691f3c30/gcc%2Ftestsuite%2Fgnat.dg%2Fprot7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90fd73bbeaad8438a3251e061f8f6525691f3c30/gcc%2Ftestsuite%2Fgnat.dg%2Fprot7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fprot7.adb?ref=90fd73bbeaad8438a3251e061f8f6525691f3c30", "patch": "@@ -0,0 +1,22 @@\n+--  { dg-do compile }\n+--  { dg-options \"-gnatwa -gnatVa\" }\n+\n+package body Prot7 is\n+   protected body Default_Slice is\n+      function Get return Instance_Pointer is\n+      begin\n+         return Default;\n+      end Get;\n+\n+      procedure Set (\n+        Discard : in out Boolean;\n+        Slice   : in     Instance_Pointer\n+      ) is\n+      begin\n+         Discard := Default /= null;\n+         if not Discard then\n+            Default := Slice;\n+         end if;\n+      end Set;\n+   end Default_Slice;\n+end Prot7;"}, {"sha": "5e06e26db35162095ba2afe164bd89edd9cb5de6", "filename": "gcc/testsuite/gnat.dg/prot7.ads", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90fd73bbeaad8438a3251e061f8f6525691f3c30/gcc%2Ftestsuite%2Fgnat.dg%2Fprot7.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90fd73bbeaad8438a3251e061f8f6525691f3c30/gcc%2Ftestsuite%2Fgnat.dg%2Fprot7.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fprot7.ads?ref=90fd73bbeaad8438a3251e061f8f6525691f3c30", "patch": "@@ -0,0 +1,16 @@\n+package Prot7 is\n+   type Instance_Pointer is access Integer;\n+\n+   protected Default_Slice\n+        with Lock_Free\n+   is\n+      function Get return Instance_Pointer;\n+\n+      procedure Set (\n+        Discard : in out Boolean;\n+        Slice   : in     Instance_Pointer\n+      );\n+   private\n+      Default : Instance_Pointer;\n+   end Default_Slice;\n+end Prot7;"}]}