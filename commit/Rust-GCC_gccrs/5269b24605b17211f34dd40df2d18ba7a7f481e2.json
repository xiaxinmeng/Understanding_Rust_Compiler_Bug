{"sha": "5269b24605b17211f34dd40df2d18ba7a7f481e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTI2OWIyNDYwNWIxNzIxMWYzNGRkNDBkZjJkMThiYTdhN2Y0ODFlMg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2020-05-05T10:33:11Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2020-05-05T10:42:22Z"}, "message": "Silence warning in LTO mode on VxWorks\n\nThe link phase is always partial (-r) for VxWorks in kernel mode, which\nmeans that it uses incremental LTO linking by default (-flinker-output=rel).\nBut in this mode the LTO plugin outputs a warning if one of the object files\ninvolved in the link does not contain LTO bytecode, before switching to\nnolto-rel mode.  We do not do repeated incremental linking for VxWorks so\nsilence the warning.\n\nlto-plugin/\n\t* lto-plugin.c: Document -linker-output-auto-notlo-rel option.\n\t(linker_output_set): Change type to bool.\n\t(linker_output_known): Likewise.\n\t(linker_output_auto_nolto_rel): New variable.\n\t(all_symbols_read_handler): Take it into account.\n\t<LDPO_REL>: Do not issue the warning if it is set.\n\t(process_option): Process -linker-output-auto-notlo-rel.\n\t(cleanup_handler): Remove unused variable.\n\t(onload) <LDPT_LINKER_OUTPUT>: Adjust to above type change.\ngcc/\n\t* gcc.c (LTO_PLUGIN_SPEC): Define if not already.\n\t(LINK_PLUGIN_SPEC): Execute LTO_PLUGIN_SPEC.\n\t* config/vxworks.h (LTO_PLUGIN_SPEC): Define.", "tree": {"sha": "8837eee81dbd7ff67d62c12f8dacc61f95c4995f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8837eee81dbd7ff67d62c12f8dacc61f95c4995f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5269b24605b17211f34dd40df2d18ba7a7f481e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5269b24605b17211f34dd40df2d18ba7a7f481e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5269b24605b17211f34dd40df2d18ba7a7f481e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5269b24605b17211f34dd40df2d18ba7a7f481e2/comments", "author": null, "committer": null, "parents": [{"sha": "2badc9885330b56dfabb49328c42de792bc67b1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2badc9885330b56dfabb49328c42de792bc67b1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2badc9885330b56dfabb49328c42de792bc67b1e"}], "stats": {"total": 59, "additions": 49, "deletions": 10}, "files": [{"sha": "71977b57e6e1ef145677b43ace25c51925d71974", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5269b24605b17211f34dd40df2d18ba7a7f481e2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5269b24605b17211f34dd40df2d18ba7a7f481e2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5269b24605b17211f34dd40df2d18ba7a7f481e2", "patch": "@@ -1,3 +1,9 @@\n+2020-05-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.c (LTO_PLUGIN_SPEC): Define if not already.\n+\t(LINK_PLUGIN_SPEC): Execute LTO_PLUGIN_SPEC.\n+\t* config/vxworks.h (LTO_PLUGIN_SPEC): Define.\n+\n 2020-05-05  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gimplify.c (gimplify_init_constructor): Do not put the constructor"}, {"sha": "d648d2f23cba8243e36830c83ded93244f45c68c", "filename": "gcc/config/vxworks.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5269b24605b17211f34dd40df2d18ba7a7f481e2/gcc%2Fconfig%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5269b24605b17211f34dd40df2d18ba7a7f481e2/gcc%2Fconfig%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvxworks.h?ref=5269b24605b17211f34dd40df2d18ba7a7f481e2", "patch": "@@ -273,3 +273,11 @@ extern void vxworks_asm_out_destructor (rtx symbol, int priority);\n #undef DWARF_GNAT_ENCODINGS_DEFAULT\n #define DWARF_GNAT_ENCODINGS_DEFAULT \\\n   (TARGET_VXWORKS7 ? DWARF_GNAT_ENCODINGS_MINIMAL : DWARF_GNAT_ENCODINGS_ALL)\n+\n+/* The default configuration of incremental LTO linking (-flinker-output=rel)\n+   warns if an object file included in the link does not contain LTO bytecode,\n+   because in this case the output will not contain it either, thus preventing\n+   further incremental LTO linking.  We do not do repeated incremental linking\n+   so silence the warning (instead of passing -flinker-output=nolto-rel).  */\n+#undef LTO_PLUGIN_SPEC\n+#define LTO_PLUGIN_SPEC \"%{!mrtp:-plugin-opt=-linker-output-auto-notlo-rel}\""}, {"sha": "b0d0308f1270b32c53b318fea77e2932acd3a25c", "filename": "gcc/gcc.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5269b24605b17211f34dd40df2d18ba7a7f481e2/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5269b24605b17211f34dd40df2d18ba7a7f481e2/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=5269b24605b17211f34dd40df2d18ba7a7f481e2", "patch": "@@ -944,6 +944,10 @@ proper position among the other output files.  */\n # endif\n #endif\n \n+#ifndef LTO_PLUGIN_SPEC\n+#define LTO_PLUGIN_SPEC \"\"\n+#endif\n+\n /* Conditional to test whether the LTO plugin is used or not.\n    FIXME: For slim LTO we will need to enable plugin unconditionally.  This\n    still cause problems with PLUGIN_LD != LD and when plugin is built but\n@@ -968,6 +972,7 @@ proper position among the other output files.  */\n     -plugin %(linker_plugin_file) \\\n     -plugin-opt=%(lto_wrapper) \\\n     -plugin-opt=-fresolution=%u.res \\\n+    \" LTO_PLUGIN_SPEC \"\\\n     %{flinker-output=*:-plugin-opt=-linker-output-known} \\\n     %{!nostdlib:%{!nodefaultlibs:%:pass-through-libs(%(link_gcc_c_sequence))}} \\\n     }\" PLUGIN_COND_CLOSE"}, {"sha": "9ce708dfb30702b9c5223c8814a795a9524a1535", "filename": "lto-plugin/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5269b24605b17211f34dd40df2d18ba7a7f481e2/lto-plugin%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5269b24605b17211f34dd40df2d18ba7a7f481e2/lto-plugin%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2FChangeLog?ref=5269b24605b17211f34dd40df2d18ba7a7f481e2", "patch": "@@ -1,3 +1,15 @@\n+2020-05-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* lto-plugin.c: Document -linker-output-auto-notlo-rel option.\n+\t(linker_output_set): Change type to bool.\n+\t(linker_output_known): Likewise.\n+\t(linker_output_auto_nolto_rel): New variable.\n+\t(all_symbols_read_handler): Take it into account.\n+\t<LDPO_REL>: Do not issue the warning if it is set.\n+\t(process_option): Process -linker-output-auto-notlo-rel.\n+\t(cleanup_handler): Remove unused variable.\n+\t(onload) <LDPT_LINKER_OUTPUT>: Adjust to above type change.\n+\n 2020-04-28  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR bootstrap/94739"}, {"sha": "37f4bda742a37181584cd51d02a84f8d575dd5e7", "filename": "lto-plugin/lto-plugin.c", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5269b24605b17211f34dd40df2d18ba7a7f481e2/lto-plugin%2Flto-plugin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5269b24605b17211f34dd40df2d18ba7a7f481e2/lto-plugin%2Flto-plugin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2Flto-plugin.c?ref=5269b24605b17211f34dd40df2d18ba7a7f481e2", "patch": "@@ -32,6 +32,9 @@ along with this program; see the file COPYING3.  If not see\n    -nop: Instead of running lto-wrapper, pass the original to the plugin. This\n    only works if the input files are hybrid. \n    -linker-output-known: Do not determine linker output\n+   -linker-output-auto-notlo-rel: Switch from rel to nolto-rel mode without\n+   warning.  This is used on systems like VxWorks (kernel) where the link is\n+   always partial and repeated incremental linking is generally not used.\n    -sym-style={none,win32,underscore|uscore}\n    -pass-through  */\n \n@@ -195,8 +198,9 @@ static bool verbose;\n static char nop;\n static char *resolution_file = NULL;\n static enum ld_plugin_output_file_type linker_output;\n-static int linker_output_set;\n-static int linker_output_known;\n+static bool linker_output_set;\n+static bool linker_output_known;\n+static bool linker_output_auto_nolto_rel;\n static const char *link_output_name = NULL;\n \n /* The version of gold being used, or -1 if not gold.  The number is\n@@ -709,9 +713,10 @@ use_original_files (void)\n static enum ld_plugin_status\n all_symbols_read_handler (void)\n {\n+  const unsigned num_lto_args\n+    = num_claimed_files + lto_wrapper_num_args + 2\n+      + !linker_output_known + !linker_output_auto_nolto_rel;\n   unsigned i;\n-  unsigned num_lto_args = num_claimed_files + lto_wrapper_num_args + 2\n-    \t   + !linker_output_known;\n   char **lto_argv;\n   const char *linker_output_str = NULL;\n   const char **lto_arg_ptr;\n@@ -743,9 +748,10 @@ all_symbols_read_handler (void)\n \tcase LDPO_REL:\n \t  if (non_claimed_files)\n \t    {\n-\t      message (LDPL_WARNING, \"incremental linking of LTO and non-LTO \"\n-\t\t       \"objects; using -flinker-output=nolto-rel which will \"\n-\t\t       \"bypass whole program optimization\");\n+\t      if (!linker_output_auto_nolto_rel)\n+\t\tmessage (LDPL_WARNING, \"incremental linking of LTO and non-LTO\"\n+\t\t\t \" objects; using -flinker-output=nolto-rel which will\"\n+\t\t\t \" bypass whole program optimization\");\n \t      linker_output_str = \"-flinker-output=nolto-rel\";\n \t    }\n \t  else\n@@ -1291,8 +1297,10 @@ static void\n process_option (const char *option)\n {\n   if (strcmp (option, \"-linker-output-known\") == 0)\n-    linker_output_known = 1;\n-  if (strcmp (option, \"-debug\") == 0)\n+    linker_output_known = true;\n+  else if (strcmp (option, \"-linker-output-auto-notlo-rel\") == 0)\n+    linker_output_auto_nolto_rel = true;\n+  else if (strcmp (option, \"-debug\") == 0)\n     debug = true;\n   else if ((strcmp (option, \"-v\") == 0)\n            || (strcmp (option, \"--verbose\") == 0))\n@@ -1390,7 +1398,7 @@ onload (struct ld_plugin_tv *tv)\n \t  break;\n \tcase LDPT_LINKER_OUTPUT:\n \t  linker_output = (enum ld_plugin_output_file_type) p->tv_u.tv_val;\n-\t  linker_output_set = 1;\n+\t  linker_output_set = true;\n \t  break;\n \tcase LDPT_OUTPUT_NAME:\n \t  /* We only use this to make user-friendly temp file names.  */"}]}