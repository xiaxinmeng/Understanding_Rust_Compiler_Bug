{"sha": "fe64842ff930e552917272319de55f9a1e4cd2fa", "node_id": "C_kwDOANBUbNoAKGZlNjQ4NDJmZjkzMGU1NTI5MTcyNzIzMTlkZTU1ZjlhMWU0Y2QyZmE", "commit": {"author": {"name": "David Faust", "email": "david.faust@oracle.com", "date": "2022-07-06T19:21:03Z"}, "committer": {"name": "David Faust", "email": "david.faust@oracle.com", "date": "2022-07-06T19:21:03Z"}, "message": "HIR: add Literal is_equal ()\n\nA small helper for checking when two Literals contain the same value.", "tree": {"sha": "0f7cb141958ead3207545965e3b3052752345f1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f7cb141958ead3207545965e3b3052752345f1c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe64842ff930e552917272319de55f9a1e4cd2fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe64842ff930e552917272319de55f9a1e4cd2fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe64842ff930e552917272319de55f9a1e4cd2fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe64842ff930e552917272319de55f9a1e4cd2fa/comments", "author": {"login": "dafaust", "id": 4460334, "node_id": "MDQ6VXNlcjQ0NjAzMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4460334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dafaust", "html_url": "https://github.com/dafaust", "followers_url": "https://api.github.com/users/dafaust/followers", "following_url": "https://api.github.com/users/dafaust/following{/other_user}", "gists_url": "https://api.github.com/users/dafaust/gists{/gist_id}", "starred_url": "https://api.github.com/users/dafaust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dafaust/subscriptions", "organizations_url": "https://api.github.com/users/dafaust/orgs", "repos_url": "https://api.github.com/users/dafaust/repos", "events_url": "https://api.github.com/users/dafaust/events{/privacy}", "received_events_url": "https://api.github.com/users/dafaust/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dafaust", "id": 4460334, "node_id": "MDQ6VXNlcjQ0NjAzMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4460334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dafaust", "html_url": "https://github.com/dafaust", "followers_url": "https://api.github.com/users/dafaust/followers", "following_url": "https://api.github.com/users/dafaust/following{/other_user}", "gists_url": "https://api.github.com/users/dafaust/gists{/gist_id}", "starred_url": "https://api.github.com/users/dafaust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dafaust/subscriptions", "organizations_url": "https://api.github.com/users/dafaust/orgs", "repos_url": "https://api.github.com/users/dafaust/repos", "events_url": "https://api.github.com/users/dafaust/events{/privacy}", "received_events_url": "https://api.github.com/users/dafaust/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29d594e263f0ccbcbd2babf43ff453c5188f4f2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29d594e263f0ccbcbd2babf43ff453c5188f4f2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29d594e263f0ccbcbd2babf43ff453c5188f4f2c"}], "stats": {"total": 6, "additions": 6, "deletions": 0}, "files": [{"sha": "ff4c39e4a2a521d10a330912b0393d2d29e1c4bb", "filename": "gcc/rust/hir/tree/rust-hir.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe64842ff930e552917272319de55f9a1e4cd2fa/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe64842ff930e552917272319de55f9a1e4cd2fa/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h?ref=fe64842ff930e552917272319de55f9a1e4cd2fa", "patch": "@@ -122,6 +122,12 @@ struct Literal\n \n   // Returns whether literal is in an invalid state.\n   bool is_error () const { return value_as_string == \"\"; }\n+\n+  bool is_equal (Literal &other)\n+  {\n+    return value_as_string == other.value_as_string && type == other.type\n+\t   && type_hint == other.type_hint;\n+  }\n };\n \n /* Base statement abstract class. Note that most \"statements\" are not allowed in"}]}