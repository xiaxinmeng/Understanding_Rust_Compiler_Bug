{"sha": "47bd70b56aa4ccc10fd0e90a7fae4c94d991bb30", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDdiZDcwYjU2YWE0Y2NjMTBmZDBlOTBhN2ZhZTRjOTRkOTkxYmIzMA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2002-02-26T21:17:22Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2002-02-26T21:17:22Z"}, "message": "attribs.c (c_common_attribute_table): Add visibility.\n\n\t* attribs.c (c_common_attribute_table): Add visibility.\n\t(handle_visibility_attribute): New function.\n\t* varasm.c (assemble_visibility): New function.\n\t* output.h (assemble_visibility): Add prototype.\n\t* tree.h (MODULE_LOCAL_P): Define.\n\t* crtstuff.c (__dso_handle): Use visibility attribute.\n\t* config/i386/i386.h (ENCODE_SECTION_INFO): Set SYMBOL_REF_FLAG\n\tfor MODULE_LOCAL_P symbols too.\n\t* config/ia64/ia64.c (ia64_encode_section_info): Handle\n\tMODULE_LOCAL_P symbols the same way as local symbols.\n\tAdd SDATA_NAME_FLAG_CHAR even if decl was explicitely forced\n\tinto .sdata/.sbss by the user.\n\t* doc/extend.texi (Function Attributes): Document visibility\n\tattribute.\n\n\t* gcc.dg/ia64-visibility-1.c: New test.\n\nFrom-SVN: r50061", "tree": {"sha": "bf177b7375ac3fceb1bd51f1f20b2ff845e3fbba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf177b7375ac3fceb1bd51f1f20b2ff845e3fbba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47bd70b56aa4ccc10fd0e90a7fae4c94d991bb30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47bd70b56aa4ccc10fd0e90a7fae4c94d991bb30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47bd70b56aa4ccc10fd0e90a7fae4c94d991bb30", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47bd70b56aa4ccc10fd0e90a7fae4c94d991bb30/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6d73371a68e805956981592bdc2a631acaab2a33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d73371a68e805956981592bdc2a631acaab2a33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d73371a68e805956981592bdc2a631acaab2a33"}], "stats": {"total": 178, "additions": 161, "deletions": 17}, "files": [{"sha": "62283213c34b86b849f65fae254b28bfdc1a030c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bd70b56aa4ccc10fd0e90a7fae4c94d991bb30/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bd70b56aa4ccc10fd0e90a7fae4c94d991bb30/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=47bd70b56aa4ccc10fd0e90a7fae4c94d991bb30", "patch": "@@ -1,3 +1,20 @@\n+2002-02-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* attribs.c (c_common_attribute_table): Add visibility.\n+\t(handle_visibility_attribute): New function.\n+\t* varasm.c (assemble_visibility): New function.\n+\t* output.h (assemble_visibility): Add prototype.\n+\t* tree.h (MODULE_LOCAL_P): Define.\n+\t* crtstuff.c (__dso_handle): Use visibility attribute.\n+\t* config/i386/i386.h (ENCODE_SECTION_INFO): Set SYMBOL_REF_FLAG\n+\tfor MODULE_LOCAL_P symbols too.\n+\t* config/ia64/ia64.c (ia64_encode_section_info): Handle\n+\tMODULE_LOCAL_P symbols the same way as local symbols.\n+\tAdd SDATA_NAME_FLAG_CHAR even if decl was explicitely forced\n+\tinto .sdata/.sbss by the user.\n+\t* doc/extend.texi (Function Attributes): Document visibility\n+\tattribute.\n+\n 2002-02-26  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/5770"}, {"sha": "2879d100a305265ff81cdf5733508bd8c738b0e7", "filename": "gcc/attribs.c", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bd70b56aa4ccc10fd0e90a7fae4c94d991bb30/gcc%2Fattribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bd70b56aa4ccc10fd0e90a7fae4c94d991bb30/gcc%2Fattribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fattribs.c?ref=47bd70b56aa4ccc10fd0e90a7fae4c94d991bb30", "patch": "@@ -75,6 +75,8 @@ static tree handle_weak_attribute\tPARAMS ((tree *, tree, tree, int,\n \t\t\t\t\t\t bool *));\n static tree handle_alias_attribute\tPARAMS ((tree *, tree, tree, int,\n \t\t\t\t\t\t bool *));\n+static tree handle_visibility_attribute\tPARAMS ((tree *, tree, tree, int,\n+\t\t\t\t\t\t bool *));\n static tree handle_no_instrument_function_attribute PARAMS ((tree *, tree,\n \t\t\t\t\t\t\t     tree, int,\n \t\t\t\t\t\t\t     bool *));\n@@ -148,6 +150,8 @@ static const struct attribute_spec c_common_attribute_table[] =\n \t\t\t      handle_deprecated_attribute },\n   { \"vector_size\",\t      1, 1, false, true, false,\n \t\t\t      handle_vector_size_attribute },\n+  { \"visibility\",\t      1, 1, true,  false, false,\n+\t\t\t      handle_visibility_attribute },\n   { NULL,                     0, 0, false, false, false, NULL }\n };\n \n@@ -1061,6 +1065,50 @@ handle_alias_attribute (node, name, args, flags, no_add_attrs)\n   return NULL_TREE;\n }\n \n+/* Handle an \"visibility\" attribute; arguments as in\n+   struct attribute_spec.handler.  */\n+\n+static tree\n+handle_visibility_attribute (node, name, args, flags, no_add_attrs)\n+     tree *node;\n+     tree name;\n+     tree args;\n+     int flags ATTRIBUTE_UNUSED;\n+     bool *no_add_attrs;\n+{\n+  tree decl = *node;\n+\n+  if (decl_function_context (decl) != 0 || ! TREE_PUBLIC (decl))\n+    {\n+      warning (\"`%s' attribute ignored\", IDENTIFIER_POINTER (name));\n+      *no_add_attrs = true;\n+    }\n+  else\n+    {\n+      tree id;\n+\n+      id = TREE_VALUE (args);\n+      if (TREE_CODE (id) != STRING_CST)\n+\t{\n+\t  error (\"visibility arg not a string\");\n+\t  *no_add_attrs = true;\n+\t  return NULL_TREE;\n+\t}\n+      if (strcmp (TREE_STRING_POINTER (id), \"hidden\")\n+\t  && strcmp (TREE_STRING_POINTER (id), \"protected\")\n+\t  && strcmp (TREE_STRING_POINTER (id), \"internal\"))\n+\t{\n+\t  error (\"visibility arg must be one of \\\"hidden\\\", \\\"protected\\\" or \\\"internal\\\"\");\n+\t  *no_add_attrs = true;\n+\t  return NULL_TREE;\n+\t}\n+\n+      assemble_visibility (decl, TREE_STRING_POINTER (id));\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n /* Handle a \"no_instrument_function\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n "}, {"sha": "342105d586d7d7c5597af9fc79afe8667de688c2", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bd70b56aa4ccc10fd0e90a7fae4c94d991bb30/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bd70b56aa4ccc10fd0e90a7fae4c94d991bb30/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=47bd70b56aa4ccc10fd0e90a7fae4c94d991bb30", "patch": "@@ -2266,7 +2266,9 @@ do {\t\t\t\t\t\t\t\t\\\n \t    \t\t\t\t\t\t\t\\\n \t    SYMBOL_REF_FLAG (XEXP (rtl, 0))\t\t\t\\\n \t      = (TREE_CODE_CLASS (TREE_CODE (DECL)) != 'd'\t\\\n-\t\t || ! TREE_PUBLIC (DECL));\t\t\t\\\n+\t\t || ! TREE_PUBLIC (DECL)\t\t\t\\\n+\t\t || (TREE_CODE (DECL) == VAR_DECL\t\t\\\n+\t\t     && MODULE_LOCAL_P (DECL)));\t\t\\\n \t  }\t\t\t\t\t\t\t\\\n       }\t\t\t\t\t\t\t\t\\\n } while (0)"}, {"sha": "2bdc16ca128a9a3fc5daba13e28730294b0c88b2", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bd70b56aa4ccc10fd0e90a7fae4c94d991bb30/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bd70b56aa4ccc10fd0e90a7fae4c94d991bb30/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=47bd70b56aa4ccc10fd0e90a7fae4c94d991bb30", "patch": "@@ -6897,13 +6897,14 @@ ia64_encode_section_info (decl)\n      statically allocated, but the space is allocated somewhere else.  Such\n      decls can not be own data.  */\n   if (! TARGET_NO_SDATA\n-      && TREE_STATIC (decl) && ! DECL_EXTERNAL (decl)\n-      && ! (DECL_ONE_ONLY (decl) || DECL_WEAK (decl))\n-      && ! (TREE_PUBLIC (decl)\n-\t    && (flag_pic\n-\t\t|| (DECL_COMMON (decl)\n-\t\t    && (DECL_INITIAL (decl) == 0\n-\t\t\t|| DECL_INITIAL (decl) == error_mark_node))))\n+      && ((TREE_STATIC (decl) && ! DECL_EXTERNAL (decl)\n+\t   && ! (DECL_ONE_ONLY (decl) || DECL_WEAK (decl))\n+\t   && ! (TREE_PUBLIC (decl)\n+\t\t && (flag_pic\n+\t\t     || (DECL_COMMON (decl)\n+\t\t\t && (DECL_INITIAL (decl) == 0\n+\t\t\t     || DECL_INITIAL (decl) == error_mark_node)))))\n+\t  || MODULE_LOCAL_P (decl))\n       /* Either the variable must be declared without a section attribute,\n \t or the section must be sdata or sbss.  */\n       && (DECL_SECTION_NAME (decl) == 0\n@@ -6923,9 +6924,12 @@ ia64_encode_section_info (decl)\n \t;\n \n       /* If this is an incomplete type with size 0, then we can't put it in\n-\t sdata because it might be too big when completed.  */\n-      else if (size > 0\n-\t       && size <= (HOST_WIDE_INT) ia64_section_threshold\n+\t sdata because it might be too big when completed.\n+\t Objects bigger than threshold should have SDATA_NAME_FLAG_CHAR\n+\t added if they are in .sdata or .sbss explicitely.  */\n+      else if (((size > 0\n+\t\t && size <= (HOST_WIDE_INT) ia64_section_threshold)\n+\t\t|| DECL_SECTION_NAME (decl))\n \t       && symbol_str[0] != SDATA_NAME_FLAG_CHAR)\n \t{\n \t  size_t len = strlen (symbol_str);"}, {"sha": "bfe611687365a48a16cdb3e9b6548bc02627c85a", "filename": "gcc/crtstuff.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bd70b56aa4ccc10fd0e90a7fae4c94d991bb30/gcc%2Fcrtstuff.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bd70b56aa4ccc10fd0e90a7fae4c94d991bb30/gcc%2Fcrtstuff.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcrtstuff.c?ref=47bd70b56aa4ccc10fd0e90a7fae4c94d991bb30", "patch": "@@ -213,13 +213,9 @@ STATIC void *__JCR_LIST__[]\n    in one DSO or the main program is not used in another object.  The\n    dynamic linker takes care of this.  */\n \n-/* XXX Ideally the following should be implemented using\n-       __attribute__ ((__visibility__ (\"hidden\")))\n-   but the __attribute__ support is not yet there.  */\n #ifdef HAVE_GAS_HIDDEN\n-asm (\".hidden\\t__dso_handle\");\n+extern void *__dso_handle __attribute__ ((__visibility__ (\"hidden\")));\n #endif\n-\n #ifdef CRTSTUFFS_O\n void *__dso_handle = &__dso_handle;\n #else"}, {"sha": "f9870e779cfb612299ed4bfb58fd6307d7f9d026", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bd70b56aa4ccc10fd0e90a7fae4c94d991bb30/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bd70b56aa4ccc10fd0e90a7fae4c94d991bb30/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=47bd70b56aa4ccc10fd0e90a7fae4c94d991bb30", "patch": "@@ -2198,7 +2198,7 @@ The @code{alias} attribute causes the declaration to be emitted as an\n alias for another symbol, which must be specified.  For instance,\n \n @smallexample\n-void __f () @{ /* do something */; @}\n+void __f () @{ /* @r{Do something.} */; @}\n void f () __attribute__ ((weak, alias (\"__f\")));\n @end smallexample\n \n@@ -2207,6 +2207,19 @@ mangled name for the target must be used.\n \n Not all target machines support this attribute.\n \n+@item visibility (\"@var{visibility_type}\")\n+@cindex @code{visibility} attribute\n+The @code{visibility} attribute on ELF targets causes the declaration\n+to be emitted with hidden, protected or internal visibility.\n+\n+@smallexample\n+void __attribute__ ((visibility (\"protected\")))\n+f () @{ /* @r{Do something.} */; @}\n+int i __attribute__ ((visibility (\"hidden\")));\n+@end smallexample\n+\n+Not all ELF targets support this attribute.\n+\n @item regparm (@var{number})\n @cindex functions that are passed arguments in registers on the 386\n On the Intel 386, the @code{regparm} attribute causes the compiler to"}, {"sha": "df5ceadb256f793d4c8c1cd08e0a1da415a17c24", "filename": "gcc/output.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bd70b56aa4ccc10fd0e90a7fae4c94d991bb30/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bd70b56aa4ccc10fd0e90a7fae4c94d991bb30/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=47bd70b56aa4ccc10fd0e90a7fae4c94d991bb30", "patch": "@@ -255,6 +255,8 @@ extern void assemble_constant_align\tPARAMS ((tree));\n \n extern void assemble_alias\t\tPARAMS ((tree, tree));\n \n+extern void assemble_visibility\t\tPARAMS ((tree, const char *));\n+\n /* Output a string of literal assembler code\n    for an `asm' keyword used between functions.  */\n extern void assemble_asm\t\tPARAMS ((tree));"}, {"sha": "6f0a6fc0d8150db95fdd3707553a531e59d0abc4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bd70b56aa4ccc10fd0e90a7fae4c94d991bb30/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bd70b56aa4ccc10fd0e90a7fae4c94d991bb30/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=47bd70b56aa4ccc10fd0e90a7fae4c94d991bb30", "patch": "@@ -2,6 +2,8 @@\n \n \t* g++.dg/debug/debug4.C: New test.\n \n+\t* gcc.dg/ia64-visibility-1.c: New test.\n+\n 2002-02-26  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* gcc.dg/debug/20020224-1.c: New."}, {"sha": "53bc2c3f7852bfc3cc67fa5585320105b197d222", "filename": "gcc/testsuite/gcc.dg/ia64-visibility-1.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bd70b56aa4ccc10fd0e90a7fae4c94d991bb30/gcc%2Ftestsuite%2Fgcc.dg%2Fia64-visibility-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bd70b56aa4ccc10fd0e90a7fae4c94d991bb30/gcc%2Ftestsuite%2Fgcc.dg%2Fia64-visibility-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fia64-visibility-1.c?ref=47bd70b56aa4ccc10fd0e90a7fae4c94d991bb30", "patch": "@@ -0,0 +1,36 @@\n+/* Test visibility attribute.  */\n+/* { dg-do compile { target ia64*-*-linux* } } */\n+/* { dg-options \"-O2 -fpic\" } */\n+/* { dg-final { scan-assembler \"\\\\.hidden.*variable_j\" } } */\n+/* { dg-final { scan-assembler \"\\\\.hidden.*variable_m\" } } */\n+/* { dg-final { scan-assembler \"\\\\.protected.*baz\" } } */\n+/* { dg-final { scan-assembler \"gprel.*variable_i\" } } */\n+/* { dg-final { scan-assembler \"gprel.*variable_j\" } } */\n+/* { dg-final { scan-assembler \"ltoff.*variable_k\" } } */\n+/* { dg-final { scan-assembler \"gprel.*variable_l\" } } */\n+/* { dg-final { scan-assembler \"gprel.*variable_m\" } } */\n+/* { dg-final { scan-assembler \"ltoff.*variable_n\" } } */\n+\n+static int variable_i;\n+int variable_j __attribute__((visibility (\"hidden\")));\n+int variable_k;\n+struct A { char a[64]; };\n+static struct A variable_l __attribute__((section (\".sbss\")));\n+struct A variable_m __attribute__((visibility (\"hidden\"), section(\".sbss\")));\n+struct A variable_n __attribute__((section (\".sbss\")));\n+\n+int foo (void)\n+{\n+  return variable_i + variable_j + variable_k;\n+}\n+\n+void bar (void)\n+{\n+  variable_l.a[10] = 0;\n+  variable_m.a[10] = 0;\n+  variable_n.a[10] = 0;\n+}\n+\n+void __attribute__((visibility (\"protected\"))) baz (void)\n+{\n+}"}, {"sha": "8e17b53422549e52160febb493db8d65e85feda0", "filename": "gcc/tree.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bd70b56aa4ccc10fd0e90a7fae4c94d991bb30/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bd70b56aa4ccc10fd0e90a7fae4c94d991bb30/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=47bd70b56aa4ccc10fd0e90a7fae4c94d991bb30", "patch": "@@ -2283,6 +2283,11 @@ extern tree merge_attributes\t\tPARAMS ((tree, tree));\n extern tree merge_dllimport_decl_attributes PARAMS ((tree, tree));\n #endif\n \n+/* Return true if DECL will be always resolved to a symbol defined in the\n+   same module (shared library or program).  */\n+#define MODULE_LOCAL_P(DECL) \\\n+  (lookup_attribute (\"visibility\", DECL_ATTRIBUTES (DECL)) != NULL)\n+\n /* Return a version of the TYPE, qualified as indicated by the\n    TYPE_QUALS, if one exists.  If no qualified version exists yet,\n    return NULL_TREE.  */"}, {"sha": "fa6959279206c571b5e42dace552f60f4ef188e6", "filename": "gcc/varasm.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bd70b56aa4ccc10fd0e90a7fae4c94d991bb30/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bd70b56aa4ccc10fd0e90a7fae4c94d991bb30/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=47bd70b56aa4ccc10fd0e90a7fae4c94d991bb30", "patch": "@@ -5160,6 +5160,25 @@ assemble_alias (decl, target)\n #endif\n }\n \n+/* Emit an assembler directive to set symbol for DECL visibility to\n+   VISIBILITY_TYPE.  */\n+\n+void\n+assemble_visibility (decl, visibility_type)\n+     tree decl;\n+     const char *visibility_type ATTRIBUTE_UNUSED;\n+{\n+  const char *name;\n+\n+  name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n+\n+#ifdef HAVE_GAS_HIDDEN\n+  fprintf (asm_out_file, \"\\t.%s\\t%s\\n\", visibility_type, name);\n+#else\n+  warning (\"visibility attribute not supported in this configuration; ignored\");\n+#endif\n+}\n+\n /* Returns 1 if the target configuration supports defining public symbols\n    so that one of them will be chosen at link time instead of generating a\n    multiply-defined symbol error, whether through the use of weak symbols or"}]}