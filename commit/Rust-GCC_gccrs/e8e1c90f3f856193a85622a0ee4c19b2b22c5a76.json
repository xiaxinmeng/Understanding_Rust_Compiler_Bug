{"sha": "e8e1c90f3f856193a85622a0ee4c19b2b22c5a76", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZThlMWM5MGYzZjg1NjE5M2E4NTYyMmEwZWU0YzE5YjJiMjJjNWE3Ng==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2015-12-08T08:53:42Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-12-08T08:53:42Z"}, "message": "i386.c (ix86_emit_swsqrtsf): Cleanup infinity filterning code.\n\n\t* config/i386/i386.c (ix86_emit_swsqrtsf): Cleanup\n\tinfinity filterning code.\n\nFrom-SVN: r231397", "tree": {"sha": "e5433d8fadd0b2ad5665638b3f55f821c1997396", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5433d8fadd0b2ad5665638b3f55f821c1997396"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8e1c90f3f856193a85622a0ee4c19b2b22c5a76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8e1c90f3f856193a85622a0ee4c19b2b22c5a76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8e1c90f3f856193a85622a0ee4c19b2b22c5a76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8e1c90f3f856193a85622a0ee4c19b2b22c5a76/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8d22292eb7d417781a0b4f447058258e9986f31a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d22292eb7d417781a0b4f447058258e9986f31a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d22292eb7d417781a0b4f447058258e9986f31a"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "8e9d0167b34b5e29d7fe848d134a914412a9e34d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8e1c90f3f856193a85622a0ee4c19b2b22c5a76/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8e1c90f3f856193a85622a0ee4c19b2b22c5a76/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e8e1c90f3f856193a85622a0ee4c19b2b22c5a76", "patch": "@@ -1,3 +1,8 @@\n+2015-12-08  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (ix86_emit_swsqrtsf): Cleanup\n+\tinfinity filterning code.\n+\n 2015-12-08  Ilya Enkovich  <enkovich.gnu@gmail.com>\n \n \tPR tree-optimization/68766"}, {"sha": "e423b3c1897a765966e9522b5e1209dc9bb4561f", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8e1c90f3f856193a85622a0ee4c19b2b22c5a76/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8e1c90f3f856193a85622a0ee4c19b2b22c5a76/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=e8e1c90f3f856193a85622a0ee4c19b2b22c5a76", "patch": "@@ -47827,8 +47827,7 @@ void ix86_emit_swdivsf (rtx res, rtx a, rtx b, machine_mode mode)\n /* Output code to perform a Newton-Rhapson approximation of a\n    single precision floating point [reciprocal] square root.  */\n \n-void ix86_emit_swsqrtsf (rtx res, rtx a, machine_mode mode,\n-\t\t\t bool recip)\n+void ix86_emit_swsqrtsf (rtx res, rtx a, machine_mode mode, bool recip)\n {\n   rtx x0, e0, e1, e2, e3, mthree, mhalf;\n   REAL_VALUE_TYPE r;\n@@ -47868,12 +47867,8 @@ void ix86_emit_swsqrtsf (rtx res, rtx a, machine_mode mode,\n   /* If (a == 0.0) Filter out infinity to prevent NaN for sqrt(0.0).  */\n   if (!recip)\n     {\n-      rtx zero, mask;\n-\n-      zero = gen_reg_rtx (mode);\n-      mask = gen_reg_rtx (mode);\n-\n-      zero = force_reg (mode, CONST0_RTX(mode));\n+      rtx zero = force_reg (mode, CONST0_RTX(mode));\n+      rtx mask;\n \n       /* Handle masked compare.  */\n       if (VECTOR_MODE_P (mode) && GET_MODE_SIZE (mode) == 64)\n@@ -47885,8 +47880,8 @@ void ix86_emit_swsqrtsf (rtx res, rtx a, machine_mode mode,\n \t}\n       else\n \t{\n+\t  mask = gen_reg_rtx (mode);\n \t  emit_insn (gen_rtx_SET (mask, gen_rtx_NE (mode, zero, a)));\n-\n \t  emit_insn (gen_rtx_SET (x0, gen_rtx_AND (mode, x0, mask)));\n \t}\n     }"}]}