{"sha": "54f6892e4b7baa65bd5a16e5800258c319710e3c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTRmNjg5MmU0YjdiYWE2NWJkNWExNmU1ODAwMjU4YzMxOTcxMGUzYw==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2011-08-19T21:18:03Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2011-08-19T21:18:03Z"}, "message": "Permute conversion and addition of constant for zero-extend.\n\ngcc/\n\n2011-08-19  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR middle-end/49721\n\t* explow.c (convert_memory_address_addr_space): Also permute the\n\tconversion and addition of constant for zero-extend.\n\ngcc/testsuite/\n\n2011-08-19  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR middle-end/49721\n\t* gfortran.dg/pr49721-1.f: New.\n\t* gfortran.fortran-torture/compile/pr49721-1.f: Likewise.\n\nFrom-SVN: r177914", "tree": {"sha": "1b85c27b72fa3bcaecc098807bd2c3f176de23b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b85c27b72fa3bcaecc098807bd2c3f176de23b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54f6892e4b7baa65bd5a16e5800258c319710e3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54f6892e4b7baa65bd5a16e5800258c319710e3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54f6892e4b7baa65bd5a16e5800258c319710e3c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54f6892e4b7baa65bd5a16e5800258c319710e3c/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d4a83c103c7a266631bc93abcfebc2451a8d5dcd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4a83c103c7a266631bc93abcfebc2451a8d5dcd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4a83c103c7a266631bc93abcfebc2451a8d5dcd"}], "stats": {"total": 75, "additions": 68, "deletions": 7}, "files": [{"sha": "b94e583b80b148e525e89ead51ffd25348932139", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54f6892e4b7baa65bd5a16e5800258c319710e3c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54f6892e4b7baa65bd5a16e5800258c319710e3c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=54f6892e4b7baa65bd5a16e5800258c319710e3c", "patch": "@@ -1,3 +1,9 @@\n+2011-08-19  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR middle-end/49721\n+\t* explow.c (convert_memory_address_addr_space): Also permute the\n+\tconversion and addition of constant for zero-extend.\n+\n 2011-08-19  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-parser.c (c_parser_postfix_expression): Handle"}, {"sha": "984150efd05ab5428fe97897f3a30f0178f004e0", "filename": "gcc/explow.c", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54f6892e4b7baa65bd5a16e5800258c319710e3c/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54f6892e4b7baa65bd5a16e5800258c319710e3c/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=54f6892e4b7baa65bd5a16e5800258c319710e3c", "patch": "@@ -384,18 +384,23 @@ convert_memory_address_addr_space (enum machine_mode to_mode ATTRIBUTE_UNUSED,\n \n     case PLUS:\n     case MULT:\n-      /* For addition we can safely permute the conversion and addition\n-\t operation if one operand is a constant and converting the constant\n-\t does not change it or if one operand is a constant and we are\n-\t using a ptr_extend instruction  (POINTERS_EXTEND_UNSIGNED < 0).\n+      /* FIXME: For addition, we used to permute the conversion and\n+\t addition operation only if one operand is a constant and\n+\t converting the constant does not change it or if one operand\n+\t is a constant and we are using a ptr_extend instruction\n+\t (POINTERS_EXTEND_UNSIGNED < 0) even if the resulting address\n+\t may overflow/underflow.  We relax the condition to include\n+\t zero-extend (POINTERS_EXTEND_UNSIGNED > 0) since the other\n+\t parts of the compiler depend on it.  See PR 49721.\n+\n \t We can always safely permute them if we are making the address\n \t narrower.  */\n       if (GET_MODE_SIZE (to_mode) < GET_MODE_SIZE (from_mode)\n \t  || (GET_CODE (x) == PLUS\n \t      && CONST_INT_P (XEXP (x, 1))\n-\t      && (XEXP (x, 1) == convert_memory_address_addr_space\n-\t\t\t\t   (to_mode, XEXP (x, 1), as)\n-                 || POINTERS_EXTEND_UNSIGNED < 0)))\n+\t      && (POINTERS_EXTEND_UNSIGNED != 0\n+\t\t  || XEXP (x, 1) == convert_memory_address_addr_space\n+\t\t  \t\t\t(to_mode, XEXP (x, 1), as))))\n \treturn gen_rtx_fmt_ee (GET_CODE (x), to_mode,\n \t\t\t       convert_memory_address_addr_space\n \t\t\t\t (to_mode, XEXP (x, 0), as),"}, {"sha": "b3ee4b34746c68eeeb643b396cc655b78957809c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54f6892e4b7baa65bd5a16e5800258c319710e3c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54f6892e4b7baa65bd5a16e5800258c319710e3c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=54f6892e4b7baa65bd5a16e5800258c319710e3c", "patch": "@@ -1,3 +1,9 @@\n+2011-08-19  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR middle-end/49721\n+\t* gfortran.dg/pr49721-1.f: New.\n+\t* gfortran.fortran-torture/compile/pr49721-1.f: Likewise.\n+\n 2011-08-19  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gcc.dg/builtin-complex-err-1.c, gcc.dg/builtin-complex-err-2.c,"}, {"sha": "39e2ed74ef728efb646aa6f56f807c161f97b006", "filename": "gcc/testsuite/gfortran.dg/pr49721-1.f", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54f6892e4b7baa65bd5a16e5800258c319710e3c/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr49721-1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54f6892e4b7baa65bd5a16e5800258c319710e3c/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr49721-1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr49721-1.f?ref=54f6892e4b7baa65bd5a16e5800258c319710e3c", "patch": "@@ -0,0 +1,35 @@\n+! PR middle-end/49721\n+! { dg-do compile }\n+! { dg-options \"-O3 -funroll-loops\" }\n+\n+      subroutine midbloc6(c,a2,a2i,q)\n+      parameter (ndim2=6)\n+      parameter (ndim=3)\n+      dimension ri(ndim2),cr(ndim2,ndim2),xj(ndim2,ndim2),q(*)\n+     @,sai(ndim2,ndim2),cm(ndim2,ndim2),w(ndim2,ndim2)\n+      dimension vr(ndim2,ndim2),vi(ndim2,ndim2),s1(ndim2,ndim2),p(ndim)\n+      dimension xq(6),qb(2),qc(2),ifl(6),iplane(3)\n+      save\n+      call eig66(cr,rr,ri,vr,vi)\n+      xq(i)=asin(ri(i))/x2pi\n+      i9=6\n+      qb(1)=q(1)/x2pi\n+        do 180 i=1,2\n+          do 170 j=1,6\n+  120       if(xq(j)) 130,190,140\n+  130       if(qb(i)-0.5d0) 160,150,150\n+  140       if(qb(i)-0.5d0) 150,150,160\n+  150       continue\n+            tst=abs(abs(qb(i))-abs(xq(j)))\n+  160       continue\n+  170     continue\n+          iplane(i)=k\n+  180   continue\n+  190   continue\n+      n1=iplane(3)\n+      if(i9.eq.6) then\n+        z=vr(1,n1)*vi(2,n1)-vr(2,n1)*vi(1,n1)+vr(3,n1)*vi(4,n1)-vr(4,n1)\n+      endif\n+      sai(6,i)=vi(i,n1)/z\n+      call dacond6(a2,zero)\n+      end"}, {"sha": "9ddd068cba66fc5cf1d6d9760e15482827dcef3c", "filename": "gcc/testsuite/gfortran.fortran-torture/compile/pr49721-1.f", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54f6892e4b7baa65bd5a16e5800258c319710e3c/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fcompile%2Fpr49721-1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54f6892e4b7baa65bd5a16e5800258c319710e3c/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fcompile%2Fpr49721-1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fcompile%2Fpr49721-1.f?ref=54f6892e4b7baa65bd5a16e5800258c319710e3c", "patch": "@@ -0,0 +1,9 @@\n+       PARAMETER( LM=7 )\n+      PARAMETER( NM=2+2**LM, NV=NM**3 )\n+      PARAMETER( NR = (8*(NM**3+NM**2+5*NM-23+7*LM))/7 )\n+\tCOMMON /X/ U, V, R, A\n+      REAL*8 U(NR),V(NV),R(NR),A(0:3)\n+      DO 20 IT=1,NIT\n+        CALL RESID(U,V,R,N,A)\n+ 20   CONTINUE\n+      END"}]}