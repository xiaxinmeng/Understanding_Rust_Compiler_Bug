{"sha": "85fac79c205b0b415d0eb0a8a4fe6a28f50a92a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODVmYWM3OWMyMDViMGI0MTVkMGViMGE4YTRmZTZhMjhmNTBhOTJhNQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-04-28T16:56:24Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-04-28T16:56:24Z"}, "message": "elf.h (ASM_DECLARE_OBJECT_NAME): Use gnu_unique_object type if available.\n\n\t* config/alpha/elf.h (ASM_DECLARE_OBJECT_NAME): Use gnu_unique_object\n\ttype if available.\n\nFrom-SVN: r158834", "tree": {"sha": "10767390e01e8bea2b667f54db2e71d1f38fce40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10767390e01e8bea2b667f54db2e71d1f38fce40"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85fac79c205b0b415d0eb0a8a4fe6a28f50a92a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85fac79c205b0b415d0eb0a8a4fe6a28f50a92a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85fac79c205b0b415d0eb0a8a4fe6a28f50a92a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85fac79c205b0b415d0eb0a8a4fe6a28f50a92a5/comments", "author": null, "committer": null, "parents": [{"sha": "902a51a10d6b5aa9ca33a5faae5aebbd792b9d2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/902a51a10d6b5aa9ca33a5faae5aebbd792b9d2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/902a51a10d6b5aa9ca33a5faae5aebbd792b9d2a"}], "stats": {"total": 77, "additions": 47, "deletions": 30}, "files": [{"sha": "6e418533f015f59e40e06762b035e83f04c24e9b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85fac79c205b0b415d0eb0a8a4fe6a28f50a92a5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85fac79c205b0b415d0eb0a8a4fe6a28f50a92a5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=85fac79c205b0b415d0eb0a8a4fe6a28f50a92a5", "patch": "@@ -1,3 +1,8 @@\n+2010-04-28  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/alpha/elf.h (ASM_DECLARE_OBJECT_NAME): Use gnu_unique_object\n+\ttype if available.\n+\n 2010-04-28  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \tPR target/22224\n@@ -144,8 +149,7 @@\n \t* config/i386/mingw-w64.h (SUB_LINK_ENTRY): New macro.\n \t(SUB_LINK_ENTRY32): New.\n \t(SUB_LINK_ENTRY64): New.\n-\t(LINK_SPEC): Replace entry point spec by\n-\tSUB_LINK_ENTRY.\n+\t(LINK_SPEC): Replace entry point spec by SUB_LINK_ENTRY.\n \t* config/i386/mingw32 (SUB_LINK_ENTRY32): New.\n \t(SUB_LINK_ENTRY64): New.\n \t(SUB_LINK_ENTRY): New.\n@@ -225,7 +229,7 @@\n \t(estimate_num_insns): Special case more builtins.\n \n 2010-04-27  Shujing Zhao  <pearly.zhao@oracle.com>\n-\t\n+\n \tPR c/32207\n \t* c-typeck.c (build_binary_op): Move forward check for comparison\n \tpointer with null pointer constant and adjust the diagnostic message.\n@@ -375,25 +379,22 @@\n \n 2010-04-26  Ira Rosen  <irar@il.ibm.com>\n \n-\t* tree-vectorizer.h (struct _stmt_vec_info): Add new field to \n-\tdetermine if the statement is vectorizable, and a macro to \n-\taccess it.\n-\t* tree-vect-data-refs.c (vect_analyze_data_ref_dependence): \n-\tSkip statements that can't be vectorized. If the analysis \n-\tfails, mark the statement as unvectorizable if vectorizing \n-\tbasic block.\n+\t* tree-vectorizer.h (struct _stmt_vec_info): Add new field to\n+\tdetermine if the statement is vectorizable, and a macro to access it.\n+\t* tree-vect-data-refs.c (vect_analyze_data_ref_dependence):\n+\tSkip statements that can't be vectorized. If the analysis fails,\n+\tmark the statement as unvectorizable if vectorizing basic block.\n \t(vect_compute_data_refs_alignment): Likewise.\n-\t(vect_verify_datarefs_alignment): Skip statements marked as \n+\t(vect_verify_datarefs_alignment): Skip statements marked as\n \tunvectorizable. Add print.\n-\t(vect_analyze_group_access): Skip statements that can't be \n-\tvectorized. If the analysis fails, mark the statement as \n+\t(vect_analyze_group_access): Skip statements that can't be\n+\tvectorized. If the analysis fails, mark the statement as\n \tunvectorizable if vectorizing basic block.\n-\t(vect_analyze_data_ref_accesses, vect_analyze_data_refs): \n-\tLikewise.\n-\t* tree-vect-stmts.c (vectorizable_store): Fix the number of \n+\t(vect_analyze_data_ref_accesses, vect_analyze_data_refs): Likewise.\n+\t* tree-vect-stmts.c (vectorizable_store): Fix the number of\n \tgenerated stmts for SLP.\n \t(new_stmt_vec_info): Initialize the new field.\n-\t* tree-vect-slp.c (vect_build_slp_tree): Fail to vectorize \n+\t* tree-vect-slp.c (vect_build_slp_tree): Fail to vectorize\n \tstatements marked as unvectorizable.\n \n 2010-04-25  Joseph Myers  <joseph@codesourcery.com>"}, {"sha": "d2bf732543d0dcf61ee425d764a0818d5e995cb7", "filename": "gcc/config/alpha/elf.h", "status": "modified", "additions": 29, "deletions": 13, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85fac79c205b0b415d0eb0a8a4fe6a28f50a92a5/gcc%2Fconfig%2Falpha%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85fac79c205b0b415d0eb0a8a4fe6a28f50a92a5/gcc%2Fconfig%2Falpha%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Felf.h?ref=85fac79c205b0b415d0eb0a8a4fe6a28f50a92a5", "patch": "@@ -272,20 +272,36 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n /* Write the extra assembler code needed to declare an object properly.  */\n \n+#ifdef HAVE_GAS_GNU_UNIQUE_OBJECT\n+#define USE_GNU_UNIQUE_OBJECT 1\n+#else\n+#define USE_GNU_UNIQUE_OBJECT 0\n+#endif\n+\n #undef  ASM_DECLARE_OBJECT_NAME\n-#define ASM_DECLARE_OBJECT_NAME(FILE, NAME, DECL)\t\t\\\n-  do {\t\t\t\t\t\t\t\t\\\n-    HOST_WIDE_INT size;\t\t\t\t\t\t\\\n-    ASM_OUTPUT_TYPE_DIRECTIVE (FILE, NAME, \"object\");\t\t\\\n-    size_directive_output = 0;\t\t\t\t\t\\\n-    if (!flag_inhibit_size_directive\t\t\t\t\\\n-\t&& DECL_SIZE (DECL)\t\t\t\t\t\\\n-\t&& (size = int_size_in_bytes (TREE_TYPE (DECL))) > 0)\t\\\n-      {\t\t\t\t\t\t\t\t\\\n-\tsize_directive_output = 1;\t\t\t\t\\\n-        ASM_OUTPUT_SIZE_DIRECTIVE (FILE, NAME, size);\t\t\\\n-      }\t\t\t\t\t\t\t\t\\\n-    ASM_OUTPUT_LABEL(FILE, NAME);\t\t\t\t\\\n+#define ASM_DECLARE_OBJECT_NAME(FILE, NAME, DECL)\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    HOST_WIDE_INT size;\t\t\t\t\t\t\t\\\n+    \t\t\t\t\t\t\t\t\t\\\n+    /* For template static data member instantiations or\t\t\\\n+       inline fn local statics, use gnu_unique_object so that\t\t\\\n+       they will be combined even under RTLD_LOCAL.  */\t\t\t\\\n+    if (USE_GNU_UNIQUE_OBJECT\t\t\t\t\t\t\\\n+\t&& !DECL_ARTIFICIAL (DECL) && DECL_ONE_ONLY (DECL))\t\t\\\n+      ASM_OUTPUT_TYPE_DIRECTIVE (FILE, NAME, \"gnu_unique_object\");\t\\\n+    else\t\t\t\t\t\t\t\t\\\n+      ASM_OUTPUT_TYPE_DIRECTIVE (FILE, NAME, \"object\");\t\t\t\\\n+    \t\t\t\t\t\t\t\t\t\\\n+    size_directive_output = 0;\t\t\t\t\t\t\\\n+    if (!flag_inhibit_size_directive\t\t\t\t\t\\\n+\t&& (DECL) && DECL_SIZE (DECL))\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tsize_directive_output = 1;\t\t\t\t\t\\\n+\tsize = int_size_in_bytes (TREE_TYPE (DECL));\t\t\t\\\n+\tASM_OUTPUT_SIZE_DIRECTIVE (FILE, NAME, size);\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+    \t\t\t\t\t\t\t\t\t\\\n+    ASM_OUTPUT_LABEL (FILE, NAME);\t\t\t\t\t\\\n   } while (0)\n \n /* Output the size directive for a decl in rest_of_decl_compilation"}]}