{"sha": "37dc0d8dc7248b0495b56a26ca436f3980271587", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzdkYzBkOGRjNzI0OGIwNDk1YjU2YTI2Y2E0MzZmMzk4MDI3MTU4Nw==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2005-03-21T02:22:08Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2005-03-21T02:22:08Z"}, "message": "c-common.c (lvalue_or_else): Replace by lvalue_error; only give diagnostic without checking whether an lvalue.\n\n\t* c-common.c (lvalue_or_else): Replace by lvalue_error; only give\n\tdiagnostic without checking whether an lvalue.\n\t* c-common.h (lvalue_p): Remove.\n\t(enum lvalue_use): Update comment.\n\t(lvalue_or_else): Replace by lvalue_error.\n\t* c-typeck.c (lvalue_p): Make static.\n\t(lvalue_or_else): New.  Call lvalue_error.\n\ncp:\n\t* cp-tree.h (lvalue_or_else, lvalue_p): New.\n\t* typeck.c (lvalue_or_else): New.  Call lvalue_error.\n\nFrom-SVN: r96776", "tree": {"sha": "4f046755cca3d6be85f4cf05610ef5313e865404", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f046755cca3d6be85f4cf05610ef5313e865404"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37dc0d8dc7248b0495b56a26ca436f3980271587", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37dc0d8dc7248b0495b56a26ca436f3980271587", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37dc0d8dc7248b0495b56a26ca436f3980271587", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37dc0d8dc7248b0495b56a26ca436f3980271587/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5aff41479e6606793f74dfd9d5870eaebc267014", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5aff41479e6606793f74dfd9d5870eaebc267014", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5aff41479e6606793f74dfd9d5870eaebc267014"}], "stats": {"total": 108, "additions": 75, "deletions": 33}, "files": [{"sha": "34e1a5ddbb2649a2084a95785b44294a5485e170", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37dc0d8dc7248b0495b56a26ca436f3980271587/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37dc0d8dc7248b0495b56a26ca436f3980271587/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=37dc0d8dc7248b0495b56a26ca436f3980271587", "patch": "@@ -1,3 +1,13 @@\n+2005-03-21  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\t* c-common.c (lvalue_or_else): Replace by lvalue_error; only give\n+\tdiagnostic without checking whether an lvalue.\n+\t* c-common.h (lvalue_p): Remove.\n+\t(enum lvalue_use): Update comment.\n+\t(lvalue_or_else): Replace by lvalue_error.\n+\t* c-typeck.c (lvalue_p): Make static.\n+\t(lvalue_or_else): New.  Call lvalue_error.\n+\n 2005-03-21  Alan Modra  <amodra@bigpond.net.au>\n \n \t* config/rs6000/rs6000.c (rs6000_parm_start): New function."}, {"sha": "9c6a9d141afcfd68d034d9b03a94ae095a88c7ff", "filename": "gcc/c-common.c", "status": "modified", "additions": 21, "deletions": 29, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37dc0d8dc7248b0495b56a26ca436f3980271587/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37dc0d8dc7248b0495b56a26ca436f3980271587/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=37dc0d8dc7248b0495b56a26ca436f3980271587", "patch": "@@ -5721,40 +5721,32 @@ fold_offsetof (tree expr)\n   return convert (size_type_node, fold_offsetof_1 (expr));\n }\n \n-/* Return nonzero if REF is an lvalue valid for this language;\n-   otherwise, print an error message and return zero.  USE says\n+/* Print an error message for an invalid lvalue.  USE says\n    how the lvalue is being used and so selects the error message.  */\n \n-int\n-lvalue_or_else (tree ref, enum lvalue_use use)\n+void\n+lvalue_error (enum lvalue_use use)\n {\n-  int win = lvalue_p (ref);\n-\n-  if (!win)\n+  switch (use)\n     {\n-      switch (use)\n-\t{\n-\tcase lv_assign:\n-\t  error (\"invalid lvalue in assignment\");\n-\t  break;\n-\tcase lv_increment:\n-\t  error (\"invalid lvalue in increment\");\n-\t  break;\n-\tcase lv_decrement:\n-\t  error (\"invalid lvalue in decrement\");\n-\t  break;\n-\tcase lv_addressof:\n-\t  error (\"invalid lvalue in unary %<&%>\");\n-\t  break;\n-\tcase lv_asm:\n-\t  error (\"invalid lvalue in asm statement\");\n-\t  break;\n-\tdefault:\n-\t  gcc_unreachable ();\n-\t}\n+    case lv_assign:\n+      error (\"invalid lvalue in assignment\");\n+      break;\n+    case lv_increment:\n+      error (\"invalid lvalue in increment\");\n+      break;\n+    case lv_decrement:\n+      error (\"invalid lvalue in decrement\");\n+      break;\n+    case lv_addressof:\n+      error (\"invalid lvalue in unary %<&%>\");\n+      break;\n+    case lv_asm:\n+      error (\"invalid lvalue in asm statement\");\n+      break;\n+    default:\n+      gcc_unreachable ();\n     }\n-\n-  return win;\n }\n \n #include \"gt-c-common.h\""}, {"sha": "64daf34b44094d0d06bb295caa50fdca2c7a7748", "filename": "gcc/c-common.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37dc0d8dc7248b0495b56a26ca436f3980271587/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37dc0d8dc7248b0495b56a26ca436f3980271587/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=37dc0d8dc7248b0495b56a26ca436f3980271587", "patch": "@@ -808,7 +808,6 @@ extern tree build_break_stmt (void);\n \n extern tree build_unary_op (enum tree_code, tree, int);\n extern tree build_binary_op (enum tree_code, tree, tree, int);\n-extern int lvalue_p (tree);\n extern tree default_conversion (tree);\n \n /* Given two integer or real types, return the type for their sum.\n@@ -877,7 +876,7 @@ extern void verify_sequence_points (tree);\n extern tree fold_offsetof (tree);\n \n /* Places where an lvalue, or modifiable lvalue, may be required.\n-   Used to select diagnostic messages in lvalue_or_else and\n+   Used to select diagnostic messages in lvalue_error and\n    readonly_error.  */\n enum lvalue_use {\n   lv_assign,\n@@ -887,7 +886,7 @@ enum lvalue_use {\n   lv_asm\n };\n \n-extern int lvalue_or_else (tree, enum lvalue_use);\n+extern void lvalue_error (enum lvalue_use);\n \n /* In c-gimplify.c  */\n extern void c_genericize (tree);"}, {"sha": "d5046d5f425ea133a4bc6645faf51821843f5784", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37dc0d8dc7248b0495b56a26ca436f3980271587/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37dc0d8dc7248b0495b56a26ca436f3980271587/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=37dc0d8dc7248b0495b56a26ca436f3980271587", "patch": "@@ -100,6 +100,8 @@ static void set_nonincremental_init (void);\n static void set_nonincremental_init_from_string (tree);\n static tree find_init_member (tree);\n static void readonly_error (tree, enum lvalue_use);\n+static int lvalue_or_else (tree, enum lvalue_use);\n+static int lvalue_p (tree);\n static void record_maybe_used_decl (tree);\n \f\n /* Do `exp = require_complete_type (exp);' to make sure exp\n@@ -2742,7 +2744,7 @@ build_unary_op (enum tree_code code, tree xarg, int flag)\n    Lvalues can be assigned, unless their type has TYPE_READONLY.\n    Lvalues can have their address taken, unless they have C_DECL_REGISTER.  */\n \n-int\n+static int\n lvalue_p (tree ref)\n {\n   enum tree_code code = TREE_CODE (ref);\n@@ -2807,6 +2809,22 @@ readonly_error (tree arg, enum lvalue_use use)\n \t\t\t N_(\"increment of read-only location\"),\n \t\t\t N_(\"decrement of read-only location\")));\n }\n+\n+\n+/* Return nonzero if REF is an lvalue valid for this language;\n+   otherwise, print an error message and return zero.  USE says\n+   how the lvalue is being used and so selects the error message.  */\n+\n+static int\n+lvalue_or_else (tree ref, enum lvalue_use use)\n+{\n+  int win = lvalue_p (ref);\n+\n+  if (!win)\n+    lvalue_error (use);\n+\n+  return win;\n+}\n \f\n /* Mark EXP saying that we need to be able to take the\n    address of it; it should not be allocated in a register."}, {"sha": "76c1305bea69e53262c822ce5f20dd3f346eafda", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37dc0d8dc7248b0495b56a26ca436f3980271587/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37dc0d8dc7248b0495b56a26ca436f3980271587/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=37dc0d8dc7248b0495b56a26ca436f3980271587", "patch": "@@ -1,3 +1,8 @@\n+2005-03-21  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\t* cp-tree.h (lvalue_or_else, lvalue_p): New.\n+\t* typeck.c (lvalue_or_else): New.  Call lvalue_error.\n+\n 2005-03-19  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \tPR c++/20240"}, {"sha": "e76e216a065742f31fe9de951cba8ec1d7712798", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37dc0d8dc7248b0495b56a26ca436f3980271587/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37dc0d8dc7248b0495b56a26ca436f3980271587/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=37dc0d8dc7248b0495b56a26ca436f3980271587", "patch": "@@ -4332,6 +4332,8 @@ extern tree lookup_anon_field                   (tree, tree);\n extern bool invalid_nonstatic_memfn_p           (tree);\n extern tree convert_member_func_to_ptr          (tree, tree);\n extern tree convert_ptrmem                      (tree, tree, bool, bool);\n+extern int lvalue_or_else                       (tree, enum lvalue_use);\n+extern int lvalue_p                             (tree);\n \n /* in typeck2.c */\n extern void require_complete_eh_spec_types\t(tree, tree);"}, {"sha": "c2adb1c7fd469856d37702088f060698d92d060a", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37dc0d8dc7248b0495b56a26ca436f3980271587/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37dc0d8dc7248b0495b56a26ca436f3980271587/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=37dc0d8dc7248b0495b56a26ca436f3980271587", "patch": "@@ -6513,3 +6513,19 @@ non_reference (tree t)\n     t = TREE_TYPE (t);\n   return t;\n }\n+\n+\n+/* Return nonzero if REF is an lvalue valid for this language;\n+   otherwise, print an error message and return zero.  USE says\n+   how the lvalue is being used and so selects the error message.  */\n+\n+int\n+lvalue_or_else (tree ref, enum lvalue_use use)\n+{\n+  int win = lvalue_p (ref);\n+\n+  if (!win)\n+    lvalue_error (use);\n+\n+  return win;\n+}"}]}