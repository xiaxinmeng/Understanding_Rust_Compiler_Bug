{"sha": "76e9802c68f8a93157ab707332f338e6d67d6621", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzZlOTgwMmM2OGY4YTkzMTU3YWI3MDczMzJmMzM4ZTZkNjdkNjYyMQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-04-14T21:10:52Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-04-14T21:10:52Z"}, "message": "Makefile.am: Add definition of AM_CXXFLAGS.\n\n\t* testsuite/Makefile.am: Add definition of AM_CXXFLAGS.\n\tChange definition of CXX to use $(shell) instead of backticks.\n\t* testsuite/Makefile.in: Regenerate.\n\nFrom-SVN: r80693", "tree": {"sha": "5a55a88d0a646d76101b732f588a2863e8e705e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a55a88d0a646d76101b732f588a2863e8e705e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76e9802c68f8a93157ab707332f338e6d67d6621", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76e9802c68f8a93157ab707332f338e6d67d6621", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76e9802c68f8a93157ab707332f338e6d67d6621", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76e9802c68f8a93157ab707332f338e6d67d6621/comments", "author": null, "committer": null, "parents": [{"sha": "bb2d0eec81f4d969f495134d08e8a863470a8442", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb2d0eec81f4d969f495134d08e8a863470a8442", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb2d0eec81f4d969f495134d08e8a863470a8442"}], "stats": {"total": 140, "additions": 74, "deletions": 66}, "files": [{"sha": "f123374268d0973f27416aa5138e2da3c977ec48", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 70, "deletions": 64, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76e9802c68f8a93157ab707332f338e6d67d6621/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76e9802c68f8a93157ab707332f338e6d67d6621/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=76e9802c68f8a93157ab707332f338e6d67d6621", "patch": "@@ -1,3 +1,9 @@\n+2004-04-14  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* testsuite/Makefile.am: Add definition of AM_CXXFLAGS.\n+\tChange definition of CXX to use $(shell) instead of backticks.\n+\t* testsuite/Makefile.in: Regenerate.\n+\n 2004-04-12  Dhruv Matani  <dhruvbird@gmx.net>\n \n \t* testsuite/performance/20_util/allocator/list_sort_search.cc:\n@@ -103,19 +109,19 @@\n \tenumerations from _Rope_RopeRep here.\n \t* include/ext/ropeimpl.h: Same.\n \t* src/ext-inst.cc (_S_min_len): Fix up definition.\n-\t\n+\n \t* config/locale/gnu/ctype_members.cc: Qualify base class members\n \twith this.\n \t* config/locale/generic/ctype_members.cc: Same.\n \t* config/locale/gnu/messages_members.h: Same.\n \t* config/locale/generic/messages_members.h: Same.\n \t* src/ctype.cc: Same.\n \t* include/bits/codecvt.h: Same.\n-\t\n+\n \t* include/bits/boost_concept_check.h: Declare.\n \t(__error_type_must_be_an_unsigned_integer_type): Remove this.\n \t(__error_type_must_be_an_integer_type): Remove this.\n-\t(__error_type_must_be_a_signed_integer_type): Remove this.\t\n+\t(__error_type_must_be_a_signed_integer_type): Remove this.\n \n \t* config/io/basic_file_stdio.cc (__basic_file::sys_open): Remove cast.\n \n@@ -124,8 +130,8 @@\n \t(__cxa_allocate_exception): Same.\n \t* libsupc++/eh_catch.cc (__cxa_begin_catch): Same.\n \t* libsupc++/eh_globals.cc (__cxa_get_globals_fast): Same.\n-\t(__cxa_get_globals): Same.\t\n-\t\n+\t(__cxa_get_globals): Same.\n+\n \t* libsupc++/del_op.cc: Add comment about freestanding.\n \n 2004-04-05  Paolo Carlini  <pcarlini@suse.de>\n@@ -244,9 +250,9 @@\n \t* include/bits/stl_tree.h (_Rb_tree_impl): Add _Node_allocator\n \tdefault argument in constructors.\n \t(_Rb_tree::_M_empty_initialize): Remove.\n-\t\n+\n 2004-03-25  Benjamin Kosnik  <bkoz@redhat.com>\n-\t\n+\n \t* testsuite/23_containers/map/operators/1_neg.cc: Adjust line numbers.\n \t* testsuite/23_containers/set/operators/1_neg.cc: Same.\n \n@@ -322,7 +328,7 @@\n \t* testsuite/23_containers/deque/cons/clear_allocator.cc: New.\n \t* testsuite/23_containers/list/cons/clear_allocator.cc: New.\n \t* testsuite/23_containers/vector/cons/clear_allocator.cc: New.\n-\t\n+\n 2004-03-24  Dhruv Matani  <dhruvbird@gmx.net>\n \n \t* include/ext/malloc_allocator.h: Fixed the construct function to\n@@ -332,7 +338,7 @@\n \t* include/ext/debug_allocator.h: Added a check in the deallocate\n \tfunction to check whether the user has passed a NULL pointer or\n \tnot.\n-\t\n+\n 2004-03-24  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* docs/html/20_util/allocator.html: Add bitmap_allocator links.\n@@ -343,7 +349,7 @@\n \twarning from IA64 assembler.\n \n 2004-03-24  Dhruv Matani  <dhruvbird@gmx.net>\n-\t\n+\n \t* include/ext/bitmap_allocator.h: (_Bit_scan_forward) -> Made this\n \tfunction call __builtin_ctz instead of the while loop.\n \t(allocate) -> If condition has __builtin_expect.\n@@ -357,7 +363,7 @@\n \n \t* testsuite/performance/20_util/allocator/producer_consumer.cc:\n \tUse linear algorithm for producer.\n-\t\n+\n 2004-03-24  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/ext/mt_allocator.h (__mt_alloc<>::allocate,\n@@ -425,7 +431,7 @@\n \t* testsuite/27_io/basic_istream/extractors_arithmetic/char/12.cc:\n \tLikewise.\n \t* testsuite/27_io/basic_istream/extractors_arithmetic/char/13.cc:\n-\tLikewise.\t\n+\tLikewise.\n \n 2004-03-20  Paolo Carlini  <pcarlini@suse.de>\n \n@@ -489,18 +495,18 @@\n \t* acinclude.m4 (GLIBCXX_ENABLE_ALLOCATOR): Default setting is\n \tnew_allocator for all hosts.\n \t* configure: Regenerate.\n-\t\n+\n 2004-03-16  Paolo Carlini  <pcarlini@suse.de>\n \n \t* testsuite/22_locale/num_put/put/char/4.cc: Fix for 64-bit pointers.\n \t* testsuite/22_locale/num_put/put/wchar_t/4.cc: Likewise.\n-\t\n+\n 2004-03-15  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/locale_facets.tcc (money_get<>::_M_extract):\n \tAdjust the logic underlying the parsing of symbol to deal\n \tcorrectly with an optional sign component (i.e., when either\n-\tnegative_sign or positive_sign is empty) \n+\tnegative_sign or positive_sign is empty)\n \t* testsuite/22_locale/money_get/get/char/19.cc: New.\n \t* testsuite/22_locale/money_get/get/wchar_t/19.cc: New.\n \n@@ -521,7 +527,7 @@\n \t* include/bits/allocator.h: Include c++allocator.h.\n \t* acinclude.m4 (GLIBCXX_ENABLE_ALLOCATOR): New.\n \t* aclocal.m4: Regenerate.\n-\t* configure.ac: Use GLIBCXX_ENABLE_ALLOCATOR. \n+\t* configure.ac: Use GLIBCXX_ENABLE_ALLOCATOR.\n \t* configure: Regenerate.\n \t* include/Makefile.am (host_headers_extra): Add c++allocator.h.\n \t* include/Makefile.in: Regenerate.\n@@ -543,15 +549,15 @@\n \n \t* testsuite/20_util/allocator/14176.cc: New.\n \t* include/ext/mt_allocator.h: Formatting fixes.\n-\t\n+\n 2004-03-11  Dhruv Matani  <dhruvbird@HotPOP.com>\n \n \t* include/Makefile.am (ext_headers): Add\n \t${ext_srcdir}/bitmap_allocator.h .\n \t* include/Makefile.in: Regenerate.\n \t* docs/html/ext/ballocator_doc.txt: New file.\n \t* include/ext/bitmap_allocator.h: New file.\n-\t* testsuite/performance/20_util/allocator/list_sort_search.cc: Add \n+\t* testsuite/performance/20_util/allocator/list_sort_search.cc: Add\n \ttest.\n \t* testsuite/performance/20_util/allocator/map_mt_find.cc: Likewise.\n \t* testsuite/performance/20_util/allocator/producer_consumer.cc: Add\n@@ -617,7 +623,7 @@\n \t* testsuite/22_locale/locale/cons/12658_thread.cc: Catch exceptions.\n \n 2004-03-08  Benjamin Kosnik  <bkoz@redhat.com>\n-\t\n+\n \tPR c++/13658\n \t* testsuite/23_containers/deque/modifiers/swap.cc: New.\n \t* testsuite/23_containers/list/modifiers/swap.cc: New.\n@@ -626,7 +632,7 @@\n \t* testsuite/23_containers/multiset/modifiers/swap.cc: New.\n \t* testsuite/23_containers/set/modifiers/swap.cc: New.\n \t* testsuite/23_containers/vector/modifiers/swap.cc: New.\n-\t\n+\n 2004-03-08  Petur Runolfsson  <peturr02@ru.is>\n \n \tPR libstdc++/12658\n@@ -651,7 +657,7 @@\n \n \t* include/bits/locale_facets.tcc (money_get<>::do_get(long_double&)):\n \tRemove redundant conditional on __str.size().\n-\t\n+\n 2004-03-08  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/bits/allocator.h: Switch defaults to mt_alloc.\n@@ -666,8 +672,8 @@\n \tPR libstdc++/12658\n \t* src/locale_init.cc (locale::locale): Lock critical regions with\n \texternal mutexes.\n-\t(locale::global): Same.\t\n-\t* include/bits/concurrence.h (__glibcxx_mutex_define_initialized): \n+\t(locale::global): Same.\n+\t* include/bits/concurrence.h (__glibcxx_mutex_define_initialized):\n \tAdd in once bits for cases without __GTHREAD_MUTEX_INIT.\n \t(__glibcxx_mutex_lock): Same.\n \n@@ -681,7 +687,7 @@\n \n \t* config/linker-map.gnu: Remove types in the signature of atomic\n \texports, as they may vary.\n-\t\n+\n 2004-03-06  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/locale_facets.tcc: Tweak the comment preceding\n@@ -717,7 +723,7 @@\n \t* testsuite/23_containers/multiset/insert/1.cc: Test result string.\n \n \t* testsuite/23_containers/bitset/invalidation/1.cc: Main always\n-\treturns 0.\t\n+\treturns 0.\n \t* testsuite/23_containers/deque/invalidation/4.cc: Same.\n \t* testsuite/23_containers/list/invalidation/1.cc: Same.\n \t* testsuite/23_containers/list/invalidation/2.cc: Same.\n@@ -740,7 +746,7 @@\n \t* scripts/testsuite_flags.in: Add \"-D_GLIBCXX_ASSERT\" to\n \tCXXFLAGS_save.\n \t* testsuite/lib/libstdc++.exp: Don't add it conditionally to\n-\tDEFAULT_CXXFLAGS. \n+\tDEFAULT_CXXFLAGS.\n \t* testsuite/18_support/numeric_limits.cc: Remove \"-D_GLIBCXX_ASSERT\"\n \tfrom the dg-options.\n \t* testsuite/23_containers/vector/invalidation/1.cc: Likewise.\n@@ -773,20 +779,20 @@\n \t* testsuite/22_locale/ctype/is/wchar_t/2.cc: Same.\n \t* testsuite/22_locale/ctype/is/char/2.cc: Same.\n \t* testsuite/thread/pthread7-rope.cc: Same.\n-\t* testsuite/thread/pthread6.cc: Same.\t\n-\t* testsuite/thread/pthread5.cc: Same.\t\t\n-\t* testsuite/thread/pthread4.cc: Same.\t\n+\t* testsuite/thread/pthread6.cc: Same.\n+\t* testsuite/thread/pthread5.cc: Same.\n+\t* testsuite/thread/pthread4.cc: Same.\n \t* testsuite/thread/pthread1.cc: Same.\n \t* testsuite/ext/rope.cc: Same.\n \t* testsuite/ext/hash_set.cc: Same.\n-\t* testsuite/ext/hash_map.cc: Same.\t\n+\t* testsuite/ext/hash_map.cc: Same.\n \t* testsuite/ext/concept_checks.cc: Same.\n \t* testsuite/27_io/basic_filebuf/seekpos/wchar_t/9874.cc: Same.\n \t* testsuite/25_algorithms/unique/2.cc: Same.\n \t* testsuite/25_algorithms/unique/1.cc: Same.\n \t* testsuite/25_algorithms/rotate.cc: Same.\n \t* testsuite/25_algorithms/min_max.cc: Same.\n-\t* testsuite/25_algorithms/equal.cc: Same.\t\n+\t* testsuite/25_algorithms/equal.cc: Same.\n \t* testsuite/24_iterators/rel_ops.cc: Same.\n \t* testsuite/24_iterators/iterator.cc: Same.\n \t* testsuite/24_iterators/insert_iterator.cc: Same.\n@@ -797,7 +803,7 @@\n \t* testsuite/23_containers/vector/modifiers/1.cc: Same.\n \t* testsuite/23_containers/vector/invalidation/4.cc: Same.\n \t* testsuite/23_containers/vector/invalidation/3.cc: Same.\n-\t* testsuite/23_containers/vector/invalidation/2.cc: Same.\t\n+\t* testsuite/23_containers/vector/invalidation/2.cc: Same.\n \t* testsuite/23_containers/vector/invalidation/1.cc: Same.\n \t* testsuite/23_containers/vector/element_access/1.cc: Same.\n \t* testsuite/23_containers/vector/cons/6513.cc: Same.\n@@ -813,7 +819,7 @@\n \t* testsuite/23_containers/queue/members/7157.cc: Same.\n \t* testsuite/23_containers/priority_queue/members/7161.cc: Same.\n \t* testsuite/23_containers/multiset/invalidation/2.cc: Same.\n-\t* testsuite/23_containers/multiset/invalidation/2.cc: Same.\t\n+\t* testsuite/23_containers/multiset/invalidation/2.cc: Same.\n \t* testsuite/23_containers/multiset/insert/1.cc: Same.\n \t* testsuite/23_containers/multimap/invalidation/2.cc: Same.\n \t* testsuite/23_containers/multimap/invalidation/2.cc: Same.\n@@ -831,7 +837,7 @@\n \t* testsuite/23_containers/list/invalidation/4.cc: Same.\n \t* testsuite/23_containers/list/invalidation/3.cc: Same.\n \t* testsuite/23_containers/list/invalidation/2.cc: Same.\n-\t* testsuite/23_containers/list/invalidation/1.cc: Same.\t\n+\t* testsuite/23_containers/list/invalidation/1.cc: Same.\n \t* testsuite/23_containers/list/cons/9.cc: Same.\n \t* testsuite/23_containers/list/cons/8.cc: Same.\n \t* testsuite/23_containers/list/cons/7.cc: Same.\n@@ -913,7 +919,7 @@\n \t* acconfig.h: Remove _GLIBCXX_SUPPORTS_WEAK.\n \t* config.h.in: Regenerate.\n \t* configure: Same.\n-\t\n+\n 2004-03-01  Benjamin Kosnik  <bkoz@redhat.com>\n \n \tSupport autoconf 2.59\n@@ -927,7 +933,7 @@\n \n \t* docs/html/18_support/howto.html: Add bit about writing to\n \tstderr, mostly by Zack.\n-\t\n+\n 2004-03-01  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/locale_facets.tcc (money_get<>::_M_extract,\n@@ -946,7 +952,7 @@\n \tand decimal_point; tweak a bit.\n \t* testsuite/22_locale/num_get/get/char/15.cc: New.\n \t* testsuite/22_locale/num_get/get/wchar_t/15.cc: New.\n-\t\n+\n \t* include/bits/locale_facets.tcc (num_get<>::_M_extract_float,\n \tnum_get<>::_M_extract_int): Reorder some conditionals.\n \n@@ -957,10 +963,10 @@\n \t22.2.6.3, p3 for the thousands separators; tweak a bit.\n \t* testsuite/22_locale/money_get/get/char/15.cc: New.\n \t* testsuite/22_locale/money_get/get/wchar_t/15.cc: New.\n-\t\n+\n 2004-03-01  David Billinghurst <David.Billinghurst@riotinto.com>\n \n-\t* testsuite/lib/libstdc++.exp (v3-list-tests): Use \n+\t* testsuite/lib/libstdc++.exp (v3-list-tests): Use\n \ttestsuite_files from correct multilib blddir when running\n \ttestsuite.\n \n@@ -987,7 +993,7 @@\n \t* testsuite/22_locale/num_get/get/wchar_t/14.cc: New.\n \n 2004-02-27  Eric Christopher  <echristo@redhat.com>\n-            Phil Edwards  <phil@codesourcery.com>\n+\t    Phil Edwards  <phil@codesourcery.com>\n \n \t* testsuite/22_locale/collate/compare/wchar_t/2.cc,\n \ttestsuite/22_locale/collate/compare/wchar_t/wrapped_env.cc,\n@@ -1002,7 +1008,7 @@\n \t* testsuite/lib/libstdc++.exp:  Load target-supports.exp.\n \n 2004-02-27  Phil Edwards  <phil@codesourcery.com>\n-            Eric Christopher  <echristo@redhat.com>\n+\t    Eric Christopher  <echristo@redhat.com>\n \n \t* testsuite/config/default.exp:  Update with comments.\n \t(${tool}_target_compile):  New wrapper routine.\n@@ -1069,23 +1075,23 @@\n 2004-02-26  Benjamin Kosnik  <bkoz@redhat.com>\n \n \tPR libstdc++/10246\n-        * libsupc++/Makefile.am: Use libiberty demangler.\n-        (c_sources): Add cp-demangle.c.\n-        * libsupc++/Makefile.in: Regenerate.\n-        * src/Makefile.am (sources): Remove demangle.cc.\n-        * src/Makefile.in: Regenerate.\n-        * include/Makefile.am (bits_headers): Move demangle.h.\n+\t* libsupc++/Makefile.am: Use libiberty demangler.\n+\t(c_sources): Add cp-demangle.c.\n+\t* libsupc++/Makefile.in: Regenerate.\n+\t* src/Makefile.am (sources): Remove demangle.cc.\n+\t* src/Makefile.in: Regenerate.\n+\t* include/Makefile.am (bits_headers): Move demangle.h.\n \t(ext_headers): ...here.\n-        * include/Makefile.in: Regenerate.\n-        * include/bits/demangle.h: Move...\n+\t* include/Makefile.in: Regenerate.\n+\t* include/bits/demangle.h: Move...\n \t* include/ext/demangle.h: ...here.\n-        * src/demangle.cc: Remove.\n+\t* src/demangle.cc: Remove.\n \n 2004-02-26  Benjamin Kosnik  <bkoz@redhat.com>\n- \n-        * include/bits/demangle.h: Add type template parameter to all\n-        templates with just an Allocator template parameter.\n- \n+\n+\t* include/bits/demangle.h: Add type template parameter to all\n+\ttemplates with just an Allocator template parameter.\n+\n 2004-02-25  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/bits/atomicity.h: New, forward declarations for __atomic_add\n@@ -1119,7 +1125,7 @@\n \t* config/cpu/powerpc/atomicity.h: Same.\n \t* config/cpu/s390/atomicity.h: Same.\n \t* config/cpu/sparc/atomicity.h: Same.\n-\t\n+\n \t* src/Makefile.am (host_sources): Add atomicity.cc.\n \t(atomicity.cc): New rule.\n \t* src/Makefile.in: Regenerate.\n@@ -1135,8 +1141,8 @@\n \t* config/linker-map.gnu: Export __exchange_and_add, and __atomic_add.\n \n \t* testsuite/27_io/ios_base/cons/assign_neg.cc: Adjust line numbers.\n-\t* testsuite/27_io/ios_base/cons/copy_neg.cc: Same.\t\n-\t\n+\t* testsuite/27_io/ios_base/cons/copy_neg.cc: Same.\n+\n 2004-02-25  Jonathan Wakely  <redi@gcc.gnu.org>\n \n \t* docs/html/20_util/howto.html, docs/html/20_util/allocator.html,\n@@ -1173,20 +1179,20 @@\n \n \t* libsupc++/vterminate.cc (__gnu_cxx::__verbose_terminate_handler):\n \tOnly use fputs, not write.\n-\t\n+\n 2004-02-23  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/ext/malloc_allocator.h: Add operators ==, !=.\n \t* include/ext/new_allocator.h: Add operators ==, !=.\n \t* include/ext/mt_allocator.h (__mt_alloc::tune): New.\n \t(__mt_alloc::_S_get_options): New.\n-\t(__mt_alloc::_S_set_options): New.\t\n+\t(__mt_alloc::_S_set_options): New.\n \t(__mt_alloc::_S_thread_key_destr): To _S_destroy_thread_key.\n \t(__mt_alloc::_S_no_of_bins): To _S_bin_size.\n \tMove functions out of line, simplify, format.\n \t* src/allocator.cc: Simplify explicit instantiations.\n \t* include/bits/allocator.h: Tweak.\n-\t\n+\n 2004-02-22  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/locale_facets.tcc (money_put<>::_M_insert):\n@@ -1203,12 +1209,12 @@\n \tavoid multiple reallocations; fix parsing of sign component\n \taccording to 22.2.6.1.2, p3.\n \t(money_get<>::do_get(long double&),\n-\tmoney_get<>::do_get(string_type&)): Update calls of _M_extract.\t\n+\tmoney_get<>::do_get(string_type&)): Update calls of _M_extract.\n \t* src/locale-inst.cc:  Add instantiations of\n \tmoney_get::_M_extract<false> and money_get::_M_extract<true>.\n \t* testsuite/22_locale/money_get/get/char/14.cc: New.\n \t* testsuite/22_locale/money_get/get/wchar_t/14.cc: Ditto.\n-\t\n+\n 2004-02-21  Mark Mitchell  <mark@codesourcery.com>\n \n \t* libsupc++/vterminate.cc\n@@ -1396,7 +1402,7 @@\n \t(__basic_file<char>::xwrite): Move to __gnu_internal and make\n \tstatic.\n \t(__basic_file<char>::xsputn): Update call.\n-\t(__basic_file<char>::xsputn_2): Likewise.\t\n+\t(__basic_file<char>::xsputn_2): Likewise.\n \t* config/io/basic_file_stdio.h (__basic_file<char>::xwrite):\n \tDon't declare, now static.\n \n@@ -1492,7 +1498,7 @@\n 2004-02-08  Richard Henderson  <rth@redhat.com>\n \n \tPR libstdc++/14026\n-\t* libsupc++/eh_catch.cc (__cxa_begin_catch): Don't adjust \n+\t* libsupc++/eh_catch.cc (__cxa_begin_catch): Don't adjust\n \tuncaughtExceptions during nested catch rethrow.\n \t* testsuite/18_support/14026.cc: New.\n "}, {"sha": "c58d008d00cf3283d4b838d1ecff1931a76059d1", "filename": "libstdc++-v3/testsuite/Makefile.am", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76e9802c68f8a93157ab707332f338e6d67d6621/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76e9802c68f8a93157ab707332f338e6d67d6621/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.am?ref=76e9802c68f8a93157ab707332f338e6d67d6621", "patch": "@@ -30,7 +30,8 @@ AM_RUNTESTFLAGS =\n \n ## CXX is actually a \"C\" compiler. These are real C++ programs.\n testsuite_flags_script=${glibcxx_builddir}/scripts/testsuite_flags\n-CXX=`${testsuite_flags_script} --build-cxx`\n+CXX         = $(shell ${testsuite_flags_script} --build-cxx)\n+AM_CXXFLAGS = $(shell ${testsuite_flags_script} --cxxflags)\n \n GLIBGCC_DIR=`$(CC) -print-libgcc-file-name | sed 's,/[^/]*$$,,'`\n GLIBCXX_DIR=${glibcxx_builddir}/src/.libs"}, {"sha": "bd006066bf25b025c2127a3f030d3553b4ea356e", "filename": "libstdc++-v3/testsuite/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76e9802c68f8a93157ab707332f338e6d67d6621/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76e9802c68f8a93157ab707332f338e6d67d6621/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in?ref=76e9802c68f8a93157ab707332f338e6d67d6621", "patch": "@@ -115,7 +115,7 @@ CPPFLAGS = @CPPFLAGS@\n CSTDIO_H = @CSTDIO_H@\n CTIME_CC = @CTIME_CC@\n CTIME_H = @CTIME_H@\n-CXX = `${testsuite_flags_script} --build-cxx`\n+CXX = $(shell ${testsuite_flags_script} --build-cxx)\n CXXCPP = @CXXCPP@\n CXXFLAGS = @CXXFLAGS@\n CYGPATH_W = @CYGPATH_W@\n@@ -266,6 +266,7 @@ AM_CPPFLAGS = $(GLIBCXX_INCLUDES)\n AM_MAKEFLAGS = -j1\n AM_RUNTESTFLAGS = \n testsuite_flags_script = ${glibcxx_builddir}/scripts/testsuite_flags\n+AM_CXXFLAGS = $(shell ${testsuite_flags_script} --cxxflags)\n GLIBGCC_DIR = `$(CC) -print-libgcc-file-name | sed 's,/[^/]*$$,,'`\n GLIBCXX_DIR = ${glibcxx_builddir}/src/.libs\n CXXLINK = \\"}]}