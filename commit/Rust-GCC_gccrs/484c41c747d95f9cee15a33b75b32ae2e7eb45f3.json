{"sha": "484c41c747d95f9cee15a33b75b32ae2e7eb45f3", "node_id": "C_kwDOANBUbNoAKDQ4NGM0MWM3NDdkOTVmOWNlZTE1YTMzYjc1YjMyYWUyZTdlYjQ1ZjM", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-03-23T09:02:25Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-03-23T09:02:25Z"}, "message": "tree-vect-generic: Fix up expand_vector_condition [PR109176]\n\nThe following testcase ICEs on aarch64-linux, because\nexpand_vector_condition attempts to piecewise lower SVE\n  d_3 = a_1(D) < b_2(D);\n  _5 = VEC_COND_EXPR <d_3, c_4(D), d_3>;\nwhich isn't possible - nunits_for_known_piecewise_op ICEs but\nthe rest of the code assumes constant number of elements too.\n\nexpand_vector_condition attempts to find if a (rhs1) is a SSA_NAME\nfor comparison and calls expand_vec_cond_expr_p (type, TREE_TYPE (a1), code)\nwhere a1 is one of the operands of the comparison and code is the comparison\ncode.  That one indeed isn't supported here, but what aarch64 SVE supports\nare the individual statements, comparison (expand_vec_cmp_expr_p) and\nexpand_vec_cond_expr_p (type, TREE_TYPE (a), SSA_NAME), the latter because\nthat function starts with\n  if (VECTOR_BOOLEAN_TYPE_P (cmp_op_type)\n      && get_vcond_mask_icode (TYPE_MODE (value_type),\n                               TYPE_MODE (cmp_op_type)) != CODE_FOR_nothing)\n    return true;\n\nIn an earlier version of the patch (in the PR), we did this\n  if (VECTOR_BOOLEAN_TYPE_P (TREE_TYPE (a))\n      && expand_vec_cond_expr_p (type, TREE_TYPE (a), ERROR_MARK))\n    return true;\nbefore the code == SSA_NAME handling plus some further tweaks later.\nWhile that fixed the ICE, it broke quite a few tests on x86 and some on\naarch64 too.  The problem is that expand_vector_comparison doesn't lower\ncomparisons which aren't supported and only feed VEC_COND_EXPR first operand\nand expand_vector_condition succeeds for those, so with the above mentioned\nchange we'd verify the VEC_COND_EXPR is implementable using optab alone,\nbut nothing would verify the tcc_comparison which relied on\nexpand_vector_condition to verify.\n\nSo, the following patch instead queries whether optabs can handle the\ncomparison and VEC_COND_EXPR together (if a (rhs1) is a comparison;\notherwise as before it checks only the VEC_COND_EXPR) and if that fails,\nalso checks whether the two operations could be supported individually\nand only if even that fails does the piecewise lowering.\n\n2023-03-23  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/109176\n\t* tree-vect-generic.cc (expand_vector_condition): If a has\n\tvector boolean type and is a comparison, also check if both\n\tthe comparison and VEC_COND_EXPR could be successfully expanded\n\tindividually.\n\n\t* gcc.target/aarch64/sve/pr109176.c: New test.", "tree": {"sha": "afa16c41a6f03c7807351dc8b4e65fcbab180053", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/afa16c41a6f03c7807351dc8b4e65fcbab180053"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/484c41c747d95f9cee15a33b75b32ae2e7eb45f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/484c41c747d95f9cee15a33b75b32ae2e7eb45f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/484c41c747d95f9cee15a33b75b32ae2e7eb45f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/484c41c747d95f9cee15a33b75b32ae2e7eb45f3/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a982e07d28a46da81ee5b65b03a896d84b32a48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a982e07d28a46da81ee5b65b03a896d84b32a48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a982e07d28a46da81ee5b65b03a896d84b32a48"}], "stats": {"total": 21, "additions": 21, "deletions": 0}, "files": [{"sha": "958edb86ce3ea21d603ef5126bfe693ef3cecf5f", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pr109176.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/484c41c747d95f9cee15a33b75b32ae2e7eb45f3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr109176.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/484c41c747d95f9cee15a33b75b32ae2e7eb45f3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr109176.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr109176.c?ref=484c41c747d95f9cee15a33b75b32ae2e7eb45f3", "patch": "@@ -0,0 +1,12 @@\n+/* PR tree-optimization/109176 */\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include <arm_sve.h>\n+\n+svbool_t\n+foo (svint8_t a, svint8_t b, svbool_t c)\n+{\n+  svbool_t d = svcmplt_s8 (svptrue_pat_b8 (SV_ALL), a, b);\n+  return svsel_b (d, c, d);\n+}"}, {"sha": "67f138a9332d6e30a65a7aac8f317273e81bab4d", "filename": "gcc/tree-vect-generic.cc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/484c41c747d95f9cee15a33b75b32ae2e7eb45f3/gcc%2Ftree-vect-generic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/484c41c747d95f9cee15a33b75b32ae2e7eb45f3/gcc%2Ftree-vect-generic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-generic.cc?ref=484c41c747d95f9cee15a33b75b32ae2e7eb45f3", "patch": "@@ -1063,6 +1063,15 @@ expand_vector_condition (gimple_stmt_iterator *gsi, bitmap dce_ssa_names)\n       return true;\n     }\n \n+  /* If a has vector boolean type and is a comparison, above\n+     expand_vec_cond_expr_p might fail, even if both the comparison and\n+     VEC_COND_EXPR could be supported individually.  See PR109176.  */\n+  if (a_is_comparison\n+      && VECTOR_BOOLEAN_TYPE_P (TREE_TYPE (a))\n+      && expand_vec_cond_expr_p (type, TREE_TYPE (a), SSA_NAME)\n+      && expand_vec_cmp_expr_p (TREE_TYPE (a1), TREE_TYPE (a), code))\n+    return true;\n+\n   /* Handle vector boolean types with bitmasks.  If there is a comparison\n      and we can expand the comparison into the vector boolean bitmask,\n      or otherwise if it is compatible with type, we can transform"}]}