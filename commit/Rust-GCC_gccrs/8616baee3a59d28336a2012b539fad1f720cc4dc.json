{"sha": "8616baee3a59d28336a2012b539fad1f720cc4dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODYxNmJhZWUzYTU5ZDI4MzM2YTIwMTJiNTM5ZmFkMWY3MjBjYzRkYw==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2014-08-04T08:09:31Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-08-04T08:09:31Z"}, "message": "s-imgrea.adb (Image_Floating_Point): Don't add space before +Inf.\n\n2014-08-04  Robert Dewar  <dewar@adacore.com>\n\n\t* s-imgrea.adb (Image_Floating_Point): Don't add space before +Inf.\n\t* s-fatgen.adb (Pred): Handle Float'First.\n\t(Succ): Handle Float'Last.\n\nFrom-SVN: r213539", "tree": {"sha": "13efdf4ce1f9572139eb45845f4cef3eb107141e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13efdf4ce1f9572139eb45845f4cef3eb107141e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8616baee3a59d28336a2012b539fad1f720cc4dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8616baee3a59d28336a2012b539fad1f720cc4dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8616baee3a59d28336a2012b539fad1f720cc4dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8616baee3a59d28336a2012b539fad1f720cc4dc/comments", "author": null, "committer": null, "parents": [{"sha": "98bf4cf4973d9b66774c85fe271073e7bc0ff916", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98bf4cf4973d9b66774c85fe271073e7bc0ff916", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98bf4cf4973d9b66774c85fe271073e7bc0ff916"}], "stats": {"total": 72, "additions": 56, "deletions": 16}, "files": [{"sha": "985c915be826b8eebc79028ce04d88484f160095", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8616baee3a59d28336a2012b539fad1f720cc4dc/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8616baee3a59d28336a2012b539fad1f720cc4dc/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=8616baee3a59d28336a2012b539fad1f720cc4dc", "patch": "@@ -1,3 +1,9 @@\n+2014-08-04  Robert Dewar  <dewar@adacore.com>\n+\n+\t* s-imgrea.adb (Image_Floating_Point): Don't add space before +Inf.\n+\t* s-fatgen.adb (Pred): Handle Float'First.\n+\t(Succ): Handle Float'Last.\n+\n 2014-08-04  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_util.adb (Is_Potentially_Unevaluated): If the original"}, {"sha": "be564cf6a0e223fd4093b1f0bc1758306e1e1896", "filename": "gcc/ada/s-fatgen.adb", "status": "modified", "additions": 46, "deletions": 13, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8616baee3a59d28336a2012b539fad1f720cc4dc/gcc%2Fada%2Fs-fatgen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8616baee3a59d28336a2012b539fad1f720cc4dc/gcc%2Fada%2Fs-fatgen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-fatgen.adb?ref=8616baee3a59d28336a2012b539fad1f720cc4dc", "patch": "@@ -401,22 +401,37 @@ package body System.Fat_Gen is\n    -- Pred --\n    ----------\n \n-   --  Subtract from the given number a number equivalent to the value of its\n-   --  least significant bit. Given that the most significant bit represents\n-   --  a value of 1.0 * radix ** (exp - 1), the value we want is obtained by\n-   --  shifting this by (mantissa-1) bits to the right, i.e. decreasing the\n-   --  exponent by that amount.\n-\n-   --  Zero has to be treated specially, since its exponent is zero\n-\n    function Pred (X : T) return T is\n       X_Frac : T;\n       X_Exp  : UI;\n \n    begin\n+      --  Zero has to be treated specially, since its exponent is zero\n+\n       if X = 0.0 then\n          return -Succ (X);\n \n+      --  Special treatment for most negative number\n+\n+      elsif X = T'First then\n+\n+         --  If not generating infinities, we raise a constraint error\n+\n+         if T'Machine_Overflows then\n+            raise Constraint_Error with \"Pred of largest negative number\";\n+\n+         --  Otherwise generate a negative infinity\n+\n+         else\n+            return X / (X - X);\n+         end if;\n+\n+      --  Subtract from the given number a number equivalent to the value\n+      --  of its least significant bit. Given that the most significant bit\n+      --  represents a value of 1.0 * radix ** (exp - 1), the value we want\n+      --  is obtained by shifting this by (mantissa-1) bits to the right,\n+      --  i.e. decreasing the exponent by that amount.\n+\n       else\n          Decompose (X, X_Frac, X_Exp);\n \n@@ -624,17 +639,14 @@ package body System.Fat_Gen is\n    -- Succ --\n    ----------\n \n-   --  Similar computation to that of Pred: find value of least significant\n-   --  bit of given number, and add. Zero has to be treated specially since\n-   --  the exponent can be zero, and also we want the smallest denormal if\n-   --  denormals are supported.\n-\n    function Succ (X : T) return T is\n       X_Frac : T;\n       X_Exp  : UI;\n       X1, X2 : T;\n \n    begin\n+      --  Treat zero specially since it has a zero exponent\n+\n       if X = 0.0 then\n          X1 := 2.0 ** T'Machine_Emin;\n \n@@ -648,6 +660,27 @@ package body System.Fat_Gen is\n \n          return X1;\n \n+      --  Special treatment for largest positive number\n+\n+      elsif X = T'Last then\n+\n+         --  If not generating infinities, we raise a constraint error\n+\n+         if T'Machine_Overflows then\n+            raise Constraint_Error with \"Succ of largest negative number\";\n+\n+         --  Otherwise generate a positive infinity\n+\n+         else\n+            return X / (X - X);\n+         end if;\n+\n+      --  Add to the given number a number equivalent to the value\n+      --  of its least significant bit. Given that the most significant bit\n+      --  represents a value of 1.0 * radix ** (exp - 1), the value we want\n+      --  is obtained by shifting this by (mantissa-1) bits to the right,\n+      --  i.e. decreasing the exponent by that amount.\n+\n       else\n          Decompose (X, X_Frac, X_Exp);\n "}, {"sha": "075a5774000d3e1974161d432ca0e022aa2fea2e", "filename": "gcc/ada/s-imgrea.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8616baee3a59d28336a2012b539fad1f720cc4dc/gcc%2Fada%2Fs-imgrea.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8616baee3a59d28336a2012b539fad1f720cc4dc/gcc%2Fada%2Fs-imgrea.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imgrea.adb?ref=8616baee3a59d28336a2012b539fad1f720cc4dc", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -93,9 +93,10 @@ package body System.Img_Real is\n       --  output of -0.0 on targets where this is the case). We can of\n       --  course still see a -0.0 on a target where Signed_Zeroes is\n       --  False (since this attribute refers to the proper handling of\n-      --  negative zeroes, not to their existence).\n+      --  negative zeroes, not to their existence). We do not generate\n+      --  a blank for positive infinity, since we output an explicit +.\n \n-      if not Is_Negative (V)\n+      if (not Is_Negative (V) and then V <= Long_Long_Float'Last)\n         or else (not Long_Long_Float'Signed_Zeros and then V = -0.0)\n       then\n          S (1) := ' ';"}]}