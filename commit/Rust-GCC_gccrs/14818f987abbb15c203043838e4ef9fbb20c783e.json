{"sha": "14818f987abbb15c203043838e4ef9fbb20c783e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQ4MThmOTg3YWJiYjE1YzIwMzA0MzgzOGU0ZWY5ZmJiMjBjNzgzZQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2019-12-20T23:30:04Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2019-12-20T23:30:04Z"}, "message": "PR c++/92745 - bogus error when initializing array of vectors.\n\nIn r268428 I changed reshape_init_r in such a way that when it sees\na nested { } in a CONSTRUCTOR with missing braces, it just returns\nthe initializer:\n+     else if (COMPOUND_LITERAL_P (stripped_init)\n...\n+         ++d->cur;\n+         gcc_assert (!BRACE_ENCLOSED_INITIALIZER_P (stripped_init));\n+         return init;\n\nBut as this test shows, that's incorrect: if TYPE is an array, we need\nto proceed to reshape_init_array_1 which will iterate over the array\ninitializers:\n 6006   /* Loop until there are no more initializers.  */\n 6007   for (index = 0;\n 6008        d->cur != d->end && (!sized_array_p || index <= max_index_cst);\n 6009        ++index)\n 6010     {\nand update d.cur accordingly.  In other words, when reshape_init gets\n\n{{col[0][0], col[1][0], col[2][0], col[3][0]},\n {col[0][1], col[1][1], col[2][1], col[3][1]},\n {col[0][2], col[1][2], col[2][2], col[3][2]},\n {col[0][3], col[1][3], col[2][3], col[3][3]}}\n\nwe recurse on the first element:\n  {col[0][0], col[1][0], col[2][0], col[3][0]}\nand we can't just move d.cur to point to\n  {col[0][1], col[1][1], col[2][1], col[3][1]}\nand return; we need to iterate, so that d.cur ends up being properly\nupdated, and after all initializers have been seen, points to d.end.\nCurrently we skip the loop, wherefore we hit this:\n\n 6502   /* Make sure all the element of the constructor were used. Otherwise,\n 6503      issue an error about exceeding initializers.  */\n 6504   if (d.cur != d.end)\n 6505     {\n 6506       if (complain & tf_error)\n 6507         error (\"too many initializers for %qT\", type);\n 6508       return error_mark_node;\n 6509     }\n\n\t* decl.c (reshape_init_r): For a nested compound literal, do\n\tcall reshape_init_{class,array,vector}.\n\n\t* g++.dg/cpp0x/initlist118.C: New test.\n\nFrom-SVN: r279686", "tree": {"sha": "d92d324dc4356c9a277942180fa4522b7cee4222", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d92d324dc4356c9a277942180fa4522b7cee4222"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14818f987abbb15c203043838e4ef9fbb20c783e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14818f987abbb15c203043838e4ef9fbb20c783e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14818f987abbb15c203043838e4ef9fbb20c783e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14818f987abbb15c203043838e4ef9fbb20c783e/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "97ba5b86a3c7afba4e53b84d40e056328c5ba5e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97ba5b86a3c7afba4e53b84d40e056328c5ba5e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97ba5b86a3c7afba4e53b84d40e056328c5ba5e0"}], "stats": {"total": 47, "additions": 39, "deletions": 8}, "files": [{"sha": "b047dbff0f2938b043f524e5e3404ce56ebc3f9e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14818f987abbb15c203043838e4ef9fbb20c783e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14818f987abbb15c203043838e4ef9fbb20c783e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=14818f987abbb15c203043838e4ef9fbb20c783e", "patch": "@@ -1,5 +1,9 @@\n 2019-12-19  Marek Polacek  <polacek@redhat.com>\n \n+\tPR c++/92745 - bogus error when initializing array of vectors.\n+\t* decl.c (reshape_init_r): For a nested compound literal, do\n+\tcall reshape_init_{class,array,vector}.\n+\n \tPR c++/92974 - bogus location for enum and non-enum in ?: warning.\n \t* tree.c (build_min_non_dep): Use the location of NON_DEP when\n \tbuilding the expression."}, {"sha": "c15cbfa3bd3532fa86ca5bcc6a75dde633e922a4", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14818f987abbb15c203043838e4ef9fbb20c783e/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14818f987abbb15c203043838e4ef9fbb20c783e/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=14818f987abbb15c203043838e4ef9fbb20c783e", "patch": "@@ -6399,14 +6399,13 @@ reshape_init_r (tree type, reshape_iter *d, bool first_initializer_p,\n \t       by the front end.  Here we have e.g. {.__pfn=0B, .__delta=0},\n \t       which is missing outermost braces.  We should warn below, and\n \t       one of the routines below will wrap it in additional { }.  */;\n-\t  /* For a nested compound literal, there is no need to reshape since\n-\t     we called reshape_init in finish_compound_literal, before calling\n-\t     digest_init.  */\n-\t  else if (COMPOUND_LITERAL_P (stripped_init)\n-\t\t   /* Similarly, a CONSTRUCTOR of the target's type is a\n-\t\t      previously digested initializer.  */\n-\t\t   || same_type_ignoring_top_level_qualifiers_p (type,\n-\t\t\t\t\t\t\t\t init_type))\n+\t  /* For a nested compound literal, proceed to specialized routines,\n+\t     to handle initialization of arrays and similar.  */\n+\t  else if (COMPOUND_LITERAL_P (stripped_init))\n+\t    gcc_assert (!BRACE_ENCLOSED_INITIALIZER_P (stripped_init));\n+\t  /* A CONSTRUCTOR of the target's type is a previously\n+\t     digested initializer.  */\n+\t  else if (same_type_ignoring_top_level_qualifiers_p (type, init_type))\n \t    {\n \t      ++d->cur;\n \t      gcc_assert (!BRACE_ENCLOSED_INITIALIZER_P (stripped_init));"}, {"sha": "207d64ac1bd7b84b15c1b09cf229f6bfad5b5542", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14818f987abbb15c203043838e4ef9fbb20c783e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14818f987abbb15c203043838e4ef9fbb20c783e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=14818f987abbb15c203043838e4ef9fbb20c783e", "patch": "@@ -1,5 +1,8 @@\n 2019-12-19  Marek Polacek  <polacek@redhat.com>\n \n+\tPR c++/92745 - bogus error when initializing array of vectors.\n+\t* g++.dg/cpp0x/initlist118.C: New test.\n+\n \tPR c++/92974 - bogus location for enum and non-enum in ?: warning.\n \t* g++.dg/diagnostic/enum1.C: New test.\n \t* g++.dg/gomp/loop-2.C: Adjust dg-error."}, {"sha": "2e1b96953e3418ff4aa31cacd702eb0185356fbe", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist118.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14818f987abbb15c203043838e4ef9fbb20c783e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist118.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14818f987abbb15c203043838e4ef9fbb20c783e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist118.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist118.C?ref=14818f987abbb15c203043838e4ef9fbb20c783e", "patch": "@@ -0,0 +1,25 @@\n+// PR c++/92745 - bogus error when initializing array of vectors.\n+// { dg-do compile { target c++11 } }\n+\n+template <typename a, int b> struct c {\n+  typedef a d[b];\n+};\n+\n+template <typename a, int b> struct array {\n+  typename c<a, b>::d e;\n+  a operator[](long);\n+};\n+\n+template<class T>\n+using vec4_t __attribute__((vector_size(4*sizeof(T)))) = float;\n+\n+array<vec4_t<float>, 4>\n+transpose(array<vec4_t<float>, 4> col)\n+{\n+  array<vec4_t<float>, 4>\n+    ret{vec4_t<float>{col[0][0], col[1][0], col[2][0], col[3][0]},\n+        vec4_t<float>{col[0][1], col[1][1], col[2][1], col[3][1]},\n+        vec4_t<float>{col[0][2], col[1][2], col[2][2], col[3][2]},\n+        vec4_t<float>{col[0][3], col[1][3], col[2][3], col[3][3]}};\n+  return ret;\n+}"}]}