{"sha": "998eaf975b729d18892843568bffa4dae1d80938", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTk4ZWFmOTc1YjcyOWQxODg5Mjg0MzU2OGJmZmE0ZGFlMWQ4MDkzOA==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2013-05-01T15:16:14Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2013-05-01T15:16:14Z"}, "message": "[AArch64] Refactor vector max and min RTL and builtins.\n\ngcc/\n\t* config/aarch64/aarch64-simd-builtins.def\n\t(reduc_smax_): New.\n\t(reduc_smin_): Likewise.\n\t(reduc_umax_): Likewise.\n\t(reduc_umin_): Likewise.\n\t(reduc_smax_nan_): Likewise.\n\t(reduc_smin_nan_): Likewise.\n\t(fmax): Remove.\n\t(fmin): Likewise.\n\t(smax): Update for V2SF, V4SF and V2DF modes.\n\t(smin): Likewise.\n\t(smax_nan): New.\n\t(smin_nan): Likewise.\n\t* config/aarch64/aarch64-simd.md (<maxmin><mode>3): Rename to...\n\t(<su><maxmin><mode>3): ...This, refactor.\n\t(s<maxmin><mode>3): New.\n\t(<maxmin_uns><mode>3): Likewise.\n\t(reduc_<maxmin_uns>_<mode>): Refactor.\n\t(reduc_<maxmin_uns>_v4sf): Likewise.\n\t(reduc_<maxmin_uns>_v2si): Likewise.\n\t(aarch64_<fmaxmin><mode>: Remove.\n\t* config/aarch64/arm_neon.h (vmax<q>_f<32,64>): Rewrite to use\n\tnew builtin names.\n\t(vmin<q>_f<32,64>): Likewise.\n\t* config/iterators.md (unspec): Add UNSPEC_FMAXNMV, UNSPEC_FMINNMV.\n\t(FMAXMIN): New.\n\t(su): Add mappings for smax, smin, umax, umin.\n\t(maxmin): New.\n\t(FMAXMINV): Add UNSPEC_FMAXNMV, UNSPEC_FMINNMV.\n\t(FMAXMIN): Rename as...\n\t(FMAXMIN_UNS): ...This.\n\t(maxminv): Remove.\n\t(fmaxminv): Likewise.\n\t(fmaxmin): Likewise.\n\t(maxmin_uns): New.\n\t(maxmin_uns_op): Likewise.\n\nFrom-SVN: r198497", "tree": {"sha": "8c97b2f32f48d2d9aa61efecaa8c314717bee6d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c97b2f32f48d2d9aa61efecaa8c314717bee6d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/998eaf975b729d18892843568bffa4dae1d80938", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/998eaf975b729d18892843568bffa4dae1d80938", "html_url": "https://github.com/Rust-GCC/gccrs/commit/998eaf975b729d18892843568bffa4dae1d80938", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/998eaf975b729d18892843568bffa4dae1d80938/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "92d9038e4fa2a9fa4ab4e5a73e243534c098764d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92d9038e4fa2a9fa4ab4e5a73e243534c098764d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92d9038e4fa2a9fa4ab4e5a73e243534c098764d"}], "stats": {"total": 223, "additions": 144, "deletions": 79}, "files": [{"sha": "ea469b8a33e05373235484ac33c7c91bcb11e371", "filename": "gcc/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/998eaf975b729d18892843568bffa4dae1d80938/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/998eaf975b729d18892843568bffa4dae1d80938/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=998eaf975b729d18892843568bffa4dae1d80938", "patch": "@@ -1,3 +1,42 @@\n+2013-05-01  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def\n+\t(reduc_smax_): New.\n+\t(reduc_smin_): Likewise.\n+\t(reduc_umax_): Likewise.\n+\t(reduc_umin_): Likewise.\n+\t(reduc_smax_nan_): Likewise.\n+\t(reduc_smin_nan_): Likewise.\n+\t(fmax): Remove.\n+\t(fmin): Likewise.\n+\t(smax): Update for V2SF, V4SF and V2DF modes.\n+\t(smin): Likewise.\n+\t(smax_nan): New.\n+\t(smin_nan): Likewise.\n+\t* config/aarch64/aarch64-simd.md (<maxmin><mode>3): Rename to...\n+\t(<su><maxmin><mode>3): ...This, refactor.\n+\t(s<maxmin><mode>3): New.\n+\t(<maxmin_uns><mode>3): Likewise.\n+\t(reduc_<maxmin_uns>_<mode>): Refactor.\n+\t(reduc_<maxmin_uns>_v4sf): Likewise.\n+\t(reduc_<maxmin_uns>_v2si): Likewise.\n+\t(aarch64_<fmaxmin><mode>: Remove.\n+\t* config/aarch64/arm_neon.h (vmax<q>_f<32,64>): Rewrite to use\n+\tnew builtin names.\n+\t(vmin<q>_f<32,64>): Likewise.\n+\t* config/iterators.md (unspec): Add UNSPEC_FMAXNMV, UNSPEC_FMINNMV.\n+\t(FMAXMIN): New.\n+\t(su): Add mappings for smax, smin, umax, umin.\n+\t(maxmin): New.\n+\t(FMAXMINV): Add UNSPEC_FMAXNMV, UNSPEC_FMINNMV.\n+\t(FMAXMIN): Rename as...\n+\t(FMAXMIN_UNS): ...This.\n+\t(maxminv): Remove.\n+\t(fmaxminv): Likewise.\n+\t(fmaxmin): Likewise.\n+\t(maxmin_uns): New.\n+\t(maxmin_uns_op): Likewise.\n+\n 2013-05-01  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* config/aarch64/arm_neon.h"}, {"sha": "97a597e2e2c65b5cd8ce0799e525e6eb98d33f67", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/998eaf975b729d18892843568bffa4dae1d80938/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/998eaf975b729d18892843568bffa4dae1d80938/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=998eaf975b729d18892843568bffa4dae1d80938", "patch": "@@ -234,18 +234,26 @@\n   BUILTIN_VSDQ_I_DI (BINOP, cmgtu, 0)\n   BUILTIN_VSDQ_I_DI (BINOP, cmtst, 0)\n \n-  /* Implemented by aarch64_<fmaxmin><mode>.  */\n-  BUILTIN_VDQF (BINOP, fmax, 0)\n-  BUILTIN_VDQF (BINOP, fmin, 0)\n-\n   /* Implemented by aarch64_addv<mode>.  */\n   BUILTIN_VDQF (UNOP, addv, 0)\n \n-  /* Implemented by <maxmin><mode>3.  */\n-  BUILTIN_VDQ_BHSI (BINOP, smax, 3)\n-  BUILTIN_VDQ_BHSI (BINOP, smin, 3)\n+  /* Implemented by reduc_<maxmin_uns>_<mode>.  */\n+  BUILTIN_VDQIF (UNOP, reduc_smax_, 10)\n+  BUILTIN_VDQIF (UNOP, reduc_smin_, 10)\n+  BUILTIN_VDQ_BHSI (UNOP, reduc_umax_, 10)\n+  BUILTIN_VDQ_BHSI (UNOP, reduc_umin_, 10)\n+  BUILTIN_VDQF (UNOP, reduc_smax_nan_, 10)\n+  BUILTIN_VDQF (UNOP, reduc_smin_nan_, 10)\n+\n+  /* Implemented by <maxmin><mode>3.\n+     smax variants map to fmaxnm,\n+     smax_nan variants map to fmax.  */\n+  BUILTIN_VDQIF (BINOP, smax, 3)\n+  BUILTIN_VDQIF (BINOP, smin, 3)\n   BUILTIN_VDQ_BHSI (BINOP, umax, 3)\n   BUILTIN_VDQ_BHSI (BINOP, umin, 3)\n+  BUILTIN_VDQF (BINOP, smax_nan, 3)\n+  BUILTIN_VDQF (BINOP, smin_nan, 3)\n \n   /* Implemented by <frint_pattern><mode>2.  */\n   BUILTIN_VDQF (UNOP, btrunc, 2)"}, {"sha": "8a487397bf28014bd468cd8e75166b63177b867f", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 47, "deletions": 47, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/998eaf975b729d18892843568bffa4dae1d80938/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/998eaf975b729d18892843568bffa4dae1d80938/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=998eaf975b729d18892843568bffa4dae1d80938", "patch": "@@ -940,12 +940,12 @@\n )\n \n ;; Max/Min operations.\n-(define_insn \"<maxmin><mode>3\"\n+(define_insn \"<su><maxmin><mode>3\"\n  [(set (match_operand:VQ_S 0 \"register_operand\" \"=w\")\n        (MAXMIN:VQ_S (match_operand:VQ_S 1 \"register_operand\" \"w\")\n \t\t    (match_operand:VQ_S 2 \"register_operand\" \"w\")))]\n  \"TARGET_SIMD\"\n- \"<maxmin>\\t%0.<Vtype>, %1.<Vtype>, %2.<Vtype>\"\n+ \"<su><maxmin>\\t%0.<Vtype>, %1.<Vtype>, %2.<Vtype>\"\n   [(set_attr \"simd_type\" \"simd_minmax\")\n    (set_attr \"simd_mode\" \"<MODE>\")]\n )\n@@ -1417,44 +1417,23 @@\n ;; only introduces MIN_EXPR/MAX_EXPR in fast math mode or when not honouring\n ;; NaNs.\n \n-(define_insn \"smax<mode>3\"\n+(define_insn \"<su><maxmin><mode>3\"\n   [(set (match_operand:VDQF 0 \"register_operand\" \"=w\")\n-        (smax:VDQF (match_operand:VDQF 1 \"register_operand\" \"w\")\n+        (FMAXMIN:VDQF (match_operand:VDQF 1 \"register_operand\" \"w\")\n \t\t   (match_operand:VDQF 2 \"register_operand\" \"w\")))]\n   \"TARGET_SIMD\"\n-  \"fmaxnm\\\\t%0.<Vtype>, %1.<Vtype>, %2.<Vtype>\"\n+  \"f<maxmin>nm\\\\t%0.<Vtype>, %1.<Vtype>, %2.<Vtype>\"\n   [(set_attr \"simd_type\" \"simd_fminmax\")\n    (set_attr \"simd_mode\" \"<MODE>\")]\n )\n \n-(define_insn \"smin<mode>3\"\n+(define_insn \"<maxmin_uns><mode>3\"\n   [(set (match_operand:VDQF 0 \"register_operand\" \"=w\")\n-        (smin:VDQF (match_operand:VDQF 1 \"register_operand\" \"w\")\n-\t\t   (match_operand:VDQF 2 \"register_operand\" \"w\")))]\n+       (unspec:VDQF [(match_operand:VDQF 1 \"register_operand\" \"w\")\n+\t\t     (match_operand:VDQF 2 \"register_operand\" \"w\")]\n+\t\t    FMAXMIN_UNS))]\n   \"TARGET_SIMD\"\n-  \"fminnm\\\\t%0.<Vtype>, %1.<Vtype>, %2.<Vtype>\"\n-  [(set_attr \"simd_type\" \"simd_fminmax\")\n-   (set_attr \"simd_mode\" \"<MODE>\")]\n-)\n-\n-;; FP 'across lanes' max and min ops.\n-\n-(define_insn \"reduc_s<fmaxminv>_v4sf\"\n- [(set (match_operand:V4SF 0 \"register_operand\" \"=w\")\n-       (unspec:V4SF [(match_operand:V4SF 1 \"register_operand\" \"w\")]\n-\t\t    FMAXMINV))]\n- \"TARGET_SIMD\"\n- \"f<fmaxminv>nmv\\\\t%s0, %1.4s\";\n-  [(set_attr \"simd_type\" \"simd_fminmaxv\")\n-   (set_attr \"simd_mode\" \"V4SF\")]\n-)\n-\n-(define_insn \"reduc_s<fmaxminv>_<mode>\"\n- [(set (match_operand:V2F 0 \"register_operand\" \"=w\")\n-       (unspec:V2F [(match_operand:V2F 1 \"register_operand\" \"w\")]\n-\t\t    FMAXMINV))]\n- \"TARGET_SIMD\"\n- \"f<fmaxminv>nmp\\\\t%0.<Vtype>, %1.<Vtype>, %1.<Vtype>\";\n+  \"<maxmin_uns_op>\\\\t%0.<Vtype>, %1.<Vtype>, %2.<Vtype>\"\n   [(set_attr \"simd_type\" \"simd_fminmax\")\n    (set_attr \"simd_mode\" \"<MODE>\")]\n )\n@@ -1609,26 +1588,58 @@\n  \"\"\n )\n \n-(define_insn \"reduc_<maxminv>_<mode>\"\n+;; 'across lanes' max and min ops.\n+\n+(define_insn \"reduc_<maxmin_uns>_<mode>\"\n  [(set (match_operand:VDQV 0 \"register_operand\" \"=w\")\n        (unspec:VDQV [(match_operand:VDQV 1 \"register_operand\" \"w\")]\n \t\t    MAXMINV))]\n  \"TARGET_SIMD\"\n- \"<maxminv>v\\\\t%<Vetype>0, %1.<Vtype>\"\n+ \"<maxmin_uns_op>v\\\\t%<Vetype>0, %1.<Vtype>\"\n   [(set_attr \"simd_type\" \"simd_minmaxv\")\n    (set_attr \"simd_mode\" \"<MODE>\")]\n )\n \n-(define_insn \"reduc_<maxminv>_v2si\"\n+(define_insn \"reduc_<maxmin_uns>_v2di\"\n+ [(set (match_operand:V2DI 0 \"register_operand\" \"=w\")\n+       (unspec:V2DI [(match_operand:V2DI 1 \"register_operand\" \"w\")]\n+\t\t    MAXMINV))]\n+ \"TARGET_SIMD\"\n+ \"<maxmin_uns_op>p\\\\t%d0, %1.2d\"\n+  [(set_attr \"simd_type\" \"simd_minmaxv\")\n+   (set_attr \"simd_mode\" \"V2DI\")]\n+)\n+\n+(define_insn \"reduc_<maxmin_uns>_v2si\"\n  [(set (match_operand:V2SI 0 \"register_operand\" \"=w\")\n        (unspec:V2SI [(match_operand:V2SI 1 \"register_operand\" \"w\")]\n \t\t    MAXMINV))]\n  \"TARGET_SIMD\"\n- \"<maxminv>p\\\\t%0.2s, %1.2s, %1.2s\"\n-  [(set_attr \"simd_type\" \"simd_minmax\")\n+ \"<maxmin_uns_op>p\\\\t%0.2s, %1.2s, %1.2s\"\n+  [(set_attr \"simd_type\" \"simd_minmaxv\")\n    (set_attr \"simd_mode\" \"V2SI\")]\n )\n \n+(define_insn \"reduc_<maxmin_uns>_<mode>\"\n+ [(set (match_operand:V2F 0 \"register_operand\" \"=w\")\n+       (unspec:V2F [(match_operand:V2F 1 \"register_operand\" \"w\")]\n+\t\t    FMAXMINV))]\n+ \"TARGET_SIMD\"\n+ \"<maxmin_uns_op>p\\\\t%<Vetype>0, %1.<Vtype>\"\n+  [(set_attr \"simd_type\" \"simd_fminmaxv\")\n+   (set_attr \"simd_mode\" \"<MODE>\")]\n+)\n+\n+(define_insn \"reduc_<maxmin_uns>_v4sf\"\n+ [(set (match_operand:V4SF 0 \"register_operand\" \"=w\")\n+       (unspec:V4SF [(match_operand:V4SF 1 \"register_operand\" \"w\")]\n+\t\t    FMAXMINV))]\n+ \"TARGET_SIMD\"\n+ \"<maxmin_uns_op>v\\\\t%s0, %1.4s\"\n+  [(set_attr \"simd_type\" \"simd_fminmaxv\")\n+   (set_attr \"simd_mode\" \"V4SF\")]\n+)\n+\n ;; aarch64_simd_bsl may compile to any of bsl/bif/bit depending on register\n ;; allocation.\n ;; Operand 1 is the mask, operands 2 and 3 are the bitfields from which\n@@ -3442,17 +3453,6 @@\n    (set_attr \"simd_mode\" \"DI\")]\n )\n \n-(define_insn \"aarch64_<fmaxmin><mode>\"\n-  [(set (match_operand:VDQF 0 \"register_operand\" \"=w\")\n-        (unspec:VDQF [(match_operand:VDQF 1 \"register_operand\" \"w\")\n-\t\t      (match_operand:VDQF 2 \"register_operand\" \"w\")]\n-\t\t      FMAXMIN))]\n-  \"TARGET_SIMD\"\n-  \"<fmaxmin>\\t%0.<Vtype>, %1.<Vtype>, %2.<Vtype>\"\n-  [(set_attr \"simd_type\" \"simd_fminmax\")\n-   (set_attr \"simd_mode\" \"<MODE>\")]\n-)\n-\n ;; sqrt\n \n (define_insn \"sqrt<mode>2\""}, {"sha": "30a59a736319404e2ad70d4e9eba8a3f3beaf041", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/998eaf975b729d18892843568bffa4dae1d80938/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/998eaf975b729d18892843568bffa4dae1d80938/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=998eaf975b729d18892843568bffa4dae1d80938", "patch": "@@ -21544,7 +21544,7 @@ vld4q_f64 (const float64_t * __a)\n __extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n vmax_f32 (float32x2_t __a, float32x2_t __b)\n {\n-  return __builtin_aarch64_fmaxv2sf (__a, __b);\n+  return __builtin_aarch64_smax_nanv2sf (__a, __b);\n }\n \n __extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n@@ -21589,13 +21589,13 @@ vmax_u32 (uint32x2_t __a, uint32x2_t __b)\n __extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n vmaxq_f32 (float32x4_t __a, float32x4_t __b)\n {\n-  return __builtin_aarch64_fmaxv4sf (__a, __b);\n+  return __builtin_aarch64_smax_nanv4sf (__a, __b);\n }\n \n __extension__ static __inline float64x2_t __attribute__ ((__always_inline__))\n vmaxq_f64 (float64x2_t __a, float64x2_t __b)\n {\n-  return __builtin_aarch64_fmaxv2df (__a, __b);\n+  return __builtin_aarch64_smax_nanv2df (__a, __b);\n }\n \n __extension__ static __inline int8x16_t __attribute__ ((__always_inline__))\n@@ -21642,7 +21642,7 @@ vmaxq_u32 (uint32x4_t __a, uint32x4_t __b)\n __extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n vmin_f32 (float32x2_t __a, float32x2_t __b)\n {\n-  return __builtin_aarch64_fminv2sf (__a, __b);\n+  return __builtin_aarch64_smin_nanv2sf (__a, __b);\n }\n \n __extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n@@ -21687,13 +21687,13 @@ vmin_u32 (uint32x2_t __a, uint32x2_t __b)\n __extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n vminq_f32 (float32x4_t __a, float32x4_t __b)\n {\n-  return __builtin_aarch64_fminv4sf (__a, __b);\n+  return __builtin_aarch64_smin_nanv4sf (__a, __b);\n }\n \n __extension__ static __inline float64x2_t __attribute__ ((__always_inline__))\n vminq_f64 (float64x2_t __a, float64x2_t __b)\n {\n-  return __builtin_aarch64_fminv2df (__a, __b);\n+  return __builtin_aarch64_smin_nanv2df (__a, __b);\n }\n \n __extension__ static __inline int8x16_t __attribute__ ((__always_inline__))"}, {"sha": "3f9a58419b4bd67f45d1e0729f9aad464cd8374f", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 37, "deletions": 19, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/998eaf975b729d18892843568bffa4dae1d80938/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/998eaf975b729d18892843568bffa4dae1d80938/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=998eaf975b729d18892843568bffa4dae1d80938", "patch": "@@ -163,7 +163,11 @@\n  [\n     UNSPEC_ASHIFT_SIGNED\t; Used in aarch-simd.md.\n     UNSPEC_ASHIFT_UNSIGNED\t; Used in aarch64-simd.md.\n+    UNSPEC_FMAX\t\t; Used in aarch64-simd.md.\n+    UNSPEC_FMAXNMV\t; Used in aarch64-simd.md.\n     UNSPEC_FMAXV\t; Used in aarch64-simd.md.\n+    UNSPEC_FMIN\t\t; Used in aarch64-simd.md.\n+    UNSPEC_FMINNMV\t; Used in aarch64-simd.md.\n     UNSPEC_FMINV\t; Used in aarch64-simd.md.\n     UNSPEC_FADDV\t; Used in aarch64-simd.md.\n     UNSPEC_ADDV\t\t; Used in aarch64-simd.md.\n@@ -223,8 +227,6 @@\n     UNSPEC_SSHLL\t; Used in aarch64-simd.md.\n     UNSPEC_USHLL\t; Used in aarch64-simd.md.\n     UNSPEC_ADDP\t\t; Used in aarch64-simd.md.\n-    UNSPEC_FMAX\t\t; Used in aarch64-simd.md.\n-    UNSPEC_FMIN\t\t; Used in aarch64-simd.md.\n     UNSPEC_TBL\t\t; Used in vector permute patterns.\n     UNSPEC_CONCAT\t; Used in vector permute patterns.\n     UNSPEC_ZIP1\t\t; Used in vector permute patterns.\n@@ -535,6 +537,8 @@\n ;; Code iterator for variants of vector max and min.\n (define_code_iterator MAXMIN [smax smin umax umin])\n \n+(define_code_iterator FMAXMIN [smax smin])\n+\n ;; Code iterator for variants of vector max and min.\n (define_code_iterator ADDSUB [plus minus])\n \n@@ -643,7 +647,9 @@\n (define_code_attr su [(sign_extend \"s\") (zero_extend \"u\")\n \t\t      (sign_extract \"s\") (zero_extract \"u\")\n \t\t      (fix \"s\") (unsigned_fix \"u\")\n-\t\t      (div \"s\") (udiv \"u\")])\n+\t\t      (div \"s\") (udiv \"u\")\n+\t\t      (smax \"s\") (umax \"u\")\n+\t\t      (smin \"s\") (umin \"u\")])\n \n ;; Emit cbz/cbnz depending on comparison type.\n (define_code_attr cbz [(eq \"cbz\") (ne \"cbnz\") (lt \"cbnz\") (ge \"cbz\")])\n@@ -652,10 +658,10 @@\n (define_code_attr tbz [(eq \"tbz\") (ne \"tbnz\") (lt \"tbnz\") (ge \"tbz\")])\n \n ;; Max/min attributes.\n-(define_code_attr maxmin [(smax \"smax\")\n-\t\t\t  (smin \"smin\")\n-\t\t\t  (umax \"umax\")\n-\t\t\t  (umin \"umin\")])\n+(define_code_attr maxmin [(smax \"max\")\n+\t\t\t  (smin \"min\")\n+\t\t\t  (umax \"max\")\n+\t\t\t  (umin \"min\")])\n \n ;; MLA/MLS attributes.\n (define_code_attr as [(ss_plus \"a\") (ss_minus \"s\")])\n@@ -677,7 +683,8 @@\n (define_int_iterator MAXMINV [UNSPEC_UMAXV UNSPEC_UMINV\n \t\t\t      UNSPEC_SMAXV UNSPEC_SMINV])\n \n-(define_int_iterator FMAXMINV [UNSPEC_FMAXV UNSPEC_FMINV])\n+(define_int_iterator FMAXMINV [UNSPEC_FMAXV UNSPEC_FMINV\n+\t\t\t       UNSPEC_FMAXNMV UNSPEC_FMINNMV])\n \n (define_int_iterator HADDSUB [UNSPEC_SHADD UNSPEC_UHADD\n \t\t\t      UNSPEC_SRHADD UNSPEC_URHADD\n@@ -691,7 +698,7 @@\n (define_int_iterator ADDSUBHN2 [UNSPEC_ADDHN2 UNSPEC_RADDHN2\n \t\t\t        UNSPEC_SUBHN2 UNSPEC_RSUBHN2])\n \n-(define_int_iterator FMAXMIN [UNSPEC_FMAX UNSPEC_FMIN])\n+(define_int_iterator FMAXMIN_UNS [UNSPEC_FMAX UNSPEC_FMIN])\n \n (define_int_iterator VQDMULH [UNSPEC_SQDMULH UNSPEC_SQRDMULH])\n \n@@ -738,16 +745,27 @@\n ;; -------------------------------------------------------------------\n ;; Int Iterators Attributes.\n ;; -------------------------------------------------------------------\n-(define_int_attr  maxminv [(UNSPEC_UMAXV \"umax\")\n-\t\t\t   (UNSPEC_UMINV \"umin\")\n-\t\t\t   (UNSPEC_SMAXV \"smax\")\n-\t\t\t   (UNSPEC_SMINV \"smin\")])\n-\n-(define_int_attr  fmaxminv [(UNSPEC_FMAXV \"max\")\n-\t\t\t    (UNSPEC_FMINV \"min\")])\n-\n-(define_int_attr  fmaxmin [(UNSPEC_FMAX \"fmax\")\n-\t\t\t   (UNSPEC_FMIN \"fmin\")])\n+(define_int_attr  maxmin_uns [(UNSPEC_UMAXV \"umax\")\n+\t\t\t      (UNSPEC_UMINV \"umin\")\n+\t\t\t      (UNSPEC_SMAXV \"smax\")\n+\t\t\t      (UNSPEC_SMINV \"smin\")\n+\t\t\t      (UNSPEC_FMAX  \"smax_nan\")\n+\t\t\t      (UNSPEC_FMAXNMV \"smax\")\n+\t\t\t      (UNSPEC_FMAXV \"smax_nan\")\n+\t\t\t      (UNSPEC_FMIN \"smin_nan\")\n+\t\t\t      (UNSPEC_FMINNMV \"smin\")\n+\t\t\t      (UNSPEC_FMINV \"smin_nan\")])\n+\n+(define_int_attr  maxmin_uns_op [(UNSPEC_UMAXV \"umax\")\n+\t\t\t\t (UNSPEC_UMINV \"umin\")\n+\t\t\t\t (UNSPEC_SMAXV \"smax\")\n+\t\t\t\t (UNSPEC_SMINV \"smin\")\n+\t\t\t\t (UNSPEC_FMAX \"fmax\")\n+\t\t\t\t (UNSPEC_FMAXNMV \"fmaxnm\")\n+\t\t\t\t (UNSPEC_FMAXV \"fmax\")\n+\t\t\t\t (UNSPEC_FMIN \"fmin\")\n+\t\t\t\t (UNSPEC_FMINNMV \"fminnm\")\n+\t\t\t\t (UNSPEC_FMINV \"fmin\")])\n \n (define_int_attr sur [(UNSPEC_SHADD \"s\") (UNSPEC_UHADD \"u\")\n \t\t      (UNSPEC_SRHADD \"sr\") (UNSPEC_URHADD \"ur\")"}]}