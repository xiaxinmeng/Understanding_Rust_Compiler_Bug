{"sha": "1374a761eb55be67e49bb20ae051abb495b840a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTM3NGE3NjFlYjU1YmU2N2U0OWJiMjBhZTA1MWFiYjQ5NWI4NDBhMg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-02-08T22:07:54Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-02-08T22:07:54Z"}, "message": "re PR c++/69657 (abs() not inlined after including math.h)\n\n\tPR c++/69657\n\t* name-lookup.c (do_nonmember_using_decl): Leave anticipated\n\tbuilt-ins alone.\n\nFrom-SVN: r233229", "tree": {"sha": "55ed5f5dc37a358838fcf6fd9ebf04a1a1ef2539", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55ed5f5dc37a358838fcf6fd9ebf04a1a1ef2539"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1374a761eb55be67e49bb20ae051abb495b840a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1374a761eb55be67e49bb20ae051abb495b840a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1374a761eb55be67e49bb20ae051abb495b840a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1374a761eb55be67e49bb20ae051abb495b840a2/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a162f3af802f4f3dab5a53e6864600e6c38582d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a162f3af802f4f3dab5a53e6864600e6c38582d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a162f3af802f4f3dab5a53e6864600e6c38582d7"}], "stats": {"total": 58, "additions": 45, "deletions": 13}, "files": [{"sha": "563a1b37c8cca109067b8e917bfc8fe8d6345463", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1374a761eb55be67e49bb20ae051abb495b840a2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1374a761eb55be67e49bb20ae051abb495b840a2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1374a761eb55be67e49bb20ae051abb495b840a2", "patch": "@@ -1,3 +1,9 @@\n+2016-02-08  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/69657\n+\t* name-lookup.c (do_nonmember_using_decl): Leave anticipated\n+\tbuilt-ins alone.\n+\n 2016-02-08  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/59627"}, {"sha": "227d6f22f44f53a8f0a2e04ae86eed68ee69310f", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1374a761eb55be67e49bb20ae051abb495b840a2/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1374a761eb55be67e49bb20ae051abb495b840a2/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=1374a761eb55be67e49bb20ae051abb495b840a2", "patch": "@@ -2583,15 +2583,6 @@ do_nonmember_using_decl (tree scope, tree name, tree oldval, tree oldtype,\n       decls.value = NULL_TREE;\n     }\n \n-  /* It is impossible to overload a built-in function; any explicit\n-     declaration eliminates the built-in declaration.  So, if OLDVAL\n-     is a built-in, then we can just pretend it isn't there.  */\n-  if (oldval\n-      && TREE_CODE (oldval) == FUNCTION_DECL\n-      && DECL_ANTICIPATED (oldval)\n-      && !DECL_HIDDEN_FRIEND_P (oldval))\n-    oldval = NULL_TREE;\n-\n   if (decls.value)\n     {\n       /* Check for using functions.  */\n@@ -2610,6 +2601,10 @@ do_nonmember_using_decl (tree scope, tree name, tree oldval, tree oldtype,\n \t    {\n \t      tree new_fn = OVL_CURRENT (tmp);\n \n+\t      /* Don't import functions that haven't been declared.  */\n+\t      if (DECL_ANTICIPATED (new_fn))\n+\t\tcontinue;\n+\n \t      /* [namespace.udecl]\n \n \t\t If a function declaration in namespace scope or block\n@@ -2627,13 +2622,13 @@ do_nonmember_using_decl (tree scope, tree name, tree oldval, tree oldtype,\n \t\t    continue; /* this is a using decl */\n \t\t  else if (compparms_for_decl_and_using_decl (new_fn, old_fn))\n \t\t    {\n-\t\t      gcc_assert (!DECL_ANTICIPATED (old_fn)\n-\t\t\t\t  || DECL_HIDDEN_FRIEND_P (old_fn));\n-\n \t\t      /* There was already a non-using declaration in\n \t\t\t this scope with the same parameter types. If both\n \t\t\t are the same extern \"C\" functions, that's ok.  */\n-\t\t      if (decls_match (new_fn, old_fn))\n+\t\t      if (DECL_ANTICIPATED (old_fn)\n+\t\t\t  && !DECL_HIDDEN_FRIEND_P (old_fn))\n+\t\t\t/* Ignore anticipated built-ins.  */;\n+\t\t      else if (decls_match (new_fn, old_fn))\n \t\t\tbreak;\n \t\t      else\n \t\t\t{\n@@ -2669,6 +2664,14 @@ do_nonmember_using_decl (tree scope, tree name, tree oldval, tree oldtype,\n \t}\n       else\n \t{\n+\t  /* If we're declaring a non-function and OLDVAL is an anticipated\n+\t     built-in, just pretend it isn't there.  */\n+\t  if (oldval\n+\t      && TREE_CODE (oldval) == FUNCTION_DECL\n+\t      && DECL_ANTICIPATED (oldval)\n+\t      && !DECL_HIDDEN_FRIEND_P (oldval))\n+\t    oldval = NULL_TREE;\n+\n \t  *newval = decls.value;\n \t  if (oldval && !decls_match (*newval, oldval))\n \t    error (\"%qD is already declared in this scope\", name);"}, {"sha": "456ade7da1f087ec2eba3ab073800bdb51455f33", "filename": "gcc/testsuite/g++.dg/lookup/builtin6.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1374a761eb55be67e49bb20ae051abb495b840a2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fbuiltin6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1374a761eb55be67e49bb20ae051abb495b840a2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fbuiltin6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fbuiltin6.C?ref=1374a761eb55be67e49bb20ae051abb495b840a2", "patch": "@@ -0,0 +1,23 @@\n+// PR c++/69657\n+// { dg-options -fdump-tree-gimple }\n+// { dg-final { scan-tree-dump \"ABS_EXPR\" \"gimple\" } }\n+\n+namespace foo\n+{\n+  inline double\n+  abs(double x)\n+  { return __builtin_fabs(x); }\n+}\n+using foo::abs;\n+\n+extern \"C\" int abs(int);\n+\n+namespace bar {\n+  using ::abs;\n+}\n+\n+int\n+wrapper (int x)\n+{\n+  return bar::abs (x) + bar::abs(x);\n+}"}]}