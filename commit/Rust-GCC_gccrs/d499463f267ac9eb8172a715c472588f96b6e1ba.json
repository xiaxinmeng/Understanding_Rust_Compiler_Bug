{"sha": "d499463f267ac9eb8172a715c472588f96b6e1ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQ5OTQ2M2YyNjdhYzllYjgxNzJhNzE1YzQ3MjU4OGY5NmI2ZTFiYQ==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "1998-05-27T02:52:25Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "1998-05-27T02:52:25Z"}, "message": "arm.c (arm_gen_constant): Rework to eliminate uninitialized variable warnings.\n\n* arm.c (arm_gen_constant): Rework to eliminate uninitialized variable\nwarnings.  Don't generate scratch registers if only counting insns.\n(find_barrier): Eliminate unused variable SRC.\n\nFrom-SVN: r20087", "tree": {"sha": "a734ddbcd32a51fb1db6000dc3252c91238b70d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a734ddbcd32a51fb1db6000dc3252c91238b70d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d499463f267ac9eb8172a715c472588f96b6e1ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d499463f267ac9eb8172a715c472588f96b6e1ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d499463f267ac9eb8172a715c472588f96b6e1ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d499463f267ac9eb8172a715c472588f96b6e1ba/comments", "author": null, "committer": null, "parents": [{"sha": "01fc71f4b18d06997660cfafc4848da892b76c20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01fc71f4b18d06997660cfafc4848da892b76c20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01fc71f4b18d06997660cfafc4848da892b76c20"}], "stats": {"total": 113, "additions": 62, "deletions": 51}, "files": [{"sha": "14f39f17bbf8c0a130f455e9e38eb965b842ff95", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d499463f267ac9eb8172a715c472588f96b6e1ba/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d499463f267ac9eb8172a715c472588f96b6e1ba/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d499463f267ac9eb8172a715c472588f96b6e1ba", "patch": "@@ -1,3 +1,10 @@\n+Wed May 27 02:48:31 1998  Richard Earnshaw (rearnsha@arm.com)\n+\n+\t* arm.c (arm_gen_constant): Rework to eliminate uninitialized\n+\tvariable warnings.  Don't generate scratch registers if only\n+\tcounting insns.\n+\t(find_barrier): Eliminate unused variable SRC.\n+\n 1998-05-27  Manfred Hollstein  <manfred@s-direktnet.de>\n \n \t* toplev.h (rtx_def): Provide global declaration to avoid"}, {"sha": "fb5349c7b9206db339c580513f9e157f2b79f9bf", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 55, "deletions": 51, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d499463f267ac9eb8172a715c472588f96b6e1ba/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d499463f267ac9eb8172a715c472588f96b6e1ba/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=d499463f267ac9eb8172a715c472588f96b6e1ba", "patch": "@@ -536,7 +536,6 @@ arm_gen_constant (code, mode, val, target, source, subtargets, generate)\n   int clear_zero_bit_copies = 0;\n   int set_zero_bit_copies = 0;\n   int insns = 0;\n-  rtx new_src;\n   unsigned HOST_WIDE_INT temp1, temp2;\n   unsigned HOST_WIDE_INT remainder = val & 0xffffffff;\n \n@@ -700,7 +699,7 @@ arm_gen_constant (code, mode, val, target, source, subtargets, generate)\n \t    {\n \t      if (generate)\n \t\t{\n-\t\t  new_src = subtargets ? gen_reg_rtx (mode) : target;\n+\t\t  rtx new_src = subtargets ? gen_reg_rtx (mode) : target;\n \t\t  emit_insn (gen_rtx (SET, VOIDmode, new_src, \n \t\t\t\t      GEN_INT (temp1)));\n \t\t  emit_insn (gen_ashrsi3 (target, new_src, \n@@ -715,7 +714,7 @@ arm_gen_constant (code, mode, val, target, source, subtargets, generate)\n \t    {\n \t      if (generate)\n \t\t{\n-\t\t  new_src = subtargets ? gen_reg_rtx (mode) : target;\n+\t\t  rtx new_src = subtargets ? gen_reg_rtx (mode) : target;\n \t\t  emit_insn (gen_rtx (SET, VOIDmode, new_src,\n \t\t\t\t      GEN_INT (temp1)));\n \t\t  emit_insn (gen_ashrsi3 (target, new_src, \n@@ -741,10 +740,10 @@ arm_gen_constant (code, mode, val, target, source, subtargets, generate)\n \t      if ((((temp2 | (temp2 << i)) & 0xffffffff) == remainder)\n \t\t  && ! const_ok_for_arm (temp2))\n \t\t{\n-\t\t  insns = arm_gen_constant (code, mode, temp2,\n-\t\t\t\t\t    new_src = (subtargets\n-\t\t\t\t\t\t       ? gen_reg_rtx (mode)\n-\t\t\t\t\t\t       : target),\n+\t\t  rtx new_src = (subtargets\n+\t\t\t\t ? (generate ? gen_reg_rtx (mode) : NULL_RTX)\n+\t\t\t\t : target);\n+\t\t  insns = arm_gen_constant (code, mode, temp2, new_src,\n \t\t\t\t\t    source, subtargets, generate);\n \t\t  source = new_src;\n \t\t  if (generate)\n@@ -763,10 +762,10 @@ arm_gen_constant (code, mode, val, target, source, subtargets, generate)\n \t      if (((temp1 | (temp1 >> i)) == remainder)\n \t\t  && ! const_ok_for_arm (temp1))\n \t\t{\n-\t\t  insns = arm_gen_constant (code, mode, temp1,\n-\t\t\t\t\t    new_src = (subtargets\n-\t\t\t\t\t\t       ? gen_reg_rtx (mode)\n-\t\t\t\t\t\t       : target),\n+\t\t  rtx new_src = (subtargets\n+\t\t\t\t ? (generate ? gen_reg_rtx (mode) : NULL_RTX)\n+\t\t\t\t : target);\n+\t\t  insns = arm_gen_constant (code, mode, temp1, new_src,\n \t\t\t\t\t    source, subtargets, generate);\n \t\t  source = new_src;\n \t\t  if (generate)\n@@ -787,6 +786,7 @@ arm_gen_constant (code, mode, val, target, source, subtargets, generate)\n \t single instruction, and we can find a temporary to put it in,\n \t then this can be done in two instructions instead of 3-4.  */\n       if (subtargets\n+\t  /* TARGET can't be NULL if SUBTARGETS is 0 */\n \t  || (reload_completed && ! reg_mentioned_p (target, source)))\n \t{\n \t  if (const_ok_for_arm (ARM_SIGN_EXTEND (~ val)))\n@@ -873,29 +873,31 @@ arm_gen_constant (code, mode, val, target, source, subtargets, generate)\n \t  HOST_WIDE_INT shift_mask = ((0xffffffff \n \t\t\t\t       << (32 - clear_sign_bit_copies))\n \t\t\t\t      & 0xffffffff);\n-\t  rtx new_source;\n-\t  rtx shift;\n \n \t  if ((remainder | shift_mask) != 0xffffffff)\n \t    {\n \t      if (generate)\n \t\t{\n-\t\t  new_source = subtargets ? gen_reg_rtx (mode) : target;\n+\t\t  rtx new_src = subtargets ? gen_reg_rtx (mode) : target;\n \t\t  insns = arm_gen_constant (AND, mode, remainder | shift_mask,\n-\t\t\t\t\t    new_source, source, subtargets, 1);\n-\t\t  source = new_source;\n+\t\t\t\t\t    new_src, source, subtargets, 1);\n+\t\t  source = new_src;\n \t\t}\n \t      else\n-\t\tinsns = arm_gen_constant (AND, mode, remainder | shift_mask,\n-\t\t\t\t\t  new_source, source, subtargets, 0);\n+\t\t{\n+\t\t  rtx targ = subtargets ? NULL_RTX : target;\n+\t\t  insns = arm_gen_constant (AND, mode, remainder | shift_mask,\n+\t\t\t\t\t    targ, source, subtargets, 0);\n+\t\t}\n \t    }\n \n \t  if (generate)\n \t    {\n-\t      shift = GEN_INT (clear_sign_bit_copies);\n-\t      new_source = subtargets ? gen_reg_rtx (mode) : target;\n-\t      emit_insn (gen_ashlsi3 (new_source, source, shift));\n-\t      emit_insn (gen_lshrsi3 (target, new_source, shift));\n+\t      rtx new_src = subtargets ? gen_reg_rtx (mode) : target;\n+\t      rtx shift = GEN_INT (clear_sign_bit_copies);\n+\n+\t      emit_insn (gen_ashlsi3 (new_src, source, shift));\n+\t      emit_insn (gen_lshrsi3 (target, new_src, shift));\n \t    }\n \n \t  return insns + 2;\n@@ -904,29 +906,33 @@ arm_gen_constant (code, mode, val, target, source, subtargets, generate)\n       if (clear_zero_bit_copies >= 16 && clear_zero_bit_copies < 24)\n \t{\n \t  HOST_WIDE_INT shift_mask = (1 << clear_zero_bit_copies) - 1;\n-\t  rtx new_source;\n-\t  rtx shift;\n \t  \n \t  if ((remainder | shift_mask) != 0xffffffff)\n \t    {\n \t      if (generate)\n \t\t{\n-\t\t  new_source = subtargets ? gen_reg_rtx (mode) : target;\n+\t\t  rtx new_src = subtargets ? gen_reg_rtx (mode) : target;\n+\n \t\t  insns = arm_gen_constant (AND, mode, remainder | shift_mask,\n-\t\t\t\t\t    new_source, source, subtargets, 1);\n-\t\t  source = new_source;\n+\t\t\t\t\t    new_src, source, subtargets, 1);\n+\t\t  source = new_src;\n \t\t}\n \t      else\n-\t\tinsns = arm_gen_constant (AND, mode, remainder | shift_mask,\n-\t\t\t\t\t  new_source, source, subtargets, 0);\n+\t\t{\n+\t\t  rtx targ = subtargets ? NULL_RTX : target;\n+\n+\t\t  insns = arm_gen_constant (AND, mode, remainder | shift_mask,\n+\t\t\t\t\t    targ, source, subtargets, 0);\n+\t\t}\n \t    }\n \n \t  if (generate)\n \t    {\n-\t      shift = GEN_INT (clear_zero_bit_copies);\n-\t      new_source = subtargets ? gen_reg_rtx (mode) : target;\n-\t      emit_insn (gen_lshrsi3 (new_source, source, shift));\n-\t      emit_insn (gen_ashlsi3 (target, new_source, shift));\n+\t      rtx new_src = subtargets ? gen_reg_rtx (mode) : target;\n+\t      rtx shift = GEN_INT (clear_zero_bit_copies);\n+\n+\t      emit_insn (gen_lshrsi3 (new_src, source, shift));\n+\t      emit_insn (gen_ashlsi3 (target, new_src, shift));\n \t    }\n \n \t  return insns + 2;\n@@ -1001,31 +1007,24 @@ arm_gen_constant (code, mode, val, target, source, subtargets, generate)\n \t\t\t\t | ((i < end) ? (0xff >> (32 - end)) : 0));\n \t    remainder &= ~temp1;\n \n-\t    if (code == SET)\n+\t    if (generate)\n \t      {\n-\t\tif (generate)\n+\t\trtx new_src;\n+\n+\t\tif (code == SET)\n \t\t  emit_insn (gen_rtx (SET, VOIDmode,\n \t\t\t\t      new_src = (subtargets\n \t\t\t\t\t\t ? gen_reg_rtx (mode)\n \t\t\t\t\t\t : target),\n \t\t\t\t      GEN_INT (can_invert ? ~temp1 : temp1)));\n-\t\tcan_invert = 0;\n-\t\tcode = PLUS;\n-\t      }\n-\t    else if (code == MINUS)\n-\t      {\n-\t\tif (generate)\n+\t\telse if (code == MINUS)\n \t\t  emit_insn (gen_rtx (SET, VOIDmode,\n \t\t\t\t      new_src = (subtargets\n \t\t\t\t\t\t ? gen_reg_rtx (mode)\n \t\t\t\t\t\t : target),\n \t\t\t\t      gen_rtx (code, mode, GEN_INT (temp1),\n \t\t\t\t\t       source)));\n-\t\tcode = PLUS;\n-\t      }\n-\t    else\n-\t      {\n-\t\tif (generate)\n+\t\telse\n \t\t  emit_insn (gen_rtx (SET, VOIDmode,\n \t\t\t\t      new_src = (remainder\n \t\t\t\t\t\t ? (subtargets\n@@ -1037,10 +1036,18 @@ arm_gen_constant (code, mode, val, target, source, subtargets, generate)\n \t\t\t\t\t\t\t: (can_negate\n \t\t\t\t\t\t\t   ? -temp1\n \t\t\t\t\t\t\t   : temp1)))));\n+\t\tsource = new_src;\n+\t      }\n+\n+\t    if (code == SET)\n+\t      {\n+\t\tcan_invert = 0;\n+\t\tcode = PLUS;\n \t      }\n+\t    else if (code == MINUS)\n+\t      code = PLUS;\n \n \t    insns++;\n-\t    source = new_src;\n \t    i -= 6;\n \t  }\n \ti -= 2;\n@@ -3578,10 +3585,7 @@ find_barrier (from, max_count)\n \t  && GET_CODE (PATTERN (from)) == SET\n \t  && CONSTANT_P (SET_SRC (PATTERN (from)))\n \t  && CONSTANT_POOL_ADDRESS_P (SET_SRC (PATTERN (from))))\n-\t{\n-\t  rtx src = SET_SRC (PATTERN (from));\n-\t  count += 8;\n-\t}\n+\tcount += 8;\n       else\n \tcount += get_attr_length (from);\n "}]}