{"sha": "86089be5e1d4ac721b0b161877368eaca237b96f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODYwODliZTVlMWQ0YWM3MjFiMGIxNjE4NzczNjhlYWNhMjM3Yjk2Zg==", "commit": {"author": {"name": "Douglas Gregor", "email": "doug.gregor@gmail.com", "date": "2007-11-05T18:42:22Z"}, "committer": {"name": "Doug Gregor", "email": "dgregor@gcc.gnu.org", "date": "2007-11-05T18:42:22Z"}, "message": "Index...\n\nIndex: testsuite/g++.dg/cpp0x/pr33996.C\n===================================================================\n--- testsuite/g++.dg/cpp0x/pr33996.C\t(revision 0)\n+++ testsuite/g++.dg/cpp0x/pr33996.C\t(revision 0)\n@@ -0,0 +1,52 @@\n+// { dg-options \"-std=c++0x\" }\n+\n+#define BUG\n+struct type\n+{\n+  type() { }\n+  type(const type&) { }\n+\n+private:\n+  type(type&&);\n+};\n+\n+template<typename _Tp>\n+  struct identity\n+  {\n+    typedef _Tp type;\n+  };\n+\n+template<typename _Tp>\n+  inline _Tp&&\n+  forward(typename identity<_Tp>::type&& __t)\n+  { return __t; }\n+\n+struct vec\n+{\n+  template<typename _Args>\n+    void\n+    bar(_Args&& __args)\n+#ifdef BUG\n+    ;\n+#else\n+    {\n+      type(forward<_Args>(__args));\n+    }\n+#endif\n+};\n+\n+#ifdef BUG\n+template<typename _Args>\n+  void\n+  vec::bar(_Args&& __args)\n+  {\n+    type(forward<_Args>(__args));\n+  }\n+#endif\n+\n+int main()\n+{\n+  vec v;\n+  type c;\n+  v.bar(c);\n+}\nIndex: testsuite/g++.dg/cpp0x/rv-trivial-bug.C\n===================================================================\n--- testsuite/g++.dg/cpp0x/rv-trivial-bug.C\t(revision 0)\n+++ testsuite/g++.dg/cpp0x/rv-trivial-bug.C\t(revision 0)\n@@ -0,0 +1,33 @@\n+// { dg-do \"run\" }\n+// { dg-options \"-std=c++0x\" }\n+// PR c++/33235\n+#include <cassert>\n+\n+int move_construct = 0;\n+int move_assign = 0;\n+\n+struct base2\n+{\n+    base2() {}\n+    base2(base2&&) {++move_construct;}\n+    base2& operator=(base2&&) {++move_assign; return *this;}\n+};\n+\n+int test2()\n+{\n+    base2 b;\n+    base2 b2(b);\n+    assert(move_construct == 0);\n+    base2 b3(static_cast<base2&&>(b));\n+    assert(move_construct == 1);\n+    b = b2;\n+    assert(move_assign == 0);\n+    b = static_cast<base2&&>(b2);\n+    assert(move_assign == 1);\n+}\n+\n+int main()\n+{\n+    test2();\n+    return 0;\n+}\nIndex: testsuite/g++.dg/cpp0x/pr33930.C\n===================================================================\n--- testsuite/g++.dg/cpp0x/pr33930.C\t(revision 0)\n+++ testsuite/g++.dg/cpp0x/pr33930.C\t(revision 0)\n@@ -0,0 +1,10 @@\n+// { dg-options \"-std=c++0x\" }\n+typedef const int* type;\n+\n+float& foo( const type& ggg );\n+int& foo( type&& ggg );\n+\n+void bar( int* someptr )\n+{\n+  int& x = foo( someptr );\n+}\nIndex: cp/typeck.c\n===================================================================\n--- cp/typeck.c\t(revision 129899)\n+++ cp/typeck.c\t(working copy)\n@@ -620,7 +620,7 @@ merge_types (tree t1, tree t2)\n \tif (code1 == POINTER_TYPE)\n \t  t1 = build_pointer_type (target);\n \telse\n-\t  t1 = build_reference_type (target);\n+\t  t1 = cp_build_reference_type (target, TYPE_REF_IS_RVALUE (t1));\n \tt1 = build_type_attribute_variant (t1, attributes);\n \tt1 = cp_build_qualified_type (t1, quals);\n \nIndex: cp/call.c\n===================================================================\n--- cp/call.c\t(revision 129899)\n+++ cp/call.c\t(working copy)\n@@ -5076,7 +5076,8 @@ build_over_call (struct z_candidate *can\n \t    return build_target_expr_with_type (arg, DECL_CONTEXT (fn));\n \t}\n       else if (TREE_CODE (arg) == TARGET_EXPR\n-\t       || TYPE_HAS_TRIVIAL_INIT_REF (DECL_CONTEXT (fn)))\n+\t       || (TYPE_HAS_TRIVIAL_INIT_REF (DECL_CONTEXT (fn))\n+\t\t   && !move_fn_p (fn)))\n \t{\n \t  tree to = stabilize_reference\n \t    (build_indirect_ref (TREE_VALUE (args), 0));\n@@ -6118,7 +6119,11 @@ compare_ics (conversion *ics1, conversio\n   if (ics1->kind == ck_qual\n       && ics2->kind == ck_qual\n       && same_type_p (from_type1, from_type2))\n-    return comp_cv_qual_signature (to_type1, to_type2);\n+    {\n+      int result = comp_cv_qual_signature (to_type1, to_type2);\n+      if (result != 0)\n+\treturn result;\n+    }\n \n   /* [over.ics.rank]\n\nFrom-SVN: r129905", "tree": {"sha": "d266089ef3a507f43a2e2e358d92625d31f6081e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d266089ef3a507f43a2e2e358d92625d31f6081e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/86089be5e1d4ac721b0b161877368eaca237b96f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86089be5e1d4ac721b0b161877368eaca237b96f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86089be5e1d4ac721b0b161877368eaca237b96f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86089be5e1d4ac721b0b161877368eaca237b96f/comments", "author": {"login": "DougGregor", "id": 989428, "node_id": "MDQ6VXNlcjk4OTQyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/989428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DougGregor", "html_url": "https://github.com/DougGregor", "followers_url": "https://api.github.com/users/DougGregor/followers", "following_url": "https://api.github.com/users/DougGregor/following{/other_user}", "gists_url": "https://api.github.com/users/DougGregor/gists{/gist_id}", "starred_url": "https://api.github.com/users/DougGregor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DougGregor/subscriptions", "organizations_url": "https://api.github.com/users/DougGregor/orgs", "repos_url": "https://api.github.com/users/DougGregor/repos", "events_url": "https://api.github.com/users/DougGregor/events{/privacy}", "received_events_url": "https://api.github.com/users/DougGregor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b76c3c4beeae8e72d009d9a37d655f79cd580804", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b76c3c4beeae8e72d009d9a37d655f79cd580804", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b76c3c4beeae8e72d009d9a37d655f79cd580804"}], "stats": {"total": 127, "additions": 124, "deletions": 3}, "files": [{"sha": "36b7726ee5b5c796f37c0bc2c0389181cf70b70f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86089be5e1d4ac721b0b161877368eaca237b96f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86089be5e1d4ac721b0b161877368eaca237b96f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=86089be5e1d4ac721b0b161877368eaca237b96f", "patch": "@@ -1,3 +1,15 @@\n+2007-11-05  Douglas Gregor  <doug.gregor@gmail.com>\n+\n+\tPR c++/33996\n+\tPR c++/33235\n+\tPR c++/33930\n+\t* typeck.c (merge_types): Don't lose rvalue references when\n+\tmerging types.\n+\t* call.c (build_over_call): Don't elide move constructors just\n+\tbecause the copy constructor is trivial (!).\n+\t(compare_ics): If comparing cv-qualifiers fails, we can still order\n+\tbased on binding lvalues vs. rvalues.\n+\n 2007-11-05  Douglas Gregor  <doug.gregor@gmail.com>\n \n \tPR c++/33939"}, {"sha": "e9d3a94aa4199e9adaf3ad1ea9ff536e8f177701", "filename": "gcc/cp/call.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86089be5e1d4ac721b0b161877368eaca237b96f/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86089be5e1d4ac721b0b161877368eaca237b96f/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=86089be5e1d4ac721b0b161877368eaca237b96f", "patch": "@@ -5076,7 +5076,8 @@ build_over_call (struct z_candidate *cand, int flags)\n \t    return build_target_expr_with_type (arg, DECL_CONTEXT (fn));\n \t}\n       else if (TREE_CODE (arg) == TARGET_EXPR\n-\t       || TYPE_HAS_TRIVIAL_INIT_REF (DECL_CONTEXT (fn)))\n+\t       || (TYPE_HAS_TRIVIAL_INIT_REF (DECL_CONTEXT (fn))\n+\t\t   && !move_fn_p (fn)))\n \t{\n \t  tree to = stabilize_reference\n \t    (build_indirect_ref (TREE_VALUE (args), 0));\n@@ -6118,7 +6119,11 @@ compare_ics (conversion *ics1, conversion *ics2)\n   if (ics1->kind == ck_qual\n       && ics2->kind == ck_qual\n       && same_type_p (from_type1, from_type2))\n-    return comp_cv_qual_signature (to_type1, to_type2);\n+    {\n+      int result = comp_cv_qual_signature (to_type1, to_type2);\n+      if (result != 0)\n+\treturn result;\n+    }\n \n   /* [over.ics.rank]\n "}, {"sha": "862787a10c88327f7479f1831430f1e64e2bc2e0", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86089be5e1d4ac721b0b161877368eaca237b96f/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86089be5e1d4ac721b0b161877368eaca237b96f/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=86089be5e1d4ac721b0b161877368eaca237b96f", "patch": "@@ -620,7 +620,7 @@ merge_types (tree t1, tree t2)\n \tif (code1 == POINTER_TYPE)\n \t  t1 = build_pointer_type (target);\n \telse\n-\t  t1 = build_reference_type (target);\n+\t  t1 = cp_build_reference_type (target, TYPE_REF_IS_RVALUE (t1));\n \tt1 = build_type_attribute_variant (t1, attributes);\n \tt1 = cp_build_qualified_type (t1, quals);\n "}, {"sha": "6f7718aaac927a27d365726b7f03976f01163ee4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86089be5e1d4ac721b0b161877368eaca237b96f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86089be5e1d4ac721b0b161877368eaca237b96f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=86089be5e1d4ac721b0b161877368eaca237b96f", "patch": "@@ -1,3 +1,12 @@\n+2007-11-05  Douglas Gregor  <doug.gregor@gmail.com>\n+\n+\tPR c++/33996\n+\tPR c++/33235\n+\tPR c++/33930\n+\t* g++.dg/cpp0x/pr33996.C: New\n+\t* g++.dg/cpp0x/rv-trivial-bug.C: New\n+\t* g++.dg/cpp0x/pr33930.C: New\n+\n 2007-11-05  Nick Clifton  <nickc@redhat.com>\n \t    Sebastian Pop  <sebastian.pop@amd.com>\n "}, {"sha": "d1e6fa56b1dfae45c9bdb863c483c2f83f481782", "filename": "gcc/testsuite/g++.dg/cpp0x/pr33930.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86089be5e1d4ac721b0b161877368eaca237b96f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr33930.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86089be5e1d4ac721b0b161877368eaca237b96f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr33930.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr33930.C?ref=86089be5e1d4ac721b0b161877368eaca237b96f", "patch": "@@ -0,0 +1,10 @@\n+// { dg-options \"-std=c++0x\" }\n+typedef const int* type;\n+\n+float& foo( const type& ggg );\n+int& foo( type&& ggg );\n+\n+void bar( int* someptr )\n+{\n+  int& x = foo( someptr );\n+}"}, {"sha": "07590f06f9552b3ec4d54e86ba84327b4e7683b2", "filename": "gcc/testsuite/g++.dg/cpp0x/pr33996.C", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86089be5e1d4ac721b0b161877368eaca237b96f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr33996.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86089be5e1d4ac721b0b161877368eaca237b96f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr33996.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr33996.C?ref=86089be5e1d4ac721b0b161877368eaca237b96f", "patch": "@@ -0,0 +1,52 @@\n+// { dg-options \"-std=c++0x\" }\n+\n+#define BUG\n+struct type\n+{\n+  type() { }\n+  type(const type&) { }\n+\n+private:\n+  type(type&&);\n+};\n+\n+template<typename _Tp>\n+  struct identity\n+  {\n+    typedef _Tp type;\n+  };\n+\n+template<typename _Tp>\n+  inline _Tp&&\n+  forward(typename identity<_Tp>::type&& __t)\n+  { return __t; }\n+\n+struct vec\n+{\n+  template<typename _Args>\n+    void\n+    bar(_Args&& __args)\n+#ifdef BUG\n+    ;\n+#else\n+    {\n+      type(forward<_Args>(__args));\n+    }\n+#endif\n+};\n+\n+#ifdef BUG\n+template<typename _Args>\n+  void\n+  vec::bar(_Args&& __args)\n+  {\n+    type(forward<_Args>(__args));\n+  }\n+#endif\n+\n+int main()\n+{\n+  vec v;\n+  type c;\n+  v.bar(c);\n+}"}, {"sha": "de52d0f48f64169cdc5066982548f3302d692bd1", "filename": "gcc/testsuite/g++.dg/cpp0x/rv-trivial-bug.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86089be5e1d4ac721b0b161877368eaca237b96f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv-trivial-bug.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86089be5e1d4ac721b0b161877368eaca237b96f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv-trivial-bug.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv-trivial-bug.C?ref=86089be5e1d4ac721b0b161877368eaca237b96f", "patch": "@@ -0,0 +1,33 @@\n+// { dg-do \"run\" }\n+// { dg-options \"-std=c++0x\" }\n+// PR c++/33235\n+#include <cassert>\n+\n+int move_construct = 0;\n+int move_assign = 0;\n+\n+struct base2\n+{\n+    base2() {}\n+    base2(base2&&) {++move_construct;}\n+    base2& operator=(base2&&) {++move_assign; return *this;}\n+};\n+\n+int test2()\n+{\n+    base2 b;\n+    base2 b2(b);\n+    assert(move_construct == 0);\n+    base2 b3(static_cast<base2&&>(b));\n+    assert(move_construct == 1);\n+    b = b2;\n+    assert(move_assign == 0);\n+    b = static_cast<base2&&>(b2);\n+    assert(move_assign == 1);\n+}\n+\n+int main()\n+{\n+    test2();\n+    return 0;\n+}"}]}