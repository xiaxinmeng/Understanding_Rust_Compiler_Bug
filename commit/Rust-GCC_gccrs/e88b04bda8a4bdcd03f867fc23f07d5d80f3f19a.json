{"sha": "e88b04bda8a4bdcd03f867fc23f07d5d80f3f19a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTg4YjA0YmRhOGE0YmRjZDAzZjg2N2ZjMjNmMDdkNWQ4MGYzZjE5YQ==", "commit": {"author": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2020-10-10T15:22:01Z"}, "committer": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2020-10-10T21:34:24Z"}, "message": "[nvptx] Replace dots in function names\n\nWhen function splitting clones a function sinf in the host compiler, the clone\nis callled sinf.part.0.  However, ptx does not allows dots in identifiers, so\nwe run into:\n...\nptxas test.o, line 23; fatal   : Parsing error near '.part': syntax error\nptxas fatal   : Ptx assembly aborted due to errors\nnvptx-as: ptxas returned 255 exit status\n...\n\nRename such functions by replacing the dots with dollar signs.\n\nTested check-gcc on nvptx.\n\nTested libgomp on x86_64-linux with nvptx accelerator.\n\ngcc/ChangeLog:\n\n2020-10-10  Tom de Vries  <tdevries@suse.de>\n\n\tPR target/97318\n\t* config/nvptx/nvptx.c (nvptx_replace_dot): New function.\n\t(write_fn_proto, write_fn_proto_from_insn, nvptx_output_call_insn):\n\tUse nvptx_replace_dot.", "tree": {"sha": "4f4004e02b3ca3f64916c70efeed9cdb80a72936", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f4004e02b3ca3f64916c70efeed9cdb80a72936"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e88b04bda8a4bdcd03f867fc23f07d5d80f3f19a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e88b04bda8a4bdcd03f867fc23f07d5d80f3f19a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e88b04bda8a4bdcd03f867fc23f07d5d80f3f19a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e88b04bda8a4bdcd03f867fc23f07d5d80f3f19a/comments", "author": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db52bcfe4a0ef1bae9ed52b4e51af085f71c984d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db52bcfe4a0ef1bae9ed52b4e51af085f71c984d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db52bcfe4a0ef1bae9ed52b4e51af085f71c984d"}], "stats": {"total": 57, "additions": 54, "deletions": 3}, "files": [{"sha": "17349475fff05b319f418e5b25e6ec75df09df26", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 54, "deletions": 3, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e88b04bda8a4bdcd03f867fc23f07d5d80f3f19a/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e88b04bda8a4bdcd03f867fc23f07d5d80f3f19a/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=e88b04bda8a4bdcd03f867fc23f07d5d80f3f19a", "patch": "@@ -368,6 +368,22 @@ nvptx_name_replacement (const char *name)\n   return name;\n }\n \n+/* Return NULL if NAME contains no dot.  Otherwise return a copy of NAME\n+   with the dots replaced with dollar signs.  */\n+\n+static char *\n+nvptx_replace_dot (const char *name)\n+{\n+  if (strchr (name, '.') == NULL)\n+    return NULL;\n+\n+  char *p = xstrdup (name);\n+  for (size_t i = 0; i < strlen (p); ++i)\n+    if (p[i] == '.')\n+      p[i] = '$';\n+  return p;\n+}\n+\n /* If MODE should be treated as two registers of an inner mode, return\n    that inner mode.  Otherwise return VOIDmode.  */\n \n@@ -926,7 +942,16 @@ static void\n write_fn_proto (std::stringstream &s, bool is_defn,\n \t\tconst char *name, const_tree decl)\n {\n-  name = nvptx_name_replacement (name);\n+  const char *replacement = nvptx_name_replacement (name);\n+  char *replaced_dots = NULL;\n+  if (replacement != name)\n+    name = replacement;\n+  else\n+    {\n+      replaced_dots = nvptx_replace_dot (name);\n+      if (replaced_dots)\n+\tname = replaced_dots;\n+    }\n   if (name[0] == '*')\n     name++;\n \n@@ -935,6 +960,9 @@ write_fn_proto (std::stringstream &s, bool is_defn,\n     write_fn_proto_1 (s, false, name, decl);\n \n   write_fn_proto_1 (s, is_defn, name, decl);\n+\n+  if (replaced_dots)\n+    XDELETE (replaced_dots);\n }\n \n /* Construct a function declaration from a call insn.  This can be\n@@ -946,14 +974,24 @@ static void\n write_fn_proto_from_insn (std::stringstream &s, const char *name,\n \t\t\t  rtx result, rtx pat)\n {\n+  char *replaced_dots = NULL;\n+\n   if (!name)\n     {\n       s << \"\\t.callprototype \";\n       name = \"_\";\n     }\n   else\n     {\n-      name = nvptx_name_replacement (name);\n+      const char *replacement = nvptx_name_replacement (name);\n+      if (replacement != name)\n+\tname = replacement;\n+      else\n+\t{\n+\t  replaced_dots = nvptx_replace_dot (name);\n+\t  if (replaced_dots)\n+\t    name = replaced_dots;\n+\t}\n       write_fn_marker (s, false, true, name);\n       s << \"\\t.extern .func \";\n     }\n@@ -962,6 +1000,8 @@ write_fn_proto_from_insn (std::stringstream &s, const char *name,\n     write_return_mode (s, true, GET_MODE (result));\n \n   s << name;\n+  if (replaced_dots)\n+    XDELETE (replaced_dots);\n \n   int arg_end = XVECLEN (pat, 0);\n   for (int i = 1; i < arg_end; i++)\n@@ -2467,9 +2507,20 @@ nvptx_output_call_insn (rtx_insn *insn, rtx result, rtx callee)\n   \n   if (decl)\n     {\n+      char *replaced_dots = NULL;\n       const char *name = get_fnname_from_decl (decl);\n-      name = nvptx_name_replacement (name);\n+      const char *replacement = nvptx_name_replacement (name);\n+      if (replacement != name)\n+\tname = replacement;\n+      else\n+\t{\n+\t  replaced_dots = nvptx_replace_dot (name);\n+\t  if (replaced_dots)\n+\t    name = replaced_dots;\n+\t}\n       assemble_name (asm_out_file, name);\n+      if (replaced_dots)\n+\tXDELETE (replaced_dots);\n     }\n   else\n     output_address (VOIDmode, callee);"}]}