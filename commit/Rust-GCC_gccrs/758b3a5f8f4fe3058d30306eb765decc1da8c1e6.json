{"sha": "758b3a5f8f4fe3058d30306eb765decc1da8c1e6", "node_id": "C_kwDOANBUbNoAKDc1OGIzYTVmOGY0ZmUzMDU4ZDMwMzA2ZWI3NjVkZWNjMWRhOGMxZTY", "commit": {"author": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2022-01-12T07:45:52Z"}, "committer": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2022-01-12T14:54:42Z"}, "message": "[nvptx] Add gcc.target/nvptx/atomic-exchange-*.c test-cases\n\nAdd a few test-cases that test expansion of __atomic_exchange.\n\nTested on nvptx.\n\ngcc/testsuite/ChangeLog:\n\n2022-01-12  Tom de Vries  <tdevries@suse.de>\n\n\t* gcc.target/nvptx/atomic-exchange-1.c: New test.\n\t* gcc.target/nvptx/atomic-exchange-2.c: New test.\n\t* gcc.target/nvptx/atomic-exchange-3.c: New test.\n\t* gcc.target/nvptx/atomic-exchange-4.c: New test.", "tree": {"sha": "9f575763acf67e9119c734c5474f4c170f6afc2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f575763acf67e9119c734c5474f4c170f6afc2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/758b3a5f8f4fe3058d30306eb765decc1da8c1e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/758b3a5f8f4fe3058d30306eb765decc1da8c1e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/758b3a5f8f4fe3058d30306eb765decc1da8c1e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/758b3a5f8f4fe3058d30306eb765decc1da8c1e6/comments", "author": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d62e14e24cdc6de11b1367916cdd613cc7bd3ed7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d62e14e24cdc6de11b1367916cdd613cc7bd3ed7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d62e14e24cdc6de11b1367916cdd613cc7bd3ed7"}], "stats": {"total": 179, "additions": 179, "deletions": 0}, "files": [{"sha": "c63f52b168c6dd9c754bbbc737f203c315d6a0d5", "filename": "gcc/testsuite/gcc.target/nvptx/atomic-exchange-1.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/758b3a5f8f4fe3058d30306eb765decc1da8c1e6/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fatomic-exchange-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/758b3a5f8f4fe3058d30306eb765decc1da8c1e6/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fatomic-exchange-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fatomic-exchange-1.c?ref=758b3a5f8f4fe3058d30306eb765decc1da8c1e6", "patch": "@@ -0,0 +1,39 @@\n+/* Test the atomic exchange expansion, shared state space.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-Wno-long-long\" } */\n+\n+enum memmodel\n+{\n+  MEMMODEL_SEQ_CST = 5\n+};\n+\n+unsigned char u8 __attribute__((shared));\n+unsigned short u16 __attribute__((shared));\n+unsigned int u32 __attribute__((shared));\n+unsigned long long int u64 __attribute__((shared));\n+\n+int\n+main()\n+{\n+  __atomic_exchange_n (&u8, 0, MEMMODEL_SEQ_CST);\n+  __atomic_exchange_n (&u16, 0, MEMMODEL_SEQ_CST);\n+  __atomic_exchange_n (&u32, 0, MEMMODEL_SEQ_CST);\n+  __atomic_exchange_n (&u64, 0, MEMMODEL_SEQ_CST);\n+\n+  return 0;\n+}\n+\n+\n+/* Not ptx-native, fallback to libatomic.\n+   Libatomic uses generic addressing with a global lock and membar.sys barriers.\n+   We could implement these more efficiently by cloning libatomic for .shared,\n+   using a per-CTA lock and membar.cta barrier.  But we'd expect\n+   performance-critical code to use the ptx-native atomic sizes 32 and 64 bit,\n+   so that doesn't seem to be worth the trouble.  */\n+/* { dg-final { scan-assembler-times \"(?n)call .* __atomic_exchange_1\" 1 } } */\n+/* { dg-final { scan-assembler-times \"(?n)call .* __atomic_exchange_2\" 1 } } */\n+\n+/* { dg-final { scan-assembler-times \"atom.shared.exch.b32\" 1 } } */\n+/* { dg-final { scan-assembler-times \"atom.shared.exch.b64\" 1 } } */\n+/* { dg-final { scan-assembler-times \"membar.cta\" 4 } } */"}, {"sha": "4301e74e94e801b06b559dcf93cf4b9bd7014c49", "filename": "gcc/testsuite/gcc.target/nvptx/atomic-exchange-2.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/758b3a5f8f4fe3058d30306eb765decc1da8c1e6/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fatomic-exchange-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/758b3a5f8f4fe3058d30306eb765decc1da8c1e6/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fatomic-exchange-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fatomic-exchange-2.c?ref=758b3a5f8f4fe3058d30306eb765decc1da8c1e6", "patch": "@@ -0,0 +1,33 @@\n+/* Test the atomic exchange expansion, global state space.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-Wno-long-long\" } */\n+\n+enum memmodel\n+{\n+  MEMMODEL_SEQ_CST = 5\n+};\n+\n+unsigned char u8;\n+unsigned short u16;\n+unsigned int u32;\n+unsigned long long int u64;\n+\n+int\n+main()\n+{\n+  __atomic_exchange_n (&u8, 0, MEMMODEL_SEQ_CST);\n+  __atomic_exchange_n (&u16, 0, MEMMODEL_SEQ_CST);\n+  __atomic_exchange_n (&u32, 0, MEMMODEL_SEQ_CST);\n+  __atomic_exchange_n (&u64, 0, MEMMODEL_SEQ_CST);\n+\n+  return 0;\n+}\n+\n+/* Not ptx-native, fallback to libatomic.  */\n+/* { dg-final { scan-assembler-times \"(?n)call .* __atomic_exchange_1\" 1 } } */\n+/* { dg-final { scan-assembler-times \"(?n)call .* __atomic_exchange_2\" 1 } } */\n+\n+/* { dg-final { scan-assembler-times \"atom.global.exch.b32\" 1 } } */\n+/* { dg-final { scan-assembler-times \"atom.global.exch.b64\" 1 } } */\n+/* { dg-final { scan-assembler-times \"membar.sys\" 4 } } */"}, {"sha": "2f8232f25ebfee9c56a8f05995fd275ebf5b683a", "filename": "gcc/testsuite/gcc.target/nvptx/atomic-exchange-3.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/758b3a5f8f4fe3058d30306eb765decc1da8c1e6/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fatomic-exchange-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/758b3a5f8f4fe3058d30306eb765decc1da8c1e6/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fatomic-exchange-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fatomic-exchange-3.c?ref=758b3a5f8f4fe3058d30306eb765decc1da8c1e6", "patch": "@@ -0,0 +1,33 @@\n+/* Test the atomic exchange expansion, generic addressing.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-Wno-long-long\" } */\n+\n+enum memmodel\n+{\n+  MEMMODEL_SEQ_CST = 5\n+};\n+\n+unsigned char *u8;\n+unsigned short *u16;\n+unsigned int *u32;\n+unsigned long long int *u64;\n+\n+int\n+main()\n+{\n+  __atomic_exchange_n (u8, 0, MEMMODEL_SEQ_CST);\n+  __atomic_exchange_n (u16, 0, MEMMODEL_SEQ_CST);\n+  __atomic_exchange_n (u32, 0, MEMMODEL_SEQ_CST);\n+  __atomic_exchange_n (u64, 0, MEMMODEL_SEQ_CST);\n+\n+  return 0;\n+}\n+\n+/* Not ptx-native, fallback to libatomic.  */\n+/* { dg-final { scan-assembler-times \"(?n)call .* __atomic_exchange_1\" 1 } } */\n+/* { dg-final { scan-assembler-times \"(?n)call .* __atomic_exchange_2\" 1 } } */\n+\n+/* { dg-final { scan-assembler-times \"atom.exch.b32\" 1 } } */\n+/* { dg-final { scan-assembler-times \"atom.exch.b64\" 1 } } */\n+/* { dg-final { scan-assembler-times \"membar.sys\" 4 } } */"}, {"sha": "de1d395cccf41f54caa55b36b2cb73930caad9b3", "filename": "gcc/testsuite/gcc.target/nvptx/atomic-exchange-4.c", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/758b3a5f8f4fe3058d30306eb765decc1da8c1e6/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fatomic-exchange-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/758b3a5f8f4fe3058d30306eb765decc1da8c1e6/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fatomic-exchange-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fatomic-exchange-4.c?ref=758b3a5f8f4fe3058d30306eb765decc1da8c1e6", "patch": "@@ -0,0 +1,74 @@\n+/* Test the atomic exchange expansion, execution.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-Wno-long-long\" } */\n+\n+/* We're trying to generate this type of store/exchange/load sequence:\n+     st.global.u32   [g32], %r60;\n+     atom.global.exch.b32    %r22, [g32], 2;\n+     ld.global.u32   %r23, [g32];\n+   with no insns inbetween.\n+\n+   We compile this at -O0, to keep the compiler from optimizing out the\n+   \"p = (P)\" assignment.  If the assignment is optimized out we don't test\n+   the generic case, iow we generate for instance atom.global.exch.b32 instead\n+   of atom.exch.b32.\n+\n+   Compiling at -O0 however does introduce loads and stores in the\n+   store/exchange/load sequence, so we fix that by using the register\n+   keyword.  */\n+\n+enum memmodel\n+{\n+  MEMMODEL_RELAXED = 0,\n+};\n+\n+unsigned int g32;\n+unsigned long long int g64;\n+\n+unsigned int s32 __attribute__((shared));\n+unsigned long long int s64 __attribute__((shared));\n+\n+#define TEST(P, V1, V2)\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    register typeof (*(P)) tmp;\t\t\t\t\t\\\n+    register typeof (*(P)) tmp2;\t\t\t\t\\\n+    __atomic_store_n ((P), (V1), MEMMODEL_RELAXED);\t\t\\\n+    tmp = __atomic_exchange_n ((P), (V2), MEMMODEL_RELAXED);\t\\\n+    tmp2 = __atomic_load_n ((P), MEMMODEL_RELAXED);\t\t\\\n+    if (tmp != (V1) || tmp2 != (V2))\t\t\t\t\\\n+      __builtin_abort ();\t\t\t\t\t\\\n+  }\n+\n+#define TEST2(P, V1, V2)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    register typeof (*(P)) tmp;\t\t\t\t\t\\\n+    register typeof (*(P)) tmp2;\t\t\t\t\\\n+    *(P) = (V1);\t\t\t\t\t\t\\\n+    tmp = __atomic_exchange_n ((P), (V2), MEMMODEL_RELAXED);\t\\\n+    tmp2 = *(P);\t\t\t\t\t\t\\\n+    if (tmp != (V1) || tmp2 != (V2))\t\t\t\t\\\n+      __builtin_abort ();\t\t\t\t\t\\\n+  }\n+\n+#define TESTS(P)\t\t\t\t\\\n+  {\t\t\t\t\t\t\\\n+    TEST ((P), 1, 2);\t\t\t\t\\\n+    TEST2 ((P), 3, 4);\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+      register typeof (*(P)) * p = (P);\t\t\\\n+      TEST (p, 1, 2);\t\t\t\t\\\n+      TEST2 (p, 3, 4);\t\t\t\t\\\n+    }\t\t\t\t\t\t\\\n+  }\n+\n+int\n+main ()\n+{\n+  TESTS (&g32);\n+  TESTS (&g64);\n+  TESTS (&s32);\n+  TESTS (&s64);\n+\n+  return 0;\n+}"}]}