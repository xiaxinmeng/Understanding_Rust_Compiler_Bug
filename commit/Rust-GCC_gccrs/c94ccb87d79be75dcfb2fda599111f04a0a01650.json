{"sha": "c94ccb87d79be75dcfb2fda599111f04a0a01650", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzk0Y2NiODdkNzliZTc1ZGNmYjJmZGE1OTkxMTFmMDRhMGEwMTY1MA==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@bigpond.net.au", "date": "2002-04-02T22:49:44Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2002-04-02T22:49:44Z"}, "message": "rs6000.md (ctrdi*): Add FPR constraint and associated splitter.\n\n2002-04-02  Alan Modra  <amodra@bigpond.net.au>\n\n        * config/rs6000/rs6000.md (ctrdi*): Add FPR constraint and\n        associated splitter.  Remove MQ constraint.\n        (ctrdi_internal4): Correct CCmode clobber.\n\nFrom-SVN: r51767", "tree": {"sha": "41a1ed6eea360f13ed48902ea05182b278c18993", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/41a1ed6eea360f13ed48902ea05182b278c18993"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c94ccb87d79be75dcfb2fda599111f04a0a01650", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c94ccb87d79be75dcfb2fda599111f04a0a01650", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c94ccb87d79be75dcfb2fda599111f04a0a01650", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c94ccb87d79be75dcfb2fda599111f04a0a01650/comments", "author": null, "committer": null, "parents": [{"sha": "c544921cc0f1a948d00e91a4821bf9537c4717d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c544921cc0f1a948d00e91a4821bf9537c4717d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c544921cc0f1a948d00e91a4821bf9537c4717d1"}], "stats": {"total": 107, "additions": 76, "deletions": 31}, "files": [{"sha": "3f73f7daac4c7e31c32aeb341705971caac05120", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c94ccb87d79be75dcfb2fda599111f04a0a01650/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c94ccb87d79be75dcfb2fda599111f04a0a01650/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c94ccb87d79be75dcfb2fda599111f04a0a01650", "patch": "@@ -1,3 +1,9 @@\n+2002-04-02  Alan Modra  <amodra@bigpond.net.au>\n+\n+\t* config/rs6000/rs6000.md (ctrdi*): Add FPR constraint and\n+\tassociated splitter.  Remove MQ constraint.\n+\t(ctrdi_internal4): Correct CCmode clobber.\n+\n 2002-04-02  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n \n \t* milli64.S ($$dyncall): New function."}, {"sha": "53a03a46eb9e0d43fa7355069b473a8fad0c7151", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 70, "deletions": 31, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c94ccb87d79be75dcfb2fda599111f04a0a01650/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c94ccb87d79be75dcfb2fda599111f04a0a01650/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=c94ccb87d79be75dcfb2fda599111f04a0a01650", "patch": "@@ -13264,15 +13264,15 @@\n \n (define_insn \"*ctrdi_internal1\"\n   [(set (pc)\n-\t(if_then_else (ne (match_operand:DI 1 \"register_operand\" \"c,*r,*r\")\n+\t(if_then_else (ne (match_operand:DI 1 \"register_operand\" \"c,*r,*r,!*f\")\n \t\t\t  (const_int 1))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))\n-   (set (match_operand:DI 2 \"register_operand\" \"=1,*r,m*q*c*l\")\n+   (set (match_operand:DI 2 \"register_operand\" \"=1,*r,m*c*l,!*f\")\n \t(plus:DI (match_dup 1)\n \t\t (const_int -1)))\n-   (clobber (match_scratch:CC 3 \"=X,&x,&x\"))\n-   (clobber (match_scratch:DI 4 \"=X,X,r\"))]\n+   (clobber (match_scratch:CC 3 \"=X,&x,&x,&x\"))\n+   (clobber (match_scratch:DI 4 \"=X,X,r,r\"))]\n   \"TARGET_POWERPC64\"\n   \"*\n {\n@@ -13284,19 +13284,19 @@\n     return \\\"bdz $+8\\;b %l0\\\";\n }\"\n   [(set_attr \"type\" \"branch\")\n-   (set_attr \"length\" \"*,12,16\")])\n+   (set_attr \"length\" \"*,12,16,24\")])\n \n (define_insn \"*ctrdi_internal2\"\n   [(set (pc)\n-\t(if_then_else (ne (match_operand:DI 1 \"register_operand\" \"c,*r,*r\")\n+\t(if_then_else (ne (match_operand:DI 1 \"register_operand\" \"c,*r,*r,!*f\")\n \t\t\t  (const_int 1))\n \t\t      (pc)\n \t\t      (label_ref (match_operand 0 \"\" \"\"))))\n-   (set (match_operand:DI 2 \"register_operand\" \"=1,*r,m*q*c*l\")\n+   (set (match_operand:DI 2 \"register_operand\" \"=1,*r,m*c*l,!*f\")\n \t(plus:DI (match_dup 1)\n \t\t (const_int -1)))\n-   (clobber (match_scratch:CC 3 \"=X,&x,&x\"))\n-   (clobber (match_scratch:DI 4 \"=X,X,r\"))]\n+   (clobber (match_scratch:CC 3 \"=X,&x,&x,&x\"))\n+   (clobber (match_scratch:DI 4 \"=X,X,r,r\"))]\n   \"TARGET_POWERPC64\"\n   \"*\n {\n@@ -13308,7 +13308,7 @@\n     return \\\"{bdn|bdnz} $+8\\;b %l0\\\";\n }\"\n   [(set_attr \"type\" \"branch\")\n-   (set_attr \"length\" \"*,12,16\")])\n+   (set_attr \"length\" \"*,12,16,24\")])\n \n ;; Similar, but we can use GE since we have a REG_NONNEG.\n \n@@ -13362,15 +13362,15 @@\n \n (define_insn \"*ctrdi_internal3\"\n   [(set (pc)\n-\t(if_then_else (ge (match_operand:DI 1 \"register_operand\" \"c,*r,*r\")\n+\t(if_then_else (ge (match_operand:DI 1 \"register_operand\" \"c,*r,*r,!*f\")\n \t\t\t  (const_int 0))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))\n-   (set (match_operand:DI 2 \"register_operand\" \"=1,*r,m*q*c*l\")\n+   (set (match_operand:DI 2 \"register_operand\" \"=1,*r,m*c*l,!*f\")\n \t(plus:DI (match_dup 1)\n \t\t (const_int -1)))\n-   (clobber (match_scratch:CC 3 \"=X,&x,&X\"))\n-   (clobber (match_scratch:DI 4 \"=X,X,r\"))]\n+   (clobber (match_scratch:CC 3 \"=X,&x,&x,&x\"))\n+   (clobber (match_scratch:DI 4 \"=X,X,r,r\"))]\n   \"TARGET_POWERPC64 && find_reg_note (insn, REG_NONNEG, 0)\"\n   \"*\n {\n@@ -13382,19 +13382,19 @@\n     return \\\"bdz $+8\\;b %l0\\\";\n }\"\n   [(set_attr \"type\" \"branch\")\n-   (set_attr \"length\" \"*,12,16\")])\n+   (set_attr \"length\" \"*,12,16,24\")])\n \n (define_insn \"*ctrdi_internal4\"\n   [(set (pc)\n-\t(if_then_else (ge (match_operand:DI 1 \"register_operand\" \"c,*r,*r\")\n+\t(if_then_else (ge (match_operand:DI 1 \"register_operand\" \"c,*r,*r,!*f\")\n \t\t\t  (const_int 0))\n \t\t      (pc)\n \t\t      (label_ref (match_operand 0 \"\" \"\"))))\n-   (set (match_operand:DI 2 \"register_operand\" \"=1,*r,m*q*c*l\")\n+   (set (match_operand:DI 2 \"register_operand\" \"=1,*r,m*c*l,!*f\")\n \t(plus:DI (match_dup 1)\n \t\t (const_int -1)))\n-   (clobber (match_scratch:CC 3 \"=X,&x,&X\"))\n-   (clobber (match_scratch:DI 4 \"=X,X,r\"))]\n+   (clobber (match_scratch:CC 3 \"=X,&x,&x,&x\"))\n+   (clobber (match_scratch:DI 4 \"=X,X,r,r\"))]\n   \"TARGET_POWERPC64 && find_reg_note (insn, REG_NONNEG, 0)\"\n   \"*\n {\n@@ -13406,7 +13406,7 @@\n     return \\\"{bdn|bdnz} $+8\\;b %l0\\\";\n }\"\n   [(set_attr \"type\" \"branch\")\n-   (set_attr \"length\" \"*,12,16\")])\n+   (set_attr \"length\" \"*,12,16,24\")])\n \n ;; Similar but use EQ\n \n@@ -13460,15 +13460,15 @@\n \n (define_insn \"*ctrdi_internal5\"\n   [(set (pc)\n-\t(if_then_else (eq (match_operand:DI 1 \"register_operand\" \"c,*r,*r\")\n+\t(if_then_else (eq (match_operand:DI 1 \"register_operand\" \"c,*r,*r,!*f\")\n \t\t\t  (const_int 1))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))\n-   (set (match_operand:DI 2 \"register_operand\" \"=1,*r,m*q*c*l\")\n+   (set (match_operand:DI 2 \"register_operand\" \"=1,*r,m*c*l,!*f\")\n \t(plus:DI (match_dup 1)\n \t\t (const_int -1)))\n-   (clobber (match_scratch:CC 3 \"=X,&x,&x\"))\n-   (clobber (match_scratch:DI 4 \"=X,X,r\"))]\n+   (clobber (match_scratch:CC 3 \"=X,&x,&x,&x\"))\n+   (clobber (match_scratch:DI 4 \"=X,X,r,r\"))]\n   \"TARGET_POWERPC64\"\n   \"*\n {\n@@ -13480,19 +13480,19 @@\n     return \\\"{bdn|bdnz} $+8\\;b %l0\\\";\n }\"\n   [(set_attr \"type\" \"branch\")\n-   (set_attr \"length\" \"*,12,16\")])\n+   (set_attr \"length\" \"*,12,16,24\")])\n \n (define_insn \"*ctrdi_internal6\"\n   [(set (pc)\n-\t(if_then_else (eq (match_operand:DI 1 \"register_operand\" \"c,*r,*r\")\n+\t(if_then_else (eq (match_operand:DI 1 \"register_operand\" \"c,*r,*r,!*f\")\n \t\t\t  (const_int 1))\n \t\t      (pc)\n \t\t      (label_ref (match_operand 0 \"\" \"\"))))\n-   (set (match_operand:DI 2 \"register_operand\" \"=1,*r,m*q*c*l\")\n+   (set (match_operand:DI 2 \"register_operand\" \"=1,*r,m*c*l,!*f\")\n \t(plus:DI (match_dup 1)\n \t\t (const_int -1)))\n-   (clobber (match_scratch:CC 3 \"=X,&x,&x\"))\n-   (clobber (match_scratch:DI 4 \"=X,X,r\"))]\n+   (clobber (match_scratch:CC 3 \"=X,&x,&x,&x\"))\n+   (clobber (match_scratch:DI 4 \"=X,X,r,r\"))]\n   \"TARGET_POWERPC64\"\n   \"*\n {\n@@ -13504,7 +13504,7 @@\n     return \\\"bdz $+8\\;b %l0\\\";\n }\"\n   [(set_attr \"type\" \"branch\")\n-   (set_attr \"length\" \"*,12,16\")])\n+   (set_attr \"length\" \"*,12,16,24\")])\n \n ;; Now the splitters if we could not allocate the CTR register\n \n@@ -13575,7 +13575,7 @@\n \t\t (const_int -1)))\n    (clobber (match_scratch:CC 3 \"\"))\n    (clobber (match_scratch:DI 4 \"\"))]\n-  \"TARGET_POWERPC64 && reload_completed\"\n+  \"TARGET_POWERPC64 && reload_completed && INT_REGNO_P (REGNO (operands[0]))\"\n   [(parallel [(set (match_dup 3)\n \t\t   (compare:CC (plus:DI (match_dup 1)\n \t\t\t\t\t(const_int -1))\n@@ -13618,6 +13618,45 @@\n   \"\n { operands[7] = gen_rtx (GET_CODE (operands[2]), VOIDmode, operands[3],\n \t\t\t const0_rtx); }\")\n+\n+(define_split\n+  [(set (pc)\n+       (if_then_else (match_operator 2 \"comparison_operator\"\n+\t\t\t\t     [(match_operand:DI 1 \"gpc_reg_operand\" \"\")\n+\t\t\t\t      (const_int 1)])\n+\t\t     (match_operand 5 \"\" \"\")\n+\t\t     (match_operand 6 \"\" \"\")))\n+   (set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n+       (plus:DI (match_dup 1)\n+\t\t(const_int -1)))\n+   (clobber (match_scratch:CC 3 \"\"))\n+   (clobber (match_scratch:DI 4 \"\"))]\n+  \"TARGET_POWERPC64 && reload_completed && FP_REGNO_P (REGNO (operands[0]))\"\n+  [(set (match_dup 8)\n+\t(match_dup 1))\n+   (set (match_dup 4)\n+\t(match_dup 8))\n+   (parallel [(set (match_dup 3)\n+\t\t   (compare:CC (plus:DI (match_dup 4)\n+\t\t\t\t\t(const_int -1))\n+\t\t\t       (const_int 0)))\n+\t      (set (match_dup 4)\n+\t\t   (plus:DI (match_dup 4)\n+\t\t\t    (const_int -1)))])\n+   (set (match_dup 8)\n+\t(match_dup 4))\n+   (set (match_dup 0)\n+\t(match_dup 8))\n+   (set (pc) (if_then_else (match_dup 7)\n+\t\t\t   (match_dup 5)\n+\t\t\t   (match_dup 6)))]\n+  \"\n+{\n+  operands[7] = gen_rtx (GET_CODE (operands[2]), VOIDmode, operands[3],\n+\t\t\t const0_rtx);\n+  operands[8] = assign_stack_temp (DImode, GET_MODE_SIZE (DImode), 0);\n+}\")\n+\n \f\n (define_insn \"trap\"\n   [(trap_if (const_int 1) (const_int 0))]"}]}