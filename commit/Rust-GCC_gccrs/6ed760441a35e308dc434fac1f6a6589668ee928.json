{"sha": "6ed760441a35e308dc434fac1f6a6589668ee928", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmVkNzYwNDQxYTM1ZTMwOGRjNDM0ZmFjMWY2YTY1ODk2NjhlZTkyOA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2019-11-12T10:10:58Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2019-11-12T10:10:58Z"}, "message": "Use more SET_OPTION_IF_UNSET.\n\n2019-11-12  Martin Liska  <mliska@suse.cz>\n\n\t* config/i386/i386-options.c (ix86_recompute_optlev_based_flags):\n\tUse SET_OPTION_IF_UNSET.\n\t(ix86_option_override_internal): Likewise.\n\t* opts.c (default_options_optimization): Likewise.\n\t(finish_options): Likewise.\n\t(enable_fdo_optimizations): Likewise.\n\t(common_handle_option): Likewise.\n2019-11-12  Martin Liska  <mliska@suse.cz>\n\n\t* c-opts.c (c_common_post_options):\n\tUse SET_OPTION_IF_UNSET.\n2019-11-12  Martin Liska  <mliska@suse.cz>\n\n\t* options.c (gfc_init_options):\n\tUse SET_OPTION_IF_UNSET.\n2019-11-12  Martin Liska  <mliska@suse.cz>\n\n\t* go-lang.c (go_langhook_post_options):\n\tUse SET_OPTION_IF_UNSET.\n\nFrom-SVN: r278091", "tree": {"sha": "96693761f01063111373f8f358b08f9123028953", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96693761f01063111373f8f358b08f9123028953"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ed760441a35e308dc434fac1f6a6589668ee928", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ed760441a35e308dc434fac1f6a6589668ee928", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ed760441a35e308dc434fac1f6a6589668ee928", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ed760441a35e308dc434fac1f6a6589668ee928/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8100e93b72dfe82c5f084a3d9351b8ad2ef6ab39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8100e93b72dfe82c5f084a3d9351b8ad2ef6ab39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8100e93b72dfe82c5f084a3d9351b8ad2ef6ab39"}], "stats": {"total": 240, "additions": 119, "deletions": 121}, "files": [{"sha": "a56bdc130f24535f20428e006671aba936b6a7b4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ed760441a35e308dc434fac1f6a6589668ee928/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ed760441a35e308dc434fac1f6a6589668ee928/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6ed760441a35e308dc434fac1f6a6589668ee928", "patch": "@@ -1,3 +1,13 @@\n+2019-11-12  Martin Liska  <mliska@suse.cz>\n+\n+\t* config/i386/i386-options.c (ix86_recompute_optlev_based_flags):\n+\tUse SET_OPTION_IF_UNSET.\n+\t(ix86_option_override_internal): Likewise.\n+\t* opts.c (default_options_optimization): Likewise.\n+\t(finish_options): Likewise.\n+\t(enable_fdo_optimizations): Likewise.\n+\t(common_handle_option): Likewise.\n+\n 2019-11-12  Martin Liska  <mliska@suse.cz>\n \n \t* common/common-target.def: Remove option_validate_param and"}, {"sha": "a174ff9047bc82262bb121b2fb294c0c7615024c", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ed760441a35e308dc434fac1f6a6589668ee928/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ed760441a35e308dc434fac1f6a6589668ee928/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=6ed760441a35e308dc434fac1f6a6589668ee928", "patch": "@@ -1,3 +1,8 @@\n+2019-11-12  Martin Liska  <mliska@suse.cz>\n+\n+\t* c-opts.c (c_common_post_options):\n+\tUse SET_OPTION_IF_UNSET.\n+\n 2019-11-12  Maciej W. Rozycki  <macro@codesourcery.com>\n \t    Frederik Harwath  <frederik@codesourcery.com>\n "}, {"sha": "c913291c07c2b91714727fad8994901b174d5d59", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ed760441a35e308dc434fac1f6a6589668ee928/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ed760441a35e308dc434fac1f6a6589668ee928/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=6ed760441a35e308dc434fac1f6a6589668ee928", "patch": "@@ -828,9 +828,9 @@ c_common_post_options (const char **pfilename)\n \n   /* C2X Annex F does not permit certain built-in functions to raise\n      \"inexact\".  */\n-  if (flag_isoc2x\n-      && !global_options_set.x_flag_fp_int_builtin_inexact)\n-    flag_fp_int_builtin_inexact = 0;\n+  if (flag_isoc2x)\n+    SET_OPTION_IF_UNSET (&global_options, &global_options_set,\n+\t\t\t flag_fp_int_builtin_inexact, 0);\n \n   /* By default we use C99 inline semantics in GNU99 or C99 mode.  C99\n      inline semantics are not supported in GNU89 or C89 mode.  */\n@@ -847,9 +847,9 @@ c_common_post_options (const char **pfilename)\n \n   /* If -ffreestanding, -fno-hosted or -fno-builtin then disable\n      pattern recognition.  */\n-  if (!global_options_set.x_flag_tree_loop_distribute_patterns\n-      && flag_no_builtin)\n-    flag_tree_loop_distribute_patterns = 0;\n+  if (flag_no_builtin)\n+    SET_OPTION_IF_UNSET (&global_options, &global_options_set,\n+\t\t\t flag_tree_loop_distribute_patterns, 0);\n \n   /* -Woverlength-strings is off by default, but is enabled by -Wpedantic.\n      It is never enabled in C++, as the minimum limit is not normative\n@@ -918,16 +918,17 @@ c_common_post_options (const char **pfilename)\n \t\t\t\t && (cxx_dialect >= cxx11 || flag_isoc99));\n \n   /* -Wregister is enabled by default in C++17.  */\n-  if (!global_options_set.x_warn_register)\n-    warn_register = cxx_dialect >= cxx17;\n+  SET_OPTION_IF_UNSET (&global_options, &global_options_set, warn_register,\n+\t\t       cxx_dialect >= cxx17);\n \n   /* -Wcomma-subscript is enabled by default in C++20.  */\n-  if (!global_options_set.x_warn_comma_subscript)\n-    warn_comma_subscript = (cxx_dialect >= cxx2a && warn_deprecated);\n+  SET_OPTION_IF_UNSET (&global_options, &global_options_set,\n+\t\t       warn_comma_subscript,\n+\t\t       cxx_dialect >= cxx2a && warn_deprecated);\n \n   /* -Wvolatile is enabled by default in C++20.  */\n-  if (!global_options_set.x_warn_volatile)\n-    warn_volatile = (cxx_dialect >= cxx2a && warn_deprecated);\n+  SET_OPTION_IF_UNSET (&global_options, &global_options_set, warn_volatile,\n+\t\t       cxx_dialect >= cxx2a && warn_deprecated);\n \n   /* Declone C++ 'structors if -Os.  */\n   if (flag_declone_ctor_dtor == -1)\n@@ -979,12 +980,13 @@ c_common_post_options (const char **pfilename)\n   /* By default, enable the new inheriting constructor semantics along with ABI\n      11.  New and old should coexist fine, but it is a change in what\n      artificial symbols are generated.  */\n-  if (!global_options_set.x_flag_new_inheriting_ctors)\n-    flag_new_inheriting_ctors = abi_version_at_least (11);\n+  SET_OPTION_IF_UNSET (&global_options, &global_options_set,\n+\t\t       flag_new_inheriting_ctors,\n+\t\t       abi_version_at_least (11));\n \n   /* For GCC 7, only enable DR150 resolution by default if -std=c++17.  */\n-  if (!global_options_set.x_flag_new_ttp)\n-    flag_new_ttp = (cxx_dialect >= cxx17);\n+  SET_OPTION_IF_UNSET (&global_options, &global_options_set, flag_new_ttp,\n+\t\t       cxx_dialect >= cxx17);\n \n   if (cxx_dialect >= cxx11)\n     {"}, {"sha": "b082228ebf22f7e9e6b7b661617def83af7956ca", "filename": "gcc/config/i386/i386-options.c", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ed760441a35e308dc434fac1f6a6589668ee928/gcc%2Fconfig%2Fi386%2Fi386-options.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ed760441a35e308dc434fac1f6a6589668ee928/gcc%2Fconfig%2Fi386%2Fi386-options.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-options.c?ref=6ed760441a35e308dc434fac1f6a6589668ee928", "patch": "@@ -1605,12 +1605,12 @@ ix86_recompute_optlev_based_flags (struct gcc_options *opts,\n      in case they weren't overwritten by command line options.  */\n   if (TARGET_64BIT_P (opts->x_ix86_isa_flags))\n     {\n-      if (opts->x_optimize >= 1 && !opts_set->x_flag_omit_frame_pointer)\n-\topts->x_flag_omit_frame_pointer = !USE_IX86_FRAME_POINTER;\n+      if (opts->x_optimize >= 1)\n+\tSET_OPTION_IF_UNSET (opts, opts_set, flag_omit_frame_pointer,\n+\t\t\t     !USE_IX86_FRAME_POINTER);\n       if (opts->x_flag_asynchronous_unwind_tables\n-\t  && !opts_set->x_flag_unwind_tables\n \t  && TARGET_64BIT_MS_ABI)\n-\topts->x_flag_unwind_tables = 1;\n+\tSET_OPTION_IF_UNSET (opts, opts_set, flag_unwind_tables, 1);\n       if (opts->x_flag_asynchronous_unwind_tables == 2)\n \topts->x_flag_unwind_tables\n \t  = opts->x_flag_asynchronous_unwind_tables = 1;\n@@ -1619,9 +1619,9 @@ ix86_recompute_optlev_based_flags (struct gcc_options *opts,\n     }\n   else\n     {\n-      if (opts->x_optimize >= 1 && !opts_set->x_flag_omit_frame_pointer)\n-\topts->x_flag_omit_frame_pointer\n-\t  = !(USE_IX86_FRAME_POINTER || opts->x_optimize_size);\n+      if (opts->x_optimize >= 1)\n+\t  SET_OPTION_IF_UNSET (opts, opts_set, flag_omit_frame_pointer,\n+\t\t\t       !(USE_IX86_FRAME_POINTER || opts->x_optimize_size));\n       if (opts->x_flag_asynchronous_unwind_tables == 2)\n \topts->x_flag_asynchronous_unwind_tables = !USE_IX86_FRAME_POINTER;\n       if (opts->x_flag_pcc_struct_return == 2)\n@@ -1821,8 +1821,7 @@ ix86_option_override_internal (bool main_args_p,\n     opts->x_ix86_pmode = TARGET_LP64_P (opts->x_ix86_isa_flags)\n \t\t\t ? PMODE_DI : PMODE_SI;\n \n-  if (!opts_set->x_ix86_abi)\n-    opts->x_ix86_abi = DEFAULT_ABI;\n+  SET_OPTION_IF_UNSET (opts, opts_set, ix86_abi, DEFAULT_ABI);\n \n   if (opts->x_ix86_abi == MS_ABI && TARGET_X32_P (opts->x_ix86_isa_flags))\n     error (\"%<-mabi=ms%> not supported with X32 ABI\");\n@@ -1843,8 +1842,8 @@ ix86_option_override_internal (bool main_args_p,\n   /* For targets using ms ABI enable ms-extensions, if not\n      explicit turned off.  For non-ms ABI we turn off this\n      option.  */\n-  if (!opts_set->x_flag_ms_extensions)\n-    opts->x_flag_ms_extensions = (MS_ABI == DEFAULT_ABI);\n+  SET_OPTION_IF_UNSET (opts, opts_set, flag_ms_extensions,\n+\t\t       (MS_ABI == DEFAULT_ABI));\n \n   if (opts_set->x_ix86_cmodel)\n     {\n@@ -2367,8 +2366,8 @@ ix86_option_override_internal (bool main_args_p,\n   ix86_default_align (opts);\n \n   /* Provide default for -mbranch-cost= value.  */\n-  if (!opts_set->x_ix86_branch_cost)\n-    opts->x_ix86_branch_cost = ix86_tune_cost->branch_cost;\n+  SET_OPTION_IF_UNSET (opts, opts_set, ix86_branch_cost,\n+\t\t       ix86_tune_cost->branch_cost);\n \n   if (TARGET_64BIT_P (opts->x_ix86_isa_flags))\n     {\n@@ -2474,8 +2473,8 @@ ix86_option_override_internal (bool main_args_p,\n     }\n \n   /* Set the default value for -mstackrealign.  */\n-  if (!opts_set->x_ix86_force_align_arg_pointer)\n-    opts->x_ix86_force_align_arg_pointer = STACK_REALIGN_DEFAULT;\n+  SET_OPTION_IF_UNSET (opts, opts_set, ix86_force_align_arg_pointer,\n+\t\t       STACK_REALIGN_DEFAULT);\n \n   ix86_default_incoming_stack_boundary = PREFERRED_STACK_BOUNDARY;\n \n@@ -2863,9 +2862,8 @@ ix86_option_override_internal (bool main_args_p,\n \n   /* PR86952: jump table usage with retpolines is slow.\n      The PR provides some numbers about the slowness.  */\n-  if (ix86_indirect_branch != indirect_branch_keep\n-      && !opts_set->x_flag_jump_tables)\n-    opts->x_flag_jump_tables = 0;\n+  if (ix86_indirect_branch != indirect_branch_keep)\n+    SET_OPTION_IF_UNSET (opts, opts_set, flag_jump_tables, 0);\n \n   return true;\n }"}, {"sha": "92a71a3c155c2a59d132bb9c92b633bb3759a867", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ed760441a35e308dc434fac1f6a6589668ee928/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ed760441a35e308dc434fac1f6a6589668ee928/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=6ed760441a35e308dc434fac1f6a6589668ee928", "patch": "@@ -1,3 +1,8 @@\n+2019-11-12  Martin Liska  <mliska@suse.cz>\n+\n+\t* options.c (gfc_init_options):\n+\tUse SET_OPTION_IF_UNSET.\n+\n 2019-11-12  Maciej W. Rozycki  <macro@codesourcery.com>\n \t    Frederik Harwath  <frederik@codesourcery.com>\n "}, {"sha": "f7a5299c5e3a3aa7184b08ebb2e8ee1dcf4a686f", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ed760441a35e308dc434fac1f6a6589668ee928/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ed760441a35e308dc434fac1f6a6589668ee928/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=6ed760441a35e308dc434fac1f6a6589668ee928", "patch": "@@ -162,8 +162,8 @@ gfc_init_options (unsigned int decoded_options_count,\n   /* ??? Wmissing-include-dirs is disabled by default in C/C++ but\n      enabled by default in Fortran.  Ideally, we should express this\n      in .opt, but that is not supported yet.  */\n-  if (!global_options_set.x_cpp_warn_missing_include_dirs)\n-    global_options.x_cpp_warn_missing_include_dirs = 1;\n+  SET_OPTION_IF_UNSET (&global_options, &global_options_set,\n+\t\t       cpp_warn_missing_include_dirs, 1);\n \n   set_dec_flags (0);\n "}, {"sha": "eb1a03bab89e2101e05aee1e81506fa94cab0ad1", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ed760441a35e308dc434fac1f6a6589668ee928/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ed760441a35e308dc434fac1f6a6589668ee928/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=6ed760441a35e308dc434fac1f6a6589668ee928", "patch": "@@ -1,3 +1,8 @@\n+2019-11-12  Martin Liska  <mliska@suse.cz>\n+\n+\t* go-lang.c (go_langhook_post_options):\n+\tUse SET_OPTION_IF_UNSET.\n+\n 2019-09-04  Ian Lance Taylor  <iant@golang.org>\n \n \tPR tree-optimization/91663"}, {"sha": "8766372b172f326cfa49df4125c0866b140801ff", "filename": "gcc/go/go-lang.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ed760441a35e308dc434fac1f6a6589668ee928/gcc%2Fgo%2Fgo-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ed760441a35e308dc434fac1f6a6589668ee928/gcc%2Fgo%2Fgo-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-lang.c?ref=6ed760441a35e308dc434fac1f6a6589668ee928", "patch": "@@ -297,13 +297,13 @@ go_langhook_post_options (const char **pfilename ATTRIBUTE_UNUSED)\n     flag_excess_precision = EXCESS_PRECISION_STANDARD;\n \n   /* Tail call optimizations can confuse uses of runtime.Callers.  */\n-  if (!global_options_set.x_flag_optimize_sibling_calls)\n-    global_options.x_flag_optimize_sibling_calls = 0;\n+  SET_OPTION_IF_UNSET (&global_options, &global_options_set,\n+\t\t       flag_optimize_sibling_calls, 0);\n \n   /* Partial inlining can confuses uses of runtime.Callers.\n      See https://gcc.gnu.org/PR91663.  */\n-  if (!global_options_set.x_flag_partial_inlining)\n-    global_options.x_flag_partial_inlining = 0;\n+  SET_OPTION_IF_UNSET (&global_options, &global_options_set,\n+\t\t       flag_partial_inlining, 0);\n \n   /* If the debug info level is still 1, as set in init_options, make\n      sure that some debugging type is selected.  */\n@@ -312,18 +312,18 @@ go_langhook_post_options (const char **pfilename ATTRIBUTE_UNUSED)\n     global_options.x_write_symbols = PREFERRED_DEBUGGING_TYPE;\n \n   /* We turn on stack splitting if we can.  */\n-  if (!global_options_set.x_flag_split_stack\n-      && targetm_common.supports_split_stack (false, &global_options))\n-    global_options.x_flag_split_stack = 1;\n+  if (targetm_common.supports_split_stack (false, &global_options))\n+    SET_OPTION_IF_UNSET (&global_options, &global_options_set,\n+\t\t\t flag_split_stack, 1);\n \n   /* If stack splitting is turned on, and the user did not explicitly\n      request function partitioning, turn off partitioning, as it\n      confuses the linker when trying to handle partitioned split-stack\n      code that calls a non-split-stack function.  */\n   if (global_options.x_flag_split_stack\n-      && global_options.x_flag_reorder_blocks_and_partition\n-      && !global_options_set.x_flag_reorder_blocks_and_partition)\n-    global_options.x_flag_reorder_blocks_and_partition = 0;\n+      && global_options.x_flag_reorder_blocks_and_partition)\n+    SET_OPTION_IF_UNSET (&global_options, &global_options_set,\n+\t\t\t flag_reorder_blocks_and_partition, 0);\n \n   /* Returning false means that the backend should be used.  */\n   return false;"}, {"sha": "faf2eef082e9709cb23cf042318c7cc594dbcc9c", "filename": "gcc/opts.c", "status": "modified", "additions": 48, "deletions": 75, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ed760441a35e308dc434fac1f6a6589668ee928/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ed760441a35e308dc434fac1f6a6589668ee928/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=6ed760441a35e308dc434fac1f6a6589668ee928", "patch": "@@ -641,9 +641,8 @@ default_options_optimization (struct gcc_options *opts,\n   /* -O2 param settings.  */\n   opt2 = (opts->x_optimize >= 2);\n \n-  if (openacc_mode\n-      && !opts_set->x_flag_ipa_pta)\n-    opts->x_flag_ipa_pta = true;\n+  if (openacc_mode)\n+    SET_OPTION_IF_UNSET (opts, opts_set, flag_ipa_pta, true);\n \n   /* Track fields in field-sensitive alias analysis.  */\n   if (opt2)\n@@ -1064,13 +1063,11 @@ finish_options (struct gcc_options *opts, struct gcc_options *opts_set,\n      code that calls a non-split-stack functions.  But if partitioning\n      was turned on explicitly just hope for the best.  */\n   if (opts->x_flag_split_stack\n-      && opts->x_flag_reorder_blocks_and_partition\n-      && !opts_set->x_flag_reorder_blocks_and_partition)\n-    opts->x_flag_reorder_blocks_and_partition = 0;\n+      && opts->x_flag_reorder_blocks_and_partition)\n+    SET_OPTION_IF_UNSET (opts, opts_set, flag_reorder_blocks_and_partition, 0);\n \n-  if (opts->x_flag_reorder_blocks_and_partition\n-      && !opts_set->x_flag_reorder_functions)\n-    opts->x_flag_reorder_functions = 1;\n+  if (opts->x_flag_reorder_blocks_and_partition)\n+    SET_OPTION_IF_UNSET (opts, opts_set, flag_reorder_functions, 1);\n \n   /* The -gsplit-dwarf option requires -ggnu-pubnames.  */\n   if (opts->x_dwarf_split_debug_info)\n@@ -1127,9 +1124,9 @@ finish_options (struct gcc_options *opts, struct gcc_options *opts_set,\n \n   /* Enable -fsanitize-address-use-after-scope if address sanitizer is\n      enabled.  */\n-  if ((opts->x_flag_sanitize & SANITIZE_USER_ADDRESS)\n-      && !opts_set->x_flag_sanitize_address_use_after_scope)\n-    opts->x_flag_sanitize_address_use_after_scope = true;\n+  if (opts->x_flag_sanitize & SANITIZE_USER_ADDRESS)\n+    SET_OPTION_IF_UNSET (opts, opts_set, flag_sanitize_address_use_after_scope,\n+\t\t\t true);\n \n   /* Force -fstack-reuse=none in case -fsanitize-address-use-after-scope\n      is enabled.  */\n@@ -1670,52 +1667,34 @@ enable_fdo_optimizations (struct gcc_options *opts,\n \t\t\t  struct gcc_options *opts_set,\n \t\t\t  int value)\n {\n-  if (!opts_set->x_flag_branch_probabilities)\n-    opts->x_flag_branch_probabilities = value;\n-  if (!opts_set->x_flag_profile_values)\n-    opts->x_flag_profile_values = value;\n-  if (!opts_set->x_flag_unroll_loops)\n-    opts->x_flag_unroll_loops = value;\n-  if (!opts_set->x_flag_peel_loops)\n-    opts->x_flag_peel_loops = value;\n-  if (!opts_set->x_flag_tracer)\n-    opts->x_flag_tracer = value;\n-  if (!opts_set->x_flag_value_profile_transformations)\n-    opts->x_flag_value_profile_transformations = value;\n-  if (!opts_set->x_flag_inline_functions)\n-    opts->x_flag_inline_functions = value;\n-  if (!opts_set->x_flag_ipa_cp)\n-    opts->x_flag_ipa_cp = value;\n-  if (!opts_set->x_flag_ipa_cp_clone\n-      && value && opts->x_flag_ipa_cp)\n-    opts->x_flag_ipa_cp_clone = value;\n-  if (!opts_set->x_flag_ipa_bit_cp\n-      && value && opts->x_flag_ipa_cp)\n-    opts->x_flag_ipa_bit_cp = value;\n-  if (!opts_set->x_flag_predictive_commoning)\n-    opts->x_flag_predictive_commoning = value;\n-  if (!opts_set->x_flag_split_loops)\n-    opts->x_flag_split_loops = value;\n-  if (!opts_set->x_flag_unswitch_loops)\n-    opts->x_flag_unswitch_loops = value;\n-  if (!opts_set->x_flag_gcse_after_reload)\n-    opts->x_flag_gcse_after_reload = value;\n-  if (!opts_set->x_flag_tree_loop_vectorize)\n-    opts->x_flag_tree_loop_vectorize = value;\n-  if (!opts_set->x_flag_tree_slp_vectorize)\n-    opts->x_flag_tree_slp_vectorize = value;\n-  if (!opts_set->x_flag_version_loops_for_strides)\n-    opts->x_flag_version_loops_for_strides = value;\n-  if (!opts_set->x_flag_vect_cost_model)\n-    opts->x_flag_vect_cost_model = VECT_COST_MODEL_DYNAMIC;\n-  if (!opts_set->x_flag_tree_loop_distribute_patterns)\n-    opts->x_flag_tree_loop_distribute_patterns = value;\n-  if (!opts_set->x_flag_loop_interchange)\n-    opts->x_flag_loop_interchange = value;\n-  if (!opts_set->x_flag_unroll_jam)\n-    opts->x_flag_unroll_jam = value;\n-  if (!opts_set->x_flag_tree_loop_distribution)\n-    opts->x_flag_tree_loop_distribution = value;\n+  SET_OPTION_IF_UNSET (opts, opts_set, flag_branch_probabilities, value);\n+  SET_OPTION_IF_UNSET (opts, opts_set, flag_profile_values, value);\n+  SET_OPTION_IF_UNSET (opts, opts_set, flag_unroll_loops, value);\n+  SET_OPTION_IF_UNSET (opts, opts_set, flag_peel_loops, value);\n+  SET_OPTION_IF_UNSET (opts, opts_set, flag_tracer, value);\n+  SET_OPTION_IF_UNSET (opts, opts_set, flag_value_profile_transformations,\n+\t\t       value);\n+  SET_OPTION_IF_UNSET (opts, opts_set, flag_inline_functions, value);\n+  SET_OPTION_IF_UNSET (opts, opts_set, flag_ipa_cp, value);\n+  if (value)\n+    {\n+      SET_OPTION_IF_UNSET (opts, opts_set, flag_ipa_cp_clone, 1);\n+      SET_OPTION_IF_UNSET (opts, opts_set, flag_ipa_bit_cp, 1);\n+    }\n+  SET_OPTION_IF_UNSET (opts, opts_set, flag_predictive_commoning, value);\n+  SET_OPTION_IF_UNSET (opts, opts_set, flag_split_loops, value);\n+  SET_OPTION_IF_UNSET (opts, opts_set, flag_unswitch_loops, value);\n+  SET_OPTION_IF_UNSET (opts, opts_set, flag_gcse_after_reload, value);\n+  SET_OPTION_IF_UNSET (opts, opts_set, flag_tree_loop_vectorize, value);\n+  SET_OPTION_IF_UNSET (opts, opts_set, flag_tree_slp_vectorize, value);\n+  SET_OPTION_IF_UNSET (opts, opts_set, flag_version_loops_for_strides, value);\n+  SET_OPTION_IF_UNSET (opts, opts_set, flag_vect_cost_model,\n+\t\t       VECT_COST_MODEL_DYNAMIC);\n+  SET_OPTION_IF_UNSET (opts, opts_set, flag_tree_loop_distribute_patterns,\n+\t\t       value);\n+  SET_OPTION_IF_UNSET (opts, opts_set, flag_loop_interchange, value);\n+  SET_OPTION_IF_UNSET (opts, opts_set, flag_unroll_jam, value);\n+  SET_OPTION_IF_UNSET (opts, opts_set, flag_tree_loop_distribution, value);\n }\n \n /* -f{,no-}sanitize{,-recover}= suboptions.  */\n@@ -2531,13 +2510,13 @@ common_handle_option (struct gcc_options *opts,\n       /* FALLTHRU */\n     case OPT_fprofile_use:\n       enable_fdo_optimizations (opts, opts_set, value);\n-      if (!opts_set->x_flag_profile_reorder_functions)\n-\t  opts->x_flag_profile_reorder_functions = value;\n+      SET_OPTION_IF_UNSET (opts, opts_set, flag_profile_reorder_functions,\n+\t\t\t   value);\n \t/* Indirect call profiling should do all useful transformations\n \t   speculative devirtualization does.  */\n-      if (!opts_set->x_flag_devirtualize_speculatively\n-\t  && opts->x_flag_value_profile_transformations)\n-\topts->x_flag_devirtualize_speculatively = false;\n+      if (opts->x_flag_value_profile_transformations)\n+\tSET_OPTION_IF_UNSET (opts, opts_set, flag_devirtualize_speculatively,\n+\t\t\t     false);\n       break;\n \n     case OPT_fauto_profile_:\n@@ -2548,8 +2527,7 @@ common_handle_option (struct gcc_options *opts,\n       /* FALLTHRU */\n     case OPT_fauto_profile:\n       enable_fdo_optimizations (opts, opts_set, value);\n-      if (!opts_set->x_flag_profile_correction)\n-\topts->x_flag_profile_correction = value;\n+      SET_OPTION_IF_UNSET (opts, opts_set, flag_profile_correction, value);\n       SET_OPTION_IF_UNSET (opts, opts_set,\n \t\t\t   param_early_inliner_max_iterations, 10);\n       break;\n@@ -2560,19 +2538,14 @@ common_handle_option (struct gcc_options *opts,\n       /* No break here - do -fprofile-generate processing. */\n       /* FALLTHRU */\n     case OPT_fprofile_generate:\n-      if (!opts_set->x_profile_arc_flag)\n-\topts->x_profile_arc_flag = value;\n-      if (!opts_set->x_flag_profile_values)\n-\topts->x_flag_profile_values = value;\n-      if (!opts_set->x_flag_inline_functions)\n-\topts->x_flag_inline_functions = value;\n-      if (!opts_set->x_flag_ipa_bit_cp)\n-\topts->x_flag_ipa_bit_cp = value;\n+      SET_OPTION_IF_UNSET (opts, opts_set, profile_arc_flag, value);\n+      SET_OPTION_IF_UNSET (opts, opts_set, flag_profile_values, value);\n+      SET_OPTION_IF_UNSET (opts, opts_set, flag_inline_functions, value);\n+      SET_OPTION_IF_UNSET (opts, opts_set, flag_ipa_bit_cp, value);\n       /* FIXME: Instrumentation we insert makes ipa-reference bitmaps\n \t quadratic.  Disable the pass until better memory representation\n \t is done.  */\n-      if (!opts_set->x_flag_ipa_reference)\n-        opts->x_flag_ipa_reference = false;\n+      SET_OPTION_IF_UNSET (opts, opts_set, flag_ipa_reference, false);\n       break;\n \n     case OPT_fpatchable_function_entry_:"}]}