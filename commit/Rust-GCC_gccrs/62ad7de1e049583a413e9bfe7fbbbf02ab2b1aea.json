{"sha": "62ad7de1e049583a413e9bfe7fbbbf02ab2b1aea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjJhZDdkZTFlMDQ5NTgzYTQxM2U5YmZlN2ZiYmJmMDJhYjJiMWFlYQ==", "commit": {"author": {"name": "Bryce McKinlay", "email": "bryce@mckinlay.net.nz", "date": "2003-08-07T06:30:16Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2003-08-07T06:30:16Z"}, "message": "re PR libgcj/10868 (java.net.ServerSocket's constructors create and leak extra sockets)\n\n\t* java/net/Socket.java (Socket (SocketImpl)): Don't allow null\n\tSocketImpl. Update Javadoc.\n\t(bind): Call close() not impl.close() in event of exception.\n\t(connect): Likewise.\n\tRemove superfluous null checks throughout.\n\t* java/net/ServerSocket.java (ServerSocket (int, int, InetAddress)):\n\tDon't create an extra socket. Fix for PR libgcj/10868.\n\t(bind): Clean up exception handling.\n\tRemove superfluous null checks throughout.\n\nFrom-SVN: r70219", "tree": {"sha": "ac19591df1828db5dd120609de724f7fb980f668", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac19591df1828db5dd120609de724f7fb980f668"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62ad7de1e049583a413e9bfe7fbbbf02ab2b1aea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62ad7de1e049583a413e9bfe7fbbbf02ab2b1aea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62ad7de1e049583a413e9bfe7fbbbf02ab2b1aea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62ad7de1e049583a413e9bfe7fbbbf02ab2b1aea/comments", "author": null, "committer": null, "parents": [{"sha": "fdc49e10e69a5f250b6784c77c3617fb853e5634", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdc49e10e69a5f250b6784c77c3617fb853e5634", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdc49e10e69a5f250b6784c77c3617fb853e5634"}], "stats": {"total": 166, "additions": 32, "deletions": 134}, "files": [{"sha": "25cc0b9e314b46f197dc708069cd09da7d7c45db", "filename": "libjava/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62ad7de1e049583a413e9bfe7fbbbf02ab2b1aea/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62ad7de1e049583a413e9bfe7fbbbf02ab2b1aea/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=62ad7de1e049583a413e9bfe7fbbbf02ab2b1aea", "patch": "@@ -1,3 +1,15 @@\n+2003-08-07  Bryce McKinlay  <bryce@mckinlay.net.nz>\n+\n+\t* java/net/Socket.java (Socket (SocketImpl)): Don't allow null\n+\tSocketImpl. Update Javadoc.\n+\t(bind): Call close() not impl.close() in event of exception.\n+\t(connect): Likewise.\n+\tRemove superfluous null checks throughout.\n+\t* java/net/ServerSocket.java (ServerSocket (int, int, InetAddress)):\n+\tDon't create an extra socket. Fix for PR libgcj/10868.\n+\t(bind): Clean up exception handling.\n+\tRemove superfluous null checks throughout.\n+\n 2003-08-07  Jacob Gladish <gladish@spinnakernet.com>\n             Bryce McKinlay  <bryce@mckinlay.net.nz>\n "}, {"sha": "3614354f227af73222d7db327902fe03bd908c36", "filename": "libjava/java/net/ServerSocket.java", "status": "modified", "additions": 5, "deletions": 50, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62ad7de1e049583a413e9bfe7fbbbf02ab2b1aea/libjava%2Fjava%2Fnet%2FServerSocket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62ad7de1e049583a413e9bfe7fbbbf02ab2b1aea/libjava%2Fjava%2Fnet%2FServerSocket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FServerSocket.java?ref=62ad7de1e049583a413e9bfe7fbbbf02ab2b1aea", "patch": "@@ -154,12 +154,6 @@ public ServerSocket (int port, int backlog, InetAddress bindAddr)\n   {\n     this();\n \n-    if (impl == null)\n-      throw new IOException(\"Cannot initialize Socket implementation\");\n-\n-    // create socket\n-    impl.create(true);\n-\n     // bind/listen socket\n     bind (new InetSocketAddress (bindAddr, port), backlog);\n   }\n@@ -208,9 +202,6 @@ public void bind (SocketAddress endpoint, int backlog) throws IOException\n     if (closed)\n       throw new SocketException (\"ServerSocket is closed\");\n     \n-    if (impl == null)\n-      throw new IOException (\"Cannot initialize Socket implementation\");\n-\n     if (! (endpoint instanceof InetSocketAddress))\n       throw new IllegalArgumentException (\"Address type not supported\");\n \n@@ -220,45 +211,24 @@ public void bind (SocketAddress endpoint, int backlog) throws IOException\n     if (s != null)\n       s.checkListen (tmp.getPort ());\n \n-    // bind to address/port\n     try\n       {\n-    impl.bind (tmp.getAddress (), tmp.getPort ());\n+\timpl.bind (tmp.getAddress (), tmp.getPort ());\n+\timpl.listen(backlog);\n       }\n     catch (IOException exception)\n       {\n-        impl.close();\n+        close();\n         throw exception;\n       }\n     catch (RuntimeException exception)\n       {\n-        impl.close();\n+        close();\n         throw exception;\n       }\n     catch (Error error)\n       {\n-        impl.close();\n-        throw error;\n-      }\n-\n-    // listen on socket\n-    try\n-      {\n-    impl.listen(backlog);\n-  }\n-    catch (IOException exception)\n-      {\n-        impl.close();\n-        throw exception;\n-      }\n-    catch (RuntimeException exception)\n-      {\n-        impl.close();\n-        throw exception;\n-      }\n-    catch (Error error)\n-      {\n-        impl.close();\n+        close();\n         throw error;\n       }\n   }\n@@ -320,9 +290,6 @@ public SocketAddress getLocalSocketAddress()\n    */\n   public Socket accept () throws IOException\n   {\n-    if (impl == null)\n-      throw new IOException (\"Cannot initialize Socket implementation\");\n-\n     SecurityManager sm = System.getSecurityManager ();\n     if (sm != null)\n       sm.checkListen (impl.getLocalPort ());\n@@ -466,9 +433,6 @@ public int getSoTimeout () throws IOException\n   public void setReuseAddress (boolean on)\n     throws SocketException\n   {\n-    if (impl == null)\n-      throw new SocketException (\"Cannot initialize Socket implementation\");\n-\n     impl.setOption (SocketOptions.SO_REUSEADDR, new Boolean (on));\n   }\n \n@@ -482,9 +446,6 @@ public void setReuseAddress (boolean on)\n   public boolean getReuseAddress()\n     throws SocketException\n   {\n-    if (impl == null)\n-      throw new SocketException (\"Cannot initialize Socket implementation\");\n-\n     Object reuseaddr = impl.getOption (SocketOptions.SO_REUSEADDR);\n \n     if (!(reuseaddr instanceof Boolean))\n@@ -508,9 +469,6 @@ public boolean getReuseAddress()\n   public void setReceiveBufferSize (int size)\n     throws SocketException\n   {\n-    if (impl == null)\n-      throw new SocketException (\"Not connected\");\n-\n     if (size <= 0)\n       throw new IllegalArgumentException (\"SO_RCVBUF value must be > 0\");\n \n@@ -531,9 +489,6 @@ public void setReceiveBufferSize (int size)\n   public int getReceiveBufferSize ()\n     throws SocketException\n   {\n-    if (impl == null)\n-      throw new SocketException (\"Not connected\");\n-\n     Object buf = impl.getOption (SocketOptions.SO_RCVBUF);\n \n     if (!(buf instanceof Integer))"}, {"sha": "c2615164d3926212f30206e429ebc1692d1a6b49", "filename": "libjava/java/net/Socket.java", "status": "modified", "additions": 15, "deletions": 84, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62ad7de1e049583a413e9bfe7fbbbf02ab2b1aea/libjava%2Fjava%2Fnet%2FSocket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62ad7de1e049583a413e9bfe7fbbbf02ab2b1aea/libjava%2Fjava%2Fnet%2FSocket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FSocket.java?ref=62ad7de1e049583a413e9bfe7fbbbf02ab2b1aea", "patch": "@@ -82,8 +82,8 @@\n    */\n   SocketImpl impl;\n \n-  private boolean inputShutdown;\n-  private boolean outputShutdown;\n+  private boolean inputShutdown = false;\n+  private boolean outputShutdown = false;\n \n   SocketChannel ch; // this field must have been set if created by SocketChannel\n \n@@ -103,9 +103,6 @@ public Socket ()\n       impl = factory.createSocketImpl();\n     else\n       impl = new PlainSocketImpl();\n-\n-    inputShutdown = false;\n-    outputShutdown = false;\n   }\n \n   /**\n@@ -115,9 +112,8 @@ public Socket ()\n    * <p>\n    * Additionally, this socket will be created using the supplied\n    * implementation class instead the default class or one returned by a\n-   * factory.  This value can be <code>null</code>, but if it is, all instance\n-   * methods in <code>Socket</code> should be overridden because most of them\n-   * rely on this value being populated.\n+   * factory.  If this value is <code>null</code>, the default Socket\n+   * implementation is used.\n    *\n    * @param impl The <code>SocketImpl</code> to use for this\n    *             <code>Socket</code>\n@@ -128,9 +124,10 @@ public Socket ()\n    */\n   protected Socket (SocketImpl impl) throws SocketException\n   {\n-    this.impl = impl;\n-    this.inputShutdown = false;\n-    this.outputShutdown = false;\n+    if (impl == null)\n+      this.impl = new PlainSocketImpl();\n+    else\n+      this.impl = impl;\n   }\n \n   /**\n@@ -282,12 +279,6 @@ private Socket(InetAddress raddr, int rport, InetAddress laddr, int lport,\n   {\n     this();\n \n-    if (raddr == null)\n-      throw new NullPointerException ();\n-    \n-    if (impl == null)\n-      throw new IOException(\"Cannot initialize Socket implementation\");\n-\n     SecurityManager sm = System.getSecurityManager();\n     if (sm != null)\n       sm.checkConnect(raddr.getHostName(), rport);\n@@ -351,17 +342,17 @@ public void bind (SocketAddress bindpoint) throws IOException\n       }\n     catch (IOException exception)\n       {\n-        impl.close ();\n+        close ();\n         throw exception;\n       }\n     catch (RuntimeException exception)\n       {\n-        impl.close ();\n+        close ();\n         throw exception;\n       }\n     catch (Error error)\n       {\n-        impl.close ();\n+        close ();\n         throw error;\n       }\n   }\n@@ -420,17 +411,17 @@ public void connect (SocketAddress endpoint, int timeout)\n       }\n     catch (IOException exception)\n       {\n-        impl.close ();\n+        close ();\n         throw exception;\n       }\n     catch (RuntimeException exception)\n       {\n-        impl.close ();\n+        close ();\n         throw exception;\n       }\n     catch (Error error)\n       {\n-        impl.close ();\n+        close ();\n         throw error;\n       }\n   }\n@@ -443,10 +434,7 @@ public void connect (SocketAddress endpoint, int timeout)\n    */\n   public InetAddress getInetAddress ()\n   {\n-    if (impl != null)\n-      return impl.getInetAddress();\n-\n-    return null;\n+    return impl.getInetAddress();\n   }\n \n   /**\n@@ -459,9 +447,6 @@ public InetAddress getInetAddress ()\n    */\n   public InetAddress getLocalAddress ()\n   {\n-    if (impl == null)\n-      return null;\n-\n     InetAddress addr = null;\n     try\n       {\n@@ -586,9 +571,6 @@ public OutputStream getOutputStream () throws IOException\n    */\n   public void setTcpNoDelay (boolean on)  throws SocketException\n   {\n-    if (impl == null)\n-      throw new SocketException(\"Not connected\");\n-\n     impl.setOption(SocketOptions.TCP_NODELAY, new Boolean(on));\n   }\n \n@@ -606,9 +588,6 @@ public void setTcpNoDelay (boolean on)  throws SocketException\n    */\n   public boolean getTcpNoDelay() throws SocketException\n   {\n-    if (impl == null)\n-      throw new SocketException(\"Not connected\");\n-\n     Object on = impl.getOption(SocketOptions.TCP_NODELAY);\n   \n     if (on instanceof Boolean)\n@@ -636,9 +615,6 @@ public boolean getTcpNoDelay() throws SocketException\n    */\n   public void setSoLinger(boolean on, int linger) throws SocketException\n   {\n-    if (impl == null)\n-      throw new SocketException(\"No socket created\");\n-\n     if (on == true)\n       {\n         if (linger < 0)\n@@ -673,9 +649,6 @@ public void setSoLinger(boolean on, int linger) throws SocketException\n    */\n   public int getSoLinger() throws SocketException\n   {\n-    if (impl == null)\n-      throw new SocketException(\"Not connected\");\n-\n     Object linger = impl.getOption(SocketOptions.SO_LINGER);\n     if (linger instanceof Integer)\n       return(((Integer)linger).intValue());\n@@ -709,9 +682,6 @@ public void sendUrgentData (int data) throws IOException\n    */\n   public void setOOBInline (boolean on) throws SocketException\n   {\n-    if (impl == null)\n-      throw new SocketException(\"Not connected\");\n-\n     impl.setOption(SocketOptions.SO_OOBINLINE, new Boolean(on));\n   }\n \n@@ -724,9 +694,6 @@ public void setOOBInline (boolean on) throws SocketException\n    */\n   public boolean getOOBInline () throws SocketException\n   {\n-    if (impl == null)\n-      throw new SocketException(\"Not connected\");\n-\n     Object buf = impl.getOption(SocketOptions.SO_OOBINLINE);\n \n     if (buf instanceof Boolean)\n@@ -754,9 +721,6 @@ public boolean getOOBInline () throws SocketException\n    */\n   public synchronized void setSoTimeout (int timeout) throws SocketException\n   {\n-    if (impl == null)\n-      throw new SocketException(\"Not connected\");\n-    \n     if (timeout < 0)\n       throw new IllegalArgumentException(\"SO_TIMEOUT value must be >= 0\");\n       \n@@ -782,9 +746,6 @@ public synchronized void setSoTimeout (int timeout) throws SocketException\n    */\n   public synchronized int getSoTimeout () throws SocketException\n   {\n-    if (impl == null) \n-      throw new SocketException(\"Not connected\");\n-\n     Object timeout = impl.getOption(SocketOptions.SO_TIMEOUT);\n     if (timeout instanceof Integer)\n       return(((Integer)timeout).intValue());\n@@ -806,9 +767,6 @@ public synchronized int getSoTimeout () throws SocketException\n    */\n   public void setSendBufferSize (int size) throws SocketException\n   {\n-    if (impl == null)\n-      throw new SocketException(\"Not connected\");\n-    \n     if (size <= 0)\n       throw new IllegalArgumentException(\"SO_SNDBUF value must be > 0\");\n     \n@@ -828,9 +786,6 @@ public void setSendBufferSize (int size) throws SocketException\n    */\n   public int getSendBufferSize () throws SocketException\n   {\n-    if (impl == null)\n-      throw new SocketException(\"Not connected\");\n-\n     Object buf = impl.getOption(SocketOptions.SO_SNDBUF);\n \n     if (buf instanceof Integer)\n@@ -853,9 +808,6 @@ public int getSendBufferSize () throws SocketException\n    */\n   public void setReceiveBufferSize (int size) throws SocketException\n   {\n-    if (impl == null)\n-      throw new SocketException(\"Not connected\");\n-\n     if (size <= 0)\n       throw new IllegalArgumentException(\"SO_RCVBUF value must be > 0\");\n       \n@@ -875,9 +827,6 @@ public void setReceiveBufferSize (int size) throws SocketException\n    */\n   public int getReceiveBufferSize () throws SocketException\n   {\n-    if (impl == null)\n-      throw new SocketException(\"Not connected\");\n-\n     Object buf = impl.getOption(SocketOptions.SO_RCVBUF);\n \n     if (buf instanceof Integer)\n@@ -898,9 +847,6 @@ public int getReceiveBufferSize () throws SocketException\n    */\n   public void setKeepAlive (boolean on) throws SocketException\n   {\n-    if (impl == null)\n-      throw new SocketException(\"Not connected\");\n-\n     impl.setOption(SocketOptions.SO_KEEPALIVE, new Boolean(on));\n   }\n \n@@ -916,9 +862,6 @@ public void setKeepAlive (boolean on) throws SocketException\n    */\n   public boolean getKeepAlive () throws SocketException\n   {\n-    if (impl == null)\n-      throw new SocketException(\"Not connected\");\n-\n     Object buf = impl.getOption(SocketOptions.SO_KEEPALIVE);\n \n     if (buf instanceof Boolean)\n@@ -1037,9 +980,6 @@ public SocketChannel getChannel()\n    */\n   public boolean getReuseAddress () throws SocketException\n   {\n-    if (impl == null)\n-      throw new SocketException (\"Cannot initialize Socket implementation\");\n-\n     Object reuseaddr = impl.getOption (SocketOptions.SO_REUSEADDR);\n \n     if (!(reuseaddr instanceof Boolean))\n@@ -1057,9 +997,6 @@ public boolean getReuseAddress () throws SocketException\n    */\n   public void setReuseAddress (boolean on) throws SocketException\n   {\n-    if (impl == null)\n-      throw new SocketException (\"Cannot initialize Socket implementation\");\n-\n     impl.setOption (SocketOptions.SO_REUSEADDR, new Boolean (on));\n   }\n \n@@ -1074,9 +1011,6 @@ public void setReuseAddress (boolean on) throws SocketException\n    */\n   public int getTrafficClass () throws SocketException\n   {\n-    if (impl == null)\n-      throw new SocketException (\"Cannot initialize Socket implementation\");\n-\n     Object obj = impl.getOption(SocketOptions.IP_TOS);\n \n     if (obj instanceof Integer)\n@@ -1099,9 +1033,6 @@ public int getTrafficClass () throws SocketException\n    */\n   public void setTrafficClass (int tc) throws SocketException\n   {\n-    if (impl == null)\n-      throw new SocketException (\"Cannot initialize Socket implementation\");\n-\n     if (tc < 0 || tc > 255)\n       throw new IllegalArgumentException();\n "}]}