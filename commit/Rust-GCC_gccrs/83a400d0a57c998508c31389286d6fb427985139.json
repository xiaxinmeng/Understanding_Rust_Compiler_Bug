{"sha": "83a400d0a57c998508c31389286d6fb427985139", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODNhNDAwZDBhNTdjOTk4NTA4YzMxMzg5Mjg2ZDZmYjQyNzk4NTEzOQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2018-07-31T14:21:28Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-07-31T14:21:28Z"}, "message": "[04/46] Factor out the test for a valid reduction input\n\nvect_is_slp_reduction and vect_is_simple_reduction had two instances\neach of:\n\n              && (is_gimple_assign (def_stmt)\n                  || is_gimple_call (def_stmt)\n                  || STMT_VINFO_DEF_TYPE (vinfo_for_stmt (def_stmt))\n                           == vect_induction_def\n                  || (gimple_code (def_stmt) == GIMPLE_PHI\n                      && STMT_VINFO_DEF_TYPE (vinfo_for_stmt (def_stmt))\n                                  == vect_internal_def\n                      && !is_loop_header_bb_p (gimple_bb (def_stmt)))))\n\nThis patch splits it out in a subroutine.\n\n2018-07-31  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* tree-vect-loop.c (vect_valid_reduction_input_p): New function,\n\tsplit out from...\n\t(vect_is_slp_reduction): ...here...\n\t(vect_is_simple_reduction): ...and here.  Remove repetition of tests\n\tthat are already known to be false.\n\nFrom-SVN: r263119", "tree": {"sha": "5551e43e4a609503e06b309ca98dc586c9cac420", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5551e43e4a609503e06b309ca98dc586c9cac420"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83a400d0a57c998508c31389286d6fb427985139", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83a400d0a57c998508c31389286d6fb427985139", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83a400d0a57c998508c31389286d6fb427985139", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83a400d0a57c998508c31389286d6fb427985139/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6e2dd807c2aaaba8906a36766b9f98dfbeddc27d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e2dd807c2aaaba8906a36766b9f98dfbeddc27d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e2dd807c2aaaba8906a36766b9f98dfbeddc27d"}], "stats": {"total": 65, "additions": 29, "deletions": 36}, "files": [{"sha": "122d99f6e4a9a2e8d7c068afc5f1d39ce0b40b80", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83a400d0a57c998508c31389286d6fb427985139/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83a400d0a57c998508c31389286d6fb427985139/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=83a400d0a57c998508c31389286d6fb427985139", "patch": "@@ -1,3 +1,11 @@\n+2018-07-31  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vect-loop.c (vect_valid_reduction_input_p): New function,\n+\tsplit out from...\n+\t(vect_is_slp_reduction): ...here...\n+\t(vect_is_simple_reduction): ...and here.  Remove repetition of tests\n+\tthat are already known to be false.\n+\n 2018-07-31  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* tree-vectorizer.h (vect_free_slp_instance): Add a final_p parameter."}, {"sha": "dbb14ee805aa7d641c80425ec912d2e36579393b", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 21, "deletions": 36, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83a400d0a57c998508c31389286d6fb427985139/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83a400d0a57c998508c31389286d6fb427985139/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=83a400d0a57c998508c31389286d6fb427985139", "patch": "@@ -2501,6 +2501,21 @@ report_vect_op (dump_flags_t msg_type, gimple *stmt, const char *msg)\n   dump_gimple_stmt (msg_type, TDF_SLIM, stmt, 0);\n }\n \n+/* DEF_STMT occurs in a loop that contains a potential reduction operation.\n+   Return true if the results of DEF_STMT are something that can be\n+   accumulated by such a reduction.  */\n+\n+static bool\n+vect_valid_reduction_input_p (gimple *def_stmt)\n+{\n+  stmt_vec_info def_stmt_info = vinfo_for_stmt (def_stmt);\n+  return (is_gimple_assign (def_stmt)\n+\t  || is_gimple_call (def_stmt)\n+\t  || STMT_VINFO_DEF_TYPE (def_stmt_info) == vect_induction_def\n+\t  || (gimple_code (def_stmt) == GIMPLE_PHI\n+\t      && STMT_VINFO_DEF_TYPE (def_stmt_info) == vect_internal_def\n+\t      && !is_loop_header_bb_p (gimple_bb (def_stmt))));\n+}\n \n /* Detect SLP reduction of the form:\n \n@@ -2624,16 +2639,9 @@ vect_is_slp_reduction (loop_vec_info loop_info, gimple *phi,\n \t     (\"vect_internal_def\"), or it's an induction (defined by a\n \t     loop-header phi-node).  */\n           if (def_stmt\n-              && gimple_bb (def_stmt)\n+\t      && gimple_bb (def_stmt)\n \t      && flow_bb_inside_loop_p (loop, gimple_bb (def_stmt))\n-              && (is_gimple_assign (def_stmt)\n-                  || is_gimple_call (def_stmt)\n-                  || STMT_VINFO_DEF_TYPE (vinfo_for_stmt (def_stmt))\n-                           == vect_induction_def\n-                  || (gimple_code (def_stmt) == GIMPLE_PHI\n-                      && STMT_VINFO_DEF_TYPE (vinfo_for_stmt (def_stmt))\n-                                  == vect_internal_def\n-                      && !is_loop_header_bb_p (gimple_bb (def_stmt)))))\n+\t      && vect_valid_reduction_input_p (def_stmt))\n \t    {\n \t      lhs = gimple_assign_lhs (next_stmt);\n \t      next_stmt = REDUC_GROUP_NEXT_ELEMENT (vinfo_for_stmt (next_stmt));\n@@ -2654,16 +2662,9 @@ vect_is_slp_reduction (loop_vec_info loop_info, gimple *phi,\n             (\"vect_internal_def\"), or it's an induction (defined by a\n             loop-header phi-node).  */\n           if (def_stmt\n-              && gimple_bb (def_stmt)\n+\t      && gimple_bb (def_stmt)\n \t      && flow_bb_inside_loop_p (loop, gimple_bb (def_stmt))\n-              && (is_gimple_assign (def_stmt)\n-                  || is_gimple_call (def_stmt)\n-                  || STMT_VINFO_DEF_TYPE (vinfo_for_stmt (def_stmt))\n-                              == vect_induction_def\n-                  || (gimple_code (def_stmt) == GIMPLE_PHI\n-                      && STMT_VINFO_DEF_TYPE (vinfo_for_stmt (def_stmt))\n-                                  == vect_internal_def\n-                      && !is_loop_header_bb_p (gimple_bb (def_stmt)))))\n+\t      && vect_valid_reduction_input_p (def_stmt))\n   \t    {\n \t      if (dump_enabled_p ())\n \t\t{\n@@ -3196,15 +3197,7 @@ vect_is_simple_reduction (loop_vec_info loop_info, gimple *phi,\n       && (code == COND_EXPR\n \t  || !def1 || gimple_nop_p (def1)\n \t  || !flow_bb_inside_loop_p (loop, gimple_bb (def1))\n-          || (def1 && flow_bb_inside_loop_p (loop, gimple_bb (def1))\n-              && (is_gimple_assign (def1)\n-\t\t  || is_gimple_call (def1)\n-  \t          || STMT_VINFO_DEF_TYPE (vinfo_for_stmt (def1))\n-                      == vect_induction_def\n-   \t          || (gimple_code (def1) == GIMPLE_PHI\n-\t              && STMT_VINFO_DEF_TYPE (vinfo_for_stmt (def1))\n-                          == vect_internal_def\n- \t              && !is_loop_header_bb_p (gimple_bb (def1)))))))\n+\t  || vect_valid_reduction_input_p (def1)))\n     {\n       if (dump_enabled_p ())\n \treport_vect_op (MSG_NOTE, def_stmt, \"detected reduction: \");\n@@ -3215,15 +3208,7 @@ vect_is_simple_reduction (loop_vec_info loop_info, gimple *phi,\n       && (code == COND_EXPR\n \t  || !def2 || gimple_nop_p (def2)\n \t  || !flow_bb_inside_loop_p (loop, gimple_bb (def2))\n-\t  || (def2 && flow_bb_inside_loop_p (loop, gimple_bb (def2))\n-\t      && (is_gimple_assign (def2)\n-\t\t  || is_gimple_call (def2)\n-\t\t  || STMT_VINFO_DEF_TYPE (vinfo_for_stmt (def2))\n-\t\t       == vect_induction_def\n-\t\t  || (gimple_code (def2) == GIMPLE_PHI\n-\t\t      && STMT_VINFO_DEF_TYPE (vinfo_for_stmt (def2))\n-\t\t\t   == vect_internal_def\n-\t\t      && !is_loop_header_bb_p (gimple_bb (def2)))))))\n+\t  || vect_valid_reduction_input_p (def2)))\n     {\n       if (! nested_in_vect_loop && orig_code != MINUS_EXPR)\n \t{"}]}