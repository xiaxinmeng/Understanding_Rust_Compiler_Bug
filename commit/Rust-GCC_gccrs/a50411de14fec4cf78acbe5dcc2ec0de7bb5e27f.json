{"sha": "a50411de14fec4cf78acbe5dcc2ec0de7bb5e27f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTUwNDExZGUxNGZlYzRjZjc4YWNiZTVkY2MyZWMwZGU3YmI1ZTI3Zg==", "commit": {"author": {"name": "Andrew Pinski", "email": "andrew_pinski@playstation.sony.com", "date": "2007-05-21T23:08:54Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2007-05-21T23:08:54Z"}, "message": "re PR tree-optimization/31995 (can't determine dependence between p->a[x+i] and p->a[x+i+1])\n\n2007-05-21  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n\n        PR middle-end/31995\n        * tree-chrec.c (evolution_function_is_affine_multivariate_p):\n        Add loopno argument.  Use evolution_function_is_invariant_rec_p\n        instead of evolution_function_is_constant_p.\n        Update calls to evolution_function_is_affine_multivariate_p.\n        * tree-chrec.h  (evolution_function_is_affine_multivariate_p):\n        Add loopno argument.\n        * tree-scalar-evolution.c (gather_chrec_stats): Call\n        evolution_function_is_affine_multivariate_p with a  loop\n        number of 0.\n        * tree-data-ref.c (analyze_miv_subscript): Likewise.\n        (analyze_overlapping_iterations): Likewise.\n        (access_functions_are_affine_or_constant_p):\n        Likewise.\n        (build_classic_dist_vector_1): If the access functions\n        are equal, don't do anything.\n\n2007-05-21  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n\n        PR middle-end/31995\n        * gcc.dg/vect/vect-102a.c: New test.\n\nFrom-SVN: r124927", "tree": {"sha": "4a5af0fdf3986135df36eb2ffebfc49af9eaab2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a5af0fdf3986135df36eb2ffebfc49af9eaab2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a50411de14fec4cf78acbe5dcc2ec0de7bb5e27f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a50411de14fec4cf78acbe5dcc2ec0de7bb5e27f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a50411de14fec4cf78acbe5dcc2ec0de7bb5e27f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a50411de14fec4cf78acbe5dcc2ec0de7bb5e27f/comments", "author": null, "committer": null, "parents": [{"sha": "60c4429c7e517425d5e43c688b720516a5338648", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60c4429c7e517425d5e43c688b720516a5338648", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60c4429c7e517425d5e43c688b720516a5338648"}], "stats": {"total": 113, "additions": 97, "deletions": 16}, "files": [{"sha": "857a5fa5d49582aeea2f72fb84edaa5b8cea6829", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a50411de14fec4cf78acbe5dcc2ec0de7bb5e27f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a50411de14fec4cf78acbe5dcc2ec0de7bb5e27f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a50411de14fec4cf78acbe5dcc2ec0de7bb5e27f", "patch": "@@ -1,3 +1,22 @@\n+2007-05-21  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n+\n+\tPR middle-end/31995\n+\t* tree-chrec.c (evolution_function_is_affine_multivariate_p):\n+\tAdd loopno argument.  Use evolution_function_is_invariant_rec_p\n+\tinstead of evolution_function_is_constant_p.\n+\tUpdate calls to evolution_function_is_affine_multivariate_p.\n+\t* tree-chrec.h  (evolution_function_is_affine_multivariate_p):\n+\tAdd loopno argument.\n+\t* tree-scalar-evolution.c (gather_chrec_stats): Call\n+\tevolution_function_is_affine_multivariate_p with a  loop\n+\tnumber of 0.\n+\t* tree-data-ref.c (analyze_miv_subscript): Likewise.\n+\t(analyze_overlapping_iterations): Likewise.\n+\t(access_functions_are_affine_or_constant_p):\n+\tLikewise.\n+\t(build_classic_dist_vector_1): If the access functions\n+\tare equal, don't do anything.\n+\n 2007-05-21  Paolo Bonzini  <bonzini@gnu.org>\n             Paolo Carlini  <pcarlini@suse.de>\n \t    Uros Bizjak  <ubizjak@gmail.com>"}, {"sha": "e46cf78feb922c2d0b367c017239a5cdb3f5a472", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a50411de14fec4cf78acbe5dcc2ec0de7bb5e27f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a50411de14fec4cf78acbe5dcc2ec0de7bb5e27f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a50411de14fec4cf78acbe5dcc2ec0de7bb5e27f", "patch": "@@ -1,3 +1,8 @@\n+2007-05-21  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n+\n+\tPR middle-end/31995\n+\t* gcc.dg/vect/vect-102a.c: New test.\n+\n 2007-05-21  Paolo Bonzini  <bonzini@gnu.org>\n             Paolo Carlini  <pcarlini@suse.de>\n \t    Uros Bizjak  <ubizjak@gmail.com>"}, {"sha": "35023fc65dcc662c69b50cd70ff5439b1badb009", "filename": "gcc/testsuite/gcc.dg/vect/vect-102a.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a50411de14fec4cf78acbe5dcc2ec0de7bb5e27f/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-102a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a50411de14fec4cf78acbe5dcc2ec0de7bb5e27f/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-102a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-102a.c?ref=a50411de14fec4cf78acbe5dcc2ec0de7bb5e27f", "patch": "@@ -0,0 +1,57 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include <stdlib.h>\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 9\n+\n+struct extraction\n+{\n+  int a[N];\n+  int b[N];\n+};\n+\n+static int a[N] = {1,2,3,4,5,6,7,8,9};\n+static int b[N] = {2,3,4,5,6,7,8,9,9};\n+volatile int foo;\n+\n+int main1 (int x, int y) {\n+  int i;\n+  struct extraction *p;\n+  p = (struct extraction *) malloc (sizeof (struct extraction));\n+\n+  for (i = 0; i < N; i++)\n+    {\n+       p->a[i] = a[i];\n+       if (foo == 135)\n+\t abort (); /* to avoid vectorization  */\n+    }\n+\n+  /* Not vectorizable: distance 1.  */\n+  for (i = 0; i < N - 1; i++)\n+    {\n+       p->a[x + i] = p->a[x + i + 1];\n+    }\n+\n+  /* check results: */\n+  for (i = 0; i < N; i++)\n+    {\n+       if (p->a[i] != b[i])\n+         abort();\n+    }\n+  return 0;\n+}\n+\n+int main (void)\n+{ \n+  check_vect ();\n+\n+  foo = 0;\n+  return main1 (0, N);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 0 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"possible dependence between data-refs\" 1 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */\n+"}, {"sha": "45bee574f85795dea117a467963e7d2f57e4dcef", "filename": "gcc/tree-chrec.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a50411de14fec4cf78acbe5dcc2ec0de7bb5e27f/gcc%2Ftree-chrec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a50411de14fec4cf78acbe5dcc2ec0de7bb5e27f/gcc%2Ftree-chrec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-chrec.c?ref=a50411de14fec4cf78acbe5dcc2ec0de7bb5e27f", "patch": "@@ -987,37 +987,37 @@ evolution_function_is_invariant_p (tree chrec, int loopnum)\n    evolution.  */\n \n bool \n-evolution_function_is_affine_multivariate_p (tree chrec)\n+evolution_function_is_affine_multivariate_p (tree chrec, int loopnum)\n {\n   if (chrec == NULL_TREE)\n     return false;\n   \n   switch (TREE_CODE (chrec))\n     {\n     case POLYNOMIAL_CHREC:\n-      if (evolution_function_is_constant_p (CHREC_LEFT (chrec)))\n+      if (evolution_function_is_invariant_rec_p (CHREC_LEFT (chrec), loopnum))\n \t{\n-\t  if (evolution_function_is_constant_p (CHREC_RIGHT (chrec)))\n+\t  if (evolution_function_is_invariant_rec_p (CHREC_RIGHT (chrec), loopnum))\n \t    return true;\n \t  else\n \t    {\n \t      if (TREE_CODE (CHREC_RIGHT (chrec)) == POLYNOMIAL_CHREC\n \t\t  && CHREC_VARIABLE (CHREC_RIGHT (chrec)) \n \t\t     != CHREC_VARIABLE (chrec)\n \t\t  && evolution_function_is_affine_multivariate_p \n-\t\t  (CHREC_RIGHT (chrec)))\n+\t\t  (CHREC_RIGHT (chrec), loopnum))\n \t\treturn true;\n \t      else\n \t\treturn false;\n \t    }\n \t}\n       else\n \t{\n-\t  if (evolution_function_is_constant_p (CHREC_RIGHT (chrec))\n+\t  if (evolution_function_is_invariant_rec_p (CHREC_RIGHT (chrec), loopnum)\n \t      && TREE_CODE (CHREC_LEFT (chrec)) == POLYNOMIAL_CHREC\n \t      && CHREC_VARIABLE (CHREC_LEFT (chrec)) != CHREC_VARIABLE (chrec)\n \t      && evolution_function_is_affine_multivariate_p \n-\t      (CHREC_LEFT (chrec)))\n+\t      (CHREC_LEFT (chrec), loopnum))\n \t    return true;\n \t  else\n \t    return false;"}, {"sha": "75ef41b112ac9f9d5aa7a9e2fd7054e6a4eb695c", "filename": "gcc/tree-chrec.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a50411de14fec4cf78acbe5dcc2ec0de7bb5e27f/gcc%2Ftree-chrec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a50411de14fec4cf78acbe5dcc2ec0de7bb5e27f/gcc%2Ftree-chrec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-chrec.h?ref=a50411de14fec4cf78acbe5dcc2ec0de7bb5e27f", "patch": "@@ -79,7 +79,7 @@ extern bool chrec_contains_symbols (tree);\n extern bool chrec_contains_symbols_defined_in_loop (tree, unsigned);\n extern bool chrec_contains_undetermined (tree);\n extern bool tree_contains_chrecs (tree, int *);\n-extern bool evolution_function_is_affine_multivariate_p (tree);\n+extern bool evolution_function_is_affine_multivariate_p (tree, int);\n extern bool evolution_function_is_univariate_p (tree);\n extern unsigned nb_vars_in_chrec (tree);\n "}, {"sha": "6fa59e8a299f196b6ed64bc8d804bfabd0d1733b", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a50411de14fec4cf78acbe5dcc2ec0de7bb5e27f/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a50411de14fec4cf78acbe5dcc2ec0de7bb5e27f/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=a50411de14fec4cf78acbe5dcc2ec0de7bb5e27f", "patch": "@@ -2458,7 +2458,7 @@ analyze_miv_subscript (tree chrec_a,\n   \n   else if (evolution_function_is_constant_p (difference)\n \t   /* For the moment, the following is verified:\n-\t      evolution_function_is_affine_multivariate_p (chrec_a) */\n+\t      evolution_function_is_affine_multivariate_p (chrec_a, 0) */\n \t   && !gcd_of_steps_may_divide_p (chrec_a, difference))\n     {\n       /* testsuite/.../ssa-chrec-33.c\n@@ -2472,9 +2472,9 @@ analyze_miv_subscript (tree chrec_a,\n       dependence_stats.num_miv_independent++;\n     }\n   \n-  else if (evolution_function_is_affine_multivariate_p (chrec_a)\n+  else if (evolution_function_is_affine_multivariate_p (chrec_a, 0)\n \t   && !chrec_contains_symbols (chrec_a)\n-\t   && evolution_function_is_affine_multivariate_p (chrec_b)\n+\t   && evolution_function_is_affine_multivariate_p (chrec_b, 0)\n \t   && !chrec_contains_symbols (chrec_b))\n     {\n       /* testsuite/.../ssa-chrec-35.c\n@@ -2563,7 +2563,7 @@ analyze_overlapping_iterations (tree chrec_a,\n   /* If they are the same chrec, and are affine, they overlap \n      on every iteration.  */\n   else if (eq_evolutions_p (chrec_a, chrec_b)\n-\t   && evolution_function_is_affine_multivariate_p (chrec_a))\n+\t   && evolution_function_is_affine_multivariate_p (chrec_a, 0))\n     {\n       dependence_stats.num_same_subscript_function++;\n       *overlap_iterations_a = conflict_fn (1, affine_fn_cst (integer_zero_node));\n@@ -2575,8 +2575,8 @@ analyze_overlapping_iterations (tree chrec_a,\n      yet. */\n   else if ((chrec_contains_symbols (chrec_a) \n \t    || chrec_contains_symbols (chrec_b))\n-\t   && (!evolution_function_is_affine_multivariate_p (chrec_a)\n-\t       || !evolution_function_is_affine_multivariate_p (chrec_b)))\n+\t   && (!evolution_function_is_affine_multivariate_p (chrec_a, 0)\n+\t       || !evolution_function_is_affine_multivariate_p (chrec_b, 0)))\n     {\n       dependence_stats.num_subscript_undetermined++;\n       *overlap_iterations_a = conflict_fn_not_known ();\n@@ -2745,7 +2745,7 @@ build_classic_dist_vector_1 (struct data_dependence_relation *ddr,\n \t  init_v[index] = 1;\n \t  *init_b = true;\n \t}\n-      else\n+      else if (!operand_equal_p (access_fn_a, access_fn_b, 0))\n \t{\n \t  /* This can be for example an affine vs. constant dependence\n \t     (T[i] vs. T[3]) that is not an affine dependence and is\n@@ -3182,7 +3182,7 @@ access_functions_are_affine_or_constant_p (struct data_reference *a)\n \n   for (i = 0; VEC_iterate (tree, fns, i, t); i++)\n     if (!evolution_function_is_constant_p (t)\n-\t&& !evolution_function_is_affine_multivariate_p (t))\n+\t&& !evolution_function_is_affine_multivariate_p (t, 0))\n       return false;\n   \n   return true;"}, {"sha": "eb45529e8f2169d60fc9db7beef9f0da24db2298", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a50411de14fec4cf78acbe5dcc2ec0de7bb5e27f/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a50411de14fec4cf78acbe5dcc2ec0de7bb5e27f/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=a50411de14fec4cf78acbe5dcc2ec0de7bb5e27f", "patch": "@@ -2615,7 +2615,7 @@ gather_chrec_stats (tree chrec, struct chrec_stats *stats)\n \t    fprintf (dump_file, \"  affine_univariate\\n\");\n \t  stats->nb_affine++;\n \t}\n-      else if (evolution_function_is_affine_multivariate_p (chrec))\n+      else if (evolution_function_is_affine_multivariate_p (chrec, 0))\n \t{\n \t  if (dump_file && (dump_flags & TDF_STATS))\n \t    fprintf (dump_file, \"  affine_multivariate\\n\");"}]}