{"sha": "161b0a84ef14b9eeef2ba1d865a5056a0a7d3130", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTYxYjBhODRlZjE0YjllZWVmMmJhMWQ4NjVhNTA1NmEwYTdkMzEzMA==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "rakdver@atrey.karlin.mff.cuni.cz", "date": "2004-06-15T22:15:21Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2004-06-15T22:15:21Z"}, "message": "df.c (df_reg_clobber_gen): Removed.\n\n\t* df.c (df_reg_clobber_gen): Removed.\n\t(df_bb_rd_local_compute, df_insn_refs_record, df_rd_local_compute):\n\tMake more effective for hard regs.\n\t* ra-build.c (livethrough_conflicts_bb): Check contains_call.\n\nFrom-SVN: r83204", "tree": {"sha": "6b7da30f1e3569457f48c0e246dd0f7eec146356", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b7da30f1e3569457f48c0e246dd0f7eec146356"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/161b0a84ef14b9eeef2ba1d865a5056a0a7d3130", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/161b0a84ef14b9eeef2ba1d865a5056a0a7d3130", "html_url": "https://github.com/Rust-GCC/gccrs/commit/161b0a84ef14b9eeef2ba1d865a5056a0a7d3130", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/161b0a84ef14b9eeef2ba1d865a5056a0a7d3130/comments", "author": null, "committer": null, "parents": [{"sha": "40bc204a9b045fb4ddcd4412dddf93cdea720a2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40bc204a9b045fb4ddcd4412dddf93cdea720a2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40bc204a9b045fb4ddcd4412dddf93cdea720a2e"}], "stats": {"total": 90, "additions": 57, "deletions": 33}, "files": [{"sha": "83d64c54326d7bdff39692d5ba55feea83fcbdb7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/161b0a84ef14b9eeef2ba1d865a5056a0a7d3130/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/161b0a84ef14b9eeef2ba1d865a5056a0a7d3130/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=161b0a84ef14b9eeef2ba1d865a5056a0a7d3130", "patch": "@@ -1,3 +1,10 @@\n+2004-06-15  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>\n+\n+\t* df.c (df_reg_clobber_gen): Removed.\n+\t(df_bb_rd_local_compute, df_insn_refs_record, df_rd_local_compute):\n+\tMake more effective for hard regs.\n+\t* ra-build.c (livethrough_conflicts_bb): Check contains_call.\n+\n 2004-06-15  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* c-pragma.h (c_lex_string_translate): Change type to int."}, {"sha": "2fa65c351b427ea8138738e184c9a20ddf6183c5", "filename": "gcc/df.c", "status": "modified", "additions": 47, "deletions": 32, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/161b0a84ef14b9eeef2ba1d865a5056a0a7d3130/gcc%2Fdf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/161b0a84ef14b9eeef2ba1d865a5056a0a7d3130/gcc%2Fdf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf.c?ref=161b0a84ef14b9eeef2ba1d865a5056a0a7d3130", "patch": "@@ -243,7 +243,7 @@ static void df_bb_du_chain_create (struct df *, basic_block, bitmap);\n static void df_du_chain_create (struct df *, bitmap);\n static void df_bb_ud_chain_create (struct df *, basic_block);\n static void df_ud_chain_create (struct df *, bitmap);\n-static void df_bb_rd_local_compute (struct df *, basic_block);\n+static void df_bb_rd_local_compute (struct df *, basic_block, bitmap);\n static void df_rd_local_compute (struct df *, bitmap);\n static void df_bb_ru_local_compute (struct df *, basic_block);\n static void df_ru_local_compute (struct df *, bitmap);\n@@ -604,19 +604,6 @@ static rtx df_reg_use_gen (unsigned int regno)\n   use = gen_rtx_USE (GET_MODE (reg), reg);\n   return use;\n }\n-\n-\n-/* Return a CLOBBER for register REGNO.  */\n-static rtx df_reg_clobber_gen (unsigned int regno)\n-{\n-  rtx reg;\n-  rtx use;\n-\n-  reg = regno_reg_rtx[regno];\n-\n-  use = gen_rtx_CLOBBER (GET_MODE (reg), reg);\n-  return use;\n-}\n \f\n /* Local chain manipulation routines.  */\n \n@@ -1221,16 +1208,11 @@ df_insn_refs_record (struct df *df, basic_block bb, rtx insn)\n \t{\n \t  rtx note;\n \n-\t  if (df->flags & DF_HARD_REGS)\n-\t    {\n-\t      /* Kill all registers invalidated by a call.  */\n-\t      for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n-\t\tif (TEST_HARD_REG_BIT (regs_invalidated_by_call, i))\n-\t\t  {\n-\t\t    rtx reg_clob = df_reg_clobber_gen (i);\n-\t\t    df_defs_record (df, reg_clob, bb, insn);\n-\t\t  }\n-\t    }\n+\t  /* We do not record hard registers clobbered by the call,\n+\t     since there are awfully many of them and \"defs\" created\n+\t     through them are not interesting (since no use can be legally\n+\t     reached by them).  So we must just make sure we include them when\n+\t     computing kill bitmaps.  */\n \n \t  /* There may be extra registers to be clobbered.  */\n \t  for (note = CALL_INSN_FUNCTION_USAGE (insn);\n@@ -1629,13 +1611,14 @@ df_lr_transfer_function (int bb ATTRIBUTE_UNUSED, int *changed, void *in,\n \n /* Compute local reaching def info for basic block BB.  */\n static void\n-df_bb_rd_local_compute (struct df *df, basic_block bb)\n+df_bb_rd_local_compute (struct df *df, basic_block bb, bitmap call_killed_defs)\n {\n   struct bb_info *bb_info = DF_BB_INFO (df, bb);\n   rtx insn;\n+  bitmap seen = BITMAP_XMALLOC ();\n+  bool call_seen = false;\n \n-  for (insn = BB_HEAD (bb); insn && insn != NEXT_INSN (BB_END (bb));\n-       insn = NEXT_INSN (insn))\n+  FOR_BB_INSNS_REVERSE (bb, insn)\n     {\n       unsigned int uid = INSN_UID (insn);\n       struct df_link *def_link;\n@@ -1649,6 +1632,12 @@ df_bb_rd_local_compute (struct df *df, basic_block bb)\n \t  unsigned int regno = DF_REF_REGNO (def);\n \t  struct df_link *def2_link;\n \n+\t  if (bitmap_bit_p (seen, regno)\n+\t      || (call_seen\n+\t\t  && regno < FIRST_PSEUDO_REGISTER\n+\t\t  && TEST_HARD_REG_BIT (regs_invalidated_by_call, regno)))\n+\t    continue;\n+\n \t  for (def2_link = df->regs[regno].defs; def2_link;\n \t       def2_link = def2_link->next)\n \t    {\n@@ -1659,16 +1648,21 @@ df_bb_rd_local_compute (struct df *df, basic_block bb)\n \t\t be killed by this BB but it keeps things a lot\n \t\t simpler.  */\n \t      bitmap_set_bit (bb_info->rd_kill, DF_REF_ID (def2));\n-\n-\t      /* Zap from the set of gens for this BB.  */\n-\t      bitmap_clear_bit (bb_info->rd_gen, DF_REF_ID (def2));\n \t    }\n \n \t  bitmap_set_bit (bb_info->rd_gen, DF_REF_ID (def));\n+\t  bitmap_set_bit (seen, regno);\n+\t}\n+\n+      if (GET_CODE (insn) == CALL_INSN && (df->flags & DF_HARD_REGS))\n+\t{\n+\t  bitmap_operation (bb_info->rd_kill, bb_info->rd_kill,\n+\t\t\t    call_killed_defs, BITMAP_IOR);\n+\t  call_seen = 1;\n \t}\n     }\n \n-  bb_info->rd_valid = 1;\n+  BITMAP_XFREE (seen);\n }\n \n \n@@ -1677,11 +1671,32 @@ static void\n df_rd_local_compute (struct df *df, bitmap blocks)\n {\n   basic_block bb;\n+  bitmap killed_by_call = NULL;\n+  unsigned regno;\n+  struct df_link *def_link;\n+\n+  if (df->flags & DF_HARD_REGS)\n+    {\n+      killed_by_call = BITMAP_XMALLOC ();\n+      for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\n+\t{\n+\t  if (!TEST_HARD_REG_BIT (regs_invalidated_by_call, regno))\n+\t    continue;\n+\t  \n+\t  for (def_link = df->regs[regno].defs;\n+\t       def_link;\n+\t       def_link = def_link->next)\n+\t    bitmap_set_bit (killed_by_call, DF_REF_ID (def_link->ref));\n+\t}\n+    }\n \n   FOR_EACH_BB_IN_BITMAP (blocks, 0, bb,\n   {\n-    df_bb_rd_local_compute (df, bb);\n+    df_bb_rd_local_compute (df, bb, killed_by_call);\n   });\n+\n+  if (df->flags & DF_HARD_REGS)\n+    BITMAP_XFREE (killed_by_call);\n }\n \n "}, {"sha": "698ff4c3fb49ee71cabe9b886013eaa42ee14cc7", "filename": "gcc/ra-build.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/161b0a84ef14b9eeef2ba1d865a5056a0a7d3130/gcc%2Fra-build.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/161b0a84ef14b9eeef2ba1d865a5056a0a7d3130/gcc%2Fra-build.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fra-build.c?ref=161b0a84ef14b9eeef2ba1d865a5056a0a7d3130", "patch": "@@ -1054,7 +1054,9 @@ livethrough_conflicts_bb (basic_block bb)\n \n   /* And now, if we have found anything, make all live_through\n      uses conflict with all defs, and update their other members.  */\n-  if (deaths > 0 || bitmap_first_set_bit (all_defs) >= 0)\n+  if (deaths > 0\n+      || contains_call\n+      || bitmap_first_set_bit (all_defs) >= 0)\n     EXECUTE_IF_SET_IN_BITMAP (info->live_throughout, first, use_id,\n       {\n         struct web_part *wp = &web_parts[df->def_id + use_id];"}]}