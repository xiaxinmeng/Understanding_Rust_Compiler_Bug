{"sha": "1dbaf0d99c37024dcfafa73366c32a206e8f21a2", "node_id": "C_kwDOANBUbNoAKDFkYmFmMGQ5OWMzNzAyNGRjZmFmYTczMzY2YzMyYTIwNmU4ZjIxYTI", "commit": {"author": {"name": "Steve Baird", "email": "baird@adacore.com", "date": "2022-07-25T23:03:10Z"}, "committer": {"name": "Marc Poulhi\u00e8s", "email": "poulhies@adacore.com", "date": "2022-09-06T07:14:21Z"}, "message": "[Ada] Temporarily simplify legality checks for Inox case statements\n\nINOX (which is enabled via -gnatX) supports composite case-statement selectors.\nAs a temporary measure, simplify the coverage-related compile-time checks\nfor such case statements via two changes: an others choice is always\nrequired for such a case statement, and no legality checks relating to\noverlapping of case choices are performed.\n\ngcc/ada/\n\n\t* sem_case.adb: Define a new Boolean constant,\n\tSimplified_Composite_Coverage_Rules, initialized to True. Setting\n\tthis constant to True has two effects: 1- Representative value\n\tsets are not fully initialized - this is done to avoid capacity\n\tproblems, as well as for performance. 2- In\n\tCheck_Case_Pattern_Choices, the only legality check performed is a\n\tcheck that a \"when others =>\" choice is present.", "tree": {"sha": "368f72ea73cb64e1b13f848a2fcfc344317310f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/368f72ea73cb64e1b13f848a2fcfc344317310f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1dbaf0d99c37024dcfafa73366c32a206e8f21a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dbaf0d99c37024dcfafa73366c32a206e8f21a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1dbaf0d99c37024dcfafa73366c32a206e8f21a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dbaf0d99c37024dcfafa73366c32a206e8f21a2/comments", "author": {"login": "swbaird", "id": 50751052, "node_id": "MDQ6VXNlcjUwNzUxMDUy", "avatar_url": "https://avatars.githubusercontent.com/u/50751052?v=4", "gravatar_id": "", "url": "https://api.github.com/users/swbaird", "html_url": "https://github.com/swbaird", "followers_url": "https://api.github.com/users/swbaird/followers", "following_url": "https://api.github.com/users/swbaird/following{/other_user}", "gists_url": "https://api.github.com/users/swbaird/gists{/gist_id}", "starred_url": "https://api.github.com/users/swbaird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/swbaird/subscriptions", "organizations_url": "https://api.github.com/users/swbaird/orgs", "repos_url": "https://api.github.com/users/swbaird/repos", "events_url": "https://api.github.com/users/swbaird/events{/privacy}", "received_events_url": "https://api.github.com/users/swbaird/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96c20bf1e971f1fb41b4d6852888cc0dea9db009", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96c20bf1e971f1fb41b4d6852888cc0dea9db009", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96c20bf1e971f1fb41b4d6852888cc0dea9db009"}], "stats": {"total": 27, "additions": 23, "deletions": 4}, "files": [{"sha": "2810d3e3f9d879a6cb75721ecbc43706018359d9", "filename": "gcc/ada/sem_case.adb", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dbaf0d99c37024dcfafa73366c32a206e8f21a2/gcc%2Fada%2Fsem_case.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dbaf0d99c37024dcfafa73366c32a206e8f21a2/gcc%2Fada%2Fsem_case.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_case.adb?ref=1dbaf0d99c37024dcfafa73366c32a206e8f21a2", "patch": "@@ -106,6 +106,14 @@ package body Sem_Case is\n \n    package Composite_Case_Ops is\n \n+      Simplified_Composite_Coverage_Rules : constant Boolean := True;\n+      --  Indicates that, as a temporary stopgap, we implement\n+      --  simpler coverage-checking rules when casing on a\n+      --  composite selector:\n+      --     1) Require that an Others choice must be given, regardless\n+      --        of whether all possible values are covered explicitly.\n+      --     2) No legality checks regarding overlapping choices.\n+\n       function Box_Value_Required (Subtyp : Entity_Id) return Boolean;\n       --  If result is True, then the only allowed value (in a choice\n       --  aggregate) for a component of this (sub)type is a box. This rule\n@@ -263,7 +271,6 @@ package body Sem_Case is\n          type Bound_Values is array (Positive range <>) of Node_Id;\n \n       end Choice_Analysis;\n-\n    end Composite_Case_Ops;\n \n    procedure Expand_Others_Choice\n@@ -2526,6 +2533,14 @@ package body Sem_Case is\n                for P in Part_Id loop\n                   Insert_Representative (Component_Bounds (P).Low, P);\n                end loop;\n+\n+               if Simplified_Composite_Coverage_Rules then\n+                  --  Omit other representative values to avoid capacity\n+                  --  problems building data structures only used in\n+                  --  compile-time checks that will not be performed.\n+                  return Result;\n+               end if;\n+\n                for C of Choices_Bounds loop\n                   if not C.Is_Others then\n                      for P in Part_Id loop\n@@ -3368,8 +3383,6 @@ package body Sem_Case is\n          --------------------------------\n \n          procedure Check_Case_Pattern_Choices is\n-            --  ??? Need to Free/Finalize value sets allocated here.\n-\n             package Ops is new Composite_Case_Ops.Choice_Analysis\n               (Case_Statement => N);\n             use Ops;\n@@ -3394,8 +3407,14 @@ package body Sem_Case is\n \n                Covered : Value_Set := Empty;\n                --  The union of all alternatives seen so far\n-\n             begin\n+               if Composite_Case_Ops.Simplified_Composite_Coverage_Rules then\n+                  if not (for some Choice of Info => Choice.Is_Others) then\n+                     Error_Msg_N (\"others choice required\", N);\n+                  end if;\n+                  return;\n+               end if;\n+\n                for Choice of Info loop\n                   if Choice.Is_Others then\n                      Others_Seen := True;"}]}