{"sha": "345dffd0d4ebff7e705dfff1a8a72017a167120a", "node_id": "C_kwDOANBUbNoAKDM0NWRmZmQwZDRlYmZmN2U3MDVkZmZmMWE4YTcyMDE3YTE2NzEyMGE", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-01-04T09:54:38Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-01-04T09:54:38Z"}, "message": "generic-match-head: Don't assume GENERIC folding is done only early [PR108237]\n\nWe ICE on the following testcase, because a valid V2DImode\n!= comparison is folded into an unsupported V2DImode > comparison.\nThe match.pd pattern which does this looks like:\n/* Transform comparisons of the form (X & Y) CMP 0 to X CMP2 Z\n   where ~Y + 1 == pow2 and Z = ~Y.  */\n(for cst (VECTOR_CST INTEGER_CST)\n (for cmp (eq ne)\n      icmp (le gt)\n  (simplify\n   (cmp (bit_and:c@2 @0 cst@1) integer_zerop)\n    (with { tree csts = bitmask_inv_cst_vector_p (@1); }\n     (if (csts && (VECTOR_TYPE_P (TREE_TYPE (@1)) || single_use (@2)))\n      (with { auto optab = VECTOR_TYPE_P (TREE_TYPE (@1))\n                         ? optab_vector : optab_default;\n              tree utype = unsigned_type_for (TREE_TYPE (@1)); }\n       (if (target_supports_op_p (utype, icmp, optab)\n            || (optimize_vectors_before_lowering_p ()\n                && (!target_supports_op_p (type, cmp, optab)\n                    || !target_supports_op_p (type, BIT_AND_EXPR, optab))))\n        (if (TYPE_UNSIGNED (TREE_TYPE (@1)))\n         (icmp @0 { csts; })\n         (icmp (view_convert:utype @0) { csts; })))))))))\nand that optimize_vectors_before_lowering_p () guarded stuff there\nalready deals with this problem, not trying to fold a supported comparison\ninto a non-supported one.  The reason it doesn't work in this case is that\nit isn't GIMPLE folding which does this, but GENERIC folding done during\nforwprop4 - forward_propagate_into_comparison -> forward_propagate_into_comparison_1\n-> combine_cond_expr_cond -> fold_binary_loc -> generic_simplify\nand we simply assumed that GENERIC folding happens only before\ngimplification.\n\nThe following patch fixes that by checking cfun properties instead of\nalways returning true in those cases.\n\n2023-01-04  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR middle-end/108237\n\t* generic-match-head.cc: Include tree-pass.h.\n\t(canonicalize_math_p, optimize_vectors_before_lowering_p): Define\n\tto false if cfun and cfun->curr_properties has PROP_gimple_opt_math\n\tresp. PROP_gimple_lvec property set.\n\n\t* gcc.c-torture/compile/pr108237.c: New test.", "tree": {"sha": "d7e3dfdcb265446d2eb9d5180623ae79c60156e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7e3dfdcb265446d2eb9d5180623ae79c60156e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/345dffd0d4ebff7e705dfff1a8a72017a167120a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/345dffd0d4ebff7e705dfff1a8a72017a167120a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/345dffd0d4ebff7e705dfff1a8a72017a167120a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/345dffd0d4ebff7e705dfff1a8a72017a167120a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8692b15ae7c05e3224f285069e070c009d9f6efe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8692b15ae7c05e3224f285069e070c009d9f6efe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8692b15ae7c05e3224f285069e070c009d9f6efe"}], "stats": {"total": 19, "additions": 17, "deletions": 2}, "files": [{"sha": "f011204c5be450663231bdece0596317b37f9f9b", "filename": "gcc/generic-match-head.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/345dffd0d4ebff7e705dfff1a8a72017a167120a/gcc%2Fgeneric-match-head.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/345dffd0d4ebff7e705dfff1a8a72017a167120a/gcc%2Fgeneric-match-head.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgeneric-match-head.cc?ref=345dffd0d4ebff7e705dfff1a8a72017a167120a", "patch": "@@ -40,6 +40,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm.h\"\n #include \"tree-eh.h\"\n #include \"langhooks.h\"\n+#include \"tree-pass.h\"\n \n /* Routine to determine if the types T1 and T2 are effectively\n    the same for GENERIC.  If T1 or T2 is not a type, the test\n@@ -71,7 +72,7 @@ single_use (tree t ATTRIBUTE_UNUSED)\n static inline bool\n canonicalize_math_p ()\n {\n-  return true;\n+  return !cfun || (cfun->curr_properties & PROP_gimple_opt_math) == 0;\n }\n \n /* Return true if math operations that are beneficial only after\n@@ -90,7 +91,7 @@ canonicalize_math_after_vectorization_p ()\n static inline bool\n optimize_vectors_before_lowering_p ()\n {\n-  return true;\n+  return !cfun || (cfun->curr_properties & PROP_gimple_lvec) == 0;\n }\n \n /* Return true if successive divisions can be optimized."}, {"sha": "52b7f9d177f3a8af1588b564698d760943d7e181", "filename": "gcc/testsuite/gcc.c-torture/compile/pr108237.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/345dffd0d4ebff7e705dfff1a8a72017a167120a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr108237.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/345dffd0d4ebff7e705dfff1a8a72017a167120a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr108237.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr108237.c?ref=345dffd0d4ebff7e705dfff1a8a72017a167120a", "patch": "@@ -0,0 +1,14 @@\n+/* PR middle-end/108237 */\n+\n+typedef unsigned char __attribute__((__vector_size__ (1))) U;\n+typedef unsigned long long __attribute__((__vector_size__ (16))) V;\n+\n+U u;\n+V v;\n+\n+V\n+foo (void)\n+{\n+  V w = v != ((unsigned char) ((unsigned char) u == u) & v);\n+  return w;\n+}"}]}