{"sha": "bfa28724748054a50075ce6f39b18c5ce111c73c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmZhMjg3MjQ3NDgwNTRhNTAwNzVjZTZmMzliMThjNWNlMTExYzczYw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2018-02-01T18:44:41Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2018-02-01T18:44:41Z"}, "message": "PR c++/84126 - ICE with variadic generic lambda\n\n\tPR c++/84036\n\tPR c++/82249\n\t* pt.c (tsubst_pack_expansion): Handle function parameter_packs in\n\tPACK_EXPANSION_EXTRA_ARGS.\n\nFrom-SVN: r257307", "tree": {"sha": "5e44dbeaafb2ae29a6c4461ab649a19da05c0c4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e44dbeaafb2ae29a6c4461ab649a19da05c0c4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bfa28724748054a50075ce6f39b18c5ce111c73c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfa28724748054a50075ce6f39b18c5ce111c73c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfa28724748054a50075ce6f39b18c5ce111c73c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfa28724748054a50075ce6f39b18c5ce111c73c/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6a92e0534b50ca5e97b325137044b502cceff99e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a92e0534b50ca5e97b325137044b502cceff99e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a92e0534b50ca5e97b325137044b502cceff99e"}], "stats": {"total": 71, "additions": 68, "deletions": 3}, "files": [{"sha": "897774e43f7a21b3cf2d205143c76548137f4cea", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfa28724748054a50075ce6f39b18c5ce111c73c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfa28724748054a50075ce6f39b18c5ce111c73c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bfa28724748054a50075ce6f39b18c5ce111c73c", "patch": "@@ -1,3 +1,11 @@\n+2018-02-01  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/84126 - ICE with variadic generic lambda\n+\tPR c++/84036\n+\tPR c++/82249\n+\t* pt.c (tsubst_pack_expansion): Handle function parameter_packs in\n+\tPACK_EXPANSION_EXTRA_ARGS.\n+\n 2018-02-01  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/83796"}, {"sha": "5f14e51463836e340cbdf54059d0b65457d600fa", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfa28724748054a50075ce6f39b18c5ce111c73c/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfa28724748054a50075ce6f39b18c5ce111c73c/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=bfa28724748054a50075ce6f39b18c5ce111c73c", "patch": "@@ -3496,7 +3496,11 @@ extern void decl_shadowed_for_var_insert (tree, tree);\n     : &TYPE_MIN_VALUE_RAW (TYPE_PACK_EXPANSION_CHECK (NODE)))\n \n /* Any additional template args to be applied when substituting into\n-   the pattern, set by tsubst_pack_expansion for partial instantiations.  */\n+   the pattern, set by tsubst_pack_expansion for partial instantiations.\n+   If this is a TREE_LIST, the TREE_VALUE of the first element is the\n+   usual template argument TREE_VEC, and the TREE_PURPOSE of later elements\n+   are enclosing functions that provided function parameter packs we'll need\n+   to map appropriately.  */\n #define PACK_EXPANSION_EXTRA_ARGS(NODE)\t\t\\\n   *(TREE_CODE (NODE) == TYPE_PACK_EXPANSION\t\\\n     ? &TYPE_MAX_VALUE_RAW (NODE)\t\t\t\\"}, {"sha": "ca73bb18d973b496bd373aa6ce841405f23f6d9f", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfa28724748054a50075ce6f39b18c5ce111c73c/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfa28724748054a50075ce6f39b18c5ce111c73c/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=bfa28724748054a50075ce6f39b18c5ce111c73c", "patch": "@@ -11439,7 +11439,20 @@ tsubst_pack_expansion (tree t, tree args, tsubst_flags_t complain,\n   pattern = PACK_EXPANSION_PATTERN (t);\n \n   /* Add in any args remembered from an earlier partial instantiation.  */\n-  args = add_to_template_args (PACK_EXPANSION_EXTRA_ARGS (t), args);\n+  tree extra = PACK_EXPANSION_EXTRA_ARGS (t);\n+  if (extra && TREE_CODE (extra) == TREE_LIST)\n+    {\n+      /* The partial instantiation involved function parameter packs; map\n+         from the general template to our current context.  */\n+      for (tree fns = TREE_CHAIN (extra); fns; fns = TREE_CHAIN (fns))\n+\t{\n+\t  tree fn = TREE_PURPOSE (fns);\n+\t  tree inst = enclosing_instantiation_of (fn);\n+\t  register_parameter_specializations (fn, inst);\n+\t}\n+      extra = TREE_VALUE (extra);\n+    }\n+  args = add_to_template_args (extra, args);\n \n   levels = TMPL_ARGS_DEPTH (args);\n \n@@ -11610,7 +11623,28 @@ tsubst_pack_expansion (tree t, tree args, tsubst_flags_t complain,\n \t have values for all the packs.  So remember these until then.  */\n \n       t = make_pack_expansion (pattern, complain);\n-      PACK_EXPANSION_EXTRA_ARGS (t) = args;\n+      tree extra = args;\n+      if (unsubstituted_fn_pack)\n+\t{\n+\t  /* For function parameter packs it's more complicated; we need to\n+\t     remember which enclosing function(s) provided them to this pack\n+\t     expansion so we can map their parameters to the parameters of a\n+\t     later full instantiation.  */\n+\t  tree fns = NULL_TREE;\n+\t  for (tree p = packs; p; p = TREE_CHAIN (p))\n+\t    {\n+\t      tree parm = TREE_PURPOSE (p);\n+\t      if (TREE_CODE (parm) != PARM_DECL)\n+\t\tcontinue;\n+\t      parm = DECL_CONTEXT (parm);\n+\t      if (purpose_member (parm, fns))\n+\t\tcontinue;\n+\t      fns = tree_cons (parm, NULL_TREE, fns);\n+\t    }\n+\t  if (fns)\n+\t    extra = tree_cons (NULL_TREE, extra, fns);\n+\t}\n+      PACK_EXPANSION_EXTRA_ARGS (t) = extra;\n       return t;\n     }\n   else if (unsubstituted_packs)"}, {"sha": "1b3a6442efdfd00764e0bfe1828d6ca349a78598", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-generic-variadic9.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfa28724748054a50075ce6f39b18c5ce111c73c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-variadic9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfa28724748054a50075ce6f39b18c5ce111c73c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-variadic9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-variadic9.C?ref=bfa28724748054a50075ce6f39b18c5ce111c73c", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/84126\n+// { dg-do compile { target c++14 } }\n+\n+template <class... Ts>\n+void sink(Ts...);\n+\n+template <typename T>\n+int bar(T&); // ICE with reference, work with just T\n+\n+template <typename T >\n+void foo(T){\n+  [](auto ... k){\n+    sink (bar(k) ...);\n+  }(0);\n+}\n+\n+int main() {\n+  foo(0);\n+}"}]}