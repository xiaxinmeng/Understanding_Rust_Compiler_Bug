{"sha": "9f708a844853eb2fe87e696d27de14cbd68896f8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWY3MDhhODQ0ODUzZWIyZmU4N2U2OTZkMjdkZTE0Y2JkNjg4OTZmOA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-05-07T11:47:48Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-05-07T11:47:48Z"}, "message": "tree-vect-slp.c (vect_build_slp_tree_2): Bump size whenever we build a SLP node.\n\n2019-05-07  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vect-slp.c (vect_build_slp_tree_2): Bump size whenever\n\twe build a SLP node.  Remove max_size and limiting.\n\t(vect_analyze_slp_instance): Record and dump size of the SLP graph.\n\nFrom-SVN: r270941", "tree": {"sha": "75dbe00f5375687ddce15bfcbf6214b294b5c8f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75dbe00f5375687ddce15bfcbf6214b294b5c8f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f708a844853eb2fe87e696d27de14cbd68896f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f708a844853eb2fe87e696d27de14cbd68896f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f708a844853eb2fe87e696d27de14cbd68896f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f708a844853eb2fe87e696d27de14cbd68896f8/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3cf8b3e341b8424d7c34c918406bd37d2feb7407", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cf8b3e341b8424d7c34c918406bd37d2feb7407", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cf8b3e341b8424d7c34c918406bd37d2feb7407"}], "stats": {"total": 48, "additions": 21, "deletions": 27}, "files": [{"sha": "86f1287431b9b14f38c0c66c7b9a179096812724", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f708a844853eb2fe87e696d27de14cbd68896f8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f708a844853eb2fe87e696d27de14cbd68896f8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9f708a844853eb2fe87e696d27de14cbd68896f8", "patch": "@@ -1,3 +1,9 @@\n+2019-05-07  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-slp.c (vect_build_slp_tree_2): Bump size whenever\n+\twe build a SLP node.  Remove max_size and limiting.\n+\t(vect_analyze_slp_instance): Record and dump size of the SLP graph.\n+\n 2019-05-07  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/90316"}, {"sha": "2a1e5b83e53ae43c6491c5864b1649c37ad46e03", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 15, "deletions": 27, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f708a844853eb2fe87e696d27de14cbd68896f8/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f708a844853eb2fe87e696d27de14cbd68896f8/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=9f708a844853eb2fe87e696d27de14cbd68896f8", "patch": "@@ -1034,15 +1034,13 @@ vect_build_slp_tree_2 (vec_info *vinfo,\n \t\t       vec<stmt_vec_info> stmts, unsigned int group_size,\n \t\t       poly_uint64 *max_nunits,\n \t\t       bool *matches, unsigned *npermutes, unsigned *tree_size,\n-\t\t       unsigned max_tree_size,\n \t\t       scalar_stmts_to_slp_tree_map_t *bst_map);\n \n static slp_tree\n vect_build_slp_tree (vec_info *vinfo,\n \t\t     vec<stmt_vec_info> stmts, unsigned int group_size,\n \t\t     poly_uint64 *max_nunits,\n \t\t     bool *matches, unsigned *npermutes, unsigned *tree_size,\n-\t\t     unsigned max_tree_size,\n \t\t     scalar_stmts_to_slp_tree_map_t *bst_map)\n {\n   if (slp_tree *leader = bst_map->get (stmts))\n@@ -1055,8 +1053,7 @@ vect_build_slp_tree (vec_info *vinfo,\n       return *leader;\n     }\n   slp_tree res = vect_build_slp_tree_2 (vinfo, stmts, group_size, max_nunits,\n-\t\t\t\t\tmatches, npermutes, tree_size,\n-\t\t\t\t\tmax_tree_size, bst_map);\n+\t\t\t\t\tmatches, npermutes, tree_size, bst_map);\n   /* Keep a reference for the bst_map use.  */\n   if (res)\n     res->refcnt++;\n@@ -1076,7 +1073,6 @@ vect_build_slp_tree_2 (vec_info *vinfo,\n \t\t       vec<stmt_vec_info> stmts, unsigned int group_size,\n \t\t       poly_uint64 *max_nunits,\n \t\t       bool *matches, unsigned *npermutes, unsigned *tree_size,\n-\t\t       unsigned max_tree_size,\n \t\t       scalar_stmts_to_slp_tree_map_t *bst_map)\n {\n   unsigned nops, i, this_tree_size = 0;\n@@ -1135,6 +1131,7 @@ vect_build_slp_tree_2 (vec_info *vinfo,\n \t}\n       else\n \treturn NULL;\n+      (*tree_size)++;\n       node = vect_create_new_slp_node (stmts);\n       return node;\n     }\n@@ -1151,6 +1148,7 @@ vect_build_slp_tree_2 (vec_info *vinfo,\n       && DR_IS_READ (STMT_VINFO_DATA_REF (stmt_info)))\n     {\n       *max_nunits = this_max_nunits;\n+      (*tree_size)++;\n       node = vect_create_new_slp_node (stmts);\n       return node;\n     }\n@@ -1178,9 +1176,6 @@ vect_build_slp_tree_2 (vec_info *vinfo,\n \n   stmt_info = stmts[0];\n \n-  if (tree_size)\n-    max_tree_size -= *tree_size;\n-\n   /* Create SLP_TREE nodes for the definition node/s.  */\n   FOR_EACH_VEC_ELT (oprnds_info, i, oprnd_info)\n     {\n@@ -1193,23 +1188,10 @@ vect_build_slp_tree_2 (vec_info *vinfo,\n \t  && oprnd_info->first_dt != vect_induction_def)\n         continue;\n \n-      if (++this_tree_size > max_tree_size)\n-\t{\n-\t  if (dump_enabled_p ())\n-\t    dump_printf_loc (MSG_MISSED_OPTIMIZATION,\n-\t\t\t     vect_location,\n-\t\t\t     \"Build SLP failed: SLP tree too large\\n\");\n-\t  FOR_EACH_VEC_ELT (children, j, child)\n-\t    vect_free_slp_tree (child, false);\n-\t  vect_free_oprnd_info (oprnds_info);\n-\t  return NULL;\n-\t}\n-\n       if ((child = vect_build_slp_tree (vinfo, oprnd_info->def_stmts,\n \t\t\t\t\tgroup_size, &this_max_nunits,\n \t\t\t\t\tmatches, npermutes,\n-\t\t\t\t\t&this_tree_size,\n-\t\t\t\t\tmax_tree_size, bst_map)) != NULL)\n+\t\t\t\t\t&this_tree_size, bst_map)) != NULL)\n \t{\n \t  /* If we have all children of child built up from scalars then just\n \t     throw that away and build it up this node from scalars.  */\n@@ -1238,6 +1220,7 @@ vect_build_slp_tree_2 (vec_info *vinfo,\n \t\t\t\t     \"scalars instead\\n\");\n \t\t  oprnd_info->def_stmts = vNULL;\n \t\t  SLP_TREE_DEF_TYPE (child) = vect_external_def;\n+\t\t  ++this_tree_size;\n \t\t  children.safe_push (child);\n \t\t  continue;\n \t\t}\n@@ -1266,6 +1249,7 @@ vect_build_slp_tree_2 (vec_info *vinfo,\n \t  if (dump_enabled_p ())\n \t    dump_printf_loc (MSG_NOTE, vect_location,\n \t\t\t     \"Building vector operands from scalars\\n\");\n+\t  this_tree_size++;\n \t  child = vect_create_new_slp_node (oprnd_info->def_stmts);\n \t  SLP_TREE_DEF_TYPE (child) = vect_external_def;\n \t  children.safe_push (child);\n@@ -1355,8 +1339,7 @@ vect_build_slp_tree_2 (vec_info *vinfo,\n \t  if ((child = vect_build_slp_tree (vinfo, oprnd_info->def_stmts,\n \t\t\t\t\t    group_size, &this_max_nunits,\n \t\t\t\t\t    tem, npermutes,\n-\t\t\t\t\t    &this_tree_size,\n-\t\t\t\t\t    max_tree_size, bst_map)) != NULL)\n+\t\t\t\t\t    &this_tree_size, bst_map)) != NULL)\n \t    {\n \t      /* ... so if successful we can apply the operand swapping\n \t\t to the GIMPLE IL.  This is necessary because for example\n@@ -1411,6 +1394,7 @@ vect_build_slp_tree_2 (vec_info *vinfo,\n \t\t\t\t\t \"scalars instead\\n\");\n \t\t      oprnd_info->def_stmts = vNULL;\n \t\t      SLP_TREE_DEF_TYPE (child) = vect_external_def;\n+\t\t      ++this_tree_size;\n \t\t      children.safe_push (child);\n \t\t      continue;\n \t\t    }\n@@ -1434,8 +1418,7 @@ vect_build_slp_tree_2 (vec_info *vinfo,\n \n   vect_free_oprnd_info (oprnds_info);\n \n-  if (tree_size)\n-    *tree_size += this_tree_size;\n+  *tree_size += this_tree_size + 1;\n   *max_nunits = this_max_nunits;\n \n   node = vect_create_new_slp_node (stmts);\n@@ -1971,9 +1954,10 @@ vect_analyze_slp_instance (vec_info *vinfo,\n   scalar_stmts_to_slp_tree_map_t *bst_map\n     = new scalar_stmts_to_slp_tree_map_t ();\n   poly_uint64 max_nunits = nunits;\n+  unsigned tree_size = 0;\n   node = vect_build_slp_tree (vinfo, scalar_stmts, group_size,\n \t\t\t      &max_nunits, matches, &npermutes,\n-\t\t\t      NULL, max_tree_size, bst_map);\n+\t\t\t      &tree_size, bst_map);\n   /* The map keeps a reference on SLP nodes built, release that.  */\n   for (scalar_stmts_to_slp_tree_map_t::iterator it = bst_map->begin ();\n        it != bst_map->end (); ++it)\n@@ -2014,6 +1998,10 @@ vect_analyze_slp_instance (vec_info *vinfo,\n \t  SLP_INSTANCE_UNROLLING_FACTOR (new_instance) = unrolling_factor;\n \t  SLP_INSTANCE_LOADS (new_instance) = vNULL;\n \t  vect_gather_slp_loads (new_instance, node);\n+\t  if (dump_enabled_p ())\n+\t    dump_printf_loc (MSG_NOTE, vect_location,\n+\t\t\t     \"SLP size %u vs. limit %u.\\n\",\n+\t\t\t     tree_size, max_tree_size);\n \n \t  /* Compute the load permutation.  */\n \t  slp_tree load_node;"}]}