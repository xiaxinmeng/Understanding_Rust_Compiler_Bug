{"sha": "5ccf1d8d1073544f3d3c24e2168fc12e983dfa47", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWNjZjFkOGQxMDczNTQ0ZjNkM2MyNGUyMTY4ZmMxMmU5ODNkZmE0Nw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2017-01-07T21:33:59Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2017-01-07T21:33:59Z"}, "message": "Fix linemap corruption after very wide source lines (PR c++/72803)\n\nPR c++/72803 describes an issue where a fix-it hint is to be emitted at\ncolumn 512 of a 511-column source line, leading to an ICE.\n\nThe root cause is a bug in linemap_line_start, when transitioning from\nlines >= 512 in width to narrow lines.\n\nThe wide line in the reproducer has a line map with:\n  m_column_and_range_bits = 15, m_range_bits = 5\ngiving 10 effective bits for representing columns, so that columns <= 1023\ncan be represented.\n\nWhen parsing the following line,\n  linemap_line_start (..., ..., max_column_hint=0);\nis called.  This leads to the \"add_map\" logic, due to this condition:\n      || (max_column_hint <= 80 && effective_column_bits >= 10)\ni.e. the new line is sufficiently narrower than the old one to\npotentially use a new linemap (so as to conserve values within the\nlocation_t space).\n\nIt then attempts to avoid allocating a new line map.  Part of the logic\nto determine if we really need a new line map is this condition:\n   SOURCE_COLUMN (map, highest) >= (1U << column_bits)\nThe above condition is incorrect: we need to determine if the highest\ncolumn we've handed out will fit within the proposed *effective* column\nbits, but \"column_bits\" here is the column plus the range bits, rather\nthan just the column bits.\n\nHence in this case linemap_line_start erroneously decides that we don't\nneed a new line map, and updates the column bits within the existing\nline map, so any location_t values we've already handed out within it\nthat are offset from the start by\n  >= (1<<new_column_and_range_bits)\neffectively change meaning, leading to incorrect line&column information\nwhen decoding them, and various \"interesting\" ways for the linemap\ncode to fail.\n\nThe fix is to use the effective column bits in the above conditional.\n\ngcc/ChangeLog:\n\tPR c++/72803\n\t* input.c (selftest::test_accessing_ordinary_linemaps): Verify\n\tthat the transition from a max line width >= 1<<10 to narrower\n\tlines works correctly.\n\ngcc/testsuite/ChangeLog:\n\tPR c++/72803\n\t* g++.dg/diagnostic/pr72803.C: New test case.\n\nlibcpp/ChangeLog:\n\tPR c++/72803\n\t* line-map.c (linemap_line_start): When determining if the highest\n\tcolumn given out so far will fit into a proposed change to the\n\tcurrent map, use the effective number of column bits, rather than\n\tthe total number of column + range bits.\n\nFrom-SVN: r244199", "tree": {"sha": "d50cf2a1d95d451c655a244f774cbcdbb459d9df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d50cf2a1d95d451c655a244f774cbcdbb459d9df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ccf1d8d1073544f3d3c24e2168fc12e983dfa47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ccf1d8d1073544f3d3c24e2168fc12e983dfa47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ccf1d8d1073544f3d3c24e2168fc12e983dfa47", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ccf1d8d1073544f3d3c24e2168fc12e983dfa47/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ff98fa955b5dc98bb05e30ed79299155d2a2f97c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff98fa955b5dc98bb05e30ed79299155d2a2f97c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff98fa955b5dc98bb05e30ed79299155d2a2f97c"}], "stats": {"total": 43, "additions": 42, "deletions": 1}, "files": [{"sha": "38b6102f3f72d5e10a2273971063d20e8bf171e4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ccf1d8d1073544f3d3c24e2168fc12e983dfa47/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ccf1d8d1073544f3d3c24e2168fc12e983dfa47/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5ccf1d8d1073544f3d3c24e2168fc12e983dfa47", "patch": "@@ -1,3 +1,10 @@\n+2017-01-07  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/72803\n+\t* input.c (selftest::test_accessing_ordinary_linemaps): Verify\n+\tthat the transition from a max line width >= 1<<10 to narrower\n+\tlines works correctly.\n+\n 2017-01-07  Alexandre Oliva <aoliva@redhat.com>\n \n \t* doc/options.texi (PerFunction): New."}, {"sha": "bbb6abb8878b3588c3bd48fc03acf44d30dc85fd", "filename": "gcc/input.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ccf1d8d1073544f3d3c24e2168fc12e983dfa47/gcc%2Finput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ccf1d8d1073544f3d3c24e2168fc12e983dfa47/gcc%2Finput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finput.c?ref=5ccf1d8d1073544f3d3c24e2168fc12e983dfa47", "patch": "@@ -1688,6 +1688,17 @@ test_accessing_ordinary_linemaps (const line_table_case &case_)\n   linemap_line_start (line_table, 3, 2000);\n   location_t loc_e = linemap_position_for_column (line_table, 700);\n \n+  /* Transitioning back to a short line.  */\n+  linemap_line_start (line_table, 4, 0);\n+  location_t loc_back_to_short = linemap_position_for_column (line_table, 100);\n+\n+  if (should_have_column_data_p (loc_back_to_short))\n+    {\n+      /* Verify that we switched to short lines in the linemap.  */\n+      line_map_ordinary *map = LINEMAPS_LAST_ORDINARY_MAP (line_table);\n+      ASSERT_EQ (7, map->m_column_and_range_bits - map->m_range_bits);\n+    }\n+\n   linemap_add (line_table, LC_LEAVE, false, NULL, 0);\n \n   /* Multiple files.  */\n@@ -1702,6 +1713,7 @@ test_accessing_ordinary_linemaps (const line_table_case &case_)\n   assert_loceq (\"foo.c\", 2, 1, loc_c);\n   assert_loceq (\"foo.c\", 2, 17, loc_d);\n   assert_loceq (\"foo.c\", 3, 700, loc_e);\n+  assert_loceq (\"foo.c\", 4, 100, loc_back_to_short);\n   assert_loceq (\"bar.c\", 1, 150, loc_f);\n \n   ASSERT_FALSE (is_location_from_builtin_token (loc_a));"}, {"sha": "1f6100bd323e59ff319d31b2802b171690d389f7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ccf1d8d1073544f3d3c24e2168fc12e983dfa47/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ccf1d8d1073544f3d3c24e2168fc12e983dfa47/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5ccf1d8d1073544f3d3c24e2168fc12e983dfa47", "patch": "@@ -1,3 +1,8 @@\n+2017-01-07  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/72803\n+\t* g++.dg/diagnostic/pr72803.C: New test case.\n+\n 2017-01-07  Martin Sebor  <msebor@redhat.com>\n \n \t* gcc.dg/attr-alloc_size-3.c: Remove regex made redundant by r243461."}, {"sha": "0a9a390b9c33d523d49777b31b1dfaf98299c3e3", "filename": "gcc/testsuite/g++.dg/diagnostic/pr72803.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ccf1d8d1073544f3d3c24e2168fc12e983dfa47/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fpr72803.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ccf1d8d1073544f3d3c24e2168fc12e983dfa47/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fpr72803.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fpr72803.C?ref=5ccf1d8d1073544f3d3c24e2168fc12e983dfa47", "patch": "@@ -0,0 +1,9 @@\n+/* Long line, with a close brace at column 511, hence with the insertion\n+   point for the missing semicolon at column 512.  */\n+class test {                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  }\n+# 1 \"\" 1\n+// The line directive appears to be necessary to trigger the ICE\n+// { dg-error \"style of line directive is a GCC extension\" \"\" { target *-*-* } .-2 }\n+\n+/* Verify that we get the correct line and column for the diagnostic.  */\n+// { dg-error \"512: expected .;. after class definition\" \"\" { target *-*-* } 3 }"}, {"sha": "082291d56489b67595a9bc23b48ab6508d6cb26b", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ccf1d8d1073544f3d3c24e2168fc12e983dfa47/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ccf1d8d1073544f3d3c24e2168fc12e983dfa47/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=5ccf1d8d1073544f3d3c24e2168fc12e983dfa47", "patch": "@@ -1,3 +1,11 @@\n+2017-01-07  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/72803\n+\t* line-map.c (linemap_line_start): When determining if the highest\n+\tcolumn given out so far will fit into a proposed change to the\n+\tcurrent map, use the effective number of column bits, rather than\n+\tthe total number of column + range bits.\n+\n 2017-01-01  Jakub Jelinek  <jakub@redhat.com>\n \n \tUpdate copyright years."}, {"sha": "b410c00e36724523bf89794a186aa272547f3f5c", "filename": "libcpp/line-map.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ccf1d8d1073544f3d3c24e2168fc12e983dfa47/libcpp%2Fline-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ccf1d8d1073544f3d3c24e2168fc12e983dfa47/libcpp%2Fline-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fline-map.c?ref=5ccf1d8d1073544f3d3c24e2168fc12e983dfa47", "patch": "@@ -752,7 +752,7 @@ linemap_line_start (struct line_maps *set, linenum_type to_line,\n \t single line we can sometimes just increase its column_bits instead. */\n       if (line_delta < 0\n \t  || last_line != ORDINARY_MAP_STARTING_LINE_NUMBER (map)\n-\t  || SOURCE_COLUMN (map, highest) >= (1U << column_bits)\n+\t  || SOURCE_COLUMN (map, highest) >= (1U << (column_bits - range_bits))\n \t  || range_bits < map->m_range_bits)\n \tmap = linemap_check_ordinary\n \t        (const_cast <line_map *>"}]}