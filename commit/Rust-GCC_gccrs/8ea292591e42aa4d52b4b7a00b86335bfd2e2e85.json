{"sha": "8ea292591e42aa4d52b4b7a00b86335bfd2e2e85", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGVhMjkyNTkxZTQyYWE0ZDUyYjRiN2EwMGI4NjMzNWJmZDJlMmU4NQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-08-12T13:20:43Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-09-13T15:24:48Z"}, "message": "i386: support micro-levels in target{,_clone} attrs [PR101696]\n\nAs mentioned in the PR, we do miss supports target micro-architectures\nin target and target_clone attribute. While the levels\nx86-64 x86-64-v2 x86-64-v3 x86-64-v4 are supported values by -march\noption, they are actually only aliases for k8 CPU. That said, they are more\ncloser to __builtin_cpu_supports function and we decided to implement\nit there.\n\n\tPR target/101696\n\ngcc/ChangeLog:\n\n\t* common/config/i386/cpuinfo.h (cpu_indicator_init): Add support\n\tfor x86-64 micro levels for __builtin_cpu_supports.\n\t* common/config/i386/i386-cpuinfo.h (enum feature_priority):\n\tAdd priorities for the micro-arch levels.\n\t(enum processor_features): Add new features.\n\t* common/config/i386/i386-isas.h: Add micro-arch features.\n\t* config/i386/i386-builtins.c (get_builtin_code_for_version):\n\tSupport the micro-arch levels by callsing\n\t__builtin_cpu_supports.\n\t* doc/extend.texi: Document that the levels are support by\n\t  __builtin_cpu_supports.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.target/i386/mv30.C: New test.\n\t* gcc.target/i386/mvc16.c: New test.\n\t* gcc.target/i386/builtin_target.c (CHECK___builtin_cpu_supports):\n\tNew.\n\nCo-Authored-By: H.J. Lu <hjl.tools@gmail.com>", "tree": {"sha": "fb59f661f30741d2687da3d7196bea8d8673db90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb59f661f30741d2687da3d7196bea8d8673db90"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ea292591e42aa4d52b4b7a00b86335bfd2e2e85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ea292591e42aa4d52b4b7a00b86335bfd2e2e85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ea292591e42aa4d52b4b7a00b86335bfd2e2e85", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ea292591e42aa4d52b4b7a00b86335bfd2e2e85/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03312cbd54f337dfb25be356a1d1abc9925c6c03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03312cbd54f337dfb25be356a1d1abc9925c6c03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03312cbd54f337dfb25be356a1d1abc9925c6c03"}], "stats": {"total": 162, "additions": 159, "deletions": 3}, "files": [{"sha": "bbf29bdb1160c9ba654e9fc12f00e8d2948e6f98", "filename": "gcc/common/config/i386/cpuinfo.h", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ea292591e42aa4d52b4b7a00b86335bfd2e2e85/gcc%2Fcommon%2Fconfig%2Fi386%2Fcpuinfo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ea292591e42aa4d52b4b7a00b86335bfd2e2e85/gcc%2Fcommon%2Fconfig%2Fi386%2Fcpuinfo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fcpuinfo.h?ref=8ea292591e42aa4d52b4b7a00b86335bfd2e2e85", "patch": "@@ -46,6 +46,10 @@ struct __processor_model2\n # define CHECK___builtin_cpu_is(cpu)\n #endif\n \n+#ifndef CHECK___builtin_cpu_supports\n+# define CHECK___builtin_cpu_supports(isa)\n+#endif\n+\n /* Return non-zero if the processor has feature F.  */\n \n static inline int\n@@ -933,6 +937,50 @@ cpu_indicator_init (struct __processor_model *cpu_model,\n   else\n     cpu_model->__cpu_vendor = VENDOR_OTHER;\n \n+  if (has_cpu_feature (cpu_model, cpu_features2, FEATURE_LM)\n+      && has_cpu_feature (cpu_model, cpu_features2, FEATURE_SSE2))\n+    {\n+      CHECK___builtin_cpu_supports (\"x86-64\");\n+      set_cpu_feature (cpu_model, cpu_features2,\n+\t\t       FEATURE_X86_64_BASELINE);\n+      if (has_cpu_feature (cpu_model, cpu_features2, FEATURE_CMPXCHG16B)\n+\t  && has_cpu_feature (cpu_model, cpu_features2, FEATURE_POPCNT)\n+\t  && has_cpu_feature (cpu_model, cpu_features2, FEATURE_LAHF_LM)\n+\t  && has_cpu_feature (cpu_model, cpu_features2, FEATURE_SSE4_2))\n+\t{\n+\t  CHECK___builtin_cpu_supports (\"x86-64-v2\");\n+\t  set_cpu_feature (cpu_model, cpu_features2,\n+\t\t\t   FEATURE_X86_64_V2);\n+\t  if (has_cpu_feature (cpu_model, cpu_features2, FEATURE_AVX2)\n+\t      && has_cpu_feature (cpu_model, cpu_features2, FEATURE_BMI)\n+\t      && has_cpu_feature (cpu_model, cpu_features2, FEATURE_BMI2)\n+\t      && has_cpu_feature (cpu_model, cpu_features2, FEATURE_F16C)\n+\t      && has_cpu_feature (cpu_model, cpu_features2, FEATURE_FMA)\n+\t      && has_cpu_feature (cpu_model, cpu_features2,\n+\t\t\t\t  FEATURE_LZCNT)\n+\t      && has_cpu_feature (cpu_model, cpu_features2,\n+\t\t\t\t  FEATURE_MOVBE))\n+\t    {\n+\t      CHECK___builtin_cpu_supports (\"x86-64-v3\");\n+\t      set_cpu_feature (cpu_model, cpu_features2,\n+\t\t\t       FEATURE_X86_64_V3);\n+\t      if (has_cpu_feature (cpu_model, cpu_features2,\n+\t\t\t\t   FEATURE_AVX512BW)\n+\t\t  && has_cpu_feature (cpu_model, cpu_features2,\n+\t\t\t\t      FEATURE_AVX512CD)\n+\t\t  && has_cpu_feature (cpu_model, cpu_features2,\n+\t\t\t\t      FEATURE_AVX512DQ)\n+\t\t  && has_cpu_feature (cpu_model, cpu_features2,\n+\t\t\t\t      FEATURE_AVX512VL))\n+\t\t{\n+\t\t  CHECK___builtin_cpu_supports (\"x86-64-v4\");\n+\t\t  set_cpu_feature (cpu_model, cpu_features2,\n+\t\t\t\t   FEATURE_X86_64_V4);\n+\t\t}\n+\t    }\n+\t}\n+    }\n+\n   gcc_assert (cpu_model->__cpu_vendor < VENDOR_MAX);\n   gcc_assert (cpu_model->__cpu_type < CPU_TYPE_MAX);\n   gcc_assert (cpu_model->__cpu_subtype < CPU_SUBTYPE_MAX);"}, {"sha": "dc1a9fa57f8e77f5fa3ad1c05572c6d8190ffce3", "filename": "gcc/common/config/i386/i386-cpuinfo.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ea292591e42aa4d52b4b7a00b86335bfd2e2e85/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-cpuinfo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ea292591e42aa4d52b4b7a00b86335bfd2e2e85/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-cpuinfo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-cpuinfo.h?ref=8ea292591e42aa4d52b4b7a00b86335bfd2e2e85", "patch": "@@ -102,6 +102,7 @@ enum feature_priority\n   P_MMX,\n   P_SSE,\n   P_SSE2,\n+  P_X86_64_BASELINE,\n   P_SSE3,\n   P_SSSE3,\n   P_PROC_SSSE3,\n@@ -111,6 +112,7 @@ enum feature_priority\n   P_SSE4_2,\n   P_PROC_SSE4_2,\n   P_POPCNT,\n+  P_X86_64_V2,\n   P_AES,\n   P_PCLMUL,\n   P_AVX,\n@@ -125,8 +127,10 @@ enum feature_priority\n   P_BMI2,\n   P_AVX2,\n   P_PROC_AVX2,\n+  P_X86_64_V3,\n   P_AVX512F,\n   P_PROC_AVX512F,\n+  P_X86_64_V4,\n   P_PROC_DYNAMIC\n };\n \n@@ -229,6 +233,10 @@ enum processor_features\n   FEATURE_WIDEKL,\n   FEATURE_AVXVNNI,\n   FEATURE_AVX512FP16,\n+  FEATURE_X86_64_BASELINE,\n+  FEATURE_X86_64_V2,\n+  FEATURE_X86_64_V3,\n+  FEATURE_X86_64_V4,\n   CPU_FEATURE_MAX\n };\n "}, {"sha": "778401032dc2377ad11e728213c72e07f0c6a049", "filename": "gcc/common/config/i386/i386-isas.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ea292591e42aa4d52b4b7a00b86335bfd2e2e85/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-isas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ea292591e42aa4d52b4b7a00b86335bfd2e2e85/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-isas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-isas.h?ref=8ea292591e42aa4d52b4b7a00b86335bfd2e2e85", "patch": "@@ -170,4 +170,9 @@ ISA_NAMES_TABLE_START\n   ISA_NAMES_TABLE_ENTRY(\"widekl\", FEATURE_WIDEKL, P_NONE, \"-mwidekl\")\n   ISA_NAMES_TABLE_ENTRY(\"avxvnni\", FEATURE_AVXVNNI, P_NONE, \"-mavxvnni\")\n   ISA_NAMES_TABLE_ENTRY(\"avx512fp16\", FEATURE_AVX512FP16, P_NONE, \"-mavx512fp16\")\n+  ISA_NAMES_TABLE_ENTRY(\"x86-64\", FEATURE_X86_64_BASELINE, P_X86_64_BASELINE,\n+\t\t\tNULL)\n+  ISA_NAMES_TABLE_ENTRY(\"x86-64-v2\", FEATURE_X86_64_V2, P_X86_64_V2, NULL)\n+  ISA_NAMES_TABLE_ENTRY(\"x86-64-v3\", FEATURE_X86_64_V3, P_X86_64_V3, NULL)\n+  ISA_NAMES_TABLE_ENTRY(\"x86-64-v4\", FEATURE_X86_64_V4, P_X86_64_V4, NULL)\n ISA_NAMES_TABLE_END"}, {"sha": "11ce58b25748c8d993bb7025ca5b10f73cd56f7c", "filename": "gcc/config/i386/i386-builtins.c", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ea292591e42aa4d52b4b7a00b86335bfd2e2e85/gcc%2Fconfig%2Fi386%2Fi386-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ea292591e42aa4d52b4b7a00b86335bfd2e2e85/gcc%2Fconfig%2Fi386%2Fi386-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtins.c?ref=8ea292591e42aa4d52b4b7a00b86335bfd2e2e85", "patch": "@@ -1927,8 +1927,24 @@ get_builtin_code_for_version (tree decl, tree *predicate_list)\n \treturn 0;\n       new_target = TREE_TARGET_OPTION (target_node);\n       gcc_assert (new_target);\n-      \n-      if (new_target->arch_specified && new_target->arch > 0)\n+      enum ix86_builtins builtin_fn = IX86_BUILTIN_CPU_IS;\n+\n+      /* Special case x86-64 micro-level architectures.  */\n+      const char *arch_name = attrs_str + strlen (\"arch=\");\n+      if (startswith (arch_name, \"x86-64\"))\n+\t{\n+\t  arg_str = arch_name;\n+\t  builtin_fn = IX86_BUILTIN_CPU_SUPPORTS;\n+\t  if (strcmp (arch_name, \"x86-64\") == 0)\n+\t    priority = P_X86_64_BASELINE;\n+\t  else if (strcmp (arch_name, \"x86-64-v2\") == 0)\n+\t    priority = P_X86_64_V2;\n+\t  else if (strcmp (arch_name, \"x86-64-v3\") == 0)\n+\t    priority = P_X86_64_V3;\n+\t  else if (strcmp (arch_name, \"x86-64-v4\") == 0)\n+\t    priority = P_X86_64_V4;\n+\t}\n+      else if (new_target->arch_specified && new_target->arch > 0)\n \tfor (i = 0; i < pta_size; i++)\n \t  if (processor_alias_table[i].processor == new_target->arch)\n \t    {\n@@ -1998,7 +2014,7 @@ get_builtin_code_for_version (tree decl, tree *predicate_list)\n     \n       if (predicate_list)\n \t{\n-          predicate_decl = ix86_builtins [(int) IX86_BUILTIN_CPU_IS];\n+\t  predicate_decl = ix86_builtins [(int) builtin_fn];\n           /* For a C string literal the length includes the trailing NULL.  */\n           predicate_arg = build_string_literal (strlen (arg_str) + 1, arg_str);\n           predicate_chain = tree_cons (predicate_decl, predicate_arg,"}, {"sha": "9501a60f20e6881995b15791381f8accf41ad03e", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ea292591e42aa4d52b4b7a00b86335bfd2e2e85/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ea292591e42aa4d52b4b7a00b86335bfd2e2e85/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=8ea292591e42aa4d52b4b7a00b86335bfd2e2e85", "patch": "@@ -21743,6 +21743,18 @@ AMD Family 19h CPU.\n \n @item znver3\n AMD Family 19h Zen version 3.\n+\n+@item x86-64\n+Baseline x86-64 microarchitecture level (as defined in x86-64 psABI).\n+\n+@item x86-64-v2\n+x86-64-v2 microarchitecture level.\n+\n+@item x86-64-v3\n+x86-64-v3 microarchitecture level.\n+\n+@item x86-64-v4\n+x86-64-v4 microarchitecture level.\n @end table\n \n Here is an example:"}, {"sha": "b4947f0b481f8d708a696a313bc4b6d4cf6ebc97", "filename": "gcc/testsuite/g++.target/i386/mv30.C", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ea292591e42aa4d52b4b7a00b86335bfd2e2e85/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv30.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ea292591e42aa4d52b4b7a00b86335bfd2e2e85/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv30.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv30.C?ref=8ea292591e42aa4d52b4b7a00b86335bfd2e2e85", "patch": "@@ -0,0 +1,50 @@\n+// PR target/101696\n+// Test that dispatching can choose the right multiversion\n+// for x86-64 microarchitecture levels. \n+\n+// { dg-do run }\n+// { dg-require-ifunc \"\" }\n+// { dg-options \"-O2\" }\n+\n+#include <assert.h>\n+\n+int __attribute__ ((target(\"default\")))\n+foo ()\n+{\n+  return 0;\n+}\n+\n+int __attribute__ ((target(\"arch=x86-64\"))) foo () {\n+  return 1;\n+}\n+\n+int __attribute__ ((target(\"arch=x86-64-v2\"))) foo () {\n+  return 2;\n+}\n+\n+int __attribute__ ((target(\"arch=x86-64-v3\"))) foo () {\n+  return 3;\n+}\n+\n+int __attribute__ ((target(\"arch=x86-64-v4\"))) foo () {\n+  return 4;\n+}\n+\n+\n+int main ()\n+{\n+  int val = foo ();\n+\n+  if (__builtin_cpu_supports (\"x86-64-v4\"))\n+    assert (val == 4);\n+  else if  (__builtin_cpu_supports (\"x86-64-v3\"))\n+    assert (val == 3);\n+  else if  (__builtin_cpu_supports (\"x86-64-v2\"))\n+    assert (val == 2);\n+  else if  (__builtin_cpu_supports (\"x86-64\"))\n+    assert (val == 1);\n+  else\n+    assert (val == 0);\n+\n+  return 0;\n+}"}, {"sha": "3e7505a8c3a2e19a5f5ad68cc593dec2641491ce", "filename": "gcc/testsuite/gcc.target/i386/builtin_target.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ea292591e42aa4d52b4b7a00b86335bfd2e2e85/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbuiltin_target.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ea292591e42aa4d52b4b7a00b86335bfd2e2e85/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbuiltin_target.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbuiltin_target.c?ref=8ea292591e42aa4d52b4b7a00b86335bfd2e2e85", "patch": "@@ -10,6 +10,8 @@\n #include <stdlib.h>\n #include \"cpuid.h\"\n #define CHECK___builtin_cpu_is(cpu) assert (__builtin_cpu_is (cpu))\n+#define CHECK___builtin_cpu_supports(isa) \\\n+  assert (__builtin_cpu_supports (isa))\n #define gcc_assert(a) assert (a)\n #define gcc_unreachable() abort ()\n #define inline"}, {"sha": "def6581f7e7eb2cdc34fcd820da3f856645d4245", "filename": "gcc/testsuite/gcc.target/i386/mvc16.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ea292591e42aa4d52b4b7a00b86335bfd2e2e85/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmvc16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ea292591e42aa4d52b4b7a00b86335bfd2e2e85/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmvc16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmvc16.c?ref=8ea292591e42aa4d52b4b7a00b86335bfd2e2e85", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do run } */\n+/* { dg-require-ifunc \"\" } */\n+\n+__attribute__((target_clones(\"arch=x86-64\", \"arch=x86-64-v2\", \"arch=x86-64-v3\", \"arch=x86-64-v4\", \"default\")))\n+int\n+foo ()\n+{\n+  return 0;\n+}\n+\n+int\n+main ()\n+{\n+  return foo ();\n+}"}]}