{"sha": "136e64db5ea4eda85d7a9916d3ae9f4fa528b1e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTM2ZTY0ZGI1ZWE0ZWRhODVkN2E5OTE2ZDNhZTlmNGZhNTI4YjFlMw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-02-05T22:07:33Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-02-05T22:07:33Z"}, "message": "utils.c (create_param_decl): Replace PROMOTE_PROTOTYPES with targetm.calls.promote_prototypes.\n\n\tada/\n\t* ada/utils.c (create_param_decl): Replace PROMOTE_PROTOTYPES\n\twith targetm.calls.promote_prototypes.\n\n\tgcc/\n\t* config/cris/cris.h: Replace PROMOTE_PROTOTYPES with\n\tTARGET_PROMOTE_PROTOTYPES.\n\n\tcp/\n\t* call.c (type_passed_as): Replace PROMOTE_PROTOTYPES with\n\ttargetm.calls.promote_prototypes.\n\n\tjava/\n\t* Make-lang.in (java/decl.o, java/expr.o, java/parse.o):\n\tDepend on target.h.\n\t* decl.c: Include target.h.\n\t(start_java_method): Replace PROMOTE_PROTOTYPES with\n\ttargetm.calls.promote_prototypes.\n\t* expr.c: Include target.h.\n\t(pop_arguments): Replace PROMOTE_PROTOTYPES with\n\ttargetm.calls.promote_prototypes.\n\t* parse.y: Include target.h.\n\t(start_complete_expand_method): Replace PROMOTE_PROTOTYPES\n\twith targetm.calls.promote_prototypes.\n\nFrom-SVN: r77345", "tree": {"sha": "37419ddcaadd888777ea3df662e86983cd2a9346", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37419ddcaadd888777ea3df662e86983cd2a9346"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/136e64db5ea4eda85d7a9916d3ae9f4fa528b1e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/136e64db5ea4eda85d7a9916d3ae9f4fa528b1e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/136e64db5ea4eda85d7a9916d3ae9f4fa528b1e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/136e64db5ea4eda85d7a9916d3ae9f4fa528b1e3/comments", "author": null, "committer": null, "parents": [{"sha": "839ee4bc570bf56df913d37a4fa3ab9fb6e5956e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/839ee4bc570bf56df913d37a4fa3ab9fb6e5956e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/839ee4bc570bf56df913d37a4fa3ab9fb6e5956e"}], "stats": {"total": 60, "additions": 46, "deletions": 14}, "files": [{"sha": "7e920238929995a9181d20fb67b388002bc2d264", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/136e64db5ea4eda85d7a9916d3ae9f4fa528b1e3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/136e64db5ea4eda85d7a9916d3ae9f4fa528b1e3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=136e64db5ea4eda85d7a9916d3ae9f4fa528b1e3", "patch": "@@ -1,3 +1,8 @@\n+2004-02-05  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/cris/cris.h: Replace PROMOTE_PROTOTYPES with\n+\tTARGET_PROMOTE_PROTOTYPES.\n+\n 2004-02-05  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n \n \tPR middle-end/13750"}, {"sha": "3c3cb1536882a12baeb334e2caf2f084d87ed1ae", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/136e64db5ea4eda85d7a9916d3ae9f4fa528b1e3/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/136e64db5ea4eda85d7a9916d3ae9f4fa528b1e3/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=136e64db5ea4eda85d7a9916d3ae9f4fa528b1e3", "patch": "@@ -1,3 +1,8 @@\n+2004-02-05  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* ada/utils.c (create_param_decl): Replace PROMOTE_PROTOTYPES\n+\twith targetm.calls.promote_prototypes.\n+\n 2004-02-04  Robert Dewar  <dewar@gnat.com>\n \n \t* 5gtasinf.adb, 5gtasinf.ads, 5gtaprop.adb, ali.adb,"}, {"sha": "94176917836e07fb9a18b9dcb88a059c3677ae1c", "filename": "gcc/ada/utils.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/136e64db5ea4eda85d7a9916d3ae9f4fa528b1e3/gcc%2Fada%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/136e64db5ea4eda85d7a9916d3ae9f4fa528b1e3/gcc%2Fada%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils.c?ref=136e64db5ea4eda85d7a9916d3ae9f4fa528b1e3", "patch": "@@ -1540,11 +1540,11 @@ create_param_decl (tree param_name, tree param_type, int readonly)\n {\n   tree param_decl = build_decl (PARM_DECL, param_name, param_type);\n \n-  /* Honor the PROMOTE_PROTOTYPES target macro, as not doing so can\n+  /* Honor targetm.calls.promote_prototypes(), as not doing so can\n      lead to various ABI violations.  */\n-#ifdef PROMOTE_PROTOTYPES\n-  if ((TREE_CODE (param_type) == INTEGER_TYPE\n-       || TREE_CODE (param_type) == ENUMERAL_TYPE)\n+  if (targetm.calls.promote_prototypes (param_type)\n+      && (TREE_CODE (param_type) == INTEGER_TYPE\n+\t  || TREE_CODE (param_type) == ENUMERAL_TYPE)\n       && TYPE_PRECISION (param_type) < TYPE_PRECISION (integer_type_node))\n     {\n       /* We have to be careful about biased types here.  Make a subtype\n@@ -1562,7 +1562,6 @@ create_param_decl (tree param_name, tree param_type, int readonly)\n       else\n \tparam_type = integer_type_node;\n     }\n-#endif\n \n   DECL_ARG_TYPE (param_decl) = param_type;\n   DECL_ARG_TYPE_AS_WRITTEN (param_decl) = param_type;"}, {"sha": "a999e04b6bd8f0bc15096d63e397bb67c181d9fe", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/136e64db5ea4eda85d7a9916d3ae9f4fa528b1e3/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/136e64db5ea4eda85d7a9916d3ae9f4fa528b1e3/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=136e64db5ea4eda85d7a9916d3ae9f4fa528b1e3", "patch": "@@ -479,7 +479,7 @@ extern int target_flags;\n \n /* A combination of defining PROMOTE_MODE,\n    TARGET_PROMOTE_FUNCTION_ARGS that always returns true,\n-   PROMOTE_FOR_CALL_ONLY and *not* defining PROMOTE_PROTOTYPES gives the\n+   PROMOTE_FOR_CALL_ONLY and *not* defining TARGET_PROMOTE_PROTOTYPES gives the\n    best code size and speed for gcc, ipps and products in gcc-2.7.2.  */\n #define CRIS_PROMOTED_MODE(MODE, UNSIGNEDP, TYPE) \\\n  (GET_MODE_CLASS (MODE) == MODE_INT && GET_MODE_SIZE (MODE) < 4) \\"}, {"sha": "4d028a3cac46c3c1e5ce176a0de91f5d40881291", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/136e64db5ea4eda85d7a9916d3ae9f4fa528b1e3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/136e64db5ea4eda85d7a9916d3ae9f4fa528b1e3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=136e64db5ea4eda85d7a9916d3ae9f4fa528b1e3", "patch": "@@ -1,3 +1,8 @@\n+2004-02-05  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* call.c (type_passed_as): Replace PROMOTE_PROTOTYPES with\n+\ttargetm.calls.promote_prototypes.\n+\n 2004-02-05  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n \n \tPR middle-end/13750"}, {"sha": "15382dcb1b893eb1716b70f3b96d4e2c8667e5eb", "filename": "gcc/cp/call.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/136e64db5ea4eda85d7a9916d3ae9f4fa528b1e3/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/136e64db5ea4eda85d7a9916d3ae9f4fa528b1e3/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=136e64db5ea4eda85d7a9916d3ae9f4fa528b1e3", "patch": "@@ -4245,7 +4245,7 @@ type_passed_as (tree type)\n   /* Pass classes with copy ctors by invisible reference.  */\n   if (TREE_ADDRESSABLE (type))\n     type = build_reference_type (type);\n-  else if (PROMOTE_PROTOTYPES\n+  else if (targetm.calls.promote_prototypes (type)\n \t   && INTEGRAL_TYPE_P (type)\n \t   && COMPLETE_TYPE_P (type)\n \t   && INT_CST_LT_UNSIGNED (TYPE_SIZE (type),\n@@ -4265,7 +4265,7 @@ convert_for_arg_passing (tree type, tree val)\n   /* Pass classes with copy ctors by invisible reference.  */\n   else if (TREE_ADDRESSABLE (type))\n     val = build1 (ADDR_EXPR, build_reference_type (type), val);\n-  else if (PROMOTE_PROTOTYPES\n+  else if (targetm.calls.promote_prototypes (type)\n \t   && INTEGRAL_TYPE_P (type)\n \t   && COMPLETE_TYPE_P (type)\n \t   && INT_CST_LT_UNSIGNED (TYPE_SIZE (type),"}, {"sha": "714cd764196a91ea7163d5adc0fe117251c5b4c3", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/136e64db5ea4eda85d7a9916d3ae9f4fa528b1e3/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/136e64db5ea4eda85d7a9916d3ae9f4fa528b1e3/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=136e64db5ea4eda85d7a9916d3ae9f4fa528b1e3", "patch": "@@ -1,3 +1,17 @@\n+2004-02-05  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* Make-lang.in (java/decl.o, java/expr.o, java/parse.o):\n+\tDepend on target.h.\n+\t* decl.c: Include target.h.\n+\t(start_java_method): Replace PROMOTE_PROTOTYPES with\n+\ttargetm.calls.promote_prototypes.\n+\t* expr.c: Include target.h.\n+\t(pop_arguments): Replace PROMOTE_PROTOTYPES with\n+\ttargetm.calls.promote_prototypes.\n+\t* parse.y: Include target.h.\n+\t(start_complete_expand_method): Replace PROMOTE_PROTOTYPES\n+\twith targetm.calls.promote_prototypes.\n+\n 2004-02-04  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* typeck.c: Update copyright."}, {"sha": "356ac4b822544f9b68cc25d8c7005ece442d3c27", "filename": "gcc/java/Make-lang.in", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/136e64db5ea4eda85d7a9916d3ae9f4fa528b1e3/gcc%2Fjava%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/136e64db5ea4eda85d7a9916d3ae9f4fa528b1e3/gcc%2Fjava%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FMake-lang.in?ref=136e64db5ea4eda85d7a9916d3ae9f4fa528b1e3", "patch": "@@ -292,14 +292,15 @@ java/constants.o: java/constants.c $(CONFIG_H) $(JAVA_TREE_H) java/jcf.h \\\n   toplev.h $(SYSTEM_H) coretypes.h $(TM_H) $(GGC_H) gt-java-constants.h\n java/decl.o: java/decl.c $(CONFIG_H) $(JAVA_TREE_H) $(RTL_H) java/jcf.h \\\n   toplev.h flags.h $(SYSTEM_H) coretypes.h $(TM_H) function.h expr.h \\\n-  libfuncs.h except.h java/java-except.h $(GGC_H) real.h gt-java-decl.h\n+  libfuncs.h except.h java/java-except.h $(GGC_H) real.h gt-java-decl.h \\\n+  target.h\n java/except.o: java/except.c $(CONFIG_H) $(JAVA_TREE_H) java/jcf.h real.h \\\n   $(RTL_H) java/javaop.h java/java-opcodes.h except.h java/java-except.h \\\n   toplev.h $(SYSTEM_H) coretypes.h $(TM_H) function.h \n java/expr.o: java/expr.c $(CONFIG_H) $(JAVA_TREE_H) java/jcf.h real.h \\\n   $(RTL_H) $(EXPR_H) java/javaop.h java/java-opcodes.h except.h \\\n   java/java-except.h java/java-except.h java/parse.h toplev.h \\\n-  $(SYSTEM_H) coretypes.h $(TM_H) $(GGC_H) gt-java-expr.h\n+  $(SYSTEM_H) coretypes.h $(TM_H) $(GGC_H) gt-java-expr.h target.h\n java/jcf-depend.o: java/jcf-depend.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n   $(TM_H) java/jcf.h\n java/jcf-parse.o: java/jcf-parse.c $(CONFIG_H) $(JAVA_TREE_H) flags.h \\\n@@ -336,7 +337,7 @@ java/parse-scan.o: java/parse-scan.c $(CONFIG_H) $(SYSTEM_H) \\\n   coretypes.h $(TM_H) toplev.h $(JAVA_LEX_C) java/parse.h java/lex.h input.h\n java/parse.o: java/parse.c java/jcf-reader.c $(CONFIG_H) $(SYSTEM_H) \\\n   coretypes.h $(TM_H) function.h $(JAVA_TREE_H) $(JAVA_LEX_C) java/parse.h \\\n-  java/lex.h input.h $(GGC_H) debug.h gt-java-parse.h gtype-java.h\n+  java/lex.h input.h $(GGC_H) debug.h gt-java-parse.h gtype-java.h target.h\n \n # jcf-io.o needs $(ZLIBINC) added to cflags.\n java/jcf-io.o: java/jcf-io.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\"}, {"sha": "e0dd852927e29aed1364d92a89cb77e103113477", "filename": "gcc/java/decl.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/136e64db5ea4eda85d7a9916d3ae9f4fa528b1e3/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/136e64db5ea4eda85d7a9916d3ae9f4fa528b1e3/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=136e64db5ea4eda85d7a9916d3ae9f4fa528b1e3", "patch": "@@ -45,6 +45,7 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"ggc.h\"\n #include \"timevar.h\"\n #include \"tree-inline.h\"\n+#include \"target.h\"\n \n #if defined (DEBUG_JAVA_BINDING_LEVELS)\n extern void indent (void);\n@@ -1758,7 +1759,7 @@ start_java_method (tree fndecl)\n \n       parm_decl = build_decl (PARM_DECL, parm_name, parm_type);\n       DECL_CONTEXT (parm_decl) = fndecl;\n-      if (PROMOTE_PROTOTYPES\n+      if (targetm.calls.promote_prototypes (parm_type)\n \t  && TYPE_PRECISION (parm_type) < TYPE_PRECISION (integer_type_node)\n \t  && INTEGRAL_TYPE_P (parm_type))\n \tparm_type = integer_type_node;"}, {"sha": "a4356eb3e4841f631be43320849478015356d10c", "filename": "gcc/java/expr.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/136e64db5ea4eda85d7a9916d3ae9f4fa528b1e3/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/136e64db5ea4eda85d7a9916d3ae9f4fa528b1e3/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=136e64db5ea4eda85d7a9916d3ae9f4fa528b1e3", "patch": "@@ -43,6 +43,7 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"toplev.h\"\n #include \"except.h\"\n #include \"ggc.h\"\n+#include \"target.h\"\n \n static void flush_quick_stack (void);\n static void push_value (tree);\n@@ -1674,7 +1675,7 @@ pop_arguments (tree arg_types)\n       tree tail = pop_arguments (TREE_CHAIN (arg_types));\n       tree type = TREE_VALUE (arg_types);\n       tree arg = pop_value (type);\n-      if (PROMOTE_PROTOTYPES\n+      if (targetm.calls.promote_prototypes (type)\n \t  && TYPE_PRECISION (type) < TYPE_PRECISION (integer_type_node)\n \t  && INTEGRAL_TYPE_P (type))\n \targ = convert (integer_type_node, arg);"}, {"sha": "93755ea84aece3e3db380ccc68cb5be989111365", "filename": "gcc/java/parse.y", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/136e64db5ea4eda85d7a9916d3ae9f4fa528b1e3/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/136e64db5ea4eda85d7a9916d3ae9f4fa528b1e3/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=136e64db5ea4eda85d7a9916d3ae9f4fa528b1e3", "patch": "@@ -72,6 +72,7 @@ definitions and other extensions.  */\n #include \"debug.h\"\n #include \"tree-inline.h\"\n #include \"cgraph.h\"\n+#include \"target.h\"\n \n /* Local function prototypes */\n static char *java_accstring_lookup (int);\n@@ -7990,7 +7991,7 @@ start_complete_expand_method (tree mdecl)\n       /* TREE_CHAIN (tem) will change after pushdecl. */\n       tree next = TREE_CHAIN (tem);\n       tree type = TREE_TYPE (tem);\n-      if (PROMOTE_PROTOTYPES\n+      if (targetm.calls.promote_prototypes (type)\n \t  && TYPE_PRECISION (type) < TYPE_PRECISION (integer_type_node)\n \t  && INTEGRAL_TYPE_P (type))\n \ttype = integer_type_node;"}]}