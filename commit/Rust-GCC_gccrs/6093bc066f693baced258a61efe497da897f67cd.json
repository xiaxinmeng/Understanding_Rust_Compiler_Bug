{"sha": "6093bc066f693baced258a61efe497da897f67cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjA5M2JjMDY2ZjY5M2JhY2VkMjU4YTYxZWZlNDk3ZGE4OTdmNjdjZA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-04-29T11:31:33Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-04-29T11:31:33Z"}, "message": "re PR middle-end/57089 (ICE in  verify_loop_structure, at cfgloop.c:1647)\n\n2013-04-29  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/57089\n\t* omp-low.c (expand_omp_taskreg): If the parent function had\n\ta broken loop tree make sure to schedule a fixup for the child\n\tas well.\n\t(expand_omp_for_generic): Properly add loops.\n\t(expand_omp_for_static_nochunk): Likewise.\n\t(expand_omp_for_static_chunk): Likewise.\n\t(expand_omp_for): For the degenerate case fixup loops.\n\t(expand_omp_sections): Fix default bb placement in loops.\n\t(expand_omp_atomic_pipeline): Properly add loops.\n\n\t* gfortran.dg/gomp/pr57089.f90: New testcase.\n\nFrom-SVN: r198409", "tree": {"sha": "61001fc0e3cfd07317d65df1f7c32549a40040c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61001fc0e3cfd07317d65df1f7c32549a40040c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6093bc066f693baced258a61efe497da897f67cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6093bc066f693baced258a61efe497da897f67cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6093bc066f693baced258a61efe497da897f67cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6093bc066f693baced258a61efe497da897f67cd/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "84aacbfda59c571b63c25bc6eced194206175d33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84aacbfda59c571b63c25bc6eced194206175d33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84aacbfda59c571b63c25bc6eced194206175d33"}], "stats": {"total": 80, "additions": 70, "deletions": 10}, "files": [{"sha": "6400403124409e652325b4ce56c438eb5945a659", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6093bc066f693baced258a61efe497da897f67cd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6093bc066f693baced258a61efe497da897f67cd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6093bc066f693baced258a61efe497da897f67cd", "patch": "@@ -1,3 +1,16 @@\n+2013-04-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/57089\n+\t* omp-low.c (expand_omp_taskreg): If the parent function had\n+\ta broken loop tree make sure to schedule a fixup for the child\n+\tas well.\n+\t(expand_omp_for_generic): Properly add loops.\n+\t(expand_omp_for_static_nochunk): Likewise.\n+\t(expand_omp_for_static_chunk): Likewise.\n+\t(expand_omp_for): For the degenerate case fixup loops.\n+\t(expand_omp_sections): Fix default bb placement in loops.\n+\t(expand_omp_atomic_pipeline): Properly add loops.\n+\n 2013-04-29  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* predict.c: Fix typo in comment above #define PROB_VERY_UNLIKELY."}, {"sha": "bd7e7e689e5cdae35e6c5626de63d90655a49ba8", "filename": "gcc/omp-low.c", "status": "modified", "additions": 40, "deletions": 10, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6093bc066f693baced258a61efe497da897f67cd/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6093bc066f693baced258a61efe497da897f67cd/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=6093bc066f693baced258a61efe497da897f67cd", "patch": "@@ -3571,11 +3571,10 @@ expand_omp_taskreg (struct omp_region *region)\n       new_bb = move_sese_region_to_fn (child_cfun, entry_bb, exit_bb, block);\n       if (exit_bb)\n \tsingle_succ_edge (new_bb)->flags = EDGE_FALLTHRU;\n-      /* ???  As the OMP expansion process does not update the loop\n-         tree of the original function before outlining the region to\n-\t the new child function we need to discover loops in the child.\n-\t Arrange for that.  */\n-      child_cfun->x_current_loops->state |= LOOPS_NEED_FIXUP;\n+      /* When the OMP expansion process cannot guarantee an up-to-date\n+         loop tree arrange for the child function to fixup loops.  */\n+      if (loops_state_satisfies_p (LOOPS_NEED_FIXUP))\n+\tchild_cfun->x_current_loops->state |= LOOPS_NEED_FIXUP;\n \n       /* Remove non-local VAR_DECLs from child_cfun->local_decls list.  */\n       num = vec_safe_length (child_cfun->local_decls);\n@@ -4148,6 +4147,16 @@ expand_omp_for_generic (struct omp_region *region,\n \t\t\t       recompute_dominator (CDI_DOMINATORS, l0_bb));\n       set_immediate_dominator (CDI_DOMINATORS, l1_bb,\n \t\t\t       recompute_dominator (CDI_DOMINATORS, l1_bb));\n+\n+      struct loop *outer_loop = alloc_loop ();\n+      outer_loop->header = l0_bb;\n+      outer_loop->latch = l2_bb;\n+      add_loop (outer_loop, l0_bb->loop_father);\n+\n+      struct loop *loop = alloc_loop ();\n+      loop->header = l1_bb;\n+      /* The loop may have multiple latches.  */\n+      add_loop (loop, outer_loop);\n     }\n }\n \n@@ -4370,6 +4379,11 @@ expand_omp_for_static_nochunk (struct omp_region *region,\n \t\t\t   recompute_dominator (CDI_DOMINATORS, body_bb));\n   set_immediate_dominator (CDI_DOMINATORS, fin_bb,\n \t\t\t   recompute_dominator (CDI_DOMINATORS, fin_bb));\n+\n+  struct loop *loop = alloc_loop ();\n+  loop->header = body_bb;\n+  loop->latch = cont_bb;\n+  add_loop (loop, body_bb->loop_father);\n }\n \n \n@@ -4671,6 +4685,16 @@ expand_omp_for_static_chunk (struct omp_region *region, struct omp_for_data *fd)\n \t\t\t   recompute_dominator (CDI_DOMINATORS, seq_start_bb));\n   set_immediate_dominator (CDI_DOMINATORS, body_bb,\n \t\t\t   recompute_dominator (CDI_DOMINATORS, body_bb));\n+\n+  struct loop *trip_loop = alloc_loop ();\n+  trip_loop->header = iter_part_bb;\n+  trip_loop->latch = trip_update_bb;\n+  add_loop (trip_loop, iter_part_bb->loop_father);\n+\n+  struct loop *loop = alloc_loop ();\n+  loop->header = body_bb;\n+  loop->latch = cont_bb;\n+  add_loop (loop, trip_loop);\n }\n \n \n@@ -4698,6 +4722,11 @@ expand_omp_for (struct omp_region *region)\n       BRANCH_EDGE (region->cont)->flags &= ~EDGE_ABNORMAL;\n       FALLTHRU_EDGE (region->cont)->flags &= ~EDGE_ABNORMAL;\n     }\n+  else\n+    /* If there isnt a continue then this is a degerate case where\n+       the introduction of abnormal edges during lowering will prevent\n+       original loops from being detected.  Fix that up.  */\n+    loops_state_set (LOOPS_NEED_FIXUP);\n \n   if (fd.sched_kind == OMP_CLAUSE_SCHEDULE_STATIC\n       && !fd.have_ordered\n@@ -4914,7 +4943,7 @@ expand_omp_sections (struct omp_region *region)\n   u = build_case_label (NULL, NULL, t);\n   make_edge (l0_bb, default_bb, 0);\n   if (current_loops)\n-    add_bb_to_loop (default_bb, l0_bb->loop_father);\n+    add_bb_to_loop (default_bb, current_loops->tree_root);\n \n   stmt = gimple_build_switch (vmain, u, label_vec);\n   gsi_insert_after (&switch_si, stmt, GSI_SAME_STMT);\n@@ -5448,13 +5477,14 @@ expand_omp_atomic_pipeline (basic_block load_bb, basic_block store_bb,\n   /* Remove GIMPLE_OMP_ATOMIC_STORE.  */\n   gsi_remove (&si, true);\n \n+  struct loop *loop = alloc_loop ();\n+  loop->header = loop_header;\n+  loop->latch = loop_header;\n+  add_loop (loop, loop_header->loop_father);\n+\n   if (gimple_in_ssa_p (cfun))\n     update_ssa (TODO_update_ssa_no_phi);\n \n-  /* ???  The above could use loop construction primitives.  */\n-  if (current_loops)\n-    loops_state_set (LOOPS_NEED_FIXUP);\n-\n   return true;\n }\n "}, {"sha": "25c01416e7779cf79993d7ccd4477c616d32de9b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6093bc066f693baced258a61efe497da897f67cd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6093bc066f693baced258a61efe497da897f67cd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6093bc066f693baced258a61efe497da897f67cd", "patch": "@@ -1,3 +1,8 @@\n+2013-04-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/57089\n+\t* gfortran.dg/gomp/pr57089.f90: New testcase.\n+\n 2013-04-29  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* lib/target-supports.exp (vect_uintfloat_cvt): Enable for AArch64."}, {"sha": "ff742c68bcee186743f68735c4b39f044aaf41fb", "filename": "gcc/testsuite/gfortran.dg/gomp/pr57089.f90", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6093bc066f693baced258a61efe497da897f67cd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr57089.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6093bc066f693baced258a61efe497da897f67cd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr57089.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr57089.f90?ref=6093bc066f693baced258a61efe497da897f67cd", "patch": "@@ -0,0 +1,12 @@\n+! PR middle-end/57089\r\n+! { dg-do compile }\r\n+! { dg-options \"-O -fopenmp\" }\r\n+  SUBROUTINE T()\r\n+    INTEGER            :: npoints, grad_deriv\r\n+    SELECT CASE(grad_deriv)\r\n+    CASE (0)\r\n+       !$omp do\r\n+       DO ii=1,npoints\r\n+       END DO\r\n+    END SELECT\r\n+  END SUBROUTINE \r"}]}