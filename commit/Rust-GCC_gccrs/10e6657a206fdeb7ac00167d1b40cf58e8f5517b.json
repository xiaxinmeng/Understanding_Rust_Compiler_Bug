{"sha": "10e6657a206fdeb7ac00167d1b40cf58e8f5517b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTBlNjY1N2EyMDZmZGViN2FjMDAxNjdkMWI0MGNmNThlOGY1NTE3Yg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2005-11-21T21:27:29Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-11-21T21:27:29Z"}, "message": "c-common.c, [...]: Revert 2005-11-18 lookup_name patch.\n\ngcc/\n        * c-common.c, config/darwin-c.c, c-decl.c, c-tree.h, c-objc-common.h,\n        langhooks-def.h, langhooks.h: Revert 2005-11-18 lookup_name patch.\n        * c-tree.h (lookup_name): Move declaration ...\n        * c-common.h (lookup_name): ... here.\n        * config/darwin-c.c: Include c-common.h.\n        * config/t-darwin: Update dependencies.\ngcc/cp/\n        * cp-objcp-common.h, name-lookup.c, name-lookup.h: Revert 11-18 patch.\n        * name-lookup.c (lookup_name): Remove prefer_type argument.\n        (lookup_name_prefer_type): New.\n        * decl.c (lookup_and_check_tag): Use them.\n        * pt.c (tsubst_friend_class): Likewise.\n        (lookup_template_class): Likewise.\n        (tsubst_copy_and_build): Likewise.\n        * name-lookup.h (lookup_name_prefer_type): New.\n        (lookup_name): Remove declaration.\n\nFrom-SVN: r107325", "tree": {"sha": "324dda1490d4c679f3db106b92840b7fbb271bfc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/324dda1490d4c679f3db106b92840b7fbb271bfc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10e6657a206fdeb7ac00167d1b40cf58e8f5517b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10e6657a206fdeb7ac00167d1b40cf58e8f5517b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10e6657a206fdeb7ac00167d1b40cf58e8f5517b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10e6657a206fdeb7ac00167d1b40cf58e8f5517b/comments", "author": null, "committer": null, "parents": [{"sha": "3d8bf70f59ee15fc337c025307a419558e7aedc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d8bf70f59ee15fc337c025307a419558e7aedc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d8bf70f59ee15fc337c025307a419558e7aedc4"}], "stats": {"total": 70, "additions": 39, "deletions": 31}, "files": [{"sha": "7bb017551134c187e935fd69f08987ac976cf24d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10e6657a206fdeb7ac00167d1b40cf58e8f5517b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10e6657a206fdeb7ac00167d1b40cf58e8f5517b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=10e6657a206fdeb7ac00167d1b40cf58e8f5517b", "patch": "@@ -1,3 +1,13 @@\n+2005-11-21  Richard Henderson  <rth@redhat.com>\n+\n+\t* c-common.c, config/darwin-c.c, c-decl.c, c-tree.h, c-objc-common.h,\n+\tlanghooks-def.h, langhooks.h: Revert 2005-11-18 lookup_name patch.\n+\n+\t* c-tree.h (lookup_name): Move declaration ...\n+\t* c-common.h (lookup_name): ... here.\n+\t* config/darwin-c.c: Include c-common.h.\n+\t* config/t-darwin: Update dependencies.\n+\n 2005-11-22  Ben Elliston  <bje@au.ibm.com>\n \n \t* optabs.c (expand_abs_nojump): Use SCALAR_FLOAT_MODE_P instead of"}, {"sha": "7b27ba06e4e9d7795765f267fcfd9c33c48c400a", "filename": "gcc/c-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10e6657a206fdeb7ac00167d1b40cf58e8f5517b/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10e6657a206fdeb7ac00167d1b40cf58e8f5517b/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=10e6657a206fdeb7ac00167d1b40cf58e8f5517b", "patch": "@@ -5464,7 +5464,7 @@ handle_cleanup_attribute (tree *node, tree name, tree args,\n       *no_add_attrs = true;\n       return NULL_TREE;\n     }\n-  cleanup_decl = lang_hooks.decls.lookup_name (cleanup_id);\n+  cleanup_decl = lookup_name (cleanup_id);\n   if (!cleanup_decl || TREE_CODE (cleanup_decl) != FUNCTION_DECL)\n     {\n       error (\"cleanup argument not a function\");"}, {"sha": "cf75ed9e82a1294671d14b37a1e020c168b2bf60", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10e6657a206fdeb7ac00167d1b40cf58e8f5517b/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10e6657a206fdeb7ac00167d1b40cf58e8f5517b/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=10e6657a206fdeb7ac00167d1b40cf58e8f5517b", "patch": "@@ -776,6 +776,7 @@ extern tree finish_label_address_expr (tree);\n /* Same function prototype, but the C and C++ front ends have\n    different implementations.  Used in c-common.c.  */\n extern tree lookup_label (tree);\n+extern tree lookup_name (tree);\n \n extern int vector_types_convertible_p (tree t1, tree t2);\n "}, {"sha": "69212599612a8faf1bb4bbf580882854e5583139", "filename": "gcc/c-objc-common.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10e6657a206fdeb7ac00167d1b40cf58e8f5517b/gcc%2Fc-objc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10e6657a206fdeb7ac00167d1b40cf58e8f5517b/gcc%2Fc-objc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-objc-common.h?ref=10e6657a206fdeb7ac00167d1b40cf58e8f5517b", "patch": "@@ -127,8 +127,6 @@ extern void c_initialize_diagnostics (diagnostic_context *);\n \n #undef LANG_HOOKS_GETDECLS\n #define LANG_HOOKS_GETDECLS lhd_return_null_tree_v\n-#undef LANG_HOOKS_LOOKUP_NAME\n-#define LANG_HOOKS_LOOKUP_NAME lookup_name\n #undef LANG_HOOKS_WRITE_GLOBALS\n #define LANG_HOOKS_WRITE_GLOBALS c_write_global_declarations\n "}, {"sha": "6468ef27cc603a13bfa3f5a7eec3e11790c9c795", "filename": "gcc/c-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10e6657a206fdeb7ac00167d1b40cf58e8f5517b/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10e6657a206fdeb7ac00167d1b40cf58e8f5517b/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=10e6657a206fdeb7ac00167d1b40cf58e8f5517b", "patch": "@@ -454,7 +454,6 @@ extern tree groktypename (struct c_type_name *);\n extern tree grokparm (const struct c_parm *);\n extern tree implicitly_declare (tree);\n extern void keep_next_level (void);\n-extern tree lookup_name (tree);\n extern void pending_xref_error (void);\n extern void c_push_function_context (struct function *);\n extern void c_pop_function_context (struct function *);"}, {"sha": "d044deb709c3a22792a6836219e1be4f40a67ae0", "filename": "gcc/config/darwin-c.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10e6657a206fdeb7ac00167d1b40cf58e8f5517b/gcc%2Fconfig%2Fdarwin-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10e6657a206fdeb7ac00167d1b40cf58e8f5517b/gcc%2Fconfig%2Fdarwin-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-c.c?ref=10e6657a206fdeb7ac00167d1b40cf58e8f5517b", "patch": "@@ -28,12 +28,12 @@ Boston, MA 02110-1301, USA.  */\n #include \"c-pragma.h\"\n #include \"c-tree.h\"\n #include \"c-incpath.h\"\n+#include \"c-common.h\"\n #include \"toplev.h\"\n #include \"flags.h\"\n #include \"tm_p.h\"\n #include \"cppdefault.h\"\n #include \"prefix.h\"\n-#include \"langhooks.h\"\n \n /* Pragmas.  */\n \n@@ -142,7 +142,7 @@ darwin_pragma_unused (cpp_reader *pfile ATTRIBUTE_UNUSED)\n       tok = c_lex (&decl);\n       if (tok == CPP_NAME && decl)\n \t{\n-\t  tree local = lang_hooks.decls.lookup_name (decl);\n+\t  tree local = lookup_name (decl);\n \t  if (local && (TREE_CODE (local) == PARM_DECL\n \t\t\t|| TREE_CODE (local) == VAR_DECL))\n \t    TREE_USED (local) = 1;"}, {"sha": "d59f0b7a162e9b8463b662e179d3c8b7065144cb", "filename": "gcc/config/t-darwin", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10e6657a206fdeb7ac00167d1b40cf58e8f5517b/gcc%2Fconfig%2Ft-darwin", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10e6657a206fdeb7ac00167d1b40cf58e8f5517b/gcc%2Fconfig%2Ft-darwin", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ft-darwin?ref=10e6657a206fdeb7ac00167d1b40cf58e8f5517b", "patch": "@@ -6,7 +6,7 @@ darwin.o: $(srcdir)/config/darwin.c $(CONFIG_H) $(SYSTEM_H) coretypes.h     \\\n \n darwin-c.o: $(srcdir)/config/darwin-c.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n   $(TM_H) $(CPPLIB_H) tree.h c-pragma.h $(C_TREE_H) toplev.h $(TM_P_H) \\\n-  c-incpath.h flags.h\n+  c-incpath.h flags.h $(C_COMMON_H)\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(srcdir)/config/darwin-c.c $(PREPROCESSOR_DEFINES)\n \n gt-darwin.h : s-gtype ; @true"}, {"sha": "87e4598263bec8e24ecccb7cf08da75e1aef01c6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10e6657a206fdeb7ac00167d1b40cf58e8f5517b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10e6657a206fdeb7ac00167d1b40cf58e8f5517b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=10e6657a206fdeb7ac00167d1b40cf58e8f5517b", "patch": "@@ -1,3 +1,16 @@\n+2005-11-21  Richard Henderson  <rth@redhat.com>\n+\n+\t* cp-objcp-common.h, name-lookup.c, name-lookup.h: Revert 11-18 patch.\n+\n+\t* name-lookup.c (lookup_name): Remove prefer_type argument.\n+\t(lookup_name_prefer_type): New.\n+\t* decl.c (lookup_and_check_tag): Use them.\n+\t* pt.c (tsubst_friend_class): Likewise.\n+\t(lookup_template_class): Likewise.\n+\t(tsubst_copy_and_build): Likewise.\n+\t* name-lookup.h (lookup_name_prefer_type): New.\n+\t(lookup_name): Remove declaration.\n+\n 2005-11-18  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/8355"}, {"sha": "4a4d400cd6f648c50a7bc434c9db8108031b3987", "filename": "gcc/cp/cp-objcp-common.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10e6657a206fdeb7ac00167d1b40cf58e8f5517b/gcc%2Fcp%2Fcp-objcp-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10e6657a206fdeb7ac00167d1b40cf58e8f5517b/gcc%2Fcp%2Fcp-objcp-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.h?ref=10e6657a206fdeb7ac00167d1b40cf58e8f5517b", "patch": "@@ -151,7 +151,5 @@ extern tree objcp_tsubst_copy_and_build (tree, tree, tsubst_flags_t,\n #define LANG_HOOKS_TO_TARGET_CHARSET c_common_to_target_charset\n #undef LANG_HOOKS_GIMPLIFY_EXPR\n #define LANG_HOOKS_GIMPLIFY_EXPR cp_gimplify_expr\n-#undef LANG_HOOKS_LOOKUP_NAME\n-#define LANG_HOOKS_LOOKUP_NAME lookup_name_one\n \n #endif /* GCC_CP_OBJCP_COMMON */"}, {"sha": "d87983c1cb9fb05b039ee60e8ade89d42c839c5f", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10e6657a206fdeb7ac00167d1b40cf58e8f5517b/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10e6657a206fdeb7ac00167d1b40cf58e8f5517b/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=10e6657a206fdeb7ac00167d1b40cf58e8f5517b", "patch": "@@ -9293,7 +9293,7 @@ lookup_and_check_tag (enum tag_types tag_code, tree name,\n     {\n       /* First try ordinary name lookup, ignoring hidden class name\n \t injected via friend declaration.  */\n-      decl = lookup_name (name, 2);\n+      decl = lookup_name_prefer_type (name, 2);\n       /* If that fails, the name will be placed in the smallest\n \t non-class, non-function-prototype scope according to 3.3.1/5.\n \t We may already have a hidden name declared as friend in this"}, {"sha": "49830c619792b221d3920c9ce06836cfd49a00e9", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10e6657a206fdeb7ac00167d1b40cf58e8f5517b/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10e6657a206fdeb7ac00167d1b40cf58e8f5517b/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=10e6657a206fdeb7ac00167d1b40cf58e8f5517b", "patch": "@@ -3998,18 +3998,16 @@ lookup_function_nonclass (tree name, tree args, bool block_p)\n }\n \n tree\n-lookup_name (tree name, int prefer_type)\n+lookup_name (tree name)\n {\n-  return lookup_name_real (name, prefer_type, 0, /*block_p=*/true,\n-\t\t\t   0, LOOKUP_COMPLAIN);\n+  return lookup_name_real (name, 0, 0, /*block_p=*/true, 0, LOOKUP_COMPLAIN);\n }\n \n-/* Similar to `lookup_name' for the benefit of common code.  */\n-\n tree\n-lookup_name_one (tree name)\n+lookup_name_prefer_type (tree name, int prefer_type)\n {\n-  return lookup_name (name, 0);\n+  return lookup_name_real (name, prefer_type, 0, /*block_p=*/true,\n+\t\t\t   0, LOOKUP_COMPLAIN);\n }\n \n /* Look up NAME for type used in elaborated name specifier in"}, {"sha": "5a1dc8e34f5b9cee0d8632cabb25cf2e7997a4b5", "filename": "gcc/cp/name-lookup.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10e6657a206fdeb7ac00167d1b40cf58e8f5517b/gcc%2Fcp%2Fname-lookup.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10e6657a206fdeb7ac00167d1b40cf58e8f5517b/gcc%2Fcp%2Fname-lookup.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.h?ref=10e6657a206fdeb7ac00167d1b40cf58e8f5517b", "patch": "@@ -312,8 +312,7 @@ extern void pop_nested_namespace (tree);\n extern void pushlevel_class (void);\n extern void poplevel_class (void);\n extern tree pushdecl_with_scope (tree, cxx_scope *, bool);\n-extern tree lookup_name\t(tree, int);\n-extern tree lookup_name_one (tree);\n+extern tree lookup_name_prefer_type (tree, int);\n extern tree lookup_name_real (tree, int, int, bool, int, int);\n extern tree lookup_type_scope (tree, tag_scope);\n extern tree namespace_binding (tree, tree);"}, {"sha": "4f13a7d073e493f2457c49e7a1cb2512702225ac", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10e6657a206fdeb7ac00167d1b40cf58e8f5517b/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10e6657a206fdeb7ac00167d1b40cf58e8f5517b/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=10e6657a206fdeb7ac00167d1b40cf58e8f5517b", "patch": "@@ -4352,7 +4352,7 @@ lookup_template_class (tree d1,\n \t{\n \t  if (context)\n \t    push_decl_namespace (context);\n-\t  template = lookup_name (d1, /*prefer_type=*/0);\n+\t  template = lookup_name (d1);\n \t  template = maybe_get_template_decl_from_type_decl (template);\n \t  if (context)\n \t    pop_decl_namespace ();\n@@ -5384,7 +5384,7 @@ tsubst_friend_class (tree friend_tmpl, tree args)\n     }\n \n   /* First, we look for a class template.  */\n-  tmpl = lookup_name (DECL_NAME (friend_tmpl), /*prefer_type=*/0);\n+  tmpl = lookup_name (DECL_NAME (friend_tmpl));\n \n   /* But, if we don't find one, it might be because we're in a\n      situation like this:\n@@ -5399,7 +5399,7 @@ tsubst_friend_class (tree friend_tmpl, tree args)\n      for `S<int>', not the TEMPLATE_DECL.  */\n   if (!tmpl || !DECL_CLASS_TEMPLATE_P (tmpl))\n     {\n-      tmpl = lookup_name (DECL_NAME (friend_tmpl), /*prefer_type=*/1);\n+      tmpl = lookup_name_prefer_type (DECL_NAME (friend_tmpl), 1);\n       tmpl = maybe_get_template_decl_from_type_decl (tmpl);\n     }\n \n@@ -8516,7 +8516,7 @@ tsubst_copy_and_build (tree t,\n \t  }\n \n \t/* Look up the name.  */\n-\tdecl = lookup_name (t, 0);\n+\tdecl = lookup_name (t);\n \n \t/* By convention, expressions use ERROR_MARK_NODE to indicate\n \t   failure, not NULL_TREE.  */"}, {"sha": "a17927a2eb26f09dd9e732959847c2527ec3d48f", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10e6657a206fdeb7ac00167d1b40cf58e8f5517b/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10e6657a206fdeb7ac00167d1b40cf58e8f5517b/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=10e6657a206fdeb7ac00167d1b40cf58e8f5517b", "patch": "@@ -234,7 +234,6 @@ extern tree lhd_make_node (enum tree_code);\n #define LANG_HOOKS_INSERT_BLOCK\tinsert_block\n #define LANG_HOOKS_PUSHDECL\tpushdecl\n #define LANG_HOOKS_GETDECLS\tgetdecls\n-#define LANG_HOOKS_LOOKUP_NAME\tlhd_return_null_tree\n #define LANG_HOOKS_WARN_UNUSED_GLOBAL_DECL lhd_warn_unused_global_decl\n #define LANG_HOOKS_WRITE_GLOBALS write_global_declarations\n #define LANG_HOOKS_PREPARE_ASSEMBLE_VARIABLE NULL\n@@ -246,7 +245,6 @@ extern tree lhd_make_node (enum tree_code);\n   LANG_HOOKS_INSERT_BLOCK, \\\n   LANG_HOOKS_PUSHDECL, \\\n   LANG_HOOKS_GETDECLS, \\\n-  LANG_HOOKS_LOOKUP_NAME, \\\n   LANG_HOOKS_WARN_UNUSED_GLOBAL_DECL, \\\n   LANG_HOOKS_WRITE_GLOBALS, \\\n   LANG_HOOKS_PREPARE_ASSEMBLE_VARIABLE, \\"}, {"sha": "cdb547c7cf3140078f9e95a2393cbc0d28b7e0f2", "filename": "gcc/langhooks.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10e6657a206fdeb7ac00167d1b40cf58e8f5517b/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10e6657a206fdeb7ac00167d1b40cf58e8f5517b/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=10e6657a206fdeb7ac00167d1b40cf58e8f5517b", "patch": "@@ -170,12 +170,6 @@ struct lang_hooks_for_decls\n   /* Returns the chain of decls so far in the current scope level.  */\n   tree (*getdecls) (void);\n \n-/* Look up NAME in the current scope and its superiors\n-   in the namespace of variables, functions and typedefs.\n-   Return a ..._DECL node of some kind representing its definition,\n-   or return 0 if it is undefined.  */\n-  tree (*lookup_name) (tree);\n-\n   /* Returns true when we should warn for an unused global DECL.\n      We will already have checked that it has static binding.  */\n   bool (*warn_unused_global) (tree);"}]}