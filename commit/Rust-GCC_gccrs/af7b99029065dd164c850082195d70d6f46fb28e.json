{"sha": "af7b99029065dd164c850082195d70d6f46fb28e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWY3Yjk5MDI5MDY1ZGQxNjRjODUwMDgyMTk1ZDcwZDZmNDZmYjI4ZQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-05-24T15:26:25Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-05-24T15:26:25Z"}, "message": "typeck.c (build_static_cast): Don't allow static_casts that cast away constness.\n\n\t* typeck.c (build_static_cast): Don't allow static_casts that cast\n\taway constness.\n\t(casts_away_constness_r): New function.\n\t(casts_away_constness): Likewise.\n\nFrom-SVN: r27128", "tree": {"sha": "ca3847974001bbec2a339db5d2379484a1d6c8c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca3847974001bbec2a339db5d2379484a1d6c8c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af7b99029065dd164c850082195d70d6f46fb28e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af7b99029065dd164c850082195d70d6f46fb28e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af7b99029065dd164c850082195d70d6f46fb28e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af7b99029065dd164c850082195d70d6f46fb28e/comments", "author": null, "committer": null, "parents": [{"sha": "671d0648e08e746d404b9f6422965ef52e6fc77c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/671d0648e08e746d404b9f6422965ef52e6fc77c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/671d0648e08e746d404b9f6422965ef52e6fc77c"}], "stats": {"total": 139, "additions": 139, "deletions": 0}, "files": [{"sha": "250f063b76854c905558cdd919996f78a29aad01", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af7b99029065dd164c850082195d70d6f46fb28e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af7b99029065dd164c850082195d70d6f46fb28e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=af7b99029065dd164c850082195d70d6f46fb28e", "patch": "@@ -1,5 +1,10 @@\n 1999-05-24  Mark Mitchell  <mark@codesourcery.com>\n \n+\t* typeck.c (build_static_cast): Don't allow static_casts that cast\n+\taway constness.\n+\t(casts_away_constness_r): New function.\n+\t(casts_away_constness): Likewise.\n+\n \t* decl.c (lookup_tag): Remove code no longer needed after\n \tname-lookup improvements.\n \t* decl2.c (handle_class_head): Make error-recovery more robust."}, {"sha": "13a490b2498ebf838b18136ed8933b0145049b84", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af7b99029065dd164c850082195d70d6f46fb28e/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af7b99029065dd164c850082195d70d6f46fb28e/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=af7b99029065dd164c850082195d70d6f46fb28e", "patch": "@@ -59,6 +59,8 @@ static tree build_component_addr PROTO((tree, tree));\n static tree qualify_type PROTO((tree, tree));\n static tree get_delta_difference PROTO((tree, tree, int));\n static int comp_cv_target_types PROTO((tree, tree, int));\n+static void casts_away_constness_r PROTO((tree *, tree *));\n+static int casts_away_constness PROTO ((tree, tree));\n \n /* Return the target type of TYPE, which meas return T for:\n    T*, T&, T[], T (...), and otherwise, just T.  */\n@@ -5546,6 +5548,17 @@ build_static_cast (type, expr)\n \t   && can_convert (intype, type))\n     ok = 1;\n \n+  /* [expr.static.cast]\n+\n+     The static_cast operator shall not be used to cast away\n+     constnes.  */\n+  if (ok && casts_away_constness (intype, type))\n+    {\n+      cp_error (\"static_cast from `%T' to `%T' casts away constness\",\n+\t\tintype, type);\n+      return error_mark_node;\n+    }\n+\n   if (ok)\n     return build_c_cast (type, expr);\n \n@@ -7738,3 +7751,114 @@ cp_has_mutable_p (type)\n \n   return CLASS_TYPE_P (type) && CLASSTYPE_HAS_MUTABLE (type);\n }\n+\n+/* Subroutine of casts_away_constness.  Make T1 and T2 point at\n+   exemplar types such that casting T1 to T2 is casting away castness\n+   if and only if there is no implicit conversion from T1 to T2.  */\n+\n+static void\n+casts_away_constness_r (t1, t2)\n+     tree *t1;\n+     tree *t2;\n+{\n+  int quals1;\n+  int quals2;\n+\n+  /* [expr.const.cast]\n+\n+     For multi-level pointer to members and multi-level mixed pointers\n+     and pointers to members (conv.qual), the \"member\" aspect of a\n+     pointer to member level is ignored when determining if a const\n+     cv-qualifier has been cast away.  */\n+  if (TYPE_PTRMEM_P (*t1))\n+    *t1 = build_pointer_type (TREE_TYPE (*t1));\n+  if (TYPE_PTRMEM_P (*t2))\n+    *t2 = build_pointer_type (TREE_TYPE (*t2));\n+\n+  /* [expr.const.cast]\n+\n+     For  two  pointer types:\n+\n+            X1 is T1cv1,1 * ... cv1,N *   where T1 is not a pointer type\n+            X2 is T2cv2,1 * ... cv2,M *   where T2 is not a pointer type\n+            K is min(N,M)\n+\n+     casting from X1 to X2 casts away constness if, for a non-pointer\n+     type T there does not exist an implicit conversion (clause\n+     _conv_) from:\n+\n+            Tcv1,(N-K+1) * cv1,(N-K+2) * ... cv1,N *\n+      \n+     to\n+\n+            Tcv2,(M-K+1) * cv2,(M-K+2) * ... cv2,M *.  */\n+\n+  if (TREE_CODE (*t1) != POINTER_TYPE\n+      || TREE_CODE (*t2) != POINTER_TYPE)\n+    {\n+      *t1 = cp_build_qualified_type (void_type_node,\n+\t\t\t\t     CP_TYPE_QUALS (*t1));\n+      *t2 = cp_build_qualified_type (void_type_node,\n+\t\t\t\t     CP_TYPE_QUALS (*t2));\n+      return;\n+    }\n+  \n+  quals1 = CP_TYPE_QUALS (*t1);\n+  quals2 = CP_TYPE_QUALS (*t2);\n+  *t1 = TREE_TYPE (*t1);\n+  *t2 = TREE_TYPE (*t2);\n+  casts_away_constness_r (t1, t2);\n+  *t1 = build_pointer_type (*t1);\n+  *t2 = build_pointer_type (*t2);\n+  *t1 = cp_build_qualified_type (*t1, quals1);\n+  *t2 = cp_build_qualified_type (*t2, quals2);\n+}\n+\n+/* Returns non-zero if casting from TYPE1 to TYPE2 casts away\n+   constness.  */\n+\n+static int\n+casts_away_constness (t1, t2)\n+     tree t1;\n+     tree t2;\n+{\n+  if (TREE_CODE (t2) == REFERENCE_TYPE)\n+    {\n+      /* [expr.const.cast]\n+\t \n+\t Casting from an lvalue of type T1 to an lvalue of type T2\n+\t using a reference cast casts away constness if a cast from an\n+\t rvalue of type \"pointer to T1\" to the type \"pointer to T2\"\n+\t casts away constness.  */\n+      t1 = (TREE_CODE (t1) == REFERENCE_TYPE\n+\t    ? TREE_TYPE (t1) : t1);\n+      return casts_away_constness (build_pointer_type (t1),\n+\t\t\t\t   build_pointer_type (TREE_TYPE (t2)));\n+    }\n+\n+  if (TYPE_PTRMEM_P (t1) && TYPE_PTRMEM_P (t2))\n+    /* [expr.const.cast]\n+       \n+       Casting from an rvalue of type \"pointer to data member of X\n+       of type T1\" to the type \"pointer to data member of Y of type\n+       T2\" casts away constness if a cast from an rvalue of type\n+       \"poitner to T1\" to the type \"pointer to T2\" casts away\n+       constness.  */\n+    return casts_away_constness (build_pointer_type (TREE_TYPE (t1)),\n+\t\t\t\t build_pointer_type (TREE_TYPE (t2)));\n+\n+  /* Casting away constness is only something that makes sense for\n+     pointer or reference types.  */\n+  if (TREE_CODE (t1) != POINTER_TYPE \n+      || TREE_CODE (t2) != POINTER_TYPE)\n+    return 0;\n+\n+  /* Top-level qualifiers don't matter.  */\n+  t1 = TYPE_MAIN_VARIANT (t1);\n+  t2 = TYPE_MAIN_VARIANT (t2);\n+  casts_away_constness_r (&t1, &t2);\n+  if (!can_convert (t2, t1))\n+    return 1;\n+\n+  return 0;\n+}"}, {"sha": "8d99ed07a8282e57704d590bcf8fa30bc8ec0b39", "filename": "gcc/testsuite/g++.old-deja/g++.other/sc1.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af7b99029065dd164c850082195d70d6f46fb28e/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fsc1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af7b99029065dd164c850082195d70d6f46fb28e/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fsc1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fsc1.C?ref=af7b99029065dd164c850082195d70d6f46fb28e", "patch": "@@ -0,0 +1,10 @@\n+// Build don't link:\n+// Origin: Mark Mitchell <mark@codesourcery.com>\n+\n+void f() {\n+  int *i = 0;\n+  const int *c = 0;\n+\n+  static_cast <const int *>(i);\n+  static_cast <int *>(c);  // ERROR - casts away constness\n+}"}]}