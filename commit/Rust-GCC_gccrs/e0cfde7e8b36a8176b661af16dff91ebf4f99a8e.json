{"sha": "e0cfde7e8b36a8176b661af16dff91ebf4f99a8e", "node_id": "C_kwDOANBUbNoAKGUwY2ZkZTdlOGIzNmE4MTc2YjY2MWFmMTZkZmY5MWViZjRmOTlhOGU", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-11-10T10:27:52Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-11-11T13:52:10Z"}, "message": "[range-ops] Remove specialized fold_range methods for various operators.\n\nRemove some specialized fold_range methods that were merely setting\nmaybe nonzero masks, as these are now subsumed by the generic version.\n\ngcc/ChangeLog:\n\n\t* range-op.cc (operator_mult::fold_range): Remove.\n\t(operator_div::fold_range): Remove.\n\t(operator_bitwise_and): Remove.", "tree": {"sha": "211fd5dfadced15f009861553e73e32f735b44ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/211fd5dfadced15f009861553e73e32f735b44ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0cfde7e8b36a8176b661af16dff91ebf4f99a8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0cfde7e8b36a8176b661af16dff91ebf4f99a8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0cfde7e8b36a8176b661af16dff91ebf4f99a8e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0cfde7e8b36a8176b661af16dff91ebf4f99a8e/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0662c74969820fb576c8a2f35e946581c2c6f9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0662c74969820fb576c8a2f35e946581c2c6f9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0662c74969820fb576c8a2f35e946581c2c6f9d"}], "stats": {"total": 52, "additions": 0, "deletions": 52}, "files": [{"sha": "6fa3b1515961dd364bebe8c9aa840ce57821219d", "filename": "gcc/range-op.cc", "status": "modified", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0cfde7e8b36a8176b661af16dff91ebf4f99a8e/gcc%2Frange-op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0cfde7e8b36a8176b661af16dff91ebf4f99a8e/gcc%2Frange-op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frange-op.cc?ref=e0cfde7e8b36a8176b661af16dff91ebf4f99a8e", "patch": "@@ -1790,13 +1790,9 @@ cross_product_operator::wi_cross_product (irange &r, tree type,\n \n class operator_mult : public cross_product_operator\n {\n-  using range_operator::fold_range;\n   using range_operator::op1_range;\n   using range_operator::op2_range;\n public:\n-  virtual bool fold_range (irange &r, tree type,\n-\t\t\t   const irange &lh, const irange &rh,\n-\t\t\t   relation_trio = TRIO_VARYING) const final override;\n   virtual void wi_fold (irange &r, tree type,\n \t\t        const wide_int &lh_lb,\n \t\t        const wide_int &lh_ub,\n@@ -1815,18 +1811,6 @@ class operator_mult : public cross_product_operator\n \t\t\t  relation_trio) const final override;\n } op_mult;\n \n-bool\n-operator_mult::fold_range (irange &r, tree type,\n-\t\t\t   const irange &lh, const irange &rh,\n-\t\t\t   relation_trio trio) const\n-{\n-  if (!cross_product_operator::fold_range (r, type, lh, rh, trio))\n-    return false;\n-\n-  update_known_bitmask (r, MULT_EXPR, lh, rh);\n-  return true;\n-}\n-\n bool\n operator_mult::op1_range (irange &r, tree type,\n \t\t\t  const irange &lhs, const irange &op2,\n@@ -1979,23 +1963,8 @@ class operator_div : public cross_product_operator\n   virtual bool wi_op_overflows (wide_int &res, tree type,\n \t\t\t\tconst wide_int &, const wide_int &)\n     const final override;\n-  virtual bool fold_range (irange &r, tree type,\n-\t\t\t   const irange &lh, const irange &rh,\n-\t\t\t   relation_trio trio) const final override;\n };\n \n-bool\n-operator_div::fold_range (irange &r, tree type,\n-\t\t\t  const irange &lh, const irange &rh,\n-\t\t\t  relation_trio trio) const\n-{\n-  if (!cross_product_operator::fold_range (r, type, lh, rh, trio))\n-    return false;\n-\n-  update_known_bitmask (r, m_code, lh, rh);\n-  return true;\n-}\n-\n bool\n operator_div::wi_op_overflows (wide_int &res, tree type,\n \t\t\t       const wide_int &w0, const wide_int &w1) const\n@@ -2834,14 +2803,9 @@ operator_logical_and::op2_range (irange &r, tree type,\n \n class operator_bitwise_and : public range_operator\n {\n-  using range_operator::fold_range;\n   using range_operator::op1_range;\n   using range_operator::op2_range;\n public:\n-  virtual bool fold_range (irange &r, tree type,\n-\t\t\t   const irange &lh,\n-\t\t\t   const irange &rh,\n-\t\t\t   relation_trio rel = TRIO_VARYING) const;\n   virtual bool op1_range (irange &r, tree type,\n \t\t\t  const irange &lhs,\n \t\t\t  const irange &op2,\n@@ -2865,22 +2829,6 @@ class operator_bitwise_and : public range_operator\n \t\t\t\tconst irange &op2) const;\n } op_bitwise_and;\n \n-bool\n-operator_bitwise_and::fold_range (irange &r, tree type,\n-\t\t\t\t  const irange &lh,\n-\t\t\t\t  const irange &rh,\n-\t\t\t\t  relation_trio) const\n-{\n-  if (range_operator::fold_range (r, type, lh, rh))\n-    {\n-      if (!r.undefined_p () && !lh.undefined_p () && !rh.undefined_p ())\n-\tr.set_nonzero_bits (wi::bit_and (lh.get_nonzero_bits (),\n-\t\t\t\t\t rh.get_nonzero_bits ()));\n-      return true;\n-    }\n-  return false;\n-}\n-\n \n // Optimize BIT_AND_EXPR, BIT_IOR_EXPR and BIT_XOR_EXPR of signed types\n // by considering the number of leading redundant sign bit copies."}]}