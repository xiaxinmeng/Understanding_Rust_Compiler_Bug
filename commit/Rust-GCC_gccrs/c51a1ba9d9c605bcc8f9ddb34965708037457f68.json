{"sha": "c51a1ba9d9c605bcc8f9ddb34965708037457f68", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzUxYTFiYTlkOWM2MDViY2M4ZjlkZGIzNDk2NTcwODAzNzQ1N2Y2OA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2005-03-18T20:47:27Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2005-03-18T20:47:27Z"}, "message": "c-common.c, [...]: Use %D for declarations in diagnostics and %E for identifiers, not %s.\n\n\t* c-common.c, c-decl.c, c-format.c, c-typeck.c: Use %D for\n\tdeclarations in diagnostics and %E for identifiers, not %s.\n\nFrom-SVN: r96701", "tree": {"sha": "079951eb2db644175096b5fcc82f3144eb9b7381", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/079951eb2db644175096b5fcc82f3144eb9b7381"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c51a1ba9d9c605bcc8f9ddb34965708037457f68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c51a1ba9d9c605bcc8f9ddb34965708037457f68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c51a1ba9d9c605bcc8f9ddb34965708037457f68", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c51a1ba9d9c605bcc8f9ddb34965708037457f68/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33156717fa04cfb12d1b2c70ba1bdcd236e5a6b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33156717fa04cfb12d1b2c70ba1bdcd236e5a6b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33156717fa04cfb12d1b2c70ba1bdcd236e5a6b9"}], "stats": {"total": 165, "additions": 76, "deletions": 89}, "files": [{"sha": "a35d25843560034b6362475a818e733848b28e7c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c51a1ba9d9c605bcc8f9ddb34965708037457f68/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c51a1ba9d9c605bcc8f9ddb34965708037457f68/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c51a1ba9d9c605bcc8f9ddb34965708037457f68", "patch": "@@ -1,3 +1,8 @@\n+2005-03-18  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\t* c-common.c, c-decl.c, c-format.c, c-typeck.c: Use %D for\n+\tdeclarations in diagnostics and %E for identifiers, not %s.\n+\n 2005-03-18  Jan Hubicka  <jh@suse.cz>\n \t    Dale Johannesen  <dalej@apple.com>\n "}, {"sha": "651728616357bc7e7d4f4f0e0e3de0bf2d17ba09", "filename": "gcc/c-common.c", "status": "modified", "additions": 36, "deletions": 43, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c51a1ba9d9c605bcc8f9ddb34965708037457f68/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c51a1ba9d9c605bcc8f9ddb34965708037457f68/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=c51a1ba9d9c605bcc8f9ddb34965708037457f68", "patch": "@@ -1146,8 +1146,7 @@ warn_for_collisions_1 (tree written, tree writer, struct tlist *list,\n \t  && DECL_NAME (list->expr))\n \t{\n \t  warned_ids = new_tlist (warned_ids, written, NULL_TREE);\n-\t  warning (\"operation on %qs may be undefined\",\n-\t\t   IDENTIFIER_POINTER (DECL_NAME (list->expr)));\n+\t  warning (\"operation on %qE may be undefined\", list->expr);\n \t}\n       list = list->next;\n     }\n@@ -3958,7 +3957,7 @@ handle_packed_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n      that changes what the typedef is typing.  */\n   else\n     {\n-      warning (\"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n+      warning (\"%qE attribute ignored\", name);\n       *no_add_attrs = true;\n     }\n \n@@ -3977,7 +3976,7 @@ handle_nocommon_attribute (tree *node, tree name,\n     DECL_COMMON (*node) = 0;\n   else\n     {\n-      warning (\"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n+      warning (\"%qE attribute ignored\", name);\n       *no_add_attrs = true;\n     }\n \n@@ -3995,7 +3994,7 @@ handle_common_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n     DECL_COMMON (*node) = 1;\n   else\n     {\n-      warning (\"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n+      warning (\"%qE attribute ignored\", name);\n       *no_add_attrs = true;\n     }\n \n@@ -4022,7 +4021,7 @@ handle_noreturn_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n \t\t\t     TYPE_READONLY (TREE_TYPE (type)), 1));\n   else\n     {\n-      warning (\"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n+      warning (\"%qE attribute ignored\", name);\n       *no_add_attrs = true;\n     }\n \n@@ -4041,7 +4040,7 @@ handle_noinline_attribute (tree *node, tree name,\n     DECL_UNINLINABLE (*node) = 1;\n   else\n     {\n-      warning (\"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n+      warning (\"%qE attribute ignored\", name);\n       *no_add_attrs = true;\n     }\n \n@@ -4064,7 +4063,7 @@ handle_always_inline_attribute (tree *node, tree name,\n     }\n   else\n     {\n-      warning (\"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n+      warning (\"%qE attribute ignored\", name);\n       *no_add_attrs = true;\n     }\n \n@@ -4088,7 +4087,7 @@ handle_used_attribute (tree *pnode, tree name, tree ARG_UNUSED (args),\n     }\n   else\n     {\n-      warning (\"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n+      warning (\"%qE attribute ignored\", name);\n       *no_add_attrs = true;\n     }\n \n@@ -4114,7 +4113,7 @@ handle_unused_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n \tTREE_USED (decl) = 1;\n       else\n \t{\n-\t  warning (\"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n+\t  warning (\"%qE attribute ignored\", name);\n \t  *no_add_attrs = true;\n \t}\n     }\n@@ -4148,7 +4147,7 @@ handle_const_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n \t\t\t     TREE_THIS_VOLATILE (TREE_TYPE (type))));\n   else\n     {\n-      warning (\"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n+      warning (\"%qE attribute ignored\", name);\n       *no_add_attrs = true;\n     }\n \n@@ -4192,7 +4191,7 @@ handle_transparent_union_attribute (tree *node, tree name,\n     DECL_TRANSPARENT_UNION (decl) = 1;\n   else\n     {\n-      warning (\"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n+      warning (\"%qE attribute ignored\", name);\n       *no_add_attrs = true;\n     }\n \n@@ -4220,7 +4219,7 @@ handle_constructor_attribute (tree *node, tree name,\n     }\n   else\n     {\n-      warning (\"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n+      warning (\"%qE attribute ignored\", name);\n       *no_add_attrs = true;\n     }\n \n@@ -4248,7 +4247,7 @@ handle_destructor_attribute (tree *node, tree name,\n     }\n   else\n     {\n-      warning (\"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n+      warning (\"%qE attribute ignored\", name);\n       *no_add_attrs = true;\n     }\n \n@@ -4267,7 +4266,7 @@ handle_mode_attribute (tree *node, tree name, tree args,\n   *no_add_attrs = true;\n \n   if (TREE_CODE (TREE_VALUE (args)) != IDENTIFIER_NODE)\n-    warning (\"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n+    warning (\"%qE attribute ignored\", name);\n   else\n     {\n       int j;\n@@ -4598,7 +4597,7 @@ handle_alias_attribute (tree *node, tree name, tree args,\n     }\n   else\n     {\n-      warning (\"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n+      warning (\"%qE attribute ignored\", name);\n       *no_add_attrs = true;\n     }\n \n@@ -4622,14 +4621,13 @@ handle_visibility_attribute (tree *node, tree name, tree args,\n     {\n       if (TREE_CODE (*node) != RECORD_TYPE && TREE_CODE (*node) != UNION_TYPE)\n        {\n-         warning (\"%qs attribute ignored on non-class types\",\n-                  IDENTIFIER_POINTER (name));\n+         warning (\"%qE attribute ignored on non-class types\", name);\n          return NULL_TREE;\n        }\n     }\n   else if (decl_function_context (decl) != 0 || !TREE_PUBLIC (decl))\n     {\n-      warning (\"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n+      warning (\"%qE attribute ignored\", name);\n       return NULL_TREE;\n     }\n \n@@ -4721,7 +4719,7 @@ handle_tls_model_attribute (tree *node, tree name, tree args,\n \n   if (!DECL_THREAD_LOCAL (decl))\n     {\n-      warning (\"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n+      warning (\"%qE attribute ignored\", name);\n       *no_add_attrs = true;\n     }\n   else\n@@ -4788,7 +4786,7 @@ handle_malloc_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n   /* ??? TODO: Support types.  */\n   else\n     {\n-      warning (\"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n+      warning (\"%qE attribute ignored\", name);\n       *no_add_attrs = true;\n     }\n \n@@ -4806,7 +4804,7 @@ handle_returns_twice_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n     DECL_IS_RETURNS_TWICE (*node) = 1;\n   else\n     {\n-      warning (\"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n+      warning (\"%qE attribute ignored\", name);\n       *no_add_attrs = true;\n     }\n \n@@ -4852,7 +4850,7 @@ handle_pure_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n   /* ??? TODO: Support types.  */\n   else\n     {\n-      warning (\"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n+      warning (\"%qE attribute ignored\", name);\n       *no_add_attrs = true;\n     }\n \n@@ -4882,7 +4880,7 @@ handle_deprecated_attribute (tree *node, tree name,\n {\n   tree type = NULL_TREE;\n   int warn = 0;\n-  const char *what = NULL;\n+  tree what = NULL_TREE;\n \n   if (DECL_P (*node))\n     {\n@@ -4914,17 +4912,15 @@ handle_deprecated_attribute (tree *node, tree name,\n       if (type && TYPE_NAME (type))\n \t{\n \t  if (TREE_CODE (TYPE_NAME (type)) == IDENTIFIER_NODE)\n-\t    what = IDENTIFIER_POINTER (TYPE_NAME (*node));\n+\t    what = TYPE_NAME (*node);\n \t  else if (TREE_CODE (TYPE_NAME (type)) == TYPE_DECL\n \t\t   && DECL_NAME (TYPE_NAME (type)))\n-\t    what = IDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (type)));\n+\t    what = DECL_NAME (TYPE_NAME (type));\n \t}\n       if (what)\n-\twarning (\"%qs attribute ignored for %qs\",\n-\t\t  IDENTIFIER_POINTER (name), what);\n+\twarning (\"%qE attribute ignored for %qE\", name, what);\n       else\n-\twarning (\"%qs attribute ignored\",\n-\t\t      IDENTIFIER_POINTER (name));\n+\twarning (\"%qE attribute ignored\", name);\n     }\n \n   return NULL_TREE;\n@@ -4952,7 +4948,7 @@ handle_vector_size_attribute (tree *node, tree name, tree args,\n \n   if (!host_integerp (size, 1))\n     {\n-      warning (\"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n+      warning (\"%qE attribute ignored\", name);\n       return NULL_TREE;\n     }\n \n@@ -4981,8 +4977,7 @@ handle_vector_size_attribute (tree *node, tree name, tree args,\n \t  && GET_MODE_CLASS (orig_mode) != MODE_INT)\n       || !host_integerp (TYPE_SIZE_UNIT (type), 1))\n     {\n-      error (\"invalid vector type for attribute %qs\",\n-\t     IDENTIFIER_POINTER (name));\n+      error (\"invalid vector type for attribute %qE\", name);\n       return NULL_TREE;\n     }\n \n@@ -5231,7 +5226,7 @@ handle_nothrow_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n   /* ??? TODO: Support types.  */\n   else\n     {\n-      warning (\"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n+      warning (\"%qE attribute ignored\", name);\n       *no_add_attrs = true;\n     }\n \n@@ -5254,7 +5249,7 @@ handle_cleanup_attribute (tree *node, tree name, tree args,\n      we'd be missing too much, since we do have attribute constructor.  */\n   if (TREE_CODE (decl) != VAR_DECL || TREE_STATIC (decl))\n     {\n-      warning (\"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n+      warning (\"%qE attribute ignored\", name);\n       *no_add_attrs = true;\n       return NULL_TREE;\n     }\n@@ -5293,7 +5288,7 @@ handle_warn_unused_result_attribute (tree *node, tree name,\n   /* Ignore the attribute for functions not returning any value.  */\n   if (VOID_TYPE_P (TREE_TYPE (*node)))\n     {\n-      warning (\"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n+      warning (\"%qE attribute ignored\", name);\n       *no_add_attrs = true;\n     }\n \n@@ -5310,8 +5305,7 @@ handle_sentinel_attribute (tree *node, tree name, tree args,\n \n   if (!params)\n     {\n-      warning (\"%qs attribute requires prototypes with named arguments\",\n-               IDENTIFIER_POINTER (name));\n+      warning (\"%qE attribute requires prototypes with named arguments\", name);\n       *no_add_attrs = true;\n     }\n   else\n@@ -5321,8 +5315,7 @@ handle_sentinel_attribute (tree *node, tree name, tree args,\n \n       if (VOID_TYPE_P (TREE_VALUE (params)))\n         {\n-\t  warning (\"%qs attribute only applies to variadic functions\",\n-\t\t   IDENTIFIER_POINTER (name));\n+\t  warning (\"%qE attribute only applies to variadic functions\", name);\n \t  *no_add_attrs = true;\n \t}\n     }\n@@ -5567,8 +5560,8 @@ c_parse_error (const char *msgid, enum cpp_ttype token, tree value)\n     message = catenate_messages (msgid, \" before numeric constant\");\n   else if (token == CPP_NAME)\n     {\n-      message = catenate_messages (msgid, \" before %qs\");\n-      error (message, IDENTIFIER_POINTER (value));\n+      message = catenate_messages (msgid, \" before %qE\");\n+      error (message, value);\n       free (message);\n       message = NULL;\n     }\n@@ -5712,7 +5705,7 @@ fold_offsetof_1 (tree expr)\n       if (DECL_C_BIT_FIELD (t))\n \t{\n \t  error (\"attempt to take address of bit-field structure \"\n-\t\t \"member %qs\", IDENTIFIER_POINTER (DECL_NAME (t)));\n+\t\t \"member %qD\", t);\n \t  return error_mark_node;\n \t}\n       off = size_binop (PLUS_EXPR, DECL_FIELD_OFFSET (t),"}, {"sha": "103b50db0fc0cf476676432d54acd0a618c98168", "filename": "gcc/c-decl.c", "status": "modified", "additions": 17, "deletions": 25, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c51a1ba9d9c605bcc8f9ddb34965708037457f68/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c51a1ba9d9c605bcc8f9ddb34965708037457f68/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=c51a1ba9d9c605bcc8f9ddb34965708037457f68", "patch": "@@ -2370,8 +2370,7 @@ lookup_label (tree name)\n \n   if (current_function_decl == 0)\n     {\n-      error (\"label %qs referenced outside of any function\",\n-\t     IDENTIFIER_POINTER (name));\n+      error (\"label %qE referenced outside of any function\", name);\n       return 0;\n     }\n \n@@ -2413,7 +2412,7 @@ declare_label (tree name)\n      at this scope */\n   if (b && B_IN_CURRENT_SCOPE (b))\n     {\n-      error (\"duplicate label declaration %qs\", IDENTIFIER_POINTER (name));\n+      error (\"duplicate label declaration %qE\", name);\n       locate_old_decl (b->decl, error);\n \n       /* Just use the previous declaration.  */\n@@ -2471,8 +2470,7 @@ define_label (location_t location, tree name)\n \n   if (warn_traditional && !in_system_header && lookup_name (name))\n     warning (\"%Htraditional C lacks a separate namespace for labels, \"\n-             \"identifier %qs conflicts\", &location,\n-\t     IDENTIFIER_POINTER (name));\n+             \"identifier %qE conflicts\", &location, name);\n \n   /* Mark label as having been defined.  */\n   DECL_INITIAL (label) = error_mark_node;\n@@ -2536,9 +2534,8 @@ void\n pending_xref_error (void)\n {\n   if (pending_invalid_xref != 0)\n-    error (\"%H%qs defined as wrong kind of tag\",\n-           &pending_invalid_xref_location,\n-           IDENTIFIER_POINTER (pending_invalid_xref));\n+    error (\"%H%qE defined as wrong kind of tag\",\n+           &pending_invalid_xref_location, pending_invalid_xref);\n   pending_invalid_xref = 0;\n }\n \n@@ -5008,18 +5005,16 @@ start_struct (enum tree_code code, tree name)\n       if (TYPE_SIZE (ref))\n         {\n \t  if (code == UNION_TYPE)\n-\t    error (\"redefinition of %<union %s%>\", IDENTIFIER_POINTER (name));\n+\t    error (\"redefinition of %<union %E%>\", name);\n           else\n-\t    error (\"redefinition of %<struct %s%>\", IDENTIFIER_POINTER (name));\n+\t    error (\"redefinition of %<struct %E%>\", name);\n \t}\n       else if (C_TYPE_BEING_DEFINED (ref))\n \t{\n \t  if (code == UNION_TYPE)\n-\t    error (\"nested redefinition of %<union %s%>\",\n-\t\t   IDENTIFIER_POINTER (name));\n+\t    error (\"nested redefinition of %<union %E%>\", name);\n           else\n-\t    error (\"nested redefinition of %<struct %s%>\",\n-\t\t   IDENTIFIER_POINTER (name));\n+\t    error (\"nested redefinition of %<struct %E%>\", name);\n \t}\n     }\n   else\n@@ -5454,14 +5449,14 @@ start_enum (tree name)\n     }\n \n   if (C_TYPE_BEING_DEFINED (enumtype))\n-    error (\"nested redefinition of %<enum %s%>\", IDENTIFIER_POINTER (name));\n+    error (\"nested redefinition of %<enum %E%>\", name);\n \n   C_TYPE_BEING_DEFINED (enumtype) = 1;\n \n   if (TYPE_VALUES (enumtype) != 0)\n     {\n       /* This enum is a named one that has been declared already.  */\n-      error (\"redeclaration of %<enum %s%>\", IDENTIFIER_POINTER (name));\n+      error (\"redeclaration of %<enum %E%>\", name);\n \n       /* Completely replace its old definition.\n \t The old enumerators remain defined, however.  */\n@@ -6799,7 +6794,7 @@ declspecs_add_qual (struct c_declspecs *specs, tree qual)\n       gcc_unreachable ();\n     }\n   if (dupe && pedantic && !flag_isoc99)\n-    pedwarn (\"duplicate %qs\", IDENTIFIER_POINTER (qual));\n+    pedwarn (\"duplicate %qE\", qual);\n   return specs;\n }\n \n@@ -6950,7 +6945,7 @@ declspecs_add_type (struct c_declspecs *specs, struct c_typespec spec)\n \t    }\n \n \t  if (dupe)\n-\t    error (\"duplicate %qs\", IDENTIFIER_POINTER (type));\n+\t    error (\"duplicate %qE\", type);\n \n \t  return specs;\n \t}\n@@ -7079,8 +7074,7 @@ declspecs_add_type (struct c_declspecs *specs, struct c_typespec spec)\n     {\n       tree t = lookup_name (type);\n       if (!t || TREE_CODE (t) != TYPE_DECL)\n-\terror (\"%qs fails to be a typedef or built in type\",\n-\t       IDENTIFIER_POINTER (type));\n+\terror (\"%qE fails to be a typedef or built in type\", type);\n       else if (TREE_TYPE (t) == error_mark_node)\n \t;\n       else\n@@ -7112,8 +7106,7 @@ declspecs_add_scspec (struct c_declspecs *specs, tree scspec)\n \t      && C_IS_RESERVED_WORD (scspec));\n   i = C_RID_CODE (scspec);\n   if (extra_warnings && specs->non_sc_seen_p)\n-    warning (\"%qs is not at beginning of declaration\",\n-\t     IDENTIFIER_POINTER (scspec));\n+    warning (\"%qE is not at beginning of declaration\", scspec);\n   switch (i)\n     {\n     case RID_INLINE:\n@@ -7162,7 +7155,7 @@ declspecs_add_scspec (struct c_declspecs *specs, tree scspec)\n   if (n != csc_none && n == specs->storage_class)\n     dupe = true;\n   if (dupe)\n-    error (\"duplicate %qs\", IDENTIFIER_POINTER (scspec));\n+    error (\"duplicate %qE\", scspec);\n   if (n != csc_none)\n     {\n       if (specs->storage_class != csc_none && n != specs->storage_class)\n@@ -7174,8 +7167,7 @@ declspecs_add_scspec (struct c_declspecs *specs, tree scspec)\n \t  specs->storage_class = n;\n \t  if (n != csc_extern && n != csc_static && specs->thread_p)\n \t    {\n-\t      error (\"%<__thread%> used with %qs\",\n-\t\t     IDENTIFIER_POINTER (scspec));\n+\t      error (\"%<__thread%> used with %qE\", scspec);\n \t      specs->thread_p = false;\n \t    }\n \t}"}, {"sha": "914d6cc97928293ad5121ed6a14874d1e40fa69b", "filename": "gcc/c-format.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c51a1ba9d9c605bcc8f9ddb34965708037457f68/gcc%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c51a1ba9d9c605bcc8f9ddb34965708037457f68/gcc%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-format.c?ref=c51a1ba9d9c605bcc8f9ddb34965708037457f68", "patch": "@@ -199,7 +199,8 @@ decode_format_attr (tree args, function_format_info *info, int validated_p)\n       if (info->format_type == format_type_error)\n \t{\n \t  gcc_assert (!validated_p);\n-\t  warning (\"%qs is an unrecognized format function type\", p);\n+\t  warning (\"%qE is an unrecognized format function type\",\n+\t\t   format_type_id);\n \t  return false;\n \t}\n     }"}, {"sha": "6f2a6bcb2382118f0211e44fb0e4f09db7e71b98", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c51a1ba9d9c605bcc8f9ddb34965708037457f68/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c51a1ba9d9c605bcc8f9ddb34965708037457f68/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=c51a1ba9d9c605bcc8f9ddb34965708037457f68", "patch": "@@ -136,8 +136,7 @@ c_incomplete_type_error (tree value, tree type)\n \n   if (value != 0 && (TREE_CODE (value) == VAR_DECL\n \t\t     || TREE_CODE (value) == PARM_DECL))\n-    error (\"%qs has an incomplete type\",\n-\t   IDENTIFIER_POINTER (DECL_NAME (value)));\n+    error (\"%qD has an incomplete type\", value);\n   else\n     {\n     retry:\n@@ -180,12 +179,11 @@ c_incomplete_type_error (tree value, tree type)\n \t}\n \n       if (TREE_CODE (TYPE_NAME (type)) == IDENTIFIER_NODE)\n-\terror (\"invalid use of undefined type %<%s %s%>\",\n-\t       type_code_string, IDENTIFIER_POINTER (TYPE_NAME (type)));\n+\terror (\"invalid use of undefined type %<%s %E%>\",\n+\t       type_code_string, TYPE_NAME (type));\n       else\n \t/* If this type has a typedef-name, the TYPE_NAME is a TYPE_DECL.  */\n-\terror (\"invalid use of incomplete typedef %qs\",\n-\t       IDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (type))));\n+\terror (\"invalid use of incomplete typedef %qD\", TYPE_NAME (type));\n     }\n }\n \n@@ -1556,8 +1554,7 @@ build_component_ref (tree datum, tree component)\n \n       if (!field)\n \t{\n-\t  error (\"%qT has no member named %qs\", type,\n-\t\t IDENTIFIER_POINTER (component));\n+\t  error (\"%qT has no member named %qE\", type, component);\n \t  return error_mark_node;\n \t}\n \n@@ -1592,8 +1589,8 @@ build_component_ref (tree datum, tree component)\n       return ref;\n     }\n   else if (code != ERROR_MARK)\n-    error (\"request for member %qs in something not a structure or union\",\n-\t    IDENTIFIER_POINTER (component));\n+    error (\"request for member %qE in something not a structure or union\",\n+\t   component);\n \n   return error_mark_node;\n }\n@@ -2811,16 +2808,16 @@ readonly_error (tree arg, enum lvalue_use use)\n       if (TYPE_READONLY (TREE_TYPE (TREE_OPERAND (arg, 0))))\n \treadonly_error (TREE_OPERAND (arg, 0), use);\n       else\n-\terror (READONLY_MSG (N_(\"assignment of read-only member %qs\"),\n-\t\t\t     N_(\"increment of read-only member %qs\"),\n-\t\t\t     N_(\"decrement of read-only member %qs\")),\n-\t       IDENTIFIER_POINTER (DECL_NAME (TREE_OPERAND (arg, 1))));\n+\terror (READONLY_MSG (N_(\"assignment of read-only member %qD\"),\n+\t\t\t     N_(\"increment of read-only member %qD\"),\n+\t\t\t     N_(\"decrement of read-only member %qD\")),\n+\t       TREE_OPERAND (arg, 1));\n     }\n   else if (TREE_CODE (arg) == VAR_DECL)\n-    error (READONLY_MSG (N_(\"assignment of read-only variable %qs\"),\n-\t\t\t N_(\"increment of read-only variable %qs\"),\n-\t\t\t N_(\"decrement of read-only variable %qs\")),\n-\t   IDENTIFIER_POINTER (DECL_NAME (arg)));\n+    error (READONLY_MSG (N_(\"assignment of read-only variable %qD\"),\n+\t\t\t N_(\"increment of read-only variable %qD\"),\n+\t\t\t N_(\"decrement of read-only variable %qD\")),\n+\t   arg);\n   else\n     error (READONLY_MSG (N_(\"assignment of read-only location\"),\n \t\t\t N_(\"increment of read-only location\"),\n@@ -5293,8 +5290,7 @@ set_init_label (tree fieldname)\n     }\n \n   if (tail == 0)\n-    error (\"unknown field %qs specified in initializer\",\n-\t   IDENTIFIER_POINTER (fieldname));\n+    error (\"unknown field %qE specified in initializer\", fieldname);\n   else\n     {\n       constructor_fields = tail;"}]}