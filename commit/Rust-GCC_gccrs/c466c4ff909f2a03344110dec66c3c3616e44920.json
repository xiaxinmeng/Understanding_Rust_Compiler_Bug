{"sha": "c466c4ff909f2a03344110dec66c3c3616e44920", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQ2NmM0ZmY5MDlmMmEwMzM0NDExMGRlYzY2YzNjMzYxNmU0NDkyMA==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2011-11-25T03:00:38Z"}, "committer": {"name": "Andrew Macleod", "email": "amacleod@gcc.gnu.org", "date": "2011-11-25T03:00:38Z"}, "message": "re PR c/51256 (ICE with invalid parameter for __atomic builtin)\n\n\n2011-11-24  Andrew MacLeod  <amacleod@redhat.com>\n\n\tPR c/51256\n\t* c-common.c (get_atomic_generic_size): Check for various error \n\tconditions\n\t(resolve_overloaded_atomic_exchange, \n\tresolve_overloaded_atomic_compare_exchange, \n\tresolve_overloaded_atomic_load, resolve_overloaded_atomic_store): Return\n\terror_mark_node for error conditions.\n\t* gcc.dg/atomic-pr51256.c: New.  Test error conditions.\n\nFrom-SVN: r181709", "tree": {"sha": "f590800db7aa391761eac266d2da0c5db7f82ba0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f590800db7aa391761eac266d2da0c5db7f82ba0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c466c4ff909f2a03344110dec66c3c3616e44920", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c466c4ff909f2a03344110dec66c3c3616e44920", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c466c4ff909f2a03344110dec66c3c3616e44920", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c466c4ff909f2a03344110dec66c3c3616e44920/comments", "author": null, "committer": null, "parents": [{"sha": "c138ee6de212e444155b5facfdd140a670e03df7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c138ee6de212e444155b5facfdd140a670e03df7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c138ee6de212e444155b5facfdd140a670e03df7"}], "stats": {"total": 120, "additions": 114, "deletions": 6}, "files": [{"sha": "44631060789d66179f5afb4db329049509c6c4df", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c466c4ff909f2a03344110dec66c3c3616e44920/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c466c4ff909f2a03344110dec66c3c3616e44920/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=c466c4ff909f2a03344110dec66c3c3616e44920", "patch": "@@ -1,3 +1,13 @@\n+2011-11-24  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR c/51256\n+\t* c-common.c (get_atomic_generic_size): Check for various error \n+\tconditions\n+\t(resolve_overloaded_atomic_exchange, \n+\tresolve_overloaded_atomic_compare_exchange, \n+\tresolve_overloaded_atomic_load, resolve_overloaded_atomic_store): Return\n+\terror_mark_node for error conditions.\n+\t\n 2011-11-08  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/51010"}, {"sha": "fbbcb3841dd3d92f021bacd29bea3c24579eb33d", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 52, "deletions": 6, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c466c4ff909f2a03344110dec66c3c3616e44920/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c466c4ff909f2a03344110dec66c3c3616e44920/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=c466c4ff909f2a03344110dec66c3c3616e44920", "patch": "@@ -9392,7 +9392,7 @@ get_atomic_generic_size (location_t loc, tree function, VEC(tree,gc) *params)\n       n_model = 2;\n       break;\n     default:\n-      return 0;\n+      gcc_unreachable ();\n     }\n \n   if (VEC_length (tree, params) != n_param)\n@@ -9403,13 +9403,33 @@ get_atomic_generic_size (location_t loc, tree function, VEC(tree,gc) *params)\n \n   /* Get type of first parameter, and determine its size.  */\n   type_0 = TREE_TYPE (VEC_index (tree, params, 0));\n-  if (TREE_CODE (type_0) != POINTER_TYPE)\n+  if (TREE_CODE (type_0) != POINTER_TYPE || VOID_TYPE_P (TREE_TYPE (type_0)))\n+    {\n+      error_at (loc, \"argument 1 of %qE must be a non-void pointer type\",\n+\t\tfunction);\n+      return 0;\n+    }\n+\n+  /* Types must be compile time constant sizes. */\n+  if (TREE_CODE ((TYPE_SIZE_UNIT (TREE_TYPE (type_0)))) != INTEGER_CST)\n     {\n-      error_at (loc, \"argument 1 of %qE must be a pointer type\", function);\n+      error_at (loc, \n+\t\t\"argument 1 of %qE must be a pointer to a constant size type\",\n+\t\tfunction);\n       return 0;\n     }\n+\n   size_0 = tree_low_cst (TYPE_SIZE_UNIT (TREE_TYPE (type_0)), 1);\n \n+  /* Zero size objects are not allowed.  */\n+  if (size_0 == 0)\n+    {\n+      error_at (loc, \n+\t\t\"argument 1 of %qE must be a pointer to a nonzero size object\",\n+\t\tfunction);\n+      return 0;\n+    }\n+\n   /* Check each other parameter is a pointer and the same size.  */\n   for (x = 0; x < n_param - n_model; x++)\n     {\n@@ -9445,7 +9465,6 @@ get_atomic_generic_size (location_t loc, tree function, VEC(tree,gc) *params)\n \t      warning_at (loc, OPT_Winvalid_memory_model,\n \t\t\t  \"invalid memory model argument %d of %qE\", x + 1,\n \t\t\t  function);\n-\t      return MEMMODEL_SEQ_CST;\n \t    }\n \t}\n       else\n@@ -9515,6 +9534,13 @@ resolve_overloaded_atomic_exchange (location_t loc, tree function,\n   tree I_type, I_type_ptr;\n   int n = get_atomic_generic_size (loc, function, params);\n \n+  /* Size of 0 is an error condition.  */\n+  if (n == 0)\n+    {\n+      *new_return = error_mark_node;\n+      return true;\n+    }\n+\n   /* If not a lock-free size, change to the library generic format.  */\n   if (n != 1 && n != 2 && n != 4 && n != 8 && n != 16)\n     {\n@@ -9538,8 +9564,7 @@ resolve_overloaded_atomic_exchange (location_t loc, tree function,\n \n   /* Convert object pointer to required type.  */\n   p0 = build1 (VIEW_CONVERT_EXPR, I_type_ptr, p0);\n-  VEC_replace (tree, params, 0, p0);\n-\n+  VEC_replace (tree, params, 0, p0); \n   /* Convert new value to required type, and dereference it.  */\n   p1 = build_indirect_ref (loc, p1, RO_UNARY_STAR);\n   p1 = build1 (VIEW_CONVERT_EXPR, I_type, p1);\n@@ -9574,6 +9599,13 @@ resolve_overloaded_atomic_compare_exchange (location_t loc, tree function,\n   tree I_type, I_type_ptr;\n   int n = get_atomic_generic_size (loc, function, params);\n \n+  /* Size of 0 is an error condition.  */\n+  if (n == 0)\n+    {\n+      *new_return = error_mark_node;\n+      return true;\n+    }\n+\n   /* If not a lock-free size, change to the library generic format.  */\n   if (n != 1 && n != 2 && n != 4 && n != 8 && n != 16)\n     {\n@@ -9643,6 +9675,13 @@ resolve_overloaded_atomic_load (location_t loc, tree function,\n   tree I_type, I_type_ptr;\n   int n = get_atomic_generic_size (loc, function, params);\n \n+  /* Size of 0 is an error condition.  */\n+  if (n == 0)\n+    {\n+      *new_return = error_mark_node;\n+      return true;\n+    }\n+\n   /* If not a lock-free size, change to the library generic format.  */\n   if (n != 1 && n != 2 && n != 4 && n != 8 && n != 16)\n     {\n@@ -9696,6 +9735,13 @@ resolve_overloaded_atomic_store (location_t loc, tree function,\n   tree I_type, I_type_ptr;\n   int n = get_atomic_generic_size (loc, function, params);\n \n+  /* Size of 0 is an error condition.  */\n+  if (n == 0)\n+    {\n+      *new_return = error_mark_node;\n+      return true;\n+    }\n+\n   /* If not a lock-free size, change to the library generic format.  */\n   if (n != 1 && n != 2 && n != 4 && n != 8 && n != 16)\n     {"}, {"sha": "ff60be03561954cdf9b98fdc599656adc37c9413", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c466c4ff909f2a03344110dec66c3c3616e44920/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c466c4ff909f2a03344110dec66c3c3616e44920/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c466c4ff909f2a03344110dec66c3c3616e44920", "patch": "@@ -1,3 +1,8 @@\n+2011-11-24  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR c/51256\n+\t* gcc.dg/atomic-pr51256.c: New.  Test error conditions.\n+\t\n 2011-11-24  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/51227"}, {"sha": "2d39549c8909d352f9dc081c6658e01bf03d8b36", "filename": "gcc/testsuite/gcc.dg/atomic-pr51256.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c466c4ff909f2a03344110dec66c3c3616e44920/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic-pr51256.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c466c4ff909f2a03344110dec66c3c3616e44920/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic-pr51256.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic-pr51256.c?ref=c466c4ff909f2a03344110dec66c3c3616e44920", "patch": "@@ -0,0 +1,47 @@\n+/* Test generic  __atomic routines for various errors.  */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target sync_int_long } */\n+/* { dg-options \"-ansi\" } */\n+\n+void f1 (void* p)\n+{\n+  __atomic_compare_exchange(p, p, p, 0, 0, 0); /* { dg-error \"must be a non-void pointer type\" } */\n+}\n+\n+void f2 (int n) \n+{ \n+  int a[n], b[n]; \n+  __atomic_load (&a, &b, __ATOMIC_SEQ_CST); /* { dg-error \"must be a pointer to a constant size\" } */\n+}\n+\n+struct s { };\n+void f3 (void)\n+{\n+  struct s a,b;\n+  __atomic_load (&a, &b, __ATOMIC_SEQ_CST);  /* { dg-error \"must be a pointer to a nonzero size\" } */\n+}\n+\n+void f4 (int a, int b, int c)\n+{\n+  __atomic_load (&a, &b, &c,  __ATOMIC_SEQ_CST); /* { dg-error \"incorrect number of arguments\" } */\n+}\n+\n+void f5 (int a, int b)\n+{\n+  __atomic_load (&a, b, __ATOMIC_SEQ_CST); /* { dg-error \"must be a pointer type\" } */\n+}\n+\n+void f6 (int a, char b)\n+{\n+  __atomic_load (&a, &b, __ATOMIC_SEQ_CST); /* { dg-error \"size mismatch in argument\" } */\n+}\n+\n+void f7 (int a, int b)\n+{\n+  __atomic_load (&a, &b, 45); /* { dg-warning \"invalid memory model argument\" } */\n+}\n+\n+void f8 (int a, int b, float c)\n+{\n+  __atomic_load (&a, &b, c); /* { dg-error \"non-integer memory model argument\" } */\n+}"}]}