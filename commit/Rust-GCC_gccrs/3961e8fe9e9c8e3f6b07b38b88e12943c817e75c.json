{"sha": "3961e8fe9e9c8e3f6b07b38b88e12943c817e75c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzk2MWU4ZmU5ZTljOGUzZjZiMDdiMzhiODhlMTI5NDNjODE3ZTc1Yw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-10-22T23:05:28Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-10-22T23:05:28Z"}, "message": "target.h (gcc_target.asm_out): Merge output_mi_thunk and output_mi_vcall_thunk into a single hook.\n\ngcc/\n\t* target.h (gcc_target.asm_out): Merge output_mi_thunk and\n\toutput_mi_vcall_thunk into a single hook.  Add can_output_mi_thunk.\n\t* target-def.h (TARGET_ASM_OUTPUT_MI_THUNK): Don't conditionalize.\n\t(TARGET_ASM_OUTPUT_MI_VCALL_THUNK): Remove.\n\t(TARGET_ASM_CAN_OUTPUT_MI_THUNK): New.\n\t(TARGET_ASM_OUT): Update.\n\t* hooks.c (hook_bool_tree_hwi_hwi_tree_false): New.\n\t(hook_bool_tree_hwi_hwi_tree_true): New.\n\t(default_can_output_mi_thunk_no_vcall): New.\n\t* hooks.h: Declare them.\n\t* system.h (ASM_OUTPUT_MI_THUNK): Poison.\n\n\t* config/alpha/alpha.c (TARGET_ASM_CAN_OUTPUT_MI_THUNK): New.\n\t(alpha_output_mi_thunk_osf): Add VCALL_OFFSET parameter.\n\t* config/arm/arm.c, config/cris/cris.c, config/frv/frv.c,\n\tconfig/i960/i960.c, config/ia64/ia64.c, config/m68k/m68k.c,\n\tconfig/mmix/mmix.c, config/pa/pa.c, config/sparc/sparc.c,\n\tconfig/stormy16/stormy16.c: Similarly.\n\n\t* config/i386/i386.c (x86_output_mi_thunk): Merge vcall_offset code.\n\tHandle 64-bit properly.  Streamline.\n\t(x86_output_mi_vcall_thunk): Remove.\n\t(x86_this_parameter): Rename from ia32_this_parameter; handle 64-bit.\n\t(x86_can_output_mi_thunk): New.\n\t(TARGET_ASM_OUTPUT_MI_VCALL_THUNK): Remove.\n\t(TARGET_ASM_CAN_OUTPUT_MI_THUNK): New.\n\t(override_options): Don't zap targetm.asm_out.output_mi_vcall_thunk.\n\n\t* config/rs6000/rs6000.c (rs6000_output_mi_thunk): Rename from\n\toutput_mi_thunk; make static; always use function_section.\n\t(TARGET_ASM_OUTPUT_MI_THUNK): New.\n\t(TARGET_ASM_CAN_OUTPUT_MI_THUNK): New.\n\t(rs6000_ra_ever_killed): Test no_new_pseudos not\n\ttargetm.asm_out.output_mi_thunk in conjunction with thunks.\n\t* config/rs6000/rs6000-protos.h: Update.\n\t* config/rs6000/sysv4.h (TARGET_ASM_OUTPUT_MI_THUNK): Remove.\n\t* config/rs6000/xcoff.h (ASM_DECLARE_FUNCTION_NAME): Don't call\n\txcoffout_declare_function when using rs6000_output_mi_thunk.\n\n\t* config/s390/s390.c (s390_output_mi_thunk): Rename from\n\ts390_output_mi_vcall_thunk.\n\t(TARGET_ASM_OUTPUT_MI_THUNK): Remove.\n\t(TARGET_ASM_CAN_OUTPUT_MI_THUNK): New.\n\n\t* config/vax/vax.c (vax_output_mi_thunk): Static; add vcall_offset.\n\t(TARGET_ASM_OUTPUT_MI_THUNK, TARGET_ASM_CAN_OUTPUT_MI_THUNK): New.\n\t* config/vax/vax-protos.h: Update.\n\t* config/vax/vax.h (ASM_OUTPUT_MI_THUNK): Remove.\n\ngcc/cp/\n        * method.c (use_thunk): Always compute vcall_value; assert that\n        it is not zero.  Use can_output_mi_thunk; use output_mi_thunk\n        for vcall thunks as well.\n\nFrom-SVN: r58424", "tree": {"sha": "47bcdb93a39b44ac06fdc677f9265a5d43739759", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47bcdb93a39b44ac06fdc677f9265a5d43739759"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3961e8fe9e9c8e3f6b07b38b88e12943c817e75c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3961e8fe9e9c8e3f6b07b38b88e12943c817e75c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3961e8fe9e9c8e3f6b07b38b88e12943c817e75c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3961e8fe9e9c8e3f6b07b38b88e12943c817e75c/comments", "author": null, "committer": null, "parents": [{"sha": "0e67d46049a58b11d577736056157cc003c0f1d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e67d46049a58b11d577736056157cc003c0f1d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e67d46049a58b11d577736056157cc003c0f1d8"}], "stats": {"total": 593, "additions": 378, "deletions": 215}, "files": [{"sha": "31d30a79b4b3ea3c5ea6edf3ca0875c0cb763c0c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3961e8fe9e9c8e3f6b07b38b88e12943c817e75c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3961e8fe9e9c8e3f6b07b38b88e12943c817e75c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3961e8fe9e9c8e3f6b07b38b88e12943c817e75c", "patch": "@@ -1,3 +1,54 @@\n+2002-10-22  Richard Henderson  <rth@redhat.com>\n+\n+\t* target.h (gcc_target.asm_out): Merge output_mi_thunk and\n+\toutput_mi_vcall_thunk into a single hook.  Add can_output_mi_thunk.\n+\t* target-def.h (TARGET_ASM_OUTPUT_MI_THUNK): Don't conditionalize.\n+\t(TARGET_ASM_OUTPUT_MI_VCALL_THUNK): Remove.\n+\t(TARGET_ASM_CAN_OUTPUT_MI_THUNK): New.\n+\t(TARGET_ASM_OUT): Update.\n+\t* hooks.c (hook_bool_tree_hwi_hwi_tree_false): New.\n+\t(hook_bool_tree_hwi_hwi_tree_true): New.\n+\t(default_can_output_mi_thunk_no_vcall): New.\n+\t* hooks.h: Declare them.\n+\t* system.h (ASM_OUTPUT_MI_THUNK): Poison.\n+\n+\t* config/alpha/alpha.c (TARGET_ASM_CAN_OUTPUT_MI_THUNK): New.\n+\t(alpha_output_mi_thunk_osf): Add VCALL_OFFSET parameter.\n+\t* config/arm/arm.c, config/cris/cris.c, config/frv/frv.c,\n+\tconfig/i960/i960.c, config/ia64/ia64.c, config/m68k/m68k.c,\n+\tconfig/mmix/mmix.c, config/pa/pa.c, config/sparc/sparc.c,\n+\tconfig/stormy16/stormy16.c: Similarly.\n+\n+\t* config/i386/i386.c (x86_output_mi_thunk): Merge vcall_offset code.\n+\tHandle 64-bit properly.  Streamline.\n+\t(x86_output_mi_vcall_thunk): Remove.\n+\t(x86_this_parameter): Rename from ia32_this_parameter; handle 64-bit.\n+\t(x86_can_output_mi_thunk): New.\n+\t(TARGET_ASM_OUTPUT_MI_VCALL_THUNK): Remove.\n+\t(TARGET_ASM_CAN_OUTPUT_MI_THUNK): New.\n+\t(override_options): Don't zap targetm.asm_out.output_mi_vcall_thunk.\n+\n+\t* config/rs6000/rs6000.c (rs6000_output_mi_thunk): Rename from\n+\toutput_mi_thunk; make static; always use function_section.\n+\t(TARGET_ASM_OUTPUT_MI_THUNK): New.\n+\t(TARGET_ASM_CAN_OUTPUT_MI_THUNK): New.\n+\t(rs6000_ra_ever_killed): Test no_new_pseudos not\n+\ttargetm.asm_out.output_mi_thunk in conjunction with thunks.\n+\t* config/rs6000/rs6000-protos.h: Update.\n+\t* config/rs6000/sysv4.h (TARGET_ASM_OUTPUT_MI_THUNK): Remove.\n+\t* config/rs6000/xcoff.h (ASM_DECLARE_FUNCTION_NAME): Don't call\n+\txcoffout_declare_function when using rs6000_output_mi_thunk.\n+\n+\t* config/s390/s390.c (s390_output_mi_thunk): Rename from \n+\ts390_output_mi_vcall_thunk.\n+\t(TARGET_ASM_OUTPUT_MI_THUNK): Remove.\n+\t(TARGET_ASM_CAN_OUTPUT_MI_THUNK): New.\n+\n+\t* config/vax/vax.c (vax_output_mi_thunk): Static; add vcall_offset.\n+\t(TARGET_ASM_OUTPUT_MI_THUNK, TARGET_ASM_CAN_OUTPUT_MI_THUNK): New.\n+\t* config/vax/vax-protos.h: Update.\n+\t* config/vax/vax.h (ASM_OUTPUT_MI_THUNK): Remove.\n+\n Wed Oct 23 00:33:11 CEST 2002  Jan Hubicka  <jh@suse,cz>\n \n \t* i386.c (standard_sse_constant_p): Accept vector and integer zeros too."}, {"sha": "5555aaebb180002a3845c9f6cee616b589c5be15", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3961e8fe9e9c8e3f6b07b38b88e12943c817e75c/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3961e8fe9e9c8e3f6b07b38b88e12943c817e75c/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=3961e8fe9e9c8e3f6b07b38b88e12943c817e75c", "patch": "@@ -197,7 +197,7 @@ static void alpha_write_linkage\n \n #if TARGET_ABI_OSF\n static void alpha_output_mi_thunk_osf\n-  PARAMS ((FILE *, tree, HOST_WIDE_INT, tree));\n+  PARAMS ((FILE *, tree, HOST_WIDE_INT, HOST_WIDE_INT, tree));\n #endif\n \n static struct machine_function * alpha_init_machine_status\n@@ -300,6 +300,8 @@ static void unicosmk_unique_section PARAMS ((tree, int));\n #if TARGET_ABI_OSF\n #undef TARGET_ASM_OUTPUT_MI_THUNK\n #define TARGET_ASM_OUTPUT_MI_THUNK alpha_output_mi_thunk_osf\n+#undef TARGET_ASM_CAN_OUTPUT_MI_THUNK\n+#define TARGET_ASM_CAN_OUTPUT_MI_THUNK default_can_output_mi_thunk_no_vcall\n #endif\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n@@ -7860,10 +7862,11 @@ alpha_end_function (file, fnname, decl)\n    Not sure why this idea hasn't been explored before...  */\n \n static void\n-alpha_output_mi_thunk_osf (file, thunk_fndecl, delta, function)\n+alpha_output_mi_thunk_osf (file, thunk_fndecl, delta, vcall_offset, function)\n      FILE *file;\n      tree thunk_fndecl ATTRIBUTE_UNUSED;\n      HOST_WIDE_INT delta;\n+     HOST_WIDE_INT vcall_offset ATTRIBUTE_UNUSED;\n      tree function;\n {\n   HOST_WIDE_INT hi, lo;"}, {"sha": "b06cb9bb3373f43a9fd45de1e58d31b3c8f67d87", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3961e8fe9e9c8e3f6b07b38b88e12943c817e75c/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3961e8fe9e9c8e3f6b07b38b88e12943c817e75c/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=3961e8fe9e9c8e3f6b07b38b88e12943c817e75c", "patch": "@@ -127,6 +127,7 @@ static void\t arm_encode_section_info\tPARAMS ((tree, int));\n static void\t aof_globalize_label\t\tPARAMS ((FILE *, const char *));\n #endif\n static void arm_output_mi_thunk\t\t\tPARAMS ((FILE *, tree,\n+\t\t\t\t\t\t\t HOST_WIDE_INT,\n \t\t\t\t\t\t\t HOST_WIDE_INT, tree));\n \n #undef Hint\n@@ -192,6 +193,8 @@ static void arm_output_mi_thunk\t\t\tPARAMS ((FILE *, tree,\n \n #undef TARGET_ASM_OUTPUT_MI_THUNK\n #define TARGET_ASM_OUTPUT_MI_THUNK arm_output_mi_thunk\n+#undef TARGET_ASM_CAN_OUTPUT_MI_THUNK\n+#define TARGET_ASM_CAN_OUTPUT_MI_THUNK default_can_output_mi_thunk_no_vcall\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n@@ -11154,10 +11157,11 @@ arm_encode_section_info (decl, first)\n    to FUNCTION.  Used for C++ multiple inheritance.  */\n \n static void\n-arm_output_mi_thunk (file, thunk, delta, function)\n+arm_output_mi_thunk (file, thunk, delta, vcall_offset, function)\n      FILE *file;\n      tree thunk ATTRIBUTE_UNUSED;\n      HOST_WIDE_INT delta;\n+     HOST_WIDE_INT vcall_offset ATTRIBUTE_UNUSED;\n      tree function;\n {\n   int mi_delta = delta;"}, {"sha": "2eb864f065cf46360311289216b5ce687dce6c5f", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3961e8fe9e9c8e3f6b07b38b88e12943c817e75c/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3961e8fe9e9c8e3f6b07b38b88e12943c817e75c/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=3961e8fe9e9c8e3f6b07b38b88e12943c817e75c", "patch": "@@ -102,7 +102,7 @@ static void cris_encode_section_info PARAMS ((tree, int));\n static void cris_operand_lossage PARAMS ((const char *, rtx));\n \n static void cris_asm_output_mi_thunk\n-  PARAMS ((FILE *, tree, HOST_WIDE_INT, tree));\n+  PARAMS ((FILE *, tree, HOST_WIDE_INT, HOST_WIDE_INT, tree));\n \n \n /* The function cris_target_asm_function_epilogue puts the last insn to\n@@ -159,6 +159,8 @@ int cris_cpu_version = CRIS_DEFAULT_CPU_VERSION;\n \n #undef TARGET_ASM_OUTPUT_MI_THUNK\n #define TARGET_ASM_OUTPUT_MI_THUNK cris_asm_output_mi_thunk\n+#undef TARGET_ASM_CAN_OUTPUT_MI_THUNK\n+#define TARGET_ASM_CAN_OUTPUT_MI_THUNK default_can_output_mi_thunk_no_vcall\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \n@@ -2580,10 +2582,11 @@ cris_override_options ()\n /* The TARGET_ASM_OUTPUT_MI_THUNK worker.  */\n \n static void\n-cris_asm_output_mi_thunk (stream, thunkdecl, delta, funcdecl)\n+cris_asm_output_mi_thunk (stream, thunkdecl, delta, vcall_offset, funcdecl)\n      FILE *stream;\n      tree thunkdecl ATTRIBUTE_UNUSED;\n      HOST_WIDE_INT delta;\n+     HOST_WIDE_INT vcall_offset ATTRIBUTE_UNUSED;\n      tree funcdecl;\n {\n   if (delta > 0)"}, {"sha": "d09533a5f1540f830ef2595f6dc41fd3d4d9cf90", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3961e8fe9e9c8e3f6b07b38b88e12943c817e75c/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3961e8fe9e9c8e3f6b07b38b88e12943c817e75c/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=3961e8fe9e9c8e3f6b07b38b88e12943c817e75c", "patch": "@@ -279,7 +279,8 @@ static void frv_encode_section_info\t\tPARAMS ((tree, int));\n static void frv_init_builtins\t\t\tPARAMS ((void));\n static rtx frv_expand_builtin\t\t\tPARAMS ((tree, rtx, rtx, enum machine_mode, int));\n static bool frv_in_small_data_p\t\t\tPARAMS ((tree));\n-static void frv_asm_output_mi_thunk\t\tPARAMS ((FILE *, tree, HOST_WIDE_INT, tree));\n+static void frv_asm_output_mi_thunk\n+  PARAMS ((FILE *, tree, HOST_WIDE_INT, HOST_WIDE_INT, tree));\n \f\n /* Initialize the GCC target structure.  */\n #undef  TARGET_ASM_FUNCTION_PROLOGUE\n@@ -301,6 +302,8 @@ static void frv_asm_output_mi_thunk\t\tPARAMS ((FILE *, tree, HOST_WIDE_INT, tree)\n \n #undef TARGET_ASM_OUTPUT_MI_THUNK\n #define TARGET_ASM_OUTPUT_MI_THUNK frv_asm_output_mi_thunk\n+#undef TARGET_ASM_CAN_OUTPUT_MI_THUNK\n+#define TARGET_ASM_CAN_OUTPUT_MI_THUNK default_can_output_mi_thunk_no_vcall\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n@@ -1871,10 +1874,11 @@ frv_expand_epilogue (sibcall_p)\n    varargs.  */\n \n static void\n-frv_asm_output_mi_thunk (file, thunk_fndecl, delta, function)\n+frv_asm_output_mi_thunk (file, thunk_fndecl, delta, vcall_offset, function)\n      FILE *file;\n      tree thunk_fndecl ATTRIBUTE_UNUSED;\n      HOST_WIDE_INT delta;\n+     HOST_WIDE_INT vcall_offset ATTRIBUTE_UNUSED;\n      tree function;\n {\n   const char *name_func = XSTR (XEXP (DECL_RTL (function), 0), 0);"}, {"sha": "f3d5acc59b3d54d143d2db1f1e11a6718026d169", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 135, "deletions": 102, "changes": 237, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3961e8fe9e9c8e3f6b07b38b88e12943c817e75c/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3961e8fe9e9c8e3f6b07b38b88e12943c817e75c/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=3961e8fe9e9c8e3f6b07b38b88e12943c817e75c", "patch": "@@ -750,10 +750,11 @@ static int ix86_variable_issue PARAMS ((FILE *, int, rtx, int));\n static int ia32_use_dfa_pipeline_interface PARAMS ((void));\n static int ia32_multipass_dfa_lookahead PARAMS ((void));\n static void ix86_init_mmx_sse_builtins PARAMS ((void));\n-static rtx ia32_this_parameter PARAMS ((tree));\n-static void x86_output_mi_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT, tree));\n-static void x86_output_mi_vcall_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT,\n-\t\t\t\t\t       HOST_WIDE_INT, tree));\n+static rtx x86_this_parameter PARAMS ((tree));\n+static void x86_output_mi_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT,\n+\t\t\t\t\t HOST_WIDE_INT, tree));\n+static bool x86_can_output_mi_thunk PARAMS ((tree, HOST_WIDE_INT,\n+\t\t\t\t\t     HOST_WIDE_INT, tree));\n \n struct ix86_address\n {\n@@ -902,8 +903,8 @@ static enum x86_64_reg_class merge_classes PARAMS ((enum x86_64_reg_class,\n \n #undef TARGET_ASM_OUTPUT_MI_THUNK\n #define TARGET_ASM_OUTPUT_MI_THUNK x86_output_mi_thunk\n-#undef TARGET_ASM_OUTPUT_MI_VCALL_THUNK\n-#define TARGET_ASM_OUTPUT_MI_VCALL_THUNK x86_output_mi_vcall_thunk\n+#undef TARGET_ASM_CAN_OUTPUT_MI_THUNK\n+#define TARGET_ASM_CAN_OUTPUT_MI_THUNK x86_can_output_mi_thunk\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n@@ -1305,10 +1306,6 @@ override_options ()\n     internal_label_prefix_len = p - internal_label_prefix;\n     *p = '\\0';\n   }\n-\n-  /* In 64-bit mode, we do not have support for vcall thunks.  */\n-  if (TARGET_64BIT)\n-    targetm.asm_out.output_mi_vcall_thunk = NULL;\n }\n \f\n void\n@@ -14076,19 +14073,25 @@ x86_order_regs_for_local_alloc ()\n    located on entry to the FUNCTION.  */\n \n static rtx\n-ia32_this_parameter (function)\n+x86_this_parameter (function)\n      tree function;\n {\n   tree type = TREE_TYPE (function);\n \n+  if (TARGET_64BIT)\n+    {\n+      int n = aggregate_value_p (TREE_TYPE (type)) != 0;\n+      return gen_rtx_REG (DImode, x86_64_int_parameter_registers[n]);\n+    }\n+\n   if (ix86_fntype_regparm (type) > 0)\n     {\n       tree parm;\n \n       parm = TYPE_ARG_TYPES (type);\n       /* Figure out whether or not the function has a variable number of\n \t arguments.  */\n-      for (; parm; parm = TREE_CHAIN (parm))\\\n+      for (; parm; parm = TREE_CHAIN (parm))\n \tif (TREE_VALUE (parm) == void_type_node)\n \t  break;\n       /* If not, the this parameter is in %eax.  */\n@@ -14102,122 +14105,152 @@ ia32_this_parameter (function)\n     return gen_rtx_MEM (SImode, plus_constant (stack_pointer_rtx, 4));\n }\n \n+/* Determine whether x86_output_mi_thunk can succeed.  */\n+\n+static bool\n+x86_can_output_mi_thunk (thunk, delta, vcall_offset, function)\n+     tree thunk ATTRIBUTE_UNUSED;\n+     HOST_WIDE_INT delta ATTRIBUTE_UNUSED;\n+     HOST_WIDE_INT vcall_offset;\n+     tree function;\n+{\n+  /* 64-bit can handle anything.  */\n+  if (TARGET_64BIT)\n+    return true;\n+\n+  /* For 32-bit, everything's fine if we have one free register.  */\n+  if (ix86_fntype_regparm (TREE_TYPE (function)) < 3)\n+    return true;\n+\n+  /* Need a free register for vcall_offset.  */\n+  if (vcall_offset)\n+    return false;\n+\n+  /* Need a free register for GOT references.  */\n+  if (flag_pic && !(*targetm.binds_local_p) (function))\n+    return false;\n+\n+  /* Otherwise ok.  */\n+  return true;\n+}\n+\n+/* Output the assembler code for a thunk function.  THUNK_DECL is the\n+   declaration for the thunk function itself, FUNCTION is the decl for\n+   the target function.  DELTA is an immediate constant offset to be\n+   added to THIS.  If VCALL_OFFSET is non-zero, the word at\n+   *(*this + vcall_offset) should be added to THIS.  */\n \n static void\n-x86_output_mi_vcall_thunk (file, thunk, delta, vcall_index, function)\n-     FILE *file;\n+x86_output_mi_thunk (file, thunk, delta, vcall_offset, function)\n+     FILE *file ATTRIBUTE_UNUSED;\n      tree thunk ATTRIBUTE_UNUSED;\n      HOST_WIDE_INT delta;\n-     HOST_WIDE_INT vcall_index;\n+     HOST_WIDE_INT vcall_offset;\n      tree function;\n {\n   rtx xops[3];\n+  rtx this = x86_this_parameter (function);\n+  rtx this_reg, tmp;\n \n-  if (TARGET_64BIT)\n+  /* If VCALL_OFFSET, we'll need THIS in a register.  Might as well\n+     pull it in now and let DELTA benefit.  */\n+  if (REG_P (this))\n+    this_reg = this;\n+  else if (vcall_offset)\n+    {\n+      /* Put the this parameter into %eax.  */\n+      xops[0] = this;\n+      xops[1] = this_reg = gen_rtx_REG (Pmode, 0);\n+      output_asm_insn (\"mov{l}\\t{%0, %1|%1, %0}\", xops);\n+    }\n+  else\n+    this_reg = NULL_RTX;\n+\n+  /* Adjust the this parameter by a fixed constant.  */\n+  if (delta)\n     {\n-      int n = aggregate_value_p (TREE_TYPE (TREE_TYPE (function))) != 0;\n       xops[0] = GEN_INT (delta);\n-      xops[1] = gen_rtx_REG (DImode, x86_64_int_parameter_registers[n]);\n-      output_asm_insn (\"add{q} {%0, %1|%1, %0}\", xops);\n-      if (flag_pic)\n+      xops[1] = this_reg ? this_reg : this;\n+      if (TARGET_64BIT)\n \t{\n-\t  fprintf (file, \"\\tjmp *\");\n-\t  assemble_name (file, XSTR (XEXP (DECL_RTL (function), 0), 0));\n-\t  fprintf (file, \"@GOTPCREL(%%rip)\\n\");\n+\t  if (!x86_64_general_operand (xops[0], DImode))\n+\t    {\n+\t      tmp = gen_rtx_REG (DImode, FIRST_REX_INT_REG + 2 /* R10 */);\n+\t      xops[1] = tmp;\n+\t      output_asm_insn (\"mov{q}\\t{%1, %0|%0, %1}\", xops);\n+\t      xops[0] = tmp;\n+\t      xops[1] = this;\n+\t    }\n+\t  output_asm_insn (\"add{q}\\t{%0, %1|%1, %0}\", xops);\n \t}\n       else\n-\t{\n-\t  fprintf (file, \"\\tjmp \");\n-\t  assemble_name (file, XSTR (XEXP (DECL_RTL (function), 0), 0));\n-\t  fprintf (file, \"\\n\");\n-\t}\n+\toutput_asm_insn (\"add{l}\\t{%0, %1|%1, %0}\", xops);\n     }\n-  else\n+\n+  /* Adjust the this parameter by a value stored in the vtable.  */\n+  if (vcall_offset)\n     {\n-      /* Adjust the this parameter by a fixed constant.  */\n-      if (delta)\n-\t{\n-\t  xops[0] = GEN_INT (delta);\n-\t  xops[1] = ia32_this_parameter (function);\n-\t  output_asm_insn (\"add{l}\\t{%0, %1|%1, %0}\", xops);\n-\t}\n+      if (TARGET_64BIT)\n+\ttmp = gen_rtx_REG (DImode, FIRST_REX_INT_REG + 2 /* R10 */);\n+      else\n+\ttmp = gen_rtx_REG (SImode, 2 /* ECX */);\n \n-      /* Adjust the this parameter by a value stored in the vtable.  */\n-      if (vcall_index)\n-\t{\n-\t  rtx this_parm;\n+      xops[0] = gen_rtx_MEM (Pmode, this_reg);\n+      xops[1] = tmp;\n+      if (TARGET_64BIT)\n+\toutput_asm_insn (\"mov{q}\\t{%0, %1|%1, %0}\", xops);\n+      else\n+\toutput_asm_insn (\"mov{l}\\t{%0, %1|%1, %0}\", xops);\n \n-\t  /* Put the this parameter into %eax.  */\n-\t  this_parm = ia32_this_parameter (function);\n-\t  if (!REG_P (this_parm))\n-\t    {\n-\t      xops[0] = this_parm;\n-\t      xops[1] = gen_rtx_REG (Pmode, 0);\n-\t      output_asm_insn (\"mov{l}\\t{%0, %1|%1, %0}\", xops);\n-\t    }\n-\t  /* Load the virtual table pointer into %edx.  */\n-\t  if (ix86_fntype_regparm (TREE_TYPE (function)) > 2)\n-\t    error (\"virtual function `%D' cannot have more than two register parameters\",\n-\t\t   function);\n-\t  xops[0] = gen_rtx_MEM (Pmode, \n-\t\t\t\t gen_rtx_REG (Pmode, 0));\n-\t  xops[1] = gen_rtx_REG (Pmode, 1);\n-\t  output_asm_insn (\"mov{l}\\t{%0, %1|%1, %0}\", xops);\n-\t  /* Adjust the this parameter.  */\n-\t  xops[0] = gen_rtx_MEM (SImode, \n-\t\t\t\t plus_constant (gen_rtx_REG (Pmode, 1), \n-\t\t\t\t\t\tvcall_index));\n-\t  xops[1] = gen_rtx_REG (Pmode, 0);\n-\t  output_asm_insn (\"add{l}\\t{%0, %1|%1, %0}\", xops);\n-\t  /* Put the this parameter back where it came from.  */\n-\t  if (!REG_P (this_parm))\n-\t    {\n-\t      xops[0] = gen_rtx_REG (Pmode, 0);\n-\t      xops[1] = ia32_this_parameter (function);\n-\t      output_asm_insn (\"mov{l}\\t{%0, %1|%1, %0}\", xops);\n-\t    }\n+      /* Adjust the this parameter.  */\n+      xops[0] = gen_rtx_MEM (Pmode, plus_constant (tmp, vcall_offset));\n+      if (TARGET_64BIT && !memory_operand (xops[0], Pmode))\n+\t{\n+\t  rtx tmp2 = gen_rtx_REG (DImode, FIRST_REX_INT_REG + 3 /* R11 */);\n+\t  xops[0] = GEN_INT (vcall_offset);\n+\t  xops[1] = tmp2;\n+\t  output_asm_insn (\"mov{q}\\t{%0, %1|%1, %0}\", xops);\n+\t  xops[0] = gen_rtx_MEM (Pmode, gen_rtx_PLUS (Pmode, tmp, tmp2));\n \t}\n+      xops[1] = this_reg;\n+      if (TARGET_64BIT)\n+\toutput_asm_insn (\"add{q}\\t{%0, %1|%1, %0}\", xops);\n+      else\n+\toutput_asm_insn (\"add{l}\\t{%0, %1|%1, %0}\", xops);\n+    }\n \n-      if (flag_pic)\n-\t{\n-\t  xops[0] = pic_offset_table_rtx;\n-\t  xops[1] = gen_label_rtx ();\n-\t  xops[2] = gen_rtx_SYMBOL_REF (Pmode, GOT_SYMBOL_NAME);\n+  /* If necessary, drop THIS back to its stack slot.  */\n+  if (this_reg && this_reg != this)\n+    {\n+      xops[0] = this_reg;\n+      xops[1] = this;\n+      output_asm_insn (\"mov{l}\\t{%0, %1|%1, %0}\", xops);\n+    }\n \n-\t  if (ix86_regparm > 2)\n-\t    abort ();\n-\t  output_asm_insn (\"push{l}\\t%0\", xops);\n-\t  output_asm_insn (\"call\\t%P1\", xops);\n-\t  ASM_OUTPUT_INTERNAL_LABEL (file, \"L\", CODE_LABEL_NUMBER (xops[1]));\n-\t  output_asm_insn (\"pop{l}\\t%0\", xops);\n-\t  output_asm_insn\n-\t    (\"add{l}\\t{%2+[.-%P1], %0|%0, OFFSET FLAT: %2+[.-%P1]}\", xops);\n-\t  xops[0] = gen_rtx_MEM (SImode, XEXP (DECL_RTL (function), 0));\n-\t  output_asm_insn\n-\t    (\"mov{l}\\t{%0@GOT(%%ebx), %%ecx|%%ecx, %0@GOT[%%ebx]}\", xops);\n-\t  asm_fprintf (file, \"\\tpop{l\\t%%ebx|\\t%%ebx}\\n\");\n-\t  asm_fprintf (file, \"\\tjmp\\t{*%%ecx|%%ecx}\\n\");\n-\t}\n+  xops[0] = DECL_RTL (function);\n+  if (TARGET_64BIT)\n+    {\n+      if (!flag_pic || (*targetm.binds_local_p) (function))\n+\toutput_asm_insn (\"jmp\\t%P0\", xops);\n+      else\n+\toutput_asm_insn (\"jmp\\t*%P0@GOTPCREL(%%rip)\", xops);\n+    }\n+  else\n+    {\n+      if (!flag_pic || (*targetm.binds_local_p) (function))\n+\toutput_asm_insn (\"jmp\\t%P0\", xops);\n       else\n \t{\n-\t  fprintf (file, \"\\tjmp\\t\");\n-\t  assemble_name (file, XSTR (XEXP (DECL_RTL (function), 0), 0));\n-\t  fprintf (file, \"\\n\");\n+\t  tmp = gen_rtx_REG (SImode, 2 /* ECX */);\n+\t  output_set_got (tmp);\n+\n+\t  xops[1] = tmp;\n+\t  output_asm_insn (\"mov{l}\\t{%0@GOT(%1), %1|%1, %0@GOT[%1]}\", xops);\n+\t  output_asm_insn (\"jmp\\t{*}%1\", xops);\n \t}\n     }\n }\n \n-static void\n-x86_output_mi_thunk (file, thunk, delta, function)\n-     FILE *file;\n-     tree thunk;\n-     HOST_WIDE_INT delta;\n-     tree function;\n-{\n-  x86_output_mi_vcall_thunk (file, thunk, delta, /*vcall_index=*/0, \n-\t\t\t     function);\n-}\n-\n int\n x86_field_alignment (field, computed)\n      tree field;"}, {"sha": "102729e444b9b1b2ad7c56358cb52e43c0b4164b", "filename": "gcc/config/i960/i960.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3961e8fe9e9c8e3f6b07b38b88e12943c817e75c/gcc%2Fconfig%2Fi960%2Fi960.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3961e8fe9e9c8e3f6b07b38b88e12943c817e75c/gcc%2Fconfig%2Fi960%2Fi960.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.c?ref=3961e8fe9e9c8e3f6b07b38b88e12943c817e75c", "patch": "@@ -46,7 +46,8 @@ Boston, MA 02111-1307, USA.  */\n \n static void i960_output_function_prologue PARAMS ((FILE *, HOST_WIDE_INT));\n static void i960_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n-static void i960_output_mi_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT, tree));\n+static void i960_output_mi_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT,\n+\t\t\t\t\t  HOST_WIDE_INT, tree));\n \n /* Save the operands last given to a compare for use when we\n    generate a scc or bcc insn.  */\n@@ -101,6 +102,8 @@ static int ret_label = 0;\n \n #undef TARGET_ASM_OUTPUT_MI_THUNK\n #define TARGET_ASM_OUTPUT_MI_THUNK i960_output_mi_thunk\n+#undef TARGET_CAN_ASM_OUTPUT_MI_THUNK\n+#define TARGET_CAN_ASM_OUTPUT_MI_THUNK default_can_output_mi_thunk_no_vcall\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n@@ -2830,10 +2833,11 @@ i960_scan_opcode (p)\n }\n \n static void\n-i960_output_mi_thunk (file, thunk, delta, function)\n+i960_output_mi_thunk (file, thunk, delta, vcall_offset, function)\n      FILE *file;\n      tree thunk ATTRIBUTE_UNUSED;\n      HOST_WIDE_INT delta;\n+     HOST_WIDE_INT vcall_offset ATTRIBUTE_UNUSED;\n      tree function;\n {\n   int d = delta;"}, {"sha": "35db34b59864967367757b276710746402edfbdf", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3961e8fe9e9c8e3f6b07b38b88e12943c817e75c/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3961e8fe9e9c8e3f6b07b38b88e12943c817e75c/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=3961e8fe9e9c8e3f6b07b38b88e12943c817e75c", "patch": "@@ -161,7 +161,8 @@ static int ia64_sched_reorder PARAMS ((FILE *, int, rtx *, int *, int));\n static int ia64_sched_reorder2 PARAMS ((FILE *, int, rtx *, int *, int));\n static int ia64_variable_issue PARAMS ((FILE *, int, rtx, int));\n \n-static void ia64_output_mi_thunk PARAMS((FILE *, tree, HOST_WIDE_INT, tree));\n+static void ia64_output_mi_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT,\n+\t\t\t\t\t  HOST_WIDE_INT, tree));\n \n static void ia64_select_rtx_section PARAMS ((enum machine_mode, rtx,\n \t\t\t\t\t     unsigned HOST_WIDE_INT));\n@@ -248,6 +249,8 @@ static const struct attribute_spec ia64_attribute_table[] =\n \n #undef TARGET_ASM_OUTPUT_MI_THUNK\n #define TARGET_ASM_OUTPUT_MI_THUNK ia64_output_mi_thunk\n+#undef TARGET_ASM_CAN_OUTPUT_MI_THUNK\n+#define TARGET_ASM_CAN_OUTPUT_MI_THUNK default_can_output_mi_thunk_no_vcall\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n@@ -8165,10 +8168,11 @@ ia64_aix_select_rtx_section (mode, x, align)\n }\n \n static void\n-ia64_output_mi_thunk (file, thunk, delta, function)\n+ia64_output_mi_thunk (file, thunk, delta, vcall_offset, function)\n      FILE *file;\n      tree thunk ATTRIBUTE_UNUSED;\n      HOST_WIDE_INT delta;\n+     HOST_WIDE_INT vcall_offset ATTRIBUTE_UNUSED;\n      tree function;\n {\n   if (CONST_OK_FOR_I (delta))\t\t\t\t\t\t"}, {"sha": "11654d6c6dc2572a3c965ed97b0694f9481b8a31", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3961e8fe9e9c8e3f6b07b38b88e12943c817e75c/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3961e8fe9e9c8e3f6b07b38b88e12943c817e75c/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=3961e8fe9e9c8e3f6b07b38b88e12943c817e75c", "patch": "@@ -65,7 +65,8 @@ static void m68k_coff_asm_named_section PARAMS ((const char *, unsigned int));\n #ifdef CTOR_LIST_BEGIN\n static void m68k_svr3_asm_out_constructor PARAMS ((rtx, int));\n #endif\n-static void m68k_output_mi_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT, tree));\n+static void m68k_output_mi_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT,\n+\t\t\t\t\t  HOST_WIDE_INT, tree));\n \f\n \n /* Alignment to use for loops and jumps */\n@@ -125,6 +126,8 @@ int m68k_last_compare_had_fp_operands;\n \n #undef TARGET_ASM_OUTPUT_MI_THUNK\n #define TARGET_ASM_OUTPUT_MI_THUNK m68k_output_mi_thunk\n+#undef TARGET_ASM_OUTPUT_MI_THUNK\n+#define TARGET_ASM_OUTPUT_MI_THUNK default_can_output_mi_thunk_no_vcall\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n@@ -3841,10 +3844,11 @@ m68k_svr3_asm_out_constructor (symbol, priority)\n #endif\n \n static void\n-m68k_output_mi_thunk (file, thunk, delta, function)\n+m68k_output_mi_thunk (file, thunk, delta, vcall_offset, function)\n      FILE *file;\n      tree thunk ATTRIBUTE_UNUSED;\n      HOST_WIDE_INT delta;\n+     HOST_WIDE_INT vcall_offset ATTRIBUTE_UNUSED;\n      tree function;\n {\n   rtx xops[1];"}, {"sha": "0cc567d18a4071b51ab21d6f39108dbe70c3db5a", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3961e8fe9e9c8e3f6b07b38b88e12943c817e75c/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3961e8fe9e9c8e3f6b07b38b88e12943c817e75c/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=3961e8fe9e9c8e3f6b07b38b88e12943c817e75c", "patch": "@@ -131,7 +131,7 @@ static void mmix_target_asm_function_end_prologue PARAMS ((FILE *));\n static void mmix_target_asm_function_epilogue\n   PARAMS ((FILE *, HOST_WIDE_INT));\n static void mmix_asm_output_mi_thunk\n-  PARAMS ((FILE *, tree, HOST_WIDE_INT, tree));\n+  PARAMS ((FILE *, tree, HOST_WIDE_INT, HOST_WIDE_INT, tree));\n \n \n /* Target structure macros.  Listed by node.  See `Using and Porting GCC'\n@@ -166,6 +166,8 @@ static void mmix_asm_output_mi_thunk\n \n #undef TARGET_ASM_OUTPUT_MI_THUNK\n #define TARGET_ASM_OUTPUT_MI_THUNK mmix_asm_output_mi_thunk\n+#undef TARGET_ASM_CAN_OUTPUT_MI_THUNK\n+#define TARGET_ASM_CAN_OUTPUT_MI_THUNK default_can_output_mi_thunk_no_vcall\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \n@@ -778,10 +780,11 @@ mmix_target_asm_function_epilogue (stream, locals_size)\n /* TARGET_ASM_OUTPUT_MI_THUNK.  */\n \n static void\n-mmix_asm_output_mi_thunk (stream, fndecl, delta, func)\n+mmix_asm_output_mi_thunk (stream, fndecl, delta, vcall_offset, func)\n      FILE * stream;\n      tree fndecl ATTRIBUTE_UNUSED;\n      HOST_WIDE_INT delta;\n+     HOST_WIDE_INT vcall_offset ATTRIBUTE_UNUSED;\n      tree func;\n {\n   /* If you define STRUCT_VALUE to 0, rather than use STRUCT_VALUE_REGNUM,"}, {"sha": "58ba157fc24d65c43959c4a6ed16700d4c440a0b", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3961e8fe9e9c8e3f6b07b38b88e12943c817e75c/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3961e8fe9e9c8e3f6b07b38b88e12943c817e75c/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=3961e8fe9e9c8e3f6b07b38b88e12943c817e75c", "patch": "@@ -119,7 +119,8 @@ static void pa_encode_section_info PARAMS ((tree, int));\n static const char *pa_strip_name_encoding PARAMS ((const char *));\n static void pa_globalize_label PARAMS ((FILE *, const char *))\n      ATTRIBUTE_UNUSED;\n-static void pa_asm_output_mi_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT, tree));\n+static void pa_asm_output_mi_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT,\n+\t\t\t\t\t    HOST_WIDE_INT, tree));\n \n \n /* Save the operands last given to a compare for use when we\n@@ -199,6 +200,8 @@ static size_t n_deferred_plabels = 0;\n \n #undef TARGET_ASM_OUTPUT_MI_THUNK\n #define TARGET_ASM_OUTPUT_MI_THUNK pa_asm_output_mi_thunk\n+#undef TARGET_ASM_CAN_OUTPUT_MI_THUNK\n+#define TARGET_ASM_CAN_OUTPUT_MI_THUNK default_can_output_mi_thunk_no_vcall\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n@@ -6556,10 +6559,11 @@ is_function_label_plus_const (op)\n /* Output assembly code for a thunk to FUNCTION.  */\n \n static void\n-pa_asm_output_mi_thunk (file, thunk_fndecl, delta, function)\n+pa_asm_output_mi_thunk (file, thunk_fndecl, delta, vcall_offset, function)\n      FILE *file;\n      tree thunk_fndecl;\n      HOST_WIDE_INT delta;\n+     HOST_WIDE_INT vcall_offset ATTRIBUTE_UNUSED;\n      tree function;\n {\n   const char *target_name = XSTR (XEXP (DECL_RTL (function), 0), 0);"}, {"sha": "d0431545364de5bd5b4ada786bd32c0f482b8497", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3961e8fe9e9c8e3f6b07b38b88e12943c817e75c/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3961e8fe9e9c8e3f6b07b38b88e12943c817e75c/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=3961e8fe9e9c8e3f6b07b38b88e12943c817e75c", "patch": "@@ -150,7 +150,6 @@ extern void setup_incoming_varargs PARAMS ((CUMULATIVE_ARGS *,\n \t\t\t\t\t    enum machine_mode, tree,\n \t\t\t\t\t    int *, int));\n extern struct rtx_def *rs6000_va_arg PARAMS ((tree, tree));\n-extern void output_mi_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT, tree));\n extern int function_ok_for_sibcall PARAMS ((tree));\n #ifdef ARGS_SIZE_RTX\n /* expr.h defines ARGS_SIZE_RTX and `enum direction' */"}, {"sha": "4e625e825d6d13030305ee7c668e543f2fe92142", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3961e8fe9e9c8e3f6b07b38b88e12943c817e75c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3961e8fe9e9c8e3f6b07b38b88e12943c817e75c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=3961e8fe9e9c8e3f6b07b38b88e12943c817e75c", "patch": "@@ -194,6 +194,8 @@ const struct attribute_spec rs6000_attribute_table[];\n static void rs6000_set_default_type_attributes PARAMS ((tree));\n static void rs6000_output_function_prologue PARAMS ((FILE *, HOST_WIDE_INT));\n static void rs6000_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n+static void rs6000_output_mi_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT,\n+\t\t\t\t\t    HOST_WIDE_INT, tree));\n static rtx rs6000_emit_set_long_const PARAMS ((rtx,\n   HOST_WIDE_INT, HOST_WIDE_INT));\n #if TARGET_ELF\n@@ -311,6 +313,9 @@ static const char alt_reg_names[][8] =\n #ifndef MASK_STRICT_ALIGN\n #define MASK_STRICT_ALIGN 0\n #endif\n+\n+/* The VRSAVE bitmask puts bit %v0 as the most significant bit.  */\n+#define ALTIVEC_REG_BIT(REGNO) (0x80000000 >> ((REGNO) - FIRST_ALTIVEC_REGNO))\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ATTRIBUTE_TABLE\n@@ -373,8 +378,15 @@ static const char alt_reg_names[][8] =\n #undef TARGET_BINDS_LOCAL_P\n #define TARGET_BINDS_LOCAL_P rs6000_binds_local_p\n \n-/* The VRSAVE bitmask puts bit %v0 as the most significant bit.  */\n-#define ALTIVEC_REG_BIT(REGNO) (0x80000000 >> ((REGNO) - FIRST_ALTIVEC_REGNO))\n+#undef TARGET_ASM_OUTPUT_MI_THUNK\n+#define TARGET_ASM_OUTPUT_MI_THUNK rs6000_output_mi_thunk\n+\n+/* ??? Should work everywhere, but ask dje@watson.ibm.com before\n+   enabling for AIX.  */\n+#if TARGET_OBJECT_FORMAT != OBJECT_XCOFF\n+#undef TARGET_ASM_CAN_OUTPUT_MI_THUNK\n+#define TARGET_ASM_CAN_OUTPUT_MI_THUNK default_can_output_mi_thunk_no_vcall\n+#endif\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n@@ -9463,7 +9475,11 @@ rs6000_ra_ever_killed ()\n   rtx reg;\n   rtx insn;\n \n-  if (targetm.asm_out.output_mi_thunk && current_function_is_thunk)\n+  /* Irritatingly, there are two kinds of thunks -- those created with\n+     TARGET_ASM_OUTPUT_MI_THUNK and those with DECL_THUNK_P that go\n+     through the regular part of the compiler.  This is a very hacky\n+     way to tell them apart.  */\n+  if (current_function_is_thunk && !no_new_pseudos)\n     return 0;\n \n   /* regs_ever_live has LR marked as used if any sibcalls are present,\n@@ -11238,11 +11254,12 @@ rs6000_output_function_epilogue (file, size)\n    calls FUNCTION instead of jumping to it.  The generic approach does\n    not support varargs.  */\n \n-void\n-output_mi_thunk (file, thunk_fndecl, delta, function)\n+static void\n+rs6000_output_mi_thunk (file, thunk_fndecl, delta, vcall_offset, function)\n      FILE *file;\n      tree thunk_fndecl ATTRIBUTE_UNUSED;\n      HOST_WIDE_INT delta;\n+     HOST_WIDE_INT vcall_offset ATTRIBUTE_UNUSED;\n      tree function;\n {\n   const char *this_reg =\n@@ -11348,10 +11365,7 @@ output_mi_thunk (file, thunk_fndecl, delta, function)\n \t    }\n \t  assemble_name (file, fname);\n \t  putc ('\\n', file);\n-\t  if (TARGET_ELF)\n-\t    function_section (current_function_decl);\n-\t  else\n-\t    text_section ();\n+\t  function_section (current_function_decl);\n \t  if (TARGET_MINIMAL_TOC)\n \t    asm_fprintf (file, (TARGET_32BIT)\n \t\t\t ? \"\\t{l|lwz} %s,%s(%s)\\n\" : \"\\tld %s,%s(%s)\\n\", r12,\n@@ -11398,7 +11412,6 @@ output_mi_thunk (file, thunk_fndecl, delta, function)\n \t}\n     }\n }\n-\n \f\n /* A quick summary of the various types of 'constant-pool tables'\n    under PowerPC:"}, {"sha": "4ea2c4f0d1cf7d695be6f62423f2bae9b0bd4bd2", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3961e8fe9e9c8e3f6b07b38b88e12943c817e75c/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3961e8fe9e9c8e3f6b07b38b88e12943c817e75c/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=3961e8fe9e9c8e3f6b07b38b88e12943c817e75c", "patch": "@@ -637,38 +637,6 @@ extern int rs6000_pic_labelno;\n     ASM_OUTPUT_LABEL (FILE, NAME);\t\t\t\t\t\\\n   } while (0)\n \n-/* A C compound statement that outputs the assembler code for a thunk function,\n-    used to implement C++ virtual function calls with multiple inheritance.  The\n-    thunk acts as a wrapper around a virtual function, adjusting the implicit\n-    object parameter before handing control off to the real function.\n-\n-    First, emit code to add the integer DELTA to the location that contains the\n-    incoming first argument.  Assume that this argument contains a pointer, and\n-    is the one used to pass the this' pointer in C++.  This is the incoming\n-    argument *before* the function prologue, e.g. %o0' on a sparc.  The\n-    addition must preserve the values of all other incoming arguments.\n-\n-    After the addition, emit code to jump to FUNCTION, which is a\n-    FUNCTION_DECL'.  This is a direct pure jump, not a call, and does not touch\n-    the return address.  Hence returning from FUNCTION will return to whoever\n-    called the current thunk'.\n-\n-    The effect must be as if FUNCTION had been called directly with the adjusted\n-    first argument.  This macro is responsible for emitting all of the code for\n-    a thunk function; FUNCTION_PROLOGUE' and FUNCTION_EPILOGUE' are not\n-    invoked.\n-\n-    The THUNK_FNDECL is redundant.  (DELTA and FUNCTION have already been\n-    extracted from it.)  It might possibly be useful on some targets, but\n-    probably not.\n-\n-    If you do not define this macro, the target-independent code in the C++\n-    frontend will generate a less efficient heavyweight thunk that calls\n-    FUNCTION instead of jumping to it.  The generic approach does not support\n-    varargs.  */\n-\n-#define\tTARGET_ASM_OUTPUT_MI_THUNK output_mi_thunk\n-\n /* The USER_LABEL_PREFIX stuff is affected by the -fleading-underscore\n    flag.  The LOCAL_LABEL_PREFIX variable is used by dbxelf.h.  */\n "}, {"sha": "21d74a9e616df6608fb36de4bdc01cc086785dad", "filename": "gcc/config/rs6000/xcoff.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3961e8fe9e9c8e3f6b07b38b88e12943c817e75c/gcc%2Fconfig%2Frs6000%2Fxcoff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3961e8fe9e9c8e3f6b07b38b88e12943c817e75c/gcc%2Fconfig%2Frs6000%2Fxcoff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fxcoff.h?ref=3961e8fe9e9c8e3f6b07b38b88e12943c817e75c", "patch": "@@ -296,7 +296,11 @@ toc_section ()\t\t\t\t\t\t\\\n   putc ('.', FILE);\t\t\t\t\t\t\\\n   RS6000_OUTPUT_BASENAME (FILE, NAME);\t\t\t\t\\\n   fputs (\":\\n\", FILE);\t\t\t\t\t\t\\\n-  if (write_symbols == XCOFF_DEBUG)\t\t\t\t\\\n+  if (write_symbols == XCOFF_DEBUG\t\t\t\t\\\n+      /* When called before targetm.asm_out.output_mi_thunk,\t\\\n+\t we won't be emitting the rest of the debug info that\t\\\n+\t goes along with this, leading to assembler errors.  */ \\\n+      && !(current_function_is_thunk && !no_new_pseudos))\t\\\n     xcoffout_declare_function (FILE, DECL, NAME);\t\t\\\n }\n "}, {"sha": "39ea09c49d8094a6fe03f8e3f9561954ad81dfb5", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3961e8fe9e9c8e3f6b07b38b88e12943c817e75c/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3961e8fe9e9c8e3f6b07b38b88e12943c817e75c/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=3961e8fe9e9c8e3f6b07b38b88e12943c817e75c", "patch": "@@ -54,8 +54,8 @@ static int s390_adjust_priority PARAMS ((rtx, int));\n static void s390_select_rtx_section PARAMS ((enum machine_mode, rtx, \n \t\t\t\t\t     unsigned HOST_WIDE_INT));\n static void s390_encode_section_info PARAMS ((tree, int));\n-static void s390_output_mi_vcall_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT, \n-\t\t\t\t\t\tHOST_WIDE_INT, tree));\n+static void s390_output_mi_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT,\n+\t\t\t\t\t  HOST_WIDE_INT, tree));\n \n #undef  TARGET_ASM_ALIGNED_HI_OP\n #define TARGET_ASM_ALIGNED_HI_OP \"\\t.word\\t\"\n@@ -82,8 +82,10 @@ static void s390_output_mi_vcall_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT,\n #undef\tTARGET_ENCODE_SECTION_INFO\n #define TARGET_ENCODE_SECTION_INFO s390_encode_section_info\n \n-#undef TARGET_ASM_OUTPUT_MI_VCALL_THUNK\n-#define TARGET_ASM_OUTPUT_MI_VCALL_THUNK s390_output_mi_vcall_thunk\n+#undef TARGET_ASM_OUTPUT_MI_THUNK\n+#define TARGET_ASM_OUTPUT_MI_THUNK s390_output_mi_thunk\n+#undef TARGET_ASM_CAN_OUTPUT_MI_THUNK\n+#define TARGET_ASM_CAN_OUTPUT_MI_THUNK hook_bool_tree_hwi_hwi_tree_true\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \n@@ -5620,7 +5622,7 @@ s390_encode_section_info (decl, first)\n    relative to the resulting this pointer.  */\n \n static void\n-s390_output_mi_vcall_thunk (file, thunk, delta, vcall_offset, function)\n+s390_output_mi_thunk (file, thunk, delta, vcall_offset, function)\n      FILE *file;\n      tree thunk ATTRIBUTE_UNUSED;\n      HOST_WIDE_INT delta;"}, {"sha": "9f608c352eb3185564a36ad000d8b6e6905a952f", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3961e8fe9e9c8e3f6b07b38b88e12943c817e75c/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3961e8fe9e9c8e3f6b07b38b88e12943c817e75c/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=3961e8fe9e9c8e3f6b07b38b88e12943c817e75c", "patch": "@@ -176,7 +176,8 @@ static void emit_soft_tfmode_cvt PARAMS ((enum rtx_code, rtx *));\n static void emit_hard_tfmode_operation PARAMS ((enum rtx_code, rtx *));\n \n static void sparc_encode_section_info PARAMS ((tree, int));\n-static void sparc_output_mi_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT, tree));\n+static void sparc_output_mi_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT,\n+\t\t\t\t\t   HOST_WIDE_INT, tree));\n \f\n /* Option handling.  */\n \n@@ -242,6 +243,8 @@ enum processor_type sparc_cpu;\n \n #undef TARGET_ASM_OUTPUT_MI_THUNK\n #define TARGET_ASM_OUTPUT_MI_THUNK sparc_output_mi_thunk\n+#undef TARGET_ASM_CAN_OUTPUT_MI_THUNK\n+#define TARGET_ASM_CAN_OUTPUT_MI_THUNK default_can_output_mi_thunk_no_vcall\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n@@ -8453,10 +8456,11 @@ sparc_encode_section_info (decl, first)\n    Used for C++ multiple inheritance.  */\n \n static void\n-sparc_output_mi_thunk (file, thunk_fndecl, delta, function)\n+sparc_output_mi_thunk (file, thunk_fndecl, delta, vcall_offset, function)\n      FILE *file;\n      tree thunk_fndecl ATTRIBUTE_UNUSED;\n      HOST_WIDE_INT delta;\n+     HOST_WIDE_INT vcall_offset ATTRIBUTE_UNUSED;\n      tree function;\n {\n   rtx this, insn, funexp, delta_rtx, tmp;"}, {"sha": "5c54155f6d9abe7414ac8b6185a59db6a7e14ce9", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3961e8fe9e9c8e3f6b07b38b88e12943c817e75c/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3961e8fe9e9c8e3f6b07b38b88e12943c817e75c/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=3961e8fe9e9c8e3f6b07b38b88e12943c817e75c", "patch": "@@ -51,7 +51,7 @@ static void xstormy16_asm_out_constructor PARAMS ((rtx, int));\n static void xstormy16_asm_out_destructor PARAMS ((rtx, int));\n static void xstormy16_encode_section_info PARAMS ((tree, int));\n static void xstormy16_asm_output_mi_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT,\n-\t\t\t\t\t\t   tree));\n+\t\t\t\t\t\t   HOST_WIDE_INT, tree));\n \n /* Define the information needed to generate branch and scc insns.  This is\n    stored from the compare operation.  */\n@@ -1383,10 +1383,12 @@ xstormy16_function_value (valtype, func)\n    probably not.  */\n \n static void\n-xstormy16_asm_output_mi_thunk (file, thunk_fndecl, delta, function)\n+xstormy16_asm_output_mi_thunk (file, thunk_fndecl, delta,\n+\t\t\t       vcall_offset, function)\n      FILE *file;\n      tree thunk_fndecl ATTRIBUTE_UNUSED;\n      HOST_WIDE_INT delta;\n+     HOST_WIDE_INT vcall_offset ATTRIBUTE_UNUSED;\n      tree function;\n {\n   int regnum = FIRST_ARGUMENT_REGISTER;\n@@ -2035,5 +2037,7 @@ xstormy16_handle_interrupt_attribute (node, name, args, flags, no_add_attrs)\n \n #undef TARGET_ASM_OUTPUT_MI_THUNK\n #define TARGET_ASM_OUTPUT_MI_THUNK xstormy16_asm_output_mi_thunk\n+#undef TARGET_ASM_CAN_OUTPUT_MI_THUNK\n+#define TARGET_ASM_CAN_OUTPUT_MI_THUNK default_can_output_mi_thunk_no_vcall\n \n struct gcc_target targetm = TARGET_INITIALIZER;"}, {"sha": "6e3a291c2287ba32b53b18b83e92b9fafea321c8", "filename": "gcc/config/vax/vax-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3961e8fe9e9c8e3f6b07b38b88e12943c817e75c/gcc%2Fconfig%2Fvax%2Fvax-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3961e8fe9e9c8e3f6b07b38b88e12943c817e75c/gcc%2Fconfig%2Fvax%2Fvax-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax-protos.h?ref=3961e8fe9e9c8e3f6b07b38b88e12943c817e75c", "patch": "@@ -36,7 +36,6 @@ extern int check_float_value PARAMS ((enum machine_mode, REAL_VALUE_TYPE *, int)\n \n #ifdef TREE_CODE\n extern void vms_check_external PARAMS ((tree, const char *, int));\n-extern void vax_output_mi_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT, tree));\n #endif /* TREE_CODE */\n \n extern void vms_flush_pending_externals PARAMS ((FILE *));"}, {"sha": "7db62115683cd3a811f30a0457068a8b058b8dbc", "filename": "gcc/config/vax/vax.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3961e8fe9e9c8e3f6b07b38b88e12943c817e75c/gcc%2Fconfig%2Fvax%2Fvax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3961e8fe9e9c8e3f6b07b38b88e12943c817e75c/gcc%2Fconfig%2Fvax%2Fvax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.c?ref=3961e8fe9e9c8e3f6b07b38b88e12943c817e75c", "patch": "@@ -48,6 +48,8 @@ static void vms_select_section PARAMS ((tree, int, unsigned HOST_WIDE_INT));\n static void vms_encode_section_info PARAMS ((tree, int));\n static void vms_globalize_label PARAMS ((FILE *, const char *));\n #endif\n+static void vax_output_mi_thunk PARAMS ((FILE *, tree, HOST_WIDE_INT,\n+\t\t\t\t\t HOST_WIDE_INT, tree));\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ASM_ALIGNED_HI_OP\n@@ -65,6 +67,11 @@ static void vms_globalize_label PARAMS ((FILE *, const char *));\n #define TARGET_ASM_GLOBALIZE_LABEL vms_globalize_label\n #endif\n \n+#undef TARGET_ASM_OUTPUT_MI_THUNK\n+#define TARGET_ASM_OUTPUT_MI_THUNK vax_output_mi_thunk\n+#undef TARGET_ASM_CAN_OUTPUT_MI_THUNK\n+#define TARGET_ASM_CAN_OUTPUT_MI_THUNK default_can_output_mi_thunk_no_vcall\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Set global variables as needed for the options enabled.  */\n@@ -993,11 +1000,12 @@ reg_was_0_p (insn, op)\n \t  && ! reg_set_between_p (op, XEXP (link, 0), insn));\n }\n \n-void\n-vax_output_mi_thunk (file, thunk, delta, function)\n+static void\n+vax_output_mi_thunk (file, thunk, delta, vcall_offset, function)\n      FILE *file;\n      tree thunk ATTRIBUTE_UNUSED;\n      HOST_WIDE_INT delta;\n+     HOST_WIDE_INT vcall_offset ATTRIBUTE_UNUSED;\n      tree function;\n {\n   fprintf (file, \"\\t.word 0x0ffc\\n\");\t\t\t\t\t"}, {"sha": "47a0f034e69a195955b3467de077d3ae75c607e4", "filename": "gcc/config/vax/vax.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3961e8fe9e9c8e3f6b07b38b88e12943c817e75c/gcc%2Fconfig%2Fvax%2Fvax.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3961e8fe9e9c8e3f6b07b38b88e12943c817e75c/gcc%2Fconfig%2Fvax%2Fvax.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.h?ref=3961e8fe9e9c8e3f6b07b38b88e12943c817e75c", "patch": "@@ -1155,14 +1155,6 @@ enum reg_class { NO_REGS, ALL_REGS, LIM_REG_CLASSES };\n ( (OUTPUT) = (char *) alloca (strlen ((NAME)) + 10),\t\\\n   sprintf ((OUTPUT), \"%s.%d\", (NAME), (LABELNO)))\n \n-/* Output code to add DELTA to the first argument, and then jump to FUNCTION.\n-   Used for C++ multiple inheritance.\n-\t.mask\t^m<r2,r3,r4,r5,r6,r7,r8,r9,r10,r11>\t#conservative entry mask\n-\taddl2\t$DELTA, 4(ap)\t#adjust first argument\n-\tjmp\tFUNCTION+2\t#jump beyond FUNCTION's entry mask\n- */\n-#define ASM_OUTPUT_MI_THUNK vax_output_mi_thunk\n-\n /* Print an instruction operand X on file FILE.\n    CODE is the code from the %-spec that requested printing this operand;\n    if `%z3' was used to print operand 3, then CODE is 'z'."}, {"sha": "6f73ad911d113cdb2ce3a966983ea6916f3eb35c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3961e8fe9e9c8e3f6b07b38b88e12943c817e75c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3961e8fe9e9c8e3f6b07b38b88e12943c817e75c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3961e8fe9e9c8e3f6b07b38b88e12943c817e75c", "patch": "@@ -1,3 +1,9 @@\n+2002-10-22  Richard Henderson  <rth@redhat.com>\n+\n+\t* method.c (use_thunk): Always compute vcall_value; assert that\n+\tit is not zero.  Use can_output_mi_thunk; use output_mi_thunk\n+\tfor vcall thunks as well.\n+\n 2002-10-21  Mark Mitchell  <mark@codesourcery.com>\n \n \t* class.c (empty_base_at_nonzero_offset_p): New function."}, {"sha": "60a0dced61173f8dfef395c35cb94ef23b497b2c", "filename": "gcc/cp/method.c", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3961e8fe9e9c8e3f6b07b38b88e12943c817e75c/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3961e8fe9e9c8e3f6b07b38b88e12943c817e75c/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=3961e8fe9e9c8e3f6b07b38b88e12943c817e75c", "patch": "@@ -361,7 +361,7 @@ use_thunk (thunk_fndecl, emit_p)\n   tree fnaddr;\n   tree function;\n   tree vcall_offset;\n-  HOST_WIDE_INT delta;\n+  HOST_WIDE_INT delta, vcall_value;\n \n   if (TREE_ASM_WRITTEN (thunk_fndecl))\n     return;\n@@ -387,6 +387,17 @@ use_thunk (thunk_fndecl, emit_p)\n   delta = THUNK_DELTA (thunk_fndecl);\n   vcall_offset = THUNK_VCALL_OFFSET (thunk_fndecl);\n \n+  if (vcall_offset)\n+    {\n+      vcall_value = tree_low_cst (vcall_offset, /*pos=*/0);\n+\n+      /* It is expected that a value of zero means no vcall.  */\n+      if (!vcall_value)\n+\tabort ();\n+    }\n+  else\n+    vcall_value = 0;\n+\n   /* And, if we need to emit the thunk, it's used.  */\n   mark_used (thunk_fndecl);\n   /* This thunk is actually defined.  */\n@@ -409,8 +420,8 @@ use_thunk (thunk_fndecl, emit_p)\n   BLOCK_VARS (DECL_INITIAL (thunk_fndecl)) \n     = DECL_ARGUMENTS (thunk_fndecl);\n \n-  if (targetm.asm_out.output_mi_vcall_thunk\n-      || (targetm.asm_out.output_mi_thunk && !vcall_offset))\n+  if (targetm.asm_out.can_output_mi_thunk (thunk_fndecl, delta,\n+\t\t\t\t\t   vcall_value, function))\n     {\n       const char *fnname;\n       current_function_decl = thunk_fndecl;\n@@ -420,22 +431,10 @@ use_thunk (thunk_fndecl, emit_p)\n       init_function_start (thunk_fndecl, input_filename, lineno);\n       current_function_is_thunk = 1;\n       assemble_start_function (thunk_fndecl, fnname);\n-      if (targetm.asm_out.output_mi_vcall_thunk)\n-\t{\n-\t  HOST_WIDE_INT vcall_value;\n \n-\t  if (vcall_offset)\n-\t    vcall_value = tree_low_cst (vcall_offset, /*pos=*/0);\n-\t  else\n-\t    vcall_value = 0;\n-\t  targetm.asm_out.output_mi_vcall_thunk (asm_out_file, \n-\t\t\t\t\t\t thunk_fndecl, delta, \n-\t\t\t\t\t\t vcall_value,\n-\t\t\t\t\t\t function);\n-\t}\n-      else\n-\ttargetm.asm_out.output_mi_thunk (asm_out_file, thunk_fndecl, \n-\t\t\t\t\t delta, function);\n+      targetm.asm_out.output_mi_thunk (asm_out_file, thunk_fndecl, delta,\n+\t\t\t\t       vcall_value, function);\n+\n       assemble_end_function (thunk_fndecl, fnname);\n       current_function_decl = 0;\n       cfun = 0;"}, {"sha": "977a3f1ce7e28f29c6b1884eb59134e3858b68c1", "filename": "gcc/hooks.c", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3961e8fe9e9c8e3f6b07b38b88e12943c817e75c/gcc%2Fhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3961e8fe9e9c8e3f6b07b38b88e12943c817e75c/gcc%2Fhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.c?ref=3961e8fe9e9c8e3f6b07b38b88e12943c817e75c", "patch": "@@ -62,3 +62,34 @@ hook_FILEptr_constcharptr_void (a, b)\n      const char *b ATTRIBUTE_UNUSED;\n {\n }\n+\n+/* Used for the TARGET_ASM_CAN_OUTPUT_MI_THUNK hook.  */\n+bool\n+hook_bool_tree_hwi_hwi_tree_false (a, b, c, d)\n+     tree a ATTRIBUTE_UNUSED;\n+     HOST_WIDE_INT b ATTRIBUTE_UNUSED;\n+     HOST_WIDE_INT c ATTRIBUTE_UNUSED;\n+     tree d ATTRIBUTE_UNUSED;\n+{\n+  return false;\n+}\n+\n+bool\n+hook_bool_tree_hwi_hwi_tree_true (a, b, c, d)\n+     tree a ATTRIBUTE_UNUSED;\n+     HOST_WIDE_INT b ATTRIBUTE_UNUSED;\n+     HOST_WIDE_INT c ATTRIBUTE_UNUSED;\n+     tree d ATTRIBUTE_UNUSED;\n+{\n+  return true;\n+}\n+\n+bool\n+default_can_output_mi_thunk_no_vcall (a, b, c, d)\n+     tree a ATTRIBUTE_UNUSED;\n+     HOST_WIDE_INT b ATTRIBUTE_UNUSED;\n+     HOST_WIDE_INT c;\n+     tree d ATTRIBUTE_UNUSED;\n+{\n+  return c == 0;\n+}"}, {"sha": "34af50c6da2451e0deb416784f8b59d42b581b00", "filename": "gcc/hooks.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3961e8fe9e9c8e3f6b07b38b88e12943c817e75c/gcc%2Fhooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3961e8fe9e9c8e3f6b07b38b88e12943c817e75c/gcc%2Fhooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.h?ref=3961e8fe9e9c8e3f6b07b38b88e12943c817e75c", "patch": "@@ -27,5 +27,12 @@ bool hook_tree_bool_false PARAMS ((tree));\n void hook_tree_int_void PARAMS ((tree, int));\n void hook_void_void PARAMS ((void));\n void hook_FILEptr_constcharptr_void PARAMS ((FILE *, const char *));\n+bool hook_bool_tree_hwi_hwi_tree_false\n+  PARAMS ((tree, HOST_WIDE_INT, HOST_WIDE_INT, tree));\n+bool hook_bool_tree_hwi_hwi_tree_true\n+  PARAMS ((tree, HOST_WIDE_INT, HOST_WIDE_INT, tree));\n+\n+bool default_can_output_mi_thunk_no_vcall\n+  PARAMS ((tree, HOST_WIDE_INT, HOST_WIDE_INT, tree));\n \n #endif"}, {"sha": "5adbd32b9c6010ce0486ebeb7321cbb2eb7adc47", "filename": "gcc/system.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3961e8fe9e9c8e3f6b07b38b88e12943c817e75c/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3961e8fe9e9c8e3f6b07b38b88e12943c817e75c/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=3961e8fe9e9c8e3f6b07b38b88e12943c817e75c", "patch": "@@ -599,7 +599,8 @@ typedef char _Bool;\n \tMD_INIT_BUILTINS MD_EXPAND_BUILTIN ASM_OUTPUT_CONSTRUCTOR\t\\\n \tASM_OUTPUT_DESTRUCTOR SIGNED_CHAR_SPEC MAX_CHAR_TYPE_SIZE\t\\\n \tWCHAR_UNSIGNED UNIQUE_SECTION SELECT_SECTION SELECT_RTX_SECTION\t\\\n-\tENCODE_SECTION_INFO STRIP_NAME_ENCODING ASM_GLOBALIZE_LABEL\n+\tENCODE_SECTION_INFO STRIP_NAME_ENCODING ASM_GLOBALIZE_LABEL\t\\\n+\tASM_OUTPUT_MI_THUNK\n \n /* Other obsolete target macros, or macros that used to be in target\n    headers and were not used, and may be obsolete or may never have"}, {"sha": "46bc4a250c7912ba2b820bf1008e82df51d34103", "filename": "gcc/target-def.h", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3961e8fe9e9c8e3f6b07b38b88e12943c817e75c/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3961e8fe9e9c8e3f6b07b38b88e12943c817e75c/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=3961e8fe9e9c8e3f6b07b38b88e12943c817e75c", "patch": "@@ -103,13 +103,8 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n # endif\n #endif\n \n-#ifndef TARGET_ASM_OUTPUT_MI_THUNK\n #define TARGET_ASM_OUTPUT_MI_THUNK NULL\n-#endif\n-\n-#ifndef TARGET_ASM_OUTPUT_MI_VCALL_THUNK\n-#define TARGET_ASM_OUTPUT_MI_VCALL_THUNK NULL\n-#endif\n+#define TARGET_ASM_CAN_OUTPUT_MI_THUNK hook_bool_tree_hwi_hwi_tree_false\n \n #if defined(TARGET_ASM_CONSTRUCTOR) && defined(TARGET_ASM_DESTRUCTOR)\n #define TARGET_HAVE_CTORS_DTORS true\n@@ -183,7 +178,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n \t\t\tTARGET_ASM_CONSTRUCTOR,\t\t\t\\\n \t\t\tTARGET_ASM_DESTRUCTOR,                  \\\n                         TARGET_ASM_OUTPUT_MI_THUNK,             \\\n-                        TARGET_ASM_OUTPUT_MI_VCALL_THUNK }\n+                        TARGET_ASM_CAN_OUTPUT_MI_THUNK }\n \n /* Scheduler hooks.  All of these default to null pointers, which\n    haifa-sched.c looks for and handles.  */"}, {"sha": "44e64a9903ac599e8fc3224d2671c0bea368c912", "filename": "gcc/target.h", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3961e8fe9e9c8e3f6b07b38b88e12943c817e75c/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3961e8fe9e9c8e3f6b07b38b88e12943c817e75c/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=3961e8fe9e9c8e3f6b07b38b88e12943c817e75c", "patch": "@@ -120,12 +120,26 @@ struct gcc_target\n     /* Output a destructor for a symbol with a given priority.  */\n     void (* destructor) PARAMS ((rtx, int));\n \n-    /* Output the assembler code for a thunk function.  */\n-    void (* output_mi_thunk) PARAMS ((FILE *, tree, HOST_WIDE_INT, tree));\n-\n-    /* Output the assembler code for a thunk function with a vcall offset.  */\n-    void (* output_mi_vcall_thunk) PARAMS ((FILE *, tree, HOST_WIDE_INT,\n-\t\t\t\t\t    HOST_WIDE_INT, tree));\n+    /* Output the assembler code for a thunk function.  THUNK_DECL is the\n+       declaration for the thunk function itself, FUNCTION is the decl for\n+       the target function.  DELTA is an immediate constant offset to be\n+       added to THIS.  If VCALL_OFFSET is non-zero, the word at\n+       *(*this + vcall_offset) should be added to THIS.  */\n+    void (* output_mi_thunk) PARAMS ((FILE *file, tree thunk_decl,\n+\t\t\t\t      HOST_WIDE_INT delta,\n+\t\t\t\t      HOST_WIDE_INT vcall_offset,\n+\t\t\t\t      tree function_decl));\n+\n+    /* Determine whether output_mi_thunk would succeed.  */\n+    /* ??? Ideally, this hook would not exist, and success or failure\n+       would be returned from output_mi_thunk directly.  But there's\n+       too much undo-able setup involved in invoking output_mi_thunk.\n+       Could be fixed by making output_mi_thunk emit rtl instead of\n+       text to the output file.  */\n+    bool (* can_output_mi_thunk) PARAMS ((tree thunk_decl,\n+\t\t\t\t          HOST_WIDE_INT delta,\n+\t\t\t\t          HOST_WIDE_INT vcall_offset,\n+\t\t\t\t          tree function_decl));\n   } asm_out;\n \n   /* Functions relating to instruction scheduling.  */"}]}