{"sha": "c9cd5c56fd01ea931308dfb6232a01cd5478bd3d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzljZDVjNTZmZDAxZWE5MzEzMDhkZmI2MjMyYTAxY2Q1NDc4YmQzZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-11-12T04:57:29Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-11-12T04:57:29Z"}, "message": "Implement P1946R0, Allow defaulting comparisons by value.\n\n\t* method.c (early_check_defaulted_comparison): Accept by-value,\n\treject mixed by-value and by-reference parms.\n\t* decl.c (grokdeclarator): Set funcdef_flag for defaulted friend.\n\t* decl2.c (grokfield): Don't SET_DECL_FRIEND_CONTEXT.\n\nFrom-SVN: r278078", "tree": {"sha": "4f55345662efee8ad0ae92896a795ee80a048114", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f55345662efee8ad0ae92896a795ee80a048114"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c9cd5c56fd01ea931308dfb6232a01cd5478bd3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9cd5c56fd01ea931308dfb6232a01cd5478bd3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9cd5c56fd01ea931308dfb6232a01cd5478bd3d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9cd5c56fd01ea931308dfb6232a01cd5478bd3d/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6e9a85d5052607c8ed31940ce2794323df9463cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e9a85d5052607c8ed31940ce2794323df9463cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e9a85d5052607c8ed31940ce2794323df9463cc"}], "stats": {"total": 180, "additions": 159, "deletions": 21}, "files": [{"sha": "23339b6fc762a12fc716a305a819d07871ffa9df", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9cd5c56fd01ea931308dfb6232a01cd5478bd3d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9cd5c56fd01ea931308dfb6232a01cd5478bd3d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c9cd5c56fd01ea931308dfb6232a01cd5478bd3d", "patch": "@@ -1,5 +1,11 @@\n 2019-11-11  Jason Merrill  <jason@redhat.com>\n \n+\tImplement P1946R0, Allow defaulting comparisons by value.\n+\t* method.c (early_check_defaulted_comparison): Accept by-value,\n+\treject mixed by-value and by-reference parms.\n+\t* decl.c (grokdeclarator): Set funcdef_flag for defaulted friend.\n+\t* decl2.c (grokfield): Don't SET_DECL_FRIEND_CONTEXT.\n+\n \t* typeck.c (cp_build_binary_op): Sorry about <=> on VECTOR_TYPE.\n \n 2019-11-11  Jakub Jelinek  <jakub@redhat.com>"}, {"sha": "86e38f4af691a51b98adeb01a408eaad715d7404", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9cd5c56fd01ea931308dfb6232a01cd5478bd3d/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9cd5c56fd01ea931308dfb6232a01cd5478bd3d/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=c9cd5c56fd01ea931308dfb6232a01cd5478bd3d", "patch": "@@ -13202,6 +13202,11 @@ grokdeclarator (const cp_declarator *declarator,\n \t      ;  /* We already issued a permerror.  */\n \t    else if (decl && DECL_NAME (decl))\n \t      {\n+\t\tif (initialized)\n+\t\t  /* Kludge: We need funcdef_flag to be true in do_friend for\n+\t\t     in-class defaulted functions, but that breaks grokfndecl.\n+\t\t     So set it here.  */\n+\t\t  funcdef_flag = true;\n \t\tif (template_class_depth (current_class_type) == 0)\n \t\t  {\n \t\t    decl = check_explicit_specialization"}, {"sha": "f164494afdc6c19b523f6e54e45a08bc5d9923fd", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9cd5c56fd01ea931308dfb6232a01cd5478bd3d/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9cd5c56fd01ea931308dfb6232a01cd5478bd3d/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=c9cd5c56fd01ea931308dfb6232a01cd5478bd3d", "patch": "@@ -927,10 +927,6 @@ grokfield (const cp_declarator *declarator,\n \t    }\n \t  else if (init == ridpointers[(int)RID_DEFAULT])\n \t    {\n-\t      if (friendp)\n-\t\t/* ??? do_friend doesn't set this because funcdef_flag is false\n-\t\t   for in-class defaulted functions.  So set it here.  */\n-\t\tSET_DECL_FRIEND_CONTEXT (value, current_class_type);\n \t      if (defaultable_fn_check (value))\n \t\t{\n \t\t  DECL_DEFAULTED_FN (value) = 1;"}, {"sha": "acba6c6da8ce38f14eb5259ecf9b71b9aae95fd6", "filename": "gcc/cp/method.c", "status": "modified", "additions": 33, "deletions": 17, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9cd5c56fd01ea931308dfb6232a01cd5478bd3d/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9cd5c56fd01ea931308dfb6232a01cd5478bd3d/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=c9cd5c56fd01ea931308dfb6232a01cd5478bd3d", "patch": "@@ -1094,38 +1094,54 @@ early_check_defaulted_comparison (tree fn)\n   if (!DECL_OVERLOADED_OPERATOR_IS (fn, SPACESHIP_EXPR)\n       && !same_type_p (TREE_TYPE (TREE_TYPE (fn)), boolean_type_node))\n     {\n-      error_at (loc, \"defaulted %qD must return %<bool%>\", fn);\n-      ok = false;\n+      diagnostic_t kind = DK_UNSPECIFIED;\n+      int opt = 0;\n+      if (is_auto (TREE_TYPE (fn)))\n+\tkind = DK_PEDWARN;\n+      else\n+\tkind = DK_ERROR;\n+      emit_diagnostic (kind, loc, opt,\n+\t\t       \"defaulted %qD must return %<bool%>\", fn);\n+      if (kind == DK_ERROR)\n+\tok = false;\n     }\n \n-  int i = DECL_NONSTATIC_MEMBER_FUNCTION_P (fn);\n-  if (i && type_memfn_quals (TREE_TYPE (fn)) != TYPE_QUAL_CONST)\n+  bool mem = DECL_NONSTATIC_MEMBER_FUNCTION_P (fn);\n+  if (mem && type_memfn_quals (TREE_TYPE (fn)) != TYPE_QUAL_CONST)\n     {\n       error_at (loc, \"defaulted %qD must be %<const%>\", fn);\n       ok = false;\n     }\n   tree parmnode = FUNCTION_FIRST_USER_PARMTYPE (fn);\n+  bool saw_byval = false;\n+  bool saw_byref = mem;\n+  bool saw_bad = false;\n   for (; parmnode != void_list_node; parmnode = TREE_CHAIN (parmnode))\n     {\n-      ++i;\n       tree parmtype = TREE_VALUE (parmnode);\n-      diagnostic_t kind = DK_UNSPECIFIED;\n-      int opt = 0;\n       if (same_type_p (parmtype, ctx))\n-\t/* The draft specifies const reference, but let's also allow by-value\n-\t   unless -Wpedantic, hopefully it will be added soon. */\n-\tkind = DK_PEDWARN,\n-\t  opt = OPT_Wpedantic;\n+\tsaw_byval = true;\n       else if (TREE_CODE (parmtype) != REFERENCE_TYPE\n \t       || TYPE_QUALS (TREE_TYPE (parmtype)) != TYPE_QUAL_CONST\n \t       || !(same_type_ignoring_top_level_qualifiers_p\n \t\t    (TREE_TYPE (parmtype), ctx)))\n-\tkind = DK_ERROR;\n-      if (kind)\n-\temit_diagnostic (kind, loc, opt, \"defaulted %qD must have \"\n-\t\t\t \"parameter type %<const %T&%>\", fn, ctx);\n-      if (kind == DK_ERROR)\n-\tok = false;\n+\tsaw_bad = true;\n+      else\n+\tsaw_byref = true;\n+    }\n+\n+  if (saw_bad || (saw_byval && saw_byref))\n+    {\n+      if (DECL_NONSTATIC_MEMBER_FUNCTION_P (fn))\n+\terror_at (loc, \"defaulted member %qD must have parameter type \"\n+\t\t  \"%<const %T&%>\", fn, ctx);\n+      else if (saw_bad)\n+\terror_at (loc, \"defaulted %qD must have parameters of either type \"\n+\t\t  \"%<const %T&%> or %qT\", fn, ctx, ctx);\n+      else\n+\terror_at (loc, \"defaulted %qD must have parameters of either type \"\n+\t\t  \"%<const %T&%> or %qT, not both\", fn, ctx, ctx);\n+      ok = false;\n     }\n \n   /* We still need to deduce deleted/constexpr/noexcept and maybe return. */"}, {"sha": "f9b2dc449e2c0a7067df7b410b5f7dbaa11c79aa", "filename": "gcc/testsuite/g++.dg/cpp2a/spaceship-synth-neg1.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9cd5c56fd01ea931308dfb6232a01cd5478bd3d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-synth-neg1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9cd5c56fd01ea931308dfb6232a01cd5478bd3d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-synth-neg1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-synth-neg1.C?ref=c9cd5c56fd01ea931308dfb6232a01cd5478bd3d", "patch": "@@ -0,0 +1,29 @@\n+// { dg-do compile { target c++2a } }\n+\n+#include <compare>\n+\n+template <class T>\n+struct D\n+{\n+  T i;\n+  auto operator<=>(D) const = default; // { dg-error \"defaulted member\" }\n+  bool operator==(D) const = default; // { dg-error \"defaulted member\" }\n+  bool operator!=(D) const = default; // { dg-error \"defaulted member\" }\n+  bool operator<(D) const = default; // { dg-error \"defaulted member\" }\n+  bool operator<=(D) const = default; // { dg-error \"defaulted member\" }\n+  bool operator>(D) const = default; // { dg-error \"defaulted member\" }\n+  bool operator>=(D) const = default; // { dg-error \"defaulted member\" }\n+};\n+\n+template <class T>\n+struct E\n+{\n+  T i;\n+  friend auto operator<=>(const E&, E) = default; // { dg-error \"not both\" }\n+  friend bool operator==(const E&, E) = default; // { dg-error \"not both\" }\n+  friend bool operator!=(const E&, E) = default; // { dg-error \"not both\" }\n+  friend bool operator<(E, const E&) = default; // { dg-error \"not both\" }\n+  friend bool operator<=(E, const E&) = default; // { dg-error \"not both\" }\n+  friend bool operator>(E, const E&) = default; // { dg-error \"not both\" }\n+  friend bool operator>=(E, const E&) = default; // { dg-error \"not both\" }\n+};"}, {"sha": "033578122ae006b94f5a74548fb89106eee29178", "filename": "gcc/testsuite/g++.dg/cpp2a/spaceship-synth4.C", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9cd5c56fd01ea931308dfb6232a01cd5478bd3d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-synth4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9cd5c56fd01ea931308dfb6232a01cd5478bd3d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-synth4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-synth4.C?ref=c9cd5c56fd01ea931308dfb6232a01cd5478bd3d", "patch": "@@ -0,0 +1,43 @@\n+// Test with all operators explicitly defaulted.\n+// { dg-do run { target c++2a } }\n+\n+#include <compare>\n+\n+struct D\n+{\n+  int i;\n+  friend auto operator<=>(const D& x, const D& y) = default;\n+  friend bool operator==(const D& x, const D& y) = default;\n+  friend bool operator!=(const D& x, const D& y) = default;\n+  friend bool operator<(const D& x, const D& y) = default;\n+  friend bool operator<=(const D& x, const D& y) = default;\n+  friend bool operator>(const D& x, const D& y) = default;\n+  friend bool operator>=(const D& x, const D& y) = default;\n+};\n+\n+#define assert(X) do { if (!(X)) __builtin_abort(); } while (0)\n+\n+int main()\n+{\n+  D d{42};\n+  D d2{24};\n+\n+  assert (is_eq (d <=> d));\n+  assert (is_lteq (d <=> d));\n+  assert (is_gteq (d <=> d));\n+  assert (is_lt (d2 <=> d));\n+  assert (is_lteq (d2 <=> d));\n+  assert (is_gt (d <=> d2));\n+  assert (is_gteq (d <=> d2));\n+\n+  assert (d == d);\n+  assert (!(d2 == d));\n+  assert (!(d == d2));\n+  assert (d != d2);\n+  assert (!(d2 != d2));\n+\n+  assert (d2 < d);\n+  assert (d2 <= d);\n+  assert (d > d2);\n+  assert (d >= d2);\n+}"}, {"sha": "8e4aa864b27de1271d9ce261b3aa109157d44258", "filename": "gcc/testsuite/g++.dg/cpp2a/spaceship-synth5.C", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9cd5c56fd01ea931308dfb6232a01cd5478bd3d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-synth5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9cd5c56fd01ea931308dfb6232a01cd5478bd3d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-synth5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-synth5.C?ref=c9cd5c56fd01ea931308dfb6232a01cd5478bd3d", "patch": "@@ -0,0 +1,43 @@\n+// Test with all operators explicitly defaulted.\n+// { dg-do run { target c++2a } }\n+\n+#include <compare>\n+\n+struct D\n+{\n+  int i;\n+  friend auto operator<=>(D x, D y) = default;\n+  friend bool operator==(D x, D y) = default;\n+  friend bool operator!=(D x, D y) = default;\n+  friend bool operator<(D x, D y) = default;\n+  friend bool operator<=(D x, D y) = default;\n+  friend bool operator>(D x, D y) = default;\n+  friend bool operator>=(const D x, const D y) = default;\n+};\n+\n+#define assert(X) do { if (!(X)) __builtin_abort(); } while (0)\n+\n+int main()\n+{\n+  D d{42};\n+  D d2{24};\n+\n+  assert (is_eq (d <=> d));\n+  assert (is_lteq (d <=> d));\n+  assert (is_gteq (d <=> d));\n+  assert (is_lt (d2 <=> d));\n+  assert (is_lteq (d2 <=> d));\n+  assert (is_gt (d <=> d2));\n+  assert (is_gteq (d <=> d2));\n+\n+  assert (d == d);\n+  assert (!(d2 == d));\n+  assert (!(d == d2));\n+  assert (d != d2);\n+  assert (!(d2 != d2));\n+\n+  assert (d2 < d);\n+  assert (d2 <= d);\n+  assert (d > d2);\n+  assert (d >= d2);\n+}"}]}