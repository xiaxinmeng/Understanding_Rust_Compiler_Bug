{"sha": "af6a6eec326cb37d60ed94ba19479f13685601c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWY2YTZlZWMzMjZjYjM3ZDYwZWQ5NGJhMTk0NzlmMTM2ODU2MDFjMQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2015-06-01T12:46:55Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2015-06-01T12:46:55Z"}, "message": "Change use to type-based pool allocator in\n\n\t* tree-ssa-sccvn.c (vn_reference_insert): Use new type-based pool allocator.\n\t(vn_reference_insert_pieces): Likewise.\n\t(vn_phi_insert): Likewise.\n\t(visit_reference_op_call): Likewise.\n\t(copy_phi): Likewise.\n\t(copy_reference): Likewise.\n\t(process_scc): Likewise.\n\t(allocate_vn_table): Likewise.\n\t(free_vn_table): Likewise.\n\nFrom-SVN: r223965", "tree": {"sha": "5d7056f8722ed877dc400c0a0770d79ed5ce002b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d7056f8722ed877dc400c0a0770d79ed5ce002b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af6a6eec326cb37d60ed94ba19479f13685601c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af6a6eec326cb37d60ed94ba19479f13685601c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af6a6eec326cb37d60ed94ba19479f13685601c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af6a6eec326cb37d60ed94ba19479f13685601c1/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "153e42282e7b27189cea89d4be6f2b251bdbae08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/153e42282e7b27189cea89d4be6f2b251bdbae08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/153e42282e7b27189cea89d4be6f2b251bdbae08"}], "stats": {"total": 45, "additions": 27, "deletions": 18}, "files": [{"sha": "9bf5555dad5d9d8fd83fef07cf4fa414b0cda072", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af6a6eec326cb37d60ed94ba19479f13685601c1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af6a6eec326cb37d60ed94ba19479f13685601c1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=af6a6eec326cb37d60ed94ba19479f13685601c1", "patch": "@@ -1,3 +1,15 @@\n+2015-06-01  Martin Liska  <mliska@suse.cz>\n+\n+\t* tree-ssa-sccvn.c (vn_reference_insert): Use new type-based pool allocator.\n+\t(vn_reference_insert_pieces): Likewise.\n+\t(vn_phi_insert): Likewise.\n+\t(visit_reference_op_call): Likewise.\n+\t(copy_phi): Likewise.\n+\t(copy_reference): Likewise.\n+\t(process_scc): Likewise.\n+\t(allocate_vn_table): Likewise.\n+\t(free_vn_table): Likewise.\n+\n 2015-06-01  Martin Liska  <mliska@suse.cz>\n \n \t* tree-ssa-reassoc.c (add_to_ops_vec): Use new type-based pool allocator."}, {"sha": "19fb604b5116dffde5678a51b31277eec2b90f8e", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af6a6eec326cb37d60ed94ba19479f13685601c1/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af6a6eec326cb37d60ed94ba19479f13685601c1/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=af6a6eec326cb37d60ed94ba19479f13685601c1", "patch": "@@ -289,8 +289,8 @@ typedef struct vn_tables_s\n   vn_phi_table_type *phis;\n   vn_reference_table_type *references;\n   struct obstack nary_obstack;\n-  alloc_pool phis_pool;\n-  alloc_pool references_pool;\n+  pool_allocator<vn_phi_s> *phis_pool;\n+  pool_allocator<vn_reference_s> *references_pool;\n } *vn_tables_t;\n \n \n@@ -2301,7 +2301,7 @@ vn_reference_insert (tree op, tree result, tree vuse, tree vdef)\n   vn_reference_t vr1;\n   bool tem;\n \n-  vr1 = (vn_reference_t) pool_alloc (current_info->references_pool);\n+  vr1 = current_info->references_pool->allocate ();\n   if (TREE_CODE (result) == SSA_NAME)\n     vr1->value_id = VN_INFO (result)->value_id;\n   else\n@@ -2346,7 +2346,7 @@ vn_reference_insert_pieces (tree vuse, alias_set_type set, tree type,\n   vn_reference_s **slot;\n   vn_reference_t vr1;\n \n-  vr1 = (vn_reference_t) pool_alloc (current_info->references_pool);\n+  vr1 = current_info->references_pool->allocate ();\n   vr1->value_id = value_id;\n   vr1->vuse = vuse ? SSA_VAL (vuse) : NULL_TREE;\n   vr1->operands = valueize_refs (operands);\n@@ -2772,7 +2772,7 @@ static vn_phi_t\n vn_phi_insert (gimple phi, tree result)\n {\n   vn_phi_s **slot;\n-  vn_phi_t vp1 = (vn_phi_t) pool_alloc (current_info->phis_pool);\n+  vn_phi_t vp1 = current_info->phis_pool->allocate ();\n   unsigned i;\n   vec<tree> args = vNULL;\n \n@@ -3015,7 +3015,7 @@ visit_reference_op_call (tree lhs, gcall *stmt)\n \tchanged |= set_ssa_val_to (vdef, vdef);\n       if (lhs)\n \tchanged |= set_ssa_val_to (lhs, lhs);\n-      vr2 = (vn_reference_t) pool_alloc (current_info->references_pool);\n+      vr2 = current_info->references_pool->allocate ();\n       vr2->vuse = vr1.vuse;\n       /* As we are not walking the virtual operand chain we know the\n \t shared_lookup_references are still original so we can re-use\n@@ -3889,7 +3889,7 @@ copy_nary (vn_nary_op_t onary, vn_tables_t info)\n static void\n copy_phi (vn_phi_t ophi, vn_tables_t info)\n {\n-  vn_phi_t phi = (vn_phi_t) pool_alloc (info->phis_pool);\n+  vn_phi_t phi = info->phis_pool->allocate ();\n   vn_phi_s **slot;\n   memcpy (phi, ophi, sizeof (*phi));\n   ophi->phiargs.create (0);\n@@ -3905,7 +3905,7 @@ copy_reference (vn_reference_t oref, vn_tables_t info)\n {\n   vn_reference_t ref;\n   vn_reference_s **slot;\n-  ref = (vn_reference_t) pool_alloc (info->references_pool);\n+  ref = info->references_pool->allocate ();\n   memcpy (ref, oref, sizeof (*ref));\n   oref->operands.create (0);\n   slot = info->references->find_slot_with_hash (ref, ref->hashcode, INSERT);\n@@ -3970,8 +3970,8 @@ process_scc (vec<tree> scc)\n       optimistic_info->references->empty ();\n       obstack_free (&optimistic_info->nary_obstack, NULL);\n       gcc_obstack_init (&optimistic_info->nary_obstack);\n-      empty_alloc_pool (optimistic_info->phis_pool);\n-      empty_alloc_pool (optimistic_info->references_pool);\n+      optimistic_info->phis_pool->release ();\n+      optimistic_info->references_pool->release ();\n       FOR_EACH_VEC_ELT (scc, i, var)\n \tVN_INFO (var)->expr = NULL_TREE;\n       FOR_EACH_VEC_ELT (scc, i, var)\n@@ -4148,12 +4148,9 @@ allocate_vn_table (vn_tables_t table)\n   table->references = new vn_reference_table_type (23);\n \n   gcc_obstack_init (&table->nary_obstack);\n-  table->phis_pool = create_alloc_pool (\"VN phis\",\n-\t\t\t\t\tsizeof (struct vn_phi_s),\n-\t\t\t\t\t30);\n-  table->references_pool = create_alloc_pool (\"VN references\",\n-\t\t\t\t\t      sizeof (struct vn_reference_s),\n-\t\t\t\t\t      30);\n+  table->phis_pool = new pool_allocator<vn_phi_s> (\"VN phis\", 30);\n+  table->references_pool = new pool_allocator<vn_reference_s> (\"VN references\",\n+\t\t\t\t\t\t\t       30);\n }\n \n /* Free a value number table.  */\n@@ -4168,8 +4165,8 @@ free_vn_table (vn_tables_t table)\n   delete table->references;\n   table->references = NULL;\n   obstack_free (&table->nary_obstack, NULL);\n-  free_alloc_pool (table->phis_pool);\n-  free_alloc_pool (table->references_pool);\n+  delete table->phis_pool;\n+  delete table->references_pool;\n }\n \n static void"}]}