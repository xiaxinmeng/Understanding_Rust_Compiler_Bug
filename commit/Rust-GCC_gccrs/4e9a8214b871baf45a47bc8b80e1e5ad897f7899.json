{"sha": "4e9a8214b871baf45a47bc8b80e1e5ad897f7899", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGU5YTgyMTRiODcxYmFmNDVhNDdiYzhiODBlMWU1YWQ4OTdmNzg5OQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2015-09-17T15:51:40Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2015-09-17T15:51:40Z"}, "message": "* gcc-interface/trans.c (emit_check): Do not touch TREE_SIDE_EFFECTS.\n\nFrom-SVN: r227879", "tree": {"sha": "c1ab690e1ad1fde458f6073d05297f18fcd41fb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c1ab690e1ad1fde458f6073d05297f18fcd41fb7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e9a8214b871baf45a47bc8b80e1e5ad897f7899", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e9a8214b871baf45a47bc8b80e1e5ad897f7899", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e9a8214b871baf45a47bc8b80e1e5ad897f7899", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e9a8214b871baf45a47bc8b80e1e5ad897f7899/comments", "author": null, "committer": null, "parents": [{"sha": "310055e7b481eb86318dc75dcf67f4091e395757", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/310055e7b481eb86318dc75dcf67f4091e395757", "html_url": "https://github.com/Rust-GCC/gccrs/commit/310055e7b481eb86318dc75dcf67f4091e395757"}], "stats": {"total": 64, "additions": 47, "deletions": 17}, "files": [{"sha": "ad9cf14060c93cbb24f5d5297db42e77b0475d5e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e9a8214b871baf45a47bc8b80e1e5ad897f7899/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e9a8214b871baf45a47bc8b80e1e5ad897f7899/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4e9a8214b871baf45a47bc8b80e1e5ad897f7899", "patch": "@@ -1,3 +1,7 @@\n+2015-09-17  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (emit_check): Do not touch TREE_SIDE_EFFECTS.\n+\n 2015-09-14  Pierre-Marie de Rodat  <derodat@adacore.com>\n \n \t* gcc-interface/misc.c (gnat_post_options): Issue a warning if"}, {"sha": "96f0c55d48fdc523649db257d41544f6bdca3245", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e9a8214b871baf45a47bc8b80e1e5ad897f7899/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e9a8214b871baf45a47bc8b80e1e5ad897f7899/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=4e9a8214b871baf45a47bc8b80e1e5ad897f7899", "patch": "@@ -8798,29 +8798,32 @@ emit_index_check (tree gnu_array_object, tree gnu_expr, tree gnu_low,\n      gnu_expr, CE_Index_Check_Failed, gnat_node);\n }\n \f\n-/* GNU_COND contains the condition corresponding to an access, discriminant or\n-   range check of value GNU_EXPR.  Build a COND_EXPR that returns GNU_EXPR if\n-   GNU_COND is false and raises a CONSTRAINT_ERROR if GNU_COND is true.\n-   REASON is the code that says why the exception was raised.  GNAT_NODE is\n-   the GNAT node conveying the source location for which the error should be\n-   signaled.  */\n+/* GNU_COND contains the condition corresponding to an index, overflow or\n+   range check of value GNU_EXPR.  Build a COND_EXPR that returns GNU_EXPR\n+   if GNU_COND is false and raises a CONSTRAINT_ERROR if GNU_COND is true.\n+   REASON is the code that says why the exception is raised.  GNAT_NODE is\n+   the node conveying the source location for which the error should be\n+   signaled.\n+\n+   We used to propagate TREE_SIDE_EFFECTS from GNU_EXPR to the COND_EXPR,\n+   overwriting the setting inherited from the call statement, on the ground\n+   that the expression need not be evaluated just for the check.  However\n+   that's incorrect because, in the GCC type system, its value is presumed\n+   to be valid so its comparison against the type bounds always yields true\n+   and, therefore, could be done without evaluating it; given that it can\n+   be a computation that overflows the bounds, the language may require the\n+   check to fail and thus the expression to be evaluated in this case.  */\n \n static tree\n emit_check (tree gnu_cond, tree gnu_expr, int reason, Node_Id gnat_node)\n {\n   tree gnu_call\n     = build_call_raise (reason, gnat_node, N_Raise_Constraint_Error);\n-  tree gnu_result\n-    = fold_build3 (COND_EXPR, TREE_TYPE (gnu_expr), gnu_cond,\n-\t\t   build2 (COMPOUND_EXPR, TREE_TYPE (gnu_expr), gnu_call,\n-\t\t\t   convert (TREE_TYPE (gnu_expr), integer_zero_node)),\n-\t\t   gnu_expr);\n-\n-  /* GNU_RESULT has side effects if and only if GNU_EXPR has:\n-     we don't need to evaluate it just for the check.  */\n-  TREE_SIDE_EFFECTS (gnu_result) = TREE_SIDE_EFFECTS (gnu_expr);\n-\n-  return gnu_result;\n+  return\n+    fold_build3 (COND_EXPR, TREE_TYPE (gnu_expr), gnu_cond,\n+\t\t build2 (COMPOUND_EXPR, TREE_TYPE (gnu_expr), gnu_call,\n+\t\t\t convert (TREE_TYPE (gnu_expr), integer_zero_node)),\n+\t\t gnu_expr);\n }\n \f\n /* Return an expression that converts GNU_EXPR to GNAT_TYPE, doing overflow"}, {"sha": "0a3c7104539858cfce490f867aaa94930561a15b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e9a8214b871baf45a47bc8b80e1e5ad897f7899/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e9a8214b871baf45a47bc8b80e1e5ad897f7899/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4e9a8214b871baf45a47bc8b80e1e5ad897f7899", "patch": "@@ -1,3 +1,7 @@\n+2015-09-17  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/overflow_sum3.adb: New test.\n+\n 2015-09-17  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc.target/arm/stack-checking.c: New test."}, {"sha": "d10784310ae43e31e9e6a3a8893f9e13945a5cbb", "filename": "gcc/testsuite/gnat.dg/overflow_sum3.adb", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e9a8214b871baf45a47bc8b80e1e5ad897f7899/gcc%2Ftestsuite%2Fgnat.dg%2Foverflow_sum3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e9a8214b871baf45a47bc8b80e1e5ad897f7899/gcc%2Ftestsuite%2Fgnat.dg%2Foverflow_sum3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Foverflow_sum3.adb?ref=4e9a8214b871baf45a47bc8b80e1e5ad897f7899", "patch": "@@ -0,0 +1,19 @@\n+--  { dg-do run }\n+--  { dg-options \"-gnato\" }\n+\n+procedure Overflow_Sum3 is\n+\n+   function Ident (I : Integer) return Integer is\n+   begin\n+      return I;\n+   end;\n+\n+   X : Short_Short_Integer := Short_Short_Integer (Ident (127));\n+\n+begin\n+   if X+1 <= 127 then\n+      raise Program_Error;\n+   end if;\n+exception\n+   when Constraint_Error => null;\n+end;"}]}