{"sha": "bbf19f9c20515da9fcd23f08c8139427374e8d77", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmJmMTlmOWMyMDUxNWRhOWZjZDIzZjA4YzgxMzk0MjczNzRlOGQ3Nw==", "commit": {"author": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2021-08-15T18:13:11Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2021-08-15T18:13:11Z"}, "message": "Fortran: fix checks for STAT= and ERRMSG= arguments of SYNC ALL/SYNC IMAGES\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/99351\n\t* match.c (sync_statement): Replace %v code by %e in gfc_match to\n\tallow for function references as STAT and ERRMSG arguments.\n\t* resolve.c (resolve_sync): Adjust checks of STAT= and ERRMSG= to\n\tbeing definable arguments.  Function references with a data\n\tpointer result are accepted.\n\t* trans-stmt.c (gfc_trans_sync): Adjust assertion.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/99351\n\t* gfortran.dg/coarray_sync.f90: New test.\n\t* gfortran.dg/coarray_3.f90: Adjust error messages.", "tree": {"sha": "bef0ccd8bb64afb5e6d7d781edd6829dcf9f7df3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bef0ccd8bb64afb5e6d7d781edd6829dcf9f7df3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bbf19f9c20515da9fcd23f08c8139427374e8d77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbf19f9c20515da9fcd23f08c8139427374e8d77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbf19f9c20515da9fcd23f08c8139427374e8d77", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbf19f9c20515da9fcd23f08c8139427374e8d77/comments", "author": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34ce7f7a9a64dd69dd6a77dfd4a77406c3c71014", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34ce7f7a9a64dd69dd6a77dfd4a77406c3c71014", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34ce7f7a9a64dd69dd6a77dfd4a77406c3c71014"}], "stats": {"total": 86, "additions": 70, "deletions": 16}, "files": [{"sha": "16502da001d318804bff00fea5237c5d2719f118", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbf19f9c20515da9fcd23f08c8139427374e8d77/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbf19f9c20515da9fcd23f08c8139427374e8d77/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=bbf19f9c20515da9fcd23f08c8139427374e8d77", "patch": "@@ -3855,7 +3855,7 @@ sync_statement (gfc_statement st)\n \n   for (;;)\n     {\n-      m = gfc_match (\" stat = %v\", &tmp);\n+      m = gfc_match (\" stat = %e\", &tmp);\n       if (m == MATCH_ERROR)\n \tgoto syntax;\n       if (m == MATCH_YES)\n@@ -3875,7 +3875,7 @@ sync_statement (gfc_statement st)\n \t  break;\n \t}\n \n-      m = gfc_match (\" errmsg = %v\", &tmp);\n+      m = gfc_match (\" errmsg = %e\", &tmp);\n       if (m == MATCH_ERROR)\n \tgoto syntax;\n       if (m == MATCH_YES)"}, {"sha": "959f0bed4fbe4ac9b34b6cc006e4b8e0ed858dff", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbf19f9c20515da9fcd23f08c8139427374e8d77/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbf19f9c20515da9fcd23f08c8139427374e8d77/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=bbf19f9c20515da9fcd23f08c8139427374e8d77", "patch": "@@ -10236,19 +10236,27 @@ resolve_sync (gfc_code *code)\n \n   /* Check STAT.  */\n   gfc_resolve_expr (code->expr2);\n-  if (code->expr2\n-      && (code->expr2->ts.type != BT_INTEGER || code->expr2->rank != 0\n-\t  || code->expr2->expr_type != EXPR_VARIABLE))\n-    gfc_error (\"STAT= argument at %L must be a scalar INTEGER variable\",\n-\t       &code->expr2->where);\n+  if (code->expr2)\n+    {\n+      if (code->expr2->ts.type != BT_INTEGER || code->expr2->rank != 0)\n+\tgfc_error (\"STAT= argument at %L must be a scalar INTEGER variable\",\n+\t\t   &code->expr2->where);\n+      else\n+\tgfc_check_vardef_context (code->expr2, false, false, false,\n+\t\t\t\t  _(\"STAT variable\"));\n+    }\n \n   /* Check ERRMSG.  */\n   gfc_resolve_expr (code->expr3);\n-  if (code->expr3\n-      && (code->expr3->ts.type != BT_CHARACTER || code->expr3->rank != 0\n-\t  || code->expr3->expr_type != EXPR_VARIABLE))\n-    gfc_error (\"ERRMSG= argument at %L must be a scalar CHARACTER variable\",\n-\t       &code->expr3->where);\n+  if (code->expr3)\n+    {\n+      if (code->expr3->ts.type != BT_CHARACTER || code->expr3->rank != 0)\n+\tgfc_error (\"ERRMSG= argument at %L must be a scalar CHARACTER variable\",\n+\t\t   &code->expr3->where);\n+      else\n+\tgfc_check_vardef_context (code->expr3, false, false, false,\n+\t\t\t\t  _(\"ERRMSG variable\"));\n+    }\n }\n \n "}, {"sha": "11df1863badfa7a22846b5992426aa583bdb1a98", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbf19f9c20515da9fcd23f08c8139427374e8d77/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbf19f9c20515da9fcd23f08c8139427374e8d77/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=bbf19f9c20515da9fcd23f08c8139427374e8d77", "patch": "@@ -1226,7 +1226,8 @@ gfc_trans_sync (gfc_code *code, gfc_exec_op type)\n \n   if (code->expr2)\n     {\n-      gcc_assert (code->expr2->expr_type == EXPR_VARIABLE);\n+      gcc_assert (code->expr2->expr_type == EXPR_VARIABLE\n+\t\t  || code->expr2->expr_type == EXPR_FUNCTION);\n       gfc_init_se (&argse, NULL);\n       gfc_conv_expr_val (&argse, code->expr2);\n       stat = argse.expr;\n@@ -1236,7 +1237,8 @@ gfc_trans_sync (gfc_code *code, gfc_exec_op type)\n \n   if (code->expr3 && flag_coarray == GFC_FCOARRAY_LIB)\n     {\n-      gcc_assert (code->expr3->expr_type == EXPR_VARIABLE);\n+      gcc_assert (code->expr3->expr_type == EXPR_VARIABLE\n+\t\t  || code->expr3->expr_type == EXPR_FUNCTION);\n       gfc_init_se (&argse, NULL);\n       argse.want_pointer = 1;\n       gfc_conv_expr (&argse, code->expr3);"}, {"sha": "1c294cd01891663e9fea9bed1234cbfc506cea95", "filename": "gcc/testsuite/gfortran.dg/coarray_3.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbf19f9c20515da9fcd23f08c8139427374e8d77/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbf19f9c20515da9fcd23f08c8139427374e8d77/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_3.f90?ref=bbf19f9c20515da9fcd23f08c8139427374e8d77", "patch": "@@ -11,11 +11,11 @@\n critical fkl ! { dg-error \"Syntax error in CRITICAL\" }\n end critical fkl ! { dg-error \"Expecting END PROGRAM\" }\n \n-sync all (stat=1) ! { dg-error \"Syntax error in SYNC ALL\" }\n+sync all (stat=1) ! { dg-error \"Non-variable expression\" }\n sync all ( stat = n,stat=k) ! { dg-error \"Redundant STAT\" }\n sync memory (errmsg=str) ! { dg-error \"must be a scalar CHARACTER variable\" }\n sync memory (errmsg=n) ! { dg-error \"must be a scalar CHARACTER variable\" }\n-sync images (*, stat=1.0) ! { dg-error \"Syntax error in SYNC IMAGES\" }\n+sync images (*, stat=1.0) ! { dg-error \"must be a scalar INTEGER variable\" }\n sync images (-1) ! { dg-error \"must between 1 and num_images\" }\n sync images (1)\n sync images ( [ 1 ])"}, {"sha": "f3d6be12779a9556f4e735be889ca64948084956", "filename": "gcc/testsuite/gfortran.dg/coarray_sync.f90", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbf19f9c20515da9fcd23f08c8139427374e8d77/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_sync.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbf19f9c20515da9fcd23f08c8139427374e8d77/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_sync.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_sync.f90?ref=bbf19f9c20515da9fcd23f08c8139427374e8d77", "patch": "@@ -0,0 +1,44 @@\n+! { dg-do compile }\n+! { dg-options \"-fcoarray=lib\" }\n+! PR fortran/99351 - ICE in gfc_finish_var_decl, at fortran/trans-decl.c:695\n+\n+module m\n+  character(3), parameter   :: c = 'abc'\n+  integer,      parameter   :: s = 42\n+  integer,      target      :: i\n+  character(:), allocatable :: a\n+  target :: a\n+contains\n+  subroutine s1\n+    allocate (character(42) :: a)\n+    sync all (stat=i)\n+    sync all (stat=f())\n+    sync all (errmsg=a)\n+    sync all (errmsg=p())\n+    sync all (stat=a%len) ! { dg-error \"variable definition context\" }\n+    sync all (stat=s)     ! { dg-error \"variable definition context\" }\n+    sync all (errmsg=c)   ! { dg-error \"variable definition context\" }\n+  end\n+  subroutine s2\n+    sync images (*, stat=i)\n+    sync images (*, errmsg=a)\n+    sync images (*, stat=a%len) ! { dg-error \"variable definition context\" }\n+    sync images (*, stat=s)     ! { dg-error \"variable definition context\" }\n+    sync images (*, errmsg=c)   ! { dg-error \"variable definition context\" }\n+  end\n+  subroutine s3\n+    sync memory (stat=i,errmsg=p())\n+    sync memory (stat=f(),errmsg=a)\n+    sync memory (stat=a%len) ! { dg-error \"variable definition context\" }\n+    sync memory (stat=s)     ! { dg-error \"variable definition context\" }\n+    sync memory (errmsg=c)   ! { dg-error \"variable definition context\" }\n+  end\n+  integer function f()\n+    pointer :: f\n+    f => i\n+  end function f\n+  function p()\n+    character(:), pointer :: p\n+    p => a\n+  end function p\n+end"}]}