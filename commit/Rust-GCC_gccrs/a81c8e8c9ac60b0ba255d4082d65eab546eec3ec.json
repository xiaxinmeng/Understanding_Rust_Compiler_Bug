{"sha": "a81c8e8c9ac60b0ba255d4082d65eab546eec3ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTgxYzhlOGM5YWM2MGIwYmEyNTVkNDA4MmQ2NWVhYjU0NmVlYzNlYw==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2019-03-31T20:37:22Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2019-03-31T20:37:22Z"}, "message": "PR c++/89852 - ICE with C++11 functional cast with { }.\n\n\t* constexpr.c (fold_non_dependent_expr_template): New static function\n\tbroken out of...\n\t(fold_non_dependent_expr): ...here.\n\t(fold_non_dependent_init): New function.\n\t* cp-tree.h (fold_non_dependent_init): Declare.\n\t* typeck2.c (massage_init_elt): Call fold_non_dependent_init instead\n\tof fold_non_dependent_expr.  Don't call maybe_constant_init.\n\n\t* g++.dg/cpp0x/initlist115.C: New test.\n\nFrom-SVN: r270048", "tree": {"sha": "6cfa26135906dbf84e3ec4ff9711a02b7b261a66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6cfa26135906dbf84e3ec4ff9711a02b7b261a66"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a81c8e8c9ac60b0ba255d4082d65eab546eec3ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a81c8e8c9ac60b0ba255d4082d65eab546eec3ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a81c8e8c9ac60b0ba255d4082d65eab546eec3ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a81c8e8c9ac60b0ba255d4082d65eab546eec3ec/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "93755deb5c26a82106aa63280c492f9bda0679c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93755deb5c26a82106aa63280c492f9bda0679c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93755deb5c26a82106aa63280c492f9bda0679c2"}], "stats": {"total": 152, "additions": 114, "deletions": 38}, "files": [{"sha": "8c6e9931db161361e59663ad7a348e9bbfbb8246", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a81c8e8c9ac60b0ba255d4082d65eab546eec3ec/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a81c8e8c9ac60b0ba255d4082d65eab546eec3ec/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a81c8e8c9ac60b0ba255d4082d65eab546eec3ec", "patch": "@@ -1,3 +1,14 @@\n+2019-03-31  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/89852 - ICE with C++11 functional cast with { }.\n+\t* constexpr.c (fold_non_dependent_expr_template): New static function\n+\tbroken out of...\n+\t(fold_non_dependent_expr): ...here.\n+\t(fold_non_dependent_init): New function.\n+\t* cp-tree.h (fold_non_dependent_init): Declare.\n+\t* typeck2.c (massage_init_elt): Call fold_non_dependent_init instead\n+\tof fold_non_dependent_expr.  Don't call maybe_constant_init.\n+\n 2019-03-30  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/89744 - ICE with specialization of member class template."}, {"sha": "53854a8acd4a08ef5310a334584159c9f70b46bb", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 76, "deletions": 36, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a81c8e8c9ac60b0ba255d4082d65eab546eec3ec/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a81c8e8c9ac60b0ba255d4082d65eab546eec3ec/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=a81c8e8c9ac60b0ba255d4082d65eab546eec3ec", "patch": "@@ -5581,6 +5581,58 @@ clear_cv_and_fold_caches (void)\n   clear_fold_cache ();\n }\n \n+/* Internal function handling expressions in templates for\n+   fold_non_dependent_expr and fold_non_dependent_init.\n+\n+   If we're in a template, but T isn't value dependent, simplify\n+   it.  We're supposed to treat:\n+\n+     template <typename T> void f(T[1 + 1]);\n+     template <typename T> void f(T[2]);\n+\n+   as two declarations of the same function, for example.  */\n+\n+static tree\n+fold_non_dependent_expr_template (tree t, tsubst_flags_t complain,\n+\t\t\t\t  bool manifestly_const_eval)\n+{\n+  gcc_assert (processing_template_decl);\n+\n+  if (is_nondependent_constant_expression (t))\n+    {\n+      processing_template_decl_sentinel s;\n+      t = instantiate_non_dependent_expr_internal (t, complain);\n+\n+      if (type_unknown_p (t) || BRACE_ENCLOSED_INITIALIZER_P (t))\n+\t{\n+\t  if (TREE_OVERFLOW_P (t))\n+\t    {\n+\t      t = build_nop (TREE_TYPE (t), t);\n+\t      TREE_CONSTANT (t) = false;\n+\t    }\n+\t  return t;\n+\t}\n+\n+      tree r = cxx_eval_outermost_constant_expr (t, true, true,\n+\t\t\t\t\t\t manifestly_const_eval,\n+\t\t\t\t\t\t NULL_TREE);\n+      /* cp_tree_equal looks through NOPs, so allow them.  */\n+      gcc_checking_assert (r == t\n+\t\t\t   || CONVERT_EXPR_P (t)\n+\t\t\t   || TREE_CODE (t) == VIEW_CONVERT_EXPR\n+\t\t\t   || (TREE_CONSTANT (t) && !TREE_CONSTANT (r))\n+\t\t\t   || !cp_tree_equal (r, t));\n+      return r;\n+    }\n+  else if (TREE_OVERFLOW_P (t))\n+    {\n+      t = build_nop (TREE_TYPE (t), t);\n+      TREE_CONSTANT (t) = false;\n+    }\n+\n+  return t;\n+}\n+\n /* Like maybe_constant_value but first fully instantiate the argument.\n \n    Note: this is equivalent to instantiate_non_dependent_expr_sfinae\n@@ -5604,51 +5656,39 @@ fold_non_dependent_expr (tree t,\n   if (t == NULL_TREE)\n     return NULL_TREE;\n \n-  /* If we're in a template, but T isn't value dependent, simplify\n-     it.  We're supposed to treat:\n+  if (processing_template_decl)\n+    return fold_non_dependent_expr_template (t, complain,\n+\t\t\t\t\t     manifestly_const_eval);\n \n-       template <typename T> void f(T[1 + 1]);\n-       template <typename T> void f(T[2]);\n+  return maybe_constant_value (t, NULL_TREE, manifestly_const_eval);\n+}\n \n-     as two declarations of the same function, for example.  */\n-  if (processing_template_decl)\n-    {\n-      if (is_nondependent_constant_expression (t))\n-\t{\n-\t  processing_template_decl_sentinel s;\n-\t  t = instantiate_non_dependent_expr_internal (t, complain);\n \n-\t  if (type_unknown_p (t)\n-\t      || BRACE_ENCLOSED_INITIALIZER_P (t))\n-\t    {\n-\t      if (TREE_OVERFLOW_P (t))\n-\t\t{\n-\t\t  t = build_nop (TREE_TYPE (t), t);\n-\t\t  TREE_CONSTANT (t) = false;\n-\t\t}\n-\t      return t;\n-\t    }\n+/* Like maybe_constant_init but first fully instantiate the argument.  */\n \n-\t  tree r = cxx_eval_outermost_constant_expr (t, true, true,\n-\t\t\t\t\t\t     manifestly_const_eval,\n-\t\t\t\t\t\t     NULL_TREE);\n-\t  /* cp_tree_equal looks through NOPs, so allow them.  */\n-\t  gcc_checking_assert (r == t\n-\t\t\t       || CONVERT_EXPR_P (t)\n-\t\t\t       || TREE_CODE (t) == VIEW_CONVERT_EXPR\n-\t\t\t       || (TREE_CONSTANT (t) && !TREE_CONSTANT (r))\n-\t\t\t       || !cp_tree_equal (r, t));\n-\t  return r;\n-\t}\n-      else if (TREE_OVERFLOW_P (t))\n+tree\n+fold_non_dependent_init (tree t,\n+\t\t\t tsubst_flags_t complain /*=tf_warning_or_error*/,\n+\t\t\t bool manifestly_const_eval /*=false*/)\n+{\n+  if (t == NULL_TREE)\n+    return NULL_TREE;\n+\n+  if (processing_template_decl)\n+    {\n+      t = fold_non_dependent_expr_template (t, complain,\n+\t\t\t\t\t    manifestly_const_eval);\n+      /* maybe_constant_init does this stripping, so do it here too.  */\n+      if (TREE_CODE (t) == TARGET_EXPR)\n \t{\n-\t  t = build_nop (TREE_TYPE (t), t);\n-\t  TREE_CONSTANT (t) = false;\n+\t  tree init = TARGET_EXPR_INITIAL (t);\n+\t  if (TREE_CODE (init) == CONSTRUCTOR)\n+\t    t = init;\n \t}\n       return t;\n     }\n \n-  return maybe_constant_value (t, NULL_TREE, manifestly_const_eval);\n+  return maybe_constant_init (t, NULL_TREE, manifestly_const_eval);\n }\n \n /* Like maybe_constant_value, but returns a CONSTRUCTOR directly, rather"}, {"sha": "b87b968fa4e555ff2a0ed73b189df148cc9cde20", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a81c8e8c9ac60b0ba255d4082d65eab546eec3ec/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a81c8e8c9ac60b0ba255d4082d65eab546eec3ec/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=a81c8e8c9ac60b0ba255d4082d65eab546eec3ec", "patch": "@@ -7716,6 +7716,9 @@ extern tree maybe_constant_init\t\t\t(tree, tree = NULL_TREE, bool = false);\n extern tree fold_non_dependent_expr\t\t(tree,\n \t\t\t\t\t\t tsubst_flags_t = tf_warning_or_error,\n \t\t\t\t\t\t bool = false);\n+extern tree fold_non_dependent_init\t\t(tree,\n+\t\t\t\t\t\t tsubst_flags_t = tf_warning_or_error,\n+\t\t\t\t\t\t bool = false);\n extern tree fold_simple\t\t\t\t(tree);\n extern bool is_sub_constant_expr                (tree);\n extern bool reduced_constant_expression_p       (tree);"}, {"sha": "fa98b1cb8b5595a4fd34a438197493996d9eb917", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a81c8e8c9ac60b0ba255d4082d65eab546eec3ec/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a81c8e8c9ac60b0ba255d4082d65eab546eec3ec/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=a81c8e8c9ac60b0ba255d4082d65eab546eec3ec", "patch": "@@ -1346,8 +1346,7 @@ massage_init_elt (tree type, tree init, int nested, int flags,\n     init = TARGET_EXPR_INITIAL (init);\n   /* When we defer constant folding within a statement, we may want to\n      defer this folding as well.  */\n-  tree t = fold_non_dependent_expr (init, complain);\n-  t = maybe_constant_init (t);\n+  tree t = fold_non_dependent_init (init, complain);\n   if (TREE_CONSTANT (t))\n     init = t;\n   return init;"}, {"sha": "deb903bdc69eb202a64d8584607bc36f6f4a6d7d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a81c8e8c9ac60b0ba255d4082d65eab546eec3ec/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a81c8e8c9ac60b0ba255d4082d65eab546eec3ec/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a81c8e8c9ac60b0ba255d4082d65eab546eec3ec", "patch": "@@ -1,3 +1,8 @@\n+2019-03-31  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/89852 - ICE with C++11 functional cast with { }.\n+\t* g++.dg/cpp0x/initlist115.C: New test.\n+\n 2019-03-31  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/83515"}, {"sha": "ee4b6d4a870de4cad9bef7133e15e7c54d21b81e", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist115.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a81c8e8c9ac60b0ba255d4082d65eab546eec3ec/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist115.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a81c8e8c9ac60b0ba255d4082d65eab546eec3ec/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist115.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist115.C?ref=a81c8e8c9ac60b0ba255d4082d65eab546eec3ec", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/89852\n+// { dg-do compile { target c++11 } }\n+\n+struct A {\n+  int b;\n+};\n+\n+struct B {\n+  A g;\n+};\n+\n+const auto j = A{};\n+\n+template <typename>\n+void k()\n+{\n+  B{j};\n+}"}]}