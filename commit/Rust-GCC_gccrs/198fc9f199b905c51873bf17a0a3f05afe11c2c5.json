{"sha": "198fc9f199b905c51873bf17a0a3f05afe11c2c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTk4ZmM5ZjE5OWI5MDVjNTE4NzNiZjE3YTBhM2YwNWFmZTExYzJjNQ==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2012-05-07T13:47:11Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2012-05-07T13:47:11Z"}, "message": "tree-cfg.c (verify_gimple_switch): Tighten checks.\n\n\t* tree-cfg.c (verify_gimple_switch): Tighten checks.\n\nFrom-SVN: r187242", "tree": {"sha": "a5ea1811c388a475bd3ceecb61e1e0e756176bcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5ea1811c388a475bd3ceecb61e1e0e756176bcc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/198fc9f199b905c51873bf17a0a3f05afe11c2c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/198fc9f199b905c51873bf17a0a3f05afe11c2c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/198fc9f199b905c51873bf17a0a3f05afe11c2c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/198fc9f199b905c51873bf17a0a3f05afe11c2c5/comments", "author": null, "committer": null, "parents": [{"sha": "7a04f01cb7752b4c9fab847cbb6775e4b020f6d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a04f01cb7752b4c9fab847cbb6775e4b020f6d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a04f01cb7752b4c9fab847cbb6775e4b020f6d9"}], "stats": {"total": 77, "additions": 77, "deletions": 0}, "files": [{"sha": "47ede162d5c57df8b311ca119a3f25c745c5cfdb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/198fc9f199b905c51873bf17a0a3f05afe11c2c5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/198fc9f199b905c51873bf17a0a3f05afe11c2c5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=198fc9f199b905c51873bf17a0a3f05afe11c2c5", "patch": "@@ -1,3 +1,7 @@\n+2012-05-07  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* tree-cfg.c (verify_gimple_switch): Tighten checks.\n+\n 2012-05-07  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/53239"}, {"sha": "f8e1fb5d3253293a6e1ba2f1995cca2a392a8139", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/198fc9f199b905c51873bf17a0a3f05afe11c2c5/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/198fc9f199b905c51873bf17a0a3f05afe11c2c5/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=198fc9f199b905c51873bf17a0a3f05afe11c2c5", "patch": "@@ -4122,13 +4122,86 @@ verify_gimple_goto (gimple stmt)\n static bool\n verify_gimple_switch (gimple stmt)\n {\n+  unsigned int i, n;\n+  tree elt, prev_upper_bound = NULL_TREE;\n+  tree index_type, elt_type = NULL_TREE;\n+\n   if (!is_gimple_val (gimple_switch_index (stmt)))\n     {\n       error (\"invalid operand to switch statement\");\n       debug_generic_stmt (gimple_switch_index (stmt));\n       return true;\n     }\n \n+  index_type = TREE_TYPE (gimple_switch_index (stmt));\n+  if (! INTEGRAL_TYPE_P (index_type))\n+    {\n+      error (\"non-integral type switch statement\");\n+      debug_generic_expr (index_type);\n+      return true;\n+    }\n+\n+  elt = gimple_switch_default_label (stmt);\n+  if (CASE_LOW (elt) != NULL_TREE || CASE_HIGH (elt) != NULL_TREE)\n+    {\n+      error (\"invalid default case label in switch statement\");\n+      debug_generic_expr (elt);\n+      return true;\n+    }\n+\n+  n = gimple_switch_num_labels (stmt);\n+  for (i = 1; i < n; i++)\n+    {\n+      elt = gimple_switch_label (stmt, i);\n+\n+      if (! CASE_LOW (elt))\n+\t{\n+\t  error (\"invalid case label in switch statement\");\n+\t  debug_generic_expr (elt);\n+\t  return true;\n+\t}\n+      if (CASE_HIGH (elt)\n+\t  && ! tree_int_cst_lt (CASE_LOW (elt), CASE_HIGH (elt)))\n+\t{\n+\t  error (\"invalid case range in switch statement\");\n+\t  debug_generic_expr (elt);\n+\t  return true;\n+\t}\n+\n+      if (elt_type)\n+\t{\n+\t  if (TREE_TYPE (CASE_LOW (elt)) != elt_type\n+\t      || (CASE_HIGH (elt) && TREE_TYPE (CASE_HIGH (elt)) != elt_type))\n+\t    {\n+\t      error (\"type mismatch for case label in switch statement\");\n+\t      debug_generic_expr (elt);\n+\t      return true;\n+\t    }\n+\t}\n+      else\n+\t{\n+\t  elt_type = TREE_TYPE (CASE_LOW (elt));\n+\t  if (TYPE_PRECISION (index_type) < TYPE_PRECISION (elt_type))\n+\t    {\n+\t      error (\"type precision mismatch in switch statement\");\n+\t      return true;\n+\t    }\n+\t}\n+\n+      if (prev_upper_bound)\n+\t{\n+\t  if (! tree_int_cst_lt (prev_upper_bound, CASE_LOW (elt)))\n+\t    {\n+\t      error (\"case labels not sorted in switch statement\");\n+\t      return true;\n+\t    }\n+\t}\n+\n+      prev_upper_bound = CASE_HIGH (elt);\n+      if (! prev_upper_bound)\n+\tprev_upper_bound = CASE_LOW (elt);\n+    }\n+\n   return false;\n }\n "}]}