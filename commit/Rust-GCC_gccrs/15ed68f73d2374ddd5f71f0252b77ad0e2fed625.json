{"sha": "15ed68f73d2374ddd5f71f0252b77ad0e2fed625", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTVlZDY4ZjczZDIzNzRkZGQ1ZjcxZjAyNTJiNzdhZDBlMmZlZDYyNQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2006-01-18T06:22:04Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2006-01-18T06:22:04Z"}, "message": "rtlanal.c (global_reg_mentioned_p_1, [...]): Remove.\n\n\t* rtlanal.c (global_reg_mentioned_p_1,\n\tglobal_reg_mentioned_p): Remove.\n\t* rtl.h: Remove the prototype for global_reg_mentioned_p.\n\nFrom-SVN: r109871", "tree": {"sha": "dc3af62149dc2475f79163af45e3855d6a8c3641", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc3af62149dc2475f79163af45e3855d6a8c3641"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15ed68f73d2374ddd5f71f0252b77ad0e2fed625", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15ed68f73d2374ddd5f71f0252b77ad0e2fed625", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15ed68f73d2374ddd5f71f0252b77ad0e2fed625", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15ed68f73d2374ddd5f71f0252b77ad0e2fed625/comments", "author": null, "committer": null, "parents": [{"sha": "7b7034ea9a1670ccc3fd5808cd0219e0645ffae7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b7034ea9a1670ccc3fd5808cd0219e0645ffae7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b7034ea9a1670ccc3fd5808cd0219e0645ffae7"}], "stats": {"total": 80, "additions": 6, "deletions": 74}, "files": [{"sha": "c2e6f633a8369f7b6b1498e9992f74516fd49027", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15ed68f73d2374ddd5f71f0252b77ad0e2fed625/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15ed68f73d2374ddd5f71f0252b77ad0e2fed625/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=15ed68f73d2374ddd5f71f0252b77ad0e2fed625", "patch": "@@ -1,3 +1,9 @@\n+2006-01-18  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* rtlanal.c (global_reg_mentioned_p_1,\n+\tglobal_reg_mentioned_p): Remove.\n+\t* rtl.h: Remove the prototype for global_reg_mentioned_p.\n+\n 2006-01-17  Roger Sayle  <roger@eyesopen.com>\n \n \t* config/i386/i386.c (COSTS_N_BYTES): New macro."}, {"sha": "f3ec0659ae7c861203b0ac31cf9fce537e076f6c", "filename": "gcc/rtl.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15ed68f73d2374ddd5f71f0252b77ad0e2fed625/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15ed68f73d2374ddd5f71f0252b77ad0e2fed625/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=15ed68f73d2374ddd5f71f0252b77ad0e2fed625", "patch": "@@ -1577,7 +1577,6 @@ extern int rtx_varies_p (rtx, int);\n extern int rtx_addr_varies_p (rtx, int);\n extern HOST_WIDE_INT get_integer_term (rtx);\n extern rtx get_related_value (rtx);\n-extern int global_reg_mentioned_p (rtx);\n extern int reg_mentioned_p (rtx, rtx);\n extern int count_occurrences (rtx, rtx, int);\n extern int reg_referenced_p (rtx, rtx);"}, {"sha": "91fb4898b73b076965aa1ac62e33e97c539e9130", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 0, "deletions": 73, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15ed68f73d2374ddd5f71f0252b77ad0e2fed625/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15ed68f73d2374ddd5f71f0252b77ad0e2fed625/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=15ed68f73d2374ddd5f71f0252b77ad0e2fed625", "patch": "@@ -39,7 +39,6 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #include \"function.h\"\n \n /* Forward declarations */\n-static int global_reg_mentioned_p_1 (rtx *, void *);\n static void set_of_1 (rtx, rtx, void *);\n static bool covers_regno_p (rtx, unsigned int);\n static bool covers_regno_no_parallel_p (rtx, unsigned int);\n@@ -476,78 +475,6 @@ get_related_value (rtx x)\n   return 0;\n }\n \f\n-/* A subroutine of global_reg_mentioned_p, returns 1 if *LOC mentions\n-   a global register.  */\n-\n-static int\n-global_reg_mentioned_p_1 (rtx *loc, void *data ATTRIBUTE_UNUSED)\n-{\n-  int regno;\n-  rtx x = *loc;\n-\n-  if (! x)\n-    return 0;\n-\n-  switch (GET_CODE (x))\n-    {\n-    case SUBREG:\n-      if (REG_P (SUBREG_REG (x)))\n-\t{\n-\t  if (REGNO (SUBREG_REG (x)) < FIRST_PSEUDO_REGISTER\n-\t      && global_regs[subreg_regno (x)])\n-\t    return 1;\n-\t  return 0;\n-\t}\n-      break;\n-\n-    case REG:\n-      regno = REGNO (x);\n-      if (regno < FIRST_PSEUDO_REGISTER && global_regs[regno])\n-\treturn 1;\n-      return 0;\n-\n-    case SCRATCH:\n-    case PC:\n-    case CC0:\n-    case CONST_INT:\n-    case CONST_DOUBLE:\n-    case CONST:\n-    case LABEL_REF:\n-      return 0;\n-\n-    case CALL:\n-      /* A non-constant call might use a global register.  */\n-      return 1;\n-\n-    default:\n-      break;\n-    }\n-\n-  return 0;\n-}\n-\n-/* Returns nonzero if X mentions a global register.  */\n-\n-int\n-global_reg_mentioned_p (rtx x)\n-{\n-  if (INSN_P (x))\n-    {\n-      if (CALL_P (x))\n-\t{\n-\t  if (! CONST_OR_PURE_CALL_P (x))\n-\t    return 1;\n-\t  x = CALL_INSN_FUNCTION_USAGE (x);\n-\t  if (x == 0)\n-\t    return 0;\n-\t}\n-      else\n-\tx = PATTERN (x);\n-    }\n-\n-  return for_each_rtx (&x, global_reg_mentioned_p_1, NULL);\n-}\n-\f\n /* Return the number of places FIND appears within X.  If COUNT_DEST is\n    zero, we do not count occurrences inside the destination of a SET.  */\n "}]}