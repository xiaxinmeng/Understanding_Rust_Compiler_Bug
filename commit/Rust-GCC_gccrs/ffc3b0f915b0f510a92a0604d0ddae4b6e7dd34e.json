{"sha": "ffc3b0f915b0f510a92a0604d0ddae4b6e7dd34e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmZjM2IwZjkxNWIwZjUxMGE5MmEwNjA0ZDBkZGFlNGI2ZTdkZDM0ZQ==", "commit": {"author": {"name": "Alastair J. Houghton", "email": "ajh8@doc.ic.ac.uk", "date": "1999-10-15T08:42:02Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-10-15T08:42:02Z"}, "message": "c-parse.in (component_decl): Support anonymous struct/union.\n\n        * c-parse.in (component_decl): Support anonymous struct/union.\n        (%expect): Update.\n        * c-parse.y: Regenerate.\n        * c-parse.c: Likewise.\n        * objc/objc-parse.y: Likewise.\n        * objc/objc-parse.c: Likewise.\n        * c-decl.c (finish_struct): Don't sort the fields.\n        (field_decl_cmp): Delete unused function.\n\nCo-Authored-By: Mumit Khan <khan@xraylith.wisc.edu>\n\nFrom-SVN: r30016", "tree": {"sha": "8bc53910e67e019a077ccea4058a4d9f91b9d391", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8bc53910e67e019a077ccea4058a4d9f91b9d391"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ffc3b0f915b0f510a92a0604d0ddae4b6e7dd34e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffc3b0f915b0f510a92a0604d0ddae4b6e7dd34e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffc3b0f915b0f510a92a0604d0ddae4b6e7dd34e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffc3b0f915b0f510a92a0604d0ddae4b6e7dd34e/comments", "author": null, "committer": null, "parents": [{"sha": "e57ad0c81569d506af52ff39efd2fcd9719ef53a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e57ad0c81569d506af52ff39efd2fcd9719ef53a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e57ad0c81569d506af52ff39efd2fcd9719ef53a"}], "stats": {"total": 4351, "additions": 2176, "deletions": 2175}, "files": [{"sha": "abc3e1c8ecaa84797684b386bd78a1e6f52c23ed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffc3b0f915b0f510a92a0604d0ddae4b6e7dd34e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffc3b0f915b0f510a92a0604d0ddae4b6e7dd34e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ffc3b0f915b0f510a92a0604d0ddae4b6e7dd34e", "patch": "@@ -1,3 +1,15 @@\n+Fri Oct 15 02:37:28 1999  Alastair J. Houghton <ajh8@doc.ic.ac.uk>\n+\t\t\t  Mumit Khan  <khan@xraylith.wisc.edu>\n+\n+\t* c-parse.in (component_decl): Support anonymous struct/union.\n+\t(%expect): Update.\n+\t* c-parse.y: Regenerate.\n+\t* c-parse.c: Likewise.\n+\t* objc/objc-parse.y: Likewise.\n+\t* objc/objc-parse.c: Likewise.\n+\t* c-decl.c (finish_struct): Don't sort the fields.\n+\t(field_decl_cmp): Delete unused function.\n+\n Fri Oct 15 01:20:52 1999  Richard Henderson  <rth@cygnus.com>\n \n \t* sparc.md (movsf_const_intreg): Revert last constraint change."}, {"sha": "3a38c4fc76ada869886ebeb8227f083567a64f09", "filename": "gcc/c-decl.c", "status": "modified", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffc3b0f915b0f510a92a0604d0ddae4b6e7dd34e/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffc3b0f915b0f510a92a0604d0ddae4b6e7dd34e/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=ffc3b0f915b0f510a92a0604d0ddae4b6e7dd34e", "patch": "@@ -290,7 +290,6 @@ static tree lookup_tag_reverse\t\tPROTO((tree));\n static tree grokdeclarator\t\tPROTO((tree, tree, enum decl_context,\n \t\t\t\t\t       int));\n static tree grokparms\t\t\tPROTO((tree, int));\n-static int field_decl_cmp\t\tPROTO((const PTR, const PTR));\n static void layout_array_type\t\tPROTO((tree));\n \f\n /* C-specific option variables.  */\n@@ -5287,26 +5286,6 @@ grokfield (filename, line, declarator, declspecs, width)\n   return value;\n }\n \f\n-/* Function to help qsort sort FIELD_DECLs by name order.  */\n-\n-static int\n-field_decl_cmp (xp, yp)\n-     const PTR xp;\n-     const PTR yp;\n-{\n-  tree *x = (tree *)xp, *y = (tree *)yp;\n-\n-  if (DECL_NAME (*x) == DECL_NAME (*y))\n-    return 0;\n-  if (DECL_NAME (*x) == NULL)\n-    return -1;\n-  if (DECL_NAME (*y) == NULL)\n-    return 1;\n-  if (DECL_NAME (*x) < DECL_NAME (*y))\n-    return -1;\n-  return 1;\n-}\n-\n /* Fill in the fields of a RECORD_TYPE or UNION_TYPE node, T.\n    FIELDLIST is a chain of FIELD_DECL nodes for the fields.\n    ATTRIBUTES are attributes to be applied to the structure.\n@@ -5541,45 +5520,6 @@ finish_struct (t, fieldlist, attributes)\n \n   TYPE_FIELDS (t) = fieldlist;\n \n-  /* If there are lots of fields, sort so we can look through them fast.\n-     We arbitrarily consider 16 or more elts to be \"a lot\".  */\n-  {\n-    int len = 0;\n-\n-    for (x = fieldlist; x; x = TREE_CHAIN (x))\n-      {\n-\tif (len > 15)\n-\t  break;\n-\tlen += 1;\n-      }\n-    if (len > 15)\n-      {\n-\ttree *field_array;\n-\tchar *space;\n-\n-\tlen += list_length (x);\n-\t/* Use the same allocation policy here that make_node uses, to\n-\t   ensure that this lives as long as the rest of the struct decl.\n-\t   All decls in an inline function need to be saved.  */\n-\tif (ggc_p)\n-\t  space = ggc_alloc (sizeof (struct lang_type) + len * sizeof (tree));\n-\telse if (allocation_temporary_p ())\n-\t  space = savealloc (sizeof (struct lang_type) + len * sizeof (tree));\n-\telse\n-\t  space = oballoc (sizeof (struct lang_type) + len * sizeof (tree));\n-\n-\tTYPE_LANG_SPECIFIC (t) = (struct lang_type *) space;\n-\tTYPE_LANG_SPECIFIC (t)->len = len;\n-\n-\tfield_array = &TYPE_LANG_SPECIFIC (t)->elts[0];\n-\tlen = 0;\n-\tfor (x = fieldlist; x; x = TREE_CHAIN (x))\n-\t  field_array[len++] = x;\n-\n-\tqsort (field_array, len, sizeof (tree), field_decl_cmp);\n-      }\n-  }\n-\n   for (x = TYPE_MAIN_VARIANT (t); x; x = TYPE_NEXT_VARIANT (x))\n     {\n       TYPE_FIELDS (x) = TYPE_FIELDS (t);"}, {"sha": "e358450a9c1dc7b677354afeb50450786395631a", "filename": "gcc/c-parse.c", "status": "modified", "additions": 837, "deletions": 828, "changes": 1665, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffc3b0f915b0f510a92a0604d0ddae4b6e7dd34e/gcc%2Fc-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffc3b0f915b0f510a92a0604d0ddae4b6e7dd34e/gcc%2Fc-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.c?ref=ffc3b0f915b0f510a92a0604d0ddae4b6e7dd34e"}, {"sha": "3259ecac2b6410a4732e3704feb4c42480316f8d", "filename": "gcc/c-parse.in", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffc3b0f915b0f510a92a0604d0ddae4b6e7dd34e/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffc3b0f915b0f510a92a0604d0ddae4b6e7dd34e/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=ffc3b0f915b0f510a92a0604d0ddae4b6e7dd34e", "patch": "@@ -28,10 +28,10 @@ Boston, MA 02111-1307, USA.  */\n    written by AT&T, but I have never seen it.  */\n \n ifobjc\n-%expect 73\n+%expect 74\n end ifobjc\n ifc\n-%expect 52\n+%expect 53\n end ifc\n \n %{\n@@ -1598,12 +1598,21 @@ component_decl:\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n \t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n \t\t  resume_momentary ($2); }\n-\t| typed_typespecs\n-\t\t{ if (pedantic)\n-\t\t    pedwarn (\"ANSI C forbids member declarations with no members\");\n-\t\t  shadow_tag($1);\n-\t\t  $$ = NULL_TREE; }\n-\t| nonempty_type_quals setspecs components\n+\t| typed_typespecs setspecs save_filename save_lineno maybe_attribute\n+\t\t{\n+\t\t  /* Support for unnamed structs or unions as members of \n+\t\t     structs or unions (which is [a] useful and [b] supports \n+\t\t     MS P-SDK).  */\n+\t\t  if (pedantic)\n+\t\t    pedwarn (\"ANSI C doesn't support unnamed structs/unions\");\n+\n+\t\t  $$ = grokfield($3, $4, NULL, current_declspecs, NULL_TREE);\n+\t\t  current_declspecs = TREE_VALUE (declspec_stack);\n+\t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n+\t\t  resume_momentary ($2);\n+\t\t}\n+    | nonempty_type_quals setspecs components\n \t\t{ $$ = $3;\n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);"}, {"sha": "f9092d7aed624c5623c0e10ed240edd1505a470e", "filename": "gcc/c-parse.y", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffc3b0f915b0f510a92a0604d0ddae4b6e7dd34e/gcc%2Fc-parse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffc3b0f915b0f510a92a0604d0ddae4b6e7dd34e/gcc%2Fc-parse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.y?ref=ffc3b0f915b0f510a92a0604d0ddae4b6e7dd34e", "patch": "@@ -28,7 +28,7 @@ Boston, MA 02111-1307, USA.  */\n /* To whomever it may concern: I have heard that such a thing was once\n    written by AT&T, but I have never seen it.  */\n \n-%expect 52\n+%expect 53\n \n %{\n #include \"config.h\"\n@@ -1407,12 +1407,21 @@ component_decl:\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n \t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n \t\t  resume_momentary ($2); }\n-\t| typed_typespecs\n-\t\t{ if (pedantic)\n-\t\t    pedwarn (\"ANSI C forbids member declarations with no members\");\n-\t\t  shadow_tag($1);\n-\t\t  $$ = NULL_TREE; }\n-\t| nonempty_type_quals setspecs components\n+\t| typed_typespecs setspecs save_filename save_lineno maybe_attribute\n+\t\t{\n+\t\t  /* Support for unnamed structs or unions as members of \n+\t\t     structs or unions (which is [a] useful and [b] supports \n+\t\t     MS P-SDK).  */\n+\t\t  if (pedantic)\n+\t\t    pedwarn (\"ANSI C doesn't support unnamed structs/unions\");\n+\n+\t\t  $$ = grokfield($3, $4, NULL, current_declspecs, NULL_TREE);\n+\t\t  current_declspecs = TREE_VALUE (declspec_stack);\n+\t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n+\t\t  resume_momentary ($2);\n+\t\t}\n+    | nonempty_type_quals setspecs components\n \t\t{ $$ = $3;\n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);"}, {"sha": "0a9eb500d4a2d76deba9d09fb36b614ffbc88063", "filename": "gcc/objc/objc-parse.c", "status": "modified", "additions": 1278, "deletions": 1265, "changes": 2543, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffc3b0f915b0f510a92a0604d0ddae4b6e7dd34e/gcc%2Fobjc%2Fobjc-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffc3b0f915b0f510a92a0604d0ddae4b6e7dd34e/gcc%2Fobjc%2Fobjc-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-parse.c?ref=ffc3b0f915b0f510a92a0604d0ddae4b6e7dd34e"}, {"sha": "24d39f0ae463e9374a8c84c7771a15fefcffa46b", "filename": "gcc/objc/objc-parse.y", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffc3b0f915b0f510a92a0604d0ddae4b6e7dd34e/gcc%2Fobjc%2Fobjc-parse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffc3b0f915b0f510a92a0604d0ddae4b6e7dd34e/gcc%2Fobjc%2Fobjc-parse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-parse.y?ref=ffc3b0f915b0f510a92a0604d0ddae4b6e7dd34e", "patch": "@@ -28,7 +28,7 @@ Boston, MA 02111-1307, USA.  */\n /* To whomever it may concern: I have heard that such a thing was once\n    written by AT&T, but I have never seen it.  */\n \n-%expect 73\n+%expect 74\n \n %{\n #include \"config.h\"\n@@ -1537,12 +1537,21 @@ component_decl:\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n \t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n \t\t  resume_momentary ($2); }\n-\t| typed_typespecs\n-\t\t{ if (pedantic)\n-\t\t    pedwarn (\"ANSI C forbids member declarations with no members\");\n-\t\t  shadow_tag($1);\n-\t\t  $$ = NULL_TREE; }\n-\t| nonempty_type_quals setspecs components\n+\t| typed_typespecs setspecs save_filename save_lineno maybe_attribute\n+\t\t{\n+\t\t  /* Support for unnamed structs or unions as members of \n+\t\t     structs or unions (which is [a] useful and [b] supports \n+\t\t     MS P-SDK).  */\n+\t\t  if (pedantic)\n+\t\t    pedwarn (\"ANSI C doesn't support unnamed structs/unions\");\n+\n+\t\t  $$ = grokfield($3, $4, NULL, current_declspecs, NULL_TREE);\n+\t\t  current_declspecs = TREE_VALUE (declspec_stack);\n+\t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);\n+\t\t  declspec_stack = TREE_CHAIN (declspec_stack);\n+\t\t  resume_momentary ($2);\n+\t\t}\n+    | nonempty_type_quals setspecs components\n \t\t{ $$ = $3;\n \t\t  current_declspecs = TREE_VALUE (declspec_stack);\n \t\t  prefix_attributes = TREE_PURPOSE (declspec_stack);"}]}