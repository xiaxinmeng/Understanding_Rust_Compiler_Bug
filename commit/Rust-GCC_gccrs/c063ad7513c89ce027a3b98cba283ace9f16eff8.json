{"sha": "c063ad7513c89ce027a3b98cba283ace9f16eff8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzA2M2FkNzUxM2M4OWNlMDI3YTNiOThjYmEyODNhY2U5ZjE2ZWZmOA==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-05-14T04:46:44Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-05-14T04:46:44Z"}, "message": "pa.c (emit_move_sequence): Handle secondary reloads for load of FP registers from constant expressions.\n\n\t* pa.c (emit_move_sequence): Handle secondary reloads for load of\n\tFP registers from constant expressions.\n\nFrom-SVN: r4447", "tree": {"sha": "08483b0d0f4d611d8b5e0f48f43dccac83342d39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08483b0d0f4d611d8b5e0f48f43dccac83342d39"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c063ad7513c89ce027a3b98cba283ace9f16eff8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c063ad7513c89ce027a3b98cba283ace9f16eff8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c063ad7513c89ce027a3b98cba283ace9f16eff8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c063ad7513c89ce027a3b98cba283ace9f16eff8/comments", "author": null, "committer": null, "parents": [{"sha": "f4e5900810f1818a0b60f7556d1caf1fe13998a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4e5900810f1818a0b60f7556d1caf1fe13998a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4e5900810f1818a0b60f7556d1caf1fe13998a7"}], "stats": {"total": 26, "additions": 26, "deletions": 0}, "files": [{"sha": "30fcf9a3e8d679ffa5695d8789be0d93ae7a0f52", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c063ad7513c89ce027a3b98cba283ace9f16eff8/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c063ad7513c89ce027a3b98cba283ace9f16eff8/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=c063ad7513c89ce027a3b98cba283ace9f16eff8", "patch": "@@ -728,6 +728,32 @@ emit_move_sequence (operands, mode, scratch_reg)\n \t\t\t  operand1));\n       return 1;\n     }\n+  /* Handle secondary reloads for loads of FP registers from constant\n+     expressions by forcing the constant into memory.\n+\n+     use scratch_reg to hold the address of the memory location. \n+\n+     ??? The proper fix is to change PREFERRED_RELOAD_CLASS to return \n+     NO_REGS when presented with a const_int and an register class \n+     containing only FP registers.  Doing so unfortunately creates\n+     more problems than it solves.   Fix this for 2.5.  */\n+  else if (fp_reg_operand (operand0, mode)\n+\t   && CONSTANT_P (operand1)\n+\t   && scratch_reg)\n+    {\n+      rtx xoperands[2];\n+\n+      /* Force the constant into memory and put the address of the\n+\t memory location into scratch_reg.  */\n+      xoperands[0] = scratch_reg;\n+      xoperands[1] = XEXP (force_const_mem (mode, operand1), 0);\n+      emit_move_sequence (xoperands, mode, 0);\n+\n+      /* Now load the destination register.  */\n+      emit_insn (gen_rtx (SET, mode, operand0,\n+\t\t\t  gen_rtx (MEM, mode, scratch_reg)));\n+      return 1;\n+    }\n   /* Handle secondary reloads for SAR.  These occur when trying to load\n      the SAR from memory or from a FP register.  */\n   else if (GET_CODE (operand0) == REG"}]}