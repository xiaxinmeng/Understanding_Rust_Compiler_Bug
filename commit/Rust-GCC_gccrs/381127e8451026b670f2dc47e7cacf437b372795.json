{"sha": "381127e8451026b670f2dc47e7cacf437b372795", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzgxMTI3ZTg0NTEwMjZiNjcwZjJkYzQ3ZTdjYWNmNDM3YjM3Mjc5NQ==", "commit": {"author": {"name": "Robert Lipe", "email": "robertl@dgii.com", "date": "1998-02-11T00:35:13Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-02-11T00:35:13Z"}, "message": "except.c (start_dynamic_cleanup): Remove unused variable 'dhc'.\n\n        * except.c (start_dynamic_cleanup): Remove unused variable 'dhc'.\n        (expand_eh_region_start_tree): Remove unused variable 'note'.\n        (exception_optimize): Remove unused variable 'regions'.\n        (expand_builtin_eh_stub):  Remove unused variable 'temp'.\n        (copy_eh_entry): Deleted.   Dead function.\n        * expr.c (move_block_to_reg) Bracket declaration of 'pat' and\n        'last' with same #if HAVE_load_multiple as use of it.\n        (move_block_from_reg): Likewise.\n        (emit_move_insn_1): Remove unused variable 'insns'.\n        (store_constructor): Bracket declaration of startb, endb with\n        #if TARGET_MEMFUNCTIONS.  Remove unused variables 'set_word_size'\n        'target', and 'xtarget'.\n        (expand_builtin_setjmp): Remove unused variables 'op0',\n        'next_arg_reg', 'old_inhibit_defer_pop'.\n        (expand_builtin): Remove unused variable 'offset'.\n        (do_store_flag): Remove unused variables 'pattern', 'jump_pat'.\n        (emit_queue): Add parens for assignment used as conditional.\n        (expand_expr): case TARGET_EXPR: Remove unused variable 'temp'.\n\nFrom-SVN: r17843", "tree": {"sha": "6c085eaf4f6a0f4eeaa7b71e40be3173bd3f59da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c085eaf4f6a0f4eeaa7b71e40be3173bd3f59da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/381127e8451026b670f2dc47e7cacf437b372795", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/381127e8451026b670f2dc47e7cacf437b372795", "html_url": "https://github.com/Rust-GCC/gccrs/commit/381127e8451026b670f2dc47e7cacf437b372795", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/381127e8451026b670f2dc47e7cacf437b372795/comments", "author": null, "committer": null, "parents": [{"sha": "9b713d5e5077b9bdb1376c09a7f07c817de0af16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b713d5e5077b9bdb1376c09a7f07c817de0af16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b713d5e5077b9bdb1376c09a7f07c817de0af16"}], "stats": {"total": 74, "additions": 41, "deletions": 33}, "files": [{"sha": "ec4b15c8a8dd6f1ee34477743bf58c96256e0dcb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/381127e8451026b670f2dc47e7cacf437b372795/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/381127e8451026b670f2dc47e7cacf437b372795/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=381127e8451026b670f2dc47e7cacf437b372795", "patch": "@@ -1,3 +1,25 @@\n+Wed Feb 11 01:35:55 1998  Robert Lipe   <robertl@dgii.com>\n+\n+\t* except.c (start_dynamic_cleanup): Remove unused variable 'dhc'.\n+\t(expand_eh_region_start_tree): Remove unused variable 'note'.\n+\t(exception_optimize): Remove unused variable 'regions'.\n+\t(expand_builtin_eh_stub):  Remove unused variable 'temp'.\n+\t(copy_eh_entry): Deleted.   Dead function.\n+\n+        * expr.c (move_block_to_reg) Bracket declaration of 'pat' and \n+\t'last' with same #if HAVE_load_multiple as use of it.\n+\t(move_block_from_reg): Likewise.\n+\t(emit_move_insn_1): Remove unused variable 'insns'.\n+\t(store_constructor): Bracket declaration of startb, endb with \n+\t#if TARGET_MEMFUNCTIONS.  Remove unused variables 'set_word_size' \n+\t'target', and 'xtarget'.\n+\t(expand_builtin_setjmp): Remove unused variables 'op0', \n+\t'next_arg_reg', 'old_inhibit_defer_pop'.\n+\t(expand_builtin): Remove unused variable 'offset'. \n+\t(do_store_flag): Remove unused variables 'pattern', 'jump_pat'.\n+\t(emit_queue): Add parens for assignment used as conditional.\n+\t(expand_expr): case TARGET_EXPR: Remove unused variable 'temp'.\n+\n Wed Feb 11 01:30:49 1998  Marc Lehmann <pcg@goof.com>\n \n \t* i386.c: Added include for recog.h. "}, {"sha": "fd92d08d08b8b56e59bb3b97434c729f24ce75f5", "filename": "gcc/except.c", "status": "modified", "additions": 3, "deletions": 19, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/381127e8451026b670f2dc47e7cacf437b372795/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/381127e8451026b670f2dc47e7cacf437b372795/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=381127e8451026b670f2dc47e7cacf437b372795", "patch": "@@ -551,20 +551,6 @@ top_label_entry (stack)\n   return (*stack)->u.tlabel;\n }\n \n-/* Make a copy of ENTRY using xmalloc to allocate the space.  */\n-\n-static struct eh_entry *\n-copy_eh_entry (entry)\n-     struct eh_entry *entry;\n-{\n-  struct eh_entry *newentry;\n-\n-  newentry = (struct eh_entry *) xmalloc (sizeof (struct eh_entry));\n-  bcopy ((char *) entry, (char *) newentry, sizeof (struct eh_entry));\n-\n-  return newentry;\n-}\n-\n /* Push a new eh_node entry onto STACK.  */\n \n static void\n@@ -855,7 +841,7 @@ start_dynamic_cleanup (func, arg)\n      tree func;\n      tree arg;\n {\n-  rtx dhc, dcc;\n+  rtx dcc;\n   rtx new_func, new_arg;\n   rtx x, buf;\n   int size;\n@@ -984,8 +970,6 @@ expand_eh_region_start_tree (decl, cleanup)\n      tree decl;\n      tree cleanup;\n {\n-  rtx note;\n-\n   /* This is the old code.  */\n   if (! doing_eh (0))\n     return 0;\n@@ -2016,7 +2000,7 @@ scan_region (insn, n, delete_outer)\n void\n exception_optimize ()\n {\n-  rtx insn, regions = NULL_RTX;\n+  rtx insn;\n   int n;\n \n   /* Remove empty regions.  */\n@@ -2160,7 +2144,7 @@ expand_builtin_eh_stub ()\n {\n   rtx stub_start = gen_label_rtx ();\n   rtx after_stub = gen_label_rtx ();\n-  rtx handler, offset, temp;\n+  rtx handler, offset;\n \n   emit_jump (after_stub);\n   emit_label (stub_start);"}, {"sha": "bee0b95f925b89657a4618a3348ac7a0dfe606c7", "filename": "gcc/expr.c", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/381127e8451026b670f2dc47e7cacf437b372795/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/381127e8451026b670f2dc47e7cacf437b372795/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=381127e8451026b670f2dc47e7cacf437b372795", "patch": "@@ -499,7 +499,7 @@ void\n emit_queue ()\n {\n   register rtx p;\n-  while (p = pending_chain)\n+  while ((p = pending_chain))\n     {\n       QUEUED_INSN (p) = emit_insn (QUEUED_BODY (p));\n       pending_chain = QUEUED_NEXT (p);\n@@ -1657,7 +1657,10 @@ move_block_to_reg (regno, x, nregs, mode)\n      enum machine_mode mode;\n {\n   int i;\n-  rtx pat, last;\n+#ifdef HAVE_load_multiple\n+  rtx pat; \n+  rtx last;\n+#endif\n \n   if (nregs == 0)\n     return;\n@@ -1700,7 +1703,10 @@ move_block_from_reg (regno, x, nregs, size)\n      int size;\n {\n   int i;\n-  rtx pat, last;\n+#ifdef HAVE_store_multiple\n+  rtx pat; \n+  rtx last;\n+#endif\n   enum machine_mode mode;\n \n   /* If SIZE is that of a mode no bigger than a word, just use that\n@@ -2221,7 +2227,6 @@ emit_move_insn_1 (x, y)\n     {\n       /* Don't split destination if it is a stack push.  */\n       int stack = push_operand (x, GET_MODE (x));\n-      rtx insns;\n \n       /* If this is a stack, push the highpart first, so it\n \t will be in the argument order.\n@@ -2265,7 +2270,6 @@ emit_move_insn_1 (x, y)\n   else if (GET_MODE_SIZE (mode) > UNITS_PER_WORD)\n     {\n       rtx last_insn = 0;\n-      rtx insns;\n       \n #ifdef PUSH_ROUNDING\n \n@@ -3883,8 +3887,6 @@ store_constructor (exp, target, cleared)\n   else if (TREE_CODE (type) == SET_TYPE)\n     {\n       tree elt = CONSTRUCTOR_ELTS (exp);\n-      rtx xtarget = XEXP (target, 0);\n-      int set_word_size = TYPE_ALIGN (type);\n       int nbytes = int_size_in_bytes (type), nbits;\n       tree domain = TYPE_DOMAIN (type);\n       tree domain_min, domain_max, bitlength;\n@@ -3991,7 +3993,9 @@ store_constructor (exp, target, cleared)\n \t  tree startbit = TREE_PURPOSE (elt);\n \t  /* end of range of element, or element value */\n \t  tree endbit   = TREE_VALUE (elt);\n+#ifdef TARGET_MEM_FUNCTIONS\n \t  HOST_WIDE_INT startb, endb;\n+#endif\n \t  rtx  bitlength_rtx, startbit_rtx, endbit_rtx, targetx;\n \n \t  bitlength_rtx = expand_expr (bitlength,\n@@ -6954,7 +6958,6 @@ expand_expr (exp, target, tmode, modifier)\n \ttree slot = TREE_OPERAND (exp, 0);\n \ttree cleanups = NULL_TREE;\n \ttree exp1;\n-\trtx temp;\n \n \tif (TREE_CODE (slot) != VAR_DECL)\n \t  abort ();\n@@ -7621,9 +7624,6 @@ expand_builtin_setjmp (buf_addr, target, first_label, next_label)\n   rtx lab1 = gen_label_rtx ();\n   enum machine_mode sa_mode = Pmode, value_mode;\n   rtx stack_save;\n-  int old_inhibit_defer_pop = inhibit_defer_pop;\n-  rtx next_arg_reg;\n-  rtx op0;\n   int i;\n \n   value_mode = TYPE_MODE (integer_type_node);\n@@ -8098,9 +8098,12 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n     case BUILT_IN_ARGS_INFO:\n       {\n \tint nwords = sizeof (CUMULATIVE_ARGS) / sizeof (int);\n-\tint i;\n \tint *word_ptr = (int *) &current_function_args_info;\n+#if 0\t\n+\t/* These are used by the code below that is if 0'ed away */\n+\tint i;\n \ttree type, elts, result;\n+#endif\n \n \tif (sizeof (CUMULATIVE_ARGS) % sizeof (int) != 0)\n \t  fatal (\"CUMULATIVE_ARGS type defined badly; see %s, line %d\",\n@@ -8614,7 +8617,6 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n       {\n \ttree arg1 = TREE_VALUE (arglist);\n \ttree arg2 = TREE_VALUE (TREE_CHAIN (arglist));\n-\ttree offset;\n \ttree len, len2;\n \n \tlen = c_strlen (arg1);\n@@ -10464,7 +10466,7 @@ do_store_flag (exp, target, mode, only_cheap)\n   rtx op0, op1;\n   enum insn_code icode;\n   rtx subtarget = target;\n-  rtx result, label, pattern, jump_pat;\n+  rtx result, label;\n \n   /* If this is a TRUTH_NOT_EXPR, set a flag indicating we must invert the\n      result at the end.  We can't simply invert the test since it would"}]}