{"sha": "5d4d885ca6321901051b3374817ff46249f273f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ0ZDg4NWNhNjMyMTkwMTA1MWIzMzc0ODE3ZmY0NjI0OWYyNzNmMQ==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2002-10-21T19:41:11Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2002-10-21T19:41:11Z"}, "message": "fixdfdi.h (__fixunsdfdi, __fixdfdi): Add prototypes.\n\n\t* config/s390/fixdfdi.h (__fixunsdfdi, __fixdfdi): Add prototypes.\n\t(__fixunssfdi, __fixsfdi): Likewise.\n\t* config/s390/s390.c (s390_single_hi): Initialize 'value'.\n\t(s390_single_qi): Likewise.\n\t(s390_emit_epilogue): Initialize 'offset'.  Remove signed vs.\n\tunsigned comparison warning.\n\t(s390_return_addr_rtx): New function.\n\t* config/s390/s390-protos.h (s390_return_addr_rtx): Declare it.\n\t* config/s390/s390.h (RETURN_ADDR_RTX): Use it.\n\t(HARD_REGNO_MODE_OK): Rewrite condition to silence warnings.\n\nFrom-SVN: r58379", "tree": {"sha": "74c245ccc0b95630fdf5b63be52ab82600de51fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74c245ccc0b95630fdf5b63be52ab82600de51fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d4d885ca6321901051b3374817ff46249f273f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d4d885ca6321901051b3374817ff46249f273f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d4d885ca6321901051b3374817ff46249f273f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d4d885ca6321901051b3374817ff46249f273f1/comments", "author": null, "committer": null, "parents": [{"sha": "22bd25548a593b0a2082cfe501d6436b86c55c38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22bd25548a593b0a2082cfe501d6436b86c55c38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22bd25548a593b0a2082cfe501d6436b86c55c38"}], "stats": {"total": 70, "additions": 56, "deletions": 14}, "files": [{"sha": "d72b90e7d623a03214137344644edbd55a0c8662", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d4d885ca6321901051b3374817ff46249f273f1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d4d885ca6321901051b3374817ff46249f273f1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5d4d885ca6321901051b3374817ff46249f273f1", "patch": "@@ -1,3 +1,16 @@\n+2002-10-21  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\t* config/s390/fixdfdi.h (__fixunsdfdi, __fixdfdi): Add prototypes.\n+\t(__fixunssfdi, __fixsfdi): Likewise.\n+\t* config/s390/s390.c (s390_single_hi): Initialize 'value'.\n+\t(s390_single_qi): Likewise.\n+\t(s390_emit_epilogue): Initialize 'offset'.  Remove signed vs.\n+\tunsigned comparison warning.\n+\t(s390_return_addr_rtx): New function.\n+\t* config/s390/s390-protos.h (s390_return_addr_rtx): Declare it.\n+\t* config/s390/s390.h (RETURN_ADDR_RTX): Use it.\n+\t(HARD_REGNO_MODE_OK): Rewrite condition to silence warnings.\n+\n 2002-10-21  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* config/s390/s390.c (s390_output_mi_vcall_thunk): New function."}, {"sha": "1f82a9c7a2cd353f8375735ba5aaf294923e7d2d", "filename": "gcc/config/s390/fixdfdi.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d4d885ca6321901051b3374817ff46249f273f1/gcc%2Fconfig%2Fs390%2Ffixdfdi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d4d885ca6321901051b3374817ff46249f273f1/gcc%2Fconfig%2Fs390%2Ffixdfdi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Ffixdfdi.h?ref=5d4d885ca6321901051b3374817ff46249f273f1", "patch": "@@ -43,6 +43,7 @@ union double_long {\n     UDItype_x ll;\n };\n \n+UDItype_x __fixunsdfdi (double a1);\n \n /* convert double to unsigned int */\n UDItype_x\n@@ -114,6 +115,8 @@ union double_long {\n     UDItype_x ll;\n };\n \n+DItype_x __fixdfdi (double a1);\n+\n /* convert double to int */\n DItype_x\n __fixdfdi (double a1)\n@@ -184,6 +187,8 @@ union float_long\n     USItype_x l;\n   };\n \n+UDItype_x __fixunssfdi (float a1);\n+\n /* convert float to unsigned int */\n UDItype_x\n __fixunssfdi (float a1)\n@@ -250,6 +255,8 @@ union float_long\n     USItype_x l;\n   };\n \n+DItype_x __fixsfdi (float a1);\n+\n /* convert double to int */\n DItype_x\n __fixsfdi (float a1)"}, {"sha": "4def9452ef8c4a8dceff3fb33eb2e36f60f54855", "filename": "gcc/config/s390/s390-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d4d885ca6321901051b3374817ff46249f273f1/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d4d885ca6321901051b3374817ff46249f273f1/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-protos.h?ref=5d4d885ca6321901051b3374817ff46249f273f1", "patch": "@@ -66,6 +66,7 @@ extern void s390_load_address PARAMS ((rtx, rtx));\n extern void s390_expand_movstr PARAMS ((rtx, rtx, rtx));\n extern void s390_expand_clrstr PARAMS ((rtx, rtx));\n extern void s390_expand_cmpstr PARAMS ((rtx, rtx, rtx, rtx));\n+extern rtx s390_return_addr_rtx PARAMS ((int, rtx));\n \n extern void s390_output_symbolic_const PARAMS ((FILE *, rtx));\n extern void print_operand_address PARAMS ((FILE *, rtx));"}, {"sha": "4d4e325897b4f3c682be4f37fca476055d9b1eb5", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 31, "deletions": 6, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d4d885ca6321901051b3374817ff46249f273f1/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d4d885ca6321901051b3374817ff46249f273f1/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=5d4d885ca6321901051b3374817ff46249f273f1", "patch": "@@ -605,7 +605,7 @@ s390_single_hi (op, mode, def)\n {\n   if (GET_CODE (op) == CONST_INT)\n     {\n-      unsigned HOST_WIDE_INT value;\n+      unsigned HOST_WIDE_INT value = 0;\n       int n_parts = GET_MODE_SIZE (mode) / 2;\n       int i, part = -1;\n \n@@ -631,7 +631,7 @@ s390_single_hi (op, mode, def)\n   else if (GET_CODE (op) == CONST_DOUBLE\n            && GET_MODE (op) == VOIDmode)\n     {\n-      unsigned HOST_WIDE_INT value;\n+      unsigned HOST_WIDE_INT value = 0;\n       int n_parts = GET_MODE_SIZE (mode) / 2;\n       int i, part = -1;\n \n@@ -708,7 +708,7 @@ s390_single_qi (op, mode, def)\n {\n   if (GET_CODE (op) == CONST_INT)\n     {\n-      unsigned HOST_WIDE_INT value;\n+      unsigned HOST_WIDE_INT value = 0;\n       int n_parts = GET_MODE_SIZE (mode);\n       int i, part = -1;\n \n@@ -734,7 +734,7 @@ s390_single_qi (op, mode, def)\n   else if (GET_CODE (op) == CONST_DOUBLE\n            && GET_MODE (op) == VOIDmode)\n     {\n-      unsigned HOST_WIDE_INT value;\n+      unsigned HOST_WIDE_INT value = 0;\n       int n_parts = GET_MODE_SIZE (mode);\n       int i, part = -1;\n \n@@ -4370,6 +4370,31 @@ s390_machine_dependent_reorg (first)\n }\n \n \n+/* Return an RTL expression representing the value of the return address\n+   for the frame COUNT steps up from the current frame.  FRAME is the\n+   frame pointer of that frame.  */\n+\n+rtx\n+s390_return_addr_rtx (count, frame)\n+     int count;\n+     rtx frame;\n+{\n+  rtx addr;\n+\n+  /* For the current frame, we use the initial value of RETURN_REGNUM.\n+     This works both in leaf and non-leaf functions.  */\n+\n+  if (count == 0)\n+    return get_hard_reg_initial_val (Pmode, RETURN_REGNUM);\n+\n+  /* For frames farther back, we read the stack slot where the\n+     corresponding RETURN_REGNUM value was saved.  */\n+\n+  addr = plus_constant (frame, RETURN_REGNUM * UNITS_PER_WORD);\n+  addr = memory_address (Pmode, addr);\n+  return gen_rtx_MEM (Pmode, addr);\n+} \n+\n /* Find first call clobbered register unsused in a function.\n    This could be used as base register in a leaf function\n    or for holding the return address before epilogue.  */\n@@ -4794,7 +4819,7 @@ s390_emit_epilogue ()\n {\n   struct s390_frame frame;\n   rtx frame_pointer, return_reg;\n-  int area_bottom, area_top, offset;\n+  int area_bottom, area_top, offset = 0;\n   rtvec p;\n \n   /* Compute frame_info.  */\n@@ -4916,7 +4941,7 @@ s390_emit_epilogue ()\n \t  if (i == STACK_POINTER_REGNUM \n               || i == RETURN_REGNUM\n               || i == BASE_REGISTER \n-              || (flag_pic && i == PIC_OFFSET_TABLE_REGNUM))\n+              || (flag_pic && i == (int)PIC_OFFSET_TABLE_REGNUM))\n \t    continue;\n \n \t  if (global_regs[i])"}, {"sha": "aae46cf618cfbd46892431a577e22262d680472b", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d4d885ca6321901051b3374817ff46249f273f1/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d4d885ca6321901051b3374817ff46249f273f1/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=5d4d885ca6321901051b3374817ff46249f273f1", "patch": "@@ -370,9 +370,9 @@ do\t\t\t\t\t\t\t\t\\\n \n #define HARD_REGNO_MODE_OK(REGNO, MODE)                             \\\n   (FLOAT_REGNO_P(REGNO)?                                            \\\n-   (GET_MODE_CLASS(MODE) == MODE_FLOAT ||                           \\\n-    GET_MODE_CLASS(MODE) == MODE_COMPLEX_FLOAT ||                   \\\n-    (MODE) == SImode || (MODE) == DImode) :                         \\\n+   ((MODE) == SImode || (MODE) == DImode ||                         \\\n+    GET_MODE_CLASS(MODE) == MODE_FLOAT ||                           \\\n+    GET_MODE_CLASS(MODE) == MODE_COMPLEX_FLOAT) :                   \\\n    INT_REGNO_P(REGNO)?                                              \\\n     (HARD_REGNO_NREGS(REGNO, MODE) == 1 || !((REGNO) & 1)) :        \\\n    CC_REGNO_P(REGNO)?                                               \\\n@@ -599,11 +599,7 @@ extern const enum reg_class regclass_map[FIRST_PSEUDO_REGISTER]; /* smalled clas\n    plus_constant (arg_pointer_rtx, -STACK_POINTER_OFFSET))\n      \n #define RETURN_ADDR_RTX(COUNT, FRAME)\t\t\t\t\t\t\\\n-  ((COUNT) == 0 ? get_hard_reg_initial_val (Pmode, RETURN_REGNUM) :\t\t\\\n-   gen_rtx_MEM (Pmode,\t\t\t\t\t\t\t\t\\\n-                memory_address (Pmode, \t\t\t\t\t\t\\\n-                                plus_constant (DYNAMIC_CHAIN_ADDRESS ((FRAME)),\t\\\n-                                               RETURN_REGNUM * UNITS_PER_WORD))))\n+  s390_return_addr_rtx ((COUNT), DYNAMIC_CHAIN_ADDRESS ((FRAME)))\n \n /* The following macros will turn on dwarf2 exception hndling\n    Other code location for this exception handling are "}]}