{"sha": "049e524f68be57df307f11ea9d3d28afdc37d7c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ5ZTUyNGY2OGJlNTdkZjMwN2YxMWVhOWQzZDI4YWZkYzM3ZDdjMw==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2004-09-10T02:39:18Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2004-09-10T02:39:18Z"}, "message": "re PR middle-end/17055 (ICE while folding int/float vectors)\n\n\n\tPR middle-end/17055\n\t* fold-const.c (build_zero_vector): New function to construct a\n\tvector (either floating point or integer) of zeros.\n\t(fold_convert): Internally, enable conversions of integer zero\n\tto arbitrary vector types, using the new build_zero_vector.\n\n\t* gcc.dg/pr17055-1.c: New test case.\n\nFrom-SVN: r87272", "tree": {"sha": "23084ccb47738efb8c8ceb2cc535f0fd0434593b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23084ccb47738efb8c8ceb2cc535f0fd0434593b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/049e524f68be57df307f11ea9d3d28afdc37d7c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/049e524f68be57df307f11ea9d3d28afdc37d7c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/049e524f68be57df307f11ea9d3d28afdc37d7c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/049e524f68be57df307f11ea9d3d28afdc37d7c3/comments", "author": null, "committer": null, "parents": [{"sha": "1b83d20963c6db039c6530949db4da9581f86ce9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b83d20963c6db039c6530949db4da9581f86ce9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b83d20963c6db039c6530949db4da9581f86ce9"}], "stats": {"total": 57, "additions": 57, "deletions": 0}, "files": [{"sha": "a6105a8b7d458a0589a54093e0a2fef1683a5120", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/049e524f68be57df307f11ea9d3d28afdc37d7c3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/049e524f68be57df307f11ea9d3d28afdc37d7c3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=049e524f68be57df307f11ea9d3d28afdc37d7c3", "patch": "@@ -1,3 +1,11 @@\n+2004-09-09  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR middle-end/17055\n+\t* fold-const.c (build_zero_vector): New function to construct a\n+\tvector (either floating point or integer) of zeros.\n+\t(fold_convert): Internally, enable conversions of integer zero\n+\tto arbitrary vector types, using the new build_zero_vector.\n+\n 2004-09-09  Roger Sayle  <roger@eyesopen.com>\n \n \t* config/i386/i386.c (ix86_expand_ashlsi3_const): New function to"}, {"sha": "10cdb69b4874f7136cbd5903f32eac56bf22fd0b", "filename": "gcc/fold-const.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/049e524f68be57df307f11ea9d3d28afdc37d7c3/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/049e524f68be57df307f11ea9d3d28afdc37d7c3/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=049e524f68be57df307f11ea9d3d28afdc37d7c3", "patch": "@@ -89,6 +89,7 @@ static tree negate_expr (tree);\n static tree split_tree (tree, enum tree_code, tree *, tree *, tree *, int);\n static tree associate_trees (tree, tree, enum tree_code, tree);\n static tree const_binop (enum tree_code, tree, tree, int);\n+static tree build_zero_vector (tree);\n static tree fold_convert_const (enum tree_code, tree, tree);\n static enum tree_code invert_tree_comparison (enum tree_code, bool);\n static enum comparison_code comparison_to_compcode (enum tree_code);\n@@ -1677,6 +1678,23 @@ size_diffop (tree arg0, tree arg1)\n \t\t\t\t\t\t\targ1, arg0)));\n }\n \f\n+/* Construct a vector of zero elements of vector type TYPE.  */\n+\n+static tree\n+build_zero_vector (tree type)\n+{\n+  tree elem, list;\n+  int i, units;\n+\n+  elem = fold_convert_const (NOP_EXPR, TREE_TYPE (type), integer_zero_node);\n+  units = TYPE_VECTOR_SUBPARTS (type);\n+\n+  list = NULL_TREE;\n+  for (i = 0; i < units; i++)\n+    list = tree_cons (NULL_TREE, elem, list);\n+  return build_vector (type, list);\n+}\n+\n \n /* Attempt to fold type conversion operation CODE of expression ARG1 to\n    type TYPE.  If no simplification can be done return NULL_TREE.  */\n@@ -1940,6 +1958,8 @@ fold_convert (tree type, tree arg)\n \t}\n       \n     case VECTOR_TYPE:\n+      if (integer_zerop (arg))\n+\treturn build_zero_vector (type);\n       gcc_assert (tree_int_cst_equal (TYPE_SIZE (type), TYPE_SIZE (orig)));\n       gcc_assert (INTEGRAL_TYPE_P (orig) || POINTER_TYPE_P (orig)\n \t\t  || TREE_CODE (orig) == VECTOR_TYPE);"}, {"sha": "bf369b92f820a5ce9f5a72223c82184e16405eeb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/049e524f68be57df307f11ea9d3d28afdc37d7c3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/049e524f68be57df307f11ea9d3d28afdc37d7c3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=049e524f68be57df307f11ea9d3d28afdc37d7c3", "patch": "@@ -1,3 +1,8 @@\n+2004-09-09  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR middle-end/17055\n+\t* gcc.dg/pr17055-1.c: New test case.\n+\n 2004-09-09  Hans-Peter Nilsson  <hp@axis.com>\n \n \tPR target/17377"}, {"sha": "4c30973c1651db7d69a6bebf0c15fb7a3c4dda79", "filename": "gcc/testsuite/gcc.dg/pr17055-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/049e524f68be57df307f11ea9d3d28afdc37d7c3/gcc%2Ftestsuite%2Fgcc.dg%2Fpr17055-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/049e524f68be57df307f11ea9d3d28afdc37d7c3/gcc%2Ftestsuite%2Fgcc.dg%2Fpr17055-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr17055-1.c?ref=049e524f68be57df307f11ea9d3d28afdc37d7c3", "patch": "@@ -0,0 +1,24 @@\n+/* PR middle-end/17055.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ffast-math\" } */\n+\n+/* This test used to abort, beacuse we do an \"integer\" fold to zero, i.e.\n+   x - x = (T)0 where T is the type of x.  Unfortunately, fold_convert\n+   was unable to convert integer_zero_node to the appropriate vector type.  */\n+\n+typedef float v4sf __attribute__((vector_size(16)));\n+typedef int v4si __attribute__((vector_size(16)));\n+\n+v4sf ivf, ovf;\n+v4si ivi, ovi;\n+\n+void testf (void)\n+{\n+  ovf = ivf - ivf;\n+}\n+\n+void testi (void)\n+{\n+  ovi = ivi - ivi;\n+}\n+"}]}