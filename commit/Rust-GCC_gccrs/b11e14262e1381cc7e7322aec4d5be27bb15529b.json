{"sha": "b11e14262e1381cc7e7322aec4d5be27bb15529b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjExZTE0MjYyZTEzODFjYzdlNzMyMmFlYzRkNWJlMjdiYjE1NTI5Yg==", "commit": {"author": {"name": "Aaron Luchko", "email": "aluchko@redhat.com", "date": "2005-07-14T17:25:32Z"}, "committer": {"name": "Aaron Luchko", "email": "aluchko@gcc.gnu.org", "date": "2005-07-14T17:25:32Z"}, "message": "VirtualMachineCommandSet.java: Implemented VirtualMachine Command Set.\n\n        * gnu/classpath/jdwp/processor/VirtualMachineCommandSet.java:\n        Implemented VirtualMachine Command Set.\n\nFrom-SVN: r102026", "tree": {"sha": "7eeaee93126fd34d25b00ec8de352857ec5cca69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7eeaee93126fd34d25b00ec8de352857ec5cca69"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b11e14262e1381cc7e7322aec4d5be27bb15529b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b11e14262e1381cc7e7322aec4d5be27bb15529b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b11e14262e1381cc7e7322aec4d5be27bb15529b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b11e14262e1381cc7e7322aec4d5be27bb15529b/comments", "author": null, "committer": null, "parents": [{"sha": "9d5faaafe31ec7a7b78c9d4d3434efef5846bf83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d5faaafe31ec7a7b78c9d4d3434efef5846bf83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d5faaafe31ec7a7b78c9d4d3434efef5846bf83"}], "stats": {"total": 479, "additions": 479, "deletions": 0}, "files": [{"sha": "f26d6ea65050feda6ca4bd3f7654700b60028808", "filename": "libjava/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b11e14262e1381cc7e7322aec4d5be27bb15529b/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b11e14262e1381cc7e7322aec4d5be27bb15529b/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=b11e14262e1381cc7e7322aec4d5be27bb15529b", "patch": "@@ -1,3 +1,8 @@\n+2005-07-14  Aaron Luchko  <aluchko@redhat.com>\n+\n+\t* gnu/classpath/jdwp/processor/VirtualMachineCommandSet.java:\n+\tImplemented VirtualMachine Command Set.\n+\n 2005-07-14  Tom Tromey  <tromey@redhat.com>\n \n \t* java/lang/Class.java (getProtectionDomain): Merged javadoc from"}, {"sha": "32b987817276d356a86a4f5f7a4ccd911dda1b60", "filename": "libjava/gnu/classpath/jdwp/processor/VirtualMachineCommandSet.java", "status": "added", "additions": 474, "deletions": 0, "changes": 474, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b11e14262e1381cc7e7322aec4d5be27bb15529b/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FVirtualMachineCommandSet.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b11e14262e1381cc7e7322aec4d5be27bb15529b/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FVirtualMachineCommandSet.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FVirtualMachineCommandSet.java?ref=b11e14262e1381cc7e7322aec4d5be27bb15529b", "patch": "@@ -0,0 +1,474 @@\n+/* VirtualMachineCommandSet.java -- class to implement the VirtualMachine\n+   Command Set\n+   Copyright (C) 2005 Free Software Foundation\n+ \n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.classpath.jdwp.processor;\n+\n+import gnu.classpath.jdwp.IVirtualMachine;\n+import gnu.classpath.jdwp.Jdwp;\n+import gnu.classpath.jdwp.JdwpConstants;\n+import gnu.classpath.jdwp.exception.JdwpException;\n+import gnu.classpath.jdwp.exception.JdwpInternalErrorException;\n+import gnu.classpath.jdwp.exception.NotImplementedException;\n+import gnu.classpath.jdwp.id.IdManager;\n+import gnu.classpath.jdwp.id.ObjectId;\n+import gnu.classpath.jdwp.id.ReferenceTypeId;\n+import gnu.classpath.jdwp.util.JdwpString;\n+import gnu.classpath.jdwp.util.Signature;\n+\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.Properties;\n+\n+/**\n+ * A class representing the VirtualMachine Command Set.\n+ * \n+ * @author Aaron Luchko <aluchko@redhat.com>\n+ */\n+public class VirtualMachineCommandSet implements CommandSet\n+{\n+  // Our hook into the jvm\n+  private final IVirtualMachine vm = Jdwp.getIVirtualMachine();\n+\n+  // Manages all the different ids that are assigned by jdwp\n+  private final IdManager idMan = Jdwp.getIdManager();\n+\n+  // The Jdwp object\n+  private final Jdwp jdwp = Jdwp.getDefault();\n+\n+  public boolean runCommand(ByteBuffer bb, DataOutputStream os, byte command)\n+    throws JdwpException\n+  {\n+    boolean keepRunning = true;\n+    try\n+      {\n+        switch (command)\n+          {\n+          case JdwpConstants.CommandSet.VirtualMachine.VERSION:\n+            executeVersion(bb, os);\n+            break;\n+          case JdwpConstants.CommandSet.VirtualMachine.CLASSES_BY_SIGNATURE:\n+            executeClassesBySignature(bb, os);\n+            break;\n+          case JdwpConstants.CommandSet.VirtualMachine.ALL_CLASSES:\n+            executeAllClasses(bb, os);\n+            break;\n+          case JdwpConstants.CommandSet.VirtualMachine.ALL_THREADS:\n+            executeAllThreads(bb, os);\n+            break;\n+          case JdwpConstants.CommandSet.VirtualMachine.TOP_LEVEL_THREAD_GROUPS:\n+            executeTopLevelThreadGroups(bb, os);\n+            break;\n+          case JdwpConstants.CommandSet.VirtualMachine.IDSIZES:\n+            executeIDsizes(bb, os);\n+            break;\n+          case JdwpConstants.CommandSet.VirtualMachine.DISPOSE:\n+            keepRunning = false;\n+            executeDispose(bb, os);\n+            break;\n+          case JdwpConstants.CommandSet.VirtualMachine.SUSPEND:\n+            executeSuspend(bb, os);\n+            break;\n+          case JdwpConstants.CommandSet.VirtualMachine.RESUME:\n+            executeResume(bb, os);\n+            break;\n+          case JdwpConstants.CommandSet.VirtualMachine.EXIT:\n+            keepRunning = false;\n+            executeExit(bb, os);\n+            break;\n+          case JdwpConstants.CommandSet.VirtualMachine.CREATE_STRING:\n+            executeCreateString(bb, os);\n+            break;\n+          case JdwpConstants.CommandSet.VirtualMachine.CAPABILITIES:\n+            executeCapabilities(bb, os);\n+            break;\n+          case JdwpConstants.CommandSet.VirtualMachine.CLASS_PATHS:\n+            executeClassPaths(bb, os);\n+            break;\n+          case JdwpConstants.CommandSet.VirtualMachine.DISPOSE_OBJECTS:\n+            executeDisposeObjects(bb, os);\n+            break;\n+          case JdwpConstants.CommandSet.VirtualMachine.HOLD_EVENTS:\n+            executeHoldEvents(bb, os);\n+            break;\n+          case JdwpConstants.CommandSet.VirtualMachine.RELEASE_EVENTS:\n+            executeReleaseEvents(bb, os);\n+            break;\n+          case JdwpConstants.CommandSet.VirtualMachine.CAPABILITIES_NEW:\n+            executeCapabilitiesNew(bb, os);\n+            break;\n+          case JdwpConstants.CommandSet.VirtualMachine.REDEFINE_CLASSES:\n+            executeRedefineClasses(bb, os);\n+            break;\n+          case JdwpConstants.CommandSet.VirtualMachine.SET_DEFAULT_STRATUM:\n+            executeSetDefaultStratum(bb, os);\n+            break;\n+          case JdwpConstants.CommandSet.VirtualMachine.ALL_CLASSES_WITH_GENERIC:\n+            executeAllClassesWithGeneric(bb, os);\n+            break;\n+\n+          default:\n+            break;\n+          }\n+      }\n+    catch (IOException ex)\n+      {\n+        // The DataOutputStream we're using isn't talking to a socket at all\n+        // So if we throw an IOException we're in serious trouble\n+        throw new JdwpInternalErrorException(ex);\n+      }\n+    return keepRunning;\n+  }\n+\n+  private void executeVersion(ByteBuffer bb, DataOutputStream os)\n+    throws JdwpException, IOException\n+  {\n+\n+    Properties props = System.getProperties();\n+\n+    int jdwpMajor = JdwpConstants.Version.MAJOR;\n+    int jdwpMinor = JdwpConstants.Version.MINOR;\n+    // The description field is pretty loosely defined\n+    String description = \"JDWP version \" + jdwpMajor + \".\" + jdwpMinor\n+                         + \", JVM version \" + props.getProperty(\"java.vm.name\")\n+                         + \" \" + props.getProperty(\"java.vm.version\") + \" \"\n+                         + props.getProperty(\"java.version\");\n+    String vmVersion = props.getProperty(\"java.version\");\n+    String vmName = props.getProperty(\"java.vm.name\");\n+    JdwpString.writeString(os, description);\n+    os.write(jdwpMajor);\n+    os.write(jdwpMinor);\n+    JdwpString.writeString(os, vmName);\n+    JdwpString.writeString(os, vmVersion);\n+  }\n+\n+  private void executeClassesBySignature(ByteBuffer bb, DataOutputStream os)\n+    throws JdwpException, IOException\n+  {\n+    String sig = JdwpString.readString(bb);\n+    ArrayList allMatchingClasses = new ArrayList();\n+\n+    // This will be an Iterator over all loaded Classes\n+    Iterator iter = vm.getAllLoadedClasses();\n+\n+    while (iter.hasNext())\n+      {\n+        Class clazz = (Class) iter.next();\n+        String clazzSig = Signature.computeClassSignature(clazz);\n+        if (clazzSig.equals(sig))\n+          allMatchingClasses.add(clazz);\n+      }\n+\n+    os.writeInt(allMatchingClasses.size());\n+    for (int i = 0; i < allMatchingClasses.size(); i++)\n+      {\n+        Class clazz = (Class) allMatchingClasses.get(i);\n+        ReferenceTypeId id = idMan.getReferenceTypeId(clazz);\n+        id.writeTagged(os);\n+        int status = vm.getStatus(clazz);\n+        os.writeInt(status);\n+      }\n+  }\n+\n+  private void executeAllClasses(ByteBuffer bb, DataOutputStream os)\n+    throws JdwpException, IOException\n+  {\n+    // Disable garbage collection while we're collecting the info on loaded\n+    // classes so we some classes don't get collected between the time we get\n+    // the count and the time we get the list\n+    vm.disableGarbageCollection();\n+\n+    int classCount = vm.getAllLoadedClassesCount();\n+    os.writeInt(classCount);\n+\n+    // This will be an Iterator over all loaded Classes\n+    Iterator iter = vm.getAllLoadedClasses();\n+    vm.enableGarbageCollection();\n+    int count = 0;\n+\n+    // Note it's possible classes were created since out classCount so make\n+    // sure we don't write more classes than we told the debugger\n+    while (iter.hasNext() && count++ < classCount)\n+      {\n+        Class clazz = (Class) iter.next();\n+        ReferenceTypeId id = idMan.getReferenceTypeId(clazz);\n+        id.writeTagged(os);\n+        String sig = Signature.computeClassSignature(clazz);\n+        JdwpString.writeString(os, sig);\n+        int status = vm.getStatus(clazz);\n+        os.writeInt(status);\n+      }\n+  }\n+\n+  private void executeAllThreads(ByteBuffer bb, DataOutputStream os)\n+    throws JdwpException, IOException\n+  {\n+    ThreadGroup jdwpGroup = Thread.currentThread().getThreadGroup();\n+    ThreadGroup root = getRootThreadGroup(jdwpGroup);\n+\n+    int numThreads = root.activeCount();\n+    Thread allThreads[] = new Thread[numThreads];\n+    root.enumerate(allThreads, true);\n+\n+    // We need to loop through for the true count since some threads may have\n+    // been destroyed since we got\n+    // activeCount so those spots in the array will be null. As well we must\n+    // ignore any threads that belong to jdwp\n+    numThreads = 0;\n+    for (int i = 0; i < allThreads.length; i++)\n+      {\n+        Thread thread = allThreads[i];\n+        if (thread == null)\n+          break; // No threads after this point\n+        if (!thread.getThreadGroup().equals(jdwpGroup))\n+          numThreads++;\n+      }\n+\n+    os.writeInt(numThreads);\n+\n+    for (int i = 0; i < allThreads.length; i++)\n+      {\n+        Thread thread = allThreads[i];\n+        if (thread == null)\n+          break; // No threads after this point\n+        if (!thread.getThreadGroup().equals(jdwpGroup))\n+          idMan.getId(thread).write(os);\n+      }\n+  }\n+\n+  private void executeTopLevelThreadGroups(ByteBuffer bb, DataOutputStream os)\n+    throws JdwpException, IOException\n+  {\n+    ThreadGroup jdwpGroup = jdwp.getJdwpThreadGroup();\n+    ThreadGroup root = getRootThreadGroup(jdwpGroup);\n+\n+    os.writeInt(1); // Just one top level group allowed?\n+    idMan.getId(root);\n+  }\n+\n+  private void executeDispose(ByteBuffer bb, DataOutputStream os)\n+    throws JdwpException\n+  {\n+    // resumeAllThreads isn't sufficient as a thread may have been\n+    // suspended multiple times, we likely need a way to keep track of how many\n+    // times a thread has been suspended or else a stronger resume method for\n+    // this purpose\n+    // vm.resumeAllThreadsExcept(jdwp.getJdwpThreadGroup());\n+\n+    // Simply shutting down the jdwp layer will take care of the rest of the\n+    // shutdown other than disabling debugging in the VM\n+    // vm.disableDebugging();\n+\n+    // Don't implement this until we're sure how to remove all the debugging\n+    // effects from the VM.\n+    throw new NotImplementedException(\n+      \"Command VirtualMachine.Dispose not implemented\");\n+\n+  }\n+\n+  private void executeIDsizes(ByteBuffer bb, DataOutputStream os)\n+    throws JdwpException, IOException\n+  {\n+    ObjectId oid = new ObjectId();\n+    os.writeInt(oid.size()); // fieldId\n+    os.writeInt(oid.size()); // methodId\n+    os.writeInt(oid.size()); // objectId\n+    os.writeInt(new ReferenceTypeId((byte) 0x00).size()); // referenceTypeId\n+    os.writeInt(oid.size()); // frameId\n+  }\n+\n+  private void executeSuspend(ByteBuffer bb, DataOutputStream os)\n+    throws JdwpException\n+  {\n+    vm.suspendAllThreadsExcept(jdwp.getJdwpThreadGroup());\n+  }\n+\n+  private void executeResume(ByteBuffer bb, DataOutputStream os)\n+    throws JdwpException\n+  {\n+    vm.resumeAllThreadsExcept(jdwp.getJdwpThreadGroup());\n+  }\n+\n+  private void executeExit(ByteBuffer bb, DataOutputStream os)\n+    throws JdwpException, IOException\n+  {\n+    int exitCode = bb.getInt();\n+    jdwp.setExit(exitCode);\n+  }\n+\n+  private void executeCreateString(ByteBuffer bb, DataOutputStream os)\n+    throws JdwpException, IOException\n+  {\n+    String string = JdwpString.readString(bb);\n+    ObjectId stringId = Jdwp.getIdManager().getId(string);\n+    \n+    // Since this string isn't referenced anywhere we'll disable garbage\n+    // collection on it so it's still around when the debugger gets back to it.\n+    stringId.disableCollection();\n+    stringId.write(os);\n+  }\n+\n+  private void executeCapabilities(ByteBuffer bb, DataOutputStream os)\n+    throws JdwpException, IOException\n+  {\n+    // Store these somewhere?\n+    os.writeBoolean(false); // canWatchFieldModification\n+    os.writeBoolean(false); // canWatchFieldAccess\n+    os.writeBoolean(false); // canGetBytecodes\n+    os.writeBoolean(false); // canGetSyntheticAttribute\n+    os.writeBoolean(false); // canGetOwnedMonitorInfo\n+    os.writeBoolean(false); // canGetCurrentContendedMonitor\n+    os.writeBoolean(false); // canGetMonitorInfo\n+  }\n+\n+  private void executeClassPaths(ByteBuffer bb, DataOutputStream os)\n+    throws JdwpException, IOException\n+  {\n+    String baseDir = System.getProperty(\"user.dir\");\n+    JdwpString.writeString(os, baseDir);\n+\n+    // Find and write the classpath\n+    String classPath = System.getProperty(\"java.class.path\");\n+    String[] paths = classPath.split(\":\");\n+\n+    os.writeInt(paths.length);\n+    for (int i = 0; i < paths.length; i++)\n+      JdwpString.writeString(os, paths[i]);\n+\n+    // Now the bootpath\n+    String bootPath = System.getProperty(\"sun.boot.class.path\");\n+    paths = bootPath.split(\":\");\n+    os.writeInt(paths.length);\n+    for (int i = 0; i < paths.length; i++)\n+      JdwpString.writeString(os, paths[i]);\n+  }\n+\n+  private void executeDisposeObjects(ByteBuffer bb, DataOutputStream os)\n+    throws JdwpException\n+  {\n+    // Instead of going through the list of objects they give us it's probably\n+    // better just to find the garbage collected objects ourselves\n+    idMan.update();\n+  }\n+\n+  private void executeHoldEvents(ByteBuffer bb, DataOutputStream os)\n+    throws JdwpException\n+  {\n+    // Going to have to implement a send queue somewhere and do this without\n+    // triggering events\n+    // Until then just don't implement\n+    throw new NotImplementedException(\n+      \"Command VirtualMachine.HoldEvents not implemented\");\n+  }\n+\n+  // Opposite of executeHoldEvents\n+  private void executeReleaseEvents(ByteBuffer bb, DataOutputStream os)\n+    throws JdwpException\n+  {\n+    throw new NotImplementedException(\n+      \"Command VirtualMachine.ReleaseEvents not implemented\");\n+  }\n+\n+  private void executeCapabilitiesNew(ByteBuffer bb, DataOutputStream os)\n+    throws JdwpException, IOException\n+  {\n+    // Store these somewhere?\n+    final int CAPABILITIES_NEW_SIZE = 32;\n+    os.writeBoolean(false); // canWatchFieldModification\n+    os.writeBoolean(false); // canWatchFieldAccess\n+    os.writeBoolean(false); // canGetBytecodes\n+    os.writeBoolean(false); // canGetSyntheticAttribute\n+    os.writeBoolean(false); // canGetOwnedMonitorInfo\n+    os.writeBoolean(false); // canGetCurrentContendedMonitor\n+    os.writeBoolean(false); // canGetMonitorInfo\n+    os.writeBoolean(false); // canRedefineClasses\n+    os.writeBoolean(false); // canAddMethod\n+    os.writeBoolean(false); // canUnrestrictedlyRedefineClasses\n+    os.writeBoolean(false); // canPopFrames\n+    os.writeBoolean(false); // canUseInstanceFilters\n+    os.writeBoolean(false); // canGetSourceDebugExtension\n+    os.writeBoolean(false); // canRequestVMDeathEvent\n+    os.writeBoolean(false); // canSetDefaultStratum\n+    for (int i = 15; i < CAPABILITIES_NEW_SIZE; i++)\n+      // Future capabilities\n+      // currently unused\n+      os.writeBoolean(false); // Set to false\n+  }\n+\n+  private void executeRedefineClasses(ByteBuffer bb, DataOutputStream os)\n+    throws JdwpException\n+  {\n+    // Optional command, don't implement\n+    throw new NotImplementedException(\n+      \"Command VirtualMachine.RedefineClasses not implemented\");\n+  }\n+\n+  private void executeSetDefaultStratum(ByteBuffer bb, DataOutputStream os)\n+    throws JdwpException\n+  {\n+    // Optional command, don't implement\n+    throw new NotImplementedException(\n+      \"Command VirtualMachine.SetDefaultStratum not implemented\");\n+  }\n+\n+  private void executeAllClassesWithGeneric(ByteBuffer bb, DataOutputStream os)\n+    throws JdwpException\n+  {\n+    // We don't handle generics\n+    throw new NotImplementedException(\n+      \"Command VirtualMachine.AllClassesWithGeneric not implemented\");\n+  }\n+\n+  /**\n+   * Find the root ThreadGroup of this ThreadGroup\n+   */\n+  private ThreadGroup getRootThreadGroup(ThreadGroup group)\n+  {\n+    ThreadGroup parent = group.getParent();\n+\n+    while (parent != null)\n+      {\n+        group = parent;\n+        parent = group.getParent();\n+      }\n+    return group; // This group was the root\n+  }\n+}"}]}