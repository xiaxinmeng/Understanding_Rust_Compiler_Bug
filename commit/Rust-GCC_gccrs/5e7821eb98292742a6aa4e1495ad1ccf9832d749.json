{"sha": "5e7821eb98292742a6aa4e1495ad1ccf9832d749", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWU3ODIxZWI5ODI5Mjc0MmE2YWE0ZTE0OTVhZDFjY2Y5ODMyZDc0OQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2015-01-22T21:24:28Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2015-01-22T21:24:28Z"}, "message": "re PR target/52076 (bloated code for setting single bits in bitfields on m68k)\n\n\tPR target/52076\n\t* config/m68k/m68k.md (xorsi3_internal): Twiddle constraints to\n\timprove code density for small immediate to memory case.\n\t(insv): Better handle bitfield assignments when the field is\n\tbeing set to all ones.\n\t* config/m68k/predicates.md (reg_or_pow2_m1_operand): New\n\toperand predicate.\n\n\tPR target/52076\n\t* gcc.target/m68k/pr52076-1.c: New test.\n\t* gcc.target/m68k/pr52076-2.c: New test.\n\nFrom-SVN: r220015", "tree": {"sha": "5cc13a22d537751d7a1a6c2797a54801459e8957", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5cc13a22d537751d7a1a6c2797a54801459e8957"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e7821eb98292742a6aa4e1495ad1ccf9832d749", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e7821eb98292742a6aa4e1495ad1ccf9832d749", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e7821eb98292742a6aa4e1495ad1ccf9832d749", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e7821eb98292742a6aa4e1495ad1ccf9832d749/comments", "author": null, "committer": null, "parents": [{"sha": "33eaef4bf7f7b0650236c6ce2f5512344b3acbbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33eaef4bf7f7b0650236c6ce2f5512344b3acbbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33eaef4bf7f7b0650236c6ce2f5512344b3acbbf"}], "stats": {"total": 97, "additions": 92, "deletions": 5}, "files": [{"sha": "ae5e9a5c332e18f201d47aa0301252eded46538e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e7821eb98292742a6aa4e1495ad1ccf9832d749/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e7821eb98292742a6aa4e1495ad1ccf9832d749/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5e7821eb98292742a6aa4e1495ad1ccf9832d749", "patch": "@@ -1,3 +1,13 @@\n+2015-01-22  Jeff Law  <law@redhat.com>\n+\n+\tPR target/52076\n+\t* config/m68k/m68k.md (xorsi3_internal): Twiddle constraints to\n+\timprove code density for small immediate to memory case.\n+\t(insv): Better handle bitfield assignments when the field is\n+\tbeing set to all ones.\n+\t* config/m68k/predicates.md (reg_or_pow2_m1_operand): New\n+\toperand predicate.\n+\n 2015-01-22  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "36d768170c054a1662c5a1a953ec77e948e157bc", "filename": "gcc/config/m68k/.m68k.md.swp", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e7821eb98292742a6aa4e1495ad1ccf9832d749/gcc%2Fconfig%2Fm68k%2F.m68k.md.swp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e7821eb98292742a6aa4e1495ad1ccf9832d749/gcc%2Fconfig%2Fm68k%2F.m68k.md.swp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2F.m68k.md.swp?ref=5e7821eb98292742a6aa4e1495ad1ccf9832d749"}, {"sha": "6bb296e9e0d345b71815f8e719e46888c6df0ffb", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e7821eb98292742a6aa4e1495ad1ccf9832d749/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e7821eb98292742a6aa4e1495ad1ccf9832d749/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=5e7821eb98292742a6aa4e1495ad1ccf9832d749", "patch": "@@ -3838,9 +3838,9 @@\n   \"\")\n \n (define_insn \"xorsi3_internal\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=do,m\")\n-\t(xor:SI (match_operand:SI 1 \"general_operand\" \"%0,0\")\n-                (match_operand:SI 2 \"general_operand\" \"di,dKT\")))]\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=d,o,m\")\n+\t(xor:SI (match_operand:SI 1 \"general_operand\" \"%0, 0,0\")\n+                (match_operand:SI 2 \"general_operand\" \"di,dK,dKT\")))]\n \n   \"!TARGET_COLDFIRE\"\n {\n@@ -5583,9 +5583,20 @@\n   [(set (zero_extract:SI (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n \t\t\t (match_operand:SI 1 \"const_int_operand\" \"\")\n \t\t\t (match_operand:SI 2 \"const_int_operand\" \"\"))\n-\t(match_operand:SI 3 \"register_operand\" \"\"))]\n+\t(match_operand:SI 3 \"reg_or_pow2_m1_operand\" \"\"))]\n   \"TARGET_68020 && TARGET_BITFIELD\"\n-  \"\")\n+  \"\n+{\n+  /* Special case initializing a field to all ones. */\n+  if (GET_CODE (operands[3]) == CONST_INT)\n+    {\n+      if (exact_log2 (INTVAL (operands[3]) + 1) != INTVAL (operands[1]))\n+\toperands[3] = force_reg (SImode, operands[3]);\n+      else\n+\toperands[3] = constm1_rtx;\n+\n+    }\n+}\")\n \n (define_insn \"*insv_bfins_mem\"\n   [(set (zero_extract:SI (match_operand:QI 0 \"memory_operand\" \"+o\")"}, {"sha": "c652f1091286c682ddaa2fbfa617ccc6797973ac", "filename": "gcc/config/m68k/predicates.md", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e7821eb98292742a6aa4e1495ad1ccf9832d749/gcc%2Fconfig%2Fm68k%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e7821eb98292742a6aa4e1495ad1ccf9832d749/gcc%2Fconfig%2Fm68k%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fpredicates.md?ref=5e7821eb98292742a6aa4e1495ad1ccf9832d749", "patch": "@@ -244,3 +244,16 @@\n \t\t || reload_in_progress\n \t\t || reload_completed));\n })\n+\n+;; Used to detect when an operand is either a register\n+;; or a constant that is all ones in its lower bits.\n+;; Used by insv pattern to help detect when we're initializing\n+;; a bitfield to all ones.\n+\n+(define_predicate \"reg_or_pow2_m1_operand\"\n+  (match_code \"reg,const_int\")\n+{\n+  return (REG_P (op)\n+\t  || (GET_CODE (op) == CONST_INT\n+\t      && exact_log2 (INTVAL (op) + 1) >= 0));\n+})"}, {"sha": "1fc0241b994c7e750485675b1397650dc1cc4fee", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e7821eb98292742a6aa4e1495ad1ccf9832d749/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e7821eb98292742a6aa4e1495ad1ccf9832d749/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5e7821eb98292742a6aa4e1495ad1ccf9832d749", "patch": "@@ -1,3 +1,9 @@\n+2015-01-22  Jeff Law  <law@redhat.com>\n+\n+\tPR target/52076\n+\t* gcc.target/m68k/pr52076-1.c: New test.\n+\t* gcc.target/m68k/pr52076-2.c: New test.\n+\n 2015-01-22  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/64728"}, {"sha": "86df0dcae43f68107c22967b4fa7ef152955611e", "filename": "gcc/testsuite/gcc.target/m68k/pr52076-1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e7821eb98292742a6aa4e1495ad1ccf9832d749/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Fpr52076-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e7821eb98292742a6aa4e1495ad1ccf9832d749/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Fpr52076-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Fpr52076-1.c?ref=5e7821eb98292742a6aa4e1495ad1ccf9832d749", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do assemble } /*\n+/* { dg-options \"-Os -fomit-frame-pointer -m68040\" } */\n+/* { dg-final { object-size text <= 72 } } */\n+\n+struct kobject {\n+        unsigned int b7:1;\n+        unsigned int :6;\n+        unsigned int b0:1;\n+        unsigned char x;\n+        unsigned int f;\n+};\n+\n+void ior(struct kobject *kobj) { kobj->f |= 4; }\n+void ior_m(struct kobject *kobj) { kobj->f |= -4; }\n+\n+void xor(struct kobject *kobj) { kobj->f ^= 4; }\n+void xor_m(struct kobject *kobj) { kobj->f ^= -4; }\n+\n+void and(struct kobject *kobj) { kobj->f &= 4; }\n+void and_m(struct kobject *kobj) { kobj->f &= -4; }"}, {"sha": "30c6991839cce1157d49114d7856da506cf92bc0", "filename": "gcc/testsuite/gcc.target/m68k/pr52076-2.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e7821eb98292742a6aa4e1495ad1ccf9832d749/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Fpr52076-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e7821eb98292742a6aa4e1495ad1ccf9832d749/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Fpr52076-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Fpr52076-2.c?ref=5e7821eb98292742a6aa4e1495ad1ccf9832d749", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do assemble } /*\n+/* { dg-options \"-Os -fomit-frame-pointer -m68040\" } */\n+/* { dg-final { object-size text <= 30 } } */\n+\n+struct kobject {\n+        unsigned int b7:1;\n+        unsigned int b56:2;\n+        unsigned int b1234:4;\n+        unsigned int b0:1;\n+        unsigned char x;\n+        unsigned int f;\n+};\n+\n+void b7(struct kobject *kobj)\n+{\n+        kobj->b7 = 1;\n+}\n+\n+void b56(struct kobject *kobj)\n+{\n+        kobj->b56 = 3;\n+}\n+\n+void b1234(struct kobject *kobj)\n+{\n+        kobj->b1234 = 15;\n+}"}]}