{"sha": "694c956b6b877e48323cf86c90c09237b7b0e8c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njk0Yzk1NmI2Yjg3N2U0ODMyM2NmODZjOTBjMDkyMzdiN2IwZThjOA==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-04-17T12:26:33Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-04-26T13:42:50Z"}, "message": "Remove irange::varying_p checks from symbolic_p and constant_p.\n\nAs of a few releases ago, varying_p() ranges are also constant_p.\nConsequently, there is no need to check varying_p from either\nsymbolic_p or constant_p.\n\nI have adjusted a few users of constant_p that were depending on\nconstant_p returning false for varying_p.  In these cases, I have\nplaced the varying_p check before the constant_p check to avoid\nthe more expensive constant_p check when possible.\n\ngcc/ChangeLog:\n\n\t* gimple-ssa-evrp-analyze.c (evrp_range_analyzer::set_ssa_range_info):\n\tAdjust for constant_p including varying_p.\n\t* tree-vrp.c (vrp_prop::finalize): Same.\n\t(determine_value_range): Same.\n\t* vr-values.c (vr_values::range_of_expr): Same.\n\t* value-range.cc (irange::symbolic_p): Do not check varying_p.\n\t(irange::constant_p): Same.", "tree": {"sha": "2849f7af5081259c283a52c0af30ff724c0c28d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2849f7af5081259c283a52c0af30ff724c0c28d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/694c956b6b877e48323cf86c90c09237b7b0e8c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/694c956b6b877e48323cf86c90c09237b7b0e8c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/694c956b6b877e48323cf86c90c09237b7b0e8c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/694c956b6b877e48323cf86c90c09237b7b0e8c8/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "778032166d960d97541e652c59684d1187d0233c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/778032166d960d97541e652c59684d1187d0233c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/778032166d960d97541e652c59684d1187d0233c"}], "stats": {"total": 19, "additions": 7, "deletions": 12}, "files": [{"sha": "d78b6f8423cc01db234f68296c046f41e1e2184a", "filename": "gcc/gimple-ssa-evrp-analyze.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/694c956b6b877e48323cf86c90c09237b7b0e8c8/gcc%2Fgimple-ssa-evrp-analyze.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/694c956b6b877e48323cf86c90c09237b7b0e8c8/gcc%2Fgimple-ssa-evrp-analyze.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-evrp-analyze.c?ref=694c956b6b877e48323cf86c90c09237b7b0e8c8", "patch": "@@ -109,7 +109,7 @@ evrp_range_analyzer::set_ssa_range_info (tree lhs, value_range_equiv *vr)\n   /* Set the SSA with the value range.  */\n   if (INTEGRAL_TYPE_P (TREE_TYPE (lhs)))\n     {\n-      if (vr->constant_p ())\n+      if (!vr->varying_p () && vr->constant_p ())\n \tset_range_info (lhs, vr->kind (),\n \t\t\twi::to_wide (vr->min ()),\n \t\t\twi::to_wide (vr->max ()));"}, {"sha": "d968ef288ff23e1074f1bd305610b6f7f2276f66", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/694c956b6b877e48323cf86c90c09237b7b0e8c8/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/694c956b6b877e48323cf86c90c09237b7b0e8c8/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=694c956b6b877e48323cf86c90c09237b7b0e8c8", "patch": "@@ -4059,7 +4059,7 @@ vrp_prop::finalize ()\n \tcontinue;\n \n       const value_range_equiv *vr = m_vr_values->get_value_range (name);\n-      if (!name || !vr->constant_p ())\n+      if (!name || vr->varying_p () || !vr->constant_p ())\n \tcontinue;\n \n       if (POINTER_TYPE_P (TREE_TYPE (name))\n@@ -4679,7 +4679,7 @@ determine_value_range (tree expr, wide_int *min, wide_int *max)\n {\n   value_range vr;\n   determine_value_range_1 (&vr, expr);\n-  if (vr.constant_p ())\n+  if (!vr.varying_p () && vr.constant_p ())\n     {\n       *min = wi::to_wide (vr.min ());\n       *max = wi::to_wide (vr.max ());"}, {"sha": "f5ef4808530a3c727a5d5b70378444ccb1e0b8af", "filename": "gcc/value-range.cc", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/694c956b6b877e48323cf86c90c09237b7b0e8c8/gcc%2Fvalue-range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/694c956b6b877e48323cf86c90c09237b7b0e8c8/gcc%2Fvalue-range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range.cc?ref=694c956b6b877e48323cf86c90c09237b7b0e8c8", "patch": "@@ -534,22 +534,17 @@ irange::equal_p (const irange &other) const\n bool\n irange::symbolic_p () const\n {\n-  return (!varying_p ()\n-\t  && !undefined_p ()\n+  return (m_num_ranges > 0\n \t  && (!is_gimple_min_invariant (min ())\n \t      || !is_gimple_min_invariant (max ())));\n }\n \n-/* NOTE: This is not the inverse of symbolic_p because the range\n-   could also be varying or undefined.  Ideally they should be inverse\n-   of each other, with varying only applying to symbolics.  Varying of\n-   constants would be represented as [-MIN, +MAX].  */\n+/* Return TRUE if this is a constant range.  */\n \n bool\n irange::constant_p () const\n {\n-  return (!varying_p ()\n-\t  && !undefined_p ()\n+  return (m_num_ranges > 0\n \t  && TREE_CODE (min ()) == INTEGER_CST\n \t  && TREE_CODE (max ()) == INTEGER_CST);\n }"}, {"sha": "08b237b263203090f6db38f3229ff575646fc4ae", "filename": "gcc/vr-values.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/694c956b6b877e48323cf86c90c09237b7b0e8c8/gcc%2Fvr-values.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/694c956b6b877e48323cf86c90c09237b7b0e8c8/gcc%2Fvr-values.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvr-values.c?ref=694c956b6b877e48323cf86c90c09237b7b0e8c8", "patch": "@@ -182,7 +182,7 @@ vr_values::range_of_expr (irange &r, tree expr, gimple *stmt)\n \n   if (const value_range *vr = get_value_range (expr, stmt))\n     {\n-      if (vr->undefined_p () || vr->varying_p () || vr->constant_p ())\n+      if (vr->undefined_p () || vr->constant_p ())\n \tr = *vr;\n       else\n \t{"}]}