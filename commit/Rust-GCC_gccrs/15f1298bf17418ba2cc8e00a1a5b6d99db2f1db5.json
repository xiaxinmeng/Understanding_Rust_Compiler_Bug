{"sha": "15f1298bf17418ba2cc8e00a1a5b6d99db2f1db5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTVmMTI5OGJmMTc0MThiYTJjYzhlMDBhMWE1YjZkOTlkYjJmMWRiNQ==", "commit": {"author": {"name": "Anthony Green", "email": "green@redhat.com", "date": "2005-06-04T11:23:29Z"}, "committer": {"name": "Anthony Green", "email": "green@gcc.gnu.org", "date": "2005-06-04T11:23:29Z"}, "message": "URLClassLoader.java: import gnu.gcj.Core, and gnu.java.net.protocol.core.CoreInputStream.\n\n2005-06-04  Anthony Green  <green@redhat.com>\n\n        * java/net/URLClassLoader.java: import gnu.gcj.Core,\n        and gnu.java.net.protocol.core.CoreInputStream.\n        (CureURLLoader): New class.\n        (CoreResource): New class.\n        (addURLImpl): Add special treatment for the \"core\" protocol.\n        * gnu/gcj/natCore.cc (find): New method.\n        * gnu/gcj/Core.java (find): New method.\n\nFrom-SVN: r100582", "tree": {"sha": "bf4f231a611072a7ce526a6864c657158f490e6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf4f231a611072a7ce526a6864c657158f490e6c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15f1298bf17418ba2cc8e00a1a5b6d99db2f1db5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15f1298bf17418ba2cc8e00a1a5b6d99db2f1db5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15f1298bf17418ba2cc8e00a1a5b6d99db2f1db5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15f1298bf17418ba2cc8e00a1a5b6d99db2f1db5/comments", "author": {"login": "atgreen", "id": 89993, "node_id": "MDQ6VXNlcjg5OTkz", "avatar_url": "https://avatars.githubusercontent.com/u/89993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/atgreen", "html_url": "https://github.com/atgreen", "followers_url": "https://api.github.com/users/atgreen/followers", "following_url": "https://api.github.com/users/atgreen/following{/other_user}", "gists_url": "https://api.github.com/users/atgreen/gists{/gist_id}", "starred_url": "https://api.github.com/users/atgreen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/atgreen/subscriptions", "organizations_url": "https://api.github.com/users/atgreen/orgs", "repos_url": "https://api.github.com/users/atgreen/repos", "events_url": "https://api.github.com/users/atgreen/events{/privacy}", "received_events_url": "https://api.github.com/users/atgreen/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e0342c26d32711da67235f44ab63714d9cc14f4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0342c26d32711da67235f44ab63714d9cc14f4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0342c26d32711da67235f44ab63714d9cc14f4a"}], "stats": {"total": 85, "additions": 84, "deletions": 1}, "files": [{"sha": "0b18f79f5f5747e96e9624793ecc58d77be72a95", "filename": "libjava/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f1298bf17418ba2cc8e00a1a5b6d99db2f1db5/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f1298bf17418ba2cc8e00a1a5b6d99db2f1db5/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=15f1298bf17418ba2cc8e00a1a5b6d99db2f1db5", "patch": "@@ -1,3 +1,13 @@\n+2005-06-04  Anthony Green  <green@redhat.com>\n+\n+\t* java/net/URLClassLoader.java: import gnu.gcj.Core,\n+\tand gnu.java.net.protocol.core.CoreInputStream.\n+\t(CureURLLoader): New class.\n+\t(CoreResource): New class.\n+\t(addURLImpl): Add special treatment for the \"core\" protocol.\n+\t* gnu/gcj/natCore.cc (find): New method.\n+\t* gnu/gcj/Core.java (find): New method.\n+\n 2005-06-03  Keith Seitz  <keiths@redhat.com>\n \n \t* gnu/classpath/jdwp/transport/ITransport.java: New file."}, {"sha": "d3c358e10aa3a530935a93b7ac5c3067bfafe824", "filename": "libjava/gnu/gcj/Core.java", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f1298bf17418ba2cc8e00a1a5b6d99db2f1db5/libjava%2Fgnu%2Fgcj%2FCore.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f1298bf17418ba2cc8e00a1a5b6d99db2f1db5/libjava%2Fgnu%2Fgcj%2FCore.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2FCore.java?ref=15f1298bf17418ba2cc8e00a1a5b6d99db2f1db5", "patch": "@@ -12,6 +12,9 @@\n {\n   public native static Core create (String name) throws java.io.IOException;\n \n+  // Same as create, except returns null if not found.\n+  public native static Core find (String name);\n+\n   public RawData ptr;\n   public int length;\n "}, {"sha": "d084b25b581def5d357f61cfd1bcaeef38775af2", "filename": "libjava/gnu/gcj/natCore.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f1298bf17418ba2cc8e00a1a5b6d99db2f1db5/libjava%2Fgnu%2Fgcj%2FnatCore.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f1298bf17418ba2cc8e00a1a5b6d99db2f1db5/libjava%2Fgnu%2Fgcj%2FnatCore.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2FnatCore.cc?ref=15f1298bf17418ba2cc8e00a1a5b6d99db2f1db5", "patch": "@@ -103,6 +103,13 @@ _Jv_create_core (_Jv_core_chain *node, jstring name)\n   return core;\n }\n \n+gnu::gcj::Core *\n+gnu::gcj::Core::find (jstring name)\n+{\n+  gnu::gcj::Core *core = _Jv_create_core (root, name);\n+  return core;\n+}\n+\n gnu::gcj::Core *\n gnu::gcj::Core::create (jstring name)\n {"}, {"sha": "e0a9389b716e90f2c1183b99a62bae7ece75366a", "filename": "libjava/java/net/URLClassLoader.java", "status": "modified", "additions": 64, "deletions": 1, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f1298bf17418ba2cc8e00a1a5b6d99db2f1db5/libjava%2Fjava%2Fnet%2FURLClassLoader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f1298bf17418ba2cc8e00a1a5b6d99db2f1db5/libjava%2Fjava%2Fnet%2FURLClassLoader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURLClassLoader.java?ref=15f1298bf17418ba2cc8e00a1a5b6d99db2f1db5", "patch": "@@ -63,7 +63,8 @@\n import java.util.jar.JarFile;\n import java.util.jar.Manifest;\n import gnu.gcj.runtime.SharedLibHelper;\n-\n+import gnu.gcj.Core;\n+import gnu.java.net.protocol.core.CoreInputStream;\n \n /**\n  * A secure class loader that can load classes and resources from\n@@ -677,6 +678,66 @@ public URL getURL()\n     }\n   }\n \n+  /**\n+   * A <code>CoreURLLoader</code> is a type of <code>URLLoader</code>\n+   * only loading from core url.\n+   */\n+  static final class CoreURLLoader extends URLLoader\n+  {\n+    private String dir;\n+\n+    CoreURLLoader(URLClassLoader classloader, URL url)\n+    {\n+      super(classloader, url);\n+      dir = baseURL.getFile();\n+    }\n+\n+    /** get resource with the name \"name\" in the core url */\n+    Resource getResource(String name)\n+    {\n+      Core core = Core.find (dir + name);\n+      if (core != null)\n+        return new CoreResource(this, name, core);\n+      return null;\n+    }\n+  }\n+\n+  static final class CoreResource extends Resource\n+  {\n+    final Core core;\n+\n+    CoreResource(CoreURLLoader loader, String name, Core core)\n+    {\n+      super(loader, name);\n+      this.core = core;\n+    }\n+\n+    InputStream getInputStream() throws IOException\n+    {\n+      return new CoreInputStream(core);\n+    }\n+\n+    public int getLength()\n+    {\n+      return core.length;\n+    }\n+\n+    public URL getURL()\n+    {\n+      try\n+        {\n+          return new URL(loader.baseURL, name,\n+                         loader.classloader.getURLStreamHandler(\"core\"));\n+        }\n+      catch (MalformedURLException e)\n+        {\n+          InternalError ie = new InternalError();\n+          ie.initCause(e);\n+          throw ie;\n+        }\n+    }\n+  }\n+\n   // Constructors\n \n   /**\n@@ -842,6 +903,8 @@ else if (! (file.endsWith(\"/\") || file.endsWith(File.separator)))\n               loader = new JarURLLoader(this, newUrl);\n             else if (\"file\".equals(protocol))\n               loader = new FileURLLoader(this, newUrl);\n+\t    else if (\"core\".equals(protocol))\n+\t      loader = new CoreURLLoader(this, newUrl);\n             else\n               loader = new RemoteURLLoader(this, newUrl);\n "}]}