{"sha": "a827d9b1943e966713fbc5cd8f56722791f524aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTgyN2Q5YjE5NDNlOTY2NzEzZmJjNWNkOGY1NjcyMjc5MWY1MjRhYQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-09-11T20:47:39Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-09-11T20:47:39Z"}, "message": "Introduce LABEL_REF_LABEL\n\ngcc/ChangeLog:\n2014-09-11  David Malcolm  <dmalcolm@redhat.com>\n\n\t* rtl.h (LABEL_REF_LABEL): New macro.\n\n\t* alias.c (rtx_equal_for_memref_p): Use LABEL_REF_LABEL in place\n\tof XEXP (, 0), where we know that we have a LABEL_REF.\n\t* cfgbuild.c (make_edges): Likewise.\n\t(purge_dead_tablejump_edges): Likewise.\n\t* cfgexpand.c (convert_debug_memory_address): Likewise.\n\t* cfgrtl.c (patch_jump_insn): Likewise.\n\t* combine.c (distribute_notes): Likewise.\n\t* cse.c (hash_rtx_cb): Likewise.\n\t(exp_equiv_p): Likewise.\n\t(fold_rtx): Likewise.\n\t(check_for_label_ref): Likewise.\n\t* cselib.c (rtx_equal_for_cselib_1): Likewise.\n\t(cselib_hash_rtx): Likewise.\n\t* emit-rtl.c (mark_label_nuses): Likewise.\n\t* explow.c (convert_memory_address_addr_space): Likewise.\n\t* final.c (output_asm_label): Likewise.\n\t(output_addr_const): Likewise.\n\t* gcse.c (add_label_notes): Likewise.\n\t* genconfig.c (walk_insn_part): Likewise.\n\t* genrecog.c (validate_pattern): Likewise.\n\t* ifcvt.c (cond_exec_get_condition): Likewise.\n\t(noce_emit_store_flag): Likewise.\n\t(noce_get_alt_condition): Likewise.\n\t(noce_get_condition): Likewise.\n\t* jump.c (maybe_propagate_label_ref): Likewise.\n\t(mark_jump_label_1): Likewise.\n\t(redirect_exp_1): Likewise.\n\t(rtx_renumbered_equal_p): Likewise.\n\t* lra-constraints.c (operands_match_p): Likewise.\n\t* reload.c (operands_match_p): Likewise.\n\t(find_reloads): Likewise.\n\t* reload1.c (set_label_offsets): Likewise.\n\t* reorg.c (get_branch_condition): Likewise.\n\t* rtl.c (rtx_equal_p_cb): Likewise.\n\t(rtx_equal_p): Likewise.\n\t* rtlanal.c (reg_mentioned_p): Likewise.\n\t(rtx_referenced_p): Likewise.\n\t(get_condition): Likewise.\n\t* sched-vis.c (print_value): Likewise.\n\t* varasm.c (const_hash_1): Likewise.\n\t(compare_constant): Likewise.\n\t(const_rtx_hash_1): Likewise.\n\t(output_constant_pool_1): Likewise.\n\nFrom-SVN: r215190", "tree": {"sha": "99f089d03c5999d04f7bdff5d44e2a6ef6a2568b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99f089d03c5999d04f7bdff5d44e2a6ef6a2568b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a827d9b1943e966713fbc5cd8f56722791f524aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a827d9b1943e966713fbc5cd8f56722791f524aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a827d9b1943e966713fbc5cd8f56722791f524aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a827d9b1943e966713fbc5cd8f56722791f524aa/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e4fb6f093c1657d590e37f39f832652d133dcb3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4fb6f093c1657d590e37f39f832652d133dcb3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4fb6f093c1657d590e37f39f832652d133dcb3b"}], "stats": {"total": 190, "additions": 123, "deletions": 67}, "files": [{"sha": "c0498fac28744a5fe2f55d6a7d027a49f9a1d048", "filename": "gcc/ChangeLog", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a827d9b1943e966713fbc5cd8f56722791f524aa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a827d9b1943e966713fbc5cd8f56722791f524aa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a827d9b1943e966713fbc5cd8f56722791f524aa", "patch": "@@ -1,3 +1,51 @@\n+2014-09-11  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* rtl.h (LABEL_REF_LABEL): New macro.\n+\n+\t* alias.c (rtx_equal_for_memref_p): Use LABEL_REF_LABEL in place\n+\tof XEXP (, 0), where we know that we have a LABEL_REF.\n+\t* cfgbuild.c (make_edges): Likewise.\n+\t(purge_dead_tablejump_edges): Likewise.\n+\t* cfgexpand.c (convert_debug_memory_address): Likewise.\n+\t* cfgrtl.c (patch_jump_insn): Likewise.\n+\t* combine.c (distribute_notes): Likewise.\n+\t* cse.c (hash_rtx_cb): Likewise.\n+\t(exp_equiv_p): Likewise.\n+\t(fold_rtx): Likewise.\n+\t(check_for_label_ref): Likewise.\n+\t* cselib.c (rtx_equal_for_cselib_1): Likewise.\n+\t(cselib_hash_rtx): Likewise.\n+\t* emit-rtl.c (mark_label_nuses): Likewise.\n+\t* explow.c (convert_memory_address_addr_space): Likewise.\n+\t* final.c (output_asm_label): Likewise.\n+\t(output_addr_const): Likewise.\n+\t* gcse.c (add_label_notes): Likewise.\n+\t* genconfig.c (walk_insn_part): Likewise.\n+\t* genrecog.c (validate_pattern): Likewise.\n+\t* ifcvt.c (cond_exec_get_condition): Likewise.\n+\t(noce_emit_store_flag): Likewise.\n+\t(noce_get_alt_condition): Likewise.\n+\t(noce_get_condition): Likewise.\n+\t* jump.c (maybe_propagate_label_ref): Likewise.\n+\t(mark_jump_label_1): Likewise.\n+\t(redirect_exp_1): Likewise.\n+\t(rtx_renumbered_equal_p): Likewise.\n+\t* lra-constraints.c (operands_match_p): Likewise.\n+\t* reload.c (operands_match_p): Likewise.\n+\t(find_reloads): Likewise.\n+\t* reload1.c (set_label_offsets): Likewise.\n+\t* reorg.c (get_branch_condition): Likewise.\n+\t* rtl.c (rtx_equal_p_cb): Likewise.\n+\t(rtx_equal_p): Likewise.\n+\t* rtlanal.c (reg_mentioned_p): Likewise.\n+\t(rtx_referenced_p): Likewise.\n+\t(get_condition): Likewise.\n+\t* sched-vis.c (print_value): Likewise.\n+\t* varasm.c (const_hash_1): Likewise.\n+\t(compare_constant): Likewise.\n+\t(const_rtx_hash_1): Likewise.\n+\t(output_constant_pool_1): Likewise.\n+\n 2014-09-11  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/htm.md (tabort, tabortdc, tabortdci, tabortwc,"}, {"sha": "a098cb7fb70f3bf241deeaccab36119f3ad57f25", "filename": "gcc/alias.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a827d9b1943e966713fbc5cd8f56722791f524aa/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a827d9b1943e966713fbc5cd8f56722791f524aa/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=a827d9b1943e966713fbc5cd8f56722791f524aa", "patch": "@@ -1521,7 +1521,7 @@ rtx_equal_for_memref_p (const_rtx x, const_rtx y)\n       return REGNO (x) == REGNO (y);\n \n     case LABEL_REF:\n-      return XEXP (x, 0) == XEXP (y, 0);\n+      return LABEL_REF_LABEL (x) == LABEL_REF_LABEL (y);\n \n     case SYMBOL_REF:\n       return XSTR (x, 0) == XSTR (y, 0);"}, {"sha": "00dab3e72db2f4cd30466b2bbe67e60e3552e28e", "filename": "gcc/cfgbuild.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a827d9b1943e966713fbc5cd8f56722791f524aa/gcc%2Fcfgbuild.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a827d9b1943e966713fbc5cd8f56722791f524aa/gcc%2Fcfgbuild.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgbuild.c?ref=a827d9b1943e966713fbc5cd8f56722791f524aa", "patch": "@@ -277,7 +277,7 @@ make_edges (basic_block min, basic_block max, int update_p)\n \t\t  && GET_CODE (SET_SRC (tmp)) == IF_THEN_ELSE\n \t\t  && GET_CODE (XEXP (SET_SRC (tmp), 2)) == LABEL_REF)\n \t\tmake_label_edge (edge_cache, bb,\n-\t\t\t\t XEXP (XEXP (SET_SRC (tmp), 2), 0), 0);\n+\t\t\t\t LABEL_REF_LABEL (XEXP (SET_SRC (tmp), 2)), 0);\n \t    }\n \n \t  /* If this is a computed jump, then mark it as reaching\n@@ -415,7 +415,7 @@ purge_dead_tablejump_edges (basic_block bb, rtx_jump_table_data *table)\n        && SET_DEST (tmp) == pc_rtx\n        && GET_CODE (SET_SRC (tmp)) == IF_THEN_ELSE\n        && GET_CODE (XEXP (SET_SRC (tmp), 2)) == LABEL_REF)\n-    mark_tablejump_edge (XEXP (XEXP (SET_SRC (tmp), 2), 0));\n+    mark_tablejump_edge (LABEL_REF_LABEL (XEXP (SET_SRC (tmp), 2)));\n \n   for (ei = ei_start (bb->succs); (e = ei_safe_edge (ei)); )\n     {"}, {"sha": "f95981be6b6601dbdfc1b54d013b6b6ccb8beada", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a827d9b1943e966713fbc5cd8f56722791f524aa/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a827d9b1943e966713fbc5cd8f56722791f524aa/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=a827d9b1943e966713fbc5cd8f56722791f524aa", "patch": "@@ -3624,7 +3624,7 @@ convert_debug_memory_address (enum machine_mode mode, rtx x,\n \t    return SUBREG_REG (x);\n \t  break;\n \tcase LABEL_REF:\n-\t  temp = gen_rtx_LABEL_REF (mode, XEXP (x, 0));\n+\t  temp = gen_rtx_LABEL_REF (mode, LABEL_REF_LABEL (x));\n \t  LABEL_REF_NONLOCAL_P (temp) = LABEL_REF_NONLOCAL_P (x);\n \t  return temp;\n \tcase SYMBOL_REF:"}, {"sha": "04c7d63e117e6df97d3f5e4b05de6c2f1dfb4dcb", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a827d9b1943e966713fbc5cd8f56722791f524aa/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a827d9b1943e966713fbc5cd8f56722791f524aa/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=a827d9b1943e966713fbc5cd8f56722791f524aa", "patch": "@@ -1202,7 +1202,7 @@ patch_jump_insn (rtx_insn *insn, rtx_insn *old_label, basic_block new_bb)\n \t  && SET_DEST (tmp) == pc_rtx\n \t  && GET_CODE (SET_SRC (tmp)) == IF_THEN_ELSE\n \t  && GET_CODE (XEXP (SET_SRC (tmp), 2)) == LABEL_REF\n-\t  && XEXP (XEXP (SET_SRC (tmp), 2), 0) == old_label)\n+\t  && LABEL_REF_LABEL (XEXP (SET_SRC (tmp), 2)) == old_label)\n \t{\n \t  XEXP (SET_SRC (tmp), 2) = gen_rtx_LABEL_REF (Pmode,\n \t\t\t\t\t\t       new_label);"}, {"sha": "151e948ab7ae4ae2ec39ae71b77331e03f931882", "filename": "gcc/combine.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a827d9b1943e966713fbc5cd8f56722791f524aa/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a827d9b1943e966713fbc5cd8f56722791f524aa/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=a827d9b1943e966713fbc5cd8f56722791f524aa", "patch": "@@ -13403,14 +13403,14 @@ distribute_notes (rtx notes, rtx_insn *from_insn, rtx_insn *i3, rtx_insn *i2,\n \t  if (reg_mentioned_p (XEXP (note, 0), PATTERN (i3))\n \t      || ((tem_note = find_reg_note (i3, REG_EQUAL, NULL_RTX))\n \t\t  && GET_CODE (XEXP (tem_note, 0)) == LABEL_REF\n-\t\t  && XEXP (XEXP (tem_note, 0), 0) == XEXP (note, 0)))\n+\t\t  && LABEL_REF_LABEL (XEXP (tem_note, 0)) == XEXP (note, 0)))\n \t    place = i3;\n \n \t  if (i2\n \t      && (reg_mentioned_p (XEXP (note, 0), PATTERN (i2))\n \t\t  || ((tem_note = find_reg_note (i2, REG_EQUAL, NULL_RTX))\n \t\t      && GET_CODE (XEXP (tem_note, 0)) == LABEL_REF\n-\t\t      && XEXP (XEXP (tem_note, 0), 0) == XEXP (note, 0))))\n+\t\t      && LABEL_REF_LABEL (XEXP (tem_note, 0)) == XEXP (note, 0))))\n \t    {\n \t      if (place)\n \t\tplace2 = i2;"}, {"sha": "be2f31bc205526ae462c022bf94f3d17deda3ef0", "filename": "gcc/cse.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a827d9b1943e966713fbc5cd8f56722791f524aa/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a827d9b1943e966713fbc5cd8f56722791f524aa/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=a827d9b1943e966713fbc5cd8f56722791f524aa", "patch": "@@ -2349,7 +2349,7 @@ hash_rtx_cb (const_rtx x, enum machine_mode mode,\n       /* We don't hash on the address of the CODE_LABEL to avoid bootstrap\n \t differences and differences between each stage's debugging dumps.  */\n \t hash += (((unsigned int) LABEL_REF << 7)\n-\t\t  + CODE_LABEL_NUMBER (XEXP (x, 0)));\n+\t\t  + CODE_LABEL_NUMBER (LABEL_REF_LABEL (x)));\n       return hash;\n \n     case SYMBOL_REF:\n@@ -2602,7 +2602,7 @@ exp_equiv_p (const_rtx x, const_rtx y, int validate, bool for_gcse)\n       return x == y;\n \n     case LABEL_REF:\n-      return XEXP (x, 0) == XEXP (y, 0);\n+      return LABEL_REF_LABEL (x) == LABEL_REF_LABEL (y);\n \n     case SYMBOL_REF:\n       return XSTR (x, 0) == XSTR (y, 0);\n@@ -3486,15 +3486,15 @@ fold_rtx (rtx x, rtx_insn *insn)\n \t\t: lookup_as_function (folded_arg0, MINUS);\n \n \t      if (y != 0 && GET_CODE (XEXP (y, 1)) == LABEL_REF\n-\t\t  && XEXP (XEXP (y, 1), 0) == XEXP (const_arg1, 0))\n+\t\t  && LABEL_REF_LABEL (XEXP (y, 1)) == LABEL_REF_LABEL (const_arg1))\n \t\treturn XEXP (y, 0);\n \n \t      /* Now try for a CONST of a MINUS like the above.  */\n \t      if ((y = (GET_CODE (folded_arg0) == CONST ? folded_arg0\n \t\t\t: lookup_as_function (folded_arg0, CONST))) != 0\n \t\t  && GET_CODE (XEXP (y, 0)) == MINUS\n \t\t  && GET_CODE (XEXP (XEXP (y, 0), 1)) == LABEL_REF\n-\t\t  && XEXP (XEXP (XEXP (y, 0), 1), 0) == XEXP (const_arg1, 0))\n+\t\t  && LABEL_REF_LABEL (XEXP (XEXP (y, 0), 1)) == LABEL_REF_LABEL (const_arg1))\n \t\treturn XEXP (XEXP (y, 0), 0);\n \t    }\n \n@@ -3506,15 +3506,15 @@ fold_rtx (rtx x, rtx_insn *insn)\n \t\t: lookup_as_function (folded_arg1, MINUS);\n \n \t      if (y != 0 && GET_CODE (XEXP (y, 1)) == LABEL_REF\n-\t\t  && XEXP (XEXP (y, 1), 0) == XEXP (const_arg0, 0))\n+\t\t  && LABEL_REF_LABEL (XEXP (y, 1)) == LABEL_REF_LABEL (const_arg0))\n \t\treturn XEXP (y, 0);\n \n \t      /* Now try for a CONST of a MINUS like the above.  */\n \t      if ((y = (GET_CODE (folded_arg1) == CONST ? folded_arg1\n \t\t\t: lookup_as_function (folded_arg1, CONST))) != 0\n \t\t  && GET_CODE (XEXP (y, 0)) == MINUS\n \t\t  && GET_CODE (XEXP (XEXP (y, 0), 1)) == LABEL_REF\n-\t\t  && XEXP (XEXP (XEXP (y, 0), 1), 0) == XEXP (const_arg0, 0))\n+\t\t  && LABEL_REF_LABEL (XEXP (XEXP (y, 0), 1)) == LABEL_REF_LABEL (const_arg0))\n \t\treturn XEXP (XEXP (y, 0), 0);\n \t    }\n \n@@ -6374,10 +6374,10 @@ check_for_label_ref (rtx_insn *insn)\n       if (GET_CODE (x) == LABEL_REF\n \t  && !LABEL_REF_NONLOCAL_P (x)\n \t  && (!JUMP_P (insn)\n-\t      || !label_is_jump_target_p (XEXP (x, 0), insn))\n-\t  && LABEL_P (XEXP (x, 0))\n-\t  && INSN_UID (XEXP (x, 0)) != 0\n-\t  && !find_reg_note (insn, REG_LABEL_OPERAND, XEXP (x, 0)))\n+\t      || !label_is_jump_target_p (LABEL_REF_LABEL (x), insn))\n+\t  && LABEL_P (LABEL_REF_LABEL (x))\n+\t  && INSN_UID (LABEL_REF_LABEL (x)) != 0\n+\t  && !find_reg_note (insn, REG_LABEL_OPERAND, LABEL_REF_LABEL (x)))\n \treturn true;\n     }\n   return false;"}, {"sha": "d06a1d56d2abcb41c1b0a63c13f3523638362d68", "filename": "gcc/cselib.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a827d9b1943e966713fbc5cd8f56722791f524aa/gcc%2Fcselib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a827d9b1943e966713fbc5cd8f56722791f524aa/gcc%2Fcselib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcselib.c?ref=a827d9b1943e966713fbc5cd8f56722791f524aa", "patch": "@@ -961,7 +961,7 @@ rtx_equal_for_cselib_1 (rtx x, rtx y, enum machine_mode memmode)\n       return rtx_equal_p (ENTRY_VALUE_EXP (x), ENTRY_VALUE_EXP (y));\n \n     case LABEL_REF:\n-      return XEXP (x, 0) == XEXP (y, 0);\n+      return LABEL_REF_LABEL (x) == LABEL_REF_LABEL (y);\n \n     case MEM:\n       /* We have to compare any autoinc operations in the addresses\n@@ -1167,7 +1167,7 @@ cselib_hash_rtx (rtx x, int create, enum machine_mode memmode)\n       /* We don't hash on the address of the CODE_LABEL to avoid bootstrap\n \t differences and differences between each stage's debugging dumps.  */\n       hash += (((unsigned int) LABEL_REF << 7)\n-\t       + CODE_LABEL_NUMBER (XEXP (x, 0)));\n+\t       + CODE_LABEL_NUMBER (LABEL_REF_LABEL (x)));\n       return hash ? hash : (unsigned int) LABEL_REF;\n \n     case SYMBOL_REF:"}, {"sha": "99cd2094ed37fd5984a39494c31316f0ad6e90c7", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a827d9b1943e966713fbc5cd8f56722791f524aa/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a827d9b1943e966713fbc5cd8f56722791f524aa/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=a827d9b1943e966713fbc5cd8f56722791f524aa", "patch": "@@ -3584,8 +3584,8 @@ mark_label_nuses (rtx x)\n   const char *fmt;\n \n   code = GET_CODE (x);\n-  if (code == LABEL_REF && LABEL_P (XEXP (x, 0)))\n-    LABEL_NUSES (XEXP (x, 0))++;\n+  if (code == LABEL_REF && LABEL_P (LABEL_REF_LABEL (x)))\n+    LABEL_NUSES (LABEL_REF_LABEL (x))++;\n \n   fmt = GET_RTX_FORMAT (code);\n   for (i = GET_RTX_LENGTH (code) - 1; i >= 0; i--)"}, {"sha": "8470691d779604cb8bbb0a056348d4ff9b3287de", "filename": "gcc/explow.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a827d9b1943e966713fbc5cd8f56722791f524aa/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a827d9b1943e966713fbc5cd8f56722791f524aa/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=a827d9b1943e966713fbc5cd8f56722791f524aa", "patch": "@@ -357,7 +357,7 @@ convert_memory_address_addr_space (enum machine_mode to_mode ATTRIBUTE_UNUSED,\n       break;\n \n     case LABEL_REF:\n-      temp = gen_rtx_LABEL_REF (to_mode, XEXP (x, 0));\n+      temp = gen_rtx_LABEL_REF (to_mode, LABEL_REF_LABEL (x));\n       LABEL_REF_NONLOCAL_P (temp) = LABEL_REF_NONLOCAL_P (x);\n       return temp;\n       break;"}, {"sha": "1b50e74bbf0b39dd1a5b7015b41ce75eac4da46c", "filename": "gcc/final.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a827d9b1943e966713fbc5cd8f56722791f524aa/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a827d9b1943e966713fbc5cd8f56722791f524aa/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=a827d9b1943e966713fbc5cd8f56722791f524aa", "patch": "@@ -3802,7 +3802,7 @@ output_asm_label (rtx x)\n   char buf[256];\n \n   if (GET_CODE (x) == LABEL_REF)\n-    x = XEXP (x, 0);\n+    x = LABEL_REF_LABEL (x);\n   if (LABEL_P (x)\n       || (NOTE_P (x)\n \t  && NOTE_KIND (x) == NOTE_INSN_DELETED_LABEL))\n@@ -3892,7 +3892,7 @@ output_addr_const (FILE *file, rtx x)\n       break;\n \n     case LABEL_REF:\n-      x = XEXP (x, 0);\n+      x = LABEL_REF_LABEL (x);\n       /* Fall through.  */\n     case CODE_LABEL:\n       ASM_GENERATE_INTERNAL_LABEL (buf, \"L\", CODE_LABEL_NUMBER (x));"}, {"sha": "15d026b2a56aa684a58ac8531218df819193ddb4", "filename": "gcc/gcse.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a827d9b1943e966713fbc5cd8f56722791f524aa/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a827d9b1943e966713fbc5cd8f56722791f524aa/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=a827d9b1943e966713fbc5cd8f56722791f524aa", "patch": "@@ -2816,10 +2816,10 @@ add_label_notes (rtx x, rtx insn)\n \t such a LABEL_REF, so we don't have to handle REG_LABEL_TARGET\n \t notes.  */\n       gcc_assert (!JUMP_P (insn));\n-      add_reg_note (insn, REG_LABEL_OPERAND, XEXP (x, 0));\n+      add_reg_note (insn, REG_LABEL_OPERAND, LABEL_REF_LABEL (x));\n \n-      if (LABEL_P (XEXP (x, 0)))\n-\tLABEL_NUSES (XEXP (x, 0))++;\n+      if (LABEL_P (LABEL_REF_LABEL (x)))\n+\tLABEL_NUSES (LABEL_REF_LABEL (x))++;\n \n       return;\n     }"}, {"sha": "ae08d1e21ff3a4c690eaf74350e3c2ba0c2f6e13", "filename": "gcc/genconfig.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a827d9b1943e966713fbc5cd8f56722791f524aa/gcc%2Fgenconfig.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a827d9b1943e966713fbc5cd8f56722791f524aa/gcc%2Fgenconfig.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenconfig.c?ref=a827d9b1943e966713fbc5cd8f56722791f524aa", "patch": "@@ -98,8 +98,8 @@ walk_insn_part (rtx part, int recog_p, int non_pc_set_src)\n       break;\n \n     case LABEL_REF:\n-      if (GET_CODE (XEXP (part, 0)) == MATCH_OPERAND\n-\t  || GET_CODE (XEXP (part, 0)) == MATCH_DUP)\n+      if (GET_CODE (LABEL_REF_LABEL (part)) == MATCH_OPERAND\n+\t  || GET_CODE (LABEL_REF_LABEL (part)) == MATCH_DUP)\n \tbreak;\n       return;\n "}, {"sha": "dbdefb07d19d093553afbdb98fb84f695c7f193c", "filename": "gcc/genrecog.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a827d9b1943e966713fbc5cd8f56722791f524aa/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a827d9b1943e966713fbc5cd8f56722791f524aa/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=a827d9b1943e966713fbc5cd8f56722791f524aa", "patch": "@@ -617,10 +617,10 @@ validate_pattern (rtx pattern, rtx insn, rtx set, int set_code)\n       return;\n \n     case LABEL_REF:\n-      if (GET_MODE (XEXP (pattern, 0)) != VOIDmode)\n+      if (GET_MODE (LABEL_REF_LABEL (pattern)) != VOIDmode)\n \terror_with_line (pattern_lineno,\n \t\t\t \"operand to label_ref %smode not VOIDmode\",\n-\t\t\t GET_MODE_NAME (GET_MODE (XEXP (pattern, 0))));\n+\t\t\t GET_MODE_NAME (GET_MODE (LABEL_REF_LABEL (pattern))));\n       break;\n \n     default:"}, {"sha": "6bcc23afc10643c0405bf1b2fd251cd358cfd2b8", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a827d9b1943e966713fbc5cd8f56722791f524aa/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a827d9b1943e966713fbc5cd8f56722791f524aa/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=a827d9b1943e966713fbc5cd8f56722791f524aa", "patch": "@@ -443,7 +443,7 @@ cond_exec_get_condition (rtx_insn *jump)\n   /* If this branches to JUMP_LABEL when the condition is false,\n      reverse the condition.  */\n   if (GET_CODE (XEXP (test_if, 2)) == LABEL_REF\n-      && XEXP (XEXP (test_if, 2), 0) == JUMP_LABEL (jump))\n+      && LABEL_REF_LABEL (XEXP (test_if, 2)) == JUMP_LABEL (jump))\n     {\n       enum rtx_code rev = reversed_comparison_code (cond, jump);\n       if (rev == UNKNOWN)\n@@ -847,7 +847,7 @@ noce_emit_store_flag (struct noce_if_info *if_info, rtx x, int reversep,\n       rtx set = pc_set (if_info->jump);\n       cond = XEXP (SET_SRC (set), 0);\n       if (GET_CODE (XEXP (SET_SRC (set), 2)) == LABEL_REF\n-\t  && XEXP (XEXP (SET_SRC (set), 2), 0) == JUMP_LABEL (if_info->jump))\n+\t  && LABEL_REF_LABEL (XEXP (SET_SRC (set), 2)) == JUMP_LABEL (if_info->jump))\n \treversep = !reversep;\n       if (if_info->then_else_reversed)\n \treversep = !reversep;\n@@ -1777,7 +1777,7 @@ noce_get_alt_condition (struct noce_if_info *if_info, rtx target,\n   cond = XEXP (SET_SRC (set), 0);\n   reverse\n     = GET_CODE (XEXP (SET_SRC (set), 2)) == LABEL_REF\n-      && XEXP (XEXP (SET_SRC (set), 2), 0) == JUMP_LABEL (if_info->jump);\n+      && LABEL_REF_LABEL (XEXP (SET_SRC (set), 2)) == JUMP_LABEL (if_info->jump);\n   if (if_info->then_else_reversed)\n     reverse = !reverse;\n \n@@ -2351,7 +2351,7 @@ noce_get_condition (rtx_insn *jump, rtx_insn **earliest, bool then_else_reversed\n   /* If this branches to JUMP_LABEL when the condition is false,\n      reverse the condition.  */\n   reverse = (GET_CODE (XEXP (SET_SRC (set), 2)) == LABEL_REF\n-\t     && XEXP (XEXP (SET_SRC (set), 2), 0) == JUMP_LABEL (jump));\n+\t     && LABEL_REF_LABEL (XEXP (SET_SRC (set), 2)) == JUMP_LABEL (jump));\n \n   /* We may have to reverse because the caller's if block is not canonical,\n      i.e. the THEN block isn't the fallthrough block for the TEST block"}, {"sha": "34466b693e7d788cf0866ad23d9961a7dfa3abd8", "filename": "gcc/jump.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a827d9b1943e966713fbc5cd8f56722791f524aa/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a827d9b1943e966713fbc5cd8f56722791f524aa/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=a827d9b1943e966713fbc5cd8f56722791f524aa", "patch": "@@ -264,7 +264,7 @@ maybe_propagate_label_ref (rtx_insn *jump_insn, rtx_insn *prev_nonjump_insn)\n \t     CODE_LABEL in the LABEL_REF of the \"set\".  We can\n \t     conveniently use it for the marker function, which\n \t     requires a LABEL_REF wrapping.  */\n-\t  gcc_assert (XEXP (label_note, 0) == XEXP (SET_SRC (label_set), 0));\n+\t  gcc_assert (XEXP (label_note, 0) == LABEL_REF_LABEL (SET_SRC (label_set)));\n \n \t  mark_jump_label_1 (label_set, jump_insn, false, true);\n \n@@ -1141,7 +1141,7 @@ mark_jump_label_1 (rtx x, rtx insn, bool in_mem, bool is_target)\n \n     case LABEL_REF:\n       {\n-\trtx label = XEXP (x, 0);\n+\trtx label = LABEL_REF_LABEL (x);\n \n \t/* Ignore remaining references to unreachable labels that\n \t   have been deleted.  */\n@@ -1155,7 +1155,7 @@ mark_jump_label_1 (rtx x, rtx insn, bool in_mem, bool is_target)\n \tif (LABEL_REF_NONLOCAL_P (x))\n \t  break;\n \n-\tXEXP (x, 0) = label;\n+\tLABEL_REF_LABEL (x) = label;\n \tif (! insn || ! INSN_DELETED_P (insn))\n \t  ++LABEL_NUSES (label);\n \n@@ -1454,7 +1454,7 @@ redirect_exp_1 (rtx *loc, rtx olabel, rtx nlabel, rtx insn)\n   int i;\n   const char *fmt;\n \n-  if ((code == LABEL_REF && XEXP (x, 0) == olabel)\n+  if ((code == LABEL_REF && LABEL_REF_LABEL (x) == olabel)\n       || x == olabel)\n     {\n       x = redirect_target (nlabel);\n@@ -1467,7 +1467,7 @@ redirect_exp_1 (rtx *loc, rtx olabel, rtx nlabel, rtx insn)\n   if (code == SET && SET_DEST (x) == pc_rtx\n       && ANY_RETURN_P (nlabel)\n       && GET_CODE (SET_SRC (x)) == LABEL_REF\n-      && XEXP (SET_SRC (x), 0) == olabel)\n+      && LABEL_REF_LABEL (SET_SRC (x)) == olabel)\n     {\n       validate_change (insn, loc, nlabel, 1);\n       return;\n@@ -1791,12 +1791,12 @@ rtx_renumbered_equal_p (const_rtx x, const_rtx y)\n     case LABEL_REF:\n       /* We can't assume nonlocal labels have their following insns yet.  */\n       if (LABEL_REF_NONLOCAL_P (x) || LABEL_REF_NONLOCAL_P (y))\n-\treturn XEXP (x, 0) == XEXP (y, 0);\n+\treturn LABEL_REF_LABEL (x) == LABEL_REF_LABEL (y);\n \n       /* Two label-refs are equivalent if they point at labels\n \t in the same position in the instruction stream.  */\n-      return (next_real_insn (XEXP (x, 0))\n-\t      == next_real_insn (XEXP (y, 0)));\n+      return (next_real_insn (LABEL_REF_LABEL (x))\n+\t      == next_real_insn (LABEL_REF_LABEL (y)));\n \n     case SYMBOL_REF:\n       return XSTR (x, 0) == XSTR (y, 0);"}, {"sha": "5f6839968d65ae928f34f66769a270aa1707864e", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a827d9b1943e966713fbc5cd8f56722791f524aa/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a827d9b1943e966713fbc5cd8f56722791f524aa/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=a827d9b1943e966713fbc5cd8f56722791f524aa", "patch": "@@ -735,7 +735,7 @@ operands_match_p (rtx x, rtx y, int y_hard_regno)\n       return false;\n \n     case LABEL_REF:\n-      return XEXP (x, 0) == XEXP (y, 0);\n+      return LABEL_REF_LABEL (x) == LABEL_REF_LABEL (y);\n     case SYMBOL_REF:\n       return XSTR (x, 0) == XSTR (y, 0);\n "}, {"sha": "3e563d0041c8edf12c34c9edbb55e3f3c0b53b3a", "filename": "gcc/reload.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a827d9b1943e966713fbc5cd8f56722791f524aa/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a827d9b1943e966713fbc5cd8f56722791f524aa/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=a827d9b1943e966713fbc5cd8f56722791f524aa", "patch": "@@ -2321,7 +2321,7 @@ operands_match_p (rtx x, rtx y)\n       return 0;\n \n     case LABEL_REF:\n-      return XEXP (x, 0) == XEXP (y, 0);\n+      return LABEL_REF_LABEL (x) == LABEL_REF_LABEL (y);\n     case SYMBOL_REF:\n       return XSTR (x, 0) == XSTR (y, 0);\n \n@@ -4221,16 +4221,17 @@ find_reloads (rtx_insn *insn, int replace, int ind_levels, int live_known,\n \t     this instruction.  */\n \t  if (GET_CODE (substitution) == LABEL_REF\n \t      && !find_reg_note (insn, REG_LABEL_OPERAND,\n-\t\t\t\t XEXP (substitution, 0))\n+\t\t\t\t LABEL_REF_LABEL (substitution))\n \t      /* For a JUMP_P, if it was a branch target it must have\n \t\t already been recorded as such.  */\n \t      && (!JUMP_P (insn)\n-\t\t  || !label_is_jump_target_p (XEXP (substitution, 0),\n+\t\t  || !label_is_jump_target_p (LABEL_REF_LABEL (substitution),\n \t\t\t\t\t      insn)))\n \t    {\n-\t      add_reg_note (insn, REG_LABEL_OPERAND, XEXP (substitution, 0));\n-\t      if (LABEL_P (XEXP (substitution, 0)))\n-\t\t++LABEL_NUSES (XEXP (substitution, 0));\n+\t      add_reg_note (insn, REG_LABEL_OPERAND,\n+\t\t\t    LABEL_REF_LABEL (substitution));\n+\t      if (LABEL_P (LABEL_REF_LABEL (substitution)))\n+\t\t++LABEL_NUSES (LABEL_REF_LABEL (substitution));\n \t    }\n \n \t}"}, {"sha": "3f3541a8903133ac8d1061b8d07c5071ef927619", "filename": "gcc/reload1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a827d9b1943e966713fbc5cd8f56722791f524aa/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a827d9b1943e966713fbc5cd8f56722791f524aa/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=a827d9b1943e966713fbc5cd8f56722791f524aa", "patch": "@@ -2358,7 +2358,7 @@ set_label_offsets (rtx x, rtx_insn *insn, int initial_p)\n       if (LABEL_REF_NONLOCAL_P (x))\n \treturn;\n \n-      x = XEXP (x, 0);\n+      x = LABEL_REF_LABEL (x);\n \n       /* ... fall through ...  */\n \n@@ -2460,13 +2460,13 @@ set_label_offsets (rtx x, rtx_insn *insn, int initial_p)\n \tcase IF_THEN_ELSE:\n \t  tem = XEXP (SET_SRC (x), 1);\n \t  if (GET_CODE (tem) == LABEL_REF)\n-\t    set_label_offsets (XEXP (tem, 0), insn, initial_p);\n+\t    set_label_offsets (LABEL_REF_LABEL (tem), insn, initial_p);\n \t  else if (GET_CODE (tem) != PC && GET_CODE (tem) != RETURN)\n \t    break;\n \n \t  tem = XEXP (SET_SRC (x), 2);\n \t  if (GET_CODE (tem) == LABEL_REF)\n-\t    set_label_offsets (XEXP (tem, 0), insn, initial_p);\n+\t    set_label_offsets (LABEL_REF_LABEL (tem), insn, initial_p);\n \t  else if (GET_CODE (tem) != PC && GET_CODE (tem) != RETURN)\n \t    break;\n \t  return;"}, {"sha": "28401dda849994e2848b12ff8982dddd4f67a593", "filename": "gcc/reorg.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a827d9b1943e966713fbc5cd8f56722791f524aa/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a827d9b1943e966713fbc5cd8f56722791f524aa/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=a827d9b1943e966713fbc5cd8f56722791f524aa", "patch": "@@ -923,20 +923,20 @@ get_branch_condition (const rtx_insn *insn, rtx target)\n     return 0;\n \n   src = SET_SRC (pat);\n-  if (GET_CODE (src) == LABEL_REF && XEXP (src, 0) == target)\n+  if (GET_CODE (src) == LABEL_REF && LABEL_REF_LABEL (src) == target)\n     return const_true_rtx;\n \n   else if (GET_CODE (src) == IF_THEN_ELSE\n \t   && XEXP (src, 2) == pc_rtx\n \t   && ((GET_CODE (XEXP (src, 1)) == LABEL_REF\n-\t        && XEXP (XEXP (src, 1), 0) == target)\n+\t        && LABEL_REF_LABEL (XEXP (src, 1)) == target)\n \t       || (ANY_RETURN_P (XEXP (src, 1)) && XEXP (src, 1) == target)))\n     return XEXP (src, 0);\n \n   else if (GET_CODE (src) == IF_THEN_ELSE\n \t   && XEXP (src, 1) == pc_rtx\n \t   && ((GET_CODE (XEXP (src, 2)) == LABEL_REF\n-\t\t&& XEXP (XEXP (src, 2), 0) == target)\n+\t\t&& LABEL_REF_LABEL (XEXP (src, 2)) == target)\n \t       || (ANY_RETURN_P (XEXP (src, 2)) && XEXP (src, 2) == target)))\n     {\n       enum rtx_code rev;"}, {"sha": "c61c365ee039a24a3db8f2983ab8f8c641114b6b", "filename": "gcc/rtl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a827d9b1943e966713fbc5cd8f56722791f524aa/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a827d9b1943e966713fbc5cd8f56722791f524aa/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=a827d9b1943e966713fbc5cd8f56722791f524aa", "patch": "@@ -422,7 +422,7 @@ rtx_equal_p_cb (const_rtx x, const_rtx y, rtx_equal_p_callback_function cb)\n       return (REGNO (x) == REGNO (y));\n \n     case LABEL_REF:\n-      return XEXP (x, 0) == XEXP (y, 0);\n+      return LABEL_REF_LABEL (x) == LABEL_REF_LABEL (y);\n \n     case SYMBOL_REF:\n       return XSTR (x, 0) == XSTR (y, 0);\n@@ -559,7 +559,7 @@ rtx_equal_p (const_rtx x, const_rtx y)\n       return (REGNO (x) == REGNO (y));\n \n     case LABEL_REF:\n-      return XEXP (x, 0) == XEXP (y, 0);\n+      return LABEL_REF_LABEL (x) == LABEL_REF_LABEL (y);\n \n     case SYMBOL_REF:\n       return XSTR (x, 0) == XSTR (y, 0);"}, {"sha": "aaca3dcff5c33caedc3a054a56a469116410d40a", "filename": "gcc/rtl.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a827d9b1943e966713fbc5cd8f56722791f524aa/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a827d9b1943e966713fbc5cd8f56722791f524aa/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=a827d9b1943e966713fbc5cd8f56722791f524aa", "patch": "@@ -1673,6 +1673,10 @@ inline rtx_insn *JUMP_LABEL_AS_INSN (const rtx_insn *insn)\n    goes through all the LABEL_REFs that jump to that label.  The chain\n    eventually winds up at the CODE_LABEL: it is circular.  */\n #define LABEL_REFS(LABEL) XCEXP (LABEL, 3, CODE_LABEL)\n+\n+/* Get the label that a LABEL_REF references.  */\n+#define LABEL_REF_LABEL(LABREF) XCEXP (LABREF, 0, LABEL_REF)\n+\n \f\n /* For a REG rtx, REGNO extracts the register number.  REGNO can only\n    be used on RHS.  Use SET_REGNO to change the value.  */"}, {"sha": "299b8162f5cc3b06e7ff5732f0105e3008b7ee22", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a827d9b1943e966713fbc5cd8f56722791f524aa/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a827d9b1943e966713fbc5cd8f56722791f524aa/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=a827d9b1943e966713fbc5cd8f56722791f524aa", "patch": "@@ -785,7 +785,7 @@ reg_mentioned_p (const_rtx reg, const_rtx in)\n     return 1;\n \n   if (GET_CODE (in) == LABEL_REF)\n-    return reg == XEXP (in, 0);\n+    return reg == LABEL_REF_LABEL (in);\n \n   code = GET_CODE (in);\n \n@@ -2847,7 +2847,9 @@ rtx_referenced_p (const_rtx x, const_rtx body)\n     if (const_rtx y = *iter)\n       {\n \t/* Check if a label_ref Y refers to label X.  */\n-\tif (GET_CODE (y) == LABEL_REF && LABEL_P (x) && XEXP (y, 0) == x)\n+\tif (GET_CODE (y) == LABEL_REF\n+\t    && LABEL_P (x)\n+\t    && LABEL_REF_LABEL (y) == x)\n \t  return true;\n \n \tif (rtx_equal_p (x, y))\n@@ -5320,7 +5322,7 @@ get_condition (rtx_insn *jump, rtx_insn **earliest, int allow_cc_mode,\n      the condition.  */\n   reverse\n     = GET_CODE (XEXP (SET_SRC (set), 2)) == LABEL_REF\n-      && XEXP (XEXP (SET_SRC (set), 2), 0) == JUMP_LABEL (jump);\n+      && LABEL_REF_LABEL (XEXP (SET_SRC (set), 2)) == JUMP_LABEL (jump);\n \n   return canonicalize_condition (jump, cond, reverse, earliest, NULL_RTX,\n \t\t\t\t allow_cc_mode, valid_at_insn_p);"}, {"sha": "dabe88025a85a9745748eac685715fd7693503f3", "filename": "gcc/sched-vis.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a827d9b1943e966713fbc5cd8f56722791f524aa/gcc%2Fsched-vis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a827d9b1943e966713fbc5cd8f56722791f524aa/gcc%2Fsched-vis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-vis.c?ref=a827d9b1943e966713fbc5cd8f56722791f524aa", "patch": "@@ -468,7 +468,7 @@ print_value (pretty_printer *pp, const_rtx x, int verbose)\n       pp_printf (pp, \"`%s'\", XSTR (x, 0));\n       break;\n     case LABEL_REF:\n-      pp_printf (pp, \"L%d\", INSN_UID (XEXP (x, 0)));\n+      pp_printf (pp, \"L%d\", INSN_UID (LABEL_REF_LABEL (x)));\n       break;\n     case CONST:\n     case HIGH:"}, {"sha": "cd4a2306925868eeb22fd5c75fd99c358f5d8eb7", "filename": "gcc/varasm.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a827d9b1943e966713fbc5cd8f56722791f524aa/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a827d9b1943e966713fbc5cd8f56722791f524aa/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=a827d9b1943e966713fbc5cd8f56722791f524aa", "patch": "@@ -2922,7 +2922,8 @@ const_hash_1 (const tree exp)\n \t    break;\n \n \t  case LABEL_REF:\n-\t    hi = value.offset + CODE_LABEL_NUMBER (XEXP (value.base, 0)) * 13;\n+\t    hi = (value.offset\n+\t\t  + CODE_LABEL_NUMBER (LABEL_REF_LABEL (value.base)) * 13);\n \t    break;\n \n \t  default:\n@@ -3112,8 +3113,8 @@ compare_constant (const tree t1, const tree t2)\n \t    break;\n \n \t  case LABEL_REF:\n-\t    ret = (CODE_LABEL_NUMBER (XEXP (value1.base, 0))\n-\t           == CODE_LABEL_NUMBER (XEXP (value2.base, 0)));\n+\t    ret = (CODE_LABEL_NUMBER (LABEL_REF_LABEL (value1.base))\n+\t           == CODE_LABEL_NUMBER (LABEL_REF_LABEL (value2.base)));\n \t    break;\n \n \t  default:\n@@ -3547,7 +3548,7 @@ const_rtx_hash_1 (const_rtx x)\n       break;\n \n     case LABEL_REF:\n-      h = h * 251 + CODE_LABEL_NUMBER (XEXP (x, 0));\n+      h = h * 251 + CODE_LABEL_NUMBER (LABEL_REF_LABEL (x));\n       break;\n \n     case UNSPEC:\n@@ -3835,7 +3836,7 @@ output_constant_pool_1 (struct constant_descriptor_rtx *desc,\n       /* FALLTHRU  */\n \n     case LABEL_REF:\n-      tmp = XEXP (tmp, 0);\n+      tmp = LABEL_REF_LABEL (tmp);\n       gcc_assert (!INSN_DELETED_P (tmp));\n       gcc_assert (!NOTE_P (tmp)\n \t\t  || NOTE_KIND (tmp) != NOTE_INSN_DELETED);"}]}