{"sha": "6809cbf90dffd5a6fccf96d67c5f520e1a162eb6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjgwOWNiZjkwZGZmZDVhNmZjY2Y5NmQ2N2M1ZjUyMGUxYTE2MmViNg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-07-16T22:28:29Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-07-16T22:28:29Z"}, "message": "basic-block.h (remove_fake_exit_edges): Declare.\n\n        * basic-block.h (remove_fake_exit_edges): Declare.\n        * cfganal.c (remove_fake_predecessors): Rename from\n        remove_fake_successors; iterate over predecessors.\n        (remove_fake_exit_edges): New.\n        * cfgcleanup.c (try_optimize_cfg): Use it.\n        * gcse.c (one_pre_gcse_pass, store_motion): Likewise.\n        * predict.c (estimate_probability): Likewise.\n        (tree_estimate_probability, note_prediction_to_br_prob): Likewise.\n        * tree-cfg.c (make_edges): Likewise.\n        * tree-ssa-pre.c (fini_pre): Likewise.\n        * profile.c (instrument_edges): Don't remove_fake_edges.\n        (branch_prob): Do it earlier here.\n\nFrom-SVN: r84840", "tree": {"sha": "6ad911f298df01a4dbc580f0c53b37b1d2a4a63f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ad911f298df01a4dbc580f0c53b37b1d2a4a63f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6809cbf90dffd5a6fccf96d67c5f520e1a162eb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6809cbf90dffd5a6fccf96d67c5f520e1a162eb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6809cbf90dffd5a6fccf96d67c5f520e1a162eb6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6809cbf90dffd5a6fccf96d67c5f520e1a162eb6/comments", "author": null, "committer": null, "parents": [{"sha": "7b48e1e0f0ea539efeca2a5be7f8fc93714d41bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b48e1e0f0ea539efeca2a5be7f8fc93714d41bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b48e1e0f0ea539efeca2a5be7f8fc93714d41bd"}], "stats": {"total": 62, "additions": 43, "deletions": 19}, "files": [{"sha": "df18afadb827d67fc70600bc4214df9a98feda18", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6809cbf90dffd5a6fccf96d67c5f520e1a162eb6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6809cbf90dffd5a6fccf96d67c5f520e1a162eb6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6809cbf90dffd5a6fccf96d67c5f520e1a162eb6", "patch": "@@ -1,3 +1,18 @@\n+2004-07-16  Richard Henderson  <rth@redhat.com>\n+\n+\t* basic-block.h (remove_fake_exit_edges): Declare.\n+\t* cfganal.c (remove_fake_predecessors): Rename from\n+\tremove_fake_successors; iterate over predecessors.\n+\t(remove_fake_exit_edges): New.\n+\t* cfgcleanup.c (try_optimize_cfg): Use it.\n+\t* gcse.c (one_pre_gcse_pass, store_motion): Likewise.\n+\t* predict.c (estimate_probability): Likewise.\n+\t(tree_estimate_probability, note_prediction_to_br_prob): Likewise.\n+\t* tree-cfg.c (make_edges): Likewise.\n+\t* tree-ssa-pre.c (fini_pre): Likewise.\n+\t* profile.c (instrument_edges): Don't remove_fake_edges.\n+\t(branch_prob): Do it earlier here.\n+\n 2004-07-16  Richard Henderson  <rth@redhat.com>\n \n \t* tree-ssa-operands.c (get_expr_operands): Fix 2004-07-15"}, {"sha": "e29b67aa9b942355ed77729592af829a8f20896d", "filename": "gcc/basic-block.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6809cbf90dffd5a6fccf96d67c5f520e1a162eb6/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6809cbf90dffd5a6fccf96d67c5f520e1a162eb6/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=6809cbf90dffd5a6fccf96d67c5f520e1a162eb6", "patch": "@@ -417,6 +417,7 @@ extern void commit_edge_insertions (void);\n extern void commit_edge_insertions_watch_calls (void);\n \n extern void remove_fake_edges (void);\n+extern void remove_fake_exit_edges (void);\n extern void add_noreturn_fake_exit_edges (void);\n extern void connect_infinite_loops_to_exit (void);\n extern edge unchecked_make_edge (basic_block, basic_block, int);"}, {"sha": "db0238c68eb5f383ee4f25edbff3b1e552f87e0d", "filename": "gcc/cfganal.c", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6809cbf90dffd5a6fccf96d67c5f520e1a162eb6/gcc%2Fcfganal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6809cbf90dffd5a6fccf96d67c5f520e1a162eb6/gcc%2Fcfganal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfganal.c?ref=6809cbf90dffd5a6fccf96d67c5f520e1a162eb6", "patch": "@@ -51,7 +51,6 @@ static void flow_dfs_compute_reverse_add_bb (depth_first_search_ds,\n \t\t\t\t\t     basic_block);\n static basic_block flow_dfs_compute_reverse_execute (depth_first_search_ds);\n static void flow_dfs_compute_reverse_finish (depth_first_search_ds);\n-static void remove_fake_successors (basic_block);\n static bool flow_active_insn_p (rtx);\n \f\n /* Like active_insn_p, except keep the return value clobber around\n@@ -529,20 +528,20 @@ flow_edge_list_print (const char *str, const edge *edge_list, int num_edges, FIL\n }\n \n \f\n-/* This routine will remove any fake successor edges for a basic block.\n-   When the edge is removed, it is also removed from whatever predecessor\n+/* This routine will remove any fake predecessor edges for a basic block.\n+   When the edge is removed, it is also removed from whatever successor\n    list it is in.  */\n \n static void\n-remove_fake_successors (basic_block bb)\n+remove_fake_predecessors (basic_block bb)\n {\n   edge e;\n \n-  for (e = bb->succ; e;)\n+  for (e = bb->pred; e;)\n     {\n       edge tmp = e;\n \n-      e = e->succ_next;\n+      e = e->pred_next;\n       if ((tmp->flags & EDGE_FAKE) == EDGE_FAKE)\n \tremove_edge (tmp);\n     }\n@@ -557,10 +556,19 @@ remove_fake_edges (void)\n {\n   basic_block bb;\n \n-  FOR_BB_BETWEEN (bb, ENTRY_BLOCK_PTR, EXIT_BLOCK_PTR, next_bb)\n-    remove_fake_successors (bb);\n+  FOR_BB_BETWEEN (bb, ENTRY_BLOCK_PTR->next_bb, NULL, next_bb)\n+    remove_fake_predecessors (bb);\n }\n \n+/* This routine will remove all fake edges to the EXIT_BLOCK.  */\n+\n+void\n+remove_fake_exit_edges (void)\n+{\n+  remove_fake_predecessors (EXIT_BLOCK_PTR);\n+}\n+\n+\n /* This function will add a fake edge between any block which has no\n    successors, and the exit block. Some data flow equations require these\n    edges to exist.  */"}, {"sha": "f167800e21b00a8d9517c0e4e0baf8d66cc2519f", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6809cbf90dffd5a6fccf96d67c5f520e1a162eb6/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6809cbf90dffd5a6fccf96d67c5f520e1a162eb6/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=6809cbf90dffd5a6fccf96d67c5f520e1a162eb6", "patch": "@@ -1978,7 +1978,7 @@ try_optimize_cfg (int mode)\n     }\n \n   if (mode & CLEANUP_CROSSJUMP)\n-    remove_fake_edges ();\n+    remove_fake_exit_edges ();\n \n   clear_aux_for_blocks ();\n "}, {"sha": "1d7212559b55cc7d3887a62a4f15bcfc76da0b8c", "filename": "gcc/gcse.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6809cbf90dffd5a6fccf96d67c5f520e1a162eb6/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6809cbf90dffd5a6fccf96d67c5f520e1a162eb6/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=6809cbf90dffd5a6fccf96d67c5f520e1a162eb6", "patch": "@@ -4964,7 +4964,7 @@ one_pre_gcse_pass (int pass)\n     }\n \n   free_ldst_mems ();\n-  remove_fake_edges ();\n+  remove_fake_exit_edges ();\n   free_hash_table (&expr_hash_table);\n \n   if (gcse_file)\n@@ -6858,7 +6858,7 @@ store_motion (void)\n \n   free_store_memory ();\n   free_edge_list (edge_list);\n-  remove_fake_edges ();\n+  remove_fake_exit_edges ();\n   end_alias_analysis ();\n }\n "}, {"sha": "49d2c612063c5f4da33f8d3f1c1904a0a54a2dc2", "filename": "gcc/predict.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6809cbf90dffd5a6fccf96d67c5f520e1a162eb6/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6809cbf90dffd5a6fccf96d67c5f520e1a162eb6/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=6809cbf90dffd5a6fccf96d67c5f520e1a162eb6", "patch": "@@ -779,7 +779,7 @@ estimate_probability (struct loops *loops_info)\n \t&& bb->succ->succ_next != NULL)\n       combine_predictions_for_insn (BB_END (bb), bb);\n \n-  remove_fake_edges ();\n+  remove_fake_exit_edges ();\n   /* Fill in the probability values in flowgraph based on the REG_BR_PROB\n      notes.  */\n   FOR_EACH_BB (bb)\n@@ -986,7 +986,7 @@ tree_estimate_probability (void)\n \n   estimate_bb_frequencies (&loops_info);\n   free_dominance_info (CDI_POST_DOMINATORS);\n-  remove_fake_edges ();\n+  remove_fake_exit_edges ();\n   flow_loops_free (&loops_info);\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     dump_tree_cfg (dump_file, dump_flags);\n@@ -1220,7 +1220,7 @@ note_prediction_to_br_prob (void)\n   free_dominance_info (CDI_DOMINATORS);\n   free (heads);\n \n-  remove_fake_edges ();\n+  remove_fake_exit_edges ();\n }\n \f\n /* This is used to carry information about basic blocks.  It is"}, {"sha": "ad62f87ccb4552da8c52dd4860fe66fbb4f49d12", "filename": "gcc/profile.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6809cbf90dffd5a6fccf96d67c5f520e1a162eb6/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6809cbf90dffd5a6fccf96d67c5f520e1a162eb6/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=6809cbf90dffd5a6fccf96d67c5f520e1a162eb6", "patch": "@@ -139,8 +139,6 @@ instrument_edges (struct edge_list *el)\n   int num_edges = NUM_EDGES (el);\n   basic_block bb;\n \n-  remove_fake_edges ();\n-\n   FOR_BB_BETWEEN (bb, ENTRY_BLOCK_PTR, NULL, next_bb)\n     {\n       edge e;\n@@ -971,6 +969,8 @@ branch_prob (void)\n \tcompute_value_histograms (n_values, values);\n     }\n \n+  remove_fake_edges ();\n+\n   /* For each edge not on the spanning tree, add counting code.  */\n   if (profile_arc_flag\n       && coverage_counter_alloc (GCOV_COUNTER_ARCS, num_instrumented))\n@@ -993,7 +993,6 @@ branch_prob (void)\n \t}\n     }\n \n-  remove_fake_edges ();\n   free_aux_for_edges ();\n \n   if (!ir_type ())"}, {"sha": "f6bb8e01b60b9b2a89e8df78244860d2dde30f70", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6809cbf90dffd5a6fccf96d67c5f520e1a162eb6/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6809cbf90dffd5a6fccf96d67c5f520e1a162eb6/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=6809cbf90dffd5a6fccf96d67c5f520e1a162eb6", "patch": "@@ -448,7 +448,7 @@ make_edges (void)\n \n   /* We do not care about fake edges, so remove any that the CFG\n      builder inserted for completeness.  */\n-  remove_fake_edges ();\n+  remove_fake_exit_edges ();\n \n   /* Clean up the graph and warn for unreachable code.  */\n   cleanup_tree_cfg ();"}, {"sha": "ba4be7b82d31b583cb54b4488be80e2a107d7935", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6809cbf90dffd5a6fccf96d67c5f520e1a162eb6/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6809cbf90dffd5a6fccf96d67c5f520e1a162eb6/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=6809cbf90dffd5a6fccf96d67c5f520e1a162eb6", "patch": "@@ -1943,13 +1943,14 @@ fini_pre (void)\n   free_alloc_pool (reference_node_pool);\n   free_alloc_pool (unary_node_pool);\n   htab_delete (phi_translate_table);\n-  remove_fake_edges ();\n+  remove_fake_exit_edges ();\n \n   FOR_ALL_BB (bb)\n     {\n       free (bb->aux);\n       bb->aux = NULL;\n     }\n+\n   free_dominance_info (CDI_POST_DOMINATORS);\n   vn_delete ();\n }"}]}