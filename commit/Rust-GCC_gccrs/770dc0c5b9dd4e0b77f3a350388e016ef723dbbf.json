{"sha": "770dc0c5b9dd4e0b77f3a350388e016ef723dbbf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzcwZGMwYzViOWRkNGUwYjc3ZjNhMzUwMzg4ZTAxNmVmNzIzZGJiZg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2002-05-18T15:10:24Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2002-05-18T15:10:24Z"}, "message": "re PR libstdc++/6503 ((Deque) Iterators are not typesafe)\n\n2002-05-18  Paolo Carlini  <pcarlini@unitus.it>\n\n\tPR libstdc++/6503\n\t* include/bits/stl_deque.h (_Deque_iterator::operator==,\n\toperator!=, operator<, operator>, operator>=, operator<=):\n\tMake non-member functions, to allow comparing const and\n\tnon-const iterators in any order.\n\t* testsuite/23_containers/deque_operators.cc: New testfile.\n\nFrom-SVN: r53590", "tree": {"sha": "927df16f0cdff2a476fe4e6c37e2d9ee6f329076", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/927df16f0cdff2a476fe4e6c37e2d9ee6f329076"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/770dc0c5b9dd4e0b77f3a350388e016ef723dbbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/770dc0c5b9dd4e0b77f3a350388e016ef723dbbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/770dc0c5b9dd4e0b77f3a350388e016ef723dbbf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/770dc0c5b9dd4e0b77f3a350388e016ef723dbbf/comments", "author": null, "committer": null, "parents": [{"sha": "2724afa4a23026760eebcaa95c0a77acfd79a353", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2724afa4a23026760eebcaa95c0a77acfd79a353", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2724afa4a23026760eebcaa95c0a77acfd79a353"}], "stats": {"total": 183, "additions": 173, "deletions": 10}, "files": [{"sha": "d903454dd013550a98cb7b535855306fa0eb37bd", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/770dc0c5b9dd4e0b77f3a350388e016ef723dbbf/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/770dc0c5b9dd4e0b77f3a350388e016ef723dbbf/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=770dc0c5b9dd4e0b77f3a350388e016ef723dbbf", "patch": "@@ -1,3 +1,12 @@\n+2002-05-18  Paolo Carlini  <pcarlini@unitus.it>\n+\n+\tPR libstdc++/6503\n+\t* include/bits/stl_deque.h (_Deque_iterator::operator==,\n+\toperator!=, operator<, operator>, operator>=, operator<=):\n+\tMake non-member functions, to allow comparing const and\n+\tnon-const iterators in any order.\n+\t* testsuite/23_containers/deque_operators.cc: New testfile.\n+\n 2002-05-16  Phil Edwards  <pme@gcc.gnu.org>\n \n \t* docs/html/faq/index.html:  Update not-a-bug list with basic_file.h."}, {"sha": "da8d66b9ac2795d5596fba81ab44be1f57eba1c1", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 101, "deletions": 10, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/770dc0c5b9dd4e0b77f3a350388e016ef723dbbf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/770dc0c5b9dd4e0b77f3a350388e016ef723dbbf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=770dc0c5b9dd4e0b77f3a350388e016ef723dbbf", "patch": "@@ -194,16 +194,6 @@ struct _Deque_iterator\n \n   reference operator[](difference_type __n) const { return *(*this + __n); }\n \n-  bool operator==(const _Self& __x) const { return _M_cur == __x._M_cur; }\n-  bool operator!=(const _Self& __x) const { return !(*this == __x); }\n-  bool operator<(const _Self& __x) const {\n-    return (_M_node == __x._M_node) ? \n-      (_M_cur < __x._M_cur) : (_M_node < __x._M_node);\n-  }\n-  bool operator>(const _Self& __x) const  { return __x < *this; }\n-  bool operator<=(const _Self& __x) const { return !(__x < *this); }\n-  bool operator>=(const _Self& __x) const { return !(*this < __x); }\n-\n   /** @if maint\n    *  Prepares to traverse new_node.  Sets everything except _M_cur, which\n    *  should therefore be set by the caller immediately afterwards, based on\n@@ -217,6 +207,107 @@ struct _Deque_iterator\n   }\n };\n \n+// Note: we also provide overloads whose operands are of the same type in\n+// order to avoid ambiguos overload resolution when std::rel_ops operators\n+// are in scope (for additional details, see libstdc++/3628)\n+template <class _Tp, class _Ref, class _Ptr>\n+inline bool\n+operator==(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,\n+\t   const _Deque_iterator<_Tp, _Ref, _Ptr>& __y)\n+{\n+  return __x._M_cur == __y._M_cur;\n+}\n+\n+template <class _Tp, class _RefL, class _PtrL, class _RefR, class _PtrR>\n+inline bool\n+operator==(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,\n+\t   const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)\n+{\n+  return __x._M_cur == __y._M_cur;\n+}\n+\n+template <class _Tp, class _Ref, class _Ptr>\n+inline bool\n+operator!=(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,\n+\t   const _Deque_iterator<_Tp, _Ref, _Ptr>& __y)\n+{\n+  return !(__x == __y);\n+}\n+\n+template <class _Tp, class _RefL, class _PtrL, class _RefR, class _PtrR>\n+inline bool\n+operator!=(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,\n+\t   const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)\n+{\n+  return !(__x == __y);\n+}\n+\n+template <class _Tp, class _Ref, class _Ptr>\n+inline bool\n+operator<(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,\n+\t   const _Deque_iterator<_Tp, _Ref, _Ptr>& __y)\n+{\n+  return (__x._M_node == __y._M_node) ? \n+    (__x._M_cur < __y._M_cur) : (__x._M_node < __y._M_node);\n+}\n+\n+template <class _Tp, class _RefL, class _PtrL, class _RefR, class _PtrR>\n+inline bool\n+operator<(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,\n+\t   const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)\n+{\n+  return (__x._M_node == __y._M_node) ? \n+    (__x._M_cur < __y._M_cur) : (__x._M_node < __y._M_node);\n+}\n+\n+template <class _Tp, class _Ref, class _Ptr>\n+inline bool\n+operator>(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,\n+\t   const _Deque_iterator<_Tp, _Ref, _Ptr>& __y)\n+{\n+  return __y < __x;\n+}\n+\n+template <class _Tp, class _RefL, class _PtrL, class _RefR, class _PtrR>\n+inline bool\n+operator>(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,\n+\t   const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)\n+{\n+  return __y < __x;\n+}\n+\n+template <class _Tp, class _Ref, class _Ptr>\n+inline bool\n+operator<=(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,\n+\t   const _Deque_iterator<_Tp, _Ref, _Ptr>& __y)\n+{\n+  return !(__y < __x);\n+}\n+\n+template <class _Tp, class _RefL, class _PtrL, class _RefR, class _PtrR>\n+inline bool\n+operator<=(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,\n+\t   const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)\n+{\n+  return !(__y < __x);\n+}\n+\n+template <class _Tp, class _Ref, class _Ptr>\n+inline bool\n+operator>=(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,\n+\t   const _Deque_iterator<_Tp, _Ref, _Ptr>& __y)\n+{\n+  return !(__x < __y);\n+}\n+\n+template <class _Tp, class _RefL, class _PtrL, class _RefR, class _PtrR>\n+inline bool\n+operator>=(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,\n+\t   const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)\n+{\n+  return !(__x < __y);\n+}\n+\n template <class _Tp, class _Ref, class _Ptr>\n inline _Deque_iterator<_Tp, _Ref, _Ptr>\n operator+(ptrdiff_t __n, const _Deque_iterator<_Tp, _Ref, _Ptr>& __x)"}, {"sha": "19959fc506a83a12e27bd2567b7c0649a1169b25", "filename": "libstdc++-v3/testsuite/23_containers/deque_operators.cc", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/770dc0c5b9dd4e0b77f3a350388e016ef723dbbf/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque_operators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/770dc0c5b9dd4e0b77f3a350388e016ef723dbbf/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque_operators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque_operators.cc?ref=770dc0c5b9dd4e0b77f3a350388e016ef723dbbf", "patch": "@@ -0,0 +1,63 @@\n+// 2002-05-18  Paolo Carlini  <pcarlini@unitus.it>\n+\n+// Copyright (C) 2002 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 23.2.1 deque operators\n+\n+#include <deque>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/6503\n+void test01()\n+{\n+  bool test = true;\n+\n+  std::deque<int> d(2);       \n+  typedef std::deque<int>::iterator iter;         \n+  typedef std::deque<int>::const_iterator constiter;\n+\n+  iter beg = d.begin();               \n+  iter end = d.end();\n+  constiter constbeg = d.begin();               \n+  constiter constend = d.end();\n+       \n+  VERIFY( beg == constbeg );\n+  VERIFY( constend == end );\n+\n+  VERIFY( beg != constend );\n+  VERIFY( constend != beg );\n+\n+  VERIFY( beg < constend );\n+  VERIFY( constbeg < end );\n+\n+  VERIFY( end > constbeg );\n+  VERIFY( constend > beg );\n+\n+  VERIFY( end >= constend );\n+  VERIFY( constbeg >= beg );\n+\n+  VERIFY( beg <= constbeg );\n+  VERIFY( constend <= end );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}