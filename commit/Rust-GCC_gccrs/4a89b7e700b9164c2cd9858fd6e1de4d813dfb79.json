{"sha": "4a89b7e700b9164c2cd9858fd6e1de4d813dfb79", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGE4OWI3ZTcwMGI5MTY0YzJjZDk4NThmZDZlMWRlNGQ4MTNkZmI3OQ==", "commit": {"author": {"name": "Peter Bergner", "email": "bergner@vnet.ibm.com", "date": "2017-08-17T17:58:31Z"}, "committer": {"name": "Peter Bergner", "email": "bergner@gcc.gnu.org", "date": "2017-08-17T17:58:31Z"}, "message": "altivec.md (VParity): Remove TARGET_VSX_TIMODE.\n\ngcc/\n\t* config/rs6000/altivec.md (VParity): Remove TARGET_VSX_TIMODE.\n\t* config/rs6000/rs6000-cpus.def: Remove comment.\n\t(ISA_2_7_MASKS_SERVER): Delete OPTION_MASK_VSX_TIMODE;\n\t(POWERPC_MASKS): Likewise.\n\t* config/rs6000/rs6000.c (rs6000_hard_regno_mode_ok): Remove unneeded\n\tuse of TARGET_VSX_TIMODE.\n\t(rs6000_setup_reg_addr_masks): Change TARGET_VSX_TIMODE to TARGET_VSX.\n\t(rs6000_init_hard_regno_mode_ok): Remove unneeded uses of\n\tTARGET_VSX_TIMODE.  Change use of TARGET_VSX_TIMODE to TARGET_VSX.\n\t(rs6000_option_override_internal): Remove dead code.\n\t(rs6000_legitimize_address): Change TARGET_VSX_TIMODE to TARGET_VSX.\n\t(rs6000_legitimize_reload_address): Likewise.\n\t(rs6000_legitimate_address_p): Likewise.\n\t(rs6000_opt_masks): Delete \"vsx-timode\".\n\t(rs6000_disable_incompatible_switches): Remove mention of -mvsx-timode\n\tfrom function comment.\n\t* config/rs6000/rs6000.h (MASK_VSX_TIMODE): Delete.\n\t* config/rs6000/rs6000.md (FMOVE128_GPR): Remove TARGET_VSX_TIMODE.\n\t(V16QI, V8HI, V4SI, V4SF, V2DI, V2DF, V1TI): Remove useless empty\n\tcondition.\n\t* config/rs6000/rs6000.opt (mvsx-timode): Replace with stub.\n\t* config/rs6000/vector.md (VEC_IP): Remove TARGET_VSX_TIMODE.\n\t* config/rs6000/vsx.md (VSX_LE_128): Likewise.\n\t(VSX_TI): Likewise.\n\t(VSX_M): Likewise.\n\t(define_peephole2): Likewise.\n\ngcc/testsuite/\n\t* gcc.target/powerpc/p8vector-int128-1.c: Remove use of -mvsx-timode.\n\t* gcc.target/powerpc/p9-vparity.c: Likewise.\n\t* gcc.target/powerpc/pr68805.c: Likewise.\n\t* gcc.target/powerpc/pr80098-4.c: Remove useless test case.\n\nFrom-SVN: r251158", "tree": {"sha": "3436c470b274b194c7044678f4bbac95f6528d9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3436c470b274b194c7044678f4bbac95f6528d9b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a89b7e700b9164c2cd9858fd6e1de4d813dfb79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a89b7e700b9164c2cd9858fd6e1de4d813dfb79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a89b7e700b9164c2cd9858fd6e1de4d813dfb79", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a89b7e700b9164c2cd9858fd6e1de4d813dfb79/comments", "author": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "86ef85d3f7e790e2bbace497fe55ca93d99dad32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86ef85d3f7e790e2bbace497fe55ca93d99dad32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86ef85d3f7e790e2bbace497fe55ca93d99dad32"}], "stats": {"total": 132, "additions": 70, "deletions": 62}, "files": [{"sha": "3ef90cf6efbf0f03839f86efd5edfd235b7accd2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a89b7e700b9164c2cd9858fd6e1de4d813dfb79/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a89b7e700b9164c2cd9858fd6e1de4d813dfb79/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4a89b7e700b9164c2cd9858fd6e1de4d813dfb79", "patch": "@@ -1,3 +1,32 @@\n+2017-08-17  Peter Bergner  <bergner@vnet.ibm.com>\n+\n+\t* config/rs6000/altivec.md (VParity): Remove TARGET_VSX_TIMODE.\n+\t* config/rs6000/rs6000-cpus.def: Remove comment.\n+\t(ISA_2_7_MASKS_SERVER): Delete OPTION_MASK_VSX_TIMODE;\n+\t(POWERPC_MASKS): Likewise.\n+\t* config/rs6000/rs6000.c (rs6000_hard_regno_mode_ok): Remove unneeded\n+\tuse of TARGET_VSX_TIMODE.\n+\t(rs6000_setup_reg_addr_masks): Change TARGET_VSX_TIMODE to TARGET_VSX.\n+\t(rs6000_init_hard_regno_mode_ok): Remove unneeded uses of\n+\tTARGET_VSX_TIMODE.  Change use of TARGET_VSX_TIMODE to TARGET_VSX.\n+\t(rs6000_option_override_internal): Remove dead code.\n+\t(rs6000_legitimize_address): Change TARGET_VSX_TIMODE to TARGET_VSX.\n+\t(rs6000_legitimize_reload_address): Likewise.\n+\t(rs6000_legitimate_address_p): Likewise.\n+\t(rs6000_opt_masks): Delete \"vsx-timode\".\n+\t(rs6000_disable_incompatible_switches): Remove mention of -mvsx-timode\n+\tfrom function comment.\n+\t* config/rs6000/rs6000.h (MASK_VSX_TIMODE): Delete.\n+\t* config/rs6000/rs6000.md (FMOVE128_GPR): Remove TARGET_VSX_TIMODE.\n+\t(V16QI, V8HI, V4SI, V4SF, V2DI, V2DF, V1TI): Remove useless empty\n+\tcondition.\n+\t* config/rs6000/rs6000.opt (mvsx-timode): Replace with stub.\n+\t* config/rs6000/vector.md (VEC_IP): Remove TARGET_VSX_TIMODE.\n+\t* config/rs6000/vsx.md (VSX_LE_128): Likewise.\n+\t(VSX_TI): Likewise.\n+\t(VSX_M): Likewise.\n+\t(define_peephole2): Likewise.\n+\n 2017-08-17  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/81859"}, {"sha": "e9c209df52fa344c652d11b95f67c74ad17498da", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a89b7e700b9164c2cd9858fd6e1de4d813dfb79/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a89b7e700b9164c2cd9858fd6e1de4d813dfb79/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=4a89b7e700b9164c2cd9858fd6e1de4d813dfb79", "patch": "@@ -218,7 +218,7 @@\n (define_mode_iterator VParity [V4SI\n \t\t\t       V2DI\n \t\t\t       V1TI\n-\t\t\t       (TI \"TARGET_VSX_TIMODE\")])\n+\t\t\t       TI])\n \n (define_mode_attr VI_char [(V2DI \"d\") (V4SI \"w\") (V8HI \"h\") (V16QI \"b\")])\n (define_mode_attr VI_scalar [(V2DI \"DI\") (V4SI \"SI\") (V8HI \"HI\") (V16QI \"QI\")])"}, {"sha": "cd6e93d9b8dc821e634f2c8ee9cd2751ae5217a8", "filename": "gcc/config/rs6000/rs6000-cpus.def", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a89b7e700b9164c2cd9858fd6e1de4d813dfb79/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a89b7e700b9164c2cd9858fd6e1de4d813dfb79/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def?ref=4a89b7e700b9164c2cd9858fd6e1de4d813dfb79", "patch": "@@ -38,8 +38,6 @@\n \n   /* For ISA 2.06, don't add ISEL, since in general it isn't a win, but\n      altivec is a win so enable it.  */\n-  /* OPTION_MASK_VSX_TIMODE should be set, but disable it for now until\n-     PR 58587 is fixed.  */\n #define ISA_2_6_MASKS_EMBEDDED\t(ISA_2_5_MASKS_EMBEDDED | OPTION_MASK_POPCNTD)\n #define ISA_2_6_MASKS_SERVER\t(ISA_2_5_MASKS_SERVER\t\t\t\\\n \t\t\t\t | OPTION_MASK_POPCNTD\t\t\t\\\n@@ -93,8 +91,7 @@\n \t\t\t\t | OPTION_MASK_EFFICIENT_UNALIGNED_VSX\t\\\n \t\t\t\t | OPTION_MASK_FLOAT128_KEYWORD\t\t\\\n \t\t\t\t | OPTION_MASK_FLOAT128_TYPE\t\t\\\n-\t\t\t\t | OPTION_MASK_P8_VECTOR\t\t\\\n-\t\t\t\t | OPTION_MASK_VSX_TIMODE)\n+\t\t\t\t | OPTION_MASK_P8_VECTOR)\n \n #define POWERPC_7400_MASK\t(OPTION_MASK_PPC_GFXOPT | OPTION_MASK_ALTIVEC)\n \n@@ -147,8 +144,7 @@\n \t\t\t\t | OPTION_MASK_SOFT_FLOAT\t\t\\\n \t\t\t\t | OPTION_MASK_STRICT_ALIGN_OPTIONAL\t\\\n \t\t\t\t | OPTION_MASK_TOC_FUSION\t\t\\\n-\t\t\t\t | OPTION_MASK_VSX\t\t\t\\\n-\t\t\t\t | OPTION_MASK_VSX_TIMODE)\n+\t\t\t\t | OPTION_MASK_VSX)\n \n #endif\n "}, {"sha": "c35c5641c4e51c48e03165a1706f37a12b33f314", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 11, "deletions": 26, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a89b7e700b9164c2cd9858fd6e1de4d813dfb79/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a89b7e700b9164c2cd9858fd6e1de4d813dfb79/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=4a89b7e700b9164c2cd9858fd6e1de4d813dfb79", "patch": "@@ -2056,7 +2056,7 @@ rs6000_hard_regno_mode_ok (int regno, machine_mode mode)\n       && (VECTOR_MEM_VSX_P (mode)\n \t  || FLOAT128_VECTOR_P (mode)\n \t  || reg_addr[mode].scalar_in_vmx_p\n-\t  || (TARGET_VSX_TIMODE && mode == TImode)\n+\t  || mode == TImode\n \t  || (TARGET_VADDUQM && mode == V1TImode)))\n     {\n       if (FP_REGNO_P (regno))\n@@ -2937,7 +2937,7 @@ rs6000_setup_reg_addr_masks (void)\n \t  else if ((addr_mask != 0) && !indexed_only_p\n \t\t   && msize == 16 && TARGET_P9_DFORM_VECTOR\n \t\t   && (ALTIVEC_OR_VSX_VECTOR_MODE (m2)\n-\t\t       || (m2 == TImode && TARGET_VSX_TIMODE)))\n+\t\t       || (m2 == TImode && TARGET_VSX)))\n \t    {\n \t      addr_mask |= RELOAD_REG_OFFSET;\n \t      if (rc == RELOAD_REG_FPR || rc == RELOAD_REG_VMX)\n@@ -3142,7 +3142,7 @@ rs6000_init_hard_regno_mode_ok (bool global_init_p)\n     }\n \n   /* Allow TImode in VSX register and set the VSX memory macros.  */\n-  if (TARGET_VSX && TARGET_VSX_TIMODE)\n+  if (TARGET_VSX)\n     {\n       rs6000_vector_mem[TImode] = VECTOR_VSX;\n       rs6000_vector_align[TImode] = align64;\n@@ -3203,9 +3203,7 @@ rs6000_init_hard_regno_mode_ok (bool global_init_p)\n       rs6000_constraints[RS6000_CONSTRAINT_ws] = VSX_REGS;\t/* DFmode  */\n       rs6000_constraints[RS6000_CONSTRAINT_wv] = ALTIVEC_REGS;\t/* DFmode  */\n       rs6000_constraints[RS6000_CONSTRAINT_wi] = VSX_REGS;\t/* DImode  */\n-\n-      if (TARGET_VSX_TIMODE)\n-\trs6000_constraints[RS6000_CONSTRAINT_wt] = VSX_REGS;\t/* TImode  */\n+      rs6000_constraints[RS6000_CONSTRAINT_wt] = VSX_REGS;\t/* TImode  */\n     }\n \n   /* Add conditional constraints based on various options, to allow us to\n@@ -3327,7 +3325,7 @@ rs6000_init_hard_regno_mode_ok (bool global_init_p)\n \t      reg_addr[SDmode].reload_load  = CODE_FOR_reload_sd_di_load;\n \t    }\n \n-\t  if (TARGET_VSX_TIMODE)\n+\t  if (TARGET_VSX)\n \t    {\n \t      reg_addr[TImode].reload_store  = CODE_FOR_reload_ti_di_store;\n \t      reg_addr[TImode].reload_load   = CODE_FOR_reload_ti_di_load;\n@@ -3411,7 +3409,7 @@ rs6000_init_hard_regno_mode_ok (bool global_init_p)\n \t      reg_addr[SDmode].reload_load  = CODE_FOR_reload_sd_si_load;\n \t    }\n \n-\t  if (TARGET_VSX_TIMODE)\n+\t  if (TARGET_VSX)\n \t    {\n \t      reg_addr[TImode].reload_store  = CODE_FOR_reload_ti_si_store;\n \t      reg_addr[TImode].reload_load   = CODE_FOR_reload_ti_si_load;\n@@ -4326,13 +4324,6 @@ rs6000_option_override_internal (bool global_init_p)\n \t}\n     }\n \n-  if (TARGET_VSX_TIMODE && !TARGET_VSX)\n-    {\n-      if (rs6000_isa_flags_explicit & OPTION_MASK_VSX_TIMODE)\n-\terror (\"%qs requires %qs\", \"-mvsx-timode\", \"-mvsx\");\n-      rs6000_isa_flags &= ~OPTION_MASK_VSX_TIMODE;\n-    }\n-\n   if (TARGET_DFP && !TARGET_HARD_FLOAT)\n     {\n       if (rs6000_isa_flags_explicit & OPTION_MASK_DFP)\n@@ -4551,11 +4542,6 @@ rs6000_option_override_internal (bool global_init_p)\n \t}\n     }\n \n-  /* Enable -mvsx-timode by default if VSX.  */\n-  if (TARGET_VSX && !TARGET_VSX_TIMODE\n-      && (rs6000_isa_flags_explicit & OPTION_MASK_VSX_TIMODE) == 0)\n-    rs6000_isa_flags |= OPTION_MASK_VSX_TIMODE;\n-\n   /* Set -mallow-movmisalign to explicitly on if we have full ISA 2.07\n      support. If we only have ISA 2.06 support, and the user did not specify\n      the switch, leave it set to -1 so the movmisalign patterns are enabled,\n@@ -8760,7 +8746,7 @@ rs6000_legitimize_address (rtx x, rtx oldx ATTRIBUTE_UNUSED,\n \t pointer, so it works with both GPRs and VSX registers.  */\n       /* Make sure both operands are registers.  */\n       else if (GET_CODE (x) == PLUS\n-\t       && (mode != TImode || !TARGET_VSX_TIMODE))\n+\t       && (mode != TImode || !TARGET_VSX))\n \treturn gen_rtx_PLUS (Pmode,\n \t\t\t     force_reg (Pmode, XEXP (x, 0)),\n \t\t\t     force_reg (Pmode, XEXP (x, 1)));\n@@ -9653,7 +9639,7 @@ rs6000_legitimize_reload_address (rtx x, machine_mode mode,\n       && mode != TDmode\n       && mode != IFmode\n       && mode != KFmode\n-      && (mode != TImode || !TARGET_VSX_TIMODE)\n+      && (mode != TImode || !TARGET_VSX)\n       && mode != PTImode\n       && (mode != DImode || TARGET_POWERPC64)\n       && ((mode != DFmode && mode != DDmode) || TARGET_POWERPC64\n@@ -9821,10 +9807,10 @@ rs6000_legitimate_address_p (machine_mode mode, rtx x, bool reg_ok_strict)\n      go into VSX registers, so we allow REG+REG, while TImode seems\n      somewhat split, in that some uses are GPR based, and some VSX based.  */\n   /* FIXME: We could loosen this by changing the following to\n-       if (mode == TImode && TARGET_QUAD_MEMORY && TARGET_VSX_TIMODE)\n+       if (mode == TImode && TARGET_QUAD_MEMORY && TARGET_VSX)\n      but currently we cannot allow REG+REG addressing for TImode.  See\n      PR72827 for complete details on how this ends up hoodwinking DSE.  */\n-  if (mode == TImode && TARGET_VSX_TIMODE)\n+  if (mode == TImode && TARGET_VSX)\n     return 0;\n   /* If not REG_OK_STRICT (before reload) let pass any stack offset.  */\n   if (! reg_ok_strict\n@@ -36185,7 +36171,6 @@ static struct rs6000_opt_mask const rs6000_opt_masks[] =\n   { \"toc-fusion\",\t\tOPTION_MASK_TOC_FUSION,\t\tfalse, true  },\n   { \"update\",\t\t\tOPTION_MASK_NO_UPDATE,\t\ttrue , true  },\n   { \"vsx\",\t\t\tOPTION_MASK_VSX,\t\tfalse, true  },\n-  { \"vsx-timode\",\t\tOPTION_MASK_VSX_TIMODE,\t\tfalse, true  },\n #ifdef OPTION_MASK_64BIT\n #if TARGET_AIX_OS\n   { \"aix64\",\t\t\tOPTION_MASK_64BIT,\t\tfalse, false },\n@@ -36894,7 +36879,7 @@ rs6000_print_builtin_options (FILE *file, int indent, const char *string,\n \n /* If the user used -mno-vsx, we need turn off all of the implicit ISA 2.06,\n    2.07, and 3.0 options that relate to the vector unit (-mdirect-move,\n-   -mvsx-timode, -mupper-regs-df).\n+   -mupper-regs-df, etc.).\n \n    If the user used -mno-power8-vector, we need to turn off all of the implicit\n    ISA 2.07 and 3.0 options that relate to the vector unit."}, {"sha": "ca4d9923a21ca0f99b9efa02114a12bbb7b2329f", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a89b7e700b9164c2cd9858fd6e1de4d813dfb79/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a89b7e700b9164c2cd9858fd6e1de4d813dfb79/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=4a89b7e700b9164c2cd9858fd6e1de4d813dfb79", "patch": "@@ -667,7 +667,6 @@ extern int rs6000_vector_align[];\n #define MASK_STRING\t\t\tOPTION_MASK_STRING\n #define MASK_UPDATE\t\t\tOPTION_MASK_UPDATE\n #define MASK_VSX\t\t\tOPTION_MASK_VSX\n-#define MASK_VSX_TIMODE\t\t\tOPTION_MASK_VSX_TIMODE\n \n #ifndef IN_LIBGCC2\n #define MASK_POWERPC64\t\t\tOPTION_MASK_POWERPC64"}, {"sha": "9f753c054da3a728ebfa0654be31028e24fe5ae1", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a89b7e700b9164c2cd9858fd6e1de4d813dfb79/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a89b7e700b9164c2cd9858fd6e1de4d813dfb79/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=4a89b7e700b9164c2cd9858fd6e1de4d813dfb79", "patch": "@@ -399,14 +399,14 @@\n \t\t\t\t    (TD \"TARGET_HARD_FLOAT\")])\n \n ; Iterators for 128 bit types for direct move\n-(define_mode_iterator FMOVE128_GPR [(TI    \"TARGET_VSX_TIMODE\")\n-\t\t\t\t    (V16QI \"\")\n-\t\t\t\t    (V8HI  \"\")\n-\t\t\t\t    (V4SI  \"\")\n-\t\t\t\t    (V4SF  \"\")\n-\t\t\t\t    (V2DI  \"\")\n-\t\t\t\t    (V2DF  \"\")\n-\t\t\t\t    (V1TI  \"\")\n+(define_mode_iterator FMOVE128_GPR [TI\n+\t\t\t\t    V16QI\n+\t\t\t\t    V8HI\n+\t\t\t\t    V4SI\n+\t\t\t\t    V4SF\n+\t\t\t\t    V2DI\n+\t\t\t\t    V2DF\n+\t\t\t\t    V1TI\n \t\t\t\t    (KF    \"FLOAT128_VECTOR_P (KFmode)\")\n \t\t\t\t    (TF    \"FLOAT128_VECTOR_P (TFmode)\")])\n "}, {"sha": "5789ff7febbb1bbc432f7cb6663ffdace15cd102", "filename": "gcc/config/rs6000/rs6000.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a89b7e700b9164c2cd9858fd6e1de4d813dfb79/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a89b7e700b9164c2cd9858fd6e1de4d813dfb79/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.opt?ref=4a89b7e700b9164c2cd9858fd6e1de4d813dfb79", "patch": "@@ -510,9 +510,9 @@ msave-toc-indirect\n Target Report Mask(SAVE_TOC_INDIRECT) Var(rs6000_isa_flags)\n Save the TOC in the prologue for indirect calls rather than inline.\n \n+; This option existed in the past, but now is always the same as -mvsx.\n mvsx-timode\n-Target Undocumented Mask(VSX_TIMODE) Var(rs6000_isa_flags)\n-Allow 128-bit integers in VSX registers.\n+Target RejectNegative Undocumented Ignore\n \n mpower8-fusion\n Target Report Mask(P8_FUSION) Var(rs6000_isa_flags)"}, {"sha": "5a9b1a8c10136239f3c7bc2ea0fb8723db99549d", "filename": "gcc/config/rs6000/vector.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a89b7e700b9164c2cd9858fd6e1de4d813dfb79/gcc%2Fconfig%2Frs6000%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a89b7e700b9164c2cd9858fd6e1de4d813dfb79/gcc%2Fconfig%2Frs6000%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvector.md?ref=4a89b7e700b9164c2cd9858fd6e1de4d813dfb79", "patch": "@@ -31,7 +31,7 @@\n \t\t\t      V4SI\n \t\t\t      V2DI\n \t\t\t      V1TI\n-\t\t\t      (TI \"TARGET_VSX_TIMODE\")])\n+\t\t\t      TI])\n \n ;; Vector float modes\n (define_mode_iterator VEC_F [V4SF V2DF])"}, {"sha": "b47eeacd484f20168ffc33e7cfbeef0a73b848c4", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a89b7e700b9164c2cd9858fd6e1de4d813dfb79/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a89b7e700b9164c2cd9858fd6e1de4d813dfb79/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=4a89b7e700b9164c2cd9858fd6e1de4d813dfb79", "patch": "@@ -34,11 +34,11 @@\n ;; types that goes in a single vector register.\n (define_mode_iterator VSX_LE_128 [(KF   \"FLOAT128_VECTOR_P (KFmode)\")\n \t\t\t\t  (TF   \"FLOAT128_VECTOR_P (TFmode)\")\n-\t\t\t\t  (TI\t\"TARGET_VSX_TIMODE\")\n+\t\t\t\t  TI\n \t\t\t\t  V1TI])\n \n ;; Iterator for 128-bit integer types that go in a single vector register.\n-(define_mode_iterator VSX_TI [(TI \"TARGET_VSX_TIMODE\") V1TI])\n+(define_mode_iterator VSX_TI [TI V1TI])\n \n ;; Iterator for the 2 32-bit vector types\n (define_mode_iterator VSX_W [V4SF V4SI])\n@@ -71,7 +71,7 @@\n \t\t\t     V1TI\n \t\t\t     (KF\t\"FLOAT128_VECTOR_P (KFmode)\")\n \t\t\t     (TF\t\"FLOAT128_VECTOR_P (TFmode)\")\n-\t\t\t     (TI\t\"TARGET_VSX_TIMODE\")])\n+\t\t\t     TI])\n \n ;; Map into the appropriate load/store name based on the type\n (define_mode_attr VSm  [(V16QI \"vw4\")\n@@ -852,7 +852,7 @@\n    (set (match_operand:VSX_TI 2 \"int_reg_operand\")\n \t(rotate:VSX_TI (match_dup 0)\n \t\t       (const_int 64)))]\n-  \"!BYTES_BIG_ENDIAN && TARGET_VSX && TARGET_VSX_TIMODE && !TARGET_P9_VECTOR\n+  \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR\n    && (rtx_equal_p (operands[0], operands[2])\n        || peep2_reg_dead_p (2, operands[0]))\"\n    [(set (match_dup 2) (match_dup 1))])\n@@ -864,7 +864,7 @@\n    (set (match_operand:VSX_TI 2 \"memory_operand\")\n \t(rotate:VSX_TI (match_dup 0)\n \t\t       (const_int 64)))]\n-  \"!BYTES_BIG_ENDIAN && TARGET_VSX && TARGET_VSX_TIMODE && !TARGET_P9_VECTOR\n+  \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR\n    && peep2_reg_dead_p (2, operands[0])\"\n    [(set (match_dup 2) (match_dup 1))])\n \n@@ -878,7 +878,7 @@\n    (set (match_operand:TI 2 \"vsx_register_operand\" \"\")\n \t(rotate:TI (match_dup 0)\n \t\t   (const_int 64)))]\n-  \"!BYTES_BIG_ENDIAN && TARGET_VSX && TARGET_VSX_TIMODE && !TARGET_P9_VECTOR\n+  \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR\n    && (rtx_equal_p (operands[0], operands[2])\n        || peep2_reg_dead_p (2, operands[0]))\"\n    [(set (match_dup 2) (match_dup 1))])"}, {"sha": "9020770124c776442231e6eeeae05fbdfcf8b4ef", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a89b7e700b9164c2cd9858fd6e1de4d813dfb79/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a89b7e700b9164c2cd9858fd6e1de4d813dfb79/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4a89b7e700b9164c2cd9858fd6e1de4d813dfb79", "patch": "@@ -1,3 +1,10 @@\n+2017-08-17  Peter Bergner  <bergner@vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/p8vector-int128-1.c: Remove use of -mvsx-timode.\n+\t* gcc.target/powerpc/p9-vparity.c: Likewise.\n+\t* gcc.target/powerpc/pr68805.c: Likewise.\n+\t* gcc.target/powerpc/pr80098-4.c: Remove useless test case.\n+\n 2017-08-17  Peter Bergner  <bergner@vnet.ibm.com>\n \n \tPR target/72804"}, {"sha": "a8fcf18260ce2bd570bf1c197c15efa4b064fb78", "filename": "gcc/testsuite/gcc.target/powerpc/p8vector-int128-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a89b7e700b9164c2cd9858fd6e1de4d813dfb79/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8vector-int128-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a89b7e700b9164c2cd9858fd6e1de4d813dfb79/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8vector-int128-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8vector-int128-1.c?ref=4a89b7e700b9164c2cd9858fd6e1de4d813dfb79", "patch": "@@ -2,7 +2,7 @@\n /* { dg-skip-if \"\" { powerpc*-*-darwin* } } */\n /* { dg-require-effective-target powerpc_p8vector_ok } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n-/* { dg-options \"-mcpu=power8 -O3 -mvsx-timode\" } */\n+/* { dg-options \"-mcpu=power8 -O3\" } */\n \n #include <altivec.h>\n "}, {"sha": "77d22e01075119c29ed7f396bd08f038184fbe88", "filename": "gcc/testsuite/gcc.target/powerpc/p9-vparity.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a89b7e700b9164c2cd9858fd6e1de4d813dfb79/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vparity.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a89b7e700b9164c2cd9858fd6e1de4d813dfb79/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vparity.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-vparity.c?ref=4a89b7e700b9164c2cd9858fd6e1de4d813dfb79", "patch": "@@ -2,7 +2,7 @@\n /* { dg-skip-if \"\" { powerpc*-*-darwin* } } */\n /* { dg-require-effective-target powerpc_p9vector_ok } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n-/* { dg-options \"-mcpu=power9 -O2 -mvsx-timode\" } */\n+/* { dg-options \"-mcpu=power9 -O2\" } */\n \n #include <altivec.h>\n "}, {"sha": "626e2271829482003c9b323ff0c1b6728667eeb1", "filename": "gcc/testsuite/gcc.target/powerpc/pr68805.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a89b7e700b9164c2cd9858fd6e1de4d813dfb79/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr68805.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a89b7e700b9164c2cd9858fd6e1de4d813dfb79/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr68805.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr68805.c?ref=4a89b7e700b9164c2cd9858fd6e1de4d813dfb79", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile { target powerpc64le-*-* } } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n-/* { dg-options \"-O2 -mvsx-timode -mcpu=power8\" } */\n+/* { dg-options \"-O2 -mcpu=power8\" } */\n \n typedef struct bar {\n   void *a;"}, {"sha": "c652ac93a7a8e6c327d4b1c664dc127053ba4520", "filename": "gcc/testsuite/gcc.target/powerpc/pr80098-4.c", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ef85d3f7e790e2bbace497fe55ca93d99dad32/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80098-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ef85d3f7e790e2bbace497fe55ca93d99dad32/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80098-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80098-4.c?ref=86ef85d3f7e790e2bbace497fe55ca93d99dad32", "patch": "@@ -1,8 +0,0 @@\n-/* { dg-do compile { target { powerpc64*-*-* && lp64 } } } */\n-/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power7\" } } */\n-/* { dg-require-effective-target powerpc_vsx_ok } */\n-/* { dg-options \"-mcpu=power7 -mno-vsx -mvsx-timode\" } */\n-\n-int i;\n-\n-/* { dg-error \"'-mno-vsx' turns off '-mvsx-timode'\" \"PR80098\" { target *-*-* } 0 } */"}]}