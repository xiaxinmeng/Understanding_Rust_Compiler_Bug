{"sha": "cd61690f63612fc5e50945e446a44b9ee34c088c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Q2MTY5MGY2MzYxMmZjNWU1MDk0NWU0NDZhNDRiOWVlMzRjMDg4Yw==", "commit": {"author": {"name": "Dodji Seketeli", "email": "dodji@redhat.com", "date": "2013-01-15T09:12:30Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2013-01-15T09:12:30Z"}, "message": "PR c++/55663 - constexpr function templ instantiation\n\nConsider the example of the problem report\n\n     1\ttemplate <typename>\n     2\tconstexpr bool the_truth () { return true; }\n     3\n     4\ttemplate <bool>\n     5\t  struct Takes_bool { };\n     6\n     7\ttemplate<bool B>\n     8\t  using Alias = Takes_bool<B>;\n     9\n    10\ttemplate<typename T>\n    11\t  struct test { using type = Alias<the_truth<T>()>; };\n    12\n    13\tint main () {\n    14\t  test<int> a;\n    15\n    16\t  return 0;\n    17\t}\n\nthat yields the error:\n\n    test.cc: In substitution of \u2018template<bool B> using Alias = Takes_bool<B> [with bool B = the_truth<int>()]\u2019:\n    test.cc:11:51:   required from \u2018struct test<int>\u2019\n    test.cc:14:13:   required from here\n    test.cc:11:51: error: integral expression \u2018the_truth<int>()\u2019 is not constant\n       struct test { using type = Alias<the_truth<T>()>; };\n\nI think the issue happens in the course of instantiating test<int> at\nline 14, when we look into instantiating Alias<the_truth<T>()> (at\nline 11) (using instantiate_alias_template) with T = int.\n\nThere, when we check the argument 'the_truth<int>()' to see if it\nactually is a constant expression, in check_instantiated_arg, we fail\nto recognize it constexpr-ness b/c we just look at its TREE_CONSTANT.\n\nAt that point, the_truth<int> should have been folded, and it's not,\nbecause instantiate_alias_template forgets to call\ncoerce_template_parms on its arguments.\n\nFixed thus, bootstapped and tested on x86_64-unknown-linux-gnu against\ntrunk.\n\ngcc/cp/\n\n\tPR c++/55663\n\t* pt.c (coerce_innermost_template_parms): New static function.\n\t(instantiate_alias_template):  Use it here.\n\ngcc/testsuite/\n\n\tPR c++/55663\n\t* g++.dg/cpp0x/alias-decl-31.C: New test.\n\nFrom-SVN: r195189", "tree": {"sha": "b55d0860e61bfea46c17cab939daafaff581504a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b55d0860e61bfea46c17cab939daafaff581504a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd61690f63612fc5e50945e446a44b9ee34c088c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd61690f63612fc5e50945e446a44b9ee34c088c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd61690f63612fc5e50945e446a44b9ee34c088c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd61690f63612fc5e50945e446a44b9ee34c088c/comments", "author": null, "committer": null, "parents": [{"sha": "955f5a07c96b8dda489e50ca8a79fb623b4cdb97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/955f5a07c96b8dda489e50ca8a79fb623b4cdb97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/955f5a07c96b8dda489e50ca8a79fb623b4cdb97"}], "stats": {"total": 95, "additions": 95, "deletions": 0}, "files": [{"sha": "00bcb7a5202aad64e82fbe68ce7ea8ede1bda28a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd61690f63612fc5e50945e446a44b9ee34c088c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd61690f63612fc5e50945e446a44b9ee34c088c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=cd61690f63612fc5e50945e446a44b9ee34c088c", "patch": "@@ -1,3 +1,9 @@\n+2013-01-15  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/55663\n+\t* pt.c (coerce_innermost_template_parms): New static function.\n+\t(instantiate_alias_template):  Use it here.\n+\n 2013-01-09  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/55878"}, {"sha": "8ddc14376a403f5d835846d1400c987cc320cd4e", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd61690f63612fc5e50945e446a44b9ee34c088c/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd61690f63612fc5e50945e446a44b9ee34c088c/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=cd61690f63612fc5e50945e446a44b9ee34c088c", "patch": "@@ -128,6 +128,8 @@ static tree tsubst_initializer_list (tree, tree);\n static tree get_class_bindings (tree, tree, tree, tree);\n static tree coerce_template_parms (tree, tree, tree, tsubst_flags_t,\n \t\t\t\t   bool, bool);\n+static tree coerce_innermost_template_parms (tree, tree, tree, tsubst_flags_t,\n+\t\t\t\t\t      bool, bool);\n static void tsubst_enum\t(tree, tree, tree);\n static tree add_to_template_args (tree, tree);\n static tree add_outermost_template_args (tree, tree);\n@@ -6740,6 +6742,61 @@ coerce_template_parms (tree parms,\n   return new_inner_args;\n }\n \n+/* Like coerce_template_parms.  If PARMS represents all template\n+   parameters levels, this function returns a vector of vectors\n+   representing all the resulting argument levels.  Note that in this\n+   case, only the innermost arguments are coerced because the\n+   outermost ones are supposed to have been coerced already.\n+\n+   Otherwise, if PARMS represents only (the innermost) vector of\n+   parameters, this function returns a vector containing just the\n+   innermost resulting arguments.  */\n+\n+static tree\n+coerce_innermost_template_parms (tree parms,\n+\t\t\t\t  tree args,\n+\t\t\t\t  tree in_decl,\n+\t\t\t\t  tsubst_flags_t complain,\n+\t\t\t\t  bool require_all_args,\n+\t\t\t\t  bool use_default_args)\n+{\n+  int parms_depth = TMPL_PARMS_DEPTH (parms);\n+  int args_depth = TMPL_ARGS_DEPTH (args);\n+  tree coerced_args;\n+\n+  if (parms_depth > 1)\n+    {\n+      coerced_args = make_tree_vec (parms_depth);\n+      tree level;\n+      int cur_depth;\n+\n+      for (level = parms, cur_depth = parms_depth;\n+\t   parms_depth > 0 && level != NULL_TREE;\n+\t   level = TREE_CHAIN (level), --cur_depth)\n+\t{\n+\t  tree l;\n+\t  if (cur_depth == args_depth)\n+\t    l = coerce_template_parms (TREE_VALUE (level),\n+\t\t\t\t       args, in_decl, complain,\n+\t\t\t\t       require_all_args,\n+\t\t\t\t       use_default_args);\n+\t  else\n+\t    l = TMPL_ARGS_LEVEL (args, cur_depth);\n+\n+\t  if (l == error_mark_node)\n+\t    return error_mark_node;\n+\n+\t  SET_TMPL_ARGS_LEVEL (coerced_args, cur_depth, l);\n+\t}\n+    }\n+  else\n+    coerced_args = coerce_template_parms (INNERMOST_TEMPLATE_PARMS (parms),\n+\t\t\t\t\t  args, in_decl, complain,\n+\t\t\t\t\t  require_all_args,\n+\t\t\t\t\t  use_default_args);\n+  return coerced_args;\n+}\n+\n /* Returns 1 if template args OT and NT are equivalent.  */\n \n static int\n@@ -14640,6 +14697,13 @@ instantiate_alias_template (tree tmpl, tree args, tsubst_flags_t complain)\n       ggc_free (tinst);\n       return error_mark_node;\n     }\n+\n+  args =\n+    coerce_innermost_template_parms (DECL_TEMPLATE_PARMS (tmpl),\n+\t\t\t\t     args, tmpl, complain,\n+\t\t\t\t     /*require_all_args=*/true,\n+\t\t\t\t     /*use_default_args=*/true);\n+\n   tree r = instantiate_template (tmpl, args, complain);\n   pop_tinst_level ();\n   /* We can't free this if a pending_template entry or last_error_tinst_level"}, {"sha": "26a479b3f52e251e8f537f0cacc1bc2d1e311ac5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd61690f63612fc5e50945e446a44b9ee34c088c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd61690f63612fc5e50945e446a44b9ee34c088c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cd61690f63612fc5e50945e446a44b9ee34c088c", "patch": "@@ -1,3 +1,8 @@\n+2013-01-15  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/55663\n+\t* g++.dg/cpp0x/alias-decl-31.C: New test.\n+\n 2013-01-15  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/54286"}, {"sha": "83eea471d07cc73e643b0826c7acbc66213bee1f", "filename": "gcc/testsuite/g++.dg/cpp0x/alias-decl-31.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd61690f63612fc5e50945e446a44b9ee34c088c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-31.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd61690f63612fc5e50945e446a44b9ee34c088c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-31.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-31.C?ref=cd61690f63612fc5e50945e446a44b9ee34c088c", "patch": "@@ -0,0 +1,20 @@\n+// Origin: PR c++/55663\n+// { dg-do compile { target c++11 } }\n+\n+template <typename>\n+constexpr bool the_truth () { return true; }\n+\n+template <bool>\n+  struct Takes_bool { };\n+\n+template<bool B>\n+  using Alias = Takes_bool<B>;\n+\n+template<typename T>\n+  struct test { using type = Alias<the_truth<T>()>; };\n+\n+int main () {\n+  test<int> a;\n+\n+  return 0;\n+}"}]}