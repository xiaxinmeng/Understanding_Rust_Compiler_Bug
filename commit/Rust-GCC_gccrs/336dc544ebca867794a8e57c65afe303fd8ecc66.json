{"sha": "336dc544ebca867794a8e57c65afe303fd8ecc66", "node_id": "C_kwDOANBUbNoAKDMzNmRjNTQ0ZWJjYTg2Nzc5NGE4ZTU3YzY1YWZlMzAzZmQ4ZWNjNjY", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-12-14T12:48:54Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-12-14T12:48:54Z"}, "message": "c++: don't leak 'arglist' in build_new_op\n\ngcc/cp/ChangeLog:\n\n\t* call.c (build_new_op): Use releasing_vec for arglist.  Declare\n\tconv in the scope it's used.", "tree": {"sha": "a453169989083cda5fed2280a88c936abe0c1f20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a453169989083cda5fed2280a88c936abe0c1f20"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/336dc544ebca867794a8e57c65afe303fd8ecc66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/336dc544ebca867794a8e57c65afe303fd8ecc66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/336dc544ebca867794a8e57c65afe303fd8ecc66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/336dc544ebca867794a8e57c65afe303fd8ecc66/comments", "author": null, "committer": null, "parents": [{"sha": "c5ef950d0bb7d451e8d831f71351a5db4373aa9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5ef950d0bb7d451e8d831f71351a5db4373aa9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5ef950d0bb7d451e8d831f71351a5db4373aa9a"}], "stats": {"total": 6, "additions": 2, "deletions": 4}, "files": [{"sha": "347df5da35d16e299effcadbfa1a6b199e612ffa", "filename": "gcc/cp/call.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/336dc544ebca867794a8e57c65afe303fd8ecc66/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/336dc544ebca867794a8e57c65afe303fd8ecc66/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=336dc544ebca867794a8e57c65afe303fd8ecc66", "patch": "@@ -6461,13 +6461,12 @@ build_new_op (const op_location_t &loc, enum tree_code code, int flags,\n \t      tsubst_flags_t complain)\n {\n   struct z_candidate *candidates = 0, *cand;\n-  vec<tree, va_gc> *arglist;\n+  releasing_vec arglist;\n   tree result = NULL_TREE;\n   bool result_valid_p = false;\n   enum tree_code code2 = ERROR_MARK;\n   enum tree_code code_orig_arg1 = ERROR_MARK;\n   enum tree_code code_orig_arg2 = ERROR_MARK;\n-  conversion *conv;\n   void *p;\n   bool strict_p;\n   bool any_viable_p;\n@@ -6543,7 +6542,6 @@ build_new_op (const op_location_t &loc, enum tree_code code, int flags,\n       arg2_type = integer_type_node;\n     }\n \n-  vec_alloc (arglist, 3);\n   arglist->quick_push (arg1);\n   if (arg2 != NULL_TREE)\n     arglist->quick_push (arg2);\n@@ -6814,7 +6812,7 @@ build_new_op (const op_location_t &loc, enum tree_code code, int flags,\n \t     corresponding parameters of the selected operation function,\n \t     except that the second standard conversion sequence of a\n \t     user-defined conversion sequence (12.3.3.1.2) is not applied.\"  */\n-\t  conv = cand->convs[0];\n+\t  conversion *conv = cand->convs[0];\n \t  if (conv->user_conv_p)\n \t    {\n \t      conv = strip_standard_conversion (conv);"}]}