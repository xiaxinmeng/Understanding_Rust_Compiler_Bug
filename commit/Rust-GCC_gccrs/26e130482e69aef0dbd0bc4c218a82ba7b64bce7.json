{"sha": "26e130482e69aef0dbd0bc4c218a82ba7b64bce7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZlMTMwNDgyZTY5YWVmMGRiZDBiYzRjMjE4YTgyYmE3YjY0YmNlNw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-08-14T13:13:37Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-08-14T13:13:37Z"}, "message": "PR libstdc++/86846 Alternative to pointer-width atomics\n\nDefine a class using std::mutex for when std::atomic<memory_resource*>\ncannot be used to implement the default memory resource.\n\nWhen std::mutex constructor is not constexpr the constant_init trick\nwon't work, so just define a global and use init_priority for it. The\ncompiler warns about using reserved priority, so put the definition in a\nheader file using #pragma GCC system_header to suppress the warning.\n\n\tPR libstdc++/86846\n\t* src/c++17/default_resource.h: New file, defining default_res.\n\t* src/c++17/memory_resource.cc [ATOMIC_POINTER_LOCK_FREE != 2]\n\t(atomic_mem_res): Define alternative for atomic<memory_resource*>\n\tusing a mutex instead of atomics.\n\nFrom-SVN: r263536", "tree": {"sha": "de42754637ea28cd22651f0f584d9ed38e54caa3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de42754637ea28cd22651f0f584d9ed38e54caa3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26e130482e69aef0dbd0bc4c218a82ba7b64bce7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26e130482e69aef0dbd0bc4c218a82ba7b64bce7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26e130482e69aef0dbd0bc4c218a82ba7b64bce7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26e130482e69aef0dbd0bc4c218a82ba7b64bce7/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "484e936e88e52d9e4e013bbc1b8264f556ff7cb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/484e936e88e52d9e4e013bbc1b8264f556ff7cb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/484e936e88e52d9e4e013bbc1b8264f556ff7cb4"}], "stats": {"total": 58, "additions": 57, "deletions": 1}, "files": [{"sha": "15ff3db6134b5723a329e455d32cc54951c9ffd1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e130482e69aef0dbd0bc4c218a82ba7b64bce7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e130482e69aef0dbd0bc4c218a82ba7b64bce7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=26e130482e69aef0dbd0bc4c218a82ba7b64bce7", "patch": "@@ -1,5 +1,11 @@\n 2018-08-14  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/86846\n+\t* src/c++17/default_resource.h: New file, defining default_res.\n+\t* src/c++17/memory_resource.cc [ATOMIC_POINTER_LOCK_FREE != 2]\n+\t(atomic_mem_res): Define alternative for atomic<memory_resource*>\n+\tusing a mutex instead of atomics.\n+\n \tPR libstdc++/85343\n \t* config/abi/pre/gnu.ver: Export new symbol.\n \t* doc/xml/manual/abi.xml: Document new versions."}, {"sha": "522cee13b90eb92d68ab345d556d111ccc6926a9", "filename": "libstdc++-v3/src/c++17/default_resource.h", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e130482e69aef0dbd0bc4c218a82ba7b64bce7/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Fdefault_resource.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e130482e69aef0dbd0bc4c218a82ba7b64bce7/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Fdefault_resource.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Fdefault_resource.h?ref=26e130482e69aef0dbd0bc4c218a82ba7b64bce7", "patch": "@@ -0,0 +1,11 @@\n+// This is only in a header so we can use the system_header pragma,\n+// to suppress the warning caused by using a reserved init_priority.\n+#pragma GCC system_header\n+\n+#if ATOMIC_POINTER_LOCK_FREE == 2 || defined(__GTHREAD_MUTEX_INIT)\n+# error \"This file should not be included for this build\"\n+#endif\n+\n+struct {\n+  atomic_mem_res obj = &newdel_res.obj;\n+} default_res __attribute__ ((init_priority (100)));"}, {"sha": "bd8f32d931ec2b0dfa57bea3a6c89f4a4d2401a1", "filename": "libstdc++-v3/src/c++17/memory_resource.cc", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26e130482e69aef0dbd0bc4c218a82ba7b64bce7/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Fmemory_resource.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26e130482e69aef0dbd0bc4c218a82ba7b64bce7/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Fmemory_resource.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Fmemory_resource.cc?ref=26e130482e69aef0dbd0bc4c218a82ba7b64bce7", "patch": "@@ -25,6 +25,10 @@\n #include <memory_resource>\n #include <atomic>\n #include <new>\n+#if ATOMIC_POINTER_LOCK_FREE != 2\n+# include <bits/std_mutex.h>\t// std::mutex, std::lock_guard\n+# include <bits/move.h>\t\t// std::exchange\n+#endif\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n@@ -81,7 +85,42 @@ namespace pmr\n \n     constant_init<newdel_res_t> newdel_res{};\n     constant_init<null_res_t> null_res{};\n-    constant_init<atomic<memory_resource*>> default_res{&newdel_res.obj};\n+#if ATOMIC_POINTER_LOCK_FREE == 2\n+    using atomic_mem_res = atomic<memory_resource*>;\n+# define _GLIBCXX_ATOMIC_MEM_RES_CAN_BE_CONSTANT_INITIALIZED\n+#else\n+    // Can't use pointer-width atomics, define a type using a mutex instead:\n+    struct atomic_mem_res\n+    {\n+# ifdef __GTHREAD_MUTEX_INIT\n+#  define _GLIBCXX_ATOMIC_MEM_RES_CAN_BE_CONSTANT_INITIALIZED\n+      // std::mutex has constexpr constructor\n+      constexpr\n+# endif\n+      atomic_mem_res(memory_resource* r) : val(r) { }\n+\n+      mutex mx;\n+      memory_resource* val;\n+\n+      memory_resource* load()\n+      {\n+\tlock_guard<mutex> lock(mx);\n+\treturn val;\n+      }\n+\n+      memory_resource* exchange(memory_resource* r)\n+      {\n+\tlock_guard<mutex> lock(mx);\n+\treturn std::exchange(val, r);\n+      }\n+    };\n+#endif // ATOMIC_POINTER_LOCK_FREE == 2\n+\n+#ifdef _GLIBCXX_ATOMIC_MEM_RES_CAN_BE_CONSTANT_INITIALIZED\n+    constant_init<atomic_mem_res> default_res{&newdel_res.obj};\n+#else\n+# include \"default_resource.h\"\n+#endif\n   } // namespace\n \n   memory_resource*"}]}