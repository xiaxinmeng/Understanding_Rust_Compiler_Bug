{"sha": "c0e11c6afb448b0a9423b62c86c207945a0f5335", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzBlMTFjNmFmYjQ0OGIwYTk0MjNiNjJjODZjMjA3OTQ1YTBmNTMzNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2018-06-19T00:38:38Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2018-06-19T00:38:38Z"}, "message": "Use a range for\tLAMBDA_EXPR_LOCATION.\n\n\t* parser.c (cp_parser_lambda_expression): Use a range for\n\tLAMBDA_EXPR_LOCATION.\n\nFrom-SVN: r261727", "tree": {"sha": "76ad9f593ec724b0cea53b8c9529cd3bd791762d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76ad9f593ec724b0cea53b8c9529cd3bd791762d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0e11c6afb448b0a9423b62c86c207945a0f5335", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0e11c6afb448b0a9423b62c86c207945a0f5335", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0e11c6afb448b0a9423b62c86c207945a0f5335", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0e11c6afb448b0a9423b62c86c207945a0f5335/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "44e3e545a30ef6425cb7fbfb48fbc01056233ae0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44e3e545a30ef6425cb7fbfb48fbc01056233ae0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44e3e545a30ef6425cb7fbfb48fbc01056233ae0"}], "stats": {"total": 9, "additions": 9, "deletions": 0}, "files": [{"sha": "3e3b61038324b36107a361e5f571eeff7e97376f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0e11c6afb448b0a9423b62c86c207945a0f5335/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0e11c6afb448b0a9423b62c86c207945a0f5335/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c0e11c6afb448b0a9423b62c86c207945a0f5335", "patch": "@@ -1,5 +1,8 @@\n 2018-06-18  Jason Merrill  <jason@redhat.com>\n \n+\t* parser.c (cp_parser_lambda_expression): Use a range for\n+\tLAMBDA_EXPR_LOCATION.\n+\n \tPR c++/86200 - ICE with unexpanded pack in lambda parameter.\n \t* pt.c (find_parameter_packs_r) [LAMBDA_EXPR]: Also look into the\n \tfunction type."}, {"sha": "ae9267e6d83c4319d875f4e0ddd49b82f03a8894", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0e11c6afb448b0a9423b62c86c207945a0f5335/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0e11c6afb448b0a9423b62c86c207945a0f5335/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=c0e11c6afb448b0a9423b62c86c207945a0f5335", "patch": "@@ -10198,6 +10198,12 @@ cp_parser_lambda_expression (cp_parser* parser)\n   /* And now that we're done, push proxies for an enclosing lambda.  */\n   insert_pending_capture_proxies ();\n \n+  /* Update the lambda expression to a range.  */\n+  cp_token *end_tok = cp_lexer_previous_token (parser->lexer);\n+  LAMBDA_EXPR_LOCATION (lambda_expr) = make_location (token->location,\n+\t\t\t\t\t\t      token->location,\n+\t\t\t\t\t\t      end_tok->location);\n+\n   if (ok)\n     lambda_expr = build_lambda_object (lambda_expr);\n   else"}]}