{"sha": "3a324b98c577fd46d4eb56ffa61bbf67e6951a59", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2EzMjRiOThjNTc3ZmQ0NmQ0ZWI1NmZmYTYxYmJmNjdlNjk1MWE1OQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2017-05-01T10:18:18Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2017-05-01T10:18:18Z"}, "message": "tree.c (substitute_in_expr): Also inline a call if the replacement expression is another instance of one of...\n\n\t* tree.c (substitute_in_expr) <tcc_vl_exp>: Also inline a call if the\n\treplacement expression is another instance of one of its arguments.\n\nFrom-SVN: r247431", "tree": {"sha": "3ebb68d33165ffaceb78449da165c12e1fda516a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ebb68d33165ffaceb78449da165c12e1fda516a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a324b98c577fd46d4eb56ffa61bbf67e6951a59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a324b98c577fd46d4eb56ffa61bbf67e6951a59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a324b98c577fd46d4eb56ffa61bbf67e6951a59", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a324b98c577fd46d4eb56ffa61bbf67e6951a59/comments", "author": null, "committer": null, "parents": [{"sha": "30776a1468d25d156c02b2484d5ad7578f829d2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30776a1468d25d156c02b2484d5ad7578f829d2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30776a1468d25d156c02b2484d5ad7578f829d2e"}], "stats": {"total": 29, "additions": 24, "deletions": 5}, "files": [{"sha": "07b205c81bfb1e7cd77bdde66c6d5de46e99f315", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a324b98c577fd46d4eb56ffa61bbf67e6951a59/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a324b98c577fd46d4eb56ffa61bbf67e6951a59/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3a324b98c577fd46d4eb56ffa61bbf67e6951a59", "patch": "@@ -1,3 +1,8 @@\n+2017-05-01  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* tree.c (substitute_in_expr) <tcc_vl_exp>: Also inline a call if the\n+\treplacement expression is another instance of one of its arguments.\n+\n 2017-05-01  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/79430"}, {"sha": "1a926d9a650bde84ee4ab1d19e7540165fc8560a", "filename": "gcc/tree.c", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a324b98c577fd46d4eb56ffa61bbf67e6951a59/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a324b98c577fd46d4eb56ffa61bbf67e6951a59/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=3a324b98c577fd46d4eb56ffa61bbf67e6951a59", "patch": "@@ -3886,15 +3886,29 @@ substitute_in_expr (tree exp, tree f, tree r)\n \n \t  new_tree = NULL_TREE;\n \n-\t  /* If we are trying to replace F with a constant, inline back\n+\t  /* If we are trying to replace F with a constant or with another\n+\t     instance of one of the arguments of the call, inline back\n \t     functions which do nothing else than computing a value from\n \t     the arguments they are passed.  This makes it possible to\n \t     fold partially or entirely the replacement expression.  */\n-\t  if (CONSTANT_CLASS_P (r) && code == CALL_EXPR)\n+\t  if (code == CALL_EXPR)\n \t    {\n-\t      tree t = maybe_inline_call_in_expr (exp);\n-\t      if (t)\n-\t\treturn SUBSTITUTE_IN_EXPR (t, f, r);\n+\t      bool maybe_inline = false;\n+\t      if (CONSTANT_CLASS_P (r))\n+\t\tmaybe_inline = true;\n+\t      else\n+\t\tfor (i = 3; i < TREE_OPERAND_LENGTH (exp); i++)\n+\t\t  if (operand_equal_p (TREE_OPERAND (exp, i), r, 0))\n+\t\t    {\n+\t\t      maybe_inline = true;\n+\t\t      break;\n+\t\t    }\n+\t      if (maybe_inline)\n+\t\t{\n+\t\t  tree t = maybe_inline_call_in_expr (exp);\n+\t\t  if (t)\n+\t\t    return SUBSTITUTE_IN_EXPR (t, f, r);\n+\t\t}\n \t    }\n \n \t  for (i = 1; i < TREE_OPERAND_LENGTH (exp); i++)"}]}