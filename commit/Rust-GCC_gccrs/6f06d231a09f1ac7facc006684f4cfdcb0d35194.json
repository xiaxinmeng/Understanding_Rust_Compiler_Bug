{"sha": "6f06d231a09f1ac7facc006684f4cfdcb0d35194", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmYwNmQyMzFhMDlmMWFjN2ZhY2MwMDY2ODRmNGNmZGNiMGQzNTE5NA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2007-09-06T01:24:59Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2007-09-06T01:24:59Z"}, "message": "re PR c++/15097 (code generator problem with ::delete and multiple inheritance and virtual deconstructs)\n\n        PR c++/15097\n        * init.c (build_delete): Use build_headof to get the address of the\n        complete object if we aren't using the deleting destructor.\n        * rtti.c (build_headof): No longer static.\n        * cp-tree.h: Declare it.\n\nFrom-SVN: r128172", "tree": {"sha": "b083a51d2031960784caa354c53787eb62f3271a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b083a51d2031960784caa354c53787eb62f3271a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f06d231a09f1ac7facc006684f4cfdcb0d35194", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f06d231a09f1ac7facc006684f4cfdcb0d35194", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f06d231a09f1ac7facc006684f4cfdcb0d35194", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f06d231a09f1ac7facc006684f4cfdcb0d35194/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "db44b39f4f9a464b9277dc5bbc1fba362a954ec0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db44b39f4f9a464b9277dc5bbc1fba362a954ec0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db44b39f4f9a464b9277dc5bbc1fba362a954ec0"}], "stats": {"total": 78, "additions": 75, "deletions": 3}, "files": [{"sha": "a32ecdb1560497cbd8247d11ccdf78c4bd24a24b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f06d231a09f1ac7facc006684f4cfdcb0d35194/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f06d231a09f1ac7facc006684f4cfdcb0d35194/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6f06d231a09f1ac7facc006684f4cfdcb0d35194", "patch": "@@ -1,3 +1,11 @@\n+2007-09-05  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/15097\n+\t* init.c (build_delete): Use build_headof to get the address of the\n+\tcomplete object if we aren't using the deleting destructor.\n+\t* rtti.c (build_headof): No longer static.\n+\t* cp-tree.h: Declare it.\n+\n 2007-09-06  Jakub Jelinek  <jakub@redhat.com>\n \n \t* decl.c (duplicate_decls): Set TREE_NOTHROW on __builtin_XX\n@@ -28,6 +36,9 @@\n \n 2007-09-04  Jason Merrill  <jason@redhat.com>\n \n+\t* except.c (initialize_handler_parm): Use\n+\tfold_build_cleanup_point_expr.\n+\n \tPR c++/31419\n \t* call.c (reference_binding): Don't look for user-defined conversions\n \tto the same type."}, {"sha": "9bd8ed2c30233e711a914850ea9db8081a665e49", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f06d231a09f1ac7facc006684f4cfdcb0d35194/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f06d231a09f1ac7facc006684f4cfdcb0d35194/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=6f06d231a09f1ac7facc006684f4cfdcb0d35194", "patch": "@@ -4481,6 +4481,7 @@ extern void init_rtti_processing\t\t(void);\n extern tree build_typeid\t\t\t(tree);\n extern tree get_tinfo_decl\t\t\t(tree);\n extern tree get_typeid\t\t\t\t(tree);\n+extern tree build_headof\t\t\t(tree);\n extern tree build_dynamic_cast\t\t\t(tree, tree);\n extern void emit_support_tinfos\t\t\t(void);\n extern bool emit_tinfo_decl\t\t\t(tree);"}, {"sha": "1aa732c26b05d28c2dab5a7d02cd19d81d9f807a", "filename": "gcc/cp/init.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f06d231a09f1ac7facc006684f4cfdcb0d35194/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f06d231a09f1ac7facc006684f4cfdcb0d35194/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=6f06d231a09f1ac7facc006684f4cfdcb0d35194", "patch": "@@ -2866,6 +2866,7 @@ build_delete (tree type, tree addr, special_function_kind auto_delete,\n     }\n   else\n     {\n+      tree head = NULL_TREE;\n       tree do_delete = NULL_TREE;\n       tree ifexp;\n \n@@ -2879,8 +2880,9 @@ build_delete (tree type, tree addr, special_function_kind auto_delete,\n \t{\n \t  /* We will use ADDR multiple times so we must save it.  */\n \t  addr = save_expr (addr);\n+\t  head = get_target_expr (build_headof (addr));\n \t  /* Delete the object.  */\n-\t  do_delete = build_builtin_delete_call (addr);\n+\t  do_delete = build_builtin_delete_call (head);\n \t  /* Otherwise, treat this like a complete object destructor\n \t     call.  */\n \t  auto_delete = sfk_complete_destructor;\n@@ -2919,6 +2921,10 @@ build_delete (tree type, tree addr, special_function_kind auto_delete,\n       if (do_delete)\n \texpr = build2 (COMPOUND_EXPR, void_type_node, expr, do_delete);\n \n+      /* We need to calculate this before the dtor changes the vptr.  */\n+      if (head)\n+\texpr = build2 (COMPOUND_EXPR, void_type_node, head, expr);\n+\n       if (flags & LOOKUP_DESTRUCTOR)\n \t/* Explicit destructor call; don't check for null pointer.  */\n \tifexp = integer_one_node;"}, {"sha": "9d2ffdf28235ee0f29abb1bfa0893eefcf0eb96d", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f06d231a09f1ac7facc006684f4cfdcb0d35194/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f06d231a09f1ac7facc006684f4cfdcb0d35194/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=6f06d231a09f1ac7facc006684f4cfdcb0d35194", "patch": "@@ -101,7 +101,6 @@ VEC(tree,gc) *unemitted_tinfo_decls;\n    and are generated as needed. */\n static GTY (()) VEC(tinfo_s,gc) *tinfo_descs;\n \n-static tree build_headof (tree);\n static tree ifnonnull (tree, tree);\n static tree tinfo_name (tree);\n static tree build_dynamic_cast_1 (tree, tree);\n@@ -155,7 +154,7 @@ init_rtti_processing (void)\n    virtual functions (TYPE_POLYMORPHIC_P), else just return the\n    expression.  */\n \n-static tree\n+tree\n build_headof (tree exp)\n {\n   tree type = TREE_TYPE (exp);"}, {"sha": "8a486beaa5a22a8799b0f746f229f6089d6c962c", "filename": "gcc/testsuite/g++.dg/init/delete2.C", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f06d231a09f1ac7facc006684f4cfdcb0d35194/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fdelete2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f06d231a09f1ac7facc006684f4cfdcb0d35194/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fdelete2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fdelete2.C?ref=6f06d231a09f1ac7facc006684f4cfdcb0d35194", "patch": "@@ -0,0 +1,55 @@\n+// PR c++/15097\n+// { dg-do run }\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+extern \"C\" void * malloc (size_t);\n+extern \"C\" void free (void *);\n+extern \"C\" void abort(void);\n+\n+void *saved;\n+\n+void * operator new (size_t size)\n+{\n+  void *p = malloc (size);\n+  saved = p;\n+  return p;\n+}\n+\n+void operator delete (void *p)\n+{\n+  if (p != saved)\n+    abort ();\n+  free (p);\n+}\n+\n+struct B1\n+{\n+    virtual ~B1 () throw() {}\n+    B1 (){}\n+    int x;\n+};\n+struct B2\n+{\n+    virtual ~B2 () throw() {}\n+    B2 (){}\n+    int x;\n+};\n+struct D : B1, B2\n+{\n+    D (){}\n+    ~D () throw() {}\n+    int y;\n+};\n+void f1 (D*);\n+void f2 (B2*);\n+void f3 (B1*);\n+int main (void)\n+{\n+    f1 (::new D);\n+    f2 (::new D);     \n+    f3 (::new D);\n+}\n+void f1 ( D* p) { ::delete p; }\n+void f2 (B2* p) { ::delete p; }  \n+void f3 (B1* p) { ::delete p; }"}]}