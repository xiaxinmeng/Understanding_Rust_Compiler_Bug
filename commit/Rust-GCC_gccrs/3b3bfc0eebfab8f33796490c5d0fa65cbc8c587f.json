{"sha": "3b3bfc0eebfab8f33796490c5d0fa65cbc8c587f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2IzYmZjMGVlYmZhYjhmMzM3OTY0OTBjNWQwZmE2NWNiYzhjNTg3Zg==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@integrable-solutions.net", "date": "2004-01-11T16:15:42Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2004-01-11T16:15:42Z"}, "message": "std_complex.h (std::complex<>::real): Return a reference.\n\n        * include/std/std_complex.h (std::complex<>::real): Return a\n        reference. Add non-const overload.\n        (std::complex<>::real): Likewise.\n        (std::real): Likewise.\n        (std::imag): Likewise.\n        (std::operator+): Tidy.\n        (std::operator-): Likewise.\n        (std::operator*): Likewise.\n        (std::operator/): Likewise.\n        (std::operator>>): Likewise.\n\nFrom-SVN: r75680", "tree": {"sha": "250fcb1b4de9fd2bba777ab99d9765ee5889ba1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/250fcb1b4de9fd2bba777ab99d9765ee5889ba1f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b3bfc0eebfab8f33796490c5d0fa65cbc8c587f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b3bfc0eebfab8f33796490c5d0fa65cbc8c587f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b3bfc0eebfab8f33796490c5d0fa65cbc8c587f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b3bfc0eebfab8f33796490c5d0fa65cbc8c587f/comments", "author": {"login": "cxx-undef", "id": 5528103, "node_id": "MDQ6VXNlcjU1MjgxMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5528103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cxx-undef", "html_url": "https://github.com/cxx-undef", "followers_url": "https://api.github.com/users/cxx-undef/followers", "following_url": "https://api.github.com/users/cxx-undef/following{/other_user}", "gists_url": "https://api.github.com/users/cxx-undef/gists{/gist_id}", "starred_url": "https://api.github.com/users/cxx-undef/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cxx-undef/subscriptions", "organizations_url": "https://api.github.com/users/cxx-undef/orgs", "repos_url": "https://api.github.com/users/cxx-undef/repos", "events_url": "https://api.github.com/users/cxx-undef/events{/privacy}", "received_events_url": "https://api.github.com/users/cxx-undef/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0bcf8261f4b9ef56378971c1745dd79024d44063", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bcf8261f4b9ef56378971c1745dd79024d44063", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bcf8261f4b9ef56378971c1745dd79024d44063"}], "stats": {"total": 184, "additions": 148, "deletions": 36}, "files": [{"sha": "3b594cfb3bb2a7bc165dff4e4badb96620baebfe", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b3bfc0eebfab8f33796490c5d0fa65cbc8c587f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b3bfc0eebfab8f33796490c5d0fa65cbc8c587f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3b3bfc0eebfab8f33796490c5d0fa65cbc8c587f", "patch": "@@ -1,3 +1,16 @@\n+2004-01-11  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* include/std/std_complex.h (std::complex<>::real): Return a\n+\treference. Add non-const overload.\n+\t(std::complex<>::real): Likewise.\n+\t(std::real): Likewise.\n+\t(std::imag): Likewise.\n+\t(std::operator+): Tidy.\n+\t(std::operator-): Likewise.\n+\t(std::operator*): Likewise.\n+\t(std::operator/): Likewise.\n+\t(std::operator>>): Likewise.\n+\n 2004-01-11  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/13582"}, {"sha": "4fe80a557694671140d72b667c6ee5a46383c843", "filename": "libstdc++-v3/include/std/std_complex.h", "status": "modified", "additions": 135, "deletions": 36, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b3bfc0eebfab8f33796490c5d0fa65cbc8c587f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_complex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b3bfc0eebfab8f33796490c5d0fa65cbc8c587f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_complex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_complex.h?ref=3b3bfc0eebfab8f33796490c5d0fa65cbc8c587f", "patch": "@@ -1,6 +1,6 @@\n // The template and inlines for the -*- C++ -*- complex number classes.\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -96,9 +96,11 @@ namespace std\n       // complex (const complex<_Tp>&);\n       template<typename _Up>\n         complex(const complex<_Up>&);\n-        \n-      _Tp real() const;\n-      _Tp imag() const;\n+\n+      _Tp& real(); \n+      const _Tp& real() const;\n+      _Tp& imag();\n+      const _Tp& imag() const;\n \n       complex<_Tp>& operator=(const _Tp&);\n       complex<_Tp>& operator+=(const _Tp&);\n@@ -121,15 +123,24 @@ namespace std\n         complex<_Tp>& operator/=(const complex<_Up>&);\n \n     private:\n-      _Tp _M_real, _M_imag;\n+      _Tp _M_real;\n+      _Tp _M_imag;\n     };\n \n   template<typename _Tp>\n-    inline _Tp\n+    inline _Tp&\n+    complex<_Tp>::real() { return _M_real; }\n+\n+  template<typename _Tp>\n+    inline const _Tp&\n     complex<_Tp>::real() const { return _M_real; }\n \n   template<typename _Tp>\n-    inline _Tp\n+    inline _Tp&\n+    complex<_Tp>::imag() { return _M_imag; }\n+\n+  template<typename _Tp>\n+    inline const _Tp&\n     complex<_Tp>::imag() const { return _M_imag; }\n \n   template<typename _Tp>\n@@ -253,62 +264,110 @@ namespace std\n   template<typename _Tp>\n     inline complex<_Tp>\n     operator+(const complex<_Tp>& __x, const complex<_Tp>& __y)\n-    { return complex<_Tp> (__x) += __y; }\n+    {\n+      complex<_Tp> __r = __x;\n+      __r += __y;\n+      return __r;\n+    }\n \n   template<typename _Tp>\n     inline complex<_Tp>\n     operator+(const complex<_Tp>& __x, const _Tp& __y)\n-    { return complex<_Tp> (__x) += __y; }\n+    {\n+      complex<_Tp> __r = __x;\n+      __r.real() += __y;\n+      return __r;\n+    }\n \n   template<typename _Tp>\n     inline complex<_Tp>\n     operator+(const _Tp& __x, const complex<_Tp>& __y)\n-    { return complex<_Tp> (__y) += __x; }\n+    {\n+      complex<_Tp> __r = __y;\n+      __r.real() += __x;\n+      return __r;\n+    }\n \n   template<typename _Tp>\n     inline complex<_Tp>\n     operator-(const complex<_Tp>& __x, const complex<_Tp>& __y)\n-    { return complex<_Tp> (__x) -= __y; }\n+    {\n+      complex<_Tp> __r = __x;\n+      __r -= __y;\n+      return __r;\n+    }\n     \n   template<typename _Tp>\n     inline complex<_Tp>\n     operator-(const complex<_Tp>& __x, const _Tp& __y)\n-    { return complex<_Tp> (__x) -= __y; }\n+    {\n+      complex<_Tp> __r = __x;\n+      __r.real() -= __y;\n+      return __r;\n+    }\n \n   template<typename _Tp>\n     inline complex<_Tp>\n     operator-(const _Tp& __x, const complex<_Tp>& __y)\n-    { return complex<_Tp> (__x) -= __y; }\n+    {\n+      complex<_Tp> __r(__x, -__y.imag());\n+      __r.real() -= __y.real();\n+      return __r;\n+    }\n \n   template<typename _Tp>\n     inline complex<_Tp>\n     operator*(const complex<_Tp>& __x, const complex<_Tp>& __y)\n-    { return complex<_Tp> (__x) *= __y; }\n+    {\n+      complex<_Tp> __r = __x;\n+      __r *= __y;\n+      return __r;\n+    }\n \n   template<typename _Tp>\n     inline complex<_Tp>\n     operator*(const complex<_Tp>& __x, const _Tp& __y)\n-    { return complex<_Tp> (__x) *= __y; }\n+    {\n+      complex<_Tp> __r = __x;\n+      __r *= __y;\n+      return __r;\n+    }\n \n   template<typename _Tp>\n     inline complex<_Tp>\n     operator*(const _Tp& __x, const complex<_Tp>& __y)\n-    { return complex<_Tp> (__y) *= __x; }\n+    {\n+      complex<_Tp> __r = __y;\n+      __r *= __x;\n+      return __r;\n+    }\n \n   template<typename _Tp>\n     inline complex<_Tp>\n     operator/(const complex<_Tp>& __x, const complex<_Tp>& __y)\n-    { return complex<_Tp> (__x) /= __y; }\n+    {\n+      complex<_Tp> __r = __x;\n+      __r /= __y;\n+      return __r;\n+    }\n     \n   template<typename _Tp>\n     inline complex<_Tp>\n     operator/(const complex<_Tp>& __x, const _Tp& __y)\n-    { return complex<_Tp> (__x) /= __y; }\n+    {\n+      complex<_Tp> __r = __x;\n+      __r /= __y;\n+      return __r;\n+    }\n \n   template<typename _Tp>\n     inline complex<_Tp>\n     operator/(const _Tp& __x, const complex<_Tp>& __y)\n-    { return complex<_Tp> (__x) /= __y; }\n+    {\n+      complex<_Tp> __r = __x;\n+      __r /= __y;\n+      return __r;\n+    }\n \n   template<typename _Tp>\n     inline complex<_Tp>\n@@ -369,15 +428,15 @@ namespace std\n \t\t__is.setstate(ios_base::failbit);\n \t    }\n \t  else if (__ch == ')') \n-\t    __x = complex<_Tp>(__re_x, _Tp(0));\n+\t    __x = __re_x;\n \t  else\n \t    __is.setstate(ios_base::failbit);\n \t}\n       else \n \t{\n \t  __is.putback(__ch);\n \t  __is >> __re_x;\n-\t  __x = complex<_Tp>(__re_x, _Tp(0));\n+\t  __x = __re_x;\n \t}\n       return __is;\n     }\n@@ -396,12 +455,22 @@ namespace std\n \n   // Values\n   template<typename _Tp>\n-    inline _Tp\n+    inline _Tp&\n+    real(complex<_Tp>& __z)\n+    { return __z.real(); }\n+    \n+  template<typename _Tp>\n+    inline const _Tp&\n     real(const complex<_Tp>& __z)\n     { return __z.real(); }\n     \n   template<typename _Tp>\n-    inline _Tp\n+    inline _Tp&\n+    imag(complex<_Tp>& __z)\n+    { return __z.imag(); }\n+    \n+  template<typename _Tp>\n+    inline const _Tp&\n     imag(const complex<_Tp>& __z)\n     { return __z.imag(); }\n \n@@ -605,8 +674,10 @@ namespace std\n     explicit complex(const complex<double>&);\n     explicit complex(const complex<long double>&);\n \n-    float real() const;\n-    float imag() const;\n+    float& real();\n+    const float& real() const;\n+    float& imag();\n+    const float& imag() const;\n \n     complex<float>& operator=(float);\n     complex<float>& operator+=(float);\n@@ -638,11 +709,19 @@ namespace std\n     friend class complex<long double>;\n   };\n \n-  inline float\n+  inline float&\n+  complex<float>::real()\n+  { return __real__ _M_value; }\n+\n+  inline const float&\n   complex<float>::real() const\n   { return __real__ _M_value; }\n \n-  inline float\n+  inline float&\n+  complex<float>::imag()\n+  { return __imag__ _M_value; }\n+\n+  inline const float&\n   complex<float>::imag() const\n   { return __imag__ _M_value; }\n \n@@ -751,9 +830,11 @@ namespace std\n #endif\n     complex(const complex<float>&);\n     explicit complex(const complex<long double>&);\n-        \n-    double real() const;\n-    double imag() const;\n+\n+    double& real();\n+    const double& real() const;\n+    double& imag();\n+    const double& imag() const;\n         \n     complex<double>& operator=(double);\n     complex<double>& operator+=(double);\n@@ -784,11 +865,19 @@ namespace std\n     friend class complex<long double>;\n   };\n \n-  inline double\n+  inline double&\n+  complex<double>::real()\n+  { return __real__ _M_value; }\n+\n+  inline const double&\n   complex<double>::real() const\n   { return __real__ _M_value; }\n \n-  inline double\n+  inline double&\n+  complex<double>::imag()\n+  { return __imag__ _M_value; }\n+\n+  inline const double&\n   complex<double>::imag() const\n   { return __imag__ _M_value; }\n \n@@ -898,8 +987,10 @@ namespace std\n     complex(const complex<float>&);\n     complex(const complex<double>&);\n \n-    long double real() const;\n-    long double imag() const;\n+    long double& real();\n+    const long double& real() const;\n+    long double& imag();\n+    const long double& imag() const;\n \n     complex<long double>& operator= (long double);\n     complex<long double>& operator+= (long double);\n@@ -937,11 +1028,19 @@ namespace std\n     __imag__ _M_value = __i;\n   }\n \n-  inline long double\n+  inline long double&\n+  complex<long double>::real()\n+  { return __real__ _M_value; }\n+\n+  inline const long double&\n   complex<long double>::real() const\n   { return __real__ _M_value; }\n \n-  inline long double\n+  inline long double&\n+  complex<long double>::imag()\n+  { return __imag__ _M_value; }\n+\n+  inline const long double&\n   complex<long double>::imag() const\n   { return __imag__ _M_value; }\n "}]}