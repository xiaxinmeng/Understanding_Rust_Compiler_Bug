{"sha": "c9942e5faee857bdb4a5cdb6b9c16ea5cc59c542", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzk5NDJlNWZhZWU4NTdiZGI0YTVjZGI2YjljMTZlYTVjYzU5YzU0Mg==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2019-12-08T12:25:15Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2019-12-08T12:25:15Z"}, "message": "re PR fortran/92755 (ICE in gfc_dep_resolver, at fortran/dependency.c:2123)\n\n2019-12-08  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/92755\n\t* dependency.c (gfc_dep_resolver):  Move skipping of _data ref\n\tinto the loop.\n\n2019-12-08  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/92755\n\t* gfortran.dg/dependency_57.f90: New test.\n\nFrom-SVN: r279086", "tree": {"sha": "4c51fe1fcd1e27f92538cde361f0fdd0185650af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c51fe1fcd1e27f92538cde361f0fdd0185650af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c9942e5faee857bdb4a5cdb6b9c16ea5cc59c542", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9942e5faee857bdb4a5cdb6b9c16ea5cc59c542", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9942e5faee857bdb4a5cdb6b9c16ea5cc59c542", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9942e5faee857bdb4a5cdb6b9c16ea5cc59c542/comments", "author": null, "committer": null, "parents": [{"sha": "9f5836a6927c18a18b5bfbdfd95eb2a5f4b834b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f5836a6927c18a18b5bfbdfd95eb2a5f4b834b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f5836a6927c18a18b5bfbdfd95eb2a5f4b834b2"}], "stats": {"total": 49, "additions": 36, "deletions": 13}, "files": [{"sha": "60114dba76343f500dab69cee5be20c414aeb958", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9942e5faee857bdb4a5cdb6b9c16ea5cc59c542/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9942e5faee857bdb4a5cdb6b9c16ea5cc59c542/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c9942e5faee857bdb4a5cdb6b9c16ea5cc59c542", "patch": "@@ -1,3 +1,9 @@\n+2019-12-08  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/92755\n+\t* dependency.c (gfc_dep_resolver):  Move skipping of _data ref\n+\tinto the loop.\n+\n 2019-12-07  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR fortran/92793\n@@ -28,7 +34,7 @@\n 2019-12-06  Tobias Burnus  <tobias@codesourcery.com>\n \t    Kwok Cheung Yeung  <kcy@codesourcery.com>\n \n-\t* trans-openmp.c (gfc_build_conditional_assign, \n+\t* trans-openmp.c (gfc_build_conditional_assign,\n \tgfc_build_conditional_assign_expr): New static functions.\n \t(gfc_omp_finish_clause, gfc_trans_omp_clauses): Handle mapping of\n \tabsent optional arguments and fix mapping of present optional args."}, {"sha": "394d85b48a2fe0cd67db56583f2ac34d3f9c8513", "filename": "gcc/fortran/dependency.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9942e5faee857bdb4a5cdb6b9c16ea5cc59c542/gcc%2Ffortran%2Fdependency.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9942e5faee857bdb4a5cdb6b9c16ea5cc59c542/gcc%2Ffortran%2Fdependency.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdependency.c?ref=c9942e5faee857bdb4a5cdb6b9c16ea5cc59c542", "patch": "@@ -2098,25 +2098,25 @@ gfc_dep_resolver (gfc_ref *lref, gfc_ref *rref, gfc_reverse *reverse,\n   gfc_dependency this_dep;\n   bool same_component = false;\n \n-  /* The refs might come in mixed, one with a _data component and one\n-     without.  Look at their next reference in order to avoid an\n-     ICE.  */\n-\n-  if (lref && lref->type == REF_COMPONENT && lref->u.c.component\n-      && strcmp (lref->u.c.component->name, \"_data\") == 0)\n-    lref = lref->next;\n-\n-  if (rref && rref->type == REF_COMPONENT && rref->u.c.component\n-      && strcmp (rref->u.c.component->name, \"_data\") == 0)\n-    rref = rref->next;\n-\n   this_dep = GFC_DEP_ERROR;\n   fin_dep = GFC_DEP_ERROR;\n   /* Dependencies due to pointers should already have been identified.\n      We only need to check for overlapping array references.  */\n \n   while (lref && rref)\n     {\n+      /* The refs might come in mixed, one with a _data component and one\n+\t without.  Look at their next reference in order to avoid an\n+\t ICE.  */\n+\n+      if (lref && lref->type == REF_COMPONENT && lref->u.c.component\n+\t  && strcmp (lref->u.c.component->name, \"_data\") == 0)\n+\tlref = lref->next;\n+\n+      if (rref && rref->type == REF_COMPONENT && rref->u.c.component\n+\t  && strcmp (rref->u.c.component->name, \"_data\") == 0)\n+\trref = rref->next;\n+\n       /* We're resolving from the same base symbol, so both refs should be\n \t the same type.  We traverse the reference chain until we find ranges\n \t that are not equal.  */"}, {"sha": "6c28808cee26b287dda74e59a2d7e2e83c07bc60", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9942e5faee857bdb4a5cdb6b9c16ea5cc59c542/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9942e5faee857bdb4a5cdb6b9c16ea5cc59c542/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c9942e5faee857bdb4a5cdb6b9c16ea5cc59c542", "patch": "@@ -1,3 +1,8 @@\n+2019-12-08  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/92755\n+\t* gfortran.dg/dependency_57.f90: New test.\n+\n 2019-12-08  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* g++.dg/cpp0x/gen-attrs-36.C: Update expected diagnostics."}, {"sha": "fdf95b24c63c1a0fdd1df5fcb117b78f9983eb2e", "filename": "gcc/testsuite/gfortran.dg/dependency_57.f90", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9942e5faee857bdb4a5cdb6b9c16ea5cc59c542/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_57.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9942e5faee857bdb4a5cdb6b9c16ea5cc59c542/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_57.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_57.f90?ref=c9942e5faee857bdb4a5cdb6b9c16ea5cc59c542", "patch": "@@ -0,0 +1,12 @@\n+! { dg-do compile }\n+! PR 92755 - this used to cause an ICE.\n+! Original test case by Gerhard Steinmetz\n+program p\n+   type t\n+   end type\n+   type t2\n+      class(t), allocatable :: a(:)\n+   end type\n+   type(t2) :: z\n+   z%a = [z%a]\n+end"}]}