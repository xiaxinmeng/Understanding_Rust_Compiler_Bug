{"sha": "6744f40032f27c47186a71c87342efbb07663f5b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njc0NGY0MDAzMmYyN2M0NzE4NmE3MWM4NzM0MmVmYmIwNzY2M2Y1Yg==", "commit": {"author": {"name": "Per Bothner", "email": "per@bothner.com", "date": "2004-09-30T23:23:52Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "2004-09-30T23:23:52Z"}, "message": "More cleanup for --enable-mapped-location.\n\n\t* class.c (push_class):  If USE_MAPPED_LOCATION don't set\n\tinput_location here.  Instead do it in give_name_to_class.\n\t(build_class_ref):  Set DECL_ARTIFICIAL, for the sake of dwarf2out.\n\t* expr.c (expand_byte_code): Call linemap_line_start.\n\t* expr.c (build_expr_wfl):  If USE_MAPPED_LOCATION, change final\n\tparameters to a source_location.  Don't need EXPR_WFL_FILENAME_NODE.\n\t(expr_add_location):  New function, if USE_MAPPED_LOCATION.\n\t* class.c (maybe_layout_super_class):  Adjust build_expr_wfl call\n\tto USE_MAPPED_LOCATION case.\n\nFrom-SVN: r88365", "tree": {"sha": "79f94a67e76920084496be1c8982996a4fea29d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79f94a67e76920084496be1c8982996a4fea29d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6744f40032f27c47186a71c87342efbb07663f5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6744f40032f27c47186a71c87342efbb07663f5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6744f40032f27c47186a71c87342efbb07663f5b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6744f40032f27c47186a71c87342efbb07663f5b/comments", "author": {"login": "PerBothner", "id": 10293361, "node_id": "MDQ6VXNlcjEwMjkzMzYx", "avatar_url": "https://avatars.githubusercontent.com/u/10293361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PerBothner", "html_url": "https://github.com/PerBothner", "followers_url": "https://api.github.com/users/PerBothner/followers", "following_url": "https://api.github.com/users/PerBothner/following{/other_user}", "gists_url": "https://api.github.com/users/PerBothner/gists{/gist_id}", "starred_url": "https://api.github.com/users/PerBothner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PerBothner/subscriptions", "organizations_url": "https://api.github.com/users/PerBothner/orgs", "repos_url": "https://api.github.com/users/PerBothner/repos", "events_url": "https://api.github.com/users/PerBothner/events{/privacy}", "received_events_url": "https://api.github.com/users/PerBothner/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "de1041046f5bbd7ec8156777b3977d87113ef1db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de1041046f5bbd7ec8156777b3977d87113ef1db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de1041046f5bbd7ec8156777b3977d87113ef1db"}], "stats": {"total": 86, "additions": 80, "deletions": 6}, "files": [{"sha": "9211e502315b1d6641f3145ce1b6b2290c390004", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6744f40032f27c47186a71c87342efbb07663f5b/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6744f40032f27c47186a71c87342efbb07663f5b/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=6744f40032f27c47186a71c87342efbb07663f5b", "patch": "@@ -1,3 +1,16 @@\n+2004-09-30  Per Bothner  <per@bothner.com>\n+\n+\tMore cleanup for --enable-mapped-location.\n+\t* class.c (push_class):  If USE_MAPPED_LOCATION don't set\n+\tinput_location here.  Instead do it in give_name_to_class.\n+\t(build_class_ref):  Set DECL_ARTIFICIAL, for the sake of dwarf2out.\n+\t* expr.c (expand_byte_code): Call linemap_line_start.\n+\t* expr.c (build_expr_wfl):  If USE_MAPPED_LOCATION, change final\n+\tparameters to a source_location.  Don't need EXPR_WFL_FILENAME_NODE.\n+\t(expr_add_location):  New function, if USE_MAPPED_LOCATION.\n+\t* class.c (maybe_layout_super_class):  Adjust build_expr_wfl call\n+\tto USE_MAPPED_LOCATION case.\n+\n 2004-09-29  Per Bothner  <per@bothner.com>\n \n \t* java-tree.h:  Redefine some macros and add soem declaration"}, {"sha": "6a417a7ff1b96fa7b9818bddbc80ee7d290c9311", "filename": "gcc/java/class.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6744f40032f27c47186a71c87342efbb07663f5b/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6744f40032f27c47186a71c87342efbb07663f5b/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=6744f40032f27c47186a71c87342efbb07663f5b", "patch": "@@ -428,10 +428,12 @@ push_class (tree class_type, tree class_name)\n {\n   tree decl, signature;\n   location_t saved_loc = input_location;\n+#ifndef USE_MAPPED_LOCATION\n   tree source_name = identifier_subst (class_name, \"\", '.', '/', \".java\");\n-  CLASS_P (class_type) = 1;\n   input_filename = IDENTIFIER_POINTER (source_name);\n   input_line = 0;\n+#endif\n+  CLASS_P (class_type) = 1;\n   decl = build_decl (TYPE_DECL, class_name, class_type);\n \n   /* dbxout needs a DECL_SIZE if in gstabs mode */\n@@ -1037,6 +1039,7 @@ build_class_ref (tree type)\n \t      TREE_STATIC (decl) = 1;\n \t      TREE_PUBLIC (decl) = 1;\n \t      DECL_EXTERNAL (decl) = 1;\n+\t      DECL_ARTIFICIAL (decl) = 1;\n \t      make_decl_rtl (decl);\n \t      pushdecl_top_level (decl);\n \t    }\n@@ -1996,9 +1999,14 @@ maybe_layout_super_class (tree super_class, tree this_class)\n \t  if (this_class)\n \t    {\n \t      tree this_decl = TYPE_NAME (this_class);\n+#ifdef USE_MAPPED_LOCATION\n+\t      this_wrap = build_expr_wfl (this_class,\n+\t\t\t\t\t  DECL_SOURCE_LOCATION (this_decl));\n+#else\n \t      this_wrap = build_expr_wfl (this_class,\n \t\t\t\t\t  DECL_SOURCE_FILE (this_decl),\n \t\t\t\t\t  DECL_SOURCE_LINE (this_decl), 0);\n+#endif\n \t    }\n \t  super_class = do_resolve_class (NULL_TREE, /* FIXME? */\n \t\t\t\t\t  super_class, NULL_TREE, this_wrap);"}, {"sha": "3d878b523cf51cfeb74c1424dd0db087e4462d3d", "filename": "gcc/java/expr.c", "status": "modified", "additions": 58, "deletions": 5, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6744f40032f27c47186a71c87342efbb07663f5b/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6744f40032f27c47186a71c87342efbb07663f5b/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=6744f40032f27c47186a71c87342efbb07663f5b", "patch": "@@ -2695,7 +2695,12 @@ expand_byte_code (JCF *jcf, tree method)\n \t      linenumber_pointer += 4;\n \t      if (pc == PC)\n \t\t{\n-\t\t  input_location.line = GET_u2 (linenumber_pointer - 2);\n+\t\t  int line = GET_u2 (linenumber_pointer - 2);\n+#ifdef USE_MAPPED_LOCATION\n+\t\t  input_location = linemap_line_start (&line_table, line, 1);\n+#else\n+\t\t  input_location.line = line;\n+#endif\n \t\t  if (!(instruction_bits[PC] & BCODE_HAS_MULTI_LINENUMBERS))\n \t\t    break;\n \t\t}\n@@ -3225,21 +3230,33 @@ force_evaluation_order (tree node)\n    recursively more than one file (Java is one of them).  */\n \n tree\n-build_expr_wfl (tree node, const char *file, int line, int col)\n+build_expr_wfl (tree node,\n+#ifdef USE_MAPPED_LOCATION\n+\t\tsource_location location\n+#else\n+\t\tconst char *file, int line, int col\n+#endif\n+)\n {\n+  tree wfl;\n+#ifdef USE_MAPPED_LOCATION\n+  wfl = make_node (EXPR_WITH_FILE_LOCATION);\n+  SET_EXPR_LOCATION (wfl, location);\n+#else\n+  wfl = make_node (EXPR_WITH_FILE_LOCATION);\n+\n   static const char *last_file = 0;\n   static tree last_filenode = NULL_TREE;\n-  tree wfl = make_node (EXPR_WITH_FILE_LOCATION);\n \n-  EXPR_WFL_NODE (wfl) = node;\n   EXPR_WFL_SET_LINECOL (wfl, line, col);\n   if (file != last_file)\n     {\n       last_file = file;\n       last_filenode = file ? get_identifier (file) : NULL_TREE;\n     }\n-\n   EXPR_WFL_FILENAME_NODE (wfl) = last_filenode;\n+#endif\n+  EXPR_WFL_NODE (wfl) = node;\n   if (node)\n     {\n       if (IS_NON_TYPE_CODE_CLASS (TREE_CODE_CLASS (TREE_CODE (node))))\n@@ -3250,6 +3267,42 @@ build_expr_wfl (tree node, const char *file, int line, int col)\n   return wfl;\n }\n \n+#ifdef USE_MAPPED_LOCATION\n+tree\n+expr_add_location (tree node, source_location location, bool statement)\n+{\n+  tree wfl;\n+#if 0\n+  /* FIXME. This optimization causes failures in code that expects an\n+     EXPR_WITH_FILE_LOCATION.  E.g. in resolve_qualified_expression_name. */\n+  if (node && ! (statement && flag_emit_class_files))\n+    {\n+      source_location node_loc = EXPR_LOCATION (node);\n+      if (node_loc == location || location == UNKNOWN_LOCATION)\n+\treturn node;\n+      if (node_loc == UNKNOWN_LOCATION\n+\t  && IS_EXPR_CODE_CLASS (TREE_CODE_CLASS (TREE_CODE (node))))\n+\t{\n+\t  SET_EXPR_LOCATION (node, location);\n+\t  return node;\n+\t}\n+    }\n+#endif\n+  wfl = make_node (EXPR_WITH_FILE_LOCATION);\n+  SET_EXPR_LOCATION (wfl, location);\n+  EXPR_WFL_NODE (wfl) = node;\n+  if (statement && debug_info_level != DINFO_LEVEL_NONE)\n+    EXPR_WFL_EMIT_LINE_NOTE (wfl) = 1;\n+  if (node)\n+    {\n+      if (IS_NON_TYPE_CODE_CLASS (TREE_CODE_CLASS (TREE_CODE (node))))\n+\tTREE_SIDE_EFFECTS (wfl) = TREE_SIDE_EFFECTS (node);\n+      TREE_TYPE (wfl) = TREE_TYPE (node);\n+    }\n+\n+  return wfl;\n+}\n+#endif\n \n /* Build a node to represent empty statements and blocks. */\n "}]}