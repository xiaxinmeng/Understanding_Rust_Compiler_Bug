{"sha": "af3b4514fcb92b6275ed52e47bb0dd8146f7e304", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWYzYjQ1MTRmY2I5MmI2Mjc1ZWQ1MmU0N2JiMGRkODE0NmY3ZTMwNA==", "commit": {"author": {"name": "Ramana Radhakrishnan", "email": "ramana.radhakrishnan@arm.com", "date": "2018-02-26T09:25:21Z"}, "committer": {"name": "Ramana Radhakrishnan", "email": "ramana@gcc.gnu.org", "date": "2018-02-26T09:25:21Z"}, "message": "[Patch AArch64] Turn on frame pointer / partial fix for PR84521\n\nThis fixes a GCC-8 regression that we accidentally switched off frame\npointers in the AArch64 backend when changing the defaults in the common\nparts of the code. This breaks an ABI decision that was made in GCC at\nthe dawn of the port with respect to having a frame pointer at all\ntimes.  If we really want to turn this off lets have a discussion around\nthat separately.\n\nFor now turn this back on and I believe this will leave PR84521 latent\nagain with -fomit-frame-pointer and (hopefully) make the ruby issue go\naway. I'm asking Sudi to pick that up.\n\nBootstrapped and regression tested on AArch64-none-linux-gnu but I see\none regression in gcc.c-torture/execute/960419-2.c which needs to be\nlooked at next (PR84528, thanks Kyrill).\n\nOk to put in and then look at PR84528 ?\n\n2018-02-26  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n\n        PR target/84521\n\t* common/config/aarch64/aarch64-common.c\n\t(aarch_option_optimization_table[]): Switch\n\toff fomit-frame-pointer\n\n2018-02-26  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n\n\tPR target/84521\n\t* gcc.target/aarch64/lr_free_2.c: Revert changes in\n\tr254814 disabling -fomit-frame-pointer by default.\n\t* gcc.target/aarch64/spill_1.c: Likewise.\n\t* gcc.target/aarch64/test_frame_11.c: Likewise.\n\t* gcc.target/aarch64/test_frame_12.c: Likewise.\n\t* gcc.target/aarch64/test_frame_13.c: Likewise.\n\t* gcc.target/aarch64/test_frame_14.c: Likewise.\n\t* gcc.target/aarch64/test_frame_15.c: Likewise.\n\t* gcc.target/aarch64/test_frame_3.c: Likewise.\n\t* gcc.target/aarch64/test_frame_5.c: Likewise.\n\t* gcc.target/aarch64/test_frame_9.c: Likewise.\n\nFrom-SVN: r257984", "tree": {"sha": "061f6dfbf103c37765d8f2d008313fd5039dd4f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/061f6dfbf103c37765d8f2d008313fd5039dd4f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af3b4514fcb92b6275ed52e47bb0dd8146f7e304", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af3b4514fcb92b6275ed52e47bb0dd8146f7e304", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af3b4514fcb92b6275ed52e47bb0dd8146f7e304", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af3b4514fcb92b6275ed52e47bb0dd8146f7e304/comments", "author": null, "committer": null, "parents": [{"sha": "cc9b241b51c485a746284bf583a99ec68008fc31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc9b241b51c485a746284bf583a99ec68008fc31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc9b241b51c485a746284bf583a99ec68008fc31"}], "stats": {"total": 62, "additions": 39, "deletions": 23}, "files": [{"sha": "85181cf325a96b088d89062ba5a2c21822a65341", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af3b4514fcb92b6275ed52e47bb0dd8146f7e304/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af3b4514fcb92b6275ed52e47bb0dd8146f7e304/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=af3b4514fcb92b6275ed52e47bb0dd8146f7e304", "patch": "@@ -1,3 +1,10 @@\n+2018-02-26  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n+\n+        PR target/84521\n+\t* common/config/aarch64/aarch64-common.c\n+\t(aarch_option_optimization_table[]): Switch\n+\toff fomit-frame-pointer\n+\n 2018-02-26  Kito Cheng  <kito.cheng@gmail.com>\n \t    Chung-Ju Wu  <jasonwucj@gmail.com>\n "}, {"sha": "7fd93050037734d52f9f5fc4eec03be320995fe5", "filename": "gcc/common/config/aarch64/aarch64-common.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af3b4514fcb92b6275ed52e47bb0dd8146f7e304/gcc%2Fcommon%2Fconfig%2Faarch64%2Faarch64-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af3b4514fcb92b6275ed52e47bb0dd8146f7e304/gcc%2Fcommon%2Fconfig%2Faarch64%2Faarch64-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Faarch64%2Faarch64-common.c?ref=af3b4514fcb92b6275ed52e47bb0dd8146f7e304", "patch": "@@ -47,6 +47,8 @@ static const struct default_options aarch_option_optimization_table[] =\n   {\n     /* Enable section anchors by default at -O1 or higher.  */\n     { OPT_LEVELS_1_PLUS, OPT_fsection_anchors, NULL, 1 },\n+    /* Disable fomit-frame-pointer by default.  */\n+    { OPT_LEVELS_ALL, OPT_fomit_frame_pointer, NULL, 0 },\n     /* Enable -fsched-pressure by default when optimizing.  */\n     { OPT_LEVELS_1_PLUS, OPT_fsched_pressure, NULL, 1 },\n     /* Enable redundant extension instructions removal at -O2 and higher.  */"}, {"sha": "37ae7517e327daff4cc455ca57e524e4dfb4016a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af3b4514fcb92b6275ed52e47bb0dd8146f7e304/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af3b4514fcb92b6275ed52e47bb0dd8146f7e304/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=af3b4514fcb92b6275ed52e47bb0dd8146f7e304", "patch": "@@ -1,3 +1,18 @@\n+2018-02-26  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n+\n+\tPR target/84521\n+\t* gcc.target/aarch64/lr_free_2.c: Revert changes in\n+\tr254814 disabling -fomit-frame-pointer by default.\n+\t* gcc.target/aarch64/spill_1.c: Likewise.\n+\t* gcc.target/aarch64/test_frame_11.c: Likewise.\n+\t* gcc.target/aarch64/test_frame_12.c: Likewise.\n+\t* gcc.target/aarch64/test_frame_13.c: Likewise.\n+\t* gcc.target/aarch64/test_frame_14.c: Likewise.\n+\t* gcc.target/aarch64/test_frame_15.c: Likewise.\n+\t* gcc.target/aarch64/test_frame_3.c: Likewise.\n+\t* gcc.target/aarch64/test_frame_5.c: Likewise.\n+\t* gcc.target/aarch64/test_frame_9.c: Likewise.\n+\n 2018-02-25  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/83633"}, {"sha": "e2b9490fab1a27755d239ad6802325a619f73db3", "filename": "gcc/testsuite/gcc.target/aarch64/lr_free_2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af3b4514fcb92b6275ed52e47bb0dd8146f7e304/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Flr_free_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af3b4514fcb92b6275ed52e47bb0dd8146f7e304/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Flr_free_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Flr_free_2.c?ref=af3b4514fcb92b6275ed52e47bb0dd8146f7e304", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-fno-omit-frame-pointer -fno-inline -O2 -ffixed-x2 -ffixed-x3 -ffixed-x4 -ffixed-x5 -ffixed-x6 -ffixed-x7 -ffixed-x8 -ffixed-x9 -ffixed-x10 -ffixed-x11 -ffixed-x12 -ffixed-x13 -ffixed-x14 -ffixed-x15 -ffixed-x16 -ffixed-x17 -ffixed-x18 -ffixed-x19 -ffixed-x20 -ffixed-x21 -ffixed-x22 -ffixed-x23 -ffixed-x24 -ffixed-x25 -ffixed-x26 -ffixed-x27 -ffixed-x28 --save-temps -mgeneral-regs-only -fno-ipa-cp -fdump-rtl-ira\" } */\n+/* { dg-options \"-fno-inline -O2 -ffixed-x2 -ffixed-x3 -ffixed-x4 -ffixed-x5 -ffixed-x6 -ffixed-x7 -ffixed-x8 -ffixed-x9 -ffixed-x10 -ffixed-x11 -ffixed-x12 -ffixed-x13 -ffixed-x14 -ffixed-x15 -ffixed-x16 -ffixed-x17 -ffixed-x18 -ffixed-x19 -ffixed-x20 -ffixed-x21 -ffixed-x22 -ffixed-x23 -ffixed-x24 -ffixed-x25 -ffixed-x26 -ffixed-x27 -ffixed-x28 --save-temps -mgeneral-regs-only -fno-ipa-cp -fdump-rtl-ira\" } */\n \n extern void abort ();\n "}, {"sha": "847425895d456e4433b0d15556d60a66a8f8f70c", "filename": "gcc/testsuite/gcc.target/aarch64/spill_1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af3b4514fcb92b6275ed52e47bb0dd8146f7e304/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fspill_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af3b4514fcb92b6275ed52e47bb0dd8146f7e304/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fspill_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fspill_1.c?ref=af3b4514fcb92b6275ed52e47bb0dd8146f7e304", "patch": "@@ -14,3 +14,5 @@ foo (void)\n }\n \n /* { dg-final { scan-assembler-times {\\tmovi\\tv[0-9]+\\.4s,} 2 } } */\n+/* { dg-final { scan-assembler-not {\\tldr\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tstr\\t} } } */"}, {"sha": "f162cc091e0090ece943715ae573d0c11821b19b", "filename": "gcc/testsuite/gcc.target/aarch64/test_frame_11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af3b4514fcb92b6275ed52e47bb0dd8146f7e304/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af3b4514fcb92b6275ed52e47bb0dd8146f7e304/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_11.c?ref=af3b4514fcb92b6275ed52e47bb0dd8146f7e304", "patch": "@@ -5,7 +5,7 @@\n      * optimized code should use \"stp !\" for stack adjustment.  */\n \n /* { dg-do run } */\n-/* { dg-options \"-fno-omit-frame-pointer -O2 --save-temps\" } */\n+/* { dg-options \"-O2 --save-temps\" } */\n \n #include \"test_frame_common.h\"\n "}, {"sha": "62761e7ff9b3fd0afc064f9a9b737583261b0610", "filename": "gcc/testsuite/gcc.target/aarch64/test_frame_12.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af3b4514fcb92b6275ed52e47bb0dd8146f7e304/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af3b4514fcb92b6275ed52e47bb0dd8146f7e304/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_12.c?ref=af3b4514fcb92b6275ed52e47bb0dd8146f7e304", "patch": "@@ -4,7 +4,7 @@\n      * number of callee-save reg >= 2.  */\n \n /* { dg-do run } */\n-/* { dg-options \"-O2 -fomit-frame-pointer --save-temps\" } */\n+/* { dg-options \"-O2 --save-temps\" } */\n \n #include \"test_frame_common.h\"\n \n@@ -14,5 +14,5 @@ t_frame_run (test12)\n /* { dg-final { scan-assembler-times \"sub\\tsp, sp, #\\[0-9\\]+\" 1 } } */\n \n /* Check epilogue using no write-back.  */\n-/* { dg-final { scan-assembler \"ldr\\tx30, \\\\\\[sp, \\[0-9\\]+\\\\\\]\" } } */\n+/* { dg-final { scan-assembler \"ldp\\tx29, x30, \\\\\\[sp, \\[0-9\\]+\\\\\\]\" } } */\n "}, {"sha": "74b3370fa463b652265e00fff80cc8856524d509", "filename": "gcc/testsuite/gcc.target/aarch64/test_frame_13.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af3b4514fcb92b6275ed52e47bb0dd8146f7e304/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af3b4514fcb92b6275ed52e47bb0dd8146f7e304/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_13.c?ref=af3b4514fcb92b6275ed52e47bb0dd8146f7e304", "patch": "@@ -5,7 +5,7 @@\n      * Use a single stack adjustment, no writeback.  */\n \n /* { dg-do run } */\n-/* { dg-options \"-fno-omit-frame-pointer -O2 --save-temps\" } */\n+/* { dg-options \"-O2 --save-temps\" } */\n \n #include \"test_frame_common.h\"\n "}, {"sha": "78818dec32af95c43b610cab1832ea29041c3b36", "filename": "gcc/testsuite/gcc.target/aarch64/test_frame_14.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af3b4514fcb92b6275ed52e47bb0dd8146f7e304/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af3b4514fcb92b6275ed52e47bb0dd8146f7e304/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_14.c?ref=af3b4514fcb92b6275ed52e47bb0dd8146f7e304", "patch": "@@ -4,12 +4,9 @@\n      * number of callee-save reg >= 2.  */\n \n /* { dg-do run } */\n-/* { dg-options \"-O2 -fno-omit-frame-pointer --save-temps\" } */\n+/* { dg-options \"-O2\" } */\n \n #include \"test_frame_common.h\"\n \n t_frame_pattern_outgoing (test14, 700, , 8, a[8])\n t_frame_run (test14)\n-\n-/* { dg-final { scan-assembler-times \"sub\\tsp, sp, #\\[0-9\\]+\" 1 } } */\n-/* { dg-final { scan-assembler-times \"stp\\tx29, x30, \\\\\\[sp, \\[0-9\\]+\\\\\\]\" 1 } } */"}, {"sha": "bed6714b4fe529a3b81ad8c5253924aa97bf8806", "filename": "gcc/testsuite/gcc.target/aarch64/test_frame_15.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af3b4514fcb92b6275ed52e47bb0dd8146f7e304/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af3b4514fcb92b6275ed52e47bb0dd8146f7e304/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_15.c?ref=af3b4514fcb92b6275ed52e47bb0dd8146f7e304", "patch": "@@ -6,7 +6,7 @@\n      * Use a single stack adjustment, no writeback.  */\n \n /* { dg-do run } */\n-/* { dg-options \"-fno-omit-frame-pointer -O2 --save-temps\" } */\n+/* { dg-options \"-O2 --save-temps\" } */\n \n #include \"test_frame_common.h\"\n "}, {"sha": "f90ea4a1ae880c69d88cf8b38558312510e66c63", "filename": "gcc/testsuite/gcc.target/aarch64/test_frame_3.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af3b4514fcb92b6275ed52e47bb0dd8146f7e304/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af3b4514fcb92b6275ed52e47bb0dd8146f7e304/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_3.c?ref=af3b4514fcb92b6275ed52e47bb0dd8146f7e304", "patch": "@@ -6,12 +6,9 @@\n      * we can't use \"str !\" to optimize stack adjustment.  */\n \n /* { dg-do run } */\n-/* { dg-options \"-O2 -fomit-frame-pointer --save-temps\" } */\n+/* { dg-options \"-O2 -fomit-frame-pointer\" } */\n \n #include \"test_frame_common.h\"\n \n t_frame_pattern (test3, 400, )\n t_frame_run (test3)\n-\n-/* { dg-final { scan-assembler-times \"sub\\tsp, sp, #\\[0-9\\]+\" 1 } } */\n-/* { dg-final { scan-assembler \"str\\tx30, \\\\\\[sp\\\\\\]\" } } */"}, {"sha": "0624b5b747339b851daff5d265701c241e5c1231", "filename": "gcc/testsuite/gcc.target/aarch64/test_frame_5.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af3b4514fcb92b6275ed52e47bb0dd8146f7e304/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af3b4514fcb92b6275ed52e47bb0dd8146f7e304/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_5.c?ref=af3b4514fcb92b6275ed52e47bb0dd8146f7e304", "patch": "@@ -5,12 +5,9 @@\n      * one subtraction of the whole frame size.  */\n \n /* { dg-do run } */\n-/* { dg-options \"-O2 -fomit-frame-pointer --save-temps\" } */\n+/* { dg-options \"-O2 -fomit-frame-pointer\" } */\n \n #include \"test_frame_common.h\"\n \n t_frame_pattern_outgoing (test5, 300, \"x19\", 8, a[8])\n t_frame_run (test5)\n-\n-/* { dg-final { scan-assembler-times \"sub\\tsp, sp, #\\[0-9\\]+\" 1 } } */\n-/* { dg-final { scan-assembler \"stp\\tx\\[0-9\\]+, x30, \\\\\\[sp, \\[0-9\\]+\\\\\\]\" } } */"}, {"sha": "0dffbf8ad1706d224b933a9a849f3136797e97a3", "filename": "gcc/testsuite/gcc.target/aarch64/test_frame_9.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af3b4514fcb92b6275ed52e47bb0dd8146f7e304/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af3b4514fcb92b6275ed52e47bb0dd8146f7e304/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_9.c?ref=af3b4514fcb92b6275ed52e47bb0dd8146f7e304", "patch": "@@ -4,15 +4,14 @@\n      * total frame size > 512.\n        area except outgoing <= 512\n      * number of callee-saved reg = 1.\n-     * Use a single stack adjustment.  */\n+     * Split stack adjustment into two subtractions.\n+       the first subtractions couldn't be optimized\n+       into \"str !\" as it's > 256.  */\n \n /* { dg-do run } */\n-/* { dg-options \"-O2 -fomit-frame-pointer --save-temps\" } */\n+/* { dg-options \"-O2 -fomit-frame-pointer\" } */\n \n #include \"test_frame_common.h\"\n \n t_frame_pattern_outgoing (test9, 480, , 24, a[8], a[9], a[10])\n t_frame_run (test9)\n-\n-/* { dg-final { scan-assembler-times \"sub\\tsp, sp, #\\[0-9\\]+\" 1 } } */\n-/* { dg-final { scan-assembler \"str\\tx30, \\\\\\[sp, \\[0-9\\]+\\\\\\]\" } } */"}]}