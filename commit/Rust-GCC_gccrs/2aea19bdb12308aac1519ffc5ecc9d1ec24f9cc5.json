{"sha": "2aea19bdb12308aac1519ffc5ecc9d1ec24f9cc5", "node_id": "C_kwDOANBUbNoAKDJhZWExOWJkYjEyMzA4YWFjMTUxOWZmYzVlY2M5ZDFlYzI0ZjljYzU", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-01-18T16:50:02Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2022-01-19T07:27:00Z"}, "message": "nvptx: update fix for -Wformat-diag\n\ngcc/ChangeLog:\n\n\t* config/nvptx/nvptx.cc (nvptx_goacc_validate_dims_1): Update\n\twarning messages.\n\nlibgomp/ChangeLog:\n\n\t* testsuite/libgomp.oacc-c++/privatized-ref-2.C: Update scanning\n\tpatterns.\n\t* testsuite/libgomp.oacc-c++/privatized-ref-3.C: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/acc_prof-kernels-1.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-loop-2.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/parallel-dims.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/pr85486.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/pr95270-1.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/routine-nohost-2.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/struct-copyout-1.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/struct-copyout-2.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/vector-length-64-1.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-fortran/attach-descriptor-1.f90:\n\tLikewise.\n\t* testsuite/libgomp.oacc-fortran/derivedtypes-arrays-1.f90:\n\tLikewise.\n\t* testsuite/libgomp.oacc-fortran/kernels-loop-2.f95: Likewise.\n\t* testsuite/libgomp.oacc-fortran/parallel-dims.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/privatized-ref-1.f95: Likewise.\n\nCo-authored-by: Thomas Schwinge <thomas@codesourcery.com>", "tree": {"sha": "6532006956b9995d531cf9e85b7d0abd9f255b6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6532006956b9995d531cf9e85b7d0abd9f255b6d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2aea19bdb12308aac1519ffc5ecc9d1ec24f9cc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2aea19bdb12308aac1519ffc5ecc9d1ec24f9cc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2aea19bdb12308aac1519ffc5ecc9d1ec24f9cc5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2aea19bdb12308aac1519ffc5ecc9d1ec24f9cc5/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54e33cf120dab24ce44d7d6028e6247c9489092f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54e33cf120dab24ce44d7d6028e6247c9489092f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54e33cf120dab24ce44d7d6028e6247c9489092f"}], "stats": {"total": 74, "additions": 37, "deletions": 37}, "files": [{"sha": "db6a405d62329b2c2e951cea92e0ab6ee9900536", "filename": "gcc/config/nvptx/nvptx.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aea19bdb12308aac1519ffc5ecc9d1ec24f9cc5/gcc%2Fconfig%2Fnvptx%2Fnvptx.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aea19bdb12308aac1519ffc5ecc9d1ec24f9cc5/gcc%2Fconfig%2Fnvptx%2Fnvptx.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.cc?ref=2aea19bdb12308aac1519ffc5ecc9d1ec24f9cc5", "patch": "@@ -5894,15 +5894,15 @@ nvptx_goacc_validate_dims_1 (tree decl, int dims[], int fn_level, unsigned used)\n \n       if (dims[GOMP_DIM_VECTOR] > PTX_WARP_SIZE)\n \t{\n-\t  vector_reason = G_(\"using %<vector_length%> (%d) due to call to\"\n+\t  vector_reason = G_(\"using %<vector_length (%d)%> due to call to\"\n \t\t\t     \" vector-partitionable routine, ignoring %d\");\n \t  dims[GOMP_DIM_VECTOR] = PTX_WARP_SIZE;\n \t}\n     }\n \n   if (dims[GOMP_DIM_VECTOR] == 0)\n     {\n-      vector_reason = G_(\"using %<vector_length%> (%d), ignoring runtime setting\");\n+      vector_reason = G_(\"using %<vector_length (%d)%>, ignoring runtime setting\");\n       dims[GOMP_DIM_VECTOR] = default_vector_length;\n     }\n \n@@ -5916,12 +5916,12 @@ nvptx_goacc_validate_dims_1 (tree decl, int dims[], int fn_level, unsigned used)\n     warning_at (decl ? DECL_SOURCE_LOCATION (decl) : UNKNOWN_LOCATION, 0,\n \t\tvector_reason != NULL\n \t\t? vector_reason\n-\t\t: G_(\"using %<vector_length%> (%d), ignoring %d\"),\n+\t\t: G_(\"using %<vector_length (%d)%>, ignoring %d\"),\n \t\tdims[GOMP_DIM_VECTOR], old_dims[GOMP_DIM_VECTOR]);\n \n   if (dims[GOMP_DIM_WORKER] != old_dims[GOMP_DIM_WORKER])\n     warning_at (decl ? DECL_SOURCE_LOCATION (decl) : UNKNOWN_LOCATION, 0,\n-\t\tG_(\"using %<num_workers%> (%d), ignoring %d\"),\n+\t\tG_(\"using %<num_workers (%d)%>, ignoring %d\"),\n \t\tdims[GOMP_DIM_WORKER], old_dims[GOMP_DIM_WORKER]);\n \n   if (oacc_default_dims_p)"}, {"sha": "18552206c6b2aa74e6c2d377bb1a9522ff59ff3f", "filename": "libgomp/testsuite/libgomp.oacc-c++/privatized-ref-2.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aea19bdb12308aac1519ffc5ecc9d1ec24f9cc5/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2B%2B%2Fprivatized-ref-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aea19bdb12308aac1519ffc5ecc9d1ec24f9cc5/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2B%2B%2Fprivatized-ref-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2B%2B%2Fprivatized-ref-2.C?ref=2aea19bdb12308aac1519ffc5ecc9d1ec24f9cc5", "patch": "@@ -69,7 +69,7 @@ void workers (void)\n #pragma acc parallel copyout(res) num_gangs(64) num_workers(64) /* { dg-line l_compute[incr c_compute] } */\n   /* { dg-note {variable 'i' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute } */\n   /* { dg-note {variable 'j' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute } */\n-  /* { dg-warning \"using .num_workers. \\\\(32\\\\), ignoring 64\" \"\" { target openacc_nvidia_accel_selected } l_compute$c_compute } */\n+  /* { dg-warning \"using .num_workers \\\\(32\\\\)., ignoring 64\" \"\" { target openacc_nvidia_accel_selected } l_compute$c_compute } */\n   {\n     int i, j;\n #pragma acc loop gang /* { dg-line l_loop[incr c_loop] } */\n@@ -105,7 +105,7 @@ void vectors (void)\n #pragma acc parallel copyout(res) num_gangs(64) num_workers(64) /* { dg-line l_compute[incr c_compute] } */\n   /* { dg-note {variable 'i' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute } */\n   /* { dg-note {variable 'j' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute } */\n-  /* { dg-warning \"using .num_workers. \\\\(32\\\\), ignoring 64\" \"\" { target openacc_nvidia_accel_selected } l_compute$c_compute } */\n+  /* { dg-warning \"using .num_workers \\\\(32\\\\)., ignoring 64\" \"\" { target openacc_nvidia_accel_selected } l_compute$c_compute } */\n   {\n     int i, j;\n #pragma acc loop gang worker /* { dg-line l_loop[incr c_loop] } */\n@@ -141,7 +141,7 @@ void gangs_workers_vectors (void)\n #pragma acc parallel copyout(res) num_gangs(64) num_workers(64) /* { dg-line l_compute[incr c_compute] } */\n   /* { dg-note {variable 'i' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute } */\n   /* { dg-note {variable 'j' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute } */\n-  /* { dg-warning \"using .num_workers. \\\\(32\\\\), ignoring 64\" \"\" { target openacc_nvidia_accel_selected } l_compute$c_compute } */\n+  /* { dg-warning \"using .num_workers \\\\(32\\\\)., ignoring 64\" \"\" { target openacc_nvidia_accel_selected } l_compute$c_compute } */\n   {\n     int i, j;\n #pragma acc loop collapse(2) gang worker vector /* { dg-line l_loop[incr c_loop] } */"}, {"sha": "11e1cefbc3963b48c9c4c6d64286a4d010fd1b09", "filename": "libgomp/testsuite/libgomp.oacc-c++/privatized-ref-3.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aea19bdb12308aac1519ffc5ecc9d1ec24f9cc5/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2B%2B%2Fprivatized-ref-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aea19bdb12308aac1519ffc5ecc9d1ec24f9cc5/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2B%2B%2Fprivatized-ref-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2B%2B%2Fprivatized-ref-3.C?ref=2aea19bdb12308aac1519ffc5ecc9d1ec24f9cc5", "patch": "@@ -86,7 +86,7 @@ void workers (void)\n      { dg-bogus {note: variable 'tmpvar' adjusted for OpenACC privatization level: 'gang'} \"\" { target { openacc_nvidia_accel_selected && __OPTIMIZE__ } } l_compute$c_compute }\n   */\n   /* { dg-note {variable 'tmpref' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute } */\n-  /* { dg-warning \"using .num_workers. \\\\(32\\\\), ignoring 64\" \"\" { target openacc_nvidia_accel_selected } l_compute$c_compute } */\n+  /* { dg-warning \"using .num_workers \\\\(32\\\\)., ignoring 64\" \"\" { target openacc_nvidia_accel_selected } l_compute$c_compute } */\n   {\n     int i, j;\n     int tmpvar;\n@@ -132,7 +132,7 @@ void vectors (void)\n      { dg-bogus {note: variable 'tmpvar' adjusted for OpenACC privatization level: 'gang'} \"\" { target { openacc_nvidia_accel_selected && __OPTIMIZE__ } } l_compute$c_compute }\n   */\n   /* { dg-note {variable 'tmpref' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute } */\n-  /* { dg-warning \"using .num_workers. \\\\(32\\\\), ignoring 64\" \"\" { target openacc_nvidia_accel_selected } l_compute$c_compute } */\n+  /* { dg-warning \"using .num_workers \\\\(32\\\\)., ignoring 64\" \"\" { target openacc_nvidia_accel_selected } l_compute$c_compute } */\n   {\n     int i, j;\n     int tmpvar;\n@@ -178,7 +178,7 @@ void gangs_workers_vectors (void)\n      { dg-bogus {note: variable 'tmpvar' adjusted for OpenACC privatization level: 'gang'} \"\" { target { openacc_nvidia_accel_selected && __OPTIMIZE__ } } l_compute$c_compute }\n   */\n   /* { dg-note {variable 'tmpref' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_compute$c_compute } */\n-  /* { dg-warning \"using .num_workers. \\\\(32\\\\), ignoring 64\" \"\" { target openacc_nvidia_accel_selected } l_compute$c_compute } */\n+  /* { dg-warning \"using .num_workers \\\\(32\\\\)., ignoring 64\" \"\" { target openacc_nvidia_accel_selected } l_compute$c_compute } */\n   {\n     int i, j;\n     int tmpvar;"}, {"sha": "d7f476274382142b3112f3c4314b03a9d8052720", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/acc_prof-kernels-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aea19bdb12308aac1519ffc5ecc9d1ec24f9cc5/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_prof-kernels-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aea19bdb12308aac1519ffc5ecc9d1ec24f9cc5/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_prof-kernels-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_prof-kernels-1.c?ref=2aea19bdb12308aac1519ffc5ecc9d1ec24f9cc5", "patch": "@@ -189,7 +189,7 @@ int main()\n     int x[N];\n #pragma acc kernels \\\n   num_gangs (30) num_workers (3) vector_length (5)\n-    /* { dg-prune-output \"using .vector_length. \\\\(32\\\\), ignoring 5\" } */\n+    /* { dg-prune-output \"using .vector_length \\\\(32\\\\)., ignoring 5\" } */\n     {\n       for (int i = 0; i < N; ++i)\n \tx[i] = i * i;\n@@ -214,7 +214,7 @@ int main()\n     int x[N];\n #pragma acc kernels \\\n   num_gangs (num_gangs) num_workers (num_workers) vector_length (vector_length)\n-    /* { dg-prune-output \"using .vector_length. \\\\(32\\\\), ignoring runtime setting\" } */\n+    /* { dg-prune-output \"using .vector_length \\\\(32\\\\)., ignoring runtime setting\" } */\n     {\n       for (int i = 0; i < N; ++i)\n \tx[i] = i * i;"}, {"sha": "591c0f322ef4d5dc7b4e5a0bfc810aed37280030", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-loop-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aea19bdb12308aac1519ffc5ecc9d1ec24f9cc5/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-loop-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aea19bdb12308aac1519ffc5ecc9d1ec24f9cc5/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-loop-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-loop-2.c?ref=2aea19bdb12308aac1519ffc5ecc9d1ec24f9cc5", "patch": "@@ -24,7 +24,7 @@ main (void)\n   /* Parallelism dimensions: variable.  */\n #pragma acc kernels copyout (b[0:N]) \\\n   num_gangs (3 + a[3]) num_workers (5 + a[5]) vector_length (7 + a[7])\n-  /* { dg-prune-output \"using .vector_length. \\\\(32\\\\), ignoring runtime setting\" } */\n+  /* { dg-prune-output \"using .vector_length \\\\(32\\\\)., ignoring runtime setting\" } */\n   {\n     for (COUNTERTYPE i = 0; i < N; i++)\n       b[i] = i * 4;\n@@ -33,7 +33,7 @@ main (void)\n   /* Parallelism dimensions: literal.  */\n #pragma acc kernels copyin (a[0:N], b[0:N]) copyout (c[0:N]) \\\n   num_gangs (3) num_workers (5) vector_length (7)\n-  /* { dg-prune-output \"using .vector_length. \\\\(32\\\\), ignoring 7\" } */\n+  /* { dg-prune-output \"using .vector_length \\\\(32\\\\)., ignoring 7\" } */\n   {\n     for (COUNTERTYPE ii = 0; ii < N; ii++)\n       c[ii] = a[ii] + b[ii];"}, {"sha": "c2f264a1ec898542a1a09ad06ed50ed118889545", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/parallel-dims.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aea19bdb12308aac1519ffc5ecc9d1ec24f9cc5/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fparallel-dims.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aea19bdb12308aac1519ffc5ecc9d1ec24f9cc5/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fparallel-dims.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fparallel-dims.c?ref=2aea19bdb12308aac1519ffc5ecc9d1ec24f9cc5", "patch": "@@ -133,7 +133,7 @@ int main ()\n     int gangs_min, gangs_max, workers_min, workers_max, vectors_min, vectors_max;\n     gangs_min = workers_min = vectors_min = INT_MAX;\n     gangs_max = workers_max = vectors_max = INT_MIN;\n-#pragma acc parallel copy (vectors_actual) /* { dg-warning \"using .vector_length. \\\\(32\\\\), ignoring 1\" \"\" { target openacc_nvidia_accel_selected } } */ \\\n+#pragma acc parallel copy (vectors_actual) /* { dg-warning \"using .vector_length \\\\(32\\\\)., ignoring 1\" \"\" { target openacc_nvidia_accel_selected } } */ \\\n   vector_length (VECTORS) /* { dg-warning \"'vector_length' value must be positive\" \"\" { target c++ } } */\n     /* { dg-warning \"region contains vector partitioned code but is not vector partitioned\" \"\" { target *-*-* } .-2 } */\n     {\n@@ -246,7 +246,7 @@ int main ()\n     int gangs_min, gangs_max, workers_min, workers_max, vectors_min, vectors_max;\n     gangs_min = workers_min = vectors_min = INT_MAX;\n     gangs_max = workers_max = vectors_max = INT_MIN;\n-#pragma acc parallel copy (workers_actual) /* { dg-warning \"using .num_workers. \\\\(32\\\\), ignoring 2097152\" \"\" { target openacc_nvidia_accel_selected } } */ \\\n+#pragma acc parallel copy (workers_actual) /* { dg-warning \"using .num_workers \\\\(32\\\\)., ignoring 2097152\" \"\" { target openacc_nvidia_accel_selected } } */ \\\n   num_workers (WORKERS)\n     {\n       if (acc_on_device (acc_device_host))\n@@ -341,7 +341,7 @@ int main ()\n     int gangs_min, gangs_max, workers_min, workers_max, vectors_min, vectors_max;\n     gangs_min = workers_min = vectors_min = INT_MAX;\n     gangs_max = workers_max = vectors_max = INT_MIN;\n-#pragma acc parallel copy (vectors_actual) /* { dg-warning \"using .vector_length. \\\\(1024\\\\), ignoring 2097152\" \"\" { target openacc_nvidia_accel_selected } } */ \\\n+#pragma acc parallel copy (vectors_actual) /* { dg-warning \"using .vector_length \\\\(1024\\\\)., ignoring 2097152\" \"\" { target openacc_nvidia_accel_selected } } */ \\\n   vector_length (VECTORS)\n     {\n       if (acc_on_device (acc_device_host))\n@@ -386,7 +386,7 @@ int main ()\n     int gangs_min, gangs_max, workers_min, workers_max, vectors_min, vectors_max;\n     gangs_min = workers_min = vectors_min = INT_MAX;\n     gangs_max = workers_max = vectors_max = INT_MIN;\n-#pragma acc parallel copy (vectors_actual) /* { dg-warning \"using .vector_length. \\\\(32\\\\), ignoring runtime setting\" \"\" { target openacc_nvidia_accel_selected } } */ \\\n+#pragma acc parallel copy (vectors_actual) /* { dg-warning \"using .vector_length \\\\(32\\\\)., ignoring runtime setting\" \"\" { target openacc_nvidia_accel_selected } } */ \\\n   vector_length (vectors)\n     {\n       if (acc_on_device (acc_device_host))\n@@ -443,7 +443,7 @@ int main ()\n     int gangs_min, gangs_max, workers_min, workers_max, vectors_min, vectors_max;\n     gangs_min = workers_min = vectors_min = INT_MAX;\n     gangs_max = workers_max = vectors_max = INT_MIN;\n-#pragma acc parallel copy (gangs_actual, workers_actual, vectors_actual) /* { dg-warning \"using .vector_length. \\\\(32\\\\), ignoring 11\" \"\" { target openacc_nvidia_accel_selected } } */ \\\n+#pragma acc parallel copy (gangs_actual, workers_actual, vectors_actual) /* { dg-warning \"using .vector_length \\\\(32\\\\)., ignoring 11\" \"\" { target openacc_nvidia_accel_selected } } */ \\\n   num_gangs (gangs) \\\n   num_workers (WORKERS) \\\n   vector_length (VECTORS)\n@@ -564,7 +564,7 @@ int main ()\n     int gangs_min, gangs_max, workers_min, workers_max, vectors_min, vectors_max;\n     gangs_min = workers_min = vectors_min = INT_MAX;\n     gangs_max = workers_max = vectors_max = INT_MIN;\n-#pragma acc serial /* { dg-warning \"using .vector_length. \\\\(32\\\\), ignoring 1\" \"\" { target openacc_nvidia_accel_selected } } */ \\\n+#pragma acc serial /* { dg-warning \"using .vector_length \\\\(32\\\\)., ignoring 1\" \"\" { target openacc_nvidia_accel_selected } } */ \\\n   reduction (min: gangs_min, workers_min, vectors_min) reduction (max: gangs_max, workers_max, vectors_max)\n     {\n       for (int i = 100; i > -100; i--)\n@@ -586,7 +586,7 @@ int main ()\n     int gangs_min, gangs_max, workers_min, workers_max, vectors_min, vectors_max;\n     gangs_min = workers_min = vectors_min = INT_MAX;\n     gangs_max = workers_max = vectors_max = INT_MIN;\n-#pragma acc serial copy (vectors_actual) /* { dg-warning \"using .vector_length. \\\\(32\\\\), ignoring 1\" \"\" { target openacc_nvidia_accel_selected } } */ \\\n+#pragma acc serial copy (vectors_actual) /* { dg-warning \"using .vector_length \\\\(32\\\\)., ignoring 1\" \"\" { target openacc_nvidia_accel_selected } } */ \\\n   copy (gangs_min, gangs_max, workers_min, workers_max, vectors_min, vectors_max)\n     /* { dg-bogus \"warning: region contains gang partitioned code but is not gang partitioned\" \"TODO 'serial'\" { xfail *-*-* } .-2 }\n        { dg-bogus \"warning: region contains worker partitioned code but is not worker partitioned\" \"TODO 'serial'\" { xfail *-*-* } .-3 }"}, {"sha": "10f84dad5099fb23cf844dd66897b4fb13d25578", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/pr85486.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aea19bdb12308aac1519ffc5ecc9d1ec24f9cc5/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr85486.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aea19bdb12308aac1519ffc5ecc9d1ec24f9cc5/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr85486.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr85486.c?ref=2aea19bdb12308aac1519ffc5ecc9d1ec24f9cc5", "patch": "@@ -31,7 +31,7 @@ main (void)\n \n   int err = 0;\n \n-#pragma acc parallel copy (ary) VECTOR_LENGTH /* { dg-warning \"using .vector_length. \\\\(32\\\\) due to call to vector-partitionable routine, ignoring 128\" } */\n+#pragma acc parallel copy (ary) VECTOR_LENGTH /* { dg-warning \"using .vector_length \\\\(32\\\\). due to call to vector-partitionable routine, ignoring 128\" } */\n   {\n     Vector (&ary[0][0], m * n, (1 << 24) - (1 << 16));\n   }"}, {"sha": "4a13663b6091a6c50386e98c87a1998217e7300d", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/pr95270-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aea19bdb12308aac1519ffc5ecc9d1ec24f9cc5/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr95270-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aea19bdb12308aac1519ffc5ecc9d1ec24f9cc5/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr95270-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr95270-1.c?ref=2aea19bdb12308aac1519ffc5ecc9d1ec24f9cc5", "patch": "@@ -16,7 +16,7 @@ main ()\n \n   /* Test attach/detach directives.  */\n #pragma acc enter data attach(data_p)\n-#pragma acc serial copyout(ptrbits) /* { dg-warning \"using .vector_length. \\\\(32\\\\), ignoring 1\" \"\" { target openacc_nvidia_accel_selected } } */\n+#pragma acc serial copyout(ptrbits) /* { dg-warning \"using .vector_length \\\\(32\\\\)., ignoring 1\" \"\" { target openacc_nvidia_accel_selected } } */\n   {\n     ptrbits = (uintptr_t) data_p;\n   }\n@@ -28,7 +28,7 @@ main ()\n \n   /* Test attach/detach API call.  */\n   acc_attach ((void **) &data_p);\n-#pragma acc serial copyout(ptrbits) /* { dg-warning \"using .vector_length. \\\\(32\\\\), ignoring 1\" \"\" { target openacc_nvidia_accel_selected } } */\n+#pragma acc serial copyout(ptrbits) /* { dg-warning \"using .vector_length \\\\(32\\\\)., ignoring 1\" \"\" { target openacc_nvidia_accel_selected } } */\n   {\n     ptrbits = (uintptr_t) data_p;\n   }"}, {"sha": "20c420d7757af93be301940f44d9878353b3be4c", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/routine-nohost-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aea19bdb12308aac1519ffc5ecc9d1ec24f9cc5/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-nohost-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aea19bdb12308aac1519ffc5ecc9d1ec24f9cc5/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-nohost-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-nohost-2.c?ref=2aea19bdb12308aac1519ffc5ecc9d1ec24f9cc5", "patch": "@@ -21,7 +21,7 @@ int main()\n   int x = -10;\n \n #pragma acc serial copy(x)\n-  /* { dg-warning {using .vector_length. \\(32\\), ignoring 1} \"\" { target openacc_nvidia_accel_selected } .-1 } */\n+  /* { dg-warning {using .vector_length \\(32\\)., ignoring 1} \"\" { target openacc_nvidia_accel_selected } .-1 } */\n   {\n     if (f1)\n       x = f1(x);"}, {"sha": "501a0e12732dc1b5765633e127cedd006e00e350", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/struct-copyout-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aea19bdb12308aac1519ffc5ecc9d1ec24f9cc5/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fstruct-copyout-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aea19bdb12308aac1519ffc5ecc9d1ec24f9cc5/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fstruct-copyout-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fstruct-copyout-1.c?ref=2aea19bdb12308aac1519ffc5ecc9d1ec24f9cc5", "patch": "@@ -23,7 +23,7 @@ main (int argc, char *argv[])\n \n   #pragma acc enter data copyin(t.s)\n \n-  #pragma acc serial present(t.s) /* { dg-warning \"using .vector_length. \\\\(32\\\\), ignoring 1\" \"\" { target openacc_nvidia_accel_selected } } */\n+  #pragma acc serial present(t.s) /* { dg-warning \"using .vector_length \\\\(32\\\\)., ignoring 1\" \"\" { target openacc_nvidia_accel_selected } } */\n   {\n     t.s.a = 5;\n     t.s.b = 6;"}, {"sha": "72ce4be7cf2d14ccf3616d195d98d9c4906b25e6", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/struct-copyout-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aea19bdb12308aac1519ffc5ecc9d1ec24f9cc5/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fstruct-copyout-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aea19bdb12308aac1519ffc5ecc9d1ec24f9cc5/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fstruct-copyout-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fstruct-copyout-2.c?ref=2aea19bdb12308aac1519ffc5ecc9d1ec24f9cc5", "patch": "@@ -23,7 +23,7 @@ main (int argc, char *argv[])\n \n   #pragma acc enter data copyin(s.a, s.b, s.c[0:N])\n \n-  #pragma acc serial present(s.a, s.b, s.c[0:N]) /* { dg-warning \"using .vector_length. \\\\(32\\\\), ignoring 1\" \"\" { target openacc_nvidia_accel_selected } } */\n+  #pragma acc serial present(s.a, s.b, s.c[0:N]) /* { dg-warning \"using .vector_length \\\\(32\\\\)., ignoring 1\" \"\" { target openacc_nvidia_accel_selected } } */\n   {\n     s.a = 3;\n     s.b = 4;"}, {"sha": "f0fb4761cdd6f71588c5b9d22e82ee63cc90c42b", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/vector-length-64-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aea19bdb12308aac1519ffc5ecc9d1ec24f9cc5/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fvector-length-64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aea19bdb12308aac1519ffc5ecc9d1ec24f9cc5/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fvector-length-64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fvector-length-64-1.c?ref=2aea19bdb12308aac1519ffc5ecc9d1ec24f9cc5", "patch": "@@ -4,7 +4,7 @@\n int\n main (void)\n {\n-#pragma acc parallel vector_length (64) num_workers (16) /* { dg-warning \"using .num_workers. \\\\(15\\\\), ignoring 16\" \"\" { target openacc_nvidia_accel_selected } } */\n+#pragma acc parallel vector_length (64) num_workers (16) /* { dg-warning \"using .num_workers \\\\(15\\\\)., ignoring 16\" \"\" { target openacc_nvidia_accel_selected } } */\n   {\n #pragma acc loop worker\n     for (unsigned int i = 0; i < 32; i++)"}, {"sha": "b03cbcd56d450b1badf8538ae656ef7a966ddf32", "filename": "libgomp/testsuite/libgomp.oacc-fortran/attach-descriptor-1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aea19bdb12308aac1519ffc5ecc9d1ec24f9cc5/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fattach-descriptor-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aea19bdb12308aac1519ffc5ecc9d1ec24f9cc5/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fattach-descriptor-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fattach-descriptor-1.f90?ref=2aea19bdb12308aac1519ffc5ecc9d1ec24f9cc5", "patch": "@@ -43,7 +43,7 @@ subroutine test(variant)\n   end if\n \n   !$acc serial present(myvar%arr2)\n-  ! { dg-warning \"using .vector_length. \\\\(32\\\\), ignoring 1\" \"\" { target openacc_nvidia_accel_selected } .-1 }\n+  ! { dg-warning \"using .vector_length \\\\(32\\\\)., ignoring 1\" \"\" { target openacc_nvidia_accel_selected } .-1 }\n   do i=1,10\n     myvar%arr1(i) = i + variant\n     myvar%arr2(i) = i - variant"}, {"sha": "c99787724241ff7718367fb8447171219bdfcee6", "filename": "libgomp/testsuite/libgomp.oacc-fortran/derivedtypes-arrays-1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aea19bdb12308aac1519ffc5ecc9d1ec24f9cc5/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fderivedtypes-arrays-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aea19bdb12308aac1519ffc5ecc9d1ec24f9cc5/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fderivedtypes-arrays-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fderivedtypes-arrays-1.f90?ref=2aea19bdb12308aac1519ffc5ecc9d1ec24f9cc5", "patch": "@@ -88,7 +88,7 @@\n !$acc data copyin(var3%t2(5)%t1%arr1)\n \n !$acc serial present(var3%t2(5)%t1%arr1)\n-! { dg-warning \"using .vector_length. \\\\(32\\\\), ignoring 1\" \"\" { target openacc_nvidia_accel_selected } .-1 }\n+! { dg-warning \"using .vector_length \\\\(32\\\\)., ignoring 1\" \"\" { target openacc_nvidia_accel_selected } .-1 }\n var3%t2(5)%t1%arr1(:,:) = 6\n !$acc end serial\n "}, {"sha": "62f49ba909867c8744799e4858fe98ee630eaa6b", "filename": "libgomp/testsuite/libgomp.oacc-fortran/kernels-loop-2.f95", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aea19bdb12308aac1519ffc5ecc9d1ec24f9cc5/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-loop-2.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aea19bdb12308aac1519ffc5ecc9d1ec24f9cc5/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-loop-2.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fkernels-loop-2.f95?ref=2aea19bdb12308aac1519ffc5ecc9d1ec24f9cc5", "patch": "@@ -16,7 +16,7 @@ program main\n   ! Parallelism dimensions: variable.\n   !$acc kernels copyout (b(0:n-1)) &\n   !$acc num_gangs (3 + a(3)) num_workers (5 + a(5)) vector_length (7 + a(7))\n-  ! { dg-prune-output \"using .vector_length. \\\\(32\\\\), ignoring runtime setting\" }\n+  ! { dg-prune-output \"using .vector_length \\\\(32\\\\)., ignoring runtime setting\" }\n   do i = 0, n -1\n      b(i) = i * 4\n   end do\n@@ -25,7 +25,7 @@ program main\n   ! Parallelism dimensions: literal.\n   !$acc kernels copyin (a(0:n-1), b(0:n-1)) copyout (c(0:n-1)) &\n   !$acc num_gangs (3) num_workers (5) vector_length (7)\n-  ! { dg-prune-output \"using .vector_length. \\\\(32\\\\), ignoring 7\" }\n+  ! { dg-prune-output \"using .vector_length \\\\(32\\\\)., ignoring 7\" }\n   do ii = 0, n - 1\n      c(ii) = a(ii) + b(ii)\n   end do"}, {"sha": "cd3f3555b786c29b1e0ed9b9ef3b0bf35a628ca9", "filename": "libgomp/testsuite/libgomp.oacc-fortran/parallel-dims.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aea19bdb12308aac1519ffc5ecc9d1ec24f9cc5/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fparallel-dims.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aea19bdb12308aac1519ffc5ecc9d1ec24f9cc5/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fparallel-dims.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fparallel-dims.f90?ref=2aea19bdb12308aac1519ffc5ecc9d1ec24f9cc5", "patch": "@@ -67,7 +67,7 @@ program main\n   workers_max = -huge(gangs_max) - 1 ! INT_MIN\n   vectors_max = -huge(gangs_max) - 1 ! INT_MIN\n   !$acc serial &\n-  !$acc   reduction (min: gangs_min, workers_min, vectors_min) reduction (max: gangs_max, workers_max, vectors_max) ! { dg-warning \"using .vector_length. \\\\(32\\\\), ignoring 1\" \"\" { target openacc_nvidia_accel_selected } }\n+  !$acc   reduction (min: gangs_min, workers_min, vectors_min) reduction (max: gangs_max, workers_max, vectors_max) ! { dg-warning \"using .vector_length \\\\(32\\\\)., ignoring 1\" \"\" { target openacc_nvidia_accel_selected } }\n   ! { dg-note {variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n   do i = 100, -99, -1\n      gangs_min = acc_gang ();\n@@ -93,7 +93,7 @@ program main\n   workers_max = -huge(gangs_max) - 1 ! INT_MIN\n   vectors_max = -huge(gangs_max) - 1 ! INT_MIN\n   !$acc serial copy (vectors_actual) &\n-  !$acc   copy (gangs_min, gangs_max, workers_min, workers_max, vectors_min, vectors_max) ! { dg-warning \"using .vector_length. \\\\(32\\\\), ignoring 1\" \"\" { target openacc_nvidia_accel_selected } }\n+  !$acc   copy (gangs_min, gangs_max, workers_min, workers_max, vectors_min, vectors_max) ! { dg-warning \"using .vector_length \\\\(32\\\\)., ignoring 1\" \"\" { target openacc_nvidia_accel_selected } }\n   ! { dg-bogus \"\\[Ww\\]arning: region contains gang partitioned code but is not gang partitioned\" \"TODO 'serial'\" { xfail *-*-* } .-1 }\n   ! { dg-bogus \"\\[Ww\\]arning: region contains worker partitioned code but is not worker partitioned\" \"TODO 'serial'\" { xfail *-*-* } .-2 }\n   ! { dg-bogus \"\\[Ww\\]arning: region contains vector partitioned code but is not vector partitioned\" \"TODO 'serial'\" { xfail *-*-* } .-3 }"}, {"sha": "906c93010cf71f1fe2923b6816a534b8035b4dd6", "filename": "libgomp/testsuite/libgomp.oacc-fortran/privatized-ref-1.f95", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2aea19bdb12308aac1519ffc5ecc9d1ec24f9cc5/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fprivatized-ref-1.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2aea19bdb12308aac1519ffc5ecc9d1ec24f9cc5/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fprivatized-ref-1.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fprivatized-ref-1.f95?ref=2aea19bdb12308aac1519ffc5ecc9d1ec24f9cc5", "patch": "@@ -96,7 +96,7 @@ subroutine workers(t1, res)\n     real, intent(out) :: res(:)\n \n     !$acc parallel copyout(res) num_gangs(64) num_workers(64)\n-    ! { dg-warning \"using .num_workers. \\\\(32\\\\), ignoring 64\" \"\" { target openacc_nvidia_accel_selected } .-1 }\n+    ! { dg-warning \"using .num_workers \\\\(32\\\\)., ignoring 64\" \"\" { target openacc_nvidia_accel_selected } .-1 }\n \n     !$acc loop gang ! { dg-line l_loop[incr c_loop] }\n     ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n@@ -120,7 +120,7 @@ subroutine vectors(t1, res)\n     real, intent(out) :: res(:)\n \n     !$acc parallel copyout(res) num_gangs(64) num_workers(64)\n-    ! { dg-warning \"using .num_workers. \\\\(32\\\\), ignoring 64\" \"\" { target openacc_nvidia_accel_selected } .-1 }\n+    ! { dg-warning \"using .num_workers \\\\(32\\\\)., ignoring 64\" \"\" { target openacc_nvidia_accel_selected } .-1 }\n \n     !$acc loop gang worker ! { dg-line l_loop[incr c_loop] }\n     ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }\n@@ -144,7 +144,7 @@ subroutine gangs_workers_vectors(t1, res)\n     real, intent(out) :: res(:)\n \n     !$acc parallel copyout(res) num_gangs(64) num_workers(64)\n-    ! { dg-warning \"using .num_workers. \\\\(32\\\\), ignoring 64\" \"\" { target openacc_nvidia_accel_selected } .-1 }\n+    ! { dg-warning \"using .num_workers \\\\(32\\\\)., ignoring 64\" \"\" { target openacc_nvidia_accel_selected } .-1 }\n \n     !$acc loop collapse(2) gang worker vector private(t1) ! { dg-line l_loop[incr c_loop] }\n     ! { dg-note {variable 'i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } l_loop$c_loop }"}]}