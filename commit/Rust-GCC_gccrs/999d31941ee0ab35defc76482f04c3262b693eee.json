{"sha": "999d31941ee0ab35defc76482f04c3262b693eee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTk5ZDMxOTQxZWUwYWIzNWRlZmM3NjQ4MmYwNGMzMjYyYjY5M2VlZQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2008-06-03T13:25:18Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2008-06-03T13:25:18Z"}, "message": "i386.c (ix86_gen_leave): New.\n\n2008-06-03  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t*  config/i386/i386.c (ix86_gen_leave): New.\n\t(ix86_gen_pop1): Likewise.\n\t(ix86_gen_add3): Likewise.\n\t(ix86_gen_sub3): Likewise.\n\t(ix86_gen_sub3_carry): Likewise.\n\t(ix86_gen_one_cmpl2): Likewise.\n\t(ix86_gen_monitor): Likewise.\n\t(override_options): Initialize ix86_gen_leave, ix86_gen_pop1,\n\tix86_gen_add3, ix86_gen_sub3, ix86_gen_sub3_carry,\n\tix86_gen_one_cmpl2 and ix86_gen_monitor.\n\t(ix86_file_end): Use mov%z0 instead of mov{q}/mov{l}.\n\t(output_set_got): Use mov%z0, pop%z0 and add%z0 instead of\n\tmov{q}/mov{l}, pop{q}/pop{l} and add{q}/add{l}.\n\t(ix86_expand_epilogue): Updated.\n\t(print_operand): Handle integer register operand for 'z'.\n\t(ix86_expand_strlensi_unroll_1): Likewise.\n\t(ix86_expand_strlen): Likewise.\n\t(ix86_expand_builtin): Likewise.\n\t(x86_output_mi_thunk): Use mov%z1 and add%z1 instead of\n\tmov{q}/mov{l} and add{q}/add{l}.\n\nFrom-SVN: r136321", "tree": {"sha": "522af15fdcc3cb10e16fe6da784fdb332ba95191", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/522af15fdcc3cb10e16fe6da784fdb332ba95191"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/999d31941ee0ab35defc76482f04c3262b693eee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/999d31941ee0ab35defc76482f04c3262b693eee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/999d31941ee0ab35defc76482f04c3262b693eee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/999d31941ee0ab35defc76482f04c3262b693eee/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "90b484920aac380b54197200a758cb48702b7c5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90b484920aac380b54197200a758cb48702b7c5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90b484920aac380b54197200a758cb48702b7c5c"}], "stats": {"total": 189, "additions": 85, "deletions": 104}, "files": [{"sha": "e1a1bb3f36bad09466d9bf0fc63c28175bc93be9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/999d31941ee0ab35defc76482f04c3262b693eee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/999d31941ee0ab35defc76482f04c3262b693eee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=999d31941ee0ab35defc76482f04c3262b693eee", "patch": "@@ -1,3 +1,26 @@\n+2008-06-03  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t*  config/i386/i386.c (ix86_gen_leave): New.\n+\t(ix86_gen_pop1): Likewise.\n+\t(ix86_gen_add3): Likewise.\n+\t(ix86_gen_sub3): Likewise.\n+\t(ix86_gen_sub3_carry): Likewise.\n+\t(ix86_gen_one_cmpl2): Likewise.\n+\t(ix86_gen_monitor): Likewise.\n+\t(override_options): Initialize ix86_gen_leave, ix86_gen_pop1,\n+\tix86_gen_add3, ix86_gen_sub3, ix86_gen_sub3_carry,\n+\tix86_gen_one_cmpl2 and ix86_gen_monitor.\n+\t(ix86_file_end): Use mov%z0 instead of mov{q}/mov{l}.\n+\t(output_set_got): Use mov%z0, pop%z0 and add%z0 instead of\n+\tmov{q}/mov{l}, pop{q}/pop{l} and add{q}/add{l}.\n+\t(ix86_expand_epilogue): Updated.\n+\t(print_operand): Handle integer register operand for 'z'.\n+\t(ix86_expand_strlensi_unroll_1): Likewise.\n+\t(ix86_expand_strlen): Likewise.\n+\t(ix86_expand_builtin): Likewise.\n+\t(x86_output_mi_thunk): Use mov%z1 and add%z1 instead of\n+\tmov{q}/mov{l} and add{q}/add{l}.\n+\n 2008-06-03  Kai Tietz  <kai.tietz@onevision.com>\n \n \t* config/i386/i386.md (define_mode_iterator P): New."}, {"sha": "81dcacd41e02116833c348bb9a000338b3604a0f", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 62, "deletions": 104, "changes": 166, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/999d31941ee0ab35defc76482f04c3262b693eee/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/999d31941ee0ab35defc76482f04c3262b693eee/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=999d31941ee0ab35defc76482f04c3262b693eee", "patch": "@@ -1697,6 +1697,14 @@ static int ix86_regparm;\n extern int ix86_force_align_arg_pointer;\n static const char ix86_force_align_arg_pointer_string[] = \"force_align_arg_pointer\";\n \n+static rtx (*ix86_gen_leave) (void);\n+static rtx (*ix86_gen_pop1) (rtx);\n+static rtx (*ix86_gen_add3) (rtx, rtx, rtx);\n+static rtx (*ix86_gen_sub3) (rtx, rtx, rtx);\n+static rtx (*ix86_gen_sub3_carry) (rtx, rtx, rtx, rtx);\n+static rtx (*ix86_gen_one_cmpl2) (rtx, rtx);\n+static rtx (*ix86_gen_monitor) (rtx, rtx, rtx);\n+\n /* Preferred alignment for stack boundary in bits.  */\n unsigned int ix86_preferred_stack_boundary;\n \n@@ -2766,6 +2774,27 @@ override_options (void)\n   if (!TARGET_64BIT || DEFAULT_ABI == MS_ABI)\n     targetm.expand_builtin_va_start = NULL;\n \n+  if (TARGET_64BIT)\n+    {\n+      ix86_gen_leave = gen_leave_rex64;\n+      ix86_gen_pop1 = gen_popdi1;\n+      ix86_gen_add3 = gen_adddi3;\n+      ix86_gen_sub3 = gen_subdi3;\n+      ix86_gen_sub3_carry = gen_subdi3_carry_rex64;\n+      ix86_gen_one_cmpl2 = gen_one_cmpldi2;\n+      ix86_gen_monitor = gen_sse3_monitor64;\n+    }\n+  else\n+    {\n+      ix86_gen_leave = gen_leave;\n+      ix86_gen_pop1 = gen_popsi1;\n+      ix86_gen_add3 = gen_addsi3;\n+      ix86_gen_sub3 = gen_subsi3;\n+      ix86_gen_sub3_carry = gen_subsi3_carry;\n+      ix86_gen_one_cmpl2 = gen_one_cmplsi2;\n+      ix86_gen_monitor = gen_sse3_monitor;\n+    }\n+\n #ifdef USE_IX86_CLD\n   /* Use -mcld by default for 32-bit code if configured with --enable-cld.  */\n   if (!TARGET_64BIT)\n@@ -6029,10 +6058,7 @@ ix86_file_end (void)\n \n       xops[0] = gen_rtx_REG (Pmode, regno);\n       xops[1] = gen_rtx_MEM (Pmode, stack_pointer_rtx);\n-      if (TARGET_64BIT)\n-\toutput_asm_insn (\"mov{q}\\t{%1, %0|%0, %1}\", xops);\n-      else\n-\toutput_asm_insn (\"mov{l}\\t{%1, %0|%0, %1}\", xops);\n+      output_asm_insn (\"mov%z0\\t{%1, %0|%0, %1}\", xops);\n       output_asm_insn (\"ret\", xops);\n     }\n \n@@ -6072,12 +6098,7 @@ output_set_got (rtx dest, rtx label ATTRIBUTE_UNUSED)\n       xops[2] = gen_rtx_LABEL_REF (Pmode, label ? label : gen_label_rtx ());\n \n       if (!flag_pic)\n-        {\n-          if (TARGET_64BIT)\n-\t    output_asm_insn (\"mov{q}\\t{%2, %0|%0, %2}\", xops);\n-\t  else\n-\t    output_asm_insn (\"mov{l}\\t{%2, %0|%0, %2}\", xops);\n-\t}\n+\toutput_asm_insn (\"mov%z0\\t{%2, %0|%0, %2}\", xops);\n       else\n \toutput_asm_insn (\"call\\t%a2\", xops);\n \n@@ -6092,12 +6113,7 @@ output_set_got (rtx dest, rtx label ATTRIBUTE_UNUSED)\n \t\t\t\t CODE_LABEL_NUMBER (XEXP (xops[2], 0)));\n \n       if (flag_pic)\n-        {\n-          if (TARGET_64BIT)\n-\t    output_asm_insn (\"pop{q}\\t%0\", xops);\n-\t  else\n-\t    output_asm_insn (\"pop{l}\\t%0\", xops);\n-\t}\n+\toutput_asm_insn (\"pop%z0\\t%0\", xops);\n     }\n   else\n     {\n@@ -6123,19 +6139,9 @@ output_set_got (rtx dest, rtx label ATTRIBUTE_UNUSED)\n     return \"\";\n \n   if (!flag_pic || TARGET_DEEP_BRANCH_PREDICTION)\n-    {\n-      if (TARGET_64BIT)\n-        output_asm_insn (\"add{q}\\t{%1, %0|%0, %1}\", xops);\n-      else\n-        output_asm_insn (\"add{l}\\t{%1, %0|%0, %1}\", xops);\n-    }\n+    output_asm_insn (\"add%z0\\t{%1, %0|%0, %1}\", xops);\n   else\n-    {\n-      if (TARGET_64BIT)\n-        output_asm_insn (\"add{q}\\t{%1+[.-%a2], %0|%0, %1+(.-%a2)}\", xops);\n-      else\n-        output_asm_insn (\"add{l}\\t{%1+[.-%a2], %0|%0, %1+(.-%a2)}\", xops);\n-    }\n+    output_asm_insn (\"add%z0\\t{%1+[.-%a2], %0|%0, %1+(.-%a2)}\", xops);\n \n   return \"\";\n }\n@@ -6860,16 +6866,14 @@ ix86_expand_epilogue (int style)\n       /* If not an i386, mov & pop is faster than \"leave\".  */\n       else if (TARGET_USE_LEAVE || optimize_size\n \t       || !cfun->machine->use_fast_prologue_epilogue)\n-\temit_insn (TARGET_64BIT ? gen_leave_rex64 () : gen_leave ());\n+\temit_insn ((*ix86_gen_leave) ());\n       else\n \t{\n \t  pro_epilogue_adjust_stack (stack_pointer_rtx,\n \t\t\t\t     hard_frame_pointer_rtx,\n \t\t\t\t     const0_rtx, style);\n-\t  if (TARGET_64BIT)\n-\t    emit_insn (gen_popdi1 (hard_frame_pointer_rtx));\n-\t  else\n-\t    emit_insn (gen_popsi1 (hard_frame_pointer_rtx));\n+\n+\t  emit_insn ((*ix86_gen_pop1) (hard_frame_pointer_rtx));\n \t}\n     }\n   else\n@@ -6889,22 +6893,15 @@ ix86_expand_epilogue (int style)\n \n       for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\n \tif (ix86_save_reg (regno, false))\n-\t  {\n-\t    if (TARGET_64BIT)\n-\t      emit_insn (gen_popdi1 (gen_rtx_REG (Pmode, regno)));\n-\t    else\n-\t      emit_insn (gen_popsi1 (gen_rtx_REG (Pmode, regno)));\n-\t  }\n+\t  emit_insn ((*ix86_gen_pop1) (gen_rtx_REG (Pmode, regno)));\n       if (frame_pointer_needed)\n \t{\n \t  /* Leave results in shorter dependency chains on CPUs that are\n \t     able to grok it fast.  */\n \t  if (TARGET_USE_LEAVE)\n-\t    emit_insn (TARGET_64BIT ? gen_leave_rex64 () : gen_leave ());\n-\t  else if (TARGET_64BIT)\n-\t    emit_insn (gen_popdi1 (hard_frame_pointer_rtx));\n+\t    emit_insn ((*ix86_gen_leave) ());\n \t  else\n-\t    emit_insn (gen_popsi1 (hard_frame_pointer_rtx));\n+\t    emit_insn ((*ix86_gen_pop1) (hard_frame_pointer_rtx));\n \t}\n     }\n \n@@ -9170,12 +9167,17 @@ print_operand (FILE *file, rtx x, int code)\n \t    case 8:\n \t      if (GET_MODE_CLASS (GET_MODE (x)) == MODE_INT)\n \t\t{\n+\t\t  if (MEM_P (x))\n+\t\t    {\n #ifdef GAS_MNEMONICS\n-\t\t  putc ('q', file);\n+\t\t      putc ('q', file);\n #else\n-\t\t  putc ('l', file);\n-\t\t  putc ('l', file);\n+\t\t      putc ('l', file);\n+\t\t      putc ('l', file);\n #endif\n+\t\t    }\n+\t\t  else\n+\t\t    putc ('q', file);\n \t\t}\n \t      else\n \t        putc ('l', file);\n@@ -16258,10 +16260,7 @@ ix86_expand_strlensi_unroll_1 (rtx out, rtx src, rtx align_rtx)\n \t\t\t       QImode, 1, end_0_label);\n \n       /* Increment the address.  */\n-      if (TARGET_64BIT)\n-\temit_insn (gen_adddi3 (out, out, const1_rtx));\n-      else\n-\temit_insn (gen_addsi3 (out, out, const1_rtx));\n+      emit_insn ((*ix86_gen_add3) (out, out, const1_rtx));\n \n       /* Not needed with an alignment of 2 */\n       if (align != 2)\n@@ -16271,21 +16270,15 @@ ix86_expand_strlensi_unroll_1 (rtx out, rtx src, rtx align_rtx)\n \t  emit_cmp_and_jump_insns (mem, const0_rtx, EQ, NULL, QImode, 1,\n \t\t\t\t   end_0_label);\n \n-\t  if (TARGET_64BIT)\n-\t    emit_insn (gen_adddi3 (out, out, const1_rtx));\n-\t  else\n-\t    emit_insn (gen_addsi3 (out, out, const1_rtx));\n+\t  emit_insn ((*ix86_gen_add3) (out, out, const1_rtx));\n \n \t  emit_label (align_3_label);\n \t}\n \n       emit_cmp_and_jump_insns (mem, const0_rtx, EQ, NULL, QImode, 1,\n \t\t\t       end_0_label);\n \n-      if (TARGET_64BIT)\n-\temit_insn (gen_adddi3 (out, out, const1_rtx));\n-      else\n-\temit_insn (gen_addsi3 (out, out, const1_rtx));\n+      emit_insn ((*ix86_gen_add3) (out, out, const1_rtx));\n     }\n \n   /* Generate loop to check 4 bytes at a time.  It is not a good idea to\n@@ -16295,10 +16288,7 @@ ix86_expand_strlensi_unroll_1 (rtx out, rtx src, rtx align_rtx)\n \n   mem = change_address (src, SImode, out);\n   emit_move_insn (scratch, mem);\n-  if (TARGET_64BIT)\n-    emit_insn (gen_adddi3 (out, out, GEN_INT (4)));\n-  else\n-    emit_insn (gen_addsi3 (out, out, GEN_INT (4)));\n+  emit_insn ((*ix86_gen_add3) (out, out, GEN_INT (4)));\n \n   /* This formula yields a nonzero result iff one of the bytes is zero.\n      This saves three branches inside loop and many cycles.  */\n@@ -16354,10 +16344,7 @@ ix86_expand_strlensi_unroll_1 (rtx out, rtx src, rtx align_rtx)\n \n        /* Not in the first two.  Move two bytes forward.  */\n        emit_insn (gen_lshrsi3 (tmpreg, tmpreg, GEN_INT (16)));\n-       if (TARGET_64BIT)\n-\t emit_insn (gen_adddi3 (out, out, const2_rtx));\n-       else\n-\t emit_insn (gen_addsi3 (out, out, const2_rtx));\n+       emit_insn ((*ix86_gen_add3) (out, out, const2_rtx));\n \n        emit_label (end_2_label);\n \n@@ -16367,10 +16354,7 @@ ix86_expand_strlensi_unroll_1 (rtx out, rtx src, rtx align_rtx)\n   tmpreg = gen_lowpart (QImode, tmpreg);\n   emit_insn (gen_addqi3_cc (tmpreg, tmpreg, tmpreg));\n   cmp = gen_rtx_LTU (Pmode, gen_rtx_REG (CCmode, FLAGS_REG), const0_rtx);\n-  if (TARGET_64BIT)\n-    emit_insn (gen_subdi3_carry_rex64 (out, out, GEN_INT (3), cmp));\n-  else\n-    emit_insn (gen_subsi3_carry (out, out, GEN_INT (3), cmp));\n+  emit_insn ((*ix86_gen_sub3_carry) (out, out, GEN_INT (3), cmp));\n \n   emit_label (end_0_label);\n }\n@@ -16412,10 +16396,7 @@ ix86_expand_strlen (rtx out, rtx src, rtx eoschar, rtx align)\n       /* strlensi_unroll_1 returns the address of the zero at the end of\n          the string, like memchr(), so compute the length by subtracting\n          the start address.  */\n-      if (TARGET_64BIT)\n-\temit_insn (gen_subdi3 (out, out, addr));\n-      else\n-\temit_insn (gen_subsi3 (out, out, addr));\n+      emit_insn ((*ix86_gen_sub3) (out, out, addr));\n     }\n   else\n     {\n@@ -16438,16 +16419,8 @@ ix86_expand_strlen (rtx out, rtx src, rtx eoschar, rtx align)\n       unspec = gen_rtx_UNSPEC (Pmode, gen_rtvec (4, src, eoschar, align,\n \t\t\t\t\t\t scratch4), UNSPEC_SCAS);\n       emit_insn (gen_strlenqi_1 (scratch1, scratch3, unspec));\n-      if (TARGET_64BIT)\n-\t{\n-\t  emit_insn (gen_one_cmpldi2 (scratch2, scratch1));\n-\t  emit_insn (gen_adddi3 (out, scratch2, constm1_rtx));\n-\t}\n-      else\n-\t{\n-\t  emit_insn (gen_one_cmplsi2 (scratch2, scratch1));\n-\t  emit_insn (gen_addsi3 (out, scratch2, constm1_rtx));\n-\t}\n+      emit_insn ((*ix86_gen_one_cmpl2) (scratch2, scratch1));\n+      emit_insn ((*ix86_gen_add3) (out, scratch2, constm1_rtx));\n     }\n   return 1;\n }\n@@ -21542,10 +21515,7 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n \top1 = copy_to_mode_reg (SImode, op1);\n       if (!REG_P (op2))\n \top2 = copy_to_mode_reg (SImode, op2);\n-      if (!TARGET_64BIT)\n-\temit_insn (gen_sse3_monitor (op0, op1, op2));\n-      else\n-\temit_insn (gen_sse3_monitor64 (op0, op1, op2));\n+      emit_insn ((*ix86_gen_monitor) (op0, op1, op2));\n       return 0;\n \n     case IX86_BUILTIN_MWAIT:\n@@ -23221,10 +23191,7 @@ x86_output_mi_thunk (FILE *file ATTRIBUTE_UNUSED,\n       /* Put the this parameter into %eax.  */\n       xops[0] = this_param;\n       xops[1] = this_reg = gen_rtx_REG (Pmode, AX_REG);\n-      if (TARGET_64BIT)\n-        output_asm_insn (\"mov{q}\\t{%0, %1|%1, %0}\", xops);\n-      else\n-        output_asm_insn (\"mov{l}\\t{%0, %1|%1, %0}\", xops);\n+      output_asm_insn (\"mov%z1\\t{%0, %1|%1, %0}\", xops);\n     }\n   else\n     this_reg = NULL_RTX;\n@@ -23266,10 +23233,7 @@ x86_output_mi_thunk (FILE *file ATTRIBUTE_UNUSED,\n \n       xops[0] = gen_rtx_MEM (Pmode, this_reg);\n       xops[1] = tmp;\n-      if (TARGET_64BIT)\n-\toutput_asm_insn (\"mov{q}\\t{%0, %1|%1, %0}\", xops);\n-      else\n-\toutput_asm_insn (\"mov{l}\\t{%0, %1|%1, %0}\", xops);\n+      output_asm_insn (\"mov%z1\\t{%0, %1|%1, %0}\", xops);\n \n       /* Adjust the this parameter.  */\n       xops[0] = gen_rtx_MEM (Pmode, plus_constant (tmp, vcall_offset));\n@@ -23282,21 +23246,15 @@ x86_output_mi_thunk (FILE *file ATTRIBUTE_UNUSED,\n \t  xops[0] = gen_rtx_MEM (Pmode, gen_rtx_PLUS (Pmode, tmp, tmp2));\n \t}\n       xops[1] = this_reg;\n-      if (TARGET_64BIT)\n-\toutput_asm_insn (\"add{q}\\t{%0, %1|%1, %0}\", xops);\n-      else\n-\toutput_asm_insn (\"add{l}\\t{%0, %1|%1, %0}\", xops);\n+      output_asm_insn (\"add%z1\\t{%0, %1|%1, %0}\", xops);\n     }\n \n   /* If necessary, drop THIS back to its stack slot.  */\n   if (this_reg && this_reg != this_param)\n     {\n       xops[0] = this_reg;\n       xops[1] = this_param;\n-      if (TARGET_64BIT)\n-        output_asm_insn (\"mov{q}\\t{%0, %1|%1, %0}\", xops);\n-      else\n-        output_asm_insn (\"mov{l}\\t{%0, %1|%1, %0}\", xops);\n+      output_asm_insn (\"mov%z1\\t{%0, %1|%1, %0}\", xops);\n     }\n \n   xops[0] = XEXP (DECL_RTL (function), 0);"}]}