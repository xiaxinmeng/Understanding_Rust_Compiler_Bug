{"sha": "f3070dab7a2ded2c2ee612d6e48ca01b77327379", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjMwNzBkYWI3YTJkZWQyYzJlZTYxMmQ2ZTQ4Y2EwMWI3NzMyNzM3OQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-10-19T20:13:14Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-10-19T20:13:14Z"}, "message": "Make std::enable_shared_from_this cope with ambiguity\n\n\t* include/backward/auto_ptr.h (__shared_ptr(auto_ptr&&)): Call\n\t_M_enable_shared_from_this_with instead of\n\t__enable_shared_from_this_helper.\n\t* include/bits/shared_ptr.h (__enable_shared_from_this_helper):\n\tRemove overload for std::enable_shared_from_this..\n\t(__enable_shared_from_this_base): Define friend function to select a\n\tstd::enable_shared_from_this base class.\n\t* include/bits/shared_ptr_base.h (__enable_shared_from_this_helper):\n\tRemove all overloads.\n\t(__shared_ptr): Change all relevant constructors to call\n\t_M_enable_shared_from_this_with instead of\n\t__enable_shared_from_this_helper.\n\t(__shared_ptr::__efst_base_t, __shared_ptr::__has_efst_base): Helpers\n\tto detect accessible and unambiguous enable_shared_from_this bases.\n\t(__shared_ptr::_M_enable_shared_from_this_with): New function to\n\treplace __enable_shared_from_this_helper overloads.\n\t(__enable_shared_from_this_helper): Remove overload for\n\tstd::__enable_shared_from_this.\n\t(__enable_shared_from_this_base): Define friend function to select a\n\tstd::__enable_shared_from_this base class.\n\t* include/experimental/bits/shared_ptr.h (experimental::shared_ptr):\n\tChange relevant constructors to call _M_enable_shared_from_this_with.\n\t(experimental::shared_ptr::__efst_base_t)\n\t(experimental::shared_ptr::__has_efst_base): Helpers to detect\n\taccessible and unambiguous enable_shared_from_this bases.\n\t(experimental::shared_ptr::_M_enable_shared_from_this_with): Define.\n\t(experimental::__enable_shared_from_this_helper): Remove overload for\n\tstd::experimental::enable_shared_from_this.\n\t(experimental::__expt_enable_shared_from_this_base): Define friend\n\tfunction to select a std::experimental::enable_shared_from_this base.\n\t* testsuite/experimental/memory/shared_ptr/cons/\n\tenable_shared_from_this.cc: New test.\n\t* testsuite/experimental/memory/shared_ptr/cons/unique_ptr_ctor.cc:\n\tAdjust expected behaviour for shared_ptr<A[]>.\n\nFrom-SVN: r241353", "tree": {"sha": "1917429d34a69abb800637b49545416e81cd3e74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1917429d34a69abb800637b49545416e81cd3e74"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3070dab7a2ded2c2ee612d6e48ca01b77327379", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3070dab7a2ded2c2ee612d6e48ca01b77327379", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3070dab7a2ded2c2ee612d6e48ca01b77327379", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3070dab7a2ded2c2ee612d6e48ca01b77327379/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bdcf8e7c55b6d54062f7bcd3a099c732b84a1e19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdcf8e7c55b6d54062f7bcd3a099c732b84a1e19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdcf8e7c55b6d54062f7bcd3a099c732b84a1e19"}], "stats": {"total": 269, "additions": 191, "deletions": 78}, "files": [{"sha": "93a8f3ec4ca2343791b73448ce2f9640ac6930bb", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3070dab7a2ded2c2ee612d6e48ca01b77327379/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3070dab7a2ded2c2ee612d6e48ca01b77327379/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f3070dab7a2ded2c2ee612d6e48ca01b77327379", "patch": "@@ -1,5 +1,40 @@\n 2016-10-19  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/backward/auto_ptr.h (__shared_ptr(auto_ptr&&)): Call\n+\t_M_enable_shared_from_this_with instead of\n+\t__enable_shared_from_this_helper.\n+\t* include/bits/shared_ptr.h (__enable_shared_from_this_helper):\n+\tRemove overload for std::enable_shared_from_this..\n+\t(__enable_shared_from_this_base): Define friend function to select a\n+\tstd::enable_shared_from_this base class.\n+\t* include/bits/shared_ptr_base.h (__enable_shared_from_this_helper):\n+\tRemove all overloads.\n+\t(__shared_ptr): Change all relevant constructors to call\n+\t_M_enable_shared_from_this_with instead of\n+\t__enable_shared_from_this_helper.\n+\t(__shared_ptr::__efst_base_t, __shared_ptr::__has_efst_base): Helpers\n+\tto detect accessible and unambiguous enable_shared_from_this bases.\n+\t(__shared_ptr::_M_enable_shared_from_this_with): New function to\n+\treplace __enable_shared_from_this_helper overloads.\n+\t(__enable_shared_from_this_helper): Remove overload for\n+\tstd::__enable_shared_from_this.\n+\t(__enable_shared_from_this_base): Define friend function to select a\n+\tstd::__enable_shared_from_this base class.\n+\t* include/experimental/bits/shared_ptr.h (experimental::shared_ptr):\n+\tChange relevant constructors to call _M_enable_shared_from_this_with.\n+\t(experimental::shared_ptr::__efst_base_t)\n+\t(experimental::shared_ptr::__has_efst_base): Helpers to detect\n+\taccessible and unambiguous enable_shared_from_this bases.\n+\t(experimental::shared_ptr::_M_enable_shared_from_this_with): Define.\n+\t(experimental::__enable_shared_from_this_helper): Remove overload for\n+\tstd::experimental::enable_shared_from_this.\n+\t(experimental::__expt_enable_shared_from_this_base): Define friend\n+\tfunction to select a std::experimental::enable_shared_from_this base.\n+\t* testsuite/experimental/memory/shared_ptr/cons/\n+\tenable_shared_from_this.cc: New test.\n+\t* testsuite/experimental/memory/shared_ptr/cons/unique_ptr_ctor.cc:\n+\tAdjust expected behaviour for shared_ptr<A[]>.\n+\n \t* include/debug/vector (__gnu_debug::vector::emplace_back): Fix return\n \ttype.\n "}, {"sha": "94911c87981ecd71ea95e5f5236769025b4d0a25", "filename": "libstdc++-v3/include/backward/auto_ptr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3070dab7a2ded2c2ee612d6e48ca01b77327379/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fauto_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3070dab7a2ded2c2ee612d6e48ca01b77327379/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fauto_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fauto_ptr.h?ref=f3070dab7a2ded2c2ee612d6e48ca01b77327379", "patch": "@@ -311,7 +311,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static_assert( sizeof(_Tp1) > 0, \"incomplete type\" );\n       _Tp1* __tmp = __r.get();\n       _M_refcount = __shared_count<_Lp>(std::move(__r));\n-      __enable_shared_from_this_helper(_M_refcount, __tmp, __tmp);\n+      _M_enable_shared_from_this_with(__tmp);\n     }\n \n   template<typename _Tp>"}, {"sha": "9b9261c04e45b000329c4958844ea05ce4a2de4e", "filename": "libstdc++-v3/include/bits/shared_ptr.h", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3070dab7a2ded2c2ee612d6e48ca01b77327379/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3070dab7a2ded2c2ee612d6e48ca01b77327379/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h?ref=f3070dab7a2ded2c2ee612d6e48ca01b77327379", "patch": "@@ -607,25 +607,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_M_weak_assign(_Tp1* __p, const __shared_count<>& __n) const noexcept\n \t{ _M_weak_this._M_assign(__p, __n); }\n \n-      template<typename _Tp1, typename _Tp2>\n-\tfriend void\n-\t__enable_shared_from_this_helper(const __shared_count<>&,\n-\t\t\t\t\t const enable_shared_from_this<_Tp1>*,\n-\t\t\t\t\t const _Tp2*) noexcept;\n+      // Found by ADL when this is an associated class.\n+      friend const enable_shared_from_this*\n+      __enable_shared_from_this_base(const __shared_count<>&,\n+\t\t\t\t     const enable_shared_from_this* __p)\n+      { return __p; }\n+\n+      template<typename, _Lock_policy>\n+\tfriend class __shared_ptr;\n \n       mutable weak_ptr<_Tp>  _M_weak_this;\n     };\n \n-  template<typename _Tp1, typename _Tp2>\n-    inline void\n-    __enable_shared_from_this_helper(const __shared_count<>& __pn,\n-\t\t\t\t     const enable_shared_from_this<_Tp1>*\n-\t\t\t\t     __pe, const _Tp2* __px) noexcept\n-    {\n-      if (__pe != nullptr)\n-\t__pe->_M_weak_assign(const_cast<_Tp2*>(__px), __pn);\n-    }\n-\n   /**\n    *  @brief  Create an object that is owned by a shared_ptr.\n    *  @param  __a     An allocator."}, {"sha": "c0686ad95da4065304ea13a50bd17358b11cf765", "filename": "libstdc++-v3/include/bits/shared_ptr_base.h", "status": "modified", "additions": 38, "deletions": 44, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3070dab7a2ded2c2ee612d6e48ca01b77327379/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3070dab7a2ded2c2ee612d6e48ca01b77327379/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h?ref=f3070dab7a2ded2c2ee612d6e48ca01b77327379", "patch": "@@ -847,28 +847,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  _M_pi = nullptr;\n     }\n \n-  // Support for enable_shared_from_this.\n-\n-  // Friend of __enable_shared_from_this.\n-  template<_Lock_policy _Lp, typename _Tp1, typename _Tp2>\n-    void\n-    __enable_shared_from_this_helper(const __shared_count<_Lp>&,\n-\t\t\t\t     const __enable_shared_from_this<_Tp1,\n-\t\t\t\t     _Lp>*, const _Tp2*) noexcept;\n-\n-  // Friend of enable_shared_from_this.\n-  template<typename _Tp1, typename _Tp2>\n-    void\n-    __enable_shared_from_this_helper(const __shared_count<>&,\n-\t\t\t\t     const enable_shared_from_this<_Tp1>*,\n-\t\t\t\t     const _Tp2*) noexcept;\n-\n-  template<_Lock_policy _Lp>\n-    inline void\n-    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept\n-    { }\n-\n-\n   template<typename _Tp, _Lock_policy _Lp>\n     class __shared_ptr\n     {\n@@ -898,7 +876,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  __glibcxx_function_requires(_ConvertibleConcept<_Tp1*, _Tp*>)\n \t  static_assert( !is_void<_Tp1>::value, \"incomplete type\" );\n \t  static_assert( sizeof(_Tp1) > 0, \"incomplete type\" );\n-\t  __enable_shared_from_this_helper(_M_refcount, __p, __p);\n+\t  _M_enable_shared_from_this_with(__p);\n \t}\n \n       template<typename _Tp1, typename _Deleter>\n@@ -907,7 +885,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t{\n \t  __glibcxx_function_requires(_ConvertibleConcept<_Tp1*, _Tp*>)\n \t  // TODO requires _Deleter CopyConstructible and __d(__p) well-formed\n-\t  __enable_shared_from_this_helper(_M_refcount, __p, __p);\n+\t  _M_enable_shared_from_this_with(__p);\n \t}\n \n       template<typename _Tp1, typename _Deleter, typename _Alloc>\n@@ -916,7 +894,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t{\n \t  __glibcxx_function_requires(_ConvertibleConcept<_Tp1*, _Tp*>)\n \t  // TODO requires _Deleter CopyConstructible and __d(__p) well-formed\n-\t  __enable_shared_from_this_helper(_M_refcount, __p, __p);\n+\t  _M_enable_shared_from_this_with(__p);\n \t}\n \n       template<typename _Deleter>\n@@ -978,7 +956,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  __glibcxx_function_requires(_ConvertibleConcept<_Tp1*, _Tp*>)\n \t  auto __raw = _S_raw_ptr(__r.get());\n \t  _M_refcount = __shared_count<_Lp>(std::move(__r));\n-\t  __enable_shared_from_this_helper(_M_refcount, __raw, __raw);\n+\t  _M_enable_shared_from_this_with(__raw);\n \t}\n \n #if _GLIBCXX_USE_DEPRECATED\n@@ -1114,7 +1092,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  // This relies on _Sp_counted_ptr_inplace::_M_get_deleter.\n \t  void* __p = _M_refcount._M_get_deleter(typeid(__tag));\n \t  _M_ptr = static_cast<_Tp*>(__p);\n-\t  __enable_shared_from_this_helper(_M_refcount, _M_ptr, _M_ptr);\n+\t  _M_enable_shared_from_this_with(_M_ptr);\n \t}\n #else\n       template<typename _Alloc>\n@@ -1146,7 +1124,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);\n \t  _M_refcount._M_swap(__count);\n \t  _M_ptr = __ptr;\n-\t  __enable_shared_from_this_helper(_M_refcount, _M_ptr, _M_ptr);\n+\t  _M_enable_shared_from_this_with(_M_ptr);\n \t}\n #endif\n \n@@ -1166,6 +1144,34 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       friend class __weak_ptr<_Tp, _Lp>;\n \n     private:\n+\n+      template<typename _Yp>\n+\tusing __esft_base_t = decltype(__enable_shared_from_this_base(\n+\t      std::declval<const __shared_count<_Lp>&>(),\n+\t      std::declval<_Yp*>()));\n+\n+      // Detect an accessible and unambiguous enable_shared_from_this base.\n+      template<typename _Yp, typename = void>\n+\tstruct __has_esft_base\n+\t: false_type { };\n+\n+      template<typename _Yp>\n+\tstruct __has_esft_base<_Yp, __void_t<__esft_base_t<_Yp>>>\n+\t: true_type { };\n+\n+      template<typename _Yp>\n+\ttypename enable_if<__has_esft_base<_Yp>::value>::type\n+\t_M_enable_shared_from_this_with(const _Yp* __p) noexcept\n+\t{\n+\t  if (auto __base = __enable_shared_from_this_base(_M_refcount, __p))\n+\t    __base->_M_weak_assign(const_cast<_Yp*>(__p), _M_refcount);\n+\t}\n+\n+      template<typename _Yp>\n+\ttypename enable_if<!__has_esft_base<_Yp>::value>::type\n+\t_M_enable_shared_from_this_with(const _Yp*) noexcept\n+\t{ }\n+\n       void*\n       _M_get_deleter(const std::type_info& __ti) const noexcept\n       { return _M_refcount._M_get_deleter(__ti); }\n@@ -1579,26 +1585,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_M_weak_assign(_Tp1* __p, const __shared_count<_Lp>& __n) const noexcept\n \t{ _M_weak_this._M_assign(__p, __n); }\n \n-      template<_Lock_policy _Lp1, typename _Tp1, typename _Tp2>\n-\tfriend void\n-\t__enable_shared_from_this_helper(const __shared_count<_Lp1>&,\n-\t\t\t\t\t const __enable_shared_from_this<_Tp1,\n-\t\t\t\t\t _Lp1>*, const _Tp2*) noexcept;\n+      friend void\n+      __enable_shared_from_this_base(const __shared_count<_Lp>&,\n+\t\t\t\t     const __enable_shared_from_this* __p)\n+      { return __p; }\n \n       mutable __weak_ptr<_Tp, _Lp>  _M_weak_this;\n     };\n \n-  template<_Lock_policy _Lp1, typename _Tp1, typename _Tp2>\n-    inline void\n-    __enable_shared_from_this_helper(const __shared_count<_Lp1>& __pn,\n-\t\t\t\t     const __enable_shared_from_this<_Tp1,\n-\t\t\t\t     _Lp1>* __pe,\n-\t\t\t\t     const _Tp2* __px) noexcept\n-    {\n-      if (__pe != nullptr)\n-\t__pe->_M_weak_assign(const_cast<_Tp2*>(__px), __pn);\n-    }\n-\n   template<typename _Tp, _Lock_policy _Lp, typename _Alloc, typename... _Args>\n     inline __shared_ptr<_Tp, _Lp>\n     __allocate_shared(const _Alloc& __a, _Args&&... __args)"}, {"sha": "e8c533e158cca6ebec488809e82014e23c8a7866", "filename": "libstdc++-v3/include/experimental/bits/shared_ptr.h", "status": "modified", "additions": 52, "deletions": 17, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3070dab7a2ded2c2ee612d6e48ca01b77327379/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fshared_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3070dab7a2ded2c2ee612d6e48ca01b77327379/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fshared_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Fshared_ptr.h?ref=f3070dab7a2ded2c2ee612d6e48ca01b77327379", "patch": "@@ -259,7 +259,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       //\t{\n       //\t  void* __p = _M_refcount._M_get_deleter(typeid(__tag));\n       //\t  _M_ptr = static_cast<_Tp*>(__p);\n-      //\t  __enable_shared_from_this_helper(_M_refcount, _M_ptr, _M_ptr);\n       //\t}\n \n       // __weak_ptr::lock()\n@@ -557,7 +556,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       //\t{\n       //\t  void* __p = _M_refcount._M_get_deleter(typeid(__tag));\n       //\t  _M_ptr = static_cast<_Tp*>(__p);\n-      //\t  __enable_shared_from_this_helper(_M_refcount, _M_ptr, _M_ptr);\n       //\t}\n \n       // __weak_ptr::lock()\n@@ -740,16 +738,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       template<typename _Tp1, typename = _SafeConv<_Tp1>>\n \texplicit\n-\tshared_ptr(_Tp1* __p) : _Base_type(__p) { }\n+\tshared_ptr(_Tp1* __p) : _Base_type(__p)\n+\t{ _M_enable_shared_from_this_with(__p); }\n \n       template<typename _Tp1, typename _Deleter, typename = _SafeConv<_Tp1>>\n \tshared_ptr(_Tp1* __p, _Deleter __d)\n-\t: _Base_type(__p, __d) { }\n+\t: _Base_type(__p, __d)\n+\t{ _M_enable_shared_from_this_with(__p); }\n \n       template<typename _Tp1, typename _Deleter, typename _Alloc,\n \t       typename = _SafeConv<_Tp1>>\n \tshared_ptr(_Tp1* __p, _Deleter __d, _Alloc __a)\n-\t: _Base_type(__p, __d, __a) { }\n+\t: _Base_type(__p, __d, __a)\n+\t{ _M_enable_shared_from_this_with(__p); }\n \n       template<typename _Deleter>\n \tshared_ptr(nullptr_t __p, _Deleter __d)\n@@ -785,13 +786,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #if _GLIBCXX_USE_DEPRECATED\n       template<typename _Tp1, typename = _Compatible<_Tp1>>\n \tshared_ptr(std::auto_ptr<_Tp1>&& __r)\n-\t: _Base_type(std::move(__r)) { }\n+\t: _Base_type(std::move(__r))\n+\t{ _M_enable_shared_from_this_with(static_cast<_Tp1*>(this->get())); }\n #endif\n \n       template<typename _Tp1, typename _Del,\n \t       typename = _UniqCompatible<_Tp1, _Del>>\n \tshared_ptr(unique_ptr<_Tp1, _Del>&& __r)\n-\t: _Base_type(std::move(__r)) { }\n+\t: _Base_type(std::move(__r))\n+\t{\n+\t  // XXX assume conversion from __r.get() to this->get() to __elem_t*\n+\t  // is a round trip, which might not be true in all cases.\n+\t  using __elem_t = typename unique_ptr<_Tp1, _Del>::element_type;\n+\t  _M_enable_shared_from_this_with(static_cast<__elem_t*>(this->get()));\n+\t}\n \n       constexpr shared_ptr(nullptr_t __p)\n       : _Base_type(__p) { }\n@@ -853,7 +861,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tshared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,\n \t\t   _Args&&... __args)\n \t: _Base_type(__tag, __a, std::forward<_Args>(__args)...)\n-\t{ }\n+\t{ _M_enable_shared_from_this_with(this->get()); }\n \n       template<typename _Tp1, typename _Alloc, typename... _Args>\n \tfriend shared_ptr<_Tp1>\n@@ -863,6 +871,35 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       : _Base_type(__r, std::nothrow) { }\n \n       friend class weak_ptr<_Tp>;\n+\n+      template<typename _Yp>\n+\tusing __esft_base_t =\n+\t  decltype(__expt_enable_shared_from_this_base(std::declval<_Yp*>()));\n+\n+      // Detect an accessible and unambiguous enable_shared_from_this base.\n+      template<typename _Yp, typename = void>\n+\tstruct __has_esft_base\n+\t: false_type { };\n+\n+      template<typename _Yp>\n+\tstruct __has_esft_base<_Yp, __void_t<__esft_base_t<_Yp>>>\n+\t: __bool_constant<!is_array_v<_Tp>> { };  // ignore base for arrays\n+\n+      template<typename _Yp>\n+\ttypename enable_if<__has_esft_base<_Yp>::value>::type\n+\t_M_enable_shared_from_this_with(const _Yp* __p) noexcept\n+\t{\n+\t  if (auto __base = __expt_enable_shared_from_this_base(__p))\n+\t    {\n+\t      __base->_M_weak_this\n+\t\t= shared_ptr<_Yp>(*this, const_cast<_Yp*>(__p));\n+\t    }\n+\t}\n+\n+      template<typename _Yp>\n+\ttypename enable_if<!__has_esft_base<_Yp>::value>::type\n+\t_M_enable_shared_from_this_with(const _Yp*) noexcept\n+\t{ }\n     };\n \n   // C++14 \u00a720.8.2.2.7 //DOING\n@@ -1258,15 +1295,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_M_weak_assign(_Tp1* __p, const __shared_count<>& __n) const noexcept\n \t{ _M_weak_this._M_assign(__p, __n); }\n \n-      template<typename _Tp1>\n-\tfriend void\n-\t__enable_shared_from_this_helper(const __shared_count<>& __pn,\n-\t\t\t\t\t const enable_shared_from_this* __pe,\n-\t\t\t\t\t const _Tp1* __px) noexcept\n-\t{\n-\t  if(__pe != 0)\n-\t    __pe->_M_weak_assign(const_cast<_Tp1*>(__px), __pn);\n-\t}\n+      // Found by ADL when this is an associated class.\n+      friend const enable_shared_from_this*\n+      __expt_enable_shared_from_this_base(const enable_shared_from_this* __p)\n+      { return __p; }\n+\n+      template<typename>\n+\tfriend class shared_ptr;\n \n       mutable weak_ptr<_Tp> _M_weak_this;\n     };"}, {"sha": "5374f7545582bcf64faaefd67af59b3e11c684cc", "filename": "libstdc++-v3/testsuite/experimental/memory/shared_ptr/cons/enable_shared_from_this.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3070dab7a2ded2c2ee612d6e48ca01b77327379/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory%2Fshared_ptr%2Fcons%2Fenable_shared_from_this.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3070dab7a2ded2c2ee612d6e48ca01b77327379/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory%2Fshared_ptr%2Fcons%2Fenable_shared_from_this.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory%2Fshared_ptr%2Fcons%2Fenable_shared_from_this.cc?ref=f3070dab7a2ded2c2ee612d6e48ca01b77327379", "patch": "@@ -0,0 +1,47 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++14 } }\n+\n+#include <experimental/memory>\n+#include <testsuite_hooks.h>\n+\n+struct A : std::enable_shared_from_this<A> { };\n+struct B : std::experimental::enable_shared_from_this<B> { };\n+struct C : A, B { };\n+\n+void\n+test01()\n+{\n+  // This should not fail to compile due to ambiguous base classes:\n+  std::experimental::shared_ptr<C> p(new C);\n+\n+  // And both base classes should have been enabled:\n+  std::shared_ptr<A> pa = p->A::shared_from_this();\n+  VERIFY( pa != nullptr );\n+  // Can't compare pa and p because they're different types\n+\n+  std::experimental::shared_ptr<B> pb = p->B::shared_from_this();\n+  VERIFY( pb != nullptr );\n+  VERIFY( pb == p );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "eb241765589f0582911f1f9e00975f582c1524c4", "filename": "libstdc++-v3/testsuite/experimental/memory/shared_ptr/cons/unique_ptr_ctor.cc", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3070dab7a2ded2c2ee612d6e48ca01b77327379/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory%2Fshared_ptr%2Fcons%2Funique_ptr_ctor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3070dab7a2ded2c2ee612d6e48ca01b77327379/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory%2Fshared_ptr%2Fcons%2Funique_ptr_ctor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory%2Fshared_ptr%2Fcons%2Funique_ptr_ctor.cc?ref=f3070dab7a2ded2c2ee612d6e48ca01b77327379", "patch": "@@ -83,7 +83,16 @@ test02()\n   VERIFY( sp.get() != 0 );\n   VERIFY( sp.use_count() == 1 );\n \n-  VERIFY( sp[0].shared_from_this() != nullptr );\n+  bool caught = false;\n+  try\n+  {\n+    sp[0].shared_from_this(); // should not be set for arrays\n+  }\n+  catch (const std::bad_weak_ptr&)\n+  {\n+    caught = true;\n+  }\n+  VERIFY( caught );\n \n   sp.reset();\n   VERIFY( destroyed == 5 );"}]}