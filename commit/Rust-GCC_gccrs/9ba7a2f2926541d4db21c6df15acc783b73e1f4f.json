{"sha": "9ba7a2f2926541d4db21c6df15acc783b73e1f4f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWJhN2EyZjI5MjY1NDFkNGRiMjFjNmRmMTVhY2M3ODNiNzNlMWY0Zg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2006-12-08T06:27:22Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2006-12-08T06:27:22Z"}, "message": "re PR c++/29732 (ICE on invalid friend declaration)\n\n\tPR c++/29732\n\t* cp-tree.h (DECL_USE_TEMPLATE): Mention partial specializations.\n\t(explicit_class_specialization_p): Declare.\n\t* pt.c (explicit_class_specialization_p): New function.\n\t* parser.c (cp_parser_init_declarator): Check correct number of\n\ttemplate parameters for in-class function definitions.\n\t(cp_parser_check_declrator_template_parameters): Stop looking for\n\ttemplate classes when we find an explicit specialization.\n\tPR c++/29732\n\t* g++.dg/template/crash65.C: New test.\n\t* g++.dg/template/spec16.C: Tweak error markers.\n\nFrom-SVN: r119649", "tree": {"sha": "7ba5569ae3e14325934f7a9e8cdf809c494d4870", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ba5569ae3e14325934f7a9e8cdf809c494d4870"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ba7a2f2926541d4db21c6df15acc783b73e1f4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ba7a2f2926541d4db21c6df15acc783b73e1f4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ba7a2f2926541d4db21c6df15acc783b73e1f4f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ba7a2f2926541d4db21c6df15acc783b73e1f4f/comments", "author": null, "committer": null, "parents": [{"sha": "cf71109bd6749b28e07670d2cf8eb7d3c216f531", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf71109bd6749b28e07670d2cf8eb7d3c216f531", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf71109bd6749b28e07670d2cf8eb7d3c216f531"}], "stats": {"total": 68, "additions": 57, "deletions": 11}, "files": [{"sha": "1a8d126bcf2e28fc5d5270948ab567b1fb18b168", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ba7a2f2926541d4db21c6df15acc783b73e1f4f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ba7a2f2926541d4db21c6df15acc783b73e1f4f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9ba7a2f2926541d4db21c6df15acc783b73e1f4f", "patch": "@@ -1,3 +1,14 @@\n+2006-12-07  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/29732\n+\t* cp-tree.h (DECL_USE_TEMPLATE): Mention partial specializations.\n+\t(explicit_class_specialization_p): Declare.\n+\t* pt.c (explicit_class_specialization_p): New function.\n+\t* parser.c (cp_parser_init_declarator): Check correct number of\n+\ttemplate parameters for in-class function definitions.\n+\t(cp_parser_check_declrator_template_parameters): Stop looking for\n+\ttemplate classes when we find an explicit specialization.\n+\n 2006-12-07  Lee Millward  <lee.millward@codesourcery.com>\n \n         PR c++/29980"}, {"sha": "e59586bde77da4d7e4c28ad8cf13f10d7fb661e6", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ba7a2f2926541d4db21c6df15acc783b73e1f4f/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ba7a2f2926541d4db21c6df15acc783b73e1f4f/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=9ba7a2f2926541d4db21c6df15acc783b73e1f4f", "patch": "@@ -2879,8 +2879,14 @@ extern void decl_shadowed_for_var_insert (tree, tree);\n    indicates the type of specializations:\n \n      1=implicit instantiation\n-     2=explicit specialization, e.g. int min<int> (int, int);\n-     3=explicit instantiation, e.g. template int min<int> (int, int);\n+\n+     2=partial or explicit specialization, e.g.:\n+\n+        template <> int min<int> (int, int),\n+\n+     3=explicit instantiation, e.g.:\n+  \n+        template int min<int> (int, int);\n \n    Note that NODE will be marked as a specialization even if the\n    template it is instantiating is not a primary template.  For\n@@ -4168,6 +4174,7 @@ extern tree build_non_dependent_expr\t\t(tree);\n extern tree build_non_dependent_args\t\t(tree);\n extern bool reregister_specialization\t\t(tree, tree, tree);\n extern tree fold_non_dependent_expr\t\t(tree);\n+extern bool explicit_class_specialization_p     (tree);\n \n /* in repo.c */\n extern void init_repo\t\t\t\t(void);"}, {"sha": "d7611ed71ff14b76067d374bc9f25ca64c93751a", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ba7a2f2926541d4db21c6df15acc783b73e1f4f/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ba7a2f2926541d4db21c6df15acc783b73e1f4f/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=9ba7a2f2926541d4db21c6df15acc783b73e1f4f", "patch": "@@ -11144,6 +11144,10 @@ cp_parser_init_declarator (cp_parser* parser,\n   if (declarator == cp_error_declarator)\n     return error_mark_node;\n \n+  /* Check that the number of template-parameter-lists is OK.  */\n+  if (!cp_parser_check_declarator_template_parameters (parser, declarator))\n+    return error_mark_node;\n+\n   if (declares_class_or_enum & 2)\n     cp_parser_check_for_definition_in_return_type (declarator,\n \t\t\t\t\t\t   decl_specifiers->type);\n@@ -11263,10 +11267,6 @@ cp_parser_init_declarator (cp_parser* parser,\n   /* Check to see whether or not this declaration is a friend.  */\n   friend_p = cp_parser_friend_p (decl_specifiers);\n \n-  /* Check that the number of template-parameter-lists is OK.  */\n-  if (!cp_parser_check_declarator_template_parameters (parser, declarator))\n-    return error_mark_node;\n-\n   /* Enter the newly declared entry in the symbol table.  If we're\n      processing a declaration in a class-specifier, we wait until\n      after processing the initializer.  */\n@@ -15312,10 +15312,14 @@ cp_parser_check_declarator_template_parameters (cp_parser* parser,\n \n \t\t is correct; there shouldn't be a `template <>' for\n \t\t the definition of `S<int>::f'.  */\n-\t      if (CLASSTYPE_TEMPLATE_INFO (scope)\n-\t\t  && (CLASSTYPE_TEMPLATE_INSTANTIATION (scope)\n-\t\t      || uses_template_parms (CLASSTYPE_TI_ARGS (scope)))\n-\t\t  && PRIMARY_TEMPLATE_P (CLASSTYPE_TI_TEMPLATE (scope)))\n+\t      if (!CLASSTYPE_TEMPLATE_INFO (scope))\n+\t\t/* If SCOPE does not have template information of any\n+\t\t   kind, then it is not a template, nor is it nested\n+\t\t   within a template.  */\n+\t\tbreak;\n+\t      if (explicit_class_specialization_p (scope))\n+\t\tbreak;\n+\t      if (PRIMARY_TEMPLATE_P (CLASSTYPE_TI_TEMPLATE (scope)))\n \t\t++num_templates;\n \n \t      scope = TYPE_CONTEXT (scope);"}, {"sha": "2cfcce501d9f4383479f919307485c87e3107877", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ba7a2f2926541d4db21c6df15acc783b73e1f4f/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ba7a2f2926541d4db21c6df15acc783b73e1f4f/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=9ba7a2f2926541d4db21c6df15acc783b73e1f4f", "patch": "@@ -1316,6 +1316,17 @@ register_local_specialization (tree spec, tree tmpl)\n   *slot = build_tree_list (spec, tmpl);\n }\n \n+/* TYPE is a class type.  Returns true if TYPE is an explicitly\n+   specialized class.  */\n+\n+bool\n+explicit_class_specialization_p (tree type)\n+{\n+  if (!CLASSTYPE_TEMPLATE_SPECIALIZATION (type))\n+    return false;\n+  return !uses_template_parms (CLASSTYPE_TI_ARGS (type));\n+}\n+\n /* Print the list of candidate FNS in an error message.  */\n \n void"}, {"sha": "d1e707cc09422464522e135ae25637c0d99f0306", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ba7a2f2926541d4db21c6df15acc783b73e1f4f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ba7a2f2926541d4db21c6df15acc783b73e1f4f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9ba7a2f2926541d4db21c6df15acc783b73e1f4f", "patch": "@@ -1,3 +1,9 @@\n+2006-12-07  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/29732\n+\t* g++.dg/template/crash65.C: New test.\n+\t* g++.dg/template/spec16.C: Tweak error markers.\n+\n 2006-12-07  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n \t* gcc.target/spu: New directory."}, {"sha": "4d49ecf3145ab0ed540a8465b57b529c3132d5d9", "filename": "gcc/testsuite/g++.dg/template/crash65.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ba7a2f2926541d4db21c6df15acc783b73e1f4f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash65.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ba7a2f2926541d4db21c6df15acc783b73e1f4f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash65.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash65.C?ref=9ba7a2f2926541d4db21c6df15acc783b73e1f4f", "patch": "@@ -0,0 +1,7 @@\n+// PR c++/29732\n+\n+struct A\n+{\n+  template<int> template<typename T> friend void foo(T) {} // { dg-error \"parameter\" }\n+  void bar() { foo(0); } // { dg-error \"foo\" }\n+};"}, {"sha": "881d7a091c299d2a92390a2ca0a646259f67b0fd", "filename": "gcc/testsuite/g++.dg/template/spec16.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ba7a2f2926541d4db21c6df15acc783b73e1f4f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fspec16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ba7a2f2926541d4db21c6df15acc783b73e1f4f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fspec16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fspec16.C?ref=9ba7a2f2926541d4db21c6df15acc783b73e1f4f", "patch": "@@ -7,5 +7,5 @@ struct A {\n   template<int M> void B () ; \n }; \n \n-void A<0>::B<0>() {    // { dg-error \"explicit specialization\" }\n+void A<0>::B<0>() {    // { dg-error \"parameter-lists\" }\n } "}]}