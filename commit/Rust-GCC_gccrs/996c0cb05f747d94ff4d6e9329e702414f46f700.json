{"sha": "996c0cb05f747d94ff4d6e9329e702414f46f700", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTk2YzBjYjA1Zjc0N2Q5NGZmNGQ2ZTkzMjllNzAyNDE0ZjQ2ZjcwMA==", "commit": {"author": {"name": "Ralf Wildenhues", "email": "Ralf.Wildenhues@gmx.de", "date": "2011-02-03T07:23:20Z"}, "committer": {"name": "Ralf Wildenhues", "email": "rwild@gcc.gnu.org", "date": "2011-02-03T07:23:20Z"}, "message": "libiberty: documentation markup and order fixes.\n\nlibiberty/:\n\t* splay-tree.c: Escape wrapping newlines in texinfo markup\n\twith '@', to fix function declaration output rendering.\n\t* gather-docs: Relax and improve macro name matching to actually\n\tmatch all current names and to allow input line wrapping.\n\t* bsearch.c, concat.c, crc32.c, fnmatch.txh, fopen_unlocked.c,\n\thashtab.c, insque.c, make-relative-prefix.c, memchr.c, memcmp.c,\n\tmemcpy.c, memmem.c, memmove.c, mempcpy.c, memset.c,\n\tpexecute.txh, random.c, setenv.c, setproctitle.c,\n\tsimple-object.txh, snprintf.c, stpncpy.c, strncmp.c, strtod.c,\n\tstrtol.c, vasprintf.c, vprintf.c, vsnprintf.c, xmemdup.c:\n\tWrap long texinfo input lines.\n\t* functions.texi: Regenerate.\n\nFrom-SVN: r169783", "tree": {"sha": "cb675ca8bd5c5dc12e40565b61f7740d41e13811", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb675ca8bd5c5dc12e40565b61f7740d41e13811"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/996c0cb05f747d94ff4d6e9329e702414f46f700", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/996c0cb05f747d94ff4d6e9329e702414f46f700", "html_url": "https://github.com/Rust-GCC/gccrs/commit/996c0cb05f747d94ff4d6e9329e702414f46f700", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/996c0cb05f747d94ff4d6e9329e702414f46f700/comments", "author": null, "committer": null, "parents": [{"sha": "4deef538ecda16acd4c0ae3d3ed71c591603ce73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4deef538ecda16acd4c0ae3d3ed71c591603ce73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4deef538ecda16acd4c0ae3d3ed71c591603ce73"}], "stats": {"total": 574, "additions": 366, "deletions": 208}, "files": [{"sha": "da4b2be6b9d6e3b795ed27f86f26481a0375c201", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996c0cb05f747d94ff4d6e9329e702414f46f700/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996c0cb05f747d94ff4d6e9329e702414f46f700/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=996c0cb05f747d94ff4d6e9329e702414f46f700", "patch": "@@ -1,3 +1,18 @@\n+2011-02-03  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n+\n+\t* splay-tree.c: Escape wrapping newlines in texinfo markup\n+\twith '@', to fix function declaration output rendering.\n+\t* gather-docs: Relax and improve macro name matching to actually\n+\tmatch all current names and to allow input line wrapping.\n+\t* bsearch.c, concat.c, crc32.c, fnmatch.txh, fopen_unlocked.c,\n+\thashtab.c, insque.c, make-relative-prefix.c, memchr.c, memcmp.c,\n+\tmemcpy.c, memmem.c, memmove.c, mempcpy.c, memset.c,\n+\tpexecute.txh, random.c, setenv.c, setproctitle.c,\n+\tsimple-object.txh, snprintf.c, stpncpy.c, strncmp.c, strtod.c,\n+\tstrtol.c, vasprintf.c, vprintf.c, vsnprintf.c, xmemdup.c:\n+\tWrap long texinfo input lines.\n+\t* functions.texi: Regenerate.\n+\n 2011-01-18  Mike Frysinger  <vapier@gentoo.org>\n \n \t* .gitignore: New file."}, {"sha": "35fad19977c281306c827f1f9f65053a914a58c8", "filename": "libiberty/bsearch.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996c0cb05f747d94ff4d6e9329e702414f46f700/libiberty%2Fbsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996c0cb05f747d94ff4d6e9329e702414f46f700/libiberty%2Fbsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fbsearch.c?ref=996c0cb05f747d94ff4d6e9329e702414f46f700", "patch": "@@ -30,7 +30,9 @@\n \n /*\n \n-@deftypefn Supplemental void* bsearch (const void *@var{key}, const void *@var{base}, size_t @var{nmemb}, size_t @var{size}, int (*@var{compar})(const void *, const void *))\n+@deftypefn Supplemental void* bsearch (const void *@var{key}, @\n+  const void *@var{base}, size_t @var{nmemb}, size_t @var{size}, @\n+  int (*@var{compar})(const void *, const void *))\n \n Performs a search over an array of @var{nmemb} elements pointed to by\n @var{base} for a member that matches the object pointed to by @var{key}."}, {"sha": "9779d5663b66c0798acae2fd956e08a143032d4b", "filename": "libiberty/concat.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996c0cb05f747d94ff4d6e9329e702414f46f700/libiberty%2Fconcat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996c0cb05f747d94ff4d6e9329e702414f46f700/libiberty%2Fconcat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconcat.c?ref=996c0cb05f747d94ff4d6e9329e702414f46f700", "patch": "@@ -1,5 +1,5 @@\n /* Concatenate variable number of strings.\n-   Copyright (C) 1991, 1994, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1991, 1994, 2001, 2011 Free Software Foundation, Inc.\n    Written by Fred Fish @ Cygnus Support\n \n This file is part of the libiberty library.\n@@ -21,7 +21,8 @@ Boston, MA 02110-1301, USA.  */\n \n /*\n \n-@deftypefn Extension char* concat (const char *@var{s1}, const char *@var{s2}, @dots{}, @code{NULL})\n+@deftypefn Extension char* concat (const char *@var{s1}, const char *@var{s2}, @\n+  @dots{}, @code{NULL})\n \n Concatenate zero or more of strings and return the result in freshly\n @code{xmalloc}ed memory.  Returns @code{NULL} if insufficient memory is\n@@ -170,7 +171,8 @@ concat (const char *first, ...)\n \n /*\n \n-@deftypefn Extension char* reconcat (char *@var{optr}, const char *@var{s1}, @dots{}, @code{NULL})\n+@deftypefn Extension char* reconcat (char *@var{optr}, const char *@var{s1}, @\n+  @dots{}, @code{NULL})\n \n Same as @code{concat}, except that if @var{optr} is not @code{NULL} it\n is freed after the string is created.  This is intended to be useful"}, {"sha": "12d9be07cfd65d479aa01e92e2fc6dd8c29509b4", "filename": "libiberty/crc32.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996c0cb05f747d94ff4d6e9329e702414f46f700/libiberty%2Fcrc32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996c0cb05f747d94ff4d6e9329e702414f46f700/libiberty%2Fcrc32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcrc32.c?ref=996c0cb05f747d94ff4d6e9329e702414f46f700", "patch": "@@ -1,5 +1,5 @@\n /* crc32.c\n-   Copyright (C) 2009 Free Software Foundation, Inc.\n+   Copyright (C) 2009, 2011 Free Software Foundation, Inc.\n \n    This file is part of the libiberty library.\n \n@@ -138,7 +138,8 @@ static const unsigned int crc32_table[] =\n \n /*\n \n-@deftypefn Extension unsigned int crc32 (const unsigned char *@var{buf}, int @var{len}, unsigned int @var{init})\n+@deftypefn Extension {unsigned int} crc32 (const unsigned char *@var{buf}, @\n+  int @var{len}, unsigned int @var{init})\n \n Compute the 32-bit CRC of @var{buf} which has length @var{len}.  The\n starting value is @var{init}; this may be used to compute the CRC of"}, {"sha": "b5a93734bf2a6e29257c674338a62b244dd3e313", "filename": "libiberty/fnmatch.txh", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996c0cb05f747d94ff4d6e9329e702414f46f700/libiberty%2Ffnmatch.txh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996c0cb05f747d94ff4d6e9329e702414f46f700/libiberty%2Ffnmatch.txh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ffnmatch.txh?ref=996c0cb05f747d94ff4d6e9329e702414f46f700", "patch": "@@ -1,4 +1,5 @@\n-@deftypefn Replacement int fnmatch (const char *@var{pattern}, const char *@var{string}, int @var{flags})\n+@deftypefn Replacement int fnmatch (const char *@var{pattern}, @\n+  const char *@var{string}, int @var{flags})\n \n Matches @var{string} against @var{pattern}, returning zero if it\n matches, @code{FNM_NOMATCH} if not.  @var{pattern} may contain the"}, {"sha": "d1f78c46244163829255f71d12df8553930bc2f3", "filename": "libiberty/fopen_unlocked.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996c0cb05f747d94ff4d6e9329e702414f46f700/libiberty%2Ffopen_unlocked.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996c0cb05f747d94ff4d6e9329e702414f46f700/libiberty%2Ffopen_unlocked.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ffopen_unlocked.c?ref=996c0cb05f747d94ff4d6e9329e702414f46f700", "patch": "@@ -1,5 +1,5 @@\n /* Implement fopen_unlocked and related functions.\n-   Copyright (C) 2005 Free Software Foundation, Inc.\n+   Copyright (C) 2005, 2011 Free Software Foundation, Inc.\n    Written by Kaveh R. Ghazi <ghazi@caip.rutgers.edu>.\n \n This file is part of the libiberty library.\n@@ -36,7 +36,8 @@ multi-threaded locking.  Otherwise do nothing.\n \n @end deftypefn\n \n-@deftypefn Extension {FILE *} fopen_unlocked (const char *@var{path}, const char * @var{mode})\n+@deftypefn Extension {FILE *} fopen_unlocked (const char *@var{path}, @\n+  const char * @var{mode})\n \n Opens and returns a @code{FILE} pointer via @code{fopen}.  If the\n operating system supports it, ensure that the stream is setup to avoid\n@@ -45,7 +46,8 @@ unchanged.\n \n @end deftypefn\n \n-@deftypefn Extension {FILE *} fdopen_unlocked (int @var{fildes}, const char * @var{mode})\n+@deftypefn Extension {FILE *} fdopen_unlocked (int @var{fildes}, @\n+  const char * @var{mode})\n \n Opens and returns a @code{FILE} pointer via @code{fdopen}.  If the\n operating system supports it, ensure that the stream is setup to avoid\n@@ -54,7 +56,8 @@ unchanged.\n \n @end deftypefn\n \n-@deftypefn Extension {FILE *} freopen_unlocked (const char * @var{path}, const char * @var{mode}, FILE * @var{stream})\n+@deftypefn Extension {FILE *} freopen_unlocked (const char * @var{path}, @\n+  const char * @var{mode}, FILE * @var{stream})\n \n Opens and returns a @code{FILE} pointer via @code{freopen}.  If the\n operating system supports it, ensure that the stream is setup to avoid"}, {"sha": "f6d0a23f1e642309d1404f5080e3b29825b3bc6c", "filename": "libiberty/functions.texi", "status": "modified", "additions": 200, "deletions": 128, "changes": 328, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996c0cb05f747d94ff4d6e9329e702414f46f700/libiberty%2Ffunctions.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996c0cb05f747d94ff4d6e9329e702414f46f700/libiberty%2Ffunctions.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ffunctions.texi?ref=996c0cb05f747d94ff4d6e9329e702414f46f700", "patch": "@@ -3,47 +3,6 @@\n @c Edit the *.c files, configure with --enable-maintainer-mode,\n @c run 'make stamp-functions' and gather-docs will build a new copy.\n \n-@c splay-tree.c:277\n-@defvr Extension HOST_CHARSET\n-This macro indicates the basic character set and encoding used by the\n-host: more precisely, the encoding used for character constants in\n-preprocessor @samp{#if} statements (the C \"execution character set\").\n-It is defined by @file{safe-ctype.h}, and will be an integer constant\n-with one of the following values:\n-\n-@ftable @code\n-@item HOST_CHARSET_UNKNOWN\n-The host character set is unknown - that is, not one of the next two\n-possibilities.\n-\n-@item HOST_CHARSET_ASCII\n-The host character set is ASCII.\n-\n-@item HOST_CHARSET_EBCDIC\n-The host character set is some variant of EBCDIC.  (Only one of the\n-nineteen EBCDIC varying characters is tested; exercise caution.)\n-@end ftable\n-@end defvr\n-@deftypefn Supplemental splay_tree splay_tree_new_with_typed_alloc\n-(splay_tree_compare_fn @var{compare_fn},\n-splay_tree_delete_key_fn @var{delete_key_fn},\n-splay_tree_delete_value_fn @var{delete_value_fn},\n-splay_tree_allocate_fn @var{tree_allocate_fn},\n-splay_tree_allocate_fn @var{node_allocate_fn},\n-splay_tree_deallocate_fn @var{deallocate_fn},\n-void * @var{allocate_data})\n-\n-This function creates a splay tree that uses two different allocators\n-@var{tree_allocate_fn} and @var{node_allocate_fn} to use for allocating the\n-tree itself and its nodes respectively.  This is useful when variables of\n-different types need to be allocated with different allocators.\n-\n-The splay tree will use @var{compare_fn} to compare nodes,\n-@var{delete_key_fn} to deallocate keys, and @var{delete_value_fn} to\n-deallocate values.\n-\n-@end deftypefn\n-\n @c alloca.c:26\n @deftypefn Replacement void* alloca (size_t @var{size})\n \n@@ -110,7 +69,9 @@ Copies @var{length} bytes from memory region @var{in} to region\n @end deftypefn\n \n @c bsearch.c:33\n-@deftypefn Supplemental void* bsearch (const void *@var{key}, const void *@var{base}, size_t @var{nmemb}, size_t @var{size}, int (*@var{compar})(const void *, const void *))\n+@deftypefn Supplemental void* bsearch (const void *@var{key}, @\n+  const void *@var{base}, size_t @var{nmemb}, size_t @var{size}, @\n+  int (*@var{compar})(const void *, const void *))\n \n Performs a search over an array of @var{nmemb} elements pointed to by\n @var{base} for a member that matches the object pointed to by @var{key}.\n@@ -177,7 +138,7 @@ not recommended.\n \n @end deftypefn\n \n-@c make-temp-file.c:95\n+@c make-temp-file.c:96\n @deftypefn Replacement char* choose_tmpdir ()\n \n Returns a pointer to a directory path suitable for creating temporary\n@@ -195,7 +156,8 @@ number of seconds used.\n @end deftypefn\n \n @c concat.c:24\n-@deftypefn Extension char* concat (const char *@var{s1}, const char *@var{s2}, @dots{}, @code{NULL})\n+@deftypefn Extension char* concat (const char *@var{s1}, const char *@var{s2}, @\n+  @dots{}, @code{NULL})\n \n Concatenate zero or more of strings and return the result in freshly\n @code{xmalloc}ed memory.  Returns @code{NULL} if insufficient memory is\n@@ -205,7 +167,8 @@ pointer encountered.  Pointers to empty strings are ignored.\n @end deftypefn\n \n @c crc32.c:141\n-@deftypefn Extension unsigned int crc32 (const unsigned char *@var{buf}, int @var{len}, unsigned int @var{init})\n+@deftypefn Extension {unsigned int} crc32 (const unsigned char *@var{buf}, @\n+  int @var{len}, unsigned int @var{init})\n \n Compute the 32-bit CRC of @var{buf} which has length @var{len}.  The\n starting value is @var{init}; this may be used to compute the CRC of\n@@ -296,8 +259,9 @@ and inode numbers.\n \n @end deftypefn\n \n-@c fopen_unlocked.c:48\n-@deftypefn Extension {FILE *} fdopen_unlocked (int @var{fildes}, const char * @var{mode})\n+@c fopen_unlocked.c:49\n+@deftypefn Extension {FILE *} fdopen_unlocked (int @var{fildes}, @\n+  const char * @var{mode})\n \n Opens and returns a @code{FILE} pointer via @code{fdopen}.  If the\n operating system supports it, ensure that the stream is setup to avoid\n@@ -333,7 +297,8 @@ and backward slashes are equal.\n @end deftypefn\n \n @c fnmatch.txh:1\n-@deftypefn Replacement int fnmatch (const char *@var{pattern}, const char *@var{string}, int @var{flags})\n+@deftypefn Replacement int fnmatch (const char *@var{pattern}, @\n+  const char *@var{string}, int @var{flags})\n \n Matches @var{string} against @var{pattern}, returning zero if it\n matches, @code{FNM_NOMATCH} if not.  @var{pattern} may contain the\n@@ -383,7 +348,8 @@ Ignores case when performing the comparison.\n @end deftypefn\n \n @c fopen_unlocked.c:39\n-@deftypefn Extension {FILE *} fopen_unlocked (const char *@var{path}, const char * @var{mode})\n+@deftypefn Extension {FILE *} fopen_unlocked (const char *@var{path}, @\n+  const char * @var{mode})\n \n Opens and returns a @code{FILE} pointer via @code{fopen}.  If the\n operating system supports it, ensure that the stream is setup to avoid\n@@ -402,8 +368,9 @@ itself.\n \n @end deftypefn\n \n-@c fopen_unlocked.c:57\n-@deftypefn Extension {FILE *} freopen_unlocked (const char * @var{path}, const char * @var{mode}, FILE * @var{stream})\n+@c fopen_unlocked.c:59\n+@deftypefn Extension {FILE *} freopen_unlocked (const char * @var{path}, @\n+  const char * @var{mode}, FILE * @var{stream})\n \n Opens and returns a @code{FILE} pointer via @code{freopen}.  If the\n operating system supports it, ensure that the stream is setup to avoid\n@@ -496,10 +463,32 @@ systems.\n \n @end deftypefn\n \n+@c safe-ctype.c:25\n+@defvr Extension HOST_CHARSET\n+This macro indicates the basic character set and encoding used by the\n+host: more precisely, the encoding used for character constants in\n+preprocessor @samp{#if} statements (the C \"execution character set\").\n+It is defined by @file{safe-ctype.h}, and will be an integer constant\n+with one of the following values:\n+\n+@ftable @code\n+@item HOST_CHARSET_UNKNOWN\n+The host character set is unknown - that is, not one of the next two\n+possibilities.\n+\n+@item HOST_CHARSET_ASCII\n+The host character set is ASCII.\n+\n+@item HOST_CHARSET_EBCDIC\n+The host character set is some variant of EBCDIC.  (Only one of the\n+nineteen EBCDIC varying characters is tested; exercise caution.)\n+@end ftable\n+@end defvr\n+\n @c hashtab.c:336\n-@deftypefn Supplemental htab_t htab_create_typed_alloc (size_t @var{size},\n-htab_hash @var{hash_f}, htab_eq @var{eq_f}, htab_del @var{del_f},\n-htab_alloc @var{alloc_tab_f}, htab_alloc @var{alloc_f},\n+@deftypefn Supplemental htab_t htab_create_typed_alloc (size_t @var{size}, @\n+htab_hash @var{hash_f}, htab_eq @var{eq_f}, htab_del @var{del_f}, @\n+htab_alloc @var{alloc_tab_f}, htab_alloc @var{alloc_f}, @\n htab_free @var{free_f})\n \n This function creates a hash table that uses two different allocators\n@@ -524,7 +513,8 @@ deprecated in new programs in favor of @code{strchr}.\n @end deftypefn\n \n @c insque.c:6\n-@deftypefn Supplemental void insque (struct qelem *@var{elem}, struct qelem *@var{pred})\n+@deftypefn Supplemental void insque (struct qelem *@var{elem}, @\n+  struct qelem *@var{pred})\n @deftypefnx Supplemental void remque (struct qelem *@var{elem})\n \n Routines to manipulate queues built from doubly linked lists.  The\n@@ -643,7 +633,8 @@ components will be simplified.  The returned value will be allocated using\n @end deftypefn\n \n @c make-relative-prefix.c:24\n-@deftypefn Extension {const char*} make_relative_prefix (const char *@var{progname}, const char *@var{bin_prefix}, const char *@var{prefix})\n+@deftypefn Extension {const char*} make_relative_prefix (const char *@var{progname}, @\n+  const char *@var{bin_prefix}, const char *@var{prefix})\n \n Given three paths @var{progname}, @var{bin_prefix}, @var{prefix},\n return the path that is in the same position relative to\n@@ -667,7 +658,7 @@ relative prefix can be found, return @code{NULL}.\n \n @end deftypefn\n \n-@c make-temp-file.c:173\n+@c make-temp-file.c:174\n @deftypefn Replacement char* make_temp_file (const char *@var{suffix})\n \n Return a temporary file name (as a string) or @code{NULL} if unable to\n@@ -677,7 +668,8 @@ string is @code{malloc}ed, and the temporary file has been created.\n @end deftypefn\n \n @c memchr.c:3\n-@deftypefn Supplemental void* memchr (const void *@var{s}, int @var{c}, size_t @var{n})\n+@deftypefn Supplemental void* memchr (const void *@var{s}, int @var{c}, @\n+  size_t @var{n})\n \n This function searches memory starting at @code{*@var{s}} for the\n character @var{c}.  The search only ends with the first occurrence of\n@@ -690,7 +682,8 @@ returned.\n @end deftypefn\n \n @c memcmp.c:6\n-@deftypefn Supplemental int memcmp (const void *@var{x}, const void *@var{y}, size_t @var{count})\n+@deftypefn Supplemental int memcmp (const void *@var{x}, const void *@var{y}, @\n+  size_t @var{count})\n \n Compares the first @var{count} bytes of two areas of memory.  Returns\n zero if they are the same, a value less than zero if @var{x} is\n@@ -701,15 +694,17 @@ as if comparing unsigned char arrays.\n @end deftypefn\n \n @c memcpy.c:6\n-@deftypefn Supplemental void* memcpy (void *@var{out}, const void *@var{in}, size_t @var{length})\n+@deftypefn Supplemental void* memcpy (void *@var{out}, const void *@var{in}, @\n+  size_t @var{length})\n \n Copies @var{length} bytes from memory region @var{in} to region\n @var{out}.  Returns a pointer to @var{out}.\n \n @end deftypefn\n \n @c memmem.c:20\n-@deftypefn Supplemental void* memmem (const void *@var{haystack}, size_t @var{haystack_len} const void *@var{needle}, size_t @var{needle_len})\n+@deftypefn Supplemental void* memmem (const void *@var{haystack}, @\n+  size_t @var{haystack_len} const void *@var{needle}, size_t @var{needle_len})\n \n Returns a pointer to the first occurrence of @var{needle} (length\n @var{needle_len}) in @var{haystack} (length @var{haystack_len}).\n@@ -718,23 +713,26 @@ Returns @code{NULL} if not found.\n @end deftypefn\n \n @c memmove.c:6\n-@deftypefn Supplemental void* memmove (void *@var{from}, const void *@var{to}, size_t @var{count})\n+@deftypefn Supplemental void* memmove (void *@var{from}, const void *@var{to}, @\n+  size_t @var{count})\n \n Copies @var{count} bytes from memory area @var{from} to memory area\n @var{to}, returning a pointer to @var{to}.\n \n @end deftypefn\n \n @c mempcpy.c:23\n-@deftypefn Supplemental void* mempcpy (void *@var{out}, const void *@var{in}, size_t @var{length})\n+@deftypefn Supplemental void* mempcpy (void *@var{out}, const void *@var{in}, @\n+  size_t @var{length})\n \n Copies @var{length} bytes from memory region @var{in} to region\n @var{out}.  Returns a pointer to @var{out} + @var{length}.\n \n @end deftypefn\n \n @c memset.c:6\n-@deftypefn Supplemental void* memset (void *@var{s}, int @var{c}, size_t @var{count})\n+@deftypefn Supplemental void* memset (void *@var{s}, int @var{c}, @\n+  size_t @var{count})\n \n Sets the first @var{count} bytes of @var{s} to the constant byte\n @var{c}, returning a pointer to @var{s}.\n@@ -759,7 +757,7 @@ reading and writing.\n \n @end deftypefn\n \n-@c pexecute.txh:266\n+@c pexecute.txh:278\n @deftypefn Extension void pex_free (struct pex_obj @var{obj})\n \n Clean up and free all data associated with @var{obj}.  If you have not\n@@ -768,8 +766,9 @@ try to kill the subprocesses.\n \n @end deftypefn\n \n-@c pexecute.txh:241\n-@deftypefn Extension int pex_get_status (struct pex_obj *@var{obj}, int @var{count}, int *@var{vector})\n+@c pexecute.txh:251\n+@deftypefn Extension int pex_get_status (struct pex_obj *@var{obj}, @\n+  int @var{count}, int *@var{vector})\n \n Returns the exit status of all programs run using @var{obj}.\n @var{count} is the number of results expected.  The results will be\n@@ -778,8 +777,9 @@ to @code{pex_run}.  Returns 0 on error, 1 on success.\n \n @end deftypefn\n \n-@c pexecute.txh:250\n-@deftypefn Extension int pex_get_times (struct pex_obj *@var{obj}, int @var{count}, struct pex_time *@var{vector})\n+@c pexecute.txh:261\n+@deftypefn Extension int pex_get_times (struct pex_obj *@var{obj}, @\n+  int @var{count}, struct pex_time *@var{vector})\n \n Returns the process execution times of all programs run using\n @var{obj}.  @var{count} is the number of results expected.  The\n@@ -796,7 +796,8 @@ process times, all the fields will be set to @code{0}.\n @end deftypefn\n \n @c pexecute.txh:2\n-@deftypefn Extension {struct pex_obj *} pex_init (int @var{flags}, const char *@var{pname}, const char *@var{tempbase})\n+@deftypefn Extension {struct pex_obj *} pex_init (int @var{flags}, @\n+  const char *@var{pname}, const char *@var{tempbase})\n \n Prepare to execute one or more programs, with standard output of each\n program fed to standard input of the next.  This is a system\n@@ -827,8 +828,9 @@ temporary files; it may be @code{NULL} to use a randomly chosen name.\n \n @end deftypefn\n \n-@c pexecute.txh:155\n-@deftypefn Extension {FILE *} pex_input_file (struct pex_obj *@var{obj}, int @var{flags}, const char *@var{in_name})\n+@c pexecute.txh:161\n+@deftypefn Extension {FILE *} pex_input_file (struct pex_obj *@var{obj}, @\n+  int @var{flags}, const char *@var{in_name})\n \n Return a stream for a temporary file to pass to the first program in\n the pipeline as input.\n@@ -845,8 +847,9 @@ binary mode; otherwise, open it in the default mode.  Including\n @code{PEX_BINARY_OUTPUT} in @var{flags} has no effect on Unix.\n @end deftypefn\n \n-@c pexecute.txh:172\n-@deftypefn Extension {FILE *} pex_input_pipe (struct pex_obj *@var{obj}, int @var{binary})\n+@c pexecute.txh:179\n+@deftypefn Extension {FILE *} pex_input_pipe (struct pex_obj *@var{obj}, @\n+  int @var{binary})\n \n Return a stream @var{fp} for a pipe connected to the standard input of\n the first program in the pipeline; @var{fp} is opened for writing.\n@@ -890,8 +893,11 @@ the output pipe is you, but you are blocked on the input pipe.\n \n @end deftypefn\n \n-@c pexecute.txh:274\n-@deftypefn Extension {const char *} pex_one (int @var{flags}, const char *@var{executable}, char * const *@var{argv}, const char *@var{pname}, const char *@var{outname}, const char *@var{errname}, int *@var{status}, int *@var{err})\n+@c pexecute.txh:286\n+@deftypefn Extension {const char *} pex_one (int @var{flags}, @\n+  const char *@var{executable}, char * const *@var{argv}, @\n+  const char *@var{pname}, const char *@var{outname}, const char *@var{errname}, @\n+  int *@var{status}, int *@var{err})\n \n An interface to permit the easy execution of a\n single program.  The return value and most of the parameters are as\n@@ -903,8 +909,9 @@ be set to the exit status of the program.\n \n @end deftypefn\n \n-@c pexecute.txh:228\n-@deftypefn Extension {FILE *} pex_read_err (struct pex_obj *@var{obj}, int @var{binary})\n+@c pexecute.txh:237\n+@deftypefn Extension {FILE *} pex_read_err (struct pex_obj *@var{obj}, @\n+  int @var{binary})\n \n Returns a @code{FILE} pointer which may be used to read the standard\n error of the last program in the pipeline.  When this is used,\n@@ -916,8 +923,9 @@ it will be closed by @code{pex_free}.\n \n @end deftypefn\n \n-@c pexecute.txh:216\n-@deftypefn Extension {FILE *} pex_read_output (struct pex_obj *@var{obj}, int @var{binary})\n+@c pexecute.txh:224\n+@deftypefn Extension {FILE *} pex_read_output (struct pex_obj *@var{obj}, @\n+  int @var{binary})\n \n Returns a @code{FILE} pointer which may be used to read the standard\n output of the last program in the pipeline.  When this is used,\n@@ -929,8 +937,10 @@ it will be closed by @code{pex_free}.\n \n @end deftypefn\n \n-@c pexecute.txh:33\n-@deftypefn Extension {const char *} pex_run (struct pex_obj *@var{obj}, int @var{flags}, const char *@var{executable}, char * const *@var{argv}, const char *@var{outname}, const char *@var{errname}, int *@var{err})\n+@c pexecute.txh:34\n+@deftypefn Extension {const char *} pex_run (struct pex_obj *@var{obj}, @\n+  int @var{flags}, const char *@var{executable}, char * const *@var{argv}, @\n+  const char *@var{outname}, const char *@var{errname}, int *@var{err})\n \n Execute one program in a pipeline.  On success this returns\n @code{NULL}.  On failure it returns an error message, a statically\n@@ -1039,8 +1049,11 @@ value, or to 0 if there is no relevant @code{errno}.\n \n @end deftypefn\n \n-@c pexecute.txh:142\n-@deftypefn Extension {const char *} pex_run_in_environment (struct pex_obj *@var{obj}, int @var{flags}, const char *@var{executable}, char * const *@var{argv}, char * const *@var{env}, int @var{env_size}, const char *@var{outname}, const char *@var{errname}, int *@var{err})\n+@c pexecute.txh:145\n+@deftypefn Extension {const char *} pex_run_in_environment (struct pex_obj *@var{obj}, @\n+  int @var{flags}, const char *@var{executable}, char * const *@var{argv}, @\n+  char * const *@var{env}, int @var{env_size}, const char *@var{outname}, @\n+  const char *@var{errname}, int *@var{err})\n \n Execute one program in a pipeline, permitting the environment for the\n program to be specified.  Behaviour and parameters not listed below are\n@@ -1053,8 +1066,11 @@ form @code{VAR=VALUE}, with the exception of the last element that must be\n \n @end deftypefn\n \n-@c pexecute.txh:286\n-@deftypefn Extension int pexecute (const char *@var{program}, char * const *@var{argv}, const char *@var{this_pname}, const char *@var{temp_base}, char **@var{errmsg_fmt}, char **@var{errmsg_arg}, int @var{flags})\n+@c pexecute.txh:301\n+@deftypefn Extension int pexecute (const char *@var{program}, @\n+  char * const *@var{argv}, const char *@var{this_pname}, @\n+  const char *@var{temp_base}, char **@var{errmsg_fmt}, @\n+  char **@var{errmsg_arg}, int @var{flags})\n \n This is the old interface to execute one or more programs.  It is\n still supported for compatibility purposes, but is no longer\n@@ -1081,7 +1097,7 @@ name is unset/removed.\n \n @end deftypefn\n \n-@c pexecute.txh:294\n+@c pexecute.txh:312\n @deftypefn Extension int pwait (int @var{pid}, int *@var{status}, int @var{flags})\n \n Another part of the old execution interface.\n@@ -1091,7 +1107,8 @@ Another part of the old execution interface.\n @c random.c:39\n @deftypefn Supplement {long int} random (void)\n @deftypefnx Supplement void srandom (unsigned int @var{seed})\n-@deftypefnx Supplement void* initstate (unsigned int @var{seed}, void *@var{arg_state}, unsigned long @var{n})\n+@deftypefnx Supplement void* initstate (unsigned int @var{seed}, @\n+  void *@var{arg_state}, unsigned long @var{n})\n @deftypefnx Supplement void* setstate (void *@var{arg_state})\n \n Random number functions.  @code{random} returns a random number in the\n@@ -1103,8 +1120,9 @@ control over the state of the random number generator.\n \n @end deftypefn\n \n-@c concat.c:173\n-@deftypefn Extension char* reconcat (char *@var{optr}, const char *@var{s1}, @dots{}, @code{NULL})\n+@c concat.c:174\n+@deftypefn Extension char* reconcat (char *@var{optr}, const char *@var{s1}, @\n+  @dots{}, @code{NULL})\n \n Same as @code{concat}, except that if @var{optr} is not @code{NULL} it\n is freed after the string is created.  This is intended to be useful\n@@ -1134,8 +1152,9 @@ deprecated in new programs in favor of @code{strrchr}.\n \n @end deftypefn\n \n-@c setenv.c:22\n-@deftypefn Supplemental int setenv (const char *@var{name}, const char *@var{value}, int @var{overwrite})\n+@c setenv.c:23\n+@deftypefn Supplemental int setenv (const char *@var{name}, @\n+  const char *@var{value}, int @var{overwrite})\n @deftypefnx Supplemental void unsetenv (const char *@var{name})\n \n @code{setenv} adds @var{name} to the environment with value\n@@ -1146,8 +1165,8 @@ environment.  This implementation is not safe for multithreaded code.\n \n @end deftypefn\n \n-@c setproctitle.c:30\n-@deftypefn Supplemental void setproctitle (const char *@var{fmt} ...)\n+@c setproctitle.c:31\n+@deftypefn Supplemental void setproctitle (const char *@var{fmt}, ...)\n \n Set the title of a process to @var{fmt}. va args not supported for now,\n but defined for compatibility with BSD. \n@@ -1181,8 +1200,10 @@ be the value @code{1}).\n \n @end deftypefn\n \n-@c simple-object.txh:87\n-@deftypefn Extension {const char *} simple_object_attributes_compare (simple_object_attributes *@var{attrs1}, simple_object_attributes *@var{attrs2}, int *@var{err})\n+@c simple-object.txh:96\n+@deftypefn Extension {const char *} simple_object_attributes_compare @\n+  (simple_object_attributes *@var{attrs1}, simple_object_attributes *@var{attrs2}, @\n+   int *@var{err})\n \n Compare @var{attrs1} and @var{attrs2}.  If they could be linked\n together without error, return @code{NULL}.  Otherwise, return an\n@@ -1191,8 +1212,9 @@ if there is no relevant errno.\n \n @end deftypefn\n \n-@c simple-object.txh:73\n-@deftypefn Extension {simple_object_attributes *} simple_object_fetch_attributes (simple_object_read *@var{simple_object}, const char **@var{errmsg}, int *@var{err})\n+@c simple-object.txh:81\n+@deftypefn Extension {simple_object_attributes *} simple_object_fetch_attributes @\n+  (simple_object_read *@var{simple_object}, const char **@var{errmsg}, int *@var{err})\n \n Fetch the attributes of @var{simple_object}.  The attributes are\n internal information such as the format of the object file, or the\n@@ -1206,8 +1228,10 @@ error message, and sets @code{*@var{err}} to an errno value or\n \n @end deftypefn\n \n-@c simple-object.txh:44\n-@deftypefn Extension {int} simple_object_find_section (simple_object_read *@var{simple_object} off_t *@var{offset}, off_t *@var{length}, const char **@var{errmsg}, int *@var{err})           \n+@c simple-object.txh:49\n+@deftypefn Extension {int} simple_object_find_section @\n+  (simple_object_read *@var{simple_object} off_t *@var{offset}, @\n+  off_t *@var{length}, const char **@var{errmsg}, int *@var{err})\n \n Look for the section @var{name} in @var{simple_object}.  This returns\n information for the first section with that name.\n@@ -1229,8 +1253,11 @@ relevant errno.\n \n @end deftypefn\n \n-@c simple-object.txh:25\n-@deftypefn Extension {const char *} simple_object_find_sections (simple_object_read *@var{simple_object}, int (*@var{pfn}) (void *@var{data}, const char *@var{name}, off_t @var{offset}, off_t @var{length}), void *@var{data}, int *@var{err})\n+@c simple-object.txh:27\n+@deftypefn Extension {const char *} simple_object_find_sections @\n+  (simple_object_read *@var{simple_object}, int (*@var{pfn}) (void *@var{data}, @\n+  const char *@var{name}, off_t @var{offset}, off_t @var{length}), @\n+  void *@var{data}, int *@var{err})\n \n This function calls @var{pfn} for each section in @var{simple_object}.\n It calls @var{pfn} with the section name, the offset within the file\n@@ -1250,7 +1277,9 @@ or @code{0} if there is no relevant errno.\n @end deftypefn\n \n @c simple-object.txh:2\n-@deftypefn Extension {simple_object_read *} simple_object_open_read (int @var{descriptor}, off_t @var{offset}, const char *{segment_name}, const char **@var{errmsg}, int *@var{err})\n+@deftypefn Extension {simple_object_read *} simple_object_open_read @\n+  (int @var{descriptor}, off_t @var{offset}, const char *{segment_name}, @\n+  const char **@var{errmsg}, int *@var{err})\n \n Opens an object file for reading.  Creates and returns an\n @code{simple_object_read} pointer which may be passed to other\n@@ -1273,30 +1302,35 @@ an errno value or @code{0} if there is no relevant errno.\n \n @end deftypefn\n \n-@c simple-object.txh:96\n-@deftypefn Extension {void} simple_object_release_attributes (simple_object_attributes *@var{attrs})\n+@c simple-object.txh:107\n+@deftypefn Extension {void} simple_object_release_attributes @\n+  (simple_object_attributes *@var{attrs})\n \n Release all resources associated with @var{attrs}.\n \n @end deftypefn\n \n-@c simple-object.txh:66\n-@deftypefn Extension {void} simple_object_release_read (simple_object_read *@var{simple_object})\n+@c simple-object.txh:73\n+@deftypefn Extension {void} simple_object_release_read @\n+  (simple_object_read *@var{simple_object})\n \n Release all resources associated with @var{simple_object}.  This does\n not close the file descriptor.\n \n @end deftypefn\n \n-@c simple-object.txh:164\n-@deftypefn Extension {void} simple_object_release_write (simple_object_write *@var{simple_object})\n+@c simple-object.txh:184\n+@deftypefn Extension {void} simple_object_release_write @\n+  (simple_object_write *@var{simple_object})\n \n Release all resources associated with @var{simple_object}.\n \n @end deftypefn\n \n-@c simple-object.txh:102\n-@deftypefn Extension {simple_object_write *} simple_object_start_write (simple_object_attributes @var{attrs}, const char *@var{segment_name}, const char **@var{errmsg}, int *@var{err})\n+@c simple-object.txh:114\n+@deftypefn Extension {simple_object_write *} simple_object_start_write @\n+  (simple_object_attributes @var{attrs}, const char *@var{segment_name}, @\n+  const char **@var{errmsg}, int *@var{err})\n \n Start creating a new object file using the object file format\n described in @var{attrs}.  You must fetch attribute information from\n@@ -1314,8 +1348,11 @@ to an errno value or @code{0} if there is no relevant errno.\n \n @end deftypefn\n \n-@c simple-object.txh:137\n-@deftypefn Extension {const char *} simple_object_write_add_data (simple_object_write *@var{simple_object}, simple_object_write_section *@var{section}, const void *@var{buffer}, size_t @var{size}, int @var{copy}, int *@var{err})\n+@c simple-object.txh:153\n+@deftypefn Extension {const char *} simple_object_write_add_data @\n+  (simple_object_write *@var{simple_object}, @\n+  simple_object_write_section *@var{section}, const void *@var{buffer}, @\n+  size_t @var{size}, int @var{copy}, int *@var{err})\n \n Add data @var{buffer}/@var{size} to @var{section} in\n @var{simple_object}.  If @var{copy} is non-zero, the data will be\n@@ -1329,8 +1366,10 @@ no relevant erro.\n \n @end deftypefn\n \n-@c simple-object.txh:120\n-@deftypefn Extension {simple_object_write_section *} simple_object_write_create_section (simple_object_write *@var{simple_object}, const char *@var{name}, unsigned int @var{align}, const char **@var{errmsg}, int *@var{err})\n+@c simple-object.txh:134\n+@deftypefn Extension {simple_object_write_section *} simple_object_write_create_section @\n+  (simple_object_write *@var{simple_object}, const char *@var{name}, @\n+  unsigned int @var{align}, const char **@var{errmsg}, int *@var{err})\n \n Add a section to @var{simple_object}.  @var{name} is the name of the\n new section.  @var{align} is the required alignment expressed as the\n@@ -1347,8 +1386,9 @@ error message, and sets @code{*@var{err}} to an errno value or\n \n @end deftypefn\n \n-@c simple-object.txh:151\n-@deftypefn Extension {const char *} simple_object_write_to_file (simple_object_write *@var{simple_object}, int @var{descriptor}, int *@var{err})\n+@c simple-object.txh:170\n+@deftypefn Extension {const char *} simple_object_write_to_file @\n+  (simple_object_write *@var{simple_object}, int @var{descriptor}, int *@var{err})\n \n Write the complete object file to @var{descriptor}, an open file\n descriptor.  This writes out all the data accumulated by calls to\n@@ -1362,7 +1402,8 @@ there is no relevant errno.\n @end deftypefn\n \n @c snprintf.c:28\n-@deftypefn Supplemental int snprintf (char *@var{buf}, size_t @var{n}, const char *@var{format}, ...)\n+@deftypefn Supplemental int snprintf (char *@var{buf}, size_t @var{n}, @\n+  const char *@var{format}, ...)\n \n This function is similar to @code{sprintf}, but it will write to\n @var{buf} at most @code{@var{n}-1} bytes of text, followed by a\n@@ -1385,6 +1426,27 @@ valid until at least the next call.\n \n @end deftypefn\n \n+@c splay-tree.c:303\n+@deftypefn Supplemental splay_tree splay_tree_new_with_typed_alloc @\n+(splay_tree_compare_fn @var{compare_fn}, @\n+splay_tree_delete_key_fn @var{delete_key_fn}, @\n+splay_tree_delete_value_fn @var{delete_value_fn}, @\n+splay_tree_allocate_fn @var{tree_allocate_fn}, @\n+splay_tree_allocate_fn @var{node_allocate_fn}, @\n+splay_tree_deallocate_fn @var{deallocate_fn}, @\n+void * @var{allocate_data})\n+\n+This function creates a splay tree that uses two different allocators\n+@var{tree_allocate_fn} and @var{node_allocate_fn} to use for allocating the\n+tree itself and its nodes respectively.  This is useful when variables of\n+different types need to be allocated with different allocators.\n+\n+The splay tree will use @var{compare_fn} to compare nodes,\n+@var{delete_key_fn} to deallocate keys, and @var{delete_value_fn} to\n+deallocate values.\n+\n+@end deftypefn\n+\n @c stpcpy.c:23\n @deftypefn Supplemental char* stpcpy (char *@var{dst}, const char *@var{src})\n \n@@ -1394,7 +1456,8 @@ Copies the string @var{src} into @var{dst}.  Returns a pointer to\n @end deftypefn\n \n @c stpncpy.c:23\n-@deftypefn Supplemental char* stpncpy (char *@var{dst}, const char *@var{src}, size_t @var{len})\n+@deftypefn Supplemental char* stpncpy (char *@var{dst}, const char *@var{src}, @\n+  size_t @var{len})\n \n Copies the string @var{src} into @var{dst}, copying exactly @var{len}\n and padding with zeros if necessary.  If @var{len} < strlen(@var{src})\n@@ -1476,7 +1539,8 @@ A case-insensitive @code{strncmp}.\n @end deftypefn\n \n @c strncmp.c:6\n-@deftypefn Supplemental int strncmp (const char *@var{s1}, const char *@var{s2}, size_t @var{n})\n+@deftypefn Supplemental int strncmp (const char *@var{s1}, @\n+  const char *@var{s2}, size_t @var{n})\n \n Compares the first @var{n} bytes of two strings, returning a value as\n @code{strcmp}.\n@@ -1553,7 +1617,8 @@ length, the function returns @var{string}.\n @end deftypefn\n \n @c strtod.c:27\n-@deftypefn Supplemental double strtod (const char *@var{string}, char **@var{endptr})\n+@deftypefn Supplemental double strtod (const char *@var{string}, @\n+  char **@var{endptr})\n \n This ISO C function converts the initial portion of @var{string} to a\n @code{double}.  If @var{endptr} is not @code{NULL}, a pointer to the\n@@ -1573,8 +1638,10 @@ to an errno value.  If no translation is found, returns 0.\n @end deftypefn\n \n @c strtol.c:33\n-@deftypefn Supplemental {long int} strtol (const char *@var{string}, char **@var{endptr}, int @var{base})\n-@deftypefnx Supplemental {unsigned long int} strtoul (const char *@var{string}, char **@var{endptr}, int @var{base})\n+@deftypefn Supplemental {long int} strtol (const char *@var{string}, @\n+  char **@var{endptr}, int @var{base})\n+@deftypefnx Supplemental {unsigned long int} strtoul (const char *@var{string}, @\n+  char **@var{endptr}, int @var{base})\n \n The @code{strtol} function converts the string in @var{string} to a\n long integer value according to the given @var{base}, which must be\n@@ -1683,7 +1750,8 @@ pointer unchanged.  If the @var{stream} is @code{NULL} do nothing.\n @end deftypefn\n \n @c vasprintf.c:47\n-@deftypefn Extension int vasprintf (char **@var{resptr}, const char *@var{format}, va_list @var{args})\n+@deftypefn Extension int vasprintf (char **@var{resptr}, @\n+  const char *@var{format}, va_list @var{args})\n \n Like @code{vsprintf}, but instead of passing a pointer to a buffer,\n you pass a pointer to a pointer.  This function will compute the size\n@@ -1704,8 +1772,10 @@ Emulates @code{vfork} by calling @code{fork} and returning its value.\n \n @c vprintf.c:3\n @deftypefn Supplemental int vprintf (const char *@var{format}, va_list @var{ap})\n-@deftypefnx Supplemental int vfprintf (FILE *@var{stream}, const char *@var{format}, va_list @var{ap})\n-@deftypefnx Supplemental int vsprintf (char *@var{str}, const char *@var{format}, va_list @var{ap})\n+@deftypefnx Supplemental int vfprintf (FILE *@var{stream}, @\n+  const char *@var{format}, va_list @var{ap})\n+@deftypefnx Supplemental int vsprintf (char *@var{str}, @\n+  const char *@var{format}, va_list @var{ap})\n \n These functions are the same as @code{printf}, @code{fprintf}, and\n @code{sprintf}, respectively, except that they are called with a\n@@ -1717,7 +1787,8 @@ nonstandard but common function @code{_doprnt}.\n @end deftypefn\n \n @c vsnprintf.c:28\n-@deftypefn Supplemental int vsnprintf (char *@var{buf}, size_t @var{n}, const char *@var{format}, va_list @var{ap})\n+@deftypefn Supplemental int vsnprintf (char *@var{buf}, size_t @var{n}, @\n+  const char *@var{format}, va_list @var{ap})\n \n This function is similar to @code{vsprintf}, but it will write to\n @var{buf} at most @code{@var{n}-1} bytes of text, followed by a\n@@ -1806,7 +1877,8 @@ You can use this to set the name of the program used by\n @end deftypefn\n \n @c xmemdup.c:7\n-@deftypefn Replacement void* xmemdup (void *@var{input}, size_t @var{copy_size}, size_t @var{alloc_size})\n+@deftypefn Replacement void* xmemdup (void *@var{input}, @\n+  size_t @var{copy_size}, size_t @var{alloc_size})\n \n Duplicates a region of memory without fail.  First, @var{alloc_size} bytes\n are allocated, then @var{copy_size} bytes from @var{input} are copied into"}, {"sha": "2f1f3b1f699e62407f4864fd669af6cebbbc2d9a", "filename": "libiberty/gather-docs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996c0cb05f747d94ff4d6e9329e702414f46f700/libiberty%2Fgather-docs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996c0cb05f747d94ff4d6e9329e702414f46f700/libiberty%2Fgather-docs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fgather-docs?ref=996c0cb05f747d94ff4d6e9329e702414f46f700", "patch": "@@ -1,7 +1,7 @@\n #!/usr/bin/perl\n # -*- perl -*-\n \n-#   Copyright (C) 2001\n+#   Copyright (C) 2001, 2009, 2011\n #   Free Software Foundation\n #\n # This file is part of the libiberty library.\n@@ -73,8 +73,8 @@ for $in (@ARGV) {\n \n \t    if (/^\\@def[a-z]*[a-wyz] /) {\n \t\t\n-\t\t($name) = m/[^\\(]* ([^\\( \\t\\r\\n]+) *\\(/;\n-\t\t$name =~ s/[ \t]*$//;\n+\t\t($name) = m/[^\\(]* ([^\\( \\t\\r\\n\\@]+) *(\\(|\\@?$)/;\n+\t\t$name =~ s/[\t ]*\\@?$//;\n \t\t$key = $name;\n \t\t$key =~ tr/A-Z/a-z/;\n \t\t$key =~ s/[^a-z0-9]+/ /g;"}, {"sha": "dfaec0f31aeef59dc0263ff1de078515f2b67c23", "filename": "libiberty/hashtab.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996c0cb05f747d94ff4d6e9329e702414f46f700/libiberty%2Fhashtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996c0cb05f747d94ff4d6e9329e702414f46f700/libiberty%2Fhashtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fhashtab.c?ref=996c0cb05f747d94ff4d6e9329e702414f46f700", "patch": "@@ -333,9 +333,9 @@ htab_create_alloc_ex (size_t size, htab_hash hash_f, htab_eq eq_f,\n \n /*\n \n-@deftypefn Supplemental htab_t htab_create_typed_alloc (size_t @var{size},\n-htab_hash @var{hash_f}, htab_eq @var{eq_f}, htab_del @var{del_f},\n-htab_alloc @var{alloc_tab_f}, htab_alloc @var{alloc_f},\n+@deftypefn Supplemental htab_t htab_create_typed_alloc (size_t @var{size}, @\n+htab_hash @var{hash_f}, htab_eq @var{eq_f}, htab_del @var{del_f}, @\n+htab_alloc @var{alloc_tab_f}, htab_alloc @var{alloc_f}, @\n htab_free @var{free_f})\n \n This function creates a hash table that uses two different allocators"}, {"sha": "fd02357bb23970dcda529f1f4a939074c07c54ad", "filename": "libiberty/insque.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996c0cb05f747d94ff4d6e9329e702414f46f700/libiberty%2Finsque.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996c0cb05f747d94ff4d6e9329e702414f46f700/libiberty%2Finsque.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Finsque.c?ref=996c0cb05f747d94ff4d6e9329e702414f46f700", "patch": "@@ -3,7 +3,8 @@\n \n /*\n \n-@deftypefn Supplemental void insque (struct qelem *@var{elem}, struct qelem *@var{pred})\n+@deftypefn Supplemental void insque (struct qelem *@var{elem}, @\n+  struct qelem *@var{pred})\n @deftypefnx Supplemental void remque (struct qelem *@var{elem})\n \n Routines to manipulate queues built from doubly linked lists.  The"}, {"sha": "4553a7109d8244ec0ad572f6d5f415e7927824cf", "filename": "libiberty/make-relative-prefix.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996c0cb05f747d94ff4d6e9329e702414f46f700/libiberty%2Fmake-relative-prefix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996c0cb05f747d94ff4d6e9329e702414f46f700/libiberty%2Fmake-relative-prefix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fmake-relative-prefix.c?ref=996c0cb05f747d94ff4d6e9329e702414f46f700", "patch": "@@ -21,7 +21,8 @@ Software Foundation, 51 Franklin Street - Fifth Floor, Boston, MA\n \n /*\n \n-@deftypefn Extension {const char*} make_relative_prefix (const char *@var{progname}, const char *@var{bin_prefix}, const char *@var{prefix})\n+@deftypefn Extension {const char*} make_relative_prefix (const char *@var{progname}, @\n+  const char *@var{bin_prefix}, const char *@var{prefix})\n \n Given three paths @var{progname}, @var{bin_prefix}, @var{prefix},\n return the path that is in the same position relative to"}, {"sha": "7448ab9e71c3259ad28405720f6acd88ee0801e1", "filename": "libiberty/memchr.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996c0cb05f747d94ff4d6e9329e702414f46f700/libiberty%2Fmemchr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996c0cb05f747d94ff4d6e9329e702414f46f700/libiberty%2Fmemchr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fmemchr.c?ref=996c0cb05f747d94ff4d6e9329e702414f46f700", "patch": "@@ -1,6 +1,7 @@\n /*\n \n-@deftypefn Supplemental void* memchr (const void *@var{s}, int @var{c}, size_t @var{n})\n+@deftypefn Supplemental void* memchr (const void *@var{s}, int @var{c}, @\n+  size_t @var{n})\n \n This function searches memory starting at @code{*@var{s}} for the\n character @var{c}.  The search only ends with the first occurrence of"}, {"sha": "37db60f38267acb589ca3d697ecd41109dff8210", "filename": "libiberty/memcmp.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996c0cb05f747d94ff4d6e9329e702414f46f700/libiberty%2Fmemcmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996c0cb05f747d94ff4d6e9329e702414f46f700/libiberty%2Fmemcmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fmemcmp.c?ref=996c0cb05f747d94ff4d6e9329e702414f46f700", "patch": "@@ -3,7 +3,8 @@\n \n /*\n \n-@deftypefn Supplemental int memcmp (const void *@var{x}, const void *@var{y}, size_t @var{count})\n+@deftypefn Supplemental int memcmp (const void *@var{x}, const void *@var{y}, @\n+  size_t @var{count})\n \n Compares the first @var{count} bytes of two areas of memory.  Returns\n zero if they are the same, a value less than zero if @var{x} is"}, {"sha": "7f67d0bd1f26c8ef5e89bfdf7ea71d25cfb40c4c", "filename": "libiberty/memcpy.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996c0cb05f747d94ff4d6e9329e702414f46f700/libiberty%2Fmemcpy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996c0cb05f747d94ff4d6e9329e702414f46f700/libiberty%2Fmemcpy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fmemcpy.c?ref=996c0cb05f747d94ff4d6e9329e702414f46f700", "patch": "@@ -3,7 +3,8 @@\n \n /*\n \n-@deftypefn Supplemental void* memcpy (void *@var{out}, const void *@var{in}, size_t @var{length})\n+@deftypefn Supplemental void* memcpy (void *@var{out}, const void *@var{in}, @\n+  size_t @var{length})\n \n Copies @var{length} bytes from memory region @var{in} to region\n @var{out}.  Returns a pointer to @var{out}."}, {"sha": "147253f5bad9cba2f98f8f8cde62b68846a28083", "filename": "libiberty/memmem.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996c0cb05f747d94ff4d6e9329e702414f46f700/libiberty%2Fmemmem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996c0cb05f747d94ff4d6e9329e702414f46f700/libiberty%2Fmemmem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fmemmem.c?ref=996c0cb05f747d94ff4d6e9329e702414f46f700", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 1991,92,93,94,96,97,98,2000,2004,2007 Free Software Foundation, Inc.\n+/* Copyright (C) 1991,92,93,94,96,97,98,2000,2004,2007,2011 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n \n    This program is free software; you can redistribute it and/or modify\n@@ -17,7 +17,8 @@\n \n /*\n \n-@deftypefn Supplemental void* memmem (const void *@var{haystack}, size_t @var{haystack_len} const void *@var{needle}, size_t @var{needle_len})\n+@deftypefn Supplemental void* memmem (const void *@var{haystack}, @\n+  size_t @var{haystack_len} const void *@var{needle}, size_t @var{needle_len})\n \n Returns a pointer to the first occurrence of @var{needle} (length\n @var{needle_len}) in @var{haystack} (length @var{haystack_len})."}, {"sha": "ebda7cbb41caa9d0814658115c299e1d6874e517", "filename": "libiberty/memmove.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996c0cb05f747d94ff4d6e9329e702414f46f700/libiberty%2Fmemmove.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996c0cb05f747d94ff4d6e9329e702414f46f700/libiberty%2Fmemmove.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fmemmove.c?ref=996c0cb05f747d94ff4d6e9329e702414f46f700", "patch": "@@ -3,7 +3,8 @@\n \n /*\n \n-@deftypefn Supplemental void* memmove (void *@var{from}, const void *@var{to}, size_t @var{count})\n+@deftypefn Supplemental void* memmove (void *@var{from}, const void *@var{to}, @\n+  size_t @var{count})\n \n Copies @var{count} bytes from memory area @var{from} to memory area\n @var{to}, returning a pointer to @var{to}."}, {"sha": "f85a07f2910f9a798e4e1aa8769038de3c5a8ba6", "filename": "libiberty/mempcpy.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996c0cb05f747d94ff4d6e9329e702414f46f700/libiberty%2Fmempcpy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996c0cb05f747d94ff4d6e9329e702414f46f700/libiberty%2Fmempcpy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fmempcpy.c?ref=996c0cb05f747d94ff4d6e9329e702414f46f700", "patch": "@@ -1,5 +1,5 @@\n /* Implement the mempcpy function.\n-   Copyright (C) 2003, 2004, 2005 Free Software Foundation, Inc.\n+   Copyright (C) 2003, 2004, 2005, 2011 Free Software Foundation, Inc.\n    Written by Kaveh R. Ghazi <ghazi@caip.rutgers.edu>.\n \n This file is part of the libiberty library.\n@@ -20,7 +20,8 @@ Boston, MA 02110-1301, USA.  */\n \n /*\n \n-@deftypefn Supplemental void* mempcpy (void *@var{out}, const void *@var{in}, size_t @var{length})\n+@deftypefn Supplemental void* mempcpy (void *@var{out}, const void *@var{in}, @\n+  size_t @var{length})\n \n Copies @var{length} bytes from memory region @var{in} to region\n @var{out}.  Returns a pointer to @var{out} + @var{length}."}, {"sha": "476668961271373f5e9e12b76e7fd9a32cf7879b", "filename": "libiberty/memset.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996c0cb05f747d94ff4d6e9329e702414f46f700/libiberty%2Fmemset.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996c0cb05f747d94ff4d6e9329e702414f46f700/libiberty%2Fmemset.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fmemset.c?ref=996c0cb05f747d94ff4d6e9329e702414f46f700", "patch": "@@ -3,7 +3,8 @@\n \n /*\n \n-@deftypefn Supplemental void* memset (void *@var{s}, int @var{c}, size_t @var{count})\n+@deftypefn Supplemental void* memset (void *@var{s}, int @var{c}, @\n+  size_t @var{count})\n \n Sets the first @var{count} bytes of @var{s} to the constant byte\n @var{c}, returning a pointer to @var{s}."}, {"sha": "c3e40385631918d08fb9054d246e4b87c8b1d68a", "filename": "libiberty/pexecute.txh", "status": "modified", "additions": 29, "deletions": 11, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996c0cb05f747d94ff4d6e9329e702414f46f700/libiberty%2Fpexecute.txh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996c0cb05f747d94ff4d6e9329e702414f46f700/libiberty%2Fpexecute.txh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fpexecute.txh?ref=996c0cb05f747d94ff4d6e9329e702414f46f700", "patch": "@@ -1,5 +1,6 @@\n @c -*- mode: texinfo -*-\n-@deftypefn Extension {struct pex_obj *} pex_init (int @var{flags}, const char *@var{pname}, const char *@var{tempbase})\n+@deftypefn Extension {struct pex_obj *} pex_init (int @var{flags}, @\n+  const char *@var{pname}, const char *@var{tempbase})\n \n Prepare to execute one or more programs, with standard output of each\n program fed to standard input of the next.  This is a system\n@@ -30,7 +31,9 @@ temporary files; it may be @code{NULL} to use a randomly chosen name.\n \n @end deftypefn\n \n-@deftypefn Extension {const char *} pex_run (struct pex_obj *@var{obj}, int @var{flags}, const char *@var{executable}, char * const *@var{argv}, const char *@var{outname}, const char *@var{errname}, int *@var{err})\n+@deftypefn Extension {const char *} pex_run (struct pex_obj *@var{obj}, @\n+  int @var{flags}, const char *@var{executable}, char * const *@var{argv}, @\n+  const char *@var{outname}, const char *@var{errname}, int *@var{err})\n \n Execute one program in a pipeline.  On success this returns\n @code{NULL}.  On failure it returns an error message, a statically\n@@ -139,7 +142,10 @@ value, or to 0 if there is no relevant @code{errno}.\n \n @end deftypefn\n \n-@deftypefn Extension {const char *} pex_run_in_environment (struct pex_obj *@var{obj}, int @var{flags}, const char *@var{executable}, char * const *@var{argv}, char * const *@var{env}, int @var{env_size}, const char *@var{outname}, const char *@var{errname}, int *@var{err})\n+@deftypefn Extension {const char *} pex_run_in_environment (struct pex_obj *@var{obj}, @\n+  int @var{flags}, const char *@var{executable}, char * const *@var{argv}, @\n+  char * const *@var{env}, int @var{env_size}, const char *@var{outname}, @\n+  const char *@var{errname}, int *@var{err})\n \n Execute one program in a pipeline, permitting the environment for the\n program to be specified.  Behaviour and parameters not listed below are\n@@ -152,7 +158,8 @@ form @code{VAR=VALUE}, with the exception of the last element that must be\n \n @end deftypefn\n \n-@deftypefn Extension {FILE *} pex_input_file (struct pex_obj *@var{obj}, int @var{flags}, const char *@var{in_name})\n+@deftypefn Extension {FILE *} pex_input_file (struct pex_obj *@var{obj}, @\n+  int @var{flags}, const char *@var{in_name})\n \n Return a stream for a temporary file to pass to the first program in\n the pipeline as input.\n@@ -169,7 +176,8 @@ binary mode; otherwise, open it in the default mode.  Including\n @code{PEX_BINARY_OUTPUT} in @var{flags} has no effect on Unix.\n @end deftypefn\n \n-@deftypefn Extension {FILE *} pex_input_pipe (struct pex_obj *@var{obj}, int @var{binary})\n+@deftypefn Extension {FILE *} pex_input_pipe (struct pex_obj *@var{obj}, @\n+  int @var{binary})\n \n Return a stream @var{fp} for a pipe connected to the standard input of\n the first program in the pipeline; @var{fp} is opened for writing.\n@@ -213,7 +221,8 @@ the output pipe is you, but you are blocked on the input pipe.\n \n @end deftypefn\n \n-@deftypefn Extension {FILE *} pex_read_output (struct pex_obj *@var{obj}, int @var{binary})\n+@deftypefn Extension {FILE *} pex_read_output (struct pex_obj *@var{obj}, @\n+  int @var{binary})\n \n Returns a @code{FILE} pointer which may be used to read the standard\n output of the last program in the pipeline.  When this is used,\n@@ -225,7 +234,8 @@ it will be closed by @code{pex_free}.\n \n @end deftypefn\n \n-@deftypefn Extension {FILE *} pex_read_err (struct pex_obj *@var{obj}, int @var{binary})\n+@deftypefn Extension {FILE *} pex_read_err (struct pex_obj *@var{obj}, @\n+  int @var{binary})\n \n Returns a @code{FILE} pointer which may be used to read the standard\n error of the last program in the pipeline.  When this is used,\n@@ -238,7 +248,8 @@ it will be closed by @code{pex_free}.\n @end deftypefn\n \n \n-@deftypefn Extension int pex_get_status (struct pex_obj *@var{obj}, int @var{count}, int *@var{vector})\n+@deftypefn Extension int pex_get_status (struct pex_obj *@var{obj}, @\n+  int @var{count}, int *@var{vector})\n \n Returns the exit status of all programs run using @var{obj}.\n @var{count} is the number of results expected.  The results will be\n@@ -247,7 +258,8 @@ to @code{pex_run}.  Returns 0 on error, 1 on success.\n \n @end deftypefn\n \n-@deftypefn Extension int pex_get_times (struct pex_obj *@var{obj}, int @var{count}, struct pex_time *@var{vector})\n+@deftypefn Extension int pex_get_times (struct pex_obj *@var{obj}, @\n+  int @var{count}, struct pex_time *@var{vector})\n \n Returns the process execution times of all programs run using\n @var{obj}.  @var{count} is the number of results expected.  The\n@@ -271,7 +283,10 @@ try to kill the subprocesses.\n \n @end deftypefn\n \n-@deftypefn Extension {const char *} pex_one (int @var{flags}, const char *@var{executable}, char * const *@var{argv}, const char *@var{pname}, const char *@var{outname}, const char *@var{errname}, int *@var{status}, int *@var{err})\n+@deftypefn Extension {const char *} pex_one (int @var{flags}, @\n+  const char *@var{executable}, char * const *@var{argv}, @\n+  const char *@var{pname}, const char *@var{outname}, const char *@var{errname}, @\n+  int *@var{status}, int *@var{err})\n \n An interface to permit the easy execution of a\n single program.  The return value and most of the parameters are as\n@@ -283,7 +298,10 @@ be set to the exit status of the program.\n \n @end deftypefn\n \n-@deftypefn Extension int pexecute (const char *@var{program}, char * const *@var{argv}, const char *@var{this_pname}, const char *@var{temp_base}, char **@var{errmsg_fmt}, char **@var{errmsg_arg}, int @var{flags})\n+@deftypefn Extension int pexecute (const char *@var{program}, @\n+  char * const *@var{argv}, const char *@var{this_pname}, @\n+  const char *@var{temp_base}, char **@var{errmsg_fmt}, @\n+  char **@var{errmsg_arg}, int @var{flags})\n \n This is the old interface to execute one or more programs.  It is\n still supported for compatibility purposes, but is no longer"}, {"sha": "b1d3c6c6ae442b714f9339464fd75877e937cfee", "filename": "libiberty/random.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996c0cb05f747d94ff4d6e9329e702414f46f700/libiberty%2Frandom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996c0cb05f747d94ff4d6e9329e702414f46f700/libiberty%2Frandom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Frandom.c?ref=996c0cb05f747d94ff4d6e9329e702414f46f700", "patch": "@@ -38,7 +38,8 @@\n \n @deftypefn Supplement {long int} random (void)\n @deftypefnx Supplement void srandom (unsigned int @var{seed})\n-@deftypefnx Supplement void* initstate (unsigned int @var{seed}, void *@var{arg_state}, unsigned long @var{n})\n+@deftypefnx Supplement void* initstate (unsigned int @var{seed}, @\n+  void *@var{arg_state}, unsigned long @var{n})\n @deftypefnx Supplement void* setstate (void *@var{arg_state})\n \n Random number functions.  @code{random} returns a random number in the"}, {"sha": "96917d5769f484e8f923de5ec75278b4319be6fe", "filename": "libiberty/setenv.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996c0cb05f747d94ff4d6e9329e702414f46f700/libiberty%2Fsetenv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996c0cb05f747d94ff4d6e9329e702414f46f700/libiberty%2Fsetenv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fsetenv.c?ref=996c0cb05f747d94ff4d6e9329e702414f46f700", "patch": "@@ -1,4 +1,5 @@\n-/* Copyright (C) 1992, 1995, 1996, 1997, 2002 Free Software Foundation, Inc.\n+/* Copyright (C) 1992, 1995, 1996, 1997, 2002, 2011 Free Software Foundation,\n+   Inc.\n    This file based on setenv.c in the GNU C Library.\n \n    The GNU C Library is free software; you can redistribute it and/or\n@@ -19,7 +20,8 @@\n \n /*\n \n-@deftypefn Supplemental int setenv (const char *@var{name}, const char *@var{value}, int @var{overwrite})\n+@deftypefn Supplemental int setenv (const char *@var{name}, @\n+  const char *@var{value}, int @var{overwrite})\n @deftypefnx Supplemental void unsetenv (const char *@var{name})\n \n @code{setenv} adds @var{name} to the environment with value"}, {"sha": "3b3f377b67b7e3d3a14bb371b8b96fbbae9030a8", "filename": "libiberty/setproctitle.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996c0cb05f747d94ff4d6e9329e702414f46f700/libiberty%2Fsetproctitle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996c0cb05f747d94ff4d6e9329e702414f46f700/libiberty%2Fsetproctitle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fsetproctitle.c?ref=996c0cb05f747d94ff4d6e9329e702414f46f700", "patch": "@@ -1,5 +1,5 @@\n /* Set the title of a process.\n-   Copyright (C) 2010 Free Software Foundation, Inc.\n+   Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n \n This file is part of the libiberty library.\n Libiberty is free software; you can redistribute it and/or\n@@ -28,7 +28,7 @@ Boston, MA 02110-1301, USA.  */\n \n /*\n \n-@deftypefn Supplemental void setproctitle (const char *@var{fmt} ...)\n+@deftypefn Supplemental void setproctitle (const char *@var{fmt}, ...)\n \n Set the title of a process to @var{fmt}. va args not supported for now,\n but defined for compatibility with BSD. "}, {"sha": "34639f10a6215b412607c82af59050c4fbf57eb0", "filename": "libiberty/simple-object.txh", "status": "modified", "additions": 33, "deletions": 12, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996c0cb05f747d94ff4d6e9329e702414f46f700/libiberty%2Fsimple-object.txh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996c0cb05f747d94ff4d6e9329e702414f46f700/libiberty%2Fsimple-object.txh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fsimple-object.txh?ref=996c0cb05f747d94ff4d6e9329e702414f46f700", "patch": "@@ -1,5 +1,7 @@\n @c -*- mode: texinfo -*-\n-@deftypefn Extension {simple_object_read *} simple_object_open_read (int @var{descriptor}, off_t @var{offset}, const char *{segment_name}, const char **@var{errmsg}, int *@var{err})\n+@deftypefn Extension {simple_object_read *} simple_object_open_read @\n+  (int @var{descriptor}, off_t @var{offset}, const char *{segment_name}, @\n+  const char **@var{errmsg}, int *@var{err})\n \n Opens an object file for reading.  Creates and returns an\n @code{simple_object_read} pointer which may be passed to other\n@@ -22,7 +24,10 @@ an errno value or @code{0} if there is no relevant errno.\n \n @end deftypefn\n \n-@deftypefn Extension {const char *} simple_object_find_sections (simple_object_read *@var{simple_object}, int (*@var{pfn}) (void *@var{data}, const char *@var{name}, off_t @var{offset}, off_t @var{length}), void *@var{data}, int *@var{err})\n+@deftypefn Extension {const char *} simple_object_find_sections @\n+  (simple_object_read *@var{simple_object}, int (*@var{pfn}) (void *@var{data}, @\n+  const char *@var{name}, off_t @var{offset}, off_t @var{length}), @\n+  void *@var{data}, int *@var{err})\n \n This function calls @var{pfn} for each section in @var{simple_object}.\n It calls @var{pfn} with the section name, the offset within the file\n@@ -41,7 +46,9 @@ or @code{0} if there is no relevant errno.\n \n @end deftypefn\n \n-@deftypefn Extension {int} simple_object_find_section (simple_object_read *@var{simple_object} off_t *@var{offset}, off_t *@var{length}, const char **@var{errmsg}, int *@var{err})           \n+@deftypefn Extension {int} simple_object_find_section @\n+  (simple_object_read *@var{simple_object} off_t *@var{offset}, @\n+  off_t *@var{length}, const char **@var{errmsg}, int *@var{err})\n \n Look for the section @var{name} in @var{simple_object}.  This returns\n information for the first section with that name.\n@@ -63,14 +70,16 @@ relevant errno.\n \n @end deftypefn\n \n-@deftypefn Extension {void} simple_object_release_read (simple_object_read *@var{simple_object})\n+@deftypefn Extension {void} simple_object_release_read @\n+  (simple_object_read *@var{simple_object})\n \n Release all resources associated with @var{simple_object}.  This does\n not close the file descriptor.\n \n @end deftypefn\n \n-@deftypefn Extension {simple_object_attributes *} simple_object_fetch_attributes (simple_object_read *@var{simple_object}, const char **@var{errmsg}, int *@var{err})\n+@deftypefn Extension {simple_object_attributes *} simple_object_fetch_attributes @\n+  (simple_object_read *@var{simple_object}, const char **@var{errmsg}, int *@var{err})\n \n Fetch the attributes of @var{simple_object}.  The attributes are\n internal information such as the format of the object file, or the\n@@ -84,7 +93,9 @@ error message, and sets @code{*@var{err}} to an errno value or\n \n @end deftypefn\n \n-@deftypefn Extension {const char *} simple_object_attributes_compare (simple_object_attributes *@var{attrs1}, simple_object_attributes *@var{attrs2}, int *@var{err})\n+@deftypefn Extension {const char *} simple_object_attributes_compare @\n+  (simple_object_attributes *@var{attrs1}, simple_object_attributes *@var{attrs2}, @\n+   int *@var{err})\n \n Compare @var{attrs1} and @var{attrs2}.  If they could be linked\n together without error, return @code{NULL}.  Otherwise, return an\n@@ -93,13 +104,16 @@ if there is no relevant errno.\n \n @end deftypefn\n \n-@deftypefn Extension {void} simple_object_release_attributes (simple_object_attributes *@var{attrs})\n+@deftypefn Extension {void} simple_object_release_attributes @\n+  (simple_object_attributes *@var{attrs})\n \n Release all resources associated with @var{attrs}.\n \n @end deftypefn\n \n-@deftypefn Extension {simple_object_write *} simple_object_start_write (simple_object_attributes @var{attrs}, const char *@var{segment_name}, const char **@var{errmsg}, int *@var{err})\n+@deftypefn Extension {simple_object_write *} simple_object_start_write @\n+  (simple_object_attributes @var{attrs}, const char *@var{segment_name}, @\n+  const char **@var{errmsg}, int *@var{err})\n \n Start creating a new object file using the object file format\n described in @var{attrs}.  You must fetch attribute information from\n@@ -117,7 +131,9 @@ to an errno value or @code{0} if there is no relevant errno.\n \n @end deftypefn\n \n-@deftypefn Extension {simple_object_write_section *} simple_object_write_create_section (simple_object_write *@var{simple_object}, const char *@var{name}, unsigned int @var{align}, const char **@var{errmsg}, int *@var{err})\n+@deftypefn Extension {simple_object_write_section *} simple_object_write_create_section @\n+  (simple_object_write *@var{simple_object}, const char *@var{name}, @\n+  unsigned int @var{align}, const char **@var{errmsg}, int *@var{err})\n \n Add a section to @var{simple_object}.  @var{name} is the name of the\n new section.  @var{align} is the required alignment expressed as the\n@@ -134,7 +150,10 @@ error message, and sets @code{*@var{err}} to an errno value or\n \n @end deftypefn\n \n-@deftypefn Extension {const char *} simple_object_write_add_data (simple_object_write *@var{simple_object}, simple_object_write_section *@var{section}, const void *@var{buffer}, size_t @var{size}, int @var{copy}, int *@var{err})\n+@deftypefn Extension {const char *} simple_object_write_add_data @\n+  (simple_object_write *@var{simple_object}, @\n+  simple_object_write_section *@var{section}, const void *@var{buffer}, @\n+  size_t @var{size}, int @var{copy}, int *@var{err})\n \n Add data @var{buffer}/@var{size} to @var{section} in\n @var{simple_object}.  If @var{copy} is non-zero, the data will be\n@@ -148,7 +167,8 @@ no relevant erro.\n \n @end deftypefn\n \n-@deftypefn Extension {const char *} simple_object_write_to_file (simple_object_write *@var{simple_object}, int @var{descriptor}, int *@var{err})\n+@deftypefn Extension {const char *} simple_object_write_to_file @\n+  (simple_object_write *@var{simple_object}, int @var{descriptor}, int *@var{err})\n \n Write the complete object file to @var{descriptor}, an open file\n descriptor.  This writes out all the data accumulated by calls to\n@@ -161,7 +181,8 @@ there is no relevant errno.\n \n @end deftypefn\n \n-@deftypefn Extension {void} simple_object_release_write (simple_object_write *@var{simple_object})\n+@deftypefn Extension {void} simple_object_release_write @\n+  (simple_object_write *@var{simple_object})\n \n Release all resources associated with @var{simple_object}.\n "}, {"sha": "1e3b03888e690ad987e185d487666b744e75ec4e", "filename": "libiberty/snprintf.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996c0cb05f747d94ff4d6e9329e702414f46f700/libiberty%2Fsnprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996c0cb05f747d94ff4d6e9329e702414f46f700/libiberty%2Fsnprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fsnprintf.c?ref=996c0cb05f747d94ff4d6e9329e702414f46f700", "patch": "@@ -1,5 +1,5 @@\n /* Implement the snprintf function.\n-   Copyright (C) 2003 Free Software Foundation, Inc.\n+   Copyright (C) 2003, 2011 Free Software Foundation, Inc.\n    Written by Kaveh R. Ghazi <ghazi@caip.rutgers.edu>.\n \n This file is part of the libiberty library.  This library is free\n@@ -25,7 +25,8 @@ the executable file might be covered by the GNU General Public License. */\n \n /*\n \n-@deftypefn Supplemental int snprintf (char *@var{buf}, size_t @var{n}, const char *@var{format}, ...)\n+@deftypefn Supplemental int snprintf (char *@var{buf}, size_t @var{n}, @\n+  const char *@var{format}, ...)\n \n This function is similar to @code{sprintf}, but it will write to\n @var{buf} at most @code{@var{n}-1} bytes of text, followed by a"}, {"sha": "12bfa8bbdcc97990d837b6e1280007481ea5c3b5", "filename": "libiberty/splay-tree.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996c0cb05f747d94ff4d6e9329e702414f46f700/libiberty%2Fsplay-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996c0cb05f747d94ff4d6e9329e702414f46f700/libiberty%2Fsplay-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fsplay-tree.c?ref=996c0cb05f747d94ff4d6e9329e702414f46f700", "patch": "@@ -1,6 +1,6 @@\n /* A splay-tree datatype.  \n    Copyright (C) 1998, 1999, 2000, 2001, 2009,\n-   2010 Free Software Foundation, Inc.\n+   2010, 2011 Free Software Foundation, Inc.\n    Contributed by Mark Mitchell (mark@markmitchell.com).\n \n This file is part of GNU CC.\n@@ -300,13 +300,13 @@ splay_tree_new_with_allocator (splay_tree_compare_fn compare_fn,\n \n /*\n \n-@deftypefn Supplemental splay_tree splay_tree_new_with_typed_alloc\n-(splay_tree_compare_fn @var{compare_fn},\n-splay_tree_delete_key_fn @var{delete_key_fn},\n-splay_tree_delete_value_fn @var{delete_value_fn},\n-splay_tree_allocate_fn @var{tree_allocate_fn},\n-splay_tree_allocate_fn @var{node_allocate_fn},\n-splay_tree_deallocate_fn @var{deallocate_fn},\n+@deftypefn Supplemental splay_tree splay_tree_new_with_typed_alloc @\n+(splay_tree_compare_fn @var{compare_fn}, @\n+splay_tree_delete_key_fn @var{delete_key_fn}, @\n+splay_tree_delete_value_fn @var{delete_value_fn}, @\n+splay_tree_allocate_fn @var{tree_allocate_fn}, @\n+splay_tree_allocate_fn @var{node_allocate_fn}, @\n+splay_tree_deallocate_fn @var{deallocate_fn}, @\n void * @var{allocate_data})\n \n This function creates a splay tree that uses two different allocators"}, {"sha": "83d54e60cb8edf5e3ed0f719325c1d61864ab026", "filename": "libiberty/stpncpy.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996c0cb05f747d94ff4d6e9329e702414f46f700/libiberty%2Fstpncpy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996c0cb05f747d94ff4d6e9329e702414f46f700/libiberty%2Fstpncpy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fstpncpy.c?ref=996c0cb05f747d94ff4d6e9329e702414f46f700", "patch": "@@ -1,5 +1,5 @@\n /* Implement the stpncpy function.\n-   Copyright (C) 2003 Free Software Foundation, Inc.\n+   Copyright (C) 2003, 2011 Free Software Foundation, Inc.\n    Written by Kaveh R. Ghazi <ghazi@caip.rutgers.edu>.\n \n This file is part of the libiberty library.\n@@ -20,7 +20,8 @@ Boston, MA 02110-1301, USA.  */\n \n /*\n \n-@deftypefn Supplemental char* stpncpy (char *@var{dst}, const char *@var{src}, size_t @var{len})\n+@deftypefn Supplemental char* stpncpy (char *@var{dst}, const char *@var{src}, @\n+  size_t @var{len})\n \n Copies the string @var{src} into @var{dst}, copying exactly @var{len}\n and padding with zeros if necessary.  If @var{len} < strlen(@var{src})"}, {"sha": "23f6df617562fed3c3b07ecb28361a5709a1a09c", "filename": "libiberty/strncmp.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996c0cb05f747d94ff4d6e9329e702414f46f700/libiberty%2Fstrncmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996c0cb05f747d94ff4d6e9329e702414f46f700/libiberty%2Fstrncmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fstrncmp.c?ref=996c0cb05f747d94ff4d6e9329e702414f46f700", "patch": "@@ -3,7 +3,8 @@\n \n /*\n \n-@deftypefn Supplemental int strncmp (const char *@var{s1}, const char *@var{s2}, size_t @var{n})\n+@deftypefn Supplemental int strncmp (const char *@var{s1}, @\n+  const char *@var{s2}, size_t @var{n})\n \n Compares the first @var{n} bytes of two strings, returning a value as\n @code{strcmp}."}, {"sha": "e4da2113f5b24798f2c54bae2aa18246782051d5", "filename": "libiberty/strtod.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996c0cb05f747d94ff4d6e9329e702414f46f700/libiberty%2Fstrtod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996c0cb05f747d94ff4d6e9329e702414f46f700/libiberty%2Fstrtod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fstrtod.c?ref=996c0cb05f747d94ff4d6e9329e702414f46f700", "patch": "@@ -1,5 +1,5 @@\n /* Implementation of strtod for systems with atof.\n-   Copyright (C) 1991, 1995, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 1991, 1995, 2002, 2011 Free Software Foundation, Inc.\n \n This file is part of the libiberty library.  This library is free\n software; you can redistribute it and/or modify it under the\n@@ -24,7 +24,8 @@ the executable file might be covered by the GNU General Public License. */\n \n /*\n \n-@deftypefn Supplemental double strtod (const char *@var{string}, char **@var{endptr})\n+@deftypefn Supplemental double strtod (const char *@var{string}, @\n+  char **@var{endptr})\n \n This ISO C function converts the initial portion of @var{string} to a\n @code{double}.  If @var{endptr} is not @code{NULL}, a pointer to the"}, {"sha": "bde5647c9a6b3d0821866373f681d49291e40f08", "filename": "libiberty/strtol.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996c0cb05f747d94ff4d6e9329e702414f46f700/libiberty%2Fstrtol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996c0cb05f747d94ff4d6e9329e702414f46f700/libiberty%2Fstrtol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fstrtol.c?ref=996c0cb05f747d94ff4d6e9329e702414f46f700", "patch": "@@ -30,8 +30,10 @@\n \n /*\n \n-@deftypefn Supplemental {long int} strtol (const char *@var{string}, char **@var{endptr}, int @var{base})\n-@deftypefnx Supplemental {unsigned long int} strtoul (const char *@var{string}, char **@var{endptr}, int @var{base})\n+@deftypefn Supplemental {long int} strtol (const char *@var{string}, @\n+  char **@var{endptr}, int @var{base})\n+@deftypefnx Supplemental {unsigned long int} strtoul (const char *@var{string}, @\n+  char **@var{endptr}, int @var{base})\n \n The @code{strtol} function converts the string in @var{string} to a\n long integer value according to the given @var{base}, which must be"}, {"sha": "85de5429fce644c9c49abd721cbd3265e37e897a", "filename": "libiberty/vasprintf.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996c0cb05f747d94ff4d6e9329e702414f46f700/libiberty%2Fvasprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996c0cb05f747d94ff4d6e9329e702414f46f700/libiberty%2Fvasprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fvasprintf.c?ref=996c0cb05f747d94ff4d6e9329e702414f46f700", "patch": "@@ -1,6 +1,6 @@\n /* Like vsprintf but provides a pointer to malloc'd storage, which must\n    be freed by the caller.\n-   Copyright (C) 1994, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 1994, 2003, 2011 Free Software Foundation, Inc.\n \n This file is part of the libiberty library.\n Libiberty is free software; you can redistribute it and/or\n@@ -44,7 +44,8 @@ int global_total_width;\n \n /*\n \n-@deftypefn Extension int vasprintf (char **@var{resptr}, const char *@var{format}, va_list @var{args})\n+@deftypefn Extension int vasprintf (char **@var{resptr}, @\n+  const char *@var{format}, va_list @var{args})\n \n Like @code{vsprintf}, but instead of passing a pointer to a buffer,\n you pass a pointer to a pointer.  This function will compute the size"}, {"sha": "c3193ac8196e162a782de72ad03921635805e9e6", "filename": "libiberty/vprintf.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996c0cb05f747d94ff4d6e9329e702414f46f700/libiberty%2Fvprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996c0cb05f747d94ff4d6e9329e702414f46f700/libiberty%2Fvprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fvprintf.c?ref=996c0cb05f747d94ff4d6e9329e702414f46f700", "patch": "@@ -1,8 +1,10 @@\n /*\n \n @deftypefn Supplemental int vprintf (const char *@var{format}, va_list @var{ap})\n-@deftypefnx Supplemental int vfprintf (FILE *@var{stream}, const char *@var{format}, va_list @var{ap})\n-@deftypefnx Supplemental int vsprintf (char *@var{str}, const char *@var{format}, va_list @var{ap})\n+@deftypefnx Supplemental int vfprintf (FILE *@var{stream}, @\n+  const char *@var{format}, va_list @var{ap})\n+@deftypefnx Supplemental int vsprintf (char *@var{str}, @\n+  const char *@var{format}, va_list @var{ap})\n \n These functions are the same as @code{printf}, @code{fprintf}, and\n @code{sprintf}, respectively, except that they are called with a"}, {"sha": "6c0afa6726cbc870643eb3aab4b48e0078ed719e", "filename": "libiberty/vsnprintf.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996c0cb05f747d94ff4d6e9329e702414f46f700/libiberty%2Fvsnprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996c0cb05f747d94ff4d6e9329e702414f46f700/libiberty%2Fvsnprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fvsnprintf.c?ref=996c0cb05f747d94ff4d6e9329e702414f46f700", "patch": "@@ -1,5 +1,5 @@\n /* Implement the vsnprintf function.\n-   Copyright (C) 2003, 2004, 2005 Free Software Foundation, Inc.\n+   Copyright (C) 2003, 2004, 2005, 2011 Free Software Foundation, Inc.\n    Written by Kaveh R. Ghazi <ghazi@caip.rutgers.edu>.\n \n This file is part of the libiberty library.  This library is free\n@@ -25,7 +25,8 @@ the executable file might be covered by the GNU General Public License. */\n \n /*\n \n-@deftypefn Supplemental int vsnprintf (char *@var{buf}, size_t @var{n}, const char *@var{format}, va_list @var{ap})\n+@deftypefn Supplemental int vsnprintf (char *@var{buf}, size_t @var{n}, @\n+  const char *@var{format}, va_list @var{ap})\n \n This function is similar to @code{vsprintf}, but it will write to\n @var{buf} at most @code{@var{n}-1} bytes of text, followed by a"}, {"sha": "aa56f0bf572bb71a52967878ddd3774cd7c9c1d2", "filename": "libiberty/xmemdup.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/996c0cb05f747d94ff4d6e9329e702414f46f700/libiberty%2Fxmemdup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/996c0cb05f747d94ff4d6e9329e702414f46f700/libiberty%2Fxmemdup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fxmemdup.c?ref=996c0cb05f747d94ff4d6e9329e702414f46f700", "patch": "@@ -4,7 +4,8 @@\n \n /*\n \n-@deftypefn Replacement void* xmemdup (void *@var{input}, size_t @var{copy_size}, size_t @var{alloc_size})\n+@deftypefn Replacement void* xmemdup (void *@var{input}, @\n+  size_t @var{copy_size}, size_t @var{alloc_size})\n \n Duplicates a region of memory without fail.  First, @var{alloc_size} bytes\n are allocated, then @var{copy_size} bytes from @var{input} are copied into"}]}