{"sha": "e9fecf0ecc861d657aacd9ba5142a393992d67c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTlmZWNmMGVjYzg2MWQ2NTdhYWNkOWJhNTE0MmEzOTM5OTJkNjdjMg==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2010-03-10T19:33:37Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2010-03-10T19:33:37Z"}, "message": "re PR c/43288 (ICE in function_and_variable_visibility, at ipa.c:415)\n\n\n\tPR c/43288\n\t* ipa.c (function_and_variable_visibility) Normalize COMMON bits.\n\t* varasm.c (get_variable_section): Don't do that here...\n\t(make_decl_rtl): ... and here.\n\t(do_assemble_alias): Produce decl RTL.\n\t(assemble_alias): Likewise.\n\n\t* gcc.dg/compile/pr43288.c: New test.\n\nFrom-SVN: r157366", "tree": {"sha": "34602e6c1f37225bd018fc35fc4b5af53b796857", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34602e6c1f37225bd018fc35fc4b5af53b796857"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9fecf0ecc861d657aacd9ba5142a393992d67c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9fecf0ecc861d657aacd9ba5142a393992d67c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9fecf0ecc861d657aacd9ba5142a393992d67c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9fecf0ecc861d657aacd9ba5142a393992d67c2/comments", "author": null, "committer": null, "parents": [{"sha": "7d8c1528861237b7fab2e8057e7cec9aeea83f8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d8c1528861237b7fab2e8057e7cec9aeea83f8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d8c1528861237b7fab2e8057e7cec9aeea83f8b"}], "stats": {"total": 80, "additions": 61, "deletions": 19}, "files": [{"sha": "12fb62697fe142411fda2455c3bb9a6a9cd76e31", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fecf0ecc861d657aacd9ba5142a393992d67c2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fecf0ecc861d657aacd9ba5142a393992d67c2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e9fecf0ecc861d657aacd9ba5142a393992d67c2", "patch": "@@ -1,3 +1,12 @@\n+2010-03-10  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR c/43288\n+\t* ipa.c (function_and_variable_visibility) Normalize COMMON bits.\n+\t* varasm.c (get_variable_section): Don't do that here...\n+\t(make_decl_rtl): ... and here.\n+\t(do_assemble_alias): Produce decl RTL.\n+\t(assemble_alias): Likewise.\n+\n 2010-03-10  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/43290"}, {"sha": "f81d41a4a288f4bc726ff64164c809e563dd9bbd", "filename": "gcc/ipa.c", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fecf0ecc861d657aacd9ba5142a393992d67c2/gcc%2Fipa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fecf0ecc861d657aacd9ba5142a393992d67c2/gcc%2Fipa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa.c?ref=e9fecf0ecc861d657aacd9ba5142a393992d67c2", "patch": "@@ -407,12 +407,38 @@ function_and_variable_visibility (bool whole_program)\n \t\t\t   && !DECL_EXTERNAL (node->decl)\n \t\t\t   && !node->local.externally_visible);\n     }\n+  for (vnode = varpool_nodes; vnode; vnode = vnode->next)\n+    {\n+      /* weak flag makes no sense on local variables.  */\n+      gcc_assert (!DECL_WEAK (vnode->decl)\n+      \t\t  || TREE_PUBLIC (vnode->decl) || DECL_EXTERNAL (vnode->decl));\n+      /* In several cases declarations can not be common:\n+\n+\t - when declaration has initializer\n+\t - when it is in weak\n+\t - when it has specific section\n+\t - when it resides in non-generic address space.\n+\t - if declaration is local, it will get into .local common section\n+\t   so common flag is not needed.  Frontends still produce these in\n+\t   certain cases, such as for:\n+\n+\t     static int a __attribute__ ((common))\n+\n+\t Canonicalize things here and clear the redundant flag.  */\n+      if (DECL_COMMON (vnode->decl)\n+\t  && (!(TREE_PUBLIC (vnode->decl) || DECL_EXTERNAL (vnode->decl))\n+\t      || (DECL_INITIAL (vnode->decl)\n+\t\t  && DECL_INITIAL (vnode->decl) != error_mark_node)\n+\t      || DECL_WEAK (vnode->decl)\n+\t      || DECL_SECTION_NAME (vnode->decl) != NULL\n+\t      || ! (ADDR_SPACE_GENERIC_P\n+\t\t    (TYPE_ADDR_SPACE (TREE_TYPE (vnode->decl))))))\n+\tDECL_COMMON (vnode->decl) = 0;\n+    }\n   for (vnode = varpool_nodes_queue; vnode; vnode = vnode->next_needed)\n     {\n       if (!vnode->finalized)\n         continue;\n-      gcc_assert ((!DECL_WEAK (vnode->decl) && !DECL_COMMON (vnode->decl))\n-      \t\t  || TREE_PUBLIC (vnode->decl) || DECL_EXTERNAL (vnode->decl));\n       if (vnode->needed\n \t  && (DECL_COMDAT (vnode->decl) || TREE_PUBLIC (vnode->decl))\n \t  && (!whole_program"}, {"sha": "ebabe972e109c05bcb56f8df757c23542f70fb7f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fecf0ecc861d657aacd9ba5142a393992d67c2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fecf0ecc861d657aacd9ba5142a393992d67c2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e9fecf0ecc861d657aacd9ba5142a393992d67c2", "patch": "@@ -1,3 +1,7 @@\n+2010-03-10  Jan Hubicka   <jh@suse.cz>\n+\n+\t* gcc.dg/compile/pr43288.c: New test.\n+\n 2010-03-10  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* g++.old-deja/g++.pt/asm1.C: Don't detect pic via looking for the\n@@ -6,7 +10,7 @@\n \t* gcc.c-torture/compile/20000804-1.c: Likewise.\n \t* gcc.target/i386/clobbers.c: Likewise.\n \n-2010-03-10  Tobias Burnus  <burnus@net-b.de\n+2010-03-10  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/43303\n \t* gfortran.dg/c_assoc_3.f90: New test."}, {"sha": "73af0d9ec0aa2c26188d43f0e370ef2ac396ef3a", "filename": "gcc/testsuite/gcc.c-torture/compile/pr43288.c", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fecf0ecc861d657aacd9ba5142a393992d67c2/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr43288.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fecf0ecc861d657aacd9ba5142a393992d67c2/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr43288.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr43288.c?ref=e9fecf0ecc861d657aacd9ba5142a393992d67c2", "patch": "@@ -0,0 +1 @@\n+static int a __attribute__ ((common));"}, {"sha": "6b8222f8e9a4454fd6f643ec95573a9bd3c09812", "filename": "gcc/varasm.c", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9fecf0ecc861d657aacd9ba5142a393992d67c2/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9fecf0ecc861d657aacd9ba5142a393992d67c2/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=e9fecf0ecc861d657aacd9ba5142a393992d67c2", "patch": "@@ -1174,12 +1174,13 @@ get_variable_section (tree decl, bool prefer_noswitch_p)\n   if (TREE_TYPE (decl) != error_mark_node)\n     as = TYPE_ADDR_SPACE (TREE_TYPE (decl));\n \n-  /* If the decl has been given an explicit section name, or it resides\n-     in a non-generic address space, then it isn't common, and shouldn't\n-     be handled as such.  */\n-  if (DECL_COMMON (decl) && DECL_SECTION_NAME (decl) == NULL\n-      && ADDR_SPACE_GENERIC_P (as))\n+  if (DECL_COMMON (decl))\n     {\n+      /* If the decl has been given an explicit section name, or it resides\n+\t in a non-generic address space, then it isn't common, and shouldn't\n+\t be handled as such.  */\n+      gcc_assert (DECL_SECTION_NAME (decl) == NULL\n+\t\t  && ADDR_SPACE_GENERIC_P (as));\n       if (DECL_THREAD_LOCAL_P (decl))\n \treturn tls_comm_section;\n       /* This cannot be common bss for an emulated TLS object without\n@@ -1434,15 +1435,16 @@ make_decl_rtl (tree decl)\n \n   /* Specifying a section attribute on a variable forces it into a\n      non-.bss section, and thus it cannot be common.  */\n-  if (TREE_CODE (decl) == VAR_DECL\n-      && DECL_SECTION_NAME (decl) != NULL_TREE\n-      && DECL_INITIAL (decl) == NULL_TREE\n-      && DECL_COMMON (decl))\n-    DECL_COMMON (decl) = 0;\n+  gcc_assert (!(TREE_CODE (decl) == VAR_DECL\n+\t      && DECL_SECTION_NAME (decl) != NULL_TREE\n+\t      && DECL_INITIAL (decl) == NULL_TREE\n+\t      && DECL_COMMON (decl))\n+\t      || !DECL_COMMON (decl));\n \n   /* Variables can't be both common and weak.  */\n-  if (TREE_CODE (decl) == VAR_DECL && DECL_WEAK (decl))\n-    DECL_COMMON (decl) = 0;\n+  gcc_assert (TREE_CODE (decl) != VAR_DECL\n+\t      || !DECL_WEAK (decl)\n+\t      || !DECL_COMMON (decl));\n \n   if (use_object_blocks_p () && use_blocks_for_decl_p (decl))\n     x = create_block_symbol (name, get_block_for_decl (decl), -1);\n@@ -5507,6 +5509,10 @@ do_assemble_alias (tree decl, tree target)\n   if (TREE_ASM_WRITTEN (decl))\n     return;\n \n+  /* We must force creation of DECL_RTL for debug info generation, even though\n+     we don't use it here.  */\n+  make_decl_rtl (decl);\n+\n   TREE_ASM_WRITTEN (decl) = 1;\n   TREE_ASM_WRITTEN (DECL_ASSEMBLER_NAME (decl)) = 1;\n \n@@ -5724,10 +5730,6 @@ assemble_alias (tree decl, tree target)\n # endif\n #endif\n     }\n-\n-  /* We must force creation of DECL_RTL for debug info generation, even though\n-     we don't use it here.  */\n-  make_decl_rtl (decl);\n   TREE_USED (decl) = 1;\n \n   /* A quirk of the initial implementation of aliases required that the user"}]}