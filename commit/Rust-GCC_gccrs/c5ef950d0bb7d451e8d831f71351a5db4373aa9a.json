{"sha": "c5ef950d0bb7d451e8d831f71351a5db4373aa9a", "node_id": "C_kwDOANBUbNoAKGM1ZWY5NTBkMGJiN2Q0NTFlOGQ4MzFmNzEzNTFhNWRiNDM3M2FhOWE", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-12-14T12:48:05Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-12-14T12:48:05Z"}, "message": "c++: remove COMPOUND_EXPR_OVERLOADED flag\n\nThis flag is never set because non-dependent COMPOUND_EXPRs that resolve\nto an overload are expressed as a CALL_EXPR at template definition time\n(in build_x_compound_expr) ever since r6-5772.\n\ngcc/cp/ChangeLog:\n\n\t* cp-tree.h (COMPOUND_EXPR_OVERLOADED): Remove.\n\t* pt.c (build_non_dependent_expr): Don't inspect the flag.\n\t* tree.c (build_min_non_dep): Don't set the flag.", "tree": {"sha": "8e6d320972b602dc5858647b6990d3112fc2583b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e6d320972b602dc5858647b6990d3112fc2583b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c5ef950d0bb7d451e8d831f71351a5db4373aa9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5ef950d0bb7d451e8d831f71351a5db4373aa9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5ef950d0bb7d451e8d831f71351a5db4373aa9a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5ef950d0bb7d451e8d831f71351a5db4373aa9a/comments", "author": null, "committer": null, "parents": [{"sha": "dff8ae8e839a5102aff266c8246864b610c066c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dff8ae8e839a5102aff266c8246864b610c066c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dff8ae8e839a5102aff266c8246864b610c066c9"}], "stats": {"total": 14, "additions": 1, "deletions": 13}, "files": [{"sha": "e4330fb1f8bed69adce815944d5e310dba1a7d5f", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5ef950d0bb7d451e8d831f71351a5db4373aa9a/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5ef950d0bb7d451e8d831f71351a5db4373aa9a/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=c5ef950d0bb7d451e8d831f71351a5db4373aa9a", "patch": "@@ -404,7 +404,6 @@ extern GTY(()) tree cp_global_trees[CPTI_MAX];\n       NEW_EXPR_USE_GLOBAL (in NEW_EXPR).\n       COND_EXPR_IS_VEC_DELETE (in COND_EXPR).\n       DELETE_EXPR_USE_GLOBAL (in DELETE_EXPR).\n-      COMPOUND_EXPR_OVERLOADED (in COMPOUND_EXPR).\n       CLEANUP_P (in TRY_BLOCK)\n       AGGR_INIT_VIA_CTOR_P (in AGGR_INIT_EXPR)\n       PTRMEM_OK_P (in ADDR_EXPR, OFFSET_REF, SCOPE_REF)\n@@ -4015,11 +4014,6 @@ struct GTY(()) lang_decl {\n #define CALL_OR_AGGR_INIT_CHECK(NODE) \\\n   TREE_CHECK2 ((NODE), CALL_EXPR, AGGR_INIT_EXPR)\n \n-/* Indicates that this is a non-dependent COMPOUND_EXPR which will\n-   resolve to a function call.  */\n-#define COMPOUND_EXPR_OVERLOADED(NODE) \\\n-  TREE_LANG_FLAG_0 (COMPOUND_EXPR_CHECK (NODE))\n-\n /* In a CALL_EXPR appearing in a template, true if Koenig lookup\n    should be performed at instantiation time.  */\n #define KOENIG_LOOKUP_P(NODE) TREE_LANG_FLAG_0 (CALL_EXPR_CHECK (NODE))"}, {"sha": "cbdb4b566aae8db89ad1f5ede18b429acb008abc", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5ef950d0bb7d451e8d831f71351a5db4373aa9a/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5ef950d0bb7d451e8d831f71351a5db4373aa9a/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=c5ef950d0bb7d451e8d831f71351a5db4373aa9a", "patch": "@@ -28373,8 +28373,7 @@ build_non_dependent_expr (tree expr)\n \t\t    ? build_non_dependent_expr (TREE_OPERAND (expr, 1))\n \t\t    : build_non_dependent_expr (TREE_OPERAND (expr, 0))),\n \t\t   build_non_dependent_expr (TREE_OPERAND (expr, 2)));\n-  if (TREE_CODE (expr) == COMPOUND_EXPR\n-      && !COMPOUND_EXPR_OVERLOADED (expr))\n+  if (TREE_CODE (expr) == COMPOUND_EXPR)\n     return build2 (COMPOUND_EXPR,\n \t\t   TREE_TYPE (expr),\n \t\t   TREE_OPERAND (expr, 0),"}, {"sha": "f6f7927f293f9b92be099235b74dc3b2f25b5efa", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5ef950d0bb7d451e8d831f71351a5db4373aa9a/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5ef950d0bb7d451e8d831f71351a5db4373aa9a/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=c5ef950d0bb7d451e8d831f71351a5db4373aa9a", "patch": "@@ -3577,11 +3577,6 @@ build_min_non_dep (enum tree_code code, tree non_dep, ...)\n   for (i = 0; i < length; i++)\n     TREE_OPERAND (t, i) = va_arg (p, tree);\n \n-  if (code == COMPOUND_EXPR && TREE_CODE (non_dep) != COMPOUND_EXPR)\n-    /* This should not be considered a COMPOUND_EXPR, because it\n-       resolves to an overload.  */\n-    COMPOUND_EXPR_OVERLOADED (t) = 1;\n-\n   va_end (p);\n   return convert_from_reference (t);\n }"}]}