{"sha": "8571e492c885a36b9eb04ff38033a53158881aa2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODU3MWU0OTJjODg1YTM2YjllYjA0ZmYzODAzM2E1MzE1ODg4MWFhMg==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@cygnus.co.uk", "date": "1999-12-02T11:27:31Z"}, "committer": {"name": "Bernd Schmidt", "email": "crux@gcc.gnu.org", "date": "1999-12-02T11:27:31Z"}, "message": "Prevent invalid transformations\n\nFrom-SVN: r30758", "tree": {"sha": "77565135ad7321c6fba3bc78f157510f95eec563", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77565135ad7321c6fba3bc78f157510f95eec563"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8571e492c885a36b9eb04ff38033a53158881aa2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8571e492c885a36b9eb04ff38033a53158881aa2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8571e492c885a36b9eb04ff38033a53158881aa2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8571e492c885a36b9eb04ff38033a53158881aa2/comments", "author": null, "committer": null, "parents": [{"sha": "574531f24574d21917a71200ce3ac7850c6d4595", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/574531f24574d21917a71200ce3ac7850c6d4595", "html_url": "https://github.com/Rust-GCC/gccrs/commit/574531f24574d21917a71200ce3ac7850c6d4595"}], "stats": {"total": 78, "additions": 71, "deletions": 7}, "files": [{"sha": "06624329708175292d5530bf6d1e140c44e8c3ef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8571e492c885a36b9eb04ff38033a53158881aa2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8571e492c885a36b9eb04ff38033a53158881aa2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8571e492c885a36b9eb04ff38033a53158881aa2", "patch": "@@ -1,3 +1,11 @@\n+1999-12-02  Bernd Schmidt  <bernds@cygnus.co.uk>\n+\n+\t* loop.c (note_reg_stored): New function.\n+\t(struct note_reg_stored_arg): New structure.\n+\t(try_copy_prop): Change to be more conservative; only replace within\n+\tone extended basic block and stop replacing if a store to the\n+\treplacement reg is seen.\n+\n 1999-12-02  Nick Clifton  <nickc@cygnus.com>\n \n \t* config/fp-bit.c: Initialise all fields of the NAN"}, {"sha": "5921e5ef70d4cd73a0839cefe3bd2ff483ccf29a", "filename": "gcc/loop.c", "status": "modified", "additions": 63, "deletions": 7, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8571e492c885a36b9eb04ff38033a53158881aa2/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8571e492c885a36b9eb04ff38033a53158881aa2/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=8571e492c885a36b9eb04ff38033a53158881aa2", "patch": "@@ -339,6 +339,7 @@ static void load_mems PROTO((rtx, rtx, rtx, rtx));\n static int insert_loop_mem PROTO((rtx *, void *));\n static int replace_loop_mem PROTO((rtx *, void *));\n static int replace_loop_reg PROTO((rtx *, void *));\n+static void note_reg_stored PROTO((rtx, rtx, void *));\n static void try_copy_prop PROTO((rtx, rtx, rtx, rtx, int));\n static int replace_label PROTO((rtx *, void *));\n \n@@ -9944,6 +9945,25 @@ load_mems (scan_start, end, loop_top, start)\n     }\n }\n \n+/* For communication between note_reg_stored and its caller.  */\n+struct note_reg_stored_arg\n+{\n+  int set_seen;\n+  rtx reg;\n+};\n+\n+/* Called via note_stores, record in SET_SEEN whether X, which is written,\n+   is equal to ARG.  */\n+static void\n+note_reg_stored (x, setter, arg)\n+     rtx x, setter;\n+     void *arg;\n+{\n+  struct note_reg_stored_arg *t = (struct note_reg_stored_arg *)arg;\n+  if (t->reg == x)\n+    t->set_seen = 1;\n+}\n+\n /* Try to replace every occurrence of pseudo REGNO with REPLACEMENT.\n    There must be exactly one insn that sets this pseudo; it will be\n    deleted if all replacements succeed and we can prove that the register\n@@ -9954,43 +9974,79 @@ try_copy_prop (scan_start, loop_top, end, replacement, regno)\n      rtx scan_start, loop_top, end, replacement;\n      int regno;\n {\n+  /* This is the reg that we are copying from.  */\n+  rtx reg_rtx = regno_reg_rtx[regno];\n   rtx init_insn = 0;\n   rtx insn;\n+  /* These help keep track of whether we replaced all uses of the reg.  */\n+  int replaced_last = 0;\n+  int store_is_first = 0;\n+\n   for (insn = next_insn_in_loop (scan_start, scan_start, end, loop_top);\n        insn != NULL_RTX;\n        insn = next_insn_in_loop (insn, scan_start, end, loop_top))\n     {\n       rtx set;\n-      rtx array[3];\n \n-      array[0] = regno_reg_rtx[regno];\n-      array[1] = replacement;\n-      array[2] = insn;\n+      /* Only substitute within one extended basic block from the initializing\n+         insn.  */\n+      if (GET_CODE (insn) == CODE_LABEL && init_insn)\n+\tbreak;\n \n       if (GET_RTX_CLASS (GET_CODE (insn)) != 'i')\n \tcontinue;\n+\n+      /* Is this the initializing insn?  */\n       set = single_set (insn);\n       if (set\n \t  && GET_CODE (SET_DEST (set)) == REG\n \t  && REGNO (SET_DEST (set)) == regno)\n \t{\n \t  if (init_insn)\n \t    abort ();\n+\n \t  init_insn = insn;\n+\t  if (REGNO_FIRST_UID (regno) == INSN_UID (insn))\n+\t    store_is_first = 1;\n+\t}\n+\n+      /* Only substitute after seeing the initializing insn.  */\n+      if (init_insn && insn != init_insn)\n+\t{\t\n+\t  struct note_reg_stored_arg arg;\n+\t  rtx array[3];\n+\t  array[0] = reg_rtx;\n+\t  array[1] = replacement;\n+\t  array[2] = insn;\n+\n+\t  for_each_rtx (&insn, replace_loop_reg, array);\n+\t  if (REGNO_LAST_UID (regno) == INSN_UID (insn))\n+\t    replaced_last = 1;\n+\n+\t  /* Stop replacing when REPLACEMENT is modified.  */\n+\t  arg.reg = replacement;\n+\t  arg.set_seen = 0;\n+\t  note_stores (PATTERN (insn), note_reg_stored, &arg);\n+\t  if (arg.set_seen)\n+\t    break;\n \t}\n-      for_each_rtx (&insn, replace_loop_reg, array);\n     }\n   if (! init_insn)\n     abort ();\n   if (apply_change_group ())\n     {\n-      if (uid_luid[REGNO_LAST_UID (regno)] < INSN_LUID (end))\n+      if (loop_dump_stream)\n+\tfprintf (loop_dump_stream, \"  Replaced reg %d\", regno);\n+      if (store_is_first && replaced_last)\n \t{\n \t  PUT_CODE (init_insn, NOTE);\n \t  NOTE_LINE_NUMBER (init_insn) = NOTE_INSN_DELETED;\n+\t  if (loop_dump_stream)\n+\t    fprintf (loop_dump_stream, \", deleting init_insn (%d)\",\n+\t\t     INSN_UID (init_insn));\n \t}\n       if (loop_dump_stream)\n-\tfprintf (loop_dump_stream, \"  Replaced reg %d.\\n\", regno);\n+\tfprintf (loop_dump_stream, \".\\n\");\n     }\n }\n "}]}