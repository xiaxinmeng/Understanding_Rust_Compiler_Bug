{"sha": "493ba8208e0c824a582669ab5ec9c1ed901040d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDkzYmE4MjA4ZTBjODI0YTU4MjY2OWFiNWVjOWMxZWQ5MDEwNDBkMw==", "commit": {"author": {"name": "Louis Krupp", "email": "louis.krupp@zoho.com", "date": "2016-09-18T05:52:23Z"}, "committer": {"name": "Louis Krupp", "email": "lkrupp@gcc.gnu.org", "date": "2016-09-18T05:52:23Z"}, "message": "re PR fortran/68078 (segfault with allocate and stat for derived types with default initialization)\n\n2016-09-17  Louis Krupp  <louis.krupp@gmail.com>\n\n\tPR fortran/68078\n\t* gfortran.dg/pr68078.f90: New test.\n\t* gfortran.dg/set_vm_limit.c: New, called by pr68078.\n\n2016_09_17  Louis Krupp  <louis.krupp@zoho.com>\n\n\tPR fortran/68078\n\t* resolve.c (resolve_allocate_expr): Check that derived type\n\tpointer, object or array has been successfully allocated before\n\tinitializing.\n\nFrom-SVN: r240219", "tree": {"sha": "ecc284c782e061b44ed2d910c834a450e9651efa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ecc284c782e061b44ed2d910c834a450e9651efa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/493ba8208e0c824a582669ab5ec9c1ed901040d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/493ba8208e0c824a582669ab5ec9c1ed901040d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/493ba8208e0c824a582669ab5ec9c1ed901040d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/493ba8208e0c824a582669ab5ec9c1ed901040d3/comments", "author": null, "committer": null, "parents": [{"sha": "ee569f061ce01436731660ef6e4654e4a27eb35f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee569f061ce01436731660ef6e4654e4a27eb35f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee569f061ce01436731660ef6e4654e4a27eb35f"}], "stats": {"total": 119, "additions": 111, "deletions": 8}, "files": [{"sha": "611699f3ac2efcefd479a111947a82b040b9e1d8", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/493ba8208e0c824a582669ab5ec9c1ed901040d3/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/493ba8208e0c824a582669ab5ec9c1ed901040d3/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=493ba8208e0c824a582669ab5ec9c1ed901040d3", "patch": "@@ -1,3 +1,10 @@\n+2016_09_17  Louis Krupp  <louis.krupp@zoho.com>\n+\n+\tPR fortran/68078\n+\t* resolve.c (resolve_allocate_expr): Check that derived type\n+\tpointer, object or array has been successfully allocated before\n+\tinitializing.\n+\n 2016-09-16  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/77612"}, {"sha": "037c2fe74e0f2b519e0943ba4aa37e1ec9a4dfd0", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 30, "deletions": 8, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/493ba8208e0c824a582669ab5ec9c1ed901040d3/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/493ba8208e0c824a582669ab5ec9c1ed901040d3/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=493ba8208e0c824a582669ab5ec9c1ed901040d3", "patch": "@@ -6928,6 +6928,35 @@ conformable_arrays (gfc_expr *e1, gfc_expr *e2)\n   return true;\n }\n \n+static void\n+cond_init (gfc_code *code, gfc_expr *e, int pointer, gfc_expr *init_e)\n+{\n+  gfc_code *block;\n+  gfc_expr *cond;\n+  gfc_code *init_st;\n+  gfc_expr *e_to_init = gfc_expr_to_initialize (e);\n+\n+  cond = pointer\n+    ? gfc_build_intrinsic_call (gfc_current_ns, GFC_ISYM_ASSOCIATED,\n+\t\"associated\", code->loc, 2, gfc_copy_expr (e_to_init), NULL)\n+    : gfc_build_intrinsic_call (gfc_current_ns, GFC_ISYM_ALLOCATED,\n+\t\"allocated\", code->loc, 1, gfc_copy_expr (e_to_init));\n+\n+  init_st = gfc_get_code (EXEC_INIT_ASSIGN);\n+  init_st->loc = code->loc;\n+  init_st->expr1 = e_to_init;\n+  init_st->expr2 = init_e;\n+\n+  block = gfc_get_code (EXEC_IF);\n+  block->loc = code->loc;\n+  block->block = gfc_get_code (EXEC_IF);\n+  block->block->loc = code->loc;\n+  block->block->expr1 = cond;\n+  block->block->next = init_st;\n+  block->next = code->next;\n+\n+  code->next = block;\n+}\n \n /* Resolve the expression in an ALLOCATE statement, doing the additional\n    checks to see whether the expression is OK or not.  The expression must\n@@ -7193,14 +7222,7 @@ resolve_allocate_expr (gfc_expr *e, gfc_code *code, bool *array_alloc_wo_spec)\n \tts = ts.u.derived->components->ts;\n \n       if (gfc_bt_struct (ts.type) && (init_e = gfc_default_initializer (&ts)))\n-\t{\n-\t  gfc_code *init_st = gfc_get_code (EXEC_INIT_ASSIGN);\n-\t  init_st->loc = code->loc;\n-\t  init_st->expr1 = gfc_expr_to_initialize (e);\n-\t  init_st->expr2 = init_e;\n-\t  init_st->next = code->next;\n-\t  code->next = init_st;\n-\t}\n+\tcond_init (code, e, pointer, init_e);\n     }\n   else if (code->expr3->mold && code->expr3->ts.type == BT_DERIVED)\n     {"}, {"sha": "6e65edf69186e123159be4648d7813057759f644", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/493ba8208e0c824a582669ab5ec9c1ed901040d3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/493ba8208e0c824a582669ab5ec9c1ed901040d3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=493ba8208e0c824a582669ab5ec9c1ed901040d3", "patch": "@@ -1,3 +1,9 @@\n+2016-09-17  Louis Krupp  <louis.krupp@gmail.com>\n+\n+\tPR fortran/68078\n+\t* gfortran.dg/pr68078.f90: New test.\n+\t* gfortran.dg/set_vm_limit.c: New, called by pr68078.\n+\n 2016-09-16  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \tPR target/77613"}, {"sha": "4a501840447d84b237e7ce428da1e01b28d0d532", "filename": "gcc/testsuite/gfortran.dg/pr68078.f90", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/493ba8208e0c824a582669ab5ec9c1ed901040d3/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr68078.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/493ba8208e0c824a582669ab5ec9c1ed901040d3/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr68078.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr68078.f90?ref=493ba8208e0c824a582669ab5ec9c1ed901040d3", "patch": "@@ -0,0 +1,46 @@\n+! { dg-do run }\n+! { dg-additional-sources set_vm_limit.c }\n+\n+USE :: ISO_C_BINDING !, only: C_INT\n+IMPLICIT NONE\n+\n+INTERFACE\n+  SUBROUTINE set_vm_limit(n) bind(C)\n+  import\n+  integer(C_INT), value, intent(in) :: n\n+  END SUBROUTINE set_vm_limit\n+END INTERFACE\n+\n+TYPE foo\n+  INTEGER, DIMENSION(10000) :: data = 42\n+END TYPE\n+TYPE(foo), POINTER :: foo_ptr\n+TYPE(foo), ALLOCATABLE :: foo_obj\n+TYPE(foo), ALLOCATABLE, DIMENSION(:) :: foo_array\n+\n+INTEGER istat\n+\n+CALL set_vm_limit(1000000)\n+\n+DO\n+  ALLOCATE(foo_ptr, stat = istat)\n+  IF (istat .NE. 0) THEN\n+    PRINT *, \"foo_ptr allocation failed\"\n+    EXIT\n+  ENDIF\n+ENDDO\n+\n+ALLOCATE(foo_obj, stat = istat)\n+IF (istat .NE. 0) THEN\n+  PRINT *, \"foo_obj allocation failed\"\n+ENDIF\n+\n+ALLOCATE(foo_array(5), stat = istat)\n+IF (istat .NE. 0) THEN\n+  PRINT *, \"foo_array allocation failed\"\n+ENDIF\n+\n+END\n+! { dg-output \" *foo_ptr allocation failed(\\n|\\r\\n|\\r)\" }\n+! { dg-output \" *foo_obj allocation failed(\\n|\\r\\n|\\r)\" }\n+! { dg-output \" *foo_array allocation failed(\\n|\\r\\n|\\r)\" }"}, {"sha": "30c4b43e0ed27b3882981288aa582669e293f8eb", "filename": "gcc/testsuite/gfortran.dg/set_vm_limit.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/493ba8208e0c824a582669ab5ec9c1ed901040d3/gcc%2Ftestsuite%2Fgfortran.dg%2Fset_vm_limit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/493ba8208e0c824a582669ab5ec9c1ed901040d3/gcc%2Ftestsuite%2Fgfortran.dg%2Fset_vm_limit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fset_vm_limit.c?ref=493ba8208e0c824a582669ab5ec9c1ed901040d3", "patch": "@@ -0,0 +1,22 @@\n+/* Called by pr68078. */\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <sys/time.h>\n+#include <sys/resource.h>\n+\n+void\n+set_vm_limit (int vm_limit)\n+{\n+  struct rlimit rl = { vm_limit, RLIM_INFINITY };\n+  int r;\n+\n+  r = setrlimit (RLIMIT_AS, &rl);\n+  if (r)\n+    {\n+      perror (\"set_vm_limit\");\n+      exit (1);\n+    }\n+\n+  return;\n+}"}]}