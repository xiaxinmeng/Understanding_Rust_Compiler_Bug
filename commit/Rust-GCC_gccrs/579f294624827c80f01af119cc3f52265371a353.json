{"sha": "579f294624827c80f01af119cc3f52265371a353", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTc5ZjI5NDYyNDgyN2M4MGYwMWFmMTE5Y2MzZjUyMjY1MzcxYTM1Mw==", "commit": {"author": {"name": "Trevor Saunders", "email": "tbsaunde+gcc@tbsaunde.org", "date": "2015-10-11T00:47:52Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2015-10-11T00:47:52Z"}, "message": "always define INITIAL_FRAME_ADDRESS_RTX\n\ngcc/ChangeLog:\n\n2015-10-10  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n\n\t* builtins.c (expand_builtin_return_addr): Adjust.\n\t* defaults.h (INITIAL_FRAME_ADDRESS_RTX): New default definition.\n\nFrom-SVN: r228685", "tree": {"sha": "958aebb2d2c94f1f98bea8a75d49e20cf70530c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/958aebb2d2c94f1f98bea8a75d49e20cf70530c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/579f294624827c80f01af119cc3f52265371a353", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/579f294624827c80f01af119cc3f52265371a353", "html_url": "https://github.com/Rust-GCC/gccrs/commit/579f294624827c80f01af119cc3f52265371a353", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/579f294624827c80f01af119cc3f52265371a353/comments", "author": null, "committer": null, "parents": [{"sha": "9c02b29a8734d902ba76096f4acdd3dfb5aa7292", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c02b29a8734d902ba76096f4acdd3dfb5aa7292", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c02b29a8734d902ba76096f4acdd3dfb5aa7292"}], "stats": {"total": 50, "additions": 28, "deletions": 22}, "files": [{"sha": "5da4a5dd09f04383bb083a02946afe5b6be5abaa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/579f294624827c80f01af119cc3f52265371a353/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/579f294624827c80f01af119cc3f52265371a353/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=579f294624827c80f01af119cc3f52265371a353", "patch": "@@ -1,3 +1,8 @@\n+2015-10-10  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n+\n+\t* builtins.c (expand_builtin_return_addr): Adjust.\n+\t* defaults.h (INITIAL_FRAME_ADDRESS_RTX): New default definition.\n+\n 2015-10-10  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* tree.c (type_with_interoperable_signedness): New."}, {"sha": "3bbe763b0314fdb9ec149f5d4b740cc9555c39a8", "filename": "gcc/builtins.c", "status": "modified", "additions": 19, "deletions": 22, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/579f294624827c80f01af119cc3f52265371a353/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/579f294624827c80f01af119cc3f52265371a353/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=579f294624827c80f01af119cc3f52265371a353", "patch": "@@ -761,31 +761,28 @@ static rtx\n expand_builtin_return_addr (enum built_in_function fndecl_code, int count)\n {\n   int i;\n-\n-#ifdef INITIAL_FRAME_ADDRESS_RTX\n   rtx tem = INITIAL_FRAME_ADDRESS_RTX;\n-#else\n-  rtx tem;\n-\n-  /* For a zero count with __builtin_return_address, we don't care what\n-     frame address we return, because target-specific definitions will\n-     override us.  Therefore frame pointer elimination is OK, and using\n-     the soft frame pointer is OK.\n-\n-     For a nonzero count, or a zero count with __builtin_frame_address,\n-     we require a stable offset from the current frame pointer to the\n-     previous one, so we must use the hard frame pointer, and\n-     we must disable frame pointer elimination.  */\n-  if (count == 0 && fndecl_code == BUILT_IN_RETURN_ADDRESS)\n-    tem = frame_pointer_rtx;\n-  else\n-    {\n-      tem = hard_frame_pointer_rtx;\n+  if (tem == NULL_RTX)\n+    {\n+      /* For a zero count with __builtin_return_address, we don't care what\n+\t frame address we return, because target-specific definitions will\n+\t override us.  Therefore frame pointer elimination is OK, and using\n+\t the soft frame pointer is OK.\n+\n+\t For a nonzero count, or a zero count with __builtin_frame_address,\n+\t we require a stable offset from the current frame pointer to the\n+\t previous one, so we must use the hard frame pointer, and\n+\t we must disable frame pointer elimination.  */\n+      if (count == 0 && fndecl_code == BUILT_IN_RETURN_ADDRESS)\n+\ttem = frame_pointer_rtx;\n+      else\n+\t{\n+\t  tem = hard_frame_pointer_rtx;\n \n-      /* Tell reload not to eliminate the frame pointer.  */\n-      crtl->accesses_prior_frames = 1;\n+\t  /* Tell reload not to eliminate the frame pointer.  */\n+\t  crtl->accesses_prior_frames = 1;\n+\t}\n     }\n-#endif\n \n   /* Some machines need special handling before we can access\n      arbitrary frames.  For example, on the SPARC, we must first flush"}, {"sha": "c4d953622be6b5620345b73a29de3ae5a0029aa6", "filename": "gcc/defaults.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/579f294624827c80f01af119cc3f52265371a353/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/579f294624827c80f01af119cc3f52265371a353/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=579f294624827c80f01af119cc3f52265371a353", "patch": "@@ -1277,6 +1277,10 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define CONSTANT_ALIGNMENT(EXP, ALIGN) ALIGN\n #endif\n \n+#ifndef INITIAL_FRAME_ADDRESS_RTX\n+#define INITIAL_FRAME_ADDRESS_RTX NULL\n+#endif\n+\n #ifdef GCC_INSN_FLAGS_H\n /* Dependent default target macro definitions\n "}]}