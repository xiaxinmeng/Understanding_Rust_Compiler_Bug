{"sha": "93e452edc601b55b9dab9f74327acebb8cd9fecf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTNlNDUyZWRjNjAxYjU1YjlkYWI5Zjc0MzI3YWNlYmI4Y2Q5ZmVjZg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-01-20T14:42:20Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-01-20T14:42:20Z"}, "message": "re PR middle-end/47370 (error: invalid first operand of MEM_REF)\n\n2011-01-20  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/47370\n\t* tree-inline.c (remap_gimple_op_r): Recurse manually for\n\tthe pointer operand of MEM_REFs.\n\n\t* gcc.dg/torture/pr47370.c: New testcase.\n\nFrom-SVN: r169055", "tree": {"sha": "0f55aae6dc629b463d8a9ea852a6aebef308a6ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f55aae6dc629b463d8a9ea852a6aebef308a6ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93e452edc601b55b9dab9f74327acebb8cd9fecf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93e452edc601b55b9dab9f74327acebb8cd9fecf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93e452edc601b55b9dab9f74327acebb8cd9fecf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93e452edc601b55b9dab9f74327acebb8cd9fecf/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "28fc44f389e4cf21f2d05312badde13b00ab25b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28fc44f389e4cf21f2d05312badde13b00ab25b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28fc44f389e4cf21f2d05312badde13b00ab25b6"}], "stats": {"total": 122, "additions": 75, "deletions": 47}, "files": [{"sha": "d7d4eb485bdbfb3f3a9b75e213136e7c48c68434", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93e452edc601b55b9dab9f74327acebb8cd9fecf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93e452edc601b55b9dab9f74327acebb8cd9fecf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=93e452edc601b55b9dab9f74327acebb8cd9fecf", "patch": "@@ -1,3 +1,9 @@\n+2011-01-20  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/47370\n+\t* tree-inline.c (remap_gimple_op_r): Recurse manually for\n+\tthe pointer operand of MEM_REFs.\n+\n 2011-01-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/46130"}, {"sha": "336d1e58faf6953226ee256f2fc4c521d160f5e2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93e452edc601b55b9dab9f74327acebb8cd9fecf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93e452edc601b55b9dab9f74327acebb8cd9fecf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=93e452edc601b55b9dab9f74327acebb8cd9fecf", "patch": "@@ -1,3 +1,8 @@\n+2011-01-20  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/47370\n+\t* gcc.dg/torture/pr47370.c: New testcase.\n+\n 2011-01-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/46130"}, {"sha": "ff71f0964a1974259c15481ca3ac022806a5e9f8", "filename": "gcc/testsuite/gcc.dg/torture/pr47370.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93e452edc601b55b9dab9f74327acebb8cd9fecf/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr47370.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93e452edc601b55b9dab9f74327acebb8cd9fecf/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr47370.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr47370.c?ref=93e452edc601b55b9dab9f74327acebb8cd9fecf", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+\n+struct S { int s; };\n+\n+void\n+foo (void)\n+{\n+  for (;;)\n+    ;\n+}\n+\n+struct S\n+bar (void)\n+{\n+  struct S s = { 99 };\n+  return s;\n+}\n+\n+void\n+baz (int i)\n+{\n+  struct S s[1];\n+  s[0] = bar ();\n+  bar ();\n+  foo ();\n+}\n+"}, {"sha": "24a6dd023735b028151ef33e9fa7f2a047d31a2f", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 37, "deletions": 47, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93e452edc601b55b9dab9f74327acebb8cd9fecf/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93e452edc601b55b9dab9f74327acebb8cd9fecf/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=93e452edc601b55b9dab9f74327acebb8cd9fecf", "patch": "@@ -811,57 +811,47 @@ remap_gimple_op_r (tree *tp, int *walk_subtrees, void *data)\n \t knows not to copy VAR_DECLs, etc., so this is safe.  */\n       if (TREE_CODE (*tp) == MEM_REF)\n \t{\n-\t  /* We need to re-canonicalize MEM_REFs from inline substitutions\n-\t     that can happen when a pointer argument is an ADDR_EXPR.  */\n-\t  tree decl = TREE_OPERAND (*tp, 0);\n-\t  tree *n;\n-\n-          /* See remap_ssa_name.  */\n-          if (TREE_CODE (decl) == SSA_NAME\n-              && TREE_CODE (SSA_NAME_VAR (decl)) == RESULT_DECL\n-              && id->transform_return_to_modify)\n-            decl = SSA_NAME_VAR (decl);\n+\t  tree ptr = TREE_OPERAND (*tp, 0);\n+\t  tree old = *tp;\n+\t  tree tem;\n \n-\t  n = (tree *) pointer_map_contains (id->decl_map, decl);\n-\t  if (n)\n+\t  /* We need to re-canonicalize MEM_REFs from inline substitutions\n+\t     that can happen when a pointer argument is an ADDR_EXPR.\n+\t     Recurse here manually to allow that.  */\n+\t  walk_tree (&ptr, remap_gimple_op_r, data, NULL);\n+\t  if ((tem = maybe_fold_offset_to_reference (EXPR_LOCATION (*tp),\n+\t\t\t\t\t\t     ptr,\n+\t\t\t\t\t\t     TREE_OPERAND (*tp, 1),\n+\t\t\t\t\t\t     TREE_TYPE (*tp)))\n+\t      && TREE_THIS_VOLATILE (tem) == TREE_THIS_VOLATILE (old))\n \t    {\n-\t      tree old = *tp;\n-\t      tree ptr = unshare_expr (*n);\n-\t      tree tem;\n-\t      if ((tem = maybe_fold_offset_to_reference (EXPR_LOCATION (*tp),\n-\t\t\t\t\t\t\t ptr,\n-\t\t\t\t\t\t\t TREE_OPERAND (*tp, 1),\n-\t\t\t\t\t\t\t TREE_TYPE (*tp)))\n-\t\t  && TREE_THIS_VOLATILE (tem) == TREE_THIS_VOLATILE (old))\n-\t\t{\n-\t\t  tree *tem_basep = &tem;\n-\t\t  while (handled_component_p (*tem_basep))\n-\t\t    tem_basep = &TREE_OPERAND (*tem_basep, 0);\n-\t\t  if (TREE_CODE (*tem_basep) == MEM_REF)\n-\t\t    *tem_basep\n-\t\t      = build2 (MEM_REF, TREE_TYPE (*tem_basep),\n-\t\t\t\tTREE_OPERAND (*tem_basep, 0),\n-\t\t\t\tfold_convert (TREE_TYPE (TREE_OPERAND (*tp, 1)),\n-\t\t\t\t\t      TREE_OPERAND (*tem_basep, 1)));\n-\t\t  else\n-\t\t    *tem_basep\n-\t\t      = build2 (MEM_REF, TREE_TYPE (*tem_basep),\n-\t\t\t\tbuild_fold_addr_expr (*tem_basep),\n-\t\t\t\tbuild_int_cst\n-\t\t\t\t  (TREE_TYPE (TREE_OPERAND (*tp, 1)), 0));\n-\t\t  *tp = tem;\n-\t\t}\n+\t      tree *tem_basep = &tem;\n+\t      while (handled_component_p (*tem_basep))\n+\t\ttem_basep = &TREE_OPERAND (*tem_basep, 0);\n+\t      if (TREE_CODE (*tem_basep) == MEM_REF)\n+\t\t*tem_basep\n+\t\t    = build2 (MEM_REF, TREE_TYPE (*tem_basep),\n+\t\t\t      TREE_OPERAND (*tem_basep, 0),\n+\t\t\t      fold_convert (TREE_TYPE (TREE_OPERAND (*tp, 1)),\n+\t\t\t\t\t    TREE_OPERAND (*tem_basep, 1)));\n \t      else\n-\t\t{\n-\t\t  *tp = fold_build2 (MEM_REF, TREE_TYPE (*tp),\n-\t\t\t\t     ptr, TREE_OPERAND (*tp, 1));\n-\t\t  TREE_THIS_VOLATILE (*tp) = TREE_THIS_VOLATILE (old);\n-\t\t  TREE_THIS_NOTRAP (*tp) = TREE_THIS_NOTRAP (old);\n-\t\t}\n-\t      TREE_NO_WARNING (*tp) = TREE_NO_WARNING (old);\n-\t      *walk_subtrees = 0;\n-\t      return NULL;\n+\t\t*tem_basep\n+\t\t    = build2 (MEM_REF, TREE_TYPE (*tem_basep),\n+\t\t\t      build_fold_addr_expr (*tem_basep),\n+\t\t\t      build_int_cst\n+\t\t\t      (TREE_TYPE (TREE_OPERAND (*tp, 1)), 0));\n+\t      *tp = tem;\n \t    }\n+\t  else\n+\t    {\n+\t      *tp = fold_build2 (MEM_REF, TREE_TYPE (*tp),\n+\t\t\t\t ptr, TREE_OPERAND (*tp, 1));\n+\t      TREE_THIS_VOLATILE (*tp) = TREE_THIS_VOLATILE (old);\n+\t      TREE_THIS_NOTRAP (*tp) = TREE_THIS_NOTRAP (old);\n+\t    }\n+\t  TREE_NO_WARNING (*tp) = TREE_NO_WARNING (old);\n+\t  *walk_subtrees = 0;\n+\t  return NULL;\n \t}\n \n       /* Here is the \"usual case\".  Copy this tree node, and then"}]}