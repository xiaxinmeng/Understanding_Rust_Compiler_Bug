{"sha": "be3cfb9da549517523d9ee9177d327481dc788de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmUzY2ZiOWRhNTQ5NTE3NTIzZDllZTkxNzdkMzI3NDgxZGM3ODhkZQ==", "commit": {"author": {"name": "Bernd Edlinger", "email": "bernd.edlinger@hotmail.de", "date": "2018-08-20T14:20:59Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2018-08-20T14:20:59Z"}, "message": "re PR target/86984 (invalid relocation accessing a const char array)\n\n\tPR target/86984\n\t* expr.c (expand_assignment): Assert that bitpos is positive.\n\t(store_field): Likewise\n\t(expand_expr_real_1): Make sure that bitpos is positive.\n\t* config/alpha/alpha.h (CONSTANT_ADDRESS_P): Avoid signed\n\tinteger overflow.\n\n\tPR target/86984\n\t* gcc.target/alpha/pr86984.c: New test.\n\nFrom-SVN: r263664", "tree": {"sha": "9c706675ec67b2766d7a1c167c2d4e40ef27fe11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c706675ec67b2766d7a1c167c2d4e40ef27fe11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be3cfb9da549517523d9ee9177d327481dc788de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be3cfb9da549517523d9ee9177d327481dc788de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be3cfb9da549517523d9ee9177d327481dc788de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be3cfb9da549517523d9ee9177d327481dc788de/comments", "author": {"login": "bernd-edlinger", "id": 17638929, "node_id": "MDQ6VXNlcjE3NjM4OTI5", "avatar_url": "https://avatars.githubusercontent.com/u/17638929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bernd-edlinger", "html_url": "https://github.com/bernd-edlinger", "followers_url": "https://api.github.com/users/bernd-edlinger/followers", "following_url": "https://api.github.com/users/bernd-edlinger/following{/other_user}", "gists_url": "https://api.github.com/users/bernd-edlinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/bernd-edlinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bernd-edlinger/subscriptions", "organizations_url": "https://api.github.com/users/bernd-edlinger/orgs", "repos_url": "https://api.github.com/users/bernd-edlinger/repos", "events_url": "https://api.github.com/users/bernd-edlinger/events{/privacy}", "received_events_url": "https://api.github.com/users/bernd-edlinger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "abcd1775e067600918da69330f8ff3f1f6734b4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abcd1775e067600918da69330f8ff3f1f6734b4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abcd1775e067600918da69330f8ff3f1f6734b4c"}], "stats": {"total": 123, "additions": 122, "deletions": 1}, "files": [{"sha": "feee8a29e3a1280556428c3e121c1bab6018980f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be3cfb9da549517523d9ee9177d327481dc788de/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be3cfb9da549517523d9ee9177d327481dc788de/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=be3cfb9da549517523d9ee9177d327481dc788de", "patch": "@@ -1,3 +1,12 @@\n+2018-08-20  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR target/86984\n+\t* expr.c (expand_assignment): Assert that bitpos is positive.\n+\t(store_field): Likewise\n+\t(expand_expr_real_1): Make sure that bitpos is positive.\n+\t* config/alpha/alpha.h (CONSTANT_ADDRESS_P): Avoid signed\n+\tinteger overflow.\n+\n 2018-08-20  Nathan Sidwell  <nathan@acm.org>\n \n \t* Makefile.in (CPP_ID_DATA_H): Delete."}, {"sha": "aa1de8a797a616509c3bfcac7a209377eac5b444", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be3cfb9da549517523d9ee9177d327481dc788de/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be3cfb9da549517523d9ee9177d327481dc788de/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=be3cfb9da549517523d9ee9177d327481dc788de", "patch": "@@ -678,7 +678,7 @@ enum reg_class {\n \n #define CONSTANT_ADDRESS_P(X)   \\\n   (CONST_INT_P (X)\t\t\\\n-   && (unsigned HOST_WIDE_INT) (INTVAL (X) + 0x8000) < 0x10000)\n+   && (UINTVAL (X) + 0x8000) < 0x10000)\n \n /* The macros REG_OK_FOR..._P assume that the arg is a REG rtx\n    and check its validity for a certain class."}, {"sha": "0d79d08963361403c74e02e767e050eea1308c18", "filename": "gcc/expr.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be3cfb9da549517523d9ee9177d327481dc788de/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be3cfb9da549517523d9ee9177d327481dc788de/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=be3cfb9da549517523d9ee9177d327481dc788de", "patch": "@@ -5270,6 +5270,7 @@ expand_assignment (tree to, tree from, bool nontemporal)\n \t\tMEM_VOLATILE_P (to_rtx) = 1;\n \t    }\n \n+\t  gcc_checking_assert (known_ge (bitpos, 0));\n \t  if (optimize_bitfield_assignment_op (bitsize, bitpos,\n \t\t\t\t\t       bitregion_start, bitregion_end,\n \t\t\t\t\t       mode1, to_rtx, to, from,\n@@ -7046,6 +7047,7 @@ store_field (rtx target, poly_int64 bitsize, poly_int64 bitpos,\n \t}\n \n       /* Store the value in the bitfield.  */\n+      gcc_assert (known_ge (bitpos, 0));\n       store_bit_field (target, bitsize, bitpos,\n \t\t       bitregion_start, bitregion_end,\n \t\t       mode, temp, reverse);\n@@ -10545,6 +10547,14 @@ expand_expr_real_1 (tree exp, rtx target, machine_mode tmode,\n \tmode2\n \t  = CONSTANT_P (op0) ? TYPE_MODE (TREE_TYPE (tem)) : GET_MODE (op0);\n \n+\t/* Make sure bitpos is not negative, it can wreak havoc later.  */\n+\tif (maybe_lt (bitpos, 0))\n+\t  {\n+\t    gcc_checking_assert (offset == NULL_TREE);\n+\t    offset = size_int (bits_to_bytes_round_down (bitpos));\n+\t    bitpos = num_trailing_bits (bitpos);\n+\t  }\n+\n \t/* If we have either an offset, a BLKmode result, or a reference\n \t   outside the underlying object, we must force it to memory.\n \t   Such a case can occur in Ada if we have unchecked conversion\n@@ -10795,6 +10805,7 @@ expand_expr_real_1 (tree exp, rtx target, machine_mode tmode,\n \t\t&& GET_MODE_CLASS (ext_mode) == MODE_INT)\n \t      reversep = TYPE_REVERSE_STORAGE_ORDER (type);\n \n+\t    gcc_checking_assert (known_ge (bitpos, 0));\n \t    op0 = extract_bit_field (op0, bitsize, bitpos, unsignedp,\n \t\t\t\t     (modifier == EXPAND_STACK_PARM\n \t\t\t\t      ? NULL_RTX : target),"}, {"sha": "a0620b1b802b18e4ba21ddecc73a4de8f7d43dcc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be3cfb9da549517523d9ee9177d327481dc788de/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be3cfb9da549517523d9ee9177d327481dc788de/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=be3cfb9da549517523d9ee9177d327481dc788de", "patch": "@@ -1,3 +1,8 @@\n+2018-08-20  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR target/86984\n+\t* gcc.target/alpha/pr86984.c: New test.\n+\n 2018-08-20  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/78655"}, {"sha": "f6a98d4ed9c0e01250c8402b8e1007b70491080a", "filename": "gcc/testsuite/gcc.target/alpha/pr86984.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be3cfb9da549517523d9ee9177d327481dc788de/gcc%2Ftestsuite%2Fgcc.target%2Falpha%2Fpr86984.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be3cfb9da549517523d9ee9177d327481dc788de/gcc%2Ftestsuite%2Fgcc.target%2Falpha%2Fpr86984.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Falpha%2Fpr86984.c?ref=be3cfb9da549517523d9ee9177d327481dc788de", "patch": "@@ -0,0 +1,96 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Wall -Wwrite-strings -Werror -fmerge-all-constants -fno-stack-protector -mieee -fdump-rtl-expand\" } */\n+\n+struct expression {\n+  unsigned long int num;\n+};\n+union YYSTYPE {\n+  unsigned long int num;\n+  struct expression *exp;\n+};\n+\n+typedef union YYSTYPE YYSTYPE;\n+\n+struct expression * new_exp_0 (int);\n+\n+union yyalloc {\n+  short yyss_alloc;\n+};\n+\n+static const signed char yypact[] = {\n+  -9, -9, -10, -10, -9, 8, 36, -10, 13, -10, -9, -9, -9, -9, -9, -9, -9, -10, 26, 41, 45, 18, -2, 14, -10, -9, 36 };\n+static const unsigned char yydefact[] = {\n+  0, 0, 12, 11, 0, 0, 2, 10, 0, 1, 0, 0, 0, 0, 0, 0, 0, 13, 0, 4, 5, 6, 7, 8, 9, 0, 3 };\n+\n+static const signed char yypgoto[3] = \"\\366\\366\\377\";\n+static const signed char yydefgoto[3] = \"\\377\\005\\006\";\n+\n+static const unsigned char yytable[] = {\n+  7, 1, 2, 8, 3, 4, 15, 16, 9, 18, 19, 20, 21, 22, 23, 24, 10, 11, 12, 13, 14, 15, 16, 16, 26, 14, 15, 16, 17, 10, 11, 12, 13, 14, 15, 16, 0, 0, 25, 10, 11, 12, 13, 14, 15, 16, 12, 13, 14, 15, 16, 13, 14, 15, 16 };\n+\n+static const signed char yycheck[] = {\n+  1, 10, 11, 4, 13, 14, 8, 9, 0, 10, 11, 12, 13, 14, 15, 16, 3, 4, 5, 6, 7, 8, 9, 9, 25, 7, 8, 9, 15, 3, 4, 5, 6, 7, 8, 9, -1, -1, 12, 3, 4, 5, 6, 7, 8, 9, 5, 6, 7, 8, 9, 6, 7, 8, 9 };\n+\n+static const unsigned char yyr1[] = {\n+  0, 16, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18 };\n+\n+static const unsigned char yyr2[] = {\n+  0, 2, 1, 5, 3, 3, 3, 3, 3, 3, 2, 1, 1, 3 };\n+\n+int __gettextparse (void)\n+{\n+  int yystate = 0;\n+  short yyssa[200];\n+  short *yyss = yyss;\n+  short *yyssp = yyssa;\n+  YYSTYPE yyvsa[200];\n+  YYSTYPE *yyvsp = yyvsa;\n+  enum { yystacksize = 200 };\n+  int yylen = 0;\n+  goto yysetstate;\n+ yynewstate: yyssp++;\n+ yysetstate: *yyssp = yystate;\n+\n+  if (yyss + yystacksize - 1 <= yyssp)\n+    {\n+      long unsigned int yysize = yyssp - yyss + 1;\n+      {\n+\tshort *yyss1 = yyss;\n+\tunion yyalloc *yyptr = (union yyalloc *) __builtin_malloc ((yystacksize * (sizeof (short) + sizeof (YYSTYPE)) + (sizeof (union yyalloc) - 1)));\n+\tif (!yyptr) return 0;\n+\t__builtin_memcpy (&yyptr->yyss_alloc, yyss, yysize * sizeof *(yyss));\n+\tyyss = &yyptr->yyss_alloc;\n+\tif (yyss1 != yyssa) __builtin_free (yyss1);\n+      }\n+      if (yyss + yystacksize - 1 <= yyssp)\n+\treturn 0;\n+    }\n+\n+  int yyn = yypact[yystate];\n+  if (yyn == -10)\n+    goto yydefault;\n+\n+  yyn = yytable[yyn];\n+  if (yyn <= 0)\n+    goto yyreduce;\n+\n+ yydefault: yyn = yydefact[yystate];\n+ yyreduce: yylen = yyr2[yyn];\n+\n+  YYSTYPE yyval;\n+  if (yyn == 12 && (yyval.exp = new_exp_0 (0)) != 0)\n+    (yyval.exp)->num = (yyvsp[0].num);\n+\n+  (yyvsp -= yylen, yyssp -= yylen);\n+  yyn = yyr1[yyn];\n+  yystate = yypgoto[yyn - 16] + *yyssp;\n+  if (0 <= yystate && yystate <= 54 && yycheck[yystate] == *yyssp)\n+    yystate = yytable[yystate];\n+  else\n+    yystate = yydefgoto[yyn - 16];\n+\n+  goto yynewstate;\n+}\n+\n+/* { dg-final { scan-rtl-dump-not \"const_int 230584300921\" \"expand\" } } */\n+/* { dg-final { scan-assembler-not \"yypgoto\\\\+230584300921\" } } */"}]}