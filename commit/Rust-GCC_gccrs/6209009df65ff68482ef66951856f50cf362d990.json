{"sha": "6209009df65ff68482ef66951856f50cf362d990", "node_id": "C_kwDOANBUbNoAKDYyMDkwMDlkZjY1ZmY2ODQ4MmVmNjY5NTE4NTZmNTBjZjM2MmQ5OTA", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-05-22T19:04:33Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-05-25T15:06:36Z"}, "message": "c++: strict constexpr and local vars\n\nA change I was working on made constexpr_searcher.cc start to fail, and when\nI looked at it I wondered why it had been accepted before.  This turned out\nto be because we try to be more flexible about constant-evaluation of static\ninitializers, as allowed, but we were wrongly doing the same for non-static\ninitializers as well.\n\ngcc/cp/ChangeLog:\n\n\t* constexpr.cc (maybe_constant_init_1): Only pass false for\n\tstrict when initializing a variable of static duration.\n\nlibstdc++-v3/ChangeLog:\n\n\t* testsuite/20_util/function_objects/constexpr_searcher.cc: Add\n\tconstexpr.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp1y/constexpr-local4.C: New test.", "tree": {"sha": "400d50b2f5a8debf3c6eecd1f3c9dbd063076a5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/400d50b2f5a8debf3c6eecd1f3c9dbd063076a5e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6209009df65ff68482ef66951856f50cf362d990", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6209009df65ff68482ef66951856f50cf362d990", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6209009df65ff68482ef66951856f50cf362d990", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6209009df65ff68482ef66951856f50cf362d990/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b661f3f5e712c951e774b3b91fffe4dac734cc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b661f3f5e712c951e774b3b91fffe4dac734cc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b661f3f5e712c951e774b3b91fffe4dac734cc7"}], "stats": {"total": 33, "additions": 28, "deletions": 5}, "files": [{"sha": "1a70fda1dc5513be6761958c09cdf225024420af", "filename": "gcc/cp/constexpr.cc", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6209009df65ff68482ef66951856f50cf362d990/gcc%2Fcp%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6209009df65ff68482ef66951856f50cf362d990/gcc%2Fcp%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.cc?ref=6209009df65ff68482ef66951856f50cf362d990", "patch": "@@ -8301,9 +8301,15 @@ maybe_constant_init_1 (tree t, tree decl, bool allow_non_constant,\n   else if (CONSTANT_CLASS_P (t) && allow_non_constant)\n     /* No evaluation needed.  */;\n   else\n-    t = cxx_eval_outermost_constant_expr (t, allow_non_constant,\n-\t\t\t\t\t  /*strict*/false,\n-\t\t\t\t\t  manifestly_const_eval, false, decl);\n+    {\n+      /* [basic.start.static] allows constant-initialization of variables with\n+\t static or thread storage duration even if it isn't required, but we\n+\t shouldn't bend the rules the same way for automatic variables.  */\n+      bool is_static = (decl && DECL_P (decl)\n+\t\t\t&& (TREE_STATIC (decl) || DECL_EXTERNAL (decl)));\n+      t = cxx_eval_outermost_constant_expr (t, allow_non_constant, !is_static,\n+\t\t\t\t\t    manifestly_const_eval, false, decl);\n+    }\n   if (TREE_CODE (t) == TARGET_EXPR)\n     {\n       tree init = TARGET_EXPR_INITIAL (t);"}, {"sha": "bef6248857921f8e55c81717b36aa556f9880c09", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-local4.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6209009df65ff68482ef66951856f50cf362d990/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-local4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6209009df65ff68482ef66951856f50cf362d990/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-local4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-local4.C?ref=6209009df65ff68482ef66951856f50cf362d990", "patch": "@@ -0,0 +1,17 @@\n+// { dg-do compile { target c++14 } }\n+\n+struct A\n+{\n+  int i;\n+  constexpr A(int i): i(i) {};\n+};\n+\n+const A a = 42;\n+\n+constexpr int f()\n+{\n+  const int j = a.i;\t\t// { dg-message \"'a'\" }\n+  return j;\n+}\n+\n+static_assert (f() == 42,\"\");\t// { dg-error \"non-constant\" }"}, {"sha": "17069694c1bbee0b563329e2cdb43cdb8d14f593", "filename": "libstdc++-v3/testsuite/20_util/function_objects/constexpr_searcher.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6209009df65ff68482ef66951856f50cf362d990/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Fconstexpr_searcher.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6209009df65ff68482ef66951856f50cf362d990/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Fconstexpr_searcher.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Fconstexpr_searcher.cc?ref=6209009df65ff68482ef66951856f50cf362d990", "patch": "@@ -28,13 +28,13 @@\n \n #include <string_view>\n \n-const std::string_view\n+constexpr std::string_view\n patt = \"World\";\n \n constexpr std::string_view\n greet = \"Hello, Humongous World of Wonder!!!\";\n \n-const std::wstring_view\n+constexpr std::wstring_view\n wpatt = L\"World\";\n \n constexpr std::wstring_view"}]}