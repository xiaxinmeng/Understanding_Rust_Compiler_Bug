{"sha": "8fcd8c83abb628bf0f4eefad8c85aaac98aca9d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGZjZDhjODNhYmI2MjhiZjBmNGVlZmFkOGM4NWFhYWM5OGFjYTlkNw==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2012-06-14T13:02:52Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2012-06-14T13:02:52Z"}, "message": "arm.md (divsf3, divdf3): Remove FPA support.\n\n\t* arm.md (divsf3, divdf3): Remove FPA support.\n\t(negsf2, negdf2): Likewise.\n\t(sqrtsf2, sqrtdf2): Likewise.\n\t(movdfcc): Likewise.\n\t(modsf3, moddf3, movxf): Delete.\n\t(push_fp_multi): Delete.\n\t(fpa.md): Don't include it.\n\t* fpa.md: Delete file.\n\t* t-arm (MD_INCLUDES): Remove fpa.md.\n\nFrom-SVN: r188616", "tree": {"sha": "8335a3ccd1e4f303a4f116e90e3f87dfe90b1409", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8335a3ccd1e4f303a4f116e90e3f87dfe90b1409"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8fcd8c83abb628bf0f4eefad8c85aaac98aca9d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fcd8c83abb628bf0f4eefad8c85aaac98aca9d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fcd8c83abb628bf0f4eefad8c85aaac98aca9d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fcd8c83abb628bf0f4eefad8c85aaac98aca9d7/comments", "author": null, "committer": null, "parents": [{"sha": "e52972242a8bdd657926b85d4dfd0007ba14b2b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e52972242a8bdd657926b85d4dfd0007ba14b2b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e52972242a8bdd657926b85d4dfd0007ba14b2b8"}], "stats": {"total": 963, "additions": 19, "deletions": 944}, "files": [{"sha": "3cb8a15e35f54bc47814fe66897acc9572edd1f6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fcd8c83abb628bf0f4eefad8c85aaac98aca9d7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fcd8c83abb628bf0f4eefad8c85aaac98aca9d7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8fcd8c83abb628bf0f4eefad8c85aaac98aca9d7", "patch": "@@ -1,3 +1,15 @@\n+2012-06-14  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* arm.md (divsf3, divdf3): Remove FPA support.\n+\t(negsf2, negdf2): Likewise.\n+\t(sqrtsf2, sqrtdf2): Likewise.\n+\t(movdfcc): Likewise.\n+\t(modsf3, moddf3, movxf): Delete.\n+\t(push_fp_multi): Delete.\n+\t(fpa.md): Don't include it.\n+\t* fpa.md: Delete file.\n+\t* t-arm (MD_INCLUDES): Remove fpa.md.\n+\n 2012-06-14  Bill Schmidt  <wschmidt@linux.ibm.com>\n \n \t* tree-vectorizer.h (vect_get_stmt_cost): Move from tree-vect-stmts.c."}, {"sha": "c8e1f04c0ac47b8f0efdcea3ac7f1b1a8b31000a", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 7, "deletions": 54, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fcd8c83abb628bf0f4eefad8c85aaac98aca9d7/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fcd8c83abb628bf0f4eefad8c85aaac98aca9d7/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=8fcd8c83abb628bf0f4eefad8c85aaac98aca9d7", "patch": "@@ -1967,30 +1967,14 @@\n   [(set (match_operand:SF 0 \"s_register_operand\" \"\")\n \t(div:SF (match_operand:SF 1 \"arm_float_rhs_operand\" \"\")\n \t\t(match_operand:SF 2 \"arm_float_rhs_operand\" \"\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && (TARGET_FPA || TARGET_VFP)\"\n+  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_VFP\"\n   \"\")\n \n (define_expand \"divdf3\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"\")\n \t(div:DF (match_operand:DF 1 \"arm_float_rhs_operand\" \"\")\n \t\t(match_operand:DF 2 \"arm_float_rhs_operand\" \"\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && (TARGET_FPA || TARGET_VFP_DOUBLE)\"\n-  \"\")\n-\f\n-;; Modulo insns\n-\n-(define_expand \"modsf3\"\n-  [(set (match_operand:SF 0 \"s_register_operand\" \"\")\n-\t(mod:SF (match_operand:SF 1 \"s_register_operand\" \"\")\n-\t\t(match_operand:SF 2 \"arm_float_rhs_operand\" \"\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_FPA\"\n-  \"\")\n-\n-(define_expand \"moddf3\"\n-  [(set (match_operand:DF 0 \"s_register_operand\" \"\")\n-\t(mod:DF (match_operand:DF 1 \"s_register_operand\" \"\")\n-\t\t(match_operand:DF 2 \"arm_float_rhs_operand\" \"\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_FPA\"\n+  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_VFP_DOUBLE\"\n   \"\")\n \f\n ;; Boolean and,ior,xor insns\n@@ -4216,14 +4200,14 @@\n (define_expand \"negsf2\"\n   [(set (match_operand:SF         0 \"s_register_operand\" \"\")\n \t(neg:SF (match_operand:SF 1 \"s_register_operand\" \"\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && (TARGET_FPA || TARGET_VFP)\"\n+  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_VFP\"\n   \"\"\n )\n \n (define_expand \"negdf2\"\n   [(set (match_operand:DF         0 \"s_register_operand\" \"\")\n \t(neg:DF (match_operand:DF 1 \"s_register_operand\" \"\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && (TARGET_FPA || TARGET_VFP_DOUBLE)\"\n+  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_VFP_DOUBLE\"\n   \"\")\n \n ;; abssi2 doesn't really clobber the condition codes if a different register\n@@ -4315,13 +4299,13 @@\n (define_expand \"sqrtsf2\"\n   [(set (match_operand:SF 0 \"s_register_operand\" \"\")\n \t(sqrt:SF (match_operand:SF 1 \"s_register_operand\" \"\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && (TARGET_FPA || TARGET_VFP)\"\n+  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_VFP\"\n   \"\")\n \n (define_expand \"sqrtdf2\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"\")\n \t(sqrt:DF (match_operand:DF 1 \"s_register_operand\" \"\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && (TARGET_FPA || TARGET_VFP_DOUBLE)\"\n+  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_VFP_DOUBLE\"\n   \"\")\n \n (define_insn_and_split \"one_cmpldi2\"\n@@ -6821,17 +6805,6 @@\n    (set_attr \"insn\" \"*,*,*,*,*,mov\")\n    (set_attr \"pool_range\" \"*,*,*,1020,*,*\")]\n )\n-\n-(define_expand \"movxf\"\n-  [(set (match_operand:XF 0 \"general_operand\" \"\")\n-\t(match_operand:XF 1 \"general_operand\" \"\"))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_FPA\"\n-  \"\n-  if (GET_CODE (operands[0]) == MEM)\n-    operands[1] = force_reg (XFmode, operands[1]);\n-  \"\n-)\n-\n \f\n \n ;; load- and store-multiple insns\n@@ -8199,7 +8172,7 @@\n \t(if_then_else:DF (match_operand 1 \"expandable_comparison_operator\" \"\")\n \t\t\t (match_operand:DF 2 \"s_register_operand\" \"\")\n \t\t\t (match_operand:DF 3 \"arm_float_add_operand\" \"\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && (TARGET_FPA || TARGET_VFP_DOUBLE)\"\n+  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_VFP_DOUBLE\"\n   \"\n   {\n     enum rtx_code code = GET_CODE (operands[1]);\n@@ -11002,24 +10975,6 @@\n   [(set_attr \"length\" \"0\")]\n )\n \n-;; Similarly for the floating point registers\n-(define_insn \"*push_fp_multi\"\n-  [(match_parallel 2 \"multi_register_push\"\n-    [(set (match_operand:BLK 0 \"memory_operand\" \"=m\")\n-\t  (unspec:BLK [(match_operand:XF 1 \"f_register_operand\" \"\")]\n-\t\t      UNSPEC_PUSH_MULT))])]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_FPA\"\n-  \"*\n-  {\n-    char pattern[100];\n-\n-    sprintf (pattern, \\\"sfm%%(fd%%)\\\\t%%1, %d, [%%m0]!\\\", XVECLEN (operands[2], 0));\n-    output_asm_insn (pattern, operands);\n-    return \\\"\\\";\n-  }\"\n-  [(set_attr \"type\" \"f_fpa_store\")]\n-)\n-\n ;; Special patterns for dealing with the constant pool\n \n (define_insn \"align_4\"\n@@ -11451,8 +11406,6 @@\n \n ;; Load the load/store multiple patterns\n (include \"ldmstm.md\")\n-;; Load the FPA co-processor patterns\n-(include \"fpa.md\")\n ;; Load the Maverick co-processor patterns\n (include \"cirrus.md\")\n ;; Vector bits common to IWMMXT and Neon"}, {"sha": "875176b724b2a348a1492db689e40c9b77ff8b5f", "filename": "gcc/config/arm/fpa.md", "status": "removed", "additions": 0, "deletions": 889, "changes": 889, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e52972242a8bdd657926b85d4dfd0007ba14b2b8/gcc%2Fconfig%2Farm%2Ffpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e52972242a8bdd657926b85d4dfd0007ba14b2b8/gcc%2Fconfig%2Farm%2Ffpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ffpa.md?ref=e52972242a8bdd657926b85d4dfd0007ba14b2b8", "patch": "@@ -1,889 +0,0 @@\n-;;- Machine description for FPA co-processor for ARM cpus.\n-;;  Copyright 1991, 1993, 1994, 1995, 1996, 1996, 1997, 1998, 1999, 2000,\n-;;  2001, 2002, 2003, 2004, 2005, 2007 Free Software Foundation, Inc.\n-;;  Contributed by Pieter `Tiggr' Schoenmakers (rcpieter@win.tue.nl)\n-;;  and Martin Simmons (@harleqn.co.uk).\n-;;  More major hacks by Richard Earnshaw (rearnsha@arm.com).\n-\n-;; This file is part of GCC.\n-\n-;; GCC is free software; you can redistribute it and/or modify it\n-;; under the terms of the GNU General Public License as published\n-;; by the Free Software Foundation; either version 3, or (at your\n-;; option) any later version.\n-\n-;; GCC is distributed in the hope that it will be useful, but WITHOUT\n-;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n-;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n-;; License for more details.\n-\n-;; You should have received a copy of the GNU General Public License\n-;; along with GCC; see the file COPYING3.  If not see\n-;; <http://www.gnu.org/licenses/>.\n-\n-;; Some FPA mnemonics are ambiguous between conditional infixes and\n-;; conditional suffixes.  All instructions use a conditional infix,\n-;; even in unified assembly mode.\n-\n-;; FPA automaton.\n-(define_automaton \"armfp\")\n-\n-;; Floating point unit (FPA)\n-(define_cpu_unit \"fpa\" \"armfp\")\n-\n-; The fpa10 doesn't really have a memory read unit, but it can start\n-; to speculatively execute the instruction in the pipeline, provided\n-; the data is already loaded, so pretend reads have a delay of 2 (and\n-; that the pipeline is infinite).\n-(define_cpu_unit \"fpa_mem\" \"arm\")\n-\n-(define_insn_reservation \"fdivx\" 71\n-  (and (eq_attr \"fpu\" \"fpa\")\n-       (eq_attr \"type\" \"fdivx\"))\n-  \"core+fpa*69\")\n-\n-(define_insn_reservation \"fdivd\" 59\n-  (and (eq_attr \"fpu\" \"fpa\")\n-       (eq_attr \"type\" \"fdivd\"))\n-  \"core+fpa*57\")\n-\n-(define_insn_reservation \"fdivs\" 31\n-  (and (eq_attr \"fpu\" \"fpa\")\n-       (eq_attr \"type\" \"fdivs\"))\n-  \"core+fpa*29\")\n-\n-(define_insn_reservation \"fmul\" 9\n-  (and (eq_attr \"fpu\" \"fpa\")\n-       (eq_attr \"type\" \"fmul\"))\n-  \"core+fpa*7\")\n-\n-(define_insn_reservation \"ffmul\" 6\n-  (and (eq_attr \"fpu\" \"fpa\")\n-       (eq_attr \"type\" \"ffmul\"))\n-  \"core+fpa*4\")\n-\n-(define_insn_reservation \"farith\" 4\n-  (and (eq_attr \"fpu\" \"fpa\")\n-       (eq_attr \"type\" \"farith\"))\n-  \"core+fpa*2\")\n-\n-(define_insn_reservation \"ffarith\" 2\n-  (and (eq_attr \"fpu\" \"fpa\")\n-       (eq_attr \"type\" \"ffarith\"))\n-  \"core+fpa*2\")\n-\n-(define_insn_reservation \"r_2_f\" 5\n-  (and (eq_attr \"fpu\" \"fpa\")\n-       (eq_attr \"type\" \"r_2_f\"))\n-  \"core+fpa*3\")\n-\n-(define_insn_reservation \"f_2_r\" 1\n-  (and (eq_attr \"fpu\" \"fpa\")\n-       (eq_attr \"type\" \"f_2_r\"))\n-  \"core+fpa*2\")\n-\n-(define_insn_reservation \"f_load\" 3\n-  (and (eq_attr \"fpu\" \"fpa\") (eq_attr \"type\" \"f_fpa_load\"))\n-  \"fpa_mem+core*3\")\n-\n-(define_insn_reservation \"f_store\" 4\n-  (and (eq_attr \"fpu\" \"fpa\") (eq_attr \"type\" \"f_fpa_store\"))\n-  \"core*4\")\n-\n-(define_insn_reservation \"r_mem_f\" 6\n-  (and (eq_attr \"model_wbuf\" \"no\")\n-    (and (eq_attr \"fpu\" \"fpa\") (eq_attr \"type\" \"r_mem_f\")))\n-  \"core*6\")\n-\n-(define_insn_reservation \"f_mem_r\" 7\n-  (and (eq_attr \"fpu\" \"fpa\") (eq_attr \"type\" \"f_mem_r\"))\n-  \"core*7\")\n-\n-\n-(define_insn \"*addsf3_fpa\"\n-  [(set (match_operand:SF          0 \"s_register_operand\" \"=f,f\")\n-\t(plus:SF (match_operand:SF 1 \"s_register_operand\" \"%f,f\")\n-\t\t (match_operand:SF 2 \"arm_float_add_operand\"    \"fG,H\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_FPA\"\n-  \"@\n-   adf%?s\\\\t%0, %1, %2\n-   suf%?s\\\\t%0, %1, #%N2\"\n-  [(set_attr \"type\" \"farith\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-(define_insn \"*adddf3_fpa\"\n-  [(set (match_operand:DF          0 \"s_register_operand\" \"=f,f\")\n-\t(plus:DF (match_operand:DF 1 \"s_register_operand\" \"%f,f\")\n-\t\t (match_operand:DF 2 \"arm_float_add_operand\"    \"fG,H\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_FPA\"\n-  \"@\n-   adf%?d\\\\t%0, %1, %2\n-   suf%?d\\\\t%0, %1, #%N2\"\n-  [(set_attr \"type\" \"farith\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-(define_insn \"*adddf_esfdf_df_fpa\"\n-  [(set (match_operand:DF           0 \"s_register_operand\" \"=f,f\")\n-\t(plus:DF (float_extend:DF\n-\t\t  (match_operand:SF 1 \"s_register_operand\"  \"f,f\"))\n-\t\t (match_operand:DF  2 \"arm_float_add_operand\"    \"fG,H\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_FPA\"\n-  \"@\n-   adf%?d\\\\t%0, %1, %2\n-   suf%?d\\\\t%0, %1, #%N2\"\n-  [(set_attr \"type\" \"farith\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-(define_insn \"*adddf_df_esfdf_fpa\"\n-  [(set (match_operand:DF           0 \"s_register_operand\" \"=f\")\n-\t(plus:DF (match_operand:DF  1 \"s_register_operand\"  \"f\")\n-\t\t (float_extend:DF\n-\t\t  (match_operand:SF 2 \"s_register_operand\"  \"f\"))))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_FPA\"\n-  \"adf%?d\\\\t%0, %1, %2\"\n-  [(set_attr \"type\" \"farith\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-(define_insn \"*adddf_esfdf_esfdf_fpa\"\n-  [(set (match_operand:DF           0 \"s_register_operand\" \"=f\")\n-\t(plus:DF (float_extend:DF \n-\t\t  (match_operand:SF 1 \"s_register_operand\" \"f\"))\n-\t\t (float_extend:DF\n-\t\t  (match_operand:SF 2 \"s_register_operand\" \"f\"))))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_FPA\"\n-  \"adf%?d\\\\t%0, %1, %2\"\n-  [(set_attr \"type\" \"farith\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-(define_insn \"*subsf3_fpa\"\n-  [(set (match_operand:SF 0 \"s_register_operand\" \"=f,f\")\n-\t(minus:SF (match_operand:SF 1 \"arm_float_rhs_operand\" \"f,G\")\n-\t\t  (match_operand:SF 2 \"arm_float_rhs_operand\" \"fG,f\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_FPA\"\n-  \"@\n-   suf%?s\\\\t%0, %1, %2\n-   rsf%?s\\\\t%0, %2, %1\"\n-  [(set_attr \"type\" \"farith\")]\n-)\n-\n-(define_insn \"*subdf3_fpa\"\n-  [(set (match_operand:DF           0 \"s_register_operand\" \"=f,f\")\n-\t(minus:DF (match_operand:DF 1 \"arm_float_rhs_operand\"     \"f,G\")\n-\t\t  (match_operand:DF 2 \"arm_float_rhs_operand\"    \"fG,f\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_FPA\"\n-  \"@\n-   suf%?d\\\\t%0, %1, %2\n-   rsf%?d\\\\t%0, %2, %1\"\n-  [(set_attr \"type\" \"farith\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-(define_insn \"*subdf_esfdf_df_fpa\"\n-  [(set (match_operand:DF            0 \"s_register_operand\" \"=f\")\n-\t(minus:DF (float_extend:DF\n-\t\t   (match_operand:SF 1 \"s_register_operand\"  \"f\"))\n-\t\t  (match_operand:DF  2 \"arm_float_rhs_operand\"    \"fG\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_FPA\"\n-  \"suf%?d\\\\t%0, %1, %2\"\n-  [(set_attr \"type\" \"farith\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-(define_insn \"*subdf_df_esfdf_fpa\"\n-  [(set (match_operand:DF 0 \"s_register_operand\" \"=f,f\")\n-\t(minus:DF (match_operand:DF 1 \"arm_float_rhs_operand\" \"f,G\")\n-\t\t  (float_extend:DF\n-\t\t   (match_operand:SF 2 \"s_register_operand\" \"f,f\"))))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_FPA\"\n-  \"@\n-   suf%?d\\\\t%0, %1, %2\n-   rsf%?d\\\\t%0, %2, %1\"\n-  [(set_attr \"type\" \"farith\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-(define_insn \"*subdf_esfdf_esfdf_fpa\"\n-  [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n-\t(minus:DF (float_extend:DF\n-\t\t   (match_operand:SF 1 \"s_register_operand\" \"f\"))\n-\t\t  (float_extend:DF\n-\t\t   (match_operand:SF 2 \"s_register_operand\" \"f\"))))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_FPA\"\n-  \"suf%?d\\\\t%0, %1, %2\"\n-  [(set_attr \"type\" \"farith\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-(define_insn \"*mulsf3_fpa\"\n-  [(set (match_operand:SF 0 \"s_register_operand\" \"=f\")\n-\t(mult:SF (match_operand:SF 1 \"s_register_operand\" \"f\")\n-\t\t (match_operand:SF 2 \"arm_float_rhs_operand\" \"fG\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_FPA\"\n-  \"fml%?s\\\\t%0, %1, %2\"\n-  [(set_attr \"type\" \"ffmul\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-(define_insn \"*muldf3_fpa\"\n-  [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n-\t(mult:DF (match_operand:DF 1 \"s_register_operand\" \"f\")\n-\t\t (match_operand:DF 2 \"arm_float_rhs_operand\" \"fG\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_FPA\"\n-  \"muf%?d\\\\t%0, %1, %2\"\n-  [(set_attr \"type\" \"fmul\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-(define_insn \"*muldf_esfdf_df_fpa\"\n-  [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n-\t(mult:DF (float_extend:DF\n-\t\t  (match_operand:SF 1 \"s_register_operand\" \"f\"))\n-\t\t (match_operand:DF 2 \"arm_float_rhs_operand\" \"fG\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_FPA\"\n-  \"muf%?d\\\\t%0, %1, %2\"\n-  [(set_attr \"type\" \"fmul\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-(define_insn \"*muldf_df_esfdf_fpa\"\n-  [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n-\t(mult:DF (match_operand:DF 1 \"s_register_operand\" \"f\")\n-\t\t (float_extend:DF\n-\t\t  (match_operand:SF 2 \"s_register_operand\" \"f\"))))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_FPA\"\n-  \"muf%?d\\\\t%0, %1, %2\"\n-  [(set_attr \"type\" \"fmul\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-(define_insn \"*muldf_esfdf_esfdf_fpa\"\n-  [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n-\t(mult:DF\n-\t (float_extend:DF (match_operand:SF 1 \"s_register_operand\" \"f\"))\n-\t (float_extend:DF (match_operand:SF 2 \"s_register_operand\" \"f\"))))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_FPA\"\n-  \"muf%?d\\\\t%0, %1, %2\"\n-  [(set_attr \"type\" \"fmul\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-;; Division insns\n-\n-(define_insn \"*divsf3_fpa\"\n-  [(set (match_operand:SF 0 \"s_register_operand\" \"=f,f\")\n-\t(div:SF (match_operand:SF 1 \"arm_float_rhs_operand\" \"f,G\")\n-\t\t(match_operand:SF 2 \"arm_float_rhs_operand\" \"fG,f\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_FPA\"\n-  \"@\n-   fdv%?s\\\\t%0, %1, %2\n-   frd%?s\\\\t%0, %2, %1\"\n-  [(set_attr \"type\" \"fdivs\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-(define_insn \"*divdf3_fpa\"\n-  [(set (match_operand:DF 0 \"s_register_operand\" \"=f,f\")\n-\t(div:DF (match_operand:DF 1 \"arm_float_rhs_operand\" \"f,G\")\n-\t\t(match_operand:DF 2 \"arm_float_rhs_operand\" \"fG,f\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_FPA\"\n-  \"@\n-   dvf%?d\\\\t%0, %1, %2\n-   rdf%?d\\\\t%0, %2, %1\"\n-  [(set_attr \"type\" \"fdivd\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-(define_insn \"*divdf_esfdf_df_fpa\"\n-  [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n-\t(div:DF (float_extend:DF\n-\t\t (match_operand:SF 1 \"s_register_operand\" \"f\"))\n-\t\t(match_operand:DF 2 \"arm_float_rhs_operand\" \"fG\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_FPA\"\n-  \"dvf%?d\\\\t%0, %1, %2\"\n-  [(set_attr \"type\" \"fdivd\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-(define_insn \"*divdf_df_esfdf_fpa\"\n-  [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n-\t(div:DF (match_operand:DF 1 \"arm_float_rhs_operand\" \"fG\")\n-\t\t(float_extend:DF\n-\t\t (match_operand:SF 2 \"s_register_operand\" \"f\"))))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_FPA\"\n-  \"rdf%?d\\\\t%0, %2, %1\"\n-  [(set_attr \"type\" \"fdivd\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-(define_insn \"*divdf_esfdf_esfdf_fpa\"\n-  [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n-\t(div:DF (float_extend:DF\n-\t\t (match_operand:SF 1 \"s_register_operand\" \"f\"))\n-\t\t(float_extend:DF\n-\t\t (match_operand:SF 2 \"s_register_operand\" \"f\"))))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_FPA\"\n-  \"dvf%?d\\\\t%0, %1, %2\"\n-  [(set_attr \"type\" \"fdivd\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-(define_insn \"*modsf3_fpa\"\n-  [(set (match_operand:SF 0 \"s_register_operand\" \"=f\")\n-\t(mod:SF (match_operand:SF 1 \"s_register_operand\" \"f\")\n-\t\t(match_operand:SF 2 \"arm_float_rhs_operand\" \"fG\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_FPA\"\n-  \"rmf%?s\\\\t%0, %1, %2\"\n-  [(set_attr \"type\" \"fdivs\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-(define_insn \"*moddf3_fpa\"\n-  [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n-\t(mod:DF (match_operand:DF 1 \"s_register_operand\" \"f\")\n-\t\t(match_operand:DF 2 \"arm_float_rhs_operand\" \"fG\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_FPA\"\n-  \"rmf%?d\\\\t%0, %1, %2\"\n-  [(set_attr \"type\" \"fdivd\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-(define_insn \"*moddf_esfdf_df_fpa\"\n-  [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n-\t(mod:DF (float_extend:DF\n-\t\t (match_operand:SF 1 \"s_register_operand\" \"f\"))\n-\t\t(match_operand:DF 2 \"arm_float_rhs_operand\" \"fG\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_FPA\"\n-  \"rmf%?d\\\\t%0, %1, %2\"\n-  [(set_attr \"type\" \"fdivd\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-(define_insn \"*moddf_df_esfdf_fpa\"\n-  [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n-\t(mod:DF (match_operand:DF 1 \"s_register_operand\" \"f\")\n-\t\t(float_extend:DF\n-\t\t (match_operand:SF 2 \"s_register_operand\" \"f\"))))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_FPA\"\n-  \"rmf%?d\\\\t%0, %1, %2\"\n-  [(set_attr \"type\" \"fdivd\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-(define_insn \"*moddf_esfdf_esfdf_fpa\"\n-  [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n-\t(mod:DF (float_extend:DF\n-\t\t (match_operand:SF 1 \"s_register_operand\" \"f\"))\n-\t\t(float_extend:DF\n-\t\t (match_operand:SF 2 \"s_register_operand\" \"f\"))))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_FPA\"\n-  \"rmf%?d\\\\t%0, %1, %2\"\n-  [(set_attr \"type\" \"fdivd\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-(define_insn \"*negsf2_fpa\"\n-  [(set (match_operand:SF         0 \"s_register_operand\" \"=f\")\n-\t(neg:SF (match_operand:SF 1 \"s_register_operand\" \"f\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_FPA\"\n-  \"mnf%?s\\\\t%0, %1\"\n-  [(set_attr \"type\" \"ffarith\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-(define_insn \"*negdf2_fpa\"\n-  [(set (match_operand:DF         0 \"s_register_operand\" \"=f\")\n-\t(neg:DF (match_operand:DF 1 \"s_register_operand\" \"f\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_FPA\"\n-  \"mnf%?d\\\\t%0, %1\"\n-  [(set_attr \"type\" \"ffarith\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-(define_insn \"*negdf_esfdf_fpa\"\n-  [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n-\t(neg:DF (float_extend:DF\n-\t\t (match_operand:SF 1 \"s_register_operand\" \"f\"))))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_FPA\"\n-  \"mnf%?d\\\\t%0, %1\"\n-  [(set_attr \"type\" \"ffarith\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-(define_insn \"*abssf2_fpa\"\n-  [(set (match_operand:SF          0 \"s_register_operand\" \"=f\")\n-\t (abs:SF (match_operand:SF 1 \"s_register_operand\" \"f\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_FPA\"\n-  \"abs%?s\\\\t%0, %1\"\n-  [(set_attr \"type\" \"ffarith\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-(define_insn \"*absdf2_fpa\"\n-  [(set (match_operand:DF         0 \"s_register_operand\" \"=f\")\n-\t(abs:DF (match_operand:DF 1 \"s_register_operand\" \"f\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_FPA\"\n-  \"abs%?d\\\\t%0, %1\"\n-  [(set_attr \"type\" \"ffarith\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-(define_insn \"*absdf_esfdf_fpa\"\n-  [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n-\t(abs:DF (float_extend:DF\n-\t\t (match_operand:SF 1 \"s_register_operand\" \"f\"))))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_FPA\"\n-  \"abs%?d\\\\t%0, %1\"\n-  [(set_attr \"type\" \"ffarith\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-(define_insn \"*sqrtsf2_fpa\"\n-  [(set (match_operand:SF 0 \"s_register_operand\" \"=f\")\n-\t(sqrt:SF (match_operand:SF 1 \"s_register_operand\" \"f\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_FPA\"\n-  \"sqt%?s\\\\t%0, %1\"\n-  [(set_attr \"type\" \"float_em\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-(define_insn \"*sqrtdf2_fpa\"\n-  [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n-\t(sqrt:DF (match_operand:DF 1 \"s_register_operand\" \"f\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_FPA\"\n-  \"sqt%?d\\\\t%0, %1\"\n-  [(set_attr \"type\" \"float_em\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-(define_insn \"*sqrtdf_esfdf_fpa\"\n-  [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n-\t(sqrt:DF (float_extend:DF\n-\t\t  (match_operand:SF 1 \"s_register_operand\" \"f\"))))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_FPA\"\n-  \"sqt%?d\\\\t%0, %1\"\n-  [(set_attr \"type\" \"float_em\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-(define_insn \"*floatsisf2_fpa\"\n-  [(set (match_operand:SF           0 \"s_register_operand\" \"=f\")\n-\t(float:SF (match_operand:SI 1 \"s_register_operand\" \"r\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_FPA\"\n-  \"flt%?s\\\\t%0, %1\"\n-  [(set_attr \"type\" \"r_2_f\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-(define_insn \"*floatsidf2_fpa\"\n-  [(set (match_operand:DF           0 \"s_register_operand\" \"=f\")\n-\t(float:DF (match_operand:SI 1 \"s_register_operand\" \"r\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_FPA\"\n-  \"flt%?d\\\\t%0, %1\"\n-  [(set_attr \"type\" \"r_2_f\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-(define_insn \"*fix_truncsfsi2_fpa\"\n-  [(set (match_operand:SI         0 \"s_register_operand\" \"=r\")\n-\t(fix:SI (fix:SF (match_operand:SF 1 \"s_register_operand\" \"f\"))))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_FPA\"\n-  \"fix%?z\\\\t%0, %1\"\n-  [(set_attr \"type\" \"f_2_r\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-(define_insn \"*fix_truncdfsi2_fpa\"\n-  [(set (match_operand:SI         0 \"s_register_operand\" \"=r\")\n-\t(fix:SI (fix:DF (match_operand:DF 1 \"s_register_operand\" \"f\"))))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_FPA\"\n-  \"fix%?z\\\\t%0, %1\"\n-  [(set_attr \"type\" \"f_2_r\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-(define_insn \"*truncdfsf2_fpa\"\n-  [(set (match_operand:SF 0 \"s_register_operand\" \"=f\")\n-\t(float_truncate:SF\n-\t (match_operand:DF 1 \"s_register_operand\" \"f\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_FPA\"\n-  \"mvf%?s\\\\t%0, %1\"\n-  [(set_attr \"type\" \"ffarith\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-(define_insn \"*extendsfdf2_fpa\"\n-  [(set (match_operand:DF                  0 \"s_register_operand\" \"=f\")\n-\t(float_extend:DF (match_operand:SF 1 \"s_register_operand\"  \"f\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_FPA\"\n-  \"mvf%?d\\\\t%0, %1\"\n-  [(set_attr \"type\" \"ffarith\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-(define_insn \"*movsf_fpa\"\n-  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=f,f,f, m,f,r,r,r, m\")\n-\t(match_operand:SF 1 \"general_operand\"      \"fG,H,mE,f,r,f,r,mE,r\"))]\n-  \"TARGET_ARM\n-   && TARGET_HARD_FLOAT && TARGET_FPA\n-   && (GET_CODE (operands[0]) != MEM\n-       || register_operand (operands[1], SFmode))\"\n-  \"@\n-   mvf%?s\\\\t%0, %1\n-   mnf%?s\\\\t%0, #%N1\n-   ldf%?s\\\\t%0, %1\n-   stf%?s\\\\t%1, %0\n-   str%?\\\\t%1, [%|sp, #-4]!\\;ldf%?s\\\\t%0, [%|sp], #4\n-   stf%?s\\\\t%1, [%|sp, #-4]!\\;ldr%?\\\\t%0, [%|sp], #4\n-   mov%?\\\\t%0, %1\n-   ldr%?\\\\t%0, %1\\\\t%@ float\n-   str%?\\\\t%1, %0\\\\t%@ float\"\n-  [(set_attr \"length\" \"4,4,4,4,8,8,4,4,4\")\n-   (set_attr \"predicable\" \"yes\")\n-   (set_attr \"type\"\n-\t \"ffarith,ffarith,f_fpa_load,f_fpa_store,r_mem_f,f_mem_r,*,load1,store1\")\n-   (set_attr \"pool_range\" \"*,*,1024,*,*,*,*,4096,*\")\n-   (set_attr \"neg_pool_range\" \"*,*,1012,*,*,*,*,4084,*\")]\n-)\n-\n-(define_insn \"*movdf_fpa\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\"\n-\t\t\t\t\t\t\"=r,Q,r,m,r, f, f,f, m,!f,!r\")\n-\t(match_operand:DF 1 \"general_operand\"\n-\t\t\t\t\t\t\"Q, r,r,r,mF,fG,H,mF,f,r, f\"))]\n-  \"TARGET_ARM\n-   && TARGET_HARD_FLOAT && TARGET_FPA\n-   && (GET_CODE (operands[0]) != MEM\n-       || register_operand (operands[1], DFmode))\"\n-  \"*\n-  {\n-  switch (which_alternative)\n-    {\n-    default:\n-    case 0: return \\\"ldm%(ia%)\\\\t%m1, %M0\\\\t%@ double\\\";\n-    case 1: return \\\"stm%(ia%)\\\\t%m0, %M1\\\\t%@ double\\\";\n-    case 2: return \\\"#\\\";\n-    case 3: case 4: return output_move_double (operands, true, NULL);\n-    case 5: return \\\"mvf%?d\\\\t%0, %1\\\";\n-    case 6: return \\\"mnf%?d\\\\t%0, #%N1\\\";\n-    case 7: return \\\"ldf%?d\\\\t%0, %1\\\";\n-    case 8: return \\\"stf%?d\\\\t%1, %0\\\";\n-    case 9: return output_mov_double_fpa_from_arm (operands);\n-    case 10: return output_mov_double_arm_from_fpa (operands);\n-    }\n-  }\n-  \"\n-  [(set_attr \"length\" \"4,4,8,8,8,4,4,4,4,8,8\")\n-   (set_attr \"predicable\" \"yes\")\n-   (set_attr \"type\"\n-    \"load1,store2,*,store2,load1,ffarith,ffarith,f_fpa_load,f_fpa_store,r_mem_f,f_mem_r\")\n-   (set_attr \"pool_range\" \"*,*,*,*,1020,*,*,1024,*,*,*\")\n-   (set_attr \"neg_pool_range\" \"*,*,*,*,1008,*,*,1008,*,*,*\")]\n-)\n-\n-;; We treat XFmode as meaning 'internal format'.  It's the right size and we\n-;; don't use it for anything else.  We only support moving between FPA\n-;; registers and moving an FPA register to/from memory.\n-(define_insn \"*movxf_fpa\"\n-  [(set (match_operand:XF 0 \"nonimmediate_operand\" \"=f,f,m\")\n-\t(match_operand:XF 1 \"general_operand\" \"f,m,f\"))]\n-  \"TARGET_ARM && TARGET_HARD_FLOAT && TARGET_FPA\n-   && (register_operand (operands[0], XFmode)\n-       || register_operand (operands[1], XFmode))\"\n-  \"*\n-  switch (which_alternative)\n-    {\n-    default:\n-    case 0: return \\\"mvf%?e\\\\t%0, %1\\\";\n-    case 1: if (TARGET_FPA_EMU2)\n-\t      return \\\"ldf%?e\\\\t%0, %1\\\";\n-\t    return \\\"lfm%?\\\\t%0, 1, %1\\\";\n-    case 2: if (TARGET_FPA_EMU2)\n-\t      return \\\"stf%?e\\\\t%1, %0\\\";\n-\t    return \\\"sfm%?\\\\t%1, 1, %0\\\";\n-    }\n-  \"\n-  [(set_attr \"length\" \"4,4,4\")\n-   (set_attr \"predicable\" \"yes\")\n-   (set_attr \"type\" \"ffarith,f_fpa_load,f_fpa_store\")]\n-)\n-\n-;; stfs/ldfs always use a conditional infix.  This works around the\n-;; ambiguity between \"stf pl s\" and \"sftp ls\".\n-(define_insn \"*thumb2_movsf_fpa\"\n-  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=f,f,f, m,f,r,r,r, m\")\n-\t(match_operand:SF 1 \"general_operand\"      \"fG,H,mE,f,r,f,r,mE,r\"))]\n-  \"TARGET_THUMB2\n-   && TARGET_HARD_FLOAT && TARGET_FPA\n-   && (GET_CODE (operands[0]) != MEM\n-       || register_operand (operands[1], SFmode))\"\n-  \"@\n-   mvf%?s\\\\t%0, %1\n-   mnf%?s\\\\t%0, #%N1\n-   ldf%?s\\\\t%0, %1\n-   stf%?s\\\\t%1, %0\n-   str%?\\\\t%1, [%|sp, #-4]!\\;ldf%?s\\\\t%0, [%|sp], #4\n-   stf%?s\\\\t%1, [%|sp, #-4]!\\;ldr%?\\\\t%0, [%|sp], #4\n-   mov%?\\\\t%0, %1 @bar\n-   ldr%?\\\\t%0, %1\\\\t%@ float\n-   str%?\\\\t%1, %0\\\\t%@ float\"\n-  [(set_attr \"length\" \"4,4,4,4,8,8,4,4,4\")\n-   (set_attr \"ce_count\" \"1,1,1,1,2,2,1,1,1\")\n-   (set_attr \"predicable\" \"yes\")\n-   (set_attr \"type\"\n-\t \"ffarith,ffarith,f_fpa_load,f_fpa_store,r_mem_f,f_mem_r,*,load1,store1\")\n-   (set_attr \"pool_range\" \"*,*,1024,*,*,*,*,4096,*\")\n-   (set_attr \"neg_pool_range\" \"*,*,1012,*,*,*,*,0,*\")]\n-)\n-\n-;; Not predicable because we don't know the number of instructions.\n-(define_insn \"*thumb2_movdf_fpa\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\"\n-\t\t\t\t\t\t\"=r,Q,r,m,r, f, f,f, m,!f,!r\")\n-\t(match_operand:DF 1 \"general_operand\"\n-\t\t\t\t\t\t\"Q, r,r,r,mF,fG,H,mF,f,r, f\"))]\n-  \"TARGET_THUMB2\n-   && TARGET_HARD_FLOAT && TARGET_FPA\n-   && (GET_CODE (operands[0]) != MEM\n-       || register_operand (operands[1], DFmode))\"\n-  \"*\n-  {\n-  switch (which_alternative)\n-    {\n-    default:\n-    case 0: return \\\"ldm%(ia%)\\\\t%m1, %M0\\\\t%@ double\\\";\n-    case 1: return \\\"stm%(ia%)\\\\t%m0, %M1\\\\t%@ double\\\";\n-    case 2: case 3: case 4: return output_move_double (operands, true, NULL);\n-    case 5: return \\\"mvf%?d\\\\t%0, %1\\\";\n-    case 6: return \\\"mnf%?d\\\\t%0, #%N1\\\";\n-    case 7: return \\\"ldf%?d\\\\t%0, %1\\\";\n-    case 8: return \\\"stf%?d\\\\t%1, %0\\\";\n-    case 9: return output_mov_double_fpa_from_arm (operands);\n-    case 10: return output_mov_double_arm_from_fpa (operands);\n-    }\n-  }\n-  \"\n-  [(set_attr \"length\" \"4,4,8,8,8,4,4,4,4,8,8\")\n-   (set_attr \"type\"\n-    \"load1,store2,*,store2,load1,ffarith,ffarith,f_fpa_load,f_fpa_store,r_mem_f,f_mem_r\")\n-   (set_attr \"pool_range\" \"*,*,*,*,4092,*,*,1024,*,*,*\")\n-   (set_attr \"neg_pool_range\" \"*,*,*,*,0,*,*,1008,*,*,*\")]\n-)\n-\n-;; Saving and restoring the floating point registers in the prologue should\n-;; be done in XFmode, even though we don't support that for anything else\n-;; (Well, strictly it's 'internal representation', but that's effectively\n-;; XFmode).\n-;; Not predicable because we don't know the number of instructions.\n-\n-(define_insn \"*thumb2_movxf_fpa\"\n-  [(set (match_operand:XF 0 \"nonimmediate_operand\" \"=f,f,f,m,f,r,r\")\n-\t(match_operand:XF 1 \"general_operand\" \"fG,H,m,f,r,f,r\"))]\n-  \"TARGET_THUMB2 && TARGET_HARD_FLOAT && TARGET_FPA && reload_completed\"\n-  \"*\n-  switch (which_alternative)\n-    {\n-    default:\n-    case 0: return \\\"mvf%?e\\\\t%0, %1\\\";\n-    case 1: return \\\"mnf%?e\\\\t%0, #%N1\\\";\n-    case 2: return \\\"ldf%?e\\\\t%0, %1\\\";\n-    case 3: return \\\"stf%?e\\\\t%1, %0\\\";\n-    case 4: return output_mov_long_double_fpa_from_arm (operands);\n-    case 5: return output_mov_long_double_arm_from_fpa (operands);\n-    case 6: return output_mov_long_double_arm_from_arm (operands);\n-    }\n-  \"\n-  [(set_attr \"length\" \"4,4,4,4,8,8,12\")\n-   (set_attr \"type\" \"ffarith,ffarith,f_fpa_load,f_fpa_store,r_mem_f,f_mem_r,*\")\n-   (set_attr \"pool_range\" \"*,*,1024,*,*,*,*\")\n-   (set_attr \"neg_pool_range\" \"*,*,1004,*,*,*,*\")]\n-)\n-\n-(define_insn \"*cmpsf_fpa\"\n-  [(set (reg:CCFP CC_REGNUM)\n-\t(compare:CCFP (match_operand:SF 0 \"s_register_operand\" \"f,f\")\n-\t\t      (match_operand:SF 1 \"arm_float_add_operand\" \"fG,H\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_FPA\"\n-  \"@\n-   cmf%?\\\\t%0, %1\n-   cnf%?\\\\t%0, #%N1\"\n-  [(set_attr \"conds\" \"set\")\n-   (set_attr \"type\" \"f_2_r\")]\n-)\n-\n-(define_insn \"*cmpdf_fpa\"\n-  [(set (reg:CCFP CC_REGNUM)\n-\t(compare:CCFP (match_operand:DF 0 \"s_register_operand\" \"f,f\")\n-\t\t      (match_operand:DF 1 \"arm_float_add_operand\" \"fG,H\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_FPA\"\n-  \"@\n-   cmf%?\\\\t%0, %1\n-   cnf%?\\\\t%0, #%N1\"\n-  [(set_attr \"conds\" \"set\")\n-   (set_attr \"type\" \"f_2_r\")]\n-)\n-\n-(define_insn \"*cmpesfdf_df_fpa\"\n-  [(set (reg:CCFP CC_REGNUM)\n-\t(compare:CCFP (float_extend:DF\n-\t\t       (match_operand:SF 0 \"s_register_operand\" \"f,f\"))\n-\t\t      (match_operand:DF 1 \"arm_float_add_operand\" \"fG,H\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_FPA\"\n-  \"@\n-   cmf%?\\\\t%0, %1\n-   cnf%?\\\\t%0, #%N1\"\n-  [(set_attr \"conds\" \"set\")\n-   (set_attr \"type\" \"f_2_r\")]\n-)\n-\n-(define_insn \"*cmpdf_esfdf_fpa\"\n-  [(set (reg:CCFP CC_REGNUM)\n-\t(compare:CCFP (match_operand:DF 0 \"s_register_operand\" \"f\")\n-\t\t      (float_extend:DF\n-\t\t       (match_operand:SF 1 \"s_register_operand\" \"f\"))))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_FPA\"\n-  \"cmf%?\\\\t%0, %1\"\n-  [(set_attr \"conds\" \"set\")\n-   (set_attr \"type\" \"f_2_r\")]\n-)\n-\n-(define_insn \"*cmpsf_trap_fpa\"\n-  [(set (reg:CCFPE CC_REGNUM)\n-\t(compare:CCFPE (match_operand:SF 0 \"s_register_operand\" \"f,f\")\n-\t\t       (match_operand:SF 1 \"arm_float_add_operand\" \"fG,H\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_FPA\"\n-  \"@\n-   cmf%?e\\\\t%0, %1\n-   cnf%?e\\\\t%0, #%N1\"\n-  [(set_attr \"conds\" \"set\")\n-   (set_attr \"type\" \"f_2_r\")]\n-)\n-\n-(define_insn \"*cmpdf_trap_fpa\"\n-  [(set (reg:CCFPE CC_REGNUM)\n-\t(compare:CCFPE (match_operand:DF 0 \"s_register_operand\" \"f,f\")\n-\t\t       (match_operand:DF 1 \"arm_float_add_operand\" \"fG,H\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_FPA\"\n-  \"@\n-   cmf%?e\\\\t%0, %1\n-   cnf%?e\\\\t%0, #%N1\"\n-  [(set_attr \"conds\" \"set\")\n-   (set_attr \"type\" \"f_2_r\")]\n-)\n-\n-(define_insn \"*cmp_esfdf_df_trap_fpa\"\n-  [(set (reg:CCFPE CC_REGNUM)\n-\t(compare:CCFPE (float_extend:DF\n-\t\t\t(match_operand:SF 0 \"s_register_operand\" \"f,f\"))\n-\t\t       (match_operand:DF 1 \"arm_float_add_operand\" \"fG,H\")))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_FPA\"\n-  \"@\n-   cmf%?e\\\\t%0, %1\n-   cnf%?e\\\\t%0, #%N1\"\n-  [(set_attr \"conds\" \"set\")\n-   (set_attr \"type\" \"f_2_r\")]\n-)\n-\n-(define_insn \"*cmp_df_esfdf_trap_fpa\"\n-  [(set (reg:CCFPE CC_REGNUM)\n-\t(compare:CCFPE (match_operand:DF 0 \"s_register_operand\" \"f\")\n-\t\t       (float_extend:DF\n-\t\t\t(match_operand:SF 1 \"s_register_operand\" \"f\"))))]\n-  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_FPA\"\n-  \"cmf%?e\\\\t%0, %1\"\n-  [(set_attr \"conds\" \"set\")\n-   (set_attr \"type\" \"f_2_r\")]\n-)\n-\n-(define_insn \"*movsfcc_fpa\"\n-  [(set (match_operand:SF 0 \"s_register_operand\" \"=f,f,f,f,f,f,f,f\")\n-\t(if_then_else:SF\n-\t (match_operator 3 \"arm_comparison_operator\" \n-\t  [(match_operand 4 \"cc_register\" \"\") (const_int 0)])\n-\t (match_operand:SF 1 \"arm_float_add_operand\" \"0,0,fG,H,fG,fG,H,H\")\n-\t (match_operand:SF 2 \"arm_float_add_operand\" \"fG,H,0,0,fG,H,fG,H\")))]\n-  \"TARGET_ARM && TARGET_HARD_FLOAT && TARGET_FPA\"\n-  \"@\n-   mvf%D3s\\\\t%0, %2\n-   mnf%D3s\\\\t%0, #%N2\n-   mvf%d3s\\\\t%0, %1\n-   mnf%d3s\\\\t%0, #%N1\n-   mvf%d3s\\\\t%0, %1\\;mvf%D3s\\\\t%0, %2\n-   mvf%d3s\\\\t%0, %1\\;mnf%D3s\\\\t%0, #%N2\n-   mnf%d3s\\\\t%0, #%N1\\;mvf%D3s\\\\t%0, %2\n-   mnf%d3s\\\\t%0, #%N1\\;mnf%D3s\\\\t%0, #%N2\"\n-  [(set_attr \"length\" \"4,4,4,4,8,8,8,8\")\n-   (set_attr \"type\" \"ffarith\")\n-   (set_attr \"conds\" \"use\")]\n-)\n-\n-(define_insn \"*movdfcc_fpa\"\n-  [(set (match_operand:DF 0 \"s_register_operand\" \"=f,f,f,f,f,f,f,f\")\n-\t(if_then_else:DF\n-\t (match_operator 3 \"arm_comparison_operator\"\n-\t  [(match_operand 4 \"cc_register\" \"\") (const_int 0)])\n-\t (match_operand:DF 1 \"arm_float_add_operand\" \"0,0,fG,H,fG,fG,H,H\")\n-\t (match_operand:DF 2 \"arm_float_add_operand\" \"fG,H,0,0,fG,H,fG,H\")))]\n-  \"TARGET_ARM && TARGET_HARD_FLOAT && TARGET_FPA\"\n-  \"@\n-   mvf%D3d\\\\t%0, %2\n-   mnf%D3d\\\\t%0, #%N2\n-   mvf%d3d\\\\t%0, %1\n-   mnf%d3d\\\\t%0, #%N1\n-   mvf%d3d\\\\t%0, %1\\;mvf%D3d\\\\t%0, %2\n-   mvf%d3d\\\\t%0, %1\\;mnf%D3d\\\\t%0, #%N2\n-   mnf%d3d\\\\t%0, #%N1\\;mvf%D3d\\\\t%0, %2\n-   mnf%d3d\\\\t%0, #%N1\\;mnf%D3d\\\\t%0, #%N2\"\n-  [(set_attr \"length\" \"4,4,4,4,8,8,8,8\")\n-   (set_attr \"type\" \"ffarith\")\n-   (set_attr \"conds\" \"use\")]\n-)\n-\n-(define_insn \"*thumb2_movsfcc_fpa\"\n-  [(set (match_operand:SF 0 \"s_register_operand\" \"=f,f,f,f,f,f,f,f\")\n-\t(if_then_else:SF\n-\t (match_operator 3 \"arm_comparison_operator\" \n-\t  [(match_operand 4 \"cc_register\" \"\") (const_int 0)])\n-\t (match_operand:SF 1 \"arm_float_add_operand\" \"0,0,fG,H,fG,fG,H,H\")\n-\t (match_operand:SF 2 \"arm_float_add_operand\" \"fG,H,0,0,fG,H,fG,H\")))]\n-  \"TARGET_THUMB2 && TARGET_HARD_FLOAT && TARGET_FPA\"\n-  \"@\n-   it\\\\t%D3\\;mvf%D3s\\\\t%0, %2\n-   it\\\\t%D3\\;mnf%D3s\\\\t%0, #%N2\n-   it\\\\t%d3\\;mvf%d3s\\\\t%0, %1\n-   it\\\\t%d3\\;mnf%d3s\\\\t%0, #%N1\n-   ite\\\\t%d3\\;mvf%d3s\\\\t%0, %1\\;mvf%D3s\\\\t%0, %2\n-   ite\\\\t%d3\\;mvf%d3s\\\\t%0, %1\\;mnf%D3s\\\\t%0, #%N2\n-   ite\\\\t%d3\\;mnf%d3s\\\\t%0, #%N1\\;mvf%D3s\\\\t%0, %2\n-   ite\\\\t%d3\\;mnf%d3s\\\\t%0, #%N1\\;mnf%D3s\\\\t%0, #%N2\"\n-  [(set_attr \"length\" \"6,6,6,6,10,10,10,10\")\n-   (set_attr \"type\" \"ffarith\")\n-   (set_attr \"conds\" \"use\")]\n-)\n-\n-(define_insn \"*thumb2_movdfcc_fpa\"\n-  [(set (match_operand:DF 0 \"s_register_operand\" \"=f,f,f,f,f,f,f,f\")\n-\t(if_then_else:DF\n-\t (match_operator 3 \"arm_comparison_operator\"\n-\t  [(match_operand 4 \"cc_register\" \"\") (const_int 0)])\n-\t (match_operand:DF 1 \"arm_float_add_operand\" \"0,0,fG,H,fG,fG,H,H\")\n-\t (match_operand:DF 2 \"arm_float_add_operand\" \"fG,H,0,0,fG,H,fG,H\")))]\n-  \"TARGET_THUMB2 && TARGET_HARD_FLOAT && TARGET_FPA\"\n-  \"@\n-   it\\\\t%D3\\;mvf%D3d\\\\t%0, %2\n-   it\\\\t%D3\\;mnf%D3d\\\\t%0, #%N2\n-   it\\\\t%d3\\;mvf%d3d\\\\t%0, %1\n-   it\\\\t%d3\\;mnf%d3d\\\\t%0, #%N1\n-   ite\\\\t%d3\\;mvf%d3d\\\\t%0, %1\\;mvf%D3d\\\\t%0, %2\n-   ite\\\\t%d3\\;mvf%d3d\\\\t%0, %1\\;mnf%D3d\\\\t%0, #%N2\n-   ite\\\\t%d3\\;mnf%d3d\\\\t%0, #%N1\\;mvf%D3d\\\\t%0, %2\n-   ite\\\\t%d3\\;mnf%d3d\\\\t%0, #%N1\\;mnf%D3d\\\\t%0, #%N2\"\n-  [(set_attr \"length\" \"6,6,6,6,10,10,10,10\")\n-   (set_attr \"type\" \"ffarith\")\n-   (set_attr \"conds\" \"use\")]\n-)\n-"}, {"sha": "01713135ecd53c057bc88c35dcba1d3de070bf00", "filename": "gcc/config/arm/t-arm", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fcd8c83abb628bf0f4eefad8c85aaac98aca9d7/gcc%2Fconfig%2Farm%2Ft-arm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fcd8c83abb628bf0f4eefad8c85aaac98aca9d7/gcc%2Fconfig%2Farm%2Ft-arm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-arm?ref=8fcd8c83abb628bf0f4eefad8c85aaac98aca9d7", "patch": "@@ -46,7 +46,6 @@ MD_INCLUDES=\t$(srcdir)/config/arm/arm1020e.md \\\n \t\t$(srcdir)/config/arm/fa626te.md \\\n \t\t$(srcdir)/config/arm/fa726te.md \\\n \t\t$(srcdir)/config/arm/fmp626.md \\\n-\t\t$(srcdir)/config/arm/fpa.md \\\n \t\t$(srcdir)/config/arm/iterators.md \\\n \t\t$(srcdir)/config/arm/iwmmxt.md \\\n \t\t$(srcdir)/config/arm/iwmmxt2.md \\"}]}