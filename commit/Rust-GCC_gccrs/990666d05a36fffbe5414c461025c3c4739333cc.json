{"sha": "990666d05a36fffbe5414c461025c3c4739333cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTkwNjY2ZDA1YTM2ZmZmYmU1NDE0YzQ2MTAyNWMzYzQ3MzkzMzNjYw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-04-17T19:27:23Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-04-17T19:27:23Z"}, "message": "Remove unnecessary string literals from static_assert in C++17 tests\n\nThe string literal is optional in C++17 and all these are empty so add\nno value.\n\n\t* testsuite/20_util/variant/compile.cc: Remove empty string literals\n\tfrom static_assert declarations.\n\nFrom-SVN: r270424", "tree": {"sha": "25824c022575d08daa40558cbfb3bfc55352ddb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25824c022575d08daa40558cbfb3bfc55352ddb8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/990666d05a36fffbe5414c461025c3c4739333cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/990666d05a36fffbe5414c461025c3c4739333cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/990666d05a36fffbe5414c461025c3c4739333cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/990666d05a36fffbe5414c461025c3c4739333cc/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d3e662d294a2861a1c8fb9825edd11013d621c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d3e662d294a2861a1c8fb9825edd11013d621c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d3e662d294a2861a1c8fb9825edd11013d621c1"}], "stats": {"total": 253, "additions": 128, "deletions": 125}, "files": [{"sha": "701e349693c8df06044ab53525b3a2029b38534e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/990666d05a36fffbe5414c461025c3c4739333cc/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/990666d05a36fffbe5414c461025c3c4739333cc/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=990666d05a36fffbe5414c461025c3c4739333cc", "patch": "@@ -1,5 +1,8 @@\n 2019-04-17  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* testsuite/20_util/variant/compile.cc: Remove empty string literals\n+\tfrom static_assert declarations.\n+\n \t* testsuite/20_util/variant/compile.cc (MoveCtorOnly): Fix type to\n \tactually match its name.\n \t(MoveCtorAndSwapOnly): Define new type that adds swap to MoveCtorOnly."}, {"sha": "b67c98adf4a51219c398dfe684b1d371ff96188c", "filename": "libstdc++-v3/testsuite/20_util/variant/compile.cc", "status": "modified", "additions": 125, "deletions": 125, "changes": 250, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/990666d05a36fffbe5414c461025c3c4739333cc/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fcompile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/990666d05a36fffbe5414c461025c3c4739333cc/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fcompile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2Fcompile.cc?ref=990666d05a36fffbe5414c461025c3c4739333cc", "patch": "@@ -77,59 +77,59 @@ struct nonliteral\n \n void default_ctor()\n {\n-  static_assert(is_default_constructible_v<variant<int, string>>, \"\");\n-  static_assert(is_default_constructible_v<variant<string, string>>, \"\");\n-  static_assert(!is_default_constructible_v<variant<AllDeleted, string>>, \"\");\n-  static_assert(is_default_constructible_v<variant<string, AllDeleted>>, \"\");\n-\n-  static_assert(noexcept(variant<int>()), \"\");\n-  static_assert(!noexcept(variant<Empty>()), \"\");\n-  static_assert(noexcept(variant<DefaultNoexcept>()), \"\");\n+  static_assert(is_default_constructible_v<variant<int, string>>);\n+  static_assert(is_default_constructible_v<variant<string, string>>);\n+  static_assert(!is_default_constructible_v<variant<AllDeleted, string>>);\n+  static_assert(is_default_constructible_v<variant<string, AllDeleted>>);\n+\n+  static_assert(noexcept(variant<int>()));\n+  static_assert(!noexcept(variant<Empty>()));\n+  static_assert(noexcept(variant<DefaultNoexcept>()));\n }\n \n void copy_ctor()\n {\n-  static_assert(is_copy_constructible_v<variant<int, string>>, \"\");\n-  static_assert(!is_copy_constructible_v<variant<AllDeleted, string>>, \"\");\n-  static_assert(is_trivially_copy_constructible_v<variant<int>>, \"\");\n-  static_assert(!is_trivially_copy_constructible_v<variant<std::string>>, \"\");\n+  static_assert(is_copy_constructible_v<variant<int, string>>);\n+  static_assert(!is_copy_constructible_v<variant<AllDeleted, string>>);\n+  static_assert(is_trivially_copy_constructible_v<variant<int>>);\n+  static_assert(!is_trivially_copy_constructible_v<variant<std::string>>);\n \n   {\n     variant<int> a;\n-    static_assert(noexcept(variant<int>(a)), \"\");\n+    static_assert(noexcept(variant<int>(a)));\n   }\n   {\n     variant<string> a;\n-    static_assert(!noexcept(variant<string>(a)), \"\");\n+    static_assert(!noexcept(variant<string>(a)));\n   }\n   {\n     variant<int, string> a;\n-    static_assert(!noexcept(variant<int, string>(a)), \"\");\n+    static_assert(!noexcept(variant<int, string>(a)));\n   }\n   {\n     variant<int, char> a;\n-    static_assert(noexcept(variant<int, char>(a)), \"\");\n+    static_assert(noexcept(variant<int, char>(a)));\n   }\n }\n \n void move_ctor()\n {\n-  static_assert(is_move_constructible_v<variant<int, string>>, \"\");\n-  static_assert(!is_move_constructible_v<variant<AllDeleted, string>>, \"\");\n-  static_assert(is_trivially_move_constructible_v<variant<int>>, \"\");\n-  static_assert(!is_trivially_move_constructible_v<variant<std::string>>, \"\");\n-  static_assert(!noexcept(variant<int, Empty>(declval<variant<int, Empty>>())), \"\");\n-  static_assert(noexcept(variant<int, DefaultNoexcept>(declval<variant<int, DefaultNoexcept>>())), \"\");\n+  static_assert(is_move_constructible_v<variant<int, string>>);\n+  static_assert(!is_move_constructible_v<variant<AllDeleted, string>>);\n+  static_assert(is_trivially_move_constructible_v<variant<int>>);\n+  static_assert(!is_trivially_move_constructible_v<variant<std::string>>);\n+  static_assert(!noexcept(variant<int, Empty>(declval<variant<int, Empty>>())));\n+  static_assert(noexcept(variant<int, DefaultNoexcept>(declval<variant<int, DefaultNoexcept>>())));\n }\n \n void arbitrary_ctor()\n {\n-  static_assert(!is_constructible_v<variant<string, string>, const char*>, \"\");\n-  static_assert(is_constructible_v<variant<int, string>, const char*>, \"\");\n-  static_assert(noexcept(variant<int, Empty>(int{})), \"\");\n-  static_assert(noexcept(variant<int, DefaultNoexcept>(int{})), \"\");\n-  static_assert(!noexcept(variant<int, Empty>(Empty{})), \"\");\n-  static_assert(noexcept(variant<int, DefaultNoexcept>(DefaultNoexcept{})), \"\");\n+  static_assert(!is_constructible_v<variant<string, string>, const char*>);\n+  static_assert(is_constructible_v<variant<int, string>, const char*>);\n+  static_assert(noexcept(variant<int, Empty>(int{})));\n+  static_assert(noexcept(variant<int, DefaultNoexcept>(int{})));\n+  static_assert(!noexcept(variant<int, Empty>(Empty{})));\n+  static_assert(noexcept(variant<int, DefaultNoexcept>(DefaultNoexcept{})));\n }\n \n void in_place_index_ctor()\n@@ -142,105 +142,105 @@ void in_place_type_ctor()\n {\n   variant<int, string, int> a(in_place_type<string>, \"a\");\n   variant<int, string, int> b(in_place_type<string>, {'a'});\n-  static_assert(!is_constructible_v<variant<string, string>, in_place_type_t<string>, const char*>, \"\");\n+  static_assert(!is_constructible_v<variant<string, string>, in_place_type_t<string>, const char*>);\n }\n \n void dtor()\n {\n-  static_assert(is_destructible_v<variant<int, string>>, \"\");\n-  static_assert(is_destructible_v<variant<AllDeleted, string>>, \"\");\n+  static_assert(is_destructible_v<variant<int, string>>);\n+  static_assert(is_destructible_v<variant<AllDeleted, string>>);\n }\n \n void copy_assign()\n {\n-  static_assert(is_copy_assignable_v<variant<int, string>>, \"\");\n-  static_assert(!is_copy_assignable_v<variant<AllDeleted, string>>, \"\");\n-  static_assert(is_trivially_copy_assignable_v<variant<int>>, \"\");\n-  static_assert(!is_trivially_copy_assignable_v<variant<string>>, \"\");\n+  static_assert(is_copy_assignable_v<variant<int, string>>);\n+  static_assert(!is_copy_assignable_v<variant<AllDeleted, string>>);\n+  static_assert(is_trivially_copy_assignable_v<variant<int>>);\n+  static_assert(!is_trivially_copy_assignable_v<variant<string>>);\n   {\n     variant<Empty> a;\n-    static_assert(!noexcept(a = a), \"\");\n+    static_assert(!noexcept(a = a));\n   }\n   {\n     variant<DefaultNoexcept> a;\n-    static_assert(noexcept(a = a), \"\");\n+    static_assert(noexcept(a = a));\n   }\n }\n \n void move_assign()\n {\n-  static_assert(is_move_assignable_v<variant<int, string>>, \"\");\n-  static_assert(!is_move_assignable_v<variant<AllDeleted, string>>, \"\");\n-  static_assert(is_trivially_move_assignable_v<variant<int>>, \"\");\n-  static_assert(!is_trivially_move_assignable_v<variant<string>>, \"\");\n+  static_assert(is_move_assignable_v<variant<int, string>>);\n+  static_assert(!is_move_assignable_v<variant<AllDeleted, string>>);\n+  static_assert(is_trivially_move_assignable_v<variant<int>>);\n+  static_assert(!is_trivially_move_assignable_v<variant<string>>);\n   {\n     variant<Empty> a;\n-    static_assert(!noexcept(a = std::move(a)), \"\");\n+    static_assert(!noexcept(a = std::move(a)));\n   }\n   {\n     variant<DefaultNoexcept> a;\n-    static_assert(noexcept(a = std::move(a)), \"\");\n+    static_assert(noexcept(a = std::move(a)));\n   }\n }\n \n void arbitrary_assign()\n {\n-  static_assert(!is_assignable_v<variant<string, string>, const char*>, \"\");\n-  static_assert(is_assignable_v<variant<int, string>, const char*>, \"\");\n-  static_assert(noexcept(variant<int, Empty>() = int{}), \"\");\n-  static_assert(noexcept(variant<int, DefaultNoexcept>() = int{}), \"\");\n-  static_assert(!noexcept(variant<int, Empty>() = Empty{}), \"\");\n-  static_assert(noexcept(variant<int, DefaultNoexcept>() = DefaultNoexcept{}), \"\");\n+  static_assert(!is_assignable_v<variant<string, string>, const char*>);\n+  static_assert(is_assignable_v<variant<int, string>, const char*>);\n+  static_assert(noexcept(variant<int, Empty>() = int{}));\n+  static_assert(noexcept(variant<int, DefaultNoexcept>() = int{}));\n+  static_assert(!noexcept(variant<int, Empty>() = Empty{}));\n+  static_assert(noexcept(variant<int, DefaultNoexcept>() = DefaultNoexcept{}));\n }\n \n void test_get()\n {\n-  static_assert(is_same<decltype(get<0>(variant<int, string>())), int&&>::value, \"\");\n-  static_assert(is_same<decltype(get<1>(variant<int, string>())), string&&>::value, \"\");\n-  static_assert(is_same<decltype(get<1>(variant<int, const string>())), const string&&>::value, \"\");\n+  static_assert(is_same<decltype(get<0>(variant<int, string>())), int&&>::value);\n+  static_assert(is_same<decltype(get<1>(variant<int, string>())), string&&>::value);\n+  static_assert(is_same<decltype(get<1>(variant<int, const string>())), const string&&>::value);\n \n-  static_assert(is_same<decltype(get<int>(variant<int, string>())), int&&>::value, \"\");\n-  static_assert(is_same<decltype(get<string>(variant<int, string>())), string&&>::value, \"\");\n-  static_assert(is_same<decltype(get<const string>(variant<int, const string>())), const string&&>::value, \"\");\n+  static_assert(is_same<decltype(get<int>(variant<int, string>())), int&&>::value);\n+  static_assert(is_same<decltype(get<string>(variant<int, string>())), string&&>::value);\n+  static_assert(is_same<decltype(get<const string>(variant<int, const string>())), const string&&>::value);\n }\n \n void test_relational()\n {\n   {\n     constexpr variant<int, nonliteral> a(42), b(43);\n-    static_assert((a < b), \"\");\n-    static_assert(!(a > b), \"\");\n-    static_assert((a <= b), \"\");\n-    static_assert(!(a == b), \"\");\n-    static_assert((a != b), \"\");\n-    static_assert(!(a >= b), \"\");\n+    static_assert((a < b));\n+    static_assert(!(a > b));\n+    static_assert((a <= b));\n+    static_assert(!(a == b));\n+    static_assert((a != b));\n+    static_assert(!(a >= b));\n   }\n   {\n     constexpr variant<int, nonliteral> a(42), b(42);\n-    static_assert(!(a < b), \"\");\n-    static_assert(!(a > b), \"\");\n-    static_assert((a <= b), \"\");\n-    static_assert((a == b), \"\");\n-    static_assert(!(a != b), \"\");\n-    static_assert((a >= b), \"\");\n+    static_assert(!(a < b));\n+    static_assert(!(a > b));\n+    static_assert((a <= b));\n+    static_assert((a == b));\n+    static_assert(!(a != b));\n+    static_assert((a >= b));\n   }\n   {\n     constexpr variant<int, nonliteral> a(43), b(42);\n-    static_assert(!(a < b), \"\");\n-    static_assert((a > b), \"\");\n-    static_assert(!(a <= b), \"\");\n-    static_assert(!(a == b), \"\");\n-    static_assert((a != b), \"\");\n-    static_assert((a >= b), \"\");\n+    static_assert(!(a < b));\n+    static_assert((a > b));\n+    static_assert(!(a <= b));\n+    static_assert(!(a == b));\n+    static_assert((a != b));\n+    static_assert((a >= b));\n   }\n   {\n     constexpr monostate a, b;\n-    static_assert(!(a < b), \"\");\n-    static_assert(!(a > b), \"\");\n-    static_assert((a <= b), \"\");\n-    static_assert((a == b), \"\");\n-    static_assert(!(a != b), \"\");\n-    static_assert((a >= b), \"\");\n+    static_assert(!(a < b));\n+    static_assert(!(a > b));\n+    static_assert((a <= b));\n+    static_assert((a == b));\n+    static_assert(!(a != b));\n+    static_assert((a >= b));\n   }\n }\n \n@@ -261,10 +261,10 @@ static_assert( !std::is_swappable_v<variant<D, int>> );\n \n void test_swap()\n {\n-  static_assert(is_swappable_v<variant<int, string>>, \"\");\n-  static_assert(!is_swappable_v<variant<MoveCtorOnly>>, \"\");\n-  static_assert(is_swappable_v<variant<MoveCtorAndSwapOnly>>, \"\");\n-  static_assert(!is_swappable_v<variant<AllDeleted>>, \"\");\n+  static_assert(is_swappable_v<variant<int, string>>);\n+  static_assert(!is_swappable_v<variant<MoveCtorOnly>>);\n+  static_assert(is_swappable_v<variant<MoveCtorAndSwapOnly>>);\n+  static_assert(!is_swappable_v<variant<AllDeleted>>);\n }\n \n void test_visit()\n@@ -297,15 +297,15 @@ void test_visit()\n       constexpr bool operator()(const int&) { return true; }\n       constexpr bool operator()(const nonliteral&) { return false; }\n     };\n-    static_assert(visit(Visitor(), variant<int, nonliteral>(0)), \"\");\n+    static_assert(visit(Visitor(), variant<int, nonliteral>(0)));\n   }\n   {\n     struct Visitor\n     {\n       constexpr bool operator()(const int&) { return true; }\n       constexpr bool operator()(const nonliteral&) { return false; }\n     };\n-    static_assert(visit(Visitor(), variant<int, nonliteral>(0)), \"\");\n+    static_assert(visit(Visitor(), variant<int, nonliteral>(0)));\n   }\n   // PR libstdc++/79513\n   {\n@@ -318,17 +318,17 @@ void test_visit()\n void test_constexpr()\n {\n   constexpr variant<int> a;\n-  static_assert(holds_alternative<int>(a), \"\");\n+  static_assert(holds_alternative<int>(a));\n   constexpr variant<int, char> b(in_place_index<0>, int{});\n-  static_assert(holds_alternative<int>(b), \"\");\n+  static_assert(holds_alternative<int>(b));\n   constexpr variant<int, char> c(in_place_type<int>, int{});\n-  static_assert(holds_alternative<int>(c), \"\");\n+  static_assert(holds_alternative<int>(c));\n   constexpr variant<int, char> d(in_place_index<1>, char{});\n-  static_assert(holds_alternative<char>(d), \"\");\n+  static_assert(holds_alternative<char>(d));\n   constexpr variant<int, char> e(in_place_type<char>, char{});\n-  static_assert(holds_alternative<char>(e), \"\");\n+  static_assert(holds_alternative<char>(e));\n   constexpr variant<int, char> f(char{});\n-  static_assert(holds_alternative<char>(f), \"\");\n+  static_assert(holds_alternative<char>(f));\n \n   {\n     struct literal {\n@@ -342,51 +342,51 @@ void test_constexpr()\n \n   {\n     constexpr variant<int> a(42);\n-    static_assert(get<0>(a) == 42, \"\");\n+    static_assert(get<0>(a) == 42);\n   }\n   {\n     constexpr variant<int, nonliteral> a(42);\n-    static_assert(get<0>(a) == 42, \"\");\n+    static_assert(get<0>(a) == 42);\n   }\n   {\n     constexpr variant<nonliteral, int> a(42);\n-    static_assert(get<1>(a) == 42, \"\");\n+    static_assert(get<1>(a) == 42);\n   }\n   {\n     constexpr variant<int> a(42);\n-    static_assert(get<int>(a) == 42, \"\");\n+    static_assert(get<int>(a) == 42);\n   }\n   {\n     constexpr variant<int, nonliteral> a(42);\n-    static_assert(get<int>(a) == 42, \"\");\n+    static_assert(get<int>(a) == 42);\n   }\n   {\n     constexpr variant<nonliteral, int> a(42);\n-    static_assert(get<int>(a) == 42, \"\");\n+    static_assert(get<int>(a) == 42);\n   }\n   {\n     constexpr variant<int> a(42);\n-    static_assert(get<0>(std::move(a)) == 42, \"\");\n+    static_assert(get<0>(std::move(a)) == 42);\n   }\n   {\n     constexpr variant<int, nonliteral> a(42);\n-    static_assert(get<0>(std::move(a)) == 42, \"\");\n+    static_assert(get<0>(std::move(a)) == 42);\n   }\n   {\n     constexpr variant<nonliteral, int> a(42);\n-    static_assert(get<1>(std::move(a)) == 42, \"\");\n+    static_assert(get<1>(std::move(a)) == 42);\n   }\n   {\n     constexpr variant<int> a(42);\n-    static_assert(get<int>(std::move(a)) == 42, \"\");\n+    static_assert(get<int>(std::move(a)) == 42);\n   }\n   {\n     constexpr variant<int, nonliteral> a(42);\n-    static_assert(get<int>(std::move(a)) == 42, \"\");\n+    static_assert(get<int>(std::move(a)) == 42);\n   }\n   {\n     constexpr variant<nonliteral, int> a(42);\n-    static_assert(get<int>(std::move(a)) == 42, \"\");\n+    static_assert(get<int>(std::move(a)) == 42);\n   }\n }\n \n@@ -434,12 +434,12 @@ void test_adl()\n \n void test_variant_alternative()\n {\n-  static_assert(is_same_v<variant_alternative_t<0, variant<int, string>>, int>, \"\");\n-  static_assert(is_same_v<variant_alternative_t<1, variant<int, string>>, string>, \"\");\n+  static_assert(is_same_v<variant_alternative_t<0, variant<int, string>>, int>);\n+  static_assert(is_same_v<variant_alternative_t<1, variant<int, string>>, string>);\n \n-  static_assert(is_same_v<variant_alternative_t<0, const variant<int>>, const int>, \"\");\n-  static_assert(is_same_v<variant_alternative_t<0, volatile variant<int>>, volatile int>, \"\");\n-  static_assert(is_same_v<variant_alternative_t<0, const volatile variant<int>>, const volatile int>, \"\");\n+  static_assert(is_same_v<variant_alternative_t<0, const variant<int>>, const int>);\n+  static_assert(is_same_v<variant_alternative_t<0, volatile variant<int>>, volatile int>);\n+  static_assert(is_same_v<variant_alternative_t<0, const volatile variant<int>>, const volatile int>);\n }\n \n template<typename V, typename T>\n@@ -460,11 +460,11 @@ template<typename V, size_t T>\n \n void test_emplace()\n {\n-  static_assert(has_type_emplace<variant<int>, int>(0), \"\");\n-  static_assert(!has_type_emplace<variant<long>, int>(0), \"\");\n-  static_assert(has_index_emplace<variant<int>, 0>(0), \"\");\n-  static_assert(!has_type_emplace<variant<AllDeleted>, AllDeleted>(0), \"\");\n-  static_assert(!has_index_emplace<variant<AllDeleted>, 0>(0), \"\");\n+  static_assert(has_type_emplace<variant<int>, int>(0));\n+  static_assert(!has_type_emplace<variant<long>, int>(0));\n+  static_assert(has_index_emplace<variant<int>, 0>(0));\n+  static_assert(!has_type_emplace<variant<AllDeleted>, AllDeleted>(0));\n+  static_assert(!has_index_emplace<variant<AllDeleted>, 0>(0));\n }\n \n void test_triviality()\n@@ -479,10 +479,10 @@ void test_triviality()\n       A& operator=(const A&) CA; \\\n       A& operator=(A&&) MA; \\\n     }; \\\n-    static_assert(CC_VAL == is_trivially_copy_constructible_v<variant<A>>, \"\"); \\\n-    static_assert(MC_VAL == is_trivially_move_constructible_v<variant<A>>, \"\"); \\\n-    static_assert(CA_VAL == is_trivially_copy_assignable_v<variant<A>>, \"\"); \\\n-    static_assert(MA_VAL == is_trivially_move_assignable_v<variant<A>>, \"\"); \\\n+    static_assert(CC_VAL == is_trivially_copy_constructible_v<variant<A>>); \\\n+    static_assert(MC_VAL == is_trivially_move_constructible_v<variant<A>>); \\\n+    static_assert(CA_VAL == is_trivially_copy_assignable_v<variant<A>>); \\\n+    static_assert(MA_VAL == is_trivially_move_assignable_v<variant<A>>); \\\n   }\n   TEST_TEMPLATE(=default, =default, =default, =default, =default,  true,  true,  true,  true)\n   TEST_TEMPLATE(=default, =default, =default, =default,         ,  true,  true,  true, false)\n@@ -527,10 +527,10 @@ void test_triviality()\n       A& operator=(const A&) CA; \\\n       A& operator=(A&&) MA; \\\n     }; \\\n-    static_assert(!is_trivially_copy_constructible_v<variant<AllDeleted, A>>, \"\"); \\\n-    static_assert(!is_trivially_move_constructible_v<variant<AllDeleted, A>>, \"\"); \\\n-    static_assert(!is_trivially_copy_assignable_v<variant<AllDeleted, A>>, \"\"); \\\n-    static_assert(!is_trivially_move_assignable_v<variant<AllDeleted, A>>, \"\"); \\\n+    static_assert(!is_trivially_copy_constructible_v<variant<AllDeleted, A>>); \\\n+    static_assert(!is_trivially_move_constructible_v<variant<AllDeleted, A>>); \\\n+    static_assert(!is_trivially_copy_assignable_v<variant<AllDeleted, A>>); \\\n+    static_assert(!is_trivially_move_assignable_v<variant<AllDeleted, A>>); \\\n   }\n   TEST_TEMPLATE(=default, =default, =default, =default)\n   TEST_TEMPLATE(=default, =default, =default,         )\n@@ -550,8 +550,8 @@ void test_triviality()\n   TEST_TEMPLATE(        ,         ,         ,         )\n #undef TEST_TEMPLATE\n \n-  static_assert(is_trivially_copy_constructible_v<variant<DefaultNoexcept, int, char, float, double>>, \"\");\n-  static_assert(is_trivially_move_constructible_v<variant<DefaultNoexcept, int, char, float, double>>, \"\");\n-  static_assert(is_trivially_copy_assignable_v<variant<DefaultNoexcept, int, char, float, double>>, \"\");\n-  static_assert(is_trivially_move_assignable_v<variant<DefaultNoexcept, int, char, float, double>>, \"\");\n+  static_assert(is_trivially_copy_constructible_v<variant<DefaultNoexcept, int, char, float, double>>);\n+  static_assert(is_trivially_move_constructible_v<variant<DefaultNoexcept, int, char, float, double>>);\n+  static_assert(is_trivially_copy_assignable_v<variant<DefaultNoexcept, int, char, float, double>>);\n+  static_assert(is_trivially_move_assignable_v<variant<DefaultNoexcept, int, char, float, double>>);\n }"}]}