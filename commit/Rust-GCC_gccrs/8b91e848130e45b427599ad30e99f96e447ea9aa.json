{"sha": "8b91e848130e45b427599ad30e99f96e447ea9aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGI5MWU4NDgxMzBlNDViNDI3NTk5YWQzMGU5OWY5NmU0NDdlYTlhYQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-01-24T23:20:56Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-01-25T03:18:46Z"}, "message": "c++: Fix ICE with lambda in member operator (PR93279)\n\nHere the problem was that we were remembering the lookup in template scope,\nand then trying to reuse that lookup in the instantiation without\nsubstituting into it at all.  The simplest solution is to not try to\nremember a lookup that finds a class-scope declaration, as in that case\ndoing the normal lookup again at instantiation time will always find the\nright declarations.\n\n\tPR c++/93279 - ICE with lambda in member operator.\n\t* name-lookup.c (maybe_save_operator_binding): Don't remember\n\tclass-scope bindings.", "tree": {"sha": "851e36138628752ac727b597064877aeb0d5eabb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/851e36138628752ac727b597064877aeb0d5eabb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b91e848130e45b427599ad30e99f96e447ea9aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b91e848130e45b427599ad30e99f96e447ea9aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b91e848130e45b427599ad30e99f96e447ea9aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b91e848130e45b427599ad30e99f96e447ea9aa/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c671727004b87f0f256191c3a99c50dc4888e79b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c671727004b87f0f256191c3a99c50dc4888e79b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c671727004b87f0f256191c3a99c50dc4888e79b"}], "stats": {"total": 27, "additions": 27, "deletions": 0}, "files": [{"sha": "764b9ccffa384d668a4c250a2d2cb4c1ee6a8b0e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b91e848130e45b427599ad30e99f96e447ea9aa/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b91e848130e45b427599ad30e99f96e447ea9aa/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8b91e848130e45b427599ad30e99f96e447ea9aa", "patch": "@@ -1,3 +1,9 @@\n+2020-01-24  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/93279 - ICE with lambda in member operator.\n+\t* name-lookup.c (maybe_save_operator_binding): Don't remember\n+\tclass-scope bindings.\n+\n 2020-01-24  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/93377 - ICE with member alias in constraint."}, {"sha": "572100766cb345deb8967f9866331ca43eef25ca", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b91e848130e45b427599ad30e99f96e447ea9aa/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b91e848130e45b427599ad30e99f96e447ea9aa/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=8b91e848130e45b427599ad30e99f96e447ea9aa", "patch": "@@ -7616,6 +7616,12 @@ maybe_save_operator_binding (tree e)\n \n   if (!fns && (fns = op_unqualified_lookup (fnname)))\n     {\n+      tree fn = get_first_fn (fns);\n+      if (DECL_CLASS_SCOPE_P (fn))\n+\t/* We don't need to remember class-scope functions, normal unqualified\n+\t   lookup will find them again.  */\n+\treturn;\n+\n       bindings = tree_cons (fnname, fns, bindings);\n       if (attr)\n \tTREE_VALUE (attr) = bindings;"}, {"sha": "faaff68b968fb5804fc3451045daf751d2d0bf8e", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-template16.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b91e848130e45b427599ad30e99f96e447ea9aa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-template16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b91e848130e45b427599ad30e99f96e447ea9aa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-template16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-template16.C?ref=8b91e848130e45b427599ad30e99f96e447ea9aa", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/93279\n+// { dg-do compile { target c++11 } }\n+\n+template <typename T> struct B { using f = int; };\n+template <typename T, int N> struct E {\n+  template <typename U, typename B<E>::f = 0>\n+  void operator*(U l) { [l](T m) { m * l; }; }\n+};\n+\n+int\n+main ()\n+{\n+  E<E<float, 4>, 1> n;\n+  n * 4.f;\n+}"}]}