{"sha": "a38fa1b31f758500dba21f5bb6e5c8f4770362a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTM4ZmExYjMxZjc1ODUwMGRiYTIxZjViYjZlNWM4ZjQ3NzAzNjJhOQ==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-03-11T21:57:49Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-03-11T21:57:49Z"}, "message": "libstdc++: Factor out uses of __int128 into a type alias\n\nSince Ryu has the alias uint128_t for this same purpose, it seems best\nfor us to use this name as well, so as to minimize the amount of local\nmodifications we'd need to make to our copy of Ryu.  (In a subsequent\npatch, we're going to remove Ryu's aliases so that it uses this one\ndefined in floating_to_chars.cc.)\n\nlibstdc++-v3/ChangeLog:\n\n\t* src/c++17/floating_to_chars.cc (uint128_t): New conditionally\n\tdefined alias of unsigned __int128.\n\t(floating_type_traits_binary128::mantissa_t): Use uint128_t\n\tinstead of unsigned __int128.\n\t(floating_type_traits<long double>::mantissa_t)\n\t[LONG_DOUBLE_KIND == LDK_IBM128]: Likewise.\n\t(get_ieee_repr): Likewise.  Make casts from uint_t to mantissa_t\n\tand uint32_t explicit.  Simplify the extraction of mantissa,\n\texponent and sign bit.", "tree": {"sha": "8089617c3d5f6aebd7157f18896b3a54330b271e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8089617c3d5f6aebd7157f18896b3a54330b271e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a38fa1b31f758500dba21f5bb6e5c8f4770362a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a38fa1b31f758500dba21f5bb6e5c8f4770362a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a38fa1b31f758500dba21f5bb6e5c8f4770362a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a38fa1b31f758500dba21f5bb6e5c8f4770362a9/comments", "author": null, "committer": null, "parents": [{"sha": "26ed5a28b18ad080e51e6b61f5f60d67b66fd5f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26ed5a28b18ad080e51e6b61f5f60d67b66fd5f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26ed5a28b18ad080e51e6b61f5f60d67b66fd5f3"}], "stats": {"total": 25, "additions": 16, "deletions": 9}, "files": [{"sha": "da3fbaa1ed1bfde9a551afeaa56609fcec0d2e51", "filename": "libstdc++-v3/src/c++17/floating_to_chars.cc", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a38fa1b31f758500dba21f5bb6e5c8f4770362a9/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffloating_to_chars.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a38fa1b31f758500dba21f5bb6e5c8f4770362a9/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffloating_to_chars.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffloating_to_chars.cc?ref=a38fa1b31f758500dba21f5bb6e5c8f4770362a9", "patch": "@@ -98,6 +98,10 @@ using F128_type = void;\n \n namespace\n {\n+#if defined __SIZEOF_INT128__\n+  using uint128_t = unsigned __int128;\n+#endif\n+\n   namespace ryu\n   {\n #include \"ryu/common.h\"\n@@ -171,7 +175,7 @@ namespace\n     static constexpr int mantissa_bits = 112;\n     static constexpr int exponent_bits = 15;\n     static constexpr bool has_implicit_leading_bit = true;\n-    using mantissa_t = unsigned __int128;\n+    using mantissa_t = uint128_t;\n     using shortest_scientific_t = ryu::floating_decimal_128;\n \n     static constexpr uint64_t pow10_adjustment_tab[]\n@@ -367,7 +371,7 @@ namespace\n       static constexpr int mantissa_bits = 105;\n       static constexpr int exponent_bits = 11;\n       static constexpr bool has_implicit_leading_bit = true;\n-      using mantissa_t = unsigned __int128;\n+      using mantissa_t = uint128_t;\n       using shortest_scientific_t = ryu::floating_decimal_128;\n \n       static constexpr uint64_t pow10_adjustment_tab[]\n@@ -393,6 +397,7 @@ namespace\n     ieee_t<T>\n     get_ieee_repr(const T value)\n     {\n+      using mantissa_t = typename floating_type_traits<T>::mantissa_t;\n       constexpr int mantissa_bits = floating_type_traits<T>::mantissa_bits;\n       constexpr int exponent_bits = floating_type_traits<T>::exponent_bits;\n       constexpr int total_bits = mantissa_bits + exponent_bits + 1;\n@@ -404,18 +409,21 @@ namespace\n \t  return uint64_t{};\n #ifdef __SIZEOF_INT128__\n \telse if constexpr (total_bits <= 128)\n-\t  return (unsigned __int128){};\n+\t  return uint128_t{};\n #endif\n       };\n       using uint_t = decltype(get_uint_t());\n       uint_t value_bits = 0;\n       memcpy(&value_bits, &value, sizeof(value));\n \n       ieee_t<T> ieee_repr;\n-      ieee_repr.mantissa = value_bits & ((uint_t{1} << mantissa_bits) - 1u);\n+      ieee_repr.mantissa\n+\t= static_cast<mantissa_t>(value_bits & ((uint_t{1} << mantissa_bits) - 1u));\n+      value_bits >>= mantissa_bits;\n       ieee_repr.biased_exponent\n-\t= (value_bits >> mantissa_bits) & ((uint_t{1} << exponent_bits) - 1u);\n-      ieee_repr.sign = (value_bits >> (mantissa_bits + exponent_bits)) & 1;\n+\t= static_cast<uint32_t>(value_bits & ((uint_t{1} << exponent_bits) - 1u));\n+      value_bits >>= exponent_bits;\n+      ieee_repr.sign = (value_bits & 1) != 0;\n       return ieee_repr;\n     }\n \n@@ -430,7 +438,6 @@ namespace\n       // mantissa (plus an implicit leading bit).  We use the exponent and sign\n       // of the high part, and we merge the mantissa of the high part with the\n       // mantissa (and the implicit leading bit) of the low part.\n-      using uint_t = unsigned __int128;\n       uint64_t value_bits[2] = {};\n       memcpy(value_bits, &value, sizeof(value_bits));\n \n@@ -478,8 +485,8 @@ namespace\n \t}\n \n       ieee_t<long double> ieee_repr;\n-      ieee_repr.mantissa = ((uint_t{mantissa_hi} << 64)\n-\t\t\t    | (uint_t{mantissa_lo} << 4)) >> 11;\n+      ieee_repr.mantissa = ((uint128_t{mantissa_hi} << 64)\n+\t\t\t    | (uint128_t{mantissa_lo} << 4)) >> 11;\n       ieee_repr.biased_exponent = exponent_hi;\n       ieee_repr.sign = sign_hi;\n       return ieee_repr;"}]}