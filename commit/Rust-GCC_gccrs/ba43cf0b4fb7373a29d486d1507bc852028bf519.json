{"sha": "ba43cf0b4fb7373a29d486d1507bc852028bf519", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmE0M2NmMGI0ZmI3MzczYTI5ZDQ4NmQxNTA3YmM4NTIwMjhiZjUxOQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-08-15T23:08:58Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-08-15T23:08:58Z"}, "message": "2832.cc: Remove junk.\n\n2004-08-15  Paolo Carlini  <pcarlini@suse.de>\n\n\t* testsuite/27_io/basic_stringstream/rdbuf/char/2832.cc: Remove junk.\n\t* testsuite/27_io/basic_stringstream/str/char/1.cc: Likewise.\n\t* testsuite/27_io/basic_stringstream/str/char/3.cc: Likewise.\n\n\t* testsuite/27_io/basic_stringstream/rdbuf/wchar_t/2832.cc: New.\n\t* testsuite/27_io/basic_stringstream/str/wchar_t/1.cc: Likewise.\n\t* testsuite/27_io/basic_stringstream/str/wchar_t/2.cc: Likewise.\n\t* testsuite/27_io/basic_stringstream/str/wchar_t/3.cc: Likewise.\n\t* testsuite/27_io/basic_stringstream/str/wchar_t/4.cc: Likewise.\n\n2004-08-15  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/deque.tcc: Trivial formatting fixes.\n\nFrom-SVN: r86040", "tree": {"sha": "2e9de3ca07a7fd19b68c62d83e541a8866250f08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e9de3ca07a7fd19b68c62d83e541a8866250f08"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba43cf0b4fb7373a29d486d1507bc852028bf519", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba43cf0b4fb7373a29d486d1507bc852028bf519", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba43cf0b4fb7373a29d486d1507bc852028bf519", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba43cf0b4fb7373a29d486d1507bc852028bf519/comments", "author": null, "committer": null, "parents": [{"sha": "9a4d6480b8ef0b589169e0906154fc164b3a267c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a4d6480b8ef0b589169e0906154fc164b3a267c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a4d6480b8ef0b589169e0906154fc164b3a267c"}], "stats": {"total": 363, "additions": 336, "deletions": 27}, "files": [{"sha": "58c0aa9dbd905e2e5fbc9a6fe5b05d4617825c4e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba43cf0b4fb7373a29d486d1507bc852028bf519/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba43cf0b4fb7373a29d486d1507bc852028bf519/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ba43cf0b4fb7373a29d486d1507bc852028bf519", "patch": "@@ -1,3 +1,19 @@\n+2004-08-15  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* testsuite/27_io/basic_stringstream/rdbuf/char/2832.cc: Remove junk.\n+\t* testsuite/27_io/basic_stringstream/str/char/1.cc: Likewise.\n+\t* testsuite/27_io/basic_stringstream/str/char/3.cc: Likewise.\n+\n+\t* testsuite/27_io/basic_stringstream/rdbuf/wchar_t/2832.cc: New.\n+\t* testsuite/27_io/basic_stringstream/str/wchar_t/1.cc: Likewise.\n+\t* testsuite/27_io/basic_stringstream/str/wchar_t/2.cc: Likewise.\n+\t* testsuite/27_io/basic_stringstream/str/wchar_t/3.cc: Likewise.\n+\t* testsuite/27_io/basic_stringstream/str/wchar_t/4.cc: Likewise.\n+\n+2004-08-15  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/deque.tcc: Trivial formatting fixes.\n+\n 2004-08-15  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/deque.tcc: Trivial formatting fixes."}, {"sha": "0c57bd53a11462db02e4bf6b68ad82bc0372a173", "filename": "libstdc++-v3/include/bits/deque.tcc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba43cf0b4fb7373a29d486d1507bc852028bf519/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba43cf0b4fb7373a29d486d1507bc852028bf519/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc?ref=ba43cf0b4fb7373a29d486d1507bc852028bf519", "patch": "@@ -268,12 +268,11 @@ namespace _GLIBCXX_STD\n           for (__cur = this->_M_impl._M_start._M_node;\n \t       __cur < this->_M_impl._M_finish._M_node;\n \t       ++__cur)\n-            std::__uninitialized_fill_a(*__cur, *__cur + _S_buffer_size(), __value,\n-\t\t\t\t\tthis->get_allocator());\n+            std::__uninitialized_fill_a(*__cur, *__cur + _S_buffer_size(),\n+\t\t\t\t\t__value, this->get_allocator());\n           std::__uninitialized_fill_a(this->_M_impl._M_finish._M_first,\n \t\t\t\t      this->_M_impl._M_finish._M_cur,\n-\t\t\t\t      __value,\n-\t\t\t\t      this->get_allocator());\n+\t\t\t\t      __value, this->get_allocator());\n         }\n       catch(...)\n         {\n@@ -519,8 +518,8 @@ namespace _GLIBCXX_STD\n \t\t{\n \t\t  iterator __start_n = (this->_M_impl._M_start\n \t\t\t\t\t+ difference_type(__n));\n-\t\t  std::__uninitialized_copy_a(this->_M_impl._M_start, __start_n,\n-\t\t\t\t\t      __new_start,\n+\t\t  std::__uninitialized_copy_a(this->_M_impl._M_start,\n+\t\t\t\t\t      __start_n, __new_start,\n \t\t\t\t\t      this->get_allocator());\n \t\t  this->_M_impl._M_start = __new_start;\n \t\t  std::copy(__start_n, __pos, __old_start);\n@@ -557,7 +556,8 @@ namespace _GLIBCXX_STD\n \t\t{\n \t\t  iterator __finish_n = (this->_M_impl._M_finish\n \t\t\t\t\t - difference_type(__n));\n-\t\t  std::__uninitialized_copy_a(__finish_n, this->_M_impl._M_finish,\n+\t\t  std::__uninitialized_copy_a(__finish_n,\n+\t\t\t\t\t      this->_M_impl._M_finish,\n \t\t\t\t\t      this->_M_impl._M_finish,\n \t\t\t\t\t      this->get_allocator());\n \t\t  this->_M_impl._M_finish = __new_finish;\n@@ -605,8 +605,8 @@ namespace _GLIBCXX_STD\n \t\t  {\n \t\t    iterator __start_n = (this->_M_impl._M_start\n \t\t\t\t\t  + difference_type(__n));\n-\t\t    std::__uninitialized_copy_a(this->_M_impl._M_start, __start_n,\n-\t\t\t\t\t\t__new_start,\n+\t\t    std::__uninitialized_copy_a(this->_M_impl._M_start,\n+\t\t\t\t\t\t__start_n, __new_start,\n \t\t\t\t\t\tthis->get_allocator());\n \t\t    this->_M_impl._M_start = __new_start;\n \t\t    std::copy(__start_n, __pos, __old_start);"}, {"sha": "7ea26bc4ce5aa09db40600e2d76b83ebb8e834f6", "filename": "libstdc++-v3/testsuite/27_io/basic_stringstream/rdbuf/char/2832.cc", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba43cf0b4fb7373a29d486d1507bc852028bf519/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Frdbuf%2Fchar%2F2832.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba43cf0b4fb7373a29d486d1507bc852028bf519/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Frdbuf%2Fchar%2F2832.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Frdbuf%2Fchar%2F2832.cc?ref=ba43cf0b4fb7373a29d486d1507bc852028bf519", "patch": "@@ -35,10 +35,6 @@ active_buffer(std::ios& stream)\n void test02()\n {\n   bool test __attribute__((unused)) = true;\n-  const char* strlit01 = \"fuck war\";\n-  const std::string str00;\n-  const std::string str01(strlit01);\n-  std::string str02;\n   std::stringbuf sbuf;\n   std::streambuf* pbasebuf0 = &sbuf;\n \n@@ -64,6 +60,3 @@ int main()\n   test02();\n   return 0;\n }\n-\n-\n-"}, {"sha": "74b3cb2c879dcc74fba2e9beb4027d253707d6b5", "filename": "libstdc++-v3/testsuite/27_io/basic_stringstream/rdbuf/wchar_t/2832.cc", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba43cf0b4fb7373a29d486d1507bc852028bf519/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Frdbuf%2Fwchar_t%2F2832.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba43cf0b4fb7373a29d486d1507bc852028bf519/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Frdbuf%2Fwchar_t%2F2832.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Frdbuf%2Fwchar_t%2F2832.cc?ref=ba43cf0b4fb7373a29d486d1507bc852028bf519", "patch": "@@ -0,0 +1,60 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.7.6 - Member functions [lib.stringstream.members]\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void \n+redirect_buffer(std::wios& stream, std::wstreambuf* new_buf) \n+{ stream.rdbuf(new_buf); }\n+\n+std::wstreambuf*\n+active_buffer(std::wios& stream)\n+{ return stream.rdbuf(); }\n+\n+// libstdc++/2832\n+void test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+  std::wstringbuf sbuf;\n+  std::wstreambuf* pbasebuf0 = &sbuf;\n+\n+  std::wstringstream sstrm1;\n+  // derived rdbuf() always returns original streambuf, even though\n+  // it's no longer associated with the stream.\n+  std::wstringbuf* const buf1 = sstrm1.rdbuf();\n+  // base rdbuf() returns the currently associated streambuf\n+  std::wstreambuf* pbasebuf1 = active_buffer(sstrm1);\n+  redirect_buffer(sstrm1, &sbuf);\n+  std::wstringbuf* const buf2 = sstrm1.rdbuf();\n+  std::wstreambuf* pbasebuf2 = active_buffer(sstrm1);\n+  VERIFY( buf1 == buf2 ); \n+  VERIFY( pbasebuf1 != pbasebuf2 );\n+  VERIFY( pbasebuf2 == pbasebuf0 );\n+\n+  // How confusing and non-intuitive is this?\n+  // These semantics are a joke, a serious defect, and incredibly lame.\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "9ad1f3d230fca473d88805eeda212c21f667cdc5", "filename": "libstdc++-v3/testsuite/27_io/basic_stringstream/str/char/1.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba43cf0b4fb7373a29d486d1507bc852028bf519/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fstr%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba43cf0b4fb7373a29d486d1507bc852028bf519/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fstr%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fstr%2Fchar%2F1.cc?ref=ba43cf0b4fb7373a29d486d1507bc852028bf519", "patch": "@@ -33,8 +33,7 @@ void test01()\n   const int i01 = 123;\n   int a,b;\n \n-  std::ios_base::iostate state1, state2, statefail, stateeof;\n-  statefail = std::ios_base::failbit;\n+  std::ios_base::iostate state1, state2, stateeof;\n   stateeof = std::ios_base::eofbit;\n \n   // string str() const"}, {"sha": "71371d3a9bb46b05401b4f955787705ba82ee056", "filename": "libstdc++-v3/testsuite/27_io/basic_stringstream/str/char/3.cc", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba43cf0b4fb7373a29d486d1507bc852028bf519/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fstr%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba43cf0b4fb7373a29d486d1507bc852028bf519/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fstr%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fstr%2Fchar%2F3.cc?ref=ba43cf0b4fb7373a29d486d1507bc852028bf519", "patch": "@@ -1,6 +1,6 @@\n // 2001-05-24 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -40,22 +40,16 @@ test03()\n   std::ostringstream ostrst02(blank); \n   \n   // No buffer, so should be created.\n-  ostrst01 << \"i: \" << i << \" i's address:  \" << pi << \"\\n\"\n+  ostrst01 << \"i: \" << i << \" i's address:  \" << pi << '\\n'\n \t     << \"d: \" << d << \" d's address: \" << pd << std::endl;\n   // Buffer, so existing buffer should be overwritten.\n-  ostrst02 << \"i: \" << i << \" i's address:  \" << pi << \"\\n\"\n+  ostrst02 << \"i: \" << i << \" i's address:  \" << pi << '\\n'\n \t     << \"d: \" << d << \" d's address: \" << pd << std::endl;\n \n   std::string msg01 = ostrst01.str();\n   std::string msg02 = ostrst02.str();\n   VERIFY( msg01 == msg02 );\n   VERIFY( msg02 != blank );\n-\n-  // stringstream\n-  std::string str1(\"\");\n-  std::string str3(\"this is a somewhat  string\");\n-  std::stringstream ss1(str1, std::ios_base::in|std::ios_base::out);\n-  std::stringstream ss2(str3, std::ios_base::in|std::ios_base::out);\n }\n \n int main()"}, {"sha": "5534a9a783fd418c7bb037f6c70de5de8f0cb9cb", "filename": "libstdc++-v3/testsuite/27_io/basic_stringstream/str/wchar_t/1.cc", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba43cf0b4fb7373a29d486d1507bc852028bf519/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fstr%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba43cf0b4fb7373a29d486d1507bc852028bf519/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fstr%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fstr%2Fwchar_t%2F1.cc?ref=ba43cf0b4fb7373a29d486d1507bc852028bf519", "patch": "@@ -0,0 +1,74 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.7.6 member functions (stringstream_members)\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  std::wstringstream is01;\n+  const std::wstring str00; \n+  const std::wstring str01 = L\"123\";\n+  std::wstring str02;\n+  const int i01 = 123;\n+  int a,b;\n+\n+  std::ios_base::iostate state1, state2, stateeof;\n+  stateeof = std::ios_base::eofbit;\n+\n+  // string str() const\n+  str02 = is01.str();\n+  VERIFY( str00 == str02 );\n+\n+  // void str(const basic_string&)\n+  is01.str(str01);\n+  str02 = is01.str();\n+  VERIFY( str01 == str02 );\n+  state1 = is01.rdstate();\n+  is01 >> a;\n+  state2 = is01.rdstate();\n+  VERIFY( a == i01 );\n+  // 22.2.2.1.2 num_get virtual functions\n+  // p 13\n+  // in any case, if stage 2 processing was terminated by the test for\n+  // in == end then err != ios_base::eofbit is performed.\n+  VERIFY( state1 != state2 );\n+  VERIFY( state2 == stateeof ); \n+\n+  is01.str(str01);\n+  is01 >> b;\n+  VERIFY( b != a ); \n+  // as is01.good() is false, istream::sentry blocks extraction.\n+\n+  is01.clear();\n+  state1 = is01.rdstate();\n+  is01 >> b;\n+  state2 = is01.rdstate();\n+  VERIFY( b == a ); \n+  VERIFY( state1 != state2 );\n+  VERIFY( state2 == stateeof ); \n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "32ed0e3d66a5654497128d2cbf65b12a9db7e0e3", "filename": "libstdc++-v3/testsuite/27_io/basic_stringstream/str/wchar_t/2.cc", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba43cf0b4fb7373a29d486d1507bc852028bf519/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fstr%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba43cf0b4fb7373a29d486d1507bc852028bf519/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fstr%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fstr%2Fwchar_t%2F2.cc?ref=ba43cf0b4fb7373a29d486d1507bc852028bf519", "patch": "@@ -0,0 +1,73 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.7.6 member functions (stringstream_members)\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void \n+redirect_buffer(std::wios& stream, std::wstreambuf* new_buf) \n+{ stream.rdbuf(new_buf); }\n+\n+std::wstreambuf*\n+active_buffer(std::wios& stream)\n+{ return stream.rdbuf(); }\n+\n+// libstdc++/2832\n+void test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+  const wchar_t* strlit01 = L\"fuck war\";\n+  const std::wstring str00;\n+  const std::wstring str01(strlit01);\n+  std::wstring str02;\n+  std::wstringbuf sbuf(str01);\n+  std::wstreambuf* pbasebuf0 = &sbuf;\n+\n+  std::wstringstream sstrm1;\n+  VERIFY( sstrm1.str() == str00 );\n+  // derived rdbuf() always returns original streambuf, even though\n+  // it's no longer associated with the stream.\n+  std::wstringbuf* const buf1 = sstrm1.rdbuf();\n+  // base rdbuf() returns the currently associated streambuf\n+  std::wstreambuf* pbasebuf1 = active_buffer(sstrm1);\n+  redirect_buffer(sstrm1, &sbuf);\n+  std::wstringbuf* const buf2 = sstrm1.rdbuf();\n+  std::wstreambuf* pbasebuf2 = active_buffer(sstrm1);\n+  VERIFY( buf1 == buf2 ); \n+  VERIFY( pbasebuf1 != pbasebuf2 );\n+  VERIFY( pbasebuf2 == pbasebuf0 );\n+\n+  // derived rdbuf() returns the original buf, so str() doesn't change.\n+  VERIFY( sstrm1.str() != str01 );\n+  VERIFY( sstrm1.str() == str00 );\n+  // however, casting the active streambuf to a stringbuf shows what's up:\n+  std::wstringbuf* psbuf = dynamic_cast<std::wstringbuf*>(pbasebuf2);\n+  str02 = psbuf->str();\n+  VERIFY( str02 == str01 );\n+\n+  // How confusing and non-intuitive is this?\n+  // These semantics are a joke, a serious defect, and incredibly lame.\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "664a65ef6d27587070e0fc40f461f441b217a6dc", "filename": "libstdc++-v3/testsuite/27_io/basic_stringstream/str/wchar_t/3.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba43cf0b4fb7373a29d486d1507bc852028bf519/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fstr%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba43cf0b4fb7373a29d486d1507bc852028bf519/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fstr%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fstr%2Fwchar_t%2F3.cc?ref=ba43cf0b4fb7373a29d486d1507bc852028bf519", "patch": "@@ -0,0 +1,57 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.7.6 member functions (stringstream_members)\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test03()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  //\n+  // 1: Automatic formatting of a compound string\n+  //\n+  int i = 1024;\n+  int *pi = &i;\n+  double d = 3.14159;\n+  double *pd = &d;\n+  std::wstring blank;\n+  std::wostringstream ostrst01; \n+  std::wostringstream ostrst02(blank); \n+  \n+  // No buffer, so should be created.\n+  ostrst01 << L\"i: \" << i << L\" i's address:  \" << pi << L'\\n'\n+\t     << L\"d: \" << d << L\" d's address: \" << pd << std::endl;\n+  // Buffer, so existing buffer should be overwritten.\n+  ostrst02 << L\"i: \" << i << L\" i's address:  \" << pi << L'\\n'\n+\t     << L\"d: \" << d << L\" d's address: \" << pd << std::endl;\n+\n+  std::wstring msg01 = ostrst01.str();\n+  std::wstring msg02 = ostrst02.str();\n+  VERIFY( msg01 == msg02 );\n+  VERIFY( msg02 != blank );\n+}\n+\n+int main()\n+{\n+  test03();\n+  return 0;\n+}"}, {"sha": "8c2cffc2ddb73c4943418c3367d9e0718a7174fd", "filename": "libstdc++-v3/testsuite/27_io/basic_stringstream/str/wchar_t/4.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba43cf0b4fb7373a29d486d1507bc852028bf519/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fstr%2Fwchar_t%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba43cf0b4fb7373a29d486d1507bc852028bf519/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fstr%2Fwchar_t%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fstr%2Fwchar_t%2F4.cc?ref=ba43cf0b4fb7373a29d486d1507bc852028bf519", "patch": "@@ -0,0 +1,43 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.7.6 member functions (stringstream_members)\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/8466\n+void test04()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  const wchar_t* strlit00 = L\"orvieto\";\n+  const std::wstring str00 = strlit00;\n+\n+  std::wostringstream oss;\n+\n+  oss.str(str00);\n+  oss << L\"cortona\";\n+  VERIFY( str00 == strlit00 );\n+}\n+\n+int main()\n+{\n+  test04();\n+  return 0;\n+}"}]}