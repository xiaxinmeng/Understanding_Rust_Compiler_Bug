{"sha": "df79080e5f5fb9339dbeaa8b51416b25a055d122", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGY3OTA4MGU1ZjVmYjkzMzlkYmVhYThiNTE0MTZiMjVhMDU1ZDEyMg==", "commit": {"author": {"name": "Adam Megacz", "email": "adam@xwt.org", "date": "2002-02-07T05:01:29Z"}, "committer": {"name": "Adam Megacz", "email": "megacz@gcc.gnu.org", "date": "2002-02-07T05:01:29Z"}, "message": "shs.h, [...]: use uint<n>_t instead of LONG and BYTE\n\n2002-02-06  Adam Megacz <adam@xwt.org>\n\n        * shs.h, shs.cc, natSimpleSHSStream.cc: use uint<n>_t instead\n        of LONG and BYTE\n\nFrom-SVN: r49565", "tree": {"sha": "5060c68e6310427867622675c9e47d2428cae722", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5060c68e6310427867622675c9e47d2428cae722"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df79080e5f5fb9339dbeaa8b51416b25a055d122", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df79080e5f5fb9339dbeaa8b51416b25a055d122", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df79080e5f5fb9339dbeaa8b51416b25a055d122", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df79080e5f5fb9339dbeaa8b51416b25a055d122/comments", "author": null, "committer": null, "parents": [{"sha": "4048d336914a2d632298f6d7f295c929db0e0ae7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4048d336914a2d632298f6d7f295c929db0e0ae7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4048d336914a2d632298f6d7f295c929db0e0ae7"}], "stats": {"total": 55, "additions": 33, "deletions": 22}, "files": [{"sha": "71bfac61f96b8c906174336a485583ffdabb4afa", "filename": "libjava/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df79080e5f5fb9339dbeaa8b51416b25a055d122/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df79080e5f5fb9339dbeaa8b51416b25a055d122/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=df79080e5f5fb9339dbeaa8b51416b25a055d122", "patch": "@@ -1,3 +1,8 @@\n+2002-02-06  Adam Megacz <adam@xwt.org>\n+\n+\t* shs.h, shs.cc, natSimpleSHSStream.cc: use uint<n>_t instead\n+\tof LONG and BYTE\n+\t\n 2002-02-06  Adam Megacz <adam@xwt.org>\n \n \t* name-finder.h: don't #include sys/wait.h unless HAVE_SYS_WAIT_H"}, {"sha": "5e7b84600122623934ef82d8cdef471fe52e6175", "filename": "libjava/gnu/gcj/io/natSimpleSHSStream.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df79080e5f5fb9339dbeaa8b51416b25a055d122/libjava%2Fgnu%2Fgcj%2Fio%2FnatSimpleSHSStream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df79080e5f5fb9339dbeaa8b51416b25a055d122/libjava%2Fgnu%2Fgcj%2Fio%2FnatSimpleSHSStream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fio%2FnatSimpleSHSStream.cc?ref=df79080e5f5fb9339dbeaa8b51416b25a055d122", "patch": "@@ -37,7 +37,7 @@ void\n gnu::gcj::io::SimpleSHSStream::shsUpdate (jbyteArray shs_info, jbyteArray buf, jint count)\n {\n   SHS_INFO *info = (SHS_INFO *)elements(shs_info);\n-  BYTE *buffer = (BYTE *)elements(buf);\n+  uint8_t *buffer = (uint8_t *)elements(buf);\n   \n   ::shsUpdate (info, buffer, count);\n }"}, {"sha": "ca82661dfc74f7147727ed497800bcea8438ac73", "filename": "libjava/gnu/gcj/io/shs.cc", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df79080e5f5fb9339dbeaa8b51416b25a055d122/libjava%2Fgnu%2Fgcj%2Fio%2Fshs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df79080e5f5fb9339dbeaa8b51416b25a055d122/libjava%2Fgnu%2Fgcj%2Fio%2Fshs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fio%2Fshs.cc?ref=df79080e5f5fb9339dbeaa8b51416b25a055d122", "patch": "@@ -91,10 +91,10 @@\n \n /* The two buffers of 5 32-bit words */\n \n-LONG h0, h1, h2, h3, h4;\n-LONG A, B, C, D, E;\n+uint32_t h0, h1, h2, h3, h4;\n+uint32_t A, B, C, D, E;\n \n-local void byteReverse OF((LONG *buffer, int byteCount));\n+local void byteReverse OF((uint32_t *buffer, int byteCount));\n void shsTransform OF((SHS_INFO *shsInfo));\n \n /* Initialize the SHS values */\n@@ -120,7 +120,7 @@ void shsInit (SHS_INFO *shsInfo)\n \n void shsTransform (SHS_INFO *shsInfo)\n {\n-\tLONG W [80], temp;\n+       uint32_t W [80], temp;\n \tint i;\n \n \t/* Step A.\tCopy the data buffer into the local work buffer */\n@@ -182,9 +182,9 @@ void shsTransform (SHS_INFO *shsInfo)\n \tshsInfo->digest [4] += E;\n }\n \n-local void byteReverse (LONG *buffer, int byteCount)\n+local void byteReverse (uint32_t *buffer, int byteCount)\n {\n-\tLONG value;\n+       uint32_t value;\n \tint count;\n \n \t/*\n@@ -209,7 +209,7 @@ local void byteReverse (LONG *buffer, int byteCount)\n \tif ((*(unsigned short *) (\"@P\") >> 8) == '@')\n \t\treturn;\n \n-\tbyteCount /= sizeof (LONG);\n+       byteCount /= sizeof (uint32_t);\n \tfor (count = 0; count < byteCount; count++) {\n \t\tvalue = (buffer [count] << 16) | (buffer [count] >> 16);\n \t\tbuffer [count] = ((value & 0xFF00FF00L) >> 8) | ((value & 0x00FF00FFL) << 8);\n@@ -223,13 +223,13 @@ local void byteReverse (LONG *buffer, int byteCount)\n  * between calls to shsUpdate()\n  */\n \n-void shsUpdate (SHS_INFO *shsInfo, BYTE *buffer, int count)\n+void shsUpdate (SHS_INFO *shsInfo, uint8_t *buffer, int count)\n {\n \t/* Update bitcount */\n-\tif ((shsInfo->countLo + ((LONG) count << 3)) < shsInfo->countLo)\n+       if ((shsInfo->countLo + ((uint32_t) count << 3)) < shsInfo->countLo)\n \t\t shsInfo->countHi++;\t/* Carry from low to high bitCount */\n-\tshsInfo->countLo += ((LONG) count << 3);\n-\tshsInfo->countHi += ((LONG) count >> 29);\n+       shsInfo->countLo += ((uint32_t) count << 3);\n+       shsInfo->countHi += ((uint32_t) count >> 29);\n \n \t/* Process data in SHS_BLOCKSIZE chunks */\n \twhile (count >= SHS_BLOCKSIZE) {\n@@ -250,7 +250,7 @@ void shsUpdate (SHS_INFO *shsInfo, BYTE *buffer, int count)\n void shsFinal (SHS_INFO *shsInfo)\n {\n \tint count;\n-\tLONG lowBitcount = shsInfo->countLo, highBitcount = shsInfo->countHi;\n+       uint32_t lowBitcount = shsInfo->countLo, highBitcount = shsInfo->countHi;\n \n \t/* Compute number of bytes mod 64 */\n \tcount = (int) ((shsInfo->countLo >> 3) & 0x3F);\n@@ -259,20 +259,20 @@ void shsFinal (SHS_INFO *shsInfo)\n \t * Set the first char of padding to 0x80.\n \t * This is safe since there is always at least one byte free\n \t */\n-\t((BYTE *) shsInfo->data) [count++] = 0x80;\n+       ((uint8_t *) shsInfo->data) [count++] = 0x80;\n \n \t/* Pad out to 56 mod 64 */\n \tif (count > 56) {\n \t\t/* Two lots of padding:  Pad the first block to 64 bytes */\n-\t\tmemset ((BYTE *) shsInfo->data + count, 0, 64 - count);\n+               memset ((uint8_t *) shsInfo->data + count, 0, 64 - count);\n \t\tbyteReverse (shsInfo->data, SHS_BLOCKSIZE);\n \t\tshsTransform (shsInfo);\n \n \t\t/* Now fill the next block with 56 bytes */\n \t\tmemset (shsInfo->data, 0, 56);\n \t} else\n \t\t/* Pad block to 56 bytes */\n-\t\tmemset ((BYTE *) shsInfo->data + count, 0, 56 - count);\n+               memset ((uint8_t *) shsInfo->data + count, 0, 56 - count);\n \tbyteReverse (shsInfo->data, SHS_BLOCKSIZE);\n \n \t/* Append length in bits and transform */"}, {"sha": "9b7bb2462c5debe6e673fb9c5b78c11b08ee51f1", "filename": "libjava/gnu/gcj/io/shs.h", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df79080e5f5fb9339dbeaa8b51416b25a055d122/libjava%2Fgnu%2Fgcj%2Fio%2Fshs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df79080e5f5fb9339dbeaa8b51416b25a055d122/libjava%2Fgnu%2Fgcj%2Fio%2Fshs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fio%2Fshs.h?ref=df79080e5f5fb9339dbeaa8b51416b25a055d122", "patch": "@@ -14,8 +14,14 @@\n #ifndef SHS_H\n #define SHS_H\n \n-typedef unsigned char BYTE;\n-typedef unsigned int LONG; /* A 32-bit type */\n+#include<config.h>\n+#if HAVE_INTTYPES_H\n+# include <inttypes.h>\n+#else\n+# if HAVE_STDINT_H\n+#  include <stdint.h>\n+# endif\n+#endif\n \n /* The SHS block size and message digest sizes, in bytes */\n \n@@ -25,9 +31,9 @@ typedef unsigned int LONG; /* A 32-bit type */\n /* The structure for storing SHS info */\n \n typedef struct {\n-\tLONG digest [5];\t/* Message digest */\n-\tLONG countLo, countHi;\t/* 64-bit bit count */\n-\tLONG data [16];\t\t/* SHS data buffer */\n+       uint32_t digest [5];    /* Message digest */\n+       uint32_t countLo, countHi;      /* 64-bit bit count */\n+       uint32_t data [16];             /* SHS data buffer */\n } SHS_INFO;\n \n /* Turn off prototypes if requested */\n@@ -45,7 +51,7 @@ typedef struct {\n #define\tlocal\tstatic\n \n void shsInit OF((SHS_INFO *shsInfo));\n-void shsUpdate OF((SHS_INFO *shsInfo, BYTE *buffer, int count));\n+void shsUpdate OF((SHS_INFO *shsInfo, uint8_t *buffer, int count));\n void shsFinal OF((SHS_INFO *shsInfo));\n \n #endif"}]}