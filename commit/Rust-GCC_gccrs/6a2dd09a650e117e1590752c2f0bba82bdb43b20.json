{"sha": "6a2dd09a650e117e1590752c2f0bba82bdb43b20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmEyZGQwOWE2NTBlMTE3ZTE1OTA3NTJjMmYwYmJhODJiZGI0M2IyMA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2002-07-01T23:07:19Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2002-07-01T23:07:19Z"}, "message": "tree.h: Modify builtin_function interface to take an extra argument ATTRS...\n\n\n\t* tree.h:  Modify builtin_function interface to take an extra\n\targument ATTRS, which is a tree representing an attribute list.\n\n\t* c-decl.c (builtin_function): Accept additional parameter.\n\t* objc/objc-act.c (builtin_function): Likewise.\n\t* f/com.c (builtin_function): Likewise.\n\t* java/decl.c (builtin_function): Likewise.\n\t* ada/utils.c (builtin_function): Likewise.\n\t* cp/decl.c (builtin_function): Likewise.\n\t(builtin_function_1): Likewise.\n\n\t* c-common.c (c_common_nodes_and_builtins): Pass an additional\n\tNULL_TREE argument to builtin_function.  (builtin_function_2):\n\tLikewise.\n\t* cp/call.c (build_java_interface_fn_ref): Likewise.\n\t* objc/objc-act.c (synth_module_prologue): Likewise.\n\t* java/decl.c (java_init_decl_processing): Likewise.\n\t* f/com.c (ffe_com_init_0): Likewise.\n\n\t* config/alpha/alpha.c (alpha_init_builtins): Pass an additional\n\tNULL_TREE argument builtin_function.\n\t* config/arm/arm.c (def_builtin): Likewise.\n\t* config/c4x/c4x.c (c4x_init_builtins): Likewise.\n\t* config/i386/i386.c (def_builtin): Likewise.\n\t* config/ia64/ia64.c (def_builtin): Likewise.\n\t* config/rs6000/rs6000.c (def_builtin): Likewise.\n\nFrom-SVN: r55161", "tree": {"sha": "07ad9c28c137e09be00ed739a192154beed604d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07ad9c28c137e09be00ed739a192154beed604d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a2dd09a650e117e1590752c2f0bba82bdb43b20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a2dd09a650e117e1590752c2f0bba82bdb43b20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a2dd09a650e117e1590752c2f0bba82bdb43b20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a2dd09a650e117e1590752c2f0bba82bdb43b20/comments", "author": null, "committer": null, "parents": [{"sha": "eebd288ac720138a113ebc3c7d5f41651701472d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eebd288ac720138a113ebc3c7d5f41651701472d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eebd288ac720138a113ebc3c7d5f41651701472d"}], "stats": {"total": 249, "additions": 167, "deletions": 82}, "files": [{"sha": "811e9c90ca883cfe0916a0c88e12e2928f2a104c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a2dd09a650e117e1590752c2f0bba82bdb43b20/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a2dd09a650e117e1590752c2f0bba82bdb43b20/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6a2dd09a650e117e1590752c2f0bba82bdb43b20", "patch": "@@ -1,3 +1,32 @@\n+2002-07-01  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* tree.h:  Modify builtin_function interface to take an extra\n+\targument ATTRS, which is a tree representing an attribute list.\n+\n+\t* c-decl.c (builtin_function): Accept additional parameter.\n+\t* objc/objc-act.c (builtin_function): Likewise.\n+\t* f/com.c (builtin_function): Likewise.\n+\t* java/decl.c (builtin_function): Likewise.\n+\t* ada/utils.c (builtin_function): Likewise.\n+\t* cp/decl.c (builtin_function): Likewise.\n+\t(builtin_function_1): Likewise.\n+\n+\t* c-common.c (c_common_nodes_and_builtins): Pass an additional\n+\tNULL_TREE argument to builtin_function.  (builtin_function_2):\n+\tLikewise.\n+\t* cp/call.c (build_java_interface_fn_ref): Likewise.\n+\t* objc/objc-act.c (synth_module_prologue): Likewise.\n+\t* java/decl.c (java_init_decl_processing): Likewise.\n+\t* f/com.c (ffe_com_init_0): Likewise.\n+\n+\t* config/alpha/alpha.c (alpha_init_builtins): Pass an additional\n+\tNULL_TREE argument to builtin_function.\n+\t* config/arm/arm.c (def_builtin): Likewise.\n+\t* config/c4x/c4x.c (c4x_init_builtins): Likewise.\n+\t* config/i386/i386.c (def_builtin): Likewise.\n+\t* config/ia64/ia64.c (def_builtin): Likewise.\n+\t* config/rs6000/rs6000.c (def_builtin): Likewise.\n+\n 2002-07-01  Zack Weinberg  <zack@codesourcery.com>\n \n \t* config/ip2k/t-ip2k: Remove LIBGCC1, CROSS_LIBGCC1, and LIBGCC1_TEST."}, {"sha": "368a9e1e17cd5e77d2280e63407f41203d443d45", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a2dd09a650e117e1590752c2f0bba82bdb43b20/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a2dd09a650e117e1590752c2f0bba82bdb43b20/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=6a2dd09a650e117e1590752c2f0bba82bdb43b20", "patch": "@@ -1,3 +1,7 @@\n+2002-07-01  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* ada/utils.c (builtin_function): Accept an additional parameter.\n+\n 2002-06-28  Andreas Jaeger  <aj@suse.de>\n \n \tPR ada/7144"}, {"sha": "33980a5f667e5ca6b5d0a1556b82dd48887c7a7d", "filename": "gcc/ada/utils.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a2dd09a650e117e1590752c2f0bba82bdb43b20/gcc%2Fada%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a2dd09a650e117e1590752c2f0bba82bdb43b20/gcc%2Fada%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils.c?ref=6a2dd09a650e117e1590752c2f0bba82bdb43b20", "patch": "@@ -1871,15 +1871,17 @@ end_subprog_body ()\n    See tree.h for its possible values.\n \n    If LIBRARY_NAME is nonzero, use that for DECL_ASSEMBLER_NAME,\n-   the name to be called if we can't opencode the function.  */\n+   the name to be called if we can't opencode the function.  If\n+   ATTRS is nonzero, use that for the function attribute list.  */\n \n tree\n-builtin_function (name, type, function_code, class, library_name)\n+builtin_function (name, type, function_code, class, library_name, attrs)\n      const char *name;\n      tree type;\n      int function_code;\n      enum built_in_class class;\n      const char *library_name;\n+     tree attrs;\n {\n   tree decl = build_decl (FUNCTION_DECL, get_identifier (name), type);\n \n@@ -1891,6 +1893,8 @@ builtin_function (name, type, function_code, class, library_name)\n   pushdecl (decl);\n   DECL_BUILT_IN_CLASS (decl) = class;\n   DECL_FUNCTION_CODE (decl) = function_code;\n+  if (attrs)\n+      decl_attributes (&decl, attrs, ATTR_FLAG_BUILT_IN);\n   return decl;\n }\n "}, {"sha": "4438abe2a092987d593572912779daf340237492", "filename": "gcc/c-common.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a2dd09a650e117e1590752c2f0bba82bdb43b20/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a2dd09a650e117e1590752c2f0bba82bdb43b20/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=6a2dd09a650e117e1590752c2f0bba82bdb43b20", "patch": "@@ -3055,7 +3055,7 @@ c_common_nodes_and_builtins ()\n \t\t\t\t CLASS,\t\t\t\t\t\\\n \t\t\t\t (FALLBACK_P\t\t\t\t\\\n \t\t\t\t  ? (NAME + strlen (\"__builtin_\"))\t\\\n-\t\t\t\t  : NULL));\t\t\t\t\\\n+\t\t\t\t  : NULL), NULL_TREE);\t\t\t\\\n       else\t\t\t\t\t\t\t\t\\\n \tdecl = builtin_function_2 (NAME,\t\t\t\t\\\n \t\t\t\t   NAME + strlen (\"__builtin_\"),\t\\\n@@ -3185,7 +3185,8 @@ builtin_function_2 (builtin_name, name, builtin_type, type, function_code,\n   if (builtin_name != 0)\n     {\n       bdecl = builtin_function (builtin_name, builtin_type, function_code,\n-\t\t\t\tclass, library_name_p ? name : NULL);\n+\t\t\t\tclass, library_name_p ? name : NULL,\n+\t\t\t\tNULL_TREE);\n       if (noreturn_p)\n \t{\n \t  TREE_THIS_VOLATILE (bdecl) = 1;\n@@ -3195,7 +3196,8 @@ builtin_function_2 (builtin_name, name, builtin_type, type, function_code,\n   if (name != 0 && !flag_no_builtin && !builtin_function_disabled_p (name)\n       && !(nonansi_p && flag_no_nonansi_builtin))\n     {\n-      decl = builtin_function (name, type, function_code, class, NULL);\n+      decl = builtin_function (name, type, function_code, class, NULL,\n+\t\t\t       NULL_TREE);\n       if (nonansi_p)\n \tDECL_BUILT_IN_NONANSI (decl) = 1;\n       if (noreturn_p)"}, {"sha": "a32b7835ca1c0ab9280a6c98601c68d48d3e6c5f", "filename": "gcc/c-decl.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a2dd09a650e117e1590752c2f0bba82bdb43b20/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a2dd09a650e117e1590752c2f0bba82bdb43b20/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=6a2dd09a650e117e1590752c2f0bba82bdb43b20", "patch": "@@ -2961,15 +2961,17 @@ c_make_fname_decl (id, type_dep)\n    See tree.h for its possible values.\n \n    If LIBRARY_NAME is nonzero, use that for DECL_ASSEMBLER_NAME,\n-   the name to be called if we can't opencode the function.  */\n+   the name to be called if we can't opencode the function.  If\n+   ATTRS is nonzero, use that for the function's attribute list.  */\n \n tree\n-builtin_function (name, type, function_code, class, library_name)\n+builtin_function (name, type, function_code, class, library_name, attrs)\n      const char *name;\n      tree type;\n      int function_code;\n      enum built_in_class class;\n      const char *library_name;\n+     tree attrs;\n {\n   tree decl = build_decl (FUNCTION_DECL, get_identifier (name), type);\n   DECL_EXTERNAL (decl) = 1;\n@@ -2991,7 +2993,10 @@ builtin_function (name, type, function_code, class, library_name)\n     C_DECL_ANTICIPATED (decl) = 1;\n \n   /* Possibly apply some default attributes to this built-in function.  */\n-  decl_attributes (&decl, NULL_TREE, 0);\n+  if (attrs)\n+    decl_attributes (&decl, attrs, ATTR_FLAG_BUILT_IN);\n+  else\n+    decl_attributes (&decl, NULL_TREE, 0);\n \n   return decl;\n }"}, {"sha": "9e240058e24cf2325b90d660b41f7c997f4935bd", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a2dd09a650e117e1590752c2f0bba82bdb43b20/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a2dd09a650e117e1590752c2f0bba82bdb43b20/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=6a2dd09a650e117e1590752c2f0bba82bdb43b20", "patch": "@@ -6496,15 +6496,17 @@ alpha_init_builtins ()\n   p = zero_arg_builtins;\n   for (i = 0; i < ARRAY_SIZE (zero_arg_builtins); ++i, ++p)\n     if ((target_flags & p->target_mask) == p->target_mask)\n-      builtin_function (p->name, ftype, p->code, BUILT_IN_MD, NULL);\n+      builtin_function (p->name, ftype, p->code, BUILT_IN_MD,\n+\t\t\tNULL, NULL_TREE);\n \n   ftype = build_function_type_list (long_integer_type_node,\n \t\t\t\t    long_integer_type_node, NULL_TREE);\n \n   p = one_arg_builtins;\n   for (i = 0; i < ARRAY_SIZE (one_arg_builtins); ++i, ++p)\n     if ((target_flags & p->target_mask) == p->target_mask)\n-      builtin_function (p->name, ftype, p->code, BUILT_IN_MD, NULL);\n+      builtin_function (p->name, ftype, p->code, BUILT_IN_MD,\n+\t\t\tNULL, NULL_TREE);\n \n   ftype = build_function_type_list (long_integer_type_node,\n \t\t\t\t    long_integer_type_node,\n@@ -6513,15 +6515,18 @@ alpha_init_builtins ()\n   p = two_arg_builtins;\n   for (i = 0; i < ARRAY_SIZE (two_arg_builtins); ++i, ++p)\n     if ((target_flags & p->target_mask) == p->target_mask)\n-      builtin_function (p->name, ftype, p->code, BUILT_IN_MD, NULL);\n+      builtin_function (p->name, ftype, p->code, BUILT_IN_MD,\n+\t\t\tNULL, NULL_TREE);\n \n   ftype = build_function_type (ptr_type_node, void_list_node);\n   builtin_function (\"__builtin_thread_pointer\", ftype,\n-\t\t    ALPHA_BUILTIN_THREAD_POINTER, BUILT_IN_MD, NULL);\n+\t\t    ALPHA_BUILTIN_THREAD_POINTER, BUILT_IN_MD,\n+\t\t    NULL, NULL_TREE);\n \n   ftype = build_function_type_list (void_type_node, ptr_type_node, NULL_TREE);\n   builtin_function (\"__builtin_set_thread_pointer\", ftype,\n-\t\t    ALPHA_BUILTIN_SET_THREAD_POINTER, BUILT_IN_MD, NULL);\n+\t\t    ALPHA_BUILTIN_SET_THREAD_POINTER, BUILT_IN_MD,\n+\t\t    NULL, NULL_TREE);\n }\n \n /* Expand an expression EXP that calls a built-in function,"}, {"sha": "17d77507f60cd4c8a49eb4be06310616f719c05c", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a2dd09a650e117e1590752c2f0bba82bdb43b20/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a2dd09a650e117e1590752c2f0bba82bdb43b20/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=6a2dd09a650e117e1590752c2f0bba82bdb43b20", "patch": "@@ -9303,7 +9303,7 @@ arm_debugger_arg_offset (value, addr)\n }\n \n #define def_builtin(NAME, TYPE, CODE) \\\n-  builtin_function ((NAME), (TYPE), (CODE), BUILT_IN_MD, NULL)\n+  builtin_function ((NAME), (TYPE), (CODE), BUILT_IN_MD, NULL, NULL_TREE)\n \n void\n arm_init_builtins ()"}, {"sha": "1e8814cb584a0ecff5e40513fd408e05bbefd096", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a2dd09a650e117e1590752c2f0bba82bdb43b20/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a2dd09a650e117e1590752c2f0bba82bdb43b20/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=6a2dd09a650e117e1590752c2f0bba82bdb43b20", "patch": "@@ -4923,37 +4923,37 @@ c4x_init_builtins ()\n \t\t    build_function_type \n \t\t    (integer_type_node,\n \t\t     tree_cons (NULL_TREE, double_type_node, endlink)),\n-\t\t    C4X_BUILTIN_FIX, BUILT_IN_MD, NULL);\n+\t\t    C4X_BUILTIN_FIX, BUILT_IN_MD, NULL, NULL_TREE);\n   builtin_function (\"ansi_ftoi\",\n \t\t    build_function_type \n \t\t    (integer_type_node, \n \t\t     tree_cons (NULL_TREE, double_type_node, endlink)),\n-\t\t    C4X_BUILTIN_FIX_ANSI, BUILT_IN_MD, NULL);\n+\t\t    C4X_BUILTIN_FIX_ANSI, BUILT_IN_MD, NULL, NULL_TREE);\n   if (TARGET_C3X)\n     builtin_function (\"fast_imult\",\n \t\t      build_function_type\n \t\t      (integer_type_node, \n \t\t       tree_cons (NULL_TREE, integer_type_node,\n \t\t\t\t  tree_cons (NULL_TREE,\n \t\t\t\t\t     integer_type_node, endlink))),\n-\t\t      C4X_BUILTIN_MPYI, BUILT_IN_MD, NULL);\n+\t\t      C4X_BUILTIN_MPYI, BUILT_IN_MD, NULL, NULL_TREE);\n   else\n     {\n       builtin_function (\"toieee\",\n \t\t        build_function_type \n \t\t\t(double_type_node,\n \t\t\t tree_cons (NULL_TREE, double_type_node, endlink)),\n-\t\t        C4X_BUILTIN_TOIEEE, BUILT_IN_MD, NULL);\n+\t\t        C4X_BUILTIN_TOIEEE, BUILT_IN_MD, NULL, NULL_TREE);\n       builtin_function (\"frieee\",\n \t\t        build_function_type\n \t\t\t(double_type_node, \n \t\t\t tree_cons (NULL_TREE, double_type_node, endlink)),\n-\t\t        C4X_BUILTIN_FRIEEE, BUILT_IN_MD, NULL);\n+\t\t        C4X_BUILTIN_FRIEEE, BUILT_IN_MD, NULL, NULL_TREE);\n       builtin_function (\"fast_invf\",\n \t\t        build_function_type \n \t\t\t(double_type_node, \n \t\t\t tree_cons (NULL_TREE, double_type_node, endlink)),\n-\t\t        C4X_BUILTIN_RCPF, BUILT_IN_MD, NULL);\n+\t\t        C4X_BUILTIN_RCPF, BUILT_IN_MD, NULL, NULL_TREE);\n     }\n }\n "}, {"sha": "faf723c4921a2a18f7db2040d8db515f40255242", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a2dd09a650e117e1590752c2f0bba82bdb43b20/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a2dd09a650e117e1590752c2f0bba82bdb43b20/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=6a2dd09a650e117e1590752c2f0bba82bdb43b20", "patch": "@@ -11463,10 +11463,11 @@ x86_initialize_trampoline (tramp, fnaddr, cxt)\n     }\n }\n \f\n-#define def_builtin(MASK, NAME, TYPE, CODE)\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  if ((MASK) & target_flags)\t\t\t\t\t\t\\\n-    builtin_function ((NAME), (TYPE), (CODE), BUILT_IN_MD, NULL);\t\\\n+#define def_builtin(MASK, NAME, TYPE, CODE)\t\t\t\\\n+do {\t\t\t\t\t\t\t\t\\\n+  if ((MASK) & target_flags)\t\t\t\t\t\\\n+    builtin_function ((NAME), (TYPE), (CODE), BUILT_IN_MD,\t\\\n+\t\t      NULL, NULL_TREE);\t\t\t\t\\\n } while (0)\n \n struct builtin_description"}, {"sha": "be83a4d26c82d235c662610404b62874c0cbb198", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a2dd09a650e117e1590752c2f0bba82bdb43b20/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a2dd09a650e117e1590752c2f0bba82bdb43b20/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=6a2dd09a650e117e1590752c2f0bba82bdb43b20", "patch": "@@ -7542,7 +7542,7 @@ ia64_init_builtins ()\n     = build_function_type_list (void_type_node, pdi_type_node, NULL_TREE);\n \n #define def_builtin(name, type, code) \\\n-  builtin_function ((name), (type), (code), BUILT_IN_MD, NULL)\n+  builtin_function ((name), (type), (code), BUILT_IN_MD, NULL, NULL_TREE)\n \n   def_builtin (\"__sync_val_compare_and_swap_si\", si_ftype_psi_si_si,\n \t       IA64_BUILTIN_VAL_COMPARE_AND_SWAP_SI);"}, {"sha": "6fcf8909f72c875f78b7ea9ca1c59dd3ea25d146", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a2dd09a650e117e1590752c2f0bba82bdb43b20/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a2dd09a650e117e1590752c2f0bba82bdb43b20/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=6a2dd09a650e117e1590752c2f0bba82bdb43b20", "patch": "@@ -3333,10 +3333,11 @@ rs6000_va_arg (valist, type)\n \n /* Builtins.  */\n \n-#define def_builtin(MASK, NAME, TYPE, CODE)\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  if ((MASK) & target_flags)\t\t\t\t\t\t\\\n-    builtin_function ((NAME), (TYPE), (CODE), BUILT_IN_MD, NULL);\t\\\n+#define def_builtin(MASK, NAME, TYPE, CODE)\t\t\t\\\n+do {\t\t\t\t\t\t\t\t\\\n+  if ((MASK) & target_flags)\t\t\t\t\t\\\n+    builtin_function ((NAME), (TYPE), (CODE), BUILT_IN_MD,\t\\\n+\t\t      NULL, NULL_TREE);\t\t\t\t\\\n } while (0)\n \n struct builtin_description"}, {"sha": "141c7ac253795922e86de81c783dee8db953c73d", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a2dd09a650e117e1590752c2f0bba82bdb43b20/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a2dd09a650e117e1590752c2f0bba82bdb43b20/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=6a2dd09a650e117e1590752c2f0bba82bdb43b20", "patch": "@@ -4428,7 +4428,7 @@ build_java_interface_fn_ref (fn, instance)\n       java_iface_lookup_fn \n \t= builtin_function (\"_Jv_LookupInterfaceMethodIdx\",\n \t\t\t    build_function_type (ptr_type_node, t),\n-\t\t\t    0, NOT_BUILT_IN, NULL);\n+\t\t\t    0, NOT_BUILT_IN, NULL, NULL_TREE);\n     }\n \n   /* Look up the pointer to the runtime java.lang.Class object for `instance'. "}, {"sha": "5d4f78ea6c3ae1d9a44c03d601d654c636669064", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a2dd09a650e117e1590752c2f0bba82bdb43b20/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a2dd09a650e117e1590752c2f0bba82bdb43b20/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=6a2dd09a650e117e1590752c2f0bba82bdb43b20", "patch": "@@ -83,7 +83,8 @@ static void set_identifier_type_value_with_scope\n \tPARAMS ((tree, tree, struct cp_binding_level *));\n static void record_unknown_type PARAMS ((tree, const char *));\n static tree builtin_function_1 PARAMS ((const char *, tree, tree, int,\n-                                      enum built_in_class, const char *));\n+                                      enum built_in_class, const char *,\n+\t\t\t\t      tree));\n static tree build_library_fn_1 PARAMS ((tree, enum tree_code, tree));\n static int member_function_or_else PARAMS ((tree, tree, enum overload_flags));\n static void bad_specifiers PARAMS ((tree, const char *, int, int, int, int,\n@@ -6705,16 +6706,19 @@ cp_make_fname_decl (id, type_dep)\n    See tree.h for possible values.\n \n    If LIBNAME is nonzero, use that for DECL_ASSEMBLER_NAME,\n-   the name to be called if we can't opencode the function.  */\n+   the name to be called if we can't opencode the function.\n+   If ATTRS is nonzero, use that for the function's attribute\n+   list.  */\n \n static tree\n-builtin_function_1 (name, type, context, code, class, libname)\n+builtin_function_1 (name, type, context, code, class, libname, attrs)\n      const char *name;\n      tree type;\n      tree context;\n      int code;\n      enum built_in_class class;\n      const char *libname;\n+     tree attrs;\n {\n   tree decl = build_library_fn_1 (get_identifier (name), ERROR_MARK, type);\n   DECL_BUILT_IN_CLASS (decl) = class;\n@@ -6740,7 +6744,10 @@ builtin_function_1 (name, type, context, code, class, libname)\n     DECL_ANTICIPATED (decl) = 1;\n \n   /* Possibly apply some default attributes to this built-in function.  */\n-  decl_attributes (&decl, NULL_TREE, 0);\n+  if (attrs)\n+    decl_attributes (&decl, attrs, ATTR_FLAG_BUILT_IN);\n+  else\n+    decl_attributes (&decl, NULL_TREE, 0);\n \n   return decl;\n }\n@@ -6756,26 +6763,31 @@ builtin_function_1 (name, type, context, code, class, libname)\n    See tree.h for possible values.\n \n    If LIBNAME is nonzero, use that for DECL_ASSEMBLER_NAME,\n-   the name to be called if we can't opencode the function.  */\n+   the name to be called if we can't opencode the function.\n+\n+   If ATTRS is nonzero, use that for the function's attribute\n+   list.  */\n \n tree\n-builtin_function (name, type, code, class, libname)\n+builtin_function (name, type, code, class, libname, attrs)\n      const char *name;\n      tree type;\n      int code;\n      enum built_in_class class;\n      const char *libname;\n+     tree attrs;\n {\n   /* All builtins that don't begin with an '_' should additionally\n      go in the 'std' namespace.  */\n   if (name[0] != '_')\n     {\n       push_namespace (std_identifier);\n-      builtin_function_1 (name, type, std_node, code, class, libname);\n+      builtin_function_1 (name, type, std_node, code, class, libname, attrs);\n       pop_namespace ();\n     }\n \n-  return builtin_function_1 (name, type, NULL_TREE, code, class, libname);\n+  return builtin_function_1 (name, type, NULL_TREE, code,\n+\t\t\t     class, libname, attrs);\n }\n \n /* Generate a FUNCTION_DECL with the typical flags for a runtime library"}, {"sha": "44fe4cc258e0261e8d510dfd352c6fcdc8d9af1a", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a2dd09a650e117e1590752c2f0bba82bdb43b20/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a2dd09a650e117e1590752c2f0bba82bdb43b20/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=6a2dd09a650e117e1590752c2f0bba82bdb43b20", "patch": "@@ -1,3 +1,9 @@\n+2002-07-01  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* f/com.c (builtin_function): Accept additional parameter.\n+\t(ffe_com_init_0): Pass an additional NULL_TREE argument to\n+\tbuiltin_function.\n+\n 2002-06-28  Toon Moene  <toon@moene.indiv.nluug.nl>\n \n \t* news.texi: Mention 2 Gbyte limit on 32-bit targets"}, {"sha": "45c06c7cefb6fea9cd0e011734506422510da94c", "filename": "gcc/f/com.c", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a2dd09a650e117e1590752c2f0bba82bdb43b20/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a2dd09a650e117e1590752c2f0bba82bdb43b20/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=6a2dd09a650e117e1590752c2f0bba82bdb43b20", "patch": "@@ -11667,23 +11667,23 @@ ffecom_init_0 ()\n     = build_function_type (void_type_node, NULL_TREE);\n \n   builtin_function (\"__builtin_sqrtf\", float_ftype_float,\n-\t\t    BUILT_IN_SQRTF, BUILT_IN_NORMAL, \"sqrtf\");\n+\t\t    BUILT_IN_SQRTF, BUILT_IN_NORMAL, \"sqrtf\", NULL_TREE);\n   builtin_function (\"__builtin_sqrt\", double_ftype_double,\n-\t\t    BUILT_IN_SQRT, BUILT_IN_NORMAL, \"sqrt\");\n+\t\t    BUILT_IN_SQRT, BUILT_IN_NORMAL, \"sqrt\", NULL_TREE);\n   builtin_function (\"__builtin_sqrtl\", ldouble_ftype_ldouble,\n-\t\t    BUILT_IN_SQRTL, BUILT_IN_NORMAL, \"sqrtl\");\n+\t\t    BUILT_IN_SQRTL, BUILT_IN_NORMAL, \"sqrtl\", NULL_TREE);\n   builtin_function (\"__builtin_sinf\", float_ftype_float,\n-\t\t    BUILT_IN_SINF, BUILT_IN_NORMAL, \"sinf\");\n+\t\t    BUILT_IN_SINF, BUILT_IN_NORMAL, \"sinf\", NULL_TREE);\n   builtin_function (\"__builtin_sin\", double_ftype_double,\n-\t\t    BUILT_IN_SIN, BUILT_IN_NORMAL, \"sin\");\n+\t\t    BUILT_IN_SIN, BUILT_IN_NORMAL, \"sin\", NULL_TREE);\n   builtin_function (\"__builtin_sinl\", ldouble_ftype_ldouble,\n-\t\t    BUILT_IN_SINL, BUILT_IN_NORMAL, \"sinl\");\n+\t\t    BUILT_IN_SINL, BUILT_IN_NORMAL, \"sinl\", NULL_TREE);\n   builtin_function (\"__builtin_cosf\", float_ftype_float,\n-\t\t    BUILT_IN_COSF, BUILT_IN_NORMAL, \"cosf\");\n+\t\t    BUILT_IN_COSF, BUILT_IN_NORMAL, \"cosf\", NULL_TREE);\n   builtin_function (\"__builtin_cos\", double_ftype_double,\n-\t\t    BUILT_IN_COS, BUILT_IN_NORMAL, \"cos\");\n+\t\t    BUILT_IN_COS, BUILT_IN_NORMAL, \"cos\", NULL_TREE);\n   builtin_function (\"__builtin_cosl\", ldouble_ftype_ldouble,\n-\t\t    BUILT_IN_COSL, BUILT_IN_NORMAL, \"cosl\");\n+\t\t    BUILT_IN_COSL, BUILT_IN_NORMAL, \"cosl\", NULL_TREE);\n \n   pedantic_lvalues = FALSE;\n \n@@ -13072,12 +13072,14 @@ bison_rule_compstmt_ ()\n    See tree.h for its possible values.\n \n    If LIBRARY_NAME is nonzero, use that for DECL_ASSEMBLER_NAME,\n-   the name to be called if we can't opencode the function.  */\n+   the name to be called if we can't opencode the function.  If\n+   ATTRS is nonzero, use that for the function's attribute list.  */\n \n tree\n builtin_function (const char *name, tree type, int function_code,\n \t\t  enum built_in_class class,\n-\t\t  const char *library_name)\n+\t\t  const char *library_name,\n+\t\t  tree attrs ATTRIBUTE_UNUSED)\n {\n   tree decl = build_decl (FUNCTION_DECL, get_identifier (name), type);\n   DECL_EXTERNAL (decl) = 1;"}, {"sha": "755d40fc579b39a58c0b01fc0d420047246ed3c2", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a2dd09a650e117e1590752c2f0bba82bdb43b20/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a2dd09a650e117e1590752c2f0bba82bdb43b20/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=6a2dd09a650e117e1590752c2f0bba82bdb43b20", "patch": "@@ -1,3 +1,9 @@\n+2002-07-01  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* java/decl.c (builtin_function): Accept additional parameter.\n+\t(java_init_decl_processing): Pass an additional NULL_TREE\n+\targument to builtin_function.\n+\n 2002-06-29  T.J. Mather  <tjmather@maxmind.com>\n \n \t* gcj.texi: Fixed gcj invocation example so that it compiles."}, {"sha": "bf5e5ff5192b51b21ae1696b8250441065827176", "filename": "gcc/java/decl.c", "status": "modified", "additions": 30, "deletions": 26, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a2dd09a650e117e1590752c2f0bba82bdb43b20/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a2dd09a650e117e1590752c2f0bba82bdb43b20/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=6a2dd09a650e117e1590752c2f0bba82bdb43b20", "patch": "@@ -358,15 +358,17 @@ push_promoted_type (name, actual_type)\n    See tree.h for its possible values.\n \n    If LIBRARY_NAME is nonzero, use that for DECL_ASSEMBLER_NAME,\n-   the name to be called if we can't opencode the function.  */\n+   the name to be called if we can't opencode the function.  If\n+   ATTRS is nonzero, use that for the function's attribute list.  */\n \n tree\n-builtin_function (name, type, function_code, class, library_name)\n+builtin_function (name, type, function_code, class, library_name, attrs)\n      const char *name;\n      tree type;\n      int function_code;\n      enum built_in_class class;\n      const char *library_name;\n+     tree attrs ATTRIBUTE_UNUSED;\n {\n   tree decl = build_decl (FUNCTION_DECL, get_identifier (name), type);\n   DECL_EXTERNAL (decl) = 1;\n@@ -750,39 +752,41 @@ java_init_decl_processing ()\n \t\t tree_cons (NULL_TREE, int_type_node, endlink));\n   alloc_object_node = builtin_function (\"_Jv_AllocObject\",\n \t\t\t\t\tbuild_function_type (ptr_type_node, t),\n-\t\t\t\t\t0, NOT_BUILT_IN, NULL);\n+\t\t\t\t\t0, NOT_BUILT_IN, NULL, NULL_TREE);\n   DECL_IS_MALLOC (alloc_object_node) = 1;\n   alloc_no_finalizer_node = \n     builtin_function (\"_Jv_AllocObjectNoFinalizer\",\n \t\t      build_function_type (ptr_type_node, t),\n-\t\t      0, NOT_BUILT_IN, NULL);\n+\t\t      0, NOT_BUILT_IN, NULL, NULL_TREE);\n   DECL_IS_MALLOC (alloc_no_finalizer_node) = 1;\n \n   t = tree_cons (NULL_TREE, ptr_type_node, endlink);\n   soft_initclass_node = builtin_function (\"_Jv_InitClass\",\n \t\t\t\t\t  build_function_type (void_type_node,\n \t\t\t\t\t\t\t       t),\n-\t\t\t\t\t  0, NOT_BUILT_IN, NULL);\n+\t\t\t\t\t  0, NOT_BUILT_IN, NULL, NULL_TREE);\n \n   throw_node = builtin_function (\"_Jv_Throw\",\n \t\t\t\t build_function_type (ptr_type_node, t),\n-\t\t\t\t 0, NOT_BUILT_IN, NULL);\n+\t\t\t\t 0, NOT_BUILT_IN, NULL, NULL_TREE);\n   /* Mark throw_nodes as `noreturn' functions with side effects.  */\n   TREE_THIS_VOLATILE (throw_node) = 1;\n   TREE_SIDE_EFFECTS (throw_node) = 1;\n \n   t = build_function_type (int_type_node, endlink);\n   soft_monitorenter_node \n-    = builtin_function (\"_Jv_MonitorEnter\", t, 0, NOT_BUILT_IN, NULL);\n+    = builtin_function (\"_Jv_MonitorEnter\", t, 0, NOT_BUILT_IN,\n+\t\t\tNULL, NULL_TREE);\n   soft_monitorexit_node \n-    = builtin_function (\"_Jv_MonitorExit\", t, 0, NOT_BUILT_IN, NULL);\n+    = builtin_function (\"_Jv_MonitorExit\", t, 0, NOT_BUILT_IN,\n+\t\t\tNULL, NULL_TREE);\n   \n   t = tree_cons (NULL_TREE, int_type_node, \n \t\t tree_cons (NULL_TREE, int_type_node, endlink));\n   soft_newarray_node\n       = builtin_function (\"_Jv_NewPrimArray\",\n \t\t\t  build_function_type(ptr_type_node, t),\n-\t\t\t  0, NOT_BUILT_IN, NULL);\n+\t\t\t  0, NOT_BUILT_IN, NULL, NULL_TREE);\n   DECL_IS_MALLOC (soft_newarray_node) = 1;\n \n   t = tree_cons (NULL_TREE, int_type_node,\n@@ -791,22 +795,22 @@ java_init_decl_processing ()\n   soft_anewarray_node\n       = builtin_function (\"_Jv_NewObjectArray\",\n \t\t\t  build_function_type (ptr_type_node, t),\n-\t\t\t  0, NOT_BUILT_IN, NULL);\n+\t\t\t  0, NOT_BUILT_IN, NULL, NULL_TREE);\n   DECL_IS_MALLOC (soft_anewarray_node) = 1;\n \n   t = tree_cons (NULL_TREE, ptr_type_node,\n \t\t tree_cons (NULL_TREE, int_type_node, endlink));\n   soft_multianewarray_node\n       = builtin_function (\"_Jv_NewMultiArray\",\n \t\t\t  build_function_type (ptr_type_node, t),\n-\t\t\t  0, NOT_BUILT_IN, NULL);\n+\t\t\t  0, NOT_BUILT_IN, NULL, NULL_TREE);\n   DECL_IS_MALLOC (soft_multianewarray_node) = 1;\n \n   t = build_function_type (void_type_node, \n \t\t\t   tree_cons (NULL_TREE, int_type_node, endlink));\n   soft_badarrayindex_node\n       = builtin_function (\"_Jv_ThrowBadArrayIndex\", t, \n-\t\t\t  0, NOT_BUILT_IN, NULL);\n+\t\t\t  0, NOT_BUILT_IN, NULL, NULL_TREE);\n   /* Mark soft_badarrayindex_node as a `noreturn' function with side\n      effects.  */\n   TREE_THIS_VOLATILE (soft_badarrayindex_node) = 1;\n@@ -815,7 +819,7 @@ java_init_decl_processing ()\n   soft_nullpointer_node\n     = builtin_function (\"_Jv_ThrowNullPointerException\",\n \t\t\tbuild_function_type (void_type_node, endlink),\n-\t\t\t0, NOT_BUILT_IN, NULL);\n+\t\t\t0, NOT_BUILT_IN, NULL, NULL_TREE);\n   /* Mark soft_nullpointer_node as a `noreturn' function with side\n      effects.  */\n   TREE_THIS_VOLATILE (soft_nullpointer_node) = 1;\n@@ -826,79 +830,79 @@ java_init_decl_processing ()\n   soft_checkcast_node\n     = builtin_function (\"_Jv_CheckCast\",\n \t\t\tbuild_function_type (ptr_type_node, t),\n-\t\t\t0, NOT_BUILT_IN, NULL);\n+\t\t\t0, NOT_BUILT_IN, NULL, NULL_TREE);\n   t = tree_cons (NULL_TREE, object_ptr_type_node,\n \t\t tree_cons (NULL_TREE, class_ptr_type, endlink));\n   soft_instanceof_node\n     = builtin_function (\"_Jv_IsInstanceOf\",\n \t\t\tbuild_function_type (boolean_type_node, t),\n-\t\t\t0, NOT_BUILT_IN, NULL);\n+\t\t\t0, NOT_BUILT_IN, NULL, NULL_TREE);\n   t = tree_cons (NULL_TREE, object_ptr_type_node,\n \t\t tree_cons (NULL_TREE, object_ptr_type_node, endlink));\n   soft_checkarraystore_node\n     = builtin_function (\"_Jv_CheckArrayStore\",\n \t\t\tbuild_function_type (void_type_node, t),\n-\t\t\t0, NOT_BUILT_IN, NULL);\n+\t\t\t0, NOT_BUILT_IN, NULL, NULL_TREE);\n   t = tree_cons (NULL_TREE, ptr_type_node,\n \t\t tree_cons (NULL_TREE, ptr_type_node,\n \t\t\t    tree_cons (NULL_TREE, int_type_node, endlink)));\n   soft_lookupinterfacemethod_node \n     = builtin_function (\"_Jv_LookupInterfaceMethodIdx\",\n \t\t\tbuild_function_type (ptr_type_node, t),\n-\t\t\t0, NOT_BUILT_IN, NULL);\n+\t\t\t0, NOT_BUILT_IN, NULL, NULL_TREE);\n \n   t = tree_cons (NULL_TREE, object_ptr_type_node,\n \t\t tree_cons (NULL_TREE, ptr_type_node,\n \t\t\t    tree_cons (NULL_TREE, ptr_type_node, endlink)));\n   soft_lookupjnimethod_node\n     = builtin_function (\"_Jv_LookupJNIMethod\",\n \t\t\tbuild_function_type (ptr_type_node, t),\n-\t\t\t0, NOT_BUILT_IN, NULL);\n+\t\t\t0, NOT_BUILT_IN, NULL, NULL_TREE);\n   t = tree_cons (NULL_TREE, ptr_type_node, endlink);\n   soft_getjnienvnewframe_node\n     = builtin_function (\"_Jv_GetJNIEnvNewFrame\",\n \t\t\tbuild_function_type (ptr_type_node, t),\n-\t\t\t0, NOT_BUILT_IN, NULL);\n+\t\t\t0, NOT_BUILT_IN, NULL, NULL_TREE);\n   soft_jnipopsystemframe_node\n     = builtin_function (\"_Jv_JNI_PopSystemFrame\",\n \t\t\tbuild_function_type (ptr_type_node, t),\n-\t\t\t0, NOT_BUILT_IN, NULL);\n+\t\t\t0, NOT_BUILT_IN, NULL, NULL_TREE);\n \n   t = tree_cons (NULL_TREE, double_type_node,\n \t\t tree_cons (NULL_TREE, double_type_node, endlink));\n   soft_fmod_node\n     = builtin_function (\"__builtin_fmod\",\n \t\t\tbuild_function_type (double_type_node, t),\n-\t\t\tBUILT_IN_FMOD, BUILT_IN_NORMAL, \"fmod\");\n+\t\t\tBUILT_IN_FMOD, BUILT_IN_NORMAL, \"fmod\", NULL_TREE);\n \n #if 0\n   t = tree_cons (NULL_TREE, float_type_node,\n \t\t tree_cons (NULL_TREE, float_type_node, endlink));\n   soft_fmodf_node\n     = builtin_function (\"__builtin_fmodf\",\n \t\t\tbuild_function_type (float_type_node, t),\n-\t\t\tBUILT_IN_FMOD, BUILT_IN_NORMAL, \"fmodf\");\n+\t\t\tBUILT_IN_FMOD, BUILT_IN_NORMAL, \"fmodf\", NULL_TREE);\n #endif\n     \n   soft_idiv_node\n     = builtin_function (\"_Jv_divI\",\n \t\t\tbuild_function_type (int_type_node, t),\n-\t\t\t0, NOT_BUILT_IN, NULL);\n+\t\t\t0, NOT_BUILT_IN, NULL, NULL_TREE);\n \n   soft_irem_node\n     = builtin_function (\"_Jv_remI\",\n \t\t\tbuild_function_type (int_type_node, t),\n-\t\t\t0, NOT_BUILT_IN, NULL);\n+\t\t\t0, NOT_BUILT_IN, NULL, NULL_TREE);\n \n   soft_ldiv_node\n     = builtin_function (\"_Jv_divJ\",\n \t\t\tbuild_function_type (long_type_node, t),\n-\t\t\t0, NOT_BUILT_IN, NULL);\n+\t\t\t0, NOT_BUILT_IN, NULL, NULL_TREE);\n \n   soft_lrem_node\n     = builtin_function (\"_Jv_remJ\",\n \t\t\tbuild_function_type (long_type_node, t),\n-\t\t\t0, NOT_BUILT_IN, NULL);\n+\t\t\t0, NOT_BUILT_IN, NULL, NULL_TREE);\n \n   /* Initialize variables for except.c.  */\n   eh_personality_libfunc = init_one_libfunc (USING_SJLJ_EXCEPTIONS"}, {"sha": "3909e0ca16f89506b74aae6f009fb7a8db4354f6", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a2dd09a650e117e1590752c2f0bba82bdb43b20/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a2dd09a650e117e1590752c2f0bba82bdb43b20/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=6a2dd09a650e117e1590752c2f0bba82bdb43b20", "patch": "@@ -1093,7 +1093,8 @@ synth_module_prologue ()\n       pushdecl (umsg_decl);\n     }\n   else\n-    umsg_decl = builtin_function (TAG_MSGSEND, temp_type, 0, NOT_BUILT_IN, 0);\n+    umsg_decl = builtin_function (TAG_MSGSEND, temp_type, 0, NOT_BUILT_IN,\n+\t\t\t\t  NULL, NULL_TREE);\n \n   /* id objc_msgSendSuper (struct objc_super *, SEL, ...); */\n \n@@ -1104,7 +1105,8 @@ synth_module_prologue ()\n \t\t\t\t\t\t NULL_TREE)));\n \n   umsg_super_decl = builtin_function (TAG_MSGSENDSUPER,\n-\t\t\t\t     temp_type, 0, NOT_BUILT_IN, 0);\n+\t\t\t\t      temp_type, 0, NOT_BUILT_IN,\n+\t\t\t\t      NULL, NULL_TREE);\n \n   /* id objc_getClass (const char *); */\n \n@@ -1115,12 +1117,14 @@ synth_module_prologue ()\n \t\t\t\t\t      NULL_TREE)));\n \n   objc_get_class_decl\n-    = builtin_function (TAG_GETCLASS, temp_type, 0, NOT_BUILT_IN, 0);\n+    = builtin_function (TAG_GETCLASS, temp_type, 0, NOT_BUILT_IN,\n+\t\t\tNULL, NULL_TREE);\n \n   /* id objc_getMetaClass (const char *); */\n \n   objc_get_meta_class_decl\n-    = builtin_function (TAG_GETMETACLASS, temp_type, 0, NOT_BUILT_IN, 0);\n+    = builtin_function (TAG_GETMETACLASS, temp_type, 0, NOT_BUILT_IN,\n+\t\t\tNULL, NULL_TREE);\n \n   /* static SEL _OBJC_SELECTOR_TABLE[]; */\n "}, {"sha": "75c8e6036e7119ec2ac2453f42ede943fbf43502", "filename": "gcc/tree.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a2dd09a650e117e1590752c2f0bba82bdb43b20/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a2dd09a650e117e1590752c2f0bba82bdb43b20/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=6a2dd09a650e117e1590752c2f0bba82bdb43b20", "patch": "@@ -2724,9 +2724,9 @@ extern int all_types_permanent;\n \n /* Declare a predefined function.  Return the declaration.  This function is\n    provided by each language frontend.  */\n-extern tree builtin_function\t\t\tPARAMS ((const char *, tree, int,\n-\t\t\t\t\t\t       enum built_in_class,\n-\t\t\t\t\t\t       const char *));\n+extern tree builtin_function\t\tPARAMS ((const char *, tree, int,\n+\t\t\t\t\t       enum built_in_class,\n+\t\t\t\t\t       const char *, tree));\n \f\n /* In tree.c */\n extern char *perm_calloc\t\t\tPARAMS ((int, long));"}]}