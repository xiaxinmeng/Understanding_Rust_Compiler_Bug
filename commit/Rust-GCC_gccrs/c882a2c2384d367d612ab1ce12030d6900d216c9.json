{"sha": "c882a2c2384d367d612ab1ce12030d6900d216c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzg4MmEyYzIzODRkMzY3ZDYxMmFiMWNlMTIwMzBkNjkwMGQyMTZjOQ==", "commit": {"author": {"name": "Dorit Nuzman", "email": "dorit@il.ibm.com", "date": "2006-12-20T14:07:38Z"}, "committer": {"name": "Dorit Nuzman", "email": "dorit@gcc.gnu.org", "date": "2006-12-20T14:07:38Z"}, "message": "spu.md (vec_widen_umult_hi_v8hi): New.\n\n        * config/spu/spu.md (vec_widen_umult_hi_v8hi): New.\n        (vec_widen_umult_lo_v8hi, vec_widen_smult_hi_v8hi): New.\n        (vec_widen_smult_lo_v8hi): New.\n        * config/spu/spu.c (TARGET_VECTORIZE_BUILTIN_MUL_WIDEN_EVEN): Defined.\n        (TARGET_VECTORIZE_BUILTIN_MUL_WIDEN_ODD): Defined.\n        (spu_builtin_mul_widen_even, spu_builtin_mul_widen_odd): New.\n\nFrom-SVN: r120073", "tree": {"sha": "081393dfa2fc920ca7ba8c26ccdaa57ce77a0082", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/081393dfa2fc920ca7ba8c26ccdaa57ce77a0082"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c882a2c2384d367d612ab1ce12030d6900d216c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c882a2c2384d367d612ab1ce12030d6900d216c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c882a2c2384d367d612ab1ce12030d6900d216c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c882a2c2384d367d612ab1ce12030d6900d216c9/comments", "author": null, "committer": null, "parents": [{"sha": "71f77fd790b55c7d6b831d76665bdf26a65fad2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71f77fd790b55c7d6b831d76665bdf26a65fad2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71f77fd790b55c7d6b831d76665bdf26a65fad2b"}], "stats": {"total": 170, "additions": 170, "deletions": 0}, "files": [{"sha": "611093f2b74e48154cedcbae5b9da93343f92728", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c882a2c2384d367d612ab1ce12030d6900d216c9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c882a2c2384d367d612ab1ce12030d6900d216c9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c882a2c2384d367d612ab1ce12030d6900d216c9", "patch": "@@ -1,3 +1,12 @@\n+2006-12-20  Dorit Nuzman  <dorit@il.ibm.com>\n+\n+\t* config/spu/spu.md (vec_widen_umult_hi_v8hi): New.\n+\t(vec_widen_umult_lo_v8hi, vec_widen_smult_hi_v8hi): New.\n+\t(vec_widen_smult_lo_v8hi): New.\n+\t* config/spu/spu.c (TARGET_VECTORIZE_BUILTIN_MUL_WIDEN_EVEN): Defined.\n+\t(TARGET_VECTORIZE_BUILTIN_MUL_WIDEN_ODD): Defined.\n+\t(spu_builtin_mul_widen_even, spu_builtin_mul_widen_odd): New.\n+\n 2006-12-20  Jan Hubicka  <jh@suse.cz>\n \n \t* cgraph.c: Update overall comment; fix vertical spacing."}, {"sha": "58a34a8f7e75e9b65e60fa18ce2786362a96f200", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c882a2c2384d367d612ab1ce12030d6900d216c9/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c882a2c2384d367d612ab1ce12030d6900d216c9/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=c882a2c2384d367d612ab1ce12030d6900d216c9", "patch": "@@ -130,6 +130,8 @@ static void spu_init_libfuncs (void);\n static bool spu_return_in_memory (tree type, tree fntype);\n static void fix_range (const char *);\n static void spu_encode_section_info (tree, rtx, int);\n+static tree spu_builtin_mul_widen_even (tree);\n+static tree spu_builtin_mul_widen_odd (tree);\n static tree spu_builtin_mask_for_load (void);\n \n extern const char *reg_names[];\n@@ -249,6 +251,12 @@ const struct attribute_spec spu_attribute_table[];\n #undef  TARGET_ENCODE_SECTION_INFO\n #define TARGET_ENCODE_SECTION_INFO spu_encode_section_info\n \n+#undef TARGET_VECTORIZE_BUILTIN_MUL_WIDEN_EVEN\n+#define TARGET_VECTORIZE_BUILTIN_MUL_WIDEN_EVEN spu_builtin_mul_widen_even\n+\n+#undef TARGET_VECTORIZE_BUILTIN_MUL_WIDEN_ODD\n+#define TARGET_VECTORIZE_BUILTIN_MUL_WIDEN_ODD spu_builtin_mul_widen_odd\n+\n #undef TARGET_VECTORIZE_BUILTIN_MASK_FOR_LOAD\n #define TARGET_VECTORIZE_BUILTIN_MASK_FOR_LOAD spu_builtin_mask_for_load\n \n@@ -4993,6 +5001,41 @@ spu_expand_builtin (tree exp,\n   abort ();\n }\n \n+/* Implement targetm.vectorize.builtin_mul_widen_even.  */\n+static tree\n+spu_builtin_mul_widen_even (tree type)\n+{\n+  struct spu_builtin_description *d;\n+  switch (TYPE_MODE (type))\n+    {\n+    case V8HImode:\n+      if (TYPE_UNSIGNED (type))\n+\treturn spu_builtins[SPU_MULE_0].fndecl;\n+      else\n+\treturn spu_builtins[SPU_MULE_1].fndecl;\n+      break;\n+    default:\n+      return NULL_TREE;\n+    }\n+}\n+\n+/* Implement targetm.vectorize.builtin_mul_widen_odd.  */\n+static tree\n+spu_builtin_mul_widen_odd (tree type)\n+{\n+  switch (TYPE_MODE (type))\n+    {\n+    case V8HImode:\n+      if (TYPE_UNSIGNED (type))\n+\treturn spu_builtins[SPU_MULO_1].fndecl;\n+      else\n+\treturn spu_builtins[SPU_MULO_0].fndecl; \n+      break;\n+    default:\n+      return NULL_TREE;\n+    }\n+}\n+\n /* Implement targetm.vectorize.builtin_mask_for_load.  */\n static tree\n spu_builtin_mask_for_load (void)"}, {"sha": "7978361591234217947c6e90f84e42b0f9d85785", "filename": "gcc/config/spu/spu.md", "status": "modified", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c882a2c2384d367d612ab1ce12030d6900d216c9/gcc%2Fconfig%2Fspu%2Fspu.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c882a2c2384d367d612ab1ce12030d6900d216c9/gcc%2Fconfig%2Fspu%2Fspu.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.md?ref=c882a2c2384d367d612ab1ce12030d6900d216c9", "patch": "@@ -3378,6 +3378,118 @@ selb\\t%0,%4,%0,%3\"\n   DONE;\n }\") \n \n+(define_expand \"vec_widen_umult_hi_v8hi\"\n+  [(set (match_operand:V4SI 0 \"register_operand\"   \"=r\")\n+        (mult:V4SI\n+          (zero_extend:V4SI\n+            (vec_select:V4HI\n+              (match_operand:V8HI 1 \"register_operand\" \"r\")\n+              (parallel [(const_int 0)(const_int 1)(const_int 2)(const_int 3)])))\n+          (zero_extend:V4SI\n+            (vec_select:V4HI\n+              (match_operand:V8HI 2 \"register_operand\" \"r\")\n+              (parallel [(const_int 0)(const_int 1)(const_int 2)(const_int 3)])))))]\n+  \"\"\n+  \"\n+{\n+  rtx ve = gen_reg_rtx (V4SImode);\n+  rtx vo = gen_reg_rtx (V4SImode);\n+  rtx mask = gen_reg_rtx (TImode);\n+  unsigned char arr[16] = {\n+    0x00, 0x01, 0x02, 0x03, 0x10, 0x11, 0x12, 0x13, \n+    0x04, 0x05, 0x06, 0x07, 0x14, 0x15, 0x16, 0x17};\n+  \n+  emit_move_insn (mask, array_to_constant (TImode, arr));\n+  emit_insn (gen_spu_mpyhhu (ve, operands[1], operands[2]));\n+  emit_insn (gen_spu_mpyu (vo, operands[1], operands[2]));\n+  emit_insn (gen_shufb (operands[0], ve, vo, mask));\n+  DONE;\n+}\")\n+\n+(define_expand \"vec_widen_umult_lo_v8hi\"\n+  [(set (match_operand:V4SI 0 \"register_operand\"   \"=r\")\n+        (mult:V4SI\n+          (zero_extend:V4SI\n+            (vec_select:V4HI\n+              (match_operand:V8HI 1 \"register_operand\" \"r\")\n+              (parallel [(const_int 4)(const_int 5)(const_int 6)(const_int 7)])))\n+          (zero_extend:V4SI\n+            (vec_select:V4HI\n+              (match_operand:V8HI 2 \"register_operand\" \"r\")\n+              (parallel [(const_int 4)(const_int 5)(const_int 6)(const_int 7)])))))]\n+  \"\"\n+  \"\n+{\n+  rtx ve = gen_reg_rtx (V4SImode);\n+  rtx vo = gen_reg_rtx (V4SImode);\n+  rtx mask = gen_reg_rtx (TImode);\n+  unsigned char arr[16] = {\n+    0x08, 0x09, 0x0A, 0x0B, 0x18, 0x19, 0x1A, 0x1B, \n+    0x0C, 0x0D, 0x0E, 0x0F, 0x1C, 0x1D, 0x1E, 0x1F};\n+\n+  emit_move_insn (mask, array_to_constant (TImode, arr));\n+  emit_insn (gen_spu_mpyhhu (ve, operands[1], operands[2]));\n+  emit_insn (gen_spu_mpyu (vo, operands[1], operands[2]));\n+  emit_insn (gen_shufb (operands[0], ve, vo, mask));\n+  DONE;\n+}\")\n+\n+(define_expand \"vec_widen_smult_hi_v8hi\"\n+  [(set (match_operand:V4SI 0 \"register_operand\"   \"=r\")\n+        (mult:V4SI\n+          (sign_extend:V4SI\n+            (vec_select:V4HI\n+              (match_operand:V8HI 1 \"register_operand\" \"r\")\n+              (parallel [(const_int 0)(const_int 1)(const_int 2)(const_int 3)])))\n+          (sign_extend:V4SI\n+            (vec_select:V4HI\n+              (match_operand:V8HI 2 \"register_operand\" \"r\")\n+              (parallel [(const_int 0)(const_int 1)(const_int 2)(const_int 3)])))))]\n+  \"\"\n+  \"\n+{\n+  rtx ve = gen_reg_rtx (V4SImode);\n+  rtx vo = gen_reg_rtx (V4SImode);\n+  rtx mask = gen_reg_rtx (TImode);\n+  unsigned char arr[16] = {\n+    0x00, 0x01, 0x02, 0x03, 0x10, 0x11, 0x12, 0x13, \n+    0x04, 0x05, 0x06, 0x07, 0x14, 0x15, 0x16, 0x17};\n+  \n+  emit_move_insn (mask, array_to_constant (TImode, arr));\n+  emit_insn (gen_spu_mpyhh (ve, operands[1], operands[2]));\n+  emit_insn (gen_spu_mpy (vo, operands[1], operands[2]));\n+  emit_insn (gen_shufb (operands[0], ve, vo, mask));\n+  DONE;\n+}\")\n+\n+(define_expand \"vec_widen_smult_lo_v8hi\"\n+  [(set (match_operand:V4SI 0 \"register_operand\"   \"=r\")\n+        (mult:V4SI\n+          (sign_extend:V4SI\n+            (vec_select:V4HI\n+              (match_operand:V8HI 1 \"register_operand\" \"r\")\n+              (parallel [(const_int 4)(const_int 5)(const_int 6)(const_int 7)])))\n+          (sign_extend:V4SI\n+            (vec_select:V4HI\n+              (match_operand:V8HI 2 \"register_operand\" \"r\")\n+              (parallel [(const_int 4)(const_int 5)(const_int 6)(const_int 7)])))))]\n+  \"\"\n+  \"\n+{\n+  rtx ve = gen_reg_rtx (V4SImode);\n+  rtx vo = gen_reg_rtx (V4SImode);\n+  rtx mask = gen_reg_rtx (TImode);\n+  unsigned char arr[16] = {\n+    0x08, 0x09, 0x0A, 0x0B, 0x18, 0x19, 0x1A, 0x1B, \n+    0x0C, 0x0D, 0x0E, 0x0F, 0x1C, 0x1D, 0x1E, 0x1F};\n+\n+  emit_move_insn (mask, array_to_constant (TImode, arr));\n+  emit_insn (gen_spu_mpyhh (ve, operands[1], operands[2]));\n+  emit_insn (gen_spu_mpy (vo, operands[1], operands[2]));\n+  emit_insn (gen_shufb (operands[0], ve, vo, mask));\n+  DONE;\n+}\")\n+\n (define_expand \"vec_realign_load_<mode>\"\n   [(set (match_operand:ALL 0 \"register_operand\" \"=r\")\n \t(unspec:ALL [(match_operand:ALL 1 \"register_operand\" \"r\")"}, {"sha": "34255c46c499cb39a9f647a0b753be5dbc66ad9f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c882a2c2384d367d612ab1ce12030d6900d216c9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c882a2c2384d367d612ab1ce12030d6900d216c9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c882a2c2384d367d612ab1ce12030d6900d216c9", "patch": "@@ -1,3 +1,8 @@\n+2006-12-20  Dorit Nuzman  <dorit@il.ibm.com>\n+\n+\t* lib/target-supports.exp: Add spu to\n+\tcheck_effective_target_vect_widen_mult_hi_to_si.\n+\n 2006-12-20  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/29992"}, {"sha": "e64a523d3afc15b164e817d2303f128b9a2cf15b", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c882a2c2384d367d612ab1ce12030d6900d216c9/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c882a2c2384d367d612ab1ce12030d6900d216c9/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=c882a2c2384d367d612ab1ce12030d6900d216c9", "patch": "@@ -1641,6 +1641,7 @@ proc check_effective_target_vect_widen_mult_hi_to_si { } {\n           set et_vect_widen_mult_hi_to_si_saved 0\n         }\n         if { [istarget powerpc*-*-*]\n+\t      || [istarget spu-*-*]\n \t      || [istarget i?86-*-*]\n \t      || [istarget x86_64-*-*] } {\n             set et_vect_widen_mult_hi_to_si_saved 1"}]}