{"sha": "820f11620e17579c411c3eb31d73a772a2174f85", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODIwZjExNjIwZTE3NTc5YzQxMWMzZWIzMWQ3M2E3NzJhMjE3NGY4NQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-25T09:19:34Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-25T09:19:34Z"}, "message": "[multiple changes]\n\n2017-04-25  Bob Duff  <duff@adacore.com>\n\n\t* freeze.adb (Freeze_Record_Type): Use the\n\tunderlying type of the component type to determine whether it's\n\telementary. For representation clause purposes, a private type\n\tshould behave the same as its full type.\n\t* fname.ads, fname.adb (Is_Predefined_File_Name):\n\tMake sure things like \"system.ali\" are recognized as predefined.\n\n2017-04-25  Javier Miranda  <miranda@adacore.com>\n\n\t* debug.adb: Update documentation of -gnatd.6.\n\n2017-04-25  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch5.adb (Preanalyze_Range): Handle properly an Ada2012\n\telement iterator when the name is an overloaded function call,\n\tone of whose interpretations yields an array.\n\nFrom-SVN: r247155", "tree": {"sha": "b7d83c8f3229002a15a221bd9cfebea591bbd37d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7d83c8f3229002a15a221bd9cfebea591bbd37d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/820f11620e17579c411c3eb31d73a772a2174f85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/820f11620e17579c411c3eb31d73a772a2174f85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/820f11620e17579c411c3eb31d73a772a2174f85", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/820f11620e17579c411c3eb31d73a772a2174f85/comments", "author": null, "committer": null, "parents": [{"sha": "998429d6f234d9a1fa1ecc711ac851ecb06919c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/998429d6f234d9a1fa1ecc711ac851ecb06919c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/998429d6f234d9a1fa1ecc711ac851ecb06919c9"}], "stats": {"total": 90, "additions": 68, "deletions": 22}, "files": [{"sha": "a9de5f0f9e5ea0d1dc3391de02bc84337473410d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/820f11620e17579c411c3eb31d73a772a2174f85/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/820f11620e17579c411c3eb31d73a772a2174f85/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=820f11620e17579c411c3eb31d73a772a2174f85", "patch": "@@ -1,3 +1,22 @@\n+2017-04-25  Bob Duff  <duff@adacore.com>\n+\n+\t* freeze.adb (Freeze_Record_Type): Use the\n+\tunderlying type of the component type to determine whether it's\n+\telementary. For representation clause purposes, a private type\n+\tshould behave the same as its full type.\n+\t* fname.ads, fname.adb (Is_Predefined_File_Name):\n+\tMake sure things like \"system.ali\" are recognized as predefined.\n+\n+2017-04-25  Javier Miranda  <miranda@adacore.com>\n+\n+\t* debug.adb: Update documentation of -gnatd.6.\n+\n+2017-04-25  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch5.adb (Preanalyze_Range): Handle properly an Ada2012\n+\telement iterator when the name is an overloaded function call,\n+\tone of whose interpretations yields an array.\n+\n 2017-04-25  Bob Duff  <duff@adacore.com>\n \n \t* uname.ads, uname.adb (Is_Predefined_Unit_Name,"}, {"sha": "beddab3132167a8175a70071114743bcfeaca064", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/820f11620e17579c411c3eb31d73a772a2174f85/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/820f11620e17579c411c3eb31d73a772a2174f85/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=820f11620e17579c411c3eb31d73a772a2174f85", "patch": "@@ -160,7 +160,7 @@ package body Debug is\n    --  d.3  Output debugging information from Exp_Unst\n    --  d.4  Do not delete generated C file in case of errors\n    --  d.5  Do not generate imported subprogram definitions in C code\n-   --  d.6  Do not avoid declaring unreferenced itypes in C code\n+   --  d.6  Do not avoid declaring unreferenced types in C code\n    --  d.7\n    --  d.8\n    --  d.9\n@@ -781,9 +781,9 @@ package body Debug is\n    --       This debug flag disables this generation when generating C code,\n    --       assuming a proper #include will be used instead.\n \n-   --  d.6  By default the C back-end avoids declaring itypes that are not\n+   --  d.6  By default the C back-end avoids declaring types that are not\n    --       referenced by the generated C code. This debug flag restores the\n-   --       output of all the itypes.\n+   --       output of all the types.\n \n    ------------------------------------------\n    -- Documentation for Binder Debug Flags --"}, {"sha": "6db829106415b2da322595b720a30381cf93378e", "filename": "gcc/ada/fname.adb", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/820f11620e17579c411c3eb31d73a772a2174f85/gcc%2Fada%2Ffname.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/820f11620e17579c411c3eb31d73a772a2174f85/gcc%2Fada%2Ffname.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffname.adb?ref=820f11620e17579c411c3eb31d73a772a2174f85", "patch": "@@ -134,7 +134,7 @@ package body Fname is\n       return\n         Is_Predefined_File_Name (Fname, Renamings_Included)\n           or else Has_Prefix (Fname, Prefix => \"g-\")\n-          or else Has_Prefix (Fname, Prefix => \"gnat.ad\");\n+          or else Has_Prefix (Fname, Prefix => \"gnat.\");\n    end Is_Internal_File_Name;\n \n    function Is_Internal_File_Name\n@@ -174,9 +174,13 @@ package body Fname is\n          return False;\n       end if;\n \n-      if Has_Prefix (Fname, Prefix => \"ada.ad\")              --  Ada\n-        or else Has_Prefix (Fname, Prefix => \"interfac.ad\")  --  Interfaces\n-        or else Has_Prefix (Fname, Prefix => \"system.ad\")    --  System\n+      --  We include the \".\" in the prefixes below, so we don't match (e.g.)\n+      --  adamant.ads. So the first line matches \"ada.ads\", \"ada.adb\", and\n+      --  \"ada.ali\".\n+\n+      if Has_Prefix (Fname, Prefix => \"ada.\")              --  Ada\n+        or else Has_Prefix (Fname, Prefix => \"interfac.\")  --  Interfaces\n+        or else Has_Prefix (Fname, Prefix => \"system.\")    --  System\n       then\n          return True;\n       end if;\n@@ -190,45 +194,46 @@ package body Fname is\n       return\n          --  Calendar\n \n-        Has_Prefix (Fname, Prefix => \"calendar.ad\")\n+        Has_Prefix (Fname, Prefix => \"calendar.\")\n \n          --  Machine_Code\n \n-          or else Has_Prefix (Fname, Prefix => \"machcode.ad\")\n+          or else Has_Prefix (Fname, Prefix => \"machcode.\")\n \n          --  Unchecked_Conversion\n \n-          or else Has_Prefix (Fname, Prefix => \"unchconv.ad\")\n+          or else Has_Prefix (Fname, Prefix => \"unchconv.\")\n \n          --  Unchecked_Deallocation\n \n-          or else Has_Prefix (Fname, Prefix => \"unchdeal.ad\")\n+          or else Has_Prefix (Fname, Prefix => \"unchdeal.\")\n \n          --  Direct_IO\n \n-          or else Has_Prefix (Fname, Prefix => \"directio.ad\")\n+          or else Has_Prefix (Fname, Prefix => \"directio.\")\n \n          --  IO_Exceptions\n \n-          or else Has_Prefix (Fname, Prefix => \"ioexcept.ad\")\n+          or else Has_Prefix (Fname, Prefix => \"ioexcept.\")\n \n          --  Sequential_IO\n \n-          or else Has_Prefix (Fname, Prefix => \"sequenio.ad\")\n+          or else Has_Prefix (Fname, Prefix => \"sequenio.\")\n \n          --  Text_IO\n \n-          or else Has_Prefix (Fname, Prefix => \"text_io.ad\");\n+          or else Has_Prefix (Fname, Prefix => \"text_io.\");\n    end Is_Predefined_File_Name;\n \n    function Is_Predefined_File_Name\n      (Fname              : File_Name_Type;\n       Renamings_Included : Boolean := True) return Boolean\n    is\n-   begin\n-      return\n+      Result : constant Boolean :=\n         Is_Predefined_File_Name\n           (Get_Name_String (Fname), Renamings_Included);\n+   begin\n+      return Result;\n    end Is_Predefined_File_Name;\n \n    ---------------"}, {"sha": "8451788e8b065d16daf775027d5766ef130ec97d", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/820f11620e17579c411c3eb31d73a772a2174f85/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/820f11620e17579c411c3eb31d73a772a2174f85/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=820f11620e17579c411c3eb31d73a772a2174f85", "patch": "@@ -3756,14 +3756,15 @@ package body Freeze is\n          --  cannot modify the size of alignment of an aliased component.\n \n          All_Elem_Components : Boolean := True;\n-         --  Set False if we encounter a component of a composite type\n+         --  True if all components are of a type whose underlying type is\n+         --  elementary.\n \n          All_Sized_Components : Boolean := True;\n-         --  Set False if we encounter a component with unknown RM_Size\n+         --  True if all components have a known RM_Size\n \n          All_Storage_Unit_Components : Boolean := True;\n-         --  Set False if we encounter a component of a composite type whose\n-         --  RM_Size is not a multiple of the storage unit.\n+         --  True if all components have an RM_Size that is a multiple of the\n+         --  storage unit.\n \n          Elem_Component_Total_Esize : Uint := Uint_0;\n          --  Accumulates total Esize values of all elementary components. Used\n@@ -4091,7 +4092,9 @@ package body Freeze is\n                Sized_Component_Total_RM_Size :=\n                  Sized_Component_Total_RM_Size + RM_Size (Etype (Comp));\n \n-               if Is_Elementary_Type (Etype (Comp)) then\n+               if Present (Underlying_Type (Etype (Comp)))\n+                 and then Is_Elementary_Type (Underlying_Type (Etype (Comp)))\n+               then\n                   Elem_Component_Total_Esize :=\n                     Elem_Component_Total_Esize + Esize (Etype (Comp));\n                else"}, {"sha": "fd630afaec73c123cad72ac25939c080b129d1e9", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/820f11620e17579c411c3eb31d73a772a2174f85/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/820f11620e17579c411c3eb31d73a772a2174f85/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=820f11620e17579c411c3eb31d73a772a2174f85", "patch": "@@ -3811,6 +3811,7 @@ package body Sem_Ch5 is\n       if Nkind (R_Copy) in N_Subexpr and then Is_Overloaded (R_Copy) then\n \n          --  Apply preference rules for range of predefined integer types, or\n+         --  check for array or iterable construct for \"of\" iterator, or\n          --  diagnose true ambiguity.\n \n          declare\n@@ -3842,6 +3843,24 @@ package body Sem_Ch5 is\n                         exit;\n                      end if;\n                   end if;\n+\n+               elsif Nkind (Parent (R_Copy)) = N_Iterator_Specification\n+                 and then Of_Present (Parent (R_Copy))\n+               then\n+                  if Is_Array_Type (It.Typ)\n+                    or else Has_Aspect (It.Typ, Aspect_Iterator_Element)\n+                    or else Has_Aspect (It.Typ, Aspect_Constant_Indexing)\n+                    or else Has_Aspect (It.Typ, Aspect_Variable_Indexing)\n+                  then\n+                     if No (Found) then\n+                        Found := It.Typ;\n+                        Set_Etype (R_Copy, It.Typ);\n+\n+                     else\n+                        Error_Msg_N\n+                          (\"ambiguous domain of iteration\", R_Copy);\n+                     end if;\n+                  end if;\n                end if;\n \n                Get_Next_Interp (I, It);"}]}