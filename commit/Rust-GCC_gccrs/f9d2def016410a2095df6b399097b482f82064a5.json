{"sha": "f9d2def016410a2095df6b399097b482f82064a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjlkMmRlZjAxNjQxMGEyMDk1ZGY2YjM5OTA5N2I0ODJmODIwNjRhNQ==", "commit": {"author": {"name": "Feng Xue", "email": "fxue@os.amperecomputing.com", "date": "2020-09-01T09:17:58Z"}, "committer": {"name": "Feng Xue", "email": "fxue@os.amperecomputing.com", "date": "2020-09-15T03:14:01Z"}, "message": "tree-optimization/94234 - Fold plusminus_mult expr with multi-use operands\n\n2020-09-03  Feng Xue  <fxue@os.amperecomputing.com>\n\ngcc/\n\tPR tree-optimization/94234\n\t* genmatch.c (dt_simplify::gen_1): Emit check on final simplification\n\tresult when \"!\" is specified on toplevel output expr.\n\t* match.pd ((A * C) +- (B * C) -> (A +- B) * C): Allow folding on expr\n\twith multi-use operands if final result is a simple gimple value.\n\ngcc/testsuite/\n\tPR tree-optimization/94234\n\t* gcc.dg/pr94234-2.c: New test.", "tree": {"sha": "20271e5733559c91f04ca141f03903b0907d9af2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20271e5733559c91f04ca141f03903b0907d9af2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9d2def016410a2095df6b399097b482f82064a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9d2def016410a2095df6b399097b482f82064a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9d2def016410a2095df6b399097b482f82064a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9d2def016410a2095df6b399097b482f82064a5/comments", "author": {"login": "feng-xue-ampere", "id": 95893536, "node_id": "U_kgDOBbc4IA", "avatar_url": "https://avatars.githubusercontent.com/u/95893536?v=4", "gravatar_id": "", "url": "https://api.github.com/users/feng-xue-ampere", "html_url": "https://github.com/feng-xue-ampere", "followers_url": "https://api.github.com/users/feng-xue-ampere/followers", "following_url": "https://api.github.com/users/feng-xue-ampere/following{/other_user}", "gists_url": "https://api.github.com/users/feng-xue-ampere/gists{/gist_id}", "starred_url": "https://api.github.com/users/feng-xue-ampere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/feng-xue-ampere/subscriptions", "organizations_url": "https://api.github.com/users/feng-xue-ampere/orgs", "repos_url": "https://api.github.com/users/feng-xue-ampere/repos", "events_url": "https://api.github.com/users/feng-xue-ampere/events{/privacy}", "received_events_url": "https://api.github.com/users/feng-xue-ampere/received_events", "type": "User", "site_admin": false}, "committer": {"login": "feng-xue-ampere", "id": 95893536, "node_id": "U_kgDOBbc4IA", "avatar_url": "https://avatars.githubusercontent.com/u/95893536?v=4", "gravatar_id": "", "url": "https://api.github.com/users/feng-xue-ampere", "html_url": "https://github.com/feng-xue-ampere", "followers_url": "https://api.github.com/users/feng-xue-ampere/followers", "following_url": "https://api.github.com/users/feng-xue-ampere/following{/other_user}", "gists_url": "https://api.github.com/users/feng-xue-ampere/gists{/gist_id}", "starred_url": "https://api.github.com/users/feng-xue-ampere/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/feng-xue-ampere/subscriptions", "organizations_url": "https://api.github.com/users/feng-xue-ampere/orgs", "repos_url": "https://api.github.com/users/feng-xue-ampere/repos", "events_url": "https://api.github.com/users/feng-xue-ampere/events{/privacy}", "received_events_url": "https://api.github.com/users/feng-xue-ampere/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50a71cd0182ae11444bc7b582a3b1cb1c54c7a0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50a71cd0182ae11444bc7b582a3b1cb1c54c7a0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50a71cd0182ae11444bc7b582a3b1cb1c54c7a0d"}], "stats": {"total": 71, "additions": 60, "deletions": 11}, "files": [{"sha": "01363e3f09cb5d76efa9eb4cadca65e3d1c9635e", "filename": "gcc/genmatch.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9d2def016410a2095df6b399097b482f82064a5/gcc%2Fgenmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9d2def016410a2095df6b399097b482f82064a5/gcc%2Fgenmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmatch.c?ref=f9d2def016410a2095df6b399097b482f82064a5", "patch": "@@ -3426,8 +3426,14 @@ dt_simplify::gen_1 (FILE *f, int indent, bool gimple, operand *result)\n \t  /* Re-fold the toplevel result.  It's basically an embedded\n \t     gimple_build w/o actually building the stmt.  */\n \t  if (!is_predicate)\n-\t    fprintf_indent (f, indent,\n-\t\t\t    \"res_op->resimplify (lseq, valueize);\\n\");\n+\t    {\n+\t      fprintf_indent (f, indent,\n+\t\t\t      \"res_op->resimplify (lseq, valueize);\\n\");\n+\t      if (e->force_leaf)\n+\t\tfprintf_indent (f, indent,\n+\t\t\t\t\"if (!maybe_push_res_to_seq (res_op, NULL)) \"\n+\t\t\t\t\"goto %s;\\n\", fail_label);\n+\t    }\n \t}\n       else if (result->type == operand::OP_CAPTURE\n \t       || result->type == operand::OP_C_EXPR)"}, {"sha": "46fd880bd375122f4f273893d6822b3ec0e586a3", "filename": "gcc/match.pd", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9d2def016410a2095df6b399097b482f82064a5/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9d2def016410a2095df6b399097b482f82064a5/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=f9d2def016410a2095df6b399097b482f82064a5", "patch": "@@ -2570,15 +2570,19 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n  (for plusminus (plus minus)\n   (simplify\n    (plusminus (mult:cs@3 @0 @1) (mult:cs@4 @0 @2))\n-   (if ((!ANY_INTEGRAL_TYPE_P (type)\n-\t || TYPE_OVERFLOW_WRAPS (type)\n-\t || (INTEGRAL_TYPE_P (type)\n-\t     && tree_expr_nonzero_p (@0)\n-\t     && expr_not_equal_to (@0, wi::minus_one (TYPE_PRECISION (type)))))\n-\t/* If @1 +- @2 is constant require a hard single-use on either\n-\t   original operand (but not on both).  */\n-\t&& (single_use (@3) || single_use (@4)))\n-    (mult (plusminus @1 @2) @0)))\n+   (if (!ANY_INTEGRAL_TYPE_P (type)\n+\t|| TYPE_OVERFLOW_WRAPS (type)\n+\t|| (INTEGRAL_TYPE_P (type)\n+\t    && tree_expr_nonzero_p (@0)\n+\t    && expr_not_equal_to (@0, wi::minus_one (TYPE_PRECISION (type)))))\n+    (if (single_use (@3) || single_use (@4))\n+     /* If @1 +- @2 is constant require a hard single-use on either\n+\toriginal operand (but not on both).  */\n+     (mult (plusminus @1 @2) @0)\n+#if GIMPLE\n+     (mult! (plusminus @1 @2) @0)\n+#endif\n+  )))\n   /* We cannot generate constant 1 for fract.  */\n   (if (!ALL_FRACT_MODE_P (TYPE_MODE (type)))\n    (simplify"}, {"sha": "1f4b194dd43c8ec0bf1783b2cab3c60fb61e1db1", "filename": "gcc/testsuite/gcc.dg/pr94234-2.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9d2def016410a2095df6b399097b482f82064a5/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94234-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9d2def016410a2095df6b399097b482f82064a5/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94234-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94234-2.c?ref=f9d2def016410a2095df6b399097b482f82064a5", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-forwprop1\" } */ \n+\n+int use_fn (int a);\n+\n+int foo (int n)\n+{\n+  int b1 = 8 * (n + 1);\n+  int b2 = 8 * n;\n+\n+  use_fn (b1 ^ b2);\n+\n+  return b1 - b2;\n+}\n+\n+unsigned goo (unsigned m_param, unsigned n_param)\n+{\n+  unsigned b1 = m_param * (n_param + 2);\n+  unsigned b2 = m_param * (n_param + 1);\n+\n+  use_fn (b1 ^ b2);\n+\n+  return b1 - b2;\n+}\n+\n+unsigned hoo (unsigned k_param)\n+{\n+  unsigned b1 = k_param * 28;\n+  unsigned b2 = k_param * 15;\n+  unsigned b3 = k_param * 12;\n+\n+  use_fn (b1 ^ b2 ^ b3);\n+\n+  return (b1 - b2) - b3;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"return 8;\" 1 \"forwprop1\" } } */\n+/* { dg-final { scan-tree-dump-times \"return m_param\" 1 \"forwprop1\" } } */\n+/* { dg-final { scan-tree-dump-not \"return k_param\" \"forwprop1\" } } */"}]}