{"sha": "fe2978fba2ed2c3be0d1cd6ca3e1de30bd07bf93", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmUyOTc4ZmJhMmVkMmMzYmUwZDFjZDZjYTNlMWRlMzBiZDA3YmY5Mw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2009-05-22T14:57:15Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2009-05-22T14:57:15Z"}, "message": "tree.c (handle_dll_attribute): Mark dllexport'd inlines as non-external.\n\n\tgcc/\n\t* tree.c (handle_dll_attribute): Mark dllexport'd inlines as\n\tnon-external.\n\n\tgcc/cp\n\t* decl2.c (decl_needed_p): Consider dllexport'd functions needed.\n\t* semantics.c (expand_or_defer_fn): Similarly.\n\n\tgcc/testsuite/\n\t* gcc.dg/dll-6.c: New test.\n\t* gcc.dg/dll-6a.c: Likewise.\n\t* gcc.dg/dll-7.c: Likewise.\n\t* gcc.dg/dll-7a.c: Likewise.\n\t* g++.dg/ext/dllexport2.C: Likewise.\n\t* g++.dg/ext/dllexport2a.cc: Likewise.\n\nFrom-SVN: r147799", "tree": {"sha": "82c98fa46c401882eeff8896e21978996bb0fc84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82c98fa46c401882eeff8896e21978996bb0fc84"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe2978fba2ed2c3be0d1cd6ca3e1de30bd07bf93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe2978fba2ed2c3be0d1cd6ca3e1de30bd07bf93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe2978fba2ed2c3be0d1cd6ca3e1de30bd07bf93", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe2978fba2ed2c3be0d1cd6ca3e1de30bd07bf93/comments", "author": null, "committer": null, "parents": [{"sha": "e4c29fbc9e0c826fac5586555d54db657d7b2382", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4c29fbc9e0c826fac5586555d54db657d7b2382", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4c29fbc9e0c826fac5586555d54db657d7b2382"}], "stats": {"total": 256, "additions": 253, "deletions": 3}, "files": [{"sha": "514f3c44521c732420d81e5a619c94f7413b6e1f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe2978fba2ed2c3be0d1cd6ca3e1de30bd07bf93/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe2978fba2ed2c3be0d1cd6ca3e1de30bd07bf93/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fe2978fba2ed2c3be0d1cd6ca3e1de30bd07bf93", "patch": "@@ -1,3 +1,8 @@\n+2009-05-22  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* tree.c (handle_dll_attribute): Mark dllexport'd inlines as\n+\tnon-external.\n+\n 2009-05-22  Ben Elliston  <bje@au.ibm.com>\n \n \t* Makefile.in (bversion.h, s-bversion): New targets."}, {"sha": "c876a17c23b84cfd9920c3b008d291be66cbe903", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe2978fba2ed2c3be0d1cd6ca3e1de30bd07bf93/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe2978fba2ed2c3be0d1cd6ca3e1de30bd07bf93/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fe2978fba2ed2c3be0d1cd6ca3e1de30bd07bf93", "patch": "@@ -1,3 +1,8 @@\n+2009-05-22  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* decl2.c (decl_needed_p): Consider dllexport'd functions needed.\n+\t* semantics.c (expand_or_defer_fn): Similarly.\n+\n 2009-05-20  Ian Lance Taylor  <iant@google.com>\n \n \t* parser.c (cp_parser_postfix_expression): Change args to a vec."}, {"sha": "1b8aa495d46f944cb067b76df31bd49163448336", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe2978fba2ed2c3be0d1cd6ca3e1de30bd07bf93/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe2978fba2ed2c3be0d1cd6ca3e1de30bd07bf93/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=fe2978fba2ed2c3be0d1cd6ca3e1de30bd07bf93", "patch": "@@ -1707,6 +1707,10 @@ decl_needed_p (tree decl)\n       || (DECL_ASSEMBLER_NAME_SET_P (decl)\n \t  && TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (decl))))\n       return true;\n+  /* Functions marked \"dllexport\" must be emitted so that they are\n+     visible to other DLLs.  */\n+  if (lookup_attribute (\"dllexport\", DECL_ATTRIBUTES (decl)))\n+    return true;\n   /* Otherwise, DECL does not need to be emitted -- yet.  A subsequent\n      reference to DECL might cause it to be emitted later.  */\n   return false;"}, {"sha": "b37b322746a7bcaba2fd3ac3545150afca054e55", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe2978fba2ed2c3be0d1cd6ca3e1de30bd07bf93/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe2978fba2ed2c3be0d1cd6ca3e1de30bd07bf93/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=fe2978fba2ed2c3be0d1cd6ca3e1de30bd07bf93", "patch": "@@ -3268,8 +3268,10 @@ expand_or_defer_fn (tree fn)\n \n       /* If the user wants us to keep all inline functions, then mark\n \t this function as needed so that finish_file will make sure to\n-\t output it later.  */\n-      if (flag_keep_inline_functions && DECL_DECLARED_INLINE_P (fn))\n+\t output it later.  Similarly, all dllexport'd functions must\n+\t be emitted; there may be callers in other DLLs.  */\n+      if ((flag_keep_inline_functions && DECL_DECLARED_INLINE_P (fn))\n+\t  || lookup_attribute (\"dllexport\", DECL_ATTRIBUTES (fn)))\n \tmark_needed (fn);\n     }\n "}, {"sha": "7d38e47fd6871314c73e61b9978103d207c44cd9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe2978fba2ed2c3be0d1cd6ca3e1de30bd07bf93/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe2978fba2ed2c3be0d1cd6ca3e1de30bd07bf93/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fe2978fba2ed2c3be0d1cd6ca3e1de30bd07bf93", "patch": "@@ -1,3 +1,12 @@\n+2009-05-22  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* gcc.dg/dll-6.c: New test.\n+\t* gcc.dg/dll-6a.c: Likewise.\n+\t* gcc.dg/dll-7.c: Likewise.\n+\t* gcc.dg/dll-7a.c: Likewise.\n+\t* g++.dg/ext/dllexport2.C: Likewise.\n+\t* g++.dg/ext/dllexport2a.cc: Likewise.\n+\n 2009-05-21  Steve Ellcey  <sje@cup.hp.com>\n \n \tPR target/37846"}, {"sha": "71ccf670b4b4b72ff5887cf5704357317dc0bf30", "filename": "gcc/testsuite/g++.dg/ext/dllexport2.C", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe2978fba2ed2c3be0d1cd6ca3e1de30bd07bf93/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdllexport2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe2978fba2ed2c3be0d1cd6ca3e1de30bd07bf93/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdllexport2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdllexport2.C?ref=fe2978fba2ed2c3be0d1cd6ca3e1de30bd07bf93", "patch": "@@ -0,0 +1,52 @@\n+// { dg-do link }\n+// { dg-require-dll \"\" }\n+// { dg-additional-sources \"dllexport2a.cc\" }\n+// { dg-options \"-O2\" }\n+\n+/* Test that inline functions declared \"dllexport\" appear in object\n+   files, even if they are not called.\n+\n+   This behavior is required by the ARM C++ ABI:\n+\n+     Exporting a function that can be inlined should force the\n+     creation and export of an out-of-line copy of it.\n+\n+   and should presumably also apply.\n+\n+   Visual Studio 2005 also honors that rule.  */\n+\n+__declspec(dllexport) inline void i1() {}\n+\n+__declspec(dllexport) extern inline void e1() {}\n+\n+/* It is invalid to declare the function inline after its definition.  */\n+#if 0\n+__declspec(dllexport) void i2() {}\n+inline void i2();\n+\n+__declspec(dllexport) extern void e2() {}\n+inline void e2();\n+#endif\n+\n+__declspec(dllexport) inline void i3() {}\n+void i3();\n+\n+__declspec(dllexport) inline void e3() {}\n+extern void e3();\n+\n+__declspec(dllexport) void i4();\n+inline void i4() {};\n+\n+__declspec(dllexport) extern void e4();\n+inline void e4() {};\n+\n+__declspec(dllexport) inline void i5();\n+void i5() {};\n+\n+__declspec(dllexport) inline void e5();\n+extern void e5() {};\n+\n+/* Make sure that just declaring the function -- without defining it\n+   -- does not cause errors.  */\n+__declspec(dllexport) inline void i6();\n+__declspec(dllexport) extern inline void e6();"}, {"sha": "80caf32174299fa71c5d8d9ecf2de7f7b4ca9b8b", "filename": "gcc/testsuite/g++.dg/ext/dllexport2a.cc", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe2978fba2ed2c3be0d1cd6ca3e1de30bd07bf93/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdllexport2a.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe2978fba2ed2c3be0d1cd6ca3e1de30bd07bf93/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdllexport2a.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdllexport2a.cc?ref=fe2978fba2ed2c3be0d1cd6ca3e1de30bd07bf93", "patch": "@@ -0,0 +1,21 @@\n+extern void i1();\n+extern void i3();\n+extern void i4();\n+extern void i5();\n+\n+extern void e1();\n+extern void e3();\n+extern void e4();\n+extern void e5();\n+\n+int main () {\n+  i1();\n+  i3();\n+  i4();\n+  i5();\n+\n+  e1();\n+  e3();\n+  e4();\n+  e5();\n+}"}, {"sha": "7907f40d1bdc37c1c1cacf444663ce576d618540", "filename": "gcc/testsuite/gcc.dg/dll-6.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe2978fba2ed2c3be0d1cd6ca3e1de30bd07bf93/gcc%2Ftestsuite%2Fgcc.dg%2Fdll-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe2978fba2ed2c3be0d1cd6ca3e1de30bd07bf93/gcc%2Ftestsuite%2Fgcc.dg%2Fdll-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdll-6.c?ref=fe2978fba2ed2c3be0d1cd6ca3e1de30bd07bf93", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do link } */\n+/* { dg-require-dll \"\" } */\n+/* { dg-additional-sources \"dll-6a.c\" } */\n+/* { dg-options \"-w -O2 -std=gnu89\" } */\n+\n+/* Test that inline functions declared \"dllexport\" appear in object\n+   files, even if they are not called.\n+\n+   This behavior is required by the ARM C++ ABI:\n+\n+     Exporting a function that can be inlined should force the\n+     creation and export of an out-of-line copy of it.\n+\n+   and should presumably also apply.\n+\n+   Visual Studio 2005 also honors that rule.  */\n+\n+__declspec(dllexport) inline void i1() {}\n+\n+__declspec(dllexport) extern inline void e1() {}\n+\n+/* It is invalid to declare the function inline after its definition.  */\n+#if 0\n+__declspec(dllexport) void i2() {}\n+inline void i2();\n+\n+__declspec(dllexport) extern void e2() {}\n+inline void e2();\n+#endif\n+\n+__declspec(dllexport) inline void i3() {}\n+void i3();\n+\n+__declspec(dllexport) inline void e3() {}\n+extern void e3();\n+\n+__declspec(dllexport) void i4();\n+inline void i4() {};\n+\n+__declspec(dllexport) extern void e4();\n+inline void e4() {};\n+\n+__declspec(dllexport) inline void i5();\n+void i5() {};\n+\n+__declspec(dllexport) inline void e5();\n+extern void e5() {};\n+\n+/* Make sure that just declaring the function -- without defining it\n+   -- does not cause errors.  */\n+__declspec(dllexport) inline void i6();\n+__declspec(dllexport) extern inline void e6();"}, {"sha": "80caf32174299fa71c5d8d9ecf2de7f7b4ca9b8b", "filename": "gcc/testsuite/gcc.dg/dll-6a.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe2978fba2ed2c3be0d1cd6ca3e1de30bd07bf93/gcc%2Ftestsuite%2Fgcc.dg%2Fdll-6a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe2978fba2ed2c3be0d1cd6ca3e1de30bd07bf93/gcc%2Ftestsuite%2Fgcc.dg%2Fdll-6a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdll-6a.c?ref=fe2978fba2ed2c3be0d1cd6ca3e1de30bd07bf93", "patch": "@@ -0,0 +1,21 @@\n+extern void i1();\n+extern void i3();\n+extern void i4();\n+extern void i5();\n+\n+extern void e1();\n+extern void e3();\n+extern void e4();\n+extern void e5();\n+\n+int main () {\n+  i1();\n+  i3();\n+  i4();\n+  i5();\n+\n+  e1();\n+  e3();\n+  e4();\n+  e5();\n+}"}, {"sha": "c3a5957ae6b4bdc213726e0f727d136676e5b524", "filename": "gcc/testsuite/gcc.dg/dll-7.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe2978fba2ed2c3be0d1cd6ca3e1de30bd07bf93/gcc%2Ftestsuite%2Fgcc.dg%2Fdll-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe2978fba2ed2c3be0d1cd6ca3e1de30bd07bf93/gcc%2Ftestsuite%2Fgcc.dg%2Fdll-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdll-7.c?ref=fe2978fba2ed2c3be0d1cd6ca3e1de30bd07bf93", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do link } */\n+/* { dg-require-dll \"\" } */\n+/* { dg-additional-sources \"dll-7a.c\" } */\n+/* { dg-options \"-w -O2 -std=gnu99\" } */\n+\n+/* Test that inline functions declared \"dllexport\" appear in object\n+   files, even if they are not called.\n+\n+   This behavior is required by the ARM C++ ABI:\n+\n+     Exporting a function that can be inlined should force the\n+     creation and export of an out-of-line copy of it.\n+\n+   and should presumably also apply.\n+\n+   Visual Studio 2005 also honors that rule.  */\n+\n+__declspec(dllexport) inline void i1() {}\n+\n+__declspec(dllexport) extern inline void e1() {}\n+\n+/* It is invalid to declare the function inline after its definition.  */\n+#if 0\n+__declspec(dllexport) void i2() {}\n+inline void i2();\n+\n+__declspec(dllexport) extern void e2() {}\n+inline void e2();\n+#endif\n+\n+__declspec(dllexport) inline void i3() {}\n+void i3();\n+\n+__declspec(dllexport) inline void e3() {}\n+extern void e3();\n+\n+__declspec(dllexport) void i4();\n+inline void i4() {};\n+\n+__declspec(dllexport) extern void e4();\n+inline void e4() {};\n+\n+__declspec(dllexport) inline void i5();\n+void i5() {};\n+\n+__declspec(dllexport) inline void e5();\n+extern void e5() {};\n+\n+/* Make sure that just declaring the function -- without defining it\n+   -- does not cause errors.  */\n+__declspec(dllexport) inline void i6();\n+__declspec(dllexport) extern inline void e6();"}, {"sha": "80caf32174299fa71c5d8d9ecf2de7f7b4ca9b8b", "filename": "gcc/testsuite/gcc.dg/dll-7a.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe2978fba2ed2c3be0d1cd6ca3e1de30bd07bf93/gcc%2Ftestsuite%2Fgcc.dg%2Fdll-7a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe2978fba2ed2c3be0d1cd6ca3e1de30bd07bf93/gcc%2Ftestsuite%2Fgcc.dg%2Fdll-7a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdll-7a.c?ref=fe2978fba2ed2c3be0d1cd6ca3e1de30bd07bf93", "patch": "@@ -0,0 +1,21 @@\n+extern void i1();\n+extern void i3();\n+extern void i4();\n+extern void i5();\n+\n+extern void e1();\n+extern void e3();\n+extern void e4();\n+extern void e5();\n+\n+int main () {\n+  i1();\n+  i3();\n+  i4();\n+  i5();\n+\n+  e1();\n+  e3();\n+  e4();\n+  e5();\n+}"}, {"sha": "ce339a58292bb11e882f35195b392dd49fc9efd9", "filename": "gcc/tree.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe2978fba2ed2c3be0d1cd6ca3e1de30bd07bf93/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe2978fba2ed2c3be0d1cd6ca3e1de30bd07bf93/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=fe2978fba2ed2c3be0d1cd6ca3e1de30bd07bf93", "patch": "@@ -4075,6 +4075,7 @@ handle_dll_attribute (tree * pnode, tree name, tree args, int flags,\n \t\t      bool *no_add_attrs)\n {\n   tree node = *pnode;\n+  bool is_dllimport;\n \n   /* These attributes may apply to structure and union types being created,\n      but otherwise should pass to the declaration involved.  */\n@@ -4122,9 +4123,11 @@ handle_dll_attribute (tree * pnode, tree name, tree args, int flags,\n       return NULL_TREE;\n     }\n \n+  is_dllimport = is_attribute_p (\"dllimport\", name);\n+\n   /* Report error on dllimport ambiguities seen now before they cause\n      any damage.  */\n-  else if (is_attribute_p (\"dllimport\", name))\n+  if (is_dllimport)\n     {\n       /* Honor any target-specific overrides. */ \n       if (!targetm.valid_dllimport_attribute_p (node))\n@@ -4166,6 +4169,9 @@ handle_dll_attribute (tree * pnode, tree name, tree args, int flags,\n       if (*no_add_attrs == false)\n         DECL_DLLIMPORT_P (node) = 1;\n     }\n+  else if (DECL_DECLARED_INLINE_P (node))\n+    /* An exported function, even if inline, must be emitted.  */\n+    DECL_EXTERNAL (node) = 0;\n \n   /*  Report error if symbol is not accessible at global scope.  */\n   if (!TREE_PUBLIC (node)"}]}