{"sha": "7f36b65d25e6882ac20d6baf80dd8f2c773aa7d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2YzNmI2NWQyNWU2ODgyYWMyMGQ2YmFmODBkZDhmMmM3NzNhYTdkNw==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2014-04-30T18:39:15Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2014-04-30T18:39:15Z"}, "message": "trans-expr.c (get_tree_for_caf_expr): Fix handling of\n\n2014-04-30  Tobias Burnus  <burnus@net-b.de>\n\n        * trans-expr.c (get_tree_for_caf_expr): Fix handling of\n        * polymorphic\n        and derived-type coarrays.\n\n2014-04-30  Tobias Burnus  <burnus@net-b.de>\n\n        * gfortran.dg/coarray_poly_4.f90: New.\n        * gfortran.dg/coarray_poly_5.f90: New.\n\nFrom-SVN: r209948", "tree": {"sha": "3c19344a498203b07329a3a73ad2382125dfb4a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c19344a498203b07329a3a73ad2382125dfb4a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f36b65d25e6882ac20d6baf80dd8f2c773aa7d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f36b65d25e6882ac20d6baf80dd8f2c773aa7d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f36b65d25e6882ac20d6baf80dd8f2c773aa7d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f36b65d25e6882ac20d6baf80dd8f2c773aa7d7/comments", "author": null, "committer": null, "parents": [{"sha": "332fddaddc37453024e7968841a6064fff7bfeb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/332fddaddc37453024e7968841a6064fff7bfeb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/332fddaddc37453024e7968841a6064fff7bfeb0"}], "stats": {"total": 96, "additions": 80, "deletions": 16}, "files": [{"sha": "356bb485d1555ce79c18885f53802c506ce63ec6", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f36b65d25e6882ac20d6baf80dd8f2c773aa7d7/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f36b65d25e6882ac20d6baf80dd8f2c773aa7d7/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=7f36b65d25e6882ac20d6baf80dd8f2c773aa7d7", "patch": "@@ -1,4 +1,9 @@\n-2014-03-27  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+2014-04-30  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* trans-expr.c (get_tree_for_caf_expr): Fix handling of polymorphic\n+\tand derived-type coarrays.\n+\n+2014-04-27  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/59604\n \tPR fortran/58003"}, {"sha": "f0e5b7ddc2f03a6b3d7d5b29212fa3bdcd973811", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 32, "deletions": 15, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f36b65d25e6882ac20d6baf80dd8f2c773aa7d7/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f36b65d25e6882ac20d6baf80dd8f2c773aa7d7/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=7f36b65d25e6882ac20d6baf80dd8f2c773aa7d7", "patch": "@@ -1387,25 +1387,42 @@ gfc_get_expr_charlen (gfc_expr *e)\n static tree\n get_tree_for_caf_expr (gfc_expr *expr)\n {\n-   tree caf_decl = NULL_TREE;\n-   gfc_ref *ref;\n+  tree caf_decl;\n+  bool found;\n+  gfc_ref *ref;\n \n-   gcc_assert (expr && expr->expr_type == EXPR_VARIABLE);\n-   if (expr->symtree->n.sym->attr.codimension)\n-     caf_decl = expr->symtree->n.sym->backend_decl;\n+  gcc_assert (expr && expr->expr_type == EXPR_VARIABLE);\n \n-   for (ref = expr->ref; ref; ref = ref->next)\n-     if (ref->type == REF_COMPONENT)\n-       {\n+  caf_decl = expr->symtree->n.sym->backend_decl;\n+  gcc_assert (caf_decl);\n+  if (expr->symtree->n.sym->ts.type == BT_CLASS)\n+    caf_decl = gfc_class_data_get (caf_decl);\n+  if (expr->symtree->n.sym->attr.codimension)\n+    return caf_decl;\n+\n+  /* The following code assumes that the coarray is a component reachable via\n+     only scalar components/variables; the Fortran standard guarantees this.  */\n+\n+  for (ref = expr->ref; ref; ref = ref->next)\n+    if (ref->type == REF_COMPONENT)\n+      {\n \tgfc_component *comp = ref->u.c.component;\n-        if (comp->attr.pointer || comp->attr.allocatable)\n-\t  caf_decl = NULL_TREE;\n-\tif (comp->attr.codimension)\n-\t  caf_decl = comp->backend_decl;\n-       }\n \n-   gcc_assert (caf_decl != NULL_TREE);\n-   return caf_decl;\n+\tif (POINTER_TYPE_P (TREE_TYPE (caf_decl)))\n+\t  caf_decl = build_fold_indirect_ref_loc (input_location, caf_decl);\n+\tcaf_decl = fold_build3_loc (input_location, COMPONENT_REF,\n+\t\t\t\t    TREE_TYPE (comp->backend_decl), caf_decl,\n+\t\t\t\t    comp->backend_decl, NULL_TREE);\n+\tif (comp->ts.type == BT_CLASS)\n+\t  caf_decl = gfc_class_data_get (caf_decl);\n+\tif (comp->attr.codimension)\n+\t  {\n+\t    found = true;\n+\t    break;\n+\t  }\n+      }\n+  gcc_assert (found && caf_decl);\n+  return caf_decl;\n }\n \n "}, {"sha": "d1955b4eb05d71de964224f531591f42bcf0439f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f36b65d25e6882ac20d6baf80dd8f2c773aa7d7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f36b65d25e6882ac20d6baf80dd8f2c773aa7d7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7f36b65d25e6882ac20d6baf80dd8f2c773aa7d7", "patch": "@@ -1,3 +1,8 @@\n+2014-04-30  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* gfortran.dg/coarray_poly_4.f90: New.\n+\t* gfortran.dg/coarray_poly_5.f90: New.\n+\n 2014-04-30  Alan Lawrence  <alan.lawrence@arm.com>\n \n \t* gcc.target/arm/simd/vuzpqf32_1.c: New file."}, {"sha": "ceb1c8583018f389f8fc91e94d9839e784f53ef9", "filename": "gcc/testsuite/gfortran.dg/coarray_poly_4.f90", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f36b65d25e6882ac20d6baf80dd8f2c773aa7d7/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_poly_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f36b65d25e6882ac20d6baf80dd8f2c773aa7d7/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_poly_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_poly_4.f90?ref=7f36b65d25e6882ac20d6baf80dd8f2c773aa7d7", "patch": "@@ -0,0 +1,23 @@\n+! { dg-do compile }\n+! { dg-options \"-fcoarray=lib -fdump-tree-original\" }\n+\n+subroutine test(i)\n+type t\n+  real, allocatable :: x[:]\n+end type t\n+\n+interface\n+  subroutine sub(y)\n+    import\n+    real :: y[*]\n+  end subroutine sub\n+end interface\n+\n+integer :: i\n+type(t), save :: var\n+allocate(var%x[*])\n+call sub(var%x)\n+end subroutine test\n+\n+! { dg-final { scan-tree-dump-times \"sub \\\\(\\\\(real\\\\(kind=4\\\\) \\\\*\\\\) var.x.data, var.x.token, 0\\\\);\" 1 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}, {"sha": "29c9c8c314078a8b2b2d4256c5daeb411c4c2852", "filename": "gcc/testsuite/gfortran.dg/coarray_poly_5.f90", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f36b65d25e6882ac20d6baf80dd8f2c773aa7d7/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_poly_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f36b65d25e6882ac20d6baf80dd8f2c773aa7d7/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_poly_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_poly_5.f90?ref=7f36b65d25e6882ac20d6baf80dd8f2c773aa7d7", "patch": "@@ -0,0 +1,14 @@\n+! { dg-do compile }\n+! { dg-options \"-fcoarray=lib -fdump-tree-original\" }\n+\n+subroutine test(x)\n+type t\n+  real, allocatable :: x[:]\n+end type t\n+\n+class(t) :: x\n+allocate(x%x[*])\n+end subroutine test\n+\n+! { dg-final { scan-tree-dump-times \"x->_data->x.data = _gfortran_caf_register \\\\(4, 1, &x->_data->x.token, 0B, 0B, 0\\\\);\" 1 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}]}