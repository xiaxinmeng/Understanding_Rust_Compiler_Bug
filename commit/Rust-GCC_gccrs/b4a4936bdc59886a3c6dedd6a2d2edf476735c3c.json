{"sha": "b4a4936bdc59886a3c6dedd6a2d2edf476735c3c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjRhNDkzNmJkYzU5ODg2YTNjNmRlZGQ2YTJkMmVkZjQ3NjczNWMzYw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-07T09:16:06Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-07T09:16:06Z"}, "message": "[multiple changes]\n\n2010-10-07  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_res.adb: Minor reformatting.\n\n2010-10-07  Arnaud Charlet  <charlet@adacore.com>\n\n\t* debug.adb: Update -gnatd.J documentation.\n\n2010-10-07  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_rm.texi: Document handling of invalid values\n\t* s-utf_32.ads, s-utf_32.adb (UTF_To_Lower_Case): Fix implementation\n\tto match new spec.\n\t(UTF_To_Upper_Case): New function.\n\nFrom-SVN: r165083", "tree": {"sha": "eae14c8d05e6510897b4f9cfa852523ea2d72c7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eae14c8d05e6510897b4f9cfa852523ea2d72c7d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4a4936bdc59886a3c6dedd6a2d2edf476735c3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4a4936bdc59886a3c6dedd6a2d2edf476735c3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4a4936bdc59886a3c6dedd6a2d2edf476735c3c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4a4936bdc59886a3c6dedd6a2d2edf476735c3c/comments", "author": null, "committer": null, "parents": [{"sha": "599a741170b384ab63f23b9761f5456932001f64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/599a741170b384ab63f23b9761f5456932001f64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/599a741170b384ab63f23b9761f5456932001f64"}], "stats": {"total": 1316, "additions": 1204, "deletions": 112}, "files": [{"sha": "1bbae2632edf45e75c00e09b49937d37754940b3", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4a4936bdc59886a3c6dedd6a2d2edf476735c3c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4a4936bdc59886a3c6dedd6a2d2edf476735c3c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b4a4936bdc59886a3c6dedd6a2d2edf476735c3c", "patch": "@@ -1,3 +1,18 @@\n+2010-10-07  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_res.adb: Minor reformatting.\n+\n+2010-10-07  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* debug.adb: Update -gnatd.J documentation.\n+\n+2010-10-07  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_rm.texi: Document handling of invalid values\n+\t* s-utf_32.ads, s-utf_32.adb (UTF_To_Lower_Case): Fix implementation\n+\tto match new spec.\n+\t(UTF_To_Upper_Case): New function.\n+\n 2010-10-07  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_attr.adb: Minor reformatting."}, {"sha": "116d801b9afb565bfe115cd3ae041b71cf127745", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4a4936bdc59886a3c6dedd6a2d2edf476735c3c/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4a4936bdc59886a3c6dedd6a2d2edf476735c3c/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=b4a4936bdc59886a3c6dedd6a2d2edf476735c3c", "patch": "@@ -127,7 +127,7 @@ package body Debug is\n    --  d.G\n    --  d.H\n    --  d.I  SCIL generation mode\n-   --  d.J  Parallel SCIL generation mode\n+   --  d.J  Disable parallel SCIL generation mode\n    --  d.K\n    --  d.L  Depend on back end for limited types in conditional expressions\n    --  d.M\n@@ -563,9 +563,9 @@ package body Debug is\n    --       of static analysis tools, and ensure additional tree consistency\n    --       between different compilations of specs.\n \n-   --  d.J  Ensure the SCIL generated is compatible with parallel builds.\n-   --       This means in particular not writing the same files under the\n-   --       same directory.\n+   --  d.J  Disable parallel SCIL generation. Normally SCIL file generation is\n+   --       done in parallel to speed processing. This switch disables this\n+   --       behavior.\n \n    --  d.L  Normally the front end generates special expansion for conditional\n    --       expressions of a limited type. This debug flag removes this special"}, {"sha": "86e92207dbef95ff94201e7579ad7632510cc3d6", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 34, "deletions": 4, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4a4936bdc59886a3c6dedd6a2d2edf476735c3c/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4a4936bdc59886a3c6dedd6a2d2edf476735c3c/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=b4a4936bdc59886a3c6dedd6a2d2edf476735c3c", "patch": "@@ -7912,10 +7912,11 @@ Followed.\n @chapter Implementation Defined Characteristics\n \n @noindent\n-In addition to the implementation dependent pragmas and attributes, and\n-the implementation advice, there are a number of other Ada features\n-that are potentially implementation dependent.  These are mentioned\n-throughout the Ada Reference Manual, and are summarized in Annex M@.\n+In addition to the implementation dependent pragmas and attributes, and the\n+implementation advice, there are a number of other Ada features that are\n+potentially implementation dependent and are designated as\n+implementation-defined. These are mentioned throughout the Ada Reference\n+Manual, and are summarized in Annex M@.\n \n A requirement for conforming Ada compilers is that they provide\n documentation describing how the implementation deals with each of these\n@@ -8528,6 +8529,35 @@ unconstrained array are not permitted. If the target alignment is\n greater than the source alignment, then a copy of the result is\n made with appropriate alignment\n \n+@sp 1\n+@cartouche\n+@noindent\n+@strong{53}. The semantics of operations on invalid representations.\n+See 13.9.2(10-11).\n+@end cartouche\n+@noindent\n+For assignments and other operations where the use of invalid values cannot\n+result in erroneous behavior, the compiler ignores the possibility of invalid\n+values. An exception is raised at the point where an invalid value would\n+result in erroneous behavior. For example executing:\n+\n+@smallexample @c ada\n+procedure invalidvals is\n+   X : Integer := -1;\n+   Y : Natural range 1 .. 10;\n+   for Y'Address use X'Address;\n+   Z : Natural range 1 .. 10;\n+   A : array (Natural range 1 .. 10) of Integer;\n+begin\n+   Z := Y;     -- no exception\n+   A (Z) := 3; -- exception raised;\n+end;\n+@end smallexample\n+\n+@noindent\n+As indicated, an exception is raised on the array assignment, but not\n+on the simple assignment of the invalid negative value from Y to Z.\n+\n @sp 1\n @cartouche\n @noindent"}, {"sha": "a5af4fbc60e0eaa8bb3c6c2635a533dd8494aab0", "filename": "gcc/ada/s-utf_32.adb", "status": "modified", "additions": 1119, "deletions": 84, "changes": 1203, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4a4936bdc59886a3c6dedd6a2d2edf476735c3c/gcc%2Fada%2Fs-utf_32.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4a4936bdc59886a3c6dedd6a2d2edf476735c3c/gcc%2Fada%2Fs-utf_32.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-utf_32.adb?ref=b4a4936bdc59886a3c6dedd6a2d2edf476735c3c"}, {"sha": "c4c04e0aec7d77305ba3b6dd77c4e65abf97fdc0", "filename": "gcc/ada/s-utf_32.ads", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4a4936bdc59886a3c6dedd6a2d2edf476735c3c/gcc%2Fada%2Fs-utf_32.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4a4936bdc59886a3c6dedd6a2d2edf476735c3c/gcc%2Fada%2Fs-utf_32.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-utf_32.ads?ref=b4a4936bdc59886a3c6dedd6a2d2edf476735c3c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2005-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2005-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -185,13 +185,27 @@ package System.UTF_32 is\n    --  The following function is used to fold to upper case, as required by\n    --  the Ada 2005 standard rules for identifier case folding. Two\n    --  identifiers are equivalent if they are identical after folding all\n-   --  letters to upper case using this routine.\n+   --  letters to upper case using this routine. A corresponding routine to\n+   --  fold to lower case is also provided.\n+\n+   function UTF_32_To_Lower_Case (U : UTF_32) return UTF_32;\n+   pragma Inline (UTF_32_To_Lower_Case);\n+   --  If U represents an upper case letter, returns the corresponding lower\n+   --  case letter, otherwise U is returned unchanged. The folding rule is\n+   --  simply that if the code corresponds to a 10646 entry whose name contains\n+   --  the string CAPITAL LETTER, and there is a corresponding entry whose name\n+   --  is the same but with CAPITAL LETTER replaced by SMALL LETTER, then the\n+   --  code is folded to this SMALL LETTER code. Otherwise the input code is\n+   --  returned unchanged.\n \n    function UTF_32_To_Upper_Case (U : UTF_32) return UTF_32;\n    pragma Inline (UTF_32_To_Upper_Case);\n-   --  If U represents a lower case letter, returns the corresponding upper\n-   --  case letter, otherwise U is returned unchanged. The folding is locale\n-   --  independent as defined by documents referenced in the note in section\n-   --  1 of ISO/IEC 10646:2003\n+   --  If U represents a lower case letter, returns the corresponding lower\n+   --  case letter, otherwise U is returned unchanged. The folding rule is\n+   --  simply that if the code corresponds to a 10646 entry whose name contains\n+   --  the string SMALL LETTER, and there is a corresponding entry whose name\n+   --  is the same but with SMALL LETTER replaced by CAPITAL LETTER, then the\n+   --  code is folded to this CAPITAL LETTER code. Otherwise the input code is\n+   --  returned unchanged.\n \n end System.UTF_32;"}, {"sha": "34bddda4346389fa7edfe3ef42aa6da0a6f43e80", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4a4936bdc59886a3c6dedd6a2d2edf476735c3c/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4a4936bdc59886a3c6dedd6a2d2edf476735c3c/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=b4a4936bdc59886a3c6dedd6a2d2edf476735c3c", "patch": "@@ -1012,7 +1012,7 @@ package body Sem_Res is\n \n       begin\n          --  If the context is an attribute reference that can apply to\n-         --  functions, this is never a parameterless call (RM 4.1.4 (6)).\n+         --  functions, this is never a parameterless call (RM 4.1.4(6)).\n \n          if Nkind (Parent (N)) = N_Attribute_Reference\n             and then (Attribute_Name (Parent (N)) = Name_Address\n@@ -1150,7 +1150,7 @@ package body Sem_Res is\n    begin\n       return Ekind (Btyp) = E_Access_Type\n         or else (Ekind (Btyp) = E_Access_Subprogram_Type\n-                  and then Comes_From_Source (Btyp));\n+                   and then Comes_From_Source (Btyp));\n    end Is_Definite_Access_Type;\n \n    ----------------------\n@@ -1199,13 +1199,13 @@ package body Sem_Res is\n       type Kind_Test is access function (E : Entity_Id) return Boolean;\n \n       function Operand_Type_In_Scope (S : Entity_Id) return Boolean;\n-      --  If the operand is not universal, and the operator is given by a\n-      --  expanded name, verify that the operand has an interpretation with\n-      --  a type defined in the given scope of the operator.\n+      --  If the operand is not universal, and the operator is given by an\n+      --  expanded name, verify that the operand has an interpretation with a\n+      --  type defined in the given scope of the operator.\n \n       function Type_In_P (Test : Kind_Test) return Entity_Id;\n-      --  Find a type of the given class in the package Pack that contains\n-      --  the operator.\n+      --  Find a type of the given class in package Pack that contains the\n+      --  operator.\n \n       ---------------------------\n       -- Operand_Type_In_Scope --\n@@ -1280,12 +1280,10 @@ package body Sem_Res is\n       --  Start of processing for Type_In_P\n \n       begin\n-         --  If the context type is declared in the prefix package, this\n-         --  is the desired base type.\n+         --  If the context type is declared in the prefix package, this is the\n+         --  desired base type.\n \n-         if Scope (Base_Type (Typ)) = Pack\n-           and then Test (Typ)\n-         then\n+         if Scope (Base_Type (Typ)) = Pack and then Test (Typ) then\n             return Base_Type (Typ);\n \n          else\n@@ -1343,7 +1341,7 @@ package body Sem_Res is\n \n       --  A final wrinkle is the multiplication operator for fixed point types,\n       --  which is defined in Standard only, and not in the scope of the\n-      --  fixed_point type itself.\n+      --  fixed point type itself.\n \n       if Nkind (Name (N)) = N_Expanded_Name then\n          Pack := Entity (Prefix (Name (N)));\n@@ -1371,7 +1369,7 @@ package body Sem_Res is\n                Error := True;\n             end if;\n \n-         --  Ada 2005, AI-420: Predefined equality on Universal_Access is\n+         --  Ada 2005 AI-420: Predefined equality on Universal_Access is\n          --  available.\n \n          elsif Ada_Version >= Ada_05"}]}