{"sha": "c4fae39e150019439df90c4c6dd0d62dfa914f70", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzRmYWUzOWUxNTAwMTk0MzlkZjkwYzRjNmRkMGQ2MmRmYTkxNGY3MA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2009-11-28T12:13:21Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2009-11-28T12:13:21Z"}, "message": "trans-common.c (create_common): Remove unused offset variable.\n\n\t* trans-common.c (create_common): Remove unused offset variable.\n\t* io.c (gfc_match_wait): Remove unused loc variable.\n\t* trans-openmp.c (gfc_trans_omp_clauses): Remove unused old_clauses\n\tvariable.\n\t(gfc_trans_omp_do): Remove unused outermost variable.\n\t* iresolve.c (gfc_resolve_alarm_sub, gfc_resolve_fseek_sub): Remove\n\tunused status variable.\n\t* module.c (number_use_names): Remove unused c variable.\n\t(load_derived_extensions): Remove unused nuse variable.\n\t* trans-expr.c (gfc_conv_substring): Remove unused var variable.\n\t* trans-types.c (gfc_get_array_descr_info): Remove unused offset_off\n\tvariable.\n\t* matchexp.c (match_primary): Remove unused where variable.\n\t* trans-intrinsic.c (gfc_conv_intrinsic_bound): Remove unused cond2\n\tvariable.\n\t(gfc_conv_intrinsic_sizeof): Remove unused source variable.\n\t(gfc_conv_intrinsic_transfer): Remove unused stride variable.\n\t(gfc_conv_intrinsic_function): Remove unused isym variable.\n\t* arith.c (gfc_hollerith2real, gfc_hollerith2complex,\n\tgfc_hollerith2logical): Remove unused len variable.\n\t* parse.c (parse_derived): Remove unused derived_sym variable.\n\t* decl.c (variable_decl): Remove unused old_locus variable.\n\t* resolve.c (check_class_members): Remove unused tbp_sym variable.\n\t(resolve_ordinary_assign): Remove unused assign_proc variable.\n\t(resolve_equivalence): Remove unused value_name variable.\n\t* data.c (get_array_index): Remove unused re variable.\n\t* trans-array.c (gfc_conv_array_transpose): Remove unused src_info\n\tvariable.\n\t(gfc_conv_resolve_dependencies): Remove unused aref and temp_dim\n\tvariables.\n\t(gfc_conv_loop_setup): Remove unused dim and len variables.\n\t(gfc_walk_variable_expr): Remove unused head variable.\n\t* match.c (match_typebound_call): Remove unused var variable.\n\t* intrinsic.c (gfc_convert_chartype): Remove unused from_ts variable.\n\nFrom-SVN: r154722", "tree": {"sha": "25a88a559a99d69f9ff5c674d6b9920c741300a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25a88a559a99d69f9ff5c674d6b9920c741300a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4fae39e150019439df90c4c6dd0d62dfa914f70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4fae39e150019439df90c4c6dd0d62dfa914f70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4fae39e150019439df90c4c6dd0d62dfa914f70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4fae39e150019439df90c4c6dd0d62dfa914f70/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "76dcaf33d5bd891cfdf8cd376d06dac81e950f48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76dcaf33d5bd891cfdf8cd376d06dac81e950f48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76dcaf33d5bd891cfdf8cd376d06dac81e950f48"}], "stats": {"total": 138, "additions": 52, "deletions": 86}, "files": [{"sha": "8b6c4ce6a9cf09be04ab315971c8d9bb5436d20c", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4fae39e150019439df90c4c6dd0d62dfa914f70/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4fae39e150019439df90c4c6dd0d62dfa914f70/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c4fae39e150019439df90c4c6dd0d62dfa914f70", "patch": "@@ -1,3 +1,40 @@\n+2009-11-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* trans-common.c (create_common): Remove unused offset variable.\n+\t* io.c (gfc_match_wait): Remove unused loc variable.\n+\t* trans-openmp.c (gfc_trans_omp_clauses): Remove unused old_clauses\n+\tvariable.\n+\t(gfc_trans_omp_do): Remove unused outermost variable.\n+\t* iresolve.c (gfc_resolve_alarm_sub, gfc_resolve_fseek_sub): Remove\n+\tunused status variable.\n+\t* module.c (number_use_names): Remove unused c variable.\n+\t(load_derived_extensions): Remove unused nuse variable.\n+\t* trans-expr.c (gfc_conv_substring): Remove unused var variable.\n+\t* trans-types.c (gfc_get_array_descr_info): Remove unused offset_off\n+\tvariable.\n+\t* matchexp.c (match_primary): Remove unused where variable.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_bound): Remove unused cond2\n+\tvariable.\n+\t(gfc_conv_intrinsic_sizeof): Remove unused source variable.\n+\t(gfc_conv_intrinsic_transfer): Remove unused stride variable.\n+\t(gfc_conv_intrinsic_function): Remove unused isym variable.\n+\t* arith.c (gfc_hollerith2real, gfc_hollerith2complex,\n+\tgfc_hollerith2logical): Remove unused len variable.\n+\t* parse.c (parse_derived): Remove unused derived_sym variable.\n+\t* decl.c (variable_decl): Remove unused old_locus variable.\n+\t* resolve.c (check_class_members): Remove unused tbp_sym variable.\n+\t(resolve_ordinary_assign): Remove unused assign_proc variable.\n+\t(resolve_equivalence): Remove unused value_name variable.\n+\t* data.c (get_array_index): Remove unused re variable.\n+\t* trans-array.c (gfc_conv_array_transpose): Remove unused src_info\n+\tvariable.\n+\t(gfc_conv_resolve_dependencies): Remove unused aref and temp_dim\n+\tvariables.\n+\t(gfc_conv_loop_setup): Remove unused dim and len variables.\n+\t(gfc_walk_variable_expr): Remove unused head variable.\n+\t* match.c (match_typebound_call): Remove unused var variable.\n+\t* intrinsic.c (gfc_convert_chartype): Remove unused from_ts variable.\n+\n 2009-11-26  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/41807"}, {"sha": "bd0ca6122cf5fd61f6a7430629db5aa7cc80e9fc", "filename": "gcc/fortran/arith.c", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4fae39e150019439df90c4c6dd0d62dfa914f70/gcc%2Ffortran%2Farith.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4fae39e150019439df90c4c6dd0d62dfa914f70/gcc%2Ffortran%2Farith.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farith.c?ref=c4fae39e150019439df90c4c6dd0d62dfa914f70", "patch": "@@ -1,5 +1,5 @@\n /* Compiler arithmetic\n-   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n+   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n    Free Software Foundation, Inc.\n    Contributed by Andy Vaught\n \n@@ -2668,9 +2668,6 @@ gfc_expr *\n gfc_hollerith2real (gfc_expr *src, int kind)\n {\n   gfc_expr *result;\n-  int len;\n-\n-  len = src->value.character.length;\n \n   result = gfc_get_expr ();\n   result->expr_type = EXPR_CONSTANT;\n@@ -2692,9 +2689,6 @@ gfc_expr *\n gfc_hollerith2complex (gfc_expr *src, int kind)\n {\n   gfc_expr *result;\n-  int len;\n-\n-  len = src->value.character.length;\n \n   result = gfc_get_expr ();\n   result->expr_type = EXPR_CONSTANT;\n@@ -2741,9 +2735,6 @@ gfc_expr *\n gfc_hollerith2logical (gfc_expr *src, int kind)\n {\n   gfc_expr *result;\n-  int len;\n-\n-  len = src->value.character.length;\n \n   result = gfc_get_expr ();\n   result->expr_type = EXPR_CONSTANT;"}, {"sha": "0d04d65aa2970072b229df1158eb824d16d18de6", "filename": "gcc/fortran/data.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4fae39e150019439df90c4c6dd0d62dfa914f70/gcc%2Ffortran%2Fdata.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4fae39e150019439df90c4c6dd0d62dfa914f70/gcc%2Ffortran%2Fdata.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdata.c?ref=c4fae39e150019439df90c4c6dd0d62dfa914f70", "patch": "@@ -1,5 +1,5 @@\n /* Supporting functions for resolving DATA statement.\n-   Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008\n+   Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n    Free Software Foundation, Inc.\n    Contributed by Lifang Zeng <zlf605@hotmail.com>\n \n@@ -46,7 +46,6 @@ get_array_index (gfc_array_ref *ar, mpz_t *offset)\n {\n   gfc_expr *e;\n   int i;\n-  gfc_try re;\n   mpz_t delta;\n   mpz_t tmp;\n \n@@ -56,7 +55,7 @@ get_array_index (gfc_array_ref *ar, mpz_t *offset)\n   for (i = 0; i < ar->dimen; i++)\n     {\n       e = gfc_copy_expr (ar->start[i]);\n-      re = gfc_simplify_expr (e, 1);\n+      gfc_simplify_expr (e, 1);\n \n       if ((gfc_is_constant_expr (ar->as->lower[i]) == 0)\n \t  || (gfc_is_constant_expr (ar->as->upper[i]) == 0)"}, {"sha": "23ac5c39424a9bd085d52d273fba3676c4f1a297", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4fae39e150019439df90c4c6dd0d62dfa914f70/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4fae39e150019439df90c4c6dd0d62dfa914f70/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=c4fae39e150019439df90c4c6dd0d62dfa914f70", "patch": "@@ -1656,12 +1656,10 @@ variable_decl (int elem)\n   match m;\n   gfc_try t;\n   gfc_symbol *sym;\n-  locus old_locus;\n \n   initializer = NULL;\n   as = NULL;\n   cp_as = NULL;\n-  old_locus = gfc_current_locus;\n \n   /* When we get here, we've just matched a list of attributes and\n      maybe a type and a double colon.  The next thing we expect to see"}, {"sha": "a62dd92375bbd42e6b68e411136ab21f340b3599", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4fae39e150019439df90c4c6dd0d62dfa914f70/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4fae39e150019439df90c4c6dd0d62dfa914f70/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=c4fae39e150019439df90c4c6dd0d62dfa914f70", "patch": "@@ -4054,14 +4054,12 @@ gfc_try\n gfc_convert_chartype (gfc_expr *expr, gfc_typespec *ts)\n {\n   gfc_intrinsic_sym *sym;\n-  gfc_typespec from_ts;\n   locus old_where;\n   gfc_expr *new_expr;\n   int rank;\n   mpz_t *shape;\n \n   gcc_assert (expr->ts.type == BT_CHARACTER && ts->type == BT_CHARACTER);\n-  from_ts = expr->ts;\t\t/* expr->ts gets clobbered */\n \n   sym = find_char_conv (&expr->ts, ts);\n   gcc_assert (sym);"}, {"sha": "9b0ee8d17ca84ac54e159753bd07bafb2df71c20", "filename": "gcc/fortran/io.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4fae39e150019439df90c4c6dd0d62dfa914f70/gcc%2Ffortran%2Fio.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4fae39e150019439df90c4c6dd0d62dfa914f70/gcc%2Ffortran%2Fio.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fio.c?ref=c4fae39e150019439df90c4c6dd0d62dfa914f70", "patch": "@@ -4060,16 +4060,13 @@ gfc_match_wait (void)\n {\n   gfc_wait *wait;\n   match m;\n-  locus loc;\n \n   m = gfc_match_char ('(');\n   if (m == MATCH_NO)\n     return m;\n \n   wait = XCNEW (gfc_wait);\n \n-  loc = gfc_current_locus;\n-\n   m = match_wait_element (wait);\n   if (m == MATCH_ERROR)\n     goto cleanup;"}, {"sha": "960be0885318517a2dd829d3d25c3bf93032e368", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4fae39e150019439df90c4c6dd0d62dfa914f70/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4fae39e150019439df90c4c6dd0d62dfa914f70/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=c4fae39e150019439df90c4c6dd0d62dfa914f70", "patch": "@@ -1,5 +1,5 @@\n /* Intrinsic function resolution.\n-   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n+   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n    Free Software Foundation, Inc.\n    Contributed by Andy Vaught & Katherine Holcomb\n \n@@ -2573,13 +2573,12 @@ void\n gfc_resolve_alarm_sub (gfc_code *c)\n {\n   const char *name;\n-  gfc_expr *seconds, *handler, *status;\n+  gfc_expr *seconds, *handler;\n   gfc_typespec ts;\n   gfc_clear_ts (&ts);\n \n   seconds = c->ext.actual->expr;\n   handler = c->ext.actual->next->expr;\n-  status = c->ext.actual->next->next->expr;\n   ts.type = BT_INTEGER;\n   ts.kind = gfc_c_int_kind;\n \n@@ -3261,14 +3260,12 @@ gfc_resolve_fseek_sub (gfc_code *c)\n   gfc_expr *unit;\n   gfc_expr *offset;\n   gfc_expr *whence;\n-  gfc_expr *status;\n   gfc_typespec ts;\n   gfc_clear_ts (&ts);\n \n   unit   = c->ext.actual->expr;\n   offset = c->ext.actual->next->expr;\n   whence = c->ext.actual->next->next->expr;\n-  status = c->ext.actual->next->next->next->expr;\n \n   if (unit->ts.kind != gfc_c_int_kind)\n     {"}, {"sha": "153dfdb307301da1c21a1df4f472796f810254a2", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4fae39e150019439df90c4c6dd0d62dfa914f70/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4fae39e150019439df90c4c6dd0d62dfa914f70/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=c4fae39e150019439df90c4c6dd0d62dfa914f70", "patch": "@@ -1,5 +1,5 @@\n /* Matching subroutines in all sizes, shapes and colors.\n-   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n+   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n    Free Software Foundation, Inc.\n    Contributed by Andy Vaught\n \n@@ -2901,12 +2901,9 @@ gfc_match_return (void)\n static match\n match_typebound_call (gfc_symtree* varst)\n {\n-  gfc_symbol* var;\n   gfc_expr* base;\n   match m;\n \n-  var = varst->n.sym;\n-\n   base = gfc_get_expr ();\n   base->expr_type = EXPR_VARIABLE;\n   base->symtree = varst;"}, {"sha": "f66623f82d0bfd15676bb3165f725447e5c4e1f1", "filename": "gcc/fortran/matchexp.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4fae39e150019439df90c4c6dd0d62dfa914f70/gcc%2Ffortran%2Fmatchexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4fae39e150019439df90c4c6dd0d62dfa914f70/gcc%2Ffortran%2Fmatchexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatchexp.c?ref=c4fae39e150019439df90c4c6dd0d62dfa914f70", "patch": "@@ -1,5 +1,5 @@\n /* Expression parser.\n-   Copyright (C) 2000, 2001, 2002, 2004, 2005, 2006, 2007, 2008\n+   Copyright (C) 2000, 2001, 2002, 2004, 2005, 2006, 2007, 2008, 2009\n    Free Software Foundation, Inc.\n    Contributed by Andy Vaught\n \n@@ -149,7 +149,6 @@ match_primary (gfc_expr **result)\n {\n   match m;\n   gfc_expr *e;\n-  locus where;\n \n   m = gfc_match_literal_constant (result, 0);\n   if (m != MATCH_NO)\n@@ -164,8 +163,6 @@ match_primary (gfc_expr **result)\n     return m;\n \n   /* Match an expression in parentheses.  */\n-  where = gfc_current_locus;\n-\n   if (gfc_match_char ('(') != MATCH_YES)\n     return MATCH_NO;\n "}, {"sha": "36095a2b7228865921166f06ccc221d0fec77069", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4fae39e150019439df90c4c6dd0d62dfa914f70/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4fae39e150019439df90c4c6dd0d62dfa914f70/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=c4fae39e150019439df90c4c6dd0d62dfa914f70", "patch": "@@ -741,8 +741,7 @@ static int\n number_use_names (const char *name, bool interface)\n {\n   int i = 0;\n-  const char *c;\n-  c = find_use_name_n (name, &i, interface);\n+  find_use_name_n (name, &i, interface);\n   return i;\n }\n \n@@ -3977,7 +3976,7 @@ load_equiv (void)\n static void\n load_derived_extensions (void)\n {\n-  int symbol, nuse, j;\n+  int symbol, j;\n   gfc_symbol *derived;\n   gfc_symbol *dt;\n   gfc_symtree *st;\n@@ -4013,7 +4012,6 @@ load_derived_extensions (void)\n \t  mio_internal_string (module);\n \n           /* Only use one use name to find the symbol.  */\n-\t  nuse = number_use_names (name, false);\n \t  j = 1;\n \t  p = find_use_name_n (name, &j, false);\n \t  if (p)"}, {"sha": "c5d35484a3a14f198c8e355bfbdea9208a4f9457", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4fae39e150019439df90c4c6dd0d62dfa914f70/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4fae39e150019439df90c4c6dd0d62dfa914f70/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=c4fae39e150019439df90c4c6dd0d62dfa914f70", "patch": "@@ -1940,7 +1940,6 @@ parse_derived (void)\n   int compiling_type, seen_private, seen_sequence, seen_component, error_flag;\n   gfc_statement st;\n   gfc_state_data s;\n-  gfc_symbol *derived_sym = NULL;\n   gfc_symbol *sym;\n   gfc_component *c;\n \n@@ -2061,8 +2060,6 @@ parse_derived (void)\n   /* need to verify that all fields of the derived type are\n    * interoperable with C if the type is declared to be bind(c)\n    */\n-  derived_sym = gfc_current_block();\n-\n   sym = gfc_current_block ();\n   for (c = sym->components; c; c = c->next)\n     {"}, {"sha": "b6853129d5988ae075204c8dce66c2c7aebfd931", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4fae39e150019439df90c4c6dd0d62dfa914f70/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4fae39e150019439df90c4c6dd0d62dfa914f70/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=c4fae39e150019439df90c4c6dd0d62dfa914f70", "patch": "@@ -5122,7 +5122,6 @@ check_members (gfc_symbol *derived)\n static void \n check_class_members (gfc_symbol *derived)\n {\n-  gfc_symbol* tbp_sym;\n   gfc_expr *e;\n   gfc_symtree *tbp;\n   gfc_class_esym_list *etmp;\n@@ -5142,8 +5141,6 @@ check_class_members (gfc_symbol *derived)\n \n   if (tbp->n.tb->is_generic)\n     {\n-      tbp_sym = NULL;\n-\n       /* If we have to match a passed class member, force the actual\n \t expression to have the correct type.  */\n       if (!tbp->n.tb->nopass)\n@@ -5156,8 +5153,6 @@ check_class_members (gfc_symbol *derived)\n           e->value.compcall.base_object->ts.u.derived = derived;\n \t}\n     }\n-  else\n-    tbp_sym = tbp->n.tb->u.specific->n.sym;\n \n   e->value.compcall.tbp = tbp->n.tb;\n   e->value.compcall.name = tbp->name;\n@@ -7610,14 +7605,12 @@ resolve_ordinary_assign (gfc_code *code, gfc_namespace *ns)\n \n   if (gfc_extend_assign (code, ns) == SUCCESS)\n     {\n-      gfc_symbol* assign_proc;\n       gfc_expr** rhsptr;\n \n       if (code->op == EXEC_ASSIGN_CALL)\n \t{\n \t  lhs = code->ext.actual->expr;\n \t  rhsptr = &code->ext.actual->next->expr;\n-\t  assign_proc = code->symtree->n.sym;\n \t}\n       else\n \t{\n@@ -7632,7 +7625,6 @@ resolve_ordinary_assign (gfc_code *code, gfc_namespace *ns)\n \n \t  tbp = code->expr1->value.compcall.tbp;\n \t  gcc_assert (!tbp->is_generic);\n-\t  assign_proc = tbp->u.specific->n.sym;\n \t}\n \n       /* Make a temporary rhs when there is a default initializer\n@@ -11690,10 +11682,8 @@ resolve_equivalence (gfc_equiv *eq)\n   seq_type eq_type, last_eq_type;\n   gfc_typespec *last_ts;\n   int object, cnt_protected;\n-  const char *value_name;\n   const char *msg;\n \n-  value_name = NULL;\n   last_ts = &eq->expr->symtree->n.sym->ts;\n \n   first_sym = eq->expr->symtree->n.sym;"}, {"sha": "6486bb60ec6334abcc50dfac7c27321b1cb40b86", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4fae39e150019439df90c4c6dd0d62dfa914f70/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4fae39e150019439df90c4c6dd0d62dfa914f70/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=c4fae39e150019439df90c4c6dd0d62dfa914f70", "patch": "@@ -837,7 +837,7 @@ gfc_conv_array_transpose (gfc_se * se, gfc_expr * expr)\n {\n   tree dest, src, dest_index, src_index;\n   gfc_loopinfo *loop;\n-  gfc_ss_info *dest_info, *src_info;\n+  gfc_ss_info *dest_info;\n   gfc_ss *dest_ss, *src_ss;\n   gfc_se src_se;\n   int n;\n@@ -847,7 +847,6 @@ gfc_conv_array_transpose (gfc_se * se, gfc_expr * expr)\n   src_ss = gfc_walk_expr (expr);\n   dest_ss = se->ss;\n \n-  src_info = &src_ss->data.info;\n   dest_info = &dest_ss->data.info;\n   gcc_assert (dest_info->dimen == 2);\n \n@@ -3458,13 +3457,9 @@ gfc_conv_resolve_dependencies (gfc_loopinfo * loop, gfc_ss * dest,\n   gfc_ss *ss;\n   gfc_ref *lref;\n   gfc_ref *rref;\n-  gfc_ref *aref;\n   int nDepend = 0;\n-  int temp_dim = 0;\n \n   loop->temp_ss = NULL;\n-  aref = dest->data.info.ref;\n-  temp_dim = 0;\n \n   for (ss = rss; ss != gfc_ss_terminator; ss = ss->next)\n     {\n@@ -3513,7 +3508,6 @@ gfc_conv_resolve_dependencies (gfc_loopinfo * loop, gfc_ss * dest,\n \t\t  if (depends[n])\n \t\t  loop->order[dim++] = n;\n \t\t}\n-\t      temp_dim = dim;\n \t      for (n = 0; n < loop->dimen; n++)\n \t        {\n \t\t  if (! depends[n])\n@@ -3556,12 +3550,10 @@ void\n gfc_conv_loop_setup (gfc_loopinfo * loop, locus * where)\n {\n   int n;\n-  int dim;\n   gfc_ss_info *info;\n   gfc_ss_info *specinfo;\n   gfc_ss *ss;\n   tree tmp;\n-  tree len;\n   gfc_ss *loopspec[GFC_MAX_DIMENSIONS];\n   bool dynamic[GFC_MAX_DIMENSIONS];\n   gfc_constructor *c;\n@@ -3742,7 +3734,6 @@ gfc_conv_loop_setup (gfc_loopinfo * loop, locus * where)\n \t\t\t loop->temp_ss->string_length);\n \n       tmp = loop->temp_ss->data.temp.type;\n-      len = loop->temp_ss->string_length;\n       n = loop->temp_ss->data.temp.dimen;\n       memset (&loop->temp_ss->data.info, 0, sizeof (gfc_ss_info));\n       loop->temp_ss->type = GFC_SS_SECTION;\n@@ -3774,8 +3765,6 @@ gfc_conv_loop_setup (gfc_loopinfo * loop, locus * where)\n \n       for (n = 0; n < info->dimen; n++)\n \t{\n-\t  dim = info->dim[n];\n-\n \t  /* If we are specifying the range the delta is already set.  */\n \t  if (loopspec[n] != ss)\n \t    {\n@@ -6179,7 +6168,6 @@ gfc_walk_variable_expr (gfc_ss * ss, gfc_expr * expr)\n   gfc_ref *ref;\n   gfc_array_ref *ar;\n   gfc_ss *newss;\n-  gfc_ss *head;\n   int n;\n \n   for (ref = expr->ref; ref; ref = ref->next)\n@@ -6252,8 +6240,6 @@ gfc_walk_variable_expr (gfc_ss * ss, gfc_expr * expr)\n \t  newss->data.info.dimen = 0;\n \t  newss->data.info.ref = ref;\n \n-\t  head = newss;\n-\n           /* We add SS chains for all the subscripts in the section.  */\n \t  for (n = 0; n < ar->dimen; n++)\n \t    {"}, {"sha": "62a2e018210ff01158c32e3d31a0f5016c710dfd", "filename": "gcc/fortran/trans-common.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4fae39e150019439df90c4c6dd0d62dfa914f70/gcc%2Ffortran%2Ftrans-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4fae39e150019439df90c4c6dd0d62dfa914f70/gcc%2Ffortran%2Ftrans-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-common.c?ref=c4fae39e150019439df90c4c6dd0d62dfa914f70", "patch": "@@ -1,5 +1,5 @@\n /* Common block and equivalence list handling\n-   Copyright (C) 2000, 2003, 2004, 2005, 2006, 2007, 2008\n+   Copyright (C) 2000, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n    Free Software Foundation, Inc.\n    Contributed by Canqun Yang <canqun@nudt.edu.cn>\n \n@@ -636,7 +636,6 @@ create_common (gfc_common_head *com, segment_info *head, bool saw_equiv)\n   if (is_init)\n     {\n       tree ctor, tmp;\n-      HOST_WIDE_INT offset = 0;\n       VEC(constructor_elt,gc) *v = NULL;\n \n       if (field != NULL_TREE && field_init != NULL_TREE)\n@@ -652,7 +651,6 @@ create_common (gfc_common_head *com, segment_info *head, bool saw_equiv)\n \t\t    s->sym->attr.pointer || s->sym->attr.allocatable);\n \n \t\tCONSTRUCTOR_APPEND_ELT (v, s->field, tmp);\n-\t\toffset = s->offset + s->length;\n \t      }\n \t  }\n "}, {"sha": "77de6bd5773b2a1ed80e5b14fe10ca9b35b8928e", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4fae39e150019439df90c4c6dd0d62dfa914f70/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4fae39e150019439df90c4c6dd0d62dfa914f70/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=c4fae39e150019439df90c4c6dd0d62dfa914f70", "patch": "@@ -356,7 +356,6 @@ gfc_conv_substring (gfc_se * se, gfc_ref * ref, int kind,\n {\n   tree tmp;\n   tree type;\n-  tree var;\n   tree fault;\n   gfc_se start;\n   gfc_se end;\n@@ -365,7 +364,6 @@ gfc_conv_substring (gfc_se * se, gfc_ref * ref, int kind,\n   type = gfc_get_character_type (kind, ref->u.ss.length);\n   type = build_pointer_type (type);\n \n-  var = NULL_TREE;\n   gfc_init_se (&start, se);\n   gfc_conv_expr_type (&start, ref->u.ss.start, gfc_charlen_type_node);\n   gfc_add_block_to_block (&se->pre, &start.pre);"}, {"sha": "4273b8226e88b4b2eadfae1d1fa38fbf42a54375", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4fae39e150019439df90c4c6dd0d62dfa914f70/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4fae39e150019439df90c4c6dd0d62dfa914f70/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=c4fae39e150019439df90c4c6dd0d62dfa914f70", "patch": "@@ -832,7 +832,7 @@ gfc_conv_intrinsic_bound (gfc_se * se, gfc_expr * expr, int upper)\n   tree type;\n   tree bound;\n   tree tmp;\n-  tree cond, cond1, cond2, cond3, cond4, size;\n+  tree cond, cond1, cond3, cond4, size;\n   tree ubound;\n   tree lbound;\n   gfc_se argse;\n@@ -970,7 +970,6 @@ gfc_conv_intrinsic_bound (gfc_se * se, gfc_expr * expr, int upper)\n       tree stride = gfc_conv_descriptor_stride_get (desc, bound);\n \n       cond1 = fold_build2 (GE_EXPR, boolean_type_node, ubound, lbound);\n-      cond2 = fold_build2 (LE_EXPR, boolean_type_node, ubound, lbound);\n \n       cond3 = fold_build2 (GE_EXPR, boolean_type_node, stride,\n \t\t\t   gfc_index_zero_node);\n@@ -4090,7 +4089,6 @@ gfc_conv_intrinsic_sizeof (gfc_se *se, gfc_expr *expr)\n   gfc_expr *arg;\n   gfc_ss *ss;\n   gfc_se argse;\n-  tree source;\n   tree source_bytes;\n   tree type;\n   tree tmp;\n@@ -4106,7 +4104,6 @@ gfc_conv_intrinsic_sizeof (gfc_se *se, gfc_expr *expr)\n   if (ss == gfc_ss_terminator)\n     {\n       gfc_conv_expr_reference (&argse, arg);\n-      source = argse.expr;\n \n       type = TREE_TYPE (build_fold_indirect_ref_loc (input_location,\n \t\t\t\t\t\t argse.expr));\n@@ -4123,7 +4120,6 @@ gfc_conv_intrinsic_sizeof (gfc_se *se, gfc_expr *expr)\n       source_bytes = gfc_create_var (gfc_array_index_type, \"bytes\");\n       argse.want_pointer = 0;\n       gfc_conv_expr_descriptor (&argse, arg, ss);\n-      source = gfc_conv_descriptor_data_get (argse.expr);\n       type = gfc_get_element_type (TREE_TYPE (argse.expr));\n \n       /* Obtain the argument's word length.  */\n@@ -4228,7 +4224,6 @@ gfc_conv_intrinsic_transfer (gfc_se * se, gfc_expr * expr)\n   tree size_bytes;\n   tree upper;\n   tree lower;\n-  tree stride;\n   tree stmt;\n   gfc_actual_arglist *arg;\n   gfc_se argse;\n@@ -4332,7 +4327,6 @@ gfc_conv_intrinsic_transfer (gfc_se * se, gfc_expr * expr)\n \t  tree idx;\n \t  idx = gfc_rank_cst[n];\n \t  gfc_add_modify (&argse.pre, source_bytes, tmp);\n-\t  stride = gfc_conv_descriptor_stride_get (argse.expr, idx);\n \t  lower = gfc_conv_descriptor_lbound_get (argse.expr, idx);\n \t  upper = gfc_conv_descriptor_ubound_get (argse.expr, idx);\n \t  tmp = fold_build2 (MINUS_EXPR, gfc_array_index_type,\n@@ -5065,13 +5059,10 @@ gfc_conv_intrinsic_loc (gfc_se * se, gfc_expr * expr)\n void\n gfc_conv_intrinsic_function (gfc_se * se, gfc_expr * expr)\n {\n-  gfc_intrinsic_sym *isym;\n   const char *name;\n   int lib, kind;\n   tree fndecl;\n \n-  isym = expr->value.function.isym;\n-\n   name = &expr->value.function.name[2];\n \n   if (expr->rank > 0 && !expr->inline_noncopying_intrinsic)"}, {"sha": "a7f95669b492e05cb7d14ff3995ff524c1f2279c", "filename": "gcc/fortran/trans-openmp.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4fae39e150019439df90c4c6dd0d62dfa914f70/gcc%2Ffortran%2Ftrans-openmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4fae39e150019439df90c4c6dd0d62dfa914f70/gcc%2Ffortran%2Ftrans-openmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.c?ref=c4fae39e150019439df90c4c6dd0d62dfa914f70", "patch": "@@ -700,7 +700,7 @@ static tree\n gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n \t\t       locus where)\n {\n-  tree omp_clauses = NULL_TREE, chunk_size, c, old_clauses;\n+  tree omp_clauses = NULL_TREE, chunk_size, c;\n   int list;\n   enum omp_clause_code clause_code;\n   gfc_se se;\n@@ -759,7 +759,6 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n \t    default:\n \t      gcc_unreachable ();\n \t    }\n-\t  old_clauses = omp_clauses;\n \t  omp_clauses\n \t    = gfc_trans_omp_reduction_list (n, omp_clauses, reduction_code,\n \t\t\t\t\t    where);\n@@ -1134,14 +1133,13 @@ gfc_trans_omp_do (gfc_code *code, stmtblock_t *pblock,\n   stmtblock_t block;\n   stmtblock_t body;\n   gfc_omp_clauses *clauses = code->ext.omp_clauses;\n-  gfc_code *outermost;\n   int i, collapse = clauses->collapse;\n   tree dovar_init = NULL_TREE;\n \n   if (collapse <= 0)\n     collapse = 1;\n \n-  outermost = code = code->block->next;\n+  code = code->block->next;\n   gcc_assert (code->op == EXEC_DO);\n \n   init = make_tree_vec (collapse);"}, {"sha": "18644779fc1bde3a24acea745612d1ff28172112", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4fae39e150019439df90c4c6dd0d62dfa914f70/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4fae39e150019439df90c4c6dd0d62dfa914f70/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=c4fae39e150019439df90c4c6dd0d62dfa914f70", "patch": "@@ -2490,7 +2490,7 @@ gfc_get_array_descr_info (const_tree type, struct array_descr_info *info)\n   int rank, dim;\n   bool indirect = false;\n   tree etype, ptype, field, t, base_decl;\n-  tree data_off, offset_off, dim_off, dim_size, elem_size;\n+  tree data_off, dim_off, dim_size, elem_size;\n   tree lower_suboff, upper_suboff, stride_suboff;\n \n   if (! GFC_DESCRIPTOR_TYPE_P (type))\n@@ -2546,7 +2546,6 @@ gfc_get_array_descr_info (const_tree type, struct array_descr_info *info)\n   field = TYPE_FIELDS (TYPE_MAIN_VARIANT (type));\n   data_off = byte_position (field);\n   field = TREE_CHAIN (field);\n-  offset_off = byte_position (field);\n   field = TREE_CHAIN (field);\n   field = TREE_CHAIN (field);\n   dim_off = byte_position (field);"}]}