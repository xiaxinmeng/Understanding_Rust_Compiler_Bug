{"sha": "88bae6f494dc867edd8e6257658974d629bdc53b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODhiYWU2ZjQ5NGRjODY3ZWRkOGU2MjU3NjU4OTc0ZDYyOWJkYzUzYg==", "commit": {"author": {"name": "Thomas Schwinge", "email": "tschwinge@gcc.gnu.org", "date": "2015-10-27T08:39:15Z"}, "committer": {"name": "Thomas Schwinge", "email": "tschwinge@gcc.gnu.org", "date": "2015-10-27T08:39:15Z"}, "message": "[PR c/64765, c/64880] Support OpenACC Combined Directives in C, C++\n\n\tgcc/c-family/\n\tPR c/64765\n\tPR c/64880\n\t* c-common.h (c_oacc_split_loop_clauses): Declare function.\n\t* c-omp.c (c_oacc_split_loop_clauses): New function.\n\tgcc/c/\n\tPR c/64765\n\tPR c/64880\n\t* c-parser.c (c_parser_oacc_loop): Add mask, cclauses formal\n\tparameters, and handle these.  Adjust all users.\n\t(c_parser_oacc_kernels, c_parser_oacc_parallel): Merge functions\n\tinto...\n\t(c_parser_oacc_kernels_parallel): ... this new function.  Adjust\n\tall users.\n\t* c-tree.h (c_finish_oacc_parallel, c_finish_oacc_kernels): Don't\n\tdeclare functions.\n\t(c_finish_omp_construct): Declare function.\n\t* c-typeck.c (c_finish_oacc_parallel, c_finish_oacc_kernels):\n\tMerge functions into...\n\t(c_finish_omp_construct): ... this new function.\n\tgcc/cp/\n\tPR c/64765\n\tPR c/64880\n\t* cp-tree.h (finish_oacc_kernels, finish_oacc_parallel): Don't\n\tdeclare functions.\n\t(finish_omp_construct): Declare function.\n\t* parser.c (cp_parser_oacc_loop): Add p_name, mask, cclauses\n\tformal parameters, and handle these.  Adjust all users.\n\t(cp_parser_oacc_kernels, cp_parser_oacc_parallel): Merge functions\n\tinto...\n\t(cp_parser_oacc_kernels_parallel): ... this new function.  Adjust\n\tall users.\n\t* semantics.c (finish_oacc_kernels, finish_oacc_parallel): Merge functions into...\n\t(finish_omp_construct): ... this new function.\n\tgcc/\n\t* tree.h (OACC_PARALLEL_BODY, OACC_PARALLEL_CLAUSES)\n\t(OACC_KERNELS_BODY, OACC_KERNELS_CLAUSES, OACC_KERNELS_COMBINED)\n\t(OACC_PARALLEL_COMBINED): Don't define macros.  Adjust all users.\n\tgcc/testsuite/\n\tPR c/64765\n\tPR c/64880\n\t* c-c++-common/goacc/loop-1.c: Don't skip for C++.  Don't prune\n\tsorry message.\n\t(PR64765): New function.\n\t* gfortran.dg/goacc/coarray_2.f90: XFAIL.\n\t* gfortran.dg/goacc/combined_loop.f90: Extend.  Don't prune\n\tsorry message.\n\t* gfortran.dg/goacc/cray.f95: Refine prune directive.\n\t* gfortran.dg/goacc/parameter.f95: Likewise.\n\tlibgomp/\n\t* testsuite/libgomp.oacc-c-c++-common/combdir-1.c: New file.\n\t* testsuite/libgomp.oacc-fortran/combdir-1.f90: Likewise.\n\nFrom-SVN: r229404", "tree": {"sha": "6ab5ea8ba1b8126fa0e7ad76b11ad320ba2c7edb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ab5ea8ba1b8126fa0e7ad76b11ad320ba2c7edb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88bae6f494dc867edd8e6257658974d629bdc53b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88bae6f494dc867edd8e6257658974d629bdc53b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88bae6f494dc867edd8e6257658974d629bdc53b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88bae6f494dc867edd8e6257658974d629bdc53b/comments", "author": null, "committer": null, "parents": [{"sha": "5acdb61b69011e9d0f6b507fc37160b85ba04c51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5acdb61b69011e9d0f6b507fc37160b85ba04c51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5acdb61b69011e9d0f6b507fc37160b85ba04c51"}], "stats": {"total": 674, "additions": 406, "deletions": 268}, "files": [{"sha": "20fd5ececa797455c0229c7ea505ad37071459a6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88bae6f494dc867edd8e6257658974d629bdc53b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88bae6f494dc867edd8e6257658974d629bdc53b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=88bae6f494dc867edd8e6257658974d629bdc53b", "patch": "@@ -1,3 +1,9 @@\n+2015-10-27  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* tree.h (OACC_PARALLEL_BODY, OACC_PARALLEL_CLAUSES)\n+\t(OACC_KERNELS_BODY, OACC_KERNELS_CLAUSES, OACC_KERNELS_COMBINED)\n+\t(OACC_PARALLEL_COMBINED): Don't define macros.  Adjust all users.\n+\n 2015-10-27  Tom de Vries  <tom@codesourcery.com>\n \n \t* tree-ssa-structalias.c (push_fields_onto_fieldstack): Add and use var"}, {"sha": "4d225726c56ef80f7336a9c8f23c5388df18ea97", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88bae6f494dc867edd8e6257658974d629bdc53b/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88bae6f494dc867edd8e6257658974d629bdc53b/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=88bae6f494dc867edd8e6257658974d629bdc53b", "patch": "@@ -1,3 +1,12 @@\n+2015-10-27  Thomas Schwinge  <thomas@codesourcery.com>\n+\t    James Norris  <jnorris@codesourcery.com>\n+\t    Cesar Philippidis  <cesar@codesourcery.com>\n+\n+\tPR c/64765\n+\tPR c/64880\n+\t* c-common.h (c_oacc_split_loop_clauses): Declare function.\n+\t* c-omp.c (c_oacc_split_loop_clauses): New function.\n+\n 2015-10-21  Martin Sebor  <msebor@redhat.com>\n \n \tPR driver/68043"}, {"sha": "6a381f23435a6ce085bcd1c5027eda0ca156db6d", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88bae6f494dc867edd8e6257658974d629bdc53b/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88bae6f494dc867edd8e6257658974d629bdc53b/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=88bae6f494dc867edd8e6257658974d629bdc53b", "patch": "@@ -1269,6 +1269,7 @@ extern void c_finish_omp_taskyield (location_t);\n extern tree c_finish_omp_for (location_t, enum tree_code, tree, tree, tree,\n \t\t\t      tree, tree, tree, tree);\n extern tree c_finish_oacc_wait (location_t, tree, tree);\n+extern tree c_oacc_split_loop_clauses (tree, tree *);\n extern void c_omp_split_clauses (location_t, enum tree_code, omp_clause_mask,\n \t\t\t\t tree, tree *);\n extern tree c_omp_declare_simd_clauses_to_numbers (tree, tree);"}, {"sha": "93bff2e2ec5bddbc6294230dfda368a080b25d78", "filename": "gcc/c-family/c-omp.c", "status": "modified", "additions": 37, "deletions": 3, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88bae6f494dc867edd8e6257658974d629bdc53b/gcc%2Fc-family%2Fc-omp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88bae6f494dc867edd8e6257658974d629bdc53b/gcc%2Fc-family%2Fc-omp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-omp.c?ref=88bae6f494dc867edd8e6257658974d629bdc53b", "patch": "@@ -691,13 +691,47 @@ c_finish_omp_for (location_t locus, enum tree_code code, tree declv,\n     }\n }\n \n-/* Right now we have 21 different combined/composite constructs, this\n-   function attempts to split or duplicate clauses for combined\n+/* This function splits clauses for OpenACC combined loop\n+   constructs.  OpenACC combined loop constructs are:\n+   #pragma acc kernels loop\n+   #pragma acc parallel loop\n+*/\n+\n+tree\n+c_oacc_split_loop_clauses (tree clauses, tree *not_loop_clauses)\n+{\n+  tree next, loop_clauses;\n+\n+  loop_clauses = *not_loop_clauses = NULL_TREE;\n+  for (; clauses ; clauses = next)\n+    {\n+      next = OMP_CLAUSE_CHAIN (clauses);\n+\n+      switch (OMP_CLAUSE_CODE (clauses))\n+        {\n+\tcase OMP_CLAUSE_COLLAPSE:\n+\tcase OMP_CLAUSE_REDUCTION:\n+\t  OMP_CLAUSE_CHAIN (clauses) = loop_clauses;\n+\t  loop_clauses = clauses;\n+\t  break;\n+\n+\tdefault:\n+\t  OMP_CLAUSE_CHAIN (clauses) = *not_loop_clauses;\n+\t  *not_loop_clauses = clauses;\n+\t  break;\n+\t}\n+    }\n+\n+  return loop_clauses;\n+}\n+\n+/* This function attempts to split or duplicate clauses for OpenMP\n+   combined/composite constructs.  Right now there are 21 different\n    constructs.  CODE is the innermost construct in the combined construct,\n    and MASK allows to determine which constructs are combined together,\n    as every construct has at least one clause that no other construct\n    has (except for OMP_SECTIONS, but that can be only combined with parallel).\n-   Combined/composite constructs are:\n+   OpenMP combined/composite constructs are:\n    #pragma omp distribute parallel for\n    #pragma omp distribute parallel for simd\n    #pragma omp distribute simd"}, {"sha": "da4c8016834836d69124f9320b44e8776136e9bf", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88bae6f494dc867edd8e6257658974d629bdc53b/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88bae6f494dc867edd8e6257658974d629bdc53b/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=88bae6f494dc867edd8e6257658974d629bdc53b", "patch": "@@ -1,3 +1,22 @@\n+2015-10-27  Thomas Schwinge  <thomas@codesourcery.com>\n+\t    James Norris  <jnorris@codesourcery.com>\n+\t    Cesar Philippidis  <cesar@codesourcery.com>\n+\n+\tPR c/64765\n+\tPR c/64880\n+\t* c-parser.c (c_parser_oacc_loop): Add mask, cclauses formal\n+\tparameters, and handle these.  Adjust all users.\n+\t(c_parser_oacc_kernels, c_parser_oacc_parallel): Merge functions\n+\tinto...\n+\t(c_parser_oacc_kernels_parallel): ... this new function.  Adjust\n+\tall users.\n+\t* c-tree.h (c_finish_oacc_parallel, c_finish_oacc_kernels): Don't\n+\tdeclare functions.\n+\t(c_finish_omp_construct): Declare function.\n+\t* c-typeck.c (c_finish_oacc_parallel, c_finish_oacc_kernels):\n+\tMerge functions into...\n+\t(c_finish_omp_construct): ... this new function.\n+\n 2015-10-22  Richard Biener  <rguenther@suse.de>\n \n \t* c-typeck.c (c_finish_omp_clauses): Properly convert operands"}, {"sha": "ec918c14ca8263214672a2fb6951ff9c1694825b", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 66, "deletions": 82, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88bae6f494dc867edd8e6257658974d629bdc53b/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88bae6f494dc867edd8e6257658974d629bdc53b/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=88bae6f494dc867edd8e6257658974d629bdc53b", "patch": "@@ -1237,7 +1237,6 @@ static vec<tree, va_gc> *c_parser_expr_list (c_parser *, bool, bool,\n \t\t\t\t\t     unsigned int * = NULL);\n static void c_parser_oacc_enter_exit_data (c_parser *, bool);\n static void c_parser_oacc_update (c_parser *);\n-static tree c_parser_oacc_loop (location_t, c_parser *, char *);\n static void c_parser_omp_construct (c_parser *);\n static void c_parser_omp_threadprivate (c_parser *);\n static void c_parser_omp_barrier (c_parser *);\n@@ -12874,60 +12873,6 @@ c_parser_oacc_data (location_t loc, c_parser *parser)\n   return stmt;\n }\n \n-/* OpenACC 2.0:\n-   # pragma acc kernels oacc-kernels-clause[optseq] new-line\n-     structured-block\n-\n-   LOC is the location of the #pragma token.\n-*/\n-\n-#define OACC_KERNELS_CLAUSE_MASK\t\t\t\t\t\\\n-\t( (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_ASYNC)\t\t\\\n-\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_COPY)\t\t\\\n-\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_COPYIN)\t\t\\\n-\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_COPYOUT)\t\t\\\n-\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_CREATE)\t\t\\\n-\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_DEVICEPTR)\t\t\\\n-\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_IF)\t\t\t\\\n-\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_PRESENT)\t\t\\\n-\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_PRESENT_OR_COPY)\t\\\n-\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_PRESENT_OR_COPYIN)\t\\\n-\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_PRESENT_OR_COPYOUT)\t\\\n-\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_PRESENT_OR_CREATE)\t\\\n-\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_WAIT) )\n-\n-static tree\n-c_parser_oacc_kernels (location_t loc, c_parser *parser, char *p_name)\n-{\n-  tree stmt, clauses = NULL_TREE, block;\n-\n-  strcat (p_name, \" kernels\");\n-\n-  if (c_parser_next_token_is (parser, CPP_NAME))\n-    {\n-      const char *p = IDENTIFIER_POINTER (c_parser_peek_token (parser)->value);\n-      if (strcmp (p, \"loop\") == 0)\n-\t{\n-\t  c_parser_consume_token (parser);\n-\t  block = c_begin_omp_parallel ();\n-\t  c_parser_oacc_loop (loc, parser, p_name);\n-\t  stmt = c_finish_oacc_kernels (loc, clauses, block);\n-\t  OACC_KERNELS_COMBINED (stmt) = 1;\n-\t  return stmt;\n-\t}\n-    }\n-\n-  clauses =  c_parser_oacc_all_clauses (parser, OACC_KERNELS_CLAUSE_MASK,\n-\t\t\t\t\tp_name);\n-\n-  block = c_begin_omp_parallel ();\n-  add_stmt (c_parser_omp_structured_block (parser));\n-\n-  stmt = c_finish_oacc_kernels (loc, clauses, block);\n-\n-  return stmt;\n-}\n-\n /* OpenACC 2.0:\n    # pragma acc enter data oacc-enter-data-clause[optseq] new-line\n \n@@ -13018,29 +12963,58 @@ c_parser_oacc_enter_exit_data (c_parser *parser, bool enter)\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_REDUCTION) )\n \n static tree\n-c_parser_oacc_loop (location_t loc, c_parser *parser, char *p_name)\n+c_parser_oacc_loop (location_t loc, c_parser *parser, char *p_name,\n+\t\t    omp_clause_mask mask, tree *cclauses)\n {\n-  tree stmt, clauses, block;\n-\n   strcat (p_name, \" loop\");\n+  mask |= OACC_LOOP_CLAUSE_MASK;\n \n-  clauses = c_parser_oacc_all_clauses (parser, OACC_LOOP_CLAUSE_MASK, p_name);\n+  tree clauses = c_parser_oacc_all_clauses (parser, mask, p_name,\n+\t\t\t\t\t    cclauses == NULL);\n+  if (cclauses)\n+    {\n+      clauses = c_oacc_split_loop_clauses (clauses, cclauses);\n+      if (*cclauses)\n+\tc_finish_omp_clauses (*cclauses, false);\n+      if (clauses)\n+\tc_finish_omp_clauses (clauses, false);\n+    }\n \n-  block = c_begin_compound_stmt (true);\n-  stmt = c_parser_omp_for_loop (loc, parser, OACC_LOOP, clauses, NULL);\n+  tree block = c_begin_compound_stmt (true);\n+  tree stmt = c_parser_omp_for_loop (loc, parser, OACC_LOOP, clauses, NULL);\n   block = c_end_compound_stmt (loc, block, true);\n   add_stmt (block);\n \n   return stmt;\n }\n \n /* OpenACC 2.0:\n+   # pragma acc kernels oacc-kernels-clause[optseq] new-line\n+     structured-block\n+\n+   or\n+\n    # pragma acc parallel oacc-parallel-clause[optseq] new-line\n      structured-block\n \n    LOC is the location of the #pragma token.\n */\n \n+#define OACC_KERNELS_CLAUSE_MASK\t\t\t\t\t\\\n+\t( (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_ASYNC)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_COPY)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_COPYIN)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_COPYOUT)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_CREATE)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_DEVICEPTR)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_IF)\t\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_PRESENT)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_PRESENT_OR_COPY)\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_PRESENT_OR_COPYIN)\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_PRESENT_OR_COPYOUT)\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_PRESENT_OR_CREATE)\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_WAIT) )\n+\n #define OACC_PARALLEL_CLAUSE_MASK\t\t\t\t\t\\\n \t( (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_ASYNC)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_COPY)\t\t\\\n@@ -13061,35 +13035,48 @@ c_parser_oacc_loop (location_t loc, c_parser *parser, char *p_name)\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_WAIT) )\n \n static tree\n-c_parser_oacc_parallel (location_t loc, c_parser *parser, char *p_name)\n+c_parser_oacc_kernels_parallel (location_t loc, c_parser *parser,\n+\t\t\t\tenum pragma_kind p_kind, char *p_name)\n {\n-  tree stmt, clauses = NULL_TREE, block;\n-\n-  strcat (p_name, \" parallel\");\n+  omp_clause_mask mask;\n+  enum tree_code code;\n+  switch (p_kind)\n+    {\n+    case PRAGMA_OACC_KERNELS:\n+      strcat (p_name, \" kernels\");\n+      mask = OACC_KERNELS_CLAUSE_MASK;\n+      code = OACC_KERNELS;\n+      break;\n+    case PRAGMA_OACC_PARALLEL:\n+      strcat (p_name, \" parallel\");\n+      mask = OACC_PARALLEL_CLAUSE_MASK;\n+      code = OACC_PARALLEL;\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n \n   if (c_parser_next_token_is (parser, CPP_NAME))\n     {\n       const char *p = IDENTIFIER_POINTER (c_parser_peek_token (parser)->value);\n       if (strcmp (p, \"loop\") == 0)\n \t{\n \t  c_parser_consume_token (parser);\n-\t  block = c_begin_omp_parallel ();\n-\t  c_parser_oacc_loop (loc, parser, p_name);\n-\t  stmt = c_finish_oacc_parallel (loc, clauses, block);\n-\t  OACC_PARALLEL_COMBINED (stmt) = 1;\n-\t  return stmt;\n+\t  mask |= OACC_LOOP_CLAUSE_MASK;\n+\n+\t  tree block = c_begin_omp_parallel ();\n+\t  tree clauses;\n+\t  c_parser_oacc_loop (loc, parser, p_name, mask, &clauses);\n+\t  return c_finish_omp_construct (loc, code, block, clauses);\n \t}\n     }\n \n-  clauses =  c_parser_oacc_all_clauses (parser, OACC_PARALLEL_CLAUSE_MASK,\n-\t\t\t\t\tp_name);\n+  tree clauses = c_parser_oacc_all_clauses (parser, mask, p_name);\n \n-  block = c_begin_omp_parallel ();\n+  tree block = c_begin_omp_parallel ();\n   add_stmt (c_parser_omp_structured_block (parser));\n \n-  stmt = c_finish_oacc_parallel (loc, clauses, block);\n-\n-  return stmt;\n+  return c_finish_omp_construct (loc, code, block, clauses);\n }\n \n /* OpenACC 2.0:\n@@ -16079,16 +16066,13 @@ c_parser_omp_construct (c_parser *parser)\n       stmt = c_parser_oacc_data (loc, parser);\n       break;\n     case PRAGMA_OACC_KERNELS:\n+    case PRAGMA_OACC_PARALLEL:\n       strcpy (p_name, \"#pragma acc\");\n-      stmt = c_parser_oacc_kernels (loc, parser, p_name);\n+      stmt = c_parser_oacc_kernels_parallel (loc, parser, p_kind, p_name);\n       break;\n     case PRAGMA_OACC_LOOP:\n       strcpy (p_name, \"#pragma acc\");\n-      stmt = c_parser_oacc_loop (loc, parser, p_name);\n-      break;\n-    case PRAGMA_OACC_PARALLEL:\n-      strcpy (p_name, \"#pragma acc\");\n-      stmt = c_parser_oacc_parallel (loc, parser, p_name);\n+      stmt = c_parser_oacc_loop (loc, parser, p_name, mask, NULL);\n       break;\n     case PRAGMA_OACC_WAIT:\n       strcpy (p_name, \"#pragma wait\");"}, {"sha": "04991f7261c4e2973fb96c16288ce6bf66647e56", "filename": "gcc/c/c-tree.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88bae6f494dc867edd8e6257658974d629bdc53b/gcc%2Fc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88bae6f494dc867edd8e6257658974d629bdc53b/gcc%2Fc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-tree.h?ref=88bae6f494dc867edd8e6257658974d629bdc53b", "patch": "@@ -640,8 +640,7 @@ extern tree c_finish_bc_stmt (location_t, tree *, bool);\n extern tree c_finish_goto_label (location_t, tree);\n extern tree c_finish_goto_ptr (location_t, tree);\n extern tree c_expr_to_decl (tree, bool *, bool *);\n-extern tree c_finish_oacc_parallel (location_t, tree, tree);\n-extern tree c_finish_oacc_kernels (location_t, tree, tree);\n+extern tree c_finish_omp_construct (location_t, enum tree_code, tree, tree);\n extern tree c_finish_oacc_data (location_t, tree, tree);\n extern tree c_begin_omp_parallel (void);\n extern tree c_finish_omp_parallel (location_t, tree, tree);"}, {"sha": "64ea1c272f893e15aea2c629ebf7db0711686a1d", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 8, "deletions": 28, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88bae6f494dc867edd8e6257658974d629bdc53b/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88bae6f494dc867edd8e6257658974d629bdc53b/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=88bae6f494dc867edd8e6257658974d629bdc53b", "patch": "@@ -11481,39 +11481,19 @@ c_expr_to_decl (tree expr, bool *tc ATTRIBUTE_UNUSED, bool *se)\n     return expr;\n }\n \f\n-/* Generate OACC_PARALLEL, with CLAUSES and BLOCK as its compound\n-   statement.  LOC is the location of the OACC_PARALLEL.  */\n+/* Generate OMP construct CODE, with BODY and CLAUSES as its compound\n+   statement.  LOC is the location of the construct.  */\n \n tree\n-c_finish_oacc_parallel (location_t loc, tree clauses, tree block)\n+c_finish_omp_construct (location_t loc, enum tree_code code, tree body,\n+\t\t\ttree clauses)\n {\n-  tree stmt;\n-\n-  block = c_end_compound_stmt (loc, block, true);\n-\n-  stmt = make_node (OACC_PARALLEL);\n-  TREE_TYPE (stmt) = void_type_node;\n-  OACC_PARALLEL_CLAUSES (stmt) = clauses;\n-  OACC_PARALLEL_BODY (stmt) = block;\n-  SET_EXPR_LOCATION (stmt, loc);\n-\n-  return add_stmt (stmt);\n-}\n-\n-/* Generate OACC_KERNELS, with CLAUSES and BLOCK as its compound\n-   statement.  LOC is the location of the OACC_KERNELS.  */\n-\n-tree\n-c_finish_oacc_kernels (location_t loc, tree clauses, tree block)\n-{\n-  tree stmt;\n-\n-  block = c_end_compound_stmt (loc, block, true);\n+  body = c_end_compound_stmt (loc, body, true);\n \n-  stmt = make_node (OACC_KERNELS);\n+  tree stmt = make_node (code);\n   TREE_TYPE (stmt) = void_type_node;\n-  OACC_KERNELS_CLAUSES (stmt) = clauses;\n-  OACC_KERNELS_BODY (stmt) = block;\n+  OMP_BODY (stmt) = body;\n+  OMP_CLAUSES (stmt) = clauses;\n   SET_EXPR_LOCATION (stmt, loc);\n \n   return add_stmt (stmt);"}, {"sha": "979ebb9617193cddb5ae4d888159710a058e0d5d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88bae6f494dc867edd8e6257658974d629bdc53b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88bae6f494dc867edd8e6257658974d629bdc53b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=88bae6f494dc867edd8e6257658974d629bdc53b", "patch": "@@ -1,3 +1,21 @@\n+2015-10-27  Thomas Schwinge  <thomas@codesourcery.com>\n+\t    James Norris  <jnorris@codesourcery.com>\n+\t    Cesar Philippidis  <cesar@codesourcery.com>\n+\n+\tPR c/64765\n+\tPR c/64880\n+\t* cp-tree.h (finish_oacc_kernels, finish_oacc_parallel): Don't\n+\tdeclare functions.\n+\t(finish_omp_construct): Declare function.\n+\t* parser.c (cp_parser_oacc_loop): Add p_name, mask, cclauses\n+\tformal parameters, and handle these.  Adjust all users.\n+\t(cp_parser_oacc_kernels, cp_parser_oacc_parallel): Merge functions\n+\tinto...\n+\t(cp_parser_oacc_kernels_parallel): ... this new function.  Adjust\n+\tall users.\n+\t* semantics.c (finish_oacc_kernels, finish_oacc_parallel): Merge functions into...\n+\t(finish_omp_construct): ... this new function.\n+\n 2015-10-25  Jason Merrill  <jason@redhat.com>\n \n \tDR 2179"}, {"sha": "af2ba64409c4a5597cf704561b5228e6d271b5b7", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88bae6f494dc867edd8e6257658974d629bdc53b/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88bae6f494dc867edd8e6257658974d629bdc53b/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=88bae6f494dc867edd8e6257658974d629bdc53b", "patch": "@@ -6318,8 +6318,7 @@ extern void finish_omp_threadprivate\t\t(tree);\n extern tree begin_omp_structured_block\t\t(void);\n extern tree finish_omp_structured_block\t\t(tree);\n extern tree finish_oacc_data\t\t\t(tree, tree);\n-extern tree finish_oacc_kernels\t\t\t(tree, tree);\n-extern tree finish_oacc_parallel\t\t(tree, tree);\n+extern tree finish_omp_construct\t\t(enum tree_code, tree, tree);\n extern tree begin_omp_parallel\t\t\t(void);\n extern tree finish_omp_parallel\t\t\t(tree, tree);\n extern tree begin_omp_task\t\t\t(void);"}, {"sha": "0354029a060703992034b1192e4a3a3c9bf69d29", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 86, "deletions": 61, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88bae6f494dc867edd8e6257658974d629bdc53b/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88bae6f494dc867edd8e6257658974d629bdc53b/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=88bae6f494dc867edd8e6257658974d629bdc53b", "patch": "@@ -34297,70 +34297,65 @@ cp_parser_oacc_enter_exit_data (cp_parser *parser, cp_token *pragma_tok,\n   return stmt;\n }\n \n-/* OpenACC 2.0:\n-   # pragma acc kernels oacc-kernels-clause[optseq] new-line\n-     structured-block  */\n-\n-#define OACC_KERNELS_CLAUSE_MASK\t\t\t\t\t\\\n-\t( (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_ASYNC)\t\t\\\n-\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_COPY)\t\t\\\n-\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_COPYIN)\t\t\\\n-\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_COPYOUT)\t\t\\\n-\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_CREATE)\t\t\\\n-\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_DEVICEPTR)\t\t\\\n-\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_IF)\t\t\t\\\n-\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_PRESENT)\t\t\\\n-\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_PRESENT_OR_COPY)\t\\\n-\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_PRESENT_OR_COPYIN)\t\\\n-\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_PRESENT_OR_COPYOUT)\t\\\n-\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_PRESENT_OR_CREATE)\t\\\n-\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_WAIT))\n-\n-static tree\n-cp_parser_oacc_kernels (cp_parser *parser, cp_token *pragma_tok)\n-{\n-  tree stmt, clauses, block;\n-  unsigned int save;\n-\n-  clauses = cp_parser_oacc_all_clauses (parser, OACC_KERNELS_CLAUSE_MASK,\n-\t\t\t\t\t\"#pragma acc kernels\", pragma_tok);\n-\n-  block = begin_omp_parallel ();\n-  save = cp_parser_begin_omp_structured_block (parser);\n-  cp_parser_statement (parser, NULL_TREE, false, NULL);\n-  cp_parser_end_omp_structured_block (parser, save);\n-  stmt = finish_oacc_kernels (clauses, block);\n-  return stmt;\n-}\n-\n /* OpenACC 2.0:\n    # pragma acc loop oacc-loop-clause[optseq] new-line\n      structured-block  */\n \n #define OACC_LOOP_CLAUSE_MASK\t\t\t\t\t\t\\\n \t( (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_COLLAPSE)\t\t\\\n-\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_REDUCTION))\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_REDUCTION) )\n \n static tree\n-cp_parser_oacc_loop (cp_parser *parser, cp_token *pragma_tok)\n+cp_parser_oacc_loop (cp_parser *parser, cp_token *pragma_tok, char *p_name,\n+\t\t     omp_clause_mask mask, tree *cclauses)\n {\n-  tree stmt, clauses, block;\n-  int save;\n+  strcat (p_name, \" loop\");\n+  mask |= OACC_LOOP_CLAUSE_MASK;\n \n-  clauses = cp_parser_oacc_all_clauses (parser, OACC_LOOP_CLAUSE_MASK,\n-\t\t\t\t\t\"#pragma acc loop\", pragma_tok);\n+  tree clauses = cp_parser_oacc_all_clauses (parser, mask, p_name, pragma_tok,\n+\t\t\t\t\t     cclauses == NULL);\n+  if (cclauses)\n+    {\n+      clauses = c_oacc_split_loop_clauses (clauses, cclauses);\n+      if (*cclauses)\n+\tfinish_omp_clauses (*cclauses, false);\n+      if (clauses)\n+\tfinish_omp_clauses (clauses, false);\n+    }\n \n-  block = begin_omp_structured_block ();\n-  save = cp_parser_begin_omp_structured_block (parser);\n-  stmt = cp_parser_omp_for_loop (parser, OACC_LOOP, clauses, NULL);\n+  tree block = begin_omp_structured_block ();\n+  int save = cp_parser_begin_omp_structured_block (parser);\n+  tree stmt = cp_parser_omp_for_loop (parser, OACC_LOOP, clauses, NULL);\n   cp_parser_end_omp_structured_block (parser, save);\n   add_stmt (finish_omp_structured_block (block));\n+\n   return stmt;\n }\n \n /* OpenACC 2.0:\n+   # pragma acc kernels oacc-kernels-clause[optseq] new-line\n+     structured-block\n+\n+   or\n+\n    # pragma acc parallel oacc-parallel-clause[optseq] new-line\n-     structured-block  */\n+     structured-block\n+*/\n+\n+#define OACC_KERNELS_CLAUSE_MASK\t\t\t\t\t\\\n+\t( (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_ASYNC)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_COPY)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_COPYIN)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_COPYOUT)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_CREATE)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_DEVICEPTR)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_IF)\t\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_PRESENT)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_PRESENT_OR_COPY)\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_PRESENT_OR_COPYIN)\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_PRESENT_OR_COPYOUT)\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_PRESENT_OR_CREATE)\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_WAIT) )\n \n #define OACC_PARALLEL_CLAUSE_MASK\t\t\t\t\t\\\n \t( (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_ASYNC)\t\t\\\n@@ -34379,23 +34374,53 @@ cp_parser_oacc_loop (cp_parser *parser, cp_token *pragma_tok)\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_PRESENT_OR_CREATE)   \\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_REDUCTION)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_VECTOR_LENGTH)       \\\n-\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_WAIT))\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_WAIT) )\n \n static tree\n-cp_parser_oacc_parallel (cp_parser *parser, cp_token *pragma_tok)\n+cp_parser_oacc_kernels_parallel (cp_parser *parser, cp_token *pragma_tok,\n+\t\t\t\t char *p_name)\n {\n-  tree stmt, clauses, block;\n-  unsigned int save;\n+  omp_clause_mask mask;\n+  enum tree_code code;\n+  switch (pragma_tok->pragma_kind)\n+    {\n+    case PRAGMA_OACC_KERNELS:\n+      strcat (p_name, \" kernels\");\n+      mask = OACC_KERNELS_CLAUSE_MASK;\n+      code = OACC_KERNELS;\n+      break;\n+    case PRAGMA_OACC_PARALLEL:\n+      strcat (p_name, \" parallel\");\n+      mask = OACC_PARALLEL_CLAUSE_MASK;\n+      code = OACC_PARALLEL;\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n \n-  clauses = cp_parser_oacc_all_clauses (parser, OACC_PARALLEL_CLAUSE_MASK,\n-\t\t\t\t\t \"#pragma acc parallel\", pragma_tok);\n+  if (cp_lexer_next_token_is (parser->lexer, CPP_NAME))\n+    {\n+      const char *p\n+\t= IDENTIFIER_POINTER (cp_lexer_peek_token (parser->lexer)->u.value);\n+      if (strcmp (p, \"loop\") == 0)\n+\t{\n+\t  cp_lexer_consume_token (parser->lexer);\n+\t  mask |= OACC_LOOP_CLAUSE_MASK;\n \n-  block = begin_omp_parallel ();\n-  save = cp_parser_begin_omp_structured_block (parser);\n+\t  tree block = begin_omp_parallel ();\n+\t  tree clauses;\n+\t  cp_parser_oacc_loop (parser, pragma_tok, p_name, mask, &clauses);\n+\t  return finish_omp_construct (code, block, clauses);\n+\t}\n+    }\n+\n+  tree clauses = cp_parser_oacc_all_clauses (parser, mask, p_name, pragma_tok);\n+\n+  tree block = begin_omp_parallel ();\n+  unsigned int save = cp_parser_begin_omp_structured_block (parser);\n   cp_parser_statement (parser, NULL_TREE, false, NULL);\n   cp_parser_end_omp_structured_block (parser, save);\n-  stmt = finish_oacc_parallel (clauses, block);\n-  return stmt;\n+  return finish_omp_construct (code, block, clauses);\n }\n \n /* OpenACC 2.0:\n@@ -35290,13 +35315,13 @@ cp_parser_omp_construct (cp_parser *parser, cp_token *pragma_tok)\n       stmt = cp_parser_oacc_enter_exit_data (parser, pragma_tok, false);\n       break;\n     case PRAGMA_OACC_KERNELS:\n-      stmt = cp_parser_oacc_kernels (parser, pragma_tok);\n+    case PRAGMA_OACC_PARALLEL:\n+      strcpy (p_name, \"#pragma acc\");\n+      stmt = cp_parser_oacc_kernels_parallel (parser, pragma_tok, p_name);\n       break;\n     case PRAGMA_OACC_LOOP:\n-      stmt = cp_parser_oacc_loop (parser, pragma_tok);\n-      break;\n-    case PRAGMA_OACC_PARALLEL:\n-      stmt = cp_parser_oacc_parallel (parser, pragma_tok);\n+      strcpy (p_name, \"#pragma acc\");\n+      stmt = cp_parser_oacc_loop (parser, pragma_tok, p_name, mask, NULL);\n       break;\n     case PRAGMA_OACC_UPDATE:\n       stmt = cp_parser_oacc_update (parser, pragma_tok);"}, {"sha": "f9e86d09b439f2a06960b9670f12ac9213c1c224", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 17, "deletions": 37, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88bae6f494dc867edd8e6257658974d629bdc53b/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88bae6f494dc867edd8e6257658974d629bdc53b/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=88bae6f494dc867edd8e6257658974d629bdc53b", "patch": "@@ -7106,69 +7106,49 @@ finish_omp_structured_block (tree block)\n   return do_poplevel (block);\n }\n \n-/* Generate OACC_DATA, with CLAUSES and BLOCK as its compound\n-   statement.  LOC is the location of the OACC_DATA.  */\n+/* Similarly, except force the retention of the BLOCK.  */\n \n tree\n-finish_oacc_data (tree clauses, tree block)\n+begin_omp_parallel (void)\n {\n-  tree stmt;\n-\n-  block = finish_omp_structured_block (block);\n-\n-  stmt = make_node (OACC_DATA);\n-  TREE_TYPE (stmt) = void_type_node;\n-  OACC_DATA_CLAUSES (stmt) = clauses;\n-  OACC_DATA_BODY (stmt) = block;\n-\n-  return add_stmt (stmt);\n+  keep_next_level (true);\n+  return begin_omp_structured_block ();\n }\n \n-/* Generate OACC_KERNELS, with CLAUSES and BLOCK as its compound\n-   statement.  LOC is the location of the OACC_KERNELS.  */\n+/* Generate OACC_DATA, with CLAUSES and BLOCK as its compound\n+   statement.  */\n \n tree\n-finish_oacc_kernels (tree clauses, tree block)\n+finish_oacc_data (tree clauses, tree block)\n {\n   tree stmt;\n \n   block = finish_omp_structured_block (block);\n \n-  stmt = make_node (OACC_KERNELS);\n+  stmt = make_node (OACC_DATA);\n   TREE_TYPE (stmt) = void_type_node;\n-  OACC_KERNELS_CLAUSES (stmt) = clauses;\n-  OACC_KERNELS_BODY (stmt) = block;\n+  OACC_DATA_CLAUSES (stmt) = clauses;\n+  OACC_DATA_BODY (stmt) = block;\n \n   return add_stmt (stmt);\n }\n \n-/* Generate OACC_PARALLEL, with CLAUSES and BLOCK as its compound\n-   statement.  LOC is the location of the OACC_PARALLEL.  */\n+/* Generate OMP construct CODE, with BODY and CLAUSES as its compound\n+   statement.  */\n \n tree\n-finish_oacc_parallel (tree clauses, tree block)\n+finish_omp_construct (enum tree_code code, tree body, tree clauses)\n {\n-  tree stmt;\n-\n-  block = finish_omp_structured_block (block);\n+  body = finish_omp_structured_block (body);\n \n-  stmt = make_node (OACC_PARALLEL);\n+  tree stmt = make_node (code);\n   TREE_TYPE (stmt) = void_type_node;\n-  OACC_PARALLEL_CLAUSES (stmt) = clauses;\n-  OACC_PARALLEL_BODY (stmt) = block;\n+  OMP_BODY (stmt) = body;\n+  OMP_CLAUSES (stmt) = clauses;\n \n   return add_stmt (stmt);\n }\n \n-/* Similarly, except force the retention of the BLOCK.  */\n-\n-tree\n-begin_omp_parallel (void)\n-{\n-  keep_next_level (true);\n-  return begin_omp_structured_block ();\n-}\n-\n tree\n finish_omp_parallel (tree clauses, tree body)\n {"}, {"sha": "def8afb4d6d6b5037331de9d8f797add361c88b6", "filename": "gcc/fortran/trans-openmp.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88bae6f494dc867edd8e6257658974d629bdc53b/gcc%2Ffortran%2Ftrans-openmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88bae6f494dc867edd8e6257658974d629bdc53b/gcc%2Ffortran%2Ftrans-openmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.c?ref=88bae6f494dc867edd8e6257658974d629bdc53b", "patch": "@@ -3463,10 +3463,6 @@ gfc_trans_oacc_combined_directive (gfc_code *code)\n     poplevel (0, 0);\n   stmt = build2_loc (input_location, construct_code, void_type_node, stmt,\n \t\t     oacc_clauses);\n-  if (code->op == EXEC_OACC_KERNELS_LOOP)\n-    OACC_KERNELS_COMBINED (stmt) = 1;\n-  else\n-    OACC_PARALLEL_COMBINED (stmt) = 1;\n   gfc_add_expr_to_block (&block, stmt);\n   return gfc_finish_block (&block);\n }"}, {"sha": "a2d71d2f95831911290d5ada5ccdafacd88ed4fa", "filename": "gcc/gimplify.c", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88bae6f494dc867edd8e6257658974d629bdc53b/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88bae6f494dc867edd8e6257658974d629bdc53b/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=88bae6f494dc867edd8e6257658974d629bdc53b", "patch": "@@ -9600,23 +9600,9 @@ gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t  ret = GS_ALL_DONE;\n \t  break;\n \n+\tcase OACC_DATA:\n \tcase OACC_KERNELS:\n-\t  if (OACC_KERNELS_COMBINED (*expr_p))\n-\t    sorry (\"directive not yet implemented\");\n-\t  else\n-\t    gimplify_omp_workshare (expr_p, pre_p);\n-\t  ret = GS_ALL_DONE;\n-\t  break;\n-\n \tcase OACC_PARALLEL:\n-\t  if (OACC_PARALLEL_COMBINED (*expr_p))\n-\t    sorry (\"directive not yet implemented\");\n-\t  else\n-\t    gimplify_omp_workshare (expr_p, pre_p);\n-\t  ret = GS_ALL_DONE;\n-\t  break;\n-\n-\tcase OACC_DATA:\n \tcase OMP_SECTIONS:\n \tcase OMP_SINGLE:\n \tcase OMP_TARGET:"}, {"sha": "e1cb93ca871d946c068c88192211fc15d82ca945", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88bae6f494dc867edd8e6257658974d629bdc53b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88bae6f494dc867edd8e6257658974d629bdc53b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=88bae6f494dc867edd8e6257658974d629bdc53b", "patch": "@@ -1,3 +1,16 @@\n+2015-10-27  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR c/64765\n+\tPR c/64880\n+\t* c-c++-common/goacc/loop-1.c: Don't skip for C++.  Don't prune\n+\tsorry message.\n+\t(PR64765): New function.\n+\t* gfortran.dg/goacc/coarray_2.f90: XFAIL.\n+\t* gfortran.dg/goacc/combined_loop.f90: Extend.  Don't prune\n+\tsorry message.\n+\t* gfortran.dg/goacc/cray.f95: Refine prune directive.\n+\t* gfortran.dg/goacc/parameter.f95: Likewise.\n+\n 2015-10-26  Louis Krupp  <louis.krupp@zoho.com>\n \n \tPR fortran/66056"}, {"sha": "4cf5429c9bbf41454c33aaf1ed5896377e0af264", "filename": "gcc/testsuite/c-c++-common/goacc/loop-1.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88bae6f494dc867edd8e6257658974d629bdc53b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Floop-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88bae6f494dc867edd8e6257658974d629bdc53b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Floop-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Floop-1.c?ref=88bae6f494dc867edd8e6257658974d629bdc53b", "patch": "@@ -1,5 +1,3 @@\n-/* { dg-skip-if \"not yet\" { c++ } } */\n-\n int test1()\n {\n   int i, j, k, b[10];\n@@ -69,4 +67,10 @@ int test1()\n     }\n   return 0;\n }\n-/* { dg-prune-output \"sorry, unimplemented: directive not yet implemented\" } */\n+\n+// PR64765\n+void PR64765(float *f, double *r) {\n+  int i;\n+  #pragma acc kernels loop create(f) copy(r)\n+  for(i = 64; i < 76; i += 5) {}\n+}"}, {"sha": "f9cf9ac6ca033fa2a18b7575e651e1a50fb27041", "filename": "gcc/testsuite/gfortran.dg/goacc/coarray_2.f90", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88bae6f494dc867edd8e6257658974d629bdc53b/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fcoarray_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88bae6f494dc867edd8e6257658974d629bdc53b/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fcoarray_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fcoarray_2.f90?ref=88bae6f494dc867edd8e6257658974d629bdc53b", "patch": "@@ -2,6 +2,7 @@\n ! { dg-additional-options \"-fcoarray=lib\" }\n !\n ! PR fortran/63861\n+! { dg-xfail-if \"<http://gcc.gnu.org/PR63861>\" { *-*-* } }\n \n module test\n contains"}, {"sha": "abb10f930670f3d2bbe57b04abe21417b226d1a5", "filename": "gcc/testsuite/gfortran.dg/goacc/combined_loop.f90", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88bae6f494dc867edd8e6257658974d629bdc53b/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fcombined_loop.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88bae6f494dc867edd8e6257658974d629bdc53b/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fcombined_loop.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fcombined_loop.f90?ref=88bae6f494dc867edd8e6257658974d629bdc53b", "patch": "@@ -6,7 +6,14 @@ subroutine oacc1()\n   implicit none\n   integer :: i\n   integer  :: a\n-  !$acc parallel loop reduction(+:a) ! { dg-excess-errors \"sorry, unimplemented: directive not yet implemented\" }\n+  !$acc parallel loop reduction(+:a)\n   do i = 1,5\n   enddo\n+  !$acc end parallel loop\n+  !$acc kernels loop collapse(2)\n+  do i = 2,6\n+     do a = 3,5\n+     enddo\n+  enddo\n+  !$acc end kernels loop\n end subroutine oacc1"}, {"sha": "52789fe2998dc7db3efc3f6a39c690c8c5f555f7", "filename": "gcc/testsuite/gfortran.dg/goacc/cray.f95", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88bae6f494dc867edd8e6257658974d629bdc53b/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fcray.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88bae6f494dc867edd8e6257658974d629bdc53b/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fcray.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fcray.f95?ref=88bae6f494dc867edd8e6257658974d629bdc53b", "patch": "@@ -53,4 +53,4 @@ subroutine oacc1\n     !$acc update self (ptr)\n   end subroutine oacc1\n end module test\n-! { dg-prune-output \"unimplemented\" }\n+! { dg-prune-output \"ACC cache unimplemented\" }"}, {"sha": "454924aed3d1f091bc8f098a86c595f58d2eedec", "filename": "gcc/testsuite/gfortran.dg/goacc/parameter.f95", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88bae6f494dc867edd8e6257658974d629bdc53b/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fparameter.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88bae6f494dc867edd8e6257658974d629bdc53b/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fparameter.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fparameter.f95?ref=88bae6f494dc867edd8e6257658974d629bdc53b", "patch": "@@ -29,4 +29,4 @@ subroutine oacc1\n     !$acc update self (a) ! { dg-error \"not a variable\" }\n   end subroutine oacc1\n end module test\n-! { dg-prune-output \"unimplemented\" }\n+! { dg-prune-output \"ACC cache unimplemented\" }"}, {"sha": "b1f76d52c3376c910d8246c39aec3cd48c0f9ea9", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88bae6f494dc867edd8e6257658974d629bdc53b/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88bae6f494dc867edd8e6257658974d629bdc53b/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=88bae6f494dc867edd8e6257658974d629bdc53b", "patch": "@@ -2676,13 +2676,11 @@ dump_generic_node (pretty_printer *pp, tree node, int spc, int flags,\n \n     case OACC_PARALLEL:\n       pp_string (pp, \"#pragma acc parallel\");\n-      dump_omp_clauses (pp, OACC_PARALLEL_CLAUSES (node), spc, flags);\n-      goto dump_omp_body;\n+      goto dump_omp_clauses_body;\n \n     case OACC_KERNELS:\n       pp_string (pp, \"#pragma acc kernels\");\n-      dump_omp_clauses (pp, OACC_KERNELS_CLAUSES (node), spc, flags);\n-      goto dump_omp_body;\n+      goto dump_omp_clauses_body;\n \n     case OACC_DATA:\n       pp_string (pp, \"#pragma acc data\");\n@@ -2722,6 +2720,11 @@ dump_generic_node (pretty_printer *pp, tree node, int spc, int flags,\n     case OMP_PARALLEL:\n       pp_string (pp, \"#pragma omp parallel\");\n       dump_omp_clauses (pp, OMP_PARALLEL_CLAUSES (node), spc, flags);\n+      goto dump_omp_body;\n+\n+    dump_omp_clauses_body:\n+      dump_omp_clauses (pp, OMP_CLAUSES (node), spc, flags);\n+      goto dump_omp_body;\n \n     dump_omp_body:\n       if (!(flags & TDF_SLIM) && OMP_BODY (node))"}, {"sha": "fc7490a48d89374fda962f90f8aed3a59d3fe6d4", "filename": "gcc/tree.def", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88bae6f494dc867edd8e6257658974d629bdc53b/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88bae6f494dc867edd8e6257658974d629bdc53b/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=88bae6f494dc867edd8e6257658974d629bdc53b", "patch": "@@ -1047,14 +1047,14 @@ DEFTREECODE (MEM_REF, \"mem_ref\", tcc_reference, 2)\n    not change the ordering of these codes.  */\n \n /* OpenACC - #pragma acc parallel [clause1 ... clauseN]\n-   Operand 0: OACC_PARALLEL_BODY: Code to be executed in parallel.\n-   Operand 1: OACC_PARALLEL_CLAUSES: List of clauses.  */\n+   Operand 0: OMP_BODY: Code to be executed in parallel.\n+   Operand 1: OMP_CLAUSES: List of clauses.  */\n \n DEFTREECODE (OACC_PARALLEL, \"oacc_parallel\", tcc_statement, 2)\n \n /* OpenACC - #pragma acc kernels [clause1 ... clauseN]\n-   Operand 0: OACC_KERNELS_BODY: Sequence of kernels.\n-   Operand 1: OACC_KERNELS_CLAUSES: List of clauses.  */\n+   Operand 0: OMP_BODY: Sequence of kernels.\n+   Operand 1: OMP_CLAUSES: List of clauses.  */\n \n DEFTREECODE (OACC_KERNELS, \"oacc_kernels\", tcc_statement, 2)\n "}, {"sha": "65c3117b5dd82e699e70bcb4a95aac0b84769f55", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88bae6f494dc867edd8e6257658974d629bdc53b/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88bae6f494dc867edd8e6257658974d629bdc53b/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=88bae6f494dc867edd8e6257658974d629bdc53b", "patch": "@@ -1,4 +1,3 @@\n-\n /* Definitions for the ubiquitous 'tree' type for GNU compilers.\n    Copyright (C) 1989-2015 Free Software Foundation, Inc.\n \n@@ -1218,16 +1217,6 @@ extern void protected_set_expr_location (tree, location_t);\n #define OMP_STANDALONE_CLAUSES(NODE) \\\n   TREE_OPERAND (TREE_RANGE_CHECK (NODE, OACC_CACHE, OMP_TARGET_EXIT_DATA), 0)\n \n-#define OACC_PARALLEL_BODY(NODE) \\\n-  TREE_OPERAND (OACC_PARALLEL_CHECK (NODE), 0)\n-#define OACC_PARALLEL_CLAUSES(NODE) \\\n-  TREE_OPERAND (OACC_PARALLEL_CHECK (NODE), 1)\n-\n-#define OACC_KERNELS_BODY(NODE) \\\n-  TREE_OPERAND (OACC_KERNELS_CHECK(NODE), 0)\n-#define OACC_KERNELS_CLAUSES(NODE) \\\n-  TREE_OPERAND (OACC_KERNELS_CHECK(NODE), 1)\n-\n #define OACC_DATA_BODY(NODE) \\\n   TREE_OPERAND (OACC_DATA_CHECK (NODE), 0)\n #define OACC_DATA_CLAUSES(NODE) \\\n@@ -1332,15 +1321,6 @@ extern void protected_set_expr_location (tree, location_t);\n #define OMP_SECTION_LAST(NODE) \\\n   (OMP_SECTION_CHECK (NODE)->base.private_flag)\n \n-/* True on an OACC_KERNELS statement if is represents combined kernels loop\n-   directive.  */\n-#define OACC_KERNELS_COMBINED(NODE) \\\n-  (OACC_KERNELS_CHECK (NODE)->base.private_flag)\n-\n-/* Like OACC_KERNELS_COMBINED, but for parallel loop directive.  */\n-#define OACC_PARALLEL_COMBINED(NODE) \\\n-  (OACC_PARALLEL_CHECK (NODE)->base.private_flag)\n-\n /* True on an OMP_PARALLEL statement if it represents an explicit\n    combined parallel work-sharing constructs.  */\n #define OMP_PARALLEL_COMBINED(NODE) \\"}, {"sha": "ca34af8203c4b5170913bb1f5a70a58d90d8ffcf", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88bae6f494dc867edd8e6257658974d629bdc53b/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88bae6f494dc867edd8e6257658974d629bdc53b/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=88bae6f494dc867edd8e6257658974d629bdc53b", "patch": "@@ -1,3 +1,8 @@\n+2015-10-27  James Norris  <jnorris@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-c-c++-common/combdir-1.c: New file.\n+\t* testsuite/libgomp.oacc-fortran/combdir-1.f90: Likewise.\n+\n 2015-10-26  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* testsuite/libgomp.oacc-c-c++-common/abort-1.c: Print to stderr."}, {"sha": "a7def920b947f0f24a7a6635752e1105d476891a", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/combdir-1.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88bae6f494dc867edd8e6257658974d629bdc53b/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fcombdir-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88bae6f494dc867edd8e6257658974d629bdc53b/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fcombdir-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fcombdir-1.c?ref=88bae6f494dc867edd8e6257658974d629bdc53b", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+\n+#include <stdlib.h>\n+\n+int\n+main (int argc, char **argv)\n+{\n+  const int N = 32;\n+  float a[N], b[N];\n+  int i;\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      a[i] = 1.0;\n+      b[i] = 0.0;\n+    }\n+\n+#pragma acc parallel loop copy (a[0:N]) copy (b[0:N])\n+  for (i = 0; i < N; i++)\n+    {\n+      b[i] = 2.0;\n+      a[i] = a[i] + b[i];\n+    }\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      if (a[i] != 3.0)\n+\tabort ();\n+\n+      if (b[i] != 2.0)\n+\tabort ();\n+    }\n+\n+#pragma acc kernels loop copy (a[0:N]) copy (b[0:N])\n+  for (i = 0; i < N; i++)\n+    {\n+      b[i] = 3.0;\n+      a[i] = a[i] + b[i];\n+    }\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      if (a[i] != 6.0)\n+\tabort ();\n+\n+      if (b[i] != 3.0)\n+\tabort ();\n+    }\n+\n+  return 0;\n+\n+} "}, {"sha": "0cd8a670abb4a5ba9b104ebd5aaead27a65b6e2a", "filename": "libgomp/testsuite/libgomp.oacc-fortran/combdir-1.f90", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88bae6f494dc867edd8e6257658974d629bdc53b/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fcombdir-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88bae6f494dc867edd8e6257658974d629bdc53b/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fcombdir-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fcombdir-1.f90?ref=88bae6f494dc867edd8e6257658974d629bdc53b", "patch": "@@ -0,0 +1,37 @@\n+! { dg-do run }\n+\n+program main\n+  integer, parameter :: n = 32\n+  real :: a(n), b(n);\n+  integer :: i\n+\n+  do i = 1, n\n+    a(i) = 1.0\n+    b(i) = 0.0\n+  end do\n+\n+  !$acc parallel loop copy (a(1:n)) copy (b(1:n))\n+  do i = 1, n\n+    b(i) = 2.0\n+    a(i) = a(i) + b(i)\n+  end do\n+\n+  do i = 1, n\n+    if (a(i) .ne. 3.0) call abort\n+\n+    if (b(i) .ne. 2.0) call abort\n+  end do\n+\n+  !$acc kernels loop copy (a(1:n)) copy (b(1:n))\n+  do i = 1, n\n+    b(i) = 3.0;\n+    a(i) = a(i) + b(i)\n+  end do\n+\n+  do i = 1, n\n+    if (a(i) .ne. 6.0) call abort\n+\n+    if (b(i) .ne. 3.0) call abort\n+  end do\n+\n+end program main"}]}