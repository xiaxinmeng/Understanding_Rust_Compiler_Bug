{"sha": "96c35892bea68ac180f19079cf08fea3b6cda0a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTZjMzU4OTJiZWE2OGFjMTgwZjE5MDc5Y2YwOGZlYTNiNmNkYTBhOA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2018-12-01T17:56:27Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2018-12-01T17:56:27Z"}, "message": "Implement P0634R3, Down with typename!\n\n\t* parser.c (CP_PARSER_FLAGS_TYPENAME_OPTIONAL): New enumerator.\n\t(cp_parser_type_name): Remove declaration.\n\t(cp_parser_postfix_expression): Pass CP_PARSER_FLAGS_TYPENAME_OPTIONAL\n\tto cp_parser_type_id.\n\t(cp_parser_new_type_id): Pass CP_PARSER_FLAGS_TYPENAME_OPTIONAL to\n\tcp_parser_type_specifier_seq.\n\t(cp_parser_lambda_declarator_opt): Pass\n\tCP_PARSER_FLAGS_TYPENAME_OPTIONAL to\n\tcp_parser_parameter_declaration_clause.\n\t(cp_parser_condition): Pass CP_PARSER_FLAGS_NONE to\n\tcp_parser_declarator.\n\t(cp_parser_simple_declaration): Pass CP_PARSER_FLAGS_NONE to\n\tcp_parser_init_declarator.\n\t(cp_parser_conversion_type_id): Pass CP_PARSER_FLAGS_NONE to\n\tcp_parser_type_specifier_seq.\n\t(cp_parser_default_type_template_argument): Pass\n\tCP_PARSER_FLAGS_TYPENAME_OPTIONAL to cp_parser_type_id.\n\t(cp_parser_template_parameter): Pass CP_PARSER_FLAGS_TYPENAME_OPTIONAL\n\tto cp_parser_parameter_declaration.\n\t(cp_parser_explicit_instantiation): Pass CP_PARSER_FLAGS_NONE to\n\tcp_parser_declarator.\n\t(cp_parser_simple_type_specifier): Adjust call to cp_parser_type_name\n\tto relay if we should treat the typename keyword as optional.  Maybe\n\tcall cp_parser_make_typename_type is parsing a template-id and it's\n\tnot a TYPE_DECL.\n\t(cp_parser_type_name): Remove unused function.\n\t(cp_parser_enum_specifier): Pass to CP_PARSER_FLAGS_NONE\n\tcp_parser_type_specifier_seq.\n\t(cp_parser_alias_declaration): Pass CP_PARSER_FLAGS_TYPENAME_OPTIONAL\n\tto cp_parser_type_id.\n\t(cp_parser_init_declarator): New parameter.  Pass it down to\n\tcp_parser_declarator.\n\t(cp_parser_declarator): New parameter.  Pass CP_PARSER_FLAGS_NONE to\n\tcp_parser_declarator.  Pass the new parameter to\n\tcp_parser_direct_declarator.\n\t(cp_parser_direct_declarator): New parameter.  Pass it to\n\tcp_parser_parameter_declaration_clause and cp_parser_declarator.\n\t(cp_parser_declarator_id):\n\t(cp_parser_type_id_1): New parameter.  Pass it to\n\tcp_parser_type_specifier_seq.  Adjust call to cp_parser_declarator.\n\t(cp_parser_type_id): New parameter.  Pass it to cp_parser_type_id_1.\n\t(cp_parser_template_type_arg): Pass CP_PARSER_FLAGS_NONE to\n\tcp_parser_type_id_1.\n\t(cp_parser_trailing_type_id): Pass CP_PARSER_FLAGS_TYPENAME_OPTIONAL\n\tto cp_parser_type_id_1.\n\t(cp_parser_type_specifier_seq): New parameter.\n\t(function_being_declared_is_template_p):\n\t(cp_parser_parameter_declaration_clause): New parameter.  Pass it to\n\tcp_parser_parameter_declaration_list.\n\t(cp_parser_parameter_declaration_list): New parameter.  Pass it to\n\tcp_parser_parameter_declaration.\n\t(cp_parser_parameter_declaration): New parameter.  Pass it to\n\tcp_parser_decl_specifier_seq.  Pass CP_PARSER_FLAGS_NONE to\n\tcp_parser_declarator.\n\t(cp_parser_member_declaration): Adjust call to\n\tcp_parser_decl_specifier_seq to also include\n\tCP_PARSER_FLAGS_TYPENAME_OPTIONAL.  Pass\n\tCP_PARSER_FLAGS_TYPENAME_OPTIONAL to cp_parser_declarator.\n\t(cp_parser_exception_declaration): Pass CP_PARSER_FLAGS_NONE to\n\tcp_parser_type_specifier_seq and cp_parser_declarator.\n\t(cp_parser_requirement_parameter_list): Pass CP_PARSER_FLAGS_NONE to\n\tcp_parser_parameter_declaration_clause.\n\t(cp_parser_constructor_declarator_p): Resolve the TYPENAME_TYPE.\n\t(cp_parser_single_declaration): Pass CP_PARSER_FLAGS_TYPENAME_OPTIONAL\n\tto cp_parser_decl_specifier_seq and cp_parser_init_declarator.\n\t(cp_parser_cache_defarg): Pass CP_PARSER_FLAGS_NONE to\n\tcp_parser_declarator and cp_parser_parameter_declaration_list.\n\t(cp_parser_objc_method_tail_params_opt): Pass CP_PARSER_FLAGS_NONE to\n\tcp_parser_parameter_declaration.\n\t(cp_parser_objc_class_ivars): Pass CP_PARSER_FLAGS_NONE to\n\tcp_parser_declarator.\n\t(cp_parser_objc_try_catch_finally_statement): Pass CP_PARSER_FLAGS_NONE\n\tto cp_parser_parameter_declaration\n\t(cp_parser_objc_struct_declaration): Pass CP_PARSER_FLAGS_NONE to\n\tcp_parser_declarator.\n\t(cp_parser_omp_for_loop_init): Pass CP_PARSER_FLAGS_NONE to\n\tcp_parser_declarator and cp_parser_type_specifier_seq.\n\n\t* g++.dg/cpp0x/alias-decl-43.C: Adjust dg-error.\n\t* g++.dg/cpp0x/decltype67.C: Only expect error in c++17_down.\n\t* g++.dg/cpp1z/typename1.C: New test.\n\t* g++.dg/cpp2a/typename1.C: New test.\n\t* g++.dg/cpp2a/typename10.C: New test.\n\t* g++.dg/cpp2a/typename11.C: New test.\n\t* g++.dg/cpp2a/typename2.C: New test.\n\t* g++.dg/cpp2a/typename3.C: New test.\n\t* g++.dg/cpp2a/typename4.C: New test.\n\t* g++.dg/cpp2a/typename5.C: New test.\n\t* g++.dg/cpp2a/typename6.C: New test.\n\t* g++.dg/cpp2a/typename7.C: New test.\n\t* g++.dg/cpp2a/typename8.C: New test.\n\t* g++.dg/cpp2a/typename9.C: New test.\n\t* g++.dg/diagnostic/missing-typename.C: Only run the test in\n\tc++17_down.\n\t* g++.dg/other/crash-9.C: Add template disambiguator.\n\t* g++.dg/other/nontype-1.C: Only expect error in c++17_down.\n\t* g++.dg/parse/crash13.C: Likewise.\n\t* g++.dg/parse/error36.C: Likewise.\n\t* g++.dg/parse/no-typename1.C: Likewise.\n\t* g++.dg/parse/typedef2.C: Likewise.\n\t* g++.dg/parse/typename11.C: Likewise.\n\t* g++.dg/template/crash48.C: Adjust dg-error.\n\t* g++.dg/template/dependent-name5.C: Only expect error in c++17_down.\n\tAdd dg-error.\n\t* g++.dg/template/error29.C: Only expect error in c++17_down.\n\t* g++.dg/template/nested5.C: Add template disambiguator.\n\t* g++.dg/template/pr84789.C: Only expect error in c++17_down.\n\t* g++.dg/template/static30.C: Add dg-error.\n\t* g++.dg/template/typedef6.C: Adjust dg-error.\n\t* g++.dg/template/typename3.C: Only expect error in c++17_down.\n\nFrom-SVN: r266710", "tree": {"sha": "62aac676207aaf1271e15e4b8bf28f25fd074abe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62aac676207aaf1271e15e4b8bf28f25fd074abe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96c35892bea68ac180f19079cf08fea3b6cda0a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96c35892bea68ac180f19079cf08fea3b6cda0a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96c35892bea68ac180f19079cf08fea3b6cda0a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96c35892bea68ac180f19079cf08fea3b6cda0a8/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e770ab191ca90d4d9265b5c39af456f7931b9cd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e770ab191ca90d4d9265b5c39af456f7931b9cd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e770ab191ca90d4d9265b5c39af456f7931b9cd6"}], "stats": {"total": 873, "additions": 789, "deletions": 84}, "files": [{"sha": "922388499030000f7e3dea89e6793c11ac51276f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96c35892bea68ac180f19079cf08fea3b6cda0a8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96c35892bea68ac180f19079cf08fea3b6cda0a8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=96c35892bea68ac180f19079cf08fea3b6cda0a8", "patch": "@@ -1,3 +1,84 @@\n+2018-12-01  Marek Polacek  <polacek@redhat.com>\n+\n+\tImplement P0634R3, Down with typename!\n+\t* parser.c (CP_PARSER_FLAGS_TYPENAME_OPTIONAL): New enumerator.\n+\t(cp_parser_type_name): Remove declaration.\n+\t(cp_parser_postfix_expression): Pass CP_PARSER_FLAGS_TYPENAME_OPTIONAL\n+\tto cp_parser_type_id.\n+\t(cp_parser_new_type_id): Pass CP_PARSER_FLAGS_TYPENAME_OPTIONAL to\n+\tcp_parser_type_specifier_seq.\n+\t(cp_parser_lambda_declarator_opt): Pass\n+\tCP_PARSER_FLAGS_TYPENAME_OPTIONAL to\n+\tcp_parser_parameter_declaration_clause.\n+\t(cp_parser_condition): Pass CP_PARSER_FLAGS_NONE to\n+\tcp_parser_declarator.\n+\t(cp_parser_simple_declaration): Pass CP_PARSER_FLAGS_NONE to\n+\tcp_parser_init_declarator.\n+\t(cp_parser_conversion_type_id): Pass CP_PARSER_FLAGS_NONE to\n+\tcp_parser_type_specifier_seq.\n+\t(cp_parser_default_type_template_argument): Pass\n+\tCP_PARSER_FLAGS_TYPENAME_OPTIONAL to cp_parser_type_id.\n+\t(cp_parser_template_parameter): Pass CP_PARSER_FLAGS_TYPENAME_OPTIONAL\n+\tto cp_parser_parameter_declaration.\n+\t(cp_parser_explicit_instantiation): Pass CP_PARSER_FLAGS_NONE to\n+\tcp_parser_declarator.\n+\t(cp_parser_simple_type_specifier): Adjust call to cp_parser_type_name\n+\tto relay if we should treat the typename keyword as optional.  Maybe\n+\tcall cp_parser_make_typename_type is parsing a template-id and it's\n+\tnot a TYPE_DECL.\n+\t(cp_parser_type_name): Remove unused function.\n+\t(cp_parser_enum_specifier): Pass to CP_PARSER_FLAGS_NONE\n+\tcp_parser_type_specifier_seq.\n+\t(cp_parser_alias_declaration): Pass CP_PARSER_FLAGS_TYPENAME_OPTIONAL\n+\tto cp_parser_type_id.\n+\t(cp_parser_init_declarator): New parameter.  Pass it down to\n+\tcp_parser_declarator.\n+\t(cp_parser_declarator): New parameter.  Pass CP_PARSER_FLAGS_NONE to\n+\tcp_parser_declarator.  Pass the new parameter to\n+\tcp_parser_direct_declarator.\n+\t(cp_parser_direct_declarator): New parameter.  Pass it to\n+\tcp_parser_parameter_declaration_clause and cp_parser_declarator.\n+\t(cp_parser_declarator_id):\n+\t(cp_parser_type_id_1): New parameter.  Pass it to\n+\tcp_parser_type_specifier_seq.  Adjust call to cp_parser_declarator.\n+\t(cp_parser_type_id): New parameter.  Pass it to cp_parser_type_id_1.\n+\t(cp_parser_template_type_arg): Pass CP_PARSER_FLAGS_NONE to\n+\tcp_parser_type_id_1.\n+\t(cp_parser_trailing_type_id): Pass CP_PARSER_FLAGS_TYPENAME_OPTIONAL\n+\tto cp_parser_type_id_1.\n+\t(cp_parser_type_specifier_seq): New parameter.\n+\t(function_being_declared_is_template_p):\n+\t(cp_parser_parameter_declaration_clause): New parameter.  Pass it to\n+\tcp_parser_parameter_declaration_list.\n+\t(cp_parser_parameter_declaration_list): New parameter.  Pass it to\n+\tcp_parser_parameter_declaration.\n+\t(cp_parser_parameter_declaration): New parameter.  Pass it to\n+\tcp_parser_decl_specifier_seq.  Pass CP_PARSER_FLAGS_NONE to\n+\tcp_parser_declarator.\n+\t(cp_parser_member_declaration): Adjust call to\n+\tcp_parser_decl_specifier_seq to also include\n+\tCP_PARSER_FLAGS_TYPENAME_OPTIONAL.  Pass\n+\tCP_PARSER_FLAGS_TYPENAME_OPTIONAL to cp_parser_declarator.\n+\t(cp_parser_exception_declaration): Pass CP_PARSER_FLAGS_NONE to\n+\tcp_parser_type_specifier_seq and cp_parser_declarator.\n+\t(cp_parser_requirement_parameter_list): Pass CP_PARSER_FLAGS_NONE to\n+\tcp_parser_parameter_declaration_clause.\n+\t(cp_parser_constructor_declarator_p): Resolve the TYPENAME_TYPE.\n+\t(cp_parser_single_declaration): Pass CP_PARSER_FLAGS_TYPENAME_OPTIONAL\n+\tto cp_parser_decl_specifier_seq and cp_parser_init_declarator.\n+\t(cp_parser_cache_defarg): Pass CP_PARSER_FLAGS_NONE to\n+\tcp_parser_declarator and cp_parser_parameter_declaration_list.\n+\t(cp_parser_objc_method_tail_params_opt): Pass CP_PARSER_FLAGS_NONE to\n+\tcp_parser_parameter_declaration.\n+\t(cp_parser_objc_class_ivars): Pass CP_PARSER_FLAGS_NONE to\n+\tcp_parser_declarator.\n+\t(cp_parser_objc_try_catch_finally_statement): Pass CP_PARSER_FLAGS_NONE\n+\tto cp_parser_parameter_declaration\n+\t(cp_parser_objc_struct_declaration): Pass CP_PARSER_FLAGS_NONE to\n+\tcp_parser_declarator.\n+\t(cp_parser_omp_for_loop_init): Pass CP_PARSER_FLAGS_NONE to\n+\tcp_parser_declarator and cp_parser_type_specifier_seq.\n+\n 2018-11-30  David Malcolm  <dmalcolm@redhat.com>\n \n \t* typeck2.c: Include \"gcc-rich-location.h\"."}, {"sha": "e271e87a707991f062531a6ff464ca9efa2f1c66", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 147, "deletions": 60, "changes": 207, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96c35892bea68ac180f19079cf08fea3b6cda0a8/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96c35892bea68ac180f19079cf08fea3b6cda0a8/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=96c35892bea68ac180f19079cf08fea3b6cda0a8", "patch": "@@ -1791,7 +1791,9 @@ enum\n      constexpr.  */\n   CP_PARSER_FLAGS_ONLY_TYPE_OR_CONSTEXPR = 0x8,\n   /* When parsing a decl-specifier-seq, only allow mutable or constexpr.  */\n-  CP_PARSER_FLAGS_ONLY_MUTABLE_OR_CONSTEXPR = 0x10\n+  CP_PARSER_FLAGS_ONLY_MUTABLE_OR_CONSTEXPR = 0x10,\n+  /* When parsing a decl-specifier-seq, allow missing typename.  */\n+  CP_PARSER_FLAGS_TYPENAME_OPTIONAL = 0x20\n };\n \n /* This type is used for parameters and variables which hold\n@@ -2156,8 +2158,6 @@ static tree cp_parser_simple_type_specifier\n   (cp_parser *, cp_decl_specifier_seq *, cp_parser_flags);\n static tree cp_parser_type_name\n   (cp_parser *, bool);\n-static tree cp_parser_type_name\n-  (cp_parser *);\n static tree cp_parser_nonclass_name \n   (cp_parser* parser);\n static tree cp_parser_elaborated_type_specifier\n@@ -2198,12 +2198,14 @@ static tree cp_parser_decomposition_declaration\n /* Declarators [gram.dcl.decl] */\n \n static tree cp_parser_init_declarator\n-  (cp_parser *, cp_decl_specifier_seq *, vec<deferred_access_check, va_gc> *,\n-   bool, bool, int, bool *, tree *, location_t *, tree *);\n+  (cp_parser *, cp_parser_flags, cp_decl_specifier_seq *,\n+   vec<deferred_access_check, va_gc> *, bool, bool, int, bool *, tree *,\n+   location_t *, tree *);\n static cp_declarator *cp_parser_declarator\n-  (cp_parser *, cp_parser_declarator_kind, int *, bool *, bool, bool);\n+  (cp_parser *, cp_parser_declarator_kind, cp_parser_flags, int *, bool *,\n+   bool, bool);\n static cp_declarator *cp_parser_direct_declarator\n-  (cp_parser *, cp_parser_declarator_kind, int *, bool, bool);\n+  (cp_parser *, cp_parser_declarator_kind, cp_parser_flags, int *, bool, bool);\n static enum tree_code cp_parser_ptr_operator\n   (cp_parser *, tree *, cp_cv_quals *, tree *);\n static cp_cv_quals cp_parser_cv_qualifier_seq_opt\n@@ -2219,20 +2221,20 @@ static tree cp_parser_late_return_type_opt\n static tree cp_parser_declarator_id\n   (cp_parser *, bool);\n static tree cp_parser_type_id\n-  (cp_parser *, location_t * = NULL);\n+  (cp_parser *, cp_parser_flags = CP_PARSER_FLAGS_NONE, location_t * = NULL);\n static tree cp_parser_template_type_arg\n   (cp_parser *);\n static tree cp_parser_trailing_type_id (cp_parser *);\n static tree cp_parser_type_id_1\n-  (cp_parser *, bool, bool, location_t *);\n+  (cp_parser *, cp_parser_flags, bool, bool, location_t *);\n static void cp_parser_type_specifier_seq\n-  (cp_parser *, bool, bool, cp_decl_specifier_seq *);\n+  (cp_parser *, cp_parser_flags, bool, bool, cp_decl_specifier_seq *);\n static tree cp_parser_parameter_declaration_clause\n-  (cp_parser *);\n+  (cp_parser *, cp_parser_flags);\n static tree cp_parser_parameter_declaration_list\n-  (cp_parser *);\n+  (cp_parser *, cp_parser_flags);\n static cp_parameter_declarator *cp_parser_parameter_declaration\n-  (cp_parser *, bool, bool *);\n+  (cp_parser *, cp_parser_flags, bool, bool *);\n static tree cp_parser_default_argument \n   (cp_parser *, bool);\n static void cp_parser_function_body\n@@ -6789,7 +6791,8 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p, bool cast_p,\n \t/* Parse the type to which we are casting.  */\n \tsaved_in_type_id_in_expr_p = parser->in_type_id_in_expr_p;\n \tparser->in_type_id_in_expr_p = true;\n-\ttype = cp_parser_type_id (parser);\n+\ttype = cp_parser_type_id (parser, CP_PARSER_FLAGS_TYPENAME_OPTIONAL,\n+\t\t\t\t  NULL);\n \tparser->in_type_id_in_expr_p = saved_in_type_id_in_expr_p;\n \t/* Look for the closing `>'.  */\n \tcp_parser_require (parser, CPP_GREATER, RT_GREATER);\n@@ -8710,7 +8713,8 @@ cp_parser_new_type_id (cp_parser* parser, tree *nelts)\n   parser->type_definition_forbidden_message\n     = G_(\"types may not be defined in a new-type-id\");\n   /* Parse the type-specifier-seq.  */\n-  cp_parser_type_specifier_seq (parser, /*is_declaration=*/false,\n+  cp_parser_type_specifier_seq (parser, CP_PARSER_FLAGS_TYPENAME_OPTIONAL,\n+\t\t\t\t/*is_declaration=*/false,\n \t\t\t\t/*is_trailing_return=*/false,\n \t\t\t\t&type_specifier_seq);\n   /* Restore the old message.  */\n@@ -10727,7 +10731,9 @@ cp_parser_lambda_declarator_opt (cp_parser* parser, tree lambda_expr)\n       begin_scope (sk_function_parms, /*entity=*/NULL_TREE);\n \n       /* Parse parameters.  */\n-      param_list = cp_parser_parameter_declaration_clause (parser);\n+      param_list\n+\t= cp_parser_parameter_declaration_clause\n+\t    (parser, CP_PARSER_FLAGS_TYPENAME_OPTIONAL);\n \n       /* Default arguments shall not be specified in the\n \t parameter-declaration-clause of a lambda-declarator.  */\n@@ -11913,6 +11919,7 @@ cp_parser_condition (cp_parser* parser)\n \n       /* Parse the declarator.  */\n       declarator = cp_parser_declarator (parser, CP_PARSER_DECLARATOR_NAMED,\n+\t\t\t\t\t CP_PARSER_FLAGS_NONE,\n \t\t\t\t\t /*ctor_dtor_or_conv_p=*/NULL,\n \t\t\t\t\t /*parenthesized_p=*/NULL,\n \t\t\t\t\t /*member_p=*/false,\n@@ -13387,7 +13394,9 @@ cp_parser_simple_declaration (cp_parser* parser,\n \tsaw_declarator = true;\n \n       /* Parse the init-declarator.  */\n-      decl = cp_parser_init_declarator (parser, &decl_specifiers,\n+      decl = cp_parser_init_declarator (parser,\n+\t\t\t\t\tCP_PARSER_FLAGS_NONE,\n+\t\t\t\t\t&decl_specifiers,\n \t\t\t\t\t/*checks=*/NULL,\n \t\t\t\t\tfunction_definition_allowed_p,\n \t\t\t\t\t/*member_p=*/false,\n@@ -14653,7 +14662,8 @@ cp_parser_conversion_type_id (cp_parser* parser)\n     = G_(\"types may not be defined in a conversion-type-id\");\n \n   /* Parse the type-specifiers.  */\n-  cp_parser_type_specifier_seq (parser, /*is_declaration=*/false,\n+  cp_parser_type_specifier_seq (parser, CP_PARSER_FLAGS_NONE,\n+\t\t\t\t/*is_declaration=*/false,\n \t\t\t\t/*is_trailing_return=*/false,\n \t\t\t\t&type_specifiers);\n \n@@ -15742,7 +15752,9 @@ cp_parser_default_type_template_argument (cp_parser *parser)\n \n   /* Parse the default-argument.  */\n   push_deferring_access_checks (dk_no_deferred);\n-  tree default_argument = cp_parser_type_id (parser);\n+  tree default_argument = cp_parser_type_id (parser,\n+\t\t\t\t\t     CP_PARSER_FLAGS_TYPENAME_OPTIONAL,\n+\t\t\t\t\t     NULL);\n   pop_deferring_access_checks ();\n \n   if (flag_concepts && type_uses_auto (default_argument))\n@@ -15869,7 +15881,9 @@ cp_parser_template_parameter (cp_parser* parser, bool *is_non_type,\n      of the template parameter-list rather than a greater-than\n      operator.  */\n   parameter_declarator\n-     = cp_parser_parameter_declaration (parser, /*template_parm_p=*/true,\n+     = cp_parser_parameter_declaration (parser,\n+\t\t\t\t\tCP_PARSER_FLAGS_TYPENAME_OPTIONAL,\n+\t\t\t\t\t/*template_parm_p=*/true,\n \t\t\t\t\t/*parenthesized_p=*/NULL);\n \n   if (!parameter_declarator)\n@@ -17016,6 +17030,7 @@ cp_parser_explicit_instantiation (cp_parser* parser)\n       /* Parse the declarator.  */\n       declarator\n \t= cp_parser_declarator (parser, CP_PARSER_DECLARATOR_NAMED,\n+\t\t\t\tCP_PARSER_FLAGS_NONE,\n \t\t\t\t/*ctor_dtor_or_conv_p=*/NULL,\n \t\t\t\t/*parenthesized_p=*/NULL,\n \t\t\t\t/*member_p=*/false,\n@@ -17616,6 +17631,8 @@ cp_parser_simple_type_specifier (cp_parser* parser,\n     {\n       bool qualified_p;\n       bool global_p;\n+      const bool typename_p = (cxx_dialect >= cxx2a\n+\t\t\t       && (flags & CP_PARSER_FLAGS_TYPENAME_OPTIONAL));\n \n       /* Don't gobble tokens or issue error messages if this is an\n \t optional type-specifier.  */\n@@ -17652,13 +17669,21 @@ cp_parser_simple_type_specifier (cp_parser* parser,\n \t     luck.  */\n \t  if (TREE_CODE (type) != TYPE_DECL)\n \t    {\n-\t      cp_parser_error (parser, \"expected template-id for type\");\n-\t      type = NULL_TREE;\n+\t      /* ...unless we pretend we have seen 'typename'.  */\n+\t      if (typename_p)\n+\t\ttype = cp_parser_make_typename_type (parser, type,\n+\t\t\t\t\t\t     token->location);\n+\t      else\n+\t\t{\n+\t\t  cp_parser_error (parser, \"expected template-id for type\");\n+\t\t  type = NULL_TREE;\n+\t\t}\n \t    }\n \t}\n       /* Otherwise, look for a type-name.  */\n       else\n-\ttype = cp_parser_type_name (parser);\n+\ttype = cp_parser_type_name (parser, (qualified_p && typename_p));\n+\n       /* Keep track of all name-lookups performed in class scopes.  */\n       if (type\n \t  && !global_p\n@@ -17783,13 +17808,6 @@ cp_parser_simple_type_specifier (cp_parser* parser,\n \n    Returns a TYPE_DECL for the type.  */\n \n-static tree\n-cp_parser_type_name (cp_parser* parser)\n-{\n-  return cp_parser_type_name (parser, /*typename_keyword_p=*/false);\n-}\n-\n-/* See above. */\n static tree\n cp_parser_type_name (cp_parser* parser, bool typename_keyword_p)\n {\n@@ -18577,7 +18595,8 @@ cp_parser_enum_specifier (cp_parser* parser)\n       cp_lexer_consume_token (parser->lexer);\n \n       /* Parse the type-specifier-seq.  */\n-      cp_parser_type_specifier_seq (parser, /*is_declaration=*/false,\n+      cp_parser_type_specifier_seq (parser, CP_PARSER_FLAGS_NONE,\n+\t\t\t\t    /*is_declaration=*/false,\n \t\t\t\t    /*is_trailing_return=*/false,\n                                     &type_specifiers);\n \n@@ -19434,7 +19453,8 @@ cp_parser_alias_declaration (cp_parser* parser)\n \tG_(\"types may not be defined in alias template declarations\");\n     }\n \n-  type = cp_parser_type_id (parser, &type_location);\n+  type = cp_parser_type_id (parser, CP_PARSER_FLAGS_TYPENAME_OPTIONAL,\n+\t\t\t    &type_location);\n \n   /* Restore the error message if need be.  */\n   if (parser->num_template_parameter_lists)\n@@ -19814,6 +19834,8 @@ strip_declarator_types (tree type, cp_declarator *declarator)\n    function-definition:\n      decl-specifier-seq [opt] declarator function-transaction-block\n \n+   The parser flags FLAGS is used to control type-specifier parsing.\n+\n    The DECL_SPECIFIERS apply to this declarator.  Returns a\n    representation of the entity declared.  If MEMBER_P is TRUE, then\n    this declarator appears in a class scope.  The new DECL created by\n@@ -19845,6 +19867,7 @@ strip_declarator_types (tree type, cp_declarator *declarator)\n \n static tree\n cp_parser_init_declarator (cp_parser* parser,\n+\t\t\t   cp_parser_flags flags,\n \t\t\t   cp_decl_specifier_seq *decl_specifiers,\n \t\t\t   vec<deferred_access_check, va_gc> *checks,\n \t\t\t   bool function_definition_allowed_p,\n@@ -19901,7 +19924,7 @@ cp_parser_init_declarator (cp_parser* parser,\n   /* Parse the declarator.  */\n   declarator\n     = cp_parser_declarator (parser, CP_PARSER_DECLARATOR_NAMED,\n-\t\t\t    &ctor_dtor_or_conv_p,\n+\t\t\t    flags, &ctor_dtor_or_conv_p,\n \t\t\t    /*parenthesized_p=*/NULL,\n \t\t\t    member_p, friend_p);\n   /* Gather up the deferred checks.  */\n@@ -20300,6 +20323,8 @@ cp_parser_init_declarator (cp_parser* parser,\n      attributes [opt] ptr-operator abstract-declarator [opt]\n      attributes [opt] direct-abstract-declarator\n \n+   The parser flags FLAGS is used to control type-specifier parsing.\n+\n    If CTOR_DTOR_OR_CONV_P is not NULL, *CTOR_DTOR_OR_CONV_P is used to\n    detect constructors, destructors, deduction guides, or conversion operators.\n    It is set to -1 if the declarator is a name, and +1 if it is a\n@@ -20324,6 +20349,7 @@ cp_parser_init_declarator (cp_parser* parser,\n static cp_declarator *\n cp_parser_declarator (cp_parser* parser,\n \t\t      cp_parser_declarator_kind dcl_kind,\n+\t\t      cp_parser_flags flags,\n \t\t      int* ctor_dtor_or_conv_p,\n \t\t      bool* parenthesized_p,\n \t\t      bool member_p, bool friend_p)\n@@ -20364,6 +20390,7 @@ cp_parser_declarator (cp_parser* parser,\n \n       /* Parse the dependent declarator.  */\n       declarator = cp_parser_declarator (parser, dcl_kind,\n+\t\t\t\t\t CP_PARSER_FLAGS_NONE,\n \t\t\t\t\t /*ctor_dtor_or_conv_p=*/NULL,\n \t\t\t\t\t /*parenthesized_p=*/NULL,\n \t\t\t\t\t /*member_p=*/false,\n@@ -20385,7 +20412,7 @@ cp_parser_declarator (cp_parser* parser,\n \t*parenthesized_p = cp_lexer_next_token_is (parser->lexer,\n \t\t\t\t\t\t   CPP_OPEN_PAREN);\n       declarator = cp_parser_direct_declarator (parser, dcl_kind,\n-\t\t\t\t\t\tctor_dtor_or_conv_p,\n+\t\t\t\t\t\tflags, ctor_dtor_or_conv_p,\n \t\t\t\t\t\tmember_p, friend_p);\n     }\n \n@@ -20420,12 +20447,15 @@ cp_parser_declarator (cp_parser* parser,\n    we are parsing a direct-declarator.  It is\n    CP_PARSER_DECLARATOR_EITHER, if we can accept either - in the case\n    of ambiguity we prefer an abstract declarator, as per\n-   [dcl.ambig.res].  CTOR_DTOR_OR_CONV_P, MEMBER_P, and FRIEND_P are\n+   [dcl.ambig.res].\n+   The parser flags FLAGS is used to control type-specifier parsing.\n+   CTOR_DTOR_OR_CONV_P, MEMBER_P, and FRIEND_P are\n    as for cp_parser_declarator.  */\n \n static cp_declarator *\n cp_parser_direct_declarator (cp_parser* parser,\n \t\t\t     cp_parser_declarator_kind dcl_kind,\n+\t\t\t     cp_parser_flags flags,\n \t\t\t     int* ctor_dtor_or_conv_p,\n \t\t\t     bool member_p, bool friend_p)\n {\n@@ -20512,7 +20542,8 @@ cp_parser_direct_declarator (cp_parser* parser,\n \t      begin_scope (sk_function_parms, NULL_TREE);\n \n \t      /* Parse the parameter-declaration-clause.  */\n-\t      params = cp_parser_parameter_declaration_clause (parser);\n+\t      params\n+\t\t= cp_parser_parameter_declaration_clause (parser, flags);\n \n \t      /* Consume the `)'.  */\n \t      parens.require_close (parser);\n@@ -20603,7 +20634,8 @@ cp_parser_direct_declarator (cp_parser* parser,\n \t      saved_in_type_id_in_expr_p = parser->in_type_id_in_expr_p;\n \t      parser->in_type_id_in_expr_p = true;\n \t      declarator\n-\t\t= cp_parser_declarator (parser, dcl_kind, ctor_dtor_or_conv_p,\n+\t\t= cp_parser_declarator (parser, dcl_kind, flags,\n+\t\t\t\t\tctor_dtor_or_conv_p,\n \t\t\t\t\t/*parenthesized_p=*/NULL,\n \t\t\t\t\tmember_p, friend_p);\n \t      parser->in_type_id_in_expr_p = saved_in_type_id_in_expr_p;\n@@ -21453,17 +21485,26 @@ cp_parser_declarator_id (cp_parser* parser, bool optional_p)\n    type-id:\n      type-specifier-seq abstract-declarator [opt]\n \n+   The parser flags FLAGS is used to control type-specifier parsing.\n+\n+   If IS_TEMPLATE_ARG is true, we are parsing a template argument.\n+\n+   If IS_TRAILING_RETURN is true, we are in a trailing-return-type,\n+   i.e. we've just seen \"->\".\n+\n    Returns the TYPE specified.  */\n \n static tree\n-cp_parser_type_id_1 (cp_parser* parser, bool is_template_arg,\n-\t\t     bool is_trailing_return, location_t * type_location)\n+cp_parser_type_id_1 (cp_parser *parser, cp_parser_flags flags,\n+\t\t     bool is_template_arg, bool is_trailing_return,\n+\t\t     location_t *type_location)\n {\n   cp_decl_specifier_seq type_specifier_seq;\n   cp_declarator *abstract_declarator;\n \n   /* Parse the type-specifier-seq.  */\n-  cp_parser_type_specifier_seq (parser, /*is_declaration=*/false,\n+  cp_parser_type_specifier_seq (parser, flags,\n+\t\t\t\t/*is_declaration=*/false,\n \t\t\t\tis_trailing_return,\n \t\t\t\t&type_specifier_seq);\n   if (type_location)\n@@ -21486,7 +21527,8 @@ cp_parser_type_id_1 (cp_parser* parser, bool is_template_arg,\n   cp_parser_parse_tentatively (parser);\n   /* Look for the declarator.  */\n   abstract_declarator\n-    = cp_parser_declarator (parser, CP_PARSER_DECLARATOR_ABSTRACT, NULL,\n+    = cp_parser_declarator (parser, CP_PARSER_DECLARATOR_ABSTRACT,\n+\t\t\t    CP_PARSER_FLAGS_NONE, NULL,\n \t\t\t    /*parenthesized_p=*/NULL,\n \t\t\t    /*member_p=*/false,\n \t\t\t    /*friend_p=*/false);\n@@ -21533,20 +21575,25 @@ cp_parser_type_id_1 (cp_parser* parser, bool is_template_arg,\n \t\t       is_template_arg);\n }\n \n+/* Wrapper for cp_parser_type_id_1.  */\n+\n static tree\n-cp_parser_type_id (cp_parser *parser, location_t * type_location)\n+cp_parser_type_id (cp_parser *parser, cp_parser_flags flags,\n+\t\t   location_t *type_location)\n {\n-  return cp_parser_type_id_1 (parser, false, false, type_location);\n+  return cp_parser_type_id_1 (parser, flags, false, false, type_location);\n }\n \n+/* Wrapper for cp_parser_type_id_1.  */\n+\n static tree\n cp_parser_template_type_arg (cp_parser *parser)\n {\n   tree r;\n   const char *saved_message = parser->type_definition_forbidden_message;\n   parser->type_definition_forbidden_message\n     = G_(\"types may not be defined in template arguments\");\n-  r = cp_parser_type_id_1 (parser, true, false, NULL);\n+  r = cp_parser_type_id_1 (parser, CP_PARSER_FLAGS_NONE, true, false, NULL);\n   parser->type_definition_forbidden_message = saved_message;\n   if (cxx_dialect >= cxx14 && !flag_concepts && type_uses_auto (r))\n     {\n@@ -21556,10 +21603,13 @@ cp_parser_template_type_arg (cp_parser *parser)\n   return r;\n }\n \n+/* Wrapper for cp_parser_type_id_1.  */\n+\n static tree\n cp_parser_trailing_type_id (cp_parser *parser)\n {\n-  return cp_parser_type_id_1 (parser, false, true, NULL);\n+  return cp_parser_type_id_1 (parser, CP_PARSER_FLAGS_TYPENAME_OPTIONAL,\n+\t\t\t      false, true, NULL);\n }\n \n /* Parse a type-specifier-seq.\n@@ -21572,6 +21622,8 @@ cp_parser_trailing_type_id (cp_parser *parser)\n    type-specifier-seq:\n      attributes type-specifier-seq [opt]\n \n+   The parser flags FLAGS is used to control type-specifier parsing.\n+\n    If IS_DECLARATION is true, we are at the start of a \"condition\" or\n    exception-declaration, so we might be followed by a declarator-id.\n \n@@ -21582,17 +21634,18 @@ cp_parser_trailing_type_id (cp_parser *parser)\n \n static void\n cp_parser_type_specifier_seq (cp_parser* parser,\n+\t\t\t      cp_parser_flags flags,\n \t\t\t      bool is_declaration,\n \t\t\t      bool is_trailing_return,\n \t\t\t      cp_decl_specifier_seq *type_specifier_seq)\n {\n   bool seen_type_specifier = false;\n-  cp_parser_flags flags = CP_PARSER_FLAGS_OPTIONAL;\n   cp_token *start_token = NULL;\n \n   /* Clear the TYPE_SPECIFIER_SEQ.  */\n   clear_decl_specs (type_specifier_seq);\n \n+  flags |= CP_PARSER_FLAGS_OPTIONAL;\n   /* In the context of a trailing return type, enum E { } is an\n      elaborated-type-specifier followed by a function-body, not an\n      enum-specifier.  */\n@@ -21698,12 +21751,15 @@ function_being_declared_is_template_p (cp_parser* parser)\n      parameter-declaration-list [opt] ... [opt]\n      parameter-declaration-list , ...\n \n+   The parser flags FLAGS is used to control type-specifier parsing.\n+\n    Returns a representation for the parameter declarations.  A return\n    value of NULL indicates a parameter-declaration-clause consisting\n    only of an ellipsis.  */\n \n static tree\n-cp_parser_parameter_declaration_clause (cp_parser* parser)\n+cp_parser_parameter_declaration_clause (cp_parser* parser,\n+\t\t\t\t\tcp_parser_flags flags)\n {\n   tree parameters;\n   cp_token *token;\n@@ -21746,7 +21802,7 @@ cp_parser_parameter_declaration_clause (cp_parser* parser)\n     }\n \n   /* Parse the parameter-declaration-list.  */\n-  parameters = cp_parser_parameter_declaration_list (parser);\n+  parameters = cp_parser_parameter_declaration_list (parser, flags);\n   /* If a parse error occurred while parsing the\n      parameter-declaration-list, then the entire\n      parameter-declaration-clause is erroneous.  */\n@@ -21789,12 +21845,14 @@ cp_parser_parameter_declaration_clause (cp_parser* parser)\n      parameter-declaration\n      parameter-declaration-list , parameter-declaration\n \n+   The parser flags FLAGS is used to control type-specifier parsing.\n+\n    Returns a representation of the parameter-declaration-list, as for\n    cp_parser_parameter_declaration_clause.  However, the\n    `void_list_node' is never appended to the list.  */\n \n static tree\n-cp_parser_parameter_declaration_list (cp_parser* parser)\n+cp_parser_parameter_declaration_list (cp_parser* parser, cp_parser_flags flags)\n {\n   tree parameters = NULL_TREE;\n   tree *tail = &parameters;\n@@ -21817,7 +21875,7 @@ cp_parser_parameter_declaration_list (cp_parser* parser)\n \n       /* Parse the parameter.  */\n       parameter\n-\t= cp_parser_parameter_declaration (parser,\n+\t= cp_parser_parameter_declaration (parser, flags,\n \t\t\t\t\t   /*template_parm_p=*/false,\n \t\t\t\t\t   &parenthesized_p);\n \n@@ -21949,6 +22007,8 @@ cp_parser_parameter_declaration_list (cp_parser* parser)\n      decl-specifier-seq ... [opt] abstract-declarator [opt]\n      decl-specifier-seq abstract-declarator [opt] = assignment-expression\n \n+   The parser flags FLAGS is used to control type-specifier parsing.\n+\n    If TEMPLATE_PARM_P is TRUE, then this parameter-declaration\n    declares a template parameter.  (In that case, a non-nested `>'\n    token encountered during the parsing of the assignment-expression\n@@ -21960,6 +22020,7 @@ cp_parser_parameter_declaration_list (cp_parser* parser)\n \n static cp_parameter_declarator *\n cp_parser_parameter_declaration (cp_parser *parser,\n+\t\t\t\t cp_parser_flags flags,\n \t\t\t\t bool template_parm_p,\n \t\t\t\t bool *parenthesized_p)\n {\n@@ -21992,7 +22053,7 @@ cp_parser_parameter_declaration (cp_parser *parser,\n   /* Parse the declaration-specifiers.  */\n   cp_token *decl_spec_token_start = cp_lexer_peek_token (parser->lexer);\n   cp_parser_decl_specifier_seq (parser,\n-\t\t\t\tCP_PARSER_FLAGS_NONE,\n+\t\t\t\tflags,\n \t\t\t\t&decl_specifiers,\n \t\t\t\t&declares_class_or_enum);\n \n@@ -22051,6 +22112,7 @@ cp_parser_parameter_declaration (cp_parser *parser,\n       declarator_token_start = token;\n       declarator = cp_parser_declarator (parser,\n \t\t\t\t\t CP_PARSER_DECLARATOR_EITHER,\n+\t\t\t\t\t CP_PARSER_FLAGS_NONE,\n \t\t\t\t\t /*ctor_dtor_or_conv_p=*/NULL,\n \t\t\t\t\t parenthesized_p,\n \t\t\t\t\t /*member_p=*/false,\n@@ -24024,7 +24086,8 @@ cp_parser_member_declaration (cp_parser* parser)\n   /* Parse the decl-specifier-seq.  */\n   decl_spec_token_start = cp_lexer_peek_token (parser->lexer);\n   cp_parser_decl_specifier_seq (parser,\n-\t\t\t\tCP_PARSER_FLAGS_OPTIONAL,\n+\t\t\t\t(CP_PARSER_FLAGS_OPTIONAL\n+\t\t\t\t | CP_PARSER_FLAGS_TYPENAME_OPTIONAL),\n \t\t\t\t&decl_specifiers,\n \t\t\t\t&declares_class_or_enum);\n   /* Check for an invalid type-name.  */\n@@ -24261,6 +24324,7 @@ cp_parser_member_declaration (cp_parser* parser)\n \t      /* Parse the declarator.  */\n \t      declarator\n \t\t= cp_parser_declarator (parser, CP_PARSER_DECLARATOR_NAMED,\n+\t\t\t\t\tCP_PARSER_FLAGS_TYPENAME_OPTIONAL,\n \t\t\t\t\t&ctor_dtor_or_conv_p,\n \t\t\t\t\t/*parenthesized_p=*/NULL,\n \t\t\t\t\t/*member_p=*/true,\n@@ -25132,14 +25196,16 @@ cp_parser_exception_declaration (cp_parser* parser)\n     = G_(\"types may not be defined in exception-declarations\");\n \n   /* Parse the type-specifier-seq.  */\n-  cp_parser_type_specifier_seq (parser, /*is_declaration=*/true,\n+  cp_parser_type_specifier_seq (parser, CP_PARSER_FLAGS_NONE,\n+\t\t\t\t/*is_declaration=*/true,\n \t\t\t\t/*is_trailing_return=*/false,\n \t\t\t\t&type_specifiers);\n   /* If it's a `)', then there is no declarator.  */\n   if (cp_lexer_next_token_is (parser->lexer, CPP_CLOSE_PAREN))\n     declarator = NULL;\n   else\n     declarator = cp_parser_declarator (parser, CP_PARSER_DECLARATOR_EITHER,\n+\t\t\t\t       CP_PARSER_FLAGS_NONE,\n \t\t\t\t       /*ctor_dtor_or_conv_p=*/NULL,\n \t\t\t\t       /*parenthesized_p=*/NULL,\n \t\t\t\t       /*member_p=*/false,\n@@ -26295,7 +26361,8 @@ cp_parser_requirement_parameter_list (cp_parser *parser)\n   if (!parens.require_open (parser))\n     return error_mark_node;\n \n-  tree parms = cp_parser_parameter_declaration_clause (parser);\n+  tree parms\n+    = cp_parser_parameter_declaration_clause (parser, CP_PARSER_FLAGS_NONE);\n \n   if (!parens.require_close (parser))\n     return error_mark_node;\n@@ -27049,6 +27116,16 @@ cp_parser_constructor_declarator_p (cp_parser *parser, bool friend_p)\n \t\t\t\t\t    /*type_p=*/false,\n \t\t\t\t\t    /*is_declaration=*/false));\n \n+  /* Resolve the TYPENAME_TYPE, because the call above didn't do it.  */\n+  if (nested_name_specifier\n+      && TREE_CODE (nested_name_specifier) == TYPENAME_TYPE)\n+    {\n+      tree s = resolve_typename_type (nested_name_specifier,\n+\t\t\t\t      /*only_current_p=*/false);\n+      if (TREE_CODE (s) != TYPENAME_TYPE)\n+\tnested_name_specifier = s;\n+    }\n+\n   outside_class_specifier_p = (!at_class_scope_p ()\n \t\t\t       || !TYPE_BEING_DEFINED (current_class_type)\n \t\t\t       || friend_p);\n@@ -27727,7 +27804,8 @@ cp_parser_single_declaration (cp_parser* parser,\n      alternative.  */\n   decl_spec_token_start = cp_lexer_peek_token (parser->lexer);\n   cp_parser_decl_specifier_seq (parser,\n-\t\t\t\tCP_PARSER_FLAGS_OPTIONAL,\n+\t\t\t\t(CP_PARSER_FLAGS_OPTIONAL\n+\t\t\t\t | CP_PARSER_FLAGS_TYPENAME_OPTIONAL),\n \t\t\t\t&decl_specifiers,\n \t\t\t\t&declares_class_or_enum);\n   if (friend_p)\n@@ -27817,6 +27895,7 @@ cp_parser_single_declaration (cp_parser* parser,\n \t  || decl_specifiers.type != error_mark_node))\n     {\n       decl = cp_parser_init_declarator (parser,\n+\t\t\t\t\tCP_PARSER_FLAGS_TYPENAME_OPTIONAL,\n \t\t\t\t        &decl_specifiers,\n \t\t\t\t        checks,\n \t\t\t\t        /*function_definition_allowed_p=*/true,\n@@ -29451,6 +29530,7 @@ cp_parser_cache_defarg (cp_parser *parser, bool nsdmi)\n \t\t      int ctor_dtor_or_conv_p;\n \t\t      cp_lexer_consume_token (parser->lexer);\n \t\t      cp_parser_declarator (parser, CP_PARSER_DECLARATOR_NAMED,\n+\t\t\t\t\t    CP_PARSER_FLAGS_NONE,\n \t\t\t\t\t    &ctor_dtor_or_conv_p,\n \t\t\t\t\t    /*parenthesized_p=*/NULL,\n \t\t\t\t\t    /*member_p=*/true,\n@@ -29470,8 +29550,9 @@ cp_parser_cache_defarg (cp_parser *parser, bool nsdmi)\n \t\t{\n \t\t  cp_lexer_consume_token (parser->lexer);\n \t\t  begin_scope (sk_function_parms, NULL_TREE);\n-\t\t  if (cp_parser_parameter_declaration_list (parser)\n-\t\t      == error_mark_node)\n+\t\t  tree t = cp_parser_parameter_declaration_list\n+\t\t\t    (parser, CP_PARSER_FLAGS_NONE);\n+\t\t  if (t == error_mark_node)\n \t\t    error = true;\n \t\t  pop_bindings_and_leave_scope ();\n \t\t}\n@@ -30486,7 +30567,8 @@ cp_parser_objc_method_tail_params_opt (cp_parser* parser, bool *ellipsisp,\n \t}\n \n       /* TODO: parse attributes for tail parameters.  */\n-      parmdecl = cp_parser_parameter_declaration (parser, false, NULL);\n+      parmdecl = cp_parser_parameter_declaration (parser, CP_PARSER_FLAGS_NONE,\n+\t\t\t\t\t\t  false, NULL);\n       parm = grokdeclarator (parmdecl->declarator,\n \t\t\t     &parmdecl->decl_specifiers,\n \t\t\t     PARM, /*initialized=*/0,\n@@ -30815,6 +30897,7 @@ cp_parser_objc_class_ivars (cp_parser* parser)\n \t      /* Parse the declarator.  */\n \t      declarator\n \t\t= cp_parser_declarator (parser, CP_PARSER_DECLARATOR_NAMED,\n+\t\t\t\t\tCP_PARSER_FLAGS_NONE,\n \t\t\t\t\t&ctor_dtor_or_conv_p,\n \t\t\t\t\t/*parenthesized_p=*/NULL,\n \t\t\t\t\t/*member_p=*/false,\n@@ -31168,7 +31251,8 @@ cp_parser_objc_try_catch_finally_statement (cp_parser *parser)\n \t{\n \t  /* We have \"@catch (NSException *exception)\" or something\n \t     like that.  Parse the parameter declaration.  */\n-\t  parm = cp_parser_parameter_declaration (parser, false, NULL);\n+\t  parm = cp_parser_parameter_declaration (parser, CP_PARSER_FLAGS_NONE,\n+\t\t\t\t\t\t  false, NULL);\n \t  if (parm == NULL)\n \t    parameter_declaration = error_mark_node;\n \t  else\n@@ -31374,6 +31458,7 @@ cp_parser_objc_struct_declaration (cp_parser *parser)\n \n       /* Parse the declarator.  */\n       declarator = cp_parser_declarator (parser, CP_PARSER_DECLARATOR_NAMED,\n+\t\t\t\t\t CP_PARSER_FLAGS_NONE,\n \t\t\t\t\t NULL, NULL, false, false);\n \n       /* Look for attributes that apply to the ivar.  */\n@@ -35985,7 +36070,8 @@ cp_parser_omp_for_loop_init (cp_parser *parser,\n      cp_parser_condition, from whence the bulk of this is copied.  */\n \n   cp_parser_parse_tentatively (parser);\n-  cp_parser_type_specifier_seq (parser, /*is_declaration=*/true,\n+  cp_parser_type_specifier_seq (parser, CP_PARSER_FLAGS_NONE,\n+\t\t\t\t/*is_declaration=*/true,\n \t\t\t\t/*is_trailing_return=*/false,\n \t\t\t\t&type_specifiers);\n   if (cp_parser_parse_definitely (parser))\n@@ -35997,6 +36083,7 @@ cp_parser_omp_for_loop_init (cp_parser *parser,\n \n       declarator = cp_parser_declarator (parser,\n \t\t\t\t\t CP_PARSER_DECLARATOR_NAMED,\n+\t\t\t\t\t CP_PARSER_FLAGS_NONE,\n \t\t\t\t\t /*ctor_dtor_or_conv_p=*/NULL,\n \t\t\t\t\t /*parenthesized_p=*/NULL,\n \t\t\t\t\t /*member_p=*/false,"}, {"sha": "610a26453fa49b90f49c1bdc8582ab9a63d0e1ef", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96c35892bea68ac180f19079cf08fea3b6cda0a8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96c35892bea68ac180f19079cf08fea3b6cda0a8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=96c35892bea68ac180f19079cf08fea3b6cda0a8", "patch": "@@ -1,3 +1,39 @@\n+2018-12-01  Marek Polacek  <polacek@redhat.com>\n+\n+\tImplement P0634R3, Down with typename!\n+\t* g++.dg/cpp0x/alias-decl-43.C: Adjust dg-error.\n+\t* g++.dg/cpp0x/decltype67.C: Only expect error in c++17_down.\n+\t* g++.dg/cpp1z/typename1.C: New test.\n+\t* g++.dg/cpp2a/typename1.C: New test.\n+\t* g++.dg/cpp2a/typename10.C: New test.\n+\t* g++.dg/cpp2a/typename11.C: New test.\n+\t* g++.dg/cpp2a/typename2.C: New test.\n+\t* g++.dg/cpp2a/typename3.C: New test.\n+\t* g++.dg/cpp2a/typename4.C: New test.\n+\t* g++.dg/cpp2a/typename5.C: New test.\n+\t* g++.dg/cpp2a/typename6.C: New test.\n+\t* g++.dg/cpp2a/typename7.C: New test.\n+\t* g++.dg/cpp2a/typename8.C: New test.\n+\t* g++.dg/cpp2a/typename9.C: New test.\n+\t* g++.dg/diagnostic/missing-typename.C: Only run the test in\n+\tc++17_down.\n+\t* g++.dg/other/crash-9.C: Add template disambiguator.\n+\t* g++.dg/other/nontype-1.C: Only expect error in c++17_down.\n+\t* g++.dg/parse/crash13.C: Likewise.\n+\t* g++.dg/parse/error36.C: Likewise.\n+\t* g++.dg/parse/no-typename1.C: Likewise.\n+\t* g++.dg/parse/typedef2.C: Likewise.\n+\t* g++.dg/parse/typename11.C: Likewise.\n+\t* g++.dg/template/crash48.C: Adjust dg-error.\n+\t* g++.dg/template/dependent-name5.C: Only expect error in c++17_down.\n+\tAdd dg-error.\n+\t* g++.dg/template/error29.C: Only expect error in c++17_down.\n+\t* g++.dg/template/nested5.C: Add template disambiguator.\n+\t* g++.dg/template/pr84789.C: Only expect error in c++17_down.\n+\t* g++.dg/template/static30.C: Add dg-error.\n+\t* g++.dg/template/typedef6.C: Adjust dg-error.\n+\t* g++.dg/template/typename3.C: Only expect error in c++17_down.\n+\n 2018-12-01  Jeff Law  <law@redhat.com>\n \n \t* gcc.dg/predict-22.c: Update expected output."}, {"sha": "f9b4477448b55e96e6e326573f0ed76861b0bdfd", "filename": "gcc/testsuite/g++.dg/cpp0x/alias-decl-43.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96c35892bea68ac180f19079cf08fea3b6cda0a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-43.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96c35892bea68ac180f19079cf08fea3b6cda0a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-43.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-43.C?ref=96c35892bea68ac180f19079cf08fea3b6cda0a8", "patch": "@@ -1,4 +1,4 @@\n // PR c++/59120\n // { dg-do compile { target c++11 } }\n \n-template<typename T> using X = int T::T*;  // { dg-error \"expected\" }\n+template<typename T> using X = int T::T*;  // { dg-error \"expected|two or more\" }"}, {"sha": "f3bf9a24b04289da14c75a7baec538e748ced432", "filename": "gcc/testsuite/g++.dg/cpp0x/decltype67.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96c35892bea68ac180f19079cf08fea3b6cda0a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype67.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96c35892bea68ac180f19079cf08fea3b6cda0a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype67.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype67.C?ref=96c35892bea68ac180f19079cf08fea3b6cda0a8", "patch": "@@ -3,5 +3,5 @@\n \n template<typename T> struct A\n {\n-  void foo(decltype(T())::Y);\t// { dg-error {decltype\\(T\\(\\)\\)::Y} }\n+  void foo(decltype(T())::Y);\t// { dg-error \"decltype\\\\(T\\\\(\\\\)\\\\)::Y\" \"\" { target c++17_down } }\n };"}, {"sha": "4c598c839f2f24d45c86e4bd611d759754a2e735", "filename": "gcc/testsuite/g++.dg/cpp1z/typename1.C", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96c35892bea68ac180f19079cf08fea3b6cda0a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ftypename1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96c35892bea68ac180f19079cf08fea3b6cda0a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ftypename1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ftypename1.C?ref=96c35892bea68ac180f19079cf08fea3b6cda0a8", "patch": "@@ -0,0 +1,117 @@\n+// P0634R3\n+// { dg-do compile { target c++17_only } }\n+\n+// (5.2.1) simple-declaration or a function-definition in namespace scope\n+\n+template<typename T>\n+T::X fn1 (int); // { dg-error \"need .typename.\" }\n+\n+template<typename T>\n+T::X fn1 (int) // { dg-error \"need .typename.\" }\n+{\n+  return 42;\n+}\n+\n+template<typename T>\n+T::X v1; // { dg-error \"need .typename.\" }\n+\n+namespace N {\n+  template<typename T>\n+  T::X v2; // { dg-error \"need .typename.\" }\n+}\n+\n+// (5.2.2) member-declaration\n+\n+template<typename T>\n+struct S {\n+  [[noreturn]] T::X fn2 (); // { dg-error \"need .typename.\" }\n+  T::X fn3 (); // { dg-error \"need .typename.\" }\n+  T::X fn4 () { return 5; } // { dg-error \"need .typename.\" }\n+  T::X fn5 () final; // { dg-error \"need .typename.\" }\n+  T::X fn6 () = 0; // { dg-error \"need .typename.\" }\n+  T::X fn8 () override; // { dg-error \"need .typename.\" }\n+  T::X v3; // { dg-error \"need .typename.\" }\n+  T::X *v4; // { dg-error \"need .typename.\" }\n+  T::X v5[5]; // { dg-error \"need .typename.\" }\n+  T::X v6 = 0; // { dg-error \"need .typename.\" }\n+  T::X v7{0}; // { dg-error \"need .typename.|;\" }\n+  T::X v8 : 16; // { dg-error \"need .typename.\" }\n+  static constexpr T::X v9 = 0; // { dg-error \"need .typename.\" }\n+  typedef T::X T2; // { dg-error \"need .typename.\" }\n+  friend T::X fn7<int> (); // { dg-error \"need .typename.\" }\n+  static inline T::X v10; // { dg-error \"need .typename.\" }\n+};\n+\n+// (5.2.3) parameter-declaration in a member-declaration,\n+// unless that parameter-declaration appears in a default argument\n+\n+template<typename T>\n+struct S2 {\n+  friend int fn1<T::X> (); // { dg-error \"\" }\n+  int fn2 (T::X p); // { dg-error \"not a type\" }\n+  int fn5 (int = T::X);\n+};\n+\n+// (5.2.4) parameter-declaration in a declarator of a function or function\n+// template declaration whose declarator-id is qualified,\n+// unless that parameter-declaration appears in a default argument\n+template<typename T>\n+int fn3 (T::X);\n+\n+template<typename T>\n+int fn4 (T::X p) { return p; } // { dg-error \"\" }\n+\n+// (5.2.6) parameter-declaration of a (non-type) template-parameter\n+\n+template<typename T, T::X N> // { dg-error \"not a type\" }\n+struct S3 { };\n+\n+// default argument of a type-parameter of a template\n+template<typename T, typename U = T::X> // { dg-error \"need .typename.\" }\n+struct S4 { };\n+\n+// type-id of a static_cast, const_cast, reinterpret_cast, or dynamic_cast\n+template<typename T>\n+struct S5 {\n+  void fn6 (T::X p) // { dg-error \"not a type\" }\n+  {\n+    int i = static_cast<T::Y>(p); // { dg-error \"need .typename.\" }\n+    i = dynamic_cast<T::Y>(p); // { dg-error \"need .typename.\" }\n+    i = reinterpret_cast<T::Y>(p); // { dg-error \"need .typename.\" }\n+    i = const_cast<T::Y>(p); // { dg-error \"need .typename.\" }\n+  }\n+};\n+\n+template<typename T>\n+void fn7 (T::X p) // { dg-error \"\" }\n+{\n+  int i = static_cast<T::Y>(p);\n+  i = dynamic_cast<T::Y>(p);\n+  i = reinterpret_cast<T::Y>(p);\n+  i = const_cast<T::Y>(p);\n+}\n+\n+// new-type-id\n+template<typename T>\n+void\n+fn8 ()\n+{\n+  new T::X[10]; // { dg-error \"need .typename.\" }\n+}\n+\n+// defining-type-id\n+\n+template<typename T>\n+struct W { typedef int M; };\n+\n+template<typename T>\n+struct S6 {\n+  using TT = T::X; // { dg-error \"need .typename.\" }\n+  using TT2 = W<T>::M; // { dg-error \"need .typename.\" }\n+};\n+\n+// trailing-return-type\n+template<typename T>\n+struct S7 {\n+  auto fn9() -> W<T>::M; // { dg-error \"need .typename.\" }\n+};"}, {"sha": "833d3b86093e10483f2ec68cb5ebff52ac61e564", "filename": "gcc/testsuite/g++.dg/cpp2a/typename1.C", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96c35892bea68ac180f19079cf08fea3b6cda0a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ftypename1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96c35892bea68ac180f19079cf08fea3b6cda0a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ftypename1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ftypename1.C?ref=96c35892bea68ac180f19079cf08fea3b6cda0a8", "patch": "@@ -0,0 +1,42 @@\n+// P0634R3\n+// { dg-do compile { target c++2a } }\n+\n+// OK, return type of a function declaration at global scope.\n+template<class T> T::R f();\n+\n+// Ill-formed (no diagnostic required), attempt to declare\n+// a void variable template\n+template<class T> void f(T::R);\n+\n+template <class T> struct A;\n+template <class T> using B = A<T>::U;\n+\n+template<typename T>\n+struct PtrTraits { typedef int Ptr; };\n+\n+template<class T> struct S {\n+  // OK, in a defining-type-id.\n+  using Ptr = PtrTraits<T>::Ptr;\n+\n+  // OK, trailing-return-type.\n+  auto g() -> S<T*>::Ptr;\n+\n+  // OK, class scope\n+  T::R\n+  f (T::P p)\n+  {\n+    // OK, type-id of a static_cast\n+    return static_cast<T::R>(p);\n+  }\n+};\n+\n+template<typename T>\n+void f ()\n+{\n+  // Variable pf of type void* initialized with T::X\n+  void (*pf)(T::X);\n+\n+  // Error: T::X at block scope does not denote a type\n+  // (attempt to declare a void variable)\n+  void g(T::X); // { dg-error \"declared void\" }\n+}"}, {"sha": "fa2cd000b5d5b06731539ad2c6d1c207f4b37b65", "filename": "gcc/testsuite/g++.dg/cpp2a/typename10.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96c35892bea68ac180f19079cf08fea3b6cda0a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ftypename10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96c35892bea68ac180f19079cf08fea3b6cda0a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ftypename10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ftypename10.C?ref=96c35892bea68ac180f19079cf08fea3b6cda0a8", "patch": "@@ -0,0 +1,20 @@\n+// P0634R3\n+// { dg-do compile { target c++2a } }\n+\n+namespace N {\n+ // template<typename T> extern T::type v; // #1a\n+  template<typename T> T::type v(typename T::value); // #1b\n+}\n+template<typename T> T::type N::v(T::value); // #2\n+\n+namespace N2 {\n+  template<typename T> extern T::type v; // #1a\n+  //template<typename T> T::type v(typename T::value); // #1b\n+}\n+template<typename T> T::type N2::v(T::value); // { dg-error \"\" }\n+\n+namespace A {\n+  inline namespace B { template<typename T> int f(typename T::foo); }\n+  inline namespace C { template<typename T> extern int f; }\n+}\n+template<typename T> int A::f(T::foo); // { dg-error \"ambiguous\" }"}, {"sha": "ed7ad958f62c538e898dc0f25fab78fc22a1c81d", "filename": "gcc/testsuite/g++.dg/cpp2a/typename11.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96c35892bea68ac180f19079cf08fea3b6cda0a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ftypename11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96c35892bea68ac180f19079cf08fea3b6cda0a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ftypename11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ftypename11.C?ref=96c35892bea68ac180f19079cf08fea3b6cda0a8", "patch": "@@ -0,0 +1,17 @@\n+// P0634R3\n+// { dg-do compile { target c++2a } }\n+\n+template<typename T>\n+struct A\n+{\n+  typedef int I;\n+};\n+\n+template<typename T> struct B\n+{\n+  A<T>::I i;\n+  typename A<T>::I i2;\n+\n+  A<int>::I i3;\n+  typename A<int>::I i4;\n+};"}, {"sha": "7c9261770043ee5b011e63867c156a564ddd5b38", "filename": "gcc/testsuite/g++.dg/cpp2a/typename2.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96c35892bea68ac180f19079cf08fea3b6cda0a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ftypename2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96c35892bea68ac180f19079cf08fea3b6cda0a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ftypename2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ftypename2.C?ref=96c35892bea68ac180f19079cf08fea3b6cda0a8", "patch": "@@ -0,0 +1,22 @@\n+// P0634R3\n+// { dg-do compile { target c++2a } }\n+\n+template<class T> typename T::R f();\n+\n+template <class T> struct A;\n+template <class T> using B = typename A<T>::U;\n+\n+template<typename T>\n+struct PtrTraits { typedef int Ptr; };\n+\n+template<class T> struct S {\n+  using Ptr = typename PtrTraits<T>::Ptr;\n+\n+  auto g() -> typename S<T*>::Ptr;\n+\n+  typename T::R\n+  f (typename T::P p)\n+  {\n+    return static_cast<typename T::R>(p);\n+  }\n+};"}, {"sha": "e64aa0316efb87d4c4e994b2690f834248d04941", "filename": "gcc/testsuite/g++.dg/cpp2a/typename3.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96c35892bea68ac180f19079cf08fea3b6cda0a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ftypename3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96c35892bea68ac180f19079cf08fea3b6cda0a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ftypename3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ftypename3.C?ref=96c35892bea68ac180f19079cf08fea3b6cda0a8", "patch": "@@ -0,0 +1,23 @@\n+// P0634R3\n+// { dg-do compile { target c++2a } }\n+\n+template<class T>\n+void f(int i)\n+{\n+  T::x * i; // { dg-error \"dependent-name\" }\n+}\n+\n+struct Foo {\n+  typedef int x;\n+};\n+\n+struct Bar {\n+  static int const x = 5;\n+};\n+\n+int\n+main ()\n+{\n+  f<Bar>(1);\n+  f<Foo>(1);\n+}"}, {"sha": "69154e7daaf614a8e6cc476fb667da41a6c0ada1", "filename": "gcc/testsuite/g++.dg/cpp2a/typename4.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96c35892bea68ac180f19079cf08fea3b6cda0a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ftypename4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96c35892bea68ac180f19079cf08fea3b6cda0a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ftypename4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ftypename4.C?ref=96c35892bea68ac180f19079cf08fea3b6cda0a8", "patch": "@@ -0,0 +1,8 @@\n+// P0634R3\n+// { dg-do compile { target c++2a } }\n+\n+template<class T>\n+struct A {\n+  typedef int B;\n+  B b;\n+};"}, {"sha": "97c27adafcc166ea2c0e61729b515fb6e6d20752", "filename": "gcc/testsuite/g++.dg/cpp2a/typename5.C", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96c35892bea68ac180f19079cf08fea3b6cda0a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ftypename5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96c35892bea68ac180f19079cf08fea3b6cda0a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ftypename5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ftypename5.C?ref=96c35892bea68ac180f19079cf08fea3b6cda0a8", "patch": "@@ -0,0 +1,65 @@\n+// P0634R3\n+// { dg-do compile { target c++2a } }\n+\n+struct X {\n+  template<typename T>\n+  struct N { };\n+};\n+\n+template <typename T>\n+struct Y {\n+  template<typename U>\n+  struct N { };\n+};\n+\n+template <typename T>\n+struct A\n+{\n+  template <typename U>\n+  struct N { };\n+\n+  typedef typename A::template N<int> a1;\n+  typedef typename A::template N<T> a2;\n+  typename A::template N<int> a3;\n+  typename A::template N<T> a4;\n+  A::template N<int> a9;\n+  A::template N<T> a10;\n+  typedef A<T>::template N<int> a13;\n+  typedef A<T>::template N<T> a14;\n+\n+  typedef typename X::template N<int> x1;\n+  typedef typename X::template N<T> x2;\n+  typename X::template N<int> x3;\n+  typename X::template N<T> x4;\n+  typedef X::N<int> x5;\n+  typedef X::N<T> x6;\n+  typedef typename X::N<int> x7;\n+  typedef typename X::N<T> x8;\n+  X::N<int> x9;\n+  X::N<T> x10;\n+  typename X::N<int> x11;\n+  typename X::N<T> x12;\n+\n+  typedef typename Y<int>::template N<int> y1;\n+  typedef typename Y<int>::template N<T> y2;\n+  typedef typename Y<T>::template N<int> y3;\n+  typedef typename Y<T>::template N<T> y4;\n+  typename Y<int>::template N<int> y5;\n+  typename Y<int>::template N<T> y6;\n+  typename Y<T>::template N<int> y7;\n+  typename Y<T>::template N<T> y8;\n+  typedef Y<int>::N<int> y9;\n+  typedef Y<int>::N<T> y10;\n+  typedef Y<T>::template N<int> y11;\n+  typedef Y<T>::template N<T> y12;\n+  typedef typename Y<int>::N<int> y13;\n+  typedef typename Y<int>::N<T> y14;\n+  Y<int>::N<int> y17;\n+  Y<int>::N<T> y18;\n+  typename Y<int>::N<int> y21;\n+  typename Y<int>::N<T> y22;\n+  typedef Y<int>::N<int> y25;\n+  typedef Y<int>::N<T> y26;\n+  typedef Y<T>::template N<int> y27;\n+  typedef Y<T>::template N<T> y28;\n+};"}, {"sha": "49e2235a53d66dfd8786228ccb0e61d0a2c6ed2d", "filename": "gcc/testsuite/g++.dg/cpp2a/typename6.C", "status": "added", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96c35892bea68ac180f19079cf08fea3b6cda0a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ftypename6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96c35892bea68ac180f19079cf08fea3b6cda0a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ftypename6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ftypename6.C?ref=96c35892bea68ac180f19079cf08fea3b6cda0a8", "patch": "@@ -0,0 +1,126 @@\n+// P0634R3\n+// { dg-do compile { target c++2a } }\n+\n+// (5.2.1) simple-declaration or a function-definition in namespace scope\n+\n+template<typename T>\n+T::X fn1 (int);\n+\n+template<typename T>\n+T::X fn1 (int)\n+{\n+  return 42;\n+}\n+\n+template<typename T>\n+T::X v1;\n+\n+namespace N {\n+  template<typename T>\n+  T::X v2;\n+}\n+\n+// (5.2.2) member-declaration\n+\n+template<typename T>\n+struct S {\n+  [[noreturn]] T::X fn2 ();\n+  T::X fn3 ();\n+  T::X fn4 () { return 5; }\n+  T::X fn5 () final;\n+  T::X fn6 () = 0;\n+  T::X fn8 () override;\n+  T::X v3;\n+  T::X *v4;\n+  T::X v5[5];\n+  T::X v6 = 0;\n+  T::X v7{0};\n+  T::X v8 : 16;\n+  static constexpr T::X v9 = 0;\n+  typedef T::X T2;\n+  friend T::X fn7<int> ();\n+  static inline T::X v10;\n+};\n+\n+// (5.2.3) parameter-declaration in a member-declaration,\n+// unless that parameter-declaration appears in a default argument\n+\n+template<typename T>\n+struct S2 {\n+  friend int fn1<T::X> ();\n+  int fn2 (T::X p);\n+  int fn5 (int = T::X);\n+};\n+\n+// (5.2.4) parameter-declaration in a declarator of a function or function\n+// template declaration whose declarator-id is qualified,\n+// unless that parameter-declaration appears in a default argument\n+template<typename T>\n+int fn3 (T::X);\n+\n+template<typename T>\n+int fn4 (T::X p) { return p; }\n+\n+// (5.2.5) parameter-declaration in a lambda-declarator,\n+// unless that parameter-declaration appears in a default argument\n+\n+void\n+fn5 ()\n+{\n+  auto j = []<typename T>(T::X t, int i) { return i; };\n+}\n+\n+// (5.2.6) parameter-declaration of a (non-type) template-parameter\n+\n+template<typename T, T::X N>\n+struct S3 { };\n+\n+// default argument of a type-parameter of a template\n+template<typename T, typename U = T::X>\n+struct S4 { };\n+\n+// type-id of a static_cast, const_cast, reinterpret_cast, or dynamic_cast\n+template<typename T>\n+struct S5 {\n+  void fn6 (T::X p)\n+  {\n+    int i = static_cast<T::Y>(p);\n+    i = dynamic_cast<T::Y>(p);\n+    i = reinterpret_cast<T::Y>(p);\n+    i = const_cast<T::Y>(p);\n+  }\n+};\n+\n+template<typename T>\n+void fn7 (T::X p)\n+{\n+  int i = static_cast<T::Y>(p);\n+  i = dynamic_cast<T::Y>(p);\n+  i = reinterpret_cast<T::Y>(p);\n+  i = const_cast<T::Y>(p);\n+}\n+\n+// new-type-id\n+template<typename T>\n+void\n+fn8 ()\n+{\n+  new T::X[10];\n+}\n+\n+// defining-type-id\n+\n+template<typename T>\n+struct W { typedef int M; };\n+\n+template<typename T>\n+struct S6 {\n+  using TT = T::X;\n+  using TT2 = W<T>::M;\n+};\n+\n+// trailing-return-type\n+template<typename T>\n+struct S7 {\n+  auto fn9() -> W<T>::M;\n+};"}, {"sha": "713db51d9724ebcef104f8967fb41bceac1f0b5c", "filename": "gcc/testsuite/g++.dg/cpp2a/typename7.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96c35892bea68ac180f19079cf08fea3b6cda0a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ftypename7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96c35892bea68ac180f19079cf08fea3b6cda0a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ftypename7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ftypename7.C?ref=96c35892bea68ac180f19079cf08fea3b6cda0a8", "patch": "@@ -0,0 +1,26 @@\n+// P0634R3\n+// { dg-do compile { target c++2a } }\n+\n+// Not in namespace scope.\n+template<typename T>\n+void fn1 ()\n+{\n+  // init-statement -> simple-declaration\n+  if (T::X r = 0; 0) // { dg-error \"need .typename.|expected\" }\n+    ;\n+\n+  for (T::X g = 0; ;) // { dg-error \"need .typename.|expected\" }\n+    ;\n+}\n+\n+template<typename T>\n+void\n+fn2 ()\n+{\n+  T::X fn3 (); // { dg-error \"need .typename.|expected\" }\n+  T::X v1; // { dg-error \"need .typename.|expected\" }\n+  T::X v2 = 0; // { dg-error \"need .typename.|expected\" }\n+  T::X v3{0}; // { dg-error \"need .typename.|expected\" }\n+  static constexpr T::X v4 = 0; // { dg-error \"need .typename.\" }\n+  typedef T::X T2; // { dg-error \"need .typename.\" }\n+}"}, {"sha": "3ebfde45ec54fcdf6124a813dfea5fe398d8e31f", "filename": "gcc/testsuite/g++.dg/cpp2a/typename8.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96c35892bea68ac180f19079cf08fea3b6cda0a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ftypename8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96c35892bea68ac180f19079cf08fea3b6cda0a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ftypename8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ftypename8.C?ref=96c35892bea68ac180f19079cf08fea3b6cda0a8", "patch": "@@ -0,0 +1,20 @@\n+// P0634R3\n+// { dg-do compile { target c++2a } }\n+\n+template<typename T>\n+struct S {\n+  static int foo ();\n+};\n+\n+template<typename T>\n+int\n+f ()\n+{\n+  return S<T>::foo();\n+}\n+\n+void\n+test ()\n+{\n+  f<int>();\n+}"}, {"sha": "7b1865222b3176cd41e88c56cee6d679721579c4", "filename": "gcc/testsuite/g++.dg/cpp2a/typename9.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96c35892bea68ac180f19079cf08fea3b6cda0a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ftypename9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96c35892bea68ac180f19079cf08fea3b6cda0a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ftypename9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ftypename9.C?ref=96c35892bea68ac180f19079cf08fea3b6cda0a8", "patch": "@@ -0,0 +1,12 @@\n+// P0634R3\n+// { dg-do compile { target c++2a } }\n+// { dg-options \"-fconcepts\" }\n+\n+template <typename, typename> class A { class B; };\n+\n+template <typename T, typename U> class A<T, U>::B {\n+  B(A &);\n+};\n+\n+template <typename T, typename U>\n+A<T, U>::B::B(A<T, U> &) {}"}, {"sha": "b088bebf92fb3d7d181c7057e161227c9c1fe0aa", "filename": "gcc/testsuite/g++.dg/diagnostic/missing-typename.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96c35892bea68ac180f19079cf08fea3b6cda0a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fmissing-typename.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96c35892bea68ac180f19079cf08fea3b6cda0a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fmissing-typename.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fmissing-typename.C?ref=96c35892bea68ac180f19079cf08fea3b6cda0a8", "patch": "@@ -1,4 +1,5 @@\n // fix-it hint for missing \"typename\" (PR c++/63392)\n+// { dg-do compile { target c++17_down } }\n // { dg-options \"-fdiagnostics-show-caret\" }\n \n template<typename T>"}, {"sha": "f5c4b2af329474100f00b584f59c7ddd031dc1d3", "filename": "gcc/testsuite/g++.dg/other/crash-9.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96c35892bea68ac180f19079cf08fea3b6cda0a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fcrash-9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96c35892bea68ac180f19079cf08fea3b6cda0a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fcrash-9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fcrash-9.C?ref=96c35892bea68ac180f19079cf08fea3b6cda0a8", "patch": "@@ -11,5 +11,5 @@ class A\n   };\n };\n template <typename T> template <typename U>\n-A<T>::B<U> A<T>::B<U>::foo() {}\n+A<T>::template B<U> A<T>::B<U>::foo() {}\n "}, {"sha": "8d90c322a7e0370350d41224911d2144263ffb29", "filename": "gcc/testsuite/g++.dg/other/nontype-1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96c35892bea68ac180f19079cf08fea3b6cda0a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fnontype-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96c35892bea68ac180f19079cf08fea3b6cda0a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fnontype-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fnontype-1.C?ref=96c35892bea68ac180f19079cf08fea3b6cda0a8", "patch": "@@ -1,7 +1,7 @@\n template <class Op>\n bool asfun(Op f,\n-           Op::first_argument_type a, // { dg-error \"not a type\" }\n-           Op::second_argument_type b) // { dg-error \"not a type\" }\n+           Op::first_argument_type a, // { dg-error \"not a type\" \"\" { target c++17_down } }\n+           Op::second_argument_type b) // { dg-error \"not a type\" \"\" { target c++17_down } }\n {\n    return Op(a, b);\n }"}, {"sha": "7a4939a462d7b0776d5f47fa40c17d83b4b0a223", "filename": "gcc/testsuite/g++.dg/parse/crash13.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96c35892bea68ac180f19079cf08fea3b6cda0a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96c35892bea68ac180f19079cf08fea3b6cda0a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash13.C?ref=96c35892bea68ac180f19079cf08fea3b6cda0a8", "patch": "@@ -12,11 +12,11 @@ struct A\n };\n \n template <typename T> \n-void func(A<T>::B* )\t// { dg-error \"variable|template|expression\" }\n+void func(A<T>::B* )\t// { dg-error \"variable|template|expression\" \"\" { target c++17_down } }\n {\n }\n \n int main() \n {\n-  func<void>(0);\t// { dg-error \"not declared|expression|;\" }\n+  func<void>(0);\t// { dg-error \"not declared|expression|;\" \"\" { target c++17_down } }\n }"}, {"sha": "7e52d1537e0987f79c8152166167d3b8d8c88985", "filename": "gcc/testsuite/g++.dg/parse/error36.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96c35892bea68ac180f19079cf08fea3b6cda0a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror36.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96c35892bea68ac180f19079cf08fea3b6cda0a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror36.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror36.C?ref=96c35892bea68ac180f19079cf08fea3b6cda0a8", "patch": "@@ -25,7 +25,7 @@ template <class T> struct B\n \n // PR c++/40738\n template <class T>\n-void g(const A<T>::type &t);\t// { dg-error \"typename\" \"typename\" }\n+void g(const A<T>::type &t);\t// { dg-error \"typename\" \"\" { target c++17_down } }\n \n // PR c++/18451\n-template <class T> A<T>::B A<T>::b; // { dg-error \"typename\" }\n+template <class T> A<T>::B A<T>::b; // { dg-error \"typename\" \"\" { target c++17_down } }"}, {"sha": "711c621e26a4383c19f254c9e84ee54b9995c6fd", "filename": "gcc/testsuite/g++.dg/parse/no-typename1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96c35892bea68ac180f19079cf08fea3b6cda0a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fno-typename1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96c35892bea68ac180f19079cf08fea3b6cda0a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fno-typename1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fno-typename1.C?ref=96c35892bea68ac180f19079cf08fea3b6cda0a8", "patch": "@@ -6,6 +6,6 @@ template <typename T> struct A\n {\n     template <typename U> struct B\n     {\n-        A<T>::template B<U> foo(); // { dg-error \"\" }\n+        A<T>::template B<U> foo(); // { dg-error \"\" \"\" { target c++17_down } }\n     };\n };"}, {"sha": "fd7554e19ac7778a225bad980183bce030111ffc", "filename": "gcc/testsuite/g++.dg/parse/typedef2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96c35892bea68ac180f19079cf08fea3b6cda0a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypedef2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96c35892bea68ac180f19079cf08fea3b6cda0a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypedef2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypedef2.C?ref=96c35892bea68ac180f19079cf08fea3b6cda0a8", "patch": "@@ -1,2 +1,2 @@\n template <typename T> struct B { typedef typename T::X X; };\n-template <typename T> struct A { typedef B<T>::X::Y Z; }; // { dg-error \"before 'B<T>::X::Y' because 'B<T>::X'\" }\n+template <typename T> struct A { typedef B<T>::X::Y Z; }; // { dg-error \"before 'B<T>::X::Y' because 'B<T>::X'\" \"\" { target c++17_down } }"}, {"sha": "832913ffd67e41700c9ac8e16285227908e402f8", "filename": "gcc/testsuite/g++.dg/parse/typename11.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96c35892bea68ac180f19079cf08fea3b6cda0a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypename11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96c35892bea68ac180f19079cf08fea3b6cda0a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypename11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypename11.C?ref=96c35892bea68ac180f19079cf08fea3b6cda0a8", "patch": "@@ -10,7 +10,7 @@ template <int dim> struct Y : X<dim> {\n \n // note: I is nested type in X, not Y!\n template <int dim>\n-Y<dim>::I::I () {}\t\t// { dg-error \"dependent typedef\" \"typedef\" }\n-// { dg-error \"no type|dependent type\" \"no type\" { target *-*-* } .-1 }\n+Y<dim>::I::I () {}\t\t// { dg-error \"expected|dependent typedef\" \"typedef\" }\n+// { dg-error \"no type|dependent type\" \"no type\" { target c++17_down } .-1 }\n \n template struct Y<1>;"}, {"sha": "acbe4342542e467c79d42c5898f0a2af8827dadf", "filename": "gcc/testsuite/g++.dg/template/crash48.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96c35892bea68ac180f19079cf08fea3b6cda0a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash48.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96c35892bea68ac180f19079cf08fea3b6cda0a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash48.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash48.C?ref=96c35892bea68ac180f19079cf08fea3b6cda0a8", "patch": "@@ -7,4 +7,4 @@ template<typename T> struct A\n   typedef typename T::X X;\n };\n \n-template<typename T> A<T>::X::X() {} // { dg-error \"no type|invalid use|not a type|dependent\" }\n+template<typename T> A<T>::X::X() {} // { dg-error \"expected|no type|invalid use|not a type|dependent\" }"}, {"sha": "fc78983324b353ebed4da5016bbcaa148b8503dd", "filename": "gcc/testsuite/g++.dg/template/dependent-name5.C", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96c35892bea68ac180f19079cf08fea3b6cda0a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-name5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96c35892bea68ac180f19079cf08fea3b6cda0a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-name5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-name5.C?ref=96c35892bea68ac180f19079cf08fea3b6cda0a8", "patch": "@@ -17,13 +17,15 @@ struct A\n   typedef Bar          type1;\n   typedef A::Bar       type2;\n   typedef A<T>::Bar    type3;\n-  typedef A<T*>::Bar    type4;  // { dg-error \"\" }\n+  typedef A<T*>::Bar    type4;  // { dg-error \"\" \"\" { target c++17_down } }\n   typedef typename A<T*>::Bar type5;\n \n   typedef N<int>       type6;\n   typedef A::N<int>    type7;\n+// { dg-error \"\" \"\" { target c++2a } .-1 }\n   typedef A<T>::N<int> type8;\n-  typedef A<T*>::template N<int> type9;  // { dg-error \"\" }\n+// { dg-error \"\" \"\" { target c++2a } .-1 }\n+  typedef A<T*>::template N<int> type9;  // { dg-error \"\" \"\" { target c++17_down } }\n   typedef typename A<T*>::template N<int> type10;\n \n   typedef D Bar2;\n@@ -36,7 +38,7 @@ struct A\n \n   typedef A::N2 type12;\n   typedef typename type12::K k2;\n-  typedef type12::K k1;  // { dg-error \"\" }\n+  typedef type12::K k1;  // { dg-error \"\" \"\" { target c++17_down } }\n \n   // Check that A::Bar2 is not considered dependent even if we use\n   // the typename keyword."}, {"sha": "6e335487224ba25cb5c019700e4ea7645c3c60be", "filename": "gcc/testsuite/g++.dg/template/error29.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96c35892bea68ac180f19079cf08fea3b6cda0a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror29.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96c35892bea68ac180f19079cf08fea3b6cda0a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror29.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror29.C?ref=96c35892bea68ac180f19079cf08fea3b6cda0a8", "patch": "@@ -1,5 +1,5 @@\n // PR c++/33209\n \n-template<typename T> void foo(int, T::x); // { dg-error \"T::x\" }\n+template<typename T> void foo(int, T::x); // { dg-error \"T::x\" \"\" { target c++17_down } }\n \n-template<template<typename> class T> void foo2(int, T<int>::x); // { dg-error \"T<int>::x\" }\n+template<template<typename> class T> void foo2(int, T<int>::x); // { dg-error \"T<int>::x\" \"\" { target c++17_down } }"}, {"sha": "e3e871e6d85989809de097db7732314e3067464f", "filename": "gcc/testsuite/g++.dg/template/nested5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96c35892bea68ac180f19079cf08fea3b6cda0a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnested5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96c35892bea68ac180f19079cf08fea3b6cda0a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnested5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnested5.C?ref=96c35892bea68ac180f19079cf08fea3b6cda0a8", "patch": "@@ -6,7 +6,7 @@ template <typename T> struct A\n   {\n     template <typename U> struct D {};\n   };\n-  template <typename S> static C::D<S> bar (S const &);\n+  template <typename S> static C::template D<S> bar (S const &);\n };\n \n struct E {};"}, {"sha": "bdf80dc3edf4d58d5038f3946bbf1640dcd16762", "filename": "gcc/testsuite/g++.dg/template/pr84789.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96c35892bea68ac180f19079cf08fea3b6cda0a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr84789.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96c35892bea68ac180f19079cf08fea3b6cda0a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr84789.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr84789.C?ref=96c35892bea68ac180f19079cf08fea3b6cda0a8", "patch": "@@ -9,5 +9,5 @@ template<typename> struct B : A {};\n \n template<typename T> struct C : B<T>\n {\n-  B<T>::A::I::I i; // { dg-error \"not a class type|does not name a type|typename\" }\n+  B<T>::A::I::I i; // { dg-error \"not a class type|does not name a type|typename\" \"\" { target c++17_down } }\n };"}, {"sha": "8b8637a1abea5bf176768e8f31dd424263376a02", "filename": "gcc/testsuite/g++.dg/template/static30.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96c35892bea68ac180f19079cf08fea3b6cda0a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic30.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96c35892bea68ac180f19079cf08fea3b6cda0a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic30.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic30.C?ref=96c35892bea68ac180f19079cf08fea3b6cda0a8", "patch": "@@ -6,5 +6,5 @@ template <int> struct A\n   static const int i2;\n };\n \n-template <int N> const int A<N>::i1(A<N>::i);\n+template <int N> const int A<N>::i1(A<N>::i); // { dg-error \"no declaration matches\" \"\" { target c++2a } }\n template <int N> const int A<N>::i2(3, A<N>::i); // { dg-error \"expression list\" }"}, {"sha": "a6202b551818f61c3793b9da5503fae94e793bf2", "filename": "gcc/testsuite/g++.dg/template/typedef6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96c35892bea68ac180f19079cf08fea3b6cda0a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96c35892bea68ac180f19079cf08fea3b6cda0a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef6.C?ref=96c35892bea68ac180f19079cf08fea3b6cda0a8", "patch": "@@ -5,4 +5,4 @@ template<typename T> struct A\n   typedef struct typename T::X X;       // { dg-error \"expected identifier|two or more\" }\n };\n \n-template<typename T> A<T>::X::X() {}    // { dg-error \"not a type|forbids declaration|invalid use of\" }\n+template<typename T> A<T>::X::X() {}    // { dg-error \"expected|not a type|forbids declaration|invalid use of\" }"}, {"sha": "ae10af2776378f3063fad8e495c372ed8365c943", "filename": "gcc/testsuite/g++.dg/template/typename3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96c35892bea68ac180f19079cf08fea3b6cda0a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypename3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96c35892bea68ac180f19079cf08fea3b6cda0a8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypename3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypename3.C?ref=96c35892bea68ac180f19079cf08fea3b6cda0a8", "patch": "@@ -3,5 +3,5 @@\n \n template <class A>\n struct B {\n- typedef A::C::D E;  // { dg-error \"\" }\n+ typedef A::C::D E;  // { dg-error \"\" \"\" { target c++17_down } }\n };"}]}