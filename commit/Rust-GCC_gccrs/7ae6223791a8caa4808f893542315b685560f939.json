{"sha": "7ae6223791a8caa4808f893542315b685560f939", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2FlNjIyMzc5MWE4Y2FhNDgwOGY4OTM1NDIzMTViNjg1NTYwZjkzOQ==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2009-11-14T21:07:23Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2009-11-14T21:07:23Z"}, "message": "iq2000.c (iq2000_function_value): Make static, add new 'outgoing' argument.\n\n\t* config/iq2000/iq2000.c (iq2000_function_value): Make static, add\n\tnew 'outgoing' argument.\n\t(iq2000_libcall_value, iq2000_function_value_regno_p): New functions.\n\t(TARGET_FUNCTION_VALUE, TARGET_LIBCALL_VALUE): Declare.\n\t* config/iq2000/iq2000.h: (FUNCTION_VALUE_REGNO_P): Redefine, use\n\tiq2000_function_value_regno_p.\n\t(FUNCTION_VALUE, LIBCALL_VALUE): Remove.\n\t* config/iq2000/iq2000-protos.h (iq2000_function_value_regno_p):\n\tDeclare.\n\nFrom-SVN: r154184", "tree": {"sha": "8589a78f9893d693f845ff9d91b8976c1f3fd08d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8589a78f9893d693f845ff9d91b8976c1f3fd08d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ae6223791a8caa4808f893542315b685560f939", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ae6223791a8caa4808f893542315b685560f939", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ae6223791a8caa4808f893542315b685560f939", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ae6223791a8caa4808f893542315b685560f939/comments", "author": null, "committer": null, "parents": [{"sha": "282cac16ce49087d657bb31d0e9841423cf40151", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/282cac16ce49087d657bb31d0e9841423cf40151", "html_url": "https://github.com/Rust-GCC/gccrs/commit/282cac16ce49087d657bb31d0e9841423cf40151"}], "stats": {"total": 66, "additions": 51, "deletions": 15}, "files": [{"sha": "e8ed5ebe17281995b5bace03872d90e5740a7130", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ae6223791a8caa4808f893542315b685560f939/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ae6223791a8caa4808f893542315b685560f939/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7ae6223791a8caa4808f893542315b685560f939", "patch": "@@ -1,3 +1,15 @@\n+2009-11-14  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* config/iq2000/iq2000.c (iq2000_function_value): Make static, add\n+\tnew 'outgoing' argument.\n+\t(iq2000_libcall_value, iq2000_function_value_regno_p): New functions.\n+\t(TARGET_FUNCTION_VALUE, TARGET_LIBCALL_VALUE): Declare.\n+\t* config/iq2000/iq2000.h: (FUNCTION_VALUE_REGNO_P): Redefine, use\n+\tiq2000_function_value_regno_p.\n+\t(FUNCTION_VALUE, LIBCALL_VALUE): Remove.\n+\t* config/iq2000/iq2000-protos.h (iq2000_function_value_regno_p):\n+\tDeclare.\n+\n 2009-11-14  Richard Earnshaw  <rearnsha@arm.com>\n \n \tPR target/42031"}, {"sha": "c01b6eee3b977c0019022805143c7db6290bea71", "filename": "gcc/config/iq2000/iq2000-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ae6223791a8caa4808f893542315b685560f939/gcc%2Fconfig%2Fiq2000%2Fiq2000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ae6223791a8caa4808f893542315b685560f939/gcc%2Fconfig%2Fiq2000%2Fiq2000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000-protos.h?ref=7ae6223791a8caa4808f893542315b685560f939", "patch": "@@ -47,7 +47,7 @@ extern void             gen_conditional_branch (rtx *, enum machine_mode);\n extern void             init_cumulative_args (CUMULATIVE_ARGS *, tree, rtx);\n extern void             function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode, tree, int);\n extern struct rtx_def * function_arg (CUMULATIVE_ARGS *, enum machine_mode, const_tree, int);\n-extern rtx              iq2000_function_value (const_tree, const_tree);\n+extern bool \t\tiq2000_function_value_regno_p (const unsigned int);\n #endif\n \n #endif /* ! GCC_IQ2000_PROTOS_H */"}, {"sha": "4359f5edfb93cb135dd0120e5f946b1d76d1684b", "filename": "gcc/config/iq2000/iq2000.c", "status": "modified", "additions": 37, "deletions": 2, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ae6223791a8caa4808f893542315b685560f939/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ae6223791a8caa4808f893542315b685560f939/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.c?ref=7ae6223791a8caa4808f893542315b685560f939", "patch": "@@ -168,6 +168,8 @@ static bool iq2000_legitimate_address_p (enum machine_mode, rtx, bool);\n static bool iq2000_can_eliminate      (const int, const int);\n static void iq2000_asm_trampoline_template (FILE *);\n static void iq2000_trampoline_init    (rtx, tree, rtx);\n+static rtx iq2000_function_value      (const_tree, const_tree, bool);\n+static rtx iq2000_libcall_value       (enum machine_mode, const_rtx);\n \n #undef  TARGET_INIT_BUILTINS\n #define TARGET_INIT_BUILTINS \t\tiq2000_init_builtins\n@@ -197,6 +199,10 @@ static void iq2000_trampoline_init    (rtx, tree, rtx);\n #undef  TARGET_PROMOTE_PROTOTYPES\n #define TARGET_PROMOTE_PROTOTYPES\thook_bool_const_tree_true\n \n+#undef TARGET_FUNCTION_VALUE\n+#define TARGET_FUNCTION_VALUE \t\tiq2000_function_value\n+#undef TARGET_LIBCALL_VALUE\n+#define TARGET_LIBCALL_VALUE\t\tiq2000_libcall_value\n #undef  TARGET_RETURN_IN_MEMORY\n #define TARGET_RETURN_IN_MEMORY\t\tiq2000_return_in_memory\n #undef  TARGET_PASS_BY_REFERENCE\n@@ -2210,18 +2216,47 @@ iq2000_select_section (tree decl, int reloc ATTRIBUTE_UNUSED,\n /* Return register to use for a function return value with VALTYPE for function\n    FUNC.  */\n \n-rtx\n-iq2000_function_value (const_tree valtype, const_tree func)\n+static rtx\n+iq2000_function_value (const_tree valtype,\n+\t\t       const_tree fn_decl_or_type,\n+\t\t       bool outgoing ATTRIBUTE_UNUSED)\n {\n   int reg = GP_RETURN;\n   enum machine_mode mode = TYPE_MODE (valtype);\n   int unsignedp = TYPE_UNSIGNED (valtype);\n+  tree func = fn_decl_or_type;\n+\n+  if (fn_decl_or_type\n+      && !DECL_P (fn_decl_or_type))\n+    fn_decl_or_type = NULL;\n \n   /* Since we promote return types, we must promote the mode here too.  */\n   mode = promote_function_mode (valtype, mode, &unsignedp, func, 1);\n \n   return gen_rtx_REG (mode, reg);\n }\n+\n+/* Worker function for TARGET_LIBCALL_VALUE.  */\n+\n+static rtx\n+iq2000_libcall_value (enum machine_mode mode, const_rtx fun ATTRIBUTE_UNUSED)\n+{\n+  return gen_rtx_REG (((GET_MODE_CLASS (mode) != MODE_INT\n+\t                || GET_MODE_SIZE (mode) >= 4)\n+\t               ? mode : SImode),\n+\t              GP_RETURN);\n+}\n+\n+/* Worker function for FUNCTION_VALUE_REGNO_P.\n+\n+   On the IQ2000, R2 and R3 are the only register thus used.  */\n+\n+bool\n+iq2000_function_value_regno_p (const unsigned int regno)\n+{\n+  return (regno == GP_RETURN);\n+}\n+\n \f\n /* Return true when an argument must be passed by reference.  */\n "}, {"sha": "0b207b5e8d446803e260f1e92811ab05c1765d2b", "filename": "gcc/config/iq2000/iq2000.h", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ae6223791a8caa4808f893542315b685560f939/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ae6223791a8caa4808f893542315b685560f939/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.h?ref=7ae6223791a8caa4808f893542315b685560f939", "patch": "@@ -422,20 +422,9 @@ typedef struct iq2000_args\n   (((N) >= GP_ARG_FIRST && (N) <= GP_ARG_LAST))\t\t\t\n \n \f\n-/* How Scalar Function Values are Returned.  */\n-\n-#define FUNCTION_VALUE(VALTYPE, FUNC)\tiq2000_function_value (VALTYPE, FUNC)\n-\n-#define LIBCALL_VALUE(MODE)\t\t\t\t\\\n-  gen_rtx_REG (((GET_MODE_CLASS (MODE) != MODE_INT\t\\\n-\t\t || GET_MODE_SIZE (MODE) >= 4)\t\t\\\n-\t\t? (MODE)\t\t\t\t\\\n-\t\t: SImode),\t\t\t\t\\\n-\t       GP_RETURN)\n-\n /* On the IQ2000, R2 and R3 are the only register thus used.  */\n \n-#define FUNCTION_VALUE_REGNO_P(N) ((N) == GP_RETURN)\n+#define FUNCTION_VALUE_REGNO_P(N) iq2000_function_value_regno_p (N)\n \n \f\n /* How Large Values are Returned.  */"}]}