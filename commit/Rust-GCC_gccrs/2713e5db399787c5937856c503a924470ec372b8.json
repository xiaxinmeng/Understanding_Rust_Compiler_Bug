{"sha": "2713e5db399787c5937856c503a924470ec372b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjcxM2U1ZGIzOTk3ODdjNTkzNzg1NmM1MDNhOTI0NDcwZWMzNzJiOA==", "commit": {"author": {"name": "Peter Bergner", "email": "bergner@linux.ibm.com", "date": "2019-03-06T15:36:43Z"}, "committer": {"name": "Peter Bergner", "email": "bergner@gcc.gnu.org", "date": "2019-03-06T15:36:43Z"}, "message": "re PR rtl-optimization/88845 (ICE in lra_set_insn_recog_data, at lra.c:1010)\n\ngcc/\n\tPR rtl-optimization/88845\n\t* config/rs6000/rs6000.c (rs6000_emit_move_si_sf_subreg): Enable during\n\tLRA.\n\t* lra.c (remove_scratches_1): New function.\n\t(remove_scratches): Use it.\n\t(lra_emit_move): Likewise.\n\ngcc/testsuite/\n\tPR rtl-optimization/88845\n\t* gcc.target/powerpc/pr88845.c: New test.\n\nFrom-SVN: r269428", "tree": {"sha": "101bd30017ea4d1f3ae1f8ca359904973443ab7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/101bd30017ea4d1f3ae1f8ca359904973443ab7f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2713e5db399787c5937856c503a924470ec372b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2713e5db399787c5937856c503a924470ec372b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2713e5db399787c5937856c503a924470ec372b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2713e5db399787c5937856c503a924470ec372b8/comments", "author": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ec2de569275fe76e9f7e4ca931e987be5638359f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec2de569275fe76e9f7e4ca931e987be5638359f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec2de569275fe76e9f7e4ca931e987be5638359f"}], "stats": {"total": 107, "additions": 78, "deletions": 29}, "files": [{"sha": "8a10820be2b6c244dd6cd81cbd6c9616a5ffcafe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2713e5db399787c5937856c503a924470ec372b8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2713e5db399787c5937856c503a924470ec372b8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2713e5db399787c5937856c503a924470ec372b8", "patch": "@@ -1,3 +1,12 @@\n+2019-03-06  Peter Bergner  <bergner@linux.ibm.com>\n+\n+\tPR rtl-optimization/88845\n+\t* config/rs6000/rs6000.c (rs6000_emit_move_si_sf_subreg): Enable during\n+\tLRA.\n+\t* lra.c (remove_scratches_1): New function.\n+\t(remove_scratches): Use it.\n+\t(lra_emit_move): Likewise.\n+\n 2019-03-06  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* config/arc/arc-c.def (__ARC_UNALIGNED__): Set it on"}, {"sha": "d72a51a01bfaa056a300b57121fce78c919c26ca", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2713e5db399787c5937856c503a924470ec372b8/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2713e5db399787c5937856c503a924470ec372b8/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=2713e5db399787c5937856c503a924470ec372b8", "patch": "@@ -9890,7 +9890,7 @@ valid_sf_si_move (rtx dest, rtx src, machine_mode mode)\n static bool\n rs6000_emit_move_si_sf_subreg (rtx dest, rtx source, machine_mode mode)\n {\n-  if (TARGET_DIRECT_MOVE_64BIT && !lra_in_progress && !reload_completed\n+  if (TARGET_DIRECT_MOVE_64BIT && !reload_completed\n       && (!SUBREG_P (dest) || !sf_subreg_operand (dest, mode))\n       && SUBREG_P (source) && sf_subreg_operand (source, mode))\n     {"}, {"sha": "bef2f676a78cf539594b6da79c5242d2d56e8a43", "filename": "gcc/lra.c", "status": "modified", "additions": 39, "deletions": 28, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2713e5db399787c5937856c503a924470ec372b8/gcc%2Flra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2713e5db399787c5937856c503a924470ec372b8/gcc%2Flra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra.c?ref=2713e5db399787c5937856c503a924470ec372b8", "patch": "@@ -159,6 +159,7 @@ static void invalidate_insn_recog_data (int);\n static int get_insn_freq (rtx_insn *);\n static void invalidate_insn_data_regno_info (lra_insn_recog_data_t,\n \t\t\t\t\t     rtx_insn *, int);\n+static void remove_scratches_1 (rtx_insn *);\n \n /* Expand all regno related info needed for LRA.  */\n static void\n@@ -494,7 +495,11 @@ lra_emit_move (rtx x, rtx y)\n       if (rtx_equal_p (x, y))\n \treturn;\n       old = max_reg_num ();\n-      emit_move_insn (x, y);\n+      rtx_insn *insn = emit_move_insn (x, y);\n+      /* The move pattern may require scratch registers, so convert them\n+\t into real registers now.  */\n+      if (insn != NULL_RTX)\n+\tremove_scratches_1 (insn);\n       if (REG_P (x))\n \tlra_reg_info[ORIGINAL_REGNO (x)].last_reload = ++lra_curr_reload_num;\n       /* Function emit_move can create pseudos -- so expand the pseudo\n@@ -2077,47 +2082,53 @@ lra_register_new_scratch_op (rtx_insn *insn, int nop, int icode)\n   add_reg_note (insn, REG_UNUSED, op);\n }\n \n-/* Change scratches onto pseudos and save their location.  */\n+/* Change INSN's scratches into pseudos and save their location.  */\n static void\n-remove_scratches (void)\n+remove_scratches_1 (rtx_insn *insn)\n {\n   int i;\n   bool insn_changed_p;\n-  basic_block bb;\n-  rtx_insn *insn;\n   rtx reg;\n   lra_insn_recog_data_t id;\n   struct lra_static_insn_data *static_id;\n \n+  id = lra_get_insn_recog_data (insn);\n+  static_id = id->insn_static_data;\n+  insn_changed_p = false;\n+  for (i = 0; i < static_id->n_operands; i++)\n+    if (GET_CODE (*id->operand_loc[i]) == SCRATCH\n+\t&& GET_MODE (*id->operand_loc[i]) != VOIDmode)\n+      {\n+\tinsn_changed_p = true;\n+\t*id->operand_loc[i] = reg\n+\t  = lra_create_new_reg (static_id->operand[i].mode,\n+\t\t\t\t*id->operand_loc[i], ALL_REGS, NULL);\n+\tlra_register_new_scratch_op (insn, i, id->icode);\n+\tif (lra_dump_file != NULL)\n+\t  fprintf (lra_dump_file,\n+\t\t   \"Removing SCRATCH in insn #%u (nop %d)\\n\",\n+\t\t   INSN_UID (insn), i);\n+      }\n+  if (insn_changed_p)\n+    /* Because we might use DF right after caller-saves sub-pass\n+       we need to keep DF info up to date.  */\n+    df_insn_rescan (insn);\n+}\n+\n+/* Change scratches into pseudos and save their location.  */\n+static void\n+remove_scratches (void)\n+{\n+  basic_block bb;\n+  rtx_insn *insn;\n+\n   scratches.create (get_max_uid ());\n   bitmap_initialize (&scratch_bitmap, &reg_obstack);\n   bitmap_initialize (&scratch_operand_bitmap, &reg_obstack);\n   FOR_EACH_BB_FN (bb, cfun)\n     FOR_BB_INSNS (bb, insn)\n     if (INSN_P (insn))\n-      {\n-\tid = lra_get_insn_recog_data (insn);\n-\tstatic_id = id->insn_static_data;\n-\tinsn_changed_p = false;\n-\tfor (i = 0; i < static_id->n_operands; i++)\n-\t  if (GET_CODE (*id->operand_loc[i]) == SCRATCH\n-\t      && GET_MODE (*id->operand_loc[i]) != VOIDmode)\n-\t    {\n-\t      insn_changed_p = true;\n-\t      *id->operand_loc[i] = reg\n-\t\t= lra_create_new_reg (static_id->operand[i].mode,\n-\t\t\t\t      *id->operand_loc[i], ALL_REGS, NULL);\n-\t      lra_register_new_scratch_op (insn, i, id->icode);\n-\t      if (lra_dump_file != NULL)\n-\t\tfprintf (lra_dump_file,\n-\t\t\t \"Removing SCRATCH in insn #%u (nop %d)\\n\",\n-\t\t\t INSN_UID (insn), i);\n-\t    }\n-\tif (insn_changed_p)\n-\t  /* Because we might use DF right after caller-saves sub-pass\n-\t     we need to keep DF info up to date.  */\n-\t  df_insn_rescan (insn);\n-      }\n+      remove_scratches_1 (insn);\n }\n \n /* Changes pseudos created by function remove_scratches onto scratches.\t */"}, {"sha": "9a65e3a81470b2d48ae609d2f96de12ef32cf91f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2713e5db399787c5937856c503a924470ec372b8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2713e5db399787c5937856c503a924470ec372b8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2713e5db399787c5937856c503a924470ec372b8", "patch": "@@ -1,3 +1,8 @@\n+2019-03-06  Peter Bergner  <bergner@linux.ibm.com>\n+\n+\tPR rtl-optimization/88845\n+\t* gcc.target/powerpc/pr88845.c: New test.\n+\n 2019-03-06  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/87378 - bogus -Wredundant-move warning."}, {"sha": "a939fa950bf6a94f20a3be7f0c0fd95f0aa4565f", "filename": "gcc/testsuite/gcc.target/powerpc/pr88845.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2713e5db399787c5937856c503a924470ec372b8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr88845.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2713e5db399787c5937856c503a924470ec372b8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr88845.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr88845.c?ref=2713e5db399787c5937856c503a924470ec372b8", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile { target powerpc*-*-linux* } } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } } */\n+/* { dg-skip-if \"\" { powerpc*-*-*spe* } } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-options \"-mdejagnu-cpu=power8 -O2\" } */\n+/* { dg-final { scan-assembler {\\mmtvsrd\\M} { target { lp64 } } } } */\n+/* { dg-final { scan-assembler {\\mxscvspdpn\\M} { target { lp64 } } } } */\n+\n+/* Verify that we do not ICE and that we generate a direct move\n+   for float types when compiling for 64-bit.  */\n+\n+struct a {\n+  unsigned ui;\n+  float f;\n+};\n+\n+void\n+foo (void)\n+{\n+  float e;\n+  struct a s;\n+  e = s.f;\n+  __asm__(\"\" : : \"d\" (e));\n+}"}]}