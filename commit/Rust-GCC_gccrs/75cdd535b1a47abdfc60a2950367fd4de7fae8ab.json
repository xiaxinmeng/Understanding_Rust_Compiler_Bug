{"sha": "75cdd535b1a47abdfc60a2950367fd4de7fae8ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzVjZGQ1MzViMWE0N2FiZGZjNjBhMjk1MDM2N2ZkNGRlN2ZhZThhYg==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2018-10-18T10:37:39Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2018-10-18T10:37:39Z"}, "message": "re PR fortran/58618 (Wrong code with character substring and ASSOCIATE)\n\n2018-10-18  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/58618\n\t* trans-stmt.c (trans_associate_var): All strings that return\n\tas pointer types can be assigned directly to the associate\n\tname so remove 'attr' and the condition that uses it.\n\n2018-10-18  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/58618\n\t* gfortran.dg/associate_45.f90 : New test.\n\nFrom-SVN: r265264", "tree": {"sha": "844e2779d07158b3f36767db7d316ce52f377f96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/844e2779d07158b3f36767db7d316ce52f377f96"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75cdd535b1a47abdfc60a2950367fd4de7fae8ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75cdd535b1a47abdfc60a2950367fd4de7fae8ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75cdd535b1a47abdfc60a2950367fd4de7fae8ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75cdd535b1a47abdfc60a2950367fd4de7fae8ab/comments", "author": null, "committer": null, "parents": [{"sha": "75a6d7da396ca7cecdc1b0e977203bb58a8ca024", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75a6d7da396ca7cecdc1b0e977203bb58a8ca024", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75a6d7da396ca7cecdc1b0e977203bb58a8ca024"}], "stats": {"total": 57, "additions": 52, "deletions": 5}, "files": [{"sha": "13e35812bad59f59c95d0d7c0a9b858f5b0115a6", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75cdd535b1a47abdfc60a2950367fd4de7fae8ab/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75cdd535b1a47abdfc60a2950367fd4de7fae8ab/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=75cdd535b1a47abdfc60a2950367fd4de7fae8ab", "patch": "@@ -1,3 +1,10 @@\n+2018-10-18  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/58618\n+\t* trans-stmt.c (trans_associate_var): All strings that return\n+\tas pointer types can be assigned directly to the associate\n+\tname so remove 'attr' and the condition that uses it.\n+\n 2018-10-18  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/58618"}, {"sha": "00fdf19d730ae34b850f546d6760a6383af61a5b", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75cdd535b1a47abdfc60a2950367fd4de7fae8ab/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75cdd535b1a47abdfc60a2950367fd4de7fae8ab/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=75cdd535b1a47abdfc60a2950367fd4de7fae8ab", "patch": "@@ -1656,7 +1656,6 @@ trans_associate_var (gfc_symbol *sym, gfc_wrapped_block *block)\n   bool need_len_assign;\n   bool whole_array = true;\n   gfc_ref *ref;\n-  symbol_attribute attr;\n \n   gcc_assert (sym->assoc);\n   e = sym->assoc->target;\n@@ -1916,18 +1915,16 @@ trans_associate_var (gfc_symbol *sym, gfc_wrapped_block *block)\n \t    }\n \t}\n \n-      attr = gfc_expr_attr (e);\n       if (sym->ts.type == BT_CHARACTER && e->ts.type == BT_CHARACTER\n-\t  && (attr.allocatable || attr.pointer || attr.dummy)\n \t  && POINTER_TYPE_P (TREE_TYPE (se.expr)))\n \t{\n \t  /* These are pointer types already.  */\n \t  tmp = fold_convert (TREE_TYPE (sym->backend_decl), se.expr);\n \t}\n       else\n \t{\n-          tmp = TREE_TYPE (sym->backend_decl);\n-          tmp = gfc_build_addr_expr (tmp, se.expr);\n+\t  tmp = TREE_TYPE (sym->backend_decl);\n+\t  tmp = gfc_build_addr_expr (tmp, se.expr);\n \t}\n \n       gfc_add_modify (&se.pre, sym->backend_decl, tmp);"}, {"sha": "6f7d3b9e8838fe3725d5852dfbe555907f0e9f31", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75cdd535b1a47abdfc60a2950367fd4de7fae8ab/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75cdd535b1a47abdfc60a2950367fd4de7fae8ab/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=75cdd535b1a47abdfc60a2950367fd4de7fae8ab", "patch": "@@ -1,3 +1,8 @@\n+2018-10-18  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/58618\n+\t* gfortran.dg/associate_45.f90 : New test.\n+\n 2018-10-18  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/58618"}, {"sha": "c3b9c86dc5cdb22354dfa187de88c680721d613a", "filename": "gcc/testsuite/gfortran.dg/associate_45.f90", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75cdd535b1a47abdfc60a2950367fd4de7fae8ab/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_45.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75cdd535b1a47abdfc60a2950367fd4de7fae8ab/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_45.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_45.f90?ref=75cdd535b1a47abdfc60a2950367fd4de7fae8ab", "patch": "@@ -0,0 +1,38 @@\n+! { dg-do run }\n+!\n+! Test the fix for PR58618 by checking that substring associate targets\n+! work correctly.\n+!\n+! Contributed by Vladimir Fuka  <vladimir.fuka@gmail.com>\n+!\n+    character(5) :: s(2) = ['abcde','fghij']\n+    character (6), pointer :: ptr => NULL()\n+    character (6), target :: tgt = 'lmnopq'\n+\n+    associate (x=>s(2)(3:4))\n+      if (x .ne. 'hi') stop 1\n+      x = 'uv'\n+    end associate\n+    if (any (s .ne. ['abcde','fguvj'])) stop 2\n+\n+! Unity based substrings are cast differently.  */\n+    associate (x=>s(1)(1:4))\n+      if (x .ne. 'abcd') stop 3\n+      x(2:3) = 'wx'\n+    end associate\n+    if (any (s .ne. ['awxde','fguvj'])) stop 4\n+\n+! Make sure that possible misidentifications do not occur.\n+    ptr => tgt\n+    associate (x=>ptr)\n+      if (x .ne. 'lmnopq') stop 5\n+      x(2:3) = 'wx'\n+    end associate\n+    if (tgt .ne. 'lwxopq') stop 6\n+\n+    associate (x=>ptr(5:6))\n+      if (x .ne. 'pq') stop 7\n+      x = 'wx'\n+    end associate\n+    if (tgt .ne. 'lwxowx') stop 8\n+  end"}]}