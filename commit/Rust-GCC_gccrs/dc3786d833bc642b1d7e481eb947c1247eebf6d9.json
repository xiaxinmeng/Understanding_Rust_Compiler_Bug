{"sha": "dc3786d833bc642b1d7e481eb947c1247eebf6d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGMzNzg2ZDgzM2JjNjQyYjFkN2U0ODFlYjk0N2MxMjQ3ZWViZjZkOQ==", "commit": {"author": {"name": "Per Bothner", "email": "pbothner@apple.com", "date": "2003-08-26T22:53:22Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "2003-08-26T22:53:22Z"}, "message": "Copy over from cs branch:\n\n\t* cpplib.h (struct cpp_token):  Change type of field line to fileline.\n\t(cpp_error_with_line):  Use fileline for appropriate parameter.\n\t* cpphash.h (struct cpp_macro):  Change type of field line to fileline.\n\t(struct cpp_reader):  Likewise for fields line and directive_line.\n\t(_cpp_begin_message):  Use fileline for appropriate parameter.\n\t* cpperror.c (print_location, _cpp_begin_message, cpp_error_with_line,\n\tcpp_error):  Use fileline for appropriate parameters and variables.\n\t(print_location):  New local lin, since it is not a fileline.\n\nFrom-SVN: r70826", "tree": {"sha": "4ae24f4c9ddb5a1cde65438aa13e8e99b3a74c7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ae24f4c9ddb5a1cde65438aa13e8e99b3a74c7e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc3786d833bc642b1d7e481eb947c1247eebf6d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc3786d833bc642b1d7e481eb947c1247eebf6d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc3786d833bc642b1d7e481eb947c1247eebf6d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc3786d833bc642b1d7e481eb947c1247eebf6d9/comments", "author": null, "committer": null, "parents": [{"sha": "a85993787b6d4270ae5447eed498168a1c37642b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a85993787b6d4270ae5447eed498168a1c37642b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a85993787b6d4270ae5447eed498168a1c37642b"}], "stats": {"total": 45, "additions": 29, "deletions": 16}, "files": [{"sha": "cedfc01f78ad1a8a4f8d58db7343e4a56501f457", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc3786d833bc642b1d7e481eb947c1247eebf6d9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc3786d833bc642b1d7e481eb947c1247eebf6d9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dc3786d833bc642b1d7e481eb947c1247eebf6d9", "patch": "@@ -1,3 +1,14 @@\n+2003-08-26  Per Bothner  <pbothner@apple.com>\n+\n+\t* cpplib.h (struct cpp_token):  Change type of field line to fileline.\n+\t(cpp_error_with_line):  Use fileline for appropriate parameter.\n+\t* cpphash.h (struct cpp_macro):  Change type of field line to fileline.\n+\t(struct cpp_reader):  Likewise for fields line and directive_line.\n+\t(_cpp_begin_message):  Use fileline for appropriate parameter.\n+\t* cpperror.c (print_location, _cpp_begin_message, cpp_error_with_line,\n+\tcpp_error):  Use fileline for appropriate parameters and variables.\n+\t(print_location):  New local lin, since it is not a fileline.\n+\n 2003-08-26  Roger Sayle  <roger@eyesopen.com>\n \n \tPR middle-end/12002"}, {"sha": "4eed95102758c22707e7ccf4887e435cf8888943", "filename": "gcc/cpperror.c", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc3786d833bc642b1d7e481eb947c1247eebf6d9/gcc%2Fcpperror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc3786d833bc642b1d7e481eb947c1247eebf6d9/gcc%2Fcpperror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpperror.c?ref=dc3786d833bc642b1d7e481eb947c1247eebf6d9", "patch": "@@ -29,34 +29,35 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n #include \"cpphash.h\"\n #include \"intl.h\"\n \n-static void print_location (cpp_reader *, unsigned int, unsigned int);\n+static void print_location (cpp_reader *, fileline, unsigned int);\n \n /* Print the logical file location (LINE, COL) in preparation for a\n    diagnostic.  Outputs the #include chain if it has changed.  A line\n    of zero suppresses the include stack, and outputs the program name\n    instead.  */\n static void\n-print_location (cpp_reader *pfile, unsigned int line, unsigned int col)\n+print_location (cpp_reader *pfile, fileline line, unsigned int col)\n {\n   if (!pfile->buffer || line == 0)\n     fprintf (stderr, \"%s: \", progname);\n   else\n     {\n       const struct line_map *map;\n+      unsigned int lin;\n \n       map = linemap_lookup (&pfile->line_maps, line);\n       linemap_print_containing_files (&pfile->line_maps, map);\n \n-      line = SOURCE_LINE (map, line);\n+      lin = SOURCE_LINE (map, line);\n       if (col == 0)\n \tcol = 1;\n \n-      if (line == 0)\n+      if (lin == 0)\n \tfprintf (stderr, \"%s:\", map->to_file);\n       else if (CPP_OPTION (pfile, show_column) == 0)\n-\tfprintf (stderr, \"%s:%u:\", map->to_file, line);\n+\tfprintf (stderr, \"%s:%u:\", map->to_file, lin);\n       else\n-\tfprintf (stderr, \"%s:%u:%u:\", map->to_file, line, col);\n+\tfprintf (stderr, \"%s:%u:%u:\", map->to_file, lin, col);\n \n       fputc (' ', stderr);\n     }\n@@ -68,7 +69,7 @@ print_location (cpp_reader *pfile, unsigned int line, unsigned int col)\n    the correct place by default.  Returns 0 if the error has been\n    suppressed.  */\n int\n-_cpp_begin_message (cpp_reader *pfile, int code, unsigned int line,\n+_cpp_begin_message (cpp_reader *pfile, int code, fileline line,\n \t\t    unsigned int column)\n {\n   int level = DL_EXTRACT (code);\n@@ -124,7 +125,8 @@ _cpp_begin_message (cpp_reader *pfile, int code, unsigned int line,\n void\n cpp_error (cpp_reader * pfile, int level, const char *msgid, ...)\n {\n-  unsigned int line, column;\n+  fileline line;\n+  unsigned int column;\n   va_list ap;\n   \n   va_start (ap, msgid);\n@@ -157,7 +159,7 @@ cpp_error (cpp_reader * pfile, int level, const char *msgid, ...)\n /* Print an error at a specific location.  */\n void\n cpp_error_with_line (cpp_reader *pfile, int level,\n-\t\t     unsigned int line, unsigned int column,\n+\t\t     fileline line, unsigned int column,\n \t\t     const char *msgid, ...)\n {\n   va_list ap;"}, {"sha": "e6eadce9ef3ef3ba891efb2559acb1e760e2b321", "filename": "gcc/cpphash.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc3786d833bc642b1d7e481eb947c1247eebf6d9/gcc%2Fcpphash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc3786d833bc642b1d7e481eb947c1247eebf6d9/gcc%2Fcpphash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.h?ref=dc3786d833bc642b1d7e481eb947c1247eebf6d9", "patch": "@@ -100,7 +100,7 @@ struct cpp_macro\n   } exp;\n \n   /* Definition line number.  */\n-  unsigned int line;\n+  fileline line;\n \n   /* Number of tokens in expansion, or bytes for traditional macros.  */\n   unsigned int count;\n@@ -337,10 +337,10 @@ struct cpp_reader\n   /* Source line tracking.  */\n   struct line_maps line_maps;\n   const struct line_map *map;\n-  unsigned int line;\n+  fileline line;\n \n   /* The line of the '#' of the current directive.  */\n-  unsigned int directive_line;\n+  fileline directive_line;\n \n   /* Memory buffers.  */\n   _cpp_buff *a_buff;\t\t/* Aligned permanent storage.  */\n@@ -497,7 +497,7 @@ extern unsigned char _cpp_trigraph_map[UCHAR_MAX + 1];\n #define CPP_WTRADITIONAL(PF) CPP_OPTION (PF, warn_traditional)\n \n /* In cpperror.c  */\n-extern int _cpp_begin_message (cpp_reader *, int, unsigned int, unsigned int);\n+extern int _cpp_begin_message (cpp_reader *, int, fileline, unsigned int);\n \n /* In cppmacro.c */\n extern void _cpp_free_definition (cpp_hashnode *);"}, {"sha": "fdd9a4e3299a996687a1e46cea8fbf487fd60bde", "filename": "gcc/cpplib.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc3786d833bc642b1d7e481eb947c1247eebf6d9/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc3786d833bc642b1d7e481eb947c1247eebf6d9/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=dc3786d833bc642b1d7e481eb947c1247eebf6d9", "patch": "@@ -174,7 +174,7 @@ struct cpp_string\n    occupy 16 bytes on 32-bit hosts and 24 bytes on 64-bit hosts.  */\n struct cpp_token\n {\n-  unsigned int line;\t\t/* Logical line of first char of token.  */\n+  fileline line;\t\t/* Logical line of first char of token.  */\n   unsigned short col;\t\t/* Column of first char of token.  */\n   ENUM_BITFIELD(cpp_ttype) type : CHAR_BIT;  /* token type */\n   unsigned char flags;\t\t/* flags - see above */\n@@ -680,8 +680,8 @@ extern void cpp_errno (cpp_reader *, int, const char *msgid);\n /* Same as cpp_error, except additionally specifies a position as a\n    (translation unit) physical line and physical column.  If the line is\n    zero, then no location is printed.  */\n-extern void cpp_error_with_line (cpp_reader *, int, unsigned, unsigned, const char *msgid, ...)\n-  ATTRIBUTE_PRINTF_5;\n+extern void cpp_error_with_line (cpp_reader *, int, fileline, unsigned,\n+\t\t\t\t const char *msgid, ...) ATTRIBUTE_PRINTF_5;\n \n /* In cpplex.c */\n extern int cpp_ideq (const cpp_token *, const char *);"}]}