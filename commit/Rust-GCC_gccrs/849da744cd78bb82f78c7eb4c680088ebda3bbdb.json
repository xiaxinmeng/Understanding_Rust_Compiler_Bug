{"sha": "849da744cd78bb82f78c7eb4c680088ebda3bbdb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQ5ZGE3NDRjZDc4YmI4MmY3OGM3ZWI0YzY4MDA4OGViZGEzYmJkYg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@markmitchell.com", "date": "1998-10-07T02:08:55Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1998-10-07T02:08:55Z"}, "message": "cp-tree.h (vtbl_ptr_type_node): New variable.\n\n\t* cp-tree.h (vtbl_ptr_type_node): New variable.\n\t* class.c (build_vtbl_ref): Don't indirect through the vptr; it's\n\talready of the right type.\n\t(finish_struct_1): Make the vptr be of type vtbl_ptr_type_node.\n\tSimplify code to grow vtable.\n\t* decl.c (vtbl_ptr_type_node): Define.\n\t(init_decl_processing): Initialize it.\n\nFrom-SVN: r22879", "tree": {"sha": "d6d14a05cdf4dbd537bc2d3c64ebe47d85770142", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6d14a05cdf4dbd537bc2d3c64ebe47d85770142"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/849da744cd78bb82f78c7eb4c680088ebda3bbdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/849da744cd78bb82f78c7eb4c680088ebda3bbdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/849da744cd78bb82f78c7eb4c680088ebda3bbdb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/849da744cd78bb82f78c7eb4c680088ebda3bbdb/comments", "author": null, "committer": null, "parents": [{"sha": "4c2f834629ce0babf6ffa241ae483ecaac4d1bd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c2f834629ce0babf6ffa241ae483ecaac4d1bd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c2f834629ce0babf6ffa241ae483ecaac4d1bd9"}], "stats": {"total": 61, "additions": 26, "deletions": 35}, "files": [{"sha": "0ca49d216590fd5ab14bf5cbe766684df41c7b83", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/849da744cd78bb82f78c7eb4c680088ebda3bbdb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/849da744cd78bb82f78c7eb4c680088ebda3bbdb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=849da744cd78bb82f78c7eb4c680088ebda3bbdb", "patch": "@@ -1,3 +1,13 @@\n+1998-10-07  Mark Mitchell  <mark@markmitchell.com>\n+\n+\t* cp-tree.h (vtbl_ptr_type_node): New variable.\n+\t* class.c (build_vtbl_ref): Don't indirect through the vptr; it's\n+\talready of the right type.\n+\t(finish_struct_1): Make the vptr be of type vtbl_ptr_type_node.\n+\tSimplify code to grow vtable.\n+\t* decl.c (vtbl_ptr_type_node): Define.\n+\t(init_decl_processing): Initialize it.\n+\t\n 1998-10-06  Mark Mitchell  <mark@markmitchell.com>\n \n \t* cp-tree.def (PTRMEM_CST): New tree node."}, {"sha": "da331fa251e4f03b60d3f2d5f1f69b0404814d2c", "filename": "gcc/cp/class.c", "status": "modified", "additions": 9, "deletions": 34, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/849da744cd78bb82f78c7eb4c680088ebda3bbdb/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/849da744cd78bb82f78c7eb4c680088ebda3bbdb/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=849da744cd78bb82f78c7eb4c680088ebda3bbdb", "patch": "@@ -501,8 +501,7 @@ build_vtbl_ref (instance, idx)\n     basetype = TREE_TYPE (basetype);\n \n   if (instance == current_class_ref)\n-    vtbl = build_indirect_ref (build_vfield_ref (instance, basetype),\n-\t\t\t       NULL_PTR);\n+    vtbl = build_vfield_ref (instance, basetype);\n   else\n     {\n       if (optimize)\n@@ -542,8 +541,7 @@ build_vtbl_ref (instance, idx)\n \t      || TREE_CODE (instance) == VAR_DECL))\n \tvtbl = TYPE_BINFO_VTABLE (basetype);\n       else\n-\tvtbl = build_indirect_ref (build_vfield_ref (instance, basetype),\n-\t\t\t\t   NULL_PTR);\n+\tvtbl = build_vfield_ref (instance, basetype);\n     }\n \n   assemble_external (vtbl);\n@@ -3782,7 +3780,7 @@ finish_struct_1 (t, warn_anon)\n       /* We build this decl with ptr_type_node, and\n \t change the type when we know what it should be.  */\n       vfield = build_lang_field_decl (FIELD_DECL, get_vfield_name (t),\n-\t\t\t\t      ptr_type_node);\n+\t\t\t\t      vtbl_ptr_type_node);\n       /* If you change any of the below, take a look at all the\n \t other VFIELD_BASEs and VTABLE_BASEs in the code, and change\n \t them too.  */\n@@ -4090,38 +4088,15 @@ finish_struct_1 (t, warn_anon)\n   /* Now lay out the virtual function table.  */\n   if (has_virtual)\n     {\n-      tree atype, itype;\n+      /* Use size_int so values are memoized in common cases.  */\n+      tree itype = build_index_type (size_int (has_virtual));\n+      tree atype = build_array_type (vtable_entry_type, itype);\n \n-      if (TREE_TYPE (vfield) == ptr_type_node)\n-\t{\n-\t  /* We must create a pointer to this table because\n-\t     the one inherited from base class does not exist.\n-\t     We will fill in the type when we know what it\n-\t     should really be.  Use `size_int' so values are memoized\n-\t     in common cases.  */\n-\t  itype = build_index_type (size_int (has_virtual));\n-\t  atype = build_array_type (vtable_entry_type, itype);\n-\t  layout_type (atype);\n-\t  TREE_TYPE (vfield) = build_pointer_type (atype);\n-\t}\n-      else\n-\t{\n-\t  atype = TREE_TYPE (TREE_TYPE (vfield));\n-\n-\t  if (has_virtual != TREE_INT_CST_LOW (TYPE_MAX_VALUE (TYPE_DOMAIN (atype))))\n-\t    {\n-\t      /* We must extend (or create) the boundaries on this array,\n-\t\t because we picked up virtual functions from multiple\n-\t\t base classes.  */\n-\t      itype = build_index_type (size_int (has_virtual));\n-\t      atype = build_array_type (vtable_entry_type, itype);\n-\t      layout_type (atype);\n-\t      vfield = copy_node (vfield);\n-\t      TREE_TYPE (vfield) = build_pointer_type (atype);\n-\t    }\n-\t}\n+      layout_type (atype);\n \n       CLASSTYPE_VFIELD (t) = vfield;\n+\n+      /* We may have to grow the vtable.  */\n       if (TREE_TYPE (TYPE_BINFO_VTABLE (t)) != atype)\n \t{\n \t  TREE_TYPE (TYPE_BINFO_VTABLE (t)) = atype;"}, {"sha": "14298ff6b0089203f4834428de73bde197362b96", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/849da744cd78bb82f78c7eb4c680088ebda3bbdb/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/849da744cd78bb82f78c7eb4c680088ebda3bbdb/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=849da744cd78bb82f78c7eb4c680088ebda3bbdb", "patch": "@@ -1931,8 +1931,10 @@ extern tree opaque_type_node, signature_type_node;\n #define vfunc_ptr_type_node \\\n   (flag_vtable_thunks ? vtable_entry_type : ptr_type_node)\n \n-/* Array type `(void *)[]' */\n+/* The type of a vtbl, i.e., an array of vtable entries.  */\n extern tree vtbl_type_node;\n+/* The type of a class vtbl pointer, i.e., a pointer to a vtable entry.  */\n+extern tree vtbl_ptr_type_node;\n extern tree delta_type_node;\n extern tree std_node;\n "}, {"sha": "e11db1c16dc7bdb2a096aa5c556b0e7f5d8efdca", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/849da744cd78bb82f78c7eb4c680088ebda3bbdb/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/849da744cd78bb82f78c7eb4c680088ebda3bbdb/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=849da744cd78bb82f78c7eb4c680088ebda3bbdb", "patch": "@@ -329,6 +329,7 @@ tree sigtable_entry_type;\n \n /* Array type `vtable_entry_type[]' */\n tree vtbl_type_node;\n+tree vtbl_ptr_type_node;\n \n /* namespace std */\n tree std_node;\n@@ -6148,6 +6149,9 @@ init_decl_processing ()\n   layout_type (vtbl_type_node);\n   vtbl_type_node = cp_build_type_variant (vtbl_type_node, 1, 0);\n   record_builtin_type (RID_MAX, NULL_PTR, vtbl_type_node);\n+  vtbl_ptr_type_node = build_pointer_type (vtable_entry_type);\n+  layout_type (vtbl_ptr_type_node);\n+  record_builtin_type (RID_MAX, NULL_PTR, vtbl_ptr_type_node);\n \n   /* Simplify life by making a \"sigtable_entry_type\".  Give its\n      fields names so that the debugger can use them.  */"}]}