{"sha": "8386b63d3d95d4e14f220058c2c4a97044cafcc8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODM4NmI2M2QzZDk1ZDRlMTRmMjIwMDU4YzJjNGE5NzA0NGNhZmNjOA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-01-19T05:24:55Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-01-19T05:24:55Z"}, "message": "Fix struct with field of pointer to array of same struct.\n\nFrom-SVN: r168981", "tree": {"sha": "d0b7eaecff4011883b0652d507ab59ba492bc38c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0b7eaecff4011883b0652d507ab59ba492bc38c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8386b63d3d95d4e14f220058c2c4a97044cafcc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8386b63d3d95d4e14f220058c2c4a97044cafcc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8386b63d3d95d4e14f220058c2c4a97044cafcc8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8386b63d3d95d4e14f220058c2c4a97044cafcc8/comments", "author": null, "committer": null, "parents": [{"sha": "85220919931d810f14b1acd77a402e53e828a3a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85220919931d810f14b1acd77a402e53e828a3a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85220919931d810f14b1acd77a402e53e828a3a8"}], "stats": {"total": 32, "additions": 29, "deletions": 3}, "files": [{"sha": "dd0a861d49feba51bddb1a5f32ae983f2577a3e3", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 29, "deletions": 3, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8386b63d3d95d4e14f220058c2c4a97044cafcc8/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8386b63d3d95d4e14f220058c2c4a97044cafcc8/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=8386b63d3d95d4e14f220058c2c4a97044cafcc8", "patch": "@@ -3745,15 +3745,29 @@ Struct_type::fill_in_tree(Gogo* gogo, tree type)\n {\n   tree field_trees = NULL_TREE;\n   tree* pp = &field_trees;\n+  bool has_pointer = false;\n   for (Struct_field_list::const_iterator p = this->fields_->begin();\n        p != this->fields_->end();\n        ++p)\n     {\n       std::string name = Gogo::unpack_hidden_name(p->field_name());\n       tree name_tree = get_identifier_with_length(name.data(), name.length());\n-      tree field_type_tree = p->type()->get_tree(gogo);\n-      if (field_type_tree == error_mark_node)\n-\treturn error_mark_node;\n+\n+      // Don't follow pointers yet, so that we don't get confused by a\n+      // pointer to an array of this struct type.\n+      tree field_type_tree;\n+      if (p->type()->points_to() != NULL)\n+\t{\n+\t  field_type_tree = ptr_type_node;\n+\t  has_pointer = true;\n+\t}\n+      else\n+\t{\n+\t  field_type_tree = p->type()->get_tree(gogo);\n+\t  if (field_type_tree == error_mark_node)\n+\t    return error_mark_node;\n+\t}\n+\n       tree field = build_decl(p->location(), FIELD_DECL, name_tree,\n \t\t\t      field_type_tree);\n       DECL_CONTEXT(field) = type;\n@@ -3765,6 +3779,18 @@ Struct_type::fill_in_tree(Gogo* gogo, tree type)\n \n   layout_type(type);\n \n+  if (has_pointer)\n+    {\n+      tree field = field_trees;\n+      for (Struct_field_list::const_iterator p = this->fields_->begin();\n+\t   p != this->fields_->end();\n+\t   ++p, field = DECL_CHAIN(field))\n+\t{\n+\t  if (p->type()->points_to() != NULL)\n+\t    TREE_TYPE(field) = p->type()->get_tree(gogo);\n+\t}\n+    }\n+\n   return type;\n }\n "}]}