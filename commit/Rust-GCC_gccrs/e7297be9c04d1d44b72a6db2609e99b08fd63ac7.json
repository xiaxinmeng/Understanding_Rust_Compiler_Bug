{"sha": "e7297be9c04d1d44b72a6db2609e99b08fd63ac7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTcyOTdiZTljMDRkMWQ0NGI3MmE2ZGIyNjA5ZTk5YjA4ZmQ2M2FjNw==", "commit": {"author": {"name": "Olga Makhotina", "email": "olga.makhotina@intel.com", "date": "2018-03-15T15:46:38Z"}, "committer": {"name": "Igor Tsimbalist", "email": "itsimbal@gcc.gnu.org", "date": "2018-03-15T15:46:38Z"}, "message": "Enable Intel ENCLV support.\n\n2018-03-15  Olga Makhotina  <olga.makhotina@intel.com>\n\ngcc/\n        * config/i386/sgxintrin.h (_enclv_u32): New intrinsic.\n        (__enclv_bc, __enclv_cd, __enclv_generic): New definitions.\n        (ERDINFO, ETRACKC, ELDBC, ELDUC): New leaves.\n\ngcc/testsuite/\n        * gcc.target/i386/sgx.c (_enclv_u32): Test new intrinsic.\n\nFrom-SVN: r258560", "tree": {"sha": "b1710e1a52c625923a8222161cb029e9e44e470e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1710e1a52c625923a8222161cb029e9e44e470e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7297be9c04d1d44b72a6db2609e99b08fd63ac7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7297be9c04d1d44b72a6db2609e99b08fd63ac7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7297be9c04d1d44b72a6db2609e99b08fd63ac7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7297be9c04d1d44b72a6db2609e99b08fd63ac7/comments", "author": {"login": "Djilka", "id": 6038217, "node_id": "MDQ6VXNlcjYwMzgyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/6038217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Djilka", "html_url": "https://github.com/Djilka", "followers_url": "https://api.github.com/users/Djilka/followers", "following_url": "https://api.github.com/users/Djilka/following{/other_user}", "gists_url": "https://api.github.com/users/Djilka/gists{/gist_id}", "starred_url": "https://api.github.com/users/Djilka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Djilka/subscriptions", "organizations_url": "https://api.github.com/users/Djilka/orgs", "repos_url": "https://api.github.com/users/Djilka/repos", "events_url": "https://api.github.com/users/Djilka/events{/privacy}", "received_events_url": "https://api.github.com/users/Djilka/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e333a522bb5f686c9536fd95af8da33fce333d43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e333a522bb5f686c9536fd95af8da33fce333d43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e333a522bb5f686c9536fd95af8da33fce333d43"}], "stats": {"total": 98, "additions": 84, "deletions": 14}, "files": [{"sha": "0bf5b43655b9f86274b85a9c13097121c0e1cf98", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7297be9c04d1d44b72a6db2609e99b08fd63ac7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7297be9c04d1d44b72a6db2609e99b08fd63ac7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e7297be9c04d1d44b72a6db2609e99b08fd63ac7", "patch": "@@ -1,3 +1,9 @@\n+2018-03-15  Olga Makhotina  <olga.makhotina@intel.com>\n+\n+\t* config/i386/sgxintrin.h (_enclv_u32): New intrinsic.\n+\t(__enclv_bc, __enclv_cd, __enclv_generic): New definitions.\n+\t(ERDINFO, ETRACKC, ELDBC, ELDUC): New leaves.\n+\n 2018-03-15  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c/84852"}, {"sha": "dd3f9cfcb68792738b1e715dd1cc3b3aa9b31daf", "filename": "gcc/config/i386/sgxintrin.h", "status": "modified", "additions": 62, "deletions": 9, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7297be9c04d1d44b72a6db2609e99b08fd63ac7/gcc%2Fconfig%2Fi386%2Fsgxintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7297be9c04d1d44b72a6db2609e99b08fd63ac7/gcc%2Fconfig%2Fi386%2Fsgxintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsgxintrin.h?ref=e7297be9c04d1d44b72a6db2609e99b08fd63ac7", "patch": "@@ -89,10 +89,27 @@\n \t   : \"a\" (leaf), \"b\" (b), \"c\" (c), \"d\" (d)\t\\\n \t   : \"cc\")\n \n+#define __enclv_bc(leaf, b, c, retval)\t\t\t\\\n+  __asm__ __volatile__(\"enclv\\n\\t\"\t\t\t\\\n+\t   : \"=a\" (retval)\t\t\t\t\\\n+\t   : \"a\" (leaf), \"b\" (b), \"c\" (c)\t\t\\\n+\t   : \"cc\")\n+\n+#define __enclv_cd(leaf, c, d, retval)\t\t\t\\\n+  __asm__ __volatile__(\"enclv\\n\\t\"\t\t\t\\\n+\t   : \"=a\" (retval)\t\t\t\t\\\n+\t   : \"a\" (leaf), \"c\" (c), \"d\" (d)\t\t\\\n+\t   : \"cc\")\n \n-extern __inline int\n+#define __enclv_generic(leaf, b, c, d, retval)\t\t\\\n+  __asm__ __volatile__(\"enclv\\n\\t\"\t\t\t\\\n+\t   : \"=a\" (retval), \"=b\" (b), \"=c\" (b), \"=d\" (d)\\\n+\t   : \"a\" (leaf), \"b\" (b), \"c\" (c), \"d\" (d)\t\\\n+\t   : \"cc\")\n+\n+extern __inline unsigned int\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_encls_u32 (const int __L, size_t __D[])\n+_encls_u32 (const unsigned int __L, size_t __D[])\n {\n   enum __encls_type\n   {\n@@ -111,10 +128,14 @@ _encls_u32 (const int __L, size_t __D[])\n     __SGX_ETRACK  = 0x0C,\n     __SGX_EAUG    = 0x0D,\n     __SGX_EMODPR  = 0x0E,\n-    __SGX_EMODT   = 0x0F\n+    __SGX_EMODT   = 0x0F,\n+    __SGX_ERDINFO = 0x10,\n+    __SGX_ETRACKC = 0x11,\n+    __SGX_ELDBC   = 0x12,\n+    __SGX_ELDUC   = 0x13\n   };\n   enum __encls_type __T = (enum __encls_type)__L;\n-  int __R = 0;\n+  unsigned int __R = 0;\n   if (!__builtin_constant_p (__T))\n     __encls_generic (__L, __D[0], __D[1], __D[2], __R);\n   else switch (__T)\n@@ -127,31 +148,35 @@ _encls_u32 (const int __L, size_t __D[])\n     case __SGX_EMODPR:\n     case __SGX_EMODT:\n     case __SGX_EAUG:\n+    case __SGX_ERDINFO:\n       __encls_bc (__L, __D[0], __D[1], __R);\n       break;\n     case __SGX_EINIT:\n     case __SGX_ELDB:\n     case __SGX_ELDU:\n     case __SGX_EWB:\n+    case __SGX_ELDBC:\n+    case __SGX_ELDUC:\n       __encls_bcd (__L, __D[0], __D[1], __D[2], __R);\n       break;\n     case __SGX_EREMOVE:\n     case __SGX_EBLOCK:\n     case __SGX_ETRACK:\n+    case __SGX_ETRACKC:\n       __encls_c (__L, __D[1], __R);\n       break;\n     case __SGX_EDBGRD:\n       __encls_edbgrd (__L, __D[0], __D[1], __R);\n       break;\n     default:\n-      return -1;\n+      __encls_generic (__L, __D[0], __D[1], __D[2], __R);\n     }\n   return __R;\n }\n \n-extern __inline int\n+extern __inline unsigned int\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_enclu_u32 (const int __L, size_t __D[])\n+_enclu_u32 (const unsigned int __L, size_t __D[])\n {\n   enum __enclu_type\n   {\n@@ -165,7 +190,7 @@ _enclu_u32 (const int __L, size_t __D[])\n     __SGX_EACCEPTCOPY = 0x07\n   };\n   enum __enclu_type __T = (enum __enclu_type) __L;\n-  int __R = 0;\n+  unsigned int __R = 0;\n   if (!__builtin_constant_p (__T))\n     __enclu_generic (__L, __D[0], __D[1], __D[2], __R);\n   else switch (__T)\n@@ -187,7 +212,35 @@ _enclu_u32 (const int __L, size_t __D[])\n       __enclu_eexit (__L, __D[0], __D[1], __R);\n       break;\n     default:\n-      return -1;\n+      __enclu_generic (__L, __D[0], __D[1], __D[2], __R);\n+    }\n+  return __R;\n+}\n+\n+extern __inline unsigned int\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_enclv_u32 (const unsigned int __L, size_t __D[])\n+{\n+  enum __enclv_type\n+  {\n+    __SGX_EDECVIRTCHILD = 0x00,\n+    __SGX_EINCVIRTCHILD = 0x01,\n+    __SGX_ESETCONTEXT   = 0x02\n+  };\n+  unsigned int __R = 0;\n+  if (!__builtin_constant_p (__L))\n+    __enclv_generic (__L, __D[0], __D[1], __D[2], __R);\n+  else switch (__L)\n+    {\n+    case __SGX_EDECVIRTCHILD:\n+    case __SGX_EINCVIRTCHILD:\n+      __enclv_bc (__L, __D[0], __D[1], __R);\n+      break;\n+    case __SGX_ESETCONTEXT:\n+      __enclv_cd (__L, __D[1], __D[2], __R);\n+      break;\n+    default:\n+      __enclv_generic (__L, __D[0], __D[1], __D[2], __R);\n     }\n   return __R;\n }"}, {"sha": "02ca79ffdedd6005cf6d6ff439c101fcc9ac9492", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7297be9c04d1d44b72a6db2609e99b08fd63ac7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7297be9c04d1d44b72a6db2609e99b08fd63ac7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e7297be9c04d1d44b72a6db2609e99b08fd63ac7", "patch": "@@ -1,3 +1,7 @@\n+2018-03-15  Olga Makhotina  <olga.makhotina@intel.com>\n+\n+\t* gcc.target/i386/sgx.c (_enclv_u32): Test new intrinsic.\n+\n 2018-03-15  Richard Biener  <rguenther@suse.de>\n \n \tPR c/84873"}, {"sha": "9f3ab670d47aff5efb93e75067ffb26fd76828ce", "filename": "gcc/testsuite/gcc.target/i386/sgx.c", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7297be9c04d1d44b72a6db2609e99b08fd63ac7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsgx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7297be9c04d1d44b72a6db2609e99b08fd63ac7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsgx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsgx.c?ref=e7297be9c04d1d44b72a6db2609e99b08fd63ac7", "patch": "@@ -2,23 +2,30 @@\n /* { dg-options \"-O2 -msgx\" } */\n /* { dg-final { scan-assembler-times \"enclu\"  2 } } */\n /* { dg-final { scan-assembler-times \"encls\"  2 } } */\n+/* { dg-final { scan-assembler-times \"enclv\"  2 } } */\n \n #include <x86intrin.h>\n \n-extern int leaf;\n+extern unsigned int leaf;\n \n #define SGX_EENTER 0x02\n #define SGX_EBLOCK 0x09\n+#define SGX_EINCVIRTCHILD 0x01\n \n int foo ()\n {\n   size_t test[3];\n   test[0] = 4;\n   test[1] = 5;\n   test[2] = 6; \n-  int res1 = _encls_u32 (leaf, test);\n-  int res2 = _enclu_u32 (leaf, test);\n-  int res3 = _encls_u32 (SGX_EBLOCK, test);\n-  int res4 = _enclu_u32 (SGX_EENTER, test);\n+\n+  unsigned int res1 = _encls_u32 (leaf, test);\n+  unsigned int res2 = _enclu_u32 (leaf, test);\n+  unsigned int res5 = _enclv_u32 (leaf, test);\n+  \n+  unsigned int res3 = _encls_u32 (SGX_EBLOCK, test);\n+  unsigned int res4 = _enclu_u32 (SGX_EENTER, test);\n+  unsigned int res6 = _enclv_u32 (SGX_EINCVIRTCHILD, test);\n+\n   return 0;\n }"}]}