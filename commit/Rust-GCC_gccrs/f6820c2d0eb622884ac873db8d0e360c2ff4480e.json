{"sha": "f6820c2d0eb622884ac873db8d0e360c2ff4480e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjY4MjBjMmQwZWI2MjI4ODRhYzg3M2RiOGQwZTM2MGMyZmY0NDgwZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-22T10:44:46Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-22T10:44:46Z"}, "message": "[multiple changes]\n\n2013-04-22  Pascal Obry  <obry@adacore.com>\n\n\t* gnat_ugn.texi, prj-nmsc.adb, projects.texi: Add check for\n\tLibrary_Standalone and Library_Kind.\n\n2013-04-22  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch6.adb (Expand_Actuals): If the call is to an\n\tinherited operation and the actual is a by-reference type with\n\tpredicates, add predicate call to post-call actions.\n\t* sem_util.adb (Is_Inherited_Operation_For_Type): Fix coding\n\terror: a type declaration has a defining identifier, not an Etype.\n\t* sem_res.adb: Restore code removed because of above error.\n\n2013-04-22  Doug Rupp  <rupp@adacore.com>\n\n\t* init.c (__gnat_handle_vms_condition): Also match C$_SIGINT.\n\nFrom-SVN: r198130", "tree": {"sha": "d0a41249d44138bcc6fb4de33ba0fc5937bac577", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0a41249d44138bcc6fb4de33ba0fc5937bac577"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6820c2d0eb622884ac873db8d0e360c2ff4480e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6820c2d0eb622884ac873db8d0e360c2ff4480e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6820c2d0eb622884ac873db8d0e360c2ff4480e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6820c2d0eb622884ac873db8d0e360c2ff4480e/comments", "author": null, "committer": null, "parents": [{"sha": "16d3a85360dde6290cd043d6da3f6b5adb1b98e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16d3a85360dde6290cd043d6da3f6b5adb1b98e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16d3a85360dde6290cd043d6da3f6b5adb1b98e6"}], "stats": {"total": 117, "additions": 94, "deletions": 23}, "files": [{"sha": "18dd3b1ecaee8699e52217a163d2868bc9deab4a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6820c2d0eb622884ac873db8d0e360c2ff4480e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6820c2d0eb622884ac873db8d0e360c2ff4480e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f6820c2d0eb622884ac873db8d0e360c2ff4480e", "patch": "@@ -1,3 +1,21 @@\n+2013-04-22  Pascal Obry  <obry@adacore.com>\n+\n+\t* gnat_ugn.texi, prj-nmsc.adb, projects.texi: Add check for\n+\tLibrary_Standalone and Library_Kind.\n+\n+2013-04-22  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch6.adb (Expand_Actuals): If the call is to an\n+\tinherited operation and the actual is a by-reference type with\n+\tpredicates, add predicate call to post-call actions.\n+\t* sem_util.adb (Is_Inherited_Operation_For_Type): Fix coding\n+\terror: a type declaration has a defining identifier, not an Etype.\n+\t* sem_res.adb: Restore code removed because of above error.\n+\n+2013-04-22  Doug Rupp  <rupp@adacore.com>\n+\n+\t* init.c (__gnat_handle_vms_condition): Also match C$_SIGINT.\n+\n 2013-04-22  Yannick Moy  <moy@adacore.com>\n \n \t* gnat_rm.texi, exp_util.adb, sem_prag.adb, sem_prag.ads, par-ch2.adb,"}, {"sha": "35060e714b2596313b616da509d5341d6337f6bd", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6820c2d0eb622884ac873db8d0e360c2ff4480e/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6820c2d0eb622884ac873db8d0e360c2ff4480e/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=f6820c2d0eb622884ac873db8d0e360c2ff4480e", "patch": "@@ -942,6 +942,7 @@ package body Exp_Ch6 is\n       Formal    : Entity_Id;\n       N_Node    : Node_Id;\n       Post_Call : List_Id;\n+      E_Actual  : Entity_Id;\n       E_Formal  : Entity_Id;\n \n       procedure Add_Call_By_Copy_Code;\n@@ -1508,6 +1509,7 @@ package body Exp_Ch6 is\n       Actual := First_Actual (N);\n       while Present (Formal) loop\n          E_Formal := Etype (Formal);\n+         E_Actual := Etype (Actual);\n \n          if Is_Scalar_Type (E_Formal)\n            or else Nkind (Actual) = N_Slice\n@@ -1645,7 +1647,7 @@ package body Exp_Ch6 is\n             --  conversion\" errors.\n \n             elsif Is_Access_Type (E_Formal)\n-              and then not Same_Type (E_Formal, Etype (Actual))\n+              and then not Same_Type (E_Formal, E_Actual)\n               and then not Is_Tagged_Type (Designated_Type (E_Formal))\n             then\n                Add_Call_By_Copy_Code;\n@@ -1661,7 +1663,7 @@ package body Exp_Ch6 is\n \n             elsif Is_Entity_Name (Actual)\n               and then Is_Volatile (Entity (Actual))\n-              and then not Is_By_Reference_Type (Etype (Actual))\n+              and then not Is_By_Reference_Type (E_Actual)\n               and then not Is_Scalar_Type (Etype (Entity (Actual)))\n               and then not Is_Volatile (E_Formal)\n             then\n@@ -1682,10 +1684,10 @@ package body Exp_Ch6 is\n \n             elsif Is_Scalar_Type (E_Formal)\n               and then\n-                (not In_Subrange_Of (E_Formal, Etype (Actual))\n+                (not In_Subrange_Of (E_Formal, E_Actual)\n                   or else\n                     (Ekind (Formal) = E_In_Out_Parameter\n-                      and then not In_Subrange_Of (Etype (Actual), E_Formal)))\n+                      and then not In_Subrange_Of (E_Actual, E_Formal)))\n             then\n                --  Perhaps the setting back to False should be done within\n                --  Add_Call_By_Copy_Code, since it could get set on other\n@@ -1698,6 +1700,28 @@ package body Exp_Ch6 is\n                Add_Call_By_Copy_Code;\n             end if;\n \n+            --  RM 3.2.4 (23/3) : A predicate is checked on in-out and out\n+            --  by-reference parameters on exit from the call. If the actual\n+            --  is a derived type and the operation is inherited, the body\n+            --  of the operation will not contain a call to the predicate\n+            --  function, so it must be done explicitly after the call. Ditto\n+            --  if the actual is an entity of a predicated subtype.\n+\n+            if Is_By_Reference_Type (E_Formal)\n+              and then Has_Predicates (E_Actual)\n+            then\n+               if Is_Derived_Type (E_Actual)\n+                 and then Is_Inherited_Operation_For_Type (Subp, E_Actual)\n+               then\n+                  Append_To\n+                   (Post_Call, Make_Predicate_Check (E_Actual, Actual));\n+\n+               elsif Is_Entity_Name (Actual) then\n+                  Append_To\n+                   (Post_Call, Make_Predicate_Check (E_Actual, Actual));\n+               end if;\n+            end if;\n+\n          --  Processing for IN parameters\n \n          else"}, {"sha": "2a8610b28c82403970971810520d3f066815f892", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6820c2d0eb622884ac873db8d0e360c2ff4480e/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6820c2d0eb622884ac873db8d0e360c2ff4480e/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=f6820c2d0eb622884ac873db8d0e360c2ff4480e", "patch": "@@ -17083,6 +17083,7 @@ build an encapsulated library the attribute\n @group\n    for Library_Dir use \"lib_dir\";\n    for Library_Name use \"dummy\";\n+   for Library_Kind use \"dynamic\";\n    for Library_Interface use (\"int1\", \"int1.child\");\n    for Library_Standalone use \"encapsulated\";\n @end group"}, {"sha": "030cb5c3f82432e53ba0a92a9fa3cf38db2bc652", "filename": "gcc/ada/init.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6820c2d0eb622884ac873db8d0e360c2ff4480e/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6820c2d0eb622884ac873db8d0e360c2ff4480e/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=f6820c2d0eb622884ac873db8d0e360c2ff4480e", "patch": "@@ -833,6 +833,7 @@ void (*__gnat_ctrl_c_handler) (void) = 0;\n \n /* These codes are in standard message libraries.  */\n extern int C$_SIGKILL;\n+extern int C$_SIGINT;\n extern int SS$_DEBUG;\n extern int LIB$_KEYNOTFOU;\n extern int LIB$_ACTIMAGE;\n@@ -1221,14 +1222,18 @@ __gnat_handle_vms_condition (int *sigargs, void *mechargs)\n \t\t\t\t\t          system_cond_except_table,\n \t\t\t\t\t          0};\n       unsigned int ctrlc = SS$_CONTROLC;\n+      unsigned int *sigint = &C$_SIGINT;\n       int ctrlc_match = LIB$MATCH_COND (&sigargs [1], &ctrlc);\n+      int sigint_match = LIB$MATCH_COND (&sigargs [1], &sigint);\n \n       extern int SYS$DCLAST (void (*astadr)(), unsigned long long astprm,\n \t                     unsigned int acmode);\n \n       /* If SS$_CONTROLC has been imported as an exception, it will take\n-\t priority over a a Ctrl/C handler.  See above.  */\n-      if (ctrlc_match && __gnat_ctrl_c_handler)\n+\t priority over a a Ctrl/C handler.  See above.  SIGINT has a\n+\t different condition value due to it's DECCCRTL roots and it's\n+\t the condition that gets raised for a \"kill -INT\".  */\n+      if ((ctrlc_match || sigint_match) && __gnat_ctrl_c_handler)\n \t{\n \t  SYS$DCLAST (__gnat_ctrl_c_handler, 0, 0);\n \t  return SS$_CONTINUE;"}, {"sha": "f1538de9922a2ecc4d89b0357a32af2613a8e195", "filename": "gcc/ada/prj-nmsc.adb", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6820c2d0eb622884ac873db8d0e360c2ff4480e/gcc%2Fada%2Fprj-nmsc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6820c2d0eb622884ac873db8d0e360c2ff4480e/gcc%2Fada%2Fprj-nmsc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-nmsc.adb?ref=f6820c2d0eb622884ac873db8d0e360c2ff4480e", "patch": "@@ -3659,6 +3659,21 @@ package body Prj.Nmsc is\n          end loop;\n       end if;\n \n+      if not Lib_Standalone.Default\n+        and then Project.Library_Kind = Static\n+      then\n+         --  An standalone library must be a shared library\n+\n+         Error_Msg_Name_1 := Project.Name;\n+\n+         Error_Msg\n+           (Data.Flags,\n+            Continuation.all &\n+              \"standalone library project %% must be a shared library\",\n+            Project.Location, Project);\n+         Continuation := Continuation_String'Access;\n+      end if;\n+\n       if Project.Library and not Data.In_Aggregate_Lib then\n \n          --  Record the library name"}, {"sha": "2c334686b54580a8cf28f4cd88d7bee74f8ad09d", "filename": "gcc/ada/projects.texi", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6820c2d0eb622884ac873db8d0e360c2ff4480e/gcc%2Fada%2Fprojects.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6820c2d0eb622884ac873db8d0e360c2ff4480e/gcc%2Fada%2Fprojects.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprojects.texi?ref=f6820c2d0eb622884ac873db8d0e360c2ff4480e", "patch": "@@ -1890,12 +1890,15 @@ language and takes a list of sources as parameter.\n   library can furthermore only depends on static libraries (including\n   the GNAT runtime). This attribute can be set to @code{no} to make it clear\n   that the library should not be standalone in which case the\n-  @code{Library_Interface} should not defined.\n+  @code{Library_Interface} should not defined. Note that this attribute\n+  only applies to shared libraries, so @code{Library_Kind} must be set\n+  to @code{dynamic}.\n \n @smallexample @c projectfile\n @group\n      for Library_Dir use \"lib\";\n      for Library_Name use \"loggin\";\n+     for Library_Kind use \"dynamic\";\n      for Library_Interface use (\"lib1\", \"lib2\");  --  unit names\n      for Library_Standalone use \"encapsulated\";\n @end group\n@@ -3772,8 +3775,15 @@ The list of languages of the sources of the project.\n \n @item @b{Roots}: list, indexed, file name index\n \n-The index is the file name of an executable source. Indicates the list of\n-units that need to be bound and linked with their closures with the executable.\n+The index is the file name of an executable source. Indicates the list of units\n+from the main project that need to be bound and linked with their closures\n+with the executable. The index is either a file name, a language name or \"*\".\n+The roots for an executable source are those in @b{Roots} with an index that\n+is the executable source file name, if declared. Otherwise, they are those in\n+@b{Roots} with an index that is the language name of the executable source,\n+if present. Otherwise, they are those in @b{Roots (\"*\")}, if declared. If none\n+of these three possibilities are declared, then there are no roots for the\n+executable source.\n \n @item @b{Externally_Built}: single\n "}, {"sha": "63bbef6645bcb6abd56a71c77ff17297e78e8ae3", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6820c2d0eb622884ac873db8d0e360c2ff4480e/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6820c2d0eb622884ac873db8d0e360c2ff4480e/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=f6820c2d0eb622884ac873db8d0e360c2ff4480e", "patch": "@@ -5896,19 +5896,14 @@ package body Sem_Res is\n       --  In formal mode, the primitive operations of a tagged type or type\n       --  extension do not include functions that return the tagged type.\n \n-      --  Commented out as the call to Is_Inherited_Operation_For_Type may\n-      --  cause an error because the type entity of the parent node of\n-      --  Entity (Name (N) may not be set. ???\n-      --  So why not just add a guard ???\n-\n---      if Nkind (N) = N_Function_Call\n---        and then Is_Tagged_Type (Etype (N))\n---        and then Is_Entity_Name (Name (N))\n---        and then Is_Inherited_Operation_For_Type\n---                   (Entity (Name (N)), Etype (N))\n---      then\n---         Check_SPARK_Restriction (\"function not inherited\", N);\n---      end if;\n+      if Nkind (N) = N_Function_Call\n+        and then Is_Tagged_Type (Etype (N))\n+        and then Is_Entity_Name (Name (N))\n+        and then Is_Inherited_Operation_For_Type\n+                   (Entity (Name (N)), Etype (N))\n+      then\n+         Check_SPARK_Restriction (\"function not inherited\", N);\n+      end if;\n \n       --  Implement rule in 12.5.1 (23.3/2): In an instance, if the actual is\n       --  class-wide and the call dispatches on result in a context that does"}, {"sha": "fb4512914da817404d93769e3d025ca241d93d2c", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6820c2d0eb622884ac873db8d0e360c2ff4480e/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6820c2d0eb622884ac873db8d0e360c2ff4480e/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=f6820c2d0eb622884ac873db8d0e360c2ff4480e", "patch": "@@ -8462,8 +8462,11 @@ package body Sem_Util is\n       Typ : Entity_Id) return Boolean\n    is\n    begin\n+      --  Check that the operation has been created by the declaration for\n+      --  the type.\n+\n       return Is_Inherited_Operation (E)\n-        and then Etype (Parent (E)) = Typ;\n+        and then Defining_Identifier (Parent (E)) = Typ;\n    end Is_Inherited_Operation_For_Type;\n \n    -----------------"}]}