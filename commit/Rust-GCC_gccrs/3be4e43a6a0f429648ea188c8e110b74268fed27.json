{"sha": "3be4e43a6a0f429648ea188c8e110b74268fed27", "node_id": "C_kwDOANBUbNoAKDNiZTRlNDNhNmEwZjQyOTY0OGVhMTg4YzhlMTEwYjc0MjY4ZmVkMjc", "commit": {"author": {"name": "Gaius Mulley", "email": "gaiusmod2@gmail.com", "date": "2023-03-29T16:38:22Z"}, "committer": {"name": "Gaius Mulley", "email": "gaiusmod2@gmail.com", "date": "2023-03-29T16:38:22Z"}, "message": "PR modula2/109336 - The -fmod= and -fdef= options do not work\n\nThe -fmod= and -fdef= options do not work.  After the linking\nre-implementation and subsequent restructuring the -fmod= amd -fdef= are\nnow broken.  This patch adds -fmod= and -fdef= processing into gm2spec.cc.\nIt also reduces the complexity of extension handling within M2Search\nby storing the preceeding \".\" in the extension.\n\ngcc/m2/ChangeLog:\n\n\tPR modula2/109336\n\tPR modula2/109315\n\t* gm2-compiler/M2FileName.mod (CalculateFileName): Simplified by\n\tensuring the extension contains the \".\".\n\t(CalculateStemName): Re-formatted.\n\t(ExtractExtension): Re-formatted.\n\t(ExtractModule): Re-formatted.\n\t* gm2-compiler/M2Options.def (setdefextension): Add block comment.\n\t(setmodextension): Add block comment.  Re-formatted.\n\t* gm2-compiler/M2Options.mod (setdefextension): Add block comment.\n\t(setmodextension): Add block comment.  Re-formatted.\n\t* gm2-compiler/M2Search.mod (FindSourceDefFile): Use\n\tDefaultDefExt.\n\t(DefaultDefExt): New constant.\n\t(DefaultModExt): New constant.\n\t(FindSourceModFile): Use DefaultModExt.\n\t* gm2-gcc/m2decl.cc (m2decl_DeclareKnownVariable): Correct\n\tspelling.\n\t* gm2spec.cc (M2SOURCE): New constant.\n\t(LANGSPEC): New value.\n\t(MATHLIB): New value.\n\t(WITHLIBC): New value.\n\t(SKIPOPT): New value.\n\t(lang_specific_driver): Replace seen_module_extension bool with\n\tmodule_extension char *.  Detect -fmod= and remember extension.\n\tUse the extension to detect modula-2 source and mark it as such.\n\ngcc/testsuite/ChangeLog:\n\n\tPR modula2/109336\n\t* gm2/link/nondefaultext/pass/hello.md: New test.\n\t* gm2/link/nondefaultext/pass/liba.dm: New test.\n\t* gm2/link/nondefaultext/pass/liba.md: New test.\n\t* gm2/link/nondefaultext/pass/link-nondefaultext-pass.exp: New test.\n\nSigned-off-by: Gaius Mulley <gaiusmod2@gmail.com>", "tree": {"sha": "ad07cf9e70e6dcd9d12ef9dd7a289ab538a04acd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad07cf9e70e6dcd9d12ef9dd7a289ab538a04acd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3be4e43a6a0f429648ea188c8e110b74268fed27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3be4e43a6a0f429648ea188c8e110b74268fed27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3be4e43a6a0f429648ea188c8e110b74268fed27", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3be4e43a6a0f429648ea188c8e110b74268fed27/comments", "author": null, "committer": null, "parents": [{"sha": "b2f327b9be81326c9e59fc6da98074c909ac7408", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2f327b9be81326c9e59fc6da98074c909ac7408", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2f327b9be81326c9e59fc6da98074c909ac7408"}], "stats": {"total": 207, "additions": 167, "deletions": 40}, "files": [{"sha": "e52df96bdaeb5ab04e609e98d595e10853c65c08", "filename": "gcc/m2/gm2-compiler/M2FileName.mod", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3be4e43a6a0f429648ea188c8e110b74268fed27/gcc%2Fm2%2Fgm2-compiler%2FM2FileName.mod", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3be4e43a6a0f429648ea188c8e110b74268fed27/gcc%2Fm2%2Fgm2-compiler%2FM2FileName.mod", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fgm2-compiler%2FM2FileName.mod?ref=3be4e43a6a0f429648ea188c8e110b74268fed27", "patch": "@@ -49,9 +49,9 @@ PROCEDURE CalculateFileName (Module, Extension: String) : String ;\n BEGIN\n    IF MaxFileName=0\n    THEN\n-      RETURN( ConCat(ConCatChar(Slice(Module, 0, MaxFileName), '.'), Extension) )\n+      RETURN ConCat (Slice (Module, 0, MaxFileName), Extension)\n    ELSE\n-      RETURN( ConCat(ConCatChar(Slice(Module, 0, MaxFileName-Length(Extension)-1), '.'), Extension) )\n+      RETURN ConCat (Slice (Module, 0, MaxFileName-Length (Extension)), Extension)\n    END\n END CalculateFileName ;\n \n@@ -64,7 +64,7 @@ END CalculateFileName ;\n \n PROCEDURE CalculateStemName (Module: String) : String ;\n BEGIN\n-   RETURN( Slice(Module, 0, MaxStemName) )\n+   RETURN Slice (Module, 0, MaxStemName)\n END CalculateStemName ;\n \n \n@@ -75,11 +75,11 @@ END CalculateStemName ;\n \n PROCEDURE ExtractExtension (filename, ext: String) : String ;\n BEGIN\n-   IF Equal(ext, Mark(Slice(filename, -Length(ext), 0)))\n+   IF Equal (ext, Mark (Slice (filename, -Length (ext), 0)))\n    THEN\n-      RETURN( Slice(filename, 0, -Length(ext)) )\n+      RETURN Slice (filename, 0, -Length (ext))\n    ELSE\n-      RETURN( filename )\n+      RETURN filename\n    END\n END ExtractExtension ;\n \n@@ -93,12 +93,12 @@ PROCEDURE ExtractModule (filename: String) : String ;\n VAR\n    i: INTEGER ;\n BEGIN\n-   i := Index(filename, Directory, 0) ;\n+   i := Index (filename, Directory, 0) ;\n    IF i=-1\n    THEN\n-      RETURN( Dup(filename) )\n+      RETURN Dup (filename)\n    ELSE\n-      RETURN( Slice(filename, i+1, 0) )\n+      RETURN Slice (filename, i+1, 0)\n    END\n END ExtractModule ;\n "}, {"sha": "7e4d2aa6b41a8c972a33f1a9a2d0887eeb32ff47", "filename": "gcc/m2/gm2-compiler/M2Options.def", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3be4e43a6a0f429648ea188c8e110b74268fed27/gcc%2Fm2%2Fgm2-compiler%2FM2Options.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3be4e43a6a0f429648ea188c8e110b74268fed27/gcc%2Fm2%2Fgm2-compiler%2FM2Options.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fgm2-compiler%2FM2Options.def?ref=3be4e43a6a0f429648ea188c8e110b74268fed27", "patch": "@@ -730,14 +730,16 @@ PROCEDURE SetStrictTypeChecking (value: BOOLEAN) ;\n \n \n (*\n-   setdefextension -\n+   setdefextension - set the source file definition module extension to arg.\n+                     This should include the . and by default it is set to .def.\n *)\n \n PROCEDURE setdefextension (arg: ADDRESS) ;\n \n \n (*\n-   setmodextension -\n+   setmodextension - set the source file module extension to arg.\n+                     This should include the . and by default it is set to .mod.\n *)\n \n PROCEDURE setmodextension (arg: ADDRESS) ;"}, {"sha": "7cacee26bcfd48161366f6dbf80abf1532d3c544", "filename": "gcc/m2/gm2-compiler/M2Options.mod", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3be4e43a6a0f429648ea188c8e110b74268fed27/gcc%2Fm2%2Fgm2-compiler%2FM2Options.mod", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3be4e43a6a0f429648ea188c8e110b74268fed27/gcc%2Fm2%2Fgm2-compiler%2FM2Options.mod", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fgm2-compiler%2FM2Options.mod?ref=3be4e43a6a0f429648ea188c8e110b74268fed27", "patch": "@@ -959,30 +959,32 @@ END SetSearchPath ;\n \n \n (*\n-   setdefextension -\n+   setdefextension - set the source file definition module extension to arg.\n+                     This should include the . and by default it is set to .def.\n *)\n \n PROCEDURE setdefextension (arg: ADDRESS) ;\n VAR\n    s: String ;\n BEGIN\n-   s := InitStringCharStar(arg) ;\n-   SetDefExtension(s) ;\n-   s := KillString(s)\n+   s := InitStringCharStar (arg) ;\n+   SetDefExtension (s) ;\n+   s := KillString (s)\n END setdefextension ;\n \n \n (*\n-   setmodextension -\n+   setmodextension - set the source file module extension to arg.\n+                     This should include the . and by default it is set to .mod.\n *)\n \n PROCEDURE setmodextension (arg: ADDRESS) ;\n VAR\n    s: String ;\n BEGIN\n-   s := InitStringCharStar(arg) ;\n-   SetModExtension(s) ;\n-   s := KillString(s)\n+   s := InitStringCharStar (arg) ;\n+   SetModExtension (s) ;\n+   s := KillString (s)\n END setmodextension ;\n \n "}, {"sha": "5e48f6b5ff5fad0073074507e28ebf596dca1c02", "filename": "gcc/m2/gm2-compiler/M2Search.mod", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3be4e43a6a0f429648ea188c8e110b74268fed27/gcc%2Fm2%2Fgm2-compiler%2FM2Search.mod", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3be4e43a6a0f429648ea188c8e110b74268fed27/gcc%2Fm2%2Fgm2-compiler%2FM2Search.mod", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fgm2-compiler%2FM2Search.mod?ref=3be4e43a6a0f429648ea188c8e110b74268fed27", "patch": "@@ -36,6 +36,8 @@ FROM DynamicStrings IMPORT InitString, InitStringChar,\n \n CONST\n    GarbageDebugging = FALSE ;\n+   DefaultDefExt    = '.def' ;\n+   DefaultModExt    = '.mod' ;\n \n VAR\n    Def, Mod: String ;\n@@ -156,7 +158,7 @@ BEGIN\n       f := KillString (f)\n    END ;\n    (* Try the GNU Modula-2 default extension.  *)\n-   f := CalculateFileName (Stem, Mark (InitString ('def'))) ;\n+   f := CalculateFileName (Stem, Mark (InitString (DefaultDefExt))) ;\n    RETURN FindSourceFile (f, FullPath, named)\n END FindSourceDefFile ;\n \n@@ -182,7 +184,7 @@ BEGIN\n       f := KillString (f)\n    END ;\n    (* Try the GNU Modula-2 default extension.  *)\n-   f := CalculateFileName (Stem, Mark (InitString ('mod'))) ;\n+   f := CalculateFileName (Stem, Mark (InitString (DefaultModExt))) ;\n    RETURN FindSourceFile (f, FullPath, named)\n END FindSourceModFile ;\n "}, {"sha": "6dde7a22ea5cdab72d44e89979c46289ff3e4ac7", "filename": "gcc/m2/gm2-gcc/m2decl.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3be4e43a6a0f429648ea188c8e110b74268fed27/gcc%2Fm2%2Fgm2-gcc%2Fm2decl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3be4e43a6a0f429648ea188c8e110b74268fed27/gcc%2Fm2%2Fgm2-gcc%2Fm2decl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fgm2-gcc%2Fm2decl.cc?ref=3be4e43a6a0f429648ea188c8e110b74268fed27", "patch": "@@ -122,7 +122,7 @@ m2decl_DeclareKnownVariable (location_t location, const char *name, tree type,\n     error (\"storage size of %qD has not been resolved\", decl);\n \n   if ((TREE_PUBLIC (decl) == 0) && DECL_EXTERNAL (decl))\n-    internal_error (\"inconsistant because %qs\",\n+    internal_error (\"inconsistent because %qs\",\n \t\t    \"PUBLIC_DECL(decl) == 0 && DECL_EXTERNAL(decl) == 1\");\n \n   m2block_addDeclExpr (build_stmt (location, DECL_EXPR, decl));"}, {"sha": "8b4010838ec57044fc2aa574636e2bb8b09377da", "filename": "gcc/m2/gm2spec.cc", "status": "modified", "additions": 78, "deletions": 18, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3be4e43a6a0f429648ea188c8e110b74268fed27/gcc%2Fm2%2Fgm2spec.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3be4e43a6a0f429648ea188c8e110b74268fed27/gcc%2Fm2%2Fgm2spec.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fgm2spec.cc?ref=3be4e43a6a0f429648ea188c8e110b74268fed27", "patch": "@@ -50,14 +50,16 @@ along with GNU Modula-2; see the file COPYING3.  If not see\n #endif\n #endif\n \n+/* This bit is set if the arguments is a M2 source file.  */\n+#define M2SOURCE\t(1<<1)\n /* This bit is set if we saw a `-xfoo' language specification.  */\n-#define LANGSPEC\t(1<<1)\n+#define LANGSPEC\t(1<<2)\n /* This bit is set if they did `-lm' or `-lmath'.  */\n-#define MATHLIB\t\t(1<<2)\n+#define MATHLIB\t\t(1<<3)\n /* This bit is set if they did `-lc'.  */\n-#define WITHLIBC\t(1<<3)\n+#define WITHLIBC\t(1<<4)\n /* Skip this option.  */\n-#define SKIPOPT\t\t(1<<4)\n+#define SKIPOPT\t\t(1<<5)\n \n #ifndef MATH_LIBRARY\n #define MATH_LIBRARY \"m\"\n@@ -431,7 +433,7 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n   int *args;\n \n   /* Have we seen -fmod=?  */\n-  bool seen_module_extension = false;\n+  char *module_extension = NULL;\n \n   /* Should the driver perform a link?  */\n   bool linking = true;\n@@ -530,8 +532,11 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n \t  args[i] |= SKIPOPT; /* We will add the option if it is needed.  */\n \t  break;\n \tcase OPT_fmod_:\n-\t  seen_module_extension = true;\n+\t  module_extension = xstrdup (arg);\n \t  args[i] |= SKIPOPT; /* We will add the option if it is needed.  */\n+#if defined(DEBUG_ARG)\n+\t  printf (\"seen -fmod=%s\\n\", module_extension);\n+#endif\n \t  break;\n         case OPT_fpthread:\n           need_pthread = decoded_options[i].value;\n@@ -674,6 +679,34 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n \t  which_library = (stdcxxlib_kind) decoded_options[i].value;\n \t  break;\n \n+\tcase OPT_SPECIAL_input_file:\n+\t  {\n+\t    const char *source_file = decoded_options[i].orig_option_with_args_text;\n+#if defined(DEBUG_ARG)\n+\t    printf (\"seen OPT_SPECIAL_input_file: %s\\n\", source_file);\n+#endif\n+\t    if (source_file != NULL)\n+\t      {\n+\t\t/* Record that this is a Modula-2 source file.  */\n+\t\tconst char *suffix = strrchr (source_file, '.');\n+#if defined(DEBUG_ARG)\n+\t\tprintf (\"ext = %s\\n\", suffix);\n+#endif\n+\t\tif ((suffix != NULL)\n+\t\t    && ((strcmp (suffix, \".mod\") == 0)\n+\t\t\t|| ((module_extension != NULL)\n+\t\t\t    && (strcmp (suffix, module_extension) == 0))))\n+\t\t  {\n+#if defined(DEBUG_ARG)\n+\t\t    printf (\"modula-2 source file detected: %s\\n\", source_file);\n+#endif\n+\t\t    args[i] |= M2SOURCE;\n+\t\t    // args[i] = 0;\n+\t\t  }\n+\t      }\n+\t  }\n+\t  break;\n+\n \tdefault:\n \t  break;\n \t}\n@@ -719,19 +752,49 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n   for (i = 1; i < argc; ++i)\n     {\n #if defined(DEBUG_ARG)\n-      printf (\"2nd pass: %s\\n\",\n+      printf (\"2nd pass: %s\",\n \t      decoded_options[i].orig_option_with_args_text);\n+      if ((args[i] & SKIPOPT) != 0)\n+\tprintf (\" skipped\");\n+      if ((args[i] & M2SOURCE) != 0)\n+\tprintf (\" m2 source\");\n+      printf (\"\\n\");\n #endif\n       if ((args[i] & SKIPOPT) == 0)\n \t{\n-\t  append_arg (&decoded_options[i]);\n-\t  /* Make sure -lstdc++ is before the math library, since libstdc++\n-\t     itself uses those math routines.  */\n-\t  if (!saw_math && (args[i] & MATHLIB) && library > 0)\n-\t    saw_math = &decoded_options[i];\n-\n-\t  if (!saw_libc && (args[i] & WITHLIBC) && library > 0)\n-\t    saw_libc = &decoded_options[i];\n+\t  if ((args[i] & M2SOURCE) == 0)\n+\t    {\n+\t      append_arg (&decoded_options[i]);\n+\t      /* Make sure -lstdc++ is before the math library, since libstdc++\n+\t\t itself uses those math routines.  */\n+\t      if (!saw_math && (args[i] & MATHLIB) && library > 0)\n+\t\tsaw_math = &decoded_options[i];\n+\n+\t      if (!saw_libc && (args[i] & WITHLIBC) && library > 0)\n+\t\tsaw_libc = &decoded_options[i];\n+\t    }\n+\t  else\n+\t    {\n+\t      if ((! seen_x_flag) && module_extension)\n+\t\t{\n+#if defined(DEBUG_ARG)\n+\t\t  printf (\" adding: -x modula-2 \");\n+#endif\n+\t\t  append_option (OPT_x, \"modula-2\", 1);\n+\t\t}\n+\t      append_arg (&decoded_options[i]);\n+#if defined(DEBUG_ARG)\n+\t      printf (\" adding: %s\\n\",\n+\t\t      decoded_options[i].orig_option_with_args_text);\n+#endif\n+\t      if ((! seen_x_flag) && module_extension)\n+\t\t{\n+#if defined(DEBUG_ARG)\n+\t\t  printf (\" adding: -x none \");\n+#endif\n+\t\t  append_option (OPT_x, \"none\", 1);\n+\t\t}\n+\t    }\n \t}\n #if defined(DEBUG_ARG)\n       else\n@@ -789,9 +852,6 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n   else\n     append_option (OPT_flibs_, xstrdup (\"-\"), 0); /* no system libs.  */\n \n-  if ((! seen_x_flag) && seen_module_extension)\n-    append_option (OPT_x, \"modula-2\", 1);\n-\n   if (need_plugin)\n     append_option (OPT_fplugin_, \"m2rte\", 1);\n "}, {"sha": "c2f2dcbddda1c4529ee8c89f3c169ac2bc211411", "filename": "gcc/testsuite/gm2/link/nondefaultext/pass/hello.md", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3be4e43a6a0f429648ea188c8e110b74268fed27/gcc%2Ftestsuite%2Fgm2%2Flink%2Fnondefaultext%2Fpass%2Fhello.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3be4e43a6a0f429648ea188c8e110b74268fed27/gcc%2Ftestsuite%2Fgm2%2Flink%2Fnondefaultext%2Fpass%2Fhello.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgm2%2Flink%2Fnondefaultext%2Fpass%2Fhello.md?ref=3be4e43a6a0f429648ea188c8e110b74268fed27", "patch": "@@ -0,0 +1,9 @@\n+MODULE hello ;\n+\n+FROM liba IMPORT bar ;\n+FROM libc IMPORT printf ;\n+\n+BEGIN\n+   bar ;\n+   printf (\"hello world\\n\")\n+END hello."}, {"sha": "e86d9e35852bb7eeaceab58bcf1255394c008b2c", "filename": "gcc/testsuite/gm2/link/nondefaultext/pass/liba.dm", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3be4e43a6a0f429648ea188c8e110b74268fed27/gcc%2Ftestsuite%2Fgm2%2Flink%2Fnondefaultext%2Fpass%2Fliba.dm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3be4e43a6a0f429648ea188c8e110b74268fed27/gcc%2Ftestsuite%2Fgm2%2Flink%2Fnondefaultext%2Fpass%2Fliba.dm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgm2%2Flink%2Fnondefaultext%2Fpass%2Fliba.dm?ref=3be4e43a6a0f429648ea188c8e110b74268fed27", "patch": "@@ -0,0 +1,8 @@\n+DEFINITION MODULE liba ;\n+\n+CONST\n+   max = 12 ;\n+\n+PROCEDURE bar ;\n+\n+END liba."}, {"sha": "20d1206acce464605ecd000274e57f543f72cfcf", "filename": "gcc/testsuite/gm2/link/nondefaultext/pass/liba.md", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3be4e43a6a0f429648ea188c8e110b74268fed27/gcc%2Ftestsuite%2Fgm2%2Flink%2Fnondefaultext%2Fpass%2Fliba.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3be4e43a6a0f429648ea188c8e110b74268fed27/gcc%2Ftestsuite%2Fgm2%2Flink%2Fnondefaultext%2Fpass%2Fliba.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgm2%2Flink%2Fnondefaultext%2Fpass%2Fliba.md?ref=3be4e43a6a0f429648ea188c8e110b74268fed27", "patch": "@@ -0,0 +1,6 @@\n+IMPLEMENTATION MODULE liba ;\n+\n+PROCEDURE bar ;\n+END bar ;\n+\n+END liba."}, {"sha": "e9e38f75a3a32a8dd1073de84230c4251566f884", "filename": "gcc/testsuite/gm2/link/nondefaultext/pass/link-nondefaultext-pass.exp", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3be4e43a6a0f429648ea188c8e110b74268fed27/gcc%2Ftestsuite%2Fgm2%2Flink%2Fnondefaultext%2Fpass%2Flink-nondefaultext-pass.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3be4e43a6a0f429648ea188c8e110b74268fed27/gcc%2Ftestsuite%2Fgm2%2Flink%2Fnondefaultext%2Fpass%2Flink-nondefaultext-pass.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgm2%2Flink%2Fnondefaultext%2Fpass%2Flink-nondefaultext-pass.exp?ref=3be4e43a6a0f429648ea188c8e110b74268fed27", "patch": "@@ -0,0 +1,38 @@\n+# Expect driver script for GCC Regression Tests\n+# Copyright (C) 2023 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# This file was written by Gaius Mulley (gaius.mulley@southwales.ac.uk)\n+# for GNU Modula-2.\n+\n+if $tracelevel then {\n+    strace $tracelevel\n+}\n+\n+# load support procs\n+load_lib gm2-torture.exp\n+\n+gm2_init_pim \"${srcdir}/gm2/link/nondefaultext/pass\"\n+gm2_link_obj \"liba.o\"\n+\n+foreach testcase [lsort [glob -nocomplain $srcdir/$subdir/hello.md]] {\n+    # If we're only testing specific files and this isn't one of them, skip it.\n+    if ![runtest_file_p $runtests $testcase] then {\n+\tcontinue\n+    }\n+    gm2_target_compile $srcdir/$subdir/liba.md liba.o object \"-g -fdef=.dm -fmod=.md\"\n+    gm2-torture $testcase \"-g -fdef=.dm -fmod=.md\"\n+}"}]}