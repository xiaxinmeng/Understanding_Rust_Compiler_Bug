{"sha": "b0b5710cf676de537bc97b912218dd20d2cc36cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjBiNTcxMGNmNjc2ZGU1MzdiYzk3YjkxMjIxOGRkMjBkMmNjMzZjZA==", "commit": {"author": {"name": "Aditya Kumar", "email": "aditya.k7@samsung.com", "date": "2015-10-07T19:25:35Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2015-10-07T19:25:35Z"}, "message": "gather bbs and conditions in a single walk through dominators\n\nClean up the function to build scop's basic blocks and the function\nthat gathers the conditions under which a basic block is executed.  We remove\none traversal of the dominator tree.\n\nThis refactoring was triggered by the need of a vec<bb> of all the basic blocks\nin a region.  We will use that vector in a patch that removes the out-of-ssa\ntranslation of scalar dependences: we will iterate through the basic blocks of a\nregion to record scalar dependences crossing bbs or going out of the region.\n\nThe patch passes bootstrap and regtest on x86_64-linux.\n\n2015-10-06  Aditya Kumar  <aditya.k7@samsung.com>\n                Sebastian Pop  <s.pop@samsung.com>\n\n                * graphite-dependences.c (scop_get_dependences): Do not use SCOP_BBS.\n                * graphite-isl-ast-to-gimple.c (get_max_schedule_dimensions): Same.\n                (generate_isl_schedule): Same.\n                * graphite-optimize-isl.c (scop_get_domains): Same.\n                (apply_schedule_map_to_scop): Same.\n                * graphite-poly.c (print_iteration_domains): Same.\n                (remove_gbbs_in_scop): Same.\n                (new_scop): Same.\n                (free_scop): Same.\n                (print_scop): Same.\n                * graphite-poly.h (struct scop): Rename bbs to pbbs.\n                (SCOP_BBS): Remove.\n                * graphite-scop-detection.c (compare_bb_depths): Remove.\n                (graphite_sort_dominated_info): Remove.\n                (try_generate_gimple_bb): Move out of scop_detection.\n                (all_non_dominated_preds_marked_p): Remove.\n                (build_scop_bbs_1): Remove.\n                (build_scop_bbs): Remove.\n                (nb_pbbs_in_loops): Do not use SCOP_BBS.\n                (find_scop_parameters): Same.\n                (sese_dom_walker): Rename gather_bbs.\n                (before_dom_children): Call try_generate_gimple_bb and collect gbb\n                and pbb.\n                (build_scops): Call gather_bbs.\n                * graphite-sese-to-poly.c (build_scop_scattering): Do not use SCOP_BBS.\n                (add_conditions_to_constraints): Same.\n                (build_scop_iteration_domain): Same.\n                (build_scop_drs): Same.\n                (new_pbb_from_pbb): Same.\n                * sese.c (new_sese_info): Create bbs.\n                * sese.h (struct sese_info_t): Add bbs.\n\nCo-Authored-By: Sebastian Pop <s.pop@samsung.com>\n\nFrom-SVN: r228581", "tree": {"sha": "b6c490b95437aad607c9450aa3273e12269a95b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6c490b95437aad607c9450aa3273e12269a95b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0b5710cf676de537bc97b912218dd20d2cc36cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0b5710cf676de537bc97b912218dd20d2cc36cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0b5710cf676de537bc97b912218dd20d2cc36cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0b5710cf676de537bc97b912218dd20d2cc36cd/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b759335b16ebc8d6640778df53c18fe11ca7083a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b759335b16ebc8d6640778df53c18fe11ca7083a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b759335b16ebc8d6640778df53c18fe11ca7083a"}], "stats": {"total": 316, "additions": 118, "deletions": 198}, "files": [{"sha": "e2aad2295fa1129f5467ee4dad9635bf6b81e293", "filename": "gcc/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0b5710cf676de537bc97b912218dd20d2cc36cd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0b5710cf676de537bc97b912218dd20d2cc36cd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b0b5710cf676de537bc97b912218dd20d2cc36cd", "patch": "@@ -1,3 +1,38 @@\n+2015-10-07  Aditya Kumar  <aditya.k7@samsung.com>\n+\t    Sebastian Pop  <s.pop@samsung.com>\n+\n+\t* graphite-dependences.c (scop_get_dependences): Do not use SCOP_BBS.\n+\t* graphite-isl-ast-to-gimple.c (get_max_schedule_dimensions): Same.\n+\t(generate_isl_schedule): Same.\n+\t* graphite-optimize-isl.c (scop_get_domains): Same.\n+\t(apply_schedule_map_to_scop): Same.\n+\t* graphite-poly.c (print_iteration_domains): Same.\n+\t(remove_gbbs_in_scop): Same.\n+\t(new_scop): Same.\n+\t(free_scop): Same.\n+\t(print_scop): Same.\n+\t* graphite-poly.h (struct scop): Rename bbs to pbbs.\n+\t(SCOP_BBS): Remove.\n+\t* graphite-scop-detection.c (compare_bb_depths): Remove.\n+\t(graphite_sort_dominated_info): Remove.\n+\t(try_generate_gimple_bb): Move out of scop_detection.\n+\t(all_non_dominated_preds_marked_p): Remove.\n+\t(build_scop_bbs_1): Remove.\n+\t(build_scop_bbs): Remove.\n+\t(nb_pbbs_in_loops): Do not use SCOP_BBS.\n+\t(find_scop_parameters): Same.\n+\t(sese_dom_walker): Rename gather_bbs.\n+\t(before_dom_children): Call try_generate_gimple_bb and collect gbb\n+\tand pbb.\n+\t(build_scops): Call gather_bbs.\n+\t* graphite-sese-to-poly.c (build_scop_scattering): Do not use SCOP_BBS.\n+\t(add_conditions_to_constraints): Same.\n+\t(build_scop_iteration_domain): Same.\n+\t(build_scop_drs): Same.\n+\t(new_pbb_from_pbb): Same.\n+\t* sese.c (new_sese_info): Create bbs.\n+\t* sese.h (struct sese_info_t): Add bbs.\n+\n 2015-10-07  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* config/rs6000/xcoff.h (ASM_PREFERRED_EH_DATA_FORMAT): Use 64-bit"}, {"sha": "e879429d0b12ce493e89cc549a2134fd7736e671", "filename": "gcc/graphite-dependences.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0b5710cf676de537bc97b912218dd20d2cc36cd/gcc%2Fgraphite-dependences.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0b5710cf676de537bc97b912218dd20d2cc36cd/gcc%2Fgraphite-dependences.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-dependences.c?ref=b0b5710cf676de537bc97b912218dd20d2cc36cd", "patch": "@@ -335,7 +335,7 @@ scop_get_dependences (scop_p scop)\n   isl_union_map *dependences;\n \n   if (!scop->must_raw)\n-    compute_deps (scop, SCOP_BBS (scop),\n+    compute_deps (scop, scop->pbbs,\n \t\t  &scop->must_raw, &scop->may_raw,\n \t\t  &scop->must_raw_no_source, &scop->may_raw_no_source,\n \t\t  &scop->must_war, &scop->may_war,"}, {"sha": "2f2e2ba26eb1c81622ad2b8b97698ba84ff8421b", "filename": "gcc/graphite-isl-ast-to-gimple.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0b5710cf676de537bc97b912218dd20d2cc36cd/gcc%2Fgraphite-isl-ast-to-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0b5710cf676de537bc97b912218dd20d2cc36cd/gcc%2Fgraphite-isl-ast-to-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-isl-ast-to-gimple.c?ref=b0b5710cf676de537bc97b912218dd20d2cc36cd", "patch": "@@ -940,7 +940,7 @@ int get_max_schedule_dimensions (scop_p scop)\n   poly_bb_p pbb;\n   int schedule_dims = 0;\n \n-  FOR_EACH_VEC_ELT (SCOP_BBS (scop), i, pbb)\n+  FOR_EACH_VEC_ELT (scop->pbbs, i, pbb)\n     {\n       int pbb_schedule_dims = isl_map_dim (pbb->transformed, isl_dim_out);\n       if (pbb_schedule_dims > schedule_dims)\n@@ -987,7 +987,7 @@ generate_isl_schedule (scop_p scop)\n   isl_union_map *schedule_isl =\n     isl_union_map_empty (isl_set_get_space (scop->param_context));\n \n-  FOR_EACH_VEC_ELT (SCOP_BBS (scop), i, pbb)\n+  FOR_EACH_VEC_ELT (scop->pbbs, i, pbb)\n     {\n       /* Dead code elimination: when the domain of a PBB is empty,\n \t don't generate code for the PBB.  */"}, {"sha": "090bc01a107d070db16b0b5037dd1937460edf27", "filename": "gcc/graphite-optimize-isl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0b5710cf676de537bc97b912218dd20d2cc36cd/gcc%2Fgraphite-optimize-isl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0b5710cf676de537bc97b912218dd20d2cc36cd/gcc%2Fgraphite-optimize-isl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-optimize-isl.c?ref=b0b5710cf676de537bc97b912218dd20d2cc36cd", "patch": "@@ -58,7 +58,7 @@ scop_get_domains (scop_p scop ATTRIBUTE_UNUSED)\n   isl_space *space = isl_set_get_space (scop->param_context);\n   isl_union_set *res = isl_union_set_empty (space);\n \n-  FOR_EACH_VEC_ELT (scop->bbs, i, pbb)\n+  FOR_EACH_VEC_ELT (scop->pbbs, i, pbb)\n     res = isl_union_set_add_set (res, isl_set_copy (pbb->domain));\n \n   return res;\n@@ -270,7 +270,7 @@ apply_schedule_map_to_scop (scop_p scop, isl_union_map *schedule_map)\n   int i;\n   poly_bb_p pbb;\n \n-  FOR_EACH_VEC_ELT (scop->bbs, i, pbb)\n+  FOR_EACH_VEC_ELT (scop->pbbs, i, pbb)\n     {\n       isl_set *domain = isl_set_copy (pbb->domain);\n       isl_map *stmt_schedule;"}, {"sha": "84ecee09c376a9b84544d87dc149efe1caca66d9", "filename": "gcc/graphite-poly.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0b5710cf676de537bc97b912218dd20d2cc36cd/gcc%2Fgraphite-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0b5710cf676de537bc97b912218dd20d2cc36cd/gcc%2Fgraphite-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-poly.c?ref=b0b5710cf676de537bc97b912218dd20d2cc36cd", "patch": "@@ -87,7 +87,7 @@ print_iteration_domains (FILE *file, scop_p scop, int verbosity)\n   int i;\n   poly_bb_p pbb;\n \n-  FOR_EACH_VEC_ELT (SCOP_BBS (scop), i, pbb)\n+  FOR_EACH_VEC_ELT (scop->pbbs, i, pbb)\n     print_iteration_domain (file, pbb, verbosity);\n }\n \n@@ -294,7 +294,7 @@ remove_gbbs_in_scop (scop_p scop)\n   int i;\n   poly_bb_p pbb;\n \n-  FOR_EACH_VEC_ELT (SCOP_BBS (scop), i, pbb)\n+  FOR_EACH_VEC_ELT (scop->pbbs, i, pbb)\n     free_gimple_poly_bb (PBB_BLACK_BOX (pbb));\n }\n \n@@ -320,7 +320,7 @@ new_scop (edge entry, edge exit)\n   scop->must_waw_no_source = NULL;\n   scop->may_waw_no_source = NULL;\n   scop_set_region (scop, region);\n-  SCOP_BBS (scop).create (3);\n+  scop->pbbs.create (3);\n   POLY_SCOP_P (scop) = false;\n   scop->drs.create (3);\n \n@@ -338,10 +338,10 @@ free_scop (scop_p scop)\n   remove_gbbs_in_scop (scop);\n   free_sese_info (SCOP_REGION (scop));\n \n-  FOR_EACH_VEC_ELT (SCOP_BBS (scop), i, pbb)\n+  FOR_EACH_VEC_ELT (scop->pbbs, i, pbb)\n     free_poly_bb (pbb);\n \n-  SCOP_BBS (scop).release ();\n+  scop->pbbs.release ();\n \n   isl_set_free (scop->param_context);\n   isl_union_map_free (scop->must_raw);\n@@ -625,9 +625,9 @@ print_scop (FILE *file, scop_p scop, int verbosity)\n   if (verbosity > 0)\n     fprintf (file, \"# Number of statements\\n\");\n \n-  fprintf (file, \"%d\\n\", SCOP_BBS (scop).length ());\n+  fprintf (file, \"%d\\n\", scop->pbbs.length ());\n \n-  FOR_EACH_VEC_ELT (SCOP_BBS (scop), i, pbb)\n+  FOR_EACH_VEC_ELT (scop->pbbs, i, pbb)\n     print_pbb (file, pbb, verbosity);\n \n   fprintf (file, \"#)\\n\");"}, {"sha": "e4774391779c7192584f9b74665ae774ab1014ab", "filename": "gcc/graphite-poly.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0b5710cf676de537bc97b912218dd20d2cc36cd/gcc%2Fgraphite-poly.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0b5710cf676de537bc97b912218dd20d2cc36cd/gcc%2Fgraphite-poly.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-poly.h?ref=b0b5710cf676de537bc97b912218dd20d2cc36cd", "patch": "@@ -415,7 +415,7 @@ struct scop\n   /* All the basic blocks in this scop that contain memory references\n      and that will be represented as statements in the polyhedral\n      representation.  */\n-  vec<poly_bb_p> bbs;\n+  vec<poly_bb_p> pbbs;\n \n   /* All the data references in this scop.  */\n   vec<dr_info> drs;\n@@ -451,7 +451,6 @@ struct scop\n   bool poly_scop_p;\n };\n \n-#define SCOP_BBS(S) (S->bbs)\n #define SCOP_REGION(S) (S->region)\n #define SCOP_CONTEXT(S) (NULL)\n #define POLY_SCOP_P(S) (S->poly_scop_p)"}, {"sha": "6c0987dd0297438e0969c6621fb02e757d05098b", "filename": "gcc/graphite-scop-detection.c", "status": "modified", "additions": 57, "deletions": 174, "changes": 231, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0b5710cf676de537bc97b912218dd20d2cc36cd/gcc%2Fgraphite-scop-detection.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0b5710cf676de537bc97b912218dd20d2cc36cd/gcc%2Fgraphite-scop-detection.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-scop-detection.c?ref=b0b5710cf676de537bc97b912218dd20d2cc36cd", "patch": "@@ -113,34 +113,6 @@ same_close_phi_node (gphi *p1, gphi *p2)\n \t\t\t  gimple_phi_arg_def (p2, 0), 0);\n }\n \n-/* Compare the depth of two basic_block's P1 and P2.  */\n-\n-static int\n-compare_bb_depths (const void *p1, const void *p2)\n-{\n-  const_basic_block const bb1 = *(const_basic_block const *)p1;\n-  const_basic_block const bb2 = *(const_basic_block const *)p2;\n-  int d1 = loop_depth (bb1->loop_father);\n-  int d2 = loop_depth (bb2->loop_father);\n-\n-  if (d1 < d2)\n-    return 1;\n-\n-  if (d1 > d2)\n-    return -1;\n-\n-  return 0;\n-}\n-\n-/* Sort the basic blocks from DOM such that the first are the ones at\n-   a deepest loop level.  */\n-\n-static void\n-graphite_sort_dominated_info (vec<basic_block> dom)\n-{\n-  dom.qsort (compare_bb_depths);\n-}\n-\n static void make_close_phi_nodes_unique (basic_block bb);\n \n /* Remove the close phi node at GSI and replace its rhs with the rhs\n@@ -509,25 +481,6 @@ class scop_detection\n \n   static bool can_represent_loop (loop_p loop, sese_l scop);\n \n-  /* Generates a polyhedral black box only if the bb contains interesting\n-     information.  */\n-\n-  static gimple_poly_bb_p try_generate_gimple_bb (scop_p scop, basic_block bb);\n-\n-  /* Returns true if all predecessors of BB, that are not dominated by BB, are\n-     marked in MAP.  The predecessors dominated by BB are loop latches and will\n-     be handled after BB.  */\n-\n-  static bool all_non_dominated_preds_marked_p (basic_block bb, sbitmap map);\n-\n-  /* Recursive helper function for build_scops_bbs.  */\n-\n-  static void build_scop_bbs_1 (scop_p scop, sbitmap visited, basic_block bb);\n-\n-  /* Gather the basic blocks belonging to the SCOP.  */\n-\n-  static void build_scop_bbs (scop_p scop);\n-\n   /* Returns the number of pbbs that are in loops contained in SCOP.  */\n \n   static int nb_pbbs_in_loops (scop_p scop);\n@@ -1519,102 +1472,6 @@ scop_detection::loop_body_is_valid_scop (loop_p loop, sese_l scop) const\n   return true;\n }\n \n-/* Generates a polyhedral black box only if the bb contains interesting\n-   information.  */\n-\n-gimple_poly_bb_p\n-scop_detection::try_generate_gimple_bb (scop_p scop, basic_block bb)\n-{\n-  vec<data_reference_p> drs;\n-  drs.create (5);\n-  sese_l region = scop->region->region;\n-  loop_p nest = outermost_loop_in_sese (region, bb);\n-\n-  loop_p loop = bb->loop_father;\n-  if (!loop_in_sese_p (loop, region))\n-    loop = nest;\n-\n-  gimple_stmt_iterator gsi;\n-  for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n-    {\n-      gimple *stmt = gsi_stmt (gsi);\n-      if (is_gimple_debug (stmt))\n-\tcontinue;\n-\n-      graphite_find_data_references_in_stmt (nest, loop, stmt, &drs);\n-    }\n-\n-  return new_gimple_poly_bb (bb, drs);\n-}\n-\n-/* Returns true if all predecessors of BB, that are not dominated by BB, are\n-   marked in MAP.  The predecessors dominated by BB are loop latches and will\n-   be handled after BB.  */\n-\n-bool\n-scop_detection::all_non_dominated_preds_marked_p (basic_block bb, sbitmap map)\n-{\n-  edge e;\n-  edge_iterator ei;\n-\n-  FOR_EACH_EDGE (e, ei, bb->preds)\n-    if (!bitmap_bit_p (map, e->src->index)\n-\t&& !dominated_by_p (CDI_DOMINATORS, e->src, bb))\n-      return false;\n-\n-  return true;\n-}\n-\n-/* Recursive helper function for build_scops_bbs.  */\n-\n-void\n-scop_detection::build_scop_bbs_1 (scop_p scop, sbitmap visited, basic_block bb)\n-{\n-  if (bitmap_bit_p (visited, bb->index)\n-      || !bb_in_sese_p (bb, scop->region->region))\n-    return;\n-\n-  poly_bb_p pbb = new_poly_bb (scop, try_generate_gimple_bb (scop, bb));\n-  SCOP_BBS (scop).safe_push (pbb);\n-  bitmap_set_bit (visited, bb->index);\n-\n-  vec<basic_block> dom = get_dominated_by (CDI_DOMINATORS, bb);\n-\n-  if (!dom.exists ())\n-    return;\n-\n-  graphite_sort_dominated_info (dom);\n-\n-  while (!dom.is_empty ())\n-    {\n-      int i;\n-      basic_block dom_bb;\n-\n-      FOR_EACH_VEC_ELT (dom, i, dom_bb)\n-\tif (all_non_dominated_preds_marked_p (dom_bb, visited))\n-\t  {\n-\t    build_scop_bbs_1 (scop, visited, dom_bb);\n-\t    dom.unordered_remove (i);\n-\t    break;\n-\t  }\n-    }\n-\n-  dom.release ();\n-}\n-\n-/* Gather the basic blocks belonging to the SCOP.  */\n-\n-void\n-scop_detection::build_scop_bbs (scop_p scop)\n-{\n-  sbitmap visited = sbitmap_alloc (last_basic_block_for_fn (cfun));\n-  sese_l region = scop->region->region;\n-\n-  bitmap_clear (visited);\n-  build_scop_bbs_1 (scop, visited, region.entry->dest);\n-  sbitmap_free (visited);\n-}\n-\n /* Returns the number of pbbs that are in loops contained in SCOP.  */\n \n int\n@@ -1624,7 +1481,7 @@ scop_detection::nb_pbbs_in_loops (scop_p scop)\n   poly_bb_p pbb;\n   int res = 0;\n \n-  FOR_EACH_VEC_ELT (SCOP_BBS (scop), i, pbb)\n+  FOR_EACH_VEC_ELT (scop->pbbs, i, pbb)\n     if (loop_in_sese_p (gbb_loop (PBB_BLACK_BOX (pbb)), scop->region->region))\n       res++;\n \n@@ -1783,79 +1640,106 @@ find_scop_parameters (scop_p scop)\n \n   /* Find the parameters used in data accesses.  */\n   poly_bb_p pbb;\n-  FOR_EACH_VEC_ELT (SCOP_BBS (scop), i, pbb)\n+  FOR_EACH_VEC_ELT (scop->pbbs, i, pbb)\n     find_params_in_bb (region, PBB_BLACK_BOX (pbb));\n \n   int nbp = sese_nb_params (region);\n   scop_set_nb_params (scop, nbp);\n }\n \n-class sese_dom_walker : public dom_walker\n+/* Generates a polyhedral black box only if the bb contains interesting\n+   information.  */\n+\n+static gimple_poly_bb_p\n+try_generate_gimple_bb (scop_p scop, basic_block bb)\n+{\n+  vec<data_reference_p> drs;\n+  drs.create (5);\n+  sese_l region = scop->region->region;\n+  loop_p nest = outermost_loop_in_sese (region, bb);\n+\n+  loop_p loop = bb->loop_father;\n+  if (!loop_in_sese_p (loop, region))\n+    loop = nest;\n+\n+  gimple_stmt_iterator gsi;\n+  for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n+    {\n+      gimple *stmt = gsi_stmt (gsi);\n+      if (is_gimple_debug (stmt))\n+\tcontinue;\n+\n+      graphite_find_data_references_in_stmt (nest, loop, stmt, &drs);\n+    }\n+\n+  return new_gimple_poly_bb (bb, drs);\n+}\n+\n+/* Gather BBs and conditions for a SCOP.  */\n+class gather_bbs : public dom_walker\n {\n public:\n-  sese_dom_walker (cdi_direction, sese_l);\n+  gather_bbs (cdi_direction, scop_p);\n \n   virtual void before_dom_children (basic_block);\n   virtual void after_dom_children (basic_block);\n \n private:\n-  auto_vec<gimple *, 3> m_conditions, m_cases;\n-  sese_l m_region;\n+  auto_vec<gimple *, 3> conditions, cases;\n+  scop_p scop;\n };\n }\n-sese_dom_walker::sese_dom_walker (cdi_direction direction, sese_l region)\n-  : dom_walker (direction), m_region (region)\n+gather_bbs::gather_bbs (cdi_direction direction, scop_p scop)\n+  : dom_walker (direction), scop (scop)\n {\n }\n \n /* Call-back for dom_walk executed before visiting the dominated\n    blocks.  */\n \n void\n-sese_dom_walker::before_dom_children (basic_block bb)\n+gather_bbs::before_dom_children (basic_block bb)\n {\n-  gimple_poly_bb_p gbb;\n-  gcond *stmt;\n-\n-  if (!bb_in_sese_p (bb, m_region))\n+  if (!bb_in_sese_p (bb, scop->region->region))\n     return;\n \n-  stmt = single_pred_cond_non_loop_exit (bb);\n+  gcond *stmt = single_pred_cond_non_loop_exit (bb);\n \n   if (stmt)\n     {\n       edge e = single_pred_edge (bb);\n \n-      m_conditions.safe_push (stmt);\n+      conditions.safe_push (stmt);\n \n       if (e->flags & EDGE_TRUE_VALUE)\n-\tm_cases.safe_push (stmt);\n+\tcases.safe_push (stmt);\n       else\n-\tm_cases.safe_push (NULL);\n+\tcases.safe_push (NULL);\n     }\n \n-  gbb = gbb_from_bb (bb);\n+  scop->region->bbs.safe_push (bb);\n \n-  if (gbb)\n-    {\n-      GBB_CONDITIONS (gbb) = m_conditions.copy ();\n-      GBB_CONDITION_CASES (gbb) = m_cases.copy ();\n-    }\n+  gimple_poly_bb_p gbb = try_generate_gimple_bb (scop, bb);\n+  GBB_CONDITIONS (gbb) = conditions.copy ();\n+  GBB_CONDITION_CASES (gbb) = cases.copy ();\n+\n+  poly_bb_p pbb = new_poly_bb (scop, gbb);\n+  scop->pbbs.safe_push (pbb);\n }\n \n /* Call-back for dom_walk executed after visiting the dominated\n    blocks.  */\n \n void\n-sese_dom_walker::after_dom_children (basic_block bb)\n+gather_bbs::after_dom_children (basic_block bb)\n {\n-  if (!bb_in_sese_p (bb, m_region))\n+  if (!bb_in_sese_p (bb, scop->region->region))\n     return;\n \n   if (single_pred_cond_non_loop_exit (bb))\n     {\n-      m_conditions.pop ();\n-      m_cases.pop ();\n+      conditions.pop ();\n+      cases.pop ();\n     }\n }\n \n@@ -1881,7 +1765,9 @@ build_scops (vec<scop_p> *scops)\n     {\n       scop_p scop = new_scop (s.entry, s.exit);\n \n-      sb.build_scop_bbs (scop);\n+      /* Record all basic blocks and their conditions in REGION.  */\n+      gather_bbs (CDI_DOMINATORS, scop).walk (cfun->cfg->x_entry_block_ptr);\n+\n       /* Do not optimize a scop containing only PBBs that do not belong\n \t to any loops.  */\n       if (sb.nb_pbbs_in_loops (scop) == 0)\n@@ -1892,9 +1778,6 @@ build_scops (vec<scop_p> *scops)\n \t}\n \n       build_sese_loop_nests (scop->region);\n-      /* Record all conditions in REGION.  */\n-      sese_dom_walker (CDI_DOMINATORS, scop->region->region).walk\n-\t(cfun->cfg->x_entry_block_ptr);\n \n       find_scop_parameters (scop);\n       graphite_dim_t max_dim = PARAM_VALUE (PARAM_GRAPHITE_MAX_NB_SCOP_PARAMS);"}, {"sha": "261e67d53f798884394edf67e96c7ec9bca19666", "filename": "gcc/graphite-sese-to-poly.c", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0b5710cf676de537bc97b912218dd20d2cc36cd/gcc%2Fgraphite-sese-to-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0b5710cf676de537bc97b912218dd20d2cc36cd/gcc%2Fgraphite-sese-to-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-sese-to-poly.c?ref=b0b5710cf676de537bc97b912218dd20d2cc36cd", "patch": "@@ -329,7 +329,7 @@ build_scop_scattering (scop_p scop)\n \n   int i;\n   poly_bb_p pbb;\n-  FOR_EACH_VEC_ELT (SCOP_BBS (scop), i, pbb)\n+  FOR_EACH_VEC_ELT (scop->pbbs, i, pbb)\n     {\n       gimple_poly_bb_p gbb = PBB_BLACK_BOX (pbb);\n       int prefix = 0;\n@@ -808,7 +808,7 @@ add_conditions_to_constraints (scop_p scop)\n   int i;\n   poly_bb_p pbb;\n \n-  FOR_EACH_VEC_ELT (SCOP_BBS (scop), i, pbb)\n+  FOR_EACH_VEC_ELT (scop->pbbs, i, pbb)\n     add_conditions_to_domain (pbb);\n }\n \n@@ -904,7 +904,7 @@ build_scop_iteration_domain (scop_p scop)\n \t\t\t\t    isl_set_copy (scop->param_context), doms);\n \n   poly_bb_p pbb;\n-  FOR_EACH_VEC_ELT (SCOP_BBS (scop), i, pbb)\n+  FOR_EACH_VEC_ELT (scop->pbbs, i, pbb)\n     {\n       loop = pbb_loop (pbb);\n \n@@ -1138,17 +1138,17 @@ build_scop_drs (scop_p scop)\n \n   /* Remove all the PBBs that do not have data references: these basic\n      blocks are not handled in the polyhedral representation.  */\n-  for (i = 0; SCOP_BBS (scop).iterate (i, &pbb); i++)\n+  for (i = 0; scop->pbbs.iterate (i, &pbb); i++)\n     if (GBB_DATA_REFS (PBB_BLACK_BOX (pbb)).is_empty ())\n       {\n \tfree_gimple_poly_bb (PBB_BLACK_BOX (pbb));\n \tfree_poly_bb (pbb);\n-\tSCOP_BBS (scop).ordered_remove (i);\n+\tscop->pbbs.ordered_remove (i);\n \ti--;\n       }\n \n   data_reference_p dr;\n-  FOR_EACH_VEC_ELT (SCOP_BBS (scop), i, pbb)\n+  FOR_EACH_VEC_ELT (scop->pbbs, i, pbb)\n     if (pbb)\n       FOR_EACH_VEC_ELT (GBB_DATA_REFS (PBB_BLACK_BOX (pbb)), j, dr)\n \tscop->drs.safe_push (dr_info (dr, -1, pbb));\n@@ -1248,11 +1248,10 @@ new_pbb_from_pbb (scop_p scop, poly_bb_p pbb, basic_block bb)\n   gimple_poly_bb_p gbb = PBB_BLACK_BOX (pbb);\n   gimple_poly_bb_p gbb1 = new_gimple_poly_bb (bb, drs);\n   poly_bb_p pbb1 = new_poly_bb (scop, gbb1);\n-  int index, n = SCOP_BBS (scop).length ();\n+  int index, n = scop->pbbs.length ();\n \n-  /* The INDEX of PBB in SCOP_BBS.  */\n   for (index = 0; index < n; index++)\n-    if (SCOP_BBS (scop)[index] == pbb)\n+    if (scop->pbbs[index] == pbb)\n       break;\n \n   pbb1->domain = isl_set_copy (pbb->domain);\n@@ -1262,7 +1261,7 @@ new_pbb_from_pbb (scop_p scop, poly_bb_p pbb, basic_block bb)\n   GBB_PBB (gbb1) = pbb1;\n   GBB_CONDITIONS (gbb1) = GBB_CONDITIONS (gbb).copy ();\n   GBB_CONDITION_CASES (gbb1) = GBB_CONDITION_CASES (gbb).copy ();\n-  SCOP_BBS (scop).safe_insert (index + 1, pbb1);\n+  scop->pbbs.safe_insert (index + 1, pbb1);\n }\n \n /* Insert on edge E the assignment \"RES := EXPR\".  */"}, {"sha": "aa19c6873ed7ea801e9bd2e750ace5209d76d243", "filename": "gcc/sese.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0b5710cf676de537bc97b912218dd20d2cc36cd/gcc%2Fsese.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0b5710cf676de537bc97b912218dd20d2cc36cd/gcc%2Fsese.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsese.c?ref=b0b5710cf676de537bc97b912218dd20d2cc36cd", "patch": "@@ -265,6 +265,7 @@ new_sese_info (edge entry, edge exit)\n   SESE_LOOP_NEST (region).create (3);\n   SESE_PARAMS (region).create (3);\n   region->parameter_rename_map = new parameter_rename_map_t;\n+  region->bbs.create (3);\n \n   return region;\n }"}, {"sha": "d429d5854f27daa3c9a19eecf7394273d8f304e1", "filename": "gcc/sese.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0b5710cf676de537bc97b912218dd20d2cc36cd/gcc%2Fsese.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0b5710cf676de537bc97b912218dd20d2cc36cd/gcc%2Fsese.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsese.h?ref=b0b5710cf676de537bc97b912218dd20d2cc36cd", "patch": "@@ -78,6 +78,9 @@ typedef struct sese_info_t\n   /* Loops completely contained in this SESE.  */\n   bitmap loops;\n   vec<loop_p> loop_nest;\n+\n+  /* Basic blocks contained in this SESE.  */\n+  vec<basic_block> bbs;\n } *sese_info_p;\n \n #define SESE_PARAMS(S) (S->params)"}]}