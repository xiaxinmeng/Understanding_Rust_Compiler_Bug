{"sha": "fa06ab5c426c2d6a6f3a22799216c5199e617d85", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmEwNmFiNWM0MjZjMmQ2YTZmM2EyMjc5OTIxNmM1MTk5ZTYxN2Q4NQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2002-04-12T12:33:24Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2002-04-12T12:33:24Z"}, "message": "expr.c (expand_assigment): Remove duplicate conversions #ifdef POINTERS_EXTEND_UNSIGNED.\n\n\t* expr.c (expand_assigment): Remove duplicate conversions #ifdef\n\tPOINTERS_EXTEND_UNSIGNED.\n\t(store_constructor, expand_expr, case COMPONENT_REF): Likewise.\n\t(store_expr): Use TYPE_MODE (sizetype), not ptr_mode.\n\nFrom-SVN: r52223", "tree": {"sha": "eb53b2245cbdb9d1a8926413297859db66cdb8c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb53b2245cbdb9d1a8926413297859db66cdb8c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa06ab5c426c2d6a6f3a22799216c5199e617d85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa06ab5c426c2d6a6f3a22799216c5199e617d85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa06ab5c426c2d6a6f3a22799216c5199e617d85", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa06ab5c426c2d6a6f3a22799216c5199e617d85/comments", "author": null, "committer": null, "parents": [{"sha": "fa1591cb15030b84edf5b44aced7c0138d907214", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa1591cb15030b84edf5b44aced7c0138d907214", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa1591cb15030b84edf5b44aced7c0138d907214"}], "stats": {"total": 25, "additions": 15, "deletions": 10}, "files": [{"sha": "63fc94ffff8e31774da7a72cfd142a314ccde418", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa06ab5c426c2d6a6f3a22799216c5199e617d85/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa06ab5c426c2d6a6f3a22799216c5199e617d85/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fa06ab5c426c2d6a6f3a22799216c5199e617d85", "patch": "@@ -1,5 +1,10 @@\n Fri Apr 12 08:06:54 2002  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n+\t* expr.c (expand_assigment): Remove duplicate conversions #ifdef\n+\tPOINTERS_EXTEND_UNSIGNED.\n+\t(store_constructor, expand_expr, case COMPONENT_REF): Likewise.\n+\t(store_expr): Use TYPE_MODE (sizetype), not ptr_mode.\n+\n \t* emit-rtl.c (widen_memory_access): Don't do anything if MEMOFFSET\n \tnot specified.\n "}, {"sha": "c5b1eced98dc2c530aa28ce20f81bf985f3e0096", "filename": "gcc/expr.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa06ab5c426c2d6a6f3a22799216c5199e617d85/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa06ab5c426c2d6a6f3a22799216c5199e617d85/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=fa06ab5c426c2d6a6f3a22799216c5199e617d85", "patch": "@@ -3684,12 +3684,12 @@ expand_assignment (to, from, want_value, suggest_reg)\n \t  if (GET_CODE (to_rtx) != MEM)\n \t    abort ();\n \n-\t  if (GET_MODE (offset_rtx) != ptr_mode)\n-\t    offset_rtx = convert_to_mode (ptr_mode, offset_rtx, 0);\n-\n #ifdef POINTERS_EXTEND_UNSIGNED\n \t  if (GET_MODE (offset_rtx) != Pmode)\n \t    offset_rtx = convert_memory_address (Pmode, offset_rtx);\n+#else\n+\t  if (GET_MODE (offset_rtx) != ptr_mode)\n+\t    offset_rtx = convert_to_mode (ptr_mode, offset_rtx, 0);\n #endif\n \n \t  /* A constant address in TO_RTX can have VOIDmode, we must not try\n@@ -4180,7 +4180,7 @@ store_expr (exp, target, want_value)\n \t\t}\n \t      else\n \t\t{\n-\t\t  size = expand_binop (ptr_mode, sub_optab, size,\n+\t\t  size = expand_binop (TYPE_MODE (sizetype), sub_optab, size,\n \t\t\t\t       copy_size_rtx, NULL_RTX, 0,\n \t\t\t\t       OPTAB_LIB_WIDEN);\n \n@@ -4489,12 +4489,12 @@ store_constructor (exp, target, cleared, size)\n \t      if (GET_CODE (to_rtx) != MEM)\n \t\tabort ();\n \n-\t      if (GET_MODE (offset_rtx) != ptr_mode)\n-\t\toffset_rtx = convert_to_mode (ptr_mode, offset_rtx, 0);\n-\n #ifdef POINTERS_EXTEND_UNSIGNED\n \t      if (GET_MODE (offset_rtx) != Pmode)\n \t\toffset_rtx = convert_memory_address (Pmode, offset_rtx);\n+#else\n+\t      if (GET_MODE (offset_rtx) != ptr_mode)\n+\t\toffset_rtx = convert_to_mode (ptr_mode, offset_rtx, 0);\n #endif\n \n \t      to_rtx = offset_address (to_rtx, offset_rtx,\n@@ -6913,12 +6913,12 @@ expand_expr (exp, target, tmode, modifier)\n \t    if (GET_CODE (op0) != MEM)\n \t      abort ();\n \n-\t    if (GET_MODE (offset_rtx) != ptr_mode)\n-\t      offset_rtx = convert_to_mode (ptr_mode, offset_rtx, 0);\n-\n #ifdef POINTERS_EXTEND_UNSIGNED\n \t    if (GET_MODE (offset_rtx) != Pmode)\n \t      offset_rtx = convert_memory_address (Pmode, offset_rtx);\n+#else\n+\t    if (GET_MODE (offset_rtx) != ptr_mode)\n+\t      offset_rtx = convert_to_mode (ptr_mode, offset_rtx, 0);\n #endif\n \n \t    /* A constant address in OP0 can have VOIDmode, we must not try"}]}