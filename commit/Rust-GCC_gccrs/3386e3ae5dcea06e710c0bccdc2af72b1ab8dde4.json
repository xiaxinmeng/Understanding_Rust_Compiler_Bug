{"sha": "3386e3ae5dcea06e710c0bccdc2af72b1ab8dde4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzM4NmUzYWU1ZGNlYTA2ZTcxMGMwYmNjZGMyYWY3MmIxYWI4ZGRlNA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-06-16T10:25:47Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-06-16T10:25:47Z"}, "message": "[multiple changes]\n\n2016-06-16  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch3.adb (Check_Entry_Contracts): New procedure, subsidiary\n\tof Analyze_Declarations, that performs pre-analysis of\n\tpre/postconditions on entry declarations before full analysis\n\tis performed after entries have been converted into procedures.\n\tDone solely to capture semantic errors.\n\t* sem_attr.adb (Analyze_Attribute, case 'Result): Add guard to\n\tcall to Denote_Same_Function.\n\n2016-06-16  Emmanuel Briot  <briot@adacore.com>\n\n\t* g-comlin.adb: Fix minor memory leak in GNAT.Command_Line.\n\n2016-06-16  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_ch7.adb (Find_Last_Init): Remove obsolete code. The\n\tlogic is now performed by Process_Object_Declaration.\n\t(Process_Declarations): Recognize a controlled deferred\n\tconstant which is in fact initialized by means of a\n\tbuild-in-place function call as needing finalization actions.\n\t(Process_Object_Declaration): Insert the counter after the\n\tbuild-in-place initialization call for a controlled object. This\n\twas previously done in Find_Last_Init.\n\t* exp_util.adb (Requires_Cleanup_Actions): Recognize a controlled\n\tdeferred constant which is in fact initialized by means of a\n\tbuild-in-place function call as needing finalization actions.\n\n2016-06-16  Justin Squirek  <squirek@adacore.com>\n\n\t* exp_aggr.adb (Expand_Array_Aggregate): Minor comment changes and\n\tadditional style fixes.\n\t* exp_ch7.adb: Minor typo fixes and reformatting.\n\nFrom-SVN: r237515", "tree": {"sha": "22cccf2de5d7b3b6967f2e729fc3a520cc668e52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22cccf2de5d7b3b6967f2e729fc3a520cc668e52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3386e3ae5dcea06e710c0bccdc2af72b1ab8dde4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3386e3ae5dcea06e710c0bccdc2af72b1ab8dde4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3386e3ae5dcea06e710c0bccdc2af72b1ab8dde4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3386e3ae5dcea06e710c0bccdc2af72b1ab8dde4/comments", "author": null, "committer": null, "parents": [{"sha": "5ed4ba1574be5f1f1b01672d38cbcb76c6951398", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ed4ba1574be5f1f1b01672d38cbcb76c6951398", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ed4ba1574be5f1f1b01672d38cbcb76c6951398"}], "stats": {"total": 244, "additions": 163, "deletions": 81}, "files": [{"sha": "5f24e357f2519e435f3c8e4d768862f6cb5b8549", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3386e3ae5dcea06e710c0bccdc2af72b1ab8dde4/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3386e3ae5dcea06e710c0bccdc2af72b1ab8dde4/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3386e3ae5dcea06e710c0bccdc2af72b1ab8dde4", "patch": "@@ -1,3 +1,37 @@\n+2016-06-16  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb (Check_Entry_Contracts): New procedure, subsidiary\n+\tof Analyze_Declarations, that performs pre-analysis of\n+\tpre/postconditions on entry declarations before full analysis\n+\tis performed after entries have been converted into procedures.\n+\tDone solely to capture semantic errors.\n+\t* sem_attr.adb (Analyze_Attribute, case 'Result): Add guard to\n+\tcall to Denote_Same_Function.\n+\n+2016-06-16  Emmanuel Briot  <briot@adacore.com>\n+\n+\t* g-comlin.adb: Fix minor memory leak in GNAT.Command_Line.\n+\n+2016-06-16  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch7.adb (Find_Last_Init): Remove obsolete code. The\n+\tlogic is now performed by Process_Object_Declaration.\n+\t(Process_Declarations): Recognize a controlled deferred\n+\tconstant which is in fact initialized by means of a\n+\tbuild-in-place function call as needing finalization actions.\n+\t(Process_Object_Declaration): Insert the counter after the\n+\tbuild-in-place initialization call for a controlled object. This\n+\twas previously done in Find_Last_Init.\n+\t* exp_util.adb (Requires_Cleanup_Actions): Recognize a controlled\n+\tdeferred constant which is in fact initialized by means of a\n+\tbuild-in-place function call as needing finalization actions.\n+\n+2016-06-16  Justin Squirek  <squirek@adacore.com>\n+\n+\t* exp_aggr.adb (Expand_Array_Aggregate): Minor comment changes and\n+\tadditional style fixes.\n+\t* exp_ch7.adb: Minor typo fixes and reformatting.\n+\n 2016-06-16  Justin Squirek  <squirek@adacore.com>\n \n \t* sem_ch3.adb (Analyze_Object_Declaration): Add a missing check"}, {"sha": "c3949dfa7f0cbce3a3d1cd4a9b834313a9e60b0e", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3386e3ae5dcea06e710c0bccdc2af72b1ab8dde4/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3386e3ae5dcea06e710c0bccdc2af72b1ab8dde4/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=3386e3ae5dcea06e710c0bccdc2af72b1ab8dde4", "patch": "@@ -5517,20 +5517,21 @@ package body Exp_Aggr is\n       --  object. (Note: we don't use a block statement because this would\n       --  cause generated freeze nodes to be elaborated in the wrong scope).\n \n-      --  Should document these individual tests ???\n+      --  Do not perform in-place expansion for SPARK 05 because aggregates are\n+      --  expected to appear in qualified form. In-place expansion eliminates\n+      --  the qualification and eventually violates this SPARK 05 restiction.\n \n-      if not Has_Default_Init_Comps (N)\n-         and then Comes_From_Source (Parent_Node)\n-         and then Parent_Kind = N_Object_Declaration\n-         and then not\n-           Must_Slide (Etype (Defining_Identifier (Parent_Node)), Typ)\n-         and then Present (Expression (Parent_Node))\n-         and then not Has_Controlled_Component (Typ)\n-         and then not Is_Bit_Packed_Array (Typ)\n-\n-         --  ??? the test for SPARK 05 needs documentation\n+      --  Should document the rest of the guards ???\n \n-         and then not Restriction_Check_Required (SPARK_05)\n+      if not Has_Default_Init_Comps (N)\n+        and then Comes_From_Source (Parent_Node)\n+        and then Parent_Kind = N_Object_Declaration\n+        and then Present (Expression (Parent_Node))\n+        and then not\n+          Must_Slide (Etype (Defining_Identifier (Parent_Node)), Typ)\n+        and then not Has_Controlled_Component (Typ)\n+        and then not Is_Bit_Packed_Array (Typ)\n+        and then not Restriction_Check_Required (SPARK_05)\n       then\n          In_Place_Assign_OK_For_Declaration := True;\n          Tmp := Defining_Identifier (Parent_Node);"}, {"sha": "d6c17372385620db289d333bdab3ff52e9ca3815", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 36, "deletions": 55, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3386e3ae5dcea06e710c0bccdc2af72b1ab8dde4/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3386e3ae5dcea06e710c0bccdc2af72b1ab8dde4/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=3386e3ae5dcea06e710c0bccdc2af72b1ab8dde4", "patch": "@@ -2100,16 +2100,21 @@ package body Exp_Ch7 is\n                   null;\n \n                --  The object is of the form:\n-               --    Obj : Typ [:= Expr];\n+               --    Obj : [constant] Typ [:= Expr];\n \n-               --  Do not process the incomplete view of a deferred constant.\n-               --  Do not consider tag-to-class-wide conversions.\n+               --  Do not process tag-to-class-wide conversions because they do\n+               --  not yield an object. Do not process the incomplete view of a\n+               --  deferred constant. Note that an object initialized by means\n+               --  of a build-in-place function call may appear as a deferred\n+               --  constant after expansion activities. These kinds of objects\n+               --  must be finalized.\n \n                elsif not Is_Imported (Obj_Id)\n                  and then Needs_Finalization (Obj_Typ)\n-                 and then not (Ekind (Obj_Id) = E_Constant\n-                                and then not Has_Completion (Obj_Id))\n                  and then not Is_Tag_To_Class_Wide_Conversion (Obj_Id)\n+                 and then not (Ekind (Obj_Id) = E_Constant\n+                                and then not Has_Completion (Obj_Id)\n+                                and then No (BIP_Initialization_Call (Obj_Id)))\n                then\n                   Processing_Actions;\n \n@@ -2757,48 +2762,9 @@ package body Exp_Ch7 is\n \n             Stmt := Next_Suitable_Statement (Decl);\n \n-            --  A limited controlled object initialized by a function call uses\n-            --  the build-in-place machinery to obtain its value.\n-\n-            --    Obj : Lim_Controlled_Type := Func_Call;\n-\n-            --  is expanded into\n-\n-            --    Obj  : Lim_Controlled_Type;\n-            --    type Ptr_Typ is access Lim_Controlled_Type;\n-            --    Temp : constant Ptr_Typ :=\n-            --             Func_Call\n-            --               (BIPalloc  => 1,\n-            --                BIPaccess => Obj'Unrestricted_Access)'reference;\n-\n-            --  In this scenario the declaration of the temporary acts as the\n-            --  last initialization statement.\n-\n-            if Is_Limited_Type (Obj_Typ)\n-              and then Has_Init_Expression (Decl)\n-              and then No (Expression (Decl))\n-            then\n-               while Present (Stmt) loop\n-                  if Nkind (Stmt) = N_Object_Declaration\n-                    and then Present (Expression (Stmt))\n-                    and then Is_Object_Access_BIP_Func_Call\n-                               (Expr   => Expression (Stmt),\n-                                Obj_Id => Obj_Id)\n-                  then\n-                     Last_Init := Stmt;\n-                     exit;\n-                  end if;\n-\n-                  Next (Stmt);\n-               end loop;\n-\n-            --  Nothing to do for an object with supporessed initialization.\n-            --  Note that this check is not performed at the beginning of the\n-            --  routine because a declaration marked with No_Initialization\n-            --  may still be initialized by a build-in-place call (the case\n-            --  above).\n+            --  Nothing to do for an object with suppressed initialization\n \n-            elsif No_Initialization (Decl) then\n+            if No_Initialization (Decl) then\n                return;\n \n             --  In all other cases the initialization calls follow the related\n@@ -2937,18 +2903,33 @@ package body Exp_Ch7 is\n              Expression => Make_Integer_Literal (Loc, Counter_Val));\n \n          --  Insert the counter after all initialization has been done. The\n-         --  place of insertion depends on the context. If an object is being\n-         --  initialized via an aggregate, then the counter must be inserted\n-         --  after the last aggregate assignment.\n+         --  place of insertion depends on the context.\n \n-         if Ekind_In (Obj_Id, E_Constant, E_Variable)\n-           and then Present (Last_Aggregate_Assignment (Obj_Id))\n-         then\n-            Count_Ins := Last_Aggregate_Assignment (Obj_Id);\n-            Body_Ins  := Empty;\n+         if Ekind_In (Obj_Id, E_Constant, E_Variable) then\n+\n+            --  The object is initialized by a build-in-place function call.\n+            --  The counter insertion point is after the function call.\n+\n+            if Present (BIP_Initialization_Call (Obj_Id)) then\n+               Count_Ins := BIP_Initialization_Call (Obj_Id);\n+               Body_Ins  := Empty;\n+\n+            --  The object is initialized by an aggregate. Insert the counter\n+            --  after the last aggregate assignment.\n+\n+            elsif Present (Last_Aggregate_Assignment (Obj_Id)) then\n+               Count_Ins := Last_Aggregate_Assignment (Obj_Id);\n+               Body_Ins  := Empty;\n+\n+            --  In all other cases the counter is inserted after the last call\n+            --  to either [Deep_]Initialize or the type-specific init proc.\n+\n+            else\n+               Find_Last_Init (Count_Ins, Body_Ins);\n+            end if;\n \n          --  In all other cases the counter is inserted after the last call to\n-         --  either [Deep_]Initialize or the type specific init proc.\n+         --  either [Deep_]Initialize or the type-specific init proc.\n \n          else\n             Find_Last_Init (Count_Ins, Body_Ins);"}, {"sha": "fcd16a26cb0126113616534f3e81926d0b1a2a83", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3386e3ae5dcea06e710c0bccdc2af72b1ab8dde4/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3386e3ae5dcea06e710c0bccdc2af72b1ab8dde4/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=3386e3ae5dcea06e710c0bccdc2af72b1ab8dde4", "patch": "@@ -2948,10 +2948,9 @@ package body Exp_Util is\n                                           N_Discriminant_Association,\n                                           N_Parameter_Association,\n                                           N_Pragma_Argument_Association)\n-              and then not Nkind_In\n-                             (Parent (Par), N_Function_Call,\n-                                            N_Procedure_Call_Statement,\n-                                            N_Entry_Call_Statement)\n+              and then not Nkind_In (Parent (Par), N_Function_Call,\n+                                                   N_Procedure_Call_Statement,\n+                                                   N_Entry_Call_Statement)\n \n             then\n                return Par;\n@@ -8279,16 +8278,21 @@ package body Exp_Util is\n                return False;\n \n             --  The object is of the form:\n-            --    Obj : Typ [:= Expr];\n+            --    Obj : [constant] Typ [:= Expr];\n             --\n-            --  Do not process the incomplete view of a deferred constant. Do\n-            --  not consider tag-to-class-wide conversions.\n+            --  Do not process tag-to-class-wide conversions because they do\n+            --  not yield an object. Do not process the incomplete view of a\n+            --  deferred constant. Note that an object initialized by means\n+            --  of a build-in-place function call may appear as a deferred\n+            --  constant after expansion activities. These kinds of objects\n+            --  must be finalized.\n \n             elsif not Is_Imported (Obj_Id)\n               and then Needs_Finalization (Obj_Typ)\n-              and then not (Ekind (Obj_Id) = E_Constant\n-                             and then not Has_Completion (Obj_Id))\n               and then not Is_Tag_To_Class_Wide_Conversion (Obj_Id)\n+              and then not (Ekind (Obj_Id) = E_Constant\n+                             and then not Has_Completion (Obj_Id)\n+                             and then No (BIP_Initialization_Call (Obj_Id)))\n             then\n                return True;\n "}, {"sha": "86ac2b5988155786ee6a2993ba8e4a9ddd682cef", "filename": "gcc/ada/g-comlin.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3386e3ae5dcea06e710c0bccdc2af72b1ab8dde4/gcc%2Fada%2Fg-comlin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3386e3ae5dcea06e710c0bccdc2af72b1ab8dde4/gcc%2Fada%2Fg-comlin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-comlin.adb?ref=3386e3ae5dcea06e710c0bccdc2af72b1ab8dde4", "patch": "@@ -3073,6 +3073,7 @@ package body GNAT.Command_Line is\n                Free (Config.Switches (S).Long_Switch);\n                Free (Config.Switches (S).Help);\n                Free (Config.Switches (S).Section);\n+               Free (Config.Switches (S).Argument);\n             end loop;\n \n             Unchecked_Free (Config.Switches);"}, {"sha": "eefeabe63d69b3bfe98815ac5e8e016386a48907", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3386e3ae5dcea06e710c0bccdc2af72b1ab8dde4/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3386e3ae5dcea06e710c0bccdc2af72b1ab8dde4/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=3386e3ae5dcea06e710c0bccdc2af72b1ab8dde4", "patch": "@@ -5348,7 +5348,9 @@ package body Sem_Attr is\n             if Is_Entity_Name (P) then\n                Pref_Id := Entity (P);\n \n-               if Ekind_In (Pref_Id, E_Function, E_Generic_Function) then\n+               if Ekind_In (Pref_Id, E_Function, E_Generic_Function)\n+                 and then Ekind (Spec_Id) = Ekind (Pref_Id)\n+               then\n                   if Denote_Same_Function (Pref_Id, Spec_Id) then\n \n                      --  Correct the prefix of the attribute when the context"}, {"sha": "6a72f2839e186f312a28b9a725797bc848f4bc3d", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 63, "deletions": 4, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3386e3ae5dcea06e710c0bccdc2af72b1ab8dde4/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3386e3ae5dcea06e710c0bccdc2af72b1ab8dde4/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=3386e3ae5dcea06e710c0bccdc2af72b1ab8dde4", "patch": "@@ -2165,6 +2165,13 @@ package body Sem_Ch3 is\n       --  (They have the sloc of the label as found in the source, and that\n       --  is ahead of the current declarative part).\n \n+      procedure Check_Entry_Contracts;\n+      --  Perform a pre-analysis of the pre- and postconditions of an entry\n+      --  declaration. This must be done before full resolution and creation\n+      --  of the parameter block, etc. to catch illegal uses within the\n+      --  contract expression. Full analysis of the expression is done when\n+      --  the contract is processed.\n+\n       procedure Handle_Late_Controlled_Primitive (Body_Decl : Node_Id);\n       --  Determine whether Body_Decl denotes the body of a late controlled\n       --  primitive (either Initialize, Adjust or Finalize). If this is the\n@@ -2189,6 +2196,56 @@ package body Sem_Ch3 is\n          end loop;\n       end Adjust_Decl;\n \n+      ---------------------------\n+      -- Check_Entry_Contracts --\n+      ---------------------------\n+\n+      procedure Check_Entry_Contracts is\n+         ASN : Node_Id;\n+         Ent : Entity_Id;\n+         Exp : Node_Id;\n+\n+      begin\n+         Ent := First_Entity (Current_Scope);\n+         while Present (Ent) loop\n+\n+            --  This only concerns entries with pre/postconditions\n+\n+            if Ekind (Ent) = E_Entry\n+              and then Present (Contract (Ent))\n+              and then Present (Pre_Post_Conditions (Contract (Ent)))\n+            then\n+               ASN := Pre_Post_Conditions (Contract (Ent));\n+               Push_Scope (Ent);\n+               Install_Formals (Ent);\n+\n+               --  Pre/postconditions are rewritten as Check pragmas. Analysis\n+               --  is performed on a copy of the pragma expression, to prevent\n+               --  modifying the original expression.\n+\n+               while Present (ASN) loop\n+                  if Nkind (ASN) = N_Pragma then\n+                     Exp :=\n+                       New_Copy_Tree\n+                         (Expression\n+                           (First (Pragma_Argument_Associations (ASN))));\n+                     Set_Parent (Exp, ASN);\n+\n+                     --  ??? why not Preanalyze_Assert_Expression\n+\n+                     Preanalyze (Exp);\n+                  end if;\n+\n+                  ASN := Next_Pragma (ASN);\n+               end loop;\n+\n+               End_Scope;\n+            end if;\n+\n+            Next_Entity (Ent);\n+         end loop;\n+      end Check_Entry_Contracts;\n+\n       --------------------------------------\n       -- Handle_Late_Controlled_Primitive --\n       --------------------------------------\n@@ -2349,12 +2406,14 @@ package body Sem_Ch3 is\n          --  (This is needed in any case for early instantiations ???).\n \n          if No (Next_Decl) then\n-            if Nkind_In (Parent (L), N_Component_List,\n-                                     N_Task_Definition,\n-                                     N_Protected_Definition)\n-            then\n+            if Nkind (Parent (L)) = N_Component_List then\n                null;\n \n+            elsif Nkind_In (Parent (L), N_Protected_Definition,\n+                                        N_Task_Definition)\n+            then\n+               Check_Entry_Contracts;\n+\n             elsif Nkind (Parent (L)) /= N_Package_Specification then\n                if Nkind (Parent (L)) = N_Package_Body then\n                   Freeze_From := First_Entity (Current_Scope);"}]}