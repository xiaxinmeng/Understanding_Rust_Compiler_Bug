{"sha": "1df9f5a99845ac0468a73f2d9c8226bd739a33a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWRmOWY1YTk5ODQ1YWMwNDY4YTczZjJkOWM4MjI2YmQ3MzlhMzNhMA==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2013-10-01T16:23:52Z"}, "committer": {"name": "Andrew Macleod", "email": "amacleod@gcc.gnu.org", "date": "2013-10-01T16:23:52Z"}, "message": "tree-ssa-live.h (coalesce_ssa_name): Move Prototype to...\n\n\n\n\t* tree-ssa-live.h (coalesce_ssa_name): Move Prototype to...\n\t* tree-ssa-coalesce.h: New. Move prototype to here.\n\t* tree-outof-ssa.h: Include tree-ssa-coalesce.h.\n\t* tree-ssa-coalesce.c: Include tree-outof-ssa.h.\n\t(gimple_can_coalesce_p): Move to...\n\t* gimple.c (gimple_can_coalesce_p): Here.\n\nFrom-SVN: r203069", "tree": {"sha": "705fb39524c1af4fc7251567df4f88f848dd5e99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/705fb39524c1af4fc7251567df4f88f848dd5e99"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1df9f5a99845ac0468a73f2d9c8226bd739a33a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1df9f5a99845ac0468a73f2d9c8226bd739a33a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1df9f5a99845ac0468a73f2d9c8226bd739a33a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1df9f5a99845ac0468a73f2d9c8226bd739a33a0/comments", "author": null, "committer": null, "parents": [{"sha": "80560f9521f81ae2c50b52b091b4caaf7d3d4397", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80560f9521f81ae2c50b52b091b4caaf7d3d4397", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80560f9521f81ae2c50b52b091b4caaf7d3d4397"}], "stats": {"total": 118, "additions": 74, "deletions": 44}, "files": [{"sha": "8431db037261496f887ec068607a70863e81f8be", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1df9f5a99845ac0468a73f2d9c8226bd739a33a0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1df9f5a99845ac0468a73f2d9c8226bd739a33a0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1df9f5a99845ac0468a73f2d9c8226bd739a33a0", "patch": "@@ -1,3 +1,12 @@\n+2013-10-01  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* tree-ssa-live.h (coalesce_ssa_name): Move Prototype to...\n+\t* tree-ssa-coalesce.h: New. Move prototype to here.\n+\t* tree-outof-ssa.h: Include tree-ssa-coalesce.h.\n+\t* tree-ssa-coalesce.c: Include tree-outof-ssa.h.\n+\t(gimple_can_coalesce_p): Move to...\n+\t* gimple.c (gimple_can_coalesce_p): Here.\n+\n 2013-10-01  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* tree-into-ssa.c (enum need_phi_state): Relocate from tree-flow.h."}, {"sha": "26c78c806b598745650f864a3015746765fb1f2e", "filename": "gcc/gimple.c", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1df9f5a99845ac0468a73f2d9c8226bd739a33a0/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1df9f5a99845ac0468a73f2d9c8226bd739a33a0/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=1df9f5a99845ac0468a73f2d9c8226bd739a33a0", "patch": "@@ -4380,4 +4380,42 @@ dump_decl_set (FILE *file, bitmap set)\n     fprintf (file, \"NIL\");\n }\n \n+/* Given SSA_NAMEs NAME1 and NAME2, return true if they are candidates for\n+   coalescing together, false otherwise.\n+\n+   This must stay consistent with var_map_base_init in tree-ssa-live.c.  */\n+\n+bool\n+gimple_can_coalesce_p (tree name1, tree name2)\n+{\n+  /* First check the SSA_NAME's associated DECL.  We only want to\n+     coalesce if they have the same DECL or both have no associated DECL.  */\n+  tree var1 = SSA_NAME_VAR (name1);\n+  tree var2 = SSA_NAME_VAR (name2);\n+  var1 = (var1 && (!VAR_P (var1) || !DECL_IGNORED_P (var1))) ? var1 : NULL_TREE;\n+  var2 = (var2 && (!VAR_P (var2) || !DECL_IGNORED_P (var2))) ? var2 : NULL_TREE;\n+  if (var1 != var2)\n+    return false;\n+\n+  /* Now check the types.  If the types are the same, then we should\n+     try to coalesce V1 and V2.  */\n+  tree t1 = TREE_TYPE (name1);\n+  tree t2 = TREE_TYPE (name2);\n+  if (t1 == t2)\n+    return true;\n+\n+  /* If the types are not the same, check for a canonical type match.  This\n+     (for example) allows coalescing when the types are fundamentally the\n+     same, but just have different names. \n+\n+     Note pointer types with different address spaces may have the same\n+     canonical type.  Those are rejected for coalescing by the\n+     types_compatible_p check.  */\n+  if (TYPE_CANONICAL (t1)\n+      && TYPE_CANONICAL (t1) == TYPE_CANONICAL (t2)\n+      && types_compatible_p (t1, t2))\n+    return true;\n+\n+  return false;\n+}\n #include \"gt-gimple.h\""}, {"sha": "8c37f55ce50c67102d1a0751e818ee7251631243", "filename": "gcc/tree-outof-ssa.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1df9f5a99845ac0468a73f2d9c8226bd739a33a0/gcc%2Ftree-outof-ssa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1df9f5a99845ac0468a73f2d9c8226bd739a33a0/gcc%2Ftree-outof-ssa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-outof-ssa.h?ref=1df9f5a99845ac0468a73f2d9c8226bd739a33a0", "patch": "@@ -23,6 +23,7 @@ along with GCC; see the file COPYING3.  If not see\n \n #include \"tree-ssa-live.h\"\n #include \"tree-ssa-ter.h\"\n+#include \"tree-ssa-coalesce.h\"\n \n /* This structure (of which only a singleton SA exists) is used to\n    pass around information between the outof-SSA functions, cfgexpand"}, {"sha": "2f5507ca8fcadaef8fe27010284a2c2fc9a23920", "filename": "gcc/tree-ssa-coalesce.c", "status": "modified", "additions": 1, "deletions": 40, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1df9f5a99845ac0468a73f2d9c8226bd739a33a0/gcc%2Ftree-ssa-coalesce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1df9f5a99845ac0468a73f2d9c8226bd739a33a0/gcc%2Ftree-ssa-coalesce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-coalesce.c?ref=1df9f5a99845ac0468a73f2d9c8226bd739a33a0", "patch": "@@ -29,7 +29,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"dumpfile.h\"\n #include \"tree-ssa.h\"\n #include \"hash-table.h\"\n-#include \"tree-ssa-live.h\"\n+#include \"tree-outof-ssa.h\"\n #include \"diagnostic-core.h\"\n \n \n@@ -1333,42 +1333,3 @@ coalesce_ssa_name (void)\n \n   return map;\n }\n-\n-/* Given SSA_NAMEs NAME1 and NAME2, return true if they are candidates for\n-   coalescing together, false otherwise.\n-\n-   This must stay consistent with var_map_base_init in tree-ssa-live.c.  */\n-\n-bool\n-gimple_can_coalesce_p (tree name1, tree name2)\n-{\n-  /* First check the SSA_NAME's associated DECL.  We only want to\n-     coalesce if they have the same DECL or both have no associated DECL.  */\n-  tree var1 = SSA_NAME_VAR (name1);\n-  tree var2 = SSA_NAME_VAR (name2);\n-  var1 = (var1 && (!VAR_P (var1) || !DECL_IGNORED_P (var1))) ? var1 : NULL_TREE;\n-  var2 = (var2 && (!VAR_P (var2) || !DECL_IGNORED_P (var2))) ? var2 : NULL_TREE;\n-  if (var1 != var2)\n-    return false;\n-\n-  /* Now check the types.  If the types are the same, then we should\n-     try to coalesce V1 and V2.  */\n-  tree t1 = TREE_TYPE (name1);\n-  tree t2 = TREE_TYPE (name2);\n-  if (t1 == t2)\n-    return true;\n-\n-  /* If the types are not the same, check for a canonical type match.  This\n-     (for example) allows coalescing when the types are fundamentally the\n-     same, but just have different names. \n-\n-     Note pointer types with different address spaces may have the same\n-     canonical type.  Those are rejected for coalescing by the\n-     types_compatible_p check.  */\n-  if (TYPE_CANONICAL (t1)\n-      && TYPE_CANONICAL (t1) == TYPE_CANONICAL (t2)\n-      && types_compatible_p (t1, t2))\n-    return true;\n-\n-  return false;\n-}"}, {"sha": "6b2831fc537e3fa094f03baa3ce3f12079a78ea9", "filename": "gcc/tree-ssa-coalesce.h", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1df9f5a99845ac0468a73f2d9c8226bd739a33a0/gcc%2Ftree-ssa-coalesce.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1df9f5a99845ac0468a73f2d9c8226bd739a33a0/gcc%2Ftree-ssa-coalesce.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-coalesce.h?ref=1df9f5a99845ac0468a73f2d9c8226bd739a33a0", "patch": "@@ -0,0 +1,25 @@\n+/* Header file for tree-ssa-coalesce.c exports.\n+   Copyright (C) 2013 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GCC_TREE_SSA_COALESCE_H\n+#define GCC_TREE_SSA_COALESCE_H\n+\n+extern var_map coalesce_ssa_name (void);\n+\n+#endif /* GCC_TREE_SSA_COALESCE_H */"}, {"sha": "5d80d988711b4a51b5d8535b7f1ec9a5972866df", "filename": "gcc/tree-ssa-live.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1df9f5a99845ac0468a73f2d9c8226bd739a33a0/gcc%2Ftree-ssa-live.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1df9f5a99845ac0468a73f2d9c8226bd739a33a0/gcc%2Ftree-ssa-live.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.h?ref=1df9f5a99845ac0468a73f2d9c8226bd739a33a0", "patch": "@@ -321,8 +321,4 @@ make_live_on_entry (tree_live_info_p live, basic_block bb , int p)\n   bitmap_set_bit (live->global, p);\n }\n \n-\n-/* From tree-ssa-coalesce.c  */\n-extern var_map coalesce_ssa_name (void);\n-\n #endif /* _TREE_SSA_LIVE_H  */"}]}