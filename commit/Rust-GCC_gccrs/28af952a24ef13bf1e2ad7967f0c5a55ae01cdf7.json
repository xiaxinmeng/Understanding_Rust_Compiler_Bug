{"sha": "28af952a24ef13bf1e2ad7967f0c5a55ae01cdf7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjhhZjk1MmEyNGVmMTNiZjFlMmFkNzk2N2YwYzVhNTVhZTAxY2RmNw==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2004-12-05T15:31:02Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2004-12-05T15:31:02Z"}, "message": "c-typeck.c (c_finish_loop): Improve initial implementations for loops whose conditions are known at...\n\n\n\t* c-typeck.c (c_finish_loop): Improve initial implementations\n\tfor loops whose conditions are known at compile-time.\n\nFrom-SVN: r91750", "tree": {"sha": "73004ed81c4bf30c3d2a5efe6eb0ade2e3722cd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73004ed81c4bf30c3d2a5efe6eb0ade2e3722cd5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28af952a24ef13bf1e2ad7967f0c5a55ae01cdf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28af952a24ef13bf1e2ad7967f0c5a55ae01cdf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28af952a24ef13bf1e2ad7967f0c5a55ae01cdf7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28af952a24ef13bf1e2ad7967f0c5a55ae01cdf7/comments", "author": null, "committer": null, "parents": [{"sha": "118f3b19a39403f6b9391ff9f89a38e8248f43f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/118f3b19a39403f6b9391ff9f89a38e8248f43f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/118f3b19a39403f6b9391ff9f89a38e8248f43f9"}], "stats": {"total": 22, "additions": 17, "deletions": 5}, "files": [{"sha": "6b3b015fa2db51c357836f1dcd557a2f34d4f0b8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28af952a24ef13bf1e2ad7967f0c5a55ae01cdf7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28af952a24ef13bf1e2ad7967f0c5a55ae01cdf7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=28af952a24ef13bf1e2ad7967f0c5a55ae01cdf7", "patch": "@@ -1,3 +1,8 @@\n+2004-12-05  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* c-typeck.c (c_finish_loop): Improve initial implementations\n+\tfor loops whose conditions are known at compile-time.\n+\n 2004-12-05  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* builtins.c: Fix comment typos."}, {"sha": "f2f9b4daa4561d3d8569b88bad6f07ff33f3eded", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28af952a24ef13bf1e2ad7967f0c5a55ae01cdf7/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28af952a24ef13bf1e2ad7967f0c5a55ae01cdf7/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=28af952a24ef13bf1e2ad7967f0c5a55ae01cdf7", "patch": "@@ -6659,10 +6659,17 @@ c_finish_loop (location_t start_locus, tree cond, tree incr, tree body,\n {\n   tree entry = NULL, exit = NULL, t;\n \n-  /* Detect do { ... } while (0) and don't generate loop construct.  */\n-  if (cond && !cond_is_first && integer_zerop (cond))\n-    cond = NULL;\n-  if (cond_is_first || cond)\n+  /* If the condition is zero don't generate a loop construct.  */\n+  if (cond && integer_zerop (cond))\n+    {\n+      if (cond_is_first)\n+\t{\n+\t  t = build_and_jump (&blab);\n+\t  SET_EXPR_LOCATION (t, start_locus);\n+\t  add_stmt (t);\n+\t}\n+    }\n+  else\n     {\n       tree top = build1 (LABEL_EXPR, void_type_node, NULL_TREE);\n  \n@@ -6671,7 +6678,7 @@ c_finish_loop (location_t start_locus, tree cond, tree incr, tree body,\n          then we just build a jump back to the top.  */\n       exit = build_and_jump (&LABEL_EXPR_LABEL (top));\n  \n-      if (cond)\n+      if (cond && !integer_nonzerop (cond))\n         {\n           /* Canonicalize the loop condition to the end.  This means\n              generating a branch to the loop condition.  Reuse the"}]}