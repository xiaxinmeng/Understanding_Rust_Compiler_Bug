{"sha": "591d4f4a6307da268ce02eebcb80cb60da433de3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTkxZDRmNGE2MzA3ZGEyNjhjZTAyZWViY2I4MGNiNjBkYTQzM2RlMw==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2010-06-10T16:49:09Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2010-06-10T16:49:09Z"}, "message": "re PR tree-optimization/44258 (possible SRA wrong-code generation.)\n\n2010-06-10  Martin Jambor  <mjambor@suse.cz>\n\n\tPR tree-optimization/44258\n\t* tree-sra.c (build_access_subtree): Return false iff there is a\n\tpartial overlap.\n\t(build_access_trees): Likewise.\n\t(analyze_all_variable_accesses): Disqualify candidates if\n\tbuild_access_trees returns true for them.\n\n\t* testsuite/gcc.dg/tree-ssa/pr44258.c: New test.\n\nFrom-SVN: r160561", "tree": {"sha": "59536dce999d0ebb1b615ab769e926ad76ab77c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59536dce999d0ebb1b615ab769e926ad76ab77c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/591d4f4a6307da268ce02eebcb80cb60da433de3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/591d4f4a6307da268ce02eebcb80cb60da433de3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/591d4f4a6307da268ce02eebcb80cb60da433de3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/591d4f4a6307da268ce02eebcb80cb60da433de3/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c63a4676a8d1749ddc82fcd5d0c8112306e40825", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c63a4676a8d1749ddc82fcd5d0c8112306e40825", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c63a4676a8d1749ddc82fcd5d0c8112306e40825"}], "stats": {"total": 84, "additions": 74, "deletions": 10}, "files": [{"sha": "0380a961ef822a06152da756ecd7a64fd3176234", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/591d4f4a6307da268ce02eebcb80cb60da433de3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/591d4f4a6307da268ce02eebcb80cb60da433de3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=591d4f4a6307da268ce02eebcb80cb60da433de3", "patch": "@@ -1,3 +1,12 @@\n+2010-06-10  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/44258\n+\t* tree-sra.c (build_access_subtree): Return false iff there is a\n+\tpartial overlap.\n+\t(build_access_trees): Likewise.\n+\t(analyze_all_variable_accesses): Disqualify candidates if\n+\tbuild_access_trees returns true for them.\n+\n 2010-06-10  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR debug/41371"}, {"sha": "eff5ab6108d948a42cda2e6461109ed403822245", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/591d4f4a6307da268ce02eebcb80cb60da433de3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/591d4f4a6307da268ce02eebcb80cb60da433de3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=591d4f4a6307da268ce02eebcb80cb60da433de3", "patch": "@@ -1,3 +1,8 @@\n+2010-06-10  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/44258\n+\t* gcc.dg/tree-ssa/pr44258.c: New test.\n+\n 2010-06-10  Daniel Kraft  <d@domob.eu>\n \n \tPR fortran/38936"}, {"sha": "a98d3ceccbf174ddf041ccf88526571329a41cbc", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr44258.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/591d4f4a6307da268ce02eebcb80cb60da433de3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr44258.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/591d4f4a6307da268ce02eebcb80cb60da433de3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr44258.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr44258.c?ref=591d4f4a6307da268ce02eebcb80cb60da433de3", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-esra-details\" } */\n+\n+struct blah\n+{\n+  char a[4];\n+};\n+\n+struct str\n+{\n+  struct blah b1;\n+  char x;\n+};\n+\n+struct val\n+{\n+  char y;\n+  struct blah b2;\n+};\n+\n+union U\n+{\n+  struct str str;\n+  struct val val;\n+};\n+\n+\n+extern struct blah e_b1, e_b2;\n+extern union U *e_u;\n+\n+int foo (int b)\n+{\n+  union U u;\n+\n+  u.str.b1 = e_b1;\n+  u.val.b2 = e_b2;\n+  u.str.b1.a[3] = 0;\n+\n+  *e_u = u;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Created a replacement\" 0 \"esra\"} } */\n+/* { dg-final { cleanup-tree-dump \"esra\" } } */"}, {"sha": "3fc11643cc8dd97e41f22816d1bd478aa06b13a4", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/591d4f4a6307da268ce02eebcb80cb60da433de3/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/591d4f4a6307da268ce02eebcb80cb60da433de3/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=591d4f4a6307da268ce02eebcb80cb60da433de3", "patch": "@@ -1689,9 +1689,10 @@ get_unrenamed_access_replacement (struct access *access)\n \n /* Build a subtree of accesses rooted in *ACCESS, and move the pointer in the\n    linked list along the way.  Stop when *ACCESS is NULL or the access pointed\n-   to it is not \"within\" the root.  */\n+   to it is not \"within\" the root.  Return false iff some accesses partially\n+   overlap.  */\n \n-static void\n+static bool\n build_access_subtree (struct access **access)\n {\n   struct access *root = *access, *last_child = NULL;\n@@ -1706,24 +1707,32 @@ build_access_subtree (struct access **access)\n \tlast_child->next_sibling = *access;\n       last_child = *access;\n \n-      build_access_subtree (access);\n+      if (!build_access_subtree (access))\n+\treturn false;\n     }\n+\n+  if (*access && (*access)->offset < limit)\n+    return false;\n+\n+  return true;\n }\n \n /* Build a tree of access representatives, ACCESS is the pointer to the first\n-   one, others are linked in a list by the next_grp field.  Decide about scalar\n-   replacements on the way, return true iff any are to be created.  */\n+   one, others are linked in a list by the next_grp field.  Return false iff\n+   some accesses partially overlap.  */\n \n-static void\n+static bool\n build_access_trees (struct access *access)\n {\n   while (access)\n     {\n       struct access *root = access;\n \n-      build_access_subtree (&access);\n+      if (!build_access_subtree (&access))\n+\treturn false;\n       root->next_grp = access;\n     }\n+  return true;\n }\n \n /* Return true if expr contains some ARRAY_REFs into a variable bounded\n@@ -2062,9 +2071,7 @@ analyze_all_variable_accesses (void)\n       struct access *access;\n \n       access = sort_and_splice_var_accesses (var);\n-      if (access)\n-\tbuild_access_trees (access);\n-      else\n+      if (!access || !build_access_trees (access))\n \tdisqualify_candidate (var,\n \t\t\t      \"No or inhibitingly overlapping accesses.\");\n     }"}]}