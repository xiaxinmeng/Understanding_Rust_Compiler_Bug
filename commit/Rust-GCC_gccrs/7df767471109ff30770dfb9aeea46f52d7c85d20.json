{"sha": "7df767471109ff30770dfb9aeea46f52d7c85d20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2RmNzY3NDcxMTA5ZmYzMDc3MGRmYjlhZWVhNDZmNTJkN2M4NWQyMA==", "commit": {"author": {"name": "Naveen H.S", "email": "Naveen.Hurugalawadi@cavium.com", "date": "2016-12-07T03:10:59Z"}, "committer": {"name": "Naveen H.S", "email": "naveenh@gcc.gnu.org", "date": "2016-12-07T03:10:59Z"}, "message": "2016-12-07  Naveen H.S  <Naveen.Hurugalawadi@cavium.com>\n\ngcc\n\t* config/aarch64/aarch64.c\n\t(aarch64_builtin_support_vector_misalignment): New.\n\t(TARGET_VECTORIZE_SUPPORT_VECTOR_MISALIGNMENT): Define.\ngcc/testsuite\n\t* gcc.target/aarch64/pr71727.c : New Testcase.\n\nFrom-SVN: r243333", "tree": {"sha": "c525d354525d998c03167aace8eacfee5eba3568", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c525d354525d998c03167aace8eacfee5eba3568"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7df767471109ff30770dfb9aeea46f52d7c85d20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7df767471109ff30770dfb9aeea46f52d7c85d20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7df767471109ff30770dfb9aeea46f52d7c85d20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7df767471109ff30770dfb9aeea46f52d7c85d20/comments", "author": null, "committer": null, "parents": [{"sha": "fd1c9a07d46aeece59c452105e3f2ece665bd7b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd1c9a07d46aeece59c452105e3f2ece665bd7b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd1c9a07d46aeece59c452105e3f2ece665bd7b8"}], "stats": {"total": 82, "additions": 82, "deletions": 0}, "files": [{"sha": "c1c148a536beeb02070227f03dd0ef9067b52a88", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7df767471109ff30770dfb9aeea46f52d7c85d20/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7df767471109ff30770dfb9aeea46f52d7c85d20/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7df767471109ff30770dfb9aeea46f52d7c85d20", "patch": "@@ -1,3 +1,9 @@\n+2016-12-07  Naveen H.S  <Naveen.Hurugalawadi@cavium.com>\n+\n+\t* config/aarch64/aarch64.c\n+\t(aarch64_builtin_support_vector_misalignment): New.\n+\t(TARGET_VECTORIZE_SUPPORT_VECTOR_MISALIGNMENT): Define.\n+\n 2016-12-06  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR bootstrap/78705"}, {"sha": "dab46b59693dea3f08637792f5bf0d01c2a6d593", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7df767471109ff30770dfb9aeea46f52d7c85d20/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7df767471109ff30770dfb9aeea46f52d7c85d20/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=7df767471109ff30770dfb9aeea46f52d7c85d20", "patch": "@@ -141,6 +141,10 @@ static bool aarch64_vector_mode_supported_p (machine_mode);\n static bool aarch64_vectorize_vec_perm_const_ok (machine_mode vmode,\n \t\t\t\t\t\t const unsigned char *sel);\n static int aarch64_address_cost (rtx, machine_mode, addr_space_t, bool);\n+static bool aarch64_builtin_support_vector_misalignment (machine_mode mode,\n+\t\t\t\t\t\t\t const_tree type,\n+\t\t\t\t\t\t\t int misalignment,\n+\t\t\t\t\t\t\t bool is_packed);\n \n /* Major revision number of the ARM Architecture implemented by the target.  */\n unsigned aarch64_architecture_version;\n@@ -11412,6 +11416,37 @@ aarch64_simd_vector_alignment_reachable (const_tree type, bool is_packed)\n   return true;\n }\n \n+/* Return true if the vector misalignment factor is supported by the\n+   target.  */\n+static bool\n+aarch64_builtin_support_vector_misalignment (machine_mode mode,\n+\t\t\t\t\t     const_tree type, int misalignment,\n+\t\t\t\t\t     bool is_packed)\n+{\n+  if (TARGET_SIMD && STRICT_ALIGNMENT)\n+    {\n+      /* Return if movmisalign pattern is not supported for this mode.  */\n+      if (optab_handler (movmisalign_optab, mode) == CODE_FOR_nothing)\n+        return false;\n+\n+      if (misalignment == -1)\n+\t{\n+\t  /* Misalignment factor is unknown at compile time but we know\n+\t     it's word aligned.  */\n+\t  if (aarch64_simd_vector_alignment_reachable (type, is_packed))\n+            {\n+              int element_size = TREE_INT_CST_LOW (TYPE_SIZE (type));\n+\n+              if (element_size != 64)\n+                return true;\n+            }\n+\t  return false;\n+\t}\n+    }\n+  return default_builtin_support_vector_misalignment (mode, type, misalignment,\n+\t\t\t\t\t\t      is_packed);\n+}\n+\n /* If VALS is a vector constant that can be loaded into a register\n    using DUP, generate instructions to do so and return an RTX to\n    assign to the register.  Otherwise return NULL_RTX.  */\n@@ -14824,6 +14859,10 @@ aarch64_libgcc_floating_mode_supported_p\n #undef TARGET_VECTOR_MODE_SUPPORTED_P\n #define TARGET_VECTOR_MODE_SUPPORTED_P aarch64_vector_mode_supported_p\n \n+#undef TARGET_VECTORIZE_SUPPORT_VECTOR_MISALIGNMENT\n+#define TARGET_VECTORIZE_SUPPORT_VECTOR_MISALIGNMENT \\\n+  aarch64_builtin_support_vector_misalignment\n+\n #undef TARGET_ARRAY_MODE_SUPPORTED_P\n #define TARGET_ARRAY_MODE_SUPPORTED_P aarch64_array_mode_supported_p\n "}, {"sha": "60f239f8f83af3a68f5bea4c08426279588591bd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7df767471109ff30770dfb9aeea46f52d7c85d20/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7df767471109ff30770dfb9aeea46f52d7c85d20/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7df767471109ff30770dfb9aeea46f52d7c85d20", "patch": "@@ -1,3 +1,7 @@\n+2016-12-07  Naveen H.S  <Naveen.Hurugalawadi@cavium.com>\n+\n+\t* gcc.target/aarch64/pr71727.c : New Testcase.\n+\n 2016-12-06  Tom de Vries  <tom@codesourcery.com>\n \n \tPR tree-optimization/67955"}, {"sha": "05eef3e91919289e224cebc0d9bee77a3edd1324", "filename": "gcc/testsuite/gcc.target/aarch64/pr71727.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7df767471109ff30770dfb9aeea46f52d7c85d20/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr71727.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7df767471109ff30770dfb9aeea46f52d7c85d20/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr71727.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr71727.c?ref=7df767471109ff30770dfb9aeea46f52d7c85d20", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mstrict-align -O3\" } */\n+\n+struct test_struct_s\n+{\n+  long a;\n+  long b;\n+  long c;\n+  long d;\n+  unsigned long e;\n+};\n+\n+\n+char _a;\n+struct test_struct_s xarray[128];\n+\n+void\n+_start (void)\n+{\n+  struct test_struct_s *new_entry;\n+\n+  new_entry = &xarray[0];\n+  new_entry->a = 1;\n+  new_entry->b = 2;\n+  new_entry->c = 3;\n+  new_entry->d = 4;\n+  new_entry->e = 5;\n+\n+  return;\n+}\n+\n+/* { dg-final { scan-assembler-times \"mov\\tx\" 5 {target lp64} } } */\n+/* { dg-final { scan-assembler-not \"add\\tx0, x0, :\" {target lp64} } } */"}]}