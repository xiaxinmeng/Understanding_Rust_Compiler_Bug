{"sha": "0fa96a6006d2689aeb376139cdf78a2a51c907e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGZhOTZhNjAwNmQyNjg5YWViMzc2MTM5Y2RmNzhhMmE1MWM5MDdlOQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2003-12-08T15:37:03Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-12-08T15:37:03Z"}, "message": "c_locale.cc (__convert_to_v(long&), [...]): Remove.\n\n2003-12-08  Paolo Carlini  <pcarlini@suse.de>\n\n\t* config/locale/generic/c_locale.cc (__convert_to_v(long&),\n\t__convert_to_v(unsigned long&), __convert_to_v(long long&),\n\t__convert_to_v(unsigned long long&): Remove.\n\t(__convert_to_v(float&), __convert_to_v(double&),\n\t__convert_to_v(long double&)): Remove last unused parameter.\n\t* config/locale/gnu/c_locale.cc: Likewise.\n\t* include/bits/locale_facets.h: Likewise.\n\t(num_get::_M_extract_int): Update declaration.\n\t(class __num_base): Tweak _S_ie and _S_iE according to the\n\t_S_atoms_in changes.\n\t* include/bits/locale_facets.tcc (num_get::_M_extract_int):\n\tProvide directly the final _ValueT, not a string: accumulate\n\tthe result checking for overflow at each digit.\n\t(num_get::do_get(bool&), num_get::do_get(long&),\n\tnum_get::do_get(unsigned short&), num_get::do_get(unsigned int&),\n\tnum_get::do_get(unsigned long&), num_get::do_get(long long&),\n\tnum_get::do_get(unsigned long long&), num_get::do_get(void*&)):\n\tUse the new _M_extract_int, simplify.\n\t* src/locale-inst.cc (num_get::_M_extract_int(long&),\n\tnum_get::_M_extract_int(unsigned short&),\n\tnum_get::_M_extract_int(unsigned int&),\n\tnum_get::_M_extract_int(unsigned long&),\n\tnum_get::_M_extract_int(long long&),\n\tnum_get::_M_extract_int(unsigned long long&): Instantiate.\n\t* src/locale_facets.cc (__num_base::_S_atoms_in): Reorder\n        the chars in the natural order: abcdefABCDEF.\n\nFrom-SVN: r74423", "tree": {"sha": "5491fe89fa4e59d83400bfad5c7f2c6be3f36f0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5491fe89fa4e59d83400bfad5c7f2c6be3f36f0d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0fa96a6006d2689aeb376139cdf78a2a51c907e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fa96a6006d2689aeb376139cdf78a2a51c907e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fa96a6006d2689aeb376139cdf78a2a51c907e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fa96a6006d2689aeb376139cdf78a2a51c907e9/comments", "author": null, "committer": null, "parents": [{"sha": "7618d5106d3d6f47f917ffa08548d39a4b70fccf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7618d5106d3d6f47f917ffa08548d39a4b70fccf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7618d5106d3d6f47f917ffa08548d39a4b70fccf"}], "stats": {"total": 685, "additions": 290, "deletions": 395}, "files": [{"sha": "62124ecde9af2d2f1b98e9cb80af67589e8e502e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fa96a6006d2689aeb376139cdf78a2a51c907e9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fa96a6006d2689aeb376139cdf78a2a51c907e9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0fa96a6006d2689aeb376139cdf78a2a51c907e9", "patch": "@@ -1,3 +1,32 @@\n+2003-12-08  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* config/locale/generic/c_locale.cc (__convert_to_v(long&),\n+\t__convert_to_v(unsigned long&), __convert_to_v(long long&),\n+\t__convert_to_v(unsigned long long&): Remove.\n+\t(__convert_to_v(float&), __convert_to_v(double&),\n+\t__convert_to_v(long double&)): Remove last unused parameter.\n+\t* config/locale/gnu/c_locale.cc: Likewise.\n+\t* include/bits/locale_facets.h: Likewise.\n+\t(num_get::_M_extract_int): Update declaration.\n+\t(class __num_base): Tweak _S_ie and _S_iE according to the\n+\t_S_atoms_in changes.\n+\t* include/bits/locale_facets.tcc (num_get::_M_extract_int):\n+\tProvide directly the final _ValueT, not a string: accumulate\n+\tthe result checking for overflow at each digit.\n+\t(num_get::do_get(bool&), num_get::do_get(long&),\n+\tnum_get::do_get(unsigned short&), num_get::do_get(unsigned int&),\n+\tnum_get::do_get(unsigned long&), num_get::do_get(long long&),\n+\tnum_get::do_get(unsigned long long&), num_get::do_get(void*&)):\n+\tUse the new _M_extract_int, simplify.\n+\t* src/locale-inst.cc (num_get::_M_extract_int(long&),\n+\tnum_get::_M_extract_int(unsigned short&),\n+\tnum_get::_M_extract_int(unsigned int&),\n+\tnum_get::_M_extract_int(unsigned long&),\n+\tnum_get::_M_extract_int(long long&),\n+\tnum_get::_M_extract_int(unsigned long long&): Instantiate.\n+\t* src/locale_facets.cc (__num_base::_S_atoms_in): Reorder\n+        the chars in the natural order: abcdefABCDEF.\n+\n 2003-12-08  David S. Miller  <davem@redhat.com>\n \n \tPR libstdc++/12496"}, {"sha": "92b01c289bcda0b185d1dbf94beaacddaf913146", "filename": "libstdc++-v3/config/locale/generic/c_locale.cc", "status": "modified", "additions": 3, "deletions": 73, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fa96a6006d2689aeb376139cdf78a2a51c907e9/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fa96a6006d2689aeb376139cdf78a2a51c907e9/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.cc?ref=0fa96a6006d2689aeb376139cdf78a2a51c907e9", "patch": "@@ -45,80 +45,10 @@\n namespace std \n {\n   // Specializations for all types used in num_get.\n-  template<>\n-    void\n-    __convert_to_v(const char* __s, long& __v, ios_base::iostate& __err, \n-\t\t   const __c_locale&, int __base)\n-    {\n-      if (!(__err & ios_base::failbit))\n-      {\n-\tchar* __sanity;\n-\terrno = 0;\n-\tlong __l = strtol(__s, &__sanity, __base);\n-\tif (__sanity != __s && *__sanity == '\\0' && errno != ERANGE)\n-\t  __v = __l;\n-\telse\n-\t  __err |= ios_base::failbit;\n-      }\n-    }\n-\n-  template<>\n-    void\n-    __convert_to_v(const char* __s, unsigned long& __v, \n-\t\t   ios_base::iostate& __err, const __c_locale&, int __base)\n-    {\n-      if (!(__err & ios_base::failbit))\n-\t{\n-\t  char* __sanity;\n-\t  errno = 0;\n-\t  unsigned long __ul = strtoul(__s, &__sanity, __base);\n-          if (__sanity != __s && *__sanity == '\\0' && errno != ERANGE)\n-\t    __v = __ul;\n-\t  else\n-\t    __err |= ios_base::failbit;\n-\t}\n-    }\n-\n-#ifdef _GLIBCXX_USE_LONG_LONG\n-  template<>\n-    void\n-    __convert_to_v(const char* __s, long long& __v, ios_base::iostate& __err, \n-\t\t   const __c_locale&, int __base)\n-    {\n-      if (!(__err & ios_base::failbit))\n-\t{\n-\t  char* __sanity;\n-\t  errno = 0;\n-\t  long long __ll = strtoll(__s, &__sanity, __base);\n-          if (__sanity != __s && *__sanity == '\\0' && errno != ERANGE)\n-\t    __v = __ll;\n-\t  else\n-\t    __err |= ios_base::failbit;\n-\t}\n-    }\n-\n-  template<>\n-    void\n-    __convert_to_v(const char* __s, unsigned long long& __v, \n-\t\t   ios_base::iostate& __err, const __c_locale&, int __base)\n-    {\n-      if (!(__err & ios_base::failbit))\n-\t{      \n-\t  char* __sanity;\n-\t  errno = 0;\n-\t  unsigned long long __ull = strtoull(__s, &__sanity, __base);\n-          if (__sanity != __s && *__sanity == '\\0' && errno != ERANGE)\n-\t    __v = __ull;\n-\t  else\n-\t    __err |= ios_base::failbit;\n-\t}  \n-    }\n-#endif\n-\n   template<>\n     void\n     __convert_to_v(const char* __s, float& __v, ios_base::iostate& __err, \n-\t\t   const __c_locale&, int) \t      \n+\t\t   const __c_locale&) \t      \n     {\n       if (!(__err & ios_base::failbit))\n \t{\n@@ -158,7 +88,7 @@ namespace std\n   template<>\n     void\n     __convert_to_v(const char* __s, double& __v, ios_base::iostate& __err, \n-\t\t   const __c_locale&, int) \n+\t\t   const __c_locale&) \n     {\n       if (!(__err & ios_base::failbit))\n \t{\n@@ -180,7 +110,7 @@ namespace std\n   template<>\n     void\n     __convert_to_v(const char* __s, long double& __v, \n-\t\t   ios_base::iostate& __err, const __c_locale&, int) \n+\t\t   ios_base::iostate& __err, const __c_locale&) \n     {\n       if (!(__err & ios_base::failbit))\n \t{"}, {"sha": "2dc6d73daf59d3d14691a5570979069edd1baa81", "filename": "libstdc++-v3/config/locale/gnu/c_locale.cc", "status": "modified", "additions": 3, "deletions": 76, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fa96a6006d2689aeb376139cdf78a2a51c907e9/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fa96a6006d2689aeb376139cdf78a2a51c907e9/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.cc?ref=0fa96a6006d2689aeb376139cdf78a2a51c907e9", "patch": "@@ -41,83 +41,10 @@\n \n namespace std \n {\n-  template<>\n-    void\n-    __convert_to_v(const char* __s, long& __v, ios_base::iostate& __err, \n-\t\t   const __c_locale& __cloc, int __base)\n-    {\n-      if (!(__err & ios_base::failbit))\n-      {\n-\tchar* __sanity;\n-\terrno = 0;\n-\tlong __l = __strtol_l(__s, &__sanity, __base, __cloc);\n-\tif (__sanity != __s && *__sanity == '\\0' && errno != ERANGE)\n-\t  __v = __l;\n-\telse\n-\t  __err |= ios_base::failbit;\n-      }\n-    }\n-\n-  template<>\n-    void\n-    __convert_to_v(const char* __s, unsigned long& __v, \n-\t\t   ios_base::iostate& __err, const __c_locale& __cloc, \n-\t\t   int __base)\n-    {\n-      if (!(__err & ios_base::failbit))\n-\t{\n-\t  char* __sanity;\n-\t  errno = 0;\n-\t  unsigned long __ul = __strtoul_l(__s, &__sanity, __base, __cloc);\n-          if (__sanity != __s && *__sanity == '\\0' && errno != ERANGE)\n-\t    __v = __ul;\n-\t  else\n-\t    __err |= ios_base::failbit;\n-\t}\n-    }\n-\n-#ifdef _GLIBCXX_USE_LONG_LONG\n-  template<>\n-    void\n-    __convert_to_v(const char* __s, long long& __v, ios_base::iostate& __err, \n-\t\t   const __c_locale& __cloc, int __base)\n-    {\n-      if (!(__err & ios_base::failbit))\n-\t{\n-\t  char* __sanity;\n-\t  errno = 0;\n-\t  long long __ll = __strtoll_l(__s, &__sanity, __base, __cloc);\n-          if (__sanity != __s && *__sanity == '\\0' && errno != ERANGE)\n-\t    __v = __ll;\n-\t  else\n-\t    __err |= ios_base::failbit;\n-\t}\n-    }\n-\n-  template<>\n-    void\n-    __convert_to_v(const char* __s, unsigned long long& __v, \n-\t\t   ios_base::iostate& __err, const __c_locale& __cloc, \n-\t\t   int __base)\n-    {\n-      if (!(__err & ios_base::failbit))\n-\t{      \n-\t  char* __sanity;\n-\t  errno = 0;\n-\t  unsigned long long __ull = __strtoull_l(__s, &__sanity, __base, \n-\t\t\t\t\t\t  __cloc);\n-          if (__sanity != __s && *__sanity == '\\0' && errno != ERANGE)\n-\t    __v = __ull;\n-\t  else\n-\t    __err |= ios_base::failbit;\n-\t}  \n-    }\n-#endif\n-\n   template<>\n     void\n     __convert_to_v(const char* __s, float& __v, ios_base::iostate& __err, \n-\t\t   const __c_locale& __cloc, int)\n+\t\t   const __c_locale& __cloc)\n     {\n       if (!(__err & ios_base::failbit))\n \t{\n@@ -134,7 +61,7 @@ namespace std\n   template<>\n     void\n     __convert_to_v(const char* __s, double& __v, ios_base::iostate& __err, \n-\t\t   const __c_locale& __cloc, int)\n+\t\t   const __c_locale& __cloc)\n     {\n       if (!(__err & ios_base::failbit))\n \t{\n@@ -151,7 +78,7 @@ namespace std\n   template<>\n     void\n     __convert_to_v(const char* __s, long double& __v, ios_base::iostate& __err,\n-\t\t   const __c_locale& __cloc, int)\n+\t\t   const __c_locale& __cloc)\n     {\n       if (!(__err & ios_base::failbit))\n \t{"}, {"sha": "a61ac9f4b9bc95c19a6c3d54ea66f4e9fc6b5c8f", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 13, "deletions": 34, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fa96a6006d2689aeb376139cdf78a2a51c907e9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fa96a6006d2689aeb376139cdf78a2a51c907e9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=0fa96a6006d2689aeb376139cdf78a2a51c907e9", "patch": "@@ -63,45 +63,23 @@ namespace std\n   template<typename _Tv>\n     void\n     __convert_to_v(const char* __in, _Tv& __out, ios_base::iostate& __err, \n-\t\t   const __c_locale& __cloc, int __base = 10);\n+\t\t   const __c_locale& __cloc);\n \n   // Explicit specializations for required types.\n-  template<>\n-    void\n-    __convert_to_v(const char*, long&, ios_base::iostate&, \n-\t\t   const __c_locale&, int);\n-\n-  template<>\n-    void\n-    __convert_to_v(const char*, unsigned long&, ios_base::iostate&, \n-\t\t   const __c_locale&, int);\n-\n-#ifdef _GLIBCXX_USE_LONG_LONG\n-  template<>\n-    void\n-    __convert_to_v(const char*, long long&, ios_base::iostate&, \n-\t\t   const __c_locale&, int);\n-\n-  template<>\n-    void\n-    __convert_to_v(const char*, unsigned long long&, ios_base::iostate&, \n-\t\t   const __c_locale&, int);\n-#endif\n-\n   template<>\n     void\n     __convert_to_v(const char*, float&, ios_base::iostate&, \n-\t\t   const __c_locale&, int);\n+\t\t   const __c_locale&);\n \n   template<>\n     void\n     __convert_to_v(const char*, double&, ios_base::iostate&, \n-\t\t   const __c_locale&, int);\n+\t\t   const __c_locale&);\n \n- template<>\n+  template<>\n     void\n     __convert_to_v(const char*, long double&, ios_base::iostate&, \n-\t\t   const __c_locale&, int);\n+\t\t   const __c_locale&);\n \n   // NB: __pad is a struct, rather than a function, so it can be\n   // partially-specialized.\n@@ -586,7 +564,7 @@ namespace std\n     static const char* _S_atoms_out;\n \n     // String literal of acceptable (narrow) input, for num_get.\n-    // \"-+xX0123456789eEabcdfABCDF\"\n+    // \"-+xX0123456789abcdefABCDEF\"\n     static const char* _S_atoms_in;\n \n     enum \n@@ -596,8 +574,8 @@ namespace std\n       _S_ix, \n       _S_iX, \n       _S_izero,\n-      _S_ie = _S_izero + 10,\n-      _S_iE = _S_izero + 11,\n+      _S_ie = _S_izero + 14,\n+      _S_iE = _S_izero + 20,\n       _S_iend = 26\n     };\n \n@@ -624,7 +602,7 @@ namespace std\n       _CharT                    \t_M_atoms_out[__num_base::_S_oend + 1];\n \n       // A list of valid numeric literals for input: in the standard\n-      // \"C\" locale, this is \"-+xX0123456789eEabcdfABCDF\"\n+      // \"C\" locale, this is \"-+xX0123456789abcdefABCDEF\"\n       // This array contains the chars after having been passed\n       // through the current locale's ctype<_CharT>.widen().\n       _CharT                    \t_M_atoms_in[__num_base::_S_iend + 1];\n@@ -893,9 +871,10 @@ namespace std\n       _M_extract_float(iter_type, iter_type, ios_base&, ios_base::iostate&, \n \t\t       string& __xtrc) const;\n \n-      iter_type \n-      _M_extract_int(iter_type, iter_type, ios_base&, ios_base::iostate&, \n-\t\t     string& __xtrc, int& __base) const;\n+      template<typename _ValueT>\n+        iter_type \n+        _M_extract_int(iter_type, iter_type, ios_base&, ios_base::iostate&, \n+\t\t       _ValueT& __v) const;\n \n       virtual iter_type \n       do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, bool&) const;"}, {"sha": "efd7fd378d99a781164ec86f3968f0d04452b375", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 197, "deletions": 211, "changes": 408, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fa96a6006d2689aeb376139cdf78a2a51c907e9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fa96a6006d2689aeb376139cdf78a2a51c907e9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=0fa96a6006d2689aeb376139cdf78a2a51c907e9", "patch": "@@ -258,144 +258,194 @@ namespace std\n     }\n \n   template<typename _CharT, typename _InIter>\n-    _InIter\n-    num_get<_CharT, _InIter>::\n-    _M_extract_int(_InIter __beg, _InIter __end, ios_base& __io,\n-\t\t   ios_base::iostate& __err, string& __xtrc, int& __base) const\n-    {\n-      typedef char_traits<_CharT>\t\t\t__traits_type;\n-      typedef typename numpunct<_CharT>::__cache_type  \t__cache_type;\n-      __use_cache<__cache_type> __uc;\n-      const locale& __loc = __io._M_getloc();\n-      const __cache_type* __lc = __uc(__loc);\n-      const _CharT* __lit = __lc->_M_atoms_in;\n- \n-      // NB: Iff __basefield == 0, this can change based on contents.\n-      const ios_base::fmtflags __basefield = __io.flags() & ios_base::basefield;\n-      if (__basefield == ios_base::oct)\n-        __base = 8;\n-      else if (__basefield == ios_base::hex)\n-        __base = 16;\n-      else\n-\t__base = 10;\n+    template<typename _ValueT> \n+      _InIter\n+      num_get<_CharT, _InIter>::\n+      _M_extract_int(_InIter __beg, _InIter __end, ios_base& __io,\n+\t\t     ios_base::iostate& __err, _ValueT& __v) const\n+      {\n+        typedef char_traits<_CharT>\t\t\t__traits_type;\n+\ttypedef typename numpunct<_CharT>::__cache_type __cache_type; \n+\t__use_cache<__cache_type> __uc;\n+\tconst locale& __loc = __io._M_getloc();\n+\tconst __cache_type* __lc = __uc(__loc);\n+\tconst _CharT* __lit = __lc->_M_atoms_in;\n \n-      // First check for sign.\n-      if (__beg != __end)\n-\t{\n-\t  const char_type __c = *__beg;\n-\t  const bool __plus = __traits_type::eq(__c, __lit[_S_iplus]);\n-\t  if (__plus || __traits_type::eq(__c, __lit[_S_iminus]))\n-\t    {\n-\t      __xtrc += __plus ? _S_atoms_in[_S_iplus]\n-\t\t               : _S_atoms_in[_S_iminus];\n-\t      ++__beg;\n-\t    }\n-\t}\n+\t// NB: Iff __basefield == 0, __base can change based on contents.\n+\tconst ios_base::fmtflags __basefield = __io.flags() & ios_base::basefield;\n+\tconst bool __oct = __basefield == ios_base::oct;\n+\tint __base = __oct ? 8 : (__basefield == ios_base::hex ? 16 : 10);\n \n-      // Next, look for leading zeros and check required digits for base formats.\n-      if (__builtin_expect(__base == 10, true))\n-\t{\n-\t  // Look for a zero...\n-\t  if (__beg != __end && __traits_type::eq(*__beg, __lit[_S_izero]))\n-\t    {\n-\t      __xtrc += _S_atoms_in[_S_izero];\n+\t// True if numeric digits are found.\n+\tbool __found_num = false;\n+\n+\t// First check for sign.\n+\tbool __negative = false;\n+\tif (__beg != __end)\n+\t  {\n+\t    __negative = __traits_type::eq(*__beg, __lit[_S_iminus]);\n+\t    if (__negative && numeric_limits<_ValueT>::is_signed\n+\t\t|| __traits_type::eq(*__beg, __lit[_S_iplus]))\n \t      ++__beg;\n-\t      // ... and skip the additional ones.\n-\t      for (; __beg != __end\n-\t\t     && __traits_type::eq(*__beg, __lit[_S_izero]); ++__beg);\n-\t      \n-\t      // Check required digits.\n-\t      if (__beg != __end && __basefield == 0)\n-\t\t{\t  \n-\t\t  const bool __x = __traits_type::eq(*__beg, __lit[_S_ix]);\n-\t\t  if (__x || __traits_type::eq(*__beg, __lit[_S_iX]))\n-\t\t    {\n-\t\t      __xtrc += __x ? _S_atoms_in[_S_ix] \n-\t\t\t            : _S_atoms_in[_S_iX];\n-\t\t      __base = 16;\n-\t\t      ++__beg;\t\t      \n-\t\t    }\n-\t\t  else \n-\t\t    __base = 8;\n-\t\t}\t      \n-\t    }\n-\t}\n-      else if (__base == 16)\n-\t{\n-\t  if (__beg != __end && __traits_type::eq(*__beg, __lit[_S_izero]))\n-\t    {\n-\t      __xtrc += _S_atoms_in[_S_izero];\n-\t      \n-\t      if (++__beg != __end)\n-\t\t{\n-\t\t  const bool __x = __traits_type::eq(*__beg, __lit[_S_ix]);\n-\t\t  if (__x || __traits_type::eq(*__beg, __lit[_S_iX]))\n-\t\t    {\n-\t\t      __xtrc += __x ? _S_atoms_in[_S_ix] \n-\t\t\t            : _S_atoms_in[_S_iX];\n-\t\t      ++__beg;\n-\t\t    }\n-\t\t}\n-\t    }\n-\t}\n+\t  }\n \n-      // At this point, base is determined. If not hex, only allow\n-      // base digits as valid input.\n-      const size_t __len = __base == 16 ? _S_iend : __base;\n+\t// Next, look for leading zeros and check required digits\n+\t// for base formats.\n+\tif (__beg != __end && __traits_type::eq(*__beg, __lit[_S_izero]))\n+\t  {\n+\t    __found_num = true;\n+\t    ++__beg;\n+\t    if (__builtin_expect(__base == 10, true))\n+\t      {\n+\t\t// Skip the additional zeros.\n+\t\tfor (; __beg != __end\n+\t\t       && __traits_type::eq(*__beg, __lit[_S_izero]); ++__beg);\n+\t\t\n+\t\t// Check required digits.\n+\t\tif (__beg != __end && __basefield == 0)\n+\t\t  {\t  \n+\t\t    const bool __x = __traits_type::eq(*__beg, __lit[_S_ix]);\n+\t\t    if (__x || __traits_type::eq(*__beg, __lit[_S_iX]))\n+\t\t      {\n+\t\t\t__base = 16;\n+\t\t\t++__beg;\n+\t\t\t__found_num = false;\n+\t\t      }\n+\t\t    else\n+\t\t      __base = 8;\n+\t\t  }\t      \n+\t      }\n+\t    else if (__base == 16 && __beg != __end)\n+\t      {\n+\t\tconst bool __x = __traits_type::eq(*__beg, __lit[_S_ix]);\n+\t\tif (__x || __traits_type::eq(*__beg, __lit[_S_iX]))\n+\t\t  {\n+\t\t    ++__beg;\n+\t\t    __found_num = false;\n+\t\t  }\n+\t      }\n+\t  }\n \n-      // Extract.\n-      string __found_grouping;\n-      int __sep_pos = 0;\n-      for (; __beg != __end; ++__beg)\n-        {\n-\t  const char_type __c = *__beg;\n-          const char_type* __p = __traits_type::find(__lit + _S_izero,\n-\t\t\t\t\t\t     __len, __c);\n-          if (__p)\n-\t    {\n-\t      // Try first for acceptable digit; record it if found.\n-\t      __xtrc += _S_atoms_in[__p - __lit];\n-\t      ++__sep_pos;\n-\t    }\n-          else if (__traits_type::eq(__c, __lc->_M_thousands_sep)\n-\t\t   && __lc->_M_use_grouping)\n-\t    {\n-              // NB: Thousands separator at the beginning of a string\n-              // is a no-no, as is two consecutive thousands separators.\n-              if (__sep_pos)\n-                {\n-                  __found_grouping += static_cast<char>(__sep_pos);\n-                  __sep_pos = 0;\n-                }\n-              else\n-\t\t{\n-\t\t  __err |= ios_base::failbit;\n+\t// At this point, base is determined. If not hex, only allow\n+\t// base digits as valid input.\n+\tconst size_t __len = __base == 16 ? _S_iend : __base;\n+\n+\t// Extract.\n+\tstring __found_grouping;\n+\tint __sep_pos = 0;\n+\tbool __overflow = false;\n+\t_ValueT __result = 0;\n+\tconst char_type* __lit_zero = __lit + _S_izero;\n+\tif (__negative)\n+\t  {\n+\t    const _ValueT __min = numeric_limits<_ValueT>::min() / __base;\n+\t    for (; __beg != __end; ++__beg)\n+\t      {\n+\t\tconst char_type* __p = __traits_type::find(__lit_zero,\n+\t\t\t\t\t\t\t   __len, *__beg);\n+\t\tif (__p)\n+\t\t  {\n+\t\t    int __digit = __p - __lit_zero;\n+\t\t    if (__digit > 15)\n+\t\t      __digit -= 6;\n+\t\t    if (__result < __min)\n+\t\t      __overflow = true;\n+\t\t    else\n+\t\t      {\n+\t\t\tconst _ValueT __new_result = __result * __base - __digit;\n+\t\t\tif (__result)\n+\t\t\t  __overflow |= __new_result >= __result;\n+\t\t\t__result = __new_result;\n+\t\t\t++__sep_pos;\n+\t\t\t__found_num = true;\n+\t\t      }\n+\t\t  }\n+\t\telse if (__lc->_M_use_grouping\n+\t\t\t && __traits_type::eq(*__beg, __lc->_M_thousands_sep))\n+\t\t  {\n+\t\t    // NB: Thousands separator at the beginning of a string\n+\t\t    // is a no-no, as is two consecutive thousands separators.\n+\t\t    if (__sep_pos)\n+\t\t      {\n+\t\t\t__found_grouping += static_cast<char>(__sep_pos);\n+\t\t\t__sep_pos = 0;\n+\t\t      }\n+\t\t    else\n+\t\t      {\n+\t\t\t__err |= ios_base::failbit;\n+\t\t\tbreak;\n+\t\t      }\n+\t\t  }\n+\t\telse\n+\t\t  // Not a valid input item.\n \t\t  break;\n-\t\t}\n-            }\n-\t  else\n-\t    // Not a valid input item.\n-\t    break;\n-        }\n+\t      }\n+\t  }\n+\telse\n+\t  {\n+\t    const _ValueT __max = numeric_limits<_ValueT>::max() / __base;\n+\t    for (; __beg != __end; ++__beg)\n+\t      {\n+\t\tconst char_type* __p = __traits_type::find(__lit_zero,\n+\t\t\t\t\t\t\t   __len, *__beg);\n+\t\tif (__p)\n+\t\t  {\n+\t\t    int __digit = __p - __lit_zero;\n+\t\t    if (__digit > 15)\n+\t\t      __digit -= 6;\n+\t\t    if (__result > __max)\n+\t\t      __overflow = true;\n+\t\t    else\n+\t\t      {\n+\t\t\tconst _ValueT __new_result = __result * __base + __digit;\n+\t\t\tif (__result)\n+\t\t\t  __overflow |= __new_result <= __result;\n+\t\t\t__result = __new_result;\n+\t\t\t++__sep_pos;\n+\t\t\t__found_num = true;\n+\t\t      }\n+\t\t  }\n+\t\telse if (__lc->_M_use_grouping\n+\t\t\t && __traits_type::eq(*__beg, __lc->_M_thousands_sep))\n+\t\t  {\n+\t\t    if (__sep_pos)\n+\t\t      {\n+\t\t\t__found_grouping += static_cast<char>(__sep_pos);\n+\t\t\t__sep_pos = 0;\n+\t\t      }\n+\t\t    else\n+\t\t      {\n+\t\t\t__err |= ios_base::failbit;\n+\t\t\tbreak;\n+\t\t      }\n+\t\t  }\n+\t\telse\n+\t\t  break;\n+\t      }\n+\t  }\n \n-      // Digit grouping is checked. If grouping and found_grouping don't\n-      // match, then get very very upset, and set failbit.\n-      if (__lc->_M_use_grouping && __found_grouping.size())\n-        {\n-          // Add the ending grouping.\n-          __found_grouping += static_cast<char>(__sep_pos);\n+\t// Digit grouping is checked. If grouping and found_grouping don't\n+\t// match, then get very very upset, and set failbit.\n+\tif (__lc->_M_use_grouping && __found_grouping.size())\n+\t  {\n+\t    // Add the ending grouping.\n+\t    __found_grouping += static_cast<char>(__sep_pos);\n+\t    \n+\t    const string __grouping = __lc->_M_grouping;\n+\t    if (!std::__verify_grouping(__grouping, __found_grouping))\n+\t      __err |= ios_base::failbit;\n+\t  }\n \n-\t  const string __grouping = __lc->_M_grouping;\n-          if (!std::__verify_grouping(__grouping, __found_grouping))\n-\t    __err |= ios_base::failbit;\n-        }\n+\tif (!(__err & ios_base::failbit)\n+\t    && !__overflow && __found_num)\n+\t  __v = __result;\n+\telse\n+\t  __err |= ios_base::failbit;\n \n-      // Finish up.\n-      __xtrc += char();\n-      if (__beg == __end)\n-        __err |= ios_base::eofbit;\n-      return __beg;\n-    }\n+\tif (__beg == __end)\n+\t  __err |= ios_base::eofbit;\n+\treturn __beg;\n+      }\n \n   // _GLIBCXX_RESOLVE_LIB_DEFECTS\n   // 17.  Bad bool parsing\n@@ -407,26 +457,21 @@ namespace std\n     {\n       if (!(__io.flags() & ios_base::boolalpha))\n         {\n-\t  // Parse bool values as unsigned long.\n+\t  // Parse bool values as long.\n           // NB: We can't just call do_get(long) here, as it might\n           // refer to a derived class.\n-          string __xtrc;\n-          int __base;\n-          __beg = _M_extract_int(__beg, __end, __io, __err, __xtrc, __base);\n-\n-\t  unsigned long __ul; \n-\t  std::__convert_to_v(__xtrc.c_str(), __ul, __err, \n-\t\t\t      _S_get_c_locale(), __base);\n-\t  if (!(__err & ios_base::failbit) && __ul <= 1)\n-\t    __v = __ul;\n-\t  else \n+\t  long __l = -1;\n+          __beg = _M_extract_int(__beg, __end, __io, __err, __l);\n+\t  if (__l == 0 || __l == 1)\n+\t    __v = __l;\n+\t  else\n             __err |= ios_base::failbit;\n         }\n       else\n         {\n \t  // Parse bool values as alphanumeric.\n-\t  typedef char_traits<_CharT>\t      \t__traits_type;\n-\t  typedef typename numpunct<_CharT>::__cache_type  \t__cache_type;\n+\t  typedef char_traits<_CharT>                     __traits_type;\n+\t  typedef typename numpunct<_CharT>::__cache_type __cache_type;\n \t  __use_cache<__cache_type> __uc;\n \t  const locale& __loc = __io._M_getloc();\n \t  const __cache_type* __lc = __uc(__loc);\n@@ -473,97 +518,43 @@ namespace std\n     num_get<_CharT, _InIter>::\n     do_get(iter_type __beg, iter_type __end, ios_base& __io,\n            ios_base::iostate& __err, long& __v) const\n-    {\n-      string __xtrc;\n-      int __base;\n-      __beg = _M_extract_int(__beg, __end, __io, __err, __xtrc, __base);\n-      std::__convert_to_v(__xtrc.c_str(), __v, __err,\n-\t\t\t  _S_get_c_locale(), __base);\n-      return __beg;\n-    }\n+    { return _M_extract_int(__beg, __end, __io, __err, __v); }\n \n   template<typename _CharT, typename _InIter>\n     _InIter\n     num_get<_CharT, _InIter>::\n     do_get(iter_type __beg, iter_type __end, ios_base& __io,\n            ios_base::iostate& __err, unsigned short& __v) const\n-    {\n-      string __xtrc;\n-      int __base;\n-      __beg = _M_extract_int(__beg, __end, __io, __err, __xtrc, __base);\n-      unsigned long __ul;\n-      std::__convert_to_v(__xtrc.c_str(), __ul, __err,\n-\t\t\t  _S_get_c_locale(), __base);\n-      if (!(__err & ios_base::failbit) \n-\t  && __ul <= numeric_limits<unsigned short>::max())\n-\t__v = static_cast<unsigned short>(__ul);\n-      else \n-\t__err |= ios_base::failbit;\n-      return __beg;\n-    }\n+    { return _M_extract_int(__beg, __end, __io, __err, __v); } \n \n   template<typename _CharT, typename _InIter>\n     _InIter\n     num_get<_CharT, _InIter>::\n     do_get(iter_type __beg, iter_type __end, ios_base& __io,\n            ios_base::iostate& __err, unsigned int& __v) const\n-    {\n-      string __xtrc;\n-      int __base;\n-      __beg = _M_extract_int(__beg, __end, __io, __err, __xtrc, __base);\n-      unsigned long __ul;\n-      std::__convert_to_v(__xtrc.c_str(), __ul, __err,\n-\t\t\t  _S_get_c_locale(), __base);\n-      if (!(__err & ios_base::failbit) \n-\t  && __ul <= numeric_limits<unsigned int>::max())\n-\t__v = static_cast<unsigned int>(__ul);\n-      else \n-\t__err |= ios_base::failbit;\n-      return __beg;\n-    }\n+    { return _M_extract_int(__beg, __end, __io, __err, __v); }\n \n   template<typename _CharT, typename _InIter>\n     _InIter\n     num_get<_CharT, _InIter>::\n     do_get(iter_type __beg, iter_type __end, ios_base& __io,\n            ios_base::iostate& __err, unsigned long& __v) const\n-    {\n-      string __xtrc;\n-      int __base;\n-      __beg = _M_extract_int(__beg, __end, __io, __err, __xtrc, __base);\n-      std::__convert_to_v(__xtrc.c_str(), __v, __err,\n-\t\t\t  _S_get_c_locale(), __base);\n-      return __beg;\n-    }\n+    { return _M_extract_int(__beg, __end, __io, __err, __v); }\n \n #ifdef _GLIBCXX_USE_LONG_LONG\n   template<typename _CharT, typename _InIter>\n     _InIter\n     num_get<_CharT, _InIter>::\n     do_get(iter_type __beg, iter_type __end, ios_base& __io,\n            ios_base::iostate& __err, long long& __v) const\n-    {\n-      string __xtrc;\n-      int __base;\n-      __beg = _M_extract_int(__beg, __end, __io, __err, __xtrc, __base);\n-      std::__convert_to_v(__xtrc.c_str(), __v, __err,\n-\t\t\t  _S_get_c_locale(), __base);\n-      return __beg;\n-    }\n+    { return _M_extract_int(__beg, __end, __io, __err, __v); }\n \n   template<typename _CharT, typename _InIter>\n     _InIter\n     num_get<_CharT, _InIter>::\n     do_get(iter_type __beg, iter_type __end, ios_base& __io,\n            ios_base::iostate& __err, unsigned long long& __v) const\n-    {\n-      string __xtrc;\n-      int __base;\n-      __beg = _M_extract_int(__beg, __end, __io, __err, __xtrc, __base);\n-      std::__convert_to_v(__xtrc.c_str(), __v, __err,\n-\t\t\t  _S_get_c_locale(), __base);\n-      return __beg;\n-    }\n+    { return _M_extract_int(__beg, __end, __io, __err, __v); }\n #endif\n \n   template<typename _CharT, typename _InIter>\n@@ -575,8 +566,7 @@ namespace std\n       string __xtrc;\n       __xtrc.reserve(32);\n       __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);\n-      std::__convert_to_v(__xtrc.c_str(), __v, __err,\n-\t\t\t  _S_get_c_locale());\n+      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());\n       return __beg;\n     }\n \n@@ -619,16 +609,12 @@ namespace std\n \t\t\t\t   | ios_base::uppercase | ios_base::internal);\n       __io.flags(__fmt & __fmtmask | (ios_base::hex | ios_base::showbase));\n \n-      string __xtrc;\n-      int __base;\n-      __beg = _M_extract_int(__beg, __end, __io, __err, __xtrc, __base);\n+      unsigned long __ul;\n+      __beg = _M_extract_int(__beg, __end, __io, __err, __ul);\n \n       // Reset from hex formatted input.\n       __io.flags(__fmt);\n \n-      unsigned long __ul;\n-      std::__convert_to_v(__xtrc.c_str(), __ul, __err, \n-\t\t\t  _S_get_c_locale(), __base);\n       if (!(__err & ios_base::failbit))\n \t__v = reinterpret_cast<void*>(__ul);\n       else \n@@ -794,7 +780,7 @@ namespace std\n       _OutIter\n       num_put<_CharT, _OutIter>::\n       _M_insert_int(_OutIter __s, ios_base& __io, _CharT __fill, \n-\t\t     _ValueT __v) const\n+\t\t    _ValueT __v) const\n       {\n \ttypedef typename numpunct<_CharT>::__cache_type\t__cache_type;\n \t__use_cache<__cache_type> __uc;"}, {"sha": "7a41ef83e7cb9c8b47af30491a554748adc859b4", "filename": "libstdc++-v3/src/locale-inst.cc", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fa96a6006d2689aeb376139cdf78a2a51c907e9/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fa96a6006d2689aeb376139cdf78a2a51c907e9/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc?ref=0fa96a6006d2689aeb376139cdf78a2a51c907e9", "patch": "@@ -55,6 +55,50 @@ namespace std\n   template class numpunct_byname<C>;\n   template class num_get<C, istreambuf_iterator<C> >;\n   template class num_put<C, ostreambuf_iterator<C> >; \n+  template\n+    istreambuf_iterator<C>\n+    num_get<C, istreambuf_iterator<C> >::\n+    _M_extract_int(istreambuf_iterator<C>, istreambuf_iterator<C>,\n+\t\t   ios_base&, ios_base::iostate&,\n+\t\t   long&) const;\n+\n+  template\n+    istreambuf_iterator<C>\n+    num_get<C, istreambuf_iterator<C> >::\n+    _M_extract_int(istreambuf_iterator<C>, istreambuf_iterator<C>,\n+\t\t   ios_base&, ios_base::iostate&, \n+\t\t   unsigned short&) const;\n+\n+  template\n+    istreambuf_iterator<C>\n+    num_get<C, istreambuf_iterator<C> >::\n+    _M_extract_int(istreambuf_iterator<C>, istreambuf_iterator<C>,\n+\t\t   ios_base&, ios_base::iostate&,\n+\t\t   unsigned int&) const;\n+\n+  template\n+    istreambuf_iterator<C>\n+    num_get<C, istreambuf_iterator<C> >::\n+    _M_extract_int(istreambuf_iterator<C>, istreambuf_iterator<C>,\n+\t\t   ios_base&, ios_base::iostate&,\n+\t\t   unsigned long&) const;\n+\n+#ifdef _GLIBCXX_USE_LONG_LONG\n+  template\n+    istreambuf_iterator<C>\n+    num_get<C, istreambuf_iterator<C> >::\n+    _M_extract_int(istreambuf_iterator<C>, istreambuf_iterator<C>,\n+\t\t   ios_base&, ios_base::iostate&,\n+\t\t   long long&) const;\n+\n+  template\n+    istreambuf_iterator<C>\n+    num_get<C, istreambuf_iterator<C> >::\n+    _M_extract_int(istreambuf_iterator<C>, istreambuf_iterator<C>,\n+\t\t   ios_base&, ios_base::iostate&,\n+\t\t   unsigned long long&) const;\n+#endif\n+\n   template\n     ostreambuf_iterator<C>\n     num_put<C, ostreambuf_iterator<C> >::"}, {"sha": "da975f0c78fb168e036984da89f7b0afe48e0cd4", "filename": "libstdc++-v3/src/locale_facets.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fa96a6006d2689aeb376139cdf78a2a51c907e9/libstdc%2B%2B-v3%2Fsrc%2Flocale_facets.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fa96a6006d2689aeb376139cdf78a2a51c907e9/libstdc%2B%2B-v3%2Fsrc%2Flocale_facets.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale_facets.cc?ref=0fa96a6006d2689aeb376139cdf78a2a51c907e9", "patch": "@@ -53,7 +53,7 @@ namespace std\n   const money_base::pattern \n   money_base::_S_default_pattern =  { {symbol, sign, none, value} };\n \n-  const char* __num_base::_S_atoms_in = \"-+xX0123456789eEabcdfABCDF\";\n+  const char* __num_base::_S_atoms_in = \"-+xX0123456789abcdefABCDEF\";\n   const char* __num_base::_S_atoms_out =\"-+xX0123456789abcdef0123456789ABCDEF\";\n \n   // _GLIBCXX_RESOLVE_LIB_DEFECTS"}]}