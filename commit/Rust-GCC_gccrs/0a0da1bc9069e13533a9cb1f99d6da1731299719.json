{"sha": "0a0da1bc9069e13533a9cb1f99d6da1731299719", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGEwZGExYmM5MDY5ZTEzNTMzYTljYjFmOTlkNmRhMTczMTI5OTcxOQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2005-04-06T09:40:41Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2005-04-06T09:40:41Z"}, "message": "v850-protos.h (override_options): Delete.\n\n\t* config/v850/v850-protos.h (override_options): Delete.\n\t* config/v850/v850.h (target_flags, MASK_GHS, MASK_LONG_CALLS, MASK_EP)\n\t(MASK_PROLOG_FUNCTION, MASK_DEBUG, MASK_V850, MASK_V850E)\n\t(MASK_SMALL_SLD, MASK_BIG_SWITCH, MASK_NO_APP_REGS, MASK_DISABLE_CALLT)\n\t(MASK_STRICT_ALIGN, MASK_US_BIT_SET, MASK_US_MASK_SET, TARGET_GHS)\n\t(TARGET_LONG_CALLS, TARGET_EP, TARGET_PROLOG_FUNCTION, TARGET_V850)\n\t(TARGET_BIG_SWITCH, TARGET_DEBUG, TARGET_V850E, TARGET_US_BIT_SET)\n\t(TARGET_SMALL_SLD, TARGET_DISABLE_CALLT, TARGET_NO_APP_REGS)\n\t(TARGET_STRICT_ALIGN, TARGET_SWITCHES, TARGET_OPTIONS)\n\t(OVERRIDE_OPTIONS): Delete.\n\t(MASK_CPU): Redefine as MASK_V850 | MASK_V850E.\n\t(small_memory_info): Remove the value field.\n\t(CONDITIONAL_REGISTER_USAGE): Check !TARGET_APP_REGS rather than\n\tTARGET_NO_APP_REGS.\n\t* config/v850/v850.c (small_memory): Remove the value field.\n\t(TARGET_DEFAULT_TARGET_FLAGS, TARGET_HANDLE_OPTION): Override defaults.\n\t(override_options): Delete.\n\t(v850_handle_memory_option, v850_handle_option): New functions.\n\t* config/v850/v850.opt: New file.\n\nFrom-SVN: r97710", "tree": {"sha": "53ddc5fbd42820a9b883d7e8db8673cfa90bdb5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53ddc5fbd42820a9b883d7e8db8673cfa90bdb5b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a0da1bc9069e13533a9cb1f99d6da1731299719", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a0da1bc9069e13533a9cb1f99d6da1731299719", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a0da1bc9069e13533a9cb1f99d6da1731299719", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a0da1bc9069e13533a9cb1f99d6da1731299719/comments", "author": null, "committer": null, "parents": [{"sha": "ed23bd30c12f3dfeb1f74a19c10d83109b92cf56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed23bd30c12f3dfeb1f74a19c10d83109b92cf56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed23bd30c12f3dfeb1f74a19c10d83109b92cf56"}], "stats": {"total": 375, "additions": 179, "deletions": 196}, "files": [{"sha": "fbca7d6162a75f3481fbd82de2d9c2932677de83", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a0da1bc9069e13533a9cb1f99d6da1731299719/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a0da1bc9069e13533a9cb1f99d6da1731299719/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0a0da1bc9069e13533a9cb1f99d6da1731299719", "patch": "@@ -1,3 +1,25 @@\n+2005-04-06  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config/v850/v850-protos.h (override_options): Delete.\n+\t* config/v850/v850.h (target_flags, MASK_GHS, MASK_LONG_CALLS, MASK_EP)\n+\t(MASK_PROLOG_FUNCTION, MASK_DEBUG, MASK_V850, MASK_V850E)\n+\t(MASK_SMALL_SLD, MASK_BIG_SWITCH, MASK_NO_APP_REGS, MASK_DISABLE_CALLT)\n+\t(MASK_STRICT_ALIGN, MASK_US_BIT_SET, MASK_US_MASK_SET, TARGET_GHS)\n+\t(TARGET_LONG_CALLS, TARGET_EP, TARGET_PROLOG_FUNCTION, TARGET_V850)\n+\t(TARGET_BIG_SWITCH, TARGET_DEBUG, TARGET_V850E, TARGET_US_BIT_SET)\n+\t(TARGET_SMALL_SLD, TARGET_DISABLE_CALLT, TARGET_NO_APP_REGS)\n+\t(TARGET_STRICT_ALIGN, TARGET_SWITCHES, TARGET_OPTIONS)\n+\t(OVERRIDE_OPTIONS): Delete.\n+\t(MASK_CPU): Redefine as MASK_V850 | MASK_V850E.\n+\t(small_memory_info): Remove the value field.\n+\t(CONDITIONAL_REGISTER_USAGE): Check !TARGET_APP_REGS rather than\n+\tTARGET_NO_APP_REGS.\n+\t* config/v850/v850.c (small_memory): Remove the value field.\n+\t(TARGET_DEFAULT_TARGET_FLAGS, TARGET_HANDLE_OPTION): Override defaults.\n+\t(override_options): Delete.\n+\t(v850_handle_memory_option, v850_handle_option): New functions.\n+\t* config/v850/v850.opt: New file.\n+\n 2005-04-06  Geoffrey Keating  <geoffk@apple.com>\n \n \t* config.host: Add a section for generic hosts, and a subsection"}, {"sha": "010e33555349cde9d68b5e7bfc12c67532fb3694", "filename": "gcc/config/v850/v850-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a0da1bc9069e13533a9cb1f99d6da1731299719/gcc%2Fconfig%2Fv850%2Fv850-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a0da1bc9069e13533a9cb1f99d6da1731299719/gcc%2Fconfig%2Fv850%2Fv850-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850-protos.h?ref=0a0da1bc9069e13533a9cb1f99d6da1731299719", "patch": "@@ -35,7 +35,6 @@ extern void   zdata_section                 (void);\n extern void   rozdata_section               (void);\n extern void   zbss_section                  (void);\n extern int    v850_handle_pragma            (int (*)(void), void (*)(int), char *);\n-extern void   override_options              (void);\n extern int    compute_register_save_size    (long *);\n extern int    compute_frame_size            (int, long *);\n extern void   v850_init_expanders           (void);"}, {"sha": "021588234c724cdd86cc1d216826acb09743d59e", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 61, "deletions": 40, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a0da1bc9069e13533a9cb1f99d6da1731299719/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a0da1bc9069e13533a9cb1f99d6da1731299719/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=0a0da1bc9069e13533a9cb1f99d6da1731299719", "patch": "@@ -49,6 +49,7 @@\n #endif\n \n /* Function prototypes for stupid compilers:  */\n+static bool v850_handle_option       (size_t, const char *, int);\n static void const_double_split       (rtx, HOST_WIDE_INT *, HOST_WIDE_INT *);\n static int  const_costs_int          (HOST_WIDE_INT, int);\n static int  const_costs\t\t     (rtx, enum rtx_code);\n@@ -75,10 +76,10 @@ static int v850_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode,\n /* Information about the various small memory areas.  */\n struct small_memory_info small_memory[ (int)SMALL_MEMORY_max ] =\n {\n-  /* name\tvalue\t\tmax\t\tphysical max */\n-  { \"tda\",\t(char *)0,\t0,\t\t256 },\n-  { \"sda\",\t(char *)0,\t0,\t\t65536 },\n-  { \"zda\",\t(char *)0,\t0,\t\t32768 },\n+  /* name\tmax\tphysical max */\n+  { \"tda\",\t0,\t\t256 },\n+  { \"sda\",\t0,\t\t65536 },\n+  { \"zda\",\t0,\t\t32768 },\n };\n \n /* Names of the various data areas used on the v850.  */\n@@ -115,6 +116,11 @@ static int v850_interrupt_p = FALSE;\n #undef TARGET_ASM_FILE_START_FILE_DIRECTIVE\n #define TARGET_ASM_FILE_START_FILE_DIRECTIVE true\n \n+#undef TARGET_DEFAULT_TARGET_FLAGS\n+#define TARGET_DEFAULT_TARGET_FLAGS (MASK_DEFAULT | MASK_APP_REGS)\n+#undef TARGET_HANDLE_OPTION\n+#define TARGET_HANDLE_OPTION v850_handle_option\n+\n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS v850_rtx_costs\n \n@@ -144,49 +150,64 @@ static int v850_interrupt_p = FALSE;\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n-/* Sometimes certain combinations of command options do not make\n-   sense on a particular target machine.  You can define a macro\n-   `OVERRIDE_OPTIONS' to take account of this.  This macro, if\n-   defined, is executed once just after all the command options have\n-   been parsed.\n-\n-   Don't use this macro to turn on various extra optimizations for\n-   `-O'.  That is what `OPTIMIZATION_OPTIONS' is for.  */\n+/* Set the maximum size of small memory area TYPE to the value given\n+   by VALUE.  Return true if VALUE was syntactically correct.  VALUE\n+   starts with the argument separator: either \"-\" or \"=\".  */\n \n-void\n-override_options (void)\n+static bool\n+v850_handle_memory_option (enum small_memory_type type, const char *value)\n {\n-  int i;\n-  extern int atoi (const char *);\n+  int i, size;\n \n-  /* Parse -m{s,t,z}da=nnn switches */\n-  for (i = 0; i < (int)SMALL_MEMORY_max; i++)\n-    {\n-      if (small_memory[i].value)\n-\t{\n-\t  if (!ISDIGIT (*small_memory[i].value))\n-\t    error (\"%s=%s is not numeric\",\n-\t\t   small_memory[i].name,\n-\t\t   small_memory[i].value);\n-\t  else\n-\t    {\n-\t      small_memory[i].max = atoi (small_memory[i].value);\n-\t      if (small_memory[i].max > small_memory[i].physical_max)\n-\t\terror (\"%s=%s is too large\",\n-\t\t   small_memory[i].name,\n-\t\t   small_memory[i].value);\n-\t    }\n-\t}\n-    }\n+  if (*value != '-' && *value != '=')\n+    return false;\n+\n+  value++;\n+  for (i = 0; value[i]; i++)\n+    if (!ISDIGIT (value[i]))\n+      return false;\n+\n+  size = atoi (value);\n+  if (size > small_memory[type].physical_max)\n+    error (\"value passed to %<-m%s%> is too large\", small_memory[type].name);\n+  else\n+    small_memory[type].max = size;\n+  return true;\n+}\n \n-  /* Make sure that the US_BIT_SET mask has been correctly initialized.  */\n-  if ((target_flags & MASK_US_MASK_SET) == 0)\n+/* Implement TARGET_HANDLE_OPTION.  */\n+\n+static bool\n+v850_handle_option (size_t code, const char *arg, int value ATTRIBUTE_UNUSED)\n+{\n+  switch (code)\n     {\n-      target_flags |= MASK_US_MASK_SET;\n-      target_flags &= ~MASK_US_BIT_SET;\n+    case OPT_mspace:\n+      target_flags |= MASK_EP | MASK_PROLOG_FUNCTION;\n+      return true;\n+\n+    case OPT_mv850:\n+      target_flags &= ~(MASK_CPU ^ MASK_V850);\n+      return true;\n+\n+    case OPT_mv850e:\n+    case OPT_mv850e1:\n+      target_flags &= ~(MASK_CPU ^ MASK_V850E);\n+      return true;\n+\n+    case OPT_mtda:\n+      return v850_handle_memory_option (SMALL_MEMORY_TDA, arg);\n+\n+    case OPT_msda:\n+      return v850_handle_memory_option (SMALL_MEMORY_SDA, arg);\n+\n+    case OPT_mzda:\n+      return v850_handle_memory_option (SMALL_MEMORY_ZDA, arg);\n+\n+    default:\n+      return true;\n     }\n }\n-\n \f\n static bool\n v850_pass_by_reference (CUMULATIVE_ARGS *cum ATTRIBUTE_UNUSED,"}, {"sha": "8aefe0368682e34eb10e7b1d1b9bc2f2e48c35ef", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 5, "deletions": 155, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a0da1bc9069e13533a9cb1f99d6da1731299719/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a0da1bc9069e13533a9cb1f99d6da1731299719/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=0a0da1bc9069e13533a9cb1f99d6da1731299719", "patch": "@@ -83,137 +83,11 @@\n   builtin_assert( \"cpu=v850\" );\t\t\t\\\n } while(0)\n \n-/* Run-time compilation parameters selecting different hardware subsets.  */\n-\n-extern int target_flags;\n-\n-/* Target flags bits, see below for an explanation of the bits.  */\n-#define MASK_GHS\t\t0x00000001\n-#define MASK_LONG_CALLS\t\t0x00000002\n-#define MASK_EP\t\t\t0x00000004\n-#define MASK_PROLOG_FUNCTION\t0x00000008\n-#define MASK_DEBUG\t\t0x40000000\n-\n-#define MASK_CPU                0x00000030\n-#define MASK_V850               0x00000010\n-#define MASK_V850E              0x00000020\n-#define MASK_SMALL_SLD          0x00000040\n-\n-#define MASK_BIG_SWITCH\t\t0x00000100\n-#define MASK_NO_APP_REGS        0x00000200\n-#define MASK_DISABLE_CALLT      0x00000400\n-#define MASK_STRICT_ALIGN       0x00000800\n-\n-#define MASK_US_BIT_SET         0x00001000\n-#define MASK_US_MASK_SET        0x00002000\n-\n-/* Macros used in the machine description to test the flags.  */\n-\n-/* The GHS calling convention support doesn't really work,\n-   mostly due to a lack of documentation.  Outstanding issues:\n-\n-     * How do varargs & stdarg really work.  How to they handle\n-     passing structures (if at all).\n-\n-     * Doubles are normally 4 byte aligned, except in argument\n-     lists where they are 8 byte aligned.  Is the alignment\n-     in the argument list based on the first parameter,\n-     first stack parameter, etc etc.\n-\n-     * Passing/returning of large structures probably isn't the same\n-     as GHS.  We don't have enough documentation on their conventions\n-     to be compatible.\n-\n-     * Tests of TARGET_SETUP_INCOMING_VARARGS need to be made runtime checks\n-     since it depends on TARGET_GHS.  */\n-#define TARGET_GHS (target_flags & MASK_GHS)\n- \n-/* Don't do PC-relative calls, instead load the address of the target\n-   function into a register and perform a register indirect call.  */\n-#define TARGET_LONG_CALLS (target_flags & MASK_LONG_CALLS)\n-\n-/* Whether to optimize space by using ep (r30) for pointers with small offsets\n-   in basic blocks.  */\n-#define TARGET_EP (target_flags & MASK_EP)\n-\n-/* Whether to call out-of-line functions to save registers or not.  */\n-#define TARGET_PROLOG_FUNCTION (target_flags & MASK_PROLOG_FUNCTION)\n-\n-#define TARGET_V850    \t\t((target_flags & MASK_CPU) == MASK_V850)\n-\n-/* Whether to emit 2 byte per entry or 4 byte per entry switch tables.  */\n-#define TARGET_BIG_SWITCH (target_flags & MASK_BIG_SWITCH)\n-\n-/* General debug flag.  */\n-#define TARGET_DEBUG \t\t(target_flags & MASK_DEBUG)\n-#define TARGET_V850E   \t\t((target_flags & MASK_V850E) == MASK_V850E)\n-\n-#define TARGET_US_BIT_SET\t(target_flags & MASK_US_BIT_SET)\n-\n-/* Whether to assume that the SLD.B and SLD.H instructions only have small\n-   displacement fields, thus allowing the generated code to run on any of\n-   the V850 range of processors.  */\n-#define TARGET_SMALL_SLD \t(target_flags & MASK_SMALL_SLD)\n-\n-/* True if callt will not be used for function prolog & epilog.  */\n-#define TARGET_DISABLE_CALLT \t(target_flags & MASK_DISABLE_CALLT)\n-\n-/* False if r2 and r5 can be used by the compiler.  True if r2\n-   and r5 are to be fixed registers (for compatibility with GHS).  */\n-#define TARGET_NO_APP_REGS  \t(target_flags & MASK_NO_APP_REGS)\n-\n-#define TARGET_STRICT_ALIGN \t(target_flags & MASK_STRICT_ALIGN)\n-\n-/* Macro to define tables used to set the flags.\n-   This is a list in braces of pairs in braces,\n-   each pair being { \"NAME\", VALUE }\n-   where VALUE is the bits to set or minus the bits to clear.\n-   An empty string NAME is used to identify the default VALUE.  */\n-\n-#define TARGET_SWITCHES\t\t\t\t\t\t\t\\\n-  {{ \"ghs\",\t\t\t MASK_GHS, N_(\"Support Green Hills ABI\") }, \\\n-   { \"no-ghs\",\t\t\t-MASK_GHS, \"\" },\t\t\t\\\n-   { \"long-calls\",\t\t MASK_LONG_CALLS, \t\t\t\\\n-       \t\t\t\tN_(\"Prohibit PC relative function calls\") },\\\n-   { \"no-long-calls\",\t\t-MASK_LONG_CALLS, \"\" },\t\t\t\\\n-   { \"ep\",\t\t\t MASK_EP,\t\t\t\t\\\n-                                N_(\"Reuse r30 on a per function basis\") }, \\\n-   { \"no-ep\",\t\t\t-MASK_EP, \"\" },\t\t\t\t\\\n-   { \"prolog-function\",\t\t MASK_PROLOG_FUNCTION, \t\t\t\\\n-       \t\t\t\tN_(\"Use stubs for function prologues\") }, \\\n-   { \"no-prolog-function\",\t-MASK_PROLOG_FUNCTION, \"\" },\t\t\\\n-   { \"space\",\t\t\t MASK_EP | MASK_PROLOG_FUNCTION, \t\\\n-       \t\t\t\tN_(\"Same as: -mep -mprolog-function\") }, \\\n-   { \"debug\",\t\t\t MASK_DEBUG, N_(\"Enable backend debugging\") }, \\\n-   { \"v850\",\t\t \t MASK_V850,\t\t\t\t\\\n-                                N_(\"Compile for the v850 processor\") },\t\\\n-   { \"v850\",\t\t \t -(MASK_V850 ^ MASK_CPU), \"\" },\t\t\\\n-   { \"v850e1\",\t\t\t MASK_V850E, N_(\"Compile for v850e1 processor\") }, \\\n-   { \"v850e1\",\t\t        -(MASK_V850E ^ MASK_CPU), \"\" }, /* Make sure that the other bits are cleared.  */ \\\n-   { \"v850e\",\t\t\t MASK_V850E, N_(\"Compile for v850e processor\") }, \\\n-   { \"v850e\",\t\t        -(MASK_V850E ^ MASK_CPU), \"\" }, /* Make sure that the other bits are cleared.  */ \\\n-   { \"small-sld\",\t\t MASK_SMALL_SLD, N_(\"Enable the use of the short load instructions\") },\t\\\n-   { \"no-small-sld\",\t\t-MASK_SMALL_SLD, \"\" },\t\t\t\\\n-   { \"disable-callt\",            MASK_DISABLE_CALLT, \t\t\t\\\n-       \t\t\t\tN_(\"Do not use the callt instruction\") },   \\\n-   { \"no-disable-callt\",        -MASK_DISABLE_CALLT, \"\" },             \t\\\n-   { \"US-bit-set\",\t\t (MASK_US_BIT_SET | MASK_US_MASK_SET), \"\" },\t\\\n-   { \"no-US-bit-set\",\t\t-MASK_US_BIT_SET, \"\" },\t\t\t\\\n-   { \"no-US-bit-set\",\t\t MASK_US_MASK_SET, \"\" },\t\t\\\n-   { \"app-regs\",                -MASK_NO_APP_REGS, \"\"  },               \\\n-   { \"no-app-regs\",              MASK_NO_APP_REGS, \t\t\t\\\n-       \t\t\t\tN_(\"Do not use registers r2 and r5\") }, \\\n-   { \"strict-align\",             MASK_STRICT_ALIGN,\t\t\t\\\n-\t\t\t\tN_(\"Enforce strict alignment\") },       \\\n-   { \"no-strict-align\",         -MASK_STRICT_ALIGN, \"\" },\t\t\\\n-   { \"big-switch\",\t\t MASK_BIG_SWITCH, \t\t\t\\\n-       \t\t\t\tN_(\"Use 4 byte entries in switch tables\") },\\\n-   { \"\",\t\t\t MASK_DEFAULT, \"\"}}\n+#define MASK_CPU (MASK_V850 | MASK_V850E)\n \n /* Information about the various small memory areas.  */\n struct small_memory_info {\n   const char *name;\n-  const char *value;\n   long max;\n   long physical_max;\n };\n@@ -230,30 +104,6 @@ enum small_memory_type {\n \n extern struct small_memory_info small_memory[(int)SMALL_MEMORY_max];\n \n-#define TARGET_OPTIONS\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  { \"tda=\",\t&small_memory[ (int)SMALL_MEMORY_TDA ].value,\t\t\\\n-      N_(\"Set the max size of data eligible for the TDA area\"), 0},\t\\\n-  { \"tda-\",\t&small_memory[ (int)SMALL_MEMORY_TDA ].value, \"\", 0},\t\\\n-  { \"sda=\",\t&small_memory[ (int)SMALL_MEMORY_SDA ].value, \t\t\\\n-      N_(\"Set the max size of data eligible for the SDA area\"), 0},\t\\\n-  { \"sda-\",\t&small_memory[ (int)SMALL_MEMORY_SDA ].value, \"\", 0},\t\\\n-  { \"zda=\",\t&small_memory[ (int)SMALL_MEMORY_ZDA ].value, \t\t\\\n-      N_(\"Set the max size of data eligible for the ZDA area\"), 0},\t\\\n-  { \"zda-\",\t&small_memory[ (int)SMALL_MEMORY_ZDA ].value, \"\", 0},\t\\\n-}\n-\n-/* Sometimes certain combinations of command options do not make\n-   sense on a particular target machine.  You can define a macro\n-   `OVERRIDE_OPTIONS' to take account of this.  This macro, if\n-   defined, is executed once just after all the command options have\n-   been parsed.\n-\n-   Don't use this macro to turn on various extra optimizations for\n-   `-O'.  That is what `OPTIMIZATION_OPTIONS' is for.  */\n-#define OVERRIDE_OPTIONS override_options ()\n-\n-\n /* Show we can debug even without a frame pointer.  */\n #define CAN_DEBUG_WITHOUT_FP\n \n@@ -400,14 +250,14 @@ extern struct small_memory_info small_memory[(int)SMALL_MEMORY_max];\n    0,  1,  3,  4,  5, 30, 32, 33\t/* fixed registers */\t\t\\\n }\n \n-/* If TARGET_NO_APP_REGS is not defined then add r2 and r5 to\n+/* If TARGET_APP_REGS is not defined then add r2 and r5 to\n    the pool of fixed registers. See PR 14505.  */\n #define CONDITIONAL_REGISTER_USAGE  \\\n {                                                       \\\n-  if (TARGET_NO_APP_REGS)                               \\\n+  if (!TARGET_APP_REGS)                                 \\\n     {                                                   \\\n-     fixed_regs[2] = 1;  call_used_regs[2] = 1;         \\\n-     fixed_regs[5] = 1;  call_used_regs[5] = 1;         \\\n+      fixed_regs[2] = 1;  call_used_regs[2] = 1;        \\\n+      fixed_regs[5] = 1;  call_used_regs[5] = 1;        \\\n     }                                                   \\\n }\n "}, {"sha": "8b19791b871c9c411f3213c0bd4e3e81b0f1c51c", "filename": "gcc/config/v850/v850.opt", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a0da1bc9069e13533a9cb1f99d6da1731299719/gcc%2Fconfig%2Fv850%2Fv850.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a0da1bc9069e13533a9cb1f99d6da1731299719/gcc%2Fconfig%2Fv850%2Fv850.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.opt?ref=0a0da1bc9069e13533a9cb1f99d6da1731299719", "patch": "@@ -0,0 +1,91 @@\n+; Options for the NEC V850 port of the compiler.\n+\n+; Copyright (C) 2005 Free Software Foundation, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 2, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+; for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING.  If not, write to the Free\n+; Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+; 02111-1307, USA.\n+\n+mapp-regs\n+Target Report Mask(APP_REGS)\n+Use registers r2 and r5\n+\n+mbig-switch\n+Target Report Mask(BIG_SWITCH)\n+Use 4 byte entries in switch tables\n+\n+mdebug\n+Target Report Mask(DEBUG)\n+Enable backend debugging\n+\n+mdisable-callt\n+Target Report Mask(DISABLE_CALLT)\n+Do not use the callt instruction\n+\n+mep\n+Target Report Mask(EP)\n+Reuse r30 on a per function basis\n+\n+mghs\n+Target Report Mask(GHS)\n+Support Green Hills ABI\n+\n+mlong-calls\n+Target Report Mask(LONG_CALLS)\n+Prohibit PC relative function calls\n+\n+mprolog-function\n+Target Report Mask(PROLOG_FUNCTION)\n+Use stubs for function prologues\n+\n+msda\n+Target RejectNegative Joined\n+Set the max size of data eligible for the SDA area\n+\n+msmall-sld\n+Target Report Mask(SMALL_SLD)\n+Enable the use of the short load instructions\n+\n+mspace\n+Target RejectNegative\n+Same as: -mep -mprolog-function\n+\n+mtda\n+Target RejectNegative Joined\n+Set the max size of data eligible for the TDA area\n+\n+mstrict-align\n+Target Report Mask(STRICT_ALIGN)\n+Enforce strict alignment\n+\n+mUS-bit-set\n+Target Report Mask(US_BIT_SET)\n+\n+mv850\n+Target Report RejectNegative Mask(V850)\n+Compile for the v850 processor\n+\n+mv850e\n+Target Report RejectNegative Mask(V850E)\n+Compile for the v850e processor\n+\n+mv850e1\n+Target RejectNegative Mask(V850E) MaskExists\n+Compile for the v850e1 processor\n+\n+mzda\n+Target RejectNegative Joined\n+Set the max size of data eligible for the ZDA area"}]}