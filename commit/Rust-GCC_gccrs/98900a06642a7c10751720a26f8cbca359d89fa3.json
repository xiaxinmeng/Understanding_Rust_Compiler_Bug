{"sha": "98900a06642a7c10751720a26f8cbca359d89fa3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTg5MDBhMDY2NDJhN2MxMDc1MTcyMGEyNmY4Y2JjYTM1OWQ4OWZhMw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2018-12-10T15:47:16Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2018-12-10T15:47:16Z"}, "message": "re PR target/88418 (ICE in extract_insn, at recog.c:2305 (error: unrecognizable insn))\n\n\tPR target/88418\n\t* config/i386/i386.c (ix86_expand_sse_cmp): For vector modes,\n\tcheck operand 1 with vector_operand predicate.\n\t(ix86_expand_sse_movcc): For vector modes, check op_true with\n\tvector_operand, not nonimmediate_operand.\n\ntestsuite/ChangeLog:\n\n\tPR target/88418\n\t* gcc.target/i386/pr88418.c: New test.\n\nFrom-SVN: r266958", "tree": {"sha": "508895ef8288fde3b2ae4f741d5db2294a3a8782", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/508895ef8288fde3b2ae4f741d5db2294a3a8782"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98900a06642a7c10751720a26f8cbca359d89fa3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98900a06642a7c10751720a26f8cbca359d89fa3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98900a06642a7c10751720a26f8cbca359d89fa3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98900a06642a7c10751720a26f8cbca359d89fa3/comments", "author": null, "committer": null, "parents": [{"sha": "87e4fbdd9a250c77279637c7d4475e0e7bccbdb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87e4fbdd9a250c77279637c7d4475e0e7bccbdb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87e4fbdd9a250c77279637c7d4475e0e7bccbdb5"}], "stats": {"total": 47, "additions": 39, "deletions": 8}, "files": [{"sha": "3c5e3ed43298cfbdc4c3619fb986cd70feff0854", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98900a06642a7c10751720a26f8cbca359d89fa3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98900a06642a7c10751720a26f8cbca359d89fa3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=98900a06642a7c10751720a26f8cbca359d89fa3", "patch": "@@ -1,3 +1,11 @@\n+2018-12-10  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/88418\n+\t* config/i386/i386.c (ix86_expand_sse_cmp): For vector modes,\n+\tcheck operand 1 with vector_operand predicate.\n+\t(ix86_expand_sse_movcc): For vector modes, check op_true with\n+\tvector_operand, not nonimmediate_operand.\n+\n 2018-12-10  Richard Biener  <rguenther@suse.de>\n \n \t* tree-affine.c (tree_to_aff_combination): Remove unreachable"}, {"sha": "e86c39e70b38721c59eb2cc19fb802d233a29da3", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98900a06642a7c10751720a26f8cbca359d89fa3/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98900a06642a7c10751720a26f8cbca359d89fa3/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=98900a06642a7c10751720a26f8cbca359d89fa3", "patch": "@@ -23483,7 +23483,7 @@ ix86_expand_sse_fp_minmax (rtx dest, enum rtx_code code, rtx cmp_op0,\n   return true;\n }\n \n-/* Expand an sse vector comparison.  Return the register with the result.  */\n+/* Expand an SSE comparison.  Return the register with the result.  */\n \n static rtx\n ix86_expand_sse_cmp (rtx dest, enum rtx_code code, rtx cmp_op0, rtx cmp_op1,\n@@ -23508,9 +23508,12 @@ ix86_expand_sse_cmp (rtx dest, enum rtx_code code, rtx cmp_op0, rtx cmp_op1,\n   else\n     cmp_mode = cmp_ops_mode;\n \n-\n   cmp_op0 = force_reg (cmp_ops_mode, cmp_op0);\n-  if (!nonimmediate_operand (cmp_op1, cmp_ops_mode))\n+\n+  int (*op1_predicate)(rtx, machine_mode)\n+    = VECTOR_MODE_P (cmp_ops_mode) ? vector_operand : nonimmediate_operand;\n+\n+  if (!op1_predicate (cmp_op1, cmp_ops_mode))\n     cmp_op1 = force_reg (cmp_ops_mode, cmp_op1);\n \n   if (optimize\n@@ -23627,7 +23630,7 @@ ix86_expand_sse_movcc (rtx dest, rtx cmp, rtx op_true, rtx op_false)\n       rtx (*gen) (rtx, rtx, rtx, rtx) = NULL;\n       rtx d = dest;\n \n-      if (!nonimmediate_operand (op_true, mode))\n+      if (!vector_operand (op_true, mode))\n \top_true = force_reg (mode, op_true);\n \n       op_false = force_reg (mode, op_false);"}, {"sha": "babcb6c2d2be747137a64cd9ae6b1a56104d741c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98900a06642a7c10751720a26f8cbca359d89fa3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98900a06642a7c10751720a26f8cbca359d89fa3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=98900a06642a7c10751720a26f8cbca359d89fa3", "patch": "@@ -1,3 +1,8 @@\n+2018-12-10  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/88418\n+\t* gcc.target/i386/pr88418.c: New test.\n+\n 2018-12-10  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/88427\n@@ -20,7 +25,7 @@\n \t* gcc.dg/vect/vect-ivdep-2.c: Likewise.\n \t* gcc.dg/vect/nodump-vect-opt-info-1.c: Likewise.\n \t* g++.dg/vect/pr33426-ivdep.cc: Likewise.\n-\t* g++.dg/vect/pr33426-ivdep-2.cc: Likewise. \n+\t* g++.dg/vect/pr33426-ivdep-2.cc: Likewise.\n \t* g++.dg/vect/pr33426-ivdep-3.cc: Likewise.\n \t* g++.dg/vect/pr33426-ivdep-4.cc: Likewise.\n \n@@ -254,7 +259,7 @@\n \t* gcc.dg/tree-ssa/ssa-dom-thread-7.c: Skip the post switch conversion\n \ttests on aarch64.\n \t* gcc.dg/tree-ssa/pr77445-2.c: Similarly.\n- \n+\n 2018-12-06  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c++/85110\n@@ -940,8 +945,8 @@\n \n \t* lib/target-supports.exp\n \t(check_effective_target_logical_op_short_circuit): Add msp430.\n-\t(check_effective_target_int_eq_float): New. \n-\t(check_effective_target_ptr_eq_long): New. \n+\t(check_effective_target_int_eq_float): New.\n+\t(check_effective_target_ptr_eq_long): New.\n \t* c-c++-common/pr41779.c: Require int_eq_float for dg-warning tests.\n \t* c-c++-common/pr57371-2.c: XFAIL optimized dump scan when\n \tsizeof (float) != sizeof (int)."}, {"sha": "c348b19b17dfe8e4c08414d31f8b754c52f62b9d", "filename": "gcc/testsuite/gcc.target/i386/pr88418.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98900a06642a7c10751720a26f8cbca359d89fa3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88418.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98900a06642a7c10751720a26f8cbca359d89fa3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88418.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88418.c?ref=98900a06642a7c10751720a26f8cbca359d89fa3", "patch": "@@ -0,0 +1,15 @@\n+/* PR target/88418 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -fpack-struct -msse4.1\" } */\n+\n+typedef long long v2di __attribute__ ((__vector_size__ (16)));\n+\n+union df {\n+  v2di se[2];\n+};\n+\n+void\n+qg (union df *jz, union df *pl)\n+{\n+  jz->se[0] = jz->se[0] == pl->se[0];\n+}"}]}