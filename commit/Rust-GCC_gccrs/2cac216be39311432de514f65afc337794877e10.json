{"sha": "2cac216be39311432de514f65afc337794877e10", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmNhYzIxNmJlMzkzMTE0MzJkZTUxNGY2NWFmYzMzNzc5NDg3N2UxMA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-08-23T02:59:37Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-08-23T02:59:37Z"}, "message": "iq2000.c: Fix comment typos.\n\n\t* config/iq2000/iq2000.c: Fix comment typos.\n\t* config/iq2000/iq2000.md: Likewise.\n\nFrom-SVN: r70727", "tree": {"sha": "a8418f09ffbb1c83d26d161d4e96a885cbffc2d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8418f09ffbb1c83d26d161d4e96a885cbffc2d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2cac216be39311432de514f65afc337794877e10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cac216be39311432de514f65afc337794877e10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cac216be39311432de514f65afc337794877e10", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cac216be39311432de514f65afc337794877e10/comments", "author": null, "committer": null, "parents": [{"sha": "4375e090013d0aafced1ed1804bd155342b95b97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4375e090013d0aafced1ed1804bd155342b95b97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4375e090013d0aafced1ed1804bd155342b95b97"}], "stats": {"total": 13, "additions": 9, "deletions": 4}, "files": [{"sha": "d0b957e3215af502fef592395fc9bc044f868b30", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cac216be39311432de514f65afc337794877e10/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cac216be39311432de514f65afc337794877e10/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2cac216be39311432de514f65afc337794877e10", "patch": "@@ -1,3 +1,8 @@\n+2003-08-22  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/iq2000/iq2000.c: Fix comment typos.\n+\t* config/iq2000/iq2000.md: Likewise.\n+\n 2003-08-22  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/iq2000/iq2000.c: Follow spelling conventions."}, {"sha": "f9a62d28189bfdf0b165144e35e515c807739033", "filename": "gcc/config/iq2000/iq2000.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cac216be39311432de514f65afc337794877e10/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cac216be39311432de514f65afc337794877e10/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.c?ref=2cac216be39311432de514f65afc337794877e10", "patch": "@@ -2697,7 +2697,7 @@ iq2000_output_conditional_branch (rtx insn, rtx *operands, int two_operands_p,\n   /* The kind of comparison we are doing.  */\n   enum rtx_code code = GET_CODE (operands[0]);\n   /* Nonzero if the opcode for the comparison needs a `z' indicating\n-     that it is a comparision against zero.  */\n+     that it is a comparison against zero.  */\n   int need_z_p;\n   /* A string to use in the assembly output to represent the first\n      operand.  */\n@@ -2813,7 +2813,7 @@ iq2000_output_conditional_branch (rtx insn, rtx *operands, int two_operands_p,\n \tchar *c;\n \n \tc = strchr (buffer, '\\0');\n-\t/* Generate the reversed comparision.  This takes four\n+\t/* Generate the reversed comparison.  This takes four\n \t   bytes.  */\n \tif (float_p)\n \t  sprintf (c, \"b%s\\t%%Z2%s\","}, {"sha": "e00794402f2c3443a615d76d8d6f585be5e0303c", "filename": "gcc/config/iq2000/iq2000.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cac216be39311432de514f65afc337794877e10/gcc%2Fconfig%2Fiq2000%2Fiq2000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cac216be39311432de514f65afc337794877e10/gcc%2Fconfig%2Fiq2000%2Fiq2000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.md?ref=2cac216be39311432de514f65afc337794877e10", "patch": "@@ -1006,7 +1006,7 @@\n ;;\tDifferent CC modes are used, based on what type of branch is\n ;;\tdone, so that we can constrain things appropriately.  There\n ;;\tare assumptions in the rest of GCC that break if we fold the\n-;;\toperands into the branchs for integer operations, and use cc0\n+;;\toperands into the branches for integer operations, and use cc0\n ;;\tfor floating point, so we use the fp status register instead.\n ;;\tIf needed, an appropriate temporary is created to hold the\n ;;\tof the integer compare.\n@@ -1093,7 +1093,7 @@\n   [(set_attr \"type\"\t\"branch\")\n    (set_attr \"mode\"\t\"none\")])\n \n-;; Conditional branch on equality comparision.\n+;; Conditional branch on equality comparison.\n \n (define_insn \"branch_equality\"\n   [(set (pc)"}]}