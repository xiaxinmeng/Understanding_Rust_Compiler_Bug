{"sha": "019a922063f26784d5a070d9198a1f937b8a8343", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDE5YTkyMjA2M2YyNjc4NGQ1YTA3MGQ5MTk4YTFmOTM3YjhhODM0Mw==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-04-09T00:16:56Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-04-09T00:16:56Z"}, "message": "Daily bump.", "tree": {"sha": "4e14cad25b9c77a79e63e0ec0fe49b1dcff71d92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e14cad25b9c77a79e63e0ec0fe49b1dcff71d92"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/019a922063f26784d5a070d9198a1f937b8a8343", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/019a922063f26784d5a070d9198a1f937b8a8343", "html_url": "https://github.com/Rust-GCC/gccrs/commit/019a922063f26784d5a070d9198a1f937b8a8343", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/019a922063f26784d5a070d9198a1f937b8a8343/comments", "author": null, "committer": null, "parents": [{"sha": "96292c3e3439aa167ed7ae595f89b8776e705897", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96292c3e3439aa167ed7ae595f89b8776e705897", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96292c3e3439aa167ed7ae595f89b8776e705897"}], "stats": {"total": 568, "additions": 567, "deletions": 1}, "files": [{"sha": "82d4c68b1dad373d151a4c27d3379ede56b934c8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019a922063f26784d5a070d9198a1f937b8a8343/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019a922063f26784d5a070d9198a1f937b8a8343/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=019a922063f26784d5a070d9198a1f937b8a8343", "patch": "@@ -1,3 +1,39 @@\n+2021-04-08  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_xcoff_select_section): Select\n+\tTLS BSS before TLS data.\n+\t* config/rs6000/xcoff.h (ASM_OUTPUT_TLS_COMMON): Use .comm.\n+\n+2021-04-08  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* doc/sourcebuild.texi (stdint_types_mbig_endian): Document.\n+\n+2021-04-08  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* match.pd: Extend vec_cond folds to handle shifts.\n+\n+2021-04-08  Maciej W. Rozycki  <macro@orcam.me.uk>\n+\n+\t* config/vax/vax.md: Fix comment for `*bit<mode>' pattern's\n+\tpeephole.\n+\n+2021-04-08  Alex Coplan  <alex.coplan@arm.com>\n+\n+\tPR target/99647\n+\t* config/arm/iterators.md (MVE_vecs): New.\n+\t(V_elem): Also handle V2DF.\n+\t* config/arm/mve.md (*mve_mov<mode>): Rename to ...\n+\t(*mve_vdup<mode>): ... this. Remove second alternative since\n+\tvec_duplicate of const_int is not canonical RTL, and we don't\n+\twant to match symbol_refs.\n+\t(*mve_vec_duplicate<mode>): Delete (pattern is redundant).\n+\n+2021-04-08  Xionghu Luo  <luoxhu@linux.ibm.com>\n+\n+\t* fold-const.c (fold_single_bit_test): Fix typo.\n+\t* print-rtl.c (print_rtx_insn_vec): Call print_rtl_single\n+\tinstead.\n+\n 2021-04-07  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR tree-optimization/97513"}, {"sha": "e82c93a645d4719cdea2013d47e1011aed9ed28c", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019a922063f26784d5a070d9198a1f937b8a8343/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019a922063f26784d5a070d9198a1f937b8a8343/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=019a922063f26784d5a070d9198a1f937b8a8343", "patch": "@@ -1 +1 @@\n-20210408\n+20210409"}, {"sha": "bccd9db97f71ffd300528a6a0fd2531f18f93301", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019a922063f26784d5a070d9198a1f937b8a8343/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019a922063f26784d5a070d9198a1f937b8a8343/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=019a922063f26784d5a070d9198a1f937b8a8343", "patch": "@@ -1,3 +1,97 @@\n+2021-04-08  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/99042\n+\tPR analyzer/99774\n+\t* engine.cc\n+\t(impl_region_model_context::impl_region_model_context): Add\n+\tuncertainty param and use it to initialize m_uncertainty.\n+\t(impl_region_model_context::get_uncertainty): New.\n+\t(impl_sm_context::get_fndecl_for_call): Add NULL for new\n+\tuncertainty param when constructing impl_region_model_context.\n+\t(impl_sm_context::get_state): Likewise.\n+\t(impl_sm_context::set_next_state): Likewise.\n+\t(impl_sm_context::warn): Likewise.\n+\t(exploded_node::on_stmt): Add uncertainty param\n+\tand use it when constructing impl_region_model_context.\n+\t(exploded_node::on_edge): Add uncertainty param and pass\n+\tto on_edge call.\n+\t(exploded_node::detect_leaks): Create uncertainty_t and pass to\n+\timpl_region_model_context.\n+\t(exploded_graph::get_or_create_node): Create uncertainty_t and\n+\tpass to prune_for_point.\n+\t(maybe_process_run_of_before_supernode_enodes): Create\n+\tuncertainty_t and pass to impl_region_model_context.\n+\t(exploded_graph::process_node): Create uncertainty_t instances and\n+\tpass around as needed.\n+\t* exploded-graph.h\n+\t(impl_region_model_context::impl_region_model_context): Add\n+\tuncertainty param.\n+\t(impl_region_model_context::get_uncertainty): New decl.\n+\t(impl_region_model_context::m_uncertainty): New field.\n+\t(exploded_node::on_stmt): Add uncertainty param.\n+\t(exploded_node::on_edge): Likewise.\n+\t* program-state.cc (sm_state_map::on_liveness_change): Get\n+\tuncertainty from context and use it to unset sm-state from\n+\tsvalues as appropriate.\n+\t(program_state::on_edge): Add uncertainty param and use it when\n+\tconstructing impl_region_model_context.  Fix indentation.\n+\t(program_state::prune_for_point): Add uncertainty param and use it\n+\twhen constructing impl_region_model_context.\n+\t(program_state::detect_leaks): Get any uncertainty from ctxt and\n+\tuse it to get maybe-live svalues for dest_state, rather than\n+\tdefinitely-live ones; use this when determining which svalues\n+\thave leaked.\n+\t(selftest::test_program_state_merging): Create uncertainty_t and\n+\tpass to impl_region_model_context.\n+\t* program-state.h (program_state::on_edge): Add uncertainty param.\n+\t(program_state::prune_for_point): Likewise.\n+\t* region-model-impl-calls.cc (call_details::get_uncertainty): New.\n+\t(region_model::impl_call_memcpy): Pass uncertainty to\n+\tmark_region_as_unknown call.\n+\t(region_model::impl_call_memset): Likewise.\n+\t(region_model::impl_call_strcpy): Likewise.\n+\t* region-model-reachability.cc (reachable_regions::handle_sval):\n+\tAlso add sval to m_mutable_svals.\n+\t* region-model.cc (region_model::on_assignment): Pass any\n+\tuncertainty from ctxt to the store::set_value call.\n+\t(region_model::handle_unrecognized_call): Get any uncertainty from\n+\tctxt and use it to record mutable svalues at the unknown call.\n+\t(region_model::get_reachable_svalues): Add uncertainty param and\n+\tuse it to mark any maybe-bound svalues as being reachable.\n+\t(region_model::set_value): Pass any uncertainty from ctxt to the\n+\tstore::set_value call.\n+\t(region_model::mark_region_as_unknown): Add uncertainty param and\n+\tpass it on to the store::mark_region_as_unknown call.\n+\t(region_model::update_for_call_summary): Add uncertainty param and\n+\tpass it on to the region_model::mark_region_as_unknown call.\n+\t* region-model.h (call_details::get_uncertainty): New decl.\n+\t(region_model::get_reachable_svalues): Add uncertainty param.\n+\t(region_model::mark_region_as_unknown): Add uncertainty param.\n+\t(region_model_context::get_uncertainty): New vfunc.\n+\t(noop_region_model_context::get_uncertainty): New vfunc\n+\timplementation.\n+\t* store.cc (dump_svalue_set): New.\n+\t(uncertainty_t::dump_to_pp): New.\n+\t(uncertainty_t::dump): New.\n+\t(binding_cluster::clobber_region): Pass NULL for uncertainty to\n+\tremove_overlapping_bindings.\n+\t(binding_cluster::mark_region_as_unknown): Add uncertainty param\n+\tand pass it to remove_overlapping_bindings.\n+\t(binding_cluster::remove_overlapping_bindings): Add uncertainty param.\n+\tUse it to record any svalues that were in clobbered bindings.\n+\t(store::set_value): Add uncertainty param.  Pass it to\n+\tbinding_cluster::mark_region_as_unknown when handling symbolic\n+\tregions.\n+\t(store::mark_region_as_unknown): Add uncertainty param and pass it\n+\tto binding_cluster::mark_region_as_unknown.\n+\t(store::remove_overlapping_bindings): Add uncertainty param and\n+\tpass it to binding_cluster::remove_overlapping_bindings.\n+\t* store.h (binding_cluster::mark_region_as_unknown): Add\n+\tuncertainty param.\n+\t(binding_cluster::remove_overlapping_bindings): Likewise.\n+\t(store::set_value): Likewise.\n+\t(store::mark_region_as_unknown): Likewise.\n+\n 2021-04-05  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/99906"}, {"sha": "032a0ffcee845c36669328bd2a300f99f2295b09", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019a922063f26784d5a070d9198a1f937b8a8343/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019a922063f26784d5a070d9198a1f937b8a8343/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=019a922063f26784d5a070d9198a1f937b8a8343", "patch": "@@ -1,3 +1,19 @@\n+2021-04-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-warn.c (do_warn_double_promotion): Fix comment typo,\n+\toccured -> occurred.\n+\t(check_alignment_of_packed_member): Fix a comment typo,\n+\tmemeber -> member.\n+\t(warn_parm_ptrarray_mismatch): Fix comment typos, os -> of\n+\tand onless -> unless.\n+\t(warn_parm_array_mismatch): Fix comment typos, declaratation\n+\t-> declaration and woud -> would.  Fix up comment indentation.\n+\n+2021-04-08  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/99883\n+\t* c.opt (Wmismatched-new-delete): Correct spelling.\n+\n 2021-04-05  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* c-ada-spec.c (is_simple_enum): Minor tweaks."}, {"sha": "a3819b37def429a7121ac2797d07c19faa4d08d7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019a922063f26784d5a070d9198a1f937b8a8343/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019a922063f26784d5a070d9198a1f937b8a8343/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=019a922063f26784d5a070d9198a1f937b8a8343", "patch": "@@ -1,3 +1,65 @@\n+2021-04-08  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/99874\n+\t* constraint.cc (get_normalized_constraints_from_decl): Handle\n+\tregenerated lambdas.\n+\t(satisfy_declaration_constraints): Likewise.  Check for\n+\tdependent args later.\n+\t* cp-tree.h (LAMBDA_EXPR_INSTANTIATED): Replace with ...\n+\t(LAMBDA_EXPR_REGENERATED_FROM): ... this.\n+\t(LAMBDA_EXPR_REGENERATING_TARGS): New.\n+\t(tree_lambda_expr::regenerated_from): New data member.\n+\t(tree_lambda_expr::regenerating_targs): New data member.\n+\t(add_to_template_args): Declare.\n+\t(regenerated_lambda_fn_p): Likewise.\n+\t(most_general_lambda): Likewise.\n+\t* lambda.c (build_lambda_expr): Set LAMBDA_EXPR_REGENERATED_FROM\n+\tand LAMBDA_EXPR_REGENERATING_TARGS.\n+\t* pt.c (add_to_template_args): No longer static.\n+\t(tsubst_function_decl): Unconditionally propagate constraints on\n+\tthe substituted function decl.\n+\t(instantiated_lambda_fn_p): Rename to ...\n+\t(regenerated_lambda_fn_p): ... this.  Check\n+\tLAMBDA_EXPR_REGENERATED_FROM instead of\n+\tLAMBDA_EXPR_INSTANTIATED.\n+\t(most_general_lambda): Define.\n+\t(enclosing_instantiation_of): Adjust after renaming\n+\tinstantiated_lambda_fn_p.\n+\t(tsubst_lambda_expr): Don't set LAMBDA_EXPR_INSTANTIATED.  Set\n+\tLAMBDA_EXPR_REGENERATED_FROM and LAMBDA_EXPR_REGENERATING_TARGS.\n+\tDon't substitute or set constraints on the regenerated lambda.\n+\n+2021-04-08  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/97679\n+\t* pt.c (build_deduction_guide): Document OUTER_ARGS.  Substitute\n+\tthem into the propagated constraints.\n+\n+2021-04-08  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/91849\n+\t* call.c (convert_like_internal): Improve reference diagnostic.\n+\n+2021-04-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/99859\n+\t* constexpr.c (addr_of_non_const_var): New function.\n+\t(cxx_bind_parameters_in_call): Set *non_constant_args to true\n+\teven if cp_walk_tree on arg with addr_of_non_const_var callback\n+\treturns true.\n+\n+2021-04-08  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/94529\n+\t* pt.c (determine_specialization): Improve diagnostic.\n+\n+2021-04-08  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/99844\n+\t* decl.c (build_explicit_specifier): Call\n+\tcheck_for_bare_parameter_packs.\n+\t* except.c (build_noexcept_spec): Likewise.\n+\n 2021-04-07  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/41723"}, {"sha": "293d5ebf091765fe6367fef75d624b887e634368", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019a922063f26784d5a070d9198a1f937b8a8343/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019a922063f26784d5a070d9198a1f937b8a8343/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=019a922063f26784d5a070d9198a1f937b8a8343", "patch": "@@ -1,3 +1,46 @@\n+2021-04-08  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-attribs.cc: Include fold-const.h and opts.h.\n+\t(attr_noreturn_exclusions): Add alloc_size.\n+\t(attr_const_pure_exclusions): Likewise.\n+\t(attr_inline_exclusions): Add target_clones.\n+\t(attr_noinline_exclusions): Rename forceinline to always_inline.\n+\t(attr_target_exclusions): New array.\n+\t(attr_target_clones_exclusions): New array.\n+\t(attr_alloc_exclusions): New array.\n+\t(attr_cold_hot_exclusions): New array.\n+\t(d_langhook_common_attribute_table): Add new D attribute handlers.\n+\t(build_attributes): Update to look for gcc.attributes.  Issue warning\n+\tif not given a struct literal.  Handle void initialized arguments.\n+\t(handle_always_inline_attribute): Remove function.\n+\t(d_handle_noinline_attribute): Don't extract TYPE_LANG_FRONTEND.\n+\t(d_handle_forceinline_attribute): Rename to...\n+\t(d_handle_always_inline_attribute): ...this.  Remove special handling.\n+\t(d_handle_flatten_attribute): Don't extract TYPE_LANG_FRONTEND.\n+\t(d_handle_target_attribute): Likewise.  Warn about empty arguments.\n+\t(d_handle_target_clones_attribute): New function.\n+\t(optimize_args): New static variable.\n+\t(parse_optimize_options): New function.\n+\t(d_handle_optimize_attribute): New function.\n+\t(d_handle_noclone_attribute): Don't extract TYPE_LANG_FRONTEND.\n+\t(d_handle_alias_attribute): Remove function.\n+\t(d_handle_noicf_attribute): New function.\n+\t(d_handle_noipa_attribute): New function.\n+\t(d_handle_section_attribute): Call the handle_generic_attribute target\n+\thook after performing target independent processing.\n+\t(d_handle_symver_attribute): New function.\n+\t(d_handle_noplt_attribute): New function.\n+\t(positional_argument): New function.\n+\t(d_handle_alloc_size_attribute): New function.\n+\t(d_handle_cold_attribute): New function.\n+\t(d_handle_restrict_attribute): New function.\n+\t(d_handle_used_attribute): New function.\n+\t* decl.cc (gcc_attribute_p): Update to look for gcc.attributes.\n+\t(get_symbol_decl): Update decl source location of old prototypes to\n+\tthe new declaration being merged.\n+\t* types.cc (layout_aggregate_members): Apply user defined attributes\n+\ton fields.\n+\n 2021-04-06  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \tPR d/99917"}, {"sha": "5b4ea1b1e821da3af509787d37ac5f9fdee1f526", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019a922063f26784d5a070d9198a1f937b8a8343/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019a922063f26784d5a070d9198a1f937b8a8343/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=019a922063f26784d5a070d9198a1f937b8a8343", "patch": "@@ -1,3 +1,8 @@\n+2021-04-08  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/99883\n+\t* lto-lang.c (lto_post_options): Correct spelling.\n+\n 2021-02-28  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/99304"}, {"sha": "d28b98b6f1fbc61f21f46dc624d9f0c6b24312e3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 136, "deletions": 0, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019a922063f26784d5a070d9198a1f937b8a8343/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019a922063f26784d5a070d9198a1f937b8a8343/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=019a922063f26784d5a070d9198a1f937b8a8343", "patch": "@@ -1,3 +1,139 @@\n+2021-04-08  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* g++.dg/gomp/tls-5.C: Expect tbss failure on AIX.\n+\n+2021-04-08  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/99874\n+\t* g++.dg/cpp2a/concepts-lambda16.C: New test.\n+\t* g++.dg/cpp2a/concepts-lambda17.C: New test.\n+\n+2021-04-08  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/97679\n+\t* g++.dg/cpp2a/concepts-ctad3.C: New test.\n+\n+2021-04-08  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* lib/scanasm.exp (scan-lto-assembler): Update expected name\n+\tof dump file.\n+\n+2021-04-08  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* lib/target-supports.exp\n+\t(check_effective_target_stdint_types_mbig_endian): New proc.\n+\t* gcc.target/aarch64/advsimd-intrinsics/bf16_get-be.c: Require\n+\tstdint_types_mbig_endian.\n+\t* gcc.target/aarch64/advsimd-intrinsics/bfdot-2.c: Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vdot-3-2.c: Likewise.\n+\n+2021-04-08  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/91849\n+\t* g++.dg/conversion/pr66211.C: Adjust diagnostic.\n+\t* g++.dg/conversion/ref7.C: New test.\n+\n+2021-04-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/99859\n+\t* g++.dg/cpp1y/constexpr-99859-1.C: New test.\n+\t* g++.dg/cpp1y/constexpr-99859-2.C: New test.\n+\t* g++.dg/cpp2a/constexpr-new18.C: New test.\n+\t* g++.dg/cpp2a/constexpr-new19.C: New test.\n+\n+2021-04-08  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.dg/vect/pr99102.c: Add -fdump-tree-vect-details.\n+\n+2021-04-08  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/acle/general-c/func_redef_1.c: Remove\n+\t\"was here\" from error message.\n+\t* gcc.target/aarch64/sve/acle/general-c/func_redef_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/general-c/func_redef_3.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/general-c/func_redef_6.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/general-c/type_redef_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/general-c/type_redef_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/general-c/type_redef_3.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/general-c/type_redef_4.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/general-c/type_redef_5.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/general-c/type_redef_6.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/general-c/type_redef_8.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/general-c/type_redef_9.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/general-c/type_redef_10.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/general-c/type_redef_13.c: Likewise.\n+\n+2021-04-08  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/asimd-mull-elem.c: Add +nosve.\n+\t* gcc.target/aarch64/pr98772.c: Likewise.\n+\t* gcc.target/aarch64/simd/vect_su_add_sub.c: Likewise.\n+\n+2021-04-08  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/mul_2.c: Adjust negative constants to avoid\n+\tconversion to shifts and adds.\n+\n+2021-04-08  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/99042\n+\tPR analyzer/99774\n+\t* gcc.dg/analyzer/pr99042.c: New test.\n+\t* gcc.dg/analyzer/pr99774-1.c: New test.\n+\t* gcc.dg/analyzer/pr99774-2.c: New test.\n+\n+2021-04-08  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* gdc.dg/gdc108.d: Update test.\n+\t* gdc.dg/gdc142.d: Likewise.\n+\t* gdc.dg/pr90136a.d: Likewise.\n+\t* gdc.dg/pr90136b.d: Likewise.\n+\t* gdc.dg/pr90136c.d: Likewise.\n+\t* gdc.dg/pr95173.d: Likewise.\n+\t* gdc.dg/attr_allocsize1.d: New test.\n+\t* gdc.dg/attr_allocsize2.d: New test.\n+\t* gdc.dg/attr_alwaysinline1.d: New test.\n+\t* gdc.dg/attr_cold1.d: New test.\n+\t* gdc.dg/attr_exclusions1.d: New test.\n+\t* gdc.dg/attr_exclusions2.d: New test.\n+\t* gdc.dg/attr_flatten1.d: New test.\n+\t* gdc.dg/attr_module.d: New test.\n+\t* gdc.dg/attr_noclone1.d: New test.\n+\t* gdc.dg/attr_noicf1.d: New test.\n+\t* gdc.dg/attr_noinline1.d: New test.\n+\t* gdc.dg/attr_noipa1.d: New test.\n+\t* gdc.dg/attr_noplt1.d: New test.\n+\t* gdc.dg/attr_optimize1.d: New test.\n+\t* gdc.dg/attr_optimize2.d: New test.\n+\t* gdc.dg/attr_optimize3.d: New test.\n+\t* gdc.dg/attr_optimize4.d: New test.\n+\t* gdc.dg/attr_restrict1.d: New test.\n+\t* gdc.dg/attr_section1.d: New test.\n+\t* gdc.dg/attr_symver1.d: New test.\n+\t* gdc.dg/attr_target1.d: New test.\n+\t* gdc.dg/attr_targetclones1.d: New test.\n+\t* gdc.dg/attr_used1.d: New test.\n+\t* gdc.dg/attr_used2.d: New test.\n+\t* gdc.dg/attr_weak1.d: New test.\n+\t* gdc.dg/imports/attributes.d: New test.\n+\n+2021-04-08  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/94529\n+\t* g++.dg/template/mem-spec2.C: New test.\n+\n+2021-04-08  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/99844\n+\t* g++.dg/cpp2a/explicit16.C: Use c++20.\n+\t* g++.dg/cpp0x/noexcept66.C: New test.\n+\t* g++.dg/cpp2a/explicit17.C: New test.\n+\n+2021-04-08  Alex Coplan  <alex.coplan@arm.com>\n+\n+\tPR target/99647\n+\t* gcc.c-torture/compile/pr99647.c: New test.\n+\n 2021-04-07  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/41723"}, {"sha": "807664cedbc4e185d641831ea31ed3a83fb90b89", "filename": "libphobos/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019a922063f26784d5a070d9198a1f937b8a8343/libphobos%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019a922063f26784d5a070d9198a1f937b8a8343/libphobos%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2FChangeLog?ref=019a922063f26784d5a070d9198a1f937b8a8343", "patch": "@@ -1,3 +1,13 @@\n+2021-04-08  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* libdruntime/Makefile.am (DRUNTIME_DSOURCES): Add\n+\t  gcc/attributes.d.\n+\t* libdruntime/Makefile.in: Regenerate.\n+\t* libdruntime/gcc/attribute.d: Deprecate module, publicly import\n+\tgcc.attributes.\n+\t* libdruntime/gcc/deh.d: Update imports.\n+\t* libdruntime/gcc/attributes.d: New file.\n+\n 2021-04-06  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* libdruntime/MERGE: Merge upstream druntime 1134b710."}, {"sha": "3a4f044400bdfe902c5b674156cddaa18ecd8699", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019a922063f26784d5a070d9198a1f937b8a8343/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019a922063f26784d5a070d9198a1f937b8a8343/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=019a922063f26784d5a070d9198a1f937b8a8343", "patch": "@@ -1,3 +1,153 @@\n+2021-04-08  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/basic_string.h: Tweak doxygen comment.\n+\n+2021-04-08  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/std/ranges (__detail::find): Define.\n+\t(split_view::_OuterIter::operator++): Apply proposed resolution\n+\tof LWG 3505.\n+\t* testsuite/std/ranges/adaptors/split.cc (test10): New test.\n+\n+2021-04-08  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/std/ranges (__detail::find_if): Simplify.\n+\t(__detail::find_if_not): Likewise.\n+\t(__detail::min): Remove.\n+\t(__detail::mismatch): Simplify.\n+\t(take_view::size): Use std::min instead of __detail::min.\n+\n+2021-04-08  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/std/ranges (__detail::__returnable_element): New\n+\tconcept.\n+\t(elements_view): Use this concept in its constraints.  Add\n+\tmissing private access specifier.\n+\t(elements_view::_S_get_element): Define as per LWG 3502.\n+\t(elements_view::operator*, elements_view::operator[]): Use\n+\t_S_get_element.\n+\t(elements_view::operator++): Remove unnecessary constraint\n+\tas per LWG 3492.\n+\t* testsuite/std/ranges/adaptors/elements.cc (test05): New test.\n+\n+2021-04-08  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/Makefile.am (stamp-pdf-doxygen): Also grep for\n+\tout-of-memory error in log file.\n+\t* doc/Makefile.in: Regenerate.\n+\n+2021-04-08  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* configure: Regenerate.\n+\n+2021-04-08  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/random.h: Fix doxygen group commands.\n+\t* include/bits/regex_constants.h: Likewise.\n+\t* include/tr1/random.h: Likewise.\n+\n+2021-04-08  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/hashtable.h (_Hashtable::_S_nothrow_move()):\n+\tNew function to determine noexcept-specifier for move\n+\tconstructors.\n+\t(_Hashtable): Use _S_nothrow_move() on move constructors.\n+\t* testsuite/23_containers/unordered_map/cons/noexcept_move_construct.cc:\n+\tCorrect static assertion message.\n+\t* testsuite/23_containers/unordered_multimap/cons/noexcept_move_construct.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/unordered_multiset/cons/noexcept_move_construct.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/unordered_set/cons/noexcept_move_construct.cc:\n+\tLikewise.\n+\n+2021-04-08  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR libstdc++/98384\n+\t* testsuite/20_util/to_chars/long_double.cc: Don't run the test\n+\ton targets without a large long double.  XFAIL the execution on\n+\ttargets with a non-conforming printf.\n+\n+2021-04-08  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR libstdc++/99433\n+\t* include/std/ranges (__adaptor::__maybe_refwrap): Remove.\n+\t(__adaptor::__adaptor_invocable): New concept.\n+\t(__adaptor::__adaptor_partial_app_viable): New concept.\n+\t(__adaptor::_RangeAdaptorClosure): Rewrite, turning it into a\n+\tnon-template base class.\n+\t(__adaptor::_RangeAdaptor): Rewrite, turning it into a CRTP base\n+\tclass template.\n+\t(__adaptor::_Partial): New class template that represents\n+\tpartial application of a range adaptor non-closure.\n+\t(__adaptor::__pipe_invocable): New concept.\n+\t(__adaptor::_Pipe): New class template.\n+\t(__detail::__can_ref_view): New concept.\n+\t(__detail::__can_subrange): New concept.\n+\t(all): Replace the lambda here with ...\n+\t(_All): ... this functor.  Add appropriate constraints.\n+\t(__detail::__can_filter_view): New concept.\n+\t(filter, _Filter): As in all/_All.\n+\t(__detail::__can_transform): New concept.\n+\t(transform, _Transform): As in all/_All.\n+\t(__detail::__can_take_view): New concept.\n+\t(take, _Take): As in all/_All.\n+\t(__detail::__can_take_while_view): New concept.\n+\t(take_while, _TakeWhile): As in all/_All.\n+\t(__detail::__can_drop_view): New concept.\n+\t(drop, _Drop): As in all/_All.\n+\t(__detail::__can_drop_while_view): New concept.\n+\t(drop_while, _DropWhile): As in all/_All.\n+\t(__detail::__can_join_view): New concept.\n+\t(join, _Join): As in all/_All.\n+\t(__detail::__can_split_view): New concept.\n+\t(split, _Split): As in all/_All.  Rename template parameter\n+\t_Fp to _Pattern.\n+\t(__detail::__already_common): New concept.\n+\t(__detail::__can_common_view): New concept.\n+\t(common, _Common): As in all/_All.\n+\t(__detail::__can_reverse_view): New concept.\n+\t(reverse, _Reverse): As in all/_All.\n+\t(__detail::__can_elements_view): New concept.\n+\t(elements, _Elements): As in all/_All.\n+\t(keys, values): Adjust.\n+\t* testsuite/std/ranges/adaptors/99433.cc: New test.\n+\t* testsuite/std/ranges/adaptors/all.cc: No longer expect that\n+\tadding empty range adaptor closure objects to a pipeline doesn't\n+\tincrease the size of the pipeline.\n+\t(test05): New test.\n+\t* testsuite/std/ranges/adaptors/common.cc (test03): New test.\n+\t* testsuite/std/ranges/adaptors/drop.cc (test09): New test.\n+\t* testsuite/std/ranges/adaptors/drop_while.cc (test04): New test.\n+\t* testsuite/std/ranges/adaptors/elements.cc (test04): New test.\n+\t* testsuite/std/ranges/adaptors/filter.cc (test06): New test.\n+\t* testsuite/std/ranges/adaptors/join.cc (test09): New test.\n+\t* testsuite/std/ranges/adaptors/p2281.cc: New test.\n+\t* testsuite/std/ranges/adaptors/reverse.cc (test07): New test.\n+\t* testsuite/std/ranges/adaptors/split.cc (test01, test04):\n+\tAdjust.\n+\t(test09): New test.\n+\t* testsuite/std/ranges/adaptors/split_neg.cc (test01): Adjust\n+\texpected error message.\n+\t(test02): Likewise.  Extend test.\n+\t* testsuite/std/ranges/adaptors/take.cc (test06): New test.\n+\t* testsuite/std/ranges/adaptors/take_while.cc (test05): New test.\n+\t* testsuite/std/ranges/adaptors/transform.cc (test07, test08):\n+\tNew test.\n+\n+2021-04-08  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/string_view: Adjust Doxygen @file comment.\n+\n+2021-04-08  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/type_traits (is_scoped_enum<T>): Constrain partial\n+\tspecialization to not match incomplete enum types. Use a\n+\trequires-expression instead of instantiating is_convertible.\n+\t(is_scoped_enum<const T>): Add as workaround for PR c++/99968.\n+\t* testsuite/20_util/is_scoped_enum/value.cc: Check with\n+\tincomplete types and opaque-enum-declarations.\n+\n 2021-04-07  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/99805"}, {"sha": "4bb93da0aed6673eeb428b723571681704fea224", "filename": "maintainer-scripts/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/019a922063f26784d5a070d9198a1f937b8a8343/maintainer-scripts%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/019a922063f26784d5a070d9198a1f937b8a8343/maintainer-scripts%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/maintainer-scripts%2FChangeLog?ref=019a922063f26784d5a070d9198a1f937b8a8343", "patch": "@@ -1,3 +1,17 @@\n+2021-04-08  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* generate_libstdcxx_web_docs: Add --disable-multilib to\n+\tconfigure command.\n+\n+2021-04-08  Martin Liska  <mliska@suse.cz>\n+\n+\t* branch_changer.py: Fix wrongly converted assert.\n+\n+2021-04-08  Martin Liska  <mliska@suse.cz>\n+\n+\t* branch_changer.py: Modernize and fix flake8 issues.\n+\t* setup.cfg: New file.\n+\n 2020-12-16  Jakub Jelinek  <jakub@redhat.com>\n \n \t* update_version_git: Put BASEDIR into /sourceware/snapshot-tmp/gcc"}]}