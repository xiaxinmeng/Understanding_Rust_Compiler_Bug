{"sha": "1daa5dd836cc86ffce0f483df7f5ddbea30034cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWRhYTVkZDgzNmNjODZmZmNlMGY0ODNkZjdmNWRkYmVhMzAwMzRjZA==", "commit": {"author": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1994-10-12T16:44:14Z"}, "committer": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1994-10-12T16:44:14Z"}, "message": "Cast pointer arguments to bzero and bcopy to char *.\n\nFrom-SVN: r8262", "tree": {"sha": "e4c1ae57ad71ef524b5bdcc67d8c5703c8a1eff7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4c1ae57ad71ef524b5bdcc67d8c5703c8a1eff7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1daa5dd836cc86ffce0f483df7f5ddbea30034cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1daa5dd836cc86ffce0f483df7f5ddbea30034cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1daa5dd836cc86ffce0f483df7f5ddbea30034cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1daa5dd836cc86ffce0f483df7f5ddbea30034cd/comments", "author": null, "committer": null, "parents": [{"sha": "1c69865d5bfff305c220b3032978f0c5324c8adf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c69865d5bfff305c220b3032978f0c5324c8adf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c69865d5bfff305c220b3032978f0c5324c8adf"}], "stats": {"total": 30, "additions": 16, "deletions": 14}, "files": [{"sha": "606f5eb0a4157a6e1002fb5b3bde0f0bda8e5f30", "filename": "gcc/cp/call.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1daa5dd836cc86ffce0f483df7f5ddbea30034cd/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1daa5dd836cc86ffce0f483df7f5ddbea30034cd/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=1daa5dd836cc86ffce0f483df7f5ddbea30034cd", "patch": "@@ -718,7 +718,7 @@ compute_conversion_costs (function, tta_in, cp, arglen)\n   cp->h.code = 0;\n   cp->h.distance = 0;\n   cp->h.int_penalty = 0;\n-  bzero (cp->harshness,\n+  bzero ((char *) cp->harshness,\n \t (cp->h_len + 1) * sizeof (struct harshness_code));\n \n   while (ttf && tta)\n@@ -2059,7 +2059,7 @@ build_method_call (instance, name, parms, basetype_path, flags)\n \t  candidates\n \t    = (struct candidate *) alloca ((ever_seen+1)\n \t\t\t\t\t   * sizeof (struct candidate));\n-\t  bzero (candidates, (ever_seen + 1) * sizeof (struct candidate));\n+\t  bzero ((char *) candidates, (ever_seen + 1) * sizeof (struct candidate));\n \t  cp = candidates;\n \t  len = list_length (parms);\n \t  ever_seen = 0;\n@@ -2775,7 +2775,7 @@ build_overload_call_real (fnname, parms, flags, final_cp, buildxxx)\n     {\n       candidates\n \t= (struct candidate *)alloca ((length+1) * sizeof (struct candidate));\n-      bzero (candidates, (length + 1) * sizeof (struct candidate));\n+      bzero ((char *) candidates, (length + 1) * sizeof (struct candidate));\n     }\n \n   cp = candidates;"}, {"sha": "c16b6f2015882ebe7c0357a3e4dca61312cddd31", "filename": "gcc/cp/class.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1daa5dd836cc86ffce0f483df7f5ddbea30034cd/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1daa5dd836cc86ffce0f483df7f5ddbea30034cd/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=1daa5dd836cc86ffce0f483df7f5ddbea30034cd", "patch": "@@ -942,7 +942,7 @@ add_method (type, fields, method)\n \t\t\t\t   * sizeof (char *)\n \t\t\t\t + len * sizeof (tree));\n \t\t  tmp_vec = (tree) obstack_base (ob);\n-\t\t  bcopy (method_vec, tmp_vec,\n+\t\t  bcopy ((char *) method_vec, (char *) tmp_vec,\n \t\t\t (sizeof (struct tree_common)\n \t\t\t  + tree_code_length[(int) TREE_VEC] * sizeof (char *)\n \t\t\t  + (len-1) * sizeof (tree)));\n@@ -1338,7 +1338,7 @@ finish_base_struct (t, b, t_binfo)\n   tree binfos = BINFO_BASETYPES (t_binfo);\n   int i, n_baseclasses = binfos ? TREE_VEC_LENGTH (binfos) : 0;\n   int first_vfn_base_index = -1;\n-  bzero (b, sizeof (struct base_info));\n+  bzero ((char *) b, sizeof (struct base_info));\n \n   for (i = 0; i < n_baseclasses; i++)\n     {\n@@ -1680,8 +1680,8 @@ finish_struct_bits (t, max_has_virtual)\n       tree *tmp;\n       int i;\n \n-      bzero (first_conversions, sizeof (first_conversions));\n-      bzero (last_conversions, sizeof (last_conversions));\n+      bzero ((char *) first_conversions, sizeof (first_conversions));\n+      bzero ((char *) last_conversions, sizeof (last_conversions));\n       for (tmp = &TREE_VEC_ELT (method_vec, 1);\n \t   tmp != TREE_VEC_END (method_vec); tmp += 1)\n \t{\n@@ -2057,7 +2057,7 @@ duplicate_tag_error (t)\n       int interface_only = CLASSTYPE_INTERFACE_ONLY (t);\n       int interface_unknown = CLASSTYPE_INTERFACE_UNKNOWN (t);\n \n-      bzero (TYPE_LANG_SPECIFIC (t), sizeof (struct lang_type));\n+      bzero ((char *) TYPE_LANG_SPECIFIC (t), sizeof (struct lang_type));\n       BINFO_BASETYPES(binfo) = NULL_TREE;\n \n       CLASSTYPE_AS_LIST (t) = as_list;"}, {"sha": "e3c3f0da08010d1988d3b46fc4bea05525d4648c", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1daa5dd836cc86ffce0f483df7f5ddbea30034cd/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1daa5dd836cc86ffce0f483df7f5ddbea30034cd/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=1daa5dd836cc86ffce0f483df7f5ddbea30034cd", "patch": "@@ -1481,7 +1481,7 @@ tsubst (t, args, nargs, in_decl)\n       {\n \tint len = TREE_VEC_LENGTH (t), need_new = 0, i;\n \ttree *elts = (tree *) alloca (len * sizeof (tree));\n-\tbzero (elts, len * sizeof (tree));\n+\tbzero ((char *) elts, len * sizeof (tree));\n \n \tfor (i = 0; i < len; i++)\n \t  {\n@@ -1930,7 +1930,7 @@ reinit_parse_for_template (yychar, d1, d2)\n   if (!template_info)\n     {\n       template_info = (struct template_info *) permalloc (sizeof (struct template_info));\n-      bzero (template_info, sizeof (struct template_info));\n+      bzero ((char *) template_info, sizeof (struct template_info));\n       DECL_TEMPLATE_INFO (d2) = template_info;\n     }\n   template_info->filename = input_filename;\n@@ -1980,7 +1980,7 @@ type_unification (tparms, targs, parms, args, nsubsts, subr)\n   my_friendly_assert (ntparms > 0, 292);\n \n   if (!subr)\n-    bzero (targs, sizeof (tree) * ntparms);\n+    bzero ((char *) targs, sizeof (tree) * ntparms);\n \n   while (parms\n \t && parms != void_list_node"}, {"sha": "967b00a4b66b76ada82e8bc696bd351d376e34a6", "filename": "gcc/cp/search.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1daa5dd836cc86ffce0f483df7f5ddbea30034cd/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1daa5dd836cc86ffce0f483df7f5ddbea30034cd/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=1daa5dd836cc86ffce0f483df7f5ddbea30034cd", "patch": "@@ -236,7 +236,7 @@ my_new_memoized_entry (chain)\n   struct memoized_entry *p =\n     (struct memoized_entry *)obstack_alloc (&type_obstack_entries,\n \t\t\t\t\t    sizeof (struct memoized_entry));\n-  bzero (p, sizeof (struct memoized_entry));\n+  bzero ((char *) p, sizeof (struct memoized_entry));\n   MEMOIZED_CHAIN (p) = chain;\n   MEMOIZED_UID (p) = ++my_memoized_entry_counter;\n   return p;"}, {"sha": "c28e2c15b1e81c526de85efa88e2b41ada955099", "filename": "gcc/cp/spew.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1daa5dd836cc86ffce0f483df7f5ddbea30034cd/gcc%2Fcp%2Fspew.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1daa5dd836cc86ffce0f483df7f5ddbea30034cd/gcc%2Fcp%2Fspew.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fspew.c?ref=1daa5dd836cc86ffce0f483df7f5ddbea30034cd", "patch": "@@ -202,8 +202,10 @@ shift_tokens (n)\n \t\t\t\t* sizeof (struct token));\n \t  /* This move does not rely on the system being able to handle\n \t     overlapping moves.  */\n-\t  bcopy (nth_token (0), tmp, old_token_count * sizeof (struct token));\n-\t  bcopy (tmp, nth_token (n), old_token_count * sizeof (struct token));\n+\t  bcopy ((char *) nth_token (0), tmp,\n+\t\t old_token_count * sizeof (struct token));\n+\t  bcopy (tmp, (char *) nth_token (n),\n+\t\t old_token_count * sizeof (struct token));\n \t}\n       first_token = 0;\n     }"}]}