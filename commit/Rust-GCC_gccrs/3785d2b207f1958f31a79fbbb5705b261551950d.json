{"sha": "3785d2b207f1958f31a79fbbb5705b261551950d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzc4NWQyYjIwN2YxOTU4ZjMxYTc5ZmJiYjU3MDViMjYxNTUxOTUwZA==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-04-05T17:37:31Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-04-14T12:43:38Z"}, "message": "d: Add TARGET_D_REGISTER_CPU_TARGET_INFO\n\nThis implements `__traits(getTargetInfo, \"floatAbi\")' for all targets\nthat have D support files.\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64-d.c (aarch64_d_handle_target_float_abi): New\n\tfunction.\n\t(aarch64_d_register_target_info): New function.\n\t* config/aarch64/aarch64-protos.h (aarch64_d_register_target_info):\n\tDeclare.\n\t* config/aarch64/aarch64.h (TARGET_D_REGISTER_CPU_TARGET_INFO):\n\tDefine.\n\t* config/arm/arm-d.c (arm_d_handle_target_float_abi): New function.\n\t(arm_d_register_target_info): New function.\n\t* config/arm/arm-protos.h (arm_d_register_target_info): Declare.\n\t* config/arm/arm.h (TARGET_D_REGISTER_CPU_TARGET_INFO): Define.\n\t* config/i386/i386-d.c (ix86_d_handle_target_float_abi): New function.\n\t(ix86_d_register_target_info): New function.\n\t* config/i386/i386-protos.h (ix86_d_register_target_info): Declare.\n\t* config/i386/i386.h (TARGET_D_REGISTER_CPU_TARGET_INFO): Define.\n\t* config/mips/mips-d.c (mips_d_handle_target_float_abi): New function.\n\t(mips_d_register_target_info): New function.\n\t* config/mips/mips-protos.h (mips_d_register_target_info): Declare.\n\t* config/mips/mips.h (TARGET_D_REGISTER_CPU_TARGET_INFO): Define.\n\t* config/pa/pa-d.c (pa_d_handle_target_float_abi): New function.\n\t(pa_d_register_target_info): New function.\n\t* config/pa/pa-protos.h (pa_d_register_target_info): Declare.\n\t* config/pa/pa.h (TARGET_D_REGISTER_CPU_TARGET_INFO): Define.\n\t* config/riscv/riscv-d.c (riscv_d_handle_target_float_abi): New\n\tfunction.\n\t(riscv_d_register_target_info): New function.\n\t* config/riscv/riscv-protos.h (riscv_d_register_target_info): Declare.\n\t* config/riscv/riscv.h (TARGET_D_REGISTER_CPU_TARGET_INFO): Define.\n\t* config/rs6000/rs6000-d.c (rs6000_d_handle_target_float_abi): New\n\tfunction.\n\t(rs6000_d_register_target_info): New function.\n\t* config/rs6000/rs6000-protos.h (rs6000_d_register_target_info):\n\tDeclare.\n\t* config/rs6000/rs6000.h (TARGET_D_REGISTER_CPU_TARGET_INFO): Define.\n\t* config/s390/s390-d.c (s390_d_handle_target_float_abi): New function.\n\t(s390_d_register_target_info): New function.\n\t* config/s390/s390-protos.h (s390_d_register_target_info): Declare.\n\t* config/s390/s390.h (TARGET_D_REGISTER_CPU_TARGET_INFO): Define.\n\t* config/sparc/sparc-d.c (sparc_d_handle_target_float_abi): New\n\tfunction.\n\t(sparc_d_register_target_info): New function.\n\t* config/sparc/sparc-protos.h (sparc_d_register_target_info): Declare.\n\t* config/sparc/sparc.h (TARGET_D_REGISTER_CPU_TARGET_INFO): Define.\n\t* doc/tm.texi: Regenerate.\n\t* doc/tm.texi.in (D language and ABI): Add @hook for\n\tTARGET_D_REGISTER_CPU_TARGET_INFO.\n\ngcc/d/ChangeLog:\n\n\t* d-target.cc (Target::_init): Call new targetdm hook to register CPU\n\tspecific target info keys.\n\t* d-target.def (d_register_cpu_target_info): New hook.", "tree": {"sha": "dc09047937f2331c1288f8f0e1ee71c77a7d90ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc09047937f2331c1288f8f0e1ee71c77a7d90ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3785d2b207f1958f31a79fbbb5705b261551950d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3785d2b207f1958f31a79fbbb5705b261551950d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3785d2b207f1958f31a79fbbb5705b261551950d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3785d2b207f1958f31a79fbbb5705b261551950d/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d253a6f7bb1748405bd9d12967f40dc19c8f77c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d253a6f7bb1748405bd9d12967f40dc19c8f77c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d253a6f7bb1748405bd9d12967f40dc19c8f77c4"}], "stats": {"total": 343, "additions": 335, "deletions": 8}, "files": [{"sha": "416bb7c8033ac7ec14ff7a09305bf9d4537e71b6", "filename": "gcc/config/aarch64/aarch64-d.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3785d2b207f1958f31a79fbbb5705b261551950d/gcc%2Fconfig%2Faarch64%2Faarch64-d.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3785d2b207f1958f31a79fbbb5705b261551950d/gcc%2Fconfig%2Faarch64%2Faarch64-d.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-d.c?ref=3785d2b207f1958f31a79fbbb5705b261551950d", "patch": "@@ -31,3 +31,26 @@ aarch64_d_target_versions (void)\n   d_add_builtin_version (\"AArch64\");\n   d_add_builtin_version (\"D_HardFloat\");\n }\n+\n+/* Handle a call to `__traits(getTargetInfo, \"floatAbi\")'.  */\n+\n+static tree\n+aarch64_d_handle_target_float_abi (void)\n+{\n+  const char *abi = \"hard\";\n+\n+  return build_string_literal (strlen (abi) + 1, abi);\n+}\n+\n+/* Implement TARGET_D_REGISTER_CPU_TARGET_INFO.  */\n+\n+void\n+aarch64_d_register_target_info (void)\n+{\n+  const struct d_target_info_spec handlers[] = {\n+    { \"floatAbi\", aarch64_d_handle_target_float_abi },\n+    { NULL, NULL },\n+  };\n+\n+  d_add_target_info_handlers (handlers);\n+}"}, {"sha": "c2033387384a4949d79503d04107de6d80e1c70b", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3785d2b207f1958f31a79fbbb5705b261551950d/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3785d2b207f1958f31a79fbbb5705b261551950d/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=3785d2b207f1958f31a79fbbb5705b261551950d", "patch": "@@ -1011,6 +1011,7 @@ std::string aarch64_get_extension_string_for_isa_flags (uint64_t, uint64_t);\n \n /* Defined in aarch64-d.c  */\n extern void aarch64_d_target_versions (void);\n+extern void aarch64_d_register_target_info (void);\n \n rtl_opt_pass *make_pass_fma_steering (gcc::context *);\n rtl_opt_pass *make_pass_track_speculation (gcc::context *);"}, {"sha": "bfffbcd6abff6da909ed5128649f5acab62efd49", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3785d2b207f1958f31a79fbbb5705b261551950d/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3785d2b207f1958f31a79fbbb5705b261551950d/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=3785d2b207f1958f31a79fbbb5705b261551950d", "patch": "@@ -26,8 +26,9 @@\n #define TARGET_CPU_CPP_BUILTINS()\t\\\n   aarch64_cpu_cpp_builtins (pfile)\n \n-/* Target CPU versions for D.  */\n+/* Target hooks for D language.  */\n #define TARGET_D_CPU_VERSIONS aarch64_d_target_versions\n+#define TARGET_D_REGISTER_CPU_TARGET_INFO aarch64_d_register_target_info\n \n \f\n "}, {"sha": "5f43ef9b17964c3175a13f875af216c21cc219be", "filename": "gcc/config/arm/arm-d.c", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3785d2b207f1958f31a79fbbb5705b261551950d/gcc%2Fconfig%2Farm%2Farm-d.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3785d2b207f1958f31a79fbbb5705b261551950d/gcc%2Fconfig%2Farm%2Farm-d.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-d.c?ref=3785d2b207f1958f31a79fbbb5705b261551950d", "patch": "@@ -53,3 +53,45 @@ arm_d_target_versions (void)\n   else if (TARGET_HARD_FLOAT)\n     d_add_builtin_version (\"D_HardFloat\");\n }\n+\n+/* Handle a call to `__traits(getTargetInfo, \"floatAbi\")'.  */\n+\n+static tree\n+arm_d_handle_target_float_abi (void)\n+{\n+  const char *abi;\n+\n+  switch (arm_float_abi)\n+    {\n+    case ARM_FLOAT_ABI_HARD:\n+      abi = \"hard\";\n+      break;\n+\n+    case ARM_FLOAT_ABI_SOFT:\n+      abi = \"soft\";\n+      break;\n+\n+    case ARM_FLOAT_ABI_SOFTFP:\n+      abi = \"softfp\";\n+      break;\n+\n+    default:\n+      abi = \"\";\n+      break;\n+    }\n+\n+  return build_string_literal (strlen (abi) + 1, abi);\n+}\n+\n+/* Implement TARGET_D_REGISTER_CPU_TARGET_INFO.  */\n+\n+void\n+arm_d_register_target_info (void)\n+{\n+  const struct d_target_info_spec handlers[] = {\n+    { \"floatAbi\", arm_d_handle_target_float_abi },\n+    { NULL, NULL },\n+  };\n+\n+  d_add_target_info_handlers (handlers);\n+}"}, {"sha": "25215417751892539dd7403104e2663b99df4055", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3785d2b207f1958f31a79fbbb5705b261551950d/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3785d2b207f1958f31a79fbbb5705b261551950d/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=3785d2b207f1958f31a79fbbb5705b261551950d", "patch": "@@ -397,6 +397,7 @@ extern void arm_cpu_cpp_builtins (struct cpp_reader *);\n \n /* Defined in arm-d.c  */\n extern void arm_d_target_versions (void);\n+extern void arm_d_register_target_info (void);\n \n extern bool arm_is_constant_pool_ref (rtx);\n "}, {"sha": "c70af57b5f67915e69457f57f7e27e9845d0c82d", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3785d2b207f1958f31a79fbbb5705b261551950d/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3785d2b207f1958f31a79fbbb5705b261551950d/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=3785d2b207f1958f31a79fbbb5705b261551950d", "patch": "@@ -47,8 +47,9 @@ extern char arm_arch_name[];\n /* Target CPU builtins.  */\n #define TARGET_CPU_CPP_BUILTINS() arm_cpu_cpp_builtins (pfile)\n \n-/* Target CPU versions for D.  */\n+/* Target hooks for D language.  */\n #define TARGET_D_CPU_VERSIONS arm_d_target_versions\n+#define TARGET_D_REGISTER_CPU_TARGET_INFO arm_d_register_target_info\n \n #include \"config/arm/arm-opts.h\"\n "}, {"sha": "da5958c3e7d03856d4e82701993de2021af0cc7f", "filename": "gcc/config/i386/i386-d.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3785d2b207f1958f31a79fbbb5705b261551950d/gcc%2Fconfig%2Fi386%2Fi386-d.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3785d2b207f1958f31a79fbbb5705b261551950d/gcc%2Fconfig%2Fi386%2Fi386-d.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-d.c?ref=3785d2b207f1958f31a79fbbb5705b261551950d", "patch": "@@ -45,6 +45,34 @@ ix86_d_target_versions (void)\n     d_add_builtin_version (\"D_SoftFloat\");\n }\n \n+/* Handle a call to `__traits(getTargetInfo, \"floatAbi\")'.  */\n+\n+static tree\n+ix86_d_handle_target_float_abi (void)\n+{\n+  const char *abi;\n+\n+  if (! (TARGET_80387 || TARGET_FLOAT_RETURNS_IN_80387))\n+    abi = \"soft\";\n+  else\n+    abi = \"hard\";\n+\n+  return build_string_literal (strlen (abi) + 1, abi);\n+}\n+\n+/* Implement TARGET_D_REGISTER_CPU_TARGET_INFO.  */\n+\n+void\n+ix86_d_register_target_info (void)\n+{\n+  const struct d_target_info_spec handlers[] = {\n+    { \"floatAbi\", ix86_d_handle_target_float_abi },\n+    { NULL, NULL },\n+  };\n+\n+  d_add_target_info_handlers (handlers);\n+}\n+\n /* Implement TARGET_D_HAS_STDCALL_CONVENTION for x86 targets.  */\n \n bool"}, {"sha": "7782cf1163f5c2aa1cd49a586588ebd8b571ca40", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3785d2b207f1958f31a79fbbb5705b261551950d/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3785d2b207f1958f31a79fbbb5705b261551950d/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=3785d2b207f1958f31a79fbbb5705b261551950d", "patch": "@@ -264,6 +264,7 @@ extern void ix86_register_pragmas (void);\n \n /* In i386-d.c  */\n extern void ix86_d_target_versions (void);\n+extern void ix86_d_register_target_info (void);\n extern bool ix86_d_has_stdcall_convention (unsigned int *, unsigned int *);\n \n /* In winnt.c  */"}, {"sha": "97700d797a73bc051deddc3632aa11a3b19e0071", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3785d2b207f1958f31a79fbbb5705b261551950d/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3785d2b207f1958f31a79fbbb5705b261551950d/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=3785d2b207f1958f31a79fbbb5705b261551950d", "patch": "@@ -804,6 +804,7 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n \n /* Target hooks for D language.  */\n #define TARGET_D_CPU_VERSIONS ix86_d_target_versions\n+#define TARGET_D_REGISTER_CPU_TARGET_INFO ix86_d_register_target_info\n #define TARGET_D_HAS_STDCALL_CONVENTION ix86_d_has_stdcall_convention\n \n #ifndef CC1_SPEC"}, {"sha": "e03f48602ef040fe1ea1897ffb7a24055e0e7e0a", "filename": "gcc/config/mips/mips-d.c", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3785d2b207f1958f31a79fbbb5705b261551950d/gcc%2Fconfig%2Fmips%2Fmips-d.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3785d2b207f1958f31a79fbbb5705b261551950d/gcc%2Fconfig%2Fmips%2Fmips-d.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-d.c?ref=3785d2b207f1958f31a79fbbb5705b261551950d", "patch": "@@ -56,3 +56,33 @@ mips_d_target_versions (void)\n       d_add_builtin_version (\"D_SoftFloat\");\n     }\n }\n+\n+/* Handle a call to `__traits(getTargetInfo, \"floatAbi\")'.  */\n+\n+static tree\n+mips_d_handle_target_float_abi (void)\n+{\n+  const char *abi;\n+\n+  if (TARGET_HARD_FLOAT_ABI)\n+    abi = \"hard\";\n+  else if (TARGET_SOFT_FLOAT_ABI)\n+    abi = \"soft\";\n+  else\n+    abi = \"\";\n+\n+  return build_string_literal (strlen (abi) + 1, abi);\n+}\n+\n+/* Implement TARGET_D_REGISTER_CPU_TARGET_INFO.  */\n+\n+void\n+mips_d_register_target_info (void)\n+{\n+  const struct d_target_info_spec handlers[] = {\n+    { \"floatAbi\", mips_d_handle_target_float_abi },\n+    { NULL, NULL },\n+  };\n+\n+  d_add_target_info_handlers (handlers);\n+}"}, {"sha": "2cf4ed50292e570e38fad2e8b649199a6693e5e1", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3785d2b207f1958f31a79fbbb5705b261551950d/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3785d2b207f1958f31a79fbbb5705b261551950d/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=3785d2b207f1958f31a79fbbb5705b261551950d", "patch": "@@ -388,5 +388,6 @@ extern void mips_expand_vec_cond_expr (machine_mode, machine_mode, rtx *);\n \n /* Routines implemented in mips-d.c  */\n extern void mips_d_target_versions (void);\n+extern void mips_d_register_target_info (void);\n \n #endif /* ! GCC_MIPS_PROTOS_H */"}, {"sha": "47aac9d3d61245c4d3df5dbd0bbcd833190de7c3", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3785d2b207f1958f31a79fbbb5705b261551950d/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3785d2b207f1958f31a79fbbb5705b261551950d/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=3785d2b207f1958f31a79fbbb5705b261551950d", "patch": "@@ -658,8 +658,9 @@ struct mips_cpu_info {\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n-/* Target CPU versions for D.  */\n+/* Target hooks for D language.  */\n #define TARGET_D_CPU_VERSIONS mips_d_target_versions\n+#define TARGET_D_REGISTER_CPU_TARGET_INFO mips_d_register_target_info\n \n /* Default target_flags if no switches are specified  */\n "}, {"sha": "41b2f1848e77dcbbc35ab44b53f549f5aef6ae6e", "filename": "gcc/config/pa/pa-d.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3785d2b207f1958f31a79fbbb5705b261551950d/gcc%2Fconfig%2Fpa%2Fpa-d.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3785d2b207f1958f31a79fbbb5705b261551950d/gcc%2Fconfig%2Fpa%2Fpa-d.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-d.c?ref=3785d2b207f1958f31a79fbbb5705b261551950d", "patch": "@@ -39,3 +39,31 @@ pa_d_target_versions (void)\n   else\n     d_add_builtin_version (\"D_HardFloat\");\n }\n+\n+/* Handle a call to `__traits(getTargetInfo, \"floatAbi\")'.  */\n+\n+static tree\n+pa_d_handle_target_float_abi (void)\n+{\n+  const char *abi;\n+\n+  if (TARGET_DISABLE_FPREGS || TARGET_SOFT_FLOAT)\n+    abi = \"soft\";\n+  else\n+    abi = \"hard\";\n+\n+  return build_string_literal (strlen (abi) + 1, abi);\n+}\n+\n+/* Implement TARGET_D_REGISTER_CPU_TARGET_INFO.  */\n+\n+void\n+pa_d_register_target_info (void)\n+{\n+  const struct d_target_info_spec handlers[] = {\n+    { \"floatAbi\", pa_d_handle_target_float_abi },\n+    { NULL, NULL },\n+  };\n+\n+  d_add_target_info_handlers (handlers);\n+}"}, {"sha": "5bf6fef496827222b74f5d9114e33e2aa3c69640", "filename": "gcc/config/pa/pa-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3785d2b207f1958f31a79fbbb5705b261551950d/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3785d2b207f1958f31a79fbbb5705b261551950d/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-protos.h?ref=3785d2b207f1958f31a79fbbb5705b261551950d", "patch": "@@ -115,3 +115,4 @@ extern const int pa_magic_milli[];\n \n /* Routines implemented in pa-d.c  */\n extern void pa_d_target_versions (void);\n+extern void pa_d_register_target_info (void);"}, {"sha": "fbb96045a51e9e8d4a6d81ee803fed6b03f3c368", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3785d2b207f1958f31a79fbbb5705b261551950d/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3785d2b207f1958f31a79fbbb5705b261551950d/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=3785d2b207f1958f31a79fbbb5705b261551950d", "patch": "@@ -1302,8 +1302,9 @@ do {\t\t\t\t\t\t\t\t\t     \\\n \n #define NEED_INDICATE_EXEC_STACK 0\n \n-/* Target CPU versions for D.  */\n+/* Target hooks for D language.  */\n #define TARGET_D_CPU_VERSIONS pa_d_target_versions\n+#define TARGET_D_REGISTER_CPU_TARGET_INFO pa_d_register_target_info\n \n /* Output default function prologue for hpux.  */\n #define TARGET_ASM_FUNCTION_PROLOGUE pa_output_function_prologue"}, {"sha": "8883cec2847ad66174db5204f49710db83f3e16a", "filename": "gcc/config/riscv/riscv-d.c", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3785d2b207f1958f31a79fbbb5705b261551950d/gcc%2Fconfig%2Friscv%2Friscv-d.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3785d2b207f1958f31a79fbbb5705b261551950d/gcc%2Fconfig%2Friscv%2Friscv-d.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-d.c?ref=3785d2b207f1958f31a79fbbb5705b261551950d", "patch": "@@ -39,3 +39,49 @@ riscv_d_target_versions (void)\n   else\n     d_add_builtin_version (\"D_SoftFloat\");\n }\n+\n+/* Handle a call to `__traits(getTargetInfo, \"floatAbi\")'.  */\n+\n+static tree\n+riscv_d_handle_target_float_abi (void)\n+{\n+  const char *abi;\n+\n+  switch (riscv_abi)\n+    {\n+    case ABI_ILP32E:\n+    case ABI_ILP32:\n+    case ABI_LP64:\n+      abi = \"soft\";\n+      break;\n+\n+    case ABI_ILP32F:\n+    case ABI_LP64F:\n+      abi = \"single\";\n+      break;\n+\n+    case ABI_ILP32D:\n+    case ABI_LP64D:\n+      abi = \"double\";\n+      break;\n+\n+    default:\n+      abi = \"\";\n+      break;\n+    }\n+\n+  return build_string_literal (strlen (abi) + 1, abi);\n+}\n+\n+/* Implement TARGET_D_REGISTER_CPU_TARGET_INFO.  */\n+\n+void\n+riscv_d_register_target_info (void)\n+{\n+  const struct d_target_info_spec handlers[] = {\n+    { \"floatAbi\", riscv_d_handle_target_float_abi },\n+    { NULL, NULL },\n+  };\n+\n+  d_add_target_info_handlers (handlers);\n+}"}, {"sha": "43d7224d69419f7a2f456ebfd96a8fc52aa6243c", "filename": "gcc/config/riscv/riscv-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3785d2b207f1958f31a79fbbb5705b261551950d/gcc%2Fconfig%2Friscv%2Friscv-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3785d2b207f1958f31a79fbbb5705b261551950d/gcc%2Fconfig%2Friscv%2Friscv-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-protos.h?ref=3785d2b207f1958f31a79fbbb5705b261551950d", "patch": "@@ -80,6 +80,7 @@ void riscv_cpu_cpp_builtins (cpp_reader *);\n \n /* Routines implemented in riscv-d.c  */\n extern void riscv_d_target_versions (void);\n+extern void riscv_d_register_target_info (void);\n \n /* Routines implemented in riscv-builtins.c.  */\n extern void riscv_atomic_assign_expand_fenv (tree *, tree *, tree *);"}, {"sha": "d17096e1dfa12a29109b98a3b632096fc2da2b65", "filename": "gcc/config/riscv/riscv.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3785d2b207f1958f31a79fbbb5705b261551950d/gcc%2Fconfig%2Friscv%2Friscv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3785d2b207f1958f31a79fbbb5705b261551950d/gcc%2Fconfig%2Friscv%2Friscv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.h?ref=3785d2b207f1958f31a79fbbb5705b261551950d", "patch": "@@ -27,8 +27,9 @@ along with GCC; see the file COPYING3.  If not see\n /* Target CPU builtins.  */\n #define TARGET_CPU_CPP_BUILTINS() riscv_cpu_cpp_builtins (pfile)\n \n-/* Target CPU versions for D.  */\n+/* Target hooks for D language.  */\n #define TARGET_D_CPU_VERSIONS riscv_d_target_versions\n+#define TARGET_D_REGISTER_CPU_TARGET_INFO riscv_d_register_target_info\n \n #ifdef TARGET_BIG_ENDIAN_DEFAULT\n #define DEFAULT_ENDIAN_SPEC    \"b\""}, {"sha": "755de42733bfc992f3eb18a79802b2c809a47d7f", "filename": "gcc/config/rs6000/rs6000-d.c", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3785d2b207f1958f31a79fbbb5705b261551950d/gcc%2Fconfig%2Frs6000%2Frs6000-d.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3785d2b207f1958f31a79fbbb5705b261551950d/gcc%2Fconfig%2Frs6000%2Frs6000-d.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-d.c?ref=3785d2b207f1958f31a79fbbb5705b261551950d", "patch": "@@ -45,3 +45,33 @@ rs6000_d_target_versions (void)\n       d_add_builtin_version (\"D_SoftFloat\");\n     }\n }\n+\n+/* Handle a call to `__traits(getTargetInfo, \"floatAbi\")'.  */\n+\n+static tree\n+rs6000_d_handle_target_float_abi (void)\n+{\n+  const char *abi;\n+\n+  if (TARGET_HARD_FLOAT)\n+    abi = \"hard\";\n+  else if (TARGET_SOFT_FLOAT)\n+    abi = \"soft\";\n+  else\n+    abi = \"\";\n+\n+  return build_string_literal (strlen (abi) + 1, abi);\n+}\n+\n+/* Implement TARGET_D_REGISTER_CPU_TARGET_INFO.  */\n+\n+void\n+rs6000_d_register_target_info (void)\n+{\n+  const struct d_target_info_spec handlers[] = {\n+    { \"floatAbi\", rs6000_d_handle_target_float_abi },\n+    { NULL, NULL },\n+  };\n+\n+  d_add_target_info_handlers (handlers);\n+}"}, {"sha": "a06a147c3390abd0a8a4b5ce20421ba451167b14", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3785d2b207f1958f31a79fbbb5705b261551950d/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3785d2b207f1958f31a79fbbb5705b261551950d/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=3785d2b207f1958f31a79fbbb5705b261551950d", "patch": "@@ -298,6 +298,7 @@ extern void (*rs6000_target_modify_macros_ptr) (bool, HOST_WIDE_INT,\n \n /* Declare functions in rs6000-d.c  */\n extern void rs6000_d_target_versions (void);\n+extern void rs6000_d_register_target_info (void);\n \n #ifdef NO_DOLLAR_IN_LABEL\n const char * rs6000_xcoff_strip_dollar (const char *);"}, {"sha": "164d359b724ca97129bf15d5f7835ccc402045a5", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3785d2b207f1958f31a79fbbb5705b261551950d/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3785d2b207f1958f31a79fbbb5705b261551950d/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=3785d2b207f1958f31a79fbbb5705b261551950d", "patch": "@@ -641,8 +641,9 @@ extern unsigned char rs6000_recip_bits[];\n #define TARGET_CPU_CPP_BUILTINS() \\\n   rs6000_cpu_cpp_builtins (pfile)\n \n-/* Target CPU versions for D.  */\n+/* Target hooks for D language.  */\n #define TARGET_D_CPU_VERSIONS rs6000_d_target_versions\n+#define TARGET_D_REGISTER_CPU_TARGET_INFO rs6000_d_register_target_info\n \n /* This is used by rs6000_cpu_cpp_builtins to indicate the byte order\n    we're compiling for.  Some configurations may need to override it.  */"}, {"sha": "1a990636aa130f7baba7775a53f7a5ef14793fe8", "filename": "gcc/config/s390/s390-d.c", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3785d2b207f1958f31a79fbbb5705b261551950d/gcc%2Fconfig%2Fs390%2Fs390-d.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3785d2b207f1958f31a79fbbb5705b261551950d/gcc%2Fconfig%2Fs390%2Fs390-d.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-d.c?ref=3785d2b207f1958f31a79fbbb5705b261551950d", "patch": "@@ -41,3 +41,33 @@ s390_d_target_versions (void)\n   else if (TARGET_HARD_FLOAT)\n     d_add_builtin_version (\"D_HardFloat\");\n }\n+\n+/* Handle a call to `__traits(getTargetInfo, \"floatAbi\")'.  */\n+\n+static tree\n+s390_d_handle_target_float_abi (void)\n+{\n+  const char *abi;\n+\n+  if (TARGET_HARD_FLOAT)\n+    abi = \"hard\";\n+  else if (TARGET_SOFT_FLOAT)\n+    abi = \"soft\";\n+  else\n+    abi = \"\";\n+\n+  return build_string_literal (strlen (abi) + 1, abi);\n+}\n+\n+/* Implement TARGET_D_REGISTER_CPU_TARGET_INFO.  */\n+\n+void\n+s390_d_register_target_info (void)\n+{\n+  const struct d_target_info_spec handlers[] = {\n+    { \"floatAbi\", s390_d_handle_target_float_abi },\n+    { NULL, NULL },\n+  };\n+\n+  d_add_target_info_handlers (handlers);\n+}"}, {"sha": "289e018cf0fdb0bf35c93cdbaafbe946de5387b2", "filename": "gcc/config/s390/s390-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3785d2b207f1958f31a79fbbb5705b261551950d/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3785d2b207f1958f31a79fbbb5705b261551950d/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-protos.h?ref=3785d2b207f1958f31a79fbbb5705b261551950d", "patch": "@@ -173,6 +173,7 @@ extern bool s390_const_operand_ok (tree, int, int, tree);\n \n /* s390-d.c routines */\n extern void s390_d_target_versions (void);\n+extern void s390_d_register_target_info (void);\n \n /* Pass management.  */\n namespace gcc { class context; }"}, {"sha": "3b87616042047bd49624e515405fb7199af46cf7", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3785d2b207f1958f31a79fbbb5705b261551950d/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3785d2b207f1958f31a79fbbb5705b261551950d/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=3785d2b207f1958f31a79fbbb5705b261551950d", "patch": "@@ -247,8 +247,9 @@ enum processor_flags\n /* Target CPU builtins.  */\n #define TARGET_CPU_CPP_BUILTINS() s390_cpu_cpp_builtins (pfile)\n \n-/* Target CPU versions for D.  */\n+/* Target hooks for D language.  */\n #define TARGET_D_CPU_VERSIONS s390_d_target_versions\n+#define TARGET_D_REGISTER_CPU_TARGET_INFO s390_d_register_target_info\n \n #ifdef DEFAULT_TARGET_64BIT\n #define TARGET_DEFAULT     (MASK_64BIT | MASK_ZARCH | MASK_HARD_DFP\t\\"}, {"sha": "cfb8daee25e86259cfaa6664cfd4a600b09eff06", "filename": "gcc/config/sparc/sparc-d.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3785d2b207f1958f31a79fbbb5705b261551950d/gcc%2Fconfig%2Fsparc%2Fsparc-d.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3785d2b207f1958f31a79fbbb5705b261551950d/gcc%2Fconfig%2Fsparc%2Fsparc-d.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc-d.c?ref=3785d2b207f1958f31a79fbbb5705b261551950d", "patch": "@@ -48,3 +48,31 @@ sparc_d_target_versions (void)\n       d_add_builtin_version (\"SPARC_SoftFloat\");\n     }\n }\n+\n+/* Handle a call to `__traits(getTargetInfo, \"floatAbi\")'.  */\n+\n+static tree\n+sparc_d_handle_target_float_abi (void)\n+{\n+  const char *abi;\n+\n+  if (TARGET_FPU)\n+    abi = \"hard\";\n+  else\n+    abi = \"soft\";\n+\n+  return build_string_literal (strlen (abi) + 1, abi);\n+}\n+\n+/* Implement TARGET_D_REGISTER_CPU_TARGET_INFO.  */\n+\n+void\n+sparc_d_register_target_info (void)\n+{\n+  const struct d_target_info_spec handlers[] = {\n+    { \"floatAbi\", sparc_d_handle_target_float_abi },\n+    { NULL, NULL },\n+  };\n+\n+  d_add_target_info_handlers (handlers);\n+}"}, {"sha": "ad875cc07f2939e6e6d48f34bf50d0f917c74909", "filename": "gcc/config/sparc/sparc-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3785d2b207f1958f31a79fbbb5705b261551950d/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3785d2b207f1958f31a79fbbb5705b261551950d/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h?ref=3785d2b207f1958f31a79fbbb5705b261551950d", "patch": "@@ -113,5 +113,6 @@ extern rtl_opt_pass *make_pass_work_around_errata (gcc::context *);\n \n /* Routines implemented in sparc-d.c  */\n extern void sparc_d_target_versions (void);\n+extern void sparc_d_register_target_info (void);\n \n #endif /* __SPARC_PROTOS_H__ */"}, {"sha": "48345753b6f2d86d4921c7b71d9b46d693baab8f", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3785d2b207f1958f31a79fbbb5705b261551950d/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3785d2b207f1958f31a79fbbb5705b261551950d/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=3785d2b207f1958f31a79fbbb5705b261551950d", "patch": "@@ -27,8 +27,9 @@ along with GCC; see the file COPYING3.  If not see\n \n #define TARGET_CPU_CPP_BUILTINS() sparc_target_macros ()\n \n-/* Target CPU versions for D.  */\n+/* Target hooks for D language.  */\n #define TARGET_D_CPU_VERSIONS sparc_d_target_versions\n+#define TARGET_D_REGISTER_CPU_TARGET_INFO sparc_d_register_target_info\n \n /* Specify this in a cover file to provide bi-architecture (32/64) support.  */\n /* #define SPARC_BI_ARCH */"}, {"sha": "d576b74af1c0df4df3bea8dbed27554b2af57149", "filename": "gcc/d/d-target.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3785d2b207f1958f31a79fbbb5705b261551950d/gcc%2Fd%2Fd-target.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3785d2b207f1958f31a79fbbb5705b261551950d/gcc%2Fd%2Fd-target.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-target.cc?ref=3785d2b207f1958f31a79fbbb5705b261551950d", "patch": "@@ -198,6 +198,7 @@ Target::_init (const Param &)\n \n   /* Initialize target info tables, the keys required by the language are added\n      last, so that the OS and CPU handlers can override.  */\n+  targetdm.d_register_cpu_target_info ();\n   d_add_target_info_handlers (d_language_target_info);\n }\n "}, {"sha": "cd0397c15774f58f2dba11a1c9accdacbf4128f4", "filename": "gcc/d/d-target.def", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3785d2b207f1958f31a79fbbb5705b261551950d/gcc%2Fd%2Fd-target.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3785d2b207f1958f31a79fbbb5705b261551950d/gcc%2Fd%2Fd-target.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-target.def?ref=3785d2b207f1958f31a79fbbb5705b261551950d", "patch": "@@ -46,6 +46,18 @@ relating to the target operating system.\",\n  void, (void),\n  hook_void_void)\n \n+/* getTargetInfo keys relating to the target CPU.  */\n+DEFHOOK\n+(d_register_cpu_target_info,\n+ \"Register all target information keys relating to the target CPU using the\\n\\\n+function @code{d_add_target_info_handlers}, which takes a\\n\\\n+@samp{struct d_target_info_spec} (defined in @file{d/d-target.h}).  The keys\\n\\\n+added by this hook are made available at compile time by the\\n\\\n+@code{__traits(getTargetInfo)} extension, the result is an expression\\n\\\n+describing the requested target information.\",\n+ void, (void),\n+ hook_void_void)\n+\n /* ModuleInfo section name and brackets.  */\n DEFHOOKPOD\n (d_minfo_section,"}, {"sha": "6201df9a67d602206146c2434b9bd8d41dd5d8ae", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3785d2b207f1958f31a79fbbb5705b261551950d/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3785d2b207f1958f31a79fbbb5705b261551950d/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=3785d2b207f1958f31a79fbbb5705b261551950d", "patch": "@@ -10808,6 +10808,15 @@ Similarly to @code{TARGET_D_CPU_VERSIONS}, but is used for versions\n relating to the target operating system.\n @end deftypefn\n \n+@deftypefn {D Target Hook} void TARGET_D_REGISTER_CPU_TARGET_INFO (void)\n+Register all target information keys relating to the target CPU using the\n+function @code{d_add_target_info_handlers}, which takes a\n+@samp{struct d_target_info_spec} (defined in @file{d/d-target.h}).  The keys\n+added by this hook are made available at compile time by the\n+@code{__traits(getTargetInfo)} extension, the result is an expression\n+describing the requested target information.\n+@end deftypefn\n+\n @deftypevr {D Target Hook} {const char *} TARGET_D_MINFO_SECTION\n Contains the name of the section in which module info references should be\n placed.  This section is expected to be bracketed by two symbols to indicate"}, {"sha": "bde57585b03d0b5a54e5b20b2ffdc1eac0919960", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3785d2b207f1958f31a79fbbb5705b261551950d/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3785d2b207f1958f31a79fbbb5705b261551950d/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=3785d2b207f1958f31a79fbbb5705b261551950d", "patch": "@@ -7357,6 +7357,8 @@ floating-point support; they are not included in this mechanism.\n \n @hook TARGET_D_OS_VERSIONS\n \n+@hook TARGET_D_REGISTER_CPU_TARGET_INFO\n+\n @hook TARGET_D_MINFO_SECTION\n \n @hook TARGET_D_MINFO_START_NAME"}]}