{"sha": "73f397d429016727961c2c4a9ff99cf2fc4ee7b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzNmMzk3ZDQyOTAxNjcyNzk2MWMyYzRhOWZmOTljZjJmYzRlZTdiMw==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2005-07-05T17:50:24Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2005-07-05T17:50:24Z"}, "message": "re PR c/22013 (ICE in gimple_add_tmp_var, at gimplify.c:535)\n\n\tPR c/22013\n\tPR c/22098\n\t* langhooks.h (struct lang_hooks): Add expr_to_decl.\n\t* langhooks.c (lhd_expr_to_decl): New.\n\t* langhooks-def.h (lhd_expr_to_decl, LANG_HOOKS_EXPR_TO_DECL):\n\tNew.\n\t(LANG_HOOKS_INITIALIZER): Update.\n\t* tree.c (recompute_tree_invarant_for_addr_expr): Call\n\texpr_to_decl langhook.\n\t* c-tree.h (c_expr_to_decl): Declare.\n\t* c-typeck.c (c_expr_to_decl): New.\n\t(build_unary_op): Do not handle ADDR_EXPR of COMPOUND_LITERAL_EXPR\n\tspecially.\n\t* c-objc-common.h (LANG_HOOKS_EXPR_TO_DECL): Define.\n\ntestsuite:\n\t* gcc.c-torture/compile/pr22013-1.c,\n\tgcc.c-torture/execute/pr22098-1.c,\n\tgcc.c-torture/execute/pr22098-2.c,\n\tgcc.c-torture/execute/pr22098-3.c: New tests.\n\nFrom-SVN: r101630", "tree": {"sha": "577db0c08701372c3b91ab562c53ebd97999043a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/577db0c08701372c3b91ab562c53ebd97999043a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73f397d429016727961c2c4a9ff99cf2fc4ee7b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73f397d429016727961c2c4a9ff99cf2fc4ee7b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73f397d429016727961c2c4a9ff99cf2fc4ee7b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73f397d429016727961c2c4a9ff99cf2fc4ee7b3/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "692a7aa3a5aea69f4f771b8a56f6aac9866fe383", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/692a7aa3a5aea69f4f771b8a56f6aac9866fe383", "html_url": "https://github.com/Rust-GCC/gccrs/commit/692a7aa3a5aea69f4f771b8a56f6aac9866fe383"}], "stats": {"total": 126, "additions": 123, "deletions": 3}, "files": [{"sha": "e03f97a2e82e6600266e848bdcfd082f0bd954ec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73f397d429016727961c2c4a9ff99cf2fc4ee7b3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73f397d429016727961c2c4a9ff99cf2fc4ee7b3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=73f397d429016727961c2c4a9ff99cf2fc4ee7b3", "patch": "@@ -1,3 +1,20 @@\n+2005-07-05  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\tPR c/22013\n+\tPR c/22098\n+\t* langhooks.h (struct lang_hooks): Add expr_to_decl.\n+\t* langhooks.c (lhd_expr_to_decl): New.\n+\t* langhooks-def.h (lhd_expr_to_decl, LANG_HOOKS_EXPR_TO_DECL):\n+\tNew.\n+\t(LANG_HOOKS_INITIALIZER): Update.\n+\t* tree.c (recompute_tree_invarant_for_addr_expr): Call\n+\texpr_to_decl langhook.\n+\t* c-tree.h (c_expr_to_decl): Declare.\n+\t* c-typeck.c (c_expr_to_decl): New.\n+\t(build_unary_op): Do not handle ADDR_EXPR of COMPOUND_LITERAL_EXPR\n+\tspecially.\n+\t* c-objc-common.h (LANG_HOOKS_EXPR_TO_DECL): Define.\n+\n 2005-07-05  Joseph S. Myers  <joseph@codesourcery.com>\n \n \tPR c/22308"}, {"sha": "69212599612a8faf1bb4bbf580882854e5583139", "filename": "gcc/c-objc-common.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73f397d429016727961c2c4a9ff99cf2fc4ee7b3/gcc%2Fc-objc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73f397d429016727961c2c4a9ff99cf2fc4ee7b3/gcc%2Fc-objc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-objc-common.h?ref=73f397d429016727961c2c4a9ff99cf2fc4ee7b3", "patch": "@@ -117,6 +117,8 @@ extern void c_initialize_diagnostics (diagnostic_context *);\n #define LANG_HOOKS_REGISTER_BUILTIN_TYPE c_register_builtin_type\n #undef LANG_HOOKS_TO_TARGET_CHARSET\n #define LANG_HOOKS_TO_TARGET_CHARSET c_common_to_target_charset\n+#undef LANG_HOOKS_EXPR_TO_DECL\n+#define LANG_HOOKS_EXPR_TO_DECL c_expr_to_decl\n \n /* The C front end's scoping structure is very different from\n    that expected by the language-independent code; it is best"}, {"sha": "3266ceccbdf14e6e9b57162bf32991e85c76d917", "filename": "gcc/c-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73f397d429016727961c2c4a9ff99cf2fc4ee7b3/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73f397d429016727961c2c4a9ff99cf2fc4ee7b3/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=73f397d429016727961c2c4a9ff99cf2fc4ee7b3", "patch": "@@ -573,6 +573,7 @@ extern tree c_finish_goto_label (tree);\n extern tree c_finish_goto_ptr (tree);\n extern void c_begin_vm_scope (unsigned int);\n extern void c_end_vm_scope (unsigned int);\n+extern tree c_expr_to_decl (tree, bool *, bool *, bool *);\n \n /* Set to 0 at beginning of a function definition, set to 1 if\n    a return statement that specifies a return value is seen.  */"}, {"sha": "ab72ceea1200875985bfd9285fd82b6ad9dc67f4", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73f397d429016727961c2c4a9ff99cf2fc4ee7b3/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73f397d429016727961c2c4a9ff99cf2fc4ee7b3/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=73f397d429016727961c2c4a9ff99cf2fc4ee7b3", "patch": "@@ -2790,9 +2790,6 @@ build_unary_op (enum tree_code code, tree xarg, int flag)\n \n       val = build1 (ADDR_EXPR, argtype, arg);\n \n-      if (TREE_CODE (arg) == COMPOUND_LITERAL_EXPR)\n-\tTREE_INVARIANT (val) = TREE_CONSTANT (val) = 1;\n-\n       return val;\n \n     default:\n@@ -8142,3 +8139,24 @@ c_objc_common_truthvalue_conversion (tree expr)\n      leaving those to give errors later?  */\n   return c_common_truthvalue_conversion (expr);\n }\n+\f\n+\n+/* Convert EXPR to a contained DECL, updating *TC, *TI and *SE as\n+   required.  */\n+\n+tree\n+c_expr_to_decl (tree expr, bool *tc ATTRIBUTE_UNUSED,\n+\t\tbool *ti ATTRIBUTE_UNUSED, bool *se)\n+{\n+  if (TREE_CODE (expr) == COMPOUND_LITERAL_EXPR)\n+    {\n+      tree decl = COMPOUND_LITERAL_EXPR_DECL (expr);\n+      /* Executing a compound literal inside a function reinitializes\n+\t it.  */\n+      if (!TREE_STATIC (decl))\n+\t*se = true;\n+      return decl;\n+    }\n+  else\n+    return expr;\n+}"}, {"sha": "cd9a98e647989d88e6f16dfdf96f4c95f7138029", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73f397d429016727961c2c4a9ff99cf2fc4ee7b3/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73f397d429016727961c2c4a9ff99cf2fc4ee7b3/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=73f397d429016727961c2c4a9ff99cf2fc4ee7b3", "patch": "@@ -69,6 +69,7 @@ extern const char *lhd_comdat_group (tree);\n extern tree lhd_expr_size (tree);\n extern size_t lhd_tree_size (enum tree_code);\n extern HOST_WIDE_INT lhd_to_target_charset (HOST_WIDE_INT);\n+extern tree lhd_expr_to_decl (tree, bool *, bool *, bool *);\n \n /* Declarations of default tree inlining hooks.  */\n extern tree lhd_tree_inlining_walk_subtrees (tree *, int *, walk_tree_fn,\n@@ -123,6 +124,7 @@ extern int lhd_gimplify_expr (tree *, tree *, tree *);\n #define LANG_HOOKS_TREE_SIZE\t\tlhd_tree_size\n #define LANG_HOOKS_TYPES_COMPATIBLE_P\tlhd_types_compatible_p\n #define LANG_HOOKS_BUILTIN_FUNCTION\tbuiltin_function\n+#define LANG_HOOKS_EXPR_TO_DECL\t\tlhd_expr_to_decl\n #define LANG_HOOKS_TO_TARGET_CHARSET\tlhd_to_target_charset\n \n #define LANG_HOOKS_FUNCTION_INIT\tlhd_do_nothing_f\n@@ -299,6 +301,7 @@ extern tree lhd_make_node (enum tree_code);\n   LANG_HOOKS_GIMPLIFY_EXPR, \\\n   LANG_HOOKS_FOLD_OBJ_TYPE_REF, \\\n   LANG_HOOKS_BUILTIN_FUNCTION, \\\n+  LANG_HOOKS_EXPR_TO_DECL, \\\n }\n \n #endif /* GCC_LANG_HOOKS_DEF_H */"}, {"sha": "5f3fb4be65ec4dac09b26a5cd41c9fb317433c6a", "filename": "gcc/langhooks.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73f397d429016727961c2c4a9ff99cf2fc4ee7b3/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73f397d429016727961c2c4a9ff99cf2fc4ee7b3/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=73f397d429016727961c2c4a9ff99cf2fc4ee7b3", "patch": "@@ -543,3 +543,10 @@ lhd_to_target_charset (HOST_WIDE_INT c)\n {\n   return c;\n }\n+\n+tree\n+lhd_expr_to_decl (tree expr, bool *tc ATTRIBUTE_UNUSED,\n+\t\t  bool *ti ATTRIBUTE_UNUSED, bool *se ATTRIBUTE_UNUSED)\n+{\n+  return expr;\n+}"}, {"sha": "9ec07ad71f88b954af10812490cc5e413aa293c3", "filename": "gcc/langhooks.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73f397d429016727961c2c4a9ff99cf2fc4ee7b3/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73f397d429016727961c2c4a9ff99cf2fc4ee7b3/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=73f397d429016727961c2c4a9ff99cf2fc4ee7b3", "patch": "@@ -412,6 +412,12 @@ struct lang_hooks\n \t\t\t    enum built_in_class bt_class,\n \t\t\t    const char *library_name, tree attrs);\n \n+  /* Called by recompute_tree_invarant_for_addr_expr to go from EXPR\n+     to a contained expression or DECL, possibly updating *TC, *TI or\n+     *SE if in the process TREE_CONSTANT, TREE_INVARIANT or\n+     TREE_SIDE_EFFECTS need updating.  */\n+  tree (*expr_to_decl) (tree expr, bool *tc, bool *ti, bool *se);\n+\n   /* Whenever you add entries here, make sure you adjust langhooks-def.h\n      and langhooks.c accordingly.  */\n };"}, {"sha": "e598f6e508869e2a81ac81d1e57138eab2eeb2ba", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73f397d429016727961c2c4a9ff99cf2fc4ee7b3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73f397d429016727961c2c4a9ff99cf2fc4ee7b3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=73f397d429016727961c2c4a9ff99cf2fc4ee7b3", "patch": "@@ -1,3 +1,12 @@\n+2005-07-05  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\tPR c/22013\n+\tPR c/22098\n+\t* gcc.c-torture/compile/pr22013-1.c,\n+\tgcc.c-torture/execute/pr22098-1.c,\n+\tgcc.c-torture/execute/pr22098-2.c,\n+\tgcc.c-torture/execute/pr22098-3.c: New tests.\n+\n 2005-07-05  Joseph S. Myers  <joseph@codesourcery.com>\n \n \tPR c/22308"}, {"sha": "1dd0adcffc6d249229e679435e7f635db5ee36b4", "filename": "gcc/testsuite/gcc.c-torture/compile/pr22013-1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73f397d429016727961c2c4a9ff99cf2fc4ee7b3/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr22013-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73f397d429016727961c2c4a9ff99cf2fc4ee7b3/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr22013-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr22013-1.c?ref=73f397d429016727961c2c4a9ff99cf2fc4ee7b3", "patch": "@@ -0,0 +1,11 @@\n+typedef unsigned short W;\n+typedef const W *P;\n+\n+extern void g(P);\n+\n+void\n+f ()\n+{\n+  const P s = (const W []){ 'R' };\n+  g (s);\n+}"}, {"sha": "142530f62c120a0b40ad119fa275fbbd94399e90", "filename": "gcc/testsuite/gcc.c-torture/execute/pr22098-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73f397d429016727961c2c4a9ff99cf2fc4ee7b3/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr22098-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73f397d429016727961c2c4a9ff99cf2fc4ee7b3/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr22098-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr22098-1.c?ref=73f397d429016727961c2c4a9ff99cf2fc4ee7b3", "patch": "@@ -0,0 +1,14 @@\n+extern void abort (void);\n+extern void exit (int);\n+typedef __SIZE_TYPE__ size_t;\n+int\n+main (void)\n+{\n+  int a = 0;\n+  int *p;\n+  size_t b;\n+  b = (size_t)(p = &(int []){0, 1, 2}[++a]);\n+  if (a != 1 || *p != 1 || *(int *)b != 1)\n+    abort ();\n+  exit (0);\n+}"}, {"sha": "249647dc5705d4841b83fab9ff0e9e6de24048ff", "filename": "gcc/testsuite/gcc.c-torture/execute/pr22098-2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73f397d429016727961c2c4a9ff99cf2fc4ee7b3/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr22098-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73f397d429016727961c2c4a9ff99cf2fc4ee7b3/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr22098-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr22098-2.c?ref=73f397d429016727961c2c4a9ff99cf2fc4ee7b3", "patch": "@@ -0,0 +1,14 @@\n+extern void abort (void);\n+extern void exit (int);\n+typedef __SIZE_TYPE__ size_t;\n+int\n+main (void)\n+{\n+  int a = 0;\n+  int *p;\n+  size_t b;\n+  b = (size_t)(p = &(int []){0, 1, 2}[1]);\n+  if (*p != 1 || *(int *)b != 1)\n+    abort ();\n+  exit (0);\n+}"}, {"sha": "4c8a1c62ce05240dc089469bed23ecee905b2a07", "filename": "gcc/testsuite/gcc.c-torture/execute/pr22098-3.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73f397d429016727961c2c4a9ff99cf2fc4ee7b3/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr22098-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73f397d429016727961c2c4a9ff99cf2fc4ee7b3/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr22098-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr22098-3.c?ref=73f397d429016727961c2c4a9ff99cf2fc4ee7b3", "patch": "@@ -0,0 +1,16 @@\n+extern void abort (void);\n+extern void exit (int);\n+typedef __SIZE_TYPE__ size_t;\n+int n = 0;\n+int f (void) { return ++n; }\n+int\n+main (void)\n+{\n+  int a = 0;\n+  int *p;\n+  size_t b;\n+  b = (size_t)(p = &(int []){0, f(), 2}[1]);\n+  if (*p != 1 || *(int *)b != 1 || n != 1)\n+    abort ();\n+  exit (0);\n+}"}, {"sha": "606788148245ca6e8adcd5e62358514d2bdb56b3", "filename": "gcc/tree.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73f397d429016727961c2c4a9ff99cf2fc4ee7b3/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73f397d429016727961c2c4a9ff99cf2fc4ee7b3/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=73f397d429016727961c2c4a9ff99cf2fc4ee7b3", "patch": "@@ -2466,6 +2466,8 @@ do { tree _node = (NODE); \\\n \tUPDATE_TITCSE (TREE_OPERAND (node, 2));\n     }\n \n+  node = lang_hooks.expr_to_decl (node, &tc, &ti, &se);\n+\n   /* Now see what's inside.  If it's an INDIRECT_REF, copy our properties from\n      the address, since &(*a)->b is a form of addition.  If it's a decl, it's\n      invariant and constant if the decl is static.  It's also invariant if it's"}]}