{"sha": "40adaa27975cbd1913dbf18e98d200c41be82122", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDBhZGFhMjc5NzVjYmQxOTEzZGJmMThlOThkMjAwYzQxYmU4MjEyMg==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2002-03-11T21:11:36Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-03-11T21:11:36Z"}, "message": "Makefile.in: Update.\n\n\t* Makefile.in: Update.\ndoc:\n\t* cppenv.texi, cppopts.texi: Split out of cpp.texi and gcc.texi.\n\tUpdate documentation.\n\t* gcc.texi: Include cppopts.texi and cppenv.texi.\n\t* cpp.texi: Include cppopts.texi and cppenv.texi.\n\nFrom-SVN: r50599", "tree": {"sha": "0a940070bdd33bb337e019f4c4afcb0d8c78f7b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a940070bdd33bb337e019f4c4afcb0d8c78f7b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40adaa27975cbd1913dbf18e98d200c41be82122", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40adaa27975cbd1913dbf18e98d200c41be82122", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40adaa27975cbd1913dbf18e98d200c41be82122", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40adaa27975cbd1913dbf18e98d200c41be82122/comments", "author": null, "committer": null, "parents": [{"sha": "abd3d6007c581a427a47feabd0f8d95c777574ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abd3d6007c581a427a47feabd0f8d95c777574ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abd3d6007c581a427a47feabd0f8d95c777574ec"}], "stats": {"total": 1562, "additions": 732, "deletions": 830}, "files": [{"sha": "6273963140b9de4b65a6379c86e0f4872b6fec87", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40adaa27975cbd1913dbf18e98d200c41be82122/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40adaa27975cbd1913dbf18e98d200c41be82122/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=40adaa27975cbd1913dbf18e98d200c41be82122", "patch": "@@ -1,3 +1,12 @@\n+2002-03-11  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* Makefile.in: Update.\n+doc:\n+\t* cppenv.texi, cppopts.texi: Split out of cpp.texi and gcc.texi.\n+\tUpdate documentation.\n+\t* gcc.texi: Include cppopts.texi and cppenv.texi.\n+\t* cpp.texi: Include cppopts.texi and cppenv.texi.\n+\n 2002-03-11  Zack Weinberg  <zack@codesourcery.com>\n \n \t* Makefile.in: Give texi2pod its input file as a command line"}, {"sha": "72e6a071ae5a030c109626ff5a72ef824e3f9c97", "filename": "gcc/Makefile.in", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40adaa27975cbd1913dbf18e98d200c41be82122/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40adaa27975cbd1913dbf18e98d200c41be82122/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=40adaa27975cbd1913dbf18e98d200c41be82122", "patch": "@@ -2261,7 +2261,8 @@ docdir = $(srcdir)/doc\n doc: $(BUILD_INFO) $(GENERATED_MANPAGES) gccbug\n info: $(docdir)/cpp.info $(docdir)/gcc.info $(docdir)/gccint.info lang.info $(docdir)/cppinternals.info\n \n-$(docdir)/cpp.info: $(docdir)/cpp.texi $(docdir)/include/fdl.texi\n+$(docdir)/cpp.info: $(docdir)/cpp.texi $(docdir)/include/fdl.texi \\\n+  $(docdir)/cppenv.texi $(docdir)/cppopts.texi\n \tcd $(srcdir) && $(MAKEINFO) $(MAKEINFOFLAGS) -I doc -I doc/include -o doc/cpp.info doc/cpp.texi\n \n $(docdir)/gcc.info: $(docdir)/gcc.texi $(docdir)/include/gcc-common.texi \\\n@@ -2272,7 +2273,7 @@ $(docdir)/gcc.info: $(docdir)/gcc.texi $(docdir)/include/gcc-common.texi \\\n \t $(docdir)/contribute.texi $(docdir)/vms.texi \\\n \t $(docdir)/include/funding.texi $(docdir)/gnu.texi \\\n \t $(docdir)/include/gpl.texi $(docdir)/include/fdl.texi \\\n-\t $(docdir)/contrib.texi\n+\t $(docdir)/contrib.texi $(docdir)/cppenv.texi $(docdir)/cppopts.texi\n \tcd $(srcdir) && $(MAKEINFO) $(MAKEINFOFLAGS) -I doc -I doc/include -o doc/gcc.info doc/gcc.texi\n \n $(docdir)/gccint.info: $(docdir)/gccint.texi \\\n@@ -2296,7 +2297,8 @@ $(docdir)/cppinternals.info: $(docdir)/cppinternals.texi\n dvi: gcc.dvi gccint.dvi cpp.dvi lang.dvi cppinternals.dvi\n \n # This works with GNU Make's default rule.\n-cpp.dvi: $(docdir)/cpp.texi $(docdir)/include/fdl.texi\n+cpp.dvi: $(docdir)/cpp.texi $(docdir)/include/fdl.texi \\\n+\t$(docdir)/cppenv.texi $(docdir)/cppopts.texi\n \t$(TEXI2DVI) -I $(docdir) -I $(docdir)/include $(docdir)/cpp.texi\n \n gcc.dvi: $(docdir)/gcc.texi $(docdir)/include/gcc-common.texi \\\n@@ -2307,7 +2309,7 @@ gcc.dvi: $(docdir)/gcc.texi $(docdir)/include/gcc-common.texi \\\n \t $(docdir)/contribute.texi $(docdir)/vms.texi \\\n \t $(docdir)/include/funding.texi $(docdir)/gnu.texi \\\n \t $(docdir)/include/gpl.texi $(docdir)/include/fdl.texi \\\n-\t $(docdir)/contrib.texi\n+\t $(docdir)/contrib.texi $(docdir)/cppenv.texi $(docdir)/cppopts.texi\n \t$(TEXI2DVI) -I $(docdir) -I $(docdir)/include $(docdir)/gcc.texi\n \n gccint.dvi: $(docdir)/gccint.texi \\\n@@ -2339,15 +2341,17 @@ $(docdir)/gcov.1: $(docdir)/gcov.texi\n \t\t(rm -f $(docdir)/gcov.1.T$$$$ && exit 1)\n \t-rm -f gcov.pod\n \n-$(docdir)/cpp.1: $(docdir)/cpp.texi\n+$(docdir)/cpp.1: $(docdir)/cpp.texi $(docdir)/cppenv.texi \\\n+  $(docdir)/cppopts.texi\n \t$(STAMP) $(docdir)/cpp.1\n \t-$(TEXI2POD) $(docdir)/cpp.texi > cpp.pod\n \t-($(POD2MAN) --section=1 cpp.pod > $(docdir)/cpp.1.T$$$$ && \\\n \t\tmv -f $(docdir)/cpp.1.T$$$$ $(docdir)/cpp.1) || \\\n \t\t(rm -f $(docdir)/cpp.1.T$$$$ && exit 1)\n \t-rm -f cpp.pod\n \n-$(docdir)/gcc.1: $(docdir)/invoke.texi\n+$(docdir)/gcc.1: $(docdir)/invoke.texi $(docdir)/cppenv.texi \\\n+  $(docdir)/cppopts.texi\n \t$(STAMP) $(docdir)/gcc.1\n \t-$(TEXI2POD) $(docdir)/invoke.texi > gcc.pod\n \t-($(POD2MAN) --section=1 gcc.pod > $(docdir)/gcc.1.T$$$$ && \\"}, {"sha": "74da087f5c2a1178d935c979b8296165786c3c25", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 34, "deletions": 463, "changes": 497, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40adaa27975cbd1913dbf18e98d200c41be82122/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40adaa27975cbd1913dbf18e98d200c41be82122/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=40adaa27975cbd1913dbf18e98d200c41be82122", "patch": "@@ -46,6 +46,12 @@ This manual contains no Invariant Sections.  The Front-Cover Texts are\n @code{\\body\\}\n @end macro\n \n+@c Create a separate index for command line options.\n+@defcodeindex op\n+\n+@c Used in cppopts.texi and cppenv.texi.\n+@set cppmanual\n+\n @ifinfo\n @dircategory Programming\n @direntry\n@@ -88,7 +94,9 @@ useful on its own.\n * Traditional Mode::\n * Implementation Details::\n * Invocation::\n+* Environment Variables::\n * GNU Free Documentation License::\n+* Option Index::\n * Index of Directives::\n * Concept Index::\n \n@@ -3922,475 +3930,38 @@ options may @emph{not} be grouped: @option{-dM} is very different from\n @w{@samp{-d -M}}.\n \n @cindex options\n-@table @gcctabopt\n-@item -D @var{name}\n-Predefine @var{name} as a macro, with definition @code{1}.\n-\n-@item -D @var{name}=@var{definition}\n-Predefine @var{name} as a macro, with definition @var{definition}.\n-There are no restrictions on the contents of @var{definition}, but if\n-you are invoking the preprocessor from a shell or shell-like program you\n-may need to use the shell's quoting syntax to protect characters such as\n-spaces that have a meaning in the shell syntax.  If you use more than\n-one @option{-D} for the same @var{name}, the rightmost definition takes\n-effect.\n-\n-If you wish to define a function-like macro on the command line, write\n-its argument list with surrounding parentheses before the equals sign\n-(if any).  Parentheses are meaningful to most shells, so you will need\n-to quote the option.  With @command{sh} and @command{csh},\n-@option{-D'@var{name}(@var{args@dots{}})=@var{definition}'} works.\n-\n-@item -U @var{name}\n-Cancel any previous definition of @var{name}, either built in or\n-provided with a @option{-D} option.\n-\n-All @option{-imacros @var{file}} and @option{-include @var{file}} options\n-are processed after all @option{-D} and @option{-U} options.\n-\n-@item -undef\n-Do not predefine any system-specific macros.  The common predefined\n-macros remain defined.\n-\n-@item -I @var{dir}\n-Add the directory @var{dir} to the list of directories to be searched\n-for header files.  @xref{Search Path}.  Directories named by @option{-I}\n-are searched before the standard system include directories.\n-\n-It is dangerous to specify a standard system include directory in an\n-@option{-I} option.  This defeats the special treatment of system\n-headers (@pxref{System Headers}).  It can also defeat the repairs to\n-buggy system headers which GCC makes when it is installed.\n-\n-@item -o @var{file}\n-Write output to @var{file}.  This is the same as specifying @var{file}\n-as the second non-option argument to @command{cpp}.  @command{gcc} has a\n-different interpretation of a second non-option argument, so you must\n-use @option{-o} to specify the output file.\n-\n-@item -Wall\n-Turns on all optional warnings which are desirable for normal code.  At\n-present this is @option{-Wcomment} and @option{-Wtrigraphs}.  Note that\n-many of the preprocessor's warnings are on by default and have no\n-options to control them.\n-\n-@item -Wcomment\n-@itemx -Wcomments\n-Warn whenever a comment-start sequence @samp{/*} appears in a @samp{/*}\n-comment, or whenever a backslash-newline appears in a @samp{//} comment.\n-(Both forms have the same effect.)\n-\n-@item -Wtrigraphs\n-Warn if any trigraphs are encountered.  This option used to take effect\n-only if @option{-trigraphs} was also specified, but now works\n-independently.  Warnings are not given for trigraphs within comments, as\n-they do not affect the meaning of the program.\n-\n-@item -Wtraditional\n-Warn about certain constructs that behave differently in traditional and\n-ISO C@.  Also warn about ISO C constructs that have no traditional C\n-equivalent, and problematic constructs which should be avoided.\n-@xref{Traditional Mode}.\n-\n-@item -Wimport\n-Warn the first time @samp{#import} is used.\n-\n-@item -Wundef\n-Warn whenever an identifier which is not a macro is encountered in an\n-@samp{#if} directive, outside of @samp{defined}.  Such identifiers are\n-replaced with zero.\n-\n-@item -Werror\n-Make all warnings into hard errors.  Source code which triggers warnings\n-will be rejected.\n-\n-@item -Wsystem-headers\n-Issue warnings for code in system headers.  These are normally unhelpful\n-in finding bugs in your own code, therefore suppressed.  If you are\n-responsible for the system library, you may want to see them.\n-\n-@item -w\n-Suppress all warnings, including those which GNU CPP issues by default.\n-\n-@item -pedantic\n-Issue all the mandatory diagnostics listed in the C standard.  Some of\n-them are left out by default, since they trigger frequently on harmless\n-code.\n-\n-@item -pedantic-errors\n-Issue all the mandatory diagnostics, and make all mandatory diagnostics\n-into errors.  This includes mandatory diagnostics that GCC issues\n-without @samp{-pedantic} but treats as warnings.\n-\n-@item -M\n-Instead of outputting the result of preprocessing, output a rule\n-suitable for @command{make} describing the dependencies of the main\n-source file.  The preprocessor outputs one @command{make} rule containing\n-the object file name for that source file, a colon, and the names of all\n-the included files, including those coming from @option{-include} or\n-@option{-imacros} command line options.\n-\n-Unless specified explicitly (with @option{-MT} or @option{-MQ}), the\n-object file name consists of the basename of the source file with any\n-suffix replaced with object file suffix.  If there are many included\n-files then the rule is split into several lines using @samp{\\}-newline.\n-The rule has no commands.\n-\n-Passing @option{-M} to the driver implies @option{-E}.\n-\n-@item -MM\n-Like @option{-M} but do not mention header files that are found in\n-system header directories, nor header files that are included,\n-directly or indirectly, from such a header.\n-\n-This implies that the choice of angle brackets or double quotes in an\n-@samp{#include} directive does not in itself determine whether that\n-header will appear in @option{-MM} dependency output.  This is a\n-slight change in semantics from GCC versions 3.0 and earlier.\n-\n-@item -MF @var{file}\n-@anchor{-MF}\n-When used with @option{-M} or @option{-MM}, specifies a\n-file to write the dependencies to.  If no @option{-MF} switch is given\n-the preprocessor sends the rules to the same place it would have sent\n-preprocessed output.\n-\n-When used with the driver options @option{-MD} or @option{-MMD},\n-@option{-MF} overrides the default dependency output file.\n-\n-@item -MG\n-When used with @option{-M} or @option{-MM}, @option{-MG} says to treat missing\n-header files as generated files and assume they live in the same\n-directory as the source file.  It suppresses preprocessed output, as a\n-missing header file is ordinarily an error.\n-\n-This feature is used in automatic updating of makefiles.\n-\n-@item -MP\n-This option instructs CPP to add a phony target for each dependency\n-other than the main file, causing each to depend on nothing.  These\n-dummy rules work around errors @command{make} gives if you remove header\n-files without updating the @file{Makefile} to match.\n-\n-This is typical output:\n-\n-@example\n-test.o: test.c test.h\n-\n-test.h:\n-@end example\n-\n-@item -MT @var{target}\n-\n-Change the target of the rule emitted by dependency generation.  By\n-default CPP takes the name of the main input file, including any path,\n-deletes any file suffix such as @samp{.c}, and appends the platform's\n-usual object suffix.  The result is the target.\n-\n-An @option{-MT} option will set the target to be exactly the string you\n-specify.  If you want multiple targets, you can specify them as a single\n-argument to @option{-MT}, or use multiple @option{-MT} options.\n-\n-For example, @option{@w{-MT '$(objpfx)foo.o'}} might give\n-\n-@example\n-$(objpfx)foo.o: foo.c\n-@end example\n-\n-@item -MQ @var{target}\n-\n-Same as @option{-MT}, but it quotes any characters which are special to\n-Make.  @option{@w{-MQ '$(objpfx)foo.o'}} gives\n-\n-@example\n-$$(objpfx)foo.o: foo.c\n-@end example\n-\n-The default target is automatically quoted, as if it were given with\n-@option{-MQ}.\n-\n-@item -MD\n-@option{-MD} is equivalent to @option{-M -MF @var{file}}, except that\n-@option{-E} is not implied.  The driver determines @var{file} based on\n-whether an @option{-o} option is given.  If it is, the driver uses its\n-argument but with a suffix of @file{.d}, otherwise it take the\n-basename of the input file and applies a @file{.d} suffix.\n-\n-If @option{-MD} is used in conjunction with @option{-E}, any\n-@option{-o} switch is understood to specify the dependency output file\n-(but @pxref{-MF}), but if used without @option{-E}, each @option{-o}\n-is understood to specify a target object file.\n-\n-Since @option{-E} is not implied, @option{-MD} can be used to generate\n-a dependency output file as a side-effect of the compilation process.\n-\n-@item -MMD\n-Like @option{-MD} except mention only user header files, not system\n--header files.\n-\n-@item -x c\n-@itemx -x c++\n-@itemx -x objective-c\n-@itemx -x assembler-with-cpp\n-Specify the source language: C, C++, Objective-C, or assembly.  This has\n-nothing to do with standards conformance or extensions; it merely\n-selects which base syntax to expect.  If you give none of these options,\n-cpp will deduce the language from the extension of the source file:\n-@samp{.c}, @samp{.cc}, @samp{.m}, or @samp{.S}.  Some other common\n-extensions for C++ and assembly are also recognized.  If cpp does not\n-recognize the extension, it will treat the file as C; this is the most\n-generic mode.\n-\n-@strong{Note:} Previous versions of cpp accepted a @option{-lang} option\n-which selected both the language and the standards conformance level.\n-This option has been removed, because it conflicts with the @option{-l}\n-option.\n-\n-@item -std=@var{standard}\n-@itemx -ansi\n-Specify the standard to which the code should conform.  Currently cpp\n-only knows about the standards for C; other language standards will be\n-added in the future.\n-\n-@var{standard}\n-may be one of:\n-@table @code\n-@item iso9899:1990\n-@itemx c89\n-The ISO C standard from 1990.  @samp{c89} is the customary shorthand for\n-this version of the standard.\n-\n-The @option{-ansi} option is equivalent to @option{-std=c89}.\n-\n-@item iso9899:199409\n-The 1990 C standard, as amended in 1994.\n-\n-@item iso9899:1999\n-@itemx c99\n-@itemx iso9899:199x\n-@itemx c9x\n-The revised ISO C standard, published in December 1999.  Before\n-publication, this was known as C9X@.\n-\n-@item gnu89\n-The 1990 C standard plus GNU extensions.  This is the default.\n-\n-@item gnu99\n-@itemx gnu9x\n-The 1999 C standard plus GNU extensions.\n-@end table\n-\n-@item -I-\n-Split the include path.  Any directories specified with @option{-I}\n-options before @option{-I-} are searched only for headers requested with\n-@code{@w{#include \"@var{file}\"}}; they are not searched for\n-@code{@w{#include <@var{file}>}}.  If additional directories are\n-specified with @option{-I} options after the @option{-I-}, those\n-directories are searched for all @samp{#include} directives.\n-\n-In addition, @option{-I-} inhibits the use of the directory of the current\n-file directory as the first search directory for @code{@w{#include\n-\"@var{file}\"}}.  @xref{Search Path}.\n-\n-@item -nostdinc\n-Do not search the standard system directories for header files.\n-Only the directories you have specified with @option{-I} options\n-(and the directory of the current file, if appropriate) are searched.\n-\n-@item -nostdinc++\n-Do not search for header files in the C++-specific standard directories,\n-but do still search the other standard directories.  (This option is\n-used when building the C++ library.)\n-\n-@item -include @var{file}\n-\n-Process @var{file} as if @code{#include \"file\"} appeared as the first\n-line of the primary source file.  However, the first directory searched\n-for @var{file} is the preprocessor's working directory @emph{instead of}\n-the directory containing the main source file.  If not found there, it\n-is searched for in the remainder of the @code{#include \"@dots{}\"} search\n-chain as normal.\n-\n-If multiple @option{-include} options are given, the files are included\n-in the order they appear on the command line.\n-\n-@item -imacros @var{file}\n-\n-Exactly like @option{-include}, except that any output produced by\n-scanning @var{file} is thrown away.  Macros it defines remain defined.\n-This allows you to acquire all the macros from a header without also\n-processing its declarations.\n-\n-All files specified by @option{-imacros} are processed before all files\n-specified by @option{-include}.\n-\n-@item -idirafter @var{dir}\n-Search @var{dir} for header files, but do it @emph{after} all\n-directories specified with @option{-I} and the standard system directories\n-have been exhausted.  @var{dir} is treated as a system include directory.\n-\n-@item -iprefix @var{prefix}\n-Specify @var{prefix} as the prefix for subsequent @option{-iwithprefix}\n-options.  If the prefix represents a directory, you should include the\n-final @samp{/}.\n-\n-@item -iwithprefix @var{dir}\n-@itemx -iwithprefixbefore @var{dir}\n-\n-Append @var{dir} to the prefix specified previously with\n-@option{-iprefix}, and add the resulting directory to the include search\n-path.  @option{-iwithprefixbefore} puts it in the same place @option{-I}\n-would; @option{-iwithprefix} puts it where @option{-idirafter} would.\n-\n-Use of these options is discouraged.\n-\n-@item -isystem @var{dir}\n-Search @var{dir} for header files, after all directories specified by\n-@option{-I} but before the standard system directories.  Mark it\n-as a system directory, so that it gets the same special treatment as\n-is applied to the standard system directories.  @xref{System Headers}.\n-\n-@item -fpreprocessed\n-Indicate to the preprocessor that the input file has already been\n-preprocessed.  This suppresses things like macro expansion, trigraph\n-conversion, escaped newline splicing, and processing of most directives.\n-The preprocessor still recognizes and removes comments, so that you can\n-pass a file preprocessed with @option{-C} to the compiler without\n-problems.  In this mode the integrated preprocessor is little more than\n-a tokenizer for the front ends.\n-\n-@option{-fpreprocessed} is implicit if the input file has one of the\n-extensions @samp{.i}, @samp{.ii} or @samp{.mi}.  These are the\n-extensions that GCC uses for preprocessed files created by\n-@option{-save-temps}.\n-\n-@item -ftabstop=@var{width}\n-Set the distance between tab stops.  This helps the preprocessor report\n-correct column numbers in warnings or errors, even if tabs appear on the\n-line.  If the value is less than 1 or greater than 100, the option is\n-ignored.  The default is 8.\n-\n-@item -fno-show-column\n-Do not print column numbers in diagnostics.  This may be necessary if\n-diagnostics are being scanned by a program that does not understand the\n-column numbers, such as @command{dejagnu}.\n-\n-@item -A @var{predicate}=@var{answer}\n-Make an assertion with the predicate @var{predicate} and answer\n-@var{answer}.  This form is preferred to the older form @option{-A\n-@var{predicate}(@var{answer})}, which is still supported, because\n-it does not use shell special characters.  @xref{Assertions}.\n-\n-@item -A -@var{predicate}=@var{answer}\n-Cancel an assertion with the predicate @var{predicate} and answer\n-@var{answer}.\n-\n-@item -A-\n-Cancel all predefined assertions and all assertions preceding it on\n-the command line.  Also, undefine all predefined macros and all\n-macros preceding it on the command line.  (This is a historical wart and\n-may change in the future.)\n-\n-@item -dCHARS\n-@var{CHARS} is a sequence of one or more of the following characters,\n-and must not be preceded by a space.  Other characters are interpreted\n-by the compiler proper, or reserved for future versions of GCC, and so\n-are silently ignored.  If you specify characters whose behavior\n-conflicts, the result is undefined.\n-\n-@table @samp\n-@item M\n-Instead of the normal output, generate a list of @samp{#define}\n-directives for all the macros defined during the execution of the\n-preprocessor, including predefined macros.  This gives you a way of\n-finding out what is predefined in your version of the preprocessor.\n-Assuming you have no file @file{foo.h}, the command\n-\n-@example\n-touch foo.h; cpp -dM foo.h\n-@end example\n-\n-@noindent\n-will show all the predefined macros.\n-\n-@item D\n-Like @samp{M} except in two respects: it does @emph{not} include the\n-predefined macros, and it outputs @emph{both} the @samp{#define}\n-directives and the result of preprocessing.  Both kinds of output go to\n-the standard output file.\n-\n-@item N\n-Like @samp{D}, but emit only the macro names, not their expansions.\n-\n-@item I\n-Output @samp{#include} directives in addition to the result of\n-preprocessing.\n-@end table\n+@include cppopts.texi\n+@c man end\n \n-@item -P\n-Inhibit generation of linemarkers in the output from the preprocessor.\n-This might be useful when running the preprocessor on something that is\n-not C code, and will be sent to a program which might be confused by the\n-linemarkers.  @xref{Preprocessor Output}.\n-\n-@item -C\n-Do not discard comments.  All comments are passed through to the output\n-file, except for comments in processed directives, which are deleted\n-along with the directive.\n-\n-You should be prepared for side effects when using @option{-C}; it\n-causes the preprocessor to treat comments as tokens in their own right.\n-For example, comments appearing at the start of what would be a\n-directive line have the effect of turning that line into an ordinary\n-source line, since the first token on the line is no longer a @samp{#}.\n-\n-@item -gcc\n-Define the macros @sc{__gnuc__}, @sc{__gnuc_minor__} and\n-@sc{__gnuc_patchlevel__}.  These are defined automatically when you use\n-@command{gcc -E}; you can turn them off in that case with\n-@option{-no-gcc}.\n-\n-@item -traditional\n-Try to imitate the behavior of the old-fashioned C preprocessor, as\n-opposed to the behavior specified by ISO C@.  @xref{Traditional Mode}.\n-\n-@item -trigraphs\n-Process trigraph sequences.  @xref{Initial processing}.\n-\n-@item -remap\n-Enable special code to work around file systems which only permit very\n-short file names, such as MS-DOS@.\n-\n-@item -$\n-Forbid the use of @samp{$} in identifiers.  The C standard allows\n-implementations to define extra characters that can appear in\n-identifiers.  By default GNU CPP permits @samp{$}, a common extension.\n-\n-@item -h\n-@itemx --help\n-@itemx --target-help\n-Print text describing all the command line options instead of\n-preprocessing anything.\n-\n-@item -v\n-Verbose mode.  Print out GNU CPP's version number at the beginning of\n-execution, and report the final form of the include path.\n-\n-@item -H\n-Print the name of each header file used, in addition to other normal\n-activities.  Each name is indented to show how deep in the\n-@samp{#include} stack it is.\n-\n-@item -version\n-@itemx --version\n-Print out GNU CPP's version number.  With one dash, proceed to\n-preprocess as normal.  With two dashes, exit immediately.\n-@end table\n+@node Environment Variables\n+@chapter Environment Variables\n+@cindex environment variables\n+@c man begin ENVIRONMENT\n+\n+This section describes the environment variables that affect how CPP\n+operates.  You can use them to specify directories or prefixes to use\n+when searching for include files, or to control dependency output.\n+\n+Note that you can also specify places to search using options such as\n+@option{-I}, and control dependency output with options like\n+@option{-M} (@pxref{Invocation}).  These take precedence over\n+environment variables, which in turn take precedence over the\n+configuration of GCC@.\n+ \n+@include cppenv.texi\n @c man end\n \n @include fdl.texi\n \n @page\n+@node Option Index\n+@unnumbered Option Index\n+\n+CPP's command line options are indexed here without any initial\n+@samp{-} or @samp{--}.\n+\n+@printindex op\n+\n @node Index of Directives\n @unnumbered Index of Directives\n @printindex fn"}, {"sha": "31407bdfd8b6f8146f314386fe2019197b78eab3", "filename": "gcc/doc/cppenv.texi", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40adaa27975cbd1913dbf18e98d200c41be82122/gcc%2Fdoc%2Fcppenv.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40adaa27975cbd1913dbf18e98d200c41be82122/gcc%2Fdoc%2Fcppenv.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppenv.texi?ref=40adaa27975cbd1913dbf18e98d200c41be82122", "patch": "@@ -0,0 +1,76 @@\n+@c Copyright (c) 1999, 2000, 2001, 2002\n+@c Free Software Foundation, Inc.\n+@c This is part of the CPP and GCC manuals.\n+@c For copying conditions, see the file gcc.texi.\n+\n+@c ---------------------------------------------------------------------\n+@c Environment variables affecting the preprocessor\n+@c ---------------------------------------------------------------------\n+\n+@c If this file is included with the flag ``cppmanual'' set, it is\n+@c formatted for inclusion in the CPP manual; otherwise the main GCC manual.\n+\n+@ftable @env\n+@item CPATH\n+@itemx C_INCLUDE_PATH\n+@itemx CPLUS_INCLUDE_PATH\n+@itemx OBJC_INCLUDE_PATH\n+@c Commented out until ObjC++ is part of GCC:\n+@c @itemx OBJCPLUS_INCLUDE_PATH\n+Each variable's value is a list of directories separated by a special\n+character, much like @env{PATH}, in which to look for header files.\n+The special character, @code{PATH_SEPARATOR}, is target-dependent and\n+determined at GCC build time.  For Windows-based targets it is a\n+semicolon, and for almost all other targets it is a colon.\n+\n+@env{CPATH} specifies a list of directories to be searched as if\n+specified with @option{-I}, but after any paths given with @option{-I}\n+options on the command line.  The environment variable is used\n+regardless of which language is being preprocessed.\n+\n+The remaining environment variables apply only when preprocessing the\n+particular language indicated.  Each specifies a list of directories\n+to be searched as if specified with @option{-isystem}, but after any\n+paths given with @option{-isystem} options on the command line.\n+\n+@ifset cppmanual\n+See also @ref{Search Path}.\n+@end ifset\n+\n+@item DEPENDENCIES_OUTPUT\n+@anchor{DEPENDENCIES_OUTPUT}\n+@cindex dependencies for make as output\n+If this variable is set, its value specifies how to output\n+dependencies for Make based on the non-system header files processed\n+by the compiler.  System header files are ignored in the dependency\n+output.\n+\n+The value of @env{DEPENDENCIES_OUTPUT} can be just a file name, in\n+which case the Make rules are written to that file, guessing the target\n+name from the source file name.  Or the value can have the form\n+@samp{@var{file} @var{target}}, in which case the rules are written to\n+file @var{file} using @var{target} as the target name.\n+\n+In other words, this environment variable is equivalent to combining\n+the options @option{-MM} and @option{-MF}\n+@ifset cppmanual\n+(@pxref{Invocation}),\n+@end ifset\n+@ifclear cppmanual\n+(@pxref{Preprocessor Options}),\n+@end ifclear\n+with an optional @option{-MT} switch too.\n+\n+@item SUNPRO_DEPENDENCIES\n+@cindex dependencies for make as output\n+This variable is the same as the environment variable\n+@env{DEPENDENCIES_OUTPUT} (@pxref{DEPENDENCIES_OUTPUT}), except that\n+system header files are not ignored, so it implies @option{-M} rather\n+than @option{-MM}.\n+@ifset cppmanual\n+@xref{Invocation}.\n+@end ifset\n+@ifclear cppmanual\n+@xref{Preprocessor Options}.\n+@end ifclear\n+@end ftable"}, {"sha": "463403e101a1a9071ae19f85a6eb4b1829c9d535", "filename": "gcc/doc/cppopts.texi", "status": "added", "additions": 586, "deletions": 0, "changes": 586, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40adaa27975cbd1913dbf18e98d200c41be82122/gcc%2Fdoc%2Fcppopts.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40adaa27975cbd1913dbf18e98d200c41be82122/gcc%2Fdoc%2Fcppopts.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppopts.texi?ref=40adaa27975cbd1913dbf18e98d200c41be82122", "patch": "@@ -0,0 +1,586 @@\n+@c Copyright (c) 1999, 2000, 2001, 2002\n+@c Free Software Foundation, Inc.\n+@c This is part of the CPP and GCC manuals.\n+@c For copying conditions, see the file gcc.texi.\n+\n+@c ---------------------------------------------------------------------\n+@c Options affecting the preprocessor\n+@c ---------------------------------------------------------------------\n+\n+@c If this file is included with the flag ``cppmanual'' set, it is\n+@c formatted for inclusion in the CPP manual; otherwise the main GCC manual.\n+\n+@table @gcctabopt\n+@item -D @var{name}\n+@opindex D\n+Predefine @var{name} as a macro, with definition @code{1}.\n+\n+@item -D @var{name}=@var{definition}\n+Predefine @var{name} as a macro, with definition @var{definition}.\n+There are no restrictions on the contents of @var{definition}, but if\n+you are invoking the preprocessor from a shell or shell-like program you\n+may need to use the shell's quoting syntax to protect characters such as\n+spaces that have a meaning in the shell syntax.\n+\n+If you wish to define a function-like macro on the command line, write\n+its argument list with surrounding parentheses before the equals sign\n+(if any).  Parentheses are meaningful to most shells, so you will need\n+to quote the option.  With @command{sh} and @command{csh},\n+@option{-D'@var{name}(@var{args@dots{}})=@var{definition}'} works.\n+\n+@option{-D} and @option{-U} options are processed in the order they\n+are given on the command line.  All @option{-imacros @var{file}} and\n+@option{-include @var{file}} options are processed after all\n+@option{-D} and @option{-U} options.\n+\n+@item -U @var{name}\n+@opindex U\n+Cancel any previous definition of @var{name}, either built in or\n+provided with a @option{-D} option.\n+\n+@item -undef\n+@opindex undef\n+Do not predefine any system-specific macros.  The common predefined\n+macros remain defined.\n+\n+@item -I @var{dir}\n+@opindex I\n+Add the directory @var{dir} to the list of directories to be searched\n+for header files.\n+@ifset cppmanual\n+@xref{Search Path}.\n+@end ifset\n+Directories named by @option{-I} are searched before the standard\n+system include directories.\n+\n+It is dangerous to specify a standard system include directory in an\n+@option{-I} option.  This defeats the special treatment of system\n+headers\n+@ifset cppmanual\n+(@pxref{System Headers})\n+@end ifset\n+.  It can also defeat the repairs to buggy system headers which GCC\n+makes when it is installed.\n+\n+@item -o @var{file}\n+@opindex o\n+Write output to @var{file}.  This is the same as specifying @var{file}\n+as the second non-option argument to @command{cpp}.  @command{gcc} has a\n+different interpretation of a second non-option argument, so you must\n+use @option{-o} to specify the output file.\n+\n+@item -Wall\n+@opindex Wall\n+Turns on all optional warnings which are desirable for normal code.  At\n+present this is @option{-Wcomment} and @option{-Wtrigraphs}.  Note that\n+many of the preprocessor's warnings are on by default and have no\n+options to control them.\n+\n+@item -Wcomment\n+@itemx -Wcomments\n+@opindex Wcomment\n+@opindex Wcomments\n+Warn whenever a comment-start sequence @samp{/*} appears in a @samp{/*}\n+comment, or whenever a backslash-newline appears in a @samp{//} comment.\n+(Both forms have the same effect.)\n+\n+@item -Wtrigraphs\n+@opindex Wtrigraphs\n+Warn if any trigraphs are encountered.  This option used to take effect\n+only if @option{-trigraphs} was also specified, but now works\n+independently.  Warnings are not given for trigraphs within comments, as\n+they do not affect the meaning of the program.\n+\n+@item -Wtraditional\n+@opindex Wtraditional\n+Warn about certain constructs that behave differently in traditional and\n+ISO C@.  Also warn about ISO C constructs that have no traditional C\n+equivalent, and problematic constructs which should be avoided.\n+@ifset cppmanual\n+@xref{Traditional Mode}.\n+@end ifset\n+\n+@item -Wimport\n+@opindex Wimport\n+Warn the first time @samp{#import} is used.\n+\n+@item -Wundef\n+@opindex Wundef\n+Warn whenever an identifier which is not a macro is encountered in an\n+@samp{#if} directive, outside of @samp{defined}.  Such identifiers are\n+replaced with zero.\n+\n+@item -Werror\n+@opindex Werror\n+Make all warnings into hard errors.  Source code which triggers warnings\n+will be rejected.\n+\n+@item -Wsystem-headers\n+@opindex Wsystem-headers\n+Issue warnings for code in system headers.  These are normally unhelpful\n+in finding bugs in your own code, therefore suppressed.  If you are\n+responsible for the system library, you may want to see them.\n+\n+@item -w\n+@opindex w\n+Suppress all warnings, including those which GNU CPP issues by default.\n+\n+@item -pedantic\n+@opindex pedantic\n+Issue all the mandatory diagnostics listed in the C standard.  Some of\n+them are left out by default, since they trigger frequently on harmless\n+code.\n+\n+@item -pedantic-errors\n+@opindex pedantic-errors\n+Issue all the mandatory diagnostics, and make all mandatory diagnostics\n+into errors.  This includes mandatory diagnostics that GCC issues\n+without @samp{-pedantic} but treats as warnings.\n+\n+@item -M\n+@opindex M\n+@cindex make\n+@cindex dependencies, make\n+Instead of outputting the result of preprocessing, output a rule\n+suitable for @command{make} describing the dependencies of the main\n+source file.  The preprocessor outputs one @command{make} rule containing\n+the object file name for that source file, a colon, and the names of all\n+the included files, including those coming from @option{-include} or\n+@option{-imacros} command line options.\n+\n+Unless specified explicitly (with @option{-MT} or @option{-MQ}), the\n+object file name consists of the basename of the source file with any\n+suffix replaced with object file suffix.  If there are many included\n+files then the rule is split into several lines using @samp{\\}-newline.\n+The rule has no commands.\n+\n+This option does not suppress the preprocessor's debug output, such as\n+@option{-dM}.  To avoid mixing such debug output with the dependency\n+rules you should explicitly specify the dependency output file with\n+@option{-MF}, or use an environment variable like\n+@env{DEPENDENCIES_OUTPUT} (@pxref{DEPENDENCIES_OUTPUT}).  Debug output\n+will still be sent to the regular output stream as normal.\n+\n+Passing @option{-M} to the driver implies @option{-E}.\n+\n+@item -MM\n+@opindex MM\n+Like @option{-M} but do not mention header files that are found in\n+system header directories, nor header files that are included,\n+directly or indirectly, from such a header.\n+\n+This implies that the choice of angle brackets or double quotes in an\n+@samp{#include} directive does not in itself determine whether that\n+header will appear in @option{-MM} dependency output.  This is a\n+slight change in semantics from GCC versions 3.0 and earlier.\n+\n+@item -MF @var{file}\n+@opindex MF\n+@anchor{-MF}\n+When used with @option{-M} or @option{-MM}, specifies a\n+file to write the dependencies to.  If no @option{-MF} switch is given\n+the preprocessor sends the rules to the same place it would have sent\n+preprocessed output.\n+\n+When used with the driver options @option{-MD} or @option{-MMD},\n+@option{-MF} overrides the default dependency output file.\n+\n+@item -MG\n+@opindex MG\n+When used with @option{-M} or @option{-MM}, @option{-MG} says to treat missing\n+header files as generated files and assume they live in the same\n+directory as the source file.  It suppresses preprocessed output, as a\n+missing header file is ordinarily an error.\n+\n+This feature is used in automatic updating of makefiles.\n+\n+@item -MP\n+@opindex MP\n+This option instructs CPP to add a phony target for each dependency\n+other than the main file, causing each to depend on nothing.  These\n+dummy rules work around errors @command{make} gives if you remove header\n+files without updating the @file{Makefile} to match.\n+\n+This is typical output:\n+\n+@example\n+test.o: test.c test.h\n+\n+test.h:\n+@end example\n+\n+@item -MT @var{target}\n+@opindex MT\n+\n+Change the target of the rule emitted by dependency generation.  By\n+default CPP takes the name of the main input file, including any path,\n+deletes any file suffix such as @samp{.c}, and appends the platform's\n+usual object suffix.  The result is the target.\n+\n+An @option{-MT} option will set the target to be exactly the string you\n+specify.  If you want multiple targets, you can specify them as a single\n+argument to @option{-MT}, or use multiple @option{-MT} options.\n+\n+For example, @option{@w{-MT '$(objpfx)foo.o'}} might give\n+\n+@example\n+$(objpfx)foo.o: foo.c\n+@end example\n+\n+@item -MQ @var{target}\n+@opindex MQ\n+\n+Same as @option{-MT}, but it quotes any characters which are special to\n+Make.  @option{@w{-MQ '$(objpfx)foo.o'}} gives\n+\n+@example\n+$$(objpfx)foo.o: foo.c\n+@end example\n+\n+The default target is automatically quoted, as if it were given with\n+@option{-MQ}.\n+\n+@item -MD\n+@opindex MD\n+@option{-MD} is equivalent to @option{-M -MF @var{file}}, except that\n+@option{-E} is not implied.  The driver determines @var{file} based on\n+whether an @option{-o} option is given.  If it is, the driver uses its\n+argument but with a suffix of @file{.d}, otherwise it take the\n+basename of the input file and applies a @file{.d} suffix.\n+\n+If @option{-MD} is used in conjunction with @option{-E}, any\n+@option{-o} switch is understood to specify the dependency output file\n+(but @pxref{-MF}), but if used without @option{-E}, each @option{-o}\n+is understood to specify a target object file.\n+\n+Since @option{-E} is not implied, @option{-MD} can be used to generate\n+a dependency output file as a side-effect of the compilation process.\n+\n+@item -MMD\n+@opindex MMD\n+Like @option{-MD} except mention only user header files, not system\n+-header files.\n+\n+@item -x c\n+@itemx -x c++\n+@itemx -x objective-c\n+@itemx -x assembler-with-cpp\n+@opindex x\n+Specify the source language: C, C++, Objective-C, or assembly.  This has\n+nothing to do with standards conformance or extensions; it merely\n+selects which base syntax to expect.  If you give none of these options,\n+cpp will deduce the language from the extension of the source file:\n+@samp{.c}, @samp{.cc}, @samp{.m}, or @samp{.S}.  Some other common\n+extensions for C++ and assembly are also recognized.  If cpp does not\n+recognize the extension, it will treat the file as C; this is the most\n+generic mode.\n+\n+@strong{Note:} Previous versions of cpp accepted a @option{-lang} option\n+which selected both the language and the standards conformance level.\n+This option has been removed, because it conflicts with the @option{-l}\n+option.\n+\n+@item -std=@var{standard}\n+@itemx -ansi\n+@opindex ansi\n+@opindex std=\n+Specify the standard to which the code should conform.  Currently cpp\n+only knows about the standards for C; other language standards will be\n+added in the future.\n+\n+@var{standard}\n+may be one of:\n+@table @code\n+@item iso9899:1990\n+@itemx c89\n+The ISO C standard from 1990.  @samp{c89} is the customary shorthand for\n+this version of the standard.\n+\n+The @option{-ansi} option is equivalent to @option{-std=c89}.\n+\n+@item iso9899:199409\n+The 1990 C standard, as amended in 1994.\n+\n+@item iso9899:1999\n+@itemx c99\n+@itemx iso9899:199x\n+@itemx c9x\n+The revised ISO C standard, published in December 1999.  Before\n+publication, this was known as C9X@.\n+\n+@item gnu89\n+The 1990 C standard plus GNU extensions.  This is the default.\n+\n+@item gnu99\n+@itemx gnu9x\n+The 1999 C standard plus GNU extensions.\n+@end table\n+\n+@item -I-\n+@opindex I-\n+Split the include path.  Any directories specified with @option{-I}\n+options before @option{-I-} are searched only for headers requested with\n+@code{@w{#include \"@var{file}\"}}; they are not searched for\n+@code{@w{#include <@var{file}>}}.  If additional directories are\n+specified with @option{-I} options after the @option{-I-}, those\n+directories are searched for all @samp{#include} directives.\n+\n+In addition, @option{-I-} inhibits the use of the directory of the current\n+file directory as the first search directory for @code{@w{#include\n+\"@var{file}\"}}.\n+@ifset cppmanual\n+@xref{Search Path}.\n+@end ifset\n+\n+@item -nostdinc\n+@opindex nostdinc\n+Do not search the standard system directories for header files.\n+Only the directories you have specified with @option{-I} options\n+(and the directory of the current file, if appropriate) are searched.\n+\n+@item -nostdinc++\n+@opindex nostdinc++\n+Do not search for header files in the C++-specific standard directories,\n+but do still search the other standard directories.  (This option is\n+used when building the C++ library.)\n+\n+@item -include @var{file}\n+@opindex include\n+Process @var{file} as if @code{#include \"file\"} appeared as the first\n+line of the primary source file.  However, the first directory searched\n+for @var{file} is the preprocessor's working directory @emph{instead of}\n+the directory containing the main source file.  If not found there, it\n+is searched for in the remainder of the @code{#include \"@dots{}\"} search\n+chain as normal.\n+\n+If multiple @option{-include} options are given, the files are included\n+in the order they appear on the command line.\n+\n+@item -imacros @var{file}\n+@opindex imacros\n+Exactly like @option{-include}, except that any output produced by\n+scanning @var{file} is thrown away.  Macros it defines remain defined.\n+This allows you to acquire all the macros from a header without also\n+processing its declarations.\n+\n+All files specified by @option{-imacros} are processed before all files\n+specified by @option{-include}.\n+\n+@item -idirafter @var{dir}\n+@opindex idirafter\n+Search @var{dir} for header files, but do it @emph{after} all\n+directories specified with @option{-I} and the standard system directories\n+have been exhausted.  @var{dir} is treated as a system include directory.\n+\n+@item -iprefix @var{prefix}\n+@opindex iprefix\n+Specify @var{prefix} as the prefix for subsequent @option{-iwithprefix}\n+options.  If the prefix represents a directory, you should include the\n+final @samp{/}.\n+\n+@item -iwithprefix @var{dir}\n+@itemx -iwithprefixbefore @var{dir}\n+@opindex iwithprefix\n+@opindex iwithprefixbefore\n+Append @var{dir} to the prefix specified previously with\n+@option{-iprefix}, and add the resulting directory to the include search\n+path.  @option{-iwithprefixbefore} puts it in the same place @option{-I}\n+would; @option{-iwithprefix} puts it where @option{-idirafter} would.\n+\n+Use of these options is discouraged.\n+\n+@item -isystem @var{dir}\n+@opindex isystem\n+Search @var{dir} for header files, after all directories specified by\n+@option{-I} but before the standard system directories.  Mark it\n+as a system directory, so that it gets the same special treatment as\n+is applied to the standard system directories.\n+@ifset cppmanual\n+@xref{System Headers}.\n+@end ifset\n+\n+@item -fpreprocessed\n+@opindex fpreprocessed\n+Indicate to the preprocessor that the input file has already been\n+preprocessed.  This suppresses things like macro expansion, trigraph\n+conversion, escaped newline splicing, and processing of most directives.\n+The preprocessor still recognizes and removes comments, so that you can\n+pass a file preprocessed with @option{-C} to the compiler without\n+problems.  In this mode the integrated preprocessor is little more than\n+a tokenizer for the front ends.\n+\n+@option{-fpreprocessed} is implicit if the input file has one of the\n+extensions @samp{.i}, @samp{.ii} or @samp{.mi}.  These are the\n+extensions that GCC uses for preprocessed files created by\n+@option{-save-temps}.\n+\n+@item -ftabstop=@var{width}\n+@opindex ftabstop\n+Set the distance between tab stops.  This helps the preprocessor report\n+correct column numbers in warnings or errors, even if tabs appear on the\n+line.  If the value is less than 1 or greater than 100, the option is\n+ignored.  The default is 8.\n+\n+@item -fno-show-column\n+@opindex fno-show-column\n+Do not print column numbers in diagnostics.  This may be necessary if\n+diagnostics are being scanned by a program that does not understand the\n+column numbers, such as @command{dejagnu}.\n+\n+@item -A @var{predicate}=@var{answer}\n+@opindex A\n+Make an assertion with the predicate @var{predicate} and answer\n+@var{answer}.  This form is preferred to the older form @option{-A\n+@var{predicate}(@var{answer})}, which is still supported, because\n+it does not use shell special characters.\n+@ifset cppmanual\n+@xref{Assertions}.\n+@end ifset\n+\n+@item -A -@var{predicate}=@var{answer}\n+Cancel an assertion with the predicate @var{predicate} and answer\n+@var{answer}.\n+\n+@item -A-\n+@opindex A-\n+Cancel all predefined assertions and all assertions preceding it on\n+the command line.  Also, undefine all predefined macros and all\n+macros preceding it on the command line.  (This is a historical wart and\n+may change in the future.)\n+\n+@item -dCHARS\n+@var{CHARS} is a sequence of one or more of the following characters,\n+and must not be preceded by a space.  Other characters are interpreted\n+by the compiler proper, or reserved for future versions of GCC, and so\n+are silently ignored.  If you specify characters whose behavior\n+conflicts, the result is undefined.\n+\n+@table @samp\n+@item M\n+@opindex dM\n+Instead of the normal output, generate a list of @samp{#define}\n+directives for all the macros defined during the execution of the\n+preprocessor, including predefined macros.  This gives you a way of\n+finding out what is predefined in your version of the preprocessor.\n+Assuming you have no file @file{foo.h}, the command\n+\n+@example\n+touch foo.h; cpp -dM foo.h\n+@end example\n+\n+@noindent\n+will show all the predefined macros.\n+\n+@item D\n+@opindex dD\n+Like @samp{M} except in two respects: it does @emph{not} include the\n+predefined macros, and it outputs @emph{both} the @samp{#define}\n+directives and the result of preprocessing.  Both kinds of output go to\n+the standard output file.\n+\n+@item N\n+@opindex dN\n+Like @samp{D}, but emit only the macro names, not their expansions.\n+\n+@item I\n+@opindex dI\n+Output @samp{#include} directives in addition to the result of\n+preprocessing.\n+@end table\n+\n+@item -P\n+@opindex P\n+Inhibit generation of linemarkers in the output from the preprocessor.\n+This might be useful when running the preprocessor on something that is\n+not C code, and will be sent to a program which might be confused by the\n+linemarkers.\n+@ifset cppmanual\n+@xref{Preprocessor Output}.\n+@end ifset\n+\n+@item -C\n+@opindex C\n+Do not discard comments.  All comments are passed through to the output\n+file, except for comments in processed directives, which are deleted\n+along with the directive.\n+\n+You should be prepared for side effects when using @option{-C}; it\n+causes the preprocessor to treat comments as tokens in their own right.\n+For example, comments appearing at the start of what would be a\n+directive line have the effect of turning that line into an ordinary\n+source line, since the first token on the line is no longer a @samp{#}.\n+\n+@item -gcc\n+@opindex gcc\n+Define the macros @sc{__gnuc__}, @sc{__gnuc_minor__} and\n+@sc{__gnuc_patchlevel__}.  These are defined automatically when you use\n+@command{gcc -E}; you can turn them off in that case with\n+@option{-no-gcc}.\n+\n+@item -traditional\n+@opindex traditional\n+Try to imitate the behavior of old-fashioned C, as opposed to ISO\n+C@.\n+@ifset cppmanual\n+@xref{Traditional Mode}.\n+@end ifset\n+\n+@item -trigraphs\n+@opindex trigraphs\n+Process trigraph sequences.\n+@ifset cppmanual\n+@xref{Initial processing}.\n+@end ifset\n+@ifclear cppmanual\n+These are three-character sequences, all starting with @samp{??}, that\n+are defined by ISO C to stand for single characters.  For example,\n+@samp{??/} stands for @samp{\\}, so @samp{'??/n'} is a character\n+constant for a newline.  By default, GCC ignores trigraphs, but in\n+standard-conforming modes it converts them.  See the @option{-std} and\n+@option{-ansi} options.\n+\n+The nine trigraphs and their replacements are\n+\n+@example\n+Trigraph:       ??(  ??)  ??<  ??>  ??=  ??/  ??'  ??!  ??-\n+Replacement:      [    ]    @{    @}    #    \\    ^    |    ~\n+@end example\n+@end ifclear\n+\n+@item -remap\n+@opindex remap\n+Enable special code to work around file systems which only permit very\n+short file names, such as MS-DOS@.\n+\n+@item -$\n+@opindex $\n+Forbid the use of @samp{$} in identifiers.  The C standard allows\n+implementations to define extra characters that can appear in\n+identifiers.  By default GNU CPP permits @samp{$}, a common extension.\n+\n+@item -h\n+@itemx --help\n+@itemx --target-help\n+@opindex h\n+@opindex help\n+@opindex target-help\n+Print text describing all the command line options instead of\n+preprocessing anything.\n+\n+@item -v\n+@opindex v\n+Verbose mode.  Print out GNU CPP's version number at the beginning of\n+execution, and report the final form of the include path.\n+\n+@item -H\n+@opindex H\n+Print the name of each header file used, in addition to other normal\n+activities.  Each name is indented to show how deep in the\n+@samp{#include} stack it is.\n+\n+@item -version\n+@itemx --version\n+@opindex version\n+Print out GNU CPP's version number.  With one dash, proceed to\n+preprocess as normal.  With two dashes, exit immediately.\n+@end table"}, {"sha": "c1689c0070fe60182d57933d81fed07c17e7075e", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 17, "deletions": 361, "changes": 378, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40adaa27975cbd1913dbf18e98d200c41be82122/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40adaa27975cbd1913dbf18e98d200c41be82122/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=40adaa27975cbd1913dbf18e98d200c41be82122", "patch": "@@ -3867,339 +3867,18 @@ Some of these options make sense only together with @option{-E} because\n they cause the preprocessor output to be unsuitable for actual\n compilation.\n \n-@table @gcctabopt\n-@item -include @var{file}\n-@opindex include\n-Process @var{file} as input before processing the regular input file.\n-In effect, the contents of @var{file} are compiled first.  Any @option{-D}\n-and @option{-U} options on the command line are always processed before\n-@option{-include @var{file}}, regardless of the order in which they are\n-written.  All the @option{-include} and @option{-imacros} options are\n-processed in the order in which they are written.\n-\n-@item -imacros @var{file}\n-@opindex imacros\n-Process @var{file} as input, discarding the resulting output, before\n-processing the regular input file.  Because the output generated from\n-@var{file} is discarded, the only effect of @option{-imacros @var{file}}\n-is to make the macros defined in @var{file} available for use in the\n-main input.  All the @option{-include} and @option{-imacros} options are\n-processed in the order in which they are written.\n-\n-@item -idirafter @var{dir}\n-@opindex idirafter\n-@cindex second include path\n-Add the directory @var{dir} to the second include path.  The directories\n-on the second include path are searched when a header file is not found\n-in any of the directories in the main include path (the one that\n-@option{-I} adds to).\n-\n-@item -iprefix @var{prefix}\n-@opindex iprefix\n-Specify @var{prefix} as the prefix for subsequent @option{-iwithprefix}\n-options.\n-\n-@item -iwithprefix @var{dir}\n-@opindex iwithprefix\n-Add a directory to the second include path.  The directory's name is\n-made by concatenating @var{prefix} and @var{dir}, where @var{prefix} was\n-specified previously with @option{-iprefix}.  If you have not specified a\n-prefix yet, the directory containing the installed passes of the\n-compiler is used as the default.\n-\n-@item -iwithprefixbefore @var{dir}\n-@opindex iwithprefixbefore\n-Add a directory to the main include path.  The directory's name is made\n-by concatenating @var{prefix} and @var{dir}, as in the case of\n-@option{-iwithprefix}.\n-\n-@item -isystem @var{dir}\n-@opindex isystem\n-Add a directory to the beginning of the second include path, marking it\n-as a system directory, so that it gets the same special treatment as\n-is applied to the standard system directories.\n-\n-@item -nostdinc\n-@opindex nostdinc\n-Do not search the standard system directories for header files.  Only\n-the directories you have specified with @option{-I} options (and the\n-current directory, if appropriate) are searched.  @xref{Directory\n-Options}, for information on @option{-I}.\n-\n-By using both @option{-nostdinc} and @option{-I-}, you can limit the include-file\n-search path to only those directories you specify explicitly.\n-\n-@item -remap\n-@opindex remap\n-When searching for a header file in a directory, remap file names if a\n-file named @file{header.gcc} exists in that directory.  This can be used\n-to work around limitations of file systems with file name restrictions.\n-The @file{header.gcc} file should contain a series of lines with two\n-tokens on each line: the first token is the name to map, and the second\n-token is the actual name to use.\n-\n-@item -undef\n-@opindex undef\n-Do not predefine any nonstandard macros.  (Including architecture flags).\n-\n-@item -E\n-@opindex E\n-Run only the C preprocessor.  Preprocess all the C source files\n-specified and output the results to standard output or to the\n-specified output file.\n-\n-@item -C\n-@opindex C\n-Tell the preprocessor not to discard comments.  Used with the\n-@option{-E} option.\n-\n-@item -P\n-@opindex P\n-Tell the preprocessor not to generate @samp{#line} directives.\n-Used with the @option{-E} option.\n-\n-@cindex make\n-@cindex dependencies, make\n-@item -M\n-@opindex M\n-Instead of outputting the result of preprocessing, output a rule\n-suitable for @command{make} describing the dependencies of the main\n-source file.  The preprocessor outputs one @command{make} rule containing\n-the object file name for that source file, a colon, and the names of all\n-the included files, including those coming from @option{-include} or\n-@option{-imacros} command line options.\n-\n-Unless specified explicitly (with @option{-MT} or @option{-MQ}), the\n-object file name consists of the basename of the source file with any\n-suffix replaced with object file suffix.  If there are many included\n-files then the rule is split into several lines using @samp{\\}-newline.\n-The rule has no commands.\n-\n-Passing @option{-M} to the driver implies @option{-E}.\n-\n-@item -MM\n-@opindex MM\n-Like @option{-M} but do not mention header files that are found in\n-system header directories, nor header files that are included,\n-directly or indirectly, from such a header.\n-\n-This implies that the choice of angle brackets or double quotes in an\n-@samp{#include} directive does not in itself determine whether that\n-header will appear in @option{-MM} dependency output.  This is a\n-slight change in semantics from GCC versions 3.0 and earlier.\n-\n-@item -MD\n-@opindex MD\n-@option{-MD} is equivalent to @option{-M -MF @var{file}}, except that\n-@option{-E} is not implied.  The driver determines @var{file} based on\n-whether an @option{-o} option is given.  If it is, the driver uses its\n-argument but with a suffix of @file{.d}, otherwise it take the\n-basename of the input file and applies a @file{.d} suffix.\n-\n-If @option{-MD} is used in conjunction with @option{-E}, any\n-@option{-o} switch is understood to specify the dependency output file\n-(but @pxref{-MF}), but if used without @option{-E}, each @option{-o}\n-is understood to specify a target object file.\n-\n-Since @option{-E} is not implied, @option{-MD} can be used to generate\n-a dependency output file as a side-effect of the compilation process.\n-\n-With Mach, you can use the utility @code{md} to merge multiple\n-dependency files into a single dependency file suitable for using with\n-the @samp{make} command.\n-\n-@item -MMD\n-@opindex MMD\n-Like @option{-MD} except mention only user header files, not system\n--header files.\n-\n-@item -MF @var{file}\n-@opindex MF\n-@anchor{-MF}\n-When used with @option{-M} or @option{-MM}, specifies a\n-file to write the dependencies to.  If no @option{-MF} switch is given\n-the preprocessor sends the rules to the same place it would have sent\n-preprocessed output.\n-\n-When used with the driver options @option{-MD} or @option{-MMD},\n-@option{-MF} overrides the default dependency output file.\n-\n-Another way to specify output of a @code{make} rule is by setting\n-the environment variable @env{DEPENDENCIES_OUTPUT} (@pxref{Environment\n-Variables}).\n-\n-@item -MG\n-@opindex MG\n-When used with @option{-M} or @option{-MM}, @option{-MG} says to treat missing\n-header files as generated files and assume they live in the same\n-directory as the source file.  It suppresses preprocessed output, as a\n-missing header file is ordinarily an error.\n-\n-This feature is used in automatic updating of makefiles.\n-\n-@item -MP\n-@opindex MP\n-This option instructs CPP to add a phony target for each dependency\n-other than the main file, causing each to depend on nothing.  These\n-dummy rules work around errors @code{make} gives if you remove header\n-files without updating the @code{Makefile} to match.\n-\n-This is typical output:-\n-\n-@smallexample\n-/tmp/test.o: /tmp/test.c /tmp/test.h\n-\n-/tmp/test.h:\n-@end smallexample\n-\n-@item -MQ @var{target}\n-@item -MT @var{target}\n-@opindex MQ\n-@opindex MT\n-By default CPP uses the main file name, including any path, and appends\n-the object suffix, normally ``.o'', to it to obtain the name of the\n-target for dependency generation.  With @option{-MT} you can specify a\n-target yourself, overriding the default one.\n-\n-If you want multiple targets, you can specify them as a single argument\n-to @option{-MT}, or use multiple @option{-MT} options.\n-\n-The targets you specify are output in the order they appear on the\n-command line.  @option{-MQ} is identical to @option{-MT}, except that the\n-target name is quoted for Make, but with @option{-MT} it isn't.  For\n-example, @option{-MT '$(objpfx)foo.o'} gives\n-\n-@smallexample\n-$(objpfx)foo.o: /tmp/foo.c\n-@end smallexample\n-\n-but @option{-MQ '$(objpfx)foo.o'} gives\n-\n-@smallexample\n-$$(objpfx)foo.o: /tmp/foo.c\n-@end smallexample\n-\n-The default target is automatically quoted, as if it were given with\n-@option{-MQ}.\n-\n-@item -H\n-@opindex H\n-Print the name of each header file used, in addition to other normal\n-activities.\n-\n-@item -A@var{question}(@var{answer})\n-@opindex A\n-Assert the answer @var{answer} for @var{question}, in case it is tested\n-with a preprocessing conditional such as @samp{#if\n-#@var{question}(@var{answer})}.  @option{-A-} disables the standard\n-assertions that normally describe the target machine.\n-\n-@item -D@var{macro}\n-@opindex D\n-Define macro @var{macro} with the string @samp{1} as its definition.\n-\n-@item -D@var{macro}=@var{defn}\n-Define macro @var{macro} as @var{defn}.  All instances of @option{-D} on\n-the command line are processed before any @option{-U} options.\n-\n-Any @option{-D} and @option{-U} options on the command line are processed in\n-order, and always before @option{-imacros @var{file}}, regardless of the\n-order in which they are written.\n-\n-@item -U@var{macro}\n-@opindex U\n-Undefine macro @var{macro}.  @option{-U} options are evaluated after all\n-@option{-D} options, but before any @option{-include} and @option{-imacros}\n-options.\n-\n-Any @option{-D} and @option{-U} options on the command line are processed in\n-order, and always before @option{-imacros @var{file}}, regardless of the\n-order in which they are written.\n-\n-@item -dM\n-@opindex dM\n-Tell the preprocessor to output only a list of the macro definitions\n-that are in effect at the end of preprocessing.  Used with the @option{-E}\n-option.\n-\n-@item -dD\n-@opindex dD\n-Tell the preprocessing to pass all macro definitions into the output, in\n-their proper sequence in the rest of the output.\n-\n-@item -dN\n-@opindex dN\n-Like @option{-dD} except that the macro arguments and contents are omitted.\n-Only @samp{#define @var{name}} is included in the output.\n-\n-@item -dI\n-@opindex dI\n-Output @samp{#include} directives in addition to the result of\n-preprocessing.\n-\n-@item -fpreprocessed\n-@opindex fpreprocessed\n-Indicate to the preprocessor that the input file has already been\n-preprocessed.  This suppresses things like macro expansion, trigraph\n-conversion, escaped newline splicing, and processing of most directives.\n-The preprocessor still recognizes and removes comments, so that you can\n-pass a file preprocessed with @option{-C} to the compiler without\n-problems.  In this mode the integrated preprocessor is little more than\n-a tokenizer for the front ends.\n-\n-@option{-fpreprocessed} is implicit if the input file has one of the\n-extensions @samp{i}, @samp{ii} or @samp{mi}.  These are the extensions\n-that GCC uses for preprocessed files created by @option{-save-temps}.\n-\n-@item -trigraphs\n-@opindex trigraphs\n-Process ISO standard trigraph sequences.  These are three-character\n-sequences, all starting with @samp{??}, that are defined by ISO C to\n-stand for single characters.  For example, @samp{??/} stands for\n-@samp{\\}, so @samp{'??/n'} is a character constant for a newline.  By\n-default, GCC ignores trigraphs, but in standard-conforming modes it\n-converts them.  See the @option{-std} and @option{-ansi} options.\n-\n-The nine trigraph sequences are\n-@table @samp\n-@item ??(\n-@expansion{} @samp{[}\n-\n-@item ??)\n-@expansion{} @samp{]}\n-\n-@item ??<\n-@expansion{} @samp{@{}\n-\n-@item ??>\n-@expansion{} @samp{@}}\n-\n-@item ??=\n-@expansion{} @samp{#}\n-\n-@item ??/\n-@expansion{} @samp{\\}\n-\n-@item ??'\n-@expansion{} @samp{^}\n-\n-@item ??!\n-@expansion{} @samp{|}\n-\n-@item ??-\n-@expansion{} @samp{~}\n-\n-@end table\n-\n-Trigraph support is not popular, so many compilers do not implement it\n-properly.  Portable code should not rely on trigraphs being either\n-converted or ignored.\n-\n-@item -Wp,@var{option}\n @opindex Wp\n-Pass @var{option} as an option to the preprocessor.  If @var{option}\n-contains commas, it is split into multiple options at the commas.\n-@end table\n+You can use @option{-Wp,@var{option}} to bypass the compiler driver\n+and pass @var{option} directly through to the preprocessor.  If\n+@var{option} contains commas, it is split into multiple options at the\n+commas.  However, many options are modified, translated or interpreted\n+by the compiler driver before being passed to the preprocessor, and\n+@option{-Wp} forcibly bypasses this phase.  The preprocessor's direct\n+interface is undocumented and subject to change, so whenever possible\n+you should avoid using @option{-Wp} and let the driver handle the\n+options instead.\n+\n+@include cppopts.texi\n \n @node Assembler Options\n @section Passing Options to the Assembler\n@@ -10274,35 +9953,6 @@ using GCC also uses these directories when searching for ordinary\n libraries for the @option{-l} option (but directories specified with\n @option{-L} come first).\n \n-@item C_INCLUDE_PATH\n-@itemx CPLUS_INCLUDE_PATH\n-@itemx OBJC_INCLUDE_PATH\n-@findex C_INCLUDE_PATH\n-@findex CPLUS_INCLUDE_PATH\n-@findex OBJC_INCLUDE_PATH\n-@c @itemx OBJCPLUS_INCLUDE_PATH\n-These environment variables pertain to particular languages.  Each\n-variable's value is a colon-separated list of directories, much like\n-@env{PATH}.  When GCC searches for header files, it tries the\n-directories listed in the variable for the language you are using, after\n-the directories specified with @option{-I} but before the standard header\n-file directories.\n-\n-@item DEPENDENCIES_OUTPUT\n-@findex DEPENDENCIES_OUTPUT\n-@cindex dependencies for make as output\n-If this variable is set, its value specifies how to output dependencies\n-for Make based on the header files processed by the compiler.  This\n-output looks much like the output from the @option{-M} option\n-(@pxref{Preprocessor Options}), but it goes to a separate file, and is\n-in addition to the usual results of compilation.\n-\n-The value of @env{DEPENDENCIES_OUTPUT} can be just a file name, in\n-which case the Make rules are written to that file, guessing the target\n-name from the source file name.  Or the value can have the form\n-@samp{@var{file} @var{target}}, in which case the rules are written to\n-file @var{file} using @var{target} as the target name.\n-\n @item LANG\n @findex LANG\n @cindex locale definition\n@@ -10326,6 +9976,12 @@ compiler will use mblen and mbtowc as defined by the default locale to\n recognize and translate multibyte characters.\n @end table\n \n+@noindent\n+Some additional environments variables affect the behavior of the\n+preprocessor.\n+\n+@include cppenv.texi\n+\n @c man end\n \n @node Running Protoize"}]}