{"sha": "90021b558c4d39ae9444b90f08f86c0aa2360e85", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTAwMjFiNTU4YzRkMzlhZTk0NDRiOTBmMDhmODZjMGFhMjM2MGU4NQ==", "commit": {"author": {"name": "Roland McGrath", "email": "mcgrathr@google.com", "date": "2014-03-12T22:42:13Z"}, "committer": {"name": "Roland McGrath", "email": "roland@gcc.gnu.org", "date": "2014-03-12T22:42:13Z"}, "message": "PR libstdc++/59392: Fix ARM EABI uncaught throw from unexpected exception handler\n\nlibstdc++-v3/\n\tPR libstdc++/59392\n\t* libsupc++/eh_call.cc (__cxa_call_unexpected): Call __do_catch with\n\tthe address of a null pointer, not with a null pointer to pointer.\n\tCopy comment for this case from eh_personality.cc:__cxa_call_unexpected.\n\t* testsuite/18_support/bad_exception/59392.cc: New file.\n\nCo-Authored-By: Mark Seaborn <mseaborn@google.com>\n\nFrom-SVN: r208519", "tree": {"sha": "73c30d6cc6e91c9877a5f5f9892de92f4c43bdee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73c30d6cc6e91c9877a5f5f9892de92f4c43bdee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90021b558c4d39ae9444b90f08f86c0aa2360e85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90021b558c4d39ae9444b90f08f86c0aa2360e85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90021b558c4d39ae9444b90f08f86c0aa2360e85", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90021b558c4d39ae9444b90f08f86c0aa2360e85/comments", "author": {"login": "frobtech", "id": 972096, "node_id": "MDQ6VXNlcjk3MjA5Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/972096?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frobtech", "html_url": "https://github.com/frobtech", "followers_url": "https://api.github.com/users/frobtech/followers", "following_url": "https://api.github.com/users/frobtech/following{/other_user}", "gists_url": "https://api.github.com/users/frobtech/gists{/gist_id}", "starred_url": "https://api.github.com/users/frobtech/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frobtech/subscriptions", "organizations_url": "https://api.github.com/users/frobtech/orgs", "repos_url": "https://api.github.com/users/frobtech/repos", "events_url": "https://api.github.com/users/frobtech/events{/privacy}", "received_events_url": "https://api.github.com/users/frobtech/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bf0f324ea4182da0f6ea89ab9658c0f9549bf360", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf0f324ea4182da0f6ea89ab9658c0f9549bf360", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf0f324ea4182da0f6ea89ab9658c0f9549bf360"}], "stats": {"total": 76, "additions": 70, "deletions": 6}, "files": [{"sha": "720ef1dc4c112c3dc972f8f1d28024545c40de14", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90021b558c4d39ae9444b90f08f86c0aa2360e85/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90021b558c4d39ae9444b90f08f86c0aa2360e85/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=90021b558c4d39ae9444b90f08f86c0aa2360e85", "patch": "@@ -1,3 +1,12 @@\n+2014-03-12  Roland McGrath  <mcgrathr@google.com>\n+\t    Mark Seaborn  <mseaborn@google.com>\n+\n+\tPR libstdc++/59392\n+\t* libsupc++/eh_call.cc (__cxa_call_unexpected): Call __do_catch with\n+\tthe address of a null pointer, not with a null pointer to pointer.\n+\tCopy comment for this case from eh_personality.cc:__cxa_call_unexpected.\n+\t* testsuite/18_support/bad_exception/59392.cc: New file.\n+\n 2014-03-11  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/60499"}, {"sha": "76776927aeef48238dcbbf30d62d0e4e5631155e", "filename": "libstdc++-v3/libsupc++/eh_call.cc", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90021b558c4d39ae9444b90f08f86c0aa2360e85/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_call.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90021b558c4d39ae9444b90f08f86c0aa2360e85/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_call.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_call.cc?ref=90021b558c4d39ae9444b90f08f86c0aa2360e85", "patch": "@@ -104,14 +104,14 @@ __cxa_call_unexpected(void* exc_obj_in)\n   } end_catch_protect_obj;\n \n \n-  __try \n-    { \n+  __try\n+    {\n       if (foreign_exception)\n \tstd::unexpected();\n       else\n \t__unexpected(unexpectedHandler);\n     }\n-  __catch(...) \n+  __catch(...)\n     {\n       /* See if the new exception matches the rtti list.  */\n       if (foreign_exception)\n@@ -140,15 +140,19 @@ __cxa_call_unexpected(void* exc_obj_in)\n \t\t\t       &new_ptr) != ctm_failed)\n \t    __throw_exception_again;\n \n-\t  if (catch_type->__do_catch(&bad_exc, 0, 1))\n+\t  // If the exception spec allows std::bad_exception, throw that.\n+\t  // We don't have a thrown object to compare against, but since\n+\t  // bad_exception doesn't have virtual bases, that's OK; just pass NULL.\n+\t  void* obj = NULL;\n+\t  if (catch_type->__do_catch(&bad_exc, &obj, 1))\n \t    bad_exception_allowed = true;\n \t}\n \n       // If the exception spec allows std::bad_exception, throw that.\n-#ifdef __EXCEPTIONS  \n+#ifdef __EXCEPTIONS\n       if (bad_exception_allowed)\n \tthrow std::bad_exception();\n-#endif   \n+#endif\n \n       // Otherwise, die.\n       __terminate(terminateHandler);"}, {"sha": "c9b65a2c3d326bab0fd2d32e1e2004a0b723fdfd", "filename": "libstdc++-v3/testsuite/18_support/bad_exception/59392.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90021b558c4d39ae9444b90f08f86c0aa2360e85/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fbad_exception%2F59392.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90021b558c4d39ae9444b90f08f86c0aa2360e85/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fbad_exception%2F59392.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fbad_exception%2F59392.cc?ref=90021b558c4d39ae9444b90f08f86c0aa2360e85", "patch": "@@ -0,0 +1,51 @@\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <exception>\n+#include <cstdlib>\n+\n+class expected {};\n+class unexpected {};\n+class from_handler {};\n+\n+static void func_with_exception_spec() throw(expected)\n+{\n+  throw unexpected();\n+}\n+\n+static void unexpected_handler()\n+{\n+  throw from_handler();\n+}\n+\n+static void terminate_handler()\n+{\n+  exit(0);\n+}\n+\n+// libstdc++/59392\n+int main()\n+{\n+  std::set_unexpected(unexpected_handler);\n+  std::set_terminate(terminate_handler);\n+  try {\n+    func_with_exception_spec();\n+  } catch (expected&) {\n+    abort();\n+  }\n+  abort();\n+}"}]}