{"sha": "ea7967ebdf76969a54a47dda96115c04057c4aba", "node_id": "C_kwDOANBUbNoAKGVhNzk2N2ViZGY3Njk2OWE1NGE0N2RkYTk2MTE1YzA0MDU3YzRhYmE", "commit": {"author": {"name": "Steve Baird", "email": "baird@adacore.com", "date": "2021-12-15T23:13:39Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-09T09:27:34Z"}, "message": "[Ada] Properly handle unprefixed references to components\n\nIn some cases, the compiler would incorrectly reject unprefixed uses of\ncomponent names in an aspect specification for the composite type.\nCorrect this error.\n\ngcc/ada/\n\n\t* sem_ch13.adb (Replace_Type_Ref): In the case of an identifier\n\tthat names a component of the type, simplify the test to decide\n\twhether to build a prefix for it (the prefix denotes the current\n\tinstance of the enclosing type): if the identifier doesn't\n\talready have a prefix, then give it one. This isn't quite right\n\tin the corner case of a quantified expression or some other such\n\texpression that declares an object with the same name as a\n\tcomponent, but it is still an improvement.", "tree": {"sha": "f25a9ff8bac9b0c4f4daf6db769180dd096b14de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f25a9ff8bac9b0c4f4daf6db769180dd096b14de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea7967ebdf76969a54a47dda96115c04057c4aba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea7967ebdf76969a54a47dda96115c04057c4aba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea7967ebdf76969a54a47dda96115c04057c4aba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea7967ebdf76969a54a47dda96115c04057c4aba/comments", "author": {"login": "swbaird", "id": 50751052, "node_id": "MDQ6VXNlcjUwNzUxMDUy", "avatar_url": "https://avatars.githubusercontent.com/u/50751052?v=4", "gravatar_id": "", "url": "https://api.github.com/users/swbaird", "html_url": "https://github.com/swbaird", "followers_url": "https://api.github.com/users/swbaird/followers", "following_url": "https://api.github.com/users/swbaird/following{/other_user}", "gists_url": "https://api.github.com/users/swbaird/gists{/gist_id}", "starred_url": "https://api.github.com/users/swbaird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/swbaird/subscriptions", "organizations_url": "https://api.github.com/users/swbaird/orgs", "repos_url": "https://api.github.com/users/swbaird/repos", "events_url": "https://api.github.com/users/swbaird/events{/privacy}", "received_events_url": "https://api.github.com/users/swbaird/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09cca56d660042991a7267b568641e16e77d0ba1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09cca56d660042991a7267b568641e16e77d0ba1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09cca56d660042991a7267b568641e16e77d0ba1"}], "stats": {"total": 33, "additions": 16, "deletions": 17}, "files": [{"sha": "b29b1db6ff1f3200d572e3096b3422881a7ee2e3", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7967ebdf76969a54a47dda96115c04057c4aba/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7967ebdf76969a54a47dda96115c04057c4aba/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=ea7967ebdf76969a54a47dda96115c04057c4aba", "patch": "@@ -15176,27 +15176,26 @@ package body Sem_Ch13 is\n                end if;\n \n                --  The components of the type are directly visible and can\n-               --  be referenced without a prefix.\n-\n-               if Nkind (Parent (N)) = N_Selected_Component then\n-                  null;\n-\n-               --  In expression C (I), C may be a directly visible function\n-               --  or a visible component that has an array type. Disambiguate\n-               --  by examining the component type.\n+               --  be referenced in the source code without a prefix.\n+               --  If a name denoting a component doesn't already have a\n+               --  prefix, then normalize it by adding a reference to the\n+               --  current instance of the type as a prefix.\n+               --\n+               --  This isn't right in the pathological corner case of an\n+               --  object-declaring expression (e.g., a quantified expression\n+               --  or a declare expression) that declares an object with the\n+               --  same name as a visible component declaration, thereby hiding\n+               --  the component within that expression. For example, given a\n+               --  record with a Boolean component \"C\" and a dynamic predicate\n+               --  \"C = (for some C in Character => Some_Function (C))\", only\n+               --  the first of the two uses of C should have a prefix added\n+               --  here; instead, both will get prefixes.\n \n-               elsif Nkind (Parent (N)) = N_Indexed_Component\n-                 and then N = Prefix (Parent (N))\n+               if Nkind (Parent (N)) /= N_Selected_Component\n+                 or else N /= Selector_Name (Parent (N))\n                then\n                   Comp := Visible_Component (Chars (N));\n \n-                  if Present (Comp) and then Is_Array_Type (Etype (Comp)) then\n-                     Add_Prefix (N, Comp);\n-                  end if;\n-\n-               else\n-                  Comp := Visible_Component (Chars (N));\n-\n                   if Present (Comp) then\n                      Add_Prefix (N, Comp);\n                   end if;"}]}