{"sha": "f2423384e6b5de57267b6b6004301f71e8878ec9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjI0MjMzODRlNmI1ZGU1NzI2N2I2YjYwMDQzMDFmNzFlODg3OGVjOQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2013-05-24T08:44:14Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2013-05-24T08:44:14Z"}, "message": "trans.c: Include diagnostic.h and opts.h.\n\n\t* gcc-interface/trans.c: Include diagnostic.h and opts.h.\n\t(Pragma_to_gnu) <Pragma_Warnings>: New case.\n\nFrom-SVN: r199280", "tree": {"sha": "ca6027ba3ccf6d495827fde14d4ab8b887c66c55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca6027ba3ccf6d495827fde14d4ab8b887c66c55"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2423384e6b5de57267b6b6004301f71e8878ec9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2423384e6b5de57267b6b6004301f71e8878ec9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2423384e6b5de57267b6b6004301f71e8878ec9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2423384e6b5de57267b6b6004301f71e8878ec9/comments", "author": null, "committer": null, "parents": [{"sha": "908ba941c3abc6b8ed507871a9051bd5b9cde98d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/908ba941c3abc6b8ed507871a9051bd5b9cde98d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/908ba941c3abc6b8ed507871a9051bd5b9cde98d"}], "stats": {"total": 92, "additions": 91, "deletions": 1}, "files": [{"sha": "8bac4ddcf7ec4e72b93b8f0f69f08248d926b275", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2423384e6b5de57267b6b6004301f71e8878ec9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2423384e6b5de57267b6b6004301f71e8878ec9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f2423384e6b5de57267b6b6004301f71e8878ec9", "patch": "@@ -1,3 +1,8 @@\n+2013-05-24  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c: Include diagnostic.h and opts.h.\n+\t(Pragma_to_gnu) <Pragma_Warnings>: New case.\n+\n 2013-05-24  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Record_Type>: Constify"}, {"sha": "4757139345388e1bbf5976f9dc077716b0fdc83e", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 86, "deletions": 1, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2423384e6b5de57267b6b6004301f71e8878ec9/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2423384e6b5de57267b6b6004301f71e8878ec9/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=f2423384e6b5de57267b6b6004301f71e8878ec9", "patch": "@@ -36,6 +36,8 @@\n #include \"gimple.h\"\n #include \"bitmap.h\"\n #include \"cgraph.h\"\n+#include \"diagnostic.h\"\n+#include \"opts.h\"\n #include \"target.h\"\n #include \"common/common-target.h\"\n \n@@ -1184,8 +1186,8 @@ Identifier_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p)\n static tree\n Pragma_to_gnu (Node_Id gnat_node)\n {\n-  Node_Id gnat_temp;\n   tree gnu_result = alloc_stmt_list ();\n+  Node_Id gnat_temp;\n \n   /* Check for (and ignore) unrecognized pragma and do nothing if we are just\n      annotating types.  */\n@@ -1278,6 +1280,89 @@ Pragma_to_gnu (Node_Id gnat_node)\n       if (write_symbols == NO_DEBUG)\n \tpost_error (\"must specify -g?\", gnat_node);\n       break;\n+\n+    case Pragma_Warnings:\n+      {\n+\tNode_Id gnat_expr;\n+\t/* Preserve the location of the pragma.  */\n+\tconst location_t location = input_location;\n+\tstruct cl_option_handlers handlers;\n+\tunsigned int option_index;\n+\tdiagnostic_t kind;\n+\tbool imply;\n+\n+\tgnat_temp = First (Pragma_Argument_Associations (gnat_node));\n+\n+\t/* This is the String form: pragma Warnings (String).  */\n+\tif (Nkind (Expression (gnat_temp)) == N_String_Literal)\n+\t  {\n+\t    kind = DK_WARNING;\n+\t    gnat_expr = Expression (gnat_temp);\n+\t    imply = true;\n+\t  }\n+\n+\t/* This is the On/Off form: pragma Warnings (On | Off [,String]).  */\n+\telse if (Nkind (Expression (gnat_temp)) == N_Identifier)\n+\t  {\n+\t    switch (Chars (Expression (gnat_temp)))\n+\t      {\n+\t\tcase Name_Off:\n+\t\t  kind = DK_IGNORED;\n+\t\t  break;\n+\n+\t\tcase Name_On:\n+\t\t  kind = DK_WARNING;\n+\t\t  break;\n+\n+\t\tdefault:\n+\t\t  gcc_unreachable ();\n+\t      }\n+\n+\t    if (Present (Next (gnat_temp)))\n+\t      {\n+\t\t/* pragma Warnings (On | Off, Name) is handled differently.  */\n+\t\tif (Nkind (Expression (Next (gnat_temp))) != N_String_Literal)\n+\t\t  break;\n+\n+\t        gnat_expr = Expression (Next (gnat_temp));\n+\t      }\n+\t    else\n+\t      gnat_expr = Empty;\n+\n+\t    imply = false;\n+\t  }\n+\n+\telse\n+\t  gcc_unreachable ();\n+\n+\t/* This is the same implementation as in the C family of compilers.  */\n+\tif (Present (gnat_expr))\n+\t  {\n+\t    tree gnu_expr = gnat_to_gnu (gnat_expr);\n+\t    const char *opt_string = TREE_STRING_POINTER (gnu_expr);\n+\t    const int len = TREE_STRING_LENGTH (gnu_expr);\n+\t    if (len < 3 || opt_string[0] != '-' || opt_string[1] != 'W')\n+\t      break;\n+\t    for (option_index = 0;\n+\t\t option_index < cl_options_count;\n+\t\t option_index++)\n+\t      if (strcmp (cl_options[option_index].opt_text, opt_string) == 0)\n+\t\tbreak;\n+\t    if (option_index == cl_options_count)\n+\t      {\n+\t\tpost_error (\"unknown -W switch\", gnat_node);\n+\t\tbreak;\n+\t      }\n+\t  }\n+\telse\n+\t  option_index = 0;\n+\n+\tset_default_handlers (&handlers);\n+\tcontrol_warning_option (option_index, (int) kind, imply, location,\n+\t\t\t\tCL_Ada, &handlers, &global_options,\n+\t\t\t\t&global_options_set, global_dc);\n+      }\n+      break;\n     }\n \n   return gnu_result;"}]}