{"sha": "170230b7235a9ed4345a770c2d9d2ec1ffed94b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTcwMjMwYjcyMzVhOWVkNDM0NWE3NzBjMmQ5ZDJlYzFmZmVkOTRiMg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2003-02-22T15:17:36Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2003-02-22T15:17:36Z"}, "message": "configure.in: Check for sys/sysctl.h and sysctl.\n\n\t* configure.in: Check for sys/sysctl.h and sysctl.\n\t* physmem.c: Add support for *bsd and darwin.\n\t* Makefile.in: Generate depedency for physmem.o.\n\nCo-Authored-By: Geoffrey Keating <geoffk@apple.com>\nCo-Authored-By: Richard Earnshaw <rearnsha@arm.com>\n\nFrom-SVN: r63285", "tree": {"sha": "0c5bc9ab05e32a306318e93a583171ce6303b5a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c5bc9ab05e32a306318e93a583171ce6303b5a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/170230b7235a9ed4345a770c2d9d2ec1ffed94b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/170230b7235a9ed4345a770c2d9d2ec1ffed94b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/170230b7235a9ed4345a770c2d9d2ec1ffed94b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/170230b7235a9ed4345a770c2d9d2ec1ffed94b2/comments", "author": null, "committer": null, "parents": [{"sha": "514e19c9fb0aaa8d4c5a78b4b357b4c19bc8c7b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/514e19c9fb0aaa8d4c5a78b4b357b4c19bc8c7b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/514e19c9fb0aaa8d4c5a78b4b357b4c19bc8c7b4"}], "stats": {"total": 61, "additions": 55, "deletions": 6}, "files": [{"sha": "6216974feb1bee6c43b22b50188cf5b9a2adb7fe", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/170230b7235a9ed4345a770c2d9d2ec1ffed94b2/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/170230b7235a9ed4345a770c2d9d2ec1ffed94b2/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=170230b7235a9ed4345a770c2d9d2ec1ffed94b2", "patch": "@@ -1,3 +1,11 @@\n+2003-02-22  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\t    Richard Earnshaw  <rearnsha@arm.com>\n+\t    Geoffrey Keating  <geoffk@apple.com>\n+\t\n+\t* configure.in: Check for sys/sysctl.h and sysctl.\n+\t* physmem.c: Add support for *bsd and darwin.\n+\t* Makefile.in: Generate depedency for physmem.o.\n+\n 2003-02-21  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n \n \t* physmem.c (physmem_total) [HAVE_GETSYSINFO]: Use getsysinfo on"}, {"sha": "064179669bd84dc6bdaa2c9306d900197c3a7dc9", "filename": "libiberty/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/170230b7235a9ed4345a770c2d9d2ec1ffed94b2/libiberty%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/170230b7235a9ed4345a770c2d9d2ec1ffed94b2/libiberty%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FMakefile.in?ref=170230b7235a9ed4345a770c2d9d2ec1ffed94b2", "patch": "@@ -466,6 +466,7 @@ pex-msdos.o: config.h pex-common.h $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h \\\n pex-os2.o: config.h pex-common.h $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h\n pex-unix.o: config.h pex-common.h $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h\n pex-win32.o: config.h pex-common.h $(INCDIR)/ansidecl.h $(INCDIR)/libiberty.h\n+physmem.o: config.h $(INCDIR)/libiberty.h\n putenv.o: config.h $(INCDIR)/ansidecl.h\n random.o: $(INCDIR)/ansidecl.h\n regex.o: config.h $(INCDIR)/xregex.h $(INCDIR)/xregex2.h"}, {"sha": "7b9dcb4884f04b7b1003c2a98028a94f4472978c", "filename": "libiberty/config.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/170230b7235a9ed4345a770c2d9d2ec1ffed94b2/libiberty%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/170230b7235a9ed4345a770c2d9d2ec1ffed94b2/libiberty%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfig.in?ref=170230b7235a9ed4345a770c2d9d2ec1ffed94b2", "patch": "@@ -183,6 +183,9 @@\n /* Define if you have the sysconf function.  */\n #undef HAVE_SYSCONF\n \n+/* Define if you have the sysctl function.  */\n+#undef HAVE_SYSCTL\n+\n /* Define if you have the sysmp function.  */\n #undef HAVE_SYSMP\n \n@@ -249,6 +252,9 @@\n /* Define if you have the <sys/stat.h> header file.  */\n #undef HAVE_SYS_STAT_H\n \n+/* Define if you have the <sys/sysctl.h> header file.  */\n+#undef HAVE_SYS_SYSCTL_H\n+\n /* Define if you have the <sys/sysinfo.h> header file.  */\n #undef HAVE_SYS_SYSINFO_H\n "}, {"sha": "4805aacf79dc19caf49d534523e1a2eb5f63cca8", "filename": "libiberty/configure", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/170230b7235a9ed4345a770c2d9d2ec1ffed94b2/libiberty%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/170230b7235a9ed4345a770c2d9d2ec1ffed94b2/libiberty%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfigure?ref=170230b7235a9ed4345a770c2d9d2ec1ffed94b2", "patch": "@@ -1356,7 +1356,7 @@ else\n fi\n echo \"$ac_t\"\"$CPP\" 1>&6\n \n-for ac_hdr in sys/file.h sys/param.h limits.h stdlib.h string.h unistd.h strings.h sys/time.h time.h sys/resource.h sys/stat.h sys/mman.h fcntl.h alloca.h sys/pstat.h sys/sysmp.h sys/sysinfo.h machine/hal_sysinfo.h sys/table.h\n+for ac_hdr in sys/file.h sys/param.h limits.h stdlib.h string.h unistd.h strings.h sys/time.h time.h sys/resource.h sys/stat.h sys/mman.h fcntl.h alloca.h sys/pstat.h sys/sysmp.h sys/sysinfo.h machine/hal_sysinfo.h sys/table.h sys/sysctl.h\n do\n ac_safe=`echo \"$ac_hdr\" | sed 'y%./+-%__p_%'`\n echo $ac_n \"checking for $ac_hdr\"\"... $ac_c\" 1>&6\n@@ -1739,7 +1739,7 @@ vars=\"sys_errlist sys_nerr sys_siglist\"\n \n checkfuncs=\"getrusage on_exit psignal strerror strsignal sysconf times sbrk gettimeofday\"\n checkfuncs=\"$checkfuncs realpath canonicalize_file_name pstat_getstatic pstat_getdynamic sysmp\"\n-checkfuncs=\"$checkfuncs getsysinfo table\"\n+checkfuncs=\"$checkfuncs getsysinfo table sysctl\"\n \n # These are neither executed nor required, but they help keep\n # autoheader happy without adding a bunch of text to acconfig.h.\n@@ -2129,7 +2129,7 @@ else\n fi\n done\n \n-  for ac_func in pstat_getstatic pstat_getdynamic sysmp getsysinfo table\n+  for ac_func in pstat_getstatic pstat_getdynamic sysmp getsysinfo table sysctl\n do\n echo $ac_n \"checking for $ac_func\"\"... $ac_c\" 1>&6\n echo \"configure:2136: checking for $ac_func\" >&5"}, {"sha": "4aa73c850284a322705dcbafa4f885bd722ff7a8", "filename": "libiberty/configure.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/170230b7235a9ed4345a770c2d9d2ec1ffed94b2/libiberty%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/170230b7235a9ed4345a770c2d9d2ec1ffed94b2/libiberty%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfigure.in?ref=170230b7235a9ed4345a770c2d9d2ec1ffed94b2", "patch": "@@ -142,7 +142,7 @@ AC_SUBST_FILE(host_makefile_frag)\n # It's OK to check for header files.  Although the compiler may not be\n # able to link anything, it had better be able to at least compile\n # something.\n-AC_CHECK_HEADERS(sys/file.h sys/param.h limits.h stdlib.h string.h unistd.h strings.h sys/time.h time.h sys/resource.h sys/stat.h sys/mman.h fcntl.h alloca.h sys/pstat.h sys/sysmp.h sys/sysinfo.h machine/hal_sysinfo.h sys/table.h)\n+AC_CHECK_HEADERS(sys/file.h sys/param.h limits.h stdlib.h string.h unistd.h strings.h sys/time.h time.h sys/resource.h sys/stat.h sys/mman.h fcntl.h alloca.h sys/pstat.h sys/sysmp.h sys/sysinfo.h machine/hal_sysinfo.h sys/table.h sys/sysctl.h)\n AC_HEADER_SYS_WAIT\n AC_HEADER_TIME\n \n@@ -208,7 +208,7 @@ vars=\"sys_errlist sys_nerr sys_siglist\"\n \n checkfuncs=\"getrusage on_exit psignal strerror strsignal sysconf times sbrk gettimeofday\"\n checkfuncs=\"$checkfuncs realpath canonicalize_file_name pstat_getstatic pstat_getdynamic sysmp\"\n-checkfuncs=\"$checkfuncs getsysinfo table\"\n+checkfuncs=\"$checkfuncs getsysinfo table sysctl\"\n \n # These are neither executed nor required, but they help keep\n # autoheader happy without adding a bunch of text to acconfig.h.\n@@ -220,7 +220,7 @@ if test \"x\" = \"y\"; then\n   AC_CHECK_FUNCS(strtod strtol strtoul tmpnam vasprintf vfprintf vprintf)\n   AC_CHECK_FUNCS(vsprintf waitpid getrusage on_exit psignal strerror strsignal)\n   AC_CHECK_FUNCS(sysconf times sbrk gettimeofday ffs)\n-  AC_CHECK_FUNCS(pstat_getstatic pstat_getdynamic sysmp getsysinfo table)\n+  AC_CHECK_FUNCS(pstat_getstatic pstat_getdynamic sysmp getsysinfo table sysctl)\n   AC_CHECK_FUNCS(realpath canonicalize_file_name)\n   AC_DEFINE(HAVE_SYS_ERRLIST, 1, [Define if you have the sys_errlist variable.])\n   AC_DEFINE(HAVE_SYS_NERR,    1, [Define if you have the sys_nerr variable.])"}, {"sha": "c502a86c118df836be4bd9f13919fd898ff52798", "filename": "libiberty/physmem.c", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/170230b7235a9ed4345a770c2d9d2ec1ffed94b2/libiberty%2Fphysmem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/170230b7235a9ed4345a770c2d9d2ec1ffed94b2/libiberty%2Fphysmem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fphysmem.c?ref=170230b7235a9ed4345a770c2d9d2ec1ffed94b2", "patch": "@@ -42,6 +42,16 @@\n #  include <sys/table.h>\n #endif\n \n+#include <sys/types.h>\n+\n+#if HAVE_SYS_PARAM_H\n+#include <sys/param.h>\n+#endif\n+\n+#if HAVE_SYS_SYSCTL_H\n+#include <sys/sysctl.h>\n+#endif\n+\n #include \"libiberty.h\"\n \n /* Return the total amount of physical memory.  */\n@@ -98,6 +108,18 @@ physmem_total ()\n   }\n #endif\n \n+#if HAVE_SYSCTL && defined HW_PHYSMEM\n+  { /* This works on *bsd and darwin.  */\n+    unsigned int physmem;\n+    size_t len = sizeof(physmem);\n+    static int mib[2] = {CTL_HW, HW_PHYSMEM};\n+\n+    if (sysctl(mib, ARRAY_SIZE(mib), &physmem, &len, NULL, 0) == 0\n+\t&& len == sizeof (physmem))\n+      return (double)physmem;\n+  }\n+#endif\n+\n   /* Return 0 if we can't determine the value.  */\n   return 0;\n }\n@@ -158,6 +180,18 @@ physmem_available ()\n   }\n #endif\n \n+#if HAVE_SYSCTL && defined HW_USERMEM\n+  { /* This works on *bsd and darwin.  */\n+    unsigned int usermem;\n+    size_t len = sizeof(usermem);\n+    static int mib[2] = {CTL_HW, HW_USERMEM};\n+\n+    if (sysctl(mib, ARRAY_SIZE(mib), &usermem, &len, NULL, 0) == 0\n+\t&& len == sizeof (usermem))\n+      return (double)usermem;\n+  }\n+#endif\n+\n   /* Guess 25% of physical memory.  */\n   return physmem_total () / 4;\n }"}]}