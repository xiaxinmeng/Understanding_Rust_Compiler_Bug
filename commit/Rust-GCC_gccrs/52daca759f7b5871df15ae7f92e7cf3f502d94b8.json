{"sha": "52daca759f7b5871df15ae7f92e7cf3f502d94b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTJkYWNhNzU5ZjdiNTg3MWRmMTVhZTdmOTJlN2NmM2Y1MDJkOTRiOA==", "commit": {"author": {"name": "David Ayers", "email": "ayers@fsfe.org", "date": "2009-04-09T21:08:18Z"}, "committer": {"name": "David Ayers", "email": "ayers@gcc.gnu.org", "date": "2009-04-09T21:08:18Z"}, "message": "re PR objc/29200 (%s substituted with \"methods\"/\"selectors\" can't be properly translated)\n\ngcc/\n2009-04-09  David Ayers  <ayers@fsfe.org>\n\n\tPR objc/29200\n\t* objc/objc-act.c (warn_with_method): Remove helper function.\n\t(check_duplicates): Call warning and inform directly.\n\t(really_start_method): Likewise.\n\nFrom-SVN: r145857", "tree": {"sha": "6bdcf7364e0618f7bfed1b258e7f8d487a35fdbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6bdcf7364e0618f7bfed1b258e7f8d487a35fdbf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52daca759f7b5871df15ae7f92e7cf3f502d94b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52daca759f7b5871df15ae7f92e7cf3f502d94b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52daca759f7b5871df15ae7f92e7cf3f502d94b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52daca759f7b5871df15ae7f92e7cf3f502d94b8/comments", "author": {"login": "david-ayers", "id": 7547014, "node_id": "MDQ6VXNlcjc1NDcwMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7547014?v=4", "gravatar_id": "", "url": "https://api.github.com/users/david-ayers", "html_url": "https://github.com/david-ayers", "followers_url": "https://api.github.com/users/david-ayers/followers", "following_url": "https://api.github.com/users/david-ayers/following{/other_user}", "gists_url": "https://api.github.com/users/david-ayers/gists{/gist_id}", "starred_url": "https://api.github.com/users/david-ayers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/david-ayers/subscriptions", "organizations_url": "https://api.github.com/users/david-ayers/orgs", "repos_url": "https://api.github.com/users/david-ayers/repos", "events_url": "https://api.github.com/users/david-ayers/events{/privacy}", "received_events_url": "https://api.github.com/users/david-ayers/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7a715bba70b4a1c282201df8b8fc9ef418021b47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a715bba70b4a1c282201df8b8fc9ef418021b47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a715bba70b4a1c282201df8b8fc9ef418021b47"}], "stats": {"total": 73, "additions": 45, "deletions": 28}, "files": [{"sha": "5e51f8510bbaec795ec1d7b90dfcfb5a991b6e18", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52daca759f7b5871df15ae7f92e7cf3f502d94b8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52daca759f7b5871df15ae7f92e7cf3f502d94b8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=52daca759f7b5871df15ae7f92e7cf3f502d94b8", "patch": "@@ -1,3 +1,10 @@\n+2009-04-09  David Ayers  <ayers@fsfe.org>\n+\n+\tPR objc/29200\n+\t* objc/objc-act.c (warn_with_method): Remove helper function.\n+\t(check_duplicates): Call warning and inform directly.\n+\t(really_start_method): Likewise.\n+\n 2009-04-09  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* expmed.c (expand_divmod): Always use a comparison for a division"}, {"sha": "50e99d65105420bc136507998cfa023876115f41", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 38, "deletions": 28, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52daca759f7b5871df15ae7f92e7cf3f502d94b8/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52daca759f7b5871df15ae7f92e7cf3f502d94b8/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=52daca759f7b5871df15ae7f92e7cf3f502d94b8", "patch": "@@ -243,7 +243,6 @@ static struct c_arg_info *objc_get_parm_info (int);\n \n /* Utilities for debugging and error diagnostics.  */\n \n-static void warn_with_method (const char *, int, tree);\n static char *gen_type_name (tree);\n static char *gen_type_name_0 (tree);\n static char *gen_method_decl (tree);\n@@ -6103,22 +6102,37 @@ check_duplicates (hash hsh, int methods, int is_class)\n \t    }\n \n \tissue_warning:\n-\t  warning (0, \"multiple %s named %<%c%s%> found\",\n-\t\t   methods ? \"methods\" : \"selectors\",\n-\t\t   (is_class ? '+' : '-'),\n-\t\t   IDENTIFIER_POINTER (METHOD_SEL_NAME (meth)));\n-\n-\t  warn_with_method (methods ? \"using\" : \"found\",\n-\t\t\t    ((TREE_CODE (meth) == INSTANCE_METHOD_DECL)\n-\t\t\t     ? '-'\n-\t\t\t     : '+'),\n-\t\t\t    meth);\n+\t  if (methods)\n+\t    {\n+\t      bool type = TREE_CODE (meth) == INSTANCE_METHOD_DECL;\n+\n+\t      warning (0, \"multiple methods named %<%c%s%> found\",\n+\t\t       (is_class ? '+' : '-'),\n+\t\t       IDENTIFIER_POINTER (METHOD_SEL_NAME (meth)));\n+\t      inform (0, \"%Jusing %<%c%s%>\", meth,\n+\t\t      (type ? '-' : '+'),\n+\t\t      gen_method_decl (meth));\n+\t    }\n+\t  else\n+\t    {\n+\t      bool type = TREE_CODE (meth) == INSTANCE_METHOD_DECL;\n+\n+\t      warning (0, \"multiple selectors named %<%c%s%> found\",\n+\t\t       (is_class ? '+' : '-'),\n+\t\t       IDENTIFIER_POINTER (METHOD_SEL_NAME (meth)));\n+\t      inform (0, \"%Jfound %<%c%s%>\", meth,\n+\t\t      (type ? '-' : '+'),\n+\t\t      gen_method_decl (meth));\n+\t    }\n+\n \t  for (loop = hsh->list; loop; loop = loop->next)\n-\t    warn_with_method (\"also found\",\n-\t\t\t      ((TREE_CODE (loop->value) == INSTANCE_METHOD_DECL)\n-\t\t\t       ? '-'\n-\t\t\t       : '+'),\n-\t\t\t      loop->value);\n+\t    {\n+\t      bool type = TREE_CODE (loop->value) == INSTANCE_METHOD_DECL;\n+\n+\t      inform (0, \"%Jalso found %<%c%s%>\", loop->value, \n+\t\t      (type ? '-' : '+'),\n+\t\t      gen_method_decl (loop->value));\n+\t    }\n         }\n     }\n   return meth;\n@@ -8427,14 +8441,6 @@ start_method_def (tree method)\n   really_start_method (objc_method_context, parm_info);\n }\n \n-static void\n-warn_with_method (const char *message, int mtype, tree method)\n-{\n-  /* Add a readable method name to the warning.  */\n-  warning (0, \"%J%s %<%c%s%>\", method,\n-           message, mtype, gen_method_decl (method));\n-}\n-\n /* Return 1 if TYPE1 is equivalent to TYPE2\n    for purposes of method overloading.  */\n \n@@ -8677,10 +8683,14 @@ really_start_method (tree method,\n \t{\n \t  if (!comp_proto_with_proto (method, proto, 1))\n \t    {\n-\t      char type = (TREE_CODE (method) == INSTANCE_METHOD_DECL ? '-' : '+');\n-\n-\t      warn_with_method (\"conflicting types for\", type, method);\n-\t      warn_with_method (\"previous declaration of\", type, proto);\n+\t      bool type = TREE_CODE (method) == INSTANCE_METHOD_DECL;\n+\n+\t      warning (0, \"%Jconflicting types for %<%c%s%>\", method,\n+\t\t       (type ? '-' : '+'),\n+\t\t       gen_method_decl (method));\n+\t      inform (0, \"%Jprevious declaration of %<%c%s%>\", proto,\n+\t\t      (type ? '-' : '+'),\n+\t\t      gen_method_decl (proto));\n \t    }\n \t}\n       else"}]}