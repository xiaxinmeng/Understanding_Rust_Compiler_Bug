{"sha": "db15225a8e354c5223e074054bbf8757b886d032", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGIxNTIyNWE4ZTM1NGM1MjIzZTA3NDA1NGJiZjg3NTdiODg2ZDAzMg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-09-01T13:14:44Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-09-01T13:14:44Z"}, "message": "[multiple changes]\n\n2011-09-01  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_ch4.adb: Minor code and comment reformatting.\n\n2011-09-01  Thomas Quinot  <quinot@adacore.com>\n\n\t* exp_ch6.adb (Expand_Inlined_Call): Remove redundant tests\n\tfor Is_Limited_Type and Is_Tagged_Type in condition checking\n\tfor by-reference type.\n\t* inline.adb (Add_Inlined_Body): Only exclude init_procs. Other\n\tsubprograms may have a completion because of a previous\n\tInline_Always clause, but the enclosing package must be marked\n\tinlined for the subprogram body to become visible to the backend.\n\nFrom-SVN: r178410", "tree": {"sha": "2c2493e13288720b514a41b4a5a3565d77279b11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c2493e13288720b514a41b4a5a3565d77279b11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db15225a8e354c5223e074054bbf8757b886d032", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db15225a8e354c5223e074054bbf8757b886d032", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db15225a8e354c5223e074054bbf8757b886d032", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db15225a8e354c5223e074054bbf8757b886d032/comments", "author": null, "committer": null, "parents": [{"sha": "9d641fc0bb5b3ee8b898948aa890647060a415d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d641fc0bb5b3ee8b898948aa890647060a415d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d641fc0bb5b3ee8b898948aa890647060a415d3"}], "stats": {"total": 63, "additions": 40, "deletions": 23}, "files": [{"sha": "957a04a2b7329cb9cab3bf29ef4e1fdd3093650d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db15225a8e354c5223e074054bbf8757b886d032/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db15225a8e354c5223e074054bbf8757b886d032/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=db15225a8e354c5223e074054bbf8757b886d032", "patch": "@@ -1,3 +1,17 @@\n+2011-09-01  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch4.adb: Minor code and comment reformatting.\n+\n+2011-09-01  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* exp_ch6.adb (Expand_Inlined_Call): Remove redundant tests\n+\tfor Is_Limited_Type and Is_Tagged_Type in condition checking\n+\tfor by-reference type.\n+\t* inline.adb (Add_Inlined_Body): Only exclude init_procs. Other\n+\tsubprograms may have a completion because of a previous\n+\tInline_Always clause, but the enclosing package must be marked\n+\tinlined for the subprogram body to become visible to the backend.\n+\n 2011-09-01  Thomas Quinot  <quinot@adacore.com>\n \n \t* sem_aux.adb, exp_ch4.adb: Minor reformatting"}, {"sha": "65735b8d4437415334f1dc7165cea79943158733", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db15225a8e354c5223e074054bbf8757b886d032/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db15225a8e354c5223e074054bbf8757b886d032/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=db15225a8e354c5223e074054bbf8757b886d032", "patch": "@@ -4417,11 +4417,11 @@ package body Exp_Ch4 is\n       procedure Process_Transient_Object (Decl : Node_Id) is\n \n          function Find_Insertion_Node return Node_Id;\n-         --  Complex if statements may be converted into nested EWAs. In this\n-         --  case, any generated code must be inserted before the if statement\n-         --  to ensure proper visibility of the \"hook\" objects. This routine\n-         --  returns the top most short circuit operator or the parent of the\n-         --  EWA if no nesting was detected.\n+         --  Complex conditions in if statements may be converted into nested\n+         --  EWAs. In this case, any generated code must be inserted before the\n+         --  if statement to ensure proper visibility of the hook objects. This\n+         --  routine returns the top most short circuit operator or the parent\n+         --  of the EWA if no nesting was detected.\n \n          -------------------------\n          -- Find_Insertion_Node --\n@@ -4431,7 +4431,7 @@ package body Exp_Ch4 is\n             Par : Node_Id;\n \n          begin\n-            --  Climb up the branches of a complex if statement\n+            --  Climb up the branches of a complex condition\n \n             Par := N;\n             while Nkind_In (Parent (Par), N_And_Then, N_Op_Not, N_Or_Else) loop\n@@ -4443,7 +4443,7 @@ package body Exp_Ch4 is\n \n          --  Local variables\n \n-         Ins_Nod   : constant Node_Id    := Find_Insertion_Node;\n+         Ins_Node  : constant Node_Id    := Find_Insertion_Node;\n          Loc       : constant Source_Ptr := Sloc (Decl);\n          Obj_Id    : constant Entity_Id  := Defining_Identifier (Decl);\n          Obj_Typ   : constant Entity_Id  := Etype (Obj_Id);\n@@ -4480,7 +4480,7 @@ package body Exp_Ch4 is\n                    Ekind (Obj_Typ) = E_General_Access_Type,\n                  Subtype_Indication => New_Reference_To (Desig_Typ, Loc)));\n \n-         Insert_Action (Ins_Nod, Ptr_Decl);\n+         Insert_Action (Ins_Node, Ptr_Decl);\n          Analyze (Ptr_Decl);\n \n          --  Step 2: Create a temporary which acts as a hook to the transient\n@@ -4495,16 +4495,16 @@ package body Exp_Ch4 is\n              Defining_Identifier => Temp_Id,\n              Object_Definition   => New_Reference_To (Ptr_Id, Loc));\n \n-         Insert_Action (Ins_Nod, Temp_Decl);\n+         Insert_Action (Ins_Node, Temp_Decl);\n          Analyze (Temp_Decl);\n \n-         --  Mark this temporary as created for the purposes of \"exporting\" the\n+         --  Mark this temporary as created for the purposes of exporting the\n          --  transient declaration out of the Actions list. This signals the\n          --  machinery in Build_Finalizer to recognize this special case.\n \n          Set_Return_Flag_Or_Transient_Decl (Temp_Id, Decl);\n \n-         --  Step 3: \"Hook\" the transient object to the temporary\n+         --  Step 3: Hook the transient object to the temporary\n \n          if Is_Access_Type (Obj_Typ) then\n             Expr := Convert_To (Ptr_Id, New_Reference_To (Obj_Id, Loc));\n@@ -4526,6 +4526,8 @@ package body Exp_Ch4 is\n              Expression => Expr));\n       end Process_Transient_Object;\n \n+      --  Local variables\n+\n       Decl : Node_Id;\n \n    --  Start of processing for Expand_N_Expression_With_Actions"}, {"sha": "90fb73e1b793a6201c64594abd672b0ce7b64eb1", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db15225a8e354c5223e074054bbf8757b886d032/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db15225a8e354c5223e074054bbf8757b886d032/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=db15225a8e354c5223e074054bbf8757b886d032", "patch": "@@ -4186,8 +4186,6 @@ package body Exp_Ch6 is\n             --  code will have the same semantics.\n \n             if Ekind (F) = E_In_Parameter\n-              and then not Is_Limited_Type (Etype (A))\n-              and then not Is_Tagged_Type  (Etype (A))\n               and then not Is_By_Reference_Type (Etype (A))\n               and then\n                (not Is_Array_Type (Etype (A))\n@@ -4197,9 +4195,10 @@ package body Exp_Ch6 is\n                Decl :=\n                  Make_Object_Declaration (Loc,\n                    Defining_Identifier => Temp,\n-                   Constant_Present => True,\n-                   Object_Definition => New_Occurrence_Of (Temp_Typ, Loc),\n-                   Expression => New_A);\n+                   Constant_Present    => True,\n+                   Object_Definition   => New_Occurrence_Of (Temp_Typ, Loc),\n+                   Expression          => New_A);\n+\n             else\n                Decl :=\n                  Make_Object_Renaming_Declaration (Loc,\n@@ -4217,10 +4216,10 @@ package body Exp_Ch6 is\n       end loop;\n \n       --  Establish target of function call. If context is not assignment or\n-      --  declaration, create a temporary as a target. The declaration for\n-      --  the temporary may be subsequently optimized away if the body is a\n-      --  single expression, or if the left-hand side of the assignment is\n-      --  simple enough, i.e. an entity or an explicit dereference of one.\n+      --  declaration, create a temporary as a target. The declaration for the\n+      --  temporary may be subsequently optimized away if the body is a single\n+      --  expression, or if the left-hand side of the assignment is simple\n+      --  enough, i.e. an entity or an explicit dereference of one.\n \n       if Ekind (Subp) = E_Function then\n          if Nkind (Parent (N)) = N_Assignment_Statement"}, {"sha": "53369eaf36538d685c8308db36d077af87894d8a", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db15225a8e354c5223e074054bbf8757b886d032/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db15225a8e354c5223e074054bbf8757b886d032/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=db15225a8e354c5223e074054bbf8757b886d032", "patch": "@@ -341,10 +341,12 @@ package body Inline is\n                if Is_Generic_Instance (Pack) then\n                   null;\n \n+               --  Do not inline the package if the subprogram is an init. proc\n+               --  because in that case the body appears in the same unit that\n+               --  declares the type, which will be compiled in any case.\n+\n                elsif not Is_Inlined (Pack)\n-                 and then\n-                   (not Has_Completion (E)\n-                     or else Is_Expression_Function (E))\n+                 and then not Is_Init_Proc (E)\n                then\n                   Set_Is_Inlined (Pack);\n                   Inlined_Bodies.Increment_Last;"}]}