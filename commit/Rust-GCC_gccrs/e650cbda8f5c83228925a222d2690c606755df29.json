{"sha": "e650cbda8f5c83228925a222d2690c606755df29", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTY1MGNiZGE4ZjVjODMyMjg5MjVhMjIyZDI2OTBjNjA2NzU1ZGYyOQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-08-17T22:03:37Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-08-17T22:03:37Z"}, "message": "(fold_rtx): When folding tablejump, allow LABEL_REF to be in arg0;\n\nalso allow other arg to be MINUS, not just be equivalent to it.\n\nFrom-SVN: r7939", "tree": {"sha": "1e0cbb9d0a02989de66b4123e0b07b2b868cf9d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e0cbb9d0a02989de66b4123e0b07b2b868cf9d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e650cbda8f5c83228925a222d2690c606755df29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e650cbda8f5c83228925a222d2690c606755df29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e650cbda8f5c83228925a222d2690c606755df29", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e650cbda8f5c83228925a222d2690c606755df29/comments", "author": null, "committer": null, "parents": [{"sha": "9fb8a9748b5081d5943483160030931394e5ef54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fb8a9748b5081d5943483160030931394e5ef54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fb8a9748b5081d5943483160030931394e5ef54"}], "stats": {"total": 27, "additions": 25, "deletions": 2}, "files": [{"sha": "4902b897976f0455b251739b6fff98f227004f4b", "filename": "gcc/cse.c", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e650cbda8f5c83228925a222d2690c606755df29/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e650cbda8f5c83228925a222d2690c606755df29/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=e650cbda8f5c83228925a222d2690c606755df29", "patch": "@@ -5369,20 +5369,43 @@ fold_rtx (x, insn)\n \t     ADDR_DIFF_VEC table.  */\n \t  if (const_arg1 && GET_CODE (const_arg1) == LABEL_REF)\n \t    {\n-\t      rtx y = lookup_as_function (folded_arg0, MINUS);\n+\t      rtx y\n+\t\t= GET_CODE (folded_arg0) == MINUS ? folded_arg0\n+\t\t  : lookup_as_function (folded_arg0, MINUS);\n \n \t      if (y != 0 && GET_CODE (XEXP (y, 1)) == LABEL_REF\n \t\t  && XEXP (XEXP (y, 1), 0) == XEXP (const_arg1, 0))\n \t\treturn XEXP (y, 0);\n \n \t      /* Now try for a CONST of a MINUS like the above.  */\n-\t      if ((y = lookup_as_function (folded_arg0, CONST)) != 0\n+\t      if ((y = (GET_CODE (folded_arg0) == CONST ? folded_arg0\n+\t\t\t: lookup_as_function (folded_arg0, CONST))) != 0\n \t\t  && GET_CODE (XEXP (y, 0)) == MINUS\n \t\t  && GET_CODE (XEXP (XEXP (y, 0), 1)) == LABEL_REF\n \t\t  && XEXP (XEXP (XEXP (y, 0),1), 0) == XEXP (const_arg1, 0))\n \t\treturn XEXP (XEXP (y, 0), 0);\n \t    }\n \n+\t  /* Likewise if the operands are in the other order.  */\n+\t  if (const_arg0 && GET_CODE (const_arg0) == LABEL_REF)\n+\t    {\n+\t      rtx y\n+\t\t= GET_CODE (folded_arg1) == MINUS ? folded_arg1\n+\t\t  : lookup_as_function (folded_arg1, MINUS);\n+\n+\t      if (y != 0 && GET_CODE (XEXP (y, 1)) == LABEL_REF\n+\t\t  && XEXP (XEXP (y, 1), 0) == XEXP (const_arg0, 0))\n+\t\treturn XEXP (y, 0);\n+\n+\t      /* Now try for a CONST of a MINUS like the above.  */\n+\t      if ((y = (GET_CODE (folded_arg1) == CONST ? folded_arg1\n+\t\t\t: lookup_as_function (folded_arg1, CONST))) != 0\n+\t\t  && GET_CODE (XEXP (y, 0)) == MINUS\n+\t\t  && GET_CODE (XEXP (XEXP (y, 0), 1)) == LABEL_REF\n+\t\t  && XEXP (XEXP (XEXP (y, 0),1), 0) == XEXP (const_arg0, 0))\n+\t\treturn XEXP (XEXP (y, 0), 0);\n+\t    }\n+\n \t  /* If second operand is a register equivalent to a negative\n \t     CONST_INT, see if we can find a register equivalent to the\n \t     positive constant.  Make a MINUS if so.  Don't do this for"}]}