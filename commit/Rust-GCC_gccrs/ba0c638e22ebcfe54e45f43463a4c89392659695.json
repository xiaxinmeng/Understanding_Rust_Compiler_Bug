{"sha": "ba0c638e22ebcfe54e45f43463a4c89392659695", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmEwYzYzOGUyMmViY2ZlNTRlNDVmNDM0NjNhNGM4OTM5MjY1OTY5NQ==", "commit": {"author": {"name": "Simon Baldwin", "email": "simonb@google.com", "date": "2009-07-16T11:25:20Z"}, "committer": {"name": "Simon Baldwin", "email": "simonb@gcc.gnu.org", "date": "2009-07-16T11:25:20Z"}, "message": "gcc.c (option_map): New flag -no-canonical-prefixes.\n\n\n\t* gcc.c (option_map): New flag -no-canonical-prefixes.\n\t* (display_help): Print help text for new flag.\n\t* (process_command): Move options translation and language specifics\n\tand handle new flag early.  Use it to set a function pointer to a\n\tprefix builder.  Replace make_relative_prefix calls with calls to\n\tthe function pointed to.  Ignore new flag in regular options handling.\n\t* doc/invoke.texi (Overall Options): Documented -no-canonical-prefixes.\n\nFrom-SVN: r149702", "tree": {"sha": "5947292b885dc1abcb63ee2a90cb8d2a93426708", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5947292b885dc1abcb63ee2a90cb8d2a93426708"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba0c638e22ebcfe54e45f43463a4c89392659695", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba0c638e22ebcfe54e45f43463a4c89392659695", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba0c638e22ebcfe54e45f43463a4c89392659695", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba0c638e22ebcfe54e45f43463a4c89392659695/comments", "author": null, "committer": null, "parents": [{"sha": "11af2d7b91dd96c767a86ab4f870dc11fcbbadb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11af2d7b91dd96c767a86ab4f870dc11fcbbadb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11af2d7b91dd96c767a86ab4f870dc11fcbbadb4"}], "stats": {"total": 90, "additions": 67, "deletions": 23}, "files": [{"sha": "6612ad455713bd4ded7341a49657b87316b52913", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba0c638e22ebcfe54e45f43463a4c89392659695/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba0c638e22ebcfe54e45f43463a4c89392659695/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ba0c638e22ebcfe54e45f43463a4c89392659695", "patch": "@@ -1,3 +1,13 @@\n+2009-07-16  Simon Baldwin  <simonb@google.com>\n+\n+\t* gcc.c (option_map): New flag -no-canonical-prefixes.\n+\t* (display_help): Print help text for new flag.\n+\t* (process_command): Move options translation and language specifics\n+\tand handle new flag early.  Use it to set a function pointer to a\n+\tprefix builder.  Replace make_relative_prefix calls with calls to\n+\tthe function pointed to.  Ignore new flag in regular options handling.\n+\t* doc/invoke.texi (Overall Options): Documented -no-canonical-prefixes.\n+\n 2009-07-15  DJ Delorie  <dj@redhat.com>\n \n \t* config/mep/mep.md (sibcall_internal): Change register to avoid"}, {"sha": "bd868bf09e240e79b2279b8aae449e1e4507539e", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba0c638e22ebcfe54e45f43463a4c89392659695/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba0c638e22ebcfe54e45f43463a4c89392659695/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=ba0c638e22ebcfe54e45f43463a4c89392659695", "patch": "@@ -161,7 +161,8 @@ in the following sections.\n @table @emph\n @item Overall Options\n @xref{Overall Options,,Options Controlling the Kind of Output}.\n-@gccoptlist{-c  -S  -E  -o @var{file}  -combine  -pipe  -pass-exit-codes  @gol\n+@gccoptlist{-c  -S  -E  -o @var{file}  -combine  -no-canonical-prefixes  @gol\n+-pipe  -pass-exit-codes  @gol\n -x @var{language}  -v  -###  --help@r{[}=@var{class}@r{[},@dots{}@r{]]}  --target-help  @gol\n --version -wrapper@@@var{file} -fplugin=@var{file} -fplugin-arg-@var{name}=@var{arg}}\n \n@@ -1305,6 +1306,12 @@ gcc -c -Q -O2 --help=optimizers > /tmp/O2-opts\n diff /tmp/O2-opts /tmp/O3-opts | grep enabled\n @end smallexample\n \n+@item -no-canonical-prefixes\n+@opindex no-canonical-prefixes\n+Do not expand any symbolic links, resolve references to @samp{/../}\n+or @samp{/./}, or make the path absolute when generating a relative\n+prefix.\n+\n @item --version\n @opindex version\n Display the version number and copyrights of the invoked GCC@."}, {"sha": "5c028f986be553365f1d2790e547bcff9b157fe8", "filename": "gcc/gcc.c", "status": "modified", "additions": 49, "deletions": 22, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba0c638e22ebcfe54e45f43463a4c89392659695/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba0c638e22ebcfe54e45f43463a4c89392659695/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=ba0c638e22ebcfe54e45f43463a4c89392659695", "patch": "@@ -1180,6 +1180,7 @@ static const struct option_map option_map[] =\n    {\"--library-directory\", \"-L\", \"a\"},\n    {\"--machine\", \"-m\", \"aj\"},\n    {\"--machine-\", \"-m\", \"*j\"},\n+   {\"--no-canonical-prefixes\", \"-no-canonical-prefixes\", 0},\n    {\"--no-integrated-cpp\", \"-no-integrated-cpp\", 0},\n    {\"--no-line-commands\", \"-P\", 0},\n    {\"--no-precompiled-includes\", \"-noprecomp\", 0},\n@@ -3370,6 +3371,9 @@ display_help (void)\n   fputs (_(\"  -combine                 Pass multiple source files to compiler at once\\n\"), stdout);\n   fputs (_(\"  -save-temps              Do not delete intermediate files\\n\"), stdout);\n   fputs (_(\"  -save-temps=<arg>        Do not delete intermediate files\\n\"), stdout);\n+  fputs (_(\"\\\n+  -no-canonical-prefixes   Do not canonicalize paths when building relative\\n\\\n+                           prefixes to other gcc components\\n\"), stdout);\n   fputs (_(\"  -pipe                    Use pipes rather than intermediate files\\n\"), stdout);\n   fputs (_(\"  -time                    Time the execution of each subprocess\\n\"), stdout);\n   fputs (_(\"  -specs=<file>            Override built-in specs with the contents of <file>\\n\"), stdout);\n@@ -3462,6 +3466,8 @@ process_command (int argc, const char **argv)\n   unsigned int j;\n #endif\n   const char *tooldir_prefix;\n+  char *(*get_relative_prefix) (const char *, const char *,\n+\t\t\t\tconst char *) = NULL;\n \n   GET_ENVIRONMENT (gcc_exec_prefix, \"GCC_EXEC_PREFIX\");\n \n@@ -3557,6 +3563,32 @@ process_command (int argc, const char **argv)\n       exit (status);\n     }\n \n+  /* Convert new-style -- options to old-style.  */\n+  translate_options (&argc,\n+\t\t     CONST_CAST2 (const char *const **, const char ***,\n+\t\t\t\t  &argv));\n+\n+  /* Do language-specific adjustment/addition of flags.  */\n+  lang_specific_driver (&argc,\n+\t\t\tCONST_CAST2 (const char *const **, const char ***,\n+\t\t\t\t     &argv),\n+\t\t\t&added_libraries);\n+\n+  /* Handle any -no-canonical-prefixes flag early, to assign the function\n+     that builds relative prefixes.  This function creates default search\n+     paths that are needed later in normal option handling.  */\n+\n+  for (i = 1; i < argc; i++)\n+    {\n+      if (! strcmp (argv[i], \"-no-canonical-prefixes\"))\n+\t{\n+\t  get_relative_prefix = make_relative_prefix_ignore_links;\n+\t  break;\n+\t}\n+    }\n+  if (! get_relative_prefix)\n+    get_relative_prefix = make_relative_prefix;\n+\n   /* Set up the default search paths.  If there is no GCC_EXEC_PREFIX,\n      see if we can create it from the pathname specified in argv[0].  */\n \n@@ -3565,11 +3597,12 @@ process_command (int argc, const char **argv)\n   /* FIXME: make_relative_prefix doesn't yet work for VMS.  */\n   if (!gcc_exec_prefix)\n     {\n-      gcc_exec_prefix = make_relative_prefix (argv[0], standard_bindir_prefix,\n-\t\t\t\t\t      standard_exec_prefix);\n-      gcc_libexec_prefix = make_relative_prefix (argv[0],\n-\t\t\t\t\t\t standard_bindir_prefix,\n-\t\t\t\t\t\t standard_libexec_prefix);\n+      gcc_exec_prefix = get_relative_prefix (argv[0],\n+\t\t\t\t\t     standard_bindir_prefix,\n+\t\t\t\t\t     standard_exec_prefix);\n+      gcc_libexec_prefix = get_relative_prefix (argv[0],\n+\t\t\t\t\t     standard_bindir_prefix,\n+\t\t\t\t\t     standard_libexec_prefix);\n       if (gcc_exec_prefix)\n \txputenv (concat (\"GCC_EXEC_PREFIX=\", gcc_exec_prefix, NULL));\n     }\n@@ -3580,9 +3613,9 @@ process_command (int argc, const char **argv)\n \t / (which is ignored by make_relative_prefix), so append a\n \t program name.  */\n       char *tmp_prefix = concat (gcc_exec_prefix, \"gcc\", NULL);\n-      gcc_libexec_prefix = make_relative_prefix (tmp_prefix,\n-\t\t\t\t\t\t standard_exec_prefix,\n-\t\t\t\t\t\t standard_libexec_prefix);\n+      gcc_libexec_prefix = get_relative_prefix (tmp_prefix,\n+\t\t\t\t\t\tstandard_exec_prefix,\n+\t\t\t\t\t\tstandard_libexec_prefix);\n \n       /* The path is unrelocated, so fallback to the original setting.  */\n       if (!gcc_libexec_prefix)\n@@ -3720,17 +3753,6 @@ process_command (int argc, const char **argv)\n \t}\n     }\n \n-  /* Convert new-style -- options to old-style.  */\n-  translate_options (&argc,\n-\t\t     CONST_CAST2 (const char *const **, const char ***,\n-\t\t\t\t  &argv));\n-\n-  /* Do language-specific adjustment/addition of flags.  */\n-  lang_specific_driver (&argc,\n-\t\t\tCONST_CAST2 (const char *const **, const char ***,\n-\t\t\t\t     &argv),\n-\t\t\t&added_libraries);\n-\n   /* Scan argv twice.  Here, the first time, just count how many switches\n      there will be in their vector, and how many input files in theirs.\n      Here we also parse the switches that cc itself uses (e.g. -v).  */\n@@ -3958,6 +3980,9 @@ process_command (int argc, const char **argv)\n \t  else\n \t    fatal (\"'%s' is an unknown -save-temps option\", argv[i]);\n \t}\n+      else if (strcmp (argv[i], \"-no-canonical-prefixes\") == 0)\n+\t/* Already handled as a special case, so ignored here.  */\n+\t;\n       else if (strcmp (argv[i], \"-combine\") == 0)\n \t{\n \t  combine_flag = 1;\n@@ -4305,9 +4330,9 @@ process_command (int argc, const char **argv)\n      ``make_relative_prefix'' is not compiled for VMS, so don't call it.  */\n   if (target_system_root && gcc_exec_prefix)\n     {\n-      char *tmp_prefix = make_relative_prefix (argv[0],\n-\t\t\t\t\t       standard_bindir_prefix,\n-\t\t\t\t\t       target_system_root);\n+      char *tmp_prefix = get_relative_prefix (argv[0],\n+\t\t\t\t\t      standard_bindir_prefix,\n+\t\t\t\t\t      target_system_root);\n       if (tmp_prefix && access_check (tmp_prefix, F_OK) == 0)\n \t{\n \t  target_system_root = tmp_prefix;\n@@ -4349,6 +4374,8 @@ process_command (int argc, const char **argv)\n \t;\n       else if (! strncmp (argv[i], \"-Wp,\", 4))\n \t;\n+      else if (! strcmp (argv[i], \"-no-canonical-prefixes\"))\n+\t;\n       else if (! strcmp (argv[i], \"-pass-exit-codes\"))\n \t;\n       else if (! strcmp (argv[i], \"-print-search-dirs\"))"}]}