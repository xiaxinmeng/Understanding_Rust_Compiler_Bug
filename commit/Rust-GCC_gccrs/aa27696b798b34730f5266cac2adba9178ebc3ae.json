{"sha": "aa27696b798b34730f5266cac2adba9178ebc3ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWEyNzY5NmI3OThiMzQ3MzBmNTI2NmNhYzJhZGJhOTE3OGViYzNhZQ==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2021-03-11T02:38:34Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2021-03-11T02:43:48Z"}, "message": "cris: define HARD_FRAME_POINTER_REGNUM\n\nBeware, tm.texi doesn't tell the whole story: a defined\nHARD_FRAME_POINTER_REGNUM (different to FRAME_POINTER_REGNUM) is\nsupposed to make work easier for reload, being able to easily\ntell actual frame-pointer-related addresses from those that\nhappen to use the same register or something to that effect.\n\nOn reasonable code the performance effect is barely measurable.\n\nLooking at libgcc changes for -march=v10, the effect (where\nnoticeable) is mostly indeterminate churn.  Instances where it's\nnot just insns moved around at no obvious effect: one more insn\nfor addvdi3, subvdi3; two insns more in floatdisf; three insns\nshorter fixunsdfdi.  Some of those seem related to pairing r8\nwith r9.  The only effect on coremark is an infinitesimal\npositive effect from a three(!) cycles total (from the 15 calls)\nfaster execution paths in vfprintf_r.  Local microbenchmarks\ngive similar results.  With that in mind and not forgetting that\nexpectations in the register allocator and reload leaning\ntowards HARD_FRAME_POINTER_REGNUM defined (and different to)\nFRAME_POINTER_REGNUM or to wit, \"all the kids do it\", why not.\nNote that the offset at elimination really is 0.\n\ngcc:\n\t* config/cris/cris.h (HARD_FRAME_POINTER_REGNUM): Define.\n\tChange FRAME_POINTER_REGNUM to correspond to a new faked\n\tregister faked_fp, part of GENNONACR_REGS like faked_ap.\n\t(CRIS_FAKED_REGS_CONTENTS): New helper macro.\n\t(FIRST_PSEUDO_REGISTER, FIXED_REGISTERS, CALL_USED_REGISTERS):\n\t(REG_ALLOC_ORDER, REG_CLASS_CONTENTS, REGNO_OK_FOR_BASE_P)\n\t(ELIMINABLE_REGS, REGISTER_NAMES): Adjust accordingly.\n\t* config/cris/cris.md (CRIS_FP_REGNUM): Renumber to new faked\n\tregister.\n\t(CRIS_REAL_FP_REGNUM): New constant.\n\t* config/cris/cris.c (cris_reg_saved_in_regsave_area): Check\n\tfor HARD_FRAME_POINTER_REGNUM instead of FRAME_POINTER_REGNUM.\n\t(cris_initial_elimination_offset): Handle elimination changes\n\tto HARD_FRAME_POINTER_REGNUM instead of FRAME_POINTER_REGNUM\n\tand add one from FRAME_POINTER_REGNUM to\n\tHARD_FRAME_POINTER_REGNUM.\n\t(cris_expand_prologue, cris_expand_epilogue): Emit code for\n\thard_frame_pointer_rtx instead of frame_pointer_rtx.", "tree": {"sha": "c31b33844b404d76ff180b28c60c192c48c1a3eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c31b33844b404d76ff180b28c60c192c48c1a3eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa27696b798b34730f5266cac2adba9178ebc3ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa27696b798b34730f5266cac2adba9178ebc3ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa27696b798b34730f5266cac2adba9178ebc3ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa27696b798b34730f5266cac2adba9178ebc3ae/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9800852067503ed0fe4efbfcac5f172b8596ee6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9800852067503ed0fe4efbfcac5f172b8596ee6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9800852067503ed0fe4efbfcac5f172b8596ee6"}], "stats": {"total": 56, "additions": 36, "deletions": 20}, "files": [{"sha": "d9213d7ffb672bb7394996ccdf44c3812ca3b62a", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa27696b798b34730f5266cac2adba9178ebc3ae/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa27696b798b34730f5266cac2adba9178ebc3ae/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=aa27696b798b34730f5266cac2adba9178ebc3ae", "patch": "@@ -864,7 +864,7 @@ cris_reg_saved_in_regsave_area (unsigned int regno)\n   return\n     (((df_regs_ever_live_p (regno)\n        && !call_used_or_fixed_reg_p (regno)))\n-     && (regno != FRAME_POINTER_REGNUM || !frame_pointer_needed)\n+     && (regno != HARD_FRAME_POINTER_REGNUM || !frame_pointer_needed)\n      && regno != CRIS_SRP_REGNUM)\n     || (crtl->calls_eh_return\n \t&& (regno == EH_RETURN_DATA_REGNO (0)\n@@ -1445,7 +1445,7 @@ cris_initial_elimination_offset (int fromreg, int toreg)\n   int ap_fp_offset = 4 + (return_address_on_stack ? 4 : 0);\n \n   if (fromreg == ARG_POINTER_REGNUM\n-      && toreg == FRAME_POINTER_REGNUM)\n+      && toreg == HARD_FRAME_POINTER_REGNUM)\n     return ap_fp_offset;\n \n   /* Between the frame pointer and the stack are only \"normal\" stack\n@@ -1459,6 +1459,10 @@ cris_initial_elimination_offset (int fromreg, int toreg)\n       && toreg == STACK_POINTER_REGNUM)\n     return ap_fp_offset + fp_sp_offset - 4;\n \n+  if (fromreg == FRAME_POINTER_REGNUM\n+      && toreg == HARD_FRAME_POINTER_REGNUM)\n+    return 0;\n+\n   gcc_unreachable ();\n }\n \n@@ -2749,10 +2753,10 @@ cris_expand_prologue (void)\n \n       mem = gen_rtx_MEM (SImode, stack_pointer_rtx);\n       set_mem_alias_set (mem, get_frame_alias_set ());\n-      insn = emit_move_insn (mem, frame_pointer_rtx);\n+      insn = emit_move_insn (mem, hard_frame_pointer_rtx);\n       RTX_FRAME_RELATED_P (insn) = 1;\n \n-      insn = emit_move_insn (frame_pointer_rtx, stack_pointer_rtx);\n+      insn = emit_move_insn (hard_frame_pointer_rtx, stack_pointer_rtx);\n       RTX_FRAME_RELATED_P (insn) = 1;\n \n       framesize += 4;\n@@ -3015,11 +3019,11 @@ cris_expand_epilogue (void)\n \n       emit_insn (gen_cris_frame_deallocated_barrier ());\n \n-      emit_move_insn (stack_pointer_rtx, frame_pointer_rtx);\n+      emit_move_insn (stack_pointer_rtx, hard_frame_pointer_rtx);\n       mem = gen_rtx_MEM (SImode, gen_rtx_POST_INC (SImode,\n \t\t\t\t\t\t   stack_pointer_rtx));\n       set_mem_alias_set (mem, get_frame_alias_set ());\n-      insn = emit_move_insn (frame_pointer_rtx, mem);\n+      insn = emit_move_insn (hard_frame_pointer_rtx, mem);\n \n       /* Whenever we emit insns with post-incremented addresses\n \t ourselves, we must add a post-inc note manually.  */"}, {"sha": "1ab830e4d750d4b175cf17db6f46fea1b3867636", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa27696b798b34730f5266cac2adba9178ebc3ae/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa27696b798b34730f5266cac2adba9178ebc3ae/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=aa27696b798b34730f5266cac2adba9178ebc3ae", "patch": "@@ -373,21 +373,21 @@ extern int cris_cpu_version;\n /* Node: Register Basics */\n \n /*  We count all 16 non-special registers, SRP, a faked argument\n-    pointer register, MOF and CCR/DCCR.  */\n-#define FIRST_PSEUDO_REGISTER (16 + 1 + 1 + 1 + 1)\n+    pointer register, MOF, CCR/DCCR, and the faked frame-pointer.  */\n+#define FIRST_PSEUDO_REGISTER (16 + 1 + 1 + 1 + 1 + 1)\n \n /* For CRIS, these are r15 (pc) and r14 (sp). Register r8 is used as a\n    frame-pointer, but is not fixed.  SRP is not included in general\n    registers and will not be used automatically.  All other special\n    registers are fixed at the moment.  The faked argument pointer register\n    is fixed too.  */\n #define FIXED_REGISTERS \\\n- {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1}\n+ {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1}\n \n /* Register r9 is used for structure-address, r10-r13 for parameters,\n    r10- for return values.  */\n #define CALL_USED_REGISTERS \\\n- {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1}\n+ {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1}\n \n /* Node: Allocation Order */\n \n@@ -410,7 +410,8 @@ extern int cris_cpu_version;\n     Use struct-return address first, since very few functions use\n    structure return values so it is likely to be available.  */\n #define REG_ALLOC_ORDER \\\n- {9, 13, 12, 11, 10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 14, 15, 17, 16, 18, 19}\n+ {9, 13, 12, 11, 10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 14, 15, 17, 16, 18, 19,\t\\\n+  20}\n \n \n /* Node: Leaf Functions */\n@@ -451,6 +452,9 @@ enum reg_class\n #define CRIS_SPECIAL_REGS_CONTENTS\t\t\t\t\t\\\n  ((1 << CRIS_SRP_REGNUM) | (1 << CRIS_MOF_REGNUM) | (1 << CRIS_CC0_REGNUM))\n \n+#define CRIS_FAKED_REGS_CONTENTS \\\n+ ((1 << CRIS_AP_REGNUM) | (1 << CRIS_FP_REGNUM))\n+\n /* Count in the faked argument register in GENERAL_REGS.  Keep out SRP.  */\n #define REG_CLASS_CONTENTS\t\t\t\\\n   {\t\t\t\t\t\t\\\n@@ -464,13 +468,13 @@ enum reg_class\n    {CRIS_SPECIAL_REGS_CONTENTS},\t\t\\\n    {CRIS_SPECIAL_REGS_CONTENTS\t\t\t\\\n     | (1 << CRIS_ACR_REGNUM)},\t\t\t\\\n-   {(0xffff | (1 << CRIS_AP_REGNUM))\t\t\\\n+   {(0xffff | CRIS_FAKED_REGS_CONTENTS)\t\t\\\n     & ~(1 << CRIS_ACR_REGNUM)},\t\t\t\\\n-   {(0xffff | (1 << CRIS_AP_REGNUM)\t\t\\\n+   {(0xffff | CRIS_FAKED_REGS_CONTENTS\t\t\\\n     | CRIS_SPECIAL_REGS_CONTENTS)\t\t\\\n     & ~(1 << CRIS_ACR_REGNUM)},\t\t\t\\\n-   {0xffff | (1 << CRIS_AP_REGNUM)},\t\t\\\n-   {0xffff | (1 << CRIS_AP_REGNUM)\t\t\\\n+   {0xffff | CRIS_FAKED_REGS_CONTENTS},\t\t\\\n+   {0xffff | CRIS_FAKED_REGS_CONTENTS\t\t\\\n     | CRIS_SPECIAL_REGS_CONTENTS}\t\t\\\n   }\n \n@@ -493,8 +497,10 @@ enum reg_class\n    allocation.  */\n #define REGNO_OK_FOR_BASE_P(REGNO)\t\t\t\t\t\\\n  ((REGNO) <= CRIS_LAST_GENERAL_REGISTER\t\t\t\t\t\\\n+  || (REGNO) == FRAME_POINTER_REGNUM\t\t\t\t\t\\\n   || (REGNO) == ARG_POINTER_REGNUM\t\t\t\t\t\\\n   || (unsigned) reg_renumber[REGNO] <= CRIS_LAST_GENERAL_REGISTER\t\\\n+  || (unsigned) reg_renumber[REGNO] == FRAME_POINTER_REGNUM\t\t\\\n   || (unsigned) reg_renumber[REGNO] == ARG_POINTER_REGNUM)\n \n /* See REGNO_OK_FOR_BASE_P.  */\n@@ -580,6 +586,9 @@ enum reg_class\n \n /* Register used for frame pointer.  This is also the last of the saved\n    registers, when a frame pointer is not used.  */\n+#define HARD_FRAME_POINTER_REGNUM CRIS_REAL_FP_REGNUM\n+\n+/* Faked register, is always eliminated to at least CRIS_REAL_FP_REGNUM.  */\n #define FRAME_POINTER_REGNUM CRIS_FP_REGNUM\n \n /* Faked register, is always eliminated.  We need it to eliminate\n@@ -596,8 +605,9 @@ enum reg_class\n \n #define ELIMINABLE_REGS\t\t\t\t\\\n  {{ARG_POINTER_REGNUM, STACK_POINTER_REGNUM},\t\\\n-  {ARG_POINTER_REGNUM, FRAME_POINTER_REGNUM},\t\\\n-  {FRAME_POINTER_REGNUM, STACK_POINTER_REGNUM}}\n+  {ARG_POINTER_REGNUM, HARD_FRAME_POINTER_REGNUM},\t\\\n+  {FRAME_POINTER_REGNUM, STACK_POINTER_REGNUM},\t\\\n+  {FRAME_POINTER_REGNUM, HARD_FRAME_POINTER_REGNUM}}\n \n #define INITIAL_ELIMINATION_OFFSET(FROM, TO, OFFSET) \\\n  (OFFSET) = cris_initial_elimination_offset (FROM, TO)\n@@ -818,7 +828,8 @@ struct cum_args {int regs;};\n \n #define REGISTER_NAMES\t\t\t\t\t\\\n  {\"r0\", \"r1\", \"r2\", \"r3\", \"r4\", \"r5\", \"r6\", \"r7\", \"r8\",\t\\\n-  \"r9\", \"r10\", \"r11\", \"r12\", \"r13\", \"sp\", \"pc\", \"srp\", \"mof\", \"faked_ap\", \"dccr\"}\n+  \"r9\", \"r10\", \"r11\", \"r12\", \"r13\", \"sp\", \"pc\", \"srp\",\t\\\n+  \"mof\", \"faked_ap\", \"dccr\", \"faked_fp\"}\n \n #define ADDITIONAL_REGISTER_NAMES \\\n  {{\"r14\", 14}, {\"r15\", 15}}"}, {"sha": "7de0ec63fcf380bf3e59ff48ef107ad9a47538f5", "filename": "gcc/config/cris/cris.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa27696b798b34730f5266cac2adba9178ebc3ae/gcc%2Fconfig%2Fcris%2Fcris.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa27696b798b34730f5266cac2adba9178ebc3ae/gcc%2Fconfig%2Fcris%2Fcris.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.md?ref=aa27696b798b34730f5266cac2adba9178ebc3ae", "patch": "@@ -58,13 +58,14 @@\n ;; Register numbers.\n (define_constants\n   [(CRIS_STATIC_CHAIN_REGNUM 7)\n-   (CRIS_FP_REGNUM 8)\n+   (CRIS_REAL_FP_REGNUM 8)\n    (CRIS_SP_REGNUM 14)\n    (CRIS_ACR_REGNUM 15)\n    (CRIS_SRP_REGNUM 16)\n    (CRIS_MOF_REGNUM 17)\n    (CRIS_AP_REGNUM 18)\n-   (CRIS_CC0_REGNUM 19)]\n+   (CRIS_CC0_REGNUM 19)\n+   (CRIS_FP_REGNUM 20)]\n )\n \n ;; We need an attribute to define whether an instruction can be put in"}]}