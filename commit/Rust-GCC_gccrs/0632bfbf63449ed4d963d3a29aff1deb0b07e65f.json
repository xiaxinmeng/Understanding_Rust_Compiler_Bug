{"sha": "0632bfbf63449ed4d963d3a29aff1deb0b07e65f", "node_id": "C_kwDOANBUbNoAKDA2MzJiZmJmNjM0NDllZDRkOTYzZDNhMjlhZmYxZGViMGIwN2U2NWY", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2023-02-27T17:05:13Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-02-28T20:38:35Z"}, "message": "gccrs: autoderef unconstify so we can use in non const contexts\n\nSigned-off-by: Philip Herron <herron.philip@googlemail.com>\n\ngcc/rust/ChangeLog:\n\n\t* backend/rust-compile-base.h: unconsify\n\t* backend/rust-compile.cc (HIRCompileBase::coercion_site): likewise\n\t(HIRCompileBase::coercion_site1): likewise\n\t* typecheck/rust-autoderef.cc (Adjuster::try_deref_type): likewise\n\t(Adjuster::try_raw_deref_type): likewise\n\t(Adjuster::try_unsize_type): likewise\n\t(AutoderefCycle::cycle): likewise\n\t(AutoderefCycle::try_autoderefed): likewise\n\t* typecheck/rust-autoderef.h: likewise\n\t* typecheck/rust-coercion.cc (TypeCoercionRules::select): likewise\n\t* typecheck/rust-coercion.h: likewise\n\t* typecheck/rust-hir-dot-operator.cc (MethodResolver::Probe): likewise\n\t(MethodResolver::select): likewise\n\t* typecheck/rust-hir-dot-operator.h: likewise", "tree": {"sha": "b076365a6432bccdcbd22ae4fb3ab34238bbc0a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b076365a6432bccdcbd22ae4fb3ab34238bbc0a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0632bfbf63449ed4d963d3a29aff1deb0b07e65f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0632bfbf63449ed4d963d3a29aff1deb0b07e65f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0632bfbf63449ed4d963d3a29aff1deb0b07e65f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0632bfbf63449ed4d963d3a29aff1deb0b07e65f/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea139aa3818bf07f3ad565dd00889f4caa171c14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea139aa3818bf07f3ad565dd00889f4caa171c14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea139aa3818bf07f3ad565dd00889f4caa171c14"}], "stats": {"total": 86, "additions": 42, "deletions": 44}, "files": [{"sha": "a8f8f2d50dd172411f0ae7475d2ddbcedb926a57", "filename": "gcc/rust/backend/rust-compile-base.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0632bfbf63449ed4d963d3a29aff1deb0b07e65f/gcc%2Frust%2Fbackend%2Frust-compile-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0632bfbf63449ed4d963d3a29aff1deb0b07e65f/gcc%2Frust%2Fbackend%2Frust-compile-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-base.h?ref=0632bfbf63449ed4d963d3a29aff1deb0b07e65f", "patch": "@@ -40,11 +40,11 @@ class HIRCompileBase\n protected:\n   Context *get_context () { return ctx; }\n \n-  tree coercion_site (HirId id, tree rvalue, const TyTy::BaseType *actual,\n-\t\t      const TyTy::BaseType *expected, Location lvalue_locus,\n+  tree coercion_site (HirId id, tree rvalue, TyTy::BaseType *actual,\n+\t\t      TyTy::BaseType *expected, Location lvalue_locus,\n \t\t      Location rvalue_locus);\n-  tree coercion_site1 (tree rvalue, const TyTy::BaseType *actual,\n-\t\t       const TyTy::BaseType *expected, Location lvalue_locus,\n+  tree coercion_site1 (tree rvalue, TyTy::BaseType *actual,\n+\t\t       TyTy::BaseType *expected, Location lvalue_locus,\n \t\t       Location rvalue_locus);\n \n   tree coerce_to_dyn_object (tree compiled_ref, const TyTy::BaseType *actual,"}, {"sha": "3217901085583fc1f06c064042816df0ec3c929f", "filename": "gcc/rust/backend/rust-compile.cc", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0632bfbf63449ed4d963d3a29aff1deb0b07e65f/gcc%2Frust%2Fbackend%2Frust-compile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0632bfbf63449ed4d963d3a29aff1deb0b07e65f/gcc%2Frust%2Fbackend%2Frust-compile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile.cc?ref=0632bfbf63449ed4d963d3a29aff1deb0b07e65f", "patch": "@@ -54,10 +54,9 @@ CompileCrate::go ()\n // Shared methods in compilation\n \n tree\n-HIRCompileBase::coercion_site (HirId id, tree rvalue,\n-\t\t\t       const TyTy::BaseType *rval,\n-\t\t\t       const TyTy::BaseType *lval,\n-\t\t\t       Location lvalue_locus, Location rvalue_locus)\n+HIRCompileBase::coercion_site (HirId id, tree rvalue, TyTy::BaseType *rval,\n+\t\t\t       TyTy::BaseType *lval, Location lvalue_locus,\n+\t\t\t       Location rvalue_locus)\n {\n   std::vector<Resolver::Adjustment> *adjustments = nullptr;\n   bool ok = ctx->get_tyctx ()->lookup_autoderef_mappings (id, &adjustments);\n@@ -70,15 +69,15 @@ HIRCompileBase::coercion_site (HirId id, tree rvalue,\n }\n \n tree\n-HIRCompileBase::coercion_site1 (tree rvalue, const TyTy::BaseType *rval,\n-\t\t\t\tconst TyTy::BaseType *lval,\n-\t\t\t\tLocation lvalue_locus, Location rvalue_locus)\n+HIRCompileBase::coercion_site1 (tree rvalue, TyTy::BaseType *rval,\n+\t\t\t\tTyTy::BaseType *lval, Location lvalue_locus,\n+\t\t\t\tLocation rvalue_locus)\n {\n   if (rvalue == error_mark_node)\n     return error_mark_node;\n \n-  const TyTy::BaseType *actual = rval->destructure ();\n-  const TyTy::BaseType *expected = lval->destructure ();\n+  TyTy::BaseType *actual = rval->destructure ();\n+  TyTy::BaseType *expected = lval->destructure ();\n \n   if (expected->get_kind () == TyTy::TypeKind::REF)\n     {"}, {"sha": "b2cddb3f6b06132aa868d9a76c573e40abe95f07", "filename": "gcc/rust/typecheck/rust-autoderef.cc", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0632bfbf63449ed4d963d3a29aff1deb0b07e65f/gcc%2Frust%2Ftypecheck%2Frust-autoderef.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0632bfbf63449ed4d963d3a29aff1deb0b07e65f/gcc%2Frust%2Ftypecheck%2Frust-autoderef.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-autoderef.cc?ref=0632bfbf63449ed4d963d3a29aff1deb0b07e65f", "patch": "@@ -26,7 +26,7 @@ namespace Resolver {\n \n static bool\n resolve_operator_overload_fn (\n-  Analysis::RustLangItem::ItemType lang_item_type, const TyTy::BaseType *ty,\n+  Analysis::RustLangItem::ItemType lang_item_type, TyTy::BaseType *ty,\n   TyTy::FnType **resolved_fn, HIR::ImplItem **impl_item,\n   Adjustment::AdjustmentType *requires_ref_adjustment);\n \n@@ -40,7 +40,7 @@ Adjuster::adjust_type (const std::vector<Adjustment> &adjustments)\n }\n \n Adjustment\n-Adjuster::try_deref_type (const TyTy::BaseType *ty,\n+Adjuster::try_deref_type (TyTy::BaseType *ty,\n \t\t\t  Analysis::RustLangItem::ItemType deref_lang_item)\n {\n   HIR::ImplItem *impl_item = nullptr;\n@@ -85,7 +85,7 @@ Adjuster::try_deref_type (const TyTy::BaseType *ty,\n }\n \n Adjustment\n-Adjuster::try_raw_deref_type (const TyTy::BaseType *ty)\n+Adjuster::try_raw_deref_type (TyTy::BaseType *ty)\n {\n   bool is_valid_type = ty->get_kind () == TyTy::TypeKind::REF;\n   if (!is_valid_type)\n@@ -99,7 +99,7 @@ Adjuster::try_raw_deref_type (const TyTy::BaseType *ty)\n }\n \n Adjustment\n-Adjuster::try_unsize_type (const TyTy::BaseType *ty)\n+Adjuster::try_unsize_type (TyTy::BaseType *ty)\n {\n   bool is_valid_type = ty->get_kind () == TyTy::TypeKind::ARRAY;\n   if (!is_valid_type)\n@@ -121,7 +121,7 @@ Adjuster::try_unsize_type (const TyTy::BaseType *ty)\n \n static bool\n resolve_operator_overload_fn (\n-  Analysis::RustLangItem::ItemType lang_item_type, const TyTy::BaseType *ty,\n+  Analysis::RustLangItem::ItemType lang_item_type, TyTy::BaseType *ty,\n   TyTy::FnType **resolved_fn, HIR::ImplItem **impl_item,\n   Adjustment::AdjustmentType *requires_ref_adjustment)\n {\n@@ -292,9 +292,9 @@ AutoderefCycle::try_hook (const TyTy::BaseType &)\n {}\n \n bool\n-AutoderefCycle::cycle (const TyTy::BaseType *receiver)\n+AutoderefCycle::cycle (TyTy::BaseType *receiver)\n {\n-  const TyTy::BaseType *r = receiver;\n+  TyTy::BaseType *r = receiver;\n   while (true)\n     {\n       rust_debug (\"autoderef try 1: {%s}\", r->debug_str ().c_str ());\n@@ -382,7 +382,7 @@ AutoderefCycle::cycle (const TyTy::BaseType *receiver)\n }\n \n bool\n-AutoderefCycle::try_autoderefed (const TyTy::BaseType *r)\n+AutoderefCycle::try_autoderefed (TyTy::BaseType *r)\n {\n   try_hook (*r);\n "}, {"sha": "1d5dacfc55dda0b9e3e9833940e7b1d3704597ed", "filename": "gcc/rust/typecheck/rust-autoderef.h", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0632bfbf63449ed4d963d3a29aff1deb0b07e65f/gcc%2Frust%2Ftypecheck%2Frust-autoderef.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0632bfbf63449ed4d963d3a29aff1deb0b07e65f/gcc%2Frust%2Ftypecheck%2Frust-autoderef.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-autoderef.h?ref=0632bfbf63449ed4d963d3a29aff1deb0b07e65f", "patch": "@@ -40,15 +40,15 @@ class Adjustment\n   };\n \n   // ctor for all adjustments except derefs\n-  Adjustment (AdjustmentType type, const TyTy::BaseType *actual,\n-\t      const TyTy::BaseType *expected)\n+  Adjustment (AdjustmentType type, TyTy::BaseType *actual,\n+\t      TyTy::BaseType *expected)\n     : Adjustment (type, actual, expected, nullptr, nullptr,\n \t\t  AdjustmentType::ERROR)\n   {}\n \n   static Adjustment get_op_overload_deref_adjustment (\n-    AdjustmentType type, const TyTy::BaseType *actual,\n-    const TyTy::BaseType *expected, TyTy::FnType *fn, HIR::ImplItem *deref_item,\n+    AdjustmentType type, TyTy::BaseType *actual, TyTy::BaseType *expected,\n+    TyTy::FnType *fn, HIR::ImplItem *deref_item,\n     Adjustment::AdjustmentType requires_ref_adjustment)\n   {\n     rust_assert (type == DEREF || type == DEREF_MUT);\n@@ -58,8 +58,8 @@ class Adjustment\n \n   AdjustmentType get_type () const { return type; }\n \n-  const TyTy::BaseType *get_actual () const { return actual; }\n-  const TyTy::BaseType *get_expected () const { return expected; }\n+  TyTy::BaseType *get_actual () const { return actual; }\n+  TyTy::BaseType *get_expected () const { return expected; }\n \n   std::string as_string () const\n   {\n@@ -110,8 +110,8 @@ class Adjustment\n   HIR::ImplItem *get_deref_hir_item () const { return deref_item; }\n \n private:\n-  Adjustment (AdjustmentType type, const TyTy::BaseType *actual,\n-\t      const TyTy::BaseType *expected, TyTy::FnType *deref_operator_fn,\n+  Adjustment (AdjustmentType type, TyTy::BaseType *actual,\n+\t      TyTy::BaseType *expected, TyTy::FnType *deref_operator_fn,\n \t      HIR::ImplItem *deref_item,\n \t      Adjustment::AdjustmentType requires_ref_adjustment)\n     : type (type), actual (actual), expected (expected),\n@@ -120,8 +120,8 @@ class Adjustment\n   {}\n \n   AdjustmentType type;\n-  const TyTy::BaseType *actual;\n-  const TyTy::BaseType *expected;\n+  TyTy::BaseType *actual;\n+  TyTy::BaseType *expected;\n \n   // - only used for deref operator_overloads\n   //\n@@ -140,12 +140,12 @@ class Adjuster\n   TyTy::BaseType *adjust_type (const std::vector<Adjustment> &adjustments);\n \n   static Adjustment\n-  try_deref_type (const TyTy::BaseType *ty,\n+  try_deref_type (TyTy::BaseType *ty,\n \t\t  Analysis::RustLangItem::ItemType deref_lang_item);\n \n-  static Adjustment try_raw_deref_type (const TyTy::BaseType *ty);\n+  static Adjustment try_raw_deref_type (TyTy::BaseType *ty);\n \n-  static Adjustment try_unsize_type (const TyTy::BaseType *ty);\n+  static Adjustment try_unsize_type (TyTy::BaseType *ty);\n \n private:\n   const TyTy::BaseType *base;\n@@ -158,15 +158,15 @@ class AutoderefCycle\n \n   virtual ~AutoderefCycle ();\n \n-  virtual bool select (const TyTy::BaseType &autoderefed) = 0;\n+  virtual bool select (TyTy::BaseType &autoderefed) = 0;\n \n   // optional: this is a chance to hook in to grab predicate items on the raw\n   // type\n   virtual void try_hook (const TyTy::BaseType &);\n \n-  virtual bool cycle (const TyTy::BaseType *receiver);\n+  virtual bool cycle (TyTy::BaseType *receiver);\n \n-  bool try_autoderefed (const TyTy::BaseType *r);\n+  bool try_autoderefed (TyTy::BaseType *r);\n \n   bool autoderef_flag;\n   std::vector<Adjustment> adjustments;"}, {"sha": "c07ee733514ea30543d6302c673ac8d22ce34731", "filename": "gcc/rust/typecheck/rust-coercion.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0632bfbf63449ed4d963d3a29aff1deb0b07e65f/gcc%2Frust%2Ftypecheck%2Frust-coercion.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0632bfbf63449ed4d963d3a29aff1deb0b07e65f/gcc%2Frust%2Ftypecheck%2Frust-coercion.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-coercion.cc?ref=0632bfbf63449ed4d963d3a29aff1deb0b07e65f", "patch": "@@ -373,7 +373,7 @@ TypeCoercionRules::coerce_unsized (TyTy::BaseType *source,\n }\n \n bool\n-TypeCoercionRules::select (const TyTy::BaseType &autoderefed)\n+TypeCoercionRules::select (TyTy::BaseType &autoderefed)\n {\n   rust_debug (\n     \"autoderef type-coercion select autoderefed={%s} can_eq expected={%s}\","}, {"sha": "0a55b8598d8cf9c24e50e8ad21907d1232f0ae8c", "filename": "gcc/rust/typecheck/rust-coercion.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0632bfbf63449ed4d963d3a29aff1deb0b07e65f/gcc%2Frust%2Ftypecheck%2Frust-coercion.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0632bfbf63449ed4d963d3a29aff1deb0b07e65f/gcc%2Frust%2Ftypecheck%2Frust-coercion.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-coercion.h?ref=0632bfbf63449ed4d963d3a29aff1deb0b07e65f", "patch": "@@ -71,7 +71,7 @@ class TypeCoercionRules : protected AutoderefCycle\n   TypeCoercionRules (TyTy::BaseType *expected, Location locus, bool emit_errors,\n \t\t     bool allow_autoderef);\n \n-  bool select (const TyTy::BaseType &autoderefed) override;\n+  bool select (TyTy::BaseType &autoderefed) override;\n \n   bool do_coercion (TyTy::BaseType *receiver);\n "}, {"sha": "4a291e13e5b73f7ecc78440f56abfa8b1689770f", "filename": "gcc/rust/typecheck/rust-hir-dot-operator.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0632bfbf63449ed4d963d3a29aff1deb0b07e65f/gcc%2Frust%2Ftypecheck%2Frust-hir-dot-operator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0632bfbf63449ed4d963d3a29aff1deb0b07e65f/gcc%2Frust%2Ftypecheck%2Frust-hir-dot-operator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-dot-operator.cc?ref=0632bfbf63449ed4d963d3a29aff1deb0b07e65f", "patch": "@@ -29,7 +29,7 @@ MethodResolver::MethodResolver (bool autoderef_flag,\n {}\n \n std::set<MethodCandidate>\n-MethodResolver::Probe (const TyTy::BaseType *receiver,\n+MethodResolver::Probe (TyTy::BaseType *receiver,\n \t\t       const HIR::PathIdentSegment &segment_name,\n \t\t       bool autoderef_flag)\n {\n@@ -46,7 +46,7 @@ MethodResolver::try_hook (const TyTy::BaseType &r)\n }\n \n bool\n-MethodResolver::select (const TyTy::BaseType &receiver)\n+MethodResolver::select (TyTy::BaseType &receiver)\n {\n   struct impl_item_candidate\n   {"}, {"sha": "75927ff5ae23ccb10a9599572114afb24e3d7356", "filename": "gcc/rust/typecheck/rust-hir-dot-operator.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0632bfbf63449ed4d963d3a29aff1deb0b07e65f/gcc%2Frust%2Ftypecheck%2Frust-hir-dot-operator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0632bfbf63449ed4d963d3a29aff1deb0b07e65f/gcc%2Frust%2Ftypecheck%2Frust-hir-dot-operator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-dot-operator.h?ref=0632bfbf63449ed4d963d3a29aff1deb0b07e65f", "patch": "@@ -54,8 +54,7 @@ class MethodResolver : private TypeCheckBase, protected AutoderefCycle\n   };\n \n   static std::set<MethodCandidate>\n-  Probe (const TyTy::BaseType *receiver,\n-\t const HIR::PathIdentSegment &segment_name,\n+  Probe (TyTy::BaseType *receiver, const HIR::PathIdentSegment &segment_name,\n \t bool autoderef_flag = false);\n \n   static std::vector<predicate_candidate> get_predicate_items (\n@@ -68,7 +67,7 @@ class MethodResolver : private TypeCheckBase, protected AutoderefCycle\n \n   void try_hook (const TyTy::BaseType &r) override;\n \n-  bool select (const TyTy::BaseType &receiver) override;\n+  bool select (TyTy::BaseType &receiver) override;\n \n private:\n   // search"}]}