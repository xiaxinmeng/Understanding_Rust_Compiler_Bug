{"sha": "2ddd46d69b09a88fb82832285b69090fa08bddc2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmRkZDQ2ZDY5YjA5YTg4ZmI4MjgzMjI4NWI2OTA5MGZhMDhiZGRjMg==", "commit": {"author": {"name": "Ilya Tocar", "email": "ilya.tocar@intel.com", "date": "2011-08-30T14:02:53Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2011-08-30T14:02:53Z"}, "message": "Add FMA intrinsics and testcases.\n\ngcc/\n\n2011-08-30  Ilya Tocar  <ilya.tocar@intel.com>\n\n\t* config/i386/fmaintrin.h: New.\n\t* config.gcc: Add fmaintrin.h.\n\t* config/i386/i386.c\n\t(enum ix86_builtins) <IX86_BUILTIN_VFMADDSS3>: New.\n\t<IX86_BUILTIN_VFMADDSD3>: Likewise.\n\t* config/i386/sse.md (fmai_vmfmadd_<mode>): New.\n\t(*fmai_fmadd_<mode>): Likewise.\n\t(*fmai_fmsub_<mode>): Likewise.\n\t(*fmai_fnmadd_<mode>): Likewise.\n\t(*fmai_fnmsub_<mode>): Likewise.\n\t* config/i386/immintrin.h: Add fmaintrin.h.\n\ngcc/testsuite/\n\n2011-08-30  Ilya Tocar <ilya.tocar@intel.com>\n\n\t* gcc.target/i386/fma-check.h: New.\n\t* gcc.target/i386/fma-256-fmaddXX.c: New testcase.\n\t* gcc.target/i386/fma-256-fmaddsubXX.c: Likewise.\n\t* gcc.target/i386/fma-256-fmsubXX.c: Likewise.\n\t* gcc.target/i386/fma-256-fmsubaddXX.c: Likewise.\n\t* gcc.target/i386/fma-256-fnmaddXX.c: Likewise.\n\t* gcc.target/i386/fma-256-fnmsubXX.c: Likewise.\n\t* gcc.target/i386/fma-fmaddXX.c: Likewise.\n\t* gcc.target/i386/fma-fmaddsubXX.c: Likewise.\n\t* gcc.target/i386/fma-fmsubXX.c: Likewise.\n\t* gcc.target/i386/fma-fmsubaddXX.c: Likewise.\n\t* gcc.target/i386/fma-fnmaddXX.c: Likewise.\n\t* gcc.target/i386/fma-fnmsubXX.c: Likewise.\n\t* gcc.target/i386/fma-compile.c: Likewise.\n\t* gcc.target/i386/i386.exp (check_effective_target_fma): New.\n\t* gcc.target/i386/sse-12.c: Add -mfma.\n\t* gcc.target/i386/sse-13.c: Likewise.\n\t* gcc.target/i386/sse-14.c: Likewise.\n\t* gcc.target/i386/sse-22.c: Likewise.\n\t* gcc.target/i386/sse-23.c: Likewise.\n\t* g++.dg/other/i386-2.C: Likewise.\n\t* g++.dg/other/i386-3.C: Likewise.\n\nFrom-SVN: r178311", "tree": {"sha": "175e06db22b216944eb8ef409716322c278cd349", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/175e06db22b216944eb8ef409716322c278cd349"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ddd46d69b09a88fb82832285b69090fa08bddc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ddd46d69b09a88fb82832285b69090fa08bddc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ddd46d69b09a88fb82832285b69090fa08bddc2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ddd46d69b09a88fb82832285b69090fa08bddc2/comments", "author": {"login": "TocarIP", "id": 16836375, "node_id": "MDQ6VXNlcjE2ODM2Mzc1", "avatar_url": "https://avatars.githubusercontent.com/u/16836375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TocarIP", "html_url": "https://github.com/TocarIP", "followers_url": "https://api.github.com/users/TocarIP/followers", "following_url": "https://api.github.com/users/TocarIP/following{/other_user}", "gists_url": "https://api.github.com/users/TocarIP/gists{/gist_id}", "starred_url": "https://api.github.com/users/TocarIP/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TocarIP/subscriptions", "organizations_url": "https://api.github.com/users/TocarIP/orgs", "repos_url": "https://api.github.com/users/TocarIP/repos", "events_url": "https://api.github.com/users/TocarIP/events{/privacy}", "received_events_url": "https://api.github.com/users/TocarIP/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c199ccf75867fa7287570ff1ec19ef76cc9d5ea6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c199ccf75867fa7287570ff1ec19ef76cc9d5ea6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c199ccf75867fa7287570ff1ec19ef76cc9d5ea6"}], "stats": {"total": 1635, "additions": 1614, "deletions": 21}, "files": [{"sha": "03db902f3cdcfb2cf3d243603479eebba59a9741", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddd46d69b09a88fb82832285b69090fa08bddc2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddd46d69b09a88fb82832285b69090fa08bddc2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2ddd46d69b09a88fb82832285b69090fa08bddc2", "patch": "@@ -1,3 +1,17 @@\n+2011-08-30  Ilya Tocar  <ilya.tocar@intel.com>\n+\n+\t* config/i386/fmaintrin.h: New.\n+\t* config.gcc: Add fmaintrin.h.\n+\t* config/i386/i386.c\n+\t(enum ix86_builtins) <IX86_BUILTIN_VFMADDSS3>: New.\n+\t<IX86_BUILTIN_VFMADDSD3>: Likewise.\n+\t* config/i386/sse.md (fmai_vmfmadd_<mode>): New.\n+\t(*fmai_fmadd_<mode>): Likewise.\n+\t(*fmai_fmsub_<mode>): Likewise.\n+\t(*fmai_fnmadd_<mode>): Likewise.\n+\t(*fmai_fnmsub_<mode>): Likewise.\n+\t* config/i386/immintrin.h: Add fmaintrin.h.\n+\n 2011-08-30  Bernd Schmidt  <bernds@codesourcery.com>\n \n \t* genautomata.c (NO_COMB_OPTION): New macro."}, {"sha": "81b542c7e4c08032fca6e580c0f51dc46b900741", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddd46d69b09a88fb82832285b69090fa08bddc2/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddd46d69b09a88fb82832285b69090fa08bddc2/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=2ddd46d69b09a88fb82832285b69090fa08bddc2", "patch": "@@ -353,7 +353,7 @@ i[34567]86-*-*)\n \t\t       immintrin.h x86intrin.h avxintrin.h xopintrin.h\n \t\t       ia32intrin.h cross-stdarg.h lwpintrin.h popcntintrin.h\n \t\t       lzcntintrin.h bmiintrin.h bmi2intrin.h tbmintrin.h\n-\t\t       avx2intrin.h\"\n+\t\t       avx2intrin.h fmaintrin.h\"\n \t;;\n x86_64-*-*)\n \tcpu_type=i386\n@@ -366,7 +366,7 @@ x86_64-*-*)\n \t\t       immintrin.h x86intrin.h avxintrin.h xopintrin.h\n \t\t       ia32intrin.h cross-stdarg.h lwpintrin.h popcntintrin.h\n \t\t       lzcntintrin.h bmiintrin.h tbmintrin.h bmi2intrin.h\n-\t\t       avx2intrin.h\"\n+\t\t       avx2intrin.h fmaintrin.h\"\n \tneed_64bit_hwint=yes\n \t;;\n ia64-*-*)"}, {"sha": "9ec9d17a3303e8f52520477a0dc62056f8c19b66", "filename": "gcc/config/i386/fmaintrin.h", "status": "added", "additions": 297, "deletions": 0, "changes": 297, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddd46d69b09a88fb82832285b69090fa08bddc2/gcc%2Fconfig%2Fi386%2Ffmaintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddd46d69b09a88fb82832285b69090fa08bddc2/gcc%2Fconfig%2Fi386%2Ffmaintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ffmaintrin.h?ref=2ddd46d69b09a88fb82832285b69090fa08bddc2", "patch": "@@ -0,0 +1,297 @@\n+/* Copyright (C) 2011 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef _IMMINTRIN_H_INCLUDED\n+# error \"Never use <fmaintrin.h> directly; include <immintrin.h> instead.\"\n+#endif\n+\n+#ifndef _FMAINTRIN_H_INCLUDED\n+#define _FMAINTRIN_H_INCLUDED\n+\n+#ifndef __FMA__\n+# error \"FMA instruction set not enabled\"\n+#else\n+\n+extern __inline __m128d\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_fmadd_pd (__m128d __A, __m128d __B, __m128d __C)\n+{\n+  return (__m128d)__builtin_ia32_vfmaddpd ((__v2df)__A, (__v2df)__B,\n+                                           (__v2df)__C);\n+}\n+\n+extern __inline __m256d\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_fmadd_pd (__m256d __A, __m256d __B, __m256d __C)\n+{\n+  return (__m256d)__builtin_ia32_vfmaddpd256 ((__v4df)__A, (__v4df)__B,\n+                                              (__v4df)__C);\n+}\n+\n+extern __inline __m128\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_fmadd_ps (__m128 __A, __m128 __B, __m128 __C)\n+{\n+  return (__m128)__builtin_ia32_vfmaddps ((__v4sf)__A, (__v4sf)__B,\n+                                          (__v4sf)__C);\n+}\n+\n+extern __inline __m256\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_fmadd_ps (__m256 __A, __m256 __B, __m256 __C)\n+{\n+  return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,\n+                                             (__v8sf)__C);\n+}\n+\n+extern __inline __m128d\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_fmadd_sd (__m128d __A, __m128d __B, __m128d __C)\n+{\n+  return (__m128d) __builtin_ia32_vfmaddsd3 ((__v2df)__A, (__v2df)__B,\n+                                             (__v2df)__C);\n+}\n+\n+extern __inline __m128\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_fmadd_ss (__m128 __A, __m128 __B, __m128 __C)\n+{\n+  return (__m128) __builtin_ia32_vfmaddss3 ((__v4sf)__A, (__v4sf)__B,\n+                                            (__v4sf)__C);\n+}\n+\n+extern __inline __m128d\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_fmsub_pd (__m128d __A, __m128d __B, __m128d __C)\n+{\n+  return (__m128d)__builtin_ia32_vfmaddpd ((__v2df)__A, (__v2df)__B,\n+                                           -(__v2df)__C);\n+}\n+\n+extern __inline __m256d\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_fmsub_pd (__m256d __A, __m256d __B, __m256d __C)\n+{\n+  return (__m256d)__builtin_ia32_vfmaddpd256 ((__v4df)__A, (__v4df)__B,\n+                                              -(__v4df)__C);\n+}\n+\n+extern __inline __m128\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_fmsub_ps (__m128 __A, __m128 __B, __m128 __C)\n+{\n+  return (__m128)__builtin_ia32_vfmaddps ((__v4sf)__A, (__v4sf)__B,\n+                                          -(__v4sf)__C);\n+}\n+\n+extern __inline __m256\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_fmsub_ps (__m256 __A, __m256 __B, __m256 __C)\n+{\n+  return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,\n+                                             -(__v8sf)__C);\n+}\n+\n+extern __inline __m128d\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_fmsub_sd (__m128d __A, __m128d __B, __m128d __C)\n+{\n+  return (__m128d)__builtin_ia32_vfmaddsd3 ((__v2df)__A, (__v2df)__B,\n+                                            -(__v2df)__C);\n+}\n+\n+extern __inline __m128\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_fmsub_ss (__m128 __A, __m128 __B, __m128 __C)\n+{\n+  return (__m128)__builtin_ia32_vfmaddss3 ((__v4sf)__A, (__v4sf)__B,\n+                                           -(__v4sf)__C);\n+}\n+\n+extern __inline __m128d\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_fnmadd_pd (__m128d __A, __m128d __B, __m128d __C)\n+{\n+  return (__m128d)__builtin_ia32_vfmaddpd (-(__v2df)__A, (__v2df)__B,\n+                                           (__v2df)__C);\n+}\n+\n+extern __inline __m256d\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_fnmadd_pd (__m256d __A, __m256d __B, __m256d __C)\n+{\n+  return (__m256d)__builtin_ia32_vfmaddpd256 (-(__v4df)__A, (__v4df)__B,\n+                                              (__v4df)__C);\n+}\n+\n+extern __inline __m128\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_fnmadd_ps (__m128 __A, __m128 __B, __m128 __C)\n+{\n+  return (__m128)__builtin_ia32_vfmaddps (-(__v4sf)__A, (__v4sf)__B,\n+                                          (__v4sf)__C);\n+}\n+\n+extern __inline __m256\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_fnmadd_ps (__m256 __A, __m256 __B, __m256 __C)\n+{\n+  return (__m256)__builtin_ia32_vfmaddps256 (-(__v8sf)__A, (__v8sf)__B,\n+                                             (__v8sf)__C);\n+}\n+\n+extern __inline __m128d\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_fnmadd_sd (__m128d __A, __m128d __B, __m128d __C)\n+{\n+  return (__m128d)__builtin_ia32_vfmaddsd3 (-(__v2df)__A, (__v2df)__B,\n+                                            (__v2df)__C);\n+}\n+\n+extern __inline __m128\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_fnmadd_ss (__m128 __A, __m128 __B, __m128 __C)\n+{\n+  return (__m128)__builtin_ia32_vfmaddss3 (-(__v4sf)__A, (__v4sf)__B,\n+                                           (__v4sf)__C);\n+}\n+\n+extern __inline __m128d\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_fnmsub_pd (__m128d __A, __m128d __B, __m128d __C)\n+{\n+  return (__m128d)__builtin_ia32_vfmaddpd (-(__v2df)__A, (__v2df)__B,\n+                                           -(__v2df)__C);\n+}\n+\n+extern __inline __m256d\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_fnmsub_pd (__m256d __A, __m256d __B, __m256d __C)\n+{\n+  return (__m256d)__builtin_ia32_vfmaddpd256 (-(__v4df)__A, (__v4df)__B,\n+                                              -(__v4df)__C);\n+}\n+\n+extern __inline __m128\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_fnmsub_ps (__m128 __A, __m128 __B, __m128 __C)\n+{\n+  return (__m128)__builtin_ia32_vfmaddps (-(__v4sf)__A, (__v4sf)__B,\n+                                          -(__v4sf)__C);\n+}\n+\n+extern __inline __m256\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_fnmsub_ps (__m256 __A, __m256 __B, __m256 __C)\n+{\n+  return (__m256)__builtin_ia32_vfmaddps256 (-(__v8sf)__A, (__v8sf)__B,\n+                                             -(__v8sf)__C);\n+}\n+\n+extern __inline __m128d\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_fnmsub_sd (__m128d __A, __m128d __B, __m128d __C)\n+{\n+  return (__m128d)__builtin_ia32_vfmaddsd3 (-(__v2df)__A, (__v2df)__B,\n+                                            -(__v2df)__C);\n+}\n+\n+extern __inline __m128\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_fnmsub_ss (__m128 __A, __m128 __B, __m128 __C)\n+{\n+  return (__m128)__builtin_ia32_vfmaddss3 (-(__v4sf)__A, (__v4sf)__B,\n+                                           -(__v4sf)__C);\n+}\n+\n+extern __inline __m128d\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_fmaddsub_pd (__m128d __A, __m128d __B, __m128d __C)\n+{\n+  return (__m128d)__builtin_ia32_vfmaddsubpd ((__v2df)__A, (__v2df)__B,\n+                                              (__v2df)__C);\n+}\n+\n+extern __inline __m256d\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_fmaddsub_pd (__m256d __A, __m256d __B, __m256d __C)\n+{\n+  return (__m256d)__builtin_ia32_vfmaddsubpd256 ((__v4df)__A,\n+                                                 (__v4df)__B,\n+                                                 (__v4df)__C);\n+}\n+\n+extern __inline __m128\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_fmaddsub_ps (__m128 __A, __m128 __B, __m128 __C)\n+{\n+  return (__m128)__builtin_ia32_vfmaddsubps ((__v4sf)__A, (__v4sf)__B,\n+                                             (__v4sf)__C);\n+}\n+\n+extern __inline __m256\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_fmaddsub_ps (__m256 __A, __m256 __B, __m256 __C)\n+{\n+  return (__m256)__builtin_ia32_vfmaddsubps256 ((__v8sf)__A,\n+                                                (__v8sf)__B,\n+                                                (__v8sf)__C);\n+}\n+\n+extern __inline __m128d\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_fmsubadd_pd (__m128d __A, __m128d __B, __m128d __C)\n+{\n+  return (__m128d)__builtin_ia32_vfmaddsubpd ((__v2df)__A, (__v2df)__B,\n+                                              -(__v2df)__C);\n+}\n+\n+extern __inline __m256d\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_fmsubadd_pd (__m256d __A, __m256d __B, __m256d __C)\n+{\n+  return (__m256d)__builtin_ia32_vfmaddsubpd256 ((__v4df)__A,\n+                                                 (__v4df)__B,\n+                                                 -(__v4df)__C);\n+}\n+\n+extern __inline __m128\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_fmsubadd_ps (__m128 __A, __m128 __B, __m128 __C)\n+{\n+  return (__m128)__builtin_ia32_vfmaddsubps ((__v4sf)__A, (__v4sf)__B,\n+                                             -(__v4sf)__C);\n+}\n+\n+extern __inline __m256\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_fmsubadd_ps (__m256 __A, __m256 __B, __m256 __C)\n+{\n+  return (__m256)__builtin_ia32_vfmaddsubps256 ((__v8sf)__A,\n+                                                (__v8sf)__B,\n+                                                -(__v8sf)__C);\n+}\n+\n+#endif\n+\n+#endif"}, {"sha": "504f013088ea7b576214804bbc7670bfe67b01f4", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddd46d69b09a88fb82832285b69090fa08bddc2/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddd46d69b09a88fb82832285b69090fa08bddc2/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=2ddd46d69b09a88fb82832285b69090fa08bddc2", "patch": "@@ -24055,7 +24055,7 @@ enum ix86_builtins\n   IX86_BUILTIN_VEC_PERM_V4DF,\n   IX86_BUILTIN_VEC_PERM_V8SF,\n \n-  /* FMA4 and XOP instructions.  */\n+  /* FMA4 instructions.  */\n   IX86_BUILTIN_VFMADDSS,\n   IX86_BUILTIN_VFMADDSD,\n   IX86_BUILTIN_VFMADDPS,\n@@ -24067,6 +24067,11 @@ enum ix86_builtins\n   IX86_BUILTIN_VFMADDSUBPS256,\n   IX86_BUILTIN_VFMADDSUBPD256,\n \n+  /* FMA3 instructions.  */\n+  IX86_BUILTIN_VFMADDSS3,\n+  IX86_BUILTIN_VFMADDSD3,\n+\n+  /* XOP instructions.  */\n   IX86_BUILTIN_VPCMOV,\n   IX86_BUILTIN_VPCMOV_V2DI,\n   IX86_BUILTIN_VPCMOV_V4SI,\n@@ -25450,6 +25455,13 @@ static const struct builtin_description bdesc_multi_arg[] =\n     \"__builtin_ia32_vfmaddsd\", IX86_BUILTIN_VFMADDSD,\n     UNKNOWN, (int)MULTI_ARG_3_DF },\n \n+  { OPTION_MASK_ISA_FMA, CODE_FOR_fmai_vmfmadd_v4sf,\n+    \"__builtin_ia32_vfmaddss3\", IX86_BUILTIN_VFMADDSS3,\n+    UNKNOWN, (int)MULTI_ARG_3_SF },\n+  { OPTION_MASK_ISA_FMA, CODE_FOR_fmai_vmfmadd_v2df,\n+    \"__builtin_ia32_vfmaddsd3\", IX86_BUILTIN_VFMADDSD3,\n+    UNKNOWN, (int)MULTI_ARG_3_DF },\n+\n   { OPTION_MASK_ISA_FMA | OPTION_MASK_ISA_FMA4, CODE_FOR_fma4i_fmadd_v4sf,\n     \"__builtin_ia32_vfmaddps\", IX86_BUILTIN_VFMADDPS,\n     UNKNOWN, (int)MULTI_ARG_3_SF },"}, {"sha": "102814e2b90aeeaa703d2f75e880b1b511c65cbe", "filename": "gcc/config/i386/immintrin.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddd46d69b09a88fb82832285b69090fa08bddc2/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddd46d69b09a88fb82832285b69090fa08bddc2/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fimmintrin.h?ref=2ddd46d69b09a88fb82832285b69090fa08bddc2", "patch": "@@ -72,6 +72,10 @@\n #include <bmi2intrin.h>\n #endif\n \n+#ifdef __FMA__\n+#include <fmaintrin.h>\n+#endif\n+\n #ifdef __RDRND__\n extern __inline int\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))"}, {"sha": "8ce3e3ad4e2b8b20a1e8eb76cf049e031310a0b9", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddd46d69b09a88fb82832285b69090fa08bddc2/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddd46d69b09a88fb82832285b69090fa08bddc2/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=2ddd46d69b09a88fb82832285b69090fa08bddc2", "patch": "@@ -1719,6 +1719,89 @@\n   operands[4] = CONST0_RTX (<MODE>mode);\n })\n \n+(define_expand \"fmai_vmfmadd_<mode>\"\n+  [(set (match_operand:VF_128 0 \"register_operand\")\n+\t(vec_merge:VF_128\n+\t  (fma:VF_128\n+\t    (match_operand:VF_128 1 \"nonimmediate_operand\")\n+\t    (match_operand:VF_128 2 \"nonimmediate_operand\")\n+\t    (match_operand:VF_128 3 \"nonimmediate_operand\"))\n+\t  (match_dup 0)\n+\t  (const_int 1)))]\n+  \"TARGET_FMA\")\n+\n+(define_insn \"*fmai_fmadd_<mode>\"\n+  [(set (match_operand:VF_128 0 \"register_operand\" \"=x,x,x\")\n+        (vec_merge:VF_128\n+\t  (fma:VF_128\n+\t    (match_operand:VF_128 1 \"nonimmediate_operand\" \"%0, 0,x\")\n+\t    (match_operand:VF_128 2 \"nonimmediate_operand\" \"xm, x,xm\")\n+\t    (match_operand:VF_128 3 \"nonimmediate_operand\" \" x,xm,0\"))\n+\t  (match_dup 0)\n+\t  (const_int 1)))]\n+  \"TARGET_FMA\"\n+  \"@\n+   vfmadd132<ssescalarmodesuffix>\\t{%2, %3, %0|%0, %3, %2}\n+   vfmadd213<ssescalarmodesuffix>\\t{%3, %2, %0|%0, %2, %3}\n+   vfmadd231<ssescalarmodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"ssemuladd\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"*fmai_fmsub_<mode>\"\n+  [(set (match_operand:VF_128 0 \"register_operand\" \"=x,x,x\")\n+        (vec_merge:VF_128\n+\t  (fma:VF_128\n+\t    (match_operand:VF_128   1 \"nonimmediate_operand\" \"%0, 0,x\")\n+\t    (match_operand:VF_128   2 \"nonimmediate_operand\" \"xm, x,xm\")\n+\t    (neg:VF_128\n+\t      (match_operand:VF_128 3 \"nonimmediate_operand\" \" x,xm,0\")))\n+\t  (match_dup 0)\n+\t  (const_int 1)))]\n+  \"TARGET_FMA\"\n+  \"@\n+   vfmsub132<ssescalarmodesuffix>\\t{%2, %3, %0|%0, %3, %2}\n+   vfmsub213<ssescalarmodesuffix>\\t{%3, %2, %0|%0, %2, %3}\n+   vfmsub231<ssescalarmodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"ssemuladd\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"*fmai_fnmadd_<mode>\"\n+  [(set (match_operand:VF_128 0 \"register_operand\" \"=x,x,x\")\n+        (vec_merge:VF_128\n+\t  (fma:VF_128\n+\t    (neg:VF_128\n+\t      (match_operand:VF_128 1 \"nonimmediate_operand\" \"%0, 0,x\"))\n+\t    (match_operand:VF_128   2 \"nonimmediate_operand\" \"xm, x,xm\")\n+\t    (match_operand:VF_128   3 \"nonimmediate_operand\" \" x,xm,0\"))\n+\t  (match_dup 0)\n+\t  (const_int 1)))]\n+  \"TARGET_FMA\"\n+  \"@\n+   vfnmadd132<ssescalarmodesuffix>\\t{%2, %3, %0|%0, %3, %2}\n+   vfnmadd213<ssescalarmodesuffix>\\t{%3, %2, %0|%0, %2, %3}\n+   vfnmadd231<ssescalarmodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"ssemuladd\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"*fmai_fnmsub_<mode>\"\n+  [(set (match_operand:VF_128 0 \"register_operand\" \"=x,x,x\")\n+        (vec_merge:VF_128\n+\t  (fma:VF_128\n+\t    (neg:VF_128\n+\t      (match_operand:VF_128 1 \"nonimmediate_operand\" \"%0, 0,x\"))\n+\t    (match_operand:VF_128   2 \"nonimmediate_operand\" \"xm, x,xm\")\n+\t    (neg:VF_128\n+\t      (match_operand:VF_128 3 \"nonimmediate_operand\" \" x,xm,0\")))\n+\t  (match_dup 0)\n+\t  (const_int 1)))]\n+  \"TARGET_FMA\"\n+  \"@\n+   vfnmsub132<ssescalarmodesuffix>\\t{%2, %3, %0|%0, %3, %2}\n+   vfnmsub213<ssescalarmodesuffix>\\t{%3, %2, %0|%0, %2, %3}\n+   vfnmsub231<ssescalarmodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"ssemuladd\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n (define_insn \"*fma4i_vmfmadd_<mode>\"\n   [(set (match_operand:VF_128 0 \"register_operand\" \"=x,x\")\n \t(vec_merge:VF_128"}, {"sha": "55d74a9dddfa01acb74e2c2e0b95462865baea3f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddd46d69b09a88fb82832285b69090fa08bddc2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddd46d69b09a88fb82832285b69090fa08bddc2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2ddd46d69b09a88fb82832285b69090fa08bddc2", "patch": "@@ -1,3 +1,28 @@\n+2011-08-30  Ilya Tocar <ilya.tocar@intel.com>\n+\n+\t* gcc.target/i386/fma-check.h: New.\n+\t* gcc.target/i386/fma-256-fmaddXX.c: New testcase.\n+\t* gcc.target/i386/fma-256-fmaddsubXX.c: Likewise.\n+\t* gcc.target/i386/fma-256-fmsubXX.c: Likewise.\n+\t* gcc.target/i386/fma-256-fmsubaddXX.c: Likewise.\n+\t* gcc.target/i386/fma-256-fnmaddXX.c: Likewise.\n+\t* gcc.target/i386/fma-256-fnmsubXX.c: Likewise.\n+\t* gcc.target/i386/fma-fmaddXX.c: Likewise.\n+\t* gcc.target/i386/fma-fmaddsubXX.c: Likewise.\n+\t* gcc.target/i386/fma-fmsubXX.c: Likewise.\n+\t* gcc.target/i386/fma-fmsubaddXX.c: Likewise.\n+\t* gcc.target/i386/fma-fnmaddXX.c: Likewise.\n+\t* gcc.target/i386/fma-fnmsubXX.c: Likewise.\n+\t* gcc.target/i386/fma-compile.c: Likewise.\n+\t* gcc.target/i386/i386.exp (check_effective_target_fma): New.\n+\t* gcc.target/i386/sse-12.c: Add -mfma.\n+\t* gcc.target/i386/sse-13.c: Likewise.\n+\t* gcc.target/i386/sse-14.c: Likewise.\n+\t* gcc.target/i386/sse-22.c: Likewise.\n+\t* gcc.target/i386/sse-23.c: Likewise.\n+\t* g++.dg/other/i386-2.C: Likewise.\n+\t* g++.dg/other/i386-3.C: Likewise.\n+\n 2011-08-30  Kirill Yukhin  <kirill.yukhin@intel.com>\n \n \tPR testsuite/50185"}, {"sha": "e8237a45b7ba8b7d0a0c6992770a3d92185f3a09", "filename": "gcc/testsuite/g++.dg/other/i386-2.C", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddd46d69b09a88fb82832285b69090fa08bddc2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddd46d69b09a88fb82832285b69090fa08bddc2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C?ref=2ddd46d69b09a88fb82832285b69090fa08bddc2", "patch": "@@ -1,9 +1,10 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c\" } */\n+/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,\n-   popcntintrin.h and mm_malloc.h.h are usable with -O -pedantic-errors.  */\n+   popcntintrin.h, fmaintrin.h and mm_malloc.h.h are usable with \n+   -O -pedantic-errors.  */\n \n #include <x86intrin.h>\n "}, {"sha": "9abbd3278a2e51ed21532fedfe5eafbe8925a208", "filename": "gcc/testsuite/g++.dg/other/i386-3.C", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddd46d69b09a88fb82832285b69090fa08bddc2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddd46d69b09a88fb82832285b69090fa08bddc2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C?ref=2ddd46d69b09a88fb82832285b69090fa08bddc2", "patch": "@@ -1,9 +1,10 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c\" } */\n+/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma\" } */\n+/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,\n-   popcntintrin.h and mm_malloc.h are usable with\n+   popcntintrin.h, fmaintrin.h and mm_malloc.h are usable with\n    -O -fkeep-inline-functions.  */\n \n #include <x86intrin.h>"}, {"sha": "7e73402fcb17a06fa4dae96b8bb7f6801fbf902b", "filename": "gcc/testsuite/gcc.target/i386/fma-256-fmaddXX.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddd46d69b09a88fb82832285b69090fa08bddc2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma-256-fmaddXX.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddd46d69b09a88fb82832285b69090fa08bddc2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma-256-fmaddXX.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma-256-fmaddXX.c?ref=2ddd46d69b09a88fb82832285b69090fa08bddc2", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target fma } */\n+/* { dg-options \"-O2 -mfma\" } */\n+\n+#include \"fma-check.h\"\n+\n+#include <x86intrin.h>\n+#include \"m256-check.h\"\n+\n+void\n+check_mm256_fmadd_pd (__m256d __A, __m256d __B, __m256d __C)\n+{\n+  union256d a, b, c, e;\n+  a.x = __A;\n+  b.x = __B;\n+  c.x = __C;\n+  double d[4];\n+  int i;\n+  e.x = _mm256_fmadd_pd (__A, __B, __C);\n+  for (i = 0; i < 4; i++)\n+    {\n+      d[i] = a.a[i] * b.a[i] + c.a[i];\n+    }\n+  if (check_union256d (e, d))\n+    abort ();\n+}\n+\n+void\n+check_mm256_fmadd_ps (__m256 __A, __m256 __B, __m256 __C)\n+{\n+  union256 a, b, c, e;\n+  a.x = __A;\n+  b.x = __B;\n+  c.x = __C;\n+  float d[8];\n+  int i;\n+  e.x = _mm256_fmadd_ps (__A, __B, __C);\n+  for (i = 0; i < 8; i++)\n+    {\n+      d[i] = a.a[i] * b.a[i] + c.a[i];\n+    }\n+  if (check_union256 (e, d))\n+    abort ();\n+}\n+\n+static void\n+fma_test (void)\n+{\n+  union256 c[3];\n+  union256d d[3];\n+  int i, j;\n+  for (i = 0; i < 3; i++)\n+    {\n+      for (j = 0; j < 8; j++)\n+\tc[i].a[j] = i * j + 3.5;\n+      for (j = 0; j < 4; j++)\n+\td[i].a[j] = i * j + 3.5;\n+    }\n+  check_mm256_fmadd_pd (d[0].x, d[1].x, d[2].x);\n+  check_mm256_fmadd_ps (c[0].x, c[1].x, c[2].x);\n+}"}, {"sha": "4b61ad5f8ac6b9b5b26dae5c9d9eb76dda40edf7", "filename": "gcc/testsuite/gcc.target/i386/fma-256-fmaddsubXX.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddd46d69b09a88fb82832285b69090fa08bddc2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma-256-fmaddsubXX.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddd46d69b09a88fb82832285b69090fa08bddc2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma-256-fmaddsubXX.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma-256-fmaddsubXX.c?ref=2ddd46d69b09a88fb82832285b69090fa08bddc2", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target fma } */\n+/* { dg-options \"-O2 -mfma\" } */\n+\n+#include \"fma-check.h\"\n+\n+#include <x86intrin.h>\n+#include \"m256-check.h\"\n+\n+void\n+check_mm256_fmaddsub_ps (__m256 __A, __m256 __B, __m256 __C)\n+{\n+  union256 a, b, c, e;\n+  a.x = __A;\n+  b.x = __B;\n+  c.x = __C;\n+  float d[8];\n+  int i;\n+  e.x = _mm256_fmaddsub_ps (__A, __B, __C);\n+  for (i = 0; i < 8; i++)\n+    {\n+      d[i] = a.a[i] * b.a[i] + (i % 2 == 1 ? c.a[i] : -c.a[i]);\n+    }\n+  if (check_union256 (e, d))\n+    abort ();\n+}\n+\n+void\n+check_mm256_fmaddsub_pd (__m256d __A, __m256d __B, __m256d __C)\n+{\n+  union256d a, b, c, e;\n+  a.x = __A;\n+  b.x = __B;\n+  c.x = __C;\n+  double d[4];\n+  int i;\n+  e.x = _mm256_fmaddsub_pd (__A, __B, __C);\n+  for (i = 0; i < 4; i++)\n+    {\n+      d[i] = a.a[i] * b.a[i] + (i % 2 == 1 ? c.a[i] : -c.a[i]);\n+    }\n+  if (check_union256d (e, d))\n+    abort ();\n+}\n+\n+static void\n+fma_test (void)\n+{\n+  union256 c[3];\n+  union256d d[3];\n+  int i, j;\n+  for (i = 0; i < 3; i++)\n+    {\n+      for (j = 0; j < 8; j++)\n+\tc[i].a[j] = i * j + 3.5;\n+      for (j = 0; j < 4; j++)\n+\td[i].a[j] = i * j + 3.5;\n+    }\n+  check_mm256_fmaddsub_pd (d[0].x, d[1].x, d[2].x);\n+  check_mm256_fmaddsub_ps (c[0].x, c[1].x, c[2].x);\n+}"}, {"sha": "d92aec0ec531f24432377147aeeb3993f9243fe0", "filename": "gcc/testsuite/gcc.target/i386/fma-256-fmsubXX.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddd46d69b09a88fb82832285b69090fa08bddc2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma-256-fmsubXX.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddd46d69b09a88fb82832285b69090fa08bddc2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma-256-fmsubXX.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma-256-fmsubXX.c?ref=2ddd46d69b09a88fb82832285b69090fa08bddc2", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target fma } */\n+/* { dg-options \"-O2 -mfma\" } */\n+\n+#include \"fma-check.h\"\n+\n+#include <x86intrin.h>\n+#include \"m256-check.h\"\n+\n+\n+void\n+check_mm256_fmsub_pd (__m256d __A, __m256d __B, __m256d __C)\n+{\n+  union256d a, b, c, e;\n+  a.x = __A;\n+  b.x = __B;\n+  c.x = __C;\n+  double d[4];\n+  int i;\n+  e.x = _mm256_fmsub_pd (__A, __B, __C);\n+  for (i = 0; i < 4; i++)\n+    {\n+      d[i] = a.a[i] * b.a[i] - c.a[i];\n+    }\n+  if (check_union256d (e, d))\n+    abort ();\n+}\n+\n+void\n+check_mm256_fmsub_ps (__m256 __A, __m256 __B, __m256 __C)\n+{\n+  union256 a, b, c, e;\n+  a.x = __A;\n+  b.x = __B;\n+  c.x = __C;\n+  float d[8];\n+  int i;\n+  e.x = _mm256_fmsub_ps (__A, __B, __C);\n+  for (i = 0; i < 8; i++)\n+    {\n+      d[i] = a.a[i] * b.a[i] - c.a[i];\n+    }\n+  if (check_union256 (e, d))\n+    abort ();\n+}\n+\n+static void\n+fma_test (void)\n+{\n+  union256 c[3];\n+  union256d d[3];\n+  int i, j;\n+  for (i = 0; i < 3; i++)\n+    {\n+      for (j = 0; j < 8; j++)\n+\tc[i].a[j] = i * j + 3.5;\n+      for (j = 0; j < 4; j++)\n+\td[i].a[j] = i * j + 3.5;\n+    }\n+  check_mm256_fmsub_pd (d[0].x, d[1].x, d[2].x);\n+  check_mm256_fmsub_ps (c[0].x, c[1].x, c[2].x);\n+}"}, {"sha": "84a41c4c0b5295bb0ab053ed2a7a1879bf403f07", "filename": "gcc/testsuite/gcc.target/i386/fma-256-fmsubaddXX.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddd46d69b09a88fb82832285b69090fa08bddc2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma-256-fmsubaddXX.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddd46d69b09a88fb82832285b69090fa08bddc2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma-256-fmsubaddXX.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma-256-fmsubaddXX.c?ref=2ddd46d69b09a88fb82832285b69090fa08bddc2", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target fma } */\n+/* { dg-options \"-O2 -mfma\" } */\n+\n+#include \"fma-check.h\"\n+\n+#include <x86intrin.h>\n+#include \"m256-check.h\"\n+\n+void\n+check_mm256_fmsubadd_ps (__m256 __A, __m256 __B, __m256 __C)\n+{\n+  union256 a, b, c, e;\n+  a.x = __A;\n+  b.x = __B;\n+  c.x = __C;\n+  float d[8];\n+  int i;\n+  e.x = _mm256_fmsubadd_ps (__A, __B, __C);\n+  for (i = 0; i < 8; i++)\n+    {\n+      d[i] = a.a[i] * b.a[i] + (i % 2 == 1 ? -c.a[i] : c.a[i]);\n+    }\n+  if (check_union256 (e, d))\n+    abort ();\n+}\n+\n+void\n+check_mm256_fmsubadd_pd (__m256d __A, __m256d __B, __m256d __C)\n+{\n+  union256d a, b, c, e;\n+  a.x = __A;\n+  b.x = __B;\n+  c.x = __C;\n+  double d[4];\n+  int i;\n+  e.x = _mm256_fmsubadd_pd (__A, __B, __C);\n+  for (i = 0; i < 4; i++)\n+    {\n+      d[i] = a.a[i] * b.a[i] + (i % 2 == 1 ? -c.a[i] : c.a[i]);\n+    }\n+  if (check_union256d (e, d))\n+    abort ();\n+}\n+\n+static void\n+fma_test (void)\n+{\n+  union256 c[3];\n+  union256d d[3];\n+  int i, j;\n+  for (i = 0; i < 3; i++)\n+    {\n+      for (j = 0; j < 8; j++)\n+\tc[i].a[j] = i * j + 3.5;\n+      for (j = 0; j < 4; j++)\n+\td[i].a[j] = i * j + 3.5;\n+    }\n+  check_mm256_fmsubadd_pd (d[0].x, d[1].x, d[2].x);\n+  check_mm256_fmsubadd_ps (c[0].x, c[1].x, c[2].x);\n+}"}, {"sha": "c0dfa6900b3d008c7204ef6c0d41088bc1da3453", "filename": "gcc/testsuite/gcc.target/i386/fma-256-fnmaddXX.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddd46d69b09a88fb82832285b69090fa08bddc2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma-256-fnmaddXX.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddd46d69b09a88fb82832285b69090fa08bddc2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma-256-fnmaddXX.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma-256-fnmaddXX.c?ref=2ddd46d69b09a88fb82832285b69090fa08bddc2", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target fma } */\n+/* { dg-options \"-O2 -mfma\" } */\n+\n+#include \"fma-check.h\"\n+\n+#include <x86intrin.h>\n+#include \"m256-check.h\"\n+\n+void\n+check_mm256_fnmadd_pd (__m256d __A, __m256d __B, __m256d __C)\n+{\n+  union256d a, b, c, e;\n+  a.x = __A;\n+  b.x = __B;\n+  c.x = __C;\n+  double d[4];\n+  int i;\n+  e.x = _mm256_fnmadd_pd (__A, __B, __C);\n+  for (i = 0; i < 4; i++)\n+    {\n+      d[i] = -a.a[i] * b.a[i] + c.a[i];\n+    }\n+  if (check_union256d (e, d))\n+    abort ();\n+}\n+\n+void\n+check_mm256_fnmadd_ps (__m256 __A, __m256 __B, __m256 __C)\n+{\n+  union256 a, b, c, e;\n+  a.x = __A;\n+  b.x = __B;\n+  c.x = __C;\n+  float d[8];\n+  int i;\n+  e.x = _mm256_fnmadd_ps (__A, __B, __C);\n+  for (i = 0; i < 8; i++)\n+    {\n+      d[i] = -a.a[i] * b.a[i] + c.a[i];\n+    }\n+  if (check_union256 (e, d))\n+    abort ();\n+}\n+\n+static void\n+fma_test (void)\n+{\n+  union256 c[3];\n+  union256d d[3];\n+  int i, j;\n+  for (i = 0; i < 3; i++)\n+    {\n+      for (j = 0; j < 8; j++)\n+\tc[i].a[j] = i * j + 3.5;\n+      for (j = 0; j < 4; j++)\n+\td[i].a[j] = i * j + 3.5;\n+    }\n+  check_mm256_fnmadd_pd (d[0].x, d[1].x, d[2].x);\n+  check_mm256_fnmadd_ps (c[0].x, c[1].x, c[2].x);\n+}"}, {"sha": "ac4705e5c612d912564c587b3de12bc11144bf0c", "filename": "gcc/testsuite/gcc.target/i386/fma-256-fnmsubXX.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddd46d69b09a88fb82832285b69090fa08bddc2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma-256-fnmsubXX.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddd46d69b09a88fb82832285b69090fa08bddc2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma-256-fnmsubXX.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma-256-fnmsubXX.c?ref=2ddd46d69b09a88fb82832285b69090fa08bddc2", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target fma } */\n+/* { dg-options \"-O2 -mfma\" } */\n+\n+#include \"fma-check.h\"\n+\n+#include <x86intrin.h>\n+#include \"m256-check.h\"\n+\n+\n+void\n+check_mm256_fnmsub_pd (__m256d __A, __m256d __B, __m256d __C)\n+{\n+  union256d a, b, c, e;\n+  a.x = __A;\n+  b.x = __B;\n+  c.x = __C;\n+  double d[4];\n+  int i;\n+  e.x = _mm256_fnmsub_pd (__A, __B, __C);\n+  for (i = 0; i < 4; i++)\n+    {\n+      d[i] = -a.a[i] * b.a[i] - c.a[i];\n+    }\n+  if (check_union256d (e, d))\n+    abort ();\n+}\n+\n+void\n+check_mm256_fnmsub_ps (__m256 __A, __m256 __B, __m256 __C)\n+{\n+  union256 a, b, c, e;\n+  a.x = __A;\n+  b.x = __B;\n+  c.x = __C;\n+  float d[8];\n+  int i;\n+  e.x = _mm256_fnmsub_ps (__A, __B, __C);\n+  for (i = 0; i < 8; i++)\n+    {\n+      d[i] = -a.a[i] * b.a[i] - c.a[i];\n+    }\n+  if (check_union256 (e, d))\n+    abort ();\n+}\n+\n+static void\n+fma_test (void)\n+{\n+  union256 c[3];\n+  union256d d[3];\n+  int i, j;\n+  for (i = 0; i < 3; i++)\n+    {\n+      for (j = 0; j < 8; j++)\n+\tc[i].a[j] = i * j + 3.5;\n+      for (j = 0; j < 4; j++)\n+\td[i].a[j] = i * j + 3.5;\n+    }\n+  check_mm256_fnmsub_pd (d[0].x, d[1].x, d[2].x);\n+  check_mm256_fnmsub_ps (c[0].x, c[1].x, c[2].x);\n+}"}, {"sha": "696c4a00fb4355ac575ef7bce5163a08ebf85c84", "filename": "gcc/testsuite/gcc.target/i386/fma-check.h", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddd46d69b09a88fb82832285b69090fa08bddc2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddd46d69b09a88fb82832285b69090fa08bddc2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma-check.h?ref=2ddd46d69b09a88fb82832285b69090fa08bddc2", "patch": "@@ -0,0 +1,25 @@\n+#include <stdlib.h>\n+\n+#include \"cpuid.h\"\n+\n+static void fma_test (void);\n+\n+static void __attribute__ ((noinline)) do_test (void)\n+{\n+  fma_test ();\n+}\n+\n+int\n+main ()\n+{\n+  unsigned int eax, ebx, ecx, edx;\n+\n+  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))\n+    return 0;\n+\n+  /* Run FMA test only if host has FMA support.  */\n+  if (ecx & bit_FMA)\n+    do_test ();\n+\n+  exit (0);\n+}"}, {"sha": "6d5daa55c27a0d441f90ebe07feaee93a5a80048", "filename": "gcc/testsuite/gcc.target/i386/fma-compile.c", "status": "added", "additions": 221, "deletions": 0, "changes": 221, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddd46d69b09a88fb82832285b69090fa08bddc2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma-compile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddd46d69b09a88fb82832285b69090fa08bddc2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma-compile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma-compile.c?ref=2ddd46d69b09a88fb82832285b69090fa08bddc2", "patch": "@@ -0,0 +1,221 @@\n+/* Test that the compiler properly generates floating point multiply\n+   and add instructions FMA systems.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mfma\" } */\n+\n+#include <x86intrin.h>\n+\n+__m128d\n+check_mm_fmadd_pd (__m128d a, __m128d b, __m128d c)\n+{\n+  return _mm_fmadd_pd (a, b, c);\n+}\n+\n+__m256d\n+check_mm256_fmadd_pd (__m256d a, __m256d b, __m256d c)\n+{\n+  return _mm256_fmadd_pd (a, b, c);\n+}\n+\n+__m128\n+check_mm_fmadd_ps (__m128 a, __m128 b, __m128 c)\n+{\n+  return _mm_fmadd_ps (a, b, c);\n+}\n+\n+__m256\n+check_mm256_fmadd_ps (__m256 a, __m256 b, __m256 c)\n+{\n+  return _mm256_fmadd_ps (a, b, c);\n+}\n+\n+__m128d\n+check_mm_fmadd_sd (__m128d a, __m128d b, __m128d c)\n+{\n+  return _mm_fmadd_sd (a, b, c);\n+}\n+\n+__m128\n+check_mm_fmadd_ss (__m128 a, __m128 b, __m128 c)\n+{\n+  return _mm_fmadd_ss (a, b, c);\n+}\n+\n+__m128d\n+check_mm_fmsub_pd (__m128d a, __m128d b, __m128d c)\n+{\n+  return _mm_fmsub_pd (a, b, c);\n+}\n+\n+__m256d\n+check_mm256_fmsub_pd (__m256d a, __m256d b, __m256d c)\n+{\n+  return _mm256_fmsub_pd (a, b, c);\n+}\n+\n+__m128\n+check_mm_fmsub_ps (__m128 a, __m128 b, __m128 c)\n+{\n+  return _mm_fmsub_ps (a, b, c);\n+}\n+\n+__m256\n+check_mm256_fmsub_ps (__m256 a, __m256 b, __m256 c)\n+{\n+  return _mm256_fmsub_ps (a, b, c);\n+}\n+\n+__m128d\n+check_mm_fmsub_sd (__m128d a, __m128d b, __m128d c)\n+{\n+  return _mm_fmsub_sd (a, b, c);\n+}\n+\n+__m128\n+check_mm_fmsub_ss (__m128 a, __m128 b, __m128 c)\n+{\n+  return _mm_fmsub_ss (a, b, c);\n+}\n+\n+__m128d\n+check_mm_fnmadd_pd (__m128d a, __m128d b, __m128d c)\n+{\n+  return _mm_fnmadd_pd (a, b, c);\n+}\n+\n+__m256d\n+check_mm256_fnmadd_pd (__m256d a, __m256d b, __m256d c)\n+{\n+  return _mm256_fnmadd_pd (a, b, c);\n+}\n+\n+__m128\n+check_mm_fnmadd_ps (__m128 a, __m128 b, __m128 c)\n+{\n+  return _mm_fnmadd_ps (a, b, c);\n+}\n+\n+__m256\n+check_mm256_fnmadd_ps (__m256 a, __m256 b, __m256 c)\n+{\n+  return _mm256_fnmadd_ps (a, b, c);\n+}\n+\n+__m128d\n+check_mm_fnmadd_sd (__m128d a, __m128d b, __m128d c)\n+{\n+  return _mm_fnmadd_sd (a, b, c);\n+}\n+\n+__m128\n+check_mm_fnmadd_ss (__m128 a, __m128 b, __m128 c)\n+{\n+  return _mm_fnmadd_ss (a, b, c);\n+}\n+\n+__m128d\n+check_mm_fnmsub_pd (__m128d a, __m128d b, __m128d c)\n+{\n+  return _mm_fnmsub_pd (a, b, c);\n+}\n+\n+__m256d\n+check_mm256_fnmsub_pd (__m256d a, __m256d b, __m256d c)\n+{\n+  return _mm256_fnmsub_pd (a, b, c);\n+}\n+\n+__m128\n+check_mm_fnmsub_ps (__m128 a, __m128 b, __m128 c)\n+{\n+  return _mm_fnmsub_ps (a, b, c);\n+}\n+\n+__m256\n+check_mm256_fnmsub_ps (__m256 a, __m256 b, __m256 c)\n+{\n+  return _mm256_fnmsub_ps (a, b, c);\n+}\n+\n+__m128d\n+check_mm_fnmsub_sd (__m128d a, __m128d b, __m128d c)\n+{\n+  return _mm_fnmsub_sd (a, b, c);\n+}\n+\n+__m128\n+check_mm_fnmsub_ss (__m128 a, __m128 b, __m128 c)\n+{\n+  return _mm_fnmsub_ss (a, b, c);\n+}\n+\n+__m128d\n+check_mm_fmaddsub_pd (__m128d a, __m128d b, __m128d c)\n+{\n+  return _mm_fmaddsub_pd (a, b, c);\n+}\n+\n+__m256d\n+check_mm256_fmaddsub_pd (__m256d a, __m256d b, __m256d c)\n+{\n+  return _mm256_fmaddsub_pd (a, b, c);\n+}\n+\n+__m128\n+check_mm_fmaddsub_ps (__m128 a, __m128 b, __m128 c)\n+{\n+  return _mm_fmaddsub_ps (a, b, c);\n+}\n+\n+__m256\n+check_mm256_fmaddsub_ps (__m256 a, __m256 b, __m256 c)\n+{\n+  return _mm256_fmaddsub_ps (a, b, c);\n+}\n+\n+__m128d\n+check_mm_fmsubadd_pd (__m128d a, __m128d b, __m128d c)\n+{\n+  return _mm_fmsubadd_pd (a, b, c);\n+}\n+\n+__m256d\n+check_mm256_fmsubadd_pd (__m256d a, __m256d b, __m256d c)\n+{\n+  return _mm256_fmsubadd_pd (a, b, c);\n+}\n+\n+__m128\n+check_mm_fmsubadd_ps (__m128 a, __m128 b, __m128 c)\n+{\n+  return _mm_fmsubadd_ps (a, b, c);\n+}\n+\n+__m256\n+check_mm256_fmsubadd_ps (__m256 a, __m256 b, __m256 c)\n+{\n+  return _mm256_fmsubadd_ps (a, b, c);\n+}\n+\n+\n+/* { dg-final { scan-assembler-times \"vfmadd[^s]..ps\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub[^s]..ps\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd...ps\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub...ps\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfmaddsub...ps\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfmsubadd...ps\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfmadd[^s]..pd\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub[^s]..pd\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd...pd\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub...pd\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfmaddsub...pd\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfmsubadd...pd\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfmadd[^s]..ss\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub[^s]..ss\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd...ss\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub...ss\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmadd[^s]..sd\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmsub[^s]..sd\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmadd...sd\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfnmsub...sd\" 1 } } */"}, {"sha": "43ef9e8071f7a01677e66e9e21ffbe856998abf8", "filename": "gcc/testsuite/gcc.target/i386/fma-fmaddXX.c", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddd46d69b09a88fb82832285b69090fa08bddc2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma-fmaddXX.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddd46d69b09a88fb82832285b69090fa08bddc2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma-fmaddXX.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma-fmaddXX.c?ref=2ddd46d69b09a88fb82832285b69090fa08bddc2", "patch": "@@ -0,0 +1,102 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target fma } */\n+/* { dg-options \"-O2 -mfma\" } */\n+\n+#include \"fma-check.h\"\n+\n+#include <x86intrin.h>\n+#include \"m256-check.h\"\n+\n+void\n+check_mm_fmadd_pd (__m128d __A, __m128d __B, __m128d __C)\n+{\n+  union128d a, b, c, e;\n+  a.x = __A;\n+  b.x = __B;\n+  c.x = __C;\n+  double d[2];\n+  int i;\n+  e.x = _mm_fmadd_pd (__A, __B, __C);\n+  for (i = 0; i < 2; i++)\n+    {\n+      d[i] = a.a[i] * b.a[i] + c.a[i];\n+    }\n+\n+  if (check_union128d (e, d))\n+    abort ();\n+}\n+\n+void\n+check_mm_fmadd_ps (__m128 __A, __m128 __B, __m128 __C)\n+{\n+  union128 a, b, c, e;\n+  a.x = __A;\n+  b.x = __B;\n+  c.x = __C;\n+  float d[4];\n+  int i;\n+  e.x = _mm_fmadd_ps (__A, __B, __C);\n+  for (i = 0; i < 4; i++)\n+    {\n+      d[i] = a.a[i] * b.a[i] + c.a[i];\n+    }\n+  if (check_union128 (e, d))\n+    abort ();\n+}\n+\n+void\n+check_mm_fmadd_sd (__m128d __A, __m128d __B, __m128d __C)\n+{\n+  union128d a, b, c, e;\n+  a.x = __A;\n+  b.x = __B;\n+  c.x = __C;\n+  double d[2];\n+  int i;\n+  e.x = _mm_fmadd_sd (__A, __B, __C);\n+  for (i = 1; i < 2; i++)\n+    {\n+      d[i] = a.a[i];\n+    }\n+  d[0] = a.a[0] * b.a[0] + c.a[0];\n+  if (check_union128d (e, d))\n+    abort ();\n+}\n+\n+void\n+check_mm_fmadd_ss (__m128 __A, __m128 __B, __m128 __C)\n+{\n+  union128 a, b, c, e;\n+  a.x = __A;\n+  b.x = __B;\n+  c.x = __C;\n+  float d[4];\n+  int i;\n+  e.x = _mm_fmadd_ss (__A, __B, __C);\n+  for (i = 1; i < 4; i++)\n+    {\n+      d[i] = a.a[i];\n+    }\n+  d[0] = a.a[0] * b.a[0] + c.a[0];\n+  if (check_union128 (e, d))\n+    abort ();\n+}\n+\n+static void\n+fma_test (void)\n+{\n+  union128 a[3];\n+  union128d b[3];\n+  int i, j;\n+  for (i = 0; i < 3; i++)\n+    {\n+      for (j = 0; j < 4; j++)\n+\ta[i].a[j] = i * j + 3.5;\n+      for (j = 0; j < 2; j++)\n+\tb[i].a[j] = i * j + 3.5;\n+    }\n+  check_mm_fmadd_pd (b[0].x, b[1].x, b[2].x);\n+  check_mm_fmadd_sd (b[0].x, b[1].x, b[2].x);\n+  check_mm_fmadd_ps (a[0].x, a[1].x, a[2].x);\n+  check_mm_fmadd_ss (a[0].x, a[1].x, a[2].x);\n+}"}, {"sha": "89c816392f3ccf8860fd2cfaba027b9b1fc1ea33", "filename": "gcc/testsuite/gcc.target/i386/fma-fmaddsubXX.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddd46d69b09a88fb82832285b69090fa08bddc2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma-fmaddsubXX.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddd46d69b09a88fb82832285b69090fa08bddc2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma-fmaddsubXX.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma-fmaddsubXX.c?ref=2ddd46d69b09a88fb82832285b69090fa08bddc2", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target fma } */\n+/* { dg-options \"-O2 -mfma\" } */\n+\n+#include \"fma-check.h\"\n+\n+#include <x86intrin.h>\n+#include \"m256-check.h\"\n+\n+void\n+check_mm_fmaddsub_ps (__m128 __A, __m128 __B, __m128 __C)\n+{\n+  union128 a, b, c, e;\n+  a.x = __A;\n+  b.x = __B;\n+  c.x = __C;\n+  float d[4];\n+  int i;\n+  e.x = _mm_fmaddsub_ps (__A, __B, __C);\n+  for (i = 0; i < 4; i++)\n+    {\n+      d[i] = a.a[i] * b.a[i] + (i % 2 == 1 ? c.a[i] : -c.a[i]);\n+    }\n+  if (check_union128 (e, d))\n+    abort ();\n+}\n+\n+void\n+check_mm_fmaddsub_pd (__m128d __A, __m128d __B, __m128d __C)\n+{\n+  union128d a, b, c, e;\n+  a.x = __A;\n+  b.x = __B;\n+  c.x = __C;\n+  double d[2];\n+  int i;\n+  e.x = _mm_fmaddsub_pd (__A, __B, __C);\n+  for (i = 0; i < 2; i++)\n+    {\n+      d[i] = a.a[i] * b.a[i] + (i % 2 == 1 ? c.a[i] : -c.a[i]);\n+    }\n+  if (check_union128d (e, d))\n+    abort ();\n+}\n+\n+static void\n+fma_test (void)\n+{\n+  union128 a[3];\n+  union128d b[3];\n+  int i, j;\n+  for (i = 0; i < 3; i++)\n+    {\n+      for (j = 0; j < 4; j++)\n+\ta[i].a[j] = i * j + 3.5;\n+      for (j = 0; j < 2; j++)\n+\tb[i].a[j] = i * j + 3.5;\n+    }\n+  check_mm_fmaddsub_pd (b[0].x, b[1].x, b[2].x);\n+  check_mm_fmaddsub_ps (a[0].x, a[1].x, a[2].x);\n+}"}, {"sha": "3d92d4b25a6d8182843db1965a3834503e5c7095", "filename": "gcc/testsuite/gcc.target/i386/fma-fmsubXX.c", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddd46d69b09a88fb82832285b69090fa08bddc2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma-fmsubXX.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddd46d69b09a88fb82832285b69090fa08bddc2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma-fmsubXX.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma-fmsubXX.c?ref=2ddd46d69b09a88fb82832285b69090fa08bddc2", "patch": "@@ -0,0 +1,101 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target fma } */\n+/* { dg-options \"-O2 -mfma\" } */\n+\n+#include \"fma-check.h\"\n+\n+#include <x86intrin.h>\n+#include \"m256-check.h\"\n+\n+void\n+check_mm_fmsub_pd (__m128d __A, __m128d __B, __m128d __C)\n+{\n+  union128d a, b, c, e;\n+  a.x = __A;\n+  b.x = __B;\n+  c.x = __C;\n+  double d[2];\n+  int i;\n+  e.x = _mm_fmsub_pd (__A, __B, __C);\n+  for (i = 0; i < 2; i++)\n+    {\n+      d[i] = a.a[i] * b.a[i] - c.a[i];\n+    }\n+  if (check_union128d (e, d))\n+    abort ();\n+}\n+\n+void\n+check_mm_fmsub_ps (__m128 __A, __m128 __B, __m128 __C)\n+{\n+  union128 a, b, c, e;\n+  a.x = __A;\n+  b.x = __B;\n+  c.x = __C;\n+  float d[4];\n+  int i;\n+  e.x = _mm_fmsub_ps (__A, __B, __C);\n+  for (i = 0; i < 4; i++)\n+    {\n+      d[i] = a.a[i] * b.a[i] - c.a[i];\n+    }\n+  if (check_union128 (e, d))\n+    abort ();\n+}\n+\n+void\n+check_mm_fmsub_sd (__m128d __A, __m128d __B, __m128d __C)\n+{\n+  union128d a, b, c, e;\n+  a.x = __A;\n+  b.x = __B;\n+  c.x = __C;\n+  double d[2];\n+  int i;\n+  e.x = _mm_fmsub_sd (__A, __B, __C);\n+  for (i = 1; i < 2; i++)\n+    {\n+      d[i] = a.a[i];\n+    }\n+  d[0] = a.a[0] * b.a[0] - c.a[0];\n+  if (check_union128d (e, d))\n+    abort ();\n+}\n+\n+void\n+check_mm_fmsub_ss (__m128 __A, __m128 __B, __m128 __C)\n+{\n+  union128 a, b, c, e;\n+  a.x = __A;\n+  b.x = __B;\n+  c.x = __C;\n+  float d[4];\n+  int i;\n+  e.x = _mm_fmsub_ss (__A, __B, __C);\n+  for (i = 1; i < 4; i++)\n+    {\n+      d[i] = a.a[i];\n+    }\n+  d[0] = a.a[0] * b.a[0] - c.a[0];\n+  if (check_union128 (e, d))\n+    abort ();\n+}\n+\n+static void\n+fma_test (void)\n+{\n+  union128 a[3];\n+  union128d b[3];\n+  int i, j;\n+  for (i = 0; i < 3; i++)\n+    {\n+      for (j = 0; j < 4; j++)\n+\ta[i].a[j] = i * j + 3.5;\n+      for (j = 0; j < 2; j++)\n+\tb[i].a[j] = i * j + 3.5;\n+    }\n+  check_mm_fmsub_pd (b[0].x, b[1].x, b[2].x);\n+  check_mm_fmsub_sd (b[0].x, b[1].x, b[2].x);\n+  check_mm_fmsub_ps (a[0].x, a[1].x, a[2].x);\n+  check_mm_fmsub_ss (a[0].x, a[1].x, a[2].x);\n+}"}, {"sha": "b03f875319d3780d60e986c69ee7d9c5904a9154", "filename": "gcc/testsuite/gcc.target/i386/fma-fmsubaddXX.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddd46d69b09a88fb82832285b69090fa08bddc2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma-fmsubaddXX.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddd46d69b09a88fb82832285b69090fa08bddc2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma-fmsubaddXX.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma-fmsubaddXX.c?ref=2ddd46d69b09a88fb82832285b69090fa08bddc2", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target fma } */\n+/* { dg-options \"-O2 -mfma\" } */\n+\n+#include \"fma-check.h\"\n+\n+#include <x86intrin.h>\n+#include \"m256-check.h\"\n+\n+void\n+check_mm_fmsubadd_ps (__m128 __A, __m128 __B, __m128 __C)\n+{\n+  union128 a, b, c, e;\n+  a.x = __A;\n+  b.x = __B;\n+  c.x = __C;\n+  float d[4];\n+  int i;\n+  e.x = _mm_fmsubadd_ps (__A, __B, __C);\n+  for (i = 0; i < 4; i++)\n+    {\n+      d[i] = a.a[i] * b.a[i] + (i % 2 == 1 ? -c.a[i] : c.a[i]);\n+    }\n+  if (check_union128 (e, d))\n+    abort ();\n+}\n+\n+void\n+check_mm_fmsubadd_pd (__m128d __A, __m128d __B, __m128d __C)\n+{\n+  union128d a, b, c, e;\n+  a.x = __A;\n+  b.x = __B;\n+  c.x = __C;\n+  double d[2];\n+  int i;\n+  e.x = _mm_fmsubadd_pd (__A, __B, __C);\n+  for (i = 0; i < 2; i++)\n+    {\n+      d[i] = a.a[i] * b.a[i] + (i % 2 == 1 ? -c.a[i] : c.a[i]);\n+    }\n+  if (check_union128d (e, d))\n+    abort ();\n+}\n+\n+static void\n+fma_test (void)\n+{\n+  union128 a[3];\n+  union128d b[3];\n+  int i, j;\n+  for (i = 0; i < 3; i++)\n+    {\n+      for (j = 0; j < 4; j++)\n+\ta[i].a[j] = i * j + 3.5;\n+      for (j = 0; j < 2; j++)\n+\tb[i].a[j] = i * j + 3.5;\n+    }\n+  check_mm_fmsubadd_pd (b[0].x, b[1].x, b[2].x);\n+  check_mm_fmsubadd_ps (a[0].x, a[1].x, a[2].x);\n+}"}, {"sha": "f23a6c5e48a0c2fbd11b14b786f8941c074e89da", "filename": "gcc/testsuite/gcc.target/i386/fma-fnmaddXX.c", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddd46d69b09a88fb82832285b69090fa08bddc2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma-fnmaddXX.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddd46d69b09a88fb82832285b69090fa08bddc2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma-fnmaddXX.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma-fnmaddXX.c?ref=2ddd46d69b09a88fb82832285b69090fa08bddc2", "patch": "@@ -0,0 +1,101 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target fma } */\n+/* { dg-options \"-O2 -mfma\" } */\n+\n+#include \"fma-check.h\"\n+\n+#include <x86intrin.h>\n+#include \"m256-check.h\"\n+\n+void\n+check_mm_fnmadd_ps (__m128 __A, __m128 __B, __m128 __C)\n+{\n+  union128 a, b, c, e;\n+  a.x = __A;\n+  b.x = __B;\n+  c.x = __C;\n+  float d[4];\n+  int i;\n+  e.x = _mm_fnmadd_ps (__A, __B, __C);\n+  for (i = 0; i < 4; i++)\n+    {\n+      d[i] = -a.a[i] * b.a[i] + c.a[i];\n+    }\n+  if (check_union128 (e, d))\n+    abort ();\n+}\n+\n+void\n+check_mm_fnmadd_pd (__m128d __A, __m128d __B, __m128d __C)\n+{\n+  union128d a, b, c, e;\n+  a.x = __A;\n+  b.x = __B;\n+  c.x = __C;\n+  double d[2];\n+  int i;\n+  e.x = _mm_fnmadd_pd (__A, __B, __C);\n+  for (i = 0; i < 2; i++)\n+    {\n+      d[i] = -a.a[i] * b.a[i] + c.a[i];\n+    }\n+  if (check_union128d (e, d))\n+    abort ();\n+}\n+\n+void\n+check_mm_fnmadd_sd (__m128d __A, __m128d __B, __m128d __C)\n+{\n+  union128d a, b, c, e;\n+  a.x = __A;\n+  b.x = __B;\n+  c.x = __C;\n+  double d[2];\n+  int i;\n+  e.x = _mm_fnmadd_sd (__A, __B, __C);\n+  for (i = 1; i < 2; i++)\n+    {\n+      d[i] = a.a[i];\n+    }\n+  d[0] = -a.a[0] * b.a[0] + c.a[0];\n+  if (check_union128d (e, d))\n+    abort ();\n+}\n+\n+void\n+check_mm_fnmadd_ss (__m128 __A, __m128 __B, __m128 __C)\n+{\n+  union128 a, b, c, e;\n+  a.x = __A;\n+  b.x = __B;\n+  c.x = __C;\n+  float d[4];\n+  int i;\n+  e.x = _mm_fnmadd_ss (__A, __B, __C);\n+  for (i = 1; i < 4; i++)\n+    {\n+      d[i] = a.a[i];\n+    }\n+  d[0] = -a.a[0] * b.a[0] + c.a[0];\n+  if (check_union128 (e, d))\n+    abort ();\n+}\n+\n+static void\n+fma_test (void)\n+{\n+  union128 a[3];\n+  union128d b[3];\n+  int i, j;\n+  for (i = 0; i < 3; i++)\n+    {\n+      for (j = 0; j < 4; j++)\n+\ta[i].a[j] = i * j + 3.5;\n+      for (j = 0; j < 2; j++)\n+\tb[i].a[j] = i * j + 3.5;\n+    }\n+  check_mm_fnmadd_pd (b[0].x, b[1].x, b[2].x);\n+  check_mm_fnmadd_sd (b[0].x, b[1].x, b[2].x);\n+  check_mm_fnmadd_ps (a[0].x, a[1].x, a[2].x);\n+  check_mm_fnmadd_ss (a[0].x, a[1].x, a[2].x);\n+}"}, {"sha": "d17c7f2ed1af6806ed6c0fbb1115ef11385899e1", "filename": "gcc/testsuite/gcc.target/i386/fma-fnmsubXX.c", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddd46d69b09a88fb82832285b69090fa08bddc2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma-fnmsubXX.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddd46d69b09a88fb82832285b69090fa08bddc2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma-fnmsubXX.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffma-fnmsubXX.c?ref=2ddd46d69b09a88fb82832285b69090fa08bddc2", "patch": "@@ -0,0 +1,101 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target fma } */\n+/* { dg-options \"-O2 -mfma\" } */\n+\n+#include \"fma-check.h\"\n+\n+#include <x86intrin.h>\n+#include \"m256-check.h\"\n+\n+void\n+check_mm_fnmsub_sd (__m128d __A, __m128d __B, __m128d __C)\n+{\n+  union128d a, b, c, e;\n+  a.x = __A;\n+  b.x = __B;\n+  c.x = __C;\n+  double d[2];\n+  int i;\n+  e.x = _mm_fnmsub_sd (__A, __B, __C);\n+  for (i = 1; i < 2; i++)\n+    {\n+      d[i] = a.a[i];\n+    }\n+  d[0] = -a.a[0] * b.a[0] - c.a[0];\n+  if (check_union128d (e, d))\n+    abort ();\n+}\n+\n+void\n+check_mm_fnmsub_ss (__m128 __A, __m128 __B, __m128 __C)\n+{\n+  union128 a, b, c, e;\n+  a.x = __A;\n+  b.x = __B;\n+  c.x = __C;\n+  float d[4];\n+  int i;\n+  e.x = _mm_fnmsub_ss (__A, __B, __C);\n+  for (i = 1; i < 4; i++)\n+    {\n+      d[i] = a.a[i];\n+    }\n+  d[0] = -a.a[0] * b.a[0] - c.a[0];\n+  if (check_union128 (e, d))\n+    abort ();\n+}\n+\n+void\n+check_mm_fnmsub_ps (__m128 __A, __m128 __B, __m128 __C)\n+{\n+  union128 a, b, c, e;\n+  a.x = __A;\n+  b.x = __B;\n+  c.x = __C;\n+  float d[4];\n+  int i;\n+  e.x = _mm_fnmsub_ps (__A, __B, __C);\n+  for (i = 0; i < 4; i++)\n+    {\n+      d[i] = -a.a[i] * b.a[i] - c.a[i];\n+    }\n+  if (check_union128 (e, d))\n+    abort ();\n+}\n+\n+void\n+check_mm_fnmsub_pd (__m128d __A, __m128d __B, __m128d __C)\n+{\n+  union128d a, b, c, e;\n+  a.x = __A;\n+  b.x = __B;\n+  c.x = __C;\n+  double d[2];\n+  int i;\n+  e.x = _mm_fnmsub_pd (__A, __B, __C);\n+  for (i = 0; i < 2; i++)\n+    {\n+      d[i] = -a.a[i] * b.a[i] - c.a[i];\n+    }\n+  if (check_union128d (e, d))\n+    abort ();\n+}\n+\n+static void\n+fma_test (void)\n+{\n+  union128 a[3];\n+  union128d b[3];\n+  int i, j;\n+  for (i = 0; i < 3; i++)\n+    {\n+      for (j = 0; j < 4; j++)\n+\ta[i].a[j] = i * j + 3.5;\n+      for (j = 0; j < 2; j++)\n+\tb[i].a[j] = i * j + 3.5;\n+    }\n+  check_mm_fnmsub_pd (b[0].x, b[1].x, b[2].x);\n+  check_mm_fnmsub_sd (b[0].x, b[1].x, b[2].x);\n+  check_mm_fnmsub_ps (a[0].x, a[1].x, a[2].x);\n+  check_mm_fnmsub_ss (a[0].x, a[1].x, a[2].x);\n+}"}, {"sha": "75bea9be8064d0c9d76674e19b2242b1c5094863", "filename": "gcc/testsuite/gcc.target/i386/i386.exp", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddd46d69b09a88fb82832285b69090fa08bddc2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddd46d69b09a88fb82832285b69090fa08bddc2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp?ref=2ddd46d69b09a88fb82832285b69090fa08bddc2", "patch": "@@ -172,6 +172,20 @@ proc check_effective_target_fma4 { } {\n     } \"-O2 -mfma4\" ]\n }\n \n+# Return 1 if fma instructions can be compiled.\n+proc check_effective_target_fma { } {\n+    return [check_no_compiler_messages fma object {\n+        typedef float __m128 __attribute__ ((__vector_size__ (16)));\n+\ttypedef float __v4sf __attribute__ ((__vector_size__ (16)));\n+\t__m128 _mm_macc_ps(__m128 __A, __m128 __B, __m128 __C)\n+\t{\n+\t    return (__m128) __builtin_ia32_vfmaddps ((__v4sf)__A,\n+\t\t\t\t\t\t     (__v4sf)__B,\n+\t\t\t\t\t\t     (__v4sf)__C);\n+\t}\n+    } \"-O2 -mfma\" ]\n+}\n+\n # Return 1 if xop instructions can be compiled.\n proc check_effective_target_xop { } {\n     return [check_no_compiler_messages xop object {"}, {"sha": "66a36c68cb68318e07ca4dd0f8b598be4fa06277", "filename": "gcc/testsuite/gcc.target/i386/sse-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddd46d69b09a88fb82832285b69090fa08bddc2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddd46d69b09a88fb82832285b69090fa08bddc2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c?ref=2ddd46d69b09a88fb82832285b69090fa08bddc2", "patch": "@@ -3,7 +3,7 @@\n    popcntintrin.h and mm_malloc.h are usable\n    with -O -std=c89 -pedantic-errors.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c\" } */\n+/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma\" } */\n \n #include <x86intrin.h>\n "}, {"sha": "4bc0a2ef0ebaf78009a0105496154d0f7e048b3e", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddd46d69b09a88fb82832285b69090fa08bddc2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddd46d69b09a88fb82832285b69090fa08bddc2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=2ddd46d69b09a88fb82832285b69090fa08bddc2", "patch": "@@ -1,13 +1,13 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c\" } */\n+/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma\" } */\n \n #include <mm_malloc.h>\n \n /* Test that the intrinsics compile with optimization.  All of them\n    are defined as inline functions in {,x,e,p,t,s,w,a,b,i}mmintrin.h,\n    mm3dnow.h, fma4intrin.h, xopintrin.h, abmintrin.h, bmiintrin.h,\n-   tbmintrin.h, lwpintrin.h, popcntintrin.h and mm_malloc.h that\n-   reference the proper builtin functions.\n+   tbmintrin.h, lwpintrin.h, popcntintrin.h, fmaintrin.h and mm_malloc.h \n+   that reference the proper builtin functions.\n \n    Defining away \"extern\" and \"__inline\" results in all of them being\n    compiled as proper functions.  */"}, {"sha": "6451166ca12befd07fb525edd20448ab26b80948", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddd46d69b09a88fb82832285b69090fa08bddc2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddd46d69b09a88fb82832285b69090fa08bddc2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=2ddd46d69b09a88fb82832285b69090fa08bddc2", "patch": "@@ -1,12 +1,13 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c\" } */\n+/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma\" } */\n \n #include <mm_malloc.h>\n \n /* Test that the intrinsics compile without optimization.  All of them are\n    defined as inline functions in {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h,\n-   fma4intrin.h, xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h,\n-   lwpintrin.h and mm_malloc.h that reference the proper builtin functions.\n+   fma4intrin.h, xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, \n+   lwpintrin.h, fmaintrin.h and mm_malloc.h that reference the proper \n+   builtin functions.\n \n    Defining away \"extern\" and \"__inline\" results in all of them being compiled\n    as proper functions.  */"}, {"sha": "9ccb92d1b6288bba123373cf0aa89f6858ba4607", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddd46d69b09a88fb82832285b69090fa08bddc2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddd46d69b09a88fb82832285b69090fa08bddc2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=2ddd46d69b09a88fb82832285b69090fa08bddc2", "patch": "@@ -7,8 +7,8 @@\n /* Test that the intrinsics compile with optimization.  All of them\n    are defined as inline functions in {,x,e,p,t,s,w,a,b,i}mmintrin.h,\n    mm3dnow.h, fma4intrin.h, xopintrin.h, abmintrin.h, bmiintrin.h,\n-   tbmintrin.h, lwpintrin.h, popcntintrin.h and mm_malloc.h that\n-   reference the proper builtin functions.\n+   tbmintrin.h, lwpintrin.h, popcntintrin.h, fmaintrin.h and mm_malloc.h \n+   that reference the proper builtin functions.\n \n    Defining away \"extern\" and \"__inline\" results in all of them being\n    compiled as proper functions.  */\n@@ -255,9 +255,9 @@ test_2 (_mm_clmulepi64_si128, __m128i, __m128i, __m128i, 1)\n #endif\n #include <popcntintrin.h>\n \n-/* x86intrin.h (FMA4/XOP/LWP/BMI/BMI2/TBM/LZCNT). */\n+/* x86intrin.h (FMA4/XOP/LWP/BMI/BMI2/TBM/LZCNT/FMA). */\n #ifdef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"fma4,xop,lwp,bmi,bmi2,tbm,lzcnt\")\n+#pragma GCC target (\"fma4,xop,lwp,bmi,bmi2,tbm,lzcnt,fma\")\n #endif\n #include <x86intrin.h>\n /* xopintrin.h */"}, {"sha": "462f8c9acd21fb5dedb04056075acccf59c8d400", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ddd46d69b09a88fb82832285b69090fa08bddc2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ddd46d69b09a88fb82832285b69090fa08bddc2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=2ddd46d69b09a88fb82832285b69090fa08bddc2", "patch": "@@ -6,8 +6,8 @@\n /* Test that the intrinsics compile with optimization.  All of them\n    are defined as inline functions in {,x,e,p,t,s,w,a,b,i}mmintrin.h,\n    mm3dnow.h, fma4intrin.h, xopintrin.h, abmintrin.h, bmiintrin.h,\n-   tbmintrin.h, lwpintrin.h, popcntintrin.h and mm_malloc.h that\n-   reference the proper builtin functions.\n+   tbmintrin.h, lwpintrin.h, popcntintrin.h, fmaintrin.h and mm_malloc.h \n+   that reference the proper builtin functions.\n \n    Defining away \"extern\" and \"__inline\" results in all of them being\n    compiled as proper functions.  */\n@@ -180,7 +180,7 @@\n #define __builtin_ia32_gatherdiv4si(X, Y, Z, K, M) __builtin_ia32_gatherdiv4si(X, Y, Z, K, 1)\n #define __builtin_ia32_gatherdiv4si256(X, Y, Z, K, M) __builtin_ia32_gatherdiv4si256(X, Y, Z, K, 1)\n \n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c\")\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma\")\n #include <wmmintrin.h>\n #include <smmintrin.h>\n #include <mm3dnow.h>"}]}