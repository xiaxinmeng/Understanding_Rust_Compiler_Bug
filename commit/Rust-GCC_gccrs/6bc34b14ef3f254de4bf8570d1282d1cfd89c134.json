{"sha": "6bc34b14ef3f254de4bf8570d1282d1cfd89c134", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmJjMzRiMTRlZjNmMjU0ZGU0YmY4NTcwZDEyODJkMWNmZDg5YzEzNA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2002-01-22T14:37:29Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2002-01-22T14:37:29Z"}, "message": "* class.c (build_base_path): Tweak formatting.\n\nFrom-SVN: r49075", "tree": {"sha": "6b15273baf8a967d86ed361f0adeeae2fb32eb99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b15273baf8a967d86ed361f0adeeae2fb32eb99"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6bc34b14ef3f254de4bf8570d1282d1cfd89c134", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bc34b14ef3f254de4bf8570d1282d1cfd89c134", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bc34b14ef3f254de4bf8570d1282d1cfd89c134", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bc34b14ef3f254de4bf8570d1282d1cfd89c134/comments", "author": null, "committer": null, "parents": [{"sha": "cf40364820f180bdb35437db31cdfb21ba0b0142", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf40364820f180bdb35437db31cdfb21ba0b0142", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf40364820f180bdb35437db31cdfb21ba0b0142"}], "stats": {"total": 200, "additions": 104, "deletions": 96}, "files": [{"sha": "18f5038fcabf02109044e1aff23b3e0669d86e4e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 90, "deletions": 84, "changes": 174, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc34b14ef3f254de4bf8570d1282d1cfd89c134/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc34b14ef3f254de4bf8570d1282d1cfd89c134/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6bc34b14ef3f254de4bf8570d1282d1cfd89c134", "patch": "@@ -1,3 +1,7 @@\n+2002-01-22  Jason Merrill  <jason@redhat.com>\n+\n+\t* class.c (build_base_path): Tweak formatting.\n+\n 2002-01-19  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tFix regression introduced with patch for c++/775\n@@ -25,6 +29,7 @@\n \n 2002-01-10  Ira Ruben\t<ira@apple.com>\n \n+\tPR c++/907\n \t* decl.c (start_method): Handle attrlist.\n \n 2002-01-10  Jakub Jelinek  <jakub@redhat.com>\n@@ -40,7 +45,7 @@\n \n 2002-01-09  Graham Stott  <grahams@redhat.com>\n \n-\t* decl.h ( grokdeclarator): Wrap long line.\n+\t* decl.h (grokdeclarator): Wrap long line.\n \n \t* semantics.c (FINISH_COND): Uppercase macro paramaters and\n \tadd parenthesis.\n@@ -86,26 +91,27 @@\n \t* decl2.c (coerce_new_type): Downgrade error for size_t mismatch\n \tto pedwarn.\n \n+\tPR c++/3536\n \t* method.c (make_thunk): If !flag_weak, give the thunk the\n \tfunction's linkage.\n \t(use_thunk): Here, too.\n \n 2002-01-07  Graham Stott  <grahams@redhat.com>\n \n-        * error.c: Update copyright date.\n-        (print_scope_operator): Add parenthesis.\n-        (print_left_paren): Likewise.\n-        (print_right_paren): Likewise.\n-        (print_left_bracket): Likewise.\n-        (print_right_bracket): Likewise.\n-        (print_template_argument_list_start): Likewise.\n-        (print_template_argument_list_end): Likewise.\n-        (print_non_consecutive_character): Likewise.\n-        (print_tree_identifier): Likewise.\n-        (print_identifier): Likewise.\n-        (NEXT_CODE): Uppercase macro parameter.\n-        (ident_fndecl): Delete unused.\n-        (GLOBAL_THING): Likewise.\n+\t* error.c: Update copyright date.\n+\t(print_scope_operator): Add parenthesis.\n+\t(print_left_paren): Likewise.\n+\t(print_right_paren): Likewise.\n+\t(print_left_bracket): Likewise.\n+\t(print_right_bracket): Likewise.\n+\t(print_template_argument_list_start): Likewise.\n+\t(print_template_argument_list_end): Likewise.\n+\t(print_non_consecutive_character): Likewise.\n+\t(print_tree_identifier): Likewise.\n+\t(print_identifier): Likewise.\n+\t(NEXT_CODE): Uppercase macro parameter.\n+\t(ident_fndecl): Delete unused.\n+\t(GLOBAL_THING): Likewise.\n \n 2002-01-06  Graham Stott  <grahams@redhat.com>\n \n@@ -240,76 +246,76 @@\n \t(CLASSTYPE_VFIELDS): Whitespace.\n \t(VF_DERIVED_VALUE): Wrap long line.\n \t(NAMESPACE_LEVEL): Whitespace.\n-        (CAN_HAVE_FULL_LANG_DECL_P): Remove parenthesis.\n-        (DEFARG_POINTER): Whitespace.\n-        (DECL_NEEDED_P): Remove parenthesis.\n-        (DECL_LANGUAGE): Whitespace.\n-        (SET_DECL_LANGUAGE): Add parenthesis.\n-        (DECL_CONSTRUCTOR_P): Whitespace and wrap.\n-        (DECL_OVERLOADED_OPERATOR_P): Remove parenthesis.\n-        (DECL_IN_AGGR_P): Whitespace.\n-        (DECL_FRIEND_P): Likewise.\n-        (DECL_BEFRIENDING_CLASSES): Likewise.\n-        (DECL_STATIC_FUNCTION_P): Whitespace and wrap.\n-        (DECL_NONCONVERTING_P): Whitespace.\n-        (DECL_PURE_VIRTUAL_P): Likewise.\n-        (DECL_NEEDS_FINAL_OVERRIDER_P): Likewise.\n-        (DECL_PENDING_INLINE_INFO): Whitespace.\n-        (DECL_SORTED_FIELDS): Likewise.\n-        (DECL_DEFERRED_FN): Likewise.\n-        (DECL_TEMPLATE_INFO): Likewise.\n-        (CLASSTYPE_TEMPLATE_INFO): Whitespace and wrap.\n-        (TEMPLATE_TEMPLATE_PARM_TEMPLATE_INFO); Likewise.\n-        (SET_TYPE_TEMPLATE_INFO): Add parenthesis.\n-        (TMPL_ARGS_LEVEL): Likewise.\n-        (SET_TMPL_ARGS_LEVEL): Likewise.\n-        (INNERMOST_TEMPLATE_PARMS): Whitespace.\n-        (C_TYPEDEF_EXPLICITLY_SIGNED): Uppercase macro parameter.\n-        (INTEGRAL_CODE_P(CODE): Add parenthesis.\n-        (CP_INTEGRAL_TYPE_P): Remove parenthesis.\n-        (TYPE_HAS_CONSTRUCTOR): Whitespace.\n-        (TREE_HAS_CONSTRUCTOR): Likewise.\n-        (TYPE_HAS_DESTRUCTOR): Likewise.\n-        (TYPE_HAS_REAL_ASSIGN_REF): Likewise.\n-        (TYPE_HAS_COMPLEX_ASSIGN_REF): Likewise.\n-        (TYPE_HAS_ABSTRACT_ASSIGN_REF): Likewise.\n-        (TYPE_HAS_COMPLEX_INIT_REF): Likewise.\n-        (TYPE_HAS_NONTRIVIAL_DESTRUCTOR): Likewise.\n-        (TYPE_PTRMEMFUNC_P): Likewise.\n-        (TYPE_PTRMEMFUNC_FLAG): Likewise.\n-        (TYPE_GET_PTRMEMFUNC_TYPE): Likewise.\n-        (TYPE_SET_PTRMEMFUNC_TYPE): Likewise.\n-        (TYPE_PTRMEM_CLASS_TYPE): Remove parenthesis.\n-        (TYPE_PTRMEM_POINTED_TO_TYPE): Likewise.\n-        (DECL_ACCESS): Whitespace.\n-        (DECL_GLOBAL_CTOR_P): Remove parenthesis.\n-        (DECL_GLOBAL_DTOR_P): Likewise.\n-        (GLOBAL_INIT_PRIORITY): Likewise.\n+\t(CAN_HAVE_FULL_LANG_DECL_P): Remove parenthesis.\n+\t(DEFARG_POINTER): Whitespace.\n+\t(DECL_NEEDED_P): Remove parenthesis.\n+\t(DECL_LANGUAGE): Whitespace.\n+\t(SET_DECL_LANGUAGE): Add parenthesis.\n+\t(DECL_CONSTRUCTOR_P): Whitespace and wrap.\n+\t(DECL_OVERLOADED_OPERATOR_P): Remove parenthesis.\n+\t(DECL_IN_AGGR_P): Whitespace.\n+\t(DECL_FRIEND_P): Likewise.\n+\t(DECL_BEFRIENDING_CLASSES): Likewise.\n+\t(DECL_STATIC_FUNCTION_P): Whitespace and wrap.\n+\t(DECL_NONCONVERTING_P): Whitespace.\n+\t(DECL_PURE_VIRTUAL_P): Likewise.\n+\t(DECL_NEEDS_FINAL_OVERRIDER_P): Likewise.\n+\t(DECL_PENDING_INLINE_INFO): Whitespace.\n+\t(DECL_SORTED_FIELDS): Likewise.\n+\t(DECL_DEFERRED_FN): Likewise.\n+\t(DECL_TEMPLATE_INFO): Likewise.\n+\t(CLASSTYPE_TEMPLATE_INFO): Whitespace and wrap.\n+\t(TEMPLATE_TEMPLATE_PARM_TEMPLATE_INFO); Likewise.\n+\t(SET_TYPE_TEMPLATE_INFO): Add parenthesis.\n+\t(TMPL_ARGS_LEVEL): Likewise.\n+\t(SET_TMPL_ARGS_LEVEL): Likewise.\n+\t(INNERMOST_TEMPLATE_PARMS): Whitespace.\n+\t(C_TYPEDEF_EXPLICITLY_SIGNED): Uppercase macro parameter.\n+\t(INTEGRAL_CODE_P(CODE): Add parenthesis.\n+\t(CP_INTEGRAL_TYPE_P): Remove parenthesis.\n+\t(TYPE_HAS_CONSTRUCTOR): Whitespace.\n+\t(TREE_HAS_CONSTRUCTOR): Likewise.\n+\t(TYPE_HAS_DESTRUCTOR): Likewise.\n+\t(TYPE_HAS_REAL_ASSIGN_REF): Likewise.\n+\t(TYPE_HAS_COMPLEX_ASSIGN_REF): Likewise.\n+\t(TYPE_HAS_ABSTRACT_ASSIGN_REF): Likewise.\n+\t(TYPE_HAS_COMPLEX_INIT_REF): Likewise.\n+\t(TYPE_HAS_NONTRIVIAL_DESTRUCTOR): Likewise.\n+\t(TYPE_PTRMEMFUNC_P): Likewise.\n+\t(TYPE_PTRMEMFUNC_FLAG): Likewise.\n+\t(TYPE_GET_PTRMEMFUNC_TYPE): Likewise.\n+\t(TYPE_SET_PTRMEMFUNC_TYPE): Likewise.\n+\t(TYPE_PTRMEM_CLASS_TYPE): Remove parenthesis.\n+\t(TYPE_PTRMEM_POINTED_TO_TYPE): Likewise.\n+\t(DECL_ACCESS): Whitespace.\n+\t(DECL_GLOBAL_CTOR_P): Remove parenthesis.\n+\t(DECL_GLOBAL_DTOR_P): Likewise.\n+\t(GLOBAL_INIT_PRIORITY): Likewise.\n \t(DECL_TEMPLATE_PARMS): Likewise.\n-        (DECL_TEMPLATE_RESULT): Likewise.\n-        (DECL_TEMPLATE_INSTANTIATIONS): Likewise.\n-        (DECL_TEMPLATE_SPECIALIZATIONS): Likewise.\n-        (DECL_IMPLICIT_TYPEDEF_P): Remove parenthesis.\n-        (SET_DECL_IMPLICIT_TYPEDEF_P): Likewise.\n-        (PRIMARY_TEMPLATE_P): Add parenthesis.\n-        (DECL_USE_TEMPLATE): Whitespace.\n-        (CLASSTYPE_IMPLICIT_INSTANTIATION): Likewise.\n-        (SET_CLASSTYPE_IMPLICIT_INSTANTIATION): Likewise.\n-        (CLASSTYPE_EXPLICIT_INSTANTIATION): Likewise.\n-        (SET_CLASSTYPE_EXPLICIT_INSTANTIATION): Likewise.\n-        (CALL_DECLARATOR_PARMS): Remove parenthesis.\n-        (CALL_DECLARATOR_QUALS): Likewise.\n-        (CALL_DECLARATOR_EXCEPTION_SPEC): Likewise.\n-        (TEMP_NAME_P): Wrap.\n-        (VFIELD_NAME_P): Likewise.\n-        (B_SET): Uppercase macro parameters and add parenthesis.\n-        (B_CLR): Likewise.\n-        (B_TST): Likewise.\n-        (LOOKUP_NAMESPACES_ONLY): Uppercase macro parameters.\n-        (LOOKUP_TYPES_ONLY): Uppercase macro parameters.\n-        (LOOKUP_QUALIFIERS_ONLY): Uppercase macro parameters.\n-        (same_or_base_type_p): Likewise.\n-        (cp_deprecated): Likewise.\n+\t(DECL_TEMPLATE_RESULT): Likewise.\n+\t(DECL_TEMPLATE_INSTANTIATIONS): Likewise.\n+\t(DECL_TEMPLATE_SPECIALIZATIONS): Likewise.\n+\t(DECL_IMPLICIT_TYPEDEF_P): Remove parenthesis.\n+\t(SET_DECL_IMPLICIT_TYPEDEF_P): Likewise.\n+\t(PRIMARY_TEMPLATE_P): Add parenthesis.\n+\t(DECL_USE_TEMPLATE): Whitespace.\n+\t(CLASSTYPE_IMPLICIT_INSTANTIATION): Likewise.\n+\t(SET_CLASSTYPE_IMPLICIT_INSTANTIATION): Likewise.\n+\t(CLASSTYPE_EXPLICIT_INSTANTIATION): Likewise.\n+\t(SET_CLASSTYPE_EXPLICIT_INSTANTIATION): Likewise.\n+\t(CALL_DECLARATOR_PARMS): Remove parenthesis.\n+\t(CALL_DECLARATOR_QUALS): Likewise.\n+\t(CALL_DECLARATOR_EXCEPTION_SPEC): Likewise.\n+\t(TEMP_NAME_P): Wrap.\n+\t(VFIELD_NAME_P): Likewise.\n+\t(B_SET): Uppercase macro parameters and add parenthesis.\n+\t(B_CLR): Likewise.\n+\t(B_TST): Likewise.\n+\t(LOOKUP_NAMESPACES_ONLY): Uppercase macro parameters.\n+\t(LOOKUP_TYPES_ONLY): Uppercase macro parameters.\n+\t(LOOKUP_QUALIFIERS_ONLY): Uppercase macro parameters.\n+\t(same_or_base_type_p): Likewise.\n+\t(cp_deprecated): Likewise.\n \n 2002-01-05  Richard Henderson  <rth@redhat.com>\n "}, {"sha": "f9d597cafb755c212e5ff46659deaf7fb897adb3", "filename": "gcc/cp/class.c", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc34b14ef3f254de4bf8570d1282d1cfd89c134/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc34b14ef3f254de4bf8570d1282d1cfd89c134/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=6bc34b14ef3f254de4bf8570d1282d1cfd89c134", "patch": "@@ -252,7 +252,7 @@ build_base_path (code, expr, binfo, nonnull)\n      int nonnull;\n {\n   tree v_binfo = NULL_TREE;\n-  tree t;\n+  tree d_binfo = NULL_TREE;\n   tree probe;\n   tree offset;\n   tree target_type;\n@@ -263,11 +263,13 @@ build_base_path (code, expr, binfo, nonnull)\n \n   if (expr == error_mark_node || binfo == error_mark_node || !binfo)\n     return error_mark_node;\n-  \n-  for (probe = binfo; probe;\n-       t = probe, probe = BINFO_INHERITANCE_CHAIN (probe))\n-    if (!v_binfo && TREE_VIA_VIRTUAL (probe))\n-      v_binfo = probe;\n+\n+  for (probe = binfo; probe; probe = BINFO_INHERITANCE_CHAIN (probe))\n+    {\n+      d_binfo = probe;\n+      if (!v_binfo && TREE_VIA_VIRTUAL (probe))\n+\tv_binfo = probe;\n+    }\n \n   probe = TYPE_MAIN_VARIANT (TREE_TYPE (expr));\n   if (want_pointer)\n@@ -276,13 +278,13 @@ build_base_path (code, expr, binfo, nonnull)\n   my_friendly_assert (code == MINUS_EXPR\n \t\t      ? same_type_p (BINFO_TYPE (binfo), probe)\n \t\t      : code == PLUS_EXPR\n-\t\t      ? same_type_p (BINFO_TYPE (t), probe)\n+\t\t      ? same_type_p (BINFO_TYPE (d_binfo), probe)\n \t\t      : false, 20010723);\n   \n   if (code == MINUS_EXPR && v_binfo)\n     {\n       error (\"cannot convert from base `%T' to derived type `%T' via virtual base `%T'\",\n-\t\tBINFO_TYPE (binfo), BINFO_TYPE (t), BINFO_TYPE (v_binfo));\n+\t     BINFO_TYPE (binfo), BINFO_TYPE (d_binfo), BINFO_TYPE (v_binfo));\n       return error_mark_node;\n     }\n \n@@ -303,12 +305,12 @@ build_base_path (code, expr, binfo, nonnull)\n   if (v_binfo && !fixed_type_p)\n     {\n       /* Going via virtual base V_BINFO.  We need the static offset\n-         from V_BINFO to BINFO, and the dynamic offset from T to\n-         V_BINFO.  That offset is an entry in T's vtable.  */\n+         from V_BINFO to BINFO, and the dynamic offset from D_BINFO to\n+         V_BINFO.  That offset is an entry in D_BINFO's vtable.  */\n       tree v_offset = build_vfield_ref (build_indirect_ref (expr, NULL),\n \t\t\t\t\tTREE_TYPE (TREE_TYPE (expr)));\n       \n-      v_binfo = binfo_for_vbase (BINFO_TYPE (v_binfo), BINFO_TYPE (t));\n+      v_binfo = binfo_for_vbase (BINFO_TYPE (v_binfo), BINFO_TYPE (d_binfo));\n       \n       v_offset = build (PLUS_EXPR, TREE_TYPE (v_offset),\n \t\t\tv_offset,  BINFO_VPTR_FIELD (v_binfo));\n@@ -326,7 +328,7 @@ build_base_path (code, expr, binfo, nonnull)\n \toffset = v_offset;\n     }\n \n-  target_type = code == PLUS_EXPR ? BINFO_TYPE (binfo) : BINFO_TYPE (t);\n+  target_type = code == PLUS_EXPR ? BINFO_TYPE (binfo) : BINFO_TYPE (d_binfo);\n   \n   target_type = cp_build_qualified_type\n     (target_type, cp_type_quals (TREE_TYPE (TREE_TYPE (expr))));"}]}