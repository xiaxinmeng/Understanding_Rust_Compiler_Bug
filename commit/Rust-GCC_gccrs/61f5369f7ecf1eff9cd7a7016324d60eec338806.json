{"sha": "61f5369f7ecf1eff9cd7a7016324d60eec338806", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjFmNTM2OWY3ZWNmMWVmZjljZDdhNzAxNjMyNGQ2MGVlYzMzODgwNg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-02-07T22:14:11Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-02-08T16:14:58Z"}, "message": "c++: Fix -Wreturn-local-addr location.\n\n\t* typeck.c (maybe_warn_about_returning_address_of_local): Add\n\tlocation parameter.", "tree": {"sha": "c0b09388b721cc06ee110064b69953e4df6c4fd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0b09388b721cc06ee110064b69953e4df6c4fd4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61f5369f7ecf1eff9cd7a7016324d60eec338806", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61f5369f7ecf1eff9cd7a7016324d60eec338806", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61f5369f7ecf1eff9cd7a7016324d60eec338806", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61f5369f7ecf1eff9cd7a7016324d60eec338806/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c151a342b8bae48ce4c864e67913bc3a0346c4c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c151a342b8bae48ce4c864e67913bc3a0346c4c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c151a342b8bae48ce4c864e67913bc3a0346c4c7"}], "stats": {"total": 16, "additions": 10, "deletions": 6}, "files": [{"sha": "0894457b7a336dad91318358610d2443c2aab7c3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f5369f7ecf1eff9cd7a7016324d60eec338806/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f5369f7ecf1eff9cd7a7016324d60eec338806/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=61f5369f7ecf1eff9cd7a7016324d60eec338806", "patch": "@@ -1,5 +1,8 @@\n 2020-02-08  Jason Merrill  <jason@redhat.com>\n \n+\t* typeck.c (maybe_warn_about_returning_address_of_local): Add\n+\tlocation parameter.\n+\n \t* typeck2.c (process_init_constructor): Also clear TREE_SIDE_EFFECTS\n \tif appropriate.\n "}, {"sha": "c0c98dad9809a4b5507e9c864d044eb735de0af7", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61f5369f7ecf1eff9cd7a7016324d60eec338806/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61f5369f7ecf1eff9cd7a7016324d60eec338806/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=61f5369f7ecf1eff9cd7a7016324d60eec338806", "patch": "@@ -58,7 +58,7 @@ static tree pointer_diff (location_t, tree, tree, tree, tsubst_flags_t, tree *);\n static tree get_delta_difference (tree, tree, bool, bool, tsubst_flags_t);\n static void casts_away_constness_r (tree *, tree *, tsubst_flags_t);\n static bool casts_away_constness (tree, tree, tsubst_flags_t);\n-static bool maybe_warn_about_returning_address_of_local (tree);\n+static bool maybe_warn_about_returning_address_of_local (tree, location_t = UNKNOWN_LOCATION);\n static void error_args_num (location_t, tree, bool);\n static int convert_arguments (tree, vec<tree, va_gc> **, tree, int,\n                               tsubst_flags_t);\n@@ -9466,11 +9466,12 @@ convert_for_initialization (tree exp, tree type, tree rhs, int flags,\n    temporary give an appropriate warning and return true.  */\n \n static bool\n-maybe_warn_about_returning_address_of_local (tree retval)\n+maybe_warn_about_returning_address_of_local (tree retval, location_t loc)\n {\n   tree valtype = TREE_TYPE (DECL_RESULT (current_function_decl));\n   tree whats_returned = fold_for_warn (retval);\n-  location_t loc = cp_expr_loc_or_input_loc (retval);\n+  if (!loc)\n+    loc = cp_expr_loc_or_input_loc (retval);\n \n   for (;;)\n     {\n@@ -9504,7 +9505,7 @@ maybe_warn_about_returning_address_of_local (tree retval)\n \t  || is_std_forward_p (whats_returned)))\n     {\n       tree arg = CALL_EXPR_ARG (whats_returned, 0);\n-      return maybe_warn_about_returning_address_of_local (arg);\n+      return maybe_warn_about_returning_address_of_local (arg, loc);\n     }\n \n   if (TREE_CODE (whats_returned) != ADDR_EXPR)\n@@ -9550,7 +9551,7 @@ maybe_warn_about_returning_address_of_local (tree retval)\n \t  if (TYPE_REF_P (TREE_TYPE (base)))\n \t    {\n \t      if (tree init = DECL_INITIAL (base))\n-\t\treturn maybe_warn_about_returning_address_of_local (init);\n+\t\treturn maybe_warn_about_returning_address_of_local (init, loc);\n \t      else\n \t\treturn false;\n \t    }\n@@ -10077,7 +10078,7 @@ check_return_expr (tree retval, bool *no_warning)\n \tretval = build2 (COMPOUND_EXPR, TREE_TYPE (retval), retval,\n \t\t\t TREE_OPERAND (retval, 0));\n       else if (!processing_template_decl\n-\t       && maybe_warn_about_returning_address_of_local (retval)\n+\t       && maybe_warn_about_returning_address_of_local (retval, loc)\n \t       && INDIRECT_TYPE_P (valtype))\n \tretval = build2 (COMPOUND_EXPR, TREE_TYPE (retval), retval,\n \t\t\t build_zero_cst (TREE_TYPE (retval)));"}]}