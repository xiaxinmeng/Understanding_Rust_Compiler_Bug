{"sha": "0705d3f487d2b8c709c25051f55079a6e22cb3d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDcwNWQzZjQ4N2QyYjhjNzA5YzI1MDUxZjU1MDc5YTZlMjJjYjNkMA==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2009-02-18T06:17:52Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2009-02-18T06:17:52Z"}, "message": "re PR target/38891 (using ms_abi function attribute with -mno-sse generates an internal compiler error)\n\ngcc/\n\n2009-02-17  Xuepeng Guo  <xuepeng.guo@intel.com>\n\n\tPR target/38891\n\t* config/i386/i386.h (CONDITIONAL_REGISTER_USAGE): Move the hunk of\n\tinitialization for MS_ABI prior to the hunk of !TARGET_MMX.\n\ngcc/testsuite\n\n2009-02-17  Xuepeng Guo  <xuepeng.guo@intel.com>\n\n\tPR target/38891\n\t* gcc.dg/callabi/pr38891.c: New.\n\n2009-02-17  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* gcc.dg/callabi/callabi.exp: New.\n\nFrom-SVN: r144258", "tree": {"sha": "268117c0a63379417b939a66045d1dbf33c0ac2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/268117c0a63379417b939a66045d1dbf33c0ac2d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0705d3f487d2b8c709c25051f55079a6e22cb3d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0705d3f487d2b8c709c25051f55079a6e22cb3d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0705d3f487d2b8c709c25051f55079a6e22cb3d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0705d3f487d2b8c709c25051f55079a6e22cb3d0/comments", "author": null, "committer": null, "parents": [{"sha": "bce08d5003e0cb1f63cbe92895be8cbcc5c48547", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bce08d5003e0cb1f63cbe92895be8cbcc5c48547", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bce08d5003e0cb1f63cbe92895be8cbcc5c48547"}], "stats": {"total": 78, "additions": 67, "deletions": 11}, "files": [{"sha": "ac325e02264e0763d96aef5905e9fcf07c44e423", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0705d3f487d2b8c709c25051f55079a6e22cb3d0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0705d3f487d2b8c709c25051f55079a6e22cb3d0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0705d3f487d2b8c709c25051f55079a6e22cb3d0", "patch": "@@ -1,3 +1,9 @@\n+2009-02-17  Xuepeng Guo  <xuepeng.guo@intel.com>\n+\n+\tPR target/38891\n+\t* config/i386/i386.h (CONDITIONAL_REGISTER_USAGE): Move the hunk of\n+\tinitialization for MS_ABI prior to the hunk of !TARGET_MMX.\n+\n 2009-02-17  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/39082"}, {"sha": "a8b97d3cbf1b2cda237e7d1a14fe4e387deb6762", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0705d3f487d2b8c709c25051f55079a6e22cb3d0/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0705d3f487d2b8c709c25051f55079a6e22cb3d0/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=0705d3f487d2b8c709c25051f55079a6e22cb3d0", "patch": "@@ -937,6 +937,17 @@ do {\t\t\t\t\t\t\t\t\t\\\n \tfixed_regs[j] = 1;\t\t\t\t\t\t\\\n \tcall_used_regs[j] = 1;\t\t\t\t\t\t\\\n       }\t\t\t\t\t\t\t\t\t\\\n+    if (TARGET_64BIT\t\t\t\t\t\t\t\\\n+        && ((cfun && cfun->machine->call_abi == MS_ABI)\t\t\t\\\n+            || (!cfun && DEFAULT_ABI == MS_ABI)))\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+        int i;\t\t\t\t\t\t\t\t\\\n+        call_used_regs[4 /*RSI*/] = 0;                                  \\\n+        call_used_regs[5 /*RDI*/] = 0;                                  \\\n+\tfor (i = 0; i < 8; i++)\t\t\t\t\t\t\\\n+\t  call_used_regs[45+i] = 0;\t\t\t\t\t\\\n+\tcall_used_regs[27] = call_used_regs[28] = 0;\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n     if (! TARGET_MMX)\t\t\t\t\t\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n \tint i;\t\t\t\t\t\t\t\t\\\n@@ -968,17 +979,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n \tfor (i = FIRST_REX_SSE_REG; i <= LAST_REX_SSE_REG; i++)\t\t\\\n \t  reg_names[i] = \"\";\t\t\t\t\t\t\\\n       }\t\t\t\t\t\t\t\t\t\\\n-    if (TARGET_64BIT\t\t\t\t\t\t\t\\\n-        && ((cfun && cfun->machine->call_abi == MS_ABI)\t\t\t\\\n-            || (!cfun && DEFAULT_ABI == MS_ABI)))\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-        int i;\t\t\t\t\t\t\t\t\\\n-        call_used_regs[4 /*RSI*/] = 0;                                  \\\n-        call_used_regs[5 /*RDI*/] = 0;                                  \\\n-\tfor (i = 0; i < 8; i++)\t\t\t\t\t\t\\\n-\t  call_used_regs[45+i] = 0;\t\t\t\t\t\\\n-\tcall_used_regs[27] = call_used_regs[28] = 0;\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n   } while (0)\n \n /* Return number of consecutive hard regs needed starting at reg REGNO"}, {"sha": "9b8b8a98300782f03a5645d233c636e276234aa2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0705d3f487d2b8c709c25051f55079a6e22cb3d0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0705d3f487d2b8c709c25051f55079a6e22cb3d0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0705d3f487d2b8c709c25051f55079a6e22cb3d0", "patch": "@@ -1,3 +1,12 @@\n+2009-02-17  Xuepeng Guo  <xuepeng.guo@intel.com>\n+\n+\tPR target/38891\n+\t* gcc.dg/callabi/pr38891.c: New.\n+\n+2009-02-17  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* gcc.dg/callabi/callabi.exp: New.\n+\n 2009-02-17  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/39082"}, {"sha": "1c11ecc611e5fbae248d7d716c2e5c85b753a174", "filename": "gcc/testsuite/gcc.dg/callabi/callabi.exp", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0705d3f487d2b8c709c25051f55079a6e22cb3d0/gcc%2Ftestsuite%2Fgcc.dg%2Fcallabi%2Fcallabi.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0705d3f487d2b8c709c25051f55079a6e22cb3d0/gcc%2Ftestsuite%2Fgcc.dg%2Fcallabi%2Fcallabi.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcallabi%2Fcallabi.exp?ref=0705d3f487d2b8c709c25051f55079a6e22cb3d0", "patch": "@@ -0,0 +1,31 @@\n+#   Copyright (C) 2009 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# GCC testsuite that uses the `dg.exp' driver.\n+\n+# Load support procs.\n+load_lib gcc-dg.exp\n+\n+# If a testcase doesn't have special options, use these.\n+global DEFAULT_CFLAGS\n+if ![info exists DEFAULT_CFLAGS] then {\n+    set DEFAULT_CFLAGS \" -ansi -pedantic-errors\"\n+}\n+\n+dg-init\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\\[cS\\]]] \\\n+    \"\" $DEFAULT_CFLAGS\n+dg-finish"}, {"sha": "586e99f143dba2f57d06d758a48a58ac1928067e", "filename": "gcc/testsuite/gcc.dg/callabi/pr38891.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0705d3f487d2b8c709c25051f55079a6e22cb3d0/gcc%2Ftestsuite%2Fgcc.dg%2Fcallabi%2Fpr38891.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0705d3f487d2b8c709c25051f55079a6e22cb3d0/gcc%2Ftestsuite%2Fgcc.dg%2Fcallabi%2Fpr38891.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcallabi%2Fpr38891.c?ref=0705d3f487d2b8c709c25051f55079a6e22cb3d0", "patch": "@@ -0,0 +1,10 @@\n+/* Test for cross x86_64<->w64 abi standard calls.\n+*/\n+/* { dg-do compile { target { x86_64-*-* } } } */\n+/* { dg-options \"-mno-sse\" } */\n+#include \"callabi.h\"\n+\n+long double\n+CALLABI_CROSS func_cross ()\n+{\n+}"}]}