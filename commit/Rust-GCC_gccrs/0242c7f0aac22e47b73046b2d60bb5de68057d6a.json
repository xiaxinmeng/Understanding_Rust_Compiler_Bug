{"sha": "0242c7f0aac22e47b73046b2d60bb5de68057d6a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDI0MmM3ZjBhYWMyMmU0N2I3MzA0NmIyZDYwYmI1ZGU2ODA1N2Q2YQ==", "commit": {"author": {"name": "Carl Love", "email": "cel@us.ibm.com", "date": "2017-12-11T22:57:08Z"}, "committer": {"name": "Carl Love", "email": "carll@gcc.gnu.org", "date": "2017-12-11T22:57:08Z"}, "message": "altivec-12.c (main): Add tests for vec_avg.\n\ngcc/testsuite/ChangeLog:\n\n2017-12-07  Carl Love  <cel@us.ibm.com>\n\n\t* gcc.target/powerpc/altivec-12.c (main):  Add tests for vec_avg.\n\t* gcc.target/powerpc/builtins-1.c: Renamed builtins-1.h.\n\t* gcc.target/powerpc/builtins-1.h: Add tests for vec_and,\n\tvec_andc, vec_cpsgn, vec_mergeh,vec_mergel, vec_nor, vec_or,\n\tvec_sel, vec_xor, vec_all_eq, vec_all_ge, vec_all_gt, vec_all_le,\n\tvec_all_lt, vec_all_ne,\tvec_any_eq,vec_any_ge, vec_any_gt,vec_any_le,\n\tvec_any_lt, vec_any_ne, vec_cntlz, vec_round, vec_rsqrt, vec_rsqrte,\n\tvec_splat, vec_div, vec_mul,vec_ctf, vec_cts, vec_ctu.\n\t* gcc.target/powerpc/builtins-1-be.c: New file, big endian\n\ttest file for tests in builtins-1.h.\n\t* gcc.target/powerpc/builtins-1-le.c: New file, little endian\n\ttest file for tests in builtins-1.h.\n\t* gcc.target/powerpc/builtins-2.c (main): Add tests for vec_ctf,\n\tvec_cts, vec_ctu.\n\t* gcc.target/powerpc/builtins-3-runnable.c (test_result_sp): Fix printf\n\tconversion character.\n \t* gcc.target/powerpc/fold-vec-minmax-char.c (test1_min, test2_min,\n\ttest4_min, test1_max, test2_max): Add tests for vec_max and vec_min.\n \t* gcc.target/powerpc/fold-vec-minmax-int.c (test4_min, test5_min,\n\ttest7_min, test8_min): Add tests for vec_min.\n \t* gcc.target/powerpc/fold-vec-minmax-longlong.c (test7_max, test8_max,\n\ttest9_max, test10_max): Add tests for and vec_max.\n \t* gcc.target/powerpc/fold-vec-minmax-short.c (test4_min, test5_min,\n\ttes7_min, test8_min): Add tests for and vec_min.\n \t* gcc.target/powerpc/p8vector-builtin-8.c (foo): Add test for vec_adds,\n\tvec_subs, vec_sum2s, vec_sum4s.\n \t* gcc.target/powerpc/vsx-splats-p8.c: New file to test vec_splats.\n\t* gcc.target/vsx-vector-5.c (arg1_tests_d, arg1_tests_d): Add\n\ttests for vec_ceil, vec_floor, vec_nearbyint, vec_sqrt.\n\t* gcc.target/vsx-vector-7.c (foo): Add tests for vec_sel.\n\t* gcc.target/vsx-vector-abss.c: New file to test vec_abss.\n\nFrom-SVN: r255556", "tree": {"sha": "93db7393ad9503ded0b80817d8546b694d5c4f57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93db7393ad9503ded0b80817d8546b694d5c4f57"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0242c7f0aac22e47b73046b2d60bb5de68057d6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0242c7f0aac22e47b73046b2d60bb5de68057d6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0242c7f0aac22e47b73046b2d60bb5de68057d6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0242c7f0aac22e47b73046b2d60bb5de68057d6a/comments", "author": {"login": "carlelove", "id": 86435705, "node_id": "MDQ6VXNlcjg2NDM1NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/86435705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carlelove", "html_url": "https://github.com/carlelove", "followers_url": "https://api.github.com/users/carlelove/followers", "following_url": "https://api.github.com/users/carlelove/following{/other_user}", "gists_url": "https://api.github.com/users/carlelove/gists{/gist_id}", "starred_url": "https://api.github.com/users/carlelove/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carlelove/subscriptions", "organizations_url": "https://api.github.com/users/carlelove/orgs", "repos_url": "https://api.github.com/users/carlelove/repos", "events_url": "https://api.github.com/users/carlelove/events{/privacy}", "received_events_url": "https://api.github.com/users/carlelove/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4ded4b230da2408bc6752ca4e4551204bebe806b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ded4b230da2408bc6752ca4e4551204bebe806b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ded4b230da2408bc6752ca4e4551204bebe806b"}], "stats": {"total": 714, "additions": 635, "deletions": 79}, "files": [{"sha": "884c722691fc9bb0a137223a4ffc3486321fba8e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0242c7f0aac22e47b73046b2d60bb5de68057d6a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0242c7f0aac22e47b73046b2d60bb5de68057d6a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0242c7f0aac22e47b73046b2d60bb5de68057d6a", "patch": "@@ -1,3 +1,37 @@\n+2017-12-07  Carl Love  <cel@us.ibm.com>\n+\n+\t* gcc.target/powerpc/altivec-12.c (main):  Add tests for vec_avg.\n+\t* gcc.target/powerpc/builtins-1.c: Renamed builtins-1.h.\n+\t* gcc.target/powerpc/builtins-1.h: Add tests for vec_and,\n+\tvec_andc, vec_cpsgn, vec_mergeh,vec_mergel, vec_nor, vec_or,\n+\tvec_sel, vec_xor, vec_all_eq, vec_all_ge, vec_all_gt, vec_all_le,\n+\tvec_all_lt, vec_all_ne,\tvec_any_eq,vec_any_ge, vec_any_gt,vec_any_le,\n+\tvec_any_lt, vec_any_ne, vec_cntlz, vec_round, vec_rsqrt, vec_rsqrte,\n+\tvec_splat, vec_div, vec_mul,vec_ctf, vec_cts, vec_ctu.\n+\t* gcc.target/powerpc/builtins-1-be.c: New file, big endian\n+\ttest file for tests in builtins-1.h.\n+\t* gcc.target/powerpc/builtins-1-le.c: New file, little endian\n+\ttest file for tests in builtins-1.h.\n+\t* gcc.target/powerpc/builtins-2.c (main): Add tests for vec_ctf,\n+\tvec_cts, vec_ctu.\n+\t* gcc.target/powerpc/builtins-3-runnable.c (test_result_sp): Fix printf\n+\tconversion character.\n+ \t* gcc.target/powerpc/fold-vec-minmax-char.c (test1_min, test2_min,\n+\ttest4_min, test1_max, test2_max): Add tests for vec_max and vec_min.\n+ \t* gcc.target/powerpc/fold-vec-minmax-int.c (test4_min, test5_min,\n+\ttest7_min, test8_min): Add tests for vec_min.\n+ \t* gcc.target/powerpc/fold-vec-minmax-longlong.c (test7_max, test8_max,\n+\ttest9_max, test10_max): Add tests for and vec_max.\n+ \t* gcc.target/powerpc/fold-vec-minmax-short.c (test4_min, test5_min,\n+\ttes7_min, test8_min): Add tests for and vec_min.\n+ \t* gcc.target/powerpc/p8vector-builtin-8.c (foo): Add test for vec_adds,\n+\tvec_subs, vec_sum2s, vec_sum4s.\n+ \t* gcc.target/powerpc/vsx-splats-p8.c: New file to test vec_splats.\n+\t* gcc.target/vsx-vector-5.c (arg1_tests_d, arg1_tests_d): Add\n+\ttests for vec_ceil, vec_floor, vec_nearbyint, vec_sqrt.\n+\t* gcc.target/vsx-vector-7.c (foo): Add tests for vec_sel.\n+\t* gcc.target/vsx-vector-abss.c: New file to test vec_abss.\n+\n 2017-12-11  Carl Love  <cel@us.ibm.com>\n \n \t* config/rs6000/altivec.h (vec_extract_fp32_from_shorth,"}, {"sha": "b0267b59b84d09af38f84c9028d709c7069a1f21", "filename": "gcc/testsuite/gcc.target/powerpc/altivec-12.c", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0242c7f0aac22e47b73046b2d60bb5de68057d6a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0242c7f0aac22e47b73046b2d60bb5de68057d6a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-12.c?ref=0242c7f0aac22e47b73046b2d60bb5de68057d6a", "patch": "@@ -6,10 +6,33 @@\n /* Program to test PowerPC AltiVec instructions.  */\n \n #include <altivec.h>\n+#include <stdio.h>\n \n extern void abort (void);\n #define CHECK_IF(E) if(!(E)) abort()\n \n+vector char sca = {0,4,8,1,5,9,2,6,10,3,7,11,15,12,14,13};\n+vector char scb = {6,4,8,3,1,9,2,6,10,3,7,11,15,12,14,13};\n+vector char sc_expected = {3,4,8,2,3,9,2,6,10,3,7,11,15,12,14,13};\n+vector char scz;\n+vector unsigned char uca = {0,4,8,1,5,9,2,6,10,3,7,11,15,12,14,13};\n+vector unsigned char ucb = {6,4,8,3,1,9,2,6,10,3,7,11,15,12,14,13};\n+vector unsigned char uc_expected = {3,4,8,2,3,9,2,6,10,3,7,11,15,12,14,13};\n+vector char ucz;\n+\n+vector short int ssia = {9, 16, 25, 36};\n+vector short int ssib = {-8, -27, -64, -125};\n+vector short int ssiz;\n+\n+vector short unsigned int ssua = {9, 16, 25, 36};\n+vector short unsigned int ssub = {8, 27, 64, 125};\n+vector short unsigned int ssuz;\n+\n+vector unsigned int uia = {22, 13, 24, 39};\n+vector unsigned int uib = {8, 7, 4, 15};\n+vector unsigned int ui_expected = {15, 10, 14, 27};\n+vector unsigned int uiz;\n+\n vector int a1 = (vector int){ 100, 200, 300, 400 };\n vector int a2 = (vector int){ 500, 600, 700, 800 };\n vector int addi = (vector int){ 600, 800, 1000, 1200 };\n@@ -24,8 +47,11 @@ vector float addf3 = (vector float){ 6.0, 8.0, 9.9, 12.1 };\n vector int k;\n vector float f, g, h;\n \n+int i;\n+\n int main ()\n {\n+\n   k = vec_add (a1, a2);\n   CHECK_IF (vec_all_eq (addi, k));\n   CHECK_IF (vec_all_ge (addi, k));\n@@ -40,7 +66,27 @@ int main ()\n   CHECK_IF (!vec_any_lt (addi, k));\n   CHECK_IF (!vec_any_gt (addi, k));\n \n+  ssiz = vec_avg (ssia, ssib);\n+  ssuz = vec_avg (ssua, ssub);\n   k = vec_avg (a1, a2);\n+  scz = vec_avg (sca, scb);\n+\n+  for (i=0; i< 16; i++)\n+    if (scz[i] != sc_expected[i])\n+      abort ();\n+  \n+  ucz = vec_avg (uca, ucb);\n+\n+  for (i=0; i<16; i++)\n+    if (ucz[i] != uc_expected[i])\n+      abort ();\n+  \n+  uiz = vec_avg (uia, uib);\n+\n+  for (i=0; i< 4; i++)\n+    if (uiz[i] != ui_expected[i])\n+      abort ();\n+  \n   CHECK_IF (vec_all_eq (k, avgi));\n \n   h = vec_add (f1, f2);"}, {"sha": "f6db3c2e46ffd587c46c4388c964351179dc3f37", "filename": "gcc/testsuite/gcc.target/powerpc/builtins-1-be.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0242c7f0aac22e47b73046b2d60bb5de68057d6a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-1-be.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0242c7f0aac22e47b73046b2d60bb5de68057d6a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-1-be.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-1-be.c?ref=0242c7f0aac22e47b73046b2d60bb5de68057d6a", "patch": "@@ -0,0 +1,70 @@\n+/* { dg-do compile { target { powerpc64-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+/* { dg-options \"-mcpu=power8 -O0\" } */\n+\n+/* Test that a number of newly added builtin overloads are accepted\n+   by the compiler.  */\n+\n+/* Expected results for Big Endian:\n+   vec_all_eq          vcmpequd.\n+   vec_all_ne          vcmpequd.\n+   vec_any_eq          vcmpequd.\n+   vec_any_ne          vcmpequd.\n+   vec_all_gt          vcmpgtud.\n+   vec_all_le          vcmpgtud.\n+   vec_any_gt          vcmpgtud.\n+   vec_any_lt          vcmpgtud.\n+   vec_any_le          vcmpgtud.\n+   vec_and             xxland\n+   vec_andc            xxlandc\n+   vec_cntlz           vclzd, vclzb, vclzw, vclzh\n+   xvcpsgnsp  vec_cpsgn\n+   vec_ctf    xvmuldp \n+   vec_cts xvcvdpsxds, vctsxs\n+   vec_ctu   xvcvdpuxds, vctuxs\n+   vec_div   divd, divdu\n+   vec_mergel vmrghb, vmrghh, xxmrghw\n+   vec_mergeh  xxmrglw, vmrglh\n+   vec_mul mulld\n+   vec_nor xxlnor\n+   vec_or xxlor\n+   vec_packsu vpksdus\n+   vec_perm vperm\n+   vec_round xvrdpi\n+   vec_sel xxsel\n+   vec_xor xxlxor \n+   vec_rsqrt  xvrsqrtesp\n+   vec_rsqrte xvrsqrtesp  */\n+\n+/* { dg-final { scan-assembler-times \"vcmpequd.\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vcmpgtud.\" 8 } } */\n+/* { dg-final { scan-assembler-times \"xxland\" 29 } } */\n+/* { dg-final { scan-assembler-times \"vclzb\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vclzb\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vclzw\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vclzh\" 2 } } */\n+/* { dg-final { scan-assembler-times \"xvcpsgnsp\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xvmuldp\" 6 } } */\n+/* { dg-final { scan-assembler-times \"xvcvdpsxds\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vctsxs\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xvcvdpuxds\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vctuxs\" 1 } } */\n+/* { dg-final { scan-assembler-times \"divd\" 4 } } */\n+/* { dg-final { scan-assembler-times \"divdu\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vmrghb\" 0 } } */\n+/* { dg-final { scan-assembler-times \"vmrghh\" 3 } } */\n+/* { dg-final { scan-assembler-times \"xxmrghw\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xxmrglw\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vmrglh\" 4 } } */\n+/* { dg-final { scan-assembler-times \"mulld\" 4 } } */\n+/* { dg-final { scan-assembler-times \"xxlnor\" 19 } } */\n+/* { dg-final { scan-assembler-times \"xxlor\" 14 } } */\n+/* { dg-final { scan-assembler-times \"vpksdus\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vperm\" 2 } } */\n+/* { dg-final { scan-assembler-times \"xvrdpi\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xxsel\" 6 } } */\n+/* { dg-final { scan-assembler-times \"xxlxor\" 6 } } */\n+\n+/* The source code for the test is in builtins-1.h.  */\n+#include \"builtins-1.h\"\n+"}, {"sha": "8763c6888c50f2ceced09b1a6ed309c8fa1dcd38", "filename": "gcc/testsuite/gcc.target/powerpc/builtins-1-le.c", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0242c7f0aac22e47b73046b2d60bb5de68057d6a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-1-le.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0242c7f0aac22e47b73046b2d60bb5de68057d6a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-1-le.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-1-le.c?ref=0242c7f0aac22e47b73046b2d60bb5de68057d6a", "patch": "@@ -0,0 +1,69 @@\n+/* { dg-do compile { target { powerpc64le-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+/* { dg-options \"-mcpu=power8 -O0\" } */\n+\n+/* Test that a number of newly added builtin overloads are accepted\n+   by the compiler.  */\n+\n+/* Expected results for Little Endian:\n+   vec_all_eq          vcmpequd.\n+   vec_all_ne          vcmpequd.\n+   vec_any_eq          vcmpequd.\n+   vec_any_ne          vcmpequd.\n+   vec_all_gt          vcmpgtud.\n+   vec_all_le          vcmpgtud.\n+   vec_any_gt          vcmpgtud.\n+   vec_any_lt          vcmpgtud.\n+   vec_any_le          vcmpgtud.\n+   vec_and             xxland\n+   vec_andc            xxlandc\n+   vec_cntlz           vclzd, vclzb, vclzw, vclzh\n+   xvcpsgnsp  vec_cpsgn\n+   vec_ctf    xvmuldp \n+   vec_cts xvcvdpsxds, vctsxs\n+   vec_ctu   xvcvdpuxds, vctuxs\n+   vec_div   divd, divdu\n+   vec_mergel vmrghb, vmrghh, xxmrghw\n+   vec_mergeh  xxmrglw, vmrglh\n+   vec_mul mulld\n+   vec_nor xxlnor\n+   vec_or xxlor\n+   vec_packsu vpksdus\n+   vec_perm vperm\n+   vec_round xvrdpi\n+   vec_sel xxsel\n+   vec_xor xxlxor \n+   vec_rsqrt  xvrsqrtesp\n+   vec_rsqrte xvrsqrtesp  */\n+\n+/* { dg-final { scan-assembler-times \"vcmpequd.\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vcmpgtud.\" 8 } } */\n+/* { dg-final { scan-assembler-times \"xxland\" 29 } } */\n+/* { dg-final { scan-assembler-times \"vclzb\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vclzb\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vclzw\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vclzh\" 2 } } */\n+/* { dg-final { scan-assembler-times \"xvcpsgnsp\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xvmuldp\" 6 } } */\n+/* { dg-final { scan-assembler-times \"xvcvdpsxds\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vctsxs\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xvcvdpuxds\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vctuxs\" 1 } } */\n+/* { dg-final { scan-assembler-times \"divd\" 4 } } */\n+/* { dg-final { scan-assembler-times \"divdu\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vmrghb\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vmrghh\" 4 } } */\n+/* { dg-final { scan-assembler-times \"xxmrghw\" 4 } } */\n+/* { dg-final { scan-assembler-times \"xxmrglw\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmrglh\" 3 } } */\n+/* { dg-final { scan-assembler-times \"mulld\" 4 } } */\n+/* { dg-final { scan-assembler-times \"xxlnor\" 19 } } */\n+/* { dg-final { scan-assembler-times \"xxlor\" 14 } } */\n+/* { dg-final { scan-assembler-times \"vpksdus\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vperm\" 2 } } */\n+/* { dg-final { scan-assembler-times \"xvrdpi\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xxsel\" 6 } } */\n+/* { dg-final { scan-assembler-times \"xxlxor\" 6 } } */\n+\n+/* The test code is in builtins -1.h.  */\n+#include \"builtins-1.h\""}, {"sha": "89efedb7d44c6e1c1a0e6f15065181bc9f7dda12", "filename": "gcc/testsuite/gcc.target/powerpc/builtins-1.h", "status": "renamed", "additions": 73, "deletions": 23, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0242c7f0aac22e47b73046b2d60bb5de68057d6a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0242c7f0aac22e47b73046b2d60bb5de68057d6a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-1.h?ref=0242c7f0aac22e47b73046b2d60bb5de68057d6a", "patch": "@@ -1,10 +1,6 @@\n-/* { dg-do compile { target { powerpc64le-*-* } } } */\n-/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n-/* { dg-options \"-mcpu=power8 -O0\" } */\n-\n-/* Test that a number of newly added builtin overloads are accepted\n-   by the compiler.  */\n-\n+/* This test is included into builtins-1-be.c and builtins-1-le.c to test on\n+   Big Endian and Little Endian machines.  */\n+   \n #include <altivec.h>\n \n vector double y = { 2.0, 4.0 };\n@@ -14,7 +10,14 @@ int main ()\n {\n   vector float fa = {1.0, 2.0, 3.0, -4.0};\n   vector float fb = {-2.0, -3.0, -4.0, -5.0};\n+  vector float fd = vec_and (fa, fb);\n   vector float fc = vec_cpsgn (fa, fb);\n+  vector float fe = vec_mergeh (fa, fb);\n+  vector float ff = vec_mergel (fa, fb);\n+\t  \n+  vector double da = {1.0, 2.0};\n+  vector double db = {-2.0, -3.0};\n+  vector double dz = vec_and (da, db);\n \n   vector long long la = {5L, 14L};\n   vector long long lb = {3L, 86L};\n@@ -33,14 +36,16 @@ int main ()\n   vector long long lg = vec_andc (la, lb);\n   vector long long lh = vec_andc (la, ld);\n   vector long long li = vec_andc (ld, lb);\n-\n+  \n   vector unsigned long long ug = vec_andc (ua, ub);\n   vector unsigned long long uh = vec_andc (ua, ud);\n   vector unsigned long long ui = vec_andc (ud, ub);\n \n-  vector double da = {1.0, -4.0};\n-  vector double db = {-2.0, 5.0};\n-  vector double dc = vec_cpsgn (da, db);\n+  vector double de = {1.0, -4.0};\n+  vector double df = {-2.0, 5.0};\n+  vector double dg = vec_cpsgn (de, df);\n+  vector double dzw = vec_mergeh (de, df);\n+  vector double dze = vec_mergel (de, df);\n \n   vector long long lj = vec_mergeh (la, lb);\n   vector long long lk = vec_mergeh (la, ld);\n@@ -50,6 +55,11 @@ int main ()\n   vector unsigned long long uk = vec_mergeh (ua, ud);\n   vector unsigned long long ul = vec_mergeh (ud, ua);\n \n+  vector pixel pa = {9, 16, 25, 36, 1, 2, 3, 4};\n+  vector pixel pb = {25, 36, 1, 2, 45, 3, 4, 99};\n+  vector pixel pc = vec_mergeh (pa, pb);\n+  vector pixel pd = vec_mergel (pa, pb);\n+\n   vector long long lm = vec_mergel (la, lb);\n   vector long long ln = vec_mergel (la, ld);\n   vector long long lo = vec_mergel (ld, la);\n@@ -75,7 +85,14 @@ int main ()\n   vector unsigned long long uu = vec_or (ud, ua);\n \n   vector unsigned char ca = {0,4,8,1,5,9,2,6,10,3,7,11,15,12,14,13};\n+  vector unsigned char cbb = {5,4,8,3,1,9,2,6,10,3,7,11,15,12,14,13};\n+\n   vector long long lv = vec_perm (la, lb, ca);\n+\n+  vector unsigned char  ucm = vec_and (ca, cbb);\n+  vector unsigned char  ucn = vec_andc (ca, cbb);\n+  vector unsigned char  uco = vec_mergel (ca, cbb);\n+\n   vector unsigned long long uv = vec_perm (ua, ub, ca);\n \n   vector long long lw = vec_sel (la, lb, lc);\n@@ -108,43 +125,74 @@ int main ()\n   int il = vec_any_lt (ua, ub);\n   int im = vec_any_ne (ua, ub);\n \n+  vector short ssa = {9, 16, 25, 36, 1, 2, 3, 4};\n+  vector short ssb = {-8, -27, -64, -125, 2, 3, 5, 3};\n+  vector short sscc = vec_and (ssa, ssb);\n+  vector short sscd = vec_mergeh (ssa, ssb);\n+  vector short ssce = vec_mergel (ssa, ssb);\n+\n   vector int sia = {9, 16, 25, 36};\n   vector int sib = {-8, -27, -64, -125};\n-  vector int sic = vec_mergee (sia, sib);\n-  vector int sid = vec_mergeo (sia, sib);\n+  vector int sicc = vec_and (sia, sib);\n+  vector int sicd = vec_andc (sia, sib);\n+  vector int sig = vec_mergel (sia, sib);\n \n   vector unsigned int uia = {9, 16, 25, 36};\n   vector unsigned int uib = {8, 27, 64, 125};\n-  vector unsigned int uic = vec_mergee (uia, uib);\n-  vector unsigned int uid = vec_mergeo (uia, uib);\n+  vector unsigned int uicc = vec_and (uia, uib);\n+  vector unsigned int uidd = vec_andc (uia, uib);\n+  vector unsigned int uig = vec_mergel (uia, uib);\n+\n+  vector bool char bca = {0, 1, 4, 7};\n+  vector bool char bcb = {-8, 9, 2, 9};\n+  vector bool char bcc = vec_and (bca, bcb);\n+  vector bool char bcd = vec_andc (bca, bcb);\n+  vector bool char bce = vec_mergel (bca, bcb);\n+\n+  vector bool short bsa = {0, -1, -1, 0, 3, 4, 6, 7};\n+  vector bool short bsb = {-1, -1, 0, -1, 0, 0, 0, 0};\n+  vector bool short bscc = vec_and (bsa, bsb);\n+  vector bool short bscd = vec_andc (bsa, bsb);\n+  vector bool short bsce = vec_mergel (bsa, bsb);\n \n   vector bool int bia = {0, -1, -1, 0};\n   vector bool int bib = {-1, -1, 0, -1};\n-  vector bool int bic = vec_mergee (bia, bib);\n-  vector bool int bid = vec_mergeo (bia, bib);\n+  vector bool int bicc = vec_and (bia, bib);\n+  vector bool int bicd = vec_andc (bia, bib);\n+  vector bool int bide = vec_mergel (bia, bib);\n \n   vector unsigned int uie = vec_packsu (ua, ub);\n \n   vector long long l2 = vec_cntlz (la);\n   vector unsigned long long u2 = vec_cntlz (ua);\n   vector int sie = vec_cntlz (sia);\n   vector unsigned int uif = vec_cntlz (uia);\n-  vector short ssa = {20, -40, -60, 80, 100, -120, -140, 160};\n-  vector short ssb = vec_cntlz (ssa);\n+  vector short sszz = vec_cntlz (ssa);\n+\n   vector unsigned short usa = {81, 72, 63, 54, 45, 36, 27, 18};\n-  vector unsigned short usb = vec_cntlz (usa);\n+  vector unsigned short usb = {81, 72, 63, 54, 45, 36, 27, 18};\n+  vector unsigned short usd = vec_and (usa, usb);\n+  vector unsigned short use = vec_andc (usa, usb);\n+  vector unsigned short usc = vec_cntlz (usa);\n+  vector unsigned short uscd = vec_mergeh (usa, usb);\n+  vector unsigned short usce = vec_mergel (usa, usb);\n+  \n   vector signed char sca = {-4, 3, -9, 15, -31, 31, 0, 0,\n \t\t            1, 117, -36, 99, 98, 97, 96, 95};\n   vector signed char scb = vec_cntlz (sca);\n+  vector signed char scc = vec_mergel (sca, scb);\n+\n   vector unsigned char cb = vec_cntlz (ca);\n \n   vector double dd = vec_xl (0, &y);\n   vec_xst (dd, 0, &z);\n \n-  vector double de = vec_round (dd);\n+  vector double dzz = vec_round (dd);\n+  vector double dzz1 = vec_rsqrt (dd);\n+  vector double dzz2 = vec_rsqrte (dd);\n \n-  vector double df = vec_splat (de, 0);\n-  vector double dg = vec_splat (de, 1);\n+  vector double dff = vec_splat (de, 0);\n+  vector double dgg = vec_splat (de, 1);\n   vector long long l3 = vec_splat (l2, 0);\n   vector long long l4 = vec_splat (l2, 1);\n   vector unsigned long long u3 = vec_splat (u2, 0);\n@@ -160,8 +208,10 @@ int main ()\n \n   vector double dh = vec_ctf (la, -2);\n   vector double di = vec_ctf (ua, 2);\n+  vector int sz = vec_cts (fa, 0x1F);\n   vector long long l9 = vec_cts (dh, -2);\n   vector unsigned long long u7 = vec_ctu (di, 2);\n+  vector unsigned int usz = vec_ctu (fa, 0x1F);\n \n   return 0;\n }", "previous_filename": "gcc/testsuite/gcc.target/powerpc/builtins-1.c"}, {"sha": "666e96776733a5b1b603c7603b0720e785438057", "filename": "gcc/testsuite/gcc.target/powerpc/builtins-2.c", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0242c7f0aac22e47b73046b2d60bb5de68057d6a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0242c7f0aac22e47b73046b2d60bb5de68057d6a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-2.c?ref=0242c7f0aac22e47b73046b2d60bb5de68057d6a", "patch": "@@ -1,13 +1,20 @@\n-/* { dg-do run { target { powerpc64le-*-* } } } */\n+/* { dg-do run { target { powerpc*-*-* } } } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n /* { dg-options \"-mcpu=power8 \" } */\n \n #include <altivec.h>\n \n+#ifdef DEBUG \n+#include <stdio.h>\n+#endif\n+\n void abort (void);\n \n int main ()\n {\n+  vector int inta = {27, -1, 4, 9};\n+  vector unsigned int uinta = {9, 0, 7, 222};\n+\n   vector long long sa = {27L, -14L};\n   vector long long sb = {-9L, -2L};\n \n@@ -44,5 +51,42 @@ int main ()\n       || sg[0] != 27L || sg[1] != -14L || ug[0] != 27L || ug[1] != 14L)\n     abort ();\n \n+  vector float fa = vec_ctf (inta, 5);\n+  if (fa[0] != 0.843750 || fa[1] != -0.031250 || fa[2] != 0.125000 || fa[3] != 0.281250)\n+#ifdef DEBUG\n+    printf(\"fa[0] = %f, fa[1] = %f, fa[2] = %f, fa[3] = %f\\n\",\n+           fa[0], fa[1], fa[2], fa[3]);\n+#else  \n+    abort ();\n+#endif\n+\n+  vector int sa2 = vec_cts (fa, 5);\n+  if (sa2[0] != 27 || sa2[1] != -1 || sa2[2] != 4 || sa2[3] != 9)\n+#ifdef DEBUG\n+    printf(\"sa2[0] = %d, sa2[1] = %d, sa2[2] = %d, sa2[3] = %d\\n\",\n+           sa2[0], sa2[1], sa2[2], sa2[3]);\n+#else  \n+    abort ();\n+#endif\n+     \n+  vector float fb = vec_ctf (uinta, 2);\n+\n+  if (fb[0] != 2.250000 || fb[1] != 0.0 || fb[2] != 1.750000 || fb[3] != 55.500000)\n+#ifdef DEBUG\n+    printf(\"fb[0] = %f, fb[1] = %f, fb[2] = %f, fb[3] = %f\\n\",\n+\t\t fb[0], fb[1], fb[2], fb[3]);\n+#else  \n+    abort ();\n+#endif\n+\n+  vector unsigned int ua2 = vec_ctu (fb, 2);\n+  if (ua2[0] != 9 || ua2[1] != 0 || ua2[2] != 7 || ua2[3] != 222)\n+#ifdef DEBUG\n+    printf(\"ua2[0] = %d, ua2[1] = %d, ua2[2] = %d, ua2[3] = %d\\n\",\n+           ua2[0], ua2[1], ua2[2], ua2[3]);\n+#else  \n+    abort ();\n+#endif\n+     \n   return 0;\n }"}, {"sha": "21535b30d15fcead3b63a4a11cd452a32c7e8522", "filename": "gcc/testsuite/gcc.target/powerpc/builtins-3-runnable.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0242c7f0aac22e47b73046b2d60bb5de68057d6a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-3-runnable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0242c7f0aac22e47b73046b2d60bb5de68057d6a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-3-runnable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-3-runnable.c?ref=0242c7f0aac22e47b73046b2d60bb5de68057d6a", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do run { target { powerpc*-*-linux* } } } */\n /* { dg-require-effective-target vsx_hw } */\n /* { dg-options \"-O2 -mvsx -mcpu=power8\" } */\n-/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=power8\" } } */\n \n #include <altivec.h> // vector\n \n@@ -139,7 +139,7 @@ void test_result_sp(int check, vector float vec_result,\n \t\tif (vec_result[i] != vec_expected[i]) {\n #ifdef DEBUG\n \t\t\tprintf(\"Test_result_sp: \");\n-\t\t\tprintf(\"vec_result[%d] (%lld) != vec_expected[%d] (%lld)\\n\",\n+\t\t\tprintf(\"vec_result[%d] (%f) != vec_expected[%d] (%f)\\n\",\n \t\t\t       i, vec_result[i], i, vec_expected[i]);\n #else\n \t\t\tabort();\n@@ -153,7 +153,7 @@ void test_result_dp(vector double vec_result, vector double vec_expected)\n \tif (vec_result[0] != vec_expected[0]) {\n #ifdef DEBUG\n \t\tprintf(\"Test_result_dp: \");\n-\t\tprintf(\"vec_result[0] (%lld) != vec_expected[0] (%lld)\\n\",\n+\t\tprintf(\"vec_result[0] (%f) != vec_expected[0] (%f)\\n\",\n \t\t       vec_result[0], vec_expected[0]);\n #else\n \t\tabort();"}, {"sha": "6c412a4ed25490db85187e53b1eb67adadc062ae", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-minmax-char.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0242c7f0aac22e47b73046b2d60bb5de68057d6a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-minmax-char.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0242c7f0aac22e47b73046b2d60bb5de68057d6a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-minmax-char.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-minmax-char.c?ref=0242c7f0aac22e47b73046b2d60bb5de68057d6a", "patch": "@@ -20,18 +20,36 @@ test6_min (vector unsigned char x, vector unsigned char y)\n }\n \n vector signed char\n-test3_max (vector signed char x, vector signed char y)\n+test1_min (vector bool char x, vector signed char y)\n+{\n+  return vec_min (x, y);\n+}\n+\n+vector unsigned char\n+test2_min (vector bool char x, vector unsigned char y)\n+{\n+  return vec_min (x, y);\n+}\n+\n+vector unsigned char\n+test4_min (vector unsigned char x, vector bool char y)\n+{\n+  return vec_min (x, y);\n+}\n+\n+vector signed char\n+test1_max (vector signed char x, vector signed char y)\n {\n   return vec_max (x, y);\n }\n \n vector unsigned char\n-test6_max (vector unsigned char x, vector unsigned char y)\n+test2_max (vector unsigned char x, vector unsigned char y)\n {\n   return vec_max (x, y);\n }\n \n-/* { dg-final { scan-assembler-times \"vminsb\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vminsb\" 2 } } */\n /* { dg-final { scan-assembler-times \"vmaxsb\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vminub\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vminub\" 3 } } */\n /* { dg-final { scan-assembler-times \"vmaxub\" 1 } } */"}, {"sha": "0dea882db9f79aa703981e98b984c8a6283391cb", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-minmax-int.c", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0242c7f0aac22e47b73046b2d60bb5de68057d6a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-minmax-int.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0242c7f0aac22e47b73046b2d60bb5de68057d6a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-minmax-int.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-minmax-int.c?ref=0242c7f0aac22e47b73046b2d60bb5de68057d6a", "patch": "@@ -31,7 +31,31 @@ test6_max (vector unsigned int x, vector unsigned int y)\n   return vec_max (x, y);\n }\n \n-/* { dg-final { scan-assembler-times \"vminsw\" 1 } } */\n+vector signed int\n+test4_min (vector bool int x, vector signed int y)\n+{\n+  return vec_min (x, y);\n+}\n+\n+vector signed int\n+test5_min (vector signed int x, vector bool int y)\n+{\n+  return vec_min (x, y);\n+}\n+\n+vector unsigned int\n+test7_min (vector bool int x, vector unsigned int y)\n+{\n+  return vec_min (x, y);\n+}\n+\n+vector unsigned int\n+test8_min (vector unsigned int x, vector bool int y)\n+{\n+  return vec_min (x, y);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vminsw\" 3 } } */\n /* { dg-final { scan-assembler-times \"vmaxsw\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vminuw\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vminuw\" 3 } } */\n /* { dg-final { scan-assembler-times \"vmaxuw\" 1 } } */"}, {"sha": "234d078b07c8427bfa04557661e3d07341ffd89e", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-minmax-longlong.c", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0242c7f0aac22e47b73046b2d60bb5de68057d6a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-minmax-longlong.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0242c7f0aac22e47b73046b2d60bb5de68057d6a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-minmax-longlong.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-minmax-longlong.c?ref=0242c7f0aac22e47b73046b2d60bb5de68057d6a", "patch": "@@ -31,7 +31,31 @@ test6_max (vector unsigned long long x, vector unsigned long long y)\n   return vec_max (x, y);\n }\n \n+vector signed long long\n+test7_max (vector signed long long x, vector long long bool y)\n+{\n+  return vec_max (x, y);\n+}\n+\n+vector signed long long\n+test8_max (vector long long bool x, vector signed long long y)\n+{\n+  return vec_max (x, y);\n+}\n+\n+vector unsigned long long\n+test9_max (vector unsigned long long x, vector long long bool y)\n+{\n+  return vec_max (x, y);\n+}\n+\n+vector unsigned long long\n+test10_max (vector long long bool x, vector unsigned long long y)\n+{\n+  return vec_max (x, y);\n+}\n+\n /* { dg-final { scan-assembler-times \"vminsd\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vmaxsd\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmaxsd\" 3 } } */\n /* { dg-final { scan-assembler-times \"vminud\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vmaxud\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmaxud\" 3 } } */"}, {"sha": "02d12aa3fb98b227a2a96e1d8ab21d685fa2d85c", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-minmax-short.c", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0242c7f0aac22e47b73046b2d60bb5de68057d6a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-minmax-short.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0242c7f0aac22e47b73046b2d60bb5de68057d6a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-minmax-short.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-minmax-short.c?ref=0242c7f0aac22e47b73046b2d60bb5de68057d6a", "patch": "@@ -31,7 +31,31 @@ test6_max (vector unsigned short x, vector unsigned short y)\n   return vec_max (x, y);\n }\n \n-/* { dg-final { scan-assembler-times \"vminsh\" 1 } } */\n+vector unsigned short\n+test4_min (vector bool short x, vector unsigned short y)\n+{\n+  return vec_min (x, y);\n+}\n+\n+vector unsigned short\n+test5_min (vector unsigned short x, vector bool short y)\n+{\n+  return vec_min (x, y);\n+}\n+\n+vector signed short\n+test7_min (vector bool short x, vector signed short y)\n+{\n+  return vec_min (x, y);\n+}\n+\n+vector signed short\n+test8_min (vector signed short x, vector bool short y)\n+{\n+  return vec_min (x, y);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vminsh\" 3 } } */\n /* { dg-final { scan-assembler-times \"vmaxsh\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vminuh\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vminuh\" 3 } } */\n /* { dg-final { scan-assembler-times \"vmaxuh\" 1 } } */"}, {"sha": "0cfbe68c3a4c1d29be501043971d20c3f5205f6b", "filename": "gcc/testsuite/gcc.target/powerpc/p8vector-builtin-8.c", "status": "modified", "additions": 44, "deletions": 1, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0242c7f0aac22e47b73046b2d60bb5de68057d6a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8vector-builtin-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0242c7f0aac22e47b73046b2d60bb5de68057d6a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8vector-builtin-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp8vector-builtin-8.c?ref=0242c7f0aac22e47b73046b2d60bb5de68057d6a", "patch": "@@ -7,7 +7,9 @@\n \n /* Test POWER8 vector built-ins added for version 1.1 of ELFv2 ABI.  */\n \n+vector signed char        vsca, vscb, vscc;\n vector unsigned char      vuca, vucb, vucc;\n+vector signed short       vssa, vssb;\n vector bool     char      vbca, vbcb;\n vector unsigned short     vusa, vusb;\n vector bool     short     vbsa, vbsb;\n@@ -21,8 +23,10 @@ vector signed   __int128  vsxa, vsxb, vsxc;\n vector unsigned __int128  vuxa, vuxb, vuxc;\n vector          double    vda,  vdb;\n \n-void foo (vector unsigned char *vucr,\n+void foo (vector signed char *vscr,\n+\t  vector unsigned char *vucr,\n \t  vector bool char *vbcr,\n+\t  vector signed short *vssr,\n \t  vector unsigned short *vusr,\n \t  vector bool short *vbsr,\n \t  vector signed int *vsir,\n@@ -46,6 +50,24 @@ void foo (vector unsigned char *vucr,\n   *vuir++ = vec_addec (vuia, vuib, vuic);\n   *vsxr++ = vec_addec (vsxa, vsxb, vsxc);\n   *vuxr++ = vec_addec (vuxa, vuxb, vuxc);\n+  *vscr++ = vec_adds (vsca, vscb);\n+  *vucr++ = vec_adds (vuca, vucb);\n+  *vsir++ = vec_adds (vsia, vsib);\n+  *vuir++ = vec_adds (vuia, vuib);\n+  *vssr++ = vec_adds (vssa, vssb);\n+  *vusr++ = vec_adds (vusa, vusb);\n+  *vscr++ = vec_adds (vbca, vscb);\n+  *vscr++ = vec_adds (vsca, vbcb);\n+  *vucr++ = vec_adds (vbca, vucb);\n+  *vucr++ = vec_adds (vuca, vbcb);\n+  *vsir++ = vec_adds (vbia, vsib);\n+  *vsir++ = vec_adds (vsia, vbib);\n+  *vuir++ = vec_adds (vbia, vuib);\n+  *vuir++ = vec_adds (vuia, vbib);\n+  *vssr++ = vec_adds (vbsa, vssb);\n+  *vssr++ = vec_adds (vssa, vbsb);\n+  *vusr++ = vec_adds (vbsa, vusb);\n+  *vusr++ = vec_adds (vusa, vbsb);\n   *vucr++ = vec_bperm (vuca, vucb);\n   *vulr++ = vec_bperm (vuxa, vucb);\n   *vbcr++ = vec_eqv (vbca, vbcb);\n@@ -80,6 +102,17 @@ void foo (vector unsigned char *vucr,\n   *vuir++ = vec_subec (vuia, vuib, vuic);\n   *vsxr++ = vec_subec (vsxa, vsxb, vsxc);\n   *vuxr++ = vec_subec (vuxa, vuxb, vuxc);\n+  *vscr++ = vec_subs (vsca, vscb);\n+  *vucr++ = vec_subs (vuca, vucb);\n+  *vsir++ = vec_subs (vsia, vsib);\n+  *vuir++ = vec_subs (vuia, vuib);\n+  *vssr++ = vec_subs (vssa, vssb);\n+  *vusr++ = vec_subs (vusa, vusb);\n+  *vsir++ = vec_sum2s (vsia, vsib);\n+  *vsir++ = vec_sum4s (vsca, vsib);\n+  *vsir++ = vec_sum4s (vssa, vsib);\n+  *vuir++ = vec_sum4s (vuca, vuib);\n+\n }\n \n /* { dg-final { scan-assembler-times \"vaddcuq\" 2 } } */\n@@ -104,4 +137,14 @@ void foo (vector unsigned char *vucr,\n /* { dg-final { scan-assembler-times \"vpmsumd\" 1 } } */\n /* { dg-final { scan-assembler-times \"vshasigmaw\" 1 } } */\n /* { dg-final { scan-assembler-times \"vshasigmad\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vsubsbs\" 1 } }   vec_subs */\n+/* { dg-final { scan-assembler-times \"vsububs\" 1 } }   vec_subs */\n+/* { dg-final { scan-assembler-times \"vsubsws\" 1 } }   vec_subs */\n+/* { dg-final { scan-assembler-times \"vsubuws\" 1 } }   vec_subs */\n+/* { dg-final { scan-assembler-times \"vsubshs\" 1 } }   vec_subs */\n+/* { dg-final { scan-assembler-times \"vsubuhs\" 1 } }   vec_subs */\n+/* { dg-final { scan-assembler-times \"vsum2sws\" 1 } }  vec_sum2s */\n+/* { dg-final { scan-assembler-times \"vsum4sws\" 0 } }  vec_sum4s */\n+/* { dg-final { scan-assembler-times \"vsum4shs\" 1 } }  vec_sum4s */\n+/* { dg-final { scan-assembler-times \"vsum4ubs\" 1 } }  vec_sum4s */\n "}, {"sha": "3e2068bc9f98f71d4ce64ee78fe6b0419e63f52e", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-vector-5.c", "status": "modified", "additions": 142, "deletions": 38, "changes": 180, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0242c7f0aac22e47b73046b2d60bb5de68057d6a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-vector-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0242c7f0aac22e47b73046b2d60bb5de68057d6a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-vector-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-vector-5.c?ref=0242c7f0aac22e47b73046b2d60bb5de68057d6a", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */\n+/* { dg-do run { target { powerpc*-*-* && lp64 } } } */\n /* { dg-skip-if \"\" { powerpc*-*-darwin* } } */\n /* { dg-require-effective-target powerpc_vsx_ok } */\n /* { dg-options \"-mvsx -O2\" } */\n@@ -15,18 +15,23 @@\n static int errors = 0;\n #endif\n \n-union args {\n+union args_d {\n   double scalar[2];\n   vector double vect;\n };\n \n+union args_f {\n+  float scalar[4];\n+  vector float vect;\n+};\n+\n union largs {\n   unsigned long scalar[2];\n   vector bool long vect;\n };\n \n static void\n-do_test (union args *expected, union args *got, const char *name)\n+do_test_d (union args_d *expected, union args_d *got, const char *name)\n {\n   if (expected->scalar[0] != got->scalar[0]\n       || expected->scalar[1] != got->scalar[1])\n@@ -40,6 +45,23 @@ do_test (union args *expected, union args *got, const char *name)\n     }\n }\n \n+static void\n+do_test_f (union args_f *expected, union args_f *got, const char *name)\n+{\n+  if (expected->scalar[0] != got->scalar[0]\n+      || expected->scalar[1] != got->scalar[1]\n+      || expected->scalar[2] != got->scalar[2]\n+      || expected->scalar[3] != got->scalar[3])\n+    {\n+#ifdef DEBUG\n+      printf (\"%s failed!\\n\", name);\n+      errors++;\n+#else\n+      abort ();\n+#endif\n+    }\n+}\n+\n static void\n do_ltest (union largs *expected, union largs *got, const char *name)\n {\n@@ -64,19 +86,37 @@ vabs (vector double arg)\n }\n \n static vector double\n-vceil (vector double arg)\n+vceil_d (vector double arg)\n+{\n+  return vec_ceil (arg);\n+}\n+\n+static vector float\n+vceil_f (vector float arg)\n {\n   return vec_ceil (arg);\n }\n \n static vector double\n-vfloor (vector double arg)\n+vfloor_d (vector double arg)\n+{\n+  return vec_floor (arg);\n+}\n+\n+static vector float\n+vfloor_f (vector float arg)\n {\n   return vec_floor (arg);\n }\n \n static vector double\n-vnearbyint (vector double arg)\n+vnearbyint_d (vector double arg)\n+{\n+  return vec_nearbyint (arg);\n+}\n+\n+static vector float\n+vnearbyint_f (vector float arg)\n {\n   return vec_nearbyint (arg);\n }\n@@ -87,64 +127,127 @@ vrint (vector double arg)\n   return vec_rint (arg);\n }\n \n+static vector float\n+vsqrt_f (vector float arg)\n+{\n+  return vec_sqrt (arg);\n+}\n+\n static vector double\n-vsqrt (vector double arg)\n+vsqrt_d (vector double arg)\n {\n   return vec_sqrt (arg);\n }\n \n-/* Single argument tests.  */\n+/* Single argument tests with double args  */\n static struct\n {\n-  union args result;\n-  union args input;\n+  union args_d result;\n+  union args_d input;\n   vector double (*func) (vector double);\n   const char *name;\n-} arg1_tests[] = {\n+} arg1_tests_d[] = {\n   /* result\t\tinput\t\t\tfunction\tname */\n   { {  1.0,  2.0 },\t{ -1.0,  2.0 },\t\tvabs,\t\t\"vabs\" },\n   { {  1.0,  2.0 },\t{  1.0, -2.0 },\t\tvabs,\t\t\"vabs\" },\n-  { {  2.0,  2.0 },\t{  1.1,  1.7 },\t\tvceil,\t\t\"vceil\" },\n-  { { -1.0, -1.0 },\t{ -1.1, -1.7 },\t\tvceil,\t\t\"vceil\" },\n-  { { -1.0,  2.0 },\t{ -1.5,  1.5 },\t\tvceil,\t\t\"vceil\" },\n-  { {  1.0,  1.0 },\t{  1.1,  1.7 },\t\tvfloor,\t\t\"vfloor\" },\n-  { { -2.0, -2.0 },\t{ -1.1, -1.7 },\t\tvfloor,\t\t\"vfloor\" },\n-  { { -2.0,  1.0 },\t{ -1.5,  1.5 },\t\tvfloor,\t\t\"vfloor\" },\n-  { {  1.0,  2.0 },\t{  1.1,  1.7 },\t\tvnearbyint,\t\"vnearbyint\" },\n-  { { -1.0, -2.0 },\t{ -1.1, -1.7 },\t\tvnearbyint,\t\"vnearbyint\" },\n-  { { -2.0,  2.0 },\t{ -1.5,  1.5 },\t\tvnearbyint,\t\"vnearbyint\" },\n+  { {  2.0,  2.0 },\t{  1.1,  1.7 },\t\tvceil_d,\t\"vceil_d\" },\n+  { { -1.0, -1.0 },\t{ -1.1, -1.7 },\t\tvceil_d,\t\"vceil_d\" },\n+  { { -1.0,  2.0 },\t{ -1.5,  1.5 },\t\tvceil_d,\t\"vceil_d\" },\n+  { {  1.0,  1.0 },\t{  1.1,  1.7 },\t\tvfloor_d,\t\"vfloor_d\" },\n+  { { -2.0, -2.0 },\t{ -1.1, -1.7 },\t\tvfloor_d,\t\"vfloor_d\" },\n+  { { -2.0,  1.0 },\t{ -1.5,  1.5 },\t\tvfloor_d,\t\"vfloor_d\" },\n+  { {  1.0,  2.0 },\t{  1.1,  1.7 },\t\tvnearbyint_d,\t\"vnearbyint_d\" },\n+  { { -1.0, -2.0 },\t{ -1.1, -1.7 },\t\tvnearbyint_d,\t\"vnearbyint_d\" },\n+  { { -2.0,  2.0 },\t{ -1.5,  1.5 },\t\tvnearbyint_d,\t\"vnearbyint_d\" },\n   { {  1.0,  2.0 },\t{  1.1,  1.7 },\t\tvrint,\t\t\"vrint\" },\n   { { -1.0, -2.0 },\t{ -1.1, -1.7 },\t\tvrint,\t\t\"vrint\" },\n   { { -2.0,  2.0 },\t{ -1.5,  1.5 },\t\tvrint,\t\t\"vrint\" },\n-  { {  2.0,  4.0 },\t{  4.0, 16.0 },\t\tvsqrt,\t\t\"vsqrt\" },\n+\n+  { {  2.0,  4.0 },\t{  4.0, 16.0 },\t\tvsqrt_d,\t\"vsqrt_d\" },\n };\n \n static void\n-test_arg1 (void)\n+test_arg1_d (void)\n {\n   unsigned i;\n \n #ifdef DEBUG\n-  printf (\"Single argument tests:\\n\");\n+  printf (\"\\nSingle argument tests with double args:\\n\");\n #endif\n \n-  for (i = 0; i < sizeof (arg1_tests) / sizeof (arg1_tests[0]); i++)\n+  for (i = 0; i < sizeof (arg1_tests_d) / sizeof (arg1_tests_d[0]); i++)\n     {\n-      union args u;\n-      u.vect = arg1_tests[i].func (arg1_tests[i].input.vect);\n+      union args_d u;\n+      u.vect = arg1_tests_d[i].func (arg1_tests_d[i].input.vect);\n \n #ifdef DEBUG\n       printf (\"test %-16s: expected { %4g, %4g }, got { %4g, %4g }, input { %4g, %4g }\\n\",\n-\t      arg1_tests[i].name,\n-\t      arg1_tests[i].result.scalar[0],\n-\t      arg1_tests[i].result.scalar[1],\n+\t      arg1_tests_d[i].name,\n+\t      arg1_tests_d[i].result.scalar[0],\n+\t      arg1_tests_d[i].result.scalar[1],\n+\t      u.scalar[0],\n+\t      u.scalar[1],\n+\t      arg1_tests_d[i].input.scalar[0],\n+\t      arg1_tests_d[i].input.scalar[1]);\n+#endif\n+\n+      do_test_d (&arg1_tests_d[i].result, &u, arg1_tests_d[i].name);\n+    }\n+\n+  return;\n+}\n+\n+/* Single argument tests with float args.  */\n+static struct\n+{\n+  union args_f result;\n+  union args_f input;\n+  vector float (*func) (vector float);\n+  const char *name;\n+} arg1_tests_f[] = {\n+  /* result\t\t\tinput\t\t\t\tfunction\tname */\n+  { { 2.0, 2.0, 3.0, 3.0 },     { 1.05, 1.1, 2.2, 2.3 },\tvceil_f,\t\"vceil_f\" },\n+  { { -1.0, -1.0, -2.0, -2.0 },\t{ -1.1, -1.7, -2.1, -2.4 },\tvceil_f,\t\"vceil_f\" },\n+  { { 1.0, 1.0, 2.0, 2.0 },     { 1.05, 1.1, 2.2, 2.3 },\tvfloor_f,\t\"vfloor_f\" },\n+  { { -2.0, -2.0, -3.0, -3.0 },\t{ -1.1, -1.7, -2.1, -2.4 },\tvfloor_f,\t\"vfloor_f\" },\n+  { {  1.0,  2.0, -3.0, 3.0 },\t{  1.1,  1.7, -3.1, 3.1 },\tvnearbyint_f,\t\"vnearbyint_f\" },\n+  { { -1.0, -2.0, -3.0, 3.0 },\t{ -1.1, -1.7, -2.9, 2.9 },\tvnearbyint_f,\t\"vnearbyint_f\" },\n+  { { -2.0,  2.0, -3.0, 3.0 },\t{ -1.5,  1.5, -2.55, 3.49 },\tvnearbyint_f,\t\"vnearbyint_f\" },\n+  { {  2.0,  4.0 },\t{  4.0, 16.0 },\t\tvsqrt_f,\t\"vsqrt_f\" },\n+};\n+\n+static void\n+test_arg1_f (void)\n+{\n+  unsigned i;\n+\n+#ifdef DEBUG\n+  printf (\"\\nSingle argument tests with float args:\\n\");\n+#endif\n+\n+  for (i = 0; i < sizeof (arg1_tests_f) / sizeof (arg1_tests_f[0]); i++)\n+    {\n+      union args_f u;\n+      u.vect = arg1_tests_f[i].func (arg1_tests_f[i].input.vect);\n+\n+#ifdef DEBUG\n+      printf (\"test %-16s: expected { %4g, %4g, %4g, %4g }, got { %4g, %4g, %4g, %4g }, input { %4g, %4g, %4g, %4g }\\n\",\n+\t      arg1_tests_f[i].name,\n+\t      arg1_tests_f[i].result.scalar[0],\n+\t      arg1_tests_f[i].result.scalar[1],\n+\t      arg1_tests_f[i].result.scalar[2],\n+\t      arg1_tests_f[i].result.scalar[3],\n \t      u.scalar[0],\n \t      u.scalar[1],\n-\t      arg1_tests[i].input.scalar[0],\n-\t      arg1_tests[i].input.scalar[1]);\n+\t      u.scalar[2],\n+\t      u.scalar[3],\n+\t      arg1_tests_f[i].input.scalar[0],\n+\t      arg1_tests_f[i].input.scalar[1],\n+\t      arg1_tests_f[i].input.scalar[2],\n+\t      arg1_tests_f[i].input.scalar[3]);\n #endif\n \n-      do_test (&arg1_tests[i].result, &u, arg1_tests[i].name);\n+      do_test_f (&arg1_tests_f[i].result, &u, arg1_tests_f[i].name);\n     }\n \n   return;\n@@ -215,8 +318,8 @@ vmin (vector double arg1, vector double arg2)\n /* 2 argument tests.  */\n static struct\n {\n-  union args result;\n-  union args input[2];\n+  union args_d result;\n+  union args_d input[2];\n   vector double (*func) (vector double, vector double);\n   const char *name;\n } arg2_tests[] = {\n@@ -250,7 +353,7 @@ test_arg2 (void)\n \n   for (i = 0; i < sizeof (arg2_tests) / sizeof (arg2_tests[0]); i++)\n     {\n-      union args u;\n+      union args_d u;\n       u.vect = arg2_tests[i].func (arg2_tests[i].input[0].vect,\n \t\t\t\t   arg2_tests[i].input[1].vect);\n \n@@ -267,7 +370,7 @@ test_arg2 (void)\n \t      arg2_tests[i].input[1].scalar[1]);\n #endif\n \n-      do_test (&arg2_tests[i].result, &u, arg2_tests[i].name);\n+      do_test_d (&arg2_tests[i].result, &u, arg2_tests[i].name);\n     }\n \n   return;\n@@ -312,7 +415,7 @@ vcmpge (vector double arg1, vector double arg2)\n static struct\n {\n   union largs result;\n-  union args input[2];\n+  union args_d input[2];\n   vector bool long (*func) (vector double, vector double);\n   const char *name;\n } argcmp_tests[] = {\n@@ -374,7 +477,8 @@ test_argcmp (void)\n int\n main (int argc, char *argv[])\n {\n-  test_arg1 ();\n+  test_arg1_f ();\n+  test_arg1_d ();\n   test_arg2 ();\n   test_argcmp ();\n "}, {"sha": "7de417272e5f4deaf68e30a3e8804fc8a6d0d5e9", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-vector-7.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0242c7f0aac22e47b73046b2d60bb5de68057d6a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-vector-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0242c7f0aac22e47b73046b2d60bb5de68057d6a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-vector-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-vector-7.c?ref=0242c7f0aac22e47b73046b2d60bb5de68057d6a", "patch": "@@ -8,10 +8,12 @@\n \n vector bool     long long vbla, vblb, vblc;\n vector signed   long long vsla;\n-vector unsigned long long vula, vulc;\n+vector unsigned long long vula, vulb, vulc;\n+vector double vda, vdb;\n+vector float vfa, vfb;\n \n void foo (vector bool long long *vblr,\n-\t  vector double *vdr)\n+\t  vector double *vdr, vector unsigned long long *vulz, vector double *vdz)\n {\n   *vblr++ = vec_andc (vbla, vblb);\n   *vdr++  = vec_double (vsla);\n@@ -23,6 +25,10 @@ void foo (vector bool long long *vblr,\n   *vblr++ = vec_sel (vbla, vblb, vblc);\n   *vblr++ = vec_sel (vbla, vblb, vulc);\n   *vblr++ = vec_xor (vbla, vblb);\n+\n+  *vulz++ = vec_sel (vula, vulb, vblc);\n+\n+  *vdz++ = vec_sel(vda, vdb, vulc);\n }\n \n /* { dg-final { scan-assembler-times \"xxlandc\" 1 } } */\n@@ -32,5 +38,5 @@ void foo (vector bool long long *vblr,\n /* { dg-final { scan-assembler-times \"xxpermdi .*,.*,.*,0\" 1 } } */\n /* { dg-final { scan-assembler-times \"xxlnor\" 1 } } */\n /* { dg-final { scan-assembler-times \"xxlor\" 1 } } */\n-/* { dg-final { scan-assembler-times \"xxsel\" 2 } } */\n+/* { dg-final { scan-assembler-times \"xxsel\" 4 } } */\n /* { dg-final { scan-assembler-times \"xxlxor\" 1 } } */"}]}