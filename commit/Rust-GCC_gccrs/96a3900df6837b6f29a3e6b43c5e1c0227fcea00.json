{"sha": "96a3900df6837b6f29a3e6b43c5e1c0227fcea00", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTZhMzkwMGRmNjgzN2I2ZjI5YTNlNmI0M2M1ZTFjMDIyN2ZjZWEwMA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@codesourcery.com", "date": "2007-09-03T17:11:32Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2007-09-03T17:11:32Z"}, "message": "config.gcc: Delete stanza for arm-semi-aof and armel-semi-aof targets.\n\n\t* config.gcc: Delete stanza for arm-semi-aof and\n\tarmel-semi-aof targets.\n\t* config/arm/arm-protos.h\n\t* config/arm/arm.c\n\t* config/arm/arm.h: Delete all #ifdef AOF_ASSEMBLER blocks;\n\tmake all #ifndef AOF_ASSEMBLER blocks unconditional.  Also\n\tdelete aof_pic_label and remove mention of AOF in comments.\n\t* config/arm/arm.md: Delete patterns used only for AOF assembly.\n\t* config/arm/aof.h\n\t* config/arm/semiaof.h\n\t* config/arm/t-semi: Delete file.\n\nFrom-SVN: r128052", "tree": {"sha": "0b60da5b384193bad0b87fefd8a74eb4148612da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b60da5b384193bad0b87fefd8a74eb4148612da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96a3900df6837b6f29a3e6b43c5e1c0227fcea00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96a3900df6837b6f29a3e6b43c5e1c0227fcea00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96a3900df6837b6f29a3e6b43c5e1c0227fcea00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96a3900df6837b6f29a3e6b43c5e1c0227fcea00/comments", "author": null, "committer": null, "parents": [{"sha": "b1d5455a5efad3f380671cf818515a1a6ec94546", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1d5455a5efad3f380671cf818515a1a6ec94546", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1d5455a5efad3f380671cf818515a1a6ec94546"}], "stats": {"total": 776, "additions": 16, "deletions": 760}, "files": [{"sha": "c38d70a9054221f982232e5b80ecad6581fe4528", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96a3900df6837b6f29a3e6b43c5e1c0227fcea00/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96a3900df6837b6f29a3e6b43c5e1c0227fcea00/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=96a3900df6837b6f29a3e6b43c5e1c0227fcea00", "patch": "@@ -1,3 +1,17 @@\n+2007-09-03  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* config.gcc: Delete stanza for arm-semi-aof and\n+\tarmel-semi-aof targets.\n+\t* config/arm/arm-protos.h\n+\t* config/arm/arm.c\n+\t* config/arm/arm.h: Delete all #ifdef AOF_ASSEMBLER blocks;\n+\tmake all #ifndef AOF_ASSEMBLER blocks unconditional.  Also\n+\tdelete aof_pic_label and remove mention of AOF in comments.\n+\t* config/arm/arm.md: Delete patterns used only for AOF assembly.\n+\t* config/arm/aof.h\n+\t* config/arm/semiaof.h\n+\t* config/arm/t-semi: Delete file.\n+\n 2007-09-03  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* system.h (CONST_CAST2, CONST_CAST_TREE, CONST_CAST_RTX,"}, {"sha": "8523de7e7353310d38a9a12899af01e6ef8a91da", "filename": "gcc/config.gcc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96a3900df6837b6f29a3e6b43c5e1c0227fcea00/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96a3900df6837b6f29a3e6b43c5e1c0227fcea00/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=96a3900df6837b6f29a3e6b43c5e1c0227fcea00", "patch": "@@ -700,10 +700,6 @@ arm-*-coff* | armel-*-coff*)\n \ttm_file=\"arm/semi.h arm/aout.h arm/arm.h arm/coff.h dbxcoff.h\"\n \ttmake_file=\"arm/t-arm arm/t-arm-coff\"\n \t;;\n-arm-semi-aof | armel-semi-aof)\n-\ttm_file=\"arm/semiaof.h arm/aof.h arm/arm.h\"\n-\ttmake_file=\"arm/t-arm arm/t-semi\"\n-\t;;\n arm-wrs-vxworks)\n \ttm_file=\"elfos.h arm/elf.h arm/aout.h ${tm_file} vx-common.h vxworks.h arm/vxworks.h\"\n \ttmake_file=\"${tmake_file} arm/t-arm arm/t-vxworks\""}, {"sha": "34695f895034e4a8de849dd5152e88d767e22745", "filename": "gcc/config/arm/aof.h", "status": "removed", "additions": 0, "deletions": 339, "changes": 339, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Fconfig%2Farm%2Faof.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Fconfig%2Farm%2Faof.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Faof.h?ref=b1d5455a5efad3f380671cf818515a1a6ec94546", "patch": "@@ -1,339 +0,0 @@\n-/* Definitions of target machine for GNU compiler, for Advanced RISC Machines\n-   ARM compilation, AOF Assembler.\n-   Copyright (C) 1995, 1996, 1997, 2000, 2003, 2004, 2007\n-   Free Software Foundation, Inc.\n-   Contributed by Richard Earnshaw (rearnsha@armltd.co.uk)\n-\n-   This file is part of GCC.\n-\n-   GCC is free software; you can redistribute it and/or modify it\n-   under the terms of the GNU General Public License as published\n-   by the Free Software Foundation; either version 3, or (at your\n-   option) any later version.\n-\n-   GCC is distributed in the hope that it will be useful, but WITHOUT\n-   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n-   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n-   License for more details.\n-\n-   You should have received a copy of the GNU General Public License\n-   along with GCC; see the file COPYING3.  If not see\n-   <http://www.gnu.org/licenses/>.  */\n-   \n-\f\n-\n-#define AOF_ASSEMBLER\n-\n-#define LINK_LIBGCC_SPECIAL 1\n-\n-#define LINK_SPEC \"%{aof} %{bin} %{aif} %{ihf} %{shl,*} %{reent*} %{split} \\\n-\t\t   %{ov*} %{reloc*} -nodebug\"\n-\n-#define STARTFILE_SPEC \"crtbegin.o%s\"\n-\n-#define ENDFILE_SPEC \"crtend.o%s\"\n-\n-#ifndef ASM_SPEC\n-#define ASM_SPEC \"%{g -g} -arch 4 -apcs 3/32bit\"\n-#endif\n-\n-#ifndef LIB_SPEC\n-#define LIB_SPEC \"%{Eb: armlib_h.32b%s}%{!Eb: armlib_h.32l%s}\"\n-#endif\n-\n-#define LIBGCC_SPEC \"libgcc.a%s\"\n-\n-#define CTOR_LIST_BEGIN\t\t\t\t\\\n-  asm (CTORS_SECTION_ASM_OP);\t\t\t\\\n-  extern func_ptr __CTOR_END__[1];\t\t\\\n-  func_ptr __CTOR_LIST__[1] = {__CTOR_END__};\n-\n-#define CTOR_LIST_END\t\t\t\t\\\n-  asm (CTORS_SECTION_ASM_OP);\t\t\t\\\n-  func_ptr __CTOR_END__[1] = { (func_ptr) 0 };\n-\n-#define DO_GLOBAL_CTORS_BODY\t\t\t\\\n-  do\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\\\n-      func_ptr *ptr = __CTOR_LIST__ + 1;\t\\\n-\t\t\t\t\t\t\\\n-      while (*ptr)\t\t\t\t\\\n-        (*ptr++) ();\t\t\t\t\\\n-    }\t\t\t\t\t\t\\\n-  while (0)\n-\n-#define DTOR_LIST_BEGIN\t\t\t\t\\\n-  asm (DTORS_SECTION_ASM_OP);\t\t\t\\\n-  extern func_ptr __DTOR_END__[1];\t\t\\\n-  func_ptr __DTOR_LIST__[1] = {__DTOR_END__};\n-\n-#define DTOR_LIST_END\t\t\t\t\\\n-  asm (DTORS_SECTION_ASM_OP);\t\t\t\\\n-  func_ptr __DTOR_END__[1] = { (func_ptr) 0 };\n-\n-#define DO_GLOBAL_DTORS_BODY\t\t\t\\\n-  do\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\\\n-      func_ptr *ptr = __DTOR_LIST__ + 1;\t\\\n-\t\t\t\t\t\t\\\n-      while (*ptr)\t\t\t\t\\\n-        (*ptr++) ();\t\t\t\t\\\n-    }\t\t\t\t\t\t\\\n-  while (0)\n-\n-/* We really want to put Thumb tables in a read-only data section, but\n-   switching to another section during function output is not\n-   possible.  We could however do what the SPARC does and defer the\n-   whole table generation until the end of the function.  */\n-#define JUMP_TABLES_IN_TEXT_SECTION 1\n-\n-#define TARGET_ASM_INIT_SECTIONS aof_asm_init_sections\n-\n-/* Some systems use __main in a way incompatible with its use in gcc, in these\n-   cases use the macros NAME__MAIN to give a quoted symbol and SYMBOL__MAIN to\n-   give the same symbol without quotes for an alternative entry point.  You\n-   must define both, or neither.  */\n-#define NAME__MAIN \"__gccmain\"\n-#define SYMBOL__MAIN __gccmain\n-\n-#define ASM_COMMENT_START \";\"\n-#define ASM_APP_ON        \"\"\n-#define ASM_APP_OFF       \"\"\n-\n-#define ASM_OUTPUT_ASCII(STREAM, PTR, LEN)\t\t\\\n-{\t\t\t\t\t\t\t\\\n-  int i;\t\t\t\t\t\t\\\n-  const char *ptr = (PTR);\t\t\t\t\\\n-  fprintf ((STREAM), \"\\tDCB\");\t\t\t\t\\\n-  for (i = 0; i < (long)(LEN); i++)\t\t\t\\\n-    fprintf ((STREAM), \" &%02x%s\", \t\t\t\\\n-\t     (unsigned ) *(ptr++),\t\t\t\\\n-\t     (i + 1 < (long)(LEN)\t\t\t\\\n-\t      ? ((i & 3) == 3 ? \"\\n\\tDCB\" : \",\")\t\\\n-\t      : \"\\n\"));\t\t\t\t\t\\\n-}\n-\n-#define IS_ASM_LOGICAL_LINE_SEPARATOR(C) ((C) == '\\n')\n-\n-/* Output of Uninitialized Variables.  */\n-\n-#define ASM_OUTPUT_COMMON(STREAM, NAME, SIZE, ROUNDED)\t\t\\\n-  (in_section = NULL,\t\t\t\t\t\t\\\n-   fprintf ((STREAM), \"\\tAREA \"),\t\t\t\t\\\n-   assemble_name ((STREAM), (NAME)),\t\t\t\t\\\n-   fprintf ((STREAM), \", DATA, COMMON\\n\\t%% %d\\t%s size=%d\\n\",\t\\\n-\t    (int)(ROUNDED), ASM_COMMENT_START, (int)(SIZE)))\n-\n-#define ASM_OUTPUT_LOCAL(STREAM, NAME, SIZE, ROUNDED)\t\\\n-   (zero_init_section (),\t\t\t\t\\\n-    assemble_name ((STREAM), (NAME)),\t\t\t\\\n-    fprintf ((STREAM), \"\\n\"),\t\t\t\t\\\n-    fprintf ((STREAM), \"\\t%% %d\\t%s size=%d\\n\",\t\t\\\n-\t     (int)(ROUNDED), ASM_COMMENT_START, (int)(SIZE)))\n-\n-/* Output and Generation of Labels */\n-extern int arm_main_function;\n-\n-/* Globalizing directive for a label.  */\n-#define GLOBAL_ASM_OP \"\\tEXPORT\\t\"\n-\n-#define ASM_OUTPUT_LABEL(STREAM,NAME)\t\\\n-do {\t\t\t\t\t\\\n-  assemble_name (STREAM,NAME);\t\t\\\n-  fputs (\"\\n\", STREAM);\t\t\t\\\n-} while (0)\n-\n-#define ASM_DECLARE_FUNCTION_NAME(STREAM,NAME,DECL) \\\n-{\t\t\t\t\t\t\\\n-  if (TARGET_POKE_FUNCTION_NAME)\t\t\\\n-    arm_poke_function_name ((STREAM), (NAME));\t\\\n-  ASM_OUTPUT_LABEL (STREAM, NAME);\t\t\\\n-  if (! TREE_PUBLIC (DECL))\t\t\t\\\n-    {\t\t\t\t\t\t\\\n-      fputs (\"\\tKEEP \", STREAM);\t\t\\\n-      ASM_OUTPUT_LABEL (STREAM, NAME);\t\t\\\n-    }\t\t\t\t\t\t\\\n-  aof_delete_import ((NAME));\t\t\t\\\n-}\n-\n-#define ASM_DECLARE_OBJECT_NAME(STREAM,NAME,DECL) \\\n-{\t\t\t\t\t\t\\\n-  ASM_OUTPUT_LABEL (STREAM, NAME);\t\t\\\n-  if (! TREE_PUBLIC (DECL))\t\t\t\\\n-    {\t\t\t\t\t\t\\\n-      fputs (\"\\tKEEP \", STREAM);\t\t\\\n-      ASM_OUTPUT_LABEL (STREAM, NAME);\t\t\\\n-    }\t\t\t\t\t\t\\\n-  aof_delete_import ((NAME));\t\t\t\\\n-}\n-\n-#define ASM_OUTPUT_EXTERNAL(STREAM,DECL,NAME)\t\\\n- aof_add_import ((NAME))\n-\n-#define ASM_OUTPUT_EXTERNAL_LIBCALL(STREAM,SYMREF)\t\\\n- (fprintf ((STREAM), \"\\tIMPORT\\t\"),\t\t\t\\\n-  assemble_name ((STREAM), XSTR ((SYMREF), 0)),\t\t\\\n-  fputc ('\\n', (STREAM)))\n-\n-#define ASM_OUTPUT_LABELREF(STREAM,NAME)\t\\\n-  fprintf ((STREAM), \"|%s|\", NAME)\n-\n-#define ASM_GENERATE_INTERNAL_LABEL(STRING,PREFIX,NUM)\t\\\n-  sprintf ((STRING), \"*|%s..%ld|\", (PREFIX), (long)(NUM))\n-\n-/* How initialization functions are handled.  */\n-\n-#define CTORS_SECTION_ASM_OP \"\\tAREA\\t|C$$gnu_ctorsvec|, DATA, READONLY\"\n-#define DTORS_SECTION_ASM_OP \"\\tAREA\\t|C$$gnu_dtorsvec|, DATA, READONLY\"\n-\n-/* Output of Assembler Instructions.  Note that the ?xx registers are\n-   there so that VFPv3/NEON registers D16-D31 have the same spacing as D0-D15\n-   (each of which is overlaid on two S registers), although there are no\n-   actual single-precision registers which correspond to D16-D31.  */\n-\n-#define REGISTER_NAMES\t\t\t\t\\\n-{\t\t\t\t\t\t\\\n-  \"a1\", \"a2\", \"a3\", \"a4\",\t\t\t\\\n-  \"v1\", \"v2\", \"v3\", \"v4\",\t\t\t\\\n-  \"v5\", \"v6\", \"sl\", \"fp\",\t\t\t\\\n-  \"ip\", \"sp\", \"lr\", \"pc\",\t\t\t\\\n-  \"f0\", \"f1\", \"f2\", \"f3\",\t\t\t\\\n-  \"f4\", \"f5\", \"f6\", \"f7\",\t\t\t\\\n-  \"cc\", \"sfp\", \"afp\",\t\t\t\t\\\n-  \"mv0\",   \"mv1\",   \"mv2\",   \"mv3\",\t\t\\\n-  \"mv4\",   \"mv5\",   \"mv6\",   \"mv7\",\t\t\\\n-  \"mv8\",   \"mv9\",   \"mv10\",  \"mv11\",\t\t\\\n-  \"mv12\",  \"mv13\",  \"mv14\",  \"mv15\",\t\t\\\n-  \"wcgr0\", \"wcgr1\", \"wcgr2\", \"wcgr3\",\t\t\\\n-  \"wr0\",   \"wr1\",   \"wr2\",   \"wr3\",\t\t\\\n-  \"wr4\",   \"wr5\",   \"wr6\",   \"wr7\",\t\t\\\n-  \"wr8\",   \"wr9\",   \"wr10\",  \"wr11\",\t\t\\\n-  \"wr12\",  \"wr13\",  \"wr14\",  \"wr15\",\t\t\\\n-  \"s0\",  \"s1\",  \"s2\",  \"s3\",  \"s4\",  \"s5\",  \"s6\",  \"s7\",  \\\n-  \"s8\",  \"s9\",  \"s10\", \"s11\", \"s12\", \"s13\", \"s14\", \"s15\", \\\n-  \"s16\", \"s17\", \"s18\", \"s19\", \"s20\", \"s21\", \"s22\", \"s23\", \\\n-  \"s24\", \"s25\", \"s26\", \"s27\", \"s28\", \"s29\", \"s30\", \"s31\", \\\n-  \"d16\", \"?16\", \"d17\", \"?17\", \"d18\", \"?18\", \"d19\", \"?19\", \\\n-  \"d20\", \"?20\", \"d21\", \"?21\", \"d22\", \"?22\", \"d23\", \"?23\", \\\n-  \"d24\", \"?24\", \"d25\", \"?25\", \"d26\", \"?26\", \"d27\", \"?27\", \\\n-  \"d28\", \"?28\", \"d29\", \"?29\", \"d30\", \"?30\", \"d31\", \"?31\", \\\n-  \"vfpcc\"\t\t\t\t\t\\\n-}\n-\n-#define ADDITIONAL_REGISTER_NAMES\t\t\\\n-{\t\t\t\t\t\t\\\n-  {\"r0\", 0}, {\"a1\", 0},\t\t\t\t\\\n-  {\"r1\", 1}, {\"a2\", 1},\t\t\t\t\\\n-  {\"r2\", 2}, {\"a3\", 2},\t\t\t\t\\\n-  {\"r3\", 3}, {\"a4\", 3},\t\t      \t\t\\\n-  {\"r4\", 4}, {\"v1\", 4},\t\t\t\t\\\n-  {\"r5\", 5}, {\"v2\", 5},\t\t\t\t\\\n-  {\"r6\", 6}, {\"v3\", 6},\t\t\t\t\\\n-  {\"r7\", 7}, {\"wr\", 7},\t\t\t\t\\\n-  {\"r8\", 8}, {\"v5\", 8},\t\t\t\t\\\n-  {\"r9\", 9}, {\"v6\", 9},\t\t\t\t\\\n-  {\"r10\", 10}, {\"sl\", 10}, {\"v7\", 10},\t\t\\\n-  {\"r11\", 11}, {\"fp\", 11},\t\t\t\\\n-  {\"r12\", 12}, {\"ip\", 12}, \t\t\t\\\n-  {\"r13\", 13}, {\"sp\", 13}, \t\t\t\\\n-  {\"r14\", 14}, {\"lr\", 14},\t\t\t\\\n-  {\"r15\", 15}, {\"pc\", 15},\t\t\t\\\n-  {\"d0\", 63}, {\"q0\", 63},\t\t\t\\\n-  {\"d1\", 65},\t\t\t\t\t\\\n-  {\"d2\", 67}, {\"q1\", 67},\t\t\t\\\n-  {\"d3\", 69},\t\t\t\t\t\\\n-  {\"d4\", 71}, {\"q2\", 71},\t\t\t\\\n-  {\"d5\", 73},\t\t\t\t\t\\\n-  {\"d6\", 75}, {\"q3\", 75},\t\t\t\\\n-  {\"d7\", 77},\t\t\t\t\t\\\n-  {\"d8\", 79}, {\"q4\", 79},\t\t\t\\\n-  {\"d9\", 81},\t\t\t\t\t\\\n-  {\"d10\", 83}, {\"q5\", 83},\t\t\t\\\n-  {\"d11\", 85},\t\t\t\t\t\\\n-  {\"d12\", 87}, {\"q6\", 87},\t\t\t\\\n-  {\"d13\", 89},\t\t\t\t\t\\\n-  {\"d14\", 91}, {\"q7\", 91},\t\t\t\\\n-  {\"d15\", 93},\t\t\t\t\t\\\n-  {\"q8\", 95},\t\t\t\t\t\\\n-  {\"q9\", 99},\t\t\t\t\t\\\n-  {\"q10\", 103},\t\t\t\t\t\\\n-  {\"q11\", 107},\t\t\t\t\t\\\n-  {\"q12\", 111},\t\t\t\t\t\\\n-  {\"q13\", 115},\t\t\t\t\t\\\n-  {\"q14\", 119},\t\t\t\t\t\\\n-  {\"q15\", 123}\t\t\t\t\t\\\n-}\n-\n-#define REGISTER_PREFIX \"__\"\n-#define USER_LABEL_PREFIX \"\"\n-#define LOCAL_LABEL_PREFIX \"\"\n-\n-/* AOF does not prefix user function names with an underscore.  */\n-#define ARM_MCOUNT_NAME \"_mcount\"\n-\n-/* Output of Dispatch Tables.  */\n-#define ASM_OUTPUT_ADDR_DIFF_ELT(STREAM, BODY, VALUE, REL)\t\t\\\n-  do\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      if (TARGET_ARM)\t\t\t\t\t\t\t\\\n-        fprintf ((STREAM), \"\\tb\\t|L..%d|\\n\", (VALUE));\t\t\t\\\n-      else if (TARGET_THUMB1)\t\t\t\t\t\t\\\n-        fprintf ((STREAM), \"\\tDCD\\t|L..%d| - |L..%d|\\n\", (VALUE), (REL)); \\\n-      else /* Thumb-2 */\t\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\t\\\n-\t  switch (GET_MODE(body))\t\t\t\t\t\\\n-\t    {\t\t\t\t\t\t\t\t\\\n-\t    case QImode: /* TBB */\t\t\t\t\t\\\n-\t      asm_fprintf (STREAM, \"\\tDCB\\t(|L..%d| - |L..%d|)/2\\n\",\t\\\n-\t\t\t   VALUE, REL);\t\t\t\t\t\\\n-\t      break;\t\t\t\t\t\t\t\\\n-\t    case HImode: /* TBH */\t\t\t\t\t\\\n-\t      asm_fprintf (STREAM, \"\\tDCW\\t|L..%d| - |L..%d|)/2\\n\",\t\\\n-\t\t\t   VALUE, REL);\t\t\t\t\t\\\n-\t      break;\t\t\t\t\t\t\t\\\n-\t    case SImode:\t\t\t\t\t\t\\\n-\t      if (flag_pic)\t\t\t\t\t\t\\\n-\t\tasm_fprintf (STREAM, \"\\tDCD\\t|L..%d| + 1 - |L..%d|\\n\",\t\\\n-\t\t\t     VALUE, REL);\t\t\t\t\\\n-\t      else\t\t\t\t\t\t\t\\\n-\t\tasm_fprintf (STREAM, \"\\tDCD\\t|L..%d| + 1\\n\", VALUE);\t\\\n-\t      break;\t\t\t\t\t\t\t\\\n-\t    default:\t\t\t\t\t\t\t\\\n-\t      gcc_unreachable();\t\t\t\t\t\\\n-\t    }\t\t\t\t\t\t\t\t\\\n-\t}\t\t\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  while (0)\n-\n-#define ASM_OUTPUT_ADDR_VEC_ELT(STREAM, VALUE)\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      gcc_assert (!TARGET_THUMB2)\t\t\t\t\\\n-      fprintf ((STREAM), \"\\tDCD\\t|L..%d|\\n\", (VALUE))\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-  while (0)\n-\t\n-\n-/* A label marking the start of a jump table is a data label.  */\n-#define ASM_OUTPUT_CASE_LABEL(STREAM, PREFIX, NUM, TABLE)\t\\\n-  fprintf ((STREAM), \"\\tALIGN\\n|%s..%d|\\n\", (PREFIX), (NUM))\n-\n-/* Assembler Commands for Alignment.  */\n-#define ASM_OUTPUT_SKIP(STREAM, NBYTES)\t\t\\\n- fprintf ((STREAM), \"\\t%%\\t%d\\n\", (int) (NBYTES))\n-\n-#define ASM_OUTPUT_ALIGN(STREAM, POWER)\t\t\t\\\n-  do\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\\\n-      int amount = 1 << (POWER);\t\t\t\\\n-\t\t\t\t\t\t\t\\\n-      if (amount == 2)\t\t\t\t\t\\\n-        fprintf ((STREAM), \"\\tALIGN 2\\n\");\t\t\\\n-      else if (amount == 4)\t\t\t\t\\\n-        fprintf ((STREAM), \"\\tALIGN\\n\");\t\t\\\n-      else\t\t\t\t\t\t\\\n-        fprintf ((STREAM), \"\\tALIGN %d\\n\", amount);\t\\\n-    }\t\t\t\t\t\t\t\\\n-  while (0)\n-\n-#undef DBX_DEBUGGING_INFO"}, {"sha": "a13b82ab1b878416bf0dcdaa9c8cfda9ab17c552", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96a3900df6837b6f29a3e6b43c5e1c0227fcea00/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96a3900df6837b6f29a3e6b43c5e1c0227fcea00/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=96a3900df6837b6f29a3e6b43c5e1c0227fcea00", "patch": "@@ -163,13 +163,6 @@ extern rtx arm_function_value(const_tree, const_tree);\n #endif\n extern int arm_apply_result_size (void);\n \n-#if defined AOF_ASSEMBLER\n-extern rtx aof_pic_entry (rtx);\n-extern void aof_add_import (const char *);\n-extern void aof_delete_import (const char *);\n-extern void zero_init_section (void);\n-#endif /* AOF_ASSEMBLER */\n-\n #endif /* RTX_CODE */\n \n extern int arm_float_words_big_endian (void);"}, {"sha": "e4b30b3ca580f359797e86605fab189f8dec5693", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 287, "changes": 288, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96a3900df6837b6f29a3e6b43c5e1c0227fcea00/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96a3900df6837b6f29a3e6b43c5e1c0227fcea00/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=96a3900df6837b6f29a3e6b43c5e1c0227fcea00", "patch": "@@ -76,9 +76,7 @@ static unsigned long thumb1_compute_save_reg_mask (void);\n static int const_ok_for_op (HOST_WIDE_INT, enum rtx_code);\n static rtx emit_sfm (int, int);\n static int arm_size_return_regs (void);\n-#ifndef AOF_ASSEMBLER\n static bool arm_assemble_integer (rtx, unsigned int, int);\n-#endif\n static const char *fp_const_from_val (REAL_VALUE_TYPE *);\n static arm_cc get_arm_condition_code (rtx);\n static HOST_WIDE_INT int_log2 (HOST_WIDE_INT);\n@@ -158,14 +156,6 @@ static void arm_encode_section_info (tree, rtx, int);\n static void arm_file_end (void);\n static void arm_file_start (void);\n \n-#ifdef AOF_ASSEMBLER\n-static void aof_globalize_label (FILE *, const char *);\n-static void aof_dump_imports (FILE *);\n-static void aof_dump_pic_table (FILE *);\n-static void aof_file_start (void);\n-static void aof_file_end (void);\n-static void aof_asm_init_sections (void);\n-#endif\n static void arm_setup_incoming_varargs (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t\ttree, int *, int);\n static bool arm_pass_by_reference (CUMULATIVE_ARGS *,\n@@ -213,25 +203,10 @@ static void arm_output_dwarf_dtprel (FILE *, int, rtx) ATTRIBUTE_UNUSED;\n #undef TARGET_ASM_FILE_END\n #define TARGET_ASM_FILE_END arm_file_end\n \n-#ifdef AOF_ASSEMBLER\n-#undef  TARGET_ASM_BYTE_OP\n-#define TARGET_ASM_BYTE_OP \"\\tDCB\\t\"\n-#undef  TARGET_ASM_ALIGNED_HI_OP\n-#define TARGET_ASM_ALIGNED_HI_OP \"\\tDCW\\t\"\n-#undef  TARGET_ASM_ALIGNED_SI_OP\n-#define TARGET_ASM_ALIGNED_SI_OP \"\\tDCD\\t\"\n-#undef TARGET_ASM_GLOBALIZE_LABEL\n-#define TARGET_ASM_GLOBALIZE_LABEL aof_globalize_label\n-#undef TARGET_ASM_FILE_START\n-#define TARGET_ASM_FILE_START aof_file_start\n-#undef TARGET_ASM_FILE_END\n-#define TARGET_ASM_FILE_END aof_file_end\n-#else\n #undef  TARGET_ASM_ALIGNED_SI_OP\n #define TARGET_ASM_ALIGNED_SI_OP NULL\n #undef  TARGET_ASM_INTEGER\n #define TARGET_ASM_INTEGER arm_assemble_integer\n-#endif\n \n #undef  TARGET_ASM_FUNCTION_PROLOGUE\n #define TARGET_ASM_FUNCTION_PROLOGUE arm_output_function_prologue\n@@ -3433,9 +3408,7 @@ legitimize_pic_address (rtx orig, enum machine_mode mode, rtx reg)\n   if (GET_CODE (orig) == SYMBOL_REF\n       || GET_CODE (orig) == LABEL_REF)\n     {\n-#ifndef AOF_ASSEMBLER\n       rtx pic_ref, address;\n-#endif\n       rtx insn;\n       int subregs = 0;\n \n@@ -3450,11 +3423,6 @@ legitimize_pic_address (rtx orig, enum machine_mode mode, rtx reg)\n \t  subregs = 1;\n \t}\n \n-#ifdef AOF_ASSEMBLER\n-      /* The AOF assembler can generate relocations for these directly, and\n-\t understands that the PIC register has to be added into the offset.  */\n-      insn = emit_insn (gen_pic_load_addr_based (reg, orig));\n-#else\n       if (subregs)\n \taddress = gen_reg_rtx (Pmode);\n       else\n@@ -3487,7 +3455,7 @@ legitimize_pic_address (rtx orig, enum machine_mode mode, rtx reg)\n \t}\n \n       insn = emit_move_insn (reg, pic_ref);\n-#endif\n+\n       /* Put a REG_EQUAL note on this insn, so that it can be optimized\n \t by loop.  */\n       set_unique_reg_note (insn, REG_EQUAL, orig);\n@@ -3616,7 +3584,6 @@ static GTY(()) int pic_labelno;\n void\n arm_load_pic_register (unsigned long saved_regs ATTRIBUTE_UNUSED)\n {\n-#ifndef AOF_ASSEMBLER\n   rtx l1, labelno, pic_tmp, pic_tmp2, pic_rtx, pic_reg;\n   rtx global_offset_table;\n \n@@ -3707,7 +3674,6 @@ arm_load_pic_register (unsigned long saved_regs ATTRIBUTE_UNUSED)\n   /* Need to emit this whether or not we obey regdecls,\n      since setjmp/longjmp can cause life info to screw up.  */\n   emit_insn (gen_rtx_USE (VOIDmode, pic_reg));\n-#endif /* AOF_ASSEMBLER */\n }\n \n \n@@ -9105,14 +9071,6 @@ push_minipool_fix (rtx insn, HOST_WIDE_INT address, rtx *loc,\n {\n   Mfix * fix = (Mfix *) obstack_alloc (&minipool_obstack, sizeof (* fix));\n \n-#ifdef AOF_ASSEMBLER\n-  /* PIC symbol references need to be converted into offsets into the\n-     based area.  */\n-  /* XXX This shouldn't be done here.  */\n-  if (flag_pic && GET_CODE (value) == SYMBOL_REF)\n-    value = aof_pic_entry (value);\n-#endif /* AOF_ASSEMBLER */\n-\n   fix->insn = insn;\n   fix->address = address;\n   fix->loc = loc;\n@@ -11282,11 +11240,6 @@ arm_output_function_prologue (FILE *f, HOST_WIDE_INT frame_size)\n   if (current_function_calls_eh_return)\n     asm_fprintf (f, \"\\t@ Calls __builtin_eh_return.\\n\");\n \n-#ifdef AOF_ASSEMBLER\n-  if (flag_pic)\n-    asm_fprintf (f, \"\\tmov\\t%r, %r\\n\", IP_REGNUM, PIC_OFFSET_TABLE_REGNUM);\n-#endif\n-\n   return_used_this_function = 0;\n }\n \n@@ -13115,7 +13068,6 @@ arm_print_operand (FILE *stream, rtx x, int code)\n     }\n }\n \f\n-#ifndef AOF_ASSEMBLER\n /* Target hook for assembling integer objects.  The ARM version needs to\n    handle word-sized values specially.  */\n static bool\n@@ -13243,7 +13195,6 @@ arm_elf_asm_destructor (rtx symbol, int priority)\n {\n   arm_elf_asm_cdtor (symbol, priority, /*is_ctor=*/false);\n }\n-#endif\n \f\n /* A finite state machine takes care of noticing whether or not instructions\n    can be conditionally executed, and thus decrease execution time and code\n@@ -17629,239 +17580,6 @@ arm_file_end (void)\n     }\n }\n \n-rtx aof_pic_label;\n-\n-#ifdef AOF_ASSEMBLER\n-/* Special functions only needed when producing AOF syntax assembler.  */\n-\n-struct pic_chain\n-{\n-  struct pic_chain * next;\n-  const char * symname;\n-};\n-\n-static struct pic_chain * aof_pic_chain = NULL;\n-\n-rtx\n-aof_pic_entry (rtx x)\n-{\n-  struct pic_chain ** chainp;\n-  int offset;\n-\n-  if (aof_pic_label == NULL_RTX)\n-    {\n-      aof_pic_label = gen_rtx_SYMBOL_REF (Pmode, \"x$adcons\");\n-    }\n-\n-  for (offset = 0, chainp = &aof_pic_chain; *chainp;\n-       offset += 4, chainp = &(*chainp)->next)\n-    if ((*chainp)->symname == XSTR (x, 0))\n-      return plus_constant (aof_pic_label, offset);\n-\n-  *chainp = (struct pic_chain *) xmalloc (sizeof (struct pic_chain));\n-  (*chainp)->next = NULL;\n-  (*chainp)->symname = XSTR (x, 0);\n-  return plus_constant (aof_pic_label, offset);\n-}\n-\n-void\n-aof_dump_pic_table (FILE *f)\n-{\n-  struct pic_chain * chain;\n-\n-  if (aof_pic_chain == NULL)\n-    return;\n-\n-  asm_fprintf (f, \"\\tAREA |%r$$adcons|, BASED %r\\n\",\n-\t       PIC_OFFSET_TABLE_REGNUM,\n-\t       PIC_OFFSET_TABLE_REGNUM);\n-  fputs (\"|x$adcons|\\n\", f);\n-\n-  for (chain = aof_pic_chain; chain; chain = chain->next)\n-    {\n-      fputs (\"\\tDCD\\t\", f);\n-      assemble_name (f, chain->symname);\n-      fputs (\"\\n\", f);\n-    }\n-}\n-\n-int arm_text_section_count = 1;\n-\n-/* A get_unnamed_section callback for switching to the text section.  */\n-\n-static void\n-aof_output_text_section_asm_op (const void *data ATTRIBUTE_UNUSED)\n-{\n-  fprintf (asm_out_file, \"\\tAREA |C$$code%d|, CODE, READONLY\",\n-\t   arm_text_section_count++);\n-  if (flag_pic)\n-    fprintf (asm_out_file, \", PIC, REENTRANT\");\n-  fprintf (asm_out_file, \"\\n\");\n-}\n-\n-static int arm_data_section_count = 1;\n-\n-/* A get_unnamed_section callback for switching to the data section.  */\n-\n-static void\n-aof_output_data_section_asm_op (const void *data ATTRIBUTE_UNUSED)\n-{\n-  fprintf (asm_out_file, \"\\tAREA |C$$data%d|, DATA\\n\",\n-\t   arm_data_section_count++);\n-}\n-\n-/* Implement TARGET_ASM_INIT_SECTIONS.\n-\n-   AOF Assembler syntax is a nightmare when it comes to areas, since once\n-   we change from one area to another, we can't go back again.  Instead,\n-   we must create a new area with the same attributes and add the new output\n-   to that.  Unfortunately, there is nothing we can do here to guarantee that\n-   two areas with the same attributes will be linked adjacently in the\n-   resulting executable, so we have to be careful not to do pc-relative\n-   addressing across such boundaries.  */\n-\n-static void\n-aof_asm_init_sections (void)\n-{\n-  text_section = get_unnamed_section (SECTION_CODE,\n-\t\t\t\t      aof_output_text_section_asm_op, NULL);\n-  data_section = get_unnamed_section (SECTION_WRITE,\n-\t\t\t\t      aof_output_data_section_asm_op, NULL);\n-  readonly_data_section = text_section;\n-}\n-\n-void\n-zero_init_section (void)\n-{\n-  static int zero_init_count = 1;\n-\n-  fprintf (asm_out_file, \"\\tAREA |C$$zidata%d|,NOINIT\\n\", zero_init_count++);\n-  in_section = NULL;\n-}\n-\n-/* The AOF assembler is religiously strict about declarations of\n-   imported and exported symbols, so that it is impossible to declare\n-   a function as imported near the beginning of the file, and then to\n-   export it later on.  It is, however, possible to delay the decision\n-   until all the functions in the file have been compiled.  To get\n-   around this, we maintain a list of the imports and exports, and\n-   delete from it any that are subsequently defined.  At the end of\n-   compilation we spit the remainder of the list out before the END\n-   directive.  */\n-\n-struct import\n-{\n-  struct import * next;\n-  const char * name;\n-};\n-\n-static struct import * imports_list = NULL;\n-\n-void\n-aof_add_import (const char *name)\n-{\n-  struct import * new;\n-\n-  for (new = imports_list; new; new = new->next)\n-    if (new->name == name)\n-      return;\n-\n-  new = (struct import *) xmalloc (sizeof (struct import));\n-  new->next = imports_list;\n-  imports_list = new;\n-  new->name = name;\n-}\n-\n-void\n-aof_delete_import (const char *name)\n-{\n-  struct import ** old;\n-\n-  for (old = &imports_list; *old; old = & (*old)->next)\n-    {\n-      if ((*old)->name == name)\n-\t{\n-\t  *old = (*old)->next;\n-\t  return;\n-\t}\n-    }\n-}\n-\n-int arm_main_function = 0;\n-\n-static void\n-aof_dump_imports (FILE *f)\n-{\n-  /* The AOF assembler needs this to cause the startup code to be extracted\n-     from the library.  Brining in __main causes the whole thing to work\n-     automagically.  */\n-  if (arm_main_function)\n-    {\n-      switch_to_section (text_section);\n-      fputs (\"\\tIMPORT __main\\n\", f);\n-      fputs (\"\\tDCD __main\\n\", f);\n-    }\n-\n-  /* Now dump the remaining imports.  */\n-  while (imports_list)\n-    {\n-      fprintf (f, \"\\tIMPORT\\t\");\n-      assemble_name (f, imports_list->name);\n-      fputc ('\\n', f);\n-      imports_list = imports_list->next;\n-    }\n-}\n-\n-static void\n-aof_globalize_label (FILE *stream, const char *name)\n-{\n-  default_globalize_label (stream, name);\n-  if (! strcmp (name, \"main\"))\n-    arm_main_function = 1;\n-}\n-\n-static void\n-aof_file_start (void)\n-{\n-  fputs (\"__r0\\tRN\\t0\\n\", asm_out_file);\n-  fputs (\"__a1\\tRN\\t0\\n\", asm_out_file);\n-  fputs (\"__a2\\tRN\\t1\\n\", asm_out_file);\n-  fputs (\"__a3\\tRN\\t2\\n\", asm_out_file);\n-  fputs (\"__a4\\tRN\\t3\\n\", asm_out_file);\n-  fputs (\"__v1\\tRN\\t4\\n\", asm_out_file);\n-  fputs (\"__v2\\tRN\\t5\\n\", asm_out_file);\n-  fputs (\"__v3\\tRN\\t6\\n\", asm_out_file);\n-  fputs (\"__v4\\tRN\\t7\\n\", asm_out_file);\n-  fputs (\"__v5\\tRN\\t8\\n\", asm_out_file);\n-  fputs (\"__v6\\tRN\\t9\\n\", asm_out_file);\n-  fputs (\"__sl\\tRN\\t10\\n\", asm_out_file);\n-  fputs (\"__fp\\tRN\\t11\\n\", asm_out_file);\n-  fputs (\"__ip\\tRN\\t12\\n\", asm_out_file);\n-  fputs (\"__sp\\tRN\\t13\\n\", asm_out_file);\n-  fputs (\"__lr\\tRN\\t14\\n\", asm_out_file);\n-  fputs (\"__pc\\tRN\\t15\\n\", asm_out_file);\n-  fputs (\"__f0\\tFN\\t0\\n\", asm_out_file);\n-  fputs (\"__f1\\tFN\\t1\\n\", asm_out_file);\n-  fputs (\"__f2\\tFN\\t2\\n\", asm_out_file);\n-  fputs (\"__f3\\tFN\\t3\\n\", asm_out_file);\n-  fputs (\"__f4\\tFN\\t4\\n\", asm_out_file);\n-  fputs (\"__f5\\tFN\\t5\\n\", asm_out_file);\n-  fputs (\"__f6\\tFN\\t6\\n\", asm_out_file);\n-  fputs (\"__f7\\tFN\\t7\\n\", asm_out_file);\n-  switch_to_section (text_section);\n-}\n-\n-static void\n-aof_file_end (void)\n-{\n-  if (flag_pic)\n-    aof_dump_pic_table (asm_out_file);\n-  arm_file_end ();\n-  aof_dump_imports (asm_out_file);\n-  fputs (\"\\tEND\\n\", asm_out_file);\n-}\n-#endif /* AOF_ASSEMBLER */\n-\n #ifndef ARM_PE\n /* Symbols in the text segment can be accessed without indirecting via the\n    constant pool; it may take an extra binary operation, but this is still\n@@ -17872,12 +17590,8 @@ aof_file_end (void)\n static void\n arm_encode_section_info (tree decl, rtx rtl, int first)\n {\n-  /* This doesn't work with AOF syntax, since the string table may be in\n-     a different AREA.  */\n-#ifndef AOF_ASSEMBLER\n   if (optimize > 0 && TREE_CONSTANT (decl))\n     SYMBOL_REF_FLAG (XEXP (rtl, 0)) = 1;\n-#endif\n \n   default_encode_section_info (decl, rtl, first);\n }"}, {"sha": "9c8534cbaf9b1ce957c850a745016bf162026a80", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96a3900df6837b6f29a3e6b43c5e1c0227fcea00/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96a3900df6837b6f29a3e6b43c5e1c0227fcea00/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=96a3900df6837b6f29a3e6b43c5e1c0227fcea00", "patch": "@@ -132,8 +132,6 @@ extern rtx pool_vector_label;\n /* Set to 1 when a return insn is output, this means that the epilogue\n    is not needed.  */\n extern int return_used_this_function;\n-/* Used to produce AOF syntax assembler.  */\n-extern GTY(()) rtx aof_pic_label;\n \f\n /* Just in case configure has failed to define anything.  */\n #ifndef TARGET_CPU_DEFAULT\n@@ -1650,8 +1648,7 @@ typedef struct\n \n \f\n /* If your target environment doesn't prefix user functions with an\n-   underscore, you may wish to re-define this to prevent any conflicts.\n-   e.g. AOF may prefix mcount with an underscore.  */\n+   underscore, you may wish to re-define this to prevent any conflicts.  */\n #ifndef ARM_MCOUNT_NAME\n #define ARM_MCOUNT_NAME \"*mcount\"\n #endif\n@@ -1922,22 +1919,12 @@ typedef struct\n \n /* Recognize any constant value that is a valid address.  */\n /* XXX We can address any constant, eventually...  */\n-\n-#ifdef AOF_ASSEMBLER\n-\n-#define CONSTANT_ADDRESS_P(X)\t\t\\\n-  (GET_CODE (X) == SYMBOL_REF && CONSTANT_POOL_ADDRESS_P (X))\n-\n-#else\n-\n /* ??? Should the TARGET_ARM here also apply to thumb2?  */\n #define CONSTANT_ADDRESS_P(X)  \t\t\t\\\n   (GET_CODE (X) == SYMBOL_REF \t\t\t\\\n    && (CONSTANT_POOL_ADDRESS_P (X)\t\t\\\n        || (TARGET_ARM && optimize > 0 && SYMBOL_REF_FLAG (X))))\n \n-#endif /* AOF_ASSEMBLER */\n-\n /* True if SYMBOL + OFFSET constants must refer to something within\n    SYMBOL's section.  */\n #define ARM_OFFSETS_MUST_BE_WITHIN_SECTIONS_P 0"}, {"sha": "8a383e051b6338e3fffc5f94ebd445dc1082faf1", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96a3900df6837b6f29a3e6b43c5e1c0227fcea00/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96a3900df6837b6f29a3e6b43c5e1c0227fcea00/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=96a3900df6837b6f29a3e6b43c5e1c0227fcea00", "patch": "@@ -4849,39 +4849,6 @@\n    (set (attr \"pool_range\") (const_int 1024))]\n )\n \n-;; This variant is used for AOF assembly, since it needs to mention the\n-;; pic register in the rtl.\n-(define_expand \"pic_load_addr_based\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n-\t(unspec:SI [(match_operand 1 \"\" \"\") (match_dup 2)] UNSPEC_PIC_SYM))]\n-  \"TARGET_ARM && flag_pic\"\n-  \"operands[2] = cfun->machine->pic_reg;\"\n-)\n-\n-(define_insn \"*pic_load_addr_based_insn\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(unspec:SI [(match_operand 1 \"\" \"\")\n-\t\t    (match_operand 2 \"s_register_operand\" \"r\")]\n-\t\t   UNSPEC_PIC_SYM))]\n-  \"TARGET_EITHER && flag_pic && operands[2] == cfun->machine->pic_reg\"\n-  \"*\n-#ifdef AOF_ASSEMBLER\n-  operands[1] = aof_pic_entry (operands[1]);\n-#endif\n-  output_asm_insn (\\\"ldr%?\\\\t%0, %a1\\\", operands);\n-  return \\\"\\\";\n-  \"\n-  [(set_attr \"type\" \"load1\")\n-   (set (attr \"pool_range\")\n-\t(if_then_else (eq_attr \"is_thumb\" \"yes\")\n-\t\t      (const_int 1024)\n-\t\t      (const_int 4096)))\n-   (set (attr \"neg_pool_range\")\n-\t(if_then_else (eq_attr \"is_thumb\" \"yes\")\n-\t\t      (const_int 0)\n-\t\t      (const_int 4084)))]\n-)\n-\n (define_insn \"pic_add_dot_plus_four\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(unspec:SI [(plus:SI (match_operand:SI 1 \"register_operand\" \"0\")"}, {"sha": "6e0bf583d5aa261c8f146f550fe60e9e56258208", "filename": "gcc/config/arm/semiaof.h", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Fconfig%2Farm%2Fsemiaof.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Fconfig%2Farm%2Fsemiaof.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fsemiaof.h?ref=b1d5455a5efad3f380671cf818515a1a6ec94546", "patch": "@@ -1,39 +0,0 @@\n-/* Definitions of target machine for GNU compiler.  ARM on semi-hosted platform\n-   AOF Syntax assembler.\n-   Copyright (C) 1995, 1996, 1997, 2004, 2007 Free Software Foundation, Inc.\n-   Contributed by Richard Earnshaw (richard.earnshaw@armltd.co.uk)\n-\n-   This file is part of GCC.\n-\n-   GCC is free software; you can redistribute it and/or modify it\n-   under the terms of the GNU General Public License as published\n-   by the Free Software Foundation; either version 3, or (at your\n-   option) any later version.\n-\n-   GCC is distributed in the hope that it will be useful, but WITHOUT\n-   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n-   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n-   License for more details.\n-\n-   You should have received a copy of the GNU General Public License\n-   along with GCC; see the file COPYING3.  If not see\n-   <http://www.gnu.org/licenses/>.  */\n-\n-#define TARGET_OS_CPP_BUILTINS()\t\t\\\n-    do {\t\t\t\t\t\\\n-\tbuiltin_define_std (\"arm\");\t\t\\\n-\tbuiltin_define_std (\"semi\");\t\t\\\n-    } while (0)\n-\n-#define ASM_SPEC \"%{g -g} -arch 4 -apcs 3/32bit\"\n-\n-#define LIB_SPEC \"%{Eb: armlib_h.32b%s}%{!Eb: armlib_h.32l%s}\"\n-\n-#define TARGET_VERSION fputs (\" (ARM/semi-hosted)\", stderr);\n-\n-#define TARGET_DEFAULT_FLOAT_ABI ARM_FLOAT_ABI_HARD\n-\n-#define TARGET_DEFAULT (0)\n-\n-/* The Norcroft C library defines size_t as \"unsigned int\".  */\n-#define SIZE_TYPE \"unsigned int\""}, {"sha": "f5d8f1a6f5c88ca30b504e8cf64b1d070efc20db", "filename": "gcc/config/arm/t-semi", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Fconfig%2Farm%2Ft-semi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1d5455a5efad3f380671cf818515a1a6ec94546/gcc%2Fconfig%2Farm%2Ft-semi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-semi?ref=b1d5455a5efad3f380671cf818515a1a6ec94546", "patch": "@@ -1,37 +0,0 @@\n-# Just for these, we omit the frame pointer since it makes such a big\n-# difference.  It is then pointless adding debugging.\n-TARGET_LIBGCC2_CFLAGS = -fomit-frame-pointer\n-LIBGCC2_DEBUG_CFLAGS = -g0\n-\n-LIB1ASMSRC = arm/lib1funcs.asm\n-LIB1ASMFUNCS = _udivsi3 _divsi3 _umodsi3 _modsi3 _dvmd_tls _call_via_rX _interwork_call_via_rX\n-\n-# We want fine grained libraries, so use the new code to build the\n-# floating point emulation libraries.\n-FPBIT = fp-bit.c\n-DPBIT = dp-bit.c\n-\n-fp-bit.c: $(srcdir)/config/fp-bit.c\n-\techo '#ifdef __SOFTFP__' > fp-bit.c\n-\techo '#define FLOAT' >> fp-bit.c\n-\techo '#ifndef __ARMEB__' >> fp-bit.c\n-\techo '#define FLOAT_BIT_ORDER_MISMATCH' >> fp-bit.c\n-\techo '#endif' >> fp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c >> fp-bit.c\n-\techo '#endif' >> fp-bit.c\n-\n-dp-bit.c: $(srcdir)/config/fp-bit.c\n-\techo '#ifdef __SOFTFP__' > dp-bit.c\n-\techo '#ifndef __ARMEB__' >> dp-bit.c\n-\techo '#define FLOAT_BIT_ORDER_MISMATCH' >> dp-bit.c\n-\techo '#define FLOAT_WORD_ORDER_MISMATCH' >> dp-bit.c\n-\techo '#endif' >> dp-bit.c\n-\tcat $(srcdir)/config/fp-bit.c >> dp-bit.c\n-\techo '#endif' >> dp-bit.c\n-\n-MULTILIB_OPTIONS = msoft-float mbig-endian mwords-little-endian\n-MULTILIB_DIRNAMES = soft big wlittle\n-MULTILIB_EXCEPTIONS = mwords-little-endian msoft-float/mwords-little-endian\n-\n-LIBGCC = stmp-multilib\n-INSTALL_LIBGCC = install-multilib"}]}