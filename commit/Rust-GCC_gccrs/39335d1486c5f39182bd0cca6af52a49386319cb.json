{"sha": "39335d1486c5f39182bd0cca6af52a49386319cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzkzMzVkMTQ4NmM1ZjM5MTgyYmQwY2NhNmFmNTJhNDkzODYzMTljYg==", "commit": {"author": {"name": "Igor Tsimbalist", "email": "igor.v.tsimbalist@intel.com", "date": "2017-11-27T11:54:17Z"}, "committer": {"name": "Igor Tsimbalist", "email": "itsimbal@gcc.gnu.org", "date": "2017-11-27T11:54:17Z"}, "message": "Fix code generation for buildtin_longjmp with CET.\n\nAccording to the description of  inssp instruction from Intel CET it\nadusts the shadow stack pointer (ssp) only by value in the range of\n[0..255]. As a number of adjustment could be greater than 255 there\nshould be a loop generated to adjust ssp.\n\ngcc/\n\t* config/i386/i386.md: Add a loop with incssp.\n\t* testsuite/gcc.target/i386/cet-sjlj-1.c: Fix test.\n\t* testsuite/gcc.target/i386/cet-sjlj-4.c: Likewise.\n\nFrom-SVN: r255164", "tree": {"sha": "3409928bed4c483d33634a4bace037146a604b81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3409928bed4c483d33634a4bace037146a604b81"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39335d1486c5f39182bd0cca6af52a49386319cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39335d1486c5f39182bd0cca6af52a49386319cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39335d1486c5f39182bd0cca6af52a49386319cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39335d1486c5f39182bd0cca6af52a49386319cb/comments", "author": {"login": "itsimbal", "id": 29258612, "node_id": "MDQ6VXNlcjI5MjU4NjEy", "avatar_url": "https://avatars.githubusercontent.com/u/29258612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/itsimbal", "html_url": "https://github.com/itsimbal", "followers_url": "https://api.github.com/users/itsimbal/followers", "following_url": "https://api.github.com/users/itsimbal/following{/other_user}", "gists_url": "https://api.github.com/users/itsimbal/gists{/gist_id}", "starred_url": "https://api.github.com/users/itsimbal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/itsimbal/subscriptions", "organizations_url": "https://api.github.com/users/itsimbal/orgs", "repos_url": "https://api.github.com/users/itsimbal/repos", "events_url": "https://api.github.com/users/itsimbal/events{/privacy}", "received_events_url": "https://api.github.com/users/itsimbal/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "be025a2d99772df9ccea1b8b0aba5833bd8fc32c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be025a2d99772df9ccea1b8b0aba5833bd8fc32c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be025a2d99772df9ccea1b8b0aba5833bd8fc32c"}], "stats": {"total": 96, "additions": 76, "deletions": 20}, "files": [{"sha": "eaf26485a1379ec6086d742c873dd2d235eb6797", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39335d1486c5f39182bd0cca6af52a49386319cb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39335d1486c5f39182bd0cca6af52a49386319cb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=39335d1486c5f39182bd0cca6af52a49386319cb", "patch": "@@ -1,3 +1,8 @@\n+2017-11-27  Igor Tsimbalist  <igor.v.tsimbalist@intel.com>\n+\n+\tPR target/83109\n+\t* config/i386/i386.md: Add a loop with incssp.\n+\n 2017-11-27  Martin Jambor  <mjambor@suse.cz>\n \n \tPR tree-optimization/81248"}, {"sha": "a14efc8d0b6899e4552ac0e516bbd9f578166664", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 63, "deletions": 18, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39335d1486c5f39182bd0cca6af52a49386319cb/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39335d1486c5f39182bd0cca6af52a49386319cb/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=39335d1486c5f39182bd0cca6af52a49386319cb", "patch": "@@ -18394,56 +18394,101 @@\n   \"TARGET_SHSTK\"\n {\n   rtx fp, lab, stack;\n-  rtx jump, label, reg_adj, reg_ssp, reg_minus, mem_buf, tmp, clob;\n+  rtx flags, jump, noadj_label, inc_label, loop_label;\n+  rtx reg_adj, reg_ssp, mem_buf, tmp, clob;\n   machine_mode sa_mode = STACK_SAVEAREA_MODE (SAVE_NONLOCAL);\n \n   /* Adjust the shadow stack pointer (ssp) to the value saved in the\n      jmp_buf.  The saving was done in the builtin_setjmp_setup.  */\n   if (flag_cf_protection & CF_RETURN)\n     {\n-      /* Get current shadow stack pointer.  The code below will check if\n-\t SHSTK feature is enabled.  If it's not enabled RDSSP instruction\n+      /* Get the current shadow stack pointer.  The code below will check if\n+\t SHSTK feature is enabled.  If it is not enabled the RDSSP instruction\n \t is a NOP.  */\n       reg_ssp = gen_reg_rtx (Pmode);\n       emit_insn (gen_rtx_SET (reg_ssp, const0_rtx));\n       emit_insn ((Pmode == SImode)\n \t\t ? gen_rdsspsi (reg_ssp, reg_ssp)\n \t\t : gen_rdsspdi (reg_ssp, reg_ssp));\n       mem_buf = gen_rtx_MEM (Pmode, plus_constant (Pmode, operands[0],\n-\t\t\t\t\t\t   3 * GET_MODE_SIZE (Pmode))),\n+\t\t\t\t\t\t   3 * GET_MODE_SIZE (Pmode)));\n \n       /* Compare through substraction the saved and the current ssp to decide\n \t if ssp has to be adjusted.  */\n-      reg_minus = gen_reg_rtx (Pmode);\n-      tmp = gen_rtx_SET (reg_minus, gen_rtx_MINUS (Pmode, reg_ssp, mem_buf));\n+      reg_adj = gen_reg_rtx (Pmode);\n+      tmp = gen_rtx_SET (reg_adj, gen_rtx_MINUS (Pmode, reg_ssp, mem_buf));\n       clob = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (CCmode, FLAGS_REG));\n       tmp = gen_rtx_PARALLEL (VOIDmode, gen_rtvec (2, tmp, clob));\n       emit_insn (tmp);\n \n-      /* Jump over adjustment code.  */\n-      label = gen_label_rtx ();\n-      tmp = gen_rtx_REG (CCmode, FLAGS_REG);\n-      tmp = gen_rtx_EQ (VOIDmode, tmp, const0_rtx);\n+      /* Compare and jump over adjustment code.  */\n+      noadj_label = gen_label_rtx ();\n+      flags = gen_rtx_REG (CCZmode, FLAGS_REG);\n+      tmp = gen_rtx_EQ (VOIDmode, flags, const0_rtx);\n       tmp = gen_rtx_IF_THEN_ELSE (VOIDmode, tmp,\n-\t\t\t\t  gen_rtx_LABEL_REF (VOIDmode, label),\n+\t\t\t\t  gen_rtx_LABEL_REF (VOIDmode, noadj_label),\n \t\t\t\t  pc_rtx);\n       jump = emit_jump_insn (gen_rtx_SET (pc_rtx, tmp));\n-      JUMP_LABEL (jump) = label;\n+      JUMP_LABEL (jump) = noadj_label;\n \n-      /* Adjust the ssp.  */\n-      reg_adj = gen_reg_rtx (Pmode);\n+      /* Compute the numebr of frames to adjust.  */\n       tmp = gen_rtx_SET (reg_adj,\n-\t\t\t gen_rtx_LSHIFTRT (Pmode, negate_rtx (Pmode, reg_minus),\n-\t\t\t\t\t   GEN_INT (3)));\n+\t\t\t gen_rtx_LSHIFTRT (Pmode, negate_rtx (Pmode, reg_adj),\n+\t\t\t\t\t   GEN_INT ((Pmode == SImode)\n+\t\t\t\t\t\t    ? 2\n+\t\t\t\t\t\t    : 3)));\n       clob = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (CCmode, FLAGS_REG));\n       tmp = gen_rtx_PARALLEL (VOIDmode, gen_rtvec (2, tmp, clob));\n       emit_insn (tmp);\n+\n+      /* Check if number of frames <= 255 so no loop is needed.  */\n+      tmp = gen_rtx_COMPARE (CCmode, reg_adj, GEN_INT (255));\n+      flags = gen_rtx_REG (CCmode, FLAGS_REG);\n+      emit_insn (gen_rtx_SET (flags, tmp));\n+\n+      inc_label = gen_label_rtx ();\n+      tmp = gen_rtx_LEU (VOIDmode, flags, const0_rtx);\n+      tmp = gen_rtx_IF_THEN_ELSE (VOIDmode, tmp,\n+\t\t\t\t  gen_rtx_LABEL_REF (VOIDmode, inc_label),\n+\t\t\t\t  pc_rtx);\n+      jump = emit_jump_insn (gen_rtx_SET (pc_rtx, tmp));\n+      JUMP_LABEL (jump) = inc_label;\n+\n+      /* Adjust the ssp in a loop.  */\n+      loop_label = gen_label_rtx ();\n+      emit_label (loop_label);\n+      LABEL_NUSES (loop_label) = 1;\n+\n+      emit_insn ((Pmode == SImode)\n+\t\t ? gen_incsspsi (reg_adj)\n+\t\t : gen_incsspdi (reg_adj));\n+      tmp = gen_rtx_SET (reg_adj, gen_rtx_MINUS (Pmode,\n+\t\t\t\t\t\t reg_adj,\n+\t\t\t\t\t\t GEN_INT (255)));\n+      clob = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (CCmode, FLAGS_REG));\n+      tmp = gen_rtx_PARALLEL (VOIDmode, gen_rtvec (2, tmp, clob));\n+      emit_insn (tmp);\n+\n+      tmp = gen_rtx_COMPARE (CCmode, reg_adj, GEN_INT (255));\n+      flags = gen_rtx_REG (CCmode, FLAGS_REG);\n+      emit_insn (gen_rtx_SET (flags, tmp));\n+\n+      /* Jump to the loop label.  */\n+      tmp = gen_rtx_GTU (VOIDmode, flags, const0_rtx);\n+      tmp = gen_rtx_IF_THEN_ELSE (VOIDmode, tmp,\n+\t\t\t\t  gen_rtx_LABEL_REF (VOIDmode, loop_label),\n+\t\t\t\t  pc_rtx);\n+      jump = emit_jump_insn (gen_rtx_SET (pc_rtx, tmp));\n+      JUMP_LABEL (jump) = loop_label;\n+\n+      emit_label (inc_label);\n+      LABEL_NUSES (inc_label) = 1;\n       emit_insn ((Pmode == SImode)\n \t\t ? gen_incsspsi (reg_adj)\n \t\t : gen_incsspdi (reg_adj));\n \n-      emit_label (label);\n-      LABEL_NUSES (label) = 1;\n+      emit_label (noadj_label);\n+      LABEL_NUSES (noadj_label) = 1;\n     }\n \n   /* This code is the same as in expand_buildin_longjmp.  */"}, {"sha": "04788b638773074b269af948cdc5900d5cf3c890", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39335d1486c5f39182bd0cca6af52a49386319cb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39335d1486c5f39182bd0cca6af52a49386319cb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=39335d1486c5f39182bd0cca6af52a49386319cb", "patch": "@@ -1,3 +1,9 @@\n+2017-11-27  Igor Tsimbalist  <igor.v.tsimbalist@intel.com>\n+\n+\tPR target/83109\n+\t* testsuite/gcc.target/i386/cet-sjlj-1.c: Fix test.\n+\t* testsuite/gcc.target/i386/cet-sjlj-4.c: Likewise.\n+\n 2017-11-27  Martin Jambor  <mjambor@suse.cz>\n \n \tPR tree-optimization/81248"}, {"sha": "d80ab051c37e1628634040989badb067f285082a", "filename": "gcc/testsuite/gcc.target/i386/cet-sjlj-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39335d1486c5f39182bd0cca6af52a49386319cb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-sjlj-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39335d1486c5f39182bd0cca6af52a49386319cb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-sjlj-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-sjlj-1.c?ref=39335d1486c5f39182bd0cca6af52a49386319cb", "patch": "@@ -3,7 +3,7 @@\n /* { dg-final { scan-assembler-times \"endbr32\" 4 { target ia32 } } } */\n /* { dg-final { scan-assembler-times \"endbr64\" 4 { target { ! ia32 } } } } */\n /* { dg-final { scan-assembler-times \"rdssp\\[dq]\" 2 } } */\n-/* { dg-final { scan-assembler-times \"incssp\\[dq]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"incssp\\[dq]\" 2 } } */\n \n /* Based on gcc.dg/setjmp-3.c.  */\n "}, {"sha": "6a57cede2084630f3719e960850833f91d088e09", "filename": "gcc/testsuite/gcc.target/i386/cet-sjlj-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39335d1486c5f39182bd0cca6af52a49386319cb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-sjlj-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39335d1486c5f39182bd0cca6af52a49386319cb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-sjlj-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcet-sjlj-4.c?ref=39335d1486c5f39182bd0cca6af52a49386319cb", "patch": "@@ -3,7 +3,7 @@\n /* { dg-final { scan-assembler-times \"endbr32\" 3 { target ia32 } } } */\n /* { dg-final { scan-assembler-times \"endbr64\" 3 { target { ! ia32 } } } } */\n /* { dg-final { scan-assembler-times \"rdssp\\[dq]\" 2 } } */\n-/* { dg-final { scan-assembler-times \"incssp\\[dq]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"incssp\\[dq]\" 2 } } */\n \n /* Based on gcc.dg/setjmp-3.c.  */\n "}]}