{"sha": "c6f3187f9ab91126bcf34d3d51ef55644868e555", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzZmMzE4N2Y5YWI5MTEyNmJjZjM0ZDNkNTFlZjU1NjQ0ODY4ZTU1NQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-04-15T18:01:55Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-04-15T18:01:55Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r748", "tree": {"sha": "2fef69ad21dc06d929c2c4486b83258a7a6195d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2fef69ad21dc06d929c2c4486b83258a7a6195d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6f3187f9ab91126bcf34d3d51ef55644868e555", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6f3187f9ab91126bcf34d3d51ef55644868e555", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6f3187f9ab91126bcf34d3d51ef55644868e555", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6f3187f9ab91126bcf34d3d51ef55644868e555/comments", "author": null, "committer": null, "parents": [{"sha": "1460addfd3689012abc7394f7942b4b1128bbcd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1460addfd3689012abc7394f7942b4b1128bbcd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1460addfd3689012abc7394f7942b4b1128bbcd3"}], "stats": {"total": 21, "additions": 21, "deletions": 0}, "files": [{"sha": "25cc56c8017b37811c6345878a53aa8976c86624", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6f3187f9ab91126bcf34d3d51ef55644868e555/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6f3187f9ab91126bcf34d3d51ef55644868e555/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=c6f3187f9ab91126bcf34d3d51ef55644868e555", "patch": "@@ -1952,7 +1952,9 @@ output_block_move (insn, operands, num_regs)\n   int num\t\t= 0;\n   int offset\t\t= 0;\n   int use_lwl_lwr\t= FALSE;\n+  int last_operand\t= num_regs+4;\n   int i;\n+  int j;\n   rtx xoperands[10];\n \n   struct {\n@@ -1963,6 +1965,25 @@ output_block_move (insn, operands, num_regs)\n     enum machine_mode mode;\t/* mode to use on (MEM) */\n   } load_store[4];\n \n+  /* Work around a bug in GCC, where it can give us a register\n+     the same as one of the addressing registers.  */\n+  for (i = 4; i < last_operand; i++)\n+    {\n+      if (reg_mentioned_p (operands[i], operands[0])\n+\t  || reg_mentioned_p (operands[i], operands[1]))\n+\t{\n+\t  warning (\"register $%d passed as address and temp register to block move\",\n+\t\t   REGNO (operands[i]));\n+\n+\t  for (j = i+1; j < last_operand; j++)\n+\t    operands[j-1] = operands[j];\n+\n+\t  operands[--last_operand] = (rtx)0;\n+\t  if (--num_regs == 0)\n+\t    abort ();\n+\t}\n+    }\n+\n   /* If we are given global or static addresses, and we would be\n      emitting a few instructions, try to save time by using a\n      temporary register for the pointer.  */"}]}