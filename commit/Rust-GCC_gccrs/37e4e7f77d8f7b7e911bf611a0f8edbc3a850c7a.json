{"sha": "37e4e7f77d8f7b7e911bf611a0f8edbc3a850c7a", "node_id": "C_kwDOANBUbNoAKDM3ZTRlN2Y3N2Q4ZjdiN2U5MTFiZjYxMWEwZjhlZGJjM2E4NTBjN2E", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-06-02T17:46:37Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-06-02T17:46:37Z"}, "message": "PR target/105791: Add V1TI to V_128_256 for xop_pcmov_v1ti on x86_64.\n\nThis patch resolves PR target/105791 which is a regression that was\naccidentally introduced for my workaround to PR tree-optimization/10566.\n(a deeper problem in GCC's vectorizer creating VEC_COND_EXPR when it\nshouldn't).  The latest issues is that by providing a vcond_mask_v1tiv1ti\npattern in sse.md, the backend now calls ix86_expand_sse_movcc with\nV1TImode operands, which has a special case for TARGET_XOP to generate\na vpcmov instruction.  Unfortunately, there wasn't previously a V1TImode\nvariant, xop_pcmov_v1ti, so we'd ICE.\n\nThis is easily fixed by adding V1TImode (and V2TImode) to V_128_256\nwhich is only used for defining XOP's vpcmov instruction.  This in turn\nrequires V1TI (and V2TI) to be supported by <avxsizesuffix> (though\nthe use if <avxsizesuffix> in the names xop_pcmov_<mode><avxsizesuffix>\nseems unnecessary; the mode makes the name unique).\n\n2022-06-02  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\tPR target/105791\n\t* config/i386/sse.md (V_128_256):Add V1TI and V2TI.\n\t(define_mode_attr avxsizesuffix): Add support for V1TI and V2TI.\n\ngcc/testsuite/ChangeLog\n\tPR target/105791\n\t* gcc.target/i386/pr105791.c: New test case.", "tree": {"sha": "4bcbcbebafd938419da2c58b8312401f333508c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4bcbcbebafd938419da2c58b8312401f333508c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37e4e7f77d8f7b7e911bf611a0f8edbc3a850c7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37e4e7f77d8f7b7e911bf611a0f8edbc3a850c7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37e4e7f77d8f7b7e911bf611a0f8edbc3a850c7a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37e4e7f77d8f7b7e911bf611a0f8edbc3a850c7a/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72c605eea94065606b5ddcb5a51ef24a3d2841e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72c605eea94065606b5ddcb5a51ef24a3d2841e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72c605eea94065606b5ddcb5a51ef24a3d2841e9"}], "stats": {"total": 22, "additions": 18, "deletions": 4}, "files": [{"sha": "8b3163fe5e37b21569bac365b28f59bfa9e1ec3f", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37e4e7f77d8f7b7e911bf611a0f8edbc3a850c7a/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37e4e7f77d8f7b7e911bf611a0f8edbc3a850c7a/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=37e4e7f77d8f7b7e911bf611a0f8edbc3a850c7a", "patch": "@@ -301,7 +301,8 @@\n \n ;; All 128bit and 256bit vector modes\n (define_mode_iterator V_128_256\n-  [V32QI V16QI V16HI V8HI V8SI V4SI V4DI V2DI V16HF V8HF V8SF V4SF V4DF V2DF])\n+  [V32QI V16QI V16HI V8HI V8SI V4SI V4DI V2DI V2TI V1TI\n+   V16HF V8HF V8SF V4SF V4DF V2DF])\n \n ;; All 512bit vector modes\n (define_mode_iterator V_512 [V64QI V32HI V16SI V8DI V16SF V8DF])\n@@ -897,9 +898,9 @@\n    (V8HI \"sse4_1\") (V16HI \"avx\")])\n \n (define_mode_attr avxsizesuffix\n-  [(V64QI \"512\") (V32HI \"512\") (V16SI \"512\") (V8DI \"512\")\n-   (V32QI \"256\") (V16HI \"256\") (V8SI \"256\") (V4DI \"256\")\n-   (V16QI \"\") (V8HI \"\") (V4SI \"\") (V2DI \"\")\n+  [(V64QI \"512\") (V32HI \"512\") (V16SI \"512\") (V8DI \"512\") (V4TI \"512\")\n+   (V32QI \"256\") (V16HI \"256\") (V8SI \"256\") (V4DI \"256\") (V2TI \"256\")\n+   (V16QI \"\") (V8HI \"\") (V4SI \"\") (V2DI \"\") (V1TI \"\")\n    (V32HF \"512\") (V16SF \"512\") (V8DF \"512\")\n    (V16HF \"256\") (V8SF \"256\") (V4DF \"256\")\n    (V8HF \"\") (V4SF \"\") (V2DF \"\")])"}, {"sha": "55e278b2dad8ee803ccbe2a0118ae55db364f983", "filename": "gcc/testsuite/gcc.target/i386/pr105791.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37e4e7f77d8f7b7e911bf611a0f8edbc3a850c7a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr105791.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37e4e7f77d8f7b7e911bf611a0f8edbc3a850c7a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr105791.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr105791.c?ref=37e4e7f77d8f7b7e911bf611a0f8edbc3a850c7a", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2 -mxop\" } */\n+typedef __int128 __attribute__((__vector_size__ (sizeof (__int128)))) U;\n+typedef int __attribute__((__vector_size__ (sizeof (int)))) V;\n+\n+U u;\n+V v;\n+\n+U\n+foo (void)\n+{\n+  return (0 != __builtin_convertvector (v, U)) <= (0 != u);\n+}"}]}