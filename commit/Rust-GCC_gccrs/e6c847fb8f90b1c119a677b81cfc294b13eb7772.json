{"sha": "e6c847fb8f90b1c119a677b81cfc294b13eb7772", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTZjODQ3ZmI4ZjkwYjFjMTE5YTY3N2I4MWNmYzI5NGIxM2ViNzc3Mg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-07-16T08:54:47Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-07-16T08:54:47Z"}, "message": "Add parens around constraint in <memory>.\n\nC++20 concepts require parens around atomic constraints that are not\nprimary-expressions.\n\n\t* include/std/memory (uses_allocator_construction_args): Add parens\n\taround constraint.\n\nFrom-SVN: r273515", "tree": {"sha": "6787bdbc4ea95db4dbdf9c02c0b71c54a98e1101", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6787bdbc4ea95db4dbdf9c02c0b71c54a98e1101"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6c847fb8f90b1c119a677b81cfc294b13eb7772", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6c847fb8f90b1c119a677b81cfc294b13eb7772", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6c847fb8f90b1c119a677b81cfc294b13eb7772", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6c847fb8f90b1c119a677b81cfc294b13eb7772/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fd860f7d441d1f414bb13f2b6e1be6c4addac11f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd860f7d441d1f414bb13f2b6e1be6c4addac11f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd860f7d441d1f414bb13f2b6e1be6c4addac11f"}], "stats": {"total": 7, "additions": 6, "deletions": 1}, "files": [{"sha": "a88e73836b220d4b02fa6e20f06120296abe2248", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6c847fb8f90b1c119a677b81cfc294b13eb7772/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6c847fb8f90b1c119a677b81cfc294b13eb7772/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e6c847fb8f90b1c119a677b81cfc294b13eb7772", "patch": "@@ -1,3 +1,8 @@\n+2019-07-16  Jason Merrill  <jason@redhat.com>\n+\n+\t* include/std/memory (uses_allocator_construction_args): Add parens\n+\taround constraint.\n+\n 2019-07-12  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* testsuite/29_atomics/atomic_float/1.cc: Fix comment."}, {"sha": "3036802f8c3eb1c3013dc1720ad85087e5202694", "filename": "libstdc++-v3/include/std/memory", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6c847fb8f90b1c119a677b81cfc294b13eb7772/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6c847fb8f90b1c119a677b81cfc294b13eb7772/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory?ref=e6c847fb8f90b1c119a677b81cfc294b13eb7772", "patch": "@@ -261,7 +261,7 @@ get_pointer_safety() noexcept { return pointer_safety::relaxed; }\n     uses_allocator_construction_args(const _Alloc& __a,\n \t\t\t\t     _Args&&... __args) noexcept\n #if __cpp_concepts\n-    requires ! _Std_pair<_Tp>\n+    requires (! _Std_pair<_Tp>)\n #endif\n     {\n       return std::__uses_alloc_args<_Tp>(__a, std::forward<_Args>(__args)...);"}]}