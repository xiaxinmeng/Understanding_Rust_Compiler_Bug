{"sha": "cca36d72b941a1d02cfbcf0eebe5113c906222f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2NhMzZkNzJiOTQxYTFkMDJjZmJjZjBlZWJlNTExM2M5MDYyMjJmNQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2009-04-26T10:12:08Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-04-26T10:12:08Z"}, "message": "2009-04-26  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tRevert the last commit.\n\nFrom-SVN: r146796", "tree": {"sha": "110bbbb31639b9fd945721ee33931e8b8e13ef2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/110bbbb31639b9fd945721ee33931e8b8e13ef2c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cca36d72b941a1d02cfbcf0eebe5113c906222f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cca36d72b941a1d02cfbcf0eebe5113c906222f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cca36d72b941a1d02cfbcf0eebe5113c906222f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cca36d72b941a1d02cfbcf0eebe5113c906222f5/comments", "author": null, "committer": null, "parents": [{"sha": "e8f99a9d265e068c5748949970db24daf3a928b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8f99a9d265e068c5748949970db24daf3a928b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8f99a9d265e068c5748949970db24daf3a928b1"}], "stats": {"total": 101, "additions": 31, "deletions": 70}, "files": [{"sha": "970e1672ae6a873ce67d073af9d76ae82e05b2bf", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cca36d72b941a1d02cfbcf0eebe5113c906222f5/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cca36d72b941a1d02cfbcf0eebe5113c906222f5/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=cca36d72b941a1d02cfbcf0eebe5113c906222f5", "patch": "@@ -1,3 +1,7 @@\n+2009-04-26  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tRevert the last commit.\n+\n 2009-04-25  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* include/std/mutex (__get_once_functor_lock, __get_once_mutex):"}, {"sha": "57183c1a6703597ae468066f4e0346bdbbdc541b", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cca36d72b941a1d02cfbcf0eebe5113c906222f5/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cca36d72b941a1d02cfbcf0eebe5113c906222f5/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=cca36d72b941a1d02cfbcf0eebe5113c906222f5", "patch": "@@ -879,8 +879,7 @@ GLIBCXX_3.4.11 {\n     _ZSt11__once_call;\n     _ZSt15__once_callable;\n     _ZSt14__once_functor;\n-    _ZSt19__once_functor_lock;\n-    _ZSt16__get_once_mutexv;\n+    _ZSt23__get_once_functor_lockv;\n     __once_proxy;\n \n     # condition_variable"}, {"sha": "f26acc02f4f0aa2a41f9d55f08e47bc22d9a3edf", "filename": "libstdc++-v3/include/std/mutex", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cca36d72b941a1d02cfbcf0eebe5113c906222f5/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cca36d72b941a1d02cfbcf0eebe5113c906222f5/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex?ref=cca36d72b941a1d02cfbcf0eebe5113c906222f5", "patch": "@@ -728,10 +728,9 @@ namespace std\n     }\n #else\n   extern function<void()> __once_functor;\n-  extern unique_lock<mutex>* __once_functor_lock;\n \n-  extern mutex&\n-  __get_once_mutex();\n+  extern unique_lock<mutex>&\n+  __get_once_functor_lock();\n #endif\n \n   extern \"C\" void __once_proxy();\n@@ -746,13 +745,18 @@ namespace std\n       __once_callable = &__bound_functor;\n       __once_call = &__once_call_impl<decltype(__bound_functor)>;\n #else\n-      unique_lock<mutex> __functor_lock(__get_once_mutex());\n+      unique_lock<mutex>& __functor_lock = __get_once_functor_lock();\n+      __functor_lock.lock();\n       __once_functor = bind(__f, __args...);\n-      __once_functor_lock = &__functor_lock;\n #endif\n \n       int __e = __gthread_once(&(__once._M_once), &__once_proxy);\n \n+#ifndef _GLIBCXX_HAVE_TLS\n+      if (__functor_lock)\n+\t__functor_lock.unlock();\n+#endif\n+\n       if (__e)\n \t__throw_system_error(__e);\n     }"}, {"sha": "e0a94892158240bc8a2e1da662afd41744db3a78", "filename": "libstdc++-v3/src/mutex.cc", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cca36d72b941a1d02cfbcf0eebe5113c906222f5/libstdc%2B%2B-v3%2Fsrc%2Fmutex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cca36d72b941a1d02cfbcf0eebe5113c906222f5/libstdc%2B%2B-v3%2Fsrc%2Fmutex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fmutex.cc?ref=cca36d72b941a1d02cfbcf0eebe5113c906222f5", "patch": "@@ -25,6 +25,18 @@\n #include <mutex>\n \n #if defined(_GLIBCXX_HAS_GTHREADS) && defined(_GLIBCXX_USE_C99_STDINT_TR1)\n+#ifndef _GLIBCXX_HAVE_TLS\n+namespace\n+{\n+  std::mutex&\n+  get_once_mutex()\n+  {\n+    static std::mutex once_mutex;\n+    return once_mutex;\n+  }\n+}\n+#endif\n+\n namespace std\n {\n   const defer_lock_t defer_lock = defer_lock_t();\n@@ -43,13 +55,11 @@ namespace std\n   template class function<void()>;\n   function<void()> __once_functor;\n \n-  unique_lock<mutex>* __once_functor_lock;\n-\n-  mutex&\n-  __get_once_mutex()\n+  unique_lock<mutex>&\n+  __get_once_functor_lock()\n   {\n-    static mutex once_mutex;\n-    return once_mutex;\n+    static unique_lock<mutex> once_functor_lock(get_once_mutex(), defer_lock);\n+    return once_functor_lock;\n   }\n #endif\n \n@@ -59,7 +69,7 @@ namespace std\n     {\n #ifndef _GLIBCXX_HAVE_TLS\n       function<void()> __once_call = std::move(__once_functor);\n-      __once_functor_lock->unlock();\n+      __get_once_functor_lock().unlock();\n #endif\n       __once_call();\n     }"}, {"sha": "aa125919bf801cbc96e3205baf836dbb4b24647b", "filename": "libstdc++-v3/testsuite/30_threads/call_once/call_once2.cc", "status": "removed", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8f99a9d265e068c5748949970db24daf3a928b1/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcall_once%2Fcall_once2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8f99a9d265e068c5748949970db24daf3a928b1/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcall_once%2Fcall_once2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcall_once%2Fcall_once2.cc?ref=e8f99a9d265e068c5748949970db24daf3a928b1", "patch": "@@ -1,56 +0,0 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n-// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n-// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n-// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n-// { dg-require-cstdint \"\" }\n-// { dg-require-gthreads \"\" }\n-\n-// Copyright (C) 2009 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-\n-#include <mutex>\n-#include <thread>\n-#include <testsuite_hooks.h>\n-\n-std::once_flag flag;\n-int value = 0;\n-\n-struct Inc { void operator()() const { ++value; } };\n-\n-struct Func\n-{\n-   void operator()() const\n-   {\n-       Inc inc;\n-       for (int i = 0; i < 10000;  ++i)\n-           std::call_once(flag, inc);\n-   }\n-};\n-\n-int main()\n-{\n-   Func f;\n-   std::thread t1(f);\n-   std::thread t2(f);\n-   std::thread t3(f);\n-   t1.join();\n-   t2.join();\n-   t3.join();\n-   VERIFY( value == 1 );\n-   return 0;\n-}"}]}