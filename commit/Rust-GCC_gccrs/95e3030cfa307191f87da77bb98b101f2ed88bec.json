{"sha": "95e3030cfa307191f87da77bb98b101f2ed88bec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTVlMzAzMGNmYTMwNzE5MWY4N2RhNzdiYjk4YjEwMWYyZWQ4OGJlYw==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2016-01-27T14:26:38Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2016-01-27T14:26:38Z"}, "message": "re PR c++/69496 ([C++ 14] ICE on VLA in constexpr function)\n\n\tPR c++/69496\n\t* constexpr.c (cxx_eval_array_reference): Evaluate the number of\n\telements of the array.\n\n\t* g++.dg/ext/constexpr-vla1.C: New test.\n\nFrom-SVN: r232875", "tree": {"sha": "bfe137203da0ccf55cba3f65e7c46f06a5d8bb62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bfe137203da0ccf55cba3f65e7c46f06a5d8bb62"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95e3030cfa307191f87da77bb98b101f2ed88bec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95e3030cfa307191f87da77bb98b101f2ed88bec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95e3030cfa307191f87da77bb98b101f2ed88bec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95e3030cfa307191f87da77bb98b101f2ed88bec/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5128d392c0c6509fac352b62cbb3cecf511e7b2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5128d392c0c6509fac352b62cbb3cecf511e7b2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5128d392c0c6509fac352b62cbb3cecf511e7b2a"}], "stats": {"total": 48, "additions": 47, "deletions": 1}, "files": [{"sha": "9f8d91a4500c0f0631fa2b48cda58289a3e895da", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95e3030cfa307191f87da77bb98b101f2ed88bec/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95e3030cfa307191f87da77bb98b101f2ed88bec/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=95e3030cfa307191f87da77bb98b101f2ed88bec", "patch": "@@ -1,3 +1,9 @@\n+2016-01-27  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/69496\n+\t* constexpr.c (cxx_eval_array_reference): Evaluate the number of\n+\telements of the array.\n+\n 2016-01-26  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/68949"}, {"sha": "fd80000d3a8a57883539eda4e1663d1cbee86899", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95e3030cfa307191f87da77bb98b101f2ed88bec/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95e3030cfa307191f87da77bb98b101f2ed88bec/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=95e3030cfa307191f87da77bb98b101f2ed88bec", "patch": "@@ -1846,7 +1846,12 @@ cxx_eval_array_reference (const constexpr_ctx *ctx, tree t,\n \n   if (!found)\n     {\n-      if (tree_int_cst_lt (index, array_type_nelts_top (TREE_TYPE (ary))))\n+      tree nelts = array_type_nelts_top (TREE_TYPE (ary));\n+      /* For VLAs, the number of elements won't be an integer constant.  */\n+      nelts = cxx_eval_constant_expression (ctx, nelts, false, non_constant_p,\n+\t\t\t\t\t    overflow_p);\n+      VERIFY_CONSTANT (nelts);\n+      if (tree_int_cst_lt (index, nelts))\n \t{\n \t  if (TREE_CODE (ary) == CONSTRUCTOR\n \t      && CONSTRUCTOR_NO_IMPLICIT_ZERO (ary))"}, {"sha": "2ff4f7d40435973cbbc002339655b9a9492f3ef6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95e3030cfa307191f87da77bb98b101f2ed88bec/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95e3030cfa307191f87da77bb98b101f2ed88bec/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=95e3030cfa307191f87da77bb98b101f2ed88bec", "patch": "@@ -1,3 +1,8 @@\n+2016-01-27  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/69496\n+\t* g++.dg/ext/constexpr-vla1.C: New test.\n+\n 2016-01-20  Christian Bruel  <christian.bruel@st.com>\n \n \tPR target/69245"}, {"sha": "a5615bb3620b3f955be99622eb53eb1748251916", "filename": "gcc/testsuite/g++.dg/ext/constexpr-vla1.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95e3030cfa307191f87da77bb98b101f2ed88bec/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fconstexpr-vla1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95e3030cfa307191f87da77bb98b101f2ed88bec/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fconstexpr-vla1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fconstexpr-vla1.C?ref=95e3030cfa307191f87da77bb98b101f2ed88bec", "patch": "@@ -0,0 +1,30 @@\n+// PR c++/69496\n+// { dg-do compile { target c++14 } }\n+\n+constexpr int\n+fn_ok (int n)\n+{\n+    __extension__ int a[n] = { };\n+    int z = 0;\n+\n+    for (unsigned i = 0; i < sizeof (a) / sizeof (int); ++i)\n+      z += a[i];\n+\n+    return z;\n+}\n+\n+\n+constexpr int\n+fn_not_ok (int n)\n+{\n+    __extension__ int a[n] = { };\n+    int z = 0;\n+\n+    for (unsigned i = 0; i < sizeof (a); ++i)\n+      z += a[i];\n+\n+    return z;\n+}\n+\n+constexpr int n1 = fn_ok (3);\n+constexpr int n2 = fn_not_ok (3); // { dg-error \"array subscript out of bound\" }"}]}