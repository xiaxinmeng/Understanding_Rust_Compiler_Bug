{"sha": "356bf5934944d4259bf8feffed3f749c71fc2e37", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzU2YmY1OTM0OTQ0ZDQyNTliZjhmZWZmZWQzZjc0OWM3MWZjMmUzNw==", "commit": {"author": {"name": "Radovan Obradovic", "email": "robradovic@mips.com", "date": "2014-04-25T11:21:18Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2014-04-25T11:21:18Z"}, "message": "Add implicit parameter to find_all_hard_reg_sets\n\n2014-04-25  Radovan Obradovic  <robradovic@mips.com>\n            Tom de Vries  <tom@codesourcery.com>\n\n\t* rtlanal.c (find_all_hard_reg_sets): Add bool implicit parameter and\n\thandle.\n\t* rtl.h (find_all_hard_reg_sets): Add bool parameter.\n\t* haifa-sched.c (recompute_todo_spec, check_clobbered_conditions): Add\n\tnew argument to find_all_hard_reg_sets call.\n\nCo-Authored-By: Tom de Vries <tom@codesourcery.com>\n\nFrom-SVN: r209798", "tree": {"sha": "17d51591cd963cb85249cafcbb3755cfffa2cad8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17d51591cd963cb85249cafcbb3755cfffa2cad8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/356bf5934944d4259bf8feffed3f749c71fc2e37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/356bf5934944d4259bf8feffed3f749c71fc2e37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/356bf5934944d4259bf8feffed3f749c71fc2e37", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/356bf5934944d4259bf8feffed3f749c71fc2e37/comments", "author": null, "committer": null, "parents": [{"sha": "fe65a7edc6f7a6b86e3f5c4f682b4bb48c429e85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe65a7edc6f7a6b86e3f5c4f682b4bb48c429e85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe65a7edc6f7a6b86e3f5c4f682b4bb48c429e85"}], "stats": {"total": 19, "additions": 14, "deletions": 5}, "files": [{"sha": "4a0af82d9b479b676b0320b1240f745b5015f676", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/356bf5934944d4259bf8feffed3f749c71fc2e37/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/356bf5934944d4259bf8feffed3f749c71fc2e37/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=356bf5934944d4259bf8feffed3f749c71fc2e37", "patch": "@@ -1,3 +1,12 @@\n+2014-04-25  Radovan Obradovic  <robradovic@mips.com>\n+            Tom de Vries  <tom@codesourcery.com>\n+\n+\t* rtlanal.c (find_all_hard_reg_sets): Add bool implicit parameter and\n+\thandle.\n+\t* rtl.h (find_all_hard_reg_sets): Add bool parameter.\n+\t* haifa-sched.c (recompute_todo_spec, check_clobbered_conditions): Add\n+\tnew argument to find_all_hard_reg_sets call.\n+\n 2014-04-25  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/arm/aarch-common.c (aarch_rev16_shright_mask_imm_p):"}, {"sha": "5d16b4d0f9429bd0f7c5c93179447663053d8165", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/356bf5934944d4259bf8feffed3f749c71fc2e37/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/356bf5934944d4259bf8feffed3f749c71fc2e37/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=356bf5934944d4259bf8feffed3f749c71fc2e37", "patch": "@@ -1299,7 +1299,7 @@ recompute_todo_spec (rtx next, bool for_backtrack)\n \t  {\n \t    HARD_REG_SET t;\n \n-\t    find_all_hard_reg_sets (prev, &t);\n+\t    find_all_hard_reg_sets (prev, &t, true);\n \t    if (TEST_HARD_REG_BIT (t, regno))\n \t      return HARD_DEP;\n \t    if (prev == pro)\n@@ -3082,7 +3082,7 @@ check_clobbered_conditions (rtx insn)\n   if ((current_sched_info->flags & DO_PREDICATION) == 0)\n     return;\n \n-  find_all_hard_reg_sets (insn, &t);\n+  find_all_hard_reg_sets (insn, &t, true);\n \n  restart:\n   for (i = 0; i < ready.n_ready; i++)"}, {"sha": "595b6994f538374704a178993fa26a7cf6c8f56f", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/356bf5934944d4259bf8feffed3f749c71fc2e37/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/356bf5934944d4259bf8feffed3f749c71fc2e37/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=356bf5934944d4259bf8feffed3f749c71fc2e37", "patch": "@@ -2042,7 +2042,7 @@ extern const_rtx set_of (const_rtx, const_rtx);\n extern void record_hard_reg_sets (rtx, const_rtx, void *);\n extern void record_hard_reg_uses (rtx *, void *);\n #ifdef HARD_CONST\n-extern void find_all_hard_reg_sets (const_rtx, HARD_REG_SET *);\n+extern void find_all_hard_reg_sets (const_rtx, HARD_REG_SET *, bool);\n #endif\n extern void note_stores (const_rtx, void (*) (rtx, const_rtx, void *), void *);\n extern void note_uses (rtx *, void (*) (rtx *, void *), void *);"}, {"sha": "284c4752673e5b5ad01a5423db5500ea898cbc9b", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/356bf5934944d4259bf8feffed3f749c71fc2e37/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/356bf5934944d4259bf8feffed3f749c71fc2e37/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=356bf5934944d4259bf8feffed3f749c71fc2e37", "patch": "@@ -1046,13 +1046,13 @@ record_hard_reg_sets (rtx x, const_rtx pat ATTRIBUTE_UNUSED, void *data)\n /* Examine INSN, and compute the set of hard registers written by it.\n    Store it in *PSET.  Should only be called after reload.  */\n void\n-find_all_hard_reg_sets (const_rtx insn, HARD_REG_SET *pset)\n+find_all_hard_reg_sets (const_rtx insn, HARD_REG_SET *pset, bool implicit)\n {\n   rtx link;\n \n   CLEAR_HARD_REG_SET (*pset);\n   note_stores (PATTERN (insn), record_hard_reg_sets, pset);\n-  if (CALL_P (insn))\n+  if (implicit && CALL_P (insn))\n     IOR_HARD_REG_SET (*pset, call_used_reg_set);\n   for (link = REG_NOTES (insn); link; link = XEXP (link, 1))\n     if (REG_NOTE_KIND (link) == REG_INC)"}]}