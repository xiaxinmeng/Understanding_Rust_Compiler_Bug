{"sha": "4c1f41e15229f5c53d9b12fc8790009889935008", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGMxZjQxZTE1MjI5ZjVjNTNkOWIxMmZjODc5MDAwOTg4OTkzNTAwOA==", "commit": {"author": {"name": "Peter Bergner", "email": "bergner@vnet.ibm.com", "date": "2015-10-14T21:28:06Z"}, "committer": {"name": "Peter Bergner", "email": "bergner@gcc.gnu.org", "date": "2015-10-14T21:28:06Z"}, "message": "htm.md (UNSPEC_HTM_FENCE): New.\n\n\t* config/rs6000/htm.md (UNSPEC_HTM_FENCE): New.\n\t(tabort, tabort<wd>c, tabort<wd>ci, tbegin, tcheck, tend,\n\ttrechkpt, treclaim, tsr, ttest): Rename define_insns from this...\n\t(*tabort, *tabort<wd>c, *tabort<wd>ci, *tbegin, *tcheck, *tend,\n\t*trechkpt, *treclaim, *tsr, *ttest): ...to this.  Add memory barrier.\n\t(tabort, tabort<wd>c, tabort<wd>ci, tbegin, tcheck, tend,\n\ttrechkpt, treclaim, tsr, ttest): New define_expands.\n\t* config/rs6000/rs6000-c.c (rs6000_target_modify_macros): Define\n\t__TM_FENCE__ for htm.\n\t* doc/extend.texi: Update documentation for htm builtins.\n\nCo-Authored-By: Torvald Riegel <triegel@redhat.com>\n\nFrom-SVN: r228827", "tree": {"sha": "f1690cbac145c7fab5216d99200a30e9b09d23f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1690cbac145c7fab5216d99200a30e9b09d23f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c1f41e15229f5c53d9b12fc8790009889935008", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c1f41e15229f5c53d9b12fc8790009889935008", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c1f41e15229f5c53d9b12fc8790009889935008", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c1f41e15229f5c53d9b12fc8790009889935008/comments", "author": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a409ca75d60c5044111c410eb9f30ce806425519", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a409ca75d60c5044111c410eb9f30ce806425519", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a409ca75d60c5044111c410eb9f30ce806425519"}], "stats": {"total": 223, "additions": 199, "deletions": 24}, "files": [{"sha": "b2a38daec48ba1428aeed5973311aac3065605f9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c1f41e15229f5c53d9b12fc8790009889935008/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c1f41e15229f5c53d9b12fc8790009889935008/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4c1f41e15229f5c53d9b12fc8790009889935008", "patch": "@@ -1,3 +1,17 @@\n+2015-10-14  Peter Bergner  <bergner@vnet.ibm.com>\n+\t    Torvald Riegel  <triegel@redhat.com>\n+\n+\t* config/rs6000/htm.md (UNSPEC_HTM_FENCE): New.\n+\t(tabort, tabort<wd>c, tabort<wd>ci, tbegin, tcheck, tend,\n+\ttrechkpt, treclaim, tsr, ttest): Rename define_insns from this...\n+\t(*tabort, *tabort<wd>c, *tabort<wd>ci, *tbegin, *tcheck, *tend,\n+\t*trechkpt, *treclaim, *tsr, *ttest): ...to this.  Add memory barrier.\n+\t(tabort, tabort<wd>c, tabort<wd>ci, tbegin, tcheck, tend,\n+\ttrechkpt, treclaim, tsr, ttest): New define_expands.\n+\t* config/rs6000/rs6000-c.c (rs6000_target_modify_macros): Define\n+\t__TM_FENCE__ for htm.\n+\t* doc/extend.texi: Update documentation for htm builtins.\n+\n 2015-10-14  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/67967"}, {"sha": "098723f6308b06aaa70de9159adfb613cf215226", "filename": "gcc/config/rs6000/htm.md", "status": "modified", "additions": 158, "deletions": 23, "changes": 181, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c1f41e15229f5c53d9b12fc8790009889935008/gcc%2Fconfig%2Frs6000%2Fhtm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c1f41e15229f5c53d9b12fc8790009889935008/gcc%2Fconfig%2Frs6000%2Fhtm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fhtm.md?ref=4c1f41e15229f5c53d9b12fc8790009889935008", "patch": "@@ -26,6 +26,14 @@\n    (MAX_HTM_OPERANDS\t4)\n   ])\n \n+;;\n+;; UNSPEC usage\n+;;\n+\n+(define_c_enum \"unspec\"\n+  [UNSPEC_HTM_FENCE\n+  ])\n+\n ;;\n ;; UNSPEC_VOLATILE usage\n ;;\n@@ -45,96 +53,223 @@\n    UNSPECV_HTM_MTSPR\n   ])\n \n+(define_expand \"tabort\"\n+  [(parallel\n+     [(set (match_operand:CC 1 \"cc_reg_operand\" \"=x\")\n+\t   (unspec_volatile:CC [(match_operand:SI 0 \"base_reg_operand\" \"b\")]\n+\t\t\t       UNSPECV_HTM_TABORT))\n+      (set (match_dup 2) (unspec:BLK [(match_dup 2)] UNSPEC_HTM_FENCE))])]\n+  \"TARGET_HTM\"\n+{\n+  operands[2] = gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (Pmode));\n+  MEM_VOLATILE_P (operands[2]) = 1;\n+})\n \n-(define_insn \"tabort\"\n+(define_insn \"*tabort\"\n   [(set (match_operand:CC 1 \"cc_reg_operand\" \"=x\")\n \t(unspec_volatile:CC [(match_operand:SI 0 \"base_reg_operand\" \"b\")]\n-\t\t\t    UNSPECV_HTM_TABORT))]\n+\t\t\t    UNSPECV_HTM_TABORT))\n+   (set (match_operand:BLK 2) (unspec:BLK [(match_dup 2)] UNSPEC_HTM_FENCE))]\n   \"TARGET_HTM\"\n   \"tabort. %0\"\n   [(set_attr \"type\" \"htm\")\n    (set_attr \"length\" \"4\")])\n \n-(define_insn \"tabort<wd>c\"\n+(define_expand \"tabort<wd>c\"\n+  [(parallel\n+     [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x\")\n+\t   (unspec_volatile:CC [(match_operand 0 \"u5bit_cint_operand\" \"n\")\n+\t\t\t\t(match_operand:GPR 1 \"gpc_reg_operand\" \"r\")\n+\t\t\t\t(match_operand:GPR 2 \"gpc_reg_operand\" \"r\")]\n+\t\t\t       UNSPECV_HTM_TABORTXC))\n+      (set (match_dup 4) (unspec:BLK [(match_dup 4)] UNSPEC_HTM_FENCE))])]\n+  \"TARGET_HTM\"\n+{\n+  operands[4] = gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (Pmode));\n+  MEM_VOLATILE_P (operands[4]) = 1;\n+})\n+\n+(define_insn \"*tabort<wd>c\"\n   [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x\")\n \t(unspec_volatile:CC [(match_operand 0 \"u5bit_cint_operand\" \"n\")\n \t\t\t     (match_operand:GPR 1 \"gpc_reg_operand\" \"r\")\n \t\t\t     (match_operand:GPR 2 \"gpc_reg_operand\" \"r\")]\n-\t\t\t    UNSPECV_HTM_TABORTXC))]\n+\t\t\t    UNSPECV_HTM_TABORTXC))\n+   (set (match_operand:BLK 4) (unspec:BLK [(match_dup 4)] UNSPEC_HTM_FENCE))]\n   \"TARGET_HTM\"\n   \"tabort<wd>c. %0,%1,%2\"\n   [(set_attr \"type\" \"htm\")\n    (set_attr \"length\" \"4\")])\n \n-(define_insn \"tabort<wd>ci\"\n+(define_expand \"tabort<wd>ci\"\n+  [(parallel\n+     [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x\")\n+\t   (unspec_volatile:CC [(match_operand 0 \"u5bit_cint_operand\" \"n\")\n+\t\t\t\t(match_operand:GPR 1 \"gpc_reg_operand\" \"r\")\n+\t\t\t\t(match_operand 2 \"s5bit_cint_operand\" \"n\")]\n+\t\t\t       UNSPECV_HTM_TABORTXCI))\n+      (set (match_dup 4) (unspec:BLK [(match_dup 4)] UNSPEC_HTM_FENCE))])]\n+  \"TARGET_HTM\"\n+{\n+  operands[4] = gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (Pmode));\n+  MEM_VOLATILE_P (operands[4]) = 1;\n+})\n+\n+(define_insn \"*tabort<wd>ci\"\n   [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x\")\n \t(unspec_volatile:CC [(match_operand 0 \"u5bit_cint_operand\" \"n\")\n \t\t\t     (match_operand:GPR 1 \"gpc_reg_operand\" \"r\")\n \t\t\t     (match_operand 2 \"s5bit_cint_operand\" \"n\")]\n-\t\t\t    UNSPECV_HTM_TABORTXCI))]\n+\t\t\t    UNSPECV_HTM_TABORTXCI))\n+   (set (match_operand:BLK 4) (unspec:BLK [(match_dup 4)] UNSPEC_HTM_FENCE))]\n   \"TARGET_HTM\"\n   \"tabort<wd>ci. %0,%1,%2\"\n   [(set_attr \"type\" \"htm\")\n    (set_attr \"length\" \"4\")])\n \n-(define_insn \"tbegin\"\n+(define_expand \"tbegin\"\n+  [(parallel\n+     [(set (match_operand:CC 1 \"cc_reg_operand\" \"=x\")\n+\t   (unspec_volatile:CC [(match_operand 0 \"const_0_to_1_operand\" \"n\")]\n+\t\t\t       UNSPECV_HTM_TBEGIN))\n+      (set (match_dup 2) (unspec:BLK [(match_dup 2)] UNSPEC_HTM_FENCE))])]\n+  \"TARGET_HTM\"\n+{\n+  operands[2] = gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (Pmode));\n+  MEM_VOLATILE_P (operands[2]) = 1;\n+})\n+\n+(define_insn \"*tbegin\"\n   [(set (match_operand:CC 1 \"cc_reg_operand\" \"=x\")\n \t(unspec_volatile:CC [(match_operand 0 \"const_0_to_1_operand\" \"n\")]\n-\t\t\t    UNSPECV_HTM_TBEGIN))]\n+\t\t\t    UNSPECV_HTM_TBEGIN))\n+   (set (match_operand:BLK 2) (unspec:BLK [(match_dup 2)] UNSPEC_HTM_FENCE))]\n   \"TARGET_HTM\"\n   \"tbegin. %0\"\n   [(set_attr \"type\" \"htm\")\n    (set_attr \"length\" \"4\")])\n \n-(define_insn \"tcheck\"\n+(define_expand \"tcheck\"\n+  [(parallel\n+     [(set (match_operand:CC 0 \"cc_reg_operand\" \"=y\")\n+\t   (unspec_volatile:CC [(const_int 0)] UNSPECV_HTM_TCHECK))\n+      (set (match_dup 1) (unspec:BLK [(match_dup 1)] UNSPEC_HTM_FENCE))])]\n+  \"TARGET_HTM\"\n+{\n+  operands[1] = gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (Pmode));\n+  MEM_VOLATILE_P (operands[1]) = 1;\n+})\n+\n+(define_insn \"*tcheck\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=y\")\n-\t(unspec_volatile:CC [(const_int 0)]\n-\t\t\t    UNSPECV_HTM_TCHECK))]\n+\t(unspec_volatile:CC [(const_int 0)] UNSPECV_HTM_TCHECK))\n+   (set (match_operand:BLK 1) (unspec:BLK [(match_dup 1)] UNSPEC_HTM_FENCE))]\n   \"TARGET_HTM\"\n   \"tcheck %0\"\n   [(set_attr \"type\" \"htm\")\n    (set_attr \"length\" \"4\")])\n \n-(define_insn \"tend\"\n+(define_expand \"tend\"\n+  [(parallel\n+     [(set (match_operand:CC 1 \"cc_reg_operand\" \"=x\")\n+\t   (unspec_volatile:CC [(match_operand 0 \"const_0_to_1_operand\" \"n\")]\n+\t\t\t       UNSPECV_HTM_TEND))\n+      (set (match_dup 2) (unspec:BLK [(match_dup 2)] UNSPEC_HTM_FENCE))])]\n+  \"TARGET_HTM\"\n+{\n+  operands[2] = gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (Pmode));\n+  MEM_VOLATILE_P (operands[2]) = 1;\n+})\n+\n+(define_insn \"*tend\"\n   [(set (match_operand:CC 1 \"cc_reg_operand\" \"=x\")\n \t(unspec_volatile:CC [(match_operand 0 \"const_0_to_1_operand\" \"n\")]\n-\t\t\t    UNSPECV_HTM_TEND))]\n+\t\t\t    UNSPECV_HTM_TEND))\n+   (set (match_operand:BLK 2) (unspec:BLK [(match_dup 2)] UNSPEC_HTM_FENCE))]\n   \"TARGET_HTM\"\n   \"tend. %0\"\n   [(set_attr \"type\" \"htm\")\n    (set_attr \"length\" \"4\")])\n \n-(define_insn \"trechkpt\"\n+(define_expand \"trechkpt\"\n+  [(parallel\n+     [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x\")\n+\t   (unspec_volatile:CC [(const_int 0)] UNSPECV_HTM_TRECHKPT))\n+      (set (match_dup 1) (unspec:BLK [(match_dup 1)] UNSPEC_HTM_FENCE))])]\n+  \"TARGET_HTM\"\n+{\n+  operands[1] = gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (Pmode));\n+  MEM_VOLATILE_P (operands[1]) = 1;\n+})\n+\n+(define_insn \"*trechkpt\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x\")\n-\t(unspec_volatile:CC [(const_int 0)]\n-\t\t\t    UNSPECV_HTM_TRECHKPT))]\n+\t(unspec_volatile:CC [(const_int 0)] UNSPECV_HTM_TRECHKPT))\n+   (set (match_operand:BLK 1) (unspec:BLK [(match_dup 1)] UNSPEC_HTM_FENCE))]\n   \"TARGET_HTM\"\n   \"trechkpt.\"\n   [(set_attr \"type\" \"htm\")\n    (set_attr \"length\" \"4\")])\n \n-(define_insn \"treclaim\"\n+(define_expand \"treclaim\"\n+  [(parallel\n+     [(set (match_operand:CC 1 \"cc_reg_operand\" \"=x\")\n+\t   (unspec_volatile:CC [(match_operand:SI 0 \"gpc_reg_operand\" \"r\")]\n+\t\t\t       UNSPECV_HTM_TRECLAIM))\n+      (set (match_dup 2) (unspec:BLK [(match_dup 2)] UNSPEC_HTM_FENCE))])]\n+  \"TARGET_HTM\"\n+{\n+  operands[2] = gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (Pmode));\n+  MEM_VOLATILE_P (operands[2]) = 1;\n+})\n+\n+(define_insn \"*treclaim\"\n   [(set (match_operand:CC 1 \"cc_reg_operand\" \"=x\")\n \t(unspec_volatile:CC [(match_operand:SI 0 \"gpc_reg_operand\" \"r\")]\n-\t\t\t    UNSPECV_HTM_TRECLAIM))]\n+\t\t\t    UNSPECV_HTM_TRECLAIM))\n+   (set (match_operand:BLK 2) (unspec:BLK [(match_dup 2)] UNSPEC_HTM_FENCE))]\n   \"TARGET_HTM\"\n   \"treclaim. %0\"\n   [(set_attr \"type\" \"htm\")\n    (set_attr \"length\" \"4\")])\n \n-(define_insn \"tsr\"\n+(define_expand \"tsr\"\n+  [(parallel\n+     [(set (match_operand:CC 1 \"cc_reg_operand\" \"=x\")\n+\t   (unspec_volatile:CC [(match_operand 0 \"const_0_to_1_operand\" \"n\")]\n+\t\t\t       UNSPECV_HTM_TSR))\n+      (set (match_dup 2) (unspec:BLK [(match_dup 2)] UNSPEC_HTM_FENCE))])]\n+  \"TARGET_HTM\"\n+{\n+  operands[2] = gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (Pmode));\n+  MEM_VOLATILE_P (operands[2]) = 1;\n+})\n+\n+(define_insn \"*tsr\"\n   [(set (match_operand:CC 1 \"cc_reg_operand\" \"=x\")\n \t(unspec_volatile:CC [(match_operand 0 \"const_0_to_1_operand\" \"n\")]\n-\t\t\t    UNSPECV_HTM_TSR))]\n+\t\t\t    UNSPECV_HTM_TSR))\n+   (set (match_operand:BLK 2) (unspec:BLK [(match_dup 2)] UNSPEC_HTM_FENCE))]\n   \"TARGET_HTM\"\n   \"tsr. %0\"\n   [(set_attr \"type\" \"htm\")\n    (set_attr \"length\" \"4\")])\n \n-(define_insn \"ttest\"\n+(define_expand \"ttest\"\n+  [(parallel\n+     [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x\")\n+\t   (unspec_volatile:CC [(const_int 0)] UNSPECV_HTM_TTEST))\n+      (set (match_dup 1) (unspec:BLK [(match_dup 1)] UNSPEC_HTM_FENCE))])]\n+  \"TARGET_HTM\"\n+{\n+  operands[1] = gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (Pmode));\n+  MEM_VOLATILE_P (operands[1]) = 1;\n+})\n+\n+(define_insn \"*ttest\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x\")\n-\t(unspec_volatile:CC [(const_int 0)]\n-\t\t\t    UNSPECV_HTM_TTEST))]\n+\t(unspec_volatile:CC [(const_int 0)] UNSPECV_HTM_TTEST))\n+   (set (match_operand:BLK 1) (unspec:BLK [(match_dup 1)] UNSPEC_HTM_FENCE))]\n   \"TARGET_HTM\"\n   \"tabortwci. 0,1,0\"\n   [(set_attr \"type\" \"htm\")"}, {"sha": "f8dfa318e4c82146265386967b100da448f02b6d", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c1f41e15229f5c53d9b12fc8790009889935008/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c1f41e15229f5c53d9b12fc8790009889935008/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=4c1f41e15229f5c53d9b12fc8790009889935008", "patch": "@@ -372,7 +372,11 @@ rs6000_target_modify_macros (bool define_p, HOST_WIDE_INT flags,\n   if ((flags & OPTION_MASK_VSX) != 0)\n     rs6000_define_or_undefine_macro (define_p, \"__VSX__\");\n   if ((flags & OPTION_MASK_HTM) != 0)\n-    rs6000_define_or_undefine_macro (define_p, \"__HTM__\");\n+    {\n+      rs6000_define_or_undefine_macro (define_p, \"__HTM__\");\n+      /* Tell the user that our HTM insn patterns act as memory barriers.  */\n+      rs6000_define_or_undefine_macro (define_p, \"__TM_FENCE__\");\n+    }\n   if ((flags & OPTION_MASK_P8_VECTOR) != 0)\n     rs6000_define_or_undefine_macro (define_p, \"__POWER8_VECTOR__\");\n   if ((flags & OPTION_MASK_QUAD_MEMORY) != 0)"}, {"sha": "5def65963a3c29334c516ecd86dd3ebf86f0ba56", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c1f41e15229f5c53d9b12fc8790009889935008/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c1f41e15229f5c53d9b12fc8790009889935008/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=4c1f41e15229f5c53d9b12fc8790009889935008", "patch": "@@ -16092,6 +16092,28 @@ unsigned int __builtin_tresume (void)\n unsigned int __builtin_tsuspend (void)\n @end smallexample\n \n+Note that the semantics of the above HTM builtins are required to mimic\n+the locking semantics used for critical sections.  Builtins that are used\n+to create a new transaction or restart a suspended transaction must have\n+lock acquisition like semantics while those builtins that end or suspend a\n+transaction must have lock release like semantics.  Specifically, this must\n+mimic lock semantics as specified by C++11, for example: Lock acquisition is\n+as-if an execution of __atomic_exchange_n(&globallock,1,__ATOMIC_ACQUIRE)\n+that returns 0, and lock release is as-if an execution of\n+__atomic_store(&globallock,0,__ATOMIC_RELEASE), with globallock being an\n+implicit implementation-defined lock used for all transactions.  The HTM\n+instructions associated with with the builtins inherently provide the\n+correct acquisition and release hardware barriers required.  However,\n+the compiler must also be prohibited from moving loads and stores across\n+the builtins in a way that would violate their semantics.  This has been\n+accomplished by adding memory barriers to the associated HTM instructions\n+(which is a conservative approach to provide acquire and release semantics).\n+Earlier versions of the compiler did not treat the HTM instructions as\n+memory barriers.  A @code{__TM_FENCE__} macro has been added, which can\n+be used to determine whether the current compiler treats HTM instructions\n+as memory barriers or not.  This allows the user to explicitly add memory\n+barriers to their code when using an older version of the compiler.\n+\n The following set of built-in functions are available to gain access\n to the HTM specific special purpose registers.\n "}]}