{"sha": "95ce7613d537f5a3e9e36da0ca6aa752f60da8e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTVjZTc2MTNkNTM3ZjVhM2U5ZTM2ZGEwY2E2YWE3NTJmNjBkYThlMA==", "commit": {"author": {"name": "Chung-Lin Tang", "email": "cltang@gcc.gnu.org", "date": "2014-02-20T16:35:10Z"}, "committer": {"name": "Chung-Lin Tang", "email": "cltang@gcc.gnu.org", "date": "2014-02-20T16:35:10Z"}, "message": "nios2.md (unspec): Add UNSPEC_PIC_GOTOFF_SYM enum.\n\n2014-02-20  Chung-Lin Tang  <cltang@codesourcery.com>\n\t    Sandra Loosemore  <sandra@codesourcery.com>\n\n\tgcc/\n\t* config/nios2/nios2.md (unspec): Add UNSPEC_PIC_GOTOFF_SYM enum.\n\t* config/nios2/nios2.c (nios2_function_profiler):\n\tAdd -fPIC (flag_pic == 2) support.\n\t(nios2_handle_custom_fpu_cfg): Fix warning parameter.\n\t(nios2_large_offset_p): New function.\n\t(nios2_unspec_reloc_p): Move up position, update to use\n\tnios2_large_offset_p.\n\t(nios2_unspec_address): Remove function.\n\t(nios2_unspec_offset): New function.\n\t(nios2_large_got_address): New function.\n\t(nios2_got_address): Add large offset support.\n\t(nios2_legitimize_tls_address): Update usage of removed and new\n\tfunctions.\n\t(nios2_symbol_binds_local_p): New function.\n\t(nios2_load_pic_address): Add -fPIC (flag_pic == 2) support.\n\t(nios2_legitimize_address): Update to use nios2_large_offset_p.\n\t(nios2_emit_move_sequence): Avoid legitimizing (const (unspec ...)).\n\t(nios2_print_operand): Merge H/L processing, add hiadj/lo\n\tprocessing for (const (unspec ...)).\n\t(nios2_unspec_reloc_name): Add UNSPEC_PIC_GOTOFF_SYM case.\n\n\tgcc/testsuite/\n\t* gcc.target/nios2/biggot-1.c: New.\n\t* gcc.target/nios2/biggot-2.c: New.\n\n\tlibgcc/\n\t* config/nios2/t-nios2 (CRTSTUFF_T_CFLAGS): Add -mno-gpopt.\n\t* config/nios2/crti.S: Remove .file directive.\n\t* config/nios2/crtn.S: Likewise.\n\nFrom-SVN: r207965", "tree": {"sha": "b1f600a5eba1093381a8df96df089f1579c35fd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1f600a5eba1093381a8df96df089f1579c35fd6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95ce7613d537f5a3e9e36da0ca6aa752f60da8e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95ce7613d537f5a3e9e36da0ca6aa752f60da8e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95ce7613d537f5a3e9e36da0ca6aa752f60da8e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95ce7613d537f5a3e9e36da0ca6aa752f60da8e0/comments", "author": null, "committer": null, "parents": [{"sha": "4bbfc5fa4d4378ff138290a604f7065b014746bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bbfc5fa4d4378ff138290a604f7065b014746bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bbfc5fa4d4378ff138290a604f7065b014746bc"}], "stats": {"total": 330, "additions": 285, "deletions": 45}, "files": [{"sha": "9333fb6804c70c2b2496c96004f19d1b2b09be6b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95ce7613d537f5a3e9e36da0ca6aa752f60da8e0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95ce7613d537f5a3e9e36da0ca6aa752f60da8e0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=95ce7613d537f5a3e9e36da0ca6aa752f60da8e0", "patch": "@@ -1,3 +1,27 @@\n+2014-02-20  Chung-Lin Tang  <cltang@codesourcery.com>\n+\t    Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* config/nios2/nios2.md (unspec): Add UNSPEC_PIC_GOTOFF_SYM enum.\n+\t* config/nios2/nios2.c (nios2_function_profiler):\n+\tAdd -fPIC (flag_pic == 2) support.\n+\t(nios2_handle_custom_fpu_cfg): Fix warning parameter.\n+\t(nios2_large_offset_p): New function.\n+\t(nios2_unspec_reloc_p): Move up position, update to use\n+\tnios2_large_offset_p.\n+\t(nios2_unspec_address): Remove function.\n+\t(nios2_unspec_offset): New function.\n+\t(nios2_large_got_address): New function.\n+\t(nios2_got_address): Add large offset support.\n+\t(nios2_legitimize_tls_address): Update usage of removed and new\n+\tfunctions.\n+\t(nios2_symbol_binds_local_p): New function.\n+\t(nios2_load_pic_address): Add -fPIC (flag_pic == 2) support.\n+\t(nios2_legitimize_address): Update to use nios2_large_offset_p.\n+\t(nios2_emit_move_sequence): Avoid legitimizing (const (unspec ...)).\n+\t(nios2_print_operand): Merge H/L processing, add hiadj/lo\n+\tprocessing for (const (unspec ...)).\n+\t(nios2_unspec_reloc_name): Add UNSPEC_PIC_GOTOFF_SYM case.\n+\n 2014-02-20  Richard Biener  <rguenther@suse.de>\n \n \t* tree-cfg.c (replace_uses_by): Mark altered BBs before"}, {"sha": "19eedf4bb8c60f044505d950764481b981bad95f", "filename": "gcc/config/nios2/nios2.c", "status": "modified", "additions": 108, "deletions": 37, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95ce7613d537f5a3e9e36da0ca6aa752f60da8e0/gcc%2Fconfig%2Fnios2%2Fnios2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95ce7613d537f5a3e9e36da0ca6aa752f60da8e0/gcc%2Fconfig%2Fnios2%2Fnios2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fnios2.c?ref=95ce7613d537f5a3e9e36da0ca6aa752f60da8e0", "patch": "@@ -664,7 +664,7 @@ void\n nios2_function_profiler (FILE *file, int labelno ATTRIBUTE_UNUSED)\n {\n   fprintf (file, \"\\tmov\\tr8, ra\\n\");\n-  if (flag_pic)\n+  if (flag_pic == 1)\n     {\n       fprintf (file, \"\\tnextpc\\tr2\\n\");\n       fprintf (file, \"\\t1: movhi\\tr3, %%hiadj(_gp_got - 1b)\\n\");\n@@ -673,6 +673,18 @@ nios2_function_profiler (FILE *file, int labelno ATTRIBUTE_UNUSED)\n       fprintf (file, \"\\tldw\\tr2, %%call(_mcount)(r2)\\n\");\n       fprintf (file, \"\\tcallr\\tr2\\n\");\n     }\n+  else if (flag_pic == 2)\n+    {\n+      fprintf (file, \"\\tnextpc\\tr2\\n\");\n+      fprintf (file, \"\\t1: movhi\\tr3, %%hiadj(_gp_got - 1b)\\n\");\n+      fprintf (file, \"\\taddi\\tr3, r3, %%lo(_gp_got - 1b)\\n\");\n+      fprintf (file, \"\\tadd\\tr2, r2, r3\\n\");\n+      fprintf (file, \"\\tmovhi\\tr3, %%call_hiadj(_mcount)\\n\");\n+      fprintf (file, \"\\taddi\\tr3, %%call_lo(_mcount)\\n\");\n+      fprintf (file, \"\\tadd\\tr3, r2, r3\\n\");\n+      fprintf (file, \"\\tldw\\tr2, 0(r3)\\n\");\n+      fprintf (file, \"\\tcallr\\tr2\\n\");\n+    }\n   else\n     fprintf (file, \"\\tcall\\t_mcount\\n\");\n   fprintf (file, \"\\tmov\\tra, r8\\n\");\n@@ -920,7 +932,7 @@ nios2_handle_custom_fpu_cfg (const char *cfgname, const char *endp,\n     }\n   else\n     warning (0, \"ignoring unrecognized switch %<-mcustom-fpu-cfg%> \"\n-\t     \"value %<%s%>\", cfg);    \n+\t     \"value %<%s%>\", cfgname);\n \n   /* Guard against errors in the standard configurations.  */\n   nios2_custom_check_insns ();\n@@ -1116,20 +1128,64 @@ nios2_call_tls_get_addr (rtx ti)\n   return ret;\n }\n \n+/* Return true for large offsets requiring hiadj/lo relocation pairs.  */\n+static bool\n+nios2_large_offset_p (int unspec)\n+{\n+  gcc_assert (nios2_unspec_reloc_name (unspec) != NULL);\n+\n+  if (flag_pic == 2\n+      /* FIXME: TLS GOT offset relocations will eventually also get this\n+\t treatment, after binutils support for those are also completed.  */\n+      && (unspec == UNSPEC_PIC_SYM || unspec == UNSPEC_PIC_CALL_SYM))\n+    return true;\n+\n+  /* 'gotoff' offsets are always hiadj/lo.  */\n+  if (unspec == UNSPEC_PIC_GOTOFF_SYM)\n+    return true;\n+\n+  return false;\n+}\n+\n+/* Return true for conforming unspec relocations.  Also used in\n+   constraints.md and predicates.md.  */\n+bool\n+nios2_unspec_reloc_p (rtx op)\n+{\n+  return (GET_CODE (op) == CONST\n+\t  && GET_CODE (XEXP (op, 0)) == UNSPEC\n+\t  && ! nios2_large_offset_p (XINT (XEXP (op, 0), 1)));\n+}\n+\n+/* Helper to generate unspec constant.  */\n+static rtx\n+nios2_unspec_offset (rtx loc, int unspec)\n+{\n+  return gen_rtx_CONST (Pmode, gen_rtx_UNSPEC (Pmode, gen_rtvec (1, loc),\n+\t\t\t\t\t       unspec));\n+}\n+\n+/* Generate GOT pointer based address with large offset.  */\n static rtx\n-nios2_unspec_address (rtx loc, rtx base_reg, int unspec)\n+nios2_large_got_address (rtx sym, rtx offset)\n {\n-  rtx unspec_offset =\n-    gen_rtx_CONST (Pmode, gen_rtx_UNSPEC (Pmode, gen_rtvec (1, loc),\n-\t\t\t\t\t  unspec));\n-  return gen_rtx_PLUS (Pmode, base_reg, unspec_offset);\n+  rtx addr = gen_reg_rtx (Pmode);\n+  emit_insn (gen_add3_insn (addr, pic_offset_table_rtx,\n+\t\t\t    force_reg (Pmode, offset)));\n+  return addr;\n }\n \n+/* Generate a GOT pointer based address.  */\n static rtx\n nios2_got_address (rtx loc, int unspec)\n {\n+  rtx offset = nios2_unspec_offset (loc, unspec);\n   crtl->uses_pic_offset_table = 1;\n-  return nios2_unspec_address (loc, pic_offset_table_rtx, unspec);\n+\n+  if (nios2_large_offset_p (unspec))\n+    return nios2_large_got_address (loc, offset);\n+\n+  return gen_rtx_PLUS (Pmode, pic_offset_table_rtx, offset);\n }\n \n /* Generate the code to access LOC, a thread local SYMBOL_REF.  The\n@@ -1151,8 +1207,8 @@ nios2_legitimize_tls_address (rtx loc)\n     case TLS_MODEL_LOCAL_DYNAMIC:\n       tmp = gen_reg_rtx (Pmode);\n       emit_move_insn (tmp, nios2_got_address (loc, UNSPEC_ADD_TLS_LDM));\n-      return nios2_unspec_address (loc, nios2_call_tls_get_addr (tmp),\n-\t\t\t\t   UNSPEC_ADD_TLS_LDO);\n+      return gen_rtx_PLUS (Pmode, nios2_call_tls_get_addr (tmp),\n+\t\t\t   nios2_unspec_offset (loc, UNSPEC_ADD_TLS_LDO));\n \n     case TLS_MODEL_INITIAL_EXEC:\n       tmp = gen_reg_rtx (Pmode);\n@@ -1163,8 +1219,8 @@ nios2_legitimize_tls_address (rtx loc)\n \n     case TLS_MODEL_LOCAL_EXEC:\n       tp = gen_rtx_REG (Pmode, TP_REGNO);\n-      return nios2_unspec_address (loc, tp, UNSPEC_ADD_TLS_LE);\n-\n+      return gen_rtx_PLUS (Pmode, tp,\n+\t\t\t   nios2_unspec_offset (loc, UNSPEC_ADD_TLS_LE));\n     default:\n       gcc_unreachable ();\n     }\n@@ -1599,6 +1655,15 @@ nios2_section_type_flags (tree decl, const char *name, int reloc)\n   return flags;\n }\n \n+/* Return true if SYMBOL_REF X binds locally.  */\n+\n+static bool\n+nios2_symbol_binds_local_p (const_rtx x)\n+{\n+  return (SYMBOL_REF_DECL (x)\n+\t  ? targetm.binds_local_p (SYMBOL_REF_DECL (x))\n+\t  : SYMBOL_REF_LOCAL_P (x));\n+}\n \n /* Position independent code related.  */\n \n@@ -1616,8 +1681,13 @@ nios2_load_pic_register (void)\n static rtx\n nios2_load_pic_address (rtx sym, int unspec)\n {\n-  rtx gotaddr = nios2_got_address (sym, unspec);\n-  return gen_const_mem (Pmode, gotaddr);\n+  if (flag_pic == 2\n+      && GET_CODE (sym) == SYMBOL_REF\n+      && nios2_symbol_binds_local_p (sym))\n+    /* Under -fPIC, generate a GOTOFF address for local symbols.  */\n+    return nios2_got_address (sym, UNSPEC_PIC_GOTOFF_SYM);\n+\n+  return gen_const_mem (Pmode, nios2_got_address (sym, unspec));\n }\n \n /* Nonzero if the constant value X is a legitimate general operand\n@@ -1626,6 +1696,11 @@ nios2_load_pic_address (rtx sym, int unspec)\n bool\n nios2_legitimate_pic_operand_p (rtx x)\n {\n+  if (GET_CODE (x) == CONST\n+      && GET_CODE (XEXP (x, 0)) == UNSPEC\n+      && nios2_large_offset_p (XINT (XEXP (x, 0), 1)))\n+    return true;\n+\n   return ! (GET_CODE (x) == SYMBOL_REF\n \t    || GET_CODE (x) == LABEL_REF || GET_CODE (x) == CONST);\n }\n@@ -1701,7 +1776,7 @@ nios2_legitimize_address (rtx x, rtx oldx ATTRIBUTE_UNUSED,\n       rtx unspec, offset, reg = XEXP (x, 0);\n       split_const (XEXP (x, 1), &unspec, &offset);\n       if (GET_CODE (unspec) == UNSPEC\n-\t  && nios2_unspec_reloc_name (XINT (unspec, 1)) != NULL\n+\t  && !nios2_large_offset_p (XINT (unspec, 1))\n \t  && offset != const0_rtx)\n \t{\n \t  unspec = copy_rtx (unspec);\n@@ -1728,7 +1803,8 @@ nios2_emit_move_sequence (rtx *operands, enum machine_mode mode)\n     }\n \n   if (GET_CODE (from) == SYMBOL_REF || GET_CODE (from) == LABEL_REF\n-      || GET_CODE (from) == CONST)\n+      || (GET_CODE (from) == CONST\n+\t  && GET_CODE (XEXP (from, 0)) != UNSPEC))\n     from = nios2_legitimize_constant_address (from);\n \n   operands[0] = to;\n@@ -1845,20 +1921,23 @@ nios2_print_operand (FILE *file, rtx op, int letter)\n           output_addr_const (file, op);\n           return;\n         }\n-      else if (letter == 'H')\n-        {\n-          fprintf (file, \"%%hiadj(\");\n-          output_addr_const (file, op);\n-          fprintf (file, \")\");\n-          return;\n-        }\n-      else if (letter == 'L')\n-        {\n-          fprintf (file, \"%%lo(\");\n+      else if (letter == 'H' || letter == 'L')\n+\t{\n+\t  fprintf (file, \"%%\");\n+\t  if (GET_CODE (op) == CONST\n+\t      && GET_CODE (XEXP (op, 0)) == UNSPEC)\n+\t    {\n+\t      rtx unspec = XEXP (op, 0);\n+\t      int unspec_reloc = XINT (unspec, 1);\n+\t      gcc_assert (nios2_large_offset_p (unspec_reloc));\n+\t      fprintf (file, \"%s_\", nios2_unspec_reloc_name (unspec_reloc));\n+\t      op = XVECEXP (unspec, 0, 0);\n+\t    }\n+          fprintf (file, letter == 'H' ? \"hiadj(\" : \"lo(\");\n           output_addr_const (file, op);\n           fprintf (file, \")\");\n           return;\n-        }\n+\t}\n       break;\n \n     case SUBREG:\n@@ -1910,6 +1989,8 @@ nios2_unspec_reloc_name (int unspec)\n       return \"got\";\n     case UNSPEC_PIC_CALL_SYM:\n       return \"call\";\n+    case UNSPEC_PIC_GOTOFF_SYM:\n+      return \"gotoff\";\n     case UNSPEC_LOAD_TLS_IE:\n       return \"tls_ie\";\n     case UNSPEC_ADD_TLS_LE:\n@@ -1925,16 +2006,6 @@ nios2_unspec_reloc_name (int unspec)\n     }\n }\n \n-/* Return true for conforming unspec relocations.  Also used in\n-   constraints.md and predicates.md.  */\n-bool\n-nios2_unspec_reloc_p (rtx op)\n-{\n-  return (GET_CODE (op) == CONST\n-\t  && GET_CODE (XEXP (op, 0)) == UNSPEC\n-\t  && nios2_unspec_reloc_name (XINT (XEXP (op, 0), 1)) != NULL);\n-}\n-\n /* Implement TARGET_ASM_OUTPUT_ADDR_CONST_EXTRA.  */\n static bool\n nios2_output_addr_const_extra (FILE *file, rtx op)"}, {"sha": "b5b599ece334487e4a3c1a6b8e32b079420d0c53", "filename": "gcc/config/nios2/nios2.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95ce7613d537f5a3e9e36da0ca6aa752f60da8e0/gcc%2Fconfig%2Fnios2%2Fnios2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95ce7613d537f5a3e9e36da0ca6aa752f60da8e0/gcc%2Fconfig%2Fnios2%2Fnios2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fnios2.md?ref=95ce7613d537f5a3e9e36da0ca6aa752f60da8e0", "patch": "@@ -73,6 +73,7 @@\n   UNSPEC_LOAD_GOT_REGISTER\n   UNSPEC_PIC_SYM\n   UNSPEC_PIC_CALL_SYM\n+  UNSPEC_PIC_GOTOFF_SYM\n   UNSPEC_TLS\n   UNSPEC_TLS_LDM\n   UNSPEC_LOAD_TLS_IE"}, {"sha": "256c885ad9665dcc28db6ae4e32e105169a7a42f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95ce7613d537f5a3e9e36da0ca6aa752f60da8e0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95ce7613d537f5a3e9e36da0ca6aa752f60da8e0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=95ce7613d537f5a3e9e36da0ca6aa752f60da8e0", "patch": "@@ -1,3 +1,8 @@\n+2014-02-20  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* gcc.target/nios2/biggot-1.c: New.\n+\t* gcc.target/nios2/biggot-2.c: New.\n+\n 2014-02-20  Martin Jambor  <mjambor@suse.cz>\n \n \tPR ipa/55260"}, {"sha": "49b14ed0c28d868bdf1d3474e9f1dfa9a3bc4cde", "filename": "gcc/testsuite/gcc.target/nios2/biggot-1.c", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95ce7613d537f5a3e9e36da0ca6aa752f60da8e0/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fbiggot-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95ce7613d537f5a3e9e36da0ca6aa752f60da8e0/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fbiggot-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fbiggot-1.c?ref=95ce7613d537f5a3e9e36da0ca6aa752f60da8e0", "patch": "@@ -0,0 +1,67 @@\n+/* Check that the GOT pointer is being initialized correctly to allow\n+   access to the full 64K maximum GOT size for -fpic, rather than only 32K\n+   (which would happen if the GOT pointer points to the base of the GOT,\n+   as the GOT16 and CALL16 relocations are signed).  */\n+\n+/* { dg-options \"-fpic\" } */\n+/* { dg-do run { target nios2-*-linux-gnu } } */\n+\n+extern void abort (void);\n+\n+static int n = 0;\n+\n+void\n+doit (int m)\n+{\n+  if (m != n)\n+    abort ();\n+  n++;\n+}\n+\n+#define X(N) \\\n+  void f_##N (void) { doit (0x##N); }\n+\n+#define F(N) f_##N ();\n+\n+#define A(N) \\\n+  X(N##0) X(N##1) X(N##2) X(N##3) X(N##4) X(N##5) X(N##6) X(N##7) \\\n+  X(N##8) X(N##9) X(N##a) X(N##b) X(N##c) X(N##d) X(N##e) X(N##f) \\\n+  void f_##N (void) { \\\n+    F(N##0) F(N##1) F(N##2) F(N##3) F(N##4) F(N##5) F(N##6) F(N##7) \\\n+    F(N##8) F(N##9) F(N##a) F(N##b) F(N##c) F(N##d) F(N##e) F(N##f) \\\n+    }\n+\n+#define B(N) \\\n+  A(N##0) A(N##1) A(N##2) A(N##3) A(N##4) A(N##5) A(N##6) A(N##7) \\\n+  A(N##8) A(N##9) A(N##a) A(N##b) A(N##c) A(N##d) A(N##e) A(N##f) \\\n+  void f_##N (void) { \\\n+    F(N##0) F(N##1) F(N##2) F(N##3) F(N##4) F(N##5) F(N##6) F(N##7) \\\n+    F(N##8) F(N##9) F(N##a) F(N##b) F(N##c) F(N##d) F(N##e) F(N##f) \\\n+    }\n+\n+#define C(N) \\\n+  B(N##0) B(N##1) B(N##2) B(N##3) B(N##4) B(N##5) B(N##6) B(N##7) \\\n+  B(N##8) B(N##9) B(N##a) B(N##b) B(N##c) B(N##d) B(N##e) B(N##f) \\\n+  void f_##N (void) { \\\n+    F(N##0) F(N##1) F(N##2) F(N##3) F(N##4) F(N##5) F(N##6) F(N##7) \\\n+    F(N##8) F(N##9) F(N##a) F(N##b) F(N##c) F(N##d) F(N##e) F(N##f) \\\n+    }\n+\n+#define D(N) \\\n+  C(N##0) C(N##1) C(N##2) \\\n+  void f_##N (void) { \\\n+    F(N##0) F(N##1) F(N##2) \\\n+    }\n+\n+/* This defines 16x16x16x3 leaf functions, requiring something over\n+   48K of GOT space overall.  */\n+D(0)\n+\n+int\n+main (void)\n+{\n+  f_0 ();\n+  if (n != 16*16*16*3)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "7a34d3f6dec5e68be484fcc41403d97dbfa42c1f", "filename": "gcc/testsuite/gcc.target/nios2/biggot-2.c", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95ce7613d537f5a3e9e36da0ca6aa752f60da8e0/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fbiggot-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95ce7613d537f5a3e9e36da0ca6aa752f60da8e0/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fbiggot-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fbiggot-2.c?ref=95ce7613d537f5a3e9e36da0ca6aa752f60da8e0", "patch": "@@ -0,0 +1,68 @@\n+/* Check that a program that requires large-GOT support builds and\n+   executes without error.  This program defines a very large number\n+   of leaf functions; compiled with -fPIC, they all require GOT\n+   entries, which will overflow the range addressible by 16-bit -fpic\n+   offsets by about a factor of 2.  */\n+\n+/* { dg-options \"-fPIC\" } */\n+/* { dg-do run { target nios2-*-linux-gnu } } */\n+\n+extern void abort (void);\n+\n+static int n = 0;\n+\n+void\n+doit (int m)\n+{\n+  if (m != n)\n+    abort ();\n+  n++;\n+}\n+\n+#define X(N) \\\n+  void f_##N (void) { doit (0x##N); }\n+\n+#define F(N) f_##N ();\n+\n+#define A(N) \\\n+  X(N##0) X(N##1) X(N##2) X(N##3) X(N##4) X(N##5) X(N##6) X(N##7) \\\n+  X(N##8) X(N##9) X(N##a) X(N##b) X(N##c) X(N##d) X(N##e) X(N##f) \\\n+  void f_##N (void) { \\\n+    F(N##0) F(N##1) F(N##2) F(N##3) F(N##4) F(N##5) F(N##6) F(N##7) \\\n+    F(N##8) F(N##9) F(N##a) F(N##b) F(N##c) F(N##d) F(N##e) F(N##f) \\\n+    }\n+\n+#define B(N) \\\n+  A(N##0) A(N##1) A(N##2) A(N##3) A(N##4) A(N##5) A(N##6) A(N##7) \\\n+  A(N##8) A(N##9) A(N##a) A(N##b) A(N##c) A(N##d) A(N##e) A(N##f) \\\n+  void f_##N (void) { \\\n+    F(N##0) F(N##1) F(N##2) F(N##3) F(N##4) F(N##5) F(N##6) F(N##7) \\\n+    F(N##8) F(N##9) F(N##a) F(N##b) F(N##c) F(N##d) F(N##e) F(N##f) \\\n+    }\n+\n+#define C(N) \\\n+  B(N##0) B(N##1) B(N##2) B(N##3) B(N##4) B(N##5) B(N##6) B(N##7) \\\n+  B(N##8) B(N##9) B(N##a) B(N##b) B(N##c) B(N##d) B(N##e) B(N##f) \\\n+  void f_##N (void) { \\\n+    F(N##0) F(N##1) F(N##2) F(N##3) F(N##4) F(N##5) F(N##6) F(N##7) \\\n+    F(N##8) F(N##9) F(N##a) F(N##b) F(N##c) F(N##d) F(N##e) F(N##f) \\\n+    }\n+\n+#define D(N) \\\n+  C(N##0) C(N##1) C(N##2) C(N##3) C(N##4) C(N##5) C(N##6) C(N##7) \\\n+  void f_##N (void) { \\\n+    F(N##0) F(N##1) F(N##2) F(N##3) F(N##4) F(N##5) F(N##6) F(N##7) \\\n+    }\n+\n+/* This defines 16x16x16x8 leaf functions, requiring something over\n+   128K of GOT space overall.  */\n+D(0)\n+\n+int\n+main (void)\n+{\n+  f_0 ();\n+  if (n != 16*16*16*8)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "1dae0204892067999732bc4f5d4a7918c52ace62", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95ce7613d537f5a3e9e36da0ca6aa752f60da8e0/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95ce7613d537f5a3e9e36da0ca6aa752f60da8e0/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=95ce7613d537f5a3e9e36da0ca6aa752f60da8e0", "patch": "@@ -1,3 +1,10 @@\n+2014-02-20  Sandra Loosemore  <sandra@codesourcery.com>\n+\t    Chung-Lin Tang  <cltang@codesourcery.com>\n+\n+\t* config/nios2/t-nios2 (CRTSTUFF_T_CFLAGS): Add -mno-gpopt.\n+\t* config/nios2/crti.S: Remove .file directive.\n+\t* config/nios2/crtn.S: Likewise.\n+\n 2014-02-18  Kai Tietz  <ktietz@redhat.com>\n \tJonathan Schleifer  <js@webkeks.org>\n "}, {"sha": "f21346ce1778ba7219ef27e4728c836f58e7b0c6", "filename": "libgcc/config/nios2/crti.S", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95ce7613d537f5a3e9e36da0ca6aa752f60da8e0/libgcc%2Fconfig%2Fnios2%2Fcrti.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95ce7613d537f5a3e9e36da0ca6aa752f60da8e0/libgcc%2Fconfig%2Fnios2%2Fcrti.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnios2%2Fcrti.S?ref=95ce7613d537f5a3e9e36da0ca6aa752f60da8e0", "patch": "@@ -36,8 +36,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n    See crt0.s for the code that calls init and fini.  */\n \n-\t.file\t\"crti.asm\"\n-\n \t.section\t\".init\"\n \t.align 2\n \t.global\t_init"}, {"sha": "54c9cb638cf0d57cf5b0800c6a3325b808e94f0a", "filename": "libgcc/config/nios2/crtn.S", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95ce7613d537f5a3e9e36da0ca6aa752f60da8e0/libgcc%2Fconfig%2Fnios2%2Fcrtn.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95ce7613d537f5a3e9e36da0ca6aa752f60da8e0/libgcc%2Fconfig%2Fnios2%2Fcrtn.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnios2%2Fcrtn.S?ref=95ce7613d537f5a3e9e36da0ca6aa752f60da8e0", "patch": "@@ -23,12 +23,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n \n /* This file just makes sure that the .fini and .init sections do in\n-fact return.  Users may put any desired instructions in those sections.\n-This file is the last thing linked into any executable.\n-*/\t\n-\t.file\t\"crtn.asm\"\n-\n-\n+   fact return.  Users may put any desired instructions in those sections.\n+   This file is the last thing linked into any executable.  */\t\n \n \t.section\t\".init\"\n \tldw\tra, 44(sp)"}, {"sha": "7a81a7f021f208bd6afacc1c6dc55c0d5b478a00", "filename": "libgcc/config/nios2/t-nios2", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95ce7613d537f5a3e9e36da0ca6aa752f60da8e0/libgcc%2Fconfig%2Fnios2%2Ft-nios2", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95ce7613d537f5a3e9e36da0ca6aa752f60da8e0/libgcc%2Fconfig%2Fnios2%2Ft-nios2", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnios2%2Ft-nios2?ref=95ce7613d537f5a3e9e36da0ca6aa752f60da8e0", "patch": "@@ -3,3 +3,6 @@ LIB2ADD += $(srcdir)/config/nios2/lib2-divmod.c \\\n \t   $(srcdir)/config/nios2/lib2-divtable.c \\\n \t   $(srcdir)/config/nios2/lib2-mul.c \\\n \t   $(srcdir)/config/nios2/tramp.c\n+\n+# Disable use of GP-relative addressing in startup code.\n+CRTSTUFF_T_CFLAGS += -mno-gpopt"}]}