{"sha": "ad2bd0ad0413c2448fee0d4a062dd52ca8a75e8c", "node_id": "C_kwDOANBUbNoAKGFkMmJkMGFkMDQxM2MyNDQ4ZmVlMGQ0YTA2MmRkNTJjYThhNzVlOGM", "commit": {"author": {"name": "Vladimir N. Makarov", "email": "vmakarov@redhat.com", "date": "2023-02-08T13:25:10Z"}, "committer": {"name": "Vladimir N. Makarov", "email": "vmakarov@redhat.com", "date": "2023-02-08T13:28:32Z"}, "message": "Revert \"RA: Implement reuse of equivalent memory for caller saves optimization\"\n\nThis reverts commit f661c0bb6371f355966a67b5ce71398e80792948.", "tree": {"sha": "ec82f063017dbca9c43afbdc41ac26977d8a107f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec82f063017dbca9c43afbdc41ac26977d8a107f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad2bd0ad0413c2448fee0d4a062dd52ca8a75e8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad2bd0ad0413c2448fee0d4a062dd52ca8a75e8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad2bd0ad0413c2448fee0d4a062dd52ca8a75e8c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad2bd0ad0413c2448fee0d4a062dd52ca8a75e8c/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a58a4a57f9a4445f93b495f776f45e1118777e88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a58a4a57f9a4445f93b495f776f45e1118777e88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a58a4a57f9a4445f93b495f776f45e1118777e88"}], "stats": {"total": 54, "additions": 10, "deletions": 44}, "files": [{"sha": "66df03e8a596a0b35856c210590f299525108018", "filename": "gcc/ira.cc", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad2bd0ad0413c2448fee0d4a062dd52ca8a75e8c/gcc%2Fira.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad2bd0ad0413c2448fee0d4a062dd52ca8a75e8c/gcc%2Fira.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.cc?ref=ad2bd0ad0413c2448fee0d4a062dd52ca8a75e8c", "patch": "@@ -3070,8 +3070,6 @@ validate_equiv_mem_from_store (rtx dest, const_rtx set ATTRIBUTE_UNUSED,\n     info->equiv_mem_modified = true;\n }\n \n-static int equiv_init_varies_p (rtx x);\n-\n enum valid_equiv { valid_none, valid_combine, valid_reload };\n \n /* Verify that no store between START and the death of REG invalidates\n@@ -3115,8 +3113,7 @@ validate_equiv_mem (rtx_insn *start, rtx reg, rtx memref)\n \t     been changed and all hell breaks loose.  */\n \t  ret = valid_combine;\n \t  if (!MEM_READONLY_P (memref)\n-\t      && (!RTL_CONST_OR_PURE_CALL_P (insn)\n-\t\t  || equiv_init_varies_p (XEXP (memref, 0))))\n+\t      && !RTL_CONST_OR_PURE_CALL_P (insn))\n \t    return valid_none;\n \t}\n \n@@ -3769,18 +3766,7 @@ update_equiv_regs (void)\n \t\t{\n \t\t  replacement = copy_rtx (SET_SRC (set));\n \t\t  if (validity == valid_reload)\n-\t\t    {\n-\t\t      note = set_unique_reg_note (insn, REG_EQUIV, replacement);\n-\t\t    }\n-\t\t  else\n-\t\t    {\n-\t\t      /* We still can use this equivalence for caller save\n-\t\t\t optimization in LRA.  Mark this.  */\n-\t\t      ira_reg_equiv[regno].caller_save_p = true;\n-\t\t      ira_reg_equiv[regno].init_insns\n-\t\t\t= gen_rtx_INSN_LIST (VOIDmode, insn,\n-\t\t\t\t\t     ira_reg_equiv[regno].init_insns);\n-\t\t    }\n+\t\t    note = set_unique_reg_note (insn, REG_EQUIV, replacement);\n \t\t}\n \t    }\n \n@@ -4170,7 +4156,7 @@ setup_reg_equiv (void)\n \t\t   legitimate, we ignore such REG_EQUIV notes.  */\n \t\tif (memory_operand (x, VOIDmode))\n \t\t  {\n-\t\t    ira_reg_equiv[i].defined_p = !ira_reg_equiv[i].caller_save_p;\n+\t\t    ira_reg_equiv[i].defined_p = true;\n \t\t    ira_reg_equiv[i].memory = x;\n \t\t    continue;\n \t\t  }"}, {"sha": "58b50dbe8a228e86c8b59565edf2aed563b89fd9", "filename": "gcc/ira.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad2bd0ad0413c2448fee0d4a062dd52ca8a75e8c/gcc%2Fira.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad2bd0ad0413c2448fee0d4a062dd52ca8a75e8c/gcc%2Fira.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.h?ref=ad2bd0ad0413c2448fee0d4a062dd52ca8a75e8c", "patch": "@@ -175,11 +175,8 @@ extern struct target_ira *this_target_ira;\n /* Major structure describing equivalence info for a pseudo.  */\n struct ira_reg_equiv_s\n {\n-  /* True if we can use this as a general equivalence.  */\n+  /* True if we can use this equivalence.  */\n   bool defined_p;\n-  /* True if we can use this equivalence only for caller save/restore\n-     location.  */\n-  bool caller_save_p;\n   /* True if the usage of the equivalence is profitable.  */\n   bool profitable_p;\n   /* Equiv. memory, constant, invariant, and initializing insns of"}, {"sha": "7bffbc07ee2331cd7bd6ad3d075e0c6a3c83a00b", "filename": "gcc/lra-constraints.cc", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad2bd0ad0413c2448fee0d4a062dd52ca8a75e8c/gcc%2Flra-constraints.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad2bd0ad0413c2448fee0d4a062dd52ca8a75e8c/gcc%2Flra-constraints.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.cc?ref=ad2bd0ad0413c2448fee0d4a062dd52ca8a75e8c", "patch": "@@ -5771,17 +5771,14 @@ choose_split_class (enum reg_class allocno_class,\n   return best_cl;\n }\n \n-/* Copy any equivalence information from ORIGINAL_REGNO to NEW_REGNO.  It only\n-   makes sense to call this function if NEW_REGNO is always equal to\n-   ORIGINAL_REGNO.  Set up defined_p flag when caller_save_p flag is set up and\n-   CALL_SAVE_P is true.  */\n+/* Copy any equivalence information from ORIGINAL_REGNO to NEW_REGNO.\n+   It only makes sense to call this function if NEW_REGNO is always\n+   equal to ORIGINAL_REGNO.  */\n \n static void\n-lra_copy_reg_equiv (unsigned int new_regno, unsigned int original_regno,\n-\t\t    bool call_save_p)\n+lra_copy_reg_equiv (unsigned int new_regno, unsigned int original_regno)\n {\n-  if (!ira_reg_equiv[original_regno].defined_p\n-      && !(call_save_p && ira_reg_equiv[original_regno].caller_save_p))\n+  if (!ira_reg_equiv[original_regno].defined_p)\n     return;\n \n   ira_expand_reg_equiv ();\n@@ -5961,7 +5958,7 @@ split_reg (bool before_p, int original_regno, rtx_insn *insn,\n      rematerializing the original value instead of spilling to the stack.  */\n   if (!HARD_REGISTER_NUM_P (original_regno)\n       && mode == PSEUDO_REGNO_MODE (original_regno))\n-    lra_copy_reg_equiv (new_regno, original_regno, call_save_p);\n+    lra_copy_reg_equiv (new_regno, original_regno);\n   lra_reg_info[new_regno].restore_rtx = regno_reg_rtx[original_regno];\n   bitmap_set_bit (&lra_split_regs, new_regno);\n   if (to != NULL)"}, {"sha": "72b257d42ee2fb8c43d23ab23396e7f8e4d94770", "filename": "gcc/testsuite/gcc.target/i386/pr103541.c", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a58a4a57f9a4445f93b495f776f45e1118777e88/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103541.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a58a4a57f9a4445f93b495f776f45e1118777e88/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103541.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103541.c?ref=a58a4a57f9a4445f93b495f776f45e1118777e88", "patch": "@@ -1,14 +0,0 @@\n-/* PR rtl-optimization/103541 */\n-/* { dg-do compile  { target x86_64-*-* } } */\n-/* { dg-options \"-O2\" } */\n-\n-float a;\n-__attribute__((const)) float foo (float);\n-\n-float\n-test()\n-{\n-        return a + foo(a) + a;\n-}\n-\n-/* { dg-final { scan-assembler-not \"\\\\\\(%rsp\\\\\\)\" } } */"}]}