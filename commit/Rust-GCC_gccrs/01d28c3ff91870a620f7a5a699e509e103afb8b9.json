{"sha": "01d28c3ff91870a620f7a5a699e509e103afb8b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDFkMjhjM2ZmOTE4NzBhNjIwZjdhNWE2OTllNTA5ZTEwM2FmYjhiOQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2003-10-02T17:43:57Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2003-10-02T17:43:57Z"}, "message": "correct comment\n\nFrom-SVN: r72042", "tree": {"sha": "3e11da9d3659c56f005fc12ca40aed3ad4d80760", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e11da9d3659c56f005fc12ca40aed3ad4d80760"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01d28c3ff91870a620f7a5a699e509e103afb8b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01d28c3ff91870a620f7a5a699e509e103afb8b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01d28c3ff91870a620f7a5a699e509e103afb8b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01d28c3ff91870a620f7a5a699e509e103afb8b9/comments", "author": null, "committer": null, "parents": [{"sha": "30ee56e13d0726eaee83d5c66283561f82fd7fd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30ee56e13d0726eaee83d5c66283561f82fd7fd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30ee56e13d0726eaee83d5c66283561f82fd7fd0"}], "stats": {"total": 16, "additions": 10, "deletions": 6}, "files": [{"sha": "797c3f5cd971532bc081661974e7fcb4ebd0d897", "filename": "gcc/alias.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01d28c3ff91870a620f7a5a699e509e103afb8b9/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01d28c3ff91870a620f7a5a699e509e103afb8b9/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=01d28c3ff91870a620f7a5a699e509e103afb8b9", "patch": "@@ -48,7 +48,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n    different alias sets cannot alias each other, with one important\n    exception.  Consider something like:\n \n-     struct S {int i; double d; };\n+     struct S { int i; double d; };\n \n    a store to an `S' can alias something of either type `int' or type\n    `double'.  (However, a store to an `int' cannot alias a `double'\n@@ -604,11 +604,15 @@ new_alias_set (void)\n     return 0;\n }\n \n-/* Indicate that things in SUBSET can alias things in SUPERSET, but\n-   not vice versa.  For example, in C, a store to an `int' can alias a\n-   structure containing an `int', but not vice versa.  Here, the\n-   structure would be the SUPERSET and `int' the SUBSET.  This\n-   function should be called only once per SUPERSET/SUBSET pair.\n+/* Indicate that things in SUBSET can alias things in SUPERSET, but that\n+   not everything that aliases SUPERSET also aliases SUBSET.  For example,\n+   in C, a store to an `int' can alias a load of a structure containing an\n+   `int', and vice versa.  But it can't alias a load of a 'double' member\n+   of the same structure.  Here, the structure would be the SUPERSET and\n+   `int' the SUBSET.  This relationship is also described in the comment at\n+   the beginning of this file.\n+\n+   This function should be called only once per SUPERSET/SUBSET pair.\n \n    It is illegal for SUPERSET to be zero; everything is implicitly a\n    subset of alias set zero.  */"}]}