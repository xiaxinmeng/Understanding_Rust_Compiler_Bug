{"sha": "e519d2e8199746e9d2b6ef70de55f7331df5bc47", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTUxOWQyZTgxOTk3NDZlOWQyYjZlZjcwZGU1NWY3MzMxZGY1YmM0Nw==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2018-02-11T18:22:24Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2018-02-11T18:22:24Z"}, "message": "re PR fortran/84074 (Incorrect indexing of array when actual argument is an array expression and dummy is polymorphic)\n\n2018-02-11  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/84074\n\t* trans-expr.c (gfc_conv_derived_to_class): Set the use_offset\n\tflag. If the is a vector subscript or the expression is not a\n\tvariable, make the descriptor one-based.\n\n2018-02-11  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/84074\n\t* gfortran.dg/type_to_class_5.f03: New test.\n\nFrom-SVN: r257564", "tree": {"sha": "bcd2076be4ee7e218ac1d59b0804b3e1d8ccbbac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bcd2076be4ee7e218ac1d59b0804b3e1d8ccbbac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e519d2e8199746e9d2b6ef70de55f7331df5bc47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e519d2e8199746e9d2b6ef70de55f7331df5bc47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e519d2e8199746e9d2b6ef70de55f7331df5bc47", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e519d2e8199746e9d2b6ef70de55f7331df5bc47/comments", "author": null, "committer": null, "parents": [{"sha": "e094c0bfe982c21cd39741efde87591b59af8a55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e094c0bfe982c21cd39741efde87591b59af8a55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e094c0bfe982c21cd39741efde87591b59af8a55"}], "stats": {"total": 68, "additions": 67, "deletions": 1}, "files": [{"sha": "bebf155bfd0a1183210fe0b63ad7d8dfe00096f6", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e519d2e8199746e9d2b6ef70de55f7331df5bc47/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e519d2e8199746e9d2b6ef70de55f7331df5bc47/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e519d2e8199746e9d2b6ef70de55f7331df5bc47", "patch": "@@ -1,3 +1,10 @@\n+2018-02-11  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/84074\n+\t* trans-expr.c (gfc_conv_derived_to_class): Set the use_offset\n+\tflag. If the is a vector subscript or the expression is not a\n+\tvariable, make the descriptor one-based.\n+\n 2018-02-10  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/84141"}, {"sha": "a4185820531f518a0ccd34d69c516eac696685e3", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e519d2e8199746e9d2b6ef70de55f7331df5bc47/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e519d2e8199746e9d2b6ef70de55f7331df5bc47/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=e519d2e8199746e9d2b6ef70de55f7331df5bc47", "patch": "@@ -547,6 +547,7 @@ gfc_conv_derived_to_class (gfc_se *parmse, gfc_expr *e,\n   tree ctree;\n   tree var;\n   tree tmp;\n+  int dim;\n \n   /* The derived type needs to be converted to a temporary\n      CLASS object.  */\n@@ -636,10 +637,34 @@ gfc_conv_derived_to_class (gfc_se *parmse, gfc_expr *e,\n \t{\n \t  stmtblock_t block;\n \t  gfc_init_block (&block);\n+\t  gfc_ref *ref;\n \n \t  parmse->ss = ss;\n+\t  parmse->use_offset = 1;\n \t  gfc_conv_expr_descriptor (parmse, e);\n \n+\t  /* Detect any array references with vector subscripts.  */\n+\t  for (ref = e->ref; ref; ref = ref->next)\n+\t    if (ref->type == REF_ARRAY\n+\t\t&& ref->u.ar.type != AR_ELEMENT\n+\t\t&& ref->u.ar.type != AR_FULL)\n+\t      {\n+\t\tfor (dim = 0; dim < ref->u.ar.dimen; dim++)\n+\t\t  if (ref->u.ar.dimen_type[dim] == DIMEN_VECTOR)\n+\t\t    break;\n+\t\tif (dim < ref->u.ar.dimen)\n+\t\t  break;\n+\t      }\n+\n+\t  /* Array references with vector subscripts and non-variable expressions\n+\t     need be coverted to a one-based descriptor.  */\n+\t  if (ref || e->expr_type != EXPR_VARIABLE)\n+\t    {\n+\t      for (dim = 0; dim < e->rank; ++dim)\n+\t\tgfc_conv_shift_descriptor_lbound (&block, parmse->expr, dim,\n+\t\t\t\t\t\t  gfc_index_one_node);\n+\t    }\n+\n \t  if (e->rank != class_ts.u.derived->components->as->rank)\n \t    {\n \t      gcc_assert (class_ts.u.derived->components->as->type\n@@ -10105,7 +10130,7 @@ gfc_trans_assignment_1 (gfc_expr * expr1, gfc_expr * expr2, bool init_flag,\n \t\t\t\t   &expr1->where, msg);\n \t}\n \n-      /* Deallocate the lhs parameterized components if required.  */ \n+      /* Deallocate the lhs parameterized components if required.  */\n       if (dealloc && expr2->expr_type == EXPR_FUNCTION\n \t  && !expr1->symtree->n.sym->attr.associate_var)\n \t{"}, {"sha": "72b4e36fd16e159cf053fe73dad87d4bb825d8fd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e519d2e8199746e9d2b6ef70de55f7331df5bc47/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e519d2e8199746e9d2b6ef70de55f7331df5bc47/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e519d2e8199746e9d2b6ef70de55f7331df5bc47", "patch": "@@ -1,3 +1,8 @@\n+2018-02-11  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/84074\n+\t* gfortran.dg/type_to_class_5.f03: New test.\n+\n 2018-02-10  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/56691"}, {"sha": "29a4b409198215857d0c64bff65414394daeae19", "filename": "gcc/testsuite/gfortran.dg/type_to_class_5.f03", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e519d2e8199746e9d2b6ef70de55f7331df5bc47/gcc%2Ftestsuite%2Fgfortran.dg%2Ftype_to_class_5.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e519d2e8199746e9d2b6ef70de55f7331df5bc47/gcc%2Ftestsuite%2Fgfortran.dg%2Ftype_to_class_5.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftype_to_class_5.f03?ref=e519d2e8199746e9d2b6ef70de55f7331df5bc47", "patch": "@@ -0,0 +1,29 @@\n+! { dg-do run }\n+!\n+! Test the fix for PR84074\n+!\n+! Contributed by Vladimir Fuka  <vladimir.fuka@gmail.com>\n+!\n+  type :: t\n+      integer :: n\n+  end type\n+\n+  type(t) :: array(4) = [t(1),t(2),t(3),t(4)]\n+\n+  call sub(array((/3,1/)), [3,1,0,0]) ! Does not increment any elements of 'array'.\n+  call sub(array(1:3:2), [1,3,0,0])\n+  call sub(array(3:1:-2), [4,2,0,0])\n+  call sub(array, [3,2,5,4])          ! Elements 1 and 3 should have been incremented twice.\n+\n+contains\n+\n+  subroutine sub(a, iarray)\n+    class(t) :: a(:)\n+    integer :: iarray(4)\n+    integer :: i\n+    do i=1,size(a)\n+        if (a(i)%n .ne. iarray(i)) call abort\n+        a(i)%n = a(i)%n+1\n+    enddo\n+  end subroutine\n+end program"}]}