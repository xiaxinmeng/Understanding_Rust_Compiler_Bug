{"sha": "bff4b641c72b8be9b21fceb589f10ee337e55cfb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmZmNGI2NDFjNzJiOGJlOWIyMWZjZWI1ODlmMTBlZTMzN2U1NWNmYg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-10-21T21:20:41Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-10-21T21:20:41Z"}, "message": "(push_float_handler, pop_float_handler): New functions.\n\nFrom-SVN: r2543", "tree": {"sha": "d5ade745455c4864c8ad5c7e50aa3df0ed3aab01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5ade745455c4864c8ad5c7e50aa3df0ed3aab01"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bff4b641c72b8be9b21fceb589f10ee337e55cfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bff4b641c72b8be9b21fceb589f10ee337e55cfb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bff4b641c72b8be9b21fceb589f10ee337e55cfb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bff4b641c72b8be9b21fceb589f10ee337e55cfb/comments", "author": null, "committer": null, "parents": [{"sha": "210d97af17e50d50b7d55c2c49bfbbe2cdf4a561", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/210d97af17e50d50b7d55c2c49bfbbe2cdf4a561", "html_url": "https://github.com/Rust-GCC/gccrs/commit/210d97af17e50d50b7d55c2c49bfbbe2cdf4a561"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "e92b7c80915978a81721febe8ff901014a7c6ad8", "filename": "gcc/toplev.c", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bff4b641c72b8be9b21fceb589f10ee337e55cfb/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bff4b641c72b8be9b21fceb589f10ee337e55cfb/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=bff4b641c72b8be9b21fceb589f10ee337e55cfb", "patch": "@@ -1360,6 +1360,36 @@ set_float_handler (handler)\n     bcopy (handler, float_handler, sizeof (float_handler));\n }\n \n+/* Specify, in HANDLER, where to longjmp to when a floating arithmetic\n+   error happens, pushing the previous specification into OLD_HANDLER.\n+   Return an indication of whether there was a previous handler in effect.  */\n+\n+int\n+push_float_handler (handler, old_handler)\n+     jmp_buf handler;\n+{\n+  int was_handled = float_handled;\n+\n+  float_handled = 1;\n+  if (was_handled)\n+    bcopy (float_handler, old_handler, sizeof (float_handler));\n+  bcopy (handler, float_handler, sizeof (float_handler));\n+  return was_handled;\n+}\n+\n+/* Restore the previous specification of whether and where to longjmp to\n+   when a floating arithmetic error happens.  */\n+\n+void\n+pop_float_handler (handled, handler)\n+     int handled;\n+     jmp_buf handler;\n+{\n+  float_handled = handled;\n+  if (handled)\n+    bcopy (handler, float_handler, sizeof (float_handler));\n+}\n+\n /* Signals actually come here.  */\n \n static void"}]}