{"sha": "dc7c0c4dfaba39b8f9532e29e2467e4f2c16b815", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGM3YzBjNGRmYWJhMzliOGY5NTMyZTI5ZTI0NjdlNGYyYzE2YjgxNQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-05-28T13:48:18Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-05-28T13:48:18Z"}, "message": "* exp_util.adb: Minor reformatting\n\nFrom-SVN: r136089", "tree": {"sha": "74d45b83d3de0649454f93431867cc80e2e4bacf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74d45b83d3de0649454f93431867cc80e2e4bacf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc7c0c4dfaba39b8f9532e29e2467e4f2c16b815", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc7c0c4dfaba39b8f9532e29e2467e4f2c16b815", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc7c0c4dfaba39b8f9532e29e2467e4f2c16b815", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc7c0c4dfaba39b8f9532e29e2467e4f2c16b815/comments", "author": null, "committer": null, "parents": [{"sha": "3294a391cbf1f4a58dbcc8e438fd195cb004a4ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3294a391cbf1f4a58dbcc8e438fd195cb004a4ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3294a391cbf1f4a58dbcc8e438fd195cb004a4ad"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "d41a6bc383c1ba2a22ee50eeabeec2032c573d04", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc7c0c4dfaba39b8f9532e29e2467e4f2c16b815/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc7c0c4dfaba39b8f9532e29e2467e4f2c16b815/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=dc7c0c4dfaba39b8f9532e29e2467e4f2c16b815", "patch": "@@ -908,9 +908,9 @@ package body Exp_Util is\n \n    function Component_May_Be_Bit_Aligned (Comp : Entity_Id) return Boolean is\n    begin\n-      --  If no component clause, then everything is fine, since the\n-      --  back end never bit-misaligns by default, even if there is\n-      --  a pragma Packed for the record.\n+      --  If no component clause, then everything is fine, since the back end\n+      --  never bit-misaligns by default, even if there is a pragma Packed for\n+      --  the record.\n \n       if No (Component_Clause (Comp)) then\n          return False;\n@@ -933,8 +933,8 @@ package body Exp_Util is\n       then\n          return False;\n \n-      --  Otherwise if the component is not byte aligned, we\n-      --  know we have the nasty unaligned case.\n+      --  Otherwise if the component is not byte aligned, we know we have the\n+      --  nasty unaligned case.\n \n       elsif Normalized_First_Bit (Comp) /= Uint_0\n         or else Esize (Comp) mod System_Storage_Unit /= Uint_0\n@@ -4039,8 +4039,8 @@ package body Exp_Util is\n \n             begin\n                --  If we know the component size and it is less than 64, then\n-               --  we are definitely OK. The back end always does assignment\n-               --  of misaligned small objects correctly.\n+               --  we are definitely OK. The back end always does assignment of\n+               --  misaligned small objects correctly.\n \n                if Known_Static_Component_Size (Ptyp)\n                  and then Component_Size (Ptyp) <= 64"}]}