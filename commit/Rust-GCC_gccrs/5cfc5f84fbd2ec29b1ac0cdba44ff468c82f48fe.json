{"sha": "5cfc5f84fbd2ec29b1ac0cdba44ff468c82f48fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWNmYzVmODRmYmQyZWMyOWIxYWMwY2RiYTQ0ZmY0NjhjODJmNDhmZQ==", "commit": {"author": {"name": "Daniel Jacobowitz", "email": "drow@mvista.com", "date": "2004-01-18T22:37:29Z"}, "committer": {"name": "Daniel Jacobowitz", "email": "drow@gcc.gnu.org", "date": "2004-01-18T22:37:29Z"}, "message": "final.c (final_scan_insn): Make non-static again.\n\n\t* final.c (final_scan_insn): Make non-static again.\n\t* output.h (final_scan_insn): Re-add prototype.\n\t* config/arc/arc.c (arc_output_function_epilogue): Add NULL\n\tto final_scan_insn call.\n\t* config/cris/cris.c (cris_target_asm_function_epilogue): Likewise.\n\t* config/mips/mips.c (mips_output_conditional_branch): Likewise.\n\t* config/pa/pa.c (output_lbranch, output_call): Likewise.\n\t* config/sh/sh.c (print_slot): Likewise.\n\t* config/sparc/sparc.c (sparc_nonflat_function_epilogue): Likewise.\n\t(output_sibcall, sparc_flat_function_epilogue): Likewise.\n\nFrom-SVN: r76117", "tree": {"sha": "9c3f19b6c5d9ff03f645e3e26296a283983d4440", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c3f19b6c5d9ff03f645e3e26296a283983d4440"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5cfc5f84fbd2ec29b1ac0cdba44ff468c82f48fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cfc5f84fbd2ec29b1ac0cdba44ff468c82f48fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cfc5f84fbd2ec29b1ac0cdba44ff468c82f48fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cfc5f84fbd2ec29b1ac0cdba44ff468c82f48fe/comments", "author": null, "committer": null, "parents": [{"sha": "3348b696a815eb5ddbde242b582ad43aeef6caad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3348b696a815eb5ddbde242b582ad43aeef6caad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3348b696a815eb5ddbde242b582ad43aeef6caad"}], "stats": {"total": 64, "additions": 42, "deletions": 22}, "files": [{"sha": "566043acea7c4e4bad69d27091c43b2178574d83", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cfc5f84fbd2ec29b1ac0cdba44ff468c82f48fe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cfc5f84fbd2ec29b1ac0cdba44ff468c82f48fe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5cfc5f84fbd2ec29b1ac0cdba44ff468c82f48fe", "patch": "@@ -1,3 +1,16 @@\n+2004-01-18  Daniel Jacobowitz  <drow@mvista.com>\n+\n+\t* final.c (final_scan_insn): Make non-static again.\n+\t* output.h (final_scan_insn): Re-add prototype.\n+\t* config/arc/arc.c (arc_output_function_epilogue): Add NULL\n+\tto final_scan_insn call.\n+\t* config/cris/cris.c (cris_target_asm_function_epilogue): Likewise.\n+\t* config/mips/mips.c (mips_output_conditional_branch): Likewise.\n+\t* config/pa/pa.c (output_lbranch, output_call): Likewise.\n+\t* config/sh/sh.c (print_slot): Likewise.\n+\t* config/sparc/sparc.c (sparc_nonflat_function_epilogue): Likewise.\n+\t(output_sibcall, sparc_flat_function_epilogue): Likewise.\n+\n 2004-01-18  Jan Hubicka  <jh@suse.cz>\n \n \t* basic-block.h (try_redirect_by_replacing_jump): Declare."}, {"sha": "ad26913217e5ddcd5263fd63c4acabb52abb68b1", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cfc5f84fbd2ec29b1ac0cdba44ff468c82f48fe/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cfc5f84fbd2ec29b1ac0cdba44ff468c82f48fe/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=5cfc5f84fbd2ec29b1ac0cdba44ff468c82f48fe", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines used for code generation on the Argonaut ARC cpu.\n-   Copyright (C) 1994, 1995, 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+   Copyright (C) 1994, 1995, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -1303,7 +1303,7 @@ arc_output_function_epilogue (FILE *file, HOST_WIDE_INT size)\n       /* ??? If stack intactness is important, always emit now.  */\n       if (MUST_SAVE_RETURN_ADDR && epilogue_delay != NULL_RTX)\n \t{\n-\t  final_scan_insn (XEXP (epilogue_delay, 0), file, 1, -2, 1);\n+\t  final_scan_insn (XEXP (epilogue_delay, 0), file, 1, -2, 1, NULL);\n \t  epilogue_delay = NULL_RTX;\n \t}\n \n@@ -1335,7 +1335,8 @@ arc_output_function_epilogue (FILE *file, HOST_WIDE_INT size)\n \t{\n \t  if (epilogue_delay)\n \t    {\n-\t      final_scan_insn (XEXP (epilogue_delay, 0), file, 1, -2, 1);\n+\t      final_scan_insn (XEXP (epilogue_delay, 0), file, 1, -2, 1,\n+\t\t\t       NULL);\n \t    }\n \t}\n \n@@ -1360,7 +1361,7 @@ arc_output_function_epilogue (FILE *file, HOST_WIDE_INT size)\n \t    abort ();\n \t  if (restored < size)\n \t    abort ();\n-\t  final_scan_insn (XEXP (epilogue_delay, 0), file, 1, -2, 1);\n+\t  final_scan_insn (XEXP (epilogue_delay, 0), file, 1, -2, 1, NULL);\n \t}\n       else if (frame_pointer_needed && !fp_restored_p)\n \t{"}, {"sha": "f7e3d29d79a962a4d47213399bf5ea817aa6de67", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cfc5f84fbd2ec29b1ac0cdba44ff468c82f48fe/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cfc5f84fbd2ec29b1ac0cdba44ff468c82f48fe/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=5cfc5f84fbd2ec29b1ac0cdba44ff468c82f48fe", "patch": "@@ -1,5 +1,6 @@\n /* Definitions for GCC.  Part of the machine description for CRIS.\n-   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004\n+   Free Software Foundation, Inc.\n    Contributed by Axis Communications.  Written by Hans-Peter Nilsson.\n \n This file is part of GCC.\n@@ -1259,7 +1260,7 @@ cris_target_asm_function_epilogue (FILE *file, HOST_WIDE_INT size)\n \n       /* Output the delay-slot-insn the mandated way.  */\n       final_scan_insn (XEXP (current_function_epilogue_delay_list, 0),\n-\t\t       file, 1, -2, 1);\n+\t\t       file, 1, -2, 1, NULL);\n     }\n   else if (file)\n     {"}, {"sha": "0cef0f32cf0596da5dda71d5a4b3825d2f637963", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cfc5f84fbd2ec29b1ac0cdba44ff468c82f48fe/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cfc5f84fbd2ec29b1ac0cdba44ff468c82f48fe/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=5cfc5f84fbd2ec29b1ac0cdba44ff468c82f48fe", "patch": "@@ -9285,7 +9285,7 @@ mips_output_conditional_branch (rtx insn, rtx *operands, int two_operands_p,\n             /* Output delay slot instruction.  */\n             rtx insn = final_sequence;\n             final_scan_insn (XVECEXP (insn, 0, 1), asm_out_file,\n-                             optimize, 0, 1);\n+                             optimize, 0, 1, NULL);\n             INSN_DELETED_P (XVECEXP (insn, 0, 1)) = 1;\n           }\n \telse\n@@ -9304,7 +9304,7 @@ mips_output_conditional_branch (rtx insn, rtx *operands, int two_operands_p,\n             /* Output delay slot instruction.  */\n             rtx insn = final_sequence;\n             final_scan_insn (XVECEXP (insn, 0, 1), asm_out_file,\n-                             optimize, 0, 1);\n+                             optimize, 0, 1, NULL);\n             INSN_DELETED_P (XVECEXP (insn, 0, 1)) = 1;\n           }\n \telse"}, {"sha": "bcb8329770c665523d2aca9bef8735f800251894", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cfc5f84fbd2ec29b1ac0cdba44ff468c82f48fe/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cfc5f84fbd2ec29b1ac0cdba44ff468c82f48fe/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=5cfc5f84fbd2ec29b1ac0cdba44ff468c82f48fe", "patch": "@@ -1,6 +1,6 @@\n /* Subroutines for insn-output.c for HPPA.\n    Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001,\n-   2002, 2003 Free Software Foundation, Inc.\n+   2002, 2003, 2004 Free Software Foundation, Inc.\n    Contributed by Tim Moore (moore@cs.utah.edu), based on sparc.c\n \n This file is part of GCC.\n@@ -6125,7 +6125,7 @@ output_lbranch (rtx dest, rtx insn)\n \tabort ();\n \n       final_scan_insn (NEXT_INSN (insn), asm_out_file,\n-\t\t       optimize, 0, 0);\n+\t\t       optimize, 0, 0, NULL);\n \n       /* Now delete the delay insn.  */\n       PUT_CODE (NEXT_INSN (insn), NOTE);\n@@ -7129,7 +7129,7 @@ output_call (rtx insn, rtx call_dest, int sibcall)\n \t      && !sibcall)\n \t    {\n \t      final_scan_insn (NEXT_INSN (insn), asm_out_file,\n-\t\t\t       optimize, 0, 0);\n+\t\t\t       optimize, 0, 0, NULL);\n \n \t      /* Now delete the delay insn.  */\n \t      PUT_CODE (NEXT_INSN (insn), NOTE);\n@@ -7177,7 +7177,8 @@ output_call (rtx insn, rtx call_dest, int sibcall)\n \t      /* A non-jump insn in the delay slot.  By definition we can\n \t\t emit this insn before the call (and in fact before argument\n \t\t relocating.  */\n-\t      final_scan_insn (NEXT_INSN (insn), asm_out_file, optimize, 0, 0);\n+\t      final_scan_insn (NEXT_INSN (insn), asm_out_file, optimize, 0, 0,\n+\t\t\t       NULL);\n \n \t      /* Now delete the delay insn.  */\n \t      PUT_CODE (NEXT_INSN (insn), NOTE);"}, {"sha": "db67097be3e1d7c97e3a8b18dc2de89d2c1354b9", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cfc5f84fbd2ec29b1ac0cdba44ff468c82f48fe/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cfc5f84fbd2ec29b1ac0cdba44ff468c82f48fe/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=5cfc5f84fbd2ec29b1ac0cdba44ff468c82f48fe", "patch": "@@ -1096,7 +1096,7 @@ output_movedouble (rtx insn ATTRIBUTE_UNUSED, rtx operands[],\n static void\n print_slot (rtx insn)\n {\n-  final_scan_insn (XVECEXP (insn, 0, 1), asm_out_file, optimize, 0, 1);\n+  final_scan_insn (XVECEXP (insn, 0, 1), asm_out_file, optimize, 0, 1, NULL);\n \n   INSN_DELETED_P (XVECEXP (insn, 0, 1)) = 1;\n }"}, {"sha": "7e008de1c0d42bf910e875dda676d4e00b75767a", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cfc5f84fbd2ec29b1ac0cdba44ff468c82f48fe/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cfc5f84fbd2ec29b1ac0cdba44ff468c82f48fe/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=5cfc5f84fbd2ec29b1ac0cdba44ff468c82f48fe", "patch": "@@ -1,6 +1,6 @@\n /* Subroutines for insn-output.c for SPARC.\n    Copyright (C) 1987, 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n    Contributed by Michael Tiemann (tiemann@cygnus.com)\n    64-bit SPARC-V9 support by Michael Tiemann, Jim Wilson, and Doug Evans,\n    at Cygnus Support.\n@@ -4539,7 +4539,7 @@ sparc_nonflat_function_epilogue (FILE *file,\n \t\t     ? \"\\treturn\\t%i7+12\\n\"\n \t\t     : \"\\treturn\\t%i7+8\\n\", file);\n \t      final_scan_insn (XEXP (current_function_epilogue_delay_list, 0),\n-\t\t\t       file, 1, 0, 0);\n+\t\t\t       file, 1, 0, 0, NULL);\n \t    }\n \t  else\n \t    {\n@@ -4564,7 +4564,7 @@ sparc_nonflat_function_epilogue (FILE *file,\n \t      insn = emit_jump_insn (insn);\n \n \t      sparc_emitting_epilogue = true;\n-\t      final_scan_insn (insn, file, 1, 0, 1);\n+\t      final_scan_insn (insn, file, 1, 0, 1, NULL);\n \t      sparc_emitting_epilogue = false;\n \t    }\n \t}\n@@ -4586,7 +4586,7 @@ sparc_nonflat_function_epilogue (FILE *file,\n \tabort ();\n       fprintf (file, \"\\t%s\\n\", ret);\n       final_scan_insn (XEXP (current_function_epilogue_delay_list, 0),\n-\t\t       file, 1, 0, 1);\n+\t\t       file, 1, 0, 1, NULL);\n     }\n   /* Output 'nop' instead of 'sub %sp,-0,%sp' when no frame, so as to\n \t avoid generating confusing assembly language output.  */\n@@ -4629,7 +4629,7 @@ output_sibcall (rtx insn, rtx call_operand)\n \t  if (! delay)\n \t    abort ();\n \n-\t  final_scan_insn (delay, asm_out_file, 1, 0, 1);\n+\t  final_scan_insn (delay, asm_out_file, 1, 0, 1, NULL);\n \t  PATTERN (delay) = gen_blockage ();\n \t  INSN_CODE (delay) = -1;\n \t  delay_slot = 0;\n@@ -4659,7 +4659,7 @@ output_sibcall (rtx insn, rtx call_operand)\n \t  if (! delay)\n \t    abort ();\n \n-\t  final_scan_insn (delay, asm_out_file, 1, 0, 1);\n+\t  final_scan_insn (delay, asm_out_file, 1, 0, 1, NULL);\n \t  PATTERN (delay) = gen_blockage ();\n \t  INSN_CODE (delay) = -1;\n \t  delay_slot = 0;\n@@ -7916,7 +7916,7 @@ sparc_flat_function_epilogue (FILE *file, HOST_WIDE_INT size)\n \t{\n \t  if (size)\n \t    abort ();\n-\t  final_scan_insn (XEXP (epilogue_delay, 0), file, 1, -2, 1);\n+\t  final_scan_insn (XEXP (epilogue_delay, 0), file, 1, -2, 1, NULL);\n \t}\n \n       else if (size > 4096)"}, {"sha": "dd5b64ec53f56206acc4d2b5a47f9e0a2b852716", "filename": "gcc/final.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cfc5f84fbd2ec29b1ac0cdba44ff468c82f48fe/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cfc5f84fbd2ec29b1ac0cdba44ff468c82f48fe/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=5cfc5f84fbd2ec29b1ac0cdba44ff468c82f48fe", "patch": "@@ -235,7 +235,6 @@ static int final_addr_vec_align (rtx);\n #ifdef HAVE_ATTR_length\n static int align_fuzz (rtx, rtx, int, unsigned);\n #endif\n-static rtx final_scan_insn (rtx, FILE *, int, int, int, int *);\n \f\n /* Initialize data in final at the beginning of a compilation.  */\n \n@@ -1638,7 +1637,7 @@ output_alternate_entry_point (FILE *file, rtx insn)\n    at the beginning of the second basic block, whichever comes\n    first.  */\n \n-static rtx\n+rtx\n final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n \t\t int prescan, int nopeepholes ATTRIBUTE_UNUSED,\n \t\t int *seen)"}, {"sha": "05a3743726f5057e1ce21d7a4a3bb4dfc25ad60a", "filename": "gcc/output.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cfc5f84fbd2ec29b1ac0cdba44ff468c82f48fe/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cfc5f84fbd2ec29b1ac0cdba44ff468c82f48fe/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=5cfc5f84fbd2ec29b1ac0cdba44ff468c82f48fe", "patch": "@@ -68,6 +68,11 @@ extern void final_end_function (void);\n /* Output assembler code for some insns: all or part of a function.  */\n extern void final (rtx, FILE *, int, int);\n \n+/* The final scan for one insn, INSN.  Args are same as in `final', except\n+   that INSN is the insn being scanned.  Value returned is the next insn to\n+   be scanned.  */\n+extern rtx final_scan_insn (rtx, FILE *, int, int, int, int *);\n+\n /* Replace a SUBREG with a REG or a MEM, based on the thing it is a\n    subreg of.  */\n extern rtx alter_subreg (rtx *);"}]}