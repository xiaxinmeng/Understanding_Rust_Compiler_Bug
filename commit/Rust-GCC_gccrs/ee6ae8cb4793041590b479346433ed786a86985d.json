{"sha": "ee6ae8cb4793041590b479346433ed786a86985d", "node_id": "C_kwDOANBUbNoAKGVlNmFlOGNiNDc5MzA0MTU5MGI0NzkzNDY0MzNlZDc4NmE4Njk4NWQ", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-03-30T07:34:12Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-03-30T07:34:12Z"}, "message": "c++: Avoid informs without a warning [PR109278]\n\nOn the following testcase we emit notes in\nmaybe_inform_about_fndecl_for_bogus_argument_init\ndespite no warning/error being printed before it.\nThis is for the extended floating point type conversions where pedwarn\nis used, and complained is used there for 2 different purposes,\none is whether an unspecific error should be emitted if we haven't\ncomplained otherwise, and one whether\nmaybe_inform_about_fndecl_for_bogus_argument_init should be called.\nFor the 2 pedwarns, currently it sets complained to true regardless of\nwhether pedwarn succeeded, which results in the undesirable notes printed\nwith -w.  If complained is initialized to result of pedwarn, we would\nemit an error later on.\n\nSo, the following patch makes complained a tristate, the additional\nerror isn't printed if complained != 0, and\nmaybe_inform_about_fndecl_for_bogus_argument_init is called only if\ncomplained == 1, so if pedwarn returns false, we can use complained = -1\nto tell later code not to emit an error and not to call\nmaybe_inform_about_fndecl_for_bogus_argument_init.\n\n2023-03-30  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/109278\n\t* call.cc (convert_like_internal): If pedwarn for extended float\n\ttype conversions doesn't report anything, avoid calling\n\tmaybe_inform_about_fndecl_for_bogus_argument_init.\n\n\t* g++.dg/cpp23/ext-floating15.C: New test.", "tree": {"sha": "6d5a5f67283834fd69fce18ac4e092e04b6ae164", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d5a5f67283834fd69fce18ac4e092e04b6ae164"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee6ae8cb4793041590b479346433ed786a86985d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee6ae8cb4793041590b479346433ed786a86985d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee6ae8cb4793041590b479346433ed786a86985d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee6ae8cb4793041590b479346433ed786a86985d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7df3bea9cf1e42d44ec02b548fc43dd214eda79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7df3bea9cf1e42d44ec02b548fc43dd214eda79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7df3bea9cf1e42d44ec02b548fc43dd214eda79"}], "stats": {"total": 31, "additions": 23, "deletions": 8}, "files": [{"sha": "cdd7701b9e77c25e7b04cf3dfb15a5698e19b860", "filename": "gcc/cp/call.cc", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee6ae8cb4793041590b479346433ed786a86985d/gcc%2Fcp%2Fcall.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee6ae8cb4793041590b479346433ed786a86985d/gcc%2Fcp%2Fcall.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.cc?ref=ee6ae8cb4793041590b479346433ed786a86985d", "patch": "@@ -8296,7 +8296,7 @@ convert_like_internal (conversion *convs, tree expr, tree fn, int argnum,\n \t  || SCALAR_TYPE_P (totype))\n       && convs->kind != ck_base)\n     {\n-      bool complained = false;\n+      int complained = 0;\n       conversion *t = convs;\n \n       /* Give a helpful error if this is bad because of excess braces.  */\n@@ -8328,14 +8328,18 @@ convert_like_internal (conversion *convs, tree expr, tree fn, int argnum,\n \t\t\t\t\t\t\t    totype))\n \t  {\n \t  case 2:\n-\t    pedwarn (loc, 0, \"converting to %qH from %qI with greater \"\n-\t\t\t     \"conversion rank\", totype, TREE_TYPE (expr));\n-\t    complained = true;\n+\t    if (pedwarn (loc, 0, \"converting to %qH from %qI with greater \"\n+\t\t\t\t \"conversion rank\", totype, TREE_TYPE (expr)))\n+\t      complained = 1;\n+\t    else if (!complained)\n+\t      complained = -1;\n \t    break;\n \t  case 3:\n-\t    pedwarn (loc, 0, \"converting to %qH from %qI with unordered \"\n-\t\t\t     \"conversion ranks\", totype, TREE_TYPE (expr));\n-\t    complained = true;\n+\t    if (pedwarn (loc, 0, \"converting to %qH from %qI with unordered \"\n+\t\t\t\t \"conversion ranks\", totype, TREE_TYPE (expr)))\n+\t      complained = 1;\n+\t    else if (!complained)\n+\t      complained = -1;\n \t    break;\n \t  default:\n \t    break;\n@@ -8389,7 +8393,7 @@ convert_like_internal (conversion *convs, tree expr, tree fn, int argnum,\n \t\t\t\t  \"invalid conversion from %qH to %qI\",\n \t\t\t\t  TREE_TYPE (expr), totype);\n \t}\n-      if (complained)\n+      if (complained == 1)\n \tmaybe_inform_about_fndecl_for_bogus_argument_init (fn, argnum);\n \n       return cp_convert (totype, expr, complain);"}, {"sha": "316dd5abacdfad5e8c4420d67b4199dbf87089e5", "filename": "gcc/testsuite/g++.dg/cpp23/ext-floating15.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee6ae8cb4793041590b479346433ed786a86985d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fext-floating15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee6ae8cb4793041590b479346433ed786a86985d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fext-floating15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fext-floating15.C?ref=ee6ae8cb4793041590b479346433ed786a86985d", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/109278\n+// { dg-do compile { target float128 } }\n+// { dg-options \"-w\" }\n+\n+void foo (long double);\t// { dg-bogus \"initializing argument 1 of\" }\n+\n+void\n+bar (_Float128 x)\n+{\n+  foo (x);\n+}"}]}