{"sha": "0bc64a6ca5b518419c91637f88635c95e3c3acb9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGJjNjRhNmNhNWI1MTg0MTljOTE2MzdmODg2MzVjOTVlM2MzYWNiOQ==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2015-06-24T08:22:35Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2015-06-24T08:22:35Z"}, "message": "[PATCH][testsuite] Fix TORTURE_OPTIONS overriding\n\ngcc/testsuite/\n\n        * lib/c-torture.exp: Don't call check_effective_target_lto\n\tbefore setting up environment correctly.\n        * lib/gcc-dg.exp: Likewise, and protect\n\tgcc_force_conventional_output.\n\nFrom-SVN: r224878", "tree": {"sha": "86ffe52d7f1e5979abc347f106b741bad76784db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86ffe52d7f1e5979abc347f106b741bad76784db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0bc64a6ca5b518419c91637f88635c95e3c3acb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bc64a6ca5b518419c91637f88635c95e3c3acb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bc64a6ca5b518419c91637f88635c95e3c3acb9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bc64a6ca5b518419c91637f88635c95e3c3acb9/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f303100baaf48a54f07e9abd25ac37ebc95b641e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f303100baaf48a54f07e9abd25ac37ebc95b641e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f303100baaf48a54f07e9abd25ac37ebc95b641e"}], "stats": {"total": 61, "additions": 34, "deletions": 27}, "files": [{"sha": "ee58cdc36a2b9e47bf8f8102a5d35f6f2de2f301", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bc64a6ca5b518419c91637f88635c95e3c3acb9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bc64a6ca5b518419c91637f88635c95e3c3acb9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0bc64a6ca5b518419c91637f88635c95e3c3acb9", "patch": "@@ -1,3 +1,10 @@\n+2015-06-24  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+        * lib/c-torture.exp: Don't call check_effective_target_lto\n+\tbefore setting up environment correctly.\n+        * lib/gcc-dg.exp: Likewise, and protect\n+\tgcc_force_conventional_output.\n+\n 2015-06-24  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \tPR rtl-optimization/66306"}, {"sha": "c88c439a5127b8ecf1a48db3c6cb2243d888cddd", "filename": "gcc/testsuite/lib/c-torture.exp", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bc64a6ca5b518419c91637f88635c95e3c3acb9/gcc%2Ftestsuite%2Flib%2Fc-torture.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bc64a6ca5b518419c91637f88635c95e3c3acb9/gcc%2Ftestsuite%2Flib%2Fc-torture.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fc-torture.exp?ref=0bc64a6ca5b518419c91637f88635c95e3c3acb9", "patch": "@@ -21,6 +21,20 @@ load_lib file-format.exp\n load_lib target-libpath.exp\n load_lib target-utils.exp\n \n+global GCC_UNDER_TEST\n+if ![info exists GCC_UNDER_TEST] {\n+    set GCC_UNDER_TEST \"[find_gcc]\"\n+}\n+\n+global orig_environment_saved\n+\n+# This file may be sourced, so don't override environment settings\n+# that have been previously setup.\n+if { $orig_environment_saved == 0 } {\n+    append ld_library_path [gcc-set-multilib-library-path $GCC_UNDER_TEST]\n+    set_ld_library_path_env_vars\n+}\n+\n # The default option list can be overridden by\n # TORTURE_OPTIONS=\"{ list1 } ... { listN }\"\n \n@@ -68,20 +82,6 @@ if [info exists ADDITIONAL_TORTURE_OPTIONS] {\n \t[concat $C_TORTURE_OPTIONS $ADDITIONAL_TORTURE_OPTIONS]\n }\n \n-global GCC_UNDER_TEST\n-if ![info exists GCC_UNDER_TEST] {\n-    set GCC_UNDER_TEST \"[find_gcc]\"\n-}\n-\n-global orig_environment_saved\n-\n-# This file may be sourced, so don't override environment settings\n-# that have been previously setup.\n-if { $orig_environment_saved == 0 } {\n-    append ld_library_path [gcc-set-multilib-library-path $GCC_UNDER_TEST]\n-    set_ld_library_path_env_vars\n-}\n-\n #\n # c-torture-compile -- runs the Tege C-torture test\n #"}, {"sha": "d463f81cebc6febb3cc438124b3c23986ba0a3f5", "filename": "gcc/testsuite/lib/gcc-dg.exp", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bc64a6ca5b518419c91637f88635c95e3c3acb9/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bc64a6ca5b518419c91637f88635c95e3c3acb9/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp?ref=0bc64a6ca5b518419c91637f88635c95e3c3acb9", "patch": "@@ -46,6 +46,19 @@ if ![info exists GCC_UNDER_TEST] {\n     set GCC_UNDER_TEST \"[find_gcc]\"\n }\n \n+# This file may be sourced, so don't override environment settings\n+# that have been previously setup.\n+if { $orig_environment_saved == 0 } {\n+    append ld_library_path [gcc-set-multilib-library-path $GCC_UNDER_TEST]\n+    set_ld_library_path_env_vars\n+}\n+\n+# Some torture-options cause intermediate code output, unusable for\n+# testing using e.g. scan-assembler.  In this variable are the options\n+# how to force it, when needed.\n+global gcc_force_conventional_output\n+set gcc_force_conventional_output \"\"\n+\n set LTO_TORTURE_OPTIONS \"\"\n if [info exists TORTURE_OPTIONS] {\n     set DG_TORTURE_OPTIONS $TORTURE_OPTIONS\n@@ -92,19 +105,6 @@ if [info exists ADDITIONAL_TORTURE_OPTIONS] {\n \n global orig_environment_saved\n \n-# This file may be sourced, so don't override environment settings\n-# that have been previously setup.\n-if { $orig_environment_saved == 0 } {\n-    append ld_library_path [gcc-set-multilib-library-path $GCC_UNDER_TEST]\n-    set_ld_library_path_env_vars\n-}\n-\n-# Some torture-options cause intermediate code output, unusable for\n-# testing using e.g. scan-assembler.  In this variable are the options\n-# how to force it, when needed.\n-global gcc_force_conventional_output\n-set gcc_force_conventional_output \"\"\n-\n # Deduce generated files from tool flags, return finalcode string\n proc schedule-cleanups { opts } {\n     global additional_sources"}]}