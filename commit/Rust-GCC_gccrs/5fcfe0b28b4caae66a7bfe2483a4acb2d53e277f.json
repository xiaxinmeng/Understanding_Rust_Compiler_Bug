{"sha": "5fcfe0b28b4caae66a7bfe2483a4acb2d53e277f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWZjZmUwYjI4YjRjYWFlNjZhN2JmZTI0ODNhNGFjYjJkNTNlMjc3Zg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-02-16T15:39:30Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-02-16T15:39:30Z"}, "message": "re PR tree-optimization/19967 (built-in folding causes excess diagnostics)\n\n\tPR tree-optimization/19967\n\t* builtins.c (expand_builtin_strstr, expand_builtin_strpbrk,\n\texpand_builtin_strchr, expand_builtin_strrchr): Take a new\n\targument TYPE.  Adjust calls to fold_builtin_XXX.\n\t(expand_builtin, fold_builtin_1): Adjust calls to\n\texpand_builtin_XXX.\n\t(fold_builtin_strchr, fold_builtin_strpbrk,\n\tfold_builtin_strstr, fold_builtin_strrchr): Convert the folded\n\tresult to a requested type TYPE.\n\n\t* testsuite/gcc.dg/pr19967.c: New.\n\nFrom-SVN: r95109", "tree": {"sha": "b3f943a21acf3c16b1ab05adf9fa63d55455d1cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3f943a21acf3c16b1ab05adf9fa63d55455d1cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5fcfe0b28b4caae66a7bfe2483a4acb2d53e277f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fcfe0b28b4caae66a7bfe2483a4acb2d53e277f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fcfe0b28b4caae66a7bfe2483a4acb2d53e277f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fcfe0b28b4caae66a7bfe2483a4acb2d53e277f/comments", "author": null, "committer": null, "parents": [{"sha": "de332a85f8a94ce9e59060d4d24fa6c080a863df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de332a85f8a94ce9e59060d4d24fa6c080a863df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de332a85f8a94ce9e59060d4d24fa6c080a863df"}], "stats": {"total": 121, "additions": 85, "deletions": 36}, "files": [{"sha": "3e927dfef96ca1841307735cdc7b20f98c49c6e7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fcfe0b28b4caae66a7bfe2483a4acb2d53e277f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fcfe0b28b4caae66a7bfe2483a4acb2d53e277f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5fcfe0b28b4caae66a7bfe2483a4acb2d53e277f", "patch": "@@ -5,6 +5,16 @@\n \tfind_basic_blocks.\n \t* config/sh/sh.c (sh_output_mi_thunk): Likewise.\n \n+\tPR tree-optimization/19967\n+\t* builtins.c (expand_builtin_strstr, expand_builtin_strpbrk,\n+\texpand_builtin_strchr, expand_builtin_strrchr): Take a new\n+\targument TYPE.  Adjust calls to fold_builtin_XXX.\n+\t(expand_builtin, fold_builtin_1): Adjust calls to\n+\texpand_builtin_XXX.\n+\t(fold_builtin_strchr, fold_builtin_strpbrk,\n+\tfold_builtin_strstr, fold_builtin_strrchr): Convert the folded\n+\tresult to a requested type TYPE.\n+\n 2005-02-16  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/19857"}, {"sha": "e39801969f8ed3d5ff74c9b6da98f26735a21439", "filename": "gcc/builtins.c", "status": "modified", "additions": 44, "deletions": 36, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fcfe0b28b4caae66a7bfe2483a4acb2d53e277f/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fcfe0b28b4caae66a7bfe2483a4acb2d53e277f/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=5fcfe0b28b4caae66a7bfe2483a4acb2d53e277f", "patch": "@@ -124,10 +124,10 @@ static rtx builtin_memset_gen_str (void *, HOST_WIDE_INT, enum machine_mode);\n static rtx expand_builtin_memset (tree, rtx, enum machine_mode);\n static rtx expand_builtin_bzero (tree);\n static rtx expand_builtin_strlen (tree, rtx, enum machine_mode);\n-static rtx expand_builtin_strstr (tree, rtx, enum machine_mode);\n-static rtx expand_builtin_strpbrk (tree, rtx, enum machine_mode);\n-static rtx expand_builtin_strchr (tree, rtx, enum machine_mode);\n-static rtx expand_builtin_strrchr (tree, rtx, enum machine_mode);\n+static rtx expand_builtin_strstr (tree, tree, rtx, enum machine_mode);\n+static rtx expand_builtin_strpbrk (tree, tree, rtx, enum machine_mode);\n+static rtx expand_builtin_strchr (tree, tree, rtx, enum machine_mode);\n+static rtx expand_builtin_strrchr (tree, tree, rtx, enum machine_mode);\n static rtx expand_builtin_alloca (tree, rtx);\n static rtx expand_builtin_unop (enum machine_mode, tree, rtx, rtx, optab);\n static rtx expand_builtin_frame_address (tree, tree);\n@@ -165,7 +165,7 @@ static tree fold_builtin_bitop (tree);\n static tree fold_builtin_memcpy (tree);\n static tree fold_builtin_mempcpy (tree, tree, int);\n static tree fold_builtin_memmove (tree, tree);\n-static tree fold_builtin_strchr (tree);\n+static tree fold_builtin_strchr (tree, tree);\n static tree fold_builtin_memcmp (tree);\n static tree fold_builtin_strcmp (tree);\n static tree fold_builtin_strncmp (tree);\n@@ -179,9 +179,9 @@ static tree fold_builtin_abs (tree, tree);\n static tree fold_builtin_unordered_cmp (tree, enum tree_code, enum tree_code);\n static tree fold_builtin_1 (tree, bool);\n \n-static tree fold_builtin_strpbrk (tree);\n-static tree fold_builtin_strstr (tree);\n-static tree fold_builtin_strrchr (tree);\n+static tree fold_builtin_strpbrk (tree, tree);\n+static tree fold_builtin_strstr (tree, tree);\n+static tree fold_builtin_strrchr (tree, tree);\n static tree fold_builtin_strcat (tree);\n static tree fold_builtin_strncat (tree);\n static tree fold_builtin_strspn (tree);\n@@ -2534,11 +2534,11 @@ expand_builtin_strlen (tree arglist, rtx target,\n    in TARGET, if convenient (and in mode MODE if that's convenient).  */\n \n static rtx\n-expand_builtin_strstr (tree arglist, rtx target, enum machine_mode mode)\n+expand_builtin_strstr (tree arglist, tree type, rtx target, enum machine_mode mode)\n {\n   if (validate_arglist (arglist, POINTER_TYPE, POINTER_TYPE, VOID_TYPE))\n     {\n-      tree result = fold_builtin_strstr (arglist);\n+      tree result = fold_builtin_strstr (arglist, type);\n       if (result)\n \treturn expand_expr (result, target, mode, EXPAND_NORMAL);\n     }\n@@ -2550,11 +2550,11 @@ expand_builtin_strstr (tree arglist, rtx target, enum machine_mode mode)\n    in TARGET, if convenient (and in mode MODE if that's convenient).  */\n \n static rtx\n-expand_builtin_strchr (tree arglist, rtx target, enum machine_mode mode)\n+expand_builtin_strchr (tree arglist, tree type, rtx target, enum machine_mode mode)\n {\n   if (validate_arglist (arglist, POINTER_TYPE, INTEGER_TYPE, VOID_TYPE))\n     {\n-      tree result = fold_builtin_strchr (arglist);\n+      tree result = fold_builtin_strchr (arglist, type);\n       if (result)\n \treturn expand_expr (result, target, mode, EXPAND_NORMAL);\n \n@@ -2568,11 +2568,11 @@ expand_builtin_strchr (tree arglist, rtx target, enum machine_mode mode)\n    in TARGET, if convenient (and in mode MODE if that's convenient).  */\n \n static rtx\n-expand_builtin_strrchr (tree arglist, rtx target, enum machine_mode mode)\n+expand_builtin_strrchr (tree arglist, tree type, rtx target, enum machine_mode mode)\n {\n   if (validate_arglist (arglist, POINTER_TYPE, INTEGER_TYPE, VOID_TYPE))\n     {\n-      tree result = fold_builtin_strrchr (arglist);\n+      tree result = fold_builtin_strrchr (arglist, type);\n       if (result)\n \treturn expand_expr (result, target, mode, EXPAND_NORMAL);\n     }\n@@ -2584,11 +2584,11 @@ expand_builtin_strrchr (tree arglist, rtx target, enum machine_mode mode)\n    in TARGET, if convenient (and in mode MODE if that's convenient).  */\n \n static rtx\n-expand_builtin_strpbrk (tree arglist, rtx target, enum machine_mode mode)\n+expand_builtin_strpbrk (tree arglist, tree type, rtx target, enum machine_mode mode)\n {\n   if (validate_arglist (arglist, POINTER_TYPE, POINTER_TYPE, VOID_TYPE))\n     {\n-      tree result = fold_builtin_strpbrk (arglist);\n+      tree result = fold_builtin_strpbrk (arglist, type);\n       if (result)\n \treturn expand_expr (result, target, mode, EXPAND_NORMAL);\n     }\n@@ -5482,27 +5482,27 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n       break;\n \n     case BUILT_IN_STRSTR:\n-      target = expand_builtin_strstr (arglist, target, mode);\n+      target = expand_builtin_strstr (arglist, TREE_TYPE (exp), target, mode);\n       if (target)\n \treturn target;\n       break;\n \n     case BUILT_IN_STRPBRK:\n-      target = expand_builtin_strpbrk (arglist, target, mode);\n+      target = expand_builtin_strpbrk (arglist, TREE_TYPE (exp), target, mode);\n       if (target)\n \treturn target;\n       break;\n \n     case BUILT_IN_INDEX:\n     case BUILT_IN_STRCHR:\n-      target = expand_builtin_strchr (arglist, target, mode);\n+      target = expand_builtin_strchr (arglist, TREE_TYPE (exp), target, mode);\n       if (target)\n \treturn target;\n       break;\n \n     case BUILT_IN_RINDEX:\n     case BUILT_IN_STRRCHR:\n-      target = expand_builtin_strrchr (arglist, target, mode);\n+      target = expand_builtin_strrchr (arglist, TREE_TYPE (exp), target, mode);\n       if (target)\n \treturn target;\n       break;\n@@ -7856,7 +7856,7 @@ fold_builtin_1 (tree exp, bool ignore)\n       return fold_builtin_fputs (arglist, ignore, true, NULL_TREE);\n \n     case BUILT_IN_STRSTR:\n-      return fold_builtin_strstr (arglist);\n+      return fold_builtin_strstr (arglist, type);\n \n     case BUILT_IN_STRCAT:\n       return fold_builtin_strcat (arglist);\n@@ -7872,11 +7872,11 @@ fold_builtin_1 (tree exp, bool ignore)\n \n     case BUILT_IN_STRCHR:\n     case BUILT_IN_INDEX:\n-      return fold_builtin_strchr (arglist);\n+      return fold_builtin_strchr (arglist, type);\n \n     case BUILT_IN_STRRCHR:\n     case BUILT_IN_RINDEX:\n-      return fold_builtin_strrchr (arglist);\n+      return fold_builtin_strrchr (arglist, type);\n \n     case BUILT_IN_STRCPY:\n       return fold_builtin_strcpy (exp, NULL_TREE);\n@@ -7891,7 +7891,7 @@ fold_builtin_1 (tree exp, bool ignore)\n       return fold_builtin_strncmp (arglist);\n \n     case BUILT_IN_STRPBRK:\n-      return fold_builtin_strpbrk (arglist);\n+      return fold_builtin_strpbrk (arglist, type);\n \n     case BUILT_IN_BCMP:\n     case BUILT_IN_MEMCMP:\n@@ -8326,7 +8326,7 @@ readonly_data_expr (tree exp)\n    form of the builtin function call.  */\n \n static tree\n-fold_builtin_strstr (tree arglist)\n+fold_builtin_strstr (tree arglist, tree type)\n {\n   if (!validate_arglist (arglist, POINTER_TYPE, POINTER_TYPE, VOID_TYPE))\n     return 0;\n@@ -8344,13 +8344,15 @@ fold_builtin_strstr (tree arglist)\n       if (p1 != NULL)\n \t{\n \t  const char *r = strstr (p1, p2);\n+\t  tree tem;\n \n \t  if (r == NULL)\n \t    return build_int_cst (TREE_TYPE (s1), 0);\n \n \t  /* Return an offset into the constant string argument.  */\n-\t  return fold (build2 (PLUS_EXPR, TREE_TYPE (s1),\n-\t\t\t       s1, build_int_cst (TREE_TYPE (s1), r - p1)));\n+\t  tem = fold (build2 (PLUS_EXPR, TREE_TYPE (s1),\n+\t\t\t      s1, build_int_cst (TREE_TYPE (s1), r - p1)));\n+\t  return fold_convert (type, tem);\n \t}\n \n       if (p2[0] == '\\0')\n@@ -8390,7 +8392,7 @@ fold_builtin_strstr (tree arglist)\n    form of the builtin function call.  */\n \n static tree\n-fold_builtin_strchr (tree arglist)\n+fold_builtin_strchr (tree arglist, tree type)\n {\n   if (!validate_arglist (arglist, POINTER_TYPE, INTEGER_TYPE, VOID_TYPE))\n     return 0;\n@@ -8407,6 +8409,7 @@ fold_builtin_strchr (tree arglist)\n \t{\n \t  char c;\n \t  const char *r;\n+\t  tree tem;\n \n \t  if (target_char_cast (s2, &c))\n \t    return 0;\n@@ -8417,8 +8420,9 @@ fold_builtin_strchr (tree arglist)\n \t    return build_int_cst (TREE_TYPE (s1), 0);\n \n \t  /* Return an offset into the constant string argument.  */\n-\t  return fold (build2 (PLUS_EXPR, TREE_TYPE (s1),\n-\t\t\t       s1, build_int_cst (TREE_TYPE (s1), r - p1)));\n+\t  tem = fold (build2 (PLUS_EXPR, TREE_TYPE (s1),\n+\t\t\t      s1, build_int_cst (TREE_TYPE (s1), r - p1)));\n+\t  return fold_convert (type, tem);\n \t}\n       return 0;\n     }\n@@ -8442,7 +8446,7 @@ fold_builtin_strchr (tree arglist)\n    form of the builtin function call.  */\n \n static tree\n-fold_builtin_strrchr (tree arglist)\n+fold_builtin_strrchr (tree arglist, tree type)\n {\n   if (!validate_arglist (arglist, POINTER_TYPE, INTEGER_TYPE, VOID_TYPE))\n     return 0;\n@@ -8460,6 +8464,7 @@ fold_builtin_strrchr (tree arglist)\n \t{\n \t  char c;\n \t  const char *r;\n+\t  tree tem;\n \n \t  if (target_char_cast (s2, &c))\n \t    return 0;\n@@ -8470,8 +8475,9 @@ fold_builtin_strrchr (tree arglist)\n \t    return build_int_cst (TREE_TYPE (s1), 0);\n \n \t  /* Return an offset into the constant string argument.  */\n-\t  return fold (build2 (PLUS_EXPR, TREE_TYPE (s1),\n-\t\t\t       s1, build_int_cst (TREE_TYPE (s1), r - p1)));\n+\t  tem = fold (build2 (PLUS_EXPR, TREE_TYPE (s1),\n+\t\t\t      s1, build_int_cst (TREE_TYPE (s1), r - p1)));\n+\t  return fold_convert (type, tem);\n \t}\n \n       if (! integer_zerop (s2))\n@@ -8504,7 +8510,7 @@ fold_builtin_strrchr (tree arglist)\n    form of the builtin function call.  */\n \n static tree\n-fold_builtin_strpbrk (tree arglist)\n+fold_builtin_strpbrk (tree arglist, tree type)\n {\n   if (!validate_arglist (arglist, POINTER_TYPE, POINTER_TYPE, VOID_TYPE))\n     return 0;\n@@ -8522,13 +8528,15 @@ fold_builtin_strpbrk (tree arglist)\n       if (p1 != NULL)\n \t{\n \t  const char *r = strpbrk (p1, p2);\n+\t  tree tem;\n \n \t  if (r == NULL)\n \t    return build_int_cst (TREE_TYPE (s1), 0);\n \n \t  /* Return an offset into the constant string argument.  */\n-\t  return fold (build2 (PLUS_EXPR, TREE_TYPE (s1),\n-\t\t\t       s1, build_int_cst (TREE_TYPE (s1), r - p1)));\n+\t  tem = fold (build2 (PLUS_EXPR, TREE_TYPE (s1),\n+\t\t\t      s1, build_int_cst (TREE_TYPE (s1), r - p1)));\n+\t  return fold_convert (type, tem);\n \t}\n \n       if (p2[0] == '\\0')"}, {"sha": "9393ef12d70ad4ea673bcd28b8fc9e2e2fbcb52e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fcfe0b28b4caae66a7bfe2483a4acb2d53e277f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fcfe0b28b4caae66a7bfe2483a4acb2d53e277f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5fcfe0b28b4caae66a7bfe2483a4acb2d53e277f", "patch": "@@ -1,3 +1,8 @@\n+2005-02-16  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\tPR tree-optimization/19967\n+\t* gcc.dg/pr19967.c: New.\n+\n 2005-02-16  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/19857"}, {"sha": "85afeafe2858aee5f5cbd74832849eab0fbcca24", "filename": "gcc/testsuite/gcc.dg/pr19967.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fcfe0b28b4caae66a7bfe2483a4acb2d53e277f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr19967.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fcfe0b28b4caae66a7bfe2483a4acb2d53e277f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr19967.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr19967.c?ref=5fcfe0b28b4caae66a7bfe2483a4acb2d53e277f", "patch": "@@ -0,0 +1,26 @@\n+/* PR middle-end/19967\n+   These functions mentioned below are supposed to return char *.\n+   However, fold_builtin_... had bugs that caused the return types to\n+   be const char *.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-pedantic\" } */\n+\n+char *strchr(const char *, int);\n+char *strrchr(const char *, int);\n+char *index(const char *, int);\n+char *rindex(const char *, int);\n+char *strpbrk(const char *, const char *);\n+char *strstr(const char *, const char *);\n+char *p;\n+\n+void\n+f (void)\n+{\n+  p = strchr(__func__, 'f');\n+  p = strrchr(__func__, 'f');\n+  p = index(__func__, 'f');\n+  p = rindex(__func__, 'f');\n+  p = strpbrk(__func__, \"f\");\n+  p = strstr(__func__, \"f\");\n+}"}]}