{"sha": "5792208f5124f687376f25798668d105d7ddb270", "node_id": "C_kwDOANBUbNoAKDU3OTIyMDhmNTEyNGY2ODczNzZmMjU3OTg2NjhkMTA1ZDdkZGIyNzA", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-10-21T16:34:37Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-10-21T16:34:37Z"}, "message": "i386: Fix up BFmode comparisons in conditional moves [PR107322]\n\nAs the testcase shows, when cbranchbf4/cstorebf4 patterns are defined,\nwe can get ICEs for conditional moves.\nThe problem is that the generic conditional move expansion just calls\nprepare_cmp_insn which just checks that such a cbranch<mode>4 exists\nand returns directly such comparison and passes it down to the conditional\nmove optabs.\nThe following patch fixes it by punting if the comparisons aren't\nix86_fp_comparison_operator (to tell the generic code it should separately\ncompare) and to handle the promotion of BFmode comparison operands to\nSFmode such that comparison is performed in SFmode.\n\n2022-10-21  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/107322\n\t* config/i386/i386-expand.cc (ix86_prepare_fp_compare_args): For\n\tBFmode comparisons promote arguments to SFmode and recurse.\n\t(ix86_expand_int_movcc, ix86_expand_fp_movcc): Return false early\n\tif comparison operands are BFmode and operands[1] is not\n\tix86_fp_comparison_operator.\n\n\t* gcc.target/i386/pr107322.c: New test.", "tree": {"sha": "6ed073bd73add054a0a4d55fc383ad20b6f17188", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ed073bd73add054a0a4d55fc383ad20b6f17188"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5792208f5124f687376f25798668d105d7ddb270", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5792208f5124f687376f25798668d105d7ddb270", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5792208f5124f687376f25798668d105d7ddb270", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5792208f5124f687376f25798668d105d7ddb270/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2cc41601d9a948e8d612a21c3b9a44ce0b977747", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cc41601d9a948e8d612a21c3b9a44ce0b977747", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cc41601d9a948e8d612a21c3b9a44ce0b977747"}], "stats": {"total": 70, "additions": 70, "deletions": 0}, "files": [{"sha": "5d9e5a12f7ec3ff09c90879bc386b25e99ed5b25", "filename": "gcc/config/i386/i386-expand.cc", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5792208f5124f687376f25798668d105d7ddb270/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5792208f5124f687376f25798668d105d7ddb270/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.cc?ref=5792208f5124f687376f25798668d105d7ddb270", "patch": "@@ -2626,6 +2626,35 @@ ix86_prepare_fp_compare_args (enum rtx_code code, rtx *pop0, rtx *pop1)\n   machine_mode op_mode = GET_MODE (op0);\n   bool is_sse = SSE_FLOAT_MODE_SSEMATH_OR_HF_P (op_mode);\n \n+  if (op_mode == BFmode)\n+    {\n+      rtx op = gen_lowpart (HImode, op0);\n+      if (CONST_INT_P (op))\n+\top = simplify_const_unary_operation (FLOAT_EXTEND, SFmode,\n+\t\t\t\t\t     op0, BFmode);\n+      else\n+\t{\n+\t  rtx t1 = gen_reg_rtx (SImode);\n+\t  emit_insn (gen_zero_extendhisi2 (t1, op));\n+\t  emit_insn (gen_ashlsi3 (t1, t1, GEN_INT (16)));\n+\t  op = gen_lowpart (SFmode, t1);\n+\t}\n+      *pop0 = op;\n+      op = gen_lowpart (HImode, op1);\n+      if (CONST_INT_P (op))\n+\top = simplify_const_unary_operation (FLOAT_EXTEND, SFmode,\n+\t\t\t\t\t     op1, BFmode);\n+      else\n+\t{\n+\t  rtx t1 = gen_reg_rtx (SImode);\n+\t  emit_insn (gen_zero_extendhisi2 (t1, op));\n+\t  emit_insn (gen_ashlsi3 (t1, t1, GEN_INT (16)));\n+\t  op = gen_lowpart (SFmode, t1);\n+\t}\n+      *pop1 = op;\n+      return ix86_prepare_fp_compare_args (code, pop0, pop1);\n+    }\n+\n   /* All of the unordered compare instructions only work on registers.\n      The same is true of the fcomi compare instructions.  The XFmode\n      compare instructions require registers except when comparing\n@@ -3164,6 +3193,10 @@ ix86_expand_int_movcc (rtx operands[])\n \t  && !TARGET_64BIT))\n     return false;\n \n+  if (GET_MODE (op0) == BFmode\n+      && !ix86_fp_comparison_operator (operands[1], VOIDmode))\n+    return false;\n+\n   start_sequence ();\n   compare_op = ix86_expand_compare (code, op0, op1);\n   compare_seq = get_insns ();\n@@ -4238,6 +4271,10 @@ ix86_expand_fp_movcc (rtx operands[])\n   rtx op0 = XEXP (operands[1], 0);\n   rtx op1 = XEXP (operands[1], 1);\n \n+  if (GET_MODE (op0) == BFmode\n+      && !ix86_fp_comparison_operator (operands[1], VOIDmode))\n+    return false;\n+\n   if (SSE_FLOAT_MODE_SSEMATH_OR_HF_P (mode))\n     {\n       machine_mode cmode;"}, {"sha": "d3d11fe166266734ddc8d8fcd293aa27738a644f", "filename": "gcc/testsuite/gcc.target/i386/pr107322.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5792208f5124f687376f25798668d105d7ddb270/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr107322.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5792208f5124f687376f25798668d105d7ddb270/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr107322.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr107322.c?ref=5792208f5124f687376f25798668d105d7ddb270", "patch": "@@ -0,0 +1,33 @@\n+/* PR target/107322 */\n+/* { dg-do compile } */\n+/* { dg-options \"-fexcess-precision=16 -O -msse2 -mfpmath=sse\" } */\n+\n+int i, j;\n+float k, l;\n+__bf16 f;\n+\n+void\n+foo (void)\n+{\n+  i *= 0 >= f;\n+}\n+\n+void\n+bar (void)\n+{\n+  i *= 0 <= f;\n+}\n+\n+void\n+baz (int x, int y)\n+{\n+  i = 0 >= f ? x : y;\n+  j = 0 <= f ? x + 2 : y + 3;\n+}\n+\n+void\n+qux (float x, float y)\n+{\n+  k = 0 >= f ? x : y;\n+  l = 0 <= f ? x + 2 : y + 3;\n+}"}]}