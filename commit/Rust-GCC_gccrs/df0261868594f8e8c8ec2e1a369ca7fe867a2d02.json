{"sha": "df0261868594f8e8c8ec2e1a369ca7fe867a2d02", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGYwMjYxODY4NTk0ZjhlOGM4ZWMyZTFhMzY5Y2E3ZmU4NjdhMmQwMg==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@apple.com", "date": "2003-04-12T01:58:33Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2003-04-12T01:58:33Z"}, "message": "c-pch.c: Include flags.h.\n\n\t* c-pch.c: Include flags.h.  Add comments to routines.\n\t(struct c_pch_validity): New.\n\t(get_ident): Update PCH file version number.\n\t(pch_init): Output current debugging type.\n\t(c_common_valid_pch): Check debugging type.\n\t* Makefile.in (c-pch.o): Update dependencies.\n\t* flags.h (debug_type_names): Declare.\n\t* toplev.c (debug_type_names): Move out of decode_g_option.\n\nFrom-SVN: r65499", "tree": {"sha": "0ea37f5d25de0878bd332dd8e39db5a011511fb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ea37f5d25de0878bd332dd8e39db5a011511fb7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df0261868594f8e8c8ec2e1a369ca7fe867a2d02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df0261868594f8e8c8ec2e1a369ca7fe867a2d02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df0261868594f8e8c8ec2e1a369ca7fe867a2d02", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df0261868594f8e8c8ec2e1a369ca7fe867a2d02/comments", "author": {"login": "geoffk01", "id": 31905243, "node_id": "MDQ6VXNlcjMxOTA1MjQz", "avatar_url": "https://avatars.githubusercontent.com/u/31905243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffk01", "html_url": "https://github.com/geoffk01", "followers_url": "https://api.github.com/users/geoffk01/followers", "following_url": "https://api.github.com/users/geoffk01/following{/other_user}", "gists_url": "https://api.github.com/users/geoffk01/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffk01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffk01/subscriptions", "organizations_url": "https://api.github.com/users/geoffk01/orgs", "repos_url": "https://api.github.com/users/geoffk01/repos", "events_url": "https://api.github.com/users/geoffk01/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffk01/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ba05abd3e0f72539ee5bbb5ee2fa360cffd9eeb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba05abd3e0f72539ee5bbb5ee2fa360cffd9eeb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba05abd3e0f72539ee5bbb5ee2fa360cffd9eeb6"}], "stats": {"total": 123, "additions": 92, "deletions": 31}, "files": [{"sha": "1e7e8362be7a6d86354a825822c598b64471faab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df0261868594f8e8c8ec2e1a369ca7fe867a2d02/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df0261868594f8e8c8ec2e1a369ca7fe867a2d02/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=df0261868594f8e8c8ec2e1a369ca7fe867a2d02", "patch": "@@ -2,6 +2,15 @@\n \n \t* doc/extend.texi (Empty Structures): New.\n \n+\t* c-pch.c: Include flags.h.  Add comments to routines.\n+\t(struct c_pch_validity): New.\n+\t(get_ident): Update PCH file version number.\n+\t(pch_init): Output current debugging type.\n+\t(c_common_valid_pch): Check debugging type.\n+\t* Makefile.in (c-pch.o): Update dependencies.\n+\t* flags.h (debug_type_names): Declare.\n+\t* toplev.c (debug_type_names): Move out of decode_g_option.\n+\n 2003-04-11  Eric Christopher  <echristo@redhat.com>\n \n \t* emit-rtl.c (gen_rtx): Fix typos."}, {"sha": "7f183f06ccaf5d6b04929614a41b010825c31327", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df0261868594f8e8c8ec2e1a369ca7fe867a2d02/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df0261868594f8e8c8ec2e1a369ca7fe867a2d02/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=df0261868594f8e8c8ec2e1a369ca7fe867a2d02", "patch": "@@ -1336,7 +1336,8 @@ c-dump.o : c-dump.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n \t$(C_TREE_H) tree-dump.h\n \n c-pch.o : c-pch.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(CPPLIB_H) $(TREE_H) \\\n-\tc-common.h output.h toplev.h c-pragma.h $(GGC_H) debug.h langhooks.h\n+\tc-common.h output.h toplev.h c-pragma.h $(GGC_H) debug.h langhooks.h \\\n+\tflags.h\n \n # Language-independent files.\n "}, {"sha": "a7fa879fb88b374da3e7959844adfcfa68ed79d7", "filename": "gcc/c-pch.c", "status": "modified", "additions": 72, "deletions": 25, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df0261868594f8e8c8ec2e1a369ca7fe867a2d02/gcc%2Fc-pch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df0261868594f8e8c8ec2e1a369ca7fe867a2d02/gcc%2Fc-pch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pch.c?ref=df0261868594f8e8c8ec2e1a369ca7fe867a2d02", "patch": "@@ -23,6 +23,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"coretypes.h\"\n #include \"cpplib.h\"\n #include \"tree.h\"\n+#include \"flags.h\"\n #include \"c-common.h\"\n #include \"output.h\"\n #include \"toplev.h\"\n@@ -31,6 +32,11 @@ Boston, MA 02111-1307, USA.  */\n #include \"ggc.h\"\n #include \"langhooks.h\"\n \n+struct c_pch_validity\n+{\n+  unsigned char debug_info_type;\n+};\n+\n struct c_pch_header \n {\n   unsigned long asm_size;\n@@ -45,11 +51,16 @@ static long asm_file_startpos;\n \n static const char * get_ident PARAMS((void));\n \n+/* Compute an appropriate 8-byte magic number for the PCH file, so that\n+   utilities like file(1) can identify it, and so that GCC can quickly\n+   ignore non-PCH files and PCH files that are of a completely different\n+   format.  */\n+\n static const char *\n get_ident()\n {\n   static char result[IDENT_LENGTH];\n-  static const char template[IDENT_LENGTH] = \"gpch.010\";\n+  static const char template[IDENT_LENGTH] = \"gpch.011\";\n   \n   memcpy (result, template, IDENT_LENGTH);\n   if (c_language == clk_c)\n@@ -61,36 +72,45 @@ get_ident()\n   return result;\n }\n \n+/* Prepare to write a PCH file.  This is called at the start of \n+   compilation.  */\n+\n void\n pch_init ()\n {\n   FILE *f;\n+  struct c_pch_validity v;\n   \n-  if (pch_file)\n-    {\n-      f = fopen (pch_file, \"w+b\");\n-      if (f == NULL)\n-\tfatal_io_error (\"can't open %s\", pch_file);\n-      pch_outfile = f;\n-      \n-      if (fwrite (get_ident(), IDENT_LENGTH, 1, f) != 1)\n-\tfatal_io_error (\"can't write to %s\", pch_file);\n-\n-      /* We need to be able to re-read the output.  */\n-      /* The driver always provides a valid -o option.  */\n-      if (asm_file_name == NULL\n-\t  || strcmp (asm_file_name, \"-\") == 0)\n-\tfatal_error (\"`%s' is not a valid output file\", asm_file_name);\n-\n-      asm_file_startpos = ftell (asm_out_file);\n-      \n-      /* Let the debugging format deal with the PCHness.  */\n-      (*debug_hooks->handle_pch) (0);\n-\n-      cpp_save_state (parse_in, f);\n-    }\n+  if (! pch_file)\n+    return;\n+  \n+  f = fopen (pch_file, \"w+b\");\n+  if (f == NULL)\n+    fatal_io_error (\"can't open %s\", pch_file);\n+  pch_outfile = f;\n+  \n+  v.debug_info_type = write_symbols;\n+  if (fwrite (get_ident(), IDENT_LENGTH, 1, f) != 1\n+      || fwrite (&v, sizeof (v), 1, f) != 1)\n+    fatal_io_error (\"can't write to %s\", pch_file);\n+\n+  /* We need to be able to re-read the output.  */\n+  /* The driver always provides a valid -o option.  */\n+  if (asm_file_name == NULL\n+      || strcmp (asm_file_name, \"-\") == 0)\n+    fatal_error (\"`%s' is not a valid output file\", asm_file_name);\n+  \n+  asm_file_startpos = ftell (asm_out_file);\n+  \n+  /* Let the debugging format deal with the PCHness.  */\n+  (*debug_hooks->handle_pch) (0);\n+  \n+  cpp_save_state (parse_in, f);\n }\n \n+/* Write the PCH file.  This is called at the end of a compilation which\n+   will produce a PCH file.  */\n+\n void\n c_common_write_pch ()\n {\n@@ -134,6 +154,9 @@ c_common_write_pch ()\n   fclose (pch_outfile);\n }\n \n+/* Check the PCH file called NAME, open on FD, to see if it can be used\n+   in this compilation.  */\n+\n int\n c_common_valid_pch (pfile, name, fd)\n      cpp_reader *pfile;\n@@ -144,12 +167,13 @@ c_common_valid_pch (pfile, name, fd)\n   int result;\n   char ident[IDENT_LENGTH];\n   const char *pch_ident;\n+  struct c_pch_validity v;\n \n   if (! allow_pch)\n     return 2;\n \n   /* Perform a quick test of whether this is a valid\n-     precompiled header for C.  */\n+     precompiled header for the current language.  */\n \n   sizeread = read (fd, ident, IDENT_LENGTH);\n   if (sizeread == -1)\n@@ -181,6 +205,26 @@ c_common_valid_pch (pfile, name, fd)\n       return 2;\n     }\n \n+  if (read (fd, &v, sizeof (v)) != sizeof (v))\n+    {\n+      fatal_io_error (\"can't read %s\", name);\n+      return 2;\n+    }\n+\n+  /* The allowable debug info combinations are that either the PCH file\n+     was built with the same as is being used now, or the PCH file was\n+     built for some kind of debug info but now none is in use.  */\n+  if (v.debug_info_type != write_symbols\n+      && write_symbols != NO_DEBUG)\n+    {\n+      if (cpp_get_options (pfile)->warn_invalid_pch)\n+\tcpp_error (pfile, DL_WARNING, \n+\t\t   \"%s: created with -g%s, but used with -g%s\", name,\n+\t\t   debug_type_names[v.debug_info_type],\n+\t\t   debug_type_names[write_symbols]);\n+      return 2;\n+    }\n+\n   /* Check the preprocessor macros are the same as when the PCH was\n      generated.  */\n   \n@@ -191,6 +235,9 @@ c_common_valid_pch (pfile, name, fd)\n     return result == 0;\n }\n \n+/* Load in the PCH file NAME, open on FD.  It was originally searched for\n+   by ORIG_NAME.  */\n+\n void\n c_common_read_pch (pfile, name, fd, orig_name)\n      cpp_reader *pfile;"}, {"sha": "1ca9de2f196d2edbee0a3ec1564b689391d42c05", "filename": "gcc/flags.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df0261868594f8e8c8ec2e1a369ca7fe867a2d02/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df0261868594f8e8c8ec2e1a369ca7fe867a2d02/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=df0261868594f8e8c8ec2e1a369ca7fe867a2d02", "patch": "@@ -41,6 +41,9 @@ enum debug_info_type\n /* Specify which kind of debugging info to generate.  */\n extern enum debug_info_type write_symbols;\n \n+/* Names of debug_info_type, for error messages.  */\n+extern const char *const debug_type_names[];\n+\n enum debug_info_level\n {\n   DINFO_LEVEL_NONE,\t/* Write no debugging info.  */"}, {"sha": "25a6905095a646a132c70bd5a6dd6d68e733501b", "filename": "gcc/toplev.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df0261868594f8e8c8ec2e1a369ca7fe867a2d02/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df0261868594f8e8c8ec2e1a369ca7fe867a2d02/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=df0261868594f8e8c8ec2e1a369ca7fe867a2d02", "patch": "@@ -4268,6 +4268,12 @@ decode_W_option (arg)\n   return 1;\n }\n \n+/* Indexed by enum debug_info_type.  */\n+const char *const debug_type_names[] =\n+{\n+  \"none\", \"stabs\", \"coff\", \"dwarf-1\", \"dwarf-2\", \"xcoff\", \"vms\"\n+};\n+\n /* Parse a -g... command line switch.  ARG is the value after the -g.\n    It is safe to access 'ARG - 2' to generate the full switch name.\n    Return the number of strings consumed.  */\n@@ -4287,11 +4293,6 @@ decode_g_option (arg)\n      -g and -ggdb don't explicitly set the debugging format so\n      -gdwarf -g3 is equivalent to -gdwarf3.  */\n   static int type_explicitly_set_p = 0;\n-  /* Indexed by enum debug_info_type.  */\n-  static const char *const debug_type_names[] =\n-  {\n-    \"none\", \"stabs\", \"coff\", \"dwarf-1\", \"dwarf-2\", \"xcoff\", \"vms\"\n-  };\n \n   /* The maximum admissible debug level value.  */\n   static const unsigned max_debug_level = 3;"}]}