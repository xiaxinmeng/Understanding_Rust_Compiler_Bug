{"sha": "6bf2ff0d52a90acdc54f18c75d1978f6b4de4609", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmJmMmZmMGQ1MmE5MGFjZGM1NGYxOGM3NWQxOTc4ZjZiNGRlNDYwOQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-07-07T18:28:59Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-07-07T18:40:04Z"}, "message": "preprocessor: Better line info for <builtin> & <command-line>\n\nWith C++ module header units it becomes important to distinguish\nbetween macros defined in forced headers (& commandline & builtins)\nfrom those defined in the header file being processed.  We weren't\nmaking that easy because we treated the builtins and command-line\nlocations somewhat file-like, with incrementing line numbers, and\nshowing them as included from line 1 of the main file.  This patch does\n3 things:\n\n0) extend the idiom that 'line 0' of a file means 'the file as a whole'\n\n1) builtins and command-line macros are shown as-if included from line zero.\n\n2) when emitting preprocessed output we keep resetting the line number\nso that re-reading that preprocessed output will get the same set of\nlocations for the command line etc.\n\nFor instance the new c-c++-common/cpp/line-2.c test, now emits\n\nIn file included from <command-line>:\n./line-2.h:4:2: error: #error wrong\n    4 | #error wrong\n      |  ^~~~~\nline-2.c:3:11: error: macro \"bill\" passed 1 arguments, but takes just 0\n    3 | int bill(1);\n      |           ^\nIn file included from <command-line>:\n./line-2.h:3: note: macro \"bill\" defined here\n    3 | #define bill() 2\n      |\n\nBefore it told you about including from <command-line>:31.\n\nthe preprocessed output looks like:\n...\n\n(There's a new optimization in do_line_marker to stop each of these\nline markers causing a new line map.  We can simply rewind the\nlocation, and keep using the same line map.)\n\n\tlibcpp/\n\t* directives.c (do_linemarker): Optimize rewinding to line zero.\n\t* files.c (_cpp_stack_file): Start on line zero when about to inject\n\theaders.\n\t(cpp_push_include, cpp_push_default_include): Use highest_line as\n\tthe location.\n\t* include/cpplib.h (cpp_read_main_file): Add injecting parm.\n\t* init.c (cpp_read_main_file): Likewise, inform _cpp_stack_file.\n\t* internal.h (enum include_type): Add IT_MAIN_INJECT.\n\tgcc/c-family/\n\t* c-opts.c (c_common_post_options): Add 'injecting' arg to\n\tcpp_read_main_file.\n\t(c_finish_options): Add linemap_line_start calls for builtin and cmd\n\tmaps.  Force token position to line_table's highest line.\n\t* c-ppoutput.c (print_line_1): Refactor, print line zero.\n\t(cb_define): Always increment source line.\n\tgcc/testsuite/\n\t* c-c++-common/cpp/line-2.c: New.\n\t* c-c++-common/cpp/line-2.h: New.\n\t* c-c++-common/cpp/line-3.c: New.\n\t* c-c++-common/cpp/line-4.c: New.\n\t* c-c++-common/cpp/line-4.h: New.", "tree": {"sha": "9b411964bcaef7d64711f4ebd372e095be34adca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b411964bcaef7d64711f4ebd372e095be34adca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6bf2ff0d52a90acdc54f18c75d1978f6b4de4609", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bf2ff0d52a90acdc54f18c75d1978f6b4de4609", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bf2ff0d52a90acdc54f18c75d1978f6b4de4609", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bf2ff0d52a90acdc54f18c75d1978f6b4de4609/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f9c9ea40a1e937ea1b549625cf7762d4a8a2078", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f9c9ea40a1e937ea1b549625cf7762d4a8a2078", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f9c9ea40a1e937ea1b549625cf7762d4a8a2078"}], "stats": {"total": 154, "additions": 116, "deletions": 38}, "files": [{"sha": "ec3de868dd473f4c66ff57eafe445af3c231b6ed", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bf2ff0d52a90acdc54f18c75d1978f6b4de4609/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bf2ff0d52a90acdc54f18c75d1978f6b4de4609/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=6bf2ff0d52a90acdc54f18c75d1978f6b4de4609", "patch": "@@ -1110,7 +1110,11 @@ c_common_post_options (const char **pfilename)\n   input_location = UNKNOWN_LOCATION;\n \n   *pfilename = this_input_filename\n-    = cpp_read_main_file (parse_in, in_fnames[0]);\n+    = cpp_read_main_file (parse_in, in_fnames[0],\n+\t\t\t  /* We'll inject preamble pieces if this is\n+\t\t\t     not preprocessed.  */\n+\t\t\t  !cpp_opts->preprocessed);\n+\n   /* Don't do any compilation or preprocessing if there is no input file.  */\n   if (this_input_filename == NULL)\n     {\n@@ -1429,6 +1433,7 @@ c_finish_options (void)\n \t= linemap_check_ordinary (linemap_add (line_table, LC_RENAME, 0,\n \t\t\t\t\t       _(\"<built-in>\"), 0));\n       cb_file_change (parse_in, bltin_map);\n+      linemap_line_start (line_table, 0, 1);\n \n       /* Make sure all of the builtins about to be declared have\n \t BUILTINS_LOCATION has their location_t.  */\n@@ -1452,9 +1457,10 @@ c_finish_options (void)\n \t= linemap_check_ordinary (linemap_add (line_table, LC_RENAME, 0,\n \t\t\t\t\t       _(\"<command-line>\"), 0));\n       cb_file_change (parse_in, cmd_map);\n+      linemap_line_start (line_table, 0, 1);\n \n       /* All command line defines must have the same location.  */\n-      cpp_force_token_locations (parse_in, cmd_map->start_location);\n+      cpp_force_token_locations (parse_in, line_table->highest_line);\n       for (size_t i = 0; i < deferred_count; i++)\n \t{\n \t  struct deferred_opt *opt = &deferred_opts[i];"}, {"sha": "44c6f30e06b77744b50c3fb77271a6d26341bcb6", "filename": "gcc/c-family/c-ppoutput.c", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bf2ff0d52a90acdc54f18c75d1978f6b4de4609/gcc%2Fc-family%2Fc-ppoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bf2ff0d52a90acdc54f18c75d1978f6b4de4609/gcc%2Fc-family%2Fc-ppoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ppoutput.c?ref=6bf2ff0d52a90acdc54f18c75d1978f6b4de4609", "patch": "@@ -560,26 +560,23 @@ print_line_1 (location_t src_loc, const char *special_flags, FILE *stream)\n   if (src_loc != UNKNOWN_LOCATION && !flag_no_line_commands)\n     {\n       const char *file_path = LOCATION_FILE (src_loc);\n-      int sysp;\n       size_t to_file_len = strlen (file_path);\n       unsigned char *to_file_quoted =\n          (unsigned char *) alloca (to_file_len * 4 + 1);\n-      unsigned char *p;\n \n       print.src_line = LOCATION_LINE (src_loc);\n       print.src_file = file_path;\n \n       /* cpp_quote_string does not nul-terminate, so we have to do it\n \t ourselves.  */\n-      p = cpp_quote_string (to_file_quoted,\n-\t\t\t    (const unsigned char *) file_path,\n-\t\t\t    to_file_len);\n+      unsigned char *p = cpp_quote_string (to_file_quoted,\n+\t\t\t\t\t   (const unsigned char *) file_path,\n+\t\t\t\t\t   to_file_len);\n       *p = '\\0';\n       fprintf (stream, \"# %u \\\"%s\\\"%s\",\n-\t       print.src_line == 0 ? 1 : print.src_line,\n-\t       to_file_quoted, special_flags);\n+\t       print.src_line, to_file_quoted, special_flags);\n \n-      sysp = in_system_header_at (src_loc);\n+      int sysp = in_system_header_at (src_loc);\n       if (sysp == 2)\n \tfputs (\" 3 4\", stream);\n       else if (sysp == 1)\n@@ -677,8 +674,7 @@ cb_define (cpp_reader *pfile, location_t line, cpp_hashnode *node)\n   linemap_resolve_location (line_table, line,\n \t\t\t    LRK_MACRO_DEFINITION_LOCATION,\n \t\t\t    &map);\n-  if (LINEMAP_LINE (map) != 0)\n-    print.src_line++;\n+  print.src_line++;\n }\n \n static void"}, {"sha": "97cf398f64cd122185c77f3b0b05b1a485c587da", "filename": "gcc/testsuite/c-c++-common/cpp/line-2.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bf2ff0d52a90acdc54f18c75d1978f6b4de4609/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fline-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bf2ff0d52a90acdc54f18c75d1978f6b4de4609/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fline-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fline-2.c?ref=6bf2ff0d52a90acdc54f18c75d1978f6b4de4609", "patch": "@@ -0,0 +1,11 @@\n+int line1;\n+int f = bob;\n+int bill(1);\n+int line4;\n+\n+// { dg-do preprocess }\n+// { dg-options \"-dD -include $srcdir/c-c++-common/cpp/line-2.h -nostdinc\" }\n+\n+// { dg-regexp {In file included from <command-line>:\\n[^\\n]*/line-2.h:4:2: error: #error wrong\\n} }\n+\n+// { dg-regexp {[^\\n]*/line-2.c:3:11: error: macro \"bill\" passed 1 arguments, but takes just 0\\nIn file included from <command-line>:\\n[^\\n]*/line-2.h:3: note: macro \"bill\" defined here\\n} }"}, {"sha": "737bdfa29267f4478d5ad77852ee3572928aa864", "filename": "gcc/testsuite/c-c++-common/cpp/line-2.h", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bf2ff0d52a90acdc54f18c75d1978f6b4de4609/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fline-2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bf2ff0d52a90acdc54f18c75d1978f6b4de4609/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fline-2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fline-2.h?ref=6bf2ff0d52a90acdc54f18c75d1978f6b4de4609", "patch": "@@ -0,0 +1,5 @@\n+#define bob 1\n+/* Comment */\n+#define bill() 2\n+#error wrong\n+"}, {"sha": "2ffc44907a27cf502a9f1d978528985961603ab5", "filename": "gcc/testsuite/c-c++-common/cpp/line-3.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bf2ff0d52a90acdc54f18c75d1978f6b4de4609/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fline-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bf2ff0d52a90acdc54f18c75d1978f6b4de4609/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fline-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fline-3.c?ref=6bf2ff0d52a90acdc54f18c75d1978f6b4de4609", "patch": "@@ -0,0 +1,20 @@\n+# 0 \".../line-1.c\"\n+# 0 \"<built-in>\"\n+# 0 \"<command-line>\"\n+# 1 \"./line-2.h\" 1\n+#define bob 1\n+\n+#define bill() 2\n+#error wrong\n+# 0 \"<command-line>\" 2\n+# 1 \".../line-3.c\"\n+int line1;\n+int f = bob;\n+int bill(1);\n+int line4;\n+\n+// { dg-regexp {In file included from <command-line>:\\n[^\\n]*/line-2.h:4:2: error: #error wrong\\n} }\n+\n+// { dg-regexp {[^\\n]*/line-3.c:3:11: error: macro \"bill\" passed 1 arguments, but takes just 0\\nIn file included from <command-line>:\\n[^\\n]*/line-2.h:3: note: macro \"bill\" defined here\\n} }\n+\n+// { dg-options \"-fpreprocessed -fdirectives-only\" }"}, {"sha": "810f15929c2566d90cd9e2906596729ba90b383e", "filename": "gcc/testsuite/c-c++-common/cpp/line-4.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bf2ff0d52a90acdc54f18c75d1978f6b4de4609/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fline-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bf2ff0d52a90acdc54f18c75d1978f6b4de4609/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fline-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fline-4.c?ref=6bf2ff0d52a90acdc54f18c75d1978f6b4de4609", "patch": "@@ -0,0 +1,11 @@\n+int line1;\n+int f = bob;\n+int b = bill();\n+int line4;\n+\n+// { dg-do preprocess }\n+// { dg-options \"-dD -include $srcdir/c-c++-common/cpp/line-4.h -nostdinc\" }\n+\n+// { dg-final { scan-file line-4.i {# 0 \"[^\\n]*/line-4.c\"\\n# 0 \"<built-in>\"\\n} } }\n+// { dg-final { scan-file line-4.i {# 0 \"<command-line>\"\\n# 1 \"[^\\n]*/line-4.h\" 1\\n#define bob 1\\n} } }\n+// { dg-final { scan-file line-4.i {#define bill\\(\\) 2\\n# 0 \"<command-line>\" 2\\n# 1 \"[^\\n]*/line-4.c\"\\nint line1;\\n} } }"}, {"sha": "6ee05a3d1371e25fca6b04865ea5bbcac9a857cb", "filename": "gcc/testsuite/c-c++-common/cpp/line-4.h", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bf2ff0d52a90acdc54f18c75d1978f6b4de4609/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fline-4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bf2ff0d52a90acdc54f18c75d1978f6b4de4609/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fline-4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fline-4.h?ref=6bf2ff0d52a90acdc54f18c75d1978f6b4de4609", "patch": "@@ -0,0 +1,3 @@\n+#define bob 1\n+/* Comment */\n+#define bill() 2"}, {"sha": "f59718708e47c75afd7247cd8d6f18959398b03d", "filename": "libcpp/directives.c", "status": "modified", "additions": 30, "deletions": 14, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bf2ff0d52a90acdc54f18c75d1978f6b4de4609/libcpp%2Fdirectives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bf2ff0d52a90acdc54f18c75d1978f6b4de4609/libcpp%2Fdirectives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fdirectives.c?ref=6bf2ff0d52a90acdc54f18c75d1978f6b4de4609", "patch": "@@ -940,7 +940,7 @@ strtolinenum (const uchar *str, size_t len, linenum_type *nump, bool *wrapped)\n \n /* Interpret #line command.\n    Note that the filename string (if any) is a true string constant\n-   (escapes are interpreted), unlike in #line.  */\n+   (escapes are interpreted).  */\n static void\n do_line (cpp_reader *pfile)\n {\n@@ -1115,27 +1115,43 @@ do_linemarker (cpp_reader *pfile)\n   line_table->seen_line_directive = true;\n }\n \n-/* Arrange the file_change callback.  pfile->line has changed to\n-   FILE_LINE of TO_FILE, for reason REASON.  SYSP is 1 for a system\n-   header, 2 for a system header that needs to be extern \"C\" protected,\n-   and zero otherwise.  */\n+/* Arrange the file_change callback.  Changing to TO_FILE:TO_LINE for\n+   REASON.  SYSP is 1 for a system header, 2 for a system header that\n+   needs to be extern \"C\" protected, and zero otherwise.  */\n void\n _cpp_do_file_change (cpp_reader *pfile, enum lc_reason reason,\n-\t\t     const char *to_file, linenum_type file_line,\n+\t\t     const char *to_file, linenum_type to_line,\n \t\t     unsigned int sysp)\n {\n   linemap_assert (reason != LC_ENTER_MACRO);\n-  const struct line_map *map = linemap_add (pfile->line_table, reason, sysp,\n-\t\t\t\t\t    to_file, file_line);\n+\n   const line_map_ordinary *ord_map = NULL;\n-  if (map != NULL)\n-    {\n-      ord_map = linemap_check_ordinary (map);\n-      linemap_line_start (pfile->line_table,\n-\t\t\t  ORDINARY_MAP_STARTING_LINE_NUMBER (ord_map),\n-\t\t\t  127);\n+  if (!to_line && reason == LC_RENAME_VERBATIM)\n+    {\n+      /* A linemarker moving to line zero.  If we're on the second\n+         line of the current map, and it also starts at zero, just\n+         rewind -- we're probably reading the builtins of a\n+         preprocessed source.  */\n+      line_map_ordinary *last = LINEMAPS_LAST_ORDINARY_MAP (pfile->line_table);\n+      if (!ORDINARY_MAP_STARTING_LINE_NUMBER (last)\n+\t  && SOURCE_LINE (last, pfile->line_table->highest_line) == 2)\n+\t{\n+\t  ord_map = last;\n+\t  pfile->line_table->highest_location\n+\t    = pfile->line_table->highest_line = MAP_START_LOCATION (last);\n+\t}\n     }\n \n+  if (!ord_map)\n+    if (const line_map *map = linemap_add (pfile->line_table, reason, sysp,\n+\t\t\t\t\t   to_file, to_line))\n+      {\n+\tord_map = linemap_check_ordinary (map);\n+\tlinemap_line_start (pfile->line_table,\n+\t\t\t    ORDINARY_MAP_STARTING_LINE_NUMBER (ord_map),\n+\t\t\t    127);\n+      }\n+\n   if (pfile->cb.file_change)\n     pfile->cb.file_change (pfile, ord_map);\n }"}, {"sha": "3d48c38fc0a8c497c5b1f68471f30edcd7c0a382", "filename": "libcpp/files.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bf2ff0d52a90acdc54f18c75d1978f6b4de4609/libcpp%2Ffiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bf2ff0d52a90acdc54f18c75d1978f6b4de4609/libcpp%2Ffiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Ffiles.c?ref=6bf2ff0d52a90acdc54f18c75d1978f6b4de4609", "patch": "@@ -947,7 +947,11 @@ _cpp_stack_file (cpp_reader *pfile, _cpp_file *file, include_type type,\n     pfile->line_table->highest_location--;\n \n   /* Add line map and do callbacks.  */\n-  _cpp_do_file_change (pfile, LC_ENTER, file->path, 1, sysp);\n+  _cpp_do_file_change (pfile, LC_ENTER, file->path,\n+\t\t       /* With preamble injection, start on line zero, so\n+\t\t\t  the preamble doesn't appear to have been\n+\t\t\t  included from line 1.  */\n+\t\t       type == IT_MAIN_INJECT ? 0 : 1, sysp);\n \n   return true;\n }\n@@ -1475,7 +1479,8 @@ _cpp_compare_file_date (cpp_reader *pfile, const char *fname,\n bool\n cpp_push_include (cpp_reader *pfile, const char *fname)\n {\n-  return _cpp_stack_include (pfile, fname, false, IT_CMDLINE, 0);\n+  return _cpp_stack_include (pfile, fname, false, IT_CMDLINE,\n+\t\t\t     pfile->line_table->highest_line);\n }\n \n /* Pushes the given file, implicitly included at the start of a\n@@ -1484,7 +1489,8 @@ cpp_push_include (cpp_reader *pfile, const char *fname)\n bool\n cpp_push_default_include (cpp_reader *pfile, const char *fname)\n {\n-  return _cpp_stack_include (pfile, fname, true, IT_DEFAULT, 0);\n+  return _cpp_stack_include (pfile, fname, true, IT_DEFAULT,\n+\t\t\t     pfile->line_table->highest_line);\n }\n \n /* Do appropriate cleanup when a file INC's buffer is popped off the"}, {"sha": "e8bb15d1f09b949bc716adc26bb1721391ca95a2", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bf2ff0d52a90acdc54f18c75d1978f6b4de4609/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bf2ff0d52a90acdc54f18c75d1978f6b4de4609/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=6bf2ff0d52a90acdc54f18c75d1978f6b4de4609", "patch": "@@ -979,7 +979,8 @@ extern class mkdeps *cpp_get_deps (cpp_reader *) ATTRIBUTE_PURE;\n    input file, except for preprocessed input.  This will generate at\n    least one file change callback, and possibly a line change callback\n    too.  If there was an error opening the file, it returns NULL.  */\n-extern const char *cpp_read_main_file (cpp_reader *, const char *);\n+extern const char *cpp_read_main_file (cpp_reader *, const char *,\n+\t\t\t\t       bool injecting = false);\n \n /* Set up built-ins with special behavior.  Use cpp_init_builtins()\n    instead unless your know what you are doing.  */"}, {"sha": "d641d0a1e3ab344104c0bcf9ae7aa4888f0f6e47", "filename": "libcpp/init.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bf2ff0d52a90acdc54f18c75d1978f6b4de4609/libcpp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bf2ff0d52a90acdc54f18c75d1978f6b4de4609/libcpp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.c?ref=6bf2ff0d52a90acdc54f18c75d1978f6b4de4609", "patch": "@@ -657,10 +657,11 @@ cpp_post_options (cpp_reader *pfile)\n }\n \n /* Setup for processing input from the file named FNAME, or stdin if\n-   it is the empty string.  Return the original filename\n-   on success (e.g. foo.i->foo.c), or NULL on failure.  */\n+   it is the empty string.  Return the original filename on success\n+   (e.g. foo.i->foo.c), or NULL on failure.  INJECTING is true if\n+   there may be injected headers before line 1 of the main file.  */\n const char *\n-cpp_read_main_file (cpp_reader *pfile, const char *fname)\n+cpp_read_main_file (cpp_reader *pfile, const char *fname, bool injecting)\n {\n   if (CPP_OPTION (pfile, deps.style) != DEPS_NONE)\n     {\n@@ -677,16 +678,16 @@ cpp_read_main_file (cpp_reader *pfile, const char *fname)\n   if (_cpp_find_failed (pfile->main_file))\n     return NULL;\n \n-  _cpp_stack_file (pfile, pfile->main_file, IT_MAIN, 0);\n+  _cpp_stack_file (pfile, pfile->main_file,\n+\t\t   injecting ? IT_MAIN_INJECT : IT_MAIN, 0);\n \n   /* For foo.i, read the original filename foo.c now, for the benefit\n      of the front ends.  */\n   if (CPP_OPTION (pfile, preprocessed))\n     {\n       read_original_filename (pfile);\n-      fname =\n-\tORDINARY_MAP_FILE_NAME\n-\t((LINEMAPS_LAST_ORDINARY_MAP (pfile->line_table)));\n+      fname = (ORDINARY_MAP_FILE_NAME\n+\t       ((LINEMAPS_LAST_ORDINARY_MAP (pfile->line_table))));\n     }\n   return fname;\n }"}, {"sha": "4bafe1cf353513ad4f52a5ab50d153e284b10700", "filename": "libcpp/internal.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bf2ff0d52a90acdc54f18c75d1978f6b4de4609/libcpp%2Finternal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bf2ff0d52a90acdc54f18c75d1978f6b4de4609/libcpp%2Finternal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finternal.h?ref=6bf2ff0d52a90acdc54f18c75d1978f6b4de4609", "patch": "@@ -123,7 +123,9 @@ enum include_type\n    /* Non-directive including mechanisms.  */\n    IT_CMDLINE,  /* -include */\n    IT_DEFAULT,  /* forced header  */\n-   IT_MAIN,     /* main  */\n+   IT_MAIN,     /* main, start on line 1 */\n+   IT_MAIN_INJECT,  /* main, but there will be an injected preamble\n+\t\t       before line 1 */\n \n    IT_DIRECTIVE_HWM = IT_IMPORT + 1,  /* Directives below this.  */\n    IT_HEADER_HWM = IT_DEFAULT + 1     /* Header files below this.  */"}]}