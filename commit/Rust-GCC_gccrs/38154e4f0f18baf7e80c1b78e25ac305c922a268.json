{"sha": "38154e4f0f18baf7e80c1b78e25ac305c922a268", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzgxNTRlNGYwZjE4YmFmN2U4MGMxYjc4ZTI1YWMzMDVjOTIyYTI2OA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-05-28T14:45:57Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-05-28T14:45:57Z"}, "message": "re PR tree-optimization/36339 (not call clobbering variable for non common offset)\n\n2008-05-28  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/36339\n\t* tree-ssa-alias.c (set_initial_properties): Move pt_anything\n\tand clobbering code out of the loop.\n\nFrom-SVN: r136100", "tree": {"sha": "fdcfcc58077d7d3e9047dfbf174616f9d840aa2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fdcfcc58077d7d3e9047dfbf174616f9d840aa2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38154e4f0f18baf7e80c1b78e25ac305c922a268", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38154e4f0f18baf7e80c1b78e25ac305c922a268", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38154e4f0f18baf7e80c1b78e25ac305c922a268", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38154e4f0f18baf7e80c1b78e25ac305c922a268/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "963fc8d00baeca7920bc49e5defc53e290495d85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/963fc8d00baeca7920bc49e5defc53e290495d85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/963fc8d00baeca7920bc49e5defc53e290495d85"}], "stats": {"total": 38, "additions": 25, "deletions": 13}, "files": [{"sha": "43e61a636b03f4062c993a85d8ac5e91f4926e0d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38154e4f0f18baf7e80c1b78e25ac305c922a268/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38154e4f0f18baf7e80c1b78e25ac305c922a268/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=38154e4f0f18baf7e80c1b78e25ac305c922a268", "patch": "@@ -1,3 +1,9 @@\n+2008-05-28  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/36339\n+\t* tree-ssa-alias.c (set_initial_properties): Move pt_anything\n+\tand clobbering code out of the loop.\n+\n 2008-05-28  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n \t* config/s390/constraints.md ('b', 'C', 'D', 'e'): New constraint"}, {"sha": "4f661543a55188c23c632afbacf57151ee39ddb5", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38154e4f0f18baf7e80c1b78e25ac305c922a268/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38154e4f0f18baf7e80c1b78e25ac305c922a268/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=38154e4f0f18baf7e80c1b78e25ac305c922a268", "patch": "@@ -521,6 +521,8 @@ set_initial_properties (struct alias_info *ai)\n   referenced_var_iterator rvi;\n   tree var;\n   tree ptr;\n+  bool any_pt_anything = false;\n+  enum escape_type pt_anything_mask = 0;\n \n   FOR_EACH_REFERENCED_VAR (var, rvi)\n     {\n@@ -573,19 +575,8 @@ set_initial_properties (struct alias_info *ai)\n \t    }\n \t  else if (pi->pt_anything)\n \t    {\n-\t      bitmap_iterator bi;\n-\t      unsigned int j;\n-\n-\t      /* If we do not have the points-to set filled out we\n-\t         still need to honor that this escaped pointer points\n-\t\t to anything.  */\n-\t      EXECUTE_IF_SET_IN_BITMAP (gimple_addressable_vars (cfun),\n-\t\t\t\t\t0, j, bi)\n-\t\t{\n-\t\t  tree var = referenced_var (j);\n-\t\t  if (!unmodifiable_var_p (var))\n-\t\t    mark_call_clobbered (var, pi->escape_mask);\n-\t\t}\n+\t      any_pt_anything = true;\n+\t      pt_anything_mask |= pi->escape_mask;\n \t    }\n \t}\n \n@@ -619,6 +610,21 @@ set_initial_properties (struct alias_info *ai)\n \t  MTAG_GLOBAL (tag) = true;\n \t}\n     }\n+\n+  /* If a pt_anything pointer escaped we need to mark all addressable\n+     variables call clobbered.  */\n+  if (any_pt_anything)\n+    {\n+      bitmap_iterator bi;\n+      unsigned int j;\n+\n+      EXECUTE_IF_SET_IN_BITMAP (gimple_addressable_vars (cfun), 0, j, bi)\n+\t{\n+\t  tree var = referenced_var (j);\n+\t  if (!unmodifiable_var_p (var))\n+\t    mark_call_clobbered (var, pt_anything_mask);\n+\t}\n+    }\n }\n \n /* Compute which variables need to be marked call clobbered because"}]}