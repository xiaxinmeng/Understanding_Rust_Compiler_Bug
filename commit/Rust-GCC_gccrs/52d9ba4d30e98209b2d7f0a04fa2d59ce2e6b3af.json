{"sha": "52d9ba4d30e98209b2d7f0a04fa2d59ce2e6b3af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTJkOWJhNGQzMGU5ODIwOWIyZDdmMGEwNGZhMmQ1OWNlMmU2YjNhZg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-17T06:58:11Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-17T06:58:11Z"}, "message": "[multiple changes]\n\n2014-07-17  Robert Dewar  <dewar@adacore.com>\n\n\t* aspects.ads, aspects.adb: Add entries for aspect Annotate.\n\t* gnat_rm.texi: Document Entity argument for pragma Annotate and\n\tAnnotate aspect.\n\t* sem_ch13.adb (Analyze_Aspect_Specification): Add processing\n\tfor Annotate aspect.\n\t* sem_prag.adb (Analyze_Pragma, case Annotate): Allow optional\n\tEntity argument at end.\n\t* sinfo.ads (N_Aspect_Specification): Add note on Annotate aspect.\n\n2014-07-17  Tristan Gingold  <gingold@adacore.com>\n\n\t* s-imguns.ads: Fix minor typo.\n\n2014-07-17  Thomas Quinot  <quinot@adacore.com>\n\n\t* sprint.adb: Minor reformatting.\n\nFrom-SVN: r212732", "tree": {"sha": "d10ed628bde3ad6b91d1887db6a58b07e4b861d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d10ed628bde3ad6b91d1887db6a58b07e4b861d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52d9ba4d30e98209b2d7f0a04fa2d59ce2e6b3af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52d9ba4d30e98209b2d7f0a04fa2d59ce2e6b3af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52d9ba4d30e98209b2d7f0a04fa2d59ce2e6b3af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52d9ba4d30e98209b2d7f0a04fa2d59ce2e6b3af/comments", "author": null, "committer": null, "parents": [{"sha": "b16ffa33326b35865432c6c08c4d951bfd9e1411", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b16ffa33326b35865432c6c08c4d951bfd9e1411", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b16ffa33326b35865432c6c08c4d951bfd9e1411"}], "stats": {"total": 183, "additions": 167, "deletions": 16}, "files": [{"sha": "971d62c9719b5ca2d41bcbdb7ef5c3cd07a383aa", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52d9ba4d30e98209b2d7f0a04fa2d59ce2e6b3af/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52d9ba4d30e98209b2d7f0a04fa2d59ce2e6b3af/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=52d9ba4d30e98209b2d7f0a04fa2d59ce2e6b3af", "patch": "@@ -1,3 +1,22 @@\n+2014-07-17  Robert Dewar  <dewar@adacore.com>\n+\n+\t* aspects.ads, aspects.adb: Add entries for aspect Annotate.\n+\t* gnat_rm.texi: Document Entity argument for pragma Annotate and\n+\tAnnotate aspect.\n+\t* sem_ch13.adb (Analyze_Aspect_Specification): Add processing\n+\tfor Annotate aspect.\n+\t* sem_prag.adb (Analyze_Pragma, case Annotate): Allow optional\n+\tEntity argument at end.\n+\t* sinfo.ads (N_Aspect_Specification): Add note on Annotate aspect.\n+\n+2014-07-17  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* s-imguns.ads: Fix minor typo.\n+\n+2014-07-17  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sprint.adb: Minor reformatting.\n+\n 2014-07-17  Robert Dewar  <dewar@adacore.com>\n \n \t* sprint.adb (Write_Itype): Print proper header for string"}, {"sha": "88bd789b7928a86fc7fd4c1c5b7ac0515f5cff1a", "filename": "gcc/ada/aspects.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52d9ba4d30e98209b2d7f0a04fa2d59ce2e6b3af/gcc%2Fada%2Faspects.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52d9ba4d30e98209b2d7f0a04fa2d59ce2e6b3af/gcc%2Fada%2Faspects.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.adb?ref=52d9ba4d30e98209b2d7f0a04fa2d59ce2e6b3af", "patch": "@@ -495,6 +495,7 @@ package body Aspects is\n     Aspect_Address                      => Aspect_Address,\n     Aspect_Alignment                    => Aspect_Alignment,\n     Aspect_All_Calls_Remote             => Aspect_All_Calls_Remote,\n+    Aspect_Annotate                     => Aspect_Annotate,\n     Aspect_Async_Readers                => Aspect_Async_Readers,\n     Aspect_Async_Writers                => Aspect_Async_Writers,\n     Aspect_Asynchronous                 => Aspect_Asynchronous,"}, {"sha": "775611737cbb10712a076b13e3bc0b0a9311ab69", "filename": "gcc/ada/aspects.ads", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52d9ba4d30e98209b2d7f0a04fa2d59ce2e6b3af/gcc%2Fada%2Faspects.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52d9ba4d30e98209b2d7f0a04fa2d59ce2e6b3af/gcc%2Fada%2Faspects.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.ads?ref=52d9ba4d30e98209b2d7f0a04fa2d59ce2e6b3af", "patch": "@@ -77,6 +77,7 @@ package Aspects is\n       Aspect_Abstract_State,                -- GNAT\n       Aspect_Address,\n       Aspect_Alignment,\n+      Aspect_Annotate,                      -- GNAT\n       Aspect_Attach_Handler,\n       Aspect_Bit_Order,\n       Aspect_Component_Size,\n@@ -215,6 +216,7 @@ package Aspects is\n \n    Implementation_Defined_Aspect : constant array (Aspect_Id) of Boolean :=\n      (Aspect_Abstract_State           => True,\n+      Aspect_Annotate                 => True,\n       Aspect_Async_Readers            => True,\n       Aspect_Async_Writers            => True,\n       Aspect_Contract_Cases           => True,\n@@ -253,7 +255,8 @@ package Aspects is\n    --  the same aspect attached to the same declaration are allowed.\n \n    No_Duplicates_Allowed : constant array (Aspect_Id) of Boolean :=\n-     (Aspect_Test_Case => False,\n+     (Aspect_Annotate  => False,\n+      Aspect_Test_Case => False,\n       others           => True);\n \n    --  The following subtype defines aspects corresponding to library unit\n@@ -292,6 +295,7 @@ package Aspects is\n       Aspect_Abstract_State          => Expression,\n       Aspect_Address                 => Expression,\n       Aspect_Alignment               => Expression,\n+      Aspect_Annotate                => Expression,\n       Aspect_Attach_Handler          => Expression,\n       Aspect_Bit_Order               => Expression,\n       Aspect_Component_Size          => Expression,\n@@ -370,6 +374,7 @@ package Aspects is\n       Aspect_Address                      => Name_Address,\n       Aspect_Alignment                    => Name_Alignment,\n       Aspect_All_Calls_Remote             => Name_All_Calls_Remote,\n+      Aspect_Annotate                     => Name_Annotate,\n       Aspect_Async_Readers                => Name_Async_Readers,\n       Aspect_Async_Writers                => Name_Async_Writers,\n       Aspect_Asynchronous                 => Name_Asynchronous,\n@@ -663,6 +668,7 @@ package Aspects is\n       Aspect_Write                        => Always_Delay,\n \n       Aspect_Abstract_State               => Never_Delay,\n+      Aspect_Annotate                     => Never_Delay,\n       Aspect_Convention                   => Never_Delay,\n       Aspect_Dimension                    => Never_Delay,\n       Aspect_Dimension_System             => Never_Delay,"}, {"sha": "f7b74037a337616ea57946b540100b861652f331", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52d9ba4d30e98209b2d7f0a04fa2d59ce2e6b3af/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52d9ba4d30e98209b2d7f0a04fa2d59ce2e6b3af/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=52d9ba4d30e98209b2d7f0a04fa2d59ce2e6b3af", "patch": "@@ -287,6 +287,7 @@ Implementation Defined Pragmas\n Implementation Defined Aspects\n \n * Aspect Abstract_State::\n+* Aspect Annotate::\n * Aspect Async_Readers::\n * Aspect Async_Writers::\n * Aspect Contract_Cases::\n@@ -1343,7 +1344,7 @@ in the two situations.\n @noindent\n Syntax:\n @smallexample @c ada\n-pragma Annotate (IDENTIFIER [,IDENTIFIER @{, ARG@}]);\n+pragma Annotate (IDENTIFIER [,IDENTIFIER @{, ARG@}] [entity => local_NAME]);\n \n ARG ::= NAME | EXPRESSION\n @end smallexample\n@@ -1359,7 +1360,8 @@ String literals are assumed to be either of type\n @code{Standard.String} or else @code{Wide_String} or @code{Wide_Wide_String}\n depending on the character literals they contain.\n All other kinds of arguments are analyzed as expressions, and must be\n-unambiguous.\n+unambiguous. The last argument if present must have the identifier\n+@code{Entity} and GNAT verifies that a local name is given.\n \n The analyzed pragma is retained in the tree, but not otherwise processed\n by any part of the GNAT compiler, except to generate corresponding note\n@@ -7932,6 +7934,7 @@ clause.\n \n @menu\n * Aspect Abstract_State::\n+* Aspect Annotate::\n * Aspect Async_Readers::\n * Aspect Async_Writers::\n * Aspect Contract_Cases::\n@@ -7981,6 +7984,24 @@ clause.\n @noindent\n This aspect is equivalent to pragma @code{Abstract_State}.\n \n+@node Aspect Annotate\n+@unnumberedsec Annotate\n+@findex Annotate\n+@noindent\n+There are three forms of this aspect (where ID is an identifier,\n+and ARG is a general expression).\n+\n+@table @code\n+@item Annotate => ID\n+Equivalent to @code{pragma Annotate (ID, Entity => Name);}\n+\n+@item Annotate => (ID)\n+Equivalent to @code{pragma Annotate (ID, Entity => Name);}\n+\n+@item Annotate => (ID ,ID @{, ARG@})\n+Equivalent to @code{pragma Annotate (ID, ID @{, ARG@}, Entity => Name);}\n+@end table\n+\n @node Aspect Async_Readers\n @unnumberedsec Aspect Async_Readers\n @findex Async_Readers"}, {"sha": "c6f733a739d35cc67a7616b7909fdb239db7d49d", "filename": "gcc/ada/s-imguns.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52d9ba4d30e98209b2d7f0a04fa2d59ce2e6b3af/gcc%2Fada%2Fs-imguns.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52d9ba4d30e98209b2d7f0a04fa2d59ce2e6b3af/gcc%2Fada%2Fs-imguns.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imguns.ads?ref=52d9ba4d30e98209b2d7f0a04fa2d59ce2e6b3af", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -30,7 +30,7 @@\n ------------------------------------------------------------------------------\n \n --  This package contains the routines for supporting the Image attribute for\n---  modular integer types up to Size Modular'Size, and also for conversion\n+--  modular integer types up to Size Unsigned'Size, and also for conversion\n --  operations required in Text_IO.Modular_IO for such types.\n \n with System.Unsigned_Types;"}, {"sha": "2381f5c7d746f8995847aa8962f90c28067181b4", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 76, "deletions": 1, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52d9ba4d30e98209b2d7f0a04fa2d59ce2e6b3af/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52d9ba4d30e98209b2d7f0a04fa2d59ce2e6b3af/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=52d9ba4d30e98209b2d7f0a04fa2d59ce2e6b3af", "patch": "@@ -1697,7 +1697,6 @@ package body Sem_Ch13 is\n                --  Corresponds to pragma Implemented, construct the pragma\n \n                when Aspect_Synchronization =>\n-\n                   Make_Aitem_Pragma\n                     (Pragma_Argument_Associations => New_List (\n                        Make_Pragma_Argument_Association (Loc,\n@@ -2480,6 +2479,81 @@ package body Sem_Ch13 is\n                      end;\n                   end if;\n \n+               --  Case 2e: Annotate aspect\n+\n+               when Aspect_Annotate =>\n+                  declare\n+                     Args  : List_Id;\n+                     Pargs : List_Id;\n+                     Arg   : Node_Id;\n+\n+                  begin\n+                     --  The argument can be a single identifier\n+\n+                     if Nkind (Expr) = N_Identifier then\n+\n+                        --  One level of parens is allowed\n+\n+                        if Paren_Count (Expr) > 1 then\n+                           Error_Msg_F (\"extra parentheses ignored\", Expr);\n+                        end if;\n+\n+                        Set_Paren_Count (Expr, 0);\n+\n+                        --  Add the single item to the list\n+\n+                        Args := New_List (Expr);\n+\n+                     --  Otherwise we must have an aggregate\n+\n+                     elsif Nkind (Expr) = N_Aggregate then\n+\n+                        --  Must be positional\n+\n+                        if Present (Component_Associations (Expr)) then\n+                           Error_Msg_F\n+                             (\"purely positional aggregate required\", Expr);\n+                           goto Continue;\n+                        end if;\n+\n+                        --  Must not be parenthesized\n+\n+                        if Paren_Count (Expr) /= 0 then\n+                           Error_Msg_F (\"extra parentheses ignored\", Expr);\n+                        end if;\n+\n+                        --  List of arguments is list of aggregate expressions\n+\n+                        Args := Expressions (Expr);\n+\n+                     --  Anything else is illegal\n+\n+                     else\n+                        Error_Msg_F (\"wrong form for Annotate aspect\", Expr);\n+                        goto Continue;\n+                     end if;\n+\n+                     --  Prepare pragma arguments\n+\n+                     Pargs := New_List;\n+                     Arg := First (Args);\n+                     while Present (Arg) loop\n+                        Append_To (Pargs,\n+                          Make_Pragma_Argument_Association (Sloc (Arg),\n+                            Expression => Relocate_Node (Arg)));\n+                        Next (Arg);\n+                     end loop;\n+\n+                     Append_To (Pargs,\n+                       Make_Pragma_Argument_Association (Sloc (Ent),\n+                         Chars      => Name_Entity,\n+                         Expression => Ent));\n+\n+                     Make_Aitem_Pragma\n+                       (Pragma_Argument_Associations => Pargs,\n+                        Pragma_Name                  => Name_Annotate);\n+                  end;\n+\n                --  Case 3 : Aspects that don't correspond to pragma/attribute\n                --  definition clause.\n \n@@ -8271,6 +8345,7 @@ package body Sem_Ch13 is\n          --  Here is the list of aspects that don't require delay analysis\n \n          when Aspect_Abstract_State       |\n+              Aspect_Annotate             |\n               Aspect_Contract_Cases       |\n               Aspect_Dimension            |\n               Aspect_Dimension_System     |"}, {"sha": "5e2667224db45ff7005937038ce0a7ec567bbff3", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52d9ba4d30e98209b2d7f0a04fa2d59ce2e6b3af/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52d9ba4d30e98209b2d7f0a04fa2d59ce2e6b3af/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=52d9ba4d30e98209b2d7f0a04fa2d59ce2e6b3af", "patch": "@@ -11027,7 +11027,8 @@ package body Sem_Prag is\n          -- Annotate --\n          --------------\n \n-         --  pragma Annotate (IDENTIFIER [, IDENTIFIER {, ARG}]);\n+         --  pragma Annotate\n+         --    (IDENTIFIER [, IDENTIFIER {, ARG}] [,Entity => local_NAME]);\n          --  ARG ::= NAME | EXPRESSION\n \n          --  The first two arguments are by convention intended to refer to an\n@@ -11041,6 +11042,29 @@ package body Sem_Prag is\n          begin\n             GNAT_Pragma;\n             Check_At_Least_N_Arguments (1);\n+\n+            --  See if last argument is Entity => local_Name, and if so process\n+            --  and then remove it for remaining processing.\n+\n+            declare\n+               Last_Arg : constant Node_Id :=\n+                            Last (Pragma_Argument_Associations (N));\n+\n+            begin\n+               if Nkind (Last_Arg) = N_Pragma_Argument_Association\n+                 and then Chars (Last_Arg) = Name_Entity\n+               then\n+                  Check_Arg_Is_Local_Name (Last_Arg);\n+                  Arg_Count := Arg_Count - 1;\n+\n+                  --  Not allowed in compiler units (bootstrap issues)\n+\n+                  Check_Compiler_Unit (\"Entity for pragma Annotate\", N);\n+               end if;\n+            end;\n+\n+            --  Continue processing with last argument removed for now\n+\n             Check_Arg_Is_Identifier (Arg1);\n             Check_No_Identifiers;\n             Store_Note (N);\n@@ -21276,6 +21300,7 @@ package body Sem_Prag is\n             declare\n                Last_Arg : constant Node_Id :=\n                             Last (Pragma_Argument_Associations (N));\n+\n             begin\n                if Nkind (Last_Arg) = N_Pragma_Argument_Association\n                  and then Chars (Last_Arg) = Name_Reason\n@@ -21287,7 +21312,7 @@ package body Sem_Prag is\n \n                   --  Not allowed in compiler units (bootstrap issues)\n \n-                     Check_Compiler_Unit (\"Reason for pragma Warnings\", N);\n+                  Check_Compiler_Unit (\"Reason for pragma Warnings\", N);\n \n                --  No REASON string, set null string as reason\n "}, {"sha": "31ebb5949a39bb7f3025fff7a22cf93468a714df", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52d9ba4d30e98209b2d7f0a04fa2d59ce2e6b3af/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52d9ba4d30e98209b2d7f0a04fa2d59ce2e6b3af/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=52d9ba4d30e98209b2d7f0a04fa2d59ce2e6b3af", "patch": "@@ -1966,12 +1966,12 @@ package Sinfo is\n    --    N_SCIL_Dispatch_Table_Tag_Init node, this is the type being declared).\n \n    --  SCIL_Controlling_Tag (Node5-Sem)\n-   --    Present in N_SCIL_Dispatching_Call nodes. References the\n-   --    controlling tag of a dispatching call. This is usually an\n-   --    N_Selected_Component node (for a _tag component), but may\n-   --    be an N_Object_Declaration or N_Parameter_Specification node\n-   --    in some cases (e.g., for a call to a classwide streaming operation\n-   --    or to an instance of Ada.Tags.Generic_Dispatching_Constructor).\n+   --    Present in N_SCIL_Dispatching_Call nodes. References the controlling\n+   --    tag of a dispatching call. This is usually an N_Selected_Component\n+   --    node (for a _tag component), but may be an N_Object_Declaration or\n+   --    N_Parameter_Specification node in some cases (e.g., for a call to\n+   --    a classwide streaming operation or a call to an instance of\n+   --    Ada.Tags.Generic_Dispatching_Constructor).\n \n    --  SCIL_Tag_Value (Node5-Sem)\n    --    Present in N_SCIL_Membership_Test nodes. Used to reference the tag\n@@ -7069,6 +7069,10 @@ package Sinfo is\n \n       --     ASPECT_DEFINITION ::= NAME | EXPRESSION\n \n+      --  Note that for Annotate, the ASPECT_DEFINITION is a pure positional\n+      --  aggregate with the elements of the aggregate corresponding to the\n+      --  successive arguments of the corresponding pragma.\n+\n       --  See separate package Aspects for details on the incorporation of\n       --  these nodes into the tree, and how aspect specifications for a given\n       --  declaration node are associated with that node."}, {"sha": "29526173db7b04333e1ea01b059a9b95c25ef76b", "filename": "gcc/ada/sprint.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52d9ba4d30e98209b2d7f0a04fa2d59ce2e6b3af/gcc%2Fada%2Fsprint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52d9ba4d30e98209b2d7f0a04fa2d59ce2e6b3af/gcc%2Fada%2Fsprint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsprint.adb?ref=52d9ba4d30e98209b2d7f0a04fa2d59ce2e6b3af", "patch": "@@ -2247,7 +2247,7 @@ package body Sprint is\n                      Write_Str_With_Col_Check (\"not null \");\n                   end if;\n \n-                  --  Print type, we used to print the Object_Definition from\n+                  --  Print type. We used to print the Object_Definition from\n                   --  the node, but it is much more useful to print the Etype\n                   --  of the defining identifier for the case where the nominal\n                   --  type is an unconstrained array type. For example, this\n@@ -2267,7 +2267,7 @@ package body Sprint is\n                      then\n                         Sprint_Node (Etype (Def_Id));\n \n-                        --  In other cases, the nominal type is fine to print\n+                     --  In other cases, the nominal type is fine to print\n \n                      else\n                         Sprint_Node (Odef);"}]}