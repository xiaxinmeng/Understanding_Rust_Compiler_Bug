{"sha": "757b16440b5d9edd0979cd8b31fd5a92bc537b7b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzU3YjE2NDQwYjVkOWVkZDA5NzljZDhiMzFmZDVhOTJiYzUzN2I3Yg==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2013-09-17T12:23:54Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2013-09-17T12:23:54Z"}, "message": "re PR libstdc++/58338 (Add noexcept to functions with a narrow contract)\n\n2013-09-17  Marc Glisse  <marc.glisse@inria.fr>\n\n\tPR libstdc++/58338\n\t* include/bits/stl_vector.h (vector::vector(),\n\tvector::vector(const allocator_type&)): Merge.\n\t(_Vector_impl::_Vector_impl(_Tp_alloc_type const&),\n\t_Vector_impl::_Vector_impl(_Tp_alloc_type&&),\n\t_Vector_impl::_M_swap_data,\n\t_Vector_base::_Vector_base(const allocator_type&),\n\t_Vector_base::_Vector_base(allocator_type&&),\n\t_Vector_base::_Vector_base(_Vector_base&&), _Vector_base::~_Vector_base,\n\tvector::vector(const allocator_type&), vector::operator[],\n\tvector::operator[] const, vector::front, vector::front const,\n\tvector::back, vector::back const, vector::pop_back,\n\tvector::_M_erase_at_end): Mark as noexcept.\n\t* include/debug/vector (vector::vector(const _Allocator&),\n\tvector::operator[], vector::operator[] const, vector::front,\n\tvector::front const, vector::back, vector::back const, vector::pop_back,\n\t_M_requires_reallocation, _M_update_guaranteed_capacity,\n\t_M_invalidate_after_nth): Mark as noexcept.\n\t* include/profile/vector (vector::vector(const _Allocator&),\n\tvector::operator[], vector::operator[] const, vector::front,\n\tvector::front const, vector::back, vector::back const): Mark as\n\tnoexcept.\n\t(vector::vector(vector&&, const _Allocator&)): Remove wrong noexcept.\n\t* testsuite/23_containers/vector/requirements/dr438/assign_neg.cc:\n\tAdjust line number.\n\t* testsuite/23_containers/vector/requirements/dr438/\n\tconstructor_1_neg.cc: Likewise.\n\t* testsuite/23_containers/vector/requirements/dr438/\n\tconstructor_2_neg.cc: Likewise.\n\t* testsuite/23_containers/vector/requirements/dr438/insert_neg.cc:\n\tLikewise.\n\nFrom-SVN: r202650", "tree": {"sha": "c9b000f0e9a5f65eab4b34d38bb4d8815a21eefe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9b000f0e9a5f65eab4b34d38bb4d8815a21eefe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/757b16440b5d9edd0979cd8b31fd5a92bc537b7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/757b16440b5d9edd0979cd8b31fd5a92bc537b7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/757b16440b5d9edd0979cd8b31fd5a92bc537b7b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/757b16440b5d9edd0979cd8b31fd5a92bc537b7b/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9a0ac98faf0823b9c4fe1c1c129ba2c0445d1247", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a0ac98faf0823b9c4fe1c1c129ba2c0445d1247", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a0ac98faf0823b9c4fe1c1c129ba2c0445d1247"}], "stats": {"total": 118, "additions": 73, "deletions": 45}, "files": [{"sha": "31fa21f0580ce7e0fb532c71b812c2a4df2124cf", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/757b16440b5d9edd0979cd8b31fd5a92bc537b7b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/757b16440b5d9edd0979cd8b31fd5a92bc537b7b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=757b16440b5d9edd0979cd8b31fd5a92bc537b7b", "patch": "@@ -1,3 +1,37 @@\n+2013-09-17  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR libstdc++/58338\n+\t* include/bits/stl_vector.h (vector::vector(),\n+\tvector::vector(const allocator_type&)): Merge.\n+\t(_Vector_impl::_Vector_impl(_Tp_alloc_type const&),\n+\t_Vector_impl::_Vector_impl(_Tp_alloc_type&&),\n+\t_Vector_impl::_M_swap_data,\n+\t_Vector_base::_Vector_base(const allocator_type&),\n+\t_Vector_base::_Vector_base(allocator_type&&),\n+\t_Vector_base::_Vector_base(_Vector_base&&), _Vector_base::~_Vector_base,\n+\tvector::vector(const allocator_type&), vector::operator[],\n+\tvector::operator[] const, vector::front, vector::front const,\n+\tvector::back, vector::back const, vector::pop_back,\n+\tvector::_M_erase_at_end): Mark as noexcept.\n+\t* include/debug/vector (vector::vector(const _Allocator&),\n+\tvector::operator[], vector::operator[] const, vector::front,\n+\tvector::front const, vector::back, vector::back const, vector::pop_back,\n+\t_M_requires_reallocation, _M_update_guaranteed_capacity,\n+\t_M_invalidate_after_nth): Mark as noexcept.\n+\t* include/profile/vector (vector::vector(const _Allocator&),\n+\tvector::operator[], vector::operator[] const, vector::front,\n+\tvector::front const, vector::back, vector::back const): Mark as\n+\tnoexcept.\n+\t(vector::vector(vector&&, const _Allocator&)): Remove wrong noexcept.\n+\t* testsuite/23_containers/vector/requirements/dr438/assign_neg.cc:\n+\tAdjust line number.\n+\t* testsuite/23_containers/vector/requirements/dr438/\n+\tconstructor_1_neg.cc: Likewise.\n+\t* testsuite/23_containers/vector/requirements/dr438/\n+\tconstructor_2_neg.cc: Likewise.\n+\t* testsuite/23_containers/vector/requirements/dr438/insert_neg.cc:\n+\tLikewise.\n+\n 2013-09-14  Tim Shen  <timshen91@gmail.com>\n \n \t* include/bits/regex.h (regex_match<>, regex_search<>):"}, {"sha": "03850b5e28f9f7920148c8206d2bc4229854c48e", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 16, "deletions": 22, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/757b16440b5d9edd0979cd8b31fd5a92bc537b7b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/757b16440b5d9edd0979cd8b31fd5a92bc537b7b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=757b16440b5d9edd0979cd8b31fd5a92bc537b7b", "patch": "@@ -87,18 +87,18 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t: _Tp_alloc_type(), _M_start(0), _M_finish(0), _M_end_of_storage(0)\n \t{ }\n \n-\t_Vector_impl(_Tp_alloc_type const& __a)\n+\t_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT\n \t: _Tp_alloc_type(__a), _M_start(0), _M_finish(0), _M_end_of_storage(0)\n \t{ }\n \n #if __cplusplus >= 201103L\n-\t_Vector_impl(_Tp_alloc_type&& __a)\n+\t_Vector_impl(_Tp_alloc_type&& __a) noexcept\n \t: _Tp_alloc_type(std::move(__a)),\n \t  _M_start(0), _M_finish(0), _M_end_of_storage(0)\n \t{ }\n #endif\n \n-\tvoid _M_swap_data(_Vector_impl& __x)\n+\tvoid _M_swap_data(_Vector_impl& __x) _GLIBCXX_NOEXCEPT\n \t{\n \t  std::swap(_M_start, __x._M_start);\n \t  std::swap(_M_finish, __x._M_finish);\n@@ -124,7 +124,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       _Vector_base()\n       : _M_impl() { }\n \n-      _Vector_base(const allocator_type& __a)\n+      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT\n       : _M_impl(__a) { }\n \n       _Vector_base(size_t __n)\n@@ -136,10 +136,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       { _M_create_storage(__n); }\n \n #if __cplusplus >= 201103L\n-      _Vector_base(_Tp_alloc_type&& __a)\n+      _Vector_base(_Tp_alloc_type&& __a) noexcept\n       : _M_impl(std::move(__a)) { }\n \n-      _Vector_base(_Vector_base&& __x)\n+      _Vector_base(_Vector_base&& __x) noexcept\n       : _M_impl(std::move(__x._M_get_Tp_allocator()))\n       { this->_M_impl._M_swap_data(__x._M_impl); }\n \n@@ -156,7 +156,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       }\n #endif\n \n-      ~_Vector_base()\n+      ~_Vector_base() _GLIBCXX_NOEXCEPT\n       { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage\n \t\t      - this->_M_impl._M_start); }\n \n@@ -242,18 +242,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     public:\n       // [23.2.4.1] construct/copy/destroy\n       // (assign() and get_allocator() are also listed in this section)\n-      /**\n-       *  @brief  Default constructor creates no elements.\n-       */\n-      vector()\n-      : _Base() { }\n-\n       /**\n        *  @brief  Creates a %vector with no elements.\n        *  @param  __a  An allocator object.\n        */\n       explicit\n-      vector(const allocator_type& __a)\n+      vector(const allocator_type& __a = allocator_type()) _GLIBCXX_NOEXCEPT\n       : _Base(__a) { }\n \n #if __cplusplus >= 201103L\n@@ -767,7 +761,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  see at().)\n        */\n       reference\n-      operator[](size_type __n)\n+      operator[](size_type __n) _GLIBCXX_NOEXCEPT\n       { return *(this->_M_impl._M_start + __n); }\n \n       /**\n@@ -782,7 +776,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  see at().)\n        */\n       const_reference\n-      operator[](size_type __n) const\n+      operator[](size_type __n) const _GLIBCXX_NOEXCEPT\n       { return *(this->_M_impl._M_start + __n); }\n \n     protected:\n@@ -836,31 +830,31 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  element of the %vector.\n        */\n       reference\n-      front()\n+      front() _GLIBCXX_NOEXCEPT\n       { return *begin(); }\n \n       /**\n        *  Returns a read-only (constant) reference to the data at the first\n        *  element of the %vector.\n        */\n       const_reference\n-      front() const\n+      front() const _GLIBCXX_NOEXCEPT\n       { return *begin(); }\n \n       /**\n        *  Returns a read/write reference to the data at the last\n        *  element of the %vector.\n        */\n       reference\n-      back()\n+      back() _GLIBCXX_NOEXCEPT\n       { return *(end() - 1); }\n       \n       /**\n        *  Returns a read-only (constant) reference to the data at the\n        *  last element of the %vector.\n        */\n       const_reference\n-      back() const\n+      back() const _GLIBCXX_NOEXCEPT\n       { return *(end() - 1); }\n \n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n@@ -934,7 +928,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  called.\n        */\n       void\n-      pop_back()\n+      pop_back() _GLIBCXX_NOEXCEPT\n       {\n \t--this->_M_impl._M_finish;\n \t_Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);\n@@ -1415,7 +1409,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,\n       // _M_assign_aux.\n       void\n-      _M_erase_at_end(pointer __pos)\n+      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT\n       {\n \tstd::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());\n \tthis->_M_impl._M_finish = __pos;"}, {"sha": "e5b80649b9a7741734c4c17f9b8c963b47bf16b4", "filename": "libstdc++-v3/include/debug/vector", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/757b16440b5d9edd0979cd8b31fd5a92bc537b7b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/757b16440b5d9edd0979cd8b31fd5a92bc537b7b/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector?ref=757b16440b5d9edd0979cd8b31fd5a92bc537b7b", "patch": "@@ -76,7 +76,7 @@ namespace __debug\n \n       // 23.2.4.1 construct/copy/destroy:\n       explicit\n-      vector(const _Allocator& __a = _Allocator())\n+      vector(const _Allocator& __a = _Allocator()) _GLIBCXX_NOEXCEPT\n       : _Base(__a), _M_guaranteed_capacity(0) { }\n \n #if __cplusplus >= 201103L\n@@ -341,14 +341,14 @@ namespace __debug\n \n       // element access:\n       reference\n-      operator[](size_type __n)\n+      operator[](size_type __n) _GLIBCXX_NOEXCEPT\n       {\n \t__glibcxx_check_subscript(__n);\n \treturn _M_base()[__n];\n       }\n \n       const_reference\n-      operator[](size_type __n) const\n+      operator[](size_type __n) const _GLIBCXX_NOEXCEPT\n       {\n \t__glibcxx_check_subscript(__n);\n \treturn _M_base()[__n];\n@@ -357,28 +357,28 @@ namespace __debug\n       using _Base::at;\n \n       reference\n-      front()\n+      front() _GLIBCXX_NOEXCEPT\n       {\n \t__glibcxx_check_nonempty();\n \treturn _Base::front();\n       }\n \n       const_reference\n-      front() const\n+      front() const _GLIBCXX_NOEXCEPT\n       {\n \t__glibcxx_check_nonempty();\n \treturn _Base::front();\n       }\n \n       reference\n-      back()\n+      back() _GLIBCXX_NOEXCEPT\n       {\n \t__glibcxx_check_nonempty();\n \treturn _Base::back();\n       }\n \n       const_reference\n-      back() const\n+      back() const _GLIBCXX_NOEXCEPT\n       {\n \t__glibcxx_check_nonempty();\n \treturn _Base::back();\n@@ -419,7 +419,7 @@ namespace __debug\n #endif\n \n       void\n-      pop_back()\n+      pop_back() _GLIBCXX_NOEXCEPT\n       {\n \t__glibcxx_check_nonempty();\n \tthis->_M_invalidate_if(_Equal(--_Base::end()));\n@@ -630,18 +630,18 @@ namespace __debug\n       size_type _M_guaranteed_capacity;\n \n       bool\n-      _M_requires_reallocation(size_type __elements)\n+      _M_requires_reallocation(size_type __elements) _GLIBCXX_NOEXCEPT\n       { return __elements > this->capacity(); }\n \n       void\n-      _M_update_guaranteed_capacity()\n+      _M_update_guaranteed_capacity() _GLIBCXX_NOEXCEPT\n       {\n \tif (this->size() > _M_guaranteed_capacity)\n \t  _M_guaranteed_capacity = this->size();\n       }\n \n       void\n-      _M_invalidate_after_nth(difference_type __n)\n+      _M_invalidate_after_nth(difference_type __n) _GLIBCXX_NOEXCEPT\n       {\n \ttypedef __gnu_debug::_After_nth_from<_Base_const_iterator> _After_nth;\n \tthis->_M_invalidate_if(_After_nth(__n, _Base::begin()));"}, {"sha": "8f79df7f07c454fc0b5ec9538cfaa9f356d87681", "filename": "libstdc++-v3/include/profile/vector", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/757b16440b5d9edd0979cd8b31fd5a92bc537b7b/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/757b16440b5d9edd0979cd8b31fd5a92bc537b7b/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fvector?ref=757b16440b5d9edd0979cd8b31fd5a92bc537b7b", "patch": "@@ -78,7 +78,7 @@ namespace __profile\n \n       // 23.2.4.1 construct/copy/destroy:\n       explicit\n-      vector(const _Allocator& __a = _Allocator())\n+      vector(const _Allocator& __a = _Allocator()) _GLIBCXX_NOEXCEPT\n       : _Base(__a)\n       {\n         __profcxx_vector_construct(this, this->capacity());\n@@ -156,7 +156,7 @@ namespace __profile\n         __profcxx_vector_construct2(this);\n       }\n \n-      vector(vector&& __x, const _Allocator& __a) noexcept\n+      vector(vector&& __x, const _Allocator& __a)\n       : _Base(std::move(__x), __a)\n       {\n         __profcxx_vector_construct(this, this->capacity());\n@@ -292,13 +292,13 @@ namespace __profile\n \n       // element access:\n       reference\n-      operator[](size_type __n)\n+      operator[](size_type __n) _GLIBCXX_NOEXCEPT\n       {\n         __profcxx_vector_invalid_operator(this);\n         return _M_base()[__n];\n       }\n       const_reference\n-      operator[](size_type __n) const\n+      operator[](size_type __n) const _GLIBCXX_NOEXCEPT\n       {\n         __profcxx_vector_invalid_operator(this);\n         return _M_base()[__n];\n@@ -307,25 +307,25 @@ namespace __profile\n       using _Base::at;\n \n       reference\n-      front()\n+      front() _GLIBCXX_NOEXCEPT\n       { \n         return _Base::front();\n       }\n \n       const_reference\n-      front() const\n+      front() const _GLIBCXX_NOEXCEPT\n       {\n \treturn _Base::front();\n       }\n \n       reference\n-      back()\n+      back() _GLIBCXX_NOEXCEPT\n       {\n \treturn _Base::back();\n       }\n \n       const_reference\n-      back() const\n+      back() const _GLIBCXX_NOEXCEPT\n       {\n \treturn _Base::back();\n       }"}, {"sha": "388e57182cc46e6ae19d40699370b6fad724a265", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/757b16440b5d9edd0979cd8b31fd5a92bc537b7b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/757b16440b5d9edd0979cd8b31fd5a92bc537b7b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=757b16440b5d9edd0979cd8b31fd5a92bc537b7b", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1308 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1302 }\n \n #include <vector>\n "}, {"sha": "68cfab064f8e9e89d9f21b861ce10273a2cc6a73", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/757b16440b5d9edd0979cd8b31fd5a92bc537b7b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/757b16440b5d9edd0979cd8b31fd5a92bc537b7b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=757b16440b5d9edd0979cd8b31fd5a92bc537b7b", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1234 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1228 }\n \n #include <vector>\n "}, {"sha": "35c03286a26247bf696df24aaece447e91861e5e", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/757b16440b5d9edd0979cd8b31fd5a92bc537b7b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/757b16440b5d9edd0979cd8b31fd5a92bc537b7b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=757b16440b5d9edd0979cd8b31fd5a92bc537b7b", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1234 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1228 }\n \n #include <vector>\n #include <utility>"}, {"sha": "6ab70388b83322dfc2d621dec50c66c8bf04503a", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/757b16440b5d9edd0979cd8b31fd5a92bc537b7b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/757b16440b5d9edd0979cd8b31fd5a92bc537b7b/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=757b16440b5d9edd0979cd8b31fd5a92bc537b7b", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1349 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1343 }\n \n #include <vector>\n "}]}