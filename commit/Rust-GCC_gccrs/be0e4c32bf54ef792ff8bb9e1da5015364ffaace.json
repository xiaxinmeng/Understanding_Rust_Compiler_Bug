{"sha": "be0e4c32bf54ef792ff8bb9e1da5015364ffaace", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmUwZTRjMzJiZjU0ZWY3OTJmZjhiYjllMWRhNTAxNTM2NGZmYWFjZQ==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2019-03-06T23:22:18Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-16T05:09:30Z"}, "message": "AVX512FP16: Add vcvtuw2ph/vcvtw2ph/vcvtdq2ph/vcvtudq2ph/vcvtqq2ph/vcvtuqq2ph\n\ngcc/ChangeLog:\n\n\t* config/i386/avx512fp16intrin.h (_mm512_cvtepi32_ph): New\n\tintrinsic.\n\t(_mm512_mask_cvtepi32_ph): Likewise.\n\t(_mm512_maskz_cvtepi32_ph): Likewise.\n\t(_mm512_cvt_roundepi32_ph): Likewise.\n\t(_mm512_mask_cvt_roundepi32_ph): Likewise.\n\t(_mm512_maskz_cvt_roundepi32_ph): Likewise.\n\t(_mm512_cvtepu32_ph): Likewise.\n\t(_mm512_mask_cvtepu32_ph): Likewise.\n\t(_mm512_maskz_cvtepu32_ph): Likewise.\n\t(_mm512_cvt_roundepu32_ph): Likewise.\n\t(_mm512_mask_cvt_roundepu32_ph): Likewise.\n\t(_mm512_maskz_cvt_roundepu32_ph): Likewise.\n\t(_mm512_cvtepi64_ph): Likewise.\n\t(_mm512_mask_cvtepi64_ph): Likewise.\n\t(_mm512_maskz_cvtepi64_ph): Likewise.\n\t(_mm512_cvt_roundepi64_ph): Likewise.\n\t(_mm512_mask_cvt_roundepi64_ph): Likewise.\n\t(_mm512_maskz_cvt_roundepi64_ph): Likewise.\n\t(_mm512_cvtepu64_ph): Likewise.\n\t(_mm512_mask_cvtepu64_ph): Likewise.\n\t(_mm512_maskz_cvtepu64_ph): Likewise.\n\t(_mm512_cvt_roundepu64_ph): Likewise.\n\t(_mm512_mask_cvt_roundepu64_ph): Likewise.\n\t(_mm512_maskz_cvt_roundepu64_ph): Likewise.\n\t(_mm512_cvtepi16_ph): Likewise.\n\t(_mm512_mask_cvtepi16_ph): Likewise.\n\t(_mm512_maskz_cvtepi16_ph): Likewise.\n\t(_mm512_cvt_roundepi16_ph): Likewise.\n\t(_mm512_mask_cvt_roundepi16_ph): Likewise.\n\t(_mm512_maskz_cvt_roundepi16_ph): Likewise.\n\t(_mm512_cvtepu16_ph): Likewise.\n\t(_mm512_mask_cvtepu16_ph): Likewise.\n\t(_mm512_maskz_cvtepu16_ph): Likewise.\n\t(_mm512_cvt_roundepu16_ph): Likewise.\n\t(_mm512_mask_cvt_roundepu16_ph): Likewise.\n\t(_mm512_maskz_cvt_roundepu16_ph): Likewise.\n\t* config/i386/avx512fp16vlintrin.h (_mm_cvtepi32_ph): New\n\tintrinsic.\n\t(_mm_mask_cvtepi32_ph): Likewise.\n\t(_mm_maskz_cvtepi32_ph): Likewise.\n\t(_mm256_cvtepi32_ph): Likewise.\n\t(_mm256_mask_cvtepi32_ph): Likewise.\n\t(_mm256_maskz_cvtepi32_ph): Likewise.\n\t(_mm_cvtepu32_ph): Likewise.\n\t(_mm_mask_cvtepu32_ph): Likewise.\n\t(_mm_maskz_cvtepu32_ph): Likewise.\n\t(_mm256_cvtepu32_ph): Likewise.\n\t(_mm256_mask_cvtepu32_ph): Likewise.\n\t(_mm256_maskz_cvtepu32_ph): Likewise.\n\t(_mm_cvtepi64_ph): Likewise.\n\t(_mm_mask_cvtepi64_ph): Likewise.\n\t(_mm_maskz_cvtepi64_ph): Likewise.\n\t(_mm256_cvtepi64_ph): Likewise.\n\t(_mm256_mask_cvtepi64_ph): Likewise.\n\t(_mm256_maskz_cvtepi64_ph): Likewise.\n\t(_mm_cvtepu64_ph): Likewise.\n\t(_mm_mask_cvtepu64_ph): Likewise.\n\t(_mm_maskz_cvtepu64_ph): Likewise.\n\t(_mm256_cvtepu64_ph): Likewise.\n\t(_mm256_mask_cvtepu64_ph): Likewise.\n\t(_mm256_maskz_cvtepu64_ph): Likewise.\n\t(_mm_cvtepi16_ph): Likewise.\n\t(_mm_mask_cvtepi16_ph): Likewise.\n\t(_mm_maskz_cvtepi16_ph): Likewise.\n\t(_mm256_cvtepi16_ph): Likewise.\n\t(_mm256_mask_cvtepi16_ph): Likewise.\n\t(_mm256_maskz_cvtepi16_ph): Likewise.\n\t(_mm_cvtepu16_ph): Likewise.\n\t(_mm_mask_cvtepu16_ph): Likewise.\n\t(_mm_maskz_cvtepu16_ph): Likewise.\n\t(_mm256_cvtepu16_ph): Likewise.\n\t(_mm256_mask_cvtepu16_ph): Likewise.\n\t(_mm256_maskz_cvtepu16_ph): Likewise.\n\t* config/i386/i386-builtin-types.def: Add corresponding builtin types.\n\t* config/i386/i386-builtin.def: Add corresponding new builtins.\n\t* config/i386/i386-expand.c\n\t(ix86_expand_args_builtin): Handle new builtin types.\n\t(ix86_expand_round_builtin): Ditto.\n\t* config/i386/i386-modes.def: Declare V2HF and V6HF.\n\t* config/i386/sse.md (VI2H_AVX512VL): New.\n\t(qq2phsuff): Ditto.\n\t(sseintvecmode): Add HF vector modes.\n\t(avx512fp16_vcvt<floatsuffix><sseintconvert>2ph_<mode><mask_name><round_name>):\n\tNew.\n\t(avx512fp16_vcvt<floatsuffix><sseintconvert>2ph_<mode>): Ditto.\n\t(*avx512fp16_vcvt<floatsuffix><sseintconvert>2ph_<mode>): Ditto.\n\t(avx512fp16_vcvt<floatsuffix><sseintconvert>2ph_<mode>_mask): Ditto.\n\t(*avx512fp16_vcvt<floatsuffix><sseintconvert>2ph_<mode>_mask): Ditto.\n\t(*avx512fp16_vcvt<floatsuffix><sseintconvert>2ph_<mode>_mask_1): Ditto.\n\t(avx512fp16_vcvt<floatsuffix>qq2ph_v2di): Ditto.\n\t(*avx512fp16_vcvt<floatsuffix>qq2ph_v2di): Ditto.\n\t(avx512fp16_vcvt<floatsuffix>qq2ph_v2di_mask): Ditto.\n\t(*avx512fp16_vcvt<floatsuffix>qq2ph_v2di_mask): Ditto.\n\t(*avx512fp16_vcvt<floatsuffix>qq2ph_v2di_mask_1): Ditto.\n\t* config/i386/subst.md (round_qq2phsuff): New subst_attr.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx-1.c: Add test for new builtins.\n\t* gcc.target/i386/sse-13.c: Ditto.\n\t* gcc.target/i386/sse-23.c: Ditto.\n\t* gcc.target/i386/sse-14.c: Add test for new intrinsics.\n\t* gcc.target/i386/sse-22.c: Ditto.", "tree": {"sha": "bfd679639a34a82a1e2a640abc3d24d02a1310ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bfd679639a34a82a1e2a640abc3d24d02a1310ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be0e4c32bf54ef792ff8bb9e1da5015364ffaace", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be0e4c32bf54ef792ff8bb9e1da5015364ffaace", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be0e4c32bf54ef792ff8bb9e1da5015364ffaace", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be0e4c32bf54ef792ff8bb9e1da5015364ffaace/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "038afce92d86f0a291b700b76155090f94489cfd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/038afce92d86f0a291b700b76155090f94489cfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/038afce92d86f0a291b700b76155090f94489cfd"}], "stats": {"total": 1050, "additions": 1047, "deletions": 3}, "files": [{"sha": "c6403a7f21d20e37686f9abb33caaeb22d098dd5", "filename": "gcc/config/i386/avx512fp16intrin.h", "status": "modified", "additions": 492, "deletions": 0, "changes": 492, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be0e4c32bf54ef792ff8bb9e1da5015364ffaace/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be0e4c32bf54ef792ff8bb9e1da5015364ffaace/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h?ref=be0e4c32bf54ef792ff8bb9e1da5015364ffaace", "patch": "@@ -2702,6 +2702,172 @@ _mm512_maskz_cvt_roundph_epu32 (__mmask16 __A, __m256h __B, int __C)\n \n #endif /* __OPTIMIZE__ */\n \n+/* Intrinsics vcvtdq2ph.  */\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cvtepi32_ph (__m512i __A)\n+{\n+  return __builtin_ia32_vcvtdq2ph512_mask_round ((__v16si) __A,\n+\t\t\t\t\t\t _mm256_setzero_ph (),\n+\t\t\t\t\t\t (__mmask16) -1,\n+\t\t\t\t\t\t _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cvtepi32_ph (__m256h __A, __mmask16 __B, __m512i __C)\n+{\n+  return __builtin_ia32_vcvtdq2ph512_mask_round ((__v16si) __C,\n+\t\t\t\t\t\t __A,\n+\t\t\t\t\t\t __B,\n+\t\t\t\t\t\t _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_cvtepi32_ph (__mmask16 __A, __m512i __B)\n+{\n+  return __builtin_ia32_vcvtdq2ph512_mask_round ((__v16si) __B,\n+\t\t\t\t\t\t _mm256_setzero_ph (),\n+\t\t\t\t\t\t __A,\n+\t\t\t\t\t\t _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+#ifdef __OPTIMIZE__\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cvt_roundepi32_ph (__m512i __A, int __B)\n+{\n+  return __builtin_ia32_vcvtdq2ph512_mask_round ((__v16si) __A,\n+\t\t\t\t\t\t _mm256_setzero_ph (),\n+\t\t\t\t\t\t (__mmask16) -1,\n+\t\t\t\t\t\t __B);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cvt_roundepi32_ph (__m256h __A, __mmask16 __B, __m512i __C, int __D)\n+{\n+  return __builtin_ia32_vcvtdq2ph512_mask_round ((__v16si) __C,\n+\t\t\t\t\t\t __A,\n+\t\t\t\t\t\t __B,\n+\t\t\t\t\t\t __D);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_cvt_roundepi32_ph (__mmask16 __A, __m512i __B, int __C)\n+{\n+  return __builtin_ia32_vcvtdq2ph512_mask_round ((__v16si) __B,\n+\t\t\t\t\t\t _mm256_setzero_ph (),\n+\t\t\t\t\t\t __A,\n+\t\t\t\t\t\t __C);\n+}\n+\n+#else\n+#define _mm512_cvt_roundepi32_ph(A, B)\t\t\t\t\t\\\n+  (__builtin_ia32_vcvtdq2ph512_mask_round ((__v16si)(A),\t\t\\\n+\t\t\t\t\t   _mm256_setzero_ph (),\t\\\n+\t\t\t\t\t   (__mmask16)-1,\t\t\\\n+\t\t\t\t\t   (B)))\n+\n+#define _mm512_mask_cvt_roundepi32_ph(A, B, C, D)\t\t\\\n+  (__builtin_ia32_vcvtdq2ph512_mask_round ((__v16si)(C),\t\\\n+\t\t\t\t\t   (A),\t\t\t\\\n+\t\t\t\t\t   (B),\t\t\t\\\n+\t\t\t\t\t   (D)))\n+\n+#define _mm512_maskz_cvt_roundepi32_ph(A, B, C)\t\t\t\t\\\n+  (__builtin_ia32_vcvtdq2ph512_mask_round ((__v16si)(B),\t\t\\\n+\t\t\t\t\t   _mm256_setzero_ph (),\t\\\n+\t\t\t\t\t   (A),\t\t\t\t\\\n+\t\t\t\t\t   (C)))\n+\n+#endif /* __OPTIMIZE__ */\n+\n+/* Intrinsics vcvtudq2ph.  */\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cvtepu32_ph (__m512i __A)\n+{\n+  return __builtin_ia32_vcvtudq2ph512_mask_round ((__v16si) __A,\n+\t\t\t\t\t\t  _mm256_setzero_ph (),\n+\t\t\t\t\t\t  (__mmask16) -1,\n+\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cvtepu32_ph (__m256h __A, __mmask16 __B, __m512i __C)\n+{\n+  return __builtin_ia32_vcvtudq2ph512_mask_round ((__v16si) __C,\n+\t\t\t\t\t\t  __A,\n+\t\t\t\t\t\t  __B,\n+\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_cvtepu32_ph (__mmask16 __A, __m512i __B)\n+{\n+  return __builtin_ia32_vcvtudq2ph512_mask_round ((__v16si) __B,\n+\t\t\t\t\t\t  _mm256_setzero_ph (),\n+\t\t\t\t\t\t  __A,\n+\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+#ifdef __OPTIMIZE__\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cvt_roundepu32_ph (__m512i __A, int __B)\n+{\n+  return __builtin_ia32_vcvtudq2ph512_mask_round ((__v16si) __A,\n+\t\t\t\t\t\t  _mm256_setzero_ph (),\n+\t\t\t\t\t\t  (__mmask16) -1,\n+\t\t\t\t\t\t  __B);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cvt_roundepu32_ph (__m256h __A, __mmask16 __B, __m512i __C, int __D)\n+{\n+  return __builtin_ia32_vcvtudq2ph512_mask_round ((__v16si) __C,\n+\t\t\t\t\t\t  __A,\n+\t\t\t\t\t\t  __B,\n+\t\t\t\t\t\t  __D);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_cvt_roundepu32_ph (__mmask16 __A, __m512i __B, int __C)\n+{\n+  return __builtin_ia32_vcvtudq2ph512_mask_round ((__v16si) __B,\n+\t\t\t\t\t\t  _mm256_setzero_ph (),\n+\t\t\t\t\t\t  __A,\n+\t\t\t\t\t\t  __C);\n+}\n+\n+#else\n+#define _mm512_cvt_roundepu32_ph(A, B)\t\t\t\t\t\\\n+  (__builtin_ia32_vcvtudq2ph512_mask_round ((__v16si)(A),\t\t\\\n+\t\t\t\t\t    _mm256_setzero_ph (),\t\\\n+\t\t\t\t\t    (__mmask16)-1,\t\t\\\n+\t\t\t\t\t    B))\n+\n+#define _mm512_mask_cvt_roundepu32_ph(A, B, C, D)\t\\\n+  (__builtin_ia32_vcvtudq2ph512_mask_round ((__v16si)C,\t\\\n+\t\t\t\t\t    A,\t\t\\\n+\t\t\t\t\t    B,\t\t\\\n+\t\t\t\t\t    D))\n+\n+#define _mm512_maskz_cvt_roundepu32_ph(A, B, C)\t\t\t\t\\\n+  (__builtin_ia32_vcvtudq2ph512_mask_round ((__v16si)B,\t\t\t\\\n+\t\t\t\t\t    _mm256_setzero_ph (),\t\\\n+\t\t\t\t\t    A,\t\t\t\t\\\n+\t\t\t\t\t    C))\n+\n+#endif /* __OPTIMIZE__ */\n+\n /* Intrinsics vcvtph2qq.  */\n extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n@@ -2853,6 +3019,166 @@ _mm512_maskz_cvt_roundph_epu64 (__mmask8 __A, __m128h __B, int __C)\n \n #endif /* __OPTIMIZE__ */\n \n+/* Intrinsics vcvtqq2ph.  */\n+extern __inline __m128h\n+  __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cvtepi64_ph (__m512i __A)\n+{\n+  return __builtin_ia32_vcvtqq2ph512_mask_round ((__v8di) __A,\n+\t\t\t\t\t\t _mm_setzero_ph (),\n+\t\t\t\t\t\t (__mmask8) -1,\n+\t\t\t\t\t\t _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cvtepi64_ph (__m128h __A, __mmask8 __B, __m512i __C)\n+{\n+  return __builtin_ia32_vcvtqq2ph512_mask_round ((__v8di) __C,\n+\t\t\t\t\t\t __A,\n+\t\t\t\t\t\t __B,\n+\t\t\t\t\t\t _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_cvtepi64_ph (__mmask8 __A, __m512i __B)\n+{\n+  return __builtin_ia32_vcvtqq2ph512_mask_round ((__v8di) __B,\n+\t\t\t\t\t\t _mm_setzero_ph (),\n+\t\t\t\t\t\t __A,\n+\t\t\t\t\t\t _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+#ifdef __OPTIMIZE__\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cvt_roundepi64_ph (__m512i __A, int __B)\n+{\n+  return __builtin_ia32_vcvtqq2ph512_mask_round ((__v8di) __A,\n+\t\t\t\t\t\t _mm_setzero_ph (),\n+\t\t\t\t\t\t (__mmask8) -1,\n+\t\t\t\t\t\t __B);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cvt_roundepi64_ph (__m128h __A, __mmask8 __B, __m512i __C, int __D)\n+{\n+  return __builtin_ia32_vcvtqq2ph512_mask_round ((__v8di) __C,\n+\t\t\t\t\t\t __A,\n+\t\t\t\t\t\t __B,\n+\t\t\t\t\t\t __D);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_cvt_roundepi64_ph (__mmask8 __A, __m512i __B, int __C)\n+{\n+  return __builtin_ia32_vcvtqq2ph512_mask_round ((__v8di) __B,\n+\t\t\t\t\t\t _mm_setzero_ph (),\n+\t\t\t\t\t\t __A,\n+\t\t\t\t\t\t __C);\n+}\n+\n+#else\n+#define _mm512_cvt_roundepi64_ph(A, B)\t\t\t\t\\\n+  (__builtin_ia32_vcvtqq2ph512_mask_round ((__v8di)(A),\t\t\\\n+\t\t\t\t\t   _mm_setzero_ph (),\t\\\n+\t\t\t\t\t   (__mmask8)-1,\t\\\n+\t\t\t\t\t   (B)))\n+\n+#define _mm512_mask_cvt_roundepi64_ph(A, B, C, D)\t\t\t\\\n+  (__builtin_ia32_vcvtqq2ph512_mask_round ((__v8di)(C), (A), (B), (D)))\n+\n+#define _mm512_maskz_cvt_roundepi64_ph(A, B, C)\t\t\t\\\n+  (__builtin_ia32_vcvtqq2ph512_mask_round ((__v8di)(B),\t\t\\\n+\t\t\t\t\t   _mm_setzero_ph (),\t\\\n+\t\t\t\t\t   (A),\t\t\t\\\n+\t\t\t\t\t   (C)))\n+\n+#endif /* __OPTIMIZE__ */\n+\n+/* Intrinsics vcvtuqq2ph.  */\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cvtepu64_ph (__m512i __A)\n+{\n+  return __builtin_ia32_vcvtuqq2ph512_mask_round ((__v8di) __A,\n+\t\t\t\t\t\t  _mm_setzero_ph (),\n+\t\t\t\t\t\t  (__mmask8) -1,\n+\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cvtepu64_ph (__m128h __A, __mmask8 __B, __m512i __C)\n+{\n+  return __builtin_ia32_vcvtuqq2ph512_mask_round ((__v8di) __C,\n+\t\t\t\t\t\t  __A,\n+\t\t\t\t\t\t  __B,\n+\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_cvtepu64_ph (__mmask8 __A, __m512i __B)\n+{\n+  return __builtin_ia32_vcvtuqq2ph512_mask_round ((__v8di) __B,\n+\t\t\t\t\t\t  _mm_setzero_ph (),\n+\t\t\t\t\t\t  __A,\n+\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+#ifdef __OPTIMIZE__\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cvt_roundepu64_ph (__m512i __A, int __B)\n+{\n+  return __builtin_ia32_vcvtuqq2ph512_mask_round ((__v8di) __A,\n+\t\t\t\t\t\t  _mm_setzero_ph (),\n+\t\t\t\t\t\t  (__mmask8) -1,\n+\t\t\t\t\t\t  __B);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cvt_roundepu64_ph (__m128h __A, __mmask8 __B, __m512i __C, int __D)\n+{\n+  return __builtin_ia32_vcvtuqq2ph512_mask_round ((__v8di) __C,\n+\t\t\t\t\t\t  __A,\n+\t\t\t\t\t\t  __B,\n+\t\t\t\t\t\t  __D);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_cvt_roundepu64_ph (__mmask8 __A, __m512i __B, int __C)\n+{\n+  return __builtin_ia32_vcvtuqq2ph512_mask_round ((__v8di) __B,\n+\t\t\t\t\t\t  _mm_setzero_ph (),\n+\t\t\t\t\t\t  __A,\n+\t\t\t\t\t\t  __C);\n+}\n+\n+#else\n+#define _mm512_cvt_roundepu64_ph(A, B)\t\t\t\t\\\n+  (__builtin_ia32_vcvtuqq2ph512_mask_round ((__v8di)(A),\t\\\n+\t\t\t\t\t    _mm_setzero_ph (),\t\\\n+\t\t\t\t\t    (__mmask8)-1,\t\\\n+\t\t\t\t\t    (B)))\n+\n+#define _mm512_mask_cvt_roundepu64_ph(A, B, C, D)\t\t\t\\\n+  (__builtin_ia32_vcvtuqq2ph512_mask_round ((__v8di)(C), (A), (B), (D)))\n+\n+#define _mm512_maskz_cvt_roundepu64_ph(A, B, C)\t\t\t\\\n+  (__builtin_ia32_vcvtuqq2ph512_mask_round ((__v8di)(B),\t\\\n+\t\t\t\t\t    _mm_setzero_ph (),\t\\\n+\t\t\t\t\t    (A),\t\t\\\n+\t\t\t\t\t    (C)))\n+\n+#endif /* __OPTIMIZE__ */\n+\n /* Intrinsics vcvtph2w.  */\n extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n@@ -3037,6 +3363,172 @@ _mm512_maskz_cvt_roundph_epu16 (__mmask32 __A, __m512h __B, int __C)\n \n #endif /* __OPTIMIZE__ */\n \n+/* Intrinsics vcvtw2ph.  */\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cvtepi16_ph (__m512i __A)\n+{\n+  return __builtin_ia32_vcvtw2ph512_mask_round ((__v32hi) __A,\n+\t\t\t\t\t\t_mm512_setzero_ph (),\n+\t\t\t\t\t\t(__mmask32) -1,\n+\t\t\t\t\t\t_MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cvtepi16_ph (__m512h __A, __mmask32 __B, __m512i __C)\n+{\n+  return __builtin_ia32_vcvtw2ph512_mask_round ((__v32hi) __C,\n+\t\t\t\t\t\t__A,\n+\t\t\t\t\t\t__B,\n+\t\t\t\t\t\t_MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_cvtepi16_ph (__mmask32 __A, __m512i __B)\n+{\n+  return __builtin_ia32_vcvtw2ph512_mask_round ((__v32hi) __B,\n+\t\t\t\t\t\t_mm512_setzero_ph (),\n+\t\t\t\t\t\t__A,\n+\t\t\t\t\t\t_MM_FROUND_CUR_DIRECTION);\n+}\n+\n+#ifdef __OPTIMIZE__\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cvt_roundepi16_ph (__m512i __A, int __B)\n+{\n+  return __builtin_ia32_vcvtw2ph512_mask_round ((__v32hi) __A,\n+\t\t\t\t\t\t_mm512_setzero_ph (),\n+\t\t\t\t\t\t(__mmask32) -1,\n+\t\t\t\t\t\t__B);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cvt_roundepi16_ph (__m512h __A, __mmask32 __B, __m512i __C, int __D)\n+{\n+  return __builtin_ia32_vcvtw2ph512_mask_round ((__v32hi) __C,\n+\t\t\t\t\t\t__A,\n+\t\t\t\t\t\t__B,\n+\t\t\t\t\t\t__D);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_cvt_roundepi16_ph (__mmask32 __A, __m512i __B, int __C)\n+{\n+  return __builtin_ia32_vcvtw2ph512_mask_round ((__v32hi) __B,\n+\t\t\t\t\t\t_mm512_setzero_ph (),\n+\t\t\t\t\t\t__A,\n+\t\t\t\t\t\t__C);\n+}\n+\n+#else\n+#define _mm512_cvt_roundepi16_ph(A, B)\t\t\t\t\\\n+  (__builtin_ia32_vcvtw2ph512_mask_round ((__v32hi)(A),\t\t\\\n+\t\t\t\t\t  _mm512_setzero_ph (),\t\\\n+\t\t\t\t\t  (__mmask32)-1,\t\\\n+\t\t\t\t\t  (B)))\n+\n+#define _mm512_mask_cvt_roundepi16_ph(A, B, C, D)\t\\\n+  (__builtin_ia32_vcvtw2ph512_mask_round ((__v32hi)(C),\t\\\n+\t\t\t\t\t  (A),\t\t\\\n+\t\t\t\t\t  (B),\t\t\\\n+\t\t\t\t\t  (D)))\n+\n+#define _mm512_maskz_cvt_roundepi16_ph(A, B, C)\t\t\t\\\n+  (__builtin_ia32_vcvtw2ph512_mask_round ((__v32hi)(B),\t\t\\\n+\t\t\t\t\t  _mm512_setzero_ph (),\t\\\n+\t\t\t\t\t  (A),\t\t\t\\\n+\t\t\t\t\t  (C)))\n+\n+#endif /* __OPTIMIZE__ */\n+\n+/* Intrinsics vcvtuw2ph.  */\n+  extern __inline __m512h\n+  __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+  _mm512_cvtepu16_ph (__m512i __A)\n+  {\n+    return __builtin_ia32_vcvtuw2ph512_mask_round ((__v32hi) __A,\n+\t\t\t\t\t\t   _mm512_setzero_ph (),\n+\t\t\t\t\t\t   (__mmask32) -1,\n+\t\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n+  }\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cvtepu16_ph (__m512h __A, __mmask32 __B, __m512i __C)\n+{\n+  return __builtin_ia32_vcvtuw2ph512_mask_round ((__v32hi) __C,\n+\t\t\t\t\t\t __A,\n+\t\t\t\t\t\t __B,\n+\t\t\t\t\t\t _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_cvtepu16_ph (__mmask32 __A, __m512i __B)\n+{\n+  return __builtin_ia32_vcvtuw2ph512_mask_round ((__v32hi) __B,\n+\t\t\t\t\t\t _mm512_setzero_ph (),\n+\t\t\t\t\t\t __A,\n+\t\t\t\t\t\t _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+#ifdef __OPTIMIZE__\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_cvt_roundepu16_ph (__m512i __A, int __B)\n+{\n+  return __builtin_ia32_vcvtuw2ph512_mask_round ((__v32hi) __A,\n+\t\t\t\t\t\t _mm512_setzero_ph (),\n+\t\t\t\t\t\t (__mmask32) -1,\n+\t\t\t\t\t\t __B);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cvt_roundepu16_ph (__m512h __A, __mmask32 __B, __m512i __C, int __D)\n+{\n+  return __builtin_ia32_vcvtuw2ph512_mask_round ((__v32hi) __C,\n+\t\t\t\t\t\t __A,\n+\t\t\t\t\t\t __B,\n+\t\t\t\t\t\t __D);\n+}\n+\n+extern __inline __m512h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_cvt_roundepu16_ph (__mmask32 __A, __m512i __B, int __C)\n+{\n+  return __builtin_ia32_vcvtuw2ph512_mask_round ((__v32hi) __B,\n+\t\t\t\t\t\t _mm512_setzero_ph (),\n+\t\t\t\t\t\t __A,\n+\t\t\t\t\t\t __C);\n+}\n+\n+#else\n+#define _mm512_cvt_roundepu16_ph(A, B)\t\t\t\t\t\\\n+  (__builtin_ia32_vcvtuw2ph512_mask_round ((__v32hi)(A),\t\t\\\n+\t\t\t\t\t   _mm512_setzero_ph (),\t\\\n+\t\t\t\t\t   (__mmask32)-1,\t\t\\\n+\t\t\t\t\t   (B)))\n+\n+#define _mm512_mask_cvt_roundepu16_ph(A, B, C, D)\t\t\\\n+  (__builtin_ia32_vcvtuw2ph512_mask_round ((__v32hi)(C),\t\\\n+\t\t\t\t\t   (A),\t\t\t\\\n+\t\t\t\t\t   (B),\t\t\t\\\n+\t\t\t\t\t   (D)))\n+\n+#define _mm512_maskz_cvt_roundepu16_ph(A, B, C)\t\t\t\t\\\n+  (__builtin_ia32_vcvtuw2ph512_mask_round ((__v32hi)(B),\t\t\\\n+\t\t\t\t\t   _mm512_setzero_ph (),\t\\\n+\t\t\t\t\t   (A),\t\t\t\t\\\n+\t\t\t\t\t   (C)))\n+\n+#endif /* __OPTIMIZE__ */\n+\n #ifdef __DISABLE_AVX512FP16__\n #undef __DISABLE_AVX512FP16__\n #pragma GCC pop_options"}, {"sha": "5898b626b5da04a199801900061874f4f2d3d22e", "filename": "gcc/config/i386/avx512fp16vlintrin.h", "status": "modified", "additions": 312, "deletions": 0, "changes": 312, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be0e4c32bf54ef792ff8bb9e1da5015364ffaace/gcc%2Fconfig%2Fi386%2Favx512fp16vlintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be0e4c32bf54ef792ff8bb9e1da5015364ffaace/gcc%2Fconfig%2Fi386%2Favx512fp16vlintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fp16vlintrin.h?ref=be0e4c32bf54ef792ff8bb9e1da5015364ffaace", "patch": "@@ -1050,6 +1050,110 @@ _mm256_maskz_cvtph_epu32 (__mmask8 __A, __m128h __B)\n \t\t\t\t       __A);\n }\n \n+/* Intrinsics vcvtdq2ph.  */\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvtepi32_ph (__m128i __A)\n+{\n+  return __builtin_ia32_vcvtdq2ph128_mask ((__v4si) __A,\n+\t\t\t\t\t   _mm_setzero_ph (),\n+\t\t\t\t\t   (__mmask8) -1);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cvtepi32_ph (__m128h __A, __mmask8 __B, __m128i __C)\n+{\n+  return __builtin_ia32_vcvtdq2ph128_mask ((__v4si) __C, __A, __B);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_cvtepi32_ph (__mmask8 __A, __m128i __B)\n+{\n+  return __builtin_ia32_vcvtdq2ph128_mask ((__v4si) __B,\n+\t\t\t\t\t   _mm_setzero_ph (),\n+\t\t\t\t\t   __A);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_cvtepi32_ph (__m256i __A)\n+{\n+  return __builtin_ia32_vcvtdq2ph256_mask ((__v8si) __A,\n+\t\t\t\t\t   _mm_setzero_ph (),\n+\t\t\t\t\t   (__mmask8) -1);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_cvtepi32_ph (__m128h __A, __mmask8 __B, __m256i __C)\n+{\n+  return __builtin_ia32_vcvtdq2ph256_mask ((__v8si) __C, __A, __B);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_cvtepi32_ph (__mmask8 __A, __m256i __B)\n+{\n+  return __builtin_ia32_vcvtdq2ph256_mask ((__v8si) __B,\n+\t\t\t\t\t   _mm_setzero_ph (),\n+\t\t\t\t\t   __A);\n+}\n+\n+/* Intrinsics vcvtudq2ph.  */\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvtepu32_ph (__m128i __A)\n+{\n+  return __builtin_ia32_vcvtudq2ph128_mask ((__v4si) __A,\n+\t\t\t\t\t    _mm_setzero_ph (),\n+\t\t\t\t\t    (__mmask8) -1);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cvtepu32_ph (__m128h __A, __mmask8 __B, __m128i __C)\n+{\n+  return __builtin_ia32_vcvtudq2ph128_mask ((__v4si) __C,\n+\t\t\t\t\t    __A,\n+\t\t\t\t\t    __B);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_cvtepu32_ph (__mmask8 __A, __m128i __B)\n+{\n+  return __builtin_ia32_vcvtudq2ph128_mask ((__v4si) __B,\n+\t\t\t\t\t    _mm_setzero_ph (),\n+\t\t\t\t\t    __A);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_cvtepu32_ph (__m256i __A)\n+{\n+  return __builtin_ia32_vcvtudq2ph256_mask ((__v8si) __A,\n+\t\t\t\t\t    _mm_setzero_ph (),\n+\t\t\t\t\t    (__mmask8) -1);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_cvtepu32_ph (__m128h __A, __mmask8 __B, __m256i __C)\n+{\n+  return __builtin_ia32_vcvtudq2ph256_mask ((__v8si) __C, __A, __B);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_cvtepu32_ph (__mmask8 __A, __m256i __B)\n+{\n+  return __builtin_ia32_vcvtudq2ph256_mask ((__v8si) __B,\n+\t\t\t\t\t    _mm_setzero_ph (),\n+\t\t\t\t\t    __A);\n+}\n+\n /* Intrinsics vcvtph2qq.  */\n extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n@@ -1153,6 +1257,108 @@ _mm256_maskz_cvtph_epu64 (__mmask8 __A, __m128h __B)\n \t\t\t\t\t    __A);\n }\n \n+/* Intrinsics vcvtqq2ph.  */\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvtepi64_ph (__m128i __A)\n+{\n+  return __builtin_ia32_vcvtqq2ph128_mask ((__v2di) __A,\n+\t\t\t\t\t   _mm_setzero_ph (),\n+\t\t\t\t\t   (__mmask8) -1);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cvtepi64_ph (__m128h __A, __mmask8 __B, __m128i __C)\n+{\n+  return __builtin_ia32_vcvtqq2ph128_mask ((__v2di) __C, __A, __B);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_cvtepi64_ph (__mmask8 __A, __m128i __B)\n+{\n+  return __builtin_ia32_vcvtqq2ph128_mask ((__v2di) __B,\n+\t\t\t\t\t   _mm_setzero_ph (),\n+\t\t\t\t\t   __A);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_cvtepi64_ph (__m256i __A)\n+{\n+  return __builtin_ia32_vcvtqq2ph256_mask ((__v4di) __A,\n+\t\t\t\t\t   _mm_setzero_ph (),\n+\t\t\t\t\t   (__mmask8) -1);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_cvtepi64_ph (__m128h __A, __mmask8 __B, __m256i __C)\n+{\n+  return __builtin_ia32_vcvtqq2ph256_mask ((__v4di) __C, __A, __B);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_cvtepi64_ph (__mmask8 __A, __m256i __B)\n+{\n+  return __builtin_ia32_vcvtqq2ph256_mask ((__v4di) __B,\n+\t\t\t\t\t   _mm_setzero_ph (),\n+\t\t\t\t\t   __A);\n+}\n+\n+/* Intrinsics vcvtuqq2ph.  */\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvtepu64_ph (__m128i __A)\n+{\n+  return __builtin_ia32_vcvtuqq2ph128_mask ((__v2di) __A,\n+\t\t\t\t\t    _mm_setzero_ph (),\n+\t\t\t\t\t    (__mmask8) -1);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cvtepu64_ph (__m128h __A, __mmask8 __B, __m128i __C)\n+{\n+  return __builtin_ia32_vcvtuqq2ph128_mask ((__v2di) __C, __A, __B);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_cvtepu64_ph (__mmask8 __A, __m128i __B)\n+{\n+  return __builtin_ia32_vcvtuqq2ph128_mask ((__v2di) __B,\n+\t\t\t\t\t    _mm_setzero_ph (),\n+\t\t\t\t\t    __A);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_cvtepu64_ph (__m256i __A)\n+{\n+  return __builtin_ia32_vcvtuqq2ph256_mask ((__v4di) __A,\n+\t\t\t\t\t    _mm_setzero_ph (),\n+\t\t\t\t\t    (__mmask8) -1);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_cvtepu64_ph (__m128h __A, __mmask8 __B, __m256i __C)\n+{\n+  return __builtin_ia32_vcvtuqq2ph256_mask ((__v4di) __C, __A, __B);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_cvtepu64_ph (__mmask8 __A, __m256i __B)\n+{\n+  return __builtin_ia32_vcvtuqq2ph256_mask ((__v4di) __B,\n+\t\t\t\t\t    _mm_setzero_ph (),\n+\t\t\t\t\t    __A);\n+}\n+\n /* Intrinsics vcvtph2w.  */\n extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n@@ -1275,6 +1481,112 @@ _mm256_maskz_cvtph_epu16 (__mmask16 __A, __m256h __B)\n \t\t\t\t      __A);\n }\n \n+/* Intrinsics vcvtw2ph.  */\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvtepi16_ph (__m128i __A)\n+{\n+  return __builtin_ia32_vcvtw2ph128_mask ((__v8hi) __A,\n+\t\t\t\t\t  _mm_setzero_ph (),\n+\t\t\t\t\t  (__mmask8) -1);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cvtepi16_ph (__m128h __A, __mmask8 __B, __m128i __C)\n+{\n+  return __builtin_ia32_vcvtw2ph128_mask ((__v8hi) __C,\n+\t\t\t\t\t  __A,\n+\t\t\t\t\t  __B);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_cvtepi16_ph (__mmask8 __A, __m128i __B)\n+{\n+  return __builtin_ia32_vcvtw2ph128_mask ((__v8hi) __B,\n+\t\t\t\t\t  _mm_setzero_ph (),\n+\t\t\t\t\t  __A);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_cvtepi16_ph (__m256i __A)\n+{\n+  return __builtin_ia32_vcvtw2ph256_mask ((__v16hi) __A,\n+\t\t\t\t\t  _mm256_setzero_ph (),\n+\t\t\t\t\t  (__mmask16) -1);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_cvtepi16_ph (__m256h __A, __mmask16 __B, __m256i __C)\n+{\n+  return __builtin_ia32_vcvtw2ph256_mask ((__v16hi) __C,\n+\t\t\t\t\t  __A,\n+\t\t\t\t\t  __B);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_cvtepi16_ph (__mmask16 __A, __m256i __B)\n+{\n+  return __builtin_ia32_vcvtw2ph256_mask ((__v16hi) __B,\n+\t\t\t\t\t  _mm256_setzero_ph (),\n+\t\t\t\t\t  __A);\n+}\n+\n+/* Intrinsics vcvtuw2ph.  */\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_cvtepu16_ph (__m128i __A)\n+{\n+  return __builtin_ia32_vcvtuw2ph128_mask ((__v8hi) __A,\n+\t\t\t\t\t   _mm_setzero_ph (),\n+\t\t\t\t\t   (__mmask8) -1);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cvtepu16_ph (__m128h __A, __mmask8 __B, __m128i __C)\n+{\n+  return __builtin_ia32_vcvtuw2ph128_mask ((__v8hi) __C, __A, __B);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_cvtepu16_ph (__mmask8 __A, __m128i __B)\n+{\n+  return __builtin_ia32_vcvtuw2ph128_mask ((__v8hi) __B,\n+\t\t\t\t\t   _mm_setzero_ph (),\n+\t\t\t\t\t   __A);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_cvtepu16_ph (__m256i __A)\n+{\n+  return __builtin_ia32_vcvtuw2ph256_mask ((__v16hi) __A,\n+\t\t\t\t\t   _mm256_setzero_ph (),\n+\t\t\t\t\t   (__mmask16) -1);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_cvtepu16_ph (__m256h __A, __mmask16 __B, __m256i __C)\n+{\n+  return __builtin_ia32_vcvtuw2ph256_mask ((__v16hi) __C, __A, __B);\n+}\n+\n+extern __inline __m256h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_cvtepu16_ph (__mmask16 __A, __m256i __B)\n+{\n+  return __builtin_ia32_vcvtuw2ph256_mask ((__v16hi) __B,\n+\t\t\t\t\t   _mm256_setzero_ph (),\n+\t\t\t\t\t   __A);\n+}\n+\n #ifdef __DISABLE_AVX512FP16VL__\n #undef __DISABLE_AVX512FP16VL__\n #pragma GCC pop_options"}, {"sha": "ec658e1291aa449be824c219bbee5cbd1642d514", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be0e4c32bf54ef792ff8bb9e1da5015364ffaace/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be0e4c32bf54ef792ff8bb9e1da5015364ffaace/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=be0e4c32bf54ef792ff8bb9e1da5015364ffaace", "patch": "@@ -1316,25 +1316,34 @@ DEF_FUNCTION_TYPE (V4DI, V8HF, V4DI, UQI)\n DEF_FUNCTION_TYPE (V4SI, V8HF, V4SI, UQI)\n DEF_FUNCTION_TYPE (V8SI, V8HF, V8SI, UQI)\n DEF_FUNCTION_TYPE (V8HI, V8HF, V8HI, UQI)\n+DEF_FUNCTION_TYPE (V8HF, V4SI, V8HF, UQI)\n+DEF_FUNCTION_TYPE (V8HF, V8SI, V8HF, UQI)\n+DEF_FUNCTION_TYPE (V8HF, V2DI, V8HF, UQI)\n+DEF_FUNCTION_TYPE (V8HF, V4DI, V8HF, UQI)\n+DEF_FUNCTION_TYPE (V8HF, V8HI, V8HF, UQI)\n DEF_FUNCTION_TYPE (V8HF, V8HF, V8HF, UQI)\n DEF_FUNCTION_TYPE (V8HF, V8HF, V8HF, INT)\n DEF_FUNCTION_TYPE (V8HF, V8HF, INT, V8HF, UQI)\n DEF_FUNCTION_TYPE (UQI, V8HF, V8HF, INT, UQI)\n DEF_FUNCTION_TYPE (V8HF, V8HF, V8HF, V8HF, UQI)\n DEF_FUNCTION_TYPE (UQI, V8HF, V8HF, INT, UQI, INT)\n DEF_FUNCTION_TYPE (V8DI, V8HF, V8DI, UQI, INT)\n+DEF_FUNCTION_TYPE (V8HF, V8DI, V8HF, UQI, INT)\n DEF_FUNCTION_TYPE (V8HF, V8HF, V8HF, V8HF, UQI, INT)\n DEF_FUNCTION_TYPE (V8HF, V8HF, V8HF, INT, V8HF, UQI, INT)\n DEF_FUNCTION_TYPE (V16HF, V16HF, V16HF)\n DEF_FUNCTION_TYPE (V16HI, V16HF, V16HI, UHI)\n+DEF_FUNCTION_TYPE (V16HF, V16HI, V16HF, UHI)\n DEF_FUNCTION_TYPE (V16HF, V16HF, V16HF, UHI)\n DEF_FUNCTION_TYPE (V16SI, V16HF, V16SI, UHI, INT)\n DEF_FUNCTION_TYPE (V16HF, V16HF, INT, V16HF, UHI)\n DEF_FUNCTION_TYPE (UHI, V16HF, V16HF, INT, UHI)\n+DEF_FUNCTION_TYPE (V16HF, V16SI, V16HF, UHI, INT)\n DEF_FUNCTION_TYPE (V16HF, V16HF, V16HF, V16HF, UHI)\n DEF_FUNCTION_TYPE (V32HF, V32HF, V32HF, USI)\n DEF_FUNCTION_TYPE (V32HF, V32HF, V32HF, INT)\n DEF_FUNCTION_TYPE (V32HI, V32HF, V32HI, USI, INT)\n+DEF_FUNCTION_TYPE (V32HF, V32HI, V32HF, USI, INT)\n DEF_FUNCTION_TYPE (USI, V32HF, V32HF, INT, USI)\n DEF_FUNCTION_TYPE (V32HF, V32HF, V32HF, USI, INT)\n DEF_FUNCTION_TYPE (V32HF, V32HF, V32HF, V32HF, USI)"}, {"sha": "9a5198baf896fcfd02f392ac76612628c4a32b80", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be0e4c32bf54ef792ff8bb9e1da5015364ffaace/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be0e4c32bf54ef792ff8bb9e1da5015364ffaace/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=be0e4c32bf54ef792ff8bb9e1da5015364ffaace", "patch": "@@ -2843,6 +2843,18 @@ BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp1\n BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtph2w_v16hi_mask, \"__builtin_ia32_vcvtph2w256_mask\", IX86_BUILTIN_VCVTPH2W256_MASK, UNKNOWN, (int) V16HI_FTYPE_V16HF_V16HI_UHI)\n BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtph2uw_v8hi_mask, \"__builtin_ia32_vcvtph2uw128_mask\", IX86_BUILTIN_VCVTPH2UW128_MASK, UNKNOWN, (int) V8HI_FTYPE_V8HF_V8HI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtph2uw_v16hi_mask, \"__builtin_ia32_vcvtph2uw256_mask\", IX86_BUILTIN_VCVTPH2UW256_MASK, UNKNOWN, (int) V16HI_FTYPE_V16HF_V16HI_UHI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtw2ph_v8hi_mask, \"__builtin_ia32_vcvtw2ph128_mask\", IX86_BUILTIN_VCVTW2PH128_MASK, UNKNOWN, (int) V8HF_FTYPE_V8HI_V8HF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtw2ph_v16hi_mask, \"__builtin_ia32_vcvtw2ph256_mask\", IX86_BUILTIN_VCVTW2PH256_MASK, UNKNOWN, (int) V16HF_FTYPE_V16HI_V16HF_UHI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtuw2ph_v8hi_mask, \"__builtin_ia32_vcvtuw2ph128_mask\", IX86_BUILTIN_VCVTUW2PH128_MASK, UNKNOWN, (int) V8HF_FTYPE_V8HI_V8HF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtuw2ph_v16hi_mask, \"__builtin_ia32_vcvtuw2ph256_mask\", IX86_BUILTIN_VCVTUW2PH256_MASK, UNKNOWN, (int) V16HF_FTYPE_V16HI_V16HF_UHI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtdq2ph_v4si_mask, \"__builtin_ia32_vcvtdq2ph128_mask\", IX86_BUILTIN_VCVTDQ2PH128_MASK, UNKNOWN, (int) V8HF_FTYPE_V4SI_V8HF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtdq2ph_v8si_mask, \"__builtin_ia32_vcvtdq2ph256_mask\", IX86_BUILTIN_VCVTDQ2PH256_MASK, UNKNOWN, (int) V8HF_FTYPE_V8SI_V8HF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtudq2ph_v4si_mask, \"__builtin_ia32_vcvtudq2ph128_mask\", IX86_BUILTIN_VCVTUDQ2PH128_MASK, UNKNOWN, (int) V8HF_FTYPE_V4SI_V8HF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtudq2ph_v8si_mask, \"__builtin_ia32_vcvtudq2ph256_mask\", IX86_BUILTIN_VCVTUDQ2PH256_MASK, UNKNOWN, (int) V8HF_FTYPE_V8SI_V8HF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtqq2ph_v2di_mask, \"__builtin_ia32_vcvtqq2ph128_mask\", IX86_BUILTIN_VCVTQQ2PH128_MASK, UNKNOWN, (int) V8HF_FTYPE_V2DI_V8HF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtqq2ph_v4di_mask, \"__builtin_ia32_vcvtqq2ph256_mask\", IX86_BUILTIN_VCVTQQ2PH256_MASK, UNKNOWN, (int) V8HF_FTYPE_V4DI_V8HF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtuqq2ph_v2di_mask, \"__builtin_ia32_vcvtuqq2ph128_mask\", IX86_BUILTIN_VCVTUQQ2PH128_MASK, UNKNOWN, (int) V8HF_FTYPE_V2DI_V8HF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtuqq2ph_v4di_mask, \"__builtin_ia32_vcvtuqq2ph256_mask\", IX86_BUILTIN_VCVTUQQ2PH256_MASK, UNKNOWN, (int) V8HF_FTYPE_V4DI_V8HF_UQI)\n \n /* Builtins with rounding support.  */\n BDESC_END (ARGS, ROUND_ARGS)\n@@ -3076,6 +3088,12 @@ BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtph2qq_v8di_mask_r\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtph2uqq_v8di_mask_round, \"__builtin_ia32_vcvtph2uqq512_mask_round\", IX86_BUILTIN_VCVTPH2UQQ512_MASK_ROUND, UNKNOWN, (int) V8DI_FTYPE_V8HF_V8DI_UQI_INT)\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtph2w_v32hi_mask_round, \"__builtin_ia32_vcvtph2w512_mask_round\", IX86_BUILTIN_VCVTPH2W512_MASK_ROUND, UNKNOWN, (int) V32HI_FTYPE_V32HF_V32HI_USI_INT)\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtph2uw_v32hi_mask_round, \"__builtin_ia32_vcvtph2uw512_mask_round\", IX86_BUILTIN_VCVTPH2UW512_MASK_ROUND, UNKNOWN, (int) V32HI_FTYPE_V32HF_V32HI_USI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtw2ph_v32hi_mask_round, \"__builtin_ia32_vcvtw2ph512_mask_round\", IX86_BUILTIN_VCVTW2PH512_MASK_ROUND, UNKNOWN, (int) V32HF_FTYPE_V32HI_V32HF_USI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtuw2ph_v32hi_mask_round, \"__builtin_ia32_vcvtuw2ph512_mask_round\", IX86_BUILTIN_VCVTUW2PH512_MASK_ROUND, UNKNOWN, (int) V32HF_FTYPE_V32HI_V32HF_USI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtdq2ph_v16si_mask_round, \"__builtin_ia32_vcvtdq2ph512_mask_round\", IX86_BUILTIN_VCVTDQ2PH512_MASK_ROUND, UNKNOWN, (int) V16HF_FTYPE_V16SI_V16HF_UHI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtudq2ph_v16si_mask_round, \"__builtin_ia32_vcvtudq2ph512_mask_round\", IX86_BUILTIN_VCVTUDQ2PH512_MASK_ROUND, UNKNOWN, (int) V16HF_FTYPE_V16SI_V16HF_UHI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtqq2ph_v8di_mask_round, \"__builtin_ia32_vcvtqq2ph512_mask_round\", IX86_BUILTIN_VCVTQQ2PH512_MASK_ROUND, UNKNOWN, (int) V8HF_FTYPE_V8DI_V8HF_UQI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512fp16_vcvtuqq2ph_v8di_mask_round, \"__builtin_ia32_vcvtuqq2ph512_mask_round\", IX86_BUILTIN_VCVTUQQ2PH512_MASK_ROUND, UNKNOWN, (int) V8HF_FTYPE_V8DI_V8HF_UQI_INT)\n \n BDESC_END (ROUND_ARGS, MULTI_ARG)\n "}, {"sha": "998e71e337984d7bfa2c8426c065c42466b54ac6", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be0e4c32bf54ef792ff8bb9e1da5015364ffaace/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be0e4c32bf54ef792ff8bb9e1da5015364ffaace/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=be0e4c32bf54ef792ff8bb9e1da5015364ffaace", "patch": "@@ -9752,6 +9752,11 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n     case V2DI_FTYPE_V8HF_V2DI_UQI:\n     case V2DI_FTYPE_V4SF_V2DI_UQI:\n     case V8HF_FTYPE_V8HF_V8HF_UQI:\n+    case V8HF_FTYPE_V8HI_V8HF_UQI:\n+    case V8HF_FTYPE_V8SI_V8HF_UQI:\n+    case V8HF_FTYPE_V4SI_V8HF_UQI:\n+    case V8HF_FTYPE_V4DI_V8HF_UQI:\n+    case V8HF_FTYPE_V2DI_V8HF_UQI:\n     case V4SF_FTYPE_V4DI_V4SF_UQI:\n     case V4SF_FTYPE_V2DI_V4SF_UQI:\n     case V4DF_FTYPE_V4DI_V4DF_UQI:\n@@ -9818,6 +9823,7 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n     case V8DI_FTYPE_DI_V8DI_UQI:\n     case V16SF_FTYPE_V8SF_V16SF_UHI:\n     case V16SI_FTYPE_V8SI_V16SI_UHI:\n+    case V16HF_FTYPE_V16HI_V16HF_UHI:\n     case V16HI_FTYPE_V16HF_V16HI_UHI:\n     case V16HI_FTYPE_V16HI_V16HI_UHI:\n     case V8HI_FTYPE_V16QI_V8HI_UQI:\n@@ -10691,16 +10697,19 @@ ix86_expand_round_builtin (const struct builtin_description *d,\n     case V8DI_FTYPE_V8DF_V8DI_QI_INT:\n     case V8SF_FTYPE_V8DI_V8SF_QI_INT:\n     case V8DF_FTYPE_V8DI_V8DF_QI_INT:\n+    case V32HF_FTYPE_V32HI_V32HF_USI_INT:\n     case V32HF_FTYPE_V32HF_V32HF_USI_INT:\n     case V16SF_FTYPE_V16SF_V16SF_HI_INT:\n     case V8DI_FTYPE_V8SF_V8DI_QI_INT:\n     case V16SF_FTYPE_V16SI_V16SF_HI_INT:\n     case V16SI_FTYPE_V16SF_V16SI_HI_INT:\n     case V16SI_FTYPE_V16HF_V16SI_UHI_INT:\n+    case V16HF_FTYPE_V16SI_V16HF_UHI_INT:\n     case V8DF_FTYPE_V8SF_V8DF_QI_INT:\n     case V16SF_FTYPE_V16HI_V16SF_HI_INT:\n     case V2DF_FTYPE_V2DF_V2DF_V2DF_INT:\n     case V4SF_FTYPE_V4SF_V4SF_V4SF_INT:\n+    case V8HF_FTYPE_V8DI_V8HF_UQI_INT:\n       nargs = 4;\n       break;\n     case V4SF_FTYPE_V4SF_V4SF_INT_INT:"}, {"sha": "2a2c8b8074b6872bbe24be409a652037b6a64ed8", "filename": "gcc/config/i386/i386-modes.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be0e4c32bf54ef792ff8bb9e1da5015364ffaace/gcc%2Fconfig%2Fi386%2Fi386-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be0e4c32bf54ef792ff8bb9e1da5015364ffaace/gcc%2Fconfig%2Fi386%2Fi386-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-modes.def?ref=be0e4c32bf54ef792ff8bb9e1da5015364ffaace", "patch": "@@ -90,6 +90,8 @@ VECTOR_MODES (FLOAT, 32);     /*   V16HF V8SF V4DF V2TF */\n VECTOR_MODES (FLOAT, 64);     /*  V32HF V16SF V8DF V4TF */\n VECTOR_MODES (FLOAT, 128);    /* V64HF V32SF V16DF V8TF */\n VECTOR_MODES (FLOAT, 256);    /* V128HF V64SF V32DF V16TF */\n+VECTOR_MODE (FLOAT, HF, 2);   /* \t      \t   V2HF */\n+VECTOR_MODE (FLOAT, HF, 6);   /*\t\t   V6HF */\n VECTOR_MODE (INT, TI, 1);     /*                   V1TI */\n VECTOR_MODE (INT, DI, 1);     /*                   V1DI */\n VECTOR_MODE (INT, SI, 1);     /*                   V1SI */"}, {"sha": "9fc6bfaeaa13a61f97ccba097d327269e48a8e09", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 150, "deletions": 3, "changes": 153, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be0e4c32bf54ef792ff8bb9e1da5015364ffaace/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be0e4c32bf54ef792ff8bb9e1da5015364ffaace/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=be0e4c32bf54ef792ff8bb9e1da5015364ffaace", "patch": "@@ -503,6 +503,11 @@\n (define_mode_iterator VI2_AVX512VL\n   [(V8HI \"TARGET_AVX512VL\") (V16HI \"TARGET_AVX512VL\") V32HI])\n \n+(define_mode_iterator VI2H_AVX512VL\n+  [(V8HI \"TARGET_AVX512VL\") (V16HI \"TARGET_AVX512VL\") V32HI\n+   (V8SI \"TARGET_AVX512VL\") V16SI\n+   V8DI ])\n+\n (define_mode_iterator VI1_AVX512VL_F\n   [V32QI (V16QI \"TARGET_AVX512VL\") (V64QI \"TARGET_AVX512F\")])\n \n@@ -936,9 +941,9 @@\n \n ;; Mapping of vector float modes to an integer mode of the same size\n (define_mode_attr sseintvecmode\n-  [(V16SF \"V16SI\") (V8DF  \"V8DI\")\n-   (V8SF  \"V8SI\")  (V4DF  \"V4DI\")\n-   (V4SF  \"V4SI\")  (V2DF  \"V2DI\")\n+  [(V32HF \"V32HI\") (V16SF \"V16SI\") (V8DF  \"V8DI\")\n+   (V16HF \"V16HI\") (V8SF  \"V8SI\")  (V4DF  \"V4DI\")\n+   (V8HF \"V8HI\") (V4SF  \"V4SI\")  (V2DF  \"V2DI\")\n    (V16SI \"V16SI\") (V8DI  \"V8DI\")\n    (V8SI  \"V8SI\")  (V4DI  \"V4DI\")\n    (V4SI  \"V4SI\")  (V2DI  \"V2DI\")\n@@ -5737,6 +5742,11 @@\n \t[(UNSPEC_UNSIGNED_FIX_NOTRUNC \"u\")\n \t (UNSPEC_FIX_NOTRUNC \"\")])\n \n+(define_mode_attr qq2phsuff\n+  [(V32HI \"\") (V16HI \"\") (V8HI \"\")\n+   (V16SI \"\") (V8SI \"{y}\") (V4SI \"{x}\")\n+   (V8DI \"{z}\") (V4DI \"{y}\") (V2DI \"{x}\")])\n+\n (define_insn \"avx512fp16_vcvtph2<sseintconvertsignprefix><sseintconvert>_<mode><mask_name><round_name>\"\n   [(set (match_operand:VI248_AVX512VL 0 \"register_operand\" \"=v\")\n         (unspec:VI248_AVX512VL\n@@ -5748,6 +5758,143 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_insn \"avx512fp16_vcvt<floatsuffix><sseintconvert>2ph_<mode><mask_name><round_name>\"\n+  [(set (match_operand:<ssePHmode> 0 \"register_operand\" \"=v\")\n+\t(any_float:<ssePHmode>\n+\t  (match_operand:VI2H_AVX512VL 1 \"<round_nimm_predicate>\" \"<round_constraint>\")))]\n+  \"TARGET_AVX512FP16\"\n+  \"vcvt<floatsuffix><sseintconvert>2ph<round_qq2phsuff>\\t{<round_mask_op2>%1, %0<mask_operand2>|%0<mask_operand2>, %1<round_mask_op2>}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n+(define_expand \"avx512fp16_vcvt<floatsuffix><sseintconvert>2ph_<mode>\"\n+  [(set (match_operand:V8HF 0 \"register_operand\" \"=v\")\n+\t(vec_concat:V8HF\n+\t    (any_float:V4HF (match_operand:VI4_128_8_256 1 \"vector_operand\" \"vm\"))\n+\t    (match_dup 2)))]\n+  \"TARGET_AVX512FP16 && TARGET_AVX512VL\"\n+  \"operands[2] = CONST0_RTX (V4HFmode);\")\n+\n+(define_insn \"*avx512fp16_vcvt<floatsuffix><sseintconvert>2ph_<mode>\"\n+  [(set (match_operand:V8HF 0 \"register_operand\" \"=v\")\n+\t(vec_concat:V8HF\n+\t    (any_float:V4HF (match_operand:VI4_128_8_256 1 \"vector_operand\" \"vm\"))\n+\t    (match_operand:V4HF 2 \"const0_operand\" \"C\")))]\n+  \"TARGET_AVX512FP16 && TARGET_AVX512VL\"\n+  \"vcvt<floatsuffix><sseintconvert>2ph<qq2phsuff>\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n+(define_expand \"avx512fp16_vcvt<floatsuffix><sseintconvert>2ph_<mode>_mask\"\n+  [(set (match_operand:V8HF 0 \"register_operand\" \"=v\")\n+    (vec_concat:V8HF\n+        (vec_merge:V4HF\n+\t    (any_float:V4HF (match_operand:VI4_128_8_256 1 \"vector_operand\" \"vm\"))\n+            (vec_select:V4HF\n+                (match_operand:V8HF 2 \"nonimm_or_0_operand\" \"0C\")\n+                (parallel [(const_int 0) (const_int 1) (const_int 2) (const_int 3)]))\n+            (match_operand:QI 3 \"register_operand\" \"Yk\"))\n+\t    (match_dup 4)))]\n+  \"TARGET_AVX512FP16 && TARGET_AVX512VL\"\n+  \"operands[4] = CONST0_RTX (V4HFmode);\")\n+\n+(define_insn \"*avx512fp16_vcvt<floatsuffix><sseintconvert>2ph_<mode>_mask\"\n+  [(set (match_operand:V8HF 0 \"register_operand\" \"=v\")\n+    (vec_concat:V8HF\n+        (vec_merge:V4HF\n+\t    (any_float:V4HF (match_operand:VI4_128_8_256 1 \"vector_operand\" \"vm\"))\n+            (vec_select:V4HF\n+                (match_operand:V8HF 2 \"nonimm_or_0_operand\" \"0C\")\n+                (parallel [(const_int 0) (const_int 1) (const_int 2) (const_int 3)]))\n+            (match_operand:QI 3 \"register_operand\" \"Yk\"))\n+\t    (match_operand:V4HF 4 \"const0_operand\" \"C\")))]\n+  \"TARGET_AVX512FP16 && TARGET_AVX512VL\"\n+  \"vcvt<floatsuffix><sseintconvert>2ph<qq2phsuff>\\t{%1, %0%{%3%}%N2|%0%{%3%}%N2, %1}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n+(define_insn \"*avx512fp16_vcvt<floatsuffix><sseintconvert>2ph_<mode>_mask_1\"\n+  [(set (match_operand:V8HF 0 \"register_operand\" \"=v\")\n+    (vec_concat:V8HF\n+\t(vec_merge:V4HF\n+\t\t(any_float:V4HF (match_operand:VI4_128_8_256 1\n+\t\t\t\t  \"vector_operand\" \"vm\"))\n+\t    (match_operand:V4HF 3 \"const0_operand\" \"C\")\n+\t    (match_operand:QI 2 \"register_operand\" \"Yk\"))\n+\t    (match_operand:V4HF 4 \"const0_operand\" \"C\")))]\n+  \"TARGET_AVX512FP16 && TARGET_AVX512VL\"\n+  \"vcvt<floatsuffix><sseintconvert>2ph<qq2phsuff>\\t{%1, %0%{%2%}%{z%}|%0%{%2%}%{z%}, %1}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n+(define_expand \"avx512fp16_vcvt<floatsuffix>qq2ph_v2di\"\n+  [(set (match_operand:V8HF 0 \"register_operand\" \"=v\")\n+\t(vec_concat:V8HF\n+\t    (any_float:V2HF (match_operand:V2DI 1 \"vector_operand\" \"vm\"))\n+\t    (match_dup 2)))]\n+  \"TARGET_AVX512FP16 && TARGET_AVX512VL\"\n+  \"operands[2] = CONST0_RTX (V6HFmode);\")\n+\n+(define_insn \"*avx512fp16_vcvt<floatsuffix>qq2ph_v2di\"\n+  [(set (match_operand:V8HF 0 \"register_operand\" \"=v\")\n+\t(vec_concat:V8HF\n+\t    (any_float:V2HF (match_operand:V2DI 1 \"vector_operand\" \"vm\"))\n+\t    (match_operand:V6HF 2 \"const0_operand\" \"C\")))]\n+  \"TARGET_AVX512FP16 && TARGET_AVX512VL\"\n+  \"vcvt<floatsuffix>qq2ph{x}\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_expand \"avx512fp16_vcvt<floatsuffix>qq2ph_v2di_mask\"\n+  [(set (match_operand:V8HF 0 \"register_operand\" \"=v\")\n+    (vec_concat:V8HF\n+        (vec_merge:V2HF\n+\t    (any_float:V2HF (match_operand:V2DI 1 \"vector_operand\" \"vm\"))\n+            (vec_select:V2HF\n+                (match_operand:V8HF 2 \"nonimm_or_0_operand\" \"0C\")\n+                (parallel [(const_int 0) (const_int 1)]))\n+            (match_operand:QI 3 \"register_operand\" \"Yk\"))\n+\t    (match_dup 4)))]\n+  \"TARGET_AVX512FP16 && TARGET_AVX512VL\"\n+  \"operands[4] = CONST0_RTX (V6HFmode);\")\n+\n+(define_insn \"*avx512fp16_vcvt<floatsuffix>qq2ph_v2di_mask\"\n+  [(set (match_operand:V8HF 0 \"register_operand\" \"=v\")\n+    (vec_concat:V8HF\n+        (vec_merge:V2HF\n+\t    (any_float:V2HF (match_operand:V2DI 1 \"vector_operand\" \"vm\"))\n+            (vec_select:V2HF\n+                (match_operand:V8HF 2 \"nonimm_or_0_operand\" \"0C\")\n+                (parallel [(const_int 0) (const_int 1)]))\n+            (match_operand:QI 3 \"register_operand\" \"Yk\"))\n+\t    (match_operand:V6HF 4 \"const0_operand\" \"C\")))]\n+  \"TARGET_AVX512FP16 && TARGET_AVX512VL\"\n+  \"vcvt<floatsuffix>qq2ph{x}\\t{%1, %0%{%3%}%N2|%0%{%3%}%N2, %1}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+(define_insn \"*avx512fp16_vcvt<floatsuffix>qq2ph_v2di_mask_1\"\n+  [(set (match_operand:V8HF 0 \"register_operand\" \"=v\")\n+    (vec_concat:V8HF\n+\t(vec_merge:V2HF\n+\t\t(any_float:V2HF (match_operand:V2DI 1\n+\t\t\t\t  \"vector_operand\" \"vm\"))\n+\t    (match_operand:V2HF 3 \"const0_operand\" \"C\")\n+\t    (match_operand:QI 2 \"register_operand\" \"Yk\"))\n+\t    (match_operand:V6HF 4 \"const0_operand\" \"C\")))]\n+  \"TARGET_AVX512FP16 && TARGET_AVX512VL\"\n+  \"vcvt<floatsuffix>qq2ph{x}\\t{%1, %0%{%2%}%{z%}|%0%{%2%}%{z%}, %1}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"TI\")])\n+\n+\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;;\n ;; Parallel single-precision floating point conversion operations"}, {"sha": "157d49fa1cdde09f8575c553fd62e09a056584ee", "filename": "gcc/config/i386/subst.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be0e4c32bf54ef792ff8bb9e1da5015364ffaace/gcc%2Fconfig%2Fi386%2Fsubst.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be0e4c32bf54ef792ff8bb9e1da5015364ffaace/gcc%2Fconfig%2Fi386%2Fsubst.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsubst.md?ref=be0e4c32bf54ef792ff8bb9e1da5015364ffaace", "patch": "@@ -153,6 +153,7 @@\n (define_subst_attr \"round_mask_op4\" \"round\" \"\" \"<round_mask_operand4>\")\n (define_subst_attr \"round_sd_mask_op4\" \"round\" \"\" \"<round_sd_mask_operand4>\")\n (define_subst_attr \"round_constraint\" \"round\" \"vm\" \"v\")\n+(define_subst_attr \"round_qq2phsuff\" \"round\" \"<qq2phsuff>\" \"\")\n (define_subst_attr \"bcst_round_constraint\" \"round\" \"vmBr\" \"v\")\n (define_subst_attr \"round_constraint2\" \"round\" \"m\" \"v\")\n (define_subst_attr \"round_constraint3\" \"round\" \"rm\" \"r\")"}, {"sha": "412c8963570ac39599275fb98b0cd73cafd2a6df", "filename": "gcc/testsuite/gcc.target/i386/avx-1.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be0e4c32bf54ef792ff8bb9e1da5015364ffaace/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be0e4c32bf54ef792ff8bb9e1da5015364ffaace/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c?ref=be0e4c32bf54ef792ff8bb9e1da5015364ffaace", "patch": "@@ -725,6 +725,12 @@\n #define __builtin_ia32_vcvtph2uqq512_mask_round(A, B, C, D) __builtin_ia32_vcvtph2uqq512_mask_round(A, B, C, 8)\n #define __builtin_ia32_vcvtph2w512_mask_round(A, B, C, D) __builtin_ia32_vcvtph2w512_mask_round(A, B, C, 8)\n #define __builtin_ia32_vcvtph2uw512_mask_round(A, B, C, D) __builtin_ia32_vcvtph2uw512_mask_round(A, B, C, 8)\n+#define __builtin_ia32_vcvtw2ph512_mask_round(A, B, C, D) __builtin_ia32_vcvtw2ph512_mask_round(A, B, C, 8)\n+#define __builtin_ia32_vcvtuw2ph512_mask_round(A, B, C, D) __builtin_ia32_vcvtuw2ph512_mask_round(A, B, C, 8)\n+#define __builtin_ia32_vcvtdq2ph512_mask_round(A, B, C, D) __builtin_ia32_vcvtdq2ph512_mask_round(A, B, C, 8)\n+#define __builtin_ia32_vcvtudq2ph512_mask_round(A, B, C, D) __builtin_ia32_vcvtudq2ph512_mask_round(A, B, C, 8)\n+#define __builtin_ia32_vcvtqq2ph512_mask_round(A, B, C, D) __builtin_ia32_vcvtqq2ph512_mask_round(A, B, C, 8)\n+#define __builtin_ia32_vcvtuqq2ph512_mask_round(A, B, C, D) __builtin_ia32_vcvtuqq2ph512_mask_round(A, B, C, 8)\n \n /* avx512fp16vlintrin.h */\n #define __builtin_ia32_cmpph128_mask(A, B, C, D) __builtin_ia32_cmpph128_mask(A, B, 1, D)"}, {"sha": "2787b3d22ead756c5a8ca4385be5285acf8b0036", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be0e4c32bf54ef792ff8bb9e1da5015364ffaace/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be0e4c32bf54ef792ff8bb9e1da5015364ffaace/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=be0e4c32bf54ef792ff8bb9e1da5015364ffaace", "patch": "@@ -742,6 +742,12 @@\n #define __builtin_ia32_vcvtph2uqq512_mask_round(A, B, C, D) __builtin_ia32_vcvtph2uqq512_mask_round(A, B, C, 8)\n #define __builtin_ia32_vcvtph2w512_mask_round(A, B, C, D) __builtin_ia32_vcvtph2w512_mask_round(A, B, C, 8)\n #define __builtin_ia32_vcvtph2uw512_mask_round(A, B, C, D) __builtin_ia32_vcvtph2uw512_mask_round(A, B, C, 8)\n+#define __builtin_ia32_vcvtw2ph512_mask_round(A, B, C, D) __builtin_ia32_vcvtw2ph512_mask_round(A, B, C, 8)\n+#define __builtin_ia32_vcvtuw2ph512_mask_round(A, B, C, D) __builtin_ia32_vcvtuw2ph512_mask_round(A, B, C, 8)\n+#define __builtin_ia32_vcvtdq2ph512_mask_round(A, B, C, D) __builtin_ia32_vcvtdq2ph512_mask_round(A, B, C, 8)\n+#define __builtin_ia32_vcvtudq2ph512_mask_round(A, B, C, D) __builtin_ia32_vcvtudq2ph512_mask_round(A, B, C, 8)\n+#define __builtin_ia32_vcvtqq2ph512_mask_round(A, B, C, D) __builtin_ia32_vcvtqq2ph512_mask_round(A, B, C, 8)\n+#define __builtin_ia32_vcvtuqq2ph512_mask_round(A, B, C, D) __builtin_ia32_vcvtuqq2ph512_mask_round(A, B, C, 8)\n \n /* avx512fp16vlintrin.h */\n #define __builtin_ia32_cmpph128_mask(A, B, C, D) __builtin_ia32_cmpph128_mask(A, B, 1, D)"}, {"sha": "0530192d97e2b37370715342e9f83dc8ddd50026", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be0e4c32bf54ef792ff8bb9e1da5015364ffaace/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be0e4c32bf54ef792ff8bb9e1da5015364ffaace/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=be0e4c32bf54ef792ff8bb9e1da5015364ffaace", "patch": "@@ -684,6 +684,12 @@ test_1 (_mm512_cvt_roundph_epi32, __m512i, __m256h, 8)\n test_1 (_mm512_cvt_roundph_epu32, __m512i, __m256h, 8)\n test_1 (_mm512_cvt_roundph_epi64, __m512i, __m128h, 8)\n test_1 (_mm512_cvt_roundph_epu64, __m512i, __m128h, 8)\n+test_1 (_mm512_cvt_roundepi16_ph, __m512h, __m512i, 8)\n+test_1 (_mm512_cvt_roundepu16_ph, __m512h, __m512i, 8)\n+test_1 (_mm512_cvt_roundepi32_ph, __m256h, __m512i, 8)\n+test_1 (_mm512_cvt_roundepu32_ph, __m256h, __m512i, 8)\n+test_1 (_mm512_cvt_roundepi64_ph, __m128h, __m512i, 8)\n+test_1 (_mm512_cvt_roundepu64_ph, __m128h, __m512i, 8)\n test_1x (_mm512_reduce_round_ph, __m512h, __m512h, 123, 8)\n test_1x (_mm512_roundscale_round_ph, __m512h, __m512h, 123, 8)\n test_1x (_mm512_getmant_ph, __m512h, __m512h, 1, 1)\n@@ -722,6 +728,12 @@ test_2 (_mm512_maskz_cvt_roundph_epi32, __m512i, __mmask16, __m256h, 8)\n test_2 (_mm512_maskz_cvt_roundph_epu32, __m512i, __mmask16, __m256h, 8)\n test_2 (_mm512_maskz_cvt_roundph_epi64, __m512i, __mmask8, __m128h, 8)\n test_2 (_mm512_maskz_cvt_roundph_epu64, __m512i, __mmask8, __m128h, 8)\n+test_2 (_mm512_maskz_cvt_roundepi16_ph, __m512h, __mmask32, __m512i, 8)\n+test_2 (_mm512_maskz_cvt_roundepu16_ph, __m512h, __mmask32, __m512i, 8)\n+test_2 (_mm512_maskz_cvt_roundepi32_ph, __m256h, __mmask16, __m512i, 8)\n+test_2 (_mm512_maskz_cvt_roundepu32_ph, __m256h, __mmask16, __m512i, 8)\n+test_2 (_mm512_maskz_cvt_roundepi64_ph, __m128h, __mmask8, __m512i, 8)\n+test_2 (_mm512_maskz_cvt_roundepu64_ph, __m128h, __mmask8, __m512i, 8)\n test_2x (_mm512_cmp_round_ph_mask, __mmask32, __m512h, __m512h, 1, 8)\n test_2x (_mm_cmp_round_sh_mask, __mmask8, __m128h, __m128h, 1, 8)\n test_2x (_mm_comi_round_sh, int, __m128h, __m128h, 1, 8)\n@@ -766,6 +778,12 @@ test_3 (_mm512_mask_cvt_roundph_epi32, __m512i, __m512i, __mmask16, __m256h, 8)\n test_3 (_mm512_mask_cvt_roundph_epu32, __m512i, __m512i, __mmask16, __m256h, 8)\n test_3 (_mm512_mask_cvt_roundph_epi64, __m512i, __m512i, __mmask8, __m128h, 8)\n test_3 (_mm512_mask_cvt_roundph_epu64, __m512i, __m512i, __mmask8, __m128h, 8)\n+test_3 (_mm512_mask_cvt_roundepi16_ph, __m512h, __m512h, __mmask32, __m512i, 8)\n+test_3 (_mm512_mask_cvt_roundepu16_ph, __m512h, __m512h, __mmask32, __m512i, 8)\n+test_3 (_mm512_mask_cvt_roundepi32_ph, __m256h, __m256h, __mmask16, __m512i, 8)\n+test_3 (_mm512_mask_cvt_roundepu32_ph, __m256h, __m256h, __mmask16, __m512i, 8)\n+test_3 (_mm512_mask_cvt_roundepi64_ph, __m128h, __m128h, __mmask8, __m512i, 8)\n+test_3 (_mm512_mask_cvt_roundepu64_ph, __m128h, __m128h, __mmask8, __m512i, 8)\n test_3x (_mm512_mask_cmp_round_ph_mask, __mmask32, __mmask32, __m512h, __m512h, 1, 8)\n test_3x (_mm_mask_cmp_round_sh_mask, __mmask8, __mmask8, __m128h, __m128h, 1, 8)\n test_3x (_mm512_mask_reduce_round_ph, __m512h, __m512h, __mmask32, __m512h, 123, 8)"}, {"sha": "04e6340516b817bb71f86833c38858801326519f", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be0e4c32bf54ef792ff8bb9e1da5015364ffaace/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be0e4c32bf54ef792ff8bb9e1da5015364ffaace/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=be0e4c32bf54ef792ff8bb9e1da5015364ffaace", "patch": "@@ -789,6 +789,12 @@ test_1 (_mm512_cvt_roundph_epi32, __m512i, __m256h, 8)\n test_1 (_mm512_cvt_roundph_epu32, __m512i, __m256h, 8)\n test_1 (_mm512_cvt_roundph_epi64, __m512i, __m128h, 8)\n test_1 (_mm512_cvt_roundph_epu64, __m512i, __m128h, 8)\n+test_1 (_mm512_cvt_roundepi16_ph, __m512h, __m512i, 8)\n+test_1 (_mm512_cvt_roundepu16_ph, __m512h, __m512i, 8)\n+test_1 (_mm512_cvt_roundepi32_ph, __m256h, __m512i, 8)\n+test_1 (_mm512_cvt_roundepu32_ph, __m256h, __m512i, 8)\n+test_1 (_mm512_cvt_roundepi64_ph, __m128h, __m512i, 8)\n+test_1 (_mm512_cvt_roundepu64_ph, __m128h, __m512i, 8)\n test_1x (_mm512_reduce_round_ph, __m512h, __m512h, 123, 8)\n test_1x (_mm512_roundscale_round_ph, __m512h, __m512h, 123, 8)\n test_1x (_mm512_getmant_ph, __m512h, __m512h, 1, 1)\n@@ -826,6 +832,12 @@ test_2 (_mm512_maskz_cvt_roundph_epi32, __m512i, __mmask16, __m256h, 8)\n test_2 (_mm512_maskz_cvt_roundph_epu32, __m512i, __mmask16, __m256h, 8)\n test_2 (_mm512_maskz_cvt_roundph_epi64, __m512i, __mmask8, __m128h, 8)\n test_2 (_mm512_maskz_cvt_roundph_epu64, __m512i, __mmask8, __m128h, 8)\n+test_2 (_mm512_maskz_cvt_roundepi16_ph, __m512h, __mmask32, __m512i, 8)\n+test_2 (_mm512_maskz_cvt_roundepu16_ph, __m512h, __mmask32, __m512i, 8)\n+test_2 (_mm512_maskz_cvt_roundepi32_ph, __m256h, __mmask16, __m512i, 8)\n+test_2 (_mm512_maskz_cvt_roundepu32_ph, __m256h, __mmask16, __m512i, 8)\n+test_2 (_mm512_maskz_cvt_roundepi64_ph, __m128h, __mmask8, __m512i, 8)\n+test_2 (_mm512_maskz_cvt_roundepu64_ph, __m128h, __mmask8, __m512i, 8)\n test_2x (_mm512_cmp_round_ph_mask, __mmask32, __m512h, __m512h, 1, 8)\n test_2x (_mm_cmp_round_sh_mask, __mmask8, __m128h, __m128h, 1, 8)\n test_2x (_mm_comi_round_sh, int, __m128h, __m128h, 1, 8)\n@@ -869,6 +881,12 @@ test_3 (_mm512_mask_cvt_roundph_epi32, __m512i, __m512i, __mmask16, __m256h, 8)\n test_3 (_mm512_mask_cvt_roundph_epu32, __m512i, __m512i, __mmask16, __m256h, 8)\n test_3 (_mm512_mask_cvt_roundph_epi64, __m512i, __m512i, __mmask8, __m128h, 8)\n test_3 (_mm512_mask_cvt_roundph_epu64, __m512i, __m512i, __mmask8, __m128h, 8)\n+test_3 (_mm512_mask_cvt_roundepi16_ph, __m512h, __m512h, __mmask32, __m512i, 8)\n+test_3 (_mm512_mask_cvt_roundepu16_ph, __m512h, __m512h, __mmask32, __m512i, 8)\n+test_3 (_mm512_mask_cvt_roundepi32_ph, __m256h, __m256h, __mmask16, __m512i, 8)\n+test_3 (_mm512_mask_cvt_roundepu32_ph, __m256h, __m256h, __mmask16, __m512i, 8)\n+test_3 (_mm512_mask_cvt_roundepi64_ph, __m128h, __m128h, __mmask8, __m512i, 8)\n+test_3 (_mm512_mask_cvt_roundepu64_ph, __m128h, __m128h, __mmask8, __m512i, 8)\n test_3x (_mm512_mask_cmp_round_ph_mask, __mmask32, __mmask32, __m512h, __m512h, 1, 8)\n test_3x (_mm_mask_cmp_round_sh_mask, __mmask8, __mmask8, __m128h, __m128h, 1, 8)\n test_3x (_mm512_mask_reduce_round_ph, __m512h, __m512h, __mmask32, __m512h, 123, 8)"}, {"sha": "bff448d1928731ae52eba07259947417d5d5f58e", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be0e4c32bf54ef792ff8bb9e1da5015364ffaace/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be0e4c32bf54ef792ff8bb9e1da5015364ffaace/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=be0e4c32bf54ef792ff8bb9e1da5015364ffaace", "patch": "@@ -743,6 +743,12 @@\n #define __builtin_ia32_vcvtph2uqq512_mask_round(A, B, C, D) __builtin_ia32_vcvtph2uqq512_mask_round(A, B, C, 8)\n #define __builtin_ia32_vcvtph2w512_mask_round(A, B, C, D) __builtin_ia32_vcvtph2w512_mask_round(A, B, C, 8)\n #define __builtin_ia32_vcvtph2uw512_mask_round(A, B, C, D) __builtin_ia32_vcvtph2uw512_mask_round(A, B, C, 8)\n+#define __builtin_ia32_vcvtw2ph512_mask_round(A, B, C, D) __builtin_ia32_vcvtw2ph512_mask_round(A, B, C, 8)\n+#define __builtin_ia32_vcvtuw2ph512_mask_round(A, B, C, D) __builtin_ia32_vcvtuw2ph512_mask_round(A, B, C, 8)\n+#define __builtin_ia32_vcvtdq2ph512_mask_round(A, B, C, D) __builtin_ia32_vcvtdq2ph512_mask_round(A, B, C, 8)\n+#define __builtin_ia32_vcvtudq2ph512_mask_round(A, B, C, D) __builtin_ia32_vcvtudq2ph512_mask_round(A, B, C, 8)\n+#define __builtin_ia32_vcvtqq2ph512_mask_round(A, B, C, D) __builtin_ia32_vcvtqq2ph512_mask_round(A, B, C, 8)\n+#define __builtin_ia32_vcvtuqq2ph512_mask_round(A, B, C, D) __builtin_ia32_vcvtuqq2ph512_mask_round(A, B, C, 8)\n \n /* avx512fp16vlintrin.h */\n #define __builtin_ia32_cmpph128_mask(A, B, C, D) __builtin_ia32_cmpph128_mask(A, B, 1, D)"}]}