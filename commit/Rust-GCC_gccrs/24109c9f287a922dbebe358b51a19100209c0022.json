{"sha": "24109c9f287a922dbebe358b51a19100209c0022", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQxMDljOWYyODdhOTIyZGJlYmUzNThiNTFhMTkxMDAyMDljMDAyMg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-10-03T15:31:54Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-10-03T15:31:54Z"}, "message": "fold-const.c (fold): When seeing if D & ~C != 0 to fold (A & C) == D into 0, fold ~C.\n\n\t* fold-const.c (fold) [EQ_EXPR]: When seeing if D & ~C != 0 to\n\tfold (A & C) == D into 0, fold ~C.  Similarly, for the case\n\twhere | is used instead of &.\n\n\t* testsuite/gcc.dg/tree-ssa/20041002-1.c: New.\n\nFrom-SVN: r88449", "tree": {"sha": "b878167fa61a2c5dbc8db3e8bac37811fef8aab1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b878167fa61a2c5dbc8db3e8bac37811fef8aab1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24109c9f287a922dbebe358b51a19100209c0022", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24109c9f287a922dbebe358b51a19100209c0022", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24109c9f287a922dbebe358b51a19100209c0022", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24109c9f287a922dbebe358b51a19100209c0022/comments", "author": null, "committer": null, "parents": [{"sha": "0146748a019f74213a4b32ba99a9ff88a745a02a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0146748a019f74213a4b32ba99a9ff88a745a02a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0146748a019f74213a4b32ba99a9ff88a745a02a"}], "stats": {"total": 50, "additions": 41, "deletions": 9}, "files": [{"sha": "8cb2906e2f91e43d21a15bfeff7f31d4eecb7b3b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24109c9f287a922dbebe358b51a19100209c0022/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24109c9f287a922dbebe358b51a19100209c0022/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=24109c9f287a922dbebe358b51a19100209c0022", "patch": "@@ -1,3 +1,9 @@\n+2004-10-03  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* fold-const.c (fold) [EQ_EXPR]: When seeing if D & ~C != 0 to\n+\tfold (A & C) == D into 0, fold ~C.  Similarly, for the case\n+\twhere | is used instead of &.\n+\n 2004-10-03  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* ginclude/stddef.h: Fix a comment typo."}, {"sha": "7de102f98704a062f6c93cc72b42ee256ca91f9e", "filename": "gcc/fold-const.c", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24109c9f287a922dbebe358b51a19100209c0022/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24109c9f287a922dbebe358b51a19100209c0022/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=24109c9f287a922dbebe358b51a19100209c0022", "patch": "@@ -8400,11 +8400,11 @@ fold (tree expr)\n \t  && TREE_CODE (arg1) == INTEGER_CST\n \t  && TREE_CODE (TREE_OPERAND (arg0, 1)) == INTEGER_CST)\n \t{\n-\t  tree dandnotc\n-\t    = fold (build2 (BIT_AND_EXPR, TREE_TYPE (arg0),\n-\t\t\t    arg1, build1 (BIT_NOT_EXPR,\n-\t\t\t\t\t  TREE_TYPE (TREE_OPERAND (arg0, 1)),\n-\t\t\t\t\t  TREE_OPERAND (arg0, 1))));\n+\t  tree notc = fold (build1 (BIT_NOT_EXPR,\n+\t\t\t\t    TREE_TYPE (TREE_OPERAND (arg0, 1)),\n+\t\t\t\t    TREE_OPERAND (arg0, 1)));\n+\t  tree dandnotc = fold (build2 (BIT_AND_EXPR, TREE_TYPE (arg0),\n+\t\t\t\t\targ1, notc));\n \t  tree rslt = code == EQ_EXPR ? integer_zero_node : integer_one_node;\n \t  if (integer_nonzerop (dandnotc))\n \t    return omit_one_operand (type, rslt, arg0);\n@@ -8417,10 +8417,9 @@ fold (tree expr)\n \t  && TREE_CODE (arg1) == INTEGER_CST\n \t  && TREE_CODE (TREE_OPERAND (arg0, 1)) == INTEGER_CST)\n \t{\n-\t  tree candnotd\n-\t    = fold (build2 (BIT_AND_EXPR, TREE_TYPE (arg0),\n-\t\t\t    TREE_OPERAND (arg0, 1),\n-\t\t\t    build1 (BIT_NOT_EXPR, TREE_TYPE (arg1), arg1)));\n+\t  tree notd = fold (build1 (BIT_NOT_EXPR, TREE_TYPE (arg1), arg1));\n+\t  tree candnotd = fold (build2 (BIT_AND_EXPR, TREE_TYPE (arg0),\n+\t\t\t\t\tTREE_OPERAND (arg0, 1), notd));\n \t  tree rslt = code == EQ_EXPR ? integer_zero_node : integer_one_node;\n \t  if (integer_nonzerop (candnotd))\n \t    return omit_one_operand (type, rslt, arg0);"}, {"sha": "3e323055361203ec084c04d553fa212794a6831b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24109c9f287a922dbebe358b51a19100209c0022/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24109c9f287a922dbebe358b51a19100209c0022/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=24109c9f287a922dbebe358b51a19100209c0022", "patch": "@@ -1,3 +1,7 @@\n+2004-10-03  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* gcc.dg/tree-ssa/20041002-1.c: New.\n+\n 2004-10-03  Paul Brook  <paul@codesourcery.com>\n \n \t* gfortran.dg/pr17286.f90: Add dg-do line.  Explicitly test bug,"}, {"sha": "7f38f80f8dfb8fa9d6cb7fdc3cff97b1f21c6c16", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20041002-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24109c9f287a922dbebe358b51a19100209c0022/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20041002-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24109c9f287a922dbebe358b51a19100209c0022/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20041002-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20041002-1.c?ref=24109c9f287a922dbebe358b51a19100209c0022", "patch": "@@ -0,0 +1,23 @@\n+/* PR tree-optimization/16632\n+   fold() failed to see the following \"if\" statements never trigger.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-ssa\" } */\n+\n+int\n+foo (int i)\n+{\n+  if ((i | 3) == 1)\n+    return 1;\n+  return 0;\n+}\n+\n+int\n+bar (int i)\n+{\n+  if ((i & 4) == 2)\n+    return 1;\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"if\" 0 \"ssa\" } } */"}]}