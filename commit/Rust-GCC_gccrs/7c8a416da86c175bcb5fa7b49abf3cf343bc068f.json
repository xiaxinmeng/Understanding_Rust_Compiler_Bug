{"sha": "7c8a416da86c175bcb5fa7b49abf3cf343bc068f", "node_id": "C_kwDOANBUbNoAKDdjOGE0MTZkYTg2YzE3NWJjYjVmYTdiNDlhYmYzY2YzNDNiYzA2OGY", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-11-10T18:36:16Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-11-10T18:39:35Z"}, "message": "Adjust test to avoid target-specific failures [PR103161].\n\nResolves:\nPR testsuite/103161 - Better ranges cause builtin-sprintf-warn-16.c failure\n\ngcc/testsuite:\n\tPR testsuite/103161\n\t* gcc.dg/tree-ssa/builtin-sprintf-warn-16.c: Avoid relying on\n\targument evaluation order.  Cast width and precision to signed\n\tto avoid undefined behavior.", "tree": {"sha": "1c6f46d2c8651049486a6d167f020f41a3284ce2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c6f46d2c8651049486a6d167f020f41a3284ce2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c8a416da86c175bcb5fa7b49abf3cf343bc068f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c8a416da86c175bcb5fa7b49abf3cf343bc068f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c8a416da86c175bcb5fa7b49abf3cf343bc068f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c8a416da86c175bcb5fa7b49abf3cf343bc068f/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c04af34c9c66d8ed9f6c12c97dd064238ddfa20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c04af34c9c66d8ed9f6c12c97dd064238ddfa20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c04af34c9c66d8ed9f6c12c97dd064238ddfa20"}], "stats": {"total": 28, "additions": 17, "deletions": 11}, "files": [{"sha": "f975e16f36f7830addbd722d103486d2b888651a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-warn-16.c", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c8a416da86c175bcb5fa7b49abf3cf343bc068f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c8a416da86c175bcb5fa7b49abf3cf343bc068f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-16.c?ref=7c8a416da86c175bcb5fa7b49abf3cf343bc068f", "patch": "@@ -130,16 +130,18 @@ void test_width_var (void)\n \n   {\n     /* Create an unsigned range with a lower bound greater than 1 and\n-       an upper bound in excess of INT_MAX and verify that the lower\n-       bound isn't used as the minimum output (since the excessive\n-       upper bound wraps around zero).  It's possible to constrain\n-       the upper bound on the output more, based on the upper bound\n-       of the width here, but not worth the trouble.  */\n-    extern unsigned w;\n+       an upper bound in excess of INT_MAX and verify that after conversion\n+       to signed int the lower bound isn't used as the minimum output (since\n+       the excessive upper bound wraps around zero).  Passing the precision\n+       as unsigned, without the cast to signed int, is undedined.\n+       It's possible to constrain the upper bound on the output more, based\n+       on the upper bound of the width here, but not worth the trouble.  */\n+    unsigned w = W (unsigned);\n     if (w < 5 || (unsigned)-1 - 7 < w)\n       w = 5;\n+    int val = V (int);\n \n-    T (\"%*u\", w, V (int));   /* { dg-warning \"between 1 and 2147483648 \" } */\n+    T (\"%*u\", (int)w, val);   /* { dg-warning \"between 1 and 2147483648 \" } */\n   }\n \n   {\n@@ -234,13 +236,17 @@ void test_precision_var (void)\n   {\n     /* Similar to the corresponding width case, create an unsigned range\n        with a lower bound greater than 1 and an upper bound in excess of\n-       INT_MAX and verify that the lower bound isn't used as the minimum\n-       output (since the excessive upper bound wraps around zero).  */\n-    extern unsigned p;\n+       INT_MAX and verify that after conversion to int the lower bound isn't\n+       used as the minimum output (since the excessive upper bound wraps\n+       around zero).  Passing the precision as unsigned, without a cast to\n+       signed int, is undefined.  */\n+    unsigned p = V (unsigned);\n     if (p < 7 || (unsigned)-1 - 9 < p)\n       p = 7;\n \n-    T (\"%.*u\", p, V (int));   /* { dg-warning \"up to 2147483647 \" } */\n+    int val = V (int);\n+\n+    T (\"%.*u\", (int)p, val);   /* { dg-warning \"up to 2147483647 \" } */\n   }\n \n   {"}]}