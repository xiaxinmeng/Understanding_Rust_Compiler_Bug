{"sha": "658cea5b3e38f28dcdfe3322998089e2c19bad07", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjU4Y2VhNWIzZTM4ZjI4ZGNkZmUzMzIyOTk4MDg5ZTJjMTliYWQwNw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-09-18T13:40:54Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-09-18T13:40:54Z"}, "message": "[multiple changes]\n\n2009-09-18  Arnaud Charlet  <charlet@adacore.com>\n\n\t* s-taprop-tru64.adb, s-taprop-linux.adb, s-taprop-solaris.adb,\n\ts-taprop-irix.adb, s-taprop-posix.adb (Abort_Task): Do nothing if no\n\tsignal handler is installed.\n\t* s-tassta.adb (Finalize_Global_Tasks): Do not wait for independent\n\ttasks if Abort_Task_Interrupt cannot be used.\n\n2009-09-18  Vincent Celier  <celier@adacore.com>\n\n\t* prj-tree.ads: Minor comment update\n\nFrom-SVN: r151841", "tree": {"sha": "60698fbf303f15de24e86c6bb64c0aef1c577c52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60698fbf303f15de24e86c6bb64c0aef1c577c52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/658cea5b3e38f28dcdfe3322998089e2c19bad07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/658cea5b3e38f28dcdfe3322998089e2c19bad07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/658cea5b3e38f28dcdfe3322998089e2c19bad07", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/658cea5b3e38f28dcdfe3322998089e2c19bad07/comments", "author": null, "committer": null, "parents": [{"sha": "2b5bcdeec811568080fbf35bf5927d6fa15b8e05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b5bcdeec811568080fbf35bf5927d6fa15b8e05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b5bcdeec811568080fbf35bf5927d6fa15b8e05"}], "stats": {"total": 185, "additions": 126, "deletions": 59}, "files": [{"sha": "f763a28b7f70c7525879c54b8b5837d3604f05de", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/658cea5b3e38f28dcdfe3322998089e2c19bad07/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/658cea5b3e38f28dcdfe3322998089e2c19bad07/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=658cea5b3e38f28dcdfe3322998089e2c19bad07", "patch": "@@ -1,3 +1,15 @@\n+2009-09-18  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* s-taprop-tru64.adb, s-taprop-linux.adb, s-taprop-solaris.adb,\n+\ts-taprop-irix.adb, s-taprop-posix.adb (Abort_Task): Do nothing if no\n+\tsignal handler is installed.\n+\t* s-tassta.adb (Finalize_Global_Tasks): Do not wait for independent\n+\ttasks if Abort_Task_Interrupt cannot be used.\n+\n+2009-09-18  Vincent Celier  <celier@adacore.com>\n+\n+\t* prj-tree.ads: Minor comment update\n+\n 2009-09-17  Bob Duff  <duff@adacore.com>\n \n \t* g-socket.ads: Document the fact that Close_Selector has no effect on"}, {"sha": "96a28279c32a6708aa4b165a6153578cddf0ea4b", "filename": "gcc/ada/prj-tree.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/658cea5b3e38f28dcdfe3322998089e2c19bad07/gcc%2Fada%2Fprj-tree.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/658cea5b3e38f28dcdfe3322998089e2c19bad07/gcc%2Fada%2Fprj-tree.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-tree.ads?ref=658cea5b3e38f28dcdfe3322998089e2c19bad07", "patch": "@@ -1377,7 +1377,8 @@ package Prj.Tree is\n       Key        => Name_Id,\n       Hash       => Hash,\n       Equal      => \"=\");\n-   --  Comment required describing what this table is used for ???\n+   --  General type for htables associating name_id to name_id.\n+   --  This is in particular used to store the values of external references\n \n    type Project_Node_Tree_Data is record\n       Project_Nodes : Tree_Private_Part.Project_Node_Table.Instance;"}, {"sha": "834392142597fd7c044cd847f5448e1089f99e29", "filename": "gcc/ada/s-taprop-irix.adb", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/658cea5b3e38f28dcdfe3322998089e2c19bad07/gcc%2Fada%2Fs-taprop-irix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/658cea5b3e38f28dcdfe3322998089e2c19bad07/gcc%2Fada%2Fs-taprop-irix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-irix.adb?ref=658cea5b3e38f28dcdfe3322998089e2c19bad07", "patch": "@@ -100,6 +100,9 @@ package body System.Task_Primitives.Operations is\n    Foreign_Task_Elaborated : aliased Boolean := True;\n    --  Used to identified fake tasks (i.e., non-Ada Threads)\n \n+   Abort_Handler_Installed : Boolean := False;\n+   --  True if a handler for the abort signal is installed\n+\n    --------------------\n    -- Local Packages --\n    --------------------\n@@ -159,8 +162,10 @@ package body System.Task_Primitives.Operations is\n       Old_Set : aliased sigset_t;\n \n    begin\n-      --  It is not safe to raise an exception when using ZCX and the GCC\n-      --  exception handling mechanism.\n+      --  It's not safe to raise an exception when using GCC ZCX mechanism.\n+      --  Note that we still need to install a signal handler, since in some\n+      --  cases (e.g. shutdown of the Server_Task in System.Interrupts) we\n+      --  need to send the Abort signal to a task.\n \n       if ZCX_By_Default and then GCC_ZCX_Support then\n          return;\n@@ -956,11 +961,13 @@ package body System.Task_Primitives.Operations is\n    procedure Abort_Task (T : Task_Id) is\n       Result : Interfaces.C.int;\n    begin\n-      Result :=\n-        pthread_kill\n-          (T.Common.LL.Thread,\n-           Signal (System.Interrupt_Management.Abort_Task_Interrupt));\n-      pragma Assert (Result = 0);\n+      if Abort_Handler_Installed then\n+         Result :=\n+           pthread_kill\n+             (T.Common.LL.Thread,\n+              Signal (System.Interrupt_Management.Abort_Task_Interrupt));\n+         pragma Assert (Result = 0);\n+      end if;\n    end Abort_Task;\n \n    ----------------\n@@ -1332,8 +1339,6 @@ package body System.Task_Primitives.Operations is\n          end if;\n       end loop;\n \n-      --  Install the abort-signal handler\n-\n       if State\n           (System.Interrupt_Management.Abort_Task_Interrupt) /= Default\n       then\n@@ -1350,6 +1355,7 @@ package body System.Task_Primitives.Operations is\n               act'Unchecked_Access,\n               old_act'Unchecked_Access);\n          pragma Assert (Result = 0);\n+         Abort_Handler_Installed := True;\n       end if;\n    end Initialize;\n "}, {"sha": "46b10a3f1f508e321809b5620cdac7e0ead8da4a", "filename": "gcc/ada/s-taprop-linux.adb", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/658cea5b3e38f28dcdfe3322998089e2c19bad07/gcc%2Fada%2Fs-taprop-linux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/658cea5b3e38f28dcdfe3322998089e2c19bad07/gcc%2Fada%2Fs-taprop-linux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-linux.adb?ref=658cea5b3e38f28dcdfe3322998089e2c19bad07", "patch": "@@ -68,9 +68,6 @@ package body System.Task_Primitives.Operations is\n    use System.OS_Primitives;\n    use System.Task_Info;\n \n-   Use_Alternate_Stack : constant Boolean := Alternate_Stack_Size /= 0;\n-   --  Whether to use an alternate signal stack for stack overflows\n-\n    ----------------\n    -- Local Data --\n    ----------------\n@@ -112,6 +109,12 @@ package body System.Task_Primitives.Operations is\n    Foreign_Task_Elaborated : aliased Boolean := True;\n    --  Used to identified fake tasks (i.e., non-Ada Threads)\n \n+   Use_Alternate_Stack : constant Boolean := Alternate_Stack_Size /= 0;\n+   --  Whether to use an alternate signal stack for stack overflows\n+\n+   Abort_Handler_Installed : Boolean := False;\n+   --  True if a handler for the abort signal is installed\n+\n    --------------------\n    -- Local Packages --\n    --------------------\n@@ -172,6 +175,11 @@ package body System.Task_Primitives.Operations is\n       Old_Set : aliased sigset_t;\n \n    begin\n+      --  It's not safe to raise an exception when using GCC ZCX mechanism.\n+      --  Note that we still need to install a signal handler, since in some\n+      --  cases (e.g. shutdown of the Server_Task in System.Interrupts) we\n+      --  need to send the Abort signal to a task.\n+\n       if ZCX_By_Default and then GCC_ZCX_Support then\n          return;\n       end if;\n@@ -916,11 +924,13 @@ package body System.Task_Primitives.Operations is\n    procedure Abort_Task (T : Task_Id) is\n       Result : Interfaces.C.int;\n    begin\n-      Result :=\n-        pthread_kill\n-          (T.Common.LL.Thread,\n-           Signal (System.Interrupt_Management.Abort_Task_Interrupt));\n-      pragma Assert (Result = 0);\n+      if Abort_Handler_Installed then\n+         Result :=\n+           pthread_kill\n+             (T.Common.LL.Thread,\n+              Signal (System.Interrupt_Management.Abort_Task_Interrupt));\n+         pragma Assert (Result = 0);\n+      end if;\n    end Abort_Task;\n \n    ----------------\n@@ -1264,8 +1274,6 @@ package body System.Task_Primitives.Operations is\n \n       Enter_Task (Environment_Task);\n \n-      --  Install the abort-signal handler\n-\n       if State\n           (System.Interrupt_Management.Abort_Task_Interrupt) /= Default\n       then\n@@ -1282,6 +1290,7 @@ package body System.Task_Primitives.Operations is\n             act'Unchecked_Access,\n             old_act'Unchecked_Access);\n          pragma Assert (Result = 0);\n+         Abort_Handler_Installed := True;\n       end if;\n    end Initialize;\n "}, {"sha": "db385c8c589794bc11e90f35071ea3f597a6d666", "filename": "gcc/ada/s-taprop-posix.adb", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/658cea5b3e38f28dcdfe3322998089e2c19bad07/gcc%2Fada%2Fs-taprop-posix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/658cea5b3e38f28dcdfe3322998089e2c19bad07/gcc%2Fada%2Fs-taprop-posix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-posix.adb?ref=658cea5b3e38f28dcdfe3322998089e2c19bad07", "patch": "@@ -71,9 +71,6 @@ package body System.Task_Primitives.Operations is\n    use System.Parameters;\n    use System.OS_Primitives;\n \n-   Use_Alternate_Stack : constant Boolean := Alternate_Stack_Size /= 0;\n-   --  Whether to use an alternate signal stack for stack overflows\n-\n    ----------------\n    -- Local Data --\n    ----------------\n@@ -117,6 +114,12 @@ package body System.Task_Primitives.Operations is\n    Foreign_Task_Elaborated : aliased Boolean := True;\n    --  Used to identified fake tasks (i.e., non-Ada Threads)\n \n+   Use_Alternate_Stack : constant Boolean := Alternate_Stack_Size /= 0;\n+   --  Whether to use an alternate signal stack for stack overflows\n+\n+   Abort_Handler_Installed : Boolean := False;\n+   --  True if a handler for the abort signal is installed\n+\n    --------------------\n    -- Local Packages --\n    --------------------\n@@ -198,8 +201,10 @@ package body System.Task_Primitives.Operations is\n       pragma Warnings (Off, Result);\n \n    begin\n-      --  It is not safe to raise an exception when using ZCX and the GCC\n-      --  exception handling mechanism.\n+      --  It's not safe to raise an exception when using GCC ZCX mechanism.\n+      --  Note that we still need to install a signal handler, since in some\n+      --  cases (e.g. shutdown of the Server_Task in System.Interrupts) we\n+      --  need to send the Abort signal to a task.\n \n       if ZCX_By_Default and then GCC_ZCX_Support then\n          return;\n@@ -1066,11 +1071,13 @@ package body System.Task_Primitives.Operations is\n    procedure Abort_Task (T : Task_Id) is\n       Result : Interfaces.C.int;\n    begin\n-      Result :=\n-        pthread_kill\n-          (T.Common.LL.Thread,\n-           Signal (System.Interrupt_Management.Abort_Task_Interrupt));\n-      pragma Assert (Result = 0);\n+      if Abort_Handler_Installed then\n+         Result :=\n+           pthread_kill\n+             (T.Common.LL.Thread,\n+              Signal (System.Interrupt_Management.Abort_Task_Interrupt));\n+         pragma Assert (Result = 0);\n+      end if;\n    end Abort_Task;\n \n    ----------------\n@@ -1447,8 +1454,6 @@ package body System.Task_Primitives.Operations is\n \n       Enter_Task (Environment_Task);\n \n-      --  Install the abort-signal handler\n-\n       if State\n           (System.Interrupt_Management.Abort_Task_Interrupt) /= Default\n       then\n@@ -1465,6 +1470,7 @@ package body System.Task_Primitives.Operations is\n               act'Unchecked_Access,\n               old_act'Unchecked_Access);\n          pragma Assert (Result = 0);\n+         Abort_Handler_Installed := True;\n       end if;\n    end Initialize;\n "}, {"sha": "1e47b9486ed79efbcff362507178e32c05ce745c", "filename": "gcc/ada/s-taprop-solaris.adb", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/658cea5b3e38f28dcdfe3322998089e2c19bad07/gcc%2Fada%2Fs-taprop-solaris.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/658cea5b3e38f28dcdfe3322998089e2c19bad07/gcc%2Fada%2Fs-taprop-solaris.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-solaris.adb?ref=658cea5b3e38f28dcdfe3322998089e2c19bad07", "patch": "@@ -97,6 +97,9 @@ package body System.Task_Primitives.Operations is\n    --  using in error checking.\n    --  The following are internal configuration constants needed.\n \n+   Abort_Handler_Installed : Boolean := False;\n+   --  True if a handler for the abort signal is installed\n+\n    ----------------------\n    -- Priority Support --\n    ----------------------\n@@ -256,8 +259,10 @@ package body System.Task_Primitives.Operations is\n       pragma Warnings (Off, Result);\n \n    begin\n-      --  It is not safe to raise an exception when using ZCX and the GCC\n-      --  exception handling mechanism.\n+      --  It's not safe to raise an exception when using GCC ZCX mechanism.\n+      --  Note that we still need to install a signal handler, since in some\n+      --  cases (e.g. shutdown of the Server_Task in System.Interrupts) we\n+      --  need to send the Abort signal to a task.\n \n       if ZCX_By_Default and then GCC_ZCX_Support then\n          return;\n@@ -487,7 +492,7 @@ package body System.Task_Primitives.Operations is\n \n       Enter_Task (Environment_Task);\n \n-      --  Install the abort-signal handler\n+      Configure_Processors;\n \n       if State\n           (System.Interrupt_Management.Abort_Task_Interrupt) /= Default\n@@ -513,9 +518,8 @@ package body System.Task_Primitives.Operations is\n               act'Unchecked_Access,\n               old_act'Unchecked_Access);\n          pragma Assert (Result = 0);\n+         Abort_Handler_Installed := True;\n       end if;\n-\n-      Configure_Processors;\n    end Initialize;\n \n    ---------------------\n@@ -1095,12 +1099,14 @@ package body System.Task_Primitives.Operations is\n    procedure Abort_Task (T : Task_Id) is\n       Result : Interfaces.C.int;\n    begin\n-      pragma Assert (T /= Self);\n-      Result :=\n-        thr_kill\n-          (T.Common.LL.Thread,\n-           Signal (System.Interrupt_Management.Abort_Task_Interrupt));\n-      pragma Assert (Result = 0);\n+      if Abort_Handler_Installed then\n+         pragma Assert (T /= Self);\n+         Result :=\n+           thr_kill\n+             (T.Common.LL.Thread,\n+              Signal (System.Interrupt_Management.Abort_Task_Interrupt));\n+         pragma Assert (Result = 0);\n+      end if;\n    end Abort_Task;\n \n    -----------"}, {"sha": "c5a68b7a4e2058cda251631fb56e74a1054b82f7", "filename": "gcc/ada/s-taprop-tru64.adb", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/658cea5b3e38f28dcdfe3322998089e2c19bad07/gcc%2Fada%2Fs-taprop-tru64.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/658cea5b3e38f28dcdfe3322998089e2c19bad07/gcc%2Fada%2Fs-taprop-tru64.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-tru64.adb?ref=658cea5b3e38f28dcdfe3322998089e2c19bad07", "patch": "@@ -100,6 +100,9 @@ package body System.Task_Primitives.Operations is\n    Foreign_Task_Elaborated : aliased Boolean := True;\n    --  Used to identified fake tasks (i.e., non-Ada Threads)\n \n+   Abort_Handler_Installed : Boolean := False;\n+   --  True if a handler for the abort signal is installed\n+\n    --------------------\n    -- Local Packages --\n    --------------------\n@@ -162,8 +165,10 @@ package body System.Task_Primitives.Operations is\n       pragma Warnings (Off, Result);\n \n    begin\n-      --  It is not safe to raise an exception when using ZCX and the GCC\n-      --  exception handling mechanism.\n+      --  It's not safe to raise an exception when using GCC ZCX mechanism.\n+      --  Note that we still need to install a signal handler, since in some\n+      --  cases (e.g. shutdown of the Server_Task in System.Interrupts) we\n+      --  need to send the Abort signal to a task.\n \n       if ZCX_By_Default and then GCC_ZCX_Support then\n          return;\n@@ -990,9 +995,11 @@ package body System.Task_Primitives.Operations is\n    procedure Abort_Task (T : Task_Id) is\n       Result : Interfaces.C.int;\n    begin\n-      Result := pthread_kill (T.Common.LL.Thread,\n-        Signal (System.Interrupt_Management.Abort_Task_Interrupt));\n-      pragma Assert (Result = 0);\n+      if Abort_Handler_Installed then\n+         Result := pthread_kill (T.Common.LL.Thread,\n+           Signal (System.Interrupt_Management.Abort_Task_Interrupt));\n+         pragma Assert (Result = 0);\n+      end if;\n    end Abort_Task;\n \n    ----------------\n@@ -1349,8 +1356,6 @@ package body System.Task_Primitives.Operations is\n \n       Enter_Task (Environment_Task);\n \n-      --  Install the abort-signal handler\n-\n       if State\n           (System.Interrupt_Management.Abort_Task_Interrupt) /= Default\n       then\n@@ -1367,6 +1372,7 @@ package body System.Task_Primitives.Operations is\n               act'Unchecked_Access,\n               old_act'Unchecked_Access);\n          pragma Assert (Result = 0);\n+         Abort_Handler_Installed := True;\n       end if;\n    end Initialize;\n "}, {"sha": "f56614ca7bd5861c48e581937736d301b649b3b7", "filename": "gcc/ada/s-tassta.adb", "status": "modified", "additions": 30, "deletions": 9, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/658cea5b3e38f28dcdfe3322998089e2c19bad07/gcc%2Fada%2Fs-tassta.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/658cea5b3e38f28dcdfe3322998089e2c19bad07/gcc%2Fada%2Fs-tassta.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tassta.adb?ref=658cea5b3e38f28dcdfe3322998089e2c19bad07", "patch": "@@ -36,6 +36,7 @@ pragma Polling (Off);\n with Ada.Exceptions;\n with Ada.Unchecked_Deallocation;\n \n+with System.Interrupt_Management;\n with System.Tasking.Debug;\n with System.Address_Image;\n with System.Task_Primitives;\n@@ -739,6 +740,17 @@ package body System.Tasking.Stages is\n       Ignore  : Boolean;\n       pragma Unreferenced (Ignore);\n \n+      function State\n+        (Int : System.Interrupt_Management.Interrupt_ID) return Character;\n+      pragma Import (C, State, \"__gnat_get_interrupt_state\");\n+      --  Get interrupt state.  Defined in a-init.c\n+      --  The input argument is the interrupt number,\n+      --  and the result is one of the following:\n+\n+      Default : constant Character := 's';\n+      --    's'   Interrupt_State pragma set state to System (use \"default\"\n+      --           system handler)\n+\n    begin\n       if Self_ID.Deferral_Level = 0 then\n          --  ???\n@@ -781,17 +793,26 @@ package body System.Tasking.Stages is\n \n       Write_Lock (Self_ID);\n \n-      loop\n-         exit when Utilities.Independent_Task_Count = 0;\n+      --  If the Abort_Task signal is set to system, it means that we may not\n+      --  have been able to abort all independent tasks (in particular\n+      --  Server_Task may be blocked, waiting for a signal), in which case,\n+      --  do not wait for Independent_Task_Count to go down to 0.\n \n-         --  We used to yield here, but this did not take into account low\n-         --  priority tasks that would cause dead lock in some cases (true\n-         --  FIFO scheduling).\n+      if State\n+          (System.Interrupt_Management.Abort_Task_Interrupt) /= Default\n+      then\n+         loop\n+            exit when Utilities.Independent_Task_Count = 0;\n \n-         Timed_Sleep\n-           (Self_ID, 0.01, System.OS_Primitives.Relative,\n-            Self_ID.Common.State, Ignore, Ignore);\n-      end loop;\n+            --  We used to yield here, but this did not take into account low\n+            --  priority tasks that would cause dead lock in some cases (true\n+            --  FIFO scheduling).\n+\n+            Timed_Sleep\n+              (Self_ID, 0.01, System.OS_Primitives.Relative,\n+               Self_ID.Common.State, Ignore, Ignore);\n+         end loop;\n+      end if;\n \n       --  ??? On multi-processor environments, it seems that the above loop\n       --  isn't sufficient, so we need to add an additional delay."}]}