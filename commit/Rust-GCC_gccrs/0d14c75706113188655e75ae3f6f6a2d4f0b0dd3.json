{"sha": "0d14c75706113188655e75ae3f6f6a2d4f0b0dd3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQxNGM3NTcwNjExMzE4ODY1NWU3NWFlM2Y2ZjZhMmQ0ZjBiMGRkMw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2011-03-07T02:26:27Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2011-03-07T02:26:27Z"}, "message": "* README.QMTEST: Remove.\n\nFrom-SVN: r170728", "tree": {"sha": "a0b7098efaba8b4ff53e6062547065340cb2b3d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0b7098efaba8b4ff53e6062547065340cb2b3d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d14c75706113188655e75ae3f6f6a2d4f0b0dd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d14c75706113188655e75ae3f6f6a2d4f0b0dd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d14c75706113188655e75ae3f6f6a2d4f0b0dd3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d14c75706113188655e75ae3f6f6a2d4f0b0dd3/comments", "author": null, "committer": null, "parents": [{"sha": "a9dc1bd8cf8a12b5f7d871a6a2f230ed893681a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9dc1bd8cf8a12b5f7d871a6a2f230ed893681a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9dc1bd8cf8a12b5f7d871a6a2f230ed893681a7"}], "stats": {"total": 179, "additions": 4, "deletions": 175}, "files": [{"sha": "8e5f44c204b77df03b6ac48f7a4c7ac6c8439df2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d14c75706113188655e75ae3f6f6a2d4f0b0dd3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d14c75706113188655e75ae3f6f6a2d4f0b0dd3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0d14c75706113188655e75ae3f6f6a2d4f0b0dd3", "patch": "@@ -1,3 +1,7 @@\n+2011-03-06  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* README.QMTEST: Remove.\n+\n 2011-03-06  Paul Thomas  <pault@gcc.gnu.org>\n \t    Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n "}, {"sha": "f7865e310dadfff4762669a02d4c1eb7e16b8508", "filename": "gcc/testsuite/README.QMTEST", "status": "removed", "additions": 0, "deletions": 175, "changes": 175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9dc1bd8cf8a12b5f7d871a6a2f230ed893681a7/gcc%2Ftestsuite%2FREADME.QMTEST", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9dc1bd8cf8a12b5f7d871a6a2f230ed893681a7/gcc%2Ftestsuite%2FREADME.QMTEST", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FREADME.QMTEST?ref=a9dc1bd8cf8a12b5f7d871a6a2f230ed893681a7", "patch": "@@ -1,175 +0,0 @@\n-Testing with QMTest\n-===================\n-\n-You can use QMTest to test G++.  (In the future, it may be possible to\n-test other parts of GCC with QMTest as well, but it is not possible\n-yet.)\n-\n-The use of QMTest to run the G++ tests has not been approved as an\n-officially supported testing procedure.  Therefore, you must run the\n-tests using DejaGNU (with \"make check-g++\") before committing changes\n-that affect G++.\n-\n-QMTest emulates DejaGNU behavior very closely when running the tests.\n-\n-QMTest has two output modes: a DejaGNU emulation mode and a native\n-QMTest mode.\n-\n-In the DejaGNU mode, you should receive output that is almost exactly\n-the same as the DejaGNU output; in particular, you should see the same\n-number of passes, failures, etc.  When using the DejaGNU-style output,\n-QMTest uses the \"xfail\" indications in the test cases to determine\n-which tests are expected to pass and which are expected to fail, and\n-presents that information in the same way as DejaGNU.\n-\n-In the QMTest mode, the number of passes and failures will be\n-different from that obtained when using DejaGNU.  The reason is that a\n-single source file may contain multiple DejaGNU tests.  In DejaGNU,\n-each line where a diagnostic is expected is considered a separate\n-test.  Testing for successful compilation and testing for successful\n-execution of the generated program are considered separate tests.  So,\n-a single source file \"test.C\" could contain, say, seven tests; some of\n-which might pass and some of which might fail.\n-\n-In the QMTest mode, each source file is considered a single test.  If\n-any of the seven sub-tests fail, the entire test is considered to\n-fail.  However, QMTest does present information about *why* the test\n-failed, so the same information is effectively available.\n-\n-In the QMTest mode, whether or not a test is expected to fail is\n-determined not by an indication in the test, but rather by comparing\n-the new results to the results of a previous run.  Testing for whether\n-a change caused a regression is very simple: run the tests before\n-making the change, run them again after making the change, and let\n-QMTest compare the results.\n-\n-The mode chosen only affects the output from QMTest, not how it runs\n-the tests or how it stores the data.  Therefore, if you choose to run\n-in the QMTest mode and later want to get the DejaGNU style output, or\n-vice versa, you can do that as described below.\n-\n-Setting Up\n-==========\n-\n-You must download and install the following software:\n-\n-- Python 2.2 (or greater)\n-\n-  See http://www.python.org.\n-\n-  You may already have Python on your system; in particular, many\n-  GNU/Linux systems ship with Python installed.\n-\n-  Installation instructions are available on the web-site.\n-\n-- A current version of QMTest.  No released version provides all of\n-  the functionality required, so you must obtain QMTest from CVS.\n-\n-  To do that, follow the instructions at:\n-\n-    http://www.codesourcery.com/qmtest\n-\n-  Installation instructions are available in the file called README\n-  after you check out QMTest.\n-\n-- The \"qmtc\" and \"qmtest_gcc\" QMTest support packages.  These are\n-  available from the same CVS repository as QMTest.  For example, to\n-  check out \"qmtc\", do:\n-\n-    cvs -d :pserver:anoncvs@cvs.codesourcery.com:/home/qm/Repository \\\n-      co qmtc\n-\n-  You do not have to install these packages; you need only check them\n-  out.\n-    \n-Running the Tests\n-=================\n-\n-First, you must set QMTEST_CLASS_PATH so that it can find the qmtc and\n-qmtest_gcc support packages:\n- \n-  export QMTEST_CLASS_PATH=/path/to/qmtc:/path/to/qmtest_gcc\n-\n-The, run \"make qmtest-g++\" in the gcc directory of your build tree.\n-\n-Here are some more advanced usage instructions:\n-\n-1. To run a particular set of tests (rather than all of the tests),\n-   use the make variable \"QMTEST_GPP_TESTS\".  For example, \n-\n-     make QMTEST_GPP_TESTS=\"g++.dg\" qmtest-g++\n-\n-   will run only the tests in the g++.dg subdirectory, and:\n-\n-     make QMTEST_GPP_TESTS=\"g++.dg/special/conpr-1.C \\\n-                            g++.old-deja/g++.other/access2.C\"\n-          qmtest-g++\n-\n-   will run only the two tests indicated.\n-     \n-2. To run qmtest with particular flags, use the make variables\n-   \"QMTESTFLAGS\" and \"QMTESTRUNFLAGS\".  For example:\n-\n-      make QMTESTFLAGS=\"-v\" QMTESTRUNFLAGS=\"-f full\" qmtest-g++\n-\n-   will run qmtest like this:\n-\n-      qmtest -v run -f full ... \n-\n-   (The \"-f full\" mode will provide detailed information about each\n-   test as it runs.)\n-\n-3. To run the compiler with particular flags, use QMTESTRUNFLAGS to\n-   set the QMTest context variable \"CompilerTable.cplusplus_options\",\n-   like this:\n-\n-      make \\\n-        QMTESTRUNFLAGS='-c CompilerTable.cplusplus_options=\"-funroll-loops\"' \\\n-        qmtest-g++\n-\n-   The compiler will then use the \"-funroll-loops\" switch when\n-   compiling.\n-\n-4. If qmtest is not in your path, you can indicate the full path to\n-   QMTest by using the make variable \"QMTEST_PATH\", like this:\n-\n-      make QMTEST_PATH=/path/to/qmtest qmtest-g++\n-\n-5. To start the QMTest GUI, use:\n-\n-      make qmtest-gui\n-\n-   (Note that this will run the program called \"mozilla\" in your path.\n-   If you want to use another browser, you must configure qmtest as\n-   described in its manual.)\n-\n-   Bear in mind that the QMTest GUI is insecure; malicious users with\n-   access to your machine may be able to run commands as if they were\n-   you.  The QMTest GUI only binds to the loopback IP addresss, which\n-   provides a measure of security, but not enough for use in untrusted\n-   environments.\n-\n-6. If you have a multiprocessor, you can run the tests in parallel by\n-   passing the \"-j\" option to qmtest:\n-\n-      make QMTESTRUNFLAGS=\"-j 4\" qmtest-g++\n-\n-   will run tests in four threads.  (It is also possible to run tests\n-   across multiple machines; for more information see the QMTest\n-   manual.)\n-\n-7. If a test (say \"g++.dg/abi/bitfield1.C\") fails, and you want to get\n-   more detailed information, you can do:\n-\n-      cd qmtestsuite\n-      qmtest summarize g++.qmr g++.dg/abi/bitfield1.C\n-\n-   to get more information about the commands that were run and the\n-   output produced.\n-\n-\f\n-Copyright (C) 2002, 2003, 2004 Free Software Foundation, Inc.\n-\n-Copying and distribution of this file, with or without modification,\n-are permitted in any medium without royalty provided the copyright\n-notice and this notice are preserved."}]}