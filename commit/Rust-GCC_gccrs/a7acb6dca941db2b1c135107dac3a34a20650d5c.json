{"sha": "a7acb6dca941db2b1c135107dac3a34a20650d5c", "node_id": "C_kwDOANBUbNoAKGE3YWNiNmRjYTk0MWRiMmIxYzEzNTEwN2RhYzNhMzRhMjA2NTBkNWM", "commit": {"author": {"name": "Vladimir N. Makarov", "email": "vmakarov@redhat.com", "date": "2021-12-13T18:48:12Z"}, "committer": {"name": "Vladimir N. Makarov", "email": "vmakarov@redhat.com", "date": "2021-12-13T19:10:03Z"}, "message": "[PR99531] Modify pseudo class cost calculation when processing move involving the pseudo and a hard register\n\nPseudo class calculated on the 1st iteration should not have a\nspecial treatment in cost calculation when processing move involving\nthe pseudo and a hard register.\n\ngcc/ChangeLog:\n\n\tPR target/99531\n\t* ira-costs.c (record_operand_costs): Do not take pseudo class\n\tcalculated on the 1st iteration into account when processing move\n\tinvolving the pseudo and a hard register.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/99531\n\t* gcc.target/i386/pr99531.c: New test.", "tree": {"sha": "9d0f12a1eec09e10ada87c8ff5a72714f80d0ecb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d0f12a1eec09e10ada87c8ff5a72714f80d0ecb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7acb6dca941db2b1c135107dac3a34a20650d5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7acb6dca941db2b1c135107dac3a34a20650d5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7acb6dca941db2b1c135107dac3a34a20650d5c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7acb6dca941db2b1c135107dac3a34a20650d5c/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "149739c39475f3691e67aa0aee4f205f4e83392f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/149739c39475f3691e67aa0aee4f205f4e83392f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/149739c39475f3691e67aa0aee4f205f4e83392f"}], "stats": {"total": 29, "additions": 8, "deletions": 21}, "files": [{"sha": "d7191dcee3e2b4910c047d5ac39d311057194c8b", "filename": "gcc/ira-costs.c", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7acb6dca941db2b1c135107dac3a34a20650d5c/gcc%2Fira-costs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7acb6dca941db2b1c135107dac3a34a20650d5c/gcc%2Fira-costs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-costs.c?ref=a7acb6dca941db2b1c135107dac3a34a20650d5c", "patch": "@@ -1310,7 +1310,7 @@ record_operand_costs (rtx_insn *insn, enum reg_class *pref)\n \t  machine_mode mode = GET_MODE (SET_SRC (set));\n \t  cost_classes_t cost_classes_ptr = regno_cost_classes[regno];\n \t  enum reg_class *cost_classes = cost_classes_ptr->classes;\n-\t  reg_class_t rclass, hard_reg_class, pref_class, bigger_hard_reg_class;\n+\t  reg_class_t rclass, hard_reg_class, bigger_hard_reg_class;\n \t  int cost, k;\n \t  move_table *move_costs;\n \t  bool dead_p = find_regno_note (insn, REG_DEAD, REGNO (src));\n@@ -1336,23 +1336,6 @@ record_operand_costs (rtx_insn *insn, enum reg_class *pref)\n \t\t      : move_costs[rclass][hard_reg_class]);\n \t      \n \t      op_costs[i]->cost[k] = cost * frequency;\n-\t      /* If we have assigned a class to this allocno in our\n-\t\t first pass, add a cost to this alternative\n-\t\t corresponding to what we would add if this allocno\n-\t\t were not in the appropriate class.  */\n-\t      if (pref)\n-\t\t{\n-\t\t  if ((pref_class = pref[COST_INDEX (regno)]) == NO_REGS)\n-\t\t    op_costs[i]->cost[k]\n-\t\t      += ((i == 0 ? ira_memory_move_cost[mode][rclass][0] : 0)\n-\t\t\t  + (i == 1 ? ira_memory_move_cost[mode][rclass][1] : 0)\n-\t\t\t  * frequency);\n-\t\t  else if (ira_reg_class_intersect[pref_class][rclass]\n-\t\t\t   == NO_REGS)\n-\t\t    op_costs[i]->cost[k]\n-\t\t      += (move_costs[pref_class][rclass]\n-\t\t\t  * frequency);\n-\t\t}\n \t      /* If this insn is a single set copying operand 1 to\n \t\t operand 0 and one operand is an allocno with the\n \t\t other a hard reg or an allocno that prefers a hard\n@@ -1378,9 +1361,6 @@ record_operand_costs (rtx_insn *insn, enum reg_class *pref)\n \t    }\n \t  op_costs[i]->mem_cost\n \t    = ira_memory_move_cost[mode][hard_reg_class][i] * frequency;\n-\t  if (pref && (pref_class = pref[COST_INDEX (regno)]) != NO_REGS)\n-\t    op_costs[i]->mem_cost\n-\t      += ira_memory_move_cost[mode][pref_class][i] * frequency;\n \t  return;\n \t}\n     }"}, {"sha": "0e1a08b7c77d972932e178dcadebaf5bdd65aa50", "filename": "gcc/testsuite/gcc.target/i386/pr99531.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7acb6dca941db2b1c135107dac3a34a20650d5c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99531.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7acb6dca941db2b1c135107dac3a34a20650d5c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99531.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99531.c?ref=a7acb6dca941db2b1c135107dac3a34a20650d5c", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile { target { x86_64-*-linux* } } } */\n+/* { dg-options \"-O2\" } */\n+\n+int func(int, int, int, int, int, int);\n+int caller(int a, int b, int c, int d, int e) { return func(0, a, b, c, d, e); }\n+\n+/* { dg-final { scan-assembler-not \"push\" } } */"}]}