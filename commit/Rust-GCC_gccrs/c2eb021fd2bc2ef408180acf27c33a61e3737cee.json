{"sha": "c2eb021fd2bc2ef408180acf27c33a61e3737cee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzJlYjAyMWZkMmJjMmVmNDA4MTgwYWNmMjdjMzNhNjFlMzczN2NlZQ==", "commit": {"author": {"name": "Julian Brown", "email": "julian@codesourcery.com", "date": "2019-12-20T01:39:42Z"}, "committer": {"name": "Julian Brown", "email": "jules@gcc.gnu.org", "date": "2019-12-20T01:39:42Z"}, "message": "OpenACC 2.6 deep copy: C and C++ execution tests\n\n\tlibgomp/\n\t* testsuite/libgomp.oacc-c-c++-common/deep-copy-1.c: New test.\n\t* testsuite/libgomp.oacc-c-c++-common/deep-copy-2.c: New test.\n\t* testsuite/libgomp.oacc-c-c++-common/deep-copy-4.c: New test.\n\t* testsuite/libgomp.oacc-c-c++-common/deep-copy-6.c: New test.\n\t* testsuite/libgomp.oacc-c-c++-common/deep-copy-7.c: New test.\n\t* testsuite/libgomp.oacc-c-c++-common/deep-copy-8.c: New test.\n\t* testsuite/libgomp.oacc-c-c++-common/deep-copy-9.c: New test.\n\t* testsuite/libgomp.oacc-c-c++-common/deep-copy-10.c: New test.\n\t* testsuite/libgomp.oacc-c-c++-common/deep-copy-11.c: New test.\n\t* testsuite/libgomp.oacc-c-c++-common/deep-copy-14.c: New test.\n\t* testsuite/libgomp.oacc-c++/deep-copy-12.C: New test.\n\t* testsuite/libgomp.oacc-c++/deep-copy-13.C: New test.\n\nFrom-SVN: r279629", "tree": {"sha": "63d73281732b60a1ff3d1b120d64091192042f4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63d73281732b60a1ff3d1b120d64091192042f4e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2eb021fd2bc2ef408180acf27c33a61e3737cee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2eb021fd2bc2ef408180acf27c33a61e3737cee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2eb021fd2bc2ef408180acf27c33a61e3737cee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2eb021fd2bc2ef408180acf27c33a61e3737cee/comments", "author": {"login": "jtb20", "id": 6094880, "node_id": "MDQ6VXNlcjYwOTQ4ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6094880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtb20", "html_url": "https://github.com/jtb20", "followers_url": "https://api.github.com/users/jtb20/followers", "following_url": "https://api.github.com/users/jtb20/following{/other_user}", "gists_url": "https://api.github.com/users/jtb20/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtb20/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtb20/subscriptions", "organizations_url": "https://api.github.com/users/jtb20/orgs", "repos_url": "https://api.github.com/users/jtb20/repos", "events_url": "https://api.github.com/users/jtb20/events{/privacy}", "received_events_url": "https://api.github.com/users/jtb20/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "549188ea10757060b5de532d232813f09d64d9d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/549188ea10757060b5de532d232813f09d64d9d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/549188ea10757060b5de532d232813f09d64d9d1"}], "stats": {"total": 698, "additions": 698, "deletions": 0}, "files": [{"sha": "550a59d738ddec37a81c5be035cd4c5cee547b0d", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2eb021fd2bc2ef408180acf27c33a61e3737cee/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2eb021fd2bc2ef408180acf27c33a61e3737cee/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=c2eb021fd2bc2ef408180acf27c33a61e3737cee", "patch": "@@ -1,3 +1,18 @@\n+2019-12-19  Julian Brown  <julian@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-c-c++-common/deep-copy-1.c: New test.\n+\t* testsuite/libgomp.oacc-c-c++-common/deep-copy-2.c: New test.\n+\t* testsuite/libgomp.oacc-c-c++-common/deep-copy-4.c: New test.\n+\t* testsuite/libgomp.oacc-c-c++-common/deep-copy-6.c: New test.\n+\t* testsuite/libgomp.oacc-c-c++-common/deep-copy-7.c: New test.\n+\t* testsuite/libgomp.oacc-c-c++-common/deep-copy-8.c: New test.\n+\t* testsuite/libgomp.oacc-c-c++-common/deep-copy-9.c: New test.\n+\t* testsuite/libgomp.oacc-c-c++-common/deep-copy-10.c: New test.\n+\t* testsuite/libgomp.oacc-c-c++-common/deep-copy-11.c: New test.\n+\t* testsuite/libgomp.oacc-c-c++-common/deep-copy-14.c: New test.\n+\t* testsuite/libgomp.oacc-c++/deep-copy-12.C: New test.\n+\t* testsuite/libgomp.oacc-c++/deep-copy-13.C: New test.\n+\n 2019-12-19  Julian Brown  <julian@codesourcery.com>\n \n \t* libgomp.h (struct target_var_desc): Add do_detach flag."}, {"sha": "a512008685d20f9f17534cf074124214b3437ba1", "filename": "libgomp/testsuite/libgomp.oacc-c++/deep-copy-12.C", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2eb021fd2bc2ef408180acf27c33a61e3737cee/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2B%2B%2Fdeep-copy-12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2eb021fd2bc2ef408180acf27c33a61e3737cee/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2B%2B%2Fdeep-copy-12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2B%2B%2Fdeep-copy-12.C?ref=c2eb021fd2bc2ef408180acf27c33a61e3737cee", "patch": "@@ -0,0 +1,72 @@\n+#include <stdlib.h>\n+\n+/* Test attach/detach with dereferences of reference to pointer to struct.  */\n+\n+typedef struct {\n+  int *a;\n+  int *b;\n+  int *c;\n+} mystruct;\n+\n+int main(int argc, char* argv[])\n+{\n+  const int N = 1024;\n+  mystruct *m = (mystruct *) malloc (sizeof (*m));\n+  mystruct *&mref = m;\n+  int i;\n+\n+  mref->a = (int *) malloc (N * sizeof (int));\n+  m->b = (int *) malloc (N * sizeof (int));\n+  m->c = (int *) malloc (N * sizeof (int));\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      mref->a[i] = 0;\n+      m->b[i] = 0;\n+      m->c[i] = 0;\n+    }\n+\n+#pragma acc enter data copyin(m[0:1])\n+\n+  for (int i = 0; i < 99; i++)\n+    {\n+      int j;\n+#pragma acc parallel loop copy(mref->a[0:N])\n+      for (j = 0; j < N; j++)\n+\tmref->a[j]++;\n+#pragma acc parallel loop copy(mref->b[0:N], m->c[5:N-10])\n+      for (j = 0; j < N; j++)\n+\t{\n+\t  mref->b[j]++;\n+\t  if (j > 5 && j < N - 5)\n+\t    m->c[j]++;\n+\t}\n+    }\n+\n+#pragma acc exit data copyout(m[0:1])\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      if (m->a[i] != 99)\n+\tabort ();\n+      if (m->b[i] != 99)\n+\tabort ();\n+      if (i > 5 && i < N-5)\n+\t{\n+\t  if (m->c[i] != 99)\n+\t    abort ();\n+\t}\n+      else\n+\t{\n+\t  if (m->c[i] != 0)\n+\t    abort ();\n+\t}\n+    }\n+\n+  free (m->a);\n+  free (m->b);\n+  free (m->c);\n+  free (m);\n+\n+  return 0;\n+}"}, {"sha": "a51945686033fe9c483e315d491e74f979b24dce", "filename": "libgomp/testsuite/libgomp.oacc-c++/deep-copy-13.C", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2eb021fd2bc2ef408180acf27c33a61e3737cee/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2B%2B%2Fdeep-copy-13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2eb021fd2bc2ef408180acf27c33a61e3737cee/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2B%2B%2Fdeep-copy-13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2B%2B%2Fdeep-copy-13.C?ref=c2eb021fd2bc2ef408180acf27c33a61e3737cee", "patch": "@@ -0,0 +1,72 @@\n+#include <stdlib.h>\n+\n+/* Test array slice with reference to pointer.  */\n+\n+typedef struct {\n+  int *a;\n+  int *b;\n+  int *c;\n+} mystruct;\n+\n+int main(int argc, char* argv[])\n+{\n+  const int N = 1024;\n+  mystruct *m = (mystruct *) malloc (sizeof (*m));\n+  int i;\n+\n+  m->a = (int *) malloc (N * sizeof (int));\n+  m->b = (int *) malloc (N * sizeof (int));\n+  m->c = (int *) malloc (N * sizeof (int));\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      m->a[i] = 0;\n+      m->b[i] = 0;\n+      m->c[i] = 0;\n+    }\n+\n+#pragma acc enter data copyin(m[0:1])\n+\n+  for (int i = 0; i < 99; i++)\n+    {\n+      int j;\n+      int *&ptr = m->a;\n+#pragma acc parallel loop copy(ptr[0:N])\n+      for (j = 0; j < N; j++)\n+\tptr[j]++;\n+#pragma acc parallel loop copy(m->b[0:N], m->c[5:N-10])\n+      for (j = 0; j < N; j++)\n+\t{\n+\t  m->b[j]++;\n+\t  if (j > 5 && j < N - 5)\n+\t    m->c[j]++;\n+\t}\n+    }\n+\n+#pragma acc exit data copyout(m[0:1])\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      if (m->a[i] != 99)\n+\tabort ();\n+      if (m->b[i] != 99)\n+\tabort ();\n+      if (i > 5 && i < N-5)\n+\t{\n+\t  if (m->c[i] != 99)\n+\t    abort ();\n+\t}\n+      else\n+\t{\n+\t  if (m->c[i] != 0)\n+\t    abort ();\n+\t}\n+    }\n+\n+  free (m->a);\n+  free (m->b);\n+  free (m->c);\n+  free (m);\n+\n+  return 0;\n+}"}, {"sha": "d8d7067e452a30eb9e98d57bbc894b3695897665", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/deep-copy-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2eb021fd2bc2ef408180acf27c33a61e3737cee/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdeep-copy-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2eb021fd2bc2ef408180acf27c33a61e3737cee/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdeep-copy-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdeep-copy-1.c?ref=c2eb021fd2bc2ef408180acf27c33a61e3737cee", "patch": "@@ -0,0 +1,24 @@\n+#include <stdlib.h>\n+#include <assert.h>\n+\n+struct dc\n+{\n+  int a;\n+  int *b;\n+};\n+\n+int\n+main ()\n+{\n+  int n = 100, i;\n+  struct dc v = { .a = 3, .b = (int *) malloc (sizeof (int) * n) };\n+\n+#pragma acc parallel loop copy(v.a, v.b[:n])\n+  for (i = 0; i < n; i++)\n+    v.b[i] = v.a;\n+\n+  for (i = 0; i < 10; i++)\n+    assert (v.b[i] == v.a);\n+\n+  return 0;\n+}"}, {"sha": "573a8214bf0195d96942e4488536ef860a0c6892", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/deep-copy-10.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2eb021fd2bc2ef408180acf27c33a61e3737cee/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdeep-copy-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2eb021fd2bc2ef408180acf27c33a61e3737cee/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdeep-copy-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdeep-copy-10.c?ref=c2eb021fd2bc2ef408180acf27c33a61e3737cee", "patch": "@@ -0,0 +1,53 @@\n+#include <stdlib.h>\n+\n+/* Test asyncronous attach and detach operation.  */\n+\n+typedef struct {\n+  int *a;\n+  int *b;\n+} mystruct;\n+\n+int\n+main (int argc, char* argv[])\n+{\n+  const int N = 1024;\n+  mystruct m;\n+  int i;\n+\n+  m.a = (int *) malloc (N * sizeof (int));\n+  m.b = (int *) malloc (N * sizeof (int));\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      m.a[i] = 0;\n+      m.b[i] = 0;\n+    }\n+\n+#pragma acc enter data copyin(m)\n+\n+  for (int i = 0; i < 99; i++)\n+    {\n+      int j;\n+#pragma acc parallel loop copy(m.a[0:N]) async(i % 2)\n+      for (j = 0; j < N; j++)\n+\tm.a[j]++;\n+#pragma acc parallel loop copy(m.b[0:N]) async((i + 1) % 2)\n+      for (j = 0; j < N; j++)\n+\tm.b[j]++;\n+    }\n+\n+#pragma acc exit data copyout(m) wait(0, 1)\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      if (m.a[i] != 99)\n+\tabort ();\n+      if (m.b[i] != 99)\n+\tabort ();\n+    }\n+\n+  free (m.a);\n+  free (m.b);\n+\n+  return 0;\n+}"}, {"sha": "db6012fb352bacf2a9f9a6b4061f59074ad449ab", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/deep-copy-11.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2eb021fd2bc2ef408180acf27c33a61e3737cee/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdeep-copy-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2eb021fd2bc2ef408180acf27c33a61e3737cee/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdeep-copy-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdeep-copy-11.c?ref=c2eb021fd2bc2ef408180acf27c33a61e3737cee", "patch": "@@ -0,0 +1,72 @@\n+#include <stdlib.h>\n+\n+/* Test multiple struct dereferences on one directive, and slices starting at\n+   non-zero.  */\n+\n+typedef struct {\n+  int *a;\n+  int *b;\n+  int *c;\n+} mystruct;\n+\n+int main(int argc, char* argv[])\n+{\n+  const int N = 1024;\n+  mystruct *m = (mystruct *) malloc (sizeof (*m));\n+  int i;\n+\n+  m->a = (int *) malloc (N * sizeof (int));\n+  m->b = (int *) malloc (N * sizeof (int));\n+  m->c = (int *) malloc (N * sizeof (int));\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      m->a[i] = 0;\n+      m->b[i] = 0;\n+      m->c[i] = 0;\n+    }\n+\n+#pragma acc enter data copyin(m[0:1])\n+\n+  for (int i = 0; i < 99; i++)\n+    {\n+      int j;\n+#pragma acc parallel loop copy(m->a[0:N])\n+      for (j = 0; j < N; j++)\n+\tm->a[j]++;\n+#pragma acc parallel loop copy(m->b[0:N], m->c[5:N-10])\n+      for (j = 0; j < N; j++)\n+\t{\n+\t  m->b[j]++;\n+\t  if (j > 5 && j < N - 5)\n+\t    m->c[j]++;\n+\t}\n+    }\n+\n+#pragma acc exit data copyout(m[0:1])\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      if (m->a[i] != 99)\n+\tabort ();\n+      if (m->b[i] != 99)\n+\tabort ();\n+      if (i > 5 && i < N-5)\n+\t{\n+\t  if (m->c[i] != 99)\n+\t    abort ();\n+\t}\n+      else\n+\t{\n+\t  if (m->c[i] != 0)\n+\t    abort ();\n+\t}\n+    }\n+\n+  free (m->a);\n+  free (m->b);\n+  free (m->c);\n+  free (m);\n+\n+  return 0;\n+}"}, {"sha": "275fa9ae256b60b2138998ca9646be14a1f865f6", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/deep-copy-14.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2eb021fd2bc2ef408180acf27c33a61e3737cee/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdeep-copy-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2eb021fd2bc2ef408180acf27c33a61e3737cee/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdeep-copy-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdeep-copy-14.c?ref=c2eb021fd2bc2ef408180acf27c33a61e3737cee", "patch": "@@ -0,0 +1,63 @@\n+#include <openacc.h>\n+#include <stdlib.h>\n+\n+/* Test attach/detach operation with chained dereferences.  */\n+\n+typedef struct mystruct {\n+  int *a;\n+  struct mystruct *next;\n+} mystruct;\n+\n+int\n+main (int argc, char* argv[])\n+{\n+  const int N = 1024;\n+  mystruct *m = (mystruct *) malloc (sizeof (*m));\n+  int i;\n+\n+  m->a = (int *) malloc (N * sizeof (int));\n+  m->next = (mystruct *) malloc (sizeof (*m));\n+  m->next->a = (int *) malloc (N * sizeof (int));\n+  m->next->next = NULL;\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      m->a[i] = 0;\n+      m->next->a[i] = 0;\n+    }\n+\n+#pragma acc enter data copyin(m[0:1])\n+  acc_copyin (m->next, sizeof (*m));\n+\n+  for (int i = 0; i < 99; i++)\n+    {\n+      int j;\n+      acc_copyin (m->next->a, N * sizeof (int));\n+      acc_attach ((void **) &m->next);\n+      /* This will attach only the innermost pointer, i.e. \"a[0:N]\".  That's\n+\t why we have to attach the \"m->next\" pointer manually above.  */\n+#pragma acc parallel loop copy(m->next->a[0:N])\n+      for (j = 0; j < N; j++)\n+\tm->next->a[j]++;\n+      acc_detach ((void **) &m->next);\n+      acc_copyout (m->next->a, N * sizeof (int));\n+    }\n+\n+  acc_copyout (m->next, sizeof (*m));\n+#pragma acc exit data copyout(m[0:1])\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      if (m->a[i] != 0)\n+\tabort ();\n+      if (m->next->a[i] != 99)\n+\tabort ();\n+    }\n+\n+  free (m->next->a);\n+  free (m->next);\n+  free (m->a);\n+  free (m);\n+\n+  return 0;\n+}"}, {"sha": "7e26e9aa8b940d7a8b8da0cccedc6b06de3bbc13", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/deep-copy-2.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2eb021fd2bc2ef408180acf27c33a61e3737cee/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdeep-copy-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2eb021fd2bc2ef408180acf27c33a61e3737cee/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdeep-copy-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdeep-copy-2.c?ref=c2eb021fd2bc2ef408180acf27c33a61e3737cee", "patch": "@@ -0,0 +1,29 @@\n+#include <assert.h>\n+#include <stdlib.h>\n+\n+int\n+main(int argc, char* argv[])\n+{\n+  struct foo {\n+    int *a, *b, c, d, *e;\n+  } s;\n+\n+  s.a = (int *) malloc (16 * sizeof (int));\n+  s.b = (int *) malloc (16 * sizeof (int));\n+  s.e = (int *) malloc (16 * sizeof (int));\n+\n+  #pragma acc data copy(s)\n+  {\n+    #pragma acc data copy(s.a[0:10])\n+    {\n+      #pragma acc parallel loop attach(s.a)\n+      for (int i = 0; i < 10; i++)\n+\ts.a[i] = i;\n+    }\n+  }\n+\n+  for (int i = 0; i < 10; i++)\n+    assert (s.a[i] == i);\n+\n+  return 0;\n+}"}, {"sha": "8874ca0a50459cc1920c7bab51d110bf51765ba3", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/deep-copy-4.c", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2eb021fd2bc2ef408180acf27c33a61e3737cee/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdeep-copy-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2eb021fd2bc2ef408180acf27c33a61e3737cee/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdeep-copy-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdeep-copy-4.c?ref=c2eb021fd2bc2ef408180acf27c33a61e3737cee", "patch": "@@ -0,0 +1,87 @@\n+#include <assert.h>\n+#include <stdlib.h>\n+\n+#define LIST_LENGTH 10\n+\n+struct node\n+{\n+  struct node *next;\n+  int val;\n+};\n+\n+int\n+sum_nodes (struct node *head)\n+{\n+  int i = 0, sum = 0;\n+\n+#pragma acc parallel reduction(+:sum) present(head[:1])\n+  {\n+    for (; head != NULL; head = head->next)\n+      sum += head->val;\n+  }\n+\n+  return sum;\n+}\n+\n+void\n+insert (struct node *head, int val)\n+{\n+  struct node *n = (struct node *) malloc (sizeof (struct node));\n+\n+  if (head->next)\n+    {\n+#pragma acc exit data detach(head->next)\n+    }\n+\n+  n->val = val;\n+  n->next = head->next;\n+  head->next = n;\n+\n+#pragma acc enter data copyin(n[:1])\n+#pragma acc enter data attach(head->next)\n+  if (n->next)\n+    {\n+#pragma acc enter data attach(n->next)\n+    }\n+}\n+\n+void\n+destroy (struct node *head)\n+{\n+  while (head->next != NULL)\n+    {\n+#pragma acc exit data detach(head->next)\n+      struct node * n = head->next;\n+      head->next = n->next;\n+      if (n->next)\n+\t{\n+#pragma acc exit data detach(n->next)\n+\t}\n+#pragma acc exit data delete (n[:1])\n+      if (head->next)\n+\t{\n+#pragma acc enter data attach(head->next)\n+\t}\n+      free (n);\n+    }\n+}\n+\n+int\n+main ()\n+{\n+  struct node list = { .next = NULL, .val = 0 };\n+  int i;\n+\n+#pragma acc enter data copyin(list)\n+\n+  for (i = 0; i < LIST_LENGTH; i++)\n+    insert (&list, i + 1);\n+\n+  assert (sum_nodes (&list) == (LIST_LENGTH * LIST_LENGTH + LIST_LENGTH) / 2);\n+\n+  destroy (&list);\n+\n+#pragma acc exit data delete(list)\n+\n+  return 0;\n+}"}, {"sha": "391149459c90c05d8c4a52cd8b208770987b9779", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/deep-copy-6.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2eb021fd2bc2ef408180acf27c33a61e3737cee/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdeep-copy-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2eb021fd2bc2ef408180acf27c33a61e3737cee/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdeep-copy-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdeep-copy-6.c?ref=c2eb021fd2bc2ef408180acf27c33a61e3737cee", "patch": "@@ -0,0 +1,59 @@\n+/* { dg-do run { target { ! openacc_host_selected } } } */\n+\n+#include <stdlib.h>\n+#include <assert.h>\n+#include <openacc.h>\n+\n+struct dc\n+{\n+  int a;\n+  int **b;\n+};\n+\n+int\n+main ()\n+{\n+  int n = 100, i, j, k;\n+  struct dc v = { .a = 3 };\n+\n+  v.b = (int **) malloc (sizeof (int *) * n);\n+  for (i = 0; i < n; i++)\n+    v.b[i] = (int *) malloc (sizeof (int) * n);\n+\n+  for (k = 0; k < 16; k++)\n+    {\n+#pragma acc data copy(v)\n+      {\n+#pragma acc data copy(v.b[:n])\n+\t{\n+\t  for (i = 0; i < n; i++)\n+\t    {\n+\t      acc_copyin (v.b[i], sizeof (int) * n);\n+\t      acc_attach ((void **) &v.b[i]);\n+\t    }\n+\n+#pragma acc parallel loop\n+\t  for (i = 0; i < n; i++)\n+\t    for (j = 0; j < n; j++)\n+\t      v.b[i][j] = v.a + i + j;\n+\n+\t  for (i = 0; i < n; i++)\n+\t    {\n+\t      acc_detach ((void **) &v.b[i]);\n+\t      acc_copyout (v.b[i], sizeof (int) * n);\n+\t    }\n+\t}\n+      }\n+\n+      for (i = 0; i < n; i++)\n+\tfor (j = 0; j < n; j++)\n+\t  assert (v.b[i][j] == v.a + i + j);\n+\n+      assert (!acc_is_present (&v, sizeof (v)));\n+      assert (!acc_is_present (v.b, sizeof (int *) * n));\n+      for (i = 0; i < n; i++)\n+\tassert (!acc_is_present (v.b[i], sizeof (int) * n));\n+    }\n+\n+  return 0;\n+}"}, {"sha": "a59047af520d0fa35fdddbcc289e3dfe214dbcbb", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/deep-copy-7.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2eb021fd2bc2ef408180acf27c33a61e3737cee/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdeep-copy-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2eb021fd2bc2ef408180acf27c33a61e3737cee/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdeep-copy-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdeep-copy-7.c?ref=c2eb021fd2bc2ef408180acf27c33a61e3737cee", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do run { target { ! openacc_host_selected } } } */\n+\n+#include <stdlib.h>\n+#include <assert.h>\n+#include <openacc.h>\n+\n+struct dc\n+{\n+  int a;\n+  int *b;\n+};\n+\n+int\n+main ()\n+{\n+  int n = 100, i, j, k;\n+  struct dc v = { .a = 3 };\n+\n+  v.b = (int *) malloc (sizeof (int) * n);\n+\n+  for (k = 0; k < 16; k++)\n+    {\n+      /* Here, we do not explicitly copy the enclosing structure, but work\n+\t with fields directly.  Make sure attachment counters and reference\n+\t counters work properly in that case.  */\n+#pragma acc enter data copyin(v.a, v.b[0:n])\n+#pragma acc enter data pcopyin(v.b[0:n])\n+#pragma acc enter data pcopyin(v.b[0:n])\n+\n+#pragma acc parallel loop present(v.a, v.b)\n+      for (i = 0; i < n; i++)\n+\tv.b[i] = v.a + i;\n+\n+#pragma acc exit data copyout(v.b[:n]) finalize\n+#pragma acc exit data delete(v.a)\n+\n+      for (i = 0; i < n; i++)\n+\tassert (v.b[i] == v.a + i);\n+\n+      assert (!acc_is_present (&v, sizeof (v)));\n+      assert (!acc_is_present (v.b, sizeof (int *) * n));\n+    }\n+\n+  return 0;\n+}"}, {"sha": "0ca5990b377b61c0a083b994eacf61b47d436859", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/deep-copy-8.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2eb021fd2bc2ef408180acf27c33a61e3737cee/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdeep-copy-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2eb021fd2bc2ef408180acf27c33a61e3737cee/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdeep-copy-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdeep-copy-8.c?ref=c2eb021fd2bc2ef408180acf27c33a61e3737cee", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run { target { ! openacc_host_selected } } } */\n+\n+#include <stdlib.h>\n+#include <assert.h>\n+#include <openacc.h>\n+\n+struct dc\n+{\n+  int a;\n+  int *b;\n+  int *c;\n+  int *d;\n+};\n+\n+int\n+main ()\n+{\n+  int n = 100, i, j, k;\n+  struct dc v = { .a = 3 };\n+\n+  v.b = (int *) malloc (sizeof (int) * n);\n+  v.c = (int *) malloc (sizeof (int) * n);\n+  v.d = (int *) malloc (sizeof (int) * n);\n+\n+#pragma acc enter data copyin(v)\n+\n+  for (k = 0; k < 16; k++)\n+    {\n+#pragma acc enter data copyin(v.a, v.b[:n], v.c[:n], v.d[:n])\n+\n+#pragma acc parallel loop\n+      for (i = 0; i < n; i++)\n+\tv.b[i] = v.a + i;\n+\n+#pragma acc exit data copyout(v.b[:n])\n+#pragma acc exit data copyout(v.c[:n])\n+#pragma acc exit data copyout(v.d[:n])\n+#pragma acc exit data copyout(v.a)\n+\n+      for (i = 0; i < n; i++)\n+\tassert (v.b[i] == v.a + i);\n+\n+      assert (acc_is_present (&v, sizeof (v)));\n+      assert (!acc_is_present (v.b, sizeof (int *) * n));\n+      assert (!acc_is_present (v.c, sizeof (int *) * n));\n+      assert (!acc_is_present (v.d, sizeof (int *) * n));\n+    }\n+\n+#pragma acc exit data copyout(v)\n+\n+  assert (!acc_is_present (&v, sizeof (v)));\n+\n+  return 0;\n+}"}, {"sha": "e86a46bd84a7ee15da6ebe805c24a31397ef00e9", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/deep-copy-9.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2eb021fd2bc2ef408180acf27c33a61e3737cee/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdeep-copy-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2eb021fd2bc2ef408180acf27c33a61e3737cee/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdeep-copy-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdeep-copy-9.c?ref=c2eb021fd2bc2ef408180acf27c33a61e3737cee", "patch": "@@ -0,0 +1,53 @@\n+#include <stdlib.h>\n+\n+typedef struct {\n+  int *a;\n+  int *b;\n+} mystruct;\n+\n+int\n+main (int argc, char* argv[])\n+{\n+  const int N = 1024;\n+  mystruct *m = (mystruct *) malloc (sizeof (*m));\n+  int i;\n+\n+  m->a = (int *) malloc (N * sizeof (int));\n+  m->b = (int *) malloc (N * sizeof (int));\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      m->a[i] = 0;\n+      m->b[i] = 0;\n+    }\n+\n+#pragma acc enter data copyin(m[0:1])\n+\n+  for (int i = 0; i < 99; i++)\n+    {\n+      int j;\n+      int *ptr = m->a;\n+#pragma acc parallel loop copy(m->a[0:N])\n+      for (j = 0; j < N; j++)\n+\tm->a[j]++;\n+#pragma acc parallel loop copy(m->b[0:N])\n+      for (j = 0; j < N; j++)\n+\tm->b[j]++;\n+    }\n+\n+#pragma acc exit data copyout(m[0:1])\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      if (m->a[i] != 99)\n+\tabort ();\n+      if (m->b[i] != 99)\n+\tabort ();\n+    }\n+\n+  free (m->a);\n+  free (m->b);\n+  free (m);\n+\n+  return 0;\n+}"}]}