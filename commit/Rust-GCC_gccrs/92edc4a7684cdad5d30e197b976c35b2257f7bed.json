{"sha": "92edc4a7684cdad5d30e197b976c35b2257f7bed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTJlZGM0YTc2ODRjZGFkNWQzMGUxOTdiOTc2YzM1YjIyNTdmN2JlZA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-06-18T10:08:19Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-06-18T10:15:28Z"}, "message": "libstdc++: Suppress -Wstringop-overread warning in test\n\nWhen compiled with -m32 -O2 -D_GLIBCXX_USE_CXX11_ABI=0 we get a warning\nfor 21_strings/basic_string/cons/char/1.cc:\n\nbits/char_traits.h:409:56: warning: \u2018void* __builtin_memcpy(void*, const void*, unsigned int)\u2019 reading 1073741821 bytes from a region of size 19 [-Wstringop-overread]\n\nThe warning is legitimate, even if that line cannot be reached because\nwe throw std::length_error before getting there. Since the invalid\nlength is deliberate (and mentioned in a comment) just suppress the\nwarning, so that the test can verify we get the exception.\n\nAlso remove an unused typedef that produces another warning.\n\nlibstdc++-v3/ChangeLog:\n\n\t* testsuite/21_strings/basic_string/cons/char/1.cc: Use\n\tdiagnostic pragma to suppress -Wstringop-overread error.\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>", "tree": {"sha": "27d39642961de09af6e4215d50fff2654f621eed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27d39642961de09af6e4215d50fff2654f621eed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92edc4a7684cdad5d30e197b976c35b2257f7bed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92edc4a7684cdad5d30e197b976c35b2257f7bed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92edc4a7684cdad5d30e197b976c35b2257f7bed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92edc4a7684cdad5d30e197b976c35b2257f7bed/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76e990fd211cbb20bf74ce074eb8b2d7b096d3b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76e990fd211cbb20bf74ce074eb8b2d7b096d3b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76e990fd211cbb20bf74ce074eb8b2d7b096d3b7"}], "stats": {"total": 4, "additions": 3, "deletions": 1}, "files": [{"sha": "099921f0941abeace7bf002f471a2f0ea0fb7122", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/cons/char/1.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92edc4a7684cdad5d30e197b976c35b2257f7bed/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92edc4a7684cdad5d30e197b976c35b2257f7bed/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F1.cc?ref=92edc4a7684cdad5d30e197b976c35b2257f7bed", "patch": "@@ -36,7 +36,6 @@ using namespace std;\n void test01(void)\n {\n   typedef string::size_type csize_type;\n-  typedef string::iterator citerator;\n   csize_type npos = string::npos;\n   csize_type csz01;\n \n@@ -68,6 +67,8 @@ void test01(void)\n \n   // basic_string(const char* s, size_type n, alloc)\n   csz01 = str01.max_size();\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wstringop-overread\"\n   // NB: As strlen(str_lit01) != csz01, this test is undefined. It\n   // should not crash, but what gets constructed is a bit arbitrary.\n   try {\n@@ -94,6 +95,7 @@ void test01(void)\n   catch(...) {\n     VERIFY( false );\n   }\n+#pragma GCC diagnostic pop\n \n   // Build a maxsize - 1 lengthed string consisting of all A's\n   try {"}]}