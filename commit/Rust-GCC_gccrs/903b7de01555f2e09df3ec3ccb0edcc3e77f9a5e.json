{"sha": "903b7de01555f2e09df3ec3ccb0edcc3e77f9a5e", "node_id": "C_kwDOANBUbNoAKDkwM2I3ZGUwMTU1NWYyZTA5ZGYzZWMzY2NiMGVkY2MzZTc3ZjlhNWU", "commit": {"author": {"name": "liushuyu", "email": "liushuyu011@gmail.com", "date": "2022-07-14T05:17:40Z"}, "committer": {"name": "liushuyu", "email": "liushuyu011@gmail.com", "date": "2022-07-19T18:44:03Z"}, "message": "rust/expand: merge expand_invoc and expand_invoc_semi functions", "tree": {"sha": "9709e78f3bebc8e903f33cf684fd1c0bd51ee745", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9709e78f3bebc8e903f33cf684fd1c0bd51ee745"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/903b7de01555f2e09df3ec3ccb0edcc3e77f9a5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/903b7de01555f2e09df3ec3ccb0edcc3e77f9a5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/903b7de01555f2e09df3ec3ccb0edcc3e77f9a5e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/903b7de01555f2e09df3ec3ccb0edcc3e77f9a5e/comments", "author": {"login": "liushuyu", "id": 6829345, "node_id": "MDQ6VXNlcjY4MjkzNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/6829345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/liushuyu", "html_url": "https://github.com/liushuyu", "followers_url": "https://api.github.com/users/liushuyu/followers", "following_url": "https://api.github.com/users/liushuyu/following{/other_user}", "gists_url": "https://api.github.com/users/liushuyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/liushuyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/liushuyu/subscriptions", "organizations_url": "https://api.github.com/users/liushuyu/orgs", "repos_url": "https://api.github.com/users/liushuyu/repos", "events_url": "https://api.github.com/users/liushuyu/events{/privacy}", "received_events_url": "https://api.github.com/users/liushuyu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "liushuyu", "id": 6829345, "node_id": "MDQ6VXNlcjY4MjkzNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/6829345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/liushuyu", "html_url": "https://github.com/liushuyu", "followers_url": "https://api.github.com/users/liushuyu/followers", "following_url": "https://api.github.com/users/liushuyu/following{/other_user}", "gists_url": "https://api.github.com/users/liushuyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/liushuyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/liushuyu/subscriptions", "organizations_url": "https://api.github.com/users/liushuyu/orgs", "repos_url": "https://api.github.com/users/liushuyu/repos", "events_url": "https://api.github.com/users/liushuyu/events{/privacy}", "received_events_url": "https://api.github.com/users/liushuyu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "137cd3bbaa05038b01c46f7ac7472da7ca662ed7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/137cd3bbaa05038b01c46f7ac7472da7ca662ed7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/137cd3bbaa05038b01c46f7ac7472da7ca662ed7"}], "stats": {"total": 63, "additions": 12, "deletions": 51}, "files": [{"sha": "6cd894d261e0a502adb41006097691792782b813", "filename": "gcc/rust/expand/rust-attribute-visitor.cc", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/903b7de01555f2e09df3ec3ccb0edcc3e77f9a5e/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/903b7de01555f2e09df3ec3ccb0edcc3e77f9a5e/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.cc?ref=903b7de01555f2e09df3ec3ccb0edcc3e77f9a5e", "patch": "@@ -402,10 +402,7 @@ AttrVisitor::visit (AST::MacroInvocation &macro_invoc)\n   // I don't think any macro token trees can be stripped in any way\n \n   // TODO: maybe have cfg! macro stripping behaviour here?\n-  if (macro_invoc.has_semicolon ())\n-    expander.expand_invoc_semi (macro_invoc);\n-  else\n-    expander.expand_invoc (macro_invoc);\n+  expander.expand_invoc (macro_invoc, macro_invoc.has_semicolon ());\n }\n \n void"}, {"sha": "e27adf5de5e0fcd27dc0c0afd81a3fb4cfbd8ea7", "filename": "gcc/rust/expand/rust-macro-expand.cc", "status": "modified", "additions": 10, "deletions": 45, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/903b7de01555f2e09df3ec3ccb0edcc3e77f9a5e/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/903b7de01555f2e09df3ec3ccb0edcc3e77f9a5e/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc?ref=903b7de01555f2e09df3ec3ccb0edcc3e77f9a5e", "patch": "@@ -106,7 +106,7 @@ MacroExpander::expand_decl_macro (Location invoc_locus,\n }\n \n void\n-MacroExpander::expand_invoc (AST::MacroInvocation &invoc)\n+MacroExpander::expand_invoc (AST::MacroInvocation &invoc, bool has_semicolon)\n {\n   if (depth_exceeds_recursion_limit ())\n     {\n@@ -136,54 +136,19 @@ MacroExpander::expand_invoc (AST::MacroInvocation &invoc)\n \n   // lookup the rules for this macro\n   NodeId resolved_node = UNKNOWN_NODEID;\n-  bool found = resolver->get_macro_scope ().lookup (\n-    Resolver::CanonicalPath::new_seg (invoc.get_pattern_node_id (),\n-\t\t\t\t      invoc_data.get_path ().as_string ()),\n-    &resolved_node);\n-  if (!found)\n-    {\n-      rust_error_at (invoc.get_locus (), \"unknown macro 1\");\n-      return;\n-    }\n-\n-  // lookup the rules\n-  AST::MacroRulesDefinition *rules_def = nullptr;\n-  bool ok = mappings->lookup_macro_def (resolved_node, &rules_def);\n-  rust_assert (ok);\n-\n-  auto fragment = AST::ASTFragment::create_error ();\n-\n-  if (rules_def->is_builtin ())\n-    fragment\n-      = rules_def->get_builtin_transcriber () (invoc.get_locus (), invoc_data);\n+  NodeId source_node = UNKNOWN_NODEID;\n+  if (has_semicolon)\n+    source_node = invoc.get_macro_node_id ();\n   else\n-    fragment\n-      = expand_decl_macro (invoc.get_locus (), invoc_data, *rules_def, false);\n-\n-  set_expanded_fragment (std::move (fragment));\n-}\n-\n-// FIXME: Arthur: Refactor these two functions, they're really similar\n-void\n-MacroExpander::expand_invoc_semi (AST::MacroInvocation &invoc)\n-{\n-  if (depth_exceeds_recursion_limit ())\n-    {\n-      rust_error_at (invoc.get_locus (), \"reached recursion limit\");\n-      return;\n-    }\n-\n-  AST::MacroInvocData &invoc_data = invoc.get_invoc_data ();\n-\n-  // lookup the rules for this macro\n-  NodeId resolved_node = UNKNOWN_NODEID;\n+    source_node = invoc.get_pattern_node_id ();\n   auto seg\n-    = Resolver::CanonicalPath::new_seg (invoc.get_macro_node_id (),\n+    = Resolver::CanonicalPath::new_seg (source_node,\n \t\t\t\t\tinvoc_data.get_path ().as_string ());\n+\n   bool found = resolver->get_macro_scope ().lookup (seg, &resolved_node);\n   if (!found)\n     {\n-      rust_error_at (invoc.get_locus (), \"unknown macro 2: [%s]\",\n+      rust_error_at (invoc.get_locus (), \"unknown macro: [%s]\",\n \t\t     seg.get ().c_str ());\n       return;\n     }\n@@ -199,8 +164,8 @@ MacroExpander::expand_invoc_semi (AST::MacroInvocation &invoc)\n     fragment\n       = rules_def->get_builtin_transcriber () (invoc.get_locus (), invoc_data);\n   else\n-    fragment\n-      = expand_decl_macro (invoc.get_locus (), invoc_data, *rules_def, true);\n+    fragment = expand_decl_macro (invoc.get_locus (), invoc_data, *rules_def,\n+\t\t\t\t  has_semicolon);\n \n   set_expanded_fragment (std::move (fragment));\n }"}, {"sha": "2c3380bebdbee415cc865b7376d2a694551bdb1f", "filename": "gcc/rust/expand/rust-macro-expand.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/903b7de01555f2e09df3ec3ccb0edcc3e77f9a5e/gcc%2Frust%2Fexpand%2Frust-macro-expand.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/903b7de01555f2e09df3ec3ccb0edcc3e77f9a5e/gcc%2Frust%2Fexpand%2Frust-macro-expand.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.h?ref=903b7de01555f2e09df3ec3ccb0edcc3e77f9a5e", "patch": "@@ -213,8 +213,7 @@ struct MacroExpander\n   /* Expands a macro invocation - possibly make both\n    * have similar duck-typed interface and use templates?*/\n   // should this be public or private?\n-  void expand_invoc (AST::MacroInvocation &invoc);\n-  void expand_invoc_semi (AST::MacroInvocation &invoc);\n+  void expand_invoc (AST::MacroInvocation &invoc, bool has_semicolon);\n \n   // Expands a single declarative macro.\n   AST::ASTFragment expand_decl_macro (Location locus,"}]}