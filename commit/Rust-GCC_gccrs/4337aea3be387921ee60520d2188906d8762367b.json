{"sha": "4337aea3be387921ee60520d2188906d8762367b", "node_id": "C_kwDOANBUbNoAKDQzMzdhZWEzYmUzODc5MjFlZTYwNTIwZDIxODg5MDZkODc2MjM2N2I", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-04-22T12:15:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-22T12:15:22Z"}, "message": "Merge #1155\n\n1155: Add base for visibility resolving r=CohenArthur a=CohenArthur\n\nThis adds a new visitor whose aim is to resolve the visibility of each VisItem in a crate. The crux of the implementation will be resolving `pub restricted` items, whose module needs to be resolved using name resolution/path resolution. On top of that, we will need to add a new visitor building a \"tree\" of modules, with a `accessible_from` or `is_child_of` method: All children of a module get to access its items whose visibility is inherited.\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>", "tree": {"sha": "ea9540ded2e2be710336c3ed7a0c0d4de72f1e99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea9540ded2e2be710336c3ed7a0c0d4de72f1e99"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4337aea3be387921ee60520d2188906d8762367b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiYpxaCRBK7hj4Ov3rIwAAg5sIAK1G8vsNFepkc2+K+R230QKA\nwcTkX4ehNh3lP5BXsTSszRklMu9T+4zlzIjauXYpDGn8opfwdTcU10X6YBTjK0cX\nZB4JCrycvBhq8kUx2XqCebc579DMF/n4Y/mL4Iv06iJlFtn7YjYpoZhRvBD6TY74\nC/Guy4k1enpHItSGtkNiyADidMqZrWb1/2i88lvNClGPcool4b7+5ND7gk4bZNVo\ncWLVqfCnjETphPxiRd8p+MVOdwPXHebLOHJ8RtYfRRiCf/X03huA2YqifvCwGvsJ\nq1JvMh9ST0b9lislII4kUzTCQ1PqbkkyqIlIX7bJz/21eJFWwYxAPz/6qmqSsXk=\n=Axr6\n-----END PGP SIGNATURE-----\n", "payload": "tree ea9540ded2e2be710336c3ed7a0c0d4de72f1e99\nparent b392376cc521230c8b254841ab036541317dc907\nparent bdd1b86ccb87d942a24dd60c01736e439ad57087\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1650629722 +0000\ncommitter GitHub <noreply@github.com> 1650629722 +0000\n\nMerge #1155\n\n1155: Add base for visibility resolving r=CohenArthur a=CohenArthur\n\nThis adds a new visitor whose aim is to resolve the visibility of each VisItem in a crate. The crux of the implementation will be resolving `pub restricted` items, whose module needs to be resolved using name resolution/path resolution. On top of that, we will need to add a new visitor building a \"tree\" of modules, with a `accessible_from` or `is_child_of` method: All children of a module get to access its items whose visibility is inherited.\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4337aea3be387921ee60520d2188906d8762367b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4337aea3be387921ee60520d2188906d8762367b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4337aea3be387921ee60520d2188906d8762367b/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b392376cc521230c8b254841ab036541317dc907", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b392376cc521230c8b254841ab036541317dc907", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b392376cc521230c8b254841ab036541317dc907"}, {"sha": "bdd1b86ccb87d942a24dd60c01736e439ad57087", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdd1b86ccb87d942a24dd60c01736e439ad57087", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdd1b86ccb87d942a24dd60c01736e439ad57087"}], "stats": {"total": 354, "additions": 352, "deletions": 2}, "files": [{"sha": "d25f403fbfbd2632e3614f67b7aabfbe95409386", "filename": "gcc/rust/Make-lang.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4337aea3be387921ee60520d2188906d8762367b/gcc%2Frust%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4337aea3be387921ee60520d2188906d8762367b/gcc%2Frust%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2FMake-lang.in?ref=4337aea3be387921ee60520d2188906d8762367b", "patch": "@@ -93,6 +93,7 @@ GRS_OBJS = \\\n     rust/rust-privacy-check.o \\\n     rust/rust-privacy-ctx.o \\\n     rust/rust-reachability.o \\\n+    rust/rust-visibility-resolver.o \\\n     rust/rust-tyty.o \\\n     rust/rust-tyctx.o \\\n     rust/rust-tyty-bounds.o \\"}, {"sha": "2e28207098dc9792165d5f1652712958abc9c515", "filename": "gcc/rust/hir/tree/rust-hir-item.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4337aea3be387921ee60520d2188906d8762367b/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4337aea3be387921ee60520d2188906d8762367b/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h?ref=4337aea3be387921ee60520d2188906d8762367b", "patch": "@@ -549,7 +549,7 @@ struct FunctionParam\n   const Analysis::NodeMapping &get_mappings () const { return mappings; }\n };\n \n-// Visibility of item - if the item has it, then it is some form of public\n+// Visibility of an item\n struct Visibility\n {\n public:"}, {"sha": "ccfed2c1a0f963d31f7cc61e3beaa885efcfbe2c", "filename": "gcc/rust/privacy/rust-privacy-check.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4337aea3be387921ee60520d2188906d8762367b/gcc%2Frust%2Fprivacy%2Frust-privacy-check.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4337aea3be387921ee60520d2188906d8762367b/gcc%2Frust%2Fprivacy%2Frust-privacy-check.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fprivacy%2Frust-privacy-check.cc?ref=4337aea3be387921ee60520d2188906d8762367b", "patch": "@@ -19,6 +19,8 @@\n #include \"rust-privacy-check.h\"\n #include \"rust-reachability.h\"\n #include \"rust-hir-type-check.h\"\n+#include \"rust-hir-map.h\"\n+#include \"rust-visibility-resolver.h\"\n \n extern bool\n saw_errors (void);\n@@ -29,10 +31,16 @@ void\n Resolver::resolve (HIR::Crate &crate)\n {\n   PrivacyContext ctx;\n+  auto mappings = Analysis::Mappings::get ();\n+\n+  auto resolver = VisibilityResolver (*mappings);\n+  resolver.go (crate);\n+\n   auto ty_ctx = ::Rust::Resolver::TypeCheckContext::get ();\n   auto visitor = ReachabilityVisitor (ctx, *ty_ctx);\n \n   const auto &items = crate.items;\n+\n   for (auto &item : items)\n     {\n       if (item->get_hir_kind () == HIR::Node::VIS_ITEM)"}, {"sha": "290b5eacb6ce01cfc32ed88e98998081ab98857e", "filename": "gcc/rust/privacy/rust-privacy-check.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4337aea3be387921ee60520d2188906d8762367b/gcc%2Frust%2Fprivacy%2Frust-privacy-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4337aea3be387921ee60520d2188906d8762367b/gcc%2Frust%2Fprivacy%2Frust-privacy-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fprivacy%2Frust-privacy-check.h?ref=4337aea3be387921ee60520d2188906d8762367b", "patch": "@@ -19,7 +19,6 @@\n #ifndef RUST_PRIVACY_CHECK_H\n #define RUST_PRIVACY_CHECK_H\n \n-#include \"rust-hir-map.h\"\n #include \"rust-hir.h\"\n #include \"rust-hir-expr.h\"\n #include \"rust-hir-stmt.h\""}, {"sha": "145eac73ac9c6a28aef323a6a22bddb2cf27bb23", "filename": "gcc/rust/privacy/rust-privacy-common.h", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4337aea3be387921ee60520d2188906d8762367b/gcc%2Frust%2Fprivacy%2Frust-privacy-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4337aea3be387921ee60520d2188906d8762367b/gcc%2Frust%2Fprivacy%2Frust-privacy-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fprivacy%2Frust-privacy-common.h?ref=4337aea3be387921ee60520d2188906d8762367b", "patch": "@@ -0,0 +1,64 @@\n+// Copyright (C) 2020-2022 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include \"rust-mapping-common.h\"\n+\n+namespace Rust {\n+namespace Privacy {\n+\n+/**\n+ * Visibility class related specifically to DefIds. This class allows defining\n+ * the visibility of an item with regard to a specific module.\n+ */\n+class ModuleVisibility\n+{\n+public:\n+  enum Type\n+  {\n+    Unknown,\n+    Private,\n+    Public,\n+    Restricted,\n+  };\n+\n+  ModuleVisibility () : kind (Unknown), module_id (UNKNOWN_DEFID) {}\n+\n+  static ModuleVisibility create_restricted (DefId module_id)\n+  {\n+    return ModuleVisibility (Type::Restricted, module_id);\n+  }\n+\n+  static ModuleVisibility create_public ()\n+  {\n+    return ModuleVisibility (Type::Public, UNKNOWN_DEFID);\n+  }\n+\n+  Type get_kind () const { return kind; }\n+\n+  const DefId &get_module_id () const { return module_id; }\n+\n+private:\n+  ModuleVisibility (Type kind, DefId module_id)\n+    : kind (kind), module_id (module_id)\n+  {}\n+\n+  Type kind;\n+  DefId module_id;\n+};\n+} // namespace Privacy\n+} // namespace Rust"}, {"sha": "e0bc4f5f0b877c8e4de7df6a41616af0e57c27e6", "filename": "gcc/rust/privacy/rust-reachability.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4337aea3be387921ee60520d2188906d8762367b/gcc%2Frust%2Fprivacy%2Frust-reachability.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4337aea3be387921ee60520d2188906d8762367b/gcc%2Frust%2Fprivacy%2Frust-reachability.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fprivacy%2Frust-reachability.h?ref=4337aea3be387921ee60520d2188906d8762367b", "patch": "@@ -46,6 +46,8 @@ class ReachabilityVisitor : public HIR::HIRVisItemVisitor\n     : current_level (ReachLevel::Reachable), ctx (ctx), ty_ctx (ty_ctx)\n   {}\n \n+  // FIXME: Add `go` method which takes an `HIR::Crate &` as argument\n+\n   /**\n    * Visit all the predicates of all the generic types of a given item, marking\n    * them as reachable or not."}, {"sha": "0b7a52910cdd6027ef2587f82fbf62e33f003b90", "filename": "gcc/rust/privacy/rust-visibility-resolver.cc", "status": "added", "additions": 163, "deletions": 0, "changes": 163, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4337aea3be387921ee60520d2188906d8762367b/gcc%2Frust%2Fprivacy%2Frust-visibility-resolver.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4337aea3be387921ee60520d2188906d8762367b/gcc%2Frust%2Fprivacy%2Frust-visibility-resolver.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fprivacy%2Frust-visibility-resolver.cc?ref=4337aea3be387921ee60520d2188906d8762367b", "patch": "@@ -0,0 +1,163 @@\n+// Copyright (C) 2020-2022 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include \"rust-visibility-resolver.h\"\n+#include \"rust-ast.h\"\n+#include \"rust-hir.h\"\n+#include \"rust-hir-item.h\"\n+\n+namespace Rust {\n+namespace Privacy {\n+\n+VisibilityResolver::VisibilityResolver (Analysis::Mappings &mappings)\n+  : mappings (mappings)\n+{}\n+\n+void\n+VisibilityResolver::go (HIR::Crate &crate)\n+{\n+  module_stack.push_back (crate.get_mappings ().get_defid ());\n+  mappings.insert_visibility (crate.get_mappings ().get_defid (),\n+\t\t\t      ModuleVisibility::create_public ());\n+\n+  for (auto &item : crate.items)\n+    {\n+      if (item->get_hir_kind () == HIR::Node::VIS_ITEM)\n+\t{\n+\t  auto vis_item = static_cast<HIR::VisItem *> (item.get ());\n+\t  vis_item->accept_vis (*this);\n+\t}\n+    }\n+}\n+\n+bool\n+VisibilityResolver::resolve_visibility (const HIR::Visibility &visibility,\n+\t\t\t\t\tModuleVisibility &to_resolve)\n+{\n+  switch (visibility.get_vis_type ())\n+    {\n+    case HIR::Visibility::PRIVATE:\n+      to_resolve = ModuleVisibility::create_restricted (peek_module ());\n+      return true;\n+    case HIR::Visibility::PUBLIC:\n+      // FIXME: We need to handle the restricted path here\n+      // FIXME: We also need to handle 2015 vs 2018 edition conflicts\n+      to_resolve = ModuleVisibility::create_public ();\n+      return true;\n+    default:\n+      return false;\n+    }\n+}\n+\n+DefId\n+VisibilityResolver::peek_module ()\n+{\n+  // We're always inserting a top module - the crate\n+  // But we have to check otherwise `.back()` is UB\n+  rust_assert (!module_stack.empty ());\n+\n+  return module_stack.back ();\n+}\n+\n+void\n+VisibilityResolver::visit (HIR::Module &mod)\n+{\n+  module_stack.push_back (mod.get_mappings ().get_defid ());\n+\n+  for (auto &item : mod.get_items ())\n+    {\n+      if (item->get_hir_kind () == HIR::Node::VIS_ITEM)\n+\t{\n+\t  auto vis_item = static_cast<HIR::VisItem *> (item.get ());\n+\t  vis_item->accept_vis (*this);\n+\t}\n+    }\n+\n+  module_stack.pop_back ();\n+}\n+\n+void\n+VisibilityResolver::visit (HIR::ExternCrate &crate)\n+{}\n+\n+void\n+VisibilityResolver::visit (HIR::UseDeclaration &use_decl)\n+{}\n+\n+void\n+VisibilityResolver::visit (HIR::Function &func)\n+{}\n+\n+void\n+VisibilityResolver::visit (HIR::TypeAlias &type_alias)\n+{}\n+\n+void\n+VisibilityResolver::visit (HIR::StructStruct &struct_item)\n+{}\n+\n+void\n+VisibilityResolver::visit (HIR::TupleStruct &tuple_struct)\n+{}\n+\n+void\n+VisibilityResolver::visit (HIR::Enum &enum_item)\n+{\n+  ModuleVisibility vis;\n+  if (!resolve_visibility (enum_item.get_visibility (), vis))\n+    return;\n+\n+  mappings.insert_visibility (enum_item.get_mappings ().get_defid (), vis);\n+  for (auto &variant : enum_item.get_variants ())\n+    mappings.insert_visibility (variant->get_mappings ().get_defid (), vis);\n+}\n+\n+void\n+VisibilityResolver::visit (HIR::Union &union_item)\n+{}\n+\n+void\n+VisibilityResolver::visit (HIR::ConstantItem &const_item)\n+{}\n+\n+void\n+VisibilityResolver::visit (HIR::StaticItem &static_item)\n+{}\n+\n+void\n+VisibilityResolver::visit (HIR::Trait &trait)\n+{\n+  ModuleVisibility vis;\n+  if (!resolve_visibility (trait.get_visibility (), vis))\n+    return;\n+\n+  mappings.insert_visibility (trait.get_mappings ().get_defid (), vis);\n+  for (auto &item : trait.get_trait_items ())\n+    mappings.insert_visibility (item->get_mappings ().get_defid (), vis);\n+}\n+\n+void\n+VisibilityResolver::visit (HIR::ImplBlock &impl)\n+{}\n+\n+void\n+VisibilityResolver::visit (HIR::ExternBlock &block)\n+{}\n+\n+} // namespace Privacy\n+} // namespace Rust"}, {"sha": "394c3d4c4149129a7802504cac0b2ff4815216a8", "filename": "gcc/rust/privacy/rust-visibility-resolver.h", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4337aea3be387921ee60520d2188906d8762367b/gcc%2Frust%2Fprivacy%2Frust-visibility-resolver.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4337aea3be387921ee60520d2188906d8762367b/gcc%2Frust%2Fprivacy%2Frust-visibility-resolver.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fprivacy%2Frust-visibility-resolver.h?ref=4337aea3be387921ee60520d2188906d8762367b", "patch": "@@ -0,0 +1,89 @@\n+// Copyright (C) 2020-2022 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#ifndef RUST_VISIBILITY_H\n+#define RUST_VISIBILITY_H\n+\n+#include \"rust-hir.h\"\n+#include \"rust-hir-expr.h\"\n+#include \"rust-hir-stmt.h\"\n+#include \"rust-hir-item.h\"\n+#include \"rust-hir-map.h\"\n+#include \"rust-hir-visitor.h\"\n+\n+namespace Rust {\n+namespace Privacy {\n+\n+class VisibilityResolver : public HIR::HIRVisItemVisitor\n+{\n+public:\n+  VisibilityResolver (Analysis::Mappings &mappings);\n+\n+  /**\n+   * Perform visibility resolving on an entire crate\n+   */\n+  void go (HIR::Crate &crate);\n+\n+  /**\n+   * Resolve the visibility of an item to its ModuleVisibility. This function\n+   * emits errors if necessary. The contents of the to_resolve parameter will be\n+   * overwritten on success.\n+   *\n+   * @param visibility Visibility of the item to resolve\n+   * @param to_resolve ModuleVisibility reference to fill on success.\n+   *\n+   * @return false on error, true if the resolving was successful.\n+   */\n+  bool resolve_visibility (const HIR::Visibility &visibility,\n+\t\t\t   ModuleVisibility &to_resolve);\n+\n+  /**\n+   * Get the DefId of the parent module we are currently visiting.\n+   *\n+   * @return UNKNOWN_DEFID if the module stack is empty, a valid `DefId`\n+   * otherwise\n+   */\n+  DefId peek_module ();\n+\n+  virtual void visit (HIR::Module &mod);\n+  virtual void visit (HIR::ExternCrate &crate);\n+  virtual void visit (HIR::UseDeclaration &use_decl);\n+  virtual void visit (HIR::Function &func);\n+  virtual void visit (HIR::TypeAlias &type_alias);\n+  virtual void visit (HIR::StructStruct &struct_item);\n+  virtual void visit (HIR::TupleStruct &tuple_struct);\n+  virtual void visit (HIR::Enum &enum_item);\n+  virtual void visit (HIR::Union &union_item);\n+  virtual void visit (HIR::ConstantItem &const_item);\n+  virtual void visit (HIR::StaticItem &static_item);\n+  virtual void visit (HIR::Trait &trait);\n+  virtual void visit (HIR::ImplBlock &impl);\n+  virtual void visit (HIR::ExternBlock &block);\n+\n+private:\n+  /* Mappings to insert visibilities into */\n+  Analysis::Mappings &mappings;\n+\n+  /* Stack of modules visited by this visitor */\n+  std::vector<DefId> module_stack;\n+};\n+\n+} // namespace Privacy\n+} // namespace Rust\n+\n+#endif // !RUST_VISIBILITY_H"}, {"sha": "ac1cf7042a95a9c3a62dc9036aa27ae9b5ddb4b3", "filename": "gcc/rust/util/rust-hir-map.cc", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4337aea3be387921ee60520d2188906d8762367b/gcc%2Frust%2Futil%2Frust-hir-map.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4337aea3be387921ee60520d2188906d8762367b/gcc%2Frust%2Futil%2Frust-hir-map.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.cc?ref=4337aea3be387921ee60520d2188906d8762367b", "patch": "@@ -781,5 +781,22 @@ Mappings::lookup_macro_def (NodeId id, AST::MacroRulesDefinition **def)\n   return true;\n }\n \n+void\n+Mappings::insert_visibility (DefId id, Privacy::ModuleVisibility visibility)\n+{\n+  visibility_map.insert ({id, visibility});\n+}\n+\n+bool\n+Mappings::lookup_visibility (DefId id, Privacy::ModuleVisibility *def)\n+{\n+  auto it = visibility_map.find (id);\n+  if (it == visibility_map.end ())\n+    return false;\n+\n+  *def = it->second;\n+  return true;\n+}\n+\n } // namespace Analysis\n } // namespace Rust"}, {"sha": "74fabdf0401248ee5b0ed06c3057746319e57118", "filename": "gcc/rust/util/rust-hir-map.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4337aea3be387921ee60520d2188906d8762367b/gcc%2Frust%2Futil%2Frust-hir-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4337aea3be387921ee60520d2188906d8762367b/gcc%2Frust%2Futil%2Frust-hir-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.h?ref=4337aea3be387921ee60520d2188906d8762367b", "patch": "@@ -26,6 +26,7 @@\n #include \"rust-ast-full-decls.h\"\n #include \"rust-hir-full-decls.h\"\n #include \"rust-lang-item.h\"\n+#include \"rust-privacy-common.h\"\n \n namespace Rust {\n namespace Analysis {\n@@ -295,6 +296,9 @@ class Mappings\n \n   bool lookup_macro_def (NodeId id, AST::MacroRulesDefinition **def);\n \n+  void insert_visibility (DefId id, Privacy::ModuleVisibility visibility);\n+  bool lookup_visibility (DefId id, Privacy::ModuleVisibility *def);\n+\n private:\n   Mappings ();\n \n@@ -353,6 +357,9 @@ class Mappings\n \n   // crate names\n   std::map<CrateNum, std::string> crate_names;\n+\n+  // Low level visibility map for each DefId\n+  std::map<DefId, Privacy::ModuleVisibility> visibility_map;\n };\n \n } // namespace Analysis"}]}