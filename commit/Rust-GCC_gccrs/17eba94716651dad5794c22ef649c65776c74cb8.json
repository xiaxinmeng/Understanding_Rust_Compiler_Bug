{"sha": "17eba94716651dad5794c22ef649c65776c74cb8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTdlYmE5NDcxNjY1MWRhZDU3OTRjMjJlZjY0OWM2NTc3NmM3NGNiOA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-09-23T13:25:30Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-09-23T13:25:30Z"}, "message": "i386.md (UNSPECV_NOPS): Rename from UNSPEC_NOPS and define as unspec_volatile.\n\n\t* config/i386/i386.md (UNSPECV_NOPS): Rename from UNSPEC_NOPS and\n\tdefine as unspec_volatile.\n\t(\"nops\"): Define as unspec_volatile. Use fputs to write to\n\tasm_out_file directly.  Output NOPs on separate lines using while loop.\n\t* config/i386/i386.c (ix86_code_end): Use fputs to write to\n\tasm_out_file directly.  Output NOPs on separate lines using while loop.\n\ntestsuite/ChangeLog:\n\n\t* gcc.target/i386/pad-1.c: Remove -S from dg-options.\n\t* gcc.target/i386/pad-3.c: Ditto.\n\t* gcc.target/i386/pad-7.c: Ditto.\n\t* gcc.target/i386/pad-7.c: Ditto.\n\t* gcc.target/i386/pr36502.c: Ditto.\n\t* gcc.target/i386/zee.c: Ditto.\n\t* gcc.target/i386/20060821-1.c: Ditto.\n\t* gcc.target/i386/pad-2.c: Ditto.  Scan for NOPs on separate lines.\n\t* gcc.target/i386/pad-5a.c: Ditto.  Do not use scan-assembler-not.\n\t* gcc.target/i386/pad-5b.c: Ditto.\n\t* gcc.target/i386/pad-6a.c: Ditto.\n\t* gcc.target/i386/pad-6b.c: Ditto.\n\t* gcc.target/i386/pad-8.c: Ditto.\n\t* gcc.target/i386/pad-9.c: Ditto.\n\t* gcc.target/i386/pad-10.c: Ditto.\n\t* gcc.target/i386/pad-4.c: Ditto.  Require pic effective target.\n\nFrom-SVN: r164564", "tree": {"sha": "75c727f24633429d3f712c9cf054f904e2b76083", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75c727f24633429d3f712c9cf054f904e2b76083"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17eba94716651dad5794c22ef649c65776c74cb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17eba94716651dad5794c22ef649c65776c74cb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17eba94716651dad5794c22ef649c65776c74cb8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17eba94716651dad5794c22ef649c65776c74cb8/comments", "author": null, "committer": null, "parents": [{"sha": "3d11339491ec3085638198715c880e7d19e1ae6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d11339491ec3085638198715c880e7d19e1ae6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d11339491ec3085638198715c880e7d19e1ae6b"}], "stats": {"total": 156, "additions": 84, "deletions": 72}, "files": [{"sha": "ac4745bccd478d1dc63bb47da85b953ccfde6c7c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17eba94716651dad5794c22ef649c65776c74cb8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17eba94716651dad5794c22ef649c65776c74cb8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=17eba94716651dad5794c22ef649c65776c74cb8", "patch": "@@ -1,3 +1,12 @@\n+2010-09-23  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (UNSPECV_NOPS): Rename from UNSPEC_NOPS and\n+\tdefine as unspec_volatile.\n+\t(\"nops\"): Define as unspec_volatile. Use fputs to write to\n+\tasm_out_file directly.  Output NOPs on separate lines using while loop.\n+\t* config/i386/i386.c (ix86_code_end): Use fputs to write to\n+\tasm_out_file directly.  Output NOPs on separate lines using while loop.\n+\n 2010-09-23  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/45565\n@@ -45,8 +54,7 @@\n \n 2010-09-22  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n-\t* doc/contrib.texi (Contributors): Allow URL to wrap in PDF\n-\toutput.\n+\t* doc/contrib.texi (Contributors): Allow URL to wrap in PDF output.\n \t* doc/cppopts.texi: Fix markup of index entry.\n \t* doc/extend.texi (Constructing Calls): Fix markup of\n \t__builtin_va_arg_pack and __builtin_va_arg_pack_len definition.\n@@ -63,8 +71,7 @@\n \tlong lines, avoid overlong pages from long @itemx lists.\n \t* doc/objc.texi (Garbage Collection): Allow URLs to wrap.\n \t* doc/standards.texi (Standards): Likewise.\n-\t* doc/trouble.texi (Incompatibilities): Fix markup of index\n-\tentry.\n+\t* doc/trouble.texi (Incompatibilities): Fix markup of index entry.\n \n 2010-09-22  Joseph Myers  <joseph@codesourcery.com>\n \n@@ -74,8 +81,7 @@\n \tresize option array here.\n \t* opts.h (prune_options): Remove prototype.\n \t* gcc.c (process_command): Take decoded options; don't call\n-\tdecode_cmdline_options_to_array here.  Use decoded options for\n-\targv[0].\n+\tdecode_cmdline_options_to_array here.  Use decoded options for argv[0].\n \t(main): Call decode_cmdline_options_to_array here instead of\n \tprune_options.  Update call to process_command.\n \t* config/darwin-driver.c: Include opts.h.\n@@ -148,7 +154,7 @@\n \t* postreload.c (move2add_note_store): Add reg_symbol_ref[] checks\n \tto update conditions. Fix reg_mode[] check.\n \n-2010-09-22  Hariharan Sandanagobalane <hariharan@picochip.com>\n+2010-09-22  Hariharan Sandanagobalane  <hariharan@picochip.com>\n \n \t* config/picochip/picochip.md (movhicc): Use expand to check whether\n \tmovhicc is available and split it after reload.\n@@ -467,7 +473,7 @@\n \t* tree-inline.c (copy_phis_for_bb): Delay commit of edge\n \tinsertions until after all PHI nodes of the block are processed.\n \n-2010-09-18  Tijl Coosemans <tijl@coosemans.org>\n+2010-09-18  Tijl Coosemans  <tijl@coosemans.org>\n \n \t* config/i386/freebsd.h (SUBTARGET32_DEFAULT_CPU): Add.\n \n@@ -1084,7 +1090,7 @@\n 2010-09-15  Tejas Belagod  <tejas.belagod@arm.com>\n \n \t* config/arm/neon.md (vec_pack_trunc_<mode>): Instruction\n-\tpattern for vmovn. Expansion in case of non \n+\tpattern for vmovn. Expansion in case of non\n \t-mvectorize-with-neon-quad.\n \t(neon_vec_pack_trunc_<mode>): Instruction pattern for vmovn for\n \tnon- -mvectorize-with-neon-quad case."}, {"sha": "b2585210deddf967bcd2d5380e0afe218ba89048", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17eba94716651dad5794c22ef649c65776c74cb8/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17eba94716651dad5794c22ef649c65776c74cb8/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=17eba94716651dad5794c22ef649c65776c74cb8", "patch": "@@ -8024,13 +8024,18 @@ ix86_code_end (void)\n \n       xops[0] = gen_rtx_REG (Pmode, regno);\n       xops[1] = gen_rtx_MEM (Pmode, stack_pointer_rtx);\n-      /* Pad stack IP move with 4 instructions.  2 NOPs count as 1\n-         instruction.  */\n+      /* Pad stack IP move with 4 instructions (two NOPs count\n+\t as one instruction.)  */\n       if (TARGET_PAD_SHORT_FUNCTION)\n-\toutput_asm_insn (\"nop; nop; nop; nop; nop; nop; nop; nop\",\n-\t\t\t xops);\n+\t{\n+\t  int i = 8;\n+\n+\t  while (i--)\n+\t    fputs (\"\\tnop\\n\", asm_out_file);\n+\t}\n+\n       output_asm_insn (\"mov%z0\\t{%1, %0|%0, %1}\", xops);\n-      output_asm_insn (\"ret\", xops);\n+      fputs (\"\\tret\\n\", asm_out_file);\n       final_end_function ();\n       init_insn_lengths ();\n       free_after_compilation (cfun);"}, {"sha": "55086f3c12e455d58b8e457c1cd250bd83fc915b", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 11, "deletions": 25, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17eba94716651dad5794c22ef649c65776c74cb8/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17eba94716651dad5794c22ef649c65776c74cb8/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=17eba94716651dad5794c22ef649c65776c74cb8", "patch": "@@ -104,7 +104,6 @@\n   UNSPEC_LD_MPIC\t; load_macho_picbase\n   UNSPEC_TRUNC_NOOP\n   UNSPEC_DIV_ALREADY_SPLIT\n-  UNSPEC_NOPS\n \n   ;; For SSE/MMX support:\n   UNSPEC_FIX_NOTRUNC\n@@ -248,6 +247,7 @@\n   UNSPECV_LOCK\n   UNSPECV_PROLOGUE_USE\n   UNSPECV_CLD\n+  UNSPECV_NOPS\n   UNSPECV_VZEROALL\n   UNSPECV_VZEROUPPER\n   UNSPECV_RDTSC\n@@ -11468,32 +11468,18 @@\n \n ;; Generate nops.  Operand 0 is the number of nops, up to 8.\n (define_insn \"nops\"\n-  [(unspec [(match_operand 0 \"const_int_operand\" \"\")]\n-\t   UNSPEC_NOPS)]\n+  [(unspec_volatile [(match_operand 0 \"const_int_operand\" \"\")]\n+\t\t    UNSPECV_NOPS)]\n   \"reload_completed\"\n {\n-  switch (INTVAL (operands[0]))\n-    {\n-    case 1:\n-      return \"nop\";\n-    case 2:\n-      return \"nop; nop\";\n-    case 3:\n-      return \"nop; nop; nop\";\n-    case 4:\n-      return \"nop; nop; nop; nop\";\n-    case 5:\n-      return \"nop; nop; nop; nop; nop\";\n-    case 6:\n-      return \"nop; nop; nop; nop; nop; nop\";\n-    case 7:\n-      return \"nop; nop; nop; nop; nop; nop; nop\";\n-    case 8:\n-      return \"nop; nop; nop; nop; nop; nop; nop; nop\";\n-    default:\n-      gcc_unreachable ();\n-      break;\n-  }\n+  int num = INTVAL (operands[0]);\n+\n+  gcc_assert (num >= 1 && num <= 8);\n+\n+  while (num--)\n+    fputs (\"\\tnop\\n\", asm_out_file);\n+\n+  return \"\";\n }\n   [(set (attr \"length\") (symbol_ref \"INTVAL (operands[0])\"))\n    (set_attr \"length_immediate\" \"0\")"}, {"sha": "65fca966575108f55943268ba8d71dec522c1534", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17eba94716651dad5794c22ef649c65776c74cb8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17eba94716651dad5794c22ef649c65776c74cb8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=17eba94716651dad5794c22ef649c65776c74cb8", "patch": "@@ -1,3 +1,22 @@\n+2010-09-23  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.target/i386/pad-1.c: Remove -S from dg-options.\n+\t* gcc.target/i386/pad-3.c: Ditto.\n+\t* gcc.target/i386/pad-7.c: Ditto.\n+\t* gcc.target/i386/pad-7.c: Ditto.\n+\t* gcc.target/i386/pr36502.c: Ditto.\n+\t* gcc.target/i386/zee.c: Ditto.\n+\t* gcc.target/i386/20060821-1.c: Ditto.\n+\t* gcc.target/i386/pad-2.c: Ditto.  Scan for NOPs on separate lines.\n+\t* gcc.target/i386/pad-5a.c: Ditto.  Do not use scan-assembler-not.\n+\t* gcc.target/i386/pad-5b.c: Ditto.\n+\t* gcc.target/i386/pad-6a.c: Ditto.\n+\t* gcc.target/i386/pad-6b.c: Ditto.\n+\t* gcc.target/i386/pad-8.c: Ditto.\n+\t* gcc.target/i386/pad-9.c: Ditto.\n+\t* gcc.target/i386/pad-10.c: Ditto.\n+\t* gcc.target/i386/pad-4.c: Ditto.  Require pic effective target.\n+\n 2010-09-23  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/45565\n@@ -121,10 +140,10 @@\n \t2005-10-11  Fariborz Jahanian <fjahanian@apple.com>\n \n \tRadar 4291785\n-\tobjc.dg/naming-4.m: New\n-\tobjc.dg/naming-5.m: New\n-\tobj-c++.dg/naming-1.mm: New\n-\tobj-c++.dg/naming-2.mm: New\n+\t* objc.dg/naming-4.m: New\n+\t* objc.dg/naming-5.m: New\n+\t* obj-c++.dg/naming-1.mm: New\n+\t* obj-c++.dg/naming-2.mm: New\n \n 2010-09-21  Jonathan Wakely  <redi@gcc.gnu.org>\n \t    Jack Howarth  <howarth@bromo.med.uc.edu>"}, {"sha": "29a9afe876c5d59a989c7d6dc38e93201f5d4dcf", "filename": "gcc/testsuite/gcc.target/i386/20060821-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17eba94716651dad5794c22ef649c65776c74cb8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F20060821-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17eba94716651dad5794c22ef649c65776c74cb8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F20060821-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F20060821-1.c?ref=17eba94716651dad5794c22ef649c65776c74cb8", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -msse3 -S\" } */\n+/* { dg-options \"-O2 -msse3\" } */\n /* { dg-final { scan-assembler-not \"%mm\" } } */\n /* PR 28825 */\n #include <pmmintrin.h>"}, {"sha": "770c44d8900d76473a0bf6bf3f07be7208e45cc2", "filename": "gcc/testsuite/gcc.target/i386/pad-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17eba94716651dad5794c22ef649c65776c74cb8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17eba94716651dad5794c22ef649c65776c74cb8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-1.c?ref=17eba94716651dad5794c22ef649c65776c74cb8", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fomit-frame-pointer -mtune=generic -S\" } */\n+/* { dg-options \"-O2 -fomit-frame-pointer -mtune=generic\" } */\n /* { dg-final { scan-assembler \"rep\" } } */\n /* { dg-final { scan-assembler-not \"nop\" } } */\n "}, {"sha": "e10d24c7da61930b79de95f32cc9cbb2892d307b", "filename": "gcc/testsuite/gcc.target/i386/pad-10.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17eba94716651dad5794c22ef649c65776c74cb8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17eba94716651dad5794c22ef649c65776c74cb8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-10.c?ref=17eba94716651dad5794c22ef649c65776c74cb8", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fomit-frame-pointer -march=atom -S\" } */\n+/* { dg-options \"-O2 -fomit-frame-pointer -march=atom\" } */\n /* { dg-final { scan-assembler-not \"nop\" } } */\n /* { dg-final { scan-assembler-not \"rep\" } } */\n "}, {"sha": "37743c483a8305924cb004e9e5ccb5072ed97b57", "filename": "gcc/testsuite/gcc.target/i386/pad-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17eba94716651dad5794c22ef649c65776c74cb8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17eba94716651dad5794c22ef649c65776c74cb8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-2.c?ref=17eba94716651dad5794c22ef649c65776c74cb8", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fomit-frame-pointer -march=atom -S\" } */\n-/* { dg-final { scan-assembler-times \"nop; nop; nop; nop; nop; nop; nop; nop\" 1 } } */\n+/* { dg-options \"-O2 -fomit-frame-pointer -march=atom\" } */\n+/* { dg-final { scan-assembler-times \"nop\" 8 } } */\n /* { dg-final { scan-assembler-not \"rep\" } } */\n \n void"}, {"sha": "b9a547d07d85054dc0b470030f6d200c2fa0b782", "filename": "gcc/testsuite/gcc.target/i386/pad-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17eba94716651dad5794c22ef649c65776c74cb8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17eba94716651dad5794c22ef649c65776c74cb8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-3.c?ref=17eba94716651dad5794c22ef649c65776c74cb8", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fomit-frame-pointer -march=atom -fno-pic -S\" } */\n+/* { dg-options \"-O2 -fomit-frame-pointer -march=atom -fno-pic\" } */\n /* { dg-final { scan-assembler-not \"nop\" } } */\n /* { dg-final { scan-assembler-not \"rep\" } } */\n "}, {"sha": "ad6b029e2cb63e8f768e16f1306c44d8ba21e9c0", "filename": "gcc/testsuite/gcc.target/i386/pad-4.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17eba94716651dad5794c22ef649c65776c74cb8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17eba94716651dad5794c22ef649c65776c74cb8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-4.c?ref=17eba94716651dad5794c22ef649c65776c74cb8", "patch": "@@ -1,13 +1,15 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target ilp32 } */\n-/* { dg-options \"-O2 -fomit-frame-pointer -march=atom -S -fPIC\" } */\n-/* { dg-final { scan-assembler-times \"nop; nop; nop; nop; nop; nop; nop; nop\" 1 } } */\n+/* { dg-require-effective-target fpic } */\n+/* { dg-options \"-O2 -fomit-frame-pointer -march=atom -fPIC\" } */\n+/* { dg-final { scan-assembler-times \"nop\" 8 } } */\n /* { dg-final { scan-assembler-not \"rep\" } } */\n \n extern int bar;\n \n int\n foo ()\n {\n+  asm volatile (\"\");\n   return bar;\n }"}, {"sha": "d29e62816f0885c2e7283a07764a6130373149b0", "filename": "gcc/testsuite/gcc.target/i386/pad-5a.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17eba94716651dad5794c22ef649c65776c74cb8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-5a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17eba94716651dad5794c22ef649c65776c74cb8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-5a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-5a.c?ref=17eba94716651dad5794c22ef649c65776c74cb8", "patch": "@@ -1,8 +1,7 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target ilp32 } */\n-/* { dg-options \"-O2 -fomit-frame-pointer -march=atom -S\" } */\n-/* { dg-final { scan-assembler-times \"nop; nop\" 1 } } */\n-/* { dg-final { scan-assembler-not \"nop; nop; nop\" } } */\n+/* { dg-options \"-O2 -fomit-frame-pointer -march=atom\" } */\n+/* { dg-final { scan-assembler-times \"nop\" 2 } } */\n /* { dg-final { scan-assembler-not \"rep\" } } */\n \n int"}, {"sha": "1d95bf32d2f1fb5a0cf210d629f6b23572eb8c96", "filename": "gcc/testsuite/gcc.target/i386/pad-5b.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17eba94716651dad5794c22ef649c65776c74cb8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-5b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17eba94716651dad5794c22ef649c65776c74cb8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-5b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-5b.c?ref=17eba94716651dad5794c22ef649c65776c74cb8", "patch": "@@ -1,8 +1,7 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target lp64 } */\n-/* { dg-options \"-O2 -fomit-frame-pointer -march=atom -S\" } */\n-/* { dg-final { scan-assembler-times \"nop; nop; nop; nop\" 1 } } */\n-/* { dg-final { scan-assembler-not \"nop; nop; nop; nop; nop\" } } */\n+/* { dg-options \"-O2 -fomit-frame-pointer -march=atom\" } */\n+/* { dg-final { scan-assembler-times \"nop\" 4 } } */\n /* { dg-final { scan-assembler-not \"rep\" } } */\n \n int"}, {"sha": "e2db5ad1f43a8c174a4bc6acafec377965f6f061", "filename": "gcc/testsuite/gcc.target/i386/pad-6a.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17eba94716651dad5794c22ef649c65776c74cb8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-6a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17eba94716651dad5794c22ef649c65776c74cb8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-6a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-6a.c?ref=17eba94716651dad5794c22ef649c65776c74cb8", "patch": "@@ -1,8 +1,7 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target ilp32 } */\n-/* { dg-options \"-O2 -fomit-frame-pointer -march=atom -S\" } */\n-/* { dg-final { scan-assembler-times \"nop; nop; nop; nop\" 1 } } */\n-/* { dg-final { scan-assembler-not \"nop; nop; nop; nop; nop\" } } */\n+/* { dg-options \"-O2 -fomit-frame-pointer -march=atom\" } */\n+/* { dg-final { scan-assembler-times \"nop\" 4 } } */\n /* { dg-final { scan-assembler-not \"rep\" } } */\n \n int"}, {"sha": "d8f9bec5d4f2c07256743b8eb187f62e9a7ee4bf", "filename": "gcc/testsuite/gcc.target/i386/pad-6b.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17eba94716651dad5794c22ef649c65776c74cb8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-6b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17eba94716651dad5794c22ef649c65776c74cb8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-6b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-6b.c?ref=17eba94716651dad5794c22ef649c65776c74cb8", "patch": "@@ -1,8 +1,7 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target lp64 } */\n-/* { dg-options \"-O2 -fomit-frame-pointer -march=atom -S\" } */\n-/* { dg-final { scan-assembler-times \"nop; nop; nop; nop; nop; nop\" 1 } } */\n-/* { dg-final { scan-assembler-not \"nop; nop; nop; nop; nop; nop; nop\" } } */\n+/* { dg-options \"-O2 -fomit-frame-pointer -march=atom\" } */\n+/* { dg-final { scan-assembler-times \"nop\" 6 } } */\n /* { dg-final { scan-assembler-not \"rep\" } } */\n \n int"}, {"sha": "8904eca0bc70eb2609f5d07244951a873f5c4bbd", "filename": "gcc/testsuite/gcc.target/i386/pad-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17eba94716651dad5794c22ef649c65776c74cb8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17eba94716651dad5794c22ef649c65776c74cb8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-7.c?ref=17eba94716651dad5794c22ef649c65776c74cb8", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target ilp32 } */\n-/* { dg-options \"-O2 -fomit-frame-pointer -march=atom -S\" } */\n+/* { dg-options \"-O2 -fomit-frame-pointer -march=atom\" } */\n /* { dg-final { scan-assembler-not \"nop\" } } */\n /* { dg-final { scan-assembler-not \"rep\" } } */\n "}, {"sha": "0e939fa7890c23036e555ea34be3eaf7728d2959", "filename": "gcc/testsuite/gcc.target/i386/pad-8.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17eba94716651dad5794c22ef649c65776c74cb8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17eba94716651dad5794c22ef649c65776c74cb8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-8.c?ref=17eba94716651dad5794c22ef649c65776c74cb8", "patch": "@@ -1,7 +1,6 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fomit-frame-pointer -march=atom -S\" } */\n-/* { dg-final { scan-assembler-times \"nop; nop; nop; nop; nop; nop\" 1 } } */\n-/* { dg-final { scan-assembler-not \"nop; nop; nop; nop; nop; nop; nop\" } } */\n+/* { dg-options \"-O2 -fomit-frame-pointer -march=atom\" } */\n+/* { dg-final { scan-assembler-times \"nop\" 6 } } */\n /* { dg-final { scan-assembler-not \"rep\" } } */\n \n int"}, {"sha": "69e33446b756ae9cef391e55a20cce136882a424", "filename": "gcc/testsuite/gcc.target/i386/pad-9.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17eba94716651dad5794c22ef649c65776c74cb8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17eba94716651dad5794c22ef649c65776c74cb8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-9.c?ref=17eba94716651dad5794c22ef649c65776c74cb8", "patch": "@@ -1,8 +1,7 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target lp64 } */\n-/* { dg-options \"-O2 -fomit-frame-pointer -march=atom -S\" } */\n-/* { dg-final { scan-assembler-times \"nop; nop; nop; nop\" 1 } } */\n-/* { dg-final { scan-assembler-not \"nop; nop; nop; nop; nop\" } } */\n+/* { dg-options \"-O2 -fomit-frame-pointer -march=atom\" } */\n+/* { dg-final { scan-assembler-times \"nop\" 4 } } */\n /* { dg-final { scan-assembler-not \"rep\" } } */\n \n extern void bar (void);"}, {"sha": "bc4c7ccf1c8ed91938ea49158db2dcae4ff4d64b", "filename": "gcc/testsuite/gcc.target/i386/pr36502.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17eba94716651dad5794c22ef649c65776c74cb8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr36502.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17eba94716651dad5794c22ef649c65776c74cb8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr36502.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr36502.c?ref=17eba94716651dad5794c22ef649c65776c74cb8", "patch": "@@ -1,6 +1,6 @@\n /* PR target/36502 */\n /* { dg-do compile { target { *-*-darwin* && ilp32 } } } */\n-/* { dg-options \"-O -fomit-frame-pointer -fno-pic -S\" } */\n+/* { dg-options \"-O -fomit-frame-pointer -fno-pic\" } */\n int a;\n void f() {a++;}\n /* { dg-final { scan-assembler-not \"esp\" } } */"}, {"sha": "b46e890e2b0a759616149852532ae5535ad501a7", "filename": "gcc/testsuite/gcc.target/i386/zee.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17eba94716651dad5794c22ef649c65776c74cb8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzee.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17eba94716651dad5794c22ef649c65776c74cb8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzee.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fzee.c?ref=17eba94716651dad5794c22ef649c65776c74cb8", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target lp64 } */\n-/* { dg-options \"-O2 -fzee -S\" } */\n+/* { dg-options \"-O2 -fzee\" } */\n /* { dg-final { scan-assembler-not \"mov\\[\\\\t \\]+\\(%\\[\\^,\\]+\\),\\[\\\\t \\]*\\\\1\" } } */\n int mask[100];\n int foo(unsigned x)"}]}