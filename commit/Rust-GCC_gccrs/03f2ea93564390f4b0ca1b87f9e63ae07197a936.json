{"sha": "03f2ea93564390f4b0ca1b87f9e63ae07197a936", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDNmMmVhOTM1NjQzOTBmNGIwY2ExYjg3ZjllNjNhZTA3MTk3YTkzNg==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-03-31T14:30:29Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-03-31T14:30:29Z"}, "message": "emit-rtl.c (dconstm2, dconsthalf): New real constants.\n\n\n\t* emit-rtl.c (dconstm2, dconsthalf): New real constants.\n\t(init_emit_once): Initialize dconstm2 and dconsthalf here.\n\t* real.h (dconstm2, dconsthalf): Add prototypes here.\n\t* real.c (real_sqrt): Use dconsthalf rather than local copy.\n\t* builtins.c (fold_builtin): When optimizing sqrt(exp(x)) as\n\texp(x/2.0) remember to fold the division if possible.\n\tFold sin(0.0) as 0.0, cos(0.0) as 1.0, pow(x,1.0) as x,\n\tpow(x,-1.0) as 1.0/x, pow(x,2.0) as x*x, pow(x,-2.0) as\n\t1.0/(x*x) and pow(x,0.5) as sqrt(x).\n\n\t* gcc.dg/builtins-3.c: Add new tests for sin and cos.\n\t* gcc.dg/builtins-7.c: New test case.\n\t* gcc.dg/builtins-8.c: New test case.\n\nFrom-SVN: r65088", "tree": {"sha": "ae8fad7cd3fde47e1b9f8cb921dd6289d19b33cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae8fad7cd3fde47e1b9f8cb921dd6289d19b33cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03f2ea93564390f4b0ca1b87f9e63ae07197a936", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03f2ea93564390f4b0ca1b87f9e63ae07197a936", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03f2ea93564390f4b0ca1b87f9e63ae07197a936", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03f2ea93564390f4b0ca1b87f9e63ae07197a936/comments", "author": null, "committer": null, "parents": [{"sha": "8c1e9e340ce4092e878a00b567637a55f735dd6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c1e9e340ce4092e878a00b567637a55f735dd6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c1e9e340ce4092e878a00b567637a55f735dd6d"}], "stats": {"total": 233, "additions": 218, "deletions": 15}, "files": [{"sha": "c7b59f0071f2b5b3b964e04d872ac2eed90bb52e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f2ea93564390f4b0ca1b87f9e63ae07197a936/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f2ea93564390f4b0ca1b87f9e63ae07197a936/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=03f2ea93564390f4b0ca1b87f9e63ae07197a936", "patch": "@@ -1,3 +1,15 @@\n+2003-03-31  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* emit-rtl.c (dconstm2, dconsthalf): New real constants.\n+\t(init_emit_once): Initialize dconstm2 and dconsthalf here.\n+\t* real.h (dconstm2, dconsthalf): Add prototypes here.\n+\t* real.c (real_sqrt): Use dconsthalf rather than local copy.\n+\t* builtins.c (fold_builtin): When optimizing sqrt(exp(x)) as\n+\texp(x/2.0) remember to fold the division if possible.\n+\tFold sin(0.0) as 0.0, cos(0.0) as 1.0, pow(x,1.0) as x,\n+\tpow(x,-1.0) as 1.0/x, pow(x,2.0) as x*x, pow(x,-2.0) as\n+\t1.0/(x*x) and pow(x,0.5) as sqrt(x).\n+\n 2003-03-31  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/h8300/h8300.md (a new peephole2): New."}, {"sha": "d446185c8c563aefbcb0f71eb94f02beee241384", "filename": "gcc/builtins.c", "status": "modified", "additions": 95, "deletions": 7, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f2ea93564390f4b0ca1b87f9e63ae07197a936/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f2ea93564390f4b0ca1b87f9e63ae07197a936/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=03f2ea93564390f4b0ca1b87f9e63ae07197a936", "patch": "@@ -4743,15 +4743,41 @@ fold_builtin (exp)\n \t\t  || fcode == BUILT_IN_EXPL))\n \t    {\n \t      tree expfn = TREE_OPERAND (TREE_OPERAND (arg, 0), 0);\n-\t      arg = build (RDIV_EXPR, type,\n-\t\t\t   TREE_VALUE (TREE_OPERAND (arg, 1)),\n-\t\t\t   build_real (type, dconst2));\n+\t      arg = fold (build (RDIV_EXPR, type,\n+\t\t\t\t TREE_VALUE (TREE_OPERAND (arg, 1)),\n+\t\t\t\t build_real (type, dconst2)));\n \t      arglist = build_tree_list (NULL_TREE, arg);\n \t      return build_function_call_expr (expfn, arglist);\n \t    }\n \t}\n       break;\n \n+    case BUILT_IN_SIN:\n+    case BUILT_IN_SINF:\n+    case BUILT_IN_SINL:\n+      if (validate_arglist (arglist, REAL_TYPE, VOID_TYPE))\n+\t{\n+\t  tree arg = TREE_VALUE (arglist);\n+\n+\t  /* Optimize sin(0.0) = 0.0.  */\n+\t  if (real_zerop (arg))\n+\t    return build_real (type, dconst0);\n+\t}\n+      break;\n+\n+    case BUILT_IN_COS:\n+    case BUILT_IN_COSF:\n+    case BUILT_IN_COSL:\n+      if (validate_arglist (arglist, REAL_TYPE, VOID_TYPE))\n+\t{\n+\t  tree arg = TREE_VALUE (arglist);\n+\n+\t  /* Optimize cos(0.0) = 1.0.  */\n+\t  if (real_zerop (arg))\n+\t    return build_real (type, dconst1);\n+\t}\n+      break;\n+\n     case BUILT_IN_EXP:\n     case BUILT_IN_EXPF:\n     case BUILT_IN_EXPL:\n@@ -4816,13 +4842,75 @@ fold_builtin (exp)\n \t  tree arg0 = TREE_VALUE (arglist);\n \t  tree arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n \n-\t  /* Optimize pow(x,0.0) = 1.0.  */\n-\t  if (real_zerop (arg1))\n-\t    return omit_one_operand (type, build_real (type, dconst1), arg0);\n-\n \t  /* Optimize pow(1.0,y) = 1.0.  */\n \t  if (real_onep (arg0))\n \t    return omit_one_operand (type, build_real (type, dconst1), arg1);\n+\n+\t  if (TREE_CODE (arg1) == REAL_CST\n+\t      && ! TREE_CONSTANT_OVERFLOW (arg1))\n+\t    {\n+\t      REAL_VALUE_TYPE c;\n+\t      c = TREE_REAL_CST (arg1);\n+\n+\t      /* Optimize pow(x,0.0) = 1.0.  */\n+\t      if (REAL_VALUES_EQUAL (c, dconst0))\n+\t\treturn omit_one_operand (type, build_real (type, dconst1),\n+\t\t\t\t\t arg0);\n+\n+\t      /* Optimize pow(x,1.0) = x.  */\n+\t      if (REAL_VALUES_EQUAL (c, dconst1))\n+\t\treturn arg0;\n+\n+\t      /* Optimize pow(x,-1.0) = 1.0/x.  */\n+\t      if (REAL_VALUES_EQUAL (c, dconstm1))\n+\t\treturn fold (build (RDIV_EXPR, type,\n+\t\t\t\t    build_real (type, dconst1),\n+\t\t\t\t    arg0));\n+\n+\t      /* Optimize pow(x,2.0) = x*x.  */\n+\t      if (REAL_VALUES_EQUAL (c, dconst2)\n+\t\t  && (*lang_hooks.decls.global_bindings_p) () == 0\n+\t\t  && ! contains_placeholder_p (arg0))\n+\t\t{\n+\t\t  arg0 = save_expr (arg0);\n+\t\t  return fold (build (MULT_EXPR, type, arg0, arg0));\n+\t\t}\n+\n+\t      /* Optimize pow(x,-2.0) = 1.0/(x*x).  */\n+\t      if (flag_unsafe_math_optimizations\n+\t\t  && REAL_VALUES_EQUAL (c, dconstm2)\n+\t\t  && (*lang_hooks.decls.global_bindings_p) () == 0\n+\t\t  && ! contains_placeholder_p (arg0))\n+\t\t{\n+\t\t  arg0 = save_expr (arg0);\n+\t\t  return fold (build (RDIV_EXPR, type,\n+\t\t\t\t      build_real (type, dconst1),\n+\t\t\t\t      fold (build (MULT_EXPR, type,\n+\t\t\t\t\t\t   arg0, arg0))));\n+\t\t}\n+\n+\t      /* Optimize pow(x,0.5) = sqrt(x).  */\n+\t      if (flag_unsafe_math_optimizations\n+\t\t  && REAL_VALUES_EQUAL (c, dconsthalf))\n+\t\t{\n+\t\t  tree sqrtfn;\n+\n+\t\t  if (fcode == BUILT_IN_POW)\n+\t\t    sqrtfn = implicit_built_in_decls[BUILT_IN_SQRT];\n+\t\t  else if (fcode == BUILT_IN_POWF)\n+\t\t    sqrtfn = implicit_built_in_decls[BUILT_IN_SQRTF];\n+\t\t  else if (fcode == BUILT_IN_POWL)\n+\t\t    sqrtfn = implicit_built_in_decls[BUILT_IN_SQRTL];\n+\t\t  else\n+\t\t    sqrtfn = NULL_TREE;\n+\n+\t\t  if (sqrtfn != NULL_TREE)\n+\t\t    {\n+\t\t      tree arglist = build_tree_list (NULL_TREE, arg0);\n+\t\t      return build_function_call_expr (sqrtfn, arglist);\n+\t\t    }\n+\t\t}\n+\t    }\n \t}\n       break;\n "}, {"sha": "4aab67494d4104b22c10263a338aa5da75a8d663", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f2ea93564390f4b0ca1b87f9e63ae07197a936/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f2ea93564390f4b0ca1b87f9e63ae07197a936/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=03f2ea93564390f4b0ca1b87f9e63ae07197a936", "patch": "@@ -111,6 +111,8 @@ REAL_VALUE_TYPE dconst0;\n REAL_VALUE_TYPE dconst1;\n REAL_VALUE_TYPE dconst2;\n REAL_VALUE_TYPE dconstm1;\n+REAL_VALUE_TYPE dconstm2;\n+REAL_VALUE_TYPE dconsthalf;\n \n /* All references to the following fixed hard registers go through\n    these unique rtl objects.  On machines where the frame-pointer and\n@@ -5552,6 +5554,10 @@ init_emit_once (line_numbers)\n   REAL_VALUE_FROM_INT (dconst1,   1,  0, double_mode);\n   REAL_VALUE_FROM_INT (dconst2,   2,  0, double_mode);\n   REAL_VALUE_FROM_INT (dconstm1, -1, -1, double_mode);\n+  REAL_VALUE_FROM_INT (dconstm2, -2, -1, double_mode);\n+\n+  dconsthalf = dconst1;\n+  dconsthalf.exp--;\n \n   for (i = 0; i <= 2; i++)\n     {"}, {"sha": "04bf718a74343ce15284c506a85c9082888f79bf", "filename": "gcc/real.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f2ea93564390f4b0ca1b87f9e63ae07197a936/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f2ea93564390f4b0ca1b87f9e63ae07197a936/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=03f2ea93564390f4b0ca1b87f9e63ae07197a936", "patch": "@@ -4423,7 +4423,6 @@ real_sqrt (r, mode, x)\n      const REAL_VALUE_TYPE *x;\n {\n   static REAL_VALUE_TYPE halfthree;\n-  static REAL_VALUE_TYPE half;\n   static bool init = false;\n   REAL_VALUE_TYPE h, t, i;\n   int iter, exp;\n@@ -4452,8 +4451,7 @@ real_sqrt (r, mode, x)\n \n   if (!init)\n     {\n-      real_arithmetic (&half, RDIV_EXPR, &dconst1, &dconst2);\n-      real_arithmetic (&halfthree, PLUS_EXPR, &dconst1, &half);\n+      real_arithmetic (&halfthree, PLUS_EXPR, &dconst1, &dconsthalf);\n       init = true;\n     }\n \n@@ -4467,7 +4465,7 @@ real_sqrt (r, mode, x)\n       /* i(n+1) = i(n) * (1.5 - 0.5*i(n)*i(n)*x).  */\n       real_arithmetic (&t, MULT_EXPR, x, &i);\n       real_arithmetic (&h, MULT_EXPR, &t, &i);\n-      real_arithmetic (&t, MULT_EXPR, &h, &half);\n+      real_arithmetic (&t, MULT_EXPR, &h, &dconsthalf);\n       real_arithmetic (&h, MINUS_EXPR, &halfthree, &t);\n       real_arithmetic (&t, MULT_EXPR, &i, &h);\n \n@@ -4484,7 +4482,7 @@ real_sqrt (r, mode, x)\n   real_arithmetic (&h, MULT_EXPR, &t, &i);\n   real_arithmetic (&i, MINUS_EXPR, &dconst1, &h);\n   real_arithmetic (&h, MULT_EXPR, &t, &i);\n-  real_arithmetic (&i, MULT_EXPR, &half, &h);\n+  real_arithmetic (&i, MULT_EXPR, &dconsthalf, &h);\n   real_arithmetic (&h, PLUS_EXPR, &t, &i);\n \n   /* ??? We need a Tuckerman test to get the last bit.  */"}, {"sha": "9507af2270d84ef742e8c9de224f9655053b0a76", "filename": "gcc/real.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f2ea93564390f4b0ca1b87f9e63ae07197a936/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f2ea93564390f4b0ca1b87f9e63ae07197a936/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=03f2ea93564390f4b0ca1b87f9e63ae07197a936", "patch": "@@ -322,12 +322,14 @@ extern void real_ldexp\t\tPARAMS ((REAL_VALUE_TYPE *,\n \n /* **** End of software floating point emulator interface macros **** */\n \f\n-/* Constant real values 0, 1, 2, and -1.  */\n+/* Constant real values 0, 1, 2, -1, -2 and 0.5.  */\n \n extern REAL_VALUE_TYPE dconst0;\n extern REAL_VALUE_TYPE dconst1;\n extern REAL_VALUE_TYPE dconst2;\n extern REAL_VALUE_TYPE dconstm1;\n+extern REAL_VALUE_TYPE dconstm2;\n+extern REAL_VALUE_TYPE dconsthalf;\n \n /* Function to return a real value (not a tree node)\n    from a given integer constant.  */"}, {"sha": "fdc97e104e2af0ce8da520e6b735037f2e1afff5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f2ea93564390f4b0ca1b87f9e63ae07197a936/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f2ea93564390f4b0ca1b87f9e63ae07197a936/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=03f2ea93564390f4b0ca1b87f9e63ae07197a936", "patch": "@@ -1,3 +1,9 @@\n+2003-03-31  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* gcc.dg/builtins-3.c: Add new tests for sin and cos.\n+\t* gcc.dg/builtins-7.c: New test case.\n+\t* gcc.dg/builtins-8.c: New test case.\n+\n 2003-03-31  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* gcc.c-torture/execute/ieee/20030331-1.c: New test."}, {"sha": "3c2dbfd7f52fdce6eb743b68a1fd4b04114b1819", "filename": "gcc/testsuite/gcc.dg/builtins-3.c", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f2ea93564390f4b0ca1b87f9e63ae07197a936/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f2ea93564390f4b0ca1b87f9e63ae07197a936/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-3.c?ref=03f2ea93564390f4b0ca1b87f9e63ae07197a936", "patch": "@@ -1,7 +1,7 @@\n-/* Copyright (C) 2002  Free Software Foundation.\n+/* Copyright (C) 2002, 2003  Free Software Foundation.\n \n    Verify that built-in math function constant folding of constant\n-   arguments is correctly performed by the by the compiler.\n+   arguments is correctly performed by the compiler.\n \n    Written by Roger Sayle, 16th August 2002.  */\n \n@@ -24,6 +24,12 @@ int main()\n   if (log (1.0) != 0.0)\n     link_error ();\n \n+  if (sin (0.0) != 0.0)\n+    link_error ();\n+\n+  if (cos (0.0) != 1.0)\n+    link_error ();\n+\n \n   if (sqrtf (0.0f) != 0.0f)\n     link_error ();\n@@ -37,6 +43,12 @@ int main()\n   if (logf (1.0f) != 0.0f)\n     link_error ();\n \n+  if (sinf (0.0f) != 0.0f)\n+    link_error ();\n+\n+  if (cosf (0.0f) != 1.0f)\n+    link_error ();\n+\n \n   if (sqrtl (0.0l) != 0.0l)\n     link_error ();\n@@ -50,6 +62,12 @@ int main()\n   if (logl (1.0l) != 0.0l)\n     link_error ();\n \n+  if (sinl (0.0l) != 0.0l)\n+    link_error ();\n+\n+  if (cosl (0.0l) != 1.0l)\n+    link_error ();\n+\n   return 0;\n }\n "}, {"sha": "84c0e154fa09c72f7baaa6920c5e3eb80a20fe6f", "filename": "gcc/testsuite/gcc.dg/builtins-7.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f2ea93564390f4b0ca1b87f9e63ae07197a936/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f2ea93564390f4b0ca1b87f9e63ae07197a936/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-7.c?ref=03f2ea93564390f4b0ca1b87f9e63ae07197a936", "patch": "@@ -0,0 +1,39 @@\n+/* Copyright (C) 2003  Free Software Foundation.\n+\n+   Verify that built-in math function constant folding of constant\n+   arguments is correctly performed by the by the compiler.\n+\n+   Written by Roger Sayle, 30th March 2003.  */\n+\n+/* { dg-do link } */\n+/* { dg-options \"-O2 -ffast-math\" } */\n+\n+extern void link_error(void);\n+\n+void test(double x)\n+{\n+  if (pow (x, 1.0) != x)\n+    link_error ();\n+}\n+\n+void testf(float x)\n+{\n+  if (powf (x, 1.0f) != x)\n+    link_error ();\n+}\n+\n+void testl(long double x)\n+{\n+  if (powl (x, 1.0l) != x)\n+    link_error ();\n+}\n+\n+int main()\n+{\n+  test (2.0);\n+  testf (2.0f);\n+  testl (2.0l);\n+\n+  return 0;\n+}\n+"}, {"sha": "99d1a70d01a2e99fba8f369bc318b6d42e352f56", "filename": "gcc/testsuite/gcc.dg/builtins-8.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f2ea93564390f4b0ca1b87f9e63ae07197a936/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f2ea93564390f4b0ca1b87f9e63ae07197a936/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-8.c?ref=03f2ea93564390f4b0ca1b87f9e63ae07197a936", "patch": "@@ -0,0 +1,34 @@\n+/* Copyright (C) 2003  Free Software Foundation.\n+\n+   Verify that built-in math function constant folding of functions\n+   with one constant argument is correctly performed by the compiler.\n+\n+   Written by Roger Sayle, 30th March 2003.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math\" } */\n+\n+extern void abort(void);\n+\n+void test(double x)\n+{\n+  if (pow(x,-1.0) != 1.0/x)\n+    abort ();\n+\n+  if (pow(x,2.0) != x*x)\n+    abort ();\n+\n+  if (pow(x,-2.0) != 1.0/(x*x))\n+    abort ();\n+\n+  if (pow(x,0.5) != sqrt(x))\n+    abort ();\n+}\n+\n+int main()\n+{\n+  test (1.0);\n+  test (2.0);\n+  return 0;\n+}\n+"}]}