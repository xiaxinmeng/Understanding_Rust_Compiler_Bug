{"sha": "4d3d40782b52309b18aa2ae7f99a82d58044d5ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQzZDQwNzgyYjUyMzA5YjE4YWEyYWU3Zjk5YTgyZDU4MDQ0ZDVhZA==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@TechFak.Uni-Bielefeld.DE", "date": "2008-12-19T14:59:42Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2008-12-19T14:59:42Z"}, "message": "re PR libffi/26048 (libffi doesn't build on Solaris 10/x86 with native assembler)\n\n\tPR libffi/26048\n\t* configure.ac (HAVE_AS_X86_PCREL): New test.\n\t* configure: Regenerate.\n\t* fficonfig.h.in: Regenerate.\n\t* src/x86/sysv.S [!FFI_NO_RAW_API]: Precalculate\n\tRAW_CLOSURE_CIF_OFFSET, RAW_CLOSURE_FUN_OFFSET,\n\tRAW_CLOSURE_USER_DATA_OFFSET for the Solaris 10/x86 assembler.\n\t(.eh_frame): Only use SYMBOL-. iff HAVE_AS_X86_PCREL.\n\t* src/x86/unix64.S (.Lstore_table): Move to .text section.\n\t(.Lload_table): Likewise.\n\t(.eh_frame): Only use SYMBOL-. iff HAVE_AS_X86_PCREL.\n\nFrom-SVN: r142835", "tree": {"sha": "0015f236039dc18cb0d69c465abfae9a5714bac7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0015f236039dc18cb0d69c465abfae9a5714bac7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d3d40782b52309b18aa2ae7f99a82d58044d5ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d3d40782b52309b18aa2ae7f99a82d58044d5ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d3d40782b52309b18aa2ae7f99a82d58044d5ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d3d40782b52309b18aa2ae7f99a82d58044d5ad/comments", "author": null, "committer": null, "parents": [{"sha": "fda2cea18b1db62338a5868bdf5ee2c9509a1752", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fda2cea18b1db62338a5868bdf5ee2c9509a1752", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fda2cea18b1db62338a5868bdf5ee2c9509a1752"}], "stats": {"total": 99, "additions": 89, "deletions": 10}, "files": [{"sha": "52ab411bda7eb811bba1ddbba7d63449a4bfadd1", "filename": "libffi/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d3d40782b52309b18aa2ae7f99a82d58044d5ad/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d3d40782b52309b18aa2ae7f99a82d58044d5ad/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=4d3d40782b52309b18aa2ae7f99a82d58044d5ad", "patch": "@@ -1,3 +1,17 @@\n+2008-12-18  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n+\n+\tPR libffi/26048\n+\t* configure.ac (HAVE_AS_X86_PCREL): New test.\n+\t* configure: Regenerate.\n+\t* fficonfig.h.in: Regenerate.\n+\t* src/x86/sysv.S [!FFI_NO_RAW_API]: Precalculate\n+\tRAW_CLOSURE_CIF_OFFSET, RAW_CLOSURE_FUN_OFFSET,\n+\tRAW_CLOSURE_USER_DATA_OFFSET for the Solaris 10/x86 assembler.\n+\t(.eh_frame): Only use SYMBOL-. iff HAVE_AS_X86_PCREL.\n+\t* src/x86/unix64.S (.Lstore_table): Move to .text section.\n+\t(.Lload_table): Likewise.\n+\t(.eh_frame): Only use SYMBOL-. iff HAVE_AS_X86_PCREL.\n+\n 2008-12-18  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \t* configure: Regenerate."}, {"sha": "c40a859ddd59a691352791d860a3c3b810c02c6b", "filename": "libffi/configure", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d3d40782b52309b18aa2ae7f99a82d58044d5ad/libffi%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d3d40782b52309b18aa2ae7f99a82d58044d5ad/libffi%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fconfigure?ref=4d3d40782b52309b18aa2ae7f99a82d58044d5ad", "patch": "@@ -13263,6 +13263,31 @@ _ACEOF\n     fi\n fi\n \n+if test x$TARGET = xX86 || test x$TARGET = xX86_64; then\n+    echo \"$as_me:$LINENO: checking assembler supports pc related relocs\" >&5\n+echo $ECHO_N \"checking assembler supports pc related relocs... $ECHO_C\" >&6\n+if test \"${libffi_cv_as_x86_pcrel+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+\n+\tlibffi_cv_as_x86_pcrel=yes\n+\techo '.text; foo: nop; .data; .long foo-.; .text' > conftest.s\n+\tif $CC $CFLAGS -c conftest.s 2>&1 | grep -i warning > /dev/null; then\n+\t    libffi_cv_as_x86_pcrel=no\n+\tfi\n+\n+fi\n+echo \"$as_me:$LINENO: result: $libffi_cv_as_x86_pcrel\" >&5\n+echo \"${ECHO_T}$libffi_cv_as_x86_pcrel\" >&6\n+    if test \"x$libffi_cv_as_x86_pcrel\" = xyes; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_AS_X86_PCREL 1\n+_ACEOF\n+\n+    fi\n+fi\n+\n echo \"$as_me:$LINENO: checking whether .eh_frame section should be read-only\" >&5\n echo $ECHO_N \"checking whether .eh_frame section should be read-only... $ECHO_C\" >&6\n if test \"${libffi_cv_ro_eh_frame+set}\" = set; then"}, {"sha": "2dff35c060f137285412af796b9e0d486b8b134e", "filename": "libffi/configure.ac", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d3d40782b52309b18aa2ae7f99a82d58044d5ad/libffi%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d3d40782b52309b18aa2ae7f99a82d58044d5ad/libffi%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fconfigure.ac?ref=4d3d40782b52309b18aa2ae7f99a82d58044d5ad", "patch": "@@ -240,6 +240,21 @@ if test x$TARGET = xSPARC; then\n     fi\n fi\n \n+if test x$TARGET = xX86 || test x$TARGET = xX86_64; then\n+    AC_CACHE_CHECK([assembler supports pc related relocs],\n+\tlibffi_cv_as_x86_pcrel, [\n+\tlibffi_cv_as_x86_pcrel=yes\n+\techo '.text; foo: nop; .data; .long foo-.; .text' > conftest.s\n+\tif $CC $CFLAGS -c conftest.s 2>&1 | grep -i warning > /dev/null; then\n+\t    libffi_cv_as_x86_pcrel=no\n+\tfi\n+\t])\n+    if test \"x$libffi_cv_as_x86_pcrel\" = xyes; then\n+\tAC_DEFINE(HAVE_AS_X86_PCREL, 1,\n+\t\t  [Define if your assembler supports PC relative relocs.])\n+    fi\n+fi\n+\n AC_CACHE_CHECK([whether .eh_frame section should be read-only],\n     libffi_cv_ro_eh_frame, [\n \tlibffi_cv_ro_eh_frame=no"}, {"sha": "90c8990eb1968b34dc7bf60c717511c5af6d5f4b", "filename": "libffi/fficonfig.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d3d40782b52309b18aa2ae7f99a82d58044d5ad/libffi%2Ffficonfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d3d40782b52309b18aa2ae7f99a82d58044d5ad/libffi%2Ffficonfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ffficonfig.h.in?ref=4d3d40782b52309b18aa2ae7f99a82d58044d5ad", "patch": "@@ -37,6 +37,9 @@\n    */\n #undef HAVE_AS_SPARC_UA_PCREL\n \n+/* Define if your assembler supports PC relative relocs. */\n+#undef HAVE_AS_X86_PCREL\n+\n /* Define to 1 if you have the <dlfcn.h> header file. */\n #undef HAVE_DLFCN_H\n "}, {"sha": "04564db9caafdc1a73a3822ef51c7b8daece35f2", "filename": "libffi/src/x86/sysv.S", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d3d40782b52309b18aa2ae7f99a82d58044d5ad/libffi%2Fsrc%2Fx86%2Fsysv.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d3d40782b52309b18aa2ae7f99a82d58044d5ad/libffi%2Fsrc%2Fx86%2Fsysv.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fx86%2Fsysv.S?ref=4d3d40782b52309b18aa2ae7f99a82d58044d5ad", "patch": "@@ -1,5 +1,6 @@\n /* -----------------------------------------------------------------------\n-   sysv.S - Copyright (c) 1996, 1998, 2001, 2002, 2003, 2005  Red Hat, Inc.\n+   sysv.S - Copyright (c) 1996, 1998, 2001, 2002, 2003, 2005, 2008\n+   Red Hat, Inc.\n    \n    X86 Foreign Function Interface \n \n@@ -241,9 +242,20 @@ ffi_closure_SYSV:\n \n #if !FFI_NO_RAW_API\n \n+/* Precalculate for e.g. the Solaris 10/x86 assembler.  */\n+#if FFI_TRAMPOLINE_SIZE == 10\n+#define RAW_CLOSURE_CIF_OFFSET 12\n+#define RAW_CLOSURE_FUN_OFFSET 16\n+#define RAW_CLOSURE_USER_DATA_OFFSET 20\n+#elif FFI_TRAMPOLINE_SIZE == 24\n+#define RAW_CLOSURE_CIF_OFFSET 24\n+#define RAW_CLOSURE_FUN_OFFSET 28\n+#define RAW_CLOSURE_USER_DATA_OFFSET 32\n+#else\n #define RAW_CLOSURE_CIF_OFFSET ((FFI_TRAMPOLINE_SIZE + 3) & ~3)\n #define RAW_CLOSURE_FUN_OFFSET (RAW_CLOSURE_CIF_OFFSET + 4)\n #define RAW_CLOSURE_USER_DATA_OFFSET (RAW_CLOSURE_FUN_OFFSET + 4)\n+#endif\n #define CIF_FLAGS_OFFSET 20\n \n \t.align\t4\n@@ -342,10 +354,12 @@ ffi_closure_raw_SYSV:\n \t.long\t.LEFDE1-.LASFDE1\t/* FDE Length */\n .LASFDE1:\n \t.long\t.LASFDE1-.Lframe1\t/* FDE CIE offset */\n-#ifdef __PIC__\n+#if defined __PIC__ && defined HAVE_AS_X86_PCREL\n \t.long\t.LFB1-.\t/* FDE initial location */\n+#elif defined __PIC__\n+\t.long\t.LFB1@rel\n #else\n-\t.long\t.LFB1\t/* FDE initial location */\n+\t.long\t.LFB1\n #endif\n \t.long\t.LFE1-.LFB1\t/* FDE address range */\n #ifdef __PIC__\n@@ -367,8 +381,10 @@ ffi_closure_raw_SYSV:\n \t.long\t.LEFDE2-.LASFDE2\t/* FDE Length */\n .LASFDE2:\n \t.long\t.LASFDE2-.Lframe1\t/* FDE CIE offset */\n-#ifdef __PIC__\n+#if defined __PIC__ && defined HAVE_AS_X86_PCREL\n \t.long\t.LFB2-.\t/* FDE initial location */\n+#elif defined __PIC__\n+\t.long\t.LFB2@rel\n #else\n \t.long\t.LFB2\n #endif\n@@ -401,8 +417,10 @@ ffi_closure_raw_SYSV:\n \t.long\t.LEFDE3-.LASFDE3\t/* FDE Length */\n .LASFDE3:\n \t.long\t.LASFDE3-.Lframe1\t/* FDE CIE offset */\n-#ifdef __PIC__\n+#if defined __PIC__ && defined HAVE_AS_X86_PCREL\n \t.long\t.LFB3-.\t/* FDE initial location */\n+#elif defined __PIC__\n+\t.long\t.LFB3@rel\n #else\n \t.long\t.LFB3\n #endif"}, {"sha": "ec6030484ea3d7e45f316f40a6026fd1ccea61a9", "filename": "libffi/src/x86/unix64.S", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d3d40782b52309b18aa2ae7f99a82d58044d5ad/libffi%2Fsrc%2Fx86%2Funix64.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d3d40782b52309b18aa2ae7f99a82d58044d5ad/libffi%2Fsrc%2Fx86%2Funix64.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fx86%2Funix64.S?ref=4d3d40782b52309b18aa2ae7f99a82d58044d5ad", "patch": "@@ -1,5 +1,5 @@\n /* -----------------------------------------------------------------------\n-   unix64.S - Copyright (c) 2002  Bo Thorsen <bo@suse.de>\n+   unix64.S - Copyright (c) 2002, 2008  Bo Thorsen <bo@suse.de>\n \n    x86-64 Foreign Function Interface \n \n@@ -87,7 +87,6 @@ ffi_call_unix64:\n \taddq\t%r11, %r10\n \tjmp\t*%r10\n \n-\t.section .rodata\n .Lstore_table:\n \t.long\t.Lst_void-.Lstore_table\t\t/* FFI_TYPE_VOID */\n \t.long\t.Lst_sint32-.Lstore_table\t/* FFI_TYPE_INT */\n@@ -105,7 +104,6 @@ ffi_call_unix64:\n \t.long\t.Lst_struct-.Lstore_table\t/* FFI_TYPE_STRUCT */\n \t.long\t.Lst_int64-.Lstore_table\t/* FFI_TYPE_POINTER */\n \n-\t.text\n \t.align 2\n .Lst_void:\n \tret\n@@ -238,7 +236,6 @@ ffi_closure_unix64:\n \taddq\t%r11, %r10\n \tjmp\t*%r10\n \n-\t.section .rodata\n .Lload_table:\n \t.long\t.Lld_void-.Lload_table\t\t/* FFI_TYPE_VOID */\n \t.long\t.Lld_int32-.Lload_table\t\t/* FFI_TYPE_INT */\n@@ -256,7 +253,6 @@ ffi_closure_unix64:\n \t.long\t.Lld_struct-.Lload_table\t/* FFI_TYPE_STRUCT */\n \t.long\t.Lld_int64-.Lload_table\t\t/* FFI_TYPE_POINTER */\n \n-\t.text\n \t.align 2\n .Lld_void:\n \tret\n@@ -349,7 +345,11 @@ ffi_closure_unix64:\n \t.long\t.LEFDE1-.LASFDE1\t/* FDE Length */\n .LASFDE1:\n \t.long\t.LASFDE1-.Lframe1\t/* FDE CIE offset */\n+#if HAVE_AS_X86_PCREL\n \t.long\t.LUW0-.\t\t\t/* FDE initial location */\n+#else\n+\t.long\t.LUW0@rel\n+#endif\n \t.long\t.LUW4-.LUW0\t\t/* FDE address range */\n \t.uleb128 0x0\t\t\t/* Augmentation size */\n \n@@ -387,7 +387,11 @@ ffi_closure_unix64:\n \t.long\t.LEFDE3-.LASFDE3\t/* FDE Length */\n .LASFDE3:\n \t.long\t.LASFDE3-.Lframe1\t/* FDE CIE offset */\n+#if HAVE_AS_X86_PCREL\n \t.long\t.LUW5-.\t\t\t/* FDE initial location */\n+#else\n+\t.long\t.LUW5@rel\n+#endif\n \t.long\t.LUW9-.LUW5\t\t/* FDE address range */\n \t.uleb128 0x0\t\t\t/* Augmentation size */\n "}]}