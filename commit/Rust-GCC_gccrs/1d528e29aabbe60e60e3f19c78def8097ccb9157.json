{"sha": "1d528e29aabbe60e60e3f19c78def8097ccb9157", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQ1MjhlMjlhYWJiZTYwZTYwZTNmMTljNzhkZWY4MDk3Y2NiOTE1Nw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-06-30T20:01:29Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-06-30T20:01:29Z"}, "message": "call.c (build_over_call): Use __builtin_memcpy for copying CLASS_AS_BASE rather than funny casting.\n\n        * call.c (build_over_call): Use __builtin_memcpy for copying\n        CLASS_AS_BASE rather than funny casting.\n\nFrom-SVN: r83928", "tree": {"sha": "99a87592c9c8006b75f85f591c4bc3f5a84e808f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99a87592c9c8006b75f85f591c4bc3f5a84e808f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d528e29aabbe60e60e3f19c78def8097ccb9157", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d528e29aabbe60e60e3f19c78def8097ccb9157", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d528e29aabbe60e60e3f19c78def8097ccb9157", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d528e29aabbe60e60e3f19c78def8097ccb9157/comments", "author": null, "committer": null, "parents": [{"sha": "9117ccad0c195d26cc27f4ccfede367255c2bc03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9117ccad0c195d26cc27f4ccfede367255c2bc03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9117ccad0c195d26cc27f4ccfede367255c2bc03"}], "stats": {"total": 46, "additions": 24, "deletions": 22}, "files": [{"sha": "b094bac93f0809f21dd0e510a2c855d98196292e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d528e29aabbe60e60e3f19c78def8097ccb9157/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d528e29aabbe60e60e3f19c78def8097ccb9157/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1d528e29aabbe60e60e3f19c78def8097ccb9157", "patch": "@@ -1,3 +1,8 @@\n+2004-06-30  Richard Henderson  <rth@redhat.com>\n+\n+\t* call.c (build_over_call): Use __builtin_memcpy for copying\n+\tCLASS_AS_BASE rather than funny casting.\n+\n 2004-06-30  Richard Henderson  <rth@redhat.com>\n \n \t* init.c (build_new_1): Fill in TYPE_DOMAIN, TYPE_SIZE and"}, {"sha": "99603ea3eaaf8aee530b4c35e2ab9710d8ccab2d", "filename": "gcc/cp/call.c", "status": "modified", "additions": 19, "deletions": 22, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d528e29aabbe60e60e3f19c78def8097ccb9157/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d528e29aabbe60e60e3f19c78def8097ccb9157/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=1d528e29aabbe60e60e3f19c78def8097ccb9157", "patch": "@@ -4795,31 +4795,28 @@ build_over_call (struct z_candidate *cand, int flags)\n       tree type = TREE_TYPE (to);\n       tree as_base = CLASSTYPE_AS_BASE (type);\n \n-      arg = build_indirect_ref (TREE_VALUE (TREE_CHAIN (converted_args)), 0);\n+      arg = TREE_VALUE (TREE_CHAIN (converted_args));\n       if (tree_int_cst_equal (TYPE_SIZE (type), TYPE_SIZE (as_base)))\n-\tval = build (MODIFY_EXPR, TREE_TYPE (to), to, arg);\n+\t{\n+\t  arg = build_indirect_ref (arg, 0);\n+\t  val = build (MODIFY_EXPR, TREE_TYPE (to), to, arg);\n+\t}\n       else\n \t{\n-\t  /* We must only copy the non-tail padding parts. Use\n-\t     CLASSTYPE_AS_BASE for the bitwise copy.  */\n-\t  tree to_ptr, arg_ptr, to_as_base, arg_as_base, base_ptr_type;\n-\t  tree save_to;\n-\n-\t  to_ptr = save_expr (build_unary_op (ADDR_EXPR, to, 0));\n-\t  arg_ptr = build_unary_op (ADDR_EXPR, arg, 0);\n-\n-\t  base_ptr_type = build_pointer_type (as_base);\n-\t  to_as_base = build_nop (base_ptr_type, to_ptr);\n-\t  to_as_base = build_indirect_ref (to_as_base, 0);\n-\t  arg_as_base = build_nop (base_ptr_type, arg_ptr);\n-\t  arg_as_base = build_indirect_ref (arg_as_base, 0);\n-\n-\t  save_to = build_indirect_ref (to_ptr, 0);\n-\n-\t  val = build (MODIFY_EXPR, as_base, to_as_base, arg_as_base);\n-\t  val = convert_to_void (val, NULL);\n-\t  val = build (COMPOUND_EXPR, type, val, save_to);\n-\t  TREE_NO_WARNING (val) = 1;\n+\t  /* We must only copy the non-tail padding parts.\n+\t     Use __builtin_memcpy for the bitwise copy.  */\n+\n+\t  tree args, t;\n+\n+\t  args = tree_cons (NULL, TYPE_SIZE_UNIT (as_base), NULL);\n+\t  args = tree_cons (NULL, arg, args);\n+\t  t = build_unary_op (ADDR_EXPR, to, 0);\n+\t  args = tree_cons (NULL, t, args);\n+\t  t = implicit_built_in_decls[BUILT_IN_MEMCPY];\n+\t  t = build_call (t, args);\n+\n+\t  t = convert (TREE_TYPE (TREE_VALUE (args)), t);\n+\t  val = build_indirect_ref (t, 0);\n \t}\n       \n       return val;"}]}