{"sha": "484df9889535b64885a5fdf136c7637ab2a054e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDg0ZGY5ODg5NTM1YjY0ODg1YTVmZGYxMzZjNzYzN2FiMmEwNTRlOQ==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1997-08-25T19:15:01Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-08-25T19:15:01Z"}, "message": "haifa-sched.c (find_pre_sched_live): Remove #if 0 code.\n\n        * haifa-sched.c (find_pre_sched_live): Remove #if 0 code.\n        (find_post_sched_live): Likewise.\nJust cleaning up.\n\n        * haifa-sched.c (schedule_block): Remove old code to get arguments\n        from hard regs into pseudos early.\nAvoids problems with bogus REG_LOOP_BEGIN notes causing aborts during\nand after register allocation.\n\nFrom-SVN: r14918", "tree": {"sha": "c3f5afcb567f9edc308c214fa41ecfc9f7221f6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3f5afcb567f9edc308c214fa41ecfc9f7221f6d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/484df9889535b64885a5fdf136c7637ab2a054e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/484df9889535b64885a5fdf136c7637ab2a054e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/484df9889535b64885a5fdf136c7637ab2a054e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/484df9889535b64885a5fdf136c7637ab2a054e9/comments", "author": null, "committer": null, "parents": [{"sha": "39dfb55a01f2182839d6537fbfc56361f9d1e008", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39dfb55a01f2182839d6537fbfc56361f9d1e008", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39dfb55a01f2182839d6537fbfc56361f9d1e008"}], "stats": {"total": 72, "additions": 14, "deletions": 58}, "files": [{"sha": "4b9c91f996c94e582d418c62d143cb5122939bb0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/484df9889535b64885a5fdf136c7637ab2a054e9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/484df9889535b64885a5fdf136c7637ab2a054e9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=484df9889535b64885a5fdf136c7637ab2a054e9", "patch": "@@ -1,3 +1,11 @@\n+Mon Aug 25 13:12:24 1997  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* haifa-sched.c (find_pre_sched_live): Remove #if 0 code.\n+\t(find_post_sched_live): Likewise.\n+\n+\t* haifa-sched.c (schedule_block): Remove old code to get arguments\n+\tfrom hard regs into pseudos early.\n+\n Mon Aug 25 08:55:00 1997  Jeffrey A Law  (law@cygnus.com)\n \n \t* version.c: Bump for new snapshot."}, {"sha": "dd9e507adf56a470f382e2802880a49128c7884a", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 6, "deletions": 58, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/484df9889535b64885a5fdf136c7637ab2a054e9/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/484df9889535b64885a5fdf136c7637ab2a054e9/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=484df9889535b64885a5fdf136c7637ab2a054e9", "patch": "@@ -5194,9 +5194,6 @@ find_pre_sched_live (bb)\n \t\t    && ! fixed_regs[j])\n \t\t  {\n \t\t    SET_REGNO_REG_SET (bb_live_regs, j);\n-#if 0\n-\t\t    CLEAR_REGNO_REG_SET (bb_dead_regs, j);\n-#endif\n \t\t  }\n \t    }\n \n@@ -5368,9 +5365,6 @@ find_post_sched_live (bb)\n \t\t&& ! fixed_regs[i])\n \t      {\n \t\tCLEAR_REGNO_REG_SET (bb_live_regs, i);\n-#if 0\n-\t\tSET_REGNO_REG_SET (bb_dead_regs, i);\n-#endif\n \t      }\n \n \t  /* Regs live at the time of a call instruction must not\n@@ -6577,59 +6571,13 @@ schedule_block (bb, rgn, rgn_n_insns)\n   rtx tail;\n   int bb_src;\n \n-  /* At the start of a function, before reload has run, don't delay getting\n-     parameters from hard registers into pseudo registers.  */\n-  if (reload_completed == 0 && b == 0)\n-    {\n-      head = basic_block_head[b];\n-      tail = basic_block_end[b];\n-\n-      while (head != tail\n-\t     && GET_CODE (head) == NOTE\n-\t     && NOTE_LINE_NUMBER (head) != NOTE_INSN_FUNCTION_BEG)\n-\thead = NEXT_INSN (head);\n-\n-      while (head != tail\n-\t     && GET_CODE (head) == INSN\n-\t     && GET_CODE (PATTERN (head)) == SET)\n-\t{\n-\t  rtx link;\n-\t  rtx src = SET_SRC (PATTERN (head));\n-\t  while (GET_CODE (src) == SUBREG\n-\t\t || GET_CODE (src) == SIGN_EXTEND\n-\t\t || GET_CODE (src) == ZERO_EXTEND\n-\t\t || GET_CODE (src) == SIGN_EXTRACT\n-\t\t || GET_CODE (src) == ZERO_EXTRACT)\n-\t    src = XEXP (src, 0);\n-\t  if (GET_CODE (src) != REG\n-\t      || REGNO (src) >= FIRST_PSEUDO_REGISTER)\n-\t    break;\n-\n-\t  for (link = INSN_DEPEND (head); link != 0; link = XEXP (link, 1))\n-\t    INSN_DEP_COUNT (XEXP (link, 0)) -= 1;\n-\n-\t  if (GET_CODE (head) != NOTE)\n-\t    sched_n_insns++;\n+  /* We used to have code to avoid getting parameters moved from hard\n+     argument registers into pseudos.\n \n-\t  head = NEXT_INSN (head);\n-\t}\n-\n-      /* Don't include any notes or labels at the beginning of the\n-         basic block, or notes at the ends of basic blocks.  */\n-      while (head != tail)\n-\t{\n-\t  if (GET_CODE (head) == NOTE)\n-\t    head = NEXT_INSN (head);\n-\t  else if (GET_CODE (tail) == NOTE)\n-\t    tail = PREV_INSN (tail);\n-\t  else if (GET_CODE (head) == CODE_LABEL)\n-\t    head = NEXT_INSN (head);\n-\t  else\n-\t    break;\n-\t}\n-    }\n-  else\n-    get_block_head_tail (bb, &head, &tail);\n+     However, it was removed when it proved to be of marginal benefit\n+     and caused problems because schedule_block and compute_forward_dependences\n+     had different notions of what the \"head\" insn was.  */\n+  get_block_head_tail (bb, &head, &tail);\n \n   next_tail = NEXT_INSN (tail);\n   prev_head = PREV_INSN (head);"}]}