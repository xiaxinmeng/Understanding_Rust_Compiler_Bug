{"sha": "40749db75caff2fed7b7053e0d1868feaa21bcb4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDA3NDlkYjc1Y2FmZjJmZWQ3YjcwNTNlMGQxODY4ZmVhYTIxYmNiNA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2020-10-29T15:05:33Z"}, "committer": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2020-10-29T15:06:26Z"}, "message": "stdbool.h: Update true and false expansions for C2x\n\nC2x has changed the expansions of the true and false macros in\n<stdbool.h> so that they have type _Bool (including in #if conditions,\ni.e. an unsigned type in that context).  Use the new expansions in\nGCC's <stdbool.h> for C2x.\n\nSee bug 82272 for related discussion (but this patch does *not*\nimplement the warning discussed there).\n\nNote that it's possible there may be a further change to make bool,\ntrue and false keywords (there was support in principle for that at\nthe April WG14 meeting).  But currently these expansions of type _Bool\nare what C2x requires and there isn't actually a paper before WG14 at\npresent that would introduce the new keywords.\n\nBootstrapped with no regressions on x86_64-pc-linux-gnu.\n\ngcc/\n2020-10-29  Joseph Myers  <joseph@codesourcery.com>\n\n\t* ginclude/stdbool.h [__STDC_VERSION__ > 201710L] (true, false):\n\tDefine with type _Bool.\n\ngcc/testsuite/\n2020-10-29  Joseph Myers  <joseph@codesourcery.com>\n\n\t* gcc.dg/c11-bool-1.c, gcc.dg/c2x-bool-1.c, gcc.dg/c99-bool-4.c:\n\tNew tests.", "tree": {"sha": "d52db1f98393d6f74dc2edf5198e2f8a5e0b02f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d52db1f98393d6f74dc2edf5198e2f8a5e0b02f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40749db75caff2fed7b7053e0d1868feaa21bcb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40749db75caff2fed7b7053e0d1868feaa21bcb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40749db75caff2fed7b7053e0d1868feaa21bcb4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40749db75caff2fed7b7053e0d1868feaa21bcb4/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c84486bba104399b7e544cb1ba343646d39ea0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c84486bba104399b7e544cb1ba343646d39ea0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c84486bba104399b7e544cb1ba343646d39ea0a"}], "stats": {"total": 151, "additions": 151, "deletions": 0}, "files": [{"sha": "23554223d673703da98fc2fc508beeb07e8dbc9b", "filename": "gcc/ginclude/stdbool.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40749db75caff2fed7b7053e0d1868feaa21bcb4/gcc%2Fginclude%2Fstdbool.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40749db75caff2fed7b7053e0d1868feaa21bcb4/gcc%2Fginclude%2Fstdbool.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fstdbool.h?ref=40749db75caff2fed7b7053e0d1868feaa21bcb4", "patch": "@@ -31,8 +31,13 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #ifndef __cplusplus\n \n #define bool\t_Bool\n+#if defined __STDC_VERSION__ && __STDC_VERSION__ > 201710L\n+#define true\t((_Bool)+1u)\n+#define false\t((_Bool)+0u)\n+#else\n #define true\t1\n #define false\t0\n+#endif\n \n #else /* __cplusplus */\n "}, {"sha": "0412624a70612b43a4248638f86cfe4e14bcf956", "filename": "gcc/testsuite/gcc.dg/c11-bool-1.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40749db75caff2fed7b7053e0d1868feaa21bcb4/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-bool-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40749db75caff2fed7b7053e0d1868feaa21bcb4/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-bool-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-bool-1.c?ref=40749db75caff2fed7b7053e0d1868feaa21bcb4", "patch": "@@ -0,0 +1,50 @@\n+/* Test macro expansions in <stdbool.h> in C11.  */\n+/* { dg-do run } */\n+/* { dg-options \"-std=c11 -pedantic-errors\" } */\n+\n+#include <stdbool.h>\n+\n+#define str(x) xstr(x)\n+#define xstr(x) #x\n+\n+extern void abort (void);\n+extern void exit (int);\n+extern int strcmp (const char *, const char *);\n+\n+#if false - 1 >= 0\n+#error \"false unsigned in #if\"\n+#endif\n+\n+#if false != 0\n+#error \"false not 0 in #if\"\n+#endif\n+\n+#if true - 2 >= 0\n+#error \"true unsigned in #if\"\n+#endif\n+\n+#if true != 1\n+#error \"true not 1 in #if\"\n+#endif\n+\n+int\n+main (void)\n+{\n+  if (strcmp (str (bool), \"_Bool\") != 0)\n+    abort ();\n+  if (_Generic (true, int : 1) != 1)\n+    abort ();\n+  if (true != 1)\n+    abort ();\n+  if (strcmp (str (true), \"1\") != 0)\n+    abort ();\n+  if (_Generic (false, int : 1) != 1)\n+    abort ();\n+  if (false != 0)\n+    abort ();\n+  if (strcmp (str (false), \"0\") != 0)\n+    abort ();\n+  if (strcmp (str (__bool_true_false_are_defined), \"1\") != 0)\n+    abort ();\n+  exit (0);\n+}"}, {"sha": "b64da1f7b43a00be2a76bc509274d822b0ac3316", "filename": "gcc/testsuite/gcc.dg/c2x-bool-1.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40749db75caff2fed7b7053e0d1868feaa21bcb4/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-bool-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40749db75caff2fed7b7053e0d1868feaa21bcb4/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-bool-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-bool-1.c?ref=40749db75caff2fed7b7053e0d1868feaa21bcb4", "patch": "@@ -0,0 +1,50 @@\n+/* Test macro expansions in <stdbool.h> in C2x.  */\n+/* { dg-do run } */\n+/* { dg-options \"-std=c2x -pedantic-errors\" } */\n+\n+#include <stdbool.h>\n+\n+#define str(x) xstr(x)\n+#define xstr(x) #x\n+\n+extern void abort (void);\n+extern void exit (int);\n+extern int strcmp (const char *, const char *);\n+\n+#if false - 1 < 0\n+#error \"false signed in #if\"\n+#endif\n+\n+#if false != 0\n+#error \"false not 0 in #if\"\n+#endif\n+\n+#if true - 2 < 0\n+#error \"true signed in #if\"\n+#endif\n+\n+#if true != 1\n+#error \"true not 1 in #if\"\n+#endif\n+\n+int\n+main (void)\n+{\n+  if (strcmp (str (bool), \"_Bool\") != 0)\n+    abort ();\n+  if (_Generic (true, _Bool : 1) != 1)\n+    abort ();\n+  if (true != 1)\n+    abort ();\n+  if (strcmp (str (true), \"((_Bool)+1u)\") != 0)\n+    abort ();\n+  if (_Generic (false, _Bool : 1) != 1)\n+    abort ();\n+  if (false != 0)\n+    abort ();\n+  if (strcmp (str (false), \"((_Bool)+0u)\") != 0)\n+    abort ();\n+  if (strcmp (str (__bool_true_false_are_defined), \"1\") != 0)\n+    abort ();\n+  exit (0);\n+}"}, {"sha": "5cae18ad0cecebb609d48e3390de1dfe0a684d7a", "filename": "gcc/testsuite/gcc.dg/c99-bool-4.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40749db75caff2fed7b7053e0d1868feaa21bcb4/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-bool-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40749db75caff2fed7b7053e0d1868feaa21bcb4/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-bool-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-bool-4.c?ref=40749db75caff2fed7b7053e0d1868feaa21bcb4", "patch": "@@ -0,0 +1,46 @@\n+/* Test macro expansions in <stdbool.h> in C99.  */\n+/* { dg-do run } */\n+/* { dg-options \"-std=c99 -pedantic-errors\" } */\n+\n+#include <stdbool.h>\n+\n+#define str(x) xstr(x)\n+#define xstr(x) #x\n+\n+extern void abort (void);\n+extern void exit (int);\n+extern int strcmp (const char *, const char *);\n+\n+#if false - 1 >= 0\n+#error \"false unsigned in #if\"\n+#endif\n+\n+#if false != 0\n+#error \"false not 0 in #if\"\n+#endif\n+\n+#if true - 2 >= 0\n+#error \"true unsigned in #if\"\n+#endif\n+\n+#if true != 1\n+#error \"true not 1 in #if\"\n+#endif\n+\n+int\n+main (void)\n+{\n+  if (strcmp (str (bool), \"_Bool\") != 0)\n+    abort ();\n+  if (true != 1)\n+    abort ();\n+  if (strcmp (str (true), \"1\") != 0)\n+    abort ();\n+  if (false != 0)\n+    abort ();\n+  if (strcmp (str (false), \"0\") != 0)\n+    abort ();\n+  if (strcmp (str (__bool_true_false_are_defined), \"1\") != 0)\n+    abort ();\n+  exit (0);\n+}"}]}