{"sha": "0e902d98aee5f7d4f4ac9baf639d2fad0eaa848e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGU5MDJkOThhZWU1ZjdkNGY0YWM5YmFmNjM5ZDJmYWQwZWFhODQ4ZQ==", "commit": {"author": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@users.sourceforge.net", "date": "2002-07-22T14:23:37Z"}, "committer": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@gcc.gnu.org", "date": "2002-07-22T14:23:37Z"}, "message": "PR c++/7347, c++/7348\n\n\tPR c++/7347, c++/7348\n\t* cp-tree.h (tsubst_flags_t): Add tf_parsing.\n\t* decl.c (make_typename_type): Use it.\n\t(make_unbound_class_template): Likewise.\n\t(lookup_name_real): Don't call type_access_control if scope is\n\ttemplate parameter dependent.\n\t* parse.y (template_arg): Call make_unbound_class_template with\n\ttf_parsing set.\n\t(nest_name_specifier): Call make_typename_type with tf_parsing set.\n\t(typename_sub0): Likewise.\n\t(typename_sub1): Likewise.\n\t(instantiate_decl): Push class scope.\n\t* pt.c (regenerate_decl_from_template): Call pushclass and popclass\n\tfor both static variable and member function template.\n\t(instantiate_decl) Call pushclass and popclass when tsubst'ing type\n\tand arguments.\n\t* search.c (type_access_control): Do type access for TEMPLATE_DECL\n\ttoo.\n\n\t* g++.dg/template/access4.C: New test.\n\t* g++.dg/template/access5.C: New test.\n\t* g++.old-deja/g++.pt/memtemp85.C: Fix access problem.\n\t* g++.old-deja/g++.pt/memtemp86.C: Likewise.\n\t* g++.old-deja/g++.pt/ttp58.C: Likewise.\n\t* g++.old-deja/g++.pt/memtemp89.C: Remove XFAIL.\n\nFrom-SVN: r55649", "tree": {"sha": "03d4d4ae02f393f6f7171d9364e1ec68a2ced3fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03d4d4ae02f393f6f7171d9364e1ec68a2ced3fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e902d98aee5f7d4f4ac9baf639d2fad0eaa848e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e902d98aee5f7d4f4ac9baf639d2fad0eaa848e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e902d98aee5f7d4f4ac9baf639d2fad0eaa848e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e902d98aee5f7d4f4ac9baf639d2fad0eaa848e/comments", "author": null, "committer": null, "parents": [{"sha": "0d541696aa1fce80cf0d521be3e1664391526c28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d541696aa1fce80cf0d521be3e1664391526c28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d541696aa1fce80cf0d521be3e1664391526c28"}], "stats": {"total": 153, "additions": 121, "deletions": 32}, "files": [{"sha": "fc5418070fd243e75375b6a9af59b6b7356c2f81", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e902d98aee5f7d4f4ac9baf639d2fad0eaa848e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e902d98aee5f7d4f4ac9baf639d2fad0eaa848e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0e902d98aee5f7d4f4ac9baf639d2fad0eaa848e", "patch": "@@ -1,3 +1,24 @@\n+2002-07-22  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n+\n+\tPR c++/7347, c++/7348\n+\t* cp-tree.h (tsubst_flags_t): Add tf_parsing.\n+\t* decl.c (make_typename_type): Use it.\n+\t(make_unbound_class_template): Likewise.\n+\t(lookup_name_real): Don't call type_access_control if scope is\n+\ttemplate parameter dependent.\n+\t* parse.y (template_arg): Call make_unbound_class_template with\n+\ttf_parsing set.\n+\t(nest_name_specifier): Call make_typename_type with tf_parsing set.\n+\t(typename_sub0): Likewise.\n+\t(typename_sub1): Likewise.\n+\t(instantiate_decl): Push class scope.\n+\t* pt.c (regenerate_decl_from_template): Call pushclass and popclass\n+\tfor both static variable and member function template.\n+\t(instantiate_decl) Call pushclass and popclass when tsubst'ing type\n+\tand arguments.\n+\t* search.c (type_access_control): Do type access for TEMPLATE_DECL\n+\ttoo.\n+\n 2002-07-20  Roger Sayle  <roger@eyesopen.com>\n \n \t* decl2.c (cxx_decode_option): Simplify -fhandle-exceptions"}, {"sha": "0f4bf9081cf3db86b110887d85ac9512eadc071c", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e902d98aee5f7d4f4ac9baf639d2fad0eaa848e/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e902d98aee5f7d4f4ac9baf639d2fad0eaa848e/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=0e902d98aee5f7d4f4ac9baf639d2fad0eaa848e", "patch": "@@ -3187,8 +3187,10 @@ typedef enum tsubst_flags_t {\n   tf_ignore_bad_quals = 1 << 3, /* ignore bad cvr qualifiers */\n   tf_keep_type_decl = 1 << 4,\t/* retain typedef type decls\n \t\t\t\t   (make_typename_type use) */\n-  tf_ptrmem_ok = 1 << 5      /* pointers to member ok (internal\n+  tf_ptrmem_ok = 1 << 5,     /* pointers to member ok (internal\n \t\t\t\tinstantiate_type use) */\n+  tf_parsing = 1 << 6\t     /* called from parser\n+\t\t\t\t(make_typename_type use) */\n } tsubst_flags_t;\n \n /* The kind of checking we can do looking in a class hierarchy. */"}, {"sha": "e4897953e3e9effe5a0edc74b7758a8be961754d", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e902d98aee5f7d4f4ac9baf639d2fad0eaa848e/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e902d98aee5f7d4f4ac9baf639d2fad0eaa848e/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=0e902d98aee5f7d4f4ac9baf639d2fad0eaa848e", "patch": "@@ -5659,8 +5659,10 @@ make_typename_type (context, name, complain)\n \t      return error_mark_node;\n \t    }\n \n-\t  if (!enforce_access (context, tmpl))\n-\t    return error_mark_node;\n+\t  if (complain & tf_parsing)\n+\t    type_access_control (context, tmpl);\n+\t  else\n+\t    enforce_access (context, tmpl);\n \n \t  return lookup_template_class (tmpl,\n \t\t\t\t\tTREE_OPERAND (fullname, 1),\n@@ -5682,8 +5684,10 @@ make_typename_type (context, name, complain)\n \t  t = lookup_field (context, name, 0, 1);\n \t  if (t)\n \t    {\n-\t      if (!enforce_access (context, t))\n-\t\treturn error_mark_node;\n+\t      if (complain & tf_parsing)\n+\t\ttype_access_control (context, t);\n+\t      else\n+\t\tenforce_access (context, t);\n \n \t      if (DECL_ARTIFICIAL (t) || !(complain & tf_keep_type_decl))\n \t\tt = TREE_TYPE (t);\n@@ -5712,7 +5716,6 @@ make_typename_type (context, name, complain)\n       return error_mark_node;\n     }\n \n-\n   return build_typename_type (context, name, fullname,  NULL_TREE);\n }\n \n@@ -5752,8 +5755,10 @@ make_unbound_class_template (context, name, complain)\n \t  return error_mark_node;\n \t}\n       \n-      if (!enforce_access (context, tmpl))\n-\treturn error_mark_node;\n+      if (complain & tf_parsing)\n+\ttype_access_control (context, tmpl);\n+      else\n+\tenforce_access (context, tmpl);\n \n       return tmpl;\n     }\n@@ -6078,7 +6083,8 @@ lookup_name_real (name, prefer_type, nonclass, namespaces_only)\n \t  else\n \t    {\n \t      val = lookup_member (type, name, 0, prefer_type);\n-\t      type_access_control (type, val);\n+\t      if (!uses_template_parms (type))\n+\t\ttype_access_control (type, val);\n \n \t      /* Restore the containing TYPENAME_TYPE if we looked\n \t\t through it before.  */"}, {"sha": "94314e5564b85649ffc1e9f3f816722c0690f677", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e902d98aee5f7d4f4ac9baf639d2fad0eaa848e/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e902d98aee5f7d4f4ac9baf639d2fad0eaa848e/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=0e902d98aee5f7d4f4ac9baf639d2fad0eaa848e", "patch": "@@ -1159,7 +1159,7 @@ template_arg:\n \t\t      $$ = error_mark_node;\n \t\t    }\n \t\t  else\n-\t\t    $$ = make_unbound_class_template ($1, $3, 1);\n+\t\t    $$ = make_unbound_class_template ($1, $3, tf_error | tf_parsing);\n \t\t}\n \t;\n \n@@ -3071,14 +3071,14 @@ nested_name_specifier:\n \t\t{ $$ = $2; }\n \t| nested_name_specifier TEMPLATE explicit_template_type SCOPE\n                 { got_scope = $$\n-\t\t    = make_typename_type ($1, $3, tf_error); }\n+\t\t    = make_typename_type ($1, $3, tf_error | tf_parsing); }\n \t/* Error handling per Core 125.  */\n \t| nested_name_specifier IDENTIFIER SCOPE\n                 { got_scope = $$\n-\t\t    = make_typename_type ($1, $2, tf_error); }\n+\t\t    = make_typename_type ($1, $2, tf_error | tf_parsing); }\n \t| nested_name_specifier PTYPENAME SCOPE\n                 { got_scope = $$\n-\t\t    = make_typename_type ($1, $2, tf_error); }\n+\t\t    = make_typename_type ($1, $2, tf_error | tf_parsing); }\n \t;\n \n /* Why the @#$%^& do type_name and notype_identifier need to be expanded\n@@ -3120,7 +3120,7 @@ typename_sub0:\n \t  typename_sub1 identifier %prec EMPTY\n \t\t{\n \t\t  if (TYPE_P ($1))\n-\t\t    $$ = make_typename_type ($1, $2, tf_error);\n+\t\t    $$ = make_typename_type ($1, $2, tf_error | tf_parsing);\n \t\t  else if (TREE_CODE ($2) == IDENTIFIER_NODE)\n \t\t    error (\"`%T' is not a class or namespace\", $2);\n \t\t  else\n@@ -3133,9 +3133,9 @@ typename_sub0:\n \t| typename_sub1 template_type %prec EMPTY\n \t\t{ $$ = TREE_TYPE ($2); }\n \t| typename_sub1 explicit_template_type %prec EMPTY\n-                { $$ = make_typename_type ($1, $2, tf_error); }\n+                { $$ = make_typename_type ($1, $2, tf_error | tf_parsing); }\n \t| typename_sub1 TEMPLATE explicit_template_type %prec EMPTY\n-                { $$ = make_typename_type ($1, $3, tf_error); }\n+                { $$ = make_typename_type ($1, $3, tf_error | tf_parsing); }\n \t;\n \n typename_sub1:\n@@ -3149,7 +3149,7 @@ typename_sub1:\n \t| typename_sub1 typename_sub2\n \t\t{\n \t\t  if (TYPE_P ($1))\n-\t\t    $$ = make_typename_type ($1, $2, tf_error);\n+\t\t    $$ = make_typename_type ($1, $2, tf_error | tf_parsing);\n \t\t  else if (TREE_CODE ($2) == IDENTIFIER_NODE)\n \t\t    error (\"`%T' is not a class or namespace\", $2);\n \t\t  else\n@@ -3161,10 +3161,10 @@ typename_sub1:\n \t\t}\n \t| typename_sub1 explicit_template_type SCOPE\n                 { got_scope = $$\n-\t\t    = make_typename_type ($1, $2, tf_error); }\n+\t\t    = make_typename_type ($1, $2, tf_error | tf_parsing); }\n \t| typename_sub1 TEMPLATE explicit_template_type SCOPE\n                 { got_scope = $$\n-\t\t    = make_typename_type ($1, $3, tf_error); }\n+\t\t    = make_typename_type ($1, $3, tf_error | tf_parsing); }\n \t;\n \n /* This needs to return a TYPE_DECL for simple names so that we don't"}, {"sha": "52554a9dcbcf21eaf779a5a9a0281c4fd3e14011", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e902d98aee5f7d4f4ac9baf639d2fad0eaa848e/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e902d98aee5f7d4f4ac9baf639d2fad0eaa848e/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=0e902d98aee5f7d4f4ac9baf639d2fad0eaa848e", "patch": "@@ -9844,10 +9844,10 @@ regenerate_decl_from_template (decl, tmpl)\n      register_specialization for it.  */\n   my_friendly_assert (unregistered, 0);\n \n-  if (TREE_CODE (decl) == VAR_DECL)\n+  if (DECL_CLASS_SCOPE_P (decl))\n     /* Make sure that we can see identifiers, and compute access\n        correctly, for the class members used in the declaration of\n-       this static variable.  */\n+       this static variable or function.  */\n     pushclass (DECL_CONTEXT (decl), 2);\n \n   /* Do the substitution to get the new declaration.  */\n@@ -9859,8 +9859,6 @@ regenerate_decl_from_template (decl, tmpl)\n       DECL_INITIAL (new_decl) = \n \ttsubst_expr (DECL_INITIAL (code_pattern), args, \n \t\t     tf_error, DECL_TI_TEMPLATE (decl));\n-      /* Pop the class context we pushed above.  */\n-      popclass ();\n     }\n   else if (TREE_CODE (decl) == FUNCTION_DECL)\n     {\n@@ -9871,6 +9869,10 @@ regenerate_decl_from_template (decl, tmpl)\n       DECL_INITIAL (decl) = NULL_TREE;\n     }\n \n+  /* Pop the class context we pushed above.  */\n+  if (DECL_CLASS_SCOPE_P (decl))\n+    popclass ();\n+\n   /* The immediate parent of the new template is still whatever it was\n      before, even though tsubst sets DECL_TI_TEMPLATE up as the most\n      general template.  We also reset the DECL_ASSEMBLER_NAME since\n@@ -10052,6 +10054,11 @@ instantiate_decl (d, defer_ok)\n       tree gen = DECL_TEMPLATE_RESULT (gen_tmpl);\n       tree type = TREE_TYPE (gen);\n \n+      /* Make sure that we can see identifiers, and compute access\n+\t correctly.  */\n+      if (DECL_CLASS_SCOPE_P (d))\n+\tpushclass (DECL_CONTEXT (d), 1);\n+\n       if (TREE_CODE (gen) == FUNCTION_DECL)\n \t{\n \t  tsubst (DECL_ARGUMENTS (gen), args, tf_error | tf_warning, d);\n@@ -10064,6 +10071,9 @@ instantiate_decl (d, defer_ok)\n \t  type = TREE_TYPE (type);\n \t}\n       tsubst (type, args, tf_error | tf_warning, d);\n+\n+      if (DECL_CLASS_SCOPE_P (d))\n+\tpopclass ();\n     }\n   \n   if (TREE_CODE (d) == VAR_DECL && DECL_INITIALIZED_IN_CLASS_P (d)"}, {"sha": "95d5dde8cf095d1255c476d0e037fac2c08c0a5d", "filename": "gcc/cp/search.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e902d98aee5f7d4f4ac9baf639d2fad0eaa848e/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e902d98aee5f7d4f4ac9baf639d2fad0eaa848e/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=0e902d98aee5f7d4f4ac9baf639d2fad0eaa848e", "patch": "@@ -971,8 +971,8 @@ friend_accessible_p (scope, decl, binfo)\n   return 0;\n }\n \n-/* Perform access control on TYPE_DECL VAL, which was looked up in TYPE.\n-   This is fairly complex, so here's the design:\n+/* Perform access control on TYPE_DECL or TEMPLATE_DECL VAL, which was\n+   looked up in TYPE.  This is fairly complex, so here's the design:\n \n    The lang_extdef nonterminal sets type_lookups to NULL_TREE before we\n      start to process a top-level declaration.\n@@ -995,7 +995,8 @@ void\n type_access_control (type, val)\n      tree type, val;\n {\n-  if (val == NULL_TREE || TREE_CODE (val) != TYPE_DECL\n+  if (val == NULL_TREE\n+      || (TREE_CODE (val) != TEMPLATE_DECL && TREE_CODE (val) != TYPE_DECL)\n       || ! DECL_CLASS_SCOPE_P (val))\n     return;\n "}, {"sha": "41b879c854ce502c46071c1eee4b510ae5f56190", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e902d98aee5f7d4f4ac9baf639d2fad0eaa848e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e902d98aee5f7d4f4ac9baf639d2fad0eaa848e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0e902d98aee5f7d4f4ac9baf639d2fad0eaa848e", "patch": "@@ -1,3 +1,13 @@\n+2002-07-22  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n+\n+\tPR c++/7347, c++/7348\n+\t* g++.dg/template/access4.C: New test.\n+\t* g++.dg/template/access5.C: New test.\n+\t* g++.old-deja/g++.pt/memtemp85.C: Fix access problem.\n+\t* g++.old-deja/g++.pt/memtemp86.C: Likewise.\n+\t* g++.old-deja/g++.pt/ttp58.C: Likewise.\n+\t* g++.old-deja/g++.pt/memtemp89.C: Remove XFAIL.\n+\n 2002-07-22  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.dg/gnu89-init-2.c: New test."}, {"sha": "9451ecc22bef3db43e60f3c1076076d37ff1e9cd", "filename": "gcc/testsuite/g++.dg/template/access4.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e902d98aee5f7d4f4ac9baf639d2fad0eaa848e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faccess4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e902d98aee5f7d4f4ac9baf639d2fad0eaa848e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faccess4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faccess4.C?ref=0e902d98aee5f7d4f4ac9baf639d2fad0eaa848e", "patch": "@@ -0,0 +1,18 @@\n+// { dg-do compile }\n+// Origin: Wolfgang Bangerth <wolfgang.bangerth@iwr.uni-heidelberg.de>\n+\n+// PR c++/7347\n+// Access control for typename during instantiation\n+\n+template <int dim> class Base {\n+  protected:\n+    typedef int T;\n+};\n+\n+template <int dim> class D : public Base<dim> {\n+  public:\n+    typedef typename Base<dim>::T T1;\n+    D (T1 t);\n+};\n+\n+D<2> d(1);"}, {"sha": "a9cb8a5075d89b672539d176a6c87eb90427c496", "filename": "gcc/testsuite/g++.dg/template/access5.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e902d98aee5f7d4f4ac9baf639d2fad0eaa848e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faccess5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e902d98aee5f7d4f4ac9baf639d2fad0eaa848e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faccess5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Faccess5.C?ref=0e902d98aee5f7d4f4ac9baf639d2fad0eaa848e", "patch": "@@ -0,0 +1,21 @@\n+// { dg-do compile }\n+// Origin: Wolfgang Bangerth <wolfgang.bangerth@iwr.uni-heidelberg.de>\n+\n+// PR c++/7348\n+// Access control for typename in function return type\n+\n+class Outer {\n+    template <int dim> struct Inner {\n+        typedef int T;\n+        T foo ();\n+    };\n+  public:\n+    Outer();\n+};\n+\n+template <int dim>\n+typename Outer::Inner<dim>::T  Outer::Inner<dim>::foo () {\n+  return 1;\n+};\n+\n+template Outer::Inner<2>;"}, {"sha": "ab9b9f610a8cf6daa3a948134ed23be919d26471", "filename": "gcc/testsuite/g++.old-deja/g++.pt/memtemp85.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e902d98aee5f7d4f4ac9baf639d2fad0eaa848e/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fmemtemp85.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e902d98aee5f7d4f4ac9baf639d2fad0eaa848e/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fmemtemp85.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fmemtemp85.C?ref=0e902d98aee5f7d4f4ac9baf639d2fad0eaa848e", "patch": "@@ -4,7 +4,7 @@\n // by Paul Burchard <burchard@pobox.com>, Level Set Systems, Inc.\n // Copyright (C) 1999 Free Software Foundation\n \n-class Q {\n+struct Q {\n \ttemplate<class>\n \tclass X {\n \t};"}, {"sha": "fe06dae5b4026c2dbad831887f5f092f8fb126e8", "filename": "gcc/testsuite/g++.old-deja/g++.pt/memtemp86.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e902d98aee5f7d4f4ac9baf639d2fad0eaa848e/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fmemtemp86.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e902d98aee5f7d4f4ac9baf639d2fad0eaa848e/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fmemtemp86.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fmemtemp86.C?ref=0e902d98aee5f7d4f4ac9baf639d2fad0eaa848e", "patch": "@@ -4,7 +4,7 @@\n // by Paul Burchard <burchard@pobox.com>, Level Set Systems, Inc.\n // Copyright (C) 1999 Free Software Foundation\n \n-class Q {\n+struct Q {\n \ttemplate<class>\n \tclass X {\n \t};"}, {"sha": "8564221cfea5d9b28f023a1d354a2d2ea2a8c98d", "filename": "gcc/testsuite/g++.old-deja/g++.pt/memtemp89.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e902d98aee5f7d4f4ac9baf639d2fad0eaa848e/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fmemtemp89.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e902d98aee5f7d4f4ac9baf639d2fad0eaa848e/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fmemtemp89.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fmemtemp89.C?ref=0e902d98aee5f7d4f4ac9baf639d2fad0eaa848e", "patch": "@@ -5,11 +5,11 @@\n \n class Q {\n \ttemplate<class T>\n-\tclass X {\n+\tclass X {\t\t// ERROR - Q::X private\n \t};\n };\n template<template<class> class XX>\n class Y {\n-\tXX<int> x_;\t\t// ERROR - Q::X inaccessible XFAIL *-*-*\n+\tXX<int> x_;\n };\n-Y<Q::X> y;\t\t\t// ERROR - instantiated from here XFAIL *-*-*\n+Y<Q::X> y;\t\t\t// ERROR - instantiated from here"}, {"sha": "729996f1fea4ed5cb9aadb41c24252c1d41bbade", "filename": "gcc/testsuite/g++.old-deja/g++.pt/ttp58.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e902d98aee5f7d4f4ac9baf639d2fad0eaa848e/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fttp58.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e902d98aee5f7d4f4ac9baf639d2fad0eaa848e/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fttp58.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fttp58.C?ref=0e902d98aee5f7d4f4ac9baf639d2fad0eaa848e", "patch": "@@ -15,7 +15,7 @@ struct Z\n   const static int value_ = false;\n };\n \n-class Outer\n+struct Outer\n {\n   template <class T>\n   struct A : "}]}