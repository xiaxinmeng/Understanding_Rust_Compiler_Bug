{"sha": "e7b9b18e4ac2c20a2458270889d1b5385d158808", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTdiOWIxOGU0YWMyYzIwYTI0NTgyNzA4ODlkMWI1Mzg1ZDE1ODgwOA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1999-08-09T08:52:48Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-08-09T08:52:48Z"}, "message": "print-tree.c (print_node): Print base for OFFSET_TYPEs.\n\n\t* print-tree.c (print_node): Print base for OFFSET_TYPEs.\n\n\t* except.c (expand_eh_region_start_for_decl): Always start a new block.\n\t* stmt.c (is_eh_region): Make sure current_function is present, too.\n\nFrom-SVN: r28621", "tree": {"sha": "fb0ee7af44f5b1bdf92221730645ce1dbccf3736", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb0ee7af44f5b1bdf92221730645ce1dbccf3736"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7b9b18e4ac2c20a2458270889d1b5385d158808", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7b9b18e4ac2c20a2458270889d1b5385d158808", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7b9b18e4ac2c20a2458270889d1b5385d158808", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7b9b18e4ac2c20a2458270889d1b5385d158808/comments", "author": null, "committer": null, "parents": [{"sha": "a124a0ca97ee4074285f8f01973f02767094be79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a124a0ca97ee4074285f8f01973f02767094be79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a124a0ca97ee4074285f8f01973f02767094be79"}], "stats": {"total": 47, "additions": 27, "deletions": 20}, "files": [{"sha": "19cb0269b538b7d9875afe43ab4efbd60f10ef2f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7b9b18e4ac2c20a2458270889d1b5385d158808/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7b9b18e4ac2c20a2458270889d1b5385d158808/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e7b9b18e4ac2c20a2458270889d1b5385d158808", "patch": "@@ -1,3 +1,10 @@\n+Mon Aug  9 01:52:24 1999  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* print-tree.c (print_node): Print base for OFFSET_TYPEs.\n+\n+\t* except.c (expand_eh_region_start_for_decl): Always start a new block.\n+\t* stmt.c (is_eh_region): Make sure current_function is present, too.\n+\n Mon Aug  9 01:15:24 1999  Jeffrey A Law  (law@cygnus.com)\n \n \t* pa.h (HARD_REGNO_MODE_OK): Correctly handle FPregs, even when"}, {"sha": "40e912f9767d0ffb6185a0c1babc9d2cfb76122f", "filename": "gcc/except.c", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7b9b18e4ac2c20a2458270889d1b5385d158808/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7b9b18e4ac2c20a2458270889d1b5385d158808/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=e7b9b18e4ac2c20a2458270889d1b5385d158808", "patch": "@@ -1,5 +1,5 @@\n /* Implements exception handling.\n-   Copyright (C) 1989, 92-97, 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1989, 1992-1999 Free Software Foundation, Inc.\n    Contributed by Mike Stump <mrs@cygnus.com>.\n \n This file is part of GNU CC.\n@@ -1400,23 +1400,21 @@ expand_eh_region_start_for_decl (decl)\n   if (! doing_eh (0))\n     return;\n \n-  if (exceptions_via_longjmp)\n-    {\n-      /* We need a new block to record the start and end of the\n-\t dynamic handler chain.  We could always do this, but we\n-\t really want to permit jumping into such a block, and we want\n-\t to avoid any errors or performance impact in the SJ EH code\n-\t for now.  */\n-      expand_start_bindings (0);\n+  /* We need a new block to record the start and end of the\n+     dynamic handler chain.  We also want to prevent jumping into\n+     a try block.  */\n+  expand_start_bindings (0);\n \n-      /* But we don't need or want a new temporary level.  */\n-      pop_temp_slots ();\n+  /* But we don't need or want a new temporary level.  */\n+  pop_temp_slots ();\n \n-      /* Mark this block as created by expand_eh_region_start.  This\n-\t is so that we can pop the block with expand_end_bindings\n-\t automatically.  */\n-      mark_block_as_eh_region ();\n+  /* Mark this block as created by expand_eh_region_start.  This\n+     is so that we can pop the block with expand_end_bindings\n+     automatically.  */\n+  mark_block_as_eh_region ();\n \n+  if (exceptions_via_longjmp)\n+    {\n       /* Arrange for returns and gotos to pop the entry we make on the\n \t dynamic handler stack.  */\n       expand_dhc_cleanup (decl);\n@@ -1489,8 +1487,7 @@ expand_eh_region_end (handler)\n \n   enqueue_eh_entry (&ehqueue, entry);\n \n-  /* If we have already started ending the bindings, don't recurse.\n-     This only happens when exceptions_via_longjmp is true.  */\n+  /* If we have already started ending the bindings, don't recurse.  */\n   if (is_eh_region ())\n     {\n       /* Because we don't need or want a new temporary level and\n@@ -1501,7 +1498,6 @@ expand_eh_region_end (handler)\n \n       mark_block_as_not_eh_region ();\n \n-      /* Maybe do this to prevent jumping in and so on...  */\n       expand_end_bindings (NULL_TREE, 0, 0);\n     }\n }"}, {"sha": "82e648dfd3eed47dced9b940479e4089a59dd1d6", "filename": "gcc/print-tree.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7b9b18e4ac2c20a2458270889d1b5385d158808/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7b9b18e4ac2c20a2458270889d1b5385d158808/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=e7b9b18e4ac2c20a2458270889d1b5385d158808", "patch": "@@ -1,5 +1,5 @@\n /* Prints out tree in human readable form - GNU C-compiler\n-   Copyright (C) 1990, 91, 93-97, 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1990, 91, 93-98, 1999 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -514,6 +514,9 @@ print_node (file, prefix, node, indent)\n \t    print_node_brief (file, \"method basetype\", TYPE_METHOD_BASETYPE (node), indent + 4);\n \t  print_node (file, \"arg-types\", TYPE_ARG_TYPES (node), indent + 4);\n \t}\n+      else if (TREE_CODE (node) == OFFSET_TYPE)\n+\tprint_node_brief (file, \"basetype\", TYPE_OFFSET_BASETYPE (node),\n+\t\t\t  indent + 4);\n       if (TYPE_CONTEXT (node))\n \tprint_node_brief (file, \"context\", TYPE_CONTEXT (node), indent + 4);\n "}, {"sha": "12c5b5b59e691beb613b66347840e2064821d58e", "filename": "gcc/stmt.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7b9b18e4ac2c20a2458270889d1b5385d158808/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7b9b18e4ac2c20a2458270889d1b5385d158808/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=e7b9b18e4ac2c20a2458270889d1b5385d158808", "patch": "@@ -3124,7 +3124,8 @@ mark_block_as_not_eh_region ()\n int\n is_eh_region ()\n {\n-  return block_stack && block_stack->data.block.exception_region;\n+  return (current_function && block_stack\n+\t  && block_stack->data.block.exception_region);\n }\n \n /* Given a pointer to a BLOCK node, save a pointer to the most recently"}]}