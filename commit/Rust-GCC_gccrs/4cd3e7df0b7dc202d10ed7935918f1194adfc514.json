{"sha": "4cd3e7df0b7dc202d10ed7935918f1194adfc514", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGNkM2U3ZGYwYjdkYzIwMmQxMGVkNzkzNTkxOGYxMTk0YWRmYzUxNA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-12-21T19:58:36Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-12-21T19:58:36Z"}, "message": "re PR c++/86524 (std::less with pointer arguments not usable in static_assert in constexpr function)\n\n\tPR c++/86524\n\tPR c++/88446\n\t* cp-tree.h (cp_fold_maybe_rvalue, cp_fold_rvalue): Declare.\n\t(fold_non_dependent_expr): Add manifestly_const_eval argument.\n\t* constexpr.c (cxx_eval_builtin_function_call): Evaluate\n\t__builtin_constant_p if ctx->manifestly_const_eval even in constexpr\n\tfunctions.  Don't reuse dummy{1,2} vars between different arguments.\n\tUse cp_fold_rvalue instead of cp_fully_fold.  Fix comment typo.\n\t(fold_non_dependent_expr): Add manifestly_const_eval argument, pass\n\tit through to cxx_eval_outermost_constant_expr and\n\tmaybe_constant_value.\n\t* cp-gimplify.c (cp_fold_maybe_rvalue, cp_fold_rvalue): No longer\n\tstatic.\n\t* semantics.c (finish_static_assert): Call fold_non_dependent_expr\n\twith true as manifestly_const_eval.\n\n\t* g++.dg/cpp1y/constexpr-86524.C: New test.\n\t* g++.dg/cpp2a/is-constant-evaluated4.C: New test.\n\t* g++.dg/cpp2a/is-constant-evaluated5.C: New test.\n\t* g++.dg/cpp2a/is-constant-evaluated6.C: New test.\n\nFrom-SVN: r267341", "tree": {"sha": "ed1257ff8ce1315fa49456373bd5eb9b09f61635", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed1257ff8ce1315fa49456373bd5eb9b09f61635"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4cd3e7df0b7dc202d10ed7935918f1194adfc514", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cd3e7df0b7dc202d10ed7935918f1194adfc514", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cd3e7df0b7dc202d10ed7935918f1194adfc514", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cd3e7df0b7dc202d10ed7935918f1194adfc514/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dca00617224cd24ba52555266d9d25f95fcb3fc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dca00617224cd24ba52555266d9d25f95fcb3fc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dca00617224cd24ba52555266d9d25f95fcb3fc4"}], "stats": {"total": 192, "additions": 179, "deletions": 13}, "files": [{"sha": "2201a472d53e40ed32f25a3c5f13820ebb769e67", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cd3e7df0b7dc202d10ed7935918f1194adfc514/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cd3e7df0b7dc202d10ed7935918f1194adfc514/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4cd3e7df0b7dc202d10ed7935918f1194adfc514", "patch": "@@ -1,3 +1,21 @@\n+2018-12-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/86524\n+\tPR c++/88446\n+\t* cp-tree.h (cp_fold_maybe_rvalue, cp_fold_rvalue): Declare.\n+\t(fold_non_dependent_expr): Add manifestly_const_eval argument.\n+\t* constexpr.c (cxx_eval_builtin_function_call): Evaluate\n+\t__builtin_constant_p if ctx->manifestly_const_eval even in constexpr\n+\tfunctions.  Don't reuse dummy{1,2} vars between different arguments.\n+\tUse cp_fold_rvalue instead of cp_fully_fold.  Fix comment typo.\n+\t(fold_non_dependent_expr): Add manifestly_const_eval argument, pass\n+\tit through to cxx_eval_outermost_constant_expr and\n+\tmaybe_constant_value.\n+\t* cp-gimplify.c (cp_fold_maybe_rvalue, cp_fold_rvalue): No longer\n+\tstatic.\n+\t* semantics.c (finish_static_assert): Call fold_non_dependent_expr\n+\twith true as manifestly_const_eval.\n+\n 2018-12-20  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/88196 - ICE with class non-type template parameter."}, {"sha": "cea414d33defb514b071caa9e8c1031be75b10e4", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cd3e7df0b7dc202d10ed7935918f1194adfc514/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cd3e7df0b7dc202d10ed7935918f1194adfc514/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=4cd3e7df0b7dc202d10ed7935918f1194adfc514", "patch": "@@ -1197,7 +1197,7 @@ cxx_eval_builtin_function_call (const constexpr_ctx *ctx, tree t, tree fun,\n   /* If we aren't requiring a constant expression, defer __builtin_constant_p\n      in a constexpr function until we have values for the parameters.  */\n   if (bi_const_p\n-      && ctx->quiet\n+      && !ctx->manifestly_const_eval\n       && current_function_decl\n       && DECL_DECLARED_CONSTEXPR_P (current_function_decl))\n     {\n@@ -1222,7 +1222,6 @@ cxx_eval_builtin_function_call (const constexpr_ctx *ctx, tree t, tree fun,\n      return constant false for a non-constant argument.  */\n   constexpr_ctx new_ctx = *ctx;\n   new_ctx.quiet = true;\n-  bool dummy1 = false, dummy2 = false;\n   for (i = 0; i < nargs; ++i)\n     {\n       args[i] = CALL_EXPR_ARG (t, i);\n@@ -1231,12 +1230,16 @@ cxx_eval_builtin_function_call (const constexpr_ctx *ctx, tree t, tree fun,\n \t of the builtin, verify it here.  */\n       if (!builtin_valid_in_constant_expr_p (fun)\n \t  || potential_constant_expression (args[i]))\n-\targs[i] = cxx_eval_constant_expression (&new_ctx, args[i], false,\n-\t\t\t\t\t\t&dummy1, &dummy2);\n+\t{\n+\t  bool dummy1 = false, dummy2 = false;\n+\t  args[i] = cxx_eval_constant_expression (&new_ctx, args[i], false,\n+\t\t\t\t\t\t  &dummy1, &dummy2);\n+\t}\n+\n       if (bi_const_p)\n-\t/* For __built_in_constant_p, fold all expressions with constant values\n+\t/* For __builtin_constant_p, fold all expressions with constant values\n \t   even if they aren't C++ constant-expressions.  */\n-\targs[i] = cp_fully_fold (args[i]);\n+\targs[i] = cp_fold_rvalue (args[i]);\n     }\n \n   bool save_ffbcp = force_folding_builtin_constant_p;\n@@ -5340,6 +5343,7 @@ clear_cv_and_fold_caches (void)\n    (t, complain) followed by maybe_constant_value but is more efficient,\n    because it calls instantiation_dependent_expression_p and\n    potential_constant_expression at most once.\n+   The manifestly_const_eval argument is passed to maybe_constant_value.\n \n    Callers should generally pass their active complain, or if they are in a\n    non-template, diagnosing context, they can use the default of\n@@ -5350,7 +5354,8 @@ clear_cv_and_fold_caches (void)\n \n tree\n fold_non_dependent_expr (tree t,\n-\t\t\t tsubst_flags_t complain /* = tf_warning_or_error */)\n+\t\t\t tsubst_flags_t complain /* = tf_warning_or_error */,\n+\t\t\t bool manifestly_const_eval /* = false */)\n {\n   if (t == NULL_TREE)\n     return NULL_TREE;\n@@ -5380,7 +5385,8 @@ fold_non_dependent_expr (tree t,\n \t      return t;\n \t    }\n \n-\t  tree r = cxx_eval_outermost_constant_expr (t, true, true, false,\n+\t  tree r = cxx_eval_outermost_constant_expr (t, true, true,\n+\t\t\t\t\t\t     manifestly_const_eval,\n \t\t\t\t\t\t     NULL_TREE);\n \t  /* cp_tree_equal looks through NOPs, so allow them.  */\n \t  gcc_checking_assert (r == t\n@@ -5398,7 +5404,7 @@ fold_non_dependent_expr (tree t,\n       return t;\n     }\n \n-  return maybe_constant_value (t);\n+  return maybe_constant_value (t, NULL_TREE, manifestly_const_eval);\n }\n \n /* Like maybe_constant_value, but returns a CONSTRUCTOR directly, rather"}, {"sha": "76bd8f6dcb74ea331fed797b7099564e1df13f06", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cd3e7df0b7dc202d10ed7935918f1194adfc514/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cd3e7df0b7dc202d10ed7935918f1194adfc514/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=4cd3e7df0b7dc202d10ed7935918f1194adfc514", "patch": "@@ -2118,7 +2118,7 @@ cxx_omp_disregard_value_expr (tree decl, bool shared)\n \n /* Fold expression X which is used as an rvalue if RVAL is true.  */\n \n-static tree\n+tree\n cp_fold_maybe_rvalue (tree x, bool rval)\n {\n   while (true)\n@@ -2141,7 +2141,7 @@ cp_fold_maybe_rvalue (tree x, bool rval)\n \n /* Fold expression X which is used as an rvalue.  */\n \n-static tree\n+tree\n cp_fold_rvalue (tree x)\n {\n   return cp_fold_maybe_rvalue (x, true);"}, {"sha": "604e615721f7c02c42b3159304f0233d9ab9ddc3", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cd3e7df0b7dc202d10ed7935918f1194adfc514/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cd3e7df0b7dc202d10ed7935918f1194adfc514/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=4cd3e7df0b7dc202d10ed7935918f1194adfc514", "patch": "@@ -7543,6 +7543,8 @@ extern void cxx_omp_finish_clause\t\t(tree, gimple_seq *);\n extern bool cxx_omp_privatize_by_reference\t(const_tree);\n extern bool cxx_omp_disregard_value_expr\t(tree, bool);\n extern void cp_fold_function\t\t\t(tree);\n+extern tree cp_fold_maybe_rvalue\t\t(tree, bool);\n+extern tree cp_fold_rvalue\t\t\t(tree);\n extern tree cp_fully_fold\t\t\t(tree);\n extern tree cp_fully_fold_init\t\t\t(tree);\n extern void clear_fold_cache\t\t\t(void);\n@@ -7668,7 +7670,9 @@ extern tree cxx_constant_value\t\t\t(tree, tree = NULL_TREE);\n extern tree cxx_constant_init\t\t\t(tree, tree = NULL_TREE);\n extern tree maybe_constant_value\t\t(tree, tree = NULL_TREE, bool = false);\n extern tree maybe_constant_init\t\t\t(tree, tree = NULL_TREE, bool = false);\n-extern tree fold_non_dependent_expr\t\t(tree, tsubst_flags_t = tf_warning_or_error);\n+extern tree fold_non_dependent_expr\t\t(tree,\n+\t\t\t\t\t\t tsubst_flags_t = tf_warning_or_error,\n+\t\t\t\t\t\t bool = false);\n extern tree fold_simple\t\t\t\t(tree);\n extern bool is_sub_constant_expr                (tree);\n extern bool reduced_constant_expression_p       (tree);"}, {"sha": "e201c3db9a2cb3301d6e870e75d7f5814c16f33b", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cd3e7df0b7dc202d10ed7935918f1194adfc514/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cd3e7df0b7dc202d10ed7935918f1194adfc514/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=4cd3e7df0b7dc202d10ed7935918f1194adfc514", "patch": "@@ -9225,7 +9225,8 @@ finish_static_assert (tree condition, tree message, location_t location,\n   /* Fold the expression and convert it to a boolean value. */\n   condition = perform_implicit_conversion_flags (boolean_type_node, condition,\n \t\t\t\t\t\t complain, LOOKUP_NORMAL);\n-  condition = fold_non_dependent_expr (condition, complain);\n+  condition = fold_non_dependent_expr (condition, complain,\n+\t\t\t\t       /*manifestly_const_eval=*/true);\n \n   if (TREE_CODE (condition) == INTEGER_CST && !integer_zerop (condition))\n     /* Do nothing; the condition is satisfied. */"}, {"sha": "eaabddfff23be4cdb9276aecec5b39d12b3209ce", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cd3e7df0b7dc202d10ed7935918f1194adfc514/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cd3e7df0b7dc202d10ed7935918f1194adfc514/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4cd3e7df0b7dc202d10ed7935918f1194adfc514", "patch": "@@ -1,5 +1,12 @@\n 2018-12-21  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c++/86524\n+\tPR c++/88446\n+\t* g++.dg/cpp1y/constexpr-86524.C: New test.\n+\t* g++.dg/cpp2a/is-constant-evaluated4.C: New test.\n+\t* g++.dg/cpp2a/is-constant-evaluated5.C: New test.\n+\t* g++.dg/cpp2a/is-constant-evaluated6.C: New test.\n+\n \tPR middle-end/85594\n \tPR middle-end/88553\n \t* gcc.dg/gomp/pr85594.c: New test."}, {"sha": "59e6b8059d194228c0641fadd5894410d2cb5ad1", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-86524.C", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cd3e7df0b7dc202d10ed7935918f1194adfc514/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-86524.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cd3e7df0b7dc202d10ed7935918f1194adfc514/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-86524.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-86524.C?ref=4cd3e7df0b7dc202d10ed7935918f1194adfc514", "patch": "@@ -0,0 +1,41 @@\n+// PR c++/86524\n+// { dg-do run { target c++14 } }\n+// { dg-options \"-O2\" }\n+\n+extern \"C\" void abort ();\n+typedef __UINTPTR_TYPE__ uintptr_t;\n+\n+constexpr bool\n+foo (const int *x, const int *y)\n+{\n+  if (__builtin_constant_p (x < y))\n+    return x < y;\n+  return (uintptr_t) x < (uintptr_t) y;\n+}\n+\n+void\n+bar ()\n+{\n+  constexpr int x = 0;\n+  static_assert (!(&x < &x));\n+  static_assert (!foo (&x, &x));\n+}\n+\n+constexpr void\n+baz ()\n+{\n+  constexpr int x = 0;\n+  static_assert (!(&x < &x));\n+  static_assert (!foo (&x, &x));\n+}\n+\n+int i, j;\n+\n+int\n+main ()\n+{\n+  bar ();\n+  baz ();\n+  if (!(foo (&i, &j) ^ foo (&j, &i)))\n+    abort ();\n+}"}, {"sha": "809e3d2e687c1aee35f53207c87278630909adb2", "filename": "gcc/testsuite/g++.dg/cpp2a/is-constant-evaluated4.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cd3e7df0b7dc202d10ed7935918f1194adfc514/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fis-constant-evaluated4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cd3e7df0b7dc202d10ed7935918f1194adfc514/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fis-constant-evaluated4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fis-constant-evaluated4.C?ref=4cd3e7df0b7dc202d10ed7935918f1194adfc514", "patch": "@@ -0,0 +1,19 @@\n+// P0595R2\n+// { dg-do compile { target c++14 } }\n+\n+namespace std {\n+  constexpr inline bool\n+  is_constant_evaluated () noexcept\n+  {\n+    return __builtin_is_constant_evaluated ();\n+  }\n+}\n+\n+constexpr int\n+foo () noexcept\n+{\n+  return std::is_constant_evaluated () ? 5 : 12;\n+}\n+\n+static_assert (std::is_constant_evaluated (), \"\");\n+static_assert (foo () == 5, \"\");"}, {"sha": "22b762db4f35592c7362067a765fee54cd443835", "filename": "gcc/testsuite/g++.dg/cpp2a/is-constant-evaluated5.C", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cd3e7df0b7dc202d10ed7935918f1194adfc514/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fis-constant-evaluated5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cd3e7df0b7dc202d10ed7935918f1194adfc514/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fis-constant-evaluated5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fis-constant-evaluated5.C?ref=4cd3e7df0b7dc202d10ed7935918f1194adfc514", "patch": "@@ -0,0 +1,41 @@\n+// PR c++/86524\n+// { dg-do run { target c++14 } }\n+// { dg-options \"-O2\" }\n+\n+extern \"C\" void abort ();\n+typedef __UINTPTR_TYPE__ uintptr_t;\n+\n+constexpr bool\n+foo (const int *x, const int *y)\n+{\n+  if (__builtin_is_constant_evaluated ())\n+    return x < y;\n+  return (uintptr_t) x < (uintptr_t) y;\n+}\n+\n+void\n+bar ()\n+{\n+  constexpr int x = 0;\n+  static_assert (!(&x < &x));\n+  static_assert (!foo (&x, &x));\n+}\n+\n+constexpr void\n+baz ()\n+{\n+  constexpr int x = 0;\n+  static_assert (!(&x < &x));\n+  static_assert (!foo (&x, &x));\n+}\n+\n+int i, j;\n+\n+int\n+main ()\n+{\n+  bar ();\n+  baz ();\n+  if (!(foo (&i, &j) ^ foo (&j, &i)))\n+    abort ();\n+}"}, {"sha": "842e446711513f11f6497c304d453389d6aa3ddb", "filename": "gcc/testsuite/g++.dg/cpp2a/is-constant-evaluated6.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cd3e7df0b7dc202d10ed7935918f1194adfc514/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fis-constant-evaluated6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cd3e7df0b7dc202d10ed7935918f1194adfc514/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fis-constant-evaluated6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fis-constant-evaluated6.C?ref=4cd3e7df0b7dc202d10ed7935918f1194adfc514", "patch": "@@ -0,0 +1,29 @@\n+// P0595R2\n+// { dg-do compile { target c++14 } }\n+\n+namespace std {\n+  constexpr inline bool\n+  is_constant_evaluated () noexcept\n+  {\n+    return __builtin_is_constant_evaluated ();\n+  }\n+}\n+\n+int a;\n+\n+constexpr bool\n+foo (int x)\n+{\n+  return __builtin_constant_p (x);\n+}\n+\n+constexpr bool\n+bar (int x)\n+{\n+  return __builtin_constant_p (x + a);\n+}\n+\n+static_assert (__builtin_constant_p (0) + 2 * std::is_constant_evaluated () == 3, \"\");\n+static_assert (__builtin_constant_p (a) + 2 * std::is_constant_evaluated () == 2, \"\");\n+static_assert (foo (0) + 2 * std::is_constant_evaluated () == 3, \"\");\n+static_assert (bar (0) + 2 * std::is_constant_evaluated () == 2, \"\");"}]}