{"sha": "71400efc5eeacbef8e1e69e181241f99bcc097e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzE0MDBlZmM1ZWVhY2JlZjhlMWU2OWUxODEyNDFmOTliY2MwOTdlNQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2020-07-21T09:45:31Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-10-20T07:21:51Z"}, "message": "[Ada] Add support for Unreferenced aspect on formal parameters\n\ngcc/ada/\n\n\t* aspects.adb (Has_Aspect_Specifications_Flag): Add\n\tN_Parameter_Specification.\n\t* par-ch13.adb (Aspect_Specifications_Present): Also handle case\n\tof an unknown aspect on the last formal parameter (terminated by\n\ta Tok_Right_Paren). Minor reformatting.\n\t* par-ch6.adb (P_Formal_Part): Scan aspects on formal\n\tparameters.\n\t* par.adb: Fix typos.\n\t* sem_ch6.adb (Process_Formals): Add processing of aspects and\n\tin particular Unreferenced aspect for now.\n\t* sinfo.ads: Allow ASPECT_SPECIFICATIONS on a\n\tPARAMETER_SPECIFICATION.\n\t* doc/gnat_rm/implementation_defined_aspects.rst\n\t(Aspect Unreferenced): Update documentation.\n\t* gnat_rm.texi: Regenerate.", "tree": {"sha": "9fff6b8ee16367b01aa0d6bae7c19fff239a356e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9fff6b8ee16367b01aa0d6bae7c19fff239a356e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71400efc5eeacbef8e1e69e181241f99bcc097e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71400efc5eeacbef8e1e69e181241f99bcc097e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71400efc5eeacbef8e1e69e181241f99bcc097e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71400efc5eeacbef8e1e69e181241f99bcc097e5/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53642c37e2a585718b6e3c443e64007b4f4bbc14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53642c37e2a585718b6e3c443e64007b4f4bbc14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53642c37e2a585718b6e3c443e64007b4f4bbc14"}], "stats": {"total": 80, "additions": 63, "deletions": 17}, "files": [{"sha": "0c5a3cf58c6bf269ed7091ea98194145687551da", "filename": "gcc/ada/aspects.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71400efc5eeacbef8e1e69e181241f99bcc097e5/gcc%2Fada%2Faspects.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71400efc5eeacbef8e1e69e181241f99bcc097e5/gcc%2Fada%2Faspects.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.adb?ref=71400efc5eeacbef8e1e69e181241f99bcc097e5", "patch": "@@ -455,6 +455,7 @@ package body Aspects is\n       N_Package_Instantiation                  => True,\n       N_Package_Specification                  => True,\n       N_Package_Renaming_Declaration           => True,\n+      N_Parameter_Specification                => True,\n       N_Private_Extension_Declaration          => True,\n       N_Private_Type_Declaration               => True,\n       N_Procedure_Instantiation                => True,"}, {"sha": "de5efea5385283312842a706dc1903dc4d7941ab", "filename": "gcc/ada/doc/gnat_rm/implementation_defined_aspects.rst", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71400efc5eeacbef8e1e69e181241f99bcc097e5/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_aspects.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71400efc5eeacbef8e1e69e181241f99bcc097e5/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_aspects.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_aspects.rst?ref=71400efc5eeacbef8e1e69e181241f99bcc097e5", "patch": "@@ -564,9 +564,11 @@ Aspect Unreferenced\n ===================\n .. index:: Unreferenced\n \n-This boolean aspect is equivalent to :ref:`pragma Unreferenced<Pragma-Unreferenced>`. Note that\n-in the case of formal parameters, it is not permitted to have aspects for\n-a formal parameter, so in this case the pragma form must be used.\n+This boolean aspect is equivalent to :ref:`pragma Unreferenced<Pragma-Unreferenced>`.\n+\n+When using the ``-gnatX`` switch, this aspect is also supported on formal\n+parameters, which is in particular the only form possible for expression\n+functions.\n \n Aspect Unreferenced_Objects\n ==========================="}, {"sha": "da262f1f4ab6394e0f3503119a4b9c26c2155e91", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71400efc5eeacbef8e1e69e181241f99bcc097e5/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71400efc5eeacbef8e1e69e181241f99bcc097e5/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=71400efc5eeacbef8e1e69e181241f99bcc097e5", "patch": "@@ -9923,9 +9923,11 @@ This boolean aspect is equivalent to @ref{10b,,pragma Unmodified}.\n \n @geindex Unreferenced\n \n-This boolean aspect is equivalent to @ref{10c,,pragma Unreferenced}. Note that\n-in the case of formal parameters, it is not permitted to have aspects for\n-a formal parameter, so in this case the pragma form must be used.\n+This boolean aspect is equivalent to @ref{10c,,pragma Unreferenced}.\n+\n+When using the @code{-gnatX} switch, this aspect is also supported on formal\n+parameters, which is in particular the only form possible for expression\n+functions.\n \n @node Aspect Unreferenced_Objects,Aspect Value_Size,Aspect Unreferenced,Implementation Defined Aspects\n @anchor{gnat_rm/implementation_defined_aspects aspect-unreferenced-objects}@anchor{15e}"}, {"sha": "95223a1a354d56515462a33491c20773d290ddb9", "filename": "gcc/ada/par-ch13.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71400efc5eeacbef8e1e69e181241f99bcc097e5/gcc%2Fada%2Fpar-ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71400efc5eeacbef8e1e69e181241f99bcc097e5/gcc%2Fada%2Fpar-ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch13.adb?ref=71400efc5eeacbef8e1e69e181241f99bcc097e5", "patch": "@@ -153,7 +153,8 @@ package body Ch13 is\n             Result := True;\n          else\n             Scan; -- past identifier\n-            Result := Token in Tok_Arrow | Tok_Comma | Tok_Is | Tok_Semicolon;\n+            Result := Token in\n+              Tok_Arrow | Tok_Comma | Tok_Is | Tok_Semicolon | Tok_Right_Paren;\n          end if;\n \n       --  If earlier than Ada 2012, check for valid aspect identifier (possibly\n@@ -956,7 +957,7 @@ package body Ch13 is\n          --  If Decl is Error, we ignore the aspects, and issue a message\n \n          elsif Decl = Error\n-            or else not Permits_Aspect_Specifications (Decl)\n+           or else not Permits_Aspect_Specifications (Decl)\n          then\n             Error_Msg (\"aspect specifications not allowed here\", Ptr);\n "}, {"sha": "622a508b6cd8e603037325a61b524e54aa2f93b9", "filename": "gcc/ada/par-ch6.adb", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71400efc5eeacbef8e1e69e181241f99bcc097e5/gcc%2Fada%2Fpar-ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71400efc5eeacbef8e1e69e181241f99bcc097e5/gcc%2Fada%2Fpar-ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch6.adb?ref=71400efc5eeacbef8e1e69e181241f99bcc097e5", "patch": "@@ -1627,6 +1627,25 @@ package body Ch6 is\n             Scan; -- past right paren\n             exit Specification_Loop;\n \n+         --  Support for aspects on formal parameters is a GNAT extension for\n+         --  the time being.\n+\n+         elsif Token = Tok_With then\n+            if not Extensions_Allowed then\n+               Error_Msg_SP (\"aspect on formal parameter requires -gnatX\");\n+            end if;\n+\n+            P_Aspect_Specifications (Specification_Node, False);\n+\n+            if Token = Tok_Right_Paren then\n+               Scan;  -- past right paren\n+               exit Specification_Loop;\n+\n+            elsif Token = Tok_Semicolon then\n+               Save_Scan_State (Scan_State);\n+               Scan; -- past semicolon\n+            end if;\n+\n          --  Special check for common error of using comma instead of semicolon\n \n          elsif Token = Tok_Comma then"}, {"sha": "4c3a1549988a27e145e4e08201a04cc5252eb84b", "filename": "gcc/ada/par.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71400efc5eeacbef8e1e69e181241f99bcc097e5/gcc%2Fada%2Fpar.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71400efc5eeacbef8e1e69e181241f99bcc097e5/gcc%2Fada%2Fpar.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar.adb?ref=71400efc5eeacbef8e1e69e181241f99bcc097e5", "patch": "@@ -995,10 +995,10 @@ function Par (Configuration_Pragmas : Boolean) return List_Id is\n       procedure P_Aspect_Specifications\n         (Decl      : Node_Id;\n          Semicolon : Boolean := True);\n-      --  This procedure scans out a series of aspect spefications. If argument\n-      --  Semicolon is True, a terminating semicolon is also scanned. If this\n-      --  argument is False, the scan pointer is left pointing past the aspects\n-      --  and the caller must check for a proper terminator.\n+      --  This procedure scans out a series of aspect specifications. If\n+      --  argument Semicolon is True, a terminating semicolon is also scanned.\n+      --  If this argument is False, the scan pointer is left pointing past the\n+      --  aspects and the caller must check for a proper terminator.\n       --\n       --  P_Aspect_Specifications is called with the current token pointing\n       --  to either a WITH keyword starting an aspect specification, or an"}, {"sha": "8bf5889a05aa39a781c1b03410127e2d1500de20", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71400efc5eeacbef8e1e69e181241f99bcc097e5/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71400efc5eeacbef8e1e69e181241f99bcc097e5/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=71400efc5eeacbef8e1e69e181241f99bcc097e5", "patch": "@@ -672,9 +672,9 @@ package body Sem_Ch6 is\n       end if;\n    end Analyze_Expression_Function;\n \n-   ----------------------------------------\n-   -- Analyze_Extended_Return_Statement  --\n-   ----------------------------------------\n+   ---------------------------------------\n+   -- Analyze_Extended_Return_Statement --\n+   ---------------------------------------\n \n    procedure Analyze_Extended_Return_Statement (N : Node_Id) is\n    begin\n@@ -12282,6 +12282,27 @@ package body Sem_Ch6 is\n             end if;\n          end if;\n \n+         --  Deal with aspects on formal parameters. Only Unreferenced is\n+         --  supported for the time being.\n+\n+         if Has_Aspects (Param_Spec) then\n+            declare\n+               Aspect : Node_Id := First (Aspect_Specifications (Param_Spec));\n+            begin\n+               while Present (Aspect) loop\n+                  if Chars (Identifier (Aspect)) = Name_Unreferenced then\n+                     Set_Has_Pragma_Unreferenced (Formal);\n+                  else\n+                     Error_Msg_NE\n+                       (\"unsupported aspect& on parameter\",\n+                        Aspect, Identifier (Aspect));\n+                  end if;\n+\n+                  Next (Aspect);\n+               end loop;\n+            end;\n+         end if;\n+\n       <<Continue>>\n          Next (Param_Spec);\n       end loop;"}, {"sha": "4f0a41f01b1f32f84740e6dc52129fbfbdb49018", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71400efc5eeacbef8e1e69e181241f99bcc097e5/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71400efc5eeacbef8e1e69e181241f99bcc097e5/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=71400efc5eeacbef8e1e69e181241f99bcc097e5", "patch": "@@ -5414,9 +5414,9 @@ package Sinfo is\n \n       --  PARAMETER_SPECIFICATION ::=\n       --    DEFINING_IDENTIFIER_LIST : [ALIASED] MODE [NULL_EXCLUSION]\n-      --      SUBTYPE_MARK [:= DEFAULT_EXPRESSION]\n+      --      SUBTYPE_MARK [:= DEFAULT_EXPRESSION] [ASPECT_SPECIFICATIONS]\n       --  | DEFINING_IDENTIFIER_LIST : ACCESS_DEFINITION\n-      --      [:= DEFAULT_EXPRESSION]\n+      --      [:= DEFAULT_EXPRESSION] [ASPECT_SPECIFICATIONS]\n \n       --  Although the syntax allows multiple identifiers in the list, the\n       --  semantics is as though successive specifications were given with"}]}