{"sha": "7bd7a75601476a02198e84dbc3c270c7af968cdf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2JkN2E3NTYwMTQ3NmEwMjE5OGU4NGRiYzNjMjcwYzdhZjk2OGNkZg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-10-19T23:01:42Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-10-19T23:01:42Z"}, "message": "(ASM_SPEC): If GNU as is the default, then pass -g to the assembler if -malpha-as.\n\n(ASM_SPEC): If GNU as is the default, then pass -g to the assembler if\n-malpha-as.  If GNU as is not the default, then pass -g to the\nassembler is not -mgas.\n\nFrom-SVN: r10478", "tree": {"sha": "8e357fa96dddda565e29554c17470fbb198e0261", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e357fa96dddda565e29554c17470fbb198e0261"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7bd7a75601476a02198e84dbc3c270c7af968cdf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bd7a75601476a02198e84dbc3c270c7af968cdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bd7a75601476a02198e84dbc3c270c7af968cdf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bd7a75601476a02198e84dbc3c270c7af968cdf/comments", "author": null, "committer": null, "parents": [{"sha": "c3647fe082f202dd4b648e72ab483f23c5107c68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3647fe082f202dd4b648e72ab483f23c5107c68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3647fe082f202dd4b648e72ab483f23c5107c68"}], "stats": {"total": 23, "additions": 14, "deletions": 9}, "files": [{"sha": "d8ace7abfd318dd2d3e8e57857b07254a3b1c3c8", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bd7a75601476a02198e84dbc3c270c7af968cdf/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bd7a75601476a02198e84dbc3c270c7af968cdf/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=7bd7a75601476a02198e84dbc3c270c7af968cdf", "patch": "@@ -42,15 +42,6 @@ Boston, MA 02111-1307, USA.  */\n \n #define SIGNED_CHAR_SPEC \"%{funsigned-char:-D__CHAR_UNSIGNED__}\"\n \n-/* No point in running CPP on our assembler output.  */\n-/* In OSF/1 v3.2c, the assembler by default does not output file names which\n-   causes mips-tfile to fail.  Passing -g to the assembler fixes this problem.\n-   ??? Stricly speaking, we only need -g if the user specifies -g.  Passing\n-   it always means that we get slightly larger than necessary object files\n-   if the user does not specify -g.  If we don't pass -g, then mips-tfile\n-   will need to be fixed to work in this case.  */\n-#define ASM_SPEC \"-g -nocpp %{pg}\"\n-\n /* Under OSF/1, -p and -pg require -lprof1.  */\n \n #define LIB_SPEC \"%{p:-lprof1} %{pg:-lprof1} %{a:-lprof2} -lc\"\n@@ -2022,6 +2013,20 @@ do {\t\t\t\t\t\t\t\\\n \n #define PUT_SDB_EPILOGUE_END(NAME)\n \n+/* No point in running CPP on our assembler output.  */\n+#if ((TARGET_DEFAULT | TARGET_CPU_DEFAULT) & MASK_GAS) != 0\n+/* Don't pass -g to GNU as, because some versions don't accept this option.  */\n+#define ASM_SPEC \"%{malpha-as:-g} -nocpp %{pg}\"\n+#else\n+/* In OSF/1 v3.2c, the assembler by default does not output file names which\n+   causes mips-tfile to fail.  Passing -g to the assembler fixes this problem.\n+   ??? Stricly speaking, we only need -g if the user specifies -g.  Passing\n+   it always means that we get slightly larger than necessary object files\n+   if the user does not specify -g.  If we don't pass -g, then mips-tfile\n+   will need to be fixed to work in this case.  */\n+#define ASM_SPEC \"%{!mgas:-g} -nocpp %{pg}\"\n+#endif\n+\n /* Specify to run a post-processor, mips-tfile after the assembler\n    has run to stuff the ecoff debug information into the object file.\n    This is needed because the Alpha assembler provides no way"}]}