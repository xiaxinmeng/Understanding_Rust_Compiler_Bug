{"sha": "e68a4ef6eaebf615da649555260e9c12e5ffb9bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTY4YTRlZjZlYWViZjYxNWRhNjQ5NTU1MjYwZTljMTJlNWZmYjliYw==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2013-02-12T14:55:16Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2013-02-12T14:55:16Z"}, "message": "re PR target/54222 ([avr] Implement fixed-point support)\n\ngcc/\n\tPR target/54222\n\t* config/avr/avr-dimode.md (umulsidi3, mulsidi3): New expanders.\n\t(umulsidi3_insn, mulsidi3_insn): New insns.\n\nlibgcc/\n\tPR target/54222\n\t* config/avr/t-avr (LIB2FUNCS_EXCLUDE): Add: _usmulUHA, _usmulUSA,\n\t_ssmulHA, _ssmulSA.\n\t(LIB1ASMFUNCS): Add: _muldi3_6, _mulsidi3, _umulsidi3, _usmuluha3,\n\t_ssmulha3, _usmulusa3, _ssmulsa3.\n\t* config/avr/lib1funcs.S (__muldi3_6): Break out of __muldi3.\n\t(__muldi3): XCALL __muldi3_6 instead of rcall.\n\t(__umulsidi3, __mulsidi3): New functions.\n\t(do_prologue_saves, do_epilogue_restores): New .macros.\n\t(__divdi3_moddi3): Use them.\n\t* config/avr/lib1funcs-fixed.S (__usmuluha3, __ssmulha3)\n\t(__usmulusa3, __ssmulsa3): New functions.\n\nFrom-SVN: r195978", "tree": {"sha": "e055712e464d68ce4f4fcf5947a000fa7cba7a84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e055712e464d68ce4f4fcf5947a000fa7cba7a84"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e68a4ef6eaebf615da649555260e9c12e5ffb9bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e68a4ef6eaebf615da649555260e9c12e5ffb9bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e68a4ef6eaebf615da649555260e9c12e5ffb9bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e68a4ef6eaebf615da649555260e9c12e5ffb9bc/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2597da229a2261de8576099213ffdef4bf946a7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2597da229a2261de8576099213ffdef4bf946a7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2597da229a2261de8576099213ffdef4bf946a7c"}], "stats": {"total": 588, "additions": 564, "deletions": 24}, "files": [{"sha": "e354b939feb113babc356f7ac3adf9575e11e64d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e68a4ef6eaebf615da649555260e9c12e5ffb9bc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e68a4ef6eaebf615da649555260e9c12e5ffb9bc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e68a4ef6eaebf615da649555260e9c12e5ffb9bc", "patch": "@@ -1,3 +1,9 @@\n+2013-02-12  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/54222\n+\t* config/avr/avr-dimode.md (umulsidi3, mulsidi3): New expanders.\n+\t(umulsidi3_insn, mulsidi3_insn): New insns.\n+\n 2013-02-12  Christophe Lyon <christophe.lyon@linaro.org>\n \n \t* config/arm/arm-protos.h (struct cpu_vec_costs): New struct type."}, {"sha": "c96ba6e9713c2f65bd64bdc15c418a5ec685b505", "filename": "gcc/config/avr/avr-dimode.md", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e68a4ef6eaebf615da649555260e9c12e5ffb9bc/gcc%2Fconfig%2Favr%2Favr-dimode.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e68a4ef6eaebf615da649555260e9c12e5ffb9bc/gcc%2Fconfig%2Favr%2Favr-dimode.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-dimode.md?ref=e68a4ef6eaebf615da649555260e9c12e5ffb9bc", "patch": "@@ -446,3 +446,34 @@\n   \"%~call __<code_stdname>di3\"\n   [(set_attr \"adjust_len\" \"call\")\n    (set_attr \"cc\" \"clobber\")])\n+\n+;; \"umulsidi3\"\n+;; \"mulsidi3\"\n+(define_expand \"<extend_u>mulsidi3\"\n+  [(parallel [(match_operand:DI 0 \"register_operand\" \"\")\n+              (match_operand:SI 1 \"general_operand\" \"\")\n+              (match_operand:SI 2 \"general_operand\" \"\")\n+              ;; Just to mention the iterator \n+              (clobber (any_extend:SI (match_dup 1)))])]\n+  \"avr_have_dimode\"\n+  {\n+    emit_move_insn (gen_rtx_REG (SImode, 22), operands[1]);\n+    emit_move_insn (gen_rtx_REG (SImode, 18), operands[2]);\n+    emit_insn (gen_<extend_u>mulsidi3_insn());\n+    // Use emit_move_insn and not open-coded expand because of missing movdi\n+    emit_move_insn (operands[0], gen_rtx_REG (DImode, ACC_A));\n+    DONE;\n+  })\n+\n+;; \"umulsidi3_insn\"\n+;; \"mulsidi3_insn\"\n+(define_insn \"<extend_u>mulsidi3_insn\"\n+  [(set (reg:DI ACC_A)\n+        (mult:DI (any_extend:DI (reg:SI 18))\n+                 (any_extend:DI (reg:SI 22))))\n+   (clobber (reg:HI REG_X))\n+   (clobber (reg:HI REG_Z))]\n+  \"avr_have_dimode\"\n+  \"%~call __<extend_u>mulsidi3\"\n+  [(set_attr \"adjust_len\" \"call\")\n+   (set_attr \"cc\" \"clobber\")])"}, {"sha": "e484e048432198d78eb6e341d2df72193ac57b35", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e68a4ef6eaebf615da649555260e9c12e5ffb9bc/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e68a4ef6eaebf615da649555260e9c12e5ffb9bc/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=e68a4ef6eaebf615da649555260e9c12e5ffb9bc", "patch": "@@ -1,3 +1,18 @@\n+2013-02-12  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/54222\n+\t* config/avr/t-avr (LIB2FUNCS_EXCLUDE): Add: _usmulUHA, _usmulUSA,\n+\t_ssmulHA, _ssmulSA.\n+\t(LIB1ASMFUNCS): Add: _muldi3_6, _mulsidi3, _umulsidi3, _usmuluha3,\n+\t_ssmulha3, _usmulusa3, _ssmulsa3.\n+\t* config/avr/lib1funcs.S (__muldi3_6): Break out of __muldi3.\n+\t(__muldi3): XCALL __muldi3_6 instead of rcall.\n+\t(__umulsidi3, __mulsidi3): New functions.\n+\t(do_prologue_saves, do_epilogue_restores): New .macros.\n+\t(__divdi3_moddi3): Use them.\n+\t* config/avr/lib1funcs-fixed.S (__usmuluha3, __ssmulha3)\n+\t(__usmulusa3, __ssmulsa3): New functions.\n+\n 2013-02-11  Iain Sandoe  <iain@codesourcery.com>\n \t    Jack Howarth  <howarth@bromo.med.uc.edu>\n \t    Patrick Marlier  <patrick.marlier@gmail.com>"}, {"sha": "d80389ce2ee70a72054c68a17882c7d328057f67", "filename": "libgcc/config/avr/lib1funcs-fixed.S", "status": "modified", "additions": 204, "deletions": 0, "changes": 204, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e68a4ef6eaebf615da649555260e9c12e5ffb9bc/libgcc%2Fconfig%2Favr%2Flib1funcs-fixed.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e68a4ef6eaebf615da649555260e9c12e5ffb9bc/libgcc%2Fconfig%2Favr%2Flib1funcs-fixed.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Favr%2Flib1funcs-fixed.S?ref=e68a4ef6eaebf615da649555260e9c12e5ffb9bc", "patch": "@@ -669,6 +669,210 @@ ENDF __mulusa3_round\n \n #undef GUARD\n \n+/***********************************************************\n+    Fixed  unsigned saturated Multiplication  8.8 x 8.8\n+***********************************************************/\n+\n+#define C0  22\n+#define C1  C0+1\n+#define C2  C0+2\n+#define C3  C0+3\n+#define SS __tmp_reg__\n+\n+#if defined (L_usmuluha3)\n+DEFUN __usmuluha3\n+    ;; Widening multiply\n+#ifdef __AVR_HAVE_MUL__\n+    ;; Adjust interface\n+    movw    R26, R22\n+    movw    R18, R24\n+#endif /* HAVE MUL */\n+    XCALL   __umulhisi3\n+    tst     C3\n+    brne .Lmax\n+    ;; Round, target is in C1..C2\n+    lsl     C0\n+    adc     C1, __zero_reg__\n+    adc     C2, __zero_reg__\n+    brcs .Lmax\n+    ;; Move result into place\n+    mov     C3, C2\n+    mov     C2, C1\n+    ret\n+.Lmax:\n+    ;; Saturate\n+    ldi     C2, 0xff\n+    ldi     C3, 0xff\n+    ret\n+ENDF  __usmuluha3\n+#endif /* L_usmuluha3 */\n+\n+/***********************************************************\n+    Fixed signed saturated Multiplication  s8.7 x s8.7\n+***********************************************************/\n+\n+#if defined (L_ssmulha3)\n+DEFUN __ssmulha3\n+    ;; Widening multiply\n+#ifdef __AVR_HAVE_MUL__\n+    ;; Adjust interface\n+    movw    R26, R22\n+    movw    R18, R24\n+#endif /* HAVE MUL */\n+    XCALL   __mulhisi3\n+    ;; Adjust decimal point\n+    lsl     C0\n+    rol     C1\n+    rol     C2\n+    brvs .LsatC3.3\n+    ;; The 9 MSBs must be the same\n+    rol     C3\n+    sbc     SS, SS\n+    cp      C3, SS\n+    brne .LsatSS\n+    ;; Round\n+    lsl     C0\n+    adc     C1, __zero_reg__\n+    adc     C2, __zero_reg__\n+    brvs .Lmax\n+    ;; Move result into place\n+    mov    C3, C2\n+    mov    C2, C1\n+    ret\n+.Lmax:\n+    ;; Load 0x7fff\n+    clr     C3\n+.LsatC3.3:\n+    ;; C3 <  0 -->  0x8000\n+    ;; C3 >= 0 -->  0x7fff\n+    mov     SS, C3\n+.LsatSS:\n+    ;; Load min / max value:\n+    ;; SS = -1  -->  0x8000\n+    ;; SS =  0  -->  0x7fff\n+    ldi     C3, 0x7f\n+    ldi     C2, 0xff\n+    sbrc    SS, 7\n+    adiw    C2, 1\n+    ret\n+ENDF  __ssmulha3\n+#endif /* L_ssmulha3 */\n+\n+#undef C0\n+#undef C1\n+#undef C2\n+#undef C3\n+#undef SS\n+\n+/***********************************************************\n+    Fixed  unsigned saturated Multiplication  16.16 x 16.16\n+***********************************************************/\n+\n+#define C0  18\n+#define C1  C0+1\n+#define C2  C0+2\n+#define C3  C0+3\n+#define C4  C0+4\n+#define C5  C0+5\n+#define C6  C0+6\n+#define C7  C0+7\n+#define SS __tmp_reg__\n+\n+#if defined (L_usmulusa3)\n+;; R22[4] = R22[4] *{ssat} R18[4]\n+;; Ordinary ABI function\n+DEFUN __usmulusa3\n+    ;; Widening multiply\n+    XCALL   __umulsidi3\n+    or      C7, C6\n+    brne .Lmax\n+    ;; Round, target is in C2..C5\n+    lsl     C1\n+    adc     C2, __zero_reg__\n+    adc     C3, __zero_reg__\n+    adc     C4, __zero_reg__\n+    adc     C5, __zero_reg__\n+    brcs .Lmax\n+    ;; Move result into place\n+    wmov    C6, C4\n+    wmov    C4, C2\n+    ret\n+.Lmax:\n+    ;; Saturate\n+    ldi     C7, 0xff\n+    ldi     C6, 0xff\n+    wmov    C4, C6\n+    ret\n+ENDF  __usmulusa3\n+#endif /* L_usmulusa3 */\n+\n+/***********************************************************\n+    Fixed signed saturated Multiplication  s16.15 x s16.15\n+***********************************************************/\n+\n+#if defined (L_ssmulsa3)\n+;; R22[4] = R22[4] *{ssat} R18[4]\n+;; Ordinary ABI function\n+DEFUN __ssmulsa3\n+    ;; Widening multiply\n+    XCALL   __mulsidi3\n+    ;; Adjust decimal point\n+    lsl     C1\n+    rol     C2\n+    rol     C3\n+    rol     C4\n+    rol     C5\n+    brvs .LsatC7.7\n+    ;; The 17 MSBs must be the same\n+    rol     C6\n+    rol     C7\n+    sbc     SS, SS\n+    cp      C6, SS\n+    cpc     C7, SS\n+    brne .LsatSS\n+    ;; Round\n+    lsl     C1\n+    adc     C2, __zero_reg__\n+    adc     C3, __zero_reg__\n+    adc     C4, __zero_reg__\n+    adc     C5, __zero_reg__\n+    brvs .Lmax\n+    ;; Move result into place\n+    wmov    C6, C4\n+    wmov    C4, C2\n+    ret\n+\n+.Lmax:\n+    ;; Load 0x7fffffff\n+    clr     C7\n+.LsatC7.7:\n+    ;; C7 <  0 -->  0x80000000\n+    ;; C7 >= 0 -->  0x7fffffff\n+    lsl     C7\n+    sbc     SS, SS\n+.LsatSS:\n+    ;; Load min / max value:\n+    ;; SS = -1  -->  0x80000000\n+    ;; SS =  0  -->  0x7fffffff\n+    com     SS\n+    mov     C4, SS\n+    mov     C5, C4\n+    wmov    C6, C4\n+    subi    C7, 0x80\n+    ret\n+ENDF  __ssmulsa3\n+#endif /* L_ssmulsa3 */\n+\n+#undef C0\n+#undef C1\n+#undef C2\n+#undef C3\n+#undef C4\n+#undef C5\n+#undef C6\n+#undef C7\n+#undef SS\n+\n /*******************************************************\n       Fractional Division 8 / 8\n *******************************************************/"}, {"sha": "961b7cea8fe8d4ade8cf8bcab7577fd568e28c38", "filename": "libgcc/config/avr/lib1funcs.S", "status": "modified", "additions": 292, "deletions": 23, "changes": 315, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e68a4ef6eaebf615da649555260e9c12e5ffb9bc/libgcc%2Fconfig%2Favr%2Flib1funcs.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e68a4ef6eaebf615da649555260e9c12e5ffb9bc/libgcc%2Fconfig%2Favr%2Flib1funcs.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Favr%2Flib1funcs.S?ref=e68a4ef6eaebf615da649555260e9c12e5ffb9bc", "patch": "@@ -79,6 +79,41 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define XJMP  rjmp\n #endif\n \n+;; Prologue stuff\n+\n+.macro do_prologue_saves n_pushed n_frame=0\n+    ldi r26, lo8(\\n_frame)\n+    ldi r27, hi8(\\n_frame)\n+    ldi r30, lo8(gs(.L_prologue_saves.\\@))\n+    ldi r31, hi8(gs(.L_prologue_saves.\\@))\n+    XJMP __prologue_saves__ + ((18 - (\\n_pushed)) * 2)\n+.L_prologue_saves.\\@:\n+.endm\n+\n+;; Epilogue stuff\n+\n+.macro do_epilogue_restores n_pushed n_frame=0\n+    in      r28, __SP_L__\n+#ifdef __AVR_HAVE_SPH__\n+    in      r29, __SP_H__\n+.if \\n_frame > 63\n+    subi    r28, lo8(-\\n_frame)\n+    sbci    r29, hi8(-\\n_frame)\n+.elseif \\n_frame > 0\n+    adiw    r28, \\n_frame\n+.endif\n+#else\n+    clr     r29\n+.if \\n_frame > 0\n+    subi    r28, lo8(-\\n_frame)\n+.endif\n+#endif /* HAVE SPH */\n+    ldi     r30, \\n_pushed\n+    XJMP __epilogue_restores__ + ((18 - (\\n_pushed)) * 2)\n+.endm\n+\n+;; Support function entry and exit for convenience\n+\n .macro DEFUN name\n .global \\name\n .func \\name\n@@ -98,6 +133,9 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n .endfunc\n .endm\n \n+;; Skip next instruction, typically a jump target\n+#define skip cpse 0,0\n+\n ;; Negate a 2-byte value held in consecutive registers\n .macro NEG2  reg\n     com     \\reg+1\n@@ -736,8 +774,6 @@ ENDF __mulsqipsi3\n        Multiplication 64 x 64\n *******************************************************/\n \n-#if defined (L_muldi3)\n-\n ;; A[] = A[] * B[]\n \n ;; A[0..7]: In: Multiplicand\n@@ -774,6 +810,8 @@ ENDF __mulsqipsi3\n #define C6  C4+2\n #define C7  C4+3\n \n+#if defined (L_muldi3)\n+\n ;; A[]     *= B[]\n ;; R25:R18 *= R17:R10\n ;; Ordinary ABI-Function\n@@ -818,7 +856,7 @@ DEFUN __muldi3\n \n     wmov    26, B2\n     ;; 0 * 1\n-    rcall   __muldi3_6\n+    XCALL   __muldi3_6\n \n     pop     A0\n     pop     A1\n@@ -829,7 +867,7 @@ DEFUN __muldi3\n     pop     r26\n     pop     r27\n     ;; 1 * 0\n-    rcall   __muldi3_6\n+    XCALL   __muldi3_6\n \n     pop     A0\n     pop     A1\n@@ -852,7 +890,12 @@ DEFUN __muldi3\n     pop     r28\n     pop     r29\n     ret\n+ENDF __muldi3\n+#endif /* L_muldi3 */\n \n+#if defined (L_muldi3_6)\n+;; A helper for some 64-bit multiplications with MUL available\n+DEFUN __muldi3_6\n __muldi3_6:\n     XCALL   __umulhisi3\n     add     C2, 22\n@@ -862,7 +905,8 @@ __muldi3_6:\n     brcc    0f\n     adiw    C6, 1\n 0:  ret\n-ENDF __muldi3\n+ENDF __muldi3_6\n+#endif /* L_muldi3_6 */\n \n #undef C7\n #undef C6\n@@ -875,6 +919,8 @@ ENDF __muldi3\n \n #else /* !HAVE_MUL */\n \n+#if defined (L_muldi3)\n+\n #define C0  26\n #define C1  C0+1\n #define C2  C0+2\n@@ -952,6 +998,7 @@ ENDF __muldi3\n #undef C1\n #undef C0\n \n+#endif /* L_muldi3 */\n #endif /* HAVE_MUL */\n \n #undef B7\n@@ -972,7 +1019,240 @@ ENDF __muldi3\n #undef A1\n #undef A0\n \n-#endif /* L_muldi3 */\n+/*******************************************************\n+   Widening Multiplication 64 = 32 x 32  with  MUL\n+*******************************************************/\n+\n+#if defined (__AVR_HAVE_MUL__)\n+#define A0 r22\n+#define A1 r23 \n+#define A2 r24\n+#define A3 r25\n+ \n+#define B0 r18\n+#define B1 r19\n+#define B2 r20\n+#define B3 r21\n+ \n+#define C0  18\n+#define C1  C0+1\n+#define C2  20\n+#define C3  C2+1\n+#define C4  28\n+#define C5  C4+1\n+#define C6  C4+2\n+#define C7  C4+3\n+\n+#if defined (L_umulsidi3)\n+\n+;; Unsigned widening 64 = 32 * 32 Multiplication with MUL\n+\n+;; R18[8] = R22[4] * R18[4]\n+;;\n+;; Ordinary ABI Function, but additionally sets\n+;; X = R20[2] = B2[2]\n+;; Z = R22[2] = A0[2]\n+DEFUN __umulsidi3\n+    clt\n+    ;; FALLTHRU\n+ENDF  __umulsidi3\n+    ;; T = sign (A)\n+DEFUN __umulsidi3_helper\n+    push    29  $  push    28 ; Y\n+    wmov    30, A2\n+    ;; Counting in Words, we have to perform 4 Multiplications\n+    ;; 0 * 0\n+    wmov    26, A0\n+    XCALL __umulhisi3\n+    push    23  $  push    22 ; C0\n+    wmov    28, B0\n+    wmov    18, B2\n+    wmov    C2, 24\n+    push    27  $  push    26 ; A0\n+    push    19  $  push    18 ; B2\n+    ;;\n+    ;;  18  20  22  24  26  28  30  |  B2, B3, A0, A1, C0, C1, Y\n+    ;;  B2  C2  --  --  --  B0  A2\n+    ;; 1 * 1\n+    wmov    26, 30      ; A2\n+    XCALL __umulhisi3\n+    ;; Sign-extend A.  T holds the sign of A\n+    brtc    0f\n+    ;; Subtract B from the high part of the result\n+    sub     22, 28\n+    sbc     23, 29\n+    sbc     24, 18\n+    sbc     25, 19\n+0:  wmov    18, 28      ;; B0\n+    wmov    C4, 22\n+    wmov    C6, 24\n+    ;;\n+    ;;  18  20  22  24  26  28  30  |  B2, B3, A0, A1, C0, C1, Y\n+    ;;  B0  C2  --  --  A2  C4  C6\n+    ;;\n+    ;; 1 * 0\n+    XCALL __muldi3_6\n+    ;; 0 * 1\n+    pop     26  $   pop 27  ;; B2\n+    pop     18  $   pop 19  ;; A0\n+    XCALL __muldi3_6\n+\n+    ;; Move result C into place and save A0 in Z\n+    wmov    22, C4\n+    wmov    24, C6\n+    wmov    30, 18 ; A0\n+    pop     C0  $   pop C1\n+\n+    ;; Epilogue\n+    pop     28  $   pop 29  ;; Y\n+    ret\n+ENDF __umulsidi3_helper\n+#endif /* L_umulsidi3 */\n+\n+\n+#if defined (L_mulsidi3)\n+\n+;; Signed widening 64 = 32 * 32 Multiplication\n+;;\n+;; R18[8] = R22[4] * R18[4]\n+;; Ordinary ABI Function\n+DEFUN __mulsidi3\n+    bst     A3, 7\n+    sbrs    B3, 7           ; Enhanced core has no skip bug\n+    XJMP __umulsidi3_helper\n+\n+    ;; B needs sign-extension\n+    push    A3\n+    push    A2\n+    XCALL __umulsidi3_helper\n+    ;; A0 survived in Z\n+    sub     r22, r30\n+    sbc     r23, r31\n+    pop     r26\n+    pop     r27\n+    sbc     r24, r26\n+    sbc     r25, r27\n+    ret\n+ENDF __mulsidi3\n+#endif /* L_mulsidi3 */\n+\n+#undef A0\n+#undef A1\n+#undef A2\n+#undef A3\n+#undef B0\n+#undef B1\n+#undef B2\n+#undef B3\n+#undef C0\n+#undef C1\n+#undef C2\n+#undef C3\n+#undef C4\n+#undef C5\n+#undef C6\n+#undef C7\n+#endif /* HAVE_MUL */\n+\n+/**********************************************************\n+    Widening Multiplication 64 = 32 x 32  without  MUL\n+**********************************************************/\n+\n+#if defined (L_mulsidi3) && !defined (__AVR_HAVE_MUL__)\n+#define A0 18\n+#define A1 A0+1\n+#define A2 A0+2\n+#define A3 A0+3\n+#define A4 A0+4\n+#define A5 A0+5\n+#define A6 A0+6\n+#define A7 A0+7\n+\n+#define B0 10\n+#define B1 B0+1\n+#define B2 B0+2\n+#define B3 B0+3\n+#define B4 B0+4\n+#define B5 B0+5\n+#define B6 B0+6\n+#define B7 B0+7\n+\n+#define AA0 22\n+#define AA1 AA0+1\n+#define AA2 AA0+2\n+#define AA3 AA0+3\n+\n+#define BB0 18\n+#define BB1 BB0+1\n+#define BB2 BB0+2\n+#define BB3 BB0+3\n+\n+#define Mask r30\n+\n+;; Signed / Unsigned widening 64 = 32 * 32 Multiplication without MUL\n+;;\n+;; R18[8] = R22[4] * R18[4]\n+;; Ordinary ABI Function\n+DEFUN __mulsidi3\n+    set\n+    skip\n+    ;; FALLTHRU\n+ENDF  __mulsidi3\n+\n+DEFUN __umulsidi3\n+    clt     ; skipped\n+    ;; Save 10 Registers: R10..R17, R28, R29\n+    do_prologue_saves 10\n+    ldi     Mask, 0xff\n+    bld     Mask, 7\n+    ;; Move B into place...\n+    wmov    B0, BB0\n+    wmov    B2, BB2\n+    ;; ...and extend it\n+    and     BB3, Mask\n+    lsl     BB3\n+    sbc     B4, B4\n+    mov     B5, B4\n+    wmov    B6, B4\n+    ;; Move A into place...\n+    wmov    A0, AA0\n+    wmov    A2, AA2\n+    ;; ...and extend it\n+    and     AA3, Mask\n+    lsl     AA3\n+    sbc     A4, A4\n+    mov     A5, A4\n+    wmov    A6, A4\n+    XCALL   __muldi3\n+    do_epilogue_restores 10\n+ENDF __umulsidi3\n+\n+#undef A0\n+#undef A1\n+#undef A2\n+#undef A3\n+#undef A4\n+#undef A5\n+#undef A6\n+#undef A7\n+#undef B0\n+#undef B1\n+#undef B2\n+#undef B3\n+#undef B4\n+#undef B5\n+#undef B6\n+#undef B7\n+#undef AA0\n+#undef AA1\n+#undef AA2\n+#undef AA3\n+#undef BB0\n+#undef BB1\n+#undef BB2\n+#undef BB3\n+#undef Mask\n+#endif /* L_mulsidi3 && !HAVE_MUL */\n \n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n \t\n@@ -1625,14 +1905,10 @@ DEFUN  __divdi3_moddi3\n \n 0:  ;; The Prologue\n     ;; Save 12 Registers:  Y, 17...8\n-    ;; No Frame needed (X = 0)\n-    clr r26\n-    clr r27\n-    ldi r30, lo8(gs(1f))\n-    ldi r31, hi8(gs(1f))\n-    XJMP __prologue_saves__ + ((18 - 12) * 2)\n-\n-1:  ;; SS.7 will contain the Sign of the Quotient  (A.sign * B.sign)\n+    ;; No Frame needed\n+    do_prologue_saves 12\n+\n+    ;; SS.7 will contain the Sign of the Quotient  (A.sign * B.sign)\n     ;; SS.6 will contain the Sign of the Remainder (A.sign)\n     mov     SS, A7\n     asr     SS\n@@ -1672,15 +1948,8 @@ DEFUN  __divdi3_moddi3\n #endif /* __AVR_HAVE_JMP_CALL__ */\n     XCALL   __negdi2\n \n-4:  ;; Epilogue: Restore the Z = 12 Registers and return\n-    in r28, __SP_L__\n-#if defined (__AVR_HAVE_SPH__)\n-    in r29, __SP_H__\n-#else\n-    clr r29\n-#endif /* #SP = 8/16 */\n-    ldi r30, 12\n-    XJMP __epilogue_restores__ + ((18 - 12) * 2)\n+4:  ;; Epilogue: Restore 12 Registers and return\n+    do_epilogue_restores 12\n \n ENDF __divdi3_moddi3\n "}, {"sha": "461304706d948475e00f27b99c51324354de6651", "filename": "libgcc/config/avr/t-avr", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e68a4ef6eaebf615da649555260e9c12e5ffb9bc/libgcc%2Fconfig%2Favr%2Ft-avr", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e68a4ef6eaebf615da649555260e9c12e5ffb9bc/libgcc%2Fconfig%2Favr%2Ft-avr", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Favr%2Ft-avr?ref=e68a4ef6eaebf615da649555260e9c12e5ffb9bc", "patch": "@@ -18,7 +18,8 @@ LIB1ASMFUNCS = \\\n \t_udivmodsi4 \\\n \t_divmodsi4 \\\n \t_divdi3 _udivdi3 \\\n-\t_muldi3 \\\n+\t_muldi3 _muldi3_6 \\\n+\t_mulsidi3 _umulsidi3 \\\n \t_udivmod64 \\\n \t_negsi2 _negdi2 \\\n \t_prologue \\\n@@ -69,6 +70,8 @@ LIB1ASMFUNCS += \\\n \t_mulhq3 _muluhq3 \\\n \t_mulha3 _muluha3 _muluha3_round \\\n \t_mulsa3 _mulusa3 \\\n+\t_usmuluha3 _ssmulha3 \\\n+\t_usmulusa3 _ssmulsa3 \\\n \t_divqq3 _udivuqq3 _divqq_helper \\\n \t_divhq3 _udivuhq3 \\\n \t_divha3 _udivuha3 \\\n@@ -260,3 +263,15 @@ LIB2FUNCS_EXCLUDE += \\\n LIB2FUNCS_EXCLUDE += \\\n \t$(foreach func,_div,\\\n \t$(foreach mode,$(sdiv_modes) $(udiv_modes),$(func_X)))\n+\n+\n+ssmul_modes =  HA  SA\n+usmul_modes = UHA USA\n+\n+LIB2FUNCS_EXCLUDE += \\\n+\t$(foreach func,_usmul,\\\n+\t$(foreach mode,$(usmul_modes),$(func_X)))\n+\n+LIB2FUNCS_EXCLUDE += \\\n+\t$(foreach func,_ssmul,\\\n+\t$(foreach mode,$(ssmul_modes),$(func_X)))"}]}