{"sha": "a5db70e78af095a3d8e4744f21059448056fa47b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTVkYjcwZTc4YWYwOTVhM2Q4ZTQ3NDRmMjEwNTk0NDgwNTZmYTQ3Yg==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2021-02-13T21:43:22Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-06-15T10:19:10Z"}, "message": "[Ada] Fix bug in subtype of private type with invariants\n\ngcc/ada/\n\n\t* sem_util.adb (Propagate_Invariant_Attributes): Call\n\tSet_Has_Own_Invariants on the base type, because these are\n\tBase_Type_Only. The problem is that the base type of a type is\n\tindeed a base type when Set_Base_Type is called, but then the\n\ttype is mutated into a subtype in rare cases.\n\t* atree.ads, atree.adb (Is_Entity): Export. Correct subtype of\n\tparameter in body.\n\t* gen_il-gen.adb: Improve getters so that \"Pre => ...\" can refer\n\tto the value of the field. Put Warnings (Off) on some with\n\tclauses that are not currently used, but might be used by such\n\tPre's.", "tree": {"sha": "7eb2485f98fc8116b71f74a47df1f648e323a043", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7eb2485f98fc8116b71f74a47df1f648e323a043"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5db70e78af095a3d8e4744f21059448056fa47b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5db70e78af095a3d8e4744f21059448056fa47b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5db70e78af095a3d8e4744f21059448056fa47b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5db70e78af095a3d8e4744f21059448056fa47b/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed17bbe3c3ac0a5afd866030d88dce3f6d5a2730", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed17bbe3c3ac0a5afd866030d88dce3f6d5a2730", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed17bbe3c3ac0a5afd866030d88dce3f6d5a2730"}], "stats": {"total": 60, "additions": 40, "deletions": 20}, "files": [{"sha": "541655c466fd178347e98879f0fe491b012ac760", "filename": "gcc/ada/atree.adb", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5db70e78af095a3d8e4744f21059448056fa47b/gcc%2Fada%2Fatree.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5db70e78af095a3d8e4744f21059448056fa47b/gcc%2Fada%2Fatree.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.adb?ref=a5db70e78af095a3d8e4744f21059448056fa47b", "patch": "@@ -139,10 +139,6 @@ package body Atree is\n    -- Local Subprograms --\n    -----------------------\n \n-   function Is_Entity (N : Node_Or_Entity_Id) return Boolean;\n-   pragma Inline (Is_Entity);\n-   --  Returns True if N is an entity\n-\n    function Allocate_New_Node (Kind : Node_Kind) return Node_Id;\n    pragma Inline (Allocate_New_Node);\n    --  Allocate a new node or first part of a node extension. Initialize the\n@@ -1435,7 +1431,7 @@ package body Atree is\n    -- Is_Entity --\n    ---------------\n \n-   function Is_Entity (N : Node_Id) return Boolean is\n+   function Is_Entity (N : Node_Or_Entity_Id) return Boolean is\n    begin\n       return Nkind (N) in N_Entity;\n    end Is_Entity;"}, {"sha": "c814c80cefa6a88f27adfe0f1032360f514f4c53", "filename": "gcc/ada/atree.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5db70e78af095a3d8e4744f21059448056fa47b/gcc%2Fada%2Fatree.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5db70e78af095a3d8e4744f21059448056fa47b/gcc%2Fada%2Fatree.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.ads?ref=a5db70e78af095a3d8e4744f21059448056fa47b", "patch": "@@ -222,6 +222,10 @@ package Atree is\n    --  Called to unlock node modifications when assertions are enabled; if\n    --  assertions are not enabled calling this subprogram has no effect.\n \n+   function Is_Entity (N : Node_Or_Entity_Id) return Boolean;\n+   pragma Inline (Is_Entity);\n+   --  Returns True if N is an entity\n+\n    function New_Node\n      (New_Node_Kind : Node_Kind;\n       New_Sloc      : Source_Ptr) return Node_Id;"}, {"sha": "70557296a0327173708bf1d9d053bd0cd3d9b0a3", "filename": "gcc/ada/gen_il-gen.adb", "status": "modified", "additions": 31, "deletions": 13, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5db70e78af095a3d8e4744f21059448056fa47b/gcc%2Fada%2Fgen_il-gen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5db70e78af095a3d8e4744f21059448056fa47b/gcc%2Fada%2Fgen_il-gen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgen_il-gen.adb?ref=a5db70e78af095a3d8e4744f21059448056fa47b", "patch": "@@ -1508,28 +1508,39 @@ package body Gen_IL.Gen is\n       end Put_Getter_Decl;\n \n       procedure Put_Getter_Body (S : in out Sink'Class; F : Field_Enum) is\n+         Rec : Field_Info renames Field_Table (F).all;\n       begin\n+         --  Note that we store the result in a local constant below, so that\n+         --  the \"Pre => ...\" can refer to it. The constant is called Val so\n+         --  that it has the same name as the formal of the setter, so the\n+         --  \"Pre => ...\" can refer to it by the same name in both getter\n+         --  and setter.\n+\n          Put_Getter_Spec (S, F);\n          Put (S, \" is\\n\");\n+         Indent (S, 3);\n+         Put (S, \"Val : constant \\1 := \\2 (\\3, \\4);\\n\",\n+              Get_Set_Id_Image (Rec.Field_Type),\n+              Low_Level_Getter (Rec.Field_Type),\n+              Node_To_Fetch_From (F),\n+              Image (Rec.Offset));\n+         Outdent (S, 3);\n          Put (S, \"begin\\n\");\n          Indent (S, 3);\n \n-         if Field_Table (F).Pre.all /= \"\" then\n-            Put (S, \"pragma Assert (\\1);\\n\", Field_Table (F).Pre.all);\n+         if Rec.Pre.all /= \"\" then\n+            Put (S, \"pragma Assert (\\1);\\n\", Rec.Pre.all);\n          end if;\n \n-         Put (S, \"return \\1 (\\2, \\3);\\n\",\n-              Low_Level_Getter (Field_Table (F).Field_Type),\n-              Node_To_Fetch_From (F),\n-              Image (Field_Table (F).Offset));\n+         Put (S, \"return Val;\\n\");\n          Outdent (S, 3);\n          Put (S, \"end \\1;\\n\\n\", Image (F));\n       end Put_Getter_Body;\n \n       procedure Put_Setter_Spec (S : in out Sink'Class; F : Field_Enum) is\n          Rec    : Field_Info renames Field_Table (F).all;\n          Default : constant String :=\n-           (if Field_Table (F).Field_Type = Flag then \" := True\" else \"\");\n+           (if Rec.Field_Type = Flag then \" := True\" else \"\");\n       begin\n          Put (S, \"procedure Set_\\1\\n\", Image (F));\n          Indent (S, 2);\n@@ -1550,11 +1561,13 @@ package body Gen_IL.Gen is\n       end Put_Setter_Decl;\n \n       procedure Put_Setter_Body (S : in out Sink'Class; F : Field_Enum) is\n+         Rec : Field_Info renames Field_Table (F).all;\n+\n          --  If Type_Only was specified in the call to Create_Semantic_Field,\n          --  then we assert that the node is a base (etc) type.\n \n          Type_Only_Assertion : constant String :=\n-           (case Field_Table (F).Type_Only is\n+           (case Rec.Type_Only is\n               when No_Type_Only => \"\",\n               when Base_Type_Only => \"Is_Base_Type (N)\",\n --  ????It seems like we should call Is_Implementation_Base_Type or\n@@ -1570,8 +1583,8 @@ package body Gen_IL.Gen is\n          Put (S, \"begin\\n\");\n          Indent (S, 3);\n \n-         if Field_Table (F).Pre.all /= \"\" then\n-            Put (S, \"pragma Assert (\\1);\\n\", Field_Table (F).Pre.all);\n+         if Rec.Pre.all /= \"\" then\n+            Put (S, \"pragma Assert (\\1);\\n\", Rec.Pre.all);\n          end if;\n \n          if Type_Only_Assertion /= \"\" then\n@@ -1580,7 +1593,7 @@ package body Gen_IL.Gen is\n \n          Put (S, \"\\1 (N, \\2, Val);\\n\",\n               Low_Level_Setter (F),\n-              Image (Field_Table (F).Offset));\n+              Image (Rec.Offset));\n          Outdent (S, 3);\n          Put (S, \"end Set_\\1;\\n\\n\", Image (F));\n       end Put_Setter_Body;\n@@ -2034,9 +2047,11 @@ package body Gen_IL.Gen is\n \n       begin\n          Put (S, \"with Seinfo; use Seinfo;\\n\");\n-         Put (S, \"pragma Warnings (Off); -- ????\\n\");\n+         Put (S, \"pragma Warnings (Off);\\n\");\n+         --  With's included in case they are needed; so we don't have to keep\n+         --  switching back and forth.\n          Put (S, \"with Output; use Output;\\n\");\n-         Put (S, \"pragma Warnings (On); -- ????\\n\");\n+         Put (S, \"pragma Warnings (On);\\n\");\n \n          Put (S, \"\\npackage Sinfo.Nodes is\\n\\n\");\n          Indent (S, 3);\n@@ -2061,6 +2076,9 @@ package body Gen_IL.Gen is\n \n          Put (B, \"with Atree; use Atree; use Atree.Atree_Private_Part;\\n\");\n          Put (B, \"with Nlists; use Nlists;\\n\");\n+         Put (B, \"pragma Warnings (Off);\\n\");\n+         Put (B, \"with Einfo.Utils; use Einfo.Utils;\\n\");\n+         Put (B, \"pragma Warnings (On);\\n\");\n \n          Put (B, \"\\npackage body Sinfo.Nodes is\\n\\n\");\n          Indent (B, 3);"}, {"sha": "01690f3a35e7f9774a77d17fc1447d6289e2e343", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5db70e78af095a3d8e4744f21059448056fa47b/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5db70e78af095a3d8e4744f21059448056fa47b/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=a5db70e78af095a3d8e4744f21059448056fa47b", "patch": "@@ -26215,7 +26215,9 @@ package body Sem_Util is\n          Part_IP := Partial_Invariant_Procedure (From_Typ);\n \n          --  The setting of the attributes is intentionally conservative. This\n-         --  prevents accidental clobbering of enabled attributes.\n+         --  prevents accidental clobbering of enabled attributes. We need to\n+         --  call Base_Type twice, because it is sometimes not set to an actual\n+         --  base type.\n \n          if Has_Inheritable_Invariants (From_Typ) then\n             Set_Has_Inheritable_Invariants (Typ);\n@@ -26226,7 +26228,7 @@ package body Sem_Util is\n          end if;\n \n          if Has_Own_Invariants (From_Typ) then\n-            Set_Has_Own_Invariants (Base_Type (Typ));\n+            Set_Has_Own_Invariants (Base_Type (Base_Type (Typ)));\n          end if;\n \n          if Present (Full_IP) and then No (Invariant_Procedure (Typ)) then"}]}