{"sha": "99444711eb29bad45ee68377af044e4a4568a217", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTk0NDQ3MTFlYjI5YmFkNDVlZTY4Mzc3YWYwNDRlNGE0NTY4YTIxNw==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2000-03-26T20:33:04Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2000-03-26T20:33:04Z"}, "message": "[multiple changes]\n\n2000-03-26  Tom Tromey  <tromey@cygnus.com>\n\n\t* java/lang/mprec.h: Use SIZEOF_VOID_P.\n\t* interpret.cc: Use SIZEOF_VOID_P.\n\t* include/java-cpool.h (_Jv_storeLong): Use SIZEOF_VOID_P.\n\t(_Jv_loadLong): Likewise.\n\t(_Jv_storeDouble): Likewise.\n\t* configure: Rebuilt.\n\t* configure.in: Check size of void*.\n\n\t* resolve.cc (ncode): Use FFI_PREP_RAW_CLOSURE and FFI_RAW_SIZE.\n\n2000-03-26  Hans Boehm  <boehm@acm.org>\n\n\t* include/java-cpool.h (_Jv_storeLong, _Jv_loadLong,\n\t_Jv_storeDouble, _Jv_loadDouble): Define differently on 64 bit\n\tmachine.\n\t* java/lang/ieeefp.h: Define __IEEE_BIG_ENDIAN or\n\t__IEEE_LITTLE_ENDIAN appropriately on IA64.\n\t* java/lang/mprec.h: Don't define Pack_32 on 64 bit machine.\n\t* javaprims.h (_Jv_word): Added `l' and `d' entries in 64 bit\n\tcase.\n\t* resolve.cc (FFI_PREP_RAW_CLOSURE): New define.\n\t(FFI_RAW_SIZE): Likewise.\n\t(_Jv_InterpMethod::ncode): Use them.\n\t* interpret.cc (PUSHL, PUSHD, POPL, POPD, LOADL, LOADD, STOREL,\n\tSTORED): Define differently on a 64 bit machine.\n\t(continue1): Use ffi_java_raw_call when appropriate.\n\nFrom-SVN: r32754", "tree": {"sha": "316c5bb1d7d3464e8a5a904b6040f521f3b9a97f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/316c5bb1d7d3464e8a5a904b6040f521f3b9a97f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99444711eb29bad45ee68377af044e4a4568a217", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99444711eb29bad45ee68377af044e4a4568a217", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99444711eb29bad45ee68377af044e4a4568a217", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99444711eb29bad45ee68377af044e4a4568a217/comments", "author": null, "committer": null, "parents": [{"sha": "71c9404e8b052c072f44a55e1c85014a031d7611", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71c9404e8b052c072f44a55e1c85014a031d7611", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71c9404e8b052c072f44a55e1c85014a031d7611"}], "stats": {"total": 153, "additions": 122, "deletions": 31}, "files": [{"sha": "3f42bfba17a7572c538deb476d678fda5e797223", "filename": "libjava/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99444711eb29bad45ee68377af044e4a4568a217/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99444711eb29bad45ee68377af044e4a4568a217/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=99444711eb29bad45ee68377af044e4a4568a217", "patch": "@@ -1,3 +1,32 @@\n+2000-03-26  Tom Tromey  <tromey@cygnus.com>\n+\n+\t* java/lang/mprec.h: Use SIZEOF_VOID_P.\n+\t* interpret.cc: Use SIZEOF_VOID_P.\n+\t* include/java-cpool.h (_Jv_storeLong): Use SIZEOF_VOID_P.\n+\t(_Jv_loadLong): Likewise.\n+\t(_Jv_storeDouble): Likewise.\n+\t* configure: Rebuilt.\n+\t* configure.in: Check size of void*.\n+\n+\t* resolve.cc (ncode): Use FFI_PREP_RAW_CLOSURE and FFI_RAW_SIZE.\n+\n+2000-03-26  Hans Boehm  <boehm@acm.org>\n+\n+\t* include/java-cpool.h (_Jv_storeLong, _Jv_loadLong,\n+\t_Jv_storeDouble, _Jv_loadDouble): Define differently on 64 bit\n+\tmachine.\n+\t* java/lang/ieeefp.h: Define __IEEE_BIG_ENDIAN or\n+\t__IEEE_LITTLE_ENDIAN appropriately on IA64.\n+\t* java/lang/mprec.h: Don't define Pack_32 on 64 bit machine.\n+\t* javaprims.h (_Jv_word): Added `l' and `d' entries in 64 bit\n+\tcase.\n+\t* resolve.cc (FFI_PREP_RAW_CLOSURE): New define.\n+\t(FFI_RAW_SIZE): Likewise.\n+\t(_Jv_InterpMethod::ncode): Use them.\n+\t* interpret.cc (PUSHL, PUSHD, POPL, POPD, LOADL, LOADD, STOREL,\n+\tSTORED): Define differently on a 64 bit machine.\n+\t(continue1): Use ffi_java_raw_call when appropriate.\n+ \n 2000-03-24  Warren Levy  <warrenl@cygnus.com>\n \n \t* java/math/BigInteger.java(divide): Handle the special case when"}, {"sha": "07a6fafb09f9fead8679e997f7f1c0dc8b20040a", "filename": "libjava/configure.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99444711eb29bad45ee68377af044e4a4568a217/libjava%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99444711eb29bad45ee68377af044e4a4568a217/libjava%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure.in?ref=99444711eb29bad45ee68377af044e4a4568a217", "patch": "@@ -573,6 +573,9 @@ else\n    fi\n fi\n \n+dnl FIXME: cross compilation\n+AC_CHECK_SIZEOF(void *)\n+\n ZLIBS=\n ZDEPS=\n ZINCS="}, {"sha": "4216b4c0a98edb18e7e511f1f569d38b0bead424", "filename": "libjava/gcj/javaprims.h", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99444711eb29bad45ee68377af044e4a4568a217/libjava%2Fgcj%2Fjavaprims.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99444711eb29bad45ee68377af044e4a4568a217/libjava%2Fgcj%2Fjavaprims.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgcj%2Fjavaprims.h?ref=99444711eb29bad45ee68377af044e4a4568a217", "patch": "@@ -285,7 +285,16 @@ typedef union {\n   jint ia[1];\t\t\t// Half of _Jv_word2.\n   void* p;\n \n-  // these are things we will store in the constant \n+  // We use __LP64__ and not SIZEOF_VOID_P here because we want\n+  // something that will be predefined by the compiler.  FIXME -- this\n+  // definition probably shouldn't appear here anyway.\n+#ifdef __LP64__\n+  // We can safely put a long or a double in here without increasing\n+  // the size of _Jv_Word; we take advantage of this in the interpreter.\n+  jlong l;\n+  jdouble d;\n+#endif\n+\n   jclass                     clazz;\n   jstring                    string;\n   struct _Jv_Field          *field;"}, {"sha": "0fb3d7d0cb17ad01e79c791293918d4f8327f81f", "filename": "libjava/include/default-signal.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99444711eb29bad45ee68377af044e4a4568a217/libjava%2Finclude%2Fdefault-signal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99444711eb29bad45ee68377af044e4a4568a217/libjava%2Finclude%2Fdefault-signal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fdefault-signal.h?ref=99444711eb29bad45ee68377af044e4a4568a217", "patch": "@@ -13,8 +13,8 @@ details.  */\n \n #ifdef SJLJ_EXCEPTIONS\n \n-#define HANDLE_SEGV\n-#define HANDLE_FPE\n+#define HANDLE_SEGV 1\n+#define HANDLE_FPE 1\n \n #include <signal.h>\n "}, {"sha": "c636e4c6bca11463e95e924b86e9cea9170374db", "filename": "libjava/include/java-cpool.h", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99444711eb29bad45ee68377af044e4a4568a217/libjava%2Finclude%2Fjava-cpool.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99444711eb29bad45ee68377af044e4a4568a217/libjava%2Finclude%2Fjava-cpool.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjava-cpool.h?ref=99444711eb29bad45ee68377af044e4a4568a217", "patch": "@@ -1,6 +1,6 @@\n // java-cpool.h - Constant pool parsing header.  -*- c++ -*-\n \n-/* Copyright (C) 1999  Free Software Foundation\n+/* Copyright (C) 1999, 2000  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -80,37 +80,53 @@ _Jv_loadInt (_Jv_word *data)\n extern inline void\n _Jv_storeLong (_Jv_word *data, jlong l)\n {\n+#if SIZEOF_VOID_P == 8\n+  data[0].l = l;\n+#else\n   _Jv_word2 tmp;\n   tmp.l = l;\n   data[0].ia[0] = tmp.ia[0];\n   data[1].ia[0] = tmp.ia[1];\n+#endif\n }\n \n extern inline jlong\n _Jv_loadLong (_Jv_word *data)\n {\n+#if SIZEOF_VOID_P == 8\n+  return data -> l;\n+#else\n   _Jv_word2 tmp;\n   tmp.ia[0] = data[0].ia[0];\n   tmp.ia[1] = data[1].ia[0];\n   return tmp.l;\n+#endif\n }\n \n extern inline void\n _Jv_storeDouble (_Jv_word *data, jdouble d)\n {\n+#if SIZEOF_VOID_P == 8\n+  data[0].d = d;\n+#else\n   _Jv_word2 tmp;\n   tmp.d = d;\n   data[0].ia[0] = tmp.ia[0];\n   data[1].ia[0] = tmp.ia[1];\n+#endif\n }\n \n extern inline jdouble\n _Jv_loadDouble (_Jv_word *data)\n {\n+#if SIZEOF_VOID_P == 8\n+  return data -> d;\n+#else\n   _Jv_word2 tmp;\n   tmp.ia[0] = data[0].ia[0];\n   tmp.ia[1] = data[1].ia[0];\n   return tmp.d;\n+#endif\n }\n \n "}, {"sha": "d6d29582ec909da882707cae5a2405e3c31c5ab9", "filename": "libjava/interpret.cc", "status": "modified", "additions": 45, "deletions": 20, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99444711eb29bad45ee68377af044e4a4568a217/libjava%2Finterpret.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99444711eb29bad45ee68377af044e4a4568a217/libjava%2Finterpret.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finterpret.cc?ref=99444711eb29bad45ee68377af044e4a4568a217", "patch": "@@ -77,41 +77,60 @@ static inline void dupx (_Jv_word *sp, int n, int x)\n #define PUSHA(V)  (sp++)->o = (V)\n #define PUSHI(V)  (sp++)->i = (V)\n #define PUSHF(V)  (sp++)->f = (V)\n-#define PUSHL(V)  do { _Jv_word2 w2; w2.l=(V); \\\n-                     (sp++)->ia[0] = w2.ia[0]; \\\n-                     (sp++)->ia[0] = w2.ia[1]; } while (0)\n-#define PUSHD(V)  do { _Jv_word2 w2; w2.d=(V); \\\n-                     (sp++)->ia[0] = w2.ia[0]; \\\n-                     (sp++)->ia[0] = w2.ia[1]; } while (0)\n+#if SIZEOF_VOID_P == 8\n+# define PUSHL(V)   (sp->l = (V), sp += 2)\n+# define PUSHD(V)   (sp->d = (V), sp += 2)\n+#else\n+# define PUSHL(V)  do { _Jv_word2 w2; w2.l=(V); \\\n+                        (sp++)->ia[0] = w2.ia[0]; \\\n+                        (sp++)->ia[0] = w2.ia[1]; } while (0)\n+# define PUSHD(V)  do { _Jv_word2 w2; w2.d=(V); \\\n+                        (sp++)->ia[0] = w2.ia[0]; \\\n+                        (sp++)->ia[0] = w2.ia[1]; } while (0)\n+#endif\n \n #define POPA()    ((--sp)->o)\n #define POPI()    ((jint) (--sp)->i) // cast since it may be promoted\n #define POPF()    ((jfloat) (--sp)->f)\n-#define POPL()    ({ _Jv_word2 w2; \\\n+#if SIZEOF_VOID_P == 8\n+# define POPL()\t  (sp -= 2, (jlong) sp->l)\n+# define POPD()\t  (sp -= 2, (jdouble) sp->d)\n+#else\n+# define POPL()    ({ _Jv_word2 w2; \\\n                      w2.ia[1] = (--sp)->ia[0]; \\\n                      w2.ia[0] = (--sp)->ia[0]; w2.l; })\n-#define POPD()    ({ _Jv_word2 w2; \\\n+# define POPD()    ({ _Jv_word2 w2; \\\n                      w2.ia[1] = (--sp)->ia[0]; \\\n                      w2.ia[0] = (--sp)->ia[0]; w2.d; })\n+#endif\n \n #define LOADA(I)  (sp++)->o = locals[I].o\n #define LOADI(I)  (sp++)->i = locals[I].i\n #define LOADF(I)  (sp++)->f = locals[I].f\n-#define LOADL(I)  do { jint __idx = (I); \\\n-    (sp++)->ia[0] = locals[__idx].ia[0]; \\\n-    (sp++)->ia[0] = locals[__idx+1].ia[0]; \\\n- } while (0)\n-#define LOADD(I)  LOADL(I)\n-\n+#if SIZEOF_VOID_P == 8\n+# define LOADL(I)  (sp->l = locals[I].l, sp += 2)\n+# define LOADD(I)  (sp->d = locals[I].d, sp += 2)\n+#else\n+# define LOADL(I)  do { jint __idx = (I); \\\n+    \t\t\t(sp++)->ia[0] = locals[__idx].ia[0]; \\\n+    \t\t\t(sp++)->ia[0] = locals[__idx+1].ia[0]; \\\n+ \t\t   } while (0)\n+# define LOADD(I)  LOADL(I)\n+#endif\n \n #define STOREA(I) locals[I].o = (--sp)->o\n #define STOREI(I) locals[I].i = (--sp)->i\n #define STOREF(I) locals[I].f = (--sp)->f\n-#define STOREL(I) do { jint __idx = (I); \\\n-    locals[__idx+1].ia[0] = (--sp)->ia[0]; \\\n-    locals[__idx].ia[0] = (--sp)->ia[0]; \\\n- } while (0)\n-#define STORED(I) STOREL(I)\n+#if SIZEOF_VOID_P == 8\n+# define STOREL(I) (sp -= 2, locals[I].l = sp->l)\n+# define STORED(I) (sp -= 2, locals[I].d = sp->d)\n+#else\n+# define STOREL(I) do { jint __idx = (I); \\\n+    \t\t       locals[__idx+1].ia[0] = (--sp)->ia[0]; \\\n+    \t\t       locals[__idx].ia[0] = (--sp)->ia[0]; \\\n+\t\t   } while (0)\n+# define STORED(I) STOREL(I)\n+#endif\n \n #define PEEKI(I)  (locals+(I))->i\n #define PEEKA(I)  (locals+(I))->o\n@@ -199,7 +218,7 @@ _Jv_InterpMethod::run (ffi_cif* cif,\n   _Jv_word *locals = inv->local_base ();\n \n   /* Go straight at it!  the ffi raw format matches the internal\n-     stack representation exactly.  At leat, that's the idea.\n+     stack representation exactly.  At least, that's the idea.\n   */\n   memcpy ((void*) locals, (void*) args, args_raw_size);\n \n@@ -693,7 +712,13 @@ void _Jv_InterpMethod::continue1 (_Jv_InterpMethodInvocation *inv)\n \n \tjdouble rvalue;\n \n+#if FFI_NATIVE_RAW_API\n+\t/* We assume that this is only implemented if it's correct\t*/\n+\t/* to use it here.  On a 64 bit machine, it never is.\t\t*/\n \tffi_raw_call (cif, fun, (void*)&rvalue, raw);\n+#else\n+\tffi_java_raw_call (cif, fun, (void*)&rvalue, raw);\n+#endif\n \n \tint rtype = cif->rtype->type;\n "}, {"sha": "4baac323ad31f9f55ced7619f7c0be9ddedf7068", "filename": "libjava/java/lang/mprec.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99444711eb29bad45ee68377af044e4a4568a217/libjava%2Fjava%2Flang%2Fmprec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99444711eb29bad45ee68377af044e4a4568a217/libjava%2Fjava%2Flang%2Fmprec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2Fmprec.h?ref=99444711eb29bad45ee68377af044e4a4568a217", "patch": "@@ -284,9 +284,11 @@ extern double rnd_prod(double, double), rnd_quot(double, double);\n  */\n \n #ifndef Pack_32\n+#if SIZEOF_VOID_P != 8\n #define Pack_32\n #endif\n #endif\n+#endif\n \n \n #define MAX_BIGNUMS 16"}, {"sha": "ab1fafb6c82681f4a2af406b7125455dff1ab778", "filename": "libjava/resolve.cc", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99444711eb29bad45ee68377af044e4a4568a217/libjava%2Fresolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99444711eb29bad45ee68377af044e4a4568a217/libjava%2Fresolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fresolve.cc?ref=99444711eb29bad45ee68377af044e4a4568a217", "patch": "@@ -1045,6 +1045,13 @@ init_cif (_Jv_Utf8Const* signature,\n   return item_count;\n }\n \n+#if FFI_NATIVE_RAW_API\n+#   define FFI_PREP_RAW_CLOSURE ffi_prep_raw_closure\n+#   define FFI_RAW_SIZE ffi_raw_size\n+#else\n+#   define FFI_PREP_RAW_CLOSURE ffi_prep_java_raw_closure\n+#   define FFI_RAW_SIZE ffi_java_raw_size\n+#endif\n \n /* we put this one here, and not in interpret.cc because it\n  * calls the utility routines count_arguments \n@@ -1083,7 +1090,7 @@ _Jv_InterpMethod::ncode ()\n \n   ffi_closure_fun fun;\n \n-  args_raw_size = ffi_raw_size (&closure->cif);\n+  args_raw_size = FFI_RAW_SIZE (&closure->cif);\n \n   JvAssert ((self->accflags & Modifier::NATIVE) == 0);\n \n@@ -1099,10 +1106,10 @@ _Jv_InterpMethod::ncode ()\n       fun = (ffi_closure_fun)&_Jv_InterpMethod::run_normal;\n     }\n \n-  ffi_prep_raw_closure (&closure->closure,\n-\t\t\t&closure->cif, \n-\t\t\tfun,\n-\t\t\t(void*) this);\n+  FFI_PREP_RAW_CLOSURE (&closure->closure,\n+\t\t        &closure->cif, \n+\t\t        fun,\n+\t\t        (void*)this);\n \n   self->ncode = (void*)closure;\n   return self->ncode;\n@@ -1134,7 +1141,7 @@ _Jv_JNIMethod::ncode ()\n \n   ffi_closure_fun fun;\n \n-  args_raw_size = ffi_raw_size (&closure->cif);\n+  args_raw_size = FFI_RAW_SIZE (&closure->cif);\n \n   // Initialize the argument types and CIF that represent the actual\n   // underlying JNI function.\n@@ -1161,7 +1168,7 @@ _Jv_JNIMethod::ncode ()\n   // interpreted code use JNI.\n   fun = (ffi_closure_fun) &_Jv_JNIMethod::call;\n \n-  ffi_prep_raw_closure (&closure->closure,\n+  FFI_PREP_RAW_CLOSURE (&closure->closure,\n \t\t\t&closure->cif, \n \t\t\tfun,\n \t\t\t(void*) this);"}]}