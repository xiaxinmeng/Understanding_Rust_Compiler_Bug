{"sha": "cb168f779c87c1e0c37d22ea82dfb93ff8c873bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2IxNjhmNzc5Yzg3YzFlMGMzN2QyMmVhODJkZmI5M2ZmOGM4NzNiYw==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-02-11T15:59:54Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-02-11T15:59:54Z"}, "message": "c++: Fix ICE from op_unqualified_lookup [PR97582]\n\nIn this testcase, we're crashing because the lookup of operator+ from\nwithin the generic lambda via lookup_name finds multiple bindings\n(C1::operator+ and C2::operator+) and returns a TREE_LIST thereof,\nsomething which op_unqualified_lookup (and push_operator_bindings) isn't\nprepared to handle.\n\nThis patch extends op_unqualified_lookup and push_operator_bindings\nto handle such an ambiguous lookup result in the natural way.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/97582\n\t* name-lookup.c (op_unqualified_lookup): Handle an ambiguous\n\tlookup result by discarding it if the first element is a\n\tclass-scope declaration, otherwise return it.\n\t(push_operator_bindings): Handle an ambiguous lookup result by\n\tdoing push_local_binding on each element in the list.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/97582\n\t* g++.dg/cpp0x/lambda/lambda-template17.C: New test.", "tree": {"sha": "16f4421193ce9ad7b934fa31438a98757cd4d93f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16f4421193ce9ad7b934fa31438a98757cd4d93f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb168f779c87c1e0c37d22ea82dfb93ff8c873bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb168f779c87c1e0c37d22ea82dfb93ff8c873bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb168f779c87c1e0c37d22ea82dfb93ff8c873bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb168f779c87c1e0c37d22ea82dfb93ff8c873bc/comments", "author": null, "committer": null, "parents": [{"sha": "38c5703449c0638618ba6896f0d039c3868ad4e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38c5703449c0638618ba6896f0d039c3868ad4e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38c5703449c0638618ba6896f0d039c3868ad4e0"}], "stats": {"total": 26, "additions": 23, "deletions": 3}, "files": [{"sha": "1cd4f67b8b217c688d31788377e4c02b4fe16eb1", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb168f779c87c1e0c37d22ea82dfb93ff8c873bc/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb168f779c87c1e0c37d22ea82dfb93ff8c873bc/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=cb168f779c87c1e0c37d22ea82dfb93ff8c873bc", "patch": "@@ -9219,11 +9219,15 @@ op_unqualified_lookup (tree fnname)\n     /* Remember we found nothing!  */\n     return error_mark_node;\n \n-  tree d = is_overloaded_fn (fns) ? get_first_fn (fns) : fns;\n+  tree d = fns;\n+  if (TREE_CODE (d) == TREE_LIST)\n+    d = TREE_VALUE (d);\n+  if (is_overloaded_fn (d))\n+    d = get_first_fn (d);\n   if (DECL_CLASS_SCOPE_P (d))\n     /* We don't need to remember class-scope functions or declarations,\n        normal unqualified lookup will find them again.  */\n-    fns = NULL_TREE;\n+    return NULL_TREE;\n \n   return fns;\n }\n@@ -9302,7 +9306,11 @@ push_operator_bindings ()\n       if (tree val = TREE_VALUE (binds))\n \t{\n \t  tree name = TREE_PURPOSE (binds);\n-\t  push_local_binding (name, val, /*using*/true);\n+\t  if (TREE_CODE (val) == TREE_LIST)\n+\t    for (tree v = val; v; v = TREE_CHAIN (v))\n+\t      push_local_binding (name, TREE_VALUE (v), /*using*/true);\n+\t  else\n+\t    push_local_binding (name, val, /*using*/true);\n \t}\n }\n "}, {"sha": "ac6c2e2d4bc17afa9a12b5fc088269bb5d177130", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-template17.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb168f779c87c1e0c37d22ea82dfb93ff8c873bc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-template17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb168f779c87c1e0c37d22ea82dfb93ff8c873bc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-template17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-template17.C?ref=cb168f779c87c1e0c37d22ea82dfb93ff8c873bc", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/97582\n+// { dg-do compile { target c++11 } }\n+\n+struct C1 { void operator+(); };\n+struct C2 { void operator+(); };\n+struct C3 : C1, C2 {\n+  template <class T> void get() { [] (T x) { +x; }; } // { dg-error \"ambiguous\" }\n+};\n+\n+template void C3::get<C1>(); // { dg-bogus \"\" }\n+template void C3::get<C2>(); // { dg-bogus \"\" }\n+template void C3::get<C3>(); // { dg-message \"required from here\" }"}]}