{"sha": "693b297b72309b6db6898a334c24b777c0c69831", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjkzYjI5N2I3MjMwOWI2ZGI2ODk4YTMzNGMyNGI3NzdjMGM2OTgzMQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2014-10-22T17:29:14Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2014-10-22T17:29:14Z"}, "message": "Do not build soft-fp code at all for powerpc64-linux-gnu.\n\nWhen I added support for using soft-fp in libgcc\n<https://gcc.gnu.org/ml/gcc-patches/2006-03/msg00689.html>, libgcc\nconfiguration was still done in the gcc/ directory, meaning that the\nvariables set in makefile fragments could not depend on the multilib\nbeing built.  Thus, building the soft-fp code for powerpc64-linux-gnu\nwas disabled in the same way as had been done with fp-bit: the code\nwas built, but with #ifndef __powerpc64__ wrappers around it so that\nthe resulting objects were empty.\n\nNow that libgcc configuration is done in the toplevel libgcc\ndirectory, such uses of softfp_wrap_start / softfp_wrap_end are better\nreplaced by configure-time conditionals that determine whether to use\nsoft-fp for a given multilib.  This patch does so for\npowerpc*-*-linux*.  The same would appear to apply to\npowerpc*-*-freebsd* (using rs6000/t-freebsd64), but I have not made\nany changes there.  t-ppc64-fp is also used by AIX targets, but they\ndon't use soft-fp anyway so the changes are of no consequence to them.\n\nThe same principle of replacing softfp_wrap_start / softfp_wrap_end\nwith configure-time conditionals also applies to\nsoftfp_exclude_libgcc2, which was intended for cases where soft-fp is\nbeing used on hard-float multilibs and so it is desirable on those\nmultilibs for a few functions to come from libgcc2.c rather than\nsoft-fp (but the soft-fp versions would be more efficient on\nsoft-float multilibs).  Now we have hardfp.c and t-hardfp, those are\nbetter to use in that case, to minimize the size of the bulk of the\nfunctions that are only present for ABI compatibility and should never\nbe called by newly compiled code.\n\nI intend followup patches to switch 32-bit hard-float multilibs to use\nt-hardfp as far as possible (for all non-libgcc2.c operations for\nclassic hard float; for all except __unord* for e500v2; for all SFmode\noperations except __unordsf2 for e500v1).  After that will come making\nthe soft-fp operations, in the remaining cases for which they are\nbuilt because they are actually needed for code compiled by current\nGCC, into compat symbols when building for glibc 2.19 or later, so\nthat the glibc versions (with exception and rounding mode support) get\nused instead (2.19 or later is needed for all the functions to be\nexported from glibc as non-compat symbols).  In turn, that is required\nbefore implementing TARGET_ATOMIC_ASSIGN_EXPAND_FENV for soft-float\nand e500, as that can only be properly effective when GCC-compiled\ncode is actually interoperating correctly with the exception and\nrounding mode state used by <fenv.h> functions.\n\nTested with no regressions with cross to powerpc64-linux-gnu (in\naddition, verified that stripped libgcc_s.so.1 is identical before and\nafter the patch).\n\n\t* config.host (powerpc*-*-linux*): Only use soft-fp for 32-bit\n\tconfigurations.\n\t* config/rs6000/t-ppc64-fp (softfp_wrap_start, softfp_wrap_end):\n\tRemove variables.\n\nFrom-SVN: r216564", "tree": {"sha": "61af9a3ef4a83bcc0b4505dd107b7bc789ec995b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61af9a3ef4a83bcc0b4505dd107b7bc789ec995b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/693b297b72309b6db6898a334c24b777c0c69831", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/693b297b72309b6db6898a334c24b777c0c69831", "html_url": "https://github.com/Rust-GCC/gccrs/commit/693b297b72309b6db6898a334c24b777c0c69831", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/693b297b72309b6db6898a334c24b777c0c69831/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d790fd87092c08ef3cedc2c928abeae02a5e6c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d790fd87092c08ef3cedc2c928abeae02a5e6c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d790fd87092c08ef3cedc2c928abeae02a5e6c9"}], "stats": {"total": 15, "additions": 11, "deletions": 4}, "files": [{"sha": "14b0e364b3145f5116035f216a326e45c148cfd6", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/693b297b72309b6db6898a334c24b777c0c69831/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/693b297b72309b6db6898a334c24b777c0c69831/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=693b297b72309b6db6898a334c24b777c0c69831", "patch": "@@ -1,3 +1,10 @@\n+2014-10-22  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* config.host (powerpc*-*-linux*): Only use soft-fp for 32-bit\n+\tconfigurations.\n+\t* config/rs6000/t-ppc64-fp (softfp_wrap_start, softfp_wrap_end):\n+\tRemove variables.\n+\n 2014-10-22  Georg-Johann Lay  <avr@gjlay.de>\n \n \t* config/avr/lib1funcs.S (__do_global_dtors): Fix wrong code"}, {"sha": "10c25f5384f4aa39ffeb65952fa5fe25c808d52a", "filename": "libgcc/config.host", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/693b297b72309b6db6898a334c24b777c0c69831/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/693b297b72309b6db6898a334c24b777c0c69831/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=693b297b72309b6db6898a334c24b777c0c69831", "patch": "@@ -990,7 +990,10 @@ powerpc-*-rtems*)\n \textra_parts=\"$extra_parts crtbeginS.o crtendS.o crtbeginT.o ecrti.o ecrtn.o ncrti.o ncrtn.o\"\n \t;;\n powerpc*-*-linux*)\n-\ttmake_file=\"${tmake_file} rs6000/t-ppccomm rs6000/t-savresfgpr rs6000/t-crtstuff rs6000/t-linux t-softfp-sfdf t-softfp-excl t-dfprules rs6000/t-ppc64-fp t-softfp t-slibgcc-libgcc\"\n+\ttmake_file=\"${tmake_file} rs6000/t-ppccomm rs6000/t-savresfgpr rs6000/t-crtstuff rs6000/t-linux t-dfprules rs6000/t-ppc64-fp t-slibgcc-libgcc\"\n+\tif test \"${host_address}\" = 32; then\n+\t\ttmake_file=\"${tmake_file} t-softfp-sfdf t-softfp-excl t-softfp\"\n+\tfi\n \textra_parts=\"$extra_parts ecrti.o ecrtn.o ncrti.o ncrtn.o\"\n \tmd_unwind_header=rs6000/linux-unwind.h\n \t;;"}, {"sha": "26d1730bcdb6a535a2d99fe4f07ea5f81b2dc44a", "filename": "libgcc/config/rs6000/t-ppc64-fp", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/693b297b72309b6db6898a334c24b777c0c69831/libgcc%2Fconfig%2Frs6000%2Ft-ppc64-fp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/693b297b72309b6db6898a334c24b777c0c69831/libgcc%2Fconfig%2Frs6000%2Ft-ppc64-fp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Ft-ppc64-fp?ref=693b297b72309b6db6898a334c24b777c0c69831", "patch": "@@ -1,5 +1,2 @@\n # Can be used unconditionally, wrapped in __powerpc64__ || __64BIT__ __ppc64__.\n LIB2ADD += $(srcdir)/config/rs6000/ppc64-fp.c\n-\n-softfp_wrap_start := '\\#ifndef __powerpc64__'\n-softfp_wrap_end := '\\#endif'"}]}