{"sha": "995cc3691166fb8d2a7b9bb2d42e40153c5239f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTk1Y2MzNjkxMTY2ZmI4ZDJhN2I5YmIyZDQyZTQwMTUzYzUyMzlmMQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2006-09-07T17:53:18Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2006-09-07T17:53:18Z"}, "message": "i386.c (x86_partial_flag_reg_stall): New.\n\n2006-09-07  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* config/i386/i386.c (x86_partial_flag_reg_stall): New.\n\n\t* config/i386/i386.h (x86_partial_flag_reg_stall): New.\n\t(TARGET_PARTIAL_FLAG_REG_STALL): New.\n\n\t* config/i386/i386.md (*ashldi3_cmp_rex64): Disabled for\n\tTARGET_PARTIAL_FLAG_REG_STALL.\n\t(*ashldi3_cconly_rex64): Likewise.\n\t(*ashlsi3_cmp): Likewise.\n\t(*ashlsi3_cconly): Likewise.\n\t(*ashlsi3_cmp_zext): Likewise.\n\t(*ashlhi3_cmp): Likewise.\n\t(*ashlhi3_cconly): Likewise.\n\t(*ashlqi3_cmp): Likewise.\n\t(*ashlqi3_cconly): Likewise.\n\t(*ashrdi3_cmp_rex64): Likewise.\n\t(*ashrdi3_cconly_rex64): Likewise.\n\t(*ashrsi3_cmp): Likewise.\n\t(*ashrsi3_cconly): Likewise.\n\t(*ashrsi3_cmp_zext): Likewise.\n\t(*ashrhi3_cmp): Likewise.\n\t(*ashrhi3_cconly): Likewise.\n\t(*ashrqi3_cmp): Likewise.\n\t(*ashrqi3_cconly): Likewise.\n\t(*lshrdi3_cmp_rex64): Likewise.\n\t(*lshrdi3_cconly_rex64): Likewise.\n\t(*lshrsi3_cmp): Likewise.\n\t(*lshrsi3_cconly): Likewise.\n\t(*lshrsi3_cmp_zext): Likewise.\n\t(*lshrhi3_cmp): Likewise.\n\t(*lshrhi3_cconly): Likewise.\n\t(*lshrqi2_cmp): Likewise.\n\t(*lshrqi2_cconly): Likewise.\n\nFrom-SVN: r116757", "tree": {"sha": "9de973809cf8574e815e056b74a9754c0049c812", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9de973809cf8574e815e056b74a9754c0049c812"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/995cc3691166fb8d2a7b9bb2d42e40153c5239f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/995cc3691166fb8d2a7b9bb2d42e40153c5239f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/995cc3691166fb8d2a7b9bb2d42e40153c5239f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/995cc3691166fb8d2a7b9bb2d42e40153c5239f1/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f42684d5c9783dfd3084e6ae35b0dee780b5a2a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f42684d5c9783dfd3084e6ae35b0dee780b5a2a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f42684d5c9783dfd3084e6ae35b0dee780b5a2a8"}], "stats": {"total": 174, "additions": 147, "deletions": 27}, "files": [{"sha": "ec6214a384d176e1b5e28a7ce4fa19d45c8335cb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/995cc3691166fb8d2a7b9bb2d42e40153c5239f1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/995cc3691166fb8d2a7b9bb2d42e40153c5239f1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=995cc3691166fb8d2a7b9bb2d42e40153c5239f1", "patch": "@@ -1,3 +1,39 @@\n+2006-09-07  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* config/i386/i386.c (x86_partial_flag_reg_stall): New.\n+\n+\t* config/i386/i386.h (x86_partial_flag_reg_stall): New.\n+\t(TARGET_PARTIAL_FLAG_REG_STALL): New.\n+\n+\t* config/i386/i386.md (*ashldi3_cmp_rex64): Disabled for\n+\tTARGET_PARTIAL_FLAG_REG_STALL.\n+\t(*ashldi3_cconly_rex64): Likewise.\n+\t(*ashlsi3_cmp): Likewise.\n+\t(*ashlsi3_cconly): Likewise.\n+\t(*ashlsi3_cmp_zext): Likewise.\n+\t(*ashlhi3_cmp): Likewise.\n+\t(*ashlhi3_cconly): Likewise.\n+\t(*ashlqi3_cmp): Likewise.\n+\t(*ashlqi3_cconly): Likewise.\n+\t(*ashrdi3_cmp_rex64): Likewise.\n+\t(*ashrdi3_cconly_rex64): Likewise.\n+\t(*ashrsi3_cmp): Likewise.\n+\t(*ashrsi3_cconly): Likewise.\n+\t(*ashrsi3_cmp_zext): Likewise.\n+\t(*ashrhi3_cmp): Likewise.\n+\t(*ashrhi3_cconly): Likewise.\n+\t(*ashrqi3_cmp): Likewise.\n+\t(*ashrqi3_cconly): Likewise.\n+\t(*lshrdi3_cmp_rex64): Likewise.\n+\t(*lshrdi3_cconly_rex64): Likewise.\n+\t(*lshrsi3_cmp): Likewise.\n+\t(*lshrsi3_cconly): Likewise.\n+\t(*lshrsi3_cmp_zext): Likewise.\n+\t(*lshrhi3_cmp): Likewise.\n+\t(*lshrhi3_cconly): Likewise.\n+\t(*lshrqi2_cmp): Likewise.\n+\t(*lshrqi2_cconly): Likewise.\n+\n 2006-09-07 Uros Bizjak <uros@kss-loka.si>\n \n \tPR target/28946"}, {"sha": "f668782ed28881bc24deae383b959e110165e401", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/995cc3691166fb8d2a7b9bb2d42e40153c5239f1/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/995cc3691166fb8d2a7b9bb2d42e40153c5239f1/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=995cc3691166fb8d2a7b9bb2d42e40153c5239f1", "patch": "@@ -761,6 +761,7 @@ const int x86_use_sahf = m_PPRO | m_K6 | m_PENT4 | m_NOCONA | m_GENERIC32; /*m_G\n    with partial reg. dependencies used by Athlon/P4 based chips, it is better\n    to leave it off for generic32 for now.  */\n const int x86_partial_reg_stall = m_PPRO;\n+const int x86_partial_flag_reg_stall = m_GENERIC;\n const int x86_use_himode_fiop = m_386 | m_486 | m_K6;\n const int x86_use_simode_fiop = ~(m_PPRO | m_ATHLON_K8 | m_PENT | m_GENERIC);\n const int x86_use_mov0 = m_K6;"}, {"sha": "19cc5915720c92a0f05c3eecb86bc7aaa80b8b5d", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/995cc3691166fb8d2a7b9bb2d42e40153c5239f1/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/995cc3691166fb8d2a7b9bb2d42e40153c5239f1/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=995cc3691166fb8d2a7b9bb2d42e40153c5239f1", "patch": "@@ -164,6 +164,7 @@ extern const int x86_use_bt;\n extern const int x86_cmpxchg, x86_cmpxchg8b, x86_cmpxchg16b, x86_xadd;\n extern const int x86_use_incdec;\n extern const int x86_pad_returns;\n+extern const int x86_partial_flag_reg_stall;\n extern int x86_prefetch_sse;\n \n #define TARGET_USE_LEAVE (x86_use_leave & TUNEMASK)\n@@ -182,6 +183,7 @@ extern int x86_prefetch_sse;\n #define TARGET_USE_SAHF ((x86_use_sahf & TUNEMASK) && !TARGET_64BIT)\n #define TARGET_MOVX (x86_movx & TUNEMASK)\n #define TARGET_PARTIAL_REG_STALL (x86_partial_reg_stall & TUNEMASK)\n+#define TARGET_PARTIAL_FLAG_REG_STALL (x86_partial_flag_reg_stall & TUNEMASK)\n #define TARGET_USE_HIMODE_FIOP (x86_use_himode_fiop & TUNEMASK)\n #define TARGET_USE_SIMODE_FIOP (x86_use_simode_fiop & TUNEMASK)\n #define TARGET_USE_MOV0 (x86_use_mov0 & TUNEMASK)"}, {"sha": "639f0b44f744a814de9a770c92e42930349d66f5", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 108, "deletions": 27, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/995cc3691166fb8d2a7b9bb2d42e40153c5239f1/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/995cc3691166fb8d2a7b9bb2d42e40153c5239f1/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=995cc3691166fb8d2a7b9bb2d42e40153c5239f1", "patch": "@@ -10396,7 +10396,12 @@\n    (set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashift:DI (match_dup 1) (match_dup 2)))]\n   \"TARGET_64BIT && ix86_match_ccmode (insn, CCGOCmode)\n-   && ix86_binary_operator_ok (ASHIFT, DImode, operands)\"\n+   && ix86_binary_operator_ok (ASHIFT, DImode, operands)\n+   && (optimize_size\n+       || !TARGET_PARTIAL_FLAG_REG_STALL\n+       || (operands[2] == const1_rtx\n+\t   && (TARGET_SHIFT1\n+\t       || (TARGET_DOUBLE_WITH_ADD && REG_P (operands[0])))))\"\n {\n   switch (get_attr_type (insn))\n     {\n@@ -10432,7 +10437,12 @@\n \t  (const_int 0)))\n    (clobber (match_scratch:DI 0 \"=r\"))]\n   \"TARGET_64BIT && ix86_match_ccmode (insn, CCGOCmode)\n-   && ix86_binary_operator_ok (ASHIFT, DImode, operands)\"\n+   && ix86_binary_operator_ok (ASHIFT, DImode, operands)\n+   && (optimize_size\n+       || !TARGET_PARTIAL_FLAG_REG_STALL\n+       || (operands[2] == const1_rtx\n+\t   && (TARGET_SHIFT1\n+\t       || TARGET_DOUBLE_WITH_ADD)))\"\n {\n   switch (get_attr_type (insn))\n     {\n@@ -10713,7 +10723,12 @@\n    (set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashift:SI (match_dup 1) (match_dup 2)))]\n   \"ix86_match_ccmode (insn, CCGOCmode)\n-   && ix86_binary_operator_ok (ASHIFT, SImode, operands)\"\n+   && ix86_binary_operator_ok (ASHIFT, SImode, operands)\n+   && (optimize_size\n+       || !TARGET_PARTIAL_FLAG_REG_STALL\n+       || (operands[2] == const1_rtx\n+\t   && (TARGET_SHIFT1\n+\t       || (TARGET_DOUBLE_WITH_ADD && REG_P (operands[0])))))\"\n {\n   switch (get_attr_type (insn))\n     {\n@@ -10749,7 +10764,12 @@\n \t  (const_int 0)))\n    (clobber (match_scratch:SI 0 \"=r\"))]\n   \"ix86_match_ccmode (insn, CCGOCmode)\n-   && ix86_binary_operator_ok (ASHIFT, SImode, operands)\"\n+   && ix86_binary_operator_ok (ASHIFT, SImode, operands)\n+   && (optimize_size\n+       || !TARGET_PARTIAL_FLAG_REG_STALL\n+       || (operands[2] == const1_rtx\n+\t   && (TARGET_SHIFT1\n+\t       || TARGET_DOUBLE_WITH_ADD)))\"\n {\n   switch (get_attr_type (insn))\n     {\n@@ -10786,7 +10806,12 @@\n    (set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extend:DI (ashift:SI (match_dup 1) (match_dup 2))))]\n   \"TARGET_64BIT && ix86_match_ccmode (insn, CCGOCmode)\n-   && ix86_binary_operator_ok (ASHIFT, SImode, operands)\"\n+   && ix86_binary_operator_ok (ASHIFT, SImode, operands)\n+   && (optimize_size\n+       || !TARGET_PARTIAL_FLAG_REG_STALL\n+       || (operands[2] == const1_rtx\n+\t   && (TARGET_SHIFT1\n+\t       || TARGET_DOUBLE_WITH_ADD)))\"\n {\n   switch (get_attr_type (insn))\n     {\n@@ -10905,7 +10930,12 @@\n    (set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashift:HI (match_dup 1) (match_dup 2)))]\n   \"ix86_match_ccmode (insn, CCGOCmode)\n-   && ix86_binary_operator_ok (ASHIFT, HImode, operands)\"\n+   && ix86_binary_operator_ok (ASHIFT, HImode, operands)\n+   && (optimize_size\n+       || !TARGET_PARTIAL_FLAG_REG_STALL\n+       || (operands[2] == const1_rtx\n+\t   && (TARGET_SHIFT1\n+\t       || (TARGET_DOUBLE_WITH_ADD && REG_P (operands[0])))))\"\n {\n   switch (get_attr_type (insn))\n     {\n@@ -10941,7 +10971,12 @@\n \t  (const_int 0)))\n    (clobber (match_scratch:HI 0 \"=r\"))]\n   \"ix86_match_ccmode (insn, CCGOCmode)\n-   && ix86_binary_operator_ok (ASHIFT, HImode, operands)\"\n+   && ix86_binary_operator_ok (ASHIFT, HImode, operands)\n+   && (optimize_size\n+       || !TARGET_PARTIAL_FLAG_REG_STALL\n+       || (operands[2] == const1_rtx\n+\t   && (TARGET_SHIFT1\n+\t       || TARGET_DOUBLE_WITH_ADD)))\"\n {\n   switch (get_attr_type (insn))\n     {\n@@ -11099,7 +11134,12 @@\n    (set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm\")\n \t(ashift:QI (match_dup 1) (match_dup 2)))]\n   \"ix86_match_ccmode (insn, CCGOCmode)\n-   && ix86_binary_operator_ok (ASHIFT, QImode, operands)\"\n+   && ix86_binary_operator_ok (ASHIFT, QImode, operands)\n+   && (optimize_size\n+       || !TARGET_PARTIAL_FLAG_REG_STALL\n+       || (operands[2] == const1_rtx\n+\t   && (TARGET_SHIFT1\n+\t       || (TARGET_DOUBLE_WITH_ADD && REG_P (operands[0])))))\"\n {\n   switch (get_attr_type (insn))\n     {\n@@ -11135,7 +11175,12 @@\n \t  (const_int 0)))\n    (clobber (match_scratch:QI 0 \"=q\"))]\n   \"ix86_match_ccmode (insn, CCGOCmode)\n-   && ix86_binary_operator_ok (ASHIFT, QImode, operands)\"\n+   && ix86_binary_operator_ok (ASHIFT, QImode, operands)\n+   && (optimize_size\n+       || !TARGET_PARTIAL_FLAG_REG_STALL\n+       || (operands[2] == const1_rtx\n+\t   && (TARGET_SHIFT1\n+\t       || TARGET_DOUBLE_WITH_ADD)))\"\n {\n   switch (get_attr_type (insn))\n     {\n@@ -11332,7 +11377,9 @@\n    (set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashiftrt:DI (match_dup 1) (match_dup 2)))]\n   \"TARGET_64BIT && ix86_match_ccmode (insn, CCGOCmode)\n-   && ix86_binary_operator_ok (ASHIFTRT, DImode, operands)\"\n+   && ix86_binary_operator_ok (ASHIFTRT, DImode, operands)\n+   && (optimize_size\n+       || !TARGET_PARTIAL_FLAG_REG_STALL)\"\n   \"sar{q}\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"mode\" \"DI\")])\n@@ -11345,7 +11392,9 @@\n \t  (const_int 0)))\n    (clobber (match_scratch:DI 0 \"=r\"))]\n   \"TARGET_64BIT && ix86_match_ccmode (insn, CCGOCmode)\n-   && ix86_binary_operator_ok (ASHIFTRT, DImode, operands)\"\n+   && ix86_binary_operator_ok (ASHIFTRT, DImode, operands)\n+   && (optimize_size\n+       || !TARGET_PARTIAL_FLAG_REG_STALL)\"\n   \"sar{q}\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"mode\" \"DI\")])\n@@ -11579,7 +11628,9 @@\n    (set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashiftrt:SI (match_dup 1) (match_dup 2)))]\n   \"ix86_match_ccmode (insn, CCGOCmode)\n-   && ix86_binary_operator_ok (ASHIFTRT, SImode, operands)\"\n+   && ix86_binary_operator_ok (ASHIFTRT, SImode, operands)\n+   && (optimize_size\n+       || !TARGET_PARTIAL_FLAG_REG_STALL)\"\n   \"sar{l}\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"mode\" \"SI\")])\n@@ -11592,7 +11643,9 @@\n \t  (const_int 0)))\n    (clobber (match_scratch:SI 0 \"=r\"))]\n   \"ix86_match_ccmode (insn, CCGOCmode)\n-   && ix86_binary_operator_ok (ASHIFTRT, SImode, operands)\"\n+   && ix86_binary_operator_ok (ASHIFTRT, SImode, operands)\n+   && (optimize_size\n+       || !TARGET_PARTIAL_FLAG_REG_STALL)\"\n   \"sar{l}\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"mode\" \"SI\")])\n@@ -11606,7 +11659,9 @@\n    (set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extend:DI (ashiftrt:SI (match_dup 1) (match_dup 2))))]\n   \"TARGET_64BIT && ix86_match_ccmode (insn, CCGOCmode)\n-   && ix86_binary_operator_ok (ASHIFTRT, SImode, operands)\"\n+   && ix86_binary_operator_ok (ASHIFTRT, SImode, operands)\n+   && (optimize_size\n+       || !TARGET_PARTIAL_FLAG_REG_STALL)\"\n   \"sar{l}\\t{%2, %k0|%k0, %2}\"\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"mode\" \"SI\")])\n@@ -11692,7 +11747,9 @@\n    (set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashiftrt:HI (match_dup 1) (match_dup 2)))]\n   \"ix86_match_ccmode (insn, CCGOCmode)\n-   && ix86_binary_operator_ok (ASHIFTRT, HImode, operands)\"\n+   && ix86_binary_operator_ok (ASHIFTRT, HImode, operands)\n+   && (optimize_size\n+       || !TARGET_PARTIAL_FLAG_REG_STALL)\"\n   \"sar{w}\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"mode\" \"HI\")])\n@@ -11705,7 +11762,9 @@\n \t  (const_int 0)))\n    (clobber (match_scratch:HI 0 \"=r\"))]\n   \"ix86_match_ccmode (insn, CCGOCmode)\n-   && ix86_binary_operator_ok (ASHIFTRT, HImode, operands)\"\n+   && ix86_binary_operator_ok (ASHIFTRT, HImode, operands)\n+   && (optimize_size\n+       || !TARGET_PARTIAL_FLAG_REG_STALL)\"\n   \"sar{w}\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"mode\" \"HI\")])\n@@ -11819,7 +11878,9 @@\n    (set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm\")\n \t(ashiftrt:QI (match_dup 1) (match_dup 2)))]\n   \"ix86_match_ccmode (insn, CCGOCmode)\n-   && ix86_binary_operator_ok (ASHIFTRT, QImode, operands)\"\n+   && ix86_binary_operator_ok (ASHIFTRT, QImode, operands)\n+   && (optimize_size\n+       || !TARGET_PARTIAL_FLAG_REG_STALL)\"\n   \"sar{b}\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"mode\" \"QI\")])\n@@ -11832,7 +11893,9 @@\n \t  (const_int 0)))\n    (clobber (match_scratch:QI 0 \"=q\"))]\n   \"ix86_match_ccmode (insn, CCGOCmode)\n-   && ix86_binary_operator_ok (ASHIFTRT, QImode, operands)\"\n+   && ix86_binary_operator_ok (ASHIFTRT, QImode, operands)\n+   && (optimize_size\n+       || !TARGET_PARTIAL_FLAG_REG_STALL)\"\n   \"sar{b}\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"mode\" \"QI\")])\n@@ -11976,7 +12039,9 @@\n    (set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm\")\n \t(lshiftrt:DI (match_dup 1) (match_dup 2)))]\n   \"TARGET_64BIT && ix86_match_ccmode (insn, CCGOCmode)\n-   && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n+   && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\n+   && (optimize_size\n+       || !TARGET_PARTIAL_FLAG_REG_STALL)\"\n   \"shr{q}\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"mode\" \"DI\")])\n@@ -11989,7 +12054,9 @@\n \t  (const_int 0)))\n    (clobber (match_scratch:DI 0 \"=r\"))]\n   \"TARGET_64BIT && ix86_match_ccmode (insn, CCGOCmode)\n-   && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n+   && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\n+   && (optimize_size\n+       || !TARGET_PARTIAL_FLAG_REG_STALL)\"\n   \"shr{q}\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"mode\" \"DI\")])\n@@ -12147,7 +12214,9 @@\n    (set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n \t(lshiftrt:SI (match_dup 1) (match_dup 2)))]\n   \"ix86_match_ccmode (insn, CCGOCmode)\n-   && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n+   && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\n+   && (optimize_size\n+       || !TARGET_PARTIAL_FLAG_REG_STALL)\"\n   \"shr{l}\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"mode\" \"SI\")])\n@@ -12160,7 +12229,9 @@\n         (const_int 0)))\n    (clobber (match_scratch:SI 0 \"=r\"))]\n   \"ix86_match_ccmode (insn, CCGOCmode)\n-   && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n+   && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\n+   && (optimize_size\n+       || !TARGET_PARTIAL_FLAG_REG_STALL)\"\n   \"shr{l}\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"mode\" \"SI\")])\n@@ -12174,7 +12245,9 @@\n    (set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(lshiftrt:DI (zero_extend:DI (match_dup 1)) (match_dup 2)))]\n   \"TARGET_64BIT && ix86_match_ccmode (insn, CCGOCmode)\n-   && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n+   && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\n+   && (optimize_size\n+       || !TARGET_PARTIAL_FLAG_REG_STALL)\"\n   \"shr{l}\\t{%2, %k0|%k0, %2}\"\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"mode\" \"SI\")])\n@@ -12260,7 +12333,9 @@\n    (set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n \t(lshiftrt:HI (match_dup 1) (match_dup 2)))]\n   \"ix86_match_ccmode (insn, CCGOCmode)\n-   && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n+   && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\n+   && (optimize_size\n+       || !TARGET_PARTIAL_FLAG_REG_STALL)\"\n   \"shr{w}\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"mode\" \"HI\")])\n@@ -12273,7 +12348,9 @@\n \t  (const_int 0)))\n    (clobber (match_scratch:HI 0 \"=r\"))]\n   \"ix86_match_ccmode (insn, CCGOCmode)\n-   && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n+   && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\n+   && (optimize_size\n+       || !TARGET_PARTIAL_FLAG_REG_STALL)\"\n   \"shr{w}\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"mode\" \"HI\")])\n@@ -12386,7 +12463,9 @@\n    (set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm\")\n \t(lshiftrt:QI (match_dup 1) (match_dup 2)))]\n   \"ix86_match_ccmode (insn, CCGOCmode)\n-   && ix86_binary_operator_ok (LSHIFTRT, QImode, operands)\"\n+   && ix86_binary_operator_ok (LSHIFTRT, QImode, operands)\n+   && (optimize_size\n+       || !TARGET_PARTIAL_FLAG_REG_STALL)\"\n   \"shr{b}\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"mode\" \"QI\")])\n@@ -12399,7 +12478,9 @@\n \t  (const_int 0)))\n    (clobber (match_scratch:QI 0 \"=q\"))]\n   \"ix86_match_ccmode (insn, CCGOCmode)\n-   && ix86_binary_operator_ok (LSHIFTRT, QImode, operands)\"\n+   && ix86_binary_operator_ok (LSHIFTRT, QImode, operands)\n+   && (optimize_size\n+       || !TARGET_PARTIAL_FLAG_REG_STALL)\"\n   \"shr{b}\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ishift\")\n    (set_attr \"mode\" \"QI\")])"}]}