{"sha": "d8b8023cdb0b275c3f4254380b7e41d14f5cb79f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhiODAyM2NkYjBiMjc1YzNmNDI1NDM4MGI3ZTQxZDE0ZjVjYjc5Zg==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2020-08-04T10:18:21Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2020-08-17T09:07:30Z"}, "message": "Add statement context to get_value_range.\n\nThis is in line with the statement context that we have for get_value()\nin the substitute_and_fold_engine class.\n\ngcc/ChangeLog:\n\n\t* vr-values.c (vr_values::get_value_range): Add stmt param.\n\t(vr_values::extract_range_from_comparison): Same.\n\t(vr_values::extract_range_from_assignment): Pass stmt to\n\textract_range_from_comparison.\n\t(vr_values::adjust_range_with_scev): Pass stmt to get_value_range.\n\t(simplify_using_ranges::vrp_evaluate_conditional): Add stmt param.\n\tPass stmt to get_value_range.\n\t(simplify_using_ranges::vrp_visit_cond_stmt): Pass stmt to\n\tget_value_range.\n\t(simplify_using_ranges::simplify_abs_using_ranges): Same.\n\t(simplify_using_ranges::simplify_div_or_mod_using_ranges): Same.\n\t(simplify_using_ranges::simplify_bit_ops_using_ranges): Same.\n\t(simplify_using_ranges::simplify_cond_using_ranges_1): Same.\n\t(simplify_using_ranges::simplify_switch_using_ranges): Same.\n\t(simplify_using_ranges::simplify_float_conversion_using_ranges): Same.\n\t* vr-values.h (class vr_values): Add stmt arg to\n\tvrp_evaluate_conditional_warnv_with_ops.\n\tAdd stmt arg to extract_range_from_comparison and get_value_range.\n\t(simplify_using_ranges::get_value_range): Add stmt arg.", "tree": {"sha": "53ec02730b422579deeffbb9133ef4556f80e964", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53ec02730b422579deeffbb9133ef4556f80e964"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8b8023cdb0b275c3f4254380b7e41d14f5cb79f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8b8023cdb0b275c3f4254380b7e41d14f5cb79f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8b8023cdb0b275c3f4254380b7e41d14f5cb79f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8b8023cdb0b275c3f4254380b7e41d14f5cb79f/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5625b2c56acdcce9733b970b1fd2ff1349ebe657", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5625b2c56acdcce9733b970b1fd2ff1349ebe657", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5625b2c56acdcce9733b970b1fd2ff1349ebe657"}], "stats": {"total": 67, "additions": 35, "deletions": 32}, "files": [{"sha": "fe51a6faeb81882df0fdc4cb7aa2c5230487376c", "filename": "gcc/vr-values.c", "status": "modified", "additions": 28, "deletions": 25, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8b8023cdb0b275c3f4254380b7e41d14f5cb79f/gcc%2Fvr-values.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8b8023cdb0b275c3f4254380b7e41d14f5cb79f/gcc%2Fvr-values.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvr-values.c?ref=d8b8023cdb0b275c3f4254380b7e41d14f5cb79f", "patch": "@@ -147,7 +147,8 @@ vr_values::get_lattice_entry (const_tree var)\n    return NULL.  Otherwise create an empty range if none existed for VAR.  */\n \n const value_range_equiv *\n-vr_values::get_value_range (const_tree var)\n+vr_values::get_value_range (const_tree var,\n+\t\t\t    gimple *stmt ATTRIBUTE_UNUSED)\n {\n   /* If we have no recorded ranges, then return NULL.  */\n   if (!vr_value)\n@@ -972,12 +973,15 @@ vr_values::extract_range_from_cond_expr (value_range_equiv *vr, gassign *stmt)\n \n void\n vr_values::extract_range_from_comparison (value_range_equiv *vr,\n-\t\t\t\t\t  enum tree_code code,\n-\t\t\t\t\t  tree type, tree op0, tree op1)\n+\t\t\t\t\t  gimple *stmt)\n {\n+  enum tree_code code = gimple_assign_rhs_code (stmt);\n+  tree type = gimple_expr_type (stmt);\n+  tree op0 = gimple_assign_rhs1 (stmt);\n+  tree op1 = gimple_assign_rhs2 (stmt);\n   bool sop;\n   tree val\n-    = simplifier.vrp_evaluate_conditional_warnv_with_ops (code, op0, op1,\n+    = simplifier.vrp_evaluate_conditional_warnv_with_ops (stmt, code, op0, op1,\n \t\t\t\t\t\t\t  false, &sop, NULL);\n   if (val)\n     {\n@@ -1472,10 +1476,7 @@ vr_values::extract_range_from_assignment (value_range_equiv *vr, gassign *stmt)\n   else if (code == COND_EXPR)\n     extract_range_from_cond_expr (vr, stmt);\n   else if (TREE_CODE_CLASS (code) == tcc_comparison)\n-    extract_range_from_comparison (vr, gimple_assign_rhs_code (stmt),\n-\t\t\t\t   gimple_expr_type (stmt),\n-\t\t\t\t   gimple_assign_rhs1 (stmt),\n-\t\t\t\t   gimple_assign_rhs2 (stmt));\n+    extract_range_from_comparison (vr, stmt);\n   else if (get_gimple_rhs_class (code) == GIMPLE_SINGLE_RHS\n \t   && is_gimple_min_invariant (gimple_assign_rhs1 (stmt)))\n     vr->set (gimple_assign_rhs1 (stmt));\n@@ -1805,7 +1806,7 @@ vr_values::adjust_range_with_scev (value_range_equiv *vr, class loop *loop,\n   if (TREE_CODE (step) == INTEGER_CST\n       && is_gimple_val (init)\n       && (TREE_CODE (init) != SSA_NAME\n-\t  || get_value_range (init)->kind () == VR_RANGE))\n+\t  || get_value_range (init, stmt)->kind () == VR_RANGE))\n     {\n       widest_int nit;\n \n@@ -1838,7 +1839,7 @@ vr_values::adjust_range_with_scev (value_range_equiv *vr, class loop *loop,\n \t\t  value_range initvr;\n \n \t\t  if (TREE_CODE (init) == SSA_NAME)\n-\t\t    initvr = *(get_value_range (init));\n+\t\t    initvr = *(get_value_range (init, stmt));\n \t\t  else if (is_gimple_min_invariant (init))\n \t\t    initvr.set (init);\n \t\t  else\n@@ -2326,7 +2327,8 @@ simplify_using_ranges::vrp_evaluate_conditional_warnv_with_ops_using_ranges\n \n tree\n simplify_using_ranges::vrp_evaluate_conditional_warnv_with_ops\n-\t\t\t\t\t\t(enum tree_code code,\n+\t\t\t\t\t\t(gimple *stmt,\n+\t\t\t\t\t\t enum tree_code code,\n \t\t\t\t\t\t tree op0, tree op1,\n \t\t\t\t\t\t bool use_equiv_p,\n \t\t\t\t\t\t bool *strict_overflow_p,\n@@ -2387,7 +2389,7 @@ simplify_using_ranges::vrp_evaluate_conditional_warnv_with_ops\n \t    }\n \t  else\n \t    gcc_unreachable ();\n-\t  const value_range_equiv *vr0 = get_value_range (op0);\n+\t  const value_range_equiv *vr0 = get_value_range (op0, stmt);\n \t  /* If vro, the range for OP0 to pass the overflow test, has\n \t     no intersection with *vr0, OP0's known range, then the\n \t     overflow test can't pass, so return the node for false.\n@@ -2449,8 +2451,8 @@ simplify_using_ranges::vrp_evaluate_conditional (tree_code code, tree op0,\n     return NULL_TREE;\n \n   sop = false;\n-  ret = vrp_evaluate_conditional_warnv_with_ops (code, op0, op1, true, &sop,\n-  \t\t\t\t\t\t &only_ranges);\n+  ret = vrp_evaluate_conditional_warnv_with_ops (stmt, code, op0, op1, true,\n+\t\t\t\t\t\t &sop, &only_ranges);\n \n   if (ret && sop)\n     {\n@@ -2493,7 +2495,7 @@ simplify_using_ranges::vrp_evaluate_conditional (tree_code code, tree op0,\n \t always fold regardless of the value of OP0.  If -Wtype-limits\n \t was specified, emit a warning.  */\n       tree type = TREE_TYPE (op0);\n-      const value_range_equiv *vr0 = get_value_range (op0);\n+      const value_range_equiv *vr0 = get_value_range (op0, stmt);\n \n       if (vr0->varying_p ()\n \t  && INTEGRAL_TYPE_P (type)\n@@ -2544,7 +2546,7 @@ simplify_using_ranges::vrp_visit_cond_stmt (gcond *stmt, edge *taken_edge_p)\n \t  fprintf (dump_file, \"\\t\");\n \t  print_generic_expr (dump_file, use);\n \t  fprintf (dump_file, \": \");\n-\t  dump_value_range (dump_file, get_value_range (use));\n+\t  dump_value_range (dump_file, get_value_range (use, stmt));\n \t}\n \n       fprintf (dump_file, \"\\n\");\n@@ -2594,7 +2596,8 @@ simplify_using_ranges::vrp_visit_cond_stmt (gcond *stmt, edge *taken_edge_p)\n      4 more predicates folded in SPEC.  */\n \n   bool sop;\n-  val = vrp_evaluate_conditional_warnv_with_ops (gimple_cond_code (stmt),\n+  val = vrp_evaluate_conditional_warnv_with_ops (stmt,\n+\t\t\t\t\t\t gimple_cond_code (stmt),\n \t\t\t\t\t\t gimple_cond_lhs (stmt),\n \t\t\t\t\t\t gimple_cond_rhs (stmt),\n \t\t\t\t\t\t false, &sop, NULL);\n@@ -3119,7 +3122,7 @@ simplify_using_ranges::simplify_div_or_mod_using_ranges\n     }\n   else\n     {\n-      vr = get_value_range (op0);\n+      vr = get_value_range (op0, stmt);\n       if (range_int_cst_p (vr))\n \t{\n \t  op0min = vr->min ();\n@@ -3130,7 +3133,7 @@ simplify_using_ranges::simplify_div_or_mod_using_ranges\n   if (rhs_code == TRUNC_MOD_EXPR\n       && TREE_CODE (op1) == SSA_NAME)\n     {\n-      const value_range_equiv *vr1 = get_value_range (op1);\n+      const value_range_equiv *vr1 = get_value_range (op1, stmt);\n       if (range_int_cst_p (vr1))\n \top1min = vr1->min ();\n     }\n@@ -3279,7 +3282,7 @@ simplify_using_ranges::simplify_abs_using_ranges (gimple_stmt_iterator *gsi,\n \t\t\t\t\t\t  gimple *stmt)\n {\n   tree op = gimple_assign_rhs1 (stmt);\n-  const value_range *vr = get_value_range (op);\n+  const value_range *vr = get_value_range (op, stmt);\n \n   if (vr)\n     {\n@@ -3369,14 +3372,14 @@ simplify_using_ranges::simplify_bit_ops_using_ranges\n   wide_int mask;\n \n   if (TREE_CODE (op0) == SSA_NAME)\n-    vr0 = *(get_value_range (op0));\n+    vr0 = *(get_value_range (op0, stmt));\n   else if (is_gimple_min_invariant (op0))\n     vr0.set (op0);\n   else\n     return false;\n \n   if (TREE_CODE (op1) == SSA_NAME)\n-    vr1 = *(get_value_range (op1));\n+    vr1 = *(get_value_range (op1, stmt));\n   else if (is_gimple_min_invariant (op1))\n     vr1.set (op1);\n   else\n@@ -3595,7 +3598,7 @@ simplify_using_ranges::simplify_cond_using_ranges_1 (gcond *stmt)\n       && INTEGRAL_TYPE_P (TREE_TYPE (op0))\n       && is_gimple_min_invariant (op1))\n     {\n-      const value_range *vr = get_value_range (op0);\n+      const value_range *vr = get_value_range (op0, stmt);\n \n       /* If we have range information for OP0, then we might be\n \t able to simplify this conditional. */\n@@ -3739,7 +3742,7 @@ simplify_using_ranges::simplify_switch_using_ranges (gswitch *stmt)\n \n   if (TREE_CODE (op) == SSA_NAME)\n     {\n-      vr = get_value_range (op);\n+      vr = get_value_range (op, stmt);\n \n       /* We can only handle integer ranges.  */\n       if (vr->varying_p ()\n@@ -4032,7 +4035,7 @@ simplify_using_ranges::simplify_float_conversion_using_ranges\n \t\t\t\t\t gimple *stmt)\n {\n   tree rhs1 = gimple_assign_rhs1 (stmt);\n-  const value_range *vr = get_value_range (rhs1);\n+  const value_range *vr = get_value_range (rhs1, stmt);\n   scalar_float_mode fltmode\n     = SCALAR_FLOAT_TYPE_MODE (TREE_TYPE (gimple_assign_lhs (stmt)));\n   scalar_int_mode mode;"}, {"sha": "330b4605e39b0b95b57d42f6239cd64ca1991522", "filename": "gcc/vr-values.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8b8023cdb0b275c3f4254380b7e41d14f5cb79f/gcc%2Fvr-values.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8b8023cdb0b275c3f4254380b7e41d14f5cb79f/gcc%2Fvr-values.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvr-values.h?ref=d8b8023cdb0b275c3f4254380b7e41d14f5cb79f", "patch": "@@ -38,12 +38,13 @@ class simplify_using_ranges\n   // ?? These should be cleaned, merged, and made private.\n   tree vrp_evaluate_conditional (tree_code, tree, tree, gimple *);\n   void vrp_visit_cond_stmt (gcond *, edge *);\n-  tree vrp_evaluate_conditional_warnv_with_ops (enum tree_code,\n+  tree vrp_evaluate_conditional_warnv_with_ops (gimple *stmt, enum tree_code,\n \t\t\t\t\t\ttree, tree, bool,\n \t\t\t\t\t\tbool *, bool *);\n \n private:\n-  const value_range_equiv *get_value_range (const_tree op);\n+  const value_range_equiv *get_value_range (const_tree op,\n+\t\t\t\t\t    gimple *stmt = NULL);\n   bool simplify_truth_ops_using_ranges (gimple_stmt_iterator *, gimple *);\n   bool simplify_div_or_mod_using_ranges (gimple_stmt_iterator *, gimple *);\n   bool simplify_abs_using_ranges (gimple_stmt_iterator *, gimple *);\n@@ -101,7 +102,7 @@ class vr_values\n   vr_values (void);\n   ~vr_values (void);\n \n-  const value_range_equiv *get_value_range (const_tree);\n+  const value_range_equiv *get_value_range (const_tree, gimple * = NULL);\n   void set_vr_value (tree, value_range_equiv *);\n   value_range_equiv *swap_vr_value (tree, value_range_equiv *);\n \n@@ -140,8 +141,7 @@ class vr_values\n   void extract_range_from_unary_expr (value_range_equiv *, enum tree_code,\n \t\t\t\t      tree, tree);\n   void extract_range_from_cond_expr (value_range_equiv *, gassign *);\n-  void extract_range_from_comparison (value_range_equiv *, enum tree_code,\n-\t\t\t\t      tree, tree, tree);\n+  void extract_range_from_comparison (value_range_equiv *, gimple *);\n   void vrp_visit_assignment_or_call (gimple*, tree *, value_range_equiv *);\n   void vrp_visit_switch_stmt (gswitch *, edge *);\n \n@@ -167,9 +167,9 @@ class vr_values\n };\n \n inline const value_range_equiv *\n-simplify_using_ranges::get_value_range (const_tree op)\n+simplify_using_ranges::get_value_range (const_tree op, gimple *stmt)\n {\n-  return store->get_value_range (op);\n+  return store->get_value_range (op, stmt);\n }\n \n extern tree get_output_for_vrp (gimple *);"}]}