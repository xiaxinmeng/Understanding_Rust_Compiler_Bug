{"sha": "89c43c0a0bdf4db3e857fc60aecba58793e41107", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODljNDNjMGEwYmRmNGRiM2U4NTdmYzYwYWVjYmE1ODc5M2U0MTEwNw==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2004-04-02T15:05:55Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2004-04-02T15:05:55Z"}, "message": "i386.h (TARGET_NOCONA): New macro.\n\n2004-04-02  Vladimir Makarov  <vmakarov@redhat.com>\n\n\t* config/i386/i386.h (TARGET_NOCONA): New macro.\n\t(TARGET_CPU_CPP_BUILTINS): Add code for Nocona.\n\t(processor_type): Add PROCESSOR_NOCONA.\n\n\t* config/i386/i386.md (cpu): Add nocona to the attribute values.\n\n\t* config/i386/i386.c (nocona_cost): New variable.\n\t(m_NOCONA): New macro.\n\t(x86_push_memory, x86_movx, x86_cmove, x86_deep_branch,\n\tx86_branch_hints, x86_use_sahf, x86_single_stringop,\n\tx86_sub_esp_4, x86_sub_esp_8, x86_add_esp_4, x86_add_esp_8,\n\tx86_integer_DFmode_moves, x86_partial_reg_dependency,\n\tx86_memory_mismatch_stall, x86_accumulate_outgoing_args,\n\tx86_decompose_lea, x86_arch_always_fancy_math_387,\n\tx86_sse_partial_reg_dependency, x86_sse_load0_by_pxor,\n\tx86_ext_80387_constants, x86_four_jump_limit):\n\t(override_options): Add nocona_cost to processor_target_table.\n\tSet up PROCESSOR_NOCONA for Nocona entry in processor_alias_table.\n\t(incdec_operand): Prevent inc/dec generation for Nocona too.\n\t(ix86_issue_rate): Add PROCESSOR_NOCONA.\n\nFrom-SVN: r80353", "tree": {"sha": "3633e1285421783ac1aed26c6f07971a1c6f20a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3633e1285421783ac1aed26c6f07971a1c6f20a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89c43c0a0bdf4db3e857fc60aecba58793e41107", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89c43c0a0bdf4db3e857fc60aecba58793e41107", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89c43c0a0bdf4db3e857fc60aecba58793e41107", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89c43c0a0bdf4db3e857fc60aecba58793e41107/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2e9ceb77befba5b08e2e27eeed70550e5be570b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e9ceb77befba5b08e2e27eeed70550e5be570b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e9ceb77befba5b08e2e27eeed70550e5be570b2"}], "stats": {"total": 138, "additions": 109, "deletions": 29}, "files": [{"sha": "e9b7dbc7960a84a38a7fd30a2762db8e9db1d03f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89c43c0a0bdf4db3e857fc60aecba58793e41107/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89c43c0a0bdf4db3e857fc60aecba58793e41107/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=89c43c0a0bdf4db3e857fc60aecba58793e41107", "patch": "@@ -1,3 +1,26 @@\n+2004-04-02  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\t* config/i386/i386.h (TARGET_NOCONA): New macro.\n+\t(TARGET_CPU_CPP_BUILTINS): Add code for Nocona.\n+\t(processor_type): Add PROCESSOR_NOCONA.\n+\t\n+\t* config/i386/i386.md (cpu): Add nocona to the attribute values.\n+\n+\t* config/i386/i386.c (nocona_cost): New variable.\n+\t(m_NOCONA): New macro.\n+\t(x86_push_memory, x86_movx, x86_cmove, x86_deep_branch,\n+\tx86_branch_hints, x86_use_sahf, x86_single_stringop,\n+\tx86_sub_esp_4, x86_sub_esp_8, x86_add_esp_4, x86_add_esp_8,\n+\tx86_integer_DFmode_moves, x86_partial_reg_dependency,\n+\tx86_memory_mismatch_stall, x86_accumulate_outgoing_args,\n+\tx86_decompose_lea, x86_arch_always_fancy_math_387,\n+\tx86_sse_partial_reg_dependency, x86_sse_load0_by_pxor,\n+\tx86_ext_80387_constants, x86_four_jump_limit):\n+\t(override_options): Add nocona_cost to processor_target_table.\n+\tSet up PROCESSOR_NOCONA for Nocona entry in processor_alias_table.\n+\t(incdec_operand): Prevent inc/dec generation for Nocona too.\n+\t(ix86_issue_rate): Add PROCESSOR_NOCONA.\n+\t\n 2004-04-01  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \t* rtlanal.c (find_reg_note): Manually"}, {"sha": "f2da7e093b7cf77e0261aefdc42a443c5ddb1575", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 74, "deletions": 26, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89c43c0a0bdf4db3e857fc60aecba58793e41107/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89c43c0a0bdf4db3e857fc60aecba58793e41107/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=89c43c0a0bdf4db3e857fc60aecba58793e41107", "patch": "@@ -457,6 +457,50 @@ struct processor_costs pentium4_cost = {\n   43,\t\t\t\t\t/* cost of FSQRT instruction.  */\n };\n \n+static const\n+struct processor_costs nocona_cost = {\n+  1,\t\t\t\t\t/* cost of an add instruction */\n+  1,\t\t\t\t\t/* cost of a lea instruction */\n+  1,\t\t\t\t\t/* variable shift costs */\n+  1,\t\t\t\t\t/* constant shift costs */\n+  {10, 10, 10, 10, 10},\t\t\t/* cost of starting a multiply */\n+  0,\t\t\t\t\t/* cost of multiply per each bit set */\n+  {66, 66, 66, 66, 66},\t\t\t/* cost of a divide/mod */\n+  1,\t\t\t\t\t/* cost of movsx */\n+  1,\t\t\t\t\t/* cost of movzx */\n+  16,\t\t\t\t\t/* \"large\" insn */\n+  9,\t\t\t\t\t/* MOVE_RATIO */\n+  4,\t\t\t\t\t/* cost for loading QImode using movzbl */\n+  {4, 4, 4},\t\t\t\t/* cost of loading integer registers\n+\t\t\t\t\t   in QImode, HImode and SImode.\n+\t\t\t\t\t   Relative to reg-reg move (2).  */\n+  {4, 4, 4},\t\t\t\t/* cost of storing integer registers */\n+  3,\t\t\t\t\t/* cost of reg,reg fld/fst */\n+  {12, 12, 12},\t\t\t\t/* cost of loading fp registers\n+\t\t\t\t\t   in SFmode, DFmode and XFmode */\n+  {4, 4, 4},\t\t\t\t/* cost of loading integer registers */\n+  6,\t\t\t\t\t/* cost of moving MMX register */\n+  {12, 12},\t\t\t\t/* cost of loading MMX registers\n+\t\t\t\t\t   in SImode and DImode */\n+  {12, 12},\t\t\t\t/* cost of storing MMX registers\n+\t\t\t\t\t   in SImode and DImode */\n+  6,\t\t\t\t\t/* cost of moving SSE register */\n+  {12, 12, 12},\t\t\t\t/* cost of loading SSE registers\n+\t\t\t\t\t   in SImode, DImode and TImode */\n+  {12, 12, 12},\t\t\t\t/* cost of storing SSE registers\n+\t\t\t\t\t   in SImode, DImode and TImode */\n+  8,\t\t\t\t\t/* MMX or SSE register to integer */\n+  128,\t\t\t\t\t/* size of prefetch block */\n+  8,\t\t\t\t\t/* number of parallel prefetches */\n+  1,\t\t\t\t\t/* Branch cost */\n+  6,\t\t\t\t\t/* cost of FADD and FSUB insns.  */\n+  8,\t\t\t\t\t/* cost of FMUL instruction.  */\n+  40,\t\t\t\t\t/* cost of FDIV instruction.  */\n+  3,\t\t\t\t\t/* cost of FABS instruction.  */\n+  3,\t\t\t\t\t/* cost of FCHS instruction.  */\n+  44,\t\t\t\t\t/* cost of FSQRT instruction.  */\n+};\n+\n const struct processor_costs *ix86_cost = &pentium_cost;\n \n /* Processor feature/optimization bitmasks.  */\n@@ -469,19 +513,20 @@ const struct processor_costs *ix86_cost = &pentium_cost;\n #define m_PENT4  (1<<PROCESSOR_PENTIUM4)\n #define m_K8  (1<<PROCESSOR_K8)\n #define m_ATHLON_K8  (m_K8 | m_ATHLON)\n+#define m_NOCONA  (1<<PROCESSOR_NOCONA)\n \n const int x86_use_leave = m_386 | m_K6 | m_ATHLON_K8;\n-const int x86_push_memory = m_386 | m_K6 | m_ATHLON_K8 | m_PENT4;\n+const int x86_push_memory = m_386 | m_K6 | m_ATHLON_K8 | m_PENT4 | m_NOCONA;\n const int x86_zero_extend_with_and = m_486 | m_PENT;\n-const int x86_movx = m_ATHLON_K8 | m_PPRO | m_PENT4 /* m_386 | m_K6 */;\n+const int x86_movx = m_ATHLON_K8 | m_PPRO | m_PENT4 | m_NOCONA /* m_386 | m_K6 */;\n const int x86_double_with_add = ~m_386;\n const int x86_use_bit_test = m_386;\n const int x86_unroll_strlen = m_486 | m_PENT | m_PPRO | m_ATHLON_K8 | m_K6;\n-const int x86_cmove = m_PPRO | m_ATHLON_K8 | m_PENT4;\n+const int x86_cmove = m_PPRO | m_ATHLON_K8 | m_PENT4 | m_NOCONA;\n const int x86_3dnow_a = m_ATHLON_K8;\n-const int x86_deep_branch = m_PPRO | m_K6 | m_ATHLON_K8 | m_PENT4;\n-const int x86_branch_hints = m_PENT4;\n-const int x86_use_sahf = m_PPRO | m_K6 | m_PENT4;\n+const int x86_deep_branch = m_PPRO | m_K6 | m_ATHLON_K8 | m_PENT4 | m_NOCONA;\n+const int x86_branch_hints = m_PENT4 | m_NOCONA;\n+const int x86_use_sahf = m_PPRO | m_K6 | m_PENT4 | m_NOCONA;\n const int x86_partial_reg_stall = m_PPRO;\n const int x86_use_loop = m_K6;\n const int x86_use_fiop = ~(m_PPRO | m_ATHLON_K8 | m_PENT);\n@@ -492,25 +537,25 @@ const int x86_read_modify = ~(m_PENT | m_PPRO);\n const int x86_split_long_moves = m_PPRO;\n const int x86_promote_QImode = m_K6 | m_PENT | m_386 | m_486 | m_ATHLON_K8;\n const int x86_fast_prefix = ~(m_PENT | m_486 | m_386);\n-const int x86_single_stringop = m_386 | m_PENT4;\n+const int x86_single_stringop = m_386 | m_PENT4 | m_NOCONA;\n const int x86_qimode_math = ~(0);\n const int x86_promote_qi_regs = 0;\n const int x86_himode_math = ~(m_PPRO);\n const int x86_promote_hi_regs = m_PPRO;\n-const int x86_sub_esp_4 = m_ATHLON_K8 | m_PPRO | m_PENT4;\n-const int x86_sub_esp_8 = m_ATHLON_K8 | m_PPRO | m_386 | m_486 | m_PENT4;\n-const int x86_add_esp_4 = m_ATHLON_K8 | m_K6 | m_PENT4;\n-const int x86_add_esp_8 = m_ATHLON_K8 | m_PPRO | m_K6 | m_386 | m_486 | m_PENT4;\n-const int x86_integer_DFmode_moves = ~(m_ATHLON_K8 | m_PENT4 | m_PPRO);\n-const int x86_partial_reg_dependency = m_ATHLON_K8 | m_PENT4;\n-const int x86_memory_mismatch_stall = m_ATHLON_K8 | m_PENT4;\n-const int x86_accumulate_outgoing_args = m_ATHLON_K8 | m_PENT4 | m_PPRO;\n+const int x86_sub_esp_4 = m_ATHLON_K8 | m_PPRO | m_PENT4 | m_NOCONA;\n+const int x86_sub_esp_8 = m_ATHLON_K8 | m_PPRO | m_386 | m_486 | m_PENT4 | m_NOCONA;\n+const int x86_add_esp_4 = m_ATHLON_K8 | m_K6 | m_PENT4 | m_NOCONA;\n+const int x86_add_esp_8 = m_ATHLON_K8 | m_PPRO | m_K6 | m_386 | m_486 | m_PENT4 | m_NOCONA;\n+const int x86_integer_DFmode_moves = ~(m_ATHLON_K8 | m_PENT4 | m_NOCONA | m_PPRO);\n+const int x86_partial_reg_dependency = m_ATHLON_K8 | m_PENT4 | m_NOCONA;\n+const int x86_memory_mismatch_stall = m_ATHLON_K8 | m_PENT4 | m_NOCONA;\n+const int x86_accumulate_outgoing_args = m_ATHLON_K8 | m_PENT4 | m_NOCONA | m_PPRO;\n const int x86_prologue_using_move = m_ATHLON_K8 | m_PPRO;\n const int x86_epilogue_using_move = m_ATHLON_K8 | m_PPRO;\n-const int x86_decompose_lea = m_PENT4;\n+const int x86_decompose_lea = m_PENT4 | m_NOCONA;\n const int x86_shift1 = ~m_486;\n-const int x86_arch_always_fancy_math_387 = m_PENT | m_PPRO | m_ATHLON_K8 | m_PENT4;\n-const int x86_sse_partial_reg_dependency = m_PENT4 | m_PPRO;\n+const int x86_arch_always_fancy_math_387 = m_PENT | m_PPRO | m_ATHLON_K8 | m_PENT4 | m_NOCONA;\n+const int x86_sse_partial_reg_dependency = m_PENT4 | m_NOCONA | m_PPRO;\n /* Set for machines where the type and dependencies are resolved on SSE register\n    parts instead of whole registers, so we may maintain just lower part of\n    scalar values in proper format leaving the upper part undefined.  */\n@@ -519,14 +564,14 @@ const int x86_sse_partial_regs = m_ATHLON_K8;\n    need for extra instructions beforehand  */\n const int x86_sse_partial_regs_for_cvtsd2ss = 0;\n const int x86_sse_typeless_stores = m_ATHLON_K8;\n-const int x86_sse_load0_by_pxor = m_PPRO | m_PENT4;\n+const int x86_sse_load0_by_pxor = m_PPRO | m_PENT4 | m_NOCONA;\n const int x86_use_ffreep = m_ATHLON_K8;\n const int x86_rep_movl_optimal = m_386 | m_PENT | m_PPRO | m_K6;\n const int x86_inter_unit_moves = ~(m_ATHLON_K8);\n-const int x86_ext_80387_constants = m_K6 | m_ATHLON | m_PENT4 | m_PPRO;\n+const int x86_ext_80387_constants = m_K6 | m_ATHLON | m_PENT4 | m_NOCONA | m_PPRO;\n /* Some CPU cores are not able to predict more than 4 branch instructions in\n    the 16 byte window.  */\n-const int x86_four_jump_limit = m_PPRO | m_ATHLON_K8 | m_PENT4;\n+const int x86_four_jump_limit = m_PPRO | m_ATHLON_K8 | m_PENT4 | m_NOCONA;\n \n /* In case the average insn count for single function invocation is\n    lower than this constant, emit fast (but longer) prologue and\n@@ -1025,6 +1070,7 @@ static void init_ext_80387_constants (void);\n #define TARGET_SETUP_INCOMING_VARARGS ix86_setup_incoming_varargs\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n+\n \f\n /* The svr4 ABI for the i386 says that records and unions are returned\n    in memory.  */\n@@ -1068,7 +1114,8 @@ override_options (void)\n       {&k6_cost, 0, 0, 32, 7, 32, 7, 32},\n       {&athlon_cost, 0, 0, 16, 7, 16, 7, 16},\n       {&pentium4_cost, 0, 0, 0, 0, 0, 0, 0},\n-      {&k8_cost, 0, 0, 16, 7, 16, 7, 16}\n+      {&k8_cost, 0, 0, 16, 7, 16, 7, 16},\n+      {&nocona_cost, 0, 0, 0, 0, 0, 0, 0}\n     };\n \n   static const char * const cpu_names[] = TARGET_CPU_DEFAULT_NAMES;\n@@ -1109,10 +1156,10 @@ override_options (void)\n \t\t\t\t       | PTA_MMX | PTA_PREFETCH_SSE},\n       {\"pentium4m\", PROCESSOR_PENTIUM4, PTA_SSE | PTA_SSE2\n \t\t\t\t        | PTA_MMX | PTA_PREFETCH_SSE},\n-      {\"prescott\", PROCESSOR_PENTIUM4, PTA_SSE | PTA_SSE2 | PTA_SSE3\n+      {\"prescott\", PROCESSOR_NOCONA, PTA_SSE | PTA_SSE2 | PTA_SSE3\n+\t\t\t\t        | PTA_MMX | PTA_PREFETCH_SSE},\n+      {\"nocona\", PROCESSOR_NOCONA, PTA_SSE | PTA_SSE2 | PTA_SSE3 | PTA_64BIT\n \t\t\t\t        | PTA_MMX | PTA_PREFETCH_SSE},\n-      {\"nocona\", PROCESSOR_PENTIUM4, PTA_SSE | PTA_SSE2 | PTA_SSE3 | PTA_64BIT\n-\t\t\t\t     | PTA_MMX | PTA_PREFETCH_SSE},\n       {\"k6\", PROCESSOR_K6, PTA_MMX},\n       {\"k6-2\", PROCESSOR_K6, PTA_MMX | PTA_3DNOW},\n       {\"k6-3\", PROCESSOR_K6, PTA_MMX | PTA_3DNOW},\n@@ -3771,7 +3818,7 @@ incdec_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n   /* On Pentium4, the inc and dec operations causes extra dependency on flag\n      registers, since carry flag is not set.  */\n-  if (TARGET_PENTIUM4 && !optimize_size)\n+  if ((TARGET_PENTIUM4 || TARGET_NOCONA) && !optimize_size)\n     return 0;\n   return op == const1_rtx || op == constm1_rtx;\n }\n@@ -12074,6 +12121,7 @@ ix86_issue_rate (void)\n     case PROCESSOR_PENTIUM4:\n     case PROCESSOR_ATHLON:\n     case PROCESSOR_K8:\n+    case PROCESSOR_NOCONA:\n       return 3;\n \n     default:"}, {"sha": "b537435f1cc06ae5dd19d00fbba5c587825b9e89", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89c43c0a0bdf4db3e857fc60aecba58793e41107/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89c43c0a0bdf4db3e857fc60aecba58793e41107/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=89c43c0a0bdf4db3e857fc60aecba58793e41107", "patch": "@@ -219,6 +219,7 @@ extern int target_flags;\n #define TARGET_PENTIUM4 (ix86_tune == PROCESSOR_PENTIUM4)\n #define TARGET_K8 (ix86_tune == PROCESSOR_K8)\n #define TARGET_ATHLON_K8 (TARGET_K8 || TARGET_ATHLON)\n+#define TARGET_NOCONA (ix86_tune == PROCESSOR_NOCONA)\n \n #define TUNEMASK (1 << ix86_tune)\n extern const int x86_use_leave, x86_push_memory, x86_zero_extend_with_and;\n@@ -606,6 +607,8 @@ extern int x86_prefetch_sse;\n \tbuiltin_define (\"__tune_k8__\");\t\t\t\t\\\n       else if (TARGET_PENTIUM4)\t\t\t\t\t\\\n \tbuiltin_define (\"__tune_pentium4__\");\t\t\t\\\n+      else if (TARGET_NOCONA)\t\t\t\t\t\\\n+\tbuiltin_define (\"__tune_nocona__\");\t\t\t\\\n \t\t\t\t\t\t\t\t\\\n       if (TARGET_MMX)\t\t\t\t\t\t\\\n \tbuiltin_define (\"__MMX__\");\t\t\t\t\\\n@@ -674,6 +677,11 @@ extern int x86_prefetch_sse;\n \t  builtin_define (\"__pentium4\");\t\t\t\\\n \t  builtin_define (\"__pentium4__\");\t\t\t\\\n \t}\t\t\t\t\t\t\t\\\n+      else if (ix86_arch == PROCESSOR_NOCONA)\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  builtin_define (\"__nocona\");\t\t\t\t\\\n+\t  builtin_define (\"__nocona__\");\t\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n   while (0)\n \n@@ -2944,6 +2952,7 @@ enum processor_type\n   PROCESSOR_ATHLON,\n   PROCESSOR_PENTIUM4,\n   PROCESSOR_K8,\n+  PROCESSOR_NOCONA,\n   PROCESSOR_max\n };\n "}, {"sha": "ad8731b2c65403a248e1fb2839df7997035cc530", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89c43c0a0bdf4db3e857fc60aecba58793e41107/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89c43c0a0bdf4db3e857fc60aecba58793e41107/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=89c43c0a0bdf4db3e857fc60aecba58793e41107", "patch": "@@ -149,7 +149,7 @@\n \f\n ;; Processor type.  This attribute must exactly match the processor_type\n ;; enumeration in i386.h.\n-(define_attr \"cpu\" \"i386,i486,pentium,pentiumpro,k6,athlon,pentium4,k8\"\n+(define_attr \"cpu\" \"i386,i486,pentium,pentiumpro,k6,athlon,pentium4,k8,nocona\"\n   (const (symbol_ref \"ix86_tune\")))\n \n ;; A basic instruction type.  Refinements due to arguments to be\n@@ -13330,7 +13330,7 @@\n   [(const_int 0)]\n {\n   ix86_split_fp_branch (GET_CODE (operands[0]), operands[1], operands[2],\n-\t\t\toperands[3], operands[4], NULL_RTX);\n+\t                operands[3], operands[4], NULL_RTX);\n   DONE;\n })\n \n@@ -13351,7 +13351,7 @@\n \t  (match_dup 4)))]\n {\n   ix86_split_fp_branch (GET_CODE (operands[0]), operands[1], operands[2],\n-\t\t\toperands[3], operands[4], operands[5]);\n+\t     \t\toperands[3], operands[4], operands[5]);\n   DONE;\n })\n \f"}]}