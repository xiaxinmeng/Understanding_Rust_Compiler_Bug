{"sha": "9bb6515b10c51a07436577d0eb73531ba279ffa4", "node_id": "C_kwDOANBUbNoAKDliYjY1MTViMTBjNTFhMDc0MzY1NzdkMGViNzM1MzFiYTI3OWZmYTQ", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2023-01-26T00:17:46Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2023-01-26T00:17:46Z"}, "message": "Daily bump.", "tree": {"sha": "b405ee02d9b1f8f8ea35cdabab21967268316ba4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b405ee02d9b1f8f8ea35cdabab21967268316ba4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9bb6515b10c51a07436577d0eb73531ba279ffa4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bb6515b10c51a07436577d0eb73531ba279ffa4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bb6515b10c51a07436577d0eb73531ba279ffa4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bb6515b10c51a07436577d0eb73531ba279ffa4/comments", "author": null, "committer": null, "parents": [{"sha": "9fb9da3d38513d320bfea72050f7a59688595e0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fb9da3d38513d320bfea72050f7a59688595e0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fb9da3d38513d320bfea72050f7a59688595e0b"}], "stats": {"total": 634, "additions": 633, "deletions": 1}, "files": [{"sha": "2955641ccfaa4aa0b99f0a2296814d7c2c734930", "filename": "gcc/ChangeLog", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bb6515b10c51a07436577d0eb73531ba279ffa4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bb6515b10c51a07436577d0eb73531ba279ffa4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9bb6515b10c51a07436577d0eb73531ba279ffa4", "patch": "@@ -1,3 +1,69 @@\n+2023-01-25  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR modula2/102343\n+\tPR modula2/108182\n+\t* gcc.cc: Provide default specs for Modula-2 so that when the\n+\tlanguage is not built-in better diagnostics are emitted for\n+\tattempts to use .mod or .m2i file extensions.\n+\n+2023-01-25  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* config/arm/mve.md (mve_vqnegq_s<mode>): Fix spacing.\n+\n+2023-01-25  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* config/arm/mve.md (mve_vqabsq_s<mode>): Fix spacing.\n+\n+2023-01-25  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* config/arm/mve.md (mve_vnegq_f<mode>, mve_vnegq_s<mode>):\n+\tFix spacing.\n+\n+2023-01-25  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* config/arm/mve.md (@mve_vclzq_s<mode>): Fix spacing.\n+\n+2023-01-25  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* config/arm/mve.md (mve_vclsq_s<mode>): Fix spacing.\n+\n+2023-01-25  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/108523\n+\t* tree-ssa-sccvn.cc (visit_phi): Avoid using the exclusive\n+\tbackedge value for the result when using predication to\n+\tprove equivalence.\n+\n+2023-01-25  Richard Biener  <rguenther@suse.de>\n+\n+\t* doc/lto.texi (Command line options): Reword and update reference\n+\tto removed lto_read_all_file_options.\n+\n+2023-01-25  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64.md (umax<mode>3): Separate the CNT and CSSC\n+\ttests.\n+\n+2023-01-25  Gerald Pfeifer  <gerald@pfeifer.com>\n+\n+\t* doc/contrib.texi: Add Jose E. Marchesi.\n+\n+2023-01-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/108498\n+\t* gimple-ssa-store-merging.cc (class store_operand_info):\n+\tEnd coment with full stop rather than comma.\n+\t(split_group): Likewise.\n+\t(merged_store_group::apply_stores): Clear string_concatenation if\n+\tstart or end aren't on a byte boundary.\n+\n+2023-01-25  Siddhesh Poyarekar  <siddhesh@gotplt.org>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/108522\n+\t* tree-object-size.cc (compute_object_offset): Use\n+\tTREE_OPERAND(ref, 2) for COMPONENT_REF when available.\n+\n 2023-01-24  Takayuki 'January June' Suwa  <jjsuwa_sys3175@yahoo.co.jp>\n \n \t* config/xtensa/xtensa.md:"}, {"sha": "b0742d6879d993ed538c4084dc6d55d2b1ce6853", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bb6515b10c51a07436577d0eb73531ba279ffa4/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bb6515b10c51a07436577d0eb73531ba279ffa4/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=9bb6515b10c51a07436577d0eb73531ba279ffa4", "patch": "@@ -1 +1 @@\n-20230125\n+20230126"}, {"sha": "e2aad608c7cfde440e92b4eeb4fa5a242d4198d5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bb6515b10c51a07436577d0eb73531ba279ffa4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bb6515b10c51a07436577d0eb73531ba279ffa4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9bb6515b10c51a07436577d0eb73531ba279ffa4", "patch": "@@ -1,3 +1,9 @@\n+2023-01-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/108525\n+\t* mangle.cc (write_closure_type_name): Don't assume all\n+\tlambda operator() fns are methods.\n+\n 2023-01-24  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/108504"}, {"sha": "aaae5f57cebc03c3b48a32472ccfcf1aca67c65d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bb6515b10c51a07436577d0eb73531ba279ffa4/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bb6515b10c51a07436577d0eb73531ba279ffa4/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=9bb6515b10c51a07436577d0eb73531ba279ffa4", "patch": "@@ -1,3 +1,9 @@\n+2023-01-25  Steve Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/108528\n+\t* array.cc (compare_bounds): Return false instead of generating an\n+\tinternal error on an invalid argument type.\n+\n 2023-01-24  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/108529"}, {"sha": "92eacaf0099a8be04652ac586a476eb8beaf3fd5", "filename": "gcc/m2/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bb6515b10c51a07436577d0eb73531ba279ffa4/gcc%2Fm2%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bb6515b10c51a07436577d0eb73531ba279ffa4/gcc%2Fm2%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2FChangeLog?ref=9bb6515b10c51a07436577d0eb73531ba279ffa4", "patch": "@@ -1,3 +1,41 @@\n+2023-01-25  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR modula2/102343\n+\tPR modula2/108182\n+\t* gm2-compiler/M2Comp.mod: Early exit for pre-processor-only jobs.\n+\t* gm2-compiler/M2Options.def (SetPPOnly, GetPPOnly, SetMD, GetMD,\n+\tSetMMD, GetMMD, SetMQ, GetMQ, SetObj, GetObj, SetDumpDir,\n+\tGetDumpDir):New.\n+\t* gm2-compiler/M2Options.mod:(SetPPOnly, GetPPOnly, SetMD, GetMD,\n+\tSetMMD, GetMMD, SetMQ, GetMQ, SetObj, GetObj, SetDumpDir,\n+\tGetDumpDir):New.\n+\t* gm2-compiler/M2Preprocess.def (PreprocessModule): Add flag to\n+\tindicate the main file.\n+\t* gm2-compiler/M2Preprocess.mod: Handle Preprocess-only jobs,\n+\thandle MD, MMD and MQ options.\n+\t* gm2-gcc/m2options.h (M2Options_SetPPOnly, M2Options_GetPPOnly,\n+\tM2Options_SetDumpDir, M2Options_SetMD, M2Options_GetMD,\n+\tM2Options_SetMMD, M2Options_GetMMD, M2Options_SetMQ, M2Options_GetMQ,\n+\tM2Options_SetObj, M2Options_GetObj): New.\n+\t* gm2-gcc/m2type.cc (m2type_InitBaseTypes): Early exit for pre-\n+\tprocessor-only jobs.\n+\t* gm2-lang.cc (gm2_langhook_init): Handle preprocess-only commands.\n+\t(gm2_langhook_option_lang_mask): Claim C and Driver options so that\n+\twe can intercept them for building pre-processor commands.\n+\t(gm2_langhook_init_options): Collect the preprocessor line here.\n+\tSave options that have different actions for preprocessor and compile\n+\tcommands.\n+\t(gm2_langhook_handle_option): Only handle the modula-2 options here.\n+\t(gm2_langhook_post_options): Do not create a back-end for pre-\n+\tprocessor-only jobs.\n+\t* gm2spec.cc (lang_specific_driver): Ignore PCH options, append a\n+\tscaffold-main for cases where we are building a main module with\n+\t-c.\n+\t* lang-specs.h: Revise to handle preprocessor-only jobs and to\n+\tconsume pre-processed files.\n+\t* lang.opt: Remove Driver and C options copies (we claim these\n+\tseparately).\n+\n 2023-01-24  Co-Authored by: Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* Make-lang.in (GM2-COMP-BOOT-DEFS): Add"}, {"sha": "ca896cede39d1dbda12fdd9e9c834e5babb08ab7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 516, "deletions": 0, "changes": 516, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bb6515b10c51a07436577d0eb73531ba279ffa4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bb6515b10c51a07436577d0eb73531ba279ffa4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9bb6515b10c51a07436577d0eb73531ba279ffa4", "patch": "@@ -1,3 +1,519 @@\n+2023-01-25  Steve Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/108528\n+\t* gfortran.dg/pr108528.f90: New test.\n+\n+2023-01-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/108525\n+\t* g++.dg/cpp23/static-operator-call5.C: New test.\n+\n+2023-01-25  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/vhaddq_n_s16.c: Add missing extern\n+\t\"C\".\n+\t* gcc.target/arm/mve/intrinsics/vhaddq_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhaddq_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhaddq_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhaddq_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhaddq_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhaddq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhaddq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhaddq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhaddq_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhaddq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhaddq_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhaddq_x_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhaddq_x_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhaddq_x_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhaddq_x_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhaddq_x_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhaddq_x_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhaddq_x_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhaddq_x_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhaddq_x_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhaddq_x_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhaddq_x_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhaddq_x_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhsubq_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhsubq_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhsubq_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhsubq_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhsubq_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhsubq_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhsubq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhsubq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhsubq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhsubq_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhsubq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhsubq_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhsubq_x_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhsubq_x_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhsubq_x_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhsubq_x_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhsubq_x_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhsubq_x_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhsubq_x_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhsubq_x_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhsubq_x_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhsubq_x_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhsubq_x_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vhsubq_x_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmladavaxq_p_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmladavaxq_p_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmladavaxq_p_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmladavaxq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmladavaxq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmladavaxq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqaddq_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqaddq_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqaddq_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqaddq_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqaddq_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqaddq_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqaddq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqaddq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqaddq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqaddq_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqaddq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqaddq_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmlahq_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmlahq_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmlahq_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmlashq_m_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmlashq_m_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmlashq_m_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmlashq_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmlashq_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmlashq_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsetq_lane_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsetq_lane_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsetq_lane_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsetq_lane_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsetq_lane_s64.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsetq_lane_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsetq_lane_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsetq_lane_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsetq_lane_u64.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsetq_lane_u8.c: Likewise.\n+\n+2023-01-25  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/vld2q_f16.c: Use\n+\tcheck-function-bodies instead of scan-assembler checks.  Use\n+\textern \"C\" for C++ testing.\n+\t* gcc.target/arm/mve/intrinsics/vld2q_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vld2q_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vld2q_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vld2q_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vld2q_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vld2q_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vld2q_u8.c: Likewise.\n+\n+2023-01-25  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/vqnegq_m_s16.c: Use\n+\tcheck-function-bodies instead of scan-assembler checks.  Use\n+\textern \"C\" for C++ testing.\n+\t* gcc.target/arm/mve/intrinsics/vqnegq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqnegq_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqnegq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqnegq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqnegq_s8.c: Likewise.\n+\n+2023-01-25  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_m_n_s16.c: Use\n+\tcheck-function-bodies instead of scan-assembler checks.  Use\n+\textern \"C\" for C++ testing.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_m_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_m_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmulhq_s8.c: Likewise.\n+\n+2023-01-25  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/vqrdmlsdhxq_m_s16.c: Use\n+\tcheck-function-bodies instead of scan-assembler checks.  Use\n+\textern \"C\" for C++ testing.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmlsdhxq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmlsdhxq_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmlsdhxq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmlsdhxq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmlsdhxq_s8.c: Likewise.\n+\n+2023-01-25  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/vqrdmlsdhq_m_s16.c: Use\n+\tcheck-function-bodies instead of scan-assembler checks.  Use\n+\textern \"C\" for C++ testing.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmlsdhq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmlsdhq_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmlsdhq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmlsdhq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmlsdhq_s8.c: Likewise.\n+\n+2023-01-25  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/vqdmlsdhxq_m_s16.c: Use\n+\tcheck-function-bodies instead of scan-assembler checks.  Use\n+\textern \"C\" for C++ testing.\n+\t* gcc.target/arm/mve/intrinsics/vqdmlsdhxq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmlsdhxq_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmlsdhxq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmlsdhxq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmlsdhxq_s8.c: Likewise.\n+\n+2023-01-25  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/vqdmlsdhq_m_s16.c: Use\n+\tcheck-function-bodies instead of scan-assembler checks.  Use\n+\textern \"C\" for C++ testing.\n+\t* gcc.target/arm/mve/intrinsics/vqdmlsdhq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmlsdhq_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmlsdhq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmlsdhq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmlsdhq_s8.c: Likewise.\n+\n+2023-01-25  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/vqrdmlashq_n_s16.c: Use\n+\tcheck-function-bodies instead of scan-assembler checks.  Use\n+\textern \"C\" for C++ testing.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmlashq_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmlashq_n_s8.c: Likewise.\n+\n+2023-01-25  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/vqrdmladhxq_m_s16.c: Use\n+\tcheck-function-bodies instead of scan-assembler checks.  Use\n+\textern \"C\" for C++ testing.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmladhxq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmladhxq_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmladhxq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmladhxq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmladhxq_s8.c: Likewise.\n+\n+2023-01-25  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/vqrdmladhq_m_s16.c: Use\n+\tcheck-function-bodies instead of scan-assembler checks.  Use\n+\textern \"C\" for C++ testing.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmladhq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmladhq_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmladhq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmladhq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrdmladhq_s8.c: Likewise.\n+\n+2023-01-25  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/vqdmladhxq_m_s16.c: Use\n+\tcheck-function-bodies instead of scan-assembler checks.  Use\n+\textern \"C\" for C++ testing.\n+\t* gcc.target/arm/mve/intrinsics/vqdmladhxq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmladhxq_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmladhxq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmladhxq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmladhxq_s8.c: Likewise.\n+\n+2023-01-25  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/vqdmladhq_m_s16.c: Use\n+\tcheck-function-bodies instead of scan-assembler checks.  Use\n+\textern \"C\" for C++ testing.\n+\t* gcc.target/arm/mve/intrinsics/vqdmladhq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmladhq_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmladhq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmladhq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmladhq_s8.c: Likewise.\n+\n+2023-01-25  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/vqabsq_m_s16.c: Use\n+\tcheck-function-bodies instead of scan-assembler checks.  Use\n+\textern \"C\" for C++ testing.\n+\t* gcc.target/arm/mve/intrinsics/vqabsq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqabsq_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqabsq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqabsq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqabsq_s8.c: Likewise.\n+\n+2023-01-25  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/vcmulq_f16.c: Use\n+\tcheck-function-bodies instead of scan-assembler checks.  Use\n+\textern \"C\" for C++ testing.\n+\t* gcc.target/arm/mve/intrinsics/vcmulq_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmulq_m_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmulq_m_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmulq_rot180_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmulq_rot180_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmulq_rot180_m_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmulq_rot180_m_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmulq_rot180_x_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmulq_rot180_x_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmulq_rot270_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmulq_rot270_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmulq_rot270_m_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmulq_rot270_m_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmulq_rot270_x_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmulq_rot270_x_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmulq_rot90_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmulq_rot90_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmulq_rot90_m_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmulq_rot90_m_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmulq_rot90_x_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmulq_rot90_x_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmulq_x_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmulq_x_f32.c: Likewise.\n+\n+2023-01-25  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/vcmlaq_f16.c: Use\n+\tcheck-function-bodies instead of scan-assembler checks.  Use\n+\textern \"C\" for C++ testing.\n+\t* gcc.target/arm/mve/intrinsics/vcmlaq_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmlaq_m_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmlaq_m_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmlaq_rot180_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmlaq_rot180_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmlaq_rot180_m_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmlaq_rot180_m_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmlaq_rot270_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmlaq_rot270_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmlaq_rot270_m_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmlaq_rot270_m_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmlaq_rot90_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmlaq_rot90_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmlaq_rot90_m_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmlaq_rot90_m_f32.c: Likewise.\n+\n+2023-01-25  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_f16.c: Use\n+\tcheck-function-bodies instead of scan-assembler checks.  Use\n+\textern \"C\" for C++ testing.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_m_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_m_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_m_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_m_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_m_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_x_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_x_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_x_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_x_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_x_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_x_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_x_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_x_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_m_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_m_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_m_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_m_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_m_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_x_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_x_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_x_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_x_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_x_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_x_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_x_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_x_u8.c: Likewise.\n+\n+2023-01-25  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/vmulltq_int_m_s16.c: Use\n+\tcheck-function-bodies instead of scan-assembler checks.  Use\n+\textern \"C\" for C++ testing.\n+\t* gcc.target/arm/mve/intrinsics/vmulltq_int_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulltq_int_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulltq_int_m_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulltq_int_m_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulltq_int_m_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulltq_int_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulltq_int_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulltq_int_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulltq_int_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulltq_int_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulltq_int_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulltq_int_x_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulltq_int_x_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulltq_int_x_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulltq_int_x_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulltq_int_x_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulltq_int_x_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulltq_poly_m_p16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulltq_poly_m_p8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulltq_poly_p16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulltq_poly_p8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulltq_poly_x_p16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulltq_poly_x_p8.c: Likewise.\n+\n+2023-01-25  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/vmullbq_int_m_s16.c: Use\n+\tcheck-function-bodies instead of scan-assembler checks.  Use\n+\textern \"C\" for C++ testing.\n+\t* gcc.target/arm/mve/intrinsics/vmullbq_int_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmullbq_int_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmullbq_int_m_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmullbq_int_m_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmullbq_int_m_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmullbq_int_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmullbq_int_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmullbq_int_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmullbq_int_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmullbq_int_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmullbq_int_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmullbq_int_x_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmullbq_int_x_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmullbq_int_x_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmullbq_int_x_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmullbq_int_x_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmullbq_int_x_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmullbq_poly_m_p16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmullbq_poly_m_p8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmullbq_poly_p16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmullbq_poly_p8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmullbq_poly_x_p16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmullbq_poly_x_p8.c: Likewise.\n+\n+2023-01-25  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/vmulhq_m_s16.c: Use\n+\tcheck-function-bodies instead of scan-assembler checks.  Use\n+\textern \"C\" for C++ testing.\n+\t* gcc.target/arm/mve/intrinsics/vmulhq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulhq_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulhq_m_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulhq_m_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulhq_m_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulhq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulhq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulhq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulhq_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulhq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulhq_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulhq_x_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulhq_x_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulhq_x_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulhq_x_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulhq_x_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulhq_x_u8.c: Likewise.\n+\n+2023-01-25  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/vnegq_f16.c: Use\n+\tcheck-function-bodies instead of scan-assembler checks.  Use\n+\textern \"C\" for C++ testing.\n+\t* gcc.target/arm/mve/intrinsics/vnegq_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vnegq_m_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vnegq_m_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vnegq_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vnegq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vnegq_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vnegq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vnegq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vnegq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vnegq_x_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vnegq_x_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vnegq_x_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vnegq_x_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vnegq_x_s8.c: Likewise.\n+\t* gcc.target/arm/simd/mve-vneg.c: Update test.\n+\t* gcc.target/arm/simd/mve-vshr.c: Likewise\n+\n+2023-01-25  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/vclzq_m_s16.c: Use\n+\tcheck-function-bodies instead of scan-assembler checks.  Use\n+\textern \"C\" for C++ testing.\n+\t* gcc.target/arm/mve/intrinsics/vclzq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vclzq_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vclzq_m_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vclzq_m_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vclzq_m_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vclzq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vclzq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vclzq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vclzq_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vclzq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vclzq_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vclzq_x_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vclzq_x_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vclzq_x_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vclzq_x_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vclzq_x_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vclzq_x_u8.c: Likewise.\n+\t* gcc.target/arm/simd/mve-vclz.c: Update test.\n+\n+2023-01-25  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/vclsq_m_s16.c: Use\n+\tcheck-function-bodies instead of scan-assembler checks. Use extern\n+\t\"C\" for C++ testing.\n+\t* gcc.target/arm/mve/intrinsics/vclsq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vclsq_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vclsq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vclsq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vclsq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vclsq_x_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vclsq_x_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vclsq_x_s8.c: Likewise.\n+\n+2023-01-25  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/acle/general-c/sizeless-1.c: Avoid\n+\t\"initializer element is not constant\" error.\n+\t* gcc.target/aarch64/sve/acle/general-c/sizeless-2.c: Likewise.\n+\n+2023-01-25  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* lib/target-supports.exp (check_effective_target_vect_long_long): Add\n+\taarch64 to list of targets supporting long long vectorization.\n+\n+2023-01-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/108498\n+\t* gcc.c-torture/execute/pr108498-1.c: New test.\n+\t* gcc.c-torture/execute/pr108498-2.c: New test.\n+\n+2023-01-25  Siddhesh Poyarekar  <siddhesh@gotplt.org>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/108522\n+\t* gcc.dg/builtin-dynamic-object-size-0.c\n+\t(test_dynarray_struct_member): New test.\n+\t(main): Call it.\n+\n 2023-01-24  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/107329"}]}