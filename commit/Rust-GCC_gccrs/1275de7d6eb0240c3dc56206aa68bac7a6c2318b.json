{"sha": "1275de7d6eb0240c3dc56206aa68bac7a6c2318b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTI3NWRlN2Q2ZWIwMjQwYzNkYzU2MjA2YWE2OGJhYzdhNmMyMzE4Yg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2009-04-24T07:20:19Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2009-04-24T07:20:19Z"}, "message": "utils2.c (build_cond_expr): Move SAVE_EXPR ahead of the conditional expression only if...\n\n\t* gcc-interface/utils2.c (build_cond_expr): Move SAVE_EXPR ahead of\n\tthe conditional expression only if it is common to both arms.\n\nFrom-SVN: r146673", "tree": {"sha": "03a8d14167ccef6572ef939b3637bdd160c0c809", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03a8d14167ccef6572ef939b3637bdd160c0c809"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1275de7d6eb0240c3dc56206aa68bac7a6c2318b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1275de7d6eb0240c3dc56206aa68bac7a6c2318b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1275de7d6eb0240c3dc56206aa68bac7a6c2318b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1275de7d6eb0240c3dc56206aa68bac7a6c2318b/comments", "author": null, "committer": null, "parents": [{"sha": "6f61bd412437337e11b367edfb0b8f48ba70f94c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f61bd412437337e11b367edfb0b8f48ba70f94c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f61bd412437337e11b367edfb0b8f48ba70f94c"}], "stats": {"total": 39, "additions": 20, "deletions": 19}, "files": [{"sha": "e27aad1724e97e67e5f08990369e576b192892ac", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1275de7d6eb0240c3dc56206aa68bac7a6c2318b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1275de7d6eb0240c3dc56206aa68bac7a6c2318b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1275de7d6eb0240c3dc56206aa68bac7a6c2318b", "patch": "@@ -1,3 +1,8 @@\n+2009-04-24  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/utils2.c (build_cond_expr): Move SAVE_EXPR ahead of\n+\tthe conditional expression only if it is common to both arms.\n+\n 2009-04-24  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/gigi.h (build_call_alloc_dealloc): Update comment."}, {"sha": "3b2d526c65508d9b8e06dede4e0ecdae0f26783f", "filename": "gcc/ada/gcc-interface/utils2.c", "status": "modified", "additions": 15, "deletions": 19, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1275de7d6eb0240c3dc56206aa68bac7a6c2318b/gcc%2Fada%2Fgcc-interface%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1275de7d6eb0240c3dc56206aa68bac7a6c2318b/gcc%2Fada%2Fgcc-interface%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils2.c?ref=1275de7d6eb0240c3dc56206aa68bac7a6c2318b", "patch": "@@ -1410,44 +1410,40 @@ tree\n build_cond_expr (tree result_type, tree condition_operand,\n                  tree true_operand, tree false_operand)\n {\n-  tree result;\n   bool addr_p = false;\n+  tree result;\n \n-  /* The front-end verifies that result, true and false operands have same base\n-     type.  Convert everything to the result type.  */\n-\n-  true_operand  = convert (result_type, true_operand);\n+  /* The front-end verified that result, true and false operands have\n+     same base type.  Convert everything to the result type.  */\n+  true_operand = convert (result_type, true_operand);\n   false_operand = convert (result_type, false_operand);\n \n-  /* If the result type is unconstrained, take the address of\n-     the operands and then dereference our result.  */\n+  /* If the result type is unconstrained, take the address of the operands\n+     and then dereference our result.  */\n   if (TREE_CODE (result_type) == UNCONSTRAINED_ARRAY_TYPE\n       || CONTAINS_PLACEHOLDER_P (TYPE_SIZE (result_type)))\n     {\n-      addr_p = true;\n       result_type = build_pointer_type (result_type);\n       true_operand = build_unary_op (ADDR_EXPR, result_type, true_operand);\n       false_operand = build_unary_op (ADDR_EXPR, result_type, false_operand);\n+      addr_p = true;\n     }\n \n   result = fold_build3 (COND_EXPR, result_type, condition_operand,\n \t\t\ttrue_operand, false_operand);\n \n-  /* If either operand is a SAVE_EXPR (possibly surrounded by\n-     arithmetic, make sure it gets done.  */\n-  true_operand  = skip_simple_arithmetic (true_operand);\n+  /* If we have a common SAVE_EXPR (possibly surrounded by arithmetics)\n+     in both arms, make sure it gets evaluated by moving it ahead of the\n+     conditional expression.  This is necessary because it is evaluated\n+     in only one place at run time and would otherwise be uninitialized\n+     in one of the arms.  */\n+  true_operand = skip_simple_arithmetic (true_operand);\n   false_operand = skip_simple_arithmetic (false_operand);\n \n-  if (TREE_CODE (true_operand) == SAVE_EXPR)\n+  if (true_operand == false_operand && TREE_CODE (true_operand) == SAVE_EXPR)\n     result = build2 (COMPOUND_EXPR, result_type, true_operand, result);\n \n-  if (TREE_CODE (false_operand) == SAVE_EXPR)\n-    result = build2 (COMPOUND_EXPR, result_type, false_operand, result);\n-\n-  /* ??? Seems the code above is wrong, as it may move ahead of the COND\n-     SAVE_EXPRs with side effects and not shared by both arms.  */\n-\n- if (addr_p)\n+  if (addr_p)\n     result = build_unary_op (INDIRECT_REF, NULL_TREE, result);\n \n   return result;"}]}