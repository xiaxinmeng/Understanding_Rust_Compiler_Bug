{"sha": "666178319d7c893d63bd321a7487dddd973fe414", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjY2MTc4MzE5ZDdjODkzZDYzYmQzMjFhNzQ4N2RkZGQ5NzNmZTQxNA==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2005-04-23T07:02:19Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2005-04-23T07:02:19Z"}, "message": "config.gcc (hppa[12]*-*-hpux10*): Add pa/pa-hpux.opt to $extra_options.\n\n\t* config.gcc (hppa[12]*-*-hpux10*): Add pa/pa-hpux.opt to\n\t$extra_options.  Also add pa/pa-hpux1010.opt for hpux10.[1-9]*.\n\t(hppa*64*-*-hpux11*): Add pa/pa-hpux1010.h to $tm_file.  Add\n\tpa/pa-hpux.opt, pa/pa-hpux1010.opt and pa/pa64-hpux.opt to\n\t$extra_options.  Also add pa/pa-hpux1111.opt for hpux11.[1-9]*.\n\t(hppa[12]*-*-hpux11*): Add pa/pa-hpux1010.h to $tm_file.  Add\n\tpa/pa-hpux.opt to $extra_options.  Also add pa/pa-hpux1111.opt\n\tfor hpux11.[1-9]*.\n\t* config/pa/pa.h (architecture_type, rtx_def, pa_arch_string, pa_arch)\n\t(pa_fixed_range_string, pa_cpu_string, pa_unix_string, target_flags)\n\t(MASK_PA_11, MASK_DISABLE_FPREGS, TARGET_DISABLE_FPREGS)\n\t(MASK_NO_SPACE_REGS, TARGET_NO_SPACE_REGS, MASK_JUMP_IN_DELAY)\n\t(TARGET_JUMP_IN_DELAY, MASK_DISABLE_INDEXING, TARGET_DISABLE_INDEXING)\n\t(MASK_PORTABLE_RUNTIME, TARGET_PORTABLE_RUNTIME, MASK_GAS, TARGET_GAS)\n\t(MASK_SOFT_FLOAT, TARGET_SOFT_FLOAT, MASK_LONG_LOAD_STORE)\n\t(TARGET_LONG_LOAD_STORE, MASK_FAST_INDIRECT_CALLS)\n\t(TARGET_FAST_INDIRECT_CALLS, MASK_BIG_SWITCH, TARGET_BIG_SWITCH)\n\t(MASK_PA_20, MASK_SIO, TARGET_SIO, MASK_GNU_LD, TARGET_GNU_LD)\n\t(MASK_LONG_CALLS, TARGET_LONG_CALLS, TARGET_PA_11, TARGET_PA_20)\n\t(TARGET_SWITCHES, SUBTARGET_SWITCHES, TARGET_OPTIONS)\n\t(SUBTARGET_OPTIONS): Delete.\n\t(TARGET_PA_10): Redefine in terms of TARGET_PA_11 and TARGET_PA_20.\n\t(TARGET_SCHED_DEFAULT): Define to a PROCESSOR_* enum (PROCESSOR_8000)\n\tinstead of a string.\n\t* config/pa/pa.c (pa_arch, pa_arch_string, pa_fixed_range_string)\n\t(pa_cpu_string, pa_unix_string): Delete.\n\t(pa_cpu): Initialize to TARGET_SCHED_DEFAULT.\n\t(flag_pa_unix): Initialize based on TARGET_HPUX_11_11 and\n\tTARGET_HPUX_10_10.\n\t(TARGET_DEFAULT_TARGET_FLAGS, TARGET_HANDLE_OPTION): Override defaults.\n\t(pa_handle_option): New function.\n\t(override_options): Remove handling of -march=, -mfixed-range=,\n\t-mschedule= and -munix=.\n\t* config/pa/pa-hpux.h (SUBTARGET_SWITCHES): Delete.\n\t* config/pa/pa-hpux1010.h (SUBTARGET_OPTIONS): Delete.\n\t* config/pa/pa-hpux10.h (SUBTARGET_OPTIONS): Delete.\n\t* config/pa/pa-hpux1111.h (SUBTARGET_OPTIONS): Delete.\n\t* config/pa/pa-hpux11.h (SUBTARGET_OPTIONS): Delete.\n\t* config/pa/pa64-hpux.h (SUBTARGET_SWITCHES): Delete.\n\t* config/pa/pa64-start.h (TARGET_PA_11, TARGET_PA_20): #undef before\n\tredefining.\n\t* config/pa/pa.opt: New file.\n\t* config/pa/pa-hpux.opt: New file.\n\t* config/pa/pa-hpux1010.opt: New file.\n\t* config/pa/pa-hpux1111.opt: New file.\n\t* config/pa/pa64-hpux.opt: New file.\n\nFrom-SVN: r98605", "tree": {"sha": "1b5b1ba8788ea2d4d5bd2f4adec35a004666d638", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b5b1ba8788ea2d4d5bd2f4adec35a004666d638"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/666178319d7c893d63bd321a7487dddd973fe414", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/666178319d7c893d63bd321a7487dddd973fe414", "html_url": "https://github.com/Rust-GCC/gccrs/commit/666178319d7c893d63bd321a7487dddd973fe414", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/666178319d7c893d63bd321a7487dddd973fe414/comments", "author": null, "committer": null, "parents": [{"sha": "6a47d88fadbbf04e05f6373c368b94e233261e9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a47d88fadbbf04e05f6373c368b94e233261e9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a47d88fadbbf04e05f6373c368b94e233261e9e"}], "stats": {"total": 719, "additions": 362, "deletions": 357}, "files": [{"sha": "a0a8dfb015d72b4edcb1c3ec3aee08acaef6f302", "filename": "gcc/ChangeLog", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/666178319d7c893d63bd321a7487dddd973fe414/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/666178319d7c893d63bd321a7487dddd973fe414/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=666178319d7c893d63bd321a7487dddd973fe414", "patch": "@@ -1,3 +1,52 @@\n+2005-04-23  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config.gcc (hppa[12]*-*-hpux10*): Add pa/pa-hpux.opt to\n+\t$extra_options.  Also add pa/pa-hpux1010.opt for hpux10.[1-9]*.\n+\t(hppa*64*-*-hpux11*): Add pa/pa-hpux1010.h to $tm_file.  Add\n+\tpa/pa-hpux.opt, pa/pa-hpux1010.opt and pa/pa64-hpux.opt to\n+\t$extra_options.  Also add pa/pa-hpux1111.opt for hpux11.[1-9]*.\n+\t(hppa[12]*-*-hpux11*): Add pa/pa-hpux1010.h to $tm_file.  Add\n+\tpa/pa-hpux.opt to $extra_options.  Also add pa/pa-hpux1111.opt\n+\tfor hpux11.[1-9]*.\n+\t* config/pa/pa.h (architecture_type, rtx_def, pa_arch_string, pa_arch)\n+\t(pa_fixed_range_string, pa_cpu_string, pa_unix_string, target_flags)\n+\t(MASK_PA_11, MASK_DISABLE_FPREGS, TARGET_DISABLE_FPREGS)\n+\t(MASK_NO_SPACE_REGS, TARGET_NO_SPACE_REGS, MASK_JUMP_IN_DELAY)\n+\t(TARGET_JUMP_IN_DELAY, MASK_DISABLE_INDEXING, TARGET_DISABLE_INDEXING)\n+\t(MASK_PORTABLE_RUNTIME, TARGET_PORTABLE_RUNTIME, MASK_GAS, TARGET_GAS)\n+\t(MASK_SOFT_FLOAT, TARGET_SOFT_FLOAT, MASK_LONG_LOAD_STORE)\n+\t(TARGET_LONG_LOAD_STORE, MASK_FAST_INDIRECT_CALLS)\n+\t(TARGET_FAST_INDIRECT_CALLS, MASK_BIG_SWITCH, TARGET_BIG_SWITCH)\n+\t(MASK_PA_20, MASK_SIO, TARGET_SIO, MASK_GNU_LD, TARGET_GNU_LD)\n+\t(MASK_LONG_CALLS, TARGET_LONG_CALLS, TARGET_PA_11, TARGET_PA_20)\n+\t(TARGET_SWITCHES, SUBTARGET_SWITCHES, TARGET_OPTIONS)\n+\t(SUBTARGET_OPTIONS): Delete.\n+\t(TARGET_PA_10): Redefine in terms of TARGET_PA_11 and TARGET_PA_20.\n+\t(TARGET_SCHED_DEFAULT): Define to a PROCESSOR_* enum (PROCESSOR_8000)\n+\tinstead of a string.\n+\t* config/pa/pa.c (pa_arch, pa_arch_string, pa_fixed_range_string)\n+\t(pa_cpu_string, pa_unix_string): Delete.\n+\t(pa_cpu): Initialize to TARGET_SCHED_DEFAULT.\n+\t(flag_pa_unix): Initialize based on TARGET_HPUX_11_11 and\n+\tTARGET_HPUX_10_10.\n+\t(TARGET_DEFAULT_TARGET_FLAGS, TARGET_HANDLE_OPTION): Override defaults.\n+\t(pa_handle_option): New function.\n+\t(override_options): Remove handling of -march=, -mfixed-range=,\n+\t-mschedule= and -munix=.\n+\t* config/pa/pa-hpux.h (SUBTARGET_SWITCHES): Delete.\n+\t* config/pa/pa-hpux1010.h (SUBTARGET_OPTIONS): Delete.\n+\t* config/pa/pa-hpux10.h (SUBTARGET_OPTIONS): Delete.\n+\t* config/pa/pa-hpux1111.h (SUBTARGET_OPTIONS): Delete.\n+\t* config/pa/pa-hpux11.h (SUBTARGET_OPTIONS): Delete.\n+\t* config/pa/pa64-hpux.h (SUBTARGET_SWITCHES): Delete.\n+\t* config/pa/pa64-start.h (TARGET_PA_11, TARGET_PA_20): #undef before\n+\tredefining.\n+\t* config/pa/pa.opt: New file.\n+\t* config/pa/pa-hpux.opt: New file.\n+\t* config/pa/pa-hpux1010.opt: New file.\n+\t* config/pa/pa-hpux1111.opt: New file.\n+\t* config/pa/pa64-hpux.opt: New file.\n+\n 2005-04-22  David S. Miller  <davem@davemloft.net>\n \n \t* rtl.h (CONST_DOUBLE): Fix comment, a CONST_DOUBLE holds an"}, {"sha": "32c2a55e663e86444c9b4aefdb06f5c0917f90ca", "filename": "gcc/config.gcc", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/666178319d7c893d63bd321a7487dddd973fe414/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/666178319d7c893d63bd321a7487dddd973fe414/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=666178319d7c893d63bd321a7487dddd973fe414", "patch": "@@ -852,9 +852,11 @@ hppa[12]*-*-hpux10*)\n \tesac\n \ttm_file=\"${tm_file} pa/pa32-regs.h dbxelf.h pa/som.h \\\n \t\t pa/pa-hpux.h pa/pa-hpux10.h\"\n+\textra_options=\"${extra_options} pa/pa-hpux.opt\"\n \tcase ${target} in\n \t*-*-hpux10.[1-9]*)\n \t\ttm_file=\"${tm_file} pa/pa-hpux1010.h\"\n+\t\textra_options=\"${extra_options} pa/pa-hpux1010.opt\"\n \t\t;;\n \tesac\n \ttmake_file=\"pa/t-pa pa/t-pa-hpux pa/t-hpux-shlib\"\n@@ -880,19 +882,24 @@ hppa*64*-*-hpux11*)\n \tif test x$gas = xyes\n \tthen\n \t\ttm_file=\"pa/pa64-start.h ${tm_file} dbxelf.h elfos.h \\\n-\t\t\t pa/pa64-regs.h pa/pa-hpux.h pa/pa-hpux11.h\"\n+\t\t\t pa/pa64-regs.h pa/pa-hpux.h pa/pa-hpux1010.h \\\n+\t\t\t pa/pa-hpux11.h\"\n \telse\n \t\ttm_file=\"pa/pa64-start.h ${tm_file} dbxelf.h pa/elf.h \\\n-\t\t\t pa/pa64-regs.h pa/pa-hpux.h pa/pa-hpux11.h\"\n+\t\t\t pa/pa64-regs.h pa/pa-hpux.h pa/pa-hpux1010.h \\\n+\t\t\t pa/pa-hpux11.h\"\n \tfi\n \tcase ${target} in\n \t*-*-hpux11.[1-9]*)\n \t\ttm_file=\"${tm_file} pa/pa-hpux1111.h pa/pa-64.h pa/pa64-hpux.h\"\n+\t\textra_options=\"${extra_options} pa/pa-hpux1111.opt\"\n \t\t;;\n \t*)\n \t\ttm_file=\"${tm_file} pa/pa-64.h pa/pa64-hpux.h\"\n \t\t;;\n \tesac\n+\textra_options=\"${extra_options} pa/pa-hpux.opt \\\n+\t\t       pa/pa-hpux1010.opt pa/pa64-hpux.opt\"\n \tneed_64bit_hwint=yes\n \ttmake_file=\"pa/t-pa64 pa/t-pa-hpux pa/t-hpux-shlib\"\n \textra_parts=\"crtbegin.o crtend.o crtbeginS.o crtendS.o crtbeginT.o\"\n@@ -909,10 +916,12 @@ hppa[12]*-*-hpux11*)\n \t\t;;\n \tesac\n \ttm_file=\"${tm_file} pa/pa32-regs.h dbxelf.h pa/som.h \\\n-\t\t pa/pa-hpux.h pa/pa-hpux11.h\"\n+\t\t pa/pa-hpux.h pa/pa-hpux1010.h pa/pa-hpux11.h\"\n+\textra_options=\"${extra_options} pa/pa-hpux.opt pa/pa-hpux1010.opt\"\n \tcase ${target} in\n \t*-*-hpux11.[1-9]*)\n \t\ttm_file=\"${tm_file} pa/pa-hpux1111.h\"\n+\t\textra_options=\"${extra_options} pa/pa-hpux1111.opt\"\n \t\t;;\n \tesac\n \ttmake_file=\"pa/t-pa pa/t-pa-hpux pa/t-hpux-shlib\""}, {"sha": "e5cde4a7dc14ed352956a5c3f83967545e5fb6ff", "filename": "gcc/config/pa/pa-hpux.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/666178319d7c893d63bd321a7487dddd973fe414/gcc%2Fconfig%2Fpa%2Fpa-hpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/666178319d7c893d63bd321a7487dddd973fe414/gcc%2Fconfig%2Fpa%2Fpa-hpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-hpux.h?ref=666178319d7c893d63bd321a7487dddd973fe414", "patch": "@@ -91,11 +91,6 @@ Boston, MA 02111-1307, USA.  */\n     }\t\t\t\t\t\t\t\t\\\n   while (0)\n \n-#undef SUBTARGET_SWITCHES\n-#define SUBTARGET_SWITCHES \\\n-  { \"sio\",\t MASK_SIO,\tN_(\"Generate cpp defines for server IO\") }, \\\n-  { \"wsio\",\t-MASK_SIO,\tN_(\"Generate cpp defines for workstation IO\") },\n-\n /* Like the default, except no -lg.  */\n #undef LIB_SPEC\n #define LIB_SPEC \"%{!shared:%{!p:%{!pg:-lc}}%{p: -L/lib/libp/ -lc}%{pg: -L/lib/libp/ -lc}}\""}, {"sha": "7485db2ba1fd5f1b33cf2e5cfccbb653cef75961", "filename": "gcc/config/pa/pa-hpux.opt", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/666178319d7c893d63bd321a7487dddd973fe414/gcc%2Fconfig%2Fpa%2Fpa-hpux.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/666178319d7c893d63bd321a7487dddd973fe414/gcc%2Fconfig%2Fpa%2Fpa-hpux.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-hpux.opt?ref=666178319d7c893d63bd321a7487dddd973fe414", "patch": "@@ -0,0 +1,32 @@\n+; Options for the HP PA-RISC port of the compiler.\n+\n+; Copyright (C) 2005 Free Software Foundation, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 2, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+; for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING.  If not, write to the Free\n+; Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+; 02111-1307, USA.\n+\n+msio\n+Target RejectNegative Mask(SIO) MaskExists\n+Generate cpp defines for server IO\n+\n+munix=93\n+Target RejectNegative\n+Specify UNIX standard for predefines and linking\n+\n+mwsio\n+Target RejectNegative InverseMask(SIO)\n+Generate cpp defines for workstation IO"}, {"sha": "7738a250588cfe82d7c5e76971674ef13bafbdf3", "filename": "gcc/config/pa/pa-hpux10.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/666178319d7c893d63bd321a7487dddd973fe414/gcc%2Fconfig%2Fpa%2Fpa-hpux10.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/666178319d7c893d63bd321a7487dddd973fe414/gcc%2Fconfig%2Fpa%2Fpa-hpux10.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-hpux10.h?ref=666178319d7c893d63bd321a7487dddd973fe414", "patch": "@@ -78,12 +78,6 @@ Boston, MA 02111-1307, USA.  */\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n-#undef SUBTARGET_OPTIONS\n-#define SUBTARGET_OPTIONS                                               \\\n-  { \"unix=\",                    &pa_unix_string,                        \\\n-    N_(\"Specify UNIX standard for predefines and linking.\\n\"            \\\n-       \"Supported value is 93.\"), 0}\n-\n #define CPP_SPEC \"%{threads: -D_REENTRANT -D_DCE_THREADS}\"\n \n /* We can debug dynamically linked executables on hpux9; we also want"}, {"sha": "d86c7864928ccb7f5ce1f78f28dc3d23d033c601", "filename": "gcc/config/pa/pa-hpux1010.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/666178319d7c893d63bd321a7487dddd973fe414/gcc%2Fconfig%2Fpa%2Fpa-hpux1010.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/666178319d7c893d63bd321a7487dddd973fe414/gcc%2Fconfig%2Fpa%2Fpa-hpux1010.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-hpux1010.h?ref=666178319d7c893d63bd321a7487dddd973fe414", "patch": "@@ -22,12 +22,6 @@ Boston, MA 02111-1307, USA.  */\n #undef TARGET_HPUX_10_10\n #define TARGET_HPUX_10_10 1\n \n-#undef SUBTARGET_OPTIONS\n-#define SUBTARGET_OPTIONS\t\t\t\t\t\t\\\n-  { \"unix=\",\t\t\t&pa_unix_string,\t\t\t\\\n-    N_(\"Specify UNIX standard for predefines and linking.\\n\"\t\t\\\n-       \"Supported values are 93 and 95.\"), 0}\n-\n #undef STARTFILE_SPEC\n #define STARTFILE_SPEC \\\n   \"%{!shared:%{pg:gcrt0%O%s}%{!pg:%{p:mcrt0%O%s}%{!p:crt0%O%s}} \\"}, {"sha": "4dd6b5f64b4e5bd368a3095d1d56d8ec63ff9836", "filename": "gcc/config/pa/pa-hpux1010.opt", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/666178319d7c893d63bd321a7487dddd973fe414/gcc%2Fconfig%2Fpa%2Fpa-hpux1010.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/666178319d7c893d63bd321a7487dddd973fe414/gcc%2Fconfig%2Fpa%2Fpa-hpux1010.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-hpux1010.opt?ref=666178319d7c893d63bd321a7487dddd973fe414", "patch": "@@ -0,0 +1,24 @@\n+; Options for the HP PA-RISC port of the compiler.\n+\n+; Copyright (C) 2005 Free Software Foundation, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 2, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+; for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING.  If not, write to the Free\n+; Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+; 02111-1307, USA.\n+\n+munix=95\n+Target RejectNegative\n+Specify UNIX standard for predefines and linking"}, {"sha": "994e432048cdd484309259bd4a257b4b66e1fb75", "filename": "gcc/config/pa/pa-hpux11.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/666178319d7c893d63bd321a7487dddd973fe414/gcc%2Fconfig%2Fpa%2Fpa-hpux11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/666178319d7c893d63bd321a7487dddd973fe414/gcc%2Fconfig%2Fpa%2Fpa-hpux11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-hpux11.h?ref=666178319d7c893d63bd321a7487dddd973fe414", "patch": "@@ -93,12 +93,6 @@ Boston, MA 02111-1307, USA.  */\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n-#undef SUBTARGET_OPTIONS\n-#define SUBTARGET_OPTIONS\t\t\t\t\t\t\\\n-  { \"unix=\",\t\t\t&pa_unix_string,\t\t\t\\\n-    N_(\"Specify UNIX standard for predefines and linking.\\n\"\t\t\\\n-       \"Supported values are 93 and 95.\"), 0}\n-\n #undef CPP_SPEC\n #define CPP_SPEC \\\n   \"%{mt|pthread:-D_REENTRANT -D_THREAD_SAFE -D_POSIX_C_SOURCE=199506L}\""}, {"sha": "ac359ecba1e7a424a7b0232b161859231ab46dc9", "filename": "gcc/config/pa/pa-hpux1111.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/666178319d7c893d63bd321a7487dddd973fe414/gcc%2Fconfig%2Fpa%2Fpa-hpux1111.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/666178319d7c893d63bd321a7487dddd973fe414/gcc%2Fconfig%2Fpa%2Fpa-hpux1111.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-hpux1111.h?ref=666178319d7c893d63bd321a7487dddd973fe414", "patch": "@@ -22,12 +22,6 @@ Boston, MA 02111-1307, USA.  */\n #undef TARGET_HPUX_11_11\n #define TARGET_HPUX_11_11 1\n \n-#undef SUBTARGET_OPTIONS\n-#define SUBTARGET_OPTIONS\t\t\t\t\t\t\\\n-  { \"unix=\",\t\t\t&pa_unix_string,\t\t\t\\\n-    N_(\"Specify UNIX standard for predefines and linking.\\n\"\t\t\\\n-       \"Supported values are 93, 95 and 98.\"), 0}\n-\n #undef STARTFILE_SPEC\n #define STARTFILE_SPEC \\\n   \"%{!shared:%{pg:gcrt0%O%s}%{!pg:%{p:mcrt0%O%s}%{!p:crt0%O%s}} \\"}, {"sha": "76464a0c2674e7d267e8b72cf00d9841626c0e9f", "filename": "gcc/config/pa/pa-hpux1111.opt", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/666178319d7c893d63bd321a7487dddd973fe414/gcc%2Fconfig%2Fpa%2Fpa-hpux1111.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/666178319d7c893d63bd321a7487dddd973fe414/gcc%2Fconfig%2Fpa%2Fpa-hpux1111.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-hpux1111.opt?ref=666178319d7c893d63bd321a7487dddd973fe414", "patch": "@@ -0,0 +1,24 @@\n+; Options for the HP PA-RISC port of the compiler.\n+\n+; Copyright (C) 2005 Free Software Foundation, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 2, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+; for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING.  If not, write to the Free\n+; Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+; 02111-1307, USA.\n+\n+munix=98\n+Target RejectNegative\n+Specify UNIX standard for predefines and linking"}, {"sha": "3ffb7fb524578f6e423eea5de109d68edaf5b072", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 70, "deletions": 106, "changes": 176, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/666178319d7c893d63bd321a7487dddd973fe414/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/666178319d7c893d63bd321a7487dddd973fe414/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=666178319d7c893d63bd321a7487dddd973fe414", "patch": "@@ -84,6 +84,7 @@ hppa_fpstore_bypass_p (rtx out_insn, rtx in_insn)\n \n static void copy_reg_pointer (rtx, rtx);\n static void fix_range (const char *);\n+static bool pa_handle_option (size_t, const char *, int);\n static int hppa_address_cost (rtx);\n static bool hppa_rtx_costs (rtx, int, int, int *);\n static inline rtx force_mode (enum machine_mode, rtx);\n@@ -155,26 +156,11 @@ static struct machine_function * pa_init_machine_status (void);\n rtx hppa_compare_op0, hppa_compare_op1;\n enum cmp_type hppa_branch_type;\n \n-/* Which architecture we are generating code for.  */\n-enum architecture_type pa_arch;\n-\n-/* String to hold which architecture we are generating code for.  */\n-const char *pa_arch_string;\n-\n-/* String used with the -mfixed-range= option.  */\n-const char *pa_fixed_range_string;\n-\n /* Which cpu we are scheduling for.  */\n-enum processor_type pa_cpu;\n-\n-/* String to hold which cpu we are scheduling for.  */\n-const char *pa_cpu_string;\n-\n-/* String used with the -munix= option.  */\n-const char *pa_unix_string;\n+enum processor_type pa_cpu = TARGET_SCHED_DEFAULT;\n \n /* The UNIX standard to use for predefines and linking.  */\n-int flag_pa_unix;\n+int flag_pa_unix = TARGET_HPUX_11_11 ? 1998 : TARGET_HPUX_10_10 ? 1995 : 1993;\n \n /* Counts for the number of callee-saved general and floating point\n    registers which were saved by the current function's prologue.  */\n@@ -259,6 +245,11 @@ static size_t n_deferred_plabels = 0;\n #define TARGET_ASM_DESTRUCTOR pa_asm_out_destructor\n #endif\n \n+#undef TARGET_DEFAULT_TARGET_FLAGS\n+#define TARGET_DEFAULT_TARGET_FLAGS (TARGET_DEFAULT | TARGET_CPU_DEFAULT)\n+#undef TARGET_HANDLE_OPTION\n+#define TARGET_HANDLE_OPTION pa_handle_option\n+\n #undef TARGET_INIT_BUILTINS\n #define TARGET_INIT_BUILTINS pa_init_builtins\n \n@@ -376,105 +367,78 @@ fix_range (const char *const_str)\n     target_flags |= MASK_DISABLE_FPREGS;\n }\n \n-void\n-override_options (void)\n-{\n-  if (pa_cpu_string == NULL)\n-    pa_cpu_string = TARGET_SCHED_DEFAULT;\n-\n-  if (! strcmp (pa_cpu_string, \"8000\"))\n-    {\n-      pa_cpu_string = \"8000\";\n-      pa_cpu = PROCESSOR_8000;\n-    }\n-  else if (! strcmp (pa_cpu_string, \"7100\"))\n-    {\n-      pa_cpu_string = \"7100\";\n-      pa_cpu = PROCESSOR_7100;\n-    }\n-  else if (! strcmp (pa_cpu_string, \"700\"))\n-    {\n-      pa_cpu_string = \"700\";\n-      pa_cpu = PROCESSOR_700;\n-    }\n-  else if (! strcmp (pa_cpu_string, \"7100LC\"))\n-    {\n-      pa_cpu_string = \"7100LC\";\n-      pa_cpu = PROCESSOR_7100LC;\n-    }\n-  else if (! strcmp (pa_cpu_string, \"7200\"))\n-    {\n-      pa_cpu_string = \"7200\";\n-      pa_cpu = PROCESSOR_7200;\n-    }\n-  else if (! strcmp (pa_cpu_string, \"7300\"))\n-    {\n-      pa_cpu_string = \"7300\";\n-      pa_cpu = PROCESSOR_7300;\n-    }\n-  else\n-    {\n-      warning (\"unknown -mschedule= option (%s).\\nValid options are 700, 7100, 7100LC, 7200, 7300, and 8000\\n\", pa_cpu_string);\n-    }\n+/* Implement TARGET_HANDLE_OPTION.  */\n \n-  /* Set the instruction architecture.  */\n-  if (pa_arch_string && ! strcmp (pa_arch_string, \"1.0\"))\n+static bool\n+pa_handle_option (size_t code, const char *arg, int value ATTRIBUTE_UNUSED)\n+{\n+  switch (code)\n     {\n-      pa_arch_string = \"1.0\";\n-      pa_arch = ARCHITECTURE_10;\n+    case OPT_mnosnake:\n+    case OPT_mpa_risc_1_0:\n+    case OPT_march_1_0:\n       target_flags &= ~(MASK_PA_11 | MASK_PA_20);\n-    }\n-  else if (pa_arch_string && ! strcmp (pa_arch_string, \"1.1\"))\n-    {\n-      pa_arch_string = \"1.1\";\n-      pa_arch = ARCHITECTURE_11;\n+      return true;\n+\n+    case OPT_msnake:\n+    case OPT_mpa_risc_1_1:\n+    case OPT_march_1_1:\n       target_flags &= ~MASK_PA_20;\n       target_flags |= MASK_PA_11;\n-    }\n-  else if (pa_arch_string && ! strcmp (pa_arch_string, \"2.0\"))\n-    {\n-      pa_arch_string = \"2.0\";\n-      pa_arch = ARCHITECTURE_20;\n-      target_flags |= MASK_PA_11 | MASK_PA_20;\n-    }\n-  else if (pa_arch_string)\n-    {\n-      warning (\"unknown -march= option (%s).\\nValid options are 1.0, 1.1, and 2.0\\n\", pa_arch_string);\n-    }\n+      return true;\n \n-  if (TARGET_HPUX)\n-    {\n-      /* Set the default UNIX standard for HP-UX.  This affects the\n-\t predefines and startfiles used for the target.  */\n-      if (pa_unix_string == NULL)\n-\tpa_unix_string\n-\t  = TARGET_HPUX_11_11 ? \"98\" : (TARGET_HPUX_10_10 ? \"95\" : \"93\");\n+    case OPT_mpa_risc_2_0:\n+    case OPT_march_2_0:\n+      target_flags |= MASK_PA_11 | MASK_PA_20;\n+      return true;\n \n-      if (!strcmp (pa_unix_string, \"93\"))\n-\tflag_pa_unix = 1993;\n-      else if (!strcmp (pa_unix_string, \"95\"))\n-\tflag_pa_unix = 1995;\n-      else if (TARGET_HPUX_11_11)\n-\t{\n-\t  if (!strcmp (pa_unix_string, \"98\"))\n-\t    flag_pa_unix = 1998;\n-\t  else\n-\t    warning (\"unknown -munix= option (%s).\\n\"\n-\t\t     \"Valid options are 93, 95 and 98.\\n\",\n-\t\t     pa_unix_string);\n-\t}\n-      else if (TARGET_HPUX_10_10)\n-\twarning (\"unknown -munix= option (%s).\"\n-\t\t \"\\nValid options are 93 and 95.\\n\",\n-\t\t pa_unix_string);\n+    case OPT_mschedule_:\n+      if (strcmp (arg, \"8000\") == 0)\n+\tpa_cpu = PROCESSOR_8000;\n+      else if (strcmp (arg, \"7100\") == 0)\n+\tpa_cpu = PROCESSOR_7100;\n+      else if (strcmp (arg, \"700\") == 0)\n+\tpa_cpu = PROCESSOR_700;\n+      else if (strcmp (arg, \"7100LC\") == 0)\n+\tpa_cpu = PROCESSOR_7100LC;\n+      else if (strcmp (arg, \"7200\") == 0)\n+\tpa_cpu = PROCESSOR_7200;\n+      else if (strcmp (arg, \"7300\") == 0)\n+\tpa_cpu = PROCESSOR_7300;\n       else\n-\twarning (\"unknown -munix= option (%s).\\nValid option is 93.\\n\",\n-\t\t pa_unix_string);\n-    }\n+\treturn false;\n+      return true;\n+\n+    case OPT_mfixed_range_:\n+      fix_range (arg);\n+      return true;\n \n-  if (pa_fixed_range_string)\n-    fix_range (pa_fixed_range_string);\n+#if TARGET_HPUX\n+    case OPT_munix_93:\n+      flag_pa_unix = 1993;\n+      return true;\n+#endif\n+\n+#if TARGET_HPUX_10_10\n+    case OPT_munix_95:\n+      flag_pa_unix = 1995;\n+      return true;\n+#endif\n+\n+#if TARGET_HPUX_11_11\n+    case OPT_munix_98:\n+      flag_pa_unix = 1998;\n+      return true;\n+#endif\n \n+    default:\n+      return true;\n+    }\n+}\n+\n+void\n+override_options (void)\n+{\n   /* Unconditional branches in the delay slot are not compatible with dwarf2\n      call frame information.  There is no benefit in using this optimization\n      on PA8000 and later processors.  */"}, {"sha": "0738b494623fd1c3ac9cb0615cb4dff745c09660", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 2, "deletions": 208, "changes": 210, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/666178319d7c893d63bd321a7487dddd973fe414/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/666178319d7c893d63bd321a7487dddd973fe414/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=666178319d7c893d63bd321a7487dddd973fe414", "patch": "@@ -45,30 +45,10 @@ enum processor_type\n   PROCESSOR_8000\n };\n \n-/* Which architecture to generate code for.  */\n-\n-enum architecture_type\n-{\n-  ARCHITECTURE_10,\n-  ARCHITECTURE_11,\n-  ARCHITECTURE_20\n-};\n-\n-struct rtx_def;\n-\n-/* For -march= option.  */\n-extern const char *pa_arch_string;\n-extern enum architecture_type pa_arch;\n-\n-/* For -mfixed-range= option.  */\n-extern const char *pa_fixed_range_string;\n-\n /* For -mschedule= option.  */\n-extern const char *pa_cpu_string;\n extern enum processor_type pa_cpu;\n \n /* For -munix= option.  */\n-extern const char *pa_unix_string;\n extern int flag_pa_unix;\n \n #define pa_cpu_attr ((enum attr_cpu)pa_cpu)\n@@ -77,105 +57,7 @@ extern int flag_pa_unix;\n \n #define TARGET_VERSION fputs (\" (hppa)\", stderr);\n \n-/* Run-time compilation parameters selecting different hardware subsets.  */\n-\n-extern int target_flags;\n-\n-/* compile code for HP-PA 1.1 (\"Snake\").  */\n-\n-#define MASK_PA_11 1\n-\n-/* Disable all FP registers (they all become fixed).  This may be necessary\n-   for compiling kernels which perform lazy context switching of FP regs.\n-   Note if you use this option and try to perform floating point operations\n-   the compiler will abort!  */\n-\n-#define MASK_DISABLE_FPREGS 2\n-#define TARGET_DISABLE_FPREGS (target_flags & MASK_DISABLE_FPREGS)\n-\n-/* Generate code which assumes that all space register are equivalent.\n-   Triggers aggressive unscaled index addressing and faster\n-   builtin_return_address.  */\n-#define MASK_NO_SPACE_REGS 4\n-#define TARGET_NO_SPACE_REGS (target_flags & MASK_NO_SPACE_REGS)\n-\n-/* Allow unconditional jumps in the delay slots of call instructions.  */\n-#define MASK_JUMP_IN_DELAY 8\n-#define TARGET_JUMP_IN_DELAY (target_flags & MASK_JUMP_IN_DELAY)\n-\n-/* Disable indexed addressing modes.  */\n-#define MASK_DISABLE_INDEXING 32\n-#define TARGET_DISABLE_INDEXING (target_flags & MASK_DISABLE_INDEXING)\n-\n-/* Emit code which follows the new portable runtime calling conventions\n-   HP wants everyone to use for ELF objects.  If at all possible you want\n-   to avoid this since it's a performance loss for non-prototyped code.\n-\n-   Note TARGET_PORTABLE_RUNTIME also forces all calls to use inline\n-   long-call stubs which is quite expensive.  */\n-#define MASK_PORTABLE_RUNTIME 64\n-#define TARGET_PORTABLE_RUNTIME (target_flags & MASK_PORTABLE_RUNTIME)\n-\n-/* Emit directives only understood by GAS.  This allows parameter\n-   relocations to work for static functions.  There is no way\n-   to make them work the HP assembler at this time.  */\n-#define MASK_GAS 128\n-#define TARGET_GAS (target_flags & MASK_GAS)\n-\n-/* Emit code for processors which do not have an FPU.  */\n-#define MASK_SOFT_FLOAT 256\n-#define TARGET_SOFT_FLOAT (target_flags & MASK_SOFT_FLOAT)\n-\n-/* Use 3-insn load/store sequences for access to large data segments\n-   in shared libraries on hpux10.  */\n-#define MASK_LONG_LOAD_STORE 512\n-#define TARGET_LONG_LOAD_STORE (target_flags & MASK_LONG_LOAD_STORE)\n-\n-/* Use a faster sequence for indirect calls.  This assumes that calls\n-   through function pointers will never cross a space boundary, and\n-   that the executable is not dynamically linked.  Such assumptions\n-   are generally safe for building kernels and statically linked\n-   executables.  Code compiled with this option will fail miserably if\n-   the executable is dynamically linked or uses nested functions!  */\n-#define MASK_FAST_INDIRECT_CALLS 1024\n-#define TARGET_FAST_INDIRECT_CALLS (target_flags & MASK_FAST_INDIRECT_CALLS)\n-\n-/* Generate code with big switch statements to avoid out of range branches\n-   occurring within the switch table.  */\n-#define MASK_BIG_SWITCH 2048\n-#define TARGET_BIG_SWITCH (target_flags & MASK_BIG_SWITCH)\n-\n-/* Generate code for the HPPA 2.0 architecture.  TARGET_PA_11 should also be\n-   true when this is true.  */\n-#define MASK_PA_20 4096\n-\n-/* Generate cpp defines for server I/O.  */\n-#define MASK_SIO 8192\n-#define TARGET_SIO (target_flags & MASK_SIO)\n-\n-/* Assume GNU linker by default.  */\n-#define MASK_GNU_LD 16384\n-#ifndef TARGET_GNU_LD\n-#define TARGET_GNU_LD (target_flags & MASK_GNU_LD)\n-#endif\n-\n-/* Force generation of long calls.  */\n-#define MASK_LONG_CALLS 32768\n-#ifndef TARGET_LONG_CALLS\n-#define TARGET_LONG_CALLS (target_flags & MASK_LONG_CALLS)\n-#endif\n-\n-#ifndef TARGET_PA_10\n-#define TARGET_PA_10 (target_flags & (MASK_PA_11 | MASK_PA_20) == 0)\n-#endif\n-\n-#ifndef TARGET_PA_11\n-#define TARGET_PA_11 (target_flags & MASK_PA_11)\n-#endif\n-\n-#ifndef TARGET_PA_20\n-#define TARGET_PA_20 (target_flags & MASK_PA_20)\n-#endif\n+#define TARGET_PA_10 (!TARGET_PA_11 && !TARGET_PA_20)\n \n /* Generate code for the HPPA 2.0 architecture in 64bit mode.  */\n #ifndef TARGET_64BIT\n@@ -242,74 +124,6 @@ extern int target_flags;\n    need to generate additional code to save SP into the frame marker.  */\n #define TARGET_HPUX_UNWIND_LIBRARY 0\n \n-/* Macro to define tables used to set the flags.  This is a\n-   list in braces of target switches with each switch being\n-   { \"NAME\", VALUE, \"HELP_STRING\" }.  VALUE is the bits to set,\n-   or minus the bits to clear.  An empty string NAME is used to\n-   identify the default VALUE.  Do not mark empty strings for\n-   translation.  */\n-\n-#define TARGET_SWITCHES \\\n-  {{ \"snake\",\t\t\t MASK_PA_11,\t\t\t\t\\\n-     N_(\"Generate PA1.1 code\") },\t\t\t\t\t\\\n-   { \"nosnake\",\t\t\t-(MASK_PA_11 | MASK_PA_20),\t\t\\\n-     N_(\"Generate PA1.0 code\") },\t\t\t\t\t\\\n-   { \"pa-risc-1-0\",\t\t-(MASK_PA_11 | MASK_PA_20),\t\t\\\n-     N_(\"Generate PA1.0 code\") },\t\t\t\t\t\\\n-   { \"pa-risc-1-1\",\t\t MASK_PA_11,\t\t\t\t\\\n-     N_(\"Generate PA1.1 code\") },\t\t\t\t\t\\\n-   { \"pa-risc-2-0\",\t\t MASK_PA_20,\t\t\t\t\\\n-     N_(\"Generate PA2.0 code (requires binutils 2.10 or later)\") },\t\\\n-   { \"disable-fpregs\",\t\t MASK_DISABLE_FPREGS,\t\t\t\\\n-     N_(\"Disable FP regs\") },\t\t\t\t\t\t\\\n-   { \"no-disable-fpregs\",\t-MASK_DISABLE_FPREGS,\t\t\t\\\n-     N_(\"Do not disable FP regs\") },\t\t\t\t\t\\\n-   { \"no-space-regs\",\t\t MASK_NO_SPACE_REGS,\t\t\t\\\n-     N_(\"Disable space regs\") },\t\t\t\t\t\\\n-   { \"space-regs\",\t\t-MASK_NO_SPACE_REGS,\t\t\t\\\n-     N_(\"Do not disable space regs\") },\t\t\t\t\t\\\n-   { \"jump-in-delay\",\t\t MASK_JUMP_IN_DELAY,\t\t\t\\\n-     N_(\"Put jumps in call delay slots\") },\t\t\t\t\\\n-   { \"no-jump-in-delay\",\t-MASK_JUMP_IN_DELAY,\t\t\t\\\n-     N_(\"Do not put jumps in call delay slots\") },\t\t\t\\\n-   { \"disable-indexing\",\t MASK_DISABLE_INDEXING,\t\t\t\\\n-     N_(\"Disable indexed addressing\") },\t\t\t\t\\\n-   { \"no-disable-indexing\",\t-MASK_DISABLE_INDEXING,\t\t\t\\\n-     N_(\"Do not disable indexed addressing\") },\t\t\t\t\\\n-   { \"portable-runtime\",\t MASK_PORTABLE_RUNTIME,\t\t\t\\\n-     N_(\"Use portable calling conventions\") },\t\t\t\t\\\n-   { \"no-portable-runtime\",\t-MASK_PORTABLE_RUNTIME,\t\t\t\\\n-     N_(\"Do not use portable calling conventions\") },\t\t\t\\\n-   { \"gas\",\t\t\t MASK_GAS,\t\t\t\t\\\n-     N_(\"Assume code will be assembled by GAS\") },\t\t\t\\\n-   { \"no-gas\",\t\t\t-MASK_GAS,\t\t\t\t\\\n-     N_(\"Do not assume code will be assembled by GAS\") },\t\t\\\n-   { \"soft-float\",\t\t MASK_SOFT_FLOAT,\t\t\t\\\n-     N_(\"Use software floating point\") },\t\t\t\t\\\n-   { \"no-soft-float\",\t\t-MASK_SOFT_FLOAT,\t\t\t\\\n-     N_(\"Do not use software floating point\") },\t\t\t\\\n-   { \"long-load-store\",\t\t MASK_LONG_LOAD_STORE,\t\t\t\\\n-     N_(\"Emit long load/store sequences\") },\t\t\t\t\\\n-   { \"no-long-load-store\",\t-MASK_LONG_LOAD_STORE,\t\t\t\\\n-     N_(\"Do not emit long load/store sequences\") },\t\t\t\\\n-   { \"fast-indirect-calls\",\t MASK_FAST_INDIRECT_CALLS,\t\t\\\n-     N_(\"Generate fast indirect calls\") },\t\t\t\t\\\n-   { \"no-fast-indirect-calls\",\t-MASK_FAST_INDIRECT_CALLS,\t\t\\\n-     N_(\"Do not generate fast indirect calls\") },\t\t\t\\\n-   { \"big-switch\",\t\t MASK_BIG_SWITCH,\t\t\t\\\n-     N_(\"Generate code for huge switch statements\") },\t\t\t\\\n-   { \"no-big-switch\",\t\t-MASK_BIG_SWITCH,\t\t\t\\\n-     N_(\"Do not generate code for huge switch statements\") },\t\t\\\n-   { \"long-calls\",\t\t MASK_LONG_CALLS,\t\t\t\\\n-     N_(\"Always generate long calls\") },\t\t\t\t\\\n-   { \"no-long-calls\",\t\t-MASK_LONG_CALLS,\t\t\t\\\n-     N_(\"Generate long calls only when needed\") },\t\t\t\\\n-   { \"linker-opt\",\t\t 0,\t\t\t\t\t\\\n-     N_(\"Enable linker optimizations\") },\t\t\t\t\\\n-   SUBTARGET_SWITCHES\t\t\t\t\t\t\t\\\n-   { \"\",\t\t\t TARGET_DEFAULT | TARGET_CPU_DEFAULT,\t\\\n-     NULL }}\n-\n #ifndef TARGET_DEFAULT\n #define TARGET_DEFAULT (MASK_GAS | MASK_JUMP_IN_DELAY | MASK_BIG_SWITCH)\n #endif\n@@ -318,28 +132,8 @@ extern int target_flags;\n #define TARGET_CPU_DEFAULT 0\n #endif\n \n-#ifndef SUBTARGET_SWITCHES\n-#define SUBTARGET_SWITCHES\n-#endif\n-\n #ifndef TARGET_SCHED_DEFAULT\n-#define TARGET_SCHED_DEFAULT \"8000\"\n-#endif\n-\n-#define TARGET_OPTIONS\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  { \"arch=\",\t\t\t&pa_arch_string,\t\t\t\\\n-    N_(\"Specify PA-RISC architecture for code generation.\\n\"\t\t\\\n-       \"Values are 1.0, 1.1 and 2.0.\"), 0},\t\t\t\t\\\n-  { \"fixed-range=\",\t\t&pa_fixed_range_string,\t\t\t\\\n-    N_(\"Specify range of registers to make fixed.\"), 0},\t\t\\\n-  { \"schedule=\",\t\t&pa_cpu_string,\t\t\t\t\\\n-    N_(\"Specify CPU for scheduling purposes.\"), 0},\t\t\t\\\n-  SUBTARGET_OPTIONS\t\t\t\t\t\t\t\\\n-}\n-\n-#ifndef SUBTARGET_OPTIONS\n-#define SUBTARGET_OPTIONS\n+#define TARGET_SCHED_DEFAULT PROCESSOR_8000\n #endif\n \n /* Support for a compile-time default CPU, et cetera.  The rules are:"}, {"sha": "54a9dfbf5056d303819b4a067f4ef4dba925df63", "filename": "gcc/config/pa/pa.opt", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/666178319d7c893d63bd321a7487dddd973fe414/gcc%2Fconfig%2Fpa%2Fpa.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/666178319d7c893d63bd321a7487dddd973fe414/gcc%2Fconfig%2Fpa%2Fpa.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.opt?ref=666178319d7c893d63bd321a7487dddd973fe414", "patch": "@@ -0,0 +1,119 @@\n+; Options for the HP PA-RISC port of the compiler.\n+\n+; Copyright (C) 2005 Free Software Foundation, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 2, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+; for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING.  If not, write to the Free\n+; Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+; 02111-1307, USA.\n+\n+march=1.0\n+Target RejectNegative\n+Generate PA1.0 code\n+\n+march=1.1\n+Target RejectNegative\n+Generate PA1.1 code\n+\n+march=2.0\n+Target RejectNegative\n+Generate PA2.0 code (requires binutils 2.10 or later)\n+\n+mbig-switch\n+Target Report Mask(BIG_SWITCH)\n+Generate code for huge switch statements\n+\n+mdisable-fpregs\n+Target Report Mask(DISABLE_FPREGS)\n+Disable FP regs\n+\n+mdisable-indexing\n+Target Report Mask(DISABLE_INDEXING)\n+Disable indexed addressing\n+\n+mfast-indirect-calls\n+Target Report Mask(FAST_INDIRECT_CALLS)\n+Generate fast indirect calls\n+\n+mfixed-range=\n+Target RejectNegative Joined\n+Specify range of registers to make fixed.\n+\n+mgas\n+Target Report Mask(GAS)\n+Assume code will be assembled by GAS\n+\n+mjump-in-delay\n+Target Report Mask(JUMP_IN_DELAY)\n+Put jumps in call delay slots\n+\n+;; Not used by gcc\n+mlinker-opt\n+Target RejectNegative\n+Enable linker optimizations\n+\n+mlong-calls\n+Target Report Mask(LONG_CALLS)\n+Always generate long calls\n+\n+mlong-load-store\n+Target Report Mask(LONG_LOAD_STORE)\n+Emit long load/store sequences\n+\n+mnosnake\n+Target RejectNegative\n+Generate PA1.0 code\n+\n+mno-space-regs\n+Target RejectNegative Report Mask(NO_SPACE_REGS)\n+Disable space regs\n+\n+mpa-risc-1-0\n+Target RejectNegative\n+Generate PA1.0 code\n+\n+mpa-risc-1-1\n+Target RejectNegative Mask(PA_11)\n+Generate PA1.1 code\n+\n+mpa-risc-2-0\n+Target RejectNegative Mask(PA_20)\n+Generate PA2.0 code (requires binutils 2.10 or later)\n+\n+mportable-runtime\n+Target Report Mask(PORTABLE_RUNTIME)\n+Use portable calling conventions\n+\n+mschedule=\n+Target RejectNegative Joined\n+Specify CPU for scheduling purposes.  Valid arguments are 700, 7100, 7100LC, 7200, 7300, and 8000.\n+\n+msoft-float\n+Target Report Mask(SOFT_FLOAT)\n+Use software floating point\n+\n+msnake\n+Target RejectNegative\n+Generate PA1.1 code\n+\n+mspace-regs\n+Target RejectNegative Report InverseMask(NO_SPACE_REGS)\n+Do not disable space regs\n+\n+Mask(SIO)\n+;; Generate cpp defines for server I/O.\n+\n+Mask(GNU_LD)\n+;; Assume GNU linker by default"}, {"sha": "50117d3eb1c5306337b1051fb992200cf648bf00", "filename": "gcc/config/pa/pa64-hpux.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/666178319d7c893d63bd321a7487dddd973fe414/gcc%2Fconfig%2Fpa%2Fpa64-hpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/666178319d7c893d63bd321a7487dddd973fe414/gcc%2Fconfig%2Fpa%2Fpa64-hpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa64-hpux.h?ref=666178319d7c893d63bd321a7487dddd973fe414", "patch": "@@ -20,17 +20,6 @@ along with GCC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-#undef SUBTARGET_SWITCHES\n-#define SUBTARGET_SWITCHES\t\t\t\t\\\n-  { \"sio\",\t MASK_SIO,\t\t\t\t\\\n-     N_(\"Generate cpp defines for server IO\") },\t\\\n-  { \"wsio\",\t-MASK_SIO,\t\t\t\t\\\n-     N_(\"Generate cpp defines for workstation IO\") },\t\\\n-  {\"gnu-ld\",\t MASK_GNU_LD,\t\t\t\t\\\n-     N_(\"Assume code will be linked by GNU ld\") },\t\\\n-  {\"hp-ld\",\t-MASK_GNU_LD,\t\t\t\t\\\n-     N_(\"Assume code will be linked by HP ld\") },\n-\n /* We can debug dynamically linked executables on hpux11; we also\n    want dereferencing of a NULL pointer to cause a SEGV.  Do not move\n    the \"+Accept TypeMismatch\" switch.  We check for it in collect2"}, {"sha": "97bf73b759fad1e625f4f6f392f9638cb9702a20", "filename": "gcc/config/pa/pa64-hpux.opt", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/666178319d7c893d63bd321a7487dddd973fe414/gcc%2Fconfig%2Fpa%2Fpa64-hpux.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/666178319d7c893d63bd321a7487dddd973fe414/gcc%2Fconfig%2Fpa%2Fpa64-hpux.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa64-hpux.opt?ref=666178319d7c893d63bd321a7487dddd973fe414", "patch": "@@ -0,0 +1,28 @@\n+; Options for the HP PA-RISC port of the compiler.\n+\n+; Copyright (C) 2005 Free Software Foundation, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 2, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+; for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING.  If not, write to the Free\n+; Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+; 02111-1307, USA.\n+\n+mgnu-ld\n+Target RejectNegative Mask(GNU_LD) MaskExists\n+Assume code will be linked by GNU ld\n+\n+mhp-ld\n+Target RejectNegative InverseMask(GNU_LD)\n+Assume code will be linked by HP ld"}, {"sha": "9d7b19a3710240b3376d5ccb7e2f2225611098ff", "filename": "gcc/config/pa/pa64-start.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/666178319d7c893d63bd321a7487dddd973fe414/gcc%2Fconfig%2Fpa%2Fpa64-start.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/666178319d7c893d63bd321a7487dddd973fe414/gcc%2Fconfig%2Fpa%2Fpa64-start.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa64-start.h?ref=666178319d7c893d63bd321a7487dddd973fe414", "patch": "@@ -2,5 +2,7 @@\n    runtime compiler switch.  So we might as well lose the overhead with\n    checking for TARGET_64BIT.  */\n #define TARGET_64BIT 1\n+#undef TARGET_PA_11\n #define TARGET_PA_11 1\n+#undef TARGET_PA_20\n #define TARGET_PA_20 1"}]}