{"sha": "516ebd44865ef872178e6003100d241d3dd39237", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTE2ZWJkNDQ4NjVlZjg3MjE3OGU2MDAzMTAwZDI0MWQzZGQzOTIzNw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2005-11-12T00:19:24Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-11-12T00:19:24Z"}, "message": "re PR libstdc++/24808 (is_object fails to compile with incomplete types)\n\n2005-11-11  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/24808\n\t* include/tr1/type_traits (__is_abstract_helper): Rename to __in_array\n\t(with complemented logic).\n\t(is_function): Use it, don't use __conv_helper.\n\t(is_abstract): Adjust.\n\t(__conv_helper): Rename to __is_convertible_simple.\n\t(is_convertible): Adjust.\n\t* testsuite/testsuite_tr1.h (class IncompleteClass): Add.\n\t* testsuite/tr1/4_metaprogramming/composite_type_traits/is_object/\n\t24808.cc: New.\n\t* testsuite/tr1/4_metaprogramming/primary_type_categories/is_enum/\n\t24808.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/primary_type_categories/is_function/\n\t24808.cc: Likewise.\n\nFrom-SVN: r106818", "tree": {"sha": "1e4c129574445fd3ec42abdb00758ec44217ca2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e4c129574445fd3ec42abdb00758ec44217ca2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/516ebd44865ef872178e6003100d241d3dd39237", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/516ebd44865ef872178e6003100d241d3dd39237", "html_url": "https://github.com/Rust-GCC/gccrs/commit/516ebd44865ef872178e6003100d241d3dd39237", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/516ebd44865ef872178e6003100d241d3dd39237/comments", "author": null, "committer": null, "parents": [{"sha": "02b3514c846f40f04ee6c0a271ba7b1f5de2c246", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02b3514c846f40f04ee6c0a271ba7b1f5de2c246", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02b3514c846f40f04ee6c0a271ba7b1f5de2c246"}], "stats": {"total": 210, "additions": 169, "deletions": 41}, "files": [{"sha": "1d812ccc475416b662cbe3a8e9b9422a7a8d068a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/516ebd44865ef872178e6003100d241d3dd39237/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/516ebd44865ef872178e6003100d241d3dd39237/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=516ebd44865ef872178e6003100d241d3dd39237", "patch": "@@ -1,3 +1,20 @@\n+2005-11-11  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/24808\n+\t* include/tr1/type_traits (__is_abstract_helper): Rename to __in_array\n+\t(with complemented logic).\n+\t(is_function): Use it, don't use __conv_helper.\n+\t(is_abstract): Adjust.\n+\t(__conv_helper): Rename to __is_convertible_simple.\n+\t(is_convertible): Adjust.\n+\t* testsuite/testsuite_tr1.h (class IncompleteClass): Add.\n+\t* testsuite/tr1/4_metaprogramming/composite_type_traits/is_object/\n+\t24808.cc: New.\n+\t* testsuite/tr1/4_metaprogramming/primary_type_categories/is_enum/\n+\t24808.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/primary_type_categories/is_function/\n+\t24808.cc: Likewise.\n+\n 2005-11-11  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/24799"}, {"sha": "70f3316a7bc4d09fb7fd2ab0ece8cc31515591f7", "filename": "libstdc++-v3/include/tr1/type_traits", "status": "modified", "additions": 28, "deletions": 41, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/516ebd44865ef872178e6003100d241d3dd39237/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/516ebd44865ef872178e6003100d241d3dd39237/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits?ref=516ebd44865ef872178e6003100d241d3dd39237", "patch": "@@ -42,24 +42,25 @@ namespace std\n {\n namespace tr1\n {\n-  // For use in __conv_helper, is_abstract and elsewhere.\n+  // For use in __in_array and elsewhere.\n   struct __sfinae_types\n   {\n     typedef char __one;\n     typedef struct { char __arr[2]; } __two;\n   };\n \n-  template<typename _From, typename _To>\n-    struct __conv_helper\n+  template<typename _Tp>\n+    struct __in_array\n     : public __sfinae_types\n     {\n     private:\n-      static __one __test(_To);\n-      static __two __test(...);\n-      static _From __makeFrom();\n+      template<typename _Up>\n+        static __one __test(_Up(*)[1]);\n+      template<typename>\n+        static __two __test(...);\n     \n     public:\n-      static const bool __value = sizeof(__test(__makeFrom())) == 1;\n+      static const bool __value = sizeof(__test<_Tp>(0)) == 1;\n     };\n \n #define _DEFINE_SPEC_BODY(_Value)                                    \\\n@@ -183,22 +184,12 @@ namespace tr1\n   template<typename>\n     struct is_class { };\n \n-  template<typename _Tp, bool = (is_void<_Tp>::value\n-\t\t\t\t || is_reference<_Tp>::value)>\n-    struct __is_function_helper\n-    {\n-      static const bool __value = (__conv_helper<typename\n-\t\t\t\t   add_reference<_Tp>::type, typename\n-\t\t\t\t   add_pointer<_Tp>::type>::__value);\n-    };\n-\n-  template<typename _Tp>\n-    struct __is_function_helper<_Tp, true>\n-    { static const bool __value = false; };\n-\n   template<typename _Tp>\n     struct is_function\n-    : public integral_constant<bool, __is_function_helper<_Tp>::__value>\n+    : public integral_constant<bool, !(__in_array<_Tp>::__value\n+\t\t\t\t       || __is_union_or_class<_Tp>::value\n+\t\t\t\t       || is_reference<_Tp>::value\n+\t\t\t\t       || is_void<_Tp>::value)>\n     { };\n \n   /// @brief  composite type traits [4.5.2].\n@@ -338,27 +329,10 @@ namespace tr1\n     { };\n \n   // Exploit the resolution DR core/337.\n-  template<typename _Tp, bool = !is_object<_Tp>::value>\n-    struct __is_abstract_helper\n-    : public __sfinae_types\n-    {\n-    private:\n-      template<typename>\n-        static __one __test(...);\n-      template<typename _Up>\n-        static __two __test(_Up(*)[1]);\n-    \n-    public:\n-      static const bool __value = sizeof(__test<_Tp>(0)) == 1;\n-    };\n-  \n-  template<typename _Tp>\n-    struct __is_abstract_helper<_Tp, true>\n-    { static const bool __value = false; };\n-\n   template<typename _Tp>\n     struct is_abstract\n-    : public integral_constant<bool, __is_abstract_helper<_Tp>::__value> { };\n+    : public integral_constant<bool, (!__in_array<_Tp>::__value\n+\t\t\t\t      && __is_union_or_class<_Tp>::value)> { };\n \n   template<typename _Tp>\n     struct has_trivial_constructor\n@@ -490,6 +464,19 @@ namespace tr1\n \t\t\t       __is_base_of_helper<_Base, _Derived>::__value>\n     { };\n \n+  template<typename _From, typename _To>\n+    struct __is_convertible_simple\n+    : public __sfinae_types\n+    {\n+    private:\n+      static __one __test(_To);\n+      static __two __test(...);\n+      static _From __makeFrom();\n+    \n+    public:\n+      static const bool __value = sizeof(__test(__makeFrom())) == 1;\n+    };\n+\n   template<typename _Tp>\n     struct __is_int_or_cref\n     {\n@@ -510,7 +497,7 @@ namespace tr1\n     struct __is_convertible_helper\n     {\n       // \"An imaginary lvalue of type From...\".\n-      static const bool __value = (__conv_helper<typename\n+      static const bool __value = (__is_convertible_simple<typename\n \t\t\t\t   add_reference<_From>::type, _To>::__value);\n     };\n "}, {"sha": "e925c84199daddba62712544d6dc304ae67bfc4a", "filename": "libstdc++-v3/testsuite/testsuite_tr1.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/516ebd44865ef872178e6003100d241d3dd39237/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_tr1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/516ebd44865ef872178e6003100d241d3dd39237/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_tr1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_tr1.h?ref=516ebd44865ef872178e6003100d241d3dd39237", "patch": "@@ -102,6 +102,7 @@ namespace __gnu_test\n \n   union UnionType { };\n \n+  class IncompleteClass;\n \n   int truncate_float(float x) { return (int)x; }\n   long truncate_double(double x) { return (long)x; }"}, {"sha": "70ba0167388008433cf533ed2f9472c69db8dc43", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/composite_type_traits/is_object/24808.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/516ebd44865ef872178e6003100d241d3dd39237/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fcomposite_type_traits%2Fis_object%2F24808.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/516ebd44865ef872178e6003100d241d3dd39237/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fcomposite_type_traits%2Fis_object%2F24808.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fcomposite_type_traits%2Fis_object%2F24808.cc?ref=516ebd44865ef872178e6003100d241d3dd39237", "patch": "@@ -0,0 +1,41 @@\n+// 2005-11-11  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 4.5.2 Composite type traits\n+\n+#include <tr1/type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+// libstdc++/24808\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::tr1::is_object;\n+  using namespace __gnu_test;\n+\n+  VERIFY( (test_category<is_object, IncompleteClass>(true)) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "88a3cdceda63a553b2de5d74141a5611dcc7fddb", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/primary_type_categories/is_enum/24808.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/516ebd44865ef872178e6003100d241d3dd39237/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_enum%2F24808.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/516ebd44865ef872178e6003100d241d3dd39237/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_enum%2F24808.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_enum%2F24808.cc?ref=516ebd44865ef872178e6003100d241d3dd39237", "patch": "@@ -0,0 +1,41 @@\n+// 2005-11-11  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 4.5.1 Primary type categories\n+\n+#include <tr1/type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+// libstdc++/24808\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::tr1::is_enum;\n+  using namespace __gnu_test;\n+\n+  VERIFY( (test_category<is_enum, IncompleteClass>(false)) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "6ba9969a2ee5b990e877a03793a3fa3877663731", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/primary_type_categories/is_function/24808.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/516ebd44865ef872178e6003100d241d3dd39237/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_function%2F24808.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/516ebd44865ef872178e6003100d241d3dd39237/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_function%2F24808.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_function%2F24808.cc?ref=516ebd44865ef872178e6003100d241d3dd39237", "patch": "@@ -0,0 +1,41 @@\n+// 2005-11-11  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 4.5.1 Primary type categories\n+\n+#include <tr1/type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+// libstdc++/24808\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::tr1::is_function;\n+  using namespace __gnu_test;\n+\n+  VERIFY( (test_category<is_function, IncompleteClass>(false)) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}