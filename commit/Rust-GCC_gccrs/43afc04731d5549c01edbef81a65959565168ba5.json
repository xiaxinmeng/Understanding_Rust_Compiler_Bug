{"sha": "43afc04731d5549c01edbef81a65959565168ba5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDNhZmMwNDczMWQ1NTQ5YzAxZWRiZWY4MWE2NTk1OTU2NTE2OGJhNQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2010-07-23T20:13:07Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2010-07-23T20:13:07Z"}, "message": "re PR fortran/44945 (Wrong decl for module vars / FAIL: gfortran.dg/char_array_structure_constructor.f90)\n\n2010-07-23  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/44945\n        * trans-decl.c (gfc_get_symbol_decl): Use module decl with\n        -fwhole-file also for derived types.\n        * trans-types.c (copy_dt_decls_ifequal): Remove static and\n        rename to gfc_copy_dt_decls_ifequal.\n        (gfc_get_derived_type): Update call.\n        * trans-types.h (gfc_copy_dt_decls_ifequal): Add prototype.\n\n2010-07-23  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/44945\n        * gfortran.dg/char_array_structure_constructor.f90: Add\n        -fwhole-file as dg-option as it otherwise fails on some\n        systems.\n\nFrom-SVN: r162487", "tree": {"sha": "3f39d7ddcebd9dfbe34d03ae5000327341777035", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f39d7ddcebd9dfbe34d03ae5000327341777035"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43afc04731d5549c01edbef81a65959565168ba5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43afc04731d5549c01edbef81a65959565168ba5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43afc04731d5549c01edbef81a65959565168ba5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43afc04731d5549c01edbef81a65959565168ba5/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "48a32c49568d0f93edb0a904f5ac871e4e44c091", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48a32c49568d0f93edb0a904f5ac871e4e44c091", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48a32c49568d0f93edb0a904f5ac871e4e44c091"}], "stats": {"total": 40, "additions": 32, "deletions": 8}, "files": [{"sha": "e485e726a9782fb7d67163ba313e1fdd05ff2816", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43afc04731d5549c01edbef81a65959565168ba5/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43afc04731d5549c01edbef81a65959565168ba5/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=43afc04731d5549c01edbef81a65959565168ba5", "patch": "@@ -1,3 +1,13 @@\n+2010-07-23  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/44945\n+\t* trans-decl.c (gfc_get_symbol_decl): Use module decl with\n+\t-fwhole-file also for derived types.\n+\t* trans-types.c (copy_dt_decls_ifequal): Remove static and\n+\trename to gfc_copy_dt_decls_ifequal.\n+\t(gfc_get_derived_type): Update call.\n+\t* trans-types.h (gfc_copy_dt_decls_ifequal): Add prototype.\n+\n 2010-07-23  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/45030"}, {"sha": "a1789ea74589f4cb3155d48d330d8224302f6fb0", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43afc04731d5549c01edbef81a65959565168ba5/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43afc04731d5549c01edbef81a65959565168ba5/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=43afc04731d5549c01edbef81a65959565168ba5", "patch": "@@ -1129,11 +1129,9 @@ gfc_get_symbol_decl (gfc_symbol * sym)\n     return sym->backend_decl;\n \n   /* If use associated and whole file compilation, use the module\n-     declaration.  This is only needed for intrinsic types because\n-     they are substituted for one another during optimization.  */\n+     declaration.  */\n   if (gfc_option.flag_whole_file\n \t&& sym->attr.flavor == FL_VARIABLE\n-\t&& sym->ts.type != BT_DERIVED\n \t&& sym->attr.use_assoc\n \t&& sym->module)\n     {\n@@ -1147,6 +1145,9 @@ gfc_get_symbol_decl (gfc_symbol * sym)\n \t  gfc_find_symbol (sym->name, gsym->ns, 0, &s);\n \t  if (s && s->backend_decl)\n \t    {\n+\t      if (sym->ts.type == BT_DERIVED)\n+\t\tgfc_copy_dt_decls_ifequal (s->ts.u.derived, sym->ts.u.derived,\n+\t\t\t\t\t   true);\n \t      if (sym->ts.type == BT_CHARACTER)\n \t\tsym->ts.u.cl->backend_decl = s->ts.u.cl->backend_decl;\n \t      return s->backend_decl;"}, {"sha": "62b298c213b98137717a0eb49dc9e9f61a1e8906", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43afc04731d5549c01edbef81a65959565168ba5/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43afc04731d5549c01edbef81a65959565168ba5/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=43afc04731d5549c01edbef81a65959565168ba5", "patch": "@@ -1884,8 +1884,8 @@ gfc_add_field_to_struct (tree context, tree name, tree type, tree **chain)\n    the two derived type symbols are \"equal\", as described\n    in 4.4.2 and resolved by gfc_compare_derived_types.  */\n \n-static int\n-copy_dt_decls_ifequal (gfc_symbol *from, gfc_symbol *to,\n+int\n+gfc_copy_dt_decls_ifequal (gfc_symbol *from, gfc_symbol *to,\n \t\t       bool from_gsym)\n {\n   gfc_component *to_cm;\n@@ -1996,7 +1996,7 @@ gfc_get_derived_type (gfc_symbol * derived)\n \t  gfc_find_symbol (derived->name, gsym->ns, 0, &s);\n \t  if (s && s->backend_decl)\n \t    {\n-\t      copy_dt_decls_ifequal (s, derived, true);\n+\t      gfc_copy_dt_decls_ifequal (s, derived, true);\n \t      goto copy_derived_types;\n \t    }\n \t}\n@@ -2016,7 +2016,7 @@ gfc_get_derived_type (gfc_symbol * derived)\n \t  dt = ns->derived_types;\n \t  for (; dt && !canonical; dt = dt->next)\n \t    {\n-\t      copy_dt_decls_ifequal (dt->derived, derived, true);\n+\t      gfc_copy_dt_decls_ifequal (dt->derived, derived, true);\n \t      if (derived->backend_decl)\n \t\tgot_canonical = true;\n \t    }\n@@ -2183,7 +2183,7 @@ gfc_get_derived_type (gfc_symbol * derived)\n copy_derived_types:\n \n   for (dt = gfc_derived_types; dt; dt = dt->next)\n-    copy_dt_decls_ifequal (derived, dt->derived, false);\n+    gfc_copy_dt_decls_ifequal (derived, dt->derived, false);\n \n   return derived->backend_decl;\n }"}, {"sha": "63427f394e9fa38c28c2af32a9a2135bf10e970e", "filename": "gcc/fortran/trans-types.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43afc04731d5549c01edbef81a65959565168ba5/gcc%2Ffortran%2Ftrans-types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43afc04731d5549c01edbef81a65959565168ba5/gcc%2Ffortran%2Ftrans-types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.h?ref=43afc04731d5549c01edbef81a65959565168ba5", "patch": "@@ -64,6 +64,7 @@ tree gfc_get_character_type_len_for_eltype (tree, tree);\n \n tree gfc_sym_type (gfc_symbol *);\n tree gfc_typenode_for_spec (gfc_typespec *);\n+int gfc_copy_dt_decls_ifequal (gfc_symbol *, gfc_symbol *, bool);\n \n tree gfc_get_function_type (gfc_symbol *);\n "}, {"sha": "4083476e2549b40f04a97f55c6296edb69c73929", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43afc04731d5549c01edbef81a65959565168ba5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43afc04731d5549c01edbef81a65959565168ba5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=43afc04731d5549c01edbef81a65959565168ba5", "patch": "@@ -1,3 +1,10 @@\n+2010-07-23  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/44945\n+\t* gfortran.dg/char_array_structure_constructor.f90: Add\n+\t-fwhole-file as dg-option as it otherwise fails on some\n+\tsystems.\n+\n 2010-07-23  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/aggr16.ad[sb]: New test."}, {"sha": "22669363e0fc671e10d490cf4f1ef69398a51227", "filename": "gcc/testsuite/gfortran.dg/char_array_structure_constructor.f90", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43afc04731d5549c01edbef81a65959565168ba5/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_array_structure_constructor.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43afc04731d5549c01edbef81a65959565168ba5/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_array_structure_constructor.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_array_structure_constructor.f90?ref=43afc04731d5549c01edbef81a65959565168ba5", "patch": "@@ -1,4 +1,9 @@\n ! { dg-do run }\n+! { dg-options \"-fwhole-file\" }\n+!\n+! PR fortran/19107\n+! -fwhole-file flag added for PR fortran/44945\n+!\n ! This test the fix of PR19107, where character array actual\n ! arguments in derived type constructors caused an ICE.\n ! It also checks that the scalar counterparts are OK."}]}