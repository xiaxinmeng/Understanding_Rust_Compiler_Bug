{"sha": "2fe6fc5268db07bb59d80fa0280668b3a2c9a99b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmZlNmZjNTI2OGRiMDdiYjU5ZDgwZmEwMjgwNjY4YjNhMmM5YTk5Yg==", "commit": {"author": {"name": "Danny Smith", "email": "dannysmith@users.sourceforge.net", "date": "2003-11-12T05:56:44Z"}, "committer": {"name": "Mohan Embar", "email": "membar@gcc.gnu.org", "date": "2003-11-12T05:56:44Z"}, "message": "jni.cc (JNI_CreateJavaVM): Remove JNIEXPORT.\n\n\t* jni.cc (JNI_CreateJavaVM): Remove JNIEXPORT.\n\t(JNI_GetCreatedJavaVMs): Likewise.\n\t(JNI_GetDefaultJavaVMInitArgs): Likewise.\n\t* include/jni.h (JNIIMPEXP): Remove definition\n\tand replace with...\n\t(__GCJ_JNIIMPEXP__): New macro, applicable only to libgcj\n\tsymbols,\n\t(__GCJ_DLL__): New macro, controlling __GCJ_JNIIMPEXP__.\n\nFrom-SVN: r73484", "tree": {"sha": "b95b0d17479066c17ecfd98cfcee0ff5eb5a0e66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b95b0d17479066c17ecfd98cfcee0ff5eb5a0e66"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2fe6fc5268db07bb59d80fa0280668b3a2c9a99b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fe6fc5268db07bb59d80fa0280668b3a2c9a99b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fe6fc5268db07bb59d80fa0280668b3a2c9a99b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fe6fc5268db07bb59d80fa0280668b3a2c9a99b/comments", "author": null, "committer": null, "parents": [{"sha": "22e5c8fa3c715dad01545ad6feb78c8e577d1578", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22e5c8fa3c715dad01545ad6feb78c8e577d1578", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22e5c8fa3c715dad01545ad6feb78c8e577d1578"}], "stats": {"total": 50, "additions": 37, "deletions": 13}, "files": [{"sha": "01e2b1da0deec2a63e01fc5d41803e5c12df4d4c", "filename": "libjava/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fe6fc5268db07bb59d80fa0280668b3a2c9a99b/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fe6fc5268db07bb59d80fa0280668b3a2c9a99b/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=2fe6fc5268db07bb59d80fa0280668b3a2c9a99b", "patch": "@@ -1,3 +1,14 @@\n+2003-11-11  Danny Smith  <dannysmith@users.sourceforge.net>\n+\n+\t* jni.cc (JNI_CreateJavaVM): Remove JNIEXPORT.\n+\t(JNI_GetCreatedJavaVMs): Likewise.\n+\t(JNI_GetDefaultJavaVMInitArgs): Likewise.\n+\t* include/jni.h (JNIIMPEXP): Remove definition\n+\tand replace with...\n+\t(__GCJ_JNIIMPEXP__): New macro, applicable only to libgcj\n+\tsymbols,\n+\t(__GCJ_DLL__): New macro, controlling __GCJ_JNIIMPEXP__.\n+\n 2003-11-11  Thomas Fitzsimmons  <fitzsim@redhat.com>\n \n \t* Makefile.am: Add GdkPixbufDecoder.java and"}, {"sha": "4e39e646f517c3e0aa0e4cbc96a710cf16ed34de", "filename": "libjava/include/jni.h", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fe6fc5268db07bb59d80fa0280668b3a2c9a99b/libjava%2Finclude%2Fjni.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fe6fc5268db07bb59d80fa0280668b3a2c9a99b/libjava%2Finclude%2Fjni.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjni.h?ref=2fe6fc5268db07bb59d80fa0280668b3a2c9a99b", "patch": "@@ -178,22 +178,30 @@ typedef void *jmethodID;\n \n #define JNIIMPORT        __declspec(dllimport)\n #define JNIEXPORT        __declspec(dllexport)\n+\n #define JNICALL          __stdcall\n \n-#else\n+/* These defines apply to symbols in libgcj */\n+#ifdef __GCJ_DLL__\n+# ifdef __GCJ_JNI_IMPL__\n+#  define __GCJ_JNIIMPEXP__ JNIEXPORT\n+# else\n+#  define __GCJ_JNIIMPEXP__ JNIIMPORT\n+# endif /* ! __GCJ_JNI_IMPL__ */\n+#else /* ! __GCJ_DLL__ */\n+# define __GCJ_JNIIMPEXP__\n+#endif /*  __GCJ_DLL__ */\n+\n+#else /* !( _WIN32 || __WIN32__ || WIN32) */\n \n #define JNIIMPORT\n #define JNIEXPORT\n #define JNICALL\n+#define __GCJ_JNIIMPEXP__\n \n #endif /* !( _WIN32 || __WIN32__ || WIN32) */\n \n-#ifdef __GCJ_JNI_IMPL__\n-#define JNIIMPEXP JNIEXPORT\n-#else\n-#define JNIIMPEXP JNIIMPORT\n-#endif /* ! __GCJ_JNI_IMPL__ */\n-\n+ \n #ifdef __cplusplus\n extern \"C\"\n {\n@@ -206,9 +214,14 @@ extern JNIEXPORT void JNICALL JNI_OnUnload (JavaVM *, void *);\n \n /* These functions are called by user code to start using the\n    invocation API.  */\n-extern JNIIMPEXP jint JNICALL JNI_GetDefaultJavaVMInitArgs (void *);\n-extern JNIIMPEXP jint JNICALL JNI_CreateJavaVM (JavaVM **, void **, void *);\n-extern JNIIMPEXP jint JNICALL JNI_GetCreatedJavaVMs(JavaVM **, jsize, jsize *);\n+extern __GCJ_JNIIMPEXP__ jint JNICALL\n+JNI_GetDefaultJavaVMInitArgs (void *);\n+\n+extern __GCJ_JNIIMPEXP__ jint JNICALL\n+JNI_CreateJavaVM (JavaVM **, void **, void *);\n+\n+extern __GCJ_JNIIMPEXP__ jint JNICALL\n+JNI_GetCreatedJavaVMs(JavaVM **, jsize, jsize *);\n \n #ifdef __cplusplus\n }"}, {"sha": "31c8fd01ce068fd16d0b0877e507bbe7b09625d4", "filename": "libjava/jni.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fe6fc5268db07bb59d80fa0280668b3a2c9a99b/libjava%2Fjni.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fe6fc5268db07bb59d80fa0280668b3a2c9a99b/libjava%2Fjni.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni.cc?ref=2fe6fc5268db07bb59d80fa0280668b3a2c9a99b", "patch": "@@ -2377,7 +2377,7 @@ static jint\n   return 0;\n }\n \n-JNIEXPORT jint JNICALL\n+jint JNICALL\n JNI_GetDefaultJavaVMInitArgs (void *args)\n {\n   jint version = * (jint *) args;\n@@ -2394,7 +2394,7 @@ JNI_GetDefaultJavaVMInitArgs (void *args)\n   return 0;\n }\n \n-JNIEXPORT jint JNICALL\n+jint JNICALL\n JNI_CreateJavaVM (JavaVM **vm, void **penv, void *args)\n {\n   JvAssert (! the_vm);\n@@ -2459,7 +2459,7 @@ JNI_CreateJavaVM (JavaVM **vm, void **penv, void *args)\n   return 0;\n }\n \n-JNIEXPORT jint JNICALL\n+jint JNICALL\n JNI_GetCreatedJavaVMs (JavaVM **vm_buffer, jsize buf_len, jsize *n_vms)\n {\n   if (buf_len <= 0)"}]}