{"sha": "59a63247992eb13153b82c4902aadf111460eac2", "node_id": "C_kwDOANBUbNoAKDU5YTYzMjQ3OTkyZWIxMzE1M2I4MmM0OTAyYWFkZjExMTQ2MGVhYzI", "commit": {"author": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2022-11-10T21:30:27Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2022-11-12T20:03:28Z"}, "message": "Fortran: fix treatment of character, value, optional dummy arguments [PR107444]\n\nFix handling of character dummy arguments that have the optional+value\nattribute.  Change name of internal symbols that carry the hidden presence\nstatus of optional arguments to distinguish them from the internal hidden\ncharacter length.  Update documentation to clarify the gfortran ABI.\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/107444\n\t* trans-decl.cc (create_function_arglist): Extend presence status\n\tto all intrinsic types, and change prefix of internal symbol to '.'.\n\t* trans-expr.cc (gfc_conv_expr_present): Align to changes in\n\tcreate_function_arglist.\n\t(gfc_conv_procedure_call): Fix generation of procedure arguments for\n\tthe case of character dummy arguments with optional+value attribute.\n\t* trans-types.cc (gfc_get_function_type): Synchronize with changes\n\tto create_function_arglist.\n\t* doc/gfortran/naming-and-argument-passing-conventions.rst: Clarify\n\tthe gfortran argument passing conventions with regard to OPTIONAL\n\tdummy arguments of intrinsic type.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/107444\n\t* gfortran.dg/optional_absent_7.f90: Adjust regex.\n\t* gfortran.dg/optional_absent_8.f90: New test.", "tree": {"sha": "be43ce02582ae5ddd62d4d5f542891da8288e8d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be43ce02582ae5ddd62d4d5f542891da8288e8d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59a63247992eb13153b82c4902aadf111460eac2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59a63247992eb13153b82c4902aadf111460eac2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59a63247992eb13153b82c4902aadf111460eac2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59a63247992eb13153b82c4902aadf111460eac2/comments", "author": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b556d1773db7174c71c466d9b3cafc25c7d6c825", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b556d1773db7174c71c466d9b3cafc25c7d6c825", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b556d1773db7174c71c466d9b3cafc25c7d6c825"}], "stats": {"total": 107, "additions": 84, "deletions": 23}, "files": [{"sha": "fa999fac3553bf8d26b6d30a93583523f5c0f0c1", "filename": "gcc/fortran/doc/gfortran/naming-and-argument-passing-conventions.rst", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59a63247992eb13153b82c4902aadf111460eac2/gcc%2Ffortran%2Fdoc%2Fgfortran%2Fnaming-and-argument-passing-conventions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59a63247992eb13153b82c4902aadf111460eac2/gcc%2Ffortran%2Fdoc%2Fgfortran%2Fnaming-and-argument-passing-conventions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdoc%2Fgfortran%2Fnaming-and-argument-passing-conventions.rst?ref=59a63247992eb13153b82c4902aadf111460eac2", "patch": "@@ -142,8 +142,7 @@ is used for dummy arguments; with ``VALUE``, those variables are\n passed by value.\n \n For ``OPTIONAL`` dummy arguments, an absent argument is denoted\n-by a NULL pointer, except for scalar dummy arguments of type\n-``INTEGER``, ``LOGICAL``, ``REAL`` and ``COMPLEX``\n+by a NULL pointer, except for scalar dummy arguments of intrinsic type\n which have the ``VALUE`` attribute.  For those, a hidden Boolean\n argument (``logical(kind=C_bool),value``) is used to indicate\n whether the argument is present."}, {"sha": "217de6b8da04cba8fb1e2241e4f7bd63e73acd34", "filename": "gcc/fortran/trans-decl.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59a63247992eb13153b82c4902aadf111460eac2/gcc%2Ffortran%2Ftrans-decl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59a63247992eb13153b82c4902aadf111460eac2/gcc%2Ffortran%2Ftrans-decl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.cc?ref=59a63247992eb13153b82c4902aadf111460eac2", "patch": "@@ -2708,16 +2708,16 @@ create_function_arglist (gfc_symbol * sym)\n \t\ttype = gfc_sym_type (f->sym);\n \t    }\n \t}\n-      /* For noncharacter scalar intrinsic types, VALUE passes the value,\n+      /* For scalar intrinsic types, VALUE passes the value,\n \t hence, the optional status cannot be transferred via a NULL pointer.\n \t Thus, we will use a hidden argument in that case.  */\n-      else if (f->sym->attr.optional && f->sym->attr.value\n-\t       && !f->sym->attr.dimension && f->sym->ts.type != BT_CLASS\n-\t       && !gfc_bt_struct (f->sym->ts.type))\n+      if (f->sym->attr.optional && f->sym->attr.value\n+\t  && !f->sym->attr.dimension && f->sym->ts.type != BT_CLASS\n+\t  && !gfc_bt_struct (f->sym->ts.type))\n \t{\n           tree tmp;\n           strcpy (&name[1], f->sym->name);\n-          name[0] = '_';\n+\t  name[0] = '.';\n           tmp = build_decl (input_location,\n \t\t\t    PARM_DECL, get_identifier (name),\n \t\t\t    boolean_type_node);"}, {"sha": "b95c5cf2f96114f052fcf1ed45ed78ebab59547a", "filename": "gcc/fortran/trans-expr.cc", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59a63247992eb13153b82c4902aadf111460eac2/gcc%2Ffortran%2Ftrans-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59a63247992eb13153b82c4902aadf111460eac2/gcc%2Ffortran%2Ftrans-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.cc?ref=59a63247992eb13153b82c4902aadf111460eac2", "patch": "@@ -1985,15 +1985,14 @@ gfc_conv_expr_present (gfc_symbol * sym, bool use_saved_desc)\n \n   /* Intrinsic scalars with VALUE attribute which are passed by value\n      use a hidden argument to denote the present status.  */\n-  if (sym->attr.value && sym->ts.type != BT_CHARACTER\n-      && sym->ts.type != BT_CLASS && sym->ts.type != BT_DERIVED\n-      && !sym->attr.dimension)\n+  if (sym->attr.value && !sym->attr.dimension\n+      && sym->ts.type != BT_CLASS && !gfc_bt_struct (sym->ts.type))\n     {\n       char name[GFC_MAX_SYMBOL_LEN + 2];\n       tree tree_name;\n \n       gcc_assert (TREE_CODE (decl) == PARM_DECL);\n-      name[0] = '_';\n+      name[0] = '.';\n       strcpy (&name[1], sym->name);\n       tree_name = get_identifier (name);\n \n@@ -6162,11 +6161,21 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \t\t value, pass \"0\" and a hidden argument gives the optional\n \t\t status.  */\n \t      if (fsym && fsym->attr.optional && fsym->attr.value\n-\t\t  && !fsym->attr.dimension && fsym->ts.type != BT_CHARACTER\n-\t\t  && fsym->ts.type != BT_CLASS && fsym->ts.type != BT_DERIVED)\n+\t\t  && !fsym->attr.dimension && fsym->ts.type != BT_CLASS\n+\t\t  && !gfc_bt_struct (sym->ts.type))\n \t\t{\n-\t\t  parmse.expr = fold_convert (gfc_sym_type (fsym),\n-\t\t\t\t\t      integer_zero_node);\n+\t\t  if (fsym->ts.type == BT_CHARACTER)\n+\t\t    {\n+\t\t      /* Pass a NULL pointer for an absent CHARACTER arg\n+\t\t\t and a length of zero.  */\n+\t\t      parmse.expr = null_pointer_node;\n+\t\t      parmse.string_length\n+\t\t\t= build_int_cst (gfc_charlen_type_node,\n+\t\t\t\t\t 0);\n+\t\t    }\n+\t\t  else\n+\t\t    parmse.expr = fold_convert (gfc_sym_type (fsym),\n+\t\t\t\t\t\tinteger_zero_node);\n \t\t  vec_safe_push (optionalargs, boolean_false_node);\n \t\t}\n \t      else"}, {"sha": "196f2cecbfc6592e15dab85c72e5c9d2e98d7e8b", "filename": "gcc/fortran/trans-types.cc", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59a63247992eb13153b82c4902aadf111460eac2/gcc%2Ffortran%2Ftrans-types.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59a63247992eb13153b82c4902aadf111460eac2/gcc%2Ffortran%2Ftrans-types.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.cc?ref=59a63247992eb13153b82c4902aadf111460eac2", "patch": "@@ -3225,15 +3225,15 @@ gfc_get_function_type (gfc_symbol * sym, gfc_actual_arglist *actual_args,\n \n \t  vec_safe_push (hidden_typelist, type);\n \t}\n-      /* For noncharacter scalar intrinsic types, VALUE passes the value,\n+      /* For scalar intrinsic types, VALUE passes the value,\n \t hence, the optional status cannot be transferred via a NULL pointer.\n \t Thus, we will use a hidden argument in that case.  */\n-      else if (arg\n-\t       && arg->attr.optional\n-\t       && arg->attr.value\n-\t       && !arg->attr.dimension\n-\t       && arg->ts.type != BT_CLASS\n-\t       && !gfc_bt_struct (arg->ts.type))\n+      if (arg\n+\t  && arg->attr.optional\n+\t  && arg->attr.value\n+\t  && !arg->attr.dimension\n+\t  && arg->ts.type != BT_CLASS\n+\t  && !gfc_bt_struct (arg->ts.type))\n \tvec_safe_push (typelist, boolean_type_node);\n       /* Coarrays which are descriptorless or assumed-shape pass with\n \t -fcoarray=lib the token and the offset as hidden arguments.  */"}, {"sha": "163d0b67cb69853773b2a6dda9e8b8c052c66de2", "filename": "gcc/testsuite/gfortran.dg/optional_absent_7.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59a63247992eb13153b82c4902aadf111460eac2/gcc%2Ftestsuite%2Fgfortran.dg%2Foptional_absent_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59a63247992eb13153b82c4902aadf111460eac2/gcc%2Ftestsuite%2Fgfortran.dg%2Foptional_absent_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Foptional_absent_7.f90?ref=59a63247992eb13153b82c4902aadf111460eac2", "patch": "@@ -27,5 +27,5 @@ subroutine s(c, o)\n   end subroutine s\n end program p\n \n-! { dg-final { scan-tree-dump \"void s .* c, .* o, logical.* _o, integer.* _c\" \"original\" } }\n+! { dg-final { scan-tree-dump \"void s .* c, .* o, logical.* \\.o, integer.* _c\" \"original\" } }\n ! { dg-final { scan-tree-dump \", integer.*, logical.*, integer.* pp\" \"original\" } }"}, {"sha": "e3c04451f3bc6e2d905e1d679e8005dd5c42b5a5", "filename": "gcc/testsuite/gfortran.dg/optional_absent_8.f90", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59a63247992eb13153b82c4902aadf111460eac2/gcc%2Ftestsuite%2Fgfortran.dg%2Foptional_absent_8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59a63247992eb13153b82c4902aadf111460eac2/gcc%2Ftestsuite%2Fgfortran.dg%2Foptional_absent_8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Foptional_absent_8.f90?ref=59a63247992eb13153b82c4902aadf111460eac2", "patch": "@@ -0,0 +1,53 @@\n+! { dg-do run }\n+! PR fortran/107444\n+!\n+! Check that procedures with optional arguments that have the value attribute\n+! work for intrinsic types including character, and that the presence check\n+! works.\n+!\n+! Co-contributed by M.Morin\n+\n+program p\n+  implicit none\n+  interface\n+     subroutine i(c, o)\n+       character(*) :: c\n+       character(3), optional, value :: o\n+     end subroutine i\n+  end interface\n+  procedure(i), pointer :: pp\n+  call s([.false.,.false.,.false.],  0)\n+  call s([.true., .false.,.false.], 10, i=7)\n+  call s([.false.,.true. ,.false.], 20, c='abc')\n+  call s([.false.,.false.,.true. ], 30, r=3.0)\n+  pp => f\n+  call pp (\"abcd\", \"xyz\")\n+contains\n+  subroutine s (expect,code,i,c,r)\n+    logical, intent(in)           :: expect(:)\n+    integer, intent(in)           :: code\n+    integer     , value, optional :: i\n+    character(3), value, optional :: c\n+    real        , value, optional :: r\n+    if (expect(1) .neqv. present (i)) stop 1+code\n+    if (expect(2) .neqv. present (c)) stop 2+code\n+    if (expect(3) .neqv. present (r)) stop 3+code\n+    if (present (i)) then\n+       if (i /= 7) stop 4+code\n+    end if\n+    if (present (c)) then\n+       if (c /= \"abc\") stop 5+code\n+    end if\n+    if (present (r)) then\n+       if (r /= 3.0) stop 6+code\n+    end if\n+  end subroutine s\n+  subroutine f (c, o)\n+    character(*) :: c\n+    character(3), optional, value :: o\n+    if (c /= \"abcd\") stop 41\n+    if (len (c) /= 4) stop 42\n+    if (.not. present (o)) stop 43\n+    if (o /= \"xyz\")  stop 44\n+  end subroutine f\n+end"}]}