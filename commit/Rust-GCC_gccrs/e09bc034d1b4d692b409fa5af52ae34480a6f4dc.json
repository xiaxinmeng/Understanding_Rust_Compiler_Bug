{"sha": "e09bc034d1b4d692b409fa5af52ae34480a6f4dc", "node_id": "C_kwDOANBUbNoAKGUwOWJjMDM0ZDFiNGQ2OTJiNDA5ZmE1YWY1MmFlMzQ0ODBhNmY0ZGM", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2023-03-03T16:24:24Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2023-03-07T14:51:52Z"}, "message": "c++: error with constexpr operator() [PR107939]\n\nSimilarly to PR107938, this also started with r11-557, whereby cp_finish_decl\ncan call check_initializer even in a template for a constexpr initializer.\n\nHere we are rejecting\n\n  extern const Q q;\n\n  template<int>\n  constexpr auto p = q(0);\n\neven though q has a constexpr operator().  It's deemed non-const by\ndecl_maybe_constant_var_p because even though 'q' is const it is not\nof integral/enum type.\n\nIf fun is not a function pointer, we don't know if we're using it as an\nlvalue or rvalue, so with this patch we pass 'any' for want_rval.  With\nthat, p_c_e/VAR_DECL doesn't flat out reject the underlying VAR_DECL.\n\n\tPR c++/107939\n\ngcc/cp/ChangeLog:\n\n\t* constexpr.cc (potential_constant_expression_1) <case CALL_EXPR>: Pass\n\t'any' when recursing on a VAR_DECL and not a pointer to function.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp1y/var-templ74.C: Remove dg-error.\n\t* g++.dg/cpp1y/var-templ77.C: New test.", "tree": {"sha": "08a42ccc44decc40190c46b600d0f6945694b872", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08a42ccc44decc40190c46b600d0f6945694b872"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e09bc034d1b4d692b409fa5af52ae34480a6f4dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e09bc034d1b4d692b409fa5af52ae34480a6f4dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e09bc034d1b4d692b409fa5af52ae34480a6f4dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e09bc034d1b4d692b409fa5af52ae34480a6f4dc/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "247cacc9e381d666a492dfa4ed61b7b19e2d008f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/247cacc9e381d666a492dfa4ed61b7b19e2d008f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/247cacc9e381d666a492dfa4ed61b7b19e2d008f"}], "stats": {"total": 42, "additions": 39, "deletions": 3}, "files": [{"sha": "3079561f2e88730421e998f24749435c72802526", "filename": "gcc/cp/constexpr.cc", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e09bc034d1b4d692b409fa5af52ae34480a6f4dc/gcc%2Fcp%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e09bc034d1b4d692b409fa5af52ae34480a6f4dc/gcc%2Fcp%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.cc?ref=e09bc034d1b4d692b409fa5af52ae34480a6f4dc", "patch": "@@ -9179,8 +9179,12 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict, bool now,\n \t  }\n \telse if (fun)\n           {\n-\t    if (RECUR (fun, rval))\n-\t      /* Might end up being a constant function pointer.  */;\n+\t    if (RECUR (fun, FUNCTION_POINTER_TYPE_P (fun) ? rval : any))\n+\t      /* Might end up being a constant function pointer.  But it\n+\t\t could also be a function object with constexpr op(), so\n+\t\t we pass 'any' so that the underlying VAR_DECL is deemed\n+\t\t as potentially-constant even though it wasn't declared\n+\t\t constexpr.  */;\n \t    else\n \t      return false;\n           }"}, {"sha": "c76a7d949ac99ab62d404e3b1e5e6bf6b83746f3", "filename": "gcc/testsuite/g++.dg/cpp1y/var-templ74.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e09bc034d1b4d692b409fa5af52ae34480a6f4dc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ74.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e09bc034d1b4d692b409fa5af52ae34480a6f4dc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ74.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ74.C?ref=e09bc034d1b4d692b409fa5af52ae34480a6f4dc", "patch": "@@ -9,7 +9,7 @@ struct Q {\n extern const Q q;\n \n template<int>\n-constexpr const Q* p = q(0); // { dg-bogus \"not usable\" \"PR107939\" { xfail *-*-* } }\n+constexpr const Q* p = q(0);\n \n void\n g ()"}, {"sha": "0c56d70a03425365222a1e4017ac4ad48ffd8dca", "filename": "gcc/testsuite/g++.dg/cpp1y/var-templ77.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e09bc034d1b4d692b409fa5af52ae34480a6f4dc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ77.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e09bc034d1b4d692b409fa5af52ae34480a6f4dc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ77.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ77.C?ref=e09bc034d1b4d692b409fa5af52ae34480a6f4dc", "patch": "@@ -0,0 +1,32 @@\n+// PR c++/107939\n+// { dg-do compile { target c++14 } }\n+\n+struct Q {\n+  struct P {\n+    const Q* p;\n+  };\n+  int n;\n+  constexpr P operator()(int) const { return {this}; }\n+};\n+\n+extern const Q q;\n+template<int>\n+constexpr auto p = q(0);\n+static_assert(p<0>.p == &q, \"\");\n+\n+constexpr int\n+fn (int)\n+{\n+  return 42;\n+}\n+\n+struct Sur {\n+  using FN = int(int);\n+  constexpr operator FN*() const { return &fn; }\n+};\n+\n+extern const Sur sur;\n+template<int>\n+constexpr int aja = sur (0);\n+static_assert(aja<0> == 42, \"\");\n+static_assert(sur(1) == 42, \"\");"}]}