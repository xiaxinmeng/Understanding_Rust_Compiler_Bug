{"sha": "1f6821b4dcdcc3bf95f6aa4551cc755e113162be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWY2ODIxYjRkY2RjYzNiZjk1ZjZhYTQ1NTFjYzc1NWUxMTMxNjJiZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-15T10:46:56Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-15T10:46:56Z"}, "message": "[multiple changes]\n\n2009-04-15  Robert Dewar  <dewar@adacore.com>\n\n\t* frontend.adb (Frontend): Set proper default for\n\tWarn_On_Non_Local_Exception.\n\n\t* opt.ads (Exception_Handler_Encountered): New flag\n\t(No_Warn_On_Non_Local_Exception): New flag\n\n\t* par-ch11.adb (P_Exception_Handler): Set Exception_Handler_Encountered\n\n\t* sem_warn.adb (Set_Warning_Switch): Set No_Warn_On_Non_Local_Exception\n\t(Set_Dot_Warning_Switch): Set No_Warn_On_Non_Local_Exception\n\n2009-04-15  Cyrille Comar  <comar@adacore.com>\n\n\t* s-tassta.adb, a-exextr.adb, a-elchha.adb\n\t(Ada.Exception.Last_Chance_Handler): Do not print unhandled exception\n\tmessage when exception traces are active since it would generate\n\tredundant information.\n\t(Exception_Traces.Notify_Exception): put message output by a critical\n\tsection to avoid unsynchronized output.\n\t(Trace_Unhandled_Exception_In_Task): put message output by a critical\n\tsection to avoid unsynchronized output.\n\n2009-04-15  Emmanuel Briot  <briot@adacore.com>\n\n\t* g-comlin.adb, prj-tree.adb, prj-tree.ads, prj.adb, prj.ads\n\t(Free): New subprogram.\n\nFrom-SVN: r146100", "tree": {"sha": "10bddee8ce636cf702726cb420bef283041bab7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10bddee8ce636cf702726cb420bef283041bab7d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f6821b4dcdcc3bf95f6aa4551cc755e113162be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f6821b4dcdcc3bf95f6aa4551cc755e113162be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f6821b4dcdcc3bf95f6aa4551cc755e113162be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f6821b4dcdcc3bf95f6aa4551cc755e113162be/comments", "author": null, "committer": null, "parents": [{"sha": "507ed3fd5bb9f377bade052259a61d53d3a7bedc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/507ed3fd5bb9f377bade052259a61d53d3a7bedc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/507ed3fd5bb9f377bade052259a61d53d3a7bedc"}], "stats": {"total": 165, "additions": 148, "deletions": 17}, "files": [{"sha": "99395eb41910ca283efc62052ae79e89e1235027", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f6821b4dcdcc3bf95f6aa4551cc755e113162be/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f6821b4dcdcc3bf95f6aa4551cc755e113162be/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1f6821b4dcdcc3bf95f6aa4551cc755e113162be", "patch": "@@ -1,3 +1,32 @@\n+2009-04-15  Robert Dewar  <dewar@adacore.com>\n+\n+\t* frontend.adb (Frontend): Set proper default for\n+\tWarn_On_Non_Local_Exception.\n+\n+\t* opt.ads (Exception_Handler_Encountered): New flag\n+\t(No_Warn_On_Non_Local_Exception): New flag\n+\n+\t* par-ch11.adb (P_Exception_Handler): Set Exception_Handler_Encountered\n+\n+\t* sem_warn.adb (Set_Warning_Switch): Set No_Warn_On_Non_Local_Exception\n+\t(Set_Dot_Warning_Switch): Set No_Warn_On_Non_Local_Exception\n+\n+2009-04-15  Cyrille Comar  <comar@adacore.com>\n+\n+\t* s-tassta.adb, a-exextr.adb, a-elchha.adb\n+\t(Ada.Exception.Last_Chance_Handler): Do not print unhandled exception\n+\tmessage when exception traces are active since it would generate\n+\tredundant information.\n+\t(Exception_Traces.Notify_Exception): put message output by a critical\n+\tsection to avoid unsynchronized output.\n+\t(Trace_Unhandled_Exception_In_Task): put message output by a critical\n+\tsection to avoid unsynchronized output.\n+\n+2009-04-15  Emmanuel Briot  <briot@adacore.com>\n+\n+\t* g-comlin.adb, prj-tree.adb, prj-tree.ads, prj.adb, prj.ads\n+\t(Free): New subprogram.\n+\n 2009-04-15  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* a-calend.adb: Add new constant Nanos_In_Four_Years."}, {"sha": "087e22f4ffbf4dca6ece9b429f95d02aa049b30a", "filename": "gcc/ada/a-elchha.adb", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f6821b4dcdcc3bf95f6aa4551cc755e113162be/gcc%2Fada%2Fa-elchha.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f6821b4dcdcc3bf95f6aa4551cc755e113162be/gcc%2Fada%2Fa-elchha.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-elchha.adb?ref=1f6821b4dcdcc3bf95f6aa4551cc755e113162be", "patch": "@@ -79,7 +79,7 @@ begin\n    System.Soft_Links.Task_Termination_Handler :=\n      System.Soft_Links.Task_Termination_NT'Access;\n \n-   --  Let's shutdown the runtime now. The rest of the procedure needs to be\n+   --  We shutdown the runtime now. The rest of the procedure needs to be\n    --  careful not to use anything that would require runtime support. In\n    --  particular, functions returning strings are banned since the sec stack\n    --  is no longer functional. This is particularly important to note for the\n@@ -93,11 +93,16 @@ begin\n \n    System.Standard_Library.Adafinal;\n \n+   --  Print a message only when exception traces are not active\n+\n+   if Exception_Trace /= RM_Convention then\n+      null;\n+\n    --  Check for special case of raising _ABORT_SIGNAL, which is not\n    --  really an exception at all. We recognize this by the fact that\n    --  it is the only exception whose name starts with underscore.\n \n-   if To_Ptr (Except.Id.Full_Name) (1) = '_' then\n+   elsif To_Ptr (Except.Id.Full_Name) (1) = '_' then\n       To_Stderr (Nline);\n       To_Stderr (\"Execution terminated by abort of environment task\");\n       To_Stderr (Nline);"}, {"sha": "2ea9a3ad1e550c7a426f4f88ffbfb968984cca9d", "filename": "gcc/ada/a-exextr.adb", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f6821b4dcdcc3bf95f6aa4551cc755e113162be/gcc%2Fada%2Fa-exextr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f6821b4dcdcc3bf95f6aa4551cc755e113162be/gcc%2Fada%2Fa-exextr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-exextr.adb?ref=1f6821b4dcdcc3bf95f6aa4551cc755e113162be", "patch": "@@ -101,9 +101,13 @@ package body Exception_Traces is\n \n       if not Excep.Id.Not_Handled_By_Others\n         and then\n-        (Exception_Trace = Every_Raise\n-          or else (Exception_Trace = Unhandled_Raise and then Is_Unhandled))\n+          (Exception_Trace = Every_Raise\n+            or else (Exception_Trace = Unhandled_Raise and then Is_Unhandled))\n       then\n+         --  Exception trace messages need to be protected when several tasks\n+         --  can issue them at the same time.\n+\n+         Lock_Task.all;\n          To_Stderr (Nline);\n \n          if Is_Unhandled then\n@@ -113,6 +117,7 @@ package body Exception_Traces is\n          To_Stderr (\"Exception raised\");\n          To_Stderr (Nline);\n          To_Stderr (Tailored_Exception_Information (Excep.all));\n+         Unlock_Task.all;\n       end if;\n \n       --  Call the user-specific actions"}, {"sha": "5fd28221533b4bdf230ad6b8f522d712eb5eb2e2", "filename": "gcc/ada/frontend.adb", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f6821b4dcdcc3bf95f6aa4551cc755e113162be/gcc%2Fada%2Ffrontend.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f6821b4dcdcc3bf95f6aa4551cc755e113162be/gcc%2Fada%2Ffrontend.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffrontend.adb?ref=1f6821b4dcdcc3bf95f6aa4551cc755e113162be", "patch": "@@ -43,6 +43,8 @@ with Opt;      use Opt;\n with Osint;\n with Par;\n with Prepcomp;\n+with Restrict; use Restrict;\n+with Rident;   use Rident;\n with Rtsfind;\n with Sprint;\n with Scn;      use Scn;\n@@ -64,12 +66,12 @@ procedure Frontend is\n    --  Gather configuration pragmas\n \n begin\n-   --  Carry out package initializations. These are initializations which\n-   --  might logically be performed at elaboration time, were it not for\n-   --  the fact that we may be doing things more than once in the big loop\n-   --  over files. Like elaboration, the order in which these calls are\n-   --  made is in some cases important. For example, Lib cannot be\n-   --  initialized until Namet, since it uses names table entries.\n+   --  Carry out package initializations. These are initializations which might\n+   --  logically be performed at elaboration time, were it not for the fact\n+   --  that we may be doing things more than once in the big loop over files.\n+   --  Like elaboration, the order in which these calls are made is in some\n+   --  cases important. For example, Lib cannot be initialized until Namet,\n+   --  since it uses names table entries.\n \n    Rtsfind.Initialize;\n    Atree.Initialize;\n@@ -275,6 +277,17 @@ begin\n       end;\n    end if;\n \n+   --  If we have restriction No_Exception_Propagation, and we did not have\n+   --  an explicit switch turning off Warn_On_Local_Exception, then turn on\n+   --  this warning by default if we have encountered an exception handler.\n+\n+   if Restriction_Active (No_Exception_Propagation)\n+     and then not No_Warn_On_Non_Local_Exception\n+     and then Exception_Handler_Encountered\n+   then\n+      Warn_On_Non_Local_Exception := True;\n+   end if;\n+\n    --  Now on to the semantics. Skip if in syntax only mode\n \n    if Operating_Mode /= Check_Syntax then"}, {"sha": "9564ff2d75411e82d3cfc313b80cb3e78c465fcb", "filename": "gcc/ada/g-comlin.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f6821b4dcdcc3bf95f6aa4551cc755e113162be/gcc%2Fada%2Fg-comlin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f6821b4dcdcc3bf95f6aa4551cc755e113162be/gcc%2Fada%2Fg-comlin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-comlin.adb?ref=1f6821b4dcdcc3bf95f6aa4551cc755e113162be", "patch": "@@ -2449,6 +2449,8 @@ package body GNAT.Command_Line is\n          Free (Config.Aliases);\n          Free (Config.Expansions);\n          Free (Config.Prefixes);\n+         Free (Config.Sections);\n+         Free (Config.Switches);\n          Unchecked_Free (Config);\n       end if;\n    end Free;"}, {"sha": "547afefb5f5338f6d5c7962c0df6b3695bb94873", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f6821b4dcdcc3bf95f6aa4551cc755e113162be/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f6821b4dcdcc3bf95f6aa4551cc755e113162be/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=1f6821b4dcdcc3bf95f6aa4551cc755e113162be", "patch": "@@ -415,6 +415,12 @@ package Opt is\n    --  to make a single long message, and then this message is split up into\n    --  multiple lines not exceeding the specified length. Set by -gnatj=nn.\n \n+   Exception_Handler_Encountered : Boolean := False;\n+   --  GNAT\n+   --  This flag is set true if the parser encounters an exception handler.\n+   --  It is used to set Warn_On_Exception_Propagation True if the restriction\n+   --  No_Exception_Propagation is set.\n+\n    Exception_Locations_Suppressed : Boolean := False;\n    --  GNAT\n    --  This flag is set True if a Suppress_Exception_Locations configuration\n@@ -1309,7 +1315,15 @@ package Opt is\n    --  Set to True to generate warnings for non-local exception raises and also\n    --  handlers that can never handle a local raise. This warning is only ever\n    --  generated if pragma Restrictions (No_Exception_Propagation) is set. The\n-   --  default is not to generate the warnings even if the restriction is set.\n+   --  default is not to generate the warnings except that if the source has\n+   --  at least one exception, and this restriction is set, and the warning\n+   --  was not explicitly turned off, then it is turned on by default.\n+\n+   No_Warn_On_Non_Local_Exception : Boolean := False;\n+   --  GNAT\n+   --  This is set to True if the above warning is explicitly suppressed. We\n+   --  use this to avoid turning it on by default when No_Exception_Propagation\n+   --  restriction is set.\n \n    Warn_On_Obsolescent_Feature : Boolean := False;\n    --  GNAT"}, {"sha": "14129bc62308c1246c6b1ad22c7d24c0278c3f5b", "filename": "gcc/ada/par-ch11.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f6821b4dcdcc3bf95f6aa4551cc755e113162be/gcc%2Fada%2Fpar-ch11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f6821b4dcdcc3bf95f6aa4551cc755e113162be/gcc%2Fada%2Fpar-ch11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch11.adb?ref=1f6821b4dcdcc3bf95f6aa4551cc755e113162be", "patch": "@@ -92,6 +92,7 @@ package body Ch11 is\n       Choice_Param_Node : Node_Id;\n \n    begin\n+      Exception_Handler_Encountered := True;\n       Handler_Node := New_Node (N_Exception_Handler, Token_Ptr);\n       Set_Local_Raise_Statements (Handler_Node, No_Elist);\n "}, {"sha": "61a329fcb027fd8548003dec07c7985d3530ae99", "filename": "gcc/ada/prj-tree.adb", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f6821b4dcdcc3bf95f6aa4551cc755e113162be/gcc%2Fada%2Fprj-tree.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f6821b4dcdcc3bf95f6aa4551cc755e113162be/gcc%2Fada%2Fprj-tree.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-tree.adb?ref=1f6821b4dcdcc3bf95f6aa4551cc755e113162be", "patch": "@@ -23,6 +23,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n+with Ada.Unchecked_Deallocation;\n with Prj.Err;\n \n package body Prj.Tree is\n@@ -984,6 +985,21 @@ package body Prj.Tree is\n       Projects_Htable.Reset (Tree.Projects_HT);\n    end Initialize;\n \n+   ----------\n+   -- Free --\n+   ----------\n+\n+   procedure Free (Prj : in out Project_Node_Tree_Ref) is\n+      procedure Unchecked_Free is new Ada.Unchecked_Deallocation\n+        (Project_Node_Tree_Data, Project_Node_Tree_Ref);\n+   begin\n+      if Prj /= null then\n+         Project_Node_Table.Free (Prj.Project_Nodes);\n+         Projects_Htable.Reset (Prj.Projects_HT);\n+         Unchecked_Free (Prj);\n+      end if;\n+   end Free;\n+\n    -------------------------------\n    -- Is_Followed_By_Empty_Line --\n    -------------------------------"}, {"sha": "75961ff08e1aec3b7b7f6cbb7f7b3dfaf2c6e18a", "filename": "gcc/ada/prj-tree.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f6821b4dcdcc3bf95f6aa4551cc755e113162be/gcc%2Fada%2Fprj-tree.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f6821b4dcdcc3bf95f6aa4551cc755e113162be/gcc%2Fada%2Fprj-tree.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-tree.ads?ref=1f6821b4dcdcc3bf95f6aa4551cc755e113162be", "patch": "@@ -1300,6 +1300,9 @@ package Prj.Tree is\n    end record;\n    --  The data for a project node tree\n \n+   procedure Free (Prj : in out Project_Node_Tree_Ref);\n+   --  Free memory used by Prj\n+\n private\n    type Comment_Array is array (Positive range <>) of Comment_Data;\n    type Comments_Ptr is access Comment_Array;"}, {"sha": "6c26bc182a35853476c4b94451ed2cc48e234b9e", "filename": "gcc/ada/prj.adb", "status": "modified", "additions": 41, "deletions": 6, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f6821b4dcdcc3bf95f6aa4551cc755e113162be/gcc%2Fada%2Fprj.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f6821b4dcdcc3bf95f6aa4551cc755e113162be/gcc%2Fada%2Fprj.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj.adb?ref=1f6821b4dcdcc3bf95f6aa4551cc755e113162be", "patch": "@@ -24,6 +24,7 @@\n ------------------------------------------------------------------------------\n \n with Ada.Characters.Handling; use Ada.Characters.Handling;\n+with Ada.Unchecked_Deallocation;\n \n with Debug;\n with Output;   use Output;\n@@ -826,17 +827,51 @@ package body Prj is\n       end if;\n    end Register_Default_Naming_Scheme;\n \n+   ----------\n+   -- Free --\n+   ----------\n+\n+   procedure Free (Tree : in out Project_Tree_Ref) is\n+      procedure Unchecked_Free is new Ada.Unchecked_Deallocation\n+        (Project_Tree_Data, Project_Tree_Ref);\n+   begin\n+      if Tree /= null then\n+         Language_Data_Table.Free (Tree.Languages_Data);\n+         Name_List_Table.Free (Tree.Name_Lists);\n+         String_Element_Table.Free (Tree.String_Elements);\n+         Variable_Element_Table.Free (Tree.Variable_Elements);\n+         Array_Element_Table.Free (Tree.Array_Elements);\n+         Array_Table.Free (Tree.Arrays);\n+         Package_Table.Free (Tree.Packages);\n+         Project_List_Table.Free (Tree.Project_Lists);\n+         Project_Table.Free (Tree.Projects);\n+         Source_Data_Table.Free (Tree.Sources);\n+         Alternate_Language_Table.Free (Tree.Alt_Langs);\n+         Unit_Table.Free (Tree.Units);\n+         Units_Htable.Reset (Tree.Units_HT);\n+         Files_Htable.Reset (Tree.Files_HT);\n+         Source_Paths_Htable.Reset (Tree.Source_Paths_HT);\n+         Unit_Sources_Htable.Reset (Tree.Unit_Sources_HT);\n+\n+         --  Private part\n+\n+         Naming_Table.Free (Tree.Private_Part.Namings);\n+         Path_File_Table.Free (Tree.Private_Part.Path_Files);\n+         Source_Path_Table.Free (Tree.Private_Part.Source_Paths);\n+         Object_Path_Table.Free (Tree.Private_Part.Object_Paths);\n+\n+         --  Naming data (nothing to free ?)\n+         null;\n+\n+         Unchecked_Free (Tree);\n+      end if;\n+   end Free;\n+\n    -----------\n    -- Reset --\n    -----------\n \n    procedure Reset (Tree : Project_Tree_Ref) is\n-\n-      --  Def_Lang : constant Name_Node :=\n-      --             (Name => Name_Ada,\n-      --              Next => No_Name_List);\n-      --  Why is the above commented out ???\n-\n    begin\n       Prj.Env.Initialize;\n "}, {"sha": "0d506338055507fee32b52e1e36b6d93c21093e5", "filename": "gcc/ada/prj.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f6821b4dcdcc3bf95f6aa4551cc755e113162be/gcc%2Fada%2Fprj.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f6821b4dcdcc3bf95f6aa4551cc755e113162be/gcc%2Fada%2Fprj.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj.ads?ref=1f6821b4dcdcc3bf95f6aa4551cc755e113162be", "patch": "@@ -116,6 +116,9 @@ package Prj is\n \n    No_Project_Tree : constant Project_Tree_Ref;\n \n+   procedure Free (Tree : in out Project_Tree_Ref);\n+   --  Free memory associated with the tree\n+\n    function Default_Ada_Spec_Suffix return File_Name_Type;\n    pragma Inline (Default_Ada_Spec_Suffix);\n    --  The name for the standard GNAT suffix for Ada spec source file name"}, {"sha": "836f332334caf6c21826409547b12de016bad636", "filename": "gcc/ada/s-tassta.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f6821b4dcdcc3bf95f6aa4551cc755e113162be/gcc%2Fada%2Fs-tassta.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f6821b4dcdcc3bf95f6aa4551cc755e113162be/gcc%2Fada%2Fs-tassta.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tassta.adb?ref=1f6821b4dcdcc3bf95f6aa4551cc755e113162be", "patch": "@@ -1388,6 +1388,7 @@ package body System.Tasking.Stages is\n       --  unwound. The common notification routine has been called at the\n       --  raise point already.\n \n+      Initialization.Task_Lock (Self_Id);\n       To_Stderr (\"task \");\n \n       if Self_Id.Common.Task_Image_Len /= 0 then\n@@ -1400,6 +1401,7 @@ package body System.Tasking.Stages is\n       To_Stderr (\" terminated by unhandled exception\");\n       To_Stderr ((1 => ASCII.LF));\n       To_Stderr (Tailored_Exception_Information (Excep.all));\n+      Initialization.Task_Unlock (Self_Id);\n    end Trace_Unhandled_Exception_In_Task;\n \n    ------------------------------------"}, {"sha": "29a850a6e0a123e20ecff3c9b50f44ea6e0453c3", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f6821b4dcdcc3bf95f6aa4551cc755e113162be/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f6821b4dcdcc3bf95f6aa4551cc755e113162be/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=1f6821b4dcdcc3bf95f6aa4551cc755e113162be", "patch": "@@ -3006,6 +3006,7 @@ package body Sem_Warn is\n \n          when 'X' =>\n             Warn_On_Non_Local_Exception         := False;\n+            No_Warn_On_Non_Local_Exception      := True;\n \n          when others =>\n             return False;\n@@ -3079,6 +3080,8 @@ package body Sem_Warn is\n             Warn_On_Unrepped_Components         := False;\n             Warn_On_Warnings_Off                := False;\n \n+            No_Warn_On_Non_Local_Exception      := True;\n+\n          when 'b' =>\n             Warn_On_Bad_Fixed_Value             := True;\n "}]}