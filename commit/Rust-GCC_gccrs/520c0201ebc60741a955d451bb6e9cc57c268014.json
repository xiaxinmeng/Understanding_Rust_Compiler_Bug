{"sha": "520c0201ebc60741a955d451bb6e9cc57c268014", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTIwYzAyMDFlYmM2MDc0MWE5NTVkNDUxYmI2ZTljYzU3YzI2ODAxNA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-18T12:33:46Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-18T12:33:46Z"}, "message": "[multiple changes]\n\n2016-04-18  Arnaud Charlet  <charlet@adacore.com>\n\n\t* osint-c.ads, osint-c.adb (Delete_C_File, Delete_H_File): New.\n\t* gnat1drv.adb (Gnat1drv): Delete old C files before regenerating them.\n\t* debug.adb: Reserve -gnatd.4 to force generation of C files.\n\n2016-04-18  Yannick Moy  <moy@adacore.com>\n\n\t* sem_eval.adb (Eval_Arithmetic_Op): Do not issue error on static\n\tdivision by zero, instead possibly issue a warning.\n\t* sem_res.adb (Resolve_Arithmetic_Op): Do not issue error on\n\tstatic division by zero, instead add check flag on original\n\texpression.\n\t* sem_util.adb, sem_util.ads (Compile_Time_Constraint_Error):\n\tOnly issue error when both SPARK_Mode is On and Warn is False.\n\n2016-04-18  Yannick Moy  <moy@adacore.com>\n\n\t* checks.adb (Apply_Scalar_Range_Check): Force\n\twarning instead of error when SPARK_Mode is On, on index out of\n\tbounds, and set check flag for GNATprove.\n\nFrom-SVN: r235138", "tree": {"sha": "783e6520a642cfa7cdf10a2ad41167a9372dc11b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/783e6520a642cfa7cdf10a2ad41167a9372dc11b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/520c0201ebc60741a955d451bb6e9cc57c268014", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/520c0201ebc60741a955d451bb6e9cc57c268014", "html_url": "https://github.com/Rust-GCC/gccrs/commit/520c0201ebc60741a955d451bb6e9cc57c268014", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/520c0201ebc60741a955d451bb6e9cc57c268014/comments", "author": null, "committer": null, "parents": [{"sha": "274c2cda3e077975c406ae5549813652c4f76289", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/274c2cda3e077975c406ae5549813652c4f76289", "html_url": "https://github.com/Rust-GCC/gccrs/commit/274c2cda3e077975c406ae5549813652c4f76289"}], "stats": {"total": 155, "additions": 126, "deletions": 29}, "files": [{"sha": "2b8e6aeeb788af9f61d2591de7180826f5c7cae0", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/520c0201ebc60741a955d451bb6e9cc57c268014/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/520c0201ebc60741a955d451bb6e9cc57c268014/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=520c0201ebc60741a955d451bb6e9cc57c268014", "patch": "@@ -1,3 +1,25 @@\n+2016-04-18  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* osint-c.ads, osint-c.adb (Delete_C_File, Delete_H_File): New.\n+\t* gnat1drv.adb (Gnat1drv): Delete old C files before regenerating them.\n+\t* debug.adb: Reserve -gnatd.4 to force generation of C files.\n+\n+2016-04-18  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_eval.adb (Eval_Arithmetic_Op): Do not issue error on static\n+\tdivision by zero, instead possibly issue a warning.\n+\t* sem_res.adb (Resolve_Arithmetic_Op): Do not issue error on\n+\tstatic division by zero, instead add check flag on original\n+\texpression.\n+\t* sem_util.adb, sem_util.ads (Compile_Time_Constraint_Error):\n+\tOnly issue error when both SPARK_Mode is On and Warn is False.\n+\n+2016-04-18  Yannick Moy  <moy@adacore.com>\n+\n+\t* checks.adb (Apply_Scalar_Range_Check): Force\n+\twarning instead of error when SPARK_Mode is On, on index out of\n+\tbounds, and set check flag for GNATprove.\n+\n 2016-04-18  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_prag.adb (Check_In_Out_States.Check_Constituent_Usage):"}, {"sha": "e6eab0c3b0d9fba8d9ba7830601d0050da759b41", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/520c0201ebc60741a955d451bb6e9cc57c268014/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/520c0201ebc60741a955d451bb6e9cc57c268014/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=520c0201ebc60741a955d451bb6e9cc57c268014", "patch": "@@ -2749,19 +2749,22 @@ package body Checks is\n       --  Set to True if Expr should be regarded as a real value even though\n       --  the type of Expr might be discrete.\n \n-      procedure Bad_Value;\n-      --  Procedure called if value is determined to be out of range\n+      procedure Bad_Value (Warn : Boolean := False);\n+      --  Procedure called if value is determined to be out of range. Warn is\n+      --  True to force a warning instead of an error, even when SPARK_Mode is\n+      --  On.\n \n       ---------------\n       -- Bad_Value --\n       ---------------\n \n-      procedure Bad_Value is\n+      procedure Bad_Value (Warn : Boolean := False) is\n       begin\n          Apply_Compile_Time_Constraint_Error\n            (Expr, \"value not in range of}??\", CE_Range_Check_Failed,\n-            Ent => Target_Typ,\n-            Typ => Target_Typ);\n+            Ent  => Target_Typ,\n+            Typ  => Target_Typ,\n+            Warn => Warn);\n       end Bad_Value;\n \n    --  Start of processing for Apply_Scalar_Range_Check\n@@ -2968,18 +2971,17 @@ package body Checks is\n \n                   if Lov > Hiv then\n \n-                     --  In GNATprove mode, do not issue a message in that case\n-                     --  (which would be an error stopping analysis), as this\n-                     --  likely corresponds to deactivated code based on a\n-                     --  given configuration (say, dead code inside a loop over\n-                     --  the empty range). Instead, we enable the range check\n-                     --  so that GNATprove will issue a message if it cannot be\n-                     --  proved.\n+                     --  When SPARK_Mode is On, force a warning instead of\n+                     --  an error in that case, as this likely corresponds\n+                     --  to deactivated code.\n+\n+                     Bad_Value (Warn => SPARK_Mode = On);\n+\n+                     --  In GNATprove mode, we enable the range check so that\n+                     --  GNATprove will issue a message if it cannot be proved.\n \n                      if GNATprove_Mode then\n                         Enable_Range_Check (Expr);\n-                     else\n-                        Bad_Value;\n                      end if;\n \n                      return;"}, {"sha": "52de7a1405df46710666237434c5733b90d258d6", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/520c0201ebc60741a955d451bb6e9cc57c268014/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/520c0201ebc60741a955d451bb6e9cc57c268014/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=520c0201ebc60741a955d451bb6e9cc57c268014", "patch": "@@ -158,7 +158,7 @@ package body Debug is\n    --  d.1  Enable unnesting of nested procedures\n    --  d.2  Allow statements in declarative part\n    --  d.3  Output debugging information from Exp_Unst\n-   --  d.4\n+   --  d.4  Do not delete generated C file in case of errors\n    --  d.5  Do not generate imported subprogram definitions in C code\n    --  d.6\n    --  d.7\n@@ -762,6 +762,9 @@ package body Debug is\n    --  d.3  Output debugging information from Exp_Unst, including the name of\n    --       any unreachable subprograms that get deleted.\n \n+   --  d.4  By default in case of an error during C generation, the .c or .h\n+   --       file is delete. This flag keeps the C file.\n+\n    --  d.5  By default a subprogram imported generates a subprogram profile.\n    --       This debug flag disables this generation when generating C code,\n    --       assuming a proper #include will be used instead."}, {"sha": "bc52f41ae913614737214ff941a2beff532114e8", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/520c0201ebc60741a955d451bb6e9cc57c268014/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/520c0201ebc60741a955d451bb6e9cc57c268014/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=520c0201ebc60741a955d451bb6e9cc57c268014", "patch": "@@ -46,6 +46,7 @@ with Namet;    use Namet;\n with Nlists;\n with Opt;      use Opt;\n with Osint;    use Osint;\n+with Osint.C;  use Osint.C;\n with Output;   use Output;\n with Par_SCO;\n with Prepcomp;\n@@ -1078,6 +1079,13 @@ begin\n          Comperr.Delete_SCIL_Files;\n       end if;\n \n+      --  Ditto for old C files before regenerating new ones\n+\n+      if Generate_C_Code then\n+         Delete_C_File;\n+         Delete_H_File;\n+      end if;\n+\n       --  Exit if compilation errors detected\n \n       Errout.Finalize (Last_Call => False);"}, {"sha": "919f188a8e4d3ce00f0661ffa7571791298e0888", "filename": "gcc/ada/osint-c.adb", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/520c0201ebc60741a955d451bb6e9cc57c268014/gcc%2Fada%2Fosint-c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/520c0201ebc60741a955d451bb6e9cc57c268014/gcc%2Fada%2Fosint-c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fosint-c.adb?ref=520c0201ebc60741a955d451bb6e9cc57c268014", "patch": "@@ -292,6 +292,28 @@ package body Osint.C is\n       end if;\n    end Debug_File_Eol_Length;\n \n+   -------------------\n+   -- Delete_C_File --\n+   -------------------\n+\n+   procedure Delete_C_File is\n+      Dummy : Boolean;\n+   begin\n+      Set_File_Name (\"c\");\n+      Delete_File (Name_Buffer (1 .. Name_Len), Dummy);\n+   end Delete_C_File;\n+\n+   -------------------\n+   -- Delete_H_File --\n+   -------------------\n+\n+   procedure Delete_H_File is\n+      Dummy : Boolean;\n+   begin\n+      Set_File_Name (\"h\");\n+      Delete_File (Name_Buffer (1 .. Name_Len), Dummy);\n+   end Delete_H_File;\n+\n    ---------------------------------\n    -- Get_Output_Object_File_Name --\n    ---------------------------------"}, {"sha": "54ffb01f6014b432467dccdc5a0fdbb1637ac184", "filename": "gcc/ada/osint-c.ads", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/520c0201ebc60741a955d451bb6e9cc57c268014/gcc%2Fada%2Fosint-c.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/520c0201ebc60741a955d451bb6e9cc57c268014/gcc%2Fada%2Fosint-c.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fosint-c.ads?ref=520c0201ebc60741a955d451bb6e9cc57c268014", "patch": "@@ -159,7 +159,7 @@ package Osint.C is\n    --------------------------\n \n    --  These routines are used by the compiler when the C translation option\n-   --  is activated to write *.c and *.h files to the current object directory.\n+   --  is activated to write *.c or *.h files to the current object directory.\n    --  Each routine exists in a C and an H form for the two kinds of files.\n    --  Only one of these files can be written at a time. Note that the files\n    --  are written via the Output package routines, using Output_FD.\n@@ -175,6 +175,11 @@ package Osint.C is\n    --  Closes the file created by Create_C_File or Create_H file, flushing any\n    --  buffers etc. from writes by Write_C_File and Write_H_File;\n \n+   procedure Delete_C_File;\n+   procedure Delete_H_File;\n+   --  Deletes the .c or .h file corresponding to the source file which is\n+   --  currently being compiled.\n+\n    ----------------------\n    -- List File Output --\n    ----------------------"}, {"sha": "9703943bdd1ea6693c39cf724b0b1e1595d09def", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/520c0201ebc60741a955d451bb6e9cc57c268014/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/520c0201ebc60741a955d451bb6e9cc57c268014/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=520c0201ebc60741a955d451bb6e9cc57c268014", "patch": "@@ -1885,9 +1885,14 @@ package body Sem_Eval is\n                   --  division, rem and mod if the right operand is zero.\n \n                   if Right_Int = 0 then\n+\n+                     --  When SPARK_Mode is On, force a warning instead of\n+                     --  an error in that case, as this likely corresponds\n+                     --  to deactivated code.\n+\n                      Apply_Compile_Time_Constraint_Error\n                        (N, \"division by zero\", CE_Divide_By_Zero,\n-                        Warn => not Stat);\n+                        Warn => not Stat or SPARK_Mode = On);\n                      Set_Raises_Constraint_Error (N);\n                      return;\n \n@@ -1903,10 +1908,16 @@ package body Sem_Eval is\n                   --  division, rem and mod if the right operand is zero.\n \n                   if Right_Int = 0 then\n+\n+                     --  When SPARK_Mode is On, force a warning instead of\n+                     --  an error in that case, as this likely corresponds\n+                     --  to deactivated code.\n+\n                      Apply_Compile_Time_Constraint_Error\n                        (N, \"mod with zero divisor\", CE_Divide_By_Zero,\n-                        Warn => not Stat);\n+                        Warn => not Stat or SPARK_Mode = On);\n                      return;\n+\n                   else\n                      Result := Left_Int mod Right_Int;\n                   end if;\n@@ -1917,9 +1928,14 @@ package body Sem_Eval is\n                   --  division, rem and mod if the right operand is zero.\n \n                   if Right_Int = 0 then\n+\n+                     --  When SPARK_Mode is On, force a warning instead of\n+                     --  an error in that case, as this likely corresponds\n+                     --  to deactivated code.\n+\n                      Apply_Compile_Time_Constraint_Error\n                        (N, \"rem with zero divisor\", CE_Divide_By_Zero,\n-                        Warn => not Stat);\n+                        Warn => not Stat or SPARK_Mode = On);\n                      return;\n \n                   else"}, {"sha": "67807723a920a273ef825e690139882e4f237c61", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/520c0201ebc60741a955d451bb6e9cc57c268014/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/520c0201ebc60741a955d451bb6e9cc57c268014/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=520c0201ebc60741a955d451bb6e9cc57c268014", "patch": "@@ -5440,7 +5440,9 @@ package body Sem_Res is\n                              and then Expr_Value_R (Rop) = Ureal_0))\n             then\n                --  Specialize the warning message according to the operation.\n-               --  The following warnings are for the case\n+               --  When SPARK_Mode is On, force a warning instead of an error\n+               --  in that case, as this likely corresponds to deactivated\n+               --  code. The following warnings are for the case\n \n                case Nkind (N) is\n                   when N_Op_Divide =>\n@@ -5459,23 +5461,26 @@ package body Sem_Res is\n                           (\"float division by zero, may generate \"\n                            & \"'+'/'- infinity??\", Right_Opnd (N));\n \n-                        --  For all other cases, we get a Constraint_Error\n+                     --  For all other cases, we get a Constraint_Error\n \n                      else\n                         Apply_Compile_Time_Constraint_Error\n                           (N, \"division by zero??\", CE_Divide_By_Zero,\n-                           Loc => Sloc (Right_Opnd (N)));\n+                           Loc  => Sloc (Right_Opnd (N)),\n+                           Warn => SPARK_Mode = On);\n                      end if;\n \n                   when N_Op_Rem =>\n                      Apply_Compile_Time_Constraint_Error\n                        (N, \"rem with zero divisor??\", CE_Divide_By_Zero,\n-                        Loc => Sloc (Right_Opnd (N)));\n+                        Loc  => Sloc (Right_Opnd (N)),\n+                        Warn => SPARK_Mode = On);\n \n                   when N_Op_Mod =>\n                      Apply_Compile_Time_Constraint_Error\n                        (N, \"mod with zero divisor??\", CE_Divide_By_Zero,\n-                        Loc => Sloc (Right_Opnd (N)));\n+                        Loc  => Sloc (Right_Opnd (N)),\n+                        Warn => SPARK_Mode = On);\n \n                   --  Division by zero can only happen with division, rem,\n                   --  and mod operations.\n@@ -5484,6 +5489,13 @@ package body Sem_Res is\n                      raise Program_Error;\n                end case;\n \n+               --  In GNATprove mode, we enable the division check so that\n+               --  GNATprove will issue a message if it cannot be proved.\n+\n+               if GNATprove_Mode then\n+                  Activate_Division_Check (N);\n+               end if;\n+\n             --  Otherwise just set the flag to check at run time\n \n             else"}, {"sha": "348da03b26fa915d5a1221d8b75cf32d106c9b40", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/520c0201ebc60741a955d451bb6e9cc57c268014/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/520c0201ebc60741a955d451bb6e9cc57c268014/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=520c0201ebc60741a955d451bb6e9cc57c268014", "patch": "@@ -4574,9 +4574,16 @@ package body Sem_Util is\n \n    begin\n       --  If this is a warning, convert it into an error if we are in code\n-      --  subject to SPARK_Mode being set ON.\n+      --  subject to SPARK_Mode being set On, unless Warn is True to force a\n+      --  warning. The rationale is that a compile-time constraint error should\n+      --  lead to an error instead of a warning when SPARK_Mode is On, but in\n+      --  a few cases we prefer to issue a warning and generate both a suitable\n+      --  run-time error in GNAT and a suitable check message in GNATprove.\n+      --  Those cases are those that likely correspond to deactivated SPARK\n+      --  code, so that this kind of code can be compiled and analyzed instead\n+      --  of being rejected.\n \n-      Error_Msg_Warn := SPARK_Mode /= On;\n+      Error_Msg_Warn := Warn or SPARK_Mode /= On;\n \n       --  A static constraint error in an instance body is not a fatal error.\n       --  we choose to inhibit the message altogether, because there is no\n@@ -4648,8 +4655,6 @@ package body Sem_Util is\n          --  evaluated.\n \n          if not Is_Statically_Unevaluated (N) then\n-            Error_Msg_Warn := SPARK_Mode /= On;\n-\n             if Present (Ent) then\n                Error_Msg_NEL (Msgc (1 .. Msgl), N, Ent, Eloc);\n             else"}, {"sha": "494a9e4d39cfc1121d274e1b4bb35c98475a13b5", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/520c0201ebc60741a955d451bb6e9cc57c268014/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/520c0201ebc60741a955d451bb6e9cc57c268014/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=520c0201ebc60741a955d451bb6e9cc57c268014", "patch": "@@ -135,7 +135,9 @@ package Sem_Util is\n    --  is present, this is used instead. Warn is normally False. If it is\n    --  True then the message is treated as a warning even though it does\n    --  not end with a ? (this is used when the caller wants to parameterize\n-   --  whether an error or warning is given).\n+   --  whether an error or warning is given), or when the message should be\n+   --  treated as a warning even when SPARK_Mode is On (which otherwise would\n+   --  force an error).\n \n    function Async_Readers_Enabled (Id : Entity_Id) return Boolean;\n    --  Given the entity of an abstract state or a variable, determine whether"}]}