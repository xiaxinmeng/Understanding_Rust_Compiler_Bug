{"sha": "b318e4049b9e6083495f7b06ef3d3aa6175ac518", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjMxOGU0MDQ5YjllNjA4MzQ5NWY3YjA2ZWYzZDNhYTYxNzVhYzUxOA==", "commit": {"author": {"name": "Basile Starynkevitch", "email": "basile@starynkevitch.net", "date": "2014-03-18T19:16:52Z"}, "committer": {"name": "Basile Starynkevitch", "email": "bstarynk@gcc.gnu.org", "date": "2014-03-18T19:16:52Z"}, "message": "plugin.def: Improve comment for PLUGIN_INCLUDE_FILE.\n\n\n2014-03-18  Basile Starynkevitch  <basile@starynkevitch.net>\n\n        * plugin.def: Improve comment for PLUGIN_INCLUDE_FILE.\n        * doc/plugins.texi (Plugin callbacks): Mention\n        PLUGIN_INCLUDE_FILE.\n        Italicize plugin event names in description.  Explain that\n        PLUGIN_PRAGMAS has no sense for lto1. Explain\n        PLUGIN_INCLUDE_FILE.\n        Remind that no GCC functions should be called after\n        PLUGIN_FINISH.\n        Explain what pragmas with expansion are.\n\nFrom-SVN: r208660", "tree": {"sha": "7fdd1e0bd7f4ead8ef006a246eaa2176aa0e0ac7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7fdd1e0bd7f4ead8ef006a246eaa2176aa0e0ac7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b318e4049b9e6083495f7b06ef3d3aa6175ac518", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b318e4049b9e6083495f7b06ef3d3aa6175ac518", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b318e4049b9e6083495f7b06ef3d3aa6175ac518", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b318e4049b9e6083495f7b06ef3d3aa6175ac518/comments", "author": {"login": "bstarynk", "id": 90412, "node_id": "MDQ6VXNlcjkwNDEy", "avatar_url": "https://avatars.githubusercontent.com/u/90412?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstarynk", "html_url": "https://github.com/bstarynk", "followers_url": "https://api.github.com/users/bstarynk/followers", "following_url": "https://api.github.com/users/bstarynk/following{/other_user}", "gists_url": "https://api.github.com/users/bstarynk/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstarynk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstarynk/subscriptions", "organizations_url": "https://api.github.com/users/bstarynk/orgs", "repos_url": "https://api.github.com/users/bstarynk/repos", "events_url": "https://api.github.com/users/bstarynk/events{/privacy}", "received_events_url": "https://api.github.com/users/bstarynk/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ba2f8afa6b463e261c1d8f1d05d574e92282a603", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba2f8afa6b463e261c1d8f1d05d574e92282a603", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba2f8afa6b463e261c1d8f1d05d574e92282a603"}], "stats": {"total": 66, "additions": 53, "deletions": 13}, "files": [{"sha": "520b1894d25e647eced92d5772736d7cc8c870bb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b318e4049b9e6083495f7b06ef3d3aa6175ac518/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b318e4049b9e6083495f7b06ef3d3aa6175ac518/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b318e4049b9e6083495f7b06ef3d3aa6175ac518", "patch": "@@ -1,3 +1,16 @@\n+\n+2014-03-18  Basile Starynkevitch  <basile@starynkevitch.net>\n+\n+        * plugin.def: Improve comment for PLUGIN_INCLUDE_FILE.\n+        * doc/plugins.texi (Plugin callbacks): Mention\n+        PLUGIN_INCLUDE_FILE.\n+        Italicize plugin event names in description.  Explain that\n+        PLUGIN_PRAGMAS has no sense for lto1. Explain\n+        PLUGIN_INCLUDE_FILE.\n+        Remind that no GCC functions should be called after\n+        PLUGIN_FINISH.\n+        Explain what pragmas with expansion are.\n+\n 2014-03-18  Martin Liska  <mliska@suse.cz>\n \n \t* cgraph.c (cgraph_update_edges_for_call_stmt_node): Added case when"}, {"sha": "4a839b8abade926d5b10fb52c9011747a5a4eda7", "filename": "gcc/doc/plugins.texi", "status": "modified", "additions": 38, "deletions": 11, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b318e4049b9e6083495f7b06ef3d3aa6175ac518/gcc%2Fdoc%2Fplugins.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b318e4049b9e6083495f7b06ef3d3aa6175ac518/gcc%2Fdoc%2Fplugins.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fplugins.texi?ref=b318e4049b9e6083495f7b06ef3d3aa6175ac518", "patch": "@@ -209,6 +209,10 @@ enum plugin_event\n   PLUGIN_EARLY_GIMPLE_PASSES_END,\n   /* Called when a pass is first instantiated.  */\n   PLUGIN_NEW_PASS,\n+/* Called when a file is #include-d or given via the #line directive.\n+   This could happen many times.  The event data is the included file path,\n+   as a const char* pointer.  */\n+  PLUGIN_INCLUDE_FILE,\n \n   PLUGIN_EVENT_FIRST_DYNAMIC    /* Dummy event used for indexing callback\n                                    array.  */\n@@ -229,14 +233,26 @@ the arguments:\n @item @code{void *user_data}: Pointer to plugin-specific data.\n @end itemize\n \n-For the PLUGIN_PASS_MANAGER_SETUP, PLUGIN_INFO, PLUGIN_REGISTER_GGC_ROOTS\n-and PLUGIN_REGISTER_GGC_CACHES pseudo-events the @code{callback} should be\n-null, and the @code{user_data} is specific.\n+For the @i{PLUGIN_PASS_MANAGER_SETUP}, @i{PLUGIN_INFO},\n+@i{PLUGIN_REGISTER_GGC_ROOTS} and @i{PLUGIN_REGISTER_GGC_CACHES}\n+pseudo-events the @code{callback} should be null, and the\n+@code{user_data} is specific.\n+\n+When the @i{PLUGIN_PRAGMAS} event is triggered (with a null pointer as\n+data from GCC), plugins may register their own pragmas.  Notice that\n+pragmas are not available from @file{lto1}, so plugins used with\n+@code{-flto} option to GCC during link-time optimization cannot use\n+pragmas and do not even see functions like @code{c_register_pragma} or\n+@code{pragma_lex}.\n+\n+The @i{PLUGIN_INCLUDE_FILE} event, with a @code{const char*} file path as\n+GCC data, is triggered for processing of @code{#include} or\n+@code{#line} directives.\n+\n+The @i{PLUGIN_FINISH} event is the last time that plugins can call GCC\n+functions, notably emit diagnostics with @code{warning}, @code{error}\n+etc.\n \n-When the PLUGIN_PRAGMAS event is triggered (with a null\n-pointer as data from GCC), plugins may register their own pragmas\n-using functions like @code{c_register_pragma} or\n-@code{c_register_pragma_with_expansion}.\n \n @node Plugins pass\n @section Interacting with the pass manager\n@@ -376,10 +392,13 @@ register_attributes (void *event_data, void *data)\n @end smallexample\n \n \n-The @code{PLUGIN_PRAGMAS} callback is called during pragmas\n-registration. Use the @code{c_register_pragma} or\n-@code{c_register_pragma_with_expansion} functions to register custom\n-pragmas.\n+The @i{PLUGIN_PRAGMAS} callback is called once during pragmas\n+registration. Use the @code{c_register_pragma},\n+@code{c_register_pragma_with_data},\n+@code{c_register_pragma_with_expansion},\n+@code{c_register_pragma_with_expansion_and_data} functions to register\n+custom pragmas and their handlers (which often want to call\n+@code{pragma_lex}) from @file{c-family/c-pragma.h}.\n \n @smallexample\n /* Plugin callback called during pragmas registration. Registered with\n@@ -397,6 +416,14 @@ register_my_pragma (void *event_data, void *data)\n It is suggested to pass @code{\"GCCPLUGIN\"} (or a short name identifying\n your plugin) as the ``space'' argument of your pragma.\n \n+Pragmas registered with @code{c_register_pragma_with_expansion} or\n+@code{c_register_pragma_with_expansion_and_data} support\n+preprocessor expansions. For example:\n+\n+@smallexample\n+#define NUMBER 10\n+#pragma GCCPLUGIN foothreshold (NUMBER)\n+@end smallexample\n \n @node Plugins recording\n @section Recording information about pass execution"}, {"sha": "df5d383ca936ac5956b87931f2e194d4d59adec9", "filename": "gcc/plugin.def", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b318e4049b9e6083495f7b06ef3d3aa6175ac518/gcc%2Fplugin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b318e4049b9e6083495f7b06ef3d3aa6175ac518/gcc%2Fplugin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fplugin.def?ref=b318e4049b9e6083495f7b06ef3d3aa6175ac518", "patch": "@@ -92,8 +92,8 @@ DEFEVENT (PLUGIN_EARLY_GIMPLE_PASSES_END)\n /* Called when a pass is first instantiated.  */\n DEFEVENT (PLUGIN_NEW_PASS)\n \n-/* Called when a file is #include-d or given thru #line directive.\n-   Could happen many times.  The event data is the included file path,\n+/* Called when a file is #include-d or given via the #line directive.\n+   this could happen many times.  The event data is the included file path,\n    as a const char* pointer.  */\n DEFEVENT (PLUGIN_INCLUDE_FILE)\n "}]}