{"sha": "5eefcf2f003dc46fc4c8a115c23a53b60e3a2952", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWVlZmNmMmYwMDNkYzQ2ZmM0YzhhMTE1YzIzYTUzYjYwZTNhMjk1Mg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@airs.com", "date": "2005-02-09T21:40:00Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2005-02-09T21:40:00Z"}, "message": "re PR middle-end/19583 (Incorrect diagnostic: control may reach end of non-void function '...' being inlined)\n\n\tPR middle-end/19583\n\t* gimple-low.c (try_catch_may_fallthru): In EH_FILTER_EXPR case,\n\tjust check whether EH_FILTER_FAILURE falls through.\n\nFrom-SVN: r94777", "tree": {"sha": "1cfa53065918b3c69e7ee64ec9afd266b459f879", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1cfa53065918b3c69e7ee64ec9afd266b459f879"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5eefcf2f003dc46fc4c8a115c23a53b60e3a2952", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5eefcf2f003dc46fc4c8a115c23a53b60e3a2952", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5eefcf2f003dc46fc4c8a115c23a53b60e3a2952", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5eefcf2f003dc46fc4c8a115c23a53b60e3a2952/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "328d1d4c1c902bfa35bfdb69d7b22afca3a68e14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/328d1d4c1c902bfa35bfdb69d7b22afca3a68e14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/328d1d4c1c902bfa35bfdb69d7b22afca3a68e14"}], "stats": {"total": 25, "additions": 16, "deletions": 9}, "files": [{"sha": "37d3e05899a96ec10ea92f6c377a5704c9046f0c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eefcf2f003dc46fc4c8a115c23a53b60e3a2952/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eefcf2f003dc46fc4c8a115c23a53b60e3a2952/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5eefcf2f003dc46fc4c8a115c23a53b60e3a2952", "patch": "@@ -1,3 +1,9 @@\n+2005-02-09  Ian Lance Taylor  <ian@airs.com>\n+\n+\tPR middle-end/19583\n+\t* gimple-low.c (try_catch_may_fallthru): In EH_FILTER_EXPR case,\n+\tjust check whether EH_FILTER_FAILURE falls through.\n+\n 2005-02-09  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n \t* gcc/haifa-sched.c (schedule_block): Make queued sched group"}, {"sha": "f3e70ee716d600b4b1ed7045825e35271951973e", "filename": "gcc/gimple-low.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eefcf2f003dc46fc4c8a115c23a53b60e3a2952/gcc%2Fgimple-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eefcf2f003dc46fc4c8a115c23a53b60e3a2952/gcc%2Fgimple-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-low.c?ref=5eefcf2f003dc46fc4c8a115c23a53b60e3a2952", "patch": "@@ -291,15 +291,16 @@ try_catch_may_fallthru (tree stmt)\n       return false;\n \n     case EH_FILTER_EXPR:\n-      /* If the exception does not match EH_FILTER_TYPES, we will\n-\t execute EH_FILTER_FAILURE, and we will fall through if that\n-\t falls through.  If the exception does match EH_FILTER_TYPES,\n-\t we will fall through.  We don't know which exceptions may be\n-\t generated, so we just check for EH_FILTER_TYPES being NULL,\n-\t in which case we know that that the exception does not\n-\t match.  */\n-      return (EH_FILTER_TYPES (tsi_stmt (i)) != NULL\n-\t      || block_may_fallthru (EH_FILTER_FAILURE (tsi_stmt (i))));\n+      /* The exception filter expression only matters if there is an\n+\t exception.  If the exception does not match EH_FILTER_TYPES,\n+\t we will execute EH_FILTER_FAILURE, and we will fall through\n+\t if that falls through.  If the exception does match\n+\t EH_FILTER_TYPES, the stack unwinder will continue up the\n+\t stack, so we will not fall through.  We don't know whether we\n+\t will throw an exception which matches EH_FILTER_TYPES or not,\n+\t so we just ignore EH_FILTER_TYPES and assume that we might\n+\t throw an exception which doesn't match.  */\n+      return block_may_fallthru (EH_FILTER_FAILURE (tsi_stmt (i)));\n \n     default:\n       /* This case represents statements to be executed when an"}]}